// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 214, 217, 190, 151, 29, 151, 62, 12, 146, 67, 189, 56, 39, 166, 190, 39, 229, 5, 191, 245, 125, 83, 62, 38, 127, 0, 63, 171, 191, 9, 190, 101, 170, 183, 60, 0, 149, 9, 191, 140, 255, 3, 191, 196, 120, 12, 61, 172, 134, 17, 191, 213, 217, 9, 190, 250, 10, 0, 191, 176, 215, 92, 62, 15, 106, 210, 61, 24, 122, 254, 62, 69, 186, 254, 60, 171, 59, 241, 190, 240, 254, 53, 62, 244, 227, 109, 62, 155, 149, 242, 62, 99, 3, 155, 62, 96, 197, 5, 191, 189, 146, 139, 62, 32, 25, 75, 190, 114, 151, 151, 62, 252, 38, 17, 63, 176, 57, 31, 190, 186, 164, 14, 63, 105, 163, 131, 62, 34, 201, 149, 62, 134, 161, 252, 190, 138, 165, 27, 62, 2, 113, 227, 62, 65, 96, 150, 189, 176, 141, 157, 62, 95, 164, 210, 188, 154, 19, 133, 190, 48, 104, 38, 190, 197, 41, 197, 190, 215, 24, 235, 62, 52, 237, 241, 62, 14, 230, 1, 191, 126, 34, 171, 59, 93, 28, 154, 60, 86, 250, 85, 190, 215, 231, 227, 187, 198, 65, 138, 190, 33, 246, 241, 190, 157, 0, 252, 190, 217, 8, 86, 58, 234, 253, 8, 190, 210, 166, 244, 62, 218, 177, 12, 61, 174, 40, 40, 189, 38, 255, 4, 191, 229, 155, 154, 62, 42, 191, 159, 62, 138, 124, 221, 190, 114, 28, 15, 191, 1, 213, 94, 62, 131, 44, 25, 62, 83, 168, 139, 62, 221, 67, 133, 62, 251, 185, 229, 62, 170, 188, 157, 190, 245, 1, 101, 190, 204, 30, 123, 60, 193, 119, 215, 61, 237, 139, 204, 62, 68, 231, 201, 62, 148, 97, 136, 190, 189, 19, 200, 189, 90, 189, 23, 189, 89, 154, 123, 190, 192, 44, 190, 190, 128, 115, 169, 61, 198, 200, 178, 62, 231, 7, 10, 191, 146, 8, 230, 186, 45, 155, 6, 63, 209, 202, 146, 62, 176, 1, 231, 62, 158, 159, 19, 62, 81, 55, 202, 62, 191, 210, 169, 190, 58, 224, 125, 62, 110, 126, 218, 190, 215, 67, 133, 190, 60, 234, 18, 191, 124, 174, 202, 189, 240, 23, 120, 62, 164, 113, 1, 63, 55, 196, 153, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 204, 19, 191, 72, 250, 26, 61, 163, 0, 84, 62, 62, 171, 195, 62, 138, 94, 74, 62, 160, 33, 195, 189, 252, 167, 204, 62, 160, 165, 198, 189, 123, 112, 140, 190, 104, 213, 28, 62, 99, 141, 149, 190, 88, 40, 51, 62, 25, 96, 134, 190, 142, 7, 155, 190, 154, 18, 127, 188, 205, 59, 239, 62, 96, 218, 15, 63, 81, 92, 4, 63, 109, 202, 131, 190, 235, 90, 2, 63, 203, 206, 193, 62, 206, 181, 217, 62, 52, 164, 19, 63, 92, 41, 48, 190, 236, 233, 207, 189, 86, 111, 48, 61, 26, 185, 204, 190, 137, 239, 34, 61, 211, 20, 129, 61, 208, 37, 201, 190, 42, 207, 241, 190, 97, 219, 11, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 29, 132, 189, 8, 27, 12, 62, 87, 52, 92, 61, 57, 47, 253, 189, 7, 79, 131, 61, 165, 91, 37, 189, 82, 151, 34, 189, 16, 6, 192, 184, 159, 54, 255, 189, 252, 132, 252, 60, 54, 57, 250, 61, 194, 125, 2, 61, 39, 224, 36, 62, 218, 157, 162, 60, 246, 195, 254, 189, 162, 249, 46, 62, 181, 30, 4, 189, 211, 172, 1, 190, 117, 247, 187, 60, 203, 122, 179, 189, 207, 15, 133, 187, 127, 91, 80, 188, 45, 239, 38, 62, 45, 100, 7, 190, 37, 102, 217, 189, 146, 224, 130, 189, 167, 51, 59, 61, 7, 37, 7, 190, 241, 9, 91, 61, 21, 37, 48, 61, 195, 114, 219, 61, 2, 149, 182, 189, 74, 74, 32, 189, 165, 222, 214, 189, 21, 191, 42, 190, 221, 107, 17, 62, 226, 226, 212, 188, 44, 154, 1, 190, 236, 1, 34, 62, 110, 225, 1, 189, 38, 134, 5, 190, 159, 158, 11, 62, 31, 166, 19, 190, 40, 152, 244, 189, 165, 74, 27, 190, 137, 2, 67, 189, 58, 206, 178, 189, 194, 26, 4, 190, 89, 6, 205, 61, 167, 113, 129, 188, 142, 233, 89, 189, 75, 39, 138, 188, 36, 179, 223, 61, 104, 72, 28, 62, 99, 155, 91, 61, 164, 46, 206, 189, 236, 9, 130, 61, 168, 11, 20, 62, 172, 237, 180, 189, 44, 165, 2, 62, 97, 119, 38, 188, 29, 0, 10, 59, 184, 98, 17, 61, 104, 240, 229, 61, 77, 179, 90, 188, 151, 105, 35, 62, 231, 57, 64, 61, 219, 183, 175, 188, 35, 27, 235, 61, 57, 214, 136, 61, 204, 105, 146, 61, 145, 93, 48, 62, 9, 132, 36, 62, 174, 88, 254, 61, 38, 141, 152, 189, 11, 203, 88, 60, 184, 58, 167, 59, 127, 146, 15, 190, 5, 0, 249, 188, 247, 49, 222, 60, 211, 84, 8, 62, 167, 170, 173, 188, 230, 90, 166, 61, 16, 176, 5, 62, 72, 36, 156, 61, 170, 190, 217, 61, 50, 140, 149, 61, 97, 5, 175, 61, 110, 27, 46, 190, 24, 194, 11, 62, 19, 190, 16, 60, 27, 117, 84, 188, 168, 106, 29, 190, 196, 136, 154, 61, 155, 24, 128, 187, 66, 211, 114, 61, 173, 139, 217, 189, 108, 214, 22, 62, 180, 118, 4, 62, 172, 51, 13, 62, 97, 147, 126, 60, 24, 160, 2, 190, 41, 207, 143, 188, 11, 43, 49, 62, 19, 250, 205, 189, 52, 85, 156, 188, 138, 108, 133, 189, 88, 213, 169, 59, 135, 30, 10, 62, 206, 146, 174, 188, 121, 19, 60, 188, 203, 9, 222, 61, 162, 69, 67, 189, 241, 225, 208, 189, 20, 179, 52, 62, 48, 209, 250, 189, 155, 247, 60, 61, 73, 126, 40, 61, 205, 205, 52, 190, 123, 179, 52, 190, 146, 237, 197, 61, 173, 155, 164, 61, 237, 237, 130, 189, 46, 76, 238, 188, 210, 35, 132, 61, 167, 189, 130, 61, 199, 105, 213, 189, 17, 152, 243, 61, 141, 2, 238, 61, 253, 201, 18, 190, 90, 109, 23, 190, 240, 40, 191, 61, 221, 163, 59, 61, 114, 49, 207, 189, 14, 106, 207, 189, 21, 172, 23, 190, 75, 0, 33, 189, 4, 179, 35, 62, 83, 7, 34, 62, 80, 130, 31, 189, 59, 27, 167, 189, 43, 37, 139, 61, 22, 96, 156, 189, 231, 120, 200, 61, 85, 138, 205, 61, 147, 148, 224, 188, 106, 188, 157, 189, 90, 151, 221, 189, 36, 236, 48, 190, 180, 36, 223, 189, 54, 243, 46, 62, 20, 83, 185, 189, 165, 129, 231, 61, 12, 158, 3, 190, 243, 128, 19, 189, 58, 71, 18, 61, 174, 246, 233, 189, 20, 193, 237, 61, 64, 212, 247, 189, 237, 166, 48, 62, 17, 229, 192, 189, 1, 57, 16, 190, 28, 43, 203, 189, 123, 23, 67, 61, 169, 236, 141, 61, 167, 111, 213, 61, 80, 24, 142, 61, 255, 37, 183, 61, 248, 125, 117, 61, 36, 58, 65, 61, 236, 149, 32, 190, 160, 59, 14, 61, 227, 170, 197, 189, 5, 56, 131, 189, 19, 178, 144, 61, 172, 128, 10, 190, 28, 31, 190, 61, 126, 82, 23, 60, 214, 36, 156, 60, 214, 215, 254, 60, 96, 171, 118, 189, 227, 250, 146, 61, 62, 59, 1, 190, 218, 246, 244, 189, 221, 2, 170, 187, 102, 106, 2, 62, 33, 212, 226, 61, 45, 157, 164, 60, 82, 13, 173, 61, 148, 57, 133, 189, 26, 6, 4, 190, 123, 94, 37, 60, 102, 56, 255, 60, 162, 128, 209, 59, 67, 73, 200, 188, 210, 157, 174, 189, 180, 238, 59, 189, 85, 237, 26, 189, 133, 228, 153, 188, 195, 159, 11, 188, 17, 112, 34, 189, 20, 207, 159, 189, 94, 175, 24, 190, 60, 162, 60, 189, 230, 45, 178, 189, 33, 197, 120, 61, 228, 55, 127, 61, 222, 116, 161, 59, 183, 135, 165, 61, 91, 218, 159, 61, 137, 4, 33, 62, 89, 170, 99, 188, 40, 91, 31, 62, 77, 52, 129, 189, 149, 48, 101, 188, 254, 161, 198, 59, 239, 170, 105, 61, 64, 41, 14, 189, 141, 251, 24, 61, 253, 33, 48, 62, 81, 36, 253, 189, 46, 84, 118, 61, 36, 45, 98, 189, 102, 156, 113, 60, 240, 100, 238, 61, 77, 155, 47, 190, 87, 125, 163, 189, 58, 14, 79, 61, 60, 160, 133, 60, 235, 70, 23, 62, 112, 253, 168, 189, 135, 48, 42, 62, 130, 98, 183, 189, 148, 16, 249, 61, 247, 124, 140, 61, 53, 40, 128, 188, 29, 155, 229, 61, 49, 6, 45, 190, 223, 164, 245, 189, 7, 217, 149, 61, 122, 123, 150, 61, 193, 131, 183, 188, 146, 183, 238, 60, 241, 65, 182, 61, 55, 244, 49, 62, 211, 175, 141, 61, 138, 166, 159, 189, 246, 208, 183, 61, 134, 23, 238, 189, 176, 122, 51, 190, 42, 174, 199, 186, 26, 22, 24, 190, 147, 244, 243, 189, 184, 2, 18, 62, 121, 232, 204, 61, 97, 157, 178, 61, 48, 185, 50, 190, 231, 145, 245, 60, 154, 19, 214, 59, 48, 209, 28, 190, 199, 1, 127, 60, 156, 175, 31, 189, 152, 195, 205, 189, 109, 108, 37, 189, 5, 183, 55, 61, 117, 85, 102, 61, 82, 144, 151, 61, 63, 243, 95, 60, 122, 22, 159, 189, 98, 194, 228, 61, 158, 126, 57, 189, 129, 192, 134, 61, 206, 115, 137, 189, 154, 162, 49, 190, 210, 112, 15, 190, 225, 211, 242, 59, 58, 194, 199, 61, 220, 62, 202, 189, 155, 1, 33, 190, 96, 114, 27, 190, 234, 252, 245, 189, 177, 5, 162, 61, 193, 248, 146, 189, 1, 179, 34, 190, 59, 146, 0, 188, 15, 37, 120, 188, 62, 146, 231, 59, 150, 251, 154, 188, 137, 254, 154, 189, 150, 156, 241, 61, 24, 168, 141, 61, 110, 67, 225, 60, 84, 45, 131, 61, 25, 124, 116, 189, 8, 54, 32, 190, 61, 69, 48, 62, 61, 145, 117, 60, 86, 107, 52, 190, 155, 244, 0, 62, 58, 100, 42, 190, 115, 83, 49, 189, 89, 198, 111, 187, 212, 158, 220, 60, 76, 6, 173, 61, 178, 217, 129, 61, 85, 20, 82, 60, 157, 34, 40, 190, 199, 170, 8, 190, 128, 95, 43, 62, 98, 182, 225, 189, 62, 80, 87, 189, 120, 69, 37, 61, 139, 214, 27, 61, 66, 109, 7, 190, 238, 26, 153, 60, 57, 96, 36, 62, 220, 49, 79, 189, 205, 207, 244, 61, 156, 178, 43, 62, 11, 126, 174, 189, 144, 37, 219, 188, 196, 171, 226, 61, 114, 15, 16, 62, 120, 240, 184, 189, 4, 181, 188, 61, 83, 23, 141, 61, 42, 116, 139, 188, 63, 40, 171, 189, 177, 172, 111, 61, 236, 208, 10, 190, 162, 76, 210, 189, 70, 221, 11, 190, 189, 13, 136, 60, 128, 209, 50, 190, 164, 158, 234, 189, 63, 227, 15, 61, 246, 54, 197, 188, 22, 38, 23, 190, 219, 179, 135, 61, 0, 146, 52, 189, 134, 112, 243, 61, 1, 66, 8, 190, 159, 94, 43, 62, 75, 74, 42, 190, 172, 237, 23, 190, 195, 90, 5, 187, 239, 23, 195, 61, 197, 34, 29, 62, 43, 232, 180, 189, 184, 60, 75, 189, 2, 220, 194, 61, 127, 126, 132, 183, 94, 241, 120, 61, 66, 138, 131, 61, 230, 235, 185, 61, 84, 218, 39, 190, 56, 22, 195, 189, 205, 136, 201, 189, 156, 80, 181, 60, 41, 5, 93, 61, 178, 222, 40, 61, 50, 35, 58, 189, 229, 67, 199, 189, 244, 211, 192, 189, 161, 149, 93, 61, 241, 228, 241, 189, 21, 192, 176, 61, 155, 92, 246, 189, 183, 197, 35, 190, 118, 151, 106, 61, 209, 200, 7, 190, 188, 156, 34, 62, 243, 69, 183, 187, 246, 74, 47, 61, 160, 228, 21, 62, 209, 133, 46, 190, 247, 119, 7, 61, 247, 166, 160, 61, 175, 100, 158, 186, 116, 148, 33, 190, 208, 12, 169, 188, 61, 37, 222, 59, 154, 232, 196, 61, 155, 91, 29, 190, 247, 193, 44, 62, 168, 220, 58, 188, 158, 141, 119, 189, 151, 154, 156, 188, 48, 38, 176, 61, 14, 91, 213, 189, 95, 242, 237, 189, 113, 156, 56, 189, 150, 50, 31, 62, 76, 75, 40, 62, 4, 110, 177, 189, 38, 142, 27, 190, 105, 46, 8, 190, 176, 144, 24, 60, 71, 32, 246, 189, 119, 36, 205, 59, 56, 240, 14, 190, 213, 83, 247, 61, 165, 87, 62, 189, 206, 111, 220, 188, 131, 51, 122, 189, 203, 159, 154, 61, 218, 93, 222, 60, 240, 162, 6, 62, 106, 253, 186, 61, 15, 185, 243, 61, 8, 170, 144, 61, 111, 168, 32, 189, 4, 147, 29, 62, 201, 237, 24, 61, 105, 185, 71, 189, 218, 213, 100, 60, 108, 93, 14, 189, 240, 240, 187, 189, 104, 240, 22, 190, 236, 33, 227, 188, 14, 254, 31, 188, 176, 57, 152, 189, 54, 4, 15, 190, 189, 91, 205, 189, 83, 175, 218, 61, 192, 241, 30, 60, 90, 122, 116, 61, 26, 167, 3, 62, 106, 139, 185, 189, 98, 48, 153, 61, 86, 32, 171, 189, 78, 177, 41, 189, 52, 177, 23, 190, 48, 20, 105, 188, 202, 108, 193, 189, 176, 219, 213, 61, 189, 149, 72, 187, 179, 217, 51, 190, 11, 89, 169, 189, 177, 126, 110, 61, 114, 171, 216, 188, 91, 195, 226, 189, 204, 203, 39, 62, 243, 125, 4, 190, 237, 56, 214, 61, 66, 124, 33, 62, 234, 27, 238, 189, 157, 129, 25, 61, 11, 219, 92, 189, 235, 68, 150, 189, 21, 201, 95, 59, 76, 238, 235, 61, 61, 22, 242, 61, 91, 246, 163, 61, 108, 1, 119, 189, 127, 187, 218, 61, 73, 208, 62, 61, 175, 154, 36, 190, 6, 6, 38, 190, 212, 6, 251, 189, 46, 96, 193, 61, 145, 171, 30, 190, 215, 161, 223, 59, 107, 94, 27, 62, 77, 94, 202, 189, 87, 235, 213, 189, 241, 204, 20, 190, 123, 151, 144, 61, 113, 126, 149, 61, 30, 207, 248, 186, 163, 125, 172, 189, 168, 49, 153, 61, 1, 37, 48, 189, 171, 193, 216, 189, 223, 156, 193, 189, 196, 21, 185, 188, 3, 175, 48, 188, 138, 195, 2, 62, 90, 199, 44, 62, 136, 176, 160, 188, 101, 179, 9, 60, 155, 144, 41, 190, 64, 81, 183, 61, 70, 162, 4, 61, 80, 204, 233, 61, 208, 203, 118, 189, 6, 255, 193, 189, 46, 152, 83, 60, 88, 243, 200, 188, 39, 161, 11, 189, 46, 110, 48, 62, 19, 10, 41, 62, 173, 207, 253, 61, 235, 13, 5, 62, 148, 105, 136, 189, 176, 151, 254, 189, 98, 38, 52, 62, 32, 13, 74, 61, 77, 238, 56, 188, 174, 94, 28, 62, 85, 34, 138, 61, 254, 96, 228, 61, 46, 152, 112, 60, 201, 222, 210, 60, 254, 192, 246, 189, 164, 50, 33, 62, 163, 171, 232, 61, 203, 129, 249, 189, 16, 38, 38, 190, 213, 120, 98, 189, 36, 48, 13, 190, 153, 17, 18, 190, 104, 232, 44, 190, 112, 19, 178, 60, 245, 51, 1, 62, 108, 226, 195, 59, 34, 189, 124, 61, 162, 187, 171, 61, 93, 179, 143, 61, 216, 195, 44, 190, 15, 7, 223, 189, 21, 159, 119, 61, 153, 51, 95, 189, 10, 5, 29, 190, 162, 19, 2, 190, 248, 117, 24, 62, 209, 138, 201, 189, 213, 156, 45, 189, 213, 32, 249, 60, 42, 228, 240, 189, 189, 123, 43, 190, 237, 99, 138, 61, 15, 245, 189, 61, 98, 187, 154, 61, 99, 6, 25, 190, 207, 14, 2, 61, 109, 12, 26, 62, 52, 145, 27, 62, 45, 115, 201, 188, 111, 81, 10, 59, 221, 218, 239, 61, 154, 199, 23, 62, 227, 47, 19, 61, 46, 19, 162, 61, 52, 198, 84, 187, 149, 40, 245, 189, 76, 95, 44, 62, 203, 94, 215, 60, 9, 47, 164, 189, 232, 11, 54, 60, 126, 197, 143, 61, 200, 233, 113, 61, 183, 190, 17, 190, 195, 39, 141, 60, 132, 93, 32, 61, 106, 61, 115, 61, 80, 229, 225, 186, 77, 83, 207, 60, 65, 185, 0, 61, 161, 249, 169, 188, 195, 139, 252, 189, 12, 212, 82, 58, 123, 134, 167, 61, 246, 142, 41, 190, 4, 85, 34, 190, 49, 156, 255, 59, 109, 222, 129, 189, 145, 83, 40, 190, 99, 137, 184, 189, 65, 55, 14, 190, 205, 122, 41, 189, 45, 29, 150, 60, 12, 183, 12, 61, 193, 231, 32, 61, 239, 147, 29, 62, 145, 248, 196, 61, 72, 77, 154, 187, 130, 104, 89, 61, 225, 163, 142, 61, 81, 230, 5, 189, 250, 89, 152, 187, 114, 56, 234, 187, 210, 97, 152, 61, 133, 25, 70, 60, 145, 185, 161, 189, 235, 213, 24, 61, 206, 56, 159, 189, 85, 65, 147, 61, 74, 157, 48, 60, 54, 170, 30, 62, 194, 150, 191, 189, 39, 140, 250, 188, 34, 41, 13, 61, 98, 234, 204, 61, 202, 37, 24, 62, 227, 105, 131, 61, 165, 142, 232, 61, 10, 203, 30, 60, 57, 78, 195, 189, 8, 0, 1, 190, 96, 164, 16, 62, 88, 253, 179, 189, 158, 106, 91, 61, 161, 70, 51, 190, 94, 211, 29, 62, 106, 169, 162, 189, 27, 227, 1, 62, 163, 18, 160, 189, 148, 5, 30, 59, 188, 129, 8, 190, 189, 233, 241, 188, 221, 154, 146, 61, 234, 240, 183, 188, 131, 3, 14, 190, 44, 187, 192, 61, 55, 221, 16, 190, 52, 29, 170, 188, 202, 19, 97, 189, 244, 240, 146, 189, 163, 137, 186, 61, 244, 220, 105, 189, 139, 22, 117, 189, 67, 227, 32, 190, 223, 245, 211, 60, 2, 119, 170, 187, 18, 109, 215, 189, 58, 147, 11, 190, 119, 187, 43, 62, 179, 0, 4, 62, 191, 13, 61, 187, 101, 8, 64, 189, 184, 199, 220, 61, 47, 151, 244, 189, 149, 125, 246, 189, 20, 31, 32, 190, 24, 248, 253, 189, 191, 198, 56, 188, 205, 229, 44, 189, 122, 234, 10, 62, 149, 187, 219, 188, 20, 25, 91, 61, 37, 201, 138, 189, 213, 62, 31, 190, 110, 169, 227, 61, 153, 247, 15, 62, 79, 223, 23, 62, 164, 65, 17, 62, 215, 136, 195, 61, 117, 94, 238, 189, 115, 208, 209, 60, 99, 166, 41, 190, 225, 150, 219, 61, 86, 174, 0, 60, 203, 235, 2, 62, 101, 83, 161, 189, 106, 197, 5, 62, 66, 148, 251, 60, 9, 127, 32, 189, 28, 214, 225, 61, 167, 178, 20, 60, 32, 64, 31, 62, 47, 152, 231, 188, 126, 78, 231, 60, 120, 102, 180, 61, 203, 219, 9, 62, 120, 122, 106, 189, 116, 202, 224, 189, 196, 10, 176, 61, 190, 131, 158, 61, 112, 69, 9, 62, 79, 163, 26, 190, 116, 35, 152, 61, 239, 163, 75, 189, 49, 125, 20, 190, 237, 112, 245, 189, 198, 251, 240, 188, 197, 27, 18, 190, 120, 251, 124, 61, 174, 87, 181, 60, 140, 171, 226, 61, 136, 235, 8, 62, 158, 9, 195, 61, 94, 204, 67, 61, 152, 142, 15, 62, 8, 0, 9, 62, 123, 189, 156, 187, 90, 21, 12, 190, 222, 107, 49, 189, 40, 252, 41, 189, 39, 210, 135, 61, 229, 241, 8, 190, 246, 52, 25, 190, 113, 35, 1, 190, 185, 132, 1, 188, 167, 8, 151, 61, 187, 177, 189, 189, 174, 229, 29, 189, 137, 73, 44, 62, 90, 121, 58, 61, 180, 51, 131, 61, 56, 246, 19, 62, 16, 68, 71, 189, 140, 12, 2, 62, 120, 20, 213, 61, 209, 103, 26, 190, 135, 216, 253, 185, 75, 214, 186, 187, 241, 175, 142, 188, 130, 18, 254, 184, 246, 83, 174, 61, 193, 180, 28, 62, 49, 186, 144, 189, 67, 23, 0, 190, 59, 48, 13, 190, 141, 240, 23, 190, 255, 13, 43, 62, 41, 249, 4, 189, 63, 105, 189, 189, 145, 174, 39, 62, 4, 118, 241, 61, 13, 157, 218, 189, 91, 36, 6, 190, 155, 229, 219, 189, 247, 250, 104, 189, 185, 48, 219, 60, 141, 0, 173, 188, 221, 35, 248, 60, 127, 104, 194, 188, 231, 220, 62, 189, 97, 108, 42, 189, 239, 1, 17, 61, 199, 68, 204, 188, 25, 78, 254, 189, 152, 120, 118, 61, 171, 90, 51, 62, 90, 106, 143, 61, 140, 231, 252, 61, 199, 92, 231, 61, 111, 110, 212, 61, 56, 27, 54, 189, 121, 138, 49, 190, 255, 68, 234, 187, 157, 96, 73, 61, 210, 37, 84, 61, 164, 213, 81, 61, 57, 134, 216, 61, 137, 152, 49, 189, 1, 29, 78, 189, 58, 5, 32, 189, 16, 243, 111, 189, 85, 44, 140, 61, 148, 143, 0, 190, 166, 243, 150, 189, 65, 162, 113, 61, 59, 75, 0, 62, 31, 44, 134, 189, 142, 213, 0, 190, 171, 18, 20, 61, 6, 255, 50, 190, 72, 91, 24, 62, 144, 242, 42, 189, 95, 133, 191, 59, 160, 64, 97, 189, 30, 201, 170, 189, 18, 85, 151, 189, 73, 150, 241, 61, 47, 252, 7, 190, 34, 243, 66, 61, 55, 6, 115, 188, 127, 99, 50, 189, 181, 44, 249, 189, 97, 66, 185, 61, 215, 90, 112, 61, 69, 216, 48, 190, 55, 132, 213, 61, 76, 109, 176, 60, 207, 7, 153, 189, 81, 144, 244, 188, 42, 228, 129, 189, 72, 8, 169, 59, 115, 175, 158, 61, 141, 170, 247, 61, 230, 32, 194, 189, 110, 179, 74, 188, 50, 101, 55, 189, 221, 230, 34, 190, 92, 72, 26, 190, 30, 115, 215, 189, 113, 175, 191, 60, 135, 12, 240, 61, 224, 79, 224, 188, 4, 220, 245, 61, 65, 218, 149, 189, 195, 214, 230, 189, 42, 83, 78, 189, 39, 42, 29, 62, 47, 126, 1, 61, 81, 166, 61, 189, 159, 252, 85, 188, 59, 30, 57, 61, 158, 111, 8, 189, 55, 190, 34, 190, 43, 187, 159, 188, 218, 234, 10, 61, 225, 203, 179, 61, 29, 216, 3, 62, 124, 149, 5, 190, 86, 40, 15, 190, 72, 100, 111, 61, 47, 100, 241, 61, 70, 109, 235, 60, 0, 171, 101, 61, 174, 131, 46, 62, 199, 43, 46, 190, 233, 150, 24, 62, 124, 19, 221, 189, 120, 85, 41, 62, 108, 166, 5, 60, 68, 43, 160, 189, 253, 37, 159, 61, 125, 255, 2, 61, 198, 18, 244, 61, 174, 87, 242, 61, 186, 138, 103, 61, 192, 220, 166, 61, 243, 31, 79, 61, 187, 231, 89, 189, 59, 6, 74, 60, 235, 181, 109, 61, 202, 179, 127, 189, 10, 169, 5, 62, 210, 233, 166, 188, 192, 181, 161, 189, 90, 141, 35, 62, 32, 147, 10, 190, 192, 68, 243, 188, 214, 143, 243, 61, 170, 116, 39, 62, 23, 242, 113, 189, 29, 169, 23, 60, 1, 72, 80, 60, 148, 85, 230, 61, 8, 163, 27, 62, 243, 228, 107, 61, 36, 236, 185, 189, 121, 208, 31, 62, 240, 17, 12, 61, 234, 99, 7, 190, 235, 53, 183, 189, 117, 2, 12, 62, 155, 253, 219, 189, 96, 11, 244, 189, 176, 73, 243, 61, 104, 76, 20, 61, 112, 121, 50, 61, 192, 58, 245, 61, 186, 146, 120, 61, 107, 11, 29, 189, 74, 107, 6, 62, 119, 88, 114, 61, 80, 42, 11, 190, 57, 1, 53, 190, 65, 248, 126, 61, 92, 116, 58, 61, 48, 84, 215, 60, 42, 86, 41, 190, 224, 52, 87, 189, 183, 141, 0, 62, 51, 12, 59, 189, 219, 196, 105, 61, 123, 93, 221, 60, 195, 79, 31, 190, 148, 3, 177, 61, 250, 169, 159, 189, 244, 45, 166, 188, 2, 76, 234, 189, 172, 200, 19, 190, 102, 209, 15, 62, 95, 70, 50, 62, 105, 91, 8, 61, 30, 18, 41, 190, 204, 63, 138, 61, 112, 39, 148, 187, 104, 212, 200, 60, 117, 68, 15, 62, 59, 179, 189, 188, 139, 142, 136, 61, 180, 239, 214, 189, 104, 198, 211, 187, 220, 196, 164, 189, 236, 223, 33, 62, 125, 37, 185, 189, 50, 25, 36, 62, 149, 130, 5, 188, 58, 2, 7, 190, 199, 14, 39, 62, 252, 157, 204, 189, 113, 123, 50, 190, 143, 136, 204, 61, 103, 198, 34, 190, 193, 142, 38, 62, 67, 187, 76, 61, 245, 150, 212, 60, 223, 98, 3, 190, 1, 77, 6, 190, 12, 14, 235, 61, 117, 207, 43, 58, 225, 191, 97, 61, 101, 112, 234, 58, 102, 61, 25, 60, 170, 39, 10, 190, 8, 236, 17, 62, 141, 153, 116, 61, 133, 11, 161, 189, 175, 16, 36, 189, 91, 34, 29, 189, 91, 189, 239, 61, 63, 22, 186, 189, 230, 83, 8, 190, 196, 79, 165, 61, 152, 111, 86, 61, 156, 87, 216, 189, 126, 123, 252, 61, 97, 218, 44, 190, 57, 205, 14, 190, 107, 237, 225, 189, 54, 87, 73, 189, 141, 126, 202, 61, 193, 235, 112, 61, 34, 131, 234, 60, 112, 134, 87, 189, 47, 63, 248, 189, 217, 138, 150, 189, 29, 151, 239, 189, 158, 16, 200, 189, 186, 36, 120, 61, 55, 234, 9, 189, 132, 238, 11, 62, 146, 219, 229, 60, 92, 7, 101, 189, 106, 197, 181, 188, 220, 141, 144, 61, 241, 11, 242, 61, 251, 106, 211, 61, 137, 192, 252, 61, 155, 176, 157, 189, 49, 103, 170, 189, 75, 249, 238, 189, 252, 60, 66, 60, 37, 134, 26, 190, 197, 143, 52, 62, 160, 36, 181, 61, 76, 197, 8, 190, 24, 219, 242, 189, 205, 233, 216, 188, 214, 209, 197, 61, 41, 102, 207, 189, 50, 93, 191, 188, 74, 11, 41, 190, 84, 110, 27, 62, 248, 57, 169, 189, 71, 248, 207, 187, 218, 254, 211, 61, 46, 146, 175, 189, 168, 37, 207, 189, 54, 131, 157, 189, 164, 222, 44, 189, 95, 87, 211, 189, 194, 36, 27, 62, 213, 51, 191, 61, 39, 205, 40, 61, 95, 177, 219, 60, 229, 12, 80, 189, 28, 168, 19, 62, 79, 190, 218, 189, 83, 181, 11, 190, 232, 206, 210, 61, 42, 124, 143, 61, 101, 105, 46, 190, 120, 140, 179, 61, 39, 142, 11, 190, 252, 253, 14, 62, 37, 237, 95, 61, 160, 44, 95, 189, 194, 72, 42, 189, 146, 83, 206, 189, 221, 80, 116, 189, 151, 148, 46, 190, 109, 4, 22, 62, 203, 179, 206, 61, 173, 76, 26, 189, 155, 134, 166, 61, 235, 198, 8, 62, 131, 24, 6, 190, 183, 190, 98, 189, 216, 11, 32, 62, 109, 145, 71, 189, 66, 61, 86, 189, 172, 209, 23, 190, 36, 56, 208, 60, 85, 33, 200, 61, 125, 58, 249, 61, 191, 88, 27, 187, 11, 195, 229, 61, 138, 179, 78, 61, 87, 44, 187, 188, 26, 223, 85, 189, 172, 113, 90, 189, 188, 45, 158, 189, 181, 188, 23, 62, 50, 176, 54, 61, 75, 24, 177, 61, 171, 247, 247, 189, 212, 37, 200, 61, 131, 154, 179, 189, 230, 70, 34, 61, 74, 97, 0, 62, 15, 61, 134, 189, 90, 11, 29, 61, 63, 110, 7, 190, 19, 245, 54, 189, 17, 195, 4, 190, 10, 110, 172, 189, 41, 100, 7, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {89, 14, 231, 189, 129, 133, 8, 188, 32, 64, 185, 61, 80, 209, 131, 61, 81, 70, 151, 61, 36, 212, 175, 189, 42, 10, 137, 189, 205, 29, 4, 60, 129, 33, 184, 188, 149, 51, 253, 189, 201, 233, 179, 189, 57, 122, 180, 61, 104, 178, 165, 188, 205, 31, 130, 188, 130, 235, 29, 190, 60, 159, 40, 190, 30, 126, 217, 59, 3, 5, 224, 59, 14, 84, 152, 59, 41, 204, 35, 62, 53, 40, 254, 188, 253, 59, 9, 62, 67, 1, 206, 188, 2, 217, 12, 189, 148, 99, 35, 190, 169, 232, 32, 62, 1, 82, 23, 62, 61, 165, 131, 188, 225, 77, 1, 62, 139, 184, 158, 61, 173, 160, 14, 190, 142, 17, 240, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {59, 102, 181, 61, 40, 85, 27, 190, 60, 255, 109, 188, 75, 182, 39, 62, 124, 29, 192, 189, 58, 5, 219, 189, 241, 48, 133, 61, 117, 147, 23, 190, 79, 63, 0, 62, 79, 146, 251, 189, 192, 130, 9, 190, 93, 212, 223, 61, 158, 208, 32, 62, 10, 138, 36, 190, 184, 51, 31, 190, 144, 190, 238, 61, 46, 232, 1, 190, 155, 17, 218, 61, 196, 81, 197, 189, 241, 243, 17, 189, 254, 165, 15, 61, 74, 195, 96, 61, 115, 145, 33, 190, 24, 21, 48, 62, 20, 34, 226, 61, 222, 76, 250, 188, 27, 126, 41, 190, 202, 230, 13, 190, 130, 198, 43, 62, 76, 233, 4, 62, 235, 191, 119, 61, 227, 27, 242, 61, 150, 20, 157, 61, 62, 233, 1, 61, 16, 231, 200, 189, 2, 31, 197, 189, 26, 115, 52, 190, 151, 37, 151, 188, 84, 172, 2, 189, 196, 195, 28, 62, 40, 227, 44, 190, 83, 99, 156, 59, 83, 216, 50, 189, 31, 40, 2, 62, 67, 201, 212, 61, 222, 134, 30, 61, 7, 147, 115, 189, 27, 148, 51, 61, 250, 212, 94, 61, 73, 25, 81, 61, 121, 106, 174, 189, 49, 155, 43, 190, 240, 83, 48, 62, 179, 156, 211, 189, 227, 27, 78, 61, 10, 184, 174, 60, 42, 56, 50, 189, 26, 83, 9, 190, 10, 103, 147, 188, 53, 41, 3, 190, 240, 128, 248, 60, 122, 196, 118, 60, 176, 251, 189, 187, 204, 246, 11, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 46, 215, 189, 13, 141, 189, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {41, 27, 224, 191, 91, 46, 42, 190, 241, 88, 115, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {151, 133, 95, 190, 216, 254, 49, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0000/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}