// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 182, 200, 190, 181, 46, 146, 62, 175, 247, 120, 188, 68, 75, 33, 191, 44, 13, 200, 190, 181, 158, 26, 63, 109, 30, 25, 63, 48, 90, 36, 191, 85, 81, 16, 190, 55, 34, 207, 190, 102, 153, 190, 191, 209, 75, 249, 189, 122, 246, 68, 190, 179, 128, 70, 191, 3, 247, 50, 191, 187, 50, 135, 62, 102, 248, 209, 62, 254, 250, 28, 63, 38, 35, 75, 62, 112, 67, 152, 190, 143, 103, 247, 62, 234, 42, 31, 63, 145, 126, 65, 63, 130, 79, 147, 62, 83, 230, 225, 190, 141, 52, 48, 62, 214, 220, 43, 191, 197, 253, 67, 62, 149, 221, 125, 63, 231, 199, 214, 190, 117, 169, 55, 63, 224, 55, 136, 63, 87, 226, 128, 62, 248, 252, 50, 191, 200, 234, 193, 63, 79, 223, 165, 62, 126, 237, 200, 62, 75, 201, 40, 63, 170, 17, 104, 61, 101, 179, 65, 63, 179, 150, 35, 191, 157, 189, 163, 190, 236, 235, 73, 62, 60, 168, 40, 63, 13, 125, 14, 191, 253, 130, 163, 190, 143, 80, 104, 61, 250, 126, 104, 60, 225, 162, 172, 62, 84, 216, 128, 191, 187, 96, 222, 190, 164, 123, 48, 191, 115, 231, 168, 62, 155, 247, 48, 190, 242, 24, 55, 63, 130, 133, 67, 189, 6, 34, 5, 190, 14, 141, 10, 191, 44, 79, 58, 63, 219, 245, 68, 61, 10, 139, 250, 190, 146, 124, 63, 62, 168, 44, 161, 62, 5, 120, 161, 62, 142, 9, 2, 63, 96, 191, 198, 60, 224, 107, 4, 63, 55, 114, 241, 190, 111, 93, 113, 60, 225, 158, 128, 62, 197, 58, 36, 63, 24, 2, 205, 62, 192, 92, 12, 63, 161, 153, 114, 191, 166, 91, 99, 190, 40, 60, 186, 62, 112, 182, 88, 191, 47, 161, 187, 190, 60, 104, 175, 189, 89, 85, 97, 62, 212, 122, 22, 191, 162, 182, 237, 62, 110, 217, 91, 63, 182, 129, 63, 62, 194, 197, 128, 62, 203, 45, 8, 191, 144, 141, 4, 63, 49, 125, 181, 190, 233, 76, 135, 60, 168, 192, 209, 190, 107, 35, 170, 190, 22, 150, 7, 191, 218, 168, 130, 56, 36, 53, 22, 63, 51, 111, 208, 62, 186, 254, 150, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 120, 27, 191, 231, 201, 178, 189, 198, 202, 152, 62, 52, 188, 216, 62, 152, 33, 184, 190, 56, 247, 94, 61, 60, 215, 173, 62, 124, 187, 185, 190, 27, 156, 253, 190, 79, 87, 77, 62, 125, 202, 4, 190, 24, 146, 148, 189, 247, 102, 251, 189, 0, 204, 59, 191, 242, 176, 218, 61, 53, 153, 175, 62, 121, 97, 26, 62, 172, 8, 130, 62, 169, 5, 133, 190, 118, 219, 3, 63, 51, 177, 167, 62, 3, 162, 37, 63, 163, 228, 27, 63, 116, 77, 5, 191, 75, 66, 29, 190, 164, 2, 233, 189, 18, 120, 220, 190, 110, 101, 197, 189, 124, 117, 132, 62, 38, 152, 21, 191, 52, 144, 32, 191, 243, 23, 62, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 32, 81, 189, 211, 62, 134, 62, 136, 51, 97, 62, 190, 250, 68, 61, 193, 185, 234, 189, 235, 14, 83, 190, 21, 234, 234, 61, 4, 118, 208, 190, 204, 205, 36, 191, 71, 178, 178, 190, 72, 118, 27, 188, 199, 58, 224, 62, 38, 213, 130, 190, 170, 99, 95, 62, 8, 75, 210, 189, 36, 24, 133, 62, 246, 3, 181, 189, 68, 49, 185, 189, 8, 16, 76, 62, 121, 105, 57, 62, 155, 39, 119, 62, 153, 33, 12, 62, 215, 105, 73, 62, 40, 185, 154, 190, 185, 103, 36, 62, 123, 193, 62, 61, 212, 161, 255, 188, 243, 10, 156, 190, 233, 245, 63, 190, 243, 2, 242, 61, 122, 227, 205, 62, 234, 244, 231, 190, 74, 74, 32, 189, 198, 133, 9, 190, 244, 18, 96, 190, 100, 115, 100, 61, 207, 193, 207, 189, 176, 179, 13, 190, 147, 81, 213, 61, 236, 66, 55, 189, 160, 87, 22, 190, 233, 98, 248, 61, 236, 0, 41, 190, 79, 65, 6, 190, 164, 164, 31, 190, 181, 249, 183, 189, 118, 194, 234, 189, 248, 206, 71, 190, 83, 136, 188, 60, 142, 211, 161, 189, 226, 255, 119, 189, 89, 84, 15, 189, 67, 203, 134, 61, 89, 124, 11, 62, 192, 87, 89, 188, 112, 198, 235, 189, 36, 193, 249, 59, 27, 67, 147, 61, 216, 85, 222, 189, 225, 60, 225, 61, 21, 88, 59, 189, 54, 244, 168, 188, 180, 34, 176, 188, 168, 230, 207, 61, 31, 255, 252, 188, 101, 123, 161, 61, 180, 135, 137, 62, 28, 251, 249, 60, 144, 53, 73, 61, 121, 183, 48, 189, 200, 215, 176, 188, 97, 20, 10, 190, 28, 27, 203, 61, 184, 15, 50, 62, 113, 216, 54, 190, 253, 249, 172, 189, 144, 122, 115, 190, 210, 105, 160, 190, 192, 186, 200, 189, 157, 138, 210, 187, 7, 155, 246, 61, 158, 78, 32, 189, 203, 127, 140, 61, 137, 171, 155, 61, 19, 73, 72, 61, 22, 108, 46, 62, 24, 131, 190, 61, 75, 92, 149, 60, 126, 133, 179, 190, 133, 9, 166, 61, 58, 43, 179, 189, 143, 234, 95, 190, 217, 71, 51, 190, 252, 239, 21, 59, 133, 11, 200, 60, 207, 87, 160, 61, 100, 7, 246, 189, 27, 205, 112, 62, 2, 252, 193, 62, 145, 98, 130, 62, 8, 215, 153, 190, 241, 142, 136, 190, 227, 85, 154, 61, 184, 81, 96, 190, 143, 189, 18, 191, 114, 207, 88, 187, 239, 168, 100, 190, 252, 129, 11, 190, 167, 111, 19, 190, 50, 213, 103, 190, 175, 98, 61, 62, 116, 238, 241, 61, 66, 83, 179, 189, 111, 191, 149, 190, 113, 196, 209, 62, 131, 248, 130, 190, 224, 72, 198, 60, 149, 165, 97, 62, 166, 29, 227, 188, 31, 228, 203, 190, 175, 203, 133, 62, 90, 195, 15, 62, 109, 206, 197, 189, 213, 155, 139, 190, 70, 126, 146, 188, 138, 23, 72, 190, 50, 240, 229, 61, 117, 76, 132, 62, 252, 20, 217, 61, 31, 190, 52, 190, 190, 98, 177, 60, 193, 105, 202, 62, 125, 252, 31, 62, 131, 241, 145, 62, 72, 41, 116, 61, 157, 183, 91, 61, 217, 144, 67, 61, 226, 37, 50, 62, 13, 67, 245, 62, 142, 16, 8, 191, 73, 140, 226, 188, 31, 11, 188, 61, 162, 232, 139, 190, 144, 198, 192, 61, 166, 210, 55, 62, 53, 29, 126, 189, 101, 252, 70, 61, 136, 177, 203, 190, 232, 17, 216, 189, 162, 87, 222, 60, 114, 128, 153, 62, 108, 75, 77, 62, 66, 24, 182, 189, 31, 93, 28, 190, 124, 2, 12, 190, 172, 229, 97, 62, 57, 191, 208, 62, 253, 147, 151, 61, 232, 233, 60, 190, 83, 134, 21, 61, 104, 78, 122, 189, 213, 157, 56, 190, 57, 84, 32, 190, 88, 73, 25, 188, 171, 125, 117, 60, 14, 29, 173, 61, 5, 199, 36, 61, 150, 89, 165, 61, 137, 212, 234, 187, 122, 13, 199, 188, 119, 12, 43, 190, 119, 118, 105, 60, 88, 49, 3, 190, 41, 241, 207, 189, 35, 226, 56, 60, 16, 208, 59, 190, 106, 126, 40, 61, 213, 89, 81, 189, 145, 248, 167, 187, 10, 33, 225, 59, 203, 30, 196, 189, 126, 214, 125, 61, 184, 58, 45, 190, 148, 249, 16, 190, 218, 169, 95, 189, 219, 160, 165, 61, 124, 136, 110, 61, 178, 0, 41, 60, 255, 61, 145, 61, 36, 215, 225, 189, 240, 139, 46, 190, 208, 114, 6, 189, 246, 146, 190, 59, 18, 132, 3, 190, 230, 55, 241, 189, 50, 35, 97, 62, 121, 242, 164, 190, 2, 211, 110, 191, 58, 76, 199, 190, 243, 58, 23, 191, 208, 112, 195, 190, 69, 96, 218, 190, 72, 13, 118, 191, 59, 94, 158, 189, 193, 240, 62, 191, 157, 144, 254, 61, 8, 213, 209, 60, 27, 176, 172, 61, 210, 153, 178, 190, 168, 168, 143, 62, 201, 244, 8, 62, 236, 203, 54, 62, 12, 128, 26, 62, 18, 220, 172, 61, 12, 179, 175, 190, 25, 99, 126, 190, 160, 205, 212, 61, 171, 23, 186, 189, 52, 125, 169, 187, 124, 213, 10, 189, 20, 213, 162, 191, 223, 77, 186, 61, 85, 190, 47, 62, 187, 232, 87, 190, 176, 173, 241, 61, 82, 89, 45, 191, 198, 236, 104, 190, 60, 127, 201, 190, 97, 109, 189, 61, 32, 81, 61, 189, 79, 120, 236, 190, 34, 145, 71, 62, 112, 246, 96, 62, 212, 206, 20, 63, 101, 132, 109, 62, 68, 22, 174, 190, 22, 239, 11, 63, 31, 111, 117, 191, 124, 178, 160, 190, 166, 155, 40, 62, 23, 146, 90, 61, 101, 221, 219, 61, 138, 227, 248, 60, 179, 212, 190, 62, 65, 157, 107, 62, 251, 49, 99, 62, 165, 229, 217, 189, 41, 106, 95, 190, 83, 198, 164, 191, 45, 44, 20, 191, 11, 120, 162, 190, 247, 17, 220, 61, 135, 192, 233, 189, 224, 176, 233, 189, 26, 40, 166, 190, 234, 131, 8, 189, 48, 185, 50, 190, 231, 145, 245, 60, 154, 19, 214, 59, 48, 209, 28, 190, 199, 1, 127, 60, 156, 175, 31, 189, 152, 195, 205, 189, 109, 108, 37, 189, 5, 183, 55, 61, 117, 85, 102, 61, 82, 144, 151, 61, 63, 243, 95, 60, 122, 22, 159, 189, 98, 194, 228, 61, 158, 126, 57, 189, 129, 192, 134, 61, 206, 115, 137, 189, 154, 162, 49, 190, 210, 112, 15, 190, 225, 211, 242, 59, 58, 194, 199, 61, 220, 62, 202, 189, 155, 1, 33, 190, 96, 114, 27, 190, 234, 252, 245, 189, 177, 5, 162, 61, 193, 248, 146, 189, 1, 179, 34, 190, 59, 146, 0, 188, 15, 37, 120, 188, 62, 146, 231, 59, 150, 251, 154, 188, 195, 127, 63, 189, 147, 232, 207, 61, 23, 3, 159, 60, 199, 144, 208, 188, 35, 112, 43, 61, 25, 124, 116, 189, 38, 172, 63, 190, 61, 69, 48, 62, 94, 48, 230, 59, 77, 226, 48, 190, 155, 244, 0, 62, 190, 168, 42, 190, 130, 150, 12, 189, 141, 66, 195, 188, 46, 17, 77, 60, 72, 216, 111, 61, 74, 137, 24, 61, 26, 211, 87, 188, 169, 64, 26, 190, 162, 179, 15, 190, 51, 189, 255, 61, 238, 217, 244, 189, 245, 175, 173, 189, 120, 69, 37, 61, 223, 157, 146, 58, 132, 99, 32, 190, 192, 226, 184, 59, 57, 96, 36, 62, 72, 121, 83, 189, 163, 168, 217, 61, 192, 124, 245, 61, 87, 233, 166, 189, 133, 164, 68, 189, 195, 246, 92, 62, 172, 229, 122, 62, 119, 87, 56, 189, 103, 135, 50, 190, 213, 78, 4, 61, 243, 60, 215, 61, 148, 98, 227, 188, 98, 45, 51, 58, 175, 53, 55, 62, 247, 194, 106, 189, 31, 107, 166, 190, 249, 111, 43, 62, 20, 28, 141, 191, 133, 10, 166, 60, 148, 49, 158, 61, 125, 111, 38, 190, 54, 129, 8, 190, 45, 23, 18, 190, 211, 218, 23, 62, 17, 50, 26, 62, 64, 183, 14, 62, 114, 52, 114, 62, 160, 105, 138, 190, 14, 134, 64, 191, 109, 70, 142, 190, 60, 191, 87, 62, 48, 181, 159, 62, 143, 217, 89, 61, 229, 244, 208, 188, 113, 30, 81, 62, 49, 20, 161, 62, 30, 129, 119, 61, 153, 18, 74, 62, 193, 228, 182, 62, 32, 214, 175, 54, 64, 35, 210, 190, 93, 25, 131, 190, 11, 168, 99, 62, 94, 194, 207, 190, 111, 16, 246, 190, 242, 101, 135, 190, 72, 216, 153, 190, 215, 152, 164, 190, 141, 82, 207, 190, 4, 199, 43, 62, 179, 174, 145, 62, 9, 173, 230, 189, 191, 28, 106, 190, 32, 14, 242, 189, 17, 145, 39, 62, 136, 181, 88, 188, 43, 80, 154, 188, 34, 84, 105, 62, 218, 104, 147, 62, 49, 0, 238, 190, 245, 200, 161, 62, 109, 18, 111, 62, 38, 8, 15, 62, 179, 248, 178, 190, 229, 161, 2, 190, 81, 56, 220, 189, 94, 138, 243, 62, 137, 55, 57, 189, 239, 205, 51, 62, 152, 24, 71, 62, 81, 88, 0, 62, 177, 146, 34, 190, 117, 190, 242, 60, 123, 53, 130, 190, 77, 178, 10, 62, 95, 235, 178, 190, 157, 154, 146, 61, 97, 172, 211, 61, 4, 151, 135, 190, 45, 127, 25, 190, 15, 207, 211, 190, 136, 178, 100, 62, 12, 9, 231, 188, 115, 12, 43, 188, 24, 231, 39, 190, 174, 135, 161, 61, 165, 107, 128, 62, 5, 206, 93, 189, 64, 103, 126, 59, 39, 94, 84, 62, 9, 139, 224, 61, 13, 237, 117, 189, 196, 101, 217, 62, 228, 98, 49, 62, 218, 123, 21, 62, 65, 156, 177, 189, 135, 80, 187, 188, 173, 161, 170, 61, 91, 241, 88, 61, 249, 79, 43, 62, 40, 218, 21, 189, 90, 33, 192, 189, 219, 104, 26, 190, 2, 75, 18, 189, 95, 169, 49, 189, 28, 234, 158, 189, 226, 106, 17, 190, 121, 56, 206, 189, 153, 8, 157, 61, 254, 85, 142, 188, 90, 122, 116, 61, 153, 255, 239, 61, 62, 1, 191, 189, 213, 196, 111, 61, 168, 92, 231, 189, 173, 204, 108, 189, 117, 191, 46, 190, 225, 123, 44, 189, 202, 108, 193, 189, 229, 81, 178, 61, 198, 199, 56, 188, 18, 55, 58, 190, 140, 3, 185, 189, 162, 191, 92, 61, 234, 137, 252, 188, 170, 197, 2, 190, 83, 235, 12, 62, 34, 187, 9, 190, 22, 62, 213, 61, 117, 195, 12, 62, 234, 27, 238, 189, 177, 73, 178, 60, 11, 219, 92, 189, 242, 158, 173, 189, 20, 101, 243, 186, 204, 172, 192, 61, 212, 190, 226, 61, 244, 66, 147, 61, 141, 26, 147, 189, 209, 236, 201, 61, 50, 125, 33, 61, 55, 147, 43, 190, 87, 93, 46, 190, 52, 187, 13, 190, 46, 96, 193, 61, 137, 17, 37, 190, 181, 207, 126, 59, 50, 28, 12, 62, 75, 217, 224, 189, 96, 92, 249, 189, 241, 204, 20, 190, 170, 206, 69, 61, 26, 27, 111, 61, 0, 154, 86, 188, 39, 123, 190, 189, 92, 121, 136, 61, 207, 136, 68, 189, 166, 190, 228, 189, 119, 197, 192, 189, 152, 109, 252, 188, 128, 30, 155, 188, 139, 104, 254, 61, 204, 171, 40, 62, 136, 176, 160, 188, 174, 97, 195, 57, 238, 221, 250, 189, 7, 116, 49, 62, 161, 2, 244, 190, 5, 149, 159, 188, 165, 44, 15, 190, 187, 158, 76, 62, 215, 17, 245, 190, 187, 98, 118, 190, 83, 73, 52, 190, 199, 231, 139, 190, 159, 3, 58, 62, 203, 176, 227, 190, 123, 41, 234, 62, 92, 21, 136, 61, 47, 47, 120, 190, 100, 66, 160, 61, 153, 182, 41, 61, 40, 96, 5, 63, 179, 187, 161, 61, 80, 183, 178, 61, 43, 62, 255, 61, 241, 1, 21, 61, 202, 25, 19, 188, 131, 98, 250, 61, 118, 180, 110, 62, 244, 146, 118, 62, 254, 45, 54, 191, 222, 226, 206, 189, 25, 21, 135, 188, 10, 108, 236, 60, 60, 41, 141, 62, 153, 84, 17, 190, 215, 43, 139, 189, 99, 82, 94, 62, 179, 214, 54, 62, 182, 238, 167, 190, 82, 172, 137, 190, 93, 109, 148, 188, 170, 86, 194, 190, 247, 245, 16, 191, 31, 247, 60, 190, 42, 32, 55, 190, 85, 100, 243, 190, 140, 57, 125, 190, 153, 79, 115, 189, 58, 136, 167, 190, 109, 97, 195, 60, 114, 65, 129, 61, 218, 138, 217, 189, 141, 218, 140, 190, 84, 58, 46, 188, 116, 158, 146, 188, 47, 52, 7, 190, 144, 144, 157, 188, 27, 44, 21, 191, 75, 129, 135, 62, 70, 132, 70, 61, 85, 194, 3, 191, 173, 21, 94, 190, 26, 186, 9, 61, 30, 172, 135, 190, 67, 13, 79, 61, 4, 145, 162, 190, 13, 174, 87, 187, 4, 132, 212, 61, 162, 237, 202, 62, 227, 34, 6, 63, 13, 156, 17, 191, 119, 254, 106, 190, 5, 228, 158, 62, 128, 142, 69, 191, 156, 104, 140, 191, 214, 52, 5, 191, 122, 176, 207, 190, 55, 237, 246, 61, 204, 157, 67, 191, 91, 65, 57, 190, 202, 116, 199, 188, 240, 76, 36, 62, 96, 177, 186, 190, 176, 218, 137, 62, 70, 211, 153, 61, 254, 83, 35, 61, 211, 1, 176, 61, 147, 147, 217, 61, 28, 116, 111, 61, 164, 64, 227, 190, 112, 166, 65, 62, 123, 26, 173, 189, 8, 147, 134, 190, 123, 115, 0, 191, 102, 106, 14, 190, 49, 15, 0, 60, 253, 191, 221, 62, 200, 108, 50, 190, 72, 77, 154, 187, 204, 67, 229, 60, 237, 80, 161, 62, 128, 70, 157, 61, 110, 123, 16, 191, 41, 62, 145, 60, 25, 150, 151, 61, 183, 206, 219, 190, 104, 223, 66, 191, 84, 236, 93, 191, 204, 246, 75, 190, 142, 224, 159, 62, 118, 68, 33, 190, 136, 225, 234, 60, 208, 24, 230, 190, 123, 69, 234, 61, 101, 45, 138, 191, 155, 155, 147, 62, 180, 185, 234, 60, 11, 88, 240, 62, 191, 40, 56, 62, 89, 120, 97, 62, 27, 236, 64, 190, 133, 148, 31, 190, 9, 24, 181, 62, 25, 244, 141, 191, 139, 182, 218, 189, 230, 110, 183, 190, 120, 213, 209, 61, 49, 192, 238, 188, 67, 207, 64, 190, 118, 123, 41, 190, 162, 13, 113, 187, 90, 124, 67, 190, 198, 119, 172, 62, 58, 50, 127, 62, 218, 7, 171, 188, 47, 102, 27, 190, 189, 197, 227, 61, 128, 108, 128, 190, 10, 18, 195, 60, 22, 117, 70, 62, 30, 222, 184, 188, 172, 91, 1, 61, 58, 75, 33, 60, 26, 145, 109, 190, 98, 188, 191, 189, 80, 20, 59, 62, 22, 197, 228, 61, 144, 93, 150, 57, 112, 28, 145, 59, 139, 126, 56, 62, 193, 86, 32, 62, 158, 175, 70, 62, 136, 175, 70, 62, 92, 81, 234, 61, 104, 101, 123, 190, 248, 160, 201, 189, 36, 142, 52, 190, 211, 97, 39, 190, 131, 96, 102, 61, 106, 210, 17, 61, 111, 64, 29, 62, 73, 119, 12, 62, 46, 111, 138, 61, 233, 104, 253, 188, 87, 112, 133, 190, 34, 129, 77, 62, 99, 166, 66, 62, 30, 88, 25, 61, 109, 16, 165, 61, 194, 83, 139, 188, 129, 85, 104, 190, 44, 207, 244, 189, 237, 105, 190, 190, 165, 9, 32, 62, 41, 227, 249, 58, 189, 87, 182, 62, 206, 32, 6, 61, 106, 123, 20, 62, 114, 62, 56, 62, 93, 241, 156, 189, 54, 231, 40, 63, 65, 255, 155, 189, 111, 142, 21, 62, 140, 244, 112, 190, 69, 68, 81, 187, 185, 167, 83, 61, 239, 92, 251, 62, 93, 144, 59, 62, 238, 32, 243, 59, 170, 178, 55, 189, 35, 58, 152, 189, 178, 87, 68, 62, 210, 39, 27, 61, 75, 108, 100, 62, 186, 55, 121, 189, 194, 241, 255, 190, 26, 63, 8, 62, 128, 47, 139, 189, 38, 30, 209, 189, 32, 12, 238, 190, 234, 250, 221, 190, 119, 25, 233, 189, 147, 129, 38, 62, 203, 97, 142, 62, 51, 172, 2, 62, 39, 4, 94, 190, 142, 68, 60, 62, 216, 15, 79, 189, 36, 100, 97, 188, 226, 207, 41, 61, 117, 112, 210, 61, 103, 30, 24, 62, 41, 228, 151, 62, 87, 58, 78, 190, 31, 224, 205, 190, 112, 92, 248, 61, 190, 77, 94, 62, 26, 68, 37, 191, 221, 145, 30, 190, 0, 140, 95, 62, 68, 84, 163, 61, 48, 117, 54, 189, 216, 169, 120, 190, 55, 43, 179, 58, 51, 172, 59, 62, 192, 226, 199, 62, 151, 178, 26, 190, 151, 32, 25, 189, 19, 59, 35, 189, 51, 247, 113, 189, 50, 5, 204, 188, 16, 168, 108, 61, 0, 198, 231, 61, 107, 27, 180, 189, 183, 149, 36, 190, 88, 7, 34, 190, 79, 78, 46, 190, 184, 228, 12, 62, 210, 186, 66, 189, 24, 118, 237, 189, 133, 70, 20, 62, 8, 185, 182, 61, 3, 126, 2, 190, 185, 152, 60, 190, 157, 195, 215, 189, 167, 85, 173, 189, 156, 193, 22, 188, 99, 231, 94, 189, 138, 146, 147, 186, 12, 255, 50, 189, 181, 162, 88, 189, 207, 127, 116, 189, 65, 96, 76, 60, 181, 110, 46, 189, 61, 22, 34, 190, 126, 141, 11, 61, 251, 55, 51, 62, 198, 100, 54, 61, 140, 231, 252, 61, 77, 139, 227, 189, 102, 47, 132, 59, 232, 19, 170, 190, 245, 196, 152, 189, 40, 32, 62, 191, 6, 70, 142, 190, 186, 241, 5, 191, 92, 180, 52, 62, 156, 219, 76, 62, 3, 171, 56, 191, 107, 36, 232, 190, 63, 156, 20, 191, 205, 106, 63, 62, 4, 100, 0, 62, 141, 67, 187, 189, 149, 165, 24, 189, 240, 50, 40, 62, 141, 8, 218, 62, 231, 78, 93, 189, 23, 75, 30, 191, 73, 69, 232, 189, 198, 136, 201, 190, 128, 157, 130, 188, 242, 196, 169, 61, 20, 114, 152, 61, 25, 10, 188, 60, 41, 159, 73, 191, 230, 104, 23, 191, 77, 197, 67, 62, 159, 38, 22, 190, 71, 29, 118, 62, 55, 6, 115, 188, 75, 73, 70, 189, 137, 73, 1, 190, 39, 37, 173, 61, 215, 90, 112, 61, 24, 229, 55, 190, 193, 155, 202, 61, 10, 71, 139, 60, 207, 7, 153, 189, 73, 149, 139, 189, 207, 0, 124, 189, 178, 190, 219, 187, 216, 88, 202, 61, 141, 170, 247, 61, 230, 32, 194, 189, 145, 130, 198, 188, 236, 125, 11, 189, 43, 57, 61, 190, 73, 15, 23, 190, 73, 102, 234, 189, 232, 68, 167, 60, 235, 123, 220, 61, 117, 232, 26, 189, 37, 10, 234, 61, 202, 196, 152, 189, 152, 165, 231, 189, 42, 83, 78, 189, 133, 193, 23, 62, 71, 126, 136, 60, 81, 166, 61, 189, 113, 223, 151, 188, 59, 30, 57, 61, 202, 200, 69, 189, 98, 81, 201, 190, 58, 210, 79, 62, 242, 238, 5, 62, 244, 52, 139, 61, 167, 23, 70, 61, 94, 153, 117, 190, 186, 79, 86, 190, 98, 78, 105, 61, 44, 49, 78, 62, 100, 79, 2, 62, 195, 5, 111, 188, 15, 9, 67, 62, 102, 47, 192, 190, 119, 107, 79, 61, 123, 160, 107, 189, 213, 179, 66, 62, 58, 75, 14, 61, 216, 188, 37, 189, 179, 86, 188, 61, 226, 54, 26, 189, 81, 170, 131, 62, 54, 189, 93, 62, 255, 208, 8, 61, 55, 101, 23, 190, 47, 229, 169, 187, 160, 83, 34, 190, 170, 98, 206, 60, 109, 253, 29, 61, 9, 171, 10, 190, 247, 141, 20, 62, 104, 3, 223, 189, 12, 132, 158, 189, 86, 199, 179, 189, 94, 25, 57, 190, 203, 147, 189, 190, 77, 120, 66, 61, 69, 192, 141, 62, 152, 40, 191, 189, 153, 14, 242, 61, 194, 226, 239, 61, 128, 56, 174, 62, 59, 78, 154, 62, 111, 167, 38, 191, 222, 90, 38, 62, 226, 60, 20, 191, 1, 33, 160, 189, 70, 232, 232, 189, 119, 99, 146, 190, 40, 207, 133, 62, 79, 148, 220, 189, 216, 91, 169, 189, 214, 198, 227, 188, 139, 125, 23, 62, 176, 39, 195, 61, 80, 70, 199, 61, 31, 133, 91, 191, 161, 188, 245, 190, 144, 134, 182, 60, 148, 41, 39, 62, 201, 173, 29, 62, 149, 130, 149, 190, 173, 147, 38, 190, 3, 91, 210, 60, 199, 148, 181, 60, 41, 40, 160, 191, 168, 149, 19, 190, 58, 154, 42, 63, 224, 190, 164, 61, 106, 46, 49, 62, 232, 236, 48, 191, 224, 140, 159, 61, 50, 3, 40, 62, 231, 127, 32, 189, 173, 83, 49, 62, 132, 9, 188, 191, 94, 174, 146, 62, 186, 247, 64, 190, 176, 14, 235, 186, 87, 130, 171, 61, 43, 191, 115, 189, 8, 171, 59, 62, 69, 216, 158, 190, 46, 79, 154, 61, 55, 15, 67, 190, 85, 178, 193, 189, 58, 6, 190, 61, 204, 39, 62, 63, 103, 121, 238, 190, 103, 14, 109, 190, 96, 129, 251, 60, 146, 204, 162, 62, 229, 171, 43, 62, 123, 93, 203, 189, 222, 223, 21, 190, 80, 242, 143, 189, 20, 42, 212, 189, 195, 128, 250, 60, 72, 88, 144, 62, 96, 129, 31, 191, 247, 133, 95, 61, 94, 238, 145, 59, 49, 30, 71, 62, 91, 2, 229, 190, 136, 43, 148, 190, 45, 247, 38, 61, 108, 73, 149, 189, 126, 75, 224, 62, 171, 207, 182, 190, 177, 86, 240, 62, 34, 186, 156, 187, 148, 88, 240, 61, 197, 20, 12, 60, 37, 121, 0, 190, 107, 3, 131, 62, 7, 93, 179, 61, 117, 131, 161, 62, 112, 80, 199, 61, 164, 242, 210, 189, 144, 163, 176, 61, 163, 26, 204, 62, 74, 169, 22, 60, 9, 100, 114, 62, 80, 57, 133, 190, 186, 39, 123, 190, 226, 161, 20, 189, 235, 6, 238, 61, 210, 121, 209, 62, 252, 109, 52, 61, 239, 68, 130, 62, 229, 85, 15, 62, 190, 109, 247, 190, 47, 90, 62, 190, 68, 91, 128, 190, 213, 246, 220, 61, 137, 217, 152, 190, 77, 96, 90, 190, 64, 192, 27, 188, 76, 254, 243, 189, 235, 222, 225, 62, 127, 64, 221, 190, 171, 139, 10, 63, 97, 16, 102, 62, 96, 86, 199, 61, 69, 113, 67, 61, 155, 254, 153, 189, 70, 102, 123, 62, 98, 68, 158, 61, 59, 40, 141, 62, 165, 28, 37, 61, 29, 177, 92, 62, 248, 23, 188, 187, 202, 203, 127, 62, 243, 18, 77, 60, 127, 206, 207, 61, 237, 217, 151, 189, 223, 195, 143, 190, 32, 104, 150, 61, 165, 99, 84, 61, 69, 202, 232, 62, 217, 193, 169, 189, 170, 47, 56, 62, 58, 18, 224, 62, 193, 56, 86, 190, 128, 233, 172, 190, 44, 5, 126, 190, 232, 171, 80, 62, 124, 198, 27, 191, 216, 245, 78, 190, 47, 134, 162, 189, 83, 94, 89, 190, 32, 46, 80, 187, 66, 203, 254, 190, 72, 99, 231, 62, 50, 227, 48, 61, 13, 23, 74, 190, 112, 215, 224, 60, 163, 85, 36, 189, 151, 46, 112, 62, 89, 32, 80, 189, 202, 89, 222, 59, 146, 106, 161, 62, 232, 89, 80, 62, 250, 52, 138, 190, 57, 204, 221, 62, 109, 250, 106, 60, 233, 44, 199, 60, 146, 136, 228, 190, 22, 1, 21, 61, 126, 224, 247, 61, 64, 64, 142, 62, 61, 138, 190, 62, 36, 169, 254, 61, 75, 134, 27, 191, 218, 213, 118, 190, 141, 49, 17, 63, 74, 109, 129, 62, 29, 35, 137, 189, 220, 192, 80, 191, 165, 29, 233, 61, 177, 253, 208, 62, 199, 62, 138, 62, 247, 237, 115, 61, 163, 49, 46, 191, 173, 240, 23, 63, 194, 233, 135, 190, 6, 192, 203, 190, 216, 224, 67, 60, 7, 117, 86, 62, 16, 158, 38, 62, 30, 166, 244, 190, 193, 168, 234, 189, 97, 75, 199, 190, 224, 45, 64, 190, 117, 167, 191, 189, 217, 143, 45, 61, 29, 145, 234, 190, 113, 66, 34, 190, 166, 16, 105, 190, 233, 12, 183, 189, 1, 161, 3, 190, 90, 98, 185, 190, 192, 82, 64, 190, 142, 13, 147, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 146, 87, 61, 143, 161, 168, 189, 110, 241, 23, 62, 72, 193, 46, 62, 228, 118, 27, 62, 6, 99, 19, 190, 58, 33, 156, 59, 47, 3, 25, 62, 129, 33, 184, 188, 166, 86, 36, 190, 178, 20, 157, 61, 44, 173, 72, 62, 21, 19, 115, 60, 245, 21, 32, 189, 42, 178, 52, 190, 129, 87, 153, 190, 77, 196, 138, 61, 148, 17, 137, 62, 168, 42, 95, 62, 221, 183, 201, 62, 63, 246, 49, 190, 98, 246, 120, 62, 207, 190, 145, 189, 173, 5, 238, 189, 106, 145, 50, 190, 219, 250, 142, 62, 239, 126, 127, 62, 17, 78, 4, 62, 53, 132, 21, 62, 85, 172, 244, 61, 58, 223, 91, 189, 137, 11, 219, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {92, 120, 158, 62, 33, 198, 184, 189, 81, 202, 27, 186, 74, 246, 189, 62, 216, 29, 173, 190, 202, 214, 195, 189, 130, 254, 136, 63, 216, 126, 151, 191, 79, 63, 0, 62, 148, 153, 203, 189, 2, 179, 214, 190, 205, 57, 25, 63, 229, 16, 221, 61, 110, 131, 32, 190, 158, 156, 32, 190, 31, 105, 220, 62, 179, 73, 238, 190, 169, 231, 139, 63, 30, 53, 78, 63, 234, 186, 150, 189, 225, 231, 143, 60, 154, 250, 30, 61, 199, 75, 9, 190, 200, 118, 168, 62, 148, 49, 181, 61, 216, 88, 145, 189, 238, 169, 51, 191, 99, 107, 78, 191, 218, 112, 180, 62, 144, 103, 147, 62, 138, 239, 232, 62, 130, 61, 45, 191, 165, 144, 9, 62, 157, 233, 91, 189, 159, 62, 3, 190, 172, 194, 167, 190, 194, 55, 136, 190, 34, 130, 173, 187, 182, 114, 230, 62, 118, 95, 132, 62, 40, 227, 44, 190, 21, 91, 161, 59, 60, 38, 171, 190, 205, 190, 174, 62, 73, 46, 68, 61, 144, 214, 46, 61, 209, 249, 30, 189, 0, 112, 35, 63, 196, 197, 209, 62, 43, 192, 150, 62, 198, 143, 206, 189, 45, 79, 176, 190, 52, 175, 160, 62, 208, 183, 224, 190, 62, 226, 46, 61, 155, 172, 190, 188, 21, 129, 49, 189, 65, 185, 144, 190, 102, 164, 207, 62, 96, 40, 54, 62, 207, 228, 239, 61, 234, 208, 137, 188, 176, 9, 124, 61, 197, 36, 229, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 16, 49, 190, 81, 214, 187, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {38, 83, 100, 190, 222, 201, 243, 62, 6, 163, 185, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {31, 83, 228, 191, 158, 5, 113, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0000/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}