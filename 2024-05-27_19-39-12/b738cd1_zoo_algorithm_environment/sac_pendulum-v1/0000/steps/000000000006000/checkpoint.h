// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 182, 200, 190, 181, 46, 146, 62, 175, 247, 120, 188, 136, 159, 111, 190, 97, 75, 153, 190, 163, 199, 59, 63, 224, 196, 32, 63, 117, 61, 17, 191, 80, 237, 73, 189, 236, 136, 176, 190, 217, 89, 115, 191, 135, 78, 49, 189, 154, 208, 158, 190, 119, 72, 58, 191, 54, 12, 64, 191, 45, 138, 153, 62, 164, 179, 214, 62, 160, 93, 20, 63, 225, 88, 135, 62, 254, 106, 155, 190, 248, 138, 6, 63, 50, 216, 33, 63, 66, 239, 75, 63, 125, 118, 129, 62, 100, 186, 184, 190, 92, 21, 27, 62, 135, 40, 54, 191, 212, 69, 94, 62, 181, 156, 67, 63, 89, 58, 237, 190, 197, 16, 65, 63, 153, 55, 94, 63, 71, 72, 162, 62, 171, 158, 13, 191, 201, 138, 86, 63, 22, 244, 3, 63, 41, 13, 207, 62, 13, 106, 20, 63, 116, 16, 180, 60, 234, 87, 207, 62, 143, 207, 25, 191, 193, 32, 167, 190, 45, 191, 24, 62, 221, 16, 67, 63, 66, 7, 18, 191, 52, 81, 176, 187, 166, 42, 199, 189, 5, 195, 176, 188, 199, 188, 133, 62, 172, 252, 90, 191, 254, 158, 229, 190, 39, 101, 35, 191, 226, 73, 234, 62, 37, 64, 84, 190, 55, 157, 52, 63, 140, 108, 56, 190, 128, 155, 131, 189, 124, 185, 229, 190, 138, 174, 233, 62, 25, 217, 136, 61, 121, 198, 128, 190, 145, 245, 110, 62, 243, 199, 212, 62, 22, 87, 171, 62, 80, 217, 28, 63, 119, 252, 193, 61, 15, 177, 16, 63, 38, 96, 121, 190, 5, 36, 54, 61, 49, 28, 144, 62, 139, 222, 212, 62, 243, 204, 224, 62, 158, 192, 254, 62, 10, 105, 67, 191, 125, 115, 110, 190, 238, 92, 197, 62, 71, 34, 37, 191, 164, 134, 186, 190, 33, 73, 78, 190, 204, 107, 202, 62, 114, 2, 24, 191, 196, 160, 245, 62, 225, 68, 62, 63, 182, 16, 86, 62, 250, 213, 115, 62, 24, 196, 240, 190, 149, 167, 255, 62, 30, 250, 128, 190, 135, 219, 81, 62, 74, 70, 233, 190, 107, 35, 170, 190, 22, 150, 7, 191, 218, 168, 130, 56, 189, 28, 214, 62, 76, 140, 196, 62, 142, 220, 138, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 120, 27, 191, 90, 228, 149, 190, 93, 230, 170, 62, 144, 92, 223, 62, 97, 27, 105, 190, 43, 22, 50, 61, 103, 195, 137, 62, 149, 151, 134, 190, 166, 185, 7, 191, 36, 225, 54, 62, 170, 48, 197, 189, 150, 226, 106, 61, 222, 72, 40, 190, 38, 224, 24, 191, 226, 225, 62, 62, 248, 153, 226, 62, 12, 240, 203, 62, 192, 149, 94, 62, 133, 223, 42, 190, 33, 147, 13, 63, 142, 78, 134, 62, 73, 196, 37, 63, 84, 227, 62, 63, 212, 177, 153, 190, 46, 50, 11, 190, 42, 21, 174, 189, 220, 192, 113, 190, 218, 191, 202, 189, 177, 9, 163, 62, 203, 69, 183, 190, 52, 144, 32, 191, 111, 24, 25, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 32, 81, 189, 149, 144, 155, 62, 75, 187, 116, 62, 120, 164, 66, 188, 65, 99, 29, 190, 55, 202, 97, 190, 103, 156, 46, 62, 88, 93, 207, 190, 86, 21, 28, 191, 219, 217, 136, 190, 216, 36, 205, 188, 229, 101, 104, 62, 116, 160, 188, 190, 160, 15, 232, 61, 177, 218, 48, 60, 118, 145, 101, 62, 216, 191, 165, 189, 210, 102, 34, 189, 83, 60, 102, 62, 161, 35, 185, 189, 193, 167, 88, 62, 99, 107, 22, 62, 86, 72, 110, 62, 117, 5, 144, 190, 30, 74, 37, 62, 42, 26, 209, 61, 209, 251, 173, 61, 128, 247, 181, 190, 42, 6, 19, 190, 32, 9, 105, 61, 122, 227, 205, 62, 225, 5, 1, 190, 74, 74, 32, 189, 30, 84, 0, 190, 72, 64, 65, 190, 98, 7, 173, 61, 117, 168, 159, 189, 28, 81, 2, 190, 86, 50, 1, 62, 94, 38, 55, 189, 198, 5, 22, 190, 16, 192, 248, 61, 187, 170, 40, 190, 79, 65, 6, 190, 3, 164, 31, 190, 211, 37, 187, 189, 79, 204, 233, 189, 78, 214, 54, 190, 251, 228, 78, 61, 30, 51, 146, 189, 226, 228, 109, 189, 18, 56, 3, 189, 232, 0, 150, 61, 64, 139, 19, 62, 102, 6, 130, 60, 112, 198, 235, 189, 19, 56, 240, 60, 219, 91, 190, 61, 216, 85, 222, 189, 245, 128, 225, 61, 42, 124, 110, 188, 54, 244, 168, 188, 180, 34, 176, 188, 168, 230, 207, 61, 31, 255, 252, 188, 130, 124, 115, 61, 33, 150, 151, 62, 94, 214, 34, 189, 197, 251, 198, 61, 173, 89, 167, 60, 84, 254, 213, 60, 53, 99, 191, 188, 152, 54, 36, 62, 183, 130, 58, 62, 171, 5, 18, 190, 6, 30, 177, 188, 232, 69, 48, 190, 96, 110, 129, 190, 142, 233, 210, 189, 114, 54, 64, 61, 206, 24, 36, 62, 238, 239, 47, 188, 179, 151, 100, 62, 208, 110, 1, 62, 253, 55, 106, 61, 32, 230, 89, 62, 254, 75, 10, 62, 60, 91, 86, 188, 210, 99, 140, 190, 1, 105, 218, 61, 195, 49, 109, 189, 192, 248, 6, 190, 25, 170, 11, 190, 159, 136, 94, 61, 133, 11, 200, 60, 131, 175, 253, 188, 100, 7, 246, 189, 225, 220, 104, 62, 211, 179, 179, 62, 11, 213, 241, 61, 183, 9, 52, 190, 85, 146, 105, 190, 16, 228, 215, 61, 170, 244, 8, 190, 68, 54, 191, 190, 150, 88, 123, 189, 255, 125, 89, 190, 190, 167, 63, 61, 8, 125, 105, 190, 231, 133, 6, 189, 182, 106, 41, 62, 213, 123, 3, 62, 196, 12, 222, 189, 233, 100, 253, 189, 98, 158, 216, 62, 106, 42, 61, 190, 146, 200, 132, 61, 199, 94, 105, 62, 4, 34, 113, 189, 228, 205, 166, 190, 240, 187, 130, 62, 65, 0, 37, 62, 165, 111, 236, 187, 41, 125, 122, 190, 96, 161, 33, 189, 42, 167, 77, 61, 50, 240, 229, 61, 10, 129, 135, 62, 252, 20, 217, 61, 139, 86, 174, 190, 67, 43, 253, 188, 17, 114, 90, 62, 84, 241, 203, 61, 50, 47, 56, 62, 101, 76, 172, 189, 78, 141, 105, 61, 122, 60, 6, 61, 12, 15, 117, 62, 158, 101, 240, 62, 21, 35, 184, 190, 117, 118, 231, 61, 76, 225, 152, 189, 216, 138, 132, 190, 67, 220, 2, 62, 144, 114, 19, 62, 85, 58, 135, 188, 229, 248, 134, 61, 73, 73, 224, 189, 194, 68, 51, 190, 27, 89, 88, 61, 179, 228, 136, 62, 48, 53, 103, 59, 13, 158, 30, 190, 203, 101, 117, 190, 56, 181, 38, 190, 49, 147, 130, 62, 220, 71, 147, 62, 122, 10, 95, 61, 232, 233, 60, 190, 170, 138, 74, 60, 104, 78, 122, 189, 213, 157, 56, 190, 57, 84, 32, 190, 155, 114, 18, 188, 122, 174, 191, 60, 14, 29, 173, 61, 5, 199, 36, 61, 150, 89, 165, 61, 189, 52, 16, 60, 156, 8, 25, 188, 119, 12, 43, 190, 119, 118, 105, 60, 88, 49, 3, 190, 28, 133, 200, 189, 93, 235, 175, 60, 148, 248, 57, 190, 118, 247, 62, 61, 12, 176, 43, 189, 145, 248, 167, 187, 61, 117, 29, 60, 203, 30, 196, 189, 97, 73, 129, 61, 184, 58, 45, 190, 148, 249, 16, 190, 71, 229, 81, 189, 178, 244, 176, 61, 39, 80, 140, 61, 178, 0, 41, 60, 255, 61, 145, 61, 148, 143, 207, 189, 240, 139, 46, 190, 35, 248, 212, 188, 246, 146, 190, 59, 220, 5, 197, 188, 120, 89, 16, 190, 33, 81, 163, 188, 77, 119, 177, 190, 134, 149, 53, 191, 93, 100, 210, 189, 33, 195, 12, 191, 217, 225, 195, 190, 7, 255, 98, 190, 68, 254, 81, 191, 162, 201, 43, 62, 130, 129, 18, 191, 157, 144, 254, 61, 189, 241, 94, 62, 89, 236, 23, 61, 133, 200, 139, 190, 95, 2, 137, 62, 201, 244, 8, 62, 12, 98, 86, 62, 240, 78, 80, 62, 187, 94, 149, 62, 141, 239, 159, 190, 152, 224, 122, 190, 160, 205, 212, 61, 247, 33, 249, 189, 139, 65, 5, 62, 17, 208, 125, 62, 190, 126, 143, 191, 164, 42, 0, 62, 85, 190, 47, 62, 45, 225, 69, 190, 176, 173, 241, 61, 180, 228, 23, 191, 212, 113, 128, 190, 205, 208, 72, 189, 70, 7, 135, 62, 96, 168, 125, 62, 142, 14, 224, 190, 211, 197, 211, 62, 115, 237, 158, 62, 111, 59, 8, 63, 247, 96, 156, 62, 234, 138, 206, 190, 31, 255, 215, 62, 113, 236, 231, 190, 76, 42, 182, 190, 3, 152, 201, 61, 16, 166, 57, 62, 176, 87, 143, 61, 18, 149, 102, 185, 132, 129, 237, 61, 148, 209, 149, 188, 213, 71, 29, 61, 170, 72, 58, 190, 15, 13, 93, 62, 21, 223, 83, 191, 218, 167, 201, 190, 207, 133, 147, 190, 31, 223, 245, 61, 124, 212, 138, 189, 171, 6, 11, 189, 26, 40, 166, 190, 158, 152, 58, 189, 48, 185, 50, 190, 231, 145, 245, 60, 154, 19, 214, 59, 48, 209, 28, 190, 199, 1, 127, 60, 156, 175, 31, 189, 152, 195, 205, 189, 109, 108, 37, 189, 5, 183, 55, 61, 117, 85, 102, 61, 82, 144, 151, 61, 63, 243, 95, 60, 122, 22, 159, 189, 98, 194, 228, 61, 158, 126, 57, 189, 129, 192, 134, 61, 206, 115, 137, 189, 154, 162, 49, 190, 210, 112, 15, 190, 225, 211, 242, 59, 58, 194, 199, 61, 220, 62, 202, 189, 155, 1, 33, 190, 96, 114, 27, 190, 234, 252, 245, 189, 177, 5, 162, 61, 193, 248, 146, 189, 1, 179, 34, 190, 59, 146, 0, 188, 15, 37, 120, 188, 62, 146, 231, 59, 150, 251, 154, 188, 195, 127, 63, 189, 147, 232, 207, 61, 23, 3, 159, 60, 199, 144, 208, 188, 35, 112, 43, 61, 25, 124, 116, 189, 38, 172, 63, 190, 61, 69, 48, 62, 94, 48, 230, 59, 77, 226, 48, 190, 155, 244, 0, 62, 190, 168, 42, 190, 130, 150, 12, 189, 141, 66, 195, 188, 46, 17, 77, 60, 72, 216, 111, 61, 74, 137, 24, 61, 26, 211, 87, 188, 169, 64, 26, 190, 162, 179, 15, 190, 51, 189, 255, 61, 238, 217, 244, 189, 245, 175, 173, 189, 120, 69, 37, 61, 223, 157, 146, 58, 132, 99, 32, 190, 192, 226, 184, 59, 57, 96, 36, 62, 72, 121, 83, 189, 163, 168, 217, 61, 192, 124, 245, 61, 87, 233, 166, 189, 133, 164, 68, 189, 143, 122, 135, 62, 60, 218, 134, 62, 54, 156, 65, 189, 99, 230, 157, 189, 185, 235, 0, 62, 94, 138, 184, 61, 193, 163, 140, 61, 170, 193, 164, 60, 62, 5, 14, 62, 68, 87, 15, 60, 12, 220, 12, 189, 163, 18, 144, 62, 77, 13, 9, 191, 127, 146, 237, 188, 183, 106, 147, 61, 224, 25, 132, 189, 160, 252, 110, 190, 119, 25, 241, 189, 155, 168, 58, 62, 72, 25, 111, 62, 12, 159, 222, 61, 177, 168, 98, 62, 158, 186, 58, 190, 107, 159, 0, 191, 80, 98, 18, 190, 121, 209, 66, 62, 181, 20, 214, 62, 26, 154, 68, 61, 227, 128, 32, 188, 113, 30, 81, 62, 62, 168, 146, 62, 30, 129, 119, 61, 200, 191, 108, 62, 164, 35, 154, 62, 13, 183, 24, 190, 236, 157, 181, 190, 201, 138, 112, 190, 105, 147, 97, 62, 198, 186, 185, 190, 145, 178, 178, 190, 83, 225, 154, 190, 223, 176, 153, 190, 81, 35, 167, 61, 150, 77, 253, 190, 160, 177, 244, 60, 214, 21, 144, 62, 255, 174, 166, 189, 36, 142, 134, 190, 63, 119, 22, 62, 204, 3, 5, 62, 234, 148, 57, 62, 62, 215, 157, 61, 122, 52, 104, 62, 213, 130, 110, 62, 232, 158, 165, 190, 130, 59, 138, 62, 112, 225, 115, 62, 75, 38, 70, 62, 219, 22, 172, 190, 232, 23, 56, 190, 255, 6, 171, 61, 94, 138, 243, 62, 0, 87, 185, 188, 239, 205, 51, 62, 166, 57, 132, 62, 26, 120, 238, 61, 141, 176, 114, 189, 244, 94, 76, 60, 82, 176, 106, 190, 250, 45, 51, 62, 249, 60, 174, 190, 58, 115, 43, 61, 189, 164, 163, 61, 244, 215, 131, 190, 185, 94, 99, 61, 47, 15, 243, 190, 235, 111, 254, 61, 41, 87, 207, 188, 183, 150, 155, 60, 192, 59, 53, 190, 14, 90, 238, 61, 192, 125, 35, 62, 241, 189, 108, 60, 9, 30, 185, 61, 169, 2, 107, 62, 178, 212, 199, 61, 28, 226, 126, 61, 59, 191, 210, 62, 108, 32, 74, 62, 152, 201, 13, 62, 133, 16, 171, 189, 17, 166, 150, 188, 195, 43, 125, 61, 91, 241, 88, 61, 12, 55, 193, 61, 40, 218, 21, 189, 90, 33, 192, 189, 219, 104, 26, 190, 2, 75, 18, 189, 95, 169, 49, 189, 28, 234, 158, 189, 226, 106, 17, 190, 121, 56, 206, 189, 153, 8, 157, 61, 254, 85, 142, 188, 90, 122, 116, 61, 153, 255, 239, 61, 62, 1, 191, 189, 213, 196, 111, 61, 168, 92, 231, 189, 173, 204, 108, 189, 117, 191, 46, 190, 225, 123, 44, 189, 202, 108, 193, 189, 229, 81, 178, 61, 198, 199, 56, 188, 18, 55, 58, 190, 140, 3, 185, 189, 162, 191, 92, 61, 234, 137, 252, 188, 170, 197, 2, 190, 83, 235, 12, 62, 34, 187, 9, 190, 22, 62, 213, 61, 117, 195, 12, 62, 234, 27, 238, 189, 177, 73, 178, 60, 11, 219, 92, 189, 242, 158, 173, 189, 20, 101, 243, 186, 204, 172, 192, 61, 212, 190, 226, 61, 244, 66, 147, 61, 141, 26, 147, 189, 209, 236, 201, 61, 50, 125, 33, 61, 55, 147, 43, 190, 87, 93, 46, 190, 52, 187, 13, 190, 46, 96, 193, 61, 137, 17, 37, 190, 181, 207, 126, 59, 50, 28, 12, 62, 75, 217, 224, 189, 96, 92, 249, 189, 241, 204, 20, 190, 170, 206, 69, 61, 26, 27, 111, 61, 0, 154, 86, 188, 39, 123, 190, 189, 92, 121, 136, 61, 207, 136, 68, 189, 166, 190, 228, 189, 119, 197, 192, 189, 152, 109, 252, 188, 128, 30, 155, 188, 139, 104, 254, 61, 204, 171, 40, 62, 136, 176, 160, 188, 174, 97, 195, 57, 63, 155, 189, 189, 172, 218, 42, 62, 122, 85, 225, 60, 133, 254, 134, 187, 8, 189, 118, 190, 232, 149, 210, 189, 120, 143, 122, 190, 173, 36, 139, 190, 81, 232, 90, 190, 104, 171, 31, 189, 14, 222, 161, 62, 169, 156, 99, 190, 165, 85, 139, 62, 37, 22, 57, 61, 177, 88, 254, 189, 176, 169, 207, 61, 76, 202, 157, 61, 99, 42, 24, 62, 34, 117, 92, 62, 99, 143, 27, 62, 35, 130, 10, 62, 81, 35, 223, 60, 81, 73, 69, 188, 253, 204, 195, 61, 240, 162, 115, 62, 78, 212, 96, 62, 174, 20, 190, 190, 118, 107, 202, 190, 87, 46, 40, 189, 10, 108, 236, 60, 93, 45, 181, 61, 153, 84, 17, 190, 132, 101, 181, 189, 47, 225, 98, 62, 29, 149, 157, 62, 25, 255, 255, 188, 207, 80, 97, 190, 23, 198, 44, 189, 26, 24, 137, 190, 188, 84, 182, 190, 129, 147, 36, 190, 59, 205, 114, 189, 133, 230, 183, 190, 167, 55, 10, 190, 21, 164, 182, 61, 236, 82, 156, 190, 6, 33, 231, 61, 19, 37, 26, 62, 205, 220, 109, 189, 167, 45, 151, 190, 25, 229, 157, 61, 67, 167, 92, 60, 79, 97, 7, 190, 164, 144, 254, 187, 205, 142, 91, 190, 95, 56, 163, 62, 73, 250, 15, 62, 127, 142, 136, 190, 21, 192, 202, 189, 240, 215, 36, 60, 148, 55, 102, 189, 67, 13, 79, 61, 20, 236, 197, 190, 13, 174, 87, 187, 23, 2, 208, 61, 214, 47, 163, 62, 31, 240, 99, 62, 25, 140, 14, 191, 172, 189, 82, 190, 232, 177, 155, 62, 120, 226, 199, 190, 19, 12, 150, 191, 36, 34, 227, 190, 252, 238, 119, 190, 141, 62, 79, 62, 219, 41, 28, 191, 64, 121, 47, 186, 125, 30, 11, 62, 49, 139, 57, 61, 1, 94, 119, 190, 147, 212, 49, 62, 193, 112, 131, 62, 107, 165, 198, 189, 150, 121, 149, 61, 77, 218, 11, 62, 133, 117, 130, 60, 34, 63, 190, 190, 113, 80, 251, 61, 157, 57, 7, 61, 144, 80, 193, 189, 255, 106, 129, 190, 172, 35, 50, 190, 113, 229, 31, 61, 253, 191, 221, 62, 240, 216, 66, 190, 72, 77, 154, 187, 235, 168, 16, 61, 233, 152, 65, 62, 204, 121, 231, 187, 167, 141, 175, 190, 109, 2, 76, 188, 89, 188, 164, 61, 200, 218, 133, 190, 173, 102, 0, 191, 209, 170, 24, 190, 85, 122, 108, 190, 214, 176, 192, 61, 43, 241, 57, 191, 136, 225, 234, 60, 189, 69, 149, 62, 194, 196, 31, 189, 200, 144, 255, 190, 48, 163, 131, 62, 70, 183, 23, 62, 18, 100, 49, 62, 104, 242, 246, 61, 130, 105, 138, 61, 123, 142, 14, 190, 140, 118, 49, 190, 28, 233, 62, 189, 44, 177, 207, 190, 58, 193, 125, 62, 77, 154, 226, 190, 159, 85, 241, 61, 43, 86, 113, 61, 67, 207, 64, 190, 191, 15, 17, 190, 162, 13, 113, 187, 255, 166, 80, 190, 99, 144, 159, 62, 93, 143, 204, 61, 107, 31, 30, 60, 53, 138, 20, 190, 44, 107, 179, 61, 203, 49, 133, 190, 116, 111, 138, 61, 201, 103, 67, 62, 45, 191, 135, 189, 87, 20, 200, 61, 192, 90, 33, 187, 145, 185, 35, 190, 167, 71, 233, 189, 242, 67, 65, 62, 187, 17, 247, 61, 138, 29, 21, 60, 62, 200, 190, 61, 250, 22, 97, 62, 191, 151, 25, 62, 83, 60, 30, 62, 30, 179, 35, 62, 243, 12, 75, 61, 164, 109, 83, 190, 76, 89, 222, 189, 46, 13, 40, 190, 9, 235, 47, 190, 185, 201, 34, 61, 160, 39, 146, 61, 111, 64, 29, 62, 96, 44, 183, 61, 46, 111, 138, 61, 30, 239, 251, 188, 130, 183, 110, 190, 117, 175, 100, 62, 124, 252, 66, 62, 162, 20, 184, 61, 21, 17, 22, 62, 172, 100, 232, 61, 136, 48, 106, 190, 36, 10, 36, 190, 92, 124, 80, 190, 185, 46, 153, 61, 69, 85, 40, 61, 167, 167, 158, 62, 97, 130, 107, 185, 105, 11, 233, 61, 69, 114, 0, 62, 187, 198, 95, 189, 65, 251, 115, 62, 234, 174, 17, 190, 242, 145, 255, 61, 230, 29, 82, 190, 77, 117, 48, 61, 36, 182, 200, 61, 87, 213, 208, 62, 255, 213, 1, 62, 172, 249, 56, 59, 108, 118, 60, 61, 197, 213, 247, 187, 53, 245, 76, 62, 210, 39, 27, 61, 116, 146, 74, 62, 186, 55, 121, 189, 92, 187, 213, 190, 226, 7, 89, 62, 43, 128, 183, 189, 16, 204, 233, 189, 41, 60, 96, 189, 98, 204, 189, 188, 12, 74, 63, 189, 50, 36, 34, 62, 225, 72, 32, 62, 79, 181, 216, 61, 2, 82, 33, 190, 64, 133, 224, 60, 25, 127, 112, 189, 96, 99, 253, 189, 46, 117, 23, 61, 125, 85, 128, 61, 88, 218, 2, 62, 20, 155, 176, 62, 168, 12, 150, 190, 94, 9, 204, 190, 46, 31, 218, 61, 189, 202, 148, 62, 165, 91, 218, 190, 119, 116, 179, 189, 51, 27, 83, 62, 57, 115, 62, 61, 93, 175, 186, 189, 191, 180, 5, 62, 37, 19, 255, 186, 51, 172, 59, 62, 231, 147, 183, 61, 151, 178, 26, 190, 151, 32, 25, 189, 19, 59, 35, 189, 51, 247, 113, 189, 50, 5, 204, 188, 16, 168, 108, 61, 0, 198, 231, 61, 107, 27, 180, 189, 183, 149, 36, 190, 88, 7, 34, 190, 79, 78, 46, 190, 184, 228, 12, 62, 210, 186, 66, 189, 24, 118, 237, 189, 133, 70, 20, 62, 8, 185, 182, 61, 3, 126, 2, 190, 185, 152, 60, 190, 157, 195, 215, 189, 167, 85, 173, 189, 156, 193, 22, 188, 99, 231, 94, 189, 138, 146, 147, 186, 12, 255, 50, 189, 181, 162, 88, 189, 207, 127, 116, 189, 65, 96, 76, 60, 181, 110, 46, 189, 61, 22, 34, 190, 126, 141, 11, 61, 251, 55, 51, 62, 198, 100, 54, 61, 140, 231, 252, 61, 79, 210, 205, 189, 119, 248, 31, 62, 52, 51, 27, 61, 203, 166, 242, 189, 42, 160, 34, 191, 64, 21, 117, 190, 84, 126, 189, 190, 174, 234, 236, 61, 219, 10, 60, 62, 110, 176, 211, 190, 222, 255, 191, 61, 82, 26, 195, 190, 110, 41, 73, 61, 253, 45, 245, 61, 192, 233, 170, 188, 188, 20, 7, 189, 161, 108, 50, 62, 165, 17, 135, 62, 124, 155, 218, 61, 33, 66, 2, 190, 117, 71, 31, 61, 243, 255, 62, 190, 128, 157, 130, 188, 224, 75, 205, 61, 134, 132, 159, 61, 60, 86, 2, 188, 105, 84, 225, 190, 160, 205, 253, 190, 233, 96, 16, 62, 159, 38, 22, 190, 32, 40, 252, 61, 55, 6, 115, 188, 75, 73, 70, 189, 137, 73, 1, 190, 39, 37, 173, 61, 215, 90, 112, 61, 24, 229, 55, 190, 193, 155, 202, 61, 10, 71, 139, 60, 207, 7, 153, 189, 73, 149, 139, 189, 207, 0, 124, 189, 178, 190, 219, 187, 216, 88, 202, 61, 141, 170, 247, 61, 230, 32, 194, 189, 145, 130, 198, 188, 236, 125, 11, 189, 43, 57, 61, 190, 73, 15, 23, 190, 73, 102, 234, 189, 232, 68, 167, 60, 235, 123, 220, 61, 117, 232, 26, 189, 37, 10, 234, 61, 202, 196, 152, 189, 152, 165, 231, 189, 42, 83, 78, 189, 133, 193, 23, 62, 71, 126, 136, 60, 81, 166, 61, 189, 113, 223, 151, 188, 59, 30, 57, 61, 202, 200, 69, 189, 13, 154, 151, 190, 42, 194, 92, 62, 62, 213, 133, 61, 34, 216, 217, 61, 246, 210, 220, 61, 99, 230, 33, 190, 15, 29, 107, 190, 25, 232, 222, 61, 119, 81, 89, 62, 12, 190, 136, 61, 96, 112, 3, 190, 129, 242, 24, 62, 129, 246, 149, 190, 232, 108, 46, 61, 103, 137, 134, 189, 183, 101, 88, 62, 30, 242, 74, 61, 168, 30, 108, 61, 189, 208, 178, 60, 179, 113, 57, 189, 174, 115, 87, 62, 34, 152, 122, 62, 77, 104, 55, 189, 87, 45, 199, 189, 59, 193, 128, 187, 161, 97, 13, 190, 204, 201, 19, 189, 225, 200, 29, 62, 144, 102, 188, 189, 247, 141, 20, 62, 65, 125, 16, 190, 12, 132, 158, 189, 203, 138, 75, 190, 221, 182, 100, 190, 68, 100, 203, 189, 63, 106, 51, 62, 234, 18, 109, 62, 7, 10, 149, 190, 100, 71, 79, 62, 106, 244, 22, 62, 252, 228, 149, 62, 64, 241, 175, 62, 157, 2, 98, 190, 81, 84, 80, 62, 84, 128, 184, 189, 182, 113, 252, 189, 140, 137, 35, 190, 146, 249, 29, 190, 246, 120, 40, 62, 237, 93, 16, 190, 186, 71, 231, 189, 198, 133, 135, 189, 187, 222, 94, 61, 241, 87, 131, 59, 24, 161, 30, 62, 74, 231, 7, 191, 229, 1, 156, 190, 188, 66, 46, 60, 11, 159, 113, 62, 180, 138, 72, 189, 30, 25, 137, 190, 173, 147, 38, 190, 214, 22, 154, 60, 199, 148, 181, 60, 89, 8, 140, 191, 24, 86, 214, 189, 165, 32, 217, 62, 244, 70, 185, 61, 199, 117, 32, 61, 170, 53, 23, 191, 250, 170, 6, 62, 117, 165, 59, 62, 254, 245, 27, 189, 55, 207, 13, 62, 138, 134, 132, 191, 105, 217, 25, 61, 77, 55, 140, 188, 242, 40, 139, 188, 101, 135, 189, 61, 229, 10, 61, 189, 63, 53, 48, 62, 164, 214, 216, 59, 26, 230, 87, 61, 209, 72, 125, 190, 86, 96, 45, 190, 218, 202, 212, 61, 102, 19, 147, 190, 68, 110, 163, 190, 231, 180, 75, 190, 56, 96, 152, 60, 217, 25, 67, 62, 165, 17, 150, 62, 112, 113, 180, 189, 222, 223, 21, 190, 95, 121, 130, 188, 20, 42, 212, 189, 141, 84, 18, 189, 156, 122, 158, 62, 128, 230, 128, 190, 91, 103, 97, 60, 253, 107, 146, 189, 53, 174, 98, 62, 135, 17, 237, 190, 202, 195, 175, 190, 83, 207, 171, 60, 172, 128, 179, 189, 175, 63, 101, 62, 113, 162, 211, 190, 252, 206, 46, 62, 79, 100, 44, 188, 217, 150, 28, 62, 103, 157, 205, 187, 10, 130, 167, 189, 192, 149, 53, 62, 181, 145, 161, 60, 111, 225, 77, 62, 188, 44, 255, 61, 8, 59, 98, 189, 171, 208, 52, 60, 253, 132, 194, 62, 160, 97, 97, 57, 139, 54, 81, 62, 148, 43, 147, 190, 213, 147, 105, 190, 161, 214, 176, 189, 235, 6, 238, 61, 118, 122, 106, 62, 252, 109, 52, 61, 3, 40, 120, 62, 34, 26, 43, 62, 160, 220, 43, 190, 37, 17, 82, 190, 108, 228, 149, 190, 231, 143, 21, 62, 135, 184, 162, 190, 109, 255, 133, 190, 35, 78, 65, 189, 18, 225, 25, 190, 35, 204, 123, 62, 196, 71, 7, 191, 14, 128, 149, 62, 78, 175, 84, 62, 168, 247, 236, 61, 105, 229, 80, 61, 99, 29, 44, 189, 150, 51, 50, 62, 57, 195, 245, 188, 131, 72, 70, 62, 218, 211, 55, 61, 146, 241, 130, 62, 60, 123, 92, 189, 0, 46, 123, 62, 180, 173, 221, 60, 204, 136, 138, 61, 45, 221, 251, 189, 194, 30, 131, 190, 227, 32, 241, 60, 165, 99, 84, 61, 5, 170, 131, 62, 217, 193, 169, 189, 79, 182, 49, 62, 42, 21, 214, 62, 85, 143, 252, 189, 51, 190, 153, 190, 240, 230, 131, 190, 58, 108, 68, 62, 71, 69, 16, 191, 199, 176, 64, 190, 62, 67, 170, 189, 12, 198, 66, 190, 183, 85, 136, 62, 32, 169, 11, 191, 65, 86, 171, 62, 90, 26, 136, 61, 59, 152, 244, 189, 241, 228, 90, 61, 30, 27, 138, 61, 81, 191, 38, 62, 98, 160, 14, 62, 35, 135, 236, 60, 103, 106, 178, 62, 96, 122, 51, 62, 240, 130, 79, 190, 69, 173, 225, 62, 9, 15, 145, 61, 31, 12, 61, 61, 43, 204, 200, 190, 235, 110, 187, 188, 237, 253, 2, 62, 64, 64, 142, 62, 31, 62, 103, 62, 36, 169, 254, 61, 161, 82, 12, 191, 224, 201, 78, 190, 10, 12, 201, 62, 236, 117, 128, 62, 149, 89, 137, 189, 6, 117, 6, 191, 234, 57, 8, 62, 130, 190, 219, 62, 8, 109, 165, 62, 161, 4, 159, 61, 2, 8, 24, 191, 194, 117, 181, 62, 252, 110, 25, 190, 43, 70, 188, 190, 207, 251, 22, 61, 90, 217, 88, 62, 216, 240, 40, 62, 101, 121, 234, 61, 123, 97, 21, 189, 110, 227, 200, 190, 146, 145, 40, 190, 49, 6, 47, 189, 217, 143, 45, 61, 217, 230, 220, 190, 186, 139, 26, 190, 168, 92, 91, 190, 190, 162, 59, 189, 82, 155, 201, 61, 24, 145, 183, 190, 192, 82, 64, 190, 132, 145, 31, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {118, 191, 249, 60, 101, 115, 68, 189, 90, 155, 74, 62, 179, 104, 13, 62, 80, 233, 61, 62, 39, 29, 15, 190, 254, 155, 1, 60, 231, 75, 61, 60, 129, 33, 184, 188, 166, 86, 36, 190, 185, 37, 130, 61, 245, 133, 35, 62, 122, 84, 135, 60, 245, 21, 32, 189, 42, 178, 52, 190, 160, 108, 72, 190, 51, 148, 12, 62, 165, 93, 47, 62, 144, 181, 183, 61, 59, 77, 191, 62, 80, 204, 37, 190, 194, 244, 123, 62, 207, 190, 145, 189, 229, 202, 111, 61, 106, 145, 50, 190, 4, 155, 141, 62, 169, 211, 46, 62, 201, 159, 173, 61, 188, 42, 56, 62, 181, 255, 10, 62, 211, 241, 65, 189, 93, 194, 225, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 153, 234, 62, 67, 44, 220, 189, 10, 187, 15, 189, 180, 169, 185, 62, 23, 2, 172, 190, 145, 40, 196, 189, 156, 179, 110, 63, 177, 136, 44, 191, 79, 63, 0, 62, 148, 153, 203, 189, 98, 5, 184, 190, 49, 238, 39, 63, 124, 52, 55, 62, 110, 131, 32, 190, 158, 156, 32, 190, 47, 236, 111, 62, 20, 175, 212, 190, 138, 145, 59, 63, 210, 12, 226, 62, 65, 71, 235, 189, 125, 136, 102, 61, 70, 216, 20, 188, 199, 75, 9, 190, 109, 8, 122, 62, 148, 49, 181, 61, 208, 10, 211, 189, 12, 202, 160, 190, 160, 21, 26, 191, 41, 159, 172, 62, 250, 35, 158, 62, 49, 75, 251, 62, 61, 191, 33, 191, 5, 67, 155, 61, 182, 53, 160, 189, 12, 224, 34, 190, 174, 239, 155, 190, 105, 227, 88, 190, 195, 196, 174, 187, 129, 43, 128, 62, 121, 201, 218, 62, 40, 227, 44, 190, 21, 91, 161, 59, 240, 139, 60, 190, 22, 125, 83, 62, 253, 54, 215, 61, 144, 214, 46, 61, 209, 249, 30, 189, 236, 31, 62, 62, 63, 36, 197, 62, 254, 32, 246, 61, 183, 44, 17, 190, 7, 119, 151, 190, 41, 147, 132, 62, 109, 60, 186, 190, 62, 226, 46, 61, 155, 203, 165, 188, 21, 129, 49, 189, 253, 223, 97, 190, 122, 207, 194, 62, 113, 253, 0, 189, 206, 112, 49, 61, 172, 235, 158, 60, 200, 77, 85, 189, 122, 95, 113, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 190, 63, 190, 148, 36, 126, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {71, 195, 165, 191, 148, 187, 20, 62, 134, 128, 197, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {134, 105, 24, 64, 242, 126, 140, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0000/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}