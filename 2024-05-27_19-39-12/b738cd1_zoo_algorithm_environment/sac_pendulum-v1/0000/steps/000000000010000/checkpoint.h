// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 182, 200, 190, 181, 46, 146, 62, 175, 247, 120, 188, 203, 163, 237, 190, 23, 188, 164, 190, 175, 56, 43, 63, 59, 133, 28, 63, 246, 195, 29, 191, 194, 199, 207, 189, 156, 116, 186, 190, 57, 4, 159, 191, 149, 36, 218, 189, 169, 196, 48, 190, 34, 20, 65, 191, 107, 6, 56, 191, 2, 135, 132, 62, 106, 208, 222, 62, 15, 191, 28, 63, 215, 52, 100, 62, 89, 67, 109, 190, 11, 156, 250, 62, 232, 188, 33, 63, 191, 129, 84, 63, 83, 244, 131, 62, 69, 187, 201, 190, 252, 14, 53, 62, 84, 155, 48, 191, 148, 82, 47, 62, 254, 164, 108, 63, 231, 71, 221, 190, 154, 152, 58, 63, 62, 182, 123, 63, 48, 110, 149, 62, 173, 164, 13, 191, 186, 21, 158, 63, 81, 238, 211, 62, 12, 212, 187, 62, 248, 46, 37, 63, 25, 111, 131, 61, 168, 180, 42, 63, 137, 178, 33, 191, 184, 189, 156, 190, 202, 96, 74, 62, 158, 96, 44, 63, 177, 236, 16, 191, 64, 249, 90, 190, 236, 212, 65, 189, 245, 79, 201, 187, 209, 7, 168, 62, 43, 138, 111, 191, 71, 171, 240, 190, 21, 49, 26, 191, 144, 107, 169, 62, 80, 212, 68, 190, 207, 187, 60, 63, 36, 226, 224, 189, 254, 35, 228, 189, 225, 5, 235, 190, 113, 148, 251, 62, 13, 227, 110, 61, 187, 250, 179, 190, 238, 114, 240, 61, 85, 116, 175, 62, 101, 58, 160, 62, 74, 227, 253, 62, 71, 109, 158, 60, 176, 125, 7, 63, 187, 210, 217, 190, 204, 217, 146, 60, 242, 97, 140, 62, 83, 126, 19, 63, 27, 114, 216, 62, 201, 188, 8, 63, 92, 186, 102, 191, 231, 173, 92, 190, 46, 20, 193, 62, 236, 11, 73, 191, 11, 156, 186, 190, 160, 67, 2, 190, 172, 176, 134, 62, 97, 244, 22, 191, 51, 72, 243, 62, 120, 108, 80, 63, 153, 180, 74, 62, 23, 0, 134, 62, 130, 183, 247, 190, 93, 23, 4, 63, 249, 60, 68, 190, 127, 24, 171, 61, 27, 4, 227, 190, 107, 35, 170, 190, 22, 150, 7, 191, 218, 168, 130, 56, 149, 219, 14, 63, 105, 94, 212, 62, 75, 127, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 120, 27, 191, 20, 82, 20, 190, 140, 205, 166, 62, 176, 71, 199, 62, 152, 52, 172, 190, 115, 159, 127, 61, 58, 239, 165, 62, 80, 147, 162, 190, 24, 5, 0, 191, 99, 181, 78, 62, 185, 239, 7, 190, 132, 236, 94, 60, 124, 90, 24, 190, 11, 201, 57, 191, 33, 131, 6, 62, 182, 7, 179, 62, 129, 142, 94, 62, 218, 244, 133, 62, 199, 174, 78, 190, 56, 54, 250, 62, 1, 239, 140, 62, 25, 228, 36, 63, 168, 117, 46, 63, 138, 179, 218, 190, 208, 77, 45, 190, 160, 102, 209, 189, 228, 234, 191, 190, 254, 11, 217, 189, 78, 86, 142, 62, 203, 202, 216, 190, 52, 144, 32, 191, 241, 173, 50, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 32, 81, 189, 73, 235, 134, 62, 198, 138, 97, 62, 32, 252, 234, 60, 29, 157, 23, 190, 168, 201, 128, 190, 157, 55, 228, 61, 63, 53, 227, 190, 41, 148, 20, 191, 150, 245, 154, 190, 80, 52, 54, 189, 231, 251, 138, 62, 180, 250, 160, 190, 210, 218, 170, 61, 5, 156, 32, 189, 44, 125, 114, 62, 105, 178, 156, 189, 130, 129, 124, 189, 37, 225, 99, 62, 230, 74, 12, 61, 223, 124, 74, 62, 5, 50, 4, 62, 151, 192, 79, 62, 14, 255, 175, 190, 59, 8, 30, 62, 255, 35, 143, 61, 223, 215, 29, 61, 177, 38, 183, 190, 235, 149, 69, 190, 229, 119, 232, 61, 122, 227, 205, 62, 18, 3, 114, 190, 74, 74, 32, 189, 143, 217, 0, 190, 181, 113, 75, 190, 223, 138, 152, 61, 56, 129, 160, 189, 218, 89, 2, 190, 228, 72, 243, 61, 94, 38, 55, 189, 198, 5, 22, 190, 16, 192, 248, 61, 187, 170, 40, 190, 79, 65, 6, 190, 3, 164, 31, 190, 211, 37, 187, 189, 79, 204, 233, 189, 7, 6, 59, 190, 204, 17, 38, 61, 30, 51, 146, 189, 53, 168, 118, 189, 18, 56, 3, 189, 36, 28, 148, 61, 124, 136, 16, 62, 87, 233, 155, 59, 112, 198, 235, 189, 246, 228, 189, 60, 215, 127, 179, 61, 216, 85, 222, 189, 245, 128, 225, 61, 195, 30, 195, 188, 54, 244, 168, 188, 180, 34, 176, 188, 168, 230, 207, 61, 31, 255, 252, 188, 204, 33, 205, 61, 236, 183, 156, 62, 63, 63, 62, 189, 241, 248, 147, 61, 88, 191, 136, 187, 159, 52, 148, 60, 55, 29, 216, 189, 127, 10, 2, 62, 94, 197, 41, 62, 77, 27, 45, 190, 251, 35, 3, 189, 160, 17, 108, 190, 66, 54, 165, 190, 230, 219, 217, 189, 234, 30, 131, 60, 243, 172, 21, 62, 211, 178, 1, 189, 155, 128, 8, 62, 98, 78, 131, 61, 211, 138, 83, 61, 232, 235, 74, 62, 23, 218, 0, 62, 68, 232, 30, 188, 207, 103, 154, 190, 218, 34, 213, 61, 75, 255, 170, 189, 167, 203, 82, 190, 60, 53, 23, 190, 20, 229, 219, 60, 133, 11, 200, 60, 65, 157, 172, 188, 100, 7, 246, 189, 153, 146, 118, 62, 184, 22, 187, 62, 121, 223, 51, 62, 148, 235, 96, 190, 147, 233, 124, 190, 74, 99, 191, 61, 96, 200, 73, 190, 196, 170, 218, 190, 41, 89, 27, 189, 90, 36, 100, 190, 1, 65, 3, 189, 135, 90, 43, 190, 200, 181, 73, 190, 17, 228, 45, 62, 38, 119, 17, 62, 178, 101, 192, 189, 97, 151, 40, 190, 10, 167, 216, 62, 112, 114, 110, 190, 198, 110, 61, 61, 115, 74, 100, 62, 142, 74, 45, 189, 43, 13, 183, 190, 128, 54, 128, 62, 204, 20, 27, 62, 253, 42, 91, 189, 72, 2, 138, 190, 121, 231, 234, 188, 84, 1, 171, 188, 50, 240, 229, 61, 168, 133, 127, 62, 252, 20, 217, 61, 46, 181, 69, 190, 225, 8, 148, 60, 55, 198, 160, 62, 198, 45, 17, 62, 66, 123, 137, 62, 163, 206, 238, 60, 87, 121, 98, 61, 4, 150, 23, 61, 104, 12, 65, 62, 163, 34, 243, 62, 201, 190, 223, 190, 169, 43, 209, 187, 8, 84, 176, 60, 144, 226, 142, 190, 118, 89, 223, 61, 20, 52, 50, 62, 206, 123, 75, 189, 186, 248, 41, 61, 178, 145, 161, 190, 45, 24, 242, 189, 242, 87, 2, 61, 97, 38, 151, 62, 198, 78, 26, 62, 181, 56, 197, 189, 89, 36, 55, 190, 189, 130, 33, 190, 4, 142, 98, 62, 195, 98, 199, 62, 164, 219, 135, 61, 232, 233, 60, 190, 137, 145, 56, 188, 104, 78, 122, 189, 213, 157, 56, 190, 57, 84, 32, 190, 88, 73, 25, 188, 171, 125, 117, 60, 14, 29, 173, 61, 5, 199, 36, 61, 150, 89, 165, 61, 137, 212, 234, 187, 122, 13, 199, 188, 119, 12, 43, 190, 119, 118, 105, 60, 88, 49, 3, 190, 41, 241, 207, 189, 35, 226, 56, 60, 16, 208, 59, 190, 106, 126, 40, 61, 213, 89, 81, 189, 145, 248, 167, 187, 10, 33, 225, 59, 203, 30, 196, 189, 126, 214, 125, 61, 184, 58, 45, 190, 148, 249, 16, 190, 218, 169, 95, 189, 219, 160, 165, 61, 124, 136, 110, 61, 178, 0, 41, 60, 255, 61, 145, 61, 36, 215, 225, 189, 240, 139, 46, 190, 208, 114, 6, 189, 246, 146, 190, 59, 21, 44, 196, 189, 188, 233, 25, 190, 163, 194, 3, 62, 111, 121, 186, 190, 15, 163, 111, 191, 149, 75, 152, 190, 243, 58, 23, 191, 69, 200, 216, 190, 181, 3, 191, 190, 49, 46, 102, 191, 203, 23, 118, 189, 118, 141, 42, 191, 157, 144, 254, 61, 66, 176, 167, 61, 247, 88, 14, 61, 226, 187, 175, 190, 210, 217, 116, 62, 201, 244, 8, 62, 106, 105, 29, 62, 3, 176, 215, 61, 199, 148, 228, 61, 204, 59, 184, 190, 25, 99, 126, 190, 160, 205, 212, 61, 31, 254, 0, 190, 230, 209, 92, 61, 56, 248, 231, 61, 122, 29, 153, 191, 92, 50, 191, 61, 85, 190, 47, 62, 187, 232, 87, 190, 176, 173, 241, 61, 131, 147, 55, 191, 252, 219, 116, 190, 162, 58, 89, 190, 32, 81, 33, 62, 119, 87, 64, 61, 207, 16, 226, 190, 167, 42, 128, 62, 149, 221, 129, 62, 83, 11, 15, 63, 220, 178, 70, 62, 216, 89, 12, 191, 105, 20, 243, 62, 222, 69, 67, 191, 59, 197, 169, 190, 222, 42, 12, 62, 14, 141, 199, 61, 208, 38, 202, 61, 18, 33, 22, 60, 130, 239, 136, 62, 195, 97, 189, 61, 174, 190, 22, 62, 108, 90, 6, 190, 39, 187, 28, 190, 33, 72, 146, 191, 90, 92, 6, 191, 248, 3, 152, 190, 186, 199, 72, 61, 86, 14, 194, 188, 64, 6, 148, 189, 26, 40, 166, 190, 78, 144, 224, 188, 48, 185, 50, 190, 231, 145, 245, 60, 154, 19, 214, 59, 48, 209, 28, 190, 199, 1, 127, 60, 156, 175, 31, 189, 152, 195, 205, 189, 109, 108, 37, 189, 5, 183, 55, 61, 117, 85, 102, 61, 82, 144, 151, 61, 63, 243, 95, 60, 122, 22, 159, 189, 98, 194, 228, 61, 158, 126, 57, 189, 129, 192, 134, 61, 206, 115, 137, 189, 154, 162, 49, 190, 210, 112, 15, 190, 225, 211, 242, 59, 58, 194, 199, 61, 220, 62, 202, 189, 155, 1, 33, 190, 96, 114, 27, 190, 234, 252, 245, 189, 177, 5, 162, 61, 193, 248, 146, 189, 1, 179, 34, 190, 59, 146, 0, 188, 15, 37, 120, 188, 62, 146, 231, 59, 150, 251, 154, 188, 195, 127, 63, 189, 147, 232, 207, 61, 23, 3, 159, 60, 199, 144, 208, 188, 35, 112, 43, 61, 25, 124, 116, 189, 38, 172, 63, 190, 61, 69, 48, 62, 94, 48, 230, 59, 77, 226, 48, 190, 155, 244, 0, 62, 190, 168, 42, 190, 130, 150, 12, 189, 141, 66, 195, 188, 46, 17, 77, 60, 72, 216, 111, 61, 74, 137, 24, 61, 26, 211, 87, 188, 169, 64, 26, 190, 162, 179, 15, 190, 51, 189, 255, 61, 238, 217, 244, 189, 245, 175, 173, 189, 120, 69, 37, 61, 223, 157, 146, 58, 132, 99, 32, 190, 192, 226, 184, 59, 57, 96, 36, 62, 72, 121, 83, 189, 163, 168, 217, 61, 192, 124, 245, 61, 87, 233, 166, 189, 133, 164, 68, 189, 70, 15, 91, 62, 111, 35, 130, 62, 118, 71, 115, 189, 59, 92, 253, 189, 82, 62, 44, 61, 79, 218, 171, 61, 165, 49, 45, 188, 30, 71, 165, 60, 221, 221, 37, 62, 165, 50, 82, 189, 108, 221, 86, 190, 249, 197, 53, 62, 187, 162, 106, 191, 50, 197, 0, 59, 171, 90, 167, 61, 114, 146, 255, 189, 106, 254, 7, 190, 166, 151, 30, 190, 237, 163, 38, 62, 2, 1, 32, 62, 68, 91, 253, 61, 22, 79, 108, 62, 40, 94, 141, 190, 58, 177, 44, 191, 120, 254, 110, 190, 182, 144, 89, 62, 60, 115, 166, 62, 100, 182, 23, 61, 143, 24, 211, 58, 113, 30, 81, 62, 251, 105, 141, 62, 30, 129, 119, 61, 22, 138, 101, 62, 102, 89, 169, 62, 103, 210, 216, 187, 88, 190, 177, 190, 220, 182, 113, 190, 108, 112, 118, 62, 244, 206, 205, 190, 90, 162, 179, 190, 207, 138, 160, 190, 162, 231, 159, 190, 122, 150, 48, 190, 7, 136, 232, 190, 60, 233, 239, 61, 87, 188, 132, 62, 160, 212, 159, 189, 56, 161, 122, 190, 114, 55, 22, 61, 201, 226, 27, 62, 235, 150, 209, 60, 160, 216, 2, 61, 89, 28, 88, 62, 0, 91, 134, 62, 120, 236, 194, 190, 220, 250, 147, 62, 153, 164, 108, 62, 26, 123, 62, 62, 122, 16, 186, 190, 252, 158, 7, 190, 215, 216, 161, 61, 94, 138, 243, 62, 114, 9, 7, 60, 239, 205, 51, 62, 198, 32, 85, 62, 241, 166, 222, 61, 28, 217, 28, 190, 26, 190, 28, 60, 84, 148, 134, 190, 171, 183, 5, 62, 5, 131, 189, 190, 100, 211, 106, 61, 37, 248, 188, 61, 160, 45, 139, 190, 219, 36, 8, 188, 94, 128, 217, 190, 85, 200, 43, 62, 86, 4, 229, 188, 45, 57, 12, 60, 232, 195, 50, 190, 41, 22, 179, 61, 181, 170, 119, 62, 113, 250, 167, 187, 55, 130, 50, 61, 113, 218, 86, 62, 82, 3, 181, 61, 253, 145, 71, 188, 157, 55, 210, 62, 96, 252, 52, 62, 111, 237, 15, 62, 119, 246, 179, 189, 43, 124, 68, 189, 175, 53, 138, 61, 91, 241, 88, 61, 62, 57, 38, 62, 40, 218, 21, 189, 90, 33, 192, 189, 219, 104, 26, 190, 2, 75, 18, 189, 95, 169, 49, 189, 28, 234, 158, 189, 226, 106, 17, 190, 121, 56, 206, 189, 153, 8, 157, 61, 254, 85, 142, 188, 90, 122, 116, 61, 153, 255, 239, 61, 62, 1, 191, 189, 213, 196, 111, 61, 168, 92, 231, 189, 173, 204, 108, 189, 117, 191, 46, 190, 225, 123, 44, 189, 202, 108, 193, 189, 229, 81, 178, 61, 198, 199, 56, 188, 18, 55, 58, 190, 140, 3, 185, 189, 162, 191, 92, 61, 234, 137, 252, 188, 170, 197, 2, 190, 83, 235, 12, 62, 34, 187, 9, 190, 22, 62, 213, 61, 117, 195, 12, 62, 234, 27, 238, 189, 177, 73, 178, 60, 11, 219, 92, 189, 242, 158, 173, 189, 20, 101, 243, 186, 204, 172, 192, 61, 212, 190, 226, 61, 244, 66, 147, 61, 141, 26, 147, 189, 209, 236, 201, 61, 50, 125, 33, 61, 55, 147, 43, 190, 87, 93, 46, 190, 52, 187, 13, 190, 46, 96, 193, 61, 137, 17, 37, 190, 181, 207, 126, 59, 50, 28, 12, 62, 75, 217, 224, 189, 96, 92, 249, 189, 241, 204, 20, 190, 170, 206, 69, 61, 26, 27, 111, 61, 0, 154, 86, 188, 39, 123, 190, 189, 92, 121, 136, 61, 207, 136, 68, 189, 166, 190, 228, 189, 119, 197, 192, 189, 152, 109, 252, 188, 128, 30, 155, 188, 139, 104, 254, 61, 204, 171, 40, 62, 136, 176, 160, 188, 174, 97, 195, 57, 7, 221, 229, 189, 186, 243, 71, 62, 184, 94, 163, 190, 67, 140, 60, 189, 243, 172, 139, 190, 226, 99, 50, 61, 129, 72, 174, 190, 29, 128, 139, 190, 229, 206, 59, 190, 71, 120, 137, 189, 137, 245, 95, 62, 10, 158, 143, 190, 5, 218, 182, 62, 21, 120, 126, 61, 79, 11, 81, 190, 55, 46, 143, 61, 83, 88, 3, 61, 167, 138, 254, 62, 133, 161, 240, 61, 205, 40, 238, 61, 208, 23, 37, 62, 253, 140, 146, 61, 202, 25, 19, 188, 84, 184, 198, 61, 222, 99, 95, 62, 192, 230, 96, 62, 39, 8, 247, 190, 76, 148, 146, 190, 71, 232, 63, 189, 10, 108, 236, 60, 95, 79, 88, 62, 153, 84, 17, 190, 15, 30, 32, 189, 198, 173, 126, 62, 99, 195, 134, 62, 220, 46, 137, 190, 122, 218, 157, 190, 159, 197, 23, 186, 202, 242, 185, 190, 197, 212, 22, 191, 182, 195, 46, 190, 219, 84, 2, 190, 224, 142, 231, 190, 66, 213, 79, 190, 36, 244, 167, 189, 19, 189, 167, 190, 181, 190, 242, 61, 95, 217, 248, 61, 168, 19, 83, 189, 138, 195, 134, 190, 251, 18, 108, 61, 154, 2, 17, 61, 33, 168, 218, 189, 75, 38, 148, 60, 126, 137, 8, 191, 172, 121, 158, 62, 135, 76, 207, 61, 117, 227, 244, 190, 47, 10, 57, 190, 206, 152, 97, 61, 9, 14, 142, 190, 67, 13, 79, 61, 180, 76, 163, 190, 13, 174, 87, 187, 128, 97, 231, 61, 247, 47, 175, 62, 8, 119, 197, 62, 213, 105, 28, 191, 43, 74, 96, 190, 188, 216, 156, 62, 58, 192, 20, 191, 160, 81, 149, 191, 220, 48, 0, 191, 10, 104, 167, 190, 210, 131, 16, 62, 111, 0, 42, 191, 251, 161, 109, 189, 25, 50, 146, 61, 72, 218, 197, 61, 108, 48, 165, 190, 144, 202, 87, 62, 254, 124, 86, 62, 162, 137, 55, 189, 93, 233, 187, 61, 223, 66, 227, 61, 246, 9, 151, 60, 166, 41, 204, 190, 39, 153, 219, 61, 98, 75, 147, 189, 96, 86, 80, 190, 142, 251, 195, 190, 105, 25, 32, 190, 61, 249, 208, 61, 253, 191, 221, 62, 99, 177, 58, 190, 72, 77, 154, 187, 147, 86, 51, 61, 103, 8, 141, 62, 86, 207, 57, 61, 239, 165, 4, 191, 127, 54, 2, 188, 96, 53, 164, 61, 27, 177, 237, 190, 151, 61, 38, 191, 166, 128, 25, 191, 240, 92, 161, 190, 23, 163, 12, 62, 76, 73, 51, 191, 136, 225, 234, 60, 71, 153, 150, 189, 146, 225, 63, 60, 88, 245, 57, 191, 90, 196, 68, 62, 214, 143, 163, 62, 49, 2, 121, 62, 6, 192, 16, 62, 114, 8, 58, 61, 43, 193, 49, 190, 67, 135, 61, 190, 212, 121, 90, 62, 138, 71, 55, 191, 27, 110, 164, 61, 135, 165, 9, 191, 24, 213, 247, 61, 134, 49, 150, 188, 67, 207, 64, 190, 118, 123, 41, 190, 162, 13, 113, 187, 130, 208, 61, 190, 128, 232, 178, 62, 12, 106, 14, 62, 113, 237, 40, 186, 241, 28, 33, 190, 215, 154, 211, 61, 130, 201, 141, 190, 100, 17, 54, 61, 89, 5, 55, 62, 247, 142, 99, 189, 51, 4, 135, 61, 218, 189, 250, 188, 34, 182, 98, 190, 82, 58, 228, 189, 95, 80, 59, 62, 71, 237, 255, 61, 58, 146, 134, 59, 96, 222, 249, 60, 87, 53, 33, 62, 209, 144, 12, 62, 252, 179, 53, 62, 185, 244, 66, 62, 34, 80, 108, 61, 27, 253, 85, 190, 5, 226, 184, 189, 216, 190, 53, 190, 106, 178, 72, 190, 189, 3, 69, 61, 170, 218, 100, 61, 111, 64, 29, 62, 145, 0, 140, 61, 46, 111, 138, 61, 5, 185, 22, 189, 1, 196, 127, 190, 223, 245, 131, 62, 161, 37, 68, 62, 2, 95, 103, 61, 183, 219, 228, 61, 4, 24, 201, 61, 152, 139, 105, 190, 228, 186, 16, 190, 54, 15, 139, 190, 244, 210, 171, 61, 236, 15, 43, 61, 232, 250, 185, 62, 180, 11, 106, 60, 5, 218, 6, 62, 174, 64, 45, 62, 192, 1, 143, 189, 78, 197, 12, 63, 104, 161, 240, 189, 153, 214, 7, 62, 41, 126, 134, 190, 79, 125, 3, 61, 79, 255, 198, 61, 219, 243, 244, 62, 35, 50, 42, 62, 73, 166, 126, 59, 126, 220, 230, 60, 122, 155, 29, 189, 118, 4, 71, 62, 210, 39, 27, 61, 54, 136, 105, 62, 186, 55, 121, 189, 51, 157, 12, 191, 49, 12, 66, 62, 3, 114, 163, 189, 32, 131, 222, 189, 57, 54, 177, 190, 44, 126, 149, 190, 225, 133, 52, 189, 88, 252, 34, 62, 183, 131, 94, 62, 109, 223, 41, 62, 153, 252, 61, 190, 160, 233, 44, 62, 94, 149, 208, 189, 143, 189, 137, 189, 45, 223, 164, 61, 59, 91, 212, 61, 42, 17, 37, 62, 133, 189, 163, 62, 196, 93, 127, 190, 185, 99, 255, 190, 140, 232, 28, 62, 219, 255, 143, 62, 217, 238, 40, 191, 223, 134, 211, 189, 181, 207, 97, 62, 219, 63, 79, 61, 11, 181, 102, 188, 250, 200, 2, 190, 182, 21, 58, 187, 51, 172, 59, 62, 223, 155, 94, 62, 151, 178, 26, 190, 151, 32, 25, 189, 19, 59, 35, 189, 51, 247, 113, 189, 50, 5, 204, 188, 16, 168, 108, 61, 0, 198, 231, 61, 107, 27, 180, 189, 183, 149, 36, 190, 88, 7, 34, 190, 79, 78, 46, 190, 184, 228, 12, 62, 210, 186, 66, 189, 24, 118, 237, 189, 133, 70, 20, 62, 8, 185, 182, 61, 3, 126, 2, 190, 185, 152, 60, 190, 157, 195, 215, 189, 167, 85, 173, 189, 156, 193, 22, 188, 99, 231, 94, 189, 138, 146, 147, 186, 12, 255, 50, 189, 181, 162, 88, 189, 207, 127, 116, 189, 65, 96, 76, 60, 181, 110, 46, 189, 61, 22, 34, 190, 126, 141, 11, 61, 251, 55, 51, 62, 198, 100, 54, 61, 140, 231, 252, 61, 77, 139, 227, 189, 202, 166, 251, 61, 148, 42, 119, 190, 211, 86, 228, 189, 40, 32, 62, 191, 60, 163, 141, 190, 152, 224, 211, 190, 210, 253, 18, 62, 78, 232, 90, 62, 93, 14, 198, 190, 241, 82, 171, 190, 158, 138, 182, 190, 91, 67, 208, 61, 161, 108, 13, 62, 160, 13, 170, 189, 107, 29, 21, 189, 222, 64, 17, 62, 73, 182, 247, 62, 43, 32, 164, 188, 92, 98, 4, 191, 18, 65, 2, 188, 93, 229, 89, 190, 128, 157, 130, 188, 224, 53, 187, 61, 33, 45, 147, 61, 213, 58, 4, 60, 38, 121, 231, 190, 10, 171, 19, 191, 184, 243, 31, 62, 159, 38, 22, 190, 195, 24, 104, 62, 55, 6, 115, 188, 75, 73, 70, 189, 137, 73, 1, 190, 39, 37, 173, 61, 215, 90, 112, 61, 24, 229, 55, 190, 193, 155, 202, 61, 10, 71, 139, 60, 207, 7, 153, 189, 73, 149, 139, 189, 207, 0, 124, 189, 178, 190, 219, 187, 216, 88, 202, 61, 141, 170, 247, 61, 230, 32, 194, 189, 145, 130, 198, 188, 236, 125, 11, 189, 43, 57, 61, 190, 73, 15, 23, 190, 73, 102, 234, 189, 232, 68, 167, 60, 235, 123, 220, 61, 117, 232, 26, 189, 37, 10, 234, 61, 202, 196, 152, 189, 152, 165, 231, 189, 42, 83, 78, 189, 133, 193, 23, 62, 71, 126, 136, 60, 81, 166, 61, 189, 113, 223, 151, 188, 59, 30, 57, 61, 202, 200, 69, 189, 105, 122, 158, 190, 140, 147, 112, 62, 26, 234, 47, 61, 179, 87, 187, 61, 210, 88, 212, 61, 61, 217, 56, 190, 25, 98, 72, 190, 242, 27, 165, 61, 207, 10, 69, 62, 112, 2, 236, 61, 249, 152, 87, 189, 225, 236, 28, 62, 119, 7, 184, 190, 65, 60, 28, 61, 98, 20, 166, 189, 178, 189, 85, 62, 136, 138, 36, 61, 203, 32, 33, 188, 146, 40, 90, 60, 222, 52, 97, 189, 14, 40, 126, 62, 204, 64, 123, 62, 38, 78, 185, 60, 225, 152, 217, 189, 125, 155, 245, 59, 47, 227, 31, 190, 20, 121, 211, 58, 51, 126, 218, 61, 18, 166, 229, 189, 247, 141, 20, 62, 157, 169, 46, 190, 12, 132, 158, 189, 104, 169, 1, 190, 104, 155, 80, 190, 216, 105, 173, 190, 42, 105, 195, 61, 111, 24, 137, 62, 76, 87, 35, 190, 186, 176, 28, 62, 135, 24, 4, 62, 59, 10, 165, 62, 232, 27, 160, 62, 231, 15, 218, 190, 97, 125, 51, 62, 7, 92, 201, 190, 123, 44, 195, 189, 157, 16, 236, 189, 217, 143, 136, 190, 80, 172, 124, 62, 233, 178, 29, 190, 160, 85, 129, 188, 203, 82, 170, 188, 154, 208, 237, 61, 250, 165, 70, 61, 141, 91, 210, 61, 181, 199, 78, 191, 173, 181, 232, 190, 8, 215, 227, 60, 255, 128, 67, 62, 169, 176, 180, 61, 237, 42, 138, 190, 173, 147, 38, 190, 108, 243, 211, 60, 199, 148, 181, 60, 180, 158, 163, 191, 92, 114, 17, 190, 132, 233, 3, 63, 25, 165, 175, 61, 8, 83, 50, 62, 27, 253, 20, 191, 71, 70, 18, 62, 84, 86, 54, 62, 71, 196, 4, 189, 157, 233, 19, 62, 76, 16, 174, 191, 177, 247, 43, 62, 31, 127, 20, 190, 159, 19, 140, 187, 139, 103, 181, 61, 36, 92, 114, 189, 53, 4, 66, 62, 38, 26, 109, 190, 238, 227, 112, 61, 36, 226, 74, 190, 160, 78, 206, 189, 184, 168, 215, 61, 29, 213, 220, 62, 83, 177, 232, 190, 238, 83, 116, 190, 133, 146, 8, 61, 113, 210, 129, 62, 16, 20, 156, 62, 46, 194, 161, 189, 222, 223, 21, 190, 186, 120, 51, 189, 20, 42, 212, 189, 209, 148, 166, 188, 182, 91, 151, 62, 83, 69, 219, 190, 16, 145, 203, 60, 15, 190, 24, 189, 103, 222, 84, 62, 61, 242, 242, 190, 210, 154, 159, 190, 131, 195, 228, 60, 174, 143, 176, 189, 71, 41, 163, 62, 218, 152, 192, 190, 228, 118, 173, 62, 66, 146, 45, 188, 212, 128, 2, 62, 108, 158, 180, 187, 110, 140, 1, 190, 81, 43, 124, 62, 88, 245, 44, 61, 136, 108, 128, 62, 249, 165, 208, 61, 243, 29, 173, 189, 147, 20, 1, 61, 35, 47, 205, 62, 62, 88, 8, 187, 27, 252, 97, 62, 154, 193, 143, 190, 56, 165, 111, 190, 173, 226, 124, 189, 235, 6, 238, 61, 115, 162, 187, 62, 252, 109, 52, 61, 171, 210, 124, 62, 40, 250, 30, 62, 234, 144, 165, 190, 110, 167, 78, 190, 130, 234, 145, 190, 160, 2, 0, 62, 81, 231, 178, 190, 232, 132, 108, 190, 41, 135, 220, 188, 67, 3, 33, 190, 177, 170, 147, 62, 160, 198, 247, 190, 160, 220, 226, 62, 35, 39, 95, 62, 13, 19, 201, 61, 12, 127, 71, 61, 254, 108, 155, 189, 48, 88, 118, 62, 164, 110, 71, 188, 143, 49, 102, 62, 129, 124, 240, 60, 181, 117, 110, 62, 67, 68, 133, 189, 74, 213, 135, 62, 243, 140, 154, 60, 164, 179, 177, 61, 157, 170, 254, 189, 221, 249, 135, 190, 211, 17, 84, 61, 165, 99, 84, 61, 216, 109, 205, 62, 217, 193, 169, 189, 87, 53, 49, 62, 205, 138, 218, 62, 19, 23, 16, 190, 53, 139, 153, 190, 14, 220, 136, 190, 148, 204, 65, 62, 84, 27, 32, 191, 216, 125, 46, 190, 66, 70, 155, 189, 9, 218, 93, 190, 192, 135, 37, 62, 228, 141, 3, 191, 8, 209, 222, 62, 158, 2, 132, 61, 217, 84, 246, 189, 217, 78, 85, 61, 56, 111, 27, 61, 115, 29, 108, 62, 208, 98, 130, 61, 198, 196, 253, 60, 167, 12, 164, 62, 182, 157, 60, 62, 140, 220, 121, 190, 87, 5, 226, 62, 200, 234, 97, 61, 30, 246, 92, 61, 126, 234, 226, 190, 45, 209, 26, 187, 86, 151, 15, 62, 64, 64, 142, 62, 103, 194, 185, 62, 36, 169, 254, 61, 121, 159, 32, 191, 255, 213, 135, 190, 52, 234, 248, 62, 45, 255, 127, 62, 29, 35, 137, 189, 252, 38, 30, 191, 165, 29, 233, 61, 220, 4, 214, 62, 120, 242, 147, 62, 24, 12, 3, 61, 27, 90, 61, 191, 37, 203, 189, 62, 31, 188, 111, 190, 148, 179, 199, 190, 91, 63, 168, 60, 67, 144, 76, 62, 178, 79, 45, 62, 197, 255, 166, 190, 208, 80, 186, 189, 131, 12, 183, 190, 11, 4, 55, 190, 253, 114, 218, 189, 217, 143, 45, 61, 74, 9, 251, 190, 208, 227, 52, 190, 231, 12, 99, 190, 181, 231, 14, 190, 99, 245, 103, 61, 0, 176, 182, 190, 192, 82, 64, 190, 127, 46, 118, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 62, 30, 61, 17, 108, 105, 189, 217, 159, 50, 62, 188, 203, 34, 62, 59, 121, 36, 62, 6, 99, 19, 190, 144, 133, 237, 188, 45, 59, 192, 61, 129, 33, 184, 188, 166, 86, 36, 190, 118, 187, 149, 61, 15, 50, 49, 62, 207, 226, 201, 59, 245, 21, 32, 189, 42, 178, 52, 190, 215, 225, 122, 190, 1, 7, 8, 62, 242, 30, 88, 62, 150, 215, 0, 62, 73, 88, 196, 62, 67, 121, 47, 190, 114, 157, 146, 62, 207, 190, 145, 189, 101, 192, 166, 188, 106, 145, 50, 190, 16, 104, 142, 62, 196, 64, 98, 62, 8, 21, 238, 61, 128, 38, 32, 62, 1, 16, 246, 61, 193, 193, 70, 189, 134, 118, 200, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {178, 185, 194, 62, 140, 67, 220, 189, 229, 194, 176, 188, 19, 215, 185, 62, 232, 192, 173, 190, 202, 214, 195, 189, 3, 39, 110, 63, 113, 13, 110, 191, 79, 63, 0, 62, 148, 153, 203, 189, 195, 238, 195, 190, 144, 142, 25, 63, 7, 190, 6, 62, 110, 131, 32, 190, 158, 156, 32, 190, 186, 79, 103, 62, 78, 126, 10, 191, 61, 187, 99, 63, 255, 21, 32, 63, 100, 65, 205, 189, 175, 204, 169, 60, 129, 171, 188, 60, 199, 75, 9, 190, 144, 101, 140, 62, 148, 49, 181, 61, 222, 194, 175, 189, 99, 147, 10, 191, 228, 194, 59, 191, 45, 25, 175, 62, 156, 39, 155, 62, 143, 7, 246, 62, 115, 149, 48, 191, 229, 187, 19, 61, 54, 101, 159, 189, 53, 151, 30, 190, 45, 223, 161, 190, 108, 49, 88, 190, 34, 130, 173, 187, 28, 193, 235, 62, 75, 50, 221, 62, 40, 227, 44, 190, 21, 91, 161, 59, 1, 128, 114, 190, 121, 140, 165, 62, 97, 144, 138, 61, 144, 214, 46, 61, 209, 249, 30, 189, 230, 104, 0, 63, 222, 123, 238, 62, 53, 58, 161, 62, 10, 18, 27, 190, 26, 96, 151, 190, 73, 66, 165, 62, 199, 135, 221, 190, 62, 226, 46, 61, 68, 199, 187, 59, 21, 129, 49, 189, 147, 191, 122, 190, 158, 115, 9, 63, 96, 68, 177, 61, 227, 166, 172, 61, 167, 150, 243, 188, 174, 167, 188, 60, 128, 45, 165, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {216, 131, 59, 190, 192, 171, 151, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {189, 15, 175, 63, 224, 105, 132, 191, 86, 208, 95, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {154, 110, 88, 64, 64, 234, 176, 59};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0000/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}