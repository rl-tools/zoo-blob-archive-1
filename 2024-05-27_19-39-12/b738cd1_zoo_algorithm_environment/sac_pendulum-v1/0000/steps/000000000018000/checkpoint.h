// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 182, 200, 190, 181, 46, 146, 62, 175, 247, 120, 188, 32, 15, 42, 191, 180, 103, 239, 190, 108, 254, 38, 63, 41, 34, 17, 63, 24, 2, 52, 191, 226, 122, 23, 190, 36, 75, 223, 190, 6, 22, 208, 191, 169, 131, 233, 189, 29, 51, 154, 190, 243, 112, 78, 191, 249, 9, 53, 191, 158, 40, 85, 62, 26, 153, 159, 62, 251, 48, 48, 63, 24, 22, 28, 62, 1, 179, 134, 190, 204, 129, 255, 62, 106, 12, 28, 63, 255, 33, 68, 63, 18, 66, 151, 62, 67, 193, 20, 191, 215, 31, 38, 62, 185, 200, 48, 191, 223, 25, 84, 62, 28, 135, 134, 63, 153, 113, 194, 190, 21, 177, 47, 63, 22, 174, 146, 63, 142, 183, 127, 62, 130, 173, 78, 191, 143, 109, 203, 63, 75, 20, 158, 62, 189, 53, 212, 62, 132, 88, 51, 63, 16, 167, 138, 61, 155, 79, 81, 63, 20, 159, 47, 191, 40, 172, 168, 190, 104, 112, 117, 62, 161, 63, 28, 63, 143, 160, 11, 191, 102, 191, 154, 190, 94, 238, 142, 61, 201, 165, 159, 61, 89, 163, 203, 62, 172, 27, 145, 191, 140, 23, 221, 190, 211, 84, 39, 191, 4, 22, 200, 62, 17, 160, 35, 190, 203, 62, 46, 63, 175, 236, 144, 189, 220, 116, 16, 190, 208, 234, 10, 191, 89, 70, 82, 63, 226, 240, 106, 61, 160, 39, 6, 191, 89, 212, 63, 62, 9, 215, 158, 62, 55, 244, 103, 62, 124, 53, 8, 63, 102, 4, 61, 61, 214, 189, 36, 62, 166, 136, 17, 191, 111, 67, 106, 60, 132, 174, 64, 60, 153, 219, 59, 63, 33, 27, 184, 62, 14, 99, 9, 63, 131, 38, 130, 191, 67, 97, 96, 190, 45, 106, 186, 62, 10, 219, 108, 191, 44, 96, 186, 190, 201, 59, 141, 189, 194, 116, 25, 62, 104, 97, 13, 191, 43, 20, 224, 62, 164, 6, 109, 63, 247, 113, 63, 62, 187, 181, 23, 62, 87, 150, 61, 191, 121, 7, 30, 63, 238, 129, 195, 190, 52, 114, 187, 188, 32, 34, 190, 190, 107, 35, 170, 190, 22, 150, 7, 191, 218, 168, 130, 56, 88, 180, 58, 63, 96, 151, 182, 62, 166, 238, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 120, 27, 191, 55, 149, 129, 189, 71, 17, 121, 62, 229, 208, 226, 62, 174, 31, 174, 190, 136, 150, 121, 187, 177, 130, 149, 62, 81, 184, 204, 190, 87, 43, 194, 190, 149, 249, 71, 62, 252, 82, 5, 190, 250, 35, 93, 190, 20, 113, 161, 189, 12, 20, 51, 191, 159, 46, 224, 61, 16, 136, 143, 62, 168, 173, 45, 62, 197, 23, 90, 62, 118, 110, 164, 190, 27, 114, 0, 63, 88, 100, 174, 62, 155, 34, 8, 63, 71, 229, 194, 62, 4, 69, 43, 191, 47, 1, 40, 190, 172, 246, 4, 190, 184, 33, 251, 190, 202, 242, 205, 189, 204, 20, 56, 62, 134, 67, 45, 191, 52, 144, 32, 191, 48, 219, 44, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 32, 81, 189, 245, 203, 154, 62, 128, 119, 37, 62, 169, 182, 146, 58, 78, 36, 60, 190, 245, 59, 37, 190, 250, 173, 238, 61, 208, 220, 205, 190, 76, 183, 91, 191, 200, 30, 198, 190, 201, 229, 242, 188, 207, 127, 14, 63, 201, 134, 164, 190, 146, 157, 35, 62, 125, 234, 9, 190, 54, 76, 113, 62, 240, 197, 131, 190, 54, 194, 8, 190, 169, 199, 216, 61, 39, 156, 123, 62, 155, 75, 140, 62, 239, 219, 177, 61, 153, 86, 25, 62, 78, 44, 184, 190, 77, 188, 137, 61, 107, 247, 205, 189, 96, 36, 217, 189, 48, 239, 161, 190, 126, 125, 44, 190, 38, 207, 97, 61, 122, 227, 205, 62, 219, 175, 233, 190, 74, 74, 32, 189, 198, 133, 9, 190, 244, 18, 96, 190, 100, 115, 100, 61, 207, 193, 207, 189, 176, 179, 13, 190, 147, 81, 213, 61, 236, 66, 55, 189, 160, 87, 22, 190, 233, 98, 248, 61, 236, 0, 41, 190, 79, 65, 6, 190, 164, 164, 31, 190, 181, 249, 183, 189, 118, 194, 234, 189, 248, 206, 71, 190, 83, 136, 188, 60, 142, 211, 161, 189, 226, 255, 119, 189, 89, 84, 15, 189, 67, 203, 134, 61, 89, 124, 11, 62, 192, 87, 89, 188, 112, 198, 235, 189, 36, 193, 249, 59, 27, 67, 147, 61, 216, 85, 222, 189, 225, 60, 225, 61, 21, 88, 59, 189, 54, 244, 168, 188, 180, 34, 176, 188, 168, 230, 207, 61, 31, 255, 252, 188, 127, 47, 156, 61, 162, 23, 128, 62, 8, 75, 245, 61, 155, 43, 106, 60, 232, 109, 81, 190, 209, 110, 103, 190, 25, 132, 98, 190, 60, 204, 134, 60, 143, 238, 72, 62, 58, 219, 68, 190, 190, 59, 177, 189, 88, 98, 90, 190, 26, 61, 119, 190, 3, 124, 152, 189, 202, 183, 11, 60, 192, 147, 1, 62, 0, 25, 199, 189, 156, 253, 151, 61, 40, 136, 254, 61, 216, 206, 124, 61, 48, 174, 17, 62, 158, 99, 109, 61, 87, 173, 82, 60, 111, 35, 188, 190, 207, 17, 193, 61, 183, 131, 33, 190, 203, 46, 97, 190, 53, 249, 180, 190, 229, 220, 146, 189, 133, 11, 200, 60, 204, 17, 32, 62, 100, 7, 246, 189, 111, 59, 132, 62, 6, 163, 199, 62, 40, 235, 109, 62, 36, 130, 149, 190, 87, 224, 154, 190, 58, 69, 125, 60, 212, 66, 107, 190, 143, 99, 27, 191, 90, 247, 167, 61, 56, 91, 96, 190, 4, 60, 92, 190, 13, 188, 254, 189, 72, 230, 208, 189, 89, 226, 132, 62, 43, 118, 60, 61, 54, 160, 101, 189, 137, 108, 251, 190, 180, 171, 207, 62, 36, 126, 146, 190, 226, 10, 217, 59, 73, 118, 93, 62, 109, 153, 186, 188, 52, 156, 250, 190, 50, 178, 142, 62, 164, 62, 59, 62, 30, 203, 238, 189, 118, 206, 135, 190, 223, 123, 42, 189, 184, 149, 160, 190, 50, 240, 229, 61, 174, 234, 141, 62, 252, 20, 217, 61, 217, 40, 97, 190, 88, 154, 122, 60, 175, 69, 11, 63, 124, 248, 61, 62, 84, 82, 175, 62, 36, 125, 224, 61, 170, 120, 143, 61, 37, 149, 129, 61, 5, 228, 3, 62, 48, 155, 243, 62, 99, 62, 3, 191, 126, 249, 45, 189, 57, 116, 140, 61, 254, 91, 151, 190, 224, 199, 237, 61, 193, 107, 56, 62, 17, 15, 23, 189, 18, 8, 64, 61, 175, 29, 180, 190, 170, 44, 191, 189, 42, 155, 224, 60, 27, 15, 152, 62, 250, 241, 151, 62, 165, 11, 171, 189, 16, 188, 17, 190, 2, 23, 222, 189, 184, 247, 92, 62, 146, 192, 225, 62, 176, 60, 173, 61, 232, 233, 60, 190, 154, 109, 197, 61, 104, 78, 122, 189, 213, 157, 56, 190, 57, 84, 32, 190, 88, 73, 25, 188, 171, 125, 117, 60, 14, 29, 173, 61, 5, 199, 36, 61, 150, 89, 165, 61, 137, 212, 234, 187, 122, 13, 199, 188, 119, 12, 43, 190, 119, 118, 105, 60, 88, 49, 3, 190, 41, 241, 207, 189, 35, 226, 56, 60, 16, 208, 59, 190, 106, 126, 40, 61, 213, 89, 81, 189, 145, 248, 167, 187, 10, 33, 225, 59, 203, 30, 196, 189, 126, 214, 125, 61, 184, 58, 45, 190, 148, 249, 16, 190, 218, 169, 95, 189, 219, 160, 165, 61, 124, 136, 110, 61, 178, 0, 41, 60, 255, 61, 145, 61, 36, 215, 225, 189, 240, 139, 46, 190, 208, 114, 6, 189, 246, 146, 190, 59, 134, 105, 179, 190, 164, 196, 101, 190, 70, 249, 127, 62, 205, 199, 53, 190, 239, 71, 141, 191, 207, 99, 25, 191, 243, 58, 23, 191, 149, 148, 96, 190, 156, 112, 201, 190, 58, 127, 144, 191, 190, 182, 147, 190, 153, 105, 117, 191, 95, 113, 103, 190, 238, 131, 154, 61, 165, 43, 5, 62, 160, 66, 154, 190, 196, 246, 196, 62, 96, 64, 130, 188, 20, 82, 77, 62, 214, 160, 194, 188, 57, 219, 236, 188, 60, 143, 0, 191, 25, 99, 126, 190, 32, 192, 84, 61, 92, 212, 171, 189, 115, 241, 158, 61, 181, 174, 108, 190, 187, 49, 172, 191, 167, 203, 128, 62, 85, 190, 47, 62, 173, 237, 174, 190, 176, 173, 241, 61, 151, 100, 32, 191, 53, 169, 89, 190, 54, 214, 31, 191, 241, 37, 117, 61, 187, 211, 2, 60, 214, 255, 171, 190, 180, 130, 83, 62, 109, 30, 99, 62, 180, 186, 24, 63, 253, 71, 131, 62, 230, 88, 195, 190, 69, 60, 15, 63, 149, 176, 128, 191, 198, 161, 144, 190, 207, 235, 4, 62, 78, 69, 158, 60, 125, 161, 226, 61, 63, 254, 126, 61, 42, 216, 206, 62, 77, 195, 28, 62, 42, 49, 134, 62, 80, 227, 174, 189, 131, 233, 89, 189, 130, 176, 168, 191, 72, 9, 27, 191, 129, 93, 154, 190, 39, 78, 1, 62, 176, 195, 146, 188, 239, 207, 5, 190, 26, 40, 166, 190, 61, 252, 46, 60, 48, 185, 50, 190, 231, 145, 245, 60, 154, 19, 214, 59, 48, 209, 28, 190, 199, 1, 127, 60, 156, 175, 31, 189, 152, 195, 205, 189, 109, 108, 37, 189, 5, 183, 55, 61, 117, 85, 102, 61, 82, 144, 151, 61, 63, 243, 95, 60, 122, 22, 159, 189, 98, 194, 228, 61, 158, 126, 57, 189, 129, 192, 134, 61, 206, 115, 137, 189, 154, 162, 49, 190, 210, 112, 15, 190, 225, 211, 242, 59, 58, 194, 199, 61, 220, 62, 202, 189, 155, 1, 33, 190, 96, 114, 27, 190, 234, 252, 245, 189, 177, 5, 162, 61, 193, 248, 146, 189, 1, 179, 34, 190, 59, 146, 0, 188, 15, 37, 120, 188, 62, 146, 231, 59, 150, 251, 154, 188, 195, 127, 63, 189, 147, 232, 207, 61, 23, 3, 159, 60, 199, 144, 208, 188, 35, 112, 43, 61, 25, 124, 116, 189, 38, 172, 63, 190, 61, 69, 48, 62, 94, 48, 230, 59, 77, 226, 48, 190, 155, 244, 0, 62, 190, 168, 42, 190, 130, 150, 12, 189, 141, 66, 195, 188, 46, 17, 77, 60, 72, 216, 111, 61, 74, 137, 24, 61, 26, 211, 87, 188, 169, 64, 26, 190, 162, 179, 15, 190, 51, 189, 255, 61, 238, 217, 244, 189, 245, 175, 173, 189, 120, 69, 37, 61, 223, 157, 146, 58, 132, 99, 32, 190, 192, 226, 184, 59, 57, 96, 36, 62, 72, 121, 83, 189, 163, 168, 217, 61, 192, 124, 245, 61, 87, 233, 166, 189, 133, 164, 68, 189, 121, 118, 55, 62, 229, 21, 102, 62, 141, 249, 173, 189, 151, 121, 56, 190, 92, 38, 149, 61, 56, 171, 21, 62, 175, 129, 94, 188, 54, 200, 207, 60, 223, 132, 48, 62, 139, 101, 118, 189, 204, 76, 186, 190, 150, 98, 32, 62, 139, 4, 157, 191, 126, 171, 9, 61, 53, 59, 129, 61, 222, 87, 75, 190, 202, 203, 203, 189, 250, 31, 255, 189, 79, 66, 75, 62, 17, 173, 3, 62, 193, 3, 29, 62, 105, 166, 98, 62, 184, 200, 52, 190, 89, 168, 79, 191, 157, 214, 167, 190, 71, 241, 127, 62, 88, 156, 155, 62, 223, 181, 147, 61, 207, 158, 127, 188, 113, 30, 81, 62, 149, 199, 197, 62, 30, 129, 119, 61, 157, 219, 156, 62, 100, 124, 179, 62, 144, 33, 117, 189, 151, 3, 241, 190, 150, 161, 146, 190, 179, 245, 56, 62, 244, 232, 214, 190, 3, 254, 9, 191, 209, 54, 76, 190, 187, 171, 156, 190, 175, 4, 194, 190, 221, 40, 204, 190, 106, 1, 126, 62, 126, 8, 170, 62, 60, 66, 174, 189, 78, 18, 102, 190, 82, 137, 148, 190, 40, 127, 21, 62, 173, 19, 156, 189, 126, 56, 104, 61, 40, 1, 90, 62, 81, 219, 145, 62, 70, 124, 9, 191, 58, 31, 156, 62, 111, 217, 121, 62, 107, 100, 186, 61, 201, 213, 179, 190, 16, 36, 14, 190, 172, 6, 54, 190, 94, 138, 243, 62, 46, 229, 207, 189, 239, 205, 51, 62, 106, 211, 122, 62, 146, 84, 183, 61, 40, 54, 136, 190, 13, 209, 10, 60, 240, 93, 138, 190, 5, 119, 223, 61, 48, 148, 190, 190, 153, 142, 75, 61, 192, 63, 161, 61, 107, 27, 153, 190, 106, 68, 96, 190, 25, 74, 232, 190, 201, 193, 87, 62, 187, 12, 129, 189, 88, 216, 35, 189, 147, 123, 81, 190, 3, 83, 82, 61, 52, 5, 92, 62, 202, 250, 4, 190, 25, 59, 12, 61, 14, 182, 42, 62, 215, 162, 179, 61, 62, 254, 189, 189, 65, 251, 194, 62, 124, 81, 7, 62, 165, 241, 227, 61, 13, 109, 249, 189, 135, 159, 27, 189, 235, 5, 128, 61, 91, 241, 88, 61, 120, 186, 215, 61, 40, 218, 21, 189, 90, 33, 192, 189, 2, 159, 36, 190, 206, 153, 50, 189, 144, 105, 140, 189, 28, 234, 158, 189, 226, 106, 17, 190, 121, 56, 206, 189, 239, 241, 111, 61, 158, 68, 252, 188, 90, 122, 116, 61, 247, 22, 9, 62, 53, 78, 190, 189, 108, 154, 76, 61, 199, 235, 2, 190, 166, 62, 130, 189, 202, 124, 78, 190, 84, 64, 106, 189, 58, 84, 195, 189, 209, 142, 161, 61, 159, 59, 243, 187, 177, 33, 63, 190, 140, 3, 185, 189, 162, 191, 92, 61, 196, 147, 16, 189, 166, 74, 35, 190, 75, 20, 238, 61, 34, 187, 9, 190, 22, 62, 213, 61, 137, 191, 227, 61, 234, 27, 238, 189, 131, 161, 35, 188, 11, 219, 92, 189, 242, 158, 173, 189, 20, 101, 243, 186, 204, 172, 192, 61, 212, 190, 226, 61, 244, 66, 147, 61, 141, 26, 147, 189, 209, 236, 201, 61, 50, 125, 33, 61, 55, 147, 43, 190, 87, 93, 46, 190, 52, 187, 13, 190, 46, 96, 193, 61, 137, 17, 37, 190, 181, 207, 126, 59, 50, 28, 12, 62, 75, 217, 224, 189, 96, 92, 249, 189, 241, 204, 20, 190, 170, 206, 69, 61, 26, 27, 111, 61, 0, 154, 86, 188, 39, 123, 190, 189, 92, 121, 136, 61, 207, 136, 68, 189, 166, 190, 228, 189, 119, 197, 192, 189, 152, 109, 252, 188, 128, 30, 155, 188, 139, 104, 254, 61, 204, 171, 40, 62, 136, 176, 160, 188, 174, 97, 195, 57, 221, 9, 4, 190, 57, 212, 89, 62, 103, 235, 255, 190, 164, 70, 75, 187, 223, 111, 139, 190, 253, 237, 41, 61, 71, 110, 16, 191, 99, 162, 114, 190, 116, 110, 41, 190, 201, 203, 140, 190, 161, 229, 25, 62, 123, 123, 218, 190, 212, 7, 10, 63, 174, 44, 148, 61, 216, 21, 137, 190, 26, 43, 215, 61, 234, 246, 2, 61, 251, 91, 17, 63, 165, 227, 111, 61, 40, 70, 178, 61, 129, 106, 13, 62, 82, 212, 168, 61, 131, 229, 15, 188, 71, 214, 78, 62, 129, 25, 133, 62, 80, 105, 116, 62, 255, 17, 56, 191, 41, 166, 152, 190, 86, 72, 204, 188, 10, 108, 236, 60, 224, 4, 150, 62, 153, 84, 17, 190, 65, 41, 44, 190, 186, 166, 78, 62, 9, 181, 20, 62, 77, 197, 205, 190, 131, 177, 131, 190, 131, 164, 18, 60, 6, 103, 232, 190, 238, 13, 19, 191, 94, 99, 183, 190, 82, 158, 151, 190, 28, 40, 242, 190, 221, 239, 200, 190, 184, 137, 163, 189, 202, 114, 252, 190, 234, 189, 162, 189, 131, 255, 222, 60, 179, 78, 100, 190, 80, 59, 197, 190, 220, 57, 206, 189, 118, 52, 8, 190, 124, 103, 42, 190, 100, 175, 71, 189, 72, 13, 21, 191, 249, 218, 138, 62, 99, 217, 23, 61, 226, 28, 31, 191, 37, 175, 168, 190, 174, 171, 132, 61, 10, 168, 116, 190, 67, 13, 79, 61, 47, 2, 164, 190, 13, 174, 87, 187, 151, 29, 21, 62, 55, 239, 188, 62, 216, 168, 250, 62, 235, 174, 19, 191, 39, 194, 60, 190, 97, 43, 172, 62, 46, 174, 65, 191, 43, 94, 132, 191, 254, 189, 165, 190, 157, 194, 221, 190, 55, 117, 249, 61, 119, 23, 135, 191, 203, 84, 7, 190, 96, 87, 100, 62, 83, 142, 182, 61, 87, 180, 15, 191, 241, 229, 31, 62, 60, 169, 23, 190, 71, 255, 67, 189, 137, 174, 167, 61, 68, 185, 97, 61, 196, 55, 65, 61, 48, 247, 6, 191, 32, 12, 3, 62, 16, 179, 97, 190, 140, 65, 138, 189, 215, 38, 9, 191, 221, 249, 194, 189, 129, 238, 148, 61, 253, 191, 221, 62, 145, 202, 101, 60, 72, 77, 154, 187, 176, 37, 69, 61, 66, 204, 194, 62, 205, 64, 42, 62, 64, 163, 202, 190, 169, 224, 72, 61, 45, 81, 194, 61, 234, 165, 218, 190, 211, 237, 86, 191, 166, 120, 74, 191, 25, 181, 45, 190, 201, 59, 208, 62, 234, 235, 82, 190, 182, 114, 111, 60, 193, 143, 216, 190, 215, 177, 32, 62, 90, 192, 175, 191, 94, 150, 193, 62, 29, 229, 176, 190, 125, 102, 21, 63, 228, 149, 79, 62, 80, 154, 127, 62, 255, 254, 24, 190, 253, 153, 123, 190, 50, 222, 203, 62, 213, 159, 191, 191, 17, 1, 128, 190, 154, 190, 158, 190, 127, 143, 11, 62, 194, 128, 69, 188, 67, 207, 64, 190, 18, 201, 47, 190, 162, 13, 113, 187, 230, 97, 130, 190, 117, 179, 170, 62, 253, 69, 203, 62, 248, 5, 65, 188, 111, 165, 206, 189, 70, 67, 227, 61, 177, 121, 120, 190, 201, 114, 213, 59, 223, 38, 28, 62, 196, 172, 61, 189, 39, 205, 2, 61, 213, 90, 240, 188, 28, 108, 96, 190, 37, 157, 222, 189, 168, 135, 50, 62, 197, 198, 247, 61, 21, 241, 70, 188, 254, 138, 92, 188, 11, 146, 102, 62, 238, 147, 12, 62, 1, 0, 49, 62, 112, 133, 63, 62, 74, 6, 64, 62, 53, 114, 105, 190, 52, 21, 165, 189, 224, 227, 54, 190, 69, 222, 65, 190, 173, 70, 161, 61, 242, 92, 142, 60, 111, 64, 29, 62, 246, 10, 77, 62, 46, 111, 138, 61, 246, 103, 141, 61, 187, 168, 198, 190, 121, 176, 130, 62, 119, 2, 66, 62, 24, 92, 153, 61, 195, 218, 0, 62, 146, 251, 191, 189, 143, 68, 90, 190, 130, 169, 34, 190, 88, 110, 5, 191, 6, 173, 87, 62, 222, 55, 89, 190, 195, 230, 115, 62, 153, 229, 0, 188, 86, 166, 144, 62, 180, 158, 6, 62, 60, 248, 182, 186, 214, 7, 226, 62, 59, 140, 161, 60, 48, 90, 146, 62, 254, 208, 187, 190, 22, 243, 121, 189, 230, 93, 180, 61, 24, 98, 205, 62, 49, 136, 8, 62, 230, 59, 131, 186, 185, 64, 22, 190, 81, 40, 194, 188, 9, 75, 82, 62, 210, 39, 27, 61, 54, 88, 48, 62, 186, 55, 121, 189, 189, 230, 0, 191, 28, 90, 138, 61, 136, 149, 14, 189, 50, 30, 252, 189, 81, 159, 41, 191, 207, 11, 48, 191, 232, 205, 89, 190, 143, 200, 203, 61, 179, 241, 153, 62, 115, 110, 126, 61, 69, 92, 195, 190, 197, 194, 36, 62, 152, 88, 181, 60, 174, 212, 25, 60, 157, 212, 18, 188, 186, 48, 173, 61, 153, 14, 114, 61, 112, 190, 134, 62, 183, 92, 71, 190, 236, 154, 221, 190, 98, 235, 61, 61, 2, 211, 17, 62, 154, 34, 39, 191, 110, 20, 89, 190, 89, 244, 97, 62, 17, 43, 5, 61, 167, 73, 201, 189, 82, 57, 236, 190, 66, 9, 74, 189, 51, 172, 59, 62, 246, 54, 238, 62, 151, 178, 26, 190, 151, 32, 25, 189, 19, 59, 35, 189, 51, 247, 113, 189, 50, 5, 204, 188, 16, 168, 108, 61, 0, 198, 231, 61, 107, 27, 180, 189, 183, 149, 36, 190, 88, 7, 34, 190, 79, 78, 46, 190, 184, 228, 12, 62, 210, 186, 66, 189, 24, 118, 237, 189, 133, 70, 20, 62, 8, 185, 182, 61, 3, 126, 2, 190, 185, 152, 60, 190, 157, 195, 215, 189, 167, 85, 173, 189, 156, 193, 22, 188, 99, 231, 94, 189, 138, 146, 147, 186, 12, 255, 50, 189, 181, 162, 88, 189, 207, 127, 116, 189, 65, 96, 76, 60, 181, 110, 46, 189, 61, 22, 34, 190, 126, 141, 11, 61, 251, 55, 51, 62, 198, 100, 54, 61, 140, 231, 252, 61, 77, 139, 227, 189, 7, 126, 21, 189, 192, 250, 174, 190, 105, 159, 162, 189, 40, 32, 62, 191, 6, 70, 142, 190, 186, 241, 5, 191, 101, 164, 41, 62, 226, 78, 52, 62, 219, 31, 86, 191, 25, 155, 52, 191, 111, 221, 34, 191, 96, 174, 37, 62, 121, 246, 197, 61, 57, 173, 180, 189, 3, 253, 86, 189, 240, 149, 30, 62, 113, 56, 208, 62, 88, 131, 174, 189, 181, 179, 19, 191, 171, 46, 29, 190, 190, 67, 211, 190, 128, 157, 130, 188, 209, 151, 64, 61, 15, 168, 100, 61, 141, 179, 251, 58, 33, 159, 102, 191, 230, 104, 23, 191, 159, 250, 52, 62, 159, 38, 22, 190, 225, 65, 88, 62, 55, 6, 115, 188, 75, 73, 70, 189, 137, 73, 1, 190, 39, 37, 173, 61, 215, 90, 112, 61, 24, 229, 55, 190, 193, 155, 202, 61, 10, 71, 139, 60, 207, 7, 153, 189, 73, 149, 139, 189, 207, 0, 124, 189, 178, 190, 219, 187, 216, 88, 202, 61, 141, 170, 247, 61, 230, 32, 194, 189, 145, 130, 198, 188, 236, 125, 11, 189, 43, 57, 61, 190, 73, 15, 23, 190, 73, 102, 234, 189, 232, 68, 167, 60, 235, 123, 220, 61, 117, 232, 26, 189, 37, 10, 234, 61, 202, 196, 152, 189, 152, 165, 231, 189, 42, 83, 78, 189, 133, 193, 23, 62, 71, 126, 136, 60, 81, 166, 61, 189, 113, 223, 151, 188, 59, 30, 57, 61, 202, 200, 69, 189, 226, 105, 240, 190, 52, 184, 83, 62, 143, 233, 174, 62, 66, 11, 153, 61, 132, 106, 24, 62, 192, 181, 83, 190, 18, 28, 120, 190, 55, 107, 38, 61, 229, 234, 27, 62, 138, 122, 169, 61, 212, 151, 216, 188, 250, 174, 4, 62, 14, 151, 192, 190, 230, 125, 240, 60, 30, 177, 17, 189, 109, 161, 68, 62, 20, 237, 194, 60, 58, 253, 126, 189, 240, 19, 17, 62, 202, 176, 8, 189, 185, 82, 110, 62, 26, 74, 97, 62, 39, 223, 146, 61, 19, 62, 249, 189, 26, 179, 204, 59, 171, 197, 35, 190, 169, 195, 197, 188, 56, 168, 246, 61, 105, 113, 28, 190, 247, 141, 20, 62, 243, 95, 94, 189, 12, 132, 158, 189, 152, 246, 251, 189, 161, 249, 48, 190, 200, 81, 0, 191, 196, 168, 178, 60, 110, 122, 151, 62, 100, 255, 34, 189, 111, 85, 25, 62, 254, 27, 3, 62, 179, 139, 172, 62, 64, 177, 169, 62, 120, 83, 45, 191, 174, 124, 65, 62, 72, 56, 44, 191, 9, 83, 143, 189, 163, 239, 239, 189, 176, 206, 150, 190, 4, 31, 152, 62, 216, 12, 103, 189, 231, 121, 93, 189, 36, 173, 111, 189, 73, 203, 67, 62, 24, 64, 218, 61, 216, 84, 77, 62, 86, 91, 96, 191, 49, 223, 1, 191, 67, 60, 50, 61, 18, 105, 64, 62, 181, 226, 38, 62, 48, 67, 150, 190, 173, 147, 38, 190, 8, 219, 72, 61, 199, 148, 181, 60, 178, 159, 161, 191, 52, 49, 15, 190, 99, 113, 75, 63, 20, 92, 197, 61, 129, 49, 14, 62, 189, 181, 55, 191, 35, 88, 202, 189, 166, 133, 51, 62, 174, 92, 21, 189, 165, 228, 55, 62, 133, 191, 162, 191, 68, 124, 147, 62, 147, 250, 49, 190, 245, 254, 61, 60, 254, 161, 2, 62, 78, 84, 60, 189, 117, 125, 78, 62, 57, 121, 175, 190, 88, 74, 239, 61, 98, 120, 62, 190, 204, 59, 208, 189, 213, 51, 189, 61, 219, 0, 63, 63, 124, 112, 229, 190, 217, 142, 85, 190, 21, 161, 80, 61, 121, 135, 168, 62, 233, 192, 19, 62, 161, 132, 215, 189, 222, 223, 21, 190, 115, 165, 86, 189, 20, 42, 212, 189, 236, 135, 134, 61, 137, 214, 139, 62, 166, 61, 66, 191, 72, 201, 83, 61, 193, 228, 196, 189, 230, 232, 167, 61, 77, 30, 239, 190, 22, 76, 163, 190, 106, 112, 68, 61, 106, 47, 163, 189, 64, 91, 4, 63, 162, 155, 173, 190, 240, 202, 23, 63, 14, 144, 120, 188, 119, 133, 186, 61, 8, 97, 37, 61, 222, 157, 48, 190, 87, 73, 129, 62, 58, 210, 8, 61, 60, 154, 180, 62, 249, 108, 146, 61, 46, 227, 247, 189, 207, 15, 20, 62, 48, 209, 217, 62, 187, 249, 83, 61, 143, 229, 75, 62, 130, 34, 132, 190, 101, 212, 182, 190, 114, 211, 108, 189, 235, 6, 238, 61, 220, 175, 190, 62, 252, 109, 52, 61, 205, 45, 152, 62, 224, 254, 15, 62, 246, 49, 26, 191, 67, 83, 72, 190, 28, 224, 152, 190, 124, 142, 191, 60, 3, 89, 149, 190, 63, 182, 126, 190, 39, 206, 139, 58, 95, 109, 219, 189, 30, 127, 11, 63, 223, 238, 203, 190, 5, 107, 38, 63, 131, 210, 92, 62, 89, 158, 157, 61, 6, 75, 164, 61, 17, 252, 4, 190, 23, 174, 128, 62, 243, 67, 27, 61, 38, 62, 168, 62, 65, 243, 233, 60, 146, 48, 86, 62, 79, 43, 163, 61, 49, 104, 142, 62, 212, 172, 66, 61, 127, 141, 115, 61, 76, 249, 86, 189, 66, 23, 182, 190, 146, 138, 55, 61, 165, 99, 84, 61, 221, 246, 216, 62, 217, 193, 169, 189, 38, 148, 141, 62, 236, 254, 221, 62, 228, 149, 104, 190, 15, 114, 176, 190, 68, 42, 139, 190, 75, 170, 37, 62, 110, 167, 31, 191, 23, 157, 116, 190, 99, 52, 21, 189, 18, 238, 95, 190, 24, 213, 211, 60, 22, 144, 253, 190, 48, 228, 8, 63, 91, 113, 143, 61, 182, 96, 47, 190, 97, 33, 8, 61, 35, 113, 224, 189, 102, 45, 92, 62, 48, 55, 214, 189, 36, 101, 161, 61, 111, 232, 151, 62, 81, 137, 80, 62, 106, 36, 168, 190, 28, 116, 221, 62, 117, 148, 0, 61, 52, 240, 145, 188, 25, 10, 230, 190, 100, 240, 223, 60, 197, 230, 169, 61, 64, 64, 142, 62, 111, 43, 166, 62, 36, 169, 254, 61, 254, 145, 23, 191, 241, 214, 83, 190, 189, 251, 39, 63, 255, 237, 139, 62, 175, 133, 140, 189, 9, 117, 106, 191, 136, 135, 204, 61, 232, 158, 212, 62, 231, 47, 133, 62, 84, 51, 42, 62, 82, 225, 217, 190, 233, 252, 29, 63, 140, 183, 93, 190, 254, 141, 204, 190, 113, 205, 132, 61, 88, 61, 110, 62, 20, 83, 55, 62, 80, 132, 17, 191, 242, 49, 195, 189, 124, 135, 180, 190, 31, 250, 86, 190, 199, 219, 16, 189, 217, 143, 45, 61, 71, 164, 208, 190, 66, 132, 8, 190, 167, 54, 100, 190, 114, 73, 183, 59, 29, 79, 95, 190, 73, 234, 181, 190, 192, 82, 64, 190, 220, 106, 148, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 2, 174, 188, 143, 161, 168, 189, 77, 128, 4, 62, 138, 230, 49, 62, 200, 18, 24, 62, 6, 99, 19, 190, 206, 59, 66, 188, 194, 8, 50, 62, 129, 33, 184, 188, 166, 86, 36, 190, 27, 76, 147, 61, 140, 22, 70, 62, 188, 174, 207, 188, 7, 118, 78, 189, 42, 178, 52, 190, 76, 237, 152, 190, 194, 232, 212, 186, 109, 193, 89, 62, 29, 225, 131, 62, 156, 175, 193, 62, 109, 13, 62, 190, 20, 14, 36, 62, 207, 190, 145, 189, 180, 126, 31, 190, 106, 145, 50, 190, 200, 20, 139, 62, 19, 57, 141, 62, 225, 127, 23, 62, 17, 133, 251, 61, 224, 22, 222, 61, 238, 162, 107, 189, 184, 93, 19, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {108, 136, 172, 62, 33, 198, 184, 189, 41, 109, 112, 188, 134, 89, 172, 62, 50, 206, 165, 190, 202, 214, 195, 189, 40, 88, 166, 63, 241, 204, 144, 191, 79, 63, 0, 62, 148, 153, 203, 189, 255, 236, 198, 190, 120, 2, 4, 63, 229, 31, 84, 61, 136, 159, 36, 190, 158, 156, 32, 190, 13, 159, 3, 63, 233, 64, 34, 191, 13, 82, 144, 63, 162, 89, 128, 63, 15, 224, 106, 189, 241, 93, 3, 190, 77, 142, 108, 61, 199, 75, 9, 190, 228, 131, 159, 62, 148, 49, 181, 61, 247, 37, 95, 189, 84, 89, 55, 191, 95, 143, 79, 191, 151, 246, 160, 62, 72, 44, 138, 62, 143, 28, 192, 62, 246, 50, 45, 191, 194, 220, 64, 62, 157, 233, 91, 189, 142, 212, 109, 190, 149, 93, 208, 190, 100, 56, 184, 190, 34, 130, 173, 187, 189, 105, 186, 62, 229, 159, 174, 61, 40, 227, 44, 190, 21, 91, 161, 59, 230, 124, 206, 190, 202, 13, 168, 62, 126, 206, 133, 61, 254, 136, 53, 61, 209, 249, 30, 189, 207, 55, 227, 62, 55, 79, 196, 62, 1, 216, 171, 62, 63, 185, 128, 189, 40, 67, 216, 190, 232, 71, 146, 62, 208, 37, 5, 191, 62, 226, 46, 61, 212, 247, 198, 188, 21, 129, 49, 189, 195, 16, 184, 190, 32, 190, 135, 62, 87, 76, 96, 62, 139, 90, 0, 62, 143, 70, 45, 189, 196, 49, 62, 61, 226, 53, 233, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 66, 58, 190, 119, 12, 224, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {171, 48, 119, 190, 82, 140, 147, 191, 130, 164, 26, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {104, 207, 107, 192, 18, 152, 174, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0000/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}