// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 182, 200, 190, 181, 46, 146, 62, 175, 247, 120, 188, 148, 225, 129, 190, 6, 176, 38, 191, 13, 57, 55, 63, 199, 54, 20, 63, 183, 49, 178, 190, 207, 34, 0, 190, 170, 59, 211, 190, 49, 100, 15, 191, 254, 216, 41, 61, 14, 167, 246, 190, 12, 122, 181, 189, 132, 202, 62, 191, 116, 30, 198, 62, 232, 170, 145, 60, 159, 67, 21, 63, 84, 102, 53, 62, 63, 91, 12, 191, 177, 138, 4, 63, 49, 56, 18, 63, 71, 73, 84, 63, 168, 119, 110, 62, 57, 59, 237, 190, 81, 33, 20, 63, 215, 4, 51, 191, 92, 20, 65, 62, 96, 16, 74, 63, 123, 70, 239, 190, 221, 157, 59, 63, 95, 119, 66, 63, 248, 161, 141, 62, 201, 60, 218, 190, 25, 116, 146, 62, 158, 255, 13, 63, 34, 78, 175, 62, 122, 104, 10, 63, 103, 2, 255, 61, 43, 14, 168, 62, 167, 128, 228, 190, 35, 39, 203, 190, 247, 219, 77, 62, 39, 75, 59, 63, 238, 135, 22, 191, 65, 106, 10, 60, 128, 222, 189, 188, 111, 172, 125, 189, 252, 123, 69, 62, 212, 140, 247, 190, 89, 80, 212, 190, 131, 97, 67, 191, 25, 137, 157, 62, 49, 228, 71, 190, 199, 45, 62, 63, 197, 130, 24, 189, 254, 204, 172, 60, 214, 122, 182, 190, 181, 232, 215, 62, 150, 158, 195, 61, 152, 229, 71, 190, 1, 100, 12, 190, 159, 197, 231, 62, 95, 98, 186, 62, 189, 53, 17, 63, 197, 8, 9, 62, 72, 4, 5, 63, 70, 162, 137, 190, 28, 94, 11, 187, 81, 40, 238, 61, 67, 141, 50, 62, 120, 79, 239, 62, 222, 18, 243, 62, 43, 233, 35, 191, 254, 192, 20, 190, 156, 60, 167, 62, 252, 220, 197, 190, 239, 119, 209, 190, 170, 105, 88, 189, 12, 245, 209, 62, 14, 80, 29, 191, 83, 2, 213, 62, 229, 253, 87, 63, 210, 149, 49, 62, 251, 72, 150, 62, 87, 251, 11, 191, 114, 239, 251, 62, 227, 230, 132, 190, 154, 0, 78, 62, 1, 163, 248, 190, 7, 139, 197, 190, 195, 129, 13, 191, 249, 77, 107, 189, 84, 134, 99, 62, 73, 87, 255, 62, 168, 81, 146, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 120, 27, 191, 101, 162, 186, 189, 76, 12, 193, 62, 229, 195, 228, 62, 150, 75, 88, 189, 153, 114, 111, 60, 133, 246, 154, 62, 65, 108, 132, 190, 68, 97, 169, 190, 39, 61, 135, 62, 57, 169, 224, 189, 241, 254, 221, 60, 126, 149, 21, 190, 82, 33, 231, 190, 22, 13, 179, 61, 4, 118, 10, 63, 200, 125, 6, 63, 153, 173, 168, 62, 162, 1, 35, 190, 27, 242, 16, 63, 217, 198, 88, 62, 29, 162, 25, 63, 27, 188, 67, 63, 96, 179, 163, 190, 211, 128, 25, 190, 218, 171, 245, 189, 93, 160, 161, 190, 244, 33, 248, 189, 72, 128, 126, 62, 123, 156, 223, 190, 170, 123, 22, 191, 225, 182, 6, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 32, 81, 189, 252, 2, 131, 62, 234, 123, 88, 62, 193, 70, 69, 61, 72, 221, 192, 189, 142, 34, 139, 190, 229, 66, 21, 62, 173, 141, 205, 190, 179, 190, 51, 191, 110, 229, 172, 190, 18, 91, 47, 188, 231, 195, 34, 62, 122, 10, 188, 190, 28, 85, 129, 61, 55, 46, 75, 189, 137, 51, 118, 62, 174, 142, 137, 189, 75, 23, 223, 60, 17, 214, 130, 62, 26, 153, 241, 189, 245, 167, 58, 62, 248, 23, 255, 61, 27, 249, 108, 62, 178, 199, 157, 190, 207, 187, 176, 61, 235, 148, 45, 61, 106, 131, 155, 61, 161, 165, 195, 190, 75, 232, 56, 190, 63, 154, 206, 60, 0, 55, 202, 62, 4, 199, 8, 190, 74, 74, 32, 189, 171, 226, 255, 189, 45, 95, 63, 190, 108, 177, 182, 61, 62, 64, 155, 189, 166, 35, 2, 190, 151, 188, 2, 62, 94, 38, 55, 189, 198, 5, 22, 190, 16, 192, 248, 61, 187, 170, 40, 190, 79, 65, 6, 190, 3, 164, 31, 190, 1, 170, 185, 189, 79, 204, 233, 189, 189, 36, 53, 190, 142, 247, 88, 61, 30, 51, 146, 189, 227, 228, 110, 189, 187, 97, 0, 189, 227, 21, 151, 61, 43, 246, 18, 62, 236, 25, 143, 60, 112, 198, 235, 189, 43, 74, 251, 60, 99, 206, 192, 61, 216, 85, 222, 189, 245, 128, 225, 61, 110, 150, 76, 188, 54, 244, 168, 188, 180, 34, 176, 188, 168, 230, 207, 61, 31, 255, 252, 188, 80, 247, 134, 61, 153, 200, 136, 62, 160, 248, 9, 61, 164, 87, 198, 61, 161, 237, 85, 61, 49, 74, 95, 61, 229, 184, 162, 61, 196, 12, 27, 62, 71, 173, 59, 62, 73, 71, 170, 189, 66, 201, 15, 189, 215, 135, 195, 189, 213, 170, 76, 190, 131, 207, 220, 189, 100, 213, 129, 61, 166, 168, 16, 62, 121, 213, 9, 187, 103, 122, 109, 62, 254, 178, 249, 61, 154, 199, 133, 61, 103, 150, 102, 62, 25, 107, 49, 62, 13, 49, 178, 60, 202, 144, 139, 190, 24, 100, 197, 61, 37, 187, 150, 189, 41, 113, 153, 189, 56, 11, 218, 189, 64, 226, 6, 61, 130, 105, 124, 61, 62, 143, 53, 189, 100, 7, 246, 189, 204, 91, 98, 62, 62, 99, 158, 62, 121, 5, 36, 62, 67, 190, 252, 189, 51, 44, 98, 190, 50, 139, 228, 61, 1, 251, 35, 189, 180, 144, 205, 190, 10, 101, 37, 190, 57, 194, 17, 190, 142, 23, 143, 61, 238, 46, 77, 190, 191, 201, 37, 60, 183, 150, 166, 61, 140, 212, 6, 62, 35, 91, 194, 189, 218, 222, 131, 189, 15, 43, 216, 62, 104, 142, 21, 190, 251, 26, 218, 61, 204, 99, 87, 62, 96, 85, 141, 189, 118, 24, 142, 190, 66, 51, 86, 62, 104, 127, 7, 62, 147, 60, 224, 188, 74, 158, 60, 190, 67, 81, 60, 189, 166, 10, 139, 61, 33, 157, 228, 61, 12, 119, 60, 62, 252, 20, 217, 61, 81, 137, 2, 191, 37, 219, 186, 189, 211, 162, 238, 61, 236, 61, 160, 61, 227, 235, 218, 61, 215, 166, 122, 190, 75, 0, 139, 61, 214, 217, 11, 61, 241, 218, 139, 62, 69, 33, 219, 62, 88, 34, 30, 190, 242, 224, 13, 62, 219, 168, 196, 188, 223, 120, 120, 190, 227, 30, 216, 61, 89, 131, 211, 61, 218, 23, 159, 59, 134, 61, 96, 60, 60, 1, 180, 188, 197, 11, 84, 190, 179, 192, 133, 61, 145, 54, 79, 62, 14, 195, 107, 189, 7, 1, 18, 190, 244, 222, 99, 190, 196, 53, 50, 190, 52, 252, 132, 62, 134, 240, 22, 62, 32, 126, 26, 61, 117, 146, 68, 190, 45, 67, 2, 61, 104, 78, 122, 189, 213, 157, 56, 190, 57, 84, 32, 190, 155, 114, 18, 188, 122, 174, 191, 60, 14, 29, 173, 61, 5, 199, 36, 61, 150, 89, 165, 61, 189, 52, 16, 60, 156, 8, 25, 188, 119, 12, 43, 190, 119, 118, 105, 60, 88, 49, 3, 190, 28, 133, 200, 189, 93, 235, 175, 60, 148, 248, 57, 190, 118, 247, 62, 61, 12, 176, 43, 189, 145, 248, 167, 187, 61, 117, 29, 60, 203, 30, 196, 189, 97, 73, 129, 61, 184, 58, 45, 190, 148, 249, 16, 190, 71, 229, 81, 189, 178, 244, 176, 61, 39, 80, 140, 61, 178, 0, 41, 60, 255, 61, 145, 61, 148, 143, 207, 189, 240, 139, 46, 190, 35, 248, 212, 188, 246, 146, 190, 59, 228, 11, 238, 61, 126, 181, 146, 189, 232, 156, 2, 189, 201, 149, 109, 190, 165, 139, 201, 190, 245, 20, 197, 60, 33, 145, 22, 190, 118, 210, 217, 190, 142, 112, 161, 190, 105, 116, 202, 190, 142, 14, 82, 62, 144, 208, 108, 190, 72, 15, 4, 62, 98, 52, 239, 61, 11, 80, 183, 59, 139, 187, 164, 189, 16, 216, 56, 62, 178, 11, 7, 62, 112, 234, 24, 62, 70, 64, 144, 62, 196, 32, 152, 62, 116, 209, 17, 190, 219, 145, 33, 190, 252, 162, 245, 61, 126, 201, 138, 60, 83, 240, 159, 61, 196, 218, 10, 63, 106, 117, 118, 191, 219, 116, 183, 61, 240, 94, 48, 62, 30, 22, 77, 60, 176, 173, 241, 61, 105, 248, 35, 191, 146, 12, 69, 190, 136, 123, 238, 59, 115, 172, 134, 62, 255, 41, 132, 62, 77, 197, 228, 190, 86, 174, 198, 62, 53, 20, 156, 62, 42, 161, 2, 63, 15, 5, 157, 62, 190, 235, 84, 190, 254, 45, 181, 62, 59, 100, 192, 190, 24, 110, 203, 190, 74, 165, 20, 62, 20, 211, 105, 62, 180, 149, 161, 61, 120, 125, 88, 61, 140, 169, 6, 62, 156, 152, 182, 186, 48, 49, 19, 61, 155, 120, 27, 190, 238, 72, 88, 62, 65, 246, 24, 191, 140, 19, 153, 190, 80, 130, 175, 190, 55, 189, 148, 61, 69, 109, 94, 189, 118, 1, 133, 189, 101, 171, 174, 190, 27, 74, 7, 190, 48, 185, 50, 190, 231, 145, 245, 60, 154, 19, 214, 59, 48, 209, 28, 190, 199, 1, 127, 60, 156, 175, 31, 189, 152, 195, 205, 189, 109, 108, 37, 189, 5, 183, 55, 61, 117, 85, 102, 61, 82, 144, 151, 61, 63, 243, 95, 60, 122, 22, 159, 189, 98, 194, 228, 61, 158, 126, 57, 189, 129, 192, 134, 61, 206, 115, 137, 189, 154, 162, 49, 190, 210, 112, 15, 190, 225, 211, 242, 59, 58, 194, 199, 61, 220, 62, 202, 189, 155, 1, 33, 190, 96, 114, 27, 190, 234, 252, 245, 189, 177, 5, 162, 61, 193, 248, 146, 189, 1, 179, 34, 190, 59, 146, 0, 188, 15, 37, 120, 188, 62, 146, 231, 59, 150, 251, 154, 188, 195, 127, 63, 189, 147, 232, 207, 61, 23, 3, 159, 60, 199, 144, 208, 188, 35, 112, 43, 61, 25, 124, 116, 189, 38, 172, 63, 190, 61, 69, 48, 62, 94, 48, 230, 59, 77, 226, 48, 190, 155, 244, 0, 62, 190, 168, 42, 190, 130, 150, 12, 189, 141, 66, 195, 188, 46, 17, 77, 60, 72, 216, 111, 61, 74, 137, 24, 61, 26, 211, 87, 188, 169, 64, 26, 190, 162, 179, 15, 190, 51, 189, 255, 61, 238, 217, 244, 189, 245, 175, 173, 189, 120, 69, 37, 61, 223, 157, 146, 58, 132, 99, 32, 190, 192, 226, 184, 59, 57, 96, 36, 62, 72, 121, 83, 189, 163, 168, 217, 61, 192, 124, 245, 61, 87, 233, 166, 189, 133, 164, 68, 189, 7, 23, 139, 62, 77, 42, 147, 62, 5, 106, 39, 189, 128, 17, 128, 189, 38, 152, 28, 62, 231, 188, 210, 61, 192, 237, 175, 61, 167, 163, 236, 60, 174, 180, 28, 62, 24, 116, 138, 59, 84, 16, 115, 189, 127, 199, 149, 62, 74, 49, 175, 190, 246, 232, 1, 189, 14, 203, 121, 61, 112, 103, 126, 189, 209, 165, 143, 190, 153, 55, 9, 190, 87, 113, 211, 61, 184, 172, 78, 62, 85, 227, 160, 61, 203, 167, 116, 62, 137, 139, 53, 190, 197, 168, 186, 190, 188, 65, 171, 189, 36, 42, 40, 62, 153, 34, 214, 62, 210, 102, 149, 61, 254, 219, 57, 189, 66, 195, 88, 62, 193, 252, 117, 62, 30, 129, 119, 61, 130, 175, 109, 62, 236, 119, 113, 62, 89, 30, 146, 189, 228, 158, 94, 190, 97, 131, 123, 190, 211, 157, 73, 62, 15, 232, 138, 190, 224, 61, 199, 190, 96, 124, 202, 190, 236, 40, 108, 190, 4, 41, 214, 61, 181, 99, 224, 190, 149, 94, 18, 61, 235, 31, 65, 62, 63, 37, 202, 189, 160, 155, 95, 190, 49, 14, 21, 62, 213, 29, 227, 61, 173, 217, 50, 62, 158, 13, 227, 61, 25, 60, 64, 62, 38, 164, 81, 62, 48, 219, 141, 190, 126, 202, 84, 62, 195, 68, 105, 62, 45, 237, 230, 61, 139, 71, 138, 190, 145, 221, 94, 190, 163, 210, 179, 61, 156, 222, 242, 62, 134, 149, 218, 189, 239, 205, 51, 62, 213, 204, 88, 62, 251, 247, 147, 61, 5, 96, 108, 60, 133, 75, 71, 61, 249, 204, 150, 190, 66, 74, 3, 62, 102, 71, 165, 190, 49, 129, 106, 61, 248, 104, 167, 61, 79, 227, 115, 190, 111, 219, 186, 188, 158, 35, 218, 190, 97, 102, 175, 61, 255, 153, 4, 188, 6, 126, 223, 60, 116, 12, 22, 190, 46, 240, 37, 62, 249, 0, 7, 62, 5, 136, 244, 59, 88, 53, 83, 61, 250, 164, 76, 62, 182, 195, 171, 61, 110, 194, 217, 60, 104, 69, 173, 62, 233, 54, 64, 62, 212, 100, 40, 62, 42, 251, 164, 189, 233, 190, 160, 189, 247, 64, 191, 61, 23, 75, 128, 61, 141, 30, 173, 61, 40, 218, 21, 189, 90, 33, 192, 189, 219, 104, 26, 190, 2, 75, 18, 189, 95, 169, 49, 189, 28, 234, 158, 189, 226, 106, 17, 190, 121, 56, 206, 189, 153, 8, 157, 61, 254, 85, 142, 188, 90, 122, 116, 61, 153, 255, 239, 61, 62, 1, 191, 189, 213, 196, 111, 61, 168, 92, 231, 189, 173, 204, 108, 189, 117, 191, 46, 190, 225, 123, 44, 189, 202, 108, 193, 189, 229, 81, 178, 61, 198, 199, 56, 188, 18, 55, 58, 190, 140, 3, 185, 189, 162, 191, 92, 61, 234, 137, 252, 188, 170, 197, 2, 190, 83, 235, 12, 62, 34, 187, 9, 190, 22, 62, 213, 61, 117, 195, 12, 62, 234, 27, 238, 189, 177, 73, 178, 60, 11, 219, 92, 189, 242, 158, 173, 189, 20, 101, 243, 186, 204, 172, 192, 61, 212, 190, 226, 61, 244, 66, 147, 61, 141, 26, 147, 189, 209, 236, 201, 61, 50, 125, 33, 61, 55, 147, 43, 190, 87, 93, 46, 190, 52, 187, 13, 190, 46, 96, 193, 61, 137, 17, 37, 190, 181, 207, 126, 59, 50, 28, 12, 62, 75, 217, 224, 189, 96, 92, 249, 189, 241, 204, 20, 190, 170, 206, 69, 61, 26, 27, 111, 61, 0, 154, 86, 188, 39, 123, 190, 189, 92, 121, 136, 61, 207, 136, 68, 189, 166, 190, 228, 189, 119, 197, 192, 189, 152, 109, 252, 188, 128, 30, 155, 188, 139, 104, 254, 61, 204, 171, 40, 62, 136, 176, 160, 188, 174, 97, 195, 57, 12, 175, 209, 189, 175, 157, 95, 62, 115, 211, 3, 61, 56, 87, 146, 58, 44, 99, 38, 190, 123, 109, 176, 188, 36, 221, 239, 189, 200, 196, 147, 190, 179, 6, 114, 190, 242, 251, 165, 61, 34, 69, 130, 62, 222, 145, 193, 189, 46, 12, 111, 62, 48, 106, 169, 60, 224, 220, 237, 189, 144, 40, 15, 62, 237, 43, 194, 59, 212, 20, 52, 62, 40, 130, 4, 62, 94, 43, 6, 62, 30, 174, 54, 62, 33, 233, 194, 61, 1, 254, 89, 189, 194, 212, 229, 61, 116, 176, 128, 62, 209, 31, 71, 62, 62, 224, 99, 190, 235, 52, 163, 190, 34, 173, 44, 189, 58, 201, 63, 61, 105, 88, 5, 188, 153, 84, 17, 190, 36, 28, 19, 60, 14, 173, 30, 62, 174, 205, 169, 60, 198, 10, 95, 61, 99, 33, 22, 61, 149, 108, 17, 61, 254, 136, 93, 190, 85, 166, 36, 190, 199, 255, 20, 189, 186, 205, 254, 189, 240, 20, 66, 190, 160, 140, 43, 190, 217, 68, 59, 62, 240, 152, 35, 190, 208, 68, 123, 189, 118, 72, 44, 61, 238, 44, 40, 190, 232, 3, 157, 190, 140, 73, 114, 189, 252, 166, 125, 61, 36, 174, 136, 189, 26, 129, 25, 190, 88, 111, 45, 188, 103, 31, 134, 62, 100, 205, 52, 62, 253, 25, 123, 189, 81, 169, 137, 189, 158, 44, 187, 61, 58, 237, 10, 62, 163, 192, 190, 61, 118, 231, 186, 189, 13, 174, 87, 187, 228, 122, 163, 61, 214, 78, 167, 62, 25, 212, 146, 62, 112, 253, 194, 190, 240, 82, 93, 190, 94, 181, 156, 62, 205, 186, 161, 190, 167, 159, 163, 191, 101, 222, 234, 190, 10, 102, 44, 190, 75, 209, 56, 62, 69, 159, 15, 191, 181, 6, 4, 61, 126, 87, 12, 62, 164, 119, 206, 61, 173, 252, 37, 190, 236, 173, 111, 62, 138, 129, 172, 62, 204, 9, 154, 189, 178, 64, 162, 61, 231, 181, 39, 62, 103, 34, 99, 61, 241, 136, 185, 190, 57, 44, 183, 61, 128, 175, 193, 60, 178, 32, 2, 190, 36, 71, 80, 190, 208, 18, 60, 190, 204, 5, 126, 189, 23, 102, 221, 62, 49, 217, 70, 189, 72, 77, 154, 187, 64, 249, 48, 60, 254, 249, 113, 61, 89, 204, 187, 188, 137, 40, 74, 190, 199, 150, 9, 189, 163, 247, 97, 61, 99, 189, 188, 189, 66, 236, 48, 191, 133, 15, 183, 190, 128, 50, 178, 189, 29, 119, 168, 61, 140, 229, 232, 190, 136, 225, 234, 60, 39, 234, 9, 190, 18, 89, 95, 189, 8, 144, 107, 190, 188, 231, 119, 62, 146, 130, 179, 62, 72, 60, 22, 62, 241, 53, 224, 61, 119, 123, 145, 61, 211, 21, 7, 190, 157, 155, 52, 190, 44, 125, 55, 190, 202, 207, 100, 190, 89, 28, 41, 189, 239, 63, 175, 190, 239, 65, 165, 61, 92, 81, 10, 190, 67, 134, 69, 190, 127, 206, 168, 189, 162, 13, 113, 187, 237, 195, 82, 190, 116, 249, 146, 62, 9, 86, 18, 62, 59, 107, 74, 187, 211, 220, 252, 189, 196, 89, 213, 61, 3, 190, 65, 190, 138, 140, 88, 61, 201, 114, 66, 62, 214, 199, 19, 189, 22, 194, 148, 61, 44, 4, 83, 61, 28, 64, 226, 189, 88, 56, 254, 189, 21, 63, 59, 62, 5, 110, 181, 61, 0, 223, 121, 187, 44, 241, 188, 61, 167, 216, 64, 62, 154, 241, 13, 62, 117, 167, 23, 62, 233, 126, 57, 62, 101, 24, 141, 61, 147, 249, 73, 190, 126, 25, 244, 189, 94, 54, 64, 190, 241, 34, 16, 190, 217, 230, 119, 61, 100, 197, 45, 61, 249, 32, 59, 62, 81, 153, 162, 61, 46, 111, 138, 61, 44, 173, 170, 188, 234, 40, 66, 190, 160, 57, 194, 61, 0, 61, 8, 62, 150, 18, 238, 61, 36, 182, 24, 62, 42, 197, 9, 62, 29, 237, 136, 190, 13, 26, 32, 190, 53, 204, 33, 190, 218, 197, 4, 62, 33, 117, 192, 61, 5, 210, 112, 62, 193, 165, 12, 188, 65, 160, 236, 61, 8, 58, 136, 61, 14, 59, 169, 189, 234, 132, 97, 62, 114, 48, 78, 189, 181, 234, 30, 62, 135, 124, 174, 189, 145, 137, 58, 61, 89, 170, 196, 61, 169, 43, 174, 62, 76, 149, 124, 61, 204, 66, 224, 188, 210, 134, 255, 61, 124, 73, 176, 187, 252, 179, 55, 62, 28, 121, 223, 187, 46, 152, 1, 62, 186, 55, 121, 189, 123, 209, 153, 190, 176, 127, 7, 62, 94, 118, 165, 188, 148, 232, 6, 190, 39, 99, 192, 60, 64, 16, 97, 187, 202, 169, 40, 61, 193, 119, 12, 62, 34, 103, 9, 62, 163, 89, 174, 61, 118, 122, 76, 60, 7, 48, 41, 61, 153, 174, 134, 188, 134, 51, 21, 190, 194, 32, 202, 60, 136, 27, 212, 59, 96, 203, 243, 61, 210, 63, 69, 62, 70, 208, 99, 190, 244, 155, 82, 190, 72, 8, 253, 61, 39, 159, 106, 62, 27, 157, 94, 190, 97, 73, 208, 189, 52, 29, 51, 62, 233, 150, 175, 60, 67, 52, 216, 58, 176, 6, 20, 62, 79, 241, 8, 189, 34, 93, 111, 62, 182, 54, 100, 61, 151, 178, 26, 190, 151, 32, 25, 189, 19, 59, 35, 189, 51, 247, 113, 189, 50, 5, 204, 188, 16, 168, 108, 61, 0, 198, 231, 61, 107, 27, 180, 189, 183, 149, 36, 190, 88, 7, 34, 190, 79, 78, 46, 190, 184, 228, 12, 62, 210, 186, 66, 189, 24, 118, 237, 189, 133, 70, 20, 62, 8, 185, 182, 61, 3, 126, 2, 190, 185, 152, 60, 190, 157, 195, 215, 189, 167, 85, 173, 189, 156, 193, 22, 188, 99, 231, 94, 189, 138, 146, 147, 186, 12, 255, 50, 189, 181, 162, 88, 189, 207, 127, 116, 189, 65, 96, 76, 60, 181, 110, 46, 189, 61, 22, 34, 190, 126, 141, 11, 61, 251, 55, 51, 62, 198, 100, 54, 61, 140, 231, 252, 61, 130, 42, 22, 61, 31, 78, 224, 61, 135, 16, 168, 187, 227, 238, 1, 190, 195, 185, 246, 189, 176, 129, 82, 189, 217, 246, 170, 189, 2, 27, 228, 61, 218, 94, 56, 62, 208, 235, 46, 190, 137, 201, 225, 60, 172, 198, 40, 190, 163, 70, 225, 188, 135, 19, 0, 62, 57, 1, 111, 189, 213, 252, 45, 189, 177, 232, 28, 62, 62, 241, 206, 61, 196, 225, 167, 61, 165, 147, 237, 189, 72, 65, 172, 61, 199, 56, 58, 190, 63, 245, 183, 61, 50, 128, 195, 60, 148, 211, 25, 61, 190, 108, 60, 187, 150, 56, 59, 190, 167, 143, 101, 190, 34, 44, 35, 62, 228, 62, 145, 189, 139, 58, 168, 61, 55, 6, 115, 188, 75, 73, 70, 189, 137, 73, 1, 190, 39, 37, 173, 61, 215, 90, 112, 61, 24, 229, 55, 190, 193, 155, 202, 61, 10, 71, 139, 60, 207, 7, 153, 189, 73, 149, 139, 189, 207, 0, 124, 189, 178, 190, 219, 187, 216, 88, 202, 61, 141, 170, 247, 61, 230, 32, 194, 189, 145, 130, 198, 188, 236, 125, 11, 189, 43, 57, 61, 190, 73, 15, 23, 190, 73, 102, 234, 189, 232, 68, 167, 60, 235, 123, 220, 61, 117, 232, 26, 189, 37, 10, 234, 61, 202, 196, 152, 189, 152, 165, 231, 189, 42, 83, 78, 189, 133, 193, 23, 62, 71, 126, 136, 60, 81, 166, 61, 189, 113, 223, 151, 188, 59, 30, 57, 61, 202, 200, 69, 189, 169, 184, 165, 190, 205, 21, 43, 62, 67, 35, 187, 61, 115, 57, 193, 61, 136, 252, 238, 61, 32, 82, 77, 190, 221, 243, 51, 190, 11, 183, 201, 61, 188, 44, 97, 62, 150, 233, 103, 61, 222, 31, 18, 189, 187, 174, 67, 62, 155, 17, 117, 190, 44, 34, 31, 61, 23, 173, 136, 189, 219, 11, 60, 62, 230, 49, 43, 61, 182, 237, 181, 187, 254, 136, 159, 61, 7, 173, 59, 188, 224, 106, 101, 62, 155, 205, 90, 62, 129, 84, 239, 188, 197, 248, 146, 189, 133, 84, 130, 187, 36, 144, 33, 190, 19, 82, 10, 60, 193, 229, 235, 61, 88, 234, 239, 189, 243, 160, 43, 62, 45, 120, 17, 190, 12, 132, 158, 189, 117, 117, 202, 189, 246, 125, 64, 190, 150, 16, 82, 189, 214, 185, 52, 62, 198, 167, 144, 62, 110, 53, 129, 190, 244, 250, 57, 62, 250, 143, 9, 62, 75, 223, 150, 62, 127, 7, 178, 62, 62, 232, 46, 189, 64, 84, 18, 62, 248, 83, 188, 187, 140, 167, 23, 190, 9, 152, 2, 190, 219, 139, 142, 189, 61, 2, 36, 62, 134, 23, 226, 189, 197, 117, 141, 189, 197, 186, 111, 60, 17, 87, 126, 61, 146, 162, 165, 60, 222, 1, 93, 62, 130, 159, 165, 190, 170, 218, 54, 190, 147, 163, 51, 189, 153, 20, 99, 62, 95, 228, 62, 187, 48, 102, 156, 190, 229, 44, 42, 190, 193, 29, 106, 189, 199, 148, 181, 60, 17, 210, 166, 191, 55, 127, 181, 189, 249, 234, 143, 62, 253, 66, 115, 61, 18, 251, 84, 60, 26, 41, 68, 191, 5, 190, 2, 61, 84, 10, 57, 62, 37, 44, 44, 188, 226, 141, 140, 61, 239, 202, 240, 190, 116, 190, 134, 189, 102, 100, 54, 61, 46, 84, 28, 186, 3, 129, 227, 61, 50, 94, 187, 189, 154, 223, 101, 62, 93, 5, 220, 61, 133, 189, 60, 62, 49, 3, 35, 189, 107, 159, 174, 189, 151, 170, 157, 61, 214, 124, 70, 190, 75, 232, 117, 190, 8, 149, 39, 190, 37, 184, 70, 60, 210, 91, 239, 61, 50, 84, 250, 61, 188, 45, 218, 189, 65, 88, 54, 190, 73, 96, 111, 60, 20, 42, 212, 189, 135, 65, 67, 189, 93, 218, 134, 62, 67, 36, 26, 190, 199, 91, 158, 61, 12, 9, 183, 189, 95, 135, 86, 62, 220, 218, 214, 190, 247, 222, 170, 190, 143, 34, 19, 189, 20, 80, 69, 189, 236, 53, 59, 62, 56, 229, 198, 190, 1, 182, 6, 62, 174, 88, 64, 189, 29, 177, 9, 62, 205, 48, 30, 61, 7, 218, 185, 189, 223, 0, 35, 62, 167, 196, 89, 189, 41, 244, 73, 62, 206, 210, 140, 61, 193, 90, 149, 189, 182, 189, 252, 60, 189, 109, 161, 62, 124, 68, 216, 59, 125, 204, 83, 62, 124, 46, 138, 190, 230, 4, 130, 190, 23, 114, 122, 189, 14, 179, 11, 62, 206, 21, 45, 62, 252, 109, 52, 61, 141, 186, 103, 62, 244, 139, 245, 61, 163, 153, 86, 189, 79, 255, 35, 190, 50, 235, 167, 190, 19, 135, 254, 61, 228, 47, 140, 190, 21, 234, 137, 190, 226, 21, 166, 189, 30, 181, 232, 189, 204, 51, 76, 62, 79, 162, 245, 190, 29, 45, 105, 62, 138, 56, 66, 62, 76, 113, 220, 61, 130, 35, 202, 61, 8, 204, 91, 189, 28, 72, 23, 62, 207, 46, 182, 189, 48, 92, 60, 62, 46, 127, 149, 185, 152, 251, 123, 62, 242, 163, 82, 189, 71, 21, 39, 62, 147, 238, 172, 60, 57, 24, 139, 61, 175, 164, 197, 189, 58, 22, 149, 190, 112, 36, 47, 61, 56, 138, 53, 61, 96, 36, 103, 62, 217, 193, 169, 189, 87, 35, 30, 62, 8, 236, 202, 62, 90, 186, 28, 187, 59, 212, 108, 190, 8, 208, 139, 190, 169, 231, 66, 62, 61, 74, 0, 191, 107, 130, 57, 190, 53, 240, 17, 190, 122, 194, 6, 190, 237, 215, 80, 62, 151, 160, 2, 191, 211, 112, 152, 62, 36, 163, 205, 60, 135, 208, 233, 189, 210, 116, 220, 61, 181, 58, 128, 61, 203, 166, 49, 62, 62, 46, 147, 61, 191, 42, 159, 60, 81, 33, 157, 62, 40, 79, 60, 62, 135, 231, 68, 190, 221, 139, 194, 62, 172, 124, 135, 61, 107, 205, 57, 61, 225, 189, 188, 190, 106, 208, 16, 189, 207, 225, 29, 62, 173, 74, 152, 62, 253, 44, 43, 62, 36, 169, 254, 61, 92, 198, 74, 191, 244, 233, 4, 190, 63, 177, 90, 62, 251, 1, 58, 62, 124, 148, 45, 189, 230, 168, 51, 191, 75, 150, 199, 61, 140, 103, 202, 62, 167, 212, 171, 62, 102, 24, 152, 61, 189, 100, 50, 190, 177, 176, 153, 62, 157, 141, 1, 190, 39, 13, 191, 190, 81, 6, 29, 61, 181, 192, 27, 62, 48, 155, 43, 62, 90, 132, 147, 62, 207, 246, 60, 61, 206, 54, 146, 190, 132, 175, 87, 189, 226, 45, 92, 188, 246, 177, 125, 61, 12, 221, 181, 190, 162, 51, 241, 189, 21, 205, 130, 190, 147, 114, 147, 189, 86, 224, 136, 189, 128, 143, 210, 190, 43, 203, 128, 190, 195, 8, 15, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 62, 12, 61, 139, 140, 58, 189, 234, 201, 81, 62, 202, 198, 12, 62, 58, 177, 39, 62, 39, 29, 15, 190, 4, 226, 126, 188, 206, 165, 77, 61, 129, 33, 184, 188, 166, 86, 36, 190, 127, 103, 43, 61, 50, 60, 13, 62, 20, 254, 162, 60, 245, 21, 32, 189, 42, 178, 52, 190, 139, 255, 54, 190, 255, 115, 127, 189, 24, 13, 95, 62, 70, 45, 148, 61, 128, 19, 182, 62, 206, 251, 246, 189, 228, 199, 113, 62, 207, 190, 145, 189, 149, 121, 29, 61, 106, 145, 50, 190, 52, 243, 140, 62, 43, 92, 85, 62, 59, 86, 232, 61, 143, 77, 25, 62, 24, 117, 238, 61, 103, 95, 104, 189, 112, 95, 1, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 10, 3, 63, 195, 164, 220, 189, 84, 129, 196, 188, 225, 25, 181, 62, 11, 160, 149, 190, 145, 40, 196, 189, 93, 20, 36, 63, 137, 53, 35, 191, 79, 63, 0, 62, 148, 153, 203, 189, 144, 37, 183, 190, 0, 66, 5, 63, 119, 221, 61, 62, 110, 131, 32, 190, 158, 156, 32, 190, 157, 148, 114, 62, 202, 81, 31, 190, 59, 100, 73, 63, 235, 72, 143, 62, 172, 107, 178, 189, 219, 111, 133, 61, 161, 192, 217, 188, 199, 75, 9, 190, 158, 30, 67, 62, 148, 49, 181, 61, 145, 57, 162, 189, 150, 26, 156, 190, 70, 29, 248, 190, 90, 206, 145, 62, 166, 5, 141, 62, 61, 116, 209, 62, 143, 110, 3, 191, 159, 155, 169, 61, 191, 67, 162, 189, 122, 154, 34, 190, 159, 76, 75, 190, 45, 22, 135, 190, 195, 196, 174, 187, 177, 86, 99, 61, 7, 148, 133, 62, 40, 227, 44, 190, 21, 91, 161, 59, 9, 140, 62, 190, 149, 152, 31, 62, 101, 165, 229, 61, 144, 214, 46, 61, 209, 249, 30, 189, 161, 18, 191, 61, 59, 138, 37, 62, 194, 103, 105, 61, 174, 243, 92, 190, 137, 145, 159, 190, 142, 163, 84, 62, 240, 63, 117, 190, 62, 226, 46, 61, 29, 182, 201, 188, 21, 129, 49, 189, 181, 0, 107, 190, 142, 46, 242, 61, 176, 215, 136, 189, 176, 80, 76, 61, 230, 113, 102, 61, 181, 15, 66, 188, 243, 27, 84, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 221, 11, 190, 131, 64, 128, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {240, 137, 27, 191, 6, 206, 237, 191, 218, 252, 227, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {46, 37, 13, 64, 152, 25, 29, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0000/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}