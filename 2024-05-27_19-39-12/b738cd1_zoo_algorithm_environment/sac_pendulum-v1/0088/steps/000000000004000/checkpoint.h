// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 92, 39, 62, 34, 14, 234, 189, 216, 35, 228, 62, 69, 138, 146, 62, 145, 94, 71, 191, 232, 187, 179, 189, 240, 165, 215, 190, 162, 109, 125, 191, 118, 0, 162, 190, 12, 172, 161, 190, 208, 163, 71, 63, 217, 98, 106, 191, 164, 90, 83, 61, 61, 114, 161, 190, 130, 157, 147, 63, 187, 67, 28, 191, 252, 165, 2, 63, 100, 203, 158, 62, 105, 112, 235, 62, 105, 73, 53, 191, 221, 5, 5, 191, 15, 46, 206, 190, 72, 82, 80, 191, 50, 94, 238, 62, 63, 210, 249, 61, 183, 165, 31, 191, 77, 7, 86, 190, 208, 20, 82, 190, 1, 40, 185, 190, 211, 112, 200, 62, 167, 23, 168, 61, 243, 20, 246, 190, 255, 106, 184, 190, 191, 206, 163, 189, 212, 197, 217, 190, 104, 147, 128, 62, 36, 37, 54, 63, 202, 19, 53, 191, 193, 106, 171, 61, 130, 165, 7, 63, 244, 100, 126, 63, 49, 84, 175, 62, 134, 203, 184, 60, 52, 97, 72, 63, 9, 131, 239, 190, 21, 158, 35, 62, 107, 26, 64, 63, 75, 160, 214, 190, 48, 172, 5, 63, 210, 134, 62, 61, 213, 247, 35, 191, 74, 232, 26, 62, 218, 220, 111, 62, 151, 71, 241, 190, 11, 92, 129, 190, 155, 50, 31, 191, 168, 56, 168, 189, 86, 113, 10, 188, 124, 242, 6, 63, 6, 4, 241, 59, 230, 50, 234, 190, 181, 90, 244, 190, 181, 22, 141, 189, 96, 194, 69, 191, 4, 229, 157, 189, 194, 123, 145, 61, 106, 68, 33, 191, 57, 5, 1, 63, 136, 139, 118, 190, 16, 126, 74, 61, 13, 126, 104, 62, 139, 15, 226, 190, 54, 101, 42, 63, 92, 79, 128, 63, 153, 187, 243, 62, 236, 72, 17, 62, 122, 52, 70, 62, 204, 104, 57, 63, 185, 57, 232, 62, 109, 17, 2, 190, 172, 139, 17, 63, 251, 121, 156, 188, 76, 240, 21, 191, 216, 14, 242, 62, 242, 36, 210, 190, 140, 183, 94, 63, 253, 118, 177, 62, 254, 104, 139, 63, 145, 141, 194, 61, 104, 165, 59, 189, 65, 22, 109, 190, 249, 102, 147, 190, 16, 191, 8, 63, 252, 48, 183, 190, 243, 67, 60, 190, 59, 244, 197, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 29, 15, 191, 171, 44, 63, 189, 49, 200, 86, 188, 170, 118, 201, 61, 149, 149, 144, 62, 83, 180, 171, 190, 108, 184, 45, 190, 113, 60, 172, 190, 87, 75, 2, 191, 37, 193, 27, 190, 222, 233, 22, 63, 236, 193, 36, 63, 18, 221, 143, 189, 183, 221, 158, 190, 9, 215, 129, 61, 233, 56, 58, 62, 99, 143, 94, 62, 222, 240, 202, 57, 185, 145, 200, 62, 213, 204, 217, 62, 74, 83, 230, 62, 185, 192, 97, 190, 4, 28, 41, 63, 200, 215, 136, 189, 182, 76, 225, 61, 183, 223, 150, 62, 8, 211, 160, 62, 161, 94, 208, 60, 143, 178, 64, 60, 24, 119, 248, 185, 99, 36, 155, 190, 23, 61, 86, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 140, 217, 189, 15, 21, 32, 62, 198, 253, 40, 190, 205, 189, 95, 59, 181, 49, 3, 61, 228, 31, 165, 189, 153, 13, 47, 59, 93, 48, 246, 188, 96, 225, 7, 190, 233, 144, 207, 189, 21, 239, 128, 189, 41, 217, 176, 187, 240, 31, 42, 190, 110, 50, 29, 188, 50, 174, 3, 190, 237, 100, 112, 60, 233, 57, 169, 188, 159, 94, 36, 61, 184, 52, 162, 189, 135, 49, 0, 189, 224, 163, 49, 60, 198, 168, 177, 189, 248, 91, 18, 61, 243, 39, 206, 189, 244, 52, 186, 61, 148, 100, 43, 189, 226, 214, 62, 190, 182, 22, 208, 189, 121, 187, 22, 62, 96, 90, 134, 189, 43, 222, 198, 188, 189, 219, 33, 190, 139, 222, 155, 61, 184, 163, 212, 190, 2, 148, 179, 61, 120, 116, 116, 61, 64, 198, 95, 61, 39, 54, 232, 189, 192, 42, 150, 190, 114, 209, 56, 61, 23, 236, 217, 188, 168, 5, 44, 190, 131, 60, 108, 189, 69, 131, 213, 189, 106, 206, 141, 61, 215, 22, 214, 61, 207, 240, 208, 62, 229, 239, 92, 62, 191, 209, 250, 60, 193, 83, 81, 190, 143, 45, 205, 190, 243, 244, 231, 188, 121, 216, 213, 60, 7, 230, 153, 188, 12, 126, 238, 61, 168, 204, 222, 190, 189, 156, 3, 62, 123, 202, 174, 61, 128, 45, 67, 188, 21, 170, 30, 190, 106, 120, 67, 61, 9, 138, 203, 62, 173, 136, 36, 60, 57, 63, 47, 62, 9, 72, 178, 190, 90, 44, 113, 62, 80, 92, 233, 190, 35, 85, 234, 190, 85, 190, 236, 187, 229, 49, 253, 61, 76, 196, 39, 62, 106, 8, 215, 189, 201, 87, 92, 62, 9, 180, 161, 62, 188, 255, 160, 189, 248, 49, 107, 62, 194, 240, 248, 62, 11, 142, 248, 190, 24, 134, 249, 190, 234, 149, 13, 191, 125, 53, 133, 189, 45, 233, 34, 61, 91, 102, 119, 62, 86, 144, 100, 189, 157, 201, 76, 61, 185, 73, 165, 61, 169, 252, 102, 62, 151, 160, 127, 188, 213, 63, 39, 190, 153, 83, 39, 62, 161, 91, 179, 189, 156, 139, 20, 61, 248, 124, 83, 62, 243, 79, 176, 188, 109, 114, 68, 190, 16, 56, 213, 190, 97, 77, 31, 189, 29, 246, 49, 62, 247, 67, 9, 190, 71, 3, 63, 189, 72, 148, 160, 188, 51, 229, 175, 60, 23, 200, 143, 189, 134, 114, 152, 190, 132, 165, 199, 189, 186, 63, 111, 62, 250, 219, 8, 60, 58, 175, 74, 62, 86, 77, 173, 62, 171, 181, 173, 190, 138, 215, 16, 190, 226, 204, 85, 61, 77, 236, 38, 62, 247, 6, 251, 61, 134, 170, 160, 62, 215, 110, 22, 62, 199, 227, 245, 59, 130, 241, 137, 62, 56, 87, 65, 61, 73, 14, 106, 190, 90, 158, 74, 61, 56, 63, 174, 61, 64, 242, 177, 189, 115, 97, 43, 189, 230, 204, 231, 61, 202, 251, 8, 62, 198, 17, 59, 190, 219, 214, 90, 188, 74, 148, 129, 61, 122, 205, 138, 190, 154, 53, 175, 189, 130, 77, 151, 62, 97, 17, 161, 190, 118, 168, 18, 191, 213, 174, 121, 190, 160, 112, 5, 190, 70, 104, 9, 61, 165, 162, 121, 190, 182, 67, 53, 187, 206, 218, 159, 189, 209, 63, 178, 62, 212, 160, 67, 62, 188, 97, 8, 62, 108, 149, 182, 61, 156, 177, 6, 62, 214, 181, 172, 61, 229, 115, 37, 190, 197, 15, 248, 61, 40, 196, 239, 189, 227, 219, 4, 190, 175, 151, 14, 62, 174, 205, 244, 61, 131, 207, 77, 62, 232, 211, 79, 190, 9, 130, 225, 188, 35, 65, 103, 190, 96, 207, 160, 61, 216, 162, 34, 62, 217, 220, 68, 190, 112, 41, 97, 62, 83, 173, 152, 61, 231, 40, 55, 190, 94, 215, 150, 187, 218, 202, 193, 188, 27, 130, 0, 62, 61, 34, 18, 61, 61, 117, 27, 62, 150, 149, 76, 190, 76, 148, 162, 60, 210, 116, 157, 189, 117, 147, 66, 190, 212, 161, 8, 190, 181, 70, 226, 189, 249, 80, 161, 189, 44, 160, 182, 189, 9, 71, 0, 189, 179, 8, 232, 61, 147, 148, 209, 61, 221, 76, 200, 189, 83, 243, 200, 189, 9, 150, 177, 189, 198, 215, 188, 188, 162, 130, 89, 61, 172, 94, 73, 189, 246, 61, 9, 190, 144, 54, 58, 188, 231, 54, 160, 189, 192, 35, 222, 188, 232, 135, 128, 61, 198, 199, 7, 190, 168, 216, 78, 190, 45, 117, 52, 190, 83, 87, 10, 190, 24, 25, 64, 187, 232, 76, 117, 190, 78, 42, 176, 190, 57, 231, 31, 62, 126, 250, 128, 62, 183, 109, 94, 62, 227, 105, 62, 190, 212, 180, 104, 61, 47, 163, 178, 62, 101, 181, 233, 61, 228, 134, 72, 62, 37, 207, 138, 62, 160, 27, 229, 189, 20, 213, 33, 191, 10, 97, 161, 190, 225, 117, 109, 62, 182, 207, 10, 189, 140, 59, 121, 189, 33, 24, 152, 190, 33, 112, 107, 61, 148, 244, 143, 61, 210, 102, 74, 62, 67, 121, 19, 190, 123, 43, 62, 189, 58, 243, 130, 61, 12, 64, 209, 60, 65, 152, 95, 62, 138, 64, 235, 186, 1, 107, 248, 189, 73, 167, 135, 189, 81, 209, 164, 190, 10, 163, 163, 59, 25, 97, 227, 190, 199, 10, 18, 62, 225, 159, 83, 60, 74, 60, 215, 190, 64, 159, 64, 190, 5, 218, 52, 187, 69, 99, 147, 189, 104, 252, 24, 62, 182, 151, 146, 191, 134, 23, 29, 62, 195, 66, 147, 189, 244, 21, 48, 190, 216, 128, 51, 62, 187, 53, 113, 62, 89, 59, 209, 62, 240, 237, 245, 61, 205, 228, 22, 187, 178, 44, 156, 61, 5, 251, 78, 62, 101, 116, 133, 189, 190, 192, 90, 62, 99, 89, 75, 62, 151, 71, 150, 190, 234, 180, 197, 188, 33, 41, 174, 190, 95, 228, 206, 189, 213, 185, 85, 191, 240, 152, 135, 190, 40, 23, 11, 190, 116, 78, 110, 61, 131, 253, 221, 61, 241, 186, 15, 60, 107, 208, 70, 191, 56, 103, 160, 189, 12, 8, 160, 62, 88, 178, 165, 191, 237, 241, 52, 190, 123, 214, 205, 190, 225, 74, 71, 187, 239, 176, 210, 189, 212, 7, 12, 191, 99, 65, 204, 188, 85, 21, 148, 62, 168, 77, 55, 60, 238, 116, 65, 190, 105, 132, 40, 61, 94, 190, 113, 188, 24, 82, 36, 190, 128, 219, 176, 189, 73, 194, 255, 59, 8, 136, 38, 62, 28, 40, 177, 58, 110, 83, 217, 62, 55, 197, 162, 62, 183, 98, 168, 190, 210, 105, 205, 190, 177, 106, 101, 191, 81, 221, 176, 190, 86, 48, 15, 191, 225, 199, 46, 191, 119, 111, 185, 62, 170, 96, 22, 190, 135, 244, 115, 62, 94, 102, 255, 188, 118, 86, 222, 189, 198, 169, 19, 62, 80, 186, 225, 188, 105, 217, 183, 60, 157, 208, 192, 188, 206, 70, 11, 190, 119, 81, 207, 61, 98, 95, 164, 189, 172, 187, 15, 190, 129, 145, 218, 189, 248, 62, 186, 60, 5, 177, 19, 61, 54, 179, 132, 60, 115, 188, 159, 189, 178, 144, 193, 61, 142, 109, 100, 188, 52, 231, 164, 61, 223, 177, 253, 189, 62, 244, 4, 62, 173, 199, 39, 61, 164, 126, 156, 61, 35, 60, 175, 189, 184, 155, 99, 61, 105, 91, 37, 190, 111, 179, 246, 189, 15, 205, 245, 189, 86, 209, 2, 62, 142, 158, 162, 61, 60, 217, 3, 61, 118, 59, 108, 61, 27, 25, 34, 190, 74, 96, 164, 61, 198, 171, 140, 190, 4, 221, 26, 62, 69, 133, 72, 62, 5, 155, 251, 189, 45, 143, 152, 190, 210, 43, 64, 190, 21, 99, 110, 188, 215, 177, 175, 189, 139, 62, 28, 190, 243, 122, 167, 61, 136, 165, 209, 190, 208, 141, 112, 62, 163, 6, 209, 61, 112, 38, 135, 62, 41, 139, 10, 62, 224, 159, 171, 188, 78, 248, 228, 187, 35, 109, 40, 190, 222, 168, 32, 62, 89, 95, 191, 60, 241, 95, 94, 190, 202, 9, 31, 62, 20, 154, 219, 61, 220, 244, 28, 189, 34, 36, 130, 61, 14, 194, 125, 60, 200, 89, 68, 190, 58, 86, 26, 190, 4, 127, 147, 190, 213, 27, 170, 189, 176, 154, 141, 61, 182, 251, 120, 61, 172, 109, 54, 190, 131, 52, 113, 190, 11, 213, 238, 189, 209, 152, 22, 61, 25, 16, 175, 61, 193, 173, 212, 190, 212, 127, 100, 190, 228, 22, 32, 60, 144, 104, 142, 190, 15, 181, 197, 190, 120, 100, 5, 62, 245, 238, 6, 62, 237, 135, 138, 62, 90, 44, 82, 62, 98, 235, 241, 61, 108, 49, 231, 60, 60, 226, 39, 189, 193, 46, 118, 191, 14, 60, 104, 62, 142, 9, 55, 191, 51, 164, 140, 189, 178, 41, 22, 61, 142, 170, 254, 189, 167, 40, 160, 62, 104, 5, 38, 60, 132, 237, 29, 189, 2, 177, 186, 60, 237, 136, 84, 188, 184, 113, 240, 62, 112, 70, 6, 61, 162, 200, 145, 190, 95, 207, 41, 62, 220, 200, 58, 61, 29, 245, 154, 189, 141, 172, 107, 61, 46, 109, 252, 189, 17, 165, 162, 189, 119, 196, 182, 189, 209, 87, 250, 189, 40, 80, 68, 61, 138, 151, 6, 62, 223, 219, 127, 61, 0, 56, 175, 189, 210, 219, 44, 190, 171, 208, 244, 61, 187, 167, 198, 189, 238, 41, 34, 190, 101, 246, 108, 189, 178, 180, 11, 62, 133, 177, 218, 61, 54, 44, 153, 61, 171, 101, 8, 190, 34, 189, 2, 59, 127, 136, 130, 189, 179, 108, 252, 60, 134, 243, 52, 188, 226, 225, 119, 188, 5, 71, 158, 189, 58, 253, 54, 61, 227, 202, 190, 189, 120, 44, 10, 62, 251, 204, 198, 189, 209, 65, 47, 190, 156, 161, 6, 62, 213, 114, 190, 190, 216, 13, 76, 61, 84, 68, 251, 61, 104, 225, 95, 190, 22, 59, 45, 189, 62, 179, 154, 190, 206, 106, 242, 188, 226, 207, 20, 190, 170, 83, 222, 189, 173, 151, 156, 60, 209, 142, 169, 61, 115, 82, 134, 62, 83, 141, 44, 61, 36, 172, 213, 62, 174, 2, 93, 62, 224, 130, 32, 190, 107, 212, 10, 189, 228, 204, 59, 190, 132, 62, 28, 62, 239, 92, 167, 189, 7, 137, 86, 190, 28, 71, 76, 60, 112, 139, 191, 190, 136, 178, 138, 62, 154, 105, 149, 60, 162, 92, 75, 62, 175, 173, 61, 187, 247, 169, 165, 60, 176, 98, 146, 62, 91, 101, 38, 189, 80, 48, 89, 62, 198, 40, 201, 61, 104, 169, 49, 191, 254, 141, 57, 61, 60, 50, 70, 62, 149, 241, 160, 190, 231, 50, 92, 190, 0, 172, 237, 190, 210, 70, 60, 189, 36, 113, 135, 190, 58, 62, 42, 191, 22, 144, 4, 62, 70, 253, 59, 60, 180, 30, 63, 60, 139, 196, 234, 61, 93, 245, 165, 62, 11, 183, 242, 62, 3, 25, 193, 189, 16, 186, 196, 190, 253, 111, 31, 189, 119, 49, 150, 61, 158, 6, 213, 61, 126, 119, 63, 190, 154, 255, 133, 60, 191, 12, 214, 190, 43, 30, 112, 62, 184, 125, 157, 188, 7, 135, 48, 62, 253, 146, 67, 190, 66, 70, 58, 190, 140, 93, 203, 62, 245, 243, 24, 62, 2, 120, 25, 62, 222, 202, 105, 190, 158, 115, 168, 62, 183, 94, 164, 190, 194, 205, 191, 189, 66, 98, 13, 61, 252, 218, 75, 62, 220, 70, 44, 62, 23, 227, 154, 190, 250, 130, 32, 186, 86, 218, 12, 63, 56, 198, 165, 61, 68, 143, 0, 62, 38, 200, 248, 62, 148, 188, 226, 190, 104, 26, 83, 190, 78, 92, 164, 190, 22, 183, 71, 62, 214, 71, 80, 62, 2, 153, 233, 61, 165, 135, 0, 62, 221, 38, 239, 188, 227, 70, 141, 188, 122, 203, 18, 189, 99, 109, 65, 62, 11, 0, 157, 190, 155, 178, 90, 60, 133, 107, 176, 190, 11, 233, 209, 62, 66, 169, 160, 62, 222, 227, 139, 62, 164, 250, 110, 190, 186, 12, 8, 190, 4, 132, 55, 61, 29, 185, 43, 62, 133, 196, 150, 190, 166, 185, 152, 190, 208, 25, 43, 190, 58, 255, 105, 62, 174, 233, 143, 61, 62, 124, 241, 190, 170, 99, 148, 189, 214, 9, 113, 62, 224, 58, 171, 61, 88, 217, 13, 62, 230, 187, 157, 62, 68, 152, 200, 189, 188, 168, 149, 190, 72, 118, 157, 189, 194, 230, 224, 61, 173, 147, 151, 62, 49, 198, 208, 189, 122, 133, 171, 60, 203, 143, 159, 61, 177, 49, 133, 61, 14, 28, 65, 62, 112, 123, 174, 61, 230, 6, 48, 190, 205, 97, 236, 61, 230, 29, 117, 190, 96, 231, 35, 190, 191, 201, 176, 62, 167, 149, 164, 62, 204, 25, 50, 190, 136, 57, 128, 190, 120, 76, 132, 61, 233, 147, 65, 189, 127, 129, 7, 62, 117, 70, 10, 190, 44, 206, 130, 189, 107, 247, 146, 189, 73, 187, 237, 189, 88, 11, 64, 189, 102, 90, 120, 61, 185, 101, 244, 61, 170, 9, 81, 189, 138, 238, 147, 188, 143, 17, 29, 190, 71, 67, 6, 62, 135, 213, 0, 189, 19, 143, 161, 189, 142, 136, 113, 188, 16, 151, 146, 61, 182, 239, 19, 190, 142, 216, 229, 61, 154, 246, 7, 61, 73, 146, 82, 188, 72, 71, 87, 60, 172, 119, 9, 190, 19, 4, 230, 61, 148, 75, 98, 60, 86, 137, 22, 190, 173, 44, 12, 190, 147, 224, 254, 189, 1, 250, 32, 189, 134, 39, 190, 189, 113, 143, 152, 61, 108, 95, 78, 190, 232, 6, 247, 188, 210, 160, 212, 190, 91, 52, 113, 190, 177, 62, 44, 188, 99, 49, 58, 62, 41, 166, 166, 189, 82, 97, 16, 189, 251, 53, 8, 190, 2, 81, 207, 61, 29, 74, 118, 61, 11, 94, 220, 61, 160, 41, 200, 61, 231, 160, 99, 189, 127, 114, 150, 62, 33, 247, 134, 62, 24, 119, 107, 60, 88, 123, 134, 188, 251, 172, 40, 190, 8, 21, 61, 62, 126, 251, 236, 190, 92, 188, 142, 62, 108, 124, 254, 189, 90, 219, 131, 187, 19, 209, 149, 189, 43, 143, 221, 60, 117, 56, 117, 62, 105, 96, 104, 189, 177, 196, 168, 188, 145, 16, 221, 62, 41, 152, 36, 189, 169, 19, 66, 190, 35, 150, 146, 190, 130, 182, 170, 62, 180, 83, 104, 190, 229, 106, 151, 59, 18, 242, 36, 62, 232, 59, 197, 61, 223, 65, 114, 189, 45, 211, 66, 188, 131, 156, 180, 189, 94, 143, 160, 62, 80, 69, 9, 61, 52, 158, 173, 61, 5, 31, 152, 62, 179, 157, 182, 190, 36, 85, 103, 188, 233, 246, 124, 190, 142, 203, 225, 60, 54, 200, 192, 189, 133, 240, 225, 60, 121, 166, 9, 62, 239, 183, 111, 62, 250, 200, 92, 62, 22, 73, 129, 62, 211, 194, 59, 61, 241, 92, 59, 190, 77, 89, 205, 189, 98, 60, 90, 190, 200, 20, 157, 61, 27, 149, 162, 61, 214, 125, 132, 62, 67, 140, 159, 189, 33, 35, 54, 61, 123, 186, 47, 62, 229, 29, 30, 191, 79, 162, 78, 61, 96, 81, 72, 62, 146, 169, 32, 190, 132, 69, 77, 190, 126, 91, 252, 190, 48, 21, 152, 187, 32, 13, 134, 190, 118, 158, 212, 190, 206, 184, 73, 62, 233, 201, 201, 189, 151, 89, 173, 61, 30, 229, 168, 62, 112, 73, 191, 62, 157, 161, 138, 62, 197, 90, 101, 190, 98, 50, 110, 190, 239, 147, 134, 190, 138, 182, 119, 62, 47, 24, 149, 61, 170, 127, 226, 189, 99, 192, 247, 61, 215, 68, 131, 190, 127, 161, 61, 62, 233, 137, 168, 190, 210, 85, 118, 62, 2, 104, 251, 190, 244, 3, 12, 190, 145, 85, 190, 62, 219, 78, 158, 59, 159, 150, 78, 61, 234, 218, 77, 62, 220, 139, 91, 190, 159, 158, 209, 61, 3, 183, 21, 62, 27, 216, 163, 189, 88, 23, 168, 190, 77, 106, 0, 191, 96, 151, 178, 188, 135, 251, 101, 190, 129, 151, 156, 190, 152, 147, 11, 62, 161, 110, 186, 60, 218, 235, 240, 189, 164, 158, 140, 61, 164, 25, 221, 62, 136, 152, 10, 63, 175, 154, 58, 190, 1, 248, 166, 190, 199, 232, 24, 190, 37, 250, 85, 62, 251, 45, 96, 61, 33, 225, 254, 189, 234, 44, 159, 189, 2, 236, 197, 190, 154, 204, 127, 62, 20, 38, 130, 61, 27, 190, 107, 62, 98, 213, 38, 190, 32, 85, 161, 60, 155, 99, 164, 62, 34, 173, 132, 60, 36, 216, 104, 62, 175, 10, 118, 60, 62, 128, 48, 189, 18, 154, 29, 190, 200, 61, 11, 190, 34, 169, 48, 188, 111, 200, 26, 62, 237, 170, 44, 190, 67, 169, 152, 61, 81, 227, 48, 190, 26, 44, 211, 61, 122, 101, 254, 189, 135, 238, 145, 60, 218, 97, 121, 189, 151, 207, 203, 189, 45, 53, 160, 61, 192, 74, 232, 189, 57, 250, 58, 61, 104, 50, 10, 60, 141, 227, 37, 188, 231, 138, 230, 189, 67, 142, 191, 189, 5, 233, 228, 189, 31, 192, 7, 190, 72, 13, 23, 60, 61, 135, 195, 61, 78, 136, 43, 190, 232, 111, 255, 188, 164, 131, 200, 189, 239, 192, 186, 189, 152, 155, 85, 61, 20, 72, 3, 61, 173, 181, 6, 190, 67, 158, 177, 59, 195, 152, 75, 62, 64, 40, 233, 189, 5, 20, 25, 190, 33, 73, 168, 61, 97, 36, 3, 62, 147, 69, 171, 62, 184, 95, 208, 189, 152, 105, 121, 61, 33, 6, 188, 188, 226, 141, 9, 188, 9, 148, 166, 61, 161, 154, 64, 62, 59, 194, 151, 189, 131, 246, 171, 190, 106, 236, 79, 190, 12, 8, 142, 62, 77, 73, 8, 62, 57, 220, 185, 189, 145, 24, 175, 190, 225, 141, 16, 62, 43, 193, 17, 61, 182, 218, 127, 60, 168, 86, 180, 62, 194, 182, 183, 188, 195, 59, 223, 61, 73, 85, 194, 189, 112, 226, 9, 61, 177, 101, 24, 62, 191, 24, 148, 190, 52, 180, 120, 190, 163, 162, 171, 189, 254, 187, 23, 61, 161, 194, 149, 62, 112, 108, 59, 62, 136, 27, 40, 190, 143, 50, 126, 61, 211, 3, 49, 190, 233, 67, 164, 62, 59, 156, 240, 61, 38, 37, 59, 62, 10, 149, 128, 61, 88, 32, 67, 61, 168, 82, 135, 189, 60, 238, 2, 61, 150, 10, 13, 62, 195, 220, 118, 190, 11, 32, 142, 190, 156, 108, 113, 60, 73, 27, 165, 61, 223, 128, 149, 61, 229, 208, 61, 191, 138, 247, 153, 189, 11, 106, 100, 191, 5, 10, 235, 189, 86, 10, 117, 62, 60, 25, 44, 190, 111, 207, 244, 189, 120, 141, 137, 62, 206, 95, 127, 190, 134, 117, 240, 188, 249, 40, 46, 62, 12, 199, 91, 190, 111, 253, 197, 61, 65, 100, 11, 190, 117, 65, 27, 188, 191, 75, 214, 60, 197, 129, 39, 190, 115, 241, 0, 61, 253, 228, 20, 62, 158, 230, 84, 61, 12, 109, 139, 189, 21, 99, 211, 189, 254, 102, 247, 189, 112, 89, 145, 61, 215, 47, 2, 61, 112, 113, 23, 189, 246, 226, 132, 61, 117, 1, 49, 190, 49, 95, 123, 189, 153, 101, 11, 190, 168, 188, 153, 60, 219, 145, 208, 61, 101, 171, 30, 190, 126, 116, 28, 60, 54, 52, 211, 56, 246, 245, 162, 189, 211, 131, 166, 61, 72, 112, 49, 190, 50, 201, 196, 189, 185, 238, 13, 190, 254, 118, 249, 60, 147, 132, 13, 190, 202, 105, 205, 61, 89, 7, 78, 189, 0, 196, 60, 189, 215, 114, 146, 188, 30, 115, 42, 62, 56, 222, 71, 190, 106, 192, 104, 190, 172, 90, 33, 189, 84, 148, 2, 62, 49, 218, 139, 62, 43, 171, 112, 188, 21, 106, 63, 62, 30, 59, 107, 62, 214, 176, 65, 61, 169, 174, 52, 62, 40, 76, 155, 62, 11, 134, 166, 189, 205, 182, 229, 190, 34, 45, 180, 190, 176, 118, 171, 62, 9, 85, 192, 62, 157, 85, 53, 61, 22, 39, 10, 189, 85, 76, 17, 188, 225, 63, 253, 60, 200, 172, 163, 61, 150, 204, 146, 62, 242, 209, 133, 189, 157, 95, 232, 61, 114, 117, 248, 189, 193, 58, 35, 60, 11, 241, 217, 188, 218, 129, 115, 190, 207, 9, 107, 190, 1, 173, 149, 61, 87, 247, 139, 190, 226, 135, 180, 62, 230, 21, 183, 190, 148, 31, 157, 190, 196, 163, 216, 189, 53, 90, 117, 62, 61, 174, 7, 62, 254, 126, 76, 190, 193, 194, 46, 189, 150, 216, 222, 62, 51, 112, 116, 189, 231, 180, 73, 62, 181, 172, 199, 62, 73, 202, 101, 190, 79, 45, 250, 190, 48, 69, 195, 189, 112, 165, 207, 62, 25, 109, 95, 62, 64, 133, 0, 61, 107, 144, 44, 61, 156, 66, 129, 61, 52, 116, 207, 61, 161, 22, 46, 61, 223, 100, 112, 188, 22, 50, 50, 189, 11, 28, 87, 189, 240, 37, 38, 190, 128, 247, 145, 62, 236, 95, 64, 62, 71, 112, 11, 62, 89, 198, 70, 190, 4, 247, 159, 190, 104, 151, 25, 190, 88, 156, 171, 61, 86, 122, 226, 188, 108, 202, 64, 189, 132, 29, 7, 61, 247, 51, 129, 188, 195, 166, 8, 190, 155, 161, 130, 190, 133, 54, 142, 188, 248, 241, 99, 62, 33, 12, 176, 61, 237, 62, 174, 61, 156, 230, 9, 63, 20, 8, 69, 190, 187, 190, 100, 190, 161, 160, 65, 190, 251, 246, 229, 61, 246, 11, 230, 61, 8, 58, 230, 60, 80, 192, 33, 62, 44, 195, 76, 62, 53, 104, 85, 62, 21, 150, 151, 62, 107, 217, 195, 61, 109, 42, 183, 189, 248, 190, 26, 62, 24, 46, 138, 189, 160, 121, 175, 60, 249, 139, 39, 61, 231, 158, 101, 62, 6, 61, 122, 190, 123, 168, 188, 189, 35, 37, 211, 189, 107, 177, 46, 190, 49, 205, 227, 188, 159, 247, 78, 62, 254, 92, 34, 62, 163, 160, 45, 190, 194, 159, 135, 189, 59, 133, 12, 62, 38, 147, 156, 190, 98, 35, 205, 186, 188, 138, 174, 60, 62, 4, 176, 60, 112, 2, 28, 61, 158, 22, 251, 188, 45, 133, 39, 62, 80, 28, 93, 62, 128, 77, 160, 189, 98, 108, 171, 190, 61, 33, 190, 189, 207, 247, 77, 189, 33, 229, 128, 189, 121, 10, 213, 61, 105, 177, 226, 61, 116, 102, 19, 190, 137, 98, 111, 62, 49, 190, 110, 61, 157, 30, 72, 62, 26, 23, 147, 60, 227, 142, 73, 190, 20, 76, 207, 62, 25, 18, 73, 62, 69, 244, 163, 61, 243, 240, 198, 61, 19, 65, 145, 62, 18, 56, 193, 59, 9, 51, 142, 61, 151, 91, 35, 189, 194, 101, 119, 190, 175, 22, 59, 62, 254, 79, 100, 60, 197, 107, 103, 61, 154, 141, 12, 61, 247, 149, 27, 62, 32, 130, 243, 61, 181, 88, 248, 62, 178, 183, 233, 190, 98, 58, 214, 189, 102, 248, 71, 190, 7, 8, 75, 61, 143, 184, 20, 190, 234, 198, 225, 61, 221, 198, 137, 190, 191, 95, 24, 190, 219, 55, 62, 190, 215, 135, 41, 190, 126, 156, 200, 60, 96, 147, 135, 190, 168, 201, 103, 189, 222, 160, 44, 62, 30, 174, 103, 62, 253, 121, 67, 190, 204, 222, 220, 62, 254, 180, 242, 189, 5, 192, 233, 61, 217, 40, 8, 190, 237, 14, 76, 60, 93, 185, 187, 60, 163, 55, 249, 61, 208, 217, 191, 189, 74, 73, 113, 189, 55, 237, 232, 189, 62, 53, 16, 62, 29, 44, 17, 190, 98, 136, 4, 190, 125, 2, 18, 62, 39, 164, 174, 61, 173, 203, 214, 189, 87, 220, 179, 61, 145, 141, 80, 189, 99, 224, 25, 190, 14, 55, 32, 190, 76, 89, 218, 61, 58, 199, 164, 61, 99, 65, 168, 189, 68, 100, 45, 190, 254, 99, 16, 190, 36, 17, 220, 188, 94, 151, 27, 188, 236, 105, 31, 190, 153, 254, 52, 190, 216, 76, 252, 189, 72, 26, 212, 189, 213, 191, 176, 189, 208, 117, 3, 62, 169, 161, 140, 189, 211, 22, 205, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 248, 23, 190, 3, 40, 246, 188, 233, 220, 158, 187, 59, 223, 131, 62, 240, 54, 7, 189, 184, 114, 199, 61, 6, 57, 152, 61, 179, 74, 222, 60, 105, 254, 141, 62, 152, 162, 112, 189, 129, 144, 250, 60, 16, 45, 52, 62, 23, 221, 32, 189, 88, 48, 1, 188, 139, 124, 240, 61, 11, 118, 83, 189, 4, 129, 104, 189, 212, 11, 202, 189, 222, 42, 71, 62, 102, 220, 142, 62, 6, 235, 192, 61, 4, 119, 165, 189, 79, 37, 239, 189, 196, 218, 192, 60, 217, 163, 48, 190, 214, 153, 41, 190, 156, 87, 117, 61, 238, 15, 0, 62, 100, 112, 119, 61, 12, 149, 223, 189, 21, 215, 15, 61, 208, 27, 50, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 187, 137, 61, 191, 208, 179, 189, 105, 56, 10, 63, 8, 252, 12, 62, 244, 228, 203, 62, 234, 246, 35, 188, 241, 178, 117, 62, 69, 174, 189, 190, 39, 31, 139, 191, 241, 250, 195, 60, 149, 47, 130, 62, 161, 10, 12, 191, 131, 117, 40, 190, 82, 20, 141, 190, 62, 221, 175, 190, 136, 204, 213, 62, 49, 204, 149, 62, 60, 247, 141, 189, 84, 147, 8, 190, 127, 71, 90, 62, 206, 12, 210, 190, 195, 117, 125, 190, 71, 246, 203, 61, 179, 32, 50, 62, 209, 52, 14, 191, 234, 178, 222, 61, 109, 43, 151, 62, 153, 180, 207, 62, 128, 177, 92, 62, 1, 243, 27, 190, 10, 87, 129, 62, 176, 159, 174, 189, 192, 214, 235, 61, 212, 82, 18, 189, 15, 230, 116, 62, 153, 139, 121, 190, 184, 32, 181, 188, 56, 53, 217, 61, 82, 49, 117, 189, 107, 63, 105, 190, 239, 11, 122, 62, 185, 23, 119, 61, 154, 87, 185, 61, 217, 46, 157, 60, 153, 207, 96, 61, 39, 217, 219, 189, 7, 55, 214, 188, 58, 32, 248, 61, 107, 32, 210, 189, 4, 57, 88, 189, 97, 69, 227, 190, 194, 79, 229, 189, 144, 80, 10, 62, 175, 170, 29, 60, 19, 40, 241, 189, 52, 195, 236, 61, 98, 92, 144, 62, 127, 12, 175, 61, 123, 154, 52, 62, 39, 22, 216, 189, 3, 16, 60, 190, 197, 80, 198, 189, 159, 135, 89, 190, 89, 124, 19, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 143, 180, 189, 184, 230, 161, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {45, 54, 20, 63, 113, 158, 69, 191, 157, 206, 221, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {157, 247, 23, 64, 32, 218, 103, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0088/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}