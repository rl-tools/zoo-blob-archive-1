// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 158, 246, 62, 184, 31, 75, 189, 54, 247, 187, 62, 184, 139, 193, 62, 146, 58, 49, 191, 236, 30, 46, 190, 144, 254, 195, 190, 57, 59, 175, 191, 45, 194, 188, 190, 36, 217, 194, 190, 151, 91, 223, 62, 185, 187, 97, 191, 38, 233, 140, 60, 122, 167, 128, 62, 164, 83, 140, 63, 196, 174, 13, 191, 54, 33, 107, 63, 102, 160, 132, 62, 95, 185, 238, 62, 37, 70, 48, 191, 160, 202, 5, 191, 38, 250, 174, 190, 124, 175, 126, 191, 161, 99, 192, 62, 126, 162, 19, 63, 204, 229, 202, 190, 186, 91, 132, 190, 2, 90, 22, 190, 18, 185, 152, 190, 213, 126, 207, 62, 55, 159, 38, 61, 248, 61, 50, 191, 2, 85, 135, 190, 59, 95, 231, 188, 153, 166, 19, 191, 221, 101, 201, 60, 92, 253, 61, 63, 109, 135, 56, 191, 72, 248, 154, 60, 19, 2, 35, 63, 74, 184, 115, 63, 21, 6, 167, 62, 254, 34, 141, 61, 3, 168, 47, 63, 166, 129, 223, 190, 51, 119, 103, 62, 178, 174, 48, 63, 74, 81, 187, 190, 83, 22, 6, 63, 219, 88, 180, 61, 9, 225, 31, 191, 152, 209, 252, 61, 241, 215, 107, 62, 208, 67, 240, 190, 61, 118, 141, 190, 51, 229, 29, 191, 11, 200, 30, 190, 219, 135, 212, 188, 150, 249, 185, 62, 37, 241, 235, 60, 251, 130, 1, 191, 193, 241, 10, 191, 13, 42, 26, 190, 127, 133, 128, 191, 98, 136, 50, 190, 97, 49, 1, 188, 89, 253, 53, 191, 136, 217, 142, 62, 35, 115, 160, 189, 53, 246, 218, 61, 236, 61, 128, 62, 70, 38, 227, 190, 82, 229, 59, 63, 26, 232, 126, 63, 19, 177, 244, 62, 215, 5, 47, 62, 134, 55, 153, 63, 182, 228, 248, 62, 255, 180, 245, 62, 43, 158, 255, 189, 128, 128, 12, 63, 212, 9, 116, 61, 110, 49, 247, 190, 43, 218, 245, 62, 62, 69, 170, 190, 79, 16, 162, 63, 209, 138, 158, 62, 125, 52, 141, 63, 34, 130, 102, 62, 10, 249, 64, 189, 62, 131, 86, 190, 115, 51, 106, 190, 157, 104, 244, 62, 157, 223, 155, 190, 115, 177, 84, 191, 234, 113, 205, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 168, 64, 191, 246, 233, 61, 189, 11, 42, 215, 189, 187, 219, 188, 61, 192, 124, 160, 62, 181, 252, 243, 190, 211, 90, 132, 190, 27, 247, 190, 190, 244, 87, 49, 191, 202, 24, 114, 190, 7, 38, 250, 62, 136, 146, 46, 63, 236, 176, 240, 188, 84, 232, 160, 190, 131, 149, 6, 60, 70, 216, 59, 62, 129, 84, 28, 62, 228, 16, 137, 189, 161, 146, 217, 62, 65, 73, 7, 63, 151, 207, 238, 62, 204, 73, 1, 188, 49, 227, 53, 63, 86, 29, 8, 190, 52, 13, 8, 62, 111, 43, 129, 62, 69, 107, 160, 62, 68, 140, 19, 190, 209, 195, 87, 189, 251, 225, 23, 59, 253, 201, 162, 190, 94, 98, 44, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 140, 217, 189, 15, 21, 32, 62, 198, 253, 40, 190, 205, 189, 95, 59, 26, 98, 228, 60, 58, 44, 171, 189, 153, 13, 47, 59, 93, 48, 246, 188, 96, 225, 7, 190, 233, 144, 207, 189, 21, 239, 128, 189, 108, 94, 205, 187, 240, 31, 42, 190, 129, 197, 53, 188, 190, 51, 4, 190, 27, 24, 98, 60, 233, 57, 169, 188, 159, 94, 36, 61, 184, 52, 162, 189, 25, 128, 12, 189, 85, 112, 37, 60, 198, 168, 177, 189, 140, 67, 1, 61, 243, 39, 206, 189, 16, 147, 180, 61, 59, 0, 63, 189, 225, 28, 64, 190, 182, 22, 208, 189, 209, 191, 17, 62, 96, 90, 134, 189, 127, 133, 199, 188, 189, 219, 33, 190, 156, 252, 173, 188, 129, 132, 4, 191, 242, 129, 108, 189, 202, 121, 78, 61, 132, 233, 68, 61, 194, 81, 116, 189, 45, 253, 150, 190, 216, 239, 188, 189, 176, 106, 149, 189, 131, 229, 145, 190, 21, 84, 171, 189, 163, 56, 44, 190, 148, 110, 132, 60, 107, 227, 252, 61, 106, 188, 210, 62, 246, 65, 104, 62, 201, 221, 66, 61, 2, 69, 65, 190, 50, 182, 5, 191, 200, 241, 47, 58, 62, 113, 9, 190, 21, 178, 160, 190, 153, 71, 230, 61, 30, 186, 216, 190, 70, 250, 9, 62, 83, 2, 215, 61, 47, 132, 66, 189, 51, 42, 129, 190, 117, 47, 215, 61, 80, 83, 209, 62, 24, 62, 199, 189, 41, 151, 130, 61, 251, 21, 171, 190, 45, 142, 187, 62, 154, 162, 97, 191, 196, 56, 174, 189, 124, 49, 24, 59, 192, 34, 62, 62, 207, 85, 84, 62, 168, 174, 177, 189, 142, 74, 236, 62, 236, 114, 196, 62, 65, 53, 31, 190, 201, 95, 66, 62, 163, 168, 0, 63, 141, 166, 38, 191, 206, 44, 47, 188, 10, 244, 223, 190, 94, 159, 71, 189, 205, 232, 136, 62, 251, 169, 76, 62, 77, 152, 21, 189, 65, 198, 32, 61, 160, 175, 54, 60, 218, 1, 120, 62, 127, 251, 228, 62, 90, 237, 146, 190, 229, 222, 16, 62, 35, 2, 172, 189, 52, 236, 198, 61, 48, 146, 149, 62, 220, 5, 219, 189, 249, 145, 251, 189, 220, 66, 134, 191, 170, 94, 195, 188, 82, 35, 105, 62, 19, 17, 59, 190, 201, 148, 205, 189, 212, 135, 160, 187, 130, 226, 138, 61, 26, 189, 219, 189, 75, 22, 107, 190, 61, 197, 153, 189, 109, 149, 152, 62, 211, 74, 196, 60, 28, 211, 127, 62, 62, 129, 190, 62, 119, 180, 220, 190, 210, 213, 87, 190, 60, 63, 115, 61, 225, 74, 60, 62, 71, 89, 97, 61, 212, 161, 166, 62, 147, 51, 69, 62, 28, 227, 55, 59, 38, 28, 131, 62, 115, 138, 221, 188, 107, 3, 160, 190, 129, 8, 92, 61, 191, 172, 202, 61, 185, 178, 125, 189, 64, 24, 255, 188, 12, 222, 213, 61, 201, 70, 29, 62, 51, 75, 209, 189, 109, 209, 57, 59, 44, 94, 231, 187, 13, 146, 127, 190, 46, 9, 175, 60, 187, 2, 154, 62, 113, 28, 231, 190, 4, 124, 88, 191, 253, 80, 113, 190, 231, 95, 99, 63, 138, 39, 47, 62, 214, 123, 171, 59, 251, 225, 55, 61, 159, 67, 107, 60, 29, 144, 189, 62, 50, 118, 33, 62, 23, 129, 21, 62, 172, 67, 191, 61, 111, 62, 2, 62, 46, 118, 177, 61, 123, 4, 173, 189, 79, 130, 41, 61, 227, 1, 146, 189, 175, 215, 55, 190, 161, 238, 206, 61, 128, 175, 0, 62, 9, 241, 49, 62, 179, 127, 87, 190, 12, 247, 152, 189, 171, 212, 66, 190, 211, 145, 72, 190, 102, 191, 213, 61, 24, 19, 163, 61, 23, 85, 166, 62, 66, 138, 195, 188, 12, 79, 133, 190, 44, 60, 48, 189, 81, 123, 127, 188, 48, 239, 143, 61, 3, 44, 168, 61, 70, 96, 218, 61, 18, 83, 8, 190, 58, 62, 119, 188, 179, 21, 97, 190, 135, 103, 104, 190, 129, 180, 175, 189, 202, 62, 130, 190, 98, 128, 148, 190, 140, 161, 164, 189, 33, 15, 217, 188, 38, 156, 194, 61, 79, 209, 183, 61, 146, 231, 211, 189, 183, 87, 156, 189, 77, 251, 106, 189, 8, 70, 96, 61, 107, 33, 9, 62, 80, 182, 106, 189, 136, 93, 181, 190, 24, 128, 7, 189, 105, 83, 134, 190, 135, 220, 55, 190, 208, 13, 217, 61, 214, 66, 79, 190, 191, 86, 92, 190, 202, 74, 86, 190, 180, 140, 251, 189, 50, 239, 107, 189, 122, 59, 20, 191, 226, 238, 48, 189, 211, 130, 33, 62, 124, 140, 149, 62, 60, 145, 55, 62, 6, 44, 74, 190, 187, 80, 51, 189, 130, 115, 189, 62, 51, 88, 116, 186, 150, 230, 20, 62, 235, 46, 62, 62, 174, 231, 15, 190, 87, 190, 241, 190, 5, 208, 135, 190, 193, 194, 106, 62, 169, 35, 169, 188, 117, 213, 243, 189, 155, 117, 138, 190, 207, 85, 134, 61, 203, 15, 19, 62, 189, 203, 77, 62, 67, 39, 181, 189, 64, 228, 135, 189, 54, 148, 142, 61, 7, 146, 88, 60, 188, 135, 93, 62, 204, 196, 3, 61, 53, 228, 43, 190, 116, 28, 220, 188, 234, 170, 50, 191, 10, 163, 163, 59, 227, 132, 225, 190, 187, 134, 14, 62, 255, 157, 9, 59, 73, 187, 170, 190, 156, 95, 229, 190, 197, 158, 98, 186, 109, 54, 179, 188, 207, 49, 224, 60, 91, 147, 125, 191, 34, 116, 21, 62, 4, 251, 63, 190, 245, 194, 217, 190, 131, 194, 249, 61, 11, 141, 105, 62, 137, 128, 205, 62, 163, 206, 242, 61, 170, 8, 51, 57, 119, 90, 179, 61, 154, 165, 80, 62, 153, 100, 78, 189, 48, 3, 104, 62, 175, 238, 80, 62, 22, 176, 148, 190, 169, 111, 216, 189, 78, 102, 89, 191, 152, 185, 39, 190, 229, 212, 45, 191, 81, 212, 187, 190, 39, 100, 7, 190, 18, 24, 93, 62, 177, 157, 104, 61, 97, 191, 63, 188, 189, 50, 50, 191, 93, 113, 85, 187, 211, 132, 158, 62, 175, 17, 155, 191, 87, 19, 18, 191, 114, 41, 188, 190, 116, 64, 147, 62, 59, 61, 204, 190, 13, 45, 193, 190, 119, 34, 157, 60, 163, 42, 176, 62, 239, 103, 78, 62, 90, 40, 35, 190, 223, 193, 101, 60, 108, 102, 36, 189, 74, 214, 18, 190, 176, 6, 164, 189, 210, 62, 216, 61, 199, 137, 208, 61, 233, 20, 103, 61, 254, 42, 252, 62, 201, 237, 154, 62, 95, 203, 166, 190, 57, 205, 228, 190, 124, 203, 212, 191, 48, 212, 145, 61, 206, 243, 103, 190, 47, 120, 111, 191, 31, 249, 191, 62, 99, 64, 114, 62, 30, 117, 127, 62, 94, 102, 255, 188, 197, 236, 223, 189, 6, 206, 14, 62, 80, 186, 225, 188, 116, 208, 63, 60, 238, 72, 195, 188, 206, 70, 11, 190, 128, 60, 189, 61, 98, 95, 164, 189, 219, 32, 19, 190, 41, 249, 226, 189, 110, 102, 79, 60, 42, 247, 16, 61, 54, 179, 132, 60, 115, 188, 159, 189, 178, 144, 193, 61, 142, 109, 100, 188, 52, 231, 164, 61, 127, 11, 6, 190, 176, 219, 3, 62, 46, 249, 8, 61, 217, 71, 146, 61, 139, 65, 185, 189, 184, 155, 99, 61, 105, 91, 37, 190, 82, 147, 255, 189, 120, 59, 0, 190, 231, 117, 249, 61, 42, 6, 162, 61, 60, 217, 3, 61, 16, 209, 84, 61, 135, 23, 34, 190, 42, 121, 51, 190, 84, 158, 250, 190, 134, 4, 65, 62, 154, 166, 64, 62, 181, 181, 116, 190, 130, 89, 159, 190, 145, 25, 141, 190, 1, 37, 13, 63, 190, 55, 240, 188, 240, 79, 202, 190, 40, 80, 24, 61, 97, 31, 154, 190, 241, 212, 30, 190, 223, 90, 248, 60, 143, 153, 112, 62, 59, 30, 174, 61, 143, 209, 209, 189, 217, 84, 111, 189, 40, 230, 32, 190, 160, 44, 182, 61, 14, 158, 63, 61, 55, 175, 224, 189, 193, 220, 41, 62, 86, 54, 128, 61, 16, 198, 251, 189, 194, 171, 34, 62, 231, 221, 76, 189, 230, 249, 229, 190, 85, 235, 93, 190, 55, 228, 29, 191, 183, 115, 209, 190, 185, 114, 253, 61, 165, 134, 29, 62, 176, 161, 135, 190, 142, 132, 104, 190, 216, 28, 75, 61, 5, 85, 139, 61, 88, 238, 28, 60, 225, 14, 221, 190, 108, 150, 7, 190, 25, 188, 16, 190, 141, 159, 101, 190, 197, 108, 201, 190, 204, 215, 42, 62, 142, 109, 89, 62, 229, 71, 132, 62, 114, 228, 165, 62, 178, 119, 78, 62, 217, 219, 151, 61, 77, 183, 189, 61, 60, 31, 140, 191, 33, 89, 41, 62, 17, 179, 128, 191, 225, 80, 207, 190, 12, 11, 14, 189, 41, 165, 62, 61, 93, 171, 162, 62, 203, 203, 3, 60, 192, 222, 149, 60, 232, 233, 220, 61, 54, 11, 231, 189, 160, 250, 239, 62, 147, 70, 113, 61, 123, 171, 25, 190, 95, 207, 41, 62, 220, 200, 58, 61, 29, 245, 154, 189, 141, 172, 107, 61, 46, 109, 252, 189, 17, 165, 162, 189, 119, 196, 182, 189, 209, 87, 250, 189, 40, 80, 68, 61, 138, 151, 6, 62, 223, 219, 127, 61, 0, 56, 175, 189, 210, 219, 44, 190, 171, 208, 244, 61, 187, 167, 198, 189, 238, 41, 34, 190, 101, 246, 108, 189, 178, 180, 11, 62, 133, 177, 218, 61, 54, 44, 153, 61, 171, 101, 8, 190, 34, 189, 2, 59, 127, 136, 130, 189, 179, 108, 252, 60, 134, 243, 52, 188, 226, 225, 119, 188, 5, 71, 158, 189, 58, 253, 54, 61, 227, 202, 190, 189, 120, 44, 10, 62, 251, 204, 198, 189, 209, 65, 47, 190, 131, 244, 83, 62, 85, 135, 219, 190, 185, 171, 181, 189, 73, 106, 236, 61, 91, 225, 51, 190, 73, 225, 215, 189, 27, 200, 162, 190, 165, 212, 47, 61, 1, 223, 142, 190, 66, 127, 85, 189, 175, 39, 138, 59, 124, 65, 236, 61, 17, 31, 176, 62, 120, 232, 205, 60, 218, 177, 211, 62, 138, 156, 104, 62, 51, 214, 13, 190, 103, 141, 217, 188, 100, 247, 166, 190, 146, 14, 18, 62, 86, 212, 153, 190, 18, 160, 26, 191, 213, 145, 214, 188, 99, 193, 189, 190, 48, 183, 149, 62, 156, 177, 169, 60, 202, 232, 132, 62, 0, 66, 115, 61, 84, 228, 116, 189, 37, 115, 151, 62, 67, 93, 5, 188, 4, 200, 238, 61, 163, 254, 90, 188, 51, 99, 70, 191, 137, 56, 82, 61, 77, 146, 71, 62, 169, 255, 196, 190, 221, 205, 237, 190, 11, 192, 244, 190, 96, 96, 40, 62, 17, 199, 8, 191, 161, 19, 42, 191, 151, 162, 11, 62, 51, 75, 20, 60, 49, 145, 69, 188, 135, 98, 60, 186, 144, 129, 158, 62, 204, 133, 233, 62, 185, 166, 189, 189, 84, 196, 193, 190, 51, 72, 47, 60, 168, 241, 47, 61, 244, 168, 12, 62, 157, 228, 201, 189, 29, 147, 30, 61, 158, 217, 210, 190, 138, 17, 48, 62, 71, 60, 99, 190, 125, 26, 32, 62, 225, 174, 96, 190, 235, 217, 203, 190, 75, 52, 185, 62, 103, 40, 99, 62, 23, 58, 219, 61, 47, 183, 128, 190, 207, 224, 201, 62, 149, 187, 2, 191, 146, 73, 137, 189, 140, 19, 112, 61, 117, 20, 129, 62, 33, 176, 110, 62, 238, 96, 155, 190, 214, 150, 93, 62, 209, 81, 17, 63, 112, 159, 35, 61, 41, 217, 10, 62, 159, 26, 3, 63, 42, 89, 1, 191, 66, 69, 9, 190, 190, 255, 142, 190, 104, 78, 79, 62, 212, 56, 124, 62, 180, 224, 252, 61, 184, 165, 55, 62, 71, 32, 206, 60, 180, 254, 158, 188, 77, 93, 5, 189, 246, 51, 118, 62, 207, 252, 183, 190, 53, 203, 29, 61, 10, 84, 182, 190, 187, 52, 226, 62, 35, 93, 202, 62, 192, 35, 146, 62, 92, 100, 73, 190, 237, 154, 168, 190, 150, 6, 91, 60, 248, 20, 73, 62, 10, 148, 6, 191, 10, 175, 217, 190, 102, 253, 163, 190, 242, 40, 62, 62, 1, 31, 246, 60, 27, 123, 8, 191, 255, 218, 84, 190, 16, 15, 178, 61, 152, 28, 154, 61, 182, 124, 241, 61, 42, 51, 178, 62, 190, 88, 5, 190, 246, 205, 175, 190, 63, 183, 104, 189, 131, 165, 212, 61, 201, 155, 59, 62, 101, 100, 40, 190, 196, 95, 103, 61, 53, 171, 243, 61, 30, 160, 33, 62, 4, 132, 53, 62, 188, 162, 97, 189, 91, 117, 57, 190, 184, 155, 132, 61, 204, 245, 148, 190, 124, 227, 218, 190, 210, 186, 162, 62, 151, 47, 194, 62, 90, 177, 142, 190, 174, 174, 58, 191, 120, 76, 132, 61, 233, 147, 65, 189, 127, 129, 7, 62, 117, 70, 10, 190, 44, 206, 130, 189, 107, 247, 146, 189, 73, 187, 237, 189, 88, 11, 64, 189, 102, 90, 120, 61, 185, 101, 244, 61, 170, 9, 81, 189, 138, 238, 147, 188, 143, 17, 29, 190, 71, 67, 6, 62, 135, 213, 0, 189, 19, 143, 161, 189, 142, 136, 113, 188, 16, 151, 146, 61, 182, 239, 19, 190, 142, 216, 229, 61, 154, 246, 7, 61, 73, 146, 82, 188, 72, 71, 87, 60, 172, 119, 9, 190, 19, 4, 230, 61, 148, 75, 98, 60, 86, 137, 22, 190, 173, 44, 12, 190, 147, 224, 254, 189, 1, 250, 32, 189, 134, 39, 190, 189, 113, 143, 152, 61, 180, 87, 159, 190, 171, 108, 63, 189, 145, 86, 83, 191, 212, 71, 141, 190, 68, 177, 171, 189, 63, 98, 166, 62, 115, 158, 165, 189, 103, 96, 21, 190, 23, 230, 37, 191, 162, 90, 252, 60, 218, 71, 196, 61, 136, 148, 79, 61, 4, 84, 158, 61, 233, 171, 23, 190, 150, 107, 49, 62, 203, 235, 92, 62, 63, 152, 151, 61, 106, 210, 167, 189, 243, 196, 198, 190, 19, 106, 85, 62, 43, 171, 98, 191, 187, 167, 73, 62, 213, 237, 4, 190, 246, 230, 201, 189, 161, 49, 195, 189, 168, 175, 86, 186, 33, 71, 52, 62, 36, 217, 104, 190, 19, 77, 112, 60, 102, 157, 203, 62, 134, 105, 173, 189, 156, 181, 100, 190, 91, 13, 187, 190, 251, 60, 179, 62, 4, 106, 81, 190, 22, 178, 3, 190, 41, 123, 243, 61, 84, 240, 87, 61, 208, 93, 24, 190, 39, 87, 123, 60, 9, 17, 72, 188, 154, 170, 147, 62, 63, 217, 96, 61, 50, 165, 16, 62, 165, 34, 161, 62, 224, 185, 228, 190, 211, 46, 252, 189, 17, 57, 143, 190, 252, 113, 104, 188, 37, 162, 97, 190, 139, 59, 7, 62, 80, 181, 79, 62, 167, 242, 175, 62, 143, 170, 146, 62, 152, 221, 104, 62, 145, 122, 191, 189, 170, 15, 101, 190, 122, 217, 251, 189, 80, 206, 120, 190, 111, 45, 36, 61, 21, 32, 150, 60, 87, 64, 158, 62, 2, 208, 164, 189, 50, 160, 155, 61, 156, 226, 244, 60, 240, 145, 79, 191, 174, 151, 79, 60, 84, 149, 74, 62, 83, 58, 1, 189, 226, 19, 144, 190, 90, 253, 4, 191, 223, 211, 134, 62, 110, 231, 3, 191, 147, 187, 194, 190, 3, 252, 35, 62, 25, 64, 20, 190, 236, 54, 234, 59, 69, 160, 180, 62, 232, 149, 196, 62, 181, 167, 139, 62, 139, 44, 109, 190, 88, 138, 89, 190, 216, 72, 145, 190, 55, 63, 126, 62, 63, 146, 136, 61, 23, 173, 62, 189, 20, 99, 33, 62, 101, 158, 110, 190, 77, 85, 49, 62, 187, 237, 208, 190, 25, 27, 104, 62, 29, 149, 182, 190, 129, 127, 71, 190, 149, 190, 179, 62, 39, 188, 92, 62, 73, 242, 13, 188, 201, 121, 157, 62, 129, 162, 163, 190, 102, 181, 153, 188, 142, 117, 12, 62, 86, 247, 253, 188, 53, 224, 210, 190, 34, 33, 4, 191, 30, 50, 38, 61, 168, 252, 189, 190, 230, 230, 130, 190, 76, 16, 191, 61, 20, 51, 154, 188, 162, 88, 204, 189, 93, 126, 7, 62, 172, 251, 226, 62, 249, 155, 14, 63, 73, 38, 49, 190, 228, 169, 158, 190, 134, 87, 172, 190, 212, 33, 54, 62, 137, 237, 56, 190, 231, 59, 243, 190, 157, 219, 32, 190, 149, 107, 190, 190, 245, 139, 145, 62, 84, 242, 161, 61, 123, 82, 142, 62, 43, 96, 181, 189, 103, 13, 43, 189, 149, 241, 187, 62, 16, 240, 45, 61, 140, 124, 11, 62, 175, 10, 118, 60, 62, 128, 48, 189, 18, 154, 29, 190, 200, 61, 11, 190, 34, 169, 48, 188, 111, 200, 26, 62, 237, 170, 44, 190, 67, 169, 152, 61, 81, 227, 48, 190, 26, 44, 211, 61, 122, 101, 254, 189, 135, 238, 145, 60, 218, 97, 121, 189, 151, 207, 203, 189, 45, 53, 160, 61, 192, 74, 232, 189, 57, 250, 58, 61, 104, 50, 10, 60, 141, 227, 37, 188, 231, 138, 230, 189, 67, 142, 191, 189, 5, 233, 228, 189, 31, 192, 7, 190, 72, 13, 23, 60, 61, 135, 195, 61, 78, 136, 43, 190, 232, 111, 255, 188, 164, 131, 200, 189, 239, 192, 186, 189, 152, 155, 85, 61, 20, 72, 3, 61, 173, 181, 6, 190, 45, 222, 141, 60, 167, 7, 114, 62, 172, 122, 61, 190, 24, 212, 5, 190, 52, 253, 181, 61, 49, 171, 182, 61, 86, 119, 188, 62, 192, 14, 12, 188, 45, 47, 70, 62, 136, 243, 161, 187, 163, 54, 252, 188, 73, 208, 143, 61, 212, 67, 200, 62, 37, 168, 13, 190, 206, 234, 138, 190, 54, 78, 24, 190, 71, 19, 154, 62, 223, 53, 47, 62, 79, 163, 49, 190, 83, 31, 222, 190, 131, 143, 3, 61, 153, 91, 89, 190, 138, 171, 184, 189, 99, 118, 202, 62, 216, 129, 172, 189, 160, 135, 135, 61, 68, 103, 138, 189, 127, 107, 191, 61, 254, 68, 197, 61, 153, 224, 144, 190, 126, 86, 110, 190, 56, 99, 212, 189, 61, 46, 234, 189, 14, 4, 199, 62, 255, 75, 54, 62, 111, 241, 8, 190, 157, 34, 86, 60, 218, 209, 97, 190, 142, 242, 202, 62, 250, 119, 199, 62, 152, 206, 155, 62, 136, 121, 30, 61, 4, 248, 75, 61, 78, 114, 83, 190, 232, 109, 101, 189, 17, 226, 32, 190, 103, 127, 68, 190, 73, 142, 124, 190, 59, 176, 129, 61, 79, 221, 16, 62, 174, 181, 48, 61, 158, 162, 133, 191, 0, 220, 244, 189, 63, 99, 123, 191, 72, 49, 93, 190, 69, 11, 153, 62, 16, 202, 13, 191, 67, 226, 174, 190, 94, 206, 26, 62, 249, 144, 19, 190, 249, 137, 183, 189, 141, 192, 134, 62, 70, 122, 46, 190, 114, 213, 106, 61, 65, 100, 11, 190, 117, 65, 27, 188, 191, 75, 214, 60, 197, 129, 39, 190, 115, 241, 0, 61, 253, 228, 20, 62, 158, 230, 84, 61, 12, 109, 139, 189, 21, 99, 211, 189, 254, 102, 247, 189, 112, 89, 145, 61, 215, 47, 2, 61, 112, 113, 23, 189, 246, 226, 132, 61, 117, 1, 49, 190, 49, 95, 123, 189, 153, 101, 11, 190, 168, 188, 153, 60, 219, 145, 208, 61, 101, 171, 30, 190, 126, 116, 28, 60, 54, 52, 211, 56, 246, 245, 162, 189, 211, 131, 166, 61, 72, 112, 49, 190, 50, 201, 196, 189, 185, 238, 13, 190, 254, 118, 249, 60, 147, 132, 13, 190, 202, 105, 205, 61, 89, 7, 78, 189, 0, 196, 60, 189, 124, 60, 198, 188, 35, 158, 87, 62, 132, 144, 117, 190, 239, 197, 76, 190, 1, 254, 155, 186, 147, 158, 124, 188, 218, 173, 158, 62, 157, 46, 188, 61, 30, 173, 163, 62, 115, 120, 149, 62, 211, 245, 162, 60, 174, 63, 84, 62, 92, 105, 215, 62, 34, 107, 206, 190, 52, 153, 195, 190, 82, 41, 159, 190, 197, 191, 175, 62, 248, 107, 213, 62, 78, 202, 224, 59, 152, 179, 33, 190, 140, 71, 102, 189, 56, 249, 26, 190, 204, 204, 199, 59, 53, 34, 172, 62, 184, 158, 82, 190, 46, 28, 179, 60, 77, 181, 252, 189, 67, 162, 203, 61, 128, 143, 46, 190, 124, 209, 164, 190, 65, 154, 37, 190, 49, 86, 185, 61, 198, 115, 137, 190, 71, 41, 160, 62, 125, 30, 97, 191, 179, 227, 124, 190, 179, 7, 199, 189, 120, 86, 144, 62, 198, 95, 224, 60, 225, 1, 70, 190, 157, 245, 86, 190, 255, 227, 241, 62, 197, 124, 58, 190, 99, 185, 32, 62, 136, 254, 181, 62, 174, 202, 150, 190, 114, 95, 183, 190, 104, 39, 135, 60, 84, 216, 204, 62, 129, 235, 61, 62, 29, 239, 144, 189, 255, 189, 9, 62, 149, 165, 146, 61, 167, 27, 72, 62, 158, 5, 185, 61, 170, 250, 109, 189, 104, 62, 141, 189, 103, 33, 20, 189, 76, 99, 45, 190, 169, 164, 151, 62, 156, 26, 128, 62, 27, 40, 24, 62, 107, 61, 15, 190, 60, 134, 117, 191, 72, 170, 32, 190, 123, 63, 9, 62, 82, 219, 218, 188, 164, 148, 38, 190, 58, 101, 235, 60, 217, 202, 246, 59, 217, 136, 68, 190, 15, 214, 36, 190, 137, 250, 104, 61, 233, 184, 143, 62, 179, 211, 223, 61, 177, 51, 33, 62, 88, 26, 14, 63, 213, 30, 168, 190, 132, 29, 172, 190, 25, 30, 99, 190, 210, 236, 186, 61, 194, 184, 64, 186, 163, 46, 204, 61, 151, 48, 54, 62, 199, 97, 135, 62, 202, 248, 138, 62, 162, 16, 103, 62, 91, 47, 251, 188, 139, 83, 7, 190, 25, 47, 23, 62, 73, 163, 132, 189, 235, 171, 12, 61, 77, 162, 228, 58, 192, 26, 132, 62, 32, 227, 41, 190, 29, 1, 151, 189, 113, 157, 9, 190, 52, 36, 156, 190, 29, 188, 225, 189, 167, 95, 80, 62, 143, 37, 0, 62, 31, 17, 62, 190, 92, 15, 208, 189, 108, 163, 222, 61, 18, 126, 23, 191, 11, 33, 179, 188, 91, 130, 129, 60, 249, 59, 72, 188, 25, 14, 215, 60, 114, 128, 4, 190, 176, 210, 40, 62, 218, 193, 108, 62, 11, 99, 131, 189, 50, 110, 168, 190, 49, 246, 28, 190, 198, 196, 110, 59, 209, 249, 174, 189, 212, 186, 32, 62, 247, 36, 65, 62, 189, 144, 18, 190, 44, 144, 66, 62, 119, 148, 57, 188, 104, 15, 34, 62, 116, 181, 168, 188, 251, 216, 108, 190, 251, 82, 224, 62, 251, 17, 33, 62, 34, 4, 216, 187, 224, 122, 152, 61, 203, 0, 135, 62, 195, 97, 150, 189, 83, 86, 36, 61, 156, 121, 31, 189, 239, 1, 240, 190, 87, 243, 40, 62, 186, 214, 165, 61, 220, 115, 134, 61, 226, 119, 142, 61, 37, 172, 6, 62, 121, 115, 51, 62, 65, 37, 7, 63, 202, 224, 26, 191, 93, 244, 169, 189, 213, 142, 250, 189, 136, 161, 174, 61, 125, 93, 27, 190, 87, 122, 217, 61, 86, 149, 58, 190, 200, 42, 42, 190, 98, 235, 177, 190, 93, 100, 65, 190, 130, 255, 89, 60, 197, 30, 118, 190, 42, 13, 16, 189, 55, 203, 57, 62, 229, 207, 95, 62, 220, 74, 229, 190, 35, 28, 250, 62, 216, 158, 150, 189, 209, 72, 170, 61, 217, 40, 8, 190, 237, 14, 76, 60, 93, 185, 187, 60, 163, 55, 249, 61, 208, 217, 191, 189, 74, 73, 113, 189, 55, 237, 232, 189, 62, 53, 16, 62, 29, 44, 17, 190, 98, 136, 4, 190, 125, 2, 18, 62, 39, 164, 174, 61, 173, 203, 214, 189, 87, 220, 179, 61, 145, 141, 80, 189, 99, 224, 25, 190, 14, 55, 32, 190, 76, 89, 218, 61, 58, 199, 164, 61, 99, 65, 168, 189, 68, 100, 45, 190, 254, 99, 16, 190, 36, 17, 220, 188, 94, 151, 27, 188, 236, 105, 31, 190, 153, 254, 52, 190, 216, 76, 252, 189, 72, 26, 212, 189, 213, 191, 176, 189, 208, 117, 3, 62, 169, 161, 140, 189, 211, 22, 205, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 95, 27, 190, 5, 212, 45, 189, 7, 130, 12, 189, 168, 191, 153, 62, 87, 204, 125, 189, 154, 255, 193, 61, 42, 140, 6, 61, 33, 112, 61, 61, 13, 82, 162, 62, 224, 212, 135, 189, 131, 67, 184, 189, 112, 213, 37, 62, 23, 221, 32, 189, 191, 86, 214, 58, 228, 62, 2, 62, 105, 36, 234, 188, 94, 33, 242, 188, 212, 11, 202, 189, 73, 73, 61, 62, 231, 205, 171, 62, 221, 204, 172, 61, 27, 137, 225, 189, 79, 37, 239, 189, 164, 243, 145, 189, 249, 101, 145, 190, 214, 153, 41, 190, 83, 14, 18, 189, 17, 251, 11, 62, 194, 188, 202, 61, 244, 194, 136, 189, 191, 24, 193, 61, 208, 27, 50, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {54, 152, 136, 61, 99, 111, 252, 189, 183, 203, 56, 63, 81, 181, 48, 62, 101, 55, 211, 62, 57, 95, 149, 61, 199, 241, 82, 62, 59, 1, 179, 190, 94, 171, 149, 191, 106, 213, 192, 60, 211, 94, 166, 62, 243, 35, 24, 191, 131, 117, 40, 190, 246, 158, 161, 190, 213, 182, 170, 190, 184, 95, 18, 63, 138, 39, 226, 62, 60, 247, 141, 189, 174, 237, 205, 189, 193, 137, 164, 62, 96, 245, 232, 190, 130, 250, 155, 190, 71, 246, 203, 61, 3, 239, 88, 62, 84, 169, 78, 191, 234, 178, 222, 61, 184, 112, 179, 62, 68, 132, 247, 62, 90, 105, 110, 62, 57, 177, 245, 189, 234, 200, 114, 62, 176, 159, 174, 189, 176, 40, 236, 61, 200, 249, 165, 61, 59, 190, 20, 63, 46, 204, 83, 190, 214, 150, 141, 189, 252, 78, 222, 61, 85, 154, 232, 189, 167, 64, 136, 190, 195, 204, 152, 62, 137, 219, 118, 61, 182, 102, 177, 61, 172, 230, 25, 61, 153, 207, 96, 61, 45, 140, 163, 189, 253, 238, 30, 190, 177, 154, 61, 62, 182, 52, 11, 190, 4, 57, 88, 189, 57, 106, 39, 191, 131, 111, 170, 187, 102, 242, 50, 61, 221, 34, 13, 62, 19, 40, 241, 189, 49, 250, 117, 61, 121, 181, 50, 62, 127, 12, 175, 61, 242, 17, 30, 62, 88, 208, 69, 190, 94, 100, 170, 189, 146, 70, 51, 190, 16, 20, 174, 190, 89, 124, 19, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {63, 226, 182, 189, 150, 205, 208, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {246, 254, 19, 63, 64, 152, 46, 62, 225, 153, 177, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {223, 7, 192, 191, 9, 167, 79, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0088/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}