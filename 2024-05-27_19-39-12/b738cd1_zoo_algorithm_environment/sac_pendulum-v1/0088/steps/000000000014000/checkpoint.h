// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {88, 220, 50, 63, 53, 38, 144, 60, 193, 41, 137, 62, 203, 216, 171, 62, 41, 115, 110, 191, 222, 6, 82, 190, 200, 71, 142, 190, 29, 218, 232, 191, 17, 174, 211, 190, 75, 69, 34, 191, 101, 91, 213, 62, 212, 29, 92, 191, 85, 105, 217, 61, 242, 166, 11, 63, 205, 170, 127, 63, 236, 252, 10, 191, 17, 135, 157, 63, 163, 31, 123, 62, 39, 182, 244, 62, 44, 98, 116, 191, 104, 207, 4, 191, 238, 165, 18, 191, 25, 32, 118, 191, 27, 35, 162, 62, 6, 183, 42, 63, 118, 172, 169, 190, 222, 164, 142, 190, 79, 73, 201, 189, 103, 33, 126, 190, 177, 227, 207, 62, 52, 25, 117, 188, 6, 108, 141, 191, 252, 226, 131, 190, 199, 37, 147, 189, 214, 83, 23, 191, 251, 90, 156, 59, 231, 144, 59, 63, 185, 70, 71, 191, 86, 3, 127, 189, 28, 170, 40, 63, 177, 60, 144, 63, 150, 239, 162, 62, 108, 133, 19, 61, 37, 159, 82, 63, 180, 128, 195, 190, 10, 169, 68, 62, 252, 89, 86, 63, 189, 105, 179, 190, 182, 66, 4, 63, 86, 196, 170, 188, 66, 50, 29, 191, 44, 4, 47, 62, 192, 249, 234, 61, 254, 141, 238, 190, 127, 181, 142, 190, 97, 33, 122, 191, 136, 134, 113, 190, 157, 138, 228, 189, 190, 165, 202, 62, 200, 224, 198, 61, 253, 216, 212, 190, 252, 28, 123, 191, 242, 76, 112, 190, 143, 209, 131, 191, 206, 179, 31, 190, 86, 29, 130, 188, 126, 93, 77, 191, 52, 72, 129, 62, 237, 243, 85, 189, 225, 220, 69, 62, 205, 130, 155, 62, 97, 243, 210, 190, 35, 45, 52, 63, 42, 199, 147, 63, 181, 196, 244, 62, 169, 127, 2, 62, 250, 89, 195, 63, 32, 103, 3, 63, 149, 138, 240, 62, 208, 56, 21, 188, 69, 207, 18, 63, 60, 118, 224, 61, 189, 91, 93, 191, 146, 166, 201, 62, 235, 42, 228, 189, 36, 236, 202, 63, 13, 127, 153, 62, 28, 43, 97, 63, 12, 59, 140, 62, 92, 64, 185, 189, 25, 221, 215, 190, 89, 149, 86, 190, 97, 180, 209, 62, 54, 98, 169, 190, 73, 42, 140, 191, 71, 41, 190, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {210, 92, 113, 191, 43, 148, 129, 189, 223, 28, 85, 188, 250, 1, 152, 61, 34, 93, 105, 62, 94, 214, 4, 191, 225, 16, 158, 190, 98, 196, 251, 190, 146, 107, 92, 191, 95, 246, 94, 190, 221, 160, 208, 62, 75, 119, 29, 63, 95, 154, 137, 189, 151, 115, 179, 190, 105, 146, 208, 60, 245, 247, 59, 62, 24, 206, 192, 61, 151, 149, 229, 189, 254, 244, 193, 62, 155, 111, 224, 62, 17, 145, 219, 62, 136, 133, 15, 190, 24, 219, 35, 63, 215, 241, 154, 190, 25, 30, 227, 61, 97, 131, 66, 62, 180, 231, 137, 62, 155, 172, 97, 188, 102, 239, 96, 190, 66, 235, 2, 190, 249, 53, 240, 190, 152, 116, 75, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 140, 217, 189, 15, 21, 32, 62, 198, 253, 40, 190, 205, 189, 95, 59, 26, 98, 228, 60, 58, 44, 171, 189, 153, 13, 47, 59, 93, 48, 246, 188, 96, 225, 7, 190, 233, 144, 207, 189, 21, 239, 128, 189, 108, 94, 205, 187, 240, 31, 42, 190, 129, 197, 53, 188, 190, 51, 4, 190, 27, 24, 98, 60, 233, 57, 169, 188, 159, 94, 36, 61, 184, 52, 162, 189, 25, 128, 12, 189, 85, 112, 37, 60, 198, 168, 177, 189, 140, 67, 1, 61, 243, 39, 206, 189, 16, 147, 180, 61, 59, 0, 63, 189, 225, 28, 64, 190, 182, 22, 208, 189, 209, 191, 17, 62, 96, 90, 134, 189, 127, 133, 199, 188, 189, 219, 33, 190, 110, 108, 85, 189, 98, 78, 46, 191, 243, 185, 139, 190, 157, 85, 222, 61, 245, 190, 117, 61, 62, 1, 26, 190, 223, 37, 9, 191, 139, 80, 142, 190, 216, 253, 241, 190, 0, 170, 189, 190, 208, 158, 43, 190, 166, 190, 37, 190, 186, 65, 230, 60, 83, 250, 67, 62, 158, 209, 221, 62, 177, 17, 129, 62, 95, 150, 135, 60, 204, 70, 84, 190, 97, 159, 66, 191, 156, 26, 55, 61, 13, 17, 196, 190, 8, 166, 4, 190, 64, 177, 114, 62, 57, 244, 223, 190, 222, 78, 49, 62, 145, 238, 72, 62, 55, 182, 114, 188, 151, 104, 181, 190, 227, 255, 219, 189, 243, 54, 199, 62, 148, 111, 106, 190, 138, 161, 228, 187, 6, 95, 221, 190, 174, 106, 230, 62, 236, 202, 170, 191, 250, 86, 1, 190, 169, 242, 23, 60, 80, 35, 146, 62, 41, 222, 146, 62, 24, 55, 228, 189, 51, 98, 43, 63, 28, 219, 185, 62, 10, 59, 91, 60, 116, 216, 48, 62, 24, 57, 15, 63, 195, 70, 58, 191, 96, 91, 149, 189, 251, 131, 8, 191, 92, 243, 92, 189, 187, 200, 153, 62, 246, 115, 208, 62, 220, 159, 159, 189, 11, 145, 39, 62, 17, 159, 150, 189, 121, 10, 63, 62, 17, 122, 254, 62, 53, 123, 156, 190, 233, 228, 232, 61, 34, 59, 175, 189, 245, 59, 178, 61, 136, 44, 150, 62, 114, 200, 78, 190, 252, 106, 13, 190, 17, 125, 173, 191, 49, 64, 26, 60, 247, 198, 73, 62, 198, 3, 171, 190, 77, 111, 38, 190, 55, 167, 232, 188, 127, 26, 215, 61, 154, 99, 22, 190, 91, 95, 95, 190, 85, 76, 16, 190, 38, 197, 143, 62, 103, 54, 20, 61, 208, 82, 108, 62, 254, 233, 185, 62, 116, 46, 245, 190, 141, 45, 13, 190, 94, 218, 192, 61, 31, 31, 26, 62, 110, 190, 1, 61, 218, 70, 193, 62, 203, 116, 96, 62, 157, 206, 11, 61, 143, 155, 89, 62, 133, 217, 194, 188, 26, 99, 169, 190, 179, 122, 70, 61, 29, 116, 138, 61, 165, 13, 156, 189, 44, 215, 246, 188, 27, 210, 51, 62, 24, 174, 26, 62, 180, 246, 225, 189, 40, 123, 216, 189, 108, 114, 65, 189, 179, 114, 92, 190, 147, 152, 10, 61, 33, 238, 161, 62, 39, 238, 44, 191, 121, 64, 135, 191, 162, 118, 59, 190, 121, 157, 151, 63, 185, 203, 201, 62, 52, 203, 146, 189, 181, 107, 186, 61, 162, 219, 167, 60, 40, 70, 180, 62, 134, 50, 55, 61, 186, 192, 94, 62, 93, 121, 25, 62, 134, 95, 27, 62, 57, 29, 243, 61, 45, 246, 187, 188, 242, 192, 1, 61, 17, 8, 159, 188, 119, 150, 188, 189, 63, 143, 198, 61, 76, 242, 35, 62, 188, 165, 240, 61, 225, 169, 199, 190, 165, 180, 226, 189, 247, 96, 34, 189, 63, 0, 74, 190, 209, 47, 19, 62, 26, 107, 147, 58, 166, 156, 181, 62, 66, 138, 195, 188, 171, 236, 133, 190, 0, 75, 60, 190, 24, 70, 121, 189, 144, 120, 170, 61, 227, 108, 65, 61, 229, 115, 201, 61, 98, 121, 24, 190, 230, 61, 137, 188, 18, 31, 198, 190, 182, 36, 103, 190, 78, 155, 91, 189, 202, 62, 130, 190, 78, 14, 152, 190, 103, 72, 21, 190, 92, 94, 185, 189, 223, 225, 84, 61, 203, 125, 30, 61, 191, 24, 164, 189, 87, 112, 175, 189, 15, 48, 35, 189, 200, 188, 165, 61, 170, 26, 7, 62, 159, 199, 208, 189, 81, 167, 13, 191, 29, 12, 171, 189, 184, 212, 15, 191, 152, 9, 99, 190, 44, 53, 129, 61, 78, 69, 64, 190, 153, 117, 175, 190, 166, 77, 214, 190, 177, 160, 226, 189, 153, 175, 54, 188, 87, 211, 155, 191, 92, 170, 187, 188, 33, 88, 9, 62, 43, 111, 183, 62, 236, 229, 8, 62, 97, 152, 128, 190, 86, 15, 161, 189, 37, 157, 170, 62, 47, 99, 227, 60, 177, 50, 190, 61, 88, 7, 98, 62, 109, 115, 73, 190, 195, 195, 33, 191, 41, 19, 195, 190, 253, 139, 47, 62, 28, 79, 183, 189, 82, 193, 84, 189, 249, 41, 148, 190, 153, 19, 183, 61, 238, 127, 184, 61, 132, 28, 58, 62, 5, 9, 39, 190, 118, 213, 161, 189, 184, 149, 75, 61, 190, 42, 177, 187, 7, 20, 65, 62, 169, 254, 157, 61, 137, 38, 75, 190, 184, 209, 81, 189, 78, 57, 160, 191, 10, 163, 163, 59, 17, 42, 162, 190, 150, 180, 94, 62, 134, 52, 222, 188, 4, 226, 95, 190, 201, 77, 76, 191, 50, 125, 195, 60, 96, 42, 159, 189, 200, 230, 150, 190, 247, 105, 53, 191, 158, 124, 100, 62, 146, 138, 73, 188, 62, 156, 204, 189, 132, 149, 245, 61, 207, 55, 39, 62, 155, 135, 176, 62, 171, 109, 237, 61, 28, 48, 177, 188, 114, 227, 52, 62, 34, 221, 74, 62, 74, 229, 234, 60, 196, 100, 32, 62, 48, 212, 98, 62, 244, 94, 169, 190, 130, 54, 226, 189, 61, 215, 166, 191, 246, 172, 169, 190, 142, 248, 98, 191, 24, 210, 23, 191, 192, 60, 132, 190, 132, 75, 235, 62, 193, 60, 158, 61, 97, 191, 63, 188, 240, 89, 37, 191, 215, 124, 149, 187, 56, 198, 155, 62, 181, 190, 138, 191, 63, 177, 105, 191, 108, 143, 177, 190, 153, 73, 167, 61, 99, 205, 65, 191, 178, 88, 88, 190, 75, 213, 21, 61, 98, 128, 201, 62, 43, 165, 182, 62, 62, 51, 11, 190, 220, 15, 162, 188, 105, 166, 129, 189, 244, 99, 241, 189, 14, 30, 147, 189, 254, 34, 1, 62, 45, 226, 228, 61, 217, 98, 154, 61, 245, 67, 228, 62, 201, 214, 163, 62, 162, 35, 172, 190, 142, 239, 166, 190, 31, 62, 12, 192, 201, 111, 92, 62, 239, 119, 247, 190, 3, 140, 140, 191, 231, 62, 157, 62, 127, 171, 210, 62, 251, 190, 104, 62, 94, 102, 255, 188, 19, 145, 224, 189, 61, 62, 3, 62, 111, 171, 251, 188, 116, 208, 63, 60, 159, 114, 221, 188, 15, 17, 34, 190, 128, 60, 189, 61, 136, 205, 168, 189, 219, 32, 19, 190, 75, 249, 251, 189, 9, 127, 91, 60, 123, 241, 17, 61, 58, 177, 163, 60, 88, 235, 167, 189, 41, 219, 190, 61, 148, 164, 103, 188, 146, 62, 144, 61, 229, 136, 21, 190, 144, 29, 1, 62, 140, 111, 101, 60, 104, 62, 129, 61, 38, 47, 221, 189, 221, 8, 52, 61, 27, 200, 30, 190, 224, 50, 254, 189, 120, 59, 0, 190, 231, 117, 249, 61, 157, 240, 166, 61, 146, 241, 69, 61, 16, 209, 84, 61, 93, 171, 64, 190, 42, 121, 51, 190, 209, 177, 235, 190, 141, 79, 173, 62, 213, 148, 81, 62, 72, 84, 212, 190, 252, 20, 15, 191, 2, 135, 117, 190, 107, 123, 101, 63, 5, 80, 199, 62, 73, 115, 175, 190, 158, 154, 193, 61, 232, 249, 164, 190, 69, 241, 45, 191, 46, 76, 26, 61, 94, 241, 99, 62, 29, 22, 80, 61, 34, 121, 243, 189, 252, 2, 101, 189, 252, 169, 150, 189, 108, 83, 201, 189, 235, 44, 251, 61, 157, 79, 44, 61, 15, 51, 254, 61, 176, 120, 141, 61, 150, 144, 83, 190, 113, 11, 101, 186, 180, 230, 143, 189, 232, 229, 29, 190, 80, 84, 238, 190, 196, 171, 39, 191, 50, 30, 219, 190, 17, 244, 133, 62, 114, 153, 80, 62, 224, 249, 214, 190, 143, 160, 245, 190, 6, 219, 5, 62, 154, 81, 163, 61, 65, 102, 70, 190, 191, 18, 26, 191, 207, 114, 178, 189, 212, 187, 217, 190, 207, 213, 91, 190, 253, 74, 2, 191, 78, 76, 34, 62, 175, 230, 55, 62, 92, 96, 108, 62, 122, 165, 171, 62, 133, 215, 79, 62, 203, 163, 69, 61, 158, 126, 180, 61, 203, 217, 182, 191, 64, 99, 0, 62, 33, 245, 187, 191, 178, 38, 243, 190, 162, 64, 218, 188, 71, 215, 152, 61, 27, 51, 150, 62, 201, 251, 205, 58, 92, 39, 190, 60, 234, 189, 7, 62, 62, 87, 173, 190, 213, 85, 219, 62, 150, 10, 87, 61, 223, 147, 104, 190, 95, 207, 41, 62, 220, 200, 58, 61, 29, 245, 154, 189, 141, 172, 107, 61, 46, 109, 252, 189, 17, 165, 162, 189, 119, 196, 182, 189, 209, 87, 250, 189, 40, 80, 68, 61, 138, 151, 6, 62, 223, 219, 127, 61, 0, 56, 175, 189, 210, 219, 44, 190, 171, 208, 244, 61, 187, 167, 198, 189, 238, 41, 34, 190, 101, 246, 108, 189, 178, 180, 11, 62, 133, 177, 218, 61, 54, 44, 153, 61, 171, 101, 8, 190, 34, 189, 2, 59, 127, 136, 130, 189, 179, 108, 252, 60, 134, 243, 52, 188, 226, 225, 119, 188, 5, 71, 158, 189, 58, 253, 54, 61, 227, 202, 190, 189, 120, 44, 10, 62, 251, 204, 198, 189, 209, 65, 47, 190, 82, 212, 144, 62, 214, 147, 20, 191, 106, 142, 182, 190, 154, 108, 80, 62, 251, 37, 44, 190, 221, 104, 103, 190, 56, 188, 237, 190, 183, 184, 151, 61, 242, 252, 34, 191, 232, 229, 88, 189, 69, 253, 212, 189, 176, 182, 207, 61, 227, 32, 159, 62, 121, 30, 62, 60, 255, 182, 226, 62, 61, 110, 128, 62, 55, 188, 20, 190, 35, 0, 75, 188, 197, 148, 37, 191, 111, 197, 13, 62, 125, 181, 45, 191, 73, 7, 17, 191, 155, 47, 134, 61, 147, 84, 169, 190, 218, 200, 137, 62, 110, 68, 20, 61, 196, 25, 130, 62, 216, 23, 112, 61, 29, 231, 97, 190, 93, 103, 132, 62, 136, 16, 159, 188, 27, 171, 251, 60, 25, 179, 233, 61, 158, 113, 99, 191, 64, 91, 29, 190, 191, 16, 72, 62, 11, 200, 54, 190, 255, 157, 43, 191, 148, 88, 23, 191, 162, 208, 21, 62, 136, 53, 107, 191, 4, 3, 252, 190, 62, 179, 134, 61, 68, 126, 149, 187, 4, 252, 35, 188, 22, 184, 22, 61, 90, 126, 147, 62, 220, 76, 227, 62, 50, 246, 217, 189, 144, 28, 199, 190, 91, 10, 31, 190, 168, 157, 146, 61, 157, 131, 205, 188, 112, 208, 166, 189, 242, 26, 74, 61, 195, 121, 200, 190, 215, 186, 69, 62, 121, 94, 68, 190, 87, 97, 78, 62, 40, 118, 43, 189, 249, 58, 110, 191, 175, 128, 174, 62, 148, 206, 153, 62, 184, 81, 41, 189, 64, 65, 159, 190, 210, 160, 228, 62, 109, 218, 46, 191, 182, 157, 41, 190, 104, 114, 107, 61, 9, 200, 252, 62, 93, 227, 133, 62, 115, 3, 162, 190, 202, 85, 146, 62, 199, 94, 16, 63, 25, 230, 172, 61, 178, 131, 246, 61, 163, 206, 9, 63, 17, 48, 20, 191, 119, 25, 43, 190, 13, 92, 174, 190, 39, 161, 42, 62, 78, 105, 90, 62, 190, 238, 89, 62, 134, 67, 37, 62, 191, 253, 175, 61, 230, 241, 133, 189, 116, 165, 193, 189, 101, 49, 89, 62, 253, 45, 198, 190, 165, 179, 140, 188, 235, 204, 182, 190, 125, 179, 226, 62, 199, 225, 7, 63, 11, 249, 141, 62, 33, 194, 62, 190, 19, 33, 236, 190, 129, 250, 151, 60, 106, 207, 126, 62, 240, 140, 116, 191, 199, 230, 238, 190, 79, 138, 219, 190, 232, 193, 8, 62, 116, 179, 34, 62, 23, 186, 217, 190, 170, 201, 233, 190, 27, 44, 194, 61, 173, 8, 1, 62, 144, 213, 10, 62, 182, 204, 185, 62, 196, 29, 116, 190, 101, 178, 135, 190, 59, 193, 55, 189, 223, 78, 10, 62, 231, 209, 142, 62, 39, 116, 227, 188, 219, 231, 81, 61, 165, 104, 170, 62, 97, 74, 83, 62, 245, 53, 60, 62, 60, 184, 177, 187, 84, 36, 101, 190, 254, 206, 251, 189, 175, 58, 159, 190, 244, 32, 211, 190, 186, 31, 135, 62, 154, 230, 199, 62, 103, 218, 127, 190, 156, 216, 161, 191, 120, 76, 132, 61, 233, 147, 65, 189, 127, 129, 7, 62, 117, 70, 10, 190, 44, 206, 130, 189, 107, 247, 146, 189, 73, 187, 237, 189, 88, 11, 64, 189, 102, 90, 120, 61, 185, 101, 244, 61, 170, 9, 81, 189, 138, 238, 147, 188, 143, 17, 29, 190, 71, 67, 6, 62, 135, 213, 0, 189, 19, 143, 161, 189, 142, 136, 113, 188, 16, 151, 146, 61, 182, 239, 19, 190, 142, 216, 229, 61, 154, 246, 7, 61, 73, 146, 82, 188, 72, 71, 87, 60, 172, 119, 9, 190, 19, 4, 230, 61, 148, 75, 98, 60, 86, 137, 22, 190, 173, 44, 12, 190, 147, 224, 254, 189, 1, 250, 32, 189, 134, 39, 190, 189, 113, 143, 152, 61, 175, 110, 189, 190, 222, 29, 54, 188, 195, 196, 158, 191, 121, 103, 103, 190, 20, 77, 194, 60, 26, 52, 222, 62, 144, 246, 137, 189, 79, 22, 194, 190, 201, 182, 187, 190, 4, 240, 187, 189, 226, 177, 13, 62, 130, 156, 117, 61, 136, 42, 227, 61, 29, 10, 239, 189, 181, 47, 127, 61, 129, 236, 225, 61, 134, 64, 80, 61, 5, 190, 234, 189, 133, 165, 239, 190, 138, 138, 70, 62, 38, 255, 164, 191, 134, 111, 0, 62, 81, 207, 20, 190, 41, 132, 135, 189, 12, 210, 144, 189, 75, 207, 2, 61, 94, 212, 119, 62, 84, 64, 166, 190, 129, 131, 15, 59, 78, 93, 195, 62, 140, 217, 98, 190, 27, 218, 22, 190, 101, 26, 197, 190, 93, 82, 180, 62, 182, 177, 150, 190, 207, 206, 104, 190, 179, 240, 133, 61, 56, 126, 170, 189, 125, 119, 105, 190, 84, 16, 214, 61, 19, 13, 54, 190, 186, 156, 156, 62, 168, 168, 232, 61, 81, 226, 44, 62, 171, 240, 166, 62, 96, 145, 66, 191, 102, 29, 155, 189, 82, 64, 167, 190, 42, 152, 206, 189, 8, 163, 183, 190, 199, 55, 147, 62, 207, 7, 1, 62, 72, 230, 253, 62, 201, 54, 130, 62, 99, 156, 51, 62, 102, 61, 132, 190, 116, 181, 173, 190, 48, 128, 178, 190, 79, 40, 130, 190, 220, 11, 226, 61, 156, 243, 70, 190, 210, 141, 128, 62, 30, 86, 146, 189, 85, 35, 202, 59, 128, 187, 8, 189, 7, 73, 110, 191, 121, 28, 73, 190, 9, 55, 90, 62, 149, 237, 247, 60, 21, 122, 199, 190, 130, 4, 42, 191, 19, 66, 142, 62, 194, 71, 82, 191, 123, 96, 203, 190, 218, 19, 193, 61, 132, 95, 22, 190, 209, 47, 117, 60, 93, 93, 179, 62, 248, 7, 195, 62, 126, 231, 138, 62, 7, 12, 128, 190, 92, 145, 93, 190, 101, 133, 241, 190, 74, 252, 134, 62, 138, 61, 251, 189, 79, 141, 225, 188, 39, 209, 69, 62, 24, 19, 81, 190, 22, 251, 39, 62, 61, 45, 219, 190, 241, 180, 118, 62, 43, 67, 159, 190, 76, 50, 59, 191, 232, 89, 169, 62, 196, 116, 45, 62, 218, 180, 45, 190, 114, 203, 192, 62, 166, 85, 1, 191, 12, 196, 50, 190, 144, 234, 109, 62, 224, 48, 225, 188, 224, 73, 15, 191, 123, 233, 50, 191, 254, 248, 136, 61, 121, 194, 51, 191, 20, 35, 131, 190, 46, 88, 96, 189, 20, 164, 124, 189, 100, 239, 44, 190, 178, 94, 16, 62, 157, 30, 248, 62, 247, 184, 20, 63, 154, 211, 77, 190, 246, 125, 152, 190, 72, 156, 52, 191, 103, 108, 42, 62, 23, 204, 22, 191, 110, 57, 203, 190, 156, 21, 202, 188, 130, 169, 172, 190, 166, 45, 135, 62, 21, 89, 236, 61, 127, 75, 132, 62, 250, 68, 182, 189, 162, 192, 67, 190, 31, 53, 160, 62, 50, 200, 251, 60, 186, 190, 201, 61, 175, 10, 118, 60, 62, 128, 48, 189, 18, 154, 29, 190, 200, 61, 11, 190, 34, 169, 48, 188, 111, 200, 26, 62, 237, 170, 44, 190, 67, 169, 152, 61, 81, 227, 48, 190, 26, 44, 211, 61, 122, 101, 254, 189, 135, 238, 145, 60, 218, 97, 121, 189, 151, 207, 203, 189, 45, 53, 160, 61, 192, 74, 232, 189, 57, 250, 58, 61, 104, 50, 10, 60, 141, 227, 37, 188, 231, 138, 230, 189, 67, 142, 191, 189, 5, 233, 228, 189, 31, 192, 7, 190, 72, 13, 23, 60, 61, 135, 195, 61, 78, 136, 43, 190, 232, 111, 255, 188, 164, 131, 200, 189, 239, 192, 186, 189, 152, 155, 85, 61, 20, 72, 3, 61, 173, 181, 6, 190, 138, 253, 197, 188, 83, 236, 152, 62, 64, 97, 161, 190, 213, 187, 9, 190, 181, 130, 177, 61, 224, 163, 27, 61, 81, 152, 218, 62, 73, 77, 204, 61, 77, 226, 239, 62, 111, 103, 245, 60, 2, 188, 130, 186, 45, 24, 205, 61, 66, 87, 246, 62, 209, 103, 208, 190, 202, 80, 79, 190, 55, 247, 185, 189, 55, 90, 168, 62, 13, 115, 78, 62, 148, 119, 51, 190, 149, 13, 212, 190, 219, 56, 14, 187, 37, 87, 190, 190, 194, 197, 85, 190, 44, 102, 227, 62, 193, 87, 2, 190, 64, 248, 10, 190, 200, 199, 45, 187, 218, 187, 63, 62, 214, 123, 20, 190, 32, 127, 84, 190, 96, 68, 98, 190, 68, 95, 36, 190, 61, 46, 234, 189, 21, 236, 233, 62, 104, 58, 124, 62, 7, 240, 240, 189, 187, 163, 150, 61, 218, 209, 97, 190, 168, 14, 223, 62, 108, 141, 76, 61, 253, 212, 137, 62, 144, 23, 224, 61, 212, 191, 230, 61, 133, 211, 217, 189, 0, 205, 173, 61, 185, 211, 32, 190, 42, 235, 127, 190, 68, 230, 150, 190, 39, 114, 182, 61, 245, 251, 24, 62, 106, 8, 239, 61, 175, 116, 152, 191, 170, 130, 45, 189, 106, 80, 135, 191, 226, 11, 48, 190, 110, 5, 140, 62, 25, 41, 14, 191, 67, 226, 174, 190, 59, 220, 100, 62, 199, 6, 0, 191, 249, 137, 183, 189, 27, 202, 98, 62, 180, 0, 47, 190, 100, 199, 227, 61, 65, 100, 11, 190, 160, 177, 130, 188, 61, 158, 87, 60, 105, 233, 39, 190, 115, 241, 0, 61, 253, 228, 20, 62, 123, 162, 59, 61, 9, 145, 144, 189, 21, 99, 211, 189, 254, 102, 247, 189, 21, 17, 118, 61, 132, 217, 190, 60, 168, 189, 45, 189, 246, 226, 132, 61, 117, 1, 49, 190, 49, 95, 123, 189, 16, 101, 14, 190, 168, 188, 153, 60, 80, 46, 189, 61, 0, 162, 31, 190, 0, 62, 3, 184, 54, 52, 211, 56, 205, 61, 168, 189, 211, 131, 166, 61, 72, 112, 49, 190, 50, 201, 196, 189, 46, 210, 14, 190, 115, 35, 215, 60, 147, 132, 13, 190, 202, 105, 205, 61, 89, 7, 78, 189, 193, 43, 90, 189, 31, 231, 39, 190, 152, 193, 79, 62, 44, 127, 179, 190, 201, 82, 71, 190, 200, 52, 180, 59, 24, 149, 186, 59, 2, 92, 153, 62, 165, 167, 30, 62, 182, 100, 28, 63, 205, 119, 139, 62, 243, 75, 113, 188, 155, 130, 42, 62, 195, 208, 180, 62, 212, 180, 113, 191, 56, 94, 163, 190, 226, 9, 139, 190, 9, 104, 169, 62, 245, 57, 222, 62, 20, 82, 22, 189, 208, 21, 58, 190, 255, 131, 226, 189, 9, 214, 55, 190, 248, 22, 112, 189, 160, 113, 199, 62, 17, 196, 153, 190, 55, 16, 161, 189, 184, 250, 207, 189, 65, 119, 25, 62, 104, 125, 195, 190, 46, 94, 123, 190, 1, 101, 54, 190, 151, 18, 75, 61, 88, 131, 160, 190, 79, 15, 188, 62, 178, 252, 189, 191, 209, 235, 141, 190, 197, 102, 250, 189, 68, 51, 169, 62, 124, 27, 34, 62, 6, 209, 61, 190, 241, 224, 78, 189, 83, 195, 240, 62, 195, 87, 255, 189, 235, 96, 18, 62, 189, 176, 182, 62, 115, 238, 220, 190, 100, 69, 156, 190, 24, 31, 168, 60, 207, 231, 215, 62, 246, 97, 131, 62, 4, 184, 4, 62, 92, 188, 223, 61, 8, 46, 140, 62, 124, 54, 244, 61, 69, 236, 222, 60, 78, 189, 53, 187, 111, 213, 244, 189, 203, 227, 8, 190, 190, 155, 65, 190, 132, 188, 153, 62, 52, 181, 138, 62, 38, 108, 0, 62, 243, 193, 10, 190, 162, 168, 156, 191, 205, 252, 82, 190, 235, 47, 12, 62, 237, 203, 206, 189, 237, 41, 170, 190, 207, 189, 137, 188, 155, 233, 176, 59, 87, 25, 111, 190, 164, 145, 248, 189, 106, 206, 222, 60, 29, 230, 141, 62, 71, 3, 22, 62, 36, 162, 23, 62, 221, 201, 10, 63, 93, 37, 13, 191, 193, 71, 201, 190, 156, 137, 155, 190, 255, 164, 39, 60, 105, 145, 0, 190, 99, 173, 98, 62, 191, 125, 1, 62, 202, 228, 192, 62, 87, 43, 79, 62, 63, 14, 70, 62, 10, 210, 38, 190, 217, 8, 97, 190, 133, 244, 207, 59, 238, 151, 201, 189, 186, 159, 113, 61, 153, 10, 184, 188, 181, 245, 69, 62, 16, 84, 45, 190, 77, 25, 0, 190, 209, 46, 245, 189, 2, 224, 239, 190, 203, 44, 159, 190, 91, 247, 133, 62, 216, 199, 31, 62, 156, 252, 190, 190, 43, 2, 52, 190, 104, 150, 104, 62, 51, 165, 132, 191, 181, 33, 199, 60, 83, 79, 146, 189, 145, 177, 42, 61, 212, 210, 137, 59, 245, 101, 166, 190, 64, 85, 62, 62, 218, 221, 128, 62, 217, 231, 39, 189, 229, 87, 150, 190, 60, 253, 162, 190, 115, 196, 185, 60, 109, 45, 77, 190, 138, 231, 163, 62, 135, 15, 157, 62, 223, 226, 151, 189, 130, 208, 187, 61, 253, 1, 198, 189, 253, 17, 34, 62, 191, 44, 151, 60, 16, 136, 11, 191, 87, 140, 207, 62, 105, 229, 77, 62, 122, 12, 0, 190, 31, 80, 165, 61, 49, 224, 112, 62, 250, 129, 152, 190, 244, 31, 222, 187, 44, 92, 178, 189, 203, 218, 3, 191, 57, 136, 7, 62, 6, 157, 20, 62, 195, 248, 44, 188, 194, 120, 160, 61, 144, 104, 221, 61, 71, 168, 40, 62, 30, 5, 7, 63, 108, 9, 100, 191, 130, 87, 27, 188, 174, 97, 141, 189, 7, 214, 157, 61, 91, 178, 32, 190, 240, 29, 115, 61, 42, 137, 48, 190, 92, 171, 120, 190, 168, 40, 36, 191, 158, 215, 91, 190, 199, 69, 134, 60, 234, 53, 166, 190, 32, 43, 111, 190, 154, 151, 27, 62, 234, 89, 132, 62, 171, 115, 52, 191, 68, 228, 251, 62, 145, 125, 141, 189, 11, 131, 180, 189, 217, 40, 8, 190, 237, 14, 76, 60, 93, 185, 187, 60, 163, 55, 249, 61, 208, 217, 191, 189, 74, 73, 113, 189, 55, 237, 232, 189, 62, 53, 16, 62, 29, 44, 17, 190, 98, 136, 4, 190, 125, 2, 18, 62, 39, 164, 174, 61, 173, 203, 214, 189, 87, 220, 179, 61, 145, 141, 80, 189, 99, 224, 25, 190, 14, 55, 32, 190, 76, 89, 218, 61, 58, 199, 164, 61, 99, 65, 168, 189, 68, 100, 45, 190, 254, 99, 16, 190, 36, 17, 220, 188, 94, 151, 27, 188, 236, 105, 31, 190, 153, 254, 52, 190, 216, 76, 252, 189, 72, 26, 212, 189, 213, 191, 176, 189, 208, 117, 3, 62, 169, 161, 140, 189, 211, 22, 205, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 95, 27, 190, 204, 162, 61, 188, 217, 12, 138, 189, 124, 118, 156, 62, 207, 190, 134, 189, 151, 166, 190, 61, 226, 249, 86, 187, 248, 224, 2, 62, 28, 69, 191, 62, 211, 84, 150, 189, 91, 67, 124, 190, 133, 152, 13, 62, 23, 221, 32, 189, 192, 70, 210, 186, 151, 221, 11, 62, 172, 30, 80, 189, 69, 39, 187, 188, 212, 11, 202, 189, 34, 65, 55, 62, 88, 176, 156, 62, 72, 9, 197, 61, 41, 76, 10, 190, 79, 37, 239, 189, 215, 169, 79, 189, 248, 103, 94, 190, 166, 220, 48, 190, 18, 217, 183, 189, 143, 245, 236, 61, 246, 161, 122, 61, 59, 59, 10, 189, 32, 167, 196, 61, 208, 27, 50, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {54, 152, 136, 61, 45, 205, 11, 191, 109, 221, 136, 63, 204, 233, 46, 62, 39, 143, 244, 62, 110, 241, 65, 62, 67, 229, 113, 62, 107, 59, 165, 190, 89, 173, 159, 191, 212, 64, 239, 60, 169, 169, 226, 62, 41, 59, 77, 191, 131, 117, 40, 190, 29, 245, 208, 190, 170, 245, 199, 190, 150, 99, 66, 63, 102, 13, 30, 63, 60, 247, 141, 189, 184, 208, 4, 190, 176, 219, 6, 63, 11, 40, 50, 191, 45, 1, 12, 191, 71, 246, 203, 61, 65, 250, 167, 62, 168, 166, 94, 191, 216, 103, 222, 61, 96, 132, 210, 62, 26, 155, 15, 63, 179, 31, 131, 62, 108, 19, 83, 190, 205, 165, 173, 62, 176, 159, 174, 189, 176, 40, 236, 61, 156, 236, 169, 62, 43, 137, 57, 63, 73, 92, 84, 190, 239, 128, 177, 189, 110, 111, 28, 62, 202, 118, 5, 190, 196, 135, 178, 190, 109, 229, 50, 62, 166, 123, 166, 61, 174, 106, 123, 62, 210, 72, 130, 60, 153, 207, 96, 61, 172, 71, 23, 190, 168, 167, 101, 190, 207, 89, 144, 62, 25, 3, 110, 189, 4, 57, 88, 189, 244, 32, 29, 191, 31, 7, 64, 60, 210, 130, 54, 62, 132, 3, 129, 62, 19, 40, 241, 189, 218, 135, 172, 61, 227, 70, 153, 60, 207, 23, 175, 61, 9, 182, 63, 62, 79, 70, 70, 190, 63, 5, 215, 189, 76, 183, 194, 190, 164, 97, 184, 190, 89, 124, 19, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 65, 208, 189, 164, 50, 4, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {152, 240, 16, 190, 113, 130, 232, 62, 28, 220, 191, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {72, 201, 243, 191, 11, 81, 121, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0088/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}