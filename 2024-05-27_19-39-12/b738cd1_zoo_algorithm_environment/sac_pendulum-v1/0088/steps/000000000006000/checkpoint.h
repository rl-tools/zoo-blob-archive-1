// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 176, 141, 62, 99, 175, 105, 60, 184, 164, 206, 62, 90, 147, 199, 62, 139, 145, 31, 191, 173, 123, 183, 189, 190, 101, 218, 190, 15, 118, 161, 191, 244, 150, 216, 190, 226, 252, 215, 190, 234, 212, 199, 62, 220, 136, 99, 191, 77, 194, 153, 61, 151, 11, 214, 62, 178, 60, 130, 63, 231, 245, 15, 191, 30, 180, 78, 63, 225, 88, 184, 62, 191, 73, 241, 62, 8, 250, 37, 191, 186, 24, 6, 191, 207, 155, 197, 190, 235, 78, 146, 191, 144, 158, 208, 62, 71, 253, 7, 63, 16, 22, 221, 190, 70, 84, 98, 190, 69, 171, 155, 189, 36, 209, 128, 190, 143, 75, 207, 62, 31, 106, 109, 61, 196, 232, 34, 191, 60, 96, 158, 190, 80, 174, 132, 188, 190, 89, 30, 191, 219, 165, 9, 62, 7, 121, 61, 63, 116, 173, 48, 191, 193, 202, 137, 61, 26, 13, 25, 63, 221, 78, 94, 63, 63, 89, 183, 62, 2, 148, 173, 61, 153, 70, 33, 63, 229, 142, 235, 190, 212, 201, 123, 62, 193, 140, 31, 63, 73, 63, 211, 190, 207, 184, 7, 63, 229, 108, 189, 61, 153, 208, 34, 191, 140, 140, 254, 61, 22, 217, 128, 62, 172, 147, 239, 190, 175, 140, 129, 190, 178, 21, 31, 191, 79, 181, 205, 189, 220, 248, 188, 189, 78, 10, 214, 62, 163, 12, 58, 60, 253, 133, 254, 190, 173, 233, 202, 190, 180, 107, 232, 189, 11, 165, 91, 191, 19, 90, 148, 190, 216, 176, 204, 188, 60, 20, 57, 191, 251, 252, 199, 62, 62, 226, 22, 190, 3, 109, 198, 61, 20, 164, 116, 62, 83, 169, 227, 190, 95, 136, 57, 63, 151, 78, 123, 63, 162, 160, 235, 62, 163, 38, 86, 62, 33, 196, 126, 63, 124, 209, 3, 63, 137, 215, 243, 62, 115, 142, 62, 190, 140, 118, 11, 63, 75, 107, 214, 61, 227, 236, 213, 190, 139, 217, 255, 62, 69, 1, 207, 190, 130, 69, 144, 63, 167, 4, 187, 62, 145, 123, 146, 63, 151, 194, 127, 62, 162, 251, 223, 188, 37, 90, 139, 190, 36, 130, 173, 190, 158, 196, 2, 63, 67, 34, 181, 190, 208, 225, 74, 191, 39, 45, 185, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 169, 37, 191, 160, 181, 217, 189, 144, 16, 0, 188, 46, 119, 7, 61, 113, 249, 47, 62, 248, 160, 190, 190, 51, 45, 103, 190, 117, 206, 103, 190, 2, 120, 17, 191, 19, 166, 138, 190, 213, 67, 1, 63, 27, 133, 51, 63, 234, 95, 130, 189, 168, 71, 170, 190, 98, 164, 53, 188, 49, 183, 23, 62, 23, 190, 57, 62, 208, 11, 58, 189, 41, 176, 205, 62, 86, 131, 251, 62, 212, 145, 242, 62, 153, 75, 212, 188, 135, 222, 47, 63, 17, 217, 153, 189, 207, 134, 215, 61, 53, 23, 133, 62, 252, 218, 161, 62, 235, 243, 40, 190, 156, 108, 138, 60, 82, 3, 3, 61, 244, 97, 113, 190, 184, 63, 22, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 140, 217, 189, 15, 21, 32, 62, 198, 253, 40, 190, 205, 189, 95, 59, 26, 98, 228, 60, 58, 44, 171, 189, 153, 13, 47, 59, 93, 48, 246, 188, 96, 225, 7, 190, 233, 144, 207, 189, 21, 239, 128, 189, 108, 94, 205, 187, 240, 31, 42, 190, 129, 197, 53, 188, 190, 51, 4, 190, 27, 24, 98, 60, 233, 57, 169, 188, 159, 94, 36, 61, 184, 52, 162, 189, 25, 128, 12, 189, 85, 112, 37, 60, 198, 168, 177, 189, 140, 67, 1, 61, 243, 39, 206, 189, 16, 147, 180, 61, 59, 0, 63, 189, 225, 28, 64, 190, 182, 22, 208, 189, 209, 191, 17, 62, 96, 90, 134, 189, 127, 133, 199, 188, 189, 219, 33, 190, 155, 254, 238, 60, 147, 85, 254, 190, 107, 131, 73, 60, 48, 81, 109, 61, 104, 13, 218, 60, 20, 115, 29, 190, 78, 33, 155, 190, 174, 63, 198, 188, 156, 19, 10, 189, 180, 172, 89, 190, 11, 130, 148, 189, 38, 237, 35, 190, 63, 221, 18, 61, 177, 66, 252, 61, 102, 244, 208, 62, 229, 117, 103, 62, 228, 112, 92, 61, 117, 3, 66, 190, 113, 224, 248, 190, 26, 11, 7, 189, 190, 20, 111, 189, 26, 199, 10, 190, 72, 81, 148, 61, 35, 166, 216, 190, 2, 218, 253, 61, 32, 194, 137, 61, 128, 107, 12, 189, 219, 177, 101, 190, 242, 175, 240, 60, 167, 4, 213, 62, 221, 68, 8, 189, 112, 154, 0, 62, 8, 184, 180, 190, 102, 82, 140, 62, 30, 151, 62, 191, 237, 6, 82, 190, 141, 151, 99, 188, 119, 203, 34, 62, 198, 202, 84, 62, 27, 127, 252, 189, 147, 197, 183, 62, 98, 173, 164, 62, 181, 149, 56, 190, 203, 195, 53, 62, 103, 149, 252, 62, 76, 24, 18, 191, 115, 104, 187, 189, 89, 76, 232, 190, 34, 132, 188, 189, 23, 230, 7, 62, 248, 75, 15, 62, 89, 226, 239, 187, 41, 98, 159, 58, 85, 239, 185, 187, 225, 101, 135, 62, 193, 217, 136, 62, 231, 118, 101, 190, 253, 129, 41, 62, 117, 225, 216, 189, 99, 247, 77, 61, 155, 63, 141, 62, 128, 186, 164, 189, 3, 92, 67, 190, 166, 80, 61, 191, 136, 15, 116, 188, 89, 114, 25, 62, 158, 191, 84, 190, 182, 181, 53, 189, 118, 124, 145, 187, 62, 138, 183, 61, 108, 208, 249, 189, 224, 173, 137, 190, 116, 196, 85, 190, 195, 23, 142, 62, 244, 3, 231, 187, 79, 210, 87, 62, 33, 9, 179, 62, 115, 215, 191, 190, 66, 105, 30, 190, 194, 12, 150, 61, 119, 221, 47, 62, 224, 232, 189, 61, 110, 46, 139, 62, 204, 152, 91, 62, 95, 174, 209, 188, 25, 64, 155, 62, 195, 160, 43, 61, 176, 205, 138, 190, 74, 203, 151, 61, 149, 91, 236, 61, 225, 139, 112, 189, 67, 80, 22, 189, 101, 62, 24, 62, 198, 156, 18, 62, 16, 111, 6, 190, 92, 147, 155, 187, 22, 252, 131, 61, 239, 158, 150, 190, 51, 215, 69, 188, 236, 126, 157, 62, 202, 89, 216, 190, 124, 77, 42, 191, 217, 203, 119, 190, 31, 37, 13, 63, 57, 37, 183, 61, 77, 102, 194, 189, 135, 46, 134, 60, 29, 63, 7, 189, 40, 35, 166, 62, 214, 194, 189, 61, 9, 145, 2, 62, 144, 51, 145, 61, 37, 129, 233, 61, 79, 35, 165, 61, 94, 170, 191, 189, 9, 118, 103, 61, 231, 41, 86, 189, 228, 46, 219, 188, 129, 119, 34, 62, 31, 183, 243, 61, 185, 230, 27, 62, 222, 105, 134, 190, 89, 168, 166, 189, 192, 162, 126, 190, 42, 75, 192, 189, 186, 162, 176, 61, 231, 224, 143, 187, 5, 27, 151, 62, 18, 110, 195, 188, 106, 176, 132, 190, 106, 96, 61, 187, 108, 252, 228, 186, 202, 183, 242, 61, 104, 51, 241, 61, 32, 155, 20, 62, 53, 246, 26, 190, 74, 203, 86, 187, 116, 229, 24, 190, 205, 7, 87, 190, 62, 237, 210, 189, 202, 62, 130, 190, 149, 7, 44, 190, 65, 183, 141, 189, 22, 142, 126, 188, 80, 251, 216, 61, 78, 109, 211, 61, 73, 141, 198, 189, 105, 30, 166, 189, 102, 70, 118, 189, 95, 42, 22, 61, 112, 50, 7, 62, 199, 218, 55, 189, 155, 12, 84, 190, 251, 83, 158, 185, 62, 248, 35, 190, 25, 128, 242, 189, 215, 226, 160, 61, 124, 165, 65, 190, 122, 197, 67, 190, 150, 116, 24, 190, 88, 127, 202, 189, 201, 107, 243, 187, 182, 72, 241, 190, 192, 178, 78, 190, 244, 247, 50, 62, 23, 242, 154, 62, 231, 241, 105, 62, 86, 235, 50, 190, 41, 155, 133, 61, 254, 111, 195, 62, 125, 75, 14, 61, 29, 157, 44, 62, 97, 37, 117, 62, 84, 159, 234, 189, 18, 18, 233, 190, 125, 6, 135, 190, 168, 109, 117, 62, 7, 243, 166, 60, 254, 58, 21, 190, 73, 74, 138, 190, 97, 21, 245, 57, 141, 39, 116, 61, 186, 122, 62, 62, 66, 164, 50, 189, 46, 118, 69, 189, 17, 64, 170, 61, 131, 35, 12, 61, 201, 199, 116, 62, 199, 254, 47, 61, 131, 225, 33, 190, 60, 156, 223, 188, 164, 21, 8, 191, 10, 163, 163, 59, 24, 93, 216, 190, 100, 50, 29, 62, 186, 234, 204, 187, 195, 217, 188, 190, 156, 137, 172, 190, 52, 85, 51, 188, 4, 211, 81, 62, 223, 125, 177, 61, 36, 23, 140, 191, 14, 139, 20, 62, 92, 72, 19, 190, 236, 170, 151, 190, 153, 208, 167, 61, 98, 237, 95, 62, 121, 223, 198, 62, 217, 208, 213, 61, 119, 17, 72, 188, 252, 173, 196, 61, 210, 187, 37, 62, 137, 245, 81, 189, 110, 245, 74, 62, 138, 23, 63, 62, 247, 209, 154, 190, 45, 141, 57, 190, 142, 139, 21, 191, 83, 93, 48, 190, 186, 186, 44, 191, 234, 212, 141, 190, 37, 250, 85, 190, 201, 199, 4, 62, 249, 191, 155, 61, 124, 196, 235, 60, 82, 169, 43, 191, 158, 97, 122, 188, 194, 197, 141, 62, 134, 225, 132, 191, 172, 103, 197, 190, 183, 80, 205, 190, 156, 76, 30, 63, 153, 231, 132, 190, 157, 163, 74, 190, 234, 184, 151, 60, 72, 190, 246, 62, 4, 75, 159, 62, 171, 55, 132, 190, 27, 209, 108, 59, 61, 235, 91, 189, 9, 166, 53, 190, 9, 204, 226, 189, 116, 254, 252, 61, 250, 202, 206, 61, 141, 166, 144, 61, 218, 173, 233, 62, 147, 193, 150, 62, 136, 44, 181, 190, 196, 2, 14, 191, 106, 103, 154, 191, 239, 94, 95, 62, 215, 244, 40, 186, 56, 158, 79, 191, 241, 187, 149, 62, 28, 236, 188, 62, 39, 115, 106, 62, 94, 102, 255, 188, 197, 236, 223, 189, 6, 206, 14, 62, 80, 186, 225, 188, 116, 208, 63, 60, 238, 72, 195, 188, 206, 70, 11, 190, 128, 60, 189, 61, 98, 95, 164, 189, 219, 32, 19, 190, 41, 249, 226, 189, 110, 102, 79, 60, 42, 247, 16, 61, 54, 179, 132, 60, 115, 188, 159, 189, 178, 144, 193, 61, 142, 109, 100, 188, 52, 231, 164, 61, 127, 11, 6, 190, 176, 219, 3, 62, 46, 249, 8, 61, 217, 71, 146, 61, 139, 65, 185, 189, 184, 155, 99, 61, 105, 91, 37, 190, 82, 147, 255, 189, 120, 59, 0, 190, 231, 117, 249, 61, 42, 6, 162, 61, 60, 217, 3, 61, 16, 209, 84, 61, 135, 23, 34, 190, 32, 121, 51, 190, 109, 69, 241, 190, 134, 157, 51, 62, 168, 249, 47, 62, 110, 224, 230, 189, 66, 101, 36, 190, 140, 173, 143, 190, 135, 19, 128, 62, 204, 142, 0, 190, 153, 76, 209, 190, 209, 106, 19, 61, 32, 14, 85, 190, 51, 161, 155, 189, 245, 30, 26, 62, 117, 255, 88, 62, 178, 208, 139, 61, 88, 108, 242, 189, 51, 125, 161, 189, 237, 68, 9, 190, 104, 149, 47, 62, 141, 229, 169, 61, 15, 11, 40, 189, 27, 249, 89, 62, 21, 168, 39, 61, 214, 207, 140, 60, 132, 45, 118, 62, 140, 192, 10, 188, 29, 170, 254, 190, 214, 131, 173, 189, 104, 7, 20, 191, 180, 211, 187, 190, 17, 40, 216, 61, 85, 246, 200, 61, 79, 34, 103, 190, 162, 221, 6, 190, 232, 134, 137, 61, 128, 169, 131, 61, 166, 205, 127, 60, 179, 138, 208, 190, 19, 80, 45, 190, 6, 169, 74, 60, 229, 74, 118, 190, 94, 80, 192, 190, 136, 226, 31, 62, 84, 80, 58, 62, 56, 0, 137, 62, 249, 97, 171, 62, 172, 174, 93, 62, 248, 136, 196, 61, 248, 16, 222, 61, 232, 112, 123, 191, 164, 137, 61, 62, 230, 89, 76, 191, 121, 113, 33, 190, 21, 117, 130, 188, 246, 249, 129, 61, 100, 113, 162, 62, 136, 177, 171, 60, 166, 197, 3, 60, 76, 143, 156, 61, 203, 211, 162, 189, 6, 73, 249, 62, 239, 172, 119, 61, 186, 61, 126, 189, 95, 207, 41, 62, 220, 200, 58, 61, 29, 245, 154, 189, 141, 172, 107, 61, 46, 109, 252, 189, 17, 165, 162, 189, 119, 196, 182, 189, 209, 87, 250, 189, 40, 80, 68, 61, 138, 151, 6, 62, 223, 219, 127, 61, 0, 56, 175, 189, 210, 219, 44, 190, 171, 208, 244, 61, 187, 167, 198, 189, 238, 41, 34, 190, 101, 246, 108, 189, 178, 180, 11, 62, 133, 177, 218, 61, 54, 44, 153, 61, 171, 101, 8, 190, 34, 189, 2, 59, 127, 136, 130, 189, 179, 108, 252, 60, 134, 243, 52, 188, 226, 225, 119, 188, 5, 71, 158, 189, 58, 253, 54, 61, 227, 202, 190, 189, 120, 44, 10, 62, 251, 204, 198, 189, 209, 65, 47, 190, 45, 232, 254, 61, 170, 36, 213, 190, 14, 232, 106, 188, 93, 74, 232, 61, 151, 169, 75, 190, 24, 67, 244, 189, 58, 159, 176, 190, 36, 57, 4, 189, 115, 28, 88, 190, 17, 43, 205, 189, 144, 154, 85, 187, 118, 72, 205, 61, 37, 229, 164, 62, 253, 214, 77, 61, 30, 17, 205, 62, 97, 161, 86, 62, 251, 12, 33, 190, 191, 234, 43, 189, 47, 51, 108, 190, 221, 172, 26, 62, 139, 208, 14, 190, 111, 33, 159, 190, 131, 136, 179, 187, 107, 128, 196, 190, 142, 254, 150, 62, 173, 22, 13, 61, 33, 254, 123, 62, 242, 254, 229, 59, 252, 239, 182, 188, 43, 77, 149, 62, 92, 66, 30, 189, 112, 36, 57, 62, 229, 202, 145, 188, 10, 174, 53, 191, 225, 217, 21, 62, 145, 162, 88, 62, 134, 178, 188, 190, 216, 212, 243, 190, 39, 135, 223, 190, 127, 207, 206, 62, 236, 78, 171, 190, 109, 81, 14, 191, 23, 189, 59, 62, 19, 233, 14, 61, 27, 8, 95, 188, 211, 37, 137, 61, 194, 159, 172, 62, 151, 69, 250, 62, 38, 211, 130, 189, 182, 234, 181, 190, 13, 88, 120, 61, 29, 10, 173, 60, 26, 228, 50, 62, 2, 33, 30, 190, 46, 1, 104, 60, 97, 2, 199, 190, 141, 47, 66, 62, 21, 65, 28, 190, 157, 114, 44, 62, 203, 197, 31, 190, 2, 105, 181, 190, 125, 85, 182, 62, 35, 100, 150, 62, 88, 211, 66, 62, 8, 216, 81, 190, 252, 244, 166, 62, 152, 79, 29, 191, 143, 36, 249, 189, 131, 226, 153, 61, 61, 119, 134, 62, 193, 187, 24, 62, 40, 29, 149, 190, 124, 223, 119, 189, 128, 85, 20, 63, 95, 225, 166, 59, 5, 184, 20, 62, 215, 38, 3, 63, 229, 33, 241, 190, 170, 106, 55, 190, 238, 24, 160, 190, 183, 82, 31, 62, 189, 16, 57, 62, 5, 162, 103, 61, 55, 201, 88, 62, 61, 49, 37, 189, 133, 179, 93, 59, 89, 57, 101, 60, 47, 55, 43, 62, 135, 155, 165, 190, 234, 98, 92, 61, 68, 27, 175, 190, 170, 199, 234, 62, 120, 206, 205, 62, 79, 181, 144, 62, 56, 247, 73, 190, 178, 36, 223, 190, 2, 18, 90, 60, 19, 201, 129, 62, 112, 159, 245, 190, 240, 170, 184, 190, 217, 61, 133, 190, 93, 160, 143, 62, 94, 171, 6, 62, 44, 49, 31, 191, 137, 186, 2, 190, 250, 239, 194, 61, 60, 212, 226, 61, 38, 125, 15, 62, 230, 76, 193, 62, 111, 91, 18, 190, 239, 154, 134, 190, 207, 35, 166, 188, 24, 83, 22, 62, 66, 129, 144, 62, 195, 251, 20, 190, 140, 96, 165, 61, 77, 128, 235, 60, 18, 90, 114, 60, 127, 8, 58, 62, 191, 244, 48, 61, 178, 81, 39, 190, 253, 9, 216, 61, 70, 191, 136, 190, 149, 237, 135, 190, 56, 190, 205, 62, 162, 192, 200, 62, 178, 165, 157, 190, 189, 233, 27, 191, 120, 76, 132, 61, 233, 147, 65, 189, 127, 129, 7, 62, 117, 70, 10, 190, 44, 206, 130, 189, 107, 247, 146, 189, 73, 187, 237, 189, 88, 11, 64, 189, 102, 90, 120, 61, 185, 101, 244, 61, 170, 9, 81, 189, 138, 238, 147, 188, 143, 17, 29, 190, 71, 67, 6, 62, 135, 213, 0, 189, 19, 143, 161, 189, 142, 136, 113, 188, 16, 151, 146, 61, 182, 239, 19, 190, 142, 216, 229, 61, 154, 246, 7, 61, 73, 146, 82, 188, 72, 71, 87, 60, 172, 119, 9, 190, 19, 4, 230, 61, 148, 75, 98, 60, 86, 137, 22, 190, 173, 44, 12, 190, 147, 224, 254, 189, 1, 250, 32, 189, 134, 39, 190, 189, 113, 143, 152, 61, 155, 255, 137, 190, 248, 169, 1, 189, 17, 216, 29, 191, 230, 19, 179, 190, 134, 53, 136, 189, 39, 28, 105, 62, 104, 141, 10, 190, 104, 104, 188, 189, 19, 180, 210, 190, 145, 164, 103, 61, 56, 201, 150, 61, 115, 162, 205, 61, 39, 93, 2, 62, 48, 199, 211, 189, 57, 69, 32, 62, 186, 231, 67, 62, 166, 48, 121, 60, 69, 153, 5, 190, 77, 247, 166, 190, 196, 176, 56, 62, 229, 136, 47, 191, 170, 185, 149, 62, 66, 153, 84, 190, 202, 72, 23, 190, 14, 46, 147, 189, 112, 155, 234, 59, 217, 56, 104, 62, 41, 255, 38, 190, 252, 116, 175, 188, 188, 70, 232, 62, 37, 96, 159, 189, 114, 181, 81, 190, 7, 207, 141, 190, 193, 230, 135, 62, 3, 28, 188, 190, 181, 68, 63, 187, 85, 101, 46, 62, 222, 187, 228, 61, 198, 243, 0, 190, 147, 54, 114, 188, 98, 52, 29, 190, 86, 71, 166, 62, 223, 58, 114, 188, 83, 187, 164, 61, 200, 120, 157, 62, 206, 216, 186, 190, 236, 70, 240, 187, 8, 33, 99, 190, 213, 210, 57, 60, 116, 195, 246, 189, 21, 56, 7, 189, 220, 28, 110, 62, 217, 193, 74, 62, 242, 254, 132, 62, 62, 27, 139, 62, 96, 19, 70, 60, 229, 57, 44, 190, 221, 250, 152, 189, 125, 82, 84, 190, 173, 247, 166, 61, 133, 172, 190, 61, 87, 197, 157, 62, 116, 72, 123, 189, 211, 183, 150, 188, 95, 99, 97, 61, 154, 133, 73, 191, 243, 236, 107, 61, 77, 102, 92, 62, 150, 205, 241, 189, 165, 199, 173, 190, 238, 93, 248, 190, 58, 119, 217, 62, 23, 67, 154, 190, 226, 73, 182, 190, 240, 88, 57, 62, 36, 38, 27, 190, 16, 230, 205, 187, 195, 102, 189, 62, 86, 119, 209, 62, 178, 255, 155, 62, 112, 189, 74, 190, 101, 82, 64, 190, 127, 87, 140, 190, 24, 16, 99, 62, 30, 104, 156, 61, 24, 181, 206, 189, 21, 175, 1, 62, 208, 8, 85, 190, 158, 127, 34, 62, 96, 95, 202, 190, 125, 45, 85, 62, 83, 165, 8, 191, 202, 104, 81, 190, 135, 194, 178, 62, 84, 129, 126, 62, 74, 1, 35, 61, 4, 185, 103, 62, 134, 73, 143, 190, 233, 31, 34, 61, 82, 100, 45, 62, 6, 76, 32, 189, 15, 15, 213, 190, 196, 111, 247, 190, 42, 0, 73, 60, 232, 133, 115, 190, 53, 123, 139, 190, 173, 176, 246, 61, 106, 112, 235, 187, 199, 243, 218, 189, 222, 190, 238, 61, 66, 111, 241, 62, 33, 57, 22, 63, 56, 1, 13, 190, 84, 192, 142, 190, 7, 27, 110, 190, 209, 10, 82, 62, 12, 112, 66, 189, 240, 101, 163, 190, 71, 230, 0, 190, 73, 8, 174, 190, 166, 112, 142, 62, 25, 23, 167, 61, 12, 117, 141, 62, 60, 177, 243, 189, 93, 235, 175, 188, 147, 45, 191, 62, 120, 76, 56, 61, 55, 39, 71, 62, 175, 10, 118, 60, 62, 128, 48, 189, 18, 154, 29, 190, 200, 61, 11, 190, 34, 169, 48, 188, 111, 200, 26, 62, 237, 170, 44, 190, 67, 169, 152, 61, 81, 227, 48, 190, 26, 44, 211, 61, 122, 101, 254, 189, 135, 238, 145, 60, 218, 97, 121, 189, 151, 207, 203, 189, 45, 53, 160, 61, 192, 74, 232, 189, 57, 250, 58, 61, 104, 50, 10, 60, 141, 227, 37, 188, 231, 138, 230, 189, 67, 142, 191, 189, 5, 233, 228, 189, 31, 192, 7, 190, 72, 13, 23, 60, 61, 135, 195, 61, 78, 136, 43, 190, 232, 111, 255, 188, 164, 131, 200, 189, 239, 192, 186, 189, 152, 155, 85, 61, 20, 72, 3, 61, 173, 181, 6, 190, 250, 221, 163, 60, 242, 109, 71, 62, 217, 191, 47, 190, 199, 45, 250, 189, 62, 142, 169, 61, 57, 155, 220, 61, 58, 254, 182, 62, 89, 230, 191, 189, 105, 254, 249, 61, 176, 83, 34, 188, 195, 44, 6, 189, 194, 105, 64, 61, 121, 240, 101, 62, 215, 132, 202, 189, 195, 9, 141, 190, 166, 57, 24, 190, 71, 229, 155, 62, 241, 170, 50, 62, 48, 195, 42, 190, 24, 152, 200, 190, 127, 244, 128, 61, 56, 196, 188, 189, 178, 153, 65, 189, 2, 245, 202, 62, 83, 70, 77, 189, 115, 65, 191, 61, 69, 147, 202, 189, 48, 87, 97, 61, 171, 162, 247, 61, 190, 187, 140, 190, 160, 121, 107, 190, 96, 135, 202, 189, 151, 196, 66, 189, 231, 255, 209, 62, 105, 242, 12, 62, 245, 59, 51, 190, 106, 175, 34, 61, 62, 218, 97, 190, 80, 5, 195, 62, 51, 15, 192, 62, 246, 140, 136, 62, 189, 47, 27, 61, 141, 194, 106, 61, 105, 114, 240, 189, 161, 69, 190, 61, 254, 230, 10, 190, 9, 146, 93, 190, 87, 207, 129, 190, 43, 108, 101, 61, 204, 224, 232, 61, 98, 228, 29, 61, 242, 132, 106, 191, 193, 9, 16, 190, 213, 232, 141, 191, 202, 50, 111, 190, 93, 46, 138, 62, 119, 6, 0, 191, 214, 75, 150, 190, 1, 128, 55, 62, 9, 190, 245, 189, 165, 61, 158, 189, 49, 168, 180, 62, 167, 24, 52, 190, 143, 110, 195, 59, 65, 100, 11, 190, 117, 65, 27, 188, 191, 75, 214, 60, 197, 129, 39, 190, 115, 241, 0, 61, 253, 228, 20, 62, 158, 230, 84, 61, 12, 109, 139, 189, 21, 99, 211, 189, 254, 102, 247, 189, 112, 89, 145, 61, 215, 47, 2, 61, 112, 113, 23, 189, 246, 226, 132, 61, 117, 1, 49, 190, 49, 95, 123, 189, 153, 101, 11, 190, 168, 188, 153, 60, 219, 145, 208, 61, 101, 171, 30, 190, 126, 116, 28, 60, 54, 52, 211, 56, 246, 245, 162, 189, 211, 131, 166, 61, 72, 112, 49, 190, 50, 201, 196, 189, 185, 238, 13, 190, 254, 118, 249, 60, 147, 132, 13, 190, 202, 105, 205, 61, 89, 7, 78, 189, 0, 196, 60, 189, 60, 167, 83, 186, 66, 145, 13, 62, 154, 81, 136, 190, 26, 62, 68, 190, 109, 236, 153, 188, 21, 15, 229, 61, 134, 63, 152, 62, 127, 34, 39, 59, 42, 177, 128, 62, 72, 114, 139, 62, 170, 5, 4, 56, 44, 150, 218, 61, 169, 52, 152, 62, 227, 85, 73, 190, 29, 205, 191, 190, 13, 32, 150, 190, 70, 13, 183, 62, 221, 167, 218, 62, 100, 53, 97, 189, 142, 153, 201, 189, 217, 22, 211, 189, 95, 64, 9, 190, 214, 236, 218, 60, 180, 248, 175, 62, 129, 210, 0, 190, 170, 20, 193, 61, 194, 158, 16, 190, 27, 231, 110, 61, 239, 31, 58, 189, 186, 87, 136, 190, 172, 64, 56, 190, 236, 32, 129, 61, 141, 91, 116, 190, 96, 104, 189, 62, 36, 59, 57, 191, 168, 146, 136, 190, 183, 161, 164, 189, 70, 155, 158, 62, 14, 83, 18, 62, 93, 187, 55, 190, 149, 46, 38, 190, 25, 249, 244, 62, 74, 42, 246, 189, 18, 115, 65, 62, 15, 183, 209, 62, 50, 231, 130, 190, 200, 52, 178, 190, 22, 68, 203, 60, 224, 80, 222, 62, 7, 18, 109, 62, 254, 92, 143, 189, 188, 22, 16, 62, 126, 112, 136, 57, 216, 180, 197, 61, 122, 38, 148, 61, 214, 132, 161, 188, 100, 33, 52, 189, 55, 238, 142, 188, 165, 252, 24, 190, 55, 255, 161, 62, 143, 145, 135, 62, 174, 224, 46, 62, 45, 78, 21, 190, 207, 45, 70, 191, 59, 20, 239, 189, 169, 255, 66, 61, 89, 180, 233, 189, 146, 194, 97, 189, 171, 77, 76, 61, 227, 98, 84, 61, 249, 120, 59, 190, 145, 24, 80, 190, 210, 211, 132, 189, 159, 28, 144, 62, 228, 135, 103, 61, 52, 136, 198, 61, 72, 158, 9, 63, 248, 35, 140, 190, 254, 240, 107, 190, 138, 59, 48, 190, 10, 253, 215, 61, 255, 77, 170, 61, 247, 35, 157, 188, 95, 52, 85, 62, 107, 58, 42, 62, 239, 131, 133, 62, 137, 225, 149, 62, 171, 171, 110, 61, 70, 37, 208, 189, 34, 129, 51, 62, 50, 27, 86, 189, 208, 134, 56, 61, 238, 16, 135, 61, 64, 163, 120, 62, 15, 185, 53, 190, 47, 79, 228, 189, 215, 115, 32, 190, 208, 19, 125, 190, 157, 102, 116, 189, 251, 144, 71, 62, 163, 18, 241, 61, 128, 5, 74, 190, 48, 205, 175, 189, 23, 120, 177, 61, 145, 114, 200, 190, 180, 37, 47, 189, 195, 79, 178, 60, 78, 103, 156, 188, 226, 206, 154, 60, 160, 119, 132, 189, 63, 103, 35, 62, 182, 39, 102, 62, 148, 105, 128, 189, 184, 114, 169, 190, 253, 139, 1, 190, 238, 245, 3, 189, 218, 175, 163, 189, 166, 229, 229, 61, 216, 1, 253, 61, 50, 138, 19, 190, 205, 131, 89, 62, 221, 50, 135, 60, 159, 42, 43, 62, 167, 77, 27, 189, 144, 42, 89, 190, 0, 96, 233, 62, 37, 33, 26, 62, 229, 253, 34, 61, 49, 108, 188, 61, 16, 243, 129, 62, 242, 67, 183, 188, 65, 101, 30, 61, 187, 25, 7, 189, 129, 201, 165, 190, 217, 58, 30, 62, 142, 44, 211, 60, 4, 207, 82, 61, 41, 220, 106, 61, 77, 102, 229, 61, 169, 113, 1, 62, 19, 171, 252, 62, 153, 9, 13, 191, 11, 86, 19, 190, 219, 129, 102, 190, 145, 25, 194, 60, 60, 77, 58, 190, 44, 199, 179, 61, 15, 237, 149, 190, 140, 117, 58, 190, 255, 59, 147, 190, 99, 246, 94, 190, 164, 20, 107, 188, 88, 152, 124, 190, 100, 197, 9, 189, 247, 169, 65, 62, 149, 24, 103, 62, 150, 215, 149, 190, 164, 18, 209, 62, 227, 173, 190, 189, 113, 32, 5, 62, 217, 40, 8, 190, 237, 14, 76, 60, 93, 185, 187, 60, 163, 55, 249, 61, 208, 217, 191, 189, 74, 73, 113, 189, 55, 237, 232, 189, 62, 53, 16, 62, 29, 44, 17, 190, 98, 136, 4, 190, 125, 2, 18, 62, 39, 164, 174, 61, 173, 203, 214, 189, 87, 220, 179, 61, 145, 141, 80, 189, 99, 224, 25, 190, 14, 55, 32, 190, 76, 89, 218, 61, 58, 199, 164, 61, 99, 65, 168, 189, 68, 100, 45, 190, 254, 99, 16, 190, 36, 17, 220, 188, 94, 151, 27, 188, 236, 105, 31, 190, 153, 254, 52, 190, 216, 76, 252, 189, 72, 26, 212, 189, 213, 191, 176, 189, 208, 117, 3, 62, 169, 161, 140, 189, 211, 22, 205, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 95, 27, 190, 183, 136, 100, 189, 56, 126, 218, 188, 12, 185, 143, 62, 101, 1, 145, 189, 25, 175, 183, 61, 11, 146, 55, 61, 28, 102, 181, 60, 230, 13, 180, 62, 224, 212, 135, 189, 97, 134, 25, 187, 223, 81, 50, 62, 23, 221, 32, 189, 197, 84, 205, 56, 198, 97, 3, 62, 69, 28, 144, 188, 54, 127, 6, 188, 212, 11, 202, 189, 110, 240, 68, 62, 171, 71, 157, 62, 124, 74, 133, 61, 36, 142, 183, 189, 79, 37, 239, 189, 150, 29, 80, 189, 72, 236, 75, 190, 214, 153, 41, 190, 234, 32, 29, 189, 115, 91, 32, 62, 29, 38, 146, 61, 134, 109, 186, 189, 55, 245, 95, 60, 208, 27, 50, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {54, 152, 136, 61, 184, 213, 3, 190, 189, 158, 25, 63, 245, 85, 21, 62, 107, 216, 198, 62, 154, 233, 145, 58, 44, 70, 121, 62, 236, 128, 172, 190, 86, 65, 144, 191, 106, 213, 192, 60, 243, 33, 154, 62, 2, 78, 13, 191, 131, 117, 40, 190, 94, 9, 154, 190, 138, 54, 181, 190, 3, 255, 19, 63, 254, 243, 239, 62, 60, 247, 141, 189, 221, 53, 211, 189, 165, 105, 133, 62, 62, 134, 224, 190, 11, 33, 156, 190, 71, 246, 203, 61, 16, 198, 20, 62, 170, 201, 67, 191, 234, 178, 222, 61, 124, 68, 138, 62, 103, 212, 3, 63, 190, 86, 74, 62, 178, 183, 251, 189, 94, 40, 92, 62, 176, 159, 174, 189, 176, 40, 236, 61, 102, 18, 184, 60, 230, 97, 228, 62, 56, 151, 134, 190, 127, 132, 168, 188, 193, 174, 149, 61, 20, 50, 164, 189, 127, 210, 118, 190, 68, 13, 124, 62, 137, 219, 118, 61, 85, 14, 44, 61, 16, 180, 253, 60, 153, 207, 96, 61, 172, 88, 1, 190, 85, 247, 147, 189, 183, 109, 135, 62, 107, 46, 69, 190, 4, 57, 88, 189, 32, 179, 34, 191, 127, 156, 155, 189, 9, 43, 234, 61, 95, 109, 135, 61, 19, 40, 241, 189, 25, 121, 5, 62, 104, 34, 199, 62, 127, 12, 175, 61, 222, 57, 83, 62, 199, 122, 70, 190, 147, 31, 48, 190, 212, 213, 183, 189, 169, 127, 146, 190, 89, 124, 19, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {245, 234, 235, 189, 3, 108, 195, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {65, 221, 253, 63, 98, 42, 240, 191, 179, 109, 202, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {110, 11, 18, 62, 97, 85, 152, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0088/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}