// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {39, 48, 69, 63, 164, 179, 107, 59, 62, 16, 146, 62, 149, 195, 174, 62, 115, 4, 89, 191, 155, 152, 72, 190, 221, 56, 159, 190, 142, 67, 222, 191, 98, 218, 204, 190, 36, 50, 4, 191, 88, 68, 208, 62, 109, 230, 94, 191, 99, 165, 218, 61, 219, 54, 170, 62, 88, 218, 114, 63, 8, 83, 9, 191, 58, 68, 152, 63, 48, 220, 119, 62, 108, 135, 252, 62, 63, 96, 97, 191, 94, 207, 0, 191, 210, 139, 9, 191, 183, 5, 122, 191, 200, 251, 162, 62, 140, 189, 42, 63, 216, 73, 165, 190, 10, 146, 139, 190, 22, 73, 29, 190, 207, 177, 134, 190, 182, 208, 206, 62, 230, 112, 16, 59, 171, 123, 128, 191, 173, 3, 105, 190, 91, 209, 46, 189, 242, 161, 16, 191, 15, 242, 243, 59, 172, 71, 62, 63, 104, 153, 58, 191, 146, 33, 129, 189, 0, 166, 41, 63, 118, 122, 136, 63, 3, 108, 156, 62, 180, 153, 106, 61, 39, 128, 59, 63, 253, 114, 215, 190, 197, 49, 72, 62, 183, 100, 65, 63, 57, 160, 195, 190, 232, 91, 7, 63, 132, 229, 24, 61, 71, 41, 28, 191, 253, 142, 46, 62, 2, 14, 39, 62, 132, 176, 231, 190, 13, 31, 142, 190, 214, 185, 96, 191, 251, 28, 77, 190, 205, 123, 128, 189, 251, 142, 171, 62, 184, 120, 165, 61, 111, 145, 214, 190, 52, 219, 90, 191, 9, 160, 76, 190, 158, 1, 128, 191, 189, 150, 12, 190, 255, 212, 126, 188, 155, 64, 64, 191, 158, 181, 132, 62, 104, 249, 83, 189, 50, 155, 49, 62, 156, 100, 154, 62, 175, 240, 211, 190, 190, 121, 55, 63, 118, 77, 138, 63, 112, 242, 241, 62, 38, 186, 30, 62, 19, 231, 184, 63, 140, 25, 8, 63, 198, 191, 244, 62, 208, 0, 107, 189, 139, 66, 15, 63, 186, 99, 168, 61, 178, 237, 83, 191, 132, 3, 212, 62, 39, 165, 61, 190, 34, 30, 195, 63, 72, 121, 155, 62, 216, 161, 114, 63, 247, 9, 125, 62, 106, 83, 184, 189, 205, 198, 171, 190, 160, 26, 83, 190, 124, 152, 219, 62, 155, 151, 171, 190, 151, 154, 132, 191, 23, 49, 203, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 103, 98, 191, 218, 197, 91, 189, 8, 138, 43, 189, 84, 201, 208, 61, 106, 162, 114, 62, 138, 92, 253, 190, 201, 196, 146, 190, 129, 169, 219, 190, 102, 84, 84, 191, 222, 39, 130, 190, 244, 181, 220, 62, 124, 229, 35, 63, 13, 63, 98, 189, 7, 57, 178, 190, 192, 62, 15, 61, 19, 105, 51, 62, 122, 37, 234, 61, 53, 141, 199, 189, 105, 160, 201, 62, 254, 146, 253, 62, 58, 68, 229, 62, 51, 157, 134, 189, 153, 206, 41, 63, 140, 117, 140, 190, 174, 59, 240, 61, 206, 160, 34, 62, 112, 193, 143, 62, 218, 143, 63, 189, 239, 110, 41, 190, 153, 17, 156, 189, 235, 40, 213, 190, 27, 42, 50, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 140, 217, 189, 15, 21, 32, 62, 198, 253, 40, 190, 205, 189, 95, 59, 26, 98, 228, 60, 58, 44, 171, 189, 153, 13, 47, 59, 93, 48, 246, 188, 96, 225, 7, 190, 233, 144, 207, 189, 21, 239, 128, 189, 108, 94, 205, 187, 240, 31, 42, 190, 129, 197, 53, 188, 190, 51, 4, 190, 27, 24, 98, 60, 233, 57, 169, 188, 159, 94, 36, 61, 184, 52, 162, 189, 25, 128, 12, 189, 85, 112, 37, 60, 198, 168, 177, 189, 140, 67, 1, 61, 243, 39, 206, 189, 16, 147, 180, 61, 59, 0, 63, 189, 225, 28, 64, 190, 182, 22, 208, 189, 209, 191, 17, 62, 96, 90, 134, 189, 127, 133, 199, 188, 189, 219, 33, 190, 13, 98, 32, 62, 42, 91, 32, 191, 164, 145, 102, 190, 89, 78, 205, 61, 229, 165, 5, 61, 90, 74, 67, 190, 104, 230, 236, 190, 121, 248, 15, 190, 255, 35, 211, 190, 12, 234, 206, 190, 247, 94, 5, 190, 3, 133, 30, 190, 75, 49, 12, 61, 34, 104, 4, 62, 102, 3, 221, 62, 141, 178, 120, 62, 37, 206, 172, 60, 102, 91, 75, 190, 226, 142, 37, 191, 201, 149, 225, 60, 156, 174, 94, 190, 199, 218, 171, 189, 84, 34, 75, 62, 119, 65, 220, 190, 185, 131, 19, 62, 170, 251, 242, 61, 96, 111, 208, 188, 250, 114, 134, 190, 177, 210, 195, 189, 212, 101, 201, 62, 211, 219, 114, 190, 166, 231, 143, 60, 177, 129, 214, 190, 91, 156, 209, 62, 116, 125, 160, 191, 56, 88, 227, 189, 57, 4, 88, 60, 188, 29, 125, 62, 7, 31, 145, 62, 76, 224, 172, 189, 64, 5, 32, 63, 73, 227, 195, 62, 84, 162, 101, 189, 245, 115, 52, 62, 118, 50, 4, 63, 7, 165, 63, 191, 225, 163, 96, 189, 248, 51, 254, 190, 172, 15, 39, 189, 29, 83, 147, 62, 101, 70, 175, 62, 201, 51, 157, 189, 91, 213, 252, 61, 73, 197, 121, 189, 78, 72, 71, 62, 189, 50, 246, 62, 217, 14, 159, 190, 31, 134, 246, 61, 14, 243, 171, 189, 0, 107, 203, 61, 164, 162, 144, 62, 33, 194, 91, 190, 193, 149, 236, 189, 96, 242, 173, 191, 211, 218, 15, 189, 236, 3, 75, 62, 184, 223, 144, 190, 74, 152, 251, 189, 236, 170, 206, 188, 80, 8, 155, 61, 156, 87, 24, 190, 107, 40, 92, 190, 235, 204, 251, 189, 61, 231, 141, 62, 236, 201, 12, 61, 239, 179, 116, 62, 240, 33, 186, 62, 223, 149, 235, 190, 176, 5, 28, 190, 132, 104, 209, 61, 152, 188, 40, 62, 193, 170, 216, 60, 10, 124, 188, 62, 54, 12, 100, 62, 141, 205, 227, 60, 98, 148, 81, 62, 62, 128, 64, 188, 3, 254, 162, 190, 68, 140, 98, 61, 6, 220, 181, 61, 185, 101, 145, 189, 86, 11, 250, 188, 198, 226, 18, 62, 179, 213, 28, 62, 121, 199, 232, 189, 206, 83, 108, 189, 108, 114, 65, 189, 165, 242, 115, 190, 239, 236, 6, 61, 57, 166, 159, 62, 255, 159, 28, 191, 95, 219, 137, 191, 123, 255, 96, 190, 142, 197, 145, 63, 235, 167, 168, 62, 176, 137, 220, 189, 200, 31, 154, 61, 178, 148, 187, 60, 146, 107, 185, 62, 33, 119, 174, 61, 198, 63, 78, 62, 13, 128, 9, 62, 89, 1, 12, 62, 40, 250, 209, 61, 74, 53, 67, 189, 139, 47, 247, 60, 76, 63, 51, 189, 85, 213, 255, 189, 7, 180, 211, 61, 205, 227, 25, 62, 133, 47, 9, 62, 226, 237, 163, 190, 68, 161, 191, 189, 28, 98, 96, 60, 240, 116, 145, 190, 89, 6, 9, 62, 109, 41, 125, 189, 197, 60, 176, 62, 66, 138, 195, 188, 171, 236, 133, 190, 0, 75, 60, 190, 41, 152, 103, 189, 6, 30, 176, 61, 37, 208, 97, 61, 229, 115, 201, 61, 98, 121, 24, 190, 230, 61, 137, 188, 204, 152, 197, 190, 41, 90, 103, 190, 44, 212, 87, 189, 202, 62, 130, 190, 78, 14, 152, 190, 222, 253, 14, 190, 0, 75, 172, 189, 223, 94, 100, 61, 150, 155, 47, 61, 93, 10, 165, 189, 47, 179, 167, 189, 218, 234, 33, 189, 124, 213, 168, 61, 45, 34, 10, 62, 249, 223, 201, 189, 243, 137, 12, 191, 187, 108, 148, 189, 130, 18, 15, 191, 152, 9, 99, 190, 81, 64, 145, 61, 78, 69, 64, 190, 241, 207, 174, 190, 166, 77, 214, 190, 224, 167, 22, 190, 157, 208, 60, 189, 31, 108, 145, 191, 64, 140, 58, 188, 226, 26, 3, 62, 141, 143, 166, 62, 146, 151, 82, 62, 171, 15, 112, 190, 86, 15, 161, 189, 241, 172, 172, 62, 32, 42, 94, 188, 10, 4, 177, 61, 239, 42, 48, 62, 151, 131, 87, 190, 202, 186, 20, 191, 220, 43, 152, 190, 228, 7, 95, 62, 244, 162, 131, 189, 143, 27, 153, 189, 247, 148, 150, 190, 168, 171, 179, 61, 122, 174, 153, 61, 235, 18, 60, 62, 5, 9, 39, 190, 217, 58, 188, 189, 57, 224, 69, 61, 203, 200, 137, 188, 221, 5, 58, 62, 1, 255, 143, 61, 7, 51, 88, 190, 56, 68, 62, 189, 69, 118, 161, 191, 10, 163, 163, 59, 175, 50, 163, 190, 252, 143, 77, 62, 77, 21, 216, 188, 164, 237, 130, 190, 219, 17, 76, 191, 243, 218, 235, 60, 199, 245, 201, 189, 194, 162, 65, 190, 196, 155, 64, 191, 136, 103, 78, 62, 13, 57, 127, 189, 142, 156, 30, 190, 37, 143, 51, 62, 237, 177, 47, 62, 31, 18, 180, 62, 255, 170, 241, 61, 233, 155, 143, 188, 12, 113, 25, 62, 249, 190, 66, 62, 64, 135, 64, 182, 4, 185, 14, 62, 51, 127, 65, 62, 169, 44, 164, 190, 125, 106, 129, 189, 12, 253, 161, 191, 10, 18, 142, 190, 8, 158, 92, 191, 229, 150, 20, 191, 37, 226, 108, 190, 104, 60, 221, 62, 94, 112, 154, 61, 97, 191, 63, 188, 214, 125, 36, 191, 102, 84, 208, 187, 226, 11, 155, 62, 120, 71, 136, 191, 250, 45, 91, 191, 104, 123, 173, 190, 45, 147, 223, 61, 230, 229, 26, 191, 195, 82, 97, 190, 164, 156, 204, 60, 40, 125, 185, 62, 195, 3, 147, 62, 101, 238, 248, 189, 16, 18, 172, 188, 182, 74, 133, 189, 7, 160, 246, 189, 29, 251, 147, 189, 246, 239, 233, 61, 100, 154, 221, 61, 171, 79, 129, 61, 27, 231, 237, 62, 67, 76, 154, 62, 41, 1, 170, 190, 21, 4, 152, 190, 29, 250, 7, 192, 190, 175, 21, 62, 95, 228, 4, 191, 77, 77, 136, 191, 84, 50, 167, 62, 167, 157, 217, 62, 209, 223, 114, 62, 94, 102, 255, 188, 19, 145, 224, 189, 61, 62, 3, 62, 111, 171, 251, 188, 116, 208, 63, 60, 159, 114, 221, 188, 15, 17, 34, 190, 128, 60, 189, 61, 136, 205, 168, 189, 219, 32, 19, 190, 75, 249, 251, 189, 9, 127, 91, 60, 123, 241, 17, 61, 58, 177, 163, 60, 88, 235, 167, 189, 41, 219, 190, 61, 148, 164, 103, 188, 146, 62, 144, 61, 229, 136, 21, 190, 144, 29, 1, 62, 140, 111, 101, 60, 104, 62, 129, 61, 38, 47, 221, 189, 221, 8, 52, 61, 27, 200, 30, 190, 224, 50, 254, 189, 120, 59, 0, 190, 231, 117, 249, 61, 157, 240, 166, 61, 146, 241, 69, 61, 16, 209, 84, 61, 93, 171, 64, 190, 42, 121, 51, 190, 225, 173, 2, 191, 15, 158, 158, 62, 178, 150, 74, 62, 1, 169, 192, 190, 11, 188, 10, 191, 116, 127, 142, 190, 31, 207, 107, 63, 15, 176, 62, 62, 69, 36, 159, 190, 32, 210, 173, 61, 32, 189, 142, 190, 49, 55, 22, 191, 3, 207, 225, 60, 110, 174, 98, 62, 214, 183, 91, 61, 103, 18, 3, 190, 179, 186, 138, 189, 232, 66, 164, 189, 145, 153, 105, 189, 17, 98, 246, 61, 38, 59, 51, 61, 190, 219, 37, 62, 230, 3, 93, 61, 59, 130, 56, 190, 169, 16, 106, 61, 39, 112, 147, 189, 65, 62, 2, 190, 68, 183, 215, 190, 152, 225, 47, 191, 152, 129, 211, 190, 98, 62, 104, 62, 119, 112, 109, 62, 153, 250, 192, 190, 17, 254, 222, 190, 163, 146, 227, 61, 117, 23, 153, 61, 119, 13, 32, 190, 48, 74, 12, 191, 153, 199, 203, 189, 77, 203, 195, 190, 100, 109, 88, 190, 146, 13, 242, 190, 49, 253, 37, 62, 9, 18, 73, 62, 222, 60, 98, 62, 37, 170, 175, 62, 202, 198, 76, 62, 36, 135, 87, 61, 95, 161, 213, 61, 130, 181, 171, 191, 147, 30, 247, 61, 52, 107, 170, 191, 247, 10, 239, 190, 192, 18, 169, 189, 217, 107, 148, 61, 69, 80, 148, 62, 154, 219, 192, 188, 34, 127, 209, 60, 100, 30, 14, 62, 77, 71, 155, 190, 192, 118, 225, 62, 117, 97, 102, 61, 254, 226, 80, 190, 95, 207, 41, 62, 220, 200, 58, 61, 29, 245, 154, 189, 141, 172, 107, 61, 46, 109, 252, 189, 17, 165, 162, 189, 119, 196, 182, 189, 209, 87, 250, 189, 40, 80, 68, 61, 138, 151, 6, 62, 223, 219, 127, 61, 0, 56, 175, 189, 210, 219, 44, 190, 171, 208, 244, 61, 187, 167, 198, 189, 238, 41, 34, 190, 101, 246, 108, 189, 178, 180, 11, 62, 133, 177, 218, 61, 54, 44, 153, 61, 171, 101, 8, 190, 34, 189, 2, 59, 127, 136, 130, 189, 179, 108, 252, 60, 134, 243, 52, 188, 226, 225, 119, 188, 5, 71, 158, 189, 58, 253, 54, 61, 227, 202, 190, 189, 120, 44, 10, 62, 251, 204, 198, 189, 209, 65, 47, 190, 233, 216, 149, 62, 7, 7, 8, 191, 180, 58, 158, 190, 251, 236, 60, 62, 56, 87, 48, 190, 52, 225, 99, 190, 109, 26, 214, 190, 206, 146, 144, 61, 18, 144, 24, 191, 87, 208, 61, 189, 228, 77, 125, 189, 9, 47, 234, 61, 31, 217, 170, 62, 118, 95, 10, 188, 132, 77, 227, 62, 202, 133, 122, 62, 141, 11, 18, 190, 206, 202, 136, 187, 80, 29, 13, 191, 120, 55, 7, 62, 29, 32, 13, 191, 28, 58, 11, 191, 157, 109, 1, 60, 111, 94, 172, 190, 228, 86, 135, 62, 161, 162, 72, 187, 129, 197, 133, 62, 153, 194, 155, 61, 123, 227, 94, 190, 86, 177, 139, 62, 49, 97, 78, 188, 98, 18, 70, 61, 31, 54, 6, 62, 146, 67, 91, 191, 238, 211, 7, 190, 25, 86, 97, 62, 225, 52, 86, 190, 20, 4, 39, 191, 21, 39, 7, 191, 3, 37, 43, 62, 149, 168, 87, 191, 200, 157, 250, 190, 10, 9, 180, 61, 139, 127, 137, 187, 174, 214, 245, 187, 204, 37, 128, 60, 179, 218, 167, 62, 78, 203, 240, 62, 166, 35, 172, 189, 216, 143, 179, 190, 223, 182, 198, 189, 60, 86, 151, 61, 116, 127, 60, 61, 125, 67, 225, 189, 246, 111, 101, 61, 138, 51, 186, 190, 173, 121, 61, 62, 103, 209, 103, 190, 153, 13, 72, 62, 246, 217, 44, 189, 211, 176, 60, 191, 102, 89, 179, 62, 216, 35, 170, 62, 121, 226, 155, 187, 142, 85, 165, 190, 157, 214, 228, 62, 9, 34, 25, 191, 27, 28, 29, 190, 193, 7, 120, 61, 3, 137, 208, 62, 219, 125, 131, 62, 210, 125, 152, 190, 152, 233, 169, 62, 252, 198, 16, 63, 185, 216, 162, 61, 212, 183, 11, 62, 113, 252, 10, 63, 153, 169, 12, 191, 63, 230, 51, 190, 238, 196, 167, 190, 68, 89, 53, 62, 100, 54, 81, 62, 150, 174, 74, 62, 176, 79, 48, 62, 142, 161, 145, 61, 177, 230, 150, 189, 229, 83, 190, 189, 254, 131, 82, 62, 252, 72, 190, 190, 39, 118, 148, 60, 137, 147, 179, 190, 151, 238, 228, 62, 204, 150, 245, 62, 178, 40, 145, 62, 166, 160, 60, 190, 141, 116, 207, 190, 129, 250, 151, 60, 174, 103, 84, 62, 14, 105, 103, 191, 4, 227, 224, 190, 233, 164, 192, 190, 214, 241, 22, 62, 86, 155, 168, 61, 23, 186, 217, 190, 102, 96, 161, 190, 23, 180, 209, 61, 140, 110, 183, 61, 231, 27, 244, 61, 44, 18, 175, 62, 204, 235, 81, 190, 73, 81, 152, 190, 131, 91, 136, 189, 113, 14, 223, 61, 58, 121, 105, 62, 215, 164, 211, 189, 99, 93, 51, 61, 36, 209, 70, 62, 124, 42, 88, 62, 238, 177, 77, 62, 118, 124, 85, 186, 116, 73, 94, 190, 89, 220, 98, 189, 193, 8, 160, 190, 104, 105, 184, 190, 32, 252, 140, 62, 134, 188, 191, 62, 204, 31, 123, 190, 4, 231, 149, 191, 120, 76, 132, 61, 233, 147, 65, 189, 127, 129, 7, 62, 117, 70, 10, 190, 44, 206, 130, 189, 107, 247, 146, 189, 73, 187, 237, 189, 88, 11, 64, 189, 102, 90, 120, 61, 185, 101, 244, 61, 170, 9, 81, 189, 138, 238, 147, 188, 143, 17, 29, 190, 71, 67, 6, 62, 135, 213, 0, 189, 19, 143, 161, 189, 142, 136, 113, 188, 16, 151, 146, 61, 182, 239, 19, 190, 142, 216, 229, 61, 154, 246, 7, 61, 73, 146, 82, 188, 72, 71, 87, 60, 172, 119, 9, 190, 19, 4, 230, 61, 148, 75, 98, 60, 86, 137, 22, 190, 173, 44, 12, 190, 147, 224, 254, 189, 1, 250, 32, 189, 134, 39, 190, 189, 113, 143, 152, 61, 35, 246, 178, 190, 187, 41, 77, 58, 74, 105, 155, 191, 242, 131, 108, 190, 37, 101, 118, 59, 38, 87, 193, 62, 185, 203, 132, 189, 181, 126, 171, 190, 208, 57, 215, 190, 200, 70, 141, 189, 58, 169, 23, 62, 208, 24, 146, 61, 225, 129, 252, 61, 183, 117, 15, 190, 82, 192, 157, 61, 78, 210, 240, 61, 72, 24, 106, 61, 173, 196, 211, 189, 186, 64, 214, 190, 196, 164, 57, 62, 20, 193, 146, 191, 162, 245, 163, 61, 49, 117, 75, 190, 86, 70, 54, 189, 111, 88, 174, 189, 254, 226, 139, 187, 163, 58, 116, 62, 97, 81, 133, 190, 231, 151, 4, 189, 163, 156, 203, 62, 211, 11, 52, 190, 41, 241, 22, 190, 211, 123, 196, 190, 83, 66, 169, 62, 119, 150, 128, 190, 188, 8, 100, 190, 153, 22, 173, 61, 160, 105, 205, 189, 125, 245, 132, 190, 3, 86, 2, 62, 176, 71, 136, 190, 7, 11, 165, 62, 172, 195, 185, 61, 159, 163, 41, 62, 26, 110, 160, 62, 178, 70, 49, 191, 78, 150, 203, 189, 68, 222, 158, 190, 75, 232, 186, 189, 6, 45, 199, 190, 99, 171, 120, 62, 215, 177, 10, 62, 77, 173, 228, 62, 182, 246, 133, 62, 136, 59, 58, 62, 98, 85, 142, 190, 42, 95, 161, 190, 74, 182, 138, 190, 63, 20, 126, 190, 178, 121, 224, 61, 87, 228, 40, 190, 67, 209, 130, 62, 32, 132, 54, 189, 81, 228, 14, 61, 224, 198, 250, 188, 200, 73, 101, 191, 248, 248, 26, 190, 83, 184, 85, 62, 226, 123, 184, 60, 226, 78, 205, 190, 151, 240, 28, 191, 127, 24, 152, 62, 175, 76, 79, 191, 251, 58, 193, 190, 179, 39, 249, 61, 130, 12, 13, 190, 223, 216, 179, 60, 111, 41, 168, 62, 1, 117, 201, 62, 42, 68, 140, 62, 80, 11, 123, 190, 183, 98, 78, 190, 15, 178, 202, 190, 48, 52, 136, 62, 216, 76, 187, 188, 189, 95, 194, 188, 201, 123, 66, 62, 242, 164, 81, 190, 167, 102, 35, 62, 48, 39, 237, 190, 148, 109, 121, 62, 52, 43, 148, 190, 168, 169, 21, 191, 242, 151, 171, 62, 32, 194, 60, 62, 100, 138, 14, 190, 252, 18, 206, 62, 238, 229, 229, 190, 235, 12, 36, 190, 45, 247, 84, 62, 83, 97, 243, 188, 21, 131, 5, 191, 81, 75, 36, 191, 238, 31, 120, 61, 37, 138, 38, 191, 42, 210, 127, 190, 38, 235, 4, 188, 219, 14, 73, 189, 59, 211, 17, 190, 24, 214, 5, 62, 129, 20, 247, 62, 10, 83, 19, 63, 46, 228, 70, 190, 136, 232, 148, 190, 95, 169, 28, 191, 128, 240, 38, 62, 55, 134, 242, 190, 89, 229, 198, 190, 151, 148, 197, 189, 97, 239, 176, 190, 236, 122, 135, 62, 7, 20, 171, 61, 171, 36, 137, 62, 236, 212, 150, 189, 49, 218, 36, 190, 39, 3, 170, 62, 118, 218, 24, 61, 209, 80, 203, 61, 175, 10, 118, 60, 62, 128, 48, 189, 18, 154, 29, 190, 200, 61, 11, 190, 34, 169, 48, 188, 111, 200, 26, 62, 237, 170, 44, 190, 67, 169, 152, 61, 81, 227, 48, 190, 26, 44, 211, 61, 122, 101, 254, 189, 135, 238, 145, 60, 218, 97, 121, 189, 151, 207, 203, 189, 45, 53, 160, 61, 192, 74, 232, 189, 57, 250, 58, 61, 104, 50, 10, 60, 141, 227, 37, 188, 231, 138, 230, 189, 67, 142, 191, 189, 5, 233, 228, 189, 31, 192, 7, 190, 72, 13, 23, 60, 61, 135, 195, 61, 78, 136, 43, 190, 232, 111, 255, 188, 164, 131, 200, 189, 239, 192, 186, 189, 152, 155, 85, 61, 20, 72, 3, 61, 173, 181, 6, 190, 168, 243, 86, 189, 179, 252, 141, 62, 17, 33, 148, 190, 42, 33, 2, 190, 40, 13, 162, 61, 174, 173, 27, 61, 58, 157, 205, 62, 57, 205, 171, 61, 154, 242, 195, 62, 150, 9, 106, 58, 69, 208, 4, 188, 25, 35, 212, 61, 105, 78, 249, 62, 20, 88, 175, 190, 13, 76, 84, 190, 82, 40, 166, 189, 25, 61, 172, 62, 87, 18, 72, 62, 243, 106, 61, 190, 98, 119, 208, 190, 27, 232, 20, 188, 16, 140, 162, 190, 164, 69, 44, 190, 204, 21, 225, 62, 133, 223, 223, 189, 254, 114, 142, 189, 146, 241, 3, 188, 101, 17, 22, 62, 111, 6, 204, 189, 112, 72, 80, 190, 95, 239, 108, 190, 125, 9, 31, 190, 61, 46, 234, 189, 190, 238, 226, 62, 7, 46, 124, 62, 36, 34, 222, 189, 248, 11, 217, 187, 218, 209, 97, 190, 14, 116, 224, 62, 73, 76, 120, 61, 166, 87, 160, 62, 255, 44, 177, 60, 48, 222, 192, 61, 59, 139, 34, 190, 238, 179, 73, 188, 17, 226, 32, 190, 61, 206, 116, 190, 17, 233, 147, 190, 155, 72, 179, 61, 11, 27, 33, 62, 83, 199, 210, 61, 217, 157, 153, 191, 105, 214, 99, 189, 33, 171, 128, 191, 134, 229, 63, 190, 17, 231, 148, 62, 80, 246, 250, 190, 67, 226, 174, 190, 156, 16, 235, 60, 41, 108, 17, 191, 249, 137, 183, 189, 217, 170, 45, 62, 184, 57, 47, 190, 80, 87, 247, 61, 65, 100, 11, 190, 224, 157, 130, 188, 151, 237, 87, 60, 70, 233, 39, 190, 115, 241, 0, 61, 253, 228, 20, 62, 224, 171, 59, 61, 35, 143, 144, 189, 21, 99, 211, 189, 254, 102, 247, 189, 182, 33, 118, 61, 105, 243, 190, 60, 92, 181, 45, 189, 246, 226, 132, 61, 117, 1, 49, 190, 49, 95, 123, 189, 245, 99, 14, 190, 168, 188, 153, 60, 132, 53, 189, 61, 168, 161, 31, 190, 229, 128, 145, 183, 54, 52, 211, 56, 215, 59, 168, 189, 211, 131, 166, 61, 72, 112, 49, 190, 50, 201, 196, 189, 220, 209, 14, 190, 57, 48, 215, 60, 147, 132, 13, 190, 202, 105, 205, 61, 89, 7, 78, 189, 206, 32, 90, 189, 135, 80, 10, 190, 219, 59, 90, 62, 200, 183, 168, 190, 250, 177, 71, 190, 198, 232, 168, 60, 211, 255, 44, 59, 140, 254, 151, 62, 71, 155, 40, 62, 103, 30, 6, 63, 248, 29, 149, 62, 254, 110, 246, 59, 7, 214, 88, 62, 76, 92, 219, 62, 189, 193, 94, 191, 173, 15, 165, 190, 243, 90, 139, 190, 126, 30, 171, 62, 198, 188, 221, 62, 177, 86, 87, 188, 214, 233, 41, 190, 64, 232, 175, 189, 192, 130, 37, 190, 37, 146, 250, 188, 228, 36, 195, 62, 101, 51, 147, 190, 150, 79, 103, 189, 246, 114, 175, 189, 155, 113, 42, 62, 195, 42, 167, 190, 183, 81, 125, 190, 38, 94, 40, 190, 15, 94, 62, 61, 118, 57, 167, 190, 7, 79, 170, 62, 144, 128, 175, 191, 100, 41, 129, 190, 186, 249, 208, 189, 79, 75, 165, 62, 52, 236, 229, 61, 72, 81, 38, 190, 53, 54, 179, 189, 19, 59, 247, 62, 188, 56, 28, 190, 147, 34, 20, 62, 128, 250, 176, 62, 118, 240, 198, 190, 172, 210, 153, 190, 227, 24, 45, 61, 147, 138, 218, 62, 12, 125, 119, 62, 20, 199, 109, 61, 170, 113, 0, 62, 202, 26, 48, 62, 142, 19, 0, 62, 164, 111, 158, 61, 90, 107, 122, 59, 236, 25, 205, 189, 55, 171, 165, 189, 32, 12, 56, 190, 83, 244, 156, 62, 173, 239, 141, 62, 215, 187, 0, 62, 151, 62, 244, 189, 34, 118, 158, 191, 44, 78, 100, 190, 193, 202, 0, 62, 243, 42, 158, 189, 243, 119, 155, 190, 190, 19, 83, 187, 127, 152, 173, 59, 66, 220, 133, 190, 71, 104, 228, 189, 159, 162, 149, 189, 32, 5, 144, 62, 242, 164, 11, 62, 67, 248, 31, 62, 252, 141, 11, 63, 77, 27, 242, 190, 39, 253, 196, 190, 198, 108, 136, 190, 154, 161, 11, 61, 57, 203, 19, 190, 58, 7, 61, 62, 213, 160, 23, 62, 130, 249, 169, 62, 210, 139, 104, 62, 209, 61, 85, 62, 95, 5, 48, 190, 115, 82, 61, 190, 96, 27, 157, 61, 188, 27, 172, 189, 4, 93, 90, 61, 59, 197, 57, 188, 55, 51, 92, 62, 207, 211, 30, 190, 57, 18, 231, 189, 9, 179, 8, 190, 116, 158, 216, 190, 237, 98, 167, 190, 0, 254, 129, 62, 111, 59, 11, 62, 109, 81, 189, 190, 183, 92, 11, 190, 204, 57, 63, 62, 186, 128, 106, 191, 126, 155, 215, 187, 61, 204, 50, 189, 176, 141, 24, 61, 181, 215, 184, 60, 181, 189, 158, 190, 200, 241, 69, 62, 167, 225, 129, 62, 232, 76, 20, 189, 54, 175, 145, 190, 85, 35, 137, 190, 101, 124, 143, 60, 102, 81, 30, 190, 57, 224, 131, 62, 64, 17, 132, 62, 30, 226, 141, 189, 133, 165, 197, 61, 218, 13, 250, 189, 44, 182, 29, 62, 100, 137, 69, 59, 117, 199, 0, 191, 141, 150, 218, 62, 129, 69, 43, 62, 30, 150, 244, 189, 186, 91, 73, 61, 28, 110, 114, 62, 197, 166, 107, 190, 218, 152, 250, 187, 105, 155, 162, 189, 117, 230, 2, 191, 214, 22, 1, 62, 35, 93, 23, 62, 195, 230, 12, 61, 102, 133, 140, 61, 87, 115, 216, 61, 114, 122, 41, 62, 73, 202, 7, 63, 51, 13, 85, 191, 69, 190, 47, 189, 86, 163, 165, 189, 38, 41, 157, 61, 60, 110, 51, 190, 175, 177, 106, 61, 0, 150, 44, 190, 235, 166, 119, 190, 59, 5, 18, 191, 86, 213, 106, 190, 190, 144, 42, 60, 91, 70, 157, 190, 83, 188, 44, 190, 158, 143, 31, 62, 8, 176, 121, 62, 4, 218, 33, 191, 174, 165, 252, 62, 162, 87, 133, 189, 167, 214, 35, 189, 217, 40, 8, 190, 237, 14, 76, 60, 93, 185, 187, 60, 163, 55, 249, 61, 208, 217, 191, 189, 74, 73, 113, 189, 55, 237, 232, 189, 62, 53, 16, 62, 29, 44, 17, 190, 98, 136, 4, 190, 125, 2, 18, 62, 39, 164, 174, 61, 173, 203, 214, 189, 87, 220, 179, 61, 145, 141, 80, 189, 99, 224, 25, 190, 14, 55, 32, 190, 76, 89, 218, 61, 58, 199, 164, 61, 99, 65, 168, 189, 68, 100, 45, 190, 254, 99, 16, 190, 36, 17, 220, 188, 94, 151, 27, 188, 236, 105, 31, 190, 153, 254, 52, 190, 216, 76, 252, 189, 72, 26, 212, 189, 213, 191, 176, 189, 208, 117, 3, 62, 169, 161, 140, 189, 211, 22, 205, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 95, 27, 190, 70, 119, 157, 188, 226, 6, 143, 189, 117, 185, 159, 62, 75, 207, 126, 189, 22, 25, 197, 61, 189, 213, 44, 188, 43, 253, 184, 61, 41, 179, 173, 62, 211, 84, 150, 189, 199, 221, 59, 190, 64, 129, 12, 62, 23, 221, 32, 189, 220, 252, 183, 57, 156, 107, 15, 62, 159, 156, 24, 189, 39, 187, 20, 189, 212, 11, 202, 189, 1, 181, 52, 62, 188, 199, 157, 62, 188, 54, 204, 61, 254, 4, 6, 190, 79, 37, 239, 189, 77, 173, 22, 189, 183, 56, 145, 190, 245, 217, 48, 190, 155, 245, 45, 189, 83, 215, 254, 61, 228, 145, 160, 61, 15, 141, 10, 189, 212, 238, 195, 61, 208, 27, 50, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {54, 152, 136, 61, 184, 193, 161, 190, 100, 113, 132, 63, 2, 131, 50, 62, 196, 37, 238, 62, 172, 244, 66, 62, 52, 159, 103, 62, 196, 2, 167, 190, 202, 79, 150, 191, 212, 64, 239, 60, 139, 177, 215, 62, 79, 3, 61, 191, 131, 117, 40, 190, 253, 160, 197, 190, 107, 241, 192, 190, 151, 158, 53, 63, 239, 93, 2, 63, 60, 247, 141, 189, 166, 80, 237, 189, 146, 113, 233, 62, 118, 125, 35, 191, 72, 115, 229, 190, 71, 246, 203, 61, 243, 161, 150, 62, 47, 130, 98, 191, 241, 103, 222, 61, 73, 92, 213, 62, 137, 162, 11, 63, 253, 193, 125, 62, 20, 92, 70, 190, 218, 218, 161, 62, 176, 159, 174, 189, 176, 40, 236, 61, 194, 192, 149, 62, 1, 150, 47, 63, 62, 88, 62, 190, 31, 191, 145, 189, 51, 246, 24, 62, 188, 6, 7, 190, 211, 127, 154, 190, 18, 40, 120, 62, 166, 123, 166, 61, 91, 3, 136, 62, 93, 142, 224, 60, 153, 207, 96, 61, 136, 82, 6, 190, 154, 172, 104, 190, 6, 19, 135, 62, 39, 200, 86, 61, 4, 57, 88, 189, 45, 254, 31, 191, 100, 22, 15, 60, 85, 232, 192, 61, 167, 200, 97, 62, 19, 40, 241, 189, 236, 22, 85, 61, 186, 107, 68, 61, 207, 23, 175, 61, 162, 9, 25, 62, 46, 101, 28, 190, 233, 151, 183, 189, 143, 154, 172, 190, 26, 124, 181, 190, 89, 124, 19, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 93, 192, 189, 115, 101, 239, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {135, 101, 176, 190, 102, 77, 44, 62, 210, 208, 233, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {160, 185, 62, 63, 14, 61, 29, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0088/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}