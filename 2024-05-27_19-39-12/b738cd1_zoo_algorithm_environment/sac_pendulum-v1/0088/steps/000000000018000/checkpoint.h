// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 142, 49, 63, 242, 38, 148, 60, 66, 20, 140, 62, 193, 57, 164, 62, 110, 70, 135, 191, 30, 63, 115, 190, 173, 221, 143, 190, 43, 37, 244, 191, 193, 177, 185, 190, 137, 205, 63, 191, 204, 206, 241, 62, 102, 103, 76, 191, 164, 155, 18, 62, 254, 36, 22, 63, 16, 81, 120, 63, 211, 74, 55, 191, 208, 254, 176, 63, 144, 112, 121, 62, 243, 113, 229, 62, 120, 7, 143, 191, 11, 78, 4, 191, 217, 196, 230, 190, 163, 37, 129, 191, 25, 63, 159, 62, 92, 10, 52, 63, 65, 234, 171, 190, 126, 51, 135, 190, 206, 45, 54, 61, 105, 47, 175, 190, 207, 196, 227, 62, 183, 195, 78, 189, 233, 129, 162, 191, 105, 130, 121, 190, 26, 242, 243, 189, 168, 208, 24, 191, 122, 115, 94, 60, 222, 54, 56, 63, 18, 192, 72, 191, 51, 234, 186, 189, 245, 218, 40, 63, 214, 6, 152, 63, 143, 36, 166, 62, 68, 59, 193, 60, 45, 201, 83, 63, 207, 19, 192, 190, 10, 44, 62, 62, 222, 210, 103, 63, 200, 163, 147, 190, 8, 252, 245, 62, 61, 88, 210, 189, 74, 96, 30, 191, 44, 43, 5, 62, 223, 157, 102, 61, 125, 20, 235, 190, 95, 241, 145, 190, 112, 43, 146, 191, 79, 107, 116, 190, 141, 253, 19, 190, 10, 173, 251, 62, 36, 119, 179, 61, 201, 167, 208, 190, 222, 99, 154, 191, 161, 180, 117, 190, 203, 207, 147, 191, 117, 177, 207, 188, 84, 63, 120, 59, 238, 38, 124, 191, 98, 134, 172, 62, 252, 95, 98, 189, 7, 4, 62, 62, 103, 21, 146, 62, 48, 3, 213, 190, 108, 221, 51, 63, 174, 185, 152, 63, 148, 123, 253, 62, 102, 201, 248, 61, 223, 245, 198, 63, 18, 68, 5, 63, 81, 83, 249, 62, 76, 29, 175, 188, 27, 20, 2, 63, 45, 150, 175, 61, 167, 187, 105, 191, 195, 180, 208, 62, 34, 244, 70, 190, 142, 80, 219, 63, 188, 158, 160, 62, 192, 251, 84, 63, 87, 27, 144, 62, 52, 72, 153, 188, 77, 239, 254, 190, 220, 222, 45, 190, 220, 56, 209, 62, 68, 2, 172, 190, 172, 170, 147, 191, 111, 99, 203, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 238, 119, 191, 176, 114, 157, 189, 214, 189, 120, 59, 205, 156, 29, 59, 38, 132, 132, 62, 186, 14, 219, 190, 74, 0, 175, 190, 74, 171, 250, 190, 244, 9, 108, 191, 100, 30, 225, 188, 211, 253, 188, 62, 180, 85, 17, 63, 188, 97, 166, 189, 231, 132, 190, 190, 126, 220, 12, 187, 179, 113, 48, 62, 71, 72, 116, 61, 164, 191, 32, 190, 126, 211, 186, 62, 189, 154, 202, 62, 63, 217, 211, 62, 45, 60, 219, 189, 230, 36, 225, 62, 129, 156, 156, 190, 204, 205, 197, 61, 175, 203, 33, 62, 51, 131, 140, 62, 195, 93, 209, 186, 20, 192, 77, 190, 175, 36, 72, 190, 163, 161, 233, 190, 72, 230, 10, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 140, 217, 189, 15, 21, 32, 62, 198, 253, 40, 190, 205, 189, 95, 59, 26, 98, 228, 60, 58, 44, 171, 189, 153, 13, 47, 59, 93, 48, 246, 188, 96, 225, 7, 190, 233, 144, 207, 189, 21, 239, 128, 189, 108, 94, 205, 187, 240, 31, 42, 190, 129, 197, 53, 188, 190, 51, 4, 190, 27, 24, 98, 60, 233, 57, 169, 188, 159, 94, 36, 61, 184, 52, 162, 189, 25, 128, 12, 189, 85, 112, 37, 60, 198, 168, 177, 189, 140, 67, 1, 61, 243, 39, 206, 189, 16, 147, 180, 61, 59, 0, 63, 189, 225, 28, 64, 190, 182, 22, 208, 189, 209, 191, 17, 62, 96, 90, 134, 189, 127, 133, 199, 188, 189, 219, 33, 190, 106, 129, 52, 189, 78, 135, 50, 191, 103, 123, 200, 190, 239, 49, 64, 61, 209, 129, 205, 188, 92, 44, 145, 190, 155, 135, 21, 191, 181, 157, 6, 191, 71, 134, 11, 191, 145, 217, 253, 190, 20, 239, 59, 190, 242, 214, 15, 190, 146, 83, 125, 61, 4, 41, 105, 62, 101, 58, 188, 62, 80, 139, 118, 62, 161, 14, 11, 61, 238, 106, 73, 190, 61, 210, 100, 191, 248, 18, 246, 187, 125, 141, 43, 191, 128, 106, 142, 190, 221, 3, 201, 61, 217, 62, 1, 191, 211, 97, 65, 62, 99, 9, 28, 62, 6, 177, 167, 188, 149, 216, 28, 191, 116, 198, 134, 190, 175, 113, 217, 62, 47, 159, 205, 190, 10, 115, 54, 189, 26, 161, 240, 190, 203, 106, 8, 63, 104, 110, 198, 191, 171, 11, 195, 189, 122, 57, 24, 188, 138, 8, 46, 62, 6, 1, 162, 62, 143, 87, 4, 190, 104, 7, 80, 63, 56, 146, 168, 62, 205, 166, 173, 61, 47, 112, 86, 62, 37, 229, 38, 63, 2, 122, 66, 191, 18, 130, 81, 189, 236, 69, 254, 190, 157, 222, 86, 57, 171, 187, 180, 62, 152, 91, 218, 62, 242, 76, 168, 189, 144, 92, 9, 62, 230, 160, 30, 190, 100, 73, 90, 61, 61, 54, 11, 63, 77, 228, 138, 190, 147, 161, 56, 61, 35, 112, 70, 189, 33, 130, 157, 61, 42, 41, 44, 62, 85, 123, 143, 189, 133, 226, 40, 190, 173, 24, 230, 191, 246, 86, 189, 59, 17, 130, 45, 62, 191, 243, 172, 190, 244, 83, 242, 189, 109, 186, 247, 187, 52, 243, 101, 62, 77, 1, 30, 190, 96, 207, 79, 190, 32, 148, 77, 189, 198, 229, 159, 62, 94, 62, 128, 60, 209, 252, 72, 62, 243, 197, 160, 62, 31, 134, 245, 190, 152, 28, 141, 189, 66, 239, 7, 62, 251, 55, 226, 61, 37, 202, 73, 61, 184, 171, 193, 62, 242, 219, 138, 62, 85, 130, 58, 61, 78, 130, 122, 62, 22, 225, 139, 61, 213, 72, 144, 190, 64, 1, 90, 61, 115, 107, 228, 61, 129, 21, 188, 189, 157, 52, 15, 189, 93, 205, 160, 62, 90, 226, 243, 61, 185, 122, 184, 189, 73, 53, 224, 189, 108, 114, 65, 189, 147, 141, 93, 190, 244, 41, 25, 61, 51, 240, 165, 62, 128, 230, 54, 191, 241, 166, 112, 191, 153, 108, 48, 190, 204, 180, 168, 63, 225, 147, 13, 63, 109, 236, 142, 61, 142, 23, 191, 61, 6, 1, 30, 60, 59, 53, 168, 62, 81, 206, 194, 60, 151, 81, 79, 62, 202, 94, 56, 62, 38, 144, 25, 62, 140, 237, 247, 61, 118, 131, 72, 188, 116, 73, 98, 61, 45, 25, 50, 187, 239, 58, 222, 189, 94, 181, 142, 61, 148, 145, 37, 62, 220, 167, 243, 61, 176, 191, 227, 190, 147, 1, 3, 190, 13, 91, 196, 189, 151, 161, 18, 62, 146, 54, 25, 62, 222, 27, 65, 58, 122, 118, 191, 62, 66, 138, 195, 188, 171, 236, 133, 190, 0, 75, 60, 190, 4, 252, 157, 189, 205, 3, 184, 61, 248, 54, 8, 61, 229, 115, 201, 61, 98, 121, 24, 190, 230, 61, 137, 188, 40, 205, 197, 190, 184, 241, 102, 190, 139, 7, 104, 189, 202, 62, 130, 190, 78, 14, 152, 190, 66, 183, 42, 190, 243, 75, 228, 189, 223, 225, 84, 61, 203, 125, 30, 61, 1, 165, 158, 189, 128, 216, 199, 189, 111, 44, 37, 189, 92, 30, 155, 61, 107, 247, 248, 61, 159, 199, 208, 189, 52, 119, 18, 191, 103, 190, 193, 189, 29, 50, 15, 191, 152, 9, 99, 190, 74, 36, 62, 61, 78, 69, 64, 190, 212, 145, 174, 190, 166, 77, 214, 190, 82, 83, 26, 190, 137, 227, 7, 62, 11, 140, 145, 191, 38, 75, 157, 189, 13, 213, 46, 62, 106, 110, 250, 62, 71, 97, 100, 62, 246, 190, 126, 190, 86, 15, 161, 189, 154, 34, 179, 62, 69, 196, 18, 62, 173, 33, 5, 62, 113, 106, 140, 62, 133, 41, 64, 190, 112, 142, 7, 191, 192, 179, 11, 191, 151, 100, 224, 61, 94, 240, 27, 190, 108, 14, 252, 61, 216, 240, 76, 190, 234, 76, 132, 62, 250, 18, 64, 62, 129, 49, 185, 62, 7, 91, 16, 190, 140, 234, 40, 189, 79, 89, 208, 61, 167, 14, 244, 60, 61, 93, 84, 62, 175, 100, 54, 62, 6, 185, 72, 190, 49, 80, 156, 188, 106, 118, 147, 191, 10, 163, 163, 59, 130, 164, 138, 190, 133, 217, 81, 62, 6, 82, 110, 189, 198, 207, 160, 190, 38, 112, 127, 191, 107, 231, 49, 61, 179, 209, 91, 189, 166, 102, 234, 190, 75, 8, 54, 191, 184, 244, 129, 62, 156, 52, 122, 61, 35, 182, 140, 61, 247, 93, 19, 62, 118, 81, 32, 62, 59, 16, 167, 62, 162, 246, 5, 62, 115, 191, 215, 188, 99, 108, 64, 62, 161, 179, 27, 62, 32, 95, 252, 60, 42, 221, 18, 62, 163, 118, 91, 62, 180, 233, 174, 190, 19, 162, 4, 190, 221, 93, 164, 191, 221, 43, 134, 188, 46, 77, 66, 191, 249, 232, 80, 191, 12, 95, 90, 190, 172, 185, 19, 63, 148, 37, 14, 61, 97, 191, 63, 188, 30, 108, 40, 191, 96, 124, 131, 189, 157, 6, 155, 62, 239, 20, 171, 191, 36, 185, 148, 191, 205, 153, 173, 190, 239, 42, 98, 188, 207, 176, 137, 191, 201, 54, 175, 190, 112, 66, 213, 60, 64, 0, 206, 62, 90, 37, 224, 62, 12, 114, 4, 190, 252, 133, 191, 60, 3, 123, 28, 189, 222, 104, 157, 189, 13, 37, 63, 189, 237, 248, 211, 61, 129, 135, 165, 61, 138, 246, 71, 61, 95, 169, 3, 63, 114, 194, 191, 62, 61, 52, 162, 190, 185, 192, 1, 191, 243, 167, 9, 192, 13, 20, 130, 62, 63, 113, 217, 190, 250, 197, 159, 191, 56, 182, 189, 62, 50, 48, 14, 63, 148, 65, 32, 62, 94, 102, 255, 188, 19, 145, 224, 189, 61, 62, 3, 62, 111, 171, 251, 188, 116, 208, 63, 60, 159, 114, 221, 188, 15, 17, 34, 190, 128, 60, 189, 61, 136, 205, 168, 189, 219, 32, 19, 190, 75, 249, 251, 189, 9, 127, 91, 60, 123, 241, 17, 61, 58, 177, 163, 60, 88, 235, 167, 189, 41, 219, 190, 61, 148, 164, 103, 188, 146, 62, 144, 61, 229, 136, 21, 190, 144, 29, 1, 62, 140, 111, 101, 60, 104, 62, 129, 61, 38, 47, 221, 189, 221, 8, 52, 61, 27, 200, 30, 190, 224, 50, 254, 189, 120, 59, 0, 190, 231, 117, 249, 61, 157, 240, 166, 61, 146, 241, 69, 61, 16, 209, 84, 61, 93, 171, 64, 190, 42, 121, 51, 190, 18, 31, 205, 190, 174, 76, 193, 62, 167, 147, 62, 62, 181, 147, 215, 190, 57, 203, 12, 191, 51, 226, 104, 190, 204, 3, 48, 63, 238, 115, 24, 63, 42, 59, 187, 190, 76, 53, 225, 61, 203, 52, 161, 190, 246, 109, 52, 191, 196, 157, 43, 61, 129, 154, 52, 62, 223, 105, 172, 186, 236, 40, 21, 190, 7, 70, 162, 189, 92, 53, 114, 189, 162, 135, 31, 190, 123, 199, 9, 62, 5, 168, 147, 61, 76, 3, 204, 61, 73, 126, 13, 61, 58, 112, 71, 190, 33, 207, 186, 188, 183, 38, 136, 189, 46, 50, 211, 190, 75, 35, 245, 190, 157, 42, 46, 191, 66, 134, 209, 190, 10, 14, 151, 62, 92, 54, 115, 62, 242, 180, 231, 190, 141, 63, 20, 191, 11, 29, 39, 62, 166, 223, 156, 61, 98, 37, 137, 190, 79, 84, 36, 191, 20, 98, 208, 189, 218, 240, 243, 190, 174, 64, 109, 190, 164, 225, 8, 191, 167, 97, 31, 62, 232, 47, 53, 62, 101, 5, 133, 62, 180, 149, 182, 62, 111, 251, 74, 62, 241, 59, 105, 61, 198, 98, 213, 61, 66, 7, 191, 191, 4, 140, 198, 61, 89, 82, 206, 191, 20, 162, 11, 191, 216, 191, 206, 189, 145, 17, 204, 61, 156, 181, 153, 62, 187, 185, 114, 59, 13, 234, 156, 60, 82, 125, 252, 61, 208, 98, 209, 190, 207, 170, 217, 62, 111, 198, 136, 60, 137, 180, 4, 190, 95, 207, 41, 62, 220, 200, 58, 61, 29, 245, 154, 189, 141, 172, 107, 61, 46, 109, 252, 189, 17, 165, 162, 189, 119, 196, 182, 189, 209, 87, 250, 189, 40, 80, 68, 61, 138, 151, 6, 62, 223, 219, 127, 61, 0, 56, 175, 189, 210, 219, 44, 190, 171, 208, 244, 61, 187, 167, 198, 189, 238, 41, 34, 190, 101, 246, 108, 189, 178, 180, 11, 62, 133, 177, 218, 61, 54, 44, 153, 61, 171, 101, 8, 190, 34, 189, 2, 59, 127, 136, 130, 189, 179, 108, 252, 60, 134, 243, 52, 188, 226, 225, 119, 188, 5, 71, 158, 189, 58, 253, 54, 61, 227, 202, 190, 189, 120, 44, 10, 62, 251, 204, 198, 189, 209, 65, 47, 190, 11, 161, 191, 62, 60, 46, 29, 191, 209, 243, 219, 190, 232, 160, 70, 62, 168, 125, 6, 190, 55, 210, 157, 190, 96, 158, 5, 191, 143, 76, 144, 61, 127, 99, 48, 191, 194, 130, 23, 189, 113, 205, 9, 190, 175, 35, 214, 61, 174, 168, 157, 62, 250, 36, 123, 61, 29, 246, 219, 62, 243, 170, 104, 62, 151, 181, 31, 190, 139, 127, 241, 188, 87, 216, 57, 191, 196, 65, 4, 62, 31, 17, 87, 191, 13, 98, 36, 191, 35, 100, 144, 187, 66, 82, 176, 190, 86, 146, 149, 62, 57, 24, 186, 61, 133, 252, 136, 62, 237, 100, 153, 61, 15, 30, 143, 190, 220, 167, 128, 62, 106, 220, 14, 189, 9, 214, 216, 60, 64, 54, 178, 62, 135, 142, 107, 191, 102, 151, 107, 190, 23, 82, 62, 62, 151, 157, 246, 189, 18, 113, 34, 191, 35, 113, 35, 191, 176, 41, 91, 62, 24, 203, 100, 191, 73, 95, 206, 190, 53, 102, 10, 61, 252, 110, 149, 187, 79, 252, 128, 188, 32, 160, 148, 61, 167, 247, 156, 62, 62, 179, 224, 62, 136, 141, 219, 189, 222, 109, 199, 190, 6, 236, 122, 190, 4, 240, 142, 61, 188, 233, 92, 190, 213, 35, 235, 189, 121, 150, 240, 60, 67, 234, 197, 190, 242, 214, 87, 62, 82, 228, 226, 189, 63, 223, 86, 62, 158, 91, 76, 60, 163, 19, 131, 191, 208, 196, 170, 62, 195, 202, 195, 62, 122, 57, 157, 189, 14, 72, 177, 190, 104, 110, 221, 62, 230, 170, 46, 191, 189, 241, 4, 190, 22, 56, 203, 61, 249, 150, 36, 63, 104, 196, 129, 62, 197, 208, 139, 190, 225, 228, 162, 62, 254, 115, 27, 63, 86, 197, 177, 61, 193, 88, 233, 61, 138, 164, 1, 63, 231, 54, 25, 191, 10, 191, 48, 190, 107, 135, 166, 190, 233, 5, 12, 62, 82, 253, 83, 62, 134, 85, 128, 62, 116, 218, 96, 62, 191, 98, 21, 62, 230, 49, 16, 61, 151, 70, 168, 61, 108, 40, 116, 62, 198, 166, 193, 190, 2, 168, 136, 60, 188, 163, 179, 190, 128, 98, 235, 62, 207, 185, 38, 63, 125, 61, 129, 62, 131, 178, 2, 190, 32, 170, 220, 190, 129, 250, 151, 60, 172, 181, 148, 62, 199, 190, 134, 191, 21, 9, 252, 190, 55, 21, 235, 190, 239, 188, 27, 62, 167, 140, 97, 62, 58, 115, 221, 190, 111, 100, 51, 191, 90, 237, 162, 62, 163, 151, 41, 62, 102, 81, 30, 62, 239, 82, 197, 62, 241, 64, 140, 190, 45, 33, 226, 190, 102, 131, 44, 189, 151, 84, 19, 62, 19, 148, 97, 62, 186, 6, 65, 61, 31, 146, 116, 61, 208, 62, 254, 62, 121, 134, 89, 62, 33, 20, 67, 62, 93, 225, 125, 189, 12, 94, 102, 190, 199, 51, 80, 190, 160, 197, 147, 190, 9, 249, 199, 190, 21, 121, 140, 62, 187, 79, 209, 62, 32, 35, 127, 190, 239, 117, 228, 191, 120, 76, 132, 61, 233, 147, 65, 189, 127, 129, 7, 62, 117, 70, 10, 190, 44, 206, 130, 189, 107, 247, 146, 189, 73, 187, 237, 189, 88, 11, 64, 189, 102, 90, 120, 61, 185, 101, 244, 61, 170, 9, 81, 189, 138, 238, 147, 188, 143, 17, 29, 190, 71, 67, 6, 62, 135, 213, 0, 189, 19, 143, 161, 189, 142, 136, 113, 188, 16, 151, 146, 61, 182, 239, 19, 190, 142, 216, 229, 61, 154, 246, 7, 61, 73, 146, 82, 188, 72, 71, 87, 60, 172, 119, 9, 190, 19, 4, 230, 61, 148, 75, 98, 60, 86, 137, 22, 190, 173, 44, 12, 190, 147, 224, 254, 189, 1, 250, 32, 189, 134, 39, 190, 189, 113, 143, 152, 61, 50, 229, 182, 190, 112, 153, 155, 189, 91, 210, 172, 191, 154, 126, 83, 190, 208, 225, 237, 60, 41, 9, 221, 62, 62, 231, 12, 190, 95, 239, 186, 190, 90, 164, 173, 190, 133, 103, 150, 189, 67, 153, 155, 61, 50, 94, 100, 60, 117, 104, 125, 61, 4, 237, 207, 189, 90, 73, 190, 61, 232, 233, 177, 61, 171, 24, 154, 186, 22, 166, 3, 190, 230, 147, 19, 191, 65, 38, 62, 62, 89, 142, 195, 191, 239, 128, 24, 62, 167, 83, 18, 190, 39, 176, 149, 189, 86, 149, 171, 189, 1, 98, 103, 61, 238, 66, 85, 62, 51, 165, 168, 190, 188, 58, 179, 60, 159, 158, 173, 62, 146, 228, 149, 190, 166, 30, 23, 190, 91, 5, 182, 190, 60, 54, 187, 62, 213, 226, 148, 190, 84, 205, 185, 188, 184, 14, 105, 61, 234, 75, 123, 190, 82, 75, 69, 190, 188, 83, 239, 61, 121, 78, 214, 188, 111, 173, 168, 62, 19, 115, 16, 62, 238, 188, 53, 62, 187, 24, 168, 62, 69, 117, 72, 191, 197, 166, 210, 189, 62, 46, 144, 190, 144, 101, 187, 189, 146, 197, 146, 190, 44, 111, 175, 62, 166, 128, 20, 62, 12, 150, 15, 63, 39, 63, 92, 62, 194, 236, 71, 62, 195, 164, 205, 189, 93, 172, 167, 190, 231, 170, 212, 190, 253, 110, 121, 190, 235, 71, 223, 61, 194, 17, 185, 190, 253, 89, 131, 62, 5, 138, 162, 189, 148, 133, 161, 61, 234, 187, 143, 188, 72, 255, 116, 191, 133, 219, 116, 190, 139, 23, 73, 62, 104, 153, 9, 61, 57, 62, 200, 190, 54, 30, 53, 191, 243, 201, 145, 62, 53, 135, 86, 191, 236, 85, 37, 191, 89, 157, 146, 61, 41, 61, 20, 190, 44, 244, 130, 60, 198, 205, 194, 62, 220, 149, 192, 62, 169, 10, 139, 62, 217, 2, 119, 190, 93, 229, 91, 190, 205, 42, 12, 191, 113, 16, 133, 62, 78, 167, 149, 190, 207, 202, 244, 60, 190, 240, 77, 62, 221, 228, 100, 190, 70, 242, 53, 62, 43, 150, 190, 190, 92, 209, 116, 62, 251, 88, 189, 190, 121, 68, 141, 191, 208, 196, 168, 62, 189, 38, 55, 62, 13, 197, 54, 190, 89, 77, 240, 62, 63, 176, 11, 191, 129, 102, 97, 190, 105, 107, 97, 62, 1, 140, 101, 187, 34, 205, 52, 191, 186, 239, 67, 191, 187, 53, 174, 61, 167, 138, 62, 191, 35, 197, 124, 190, 213, 152, 184, 189, 165, 134, 70, 189, 83, 113, 31, 190, 94, 200, 96, 62, 179, 196, 196, 62, 158, 129, 21, 63, 97, 56, 54, 190, 231, 141, 164, 190, 69, 106, 86, 191, 2, 168, 37, 62, 172, 82, 94, 191, 126, 41, 242, 190, 27, 202, 26, 190, 254, 182, 193, 190, 129, 11, 156, 62, 61, 240, 24, 62, 60, 200, 145, 62, 162, 123, 209, 189, 47, 38, 174, 190, 35, 42, 169, 62, 139, 43, 17, 61, 59, 61, 41, 62, 175, 10, 118, 60, 62, 128, 48, 189, 18, 154, 29, 190, 200, 61, 11, 190, 34, 169, 48, 188, 111, 200, 26, 62, 237, 170, 44, 190, 67, 169, 152, 61, 81, 227, 48, 190, 26, 44, 211, 61, 122, 101, 254, 189, 135, 238, 145, 60, 218, 97, 121, 189, 151, 207, 203, 189, 45, 53, 160, 61, 192, 74, 232, 189, 57, 250, 58, 61, 104, 50, 10, 60, 141, 227, 37, 188, 231, 138, 230, 189, 67, 142, 191, 189, 5, 233, 228, 189, 31, 192, 7, 190, 72, 13, 23, 60, 61, 135, 195, 61, 78, 136, 43, 190, 232, 111, 255, 188, 164, 131, 200, 189, 239, 192, 186, 189, 152, 155, 85, 61, 20, 72, 3, 61, 173, 181, 6, 190, 146, 34, 204, 189, 30, 8, 162, 62, 147, 57, 153, 190, 2, 197, 25, 190, 78, 221, 19, 61, 29, 138, 26, 61, 208, 192, 225, 62, 11, 60, 178, 61, 179, 71, 32, 63, 30, 154, 216, 188, 13, 144, 100, 60, 98, 91, 191, 61, 80, 190, 239, 62, 60, 21, 226, 190, 6, 117, 121, 190, 153, 71, 171, 189, 168, 0, 161, 62, 148, 238, 56, 62, 252, 236, 25, 190, 10, 254, 206, 190, 224, 213, 237, 60, 35, 57, 2, 191, 36, 243, 136, 190, 138, 190, 221, 62, 206, 185, 9, 190, 179, 171, 91, 190, 114, 95, 185, 188, 219, 99, 12, 62, 186, 188, 130, 190, 69, 248, 79, 190, 46, 203, 139, 190, 97, 89, 12, 190, 61, 46, 234, 189, 117, 37, 3, 63, 171, 237, 124, 62, 201, 245, 20, 190, 115, 247, 174, 189, 218, 209, 97, 190, 216, 253, 232, 62, 237, 75, 184, 189, 141, 5, 249, 61, 16, 166, 195, 189, 250, 163, 33, 62, 226, 252, 170, 188, 244, 134, 121, 62, 67, 80, 34, 190, 30, 149, 143, 190, 152, 180, 175, 190, 149, 84, 236, 61, 218, 176, 3, 62, 27, 168, 18, 62, 168, 63, 192, 191, 112, 55, 181, 188, 80, 26, 129, 191, 71, 147, 0, 190, 203, 178, 106, 62, 163, 184, 187, 191, 67, 226, 174, 190, 75, 110, 230, 62, 35, 31, 209, 190, 249, 137, 183, 189, 115, 140, 192, 62, 164, 180, 210, 189, 60, 151, 166, 61, 65, 100, 11, 190, 160, 177, 130, 188, 61, 158, 87, 60, 105, 233, 39, 190, 115, 241, 0, 61, 253, 228, 20, 62, 123, 162, 59, 61, 9, 145, 144, 189, 21, 99, 211, 189, 254, 102, 247, 189, 21, 17, 118, 61, 132, 217, 190, 60, 168, 189, 45, 189, 246, 226, 132, 61, 117, 1, 49, 190, 49, 95, 123, 189, 16, 101, 14, 190, 168, 188, 153, 60, 80, 46, 189, 61, 0, 162, 31, 190, 0, 62, 3, 184, 54, 52, 211, 56, 205, 61, 168, 189, 211, 131, 166, 61, 72, 112, 49, 190, 50, 201, 196, 189, 46, 210, 14, 190, 115, 35, 215, 60, 147, 132, 13, 190, 202, 105, 205, 61, 89, 7, 78, 189, 193, 43, 90, 189, 248, 238, 85, 190, 235, 79, 13, 62, 46, 121, 183, 190, 218, 96, 64, 190, 63, 10, 255, 59, 30, 84, 252, 189, 148, 126, 140, 62, 241, 49, 63, 62, 45, 192, 69, 63, 174, 78, 141, 62, 110, 91, 125, 189, 245, 254, 215, 61, 11, 20, 31, 62, 20, 100, 133, 191, 78, 168, 159, 190, 111, 249, 130, 190, 34, 210, 155, 62, 2, 152, 222, 62, 20, 27, 121, 189, 0, 132, 21, 190, 174, 11, 3, 190, 214, 18, 85, 190, 202, 182, 147, 189, 29, 29, 206, 62, 57, 151, 142, 190, 250, 167, 177, 189, 145, 53, 29, 190, 184, 20, 3, 62, 74, 181, 6, 191, 8, 18, 166, 190, 186, 206, 46, 190, 138, 121, 159, 61, 220, 50, 187, 190, 167, 159, 203, 62, 86, 233, 199, 191, 220, 248, 110, 190, 210, 170, 10, 190, 215, 140, 133, 62, 77, 248, 117, 62, 138, 35, 36, 190, 76, 167, 155, 61, 115, 211, 255, 62, 45, 148, 202, 189, 38, 162, 20, 62, 53, 174, 182, 62, 36, 84, 3, 191, 168, 203, 156, 190, 91, 183, 192, 60, 219, 196, 219, 62, 123, 123, 153, 62, 15, 74, 71, 62, 45, 73, 185, 61, 22, 197, 196, 62, 27, 218, 246, 61, 18, 113, 230, 188, 133, 65, 88, 61, 82, 146, 26, 190, 23, 38, 95, 190, 128, 156, 60, 190, 85, 158, 167, 62, 233, 124, 58, 62, 220, 242, 2, 62, 188, 73, 241, 189, 143, 34, 189, 191, 25, 215, 74, 190, 90, 35, 7, 62, 63, 127, 231, 189, 50, 24, 169, 190, 154, 23, 133, 189, 13, 253, 143, 189, 150, 47, 108, 190, 15, 82, 41, 190, 28, 64, 41, 62, 94, 97, 139, 62, 91, 254, 16, 62, 131, 185, 254, 61, 48, 210, 6, 63, 10, 43, 24, 191, 6, 189, 43, 191, 169, 219, 158, 190, 237, 37, 169, 188, 116, 58, 21, 190, 158, 78, 106, 62, 116, 186, 226, 61, 130, 225, 199, 62, 247, 6, 40, 61, 208, 17, 34, 61, 167, 169, 29, 190, 104, 131, 112, 190, 244, 216, 192, 189, 45, 212, 242, 189, 12, 228, 186, 60, 199, 211, 182, 189, 34, 148, 52, 62, 8, 71, 118, 190, 108, 183, 203, 189, 108, 202, 158, 188, 191, 225, 3, 191, 103, 15, 151, 190, 142, 188, 156, 62, 204, 144, 32, 62, 82, 97, 195, 190, 232, 94, 54, 190, 24, 144, 76, 62, 103, 249, 137, 191, 205, 203, 156, 60, 39, 97, 235, 189, 98, 155, 136, 60, 32, 106, 96, 188, 157, 241, 161, 190, 94, 141, 122, 62, 62, 79, 132, 62, 54, 37, 13, 189, 156, 221, 131, 190, 177, 47, 201, 190, 43, 223, 59, 59, 185, 113, 137, 190, 240, 62, 154, 62, 204, 23, 171, 62, 17, 61, 210, 188, 10, 160, 174, 61, 133, 225, 152, 189, 136, 255, 13, 62, 243, 147, 61, 60, 33, 34, 19, 191, 157, 18, 195, 62, 4, 171, 46, 62, 67, 148, 146, 189, 190, 250, 245, 61, 206, 248, 107, 62, 86, 188, 140, 190, 211, 248, 134, 61, 129, 232, 174, 189, 144, 179, 12, 191, 34, 146, 48, 62, 26, 224, 66, 62, 152, 213, 154, 61, 105, 187, 20, 62, 143, 96, 239, 61, 72, 208, 27, 62, 127, 53, 252, 62, 247, 41, 117, 191, 167, 157, 15, 61, 224, 248, 25, 189, 95, 154, 147, 61, 68, 76, 211, 189, 52, 127, 220, 61, 236, 40, 52, 190, 134, 48, 41, 190, 61, 173, 47, 191, 47, 78, 30, 190, 88, 224, 186, 61, 90, 16, 179, 190, 147, 136, 155, 190, 23, 230, 9, 62, 235, 161, 145, 62, 180, 173, 118, 191, 46, 45, 240, 62, 154, 161, 92, 189, 135, 213, 6, 189, 217, 40, 8, 190, 237, 14, 76, 60, 93, 185, 187, 60, 163, 55, 249, 61, 208, 217, 191, 189, 74, 73, 113, 189, 55, 237, 232, 189, 62, 53, 16, 62, 29, 44, 17, 190, 98, 136, 4, 190, 125, 2, 18, 62, 39, 164, 174, 61, 173, 203, 214, 189, 87, 220, 179, 61, 145, 141, 80, 189, 99, 224, 25, 190, 14, 55, 32, 190, 76, 89, 218, 61, 58, 199, 164, 61, 99, 65, 168, 189, 68, 100, 45, 190, 254, 99, 16, 190, 36, 17, 220, 188, 94, 151, 27, 188, 236, 105, 31, 190, 153, 254, 52, 190, 216, 76, 252, 189, 72, 26, 212, 189, 213, 191, 176, 189, 208, 117, 3, 62, 169, 161, 140, 189, 211, 22, 205, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 95, 27, 190, 149, 189, 202, 58, 147, 104, 148, 188, 112, 33, 148, 62, 182, 165, 147, 189, 169, 183, 168, 61, 90, 240, 127, 61, 174, 73, 63, 62, 175, 239, 223, 62, 211, 84, 150, 189, 197, 191, 163, 190, 84, 17, 6, 62, 23, 221, 32, 189, 143, 126, 159, 187, 151, 195, 7, 62, 185, 27, 86, 189, 236, 66, 225, 187, 212, 11, 202, 189, 249, 253, 19, 62, 218, 7, 161, 62, 221, 48, 199, 61, 79, 76, 248, 189, 79, 37, 239, 189, 64, 54, 108, 189, 165, 93, 196, 189, 166, 220, 48, 190, 136, 166, 51, 190, 30, 12, 226, 61, 173, 12, 27, 61, 241, 250, 86, 189, 115, 249, 159, 61, 208, 27, 50, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {54, 152, 136, 61, 73, 113, 74, 191, 207, 233, 157, 63, 156, 54, 23, 62, 88, 171, 241, 62, 15, 246, 74, 62, 11, 115, 149, 62, 213, 164, 155, 190, 110, 167, 175, 191, 212, 64, 239, 60, 189, 59, 211, 62, 94, 42, 91, 191, 131, 117, 40, 190, 135, 128, 221, 190, 17, 64, 192, 190, 64, 214, 53, 63, 252, 200, 49, 63, 60, 247, 141, 189, 160, 124, 235, 189, 145, 76, 238, 62, 31, 11, 57, 191, 167, 193, 67, 191, 71, 246, 203, 61, 254, 252, 131, 62, 4, 109, 107, 191, 216, 103, 222, 61, 186, 14, 169, 62, 252, 217, 22, 63, 241, 2, 82, 62, 160, 177, 56, 190, 99, 191, 154, 62, 176, 159, 174, 189, 176, 40, 236, 61, 40, 184, 194, 62, 172, 243, 67, 63, 219, 79, 79, 190, 192, 150, 179, 189, 209, 127, 26, 62, 16, 121, 176, 189, 111, 255, 158, 190, 36, 221, 115, 62, 166, 123, 166, 61, 48, 134, 152, 62, 167, 149, 46, 189, 153, 207, 96, 61, 80, 119, 57, 190, 188, 152, 221, 189, 231, 209, 141, 62, 227, 140, 36, 190, 4, 57, 88, 189, 185, 7, 24, 191, 242, 223, 41, 186, 39, 243, 184, 62, 213, 253, 151, 62, 19, 40, 241, 189, 132, 111, 202, 60, 90, 221, 14, 58, 207, 23, 175, 61, 237, 60, 49, 62, 67, 19, 77, 190, 158, 5, 31, 190, 52, 31, 191, 190, 220, 83, 196, 190, 89, 124, 19, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 245, 218, 189, 36, 73, 12, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {152, 69, 87, 63, 135, 224, 47, 62, 84, 202, 156, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {127, 251, 29, 192, 8, 82, 107, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0088/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}