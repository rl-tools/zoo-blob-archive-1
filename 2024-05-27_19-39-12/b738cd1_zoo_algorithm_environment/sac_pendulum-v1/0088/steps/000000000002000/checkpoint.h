// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {235, 103, 242, 61, 59, 92, 106, 190, 149, 114, 209, 62, 242, 133, 113, 188, 71, 238, 52, 191, 222, 239, 209, 187, 251, 220, 184, 190, 241, 196, 9, 191, 49, 91, 159, 190, 26, 53, 191, 190, 178, 183, 67, 63, 204, 76, 25, 191, 249, 70, 23, 61, 28, 188, 216, 190, 55, 41, 8, 63, 253, 38, 25, 191, 246, 29, 164, 61, 72, 25, 86, 62, 83, 251, 224, 62, 87, 177, 218, 190, 238, 96, 245, 190, 87, 102, 2, 190, 109, 245, 7, 191, 70, 90, 201, 62, 156, 255, 25, 190, 207, 40, 156, 190, 20, 251, 148, 190, 160, 54, 147, 190, 74, 203, 46, 191, 102, 248, 33, 62, 100, 7, 83, 189, 89, 85, 225, 190, 3, 58, 230, 190, 116, 58, 29, 189, 213, 184, 5, 191, 39, 170, 71, 62, 182, 168, 36, 63, 164, 181, 237, 190, 58, 80, 47, 60, 39, 190, 168, 61, 29, 235, 56, 63, 242, 140, 165, 62, 211, 12, 17, 188, 242, 203, 112, 63, 85, 114, 113, 190, 252, 218, 192, 61, 84, 160, 89, 63, 212, 109, 130, 190, 29, 26, 46, 63, 233, 204, 201, 60, 70, 86, 9, 191, 10, 135, 158, 62, 174, 4, 78, 62, 138, 17, 192, 190, 192, 197, 42, 190, 57, 213, 25, 191, 114, 221, 157, 189, 72, 22, 151, 188, 159, 232, 27, 63, 99, 152, 45, 61, 117, 37, 5, 191, 133, 139, 234, 190, 175, 39, 88, 190, 136, 174, 23, 191, 247, 167, 182, 61, 66, 74, 205, 60, 74, 131, 17, 191, 77, 62, 151, 62, 210, 245, 118, 190, 131, 69, 143, 62, 78, 148, 63, 62, 166, 75, 176, 190, 28, 61, 228, 62, 107, 195, 73, 63, 248, 223, 235, 62, 112, 23, 4, 62, 45, 146, 25, 61, 55, 59, 200, 62, 101, 253, 217, 62, 61, 1, 47, 189, 201, 221, 2, 63, 207, 201, 16, 190, 112, 89, 70, 191, 120, 169, 72, 62, 106, 14, 104, 190, 150, 131, 195, 62, 71, 109, 186, 62, 43, 232, 36, 63, 150, 228, 128, 189, 172, 203, 211, 61, 111, 37, 208, 189, 161, 83, 132, 190, 76, 206, 240, 62, 33, 198, 192, 190, 102, 201, 83, 187, 205, 60, 46, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {188, 106, 22, 191, 33, 88, 8, 62, 100, 198, 204, 189, 231, 81, 163, 62, 148, 56, 190, 62, 174, 67, 151, 190, 8, 53, 41, 190, 39, 212, 11, 191, 187, 45, 156, 190, 222, 176, 212, 57, 164, 170, 45, 63, 217, 166, 41, 63, 61, 9, 0, 190, 68, 196, 180, 190, 224, 20, 72, 62, 13, 59, 157, 62, 19, 154, 116, 62, 18, 48, 134, 190, 49, 73, 186, 62, 74, 131, 194, 62, 96, 170, 180, 62, 225, 123, 128, 190, 21, 122, 25, 63, 123, 123, 170, 190, 48, 48, 110, 62, 243, 213, 186, 62, 221, 200, 124, 62, 11, 47, 27, 62, 155, 0, 65, 190, 133, 5, 155, 190, 54, 59, 238, 190, 30, 119, 251, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 140, 217, 189, 15, 21, 32, 62, 198, 253, 40, 190, 240, 100, 24, 60, 83, 99, 32, 61, 66, 13, 144, 189, 153, 13, 47, 59, 93, 48, 246, 188, 96, 225, 7, 190, 233, 144, 207, 189, 187, 129, 128, 189, 145, 28, 245, 58, 240, 31, 42, 190, 43, 94, 117, 187, 54, 146, 239, 189, 182, 52, 217, 60, 233, 57, 169, 188, 159, 94, 36, 61, 184, 52, 162, 189, 196, 212, 117, 188, 8, 191, 151, 60, 38, 38, 163, 189, 28, 181, 128, 61, 243, 39, 206, 189, 185, 80, 199, 61, 98, 153, 10, 189, 12, 215, 58, 190, 89, 249, 207, 189, 139, 89, 33, 62, 96, 90, 134, 189, 106, 254, 193, 188, 189, 219, 33, 190, 27, 16, 142, 61, 140, 230, 161, 190, 18, 60, 13, 189, 212, 131, 91, 60, 213, 121, 3, 62, 6, 228, 8, 60, 45, 27, 157, 190, 106, 43, 61, 61, 35, 64, 98, 59, 24, 244, 46, 189, 38, 147, 226, 189, 7, 189, 137, 189, 131, 174, 87, 190, 17, 126, 97, 61, 149, 184, 193, 62, 250, 173, 55, 62, 42, 61, 88, 60, 81, 30, 39, 190, 248, 196, 148, 190, 80, 118, 160, 61, 192, 24, 252, 61, 146, 34, 203, 61, 51, 134, 101, 62, 127, 124, 202, 190, 152, 92, 126, 61, 226, 126, 18, 62, 127, 167, 154, 189, 71, 249, 119, 189, 172, 126, 31, 62, 40, 170, 186, 189, 37, 18, 145, 59, 67, 103, 168, 61, 75, 70, 157, 190, 20, 37, 59, 62, 225, 81, 120, 189, 100, 115, 78, 190, 159, 101, 113, 189, 115, 83, 231, 188, 39, 129, 90, 188, 31, 92, 47, 189, 213, 146, 11, 62, 91, 86, 134, 62, 228, 46, 226, 61, 227, 227, 94, 62, 129, 233, 141, 62, 59, 118, 103, 190, 94, 107, 95, 190, 104, 216, 172, 190, 144, 99, 51, 190, 249, 172, 14, 190, 235, 137, 162, 62, 255, 31, 4, 190, 87, 199, 36, 62, 76, 122, 54, 61, 126, 61, 60, 62, 104, 21, 116, 190, 201, 171, 9, 189, 151, 206, 205, 61, 212, 53, 132, 59, 28, 230, 96, 60, 152, 69, 164, 61, 67, 212, 129, 188, 85, 118, 9, 190, 178, 4, 18, 189, 166, 76, 12, 61, 206, 41, 119, 62, 168, 187, 185, 189, 7, 160, 38, 189, 129, 35, 159, 60, 184, 133, 226, 188, 117, 142, 52, 189, 179, 43, 64, 190, 211, 140, 99, 189, 142, 130, 155, 62, 176, 154, 160, 188, 223, 250, 68, 62, 113, 235, 111, 62, 37, 150, 99, 190, 250, 171, 126, 189, 166, 209, 202, 61, 54, 35, 20, 62, 218, 79, 45, 62, 36, 230, 150, 62, 45, 203, 108, 188, 244, 87, 203, 188, 58, 78, 236, 61, 8, 175, 151, 189, 25, 31, 24, 190, 12, 104, 158, 61, 16, 240, 199, 61, 172, 250, 226, 188, 161, 225, 16, 61, 103, 124, 175, 61, 153, 83, 8, 61, 5, 189, 234, 189, 178, 76, 182, 188, 211, 248, 90, 61, 194, 151, 100, 190, 157, 166, 129, 189, 147, 39, 120, 62, 85, 219, 51, 190, 82, 190, 53, 190, 249, 24, 58, 190, 209, 194, 5, 190, 197, 81, 163, 61, 237, 132, 64, 188, 55, 131, 191, 188, 164, 224, 26, 61, 173, 207, 17, 62, 34, 197, 27, 61, 218, 243, 75, 60, 34, 33, 192, 188, 10, 251, 23, 62, 75, 153, 204, 61, 244, 199, 43, 190, 222, 185, 239, 188, 254, 211, 25, 190, 75, 90, 91, 190, 116, 137, 119, 61, 189, 20, 25, 62, 38, 44, 17, 62, 169, 175, 16, 190, 90, 146, 248, 188, 41, 145, 99, 189, 60, 116, 180, 61, 43, 47, 224, 60, 42, 226, 87, 190, 9, 129, 61, 62, 168, 191, 189, 61, 11, 46, 55, 190, 214, 102, 157, 187, 18, 142, 189, 188, 21, 39, 11, 62, 113, 244, 100, 61, 61, 117, 27, 62, 159, 22, 60, 190, 76, 148, 162, 60, 91, 105, 101, 189, 27, 108, 63, 190, 58, 165, 237, 189, 181, 70, 226, 189, 177, 195, 123, 189, 72, 20, 180, 189, 42, 238, 246, 188, 179, 8, 232, 61, 147, 148, 209, 61, 175, 147, 190, 189, 186, 205, 168, 189, 233, 56, 166, 189, 246, 244, 83, 188, 189, 182, 117, 61, 172, 94, 73, 189, 70, 176, 3, 190, 190, 209, 179, 186, 248, 91, 128, 189, 98, 47, 210, 186, 68, 250, 144, 61, 221, 227, 7, 190, 203, 222, 54, 190, 155, 117, 52, 190, 185, 149, 213, 189, 87, 171, 183, 60, 185, 195, 238, 188, 127, 43, 79, 190, 85, 110, 57, 62, 216, 193, 59, 62, 60, 19, 8, 62, 51, 55, 219, 189, 184, 236, 194, 60, 139, 207, 193, 62, 131, 20, 81, 62, 18, 74, 118, 62, 137, 194, 125, 62, 55, 82, 40, 60, 211, 71, 195, 190, 106, 76, 248, 189, 240, 38, 48, 62, 155, 78, 211, 189, 213, 147, 6, 188, 111, 67, 157, 190, 161, 103, 4, 62, 134, 153, 136, 61, 198, 206, 68, 62, 199, 197, 64, 190, 110, 150, 62, 61, 118, 31, 161, 61, 230, 29, 241, 61, 110, 42, 136, 62, 118, 22, 107, 189, 94, 202, 68, 188, 52, 99, 92, 188, 183, 70, 231, 189, 230, 154, 252, 60, 236, 192, 53, 190, 84, 109, 10, 189, 199, 221, 28, 189, 166, 81, 85, 188, 97, 180, 225, 60, 138, 42, 239, 60, 157, 116, 185, 189, 121, 233, 36, 62, 182, 60, 12, 191, 254, 100, 198, 61, 235, 146, 71, 189, 58, 23, 157, 61, 53, 55, 39, 62, 56, 161, 106, 62, 211, 1, 209, 62, 4, 240, 48, 62, 177, 164, 126, 61, 79, 238, 20, 61, 9, 158, 143, 62, 239, 158, 227, 189, 77, 237, 42, 62, 50, 202, 67, 62, 63, 224, 117, 190, 219, 40, 134, 189, 198, 164, 107, 189, 80, 234, 34, 190, 187, 140, 166, 190, 99, 97, 230, 187, 221, 2, 157, 189, 202, 255, 232, 60, 255, 212, 66, 188, 241, 186, 15, 60, 160, 155, 235, 190, 54, 97, 254, 189, 18, 24, 134, 62, 0, 58, 229, 190, 91, 213, 74, 189, 53, 234, 160, 190, 172, 210, 155, 189, 211, 201, 58, 61, 188, 135, 167, 190, 18, 25, 179, 189, 144, 113, 11, 62, 191, 97, 47, 62, 53, 184, 72, 189, 118, 57, 226, 59, 86, 50, 62, 189, 64, 162, 171, 189, 239, 99, 201, 188, 160, 118, 159, 189, 158, 145, 6, 62, 65, 130, 158, 189, 236, 126, 97, 62, 126, 158, 129, 62, 181, 3, 139, 190, 152, 49, 133, 190, 31, 218, 128, 190, 225, 111, 155, 190, 133, 141, 139, 190, 69, 25, 84, 190, 89, 146, 145, 61, 220, 137, 19, 190, 15, 241, 57, 62, 55, 33, 250, 188, 21, 210, 221, 189, 128, 63, 20, 62, 80, 186, 225, 188, 239, 131, 1, 61, 166, 203, 172, 188, 206, 70, 11, 190, 36, 192, 215, 61, 98, 95, 164, 189, 115, 254, 11, 190, 29, 229, 217, 189, 4, 254, 227, 60, 5, 177, 19, 61, 54, 179, 132, 60, 115, 188, 159, 189, 178, 144, 193, 61, 142, 109, 100, 188, 52, 231, 164, 61, 76, 1, 248, 189, 71, 180, 5, 62, 246, 55, 53, 61, 41, 248, 160, 61, 183, 0, 171, 189, 184, 155, 99, 61, 105, 91, 37, 190, 252, 28, 236, 189, 168, 154, 238, 189, 230, 146, 7, 62, 34, 26, 168, 61, 60, 217, 3, 61, 97, 138, 123, 61, 27, 25, 34, 190, 224, 166, 182, 61, 42, 155, 88, 190, 3, 46, 18, 62, 48, 118, 240, 61, 139, 110, 115, 61, 53, 37, 201, 61, 205, 61, 213, 189, 38, 141, 153, 188, 32, 20, 153, 189, 208, 0, 204, 189, 23, 63, 100, 61, 253, 208, 136, 190, 86, 145, 98, 61, 99, 75, 15, 188, 149, 243, 4, 62, 213, 207, 118, 60, 19, 168, 68, 60, 113, 241, 61, 59, 47, 114, 50, 190, 162, 204, 176, 188, 88, 193, 65, 189, 80, 185, 157, 190, 109, 178, 70, 61, 156, 14, 248, 61, 152, 174, 69, 190, 138, 191, 203, 61, 165, 22, 171, 188, 84, 48, 46, 190, 162, 90, 221, 189, 62, 193, 49, 190, 0, 9, 191, 188, 64, 48, 24, 59, 204, 165, 188, 61, 15, 2, 154, 189, 42, 86, 112, 190, 176, 117, 13, 189, 44, 62, 230, 58, 65, 222, 159, 61, 79, 89, 165, 190, 68, 42, 36, 190, 32, 11, 32, 60, 63, 156, 126, 190, 59, 165, 130, 190, 50, 239, 189, 61, 131, 169, 21, 190, 248, 33, 42, 62, 191, 118, 109, 62, 185, 94, 32, 62, 113, 30, 11, 61, 1, 159, 184, 60, 17, 194, 3, 191, 254, 1, 253, 61, 225, 87, 203, 190, 61, 156, 211, 189, 193, 84, 111, 60, 225, 234, 6, 190, 238, 229, 74, 62, 216, 110, 100, 189, 175, 217, 193, 189, 210, 32, 22, 61, 79, 154, 65, 189, 112, 50, 172, 61, 112, 22, 127, 61, 98, 80, 252, 189, 95, 207, 41, 62, 220, 200, 58, 61, 29, 245, 154, 189, 144, 243, 135, 61, 46, 109, 252, 189, 17, 165, 162, 189, 41, 5, 179, 189, 209, 87, 250, 189, 40, 80, 68, 61, 138, 151, 6, 62, 114, 116, 138, 61, 43, 230, 173, 189, 210, 219, 44, 190, 183, 33, 249, 61, 161, 230, 182, 189, 122, 134, 25, 190, 21, 164, 72, 189, 149, 233, 16, 62, 133, 177, 218, 61, 0, 211, 163, 61, 171, 101, 8, 190, 34, 189, 2, 59, 101, 196, 113, 189, 195, 122, 13, 61, 37, 213, 186, 187, 226, 225, 119, 188, 5, 71, 158, 189, 58, 253, 54, 61, 227, 202, 190, 189, 132, 81, 16, 62, 251, 204, 198, 189, 209, 65, 47, 190, 134, 202, 204, 61, 186, 76, 120, 190, 230, 189, 205, 189, 12, 208, 168, 61, 95, 38, 41, 190, 103, 171, 156, 61, 200, 150, 129, 190, 20, 73, 40, 189, 98, 135, 153, 189, 187, 31, 69, 186, 185, 156, 3, 189, 144, 42, 162, 61, 228, 21, 152, 60, 41, 37, 253, 188, 95, 34, 210, 62, 111, 216, 84, 62, 212, 145, 247, 189, 50, 154, 53, 61, 176, 152, 240, 189, 184, 49, 119, 62, 238, 153, 215, 188, 41, 33, 0, 190, 192, 176, 156, 61, 254, 93, 153, 190, 18, 246, 57, 62, 10, 112, 127, 61, 118, 213, 232, 61, 31, 28, 132, 61, 118, 177, 0, 62, 177, 141, 138, 188, 36, 151, 133, 189, 189, 248, 238, 61, 113, 254, 34, 62, 186, 145, 221, 190, 85, 31, 172, 189, 214, 195, 23, 62, 23, 146, 28, 190, 114, 237, 209, 187, 38, 24, 193, 190, 242, 99, 152, 188, 153, 129, 36, 190, 193, 222, 205, 190, 247, 86, 156, 61, 238, 60, 8, 189, 196, 3, 118, 190, 114, 184, 99, 61, 246, 237, 147, 62, 103, 10, 226, 62, 112, 220, 6, 189, 74, 97, 154, 190, 234, 13, 8, 189, 49, 96, 1, 62, 74, 110, 213, 61, 16, 179, 84, 190, 136, 195, 221, 60, 50, 246, 177, 190, 253, 223, 0, 62, 206, 223, 219, 61, 224, 87, 94, 61, 45, 16, 108, 189, 70, 187, 164, 61, 103, 74, 217, 61, 137, 240, 52, 62, 147, 210, 108, 61, 105, 245, 227, 189, 165, 104, 127, 62, 182, 128, 250, 189, 240, 30, 66, 61, 93, 233, 147, 189, 117, 135, 6, 188, 239, 21, 210, 61, 162, 63, 9, 190, 132, 29, 27, 189, 91, 111, 1, 63, 120, 96, 61, 62, 116, 100, 146, 61, 48, 164, 77, 62, 7, 141, 21, 190, 108, 187, 40, 189, 124, 240, 64, 190, 64, 236, 40, 62, 235, 179, 70, 62, 161, 251, 28, 62, 211, 42, 106, 61, 36, 25, 51, 61, 1, 36, 132, 189, 206, 220, 161, 189, 30, 232, 67, 62, 230, 239, 145, 190, 249, 147, 18, 190, 4, 43, 133, 190, 6, 146, 195, 62, 157, 12, 149, 61, 111, 13, 219, 61, 96, 161, 227, 189, 217, 59, 40, 61, 170, 227, 214, 61, 235, 71, 152, 62, 31, 163, 164, 189, 213, 224, 41, 190, 95, 57, 11, 190, 14, 219, 62, 61, 206, 202, 167, 189, 94, 180, 90, 190, 24, 101, 9, 190, 26, 67, 167, 62, 146, 154, 30, 62, 130, 153, 92, 62, 147, 191, 111, 62, 235, 139, 130, 61, 160, 92, 104, 189, 128, 80, 139, 61, 189, 115, 9, 189, 231, 213, 38, 62, 209, 184, 6, 61, 200, 1, 177, 189, 180, 98, 53, 62, 216, 51, 140, 187, 149, 7, 56, 62, 188, 248, 89, 188, 4, 115, 224, 189, 105, 120, 159, 61, 200, 241, 181, 189, 15, 149, 4, 188, 31, 29, 26, 62, 243, 187, 6, 62, 42, 62, 23, 189, 151, 231, 89, 189, 120, 76, 132, 61, 233, 147, 65, 189, 127, 129, 7, 62, 117, 70, 10, 190, 44, 206, 130, 189, 107, 247, 146, 189, 73, 187, 237, 189, 88, 11, 64, 189, 102, 90, 120, 61, 185, 101, 244, 61, 170, 9, 81, 189, 138, 238, 147, 188, 143, 17, 29, 190, 71, 67, 6, 62, 135, 213, 0, 189, 19, 143, 161, 189, 142, 136, 113, 188, 16, 151, 146, 61, 182, 239, 19, 190, 142, 216, 229, 61, 154, 246, 7, 61, 73, 146, 82, 188, 72, 71, 87, 60, 172, 119, 9, 190, 19, 4, 230, 61, 148, 75, 98, 60, 86, 137, 22, 190, 173, 44, 12, 190, 147, 224, 254, 189, 1, 250, 32, 189, 134, 39, 190, 189, 113, 143, 152, 61, 47, 103, 203, 189, 172, 147, 20, 62, 95, 100, 187, 190, 118, 57, 25, 190, 179, 69, 249, 187, 34, 38, 146, 61, 248, 67, 52, 190, 95, 35, 28, 61, 27, 199, 198, 189, 164, 243, 34, 62, 81, 109, 69, 61, 200, 121, 144, 61, 38, 53, 201, 61, 67, 223, 35, 189, 158, 10, 201, 62, 167, 134, 173, 62, 249, 183, 184, 189, 154, 143, 30, 189, 102, 124, 104, 59, 130, 6, 7, 62, 248, 126, 163, 190, 37, 81, 245, 61, 54, 243, 118, 189, 114, 45, 17, 189, 192, 214, 237, 189, 106, 213, 97, 59, 192, 220, 98, 62, 107, 103, 158, 59, 237, 192, 117, 189, 251, 84, 244, 61, 132, 178, 105, 188, 131, 134, 18, 190, 132, 47, 108, 190, 123, 244, 178, 62, 125, 177, 9, 190, 6, 100, 155, 188, 31, 12, 45, 62, 41, 2, 213, 60, 206, 195, 159, 189, 63, 185, 145, 61, 86, 124, 162, 189, 22, 7, 169, 62, 11, 123, 226, 60, 87, 135, 176, 61, 246, 236, 25, 62, 40, 203, 38, 190, 130, 147, 41, 187, 148, 255, 137, 190, 229, 46, 44, 189, 208, 190, 39, 190, 215, 24, 145, 60, 165, 239, 244, 188, 22, 213, 87, 62, 45, 195, 145, 61, 28, 167, 201, 61, 92, 214, 206, 187, 167, 167, 195, 189, 206, 63, 213, 189, 46, 48, 12, 190, 186, 0, 224, 61, 226, 162, 226, 60, 144, 12, 70, 62, 95, 243, 140, 188, 251, 84, 64, 61, 126, 102, 38, 62, 246, 2, 184, 190, 39, 142, 169, 189, 59, 227, 19, 62, 130, 121, 127, 60, 126, 81, 26, 61, 151, 114, 218, 190, 248, 159, 253, 187, 237, 188, 65, 190, 132, 244, 29, 190, 13, 185, 35, 62, 84, 4, 216, 189, 178, 179, 52, 190, 105, 165, 20, 62, 36, 200, 164, 62, 227, 90, 101, 62, 20, 56, 52, 190, 233, 26, 49, 190, 207, 185, 114, 190, 135, 45, 153, 62, 136, 44, 192, 61, 171, 227, 109, 189, 144, 194, 26, 62, 198, 13, 86, 190, 217, 197, 153, 59, 95, 103, 78, 190, 196, 42, 162, 61, 174, 223, 180, 190, 77, 63, 2, 62, 45, 14, 37, 61, 54, 137, 193, 188, 116, 211, 39, 189, 56, 132, 60, 62, 128, 160, 241, 188, 79, 54, 118, 189, 107, 153, 188, 61, 13, 53, 31, 59, 11, 214, 72, 190, 74, 239, 237, 190, 34, 132, 0, 188, 45, 162, 20, 190, 43, 158, 57, 190, 230, 238, 154, 61, 10, 163, 39, 61, 196, 213, 133, 190, 233, 208, 179, 188, 189, 57, 205, 62, 136, 100, 2, 63, 185, 152, 31, 190, 107, 130, 135, 190, 141, 32, 129, 189, 255, 188, 149, 62, 22, 6, 212, 61, 245, 173, 79, 189, 185, 214, 155, 188, 146, 149, 171, 190, 63, 74, 45, 62, 223, 225, 5, 62, 86, 239, 52, 62, 180, 47, 135, 189, 202, 6, 9, 62, 206, 163, 180, 188, 76, 224, 142, 60, 14, 68, 6, 62, 175, 10, 118, 60, 62, 128, 48, 189, 18, 154, 29, 190, 200, 61, 11, 190, 34, 169, 48, 188, 111, 200, 26, 62, 237, 170, 44, 190, 67, 169, 152, 61, 81, 227, 48, 190, 26, 44, 211, 61, 122, 101, 254, 189, 135, 238, 145, 60, 218, 97, 121, 189, 151, 207, 203, 189, 45, 53, 160, 61, 192, 74, 232, 189, 57, 250, 58, 61, 104, 50, 10, 60, 141, 227, 37, 188, 231, 138, 230, 189, 67, 142, 191, 189, 5, 233, 228, 189, 31, 192, 7, 190, 72, 13, 23, 60, 61, 135, 195, 61, 78, 136, 43, 190, 232, 111, 255, 188, 164, 131, 200, 189, 239, 192, 186, 189, 152, 155, 85, 61, 20, 72, 3, 61, 173, 181, 6, 190, 108, 145, 244, 58, 25, 52, 108, 62, 228, 93, 143, 61, 174, 149, 198, 189, 31, 205, 190, 61, 35, 76, 151, 61, 238, 8, 47, 62, 68, 226, 78, 189, 5, 82, 177, 188, 237, 90, 232, 188, 17, 114, 127, 61, 168, 178, 14, 62, 86, 224, 202, 61, 95, 132, 95, 61, 106, 11, 112, 190, 29, 231, 3, 190, 224, 16, 40, 62, 96, 228, 92, 188, 39, 245, 35, 189, 65, 214, 148, 190, 79, 22, 78, 62, 2, 115, 143, 61, 34, 254, 131, 60, 67, 150, 78, 62, 167, 106, 209, 61, 18, 126, 252, 61, 142, 112, 216, 58, 158, 176, 68, 61, 31, 163, 234, 61, 133, 61, 74, 190, 118, 19, 76, 190, 105, 196, 217, 60, 239, 169, 192, 61, 218, 148, 239, 61, 140, 58, 37, 62, 81, 70, 220, 189, 234, 212, 163, 189, 126, 6, 43, 190, 100, 183, 82, 62, 39, 157, 26, 62, 238, 40, 215, 61, 156, 108, 216, 61, 17, 168, 195, 60, 216, 28, 79, 189, 76, 71, 184, 189, 211, 252, 31, 62, 238, 162, 157, 189, 236, 158, 29, 190, 246, 0, 103, 189, 2, 51, 48, 61, 108, 41, 94, 61, 229, 68, 219, 190, 206, 66, 44, 189, 183, 112, 95, 190, 228, 214, 232, 59, 196, 68, 73, 62, 18, 190, 23, 190, 140, 31, 5, 190, 67, 73, 234, 61, 194, 205, 133, 190, 235, 208, 100, 188, 99, 2, 249, 61, 99, 211, 207, 189, 204, 193, 14, 62, 65, 100, 11, 190, 200, 172, 206, 187, 171, 13, 242, 60, 185, 122, 39, 190, 215, 110, 8, 61, 253, 228, 20, 62, 166, 252, 95, 61, 215, 86, 139, 189, 116, 5, 210, 189, 22, 90, 244, 189, 148, 241, 156, 61, 211, 34, 18, 61, 5, 95, 20, 189, 246, 226, 132, 61, 117, 1, 49, 190, 49, 95, 123, 189, 24, 23, 9, 190, 216, 205, 154, 60, 29, 10, 217, 61, 101, 171, 30, 190, 178, 0, 94, 60, 54, 52, 211, 56, 145, 149, 158, 189, 146, 136, 166, 61, 72, 112, 49, 190, 192, 109, 196, 189, 185, 238, 13, 190, 139, 83, 7, 61, 147, 132, 13, 190, 65, 124, 206, 61, 89, 7, 78, 189, 79, 111, 59, 189, 63, 71, 53, 60, 186, 80, 25, 62, 142, 237, 91, 59, 197, 37, 38, 190, 46, 38, 101, 189, 173, 70, 150, 61, 120, 141, 156, 61, 108, 190, 83, 61, 100, 251, 166, 61, 176, 105, 99, 62, 134, 97, 13, 62, 243, 17, 90, 62, 178, 45, 191, 61, 118, 71, 137, 61, 76, 134, 186, 190, 92, 133, 154, 190, 89, 100, 64, 62, 238, 144, 60, 62, 134, 203, 241, 61, 230, 31, 59, 189, 71, 73, 156, 61, 191, 130, 194, 61, 75, 248, 105, 61, 87, 172, 175, 61, 17, 182, 25, 61, 194, 104, 183, 61, 199, 17, 44, 189, 24, 197, 85, 60, 111, 218, 193, 189, 37, 169, 132, 190, 53, 18, 47, 190, 131, 155, 75, 62, 231, 213, 110, 190, 4, 251, 154, 62, 209, 211, 134, 189, 12, 186, 21, 190, 54, 165, 1, 190, 28, 99, 32, 62, 182, 144, 51, 189, 210, 9, 251, 189, 243, 28, 144, 189, 76, 132, 219, 62, 238, 243, 214, 60, 199, 116, 68, 62, 90, 29, 25, 62, 101, 130, 149, 188, 236, 134, 145, 190, 99, 254, 42, 60, 34, 125, 115, 62, 87, 67, 81, 60, 11, 124, 185, 61, 79, 186, 117, 189, 176, 116, 34, 62, 91, 224, 155, 61, 23, 227, 137, 188, 205, 104, 62, 190, 30, 172, 62, 61, 57, 163, 181, 189, 112, 229, 186, 189, 243, 212, 149, 62, 109, 24, 220, 61, 198, 223, 76, 187, 231, 48, 10, 190, 34, 219, 209, 186, 226, 19, 167, 189, 65, 189, 37, 62, 173, 9, 95, 61, 235, 252, 249, 188, 200, 120, 75, 61, 150, 198, 231, 189, 75, 119, 15, 190, 197, 202, 244, 189, 63, 36, 47, 58, 238, 161, 137, 62, 133, 8, 180, 61, 113, 217, 185, 61, 63, 98, 212, 62, 244, 118, 156, 188, 143, 96, 29, 190, 125, 3, 27, 190, 138, 51, 136, 61, 38, 65, 180, 61, 31, 110, 74, 61, 48, 55, 176, 187, 70, 96, 74, 62, 15, 56, 16, 61, 168, 59, 64, 62, 216, 120, 189, 61, 2, 166, 44, 189, 162, 102, 6, 62, 213, 96, 36, 60, 226, 76, 176, 61, 127, 59, 102, 189, 103, 99, 201, 61, 92, 111, 36, 190, 166, 98, 134, 189, 174, 208, 128, 189, 21, 229, 196, 187, 148, 106, 11, 190, 95, 10, 71, 62, 57, 212, 69, 62, 185, 225, 37, 190, 102, 198, 203, 60, 6, 226, 8, 62, 134, 241, 87, 190, 211, 30, 135, 61, 223, 52, 169, 188, 247, 131, 25, 189, 22, 46, 166, 61, 208, 238, 140, 189, 89, 124, 54, 62, 65, 58, 109, 62, 115, 151, 127, 188, 188, 244, 110, 190, 32, 52, 196, 189, 118, 127, 169, 188, 118, 76, 168, 189, 221, 249, 26, 188, 173, 107, 8, 62, 30, 47, 42, 189, 11, 185, 63, 62, 228, 75, 168, 61, 159, 6, 26, 62, 152, 230, 143, 61, 123, 176, 32, 190, 108, 0, 7, 62, 226, 141, 63, 62, 18, 249, 220, 60, 41, 77, 12, 61, 209, 142, 129, 62, 225, 158, 208, 60, 244, 64, 233, 61, 126, 232, 243, 188, 231, 51, 82, 190, 226, 43, 33, 62, 90, 175, 64, 189, 78, 90, 76, 61, 111, 109, 230, 60, 214, 162, 30, 62, 122, 125, 172, 61, 59, 167, 171, 62, 100, 22, 14, 190, 89, 59, 7, 187, 206, 96, 9, 190, 52, 244, 221, 60, 192, 85, 235, 189, 181, 228, 177, 61, 150, 4, 230, 189, 101, 146, 254, 189, 247, 239, 32, 190, 102, 41, 224, 189, 95, 119, 168, 61, 185, 239, 110, 190, 117, 110, 111, 189, 223, 161, 6, 62, 42, 105, 107, 62, 169, 68, 244, 189, 141, 127, 82, 62, 140, 173, 70, 190, 137, 186, 1, 62, 217, 40, 8, 190, 237, 14, 76, 60, 93, 185, 187, 60, 163, 55, 249, 61, 208, 217, 191, 189, 74, 73, 113, 189, 55, 237, 232, 189, 62, 53, 16, 62, 29, 44, 17, 190, 98, 136, 4, 190, 125, 2, 18, 62, 39, 164, 174, 61, 173, 203, 214, 189, 87, 220, 179, 61, 145, 141, 80, 189, 99, 224, 25, 190, 14, 55, 32, 190, 76, 89, 218, 61, 58, 199, 164, 61, 99, 65, 168, 189, 68, 100, 45, 190, 254, 99, 16, 190, 36, 17, 220, 188, 94, 151, 27, 188, 236, 105, 31, 190, 153, 254, 52, 190, 216, 76, 252, 189, 72, 26, 212, 189, 213, 191, 176, 189, 208, 117, 3, 62, 169, 161, 140, 189, 211, 22, 205, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 234, 9, 190, 26, 146, 183, 60, 201, 39, 143, 187, 149, 64, 37, 62, 167, 7, 249, 189, 52, 87, 224, 61, 22, 164, 241, 61, 212, 79, 114, 61, 208, 187, 83, 62, 16, 76, 97, 189, 224, 2, 142, 189, 169, 100, 229, 61, 236, 188, 4, 189, 176, 221, 181, 60, 64, 218, 218, 61, 35, 163, 178, 189, 225, 147, 45, 189, 212, 11, 202, 189, 226, 170, 4, 62, 139, 127, 71, 62, 104, 225, 230, 61, 75, 116, 56, 189, 79, 37, 239, 189, 191, 188, 211, 61, 60, 88, 18, 190, 152, 86, 37, 190, 94, 144, 200, 61, 5, 88, 175, 61, 152, 243, 43, 188, 103, 235, 16, 190, 78, 18, 162, 60, 208, 27, 50, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 31, 138, 61, 240, 44, 247, 189, 170, 177, 150, 62, 222, 94, 239, 61, 36, 28, 150, 62, 142, 121, 22, 61, 247, 213, 85, 62, 70, 7, 111, 190, 77, 190, 248, 190, 250, 13, 197, 60, 243, 75, 25, 62, 91, 125, 147, 190, 26, 5, 41, 190, 196, 155, 87, 190, 180, 3, 57, 190, 71, 49, 94, 62, 197, 110, 205, 61, 60, 247, 141, 189, 224, 189, 185, 189, 246, 10, 5, 62, 242, 215, 124, 190, 97, 39, 30, 190, 71, 246, 203, 61, 73, 242, 19, 62, 63, 127, 104, 190, 76, 250, 222, 61, 184, 194, 102, 62, 45, 102, 64, 62, 82, 137, 29, 62, 129, 40, 7, 190, 133, 52, 44, 62, 176, 159, 174, 189, 158, 235, 235, 61, 161, 29, 104, 188, 201, 93, 241, 61, 171, 174, 34, 190, 218, 224, 10, 190, 233, 44, 235, 61, 77, 152, 153, 189, 126, 120, 66, 190, 122, 149, 215, 62, 239, 104, 119, 61, 150, 172, 135, 188, 231, 56, 111, 60, 223, 234, 95, 61, 34, 229, 202, 189, 223, 103, 159, 60, 121, 209, 82, 60, 7, 219, 113, 189, 4, 57, 88, 189, 102, 124, 191, 190, 222, 19, 178, 189, 181, 96, 39, 62, 134, 208, 48, 188, 19, 40, 241, 189, 147, 143, 156, 61, 34, 127, 184, 61, 115, 236, 174, 61, 117, 220, 4, 62, 172, 22, 209, 189, 101, 66, 200, 189, 81, 236, 14, 190, 121, 90, 16, 190, 89, 124, 19, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 42, 201, 189, 85, 82, 60, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {166, 204, 47, 61, 142, 167, 249, 191, 142, 52, 20, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {206, 87, 100, 64, 242, 211, 104, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0088/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}