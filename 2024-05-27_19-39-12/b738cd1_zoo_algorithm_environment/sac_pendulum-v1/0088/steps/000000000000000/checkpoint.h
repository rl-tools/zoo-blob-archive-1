// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {7, 153, 116, 62, 178, 119, 148, 190, 187, 26, 189, 62, 241, 252, 110, 188, 159, 16, 185, 190, 98, 165, 191, 189, 37, 167, 184, 190, 22, 192, 217, 190, 66, 198, 160, 190, 6, 33, 250, 190, 245, 148, 152, 62, 141, 223, 210, 190, 11, 233, 90, 62, 67, 76, 222, 190, 188, 182, 4, 63, 35, 5, 223, 190, 192, 188, 191, 189, 207, 151, 182, 62, 62, 130, 234, 62, 200, 77, 186, 190, 41, 20, 178, 190, 164, 97, 222, 189, 43, 81, 14, 191, 143, 108, 198, 62, 148, 248, 162, 190, 110, 140, 85, 60, 109, 196, 169, 190, 50, 52, 84, 190, 112, 252, 175, 190, 203, 58, 143, 60, 163, 201, 122, 189, 154, 165, 88, 190, 52, 106, 5, 191, 194, 105, 18, 189, 75, 52, 168, 190, 120, 66, 141, 62, 185, 95, 201, 62, 15, 179, 166, 190, 59, 120, 171, 60, 184, 116, 29, 189, 210, 73, 12, 63, 158, 173, 188, 62, 103, 103, 231, 62, 13, 6, 248, 62, 156, 204, 1, 190, 162, 251, 237, 62, 90, 4, 5, 63, 61, 213, 250, 189, 68, 35, 9, 63, 119, 242, 92, 62, 213, 32, 251, 190, 40, 144, 150, 61, 104, 210, 148, 61, 78, 18, 184, 190, 153, 77, 73, 190, 194, 99, 208, 190, 200, 75, 66, 190, 110, 33, 73, 189, 9, 114, 162, 62, 200, 253, 99, 61, 54, 122, 202, 190, 88, 146, 207, 189, 148, 124, 134, 190, 28, 31, 11, 191, 201, 217, 226, 60, 116, 213, 145, 61, 138, 147, 246, 190, 182, 94, 150, 62, 186, 83, 140, 190, 29, 113, 86, 62, 4, 3, 1, 62, 134, 132, 117, 190, 28, 51, 233, 62, 69, 181, 10, 63, 34, 248, 10, 63, 248, 7, 43, 62, 157, 98, 146, 61, 131, 111, 219, 62, 163, 12, 223, 62, 156, 29, 203, 189, 198, 151, 2, 63, 193, 241, 31, 190, 223, 201, 11, 191, 150, 220, 231, 61, 69, 165, 132, 190, 30, 241, 3, 62, 52, 132, 2, 63, 172, 141, 0, 63, 180, 26, 1, 62, 170, 118, 255, 61, 145, 205, 145, 189, 171, 197, 137, 190, 254, 252, 219, 62, 65, 196, 192, 190, 76, 93, 0, 189, 159, 236, 46, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {132, 152, 19, 191, 55, 249, 197, 189, 200, 147, 73, 189, 46, 197, 6, 63, 158, 85, 137, 62, 237, 57, 203, 190, 179, 3, 98, 190, 95, 185, 12, 191, 79, 135, 39, 190, 195, 196, 102, 190, 168, 204, 15, 63, 179, 105, 15, 63, 151, 70, 135, 190, 88, 223, 199, 190, 78, 109, 108, 190, 104, 157, 133, 60, 232, 243, 183, 62, 115, 40, 48, 190, 121, 132, 61, 62, 218, 39, 146, 62, 6, 204, 79, 62, 167, 157, 133, 190, 7, 138, 5, 63, 172, 128, 153, 190, 53, 37, 79, 62, 204, 55, 189, 62, 231, 27, 86, 62, 211, 41, 156, 61, 114, 242, 39, 190, 51, 242, 165, 190, 20, 149, 237, 190, 218, 108, 255, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 10, 173, 189, 15, 21, 32, 62, 198, 253, 40, 190, 240, 9, 46, 189, 138, 120, 74, 61, 10, 80, 107, 189, 153, 13, 47, 59, 69, 130, 5, 188, 198, 203, 5, 190, 180, 15, 174, 189, 115, 129, 176, 189, 195, 214, 227, 59, 20, 168, 41, 190, 203, 186, 138, 186, 243, 186, 227, 189, 55, 249, 163, 59, 235, 111, 45, 189, 210, 157, 48, 61, 184, 52, 162, 189, 71, 243, 175, 188, 50, 160, 0, 188, 146, 190, 145, 189, 1, 9, 89, 60, 212, 25, 205, 189, 146, 147, 201, 61, 195, 86, 251, 188, 184, 57, 51, 190, 75, 49, 161, 189, 100, 28, 39, 62, 139, 206, 124, 189, 25, 134, 25, 188, 36, 13, 32, 190, 0, 184, 87, 61, 84, 178, 20, 190, 209, 20, 19, 60, 45, 201, 181, 189, 80, 233, 37, 62, 89, 142, 74, 61, 179, 130, 123, 189, 19, 234, 206, 59, 59, 142, 126, 61, 212, 169, 233, 61, 17, 185, 214, 189, 251, 80, 186, 188, 97, 236, 125, 189, 11, 202, 175, 59, 59, 12, 0, 60, 147, 16, 44, 190, 234, 69, 145, 61, 129, 116, 1, 60, 217, 11, 14, 190, 243, 154, 177, 189, 140, 152, 51, 62, 184, 179, 23, 62, 118, 192, 51, 62, 25, 72, 248, 189, 109, 153, 188, 187, 25, 169, 14, 62, 250, 236, 172, 189, 47, 191, 40, 61, 149, 37, 32, 62, 189, 33, 42, 190, 236, 34, 188, 188, 125, 105, 190, 61, 186, 103, 2, 190, 20, 167, 120, 61, 16, 221, 134, 189, 211, 171, 16, 190, 57, 157, 19, 189, 0, 215, 130, 189, 197, 53, 167, 186, 18, 222, 0, 62, 65, 91, 32, 62, 197, 110, 190, 61, 235, 101, 180, 61, 52, 151, 239, 61, 90, 34, 206, 61, 121, 39, 213, 189, 197, 93, 252, 61, 92, 102, 121, 189, 15, 211, 47, 190, 234, 177, 243, 189, 48, 7, 34, 62, 186, 67, 68, 189, 245, 36, 139, 61, 162, 205, 170, 189, 182, 44, 10, 62, 130, 106, 48, 190, 232, 64, 144, 61, 18, 42, 1, 62, 20, 27, 162, 61, 83, 91, 191, 189, 19, 219, 218, 61, 143, 221, 250, 186, 192, 174, 184, 59, 48, 192, 221, 188, 161, 135, 188, 61, 93, 233, 232, 60, 81, 2, 30, 190, 86, 199, 208, 189, 185, 78, 0, 189, 236, 173, 33, 189, 246, 184, 23, 190, 123, 188, 33, 190, 122, 1, 230, 189, 14, 251, 141, 61, 164, 191, 16, 190, 209, 158, 220, 61, 223, 157, 133, 188, 152, 239, 3, 190, 215, 197, 31, 61, 15, 81, 211, 61, 102, 224, 172, 185, 239, 117, 235, 61, 128, 142, 24, 62, 199, 87, 119, 61, 161, 241, 11, 190, 254, 150, 0, 62, 161, 216, 33, 190, 90, 178, 24, 190, 100, 188, 237, 61, 80, 147, 168, 61, 213, 245, 6, 189, 96, 148, 233, 189, 146, 55, 175, 61, 37, 202, 202, 60, 111, 195, 167, 189, 10, 208, 169, 188, 52, 165, 184, 61, 187, 163, 246, 188, 61, 44, 163, 189, 65, 186, 51, 62, 1, 121, 41, 190, 237, 32, 41, 190, 228, 247, 50, 190, 222, 201, 206, 189, 210, 113, 24, 61, 15, 97, 175, 61, 182, 255, 115, 189, 243, 158, 142, 61, 15, 148, 38, 62, 116, 55, 21, 61, 120, 239, 159, 189, 106, 243, 1, 190, 155, 40, 191, 61, 201, 65, 15, 61, 70, 132, 12, 190, 189, 135, 171, 189, 208, 110, 50, 190, 13, 214, 26, 190, 37, 10, 57, 59, 129, 229, 159, 61, 241, 243, 36, 62, 100, 181, 0, 190, 110, 223, 188, 188, 25, 8, 106, 187, 111, 123, 175, 61, 192, 225, 161, 61, 22, 60, 39, 190, 234, 94, 26, 62, 87, 56, 210, 61, 235, 118, 36, 190, 91, 146, 31, 60, 134, 33, 107, 187, 4, 251, 32, 62, 73, 206, 169, 61, 165, 145, 40, 62, 223, 200, 48, 190, 147, 244, 252, 60, 239, 163, 52, 189, 249, 156, 44, 190, 52, 85, 187, 189, 169, 141, 214, 189, 24, 122, 58, 189, 16, 124, 155, 189, 115, 89, 139, 188, 141, 132, 5, 62, 249, 77, 235, 61, 36, 47, 146, 189, 9, 184, 116, 189, 4, 66, 103, 189, 208, 82, 191, 60, 65, 72, 167, 61, 161, 255, 30, 189, 84, 156, 221, 189, 192, 7, 174, 60, 235, 214, 44, 189, 155, 25, 169, 60, 165, 1, 196, 61, 221, 227, 7, 190, 97, 226, 36, 190, 234, 63, 38, 190, 213, 239, 99, 189, 233, 101, 13, 190, 167, 206, 95, 189, 55, 159, 39, 190, 178, 247, 34, 62, 121, 66, 45, 62, 91, 70, 196, 61, 8, 83, 82, 189, 4, 179, 196, 59, 249, 70, 1, 62, 134, 128, 40, 62, 30, 93, 19, 62, 212, 124, 15, 61, 31, 27, 209, 61, 168, 5, 228, 189, 206, 5, 174, 61, 163, 162, 250, 61, 199, 161, 254, 189, 60, 248, 22, 190, 189, 69, 52, 190, 134, 186, 124, 61, 62, 28, 44, 61, 101, 73, 45, 62, 103, 161, 43, 190, 186, 144, 2, 62, 131, 134, 190, 61, 250, 131, 17, 62, 40, 79, 216, 61, 221, 116, 38, 189, 74, 241, 72, 61, 205, 120, 16, 61, 197, 98, 208, 189, 70, 217, 218, 61, 6, 81, 117, 189, 221, 14, 10, 189, 164, 8, 199, 189, 130, 187, 25, 61, 64, 115, 136, 61, 127, 131, 165, 61, 228, 3, 107, 189, 39, 68, 38, 62, 6, 209, 11, 190, 51, 33, 194, 61, 77, 66, 179, 60, 51, 194, 160, 61, 186, 130, 40, 62, 133, 255, 139, 189, 155, 135, 23, 62, 88, 196, 51, 62, 172, 161, 2, 62, 187, 233, 242, 61, 127, 156, 17, 62, 221, 152, 183, 189, 49, 104, 22, 62, 235, 82, 8, 62, 213, 16, 19, 190, 96, 239, 191, 189, 161, 206, 47, 189, 249, 214, 10, 190, 183, 64, 12, 190, 240, 171, 164, 59, 76, 201, 25, 189, 47, 227, 134, 61, 172, 241, 131, 188, 118, 141, 186, 60, 241, 87, 36, 190, 9, 173, 0, 190, 125, 200, 34, 62, 115, 111, 237, 188, 99, 191, 134, 61, 187, 16, 211, 189, 185, 37, 113, 189, 54, 118, 210, 61, 125, 139, 97, 61, 195, 37, 6, 190, 65, 155, 31, 62, 163, 93, 33, 62, 15, 212, 42, 61, 70, 212, 16, 190, 199, 49, 30, 190, 147, 27, 24, 61, 180, 87, 240, 61, 11, 189, 189, 189, 211, 218, 66, 189, 112, 180, 33, 190, 126, 40, 76, 61, 2, 253, 23, 62, 134, 150, 154, 189, 163, 155, 170, 189, 109, 68, 246, 188, 121, 90, 188, 188, 30, 66, 168, 58, 55, 104, 14, 60, 204, 178, 135, 61, 251, 9, 160, 189, 78, 5, 172, 61, 219, 20, 148, 188, 160, 225, 218, 189, 201, 15, 21, 62, 80, 186, 225, 188, 207, 11, 51, 61, 230, 76, 19, 188, 206, 70, 11, 190, 103, 209, 240, 61, 98, 95, 164, 189, 225, 58, 255, 189, 62, 101, 216, 189, 231, 29, 35, 61, 5, 177, 19, 61, 27, 208, 228, 60, 115, 188, 159, 189, 178, 144, 193, 61, 142, 109, 100, 188, 52, 231, 164, 61, 133, 229, 240, 189, 83, 241, 17, 62, 231, 78, 58, 61, 83, 194, 185, 61, 132, 113, 168, 189, 184, 155, 99, 61, 118, 253, 24, 190, 98, 106, 211, 189, 62, 204, 213, 189, 230, 231, 19, 62, 166, 214, 192, 61, 60, 217, 3, 61, 142, 240, 150, 61, 27, 25, 34, 190, 233, 134, 192, 61, 244, 229, 72, 189, 85, 4, 22, 62, 178, 45, 194, 61, 169, 38, 141, 61, 116, 203, 247, 61, 69, 137, 206, 189, 252, 242, 90, 188, 232, 163, 195, 189, 139, 70, 53, 189, 160, 188, 90, 61, 178, 156, 10, 190, 113, 226, 130, 61, 46, 222, 109, 60, 254, 45, 106, 61, 51, 100, 99, 189, 13, 64, 174, 188, 209, 61, 99, 189, 231, 200, 231, 189, 138, 14, 13, 189, 248, 204, 224, 188, 151, 171, 51, 190, 120, 23, 57, 61, 62, 46, 71, 61, 82, 101, 252, 189, 157, 151, 48, 62, 181, 141, 232, 187, 172, 107, 6, 190, 94, 3, 171, 189, 37, 144, 49, 190, 74, 123, 141, 188, 155, 58, 184, 186, 155, 203, 216, 61, 144, 168, 115, 61, 90, 137, 85, 189, 239, 162, 190, 189, 248, 26, 242, 59, 119, 95, 165, 61, 145, 26, 27, 190, 213, 215, 22, 190, 42, 248, 8, 62, 50, 34, 31, 190, 199, 95, 50, 190, 32, 43, 216, 61, 128, 73, 10, 190, 58, 186, 193, 61, 213, 235, 198, 189, 237, 223, 203, 189, 14, 97, 188, 189, 131, 31, 23, 62, 27, 138, 9, 190, 82, 229, 16, 188, 138, 176, 19, 190, 36, 82, 164, 189, 162, 203, 91, 189, 171, 143, 12, 61, 178, 187, 235, 61, 182, 127, 183, 189, 4, 68, 220, 189, 146, 223, 201, 61, 1, 250, 140, 189, 156, 120, 212, 189, 82, 2, 147, 61, 43, 82, 229, 61, 95, 207, 41, 62, 220, 200, 58, 61, 29, 245, 154, 189, 144, 243, 135, 61, 46, 109, 252, 189, 17, 165, 162, 189, 41, 5, 179, 189, 209, 87, 250, 189, 40, 80, 68, 61, 138, 151, 6, 62, 114, 116, 138, 61, 43, 230, 173, 189, 210, 219, 44, 190, 183, 33, 249, 61, 161, 230, 182, 189, 122, 134, 25, 190, 21, 164, 72, 189, 149, 233, 16, 62, 133, 177, 218, 61, 0, 211, 163, 61, 171, 101, 8, 190, 34, 189, 2, 59, 101, 196, 113, 189, 195, 122, 13, 61, 37, 213, 186, 187, 226, 225, 119, 188, 5, 71, 158, 189, 58, 253, 54, 61, 227, 202, 190, 189, 132, 81, 16, 62, 251, 204, 198, 189, 209, 65, 47, 190, 226, 116, 181, 61, 115, 248, 17, 189, 35, 152, 24, 189, 252, 126, 237, 59, 110, 225, 37, 190, 13, 106, 209, 61, 231, 112, 100, 189, 243, 245, 174, 189, 111, 69, 46, 189, 189, 12, 32, 62, 110, 225, 16, 60, 54, 219, 3, 62, 116, 79, 140, 61, 1, 75, 119, 189, 44, 242, 68, 188, 253, 69, 27, 190, 207, 89, 210, 189, 50, 167, 23, 62, 194, 8, 163, 61, 240, 92, 207, 61, 102, 51, 166, 61, 123, 247, 153, 189, 24, 171, 133, 61, 16, 35, 248, 189, 228, 163, 247, 61, 135, 127, 56, 61, 26, 136, 180, 61, 91, 125, 27, 62, 226, 199, 239, 61, 248, 177, 218, 189, 74, 118, 193, 189, 165, 42, 29, 62, 201, 128, 26, 62, 193, 72, 42, 190, 186, 88, 75, 189, 159, 230, 75, 185, 8, 150, 176, 189, 109, 51, 94, 61, 13, 150, 130, 189, 122, 205, 37, 189, 10, 185, 197, 189, 20, 59, 40, 190, 89, 251, 134, 61, 34, 12, 82, 61, 159, 106, 167, 189, 67, 223, 8, 187, 38, 51, 204, 189, 252, 181, 140, 61, 25, 76, 54, 61, 114, 206, 212, 189, 144, 46, 24, 62, 159, 186, 164, 189, 169, 200, 7, 62, 235, 255, 44, 190, 17, 14, 146, 189, 211, 105, 118, 189, 214, 213, 124, 61, 23, 97, 1, 62, 207, 81, 146, 61, 76, 82, 226, 61, 132, 160, 206, 61, 67, 248, 82, 61, 195, 174, 43, 62, 61, 45, 180, 60, 147, 135, 39, 61, 157, 179, 228, 61, 247, 67, 41, 190, 144, 45, 91, 61, 185, 54, 190, 189, 167, 137, 114, 189, 98, 100, 96, 61, 70, 193, 181, 61, 32, 95, 125, 189, 118, 151, 23, 62, 146, 164, 6, 62, 61, 31, 33, 190, 207, 205, 142, 61, 54, 224, 210, 189, 33, 156, 168, 61, 155, 86, 212, 189, 243, 72, 207, 61, 131, 45, 23, 62, 38, 192, 101, 61, 21, 114, 31, 62, 235, 8, 246, 187, 76, 57, 206, 60, 109, 178, 219, 189, 246, 178, 45, 62, 161, 198, 238, 189, 238, 240, 6, 190, 90, 73, 17, 190, 63, 70, 240, 61, 89, 105, 97, 61, 185, 79, 236, 60, 6, 60, 211, 61, 58, 24, 5, 61, 88, 221, 50, 62, 150, 230, 42, 62, 82, 89, 172, 189, 25, 70, 51, 190, 37, 46, 41, 190, 70, 56, 29, 61, 63, 9, 244, 189, 96, 118, 42, 190, 239, 174, 21, 190, 85, 254, 157, 61, 245, 156, 204, 61, 115, 193, 16, 62, 161, 148, 6, 60, 243, 148, 45, 62, 89, 172, 164, 61, 244, 22, 239, 61, 115, 131, 249, 189, 197, 127, 13, 62, 111, 147, 97, 189, 99, 154, 109, 59, 232, 106, 252, 61, 55, 198, 218, 59, 233, 63, 10, 62, 88, 122, 33, 187, 112, 151, 60, 189, 63, 6, 176, 61, 203, 203, 137, 189, 111, 176, 41, 190, 124, 108, 46, 62, 101, 236, 225, 61, 163, 129, 132, 60, 63, 133, 227, 188, 120, 76, 132, 61, 233, 147, 65, 189, 127, 129, 7, 62, 117, 70, 10, 190, 44, 206, 130, 189, 107, 247, 146, 189, 73, 187, 237, 189, 88, 11, 64, 189, 102, 90, 120, 61, 185, 101, 244, 61, 170, 9, 81, 189, 138, 238, 147, 188, 143, 17, 29, 190, 71, 67, 6, 62, 135, 213, 0, 189, 19, 143, 161, 189, 142, 136, 113, 188, 16, 151, 146, 61, 182, 239, 19, 190, 142, 216, 229, 61, 154, 246, 7, 61, 73, 146, 82, 188, 72, 71, 87, 60, 172, 119, 9, 190, 19, 4, 230, 61, 148, 75, 98, 60, 86, 137, 22, 190, 173, 44, 12, 190, 147, 224, 254, 189, 1, 250, 32, 189, 134, 39, 190, 189, 113, 143, 152, 61, 69, 58, 134, 189, 99, 212, 2, 62, 133, 53, 41, 190, 107, 234, 165, 189, 124, 193, 118, 189, 183, 77, 145, 61, 237, 117, 195, 189, 214, 4, 125, 60, 5, 17, 48, 61, 126, 62, 14, 62, 7, 102, 27, 62, 243, 164, 16, 61, 98, 101, 207, 189, 65, 141, 213, 58, 228, 56, 35, 62, 243, 239, 217, 61, 247, 11, 235, 189, 144, 141, 135, 61, 205, 180, 17, 62, 136, 37, 93, 61, 37, 83, 22, 190, 128, 53, 31, 62, 246, 215, 10, 187, 71, 116, 208, 61, 234, 62, 32, 190, 130, 191, 50, 189, 154, 131, 47, 62, 239, 211, 206, 188, 30, 12, 146, 189, 125, 203, 20, 59, 178, 65, 202, 188, 246, 16, 235, 61, 58, 74, 14, 190, 83, 54, 32, 62, 243, 2, 29, 190, 135, 40, 231, 59, 62, 198, 251, 61, 148, 135, 0, 61, 219, 200, 224, 189, 50, 124, 12, 62, 219, 166, 164, 189, 141, 73, 114, 61, 129, 130, 177, 188, 11, 184, 207, 188, 139, 233, 6, 190, 247, 9, 181, 188, 153, 137, 34, 62, 43, 54, 48, 190, 244, 33, 224, 189, 84, 116, 45, 190, 97, 189, 225, 189, 145, 24, 157, 61, 153, 1, 35, 62, 121, 69, 198, 61, 247, 119, 143, 61, 46, 176, 70, 61, 112, 245, 184, 188, 195, 86, 215, 189, 246, 75, 3, 190, 175, 218, 156, 189, 1, 49, 105, 61, 227, 115, 7, 62, 56, 207, 88, 61, 194, 124, 179, 61, 105, 109, 40, 62, 21, 117, 170, 188, 205, 87, 85, 189, 247, 46, 196, 187, 159, 185, 13, 62, 195, 104, 242, 61, 147, 36, 211, 189, 151, 186, 69, 60, 178, 152, 216, 189, 129, 243, 33, 62, 120, 142, 213, 61, 213, 86, 84, 187, 237, 160, 4, 188, 156, 121, 133, 61, 155, 27, 119, 61, 235, 147, 38, 189, 150, 251, 194, 189, 99, 97, 69, 61, 86, 186, 174, 189, 50, 28, 206, 61, 21, 36, 87, 61, 41, 223, 40, 189, 189, 14, 28, 61, 228, 216, 123, 61, 87, 156, 31, 189, 95, 154, 20, 190, 6, 228, 5, 62, 230, 250, 2, 190, 93, 42, 47, 62, 25, 89, 184, 189, 240, 198, 169, 187, 227, 36, 217, 189, 58, 129, 47, 62, 6, 232, 51, 62, 224, 224, 115, 189, 168, 171, 18, 190, 9, 232, 237, 60, 115, 195, 35, 190, 213, 203, 26, 190, 171, 12, 73, 189, 67, 220, 246, 189, 7, 30, 28, 188, 32, 195, 64, 60, 243, 112, 210, 61, 160, 155, 232, 189, 41, 202, 147, 189, 197, 27, 30, 190, 192, 51, 11, 61, 114, 199, 33, 190, 17, 65, 221, 189, 179, 111, 242, 61, 234, 28, 244, 61, 178, 212, 183, 61, 4, 99, 104, 59, 200, 186, 29, 190, 181, 2, 229, 189, 253, 88, 214, 61, 24, 226, 255, 61, 55, 159, 38, 62, 145, 121, 55, 61, 11, 53, 7, 62, 69, 103, 178, 189, 43, 252, 45, 188, 56, 27, 138, 61, 175, 10, 118, 60, 62, 128, 48, 189, 18, 154, 29, 190, 200, 61, 11, 190, 34, 169, 48, 188, 111, 200, 26, 62, 237, 170, 44, 190, 67, 169, 152, 61, 81, 227, 48, 190, 26, 44, 211, 61, 122, 101, 254, 189, 135, 238, 145, 60, 218, 97, 121, 189, 151, 207, 203, 189, 45, 53, 160, 61, 192, 74, 232, 189, 57, 250, 58, 61, 104, 50, 10, 60, 141, 227, 37, 188, 231, 138, 230, 189, 67, 142, 191, 189, 5, 233, 228, 189, 31, 192, 7, 190, 72, 13, 23, 60, 61, 135, 195, 61, 78, 136, 43, 190, 232, 111, 255, 188, 164, 131, 200, 189, 239, 192, 186, 189, 152, 155, 85, 61, 20, 72, 3, 61, 173, 181, 6, 190, 74, 102, 248, 60, 51, 139, 30, 62, 222, 195, 32, 61, 118, 225, 138, 189, 137, 143, 0, 62, 165, 7, 145, 61, 196, 46, 8, 62, 30, 139, 92, 60, 213, 187, 22, 189, 117, 182, 11, 190, 237, 88, 247, 60, 211, 246, 240, 61, 191, 186, 111, 61, 212, 104, 183, 61, 7, 25, 166, 61, 78, 82, 15, 62, 173, 97, 33, 62, 253, 233, 88, 189, 9, 21, 39, 190, 229, 12, 50, 190, 27, 253, 237, 61, 125, 25, 17, 61, 213, 165, 117, 186, 173, 77, 36, 62, 212, 215, 50, 62, 19, 161, 42, 62, 147, 178, 98, 61, 8, 135, 54, 59, 110, 114, 16, 62, 89, 18, 221, 189, 148, 101, 27, 190, 53, 160, 218, 187, 239, 169, 192, 61, 149, 111, 84, 60, 116, 237, 6, 62, 234, 179, 165, 189, 99, 94, 165, 189, 121, 134, 43, 190, 155, 244, 176, 61, 157, 142, 24, 62, 243, 192, 137, 61, 180, 137, 47, 62, 75, 80, 71, 60, 225, 41, 216, 61, 153, 70, 51, 190, 211, 252, 31, 62, 130, 214, 72, 61, 81, 161, 37, 189, 112, 61, 196, 189, 181, 182, 133, 188, 76, 128, 210, 60, 108, 129, 46, 190, 184, 237, 30, 189, 61, 251, 50, 190, 46, 51, 27, 61, 103, 43, 159, 61, 18, 190, 23, 190, 171, 63, 7, 190, 169, 140, 231, 61, 96, 218, 3, 190, 12, 124, 113, 188, 151, 132, 249, 61, 241, 94, 208, 189, 204, 115, 8, 62, 65, 100, 11, 190, 237, 78, 37, 187, 14, 189, 4, 61, 133, 111, 39, 190, 24, 92, 16, 61, 253, 228, 20, 62, 146, 58, 105, 61, 215, 86, 139, 189, 158, 58, 208, 189, 194, 125, 238, 189, 90, 180, 169, 61, 158, 73, 38, 61, 118, 136, 15, 189, 246, 226, 132, 61, 117, 1, 49, 190, 49, 95, 123, 189, 232, 232, 6, 190, 216, 205, 154, 60, 118, 129, 226, 61, 101, 171, 30, 190, 245, 42, 147, 60, 54, 52, 211, 56, 228, 213, 153, 189, 146, 136, 166, 61, 72, 112, 49, 190, 13, 244, 195, 189, 82, 227, 13, 190, 162, 148, 22, 61, 147, 132, 13, 190, 65, 124, 206, 61, 89, 7, 78, 189, 65, 223, 58, 189, 174, 184, 50, 61, 146, 48, 149, 61, 27, 173, 190, 188, 139, 23, 44, 190, 148, 66, 181, 188, 40, 228, 111, 61, 112, 40, 61, 61, 237, 17, 239, 61, 214, 229, 144, 61, 135, 150, 225, 61, 37, 107, 188, 61, 101, 27, 52, 62, 196, 93, 85, 61, 125, 240, 207, 61, 225, 201, 13, 190, 123, 235, 204, 189, 76, 4, 46, 62, 41, 138, 23, 62, 29, 164, 104, 188, 178, 97, 151, 58, 55, 103, 11, 189, 88, 44, 37, 61, 196, 237, 53, 188, 188, 54, 78, 61, 133, 88, 200, 61, 27, 74, 252, 61, 136, 49, 128, 60, 225, 143, 25, 189, 46, 202, 152, 189, 37, 185, 51, 190, 176, 21, 239, 189, 251, 47, 38, 62, 186, 188, 10, 190, 75, 171, 6, 62, 107, 175, 163, 189, 4, 248, 15, 190, 149, 98, 51, 190, 53, 209, 4, 62, 13, 43, 143, 189, 152, 226, 108, 189, 214, 116, 175, 189, 42, 186, 7, 62, 64, 55, 26, 189, 103, 209, 145, 61, 155, 190, 238, 189, 228, 113, 0, 62, 176, 241, 124, 189, 111, 162, 9, 62, 103, 83, 30, 62, 11, 63, 36, 187, 186, 14, 72, 189, 143, 255, 119, 61, 180, 228, 158, 61, 128, 69, 119, 61, 83, 194, 155, 189, 105, 169, 23, 190, 237, 19, 7, 62, 58, 228, 182, 189, 197, 101, 149, 189, 229, 190, 175, 61, 27, 109, 246, 61, 57, 148, 148, 188, 92, 255, 136, 189, 172, 106, 196, 60, 212, 251, 89, 189, 136, 37, 51, 61, 52, 22, 75, 61, 133, 190, 173, 187, 182, 165, 159, 188, 62, 58, 23, 190, 231, 53, 41, 190, 145, 69, 216, 189, 63, 217, 175, 187, 188, 183, 28, 189, 218, 235, 110, 61, 193, 116, 54, 189, 10, 2, 35, 62, 250, 81, 0, 62, 49, 102, 88, 60, 226, 85, 57, 189, 153, 64, 60, 60, 244, 138, 148, 61, 157, 130, 240, 188, 19, 77, 248, 61, 4, 75, 41, 62, 117, 22, 56, 61, 174, 37, 48, 62, 100, 47, 231, 61, 124, 100, 129, 61, 145, 208, 19, 62, 153, 72, 68, 60, 242, 75, 50, 190, 29, 249, 23, 189, 232, 159, 166, 61, 157, 93, 7, 190, 71, 224, 31, 189, 249, 45, 140, 189, 182, 90, 149, 61, 57, 221, 177, 189, 50, 55, 48, 62, 70, 153, 51, 62, 153, 165, 34, 190, 237, 19, 20, 62, 155, 57, 181, 61, 36, 76, 44, 190, 17, 155, 16, 62, 212, 43, 183, 60, 222, 200, 218, 188, 22, 7, 22, 62, 188, 18, 168, 189, 71, 43, 180, 189, 211, 29, 157, 187, 178, 37, 194, 60, 202, 118, 10, 190, 123, 254, 158, 60, 125, 54, 7, 190, 129, 71, 181, 187, 54, 172, 154, 59, 197, 71, 12, 62, 67, 8, 192, 61, 61, 185, 8, 62, 200, 76, 88, 61, 80, 56, 242, 61, 239, 24, 228, 61, 181, 74, 50, 190, 57, 58, 45, 61, 49, 179, 32, 62, 91, 198, 151, 61, 143, 120, 144, 61, 62, 169, 17, 62, 83, 94, 166, 60, 157, 240, 23, 62, 80, 20, 39, 190, 184, 146, 2, 190, 27, 19, 8, 62, 187, 21, 5, 60, 84, 60, 73, 61, 61, 107, 52, 190, 176, 113, 7, 62, 235, 95, 180, 189, 83, 195, 154, 61, 136, 26, 216, 61, 151, 218, 35, 61, 173, 114, 249, 189, 42, 40, 0, 189, 205, 156, 3, 190, 151, 22, 52, 61, 82, 137, 200, 60, 185, 53, 222, 189, 136, 200, 91, 61, 192, 91, 172, 189, 65, 211, 205, 61, 185, 111, 40, 190, 92, 143, 2, 190, 162, 86, 174, 187, 5, 8, 240, 60, 22, 145, 47, 189, 93, 73, 19, 62, 244, 208, 46, 190, 212, 159, 41, 62, 217, 40, 8, 190, 237, 14, 76, 60, 93, 185, 187, 60, 163, 55, 249, 61, 208, 217, 191, 189, 74, 73, 113, 189, 55, 237, 232, 189, 62, 53, 16, 62, 29, 44, 17, 190, 98, 136, 4, 190, 125, 2, 18, 62, 39, 164, 174, 61, 173, 203, 214, 189, 87, 220, 179, 61, 145, 141, 80, 189, 99, 224, 25, 190, 14, 55, 32, 190, 76, 89, 218, 61, 58, 199, 164, 61, 99, 65, 168, 189, 68, 100, 45, 190, 254, 99, 16, 190, 36, 17, 220, 188, 94, 151, 27, 188, 236, 105, 31, 190, 153, 254, 52, 190, 216, 76, 252, 189, 72, 26, 212, 189, 213, 191, 176, 189, 208, 117, 3, 62, 169, 161, 140, 189, 211, 22, 205, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 233, 16, 190, 183, 75, 13, 189, 227, 123, 166, 189, 97, 136, 146, 61, 239, 2, 19, 190, 138, 121, 12, 62, 44, 144, 97, 61, 250, 30, 45, 60, 36, 141, 247, 61, 44, 18, 49, 189, 47, 39, 37, 189, 145, 202, 132, 61, 236, 188, 4, 189, 72, 187, 5, 58, 154, 67, 129, 61, 248, 197, 35, 190, 207, 89, 238, 189, 212, 11, 202, 189, 165, 127, 118, 61, 87, 220, 192, 61, 164, 159, 137, 61, 5, 235, 190, 189, 79, 37, 239, 189, 85, 249, 248, 61, 177, 73, 112, 189, 33, 169, 32, 190, 71, 40, 144, 61, 19, 53, 131, 188, 105, 83, 154, 189, 8, 178, 49, 190, 69, 12, 180, 188, 208, 27, 50, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 215, 214, 61, 126, 69, 134, 189, 164, 151, 248, 61, 145, 148, 165, 61, 109, 205, 11, 62, 85, 22, 229, 60, 104, 99, 6, 62, 183, 170, 189, 189, 48, 58, 43, 190, 159, 32, 226, 60, 234, 183, 141, 61, 215, 170, 48, 190, 26, 5, 41, 190, 118, 113, 34, 190, 115, 227, 69, 189, 203, 1, 250, 61, 220, 37, 188, 60, 60, 247, 141, 189, 21, 146, 183, 189, 27, 86, 46, 60, 76, 175, 120, 189, 192, 34, 135, 189, 71, 246, 203, 61, 36, 88, 207, 61, 82, 81, 148, 189, 227, 111, 223, 61, 175, 144, 241, 61, 71, 120, 40, 61, 48, 198, 164, 61, 103, 86, 236, 189, 103, 179, 163, 61, 176, 159, 174, 189, 138, 176, 222, 61, 177, 54, 185, 187, 117, 154, 221, 61, 131, 236, 165, 189, 168, 80, 2, 190, 89, 175, 0, 62, 220, 176, 50, 188, 213, 114, 39, 190, 149, 176, 52, 62, 35, 213, 145, 61, 247, 228, 71, 59, 52, 2, 165, 186, 223, 234, 95, 61, 238, 83, 186, 189, 15, 210, 48, 60, 28, 43, 83, 60, 67, 15, 221, 189, 4, 57, 88, 189, 55, 178, 30, 190, 184, 168, 134, 189, 170, 9, 251, 61, 238, 245, 110, 187, 19, 40, 241, 189, 12, 142, 5, 62, 72, 90, 136, 60, 184, 216, 174, 61, 46, 87, 42, 62, 114, 45, 176, 189, 177, 180, 3, 190, 150, 5, 151, 189, 25, 90, 38, 190, 89, 124, 19, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 166, 34, 190, 2, 66, 216, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {163, 230, 49, 62, 208, 23, 27, 191, 166, 131, 251, 57};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {47, 89, 223, 189, 116, 69, 188, 188};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0088/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}