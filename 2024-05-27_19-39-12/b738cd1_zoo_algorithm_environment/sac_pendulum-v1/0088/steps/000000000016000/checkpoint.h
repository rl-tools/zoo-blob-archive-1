// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 140, 51, 63, 25, 59, 242, 60, 125, 108, 132, 62, 28, 125, 169, 62, 243, 145, 119, 191, 0, 58, 94, 190, 14, 64, 162, 190, 43, 182, 232, 191, 185, 181, 216, 190, 198, 101, 50, 191, 61, 42, 232, 62, 13, 2, 84, 191, 57, 95, 246, 61, 107, 155, 26, 63, 250, 182, 98, 63, 39, 17, 8, 191, 40, 57, 157, 63, 210, 154, 128, 62, 80, 47, 239, 62, 127, 1, 127, 191, 91, 2, 4, 191, 106, 43, 14, 191, 124, 247, 107, 191, 109, 149, 146, 62, 82, 107, 49, 63, 31, 112, 169, 190, 73, 107, 130, 190, 54, 119, 201, 188, 7, 218, 164, 190, 39, 163, 213, 62, 241, 100, 253, 188, 155, 51, 147, 191, 130, 218, 129, 190, 123, 54, 187, 189, 39, 93, 37, 191, 219, 142, 135, 60, 249, 156, 57, 63, 171, 82, 69, 191, 90, 139, 159, 189, 108, 210, 40, 63, 191, 131, 146, 63, 20, 88, 162, 62, 92, 23, 153, 187, 220, 134, 101, 63, 40, 39, 195, 190, 21, 207, 61, 62, 15, 125, 86, 63, 164, 50, 154, 190, 218, 74, 1, 63, 82, 78, 13, 189, 254, 12, 29, 191, 134, 243, 71, 62, 250, 255, 199, 61, 230, 52, 231, 190, 40, 186, 141, 190, 128, 200, 131, 191, 109, 13, 119, 190, 236, 101, 12, 190, 38, 110, 246, 62, 170, 167, 181, 61, 43, 120, 210, 190, 112, 84, 135, 191, 53, 90, 123, 190, 33, 48, 133, 191, 112, 11, 35, 190, 169, 53, 255, 60, 188, 45, 104, 191, 206, 58, 151, 62, 180, 114, 88, 189, 151, 182, 16, 62, 191, 51, 158, 62, 111, 113, 210, 190, 165, 39, 50, 63, 248, 141, 150, 63, 122, 76, 247, 62, 203, 224, 233, 61, 0, 156, 195, 63, 29, 201, 1, 63, 2, 143, 237, 62, 43, 216, 42, 187, 199, 24, 12, 63, 129, 157, 6, 62, 5, 85, 105, 191, 95, 176, 201, 62, 49, 170, 136, 189, 218, 193, 201, 63, 101, 41, 161, 62, 240, 48, 87, 63, 158, 160, 132, 62, 32, 0, 183, 189, 137, 197, 6, 191, 146, 246, 63, 190, 47, 167, 195, 62, 178, 49, 175, 190, 119, 151, 141, 191, 190, 127, 196, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 20, 119, 191, 191, 157, 136, 189, 52, 118, 9, 189, 103, 197, 135, 61, 252, 1, 99, 62, 234, 12, 6, 191, 246, 143, 163, 190, 207, 123, 13, 191, 63, 204, 103, 191, 230, 114, 45, 190, 165, 25, 201, 62, 206, 255, 22, 63, 39, 151, 146, 189, 209, 204, 182, 190, 242, 123, 46, 187, 148, 19, 63, 62, 15, 127, 169, 61, 242, 22, 184, 189, 121, 152, 190, 62, 122, 191, 202, 62, 191, 82, 212, 62, 242, 121, 74, 190, 76, 239, 7, 63, 251, 107, 173, 190, 231, 39, 212, 61, 46, 1, 21, 62, 61, 87, 135, 62, 178, 72, 84, 60, 8, 238, 131, 190, 143, 60, 55, 190, 245, 109, 248, 190, 229, 144, 26, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 140, 217, 189, 15, 21, 32, 62, 198, 253, 40, 190, 205, 189, 95, 59, 26, 98, 228, 60, 58, 44, 171, 189, 153, 13, 47, 59, 93, 48, 246, 188, 96, 225, 7, 190, 233, 144, 207, 189, 21, 239, 128, 189, 108, 94, 205, 187, 240, 31, 42, 190, 129, 197, 53, 188, 190, 51, 4, 190, 27, 24, 98, 60, 233, 57, 169, 188, 159, 94, 36, 61, 184, 52, 162, 189, 25, 128, 12, 189, 85, 112, 37, 60, 198, 168, 177, 189, 140, 67, 1, 61, 243, 39, 206, 189, 16, 147, 180, 61, 59, 0, 63, 189, 225, 28, 64, 190, 182, 22, 208, 189, 209, 191, 17, 62, 96, 90, 134, 189, 127, 133, 199, 188, 189, 219, 33, 190, 45, 212, 48, 189, 197, 210, 48, 191, 3, 234, 181, 190, 178, 239, 206, 61, 223, 78, 4, 61, 192, 125, 63, 189, 108, 240, 2, 191, 12, 10, 1, 191, 236, 218, 251, 190, 87, 18, 198, 190, 137, 160, 52, 190, 169, 156, 46, 190, 109, 142, 194, 60, 160, 89, 76, 62, 141, 8, 234, 62, 88, 219, 136, 62, 41, 54, 250, 60, 190, 141, 38, 190, 98, 52, 72, 191, 52, 129, 126, 61, 16, 44, 211, 190, 68, 67, 236, 189, 3, 52, 169, 62, 15, 12, 230, 190, 41, 7, 49, 62, 52, 113, 105, 62, 118, 217, 43, 189, 83, 166, 14, 191, 64, 219, 252, 188, 85, 134, 196, 62, 177, 100, 147, 190, 31, 239, 237, 188, 201, 170, 219, 190, 100, 121, 227, 62, 192, 20, 182, 191, 80, 60, 166, 189, 37, 216, 206, 187, 53, 201, 48, 62, 32, 223, 161, 62, 92, 132, 219, 189, 104, 45, 67, 63, 109, 222, 183, 62, 60, 41, 183, 60, 159, 209, 43, 62, 218, 250, 11, 63, 201, 18, 77, 191, 212, 223, 182, 188, 131, 180, 0, 191, 58, 214, 144, 188, 174, 196, 192, 62, 40, 14, 214, 62, 194, 240, 8, 190, 22, 76, 30, 62, 86, 156, 22, 190, 230, 211, 177, 61, 15, 93, 17, 63, 51, 74, 173, 190, 191, 252, 118, 61, 27, 83, 184, 189, 243, 222, 189, 61, 130, 206, 64, 62, 134, 68, 88, 190, 96, 197, 23, 190, 241, 44, 200, 191, 60, 134, 2, 185, 133, 60, 61, 62, 49, 63, 161, 190, 46, 160, 217, 189, 173, 67, 230, 188, 102, 201, 232, 61, 19, 160, 13, 190, 103, 113, 73, 190, 239, 242, 197, 189, 136, 225, 150, 62, 183, 144, 246, 60, 254, 169, 90, 62, 41, 202, 174, 62, 143, 11, 246, 190, 60, 115, 239, 189, 253, 58, 2, 62, 154, 214, 28, 62, 85, 218, 137, 61, 246, 59, 194, 62, 106, 118, 98, 62, 170, 2, 20, 61, 121, 110, 93, 62, 108, 21, 10, 189, 90, 135, 146, 190, 184, 0, 51, 61, 59, 95, 138, 61, 118, 118, 174, 189, 247, 204, 38, 189, 75, 0, 64, 62, 176, 83, 19, 62, 234, 48, 177, 189, 62, 185, 158, 189, 108, 114, 65, 189, 124, 234, 87, 190, 242, 22, 0, 61, 198, 87, 171, 62, 149, 53, 42, 191, 27, 195, 137, 191, 34, 68, 53, 190, 182, 96, 154, 63, 91, 225, 230, 62, 116, 247, 212, 188, 226, 67, 203, 61, 44, 31, 221, 60, 148, 96, 182, 62, 218, 213, 136, 61, 208, 169, 98, 62, 34, 248, 64, 62, 182, 132, 44, 62, 212, 0, 4, 62, 187, 211, 185, 188, 136, 214, 121, 61, 177, 13, 189, 188, 149, 234, 235, 189, 149, 140, 185, 61, 96, 26, 50, 62, 226, 103, 14, 62, 150, 74, 193, 190, 213, 140, 198, 189, 132, 99, 117, 189, 176, 175, 49, 189, 16, 114, 39, 62, 18, 147, 224, 188, 117, 158, 185, 62, 66, 138, 195, 188, 171, 236, 133, 190, 0, 75, 60, 190, 4, 252, 157, 189, 205, 3, 184, 61, 248, 54, 8, 61, 229, 115, 201, 61, 98, 121, 24, 190, 230, 61, 137, 188, 40, 205, 197, 190, 184, 241, 102, 190, 139, 7, 104, 189, 202, 62, 130, 190, 78, 14, 152, 190, 66, 183, 42, 190, 243, 75, 228, 189, 223, 225, 84, 61, 203, 125, 30, 61, 1, 165, 158, 189, 128, 216, 199, 189, 111, 44, 37, 189, 92, 30, 155, 61, 107, 247, 248, 61, 159, 199, 208, 189, 52, 119, 18, 191, 103, 190, 193, 189, 29, 50, 15, 191, 152, 9, 99, 190, 74, 36, 62, 61, 78, 69, 64, 190, 212, 145, 174, 190, 166, 77, 214, 190, 96, 197, 244, 189, 40, 124, 213, 188, 40, 155, 161, 191, 152, 146, 225, 189, 179, 14, 12, 62, 135, 45, 179, 62, 121, 64, 75, 61, 40, 90, 113, 190, 86, 15, 161, 189, 251, 110, 173, 62, 226, 95, 231, 60, 23, 11, 177, 61, 254, 166, 70, 62, 12, 177, 91, 190, 16, 95, 63, 191, 103, 49, 4, 191, 62, 42, 232, 61, 2, 154, 187, 189, 128, 138, 87, 189, 54, 213, 156, 190, 58, 201, 91, 61, 144, 182, 216, 61, 157, 58, 41, 62, 5, 9, 39, 190, 233, 199, 183, 189, 68, 209, 36, 61, 218, 240, 49, 187, 237, 171, 71, 62, 85, 94, 107, 61, 41, 225, 110, 190, 244, 225, 7, 189, 146, 99, 160, 191, 10, 163, 163, 59, 162, 52, 143, 190, 31, 53, 108, 62, 252, 49, 112, 189, 159, 131, 35, 190, 94, 187, 91, 191, 155, 35, 13, 61, 56, 23, 60, 60, 68, 10, 178, 190, 40, 173, 28, 191, 3, 227, 125, 62, 210, 37, 81, 61, 6, 92, 198, 186, 0, 120, 64, 62, 120, 212, 9, 62, 157, 173, 162, 62, 219, 233, 229, 61, 53, 10, 19, 189, 188, 227, 68, 62, 210, 106, 58, 62, 251, 13, 36, 61, 97, 21, 50, 62, 101, 210, 82, 62, 205, 171, 181, 190, 217, 210, 41, 189, 237, 211, 158, 191, 23, 185, 124, 189, 153, 72, 87, 191, 133, 128, 51, 191, 94, 193, 101, 190, 116, 131, 26, 63, 149, 18, 148, 61, 97, 191, 63, 188, 215, 122, 39, 191, 94, 95, 129, 188, 34, 92, 153, 62, 80, 157, 148, 191, 179, 40, 126, 191, 41, 149, 174, 190, 240, 14, 4, 62, 117, 139, 98, 191, 17, 71, 33, 190, 229, 61, 6, 61, 121, 46, 205, 62, 53, 7, 187, 62, 155, 136, 3, 190, 188, 86, 87, 187, 169, 245, 101, 189, 162, 193, 209, 189, 148, 181, 113, 189, 248, 161, 253, 61, 99, 130, 189, 61, 221, 21, 152, 61, 77, 36, 2, 63, 248, 59, 178, 62, 86, 214, 168, 190, 195, 50, 215, 190, 244, 44, 9, 192, 93, 194, 53, 62, 95, 43, 237, 190, 33, 21, 147, 191, 115, 145, 169, 62, 22, 193, 17, 63, 49, 205, 82, 62, 94, 102, 255, 188, 19, 145, 224, 189, 61, 62, 3, 62, 111, 171, 251, 188, 116, 208, 63, 60, 159, 114, 221, 188, 15, 17, 34, 190, 128, 60, 189, 61, 136, 205, 168, 189, 219, 32, 19, 190, 75, 249, 251, 189, 9, 127, 91, 60, 123, 241, 17, 61, 58, 177, 163, 60, 88, 235, 167, 189, 41, 219, 190, 61, 148, 164, 103, 188, 146, 62, 144, 61, 229, 136, 21, 190, 144, 29, 1, 62, 140, 111, 101, 60, 104, 62, 129, 61, 38, 47, 221, 189, 221, 8, 52, 61, 27, 200, 30, 190, 224, 50, 254, 189, 120, 59, 0, 190, 231, 117, 249, 61, 157, 240, 166, 61, 146, 241, 69, 61, 16, 209, 84, 61, 93, 171, 64, 190, 42, 121, 51, 190, 255, 221, 244, 190, 29, 38, 170, 62, 135, 65, 73, 62, 130, 67, 217, 190, 219, 80, 19, 191, 86, 137, 130, 190, 207, 142, 81, 63, 59, 64, 243, 62, 192, 127, 193, 190, 74, 233, 159, 61, 232, 73, 183, 190, 39, 136, 66, 191, 196, 157, 43, 61, 216, 96, 80, 62, 244, 41, 229, 60, 238, 191, 15, 190, 225, 111, 148, 189, 201, 102, 172, 189, 212, 9, 229, 189, 167, 188, 231, 61, 182, 177, 131, 61, 175, 159, 248, 61, 59, 241, 82, 61, 58, 112, 71, 190, 240, 200, 243, 188, 0, 198, 207, 189, 192, 44, 146, 190, 113, 242, 237, 190, 98, 36, 54, 191, 161, 114, 226, 190, 117, 36, 136, 62, 252, 122, 85, 62, 222, 213, 214, 190, 186, 204, 11, 191, 152, 86, 19, 62, 147, 134, 159, 61, 118, 71, 73, 190, 40, 14, 26, 191, 76, 16, 204, 189, 161, 33, 237, 190, 83, 76, 96, 190, 74, 150, 1, 191, 128, 121, 41, 62, 47, 187, 63, 62, 74, 82, 105, 62, 55, 88, 184, 62, 51, 158, 67, 62, 3, 108, 80, 61, 149, 58, 197, 61, 119, 6, 182, 191, 191, 94, 236, 61, 29, 22, 184, 191, 203, 40, 0, 191, 6, 236, 185, 188, 254, 96, 167, 61, 64, 234, 149, 62, 59, 143, 236, 186, 199, 195, 183, 60, 102, 70, 16, 62, 96, 15, 181, 190, 5, 239, 217, 62, 43, 83, 14, 61, 30, 0, 77, 190, 95, 207, 41, 62, 220, 200, 58, 61, 29, 245, 154, 189, 141, 172, 107, 61, 46, 109, 252, 189, 17, 165, 162, 189, 119, 196, 182, 189, 209, 87, 250, 189, 40, 80, 68, 61, 138, 151, 6, 62, 223, 219, 127, 61, 0, 56, 175, 189, 210, 219, 44, 190, 171, 208, 244, 61, 187, 167, 198, 189, 238, 41, 34, 190, 101, 246, 108, 189, 178, 180, 11, 62, 133, 177, 218, 61, 54, 44, 153, 61, 171, 101, 8, 190, 34, 189, 2, 59, 127, 136, 130, 189, 179, 108, 252, 60, 134, 243, 52, 188, 226, 225, 119, 188, 5, 71, 158, 189, 58, 253, 54, 61, 227, 202, 190, 189, 120, 44, 10, 62, 251, 204, 198, 189, 209, 65, 47, 190, 227, 114, 167, 62, 235, 248, 19, 191, 160, 251, 201, 190, 126, 17, 92, 62, 225, 62, 55, 190, 253, 105, 158, 190, 140, 194, 236, 190, 127, 175, 127, 61, 76, 153, 42, 191, 37, 198, 118, 189, 163, 107, 206, 189, 178, 94, 231, 61, 251, 193, 163, 62, 102, 192, 108, 188, 33, 248, 236, 62, 139, 105, 115, 62, 76, 1, 18, 190, 114, 249, 192, 187, 18, 211, 36, 191, 106, 148, 251, 61, 200, 175, 41, 191, 240, 213, 25, 191, 201, 95, 140, 61, 73, 119, 167, 190, 49, 204, 132, 62, 183, 114, 3, 60, 171, 73, 128, 62, 191, 118, 145, 61, 143, 219, 168, 190, 90, 92, 131, 62, 220, 117, 23, 189, 206, 24, 243, 60, 94, 244, 146, 62, 19, 41, 98, 191, 251, 105, 84, 190, 189, 142, 60, 62, 132, 132, 29, 190, 240, 226, 27, 191, 243, 9, 23, 191, 66, 100, 61, 62, 186, 200, 104, 191, 181, 26, 215, 190, 123, 217, 141, 61, 189, 228, 213, 59, 148, 150, 41, 186, 183, 211, 24, 61, 115, 50, 154, 62, 86, 95, 222, 62, 43, 183, 211, 189, 205, 70, 198, 190, 59, 29, 37, 190, 159, 79, 139, 61, 9, 217, 62, 189, 235, 2, 194, 189, 99, 127, 26, 61, 234, 163, 201, 190, 107, 167, 75, 62, 124, 16, 55, 190, 47, 5, 87, 62, 98, 5, 20, 60, 231, 105, 132, 191, 86, 205, 175, 62, 182, 124, 180, 62, 177, 61, 153, 189, 5, 228, 151, 190, 96, 130, 224, 62, 243, 206, 39, 191, 136, 76, 16, 190, 24, 61, 152, 61, 9, 246, 249, 62, 255, 33, 133, 62, 163, 199, 143, 190, 222, 249, 144, 62, 115, 99, 23, 63, 126, 160, 177, 61, 168, 116, 239, 61, 204, 122, 5, 63, 217, 113, 22, 191, 237, 245, 68, 190, 249, 201, 171, 190, 124, 11, 32, 62, 143, 137, 89, 62, 30, 61, 112, 62, 8, 224, 33, 62, 214, 238, 242, 61, 25, 95, 138, 189, 235, 109, 209, 189, 227, 124, 110, 62, 9, 55, 200, 190, 170, 144, 189, 188, 2, 101, 179, 190, 111, 86, 236, 62, 74, 72, 5, 63, 1, 86, 136, 62, 248, 110, 31, 190, 98, 144, 219, 190, 129, 250, 151, 60, 186, 143, 135, 62, 174, 16, 126, 191, 61, 109, 244, 190, 234, 180, 212, 190, 78, 127, 29, 62, 126, 47, 47, 62, 23, 186, 217, 190, 50, 55, 20, 191, 165, 200, 229, 61, 213, 197, 17, 62, 64, 147, 26, 62, 229, 33, 194, 62, 90, 122, 100, 190, 35, 169, 202, 190, 74, 12, 243, 188, 170, 194, 19, 62, 165, 56, 111, 62, 162, 166, 98, 188, 12, 76, 146, 61, 234, 148, 178, 62, 2, 123, 95, 62, 145, 185, 71, 62, 157, 240, 72, 189, 249, 184, 83, 190, 41, 6, 238, 189, 246, 127, 147, 190, 153, 16, 210, 190, 217, 38, 140, 62, 99, 115, 208, 62, 140, 227, 119, 190, 188, 91, 198, 191, 120, 76, 132, 61, 233, 147, 65, 189, 127, 129, 7, 62, 117, 70, 10, 190, 44, 206, 130, 189, 107, 247, 146, 189, 73, 187, 237, 189, 88, 11, 64, 189, 102, 90, 120, 61, 185, 101, 244, 61, 170, 9, 81, 189, 138, 238, 147, 188, 143, 17, 29, 190, 71, 67, 6, 62, 135, 213, 0, 189, 19, 143, 161, 189, 142, 136, 113, 188, 16, 151, 146, 61, 182, 239, 19, 190, 142, 216, 229, 61, 154, 246, 7, 61, 73, 146, 82, 188, 72, 71, 87, 60, 172, 119, 9, 190, 19, 4, 230, 61, 148, 75, 98, 60, 86, 137, 22, 190, 173, 44, 12, 190, 147, 224, 254, 189, 1, 250, 32, 189, 134, 39, 190, 189, 113, 143, 152, 61, 134, 107, 205, 190, 188, 167, 154, 185, 204, 154, 172, 191, 46, 140, 102, 190, 243, 111, 80, 61, 188, 201, 0, 63, 128, 175, 97, 189, 109, 44, 166, 190, 170, 84, 192, 190, 186, 16, 49, 189, 11, 122, 21, 62, 144, 110, 151, 61, 2, 47, 249, 61, 52, 94, 241, 189, 122, 89, 126, 61, 21, 224, 203, 61, 247, 34, 86, 61, 239, 59, 247, 189, 206, 156, 240, 190, 78, 234, 95, 62, 154, 86, 167, 191, 26, 152, 125, 62, 145, 65, 127, 189, 5, 185, 240, 189, 138, 130, 131, 189, 252, 172, 126, 61, 228, 45, 128, 62, 26, 120, 150, 190, 82, 185, 8, 61, 10, 159, 193, 62, 105, 228, 59, 190, 166, 30, 23, 190, 2, 34, 179, 190, 170, 237, 183, 62, 241, 67, 149, 190, 177, 246, 34, 190, 110, 171, 130, 61, 111, 74, 136, 190, 6, 227, 90, 190, 55, 154, 213, 61, 118, 125, 197, 189, 135, 78, 161, 62, 156, 72, 3, 62, 240, 75, 54, 62, 19, 82, 172, 62, 32, 19, 63, 191, 114, 194, 37, 190, 202, 255, 147, 190, 152, 185, 178, 189, 222, 32, 166, 190, 74, 232, 154, 62, 52, 112, 14, 62, 192, 42, 1, 63, 155, 167, 40, 62, 86, 125, 224, 61, 131, 30, 90, 190, 198, 157, 165, 190, 177, 145, 184, 190, 70, 31, 118, 190, 174, 167, 217, 61, 163, 237, 176, 190, 86, 187, 134, 62, 128, 56, 170, 189, 73, 46, 248, 60, 19, 168, 126, 188, 17, 152, 110, 191, 154, 91, 102, 190, 138, 170, 92, 62, 48, 53, 101, 60, 184, 173, 178, 190, 238, 52, 40, 191, 101, 0, 143, 62, 24, 138, 81, 191, 71, 168, 204, 190, 22, 73, 193, 61, 237, 85, 20, 190, 148, 130, 129, 60, 216, 94, 172, 62, 151, 200, 206, 62, 140, 230, 136, 62, 5, 94, 121, 190, 133, 21, 75, 190, 209, 152, 240, 190, 145, 226, 129, 62, 246, 229, 236, 189, 146, 74, 184, 60, 4, 223, 86, 62, 55, 204, 77, 190, 93, 131, 32, 62, 226, 231, 224, 190, 70, 217, 110, 62, 240, 37, 161, 190, 219, 77, 106, 191, 195, 169, 167, 62, 131, 91, 48, 62, 15, 53, 53, 190, 122, 113, 235, 62, 31, 45, 12, 191, 86, 243, 71, 190, 150, 239, 106, 62, 28, 102, 135, 188, 49, 58, 34, 191, 141, 2, 59, 191, 90, 32, 183, 61, 232, 68, 55, 191, 32, 153, 102, 190, 146, 120, 185, 189, 220, 5, 154, 189, 43, 76, 72, 190, 113, 246, 207, 61, 184, 41, 229, 62, 8, 113, 9, 63, 160, 244, 112, 190, 14, 188, 166, 190, 227, 179, 63, 191, 94, 222, 6, 62, 250, 157, 30, 191, 9, 203, 228, 190, 243, 163, 73, 189, 111, 177, 179, 190, 231, 2, 115, 62, 64, 51, 189, 61, 59, 155, 129, 62, 101, 73, 144, 189, 93, 69, 142, 190, 71, 233, 140, 62, 49, 124, 57, 61, 204, 136, 219, 61, 175, 10, 118, 60, 62, 128, 48, 189, 18, 154, 29, 190, 200, 61, 11, 190, 34, 169, 48, 188, 111, 200, 26, 62, 237, 170, 44, 190, 67, 169, 152, 61, 81, 227, 48, 190, 26, 44, 211, 61, 122, 101, 254, 189, 135, 238, 145, 60, 218, 97, 121, 189, 151, 207, 203, 189, 45, 53, 160, 61, 192, 74, 232, 189, 57, 250, 58, 61, 104, 50, 10, 60, 141, 227, 37, 188, 231, 138, 230, 189, 67, 142, 191, 189, 5, 233, 228, 189, 31, 192, 7, 190, 72, 13, 23, 60, 61, 135, 195, 61, 78, 136, 43, 190, 232, 111, 255, 188, 164, 131, 200, 189, 239, 192, 186, 189, 152, 155, 85, 61, 20, 72, 3, 61, 173, 181, 6, 190, 72, 244, 5, 189, 198, 224, 146, 62, 178, 241, 160, 190, 120, 37, 16, 190, 48, 81, 157, 61, 224, 163, 27, 61, 118, 29, 214, 62, 183, 63, 218, 61, 5, 244, 5, 63, 173, 18, 0, 61, 100, 77, 65, 188, 70, 35, 175, 61, 67, 18, 236, 62, 247, 185, 217, 190, 157, 34, 104, 190, 221, 174, 188, 189, 246, 220, 158, 62, 66, 159, 62, 62, 79, 106, 59, 190, 236, 153, 213, 190, 4, 151, 169, 187, 109, 176, 214, 190, 199, 138, 108, 190, 247, 219, 224, 62, 34, 170, 14, 190, 10, 104, 34, 190, 132, 147, 118, 188, 131, 64, 52, 62, 188, 248, 73, 190, 216, 39, 98, 190, 198, 30, 107, 190, 219, 46, 32, 190, 61, 46, 234, 189, 183, 204, 249, 62, 62, 30, 141, 62, 222, 174, 213, 189, 62, 102, 243, 60, 218, 209, 97, 190, 105, 8, 233, 62, 4, 56, 54, 61, 35, 160, 91, 62, 210, 201, 138, 61, 153, 177, 25, 62, 79, 53, 90, 189, 19, 11, 25, 62, 57, 50, 33, 190, 165, 234, 128, 190, 175, 136, 157, 190, 160, 63, 220, 61, 154, 40, 34, 62, 114, 20, 31, 62, 68, 182, 171, 191, 84, 188, 66, 187, 145, 228, 123, 191, 18, 242, 219, 189, 143, 247, 139, 62, 88, 93, 124, 191, 67, 226, 174, 190, 139, 212, 166, 62, 127, 63, 233, 190, 249, 137, 183, 189, 162, 98, 114, 62, 120, 15, 10, 190, 38, 125, 7, 62, 65, 100, 11, 190, 160, 177, 130, 188, 61, 158, 87, 60, 105, 233, 39, 190, 115, 241, 0, 61, 253, 228, 20, 62, 123, 162, 59, 61, 9, 145, 144, 189, 21, 99, 211, 189, 254, 102, 247, 189, 21, 17, 118, 61, 132, 217, 190, 60, 168, 189, 45, 189, 246, 226, 132, 61, 117, 1, 49, 190, 49, 95, 123, 189, 16, 101, 14, 190, 168, 188, 153, 60, 80, 46, 189, 61, 0, 162, 31, 190, 0, 62, 3, 184, 54, 52, 211, 56, 205, 61, 168, 189, 211, 131, 166, 61, 72, 112, 49, 190, 50, 201, 196, 189, 46, 210, 14, 190, 115, 35, 215, 60, 147, 132, 13, 190, 202, 105, 205, 61, 89, 7, 78, 189, 193, 43, 90, 189, 250, 130, 76, 190, 97, 41, 68, 62, 102, 250, 180, 190, 125, 70, 85, 190, 33, 2, 55, 60, 94, 4, 228, 189, 85, 36, 146, 62, 226, 23, 56, 62, 115, 146, 42, 63, 157, 120, 143, 62, 200, 77, 160, 188, 191, 236, 44, 62, 120, 204, 149, 62, 116, 17, 131, 191, 114, 20, 167, 190, 209, 47, 140, 190, 2, 28, 159, 62, 99, 187, 214, 62, 79, 12, 29, 189, 193, 223, 43, 190, 94, 0, 227, 189, 18, 253, 68, 190, 210, 2, 155, 189, 6, 194, 194, 62, 49, 57, 152, 190, 103, 50, 174, 189, 0, 202, 212, 189, 161, 242, 39, 62, 54, 103, 245, 190, 225, 36, 136, 190, 186, 118, 45, 190, 237, 148, 76, 61, 235, 165, 163, 190, 64, 46, 187, 62, 41, 248, 194, 191, 242, 48, 138, 190, 247, 211, 229, 189, 70, 36, 136, 62, 38, 189, 48, 62, 130, 158, 22, 190, 45, 182, 94, 60, 28, 146, 0, 63, 107, 68, 1, 190, 142, 221, 17, 62, 48, 46, 179, 62, 144, 139, 231, 190, 63, 8, 171, 190, 101, 88, 227, 60, 242, 50, 216, 62, 4, 198, 135, 62, 34, 111, 0, 62, 115, 8, 207, 61, 50, 93, 129, 62, 59, 245, 212, 61, 54, 91, 43, 189, 179, 21, 102, 60, 210, 225, 1, 190, 195, 155, 30, 190, 7, 99, 55, 190, 153, 235, 164, 62, 188, 86, 83, 62, 85, 135, 255, 61, 20, 64, 219, 189, 207, 29, 171, 191, 101, 52, 56, 190, 17, 103, 4, 62, 223, 217, 168, 189, 111, 216, 145, 190, 83, 124, 18, 189, 135, 150, 142, 189, 88, 210, 105, 190, 46, 210, 4, 190, 75, 8, 241, 61, 100, 120, 144, 62, 138, 50, 16, 62, 148, 220, 7, 62, 67, 208, 7, 63, 250, 130, 15, 191, 147, 45, 12, 191, 30, 58, 153, 190, 204, 202, 29, 184, 191, 45, 244, 189, 248, 194, 98, 62, 184, 224, 232, 61, 185, 86, 193, 62, 184, 30, 222, 61, 95, 34, 199, 61, 241, 234, 6, 190, 86, 202, 105, 190, 75, 6, 220, 188, 33, 2, 223, 189, 5, 162, 26, 61, 232, 162, 180, 189, 226, 86, 57, 62, 251, 159, 62, 190, 101, 29, 171, 189, 139, 117, 224, 189, 117, 86, 238, 190, 172, 233, 177, 190, 146, 253, 129, 62, 157, 185, 25, 62, 95, 45, 157, 190, 249, 244, 52, 190, 73, 245, 86, 62, 149, 174, 137, 191, 244, 89, 80, 60, 72, 151, 150, 189, 185, 21, 74, 61, 141, 199, 100, 60, 91, 123, 168, 190, 130, 122, 72, 62, 29, 221, 123, 62, 155, 112, 44, 189, 251, 113, 154, 190, 135, 177, 173, 190, 164, 238, 17, 61, 174, 241, 100, 190, 220, 57, 195, 62, 233, 173, 182, 62, 210, 236, 184, 189, 204, 95, 189, 61, 10, 125, 161, 189, 122, 119, 25, 62, 18, 159, 9, 60, 117, 227, 3, 191, 177, 106, 209, 62, 227, 188, 64, 62, 192, 114, 34, 190, 132, 224, 158, 61, 87, 17, 106, 62, 109, 180, 143, 190, 141, 237, 169, 60, 76, 34, 178, 189, 164, 248, 4, 191, 36, 105, 17, 62, 120, 58, 45, 62, 10, 217, 167, 186, 190, 183, 200, 61, 179, 225, 224, 61, 114, 180, 37, 62, 81, 38, 3, 63, 177, 224, 102, 191, 65, 154, 217, 187, 160, 120, 41, 189, 220, 15, 163, 61, 146, 225, 13, 190, 160, 131, 150, 61, 213, 170, 41, 190, 173, 65, 95, 190, 162, 80, 25, 191, 113, 228, 44, 190, 126, 250, 28, 61, 99, 180, 168, 190, 203, 86, 120, 190, 158, 107, 20, 62, 66, 66, 129, 62, 137, 40, 73, 191, 171, 255, 249, 62, 94, 22, 105, 189, 1, 133, 136, 189, 217, 40, 8, 190, 237, 14, 76, 60, 93, 185, 187, 60, 163, 55, 249, 61, 208, 217, 191, 189, 74, 73, 113, 189, 55, 237, 232, 189, 62, 53, 16, 62, 29, 44, 17, 190, 98, 136, 4, 190, 125, 2, 18, 62, 39, 164, 174, 61, 173, 203, 214, 189, 87, 220, 179, 61, 145, 141, 80, 189, 99, 224, 25, 190, 14, 55, 32, 190, 76, 89, 218, 61, 58, 199, 164, 61, 99, 65, 168, 189, 68, 100, 45, 190, 254, 99, 16, 190, 36, 17, 220, 188, 94, 151, 27, 188, 236, 105, 31, 190, 153, 254, 52, 190, 216, 76, 252, 189, 72, 26, 212, 189, 213, 191, 176, 189, 208, 117, 3, 62, 169, 161, 140, 189, 211, 22, 205, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 95, 27, 190, 164, 101, 206, 187, 163, 0, 201, 189, 75, 164, 150, 62, 127, 180, 74, 189, 169, 183, 168, 61, 32, 148, 240, 188, 140, 200, 31, 62, 35, 133, 201, 62, 211, 84, 150, 189, 85, 164, 150, 190, 125, 79, 14, 62, 23, 221, 32, 189, 172, 226, 115, 185, 159, 179, 15, 62, 66, 175, 114, 189, 185, 67, 173, 187, 212, 11, 202, 189, 145, 115, 67, 62, 69, 26, 163, 62, 81, 164, 191, 61, 72, 60, 42, 190, 79, 37, 239, 189, 239, 222, 132, 189, 135, 38, 36, 190, 166, 220, 48, 190, 71, 131, 211, 189, 90, 137, 226, 61, 125, 210, 61, 61, 87, 129, 202, 188, 131, 188, 195, 61, 208, 27, 50, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {54, 152, 136, 61, 195, 156, 36, 191, 51, 205, 134, 63, 27, 23, 12, 62, 95, 188, 243, 62, 15, 246, 74, 62, 72, 33, 100, 62, 154, 88, 150, 190, 0, 230, 162, 191, 212, 64, 239, 60, 85, 165, 232, 62, 96, 191, 68, 191, 131, 117, 40, 190, 135, 167, 201, 190, 255, 242, 179, 190, 175, 115, 38, 63, 101, 85, 22, 63, 60, 247, 141, 189, 171, 246, 255, 189, 91, 24, 226, 62, 133, 87, 22, 191, 45, 154, 8, 191, 71, 246, 203, 61, 115, 215, 129, 62, 102, 176, 97, 191, 216, 103, 222, 61, 210, 54, 191, 62, 131, 212, 10, 63, 31, 101, 73, 62, 222, 230, 41, 190, 210, 97, 154, 62, 176, 159, 174, 189, 176, 40, 236, 61, 140, 241, 212, 62, 111, 162, 76, 63, 72, 210, 107, 190, 121, 148, 193, 189, 209, 127, 26, 62, 17, 141, 5, 190, 45, 82, 182, 190, 195, 193, 83, 62, 166, 123, 166, 61, 6, 199, 142, 62, 62, 126, 75, 188, 153, 207, 96, 61, 109, 254, 32, 190, 35, 119, 88, 190, 72, 136, 153, 62, 22, 32, 80, 190, 4, 57, 88, 189, 8, 63, 34, 191, 182, 249, 79, 61, 162, 167, 105, 62, 123, 139, 189, 62, 19, 40, 241, 189, 53, 223, 147, 61, 73, 161, 97, 188, 207, 23, 175, 61, 35, 28, 60, 62, 217, 133, 110, 190, 213, 79, 181, 189, 72, 214, 199, 190, 182, 201, 185, 190, 89, 124, 19, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 25, 229, 189, 171, 7, 13, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {156, 75, 115, 63, 193, 148, 88, 62, 70, 62, 128, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {8, 6, 38, 192, 167, 205, 84, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0088/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}