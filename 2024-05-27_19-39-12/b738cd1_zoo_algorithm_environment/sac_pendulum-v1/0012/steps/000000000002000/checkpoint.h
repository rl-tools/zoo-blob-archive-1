// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 245, 153, 62, 96, 229, 234, 62, 92, 120, 32, 63, 72, 14, 30, 63, 154, 51, 86, 62, 86, 128, 147, 62, 236, 166, 193, 190, 54, 127, 109, 63, 91, 89, 237, 61, 28, 190, 109, 62, 168, 84, 20, 63, 83, 179, 133, 62, 96, 242, 219, 190, 38, 231, 24, 63, 55, 180, 170, 62, 126, 71, 42, 63, 190, 151, 104, 62, 197, 14, 224, 190, 86, 247, 206, 62, 38, 255, 179, 190, 74, 65, 143, 58, 16, 209, 52, 191, 188, 118, 219, 61, 68, 182, 241, 62, 86, 42, 164, 189, 113, 31, 8, 62, 96, 195, 141, 190, 8, 8, 9, 63, 16, 168, 115, 63, 133, 210, 149, 62, 216, 245, 159, 62, 245, 254, 0, 189, 12, 5, 169, 62, 32, 252, 180, 62, 9, 102, 49, 191, 197, 28, 205, 189, 28, 153, 191, 61, 77, 229, 42, 63, 7, 163, 165, 190, 16, 81, 126, 62, 19, 60, 247, 61, 41, 123, 235, 190, 231, 9, 240, 62, 146, 116, 82, 63, 219, 225, 143, 62, 71, 209, 99, 189, 129, 83, 141, 60, 20, 101, 170, 190, 138, 231, 139, 189, 215, 160, 6, 191, 139, 52, 138, 190, 250, 89, 11, 63, 97, 166, 51, 62, 120, 160, 23, 63, 25, 8, 210, 61, 110, 4, 94, 63, 108, 119, 9, 191, 143, 226, 197, 61, 2, 188, 222, 62, 157, 115, 27, 191, 110, 81, 63, 62, 129, 219, 155, 189, 168, 189, 0, 63, 89, 100, 215, 190, 114, 150, 174, 62, 145, 108, 70, 190, 26, 144, 167, 61, 207, 25, 199, 190, 63, 42, 13, 63, 69, 106, 191, 62, 46, 6, 222, 62, 120, 142, 236, 62, 5, 237, 40, 63, 173, 251, 98, 61, 219, 189, 92, 188, 170, 47, 180, 190, 196, 102, 104, 63, 245, 189, 161, 190, 42, 228, 12, 190, 105, 70, 239, 190, 209, 216, 181, 186, 95, 200, 135, 61, 0, 199, 104, 61, 9, 14, 78, 62, 244, 223, 239, 190, 150, 12, 54, 191, 179, 160, 9, 63, 71, 237, 243, 62, 139, 30, 174, 190, 151, 200, 28, 62, 233, 115, 83, 62, 96, 32, 83, 191, 7, 181, 135, 190, 221, 253, 122, 189, 149, 49, 48, 191, 150, 144, 186, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {17, 211, 225, 190, 133, 194, 196, 62, 201, 32, 18, 63, 176, 88, 162, 62, 240, 248, 111, 62, 123, 7, 181, 189, 101, 192, 19, 191, 109, 225, 173, 61, 101, 185, 233, 189, 101, 194, 188, 61, 37, 56, 173, 190, 201, 1, 179, 62, 85, 5, 142, 62, 214, 200, 6, 191, 150, 66, 235, 61, 125, 132, 233, 62, 234, 49, 239, 62, 1, 77, 237, 189, 87, 105, 192, 62, 192, 244, 101, 190, 125, 205, 200, 62, 100, 162, 144, 190, 213, 66, 66, 63, 116, 72, 209, 61, 228, 161, 254, 189, 212, 125, 175, 62, 43, 182, 60, 63, 26, 238, 227, 62, 51, 107, 84, 189, 1, 145, 247, 190, 29, 176, 181, 188, 158, 183, 250, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {4, 132, 23, 190, 75, 45, 12, 189, 182, 7, 181, 188, 76, 112, 13, 62, 53, 159, 220, 61, 8, 228, 85, 190, 225, 97, 38, 190, 201, 55, 42, 188, 170, 77, 22, 62, 42, 40, 49, 60, 124, 162, 31, 62, 102, 190, 174, 189, 13, 61, 235, 188, 205, 146, 195, 189, 163, 169, 250, 61, 136, 210, 160, 61, 120, 85, 166, 189, 169, 119, 189, 61, 174, 2, 145, 189, 5, 161, 168, 189, 215, 48, 151, 189, 173, 187, 30, 190, 32, 64, 197, 188, 94, 222, 232, 60, 142, 151, 253, 189, 1, 193, 135, 190, 176, 10, 65, 190, 220, 63, 187, 60, 78, 7, 202, 188, 252, 4, 60, 190, 127, 104, 152, 188, 186, 85, 201, 189, 33, 63, 50, 190, 148, 154, 176, 188, 46, 55, 208, 189, 73, 65, 75, 61, 10, 187, 32, 61, 123, 181, 26, 62, 191, 68, 132, 189, 107, 240, 36, 189, 231, 13, 191, 61, 154, 54, 213, 189, 13, 214, 12, 190, 115, 221, 227, 189, 55, 194, 18, 62, 114, 82, 247, 61, 175, 250, 27, 190, 50, 25, 173, 61, 196, 26, 234, 189, 16, 178, 241, 61, 13, 34, 126, 60, 115, 47, 19, 62, 196, 5, 68, 189, 75, 250, 228, 189, 125, 195, 119, 189, 67, 101, 159, 61, 127, 98, 230, 61, 247, 124, 216, 61, 207, 120, 237, 189, 201, 191, 16, 190, 234, 244, 54, 190, 252, 163, 165, 187, 108, 187, 31, 62, 210, 146, 127, 61, 0, 171, 153, 190, 135, 212, 204, 189, 190, 39, 209, 189, 147, 109, 30, 61, 80, 15, 6, 62, 174, 52, 252, 61, 12, 110, 6, 190, 147, 62, 102, 62, 86, 91, 61, 190, 221, 170, 16, 191, 148, 9, 36, 61, 9, 52, 200, 62, 188, 116, 11, 190, 26, 236, 40, 190, 159, 72, 198, 190, 149, 217, 86, 189, 162, 246, 150, 188, 70, 202, 73, 189, 2, 149, 75, 190, 95, 68, 95, 190, 207, 107, 94, 188, 57, 57, 23, 190, 77, 144, 206, 61, 252, 1, 55, 189, 138, 27, 181, 60, 183, 36, 108, 189, 153, 201, 146, 62, 131, 110, 212, 59, 174, 46, 88, 62, 165, 153, 47, 190, 37, 108, 9, 62, 191, 144, 149, 60, 120, 80, 8, 61, 226, 114, 112, 61, 101, 55, 149, 190, 228, 48, 57, 189, 121, 72, 137, 190, 152, 169, 251, 61, 72, 89, 0, 62, 9, 98, 0, 62, 125, 1, 225, 61, 149, 33, 113, 186, 55, 183, 18, 190, 199, 71, 245, 61, 196, 2, 21, 189, 11, 117, 199, 61, 2, 71, 121, 190, 95, 191, 11, 189, 218, 164, 114, 61, 114, 198, 111, 61, 75, 204, 36, 62, 231, 100, 49, 62, 4, 116, 8, 190, 81, 174, 90, 190, 244, 240, 65, 190, 34, 103, 87, 190, 119, 30, 66, 190, 249, 112, 159, 189, 244, 48, 71, 190, 82, 233, 207, 189, 197, 95, 12, 62, 157, 172, 251, 61, 24, 80, 15, 62, 144, 22, 5, 62, 4, 210, 197, 61, 168, 169, 140, 189, 71, 120, 101, 190, 22, 53, 34, 62, 63, 20, 232, 189, 17, 195, 222, 61, 128, 236, 199, 61, 142, 139, 33, 190, 182, 133, 32, 190, 42, 237, 25, 189, 79, 184, 131, 189, 217, 226, 221, 189, 134, 123, 91, 187, 156, 234, 52, 62, 190, 109, 142, 61, 36, 1, 29, 190, 207, 167, 251, 189, 208, 225, 57, 187, 97, 224, 113, 61, 127, 79, 152, 59, 98, 166, 239, 189, 186, 25, 103, 189, 145, 98, 218, 61, 155, 252, 236, 189, 244, 69, 189, 61, 158, 15, 137, 61, 75, 139, 19, 190, 253, 138, 244, 61, 104, 201, 141, 189, 208, 126, 194, 61, 251, 130, 251, 189, 204, 182, 225, 61, 167, 28, 129, 190, 65, 244, 80, 188, 191, 37, 36, 62, 217, 195, 6, 190, 245, 239, 170, 188, 119, 172, 134, 189, 170, 127, 34, 190, 68, 3, 115, 62, 159, 32, 13, 189, 87, 226, 20, 190, 182, 213, 144, 188, 18, 192, 65, 62, 96, 169, 137, 184, 130, 106, 59, 190, 186, 24, 68, 190, 215, 12, 64, 188, 162, 140, 39, 62, 29, 122, 248, 188, 153, 191, 125, 190, 100, 126, 55, 189, 166, 156, 161, 189, 62, 19, 145, 190, 225, 241, 118, 62, 205, 50, 125, 190, 72, 11, 54, 61, 106, 204, 49, 190, 30, 0, 247, 61, 118, 105, 229, 60, 176, 237, 77, 61, 17, 87, 76, 190, 231, 63, 223, 61, 70, 75, 166, 61, 58, 243, 241, 60, 148, 88, 47, 61, 169, 44, 54, 189, 74, 13, 142, 189, 166, 218, 215, 61, 213, 16, 18, 187, 26, 237, 223, 61, 54, 66, 125, 189, 3, 188, 202, 189, 241, 14, 82, 189, 84, 157, 60, 190, 186, 198, 86, 62, 144, 77, 86, 189, 121, 169, 3, 62, 116, 21, 1, 61, 207, 177, 43, 62, 227, 30, 24, 62, 141, 12, 176, 189, 209, 182, 212, 188, 15, 197, 91, 62, 249, 38, 165, 189, 230, 236, 80, 190, 235, 120, 109, 62, 114, 56, 107, 61, 93, 221, 16, 62, 27, 126, 118, 190, 53, 233, 142, 62, 242, 89, 19, 62, 99, 222, 96, 62, 84, 87, 121, 61, 22, 254, 104, 62, 33, 153, 155, 189, 59, 80, 200, 61, 250, 207, 201, 188, 225, 143, 8, 62, 40, 238, 231, 59, 119, 28, 207, 189, 62, 98, 7, 62, 190, 26, 69, 188, 34, 74, 164, 60, 227, 81, 156, 189, 22, 61, 153, 62, 45, 70, 70, 190, 133, 196, 85, 62, 94, 145, 51, 62, 176, 202, 232, 189, 78, 237, 32, 189, 221, 138, 132, 189, 198, 225, 240, 189, 102, 57, 173, 61, 171, 107, 2, 62, 131, 27, 2, 62, 117, 191, 24, 62, 16, 15, 40, 190, 180, 205, 10, 61, 175, 17, 15, 62, 172, 136, 132, 188, 225, 100, 28, 188, 238, 194, 101, 59, 107, 134, 9, 190, 251, 165, 64, 190, 89, 144, 176, 61, 19, 13, 111, 190, 170, 215, 55, 61, 147, 64, 97, 190, 184, 254, 3, 62, 180, 61, 117, 62, 119, 8, 74, 62, 182, 240, 15, 190, 86, 73, 101, 190, 127, 96, 221, 61, 137, 161, 139, 190, 99, 149, 248, 189, 69, 116, 76, 62, 251, 255, 44, 190, 172, 55, 85, 190, 236, 70, 47, 62, 16, 164, 56, 189, 54, 199, 128, 62, 90, 14, 57, 62, 92, 229, 79, 190, 249, 251, 14, 190, 251, 65, 57, 61, 16, 227, 213, 61, 254, 86, 43, 190, 166, 134, 53, 62, 102, 40, 62, 59, 57, 135, 32, 62, 12, 66, 47, 189, 3, 8, 6, 62, 177, 247, 255, 61, 55, 24, 133, 61, 139, 34, 156, 190, 160, 189, 71, 62, 124, 214, 23, 190, 44, 239, 77, 61, 125, 169, 128, 61, 110, 94, 111, 61, 28, 131, 110, 190, 128, 55, 25, 189, 178, 47, 229, 61, 60, 57, 216, 188, 245, 249, 178, 61, 150, 122, 15, 62, 90, 114, 52, 190, 122, 8, 131, 190, 201, 242, 0, 190, 92, 249, 183, 188, 137, 54, 155, 61, 76, 0, 246, 188, 39, 127, 147, 189, 202, 160, 41, 61, 2, 63, 35, 62, 32, 199, 9, 62, 236, 56, 141, 189, 232, 8, 23, 60, 222, 233, 44, 61, 75, 140, 160, 189, 233, 72, 60, 61, 159, 231, 12, 62, 166, 70, 231, 61, 210, 55, 33, 189, 149, 249, 119, 189, 197, 168, 27, 189, 21, 179, 191, 61, 136, 216, 2, 62, 174, 82, 134, 62, 219, 64, 212, 188, 179, 155, 189, 59, 214, 106, 201, 60, 37, 217, 136, 60, 141, 197, 232, 189, 247, 133, 242, 61, 49, 189, 57, 190, 38, 109, 7, 62, 20, 150, 228, 188, 118, 115, 13, 61, 165, 157, 178, 59, 243, 106, 162, 61, 37, 189, 243, 188, 25, 232, 35, 190, 102, 63, 43, 190, 13, 68, 153, 189, 241, 54, 164, 61, 166, 34, 150, 60, 162, 189, 26, 190, 137, 20, 8, 62, 136, 111, 232, 61, 209, 51, 6, 62, 11, 186, 222, 59, 234, 74, 94, 61, 187, 41, 38, 189, 222, 253, 45, 190, 161, 187, 87, 189, 127, 47, 80, 190, 66, 120, 2, 190, 201, 142, 179, 189, 227, 57, 126, 61, 228, 39, 26, 62, 121, 224, 155, 188, 121, 207, 41, 61, 249, 168, 51, 62, 5, 141, 3, 62, 19, 26, 137, 59, 32, 202, 10, 62, 67, 193, 174, 61, 206, 205, 134, 189, 33, 130, 146, 189, 198, 161, 32, 190, 186, 125, 50, 62, 230, 5, 194, 61, 212, 93, 138, 189, 182, 58, 3, 62, 70, 131, 72, 190, 216, 70, 211, 61, 254, 90, 231, 189, 58, 163, 25, 61, 229, 33, 163, 60, 220, 47, 32, 62, 209, 170, 179, 188, 145, 156, 159, 189, 166, 193, 9, 190, 204, 136, 226, 61, 224, 96, 203, 189, 102, 133, 55, 62, 255, 51, 137, 61, 231, 127, 27, 61, 42, 18, 144, 61, 241, 183, 1, 61, 254, 51, 143, 61, 108, 117, 145, 190, 68, 233, 214, 61, 246, 88, 98, 61, 227, 59, 191, 188, 93, 146, 105, 61, 124, 190, 67, 62, 99, 153, 199, 61, 100, 229, 94, 59, 172, 255, 196, 189, 43, 255, 152, 61, 153, 6, 203, 189, 10, 75, 46, 62, 213, 251, 184, 189, 162, 187, 56, 62, 253, 136, 10, 62, 185, 234, 109, 61, 154, 109, 187, 188, 231, 174, 191, 61, 22, 81, 191, 189, 139, 202, 74, 62, 238, 9, 56, 62, 86, 139, 37, 60, 158, 39, 93, 189, 174, 220, 24, 189, 112, 248, 73, 187, 165, 240, 212, 187, 216, 192, 69, 62, 249, 206, 130, 62, 65, 141, 29, 190, 85, 15, 208, 189, 185, 39, 85, 190, 43, 80, 28, 62, 73, 31, 247, 189, 170, 198, 93, 190, 217, 78, 214, 189, 124, 27, 20, 190, 219, 23, 36, 190, 43, 9, 143, 188, 228, 249, 9, 190, 249, 190, 160, 61, 239, 20, 68, 189, 85, 110, 221, 61, 234, 148, 53, 189, 15, 167, 236, 61, 160, 255, 125, 61, 211, 31, 219, 189, 38, 6, 6, 190, 137, 126, 198, 189, 85, 252, 16, 189, 90, 16, 253, 61, 101, 104, 80, 190, 88, 143, 34, 62, 61, 174, 71, 190, 228, 2, 149, 189, 250, 243, 73, 189, 244, 186, 58, 190, 200, 213, 215, 188, 244, 147, 34, 61, 72, 74, 151, 186, 34, 70, 153, 189, 164, 42, 236, 188, 231, 204, 139, 61, 165, 154, 106, 189, 189, 187, 143, 189, 228, 249, 234, 189, 110, 186, 183, 61, 2, 152, 94, 189, 171, 189, 170, 61, 212, 75, 38, 190, 187, 238, 141, 59, 129, 132, 104, 59, 246, 27, 78, 61, 155, 97, 157, 189, 192, 122, 184, 189, 59, 240, 169, 189, 58, 182, 232, 189, 26, 148, 58, 189, 243, 195, 212, 62, 75, 72, 57, 62, 199, 85, 235, 61, 58, 103, 44, 189, 38, 47, 211, 189, 160, 184, 69, 62, 128, 132, 195, 188, 34, 116, 170, 189, 60, 206, 9, 190, 164, 222, 20, 190, 191, 21, 164, 189, 128, 29, 172, 60, 95, 246, 42, 190, 25, 39, 136, 62, 146, 132, 217, 187, 3, 228, 137, 189, 188, 37, 159, 61, 51, 204, 59, 190, 99, 145, 16, 190, 107, 139, 138, 62, 14, 115, 4, 62, 74, 0, 187, 61, 115, 172, 82, 189, 239, 3, 132, 61, 110, 0, 51, 61, 52, 235, 27, 61, 23, 66, 161, 189, 242, 219, 46, 190, 155, 181, 15, 62, 13, 20, 250, 60, 86, 62, 220, 189, 12, 248, 206, 61, 58, 99, 138, 60, 166, 207, 54, 190, 167, 177, 163, 189, 152, 217, 53, 190, 157, 111, 224, 61, 86, 148, 4, 62, 89, 20, 171, 189, 233, 225, 20, 190, 26, 96, 11, 190, 200, 244, 24, 62, 14, 110, 48, 188, 219, 126, 62, 190, 180, 110, 29, 189, 223, 190, 27, 190, 183, 132, 253, 189, 166, 235, 81, 188, 210, 255, 73, 190, 60, 68, 186, 187, 141, 157, 234, 188, 2, 16, 228, 188, 231, 6, 215, 189, 102, 243, 55, 190, 198, 75, 4, 190, 8, 7, 104, 190, 69, 156, 87, 61, 189, 2, 4, 62, 239, 47, 135, 61, 218, 15, 24, 190, 85, 214, 44, 61, 131, 37, 172, 188, 23, 83, 77, 190, 243, 237, 213, 189, 151, 170, 151, 62, 203, 164, 249, 60, 126, 142, 66, 62, 207, 203, 191, 189, 150, 183, 12, 62, 110, 81, 157, 61, 184, 132, 129, 190, 64, 175, 6, 190, 102, 243, 22, 62, 139, 136, 80, 62, 186, 233, 10, 190, 254, 104, 2, 188, 13, 221, 183, 187, 31, 174, 8, 190, 237, 206, 60, 190, 132, 58, 43, 62, 244, 50, 23, 62, 146, 143, 60, 62, 188, 62, 187, 61, 130, 246, 154, 62, 21, 83, 6, 187, 115, 78, 198, 189, 188, 88, 174, 189, 113, 181, 216, 60, 203, 86, 169, 60, 79, 227, 40, 186, 54, 241, 17, 62, 250, 153, 23, 190, 187, 28, 70, 61, 158, 149, 214, 189, 87, 19, 7, 190, 247, 0, 235, 61, 230, 69, 48, 62, 247, 94, 139, 189, 109, 182, 55, 189, 234, 28, 33, 61, 153, 75, 235, 60, 108, 182, 255, 61, 199, 180, 62, 188, 53, 154, 1, 189, 43, 177, 103, 189, 14, 60, 208, 61, 194, 214, 15, 185, 182, 168, 93, 189, 200, 140, 119, 188, 49, 255, 241, 188, 87, 88, 200, 189, 163, 52, 64, 62, 142, 166, 72, 189, 36, 94, 176, 61, 78, 98, 18, 62, 162, 57, 217, 189, 183, 230, 66, 190, 209, 168, 96, 190, 235, 237, 153, 60, 214, 153, 151, 190, 206, 35, 142, 189, 50, 200, 194, 189, 164, 7, 51, 189, 178, 67, 191, 189, 247, 85, 64, 62, 187, 66, 222, 60, 2, 139, 152, 190, 223, 34, 7, 189, 225, 226, 192, 61, 167, 84, 150, 61, 228, 166, 166, 189, 108, 165, 3, 191, 71, 231, 92, 189, 148, 74, 9, 62, 236, 106, 104, 190, 28, 229, 225, 61, 169, 22, 243, 61, 134, 185, 53, 62, 235, 108, 144, 61, 247, 95, 197, 62, 37, 164, 167, 61, 10, 182, 31, 62, 201, 66, 251, 189, 72, 122, 6, 62, 121, 131, 126, 60, 222, 112, 6, 61, 48, 107, 19, 189, 207, 120, 137, 61, 124, 79, 167, 61, 120, 26, 14, 61, 58, 102, 244, 61, 114, 97, 126, 61, 171, 207, 140, 189, 69, 72, 209, 61, 192, 87, 130, 189, 235, 162, 38, 62, 9, 146, 188, 189, 214, 53, 225, 61, 4, 131, 14, 62, 167, 116, 221, 61, 190, 70, 45, 62, 104, 93, 250, 61, 75, 4, 26, 190, 152, 109, 71, 62, 18, 168, 77, 188, 255, 141, 36, 190, 37, 33, 153, 61, 44, 64, 7, 62, 116, 19, 153, 61, 209, 121, 182, 189, 218, 144, 146, 188, 197, 190, 143, 61, 58, 69, 192, 60, 223, 42, 16, 188, 142, 221, 186, 187, 0, 58, 107, 61, 168, 85, 53, 62, 30, 238, 99, 190, 83, 19, 42, 62, 1, 238, 121, 190, 35, 185, 121, 189, 120, 36, 64, 188, 224, 206, 76, 190, 221, 91, 11, 61, 165, 176, 195, 60, 209, 132, 42, 60, 202, 170, 12, 62, 174, 71, 156, 61, 31, 204, 48, 190, 141, 64, 245, 189, 127, 238, 18, 189, 153, 222, 4, 189, 147, 45, 43, 189, 141, 41, 153, 61, 133, 53, 1, 190, 166, 198, 183, 60, 140, 75, 192, 189, 41, 79, 188, 60, 251, 146, 31, 190, 253, 131, 187, 187, 96, 221, 193, 61, 190, 122, 208, 189, 178, 44, 248, 188, 98, 236, 11, 60, 189, 248, 172, 61, 125, 80, 39, 189, 185, 254, 129, 189, 224, 90, 35, 189, 127, 194, 13, 61, 139, 21, 95, 189, 93, 86, 205, 188, 133, 105, 18, 62, 5, 79, 230, 189, 188, 30, 93, 61, 241, 117, 245, 189, 72, 186, 171, 190, 148, 228, 26, 189, 170, 103, 12, 190, 248, 161, 22, 62, 205, 182, 134, 189, 241, 118, 94, 60, 81, 200, 7, 59, 160, 153, 62, 190, 175, 5, 195, 189, 140, 221, 233, 61, 226, 97, 21, 188, 167, 177, 51, 188, 156, 222, 164, 188, 236, 118, 16, 62, 168, 152, 30, 62, 83, 212, 16, 62, 166, 186, 111, 61, 93, 110, 83, 62, 254, 172, 228, 61, 192, 183, 208, 189, 57, 173, 242, 189, 160, 94, 30, 190, 235, 146, 12, 190, 141, 89, 43, 61, 173, 251, 54, 190, 7, 86, 218, 61, 187, 74, 174, 61, 17, 144, 140, 61, 34, 126, 216, 188, 240, 36, 102, 189, 138, 120, 226, 61, 177, 61, 35, 189, 15, 167, 102, 190, 133, 58, 192, 61, 13, 46, 123, 189, 168, 97, 138, 61, 150, 13, 7, 190, 104, 82, 22, 62, 213, 117, 250, 61, 241, 227, 2, 190, 29, 92, 73, 190, 216, 80, 16, 62, 145, 18, 13, 190, 210, 15, 17, 190, 235, 34, 155, 189, 141, 195, 182, 61, 74, 109, 36, 61, 37, 74, 25, 60, 232, 167, 28, 189, 179, 138, 92, 189, 227, 46, 178, 59, 252, 82, 156, 188, 84, 125, 188, 61, 219, 233, 19, 60, 226, 218, 25, 62, 234, 36, 87, 61, 169, 52, 35, 62, 43, 55, 48, 61, 120, 28, 79, 62, 24, 159, 92, 61, 116, 136, 149, 62, 211, 147, 11, 190, 115, 177, 126, 190, 167, 91, 90, 61, 200, 68, 76, 189, 34, 86, 12, 62, 1, 101, 223, 189, 196, 24, 147, 189, 162, 51, 139, 189, 163, 216, 194, 60, 11, 244, 238, 189, 60, 244, 0, 190, 224, 43, 166, 61, 157, 228, 16, 62, 12, 116, 170, 190, 172, 191, 17, 190, 166, 16, 110, 190, 116, 121, 41, 62, 169, 58, 67, 62, 216, 117, 28, 188, 24, 66, 97, 190, 99, 175, 125, 190, 210, 46, 30, 62, 14, 34, 248, 56, 117, 28, 151, 189, 179, 102, 9, 62, 46, 171, 149, 62, 163, 102, 147, 61, 48, 83, 31, 62, 197, 208, 55, 61, 238, 41, 236, 61, 42, 254, 224, 61, 155, 8, 162, 62, 203, 66, 129, 189, 69, 60, 69, 62, 54, 132, 6, 62, 187, 26, 44, 190, 157, 242, 240, 61, 86, 184, 110, 61, 138, 58, 22, 190, 187, 48, 113, 189, 227, 11, 142, 189, 11, 74, 146, 61, 116, 61, 77, 187, 64, 105, 170, 189, 244, 240, 136, 189, 160, 144, 159, 189, 62, 68, 15, 62, 200, 101, 21, 190, 8, 225, 60, 190, 135, 125, 197, 61, 87, 147, 147, 61, 53, 5, 15, 62, 92, 124, 230, 60, 171, 52, 90, 189, 188, 111, 204, 61, 70, 57, 130, 188, 145, 24, 33, 62, 226, 206, 72, 61, 90, 195, 168, 189, 25, 120, 90, 189, 141, 112, 18, 190, 9, 85, 125, 61, 118, 173, 229, 61, 87, 41, 143, 190, 176, 55, 11, 190, 211, 110, 137, 189, 208, 140, 247, 61, 239, 45, 115, 62, 25, 253, 5, 62, 134, 41, 251, 61, 254, 68, 87, 190, 106, 52, 147, 61, 179, 245, 184, 189, 40, 53, 12, 61, 222, 222, 136, 62, 113, 115, 90, 60, 72, 144, 18, 187, 51, 247, 96, 62, 38, 46, 94, 190, 4, 11, 145, 62, 162, 33, 78, 61, 34, 91, 178, 188, 93, 154, 17, 62, 219, 60, 20, 62, 219, 170, 148, 189, 151, 116, 40, 61, 24, 93, 130, 62, 229, 187, 106, 61, 62, 50, 102, 61, 206, 24, 194, 61, 29, 21, 249, 61, 230, 216, 43, 188, 209, 45, 27, 62, 131, 113, 73, 189, 253, 242, 197, 189, 234, 74, 219, 190, 226, 32, 169, 59, 105, 65, 107, 61, 209, 43, 12, 189, 9, 234, 10, 62, 101, 165, 199, 188, 34, 214, 41, 62, 124, 247, 232, 189, 232, 251, 120, 189, 214, 101, 158, 61, 18, 42, 34, 62, 240, 28, 0, 62, 49, 49, 4, 190, 45, 104, 243, 189, 203, 31, 177, 60, 187, 63, 63, 190, 94, 80, 25, 62, 86, 22, 25, 62, 86, 46, 198, 189, 240, 135, 27, 61, 17, 187, 218, 61, 34, 188, 4, 190, 213, 20, 159, 61, 10, 183, 186, 62, 58, 35, 108, 190, 147, 231, 25, 62, 114, 108, 155, 61, 255, 223, 8, 62, 8, 152, 184, 189, 153, 16, 186, 60, 1, 243, 206, 189, 178, 206, 45, 190, 158, 52, 146, 190, 195, 51, 45, 190, 240, 239, 105, 60, 194, 157, 57, 186, 10, 100, 33, 62, 67, 11, 255, 189, 41, 17, 35, 62, 56, 51, 219, 189, 107, 129, 20, 187, 12, 10, 146, 61, 104, 104, 36, 187, 135, 8, 2, 62, 181, 129, 223, 61, 34, 244, 48, 190, 18, 104, 170, 60, 152, 198, 166, 189, 83, 247, 77, 62, 20, 25, 22, 62, 244, 12, 94, 189, 77, 141, 79, 62, 245, 28, 91, 60, 245, 221, 129, 189, 28, 41, 83, 60, 15, 5, 149, 62, 25, 53, 177, 61, 151, 162, 123, 61, 127, 249, 229, 187, 138, 95, 123, 62, 234, 193, 186, 189, 28, 119, 13, 190, 89, 105, 246, 189, 69, 129, 207, 189, 17, 102, 244, 190, 18, 118, 229, 189, 58, 209, 46, 62, 105, 230, 255, 189, 20, 147, 230, 189, 108, 54, 157, 61, 73, 84, 251, 187, 113, 195, 104, 189, 197, 164, 132, 188, 61, 139, 214, 61, 220, 144, 128, 61, 8, 164, 15, 62, 140, 43, 148, 61, 237, 194, 36, 190, 45, 226, 225, 59, 215, 3, 249, 61, 16, 100, 135, 61, 94, 232, 173, 61, 63, 103, 143, 61, 138, 114, 166, 61, 96, 221, 39, 190, 195, 165, 20, 190, 80, 180, 254, 61, 245, 50, 248, 189, 129, 197, 53, 61, 135, 22, 150, 60, 29, 176, 166, 189, 64, 158, 125, 190, 85, 236, 177, 190, 206, 71, 151, 189, 17, 113, 181, 188, 35, 65, 22, 188, 48, 133, 29, 61, 8, 241, 3, 190, 20, 210, 31, 61, 120, 240, 166, 61, 50, 150, 184, 61, 222, 246, 250, 189, 153, 157, 224, 61, 37, 255, 230, 189, 147, 187, 19, 62, 57, 127, 55, 61, 68, 150, 37, 189, 167, 146, 214, 61, 127, 17, 247, 188, 81, 184, 181, 61, 79, 221, 120, 62, 118, 37, 115, 190, 36, 192, 72, 62, 74, 81, 170, 60, 121, 9, 234, 189, 92, 191, 122, 61, 222, 81, 77, 62, 0, 160, 46, 189, 54, 150, 34, 62, 158, 77, 191, 62, 219, 27, 26, 62, 220, 252, 214, 61, 194, 48, 138, 62, 20, 127, 28, 62, 246, 99, 215, 61, 115, 57, 21, 190, 139, 78, 23, 61, 30, 118, 12, 61, 126, 44, 196, 190, 220, 96, 11, 190, 170, 103, 117, 190, 71, 72, 134, 189, 58, 250, 49, 190, 56, 7, 181, 189, 218, 160, 160, 61, 186, 120, 3, 62, 55, 64, 34, 62, 229, 42, 174, 61, 156, 85, 12, 190, 30, 39, 97, 190, 92, 11, 135, 190, 176, 255, 68, 62, 200, 117, 108, 60, 247, 7, 19, 62, 226, 51, 176, 190, 134, 31, 3, 60, 19, 169, 213, 188, 196, 160, 172, 190, 107, 160, 230, 189, 226, 213, 187, 61, 126, 6, 130, 61, 85, 146, 162, 185, 128, 124, 30, 62, 209, 214, 179, 189, 235, 202, 148, 62, 85, 68, 177, 61, 26, 220, 105, 61, 217, 120, 173, 60, 74, 8, 128, 62, 60, 101, 28, 190, 21, 213, 49, 59, 61, 255, 40, 61, 142, 245, 83, 189, 62, 31, 18, 60, 173, 0, 134, 189, 234, 119, 232, 189, 7, 83, 164, 61, 43, 79, 217, 61, 64, 116, 35, 190, 242, 125, 250, 60, 14, 213, 245, 189, 80, 237, 66, 61, 185, 33, 18, 189, 83, 235, 208, 61, 209, 241, 168, 189, 222, 255, 168, 61, 94, 247, 117, 189, 63, 74, 83, 61, 139, 207, 3, 62, 134, 44, 241, 61, 110, 243, 11, 190, 114, 76, 154, 61, 181, 13, 21, 190, 215, 31, 111, 190, 124, 136, 176, 188, 22, 128, 13, 62, 211, 204, 235, 189, 153, 84, 118, 190, 208, 165, 145, 62, 190, 90, 151, 61, 212, 94, 62, 62, 143, 109, 140, 61, 233, 8, 72, 62, 182, 34, 153, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 184, 239, 189, 233, 40, 24, 190, 177, 42, 137, 62, 40, 88, 222, 60, 11, 83, 12, 190, 161, 120, 76, 61, 184, 7, 238, 189, 97, 136, 92, 62, 234, 248, 44, 62, 134, 110, 18, 62, 36, 188, 235, 189, 67, 236, 45, 62, 199, 195, 63, 62, 105, 239, 239, 61, 34, 23, 54, 62, 150, 121, 157, 189, 226, 155, 61, 62, 181, 82, 5, 62, 198, 209, 59, 62, 39, 109, 241, 60, 90, 109, 175, 189, 98, 245, 186, 189, 67, 137, 105, 60, 77, 221, 3, 61, 119, 91, 25, 189, 224, 65, 21, 187, 253, 74, 70, 62, 217, 234, 86, 62, 69, 188, 85, 190, 69, 208, 133, 61, 18, 62, 164, 61, 27, 198, 26, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 70, 174, 61, 242, 41, 41, 62, 194, 184, 10, 63, 91, 162, 130, 61, 3, 176, 85, 190, 74, 148, 131, 62, 154, 138, 61, 62, 175, 137, 107, 190, 238, 34, 203, 190, 106, 4, 49, 62, 97, 15, 41, 185, 165, 16, 134, 189, 25, 25, 51, 190, 246, 53, 229, 59, 248, 100, 102, 62, 241, 104, 173, 61, 49, 131, 80, 62, 7, 22, 166, 60, 248, 31, 138, 62, 245, 166, 46, 190, 136, 234, 183, 61, 103, 93, 169, 61, 59, 52, 176, 61, 20, 59, 17, 62, 216, 221, 75, 60, 162, 63, 246, 189, 76, 228, 21, 190, 205, 129, 236, 189, 229, 255, 13, 62, 219, 233, 22, 190, 233, 169, 69, 62, 208, 164, 44, 62, 201, 219, 211, 188, 81, 80, 124, 61, 147, 123, 222, 61, 93, 33, 45, 62, 17, 75, 9, 190, 19, 104, 217, 61, 231, 50, 196, 189, 48, 203, 53, 190, 174, 186, 29, 190, 248, 59, 48, 61, 39, 122, 252, 61, 17, 134, 208, 189, 167, 181, 111, 189, 233, 215, 251, 61, 245, 210, 241, 189, 124, 191, 242, 189, 235, 224, 150, 188, 220, 139, 33, 189, 230, 214, 207, 189, 121, 78, 152, 189, 230, 163, 213, 61, 164, 181, 143, 61, 112, 76, 152, 189, 233, 64, 69, 190, 175, 143, 19, 62, 120, 124, 232, 60, 241, 90, 21, 62, 4, 200, 13, 62, 163, 179, 185, 61, 228, 42, 7, 190, 21, 158, 46, 189, 85, 182, 102, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {196, 194, 95, 188, 113, 165, 101, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {11, 61, 31, 191, 90, 104, 252, 61, 47, 152, 80, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {238, 19, 42, 191, 218, 218, 234, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0012/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}