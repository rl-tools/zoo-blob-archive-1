// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 75, 120, 62, 230, 225, 190, 62, 199, 179, 8, 63, 196, 213, 204, 62, 7, 239, 3, 62, 235, 72, 192, 62, 156, 83, 206, 190, 253, 133, 15, 63, 105, 58, 149, 62, 181, 36, 111, 189, 115, 146, 102, 62, 49, 68, 228, 62, 255, 111, 236, 190, 247, 48, 15, 63, 12, 32, 218, 62, 47, 16, 253, 62, 167, 71, 57, 62, 59, 10, 239, 190, 86, 247, 206, 62, 38, 255, 179, 190, 74, 65, 143, 58, 7, 85, 227, 190, 99, 144, 197, 62, 79, 141, 241, 62, 89, 99, 10, 62, 88, 83, 163, 61, 127, 185, 137, 190, 21, 18, 197, 62, 49, 184, 226, 62, 211, 114, 147, 62, 132, 125, 161, 62, 165, 73, 249, 189, 243, 151, 173, 62, 208, 132, 3, 63, 203, 181, 170, 190, 29, 131, 180, 58, 35, 248, 76, 62, 166, 73, 9, 63, 140, 37, 171, 190, 129, 127, 174, 61, 63, 137, 73, 62, 100, 75, 198, 190, 224, 116, 72, 62, 12, 3, 189, 62, 6, 224, 169, 62, 216, 11, 139, 61, 10, 110, 122, 62, 90, 113, 208, 190, 90, 44, 185, 189, 166, 194, 61, 189, 36, 119, 189, 190, 191, 154, 7, 63, 122, 231, 45, 60, 172, 251, 17, 63, 24, 112, 224, 62, 16, 161, 228, 62, 14, 161, 8, 191, 41, 167, 50, 62, 242, 75, 236, 62, 65, 15, 16, 191, 2, 107, 25, 62, 47, 166, 173, 190, 94, 255, 4, 63, 129, 200, 186, 190, 220, 181, 167, 61, 50, 178, 164, 189, 150, 73, 115, 61, 244, 122, 10, 191, 255, 136, 14, 63, 248, 8, 76, 62, 166, 32, 90, 62, 189, 35, 19, 63, 100, 245, 1, 63, 120, 51, 170, 58, 220, 44, 236, 189, 186, 147, 246, 190, 114, 51, 138, 62, 64, 228, 86, 190, 3, 246, 161, 189, 39, 134, 162, 189, 11, 64, 166, 189, 191, 230, 186, 188, 99, 235, 189, 189, 246, 173, 134, 62, 203, 53, 188, 61, 93, 220, 222, 190, 199, 253, 3, 63, 245, 31, 157, 62, 90, 218, 118, 190, 226, 57, 103, 62, 89, 179, 164, 61, 81, 70, 8, 191, 84, 4, 7, 190, 41, 3, 161, 190, 213, 178, 181, 190, 20, 88, 225, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 197, 19, 191, 182, 214, 251, 62, 72, 154, 195, 62, 136, 222, 178, 62, 185, 252, 132, 62, 143, 225, 171, 189, 101, 192, 19, 191, 116, 149, 217, 189, 15, 94, 208, 189, 175, 254, 162, 190, 83, 143, 170, 190, 197, 28, 15, 189, 140, 235, 85, 61, 119, 195, 241, 190, 16, 63, 79, 190, 231, 0, 154, 62, 85, 240, 192, 62, 130, 186, 83, 190, 191, 92, 241, 61, 153, 1, 158, 190, 166, 172, 154, 62, 64, 154, 123, 190, 231, 183, 17, 63, 235, 115, 149, 61, 167, 6, 41, 190, 116, 90, 15, 63, 25, 81, 19, 63, 166, 98, 4, 63, 59, 177, 171, 190, 243, 23, 250, 190, 158, 124, 187, 190, 199, 20, 50, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 172, 6, 190, 52, 222, 50, 60, 130, 154, 6, 188, 142, 126, 36, 62, 218, 109, 1, 62, 239, 95, 47, 190, 225, 97, 38, 190, 206, 2, 156, 186, 117, 78, 23, 62, 192, 56, 65, 61, 80, 76, 50, 62, 34, 59, 120, 61, 15, 203, 230, 188, 205, 146, 195, 189, 189, 55, 26, 62, 179, 227, 204, 61, 200, 179, 134, 189, 146, 213, 248, 61, 20, 95, 98, 189, 226, 0, 161, 189, 168, 57, 88, 189, 88, 74, 41, 190, 20, 137, 5, 187, 226, 108, 72, 61, 152, 62, 12, 61, 198, 63, 253, 189, 234, 87, 231, 189, 159, 64, 85, 61, 25, 56, 67, 188, 65, 155, 23, 190, 42, 237, 173, 188, 186, 85, 201, 189, 141, 231, 30, 190, 157, 1, 78, 61, 201, 226, 61, 189, 113, 145, 160, 61, 211, 201, 128, 60, 142, 186, 250, 61, 191, 68, 132, 189, 8, 75, 112, 189, 40, 195, 148, 61, 111, 147, 155, 59, 49, 124, 218, 189, 113, 181, 13, 190, 8, 113, 25, 62, 24, 151, 180, 61, 136, 61, 152, 189, 82, 171, 185, 61, 175, 252, 230, 189, 57, 177, 23, 62, 16, 204, 125, 60, 14, 138, 9, 62, 125, 154, 188, 59, 39, 142, 12, 190, 38, 173, 37, 188, 219, 240, 215, 61, 103, 89, 242, 61, 22, 204, 228, 61, 77, 214, 179, 189, 114, 156, 223, 189, 1, 65, 7, 190, 48, 64, 224, 60, 242, 237, 220, 61, 23, 204, 57, 61, 177, 177, 49, 190, 198, 122, 63, 189, 64, 175, 198, 189, 74, 254, 152, 61, 165, 17, 160, 61, 162, 92, 37, 62, 12, 110, 6, 190, 9, 10, 241, 61, 180, 27, 6, 189, 19, 241, 28, 190, 119, 16, 189, 61, 245, 36, 48, 62, 165, 223, 135, 61, 217, 251, 96, 189, 148, 88, 42, 189, 66, 186, 120, 186, 7, 139, 23, 189, 49, 169, 159, 61, 142, 218, 153, 187, 80, 129, 144, 189, 185, 99, 142, 189, 44, 65, 3, 189, 203, 28, 228, 189, 4, 21, 78, 61, 95, 82, 182, 189, 148, 56, 213, 59, 226, 52, 235, 61, 36, 159, 44, 190, 177, 161, 251, 61, 91, 73, 163, 189, 252, 39, 80, 189, 148, 53, 130, 61, 224, 110, 8, 61, 249, 177, 22, 62, 198, 84, 176, 189, 232, 113, 203, 60, 35, 50, 27, 190, 148, 32, 224, 61, 72, 89, 0, 62, 52, 244, 2, 62, 65, 156, 218, 61, 222, 254, 215, 61, 182, 45, 15, 190, 85, 253, 137, 61, 122, 74, 106, 188, 184, 182, 156, 61, 207, 207, 24, 190, 24, 254, 156, 187, 2, 227, 178, 61, 243, 213, 180, 61, 163, 220, 48, 62, 196, 225, 51, 62, 46, 222, 219, 189, 90, 121, 48, 190, 1, 56, 50, 190, 224, 225, 48, 190, 104, 159, 33, 190, 93, 78, 129, 188, 123, 237, 253, 189, 33, 143, 201, 188, 15, 213, 6, 62, 235, 121, 251, 61, 46, 224, 115, 61, 214, 52, 7, 62, 4, 210, 197, 61, 171, 32, 196, 189, 23, 92, 30, 190, 110, 108, 28, 62, 137, 126, 228, 189, 96, 204, 202, 61, 128, 236, 199, 61, 142, 139, 33, 190, 14, 55, 33, 190, 181, 144, 48, 189, 79, 184, 131, 189, 160, 93, 28, 190, 17, 123, 154, 184, 209, 93, 52, 62, 71, 90, 139, 61, 191, 21, 17, 190, 224, 72, 224, 189, 208, 225, 57, 187, 16, 84, 115, 61, 223, 249, 249, 59, 218, 132, 255, 189, 170, 190, 17, 187, 182, 60, 204, 61, 155, 252, 236, 189, 88, 140, 98, 61, 200, 85, 198, 61, 88, 178, 234, 189, 57, 187, 226, 61, 173, 55, 145, 189, 208, 126, 194, 61, 5, 188, 34, 190, 86, 125, 248, 61, 58, 179, 39, 190, 32, 103, 129, 189, 199, 30, 255, 61, 6, 15, 180, 189, 107, 155, 35, 190, 111, 71, 115, 189, 170, 127, 34, 190, 140, 178, 208, 61, 71, 139, 147, 61, 161, 45, 192, 189, 210, 60, 169, 61, 182, 111, 200, 61, 216, 80, 35, 62, 86, 216, 0, 190, 61, 152, 17, 190, 78, 140, 26, 60, 126, 172, 21, 62, 7, 230, 245, 61, 11, 156, 216, 189, 87, 83, 80, 61, 80, 50, 155, 189, 236, 190, 2, 190, 86, 47, 2, 62, 240, 28, 16, 190, 91, 34, 138, 189, 141, 148, 229, 189, 153, 217, 209, 60, 242, 20, 189, 189, 133, 227, 26, 61, 119, 226, 13, 190, 83, 196, 187, 61, 205, 92, 6, 62, 224, 198, 82, 61, 140, 56, 170, 61, 97, 75, 18, 61, 152, 144, 67, 189, 12, 152, 226, 61, 105, 121, 13, 190, 26, 237, 223, 61, 148, 227, 226, 189, 78, 226, 37, 190, 187, 110, 61, 61, 70, 182, 46, 190, 22, 9, 222, 61, 80, 25, 144, 189, 185, 217, 168, 61, 178, 195, 210, 61, 227, 46, 131, 61, 218, 184, 34, 188, 100, 73, 60, 189, 216, 0, 158, 189, 131, 15, 49, 62, 201, 52, 201, 189, 76, 128, 231, 189, 110, 210, 47, 62, 147, 99, 161, 61, 246, 94, 13, 61, 86, 248, 199, 189, 167, 39, 7, 62, 253, 252, 234, 61, 112, 197, 36, 62, 132, 251, 152, 61, 140, 238, 47, 188, 202, 186, 37, 190, 254, 208, 202, 61, 19, 79, 221, 189, 211, 119, 187, 60, 89, 150, 76, 189, 138, 229, 16, 190, 120, 104, 28, 62, 190, 26, 69, 188, 196, 237, 32, 61, 47, 197, 211, 189, 46, 196, 42, 62, 111, 241, 44, 190, 144, 200, 25, 62, 103, 34, 49, 61, 41, 42, 154, 189, 16, 136, 20, 190, 5, 54, 224, 189, 65, 246, 215, 189, 58, 79, 127, 61, 34, 3, 207, 60, 208, 29, 197, 61, 102, 43, 13, 62, 204, 38, 37, 190, 184, 140, 65, 61, 32, 97, 217, 61, 154, 226, 198, 189, 140, 255, 32, 190, 90, 61, 162, 188, 209, 237, 38, 190, 36, 142, 9, 190, 184, 227, 175, 61, 10, 129, 232, 189, 151, 194, 149, 61, 18, 44, 23, 190, 208, 12, 20, 61, 254, 239, 173, 61, 250, 155, 5, 62, 125, 216, 26, 190, 212, 240, 28, 190, 127, 96, 221, 61, 122, 150, 47, 190, 6, 2, 254, 189, 139, 15, 196, 60, 54, 231, 201, 189, 71, 20, 52, 190, 78, 46, 80, 61, 165, 31, 27, 61, 155, 112, 242, 61, 125, 207, 23, 62, 242, 92, 41, 190, 115, 6, 9, 190, 170, 36, 90, 189, 24, 76, 197, 61, 33, 185, 21, 190, 254, 142, 5, 62, 7, 77, 158, 61, 131, 108, 23, 62, 93, 196, 22, 190, 183, 226, 3, 189, 206, 204, 2, 62, 84, 145, 100, 61, 151, 237, 208, 189, 199, 107, 32, 62, 216, 38, 188, 61, 41, 98, 220, 61, 121, 78, 157, 61, 114, 164, 244, 61, 26, 89, 37, 190, 226, 116, 128, 59, 223, 146, 0, 62, 18, 255, 140, 189, 245, 249, 178, 61, 116, 145, 238, 61, 228, 131, 34, 190, 253, 55, 45, 190, 150, 197, 5, 190, 70, 110, 43, 189, 155, 196, 19, 62, 49, 209, 66, 189, 101, 242, 97, 187, 239, 44, 26, 61, 119, 230, 239, 61, 140, 176, 42, 62, 84, 105, 88, 188, 135, 21, 6, 61, 106, 120, 94, 61, 30, 207, 151, 188, 7, 120, 194, 60, 232, 23, 47, 62, 92, 111, 16, 62, 160, 148, 70, 61, 87, 124, 226, 189, 248, 97, 13, 189, 7, 199, 74, 61, 33, 31, 15, 62, 252, 89, 111, 61, 96, 86, 64, 189, 179, 155, 189, 59, 43, 167, 201, 60, 67, 93, 122, 61, 177, 250, 231, 189, 224, 122, 12, 62, 20, 6, 41, 190, 38, 109, 7, 62, 89, 63, 211, 188, 227, 117, 91, 61, 159, 175, 178, 59, 243, 106, 162, 61, 196, 176, 0, 188, 148, 243, 12, 190, 34, 104, 24, 190, 39, 191, 153, 189, 64, 49, 211, 61, 95, 66, 38, 61, 162, 189, 26, 190, 78, 253, 29, 62, 76, 57, 9, 62, 209, 51, 6, 62, 212, 93, 27, 61, 234, 74, 94, 61, 187, 41, 38, 189, 66, 224, 36, 190, 147, 179, 216, 188, 3, 12, 52, 190, 103, 119, 1, 190, 201, 142, 179, 189, 227, 57, 126, 61, 84, 120, 52, 62, 231, 71, 87, 185, 64, 249, 169, 61, 226, 238, 2, 62, 61, 191, 244, 61, 64, 174, 29, 188, 44, 23, 52, 62, 96, 46, 10, 62, 206, 205, 134, 189, 37, 97, 184, 187, 3, 64, 47, 190, 213, 66, 238, 61, 71, 238, 24, 62, 3, 68, 39, 190, 201, 97, 123, 187, 9, 81, 248, 189, 122, 11, 123, 61, 87, 50, 25, 190, 125, 196, 44, 61, 220, 97, 25, 61, 116, 251, 51, 61, 58, 23, 105, 189, 205, 232, 148, 189, 47, 96, 26, 190, 151, 106, 10, 62, 119, 32, 193, 189, 235, 119, 156, 61, 152, 129, 39, 189, 206, 177, 128, 188, 13, 99, 143, 61, 44, 170, 174, 61, 60, 126, 180, 61, 177, 63, 40, 190, 5, 41, 253, 61, 95, 60, 147, 61, 75, 211, 23, 190, 239, 240, 160, 189, 105, 29, 215, 61, 1, 106, 107, 61, 248, 94, 117, 61, 172, 255, 196, 189, 189, 46, 248, 61, 145, 83, 205, 189, 105, 119, 121, 60, 196, 90, 134, 189, 118, 3, 22, 62, 168, 88, 31, 61, 16, 235, 247, 61, 51, 170, 23, 190, 152, 173, 166, 61, 102, 5, 64, 189, 81, 121, 31, 62, 236, 237, 210, 61, 41, 14, 117, 59, 61, 39, 178, 189, 3, 30, 162, 189, 70, 96, 49, 186, 71, 173, 111, 189, 130, 81, 1, 62, 63, 11, 8, 62, 116, 204, 17, 190, 132, 25, 32, 190, 81, 136, 247, 189, 227, 250, 6, 62, 118, 242, 149, 61, 28, 28, 48, 190, 114, 75, 201, 189, 104, 128, 7, 190, 207, 3, 24, 190, 233, 166, 225, 187, 109, 254, 1, 190, 119, 77, 193, 61, 239, 20, 68, 189, 144, 166, 226, 61, 237, 159, 213, 188, 100, 36, 1, 62, 194, 243, 140, 61, 94, 106, 197, 189, 255, 216, 239, 189, 85, 198, 180, 189, 248, 163, 209, 188, 145, 147, 44, 62, 41, 206, 33, 190, 123, 169, 44, 62, 114, 37, 43, 190, 167, 78, 104, 189, 164, 249, 34, 189, 181, 210, 37, 190, 38, 81, 106, 188, 213, 31, 76, 61, 192, 52, 31, 60, 177, 113, 206, 188, 94, 223, 17, 60, 91, 152, 175, 61, 63, 214, 94, 189, 20, 216, 145, 189, 180, 27, 199, 189, 83, 219, 8, 62, 156, 124, 201, 59, 110, 187, 218, 61, 109, 211, 53, 61, 162, 202, 170, 61, 3, 210, 250, 61, 21, 227, 162, 188, 155, 97, 157, 189, 148, 38, 211, 188, 196, 221, 207, 189, 235, 129, 1, 61, 39, 209, 94, 60, 29, 133, 50, 62, 131, 211, 42, 62, 5, 10, 219, 61, 135, 179, 181, 61, 247, 111, 24, 190, 161, 194, 4, 62, 145, 183, 102, 61, 118, 109, 248, 189, 19, 69, 18, 190, 153, 207, 228, 189, 44, 40, 202, 188, 207, 75, 12, 189, 227, 181, 180, 189, 134, 155, 23, 62, 11, 243, 28, 61, 244, 93, 44, 190, 12, 26, 117, 61, 48, 142, 15, 190, 4, 135, 220, 189, 108, 200, 147, 61, 24, 214, 201, 61, 118, 195, 223, 61, 242, 113, 0, 189, 226, 228, 210, 61, 250, 10, 138, 61, 209, 16, 143, 61, 53, 5, 156, 189, 242, 219, 46, 190, 160, 235, 43, 62, 226, 249, 13, 61, 177, 131, 183, 189, 245, 185, 242, 61, 117, 60, 202, 60, 147, 107, 32, 190, 41, 249, 160, 189, 117, 154, 34, 190, 131, 87, 27, 62, 148, 183, 41, 62, 53, 210, 134, 189, 163, 65, 22, 190, 152, 108, 11, 190, 101, 203, 45, 62, 133, 59, 17, 61, 69, 142, 38, 190, 36, 255, 154, 188, 223, 190, 27, 190, 32, 82, 153, 189, 15, 104, 128, 61, 13, 164, 45, 190, 97, 201, 68, 60, 191, 78, 63, 188, 150, 2, 202, 188, 150, 102, 177, 189, 210, 35, 151, 189, 172, 84, 145, 189, 16, 142, 2, 190, 245, 39, 159, 61, 200, 165, 194, 61, 174, 47, 241, 60, 218, 15, 24, 190, 41, 109, 147, 189, 39, 38, 195, 186, 117, 98, 161, 61, 147, 243, 169, 186, 221, 249, 2, 62, 127, 100, 238, 61, 25, 204, 43, 62, 75, 33, 10, 62, 28, 214, 31, 62, 237, 45, 43, 61, 233, 70, 235, 189, 195, 52, 100, 189, 184, 117, 47, 62, 48, 155, 20, 62, 126, 183, 160, 189, 130, 33, 51, 190, 202, 152, 114, 61, 205, 153, 41, 190, 185, 219, 21, 190, 248, 186, 10, 61, 152, 196, 224, 60, 17, 206, 221, 61, 80, 241, 34, 62, 106, 163, 232, 61, 56, 132, 2, 189, 16, 225, 44, 189, 50, 96, 17, 190, 227, 54, 137, 61, 39, 253, 64, 188, 192, 95, 151, 60, 164, 233, 19, 62, 250, 153, 23, 190, 247, 143, 120, 61, 163, 251, 168, 189, 69, 169, 4, 190, 2, 38, 31, 62, 168, 231, 132, 61, 115, 138, 183, 188, 86, 20, 201, 188, 165, 64, 97, 61, 136, 168, 171, 61, 11, 165, 40, 62, 216, 75, 43, 60, 40, 25, 51, 59, 93, 28, 0, 189, 206, 168, 119, 61, 251, 174, 207, 61, 238, 35, 240, 189, 230, 23, 128, 188, 157, 190, 226, 189, 80, 115, 26, 189, 177, 68, 45, 62, 232, 52, 236, 189, 4, 146, 190, 61, 76, 231, 32, 62, 116, 112, 247, 189, 231, 215, 39, 190, 164, 189, 122, 189, 116, 1, 140, 188, 122, 244, 30, 190, 56, 69, 146, 189, 57, 146, 119, 189, 217, 77, 190, 189, 178, 67, 191, 189, 190, 244, 32, 62, 10, 158, 11, 61, 82, 173, 6, 62, 200, 177, 76, 61, 5, 245, 0, 190, 207, 127, 15, 62, 49, 45, 219, 189, 57, 54, 31, 190, 104, 103, 52, 189, 137, 119, 193, 61, 39, 104, 232, 189, 189, 185, 39, 62, 112, 28, 2, 62, 132, 222, 125, 61, 244, 4, 1, 62, 36, 171, 50, 62, 28, 49, 5, 62, 200, 78, 140, 61, 9, 162, 167, 189, 134, 148, 47, 188, 203, 90, 30, 190, 37, 255, 240, 189, 44, 132, 230, 60, 51, 82, 243, 189, 37, 146, 54, 61, 125, 100, 0, 61, 220, 107, 14, 61, 77, 143, 248, 188, 21, 47, 5, 190, 154, 137, 124, 61, 166, 240, 15, 189, 235, 162, 38, 62, 155, 20, 146, 189, 224, 52, 171, 61, 11, 144, 237, 187, 125, 255, 2, 62, 214, 193, 252, 61, 40, 233, 15, 189, 250, 234, 144, 189, 246, 97, 161, 61, 22, 211, 140, 188, 169, 128, 138, 189, 133, 138, 63, 61, 209, 14, 137, 187, 102, 38, 113, 61, 198, 80, 188, 189, 49, 155, 25, 189, 7, 241, 199, 61, 46, 87, 81, 188, 24, 175, 13, 190, 174, 8, 26, 190, 187, 78, 181, 61, 225, 100, 31, 62, 120, 33, 22, 190, 245, 40, 34, 62, 198, 41, 137, 187, 48, 34, 159, 59, 120, 36, 64, 188, 164, 7, 50, 190, 43, 21, 204, 61, 172, 45, 253, 60, 11, 133, 117, 61, 139, 37, 36, 62, 174, 71, 156, 61, 40, 46, 49, 190, 198, 124, 202, 189, 118, 185, 168, 188, 153, 222, 4, 189, 74, 151, 166, 188, 76, 27, 209, 61, 95, 112, 216, 189, 129, 254, 21, 61, 70, 86, 142, 189, 25, 28, 59, 61, 251, 146, 31, 190, 16, 65, 158, 60, 90, 162, 241, 61, 141, 243, 203, 189, 120, 214, 100, 188, 219, 89, 93, 60, 189, 248, 172, 61, 154, 65, 144, 188, 235, 232, 23, 189, 139, 197, 79, 188, 255, 160, 104, 61, 139, 21, 95, 189, 93, 86, 205, 188, 101, 240, 33, 62, 131, 110, 194, 189, 22, 252, 120, 61, 12, 84, 240, 189, 108, 54, 19, 190, 210, 121, 236, 188, 251, 110, 178, 189, 224, 58, 196, 61, 205, 182, 134, 189, 219, 155, 201, 60, 134, 220, 241, 188, 31, 105, 52, 190, 67, 119, 175, 189, 241, 48, 96, 61, 192, 136, 233, 188, 229, 179, 126, 189, 74, 65, 46, 188, 62, 117, 19, 62, 75, 160, 43, 62, 48, 194, 30, 62, 206, 70, 239, 60, 224, 138, 52, 62, 189, 100, 3, 62, 171, 119, 210, 189, 213, 202, 208, 189, 142, 229, 18, 190, 148, 32, 23, 190, 46, 1, 135, 61, 205, 18, 236, 189, 69, 188, 0, 62, 173, 158, 226, 61, 45, 237, 152, 61, 172, 28, 239, 189, 31, 138, 124, 189, 206, 245, 36, 62, 147, 63, 206, 187, 26, 206, 151, 189, 254, 43, 2, 62, 100, 111, 206, 186, 58, 16, 60, 61, 150, 13, 7, 190, 115, 99, 17, 62, 27, 3, 17, 62, 227, 11, 202, 188, 170, 5, 37, 190, 43, 234, 77, 61, 178, 63, 140, 189, 104, 14, 17, 190, 39, 63, 244, 59, 252, 174, 242, 61, 42, 86, 217, 60, 201, 177, 132, 61, 59, 153, 150, 60, 101, 111, 4, 189, 162, 86, 187, 187, 10, 210, 161, 61, 146, 193, 36, 61, 88, 128, 56, 61, 180, 139, 207, 61, 150, 51, 42, 62, 204, 120, 218, 61, 4, 209, 240, 60, 220, 53, 29, 62, 79, 232, 153, 61, 79, 95, 31, 62, 110, 234, 25, 190, 119, 80, 38, 190, 181, 205, 94, 61, 139, 179, 134, 189, 87, 59, 4, 62, 190, 204, 7, 190, 21, 88, 190, 189, 162, 51, 139, 189, 153, 99, 10, 189, 188, 117, 40, 189, 166, 252, 34, 189, 19, 228, 18, 62, 46, 214, 88, 61, 23, 7, 30, 190, 150, 8, 95, 189, 137, 253, 46, 190, 251, 230, 10, 62, 243, 219, 209, 61, 2, 238, 116, 61, 119, 95, 14, 190, 249, 10, 20, 190, 78, 89, 7, 62, 145, 101, 238, 61, 237, 183, 26, 190, 38, 113, 42, 62, 119, 127, 40, 62, 96, 156, 155, 61, 151, 199, 255, 187, 150, 236, 191, 188, 122, 233, 204, 61, 139, 82, 244, 61, 125, 140, 41, 61, 54, 251, 180, 189, 215, 148, 36, 62, 107, 80, 16, 62, 254, 122, 43, 190, 124, 35, 236, 61, 199, 77, 100, 61, 66, 128, 253, 189, 187, 48, 113, 189, 136, 176, 150, 189, 218, 213, 182, 61, 112, 130, 13, 189, 142, 110, 240, 189, 173, 86, 137, 61, 43, 165, 90, 189, 6, 173, 33, 62, 35, 184, 47, 190, 199, 177, 36, 190, 233, 10, 0, 62, 182, 8, 90, 61, 180, 142, 38, 62, 76, 237, 62, 61, 31, 51, 74, 189, 190, 83, 224, 61, 127, 248, 29, 187, 128, 238, 21, 62, 26, 38, 224, 61, 98, 49, 81, 189, 20, 22, 86, 61, 101, 23, 1, 190, 180, 64, 107, 61, 141, 110, 215, 61, 64, 221, 45, 190, 21, 227, 244, 189, 180, 193, 162, 189, 93, 74, 98, 61, 131, 243, 204, 61, 199, 226, 178, 61, 22, 31, 165, 61, 36, 112, 192, 189, 106, 52, 147, 61, 124, 107, 75, 189, 107, 200, 87, 61, 42, 199, 241, 61, 37, 61, 164, 60, 226, 191, 178, 60, 230, 232, 192, 61, 108, 251, 183, 189, 75, 120, 45, 62, 24, 143, 50, 60, 190, 221, 232, 60, 97, 46, 217, 61, 237, 17, 52, 61, 9, 155, 78, 189, 183, 209, 126, 61, 109, 82, 10, 62, 186, 36, 254, 61, 195, 120, 227, 60, 36, 101, 193, 186, 250, 175, 75, 189, 209, 42, 126, 60, 23, 37, 36, 62, 225, 237, 65, 61, 5, 233, 213, 189, 224, 55, 145, 189, 220, 155, 181, 61, 82, 1, 12, 61, 81, 55, 56, 189, 198, 141, 11, 60, 71, 23, 5, 189, 84, 255, 6, 62, 173, 38, 150, 59, 232, 251, 120, 189, 212, 114, 246, 61, 132, 58, 41, 62, 197, 18, 68, 61, 254, 243, 20, 190, 17, 81, 42, 61, 109, 194, 244, 189, 110, 74, 189, 189, 211, 96, 186, 61, 104, 122, 72, 61, 140, 129, 209, 189, 60, 231, 30, 60, 47, 185, 145, 60, 88, 34, 10, 190, 98, 55, 5, 62, 227, 220, 239, 61, 31, 9, 16, 190, 82, 214, 17, 62, 37, 146, 167, 61, 49, 91, 20, 190, 223, 250, 122, 189, 243, 46, 126, 61, 147, 186, 133, 58, 124, 212, 52, 190, 6, 38, 209, 61, 76, 51, 236, 189, 139, 17, 66, 188, 193, 37, 233, 188, 187, 63, 197, 60, 47, 255, 10, 190, 73, 88, 232, 61, 202, 175, 14, 61, 107, 129, 20, 187, 2, 93, 202, 61, 40, 243, 128, 61, 125, 51, 65, 61, 109, 254, 183, 61, 234, 140, 149, 189, 113, 254, 221, 189, 171, 194, 109, 61, 114, 87, 17, 62, 75, 62, 162, 61, 241, 128, 205, 188, 239, 138, 46, 62, 6, 192, 112, 189, 205, 194, 14, 189, 220, 33, 81, 61, 143, 26, 87, 61, 186, 138, 35, 62, 26, 70, 76, 61, 57, 17, 172, 189, 35, 226, 113, 60, 208, 184, 135, 189, 244, 171, 234, 189, 87, 207, 27, 189, 47, 244, 216, 189, 22, 82, 92, 61, 108, 147, 246, 185, 92, 73, 236, 61, 84, 9, 20, 190, 225, 95, 237, 189, 153, 160, 96, 61, 186, 114, 223, 187, 220, 204, 106, 189, 197, 164, 132, 188, 85, 88, 204, 61, 220, 144, 128, 61, 110, 103, 159, 61, 52, 152, 11, 60, 31, 189, 25, 60, 48, 123, 190, 60, 215, 3, 249, 61, 153, 221, 98, 60, 220, 149, 173, 61, 125, 190, 141, 61, 88, 75, 29, 61, 87, 44, 43, 190, 195, 165, 20, 190, 92, 78, 220, 61, 214, 229, 246, 189, 76, 187, 23, 61, 72, 115, 57, 188, 255, 72, 217, 188, 127, 184, 39, 61, 203, 14, 41, 190, 15, 183, 149, 189, 141, 233, 56, 189, 28, 253, 162, 188, 189, 112, 139, 61, 8, 241, 3, 190, 153, 169, 107, 61, 80, 89, 152, 60, 241, 246, 188, 60, 25, 115, 37, 190, 89, 46, 215, 61, 81, 93, 218, 189, 147, 187, 19, 62, 41, 199, 164, 61, 156, 94, 172, 189, 186, 178, 14, 60, 154, 174, 55, 60, 228, 32, 162, 188, 45, 82, 133, 61, 154, 131, 18, 190, 7, 76, 250, 61, 129, 224, 147, 189, 13, 78, 39, 190, 20, 135, 116, 61, 114, 8, 172, 188, 159, 89, 210, 189, 149, 209, 29, 62, 134, 107, 35, 62, 150, 17, 47, 62, 195, 160, 182, 61, 154, 178, 0, 61, 135, 104, 2, 190, 91, 223, 24, 60, 157, 83, 34, 190, 23, 31, 200, 61, 203, 73, 76, 61, 184, 186, 202, 188, 28, 161, 23, 190, 149, 177, 93, 188, 189, 249, 168, 189, 11, 94, 140, 189, 252, 97, 92, 189, 164, 101, 203, 61, 90, 35, 121, 61, 55, 64, 34, 62, 93, 223, 148, 61, 146, 93, 27, 190, 47, 179, 28, 62, 12, 121, 47, 190, 13, 53, 161, 187, 125, 167, 63, 61, 210, 175, 218, 61, 217, 148, 210, 60, 74, 119, 192, 187, 104, 205, 155, 189, 158, 118, 25, 190, 113, 61, 190, 189, 185, 230, 161, 61, 244, 206, 128, 187, 49, 209, 66, 61, 113, 189, 107, 59, 171, 158, 158, 186, 91, 167, 42, 62, 201, 16, 214, 61, 3, 230, 139, 189, 152, 160, 194, 189, 14, 8, 12, 62, 222, 45, 209, 189, 76, 111, 11, 190, 236, 177, 108, 187, 60, 94, 0, 189, 161, 229, 133, 61, 111, 128, 77, 188, 234, 66, 183, 189, 86, 246, 150, 61, 172, 101, 222, 60, 64, 116, 35, 190, 69, 117, 189, 188, 237, 78, 19, 190, 139, 212, 43, 62, 54, 112, 252, 188, 163, 48, 53, 61, 30, 49, 81, 189, 106, 135, 103, 61, 173, 245, 231, 60, 26, 38, 98, 60, 186, 209, 103, 61, 178, 99, 34, 62, 36, 87, 2, 190, 111, 0, 130, 61, 63, 162, 35, 190, 178, 49, 19, 190, 78, 157, 162, 189, 135, 92, 37, 62, 184, 64, 13, 190, 17, 121, 20, 190, 254, 90, 20, 62, 63, 97, 70, 61, 82, 119, 1, 62, 71, 147, 168, 61, 53, 182, 10, 189, 191, 109, 72, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 214, 86, 189, 250, 216, 221, 189, 73, 6, 236, 61, 194, 188, 4, 62, 67, 169, 205, 189, 220, 20, 99, 189, 66, 174, 38, 190, 106, 176, 214, 61, 196, 77, 123, 61, 54, 98, 36, 62, 218, 163, 166, 189, 138, 249, 173, 61, 252, 143, 185, 61, 54, 150, 22, 62, 144, 139, 238, 61, 46, 213, 158, 188, 129, 182, 176, 61, 15, 4, 182, 61, 156, 136, 119, 61, 82, 117, 43, 189, 203, 221, 75, 189, 16, 45, 209, 188, 194, 62, 218, 60, 193, 110, 191, 189, 140, 179, 64, 61, 154, 213, 160, 189, 144, 248, 28, 62, 100, 29, 20, 62, 24, 61, 1, 190, 204, 184, 89, 189, 20, 221, 47, 189, 2, 149, 224, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {170, 245, 185, 61, 93, 232, 24, 62, 131, 170, 40, 62, 213, 102, 0, 60, 247, 161, 34, 190, 28, 45, 196, 60, 79, 170, 13, 62, 112, 75, 32, 190, 119, 250, 14, 190, 123, 250, 46, 62, 29, 110, 180, 60, 56, 153, 215, 59, 195, 70, 163, 189, 146, 227, 4, 61, 28, 54, 205, 61, 27, 94, 207, 61, 79, 206, 242, 61, 10, 169, 245, 188, 29, 148, 37, 62, 211, 157, 224, 189, 36, 163, 209, 61, 178, 220, 204, 59, 39, 177, 143, 61, 195, 173, 233, 61, 81, 175, 173, 60, 27, 204, 50, 189, 218, 95, 249, 188, 39, 27, 10, 189, 163, 100, 115, 61, 66, 177, 164, 189, 223, 55, 162, 61, 99, 27, 251, 61, 179, 47, 130, 189, 119, 176, 112, 61, 178, 73, 14, 62, 13, 222, 38, 62, 244, 156, 45, 190, 164, 217, 232, 61, 163, 152, 122, 189, 109, 74, 6, 190, 83, 155, 150, 189, 137, 33, 126, 61, 187, 212, 14, 62, 217, 79, 236, 189, 206, 22, 130, 189, 116, 44, 25, 62, 20, 20, 135, 189, 108, 114, 12, 190, 195, 164, 1, 57, 148, 6, 50, 189, 137, 89, 62, 189, 108, 152, 106, 189, 153, 15, 240, 61, 18, 90, 145, 61, 145, 228, 88, 189, 163, 61, 156, 189, 69, 221, 16, 62, 54, 201, 199, 60, 236, 4, 245, 61, 150, 51, 210, 61, 139, 30, 39, 61, 71, 138, 33, 190, 127, 92, 154, 189, 197, 109, 21, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 218, 69, 61, 31, 247, 17, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {157, 224, 228, 190, 96, 164, 46, 63, 51, 39, 11, 64};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {165, 202, 169, 62, 206, 194, 127, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0012/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}