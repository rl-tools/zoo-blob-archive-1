// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {193, 245, 212, 62, 178, 73, 50, 63, 81, 2, 36, 63, 48, 104, 144, 62, 114, 33, 174, 190, 219, 8, 180, 62, 248, 198, 18, 191, 55, 226, 20, 63, 130, 179, 8, 62, 161, 9, 22, 63, 168, 218, 101, 63, 157, 79, 54, 62, 76, 171, 27, 191, 158, 40, 172, 63, 81, 229, 186, 62, 201, 20, 213, 62, 58, 188, 189, 62, 239, 150, 51, 191, 86, 247, 206, 62, 38, 255, 179, 190, 74, 65, 143, 58, 21, 69, 47, 191, 17, 92, 109, 63, 149, 0, 253, 62, 85, 47, 86, 190, 96, 114, 181, 191, 152, 122, 172, 190, 187, 168, 47, 63, 179, 49, 111, 63, 222, 200, 12, 62, 90, 158, 15, 190, 189, 94, 36, 191, 9, 142, 179, 62, 58, 122, 169, 62, 45, 4, 96, 191, 24, 238, 62, 190, 158, 5, 100, 62, 184, 159, 50, 62, 215, 36, 16, 191, 210, 182, 180, 189, 87, 133, 18, 189, 189, 22, 20, 191, 90, 13, 20, 63, 158, 207, 133, 63, 148, 249, 151, 62, 125, 240, 187, 190, 0, 152, 19, 191, 6, 244, 182, 190, 135, 62, 27, 61, 48, 252, 29, 191, 39, 18, 55, 190, 72, 123, 82, 62, 58, 144, 48, 62, 185, 121, 60, 63, 227, 111, 149, 62, 164, 11, 0, 63, 103, 150, 70, 191, 234, 10, 183, 189, 96, 224, 199, 62, 71, 170, 23, 191, 216, 165, 251, 61, 111, 227, 3, 63, 131, 122, 13, 63, 123, 85, 126, 190, 30, 0, 216, 60, 152, 77, 2, 191, 44, 198, 34, 62, 23, 213, 66, 61, 225, 69, 35, 63, 87, 26, 208, 62, 174, 53, 54, 63, 102, 108, 227, 62, 58, 63, 105, 63, 214, 255, 237, 62, 92, 25, 179, 60, 39, 246, 180, 190, 184, 104, 108, 63, 235, 127, 235, 190, 43, 176, 172, 190, 57, 133, 222, 190, 25, 213, 226, 188, 226, 32, 96, 62, 129, 6, 137, 62, 243, 135, 96, 62, 208, 195, 69, 190, 101, 179, 147, 190, 240, 226, 58, 63, 171, 174, 39, 63, 201, 219, 99, 189, 202, 221, 97, 62, 81, 211, 247, 62, 19, 60, 119, 191, 243, 128, 133, 190, 40, 193, 168, 62, 73, 93, 75, 191, 134, 193, 180, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 210, 193, 190, 184, 61, 8, 63, 235, 75, 46, 63, 215, 191, 62, 62, 14, 132, 7, 61, 101, 111, 33, 62, 101, 192, 19, 191, 56, 152, 132, 61, 143, 103, 64, 190, 69, 59, 115, 190, 75, 50, 41, 62, 74, 236, 180, 62, 16, 130, 76, 62, 140, 245, 144, 190, 146, 51, 66, 190, 1, 254, 6, 63, 167, 77, 213, 62, 214, 72, 249, 61, 249, 183, 128, 62, 89, 55, 76, 190, 108, 174, 216, 62, 79, 158, 211, 190, 120, 30, 44, 63, 222, 202, 84, 61, 15, 125, 156, 189, 223, 40, 64, 61, 238, 135, 37, 63, 242, 96, 192, 62, 67, 171, 8, 190, 161, 25, 237, 190, 35, 90, 152, 189, 171, 233, 24, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 230, 107, 189, 182, 205, 47, 61, 211, 227, 243, 189, 16, 97, 144, 62, 246, 92, 48, 60, 110, 146, 73, 190, 225, 97, 38, 190, 85, 47, 20, 190, 226, 138, 2, 62, 222, 151, 131, 62, 96, 217, 33, 62, 1, 41, 251, 190, 14, 234, 41, 61, 161, 136, 227, 189, 223, 42, 172, 62, 82, 31, 11, 189, 201, 188, 254, 190, 66, 188, 27, 62, 138, 104, 243, 60, 116, 94, 99, 188, 121, 238, 113, 189, 197, 0, 27, 190, 72, 29, 195, 188, 127, 34, 0, 62, 100, 157, 145, 62, 51, 133, 42, 190, 171, 250, 3, 191, 46, 164, 128, 61, 7, 189, 216, 189, 71, 250, 81, 62, 96, 168, 0, 191, 48, 4, 131, 190, 199, 79, 30, 189, 99, 237, 163, 186, 38, 87, 48, 189, 160, 146, 29, 62, 142, 213, 129, 62, 118, 243, 50, 62, 191, 68, 132, 189, 168, 99, 112, 189, 10, 204, 6, 62, 55, 170, 85, 61, 120, 34, 205, 190, 45, 144, 47, 190, 156, 82, 130, 62, 243, 186, 194, 61, 251, 30, 245, 187, 118, 40, 38, 62, 129, 106, 15, 190, 36, 172, 41, 189, 228, 179, 223, 61, 50, 122, 30, 62, 202, 238, 192, 189, 43, 234, 180, 58, 103, 194, 56, 190, 250, 109, 118, 61, 244, 171, 199, 60, 31, 61, 77, 62, 84, 112, 41, 190, 17, 118, 150, 189, 194, 188, 183, 190, 231, 31, 119, 190, 70, 123, 72, 62, 237, 15, 191, 61, 226, 252, 188, 190, 11, 53, 201, 189, 217, 190, 52, 189, 163, 93, 63, 60, 32, 140, 182, 62, 212, 162, 138, 62, 12, 110, 6, 190, 36, 135, 140, 62, 162, 76, 175, 191, 76, 178, 52, 191, 204, 51, 165, 59, 16, 200, 149, 62, 221, 171, 181, 190, 134, 102, 137, 62, 184, 253, 23, 191, 45, 184, 129, 190, 200, 19, 53, 190, 112, 87, 174, 189, 22, 101, 189, 190, 104, 48, 163, 62, 68, 9, 132, 60, 11, 96, 193, 190, 200, 250, 205, 61, 30, 42, 198, 189, 158, 145, 120, 62, 126, 35, 23, 62, 187, 163, 87, 62, 90, 90, 226, 60, 237, 11, 114, 62, 140, 152, 129, 190, 23, 5, 57, 62, 18, 60, 214, 189, 203, 116, 215, 189, 36, 242, 158, 62, 68, 112, 66, 191, 31, 252, 172, 190, 65, 146, 5, 191, 180, 98, 37, 190, 72, 89, 0, 62, 34, 47, 65, 189, 18, 29, 60, 189, 52, 40, 139, 190, 199, 1, 127, 61, 170, 177, 215, 62, 159, 76, 170, 190, 46, 15, 14, 190, 42, 173, 101, 191, 113, 3, 33, 190, 120, 112, 52, 62, 128, 66, 23, 62, 57, 146, 254, 189, 70, 89, 86, 189, 139, 43, 203, 189, 120, 107, 7, 191, 82, 30, 90, 189, 40, 232, 145, 190, 138, 125, 28, 190, 49, 108, 151, 190, 220, 22, 208, 60, 149, 59, 38, 189, 166, 221, 52, 62, 39, 59, 75, 62, 64, 93, 201, 62, 144, 113, 70, 61, 63, 6, 127, 61, 78, 176, 216, 61, 224, 203, 32, 189, 102, 229, 204, 62, 81, 89, 221, 190, 103, 114, 62, 62, 128, 236, 199, 61, 68, 18, 158, 190, 192, 173, 124, 190, 75, 216, 222, 61, 122, 61, 187, 189, 208, 39, 207, 189, 82, 197, 76, 57, 139, 105, 18, 62, 114, 208, 150, 62, 129, 39, 65, 190, 153, 224, 98, 190, 64, 85, 6, 62, 114, 174, 137, 61, 39, 210, 102, 60, 196, 58, 144, 188, 202, 184, 29, 190, 78, 14, 82, 62, 180, 59, 189, 60, 73, 139, 109, 62, 235, 124, 234, 61, 113, 248, 20, 190, 203, 65, 133, 62, 129, 32, 132, 189, 93, 230, 185, 62, 88, 246, 1, 191, 103, 51, 100, 190, 146, 152, 153, 190, 222, 188, 118, 189, 26, 200, 155, 62, 152, 121, 89, 190, 204, 88, 49, 62, 66, 146, 14, 62, 170, 127, 34, 190, 252, 243, 175, 62, 248, 9, 216, 191, 41, 84, 135, 190, 55, 253, 162, 189, 112, 175, 164, 189, 189, 94, 176, 190, 123, 172, 216, 62, 23, 137, 205, 190, 186, 31, 36, 190, 216, 121, 88, 61, 186, 33, 163, 189, 62, 114, 253, 190, 47, 229, 203, 62, 14, 27, 232, 187, 188, 164, 217, 190, 90, 165, 157, 62, 232, 27, 142, 190, 229, 172, 69, 62, 92, 56, 4, 60, 19, 238, 5, 62, 103, 93, 242, 61, 59, 205, 4, 62, 168, 94, 240, 190, 114, 219, 119, 62, 219, 237, 173, 190, 98, 15, 223, 189, 181, 86, 131, 61, 25, 175, 65, 190, 28, 66, 35, 59, 105, 202, 20, 62, 152, 228, 43, 62, 26, 237, 223, 61, 181, 131, 199, 189, 200, 81, 162, 190, 2, 101, 182, 189, 89, 44, 113, 190, 3, 207, 67, 62, 169, 34, 147, 189, 166, 118, 113, 62, 155, 54, 52, 190, 165, 167, 34, 61, 80, 121, 178, 61, 71, 1, 27, 190, 118, 195, 18, 189, 131, 245, 127, 62, 182, 18, 197, 189, 233, 66, 216, 190, 148, 22, 95, 62, 42, 150, 90, 187, 55, 30, 181, 62, 112, 159, 141, 190, 245, 135, 103, 62, 132, 68, 54, 62, 153, 50, 71, 62, 53, 170, 88, 61, 94, 205, 156, 62, 234, 47, 137, 189, 252, 196, 250, 61, 81, 20, 131, 189, 34, 69, 106, 62, 101, 139, 129, 188, 198, 20, 46, 190, 71, 112, 217, 61, 190, 26, 69, 188, 47, 165, 167, 61, 62, 22, 151, 60, 194, 160, 122, 62, 171, 173, 68, 190, 214, 121, 178, 62, 24, 19, 70, 62, 178, 154, 17, 190, 126, 171, 19, 189, 72, 216, 141, 61, 95, 233, 101, 61, 10, 25, 179, 61, 224, 180, 35, 62, 74, 6, 213, 61, 78, 182, 231, 61, 135, 81, 138, 189, 229, 152, 39, 61, 141, 52, 3, 62, 247, 115, 70, 189, 65, 130, 22, 188, 51, 2, 61, 62, 209, 133, 61, 190, 115, 130, 31, 190, 108, 151, 172, 61, 165, 246, 151, 190, 155, 234, 163, 60, 162, 74, 151, 61, 169, 7, 104, 62, 109, 151, 74, 62, 123, 105, 131, 62, 172, 118, 72, 191, 246, 151, 199, 190, 127, 96, 221, 61, 118, 16, 43, 191, 162, 134, 142, 60, 64, 165, 152, 62, 92, 179, 121, 62, 142, 227, 66, 190, 65, 96, 31, 62, 2, 187, 25, 190, 241, 105, 210, 62, 4, 106, 157, 62, 40, 215, 143, 189, 111, 57, 234, 61, 14, 22, 26, 61, 89, 123, 244, 59, 216, 9, 192, 190, 164, 58, 145, 62, 37, 214, 134, 189, 42, 43, 163, 62, 61, 185, 49, 62, 59, 99, 225, 61, 76, 17, 141, 62, 224, 211, 148, 189, 28, 68, 16, 191, 76, 109, 214, 62, 78, 193, 3, 191, 33, 174, 4, 190, 24, 134, 165, 188, 25, 27, 69, 61, 137, 162, 150, 190, 238, 247, 151, 189, 130, 42, 133, 62, 223, 30, 155, 61, 245, 249, 178, 61, 231, 164, 37, 62, 94, 247, 207, 190, 128, 103, 193, 190, 168, 91, 43, 190, 41, 41, 102, 188, 55, 166, 165, 60, 105, 191, 131, 61, 167, 67, 129, 190, 29, 230, 112, 61, 182, 43, 56, 62, 43, 145, 142, 61, 106, 44, 219, 189, 45, 246, 173, 61, 127, 52, 165, 60, 42, 86, 145, 190, 19, 190, 240, 60, 34, 242, 145, 61, 145, 2, 132, 62, 225, 192, 55, 61, 139, 103, 39, 189, 136, 177, 28, 189, 174, 57, 136, 61, 0, 93, 130, 61, 122, 61, 250, 62, 170, 130, 172, 61, 179, 155, 189, 59, 214, 106, 201, 60, 37, 217, 136, 60, 141, 197, 232, 189, 247, 133, 242, 61, 49, 189, 57, 190, 38, 109, 7, 62, 20, 150, 228, 188, 118, 115, 13, 61, 165, 157, 178, 59, 243, 106, 162, 61, 37, 189, 243, 188, 25, 232, 35, 190, 102, 63, 43, 190, 13, 68, 153, 189, 241, 54, 164, 61, 166, 34, 150, 60, 162, 189, 26, 190, 137, 20, 8, 62, 136, 111, 232, 61, 209, 51, 6, 62, 11, 186, 222, 59, 234, 74, 94, 61, 187, 41, 38, 189, 222, 253, 45, 190, 161, 187, 87, 189, 127, 47, 80, 190, 66, 120, 2, 190, 201, 142, 179, 189, 227, 57, 126, 61, 228, 39, 26, 62, 121, 224, 155, 188, 84, 108, 29, 61, 160, 86, 253, 61, 168, 94, 85, 62, 202, 54, 194, 188, 158, 10, 140, 61, 208, 134, 35, 61, 206, 205, 134, 189, 5, 212, 168, 188, 62, 186, 181, 189, 173, 66, 250, 61, 72, 88, 50, 61, 206, 10, 237, 60, 77, 40, 249, 61, 14, 206, 121, 190, 173, 215, 170, 61, 149, 165, 128, 60, 41, 101, 82, 62, 101, 198, 250, 187, 233, 222, 41, 62, 211, 237, 94, 189, 16, 61, 13, 190, 101, 189, 67, 189, 3, 193, 186, 61, 13, 197, 2, 190, 86, 251, 38, 62, 101, 101, 54, 61, 129, 28, 79, 62, 151, 84, 52, 187, 240, 205, 23, 61, 231, 125, 155, 60, 196, 105, 217, 190, 186, 99, 17, 61, 187, 107, 151, 62, 243, 64, 64, 58, 112, 113, 46, 61, 242, 235, 93, 62, 53, 53, 191, 190, 39, 184, 194, 189, 172, 255, 196, 189, 112, 129, 19, 190, 5, 203, 56, 61, 54, 214, 90, 62, 189, 85, 43, 62, 0, 107, 78, 62, 212, 40, 28, 62, 169, 198, 131, 60, 220, 61, 89, 62, 30, 19, 108, 62, 23, 190, 99, 61, 224, 173, 166, 62, 37, 66, 85, 62, 78, 156, 12, 189, 195, 107, 84, 190, 99, 133, 122, 61, 8, 175, 108, 189, 76, 167, 221, 61, 167, 105, 123, 62, 70, 213, 96, 62, 7, 209, 147, 189, 183, 199, 129, 190, 45, 78, 100, 190, 230, 252, 152, 62, 208, 209, 160, 190, 194, 194, 133, 190, 181, 70, 227, 189, 52, 171, 27, 190, 122, 69, 35, 190, 162, 146, 186, 188, 40, 90, 9, 190, 249, 190, 160, 61, 239, 20, 68, 189, 64, 81, 219, 61, 234, 148, 53, 189, 103, 59, 229, 61, 176, 18, 106, 61, 154, 141, 226, 189, 38, 6, 6, 190, 137, 126, 198, 189, 45, 25, 32, 189, 90, 16, 253, 61, 97, 53, 80, 190, 165, 18, 26, 62, 61, 174, 71, 190, 228, 2, 149, 189, 169, 87, 100, 189, 244, 186, 58, 190, 190, 159, 4, 189, 19, 115, 0, 61, 46, 91, 26, 188, 34, 70, 153, 189, 79, 249, 254, 188, 234, 171, 129, 61, 70, 225, 122, 189, 201, 189, 153, 189, 228, 249, 234, 189, 110, 186, 183, 61, 167, 129, 132, 190, 194, 86, 129, 62, 139, 151, 36, 191, 130, 133, 44, 61, 219, 237, 56, 190, 134, 69, 2, 62, 155, 97, 157, 189, 187, 49, 198, 189, 103, 200, 90, 190, 6, 49, 115, 190, 54, 88, 122, 62, 25, 214, 222, 62, 109, 194, 117, 62, 219, 148, 175, 61, 254, 198, 254, 190, 208, 146, 81, 190, 41, 149, 72, 62, 142, 43, 159, 61, 71, 55, 99, 188, 109, 199, 47, 190, 104, 9, 239, 189, 50, 246, 8, 190, 34, 159, 131, 61, 226, 73, 48, 190, 107, 238, 183, 62, 144, 201, 16, 189, 114, 105, 62, 188, 86, 153, 232, 61, 30, 184, 88, 189, 235, 194, 129, 189, 154, 254, 117, 62, 184, 228, 6, 61, 103, 235, 42, 62, 9, 36, 144, 190, 30, 127, 155, 62, 5, 189, 74, 61, 90, 38, 97, 62, 113, 144, 161, 62, 242, 219, 46, 190, 255, 27, 35, 62, 50, 133, 249, 191, 37, 130, 170, 189, 163, 46, 43, 190, 169, 83, 185, 191, 30, 106, 54, 191, 82, 103, 155, 62, 10, 156, 209, 189, 13, 223, 187, 62, 125, 143, 12, 62, 160, 138, 159, 190, 41, 255, 43, 191, 141, 31, 224, 62, 172, 104, 41, 61, 120, 134, 2, 191, 29, 155, 137, 190, 139, 24, 1, 190, 133, 29, 155, 190, 213, 78, 112, 62, 220, 5, 94, 187, 33, 255, 94, 190, 146, 57, 201, 189, 126, 76, 36, 190, 208, 210, 149, 190, 78, 228, 174, 190, 120, 63, 132, 190, 6, 137, 157, 189, 79, 140, 141, 190, 177, 33, 146, 61, 21, 42, 184, 62, 190, 60, 51, 62, 218, 15, 24, 190, 65, 253, 248, 61, 107, 230, 192, 190, 38, 65, 191, 190, 103, 85, 235, 189, 59, 88, 106, 62, 190, 246, 80, 189, 29, 235, 135, 62, 87, 90, 178, 190, 134, 247, 152, 188, 18, 93, 49, 189, 95, 146, 140, 190, 254, 172, 70, 190, 71, 254, 98, 62, 143, 155, 125, 62, 29, 61, 192, 190, 144, 70, 245, 60, 181, 213, 50, 189, 67, 102, 12, 61, 2, 229, 189, 189, 234, 18, 228, 61, 3, 180, 92, 62, 198, 219, 103, 62, 254, 186, 143, 60, 177, 232, 210, 62, 138, 134, 140, 59, 242, 252, 55, 190, 106, 84, 61, 189, 167, 28, 47, 61, 178, 175, 190, 60, 212, 155, 222, 61, 103, 138, 162, 62, 250, 153, 23, 190, 41, 82, 190, 61, 161, 158, 163, 191, 222, 20, 133, 190, 68, 173, 83, 61, 85, 27, 27, 62, 36, 204, 14, 189, 12, 38, 52, 61, 213, 110, 61, 190, 180, 100, 191, 189, 14, 5, 202, 61, 162, 234, 138, 189, 59, 151, 239, 188, 208, 32, 12, 190, 115, 109, 230, 61, 135, 11, 115, 190, 70, 236, 59, 189, 106, 194, 116, 189, 48, 24, 20, 62, 92, 206, 152, 190, 147, 209, 21, 62, 21, 203, 167, 188, 246, 222, 205, 61, 130, 189, 8, 61, 59, 152, 76, 60, 90, 15, 51, 190, 157, 251, 163, 190, 245, 135, 98, 61, 221, 48, 217, 190, 220, 11, 192, 59, 244, 107, 18, 189, 106, 186, 241, 61, 178, 67, 191, 189, 97, 40, 71, 62, 169, 252, 88, 190, 78, 250, 155, 190, 170, 225, 139, 189, 215, 166, 179, 61, 70, 243, 35, 61, 38, 111, 78, 188, 75, 64, 49, 191, 115, 247, 2, 190, 154, 198, 243, 61, 138, 174, 147, 190, 248, 176, 169, 61, 221, 175, 21, 62, 241, 110, 46, 62, 176, 205, 66, 190, 43, 101, 195, 62, 227, 193, 232, 60, 52, 157, 167, 62, 200, 109, 85, 190, 53, 109, 217, 61, 116, 64, 17, 61, 197, 40, 48, 61, 34, 116, 46, 190, 71, 176, 20, 62, 228, 109, 146, 61, 214, 92, 189, 61, 248, 44, 1, 189, 100, 10, 172, 61, 199, 5, 4, 189, 230, 164, 143, 190, 230, 180, 97, 190, 235, 162, 38, 62, 69, 208, 150, 190, 206, 90, 133, 62, 16, 140, 169, 62, 21, 203, 148, 62, 224, 52, 232, 61, 172, 176, 236, 61, 61, 140, 128, 190, 173, 247, 170, 62, 189, 126, 49, 62, 117, 25, 104, 59, 151, 130, 124, 60, 250, 149, 13, 62, 137, 75, 145, 188, 24, 126, 183, 190, 239, 211, 0, 189, 125, 84, 219, 189, 177, 232, 12, 189, 204, 62, 170, 189, 118, 209, 173, 189, 84, 138, 55, 62, 173, 0, 99, 189, 146, 219, 149, 190, 6, 84, 60, 188, 153, 42, 22, 191, 87, 156, 80, 190, 120, 36, 64, 188, 242, 233, 75, 190, 97, 205, 47, 187, 98, 68, 230, 187, 65, 194, 181, 188, 49, 42, 240, 61, 174, 71, 156, 61, 133, 176, 48, 190, 34, 157, 11, 190, 157, 70, 106, 189, 153, 222, 4, 189, 81, 253, 59, 189, 98, 186, 93, 61, 124, 124, 15, 190, 153, 198, 48, 60, 11, 176, 217, 189, 66, 117, 153, 60, 251, 146, 31, 190, 246, 53, 209, 188, 58, 131, 163, 61, 143, 133, 203, 189, 0, 211, 88, 189, 67, 207, 23, 60, 133, 251, 173, 61, 52, 138, 56, 189, 211, 51, 180, 189, 247, 185, 65, 189, 102, 41, 187, 60, 139, 21, 95, 189, 93, 86, 205, 188, 12, 112, 13, 62, 122, 65, 232, 189, 204, 247, 211, 188, 232, 195, 2, 62, 32, 123, 185, 190, 148, 215, 114, 190, 135, 114, 188, 62, 94, 189, 2, 62, 205, 182, 134, 189, 36, 168, 255, 189, 241, 100, 93, 61, 82, 174, 11, 191, 84, 177, 41, 189, 218, 123, 90, 62, 96, 163, 1, 61, 16, 64, 69, 189, 21, 125, 255, 190, 87, 255, 127, 62, 13, 6, 122, 62, 244, 144, 205, 61, 40, 165, 178, 61, 121, 73, 64, 62, 109, 216, 87, 61, 95, 46, 191, 187, 42, 108, 36, 190, 123, 242, 234, 190, 28, 191, 151, 189, 74, 29, 185, 61, 230, 206, 77, 189, 142, 90, 105, 62, 181, 89, 38, 61, 224, 30, 12, 62, 10, 161, 98, 61, 110, 199, 186, 59, 70, 79, 221, 188, 62, 143, 193, 188, 120, 9, 209, 190, 171, 202, 52, 62, 201, 153, 143, 188, 33, 47, 130, 62, 150, 13, 7, 190, 103, 221, 212, 61, 241, 91, 149, 189, 100, 67, 50, 190, 83, 109, 138, 190, 112, 253, 22, 62, 97, 133, 252, 189, 225, 51, 182, 188, 214, 237, 131, 190, 149, 242, 134, 188, 182, 230, 141, 187, 36, 40, 138, 189, 37, 93, 81, 188, 118, 209, 174, 60, 126, 119, 159, 188, 151, 107, 67, 190, 112, 53, 129, 61, 241, 247, 69, 189, 114, 220, 185, 62, 120, 56, 63, 61, 188, 119, 205, 61, 179, 202, 142, 61, 72, 184, 40, 62, 132, 99, 52, 61, 251, 10, 192, 62, 25, 132, 233, 189, 138, 251, 145, 190, 207, 143, 255, 61, 143, 194, 152, 189, 100, 78, 156, 62, 146, 102, 61, 61, 58, 53, 167, 62, 162, 51, 139, 189, 99, 109, 172, 61, 248, 204, 82, 191, 245, 52, 10, 189, 143, 150, 16, 60, 190, 231, 14, 62, 223, 116, 184, 190, 224, 14, 129, 62, 147, 41, 139, 190, 136, 103, 107, 61, 123, 246, 30, 62, 148, 119, 29, 189, 160, 118, 77, 190, 204, 120, 157, 61, 143, 245, 74, 62, 74, 13, 165, 190, 243, 240, 91, 189, 194, 75, 28, 62, 124, 189, 35, 63, 101, 250, 134, 61, 98, 183, 189, 61, 116, 235, 3, 62, 100, 43, 241, 61, 78, 47, 144, 61, 202, 151, 229, 62, 26, 78, 89, 60, 156, 137, 135, 62, 240, 213, 27, 62, 69, 189, 166, 190, 19, 36, 198, 62, 54, 150, 21, 190, 16, 59, 4, 190, 187, 48, 113, 189, 154, 182, 73, 190, 138, 65, 77, 188, 240, 161, 63, 62, 48, 91, 1, 190, 13, 24, 152, 190, 100, 54, 101, 189, 30, 206, 27, 62, 109, 126, 70, 62, 145, 227, 150, 190, 157, 95, 67, 190, 75, 239, 190, 61, 147, 108, 98, 62, 122, 95, 13, 62, 254, 222, 77, 189, 109, 134, 167, 61, 177, 65, 27, 189, 71, 63, 127, 62, 161, 150, 213, 62, 185, 225, 54, 62, 33, 192, 128, 190, 218, 140, 155, 189, 100, 161, 122, 59, 225, 174, 10, 63, 157, 120, 75, 191, 125, 157, 221, 190, 208, 224, 45, 189, 176, 202, 141, 60, 155, 85, 145, 62, 156, 175, 218, 61, 201, 15, 116, 188, 140, 129, 192, 190, 106, 52, 147, 61, 6, 101, 214, 189, 185, 174, 105, 62, 48, 102, 111, 62, 166, 156, 152, 61, 49, 7, 165, 189, 36, 185, 125, 62, 135, 156, 156, 190, 127, 66, 157, 62, 117, 139, 82, 62, 86, 232, 98, 61, 6, 114, 25, 62, 44, 164, 71, 62, 222, 148, 248, 189, 32, 185, 62, 189, 248, 91, 162, 62, 93, 119, 221, 187, 117, 35, 74, 60, 35, 119, 212, 189, 24, 138, 76, 62, 20, 128, 192, 61, 209, 214, 116, 61, 77, 176, 131, 189, 196, 22, 167, 189, 1, 71, 63, 191, 84, 254, 242, 189, 162, 131, 56, 62, 81, 103, 36, 189, 83, 36, 161, 61, 146, 233, 244, 61, 209, 97, 153, 190, 197, 86, 154, 190, 232, 251, 120, 189, 96, 166, 160, 190, 212, 181, 157, 62, 33, 6, 226, 62, 45, 24, 203, 62, 52, 183, 138, 189, 52, 135, 147, 61, 179, 167, 145, 190, 117, 148, 200, 62, 138, 6, 146, 62, 159, 188, 72, 61, 35, 37, 46, 62, 102, 2, 55, 62, 222, 79, 67, 190, 6, 41, 44, 190, 39, 34, 209, 62, 40, 231, 204, 190, 111, 37, 78, 62, 44, 51, 60, 62, 163, 181, 21, 62, 112, 110, 26, 188, 62, 100, 41, 190, 35, 165, 118, 190, 109, 224, 109, 190, 30, 104, 23, 191, 26, 208, 171, 190, 93, 237, 238, 60, 38, 174, 233, 188, 178, 166, 44, 62, 35, 76, 38, 61, 226, 29, 130, 60, 113, 224, 102, 190, 107, 129, 20, 187, 63, 81, 165, 60, 63, 173, 2, 62, 113, 10, 102, 62, 211, 30, 42, 62, 73, 216, 63, 190, 33, 19, 189, 61, 216, 84, 135, 190, 221, 216, 178, 62, 204, 219, 116, 62, 12, 203, 125, 188, 37, 228, 86, 62, 100, 70, 214, 61, 185, 240, 53, 190, 206, 67, 90, 189, 4, 223, 116, 62, 165, 199, 43, 61, 197, 44, 74, 61, 129, 166, 24, 189, 232, 162, 153, 62, 243, 128, 138, 188, 150, 238, 26, 190, 75, 231, 39, 190, 214, 147, 202, 60, 136, 101, 63, 191, 72, 103, 135, 190, 92, 162, 41, 62, 236, 222, 184, 189, 248, 102, 65, 190, 92, 216, 101, 62, 26, 86, 239, 189, 42, 214, 196, 189, 197, 164, 132, 188, 233, 157, 144, 189, 220, 144, 128, 61, 74, 58, 165, 62, 146, 196, 42, 60, 112, 93, 206, 190, 34, 97, 96, 189, 88, 249, 80, 60, 125, 210, 102, 62, 106, 214, 213, 189, 107, 220, 187, 190, 229, 10, 132, 61, 42, 205, 237, 189, 188, 218, 212, 61, 208, 127, 204, 61, 232, 108, 22, 190, 134, 115, 215, 59, 185, 57, 92, 61, 119, 204, 239, 62, 18, 223, 231, 61, 172, 68, 6, 191, 99, 131, 107, 189, 134, 155, 30, 190, 124, 76, 170, 62, 211, 3, 200, 190, 109, 203, 210, 190, 38, 127, 82, 61, 238, 152, 6, 61, 163, 2, 57, 62, 167, 169, 24, 190, 20, 86, 4, 61, 143, 117, 92, 190, 147, 187, 19, 62, 154, 189, 191, 61, 236, 224, 43, 61, 224, 104, 100, 61, 136, 240, 70, 189, 35, 226, 20, 62, 103, 56, 123, 62, 90, 9, 168, 190, 117, 129, 70, 62, 94, 118, 5, 62, 92, 137, 7, 61, 90, 82, 84, 61, 75, 10, 92, 62, 70, 31, 215, 189, 128, 201, 221, 61, 195, 170, 240, 62, 88, 80, 18, 62, 237, 118, 171, 61, 218, 22, 105, 62, 17, 179, 19, 62, 228, 208, 131, 62, 56, 236, 84, 190, 233, 197, 72, 61, 43, 1, 189, 60, 61, 49, 20, 191, 177, 212, 108, 190, 62, 197, 243, 190, 200, 24, 62, 190, 154, 215, 36, 190, 75, 140, 59, 189, 82, 184, 162, 62, 189, 61, 55, 62, 55, 64, 34, 62, 246, 220, 152, 62, 38, 197, 248, 190, 187, 226, 139, 190, 93, 167, 96, 191, 66, 249, 175, 60, 14, 86, 4, 190, 137, 105, 29, 62, 93, 25, 218, 190, 107, 83, 11, 62, 251, 238, 89, 189, 54, 149, 92, 191, 144, 74, 117, 190, 166, 81, 212, 61, 107, 72, 68, 188, 169, 148, 119, 190, 246, 4, 104, 61, 98, 76, 117, 190, 202, 107, 225, 62, 151, 82, 156, 61, 217, 189, 39, 61, 13, 24, 49, 61, 95, 93, 3, 190, 167, 121, 131, 190, 207, 67, 158, 61, 147, 4, 46, 62, 183, 204, 100, 190, 144, 77, 16, 61, 14, 74, 155, 190, 152, 85, 4, 190, 79, 73, 208, 60, 228, 108, 171, 62, 64, 116, 35, 190, 170, 162, 164, 188, 152, 116, 187, 190, 60, 193, 232, 189, 96, 214, 187, 186, 35, 193, 9, 62, 226, 57, 187, 189, 112, 10, 140, 62, 153, 86, 224, 190, 15, 200, 153, 189, 54, 21, 153, 61, 184, 206, 147, 61, 109, 172, 7, 190, 244, 171, 107, 62, 72, 169, 45, 190, 199, 215, 10, 191, 196, 162, 215, 188, 91, 237, 240, 60, 214, 242, 138, 61, 198, 96, 121, 190, 20, 221, 133, 62, 144, 224, 165, 61, 52, 104, 104, 62, 111, 82, 251, 60, 133, 248, 193, 62, 213, 128, 30, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 207, 65, 190, 210, 73, 28, 190, 84, 100, 116, 62, 252, 213, 192, 61, 130, 100, 38, 189, 165, 135, 233, 61, 246, 254, 242, 189, 90, 112, 165, 62, 47, 90, 115, 62, 57, 184, 36, 62, 36, 188, 235, 189, 127, 196, 134, 62, 193, 84, 80, 62, 21, 168, 232, 61, 98, 6, 84, 62, 62, 255, 17, 188, 120, 102, 54, 62, 198, 204, 17, 62, 242, 150, 61, 62, 238, 64, 26, 61, 208, 57, 221, 189, 141, 214, 115, 188, 177, 177, 147, 60, 78, 214, 134, 61, 86, 118, 247, 189, 12, 43, 238, 60, 191, 58, 82, 62, 151, 143, 139, 62, 77, 149, 112, 190, 117, 249, 26, 62, 5, 151, 28, 61, 166, 133, 12, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 135, 246, 62, 102, 86, 101, 62, 254, 188, 73, 63, 113, 231, 32, 63, 4, 2, 192, 190, 129, 147, 67, 63, 69, 211, 93, 62, 215, 71, 104, 190, 102, 65, 91, 191, 122, 179, 100, 62, 97, 15, 41, 185, 95, 146, 39, 189, 212, 24, 167, 190, 5, 241, 248, 59, 33, 150, 172, 62, 35, 218, 161, 63, 159, 142, 173, 62, 225, 166, 222, 61, 100, 153, 178, 62, 75, 79, 6, 191, 224, 242, 172, 61, 161, 153, 30, 62, 113, 36, 240, 61, 161, 146, 157, 62, 196, 81, 223, 190, 41, 82, 43, 190, 141, 63, 0, 191, 45, 212, 74, 190, 30, 116, 189, 62, 47, 235, 7, 190, 91, 22, 33, 63, 13, 83, 159, 62, 55, 185, 207, 61, 232, 24, 237, 61, 150, 147, 82, 62, 177, 220, 174, 62, 63, 76, 155, 190, 252, 155, 38, 62, 243, 255, 36, 189, 224, 239, 91, 190, 102, 50, 89, 189, 220, 121, 16, 62, 39, 122, 252, 61, 108, 8, 255, 189, 3, 89, 150, 188, 144, 84, 252, 61, 163, 71, 46, 190, 65, 91, 190, 60, 53, 207, 234, 61, 139, 67, 87, 190, 138, 226, 113, 189, 206, 225, 154, 62, 220, 197, 210, 61, 172, 108, 126, 61, 250, 197, 64, 189, 148, 143, 115, 190, 31, 222, 184, 62, 89, 12, 100, 59, 63, 216, 148, 62, 19, 178, 161, 61, 167, 133, 158, 62, 105, 36, 72, 190, 253, 95, 65, 62, 171, 237, 27, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 4, 177, 189, 184, 183, 178, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {241, 204, 39, 63, 201, 20, 155, 62, 135, 213, 206, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {10, 194, 206, 191, 165, 81, 152, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0012/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}