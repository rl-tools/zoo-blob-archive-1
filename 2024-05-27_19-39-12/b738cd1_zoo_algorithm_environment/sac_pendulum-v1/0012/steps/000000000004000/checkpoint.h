// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 99, 128, 62, 243, 57, 214, 62, 178, 137, 41, 63, 186, 62, 239, 62, 16, 15, 77, 190, 241, 241, 199, 62, 121, 166, 248, 190, 98, 148, 70, 63, 2, 184, 150, 61, 78, 19, 13, 63, 236, 96, 75, 63, 102, 60, 170, 61, 34, 181, 246, 190, 130, 204, 157, 63, 216, 117, 121, 62, 184, 219, 248, 62, 158, 219, 5, 63, 0, 254, 42, 191, 86, 247, 206, 62, 38, 255, 179, 190, 74, 65, 143, 58, 131, 137, 37, 191, 245, 59, 214, 62, 194, 68, 31, 63, 82, 31, 31, 190, 64, 131, 30, 62, 222, 250, 38, 191, 250, 99, 30, 63, 152, 86, 134, 63, 3, 24, 85, 62, 230, 21, 81, 189, 90, 218, 234, 190, 100, 54, 244, 62, 239, 47, 185, 62, 150, 106, 50, 191, 4, 201, 218, 189, 71, 38, 56, 62, 13, 166, 227, 62, 165, 100, 31, 191, 247, 109, 172, 61, 186, 20, 35, 62, 222, 21, 20, 191, 214, 218, 15, 63, 25, 154, 101, 63, 109, 99, 99, 62, 159, 60, 143, 190, 172, 170, 144, 189, 182, 146, 225, 190, 19, 188, 62, 188, 153, 201, 208, 190, 181, 244, 78, 190, 113, 229, 143, 62, 44, 68, 180, 189, 59, 244, 54, 63, 191, 208, 98, 62, 59, 193, 50, 63, 226, 188, 91, 191, 146, 22, 1, 61, 239, 169, 6, 63, 198, 195, 29, 191, 9, 88, 225, 61, 201, 98, 76, 62, 55, 26, 20, 63, 40, 181, 177, 190, 53, 213, 176, 62, 43, 68, 250, 190, 199, 13, 240, 61, 221, 126, 235, 189, 91, 205, 37, 63, 170, 1, 234, 62, 219, 143, 86, 62, 67, 122, 5, 63, 130, 254, 120, 63, 134, 250, 37, 62, 26, 250, 222, 61, 7, 137, 159, 190, 206, 101, 117, 63, 65, 75, 248, 190, 227, 245, 41, 190, 158, 98, 213, 190, 236, 48, 58, 58, 20, 4, 61, 62, 60, 87, 144, 62, 84, 16, 101, 62, 120, 214, 202, 190, 128, 75, 21, 191, 209, 204, 58, 63, 222, 173, 39, 63, 170, 207, 138, 190, 250, 119, 82, 62, 66, 75, 194, 62, 72, 139, 90, 191, 125, 193, 143, 190, 185, 119, 130, 62, 30, 11, 39, 191, 39, 167, 188, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 231, 207, 190, 90, 139, 236, 62, 157, 55, 44, 63, 242, 114, 182, 62, 225, 63, 36, 62, 232, 176, 23, 62, 101, 192, 19, 191, 189, 209, 59, 61, 125, 152, 25, 190, 197, 213, 71, 190, 77, 239, 23, 60, 2, 118, 187, 62, 152, 141, 35, 62, 14, 128, 203, 190, 16, 249, 51, 190, 58, 31, 231, 62, 178, 118, 217, 62, 254, 253, 78, 61, 15, 137, 90, 62, 11, 215, 84, 190, 105, 208, 234, 62, 15, 105, 204, 190, 24, 183, 50, 63, 68, 143, 196, 60, 0, 237, 181, 188, 80, 107, 18, 62, 110, 46, 61, 63, 229, 155, 197, 62, 236, 215, 16, 190, 160, 142, 199, 190, 95, 89, 39, 190, 57, 113, 61, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {126, 11, 230, 189, 207, 104, 90, 59, 114, 127, 191, 189, 205, 193, 71, 62, 83, 100, 129, 61, 42, 178, 5, 190, 225, 97, 38, 190, 138, 179, 162, 189, 226, 114, 17, 62, 145, 110, 20, 62, 126, 53, 22, 62, 60, 72, 84, 190, 35, 57, 26, 61, 161, 140, 195, 189, 154, 96, 116, 62, 172, 3, 130, 61, 188, 82, 1, 190, 207, 179, 233, 61, 195, 246, 89, 59, 33, 181, 197, 189, 170, 3, 177, 189, 173, 187, 30, 190, 2, 40, 66, 189, 82, 252, 136, 61, 4, 235, 85, 62, 185, 2, 158, 190, 2, 211, 215, 190, 78, 24, 214, 60, 152, 42, 180, 189, 48, 13, 163, 189, 109, 194, 25, 189, 186, 85, 201, 189, 41, 201, 1, 190, 134, 10, 65, 61, 125, 49, 213, 59, 116, 233, 109, 62, 150, 5, 146, 62, 239, 93, 127, 62, 191, 68, 132, 189, 153, 243, 5, 190, 194, 12, 61, 62, 58, 72, 200, 61, 57, 48, 144, 190, 208, 245, 251, 189, 134, 116, 150, 62, 51, 45, 19, 62, 65, 34, 2, 61, 163, 211, 6, 62, 186, 193, 8, 190, 176, 119, 219, 59, 157, 37, 26, 62, 147, 37, 91, 62, 182, 130, 63, 189, 220, 181, 221, 60, 35, 227, 252, 189, 123, 227, 186, 61, 121, 0, 117, 61, 185, 103, 106, 62, 180, 179, 60, 190, 11, 28, 238, 188, 248, 84, 163, 190, 77, 100, 66, 190, 218, 29, 114, 62, 147, 35, 170, 61, 27, 54, 174, 190, 154, 14, 170, 189, 233, 155, 212, 189, 60, 89, 162, 61, 29, 180, 83, 62, 186, 47, 167, 62, 12, 110, 6, 190, 162, 245, 134, 62, 7, 19, 37, 191, 207, 44, 41, 191, 130, 110, 116, 188, 69, 52, 183, 62, 17, 73, 176, 190, 166, 24, 133, 189, 197, 208, 238, 190, 43, 40, 242, 189, 240, 14, 248, 189, 207, 107, 208, 189, 94, 18, 199, 190, 248, 2, 123, 189, 45, 150, 184, 60, 220, 9, 32, 191, 236, 109, 247, 61, 189, 98, 145, 189, 57, 53, 157, 62, 242, 35, 2, 189, 16, 175, 128, 62, 194, 206, 90, 61, 245, 22, 112, 62, 7, 241, 157, 189, 85, 88, 65, 62, 155, 21, 19, 61, 198, 40, 145, 61, 192, 131, 118, 62, 26, 61, 14, 191, 82, 77, 24, 190, 238, 11, 160, 190, 16, 49, 173, 61, 72, 89, 0, 62, 158, 241, 8, 62, 235, 40, 16, 61, 171, 181, 167, 189, 238, 139, 147, 189, 131, 118, 153, 62, 222, 145, 220, 189, 73, 241, 134, 61, 5, 131, 159, 190, 201, 153, 87, 189, 62, 24, 208, 61, 208, 245, 18, 62, 107, 27, 192, 61, 233, 66, 250, 61, 248, 48, 25, 189, 90, 81, 162, 190, 62, 152, 143, 189, 148, 190, 7, 190, 123, 133, 104, 189, 128, 9, 60, 190, 33, 205, 250, 189, 134, 175, 33, 59, 168, 160, 42, 62, 19, 10, 157, 62, 187, 214, 155, 62, 238, 160, 73, 62, 51, 79, 27, 189, 171, 94, 144, 61, 194, 63, 34, 190, 183, 162, 199, 62, 210, 191, 216, 190, 187, 196, 64, 62, 128, 236, 199, 61, 145, 122, 202, 190, 245, 250, 30, 190, 200, 224, 49, 62, 197, 61, 68, 190, 198, 234, 77, 59, 195, 242, 188, 60, 241, 227, 71, 62, 181, 138, 138, 62, 199, 52, 49, 190, 115, 48, 3, 190, 159, 254, 135, 61, 115, 8, 168, 61, 222, 30, 199, 60, 4, 42, 92, 189, 80, 130, 14, 190, 218, 36, 33, 62, 219, 0, 109, 188, 20, 55, 148, 62, 244, 193, 152, 61, 38, 70, 10, 190, 93, 250, 118, 62, 78, 189, 149, 190, 66, 63, 112, 62, 224, 216, 133, 190, 155, 67, 181, 59, 134, 248, 152, 190, 121, 236, 16, 190, 18, 190, 140, 62, 185, 76, 19, 190, 208, 222, 236, 61, 230, 85, 244, 189, 170, 127, 34, 190, 233, 180, 175, 62, 176, 68, 64, 191, 165, 209, 153, 190, 244, 147, 1, 190, 51, 14, 20, 190, 96, 112, 248, 190, 14, 113, 43, 190, 163, 47, 166, 190, 252, 82, 84, 189, 86, 76, 210, 59, 84, 231, 244, 189, 111, 60, 50, 191, 143, 229, 171, 59, 220, 102, 43, 189, 143, 237, 109, 191, 89, 84, 137, 62, 110, 69, 151, 190, 15, 19, 210, 61, 172, 218, 192, 189, 220, 238, 202, 61, 186, 175, 159, 61, 116, 249, 211, 61, 239, 207, 103, 190, 78, 73, 190, 189, 170, 51, 158, 189, 75, 174, 203, 187, 1, 159, 39, 61, 108, 28, 193, 189, 217, 129, 25, 189, 26, 204, 34, 62, 238, 237, 17, 62, 26, 237, 223, 61, 136, 84, 16, 189, 81, 214, 104, 190, 145, 254, 19, 190, 249, 77, 115, 190, 168, 12, 31, 62, 7, 229, 226, 189, 25, 240, 114, 62, 200, 203, 35, 189, 214, 158, 15, 62, 109, 91, 179, 61, 101, 5, 13, 190, 3, 140, 157, 189, 215, 58, 153, 62, 251, 248, 144, 189, 1, 67, 184, 190, 224, 210, 109, 62, 40, 41, 11, 61, 191, 21, 170, 62, 85, 15, 108, 190, 48, 125, 105, 62, 85, 40, 54, 62, 92, 48, 105, 62, 178, 84, 249, 61, 104, 135, 138, 62, 228, 35, 49, 189, 152, 21, 195, 61, 83, 212, 194, 188, 61, 55, 43, 62, 178, 224, 237, 188, 184, 202, 32, 190, 195, 11, 161, 61, 190, 26, 69, 188, 17, 89, 91, 61, 70, 59, 21, 60, 75, 70, 129, 62, 59, 172, 43, 190, 234, 172, 214, 62, 209, 242, 67, 62, 55, 61, 20, 190, 51, 180, 169, 189, 40, 239, 64, 61, 104, 38, 180, 61, 72, 82, 215, 61, 139, 31, 32, 62, 209, 225, 180, 61, 69, 64, 255, 61, 221, 102, 137, 189, 179, 71, 57, 61, 219, 56, 7, 62, 203, 185, 88, 188, 110, 39, 142, 188, 52, 104, 88, 62, 168, 5, 45, 190, 41, 65, 61, 190, 75, 217, 123, 188, 85, 247, 74, 190, 28, 132, 169, 61, 219, 32, 82, 189, 98, 147, 116, 62, 90, 82, 128, 62, 0, 252, 92, 62, 142, 161, 212, 190, 199, 35, 205, 190, 127, 96, 221, 61, 108, 16, 253, 190, 229, 7, 85, 189, 83, 120, 127, 62, 163, 142, 85, 61, 179, 120, 76, 190, 38, 51, 43, 62, 202, 116, 38, 190, 254, 236, 157, 62, 105, 224, 127, 62, 28, 200, 221, 189, 151, 45, 238, 61, 3, 124, 78, 61, 170, 16, 3, 188, 62, 22, 160, 190, 85, 57, 142, 62, 27, 144, 144, 189, 95, 160, 160, 62, 220, 159, 94, 62, 82, 164, 31, 62, 70, 25, 111, 62, 222, 75, 42, 187, 126, 231, 67, 191, 72, 222, 226, 62, 204, 69, 197, 190, 134, 225, 115, 189, 59, 20, 224, 60, 209, 29, 2, 61, 94, 15, 139, 190, 202, 15, 65, 189, 145, 138, 38, 62, 187, 99, 230, 61, 245, 249, 178, 61, 11, 87, 36, 62, 203, 175, 152, 190, 254, 87, 180, 190, 213, 242, 52, 190, 206, 200, 229, 188, 88, 142, 1, 61, 229, 134, 176, 61, 71, 207, 26, 190, 70, 158, 162, 61, 186, 96, 28, 62, 4, 131, 155, 61, 176, 143, 209, 189, 250, 84, 213, 61, 243, 9, 27, 61, 75, 81, 127, 190, 83, 24, 25, 61, 128, 25, 202, 61, 161, 172, 133, 62, 97, 56, 149, 60, 175, 141, 144, 189, 13, 195, 168, 188, 237, 28, 197, 61, 15, 252, 75, 62, 114, 203, 209, 62, 120, 227, 162, 61, 179, 155, 189, 59, 214, 106, 201, 60, 37, 217, 136, 60, 141, 197, 232, 189, 247, 133, 242, 61, 49, 189, 57, 190, 38, 109, 7, 62, 20, 150, 228, 188, 118, 115, 13, 61, 165, 157, 178, 59, 243, 106, 162, 61, 37, 189, 243, 188, 25, 232, 35, 190, 102, 63, 43, 190, 13, 68, 153, 189, 241, 54, 164, 61, 166, 34, 150, 60, 162, 189, 26, 190, 137, 20, 8, 62, 136, 111, 232, 61, 209, 51, 6, 62, 11, 186, 222, 59, 234, 74, 94, 61, 187, 41, 38, 189, 222, 253, 45, 190, 161, 187, 87, 189, 127, 47, 80, 190, 66, 120, 2, 190, 201, 142, 179, 189, 227, 57, 126, 61, 228, 39, 26, 62, 121, 224, 155, 188, 110, 66, 175, 60, 225, 210, 48, 62, 137, 250, 27, 62, 65, 242, 253, 188, 162, 239, 152, 61, 27, 189, 21, 61, 206, 205, 134, 189, 16, 244, 57, 189, 185, 21, 142, 189, 119, 47, 230, 61, 174, 36, 199, 61, 195, 101, 4, 62, 28, 31, 10, 62, 160, 32, 106, 190, 251, 30, 62, 61, 34, 117, 171, 187, 174, 183, 114, 62, 131, 15, 181, 60, 192, 235, 55, 62, 171, 148, 78, 189, 193, 101, 232, 189, 243, 45, 66, 189, 37, 119, 223, 61, 246, 0, 239, 189, 221, 226, 96, 62, 109, 69, 93, 61, 167, 17, 106, 62, 81, 192, 218, 60, 97, 64, 182, 60, 15, 4, 78, 189, 180, 171, 143, 190, 0, 204, 10, 62, 106, 136, 224, 61, 72, 122, 208, 187, 30, 132, 209, 60, 168, 83, 59, 62, 156, 29, 20, 190, 211, 35, 19, 190, 172, 255, 196, 189, 227, 129, 234, 189, 218, 169, 47, 188, 22, 56, 86, 62, 171, 84, 58, 189, 75, 65, 67, 62, 57, 140, 13, 62, 59, 252, 156, 188, 75, 116, 147, 60, 255, 164, 48, 62, 234, 91, 132, 60, 66, 135, 147, 62, 148, 9, 70, 62, 89, 205, 151, 189, 215, 173, 72, 190, 88, 38, 128, 61, 109, 124, 205, 189, 48, 129, 111, 61, 41, 171, 132, 62, 14, 138, 134, 62, 153, 31, 181, 189, 117, 147, 92, 190, 47, 183, 220, 190, 211, 165, 95, 62, 160, 83, 139, 190, 193, 206, 129, 190, 181, 70, 227, 189, 52, 171, 27, 190, 122, 69, 35, 190, 162, 146, 186, 188, 40, 90, 9, 190, 249, 190, 160, 61, 239, 20, 68, 189, 64, 81, 219, 61, 234, 148, 53, 189, 103, 59, 229, 61, 176, 18, 106, 61, 154, 141, 226, 189, 38, 6, 6, 190, 137, 126, 198, 189, 45, 25, 32, 189, 90, 16, 253, 61, 97, 53, 80, 190, 165, 18, 26, 62, 61, 174, 71, 190, 228, 2, 149, 189, 169, 87, 100, 189, 244, 186, 58, 190, 190, 159, 4, 189, 19, 115, 0, 61, 46, 91, 26, 188, 34, 70, 153, 189, 79, 249, 254, 188, 234, 171, 129, 61, 70, 225, 122, 189, 201, 189, 153, 189, 228, 249, 234, 189, 110, 186, 183, 61, 129, 138, 161, 189, 172, 130, 53, 62, 142, 11, 236, 190, 174, 206, 230, 59, 235, 76, 213, 189, 86, 211, 133, 61, 155, 97, 157, 189, 72, 198, 210, 189, 40, 68, 228, 189, 225, 24, 138, 190, 40, 47, 17, 62, 157, 143, 198, 62, 191, 79, 53, 62, 72, 35, 228, 61, 68, 146, 53, 190, 204, 36, 7, 190, 145, 151, 47, 62, 138, 121, 247, 60, 207, 164, 167, 189, 55, 47, 24, 190, 141, 128, 7, 190, 81, 61, 151, 189, 147, 10, 185, 60, 184, 15, 16, 190, 48, 146, 182, 62, 243, 110, 113, 189, 222, 26, 199, 189, 216, 177, 153, 61, 172, 49, 11, 190, 183, 147, 79, 188, 5, 220, 119, 62, 183, 192, 194, 61, 147, 136, 26, 61, 12, 152, 135, 190, 58, 149, 163, 62, 47, 185, 219, 61, 69, 120, 135, 62, 208, 64, 13, 189, 242, 219, 46, 190, 211, 225, 127, 62, 75, 78, 143, 191, 121, 106, 97, 190, 206, 77, 2, 190, 56, 209, 5, 191, 25, 19, 108, 191, 122, 231, 163, 189, 64, 99, 136, 190, 78, 251, 116, 62, 98, 190, 254, 60, 140, 143, 113, 190, 161, 35, 107, 191, 3, 139, 172, 189, 188, 184, 29, 62, 191, 106, 110, 191, 214, 52, 58, 190, 143, 0, 240, 189, 123, 72, 124, 190, 109, 248, 243, 61, 163, 148, 165, 60, 10, 169, 225, 189, 20, 124, 46, 189, 157, 243, 18, 190, 32, 179, 149, 190, 53, 251, 173, 190, 28, 233, 86, 190, 172, 18, 228, 189, 253, 154, 124, 190, 37, 55, 183, 61, 65, 144, 119, 62, 34, 108, 59, 62, 218, 15, 24, 190, 138, 179, 226, 61, 54, 208, 68, 190, 85, 197, 163, 190, 22, 212, 24, 190, 25, 251, 115, 62, 97, 96, 126, 189, 16, 96, 149, 62, 169, 118, 68, 190, 253, 82, 185, 61, 243, 45, 37, 188, 1, 12, 151, 190, 254, 113, 95, 190, 190, 234, 85, 62, 194, 234, 125, 62, 4, 60, 178, 190, 9, 70, 220, 60, 53, 59, 179, 188, 147, 31, 104, 61, 148, 63, 46, 190, 212, 133, 253, 61, 232, 116, 90, 62, 213, 1, 98, 62, 164, 248, 50, 62, 104, 64, 189, 62, 28, 186, 27, 61, 108, 51, 20, 190, 234, 16, 154, 189, 234, 194, 54, 61, 228, 229, 141, 61, 224, 16, 137, 61, 110, 34, 147, 62, 250, 153, 23, 190, 142, 101, 156, 61, 109, 114, 234, 190, 172, 182, 113, 190, 78, 3, 59, 61, 81, 237, 192, 61, 233, 35, 217, 189, 109, 106, 205, 188, 253, 169, 66, 189, 75, 131, 154, 189, 238, 152, 170, 59, 7, 75, 151, 189, 245, 121, 161, 189, 87, 152, 225, 188, 252, 50, 244, 61, 250, 33, 243, 190, 145, 91, 82, 189, 149, 82, 49, 189, 200, 135, 23, 62, 23, 160, 138, 189, 254, 204, 232, 61, 210, 162, 43, 188, 238, 179, 181, 61, 9, 180, 43, 62, 172, 143, 10, 190, 34, 65, 136, 190, 14, 91, 128, 190, 78, 88, 8, 61, 20, 77, 172, 190, 103, 59, 1, 189, 227, 100, 14, 189, 56, 144, 176, 61, 178, 67, 191, 189, 12, 236, 109, 62, 88, 192, 238, 189, 110, 183, 198, 190, 101, 241, 176, 189, 8, 180, 65, 61, 218, 249, 144, 187, 94, 205, 234, 187, 248, 77, 22, 191, 210, 232, 183, 189, 96, 35, 147, 61, 164, 217, 140, 190, 203, 188, 28, 61, 81, 121, 46, 62, 215, 84, 78, 62, 21, 12, 250, 189, 77, 9, 204, 62, 49, 3, 134, 61, 154, 187, 164, 62, 48, 248, 19, 190, 84, 207, 173, 61, 249, 93, 62, 61, 121, 195, 125, 61, 195, 96, 3, 60, 182, 38, 213, 61, 231, 92, 194, 61, 122, 116, 165, 61, 221, 108, 200, 61, 134, 7, 134, 61, 80, 248, 165, 189, 207, 239, 132, 189, 143, 120, 110, 190, 235, 162, 38, 62, 102, 213, 78, 190, 247, 211, 86, 62, 74, 129, 55, 62, 201, 110, 1, 62, 149, 129, 15, 62, 103, 48, 0, 62, 132, 17, 134, 190, 140, 234, 110, 62, 120, 79, 184, 61, 47, 188, 26, 189, 3, 40, 255, 61, 2, 204, 25, 62, 165, 111, 133, 188, 123, 233, 88, 190, 13, 183, 203, 61, 123, 56, 163, 188, 206, 199, 112, 61, 253, 95, 219, 188, 162, 111, 212, 60, 250, 97, 239, 61, 186, 8, 154, 61, 112, 101, 196, 190, 40, 121, 18, 62, 135, 245, 220, 190, 171, 31, 227, 189, 120, 36, 64, 188, 224, 206, 76, 190, 189, 68, 192, 60, 76, 89, 138, 60, 101, 70, 183, 59, 191, 157, 7, 62, 174, 71, 156, 61, 31, 204, 48, 190, 125, 79, 253, 189, 69, 46, 37, 189, 153, 222, 4, 189, 101, 246, 65, 189, 183, 116, 142, 61, 69, 144, 4, 190, 19, 19, 153, 60, 107, 190, 197, 189, 103, 97, 177, 60, 251, 146, 31, 190, 191, 113, 44, 188, 55, 85, 187, 61, 190, 122, 208, 189, 130, 183, 25, 189, 98, 236, 11, 60, 189, 248, 172, 61, 136, 133, 50, 189, 82, 182, 141, 189, 36, 110, 42, 189, 63, 67, 3, 61, 139, 21, 95, 189, 93, 86, 205, 188, 12, 112, 13, 62, 122, 65, 232, 189, 228, 237, 161, 60, 178, 95, 21, 190, 4, 118, 108, 190, 218, 6, 165, 189, 40, 209, 5, 63, 219, 212, 57, 62, 205, 182, 134, 189, 122, 85, 69, 189, 239, 123, 169, 61, 122, 74, 168, 190, 155, 180, 65, 190, 103, 18, 45, 61, 199, 202, 127, 61, 62, 46, 85, 60, 100, 169, 34, 190, 75, 160, 73, 62, 150, 134, 26, 62, 172, 18, 177, 61, 114, 32, 0, 62, 205, 9, 132, 62, 117, 219, 108, 62, 4, 148, 1, 61, 82, 131, 47, 190, 186, 118, 106, 190, 5, 152, 112, 190, 195, 8, 12, 62, 193, 250, 62, 190, 101, 34, 135, 62, 95, 183, 205, 60, 182, 242, 188, 61, 215, 33, 28, 189, 68, 51, 139, 189, 247, 68, 153, 61, 189, 252, 22, 189, 249, 62, 137, 190, 137, 166, 1, 62, 39, 119, 86, 188, 21, 168, 77, 62, 150, 13, 7, 190, 219, 8, 42, 62, 228, 194, 36, 59, 93, 11, 84, 190, 148, 213, 132, 190, 204, 114, 215, 61, 145, 16, 68, 190, 137, 26, 89, 189, 212, 74, 11, 190, 53, 83, 154, 61, 238, 164, 149, 187, 43, 46, 52, 189, 79, 86, 171, 189, 231, 133, 210, 60, 190, 67, 57, 60, 117, 112, 45, 190, 157, 19, 177, 61, 92, 223, 54, 188, 122, 123, 178, 62, 201, 86, 136, 61, 107, 95, 243, 61, 152, 37, 145, 61, 237, 56, 77, 62, 30, 122, 216, 61, 137, 89, 176, 62, 175, 123, 199, 189, 94, 33, 138, 190, 99, 190, 182, 61, 2, 3, 79, 189, 171, 73, 128, 62, 219, 202, 154, 188, 209, 2, 128, 62, 162, 51, 139, 189, 21, 44, 153, 61, 210, 229, 226, 190, 203, 233, 35, 190, 200, 3, 202, 60, 62, 12, 3, 62, 14, 184, 243, 190, 108, 20, 140, 61, 236, 244, 125, 190, 13, 184, 10, 62, 123, 69, 1, 62, 239, 51, 79, 189, 175, 54, 162, 190, 240, 5, 247, 187, 211, 32, 65, 62, 70, 71, 238, 190, 156, 19, 116, 189, 29, 21, 13, 62, 87, 97, 24, 63, 63, 28, 157, 61, 213, 189, 240, 61, 182, 175, 226, 61, 69, 216, 8, 62, 218, 184, 58, 62, 93, 222, 191, 62, 154, 214, 159, 188, 117, 142, 100, 62, 34, 59, 38, 62, 149, 77, 123, 190, 136, 246, 25, 62, 205, 85, 60, 60, 251, 31, 108, 190, 187, 48, 113, 189, 239, 226, 240, 189, 11, 74, 146, 61, 68, 63, 160, 61, 102, 74, 129, 189, 80, 9, 235, 189, 60, 202, 227, 189, 62, 68, 15, 62, 104, 131, 146, 189, 248, 155, 87, 190, 18, 100, 74, 61, 217, 118, 205, 61, 37, 164, 236, 61, 198, 100, 230, 60, 224, 246, 74, 189, 188, 111, 204, 61, 129, 159, 141, 188, 9, 21, 70, 62, 166, 203, 51, 62, 0, 104, 181, 189, 70, 4, 246, 189, 233, 116, 14, 190, 144, 59, 76, 61, 10, 151, 135, 62, 229, 215, 177, 190, 154, 178, 9, 190, 228, 63, 123, 189, 235, 203, 131, 61, 136, 205, 128, 62, 216, 1, 103, 61, 53, 83, 57, 61, 152, 94, 207, 190, 106, 52, 147, 61, 186, 116, 190, 189, 146, 201, 1, 62, 88, 138, 113, 62, 214, 109, 62, 61, 162, 127, 75, 188, 162, 40, 110, 62, 85, 123, 170, 190, 103, 249, 126, 62, 9, 246, 8, 62, 110, 7, 207, 61, 5, 136, 39, 62, 161, 11, 45, 62, 44, 141, 52, 190, 71, 157, 146, 188, 124, 168, 185, 62, 126, 141, 122, 60, 227, 50, 15, 61, 169, 199, 50, 189, 240, 75, 243, 61, 28, 200, 177, 61, 20, 73, 166, 61, 21, 178, 177, 189, 138, 27, 67, 190, 163, 178, 20, 191, 163, 226, 19, 189, 232, 14, 90, 62, 19, 105, 186, 60, 163, 254, 135, 61, 17, 249, 253, 59, 83, 40, 4, 189, 219, 242, 179, 190, 232, 251, 120, 189, 224, 58, 207, 189, 104, 67, 132, 62, 244, 241, 151, 62, 66, 62, 122, 60, 146, 166, 100, 189, 166, 224, 115, 61, 31, 124, 176, 190, 255, 131, 157, 62, 54, 9, 106, 62, 192, 34, 75, 58, 188, 224, 79, 62, 139, 27, 30, 62, 39, 230, 137, 190, 238, 140, 134, 189, 143, 211, 240, 62, 158, 228, 183, 190, 4, 178, 133, 62, 36, 106, 83, 62, 233, 87, 17, 62, 196, 0, 172, 189, 37, 241, 175, 189, 252, 150, 169, 190, 169, 104, 38, 190, 180, 45, 196, 190, 156, 21, 59, 190, 159, 249, 193, 60, 11, 38, 138, 188, 55, 167, 36, 62, 29, 14, 207, 189, 223, 183, 178, 61, 254, 241, 106, 190, 107, 129, 20, 187, 121, 86, 46, 61, 168, 186, 196, 61, 183, 186, 55, 62, 201, 167, 20, 62, 16, 60, 0, 190, 156, 64, 10, 62, 39, 101, 79, 190, 252, 189, 120, 62, 44, 83, 133, 62, 34, 77, 173, 61, 211, 12, 92, 62, 128, 134, 5, 62, 76, 9, 40, 190, 162, 103, 69, 189, 218, 17, 198, 62, 203, 235, 30, 61, 200, 109, 68, 61, 203, 126, 26, 189, 139, 135, 135, 62, 143, 48, 44, 188, 123, 70, 54, 190, 102, 210, 49, 190, 230, 214, 18, 190, 95, 135, 9, 191, 187, 167, 248, 189, 18, 56, 23, 62, 173, 118, 209, 189, 130, 148, 75, 190, 4, 77, 14, 62, 56, 244, 166, 189, 11, 210, 98, 189, 197, 164, 132, 188, 135, 31, 26, 59, 220, 144, 128, 61, 36, 61, 106, 62, 240, 63, 42, 60, 207, 134, 64, 190, 66, 75, 241, 188, 215, 3, 249, 61, 6, 107, 24, 62, 32, 170, 159, 61, 71, 165, 50, 189, 11, 246, 112, 61, 187, 142, 41, 190, 190, 146, 20, 190, 53, 158, 183, 61, 245, 50, 248, 189, 72, 247, 140, 59, 137, 123, 210, 60, 0, 26, 215, 62, 0, 106, 159, 190, 145, 147, 237, 190, 24, 183, 166, 189, 175, 226, 236, 189, 205, 151, 14, 62, 172, 226, 3, 185, 8, 241, 3, 190, 99, 80, 5, 61, 17, 2, 159, 61, 196, 110, 245, 61, 153, 183, 39, 190, 42, 221, 60, 61, 250, 114, 116, 190, 147, 187, 19, 62, 29, 28, 147, 61, 162, 247, 44, 61, 80, 243, 99, 61, 96, 128, 237, 187, 67, 38, 100, 62, 149, 86, 123, 62, 35, 64, 167, 190, 31, 106, 25, 62, 253, 212, 214, 61, 91, 180, 126, 61, 34, 115, 161, 61, 110, 93, 91, 62, 28, 163, 238, 189, 97, 132, 2, 62, 37, 207, 239, 62, 142, 90, 30, 62, 48, 80, 190, 61, 213, 62, 135, 62, 83, 227, 14, 62, 115, 65, 145, 62, 79, 77, 64, 190, 117, 118, 2, 61, 47, 96, 143, 189, 62, 155, 239, 190, 176, 58, 33, 190, 89, 94, 112, 190, 254, 254, 4, 190, 127, 246, 36, 190, 1, 202, 166, 61, 241, 12, 160, 62, 192, 47, 110, 62, 55, 64, 34, 62, 159, 13, 107, 62, 102, 50, 151, 190, 207, 121, 238, 189, 162, 35, 132, 191, 30, 188, 173, 61, 136, 38, 182, 189, 61, 114, 74, 62, 102, 144, 113, 190, 224, 16, 115, 60, 81, 38, 146, 189, 61, 124, 49, 191, 82, 199, 81, 190, 152, 97, 13, 62, 41, 45, 0, 62, 140, 145, 64, 190, 69, 110, 15, 62, 152, 149, 246, 189, 167, 169, 240, 62, 166, 91, 140, 61, 189, 30, 130, 58, 1, 193, 23, 62, 29, 233, 76, 62, 1, 71, 88, 190, 113, 89, 130, 61, 200, 45, 248, 61, 8, 193, 224, 189, 98, 92, 255, 187, 66, 137, 22, 190, 142, 61, 249, 189, 44, 145, 222, 61, 134, 231, 157, 62, 64, 116, 35, 190, 219, 166, 77, 61, 155, 108, 133, 190, 98, 46, 232, 189, 7, 179, 189, 189, 140, 120, 181, 61, 119, 101, 8, 190, 143, 147, 135, 62, 241, 254, 70, 190, 111, 218, 34, 61, 123, 71, 162, 61, 228, 225, 76, 61, 175, 230, 57, 190, 226, 219, 100, 62, 56, 4, 19, 190, 68, 170, 221, 190, 84, 122, 213, 188, 252, 203, 187, 61, 156, 227, 157, 61, 206, 223, 113, 190, 223, 230, 124, 62, 76, 208, 198, 61, 167, 132, 79, 62, 47, 167, 29, 62, 249, 133, 167, 62, 253, 92, 63, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 28, 65, 190, 16, 198, 4, 190, 149, 162, 139, 62, 64, 23, 242, 60, 61, 28, 25, 189, 115, 172, 131, 61, 103, 243, 12, 190, 178, 213, 170, 62, 215, 42, 125, 62, 41, 9, 20, 62, 36, 188, 235, 189, 134, 252, 141, 62, 200, 195, 84, 62, 21, 168, 232, 61, 238, 239, 11, 62, 28, 156, 201, 60, 51, 228, 50, 62, 22, 232, 242, 61, 93, 136, 38, 62, 116, 106, 52, 61, 118, 28, 187, 189, 97, 198, 142, 189, 85, 49, 28, 59, 19, 203, 73, 61, 7, 254, 184, 189, 124, 87, 220, 60, 146, 72, 47, 62, 108, 229, 132, 62, 111, 10, 122, 190, 111, 98, 36, 62, 34, 184, 142, 61, 61, 188, 7, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 167, 45, 62, 61, 133, 156, 62, 153, 170, 56, 63, 161, 151, 31, 62, 13, 110, 181, 190, 158, 2, 35, 63, 26, 149, 123, 62, 231, 37, 137, 190, 166, 165, 68, 191, 144, 176, 126, 62, 97, 15, 41, 185, 141, 2, 194, 189, 198, 180, 159, 190, 5, 241, 248, 59, 129, 89, 114, 62, 146, 243, 98, 63, 189, 31, 179, 62, 16, 141, 193, 61, 105, 181, 170, 62, 17, 83, 173, 190, 85, 213, 183, 61, 168, 89, 46, 62, 73, 50, 8, 62, 247, 156, 153, 62, 163, 110, 56, 61, 150, 145, 35, 190, 211, 32, 161, 190, 193, 1, 43, 190, 44, 70, 24, 62, 202, 92, 68, 190, 206, 133, 9, 63, 128, 190, 133, 62, 181, 176, 10, 62, 143, 29, 76, 61, 143, 243, 51, 62, 157, 230, 138, 62, 123, 218, 201, 190, 160, 101, 28, 62, 57, 193, 159, 189, 1, 167, 92, 190, 192, 108, 26, 190, 52, 149, 161, 61, 39, 122, 252, 61, 103, 209, 241, 189, 169, 167, 100, 189, 144, 84, 252, 61, 178, 130, 49, 190, 160, 14, 91, 190, 103, 110, 55, 61, 158, 177, 189, 189, 76, 242, 187, 189, 82, 9, 0, 189, 5, 167, 213, 61, 215, 43, 110, 60, 94, 133, 100, 189, 48, 112, 63, 190, 253, 52, 114, 62, 28, 217, 49, 61, 120, 108, 130, 62, 122, 35, 23, 62, 76, 70, 148, 62, 117, 135, 33, 190, 212, 225, 96, 60, 202, 34, 139, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {92, 188, 215, 189, 30, 182, 149, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {240, 236, 237, 59, 75, 0, 193, 63, 119, 238, 190, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {113, 181, 226, 191, 168, 72, 9, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0012/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}