// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 3, 254, 62, 133, 245, 100, 63, 16, 28, 25, 63, 81, 200, 85, 61, 17, 177, 112, 190, 246, 99, 195, 62, 123, 205, 26, 191, 220, 39, 55, 63, 136, 219, 99, 62, 255, 37, 244, 62, 236, 254, 144, 63, 228, 1, 92, 62, 168, 134, 63, 191, 77, 196, 199, 63, 21, 1, 184, 62, 2, 145, 224, 62, 105, 229, 152, 62, 79, 72, 47, 191, 86, 247, 206, 62, 38, 255, 179, 190, 74, 65, 143, 58, 58, 108, 92, 191, 175, 206, 129, 63, 234, 148, 207, 62, 221, 185, 139, 189, 75, 185, 244, 191, 41, 216, 192, 190, 115, 208, 31, 63, 235, 228, 152, 63, 252, 23, 3, 62, 212, 101, 229, 188, 146, 85, 47, 191, 114, 233, 115, 62, 22, 107, 197, 62, 60, 6, 131, 191, 133, 122, 62, 190, 55, 105, 37, 62, 231, 161, 221, 62, 80, 25, 238, 190, 167, 4, 145, 60, 196, 39, 193, 188, 27, 90, 16, 191, 252, 227, 15, 63, 197, 128, 168, 63, 60, 233, 144, 62, 207, 174, 228, 190, 8, 190, 64, 191, 180, 248, 175, 190, 160, 190, 221, 188, 62, 135, 76, 191, 226, 249, 253, 189, 29, 79, 78, 62, 72, 190, 254, 62, 173, 184, 55, 63, 238, 141, 106, 62, 70, 25, 72, 63, 20, 26, 49, 191, 83, 67, 154, 189, 162, 156, 94, 62, 176, 3, 15, 191, 42, 222, 10, 62, 16, 2, 11, 63, 49, 150, 167, 62, 124, 222, 79, 190, 4, 34, 31, 190, 159, 23, 5, 191, 211, 146, 50, 62, 165, 28, 62, 61, 139, 69, 228, 62, 195, 238, 135, 62, 187, 227, 121, 63, 88, 227, 233, 62, 125, 147, 77, 63, 14, 106, 247, 62, 216, 137, 132, 61, 227, 54, 114, 191, 220, 76, 73, 63, 200, 16, 197, 190, 76, 70, 28, 191, 217, 32, 2, 191, 214, 212, 121, 59, 236, 253, 205, 61, 30, 120, 67, 62, 183, 44, 95, 62, 134, 47, 161, 190, 92, 242, 184, 190, 241, 111, 56, 63, 109, 210, 52, 63, 147, 0, 28, 188, 26, 136, 128, 62, 207, 152, 6, 63, 121, 194, 144, 191, 201, 219, 142, 190, 52, 17, 211, 62, 75, 101, 136, 191, 20, 134, 162, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {3, 52, 192, 190, 39, 191, 84, 62, 184, 135, 43, 63, 15, 90, 63, 62, 192, 110, 215, 61, 0, 55, 159, 61, 101, 192, 19, 191, 209, 42, 179, 62, 83, 211, 188, 190, 216, 147, 139, 190, 108, 55, 129, 61, 59, 12, 143, 62, 89, 199, 8, 62, 143, 182, 122, 190, 129, 79, 29, 190, 238, 157, 3, 63, 151, 185, 202, 62, 150, 112, 50, 62, 120, 114, 136, 62, 121, 169, 150, 190, 171, 64, 216, 62, 173, 228, 160, 190, 85, 252, 63, 63, 222, 197, 40, 189, 141, 227, 117, 190, 95, 69, 102, 62, 219, 205, 40, 63, 16, 112, 160, 62, 61, 93, 49, 190, 111, 131, 6, 191, 79, 169, 223, 189, 68, 95, 127, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {63, 206, 108, 61, 76, 117, 87, 187, 235, 145, 58, 60, 69, 70, 248, 62, 228, 20, 89, 62, 38, 206, 235, 189, 225, 97, 38, 190, 23, 87, 80, 189, 226, 138, 2, 62, 106, 195, 223, 62, 158, 124, 173, 60, 114, 222, 200, 191, 7, 80, 74, 62, 162, 10, 155, 62, 143, 255, 21, 63, 109, 252, 56, 186, 30, 157, 182, 191, 204, 4, 80, 62, 233, 181, 49, 62, 46, 210, 139, 62, 129, 170, 186, 187, 94, 220, 172, 62, 164, 243, 246, 188, 35, 79, 133, 62, 239, 252, 229, 62, 3, 223, 238, 190, 253, 226, 61, 191, 247, 173, 163, 61, 199, 4, 7, 190, 10, 202, 152, 189, 192, 29, 178, 191, 162, 158, 100, 191, 187, 103, 157, 62, 95, 75, 242, 188, 23, 181, 92, 190, 106, 105, 9, 62, 52, 193, 7, 63, 60, 14, 83, 62, 191, 68, 132, 189, 208, 112, 175, 61, 215, 24, 174, 61, 83, 76, 182, 61, 200, 208, 82, 191, 157, 70, 95, 190, 190, 30, 148, 62, 84, 18, 4, 62, 198, 150, 4, 59, 134, 182, 39, 62, 121, 79, 67, 190, 180, 128, 35, 188, 77, 13, 17, 62, 32, 14, 65, 62, 181, 239, 203, 59, 61, 211, 152, 61, 16, 34, 252, 189, 38, 50, 67, 62, 212, 253, 16, 188, 114, 23, 75, 62, 116, 189, 154, 190, 234, 108, 71, 60, 155, 224, 111, 190, 201, 102, 38, 191, 42, 10, 116, 62, 243, 53, 39, 62, 237, 152, 181, 190, 124, 187, 146, 189, 8, 153, 7, 57, 134, 52, 72, 189, 98, 104, 202, 62, 2, 243, 71, 62, 12, 110, 6, 190, 70, 2, 144, 62, 66, 64, 202, 191, 215, 241, 90, 191, 229, 25, 56, 60, 127, 52, 237, 62, 231, 191, 218, 190, 44, 144, 222, 62, 59, 81, 33, 191, 106, 89, 29, 190, 81, 17, 154, 61, 150, 64, 91, 189, 7, 35, 252, 190, 129, 224, 189, 62, 244, 227, 132, 60, 168, 219, 73, 190, 212, 145, 242, 61, 216, 47, 198, 189, 191, 38, 141, 62, 50, 184, 128, 190, 39, 122, 152, 62, 229, 177, 157, 60, 41, 50, 127, 62, 64, 235, 202, 190, 187, 14, 192, 62, 9, 148, 78, 189, 26, 119, 56, 190, 49, 147, 166, 62, 2, 254, 12, 191, 191, 155, 194, 190, 240, 79, 34, 191, 121, 190, 189, 190, 72, 89, 0, 62, 181, 235, 186, 189, 121, 95, 250, 190, 78, 54, 6, 190, 222, 3, 115, 61, 112, 1, 168, 62, 145, 137, 11, 191, 164, 233, 230, 190, 223, 46, 156, 191, 88, 10, 251, 190, 153, 167, 245, 61, 59, 75, 30, 62, 86, 136, 155, 190, 187, 135, 162, 190, 61, 137, 176, 189, 212, 41, 98, 191, 141, 121, 36, 189, 70, 156, 179, 190, 113, 229, 7, 189, 185, 102, 21, 191, 17, 220, 129, 61, 202, 43, 66, 189, 83, 4, 65, 62, 139, 64, 55, 62, 153, 46, 7, 62, 238, 70, 246, 190, 21, 12, 249, 61, 208, 51, 177, 61, 212, 95, 184, 61, 4, 210, 214, 62, 11, 111, 21, 191, 2, 226, 62, 62, 128, 236, 199, 61, 137, 211, 178, 190, 78, 63, 61, 191, 29, 109, 226, 61, 46, 59, 243, 189, 19, 188, 122, 190, 18, 57, 233, 188, 173, 2, 41, 62, 44, 181, 174, 62, 197, 141, 121, 190, 0, 234, 163, 190, 105, 31, 17, 62, 148, 121, 113, 61, 55, 3, 100, 61, 175, 73, 158, 59, 220, 142, 34, 190, 217, 70, 81, 62, 128, 183, 81, 61, 66, 130, 95, 62, 109, 202, 122, 62, 44, 137, 41, 190, 81, 29, 142, 62, 220, 93, 41, 189, 198, 245, 224, 62, 158, 48, 78, 191, 190, 110, 8, 191, 67, 102, 157, 190, 80, 42, 106, 189, 204, 57, 162, 62, 210, 176, 217, 190, 95, 164, 49, 62, 247, 5, 194, 61, 170, 127, 34, 190, 94, 193, 178, 62, 115, 75, 238, 191, 61, 35, 27, 191, 176, 102, 146, 189, 95, 245, 208, 61, 107, 133, 185, 190, 23, 17, 33, 63, 204, 217, 7, 191, 223, 47, 208, 189, 82, 88, 162, 62, 109, 234, 145, 189, 208, 226, 16, 191, 136, 124, 231, 62, 21, 40, 20, 189, 129, 11, 71, 190, 201, 142, 151, 62, 185, 242, 153, 190, 153, 227, 81, 62, 245, 179, 163, 190, 145, 111, 67, 62, 50, 162, 146, 61, 4, 117, 20, 62, 157, 151, 45, 191, 212, 187, 66, 63, 188, 118, 45, 190, 236, 7, 102, 190, 96, 228, 220, 61, 216, 182, 14, 191, 96, 59, 112, 189, 122, 62, 44, 61, 152, 246, 69, 62, 26, 237, 223, 61, 31, 13, 95, 190, 228, 126, 58, 191, 84, 115, 29, 190, 41, 33, 244, 189, 127, 204, 7, 62, 145, 172, 163, 188, 8, 106, 139, 62, 121, 22, 176, 190, 68, 85, 79, 61, 234, 1, 143, 60, 129, 166, 44, 190, 146, 33, 166, 60, 98, 222, 159, 62, 23, 65, 24, 190, 84, 201, 183, 190, 8, 154, 95, 62, 191, 100, 208, 189, 37, 119, 156, 62, 144, 149, 47, 190, 92, 192, 16, 62, 182, 31, 24, 62, 182, 40, 65, 62, 76, 219, 165, 61, 185, 53, 111, 62, 120, 109, 242, 189, 17, 219, 251, 61, 27, 58, 155, 189, 33, 48, 113, 62, 70, 232, 0, 189, 40, 76, 138, 190, 98, 206, 152, 61, 190, 26, 69, 188, 19, 94, 23, 61, 183, 193, 53, 62, 58, 180, 93, 62, 194, 112, 11, 190, 2, 121, 199, 62, 222, 24, 8, 62, 110, 169, 59, 190, 40, 205, 76, 189, 173, 212, 188, 61, 166, 168, 228, 61, 225, 68, 130, 61, 39, 171, 215, 61, 57, 183, 104, 61, 26, 54, 248, 61, 163, 131, 23, 190, 192, 34, 73, 61, 231, 228, 243, 61, 149, 84, 129, 189, 183, 241, 144, 187, 227, 97, 136, 62, 43, 228, 43, 190, 119, 254, 61, 190, 88, 56, 11, 62, 88, 181, 145, 190, 243, 246, 117, 61, 136, 206, 107, 62, 226, 74, 38, 62, 202, 231, 134, 62, 7, 37, 137, 62, 79, 92, 156, 191, 190, 50, 192, 190, 127, 96, 221, 61, 94, 159, 123, 191, 121, 27, 135, 62, 246, 215, 156, 62, 177, 116, 182, 61, 63, 61, 79, 190, 16, 83, 13, 62, 150, 105, 198, 189, 225, 165, 233, 62, 160, 54, 159, 62, 37, 214, 39, 189, 152, 4, 221, 61, 23, 120, 194, 60, 3, 155, 49, 61, 15, 145, 180, 190, 88, 102, 161, 62, 49, 252, 189, 189, 107, 144, 179, 62, 238, 172, 52, 62, 37, 159, 25, 62, 88, 18, 157, 62, 174, 47, 180, 189, 168, 52, 9, 191, 126, 222, 189, 62, 171, 44, 23, 191, 200, 102, 71, 190, 122, 1, 184, 188, 235, 118, 6, 61, 77, 28, 232, 190, 206, 16, 30, 190, 207, 42, 206, 62, 72, 49, 171, 61, 245, 249, 178, 61, 193, 125, 133, 62, 219, 149, 66, 191, 224, 44, 0, 191, 180, 169, 44, 190, 172, 134, 118, 189, 225, 204, 54, 61, 243, 173, 243, 61, 164, 37, 186, 190, 117, 39, 103, 61, 205, 58, 233, 61, 112, 177, 97, 61, 177, 26, 177, 189, 130, 70, 16, 62, 188, 159, 62, 188, 238, 163, 59, 190, 158, 159, 180, 60, 132, 231, 11, 61, 152, 58, 79, 62, 182, 247, 160, 61, 202, 244, 88, 190, 157, 209, 150, 189, 230, 194, 101, 61, 94, 176, 138, 189, 244, 91, 6, 63, 114, 175, 242, 61, 179, 155, 189, 59, 137, 251, 73, 59, 206, 175, 45, 60, 141, 197, 232, 189, 247, 133, 242, 61, 49, 189, 57, 190, 38, 109, 7, 62, 20, 150, 228, 188, 33, 247, 218, 59, 165, 157, 178, 59, 80, 56, 109, 61, 105, 2, 107, 189, 10, 184, 36, 190, 102, 63, 43, 190, 13, 68, 153, 189, 213, 122, 85, 61, 29, 145, 26, 188, 162, 189, 26, 190, 137, 20, 8, 62, 136, 111, 232, 61, 209, 51, 6, 62, 11, 186, 222, 59, 36, 20, 32, 61, 187, 41, 38, 189, 222, 253, 45, 190, 161, 187, 87, 189, 3, 96, 109, 190, 141, 67, 4, 190, 220, 25, 185, 189, 227, 57, 126, 61, 12, 201, 1, 62, 228, 240, 23, 189, 96, 120, 27, 61, 115, 188, 162, 61, 236, 241, 46, 62, 75, 214, 163, 189, 160, 18, 1, 60, 143, 210, 105, 59, 206, 205, 134, 189, 211, 89, 79, 189, 141, 97, 86, 190, 69, 142, 144, 61, 59, 181, 178, 60, 33, 209, 248, 189, 175, 6, 174, 61, 191, 225, 102, 190, 244, 162, 130, 60, 248, 173, 134, 61, 166, 182, 11, 62, 19, 180, 0, 189, 111, 123, 9, 62, 32, 31, 247, 188, 99, 166, 66, 190, 236, 77, 17, 189, 112, 135, 227, 60, 55, 225, 24, 190, 184, 254, 205, 61, 87, 183, 201, 61, 49, 95, 57, 62, 171, 87, 111, 189, 103, 105, 155, 188, 142, 182, 12, 61, 63, 114, 26, 191, 130, 16, 62, 188, 102, 120, 192, 62, 214, 22, 82, 188, 183, 1, 140, 59, 100, 172, 92, 62, 236, 44, 243, 190, 68, 7, 17, 190, 172, 255, 196, 189, 113, 192, 50, 190, 64, 142, 134, 62, 193, 47, 62, 62, 121, 43, 89, 62, 76, 6, 106, 62, 108, 216, 151, 61, 178, 210, 253, 188, 149, 73, 139, 62, 217, 78, 76, 62, 45, 132, 149, 61, 179, 30, 170, 62, 156, 31, 7, 62, 221, 217, 193, 189, 237, 102, 61, 190, 183, 31, 183, 188, 36, 147, 88, 189, 242, 107, 27, 62, 159, 145, 90, 62, 34, 253, 49, 62, 222, 151, 47, 189, 75, 108, 116, 190, 13, 104, 72, 190, 71, 187, 177, 62, 141, 33, 151, 190, 29, 102, 109, 190, 181, 70, 227, 189, 52, 171, 27, 190, 122, 69, 35, 190, 162, 146, 186, 188, 40, 90, 9, 190, 249, 190, 160, 61, 239, 20, 68, 189, 64, 81, 219, 61, 234, 148, 53, 189, 103, 59, 229, 61, 176, 18, 106, 61, 154, 141, 226, 189, 38, 6, 6, 190, 137, 126, 198, 189, 45, 25, 32, 189, 90, 16, 253, 61, 97, 53, 80, 190, 165, 18, 26, 62, 61, 174, 71, 190, 228, 2, 149, 189, 169, 87, 100, 189, 244, 186, 58, 190, 190, 159, 4, 189, 19, 115, 0, 61, 46, 91, 26, 188, 34, 70, 153, 189, 79, 249, 254, 188, 234, 171, 129, 61, 70, 225, 122, 189, 201, 189, 153, 189, 228, 249, 234, 189, 110, 186, 183, 61, 118, 50, 153, 190, 139, 120, 166, 62, 40, 73, 111, 191, 119, 32, 162, 188, 120, 246, 15, 190, 134, 125, 30, 62, 155, 97, 157, 189, 35, 93, 241, 188, 224, 252, 45, 191, 175, 254, 162, 190, 71, 204, 181, 62, 221, 195, 174, 62, 114, 16, 149, 62, 213, 26, 240, 61, 31, 164, 47, 191, 172, 67, 144, 190, 249, 51, 131, 61, 5, 159, 0, 62, 3, 153, 46, 61, 194, 241, 220, 189, 13, 132, 3, 190, 67, 140, 154, 189, 41, 10, 210, 61, 243, 253, 101, 190, 251, 87, 157, 62, 191, 38, 133, 61, 215, 41, 99, 190, 206, 255, 212, 61, 184, 93, 220, 60, 215, 127, 43, 60, 130, 97, 8, 62, 189, 175, 133, 189, 50, 190, 45, 62, 238, 129, 106, 190, 23, 150, 153, 62, 57, 227, 148, 190, 206, 179, 191, 61, 138, 97, 86, 62, 242, 219, 46, 190, 97, 149, 218, 61, 254, 28, 25, 192, 65, 123, 21, 190, 29, 197, 232, 189, 253, 158, 241, 191, 239, 69, 67, 191, 222, 201, 212, 62, 252, 71, 140, 190, 130, 236, 0, 63, 221, 209, 163, 62, 212, 71, 139, 190, 137, 15, 64, 191, 5, 168, 227, 62, 71, 34, 214, 189, 81, 157, 192, 190, 221, 52, 153, 190, 178, 249, 110, 190, 194, 190, 188, 190, 179, 159, 73, 62, 2, 59, 204, 61, 85, 240, 188, 190, 197, 81, 36, 59, 126, 76, 36, 190, 208, 210, 149, 190, 82, 1, 207, 190, 237, 24, 143, 190, 111, 146, 58, 189, 144, 180, 194, 190, 81, 2, 54, 61, 226, 131, 167, 62, 97, 225, 54, 62, 218, 15, 24, 190, 184, 243, 7, 62, 212, 92, 123, 191, 170, 169, 206, 190, 62, 116, 3, 189, 228, 72, 86, 62, 12, 241, 68, 188, 207, 178, 121, 62, 161, 215, 218, 190, 220, 146, 62, 60, 91, 98, 78, 189, 2, 182, 135, 190, 57, 153, 39, 190, 68, 33, 76, 62, 251, 237, 74, 62, 87, 113, 243, 190, 66, 55, 144, 60, 225, 3, 204, 189, 220, 211, 251, 60, 198, 94, 132, 190, 164, 176, 2, 62, 167, 22, 56, 62, 191, 203, 134, 62, 28, 58, 106, 189, 218, 173, 197, 62, 235, 248, 55, 189, 129, 154, 101, 190, 152, 49, 103, 59, 38, 68, 133, 189, 80, 71, 39, 189, 8, 22, 171, 61, 172, 195, 145, 62, 250, 153, 23, 190, 3, 38, 187, 61, 45, 68, 217, 191, 13, 76, 194, 190, 87, 159, 3, 62, 89, 0, 143, 62, 102, 23, 16, 189, 159, 44, 151, 61, 7, 83, 173, 190, 134, 40, 11, 62, 117, 229, 145, 62, 158, 22, 115, 189, 104, 248, 90, 189, 241, 107, 34, 190, 17, 217, 133, 61, 182, 56, 109, 190, 156, 68, 35, 189, 197, 141, 4, 190, 66, 129, 255, 61, 253, 29, 239, 190, 178, 208, 128, 62, 90, 97, 31, 189, 14, 33, 215, 61, 77, 5, 174, 60, 181, 91, 72, 62, 91, 103, 145, 61, 121, 160, 183, 190, 78, 159, 253, 61, 122, 13, 62, 191, 88, 14, 142, 189, 143, 227, 141, 189, 15, 63, 21, 62, 178, 67, 191, 189, 140, 206, 54, 62, 132, 143, 62, 191, 188, 28, 197, 190, 96, 150, 82, 61, 11, 85, 96, 60, 250, 134, 199, 61, 82, 117, 255, 60, 254, 240, 96, 191, 42, 109, 20, 190, 86, 195, 249, 60, 243, 215, 131, 190, 243, 172, 18, 62, 4, 20, 90, 62, 6, 106, 19, 62, 125, 36, 238, 189, 51, 195, 206, 62, 15, 12, 252, 188, 10, 130, 141, 62, 74, 197, 212, 189, 209, 187, 98, 187, 199, 132, 114, 60, 226, 139, 199, 61, 130, 253, 198, 189, 253, 39, 90, 61, 97, 139, 49, 188, 6, 213, 169, 62, 98, 187, 153, 61, 176, 90, 140, 62, 132, 22, 177, 61, 136, 234, 78, 191, 116, 74, 60, 190, 235, 162, 38, 62, 109, 208, 76, 191, 189, 233, 181, 62, 112, 245, 213, 62, 99, 208, 42, 63, 216, 186, 5, 62, 176, 35, 14, 62, 202, 14, 84, 190, 245, 124, 223, 62, 218, 69, 86, 62, 225, 64, 145, 61, 216, 26, 135, 188, 148, 93, 41, 62, 159, 230, 148, 60, 67, 222, 47, 191, 242, 23, 42, 189, 23, 207, 176, 190, 220, 99, 125, 187, 179, 203, 21, 189, 254, 49, 54, 189, 30, 110, 194, 62, 71, 79, 136, 190, 84, 51, 5, 191, 169, 127, 14, 62, 7, 114, 62, 191, 242, 118, 160, 190, 120, 36, 64, 188, 242, 233, 75, 190, 97, 205, 47, 187, 98, 68, 230, 187, 65, 194, 181, 188, 49, 42, 240, 61, 174, 71, 156, 61, 133, 176, 48, 190, 34, 157, 11, 190, 157, 70, 106, 189, 153, 222, 4, 189, 81, 253, 59, 189, 98, 186, 93, 61, 124, 124, 15, 190, 153, 198, 48, 60, 11, 176, 217, 189, 66, 117, 153, 60, 251, 146, 31, 190, 246, 53, 209, 188, 58, 131, 163, 61, 143, 133, 203, 189, 0, 211, 88, 189, 67, 207, 23, 60, 133, 251, 173, 61, 52, 138, 56, 189, 211, 51, 180, 189, 247, 185, 65, 189, 102, 41, 187, 60, 139, 21, 95, 189, 93, 86, 205, 188, 12, 112, 13, 62, 122, 65, 232, 189, 232, 133, 2, 189, 6, 137, 47, 62, 150, 147, 249, 190, 200, 94, 0, 191, 90, 89, 159, 62, 134, 87, 16, 62, 205, 182, 134, 189, 231, 85, 91, 190, 223, 144, 204, 189, 250, 227, 29, 191, 198, 253, 140, 186, 145, 93, 116, 61, 127, 59, 84, 61, 163, 24, 229, 187, 184, 38, 159, 191, 223, 147, 81, 62, 217, 201, 11, 62, 238, 106, 33, 62, 120, 135, 234, 61, 26, 57, 123, 62, 223, 136, 116, 61, 114, 69, 156, 61, 13, 191, 18, 190, 165, 191, 0, 191, 88, 132, 211, 190, 25, 169, 31, 62, 193, 51, 44, 190, 170, 116, 76, 62, 147, 44, 212, 61, 180, 234, 68, 62, 23, 96, 146, 189, 53, 38, 136, 189, 163, 141, 40, 190, 26, 114, 168, 60, 15, 99, 139, 191, 27, 74, 12, 62, 177, 153, 37, 62, 72, 37, 137, 62, 150, 13, 7, 190, 106, 95, 247, 61, 243, 64, 111, 190, 238, 188, 131, 190, 119, 168, 81, 189, 123, 30, 4, 62, 78, 211, 190, 189, 121, 25, 126, 59, 75, 26, 191, 190, 183, 116, 196, 188, 205, 130, 129, 189, 101, 107, 144, 189, 49, 148, 134, 60, 111, 43, 129, 61, 136, 226, 159, 189, 242, 53, 13, 190, 88, 86, 38, 61, 92, 78, 243, 189, 115, 83, 160, 62, 60, 110, 155, 61, 49, 249, 59, 189, 76, 169, 56, 61, 134, 3, 110, 62, 249, 65, 232, 61, 115, 101, 206, 62, 35, 163, 87, 189, 12, 138, 145, 190, 125, 62, 13, 62, 245, 141, 246, 189, 94, 205, 169, 62, 126, 4, 153, 61, 36, 145, 140, 62, 162, 51, 139, 189, 210, 152, 135, 61, 175, 126, 184, 191, 225, 52, 120, 60, 188, 92, 105, 60, 87, 26, 42, 62, 138, 85, 190, 190, 182, 254, 39, 62, 198, 39, 134, 190, 21, 5, 72, 62, 159, 50, 101, 62, 111, 223, 184, 188, 125, 255, 105, 190, 114, 216, 4, 189, 53, 55, 46, 62, 6, 68, 234, 190, 55, 98, 135, 189, 159, 190, 27, 62, 35, 36, 46, 63, 92, 203, 112, 190, 61, 178, 210, 61, 108, 218, 223, 61, 222, 131, 174, 61, 178, 104, 23, 61, 244, 16, 252, 62, 206, 104, 129, 61, 146, 220, 145, 62, 228, 73, 58, 62, 159, 209, 146, 190, 194, 7, 236, 62, 231, 26, 249, 190, 81, 188, 218, 189, 187, 48, 113, 189, 254, 47, 172, 190, 186, 108, 216, 190, 54, 182, 115, 62, 136, 129, 242, 189, 229, 57, 198, 190, 19, 58, 93, 189, 111, 145, 4, 62, 202, 131, 155, 62, 63, 212, 188, 190, 187, 115, 129, 190, 121, 208, 202, 61, 183, 183, 116, 62, 144, 166, 18, 62, 44, 199, 220, 188, 2, 112, 217, 60, 234, 166, 71, 188, 103, 223, 135, 62, 123, 44, 235, 62, 63, 178, 153, 62, 70, 104, 78, 190, 253, 87, 98, 188, 234, 255, 70, 61, 171, 175, 56, 63, 240, 108, 138, 191, 31, 205, 86, 191, 84, 52, 12, 189, 202, 14, 198, 59, 152, 24, 169, 62, 183, 111, 113, 62, 55, 8, 226, 189, 147, 143, 170, 190, 106, 52, 147, 61, 254, 225, 20, 190, 220, 101, 223, 189, 62, 189, 171, 62, 9, 158, 128, 60, 144, 8, 0, 190, 192, 64, 134, 62, 106, 95, 166, 190, 44, 77, 203, 62, 117, 81, 59, 61, 45, 99, 41, 189, 12, 136, 34, 62, 107, 84, 101, 62, 43, 203, 1, 190, 134, 210, 180, 60, 151, 178, 130, 62, 79, 188, 185, 60, 54, 229, 96, 61, 0, 141, 122, 188, 244, 152, 143, 62, 48, 181, 185, 58, 19, 78, 19, 62, 178, 234, 138, 189, 254, 211, 90, 61, 71, 222, 102, 191, 209, 149, 159, 190, 72, 211, 111, 188, 23, 243, 146, 190, 87, 209, 188, 62, 136, 77, 21, 62, 58, 113, 199, 189, 99, 45, 163, 190, 232, 251, 120, 189, 231, 156, 9, 190, 167, 194, 9, 63, 161, 197, 198, 62, 35, 111, 148, 189, 103, 182, 250, 189, 17, 19, 44, 61, 166, 244, 110, 190, 27, 179, 201, 62, 136, 132, 149, 62, 149, 55, 6, 61, 76, 16, 202, 60, 101, 45, 30, 62, 20, 169, 31, 190, 71, 206, 96, 190, 167, 230, 222, 62, 20, 177, 22, 191, 57, 123, 34, 62, 65, 145, 210, 61, 103, 170, 120, 62, 201, 148, 44, 62, 96, 49, 153, 190, 166, 126, 35, 191, 118, 94, 181, 190, 74, 76, 61, 191, 159, 207, 223, 190, 226, 203, 58, 61, 167, 162, 196, 188, 203, 144, 110, 62, 81, 244, 68, 62, 3, 6, 140, 189, 67, 112, 31, 190, 107, 129, 20, 187, 252, 153, 134, 187, 3, 144, 216, 190, 4, 132, 169, 62, 3, 36, 216, 61, 98, 16, 150, 190, 174, 140, 252, 61, 205, 46, 140, 190, 218, 209, 240, 62, 78, 214, 55, 60, 238, 115, 78, 190, 111, 1, 97, 62, 142, 157, 34, 62, 202, 244, 28, 190, 164, 182, 212, 60, 17, 196, 69, 62, 37, 168, 170, 61, 27, 173, 232, 61, 199, 106, 149, 61, 86, 60, 230, 62, 215, 161, 15, 190, 239, 210, 51, 189, 126, 115, 49, 190, 30, 183, 60, 62, 53, 88, 125, 191, 211, 200, 9, 191, 143, 26, 102, 62, 5, 232, 77, 189, 169, 201, 29, 190, 166, 158, 179, 62, 236, 191, 193, 189, 181, 216, 240, 189, 197, 164, 132, 188, 137, 173, 5, 190, 220, 144, 128, 61, 99, 66, 252, 62, 59, 74, 225, 188, 240, 101, 164, 191, 24, 187, 245, 59, 154, 219, 49, 188, 145, 90, 187, 62, 227, 83, 99, 190, 75, 233, 144, 191, 212, 73, 241, 61, 95, 100, 55, 189, 117, 56, 254, 61, 177, 1, 33, 62, 61, 50, 238, 189, 99, 211, 31, 61, 77, 215, 14, 62, 16, 176, 29, 63, 217, 34, 58, 62, 137, 24, 39, 191, 130, 0, 99, 59, 34, 228, 61, 190, 123, 18, 243, 62, 189, 39, 138, 191, 110, 86, 133, 191, 12, 233, 27, 61, 85, 177, 160, 188, 20, 20, 23, 62, 211, 189, 18, 190, 103, 128, 166, 189, 222, 100, 99, 190, 147, 187, 19, 62, 199, 74, 200, 60, 14, 26, 27, 61, 254, 18, 73, 61, 35, 106, 234, 189, 162, 63, 135, 61, 119, 148, 96, 62, 185, 187, 148, 190, 7, 162, 55, 62, 189, 154, 16, 62, 175, 239, 82, 188, 142, 96, 203, 60, 234, 151, 74, 62, 248, 252, 133, 189, 45, 149, 218, 61, 249, 245, 252, 62, 68, 171, 230, 61, 232, 247, 141, 61, 234, 119, 123, 62, 149, 68, 107, 62, 22, 82, 82, 62, 188, 184, 84, 190, 172, 109, 216, 188, 236, 124, 204, 61, 128, 229, 53, 191, 207, 138, 146, 190, 55, 152, 118, 191, 48, 36, 72, 190, 19, 171, 140, 190, 114, 229, 51, 61, 180, 72, 133, 62, 23, 8, 62, 62, 55, 64, 34, 62, 105, 223, 167, 62, 71, 147, 130, 191, 238, 87, 211, 189, 130, 1, 79, 191, 131, 149, 14, 62, 18, 250, 213, 189, 19, 3, 84, 61, 124, 236, 187, 190, 246, 67, 62, 62, 251, 196, 167, 61, 64, 131, 156, 191, 117, 3, 101, 190, 224, 124, 32, 188, 197, 127, 210, 189, 69, 69, 219, 190, 32, 67, 231, 60, 51, 36, 168, 190, 107, 129, 28, 63, 154, 94, 17, 190, 100, 56, 113, 61, 110, 93, 252, 61, 17, 252, 29, 190, 190, 48, 5, 191, 148, 28, 131, 62, 176, 37, 112, 62, 108, 245, 146, 190, 11, 133, 184, 61, 68, 209, 43, 191, 99, 165, 64, 190, 222, 121, 215, 188, 5, 34, 194, 62, 64, 116, 35, 190, 60, 77, 154, 189, 83, 107, 58, 191, 175, 56, 47, 190, 186, 170, 163, 61, 143, 124, 75, 61, 108, 17, 11, 189, 187, 245, 161, 62, 69, 32, 30, 191, 214, 93, 39, 190, 14, 217, 85, 189, 167, 241, 189, 61, 202, 28, 144, 189, 112, 27, 152, 62, 146, 1, 35, 190, 147, 95, 233, 190, 96, 198, 65, 60, 225, 144, 5, 189, 12, 107, 45, 61, 152, 107, 44, 190, 226, 110, 23, 61, 94, 92, 197, 61, 32, 27, 146, 62, 95, 248, 120, 61, 240, 139, 159, 62, 247, 236, 190, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 144, 122, 190, 97, 43, 139, 190, 238, 168, 141, 62, 60, 200, 13, 62, 28, 58, 4, 189, 93, 100, 172, 61, 71, 23, 16, 190, 23, 168, 189, 62, 59, 167, 100, 62, 29, 52, 151, 61, 154, 168, 18, 190, 119, 64, 94, 62, 66, 62, 58, 62, 21, 168, 232, 61, 229, 193, 44, 62, 78, 24, 204, 59, 27, 194, 52, 62, 80, 220, 56, 62, 242, 53, 24, 62, 222, 33, 54, 62, 208, 57, 221, 189, 61, 245, 48, 190, 225, 235, 24, 189, 190, 139, 172, 61, 240, 112, 121, 189, 196, 241, 203, 61, 172, 234, 73, 62, 128, 117, 171, 62, 3, 76, 61, 190, 97, 210, 23, 62, 107, 12, 14, 62, 117, 155, 147, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 136, 102, 63, 35, 65, 146, 62, 72, 68, 102, 63, 100, 118, 90, 63, 242, 92, 0, 191, 38, 128, 128, 63, 18, 97, 56, 62, 217, 119, 23, 190, 117, 231, 84, 191, 237, 112, 172, 62, 95, 61, 240, 58, 0, 235, 1, 60, 130, 49, 90, 190, 5, 241, 248, 59, 86, 243, 202, 62, 116, 27, 215, 63, 116, 70, 144, 62, 141, 135, 6, 62, 194, 220, 221, 62, 58, 227, 156, 191, 224, 242, 172, 61, 65, 174, 87, 62, 70, 209, 153, 61, 186, 185, 156, 62, 219, 127, 115, 191, 146, 11, 41, 190, 111, 231, 81, 191, 129, 148, 185, 190, 17, 115, 97, 63, 149, 245, 52, 189, 130, 89, 149, 63, 216, 46, 210, 62, 148, 16, 32, 60, 221, 173, 145, 61, 88, 37, 174, 62, 224, 147, 186, 62, 31, 168, 234, 190, 130, 215, 141, 62, 120, 41, 6, 190, 220, 116, 161, 190, 119, 209, 245, 61, 149, 110, 145, 62, 134, 127, 246, 61, 127, 31, 132, 189, 233, 183, 59, 190, 144, 84, 252, 61, 74, 13, 170, 190, 5, 10, 87, 189, 105, 39, 37, 190, 128, 5, 245, 190, 187, 91, 51, 190, 82, 162, 23, 63, 220, 197, 210, 61, 156, 199, 48, 188, 31, 3, 70, 190, 203, 50, 225, 190, 109, 186, 175, 62, 41, 33, 115, 61, 182, 80, 45, 62, 9, 97, 196, 61, 172, 244, 51, 62, 145, 110, 94, 190, 58, 103, 207, 62, 132, 117, 154, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 37, 222, 189, 75, 156, 18, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {206, 199, 79, 191, 14, 0, 242, 61, 167, 148, 132, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {82, 95, 60, 64, 52, 178, 185, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0012/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}