// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 63, 227, 62, 125, 88, 54, 63, 58, 215, 36, 63, 234, 118, 74, 62, 153, 39, 215, 190, 141, 31, 169, 62, 213, 247, 23, 191, 87, 153, 13, 63, 52, 70, 59, 62, 201, 156, 8, 63, 228, 115, 130, 63, 231, 242, 52, 62, 128, 197, 34, 191, 57, 167, 177, 63, 54, 205, 180, 62, 236, 50, 220, 62, 191, 113, 203, 62, 68, 144, 53, 191, 86, 247, 206, 62, 38, 255, 179, 190, 74, 65, 143, 58, 179, 44, 72, 191, 31, 95, 108, 63, 35, 208, 230, 62, 203, 153, 19, 190, 67, 115, 211, 191, 150, 205, 169, 190, 60, 106, 43, 63, 217, 23, 129, 63, 220, 239, 213, 61, 252, 21, 9, 190, 181, 148, 40, 191, 190, 104, 141, 62, 141, 58, 192, 62, 94, 232, 116, 191, 174, 186, 81, 190, 173, 6, 139, 62, 43, 13, 157, 62, 9, 91, 3, 191, 123, 154, 32, 190, 172, 237, 173, 185, 102, 51, 18, 191, 207, 54, 20, 63, 79, 128, 146, 63, 183, 97, 143, 62, 231, 222, 199, 190, 34, 67, 38, 191, 6, 254, 180, 190, 33, 229, 147, 187, 255, 84, 59, 191, 111, 45, 39, 190, 77, 161, 58, 62, 166, 114, 146, 62, 83, 53, 56, 63, 223, 160, 155, 62, 218, 166, 40, 63, 173, 43, 58, 191, 255, 244, 18, 190, 214, 189, 143, 62, 84, 180, 23, 191, 246, 206, 2, 62, 57, 100, 229, 62, 32, 53, 4, 63, 23, 48, 102, 190, 180, 240, 210, 189, 185, 127, 2, 191, 73, 128, 0, 62, 216, 96, 200, 189, 240, 125, 23, 63, 170, 61, 183, 62, 157, 14, 83, 63, 57, 73, 233, 62, 121, 123, 93, 63, 89, 224, 13, 63, 96, 225, 110, 61, 184, 213, 18, 191, 150, 78, 86, 63, 187, 192, 223, 190, 177, 100, 208, 190, 16, 8, 253, 190, 155, 2, 11, 189, 194, 154, 53, 62, 89, 33, 60, 62, 194, 246, 76, 62, 119, 140, 107, 190, 114, 37, 188, 190, 132, 115, 59, 63, 148, 178, 45, 63, 124, 218, 124, 189, 23, 249, 113, 62, 86, 9, 4, 63, 177, 138, 130, 191, 75, 175, 132, 190, 27, 254, 200, 62, 202, 68, 91, 191, 13, 205, 175, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {108, 217, 201, 190, 2, 139, 4, 63, 181, 25, 44, 63, 156, 238, 89, 62, 41, 214, 102, 61, 115, 30, 249, 61, 101, 192, 19, 191, 240, 13, 238, 61, 52, 248, 135, 190, 9, 99, 124, 190, 138, 92, 32, 62, 54, 15, 150, 62, 163, 76, 66, 62, 184, 233, 132, 190, 211, 100, 52, 190, 5, 28, 2, 63, 24, 42, 206, 62, 169, 27, 44, 62, 228, 71, 140, 62, 123, 92, 75, 190, 238, 52, 215, 62, 227, 238, 201, 190, 113, 169, 52, 63, 182, 156, 96, 61, 139, 18, 6, 190, 216, 197, 29, 62, 239, 198, 27, 63, 190, 241, 200, 62, 134, 25, 227, 189, 145, 170, 250, 190, 191, 82, 165, 189, 209, 62, 64, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 120, 160, 188, 172, 220, 155, 60, 118, 166, 128, 189, 211, 241, 181, 62, 253, 211, 178, 61, 178, 33, 30, 190, 225, 97, 38, 190, 246, 113, 212, 189, 226, 138, 2, 62, 68, 80, 150, 62, 252, 202, 196, 61, 10, 130, 63, 191, 11, 185, 190, 61, 121, 33, 37, 62, 104, 6, 215, 62, 42, 106, 49, 61, 252, 45, 70, 191, 150, 242, 42, 62, 19, 59, 122, 61, 127, 162, 6, 62, 250, 90, 35, 189, 74, 181, 188, 61, 115, 37, 202, 188, 255, 79, 44, 62, 5, 146, 169, 62, 150, 56, 71, 190, 53, 84, 35, 191, 247, 243, 154, 61, 166, 193, 233, 189, 139, 188, 74, 62, 51, 46, 86, 191, 3, 25, 18, 191, 162, 2, 201, 189, 49, 134, 78, 61, 23, 169, 27, 190, 227, 25, 31, 62, 49, 179, 3, 62, 242, 230, 64, 62, 191, 68, 132, 189, 255, 154, 48, 190, 202, 137, 236, 185, 112, 64, 178, 61, 154, 185, 14, 191, 90, 53, 71, 190, 209, 184, 137, 62, 181, 66, 175, 61, 98, 163, 3, 189, 148, 240, 15, 62, 30, 54, 40, 190, 240, 8, 52, 189, 15, 118, 253, 61, 173, 242, 26, 62, 71, 225, 1, 190, 59, 2, 118, 186, 71, 204, 34, 190, 96, 78, 56, 61, 217, 149, 144, 61, 115, 108, 73, 62, 123, 39, 89, 190, 22, 6, 108, 189, 151, 123, 184, 190, 153, 238, 74, 190, 209, 148, 53, 62, 250, 1, 142, 61, 13, 159, 182, 190, 118, 68, 195, 189, 216, 146, 28, 189, 9, 193, 158, 187, 48, 55, 187, 62, 70, 120, 108, 62, 12, 110, 6, 190, 105, 154, 136, 62, 2, 208, 194, 191, 32, 200, 66, 191, 100, 127, 180, 185, 123, 206, 163, 62, 130, 6, 198, 190, 203, 122, 177, 62, 73, 49, 22, 191, 95, 120, 104, 190, 56, 242, 193, 189, 6, 7, 149, 189, 173, 218, 213, 190, 142, 26, 166, 62, 68, 215, 77, 60, 109, 0, 139, 190, 203, 34, 207, 61, 35, 225, 183, 189, 254, 180, 118, 62, 172, 229, 158, 61, 27, 160, 103, 62, 231, 254, 134, 60, 100, 25, 115, 62, 57, 63, 163, 190, 21, 184, 102, 62, 175, 218, 243, 189, 78, 44, 34, 190, 167, 182, 170, 62, 94, 137, 26, 191, 168, 30, 221, 190, 189, 23, 1, 191, 169, 249, 82, 190, 72, 89, 0, 62, 148, 0, 66, 189, 147, 252, 18, 61, 51, 17, 178, 190, 141, 107, 220, 61, 66, 155, 246, 62, 88, 111, 203, 190, 239, 210, 144, 190, 168, 28, 140, 191, 24, 236, 103, 189, 105, 195, 151, 62, 193, 209, 11, 62, 34, 144, 44, 190, 80, 13, 38, 190, 86, 228, 226, 189, 69, 235, 50, 191, 102, 49, 23, 189, 1, 20, 174, 190, 66, 135, 45, 190, 128, 60, 221, 190, 12, 96, 26, 62, 145, 212, 103, 189, 91, 42, 68, 62, 136, 118, 5, 62, 225, 78, 211, 62, 200, 152, 33, 189, 227, 117, 161, 61, 106, 202, 201, 61, 8, 228, 130, 61, 65, 6, 208, 62, 244, 36, 233, 190, 81, 211, 41, 62, 128, 236, 199, 61, 7, 105, 163, 190, 191, 155, 168, 190, 33, 236, 195, 61, 16, 207, 178, 189, 51, 30, 46, 190, 39, 252, 173, 188, 239, 178, 13, 62, 34, 223, 160, 62, 168, 117, 64, 190, 81, 162, 135, 190, 138, 138, 8, 62, 75, 82, 98, 61, 70, 104, 200, 60, 212, 106, 29, 188, 237, 34, 42, 190, 95, 38, 83, 62, 214, 55, 235, 60, 79, 240, 73, 62, 229, 77, 52, 62, 92, 159, 236, 189, 48, 221, 135, 62, 12, 72, 141, 189, 3, 222, 203, 62, 235, 76, 42, 191, 130, 197, 187, 190, 249, 247, 156, 190, 129, 115, 172, 189, 92, 244, 154, 62, 77, 122, 118, 190, 255, 15, 54, 62, 87, 153, 139, 61, 170, 127, 34, 190, 239, 175, 173, 62, 155, 31, 243, 191, 133, 102, 158, 190, 77, 45, 223, 189, 35, 249, 2, 190, 139, 227, 181, 190, 76, 45, 26, 63, 35, 163, 199, 190, 65, 90, 19, 190, 62, 36, 243, 61, 110, 80, 177, 189, 24, 214, 9, 191, 93, 221, 230, 62, 229, 135, 232, 188, 198, 49, 103, 190, 235, 253, 145, 62, 200, 115, 145, 190, 92, 121, 39, 62, 105, 142, 60, 189, 72, 162, 245, 61, 225, 137, 172, 61, 152, 22, 229, 61, 200, 137, 18, 191, 111, 28, 131, 62, 44, 126, 187, 190, 233, 249, 52, 190, 59, 34, 160, 61, 170, 184, 128, 190, 117, 255, 142, 186, 210, 124, 3, 62, 136, 104, 78, 62, 26, 237, 223, 61, 114, 33, 226, 189, 19, 112, 214, 190, 225, 31, 129, 189, 87, 0, 81, 190, 125, 189, 54, 62, 133, 226, 33, 189, 16, 145, 104, 62, 119, 134, 111, 190, 64, 192, 237, 60, 39, 157, 149, 61, 183, 201, 47, 190, 224, 16, 120, 59, 45, 39, 133, 62, 236, 75, 247, 189, 67, 164, 218, 190, 238, 115, 93, 62, 166, 55, 68, 189, 25, 165, 179, 62, 118, 76, 128, 190, 60, 96, 91, 62, 236, 133, 42, 62, 180, 216, 84, 62, 27, 240, 18, 60, 234, 139, 145, 62, 146, 176, 191, 189, 29, 220, 250, 61, 7, 102, 146, 189, 97, 126, 128, 62, 184, 30, 200, 188, 103, 22, 69, 190, 200, 37, 191, 61, 190, 26, 69, 188, 143, 121, 153, 61, 127, 247, 167, 61, 131, 64, 102, 62, 195, 29, 63, 190, 132, 56, 180, 62, 89, 216, 53, 62, 207, 50, 17, 190, 114, 215, 78, 189, 96, 37, 142, 61, 38, 110, 84, 61, 194, 72, 171, 61, 7, 39, 20, 62, 9, 127, 207, 61, 231, 48, 248, 61, 223, 151, 152, 189, 241, 234, 40, 61, 152, 173, 249, 61, 155, 140, 136, 189, 71, 97, 13, 187, 219, 137, 80, 62, 35, 95, 54, 190, 229, 37, 38, 190, 75, 4, 239, 61, 40, 4, 156, 190, 13, 198, 221, 60, 14, 81, 14, 62, 121, 119, 69, 62, 27, 99, 45, 62, 210, 251, 124, 62, 141, 194, 113, 191, 243, 198, 205, 190, 127, 96, 221, 61, 194, 19, 66, 191, 24, 15, 218, 61, 24, 160, 141, 62, 170, 252, 67, 62, 173, 229, 68, 190, 123, 55, 15, 62, 231, 60, 2, 190, 118, 134, 213, 62, 29, 169, 160, 62, 200, 166, 124, 189, 38, 207, 245, 61, 243, 228, 144, 60, 166, 210, 101, 60, 205, 114, 188, 190, 130, 172, 152, 62, 97, 94, 173, 189, 40, 6, 168, 62, 193, 89, 26, 62, 71, 56, 199, 61, 18, 71, 142, 62, 196, 82, 182, 189, 105, 128, 25, 191, 162, 123, 215, 62, 26, 40, 12, 191, 109, 117, 15, 190, 171, 34, 189, 188, 42, 221, 155, 60, 193, 188, 173, 190, 17, 67, 190, 189, 93, 0, 162, 62, 24, 168, 171, 61, 245, 249, 178, 61, 42, 135, 72, 62, 8, 175, 251, 190, 69, 18, 196, 190, 133, 65, 90, 190, 55, 178, 22, 189, 69, 74, 7, 61, 214, 226, 156, 61, 105, 29, 130, 190, 242, 39, 153, 61, 172, 98, 55, 62, 71, 241, 87, 61, 7, 193, 198, 189, 204, 228, 186, 61, 151, 152, 242, 187, 39, 233, 131, 190, 54, 134, 147, 58, 69, 164, 137, 61, 64, 245, 125, 62, 111, 207, 14, 61, 236, 225, 159, 189, 247, 74, 147, 189, 224, 144, 60, 61, 152, 68, 125, 59, 151, 46, 3, 63, 232, 116, 224, 61, 179, 155, 189, 59, 137, 251, 73, 59, 206, 175, 45, 60, 141, 197, 232, 189, 247, 133, 242, 61, 49, 189, 57, 190, 38, 109, 7, 62, 20, 150, 228, 188, 33, 247, 218, 59, 165, 157, 178, 59, 80, 56, 109, 61, 105, 2, 107, 189, 10, 184, 36, 190, 102, 63, 43, 190, 13, 68, 153, 189, 213, 122, 85, 61, 29, 145, 26, 188, 162, 189, 26, 190, 137, 20, 8, 62, 136, 111, 232, 61, 209, 51, 6, 62, 11, 186, 222, 59, 36, 20, 32, 61, 187, 41, 38, 189, 222, 253, 45, 190, 161, 187, 87, 189, 3, 96, 109, 190, 141, 67, 4, 190, 220, 25, 185, 189, 227, 57, 126, 61, 12, 201, 1, 62, 228, 240, 23, 189, 135, 129, 220, 60, 123, 140, 237, 61, 85, 152, 74, 62, 91, 234, 250, 188, 3, 51, 194, 60, 192, 251, 78, 61, 206, 205, 134, 189, 32, 155, 63, 189, 24, 140, 217, 189, 66, 116, 2, 62, 209, 129, 89, 61, 127, 170, 246, 59, 96, 173, 5, 62, 167, 46, 114, 190, 67, 139, 141, 61, 78, 73, 238, 60, 194, 125, 82, 62, 91, 82, 162, 188, 31, 65, 54, 62, 14, 62, 47, 189, 250, 215, 29, 190, 121, 126, 62, 189, 207, 222, 160, 61, 179, 40, 25, 190, 185, 6, 18, 62, 25, 222, 130, 61, 251, 92, 88, 62, 191, 85, 147, 188, 131, 128, 1, 61, 152, 141, 227, 59, 136, 106, 240, 190, 88, 253, 148, 60, 45, 181, 174, 62, 127, 201, 94, 188, 117, 119, 32, 61, 236, 206, 114, 62, 79, 108, 183, 190, 152, 13, 242, 189, 172, 255, 196, 189, 5, 112, 13, 190, 33, 132, 18, 62, 216, 76, 73, 62, 14, 88, 29, 62, 29, 97, 89, 62, 118, 74, 0, 62, 201, 105, 139, 60, 173, 211, 136, 62, 252, 41, 82, 62, 63, 246, 35, 61, 180, 240, 173, 62, 83, 15, 55, 62, 28, 58, 47, 189, 174, 67, 58, 190, 217, 102, 102, 61, 16, 29, 103, 189, 201, 33, 21, 62, 211, 129, 105, 62, 27, 207, 76, 62, 56, 12, 224, 189, 53, 73, 116, 190, 230, 162, 104, 190, 74, 201, 176, 62, 26, 196, 152, 190, 69, 86, 115, 190, 181, 70, 227, 189, 52, 171, 27, 190, 122, 69, 35, 190, 162, 146, 186, 188, 40, 90, 9, 190, 249, 190, 160, 61, 239, 20, 68, 189, 64, 81, 219, 61, 234, 148, 53, 189, 103, 59, 229, 61, 176, 18, 106, 61, 154, 141, 226, 189, 38, 6, 6, 190, 137, 126, 198, 189, 45, 25, 32, 189, 90, 16, 253, 61, 97, 53, 80, 190, 165, 18, 26, 62, 61, 174, 71, 190, 228, 2, 149, 189, 169, 87, 100, 189, 244, 186, 58, 190, 190, 159, 4, 189, 19, 115, 0, 61, 46, 91, 26, 188, 34, 70, 153, 189, 79, 249, 254, 188, 234, 171, 129, 61, 70, 225, 122, 189, 201, 189, 153, 189, 228, 249, 234, 189, 110, 186, 183, 61, 172, 33, 165, 190, 76, 152, 143, 62, 93, 117, 55, 191, 41, 60, 201, 60, 235, 225, 52, 190, 6, 247, 27, 62, 155, 97, 157, 189, 254, 172, 140, 189, 232, 6, 174, 190, 94, 45, 114, 190, 22, 193, 157, 62, 113, 139, 210, 62, 208, 180, 134, 62, 174, 102, 136, 61, 33, 202, 20, 191, 9, 137, 106, 190, 174, 254, 43, 62, 90, 131, 144, 61, 199, 35, 141, 60, 175, 35, 46, 190, 154, 233, 9, 190, 186, 35, 25, 190, 187, 247, 157, 61, 144, 238, 97, 190, 189, 118, 174, 62, 35, 75, 113, 188, 136, 80, 242, 188, 183, 242, 209, 61, 212, 6, 130, 187, 188, 98, 211, 189, 95, 91, 77, 62, 25, 68, 59, 188, 85, 48, 129, 62, 42, 116, 147, 190, 51, 26, 149, 62, 117, 80, 217, 189, 109, 33, 10, 62, 171, 120, 121, 62, 242, 219, 46, 190, 9, 137, 218, 61, 175, 53, 17, 192, 139, 254, 228, 189, 131, 93, 64, 190, 96, 60, 225, 191, 122, 227, 58, 191, 110, 151, 213, 62, 185, 99, 226, 189, 36, 99, 227, 62, 218, 165, 133, 62, 20, 138, 155, 190, 196, 181, 54, 191, 57, 166, 235, 62, 203, 8, 130, 189, 58, 200, 191, 190, 55, 236, 161, 190, 30, 145, 29, 190, 194, 190, 188, 190, 44, 51, 86, 62, 218, 204, 41, 61, 191, 38, 174, 190, 20, 63, 217, 189, 126, 76, 36, 190, 208, 210, 149, 190, 242, 87, 192, 190, 231, 135, 136, 190, 132, 84, 131, 189, 148, 128, 161, 190, 213, 214, 85, 61, 30, 127, 191, 62, 127, 30, 64, 62, 218, 15, 24, 190, 164, 6, 15, 62, 119, 118, 250, 190, 233, 230, 198, 190, 22, 118, 219, 189, 246, 64, 96, 62, 125, 203, 17, 189, 223, 225, 137, 62, 13, 46, 193, 190, 23, 134, 161, 188, 94, 231, 27, 189, 85, 101, 137, 190, 60, 78, 54, 190, 129, 131, 105, 62, 210, 120, 113, 62, 203, 103, 184, 190, 7, 171, 9, 61, 201, 44, 79, 189, 90, 155, 219, 60, 201, 83, 196, 189, 145, 185, 201, 61, 42, 166, 77, 62, 82, 1, 117, 62, 254, 97, 68, 189, 141, 160, 210, 62, 27, 105, 162, 186, 217, 44, 52, 190, 86, 229, 70, 189, 254, 44, 198, 60, 252, 133, 253, 59, 186, 25, 224, 61, 178, 41, 189, 62, 250, 153, 23, 190, 223, 196, 205, 61, 172, 152, 204, 191, 191, 101, 136, 190, 226, 140, 105, 61, 55, 121, 42, 62, 129, 156, 10, 61, 132, 150, 2, 62, 131, 138, 88, 190, 27, 188, 90, 188, 13, 231, 33, 62, 26, 29, 134, 189, 255, 199, 17, 61, 28, 56, 184, 189, 194, 26, 186, 61, 27, 35, 17, 190, 81, 84, 102, 189, 206, 36, 146, 189, 150, 144, 14, 62, 222, 186, 169, 190, 71, 10, 37, 62, 26, 62, 44, 189, 110, 221, 243, 61, 187, 52, 226, 188, 114, 233, 87, 61, 111, 49, 216, 189, 231, 18, 184, 190, 161, 199, 157, 61, 130, 91, 13, 191, 59, 243, 183, 188, 157, 167, 209, 189, 166, 47, 22, 62, 178, 67, 191, 189, 153, 197, 45, 62, 243, 57, 155, 190, 192, 218, 157, 190, 187, 32, 206, 188, 66, 207, 162, 61, 100, 155, 138, 61, 66, 148, 135, 188, 181, 92, 70, 191, 87, 141, 16, 190, 15, 138, 219, 61, 221, 236, 149, 190, 143, 51, 237, 61, 255, 149, 31, 62, 120, 183, 23, 62, 1, 209, 63, 190, 24, 209, 196, 62, 240, 245, 68, 188, 172, 241, 158, 62, 43, 59, 70, 190, 231, 89, 165, 61, 212, 240, 139, 60, 117, 87, 151, 61, 148, 29, 69, 190, 228, 154, 12, 62, 155, 73, 114, 61, 240, 201, 133, 61, 205, 111, 235, 189, 210, 230, 253, 61, 228, 128, 135, 188, 124, 32, 226, 190, 57, 87, 56, 190, 235, 162, 38, 62, 84, 138, 185, 190, 218, 145, 136, 62, 238, 224, 166, 62, 227, 53, 128, 62, 255, 41, 158, 61, 27, 115, 23, 62, 23, 220, 67, 190, 37, 174, 172, 62, 131, 246, 71, 62, 202, 113, 36, 60, 71, 171, 215, 188, 254, 98, 47, 62, 8, 205, 248, 60, 245, 237, 193, 190, 197, 163, 108, 60, 83, 251, 51, 190, 62, 6, 105, 189, 40, 94, 213, 189, 72, 192, 111, 189, 70, 84, 78, 62, 236, 220, 221, 189, 253, 194, 177, 190, 185, 140, 74, 188, 89, 27, 52, 191, 219, 79, 130, 190, 120, 36, 64, 188, 242, 233, 75, 190, 97, 205, 47, 187, 98, 68, 230, 187, 65, 194, 181, 188, 49, 42, 240, 61, 174, 71, 156, 61, 133, 176, 48, 190, 34, 157, 11, 190, 157, 70, 106, 189, 153, 222, 4, 189, 81, 253, 59, 189, 98, 186, 93, 61, 124, 124, 15, 190, 153, 198, 48, 60, 11, 176, 217, 189, 66, 117, 153, 60, 251, 146, 31, 190, 246, 53, 209, 188, 58, 131, 163, 61, 143, 133, 203, 189, 0, 211, 88, 189, 67, 207, 23, 60, 133, 251, 173, 61, 52, 138, 56, 189, 211, 51, 180, 189, 247, 185, 65, 189, 102, 41, 187, 60, 139, 21, 95, 189, 93, 86, 205, 188, 12, 112, 13, 62, 122, 65, 232, 189, 131, 116, 252, 188, 58, 49, 61, 62, 180, 139, 192, 190, 168, 20, 151, 190, 11, 114, 157, 62, 159, 150, 1, 62, 205, 182, 134, 189, 174, 11, 48, 190, 91, 139, 92, 189, 119, 70, 7, 191, 59, 225, 117, 61, 52, 107, 39, 62, 212, 152, 6, 61, 124, 190, 103, 189, 82, 201, 44, 191, 221, 156, 114, 62, 1, 175, 104, 62, 14, 245, 26, 62, 90, 129, 194, 61, 186, 244, 70, 62, 234, 6, 88, 61, 39, 175, 66, 188, 14, 162, 246, 189, 20, 33, 1, 191, 200, 50, 167, 189, 246, 203, 237, 61, 245, 195, 25, 189, 241, 52, 91, 62, 149, 47, 240, 61, 68, 59, 246, 61, 147, 78, 94, 188, 55, 198, 106, 189, 184, 149, 160, 189, 140, 224, 4, 189, 82, 189, 31, 191, 25, 44, 63, 62, 240, 174, 78, 61, 137, 11, 149, 62, 150, 13, 7, 190, 176, 81, 214, 61, 172, 24, 71, 190, 135, 29, 27, 190, 172, 30, 140, 190, 52, 189, 233, 61, 191, 64, 179, 189, 206, 54, 205, 188, 51, 55, 143, 190, 134, 108, 72, 189, 42, 241, 95, 189, 83, 3, 199, 189, 165, 86, 243, 60, 109, 103, 16, 61, 53, 89, 79, 189, 250, 12, 66, 190, 60, 99, 27, 61, 18, 156, 138, 189, 186, 62, 183, 62, 168, 215, 151, 61, 226, 213, 157, 60, 179, 113, 101, 61, 15, 57, 62, 62, 213, 235, 233, 60, 27, 42, 178, 62, 136, 59, 9, 190, 197, 149, 149, 190, 216, 77, 244, 61, 84, 204, 193, 189, 236, 35, 161, 62, 220, 128, 16, 61, 19, 235, 165, 62, 162, 51, 139, 189, 148, 208, 151, 61, 121, 161, 135, 191, 122, 115, 173, 59, 56, 62, 198, 58, 118, 250, 218, 61, 85, 118, 182, 190, 49, 41, 117, 62, 241, 216, 134, 190, 88, 1, 153, 61, 10, 193, 36, 62, 189, 226, 33, 189, 67, 9, 74, 190, 83, 129, 130, 61, 207, 82, 54, 62, 216, 225, 165, 190, 117, 170, 136, 189, 216, 202, 18, 62, 178, 238, 38, 63, 140, 246, 210, 60, 0, 134, 174, 61, 168, 120, 223, 61, 217, 78, 0, 62, 206, 252, 134, 60, 120, 175, 208, 62, 101, 185, 35, 189, 245, 108, 140, 62, 120, 110, 31, 62, 18, 156, 114, 190, 199, 28, 233, 62, 13, 109, 60, 190, 103, 6, 16, 190, 187, 48, 113, 189, 242, 168, 100, 190, 87, 122, 242, 189, 82, 153, 109, 62, 188, 189, 17, 190, 137, 88, 175, 190, 46, 131, 139, 189, 252, 99, 10, 62, 16, 245, 149, 62, 61, 117, 158, 190, 35, 64, 101, 190, 174, 192, 189, 61, 200, 106, 96, 62, 110, 66, 19, 62, 113, 239, 14, 189, 134, 230, 78, 61, 74, 240, 254, 188, 126, 184, 140, 62, 186, 5, 215, 62, 98, 237, 131, 62, 224, 25, 102, 190, 224, 77, 26, 189, 42, 191, 94, 188, 165, 152, 30, 63, 244, 238, 118, 191, 185, 99, 37, 191, 84, 104, 25, 189, 232, 184, 230, 58, 25, 153, 167, 62, 239, 100, 42, 62, 122, 235, 201, 188, 35, 247, 195, 190, 106, 52, 147, 61, 104, 136, 219, 189, 156, 22, 129, 62, 132, 212, 144, 62, 80, 66, 114, 61, 164, 242, 203, 189, 109, 193, 116, 62, 118, 109, 166, 190, 172, 249, 170, 62, 218, 82, 54, 62, 236, 117, 23, 60, 178, 116, 23, 62, 82, 212, 66, 62, 94, 229, 10, 190, 89, 208, 224, 188, 239, 102, 143, 62, 133, 11, 238, 187, 239, 195, 214, 60, 114, 65, 178, 189, 185, 241, 93, 62, 2, 55, 215, 61, 66, 192, 185, 61, 225, 73, 150, 189, 247, 208, 204, 188, 53, 11, 84, 191, 243, 105, 57, 190, 92, 182, 60, 62, 102, 103, 246, 189, 198, 110, 49, 62, 108, 185, 47, 62, 250, 165, 82, 190, 37, 171, 167, 190, 232, 251, 120, 189, 183, 146, 142, 190, 19, 89, 248, 62, 199, 49, 235, 62, 167, 72, 109, 62, 152, 41, 133, 189, 202, 232, 52, 61, 43, 112, 133, 190, 211, 63, 244, 62, 251, 104, 147, 62, 88, 18, 91, 61, 57, 147, 37, 62, 169, 101, 26, 62, 52, 206, 58, 190, 138, 53, 219, 189, 236, 113, 218, 62, 129, 222, 221, 190, 95, 151, 137, 62, 87, 255, 10, 62, 200, 24, 28, 62, 51, 106, 188, 60, 137, 54, 30, 190, 186, 235, 237, 190, 171, 229, 140, 190, 24, 147, 33, 191, 232, 191, 183, 190, 249, 24, 13, 61, 171, 135, 1, 189, 208, 179, 84, 62, 223, 220, 244, 61, 15, 27, 129, 60, 90, 22, 78, 190, 107, 129, 20, 187, 91, 171, 180, 60, 14, 246, 232, 188, 226, 99, 144, 62, 160, 186, 25, 62, 141, 221, 134, 190, 50, 19, 215, 61, 196, 6, 140, 190, 195, 135, 202, 62, 170, 55, 19, 62, 94, 22, 22, 190, 85, 0, 82, 62, 230, 231, 4, 62, 101, 174, 36, 190, 248, 179, 249, 188, 102, 111, 91, 62, 58, 133, 72, 61, 154, 55, 151, 61, 181, 117, 86, 187, 181, 29, 191, 62, 179, 114, 144, 189, 101, 230, 214, 189, 144, 8, 57, 190, 23, 1, 194, 61, 180, 139, 104, 191, 241, 155, 201, 190, 137, 76, 62, 62, 31, 28, 140, 189, 244, 50, 116, 190, 212, 61, 91, 62, 73, 63, 42, 190, 10, 250, 61, 189, 197, 164, 132, 188, 254, 111, 240, 189, 220, 144, 128, 61, 145, 104, 164, 62, 23, 172, 108, 61, 153, 236, 20, 191, 120, 50, 0, 60, 104, 46, 165, 61, 201, 19, 106, 62, 255, 201, 179, 189, 204, 20, 20, 191, 54, 103, 163, 61, 196, 86, 110, 189, 96, 218, 62, 62, 157, 57, 192, 61, 38, 211, 149, 189, 14, 14, 39, 60, 14, 230, 93, 61, 100, 60, 247, 62, 112, 78, 4, 62, 89, 240, 28, 191, 13, 23, 131, 189, 208, 98, 233, 189, 105, 122, 0, 63, 68, 252, 32, 191, 204, 51, 56, 191, 203, 71, 58, 61, 232, 218, 190, 60, 57, 39, 68, 62, 234, 195, 29, 190, 203, 43, 108, 185, 97, 62, 100, 190, 147, 187, 19, 62, 71, 127, 159, 61, 135, 90, 140, 61, 135, 92, 64, 61, 60, 219, 58, 189, 20, 132, 10, 62, 148, 175, 112, 62, 240, 49, 168, 190, 253, 71, 57, 62, 216, 119, 5, 62, 39, 68, 204, 60, 6, 99, 51, 61, 78, 115, 83, 62, 161, 104, 215, 189, 75, 18, 223, 61, 78, 22, 237, 62, 157, 52, 14, 62, 209, 61, 148, 61, 27, 109, 89, 62, 91, 123, 29, 62, 90, 72, 138, 62, 133, 20, 83, 190, 206, 161, 35, 61, 71, 48, 51, 61, 150, 32, 28, 191, 25, 27, 119, 190, 3, 151, 246, 190, 240, 78, 5, 190, 189, 100, 94, 190, 102, 50, 98, 188, 208, 75, 86, 62, 227, 131, 50, 62, 55, 64, 34, 62, 202, 119, 129, 62, 0, 93, 60, 191, 249, 25, 41, 190, 181, 194, 83, 191, 131, 240, 82, 61, 107, 102, 2, 190, 216, 111, 5, 62, 176, 33, 221, 190, 255, 10, 46, 62, 62, 247, 134, 60, 151, 116, 107, 191, 34, 10, 120, 190, 148, 2, 166, 61, 35, 2, 238, 189, 20, 248, 134, 190, 87, 96, 75, 61, 225, 205, 136, 190, 10, 188, 8, 63, 100, 180, 67, 61, 90, 76, 196, 61, 120, 115, 140, 61, 143, 101, 112, 190, 212, 196, 138, 190, 224, 31, 15, 62, 45, 200, 63, 62, 204, 187, 145, 190, 232, 7, 110, 61, 201, 113, 209, 190, 33, 186, 22, 190, 97, 4, 124, 59, 243, 134, 185, 62, 64, 116, 35, 190, 70, 65, 209, 188, 229, 240, 249, 190, 27, 43, 219, 189, 128, 152, 251, 60, 130, 181, 251, 61, 108, 100, 136, 189, 138, 11, 138, 62, 113, 99, 3, 191, 21, 206, 206, 189, 228, 63, 90, 61, 100, 3, 115, 61, 251, 143, 209, 189, 223, 23, 117, 62, 1, 173, 62, 190, 203, 31, 9, 191, 221, 159, 146, 188, 44, 74, 16, 188, 152, 69, 139, 61, 19, 80, 109, 190, 198, 99, 106, 62, 192, 246, 147, 61, 45, 9, 119, 62, 138, 28, 3, 188, 172, 187, 189, 62, 120, 33, 11, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {195, 10, 73, 190, 167, 43, 19, 190, 252, 8, 119, 62, 243, 111, 37, 62, 55, 5, 221, 188, 135, 22, 186, 61, 169, 120, 215, 189, 101, 212, 166, 62, 91, 8, 96, 62, 199, 166, 5, 62, 154, 168, 18, 190, 104, 90, 140, 62, 16, 22, 50, 62, 21, 168, 232, 61, 17, 116, 93, 62, 28, 188, 30, 188, 1, 45, 49, 62, 186, 179, 20, 62, 70, 251, 52, 62, 211, 60, 87, 61, 208, 57, 221, 189, 28, 156, 224, 59, 117, 3, 194, 59, 179, 46, 100, 61, 173, 144, 153, 189, 24, 27, 122, 61, 132, 92, 77, 62, 53, 71, 151, 62, 97, 245, 141, 190, 26, 48, 32, 62, 81, 156, 160, 61, 166, 121, 10, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 101, 34, 63, 73, 28, 106, 62, 42, 27, 82, 63, 23, 149, 85, 63, 78, 227, 215, 190, 2, 116, 81, 63, 60, 152, 105, 62, 62, 141, 79, 190, 197, 235, 96, 191, 81, 3, 126, 62, 95, 61, 240, 58, 12, 103, 205, 187, 111, 133, 151, 190, 5, 241, 248, 59, 174, 243, 196, 62, 81, 232, 195, 63, 179, 82, 176, 62, 77, 251, 10, 62, 239, 18, 208, 62, 35, 123, 57, 191, 224, 242, 172, 61, 48, 128, 34, 62, 17, 195, 22, 62, 145, 204, 158, 62, 5, 71, 47, 191, 247, 244, 88, 190, 5, 112, 47, 191, 228, 27, 150, 190, 241, 216, 14, 63, 79, 104, 202, 189, 161, 144, 71, 63, 140, 110, 199, 62, 70, 69, 106, 61, 15, 186, 198, 61, 77, 2, 86, 62, 170, 133, 71, 62, 215, 166, 189, 190, 131, 88, 45, 62, 67, 169, 177, 188, 31, 117, 109, 190, 5, 115, 65, 61, 184, 88, 50, 62, 134, 127, 246, 61, 216, 218, 30, 190, 14, 201, 128, 189, 144, 84, 252, 61, 109, 198, 46, 190, 101, 14, 14, 61, 119, 115, 13, 62, 135, 26, 146, 190, 105, 116, 142, 189, 116, 104, 190, 62, 220, 197, 210, 61, 20, 218, 77, 61, 176, 210, 196, 188, 230, 90, 116, 190, 48, 30, 149, 62, 63, 236, 11, 59, 236, 45, 78, 62, 200, 136, 125, 61, 39, 118, 125, 62, 32, 233, 92, 190, 96, 180, 128, 62, 213, 22, 4, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 48, 164, 189, 83, 191, 198, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {208, 249, 65, 63, 150, 25, 65, 63, 234, 117, 39, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {191, 168, 72, 192, 224, 243, 3, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0012/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}