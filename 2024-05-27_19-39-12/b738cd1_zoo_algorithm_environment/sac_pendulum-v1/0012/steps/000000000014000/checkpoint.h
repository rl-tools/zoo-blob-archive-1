// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 88, 241, 62, 168, 59, 72, 63, 167, 29, 31, 63, 107, 154, 184, 61, 29, 98, 226, 190, 19, 203, 171, 62, 220, 138, 24, 191, 173, 37, 35, 63, 103, 154, 108, 62, 102, 144, 254, 62, 214, 242, 140, 63, 41, 53, 63, 62, 85, 99, 36, 191, 142, 145, 187, 63, 38, 120, 187, 62, 56, 24, 220, 62, 65, 77, 193, 62, 172, 116, 50, 191, 86, 247, 206, 62, 38, 255, 179, 190, 74, 65, 143, 58, 162, 135, 84, 191, 8, 2, 116, 63, 184, 15, 217, 62, 160, 177, 10, 190, 218, 223, 230, 191, 156, 224, 179, 190, 171, 68, 35, 63, 243, 93, 148, 63, 11, 162, 184, 61, 75, 85, 34, 190, 200, 133, 40, 191, 137, 138, 76, 62, 113, 40, 193, 62, 156, 94, 132, 191, 109, 35, 64, 190, 206, 79, 90, 62, 113, 229, 235, 62, 223, 53, 243, 190, 134, 240, 111, 189, 54, 25, 239, 60, 99, 86, 18, 191, 85, 221, 18, 63, 44, 180, 159, 63, 26, 222, 139, 62, 169, 91, 216, 190, 176, 47, 51, 191, 82, 188, 176, 190, 52, 20, 212, 188, 244, 212, 72, 191, 13, 88, 44, 190, 74, 60, 94, 62, 147, 22, 244, 62, 38, 226, 43, 63, 2, 183, 134, 62, 12, 37, 67, 63, 55, 103, 51, 191, 147, 188, 239, 189, 28, 182, 141, 62, 231, 244, 21, 191, 255, 240, 9, 62, 105, 169, 243, 62, 24, 153, 198, 62, 243, 48, 64, 190, 5, 137, 30, 190, 100, 213, 3, 191, 74, 229, 23, 62, 227, 139, 60, 190, 106, 93, 253, 62, 118, 163, 149, 62, 28, 203, 102, 63, 231, 58, 238, 62, 35, 62, 80, 63, 171, 119, 226, 62, 7, 222, 183, 61, 227, 51, 90, 191, 21, 19, 79, 63, 47, 194, 192, 190, 243, 10, 21, 191, 167, 54, 16, 191, 108, 24, 32, 59, 90, 203, 1, 62, 134, 120, 61, 61, 80, 171, 64, 62, 128, 59, 40, 190, 131, 153, 205, 190, 139, 77, 57, 63, 190, 22, 56, 63, 117, 86, 166, 187, 113, 87, 97, 62, 28, 213, 5, 63, 204, 190, 138, 191, 51, 54, 136, 190, 14, 85, 211, 62, 191, 75, 119, 191, 199, 145, 165, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 238, 201, 190, 56, 120, 171, 62, 144, 244, 44, 63, 107, 40, 91, 62, 137, 248, 111, 61, 158, 192, 171, 61, 101, 192, 19, 191, 157, 96, 65, 62, 160, 84, 188, 190, 41, 29, 131, 190, 117, 75, 130, 61, 225, 225, 141, 62, 114, 216, 50, 62, 193, 160, 130, 190, 245, 240, 27, 190, 34, 116, 6, 63, 181, 195, 198, 62, 227, 14, 77, 62, 171, 124, 146, 62, 137, 99, 118, 190, 63, 118, 213, 62, 47, 163, 179, 190, 70, 176, 55, 63, 52, 12, 164, 187, 173, 254, 101, 190, 61, 236, 103, 62, 250, 65, 19, 63, 11, 143, 178, 62, 26, 105, 170, 189, 124, 5, 0, 191, 237, 139, 188, 189, 145, 230, 108, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 83, 157, 60, 228, 16, 182, 60, 62, 223, 79, 188, 47, 172, 220, 62, 165, 111, 33, 62, 101, 206, 26, 190, 225, 97, 38, 190, 4, 193, 151, 189, 226, 138, 2, 62, 74, 247, 180, 62, 173, 207, 166, 61, 207, 199, 146, 191, 23, 82, 12, 62, 110, 84, 42, 62, 229, 242, 2, 63, 255, 14, 240, 189, 142, 80, 156, 191, 244, 131, 67, 62, 156, 2, 218, 61, 115, 27, 20, 62, 29, 72, 136, 188, 51, 32, 31, 62, 126, 191, 129, 188, 243, 27, 97, 62, 116, 167, 220, 62, 213, 132, 196, 190, 172, 77, 44, 191, 225, 176, 177, 61, 254, 223, 225, 189, 183, 168, 151, 61, 155, 98, 148, 191, 64, 135, 112, 191, 29, 54, 142, 60, 50, 69, 116, 188, 255, 72, 134, 190, 171, 185, 195, 61, 133, 28, 155, 62, 1, 141, 75, 62, 191, 68, 132, 189, 35, 182, 215, 189, 38, 233, 227, 188, 132, 74, 55, 61, 182, 159, 22, 191, 0, 35, 107, 190, 212, 64, 144, 62, 244, 17, 218, 61, 47, 154, 131, 189, 152, 78, 9, 62, 232, 59, 84, 190, 43, 54, 17, 190, 14, 102, 12, 62, 15, 110, 50, 62, 33, 168, 6, 190, 155, 104, 11, 61, 34, 41, 98, 190, 31, 80, 15, 61, 223, 192, 242, 59, 182, 195, 88, 62, 255, 180, 155, 190, 248, 164, 161, 189, 151, 123, 184, 190, 221, 137, 176, 190, 220, 232, 59, 62, 237, 166, 191, 61, 118, 206, 182, 190, 138, 126, 176, 189, 237, 22, 59, 189, 232, 166, 133, 189, 227, 245, 177, 62, 86, 62, 97, 62, 12, 110, 6, 190, 150, 209, 128, 62, 117, 118, 191, 191, 66, 138, 95, 191, 228, 139, 198, 59, 101, 216, 224, 62, 89, 50, 213, 190, 65, 99, 210, 62, 112, 29, 37, 191, 123, 207, 53, 190, 5, 205, 30, 61, 45, 92, 143, 189, 138, 123, 243, 190, 239, 9, 181, 62, 244, 14, 131, 56, 77, 206, 86, 190, 15, 148, 209, 61, 251, 50, 213, 189, 191, 122, 129, 62, 197, 169, 32, 190, 47, 162, 132, 62, 41, 191, 140, 59, 227, 91, 121, 62, 4, 125, 202, 190, 120, 53, 181, 62, 233, 63, 21, 189, 16, 57, 41, 190, 157, 229, 179, 62, 187, 19, 18, 191, 87, 24, 219, 190, 126, 47, 26, 191, 180, 174, 68, 190, 72, 89, 0, 62, 20, 22, 146, 189, 84, 91, 143, 189, 212, 29, 95, 190, 165, 160, 239, 61, 42, 132, 1, 63, 166, 50, 202, 190, 25, 110, 198, 190, 119, 65, 155, 191, 27, 144, 16, 190, 10, 229, 161, 62, 86, 191, 22, 62, 36, 144, 40, 190, 225, 167, 146, 190, 87, 49, 199, 189, 61, 32, 82, 191, 234, 168, 137, 188, 198, 247, 174, 190, 112, 136, 214, 189, 60, 108, 24, 191, 110, 248, 35, 62, 14, 174, 11, 189, 98, 117, 76, 62, 3, 207, 21, 62, 87, 96, 201, 62, 17, 50, 232, 189, 182, 185, 169, 61, 176, 206, 163, 61, 159, 103, 155, 61, 33, 208, 218, 62, 190, 114, 8, 191, 250, 189, 58, 62, 128, 236, 199, 61, 8, 144, 178, 190, 212, 197, 14, 191, 35, 170, 253, 61, 169, 154, 227, 189, 181, 69, 94, 190, 36, 158, 171, 188, 16, 237, 12, 62, 221, 59, 173, 62, 150, 78, 95, 190, 254, 154, 151, 190, 85, 121, 252, 61, 70, 81, 125, 61, 33, 147, 199, 60, 132, 94, 121, 187, 113, 120, 59, 190, 200, 4, 79, 62, 201, 94, 242, 60, 105, 34, 93, 62, 174, 187, 77, 62, 247, 73, 29, 190, 142, 240, 139, 62, 230, 231, 150, 189, 35, 32, 214, 62, 201, 133, 66, 191, 231, 233, 243, 190, 173, 209, 155, 190, 228, 249, 152, 189, 181, 222, 144, 62, 146, 3, 188, 190, 30, 178, 16, 62, 83, 60, 51, 61, 170, 127, 34, 190, 7, 36, 164, 62, 153, 60, 246, 191, 56, 62, 10, 191, 8, 37, 196, 189, 94, 100, 10, 61, 171, 108, 210, 190, 98, 216, 32, 63, 29, 52, 233, 190, 189, 201, 20, 190, 247, 246, 116, 62, 108, 16, 169, 189, 43, 233, 30, 191, 45, 145, 232, 62, 157, 139, 42, 189, 114, 13, 71, 190, 251, 157, 145, 62, 129, 202, 151, 190, 120, 109, 180, 61, 115, 158, 145, 190, 128, 118, 15, 62, 141, 61, 132, 61, 45, 62, 0, 62, 182, 180, 40, 191, 107, 0, 250, 62, 105, 161, 4, 191, 88, 173, 56, 190, 80, 227, 180, 61, 66, 64, 209, 190, 102, 110, 50, 189, 155, 78, 61, 61, 148, 234, 74, 62, 26, 237, 223, 61, 152, 135, 11, 190, 215, 129, 37, 191, 6, 8, 239, 189, 36, 192, 64, 190, 189, 183, 224, 61, 20, 211, 203, 188, 191, 203, 137, 62, 248, 81, 154, 190, 193, 151, 212, 60, 66, 69, 10, 59, 213, 55, 40, 190, 40, 225, 157, 60, 35, 65, 159, 62, 27, 23, 16, 190, 251, 45, 188, 190, 234, 20, 87, 62, 203, 98, 133, 189, 76, 221, 162, 62, 213, 38, 42, 190, 48, 20, 32, 62, 82, 123, 22, 62, 125, 22, 87, 62, 170, 165, 68, 61, 231, 199, 71, 62, 29, 75, 49, 190, 130, 40, 248, 61, 7, 178, 175, 189, 242, 47, 145, 62, 37, 58, 194, 187, 236, 206, 75, 190, 215, 191, 169, 61, 190, 26, 69, 188, 30, 15, 181, 61, 169, 56, 14, 62, 214, 167, 127, 62, 5, 124, 78, 190, 170, 185, 180, 62, 41, 205, 29, 62, 221, 20, 40, 190, 247, 143, 5, 189, 75, 203, 137, 61, 52, 85, 136, 61, 112, 118, 159, 61, 59, 195, 253, 61, 129, 75, 154, 61, 216, 158, 9, 62, 176, 85, 222, 189, 147, 123, 42, 61, 152, 42, 2, 62, 120, 232, 100, 189, 38, 168, 16, 188, 89, 159, 113, 62, 216, 66, 43, 190, 156, 192, 44, 190, 127, 224, 0, 62, 228, 5, 166, 190, 231, 208, 6, 60, 215, 183, 32, 62, 171, 218, 44, 62, 155, 58, 82, 62, 84, 143, 127, 62, 107, 161, 154, 191, 102, 200, 194, 190, 127, 96, 221, 61, 234, 216, 101, 191, 229, 227, 142, 62, 201, 44, 142, 62, 59, 159, 46, 62, 165, 165, 58, 190, 25, 99, 18, 62, 43, 97, 202, 189, 38, 85, 212, 62, 81, 175, 177, 62, 239, 10, 172, 188, 126, 211, 204, 61, 140, 66, 195, 60, 109, 8, 10, 61, 103, 132, 186, 190, 244, 248, 165, 62, 249, 151, 195, 189, 193, 175, 161, 62, 135, 227, 30, 62, 125, 115, 241, 61, 63, 25, 183, 62, 57, 209, 193, 189, 73, 19, 12, 191, 38, 194, 195, 62, 6, 148, 13, 191, 173, 213, 4, 190, 223, 182, 178, 60, 145, 86, 29, 61, 166, 12, 210, 190, 115, 231, 48, 190, 110, 226, 173, 62, 250, 59, 192, 61, 245, 249, 178, 61, 67, 12, 129, 62, 244, 109, 51, 191, 69, 226, 245, 190, 149, 75, 17, 190, 202, 143, 255, 189, 38, 253, 89, 61, 254, 178, 2, 62, 28, 34, 172, 190, 112, 48, 171, 61, 247, 25, 209, 61, 25, 162, 146, 61, 61, 130, 157, 189, 112, 150, 23, 62, 110, 52, 1, 189, 22, 6, 64, 190, 206, 12, 35, 186, 230, 198, 95, 61, 63, 253, 70, 62, 174, 170, 187, 61, 142, 35, 236, 189, 238, 99, 204, 189, 206, 43, 226, 61, 33, 35, 55, 189, 73, 95, 217, 62, 46, 34, 114, 61, 179, 155, 189, 59, 137, 251, 73, 59, 206, 175, 45, 60, 141, 197, 232, 189, 247, 133, 242, 61, 49, 189, 57, 190, 38, 109, 7, 62, 20, 150, 228, 188, 33, 247, 218, 59, 165, 157, 178, 59, 80, 56, 109, 61, 105, 2, 107, 189, 10, 184, 36, 190, 102, 63, 43, 190, 13, 68, 153, 189, 213, 122, 85, 61, 29, 145, 26, 188, 162, 189, 26, 190, 137, 20, 8, 62, 136, 111, 232, 61, 209, 51, 6, 62, 11, 186, 222, 59, 36, 20, 32, 61, 187, 41, 38, 189, 222, 253, 45, 190, 161, 187, 87, 189, 3, 96, 109, 190, 141, 67, 4, 190, 220, 25, 185, 189, 227, 57, 126, 61, 12, 201, 1, 62, 228, 240, 23, 189, 223, 145, 187, 60, 191, 132, 188, 61, 227, 18, 80, 62, 195, 107, 15, 188, 17, 116, 90, 60, 85, 140, 152, 60, 206, 205, 134, 189, 221, 42, 55, 189, 158, 10, 24, 190, 43, 176, 30, 62, 148, 173, 196, 60, 147, 8, 48, 189, 34, 208, 201, 61, 4, 128, 134, 190, 190, 80, 155, 61, 112, 98, 213, 60, 222, 218, 60, 62, 215, 135, 215, 188, 200, 20, 23, 62, 141, 129, 137, 189, 196, 194, 36, 190, 65, 213, 157, 189, 66, 26, 117, 61, 235, 174, 19, 190, 131, 184, 39, 62, 39, 162, 122, 61, 229, 169, 97, 62, 193, 233, 186, 188, 220, 20, 207, 59, 14, 96, 188, 186, 38, 174, 16, 191, 154, 165, 125, 189, 189, 161, 180, 62, 167, 177, 227, 188, 82, 134, 174, 60, 97, 122, 112, 62, 191, 181, 213, 190, 241, 52, 12, 190, 172, 255, 196, 189, 216, 82, 32, 190, 104, 228, 81, 62, 24, 75, 81, 62, 55, 141, 27, 62, 174, 161, 80, 62, 132, 117, 188, 61, 205, 186, 54, 188, 148, 99, 142, 62, 178, 204, 60, 62, 0, 145, 31, 61, 202, 201, 170, 62, 139, 99, 22, 62, 64, 104, 155, 189, 159, 243, 54, 190, 117, 189, 141, 60, 213, 200, 121, 189, 151, 90, 19, 62, 80, 99, 100, 62, 196, 170, 47, 62, 52, 44, 210, 189, 252, 203, 118, 190, 211, 125, 95, 190, 110, 2, 180, 62, 102, 63, 162, 190, 142, 68, 132, 190, 181, 70, 227, 189, 52, 171, 27, 190, 122, 69, 35, 190, 162, 146, 186, 188, 40, 90, 9, 190, 249, 190, 160, 61, 239, 20, 68, 189, 64, 81, 219, 61, 234, 148, 53, 189, 103, 59, 229, 61, 176, 18, 106, 61, 154, 141, 226, 189, 38, 6, 6, 190, 137, 126, 198, 189, 45, 25, 32, 189, 90, 16, 253, 61, 97, 53, 80, 190, 165, 18, 26, 62, 61, 174, 71, 190, 228, 2, 149, 189, 169, 87, 100, 189, 244, 186, 58, 190, 190, 159, 4, 189, 19, 115, 0, 61, 46, 91, 26, 188, 34, 70, 153, 189, 79, 249, 254, 188, 234, 171, 129, 61, 70, 225, 122, 189, 201, 189, 153, 189, 228, 249, 234, 189, 110, 186, 183, 61, 222, 204, 147, 190, 175, 61, 165, 62, 212, 147, 86, 191, 82, 32, 134, 187, 245, 221, 134, 190, 57, 179, 32, 62, 155, 97, 157, 189, 247, 94, 94, 189, 0, 88, 234, 190, 161, 184, 141, 190, 16, 210, 186, 62, 97, 8, 197, 62, 104, 118, 143, 62, 155, 68, 188, 61, 10, 132, 35, 191, 56, 92, 122, 190, 3, 200, 1, 62, 69, 107, 239, 61, 130, 194, 10, 61, 174, 198, 12, 190, 119, 158, 253, 189, 227, 195, 228, 189, 151, 28, 220, 61, 184, 120, 82, 190, 244, 1, 164, 62, 250, 71, 192, 60, 221, 11, 173, 189, 122, 94, 224, 61, 219, 185, 32, 61, 127, 255, 5, 189, 48, 61, 48, 62, 117, 83, 222, 188, 102, 22, 127, 62, 231, 66, 118, 190, 52, 83, 152, 62, 223, 131, 126, 190, 147, 57, 203, 61, 205, 67, 87, 62, 242, 219, 46, 190, 38, 142, 216, 61, 254, 28, 25, 192, 149, 17, 244, 189, 68, 233, 15, 190, 253, 158, 241, 191, 125, 202, 66, 191, 81, 210, 212, 62, 184, 148, 64, 190, 187, 223, 243, 62, 117, 127, 160, 62, 242, 85, 135, 190, 38, 236, 63, 191, 150, 227, 228, 62, 80, 136, 203, 189, 81, 157, 192, 190, 58, 176, 155, 190, 67, 217, 85, 190, 194, 190, 188, 190, 178, 82, 69, 62, 34, 179, 167, 61, 137, 179, 188, 190, 90, 34, 100, 187, 126, 76, 36, 190, 208, 210, 149, 190, 82, 1, 207, 190, 232, 130, 130, 190, 245, 181, 120, 189, 41, 174, 165, 190, 140, 97, 62, 61, 103, 152, 188, 62, 31, 211, 47, 62, 218, 15, 24, 190, 116, 118, 26, 62, 198, 141, 53, 191, 239, 87, 202, 190, 149, 97, 191, 189, 31, 44, 73, 62, 49, 241, 9, 189, 131, 62, 118, 62, 78, 240, 204, 190, 242, 73, 235, 188, 247, 103, 119, 189, 231, 143, 135, 190, 243, 140, 57, 190, 111, 224, 86, 62, 171, 112, 87, 62, 65, 186, 213, 190, 255, 124, 155, 60, 161, 65, 135, 189, 36, 98, 213, 60, 78, 20, 39, 190, 107, 107, 190, 61, 171, 90, 61, 62, 177, 36, 131, 62, 235, 129, 168, 189, 219, 72, 187, 62, 90, 247, 146, 189, 26, 153, 70, 190, 138, 67, 180, 188, 186, 188, 132, 59, 77, 253, 35, 60, 54, 177, 177, 61, 240, 25, 171, 62, 250, 153, 23, 190, 160, 177, 171, 61, 253, 246, 206, 191, 102, 244, 137, 190, 110, 62, 159, 61, 125, 82, 113, 62, 218, 227, 47, 60, 75, 94, 154, 61, 121, 137, 106, 190, 109, 236, 189, 60, 203, 240, 112, 62, 160, 223, 91, 189, 178, 89, 141, 59, 99, 58, 16, 190, 221, 86, 184, 61, 150, 142, 76, 190, 66, 148, 42, 189, 164, 194, 158, 189, 91, 6, 24, 62, 100, 29, 212, 190, 85, 147, 80, 62, 68, 253, 248, 188, 71, 164, 245, 61, 60, 86, 185, 188, 85, 80, 234, 61, 141, 152, 161, 189, 222, 197, 178, 190, 96, 255, 220, 61, 175, 247, 37, 191, 60, 163, 114, 189, 80, 85, 28, 190, 29, 209, 19, 62, 178, 67, 191, 189, 163, 200, 43, 62, 48, 184, 15, 191, 252, 19, 182, 190, 87, 30, 69, 60, 55, 255, 31, 60, 25, 33, 173, 61, 83, 149, 173, 60, 122, 12, 87, 191, 130, 91, 24, 190, 16, 197, 28, 61, 158, 11, 137, 190, 7, 246, 8, 62, 49, 218, 81, 62, 32, 94, 21, 62, 64, 169, 7, 190, 151, 237, 203, 62, 221, 140, 109, 188, 191, 70, 146, 62, 247, 143, 220, 189, 75, 185, 47, 61, 232, 94, 87, 60, 118, 85, 199, 61, 113, 104, 13, 190, 132, 190, 24, 61, 195, 168, 18, 189, 74, 201, 149, 60, 97, 94, 91, 190, 0, 224, 109, 62, 131, 144, 153, 61, 183, 45, 38, 191, 59, 155, 55, 190, 235, 162, 38, 62, 24, 122, 247, 190, 31, 55, 168, 62, 46, 82, 201, 62, 238, 212, 106, 62, 131, 140, 177, 61, 119, 54, 19, 62, 119, 46, 74, 190, 131, 131, 204, 62, 40, 118, 89, 62, 55, 239, 76, 61, 167, 37, 156, 189, 192, 41, 44, 62, 43, 164, 180, 60, 121, 126, 8, 191, 88, 240, 81, 188, 117, 249, 179, 190, 228, 157, 211, 189, 11, 51, 81, 189, 228, 9, 132, 189, 133, 57, 150, 62, 246, 21, 68, 190, 8, 8, 221, 190, 227, 122, 185, 59, 169, 75, 70, 191, 6, 97, 159, 190, 120, 36, 64, 188, 242, 233, 75, 190, 97, 205, 47, 187, 98, 68, 230, 187, 65, 194, 181, 188, 49, 42, 240, 61, 174, 71, 156, 61, 133, 176, 48, 190, 34, 157, 11, 190, 157, 70, 106, 189, 153, 222, 4, 189, 81, 253, 59, 189, 98, 186, 93, 61, 124, 124, 15, 190, 153, 198, 48, 60, 11, 176, 217, 189, 66, 117, 153, 60, 251, 146, 31, 190, 246, 53, 209, 188, 58, 131, 163, 61, 143, 133, 203, 189, 0, 211, 88, 189, 67, 207, 23, 60, 133, 251, 173, 61, 52, 138, 56, 189, 211, 51, 180, 189, 247, 185, 65, 189, 102, 41, 187, 60, 139, 21, 95, 189, 93, 86, 205, 188, 12, 112, 13, 62, 122, 65, 232, 189, 41, 92, 92, 189, 1, 135, 63, 62, 129, 14, 221, 190, 66, 62, 227, 190, 82, 37, 91, 62, 2, 29, 2, 62, 205, 182, 134, 189, 171, 171, 94, 190, 37, 79, 254, 189, 75, 83, 33, 191, 112, 40, 104, 61, 221, 216, 231, 61, 147, 84, 18, 61, 126, 74, 57, 189, 74, 83, 111, 191, 30, 252, 88, 62, 180, 141, 59, 62, 79, 29, 20, 62, 149, 94, 202, 61, 54, 226, 83, 62, 52, 125, 57, 61, 64, 211, 147, 60, 46, 210, 243, 189, 166, 80, 6, 191, 99, 200, 72, 190, 38, 118, 7, 62, 67, 129, 195, 189, 209, 230, 79, 62, 23, 175, 225, 61, 109, 199, 1, 62, 192, 203, 90, 189, 190, 59, 156, 189, 209, 27, 8, 190, 62, 249, 241, 188, 37, 44, 112, 191, 220, 244, 27, 62, 244, 110, 57, 62, 32, 128, 146, 62, 150, 13, 7, 190, 253, 70, 248, 61, 130, 50, 82, 190, 53, 216, 78, 190, 39, 102, 120, 190, 110, 157, 231, 61, 146, 174, 168, 189, 165, 170, 145, 187, 11, 134, 168, 190, 56, 143, 19, 189, 168, 28, 150, 189, 116, 235, 202, 189, 234, 150, 0, 61, 35, 59, 100, 61, 104, 203, 171, 189, 52, 164, 30, 190, 17, 15, 146, 60, 233, 48, 196, 189, 172, 165, 165, 62, 179, 236, 161, 61, 250, 123, 60, 189, 52, 72, 248, 60, 252, 137, 30, 62, 120, 87, 120, 61, 151, 87, 192, 62, 25, 200, 184, 189, 48, 105, 156, 190, 157, 238, 248, 61, 172, 73, 2, 190, 201, 94, 161, 62, 211, 41, 129, 60, 180, 170, 149, 62, 162, 51, 139, 189, 72, 113, 31, 61, 185, 108, 154, 191, 147, 26, 217, 59, 65, 222, 72, 188, 5, 134, 20, 62, 204, 99, 189, 190, 65, 86, 66, 62, 44, 231, 137, 190, 216, 173, 246, 61, 121, 242, 79, 62, 170, 13, 54, 189, 241, 65, 97, 190, 90, 42, 111, 60, 150, 57, 34, 62, 183, 27, 195, 190, 152, 234, 162, 189, 112, 193, 12, 62, 161, 147, 41, 63, 121, 175, 181, 189, 123, 36, 183, 61, 13, 61, 203, 61, 233, 201, 206, 61, 78, 163, 17, 60, 195, 76, 231, 62, 60, 192, 251, 187, 246, 249, 143, 62, 28, 185, 36, 62, 178, 91, 122, 190, 224, 132, 237, 62, 132, 12, 159, 190, 116, 161, 3, 190, 187, 48, 113, 189, 135, 89, 137, 190, 139, 182, 140, 190, 63, 142, 123, 62, 10, 97, 11, 190, 18, 210, 196, 190, 238, 152, 141, 189, 3, 209, 2, 62, 7, 52, 160, 62, 126, 227, 173, 190, 199, 130, 125, 190, 113, 173, 181, 61, 170, 144, 100, 62, 230, 132, 11, 62, 143, 183, 221, 188, 229, 15, 15, 61, 160, 14, 176, 188, 183, 66, 140, 62, 11, 106, 225, 62, 44, 113, 150, 62, 56, 174, 91, 190, 252, 112, 176, 188, 158, 169, 195, 57, 5, 155, 44, 63, 147, 22, 134, 191, 65, 109, 67, 191, 97, 170, 23, 189, 14, 122, 210, 59, 57, 151, 183, 62, 175, 10, 99, 62, 126, 68, 3, 189, 176, 65, 184, 190, 106, 52, 147, 61, 236, 35, 197, 189, 228, 164, 216, 61, 17, 7, 169, 62, 111, 82, 23, 61, 146, 90, 0, 190, 15, 33, 124, 62, 221, 155, 173, 190, 127, 24, 196, 62, 184, 244, 215, 61, 143, 0, 6, 189, 92, 20, 29, 62, 160, 214, 80, 62, 39, 243, 20, 190, 36, 91, 19, 60, 133, 210, 128, 62, 230, 245, 121, 60, 142, 75, 76, 61, 196, 136, 34, 189, 103, 222, 127, 62, 231, 238, 119, 61, 4, 173, 7, 62, 124, 202, 158, 189, 91, 9, 177, 60, 39, 159, 98, 191, 150, 87, 136, 190, 58, 110, 34, 62, 98, 29, 28, 190, 215, 86, 226, 62, 101, 142, 88, 62, 84, 215, 49, 60, 179, 61, 169, 190, 232, 251, 120, 189, 116, 130, 240, 188, 84, 26, 25, 63, 237, 186, 233, 62, 60, 41, 226, 61, 179, 175, 128, 189, 81, 188, 7, 61, 171, 200, 129, 190, 83, 91, 254, 62, 68, 38, 157, 62, 208, 215, 157, 61, 84, 38, 48, 62, 116, 78, 18, 62, 203, 14, 57, 190, 108, 28, 142, 189, 81, 110, 220, 62, 216, 213, 222, 190, 134, 168, 154, 62, 136, 74, 248, 61, 83, 226, 65, 62, 143, 26, 36, 62, 7, 1, 26, 190, 114, 141, 244, 190, 117, 104, 173, 190, 246, 184, 38, 191, 36, 223, 191, 190, 70, 234, 39, 61, 87, 19, 231, 188, 51, 227, 117, 62, 44, 170, 52, 62, 8, 132, 78, 60, 132, 63, 59, 190, 107, 129, 20, 187, 60, 49, 22, 61, 59, 53, 122, 190, 1, 32, 165, 62, 71, 68, 253, 61, 102, 165, 150, 190, 87, 137, 221, 61, 141, 72, 149, 190, 77, 146, 231, 62, 210, 130, 111, 61, 191, 115, 76, 190, 141, 114, 88, 62, 185, 154, 14, 62, 238, 3, 52, 190, 89, 68, 15, 60, 14, 137, 60, 62, 184, 38, 145, 61, 204, 103, 214, 61, 208, 143, 64, 61, 228, 75, 210, 62, 130, 54, 234, 189, 167, 33, 116, 189, 84, 228, 62, 190, 206, 39, 28, 62, 161, 89, 120, 191, 126, 40, 250, 190, 106, 169, 59, 62, 45, 253, 173, 188, 139, 1, 86, 190, 86, 105, 153, 62, 50, 176, 45, 190, 100, 53, 144, 189, 197, 164, 132, 188, 24, 229, 53, 190, 220, 144, 128, 61, 133, 30, 219, 62, 114, 46, 154, 61, 30, 160, 89, 191, 74, 70, 12, 61, 251, 39, 236, 187, 158, 18, 154, 62, 249, 43, 84, 190, 225, 190, 92, 191, 250, 232, 190, 61, 112, 197, 85, 188, 33, 218, 7, 62, 118, 255, 5, 62, 156, 215, 31, 190, 33, 0, 44, 61, 17, 140, 190, 61, 210, 129, 26, 63, 195, 191, 90, 62, 109, 11, 23, 191, 244, 114, 128, 187, 211, 98, 32, 190, 39, 108, 42, 63, 75, 64, 85, 191, 227, 19, 116, 191, 222, 8, 11, 61, 168, 185, 200, 187, 171, 21, 81, 62, 145, 98, 234, 189, 177, 10, 153, 188, 47, 200, 100, 190, 147, 187, 19, 62, 43, 107, 152, 61, 185, 135, 194, 61, 146, 203, 193, 61, 68, 212, 186, 189, 82, 78, 236, 61, 218, 217, 100, 62, 49, 240, 170, 190, 0, 106, 84, 62, 78, 17, 5, 62, 196, 117, 199, 60, 51, 60, 3, 61, 210, 192, 74, 62, 217, 134, 231, 189, 154, 112, 240, 61, 51, 3, 231, 62, 230, 222, 1, 62, 177, 195, 157, 61, 241, 244, 124, 62, 97, 187, 40, 62, 73, 126, 139, 62, 147, 218, 72, 190, 59, 68, 68, 60, 232, 226, 101, 61, 23, 161, 41, 191, 243, 62, 143, 190, 187, 185, 23, 191, 18, 131, 208, 189, 63, 109, 116, 190, 155, 153, 233, 60, 20, 216, 95, 62, 240, 25, 40, 62, 55, 64, 34, 62, 61, 214, 146, 62, 164, 163, 87, 191, 63, 51, 250, 189, 17, 139, 74, 191, 213, 252, 17, 62, 105, 71, 8, 190, 206, 66, 143, 61, 36, 173, 193, 190, 108, 183, 64, 62, 88, 116, 197, 61, 7, 194, 142, 191, 129, 183, 128, 190, 32, 103, 207, 60, 52, 166, 186, 189, 91, 187, 173, 190, 43, 140, 120, 61, 96, 34, 123, 190, 254, 107, 25, 63, 94, 85, 201, 188, 58, 227, 6, 62, 226, 141, 12, 62, 198, 177, 51, 190, 237, 212, 220, 190, 46, 83, 132, 62, 39, 159, 117, 62, 31, 251, 152, 190, 152, 118, 107, 61, 13, 107, 16, 191, 200, 228, 72, 190, 40, 67, 167, 189, 99, 183, 192, 62, 64, 116, 35, 190, 254, 199, 46, 189, 243, 25, 29, 191, 178, 242, 34, 190, 27, 76, 56, 61, 165, 87, 178, 61, 10, 83, 60, 189, 127, 219, 154, 62, 189, 92, 22, 191, 128, 4, 251, 189, 124, 69, 6, 59, 120, 30, 105, 61, 79, 130, 167, 189, 33, 188, 141, 62, 55, 58, 73, 190, 120, 10, 248, 190, 128, 231, 182, 188, 215, 72, 19, 189, 192, 15, 28, 61, 166, 150, 72, 190, 114, 33, 13, 62, 42, 121, 108, 61, 59, 95, 122, 62, 181, 105, 43, 187, 33, 16, 176, 62, 192, 254, 5, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 211, 83, 190, 206, 64, 100, 190, 59, 5, 127, 62, 218, 15, 79, 62, 84, 24, 181, 188, 43, 105, 129, 61, 100, 103, 19, 190, 120, 148, 178, 62, 58, 241, 98, 62, 125, 254, 135, 61, 154, 168, 18, 190, 20, 88, 145, 62, 114, 17, 43, 62, 21, 168, 232, 61, 98, 168, 71, 62, 213, 90, 196, 57, 115, 235, 43, 62, 181, 143, 55, 62, 152, 107, 25, 62, 71, 1, 254, 61, 208, 57, 221, 189, 175, 105, 130, 189, 236, 194, 6, 189, 144, 85, 136, 61, 250, 187, 139, 189, 71, 49, 183, 61, 141, 29, 105, 62, 228, 101, 164, 62, 166, 226, 53, 190, 90, 58, 51, 62, 199, 91, 9, 62, 66, 89, 190, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {160, 35, 71, 63, 58, 33, 133, 62, 103, 226, 97, 63, 23, 16, 104, 63, 51, 34, 232, 190, 47, 140, 101, 63, 248, 120, 59, 62, 234, 38, 37, 190, 161, 94, 82, 191, 42, 45, 149, 62, 95, 61, 240, 58, 87, 114, 165, 59, 66, 175, 115, 190, 5, 241, 248, 59, 167, 64, 198, 62, 21, 156, 211, 63, 78, 27, 133, 62, 105, 87, 185, 61, 190, 110, 207, 62, 120, 101, 142, 191, 224, 242, 172, 61, 122, 255, 56, 62, 34, 191, 216, 61, 188, 218, 148, 62, 180, 45, 84, 191, 140, 57, 77, 190, 39, 164, 78, 191, 10, 246, 179, 190, 19, 210, 74, 63, 201, 207, 121, 189, 34, 15, 126, 63, 248, 240, 192, 62, 141, 97, 162, 61, 43, 239, 167, 61, 42, 186, 130, 62, 126, 142, 52, 62, 12, 34, 1, 191, 57, 63, 45, 62, 158, 252, 14, 189, 7, 86, 152, 190, 40, 87, 250, 188, 24, 170, 164, 62, 134, 127, 246, 61, 177, 40, 62, 190, 168, 241, 31, 190, 144, 84, 252, 61, 30, 177, 100, 190, 70, 160, 10, 189, 117, 53, 22, 62, 131, 9, 200, 190, 224, 88, 71, 189, 41, 37, 203, 62, 220, 197, 210, 61, 42, 225, 22, 61, 103, 253, 131, 189, 168, 75, 181, 190, 114, 221, 143, 62, 121, 18, 204, 187, 47, 203, 92, 62, 34, 189, 52, 61, 79, 57, 162, 62, 251, 94, 116, 190, 195, 121, 146, 62, 238, 147, 137, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 90, 187, 189, 237, 99, 252, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {23, 219, 75, 63, 193, 39, 132, 63, 230, 110, 106, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {160, 35, 102, 192, 23, 176, 235, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0012/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}