// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {72, 242, 243, 62, 9, 125, 80, 63, 250, 240, 30, 63, 149, 15, 138, 61, 179, 205, 165, 190, 82, 19, 178, 62, 14, 192, 28, 191, 54, 81, 51, 63, 188, 213, 69, 62, 235, 142, 245, 62, 242, 90, 140, 63, 76, 196, 88, 62, 210, 135, 52, 191, 255, 181, 192, 63, 18, 5, 192, 62, 74, 86, 219, 62, 235, 95, 173, 62, 71, 68, 51, 191, 86, 247, 206, 62, 38, 255, 179, 190, 74, 65, 143, 58, 181, 77, 95, 191, 250, 120, 118, 63, 182, 121, 212, 62, 17, 194, 133, 189, 105, 134, 237, 191, 103, 219, 195, 190, 230, 46, 29, 63, 15, 24, 156, 63, 73, 154, 174, 61, 105, 236, 20, 189, 165, 107, 57, 191, 91, 155, 57, 62, 200, 134, 195, 62, 116, 56, 130, 191, 170, 181, 71, 190, 118, 197, 74, 62, 199, 80, 205, 62, 192, 107, 237, 190, 100, 158, 16, 189, 158, 124, 133, 58, 232, 133, 18, 191, 46, 110, 14, 63, 10, 230, 164, 63, 147, 97, 140, 62, 212, 10, 223, 190, 8, 135, 60, 191, 24, 250, 178, 190, 172, 194, 223, 188, 41, 89, 69, 191, 102, 26, 39, 190, 225, 93, 93, 62, 212, 48, 252, 62, 120, 180, 48, 63, 245, 176, 130, 62, 57, 151, 60, 63, 123, 105, 50, 191, 199, 180, 200, 189, 116, 4, 130, 62, 140, 203, 18, 191, 102, 91, 12, 62, 3, 168, 7, 63, 90, 250, 179, 62, 37, 103, 56, 190, 129, 61, 34, 190, 6, 222, 5, 191, 19, 65, 61, 62, 106, 65, 42, 189, 58, 91, 217, 62, 91, 248, 137, 62, 33, 157, 107, 63, 250, 228, 244, 62, 155, 84, 81, 63, 221, 6, 233, 62, 86, 248, 183, 61, 126, 140, 102, 191, 193, 1, 89, 63, 167, 109, 181, 190, 250, 153, 17, 191, 113, 189, 13, 191, 194, 37, 121, 60, 237, 214, 238, 61, 190, 64, 252, 61, 114, 127, 85, 62, 107, 143, 38, 190, 200, 6, 201, 190, 136, 68, 56, 63, 182, 155, 55, 63, 65, 6, 193, 188, 79, 7, 105, 62, 70, 147, 6, 63, 20, 100, 141, 191, 115, 247, 138, 190, 105, 37, 211, 62, 60, 151, 129, 191, 81, 229, 165, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 23, 200, 190, 172, 172, 128, 62, 245, 147, 43, 63, 82, 38, 83, 62, 144, 136, 93, 61, 215, 226, 153, 61, 101, 192, 19, 191, 176, 14, 110, 62, 233, 152, 189, 190, 47, 77, 141, 190, 18, 195, 215, 61, 63, 96, 140, 62, 31, 237, 45, 62, 61, 217, 132, 190, 238, 218, 31, 190, 96, 91, 4, 63, 107, 140, 197, 62, 42, 161, 71, 62, 74, 111, 145, 62, 226, 113, 135, 190, 17, 230, 214, 62, 39, 83, 161, 190, 204, 120, 63, 63, 29, 8, 246, 188, 121, 211, 99, 190, 245, 52, 137, 62, 176, 226, 28, 63, 176, 35, 167, 62, 115, 166, 155, 189, 30, 181, 2, 191, 64, 97, 194, 189, 86, 131, 116, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 170, 117, 61, 61, 166, 46, 61, 53, 19, 102, 186, 23, 214, 226, 62, 177, 120, 59, 62, 171, 76, 242, 189, 225, 97, 38, 190, 177, 244, 89, 189, 226, 138, 2, 62, 77, 237, 191, 62, 61, 196, 201, 61, 16, 253, 180, 191, 162, 139, 71, 62, 101, 75, 155, 62, 107, 126, 10, 63, 129, 115, 7, 60, 204, 249, 172, 191, 190, 106, 95, 62, 42, 240, 50, 62, 102, 155, 140, 62, 151, 106, 15, 187, 46, 28, 171, 62, 175, 239, 168, 187, 235, 161, 128, 62, 186, 237, 215, 62, 245, 62, 230, 190, 88, 154, 46, 191, 132, 220, 197, 61, 69, 50, 171, 189, 10, 48, 14, 61, 240, 153, 170, 191, 112, 138, 94, 191, 33, 234, 125, 62, 221, 250, 242, 187, 170, 161, 133, 190, 92, 34, 230, 61, 189, 187, 232, 62, 89, 209, 80, 62, 191, 68, 132, 189, 46, 72, 99, 60, 89, 141, 171, 60, 6, 8, 86, 61, 26, 122, 74, 191, 40, 68, 116, 190, 217, 248, 146, 62, 47, 171, 3, 62, 124, 34, 242, 188, 39, 52, 24, 62, 174, 134, 87, 190, 77, 88, 51, 189, 43, 121, 17, 62, 244, 80, 71, 62, 174, 39, 224, 188, 14, 185, 142, 61, 202, 246, 9, 190, 113, 180, 15, 62, 185, 66, 65, 60, 103, 84, 97, 62, 193, 243, 168, 190, 95, 215, 30, 188, 23, 26, 155, 190, 95, 25, 222, 190, 237, 231, 73, 62, 196, 121, 250, 61, 194, 131, 178, 190, 225, 17, 150, 189, 236, 57, 241, 188, 113, 7, 111, 189, 74, 194, 187, 62, 215, 38, 41, 62, 12, 110, 6, 190, 111, 31, 132, 62, 70, 96, 193, 191, 236, 111, 98, 191, 120, 193, 132, 60, 22, 87, 234, 62, 4, 71, 235, 190, 115, 233, 221, 62, 182, 231, 32, 191, 100, 68, 32, 190, 63, 167, 130, 61, 188, 193, 106, 189, 22, 57, 6, 191, 143, 27, 189, 62, 45, 71, 16, 60, 255, 245, 73, 190, 79, 106, 231, 61, 63, 2, 200, 189, 212, 165, 139, 62, 119, 154, 128, 190, 41, 104, 143, 62, 43, 130, 104, 60, 233, 205, 127, 62, 62, 194, 201, 190, 54, 31, 190, 62, 65, 187, 91, 189, 189, 249, 58, 190, 192, 48, 170, 62, 226, 106, 17, 191, 91, 253, 182, 190, 252, 54, 34, 191, 117, 167, 184, 190, 72, 89, 0, 62, 253, 226, 214, 189, 103, 24, 182, 190, 53, 94, 210, 189, 238, 119, 149, 61, 111, 22, 198, 62, 49, 203, 9, 191, 164, 233, 230, 190, 71, 71, 148, 191, 177, 227, 196, 190, 215, 10, 56, 62, 157, 198, 24, 62, 59, 160, 153, 190, 187, 135, 162, 190, 9, 244, 175, 189, 212, 41, 98, 191, 39, 64, 238, 188, 229, 102, 179, 190, 231, 197, 116, 188, 185, 102, 21, 191, 37, 24, 173, 61, 179, 59, 32, 189, 166, 169, 60, 62, 183, 135, 42, 62, 119, 133, 90, 62, 189, 186, 195, 190, 157, 85, 205, 61, 65, 79, 178, 61, 193, 86, 154, 61, 60, 97, 214, 62, 129, 198, 16, 191, 20, 193, 67, 62, 128, 236, 199, 61, 92, 217, 176, 190, 119, 127, 45, 191, 206, 207, 236, 61, 121, 252, 213, 189, 168, 6, 109, 190, 223, 160, 164, 188, 126, 146, 36, 62, 181, 202, 168, 62, 178, 243, 104, 190, 213, 138, 156, 190, 132, 95, 9, 62, 64, 233, 131, 61, 208, 152, 69, 61, 30, 210, 32, 186, 234, 158, 36, 190, 52, 121, 82, 62, 69, 70, 22, 61, 5, 185, 90, 62, 119, 179, 109, 62, 80, 207, 29, 190, 167, 159, 140, 62, 85, 175, 79, 189, 139, 7, 220, 62, 19, 84, 72, 191, 245, 25, 255, 190, 216, 253, 165, 190, 144, 74, 165, 189, 159, 242, 134, 62, 51, 163, 208, 190, 209, 234, 248, 61, 104, 153, 127, 61, 170, 127, 34, 190, 4, 44, 155, 62, 64, 206, 230, 191, 60, 112, 19, 191, 251, 69, 196, 189, 7, 86, 203, 61, 63, 115, 204, 190, 155, 12, 33, 63, 30, 180, 245, 190, 25, 61, 184, 189, 130, 229, 149, 62, 149, 193, 196, 189, 221, 223, 28, 191, 250, 119, 231, 62, 81, 44, 105, 189, 166, 11, 71, 190, 146, 188, 141, 62, 248, 165, 163, 190, 170, 89, 102, 62, 105, 152, 187, 190, 0, 193, 18, 62, 146, 197, 84, 61, 16, 203, 235, 61, 164, 142, 48, 191, 206, 86, 66, 63, 93, 247, 38, 190, 249, 54, 75, 190, 102, 151, 202, 61, 204, 37, 234, 190, 108, 93, 54, 189, 246, 104, 12, 61, 189, 30, 67, 62, 26, 237, 223, 61, 95, 139, 54, 190, 179, 232, 50, 191, 211, 178, 6, 190, 44, 146, 37, 190, 10, 57, 255, 61, 81, 159, 216, 188, 87, 20, 132, 62, 20, 172, 160, 190, 113, 13, 9, 61, 82, 105, 63, 60, 174, 3, 40, 190, 166, 247, 127, 60, 63, 181, 153, 62, 18, 179, 14, 190, 169, 125, 192, 190, 106, 195, 95, 62, 88, 61, 156, 189, 188, 58, 163, 62, 222, 175, 55, 190, 37, 199, 21, 62, 40, 51, 29, 62, 133, 55, 76, 62, 159, 61, 140, 61, 207, 105, 93, 62, 51, 160, 27, 190, 0, 193, 255, 61, 35, 166, 156, 189, 179, 172, 141, 62, 41, 84, 153, 188, 100, 222, 83, 190, 44, 134, 165, 61, 190, 26, 69, 188, 103, 67, 185, 61, 80, 67, 43, 62, 90, 88, 109, 62, 120, 105, 47, 190, 72, 3, 197, 62, 151, 140, 18, 62, 167, 40, 59, 190, 148, 225, 55, 189, 60, 204, 178, 61, 172, 73, 213, 61, 12, 36, 154, 61, 22, 59, 231, 61, 12, 9, 99, 61, 8, 109, 5, 62, 21, 167, 14, 190, 22, 226, 69, 61, 49, 0, 3, 62, 99, 244, 131, 189, 22, 20, 93, 188, 46, 219, 139, 62, 235, 27, 41, 190, 33, 167, 47, 190, 56, 117, 7, 62, 231, 88, 148, 190, 248, 232, 71, 61, 190, 241, 67, 62, 240, 239, 41, 62, 186, 76, 107, 62, 220, 152, 130, 62, 101, 160, 151, 191, 241, 130, 198, 190, 127, 96, 221, 61, 239, 171, 114, 191, 45, 0, 133, 62, 94, 205, 149, 62, 69, 219, 29, 62, 99, 231, 71, 190, 250, 188, 6, 62, 75, 53, 229, 189, 153, 117, 220, 62, 211, 186, 162, 62, 153, 147, 11, 189, 244, 135, 200, 61, 170, 63, 120, 60, 114, 96, 203, 60, 26, 98, 186, 190, 216, 162, 154, 62, 243, 82, 196, 189, 230, 129, 167, 62, 116, 49, 36, 62, 67, 218, 1, 62, 75, 122, 172, 62, 204, 119, 195, 189, 168, 226, 12, 191, 23, 238, 187, 62, 19, 51, 19, 191, 202, 112, 45, 190, 82, 203, 136, 187, 53, 205, 250, 60, 24, 235, 223, 190, 228, 86, 42, 190, 224, 247, 187, 62, 224, 20, 170, 61, 245, 249, 178, 61, 39, 82, 131, 62, 60, 82, 68, 191, 183, 111, 251, 190, 142, 197, 39, 190, 253, 6, 220, 189, 36, 41, 48, 61, 79, 123, 235, 61, 205, 121, 176, 190, 223, 229, 113, 61, 222, 113, 188, 61, 218, 27, 105, 61, 174, 111, 179, 189, 184, 27, 12, 62, 25, 133, 245, 188, 101, 154, 70, 190, 1, 34, 33, 59, 230, 236, 35, 61, 138, 174, 81, 62, 242, 175, 151, 61, 239, 57, 60, 190, 67, 85, 191, 189, 101, 148, 164, 61, 59, 181, 163, 189, 212, 177, 237, 62, 115, 17, 163, 61, 179, 155, 189, 59, 137, 251, 73, 59, 206, 175, 45, 60, 141, 197, 232, 189, 247, 133, 242, 61, 49, 189, 57, 190, 38, 109, 7, 62, 20, 150, 228, 188, 33, 247, 218, 59, 165, 157, 178, 59, 80, 56, 109, 61, 105, 2, 107, 189, 10, 184, 36, 190, 102, 63, 43, 190, 13, 68, 153, 189, 213, 122, 85, 61, 29, 145, 26, 188, 162, 189, 26, 190, 137, 20, 8, 62, 136, 111, 232, 61, 209, 51, 6, 62, 11, 186, 222, 59, 36, 20, 32, 61, 187, 41, 38, 189, 222, 253, 45, 190, 161, 187, 87, 189, 3, 96, 109, 190, 141, 67, 4, 190, 220, 25, 185, 189, 227, 57, 126, 61, 12, 201, 1, 62, 228, 240, 23, 189, 234, 80, 230, 60, 244, 171, 189, 61, 17, 241, 73, 62, 190, 242, 33, 189, 46, 47, 218, 60, 44, 191, 169, 60, 206, 205, 134, 189, 245, 127, 8, 189, 103, 227, 78, 190, 255, 3, 207, 61, 97, 194, 152, 60, 96, 174, 107, 189, 160, 175, 204, 61, 11, 102, 119, 190, 133, 208, 45, 61, 167, 141, 94, 61, 235, 174, 57, 62, 222, 21, 190, 188, 120, 162, 23, 62, 173, 109, 56, 189, 236, 250, 41, 190, 236, 27, 88, 189, 75, 27, 105, 61, 131, 57, 20, 190, 103, 166, 11, 62, 4, 33, 188, 61, 43, 185, 81, 62, 194, 197, 240, 188, 133, 29, 50, 187, 14, 122, 10, 61, 154, 179, 16, 191, 132, 195, 6, 189, 184, 141, 184, 62, 155, 152, 138, 188, 21, 30, 75, 187, 247, 109, 94, 62, 21, 170, 239, 190, 69, 173, 16, 190, 172, 255, 196, 189, 162, 118, 47, 190, 149, 136, 119, 62, 22, 86, 68, 62, 61, 240, 70, 62, 38, 139, 101, 62, 85, 100, 162, 61, 25, 214, 3, 189, 108, 215, 133, 62, 223, 120, 71, 62, 153, 159, 135, 61, 35, 110, 169, 62, 165, 231, 9, 62, 159, 166, 200, 189, 165, 7, 63, 190, 17, 250, 134, 188, 216, 91, 107, 189, 90, 30, 16, 62, 104, 59, 90, 62, 111, 123, 33, 62, 242, 196, 91, 189, 244, 14, 120, 190, 0, 19, 80, 190, 219, 41, 179, 62, 216, 208, 151, 190, 204, 181, 111, 190, 181, 70, 227, 189, 52, 171, 27, 190, 122, 69, 35, 190, 162, 146, 186, 188, 40, 90, 9, 190, 249, 190, 160, 61, 239, 20, 68, 189, 64, 81, 219, 61, 234, 148, 53, 189, 103, 59, 229, 61, 176, 18, 106, 61, 154, 141, 226, 189, 38, 6, 6, 190, 137, 126, 198, 189, 45, 25, 32, 189, 90, 16, 253, 61, 97, 53, 80, 190, 165, 18, 26, 62, 61, 174, 71, 190, 228, 2, 149, 189, 169, 87, 100, 189, 244, 186, 58, 190, 190, 159, 4, 189, 19, 115, 0, 61, 46, 91, 26, 188, 34, 70, 153, 189, 79, 249, 254, 188, 234, 171, 129, 61, 70, 225, 122, 189, 201, 189, 153, 189, 228, 249, 234, 189, 110, 186, 183, 61, 70, 163, 151, 190, 245, 253, 164, 62, 187, 61, 92, 191, 213, 84, 150, 187, 154, 103, 85, 190, 251, 225, 22, 62, 155, 97, 157, 189, 119, 121, 111, 189, 74, 242, 25, 191, 29, 244, 149, 190, 126, 210, 175, 62, 129, 96, 179, 62, 14, 25, 143, 62, 131, 210, 186, 61, 236, 27, 39, 191, 76, 129, 147, 190, 64, 113, 160, 61, 134, 151, 255, 61, 6, 61, 4, 61, 7, 9, 8, 190, 131, 57, 245, 189, 180, 202, 217, 189, 103, 137, 221, 61, 148, 75, 87, 190, 194, 227, 164, 62, 97, 191, 39, 61, 42, 17, 58, 190, 70, 204, 228, 61, 103, 178, 10, 61, 5, 126, 7, 188, 205, 54, 9, 62, 137, 25, 161, 189, 68, 76, 48, 62, 254, 109, 89, 190, 201, 170, 153, 62, 236, 178, 149, 190, 56, 213, 191, 61, 138, 97, 86, 62, 242, 219, 46, 190, 161, 164, 221, 61, 254, 28, 25, 192, 65, 123, 21, 190, 40, 80, 171, 189, 253, 158, 241, 191, 27, 76, 68, 191, 222, 201, 212, 62, 252, 71, 140, 190, 77, 51, 255, 62, 127, 215, 164, 62, 238, 212, 133, 190, 134, 163, 65, 191, 5, 168, 227, 62, 241, 243, 205, 189, 81, 157, 192, 190, 254, 141, 149, 190, 160, 68, 106, 190, 194, 190, 188, 190, 84, 195, 64, 62, 89, 86, 207, 61, 175, 187, 185, 190, 5, 95, 185, 60, 126, 76, 36, 190, 208, 210, 149, 190, 82, 1, 207, 190, 172, 23, 141, 190, 182, 31, 130, 189, 224, 86, 180, 190, 36, 23, 88, 61, 88, 199, 179, 62, 10, 108, 61, 62, 218, 15, 24, 190, 105, 138, 4, 62, 79, 28, 96, 191, 80, 24, 198, 190, 44, 246, 171, 189, 37, 193, 79, 62, 13, 231, 51, 188, 95, 204, 121, 62, 66, 146, 206, 190, 121, 102, 99, 188, 237, 191, 113, 189, 186, 184, 139, 190, 150, 132, 35, 190, 39, 181, 91, 62, 145, 186, 79, 62, 148, 237, 225, 190, 6, 179, 99, 60, 101, 91, 172, 189, 145, 72, 14, 61, 228, 95, 83, 190, 238, 60, 177, 61, 151, 105, 57, 62, 234, 60, 125, 62, 240, 62, 160, 189, 15, 246, 191, 62, 117, 224, 135, 189, 7, 236, 104, 190, 64, 80, 83, 188, 175, 102, 36, 189, 207, 173, 1, 188, 20, 29, 174, 61, 113, 163, 155, 62, 250, 153, 23, 190, 82, 3, 150, 61, 75, 191, 205, 191, 189, 234, 166, 190, 229, 225, 182, 61, 233, 72, 142, 62, 175, 71, 139, 188, 5, 196, 19, 61, 126, 235, 140, 190, 162, 106, 150, 61, 21, 193, 141, 62, 151, 22, 129, 189, 204, 242, 240, 188, 126, 44, 59, 190, 127, 211, 168, 61, 254, 129, 115, 190, 156, 230, 17, 189, 147, 130, 221, 189, 213, 91, 23, 62, 60, 219, 236, 190, 103, 53, 100, 62, 169, 218, 226, 188, 14, 0, 202, 61, 190, 16, 196, 57, 29, 86, 53, 62, 159, 129, 25, 60, 159, 39, 185, 190, 128, 255, 230, 61, 126, 62, 46, 191, 142, 26, 110, 189, 24, 115, 3, 190, 210, 35, 14, 62, 178, 67, 191, 189, 65, 116, 24, 62, 217, 240, 43, 191, 179, 136, 187, 190, 138, 112, 160, 60, 32, 10, 87, 60, 129, 38, 176, 61, 127, 87, 73, 60, 103, 157, 89, 191, 75, 95, 30, 190, 118, 33, 12, 61, 66, 108, 135, 190, 220, 147, 8, 62, 71, 82, 73, 62, 63, 219, 23, 62, 91, 175, 13, 190, 199, 68, 206, 62, 48, 247, 175, 188, 86, 183, 147, 62, 65, 45, 237, 189, 87, 50, 101, 60, 25, 45, 144, 60, 242, 36, 182, 61, 152, 203, 241, 189, 74, 209, 53, 61, 234, 185, 13, 189, 115, 118, 238, 61, 203, 60, 59, 60, 168, 199, 129, 62, 185, 39, 177, 61, 247, 226, 56, 191, 69, 47, 67, 190, 235, 162, 38, 62, 46, 252, 28, 191, 140, 70, 199, 62, 53, 235, 211, 62, 175, 33, 17, 63, 152, 92, 29, 62, 124, 121, 6, 62, 131, 25, 96, 190, 59, 131, 212, 62, 55, 185, 90, 62, 138, 18, 194, 61, 241, 32, 81, 189, 73, 14, 32, 62, 192, 86, 41, 59, 192, 241, 38, 191, 242, 30, 54, 189, 158, 211, 176, 190, 189, 93, 159, 189, 109, 64, 50, 189, 179, 181, 146, 189, 147, 76, 200, 62, 57, 111, 117, 190, 74, 208, 253, 190, 73, 14, 192, 61, 76, 136, 55, 191, 249, 181, 150, 190, 120, 36, 64, 188, 242, 233, 75, 190, 97, 205, 47, 187, 98, 68, 230, 187, 65, 194, 181, 188, 49, 42, 240, 61, 174, 71, 156, 61, 133, 176, 48, 190, 34, 157, 11, 190, 157, 70, 106, 189, 153, 222, 4, 189, 81, 253, 59, 189, 98, 186, 93, 61, 124, 124, 15, 190, 153, 198, 48, 60, 11, 176, 217, 189, 66, 117, 153, 60, 251, 146, 31, 190, 246, 53, 209, 188, 58, 131, 163, 61, 143, 133, 203, 189, 0, 211, 88, 189, 67, 207, 23, 60, 133, 251, 173, 61, 52, 138, 56, 189, 211, 51, 180, 189, 247, 185, 65, 189, 102, 41, 187, 60, 139, 21, 95, 189, 93, 86, 205, 188, 12, 112, 13, 62, 122, 65, 232, 189, 225, 58, 59, 189, 63, 108, 61, 62, 97, 122, 218, 190, 215, 228, 247, 190, 200, 37, 128, 62, 49, 131, 14, 62, 205, 182, 134, 189, 193, 99, 83, 190, 95, 133, 252, 189, 189, 218, 36, 191, 14, 244, 3, 61, 174, 98, 60, 61, 60, 226, 72, 61, 56, 35, 35, 188, 210, 158, 141, 191, 140, 174, 82, 62, 239, 124, 12, 62, 186, 150, 34, 62, 153, 144, 230, 61, 82, 128, 121, 62, 109, 118, 105, 61, 111, 101, 138, 61, 43, 212, 247, 189, 221, 9, 4, 191, 50, 112, 143, 190, 151, 81, 41, 62, 234, 110, 14, 190, 159, 46, 83, 62, 125, 6, 248, 61, 117, 126, 18, 62, 31, 76, 199, 189, 54, 32, 182, 189, 114, 193, 43, 190, 215, 102, 106, 188, 128, 242, 124, 191, 27, 144, 21, 62, 129, 232, 40, 62, 120, 206, 144, 62, 150, 13, 7, 190, 253, 70, 248, 61, 209, 190, 88, 190, 18, 40, 104, 190, 131, 234, 55, 190, 118, 44, 234, 61, 41, 64, 165, 189, 92, 111, 216, 59, 227, 179, 178, 190, 208, 70, 195, 188, 226, 9, 152, 189, 67, 148, 188, 189, 253, 163, 0, 61, 43, 209, 137, 61, 239, 167, 168, 189, 38, 114, 10, 190, 208, 199, 215, 60, 196, 4, 220, 189, 226, 39, 163, 62, 131, 102, 180, 61, 236, 212, 99, 189, 78, 239, 18, 61, 204, 229, 106, 62, 154, 13, 167, 61, 94, 231, 195, 62, 246, 113, 156, 189, 60, 169, 152, 190, 36, 168, 4, 62, 70, 37, 5, 190, 200, 13, 166, 62, 171, 26, 81, 61, 37, 87, 143, 62, 162, 51, 139, 189, 41, 187, 83, 61, 29, 54, 172, 191, 6, 133, 47, 59, 222, 137, 250, 187, 206, 211, 37, 62, 25, 145, 191, 190, 7, 175, 18, 62, 200, 0, 135, 190, 188, 222, 24, 62, 116, 188, 92, 62, 67, 85, 7, 189, 188, 134, 105, 190, 88, 107, 19, 189, 71, 81, 42, 62, 193, 150, 228, 190, 69, 92, 146, 189, 241, 245, 18, 62, 217, 188, 44, 63, 164, 81, 67, 190, 106, 102, 179, 61, 146, 154, 218, 61, 187, 227, 197, 61, 136, 247, 223, 60, 68, 198, 244, 62, 248, 191, 211, 60, 55, 132, 138, 62, 170, 134, 47, 62, 117, 107, 147, 190, 87, 184, 236, 62, 103, 77, 229, 190, 8, 67, 244, 189, 187, 48, 113, 189, 240, 206, 166, 190, 51, 76, 197, 190, 33, 98, 130, 62, 199, 190, 241, 189, 114, 75, 196, 190, 252, 82, 131, 189, 54, 25, 240, 61, 147, 198, 153, 62, 115, 189, 188, 190, 62, 117, 125, 190, 166, 200, 179, 61, 157, 209, 105, 62, 36, 113, 2, 62, 129, 20, 247, 188, 228, 16, 131, 60, 135, 163, 121, 188, 157, 24, 132, 62, 5, 245, 231, 62, 98, 250, 144, 62, 160, 240, 82, 190, 118, 244, 149, 188, 145, 43, 171, 60, 154, 174, 50, 63, 35, 24, 136, 191, 115, 146, 76, 191, 98, 139, 8, 189, 64, 186, 17, 59, 107, 194, 177, 62, 169, 47, 101, 62, 195, 137, 131, 189, 81, 0, 180, 190, 106, 52, 147, 61, 176, 227, 225, 189, 214, 107, 200, 188, 53, 248, 170, 62, 204, 225, 225, 60, 221, 48, 11, 190, 244, 83, 126, 62, 69, 17, 171, 190, 121, 237, 195, 62, 101, 59, 119, 61, 157, 102, 68, 189, 87, 222, 29, 62, 223, 108, 84, 62, 193, 174, 14, 190, 239, 39, 46, 60, 152, 102, 127, 62, 134, 54, 92, 60, 160, 41, 82, 61, 255, 80, 19, 189, 76, 245, 133, 62, 15, 19, 214, 60, 121, 24, 7, 62, 166, 96, 147, 189, 62, 39, 247, 60, 184, 46, 103, 191, 30, 121, 150, 190, 18, 181, 220, 61, 225, 252, 76, 190, 140, 47, 224, 62, 67, 68, 81, 62, 30, 199, 180, 59, 154, 120, 170, 190, 232, 251, 120, 189, 186, 124, 44, 189, 118, 47, 13, 63, 209, 193, 231, 62, 106, 157, 185, 188, 218, 38, 238, 189, 243, 70, 243, 60, 239, 154, 128, 190, 38, 86, 242, 62, 21, 43, 146, 62, 87, 111, 10, 61, 39, 135, 7, 62, 198, 180, 15, 62, 114, 213, 51, 190, 0, 228, 1, 190, 147, 176, 217, 62, 235, 4, 0, 191, 133, 152, 136, 62, 135, 168, 232, 61, 200, 32, 90, 62, 25, 156, 18, 62, 241, 126, 89, 190, 232, 29, 12, 191, 165, 157, 175, 190, 179, 226, 54, 191, 129, 8, 216, 190, 26, 22, 79, 61, 14, 39, 188, 188, 247, 88, 122, 62, 208, 135, 58, 62, 124, 59, 177, 188, 59, 176, 48, 190, 107, 129, 20, 187, 82, 202, 229, 60, 244, 126, 174, 190, 166, 157, 168, 62, 98, 156, 0, 62, 150, 88, 153, 190, 185, 26, 228, 61, 160, 163, 144, 190, 189, 142, 233, 62, 49, 249, 189, 60, 41, 22, 82, 190, 137, 20, 97, 62, 249, 137, 19, 62, 96, 146, 41, 190, 52, 242, 140, 60, 134, 87, 63, 62, 73, 199, 158, 61, 110, 184, 229, 61, 126, 64, 96, 61, 170, 222, 219, 62, 148, 95, 242, 189, 69, 234, 88, 189, 134, 126, 49, 190, 23, 119, 42, 62, 184, 87, 124, 191, 87, 63, 4, 191, 174, 87, 85, 62, 106, 154, 62, 188, 244, 242, 59, 190, 167, 144, 163, 62, 159, 95, 13, 190, 216, 143, 234, 189, 197, 164, 132, 188, 98, 115, 31, 190, 220, 144, 128, 61, 107, 232, 230, 62, 5, 160, 154, 61, 237, 88, 130, 191, 168, 50, 119, 60, 82, 125, 130, 188, 9, 63, 167, 62, 90, 181, 111, 190, 206, 87, 122, 191, 159, 192, 231, 61, 121, 48, 202, 188, 190, 88, 1, 62, 204, 92, 21, 62, 10, 139, 33, 190, 142, 37, 72, 61, 124, 77, 238, 61, 45, 223, 25, 63, 110, 188, 87, 62, 213, 107, 22, 191, 78, 102, 133, 59, 133, 201, 24, 190, 188, 108, 28, 63, 102, 56, 117, 191, 106, 107, 129, 191, 188, 1, 22, 61, 217, 83, 0, 188, 214, 152, 72, 62, 74, 203, 2, 190, 188, 127, 163, 188, 241, 54, 90, 190, 147, 187, 19, 62, 44, 97, 159, 61, 213, 141, 110, 61, 238, 21, 140, 61, 214, 79, 222, 189, 129, 175, 194, 61, 36, 51, 107, 62, 38, 39, 157, 190, 13, 68, 66, 62, 9, 126, 19, 62, 109, 141, 90, 60, 34, 248, 10, 61, 114, 46, 82, 62, 146, 0, 171, 189, 209, 71, 238, 61, 168, 123, 245, 62, 173, 82, 0, 62, 117, 248, 158, 61, 23, 137, 118, 62, 83, 128, 91, 62, 159, 230, 127, 62, 209, 233, 74, 190, 88, 149, 93, 59, 101, 81, 162, 61, 43, 105, 47, 191, 50, 210, 144, 190, 113, 255, 74, 191, 7, 16, 25, 190, 129, 138, 140, 190, 87, 211, 31, 61, 99, 216, 97, 62, 139, 241, 55, 62, 55, 64, 34, 62, 123, 90, 147, 62, 198, 40, 112, 191, 230, 71, 227, 189, 238, 53, 87, 191, 205, 162, 22, 62, 194, 32, 234, 189, 75, 225, 118, 61, 180, 62, 190, 190, 255, 112, 69, 62, 26, 205, 193, 61, 19, 103, 150, 191, 144, 244, 110, 190, 40, 83, 92, 60, 71, 165, 197, 189, 238, 151, 196, 190, 99, 12, 31, 61, 168, 127, 151, 190, 227, 3, 28, 63, 130, 223, 186, 189, 223, 231, 123, 61, 218, 164, 7, 62, 110, 229, 36, 190, 43, 140, 243, 190, 191, 65, 136, 62, 204, 100, 128, 62, 59, 40, 161, 190, 230, 202, 133, 61, 182, 226, 28, 191, 156, 171, 45, 190, 225, 194, 160, 189, 207, 51, 188, 62, 64, 116, 35, 190, 57, 193, 193, 189, 178, 32, 56, 191, 146, 251, 30, 190, 150, 129, 23, 61, 186, 88, 89, 61, 212, 180, 69, 189, 164, 84, 152, 62, 84, 47, 19, 191, 111, 226, 42, 190, 152, 109, 63, 189, 241, 221, 132, 61, 143, 18, 172, 189, 61, 73, 142, 62, 177, 127, 44, 190, 197, 165, 246, 190, 118, 195, 10, 186, 226, 204, 38, 189, 46, 243, 141, 61, 71, 222, 58, 190, 162, 240, 67, 61, 231, 197, 178, 61, 146, 220, 113, 62, 195, 109, 0, 61, 80, 183, 156, 62, 226, 115, 157, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 49, 115, 190, 10, 117, 138, 190, 169, 5, 134, 62, 0, 36, 43, 62, 16, 28, 228, 188, 7, 68, 129, 61, 12, 24, 13, 190, 210, 94, 189, 62, 58, 30, 98, 62, 207, 57, 111, 61, 154, 168, 18, 190, 105, 16, 138, 62, 130, 217, 54, 62, 21, 168, 232, 61, 0, 190, 55, 62, 134, 201, 186, 59, 21, 160, 50, 62, 39, 89, 66, 62, 191, 132, 28, 62, 109, 202, 47, 62, 208, 57, 221, 189, 151, 212, 30, 190, 131, 56, 35, 189, 93, 57, 156, 61, 85, 23, 127, 189, 110, 93, 178, 61, 138, 156, 90, 62, 73, 131, 166, 62, 9, 191, 58, 190, 239, 32, 44, 62, 176, 233, 14, 62, 65, 29, 169, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 124, 85, 63, 193, 95, 142, 62, 69, 253, 101, 63, 10, 33, 87, 63, 200, 228, 241, 190, 177, 210, 109, 63, 21, 65, 50, 62, 4, 190, 32, 190, 72, 47, 78, 191, 71, 91, 172, 62, 95, 61, 240, 58, 60, 129, 0, 59, 90, 77, 97, 190, 5, 241, 248, 59, 210, 29, 195, 62, 150, 102, 213, 63, 202, 127, 135, 62, 88, 196, 220, 61, 67, 101, 210, 62, 46, 72, 153, 191, 224, 242, 172, 61, 29, 209, 88, 62, 91, 127, 165, 61, 65, 71, 153, 62, 58, 52, 99, 191, 136, 134, 54, 190, 16, 151, 86, 191, 50, 8, 183, 190, 206, 37, 84, 63, 170, 38, 90, 189, 112, 167, 142, 63, 168, 132, 189, 62, 246, 118, 78, 61, 213, 89, 159, 61, 72, 228, 154, 62, 143, 165, 132, 62, 242, 210, 239, 190, 11, 186, 80, 62, 252, 68, 184, 189, 111, 3, 166, 190, 178, 50, 123, 61, 50, 4, 157, 62, 134, 127, 246, 61, 251, 234, 14, 190, 30, 184, 42, 190, 144, 84, 252, 61, 169, 160, 158, 190, 74, 5, 78, 189, 113, 222, 147, 189, 250, 186, 238, 190, 48, 159, 12, 190, 134, 196, 2, 63, 220, 197, 210, 61, 141, 88, 102, 60, 143, 254, 6, 190, 252, 20, 219, 190, 100, 15, 170, 62, 116, 16, 30, 61, 82, 7, 102, 62, 158, 163, 160, 61, 101, 109, 139, 62, 196, 209, 118, 190, 201, 30, 174, 62, 15, 147, 144, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 35, 215, 189, 11, 208, 14, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {128, 230, 45, 191, 49, 177, 29, 63, 145, 107, 125, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {152, 46, 208, 191, 148, 88, 83, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0012/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}