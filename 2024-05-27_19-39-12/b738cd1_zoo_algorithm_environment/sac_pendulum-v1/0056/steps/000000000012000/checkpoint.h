// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 208, 114, 63, 114, 87, 209, 190, 60, 147, 172, 190, 52, 112, 86, 61, 228, 230, 150, 63, 110, 147, 43, 62, 226, 54, 176, 190, 153, 63, 16, 63, 125, 188, 68, 189, 144, 177, 96, 63, 200, 47, 133, 191, 167, 73, 113, 190, 67, 78, 36, 63, 200, 123, 134, 63, 95, 100, 158, 62, 121, 217, 178, 190, 198, 39, 88, 191, 222, 246, 226, 190, 232, 67, 39, 61, 112, 184, 69, 191, 40, 96, 159, 189, 82, 219, 196, 62, 103, 235, 53, 63, 29, 176, 88, 190, 112, 81, 29, 63, 12, 44, 124, 63, 146, 91, 77, 62, 158, 20, 253, 190, 124, 158, 192, 63, 101, 123, 5, 63, 68, 71, 72, 191, 85, 98, 110, 62, 202, 226, 86, 63, 113, 19, 216, 188, 223, 73, 178, 190, 95, 180, 220, 62, 34, 186, 241, 62, 40, 155, 25, 62, 169, 65, 187, 190, 82, 59, 196, 188, 71, 57, 241, 190, 230, 145, 22, 62, 98, 194, 191, 190, 68, 110, 233, 62, 151, 194, 152, 190, 125, 125, 85, 63, 92, 220, 81, 190, 176, 118, 35, 190, 69, 183, 116, 190, 6, 73, 179, 191, 131, 186, 193, 190, 44, 242, 74, 63, 225, 144, 229, 62, 200, 189, 201, 62, 207, 249, 59, 191, 43, 113, 65, 191, 238, 199, 246, 61, 95, 212, 81, 63, 64, 89, 185, 62, 66, 169, 228, 62, 156, 81, 207, 190, 141, 63, 19, 191, 133, 83, 7, 191, 196, 59, 195, 62, 235, 148, 49, 63, 229, 157, 148, 190, 33, 137, 189, 62, 226, 205, 96, 191, 60, 154, 44, 62, 211, 66, 218, 190, 36, 168, 162, 190, 152, 84, 1, 191, 178, 156, 202, 62, 104, 186, 234, 190, 35, 116, 174, 62, 29, 85, 237, 62, 77, 101, 69, 191, 76, 123, 55, 190, 0, 82, 165, 62, 228, 167, 98, 63, 209, 61, 213, 61, 141, 122, 12, 190, 141, 237, 124, 189, 221, 175, 130, 62, 125, 163, 31, 63, 253, 176, 163, 63, 181, 232, 226, 62, 9, 221, 1, 191, 84, 117, 20, 63, 14, 174, 64, 190, 32, 148, 251, 59, 113, 211, 191, 190, 38, 127, 193, 62, 23, 65, 255, 60, 3, 74, 185, 189, 80, 47, 213, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 97, 135, 191, 244, 79, 22, 61, 244, 101, 229, 62, 233, 240, 131, 190, 17, 112, 181, 190, 194, 40, 174, 62, 29, 18, 33, 191, 80, 185, 240, 62, 224, 151, 202, 62, 200, 156, 213, 189, 239, 231, 176, 190, 158, 66, 69, 191, 201, 93, 79, 62, 79, 118, 250, 61, 113, 182, 82, 62, 17, 174, 219, 190, 162, 1, 55, 190, 221, 119, 111, 191, 38, 221, 9, 63, 61, 144, 27, 62, 177, 145, 4, 191, 51, 195, 202, 61, 81, 121, 182, 62, 174, 31, 30, 191, 204, 86, 54, 62, 216, 120, 96, 62, 86, 74, 184, 62, 16, 232, 193, 189, 33, 183, 86, 61, 224, 185, 162, 190, 247, 149, 211, 187, 7, 161, 175, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {246, 162, 59, 190, 183, 93, 203, 190, 104, 153, 193, 189, 183, 135, 57, 62, 214, 60, 204, 190, 30, 136, 154, 62, 7, 141, 8, 190, 8, 135, 197, 56, 29, 164, 22, 60, 123, 232, 255, 189, 40, 84, 229, 189, 252, 98, 99, 61, 82, 77, 194, 60, 204, 57, 132, 62, 193, 4, 152, 189, 61, 255, 20, 61, 220, 164, 60, 190, 59, 1, 207, 190, 186, 176, 50, 61, 246, 221, 26, 59, 107, 135, 86, 188, 15, 12, 209, 188, 26, 215, 142, 62, 119, 184, 127, 190, 171, 222, 160, 61, 112, 116, 45, 61, 204, 49, 16, 61, 112, 179, 203, 189, 51, 3, 157, 190, 30, 30, 101, 190, 208, 13, 72, 62, 128, 183, 92, 190, 40, 81, 249, 62, 223, 135, 226, 190, 124, 141, 61, 190, 194, 141, 233, 60, 236, 198, 104, 62, 10, 160, 240, 61, 199, 247, 250, 190, 77, 219, 36, 62, 196, 26, 111, 188, 227, 149, 111, 190, 128, 19, 85, 190, 204, 227, 115, 190, 228, 58, 157, 190, 215, 82, 124, 62, 36, 157, 226, 61, 248, 198, 36, 189, 31, 200, 128, 62, 156, 5, 159, 62, 186, 175, 26, 62, 87, 215, 57, 62, 244, 25, 114, 62, 28, 182, 132, 190, 199, 94, 158, 189, 169, 57, 14, 61, 235, 146, 133, 62, 9, 89, 132, 62, 226, 4, 42, 190, 41, 43, 5, 190, 118, 23, 93, 62, 39, 255, 26, 191, 227, 48, 220, 62, 73, 213, 138, 60, 3, 44, 92, 189, 53, 253, 196, 189, 33, 22, 29, 190, 58, 224, 37, 190, 145, 54, 50, 190, 64, 39, 165, 189, 180, 175, 43, 190, 93, 127, 168, 189, 68, 109, 14, 189, 91, 150, 1, 60, 247, 252, 79, 187, 220, 253, 64, 61, 236, 82, 128, 189, 94, 69, 15, 62, 52, 69, 16, 61, 77, 252, 6, 62, 51, 19, 40, 62, 42, 66, 23, 190, 37, 120, 10, 61, 92, 30, 139, 60, 131, 38, 211, 61, 83, 70, 76, 61, 46, 182, 164, 189, 177, 226, 160, 189, 50, 16, 21, 190, 88, 224, 174, 58, 70, 155, 25, 62, 118, 53, 3, 189, 252, 111, 156, 61, 216, 12, 111, 61, 17, 222, 5, 62, 149, 32, 32, 190, 98, 83, 61, 187, 172, 200, 12, 62, 231, 200, 254, 61, 226, 147, 26, 62, 217, 38, 220, 190, 85, 5, 89, 59, 146, 169, 47, 189, 12, 77, 7, 190, 160, 58, 86, 190, 217, 120, 188, 189, 47, 35, 182, 189, 157, 29, 132, 189, 79, 156, 138, 189, 214, 150, 77, 191, 58, 18, 83, 62, 144, 5, 43, 62, 204, 62, 93, 191, 81, 247, 166, 190, 198, 47, 65, 62, 98, 146, 132, 190, 97, 177, 50, 191, 158, 30, 48, 61, 87, 96, 214, 189, 78, 44, 75, 191, 226, 199, 28, 191, 241, 52, 17, 190, 204, 181, 182, 188, 80, 255, 159, 190, 167, 146, 127, 190, 81, 218, 20, 63, 37, 130, 61, 191, 40, 229, 93, 190, 124, 38, 196, 189, 117, 9, 54, 189, 52, 209, 52, 61, 198, 239, 130, 60, 165, 153, 11, 62, 113, 247, 14, 190, 182, 167, 248, 189, 138, 169, 172, 60, 187, 82, 254, 189, 216, 74, 164, 189, 200, 95, 49, 190, 51, 139, 201, 189, 96, 157, 145, 189, 238, 75, 134, 188, 111, 210, 8, 190, 189, 139, 167, 189, 136, 195, 78, 61, 249, 250, 23, 190, 221, 69, 23, 190, 60, 177, 32, 190, 71, 122, 242, 60, 9, 145, 6, 62, 28, 16, 37, 190, 63, 10, 244, 61, 74, 121, 162, 61, 87, 135, 180, 61, 190, 11, 140, 61, 156, 136, 175, 189, 66, 68, 23, 190, 58, 245, 219, 189, 230, 164, 49, 62, 146, 212, 135, 189, 229, 176, 198, 190, 3, 118, 7, 61, 152, 197, 228, 61, 152, 209, 197, 190, 186, 3, 188, 190, 144, 139, 13, 62, 79, 86, 59, 62, 202, 171, 152, 62, 49, 77, 177, 60, 241, 244, 204, 191, 177, 33, 128, 191, 48, 147, 23, 191, 27, 73, 225, 189, 72, 158, 122, 62, 97, 175, 168, 62, 144, 29, 68, 191, 224, 223, 37, 61, 21, 145, 187, 188, 147, 53, 19, 62, 236, 6, 134, 190, 137, 170, 101, 62, 251, 181, 131, 190, 169, 219, 37, 61, 180, 54, 129, 189, 17, 128, 103, 190, 123, 5, 251, 189, 177, 54, 40, 190, 85, 115, 183, 189, 200, 66, 201, 190, 237, 13, 154, 190, 31, 186, 89, 62, 3, 128, 81, 191, 145, 145, 105, 189, 72, 12, 168, 190, 58, 71, 241, 61, 243, 159, 201, 62, 163, 195, 75, 191, 208, 98, 60, 188, 59, 231, 97, 62, 150, 133, 139, 190, 138, 139, 215, 188, 64, 239, 107, 62, 164, 37, 153, 61, 211, 205, 0, 189, 86, 170, 145, 61, 142, 18, 247, 189, 181, 223, 107, 189, 200, 122, 179, 61, 170, 79, 30, 190, 211, 172, 17, 191, 71, 39, 188, 62, 68, 111, 29, 190, 22, 18, 255, 189, 114, 199, 206, 189, 198, 86, 31, 62, 212, 40, 36, 190, 231, 118, 242, 188, 122, 124, 163, 62, 131, 128, 96, 61, 135, 173, 222, 189, 159, 215, 34, 190, 22, 30, 33, 190, 10, 20, 199, 190, 120, 100, 154, 62, 47, 166, 46, 190, 180, 22, 164, 61, 219, 242, 78, 62, 49, 196, 72, 62, 139, 168, 194, 190, 229, 113, 155, 189, 99, 152, 151, 60, 105, 192, 11, 62, 178, 76, 45, 61, 56, 151, 45, 190, 138, 89, 185, 60, 247, 41, 151, 62, 160, 121, 131, 61, 234, 253, 25, 189, 226, 198, 95, 189, 59, 105, 4, 62, 66, 123, 28, 190, 236, 102, 23, 62, 22, 144, 148, 61, 233, 198, 61, 62, 168, 244, 223, 189, 162, 24, 37, 62, 17, 108, 173, 62, 95, 33, 245, 60, 77, 236, 227, 61, 48, 8, 216, 61, 22, 43, 138, 61, 25, 208, 99, 186, 104, 85, 151, 189, 224, 49, 225, 189, 130, 55, 51, 190, 14, 222, 197, 187, 84, 23, 77, 191, 205, 83, 152, 190, 77, 199, 189, 61, 224, 59, 82, 61, 42, 253, 35, 191, 205, 171, 47, 191, 27, 43, 130, 190, 159, 229, 107, 62, 36, 43, 250, 61, 133, 35, 90, 188, 102, 102, 168, 60, 170, 73, 82, 62, 89, 244, 155, 61, 154, 224, 73, 61, 116, 21, 127, 189, 162, 243, 146, 188, 88, 39, 1, 191, 13, 213, 249, 189, 233, 182, 162, 62, 200, 52, 24, 62, 192, 35, 226, 190, 242, 249, 141, 61, 3, 99, 41, 61, 24, 202, 70, 191, 78, 189, 205, 189, 134, 27, 250, 189, 241, 212, 232, 61, 243, 131, 9, 62, 225, 19, 192, 189, 219, 207, 138, 61, 176, 122, 90, 190, 15, 113, 70, 60, 187, 220, 88, 189, 79, 245, 240, 190, 30, 21, 212, 61, 237, 253, 207, 62, 142, 149, 72, 191, 17, 169, 21, 62, 10, 11, 170, 61, 120, 28, 98, 61, 86, 14, 109, 62, 76, 41, 165, 190, 144, 209, 167, 61, 94, 193, 37, 62, 136, 74, 222, 61, 199, 185, 93, 62, 179, 203, 29, 62, 97, 174, 41, 62, 13, 171, 3, 189, 157, 36, 185, 190, 92, 136, 253, 61, 206, 239, 42, 62, 34, 47, 196, 189, 72, 135, 83, 62, 251, 231, 209, 61, 6, 9, 133, 190, 62, 28, 162, 61, 135, 38, 5, 62, 76, 252, 0, 61, 32, 122, 132, 189, 27, 246, 61, 190, 205, 249, 168, 60, 109, 118, 141, 190, 136, 29, 177, 59, 4, 136, 226, 189, 137, 107, 160, 189, 189, 168, 0, 190, 37, 207, 31, 62, 57, 34, 148, 189, 236, 205, 26, 61, 45, 4, 185, 61, 3, 14, 38, 190, 48, 4, 11, 62, 210, 11, 181, 60, 103, 200, 2, 62, 39, 207, 65, 189, 166, 119, 233, 189, 162, 223, 120, 189, 17, 237, 39, 190, 130, 170, 243, 189, 23, 0, 44, 61, 25, 143, 53, 61, 5, 130, 13, 190, 236, 114, 136, 189, 123, 43, 109, 61, 73, 226, 35, 190, 116, 48, 24, 189, 254, 0, 137, 61, 33, 220, 139, 188, 194, 137, 237, 189, 120, 244, 213, 61, 146, 195, 247, 189, 92, 60, 228, 189, 80, 245, 55, 57, 70, 202, 174, 61, 80, 65, 241, 188, 48, 231, 145, 189, 100, 129, 0, 62, 120, 209, 3, 190, 104, 155, 26, 190, 192, 100, 1, 190, 247, 141, 67, 61, 57, 73, 28, 190, 49, 159, 217, 189, 136, 191, 255, 189, 119, 96, 236, 189, 183, 30, 227, 61, 123, 8, 130, 189, 245, 137, 201, 189, 171, 11, 116, 188, 229, 64, 249, 188, 43, 147, 14, 190, 109, 247, 155, 61, 145, 42, 169, 61, 186, 230, 8, 190, 88, 27, 16, 190, 122, 85, 14, 61, 145, 100, 17, 189, 32, 6, 17, 190, 80, 192, 44, 190, 199, 119, 240, 61, 35, 212, 255, 189, 172, 17, 141, 189, 65, 22, 31, 190, 34, 187, 236, 189, 136, 161, 6, 61, 67, 185, 52, 190, 206, 35, 163, 61, 93, 207, 18, 62, 110, 254, 125, 61, 218, 54, 51, 62, 23, 207, 7, 62, 141, 49, 248, 61, 247, 178, 246, 61, 250, 152, 77, 62, 152, 40, 47, 189, 97, 219, 103, 62, 38, 93, 153, 62, 182, 28, 164, 61, 186, 51, 229, 58, 64, 51, 196, 188, 161, 22, 206, 190, 125, 50, 185, 189, 195, 132, 77, 62, 159, 189, 194, 61, 222, 211, 251, 62, 152, 58, 143, 189, 9, 22, 246, 189, 78, 83, 27, 59, 95, 36, 91, 62, 142, 106, 89, 62, 146, 154, 91, 59, 62, 55, 121, 190, 6, 102, 15, 62, 110, 122, 146, 62, 100, 221, 47, 190, 116, 152, 221, 188, 14, 125, 131, 61, 120, 121, 194, 190, 102, 242, 5, 62, 30, 53, 251, 62, 174, 68, 108, 191, 194, 106, 195, 190, 239, 90, 155, 62, 191, 172, 108, 191, 147, 92, 76, 189, 1, 70, 132, 61, 253, 126, 53, 61, 214, 34, 151, 189, 117, 95, 31, 190, 208, 15, 129, 60, 219, 10, 230, 61, 237, 155, 197, 62, 124, 88, 85, 62, 199, 140, 96, 190, 94, 86, 22, 63, 183, 180, 28, 190, 128, 92, 50, 190, 192, 27, 24, 191, 145, 103, 19, 190, 1, 60, 131, 190, 131, 99, 69, 61, 157, 92, 64, 61, 135, 11, 173, 61, 32, 142, 32, 62, 96, 98, 43, 62, 137, 149, 109, 190, 44, 47, 155, 62, 14, 18, 33, 191, 185, 103, 61, 62, 129, 40, 230, 62, 224, 70, 8, 62, 161, 23, 223, 189, 253, 160, 145, 189, 35, 45, 240, 190, 16, 133, 33, 191, 46, 179, 170, 62, 104, 149, 191, 189, 39, 151, 187, 60, 106, 1, 169, 62, 178, 134, 28, 62, 244, 219, 88, 188, 30, 57, 133, 189, 72, 64, 110, 61, 92, 253, 116, 62, 234, 183, 147, 188, 17, 43, 247, 61, 184, 123, 70, 190, 190, 91, 89, 190, 250, 155, 69, 62, 221, 177, 225, 190, 49, 2, 131, 62, 20, 89, 150, 190, 62, 28, 46, 62, 78, 221, 126, 61, 198, 166, 28, 190, 211, 149, 155, 61, 201, 181, 150, 190, 225, 118, 179, 61, 206, 48, 14, 62, 62, 84, 114, 62, 185, 98, 143, 190, 253, 224, 121, 62, 72, 63, 207, 187, 207, 165, 96, 190, 26, 97, 131, 190, 152, 243, 58, 62, 225, 172, 248, 190, 146, 16, 82, 61, 115, 5, 78, 62, 109, 146, 137, 189, 58, 96, 146, 61, 202, 28, 0, 191, 136, 13, 180, 191, 137, 12, 2, 191, 23, 212, 31, 190, 251, 215, 165, 190, 164, 160, 180, 62, 30, 106, 64, 62, 121, 0, 139, 191, 156, 192, 111, 62, 169, 159, 173, 189, 28, 131, 48, 62, 130, 51, 214, 190, 206, 60, 122, 61, 215, 160, 105, 190, 248, 137, 110, 62, 218, 136, 39, 62, 197, 234, 60, 189, 158, 173, 2, 188, 118, 51, 86, 191, 122, 49, 175, 62, 6, 247, 56, 190, 129, 192, 51, 189, 209, 44, 198, 62, 28, 61, 185, 190, 186, 9, 252, 190, 22, 142, 188, 190, 250, 61, 22, 62, 203, 254, 153, 190, 1, 133, 156, 188, 87, 154, 213, 189, 231, 49, 159, 62, 245, 39, 66, 62, 177, 132, 168, 62, 209, 40, 32, 191, 136, 2, 108, 190, 156, 236, 186, 190, 138, 138, 152, 190, 38, 248, 137, 62, 176, 80, 250, 61, 204, 51, 19, 190, 181, 45, 140, 61, 22, 236, 241, 188, 192, 180, 242, 188, 250, 116, 18, 62, 204, 188, 75, 61, 69, 189, 12, 61, 1, 43, 136, 60, 235, 67, 2, 62, 135, 202, 157, 62, 155, 86, 102, 62, 159, 228, 14, 62, 32, 233, 134, 61, 39, 74, 189, 61, 57, 167, 87, 190, 239, 215, 130, 62, 141, 183, 161, 190, 185, 133, 207, 62, 82, 221, 15, 191, 180, 213, 191, 190, 93, 17, 5, 63, 65, 107, 138, 191, 233, 51, 134, 190, 177, 90, 69, 62, 130, 250, 204, 190, 51, 132, 114, 190, 186, 138, 162, 190, 175, 212, 28, 188, 205, 110, 139, 190, 138, 144, 66, 190, 213, 169, 213, 62, 31, 174, 43, 190, 189, 244, 17, 62, 104, 226, 46, 190, 174, 242, 225, 190, 35, 64, 44, 61, 209, 251, 33, 62, 48, 100, 125, 59, 123, 81, 215, 189, 27, 91, 115, 62, 54, 128, 177, 61, 126, 6, 182, 62, 9, 125, 177, 188, 138, 238, 61, 61, 84, 19, 220, 61, 21, 43, 121, 190, 45, 207, 76, 60, 210, 65, 221, 61, 177, 195, 43, 190, 217, 135, 134, 189, 224, 154, 5, 190, 117, 53, 153, 61, 198, 207, 95, 190, 41, 70, 221, 61, 168, 4, 252, 189, 239, 106, 201, 186, 229, 58, 52, 62, 32, 46, 1, 62, 142, 147, 0, 189, 92, 2, 243, 61, 230, 232, 77, 190, 194, 25, 99, 187, 252, 49, 2, 189, 128, 130, 125, 60, 230, 158, 145, 189, 240, 177, 133, 190, 96, 74, 18, 61, 192, 117, 180, 189, 210, 34, 5, 62, 121, 33, 82, 61, 77, 13, 72, 61, 181, 79, 49, 190, 29, 96, 26, 190, 87, 88, 164, 189, 96, 116, 89, 190, 205, 62, 191, 189, 8, 129, 241, 189, 233, 59, 61, 189, 9, 7, 232, 61, 85, 235, 190, 61, 3, 81, 210, 61, 234, 188, 12, 62, 100, 207, 65, 190, 210, 184, 149, 61, 41, 57, 38, 190, 24, 172, 239, 61, 238, 14, 4, 190, 230, 188, 117, 61, 174, 15, 139, 61, 185, 22, 11, 190, 158, 83, 156, 60, 207, 159, 230, 61, 3, 147, 10, 190, 227, 102, 148, 189, 247, 213, 245, 61, 18, 213, 239, 189, 117, 64, 120, 61, 244, 151, 105, 61, 206, 47, 31, 188, 18, 52, 102, 188, 156, 81, 119, 188, 225, 79, 157, 189, 69, 96, 40, 190, 185, 153, 9, 62, 153, 147, 9, 62, 84, 59, 6, 190, 250, 62, 18, 190, 226, 242, 191, 189, 235, 215, 178, 188, 14, 145, 22, 61, 89, 245, 140, 61, 241, 81, 152, 189, 136, 25, 20, 190, 252, 44, 30, 191, 129, 126, 107, 60, 57, 84, 155, 61, 108, 73, 215, 190, 1, 32, 16, 62, 170, 71, 75, 189, 240, 220, 209, 61, 226, 84, 157, 62, 125, 217, 182, 62, 130, 216, 145, 189, 14, 30, 54, 189, 249, 231, 12, 190, 137, 16, 254, 189, 154, 248, 31, 60, 101, 97, 28, 62, 87, 81, 129, 190, 252, 213, 222, 60, 47, 104, 48, 189, 200, 21, 34, 190, 239, 73, 188, 62, 47, 238, 252, 60, 83, 177, 84, 61, 181, 239, 29, 190, 108, 26, 177, 61, 23, 178, 91, 60, 175, 19, 23, 190, 96, 250, 165, 62, 148, 75, 76, 189, 185, 84, 201, 62, 56, 128, 167, 190, 163, 225, 33, 62, 191, 228, 31, 190, 103, 14, 156, 191, 175, 27, 27, 62, 136, 31, 9, 62, 78, 18, 168, 189, 249, 79, 57, 191, 129, 90, 159, 61, 218, 27, 131, 191, 148, 199, 93, 61, 13, 5, 9, 190, 163, 201, 243, 61, 228, 6, 239, 189, 42, 205, 90, 190, 112, 233, 99, 190, 185, 108, 104, 62, 140, 225, 220, 61, 116, 132, 145, 61, 131, 61, 14, 60, 185, 12, 11, 191, 21, 131, 161, 62, 225, 112, 63, 189, 228, 182, 254, 189, 70, 46, 103, 189, 236, 153, 144, 61, 237, 83, 9, 61, 248, 34, 201, 60, 91, 193, 0, 62, 254, 10, 46, 62, 2, 111, 2, 62, 68, 201, 81, 189, 4, 116, 129, 62, 166, 203, 110, 62, 224, 62, 1, 190, 181, 95, 224, 189, 17, 134, 134, 189, 20, 83, 89, 188, 3, 138, 183, 189, 164, 246, 9, 61, 90, 232, 109, 189, 245, 112, 237, 189, 191, 88, 49, 190, 91, 204, 15, 190, 229, 64, 150, 189, 235, 96, 92, 61, 234, 91, 35, 59, 59, 164, 234, 189, 19, 148, 74, 60, 194, 38, 9, 62, 134, 221, 114, 189, 150, 102, 172, 189, 1, 130, 30, 60, 54, 181, 253, 189, 149, 148, 240, 189, 68, 39, 227, 61, 38, 134, 18, 190, 88, 133, 201, 189, 35, 252, 123, 61, 49, 162, 10, 62, 169, 108, 211, 188, 76, 171, 67, 190, 159, 199, 26, 188, 58, 46, 53, 189, 9, 234, 215, 189, 130, 101, 173, 61, 53, 80, 181, 61, 101, 52, 240, 190, 3, 180, 144, 62, 33, 182, 139, 61, 208, 221, 152, 190, 150, 158, 135, 62, 14, 43, 103, 61, 30, 103, 167, 187, 164, 127, 199, 62, 223, 239, 98, 62, 55, 251, 56, 191, 122, 177, 68, 191, 60, 45, 59, 191, 161, 10, 138, 190, 129, 201, 27, 190, 88, 86, 36, 62, 90, 37, 231, 190, 160, 41, 245, 188, 131, 107, 244, 190, 182, 138, 4, 190, 13, 95, 40, 62, 12, 75, 85, 60, 56, 146, 114, 189, 242, 152, 61, 190, 155, 196, 93, 189, 230, 140, 92, 61, 245, 241, 136, 189, 124, 179, 43, 60, 235, 42, 30, 190, 42, 93, 252, 61, 155, 44, 171, 189, 133, 57, 239, 61, 23, 51, 146, 190, 91, 209, 17, 191, 208, 50, 106, 62, 158, 224, 211, 62, 202, 176, 26, 191, 100, 35, 128, 62, 108, 80, 232, 61, 236, 157, 20, 190, 22, 22, 215, 62, 106, 181, 47, 62, 51, 197, 51, 190, 148, 150, 128, 190, 184, 132, 110, 191, 161, 3, 212, 188, 201, 228, 133, 61, 199, 237, 209, 61, 190, 59, 7, 191, 83, 180, 132, 190, 157, 211, 159, 190, 152, 252, 108, 190, 233, 212, 227, 189, 92, 115, 214, 189, 22, 225, 56, 189, 222, 176, 3, 191, 29, 34, 247, 188, 98, 144, 152, 190, 235, 31, 147, 190, 123, 132, 41, 60, 205, 240, 69, 62, 170, 73, 121, 61, 181, 33, 143, 190, 117, 11, 243, 62, 124, 162, 48, 61, 79, 107, 29, 191, 1, 52, 34, 62, 21, 192, 1, 61, 207, 178, 158, 189, 162, 143, 15, 62, 143, 104, 11, 61, 83, 71, 126, 61, 166, 100, 134, 62, 80, 160, 46, 62, 15, 57, 135, 191, 71, 223, 67, 191, 223, 31, 17, 191, 132, 105, 211, 188, 61, 108, 2, 190, 167, 188, 184, 61, 141, 108, 250, 190, 246, 241, 217, 189, 124, 85, 99, 188, 187, 152, 23, 62, 88, 90, 11, 190, 53, 126, 155, 61, 39, 204, 203, 189, 152, 88, 129, 189, 106, 219, 135, 188, 136, 103, 89, 60, 169, 220, 185, 60, 216, 165, 83, 60, 191, 159, 40, 190, 154, 239, 32, 62, 39, 177, 240, 189, 201, 97, 91, 62, 83, 51, 207, 190, 181, 96, 115, 62, 74, 203, 241, 61, 115, 18, 15, 62, 212, 65, 152, 62, 39, 17, 123, 62, 77, 218, 76, 62, 207, 17, 177, 61, 232, 137, 175, 62, 31, 81, 47, 62, 74, 54, 177, 62, 39, 134, 226, 60, 7, 130, 58, 62, 89, 181, 168, 62, 201, 249, 141, 190, 166, 147, 238, 189, 11, 51, 35, 62, 215, 32, 85, 190, 229, 192, 212, 59, 56, 252, 216, 188, 186, 24, 201, 190, 70, 161, 130, 61, 167, 42, 42, 62, 214, 114, 110, 187, 75, 22, 213, 61, 56, 77, 165, 190, 98, 11, 168, 188, 48, 41, 243, 61, 37, 101, 0, 191, 21, 134, 56, 190, 50, 251, 76, 188, 135, 59, 132, 190, 173, 231, 6, 63, 177, 10, 175, 190, 52, 67, 199, 190, 140, 3, 127, 190, 93, 147, 113, 61, 191, 119, 3, 191, 133, 226, 176, 61, 21, 123, 219, 61, 41, 198, 250, 61, 240, 184, 7, 191, 107, 62, 30, 191, 2, 121, 190, 190, 210, 209, 51, 190, 97, 115, 128, 190, 233, 134, 127, 62, 176, 146, 198, 189, 150, 158, 50, 61, 219, 254, 215, 61, 110, 123, 23, 191, 208, 97, 192, 62, 250, 188, 123, 190, 188, 172, 108, 190, 96, 254, 160, 190, 66, 162, 6, 62, 233, 2, 140, 189, 122, 176, 61, 62, 82, 33, 160, 61, 148, 198, 33, 191, 79, 180, 177, 62, 99, 127, 3, 191, 67, 119, 171, 190, 63, 106, 157, 62, 42, 79, 255, 189, 41, 115, 217, 187, 252, 165, 81, 191, 197, 106, 57, 61, 127, 223, 215, 62, 245, 102, 94, 191, 72, 185, 60, 61, 232, 52, 73, 62, 214, 225, 137, 62, 127, 242, 119, 189, 134, 130, 154, 190, 5, 250, 151, 61, 207, 71, 27, 62, 128, 37, 104, 62, 34, 10, 74, 189, 39, 164, 3, 62, 100, 114, 154, 62, 184, 211, 126, 190, 178, 121, 138, 190, 216, 167, 25, 62, 53, 145, 176, 189, 233, 63, 247, 189, 220, 230, 140, 62, 58, 158, 13, 62, 7, 14, 172, 189, 251, 52, 173, 62, 158, 233, 100, 62, 151, 153, 117, 189, 53, 166, 14, 190, 226, 233, 195, 190, 26, 8, 153, 61, 189, 81, 13, 62, 7, 144, 47, 188, 130, 3, 40, 62, 39, 150, 28, 191, 255, 44, 19, 191, 189, 99, 133, 62, 230, 251, 169, 62, 160, 8, 123, 61, 42, 83, 92, 62, 72, 81, 13, 190, 45, 105, 13, 191, 12, 107, 157, 62, 37, 194, 160, 61, 172, 11, 85, 62, 65, 149, 150, 62, 157, 204, 182, 61, 249, 4, 175, 190, 126, 152, 114, 61, 85, 229, 158, 189, 127, 242, 116, 189, 59, 178, 10, 188, 250, 190, 131, 190, 4, 9, 235, 190, 133, 157, 142, 190, 101, 168, 132, 62, 46, 114, 87, 190, 37, 101, 53, 189, 238, 40, 177, 189, 161, 81, 146, 190, 12, 1, 18, 190, 170, 135, 211, 190, 135, 11, 213, 190, 2, 77, 134, 61, 15, 252, 194, 62, 213, 230, 232, 189, 222, 133, 6, 188, 104, 122, 226, 189, 26, 233, 55, 61, 116, 85, 226, 189, 171, 164, 16, 190, 75, 193, 141, 61, 23, 107, 214, 61, 226, 194, 241, 61, 226, 132, 149, 60, 217, 217, 0, 190, 116, 80, 234, 61, 160, 52, 164, 189, 153, 62, 155, 61, 228, 14, 159, 189, 144, 224, 251, 187, 115, 159, 18, 190, 173, 203, 213, 61, 132, 182, 38, 190, 153, 202, 78, 60, 224, 50, 35, 60, 126, 180, 58, 190, 193, 69, 200, 189, 77, 58, 156, 61, 49, 106, 160, 61, 101, 28, 204, 189, 148, 8, 229, 61, 182, 186, 50, 190, 65, 214, 36, 190, 128, 203, 196, 61, 238, 73, 212, 188, 43, 188, 3, 61, 242, 140, 1, 190, 120, 77, 63, 62, 62, 78, 47, 62, 219, 230, 220, 62, 178, 208, 28, 191, 244, 157, 219, 190, 226, 161, 73, 190, 51, 148, 3, 190, 208, 229, 107, 190, 231, 94, 85, 189, 57, 81, 10, 190, 157, 225, 230, 62, 250, 139, 131, 60, 133, 16, 137, 189, 66, 148, 91, 189, 183, 71, 168, 62, 160, 236, 165, 191, 250, 90, 242, 190, 60, 246, 2, 63, 229, 88, 25, 190, 0, 232, 148, 191, 142, 224, 129, 190, 183, 38, 185, 62, 137, 172, 95, 191, 137, 30, 46, 189, 156, 225, 152, 62, 11, 83, 57, 60, 136, 142, 117, 190, 209, 245, 141, 190, 134, 119, 238, 62, 205, 52, 92, 190, 131, 208, 174, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 209, 149, 61, 10, 117, 157, 189, 208, 240, 22, 190, 234, 193, 39, 62, 158, 111, 62, 189, 249, 7, 150, 62, 144, 38, 165, 62, 192, 92, 215, 62, 179, 196, 141, 62, 39, 158, 150, 62, 84, 50, 153, 189, 183, 33, 150, 61, 228, 106, 143, 61, 189, 233, 224, 188, 199, 52, 40, 190, 154, 134, 93, 62, 165, 248, 60, 62, 93, 163, 244, 189, 50, 214, 201, 189, 214, 246, 186, 189, 24, 244, 185, 61, 73, 21, 164, 61, 117, 49, 9, 190, 167, 88, 152, 62, 123, 193, 123, 62, 11, 54, 89, 62, 218, 196, 15, 61, 68, 43, 125, 62, 96, 93, 210, 62, 79, 59, 0, 62, 113, 42, 74, 190, 184, 37, 195, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 47, 42, 62, 146, 42, 202, 190, 254, 146, 247, 189, 116, 4, 99, 63, 107, 81, 50, 189, 36, 26, 96, 191, 101, 192, 17, 63, 78, 225, 193, 61, 103, 35, 53, 61, 120, 132, 0, 62, 118, 225, 206, 61, 185, 141, 9, 190, 183, 202, 249, 61, 219, 153, 158, 62, 161, 170, 172, 190, 161, 204, 53, 191, 80, 123, 180, 190, 229, 199, 53, 63, 251, 121, 185, 60, 35, 239, 150, 61, 108, 253, 110, 190, 9, 145, 187, 62, 150, 99, 0, 190, 28, 6, 58, 191, 65, 148, 37, 191, 25, 177, 227, 190, 209, 171, 139, 62, 231, 166, 99, 191, 130, 139, 134, 62, 51, 117, 29, 191, 162, 56, 178, 189, 82, 71, 153, 63, 18, 248, 233, 62, 138, 6, 97, 189, 65, 202, 133, 61, 155, 155, 98, 62, 151, 109, 19, 190, 239, 235, 16, 186, 190, 46, 18, 189, 62, 200, 161, 190, 228, 108, 242, 190, 105, 24, 138, 190, 192, 243, 7, 187, 232, 40, 50, 62, 33, 115, 33, 190, 169, 75, 42, 63, 80, 203, 166, 62, 65, 167, 54, 62, 229, 130, 140, 190, 223, 27, 34, 62, 253, 153, 93, 61, 248, 196, 31, 188, 10, 229, 104, 190, 218, 170, 160, 62, 18, 126, 225, 60, 33, 195, 15, 61, 62, 127, 83, 62, 104, 179, 199, 60, 184, 64, 249, 61, 192, 108, 34, 54, 154, 182, 135, 190, 72, 91, 210, 61, 150, 16, 186, 60, 42, 247, 89, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 197, 38, 61, 6, 74, 178, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {10, 29, 117, 191, 123, 116, 8, 190, 16, 168, 182, 188};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {160, 6, 86, 63, 188, 248, 198, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0056/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}