// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 227, 118, 63, 10, 8, 237, 190, 84, 10, 155, 190, 248, 188, 125, 189, 61, 216, 167, 63, 106, 227, 82, 62, 89, 22, 229, 190, 57, 54, 254, 62, 242, 200, 131, 188, 60, 186, 91, 63, 74, 213, 136, 191, 151, 133, 126, 190, 187, 58, 35, 63, 43, 0, 142, 63, 206, 35, 168, 62, 116, 149, 4, 191, 231, 84, 143, 191, 70, 217, 192, 190, 45, 224, 174, 62, 157, 151, 95, 191, 140, 76, 27, 190, 162, 76, 179, 62, 233, 140, 60, 63, 100, 163, 84, 190, 125, 168, 19, 63, 218, 115, 147, 63, 9, 227, 100, 62, 95, 63, 132, 191, 55, 70, 200, 63, 128, 91, 254, 62, 185, 60, 109, 191, 72, 92, 161, 62, 164, 252, 47, 63, 136, 60, 34, 61, 192, 92, 158, 190, 183, 3, 180, 62, 246, 206, 238, 62, 14, 234, 44, 62, 88, 182, 183, 190, 170, 100, 0, 60, 204, 130, 198, 190, 83, 143, 95, 62, 173, 164, 229, 190, 47, 252, 192, 62, 48, 159, 146, 190, 234, 26, 87, 63, 142, 244, 76, 190, 191, 230, 19, 190, 145, 1, 153, 190, 197, 166, 215, 191, 51, 144, 220, 190, 186, 137, 62, 63, 237, 2, 3, 63, 149, 123, 189, 62, 200, 104, 36, 191, 2, 26, 56, 191, 137, 104, 31, 62, 12, 106, 73, 63, 172, 103, 30, 63, 192, 31, 228, 62, 39, 7, 15, 191, 216, 57, 67, 191, 159, 98, 7, 191, 190, 41, 174, 62, 72, 147, 61, 63, 3, 13, 145, 190, 155, 70, 187, 62, 128, 121, 81, 191, 226, 121, 0, 62, 101, 240, 159, 190, 198, 102, 1, 191, 25, 215, 4, 191, 30, 229, 179, 62, 17, 111, 181, 190, 52, 176, 181, 62, 253, 222, 215, 62, 160, 83, 79, 191, 165, 162, 36, 190, 74, 233, 85, 62, 173, 8, 122, 63, 133, 113, 226, 61, 187, 83, 68, 190, 22, 31, 175, 189, 118, 6, 49, 62, 102, 8, 26, 63, 165, 65, 202, 63, 185, 220, 178, 62, 177, 94, 27, 191, 63, 162, 19, 63, 233, 197, 39, 190, 42, 179, 101, 189, 93, 231, 200, 190, 111, 185, 172, 62, 249, 113, 72, 189, 115, 149, 68, 190, 77, 129, 224, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 177, 144, 191, 175, 177, 32, 189, 92, 203, 232, 62, 23, 151, 153, 190, 64, 88, 186, 190, 148, 128, 151, 62, 201, 180, 10, 191, 4, 111, 221, 62, 157, 252, 193, 62, 91, 92, 246, 61, 211, 160, 131, 190, 125, 199, 107, 191, 79, 186, 43, 62, 186, 198, 228, 60, 27, 68, 83, 62, 220, 125, 235, 190, 120, 249, 45, 190, 188, 195, 130, 191, 62, 111, 34, 63, 166, 189, 167, 61, 217, 120, 26, 191, 217, 31, 42, 61, 191, 231, 174, 62, 77, 124, 39, 191, 47, 36, 207, 61, 132, 232, 56, 62, 70, 152, 142, 62, 205, 209, 24, 190, 117, 23, 19, 61, 89, 18, 190, 190, 79, 5, 173, 189, 224, 95, 173, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 148, 31, 190, 170, 253, 86, 191, 15, 250, 71, 190, 53, 117, 111, 62, 32, 174, 233, 190, 25, 226, 80, 62, 0, 11, 134, 190, 155, 223, 50, 61, 146, 149, 72, 61, 235, 131, 239, 189, 6, 125, 41, 190, 118, 175, 197, 60, 143, 7, 49, 61, 5, 13, 144, 62, 147, 58, 49, 188, 241, 142, 182, 61, 242, 213, 172, 190, 149, 50, 240, 190, 136, 235, 64, 189, 72, 11, 65, 61, 171, 47, 135, 59, 18, 80, 21, 188, 212, 176, 155, 62, 252, 30, 132, 190, 48, 155, 242, 61, 27, 170, 155, 61, 19, 63, 121, 61, 169, 224, 26, 190, 225, 53, 165, 190, 61, 77, 144, 61, 167, 218, 41, 62, 58, 251, 135, 190, 21, 63, 20, 63, 194, 50, 134, 190, 43, 95, 130, 190, 105, 141, 72, 61, 48, 209, 133, 62, 83, 216, 65, 62, 255, 201, 193, 190, 116, 13, 243, 61, 51, 167, 56, 189, 59, 234, 113, 190, 15, 174, 47, 190, 240, 144, 43, 190, 194, 133, 161, 190, 142, 160, 139, 62, 147, 60, 249, 61, 216, 191, 82, 189, 99, 20, 184, 62, 189, 2, 245, 62, 21, 24, 29, 62, 19, 82, 52, 62, 116, 125, 139, 62, 8, 131, 154, 190, 14, 149, 96, 189, 52, 212, 160, 61, 112, 53, 144, 62, 82, 202, 137, 62, 194, 213, 79, 190, 139, 58, 219, 189, 220, 159, 104, 62, 167, 149, 24, 191, 214, 233, 233, 62, 145, 30, 150, 61, 3, 44, 92, 189, 53, 253, 196, 189, 44, 243, 28, 190, 197, 212, 37, 190, 145, 54, 50, 190, 79, 16, 164, 189, 180, 175, 43, 190, 29, 101, 168, 189, 68, 109, 14, 189, 91, 150, 1, 60, 247, 252, 79, 187, 220, 253, 64, 61, 121, 22, 128, 189, 94, 69, 15, 62, 86, 70, 17, 61, 77, 252, 6, 62, 218, 144, 40, 62, 42, 66, 23, 190, 14, 167, 11, 61, 92, 30, 139, 60, 83, 224, 211, 61, 18, 64, 76, 61, 222, 189, 164, 189, 77, 109, 160, 189, 50, 16, 21, 190, 192, 223, 194, 58, 70, 155, 25, 62, 118, 53, 3, 189, 252, 111, 156, 61, 251, 59, 111, 61, 17, 222, 5, 62, 149, 32, 32, 190, 98, 83, 61, 187, 59, 158, 237, 61, 241, 234, 100, 62, 226, 147, 26, 62, 198, 73, 241, 190, 113, 61, 113, 62, 146, 169, 47, 189, 15, 118, 63, 190, 188, 68, 175, 190, 15, 166, 213, 61, 28, 9, 108, 190, 157, 29, 132, 189, 33, 68, 114, 190, 188, 178, 120, 191, 227, 56, 141, 62, 31, 254, 6, 62, 52, 37, 15, 191, 81, 247, 166, 190, 113, 2, 162, 62, 167, 7, 98, 189, 19, 197, 129, 190, 103, 179, 160, 189, 224, 35, 88, 190, 90, 102, 4, 191, 173, 29, 34, 191, 35, 208, 63, 190, 5, 35, 174, 189, 97, 173, 208, 190, 135, 34, 213, 190, 177, 111, 48, 63, 231, 232, 128, 191, 45, 101, 207, 190, 124, 38, 196, 189, 117, 9, 54, 189, 52, 209, 52, 61, 198, 239, 130, 60, 165, 153, 11, 62, 113, 247, 14, 190, 182, 167, 248, 189, 138, 169, 172, 60, 187, 82, 254, 189, 216, 74, 164, 189, 200, 95, 49, 190, 51, 139, 201, 189, 96, 157, 145, 189, 238, 75, 134, 188, 111, 210, 8, 190, 189, 139, 167, 189, 136, 195, 78, 61, 249, 250, 23, 190, 221, 69, 23, 190, 60, 177, 32, 190, 71, 122, 242, 60, 9, 145, 6, 62, 28, 16, 37, 190, 63, 10, 244, 61, 74, 121, 162, 61, 87, 135, 180, 61, 190, 11, 140, 61, 156, 136, 175, 189, 66, 68, 23, 190, 58, 245, 219, 189, 230, 164, 49, 62, 146, 212, 135, 189, 174, 251, 189, 190, 73, 50, 85, 61, 133, 65, 174, 61, 181, 121, 193, 190, 87, 224, 97, 190, 77, 204, 14, 62, 49, 139, 155, 62, 238, 121, 138, 62, 30, 149, 132, 61, 231, 7, 242, 191, 54, 148, 144, 191, 48, 147, 23, 191, 177, 81, 238, 189, 135, 43, 182, 59, 114, 83, 160, 62, 93, 8, 84, 191, 77, 245, 150, 61, 21, 145, 187, 188, 213, 193, 213, 61, 186, 130, 120, 190, 224, 177, 106, 62, 241, 50, 138, 190, 116, 42, 91, 189, 12, 27, 85, 189, 190, 191, 220, 190, 235, 140, 212, 189, 217, 103, 46, 190, 84, 232, 9, 190, 226, 231, 191, 190, 58, 182, 150, 190, 206, 84, 144, 189, 136, 24, 138, 191, 9, 95, 158, 189, 173, 143, 20, 191, 244, 86, 191, 61, 148, 143, 217, 62, 56, 119, 71, 191, 91, 45, 201, 189, 254, 217, 48, 62, 88, 110, 105, 190, 58, 251, 4, 61, 235, 120, 143, 62, 178, 225, 109, 61, 83, 157, 153, 189, 162, 55, 164, 61, 8, 246, 185, 189, 202, 144, 23, 190, 55, 85, 254, 61, 56, 190, 131, 190, 102, 50, 41, 191, 177, 70, 193, 62, 23, 15, 195, 189, 26, 167, 26, 190, 181, 153, 166, 189, 63, 249, 56, 62, 213, 22, 106, 190, 23, 150, 131, 58, 29, 199, 176, 62, 107, 73, 205, 61, 216, 211, 235, 189, 97, 86, 9, 190, 21, 181, 131, 190, 252, 30, 187, 190, 117, 202, 153, 62, 115, 122, 26, 190, 205, 102, 139, 61, 212, 37, 148, 62, 203, 224, 17, 62, 153, 78, 190, 190, 66, 7, 110, 189, 162, 233, 47, 61, 75, 190, 54, 62, 235, 132, 28, 61, 111, 53, 34, 190, 122, 70, 27, 61, 91, 56, 157, 62, 70, 236, 161, 61, 244, 78, 227, 188, 255, 227, 74, 188, 4, 241, 239, 61, 91, 57, 93, 190, 118, 194, 11, 62, 119, 76, 83, 62, 36, 250, 44, 62, 153, 31, 231, 189, 110, 1, 92, 62, 12, 92, 155, 62, 122, 110, 148, 60, 193, 222, 127, 61, 169, 212, 154, 61, 27, 5, 192, 61, 26, 120, 199, 60, 84, 115, 225, 189, 64, 107, 238, 189, 124, 80, 229, 189, 194, 186, 159, 60, 183, 162, 69, 191, 210, 189, 181, 190, 232, 248, 202, 61, 183, 138, 39, 188, 155, 253, 24, 191, 231, 89, 59, 191, 38, 123, 1, 190, 75, 156, 66, 62, 45, 77, 198, 61, 44, 18, 190, 188, 97, 153, 38, 61, 193, 89, 110, 62, 177, 0, 76, 60, 144, 235, 215, 61, 245, 44, 45, 190, 201, 255, 165, 189, 250, 207, 229, 190, 192, 113, 191, 189, 38, 68, 205, 62, 175, 66, 23, 62, 218, 195, 19, 191, 141, 118, 139, 61, 158, 83, 149, 60, 198, 187, 132, 191, 16, 178, 217, 189, 145, 131, 32, 190, 84, 7, 157, 61, 75, 104, 43, 62, 124, 180, 205, 189, 163, 207, 84, 188, 179, 30, 254, 189, 179, 140, 144, 61, 203, 228, 1, 189, 94, 233, 37, 191, 248, 70, 25, 62, 184, 194, 188, 62, 16, 225, 71, 191, 112, 148, 25, 62, 122, 168, 158, 61, 103, 139, 177, 61, 56, 247, 111, 62, 31, 180, 199, 190, 212, 131, 132, 61, 140, 245, 21, 62, 130, 16, 228, 61, 59, 224, 123, 62, 195, 211, 53, 62, 170, 195, 36, 62, 226, 218, 232, 189, 175, 178, 175, 190, 178, 226, 108, 62, 198, 199, 56, 62, 246, 10, 186, 189, 32, 191, 115, 62, 251, 255, 194, 61, 239, 134, 136, 190, 124, 3, 131, 61, 221, 62, 219, 61, 221, 17, 68, 61, 222, 161, 84, 189, 129, 237, 105, 190, 152, 140, 34, 60, 21, 102, 83, 190, 230, 139, 8, 61, 4, 136, 226, 189, 137, 107, 160, 189, 189, 168, 0, 190, 37, 207, 31, 62, 57, 34, 148, 189, 236, 205, 26, 61, 45, 4, 185, 61, 3, 14, 38, 190, 48, 4, 11, 62, 210, 11, 181, 60, 103, 200, 2, 62, 39, 207, 65, 189, 166, 119, 233, 189, 162, 223, 120, 189, 17, 237, 39, 190, 130, 170, 243, 189, 23, 0, 44, 61, 25, 143, 53, 61, 5, 130, 13, 190, 236, 114, 136, 189, 123, 43, 109, 61, 73, 226, 35, 190, 116, 48, 24, 189, 254, 0, 137, 61, 33, 220, 139, 188, 194, 137, 237, 189, 120, 244, 213, 61, 146, 195, 247, 189, 92, 60, 228, 189, 80, 245, 55, 57, 70, 202, 174, 61, 80, 65, 241, 188, 48, 231, 145, 189, 100, 129, 0, 62, 120, 209, 3, 190, 104, 155, 26, 190, 192, 100, 1, 190, 247, 141, 67, 61, 57, 73, 28, 190, 49, 159, 217, 189, 136, 191, 255, 189, 119, 96, 236, 189, 183, 30, 227, 61, 123, 8, 130, 189, 245, 137, 201, 189, 171, 11, 116, 188, 229, 64, 249, 188, 43, 147, 14, 190, 109, 247, 155, 61, 145, 42, 169, 61, 186, 230, 8, 190, 88, 27, 16, 190, 122, 85, 14, 61, 145, 100, 17, 189, 32, 6, 17, 190, 80, 192, 44, 190, 199, 119, 240, 61, 35, 212, 255, 189, 172, 17, 141, 189, 65, 22, 31, 190, 34, 187, 236, 189, 136, 161, 6, 61, 67, 185, 52, 190, 206, 35, 163, 61, 139, 95, 35, 62, 202, 167, 4, 61, 210, 233, 107, 62, 131, 118, 123, 61, 222, 202, 246, 61, 206, 73, 3, 62, 24, 127, 24, 62, 109, 89, 176, 188, 125, 169, 81, 62, 244, 218, 215, 62, 159, 182, 27, 62, 252, 179, 21, 61, 18, 174, 251, 188, 51, 95, 255, 190, 5, 210, 138, 189, 11, 48, 51, 62, 163, 102, 222, 60, 107, 170, 194, 62, 170, 4, 161, 61, 50, 250, 44, 190, 84, 199, 213, 59, 131, 69, 116, 62, 28, 19, 233, 61, 243, 173, 139, 187, 79, 176, 181, 190, 136, 204, 140, 61, 250, 164, 150, 62, 141, 135, 227, 189, 118, 146, 131, 189, 0, 190, 113, 61, 91, 245, 188, 190, 238, 155, 126, 61, 175, 2, 32, 63, 203, 192, 176, 191, 2, 79, 177, 190, 31, 53, 64, 62, 242, 180, 135, 191, 254, 221, 28, 190, 74, 161, 154, 190, 12, 74, 214, 61, 37, 240, 22, 60, 212, 186, 118, 190, 36, 123, 68, 61, 79, 9, 13, 62, 213, 128, 208, 62, 239, 237, 106, 62, 64, 137, 63, 190, 133, 97, 40, 63, 199, 111, 176, 190, 53, 198, 92, 190, 58, 8, 42, 191, 88, 225, 131, 60, 74, 205, 117, 190, 85, 68, 251, 61, 70, 132, 140, 189, 24, 158, 199, 61, 187, 126, 25, 62, 145, 248, 132, 61, 150, 138, 42, 190, 104, 40, 174, 62, 204, 82, 26, 191, 56, 47, 65, 62, 229, 156, 10, 63, 37, 162, 105, 62, 206, 246, 157, 189, 179, 84, 220, 60, 214, 246, 214, 190, 108, 99, 37, 191, 193, 134, 140, 62, 243, 79, 19, 190, 184, 159, 226, 187, 132, 54, 164, 62, 175, 153, 22, 62, 221, 129, 10, 190, 190, 211, 253, 189, 169, 27, 154, 60, 171, 207, 119, 62, 79, 230, 102, 189, 91, 30, 36, 62, 168, 138, 76, 190, 71, 146, 191, 190, 137, 7, 97, 62, 94, 84, 9, 191, 221, 201, 96, 62, 125, 31, 226, 190, 99, 23, 53, 62, 51, 183, 123, 61, 163, 98, 135, 190, 111, 137, 111, 61, 186, 42, 159, 190, 189, 1, 195, 61, 201, 234, 165, 61, 25, 190, 100, 62, 225, 87, 137, 190, 89, 232, 57, 62, 198, 96, 197, 188, 173, 26, 84, 190, 60, 159, 184, 190, 206, 105, 46, 62, 200, 123, 239, 190, 146, 16, 82, 61, 91, 147, 125, 62, 227, 58, 98, 187, 122, 56, 50, 61, 113, 211, 137, 191, 175, 197, 225, 191, 160, 137, 212, 190, 173, 55, 228, 189, 200, 187, 163, 190, 240, 31, 202, 62, 192, 105, 88, 62, 125, 14, 157, 191, 235, 186, 158, 62, 86, 92, 191, 189, 130, 85, 48, 62, 187, 217, 255, 190, 27, 10, 238, 61, 122, 213, 109, 190, 39, 243, 93, 62, 6, 67, 99, 62, 134, 95, 226, 60, 235, 151, 81, 60, 75, 199, 116, 191, 251, 169, 223, 62, 111, 234, 171, 190, 239, 214, 96, 188, 76, 17, 238, 62, 41, 244, 149, 190, 203, 201, 12, 191, 61, 209, 216, 189, 114, 122, 70, 62, 164, 245, 190, 190, 228, 12, 81, 60, 227, 156, 19, 190, 184, 77, 252, 62, 102, 193, 59, 62, 180, 251, 173, 62, 176, 130, 60, 191, 98, 123, 83, 190, 50, 208, 210, 190, 196, 93, 150, 190, 131, 230, 110, 62, 131, 48, 255, 61, 225, 38, 31, 190, 73, 242, 137, 60, 25, 98, 62, 62, 172, 208, 107, 189, 83, 49, 221, 61, 96, 104, 35, 189, 137, 179, 92, 61, 142, 169, 31, 187, 232, 22, 128, 61, 233, 249, 143, 62, 211, 166, 69, 62, 116, 223, 53, 62, 13, 122, 106, 61, 216, 32, 10, 62, 73, 175, 89, 190, 239, 152, 131, 62, 234, 139, 140, 190, 139, 189, 225, 62, 238, 36, 24, 191, 7, 0, 215, 190, 18, 191, 192, 62, 195, 237, 142, 191, 238, 101, 44, 191, 28, 124, 14, 190, 114, 57, 167, 190, 107, 23, 205, 189, 204, 193, 186, 190, 14, 87, 47, 189, 87, 16, 136, 190, 195, 99, 176, 190, 111, 85, 197, 62, 166, 154, 16, 190, 203, 31, 209, 61, 161, 151, 32, 191, 116, 220, 218, 190, 228, 177, 91, 189, 162, 37, 112, 62, 92, 21, 141, 61, 50, 213, 152, 60, 28, 74, 73, 62, 46, 48, 218, 61, 118, 211, 179, 62, 170, 221, 0, 190, 32, 140, 77, 62, 243, 248, 196, 61, 121, 17, 123, 190, 132, 12, 69, 60, 184, 94, 233, 61, 4, 235, 30, 190, 168, 92, 39, 191, 153, 45, 239, 61, 199, 181, 59, 62, 41, 54, 31, 191, 55, 141, 118, 62, 208, 22, 9, 190, 239, 106, 201, 186, 223, 178, 52, 62, 96, 10, 14, 62, 47, 246, 80, 62, 165, 107, 71, 62, 37, 172, 77, 190, 245, 205, 53, 189, 234, 121, 200, 189, 208, 103, 142, 60, 68, 137, 197, 190, 63, 72, 157, 190, 86, 190, 0, 190, 245, 150, 92, 189, 40, 7, 7, 62, 40, 55, 207, 61, 230, 238, 29, 61, 105, 44, 198, 190, 133, 210, 241, 189, 79, 21, 62, 190, 101, 235, 255, 190, 114, 199, 34, 189, 88, 18, 129, 189, 190, 67, 85, 60, 98, 37, 20, 62, 235, 212, 148, 61, 222, 208, 170, 61, 234, 188, 12, 62, 15, 244, 65, 190, 49, 104, 144, 61, 41, 57, 38, 190, 24, 172, 239, 61, 241, 221, 4, 190, 230, 188, 117, 61, 174, 15, 139, 61, 185, 22, 11, 190, 135, 124, 113, 60, 202, 198, 215, 61, 3, 147, 10, 190, 227, 102, 148, 189, 9, 175, 241, 61, 252, 245, 239, 189, 117, 64, 120, 61, 244, 151, 105, 61, 206, 47, 31, 188, 225, 129, 170, 188, 126, 209, 120, 188, 225, 79, 157, 189, 69, 96, 40, 190, 174, 190, 7, 62, 153, 147, 9, 62, 58, 255, 7, 190, 250, 62, 18, 190, 38, 48, 192, 189, 31, 107, 192, 188, 14, 145, 22, 61, 89, 245, 140, 61, 138, 0, 158, 189, 51, 45, 23, 190, 198, 178, 52, 191, 43, 204, 86, 61, 222, 215, 185, 61, 133, 237, 2, 191, 22, 56, 215, 61, 67, 211, 202, 189, 133, 136, 201, 61, 92, 152, 148, 62, 249, 10, 181, 62, 122, 249, 137, 190, 199, 57, 144, 189, 122, 194, 7, 190, 250, 154, 3, 190, 232, 229, 188, 60, 108, 72, 27, 62, 185, 251, 145, 190, 85, 206, 122, 189, 81, 188, 97, 61, 128, 4, 27, 190, 69, 47, 171, 62, 14, 255, 62, 189, 120, 54, 141, 61, 253, 164, 45, 190, 236, 57, 245, 60, 135, 73, 233, 187, 213, 99, 65, 190, 137, 213, 170, 62, 170, 64, 143, 189, 89, 26, 197, 62, 138, 140, 172, 190, 108, 244, 68, 62, 98, 204, 213, 189, 93, 237, 193, 191, 180, 108, 228, 62, 64, 112, 70, 62, 54, 59, 32, 190, 36, 98, 8, 191, 202, 246, 163, 61, 122, 19, 158, 191, 163, 169, 2, 60, 17, 82, 82, 186, 52, 192, 178, 62, 57, 192, 116, 189, 91, 10, 110, 190, 168, 183, 154, 190, 234, 57, 126, 62, 199, 176, 182, 61, 206, 30, 222, 189, 74, 226, 78, 188, 54, 154, 38, 191, 146, 100, 195, 62, 86, 241, 159, 61, 44, 176, 163, 189, 41, 228, 2, 190, 202, 37, 95, 61, 142, 114, 56, 61, 243, 93, 74, 61, 131, 53, 131, 61, 159, 17, 107, 62, 41, 163, 41, 62, 73, 68, 103, 61, 65, 226, 119, 62, 129, 55, 143, 62, 41, 248, 137, 189, 181, 95, 224, 189, 17, 134, 134, 189, 20, 83, 89, 188, 3, 138, 183, 189, 22, 169, 0, 61, 90, 232, 109, 189, 245, 112, 237, 189, 191, 88, 49, 190, 7, 186, 17, 190, 248, 124, 166, 189, 215, 75, 60, 61, 156, 203, 60, 187, 59, 164, 234, 189, 68, 78, 125, 59, 194, 38, 9, 62, 134, 221, 114, 189, 150, 102, 172, 189, 200, 150, 200, 59, 18, 139, 7, 190, 75, 70, 254, 189, 68, 39, 227, 61, 38, 134, 18, 190, 92, 2, 216, 189, 35, 252, 123, 61, 231, 144, 3, 62, 169, 108, 211, 188, 76, 171, 67, 190, 195, 70, 106, 188, 54, 95, 64, 189, 9, 234, 215, 189, 17, 53, 156, 61, 7, 4, 166, 61, 14, 129, 4, 191, 33, 204, 238, 62, 93, 39, 181, 61, 231, 17, 178, 190, 220, 34, 114, 62, 98, 40, 55, 60, 35, 109, 189, 187, 145, 193, 195, 62, 118, 47, 108, 62, 57, 118, 124, 191, 214, 122, 47, 191, 109, 147, 62, 191, 123, 165, 134, 190, 153, 217, 126, 190, 42, 92, 29, 62, 37, 250, 229, 190, 186, 243, 190, 189, 212, 191, 206, 190, 102, 176, 235, 190, 212, 214, 3, 62, 100, 38, 123, 189, 109, 242, 62, 189, 77, 200, 84, 190, 242, 33, 226, 189, 32, 161, 171, 60, 229, 242, 180, 189, 109, 167, 250, 60, 12, 242, 48, 190, 189, 87, 7, 62, 33, 208, 202, 189, 115, 172, 80, 190, 31, 111, 128, 190, 113, 49, 30, 191, 142, 9, 18, 62, 97, 173, 200, 62, 74, 95, 33, 191, 8, 255, 0, 190, 218, 100, 146, 61, 236, 157, 20, 190, 151, 190, 219, 62, 233, 30, 86, 62, 166, 59, 18, 191, 55, 149, 131, 190, 32, 116, 54, 191, 81, 146, 172, 59, 181, 39, 76, 62, 120, 136, 189, 61, 81, 111, 223, 190, 143, 217, 158, 190, 190, 67, 6, 191, 142, 149, 159, 190, 38, 52, 196, 190, 20, 221, 52, 190, 199, 162, 170, 188, 16, 52, 221, 190, 199, 137, 171, 189, 19, 174, 214, 190, 154, 85, 101, 190, 60, 47, 236, 60, 167, 188, 160, 62, 226, 11, 15, 58, 196, 138, 155, 190, 162, 57, 22, 63, 23, 187, 222, 189, 28, 243, 41, 191, 71, 153, 202, 62, 161, 253, 151, 61, 246, 189, 10, 190, 105, 222, 243, 61, 64, 252, 56, 188, 74, 165, 56, 61, 35, 230, 132, 62, 39, 48, 61, 62, 195, 207, 164, 191, 214, 209, 58, 191, 223, 31, 17, 191, 151, 131, 178, 188, 123, 102, 82, 190, 145, 142, 182, 61, 213, 199, 249, 190, 31, 49, 45, 190, 135, 57, 128, 189, 200, 72, 57, 62, 92, 252, 43, 190, 249, 47, 224, 186, 201, 48, 171, 189, 73, 144, 172, 189, 45, 231, 158, 189, 2, 229, 164, 188, 52, 98, 37, 187, 62, 157, 54, 61, 29, 124, 75, 190, 95, 110, 52, 62, 135, 223, 5, 190, 71, 113, 231, 189, 184, 55, 181, 190, 114, 54, 128, 62, 251, 38, 152, 61, 15, 30, 50, 62, 3, 150, 138, 62, 226, 240, 141, 62, 177, 103, 84, 62, 82, 238, 136, 189, 188, 78, 182, 62, 152, 110, 49, 62, 23, 25, 255, 62, 197, 160, 184, 61, 45, 149, 44, 62, 55, 166, 160, 62, 232, 73, 118, 190, 17, 29, 202, 189, 184, 73, 9, 62, 73, 211, 129, 190, 153, 152, 111, 189, 95, 3, 104, 61, 116, 113, 193, 190, 1, 76, 224, 61, 144, 190, 44, 62, 127, 207, 35, 189, 245, 81, 9, 62, 140, 134, 174, 190, 185, 239, 112, 189, 84, 94, 0, 62, 190, 13, 230, 190, 219, 14, 60, 190, 9, 71, 75, 60, 234, 190, 85, 190, 217, 17, 5, 63, 122, 156, 201, 190, 144, 109, 199, 190, 121, 131, 225, 190, 10, 51, 28, 62, 216, 126, 18, 191, 27, 64, 217, 61, 237, 173, 172, 61, 87, 177, 174, 62, 64, 192, 125, 191, 105, 78, 73, 191, 20, 212, 173, 190, 17, 211, 40, 190, 65, 253, 6, 190, 108, 99, 111, 62, 178, 40, 80, 190, 184, 30, 156, 62, 29, 90, 253, 61, 179, 106, 66, 191, 199, 25, 170, 62, 98, 30, 21, 191, 51, 1, 214, 190, 197, 252, 128, 190, 15, 17, 89, 62, 210, 195, 108, 190, 197, 171, 89, 62, 166, 85, 51, 62, 175, 98, 136, 191, 177, 134, 191, 62, 4, 113, 56, 191, 247, 82, 150, 190, 91, 138, 85, 62, 254, 182, 126, 190, 145, 117, 123, 60, 173, 126, 138, 191, 10, 139, 133, 61, 150, 45, 209, 62, 215, 165, 94, 191, 35, 192, 69, 61, 151, 146, 15, 62, 100, 159, 152, 62, 193, 171, 96, 189, 95, 217, 193, 190, 229, 127, 25, 61, 25, 57, 223, 61, 223, 24, 105, 62, 200, 69, 152, 188, 75, 87, 24, 62, 124, 118, 156, 62, 40, 167, 167, 190, 157, 111, 145, 190, 190, 153, 85, 62, 73, 88, 105, 189, 38, 232, 186, 189, 252, 104, 150, 62, 156, 138, 18, 62, 253, 27, 143, 189, 84, 4, 175, 62, 210, 202, 91, 62, 202, 239, 90, 189, 31, 33, 22, 190, 231, 120, 216, 190, 44, 251, 165, 61, 136, 157, 61, 62, 127, 225, 236, 58, 47, 196, 221, 61, 36, 129, 83, 191, 3, 149, 158, 191, 120, 115, 163, 62, 128, 103, 228, 62, 103, 101, 244, 60, 23, 188, 32, 62, 185, 159, 164, 189, 155, 92, 34, 191, 133, 49, 137, 62, 174, 241, 175, 61, 59, 159, 132, 62, 192, 175, 171, 62, 73, 153, 0, 62, 101, 35, 227, 190, 12, 197, 36, 62, 45, 109, 176, 189, 17, 146, 116, 61, 12, 66, 26, 189, 18, 92, 138, 190, 158, 253, 46, 191, 21, 26, 150, 190, 67, 11, 162, 62, 198, 33, 197, 190, 61, 162, 35, 60, 30, 239, 84, 189, 178, 243, 3, 191, 136, 131, 15, 190, 106, 68, 182, 190, 119, 207, 210, 190, 119, 16, 145, 61, 54, 141, 196, 62, 213, 230, 232, 189, 222, 133, 6, 188, 104, 122, 226, 189, 26, 233, 55, 61, 116, 85, 226, 189, 171, 164, 16, 190, 75, 193, 141, 61, 23, 107, 214, 61, 226, 194, 241, 61, 226, 132, 149, 60, 217, 217, 0, 190, 116, 80, 234, 61, 160, 52, 164, 189, 153, 62, 155, 61, 228, 14, 159, 189, 144, 224, 251, 187, 115, 159, 18, 190, 173, 203, 213, 61, 132, 182, 38, 190, 153, 202, 78, 60, 224, 50, 35, 60, 126, 180, 58, 190, 193, 69, 200, 189, 77, 58, 156, 61, 49, 106, 160, 61, 101, 28, 204, 189, 148, 8, 229, 61, 182, 186, 50, 190, 65, 214, 36, 190, 128, 203, 196, 61, 238, 73, 212, 188, 43, 188, 3, 61, 197, 106, 62, 62, 166, 130, 132, 61, 42, 157, 220, 61, 122, 228, 198, 62, 178, 205, 52, 191, 95, 32, 108, 191, 108, 78, 140, 191, 152, 22, 40, 190, 255, 69, 136, 190, 11, 172, 204, 188, 185, 41, 7, 190, 98, 148, 234, 62, 242, 251, 24, 189, 57, 139, 6, 189, 62, 44, 165, 61, 44, 81, 148, 62, 172, 224, 4, 192, 8, 169, 245, 190, 227, 40, 237, 62, 33, 112, 42, 190, 24, 177, 145, 191, 143, 169, 149, 190, 219, 118, 168, 62, 183, 190, 86, 191, 5, 82, 65, 189, 3, 166, 129, 62, 67, 78, 21, 189, 168, 12, 94, 190, 115, 112, 177, 190, 70, 78, 9, 63, 23, 203, 49, 190, 253, 18, 195, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 187, 207, 61, 225, 242, 197, 189, 101, 181, 22, 190, 136, 174, 116, 62, 158, 111, 62, 189, 139, 215, 136, 62, 77, 217, 187, 62, 164, 176, 222, 62, 0, 19, 127, 62, 73, 69, 158, 62, 84, 50, 153, 189, 183, 33, 150, 61, 218, 181, 52, 61, 125, 223, 165, 189, 43, 22, 47, 190, 219, 120, 79, 62, 50, 31, 53, 62, 8, 242, 56, 190, 99, 226, 249, 189, 29, 122, 195, 189, 17, 103, 144, 61, 203, 230, 229, 61, 35, 47, 14, 190, 82, 216, 146, 62, 242, 141, 133, 62, 208, 192, 85, 62, 22, 162, 251, 60, 110, 144, 161, 62, 236, 181, 217, 62, 89, 244, 240, 61, 113, 42, 74, 190, 60, 67, 175, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 47, 48, 62, 218, 27, 197, 190, 69, 106, 247, 189, 121, 179, 133, 63, 107, 81, 50, 189, 80, 178, 70, 191, 181, 101, 4, 63, 99, 219, 140, 61, 195, 70, 81, 61, 10, 66, 229, 61, 118, 225, 206, 61, 185, 141, 9, 190, 49, 190, 164, 61, 145, 108, 23, 63, 48, 120, 154, 190, 16, 89, 95, 191, 154, 167, 158, 190, 243, 10, 80, 63, 210, 210, 119, 62, 174, 64, 150, 61, 158, 91, 84, 190, 5, 145, 20, 63, 255, 93, 0, 190, 63, 107, 47, 191, 128, 176, 41, 191, 46, 129, 197, 190, 193, 83, 132, 62, 16, 102, 151, 191, 8, 61, 141, 62, 89, 93, 81, 191, 162, 56, 178, 189, 206, 104, 173, 63, 13, 172, 19, 63, 75, 60, 214, 189, 146, 231, 133, 61, 175, 216, 17, 62, 151, 109, 19, 190, 134, 178, 69, 61, 58, 138, 176, 61, 14, 148, 192, 190, 125, 189, 206, 190, 231, 233, 164, 190, 192, 243, 7, 187, 232, 40, 50, 62, 244, 151, 100, 190, 28, 46, 37, 63, 19, 43, 62, 62, 162, 133, 160, 62, 37, 155, 172, 190, 108, 143, 34, 61, 19, 59, 100, 62, 66, 1, 29, 188, 252, 134, 170, 190, 49, 197, 90, 62, 215, 127, 225, 60, 216, 182, 30, 190, 3, 143, 240, 61, 93, 6, 135, 190, 215, 141, 171, 60, 84, 151, 208, 189, 26, 90, 155, 190, 190, 68, 211, 187, 150, 16, 186, 60, 93, 50, 201, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 14, 101, 61, 32, 210, 214, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {242, 221, 162, 63, 10, 222, 128, 190, 22, 121, 90, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {123, 207, 32, 64, 14, 133, 88, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0056/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}