// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 134, 12, 63, 172, 150, 224, 190, 43, 225, 201, 190, 148, 134, 161, 189, 19, 14, 79, 63, 86, 8, 207, 61, 3, 122, 210, 190, 104, 125, 224, 62, 91, 74, 208, 60, 53, 30, 96, 63, 57, 80, 116, 191, 174, 178, 99, 190, 139, 60, 217, 62, 160, 28, 70, 63, 225, 109, 168, 62, 102, 68, 160, 190, 129, 84, 34, 191, 0, 37, 7, 191, 98, 31, 181, 189, 209, 202, 186, 190, 219, 2, 220, 189, 70, 50, 218, 62, 36, 87, 35, 63, 204, 18, 132, 190, 98, 197, 31, 63, 94, 11, 45, 63, 130, 184, 31, 62, 114, 224, 11, 191, 209, 33, 73, 63, 160, 173, 10, 63, 228, 180, 243, 190, 83, 61, 39, 60, 2, 129, 102, 63, 124, 59, 111, 190, 198, 49, 244, 190, 107, 29, 8, 63, 62, 220, 202, 62, 33, 198, 68, 62, 77, 135, 195, 190, 210, 26, 213, 61, 114, 200, 219, 190, 41, 115, 5, 62, 39, 4, 177, 190, 27, 254, 238, 62, 82, 253, 169, 190, 69, 38, 67, 63, 231, 116, 187, 190, 72, 55, 28, 190, 138, 108, 19, 191, 12, 138, 40, 191, 38, 60, 226, 190, 232, 88, 200, 62, 107, 230, 130, 62, 117, 123, 225, 62, 19, 152, 61, 191, 96, 158, 47, 191, 73, 59, 37, 62, 67, 194, 85, 63, 25, 102, 216, 61, 2, 54, 234, 62, 216, 180, 255, 190, 117, 184, 4, 190, 58, 173, 29, 191, 135, 75, 127, 62, 153, 191, 36, 63, 209, 118, 161, 190, 87, 16, 204, 62, 32, 197, 59, 191, 206, 158, 107, 62, 243, 249, 7, 191, 235, 220, 252, 187, 103, 164, 92, 191, 36, 57, 224, 62, 220, 187, 240, 190, 251, 103, 191, 62, 209, 9, 4, 63, 72, 49, 29, 191, 3, 220, 196, 189, 160, 10, 137, 62, 248, 252, 51, 63, 128, 169, 16, 62, 125, 199, 186, 188, 2, 202, 55, 190, 93, 92, 143, 62, 168, 17, 38, 63, 151, 101, 35, 63, 120, 172, 12, 63, 141, 76, 12, 191, 154, 34, 23, 63, 251, 128, 79, 190, 252, 206, 15, 189, 77, 199, 243, 190, 253, 152, 190, 62, 118, 159, 56, 60, 8, 84, 21, 189, 123, 209, 13, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 210, 89, 191, 110, 228, 254, 61, 213, 196, 222, 62, 100, 163, 83, 190, 105, 47, 255, 190, 91, 206, 227, 62, 203, 74, 60, 191, 182, 121, 234, 62, 150, 166, 233, 62, 101, 181, 216, 190, 115, 14, 37, 191, 28, 227, 34, 191, 160, 128, 110, 62, 194, 17, 112, 62, 101, 182, 68, 62, 159, 30, 149, 190, 96, 111, 34, 190, 1, 4, 78, 191, 20, 68, 14, 63, 37, 252, 78, 62, 18, 48, 134, 190, 2, 42, 57, 62, 255, 144, 167, 62, 213, 129, 151, 190, 45, 248, 124, 62, 133, 240, 103, 62, 16, 107, 243, 62, 233, 105, 154, 60, 162, 203, 203, 58, 122, 212, 147, 190, 229, 100, 116, 59, 170, 122, 153, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {153, 231, 16, 190, 55, 87, 169, 60, 47, 225, 252, 189, 96, 33, 200, 60, 106, 82, 242, 61, 60, 174, 42, 62, 170, 191, 20, 190, 138, 191, 149, 188, 63, 123, 30, 189, 217, 224, 47, 188, 155, 206, 218, 189, 173, 57, 69, 61, 81, 190, 2, 189, 233, 13, 145, 61, 58, 125, 209, 188, 131, 221, 50, 190, 63, 165, 154, 189, 249, 180, 22, 190, 139, 115, 221, 189, 203, 131, 58, 189, 239, 65, 234, 61, 107, 155, 4, 189, 25, 8, 191, 61, 128, 114, 245, 189, 126, 219, 36, 189, 9, 16, 245, 189, 137, 14, 6, 62, 52, 221, 200, 189, 252, 197, 9, 190, 138, 6, 225, 188, 217, 60, 199, 61, 71, 6, 7, 190, 18, 71, 172, 187, 202, 254, 155, 190, 155, 92, 51, 189, 165, 215, 199, 189, 105, 154, 144, 61, 73, 210, 186, 61, 48, 61, 199, 190, 175, 91, 66, 62, 48, 71, 89, 61, 108, 231, 106, 190, 27, 37, 110, 190, 249, 61, 145, 190, 136, 131, 171, 190, 70, 177, 130, 62, 5, 224, 190, 61, 252, 57, 28, 190, 144, 212, 70, 62, 116, 17, 79, 62, 78, 65, 57, 62, 53, 226, 62, 62, 148, 94, 71, 62, 179, 179, 135, 190, 207, 218, 136, 189, 154, 82, 7, 188, 200, 49, 130, 62, 138, 76, 94, 62, 53, 26, 209, 189, 218, 45, 16, 190, 184, 176, 78, 62, 124, 77, 16, 191, 170, 10, 212, 62, 13, 57, 242, 188, 3, 44, 92, 189, 53, 253, 196, 189, 33, 22, 29, 190, 58, 224, 37, 190, 145, 54, 50, 190, 64, 39, 165, 189, 180, 175, 43, 190, 93, 127, 168, 189, 68, 109, 14, 189, 91, 150, 1, 60, 247, 252, 79, 187, 220, 253, 64, 61, 236, 82, 128, 189, 94, 69, 15, 62, 52, 69, 16, 61, 77, 252, 6, 62, 51, 19, 40, 62, 42, 66, 23, 190, 37, 120, 10, 61, 92, 30, 139, 60, 131, 38, 211, 61, 83, 70, 76, 61, 46, 182, 164, 189, 177, 226, 160, 189, 50, 16, 21, 190, 88, 224, 174, 58, 70, 155, 25, 62, 118, 53, 3, 189, 252, 111, 156, 61, 216, 12, 111, 61, 17, 222, 5, 62, 149, 32, 32, 190, 98, 83, 61, 187, 251, 181, 29, 62, 234, 7, 8, 62, 226, 147, 26, 62, 33, 210, 195, 190, 225, 117, 112, 189, 146, 169, 47, 189, 183, 157, 69, 190, 204, 11, 160, 185, 170, 168, 223, 60, 93, 25, 13, 62, 220, 45, 84, 189, 25, 27, 150, 189, 96, 178, 62, 191, 111, 161, 25, 62, 144, 5, 43, 62, 36, 192, 216, 190, 159, 4, 167, 190, 44, 216, 78, 62, 203, 118, 62, 190, 210, 107, 218, 190, 63, 235, 135, 188, 246, 237, 129, 190, 222, 121, 72, 191, 104, 185, 33, 191, 241, 52, 17, 190, 161, 175, 50, 59, 137, 43, 224, 189, 245, 233, 157, 189, 197, 235, 244, 62, 217, 186, 43, 191, 92, 117, 1, 62, 124, 38, 196, 189, 117, 9, 54, 189, 52, 209, 52, 61, 198, 239, 130, 60, 165, 153, 11, 62, 113, 247, 14, 190, 182, 167, 248, 189, 138, 169, 172, 60, 187, 82, 254, 189, 216, 74, 164, 189, 200, 95, 49, 190, 51, 139, 201, 189, 96, 157, 145, 189, 238, 75, 134, 188, 111, 210, 8, 190, 189, 139, 167, 189, 136, 195, 78, 61, 249, 250, 23, 190, 221, 69, 23, 190, 60, 177, 32, 190, 71, 122, 242, 60, 9, 145, 6, 62, 28, 16, 37, 190, 63, 10, 244, 61, 74, 121, 162, 61, 87, 135, 180, 61, 190, 11, 140, 61, 156, 136, 175, 189, 66, 68, 23, 190, 58, 245, 219, 189, 230, 164, 49, 62, 146, 212, 135, 189, 33, 208, 131, 190, 251, 124, 6, 62, 153, 68, 68, 62, 71, 3, 231, 190, 127, 184, 210, 61, 154, 159, 240, 61, 87, 142, 137, 61, 151, 186, 156, 62, 62, 211, 226, 189, 119, 207, 107, 191, 159, 82, 27, 191, 248, 201, 39, 191, 146, 167, 2, 190, 79, 132, 132, 62, 208, 253, 176, 62, 132, 162, 247, 190, 111, 166, 70, 60, 155, 149, 73, 188, 204, 149, 162, 62, 145, 58, 19, 190, 166, 100, 88, 62, 120, 139, 132, 190, 238, 7, 158, 59, 122, 62, 152, 189, 213, 21, 223, 189, 209, 99, 45, 190, 53, 76, 169, 189, 67, 226, 33, 62, 116, 20, 182, 189, 145, 171, 156, 190, 25, 81, 0, 63, 99, 32, 220, 190, 130, 35, 46, 61, 4, 42, 178, 189, 249, 173, 75, 62, 207, 143, 167, 62, 20, 196, 10, 191, 178, 200, 153, 189, 62, 63, 151, 189, 69, 52, 120, 190, 152, 16, 223, 60, 122, 174, 125, 62, 140, 16, 178, 61, 225, 0, 253, 187, 157, 154, 141, 61, 232, 194, 37, 190, 70, 198, 64, 188, 15, 149, 131, 61, 167, 207, 52, 189, 167, 149, 201, 190, 226, 158, 158, 62, 56, 144, 218, 189, 71, 113, 156, 189, 141, 164, 234, 188, 105, 6, 4, 62, 176, 150, 1, 190, 107, 194, 26, 189, 157, 229, 118, 62, 172, 130, 253, 61, 254, 159, 229, 189, 53, 103, 134, 189, 220, 138, 88, 61, 119, 116, 206, 190, 197, 165, 176, 62, 154, 160, 20, 190, 169, 26, 37, 62, 124, 84, 104, 62, 127, 179, 67, 62, 205, 76, 201, 190, 76, 95, 71, 189, 139, 214, 179, 189, 28, 99, 134, 61, 181, 76, 237, 188, 217, 200, 11, 190, 158, 134, 32, 61, 149, 140, 132, 62, 123, 73, 52, 61, 202, 25, 45, 189, 28, 78, 128, 189, 191, 83, 49, 61, 95, 37, 67, 189, 109, 97, 26, 187, 177, 159, 79, 61, 200, 205, 29, 62, 29, 220, 3, 189, 250, 0, 1, 62, 159, 10, 155, 62, 115, 45, 207, 61, 191, 144, 195, 61, 103, 218, 134, 61, 189, 107, 54, 188, 163, 211, 186, 187, 40, 147, 205, 189, 102, 88, 177, 188, 246, 38, 60, 190, 104, 142, 153, 60, 153, 93, 211, 190, 48, 156, 249, 188, 107, 230, 161, 61, 138, 150, 110, 62, 192, 187, 245, 190, 72, 168, 210, 190, 113, 19, 130, 190, 224, 226, 166, 62, 44, 128, 69, 62, 252, 206, 18, 61, 12, 243, 118, 186, 65, 244, 42, 62, 214, 46, 105, 62, 202, 206, 191, 60, 9, 95, 51, 190, 125, 35, 150, 59, 178, 120, 152, 190, 119, 50, 241, 189, 202, 141, 64, 62, 148, 252, 218, 61, 81, 249, 146, 190, 134, 38, 76, 62, 32, 57, 235, 60, 188, 152, 14, 191, 228, 243, 1, 190, 138, 11, 203, 188, 164, 118, 72, 62, 153, 192, 221, 61, 72, 125, 228, 189, 78, 169, 101, 60, 244, 123, 124, 190, 237, 175, 23, 59, 0, 207, 86, 189, 219, 249, 25, 190, 224, 54, 144, 61, 70, 208, 196, 62, 165, 194, 117, 190, 26, 107, 60, 62, 57, 127, 109, 189, 25, 213, 140, 187, 237, 162, 96, 62, 68, 191, 141, 190, 224, 149, 175, 60, 222, 227, 137, 61, 167, 225, 192, 61, 124, 255, 250, 61, 107, 171, 46, 62, 239, 115, 108, 61, 201, 240, 193, 61, 15, 236, 7, 190, 25, 199, 178, 189, 73, 136, 70, 62, 81, 145, 13, 187, 65, 41, 65, 62, 38, 152, 211, 60, 21, 130, 48, 190, 95, 134, 60, 61, 235, 137, 167, 61, 202, 240, 153, 188, 86, 177, 8, 190, 24, 15, 244, 189, 238, 217, 16, 62, 113, 184, 184, 190, 125, 86, 86, 60, 4, 136, 226, 189, 137, 107, 160, 189, 189, 168, 0, 190, 37, 207, 31, 62, 57, 34, 148, 189, 236, 205, 26, 61, 45, 4, 185, 61, 3, 14, 38, 190, 48, 4, 11, 62, 210, 11, 181, 60, 103, 200, 2, 62, 39, 207, 65, 189, 166, 119, 233, 189, 162, 223, 120, 189, 17, 237, 39, 190, 130, 170, 243, 189, 23, 0, 44, 61, 25, 143, 53, 61, 5, 130, 13, 190, 236, 114, 136, 189, 123, 43, 109, 61, 73, 226, 35, 190, 116, 48, 24, 189, 254, 0, 137, 61, 33, 220, 139, 188, 194, 137, 237, 189, 120, 244, 213, 61, 146, 195, 247, 189, 92, 60, 228, 189, 80, 245, 55, 57, 70, 202, 174, 61, 80, 65, 241, 188, 48, 231, 145, 189, 100, 129, 0, 62, 120, 209, 3, 190, 104, 155, 26, 190, 192, 100, 1, 190, 247, 141, 67, 61, 57, 73, 28, 190, 49, 159, 217, 189, 136, 191, 255, 189, 119, 96, 236, 189, 183, 30, 227, 61, 123, 8, 130, 189, 245, 137, 201, 189, 171, 11, 116, 188, 229, 64, 249, 188, 43, 147, 14, 190, 109, 247, 155, 61, 145, 42, 169, 61, 186, 230, 8, 190, 88, 27, 16, 190, 122, 85, 14, 61, 145, 100, 17, 189, 32, 6, 17, 190, 80, 192, 44, 190, 199, 119, 240, 61, 35, 212, 255, 189, 172, 17, 141, 189, 65, 22, 31, 190, 34, 187, 236, 189, 136, 161, 6, 61, 67, 185, 52, 190, 206, 35, 163, 61, 51, 229, 20, 62, 119, 227, 153, 61, 218, 153, 104, 62, 34, 217, 7, 62, 160, 202, 177, 189, 159, 107, 1, 62, 158, 75, 177, 61, 114, 65, 185, 189, 248, 120, 38, 62, 194, 194, 132, 62, 150, 60, 186, 61, 152, 140, 241, 188, 186, 101, 36, 189, 49, 92, 181, 190, 144, 19, 164, 189, 117, 184, 246, 61, 199, 238, 72, 62, 124, 142, 36, 62, 30, 110, 65, 189, 133, 201, 11, 190, 77, 74, 133, 61, 70, 63, 72, 62, 42, 36, 96, 62, 246, 150, 115, 61, 65, 208, 112, 190, 12, 144, 2, 62, 186, 104, 73, 62, 81, 55, 45, 190, 174, 170, 126, 189, 233, 127, 30, 62, 205, 14, 183, 190, 193, 1, 59, 62, 9, 222, 184, 62, 203, 154, 35, 189, 152, 239, 115, 190, 187, 90, 93, 62, 208, 101, 168, 61, 162, 101, 117, 189, 198, 185, 16, 62, 100, 249, 54, 189, 144, 91, 55, 60, 101, 237, 33, 190, 3, 52, 87, 190, 37, 55, 218, 189, 186, 88, 154, 62, 220, 12, 15, 62, 163, 31, 150, 190, 86, 255, 211, 62, 3, 162, 92, 189, 245, 147, 222, 189, 166, 28, 249, 190, 101, 128, 127, 190, 7, 64, 138, 190, 6, 110, 57, 189, 77, 175, 106, 189, 143, 175, 134, 61, 169, 101, 135, 60, 133, 125, 249, 61, 111, 234, 245, 189, 239, 193, 4, 62, 154, 28, 214, 190, 42, 64, 179, 59, 37, 135, 87, 62, 29, 241, 199, 60, 31, 128, 177, 61, 245, 206, 209, 59, 14, 210, 230, 190, 24, 167, 26, 191, 26, 28, 168, 62, 137, 155, 139, 189, 39, 151, 187, 60, 167, 247, 107, 62, 232, 0, 67, 61, 217, 169, 229, 188, 213, 250, 212, 189, 208, 32, 143, 60, 160, 4, 65, 62, 50, 255, 237, 188, 182, 175, 183, 61, 32, 152, 95, 190, 214, 157, 201, 188, 146, 83, 88, 62, 206, 49, 232, 190, 76, 165, 88, 62, 42, 39, 226, 189, 157, 175, 200, 61, 115, 17, 104, 60, 64, 183, 181, 59, 230, 213, 118, 61, 169, 101, 173, 190, 127, 238, 141, 186, 61, 114, 225, 61, 165, 79, 72, 62, 203, 193, 66, 190, 209, 90, 83, 62, 23, 69, 132, 189, 201, 20, 178, 189, 126, 171, 253, 189, 196, 239, 59, 62, 41, 157, 234, 190, 146, 16, 82, 61, 114, 156, 66, 62, 226, 181, 207, 189, 26, 243, 224, 61, 181, 59, 139, 190, 112, 117, 63, 191, 132, 72, 181, 190, 143, 242, 234, 190, 173, 18, 153, 190, 13, 71, 90, 62, 239, 138, 60, 62, 238, 185, 0, 191, 241, 191, 84, 62, 169, 159, 173, 189, 132, 201, 123, 62, 215, 3, 240, 190, 150, 203, 65, 61, 38, 161, 92, 190, 150, 146, 229, 61, 187, 74, 24, 62, 157, 129, 67, 190, 199, 98, 156, 61, 104, 57, 171, 190, 61, 81, 149, 62, 140, 28, 19, 190, 245, 44, 6, 190, 223, 180, 186, 62, 50, 146, 158, 190, 73, 1, 142, 190, 46, 129, 184, 190, 104, 198, 236, 61, 158, 111, 107, 190, 17, 195, 95, 189, 122, 101, 204, 189, 37, 250, 95, 62, 115, 107, 68, 62, 242, 45, 157, 62, 186, 215, 210, 190, 253, 221, 49, 190, 62, 200, 174, 190, 70, 49, 156, 190, 2, 11, 151, 62, 208, 237, 223, 61, 110, 60, 33, 189, 174, 79, 23, 61, 148, 184, 191, 189, 140, 15, 130, 60, 123, 36, 15, 62, 59, 148, 116, 61, 174, 247, 182, 60, 173, 180, 7, 60, 64, 61, 13, 62, 25, 121, 169, 62, 215, 84, 109, 62, 2, 233, 230, 61, 132, 80, 219, 61, 114, 189, 130, 61, 114, 39, 139, 190, 76, 241, 146, 62, 5, 46, 166, 190, 3, 142, 224, 62, 133, 62, 239, 190, 232, 13, 151, 190, 181, 11, 6, 63, 42, 69, 147, 190, 114, 182, 25, 190, 203, 204, 74, 62, 37, 213, 168, 190, 40, 175, 42, 190, 224, 83, 164, 190, 23, 214, 154, 189, 90, 199, 178, 190, 52, 86, 249, 189, 162, 206, 188, 62, 230, 241, 15, 190, 109, 39, 53, 62, 149, 15, 249, 60, 187, 227, 48, 190, 117, 235, 135, 189, 69, 129, 72, 62, 92, 118, 151, 61, 95, 151, 128, 188, 130, 9, 99, 62, 84, 128, 12, 62, 188, 58, 180, 62, 91, 201, 90, 60, 242, 175, 43, 62, 31, 22, 39, 61, 44, 205, 14, 190, 98, 46, 73, 61, 107, 172, 115, 60, 250, 4, 69, 190, 94, 96, 174, 61, 77, 254, 43, 190, 90, 49, 79, 61, 218, 192, 195, 189, 82, 110, 146, 61, 51, 142, 38, 189, 239, 106, 201, 186, 66, 122, 133, 188, 98, 255, 137, 61, 81, 7, 147, 188, 30, 139, 13, 62, 145, 245, 75, 190, 205, 198, 189, 189, 35, 14, 205, 188, 2, 105, 125, 189, 41, 87, 200, 60, 80, 177, 32, 190, 153, 221, 232, 60, 52, 196, 107, 189, 189, 61, 205, 61, 98, 63, 223, 61, 3, 58, 37, 190, 51, 162, 64, 190, 105, 119, 224, 189, 223, 109, 187, 189, 123, 166, 116, 189, 216, 89, 28, 190, 165, 31, 212, 189, 178, 93, 155, 189, 238, 72, 141, 61, 186, 238, 203, 61, 192, 93, 221, 61, 234, 188, 12, 62, 232, 191, 65, 190, 6, 131, 151, 61, 41, 57, 38, 190, 24, 172, 239, 61, 156, 236, 3, 190, 230, 188, 117, 61, 174, 15, 139, 61, 185, 22, 11, 190, 217, 170, 167, 60, 161, 102, 236, 61, 214, 100, 10, 190, 227, 102, 148, 189, 134, 109, 247, 61, 18, 213, 239, 189, 117, 64, 120, 61, 244, 151, 105, 61, 206, 47, 31, 188, 164, 210, 61, 188, 129, 251, 117, 188, 225, 79, 157, 189, 69, 96, 40, 190, 78, 90, 10, 62, 153, 147, 9, 62, 26, 111, 5, 190, 250, 62, 18, 190, 100, 206, 191, 189, 145, 35, 172, 188, 14, 145, 22, 61, 89, 245, 140, 61, 4, 25, 150, 189, 125, 211, 18, 190, 127, 152, 189, 190, 47, 146, 24, 61, 122, 224, 189, 188, 140, 160, 66, 190, 91, 166, 245, 61, 167, 107, 25, 60, 132, 32, 211, 61, 168, 186, 177, 62, 170, 251, 189, 62, 131, 60, 88, 189, 49, 105, 250, 188, 193, 104, 14, 190, 218, 80, 134, 189, 70, 120, 228, 61, 211, 238, 233, 61, 16, 74, 111, 189, 133, 217, 144, 61, 28, 135, 170, 189, 245, 255, 244, 189, 4, 179, 202, 62, 31, 65, 88, 61, 202, 105, 125, 61, 233, 186, 151, 189, 233, 250, 207, 61, 97, 40, 193, 61, 192, 56, 240, 58, 110, 194, 169, 62, 154, 183, 94, 188, 40, 160, 198, 62, 212, 234, 216, 190, 16, 170, 81, 62, 204, 219, 12, 190, 43, 123, 226, 190, 151, 26, 144, 189, 5, 185, 155, 61, 190, 149, 125, 61, 127, 80, 145, 189, 20, 49, 203, 61, 137, 116, 214, 190, 140, 76, 6, 189, 96, 168, 63, 190, 128, 22, 230, 61, 198, 236, 7, 190, 195, 49, 49, 190, 170, 194, 145, 190, 112, 159, 71, 62, 111, 29, 195, 61, 69, 180, 149, 61, 246, 94, 1, 62, 193, 80, 53, 190, 162, 24, 168, 62, 73, 87, 70, 189, 195, 46, 4, 190, 185, 22, 237, 189, 52, 201, 130, 61, 5, 48, 32, 59, 235, 222, 114, 187, 45, 7, 193, 61, 159, 189, 224, 61, 177, 33, 249, 61, 156, 115, 28, 61, 238, 37, 59, 62, 120, 232, 93, 62, 177, 130, 227, 189, 181, 95, 224, 189, 114, 20, 226, 188, 177, 225, 233, 60, 171, 42, 244, 60, 215, 72, 226, 187, 183, 224, 213, 189, 245, 112, 237, 189, 229, 94, 14, 190, 187, 154, 136, 189, 150, 198, 165, 189, 137, 210, 231, 60, 106, 151, 32, 189, 118, 27, 174, 189, 35, 214, 167, 60, 239, 220, 16, 62, 156, 159, 40, 188, 70, 167, 151, 189, 59, 33, 45, 189, 129, 180, 12, 190, 13, 186, 169, 189, 68, 39, 227, 61, 38, 134, 18, 190, 229, 115, 177, 189, 35, 252, 123, 61, 56, 96, 23, 62, 241, 115, 149, 61, 168, 168, 220, 189, 24, 29, 25, 188, 50, 138, 32, 188, 213, 88, 216, 189, 234, 164, 162, 61, 88, 158, 184, 61, 156, 164, 101, 190, 190, 222, 244, 61, 41, 202, 53, 188, 70, 58, 119, 190, 211, 78, 138, 62, 38, 219, 169, 61, 164, 100, 209, 189, 132, 235, 206, 62, 116, 102, 23, 62, 171, 7, 22, 191, 40, 116, 7, 191, 243, 229, 50, 191, 75, 71, 130, 190, 153, 8, 217, 189, 30, 130, 36, 62, 244, 67, 163, 190, 48, 152, 229, 188, 39, 88, 74, 190, 171, 48, 248, 61, 23, 47, 7, 62, 158, 214, 32, 61, 187, 116, 79, 189, 178, 85, 66, 190, 182, 88, 229, 188, 198, 141, 157, 61, 49, 56, 87, 189, 171, 125, 73, 189, 226, 88, 45, 190, 213, 119, 128, 61, 238, 70, 10, 190, 8, 72, 153, 61, 123, 47, 234, 190, 250, 124, 162, 190, 115, 87, 135, 61, 164, 218, 144, 62, 0, 220, 212, 190, 172, 182, 253, 62, 23, 144, 42, 62, 142, 81, 33, 190, 141, 174, 203, 62, 248, 176, 16, 61, 80, 36, 129, 190, 232, 128, 178, 190, 223, 13, 62, 191, 206, 60, 168, 188, 62, 89, 175, 61, 69, 67, 163, 61, 75, 131, 194, 190, 196, 43, 39, 190, 134, 169, 74, 62, 150, 152, 115, 189, 199, 13, 132, 188, 253, 215, 184, 188, 187, 226, 157, 189, 53, 84, 173, 190, 113, 34, 37, 61, 159, 93, 69, 189, 255, 244, 76, 190, 34, 247, 172, 189, 94, 205, 58, 61, 73, 178, 8, 62, 249, 148, 167, 190, 252, 156, 181, 62, 88, 141, 137, 188, 209, 72, 161, 190, 39, 216, 239, 61, 102, 117, 29, 60, 217, 74, 73, 189, 186, 69, 134, 62, 217, 160, 175, 60, 179, 250, 119, 189, 91, 215, 170, 62, 51, 12, 8, 62, 75, 65, 19, 191, 219, 248, 15, 191, 43, 134, 19, 191, 151, 73, 91, 60, 42, 101, 7, 190, 153, 73, 252, 61, 112, 230, 160, 190, 94, 86, 58, 190, 180, 53, 189, 61, 98, 187, 74, 62, 153, 38, 61, 190, 243, 214, 146, 61, 17, 254, 176, 188, 131, 203, 201, 189, 182, 70, 182, 187, 59, 140, 185, 60, 165, 15, 169, 60, 127, 146, 24, 60, 174, 178, 201, 60, 124, 174, 244, 61, 133, 229, 39, 190, 69, 8, 185, 62, 45, 234, 229, 190, 32, 2, 119, 62, 212, 209, 63, 62, 205, 132, 65, 62, 182, 199, 140, 62, 82, 145, 1, 62, 22, 182, 54, 62, 64, 54, 170, 61, 196, 185, 155, 62, 145, 41, 14, 62, 128, 228, 159, 62, 223, 253, 184, 188, 239, 21, 32, 62, 94, 73, 154, 62, 177, 238, 178, 190, 42, 162, 253, 189, 225, 86, 163, 61, 83, 228, 27, 190, 70, 145, 223, 189, 253, 181, 131, 189, 220, 236, 212, 190, 232, 11, 146, 61, 213, 191, 25, 62, 41, 21, 99, 189, 215, 19, 218, 61, 106, 9, 198, 190, 232, 121, 40, 189, 26, 112, 149, 61, 128, 48, 21, 191, 207, 53, 71, 190, 95, 59, 175, 60, 198, 174, 176, 190, 140, 82, 243, 62, 24, 222, 165, 189, 201, 149, 221, 189, 243, 185, 17, 190, 82, 155, 5, 190, 48, 58, 69, 190, 216, 6, 219, 60, 60, 187, 146, 61, 20, 35, 54, 189, 34, 68, 115, 190, 55, 122, 135, 190, 203, 91, 187, 190, 78, 5, 205, 190, 202, 169, 206, 190, 125, 21, 207, 61, 153, 43, 147, 188, 130, 11, 70, 189, 177, 98, 190, 60, 19, 104, 202, 189, 116, 72, 137, 62, 228, 134, 114, 190, 205, 201, 150, 190, 158, 83, 97, 190, 136, 42, 125, 189, 14, 236, 165, 189, 129, 99, 20, 61, 183, 61, 184, 189, 88, 184, 77, 190, 222, 12, 166, 62, 118, 72, 4, 190, 132, 249, 242, 190, 127, 173, 146, 62, 69, 131, 16, 190, 60, 99, 31, 188, 38, 95, 177, 190, 3, 191, 191, 61, 23, 162, 194, 62, 15, 124, 182, 190, 182, 183, 132, 61, 115, 59, 126, 61, 235, 163, 80, 62, 127, 247, 94, 189, 250, 102, 20, 190, 237, 132, 229, 61, 126, 227, 38, 62, 66, 128, 79, 62, 135, 251, 214, 189, 128, 92, 14, 62, 8, 161, 60, 62, 64, 32, 254, 189, 20, 4, 126, 188, 234, 255, 229, 60, 17, 12, 74, 189, 80, 170, 54, 189, 113, 119, 130, 62, 54, 71, 166, 61, 55, 76, 113, 188, 59, 104, 165, 62, 251, 169, 35, 62, 178, 234, 142, 189, 16, 72, 16, 190, 157, 52, 144, 190, 231, 3, 59, 62, 192, 62, 246, 61, 48, 197, 54, 61, 242, 159, 54, 62, 191, 175, 198, 190, 222, 108, 249, 190, 180, 50, 66, 62, 186, 63, 3, 62, 184, 30, 95, 189, 36, 245, 139, 61, 87, 3, 218, 190, 158, 199, 7, 191, 122, 16, 150, 62, 85, 70, 148, 61, 82, 233, 65, 62, 205, 79, 20, 61, 61, 253, 181, 61, 235, 127, 178, 190, 199, 253, 51, 190, 64, 32, 218, 189, 231, 251, 53, 190, 251, 191, 207, 188, 167, 188, 121, 190, 101, 54, 176, 190, 63, 129, 191, 190, 150, 151, 114, 62, 57, 102, 192, 189, 86, 133, 63, 189, 222, 206, 255, 189, 4, 156, 137, 190, 207, 243, 5, 190, 131, 173, 198, 190, 101, 15, 217, 190, 20, 254, 160, 61, 189, 253, 196, 62, 213, 230, 232, 189, 222, 133, 6, 188, 104, 122, 226, 189, 26, 233, 55, 61, 116, 85, 226, 189, 171, 164, 16, 190, 75, 193, 141, 61, 23, 107, 214, 61, 226, 194, 241, 61, 226, 132, 149, 60, 217, 217, 0, 190, 116, 80, 234, 61, 160, 52, 164, 189, 153, 62, 155, 61, 228, 14, 159, 189, 144, 224, 251, 187, 115, 159, 18, 190, 173, 203, 213, 61, 132, 182, 38, 190, 153, 202, 78, 60, 224, 50, 35, 60, 126, 180, 58, 190, 193, 69, 200, 189, 77, 58, 156, 61, 49, 106, 160, 61, 101, 28, 204, 189, 148, 8, 229, 61, 182, 186, 50, 190, 65, 214, 36, 190, 128, 203, 196, 61, 238, 73, 212, 188, 43, 188, 3, 61, 133, 111, 150, 190, 80, 113, 138, 62, 215, 25, 36, 62, 17, 164, 188, 62, 135, 212, 202, 190, 142, 156, 244, 190, 74, 180, 43, 190, 67, 165, 7, 190, 8, 155, 83, 190, 61, 44, 204, 59, 243, 21, 149, 189, 145, 10, 7, 63, 51, 73, 255, 60, 229, 242, 157, 189, 87, 253, 196, 189, 52, 84, 159, 62, 101, 22, 80, 191, 73, 125, 129, 190, 18, 17, 254, 62, 27, 194, 24, 190, 138, 120, 140, 191, 104, 197, 97, 190, 142, 254, 184, 62, 82, 168, 131, 191, 107, 32, 60, 189, 191, 202, 120, 62, 43, 211, 52, 61, 223, 92, 77, 190, 151, 41, 107, 190, 92, 240, 180, 62, 83, 59, 57, 190, 46, 119, 33, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 165, 149, 189, 182, 61, 138, 188, 208, 240, 22, 190, 118, 75, 58, 62, 158, 111, 62, 189, 194, 176, 157, 62, 25, 4, 152, 62, 25, 138, 184, 62, 21, 33, 133, 62, 44, 212, 71, 62, 84, 50, 153, 189, 183, 33, 150, 61, 130, 238, 86, 61, 97, 224, 103, 188, 168, 62, 88, 190, 208, 91, 100, 62, 187, 179, 48, 62, 27, 252, 165, 189, 23, 130, 2, 190, 126, 210, 183, 189, 180, 59, 18, 62, 151, 45, 19, 61, 233, 244, 117, 189, 3, 14, 140, 62, 127, 19, 72, 62, 238, 70, 73, 62, 156, 165, 151, 60, 49, 204, 47, 62, 75, 89, 170, 62, 213, 74, 2, 62, 113, 42, 74, 190, 235, 101, 178, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 246, 225, 61, 185, 200, 202, 190, 254, 146, 247, 189, 130, 205, 16, 63, 107, 81, 50, 189, 100, 66, 73, 191, 67, 72, 198, 62, 38, 20, 155, 61, 218, 190, 158, 61, 154, 81, 160, 61, 118, 225, 206, 61, 185, 141, 9, 190, 93, 229, 18, 62, 214, 29, 217, 189, 248, 255, 80, 190, 65, 9, 1, 191, 68, 34, 175, 190, 242, 144, 1, 63, 176, 119, 247, 61, 47, 34, 151, 61, 198, 128, 128, 190, 221, 229, 22, 62, 59, 29, 27, 190, 60, 132, 36, 191, 158, 210, 216, 190, 121, 48, 210, 190, 121, 206, 150, 62, 133, 134, 5, 191, 64, 139, 3, 62, 184, 47, 13, 191, 162, 56, 178, 189, 166, 245, 129, 63, 118, 108, 233, 61, 137, 20, 168, 188, 65, 202, 133, 61, 91, 157, 163, 62, 151, 109, 19, 190, 228, 134, 18, 187, 116, 18, 253, 189, 65, 168, 151, 190, 87, 196, 186, 190, 214, 250, 70, 190, 192, 243, 7, 187, 232, 40, 50, 62, 5, 241, 7, 190, 131, 173, 226, 62, 224, 220, 204, 62, 247, 33, 228, 60, 72, 42, 149, 190, 14, 248, 14, 62, 21, 24, 227, 61, 142, 63, 35, 188, 93, 54, 54, 190, 104, 154, 130, 62, 60, 13, 31, 61, 54, 140, 246, 61, 74, 252, 22, 62, 204, 198, 3, 62, 174, 13, 34, 62, 138, 108, 183, 61, 168, 131, 72, 190, 33, 153, 147, 62, 150, 16, 186, 60, 156, 116, 212, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 74, 148, 187, 153, 75, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {207, 51, 92, 189, 247, 156, 17, 63, 121, 21, 61, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {38, 116, 252, 190, 84, 225, 139, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0056/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}