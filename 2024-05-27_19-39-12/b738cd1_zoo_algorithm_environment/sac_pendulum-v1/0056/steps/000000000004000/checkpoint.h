// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 168, 106, 62, 168, 99, 48, 191, 183, 141, 210, 190, 201, 74, 223, 189, 67, 213, 30, 63, 250, 26, 19, 189, 112, 177, 152, 190, 3, 150, 251, 62, 75, 168, 63, 189, 74, 181, 57, 63, 132, 70, 131, 191, 200, 190, 114, 190, 56, 91, 204, 62, 231, 3, 29, 63, 239, 241, 153, 62, 138, 204, 179, 190, 64, 167, 33, 190, 26, 6, 10, 191, 64, 204, 67, 190, 144, 205, 249, 190, 170, 149, 129, 190, 159, 184, 206, 62, 57, 84, 64, 63, 26, 86, 133, 190, 133, 234, 25, 63, 93, 70, 56, 63, 38, 131, 209, 61, 53, 190, 20, 191, 220, 193, 9, 62, 184, 139, 25, 63, 226, 96, 41, 191, 255, 150, 24, 191, 131, 43, 110, 63, 127, 9, 224, 190, 93, 117, 79, 191, 140, 115, 13, 63, 155, 206, 187, 62, 34, 152, 143, 62, 71, 4, 213, 190, 121, 112, 10, 62, 77, 6, 143, 190, 196, 94, 21, 62, 137, 29, 153, 190, 247, 4, 31, 63, 100, 61, 174, 190, 64, 223, 13, 63, 236, 52, 248, 190, 35, 30, 81, 190, 110, 31, 235, 190, 235, 107, 174, 190, 233, 125, 221, 190, 191, 89, 232, 61, 20, 203, 64, 62, 127, 39, 244, 62, 128, 169, 46, 191, 196, 250, 41, 191, 210, 199, 74, 62, 137, 18, 63, 63, 124, 103, 70, 61, 36, 59, 254, 62, 230, 167, 235, 190, 96, 45, 191, 62, 34, 91, 23, 191, 29, 158, 106, 62, 129, 41, 47, 63, 132, 251, 181, 190, 56, 169, 170, 62, 134, 227, 83, 191, 9, 146, 116, 62, 122, 160, 4, 191, 115, 236, 186, 62, 130, 42, 90, 191, 124, 91, 226, 62, 123, 127, 227, 190, 105, 174, 201, 62, 234, 246, 193, 62, 170, 216, 32, 191, 157, 243, 54, 190, 155, 65, 172, 62, 182, 240, 10, 63, 6, 214, 108, 62, 196, 110, 188, 60, 15, 213, 103, 190, 49, 239, 155, 62, 84, 10, 29, 63, 65, 195, 5, 63, 89, 97, 23, 63, 16, 204, 226, 190, 45, 5, 247, 62, 213, 64, 87, 190, 183, 0, 230, 188, 203, 94, 235, 190, 97, 217, 192, 62, 69, 19, 181, 189, 206, 194, 196, 190, 40, 28, 7, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 250, 55, 191, 25, 73, 69, 61, 32, 129, 164, 62, 181, 242, 211, 189, 169, 218, 185, 190, 220, 125, 133, 62, 26, 195, 4, 191, 164, 174, 249, 62, 168, 26, 246, 62, 59, 34, 174, 190, 254, 244, 216, 190, 198, 186, 199, 190, 239, 92, 76, 62, 165, 211, 96, 62, 249, 49, 21, 62, 245, 185, 40, 190, 150, 40, 153, 190, 245, 15, 60, 191, 94, 37, 4, 63, 199, 0, 83, 62, 190, 217, 160, 190, 49, 232, 72, 62, 120, 96, 199, 62, 13, 246, 160, 190, 102, 80, 86, 62, 159, 135, 136, 62, 57, 74, 217, 62, 178, 111, 221, 188, 86, 93, 184, 60, 217, 94, 186, 190, 169, 106, 238, 189, 13, 158, 32, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {153, 231, 16, 190, 55, 87, 169, 60, 47, 225, 252, 189, 96, 33, 200, 60, 106, 82, 242, 61, 60, 174, 42, 62, 170, 191, 20, 190, 138, 191, 149, 188, 63, 123, 30, 189, 217, 224, 47, 188, 155, 206, 218, 189, 173, 57, 69, 61, 81, 190, 2, 189, 233, 13, 145, 61, 58, 125, 209, 188, 131, 221, 50, 190, 63, 165, 154, 189, 249, 180, 22, 190, 139, 115, 221, 189, 203, 131, 58, 189, 239, 65, 234, 61, 107, 155, 4, 189, 25, 8, 191, 61, 128, 114, 245, 189, 126, 219, 36, 189, 9, 16, 245, 189, 137, 14, 6, 62, 52, 221, 200, 189, 252, 197, 9, 190, 138, 6, 225, 188, 217, 60, 199, 61, 71, 6, 7, 190, 3, 98, 12, 190, 203, 136, 215, 189, 144, 146, 170, 61, 218, 61, 228, 189, 157, 179, 56, 189, 174, 235, 240, 60, 124, 5, 3, 191, 41, 5, 108, 62, 43, 42, 158, 60, 148, 254, 45, 190, 66, 68, 120, 190, 59, 69, 158, 190, 9, 160, 190, 190, 43, 9, 100, 62, 138, 73, 26, 62, 28, 86, 209, 187, 70, 9, 191, 61, 28, 64, 33, 62, 110, 151, 67, 62, 45, 215, 20, 62, 136, 25, 40, 62, 71, 60, 121, 190, 195, 112, 255, 189, 255, 63, 57, 189, 90, 106, 95, 62, 22, 219, 31, 62, 211, 49, 232, 189, 82, 136, 31, 190, 197, 187, 46, 62, 186, 224, 211, 190, 215, 101, 204, 62, 32, 242, 69, 189, 3, 44, 92, 189, 53, 253, 196, 189, 33, 22, 29, 190, 58, 224, 37, 190, 145, 54, 50, 190, 64, 39, 165, 189, 180, 175, 43, 190, 93, 127, 168, 189, 68, 109, 14, 189, 91, 150, 1, 60, 247, 252, 79, 187, 220, 253, 64, 61, 236, 82, 128, 189, 94, 69, 15, 62, 52, 69, 16, 61, 77, 252, 6, 62, 51, 19, 40, 62, 42, 66, 23, 190, 37, 120, 10, 61, 92, 30, 139, 60, 131, 38, 211, 61, 83, 70, 76, 61, 46, 182, 164, 189, 177, 226, 160, 189, 50, 16, 21, 190, 88, 224, 174, 58, 70, 155, 25, 62, 118, 53, 3, 189, 252, 111, 156, 61, 216, 12, 111, 61, 17, 222, 5, 62, 149, 32, 32, 190, 98, 83, 61, 187, 175, 112, 78, 61, 166, 201, 172, 61, 47, 69, 27, 62, 239, 213, 134, 190, 133, 98, 188, 187, 191, 251, 44, 189, 2, 8, 149, 190, 237, 27, 114, 61, 193, 52, 161, 60, 237, 125, 62, 62, 61, 155, 179, 188, 142, 186, 58, 189, 254, 35, 20, 191, 247, 233, 210, 60, 176, 19, 43, 62, 147, 68, 250, 189, 141, 189, 152, 190, 151, 100, 125, 62, 131, 24, 184, 189, 36, 127, 200, 190, 151, 68, 53, 190, 248, 87, 41, 190, 97, 202, 72, 191, 214, 243, 23, 191, 120, 219, 237, 189, 168, 153, 183, 188, 82, 228, 106, 189, 42, 34, 54, 61, 76, 102, 153, 61, 42, 81, 25, 191, 254, 154, 70, 62, 124, 38, 196, 189, 117, 9, 54, 189, 52, 209, 52, 61, 198, 239, 130, 60, 165, 153, 11, 62, 113, 247, 14, 190, 182, 167, 248, 189, 138, 169, 172, 60, 187, 82, 254, 189, 216, 74, 164, 189, 200, 95, 49, 190, 51, 139, 201, 189, 96, 157, 145, 189, 238, 75, 134, 188, 111, 210, 8, 190, 189, 139, 167, 189, 136, 195, 78, 61, 249, 250, 23, 190, 221, 69, 23, 190, 60, 177, 32, 190, 71, 122, 242, 60, 9, 145, 6, 62, 28, 16, 37, 190, 63, 10, 244, 61, 74, 121, 162, 61, 87, 135, 180, 61, 190, 11, 140, 61, 156, 136, 175, 189, 66, 68, 23, 190, 58, 245, 219, 189, 230, 164, 49, 62, 146, 212, 135, 189, 65, 77, 99, 190, 223, 3, 28, 62, 117, 6, 56, 62, 16, 83, 141, 190, 234, 241, 4, 186, 29, 30, 164, 61, 238, 53, 18, 61, 195, 224, 153, 62, 125, 78, 30, 190, 245, 55, 33, 191, 20, 164, 76, 191, 114, 112, 136, 191, 233, 143, 28, 190, 41, 179, 31, 61, 116, 235, 175, 62, 89, 74, 39, 190, 196, 119, 24, 189, 155, 149, 73, 188, 159, 45, 110, 62, 84, 78, 137, 189, 253, 218, 74, 62, 143, 212, 140, 190, 164, 8, 21, 190, 247, 30, 184, 189, 134, 69, 204, 189, 205, 108, 18, 190, 34, 100, 30, 190, 202, 181, 88, 189, 138, 176, 62, 190, 253, 14, 155, 190, 114, 132, 149, 61, 29, 222, 22, 191, 73, 236, 168, 61, 169, 101, 250, 189, 135, 160, 4, 62, 126, 79, 147, 62, 100, 9, 177, 190, 224, 255, 204, 188, 108, 125, 161, 187, 136, 179, 85, 190, 207, 142, 146, 60, 126, 117, 82, 62, 74, 175, 162, 61, 165, 149, 0, 60, 146, 133, 26, 62, 166, 109, 99, 190, 175, 104, 130, 60, 219, 231, 37, 60, 93, 8, 113, 60, 222, 237, 165, 190, 4, 232, 116, 62, 86, 128, 17, 190, 71, 126, 196, 188, 38, 45, 67, 61, 28, 25, 200, 61, 155, 63, 157, 189, 114, 158, 164, 189, 85, 173, 95, 62, 104, 105, 166, 61, 10, 56, 26, 190, 105, 91, 184, 189, 105, 172, 121, 60, 104, 147, 224, 190, 79, 213, 165, 62, 42, 188, 252, 189, 139, 20, 176, 61, 212, 47, 49, 62, 42, 23, 239, 61, 97, 38, 129, 190, 37, 15, 112, 188, 172, 170, 134, 189, 111, 183, 220, 60, 151, 252, 203, 189, 104, 94, 25, 190, 223, 227, 34, 61, 5, 158, 140, 62, 67, 97, 196, 60, 246, 20, 96, 189, 138, 36, 135, 189, 185, 95, 3, 189, 199, 135, 143, 188, 192, 232, 50, 61, 0, 113, 100, 61, 143, 45, 2, 62, 198, 225, 7, 189, 188, 10, 229, 61, 223, 165, 153, 62, 154, 221, 201, 61, 66, 203, 168, 61, 195, 90, 92, 59, 86, 177, 131, 189, 108, 83, 11, 188, 30, 200, 241, 189, 161, 237, 140, 189, 105, 37, 55, 190, 239, 148, 174, 60, 93, 89, 145, 190, 6, 210, 32, 60, 109, 30, 29, 62, 113, 104, 77, 62, 199, 237, 130, 190, 225, 203, 20, 190, 131, 97, 132, 190, 81, 66, 182, 62, 35, 240, 73, 62, 182, 196, 37, 186, 54, 102, 248, 188, 189, 18, 22, 62, 236, 202, 136, 62, 209, 138, 113, 188, 190, 6, 80, 189, 49, 103, 138, 189, 29, 129, 2, 190, 98, 43, 175, 189, 253, 88, 82, 62, 47, 18, 92, 61, 157, 122, 130, 190, 95, 204, 135, 62, 236, 160, 45, 60, 222, 31, 1, 191, 159, 145, 55, 190, 78, 27, 100, 189, 178, 40, 53, 62, 106, 23, 144, 61, 91, 164, 19, 190, 183, 94, 12, 60, 120, 156, 146, 190, 44, 58, 198, 188, 9, 92, 37, 189, 109, 89, 35, 189, 175, 185, 24, 62, 229, 99, 155, 62, 33, 117, 5, 188, 122, 27, 99, 62, 43, 25, 170, 188, 156, 168, 238, 188, 16, 237, 56, 62, 11, 249, 58, 190, 121, 159, 168, 61, 157, 118, 202, 61, 2, 46, 170, 61, 108, 37, 167, 61, 37, 51, 47, 62, 234, 203, 6, 189, 28, 63, 9, 62, 83, 188, 178, 189, 22, 37, 244, 188, 107, 73, 255, 61, 66, 208, 78, 59, 47, 149, 55, 62, 3, 217, 2, 189, 44, 161, 45, 190, 182, 77, 141, 188, 130, 30, 99, 60, 108, 108, 132, 188, 91, 168, 5, 190, 209, 247, 16, 190, 227, 249, 203, 61, 128, 173, 184, 190, 159, 133, 71, 61, 4, 136, 226, 189, 137, 107, 160, 189, 189, 168, 0, 190, 37, 207, 31, 62, 57, 34, 148, 189, 236, 205, 26, 61, 45, 4, 185, 61, 3, 14, 38, 190, 48, 4, 11, 62, 210, 11, 181, 60, 103, 200, 2, 62, 39, 207, 65, 189, 166, 119, 233, 189, 162, 223, 120, 189, 17, 237, 39, 190, 130, 170, 243, 189, 23, 0, 44, 61, 25, 143, 53, 61, 5, 130, 13, 190, 236, 114, 136, 189, 123, 43, 109, 61, 73, 226, 35, 190, 116, 48, 24, 189, 254, 0, 137, 61, 33, 220, 139, 188, 194, 137, 237, 189, 120, 244, 213, 61, 146, 195, 247, 189, 92, 60, 228, 189, 80, 245, 55, 57, 70, 202, 174, 61, 80, 65, 241, 188, 48, 231, 145, 189, 100, 129, 0, 62, 120, 209, 3, 190, 104, 155, 26, 190, 192, 100, 1, 190, 247, 141, 67, 61, 57, 73, 28, 190, 49, 159, 217, 189, 136, 191, 255, 189, 119, 96, 236, 189, 183, 30, 227, 61, 123, 8, 130, 189, 245, 137, 201, 189, 171, 11, 116, 188, 229, 64, 249, 188, 43, 147, 14, 190, 109, 247, 155, 61, 145, 42, 169, 61, 186, 230, 8, 190, 88, 27, 16, 190, 122, 85, 14, 61, 145, 100, 17, 189, 32, 6, 17, 190, 80, 192, 44, 190, 199, 119, 240, 61, 35, 212, 255, 189, 172, 17, 141, 189, 65, 22, 31, 190, 34, 187, 236, 189, 136, 161, 6, 61, 67, 185, 52, 190, 206, 35, 163, 61, 255, 58, 232, 61, 7, 169, 42, 61, 154, 221, 82, 62, 187, 199, 255, 61, 112, 41, 241, 189, 200, 12, 6, 62, 114, 80, 2, 62, 72, 243, 222, 189, 244, 153, 24, 62, 72, 32, 43, 62, 195, 175, 153, 60, 189, 194, 162, 189, 53, 104, 54, 189, 18, 50, 159, 190, 4, 183, 194, 189, 57, 165, 140, 61, 7, 24, 85, 62, 116, 99, 127, 61, 163, 107, 124, 189, 37, 198, 32, 190, 165, 238, 85, 61, 179, 40, 59, 62, 53, 113, 142, 62, 141, 135, 59, 61, 171, 120, 101, 190, 58, 62, 18, 62, 188, 244, 65, 62, 86, 35, 109, 190, 116, 106, 1, 190, 75, 39, 233, 61, 145, 156, 207, 190, 99, 189, 10, 62, 187, 38, 163, 62, 245, 16, 184, 60, 157, 140, 248, 189, 160, 182, 20, 62, 68, 60, 3, 62, 15, 196, 69, 189, 163, 78, 215, 61, 110, 208, 148, 189, 83, 240, 145, 188, 101, 237, 33, 190, 3, 52, 87, 190, 8, 10, 214, 189, 10, 247, 138, 62, 118, 249, 150, 61, 75, 7, 154, 190, 238, 115, 165, 62, 216, 92, 205, 188, 245, 147, 222, 189, 236, 107, 139, 190, 24, 188, 138, 190, 166, 146, 143, 190, 182, 207, 144, 189, 177, 64, 188, 189, 14, 240, 113, 61, 101, 85, 1, 190, 101, 83, 183, 61, 212, 145, 152, 189, 62, 191, 94, 187, 112, 115, 135, 190, 81, 222, 217, 187, 37, 247, 132, 61, 132, 42, 203, 59, 224, 154, 179, 61, 54, 45, 253, 60, 121, 125, 147, 190, 16, 135, 156, 190, 248, 115, 250, 61, 39, 61, 100, 189, 116, 62, 155, 61, 220, 148, 150, 61, 168, 203, 144, 189, 206, 150, 160, 60, 195, 163, 145, 189, 236, 87, 8, 61, 247, 238, 113, 59, 64, 177, 237, 60, 185, 240, 219, 60, 124, 162, 170, 61, 218, 81, 7, 59, 147, 216, 8, 62, 35, 246, 163, 190, 138, 144, 62, 62, 65, 201, 204, 189, 7, 27, 239, 189, 216, 218, 66, 61, 243, 17, 70, 59, 238, 184, 159, 61, 125, 216, 43, 190, 225, 244, 40, 189, 209, 62, 15, 62, 83, 42, 27, 62, 125, 32, 36, 190, 219, 169, 120, 62, 249, 90, 62, 189, 100, 237, 0, 190, 28, 17, 213, 60, 23, 163, 65, 62, 145, 4, 162, 190, 155, 145, 81, 61, 34, 157, 223, 61, 202, 14, 255, 189, 210, 121, 136, 61, 1, 52, 45, 190, 0, 51, 247, 190, 139, 176, 14, 191, 60, 217, 102, 191, 125, 247, 194, 190, 125, 242, 183, 61, 228, 119, 14, 62, 74, 0, 77, 190, 1, 65, 214, 61, 169, 159, 173, 189, 222, 194, 48, 62, 168, 131, 93, 190, 1, 85, 255, 188, 116, 131, 146, 190, 207, 120, 27, 61, 163, 207, 138, 61, 140, 246, 98, 190, 45, 202, 180, 61, 203, 137, 164, 189, 172, 2, 143, 61, 53, 189, 16, 190, 151, 219, 62, 190, 225, 211, 178, 188, 117, 46, 0, 191, 223, 74, 72, 190, 233, 140, 150, 190, 254, 142, 229, 61, 116, 130, 26, 190, 214, 197, 171, 61, 185, 163, 180, 189, 237, 188, 67, 62, 158, 82, 84, 62, 225, 196, 163, 62, 19, 191, 130, 190, 241, 197, 5, 190, 145, 116, 170, 190, 124, 220, 152, 190, 62, 43, 130, 62, 165, 36, 2, 62, 121, 160, 3, 62, 98, 163, 54, 61, 78, 121, 147, 60, 218, 46, 24, 189, 141, 244, 20, 62, 75, 95, 172, 61, 78, 228, 12, 61, 101, 139, 67, 189, 160, 84, 38, 62, 77, 186, 163, 62, 59, 92, 111, 62, 38, 187, 218, 61, 213, 125, 9, 62, 218, 35, 231, 61, 203, 198, 129, 190, 183, 52, 153, 62, 229, 25, 145, 190, 248, 146, 166, 62, 128, 141, 216, 190, 162, 77, 28, 190, 71, 196, 191, 62, 27, 96, 25, 59, 215, 182, 197, 189, 204, 165, 59, 62, 84, 49, 172, 190, 207, 58, 76, 190, 183, 112, 251, 189, 22, 16, 233, 58, 47, 186, 144, 190, 129, 203, 209, 189, 64, 241, 87, 62, 46, 27, 214, 189, 220, 174, 126, 188, 229, 19, 165, 61, 110, 45, 0, 61, 134, 26, 140, 61, 2, 49, 225, 61, 148, 153, 214, 61, 115, 203, 77, 188, 172, 151, 138, 61, 96, 47, 37, 62, 176, 124, 109, 62, 45, 120, 82, 189, 225, 132, 242, 61, 33, 252, 191, 189, 187, 179, 77, 190, 109, 199, 55, 61, 23, 177, 25, 190, 160, 77, 140, 190, 94, 96, 174, 61, 77, 254, 43, 190, 90, 49, 79, 61, 218, 192, 195, 189, 82, 110, 146, 61, 51, 142, 38, 189, 239, 106, 201, 186, 66, 122, 133, 188, 98, 255, 137, 61, 81, 7, 147, 188, 30, 139, 13, 62, 145, 245, 75, 190, 205, 198, 189, 189, 35, 14, 205, 188, 2, 105, 125, 189, 41, 87, 200, 60, 80, 177, 32, 190, 153, 221, 232, 60, 52, 196, 107, 189, 189, 61, 205, 61, 98, 63, 223, 61, 3, 58, 37, 190, 51, 162, 64, 190, 105, 119, 224, 189, 223, 109, 187, 189, 123, 166, 116, 189, 216, 89, 28, 190, 165, 31, 212, 189, 178, 93, 155, 189, 238, 72, 141, 61, 186, 238, 203, 61, 192, 93, 221, 61, 234, 188, 12, 62, 232, 191, 65, 190, 143, 91, 153, 61, 41, 57, 38, 190, 129, 255, 245, 61, 156, 236, 3, 190, 230, 188, 117, 61, 174, 15, 139, 61, 241, 202, 10, 190, 196, 78, 4, 61, 125, 148, 9, 62, 214, 6, 255, 189, 227, 102, 148, 189, 105, 198, 253, 61, 18, 213, 239, 189, 117, 64, 120, 61, 244, 151, 105, 61, 129, 56, 71, 187, 91, 197, 161, 187, 236, 185, 238, 187, 225, 79, 157, 189, 69, 96, 40, 190, 228, 90, 15, 62, 153, 147, 9, 62, 99, 50, 252, 189, 250, 62, 18, 190, 220, 142, 184, 189, 87, 187, 125, 188, 50, 76, 59, 61, 89, 245, 140, 61, 213, 154, 135, 189, 49, 232, 7, 190, 87, 215, 147, 190, 142, 140, 53, 187, 32, 1, 177, 188, 128, 145, 214, 189, 180, 239, 72, 61, 103, 75, 33, 61, 248, 75, 155, 61, 48, 212, 184, 62, 153, 54, 156, 62, 125, 179, 233, 59, 72, 219, 20, 188, 255, 198, 242, 189, 35, 94, 95, 189, 34, 160, 236, 61, 73, 64, 18, 62, 181, 142, 226, 61, 84, 35, 183, 61, 15, 128, 175, 189, 57, 12, 69, 189, 83, 107, 186, 62, 126, 208, 171, 61, 53, 127, 152, 61, 21, 16, 193, 189, 153, 15, 7, 62, 122, 146, 172, 61, 114, 32, 149, 60, 121, 11, 135, 62, 200, 174, 0, 60, 133, 248, 185, 62, 131, 5, 204, 190, 112, 239, 114, 62, 252, 198, 1, 190, 128, 120, 144, 187, 93, 252, 8, 190, 253, 133, 233, 189, 236, 41, 143, 61, 39, 141, 165, 186, 141, 14, 40, 189, 84, 203, 37, 190, 139, 103, 98, 189, 102, 104, 32, 190, 222, 250, 255, 61, 40, 94, 212, 189, 101, 140, 43, 190, 241, 218, 26, 190, 148, 30, 156, 61, 11, 112, 164, 188, 162, 130, 123, 59, 79, 113, 198, 61, 33, 15, 223, 189, 23, 104, 3, 62, 66, 117, 47, 189, 103, 239, 240, 189, 109, 140, 198, 189, 43, 184, 134, 189, 227, 31, 143, 60, 60, 155, 155, 189, 31, 202, 149, 60, 251, 247, 245, 61, 20, 189, 237, 61, 130, 221, 213, 61, 32, 21, 99, 61, 104, 5, 44, 62, 228, 156, 187, 189, 181, 95, 224, 189, 114, 20, 226, 188, 177, 225, 233, 60, 171, 42, 244, 60, 215, 72, 226, 187, 183, 224, 213, 189, 245, 112, 237, 189, 229, 94, 14, 190, 187, 154, 136, 189, 150, 198, 165, 189, 137, 210, 231, 60, 106, 151, 32, 189, 118, 27, 174, 189, 35, 214, 167, 60, 239, 220, 16, 62, 156, 159, 40, 188, 70, 167, 151, 189, 59, 33, 45, 189, 129, 180, 12, 190, 13, 186, 169, 189, 68, 39, 227, 61, 38, 134, 18, 190, 229, 115, 177, 189, 35, 252, 123, 61, 56, 96, 23, 62, 241, 115, 149, 61, 168, 168, 220, 189, 24, 29, 25, 188, 50, 138, 32, 188, 213, 88, 216, 189, 234, 164, 162, 61, 88, 158, 184, 61, 157, 164, 20, 190, 16, 24, 10, 62, 47, 129, 112, 60, 182, 125, 54, 190, 0, 63, 236, 61, 65, 216, 167, 61, 128, 40, 225, 189, 21, 24, 227, 62, 217, 67, 41, 62, 103, 242, 225, 190, 84, 1, 26, 191, 121, 173, 84, 191, 38, 186, 118, 190, 145, 84, 218, 189, 156, 120, 73, 62, 197, 150, 56, 190, 24, 41, 250, 188, 143, 59, 94, 190, 86, 78, 235, 61, 217, 84, 26, 62, 178, 197, 136, 61, 100, 161, 161, 188, 92, 132, 79, 190, 64, 48, 77, 187, 107, 84, 218, 61, 120, 146, 55, 189, 161, 42, 22, 189, 44, 244, 50, 190, 36, 57, 138, 61, 80, 235, 151, 189, 204, 250, 60, 61, 203, 103, 249, 190, 61, 8, 125, 190, 79, 177, 139, 187, 160, 61, 126, 62, 14, 204, 74, 190, 173, 141, 129, 62, 247, 212, 57, 62, 109, 30, 71, 190, 148, 197, 234, 62, 216, 198, 93, 61, 203, 46, 141, 190, 73, 107, 7, 191, 168, 29, 113, 191, 117, 168, 1, 61, 129, 235, 29, 62, 106, 153, 208, 61, 225, 160, 219, 189, 110, 106, 43, 190, 157, 109, 198, 61, 201, 217, 112, 189, 240, 252, 32, 59, 147, 198, 53, 187, 104, 135, 43, 189, 204, 43, 135, 190, 25, 149, 109, 61, 5, 86, 106, 59, 193, 50, 149, 189, 126, 176, 240, 189, 205, 161, 218, 189, 157, 68, 126, 61, 101, 147, 153, 190, 158, 68, 33, 62, 222, 32, 72, 190, 122, 147, 127, 190, 179, 209, 34, 62, 67, 196, 37, 61, 136, 179, 165, 188, 19, 70, 253, 61, 87, 140, 2, 61, 143, 240, 185, 189, 211, 240, 189, 62, 238, 19, 11, 62, 242, 241, 210, 190, 202, 149, 47, 191, 115, 109, 85, 191, 84, 207, 219, 60, 220, 181, 91, 190, 194, 31, 47, 62, 98, 228, 108, 190, 62, 249, 53, 190, 242, 218, 238, 61, 223, 96, 75, 62, 120, 173, 91, 190, 60, 81, 218, 61, 152, 68, 137, 60, 181, 252, 38, 190, 19, 228, 231, 60, 230, 88, 178, 188, 184, 61, 131, 60, 92, 162, 165, 187, 237, 141, 10, 189, 28, 128, 237, 61, 122, 51, 209, 189, 106, 6, 92, 61, 71, 240, 255, 190, 196, 25, 45, 62, 1, 105, 102, 62, 104, 157, 57, 62, 58, 219, 41, 62, 164, 11, 195, 61, 175, 106, 34, 62, 86, 30, 235, 61, 75, 119, 142, 62, 149, 170, 6, 62, 2, 64, 129, 62, 218, 234, 202, 188, 194, 200, 50, 62, 166, 173, 146, 62, 123, 208, 207, 190, 216, 252, 16, 190, 137, 192, 223, 189, 18, 153, 31, 190, 79, 162, 26, 190, 165, 178, 2, 190, 114, 194, 215, 190, 139, 24, 113, 61, 229, 249, 14, 62, 119, 248, 104, 189, 30, 236, 190, 61, 34, 175, 200, 190, 204, 147, 166, 189, 77, 152, 230, 61, 171, 43, 27, 191, 99, 143, 83, 190, 38, 153, 21, 60, 255, 180, 189, 190, 212, 211, 238, 62, 198, 153, 177, 189, 199, 73, 183, 61, 214, 2, 187, 189, 177, 91, 184, 188, 48, 58, 69, 190, 83, 0, 198, 61, 198, 217, 115, 61, 138, 172, 35, 188, 101, 150, 81, 190, 139, 197, 65, 190, 62, 208, 29, 191, 157, 114, 80, 191, 162, 252, 187, 190, 148, 35, 132, 60, 240, 82, 147, 61, 189, 182, 100, 61, 155, 123, 167, 61, 19, 104, 202, 189, 146, 4, 117, 62, 81, 110, 239, 189, 19, 47, 80, 190, 32, 95, 73, 190, 41, 65, 221, 189, 113, 134, 204, 187, 76, 174, 96, 189, 54, 219, 68, 60, 103, 147, 33, 189, 140, 4, 100, 61, 68, 160, 11, 190, 226, 22, 179, 190, 15, 35, 6, 190, 179, 20, 197, 190, 31, 67, 167, 188, 116, 14, 183, 190, 173, 181, 170, 61, 73, 194, 150, 62, 5, 8, 3, 190, 143, 162, 186, 61, 200, 200, 207, 61, 150, 110, 14, 62, 96, 102, 169, 189, 175, 202, 1, 190, 20, 37, 18, 62, 15, 147, 69, 62, 191, 227, 60, 62, 17, 249, 223, 189, 212, 208, 241, 61, 128, 190, 134, 61, 25, 5, 196, 189, 252, 49, 129, 61, 239, 75, 15, 61, 236, 25, 75, 189, 92, 230, 89, 189, 189, 157, 101, 62, 228, 125, 165, 61, 146, 112, 204, 188, 32, 222, 166, 62, 101, 40, 211, 61, 177, 134, 145, 189, 205, 175, 1, 190, 117, 62, 136, 190, 6, 30, 250, 61, 15, 121, 10, 62, 107, 153, 144, 61, 71, 190, 127, 62, 32, 224, 33, 190, 111, 74, 208, 190, 15, 144, 148, 62, 49, 88, 185, 189, 252, 112, 65, 189, 151, 19, 198, 61, 21, 11, 206, 190, 238, 210, 9, 191, 93, 44, 153, 62, 108, 126, 96, 61, 159, 120, 29, 62, 143, 125, 228, 61, 71, 173, 130, 61, 203, 61, 177, 190, 154, 89, 76, 189, 177, 32, 202, 189, 191, 68, 131, 190, 20, 95, 228, 188, 144, 239, 145, 190, 187, 110, 145, 190, 82, 72, 176, 190, 45, 29, 73, 62, 49, 157, 34, 189, 172, 88, 179, 189, 233, 203, 126, 189, 119, 195, 132, 190, 104, 216, 27, 190, 43, 76, 214, 190, 62, 212, 216, 190, 4, 174, 77, 61, 25, 7, 185, 62, 213, 230, 232, 189, 222, 133, 6, 188, 104, 122, 226, 189, 26, 233, 55, 61, 116, 85, 226, 189, 171, 164, 16, 190, 75, 193, 141, 61, 23, 107, 214, 61, 226, 194, 241, 61, 226, 132, 149, 60, 217, 217, 0, 190, 116, 80, 234, 61, 160, 52, 164, 189, 153, 62, 155, 61, 228, 14, 159, 189, 144, 224, 251, 187, 115, 159, 18, 190, 173, 203, 213, 61, 132, 182, 38, 190, 153, 202, 78, 60, 224, 50, 35, 60, 126, 180, 58, 190, 193, 69, 200, 189, 77, 58, 156, 61, 49, 106, 160, 61, 101, 28, 204, 189, 148, 8, 229, 61, 182, 186, 50, 190, 65, 214, 36, 190, 128, 203, 196, 61, 238, 73, 212, 188, 43, 188, 3, 61, 164, 181, 96, 190, 87, 144, 180, 61, 186, 3, 192, 61, 94, 160, 192, 62, 161, 231, 119, 190, 74, 233, 128, 190, 225, 35, 52, 190, 214, 195, 108, 190, 101, 59, 52, 190, 191, 177, 255, 188, 228, 157, 138, 189, 11, 108, 9, 63, 1, 64, 47, 61, 83, 212, 53, 189, 53, 107, 81, 190, 246, 162, 136, 62, 124, 47, 1, 191, 94, 127, 73, 190, 229, 230, 3, 63, 201, 139, 244, 189, 47, 205, 126, 191, 110, 165, 171, 190, 85, 44, 211, 62, 187, 86, 118, 191, 105, 50, 199, 188, 187, 228, 137, 62, 131, 190, 13, 61, 159, 152, 76, 190, 228, 180, 80, 190, 10, 156, 38, 189, 87, 17, 58, 190, 166, 238, 42, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 165, 149, 189, 41, 125, 169, 188, 208, 240, 22, 190, 113, 141, 74, 62, 158, 111, 62, 189, 10, 190, 115, 62, 128, 243, 109, 62, 135, 70, 155, 62, 5, 104, 144, 62, 114, 29, 69, 62, 84, 50, 153, 189, 183, 33, 150, 61, 237, 240, 135, 61, 58, 161, 24, 61, 13, 252, 185, 189, 152, 31, 61, 62, 152, 204, 237, 61, 124, 86, 242, 188, 23, 130, 2, 190, 12, 41, 179, 189, 143, 2, 6, 62, 169, 247, 41, 190, 233, 244, 117, 189, 155, 208, 133, 62, 107, 100, 99, 62, 241, 231, 55, 62, 224, 164, 107, 59, 253, 215, 86, 62, 246, 193, 151, 62, 99, 122, 39, 62, 113, 42, 74, 190, 244, 67, 192, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 246, 225, 61, 25, 184, 197, 190, 254, 146, 247, 189, 190, 213, 249, 62, 107, 81, 50, 189, 219, 7, 50, 191, 33, 70, 151, 62, 171, 212, 157, 61, 211, 27, 20, 62, 226, 90, 93, 61, 118, 225, 206, 61, 185, 141, 9, 190, 64, 19, 36, 62, 167, 136, 236, 189, 119, 175, 96, 189, 204, 109, 197, 190, 195, 238, 170, 190, 93, 173, 160, 62, 176, 119, 247, 61, 245, 34, 151, 61, 54, 0, 126, 190, 40, 102, 92, 189, 59, 29, 27, 190, 253, 68, 44, 191, 238, 140, 202, 190, 21, 207, 238, 190, 85, 34, 145, 62, 97, 104, 16, 191, 85, 88, 217, 61, 90, 120, 25, 191, 162, 56, 178, 189, 171, 31, 128, 63, 118, 108, 233, 61, 8, 8, 182, 188, 65, 202, 133, 61, 88, 132, 108, 62, 151, 109, 19, 190, 176, 215, 24, 59, 129, 238, 191, 189, 185, 132, 137, 190, 129, 21, 141, 190, 60, 5, 52, 190, 192, 243, 7, 187, 232, 40, 50, 62, 97, 25, 11, 190, 19, 60, 167, 62, 233, 221, 117, 62, 199, 40, 84, 189, 215, 69, 79, 190, 154, 202, 66, 62, 21, 24, 227, 61, 227, 63, 35, 188, 13, 167, 241, 189, 88, 99, 245, 61, 60, 13, 31, 61, 128, 40, 23, 62, 20, 125, 206, 61, 220, 224, 43, 62, 136, 157, 39, 62, 41, 0, 208, 189, 76, 202, 48, 190, 90, 173, 164, 62, 150, 16, 186, 60, 199, 190, 218, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 25, 123, 187, 166, 99, 84, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {156, 102, 88, 191, 121, 184, 2, 64, 22, 93, 78, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {143, 243, 58, 192, 146, 29, 232, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0056/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}