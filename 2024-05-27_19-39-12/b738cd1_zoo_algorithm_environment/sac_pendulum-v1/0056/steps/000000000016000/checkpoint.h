// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 173, 92, 63, 171, 226, 242, 190, 179, 4, 156, 190, 63, 8, 56, 189, 139, 129, 168, 63, 171, 226, 53, 62, 12, 79, 212, 190, 19, 197, 3, 63, 42, 5, 42, 189, 216, 159, 92, 63, 32, 224, 138, 191, 140, 71, 118, 190, 246, 43, 37, 63, 14, 204, 141, 63, 176, 17, 170, 62, 227, 255, 0, 191, 143, 250, 133, 191, 150, 45, 199, 190, 216, 20, 145, 62, 232, 17, 97, 191, 176, 49, 224, 189, 144, 115, 183, 62, 77, 174, 62, 63, 65, 69, 82, 190, 152, 248, 18, 63, 62, 66, 150, 63, 0, 120, 86, 62, 218, 246, 108, 191, 150, 232, 200, 63, 220, 79, 243, 62, 78, 34, 116, 191, 71, 89, 147, 62, 120, 14, 63, 63, 6, 68, 92, 60, 117, 53, 156, 190, 225, 101, 180, 62, 136, 177, 236, 62, 237, 54, 25, 62, 63, 57, 185, 190, 164, 203, 133, 60, 216, 31, 212, 190, 5, 11, 90, 62, 228, 29, 200, 190, 146, 62, 204, 62, 94, 244, 146, 190, 103, 92, 86, 63, 173, 160, 94, 190, 10, 103, 2, 190, 100, 206, 167, 190, 33, 239, 208, 191, 14, 38, 204, 190, 232, 215, 71, 63, 29, 211, 243, 62, 203, 248, 196, 62, 250, 175, 29, 191, 18, 254, 53, 191, 156, 236, 6, 62, 42, 108, 75, 63, 119, 223, 23, 63, 99, 57, 221, 62, 116, 211, 11, 191, 192, 218, 53, 191, 203, 38, 5, 191, 138, 160, 165, 62, 243, 165, 59, 63, 184, 199, 144, 190, 135, 145, 188, 62, 40, 142, 91, 191, 236, 251, 18, 62, 213, 202, 205, 190, 248, 27, 243, 190, 148, 116, 3, 191, 30, 239, 192, 62, 110, 228, 177, 190, 85, 32, 162, 62, 120, 115, 224, 62, 75, 182, 76, 191, 71, 163, 46, 190, 255, 52, 107, 62, 225, 206, 124, 63, 26, 69, 183, 61, 197, 105, 29, 190, 253, 200, 146, 189, 250, 254, 53, 62, 135, 242, 26, 63, 253, 53, 197, 63, 233, 156, 189, 62, 117, 105, 26, 191, 151, 223, 18, 63, 151, 41, 37, 190, 123, 164, 28, 189, 241, 139, 213, 190, 136, 135, 183, 62, 112, 180, 106, 60, 254, 219, 87, 190, 110, 28, 220, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 145, 146, 191, 133, 218, 0, 189, 116, 1, 231, 62, 195, 96, 148, 190, 238, 41, 180, 190, 84, 104, 139, 62, 177, 93, 12, 191, 216, 95, 225, 62, 42, 167, 188, 62, 105, 98, 139, 61, 215, 234, 130, 190, 35, 176, 102, 191, 193, 53, 54, 62, 78, 160, 113, 61, 61, 127, 95, 62, 145, 106, 235, 190, 214, 147, 91, 190, 142, 127, 124, 191, 147, 42, 35, 63, 65, 200, 207, 61, 170, 197, 25, 191, 13, 195, 66, 61, 216, 14, 176, 62, 33, 2, 38, 191, 178, 116, 2, 62, 193, 26, 71, 62, 186, 69, 166, 62, 57, 254, 41, 190, 147, 37, 19, 61, 217, 203, 190, 190, 249, 210, 140, 189, 244, 205, 166, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 250, 30, 190, 9, 209, 66, 191, 129, 65, 18, 190, 77, 83, 95, 62, 29, 211, 234, 190, 218, 68, 123, 62, 12, 101, 137, 190, 169, 1, 32, 61, 89, 55, 35, 61, 237, 12, 234, 189, 6, 133, 26, 190, 232, 239, 247, 60, 90, 27, 58, 61, 8, 65, 159, 62, 14, 165, 163, 60, 56, 61, 157, 61, 114, 231, 155, 190, 189, 152, 222, 190, 252, 166, 208, 187, 51, 98, 20, 61, 222, 203, 46, 187, 161, 190, 165, 58, 169, 219, 154, 62, 124, 0, 132, 190, 191, 195, 242, 61, 247, 25, 143, 61, 4, 159, 101, 61, 108, 244, 14, 190, 62, 177, 166, 190, 126, 245, 139, 61, 65, 236, 56, 62, 145, 61, 116, 190, 16, 93, 16, 63, 54, 113, 203, 190, 196, 162, 124, 190, 79, 30, 38, 61, 231, 142, 128, 62, 121, 59, 36, 62, 5, 166, 198, 190, 97, 64, 6, 62, 64, 133, 37, 189, 143, 34, 136, 190, 177, 182, 49, 190, 229, 13, 48, 190, 59, 79, 157, 190, 114, 33, 140, 62, 18, 153, 200, 61, 197, 57, 58, 189, 187, 105, 168, 62, 154, 31, 215, 62, 112, 134, 40, 62, 180, 161, 52, 62, 248, 195, 129, 62, 28, 94, 144, 190, 39, 49, 105, 189, 164, 147, 118, 61, 119, 242, 142, 62, 184, 202, 136, 62, 64, 253, 74, 190, 202, 52, 204, 189, 190, 16, 103, 62, 187, 39, 27, 191, 119, 172, 243, 62, 216, 167, 147, 61, 3, 44, 92, 189, 53, 253, 196, 189, 33, 22, 29, 190, 58, 224, 37, 190, 145, 54, 50, 190, 64, 39, 165, 189, 180, 175, 43, 190, 93, 127, 168, 189, 68, 109, 14, 189, 91, 150, 1, 60, 247, 252, 79, 187, 220, 253, 64, 61, 236, 82, 128, 189, 94, 69, 15, 62, 52, 69, 16, 61, 77, 252, 6, 62, 51, 19, 40, 62, 42, 66, 23, 190, 37, 120, 10, 61, 92, 30, 139, 60, 131, 38, 211, 61, 83, 70, 76, 61, 46, 182, 164, 189, 177, 226, 160, 189, 50, 16, 21, 190, 88, 224, 174, 58, 70, 155, 25, 62, 118, 53, 3, 189, 252, 111, 156, 61, 216, 12, 111, 61, 17, 222, 5, 62, 149, 32, 32, 190, 98, 83, 61, 187, 39, 45, 14, 62, 33, 163, 58, 62, 226, 147, 26, 62, 245, 176, 2, 191, 244, 48, 12, 62, 146, 169, 47, 189, 209, 116, 68, 190, 152, 162, 131, 190, 62, 75, 13, 61, 65, 142, 17, 190, 157, 29, 132, 189, 83, 90, 115, 190, 90, 183, 108, 191, 147, 2, 107, 62, 43, 21, 9, 62, 73, 117, 21, 191, 81, 247, 166, 190, 10, 19, 173, 62, 124, 222, 8, 190, 225, 209, 217, 190, 215, 175, 160, 189, 94, 200, 216, 189, 195, 199, 38, 191, 215, 144, 34, 191, 80, 232, 28, 190, 140, 228, 113, 189, 198, 24, 190, 190, 214, 253, 128, 190, 225, 61, 31, 63, 90, 218, 117, 191, 123, 171, 172, 190, 124, 38, 196, 189, 117, 9, 54, 189, 52, 209, 52, 61, 198, 239, 130, 60, 165, 153, 11, 62, 113, 247, 14, 190, 182, 167, 248, 189, 138, 169, 172, 60, 187, 82, 254, 189, 216, 74, 164, 189, 200, 95, 49, 190, 51, 139, 201, 189, 96, 157, 145, 189, 238, 75, 134, 188, 111, 210, 8, 190, 189, 139, 167, 189, 136, 195, 78, 61, 249, 250, 23, 190, 221, 69, 23, 190, 60, 177, 32, 190, 71, 122, 242, 60, 9, 145, 6, 62, 28, 16, 37, 190, 63, 10, 244, 61, 74, 121, 162, 61, 87, 135, 180, 61, 190, 11, 140, 61, 156, 136, 175, 189, 66, 68, 23, 190, 58, 245, 219, 189, 230, 164, 49, 62, 146, 212, 135, 189, 31, 222, 170, 190, 120, 180, 79, 61, 2, 50, 180, 61, 36, 199, 180, 190, 216, 156, 106, 190, 118, 94, 8, 62, 1, 92, 145, 62, 233, 18, 146, 62, 197, 156, 198, 61, 44, 146, 234, 191, 244, 4, 138, 191, 48, 147, 23, 191, 130, 114, 220, 189, 211, 78, 201, 61, 18, 5, 162, 62, 230, 183, 56, 191, 86, 207, 63, 61, 21, 145, 187, 188, 144, 165, 169, 61, 34, 68, 124, 190, 138, 91, 99, 62, 150, 149, 133, 190, 181, 168, 52, 189, 107, 142, 114, 189, 83, 7, 171, 190, 10, 192, 191, 189, 152, 11, 37, 190, 141, 172, 0, 190, 37, 70, 232, 190, 151, 85, 156, 190, 108, 57, 21, 61, 188, 12, 123, 191, 147, 68, 68, 189, 175, 144, 1, 191, 1, 240, 195, 61, 106, 185, 214, 62, 253, 148, 79, 191, 233, 193, 74, 189, 116, 180, 56, 62, 43, 51, 123, 190, 176, 102, 19, 60, 4, 0, 134, 62, 71, 39, 68, 61, 182, 191, 152, 189, 13, 82, 153, 61, 82, 68, 200, 189, 226, 151, 141, 189, 126, 252, 228, 61, 170, 248, 104, 190, 206, 177, 39, 191, 24, 61, 188, 62, 40, 57, 244, 189, 248, 201, 0, 190, 24, 219, 188, 189, 186, 176, 49, 62, 38, 44, 61, 190, 187, 138, 228, 187, 47, 80, 173, 62, 4, 58, 163, 61, 92, 55, 0, 190, 188, 149, 37, 190, 150, 251, 45, 190, 34, 246, 200, 190, 146, 236, 145, 62, 101, 182, 51, 190, 248, 224, 0, 62, 4, 229, 128, 62, 112, 102, 46, 62, 191, 53, 192, 190, 197, 174, 111, 189, 245, 33, 198, 61, 53, 144, 38, 62, 213, 252, 34, 61, 211, 77, 230, 189, 255, 119, 134, 61, 142, 197, 165, 62, 127, 138, 150, 61, 241, 222, 10, 189, 54, 82, 185, 188, 108, 14, 238, 61, 123, 91, 51, 190, 136, 87, 21, 62, 193, 33, 47, 62, 211, 91, 53, 62, 249, 126, 210, 189, 200, 24, 67, 62, 161, 194, 162, 62, 224, 242, 229, 60, 82, 152, 176, 61, 252, 101, 183, 61, 42, 14, 178, 61, 200, 53, 38, 61, 149, 170, 200, 189, 148, 251, 242, 189, 162, 189, 10, 190, 111, 145, 88, 60, 55, 23, 82, 191, 143, 164, 124, 190, 208, 172, 203, 61, 224, 34, 9, 61, 214, 100, 30, 191, 64, 21, 44, 191, 135, 172, 230, 189, 83, 254, 76, 62, 163, 21, 209, 61, 84, 68, 22, 61, 26, 98, 141, 61, 223, 118, 126, 62, 209, 242, 4, 61, 200, 9, 212, 61, 30, 236, 202, 189, 249, 156, 82, 189, 241, 30, 203, 190, 15, 51, 248, 189, 193, 50, 204, 62, 76, 131, 28, 62, 123, 107, 16, 191, 55, 146, 108, 61, 60, 92, 65, 61, 203, 85, 113, 191, 30, 222, 162, 189, 189, 189, 2, 190, 102, 36, 168, 61, 41, 91, 64, 62, 152, 30, 213, 189, 190, 52, 113, 61, 101, 29, 21, 190, 153, 166, 118, 61, 139, 34, 108, 189, 85, 138, 16, 191, 7, 126, 3, 62, 76, 208, 198, 62, 218, 54, 76, 191, 23, 255, 26, 62, 29, 139, 247, 61, 130, 21, 162, 61, 132, 15, 112, 62, 34, 61, 182, 190, 199, 141, 149, 61, 175, 27, 33, 62, 249, 221, 231, 61, 21, 63, 112, 62, 184, 44, 52, 62, 43, 18, 35, 62, 123, 49, 144, 189, 25, 70, 189, 190, 61, 241, 74, 62, 45, 68, 53, 62, 30, 74, 181, 189, 198, 91, 106, 62, 68, 32, 212, 61, 119, 90, 134, 190, 167, 22, 150, 61, 107, 123, 243, 61, 188, 212, 58, 61, 76, 23, 62, 189, 101, 236, 96, 190, 152, 70, 15, 60, 185, 158, 118, 190, 188, 93, 89, 60, 4, 136, 226, 189, 137, 107, 160, 189, 189, 168, 0, 190, 37, 207, 31, 62, 57, 34, 148, 189, 236, 205, 26, 61, 45, 4, 185, 61, 3, 14, 38, 190, 48, 4, 11, 62, 210, 11, 181, 60, 103, 200, 2, 62, 39, 207, 65, 189, 166, 119, 233, 189, 162, 223, 120, 189, 17, 237, 39, 190, 130, 170, 243, 189, 23, 0, 44, 61, 25, 143, 53, 61, 5, 130, 13, 190, 236, 114, 136, 189, 123, 43, 109, 61, 73, 226, 35, 190, 116, 48, 24, 189, 254, 0, 137, 61, 33, 220, 139, 188, 194, 137, 237, 189, 120, 244, 213, 61, 146, 195, 247, 189, 92, 60, 228, 189, 80, 245, 55, 57, 70, 202, 174, 61, 80, 65, 241, 188, 48, 231, 145, 189, 100, 129, 0, 62, 120, 209, 3, 190, 104, 155, 26, 190, 192, 100, 1, 190, 247, 141, 67, 61, 57, 73, 28, 190, 49, 159, 217, 189, 136, 191, 255, 189, 119, 96, 236, 189, 183, 30, 227, 61, 123, 8, 130, 189, 245, 137, 201, 189, 171, 11, 116, 188, 229, 64, 249, 188, 43, 147, 14, 190, 109, 247, 155, 61, 145, 42, 169, 61, 186, 230, 8, 190, 88, 27, 16, 190, 122, 85, 14, 61, 145, 100, 17, 189, 32, 6, 17, 190, 80, 192, 44, 190, 199, 119, 240, 61, 35, 212, 255, 189, 172, 17, 141, 189, 65, 22, 31, 190, 34, 187, 236, 189, 136, 161, 6, 61, 67, 185, 52, 190, 206, 35, 163, 61, 83, 195, 10, 62, 190, 75, 183, 61, 177, 106, 84, 62, 4, 226, 190, 61, 233, 101, 8, 62, 119, 74, 1, 62, 20, 35, 65, 62, 152, 197, 227, 188, 226, 174, 97, 62, 132, 143, 215, 62, 173, 101, 33, 62, 24, 73, 27, 61, 60, 46, 240, 188, 250, 154, 234, 190, 94, 12, 142, 189, 150, 45, 56, 62, 168, 2, 121, 61, 59, 115, 236, 62, 241, 198, 18, 61, 109, 195, 15, 190, 5, 28, 44, 60, 72, 217, 105, 62, 228, 183, 28, 62, 54, 36, 228, 58, 123, 124, 153, 190, 59, 241, 200, 61, 133, 82, 153, 62, 190, 127, 241, 189, 173, 212, 37, 189, 172, 68, 108, 61, 81, 132, 193, 190, 216, 247, 199, 61, 154, 34, 21, 63, 154, 188, 180, 191, 129, 128, 182, 190, 242, 223, 100, 62, 49, 241, 135, 191, 206, 90, 237, 189, 175, 80, 98, 190, 125, 128, 176, 61, 244, 202, 248, 188, 109, 134, 64, 190, 133, 82, 175, 60, 51, 134, 229, 61, 51, 117, 203, 62, 181, 88, 65, 62, 130, 154, 68, 190, 86, 211, 35, 63, 138, 32, 143, 190, 131, 213, 118, 190, 109, 46, 51, 191, 148, 175, 143, 187, 85, 232, 110, 190, 224, 53, 202, 61, 72, 119, 98, 189, 140, 83, 216, 61, 24, 3, 23, 62, 240, 43, 166, 61, 123, 209, 71, 190, 54, 6, 157, 62, 161, 110, 30, 191, 32, 102, 86, 62, 120, 149, 248, 62, 239, 113, 55, 62, 169, 103, 152, 189, 52, 208, 191, 189, 45, 29, 232, 190, 77, 61, 37, 191, 87, 52, 151, 62, 55, 56, 6, 190, 184, 159, 226, 187, 93, 48, 162, 62, 235, 61, 23, 62, 98, 125, 24, 190, 169, 117, 14, 190, 184, 134, 168, 60, 246, 212, 110, 62, 150, 201, 73, 189, 32, 74, 250, 61, 104, 195, 75, 190, 80, 149, 147, 190, 125, 241, 62, 62, 121, 65, 249, 190, 70, 98, 112, 62, 185, 37, 196, 190, 106, 200, 40, 62, 194, 194, 138, 61, 126, 247, 110, 190, 2, 86, 121, 61, 135, 159, 156, 190, 57, 202, 180, 61, 99, 69, 171, 61, 40, 177, 102, 62, 128, 32, 149, 190, 105, 216, 99, 62, 207, 11, 102, 188, 159, 153, 99, 190, 223, 5, 171, 190, 101, 255, 26, 62, 48, 82, 231, 190, 146, 16, 82, 61, 144, 92, 100, 62, 242, 243, 187, 59, 82, 220, 242, 60, 199, 207, 91, 191, 160, 139, 225, 191, 148, 246, 243, 190, 92, 191, 41, 190, 64, 196, 172, 190, 52, 190, 201, 62, 160, 145, 63, 62, 91, 73, 151, 191, 145, 141, 145, 62, 153, 118, 180, 189, 210, 97, 25, 62, 178, 89, 232, 190, 46, 153, 181, 61, 158, 200, 128, 190, 165, 8, 115, 62, 121, 6, 71, 62, 3, 11, 13, 61, 181, 122, 114, 60, 149, 65, 122, 191, 3, 216, 198, 62, 111, 234, 171, 190, 119, 160, 13, 189, 75, 157, 232, 62, 17, 62, 155, 190, 134, 222, 4, 191, 201, 244, 46, 190, 82, 134, 64, 62, 245, 125, 186, 190, 39, 87, 178, 60, 114, 196, 14, 190, 231, 30, 250, 62, 26, 17, 64, 62, 0, 84, 175, 62, 138, 179, 49, 191, 77, 90, 65, 190, 84, 227, 184, 190, 170, 217, 151, 190, 87, 238, 131, 62, 207, 97, 250, 61, 180, 230, 25, 190, 218, 185, 17, 59, 74, 219, 36, 62, 229, 197, 29, 189, 243, 134, 2, 62, 247, 214, 144, 188, 186, 236, 78, 61, 78, 230, 106, 60, 78, 131, 158, 61, 11, 149, 153, 62, 112, 195, 71, 62, 2, 37, 48, 62, 28, 56, 201, 61, 96, 201, 2, 62, 244, 218, 80, 190, 67, 128, 156, 62, 52, 42, 129, 190, 139, 189, 225, 62, 43, 109, 14, 191, 139, 103, 180, 190, 94, 111, 218, 62, 239, 193, 143, 191, 94, 253, 3, 191, 45, 27, 173, 188, 2, 227, 154, 190, 199, 103, 239, 189, 55, 44, 175, 190, 249, 143, 39, 189, 60, 166, 140, 190, 24, 0, 130, 190, 37, 24, 195, 62, 166, 154, 16, 190, 118, 75, 14, 62, 20, 2, 239, 190, 138, 239, 225, 190, 37, 158, 47, 189, 83, 224, 92, 62, 92, 21, 141, 61, 236, 125, 66, 59, 203, 184, 74, 62, 46, 48, 218, 61, 197, 225, 175, 62, 236, 109, 203, 189, 79, 103, 65, 62, 207, 0, 190, 61, 106, 1, 125, 190, 132, 12, 69, 60, 3, 176, 209, 61, 230, 198, 42, 190, 214, 58, 32, 191, 131, 213, 168, 61, 229, 41, 38, 62, 122, 153, 0, 191, 193, 107, 115, 62, 141, 110, 25, 190, 239, 106, 201, 186, 30, 5, 59, 62, 15, 46, 43, 62, 100, 71, 5, 62, 199, 35, 48, 62, 62, 202, 97, 190, 119, 114, 6, 189, 206, 87, 247, 189, 48, 79, 70, 60, 171, 60, 161, 190, 109, 235, 152, 190, 176, 18, 239, 188, 195, 214, 218, 189, 159, 97, 11, 62, 108, 36, 170, 61, 252, 78, 56, 61, 167, 36, 200, 190, 173, 95, 1, 190, 195, 229, 63, 190, 0, 195, 225, 190, 130, 140, 252, 188, 166, 81, 204, 189, 152, 163, 53, 61, 172, 88, 15, 62, 78, 128, 86, 61, 65, 120, 146, 61, 234, 188, 12, 62, 15, 244, 65, 190, 49, 104, 144, 61, 41, 57, 38, 190, 24, 172, 239, 61, 241, 221, 4, 190, 230, 188, 117, 61, 174, 15, 139, 61, 185, 22, 11, 190, 135, 124, 113, 60, 202, 198, 215, 61, 3, 147, 10, 190, 227, 102, 148, 189, 9, 175, 241, 61, 252, 245, 239, 189, 117, 64, 120, 61, 244, 151, 105, 61, 206, 47, 31, 188, 225, 129, 170, 188, 126, 209, 120, 188, 225, 79, 157, 189, 69, 96, 40, 190, 174, 190, 7, 62, 153, 147, 9, 62, 58, 255, 7, 190, 250, 62, 18, 190, 38, 48, 192, 189, 31, 107, 192, 188, 14, 145, 22, 61, 89, 245, 140, 61, 138, 0, 158, 189, 51, 45, 23, 190, 226, 61, 43, 191, 194, 11, 211, 60, 250, 229, 185, 61, 79, 129, 253, 190, 184, 209, 237, 61, 33, 40, 179, 189, 43, 253, 201, 61, 109, 48, 151, 62, 55, 204, 182, 62, 194, 73, 87, 190, 135, 201, 166, 189, 5, 210, 3, 190, 54, 40, 6, 190, 111, 195, 149, 186, 157, 254, 24, 62, 38, 190, 139, 190, 209, 79, 125, 189, 84, 75, 123, 58, 82, 250, 23, 190, 246, 130, 176, 62, 28, 85, 222, 188, 0, 41, 125, 61, 89, 100, 38, 190, 94, 101, 39, 61, 3, 236, 188, 187, 190, 151, 58, 190, 10, 35, 170, 62, 4, 97, 137, 189, 51, 60, 195, 62, 15, 249, 169, 190, 18, 3, 66, 62, 92, 241, 4, 190, 68, 136, 185, 191, 45, 216, 220, 62, 180, 55, 62, 62, 190, 20, 39, 190, 202, 15, 21, 191, 197, 128, 141, 61, 41, 67, 155, 191, 43, 70, 224, 60, 61, 124, 135, 188, 223, 201, 163, 62, 172, 201, 91, 189, 68, 112, 101, 190, 224, 183, 139, 190, 0, 126, 109, 62, 135, 237, 195, 61, 127, 208, 155, 189, 61, 228, 18, 189, 215, 252, 23, 191, 154, 44, 191, 62, 145, 48, 35, 61, 17, 142, 224, 189, 78, 234, 204, 189, 242, 22, 8, 61, 59, 62, 5, 61, 0, 110, 244, 60, 159, 217, 127, 61, 193, 115, 128, 62, 158, 176, 38, 62, 160, 162, 39, 61, 79, 207, 115, 62, 20, 119, 135, 62, 68, 48, 169, 189, 181, 95, 224, 189, 17, 134, 134, 189, 20, 83, 89, 188, 3, 138, 183, 189, 241, 174, 0, 61, 90, 232, 109, 189, 245, 112, 237, 189, 191, 88, 49, 190, 212, 184, 17, 190, 110, 114, 166, 189, 169, 96, 60, 61, 252, 230, 59, 187, 59, 164, 234, 189, 197, 173, 126, 59, 194, 38, 9, 62, 134, 221, 114, 189, 150, 102, 172, 189, 63, 224, 200, 59, 112, 133, 7, 190, 108, 61, 254, 189, 68, 39, 227, 61, 38, 134, 18, 190, 249, 248, 215, 189, 35, 252, 123, 61, 124, 149, 3, 62, 169, 108, 211, 188, 76, 171, 67, 190, 158, 20, 106, 188, 246, 87, 64, 189, 9, 234, 215, 189, 59, 64, 156, 61, 242, 13, 166, 61, 201, 81, 247, 190, 127, 221, 230, 62, 86, 83, 195, 61, 179, 161, 175, 190, 15, 59, 134, 62, 35, 7, 164, 60, 35, 109, 189, 187, 169, 61, 199, 62, 197, 205, 115, 62, 202, 148, 88, 191, 183, 128, 73, 191, 109, 147, 62, 191, 206, 253, 135, 190, 104, 64, 146, 190, 7, 242, 26, 62, 27, 177, 227, 190, 122, 22, 220, 189, 121, 252, 230, 190, 218, 196, 182, 190, 191, 160, 16, 62, 247, 91, 61, 189, 60, 78, 70, 189, 20, 160, 86, 190, 160, 215, 209, 189, 200, 23, 140, 60, 96, 84, 184, 189, 17, 10, 16, 61, 160, 59, 52, 190, 11, 174, 10, 62, 201, 4, 199, 189, 243, 157, 75, 189, 250, 137, 140, 190, 70, 128, 18, 191, 121, 133, 75, 62, 233, 237, 204, 62, 39, 124, 40, 191, 178, 4, 193, 188, 203, 219, 181, 61, 236, 157, 20, 190, 48, 136, 211, 62, 187, 77, 51, 62, 116, 100, 154, 190, 64, 116, 83, 190, 32, 116, 54, 191, 201, 140, 143, 188, 72, 158, 75, 62, 119, 36, 195, 61, 146, 222, 243, 190, 50, 175, 161, 190, 133, 87, 220, 190, 224, 76, 154, 190, 20, 204, 175, 190, 116, 191, 27, 190, 23, 113, 30, 189, 64, 32, 7, 191, 102, 12, 137, 189, 132, 146, 197, 190, 164, 205, 139, 190, 66, 97, 235, 59, 124, 206, 160, 62, 44, 114, 121, 189, 51, 40, 150, 190, 190, 111, 22, 63, 137, 86, 140, 60, 59, 66, 32, 191, 161, 155, 187, 62, 134, 64, 150, 61, 94, 115, 5, 190, 160, 155, 20, 62, 84, 240, 16, 188, 192, 5, 85, 61, 27, 28, 136, 62, 77, 124, 65, 62, 118, 109, 137, 191, 85, 252, 56, 191, 223, 31, 17, 191, 244, 54, 191, 188, 3, 192, 128, 190, 243, 151, 176, 61, 230, 8, 248, 190, 223, 91, 74, 190, 227, 106, 7, 61, 131, 122, 149, 61, 195, 158, 30, 190, 186, 203, 130, 60, 168, 112, 172, 189, 184, 1, 180, 189, 18, 56, 132, 189, 68, 232, 171, 188, 38, 76, 241, 187, 116, 68, 55, 61, 202, 123, 75, 190, 240, 123, 52, 62, 216, 51, 251, 189, 64, 160, 160, 61, 140, 92, 191, 190, 98, 87, 106, 62, 201, 51, 231, 61, 15, 255, 42, 62, 214, 162, 144, 62, 180, 237, 142, 62, 81, 94, 86, 62, 102, 11, 89, 189, 82, 56, 182, 62, 193, 224, 57, 62, 234, 16, 242, 62, 13, 17, 208, 61, 83, 90, 65, 62, 39, 152, 164, 62, 194, 240, 80, 190, 34, 130, 192, 189, 71, 232, 12, 62, 216, 215, 105, 190, 77, 112, 162, 60, 140, 8, 132, 61, 105, 134, 187, 190, 82, 69, 206, 61, 182, 49, 48, 62, 51, 102, 140, 188, 169, 44, 5, 62, 209, 83, 159, 190, 245, 8, 40, 189, 246, 170, 6, 62, 56, 213, 228, 190, 167, 196, 43, 190, 22, 73, 243, 59, 167, 184, 78, 190, 96, 179, 13, 63, 109, 143, 189, 190, 144, 109, 199, 190, 247, 223, 5, 191, 233, 113, 32, 62, 222, 96, 15, 191, 39, 26, 177, 61, 143, 107, 203, 61, 51, 217, 167, 62, 94, 228, 111, 191, 240, 155, 99, 191, 107, 21, 208, 190, 187, 91, 60, 190, 254, 29, 13, 190, 45, 227, 97, 62, 20, 201, 95, 190, 202, 241, 147, 62, 8, 154, 230, 61, 11, 253, 57, 191, 76, 98, 146, 62, 122, 151, 11, 191, 13, 234, 206, 190, 241, 233, 108, 190, 64, 94, 74, 62, 127, 4, 94, 190, 3, 190, 78, 62, 54, 148, 45, 62, 215, 78, 131, 191, 95, 82, 166, 62, 210, 3, 44, 191, 114, 166, 176, 190, 189, 45, 78, 62, 135, 34, 132, 190, 143, 149, 48, 188, 120, 53, 126, 191, 143, 66, 105, 61, 35, 28, 214, 62, 190, 6, 98, 191, 94, 243, 80, 61, 147, 91, 44, 62, 163, 151, 150, 62, 241, 98, 94, 189, 157, 42, 187, 190, 45, 120, 40, 61, 138, 42, 241, 61, 98, 64, 110, 62, 201, 110, 211, 188, 238, 253, 26, 62, 47, 86, 154, 62, 123, 94, 147, 190, 126, 63, 152, 190, 136, 148, 64, 62, 24, 179, 132, 189, 170, 80, 197, 189, 171, 26, 150, 62, 77, 208, 20, 62, 61, 182, 145, 189, 227, 3, 176, 62, 120, 128, 99, 62, 86, 148, 81, 189, 165, 118, 20, 190, 155, 226, 210, 190, 61, 124, 158, 61, 46, 106, 30, 62, 226, 204, 98, 188, 68, 88, 239, 61, 31, 25, 61, 191, 212, 100, 127, 191, 239, 186, 160, 62, 117, 100, 222, 62, 152, 10, 84, 61, 188, 175, 52, 62, 3, 187, 184, 189, 128, 99, 33, 191, 140, 62, 149, 62, 177, 238, 198, 61, 102, 197, 129, 62, 169, 112, 168, 62, 118, 237, 7, 62, 9, 85, 210, 190, 132, 67, 23, 62, 195, 199, 146, 189, 189, 60, 32, 61, 240, 201, 122, 188, 146, 181, 136, 190, 206, 67, 35, 191, 113, 251, 144, 190, 150, 83, 163, 62, 60, 234, 173, 190, 56, 178, 59, 60, 93, 57, 61, 189, 98, 5, 248, 190, 7, 183, 6, 190, 75, 150, 183, 190, 119, 207, 210, 190, 201, 126, 166, 61, 20, 208, 201, 62, 213, 230, 232, 189, 222, 133, 6, 188, 104, 122, 226, 189, 26, 233, 55, 61, 116, 85, 226, 189, 171, 164, 16, 190, 75, 193, 141, 61, 23, 107, 214, 61, 226, 194, 241, 61, 226, 132, 149, 60, 217, 217, 0, 190, 116, 80, 234, 61, 160, 52, 164, 189, 153, 62, 155, 61, 228, 14, 159, 189, 144, 224, 251, 187, 115, 159, 18, 190, 173, 203, 213, 61, 132, 182, 38, 190, 153, 202, 78, 60, 224, 50, 35, 60, 126, 180, 58, 190, 193, 69, 200, 189, 77, 58, 156, 61, 49, 106, 160, 61, 101, 28, 204, 189, 148, 8, 229, 61, 182, 186, 50, 190, 65, 214, 36, 190, 128, 203, 196, 61, 238, 73, 212, 188, 43, 188, 3, 61, 149, 93, 45, 62, 162, 129, 83, 61, 46, 30, 195, 61, 49, 85, 215, 62, 252, 4, 49, 191, 223, 117, 78, 191, 126, 15, 125, 191, 23, 90, 16, 190, 189, 178, 127, 190, 56, 205, 31, 189, 15, 36, 24, 190, 168, 130, 227, 62, 6, 248, 227, 187, 44, 93, 86, 189, 192, 255, 168, 61, 44, 195, 161, 62, 46, 134, 246, 191, 15, 161, 249, 190, 49, 204, 227, 62, 178, 99, 37, 190, 252, 253, 143, 191, 71, 191, 136, 190, 42, 214, 172, 62, 167, 127, 87, 191, 104, 228, 77, 189, 35, 174, 142, 62, 4, 125, 148, 188, 133, 78, 115, 190, 168, 137, 168, 190, 73, 184, 12, 63, 157, 198, 79, 190, 217, 254, 143, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 206, 208, 61, 192, 161, 188, 189, 208, 240, 22, 190, 182, 210, 98, 62, 158, 111, 62, 189, 243, 219, 141, 62, 210, 68, 180, 62, 144, 130, 220, 62, 239, 188, 138, 62, 15, 159, 157, 62, 84, 50, 153, 189, 183, 33, 150, 61, 46, 249, 104, 61, 58, 19, 173, 189, 125, 134, 47, 190, 53, 42, 72, 62, 83, 49, 57, 62, 52, 13, 45, 190, 104, 163, 249, 189, 29, 122, 195, 189, 127, 60, 156, 61, 226, 165, 206, 61, 0, 44, 14, 190, 155, 168, 148, 62, 50, 230, 113, 62, 169, 162, 83, 62, 131, 122, 43, 61, 97, 165, 146, 62, 121, 185, 217, 62, 151, 199, 11, 62, 113, 42, 74, 190, 226, 199, 183, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {63, 208, 77, 62, 211, 231, 204, 190, 254, 146, 247, 189, 141, 56, 121, 63, 107, 81, 50, 189, 86, 195, 68, 191, 46, 48, 12, 63, 70, 71, 157, 61, 7, 63, 82, 61, 136, 117, 255, 61, 118, 225, 206, 61, 185, 141, 9, 190, 155, 53, 195, 61, 16, 128, 8, 63, 180, 120, 157, 190, 115, 0, 83, 191, 18, 26, 169, 190, 50, 24, 64, 63, 142, 46, 126, 62, 174, 64, 150, 61, 206, 152, 98, 190, 55, 188, 12, 63, 255, 93, 0, 190, 46, 212, 54, 191, 99, 197, 35, 191, 225, 186, 205, 190, 174, 102, 134, 62, 255, 25, 147, 191, 102, 97, 143, 62, 205, 99, 78, 191, 162, 56, 178, 189, 252, 54, 166, 63, 171, 20, 7, 63, 216, 66, 143, 189, 65, 202, 133, 61, 67, 93, 24, 62, 151, 109, 19, 190, 130, 95, 78, 61, 179, 153, 192, 60, 35, 81, 181, 190, 53, 253, 219, 190, 14, 143, 152, 190, 192, 243, 7, 187, 232, 40, 50, 62, 38, 158, 83, 190, 228, 13, 51, 63, 201, 160, 129, 62, 253, 167, 155, 62, 236, 237, 149, 190, 226, 116, 181, 61, 89, 137, 8, 62, 66, 1, 29, 188, 189, 193, 144, 190, 238, 85, 107, 62, 215, 127, 225, 60, 113, 19, 168, 189, 13, 52, 6, 62, 192, 143, 23, 190, 55, 144, 100, 61, 159, 39, 68, 189, 70, 99, 144, 190, 162, 124, 161, 60, 150, 16, 186, 60, 107, 47, 189, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 103, 90, 61, 152, 232, 201, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {97, 14, 2, 192, 195, 132, 148, 188, 255, 191, 160, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {131, 168, 138, 64, 230, 219, 235, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0056/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}