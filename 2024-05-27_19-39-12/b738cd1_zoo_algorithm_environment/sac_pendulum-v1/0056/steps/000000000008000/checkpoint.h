// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {42, 149, 86, 63, 187, 90, 198, 190, 239, 57, 184, 190, 146, 18, 166, 188, 249, 140, 135, 63, 119, 58, 24, 62, 240, 161, 190, 190, 31, 217, 0, 63, 159, 45, 143, 60, 79, 154, 97, 63, 146, 36, 129, 191, 117, 147, 108, 190, 179, 227, 12, 63, 126, 229, 100, 63, 137, 153, 157, 62, 193, 163, 148, 190, 115, 214, 42, 191, 102, 238, 2, 191, 12, 91, 238, 189, 247, 93, 211, 190, 212, 243, 226, 189, 206, 149, 202, 62, 178, 210, 45, 63, 178, 152, 128, 190, 27, 16, 31, 63, 216, 197, 64, 63, 209, 80, 142, 62, 102, 49, 1, 191, 233, 245, 143, 63, 9, 85, 255, 62, 220, 192, 17, 191, 69, 118, 183, 61, 177, 241, 97, 63, 82, 227, 132, 190, 213, 183, 196, 190, 62, 123, 253, 62, 121, 170, 223, 62, 73, 217, 12, 62, 227, 117, 192, 190, 54, 52, 111, 61, 121, 60, 9, 191, 89, 11, 246, 61, 10, 234, 172, 190, 191, 124, 5, 63, 78, 44, 160, 190, 174, 1, 76, 63, 10, 119, 109, 190, 202, 85, 50, 190, 134, 247, 196, 190, 18, 234, 118, 191, 124, 130, 228, 190, 99, 36, 46, 63, 39, 37, 135, 62, 181, 12, 205, 62, 124, 24, 59, 191, 186, 204, 49, 191, 53, 157, 26, 62, 124, 108, 89, 63, 240, 24, 59, 62, 36, 210, 226, 62, 30, 64, 252, 190, 178, 94, 183, 190, 148, 67, 17, 191, 134, 19, 161, 62, 164, 238, 61, 63, 144, 195, 145, 190, 163, 254, 193, 62, 195, 122, 79, 191, 186, 114, 83, 62, 233, 118, 18, 191, 192, 55, 38, 190, 236, 140, 32, 191, 63, 11, 216, 62, 100, 123, 28, 191, 111, 185, 175, 62, 143, 39, 238, 62, 155, 52, 53, 191, 224, 1, 50, 190, 222, 143, 145, 62, 176, 238, 54, 63, 234, 243, 27, 62, 26, 198, 130, 188, 34, 21, 41, 190, 113, 84, 136, 62, 212, 160, 36, 63, 100, 133, 96, 63, 150, 252, 5, 63, 92, 47, 4, 191, 74, 48, 22, 63, 163, 110, 80, 190, 226, 223, 10, 59, 101, 70, 221, 190, 36, 207, 188, 62, 127, 217, 102, 61, 24, 186, 204, 188, 39, 158, 15, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 217, 113, 191, 18, 223, 107, 61, 66, 102, 238, 62, 219, 126, 98, 190, 217, 215, 209, 190, 106, 70, 211, 62, 179, 89, 66, 191, 60, 99, 240, 62, 150, 98, 215, 62, 239, 151, 200, 190, 211, 80, 21, 191, 239, 243, 43, 191, 137, 164, 112, 62, 213, 135, 34, 62, 233, 95, 109, 62, 142, 214, 195, 190, 168, 58, 96, 190, 27, 19, 99, 191, 167, 180, 6, 63, 139, 122, 64, 62, 213, 233, 173, 190, 231, 31, 233, 61, 176, 152, 180, 62, 126, 156, 203, 190, 255, 116, 114, 62, 167, 144, 112, 62, 26, 57, 201, 62, 13, 146, 84, 188, 123, 248, 84, 61, 199, 3, 173, 190, 19, 187, 28, 189, 192, 44, 195, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 17, 165, 190, 187, 228, 210, 189, 71, 82, 50, 190, 219, 119, 220, 61, 173, 79, 27, 189, 127, 190, 157, 62, 99, 195, 89, 190, 59, 54, 153, 189, 39, 21, 217, 188, 68, 173, 34, 190, 73, 65, 33, 190, 114, 253, 148, 61, 67, 223, 79, 189, 196, 146, 134, 62, 96, 181, 0, 190, 166, 125, 238, 189, 0, 56, 69, 189, 135, 158, 146, 190, 137, 195, 47, 61, 72, 165, 4, 59, 42, 177, 148, 61, 109, 145, 2, 190, 169, 180, 142, 62, 147, 16, 59, 190, 31, 133, 190, 61, 57, 167, 141, 60, 169, 54, 49, 60, 139, 24, 155, 189, 156, 203, 103, 190, 9, 98, 66, 190, 117, 77, 99, 62, 26, 202, 53, 190, 5, 249, 26, 62, 152, 162, 225, 190, 146, 196, 177, 189, 153, 140, 219, 188, 179, 148, 33, 62, 162, 255, 237, 61, 144, 188, 229, 190, 56, 98, 57, 62, 184, 120, 3, 61, 231, 128, 106, 190, 103, 199, 88, 190, 192, 11, 124, 190, 78, 89, 154, 190, 63, 37, 110, 62, 14, 206, 10, 62, 12, 110, 187, 189, 28, 197, 81, 62, 159, 111, 160, 62, 145, 121, 49, 62, 188, 6, 73, 62, 129, 100, 88, 62, 62, 228, 128, 190, 18, 193, 157, 189, 90, 22, 19, 60, 68, 90, 132, 62, 228, 254, 116, 62, 205, 97, 246, 189, 84, 51, 3, 190, 33, 216, 90, 62, 8, 198, 29, 191, 131, 112, 218, 62, 49, 94, 16, 188, 3, 44, 92, 189, 53, 253, 196, 189, 33, 22, 29, 190, 58, 224, 37, 190, 145, 54, 50, 190, 64, 39, 165, 189, 180, 175, 43, 190, 93, 127, 168, 189, 68, 109, 14, 189, 91, 150, 1, 60, 247, 252, 79, 187, 220, 253, 64, 61, 236, 82, 128, 189, 94, 69, 15, 62, 52, 69, 16, 61, 77, 252, 6, 62, 51, 19, 40, 62, 42, 66, 23, 190, 37, 120, 10, 61, 92, 30, 139, 60, 131, 38, 211, 61, 83, 70, 76, 61, 46, 182, 164, 189, 177, 226, 160, 189, 50, 16, 21, 190, 88, 224, 174, 58, 70, 155, 25, 62, 118, 53, 3, 189, 252, 111, 156, 61, 216, 12, 111, 61, 17, 222, 5, 62, 149, 32, 32, 190, 98, 83, 61, 187, 80, 184, 193, 61, 216, 44, 200, 61, 226, 147, 26, 62, 168, 197, 221, 190, 80, 129, 224, 188, 146, 169, 47, 189, 89, 183, 53, 190, 140, 154, 48, 190, 5, 249, 243, 189, 186, 230, 100, 61, 251, 185, 131, 189, 160, 76, 49, 60, 44, 106, 78, 191, 220, 129, 52, 62, 144, 5, 43, 62, 69, 204, 34, 191, 81, 247, 166, 190, 175, 128, 43, 62, 192, 39, 132, 190, 249, 80, 222, 190, 211, 105, 221, 60, 184, 7, 125, 190, 113, 29, 40, 191, 73, 56, 36, 191, 241, 52, 17, 190, 172, 193, 133, 189, 244, 77, 46, 190, 61, 246, 136, 190, 9, 42, 10, 63, 135, 34, 50, 191, 184, 85, 172, 60, 124, 38, 196, 189, 117, 9, 54, 189, 52, 209, 52, 61, 198, 239, 130, 60, 165, 153, 11, 62, 113, 247, 14, 190, 182, 167, 248, 189, 138, 169, 172, 60, 187, 82, 254, 189, 216, 74, 164, 189, 200, 95, 49, 190, 51, 139, 201, 189, 96, 157, 145, 189, 238, 75, 134, 188, 111, 210, 8, 190, 189, 139, 167, 189, 136, 195, 78, 61, 249, 250, 23, 190, 221, 69, 23, 190, 60, 177, 32, 190, 71, 122, 242, 60, 9, 145, 6, 62, 28, 16, 37, 190, 63, 10, 244, 61, 74, 121, 162, 61, 87, 135, 180, 61, 190, 11, 140, 61, 156, 136, 175, 189, 66, 68, 23, 190, 58, 245, 219, 189, 230, 164, 49, 62, 146, 212, 135, 189, 20, 151, 161, 190, 162, 79, 190, 61, 164, 64, 38, 62, 237, 104, 249, 190, 241, 115, 39, 190, 97, 157, 220, 61, 80, 35, 7, 60, 68, 243, 166, 62, 76, 54, 146, 188, 0, 33, 152, 191, 47, 168, 69, 191, 177, 62, 23, 191, 255, 234, 227, 189, 14, 77, 209, 61, 71, 156, 175, 62, 226, 33, 25, 191, 53, 64, 107, 187, 21, 145, 187, 188, 5, 181, 95, 62, 150, 64, 30, 190, 74, 231, 77, 62, 174, 72, 123, 190, 136, 226, 17, 190, 231, 207, 164, 189, 162, 57, 129, 190, 114, 49, 58, 190, 37, 243, 136, 189, 182, 94, 101, 61, 151, 141, 31, 190, 104, 151, 164, 190, 146, 252, 200, 62, 166, 238, 9, 191, 97, 207, 83, 61, 43, 58, 39, 190, 107, 52, 16, 62, 218, 194, 191, 62, 67, 167, 25, 191, 207, 97, 182, 188, 52, 172, 143, 189, 42, 195, 135, 190, 163, 228, 33, 188, 166, 186, 132, 62, 149, 172, 213, 61, 120, 181, 51, 57, 52, 33, 168, 61, 224, 73, 235, 189, 92, 42, 159, 189, 255, 241, 218, 61, 66, 236, 235, 189, 1, 129, 219, 190, 130, 244, 179, 62, 202, 59, 6, 190, 22, 243, 252, 189, 102, 184, 128, 189, 167, 190, 28, 62, 31, 201, 34, 190, 98, 0, 226, 188, 173, 39, 153, 62, 126, 236, 160, 61, 37, 80, 193, 189, 54, 107, 202, 189, 87, 121, 188, 189, 37, 123, 194, 190, 72, 150, 177, 62, 6, 217, 11, 190, 248, 142, 175, 61, 212, 247, 70, 62, 159, 180, 86, 62, 153, 114, 204, 190, 221, 2, 151, 189, 118, 156, 178, 189, 134, 116, 187, 61, 217, 17, 176, 60, 122, 99, 30, 190, 144, 22, 50, 61, 86, 123, 141, 62, 229, 201, 63, 61, 42, 87, 1, 186, 132, 184, 161, 189, 11, 76, 215, 61, 247, 80, 252, 189, 59, 167, 77, 61, 243, 50, 131, 61, 247, 215, 56, 62, 238, 113, 188, 189, 194, 27, 15, 62, 227, 217, 175, 62, 68, 180, 75, 61, 195, 218, 243, 61, 35, 123, 182, 61, 242, 36, 104, 60, 70, 78, 185, 59, 121, 177, 154, 189, 106, 249, 147, 189, 251, 63, 41, 190, 128, 61, 167, 60, 130, 49, 7, 191, 170, 245, 127, 190, 151, 96, 120, 188, 31, 89, 19, 62, 15, 147, 19, 191, 108, 58, 15, 191, 113, 19, 130, 190, 70, 186, 132, 62, 229, 228, 11, 62, 105, 94, 2, 189, 210, 6, 136, 188, 134, 80, 57, 62, 151, 105, 15, 62, 63, 173, 245, 60, 226, 175, 9, 190, 122, 252, 2, 189, 12, 43, 200, 190, 152, 30, 126, 189, 235, 208, 59, 62, 75, 219, 1, 62, 64, 100, 141, 190, 225, 90, 9, 62, 244, 184, 253, 60, 99, 24, 17, 191, 44, 252, 239, 189, 55, 149, 191, 189, 42, 219, 255, 61, 196, 162, 213, 61, 8, 179, 226, 189, 243, 173, 67, 61, 133, 4, 119, 190, 98, 86, 68, 188, 134, 82, 20, 189, 89, 236, 153, 190, 89, 205, 200, 61, 143, 246, 210, 62, 195, 90, 11, 191, 225, 203, 42, 62, 22, 69, 39, 189, 32, 33, 215, 60, 154, 12, 122, 62, 239, 210, 144, 190, 61, 244, 130, 61, 92, 126, 247, 61, 125, 103, 205, 61, 169, 149, 95, 62, 169, 112, 36, 62, 15, 181, 1, 62, 16, 250, 149, 60, 45, 83, 43, 190, 59, 76, 19, 61, 148, 174, 61, 62, 100, 222, 111, 189, 179, 117, 80, 62, 252, 67, 184, 61, 205, 80, 97, 190, 121, 66, 152, 61, 92, 144, 239, 61, 39, 230, 185, 59, 111, 170, 180, 189, 59, 204, 9, 190, 59, 230, 210, 61, 250, 185, 153, 190, 197, 26, 159, 60, 4, 136, 226, 189, 137, 107, 160, 189, 189, 168, 0, 190, 37, 207, 31, 62, 57, 34, 148, 189, 236, 205, 26, 61, 45, 4, 185, 61, 3, 14, 38, 190, 48, 4, 11, 62, 210, 11, 181, 60, 103, 200, 2, 62, 39, 207, 65, 189, 166, 119, 233, 189, 162, 223, 120, 189, 17, 237, 39, 190, 130, 170, 243, 189, 23, 0, 44, 61, 25, 143, 53, 61, 5, 130, 13, 190, 236, 114, 136, 189, 123, 43, 109, 61, 73, 226, 35, 190, 116, 48, 24, 189, 254, 0, 137, 61, 33, 220, 139, 188, 194, 137, 237, 189, 120, 244, 213, 61, 146, 195, 247, 189, 92, 60, 228, 189, 80, 245, 55, 57, 70, 202, 174, 61, 80, 65, 241, 188, 48, 231, 145, 189, 100, 129, 0, 62, 120, 209, 3, 190, 104, 155, 26, 190, 192, 100, 1, 190, 247, 141, 67, 61, 57, 73, 28, 190, 49, 159, 217, 189, 136, 191, 255, 189, 119, 96, 236, 189, 183, 30, 227, 61, 123, 8, 130, 189, 245, 137, 201, 189, 171, 11, 116, 188, 229, 64, 249, 188, 43, 147, 14, 190, 109, 247, 155, 61, 145, 42, 169, 61, 186, 230, 8, 190, 88, 27, 16, 190, 122, 85, 14, 61, 145, 100, 17, 189, 32, 6, 17, 190, 80, 192, 44, 190, 199, 119, 240, 61, 35, 212, 255, 189, 172, 17, 141, 189, 65, 22, 31, 190, 34, 187, 236, 189, 136, 161, 6, 61, 67, 185, 52, 190, 206, 35, 163, 61, 68, 92, 45, 62, 26, 196, 158, 61, 97, 17, 73, 62, 108, 237, 36, 62, 12, 126, 74, 61, 254, 134, 4, 62, 12, 204, 223, 61, 89, 245, 146, 189, 159, 156, 77, 62, 220, 247, 141, 62, 57, 190, 166, 61, 227, 154, 120, 189, 226, 202, 244, 188, 151, 253, 175, 190, 74, 221, 197, 189, 230, 115, 62, 62, 85, 7, 14, 62, 164, 60, 117, 62, 203, 18, 164, 189, 22, 186, 1, 190, 243, 195, 245, 60, 59, 151, 79, 62, 204, 34, 108, 62, 178, 28, 3, 61, 53, 23, 113, 190, 97, 74, 32, 62, 126, 97, 108, 62, 177, 100, 59, 190, 46, 66, 35, 189, 84, 34, 249, 61, 164, 231, 192, 190, 210, 80, 42, 62, 39, 78, 221, 62, 149, 222, 152, 190, 197, 184, 185, 190, 111, 73, 139, 62, 65, 120, 146, 190, 16, 85, 10, 189, 157, 188, 62, 62, 204, 246, 175, 188, 110, 172, 50, 189, 133, 32, 50, 190, 162, 129, 228, 188, 80, 71, 165, 61, 206, 110, 172, 62, 197, 192, 112, 62, 168, 134, 126, 190, 187, 252, 246, 62, 120, 240, 40, 189, 248, 233, 20, 190, 249, 133, 11, 191, 56, 33, 31, 190, 200, 85, 102, 190, 150, 40, 102, 188, 122, 5, 15, 61, 17, 100, 226, 61, 226, 31, 49, 62, 92, 11, 31, 62, 87, 20, 85, 190, 223, 203, 159, 62, 144, 101, 2, 191, 13, 163, 29, 62, 91, 183, 239, 62, 172, 179, 31, 62, 243, 35, 118, 188, 169, 74, 228, 189, 186, 114, 16, 191, 43, 198, 32, 191, 16, 7, 164, 62, 193, 148, 169, 189, 39, 151, 187, 60, 198, 86, 166, 62, 50, 230, 3, 62, 101, 31, 238, 189, 162, 198, 252, 189, 148, 56, 37, 61, 106, 174, 112, 62, 219, 140, 195, 187, 216, 204, 252, 61, 59, 163, 94, 190, 204, 115, 222, 189, 1, 3, 137, 62, 205, 59, 250, 190, 60, 113, 130, 62, 124, 2, 69, 190, 221, 56, 64, 62, 175, 174, 145, 61, 20, 152, 133, 189, 159, 103, 179, 61, 166, 201, 152, 190, 35, 126, 54, 61, 45, 45, 235, 61, 27, 218, 82, 62, 132, 13, 121, 190, 100, 108, 100, 62, 121, 253, 120, 189, 111, 231, 17, 190, 66, 58, 135, 190, 6, 144, 20, 62, 93, 130, 9, 191, 146, 16, 82, 61, 148, 177, 41, 62, 94, 123, 28, 190, 146, 236, 207, 61, 84, 1, 203, 190, 158, 215, 147, 191, 132, 237, 244, 190, 4, 208, 182, 190, 41, 54, 157, 190, 240, 118, 84, 61, 7, 53, 52, 62, 73, 36, 60, 191, 15, 246, 61, 62, 169, 159, 173, 189, 148, 19, 6, 62, 180, 90, 225, 190, 55, 142, 29, 61, 102, 0, 96, 190, 62, 56, 18, 189, 23, 5, 20, 62, 131, 165, 149, 190, 28, 237, 146, 188, 115, 55, 5, 191, 56, 119, 94, 62, 142, 198, 53, 190, 0, 124, 250, 189, 44, 220, 143, 62, 52, 159, 191, 190, 181, 36, 175, 190, 197, 254, 198, 190, 84, 23, 15, 62, 245, 71, 143, 190, 190, 36, 197, 189, 118, 214, 209, 189, 117, 212, 96, 62, 107, 109, 58, 62, 192, 185, 161, 62, 124, 186, 231, 190, 221, 0, 59, 190, 171, 224, 170, 190, 171, 59, 156, 190, 62, 251, 126, 62, 34, 61, 251, 61, 107, 49, 244, 189, 104, 221, 137, 61, 54, 239, 166, 189, 217, 110, 8, 186, 95, 227, 13, 62, 71, 75, 146, 61, 158, 241, 196, 60, 213, 254, 212, 188, 6, 67, 21, 62, 32, 11, 154, 62, 218, 56, 84, 62, 254, 167, 254, 61, 106, 93, 169, 61, 18, 215, 146, 61, 111, 174, 130, 190, 123, 52, 134, 62, 14, 155, 175, 190, 175, 63, 160, 62, 191, 86, 16, 191, 103, 167, 161, 190, 137, 169, 255, 62, 202, 30, 29, 191, 74, 55, 46, 190, 104, 42, 75, 62, 32, 217, 193, 190, 49, 47, 77, 190, 191, 211, 161, 190, 139, 45, 250, 188, 201, 66, 148, 190, 122, 35, 57, 190, 144, 24, 228, 62, 173, 233, 74, 190, 102, 27, 246, 61, 84, 212, 135, 188, 209, 59, 149, 190, 49, 195, 183, 61, 188, 199, 44, 62, 31, 204, 22, 60, 194, 44, 179, 189, 89, 112, 137, 62, 97, 218, 146, 61, 12, 38, 189, 62, 81, 70, 175, 59, 206, 106, 240, 61, 112, 70, 190, 61, 116, 176, 68, 190, 138, 245, 33, 61, 21, 162, 179, 61, 219, 225, 49, 190, 94, 96, 174, 61, 77, 254, 43, 190, 90, 49, 79, 61, 218, 192, 195, 189, 82, 110, 146, 61, 51, 142, 38, 189, 239, 106, 201, 186, 66, 122, 133, 188, 98, 255, 137, 61, 81, 7, 147, 188, 30, 139, 13, 62, 145, 245, 75, 190, 205, 198, 189, 189, 35, 14, 205, 188, 2, 105, 125, 189, 41, 87, 200, 60, 80, 177, 32, 190, 153, 221, 232, 60, 52, 196, 107, 189, 189, 61, 205, 61, 98, 63, 223, 61, 3, 58, 37, 190, 51, 162, 64, 190, 105, 119, 224, 189, 223, 109, 187, 189, 123, 166, 116, 189, 216, 89, 28, 190, 165, 31, 212, 189, 178, 93, 155, 189, 238, 72, 141, 61, 186, 238, 203, 61, 192, 93, 221, 61, 234, 188, 12, 62, 232, 191, 65, 190, 6, 131, 151, 61, 41, 57, 38, 190, 24, 172, 239, 61, 156, 236, 3, 190, 230, 188, 117, 61, 174, 15, 139, 61, 185, 22, 11, 190, 217, 170, 167, 60, 161, 102, 236, 61, 214, 100, 10, 190, 227, 102, 148, 189, 134, 109, 247, 61, 18, 213, 239, 189, 117, 64, 120, 61, 244, 151, 105, 61, 206, 47, 31, 188, 164, 210, 61, 188, 129, 251, 117, 188, 225, 79, 157, 189, 69, 96, 40, 190, 78, 90, 10, 62, 153, 147, 9, 62, 26, 111, 5, 190, 250, 62, 18, 190, 100, 206, 191, 189, 145, 35, 172, 188, 14, 145, 22, 61, 89, 245, 140, 61, 4, 25, 150, 189, 125, 211, 18, 190, 127, 158, 252, 190, 55, 230, 189, 188, 59, 47, 197, 188, 36, 92, 148, 190, 38, 153, 203, 61, 232, 13, 190, 188, 81, 187, 220, 61, 93, 36, 152, 62, 106, 67, 185, 62, 222, 43, 189, 189, 96, 114, 85, 189, 33, 107, 10, 190, 248, 168, 247, 189, 69, 212, 196, 61, 11, 123, 217, 61, 90, 70, 81, 190, 97, 194, 178, 61, 163, 18, 24, 189, 45, 227, 235, 189, 212, 189, 203, 62, 157, 9, 32, 61, 139, 214, 187, 60, 49, 239, 160, 189, 13, 198, 167, 61, 17, 38, 162, 61, 20, 181, 115, 189, 221, 78, 162, 62, 129, 132, 18, 189, 239, 215, 197, 62, 192, 100, 212, 190, 40, 70, 63, 62, 89, 33, 31, 190, 10, 168, 103, 191, 83, 166, 97, 61, 111, 149, 4, 62, 0, 186, 106, 55, 51, 185, 168, 190, 57, 255, 203, 61, 149, 117, 66, 191, 229, 17, 93, 61, 99, 75, 75, 190, 204, 51, 10, 62, 116, 168, 235, 189, 95, 122, 52, 190, 208, 137, 104, 190, 127, 201, 135, 62, 137, 166, 207, 61, 3, 82, 163, 61, 64, 5, 127, 61, 31, 27, 183, 190, 200, 24, 187, 62, 190, 205, 136, 189, 43, 247, 17, 190, 244, 170, 94, 189, 231, 106, 252, 61, 90, 147, 20, 59, 243, 64, 7, 61, 155, 246, 22, 62, 209, 223, 240, 61, 45, 192, 13, 62, 231, 198, 246, 188, 23, 11, 130, 62, 110, 78, 122, 62, 71, 106, 237, 189, 181, 95, 224, 189, 36, 171, 149, 189, 252, 28, 148, 188, 165, 104, 134, 189, 219, 113, 110, 60, 16, 79, 154, 189, 245, 112, 237, 189, 191, 88, 49, 190, 172, 63, 0, 190, 16, 201, 160, 189, 23, 31, 122, 61, 15, 82, 3, 60, 59, 164, 234, 189, 171, 251, 242, 60, 194, 38, 9, 62, 134, 221, 114, 189, 15, 98, 179, 189, 144, 47, 140, 59, 64, 196, 230, 189, 28, 124, 207, 189, 68, 39, 227, 61, 38, 134, 18, 190, 85, 72, 164, 189, 35, 252, 123, 61, 91, 144, 27, 62, 225, 29, 116, 187, 206, 61, 57, 190, 133, 222, 8, 59, 143, 83, 10, 189, 9, 234, 215, 189, 50, 113, 199, 61, 67, 31, 204, 61, 65, 148, 169, 190, 59, 238, 92, 62, 145, 138, 70, 61, 191, 47, 141, 190, 21, 64, 122, 62, 116, 247, 151, 61, 12, 124, 157, 189, 16, 81, 201, 62, 208, 125, 59, 62, 33, 225, 255, 190, 135, 144, 227, 190, 252, 113, 51, 191, 29, 255, 135, 190, 253, 206, 21, 190, 212, 91, 33, 62, 236, 200, 205, 190, 202, 28, 16, 58, 160, 200, 2, 191, 210, 222, 143, 61, 45, 125, 27, 62, 21, 95, 29, 61, 206, 228, 120, 189, 79, 64, 79, 190, 26, 2, 11, 189, 86, 5, 101, 61, 113, 38, 129, 189, 14, 235, 114, 188, 185, 198, 79, 190, 216, 80, 194, 61, 73, 251, 242, 189, 209, 213, 152, 188, 219, 191, 222, 190, 133, 196, 217, 190, 90, 206, 99, 62, 82, 4, 197, 62, 144, 173, 13, 191, 164, 240, 212, 62, 213, 233, 245, 61, 186, 86, 21, 190, 189, 63, 215, 62, 138, 101, 17, 62, 205, 136, 9, 190, 31, 92, 167, 190, 147, 135, 113, 191, 123, 162, 4, 189, 150, 20, 136, 189, 200, 246, 184, 61, 244, 251, 253, 190, 184, 97, 77, 190, 14, 85, 203, 189, 207, 23, 28, 190, 116, 149, 19, 189, 36, 170, 122, 189, 71, 68, 97, 189, 139, 236, 227, 190, 82, 69, 158, 59, 84, 161, 81, 190, 215, 191, 142, 190, 30, 52, 150, 60, 220, 176, 97, 60, 39, 191, 27, 62, 2, 20, 153, 190, 241, 65, 116, 62, 62, 221, 200, 187, 221, 208, 225, 190, 175, 79, 236, 61, 167, 212, 131, 60, 180, 79, 181, 189, 177, 22, 27, 62, 29, 202, 221, 60, 55, 37, 228, 188, 95, 67, 144, 62, 87, 204, 10, 62, 12, 174, 49, 191, 181, 35, 27, 191, 18, 27, 17, 191, 221, 49, 140, 188, 182, 172, 52, 190, 200, 1, 218, 61, 41, 74, 222, 190, 215, 26, 232, 189, 178, 206, 240, 189, 1, 127, 52, 62, 47, 88, 38, 190, 48, 83, 190, 61, 62, 241, 156, 189, 187, 98, 228, 189, 189, 144, 130, 59, 53, 133, 50, 59, 160, 214, 98, 58, 24, 116, 39, 187, 75, 239, 173, 189, 44, 204, 7, 62, 20, 146, 21, 190, 66, 208, 101, 62, 14, 250, 9, 191, 15, 188, 140, 62, 143, 123, 43, 62, 76, 251, 32, 62, 149, 117, 151, 62, 134, 208, 134, 62, 13, 240, 66, 62, 42, 26, 231, 61, 20, 147, 154, 62, 62, 167, 19, 62, 166, 239, 173, 62, 78, 101, 138, 60, 248, 119, 11, 62, 183, 94, 158, 62, 102, 201, 162, 190, 16, 62, 4, 190, 159, 93, 23, 62, 19, 47, 58, 190, 91, 222, 14, 188, 61, 242, 176, 189, 227, 179, 212, 190, 144, 216, 132, 61, 25, 11, 24, 62, 119, 238, 12, 189, 163, 92, 217, 61, 108, 173, 185, 190, 150, 63, 15, 189, 207, 106, 158, 61, 100, 2, 7, 191, 128, 224, 59, 190, 26, 102, 89, 60, 95, 19, 150, 190, 20, 9, 8, 63, 24, 222, 165, 189, 241, 216, 139, 190, 32, 23, 21, 190, 195, 102, 21, 190, 40, 6, 104, 190, 42, 44, 158, 188, 60, 187, 146, 61, 83, 161, 232, 188, 63, 253, 123, 190, 125, 86, 224, 190, 134, 58, 172, 190, 225, 47, 60, 190, 248, 112, 210, 190, 146, 235, 243, 61, 119, 130, 190, 187, 82, 126, 80, 189, 186, 146, 200, 188, 172, 115, 91, 190, 162, 212, 141, 62, 137, 251, 231, 189, 152, 69, 143, 190, 131, 115, 97, 190, 6, 171, 229, 188, 130, 176, 145, 189, 99, 73, 253, 61, 76, 200, 4, 190, 128, 195, 165, 190, 22, 181, 199, 62, 94, 158, 0, 190, 202, 84, 213, 190, 53, 185, 176, 62, 78, 80, 69, 189, 9, 104, 115, 60, 199, 181, 16, 191, 97, 66, 146, 61, 90, 107, 214, 62, 160, 86, 40, 191, 161, 118, 121, 61, 235, 143, 183, 61, 41, 137, 118, 62, 253, 205, 109, 189, 78, 12, 91, 190, 211, 59, 170, 61, 67, 5, 18, 62, 78, 103, 91, 62, 45, 141, 73, 189, 157, 86, 9, 62, 98, 163, 134, 62, 80, 43, 71, 190, 68, 196, 225, 189, 79, 113, 182, 61, 187, 46, 167, 189, 75, 37, 187, 189, 64, 53, 139, 62, 127, 26, 245, 61, 198, 17, 88, 189, 179, 15, 166, 62, 208, 24, 80, 62, 68, 18, 166, 189, 45, 2, 26, 190, 107, 132, 173, 190, 124, 171, 26, 62, 63, 213, 248, 61, 184, 245, 71, 60, 212, 238, 56, 62, 115, 114, 16, 191, 105, 253, 9, 191, 181, 53, 60, 62, 37, 33, 100, 62, 200, 39, 137, 189, 36, 245, 139, 61, 68, 163, 193, 190, 211, 8, 4, 191, 231, 221, 146, 62, 140, 148, 148, 61, 226, 205, 74, 62, 63, 229, 160, 61, 50, 62, 182, 61, 92, 102, 185, 190, 8, 223, 8, 190, 195, 103, 37, 190, 151, 71, 249, 189, 161, 199, 20, 189, 210, 146, 108, 190, 118, 249, 192, 190, 90, 127, 191, 190, 123, 104, 127, 62, 129, 53, 209, 189, 77, 44, 28, 189, 91, 212, 24, 190, 96, 255, 139, 190, 218, 105, 5, 190, 115, 175, 196, 190, 192, 4, 217, 190, 66, 24, 164, 61, 43, 145, 199, 62, 213, 230, 232, 189, 222, 133, 6, 188, 104, 122, 226, 189, 26, 233, 55, 61, 116, 85, 226, 189, 171, 164, 16, 190, 75, 193, 141, 61, 23, 107, 214, 61, 226, 194, 241, 61, 226, 132, 149, 60, 217, 217, 0, 190, 116, 80, 234, 61, 160, 52, 164, 189, 153, 62, 155, 61, 228, 14, 159, 189, 144, 224, 251, 187, 115, 159, 18, 190, 173, 203, 213, 61, 132, 182, 38, 190, 153, 202, 78, 60, 224, 50, 35, 60, 126, 180, 58, 190, 193, 69, 200, 189, 77, 58, 156, 61, 49, 106, 160, 61, 101, 28, 204, 189, 148, 8, 229, 61, 182, 186, 50, 190, 65, 214, 36, 190, 128, 203, 196, 61, 238, 73, 212, 188, 43, 188, 3, 61, 251, 19, 54, 189, 167, 67, 138, 62, 6, 71, 2, 62, 202, 0, 198, 62, 46, 217, 231, 190, 197, 144, 229, 190, 74, 180, 43, 190, 20, 197, 16, 190, 184, 35, 116, 190, 248, 67, 5, 188, 41, 11, 192, 189, 33, 240, 0, 63, 20, 57, 138, 60, 31, 108, 180, 189, 94, 48, 13, 190, 170, 3, 161, 62, 134, 35, 125, 191, 116, 190, 164, 190, 194, 26, 251, 62, 38, 182, 38, 190, 214, 197, 139, 191, 204, 207, 128, 190, 244, 163, 174, 62, 103, 227, 108, 191, 189, 217, 115, 189, 103, 178, 132, 62, 100, 58, 124, 60, 194, 18, 94, 190, 70, 30, 131, 190, 174, 97, 153, 62, 229, 221, 72, 190, 138, 243, 7, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {48, 133, 98, 60, 249, 151, 24, 189, 208, 240, 22, 190, 118, 252, 18, 62, 158, 111, 62, 189, 70, 122, 151, 62, 231, 98, 160, 62, 255, 155, 202, 62, 2, 83, 84, 62, 100, 41, 135, 62, 84, 50, 153, 189, 183, 33, 150, 61, 108, 182, 142, 61, 158, 47, 222, 188, 230, 153, 57, 190, 55, 157, 35, 62, 172, 144, 43, 62, 149, 29, 150, 189, 23, 130, 2, 190, 126, 210, 183, 189, 36, 242, 246, 61, 175, 135, 202, 61, 83, 71, 228, 189, 132, 175, 147, 62, 218, 242, 103, 62, 242, 128, 61, 62, 186, 146, 73, 60, 141, 167, 42, 62, 182, 111, 198, 62, 134, 109, 219, 61, 113, 42, 74, 190, 175, 237, 172, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {187, 124, 34, 62, 157, 214, 200, 190, 254, 146, 247, 189, 107, 210, 31, 63, 107, 81, 50, 189, 114, 82, 82, 191, 245, 207, 238, 62, 121, 158, 182, 61, 250, 19, 245, 60, 28, 71, 213, 61, 118, 225, 206, 61, 185, 141, 9, 190, 238, 122, 20, 62, 24, 114, 9, 62, 240, 143, 188, 190, 242, 235, 11, 191, 36, 226, 174, 190, 222, 155, 13, 63, 176, 119, 247, 61, 47, 34, 151, 61, 219, 14, 115, 190, 214, 240, 140, 62, 185, 230, 18, 190, 124, 125, 46, 191, 228, 12, 22, 191, 202, 111, 210, 190, 185, 136, 150, 62, 70, 79, 18, 191, 181, 185, 71, 62, 224, 163, 16, 191, 162, 56, 178, 189, 111, 201, 130, 63, 0, 95, 218, 62, 254, 207, 145, 189, 65, 202, 133, 61, 151, 14, 157, 62, 151, 109, 19, 190, 122, 17, 44, 188, 229, 144, 180, 189, 182, 75, 163, 190, 139, 197, 191, 190, 167, 105, 110, 190, 192, 243, 7, 187, 232, 40, 50, 62, 105, 154, 240, 189, 204, 193, 13, 63, 84, 73, 226, 62, 18, 43, 208, 60, 4, 246, 142, 190, 63, 220, 66, 62, 21, 24, 227, 61, 142, 63, 35, 188, 225, 147, 83, 190, 249, 51, 176, 62, 246, 239, 255, 60, 214, 25, 211, 61, 89, 96, 65, 62, 159, 64, 214, 61, 19, 192, 24, 62, 146, 52, 219, 61, 183, 15, 116, 190, 26, 140, 89, 62, 150, 16, 186, 60, 23, 223, 17, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 236, 245, 60, 242, 7, 160, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {149, 56, 134, 63, 7, 158, 232, 63, 250, 128, 245, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {198, 7, 135, 192, 90, 109, 4, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0056/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}