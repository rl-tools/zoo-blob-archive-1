// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 132, 89, 63, 30, 93, 216, 190, 76, 125, 171, 190, 65, 40, 111, 59, 32, 243, 163, 63, 175, 17, 57, 62, 13, 168, 191, 190, 26, 66, 246, 62, 100, 53, 81, 189, 131, 54, 94, 63, 125, 171, 138, 191, 78, 107, 126, 190, 41, 25, 34, 63, 12, 152, 146, 63, 219, 93, 166, 62, 191, 158, 208, 190, 130, 103, 120, 191, 92, 6, 218, 190, 150, 169, 135, 62, 63, 68, 87, 191, 88, 148, 175, 189, 2, 148, 187, 62, 208, 38, 62, 63, 41, 85, 79, 190, 194, 11, 23, 63, 150, 66, 144, 63, 216, 229, 74, 62, 200, 217, 33, 191, 58, 175, 201, 63, 226, 162, 13, 63, 221, 140, 80, 191, 193, 244, 133, 62, 99, 156, 79, 63, 45, 53, 133, 61, 196, 44, 179, 190, 76, 181, 204, 62, 28, 105, 238, 62, 102, 19, 21, 62, 85, 115, 185, 190, 254, 251, 199, 187, 215, 45, 251, 190, 238, 151, 47, 62, 126, 145, 201, 190, 100, 177, 219, 62, 63, 3, 151, 190, 218, 6, 86, 63, 43, 161, 63, 190, 72, 25, 34, 190, 187, 146, 140, 190, 211, 98, 197, 191, 183, 232, 213, 190, 194, 133, 88, 63, 148, 69, 244, 62, 237, 245, 195, 62, 72, 133, 52, 191, 87, 19, 62, 191, 213, 83, 235, 61, 174, 194, 76, 63, 46, 206, 9, 63, 255, 124, 250, 62, 229, 138, 0, 191, 112, 131, 37, 191, 147, 81, 5, 191, 30, 202, 152, 62, 100, 204, 58, 63, 168, 132, 143, 190, 108, 44, 193, 62, 93, 95, 107, 191, 84, 54, 8, 62, 1, 91, 239, 190, 251, 195, 209, 190, 38, 106, 246, 190, 162, 90, 198, 62, 68, 251, 206, 190, 165, 64, 162, 62, 199, 140, 233, 62, 153, 89, 82, 191, 183, 149, 49, 190, 53, 64, 142, 62, 199, 231, 114, 63, 43, 203, 213, 61, 208, 231, 53, 190, 231, 129, 73, 189, 196, 32, 58, 62, 114, 25, 29, 63, 36, 234, 194, 63, 124, 174, 190, 62, 130, 80, 17, 191, 99, 140, 18, 63, 167, 200, 36, 190, 87, 98, 129, 188, 207, 238, 217, 190, 161, 244, 190, 62, 46, 70, 226, 60, 159, 100, 98, 190, 172, 107, 188, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {9, 26, 141, 191, 226, 232, 207, 58, 177, 155, 239, 62, 25, 92, 138, 190, 32, 164, 185, 190, 204, 217, 154, 62, 197, 245, 14, 191, 3, 255, 231, 62, 94, 111, 193, 62, 102, 243, 213, 60, 99, 200, 180, 190, 243, 198, 83, 191, 83, 255, 63, 62, 227, 82, 220, 61, 57, 120, 90, 62, 194, 248, 225, 190, 149, 129, 72, 190, 181, 112, 109, 191, 240, 245, 15, 63, 250, 17, 242, 61, 242, 132, 16, 191, 240, 138, 35, 61, 154, 192, 183, 62, 94, 80, 45, 191, 86, 22, 30, 62, 214, 134, 89, 62, 84, 35, 170, 62, 162, 94, 29, 190, 82, 15, 45, 61, 73, 185, 187, 190, 132, 23, 6, 189, 228, 5, 179, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 134, 75, 190, 184, 135, 40, 191, 241, 36, 7, 190, 74, 231, 87, 62, 129, 205, 237, 190, 180, 45, 145, 62, 81, 159, 69, 190, 52, 155, 150, 60, 66, 215, 171, 60, 37, 101, 245, 189, 98, 155, 229, 189, 192, 78, 143, 61, 37, 144, 37, 61, 64, 65, 157, 62, 133, 131, 48, 60, 177, 197, 107, 61, 64, 172, 118, 190, 118, 209, 199, 190, 114, 178, 4, 61, 28, 20, 156, 60, 250, 56, 24, 60, 30, 103, 50, 188, 253, 105, 153, 62, 138, 63, 120, 190, 115, 105, 218, 61, 243, 95, 136, 61, 218, 187, 31, 61, 249, 198, 217, 189, 70, 188, 169, 190, 200, 43, 2, 190, 9, 13, 86, 62, 123, 93, 96, 190, 222, 158, 15, 63, 10, 78, 216, 190, 121, 93, 82, 190, 214, 35, 5, 61, 138, 238, 127, 62, 226, 46, 42, 62, 132, 3, 211, 190, 171, 212, 24, 62, 116, 31, 243, 188, 84, 204, 135, 190, 22, 222, 64, 190, 225, 48, 78, 190, 74, 100, 154, 190, 184, 216, 139, 62, 172, 61, 254, 61, 89, 139, 46, 189, 168, 0, 164, 62, 26, 131, 167, 62, 28, 159, 55, 62, 197, 251, 56, 62, 158, 166, 137, 62, 173, 73, 135, 190, 66, 3, 128, 189, 44, 209, 149, 61, 24, 245, 140, 62, 193, 30, 135, 62, 113, 94, 61, 190, 97, 29, 226, 189, 17, 116, 104, 62, 193, 184, 17, 191, 218, 222, 237, 62, 76, 178, 96, 61, 3, 44, 92, 189, 53, 253, 196, 189, 33, 22, 29, 190, 58, 224, 37, 190, 145, 54, 50, 190, 64, 39, 165, 189, 180, 175, 43, 190, 93, 127, 168, 189, 68, 109, 14, 189, 91, 150, 1, 60, 247, 252, 79, 187, 220, 253, 64, 61, 236, 82, 128, 189, 94, 69, 15, 62, 52, 69, 16, 61, 77, 252, 6, 62, 51, 19, 40, 62, 42, 66, 23, 190, 37, 120, 10, 61, 92, 30, 139, 60, 131, 38, 211, 61, 83, 70, 76, 61, 46, 182, 164, 189, 177, 226, 160, 189, 50, 16, 21, 190, 88, 224, 174, 58, 70, 155, 25, 62, 118, 53, 3, 189, 252, 111, 156, 61, 216, 12, 111, 61, 17, 222, 5, 62, 149, 32, 32, 190, 98, 83, 61, 187, 161, 189, 29, 62, 174, 238, 9, 62, 226, 147, 26, 62, 115, 134, 15, 191, 238, 215, 57, 188, 146, 169, 47, 189, 203, 63, 55, 190, 141, 189, 108, 190, 240, 40, 239, 59, 129, 0, 116, 187, 157, 29, 132, 189, 129, 164, 58, 190, 61, 201, 92, 191, 177, 41, 67, 62, 43, 21, 9, 62, 249, 219, 84, 191, 81, 247, 166, 190, 36, 179, 97, 62, 220, 181, 250, 189, 114, 37, 44, 191, 118, 174, 49, 189, 70, 77, 13, 190, 82, 140, 72, 191, 189, 190, 29, 191, 92, 166, 45, 190, 131, 59, 23, 189, 248, 217, 129, 190, 254, 218, 112, 190, 64, 152, 21, 63, 192, 17, 67, 191, 6, 19, 28, 190, 124, 38, 196, 189, 117, 9, 54, 189, 52, 209, 52, 61, 198, 239, 130, 60, 165, 153, 11, 62, 113, 247, 14, 190, 182, 167, 248, 189, 138, 169, 172, 60, 187, 82, 254, 189, 216, 74, 164, 189, 200, 95, 49, 190, 51, 139, 201, 189, 96, 157, 145, 189, 238, 75, 134, 188, 111, 210, 8, 190, 189, 139, 167, 189, 136, 195, 78, 61, 249, 250, 23, 190, 221, 69, 23, 190, 60, 177, 32, 190, 71, 122, 242, 60, 9, 145, 6, 62, 28, 16, 37, 190, 63, 10, 244, 61, 74, 121, 162, 61, 87, 135, 180, 61, 190, 11, 140, 61, 156, 136, 175, 189, 66, 68, 23, 190, 58, 245, 219, 189, 230, 164, 49, 62, 146, 212, 135, 189, 21, 223, 182, 190, 177, 69, 94, 61, 170, 214, 214, 61, 174, 145, 195, 190, 112, 102, 163, 190, 2, 166, 5, 62, 234, 99, 99, 62, 71, 190, 149, 62, 62, 166, 168, 61, 42, 125, 208, 191, 81, 44, 129, 191, 48, 147, 23, 191, 63, 170, 224, 189, 238, 102, 46, 62, 165, 105, 166, 62, 92, 173, 61, 191, 224, 1, 255, 60, 21, 145, 187, 188, 221, 22, 135, 61, 237, 147, 127, 190, 70, 149, 98, 62, 240, 111, 131, 190, 94, 56, 179, 189, 33, 105, 125, 189, 114, 166, 144, 190, 130, 225, 1, 190, 219, 109, 42, 190, 49, 77, 227, 189, 143, 12, 225, 190, 101, 152, 151, 190, 16, 175, 1, 62, 180, 195, 99, 191, 75, 168, 103, 189, 175, 123, 236, 190, 177, 254, 236, 61, 6, 53, 214, 62, 72, 234, 87, 191, 56, 231, 235, 188, 121, 118, 85, 62, 110, 233, 130, 190, 87, 245, 75, 188, 56, 152, 123, 62, 242, 232, 99, 61, 230, 50, 127, 189, 135, 52, 172, 61, 195, 75, 238, 189, 213, 187, 133, 188, 242, 199, 212, 61, 35, 87, 69, 190, 11, 76, 31, 191, 247, 234, 181, 62, 26, 30, 22, 190, 170, 126, 226, 189, 108, 166, 171, 189, 241, 232, 36, 62, 253, 10, 36, 190, 143, 169, 212, 188, 34, 195, 172, 62, 195, 46, 129, 61, 243, 88, 251, 189, 49, 50, 54, 190, 10, 56, 62, 190, 82, 26, 207, 190, 181, 70, 141, 62, 233, 149, 64, 190, 121, 1, 165, 61, 135, 221, 107, 62, 67, 95, 55, 62, 42, 145, 209, 190, 140, 182, 145, 189, 37, 111, 117, 61, 153, 4, 22, 62, 188, 51, 230, 60, 243, 223, 20, 190, 126, 218, 14, 61, 165, 234, 152, 62, 218, 108, 136, 61, 147, 229, 94, 189, 133, 38, 10, 189, 34, 151, 233, 61, 238, 170, 40, 190, 240, 230, 254, 61, 55, 153, 227, 61, 183, 224, 44, 62, 56, 124, 199, 189, 124, 70, 50, 62, 32, 113, 163, 62, 67, 107, 22, 61, 48, 90, 172, 61, 85, 21, 194, 61, 103, 69, 138, 61, 81, 130, 78, 60, 49, 218, 215, 189, 221, 166, 205, 189, 225, 67, 54, 190, 41, 73, 159, 188, 238, 14, 86, 191, 255, 244, 124, 190, 198, 29, 245, 61, 175, 150, 152, 61, 156, 155, 35, 191, 26, 63, 47, 191, 10, 36, 10, 190, 13, 210, 91, 62, 20, 179, 235, 61, 78, 122, 53, 61, 150, 25, 82, 61, 242, 222, 95, 62, 176, 160, 120, 61, 238, 249, 143, 61, 255, 248, 141, 189, 38, 209, 176, 188, 223, 215, 211, 190, 145, 17, 4, 190, 160, 186, 181, 62, 127, 22, 27, 62, 159, 166, 7, 191, 3, 58, 110, 61, 187, 221, 72, 61, 115, 50, 90, 191, 72, 8, 181, 189, 223, 250, 208, 189, 225, 103, 205, 61, 23, 35, 39, 62, 144, 79, 199, 189, 235, 163, 188, 61, 142, 46, 70, 190, 159, 67, 200, 60, 146, 11, 146, 189, 133, 122, 18, 191, 199, 106, 234, 61, 155, 137, 201, 62, 221, 96, 82, 191, 91, 53, 11, 62, 147, 208, 213, 61, 191, 125, 131, 61, 135, 165, 103, 62, 245, 218, 183, 190, 4, 102, 135, 61, 24, 211, 24, 62, 56, 87, 219, 61, 197, 60, 95, 62, 184, 28, 40, 62, 251, 191, 32, 62, 203, 4, 126, 189, 168, 91, 189, 190, 166, 73, 22, 62, 57, 102, 44, 62, 103, 127, 190, 189, 65, 156, 92, 62, 27, 68, 211, 61, 31, 104, 134, 190, 169, 56, 145, 61, 241, 242, 249, 61, 43, 181, 11, 61, 47, 83, 126, 189, 26, 35, 95, 190, 14, 147, 153, 60, 68, 194, 138, 190, 131, 189, 193, 187, 4, 136, 226, 189, 137, 107, 160, 189, 189, 168, 0, 190, 37, 207, 31, 62, 57, 34, 148, 189, 236, 205, 26, 61, 45, 4, 185, 61, 3, 14, 38, 190, 48, 4, 11, 62, 210, 11, 181, 60, 103, 200, 2, 62, 39, 207, 65, 189, 166, 119, 233, 189, 162, 223, 120, 189, 17, 237, 39, 190, 130, 170, 243, 189, 23, 0, 44, 61, 25, 143, 53, 61, 5, 130, 13, 190, 236, 114, 136, 189, 123, 43, 109, 61, 73, 226, 35, 190, 116, 48, 24, 189, 254, 0, 137, 61, 33, 220, 139, 188, 194, 137, 237, 189, 120, 244, 213, 61, 146, 195, 247, 189, 92, 60, 228, 189, 80, 245, 55, 57, 70, 202, 174, 61, 80, 65, 241, 188, 48, 231, 145, 189, 100, 129, 0, 62, 120, 209, 3, 190, 104, 155, 26, 190, 192, 100, 1, 190, 247, 141, 67, 61, 57, 73, 28, 190, 49, 159, 217, 189, 136, 191, 255, 189, 119, 96, 236, 189, 183, 30, 227, 61, 123, 8, 130, 189, 245, 137, 201, 189, 171, 11, 116, 188, 229, 64, 249, 188, 43, 147, 14, 190, 109, 247, 155, 61, 145, 42, 169, 61, 186, 230, 8, 190, 88, 27, 16, 190, 122, 85, 14, 61, 145, 100, 17, 189, 32, 6, 17, 190, 80, 192, 44, 190, 199, 119, 240, 61, 35, 212, 255, 189, 172, 17, 141, 189, 65, 22, 31, 190, 34, 187, 236, 189, 136, 161, 6, 61, 67, 185, 52, 190, 206, 35, 163, 61, 146, 12, 250, 61, 245, 83, 29, 61, 23, 202, 59, 62, 193, 226, 223, 61, 242, 117, 200, 61, 144, 156, 222, 61, 49, 23, 67, 62, 98, 111, 29, 189, 76, 158, 89, 62, 195, 20, 194, 62, 231, 22, 21, 62, 8, 131, 140, 61, 88, 141, 241, 188, 92, 227, 216, 190, 85, 52, 165, 189, 248, 186, 62, 62, 240, 181, 133, 61, 2, 40, 250, 62, 147, 175, 10, 188, 133, 55, 9, 190, 247, 124, 154, 59, 96, 138, 96, 62, 45, 255, 57, 62, 71, 230, 4, 58, 109, 218, 139, 190, 9, 195, 233, 61, 119, 140, 145, 62, 223, 132, 233, 189, 245, 221, 73, 189, 206, 149, 130, 61, 56, 202, 190, 190, 190, 52, 231, 61, 56, 151, 9, 63, 111, 135, 167, 191, 125, 1, 178, 190, 156, 52, 111, 62, 79, 193, 123, 191, 149, 90, 176, 189, 33, 52, 20, 190, 127, 7, 156, 61, 106, 182, 214, 189, 149, 87, 44, 190, 85, 230, 10, 61, 204, 71, 8, 62, 58, 67, 203, 62, 106, 100, 82, 62, 143, 123, 66, 190, 74, 194, 26, 63, 158, 118, 112, 190, 156, 119, 49, 190, 230, 245, 43, 191, 240, 13, 129, 189, 233, 255, 109, 190, 248, 190, 179, 61, 0, 96, 80, 59, 119, 95, 226, 61, 212, 170, 45, 62, 102, 8, 206, 61, 88, 47, 113, 190, 137, 5, 160, 62, 170, 99, 37, 191, 144, 88, 119, 62, 105, 157, 244, 62, 217, 207, 41, 62, 166, 126, 5, 189, 172, 173, 84, 189, 181, 218, 229, 190, 154, 69, 39, 191, 156, 99, 176, 62, 210, 226, 183, 189, 184, 159, 226, 187, 204, 148, 166, 62, 219, 210, 34, 62, 237, 185, 155, 189, 214, 159, 225, 189, 65, 207, 161, 60, 244, 100, 111, 62, 130, 183, 68, 189, 178, 135, 1, 62, 57, 66, 75, 190, 123, 123, 129, 190, 40, 78, 64, 62, 230, 50, 243, 190, 118, 123, 128, 62, 252, 73, 166, 190, 191, 207, 44, 62, 186, 1, 105, 61, 17, 161, 56, 190, 145, 239, 138, 61, 193, 118, 158, 190, 104, 163, 202, 61, 235, 62, 207, 61, 145, 117, 124, 62, 7, 163, 150, 190, 86, 144, 111, 62, 201, 48, 134, 186, 179, 197, 90, 190, 46, 141, 160, 190, 39, 122, 44, 62, 69, 124, 222, 190, 146, 16, 82, 61, 103, 49, 108, 62, 244, 242, 64, 60, 12, 242, 70, 61, 84, 218, 63, 191, 36, 189, 202, 191, 2, 54, 9, 191, 64, 229, 105, 190, 135, 113, 166, 190, 99, 176, 197, 62, 57, 222, 67, 62, 18, 175, 143, 191, 66, 102, 146, 62, 153, 118, 180, 189, 182, 173, 42, 62, 209, 224, 247, 190, 209, 143, 170, 61, 193, 66, 119, 190, 224, 238, 133, 62, 222, 8, 63, 62, 20, 64, 244, 187, 29, 183, 245, 60, 250, 197, 118, 191, 216, 59, 167, 62, 111, 234, 171, 190, 162, 197, 224, 188, 66, 88, 208, 62, 160, 219, 182, 190, 22, 89, 255, 190, 33, 67, 133, 190, 204, 97, 48, 62, 241, 221, 170, 190, 76, 27, 173, 60, 121, 39, 223, 189, 88, 108, 227, 62, 175, 176, 67, 62, 138, 132, 174, 62, 171, 16, 53, 191, 91, 109, 112, 190, 234, 160, 199, 190, 126, 123, 151, 190, 107, 195, 131, 62, 188, 214, 253, 61, 167, 61, 18, 190, 27, 16, 33, 61, 209, 65, 132, 61, 194, 149, 54, 189, 78, 168, 14, 62, 161, 158, 109, 60, 137, 217, 44, 61, 182, 171, 192, 60, 103, 39, 209, 61, 162, 224, 159, 62, 90, 203, 88, 62, 54, 179, 35, 62, 94, 214, 136, 61, 10, 22, 239, 61, 50, 146, 76, 190, 136, 140, 140, 62, 135, 138, 143, 190, 197, 9, 226, 62, 22, 97, 14, 191, 52, 72, 157, 190, 216, 226, 226, 62, 173, 107, 142, 191, 84, 201, 186, 190, 32, 77, 22, 62, 217, 149, 234, 190, 54, 56, 70, 190, 66, 216, 180, 190, 171, 128, 164, 188, 246, 91, 137, 190, 150, 162, 141, 190, 50, 222, 207, 62, 166, 154, 16, 190, 229, 239, 119, 61, 168, 47, 146, 190, 89, 204, 215, 190, 251, 136, 0, 60, 149, 235, 72, 62, 58, 23, 141, 61, 235, 41, 248, 189, 235, 5, 95, 62, 46, 48, 218, 61, 94, 230, 180, 62, 154, 92, 154, 189, 239, 55, 93, 61, 15, 102, 214, 61, 10, 97, 126, 190, 132, 12, 69, 60, 168, 120, 244, 61, 101, 74, 29, 190, 154, 187, 173, 190, 2, 195, 82, 189, 190, 185, 254, 61, 246, 222, 191, 190, 24, 217, 31, 62, 65, 83, 25, 190, 239, 106, 201, 186, 46, 88, 71, 62, 33, 58, 29, 62, 205, 3, 171, 59, 80, 75, 2, 62, 95, 248, 81, 190, 149, 176, 22, 188, 72, 109, 146, 189, 196, 222, 104, 60, 202, 140, 62, 190, 31, 215, 140, 190, 91, 246, 157, 60, 13, 77, 184, 189, 19, 157, 12, 62, 95, 92, 132, 61, 103, 125, 116, 61, 224, 151, 132, 190, 231, 98, 14, 190, 195, 82, 248, 189, 4, 33, 172, 190, 229, 88, 109, 189, 113, 125, 230, 189, 199, 32, 69, 188, 137, 20, 7, 62, 250, 233, 147, 61, 113, 165, 174, 61, 234, 188, 12, 62, 15, 244, 65, 190, 72, 46, 145, 61, 41, 57, 38, 190, 24, 172, 239, 61, 3, 195, 4, 190, 230, 188, 117, 61, 174, 15, 139, 61, 185, 22, 11, 190, 168, 131, 128, 60, 209, 100, 218, 61, 3, 147, 10, 190, 227, 102, 148, 189, 155, 105, 242, 61, 252, 245, 239, 189, 117, 64, 120, 61, 244, 151, 105, 61, 206, 47, 31, 188, 118, 12, 162, 188, 156, 81, 119, 188, 225, 79, 157, 189, 69, 96, 40, 190, 40, 15, 8, 62, 153, 147, 9, 62, 102, 172, 7, 190, 250, 62, 18, 190, 38, 48, 192, 189, 50, 155, 190, 188, 14, 145, 22, 61, 89, 245, 140, 61, 24, 1, 157, 189, 131, 158, 22, 190, 177, 107, 39, 191, 116, 221, 49, 61, 66, 135, 185, 61, 103, 74, 240, 190, 10, 151, 21, 62, 150, 218, 133, 189, 83, 249, 202, 61, 163, 219, 152, 62, 2, 155, 186, 62, 31, 95, 6, 190, 68, 143, 171, 189, 34, 60, 46, 190, 78, 131, 10, 190, 44, 228, 16, 189, 63, 213, 23, 62, 109, 53, 137, 190, 133, 163, 212, 188, 144, 11, 84, 189, 125, 223, 72, 190, 7, 201, 182, 62, 87, 104, 106, 186, 227, 23, 70, 61, 154, 242, 41, 190, 18, 228, 120, 61, 136, 214, 22, 187, 17, 71, 48, 190, 47, 141, 171, 62, 65, 7, 169, 189, 164, 67, 202, 62, 165, 127, 168, 190, 83, 56, 12, 62, 182, 210, 36, 190, 161, 198, 166, 191, 19, 16, 159, 62, 38, 195, 31, 62, 39, 24, 17, 190, 138, 33, 44, 191, 238, 25, 132, 61, 157, 11, 145, 191, 78, 205, 55, 61, 156, 38, 86, 189, 219, 86, 107, 62, 46, 111, 92, 189, 21, 50, 61, 190, 190, 233, 112, 190, 201, 81, 123, 62, 139, 231, 218, 61, 168, 91, 1, 187, 13, 172, 176, 188, 8, 18, 11, 191, 168, 38, 184, 62, 119, 203, 46, 60, 35, 177, 237, 189, 203, 248, 135, 189, 116, 70, 74, 61, 73, 69, 15, 61, 217, 54, 42, 61, 213, 37, 204, 61, 145, 39, 98, 62, 50, 115, 50, 62, 170, 125, 112, 187, 202, 240, 113, 62, 153, 25, 142, 62, 69, 180, 159, 189, 181, 95, 224, 189, 17, 134, 134, 189, 20, 83, 89, 188, 3, 138, 183, 189, 164, 246, 9, 61, 90, 232, 109, 189, 245, 112, 237, 189, 191, 88, 49, 190, 91, 204, 15, 190, 229, 64, 150, 189, 235, 96, 92, 61, 234, 91, 35, 59, 59, 164, 234, 189, 19, 148, 74, 60, 194, 38, 9, 62, 134, 221, 114, 189, 150, 102, 172, 189, 1, 130, 30, 60, 54, 181, 253, 189, 149, 148, 240, 189, 68, 39, 227, 61, 38, 134, 18, 190, 88, 133, 201, 189, 35, 252, 123, 61, 49, 162, 10, 62, 169, 108, 211, 188, 76, 171, 67, 190, 159, 199, 26, 188, 58, 46, 53, 189, 9, 234, 215, 189, 130, 101, 173, 61, 53, 80, 181, 61, 189, 164, 235, 190, 107, 238, 202, 62, 180, 251, 196, 61, 215, 208, 169, 190, 25, 120, 143, 62, 143, 98, 114, 61, 35, 109, 189, 187, 164, 147, 201, 62, 231, 211, 112, 62, 79, 195, 87, 191, 24, 46, 72, 191, 109, 147, 62, 191, 22, 214, 134, 190, 113, 165, 105, 190, 145, 37, 44, 62, 34, 92, 231, 190, 12, 48, 91, 189, 247, 165, 0, 191, 95, 211, 85, 190, 34, 7, 32, 62, 23, 15, 13, 187, 84, 23, 68, 189, 37, 65, 78, 190, 143, 191, 131, 189, 186, 246, 31, 61, 16, 82, 170, 189, 194, 211, 207, 60, 227, 67, 54, 190, 193, 91, 10, 62, 141, 170, 159, 189, 205, 244, 233, 61, 142, 22, 122, 190, 19, 145, 17, 191, 53, 28, 107, 62, 140, 23, 209, 62, 40, 91, 34, 191, 165, 187, 194, 61, 145, 68, 219, 61, 236, 157, 20, 190, 46, 99, 207, 62, 215, 47, 40, 62, 77, 146, 26, 190, 191, 142, 2, 190, 99, 110, 55, 191, 159, 87, 252, 188, 186, 41, 59, 62, 204, 231, 197, 61, 10, 37, 3, 191, 32, 109, 151, 190, 184, 182, 183, 190, 176, 157, 79, 190, 105, 95, 130, 190, 197, 125, 8, 190, 164, 45, 81, 189, 49, 139, 26, 191, 242, 127, 93, 189, 46, 213, 165, 190, 85, 121, 149, 190, 62, 248, 112, 187, 130, 183, 162, 62, 234, 198, 19, 189, 156, 226, 149, 190, 8, 157, 26, 63, 182, 91, 208, 61, 69, 204, 25, 191, 157, 146, 146, 62, 244, 190, 117, 61, 82, 242, 236, 189, 231, 169, 34, 62, 52, 210, 156, 60, 248, 106, 93, 61, 26, 88, 137, 62, 123, 215, 60, 62, 253, 41, 159, 191, 167, 187, 62, 191, 223, 31, 17, 191, 215, 139, 177, 188, 72, 181, 89, 190, 141, 175, 191, 61, 145, 97, 249, 190, 11, 222, 41, 190, 193, 128, 33, 189, 207, 43, 126, 61, 227, 114, 18, 190, 5, 78, 69, 61, 143, 251, 176, 189, 6, 123, 169, 189, 120, 169, 22, 189, 160, 139, 54, 187, 161, 19, 131, 186, 32, 148, 3, 61, 0, 139, 75, 190, 132, 4, 47, 62, 32, 106, 235, 189, 245, 152, 87, 62, 29, 73, 183, 190, 43, 128, 91, 62, 44, 25, 178, 61, 33, 199, 19, 62, 86, 137, 146, 62, 123, 74, 121, 62, 244, 242, 66, 62, 12, 29, 100, 188, 216, 2, 179, 62, 96, 141, 46, 62, 101, 105, 211, 62, 170, 168, 174, 61, 67, 183, 106, 62, 237, 203, 166, 62, 1, 243, 89, 190, 4, 164, 217, 189, 73, 131, 20, 62, 116, 183, 108, 190, 110, 229, 52, 61, 29, 113, 44, 61, 107, 134, 195, 190, 121, 132, 154, 61, 197, 19, 48, 62, 7, 118, 11, 188, 170, 160, 225, 61, 254, 164, 161, 190, 11, 185, 13, 189, 224, 18, 249, 61, 142, 211, 228, 190, 21, 62, 58, 190, 33, 245, 255, 187, 242, 10, 82, 190, 119, 193, 11, 63, 127, 140, 183, 190, 144, 109, 199, 190, 85, 201, 224, 190, 50, 178, 15, 62, 141, 238, 11, 191, 104, 163, 171, 61, 163, 40, 220, 61, 201, 8, 131, 62, 154, 166, 65, 191, 95, 220, 81, 191, 104, 42, 228, 190, 149, 25, 118, 190, 139, 8, 61, 190, 101, 171, 126, 62, 23, 61, 98, 190, 203, 165, 111, 62, 108, 69, 227, 61, 201, 81, 51, 191, 139, 176, 160, 62, 71, 137, 218, 190, 95, 2, 187, 190, 80, 200, 149, 190, 55, 70, 71, 62, 180, 170, 64, 190, 20, 214, 75, 62, 43, 197, 27, 62, 244, 132, 83, 191, 146, 106, 144, 62, 69, 53, 28, 191, 37, 68, 179, 190, 222, 88, 101, 62, 201, 248, 103, 190, 210, 216, 214, 188, 148, 223, 120, 191, 42, 234, 51, 61, 181, 228, 213, 62, 252, 54, 104, 191, 24, 15, 6, 61, 225, 47, 49, 62, 100, 190, 142, 62, 180, 93, 132, 189, 73, 173, 192, 190, 118, 65, 36, 61, 81, 115, 249, 61, 177, 82, 104, 62, 223, 21, 58, 189, 59, 188, 12, 62, 171, 121, 152, 62, 25, 78, 145, 190, 211, 47, 145, 190, 217, 96, 24, 62, 79, 232, 164, 189, 109, 245, 229, 189, 150, 194, 144, 62, 167, 130, 16, 62, 146, 144, 167, 189, 129, 225, 170, 62, 217, 111, 99, 62, 44, 198, 120, 189, 190, 246, 29, 190, 125, 188, 211, 190, 77, 150, 152, 61, 129, 159, 8, 62, 105, 87, 247, 188, 119, 94, 25, 62, 156, 158, 46, 191, 210, 241, 71, 191, 251, 4, 169, 62, 38, 219, 179, 62, 4, 116, 213, 61, 85, 138, 109, 62, 48, 4, 135, 189, 233, 152, 32, 191, 126, 234, 160, 62, 7, 112, 187, 61, 128, 14, 110, 62, 19, 151, 182, 62, 4, 195, 233, 61, 205, 6, 182, 190, 186, 136, 36, 62, 140, 65, 212, 188, 43, 228, 229, 188, 79, 205, 255, 58, 70, 111, 146, 190, 52, 119, 10, 191, 79, 114, 137, 190, 198, 235, 153, 62, 207, 57, 128, 190, 18, 12, 190, 188, 103, 199, 5, 189, 207, 255, 188, 190, 169, 201, 10, 190, 26, 6, 212, 190, 169, 198, 211, 190, 57, 195, 132, 61, 55, 21, 192, 62, 213, 230, 232, 189, 222, 133, 6, 188, 104, 122, 226, 189, 26, 233, 55, 61, 116, 85, 226, 189, 171, 164, 16, 190, 75, 193, 141, 61, 23, 107, 214, 61, 226, 194, 241, 61, 226, 132, 149, 60, 217, 217, 0, 190, 116, 80, 234, 61, 160, 52, 164, 189, 153, 62, 155, 61, 228, 14, 159, 189, 144, 224, 251, 187, 115, 159, 18, 190, 173, 203, 213, 61, 132, 182, 38, 190, 153, 202, 78, 60, 224, 50, 35, 60, 126, 180, 58, 190, 193, 69, 200, 189, 77, 58, 156, 61, 49, 106, 160, 61, 101, 28, 204, 189, 148, 8, 229, 61, 182, 186, 50, 190, 65, 214, 36, 190, 128, 203, 196, 61, 238, 73, 212, 188, 43, 188, 3, 61, 169, 57, 10, 61, 220, 170, 130, 58, 127, 109, 239, 61, 212, 161, 231, 62, 215, 63, 46, 191, 55, 39, 38, 191, 92, 17, 57, 191, 41, 116, 4, 190, 94, 180, 115, 190, 221, 157, 72, 189, 102, 152, 8, 190, 136, 161, 232, 62, 81, 61, 128, 60, 69, 61, 28, 189, 119, 248, 161, 60, 171, 222, 172, 62, 221, 197, 213, 191, 96, 207, 238, 190, 89, 218, 245, 62, 77, 248, 23, 190, 79, 211, 144, 191, 245, 73, 131, 190, 148, 231, 188, 62, 30, 234, 88, 191, 144, 253, 246, 188, 139, 155, 158, 62, 253, 73, 225, 187, 109, 169, 111, 190, 241, 91, 160, 190, 226, 162, 13, 63, 50, 90, 79, 190, 188, 205, 162, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {217, 118, 185, 61, 77, 203, 166, 189, 208, 240, 22, 190, 21, 30, 43, 62, 158, 111, 62, 189, 0, 88, 143, 62, 156, 194, 172, 62, 212, 153, 214, 62, 77, 81, 145, 62, 109, 75, 152, 62, 84, 50, 153, 189, 183, 33, 150, 61, 56, 228, 103, 61, 182, 210, 140, 189, 189, 191, 44, 190, 174, 171, 98, 62, 176, 179, 64, 62, 156, 114, 33, 190, 141, 113, 202, 189, 93, 59, 194, 189, 108, 170, 170, 61, 42, 203, 177, 61, 117, 49, 9, 190, 123, 103, 151, 62, 228, 201, 111, 62, 253, 148, 84, 62, 190, 127, 14, 61, 186, 46, 143, 62, 38, 71, 211, 62, 191, 92, 23, 62, 113, 42, 74, 190, 209, 96, 195, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 195, 109, 62, 133, 248, 212, 190, 254, 146, 247, 189, 134, 51, 108, 63, 107, 81, 50, 189, 17, 29, 78, 191, 150, 148, 27, 63, 195, 110, 178, 61, 9, 149, 153, 61, 245, 238, 3, 62, 118, 225, 206, 61, 185, 141, 9, 190, 154, 107, 203, 61, 155, 131, 204, 62, 205, 122, 173, 190, 86, 85, 80, 191, 183, 239, 176, 190, 155, 53, 61, 63, 1, 139, 243, 61, 166, 86, 150, 61, 3, 57, 122, 190, 111, 30, 234, 62, 150, 99, 0, 190, 17, 58, 60, 191, 201, 163, 32, 191, 189, 17, 220, 190, 55, 229, 133, 62, 44, 127, 137, 191, 85, 114, 144, 62, 165, 210, 67, 191, 162, 56, 178, 189, 7, 196, 171, 63, 113, 145, 247, 62, 245, 96, 24, 189, 65, 202, 133, 61, 96, 127, 41, 62, 151, 109, 19, 190, 230, 228, 79, 60, 184, 45, 41, 188, 135, 156, 164, 190, 84, 0, 224, 190, 138, 111, 144, 190, 192, 243, 7, 187, 232, 40, 50, 62, 107, 113, 54, 190, 224, 51, 59, 63, 92, 25, 167, 62, 190, 74, 110, 62, 200, 54, 146, 190, 63, 217, 14, 62, 102, 100, 150, 61, 60, 242, 29, 188, 32, 127, 112, 190, 71, 151, 135, 62, 18, 126, 225, 60, 90, 208, 16, 187, 60, 59, 50, 62, 128, 131, 10, 189, 101, 133, 189, 61, 153, 246, 165, 188, 158, 231, 138, 190, 23, 11, 239, 61, 150, 16, 186, 60, 178, 59, 137, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 7, 45, 61, 14, 207, 187, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {111, 12, 175, 189, 17, 118, 83, 61, 8, 232, 73, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {228, 61, 154, 63, 200, 106, 128, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0056/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}