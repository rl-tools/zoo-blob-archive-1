// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 88, 167, 62, 170, 147, 147, 190, 50, 170, 223, 190, 227, 194, 25, 190, 177, 130, 25, 63, 154, 46, 14, 62, 51, 3, 111, 190, 180, 242, 4, 63, 86, 105, 125, 60, 41, 247, 52, 63, 23, 104, 70, 191, 160, 47, 154, 190, 106, 226, 253, 59, 198, 189, 32, 63, 81, 58, 144, 62, 144, 65, 181, 190, 144, 243, 217, 188, 172, 186, 2, 191, 123, 252, 151, 190, 183, 255, 119, 190, 156, 137, 158, 190, 159, 98, 153, 62, 186, 205, 71, 63, 115, 119, 29, 190, 8, 108, 184, 62, 74, 180, 35, 63, 167, 249, 103, 62, 70, 24, 0, 191, 98, 38, 184, 60, 40, 251, 198, 62, 233, 18, 33, 191, 223, 221, 24, 191, 111, 231, 14, 63, 65, 233, 0, 191, 134, 31, 129, 191, 130, 8, 36, 62, 130, 60, 45, 63, 38, 104, 115, 62, 98, 15, 170, 190, 137, 32, 108, 62, 218, 78, 1, 190, 26, 200, 188, 61, 166, 202, 197, 190, 202, 125, 71, 63, 231, 165, 110, 190, 238, 16, 16, 63, 62, 129, 8, 190, 211, 241, 131, 190, 14, 215, 131, 190, 60, 168, 21, 190, 96, 187, 193, 190, 207, 39, 198, 189, 230, 83, 29, 61, 38, 162, 235, 62, 119, 232, 28, 191, 195, 240, 12, 191, 209, 81, 212, 61, 39, 232, 8, 63, 195, 58, 113, 188, 30, 91, 241, 62, 116, 233, 230, 190, 228, 123, 2, 63, 157, 178, 158, 190, 72, 235, 171, 62, 120, 197, 62, 63, 4, 178, 143, 190, 22, 208, 60, 62, 66, 21, 49, 191, 58, 216, 234, 61, 246, 126, 189, 190, 141, 53, 144, 62, 188, 112, 237, 190, 197, 131, 17, 63, 166, 55, 198, 190, 10, 208, 136, 62, 176, 152, 66, 62, 74, 58, 233, 190, 225, 45, 165, 190, 96, 223, 62, 62, 109, 35, 232, 62, 93, 234, 176, 62, 44, 162, 1, 60, 190, 160, 10, 190, 18, 206, 132, 62, 87, 15, 208, 62, 254, 131, 191, 62, 40, 182, 12, 63, 138, 184, 140, 190, 184, 226, 187, 62, 238, 221, 252, 189, 70, 46, 84, 62, 227, 85, 4, 191, 204, 161, 101, 62, 55, 148, 83, 190, 181, 29, 223, 190, 212, 254, 109, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 174, 57, 191, 19, 253, 194, 60, 200, 200, 142, 62, 232, 114, 181, 189, 237, 10, 139, 190, 20, 30, 162, 62, 100, 69, 216, 190, 136, 220, 9, 63, 95, 139, 13, 63, 210, 170, 235, 190, 103, 214, 232, 190, 126, 236, 134, 190, 163, 13, 253, 60, 150, 164, 3, 62, 146, 248, 79, 62, 168, 41, 150, 189, 220, 229, 217, 190, 59, 210, 41, 191, 169, 216, 236, 62, 35, 30, 96, 62, 166, 51, 170, 190, 116, 251, 101, 62, 119, 242, 12, 63, 226, 192, 245, 190, 149, 170, 137, 61, 212, 151, 163, 62, 68, 114, 183, 62, 101, 2, 151, 189, 87, 118, 7, 62, 189, 95, 6, 191, 149, 98, 173, 190, 49, 68, 15, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {153, 231, 16, 190, 55, 87, 169, 60, 47, 225, 252, 189, 96, 33, 200, 60, 106, 82, 242, 61, 60, 174, 42, 62, 170, 191, 20, 190, 138, 191, 149, 188, 63, 123, 30, 189, 217, 224, 47, 188, 155, 206, 218, 189, 173, 57, 69, 61, 81, 190, 2, 189, 233, 13, 145, 61, 58, 125, 209, 188, 131, 221, 50, 190, 63, 165, 154, 189, 249, 180, 22, 190, 139, 115, 221, 189, 203, 131, 58, 189, 239, 65, 234, 61, 107, 155, 4, 189, 25, 8, 191, 61, 128, 114, 245, 189, 126, 219, 36, 189, 9, 16, 245, 189, 137, 14, 6, 62, 52, 221, 200, 189, 252, 197, 9, 190, 138, 6, 225, 188, 217, 60, 199, 61, 71, 6, 7, 190, 79, 118, 24, 190, 191, 8, 204, 61, 172, 178, 10, 62, 222, 36, 232, 188, 239, 249, 168, 188, 148, 95, 20, 190, 100, 210, 164, 190, 28, 193, 137, 62, 137, 247, 227, 61, 239, 67, 25, 189, 63, 184, 15, 190, 93, 91, 98, 190, 56, 75, 123, 190, 97, 92, 130, 62, 102, 221, 249, 61, 43, 237, 152, 60, 168, 94, 139, 189, 62, 83, 50, 62, 115, 74, 254, 61, 199, 220, 14, 62, 141, 61, 87, 61, 206, 51, 233, 188, 244, 34, 229, 189, 108, 115, 103, 190, 0, 93, 72, 62, 73, 187, 126, 61, 241, 163, 2, 189, 214, 20, 24, 190, 185, 37, 49, 62, 135, 11, 204, 61, 219, 198, 158, 62, 177, 253, 4, 61, 3, 44, 92, 189, 53, 253, 196, 189, 33, 22, 29, 190, 58, 224, 37, 190, 145, 54, 50, 190, 64, 39, 165, 189, 180, 175, 43, 190, 93, 127, 168, 189, 68, 109, 14, 189, 91, 150, 1, 60, 247, 252, 79, 187, 220, 253, 64, 61, 236, 82, 128, 189, 94, 69, 15, 62, 52, 69, 16, 61, 77, 252, 6, 62, 51, 19, 40, 62, 42, 66, 23, 190, 37, 120, 10, 61, 92, 30, 139, 60, 131, 38, 211, 61, 83, 70, 76, 61, 46, 182, 164, 189, 177, 226, 160, 189, 50, 16, 21, 190, 88, 224, 174, 58, 70, 155, 25, 62, 118, 53, 3, 189, 252, 111, 156, 61, 216, 12, 111, 61, 17, 222, 5, 62, 149, 32, 32, 190, 163, 15, 221, 60, 166, 121, 5, 190, 45, 107, 44, 189, 170, 126, 131, 62, 168, 229, 88, 190, 171, 42, 157, 61, 104, 164, 78, 189, 220, 122, 150, 190, 91, 208, 201, 189, 4, 158, 30, 188, 42, 194, 86, 62, 61, 205, 66, 61, 240, 64, 114, 188, 115, 40, 163, 190, 153, 93, 161, 188, 134, 161, 82, 62, 74, 60, 124, 60, 110, 128, 69, 190, 160, 41, 108, 62, 135, 236, 137, 186, 152, 115, 174, 59, 38, 19, 69, 190, 209, 182, 160, 189, 104, 91, 171, 190, 36, 234, 201, 190, 11, 28, 91, 189, 152, 54, 245, 189, 9, 77, 213, 61, 149, 116, 160, 61, 253, 252, 229, 61, 230, 89, 173, 190, 26, 246, 79, 62, 42, 176, 195, 189, 183, 180, 34, 189, 130, 194, 84, 61, 198, 239, 130, 60, 165, 153, 11, 62, 109, 187, 255, 189, 174, 122, 245, 189, 48, 2, 13, 61, 80, 197, 246, 189, 216, 74, 164, 189, 200, 95, 49, 190, 51, 139, 201, 189, 102, 28, 121, 189, 238, 75, 134, 188, 66, 124, 244, 189, 180, 119, 166, 189, 252, 32, 107, 61, 249, 250, 23, 190, 131, 68, 23, 190, 60, 177, 32, 190, 98, 212, 48, 61, 25, 240, 19, 62, 28, 16, 37, 190, 139, 158, 12, 62, 74, 121, 162, 61, 154, 119, 185, 61, 222, 155, 140, 61, 156, 136, 175, 189, 66, 68, 23, 190, 132, 83, 208, 189, 230, 164, 49, 62, 146, 212, 135, 189, 211, 50, 70, 190, 80, 33, 132, 62, 142, 85, 60, 62, 18, 66, 1, 190, 163, 161, 150, 61, 106, 94, 70, 61, 192, 92, 153, 61, 199, 246, 162, 62, 75, 86, 155, 60, 52, 38, 135, 190, 57, 2, 149, 190, 179, 243, 36, 191, 63, 28, 235, 189, 207, 244, 73, 190, 236, 165, 171, 62, 179, 190, 37, 190, 166, 175, 217, 188, 28, 244, 16, 61, 11, 4, 216, 61, 218, 96, 158, 189, 51, 246, 59, 62, 147, 86, 78, 190, 63, 157, 105, 190, 187, 153, 203, 189, 203, 111, 19, 190, 181, 184, 54, 190, 79, 75, 4, 61, 208, 113, 5, 189, 110, 13, 26, 190, 148, 3, 128, 190, 10, 232, 154, 61, 197, 180, 87, 190, 162, 239, 181, 61, 72, 48, 116, 190, 117, 212, 48, 61, 254, 7, 133, 62, 16, 113, 157, 190, 58, 120, 253, 187, 35, 47, 20, 189, 160, 121, 14, 190, 127, 9, 11, 190, 128, 155, 72, 62, 113, 232, 165, 61, 29, 18, 129, 61, 163, 215, 42, 62, 102, 154, 64, 190, 37, 150, 68, 60, 234, 247, 21, 61, 120, 48, 196, 59, 103, 146, 75, 190, 119, 54, 130, 62, 69, 215, 31, 190, 42, 6, 149, 60, 49, 108, 179, 61, 16, 52, 210, 61, 16, 111, 33, 189, 107, 5, 183, 189, 84, 64, 83, 62, 99, 187, 11, 189, 179, 21, 123, 189, 30, 15, 176, 189, 47, 102, 211, 188, 178, 242, 155, 190, 214, 123, 153, 62, 62, 217, 5, 190, 180, 99, 144, 61, 12, 131, 152, 61, 180, 121, 123, 61, 230, 255, 25, 190, 101, 1, 105, 189, 150, 82, 236, 189, 211, 11, 107, 61, 42, 106, 169, 189, 91, 218, 253, 189, 124, 97, 146, 61, 78, 206, 174, 62, 191, 212, 63, 61, 129, 179, 169, 188, 210, 38, 215, 189, 110, 39, 107, 189, 30, 104, 94, 189, 245, 102, 8, 62, 81, 113, 213, 188, 148, 251, 54, 62, 115, 156, 103, 187, 238, 66, 54, 62, 42, 54, 154, 62, 213, 163, 220, 61, 98, 42, 212, 61, 246, 106, 112, 189, 146, 79, 64, 189, 130, 174, 160, 61, 16, 104, 59, 189, 71, 237, 160, 188, 238, 69, 29, 189, 44, 119, 130, 61, 8, 12, 233, 189, 221, 2, 234, 189, 240, 81, 14, 61, 188, 175, 17, 62, 24, 99, 67, 190, 104, 55, 216, 189, 114, 80, 11, 190, 93, 73, 151, 62, 226, 109, 8, 62, 51, 81, 20, 61, 98, 75, 62, 60, 61, 137, 111, 62, 96, 177, 112, 62, 83, 54, 142, 60, 16, 191, 250, 189, 170, 178, 255, 189, 216, 173, 121, 60, 254, 155, 40, 187, 140, 23, 90, 62, 161, 28, 176, 61, 0, 223, 210, 189, 88, 117, 85, 62, 220, 120, 181, 60, 119, 229, 131, 190, 139, 1, 48, 190, 138, 121, 150, 189, 237, 183, 39, 62, 255, 126, 36, 62, 218, 118, 190, 189, 208, 96, 30, 190, 184, 49, 16, 190, 192, 223, 142, 60, 255, 121, 2, 189, 139, 107, 137, 189, 253, 237, 136, 61, 49, 248, 130, 62, 45, 28, 170, 61, 171, 111, 73, 62, 225, 198, 85, 189, 80, 227, 158, 60, 38, 116, 47, 62, 160, 234, 252, 189, 190, 162, 25, 62, 200, 149, 83, 62, 165, 160, 255, 61, 178, 118, 12, 62, 173, 158, 22, 62, 171, 116, 55, 189, 200, 160, 238, 61, 230, 88, 137, 60, 130, 59, 143, 189, 79, 255, 54, 62, 234, 239, 64, 61, 191, 215, 131, 62, 31, 86, 43, 188, 65, 60, 14, 190, 250, 25, 113, 60, 187, 213, 255, 188, 98, 238, 150, 186, 165, 82, 136, 188, 212, 231, 135, 189, 75, 22, 30, 62, 230, 239, 60, 190, 199, 245, 243, 61, 4, 136, 226, 189, 137, 107, 160, 189, 189, 168, 0, 190, 37, 207, 31, 62, 57, 34, 148, 189, 236, 205, 26, 61, 45, 4, 185, 61, 3, 14, 38, 190, 48, 4, 11, 62, 210, 11, 181, 60, 103, 200, 2, 62, 39, 207, 65, 189, 166, 119, 233, 189, 162, 223, 120, 189, 17, 237, 39, 190, 130, 170, 243, 189, 23, 0, 44, 61, 25, 143, 53, 61, 5, 130, 13, 190, 236, 114, 136, 189, 123, 43, 109, 61, 73, 226, 35, 190, 116, 48, 24, 189, 254, 0, 137, 61, 33, 220, 139, 188, 194, 137, 237, 189, 120, 244, 213, 61, 146, 195, 247, 189, 92, 60, 228, 189, 80, 245, 55, 57, 70, 202, 174, 61, 80, 65, 241, 188, 48, 231, 145, 189, 100, 129, 0, 62, 120, 209, 3, 190, 104, 155, 26, 190, 192, 100, 1, 190, 247, 141, 67, 61, 57, 73, 28, 190, 49, 159, 217, 189, 136, 191, 255, 189, 119, 96, 236, 189, 183, 30, 227, 61, 123, 8, 130, 189, 245, 137, 201, 189, 171, 11, 116, 188, 229, 64, 249, 188, 43, 147, 14, 190, 109, 247, 155, 61, 145, 42, 169, 61, 186, 230, 8, 190, 88, 27, 16, 190, 122, 85, 14, 61, 145, 100, 17, 189, 32, 6, 17, 190, 80, 192, 44, 190, 199, 119, 240, 61, 35, 212, 255, 189, 172, 17, 141, 189, 65, 22, 31, 190, 34, 187, 236, 189, 136, 161, 6, 61, 67, 185, 52, 190, 206, 35, 163, 61, 35, 250, 12, 62, 184, 16, 158, 189, 197, 126, 182, 61, 35, 116, 240, 61, 122, 24, 243, 189, 246, 200, 242, 61, 18, 134, 201, 61, 43, 211, 128, 189, 205, 38, 63, 60, 113, 51, 51, 62, 215, 34, 114, 61, 150, 89, 231, 60, 19, 56, 145, 187, 126, 255, 108, 190, 156, 209, 10, 190, 167, 184, 214, 61, 25, 54, 71, 62, 253, 132, 246, 61, 24, 141, 110, 189, 88, 90, 30, 190, 248, 54, 145, 61, 228, 80, 98, 62, 153, 74, 163, 62, 60, 234, 141, 61, 53, 66, 85, 190, 111, 57, 15, 62, 83, 248, 198, 61, 205, 230, 216, 189, 249, 167, 243, 189, 120, 231, 152, 61, 52, 117, 55, 190, 205, 170, 49, 62, 167, 11, 70, 62, 20, 61, 97, 61, 127, 150, 251, 60, 243, 198, 128, 189, 12, 55, 3, 62, 131, 56, 10, 188, 123, 34, 33, 62, 53, 169, 133, 189, 25, 1, 206, 60, 101, 237, 33, 190, 152, 133, 13, 190, 25, 143, 178, 189, 84, 38, 59, 62, 216, 136, 28, 60, 251, 137, 91, 190, 223, 190, 12, 62, 32, 131, 15, 61, 245, 147, 222, 189, 145, 235, 245, 189, 221, 203, 175, 189, 175, 224, 71, 190, 41, 14, 184, 189, 97, 210, 247, 189, 149, 27, 249, 61, 244, 79, 239, 189, 145, 237, 130, 61, 103, 156, 224, 61, 39, 44, 249, 60, 184, 123, 147, 189, 203, 12, 23, 62, 3, 65, 185, 61, 188, 210, 234, 187, 224, 154, 179, 61, 115, 102, 212, 61, 188, 40, 5, 190, 40, 164, 94, 190, 158, 117, 147, 61, 64, 149, 95, 189, 116, 62, 155, 61, 72, 85, 9, 62, 184, 136, 3, 190, 43, 38, 241, 60, 33, 16, 153, 189, 43, 232, 51, 189, 55, 253, 7, 61, 217, 137, 25, 59, 239, 57, 51, 61, 181, 111, 2, 62, 218, 81, 7, 59, 64, 52, 149, 61, 163, 253, 125, 190, 177, 43, 9, 62, 101, 25, 205, 189, 249, 149, 4, 190, 244, 236, 17, 61, 243, 17, 70, 59, 78, 138, 95, 60, 252, 111, 129, 189, 251, 193, 134, 189, 66, 18, 247, 61, 207, 77, 226, 61, 125, 32, 36, 190, 5, 195, 5, 62, 167, 156, 137, 189, 78, 248, 139, 189, 161, 175, 39, 62, 3, 65, 72, 62, 231, 218, 124, 190, 133, 49, 30, 62, 110, 89, 174, 61, 55, 222, 144, 189, 206, 70, 23, 62, 96, 254, 44, 61, 168, 11, 103, 190, 219, 86, 55, 190, 88, 2, 251, 190, 147, 10, 148, 190, 76, 181, 167, 189, 212, 99, 29, 62, 203, 146, 67, 190, 107, 8, 6, 62, 33, 57, 87, 189, 25, 146, 203, 188, 94, 105, 25, 190, 60, 155, 154, 187, 57, 49, 15, 190, 250, 195, 173, 189, 173, 165, 184, 61, 50, 15, 50, 190, 49, 71, 67, 61, 98, 69, 0, 62, 222, 133, 185, 61, 237, 93, 117, 189, 244, 32, 137, 189, 16, 45, 103, 186, 9, 128, 21, 190, 48, 37, 124, 190, 80, 210, 27, 190, 115, 42, 57, 62, 172, 135, 121, 190, 132, 248, 120, 60, 104, 27, 253, 189, 135, 138, 71, 62, 252, 241, 50, 62, 118, 25, 119, 62, 244, 188, 224, 189, 205, 151, 48, 61, 43, 175, 50, 189, 191, 78, 176, 190, 167, 228, 64, 62, 195, 138, 22, 62, 214, 200, 220, 188, 216, 80, 14, 61, 147, 193, 201, 60, 118, 223, 30, 189, 86, 141, 174, 60, 124, 10, 208, 61, 71, 16, 147, 61, 101, 95, 151, 189, 52, 247, 24, 62, 127, 86, 85, 62, 237, 209, 51, 62, 244, 158, 137, 61, 222, 45, 22, 62, 184, 150, 6, 60, 28, 88, 205, 189, 210, 205, 163, 62, 212, 52, 31, 190, 211, 80, 103, 62, 214, 124, 244, 189, 59, 187, 50, 189, 20, 243, 40, 62, 48, 67, 85, 60, 218, 151, 241, 189, 70, 1, 188, 61, 210, 162, 90, 190, 121, 124, 253, 187, 36, 207, 186, 189, 155, 207, 194, 61, 137, 7, 33, 190, 179, 173, 139, 189, 23, 159, 224, 60, 1, 79, 48, 189, 35, 74, 212, 189, 209, 242, 200, 60, 168, 107, 9, 61, 132, 112, 190, 188, 47, 76, 188, 61, 215, 137, 1, 62, 109, 161, 186, 61, 15, 251, 239, 189, 67, 4, 42, 62, 203, 151, 31, 62, 130, 64, 39, 190, 3, 72, 195, 61, 254, 222, 11, 189, 45, 28, 55, 190, 216, 86, 213, 61, 172, 31, 146, 189, 167, 243, 69, 190, 94, 96, 174, 61, 119, 148, 42, 190, 1, 19, 83, 61, 218, 192, 195, 189, 101, 140, 154, 61, 51, 142, 38, 189, 239, 106, 201, 186, 66, 122, 133, 188, 227, 15, 143, 61, 179, 110, 54, 188, 57, 155, 19, 62, 156, 55, 54, 190, 205, 198, 189, 189, 34, 239, 156, 188, 2, 105, 125, 189, 41, 87, 200, 60, 80, 177, 32, 190, 232, 220, 2, 61, 38, 223, 89, 189, 198, 120, 213, 61, 98, 63, 223, 61, 3, 58, 37, 190, 213, 79, 58, 190, 105, 119, 224, 189, 93, 214, 167, 189, 123, 166, 116, 189, 239, 169, 25, 190, 166, 11, 203, 189, 174, 119, 146, 189, 238, 72, 141, 61, 105, 245, 232, 61, 237, 201, 237, 61, 234, 188, 12, 62, 232, 191, 65, 190, 143, 91, 153, 61, 41, 57, 38, 190, 129, 255, 245, 61, 156, 236, 3, 190, 230, 188, 117, 61, 174, 15, 139, 61, 241, 202, 10, 190, 196, 78, 4, 61, 125, 148, 9, 62, 214, 6, 255, 189, 227, 102, 148, 189, 105, 198, 253, 61, 18, 213, 239, 189, 117, 64, 120, 61, 244, 151, 105, 61, 129, 56, 71, 187, 91, 197, 161, 187, 236, 185, 238, 187, 225, 79, 157, 189, 69, 96, 40, 190, 228, 90, 15, 62, 153, 147, 9, 62, 99, 50, 252, 189, 250, 62, 18, 190, 220, 142, 184, 189, 87, 187, 125, 188, 50, 76, 59, 61, 89, 245, 140, 61, 213, 154, 135, 189, 49, 232, 7, 190, 194, 46, 173, 190, 83, 196, 76, 61, 57, 144, 218, 60, 115, 164, 90, 190, 250, 1, 173, 189, 210, 149, 7, 61, 90, 110, 165, 61, 98, 208, 172, 62, 118, 53, 43, 62, 54, 239, 187, 60, 129, 140, 133, 61, 200, 218, 154, 61, 50, 152, 198, 189, 9, 117, 44, 61, 195, 9, 78, 62, 70, 5, 79, 189, 23, 183, 174, 61, 251, 119, 211, 189, 131, 125, 158, 189, 37, 42, 97, 62, 217, 190, 227, 61, 200, 219, 235, 61, 146, 65, 7, 190, 10, 149, 1, 62, 133, 132, 77, 60, 24, 61, 23, 189, 232, 171, 36, 62, 229, 152, 236, 188, 181, 251, 94, 62, 2, 22, 113, 190, 106, 139, 138, 62, 204, 252, 161, 189, 85, 26, 178, 187, 93, 252, 8, 190, 152, 172, 232, 189, 65, 95, 186, 61, 39, 141, 165, 186, 122, 59, 118, 188, 204, 22, 28, 190, 244, 99, 98, 189, 102, 104, 32, 190, 222, 250, 255, 61, 40, 94, 212, 189, 198, 35, 16, 190, 4, 216, 27, 190, 203, 176, 165, 61, 82, 58, 159, 188, 209, 135, 192, 59, 47, 248, 223, 61, 33, 15, 223, 189, 185, 253, 30, 62, 66, 117, 47, 189, 136, 60, 240, 189, 212, 189, 198, 189, 22, 0, 32, 189, 58, 89, 194, 60, 60, 155, 155, 189, 98, 81, 53, 61, 251, 247, 245, 61, 20, 189, 237, 61, 130, 221, 213, 61, 32, 21, 99, 61, 104, 5, 44, 62, 177, 193, 163, 189, 181, 95, 224, 189, 114, 20, 226, 188, 177, 225, 233, 60, 6, 73, 50, 61, 215, 72, 226, 187, 201, 78, 213, 189, 245, 112, 237, 189, 151, 77, 14, 190, 84, 232, 126, 189, 150, 198, 165, 189, 135, 241, 226, 60, 182, 11, 10, 189, 41, 42, 171, 189, 66, 181, 228, 60, 239, 220, 16, 62, 170, 122, 196, 187, 70, 167, 151, 189, 59, 33, 45, 189, 76, 159, 3, 190, 56, 235, 147, 189, 68, 39, 227, 61, 38, 134, 18, 190, 133, 92, 136, 189, 35, 252, 123, 61, 112, 50, 37, 62, 99, 162, 173, 61, 198, 97, 215, 189, 146, 79, 232, 187, 128, 121, 221, 187, 213, 88, 216, 189, 247, 53, 172, 61, 255, 5, 200, 61, 230, 120, 18, 190, 57, 13, 72, 62, 31, 142, 157, 60, 240, 160, 171, 189, 6, 37, 255, 59, 81, 90, 29, 61, 36, 194, 122, 189, 62, 62, 189, 62, 22, 91, 63, 62, 64, 127, 5, 190, 207, 42, 73, 190, 183, 245, 234, 190, 135, 143, 147, 190, 99, 198, 18, 190, 208, 220, 42, 62, 201, 108, 108, 190, 197, 226, 198, 188, 27, 68, 155, 190, 167, 190, 123, 61, 162, 50, 138, 61, 86, 124, 147, 60, 10, 67, 29, 189, 191, 85, 46, 190, 54, 59, 54, 189, 101, 152, 130, 61, 101, 223, 148, 189, 77, 180, 105, 61, 99, 236, 143, 190, 197, 41, 154, 188, 27, 196, 40, 189, 198, 150, 234, 189, 194, 18, 105, 190, 126, 183, 148, 190, 1, 236, 147, 61, 17, 2, 135, 62, 110, 155, 202, 189, 78, 240, 55, 62, 67, 165, 254, 61, 113, 164, 43, 190, 43, 90, 191, 62, 112, 111, 183, 61, 24, 168, 211, 188, 161, 134, 97, 190, 142, 56, 248, 190, 215, 55, 28, 189, 18, 245, 46, 62, 55, 111, 113, 61, 154, 0, 63, 190, 85, 186, 59, 190, 20, 191, 60, 61, 36, 9, 185, 189, 204, 102, 58, 189, 231, 5, 167, 189, 74, 1, 156, 189, 74, 56, 75, 190, 148, 227, 139, 188, 178, 38, 137, 59, 171, 67, 232, 189, 32, 139, 155, 188, 62, 122, 51, 190, 211, 221, 249, 59, 18, 209, 144, 190, 50, 227, 69, 61, 153, 247, 65, 61, 23, 102, 115, 190, 192, 7, 82, 62, 222, 247, 231, 60, 16, 12, 204, 61, 227, 138, 168, 60, 206, 167, 109, 188, 139, 23, 210, 188, 227, 118, 145, 62, 219, 158, 48, 62, 150, 108, 187, 189, 61, 178, 141, 190, 79, 112, 244, 190, 18, 189, 147, 188, 236, 97, 69, 190, 93, 36, 5, 62, 111, 238, 140, 190, 117, 142, 36, 190, 242, 104, 7, 61, 66, 192, 4, 62, 97, 116, 133, 190, 226, 207, 120, 61, 90, 10, 32, 188, 166, 240, 224, 189, 3, 249, 21, 188, 106, 14, 203, 59, 105, 230, 238, 187, 23, 174, 248, 61, 143, 214, 226, 189, 32, 138, 97, 61, 131, 68, 143, 189, 104, 123, 149, 60, 183, 123, 76, 190, 201, 29, 80, 62, 61, 231, 92, 189, 38, 133, 10, 188, 165, 167, 138, 62, 142, 57, 101, 60, 35, 213, 12, 62, 242, 164, 215, 61, 235, 140, 140, 62, 49, 71, 242, 60, 201, 173, 159, 61, 66, 29, 251, 189, 209, 225, 134, 62, 108, 43, 164, 62, 172, 94, 155, 189, 169, 57, 115, 190, 135, 65, 96, 60, 15, 56, 47, 190, 17, 128, 28, 189, 151, 184, 238, 189, 171, 64, 102, 190, 224, 236, 33, 61, 23, 92, 240, 61, 83, 158, 251, 61, 71, 55, 177, 61, 65, 38, 61, 190, 84, 59, 1, 188, 165, 102, 152, 188, 151, 44, 177, 190, 50, 234, 202, 189, 101, 238, 205, 189, 95, 174, 91, 189, 109, 130, 218, 62, 218, 195, 29, 188, 68, 189, 90, 62, 76, 214, 173, 189, 211, 204, 131, 189, 23, 207, 231, 189, 34, 6, 165, 61, 86, 91, 13, 62, 139, 183, 144, 61, 239, 162, 77, 59, 142, 4, 202, 61, 246, 72, 70, 190, 189, 114, 210, 190, 61, 52, 131, 190, 92, 94, 88, 190, 221, 151, 215, 61, 232, 70, 37, 61, 43, 243, 6, 62, 13, 17, 164, 189, 31, 209, 120, 61, 229, 143, 111, 189, 208, 171, 7, 190, 207, 89, 254, 188, 144, 98, 119, 190, 250, 35, 66, 61, 21, 92, 58, 189, 239, 104, 7, 189, 20, 189, 51, 62, 175, 141, 175, 61, 156, 58, 155, 189, 252, 94, 47, 190, 124, 116, 45, 60, 246, 8, 78, 60, 225, 128, 67, 59, 86, 201, 194, 190, 181, 236, 211, 187, 243, 1, 133, 62, 111, 18, 26, 189, 164, 17, 145, 61, 33, 229, 138, 61, 224, 131, 72, 62, 233, 226, 162, 189, 17, 216, 117, 190, 58, 221, 237, 60, 190, 251, 4, 62, 231, 153, 111, 62, 163, 247, 44, 190, 91, 166, 166, 61, 25, 251, 168, 61, 123, 28, 234, 189, 62, 41, 100, 61, 116, 72, 165, 189, 126, 11, 237, 189, 16, 17, 172, 188, 233, 49, 152, 62, 176, 146, 196, 60, 214, 57, 80, 59, 80, 36, 58, 62, 28, 2, 135, 61, 158, 116, 15, 190, 77, 75, 200, 189, 27, 223, 139, 190, 26, 192, 5, 62, 113, 137, 221, 60, 25, 37, 11, 188, 64, 240, 49, 62, 78, 75, 11, 190, 62, 131, 107, 190, 222, 6, 46, 62, 74, 6, 88, 61, 6, 133, 167, 60, 37, 137, 85, 61, 233, 237, 17, 190, 194, 144, 114, 190, 240, 7, 48, 60, 80, 61, 50, 190, 91, 162, 172, 188, 179, 161, 32, 62, 13, 2, 208, 61, 99, 61, 62, 189, 94, 114, 9, 190, 114, 186, 154, 189, 107, 178, 21, 190, 39, 188, 50, 190, 147, 32, 57, 189, 112, 143, 138, 189, 222, 89, 7, 190, 177, 96, 1, 62, 197, 25, 128, 61, 225, 16, 184, 61, 215, 253, 110, 189, 79, 183, 48, 190, 80, 2, 51, 190, 94, 184, 54, 190, 199, 102, 85, 61, 156, 196, 10, 62, 55, 129, 100, 62, 213, 230, 232, 189, 222, 133, 6, 188, 174, 145, 225, 189, 205, 154, 79, 61, 191, 37, 222, 189, 171, 164, 16, 190, 75, 193, 141, 61, 242, 174, 237, 61, 0, 64, 13, 62, 226, 132, 149, 60, 217, 217, 0, 190, 116, 80, 234, 61, 54, 243, 155, 189, 71, 220, 170, 61, 228, 14, 159, 189, 95, 197, 186, 187, 115, 159, 18, 190, 173, 203, 213, 61, 38, 108, 38, 190, 3, 207, 17, 61, 224, 50, 35, 60, 126, 122, 53, 190, 233, 66, 166, 189, 77, 58, 156, 61, 107, 22, 194, 61, 107, 67, 194, 189, 25, 106, 3, 62, 115, 10, 48, 190, 195, 66, 17, 190, 128, 203, 196, 61, 238, 73, 212, 188, 239, 237, 29, 61, 202, 214, 130, 190, 147, 203, 201, 189, 116, 69, 150, 189, 121, 86, 134, 62, 66, 110, 111, 189, 26, 118, 29, 190, 81, 53, 160, 188, 214, 36, 149, 190, 31, 184, 55, 190, 20, 160, 211, 189, 130, 24, 33, 190, 198, 174, 222, 62, 100, 61, 202, 189, 138, 254, 130, 189, 208, 60, 159, 190, 211, 93, 254, 61, 81, 13, 58, 190, 255, 42, 20, 190, 227, 117, 218, 62, 168, 185, 147, 189, 186, 84, 144, 190, 29, 109, 220, 190, 153, 224, 170, 62, 48, 182, 144, 190, 54, 219, 148, 189, 100, 88, 127, 62, 87, 83, 221, 60, 40, 71, 38, 190, 13, 133, 253, 189, 192, 235, 244, 189, 12, 171, 91, 190, 160, 34, 164, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 165, 149, 189, 63, 34, 36, 189, 208, 240, 22, 190, 205, 130, 25, 62, 80, 140, 30, 189, 102, 202, 75, 62, 69, 225, 66, 62, 188, 187, 98, 62, 81, 72, 101, 62, 206, 92, 6, 62, 84, 50, 153, 189, 183, 33, 150, 61, 101, 211, 70, 60, 165, 165, 240, 61, 222, 223, 159, 187, 55, 148, 247, 61, 101, 126, 130, 61, 108, 178, 37, 189, 144, 178, 0, 190, 12, 41, 179, 189, 221, 187, 122, 61, 98, 126, 14, 190, 140, 118, 54, 189, 227, 102, 110, 62, 230, 200, 85, 62, 3, 27, 21, 62, 88, 245, 243, 188, 148, 171, 6, 62, 106, 93, 103, 62, 5, 109, 5, 62, 86, 208, 55, 190, 44, 255, 147, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 246, 225, 61, 203, 205, 117, 190, 254, 146, 247, 189, 83, 238, 119, 62, 85, 246, 50, 189, 95, 92, 236, 190, 212, 19, 155, 62, 117, 228, 246, 61, 31, 60, 8, 62, 37, 90, 146, 61, 118, 225, 206, 61, 185, 141, 9, 190, 151, 228, 26, 62, 38, 98, 232, 60, 61, 188, 47, 189, 172, 20, 43, 190, 241, 238, 107, 190, 14, 161, 206, 61, 111, 122, 247, 61, 245, 34, 151, 61, 189, 232, 48, 190, 208, 232, 93, 189, 141, 227, 29, 190, 108, 23, 246, 190, 22, 111, 101, 190, 99, 97, 130, 190, 245, 20, 138, 62, 131, 55, 123, 190, 169, 114, 200, 61, 6, 104, 98, 189, 28, 102, 178, 189, 26, 42, 41, 63, 118, 108, 233, 61, 42, 173, 131, 61, 65, 202, 133, 61, 60, 226, 54, 62, 152, 136, 19, 190, 224, 150, 43, 189, 38, 218, 132, 189, 114, 60, 135, 190, 248, 254, 43, 190, 65, 152, 28, 190, 192, 243, 7, 187, 232, 40, 50, 62, 32, 24, 0, 190, 228, 200, 210, 61, 157, 194, 23, 62, 99, 34, 12, 189, 163, 164, 69, 190, 185, 57, 145, 61, 12, 24, 227, 61, 227, 63, 35, 188, 186, 140, 25, 190, 149, 108, 247, 61, 141, 162, 34, 61, 205, 173, 187, 61, 114, 32, 179, 186, 192, 143, 188, 61, 151, 119, 87, 61, 232, 215, 43, 61, 53, 73, 19, 190, 47, 133, 39, 62, 11, 33, 186, 60, 190, 109, 134, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {66, 141, 74, 61, 146, 22, 141, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {82, 210, 70, 192, 186, 231, 164, 63, 216, 12, 162, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {142, 96, 24, 192, 55, 193, 27, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0056/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}