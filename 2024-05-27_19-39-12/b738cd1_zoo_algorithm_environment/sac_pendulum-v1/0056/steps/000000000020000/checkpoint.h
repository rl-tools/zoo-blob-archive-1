// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 70, 105, 63, 176, 145, 242, 190, 185, 179, 159, 190, 137, 76, 233, 187, 202, 227, 172, 63, 22, 181, 72, 62, 255, 150, 250, 190, 135, 140, 234, 62, 72, 109, 211, 58, 31, 8, 88, 63, 203, 57, 141, 191, 150, 176, 132, 190, 224, 148, 32, 63, 185, 190, 140, 63, 9, 218, 180, 62, 83, 26, 21, 191, 228, 200, 145, 191, 26, 105, 181, 190, 71, 66, 183, 62, 62, 139, 91, 191, 10, 128, 91, 190, 28, 70, 173, 62, 125, 179, 57, 63, 130, 181, 69, 190, 8, 26, 21, 63, 197, 98, 145, 63, 92, 143, 92, 62, 43, 77, 103, 191, 253, 131, 208, 63, 155, 12, 8, 63, 33, 40, 128, 191, 48, 52, 87, 62, 154, 104, 36, 63, 162, 11, 201, 61, 39, 207, 159, 190, 118, 71, 181, 62, 56, 129, 242, 62, 27, 108, 5, 62, 142, 34, 181, 190, 154, 123, 197, 61, 70, 34, 168, 190, 208, 197, 35, 62, 110, 153, 246, 190, 15, 89, 185, 62, 125, 88, 141, 190, 126, 35, 86, 63, 149, 230, 115, 190, 243, 212, 19, 190, 194, 30, 167, 190, 214, 12, 214, 191, 150, 46, 242, 190, 189, 8, 68, 63, 210, 105, 2, 63, 215, 228, 201, 62, 85, 83, 35, 191, 230, 75, 58, 191, 90, 69, 50, 62, 20, 185, 71, 63, 112, 145, 41, 63, 196, 220, 244, 62, 203, 125, 70, 191, 190, 173, 76, 191, 154, 97, 0, 191, 116, 75, 178, 62, 165, 121, 54, 63, 250, 141, 143, 190, 161, 96, 184, 62, 91, 90, 82, 191, 213, 44, 185, 61, 253, 8, 224, 190, 221, 90, 2, 191, 205, 88, 2, 191, 197, 135, 175, 62, 193, 61, 137, 190, 53, 247, 181, 62, 215, 83, 201, 62, 74, 44, 82, 191, 218, 201, 60, 190, 183, 107, 95, 62, 29, 155, 121, 63, 227, 139, 1, 62, 245, 163, 15, 190, 86, 194, 165, 188, 70, 205, 228, 61, 46, 80, 24, 63, 65, 5, 207, 63, 154, 108, 173, 62, 96, 68, 19, 191, 45, 221, 20, 63, 114, 225, 24, 190, 5, 203, 52, 189, 97, 67, 167, 190, 175, 169, 156, 62, 184, 180, 170, 189, 23, 176, 132, 190, 152, 3, 198, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {108, 14, 147, 191, 50, 184, 133, 60, 226, 184, 250, 62, 151, 28, 161, 190, 194, 74, 191, 190, 74, 212, 135, 62, 86, 183, 12, 191, 172, 208, 218, 62, 171, 202, 197, 62, 121, 17, 83, 62, 67, 137, 139, 190, 48, 143, 105, 191, 111, 5, 35, 62, 108, 248, 233, 60, 94, 248, 78, 62, 27, 232, 236, 190, 194, 173, 46, 190, 87, 218, 128, 191, 145, 95, 31, 63, 63, 131, 140, 61, 19, 3, 48, 191, 191, 232, 229, 59, 139, 177, 165, 62, 192, 13, 54, 191, 83, 219, 139, 61, 156, 185, 24, 62, 198, 73, 102, 62, 141, 233, 98, 190, 199, 115, 10, 61, 240, 130, 204, 190, 81, 174, 253, 189, 60, 60, 41, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 215, 89, 190, 156, 31, 124, 191, 33, 61, 133, 190, 102, 197, 124, 62, 254, 163, 248, 190, 94, 167, 67, 62, 210, 241, 155, 190, 57, 106, 19, 61, 134, 31, 27, 61, 51, 238, 234, 189, 104, 191, 73, 190, 69, 199, 172, 186, 9, 119, 238, 60, 137, 213, 109, 62, 148, 194, 31, 189, 150, 134, 183, 61, 55, 92, 177, 190, 40, 104, 15, 191, 43, 129, 205, 189, 133, 48, 26, 61, 53, 235, 202, 59, 237, 70, 50, 189, 180, 149, 154, 62, 159, 195, 139, 190, 15, 85, 221, 61, 242, 255, 165, 61, 196, 124, 49, 61, 223, 216, 41, 190, 55, 34, 175, 190, 163, 29, 139, 61, 157, 190, 212, 61, 107, 227, 172, 190, 229, 101, 17, 63, 141, 228, 243, 189, 90, 255, 60, 190, 242, 226, 217, 60, 115, 96, 161, 62, 18, 34, 78, 62, 179, 197, 214, 190, 250, 199, 0, 62, 255, 201, 233, 188, 104, 177, 64, 190, 102, 208, 36, 190, 28, 112, 11, 190, 17, 177, 162, 190, 8, 133, 147, 62, 106, 89, 45, 62, 199, 30, 132, 189, 118, 195, 186, 62, 199, 125, 14, 63, 116, 236, 21, 62, 49, 157, 72, 62, 19, 213, 154, 62, 212, 159, 146, 190, 165, 160, 109, 189, 31, 234, 228, 61, 223, 254, 149, 62, 241, 213, 126, 62, 151, 74, 55, 190, 92, 244, 212, 189, 69, 141, 133, 62, 211, 170, 6, 191, 136, 6, 236, 62, 37, 156, 178, 61, 3, 44, 92, 189, 53, 253, 196, 189, 164, 205, 29, 190, 175, 235, 37, 190, 145, 54, 50, 190, 123, 93, 169, 189, 180, 175, 43, 190, 16, 191, 169, 189, 68, 109, 14, 189, 91, 150, 1, 60, 247, 252, 79, 187, 220, 253, 64, 61, 10, 48, 130, 189, 94, 69, 15, 62, 128, 141, 10, 61, 77, 252, 6, 62, 228, 47, 38, 62, 42, 66, 23, 190, 81, 193, 7, 61, 92, 30, 139, 60, 13, 105, 207, 61, 170, 249, 73, 61, 239, 188, 164, 189, 131, 31, 164, 189, 50, 16, 21, 190, 53, 180, 98, 58, 70, 155, 25, 62, 118, 53, 3, 189, 252, 111, 156, 61, 247, 115, 108, 61, 17, 222, 5, 62, 149, 32, 32, 190, 98, 83, 61, 187, 235, 224, 164, 61, 115, 159, 72, 62, 226, 147, 26, 62, 188, 230, 230, 190, 119, 94, 103, 62, 146, 169, 47, 189, 142, 228, 87, 190, 99, 242, 189, 190, 132, 123, 9, 61, 121, 147, 123, 190, 157, 29, 132, 189, 162, 33, 131, 190, 38, 12, 117, 191, 151, 218, 128, 62, 31, 254, 6, 62, 44, 80, 32, 191, 81, 247, 166, 190, 103, 248, 188, 62, 155, 26, 61, 189, 188, 33, 133, 190, 128, 76, 204, 189, 28, 57, 29, 190, 27, 249, 6, 191, 68, 105, 35, 191, 205, 183, 50, 190, 158, 237, 227, 189, 154, 143, 225, 190, 29, 182, 5, 191, 82, 138, 41, 63, 65, 87, 130, 191, 226, 191, 230, 190, 124, 38, 196, 189, 117, 9, 54, 189, 52, 209, 52, 61, 198, 239, 130, 60, 165, 153, 11, 62, 113, 247, 14, 190, 182, 167, 248, 189, 138, 169, 172, 60, 187, 82, 254, 189, 216, 74, 164, 189, 200, 95, 49, 190, 51, 139, 201, 189, 96, 157, 145, 189, 238, 75, 134, 188, 111, 210, 8, 190, 189, 139, 167, 189, 136, 195, 78, 61, 249, 250, 23, 190, 221, 69, 23, 190, 60, 177, 32, 190, 71, 122, 242, 60, 9, 145, 6, 62, 28, 16, 37, 190, 63, 10, 244, 61, 74, 121, 162, 61, 87, 135, 180, 61, 190, 11, 140, 61, 156, 136, 175, 189, 66, 68, 23, 190, 58, 245, 219, 189, 230, 164, 49, 62, 146, 212, 135, 189, 156, 33, 213, 190, 17, 100, 59, 61, 159, 179, 188, 61, 56, 171, 211, 190, 87, 224, 97, 190, 175, 226, 18, 62, 235, 240, 142, 62, 66, 206, 126, 62, 172, 10, 38, 61, 232, 12, 239, 191, 44, 233, 147, 191, 48, 147, 23, 191, 107, 223, 12, 190, 230, 91, 91, 189, 166, 253, 156, 62, 227, 45, 99, 191, 60, 161, 159, 61, 21, 145, 187, 188, 102, 21, 231, 61, 186, 130, 120, 190, 211, 174, 103, 62, 127, 28, 148, 190, 26, 96, 148, 189, 100, 135, 121, 189, 106, 47, 251, 190, 109, 102, 26, 190, 131, 88, 64, 190, 212, 56, 55, 190, 214, 94, 145, 190, 12, 141, 146, 190, 83, 8, 0, 190, 167, 25, 143, 191, 193, 190, 162, 189, 127, 78, 38, 191, 36, 45, 139, 61, 226, 213, 226, 62, 89, 243, 76, 191, 221, 180, 130, 189, 139, 68, 79, 62, 204, 40, 111, 190, 207, 156, 206, 60, 5, 150, 140, 62, 135, 204, 60, 61, 85, 162, 224, 189, 133, 120, 144, 61, 117, 192, 223, 189, 124, 253, 74, 190, 134, 157, 253, 61, 236, 200, 97, 190, 2, 216, 52, 191, 182, 206, 195, 62, 113, 35, 208, 189, 238, 25, 240, 189, 36, 184, 208, 189, 39, 185, 58, 62, 204, 38, 109, 190, 188, 212, 30, 188, 112, 25, 183, 62, 33, 150, 176, 61, 137, 77, 2, 190, 164, 67, 22, 190, 150, 20, 158, 190, 184, 198, 189, 190, 61, 255, 148, 62, 175, 178, 24, 190, 17, 19, 183, 61, 87, 244, 165, 62, 191, 229, 229, 61, 143, 140, 203, 190, 174, 221, 65, 189, 208, 175, 182, 188, 105, 161, 55, 62, 221, 64, 188, 60, 220, 224, 65, 190, 212, 18, 1, 60, 201, 236, 148, 62, 144, 38, 157, 61, 207, 168, 156, 188, 246, 106, 200, 59, 76, 153, 189, 61, 84, 89, 86, 190, 150, 192, 21, 62, 244, 178, 132, 62, 219, 169, 19, 62, 164, 49, 210, 189, 108, 7, 109, 62, 236, 21, 144, 62, 88, 63, 130, 60, 151, 28, 254, 60, 194, 25, 111, 61, 142, 60, 168, 61, 72, 3, 20, 60, 219, 55, 6, 190, 8, 172, 225, 189, 141, 92, 145, 189, 36, 89, 117, 61, 5, 182, 23, 191, 77, 52, 127, 190, 229, 112, 51, 62, 231, 0, 235, 188, 223, 197, 22, 191, 138, 231, 71, 191, 130, 195, 25, 190, 39, 20, 87, 62, 93, 249, 212, 61, 164, 232, 83, 189, 109, 160, 243, 59, 36, 54, 94, 62, 99, 5, 238, 60, 79, 203, 236, 61, 176, 2, 200, 189, 84, 89, 188, 189, 45, 141, 249, 190, 91, 225, 2, 189, 204, 184, 215, 62, 180, 185, 10, 62, 93, 63, 22, 191, 55, 108, 12, 62, 223, 208, 21, 188, 160, 199, 132, 191, 181, 232, 10, 190, 58, 126, 46, 190, 90, 178, 187, 61, 213, 98, 19, 62, 86, 253, 177, 189, 169, 230, 174, 188, 132, 83, 163, 189, 41, 88, 251, 61, 109, 161, 70, 189, 40, 162, 50, 191, 219, 101, 8, 62, 58, 147, 177, 62, 148, 165, 75, 191, 76, 187, 18, 62, 233, 169, 112, 60, 223, 190, 127, 61, 67, 156, 85, 62, 24, 90, 225, 190, 180, 218, 36, 61, 253, 134, 243, 61, 14, 205, 170, 61, 67, 191, 118, 62, 51, 210, 31, 62, 34, 9, 9, 62, 112, 161, 255, 189, 187, 220, 160, 190, 22, 167, 135, 62, 41, 141, 42, 62, 198, 17, 191, 189, 101, 17, 93, 62, 231, 73, 163, 61, 131, 177, 143, 190, 48, 26, 47, 61, 174, 56, 187, 61, 26, 214, 143, 60, 84, 93, 159, 189, 15, 244, 133, 190, 232, 185, 32, 188, 8, 220, 58, 190, 17, 209, 121, 61, 228, 144, 226, 189, 137, 107, 160, 189, 228, 171, 0, 190, 91, 107, 29, 62, 57, 34, 148, 189, 174, 228, 9, 61, 254, 98, 182, 61, 141, 80, 38, 190, 48, 4, 11, 62, 210, 11, 181, 60, 103, 200, 2, 62, 39, 207, 65, 189, 68, 120, 236, 189, 162, 223, 120, 189, 124, 232, 40, 190, 197, 204, 243, 189, 235, 5, 25, 61, 25, 143, 53, 61, 90, 79, 15, 190, 236, 114, 136, 189, 195, 117, 98, 61, 73, 226, 35, 190, 70, 113, 30, 189, 153, 238, 132, 61, 33, 220, 139, 188, 82, 119, 242, 189, 120, 244, 213, 61, 146, 195, 247, 189, 92, 60, 228, 189, 80, 245, 55, 57, 70, 202, 174, 61, 80, 65, 241, 188, 48, 231, 145, 189, 100, 129, 0, 62, 120, 209, 3, 190, 104, 155, 26, 190, 192, 100, 1, 190, 247, 141, 67, 61, 57, 73, 28, 190, 49, 159, 217, 189, 136, 191, 255, 189, 119, 96, 236, 189, 183, 30, 227, 61, 123, 8, 130, 189, 245, 137, 201, 189, 171, 11, 116, 188, 229, 64, 249, 188, 43, 147, 14, 190, 109, 247, 155, 61, 145, 42, 169, 61, 186, 230, 8, 190, 88, 27, 16, 190, 122, 85, 14, 61, 145, 100, 17, 189, 32, 6, 17, 190, 80, 192, 44, 190, 199, 119, 240, 61, 35, 212, 255, 189, 172, 17, 141, 189, 65, 22, 31, 190, 34, 187, 236, 189, 136, 161, 6, 61, 67, 185, 52, 190, 206, 35, 163, 61, 0, 188, 18, 62, 216, 131, 56, 61, 118, 201, 118, 62, 72, 77, 240, 60, 231, 47, 127, 61, 229, 43, 0, 62, 111, 149, 195, 61, 98, 225, 196, 188, 250, 245, 50, 62, 249, 165, 214, 62, 121, 39, 18, 62, 40, 237, 65, 61, 139, 17, 18, 189, 125, 17, 17, 191, 139, 144, 146, 189, 61, 17, 29, 62, 141, 222, 174, 60, 219, 114, 151, 62, 2, 22, 5, 62, 172, 144, 102, 190, 242, 89, 143, 58, 218, 159, 120, 62, 86, 149, 139, 61, 101, 60, 170, 188, 38, 53, 226, 190, 42, 186, 40, 61, 13, 59, 141, 62, 65, 121, 188, 189, 97, 63, 206, 189, 12, 58, 88, 61, 30, 52, 182, 190, 160, 130, 81, 61, 253, 176, 18, 63, 141, 89, 179, 191, 133, 153, 178, 190, 212, 176, 112, 62, 246, 159, 126, 191, 173, 170, 21, 190, 89, 54, 178, 190, 47, 212, 246, 61, 99, 169, 86, 61, 58, 123, 158, 190, 231, 72, 208, 187, 46, 254, 153, 61, 134, 168, 210, 62, 0, 183, 82, 62, 130, 129, 62, 190, 149, 201, 45, 63, 22, 68, 166, 190, 191, 89, 139, 190, 117, 130, 51, 191, 199, 234, 142, 61, 193, 115, 84, 190, 234, 217, 242, 61, 210, 227, 247, 188, 103, 49, 224, 61, 187, 128, 34, 62, 178, 40, 229, 61, 88, 88, 19, 190, 139, 140, 150, 62, 236, 242, 13, 191, 252, 182, 87, 62, 185, 204, 2, 63, 41, 222, 71, 62, 22, 158, 249, 60, 209, 6, 224, 60, 153, 192, 220, 190, 89, 203, 37, 191, 197, 9, 151, 62, 171, 168, 30, 190, 158, 113, 219, 187, 212, 252, 166, 62, 167, 0, 32, 62, 249, 252, 63, 190, 238, 197, 207, 189, 170, 135, 81, 60, 222, 96, 130, 62, 188, 101, 238, 188, 235, 61, 43, 62, 155, 229, 55, 190, 5, 105, 236, 190, 78, 164, 160, 62, 68, 200, 16, 191, 103, 252, 106, 62, 218, 146, 254, 190, 85, 185, 68, 62, 149, 46, 120, 61, 51, 43, 137, 190, 243, 181, 163, 61, 183, 126, 156, 190, 6, 94, 215, 61, 9, 228, 99, 61, 181, 46, 114, 62, 138, 28, 156, 190, 242, 75, 50, 62, 128, 172, 83, 188, 103, 232, 121, 190, 112, 140, 172, 190, 69, 2, 76, 62, 138, 180, 5, 191, 146, 16, 82, 61, 159, 169, 128, 62, 103, 198, 161, 189, 63, 255, 84, 61, 195, 249, 148, 191, 46, 247, 229, 191, 237, 156, 218, 190, 193, 108, 74, 189, 136, 21, 161, 190, 236, 139, 190, 62, 77, 118, 112, 62, 196, 85, 166, 191, 64, 117, 152, 62, 9, 251, 191, 189, 100, 153, 215, 61, 7, 109, 3, 191, 5, 218, 9, 62, 201, 31, 98, 190, 77, 157, 40, 62, 209, 216, 115, 62, 198, 237, 94, 60, 110, 122, 51, 189, 224, 46, 118, 191, 150, 196, 229, 62, 111, 234, 171, 190, 117, 161, 209, 60, 160, 111, 228, 62, 154, 180, 160, 190, 33, 162, 4, 191, 84, 185, 67, 189, 197, 72, 94, 62, 123, 169, 197, 190, 162, 233, 38, 61, 112, 39, 14, 190, 135, 230, 255, 62, 48, 188, 62, 62, 253, 68, 180, 62, 35, 64, 60, 191, 15, 247, 51, 190, 81, 251, 214, 190, 28, 151, 146, 190, 158, 39, 117, 62, 61, 95, 6, 62, 73, 140, 13, 190, 90, 140, 245, 58, 4, 55, 133, 62, 173, 144, 67, 189, 212, 64, 227, 61, 61, 137, 126, 189, 115, 93, 134, 61, 200, 184, 148, 188, 56, 107, 79, 61, 143, 90, 143, 62, 176, 16, 63, 62, 23, 19, 76, 62, 219, 89, 42, 61, 127, 154, 34, 62, 141, 6, 101, 190, 198, 139, 131, 62, 220, 40, 131, 190, 139, 189, 225, 62, 238, 36, 24, 191, 116, 147, 214, 190, 11, 76, 201, 62, 90, 248, 142, 191, 198, 28, 62, 191, 154, 244, 65, 190, 219, 158, 149, 190, 255, 222, 190, 189, 49, 167, 205, 190, 71, 218, 141, 189, 87, 21, 150, 190, 92, 144, 193, 190, 46, 157, 193, 62, 166, 154, 16, 190, 200, 166, 225, 61, 55, 186, 50, 191, 189, 74, 223, 190, 117, 160, 143, 189, 247, 214, 113, 62, 92, 21, 141, 61, 252, 167, 175, 60, 135, 65, 72, 62, 46, 48, 218, 61, 107, 158, 177, 62, 7, 253, 227, 189, 167, 69, 71, 62, 131, 108, 153, 61, 237, 111, 119, 190, 132, 12, 69, 60, 237, 85, 222, 61, 232, 128, 39, 190, 153, 118, 50, 191, 189, 44, 59, 62, 183, 18, 61, 62, 94, 188, 55, 191, 218, 57, 110, 62, 187, 66, 49, 190, 239, 106, 201, 186, 156, 50, 48, 62, 231, 63, 51, 62, 195, 233, 133, 62, 79, 119, 63, 62, 215, 234, 102, 190, 10, 120, 100, 189, 193, 19, 232, 189, 125, 50, 131, 58, 119, 87, 250, 190, 172, 96, 181, 190, 111, 239, 130, 190, 180, 49, 73, 189, 129, 191, 193, 61, 126, 32, 155, 61, 25, 101, 4, 61, 242, 127, 216, 190, 98, 61, 22, 190, 183, 93, 104, 190, 3, 139, 11, 191, 198, 59, 142, 188, 155, 54, 68, 189, 17, 68, 80, 61, 200, 191, 240, 61, 205, 161, 126, 61, 168, 130, 109, 61, 234, 188, 12, 62, 15, 244, 65, 190, 49, 104, 144, 61, 41, 57, 38, 190, 24, 172, 239, 61, 241, 221, 4, 190, 230, 188, 117, 61, 174, 15, 139, 61, 185, 22, 11, 190, 135, 124, 113, 60, 202, 198, 215, 61, 3, 147, 10, 190, 227, 102, 148, 189, 9, 175, 241, 61, 252, 245, 239, 189, 117, 64, 120, 61, 244, 151, 105, 61, 206, 47, 31, 188, 225, 129, 170, 188, 126, 209, 120, 188, 225, 79, 157, 189, 69, 96, 40, 190, 174, 190, 7, 62, 153, 147, 9, 62, 58, 255, 7, 190, 250, 62, 18, 190, 38, 48, 192, 189, 31, 107, 192, 188, 14, 145, 22, 61, 89, 245, 140, 61, 138, 0, 158, 189, 51, 45, 23, 190, 29, 169, 44, 191, 86, 14, 128, 61, 50, 62, 206, 61, 105, 143, 7, 191, 4, 62, 1, 62, 170, 140, 203, 189, 160, 48, 200, 61, 254, 29, 149, 62, 183, 92, 185, 62, 225, 142, 158, 190, 180, 158, 3, 189, 79, 34, 148, 189, 140, 220, 251, 189, 246, 84, 164, 61, 159, 156, 32, 62, 196, 73, 140, 190, 74, 75, 182, 189, 174, 28, 45, 62, 6, 29, 196, 189, 186, 86, 176, 62, 203, 166, 147, 189, 90, 67, 171, 61, 21, 22, 46, 190, 235, 228, 133, 60, 182, 9, 102, 60, 53, 131, 76, 190, 123, 166, 176, 62, 137, 171, 58, 189, 111, 208, 204, 62, 113, 74, 178, 190, 16, 75, 125, 62, 162, 142, 26, 189, 146, 127, 196, 191, 11, 139, 253, 62, 44, 204, 62, 62, 251, 80, 38, 190, 71, 192, 14, 191, 198, 109, 33, 61, 80, 77, 162, 191, 104, 143, 134, 187, 119, 20, 242, 59, 54, 240, 193, 62, 171, 145, 160, 189, 131, 223, 137, 190, 68, 22, 165, 190, 73, 243, 113, 62, 6, 120, 135, 61, 221, 162, 40, 190, 233, 159, 134, 189, 189, 227, 60, 191, 75, 77, 192, 62, 136, 239, 85, 61, 98, 77, 235, 189, 247, 188, 15, 190, 101, 219, 40, 61, 109, 39, 61, 60, 36, 49, 211, 60, 44, 75, 93, 61, 246, 57, 112, 62, 230, 152, 33, 62, 68, 231, 99, 61, 55, 240, 87, 62, 43, 45, 138, 62, 140, 125, 179, 189, 181, 95, 224, 189, 17, 134, 134, 189, 20, 83, 89, 188, 3, 138, 183, 189, 22, 169, 0, 61, 90, 232, 109, 189, 245, 112, 237, 189, 191, 88, 49, 190, 7, 186, 17, 190, 248, 124, 166, 189, 215, 75, 60, 61, 156, 203, 60, 187, 59, 164, 234, 189, 68, 78, 125, 59, 194, 38, 9, 62, 134, 221, 114, 189, 150, 102, 172, 189, 200, 150, 200, 59, 18, 139, 7, 190, 75, 70, 254, 189, 68, 39, 227, 61, 38, 134, 18, 190, 92, 2, 216, 189, 35, 252, 123, 61, 231, 144, 3, 62, 169, 108, 211, 188, 76, 171, 67, 190, 195, 70, 106, 188, 54, 95, 64, 189, 9, 234, 215, 189, 17, 53, 156, 61, 7, 4, 166, 61, 133, 50, 251, 190, 187, 201, 228, 62, 100, 240, 187, 61, 114, 179, 182, 190, 79, 173, 111, 62, 79, 123, 50, 60, 35, 109, 189, 187, 254, 161, 194, 62, 24, 10, 108, 62, 111, 50, 144, 191, 167, 8, 10, 191, 109, 147, 62, 191, 150, 231, 131, 190, 234, 9, 98, 190, 18, 194, 31, 62, 16, 184, 220, 190, 162, 84, 245, 189, 180, 81, 143, 190, 185, 210, 253, 190, 133, 206, 253, 61, 160, 115, 177, 189, 148, 131, 35, 189, 171, 175, 94, 190, 229, 172, 252, 189, 236, 252, 189, 60, 19, 36, 189, 189, 205, 100, 7, 61, 12, 242, 48, 190, 103, 79, 9, 62, 2, 245, 224, 189, 250, 221, 91, 190, 236, 17, 111, 190, 193, 204, 26, 191, 177, 137, 138, 61, 159, 20, 194, 62, 111, 191, 29, 191, 134, 1, 141, 190, 223, 96, 117, 61, 74, 19, 22, 190, 240, 11, 219, 62, 106, 139, 79, 62, 155, 187, 103, 191, 176, 102, 134, 190, 32, 116, 54, 191, 74, 14, 109, 60, 181, 39, 76, 62, 153, 97, 176, 61, 72, 96, 191, 190, 115, 197, 180, 190, 93, 52, 10, 191, 138, 124, 134, 190, 139, 48, 231, 190, 252, 248, 91, 190, 217, 223, 141, 188, 172, 213, 245, 190, 233, 102, 223, 189, 159, 13, 221, 190, 248, 117, 85, 190, 199, 166, 168, 60, 167, 188, 160, 62, 208, 100, 202, 188, 81, 141, 166, 190, 162, 57, 22, 63, 76, 118, 242, 189, 104, 248, 37, 191, 107, 111, 201, 62, 171, 207, 185, 61, 226, 149, 27, 190, 35, 30, 188, 61, 108, 24, 231, 187, 253, 88, 102, 60, 176, 200, 131, 62, 59, 66, 56, 62, 54, 0, 201, 191, 105, 148, 70, 191, 223, 31, 17, 191, 126, 132, 129, 188, 137, 54, 86, 190, 67, 102, 200, 61, 237, 49, 242, 190, 241, 21, 57, 190, 110, 219, 135, 189, 28, 42, 109, 62, 108, 145, 68, 190, 16, 36, 233, 188, 16, 2, 153, 189, 140, 141, 215, 189, 0, 196, 196, 189, 63, 201, 43, 189, 10, 15, 60, 188, 8, 65, 60, 61, 196, 191, 80, 190, 147, 208, 47, 62, 173, 157, 16, 190, 82, 197, 30, 190, 180, 172, 194, 190, 253, 54, 101, 62, 59, 142, 139, 61, 57, 139, 36, 62, 29, 174, 136, 62, 102, 26, 118, 62, 173, 32, 77, 62, 96, 236, 252, 188, 83, 203, 173, 62, 47, 191, 26, 62, 8, 118, 9, 63, 121, 169, 168, 61, 152, 101, 16, 62, 59, 170, 149, 62, 73, 123, 143, 190, 168, 206, 239, 189, 17, 33, 219, 61, 238, 109, 124, 190, 225, 187, 54, 190, 143, 148, 141, 61, 91, 52, 207, 190, 19, 2, 228, 61, 124, 180, 21, 62, 70, 141, 84, 189, 90, 193, 254, 61, 5, 150, 192, 190, 222, 60, 141, 189, 75, 251, 216, 61, 26, 203, 224, 190, 54, 132, 88, 190, 70, 3, 89, 58, 228, 241, 95, 190, 241, 182, 252, 62, 209, 76, 226, 190, 144, 109, 199, 190, 41, 83, 3, 191, 179, 137, 18, 62, 20, 227, 18, 191, 193, 20, 80, 61, 183, 156, 128, 61, 9, 246, 180, 62, 214, 165, 130, 191, 212, 150, 80, 191, 173, 244, 179, 190, 67, 45, 227, 189, 166, 154, 1, 190, 218, 94, 70, 62, 56, 121, 133, 190, 80, 101, 173, 62, 241, 62, 158, 61, 102, 186, 66, 191, 66, 73, 140, 62, 40, 216, 28, 191, 9, 130, 246, 190, 189, 5, 168, 190, 80, 208, 62, 62, 118, 166, 152, 190, 169, 207, 57, 62, 129, 49, 33, 62, 47, 117, 136, 191, 45, 155, 196, 62, 71, 135, 59, 191, 198, 5, 127, 190, 59, 239, 34, 62, 188, 161, 153, 190, 131, 19, 5, 188, 0, 104, 149, 191, 223, 220, 246, 60, 86, 54, 208, 62, 98, 237, 99, 191, 21, 203, 44, 61, 233, 122, 11, 62, 32, 187, 139, 62, 117, 25, 163, 189, 168, 61, 224, 190, 151, 99, 122, 59, 54, 155, 133, 61, 129, 66, 75, 62, 53, 45, 33, 189, 71, 108, 243, 61, 173, 157, 145, 62, 252, 20, 168, 190, 18, 111, 153, 190, 222, 146, 90, 62, 73, 20, 139, 189, 23, 54, 185, 189, 226, 31, 134, 62, 120, 33, 13, 62, 81, 242, 164, 189, 49, 102, 165, 62, 200, 104, 89, 62, 45, 113, 176, 189, 246, 147, 56, 190, 139, 244, 234, 190, 198, 111, 118, 61, 71, 6, 60, 62, 177, 212, 159, 186, 158, 211, 38, 62, 67, 247, 96, 191, 142, 1, 180, 191, 4, 135, 177, 62, 169, 68, 238, 62, 86, 241, 43, 61, 98, 182, 132, 62, 218, 17, 160, 189, 194, 130, 33, 191, 35, 207, 136, 62, 12, 79, 195, 61, 65, 156, 150, 62, 118, 111, 203, 62, 157, 132, 8, 62, 20, 156, 218, 190, 228, 212, 72, 62, 34, 81, 46, 189, 147, 199, 201, 61, 135, 0, 22, 189, 245, 31, 133, 190, 133, 24, 36, 191, 243, 98, 167, 190, 53, 50, 168, 62, 1, 198, 170, 190, 180, 152, 170, 60, 251, 199, 42, 189, 81, 80, 5, 191, 26, 210, 3, 190, 165, 248, 178, 190, 119, 207, 210, 190, 109, 207, 152, 61, 226, 63, 200, 62, 213, 230, 232, 189, 222, 133, 6, 188, 104, 122, 226, 189, 26, 233, 55, 61, 116, 85, 226, 189, 171, 164, 16, 190, 75, 193, 141, 61, 23, 107, 214, 61, 226, 194, 241, 61, 226, 132, 149, 60, 217, 217, 0, 190, 116, 80, 234, 61, 160, 52, 164, 189, 153, 62, 155, 61, 228, 14, 159, 189, 144, 224, 251, 187, 115, 159, 18, 190, 173, 203, 213, 61, 132, 182, 38, 190, 153, 202, 78, 60, 224, 50, 35, 60, 126, 180, 58, 190, 193, 69, 200, 189, 77, 58, 156, 61, 49, 106, 160, 61, 101, 28, 204, 189, 148, 8, 229, 61, 182, 186, 50, 190, 65, 214, 36, 190, 128, 203, 196, 61, 238, 73, 212, 188, 43, 188, 3, 61, 22, 78, 125, 62, 41, 6, 214, 61, 129, 161, 216, 61, 24, 69, 195, 62, 117, 228, 54, 191, 101, 251, 130, 191, 185, 129, 149, 191, 166, 193, 46, 190, 77, 21, 139, 190, 126, 95, 197, 188, 93, 39, 14, 190, 81, 88, 226, 62, 244, 220, 84, 189, 235, 56, 35, 189, 28, 22, 57, 61, 33, 166, 140, 62, 3, 221, 10, 192, 38, 64, 255, 190, 41, 233, 230, 62, 160, 165, 48, 190, 113, 189, 145, 191, 192, 133, 151, 190, 243, 236, 162, 62, 183, 190, 86, 191, 93, 37, 99, 189, 179, 223, 125, 62, 5, 82, 59, 189, 79, 126, 95, 190, 240, 171, 180, 190, 36, 79, 2, 63, 43, 172, 49, 190, 108, 162, 185, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 130, 196, 61, 124, 109, 199, 189, 85, 202, 23, 190, 26, 117, 90, 62, 158, 111, 62, 189, 113, 171, 135, 62, 171, 37, 189, 62, 115, 115, 219, 62, 70, 189, 120, 62, 232, 201, 146, 62, 198, 206, 156, 189, 183, 33, 150, 61, 209, 143, 178, 60, 73, 165, 51, 189, 206, 239, 43, 190, 149, 11, 78, 62, 9, 213, 59, 62, 219, 158, 52, 190, 191, 163, 7, 190, 29, 122, 195, 189, 33, 52, 154, 61, 222, 84, 199, 61, 35, 47, 14, 190, 237, 216, 147, 62, 88, 249, 137, 62, 175, 106, 86, 62, 183, 36, 60, 60, 109, 135, 143, 62, 168, 250, 206, 62, 30, 210, 229, 61, 113, 42, 74, 190, 233, 99, 171, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {13, 214, 30, 62, 209, 239, 187, 190, 144, 54, 247, 189, 91, 111, 134, 63, 107, 81, 50, 189, 194, 226, 69, 191, 235, 134, 6, 63, 249, 236, 69, 61, 93, 236, 20, 61, 63, 170, 171, 61, 117, 199, 206, 61, 185, 141, 9, 190, 6, 148, 110, 61, 128, 112, 224, 62, 50, 191, 166, 190, 196, 180, 104, 191, 215, 90, 154, 190, 29, 82, 81, 63, 210, 134, 147, 62, 174, 64, 150, 61, 10, 211, 86, 190, 144, 221, 25, 63, 255, 93, 0, 190, 169, 93, 42, 191, 143, 114, 51, 191, 7, 31, 200, 190, 128, 185, 115, 62, 52, 147, 151, 191, 45, 12, 131, 62, 185, 3, 87, 191, 162, 56, 178, 189, 104, 19, 173, 63, 168, 241, 42, 63, 24, 235, 35, 190, 139, 251, 133, 61, 171, 116, 5, 62, 151, 109, 19, 190, 119, 75, 233, 60, 201, 217, 7, 62, 164, 99, 207, 190, 240, 38, 213, 190, 9, 41, 171, 190, 13, 68, 7, 187, 232, 40, 50, 62, 59, 182, 140, 190, 149, 36, 36, 63, 186, 43, 24, 62, 104, 34, 156, 62, 121, 38, 183, 190, 237, 196, 41, 188, 125, 157, 157, 62, 66, 1, 29, 188, 60, 49, 187, 190, 103, 208, 53, 62, 215, 127, 225, 60, 20, 86, 56, 190, 61, 14, 173, 61, 70, 253, 174, 190, 21, 61, 83, 189, 85, 131, 187, 189, 80, 64, 156, 190, 24, 2, 51, 189, 150, 16, 186, 60, 123, 24, 201, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 200, 70, 61, 251, 90, 227, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {40, 64, 169, 63, 221, 22, 140, 191, 90, 171, 177, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {78, 203, 19, 62, 228, 92, 177, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0056/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}