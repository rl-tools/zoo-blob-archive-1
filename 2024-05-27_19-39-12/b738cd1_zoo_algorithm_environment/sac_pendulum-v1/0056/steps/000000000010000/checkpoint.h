// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 198, 121, 63, 71, 136, 203, 190, 28, 221, 168, 190, 190, 202, 123, 61, 214, 186, 139, 63, 169, 194, 56, 62, 190, 153, 172, 190, 90, 255, 13, 63, 108, 219, 212, 188, 61, 246, 97, 63, 82, 150, 130, 191, 0, 64, 105, 190, 232, 222, 31, 63, 197, 36, 114, 63, 105, 249, 152, 62, 34, 117, 151, 190, 121, 100, 52, 191, 165, 58, 238, 190, 9, 199, 162, 189, 86, 1, 20, 191, 210, 74, 155, 189, 113, 199, 198, 62, 61, 230, 45, 63, 129, 158, 108, 190, 202, 14, 31, 63, 232, 244, 95, 63, 80, 8, 120, 62, 142, 166, 1, 191, 212, 238, 177, 63, 65, 172, 2, 63, 46, 196, 69, 191, 52, 59, 249, 61, 19, 183, 105, 63, 177, 195, 21, 190, 102, 142, 175, 190, 228, 54, 236, 62, 108, 213, 235, 62, 140, 0, 32, 62, 211, 194, 190, 190, 135, 133, 180, 59, 253, 28, 225, 190, 171, 72, 25, 62, 18, 3, 184, 190, 246, 122, 246, 62, 64, 71, 158, 190, 41, 231, 79, 63, 170, 80, 93, 190, 203, 104, 39, 190, 13, 232, 114, 190, 167, 247, 154, 191, 171, 6, 223, 190, 239, 71, 72, 63, 63, 196, 198, 62, 67, 106, 195, 62, 218, 127, 57, 191, 80, 144, 57, 191, 129, 242, 12, 62, 23, 156, 85, 63, 240, 18, 106, 62, 222, 200, 226, 62, 105, 19, 211, 190, 61, 130, 249, 190, 122, 58, 13, 191, 232, 193, 162, 62, 163, 248, 66, 63, 109, 223, 143, 190, 12, 243, 188, 62, 205, 155, 79, 191, 236, 228, 66, 62, 239, 26, 246, 190, 80, 67, 140, 190, 159, 100, 20, 191, 118, 246, 209, 62, 221, 213, 14, 191, 216, 159, 180, 62, 76, 209, 234, 62, 56, 40, 63, 191, 54, 144, 54, 190, 84, 188, 173, 62, 137, 184, 72, 63, 193, 184, 5, 62, 19, 137, 134, 189, 87, 58, 149, 189, 176, 165, 137, 62, 182, 174, 30, 63, 68, 7, 139, 63, 255, 13, 252, 62, 249, 231, 1, 191, 233, 53, 20, 63, 197, 228, 74, 190, 23, 216, 120, 60, 157, 123, 198, 190, 192, 160, 189, 62, 106, 34, 143, 60, 26, 209, 71, 189, 217, 104, 4, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 65, 131, 191, 52, 193, 198, 60, 84, 27, 232, 62, 82, 196, 121, 190, 66, 182, 192, 190, 103, 81, 192, 62, 39, 186, 64, 191, 220, 182, 242, 62, 75, 52, 206, 62, 9, 67, 90, 190, 56, 24, 193, 190, 22, 167, 51, 191, 212, 64, 87, 62, 234, 36, 248, 61, 33, 4, 73, 62, 34, 21, 219, 190, 157, 214, 71, 190, 52, 225, 112, 191, 6, 66, 4, 63, 14, 6, 36, 62, 231, 249, 238, 190, 17, 153, 162, 61, 199, 99, 183, 62, 190, 150, 12, 191, 35, 66, 83, 62, 231, 182, 110, 62, 146, 201, 187, 62, 162, 88, 198, 189, 176, 39, 78, 61, 90, 107, 176, 190, 152, 3, 160, 189, 21, 154, 161, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {55, 15, 166, 190, 167, 126, 128, 190, 83, 119, 45, 190, 29, 24, 246, 61, 37, 220, 134, 190, 215, 28, 143, 62, 183, 246, 23, 190, 194, 206, 118, 189, 246, 13, 156, 188, 86, 52, 212, 189, 80, 184, 185, 189, 26, 86, 231, 61, 229, 239, 249, 188, 205, 14, 135, 62, 199, 162, 10, 190, 84, 215, 152, 189, 91, 189, 25, 190, 82, 16, 163, 190, 191, 117, 220, 60, 255, 211, 61, 60, 132, 235, 66, 60, 107, 179, 214, 189, 21, 214, 139, 62, 247, 96, 115, 190, 114, 141, 174, 61, 10, 147, 110, 58, 158, 255, 212, 59, 237, 171, 149, 189, 38, 18, 138, 190, 182, 81, 115, 190, 110, 95, 100, 62, 139, 48, 59, 190, 238, 207, 160, 62, 95, 53, 221, 190, 177, 29, 2, 190, 59, 127, 215, 60, 45, 103, 98, 62, 105, 213, 237, 61, 210, 61, 8, 191, 127, 115, 44, 62, 76, 25, 230, 59, 158, 59, 78, 190, 202, 20, 82, 190, 191, 15, 113, 190, 191, 171, 155, 190, 206, 170, 111, 62, 238, 99, 245, 61, 2, 164, 80, 189, 90, 249, 109, 62, 107, 62, 176, 62, 44, 75, 44, 62, 77, 168, 66, 62, 46, 10, 100, 62, 26, 169, 135, 190, 101, 147, 156, 189, 155, 230, 145, 60, 165, 45, 134, 62, 156, 38, 136, 62, 237, 239, 20, 190, 237, 79, 253, 189, 11, 198, 95, 62, 186, 157, 32, 191, 89, 240, 218, 62, 214, 243, 79, 59, 3, 44, 92, 189, 53, 253, 196, 189, 33, 22, 29, 190, 58, 224, 37, 190, 145, 54, 50, 190, 64, 39, 165, 189, 180, 175, 43, 190, 93, 127, 168, 189, 68, 109, 14, 189, 91, 150, 1, 60, 247, 252, 79, 187, 220, 253, 64, 61, 236, 82, 128, 189, 94, 69, 15, 62, 52, 69, 16, 61, 77, 252, 6, 62, 51, 19, 40, 62, 42, 66, 23, 190, 37, 120, 10, 61, 92, 30, 139, 60, 131, 38, 211, 61, 83, 70, 76, 61, 46, 182, 164, 189, 177, 226, 160, 189, 50, 16, 21, 190, 88, 224, 174, 58, 70, 155, 25, 62, 118, 53, 3, 189, 252, 111, 156, 61, 216, 12, 111, 61, 17, 222, 5, 62, 149, 32, 32, 190, 98, 83, 61, 187, 159, 36, 91, 61, 41, 155, 183, 61, 226, 147, 26, 62, 198, 224, 217, 190, 171, 181, 146, 59, 146, 169, 47, 189, 249, 174, 69, 190, 172, 12, 149, 190, 81, 211, 51, 190, 240, 252, 110, 189, 157, 29, 132, 189, 62, 236, 56, 189, 86, 44, 69, 191, 22, 77, 47, 62, 144, 5, 43, 62, 238, 146, 80, 191, 81, 247, 166, 190, 34, 59, 59, 62, 98, 146, 132, 190, 133, 224, 28, 191, 79, 39, 71, 186, 217, 199, 200, 189, 119, 60, 61, 191, 228, 199, 28, 191, 241, 52, 17, 190, 94, 65, 206, 189, 36, 110, 131, 190, 66, 108, 182, 190, 130, 234, 8, 63, 223, 161, 54, 191, 30, 156, 21, 190, 124, 38, 196, 189, 117, 9, 54, 189, 52, 209, 52, 61, 198, 239, 130, 60, 165, 153, 11, 62, 113, 247, 14, 190, 182, 167, 248, 189, 138, 169, 172, 60, 187, 82, 254, 189, 216, 74, 164, 189, 200, 95, 49, 190, 51, 139, 201, 189, 96, 157, 145, 189, 238, 75, 134, 188, 111, 210, 8, 190, 189, 139, 167, 189, 136, 195, 78, 61, 249, 250, 23, 190, 221, 69, 23, 190, 60, 177, 32, 190, 71, 122, 242, 60, 9, 145, 6, 62, 28, 16, 37, 190, 63, 10, 244, 61, 74, 121, 162, 61, 87, 135, 180, 61, 190, 11, 140, 61, 156, 136, 175, 189, 66, 68, 23, 190, 58, 245, 219, 189, 230, 164, 49, 62, 146, 212, 135, 189, 25, 86, 194, 190, 25, 67, 37, 61, 4, 118, 244, 61, 204, 26, 230, 190, 78, 83, 193, 190, 96, 240, 243, 61, 215, 167, 137, 60, 34, 101, 163, 62, 208, 123, 2, 61, 93, 113, 191, 191, 0, 84, 132, 191, 242, 121, 23, 191, 153, 83, 216, 189, 242, 141, 0, 62, 35, 221, 170, 62, 35, 178, 49, 191, 197, 155, 7, 60, 21, 145, 187, 188, 166, 150, 40, 62, 47, 31, 76, 190, 113, 164, 85, 62, 100, 181, 125, 190, 66, 204, 198, 189, 116, 116, 153, 189, 227, 87, 125, 190, 2, 96, 20, 190, 28, 209, 216, 189, 9, 104, 42, 188, 68, 37, 169, 190, 88, 160, 168, 190, 33, 24, 165, 62, 89, 213, 53, 191, 85, 72, 7, 61, 210, 173, 117, 190, 189, 179, 213, 61, 89, 0, 195, 62, 66, 148, 54, 191, 96, 118, 71, 188, 214, 7, 125, 61, 16, 10, 131, 190, 231, 123, 153, 188, 101, 35, 103, 62, 139, 59, 174, 61, 247, 30, 132, 188, 178, 29, 190, 61, 12, 194, 252, 189, 119, 242, 153, 189, 9, 218, 225, 61, 45, 32, 40, 190, 188, 58, 4, 191, 248, 109, 173, 62, 150, 137, 22, 190, 172, 131, 26, 190, 185, 49, 111, 189, 46, 88, 20, 62, 17, 247, 56, 190, 251, 232, 16, 189, 174, 53, 158, 62, 129, 192, 140, 61, 97, 184, 222, 189, 169, 141, 2, 190, 21, 53, 87, 190, 180, 11, 198, 190, 217, 174, 165, 62, 130, 143, 26, 190, 222, 246, 173, 61, 15, 189, 79, 62, 82, 86, 72, 62, 36, 162, 192, 190, 214, 114, 144, 189, 204, 138, 35, 189, 14, 170, 3, 62, 141, 18, 61, 61, 131, 60, 47, 190, 77, 126, 245, 60, 108, 13, 144, 62, 87, 13, 122, 61, 136, 199, 58, 188, 58, 68, 131, 189, 57, 38, 4, 62, 217, 81, 19, 190, 128, 42, 188, 61, 230, 191, 152, 61, 212, 157, 63, 62, 184, 76, 231, 189, 44, 8, 40, 62, 92, 84, 175, 62, 235, 180, 250, 60, 249, 111, 241, 61, 205, 44, 202, 61, 102, 93, 103, 61, 78, 196, 78, 59, 163, 31, 129, 189, 150, 91, 206, 189, 22, 244, 38, 190, 37, 156, 23, 60, 77, 51, 28, 191, 115, 12, 156, 190, 13, 57, 43, 61, 184, 49, 152, 61, 231, 82, 22, 191, 231, 219, 23, 191, 113, 19, 130, 190, 162, 183, 129, 62, 20, 130, 15, 62, 141, 103, 33, 189, 209, 82, 25, 188, 157, 173, 59, 62, 241, 185, 236, 61, 202, 69, 135, 60, 202, 133, 157, 189, 97, 235, 244, 187, 109, 55, 244, 190, 210, 10, 147, 189, 81, 224, 122, 62, 190, 11, 19, 62, 72, 20, 176, 190, 8, 63, 228, 61, 30, 246, 108, 60, 138, 182, 41, 191, 0, 229, 2, 190, 198, 119, 249, 189, 40, 252, 6, 62, 221, 41, 214, 61, 67, 245, 180, 189, 39, 35, 233, 60, 96, 74, 119, 190, 32, 33, 49, 188, 124, 4, 21, 189, 56, 240, 203, 190, 146, 228, 183, 61, 179, 233, 204, 62, 120, 190, 49, 191, 118, 86, 26, 62, 252, 66, 241, 60, 210, 108, 53, 61, 29, 8, 120, 62, 140, 25, 164, 190, 4, 175, 164, 61, 193, 23, 27, 62, 59, 189, 207, 61, 195, 245, 105, 62, 100, 135, 24, 62, 230, 120, 34, 62, 126, 103, 184, 188, 153, 96, 131, 190, 218, 217, 187, 61, 248, 215, 50, 62, 107, 88, 205, 189, 49, 88, 84, 62, 125, 230, 200, 61, 245, 48, 133, 190, 89, 134, 165, 61, 38, 89, 239, 61, 40, 204, 211, 60, 81, 152, 145, 189, 74, 18, 27, 190, 74, 115, 29, 61, 73, 63, 140, 190, 202, 242, 170, 60, 4, 136, 226, 189, 137, 107, 160, 189, 189, 168, 0, 190, 37, 207, 31, 62, 57, 34, 148, 189, 236, 205, 26, 61, 45, 4, 185, 61, 3, 14, 38, 190, 48, 4, 11, 62, 210, 11, 181, 60, 103, 200, 2, 62, 39, 207, 65, 189, 166, 119, 233, 189, 162, 223, 120, 189, 17, 237, 39, 190, 130, 170, 243, 189, 23, 0, 44, 61, 25, 143, 53, 61, 5, 130, 13, 190, 236, 114, 136, 189, 123, 43, 109, 61, 73, 226, 35, 190, 116, 48, 24, 189, 254, 0, 137, 61, 33, 220, 139, 188, 194, 137, 237, 189, 120, 244, 213, 61, 146, 195, 247, 189, 92, 60, 228, 189, 80, 245, 55, 57, 70, 202, 174, 61, 80, 65, 241, 188, 48, 231, 145, 189, 100, 129, 0, 62, 120, 209, 3, 190, 104, 155, 26, 190, 192, 100, 1, 190, 247, 141, 67, 61, 57, 73, 28, 190, 49, 159, 217, 189, 136, 191, 255, 189, 119, 96, 236, 189, 183, 30, 227, 61, 123, 8, 130, 189, 245, 137, 201, 189, 171, 11, 116, 188, 229, 64, 249, 188, 43, 147, 14, 190, 109, 247, 155, 61, 145, 42, 169, 61, 186, 230, 8, 190, 88, 27, 16, 190, 122, 85, 14, 61, 145, 100, 17, 189, 32, 6, 17, 190, 80, 192, 44, 190, 199, 119, 240, 61, 35, 212, 255, 189, 172, 17, 141, 189, 65, 22, 31, 190, 34, 187, 236, 189, 136, 161, 6, 61, 67, 185, 52, 190, 206, 35, 163, 61, 113, 181, 44, 62, 20, 116, 194, 61, 15, 35, 68, 62, 145, 252, 14, 62, 231, 245, 230, 61, 210, 170, 245, 61, 248, 149, 51, 62, 171, 191, 79, 189, 129, 153, 106, 62, 244, 150, 145, 62, 84, 47, 145, 61, 108, 156, 129, 189, 114, 251, 225, 188, 149, 5, 194, 190, 94, 43, 203, 189, 213, 74, 77, 62, 182, 230, 208, 61, 246, 98, 162, 62, 120, 240, 200, 189, 194, 165, 238, 189, 24, 239, 212, 58, 138, 37, 90, 62, 3, 8, 92, 62, 126, 51, 192, 59, 47, 133, 119, 190, 225, 233, 15, 62, 22, 227, 141, 62, 68, 49, 64, 190, 75, 73, 138, 188, 207, 20, 162, 61, 11, 174, 194, 190, 134, 165, 28, 62, 178, 29, 241, 62, 6, 80, 39, 191, 184, 134, 216, 190, 105, 192, 154, 62, 226, 72, 47, 191, 9, 207, 9, 189, 231, 12, 32, 62, 61, 190, 162, 59, 64, 144, 79, 189, 73, 238, 12, 190, 1, 103, 204, 60, 237, 150, 0, 62, 181, 138, 186, 62, 126, 245, 91, 62, 158, 54, 112, 190, 232, 40, 11, 63, 247, 178, 160, 189, 40, 150, 20, 190, 225, 118, 24, 191, 114, 228, 249, 189, 206, 146, 100, 190, 174, 27, 4, 60, 106, 87, 12, 61, 152, 49, 235, 61, 125, 213, 48, 62, 195, 39, 43, 62, 117, 45, 114, 190, 69, 70, 156, 62, 85, 249, 18, 191, 179, 156, 45, 62, 226, 195, 232, 62, 1, 16, 17, 62, 107, 58, 139, 189, 72, 97, 16, 190, 116, 157, 11, 191, 78, 133, 31, 191, 97, 121, 165, 62, 51, 36, 116, 189, 39, 151, 187, 60, 29, 36, 175, 62, 89, 242, 10, 62, 216, 202, 159, 189, 49, 246, 193, 189, 136, 100, 141, 61, 89, 46, 135, 62, 28, 180, 166, 188, 142, 211, 26, 62, 196, 190, 63, 190, 120, 79, 51, 190, 98, 159, 146, 62, 19, 214, 246, 190, 66, 49, 129, 62, 228, 147, 95, 190, 232, 74, 80, 62, 27, 214, 133, 61, 255, 215, 171, 189, 102, 85, 160, 61, 172, 89, 146, 190, 253, 14, 120, 61, 116, 178, 254, 61, 98, 12, 85, 62, 174, 214, 115, 190, 255, 81, 106, 62, 226, 186, 44, 189, 223, 126, 60, 190, 82, 231, 132, 190, 64, 6, 62, 62, 212, 182, 6, 191, 146, 16, 82, 61, 39, 90, 60, 62, 148, 68, 40, 190, 174, 249, 218, 61, 154, 67, 207, 190, 233, 96, 167, 191, 26, 209, 57, 191, 249, 100, 186, 190, 115, 182, 155, 190, 32, 121, 133, 61, 174, 116, 74, 62, 162, 124, 107, 191, 143, 200, 77, 62, 169, 159, 173, 189, 40, 125, 233, 61, 18, 156, 225, 190, 17, 160, 100, 61, 107, 157, 84, 190, 59, 146, 159, 188, 168, 237, 37, 62, 29, 76, 150, 190, 170, 177, 190, 188, 248, 190, 36, 191, 37, 3, 15, 62, 142, 198, 53, 190, 28, 176, 163, 189, 125, 52, 81, 62, 33, 5, 15, 191, 88, 212, 223, 190, 127, 214, 209, 190, 68, 4, 7, 62, 188, 222, 146, 190, 204, 8, 121, 189, 16, 83, 218, 189, 122, 90, 66, 62, 198, 101, 66, 62, 138, 129, 165, 62, 170, 122, 12, 191, 29, 253, 96, 190, 236, 42, 183, 190, 67, 60, 152, 190, 201, 241, 131, 62, 139, 32, 251, 61, 229, 69, 5, 190, 187, 20, 140, 61, 19, 23, 137, 189, 190, 26, 121, 188, 225, 122, 19, 62, 206, 45, 140, 61, 50, 199, 7, 61, 54, 82, 97, 187, 245, 108, 20, 62, 205, 31, 158, 62, 188, 165, 103, 62, 14, 15, 5, 62, 178, 159, 163, 61, 228, 98, 155, 61, 190, 39, 114, 190, 167, 165, 132, 62, 236, 129, 173, 190, 179, 253, 152, 62, 24, 208, 28, 191, 173, 223, 183, 190, 105, 79, 4, 63, 61, 15, 100, 191, 223, 126, 78, 190, 60, 176, 93, 62, 115, 158, 186, 190, 53, 125, 77, 190, 225, 124, 154, 190, 49, 13, 144, 187, 26, 249, 135, 190, 54, 96, 38, 190, 33, 10, 224, 62, 174, 27, 61, 190, 35, 4, 12, 62, 249, 161, 176, 189, 254, 132, 196, 190, 65, 18, 164, 61, 168, 115, 48, 62, 165, 133, 73, 59, 81, 53, 179, 189, 23, 196, 133, 62, 75, 196, 150, 61, 97, 90, 188, 62, 201, 220, 161, 186, 6, 61, 219, 61, 4, 228, 208, 61, 180, 177, 83, 190, 113, 162, 168, 60, 41, 110, 204, 61, 214, 184, 45, 190, 81, 188, 248, 60, 142, 152, 248, 189, 166, 244, 188, 61, 110, 36, 18, 190, 158, 183, 222, 61, 51, 81, 242, 189, 239, 106, 201, 186, 94, 205, 235, 61, 49, 217, 250, 61, 165, 146, 212, 59, 108, 79, 28, 62, 148, 169, 65, 190, 150, 120, 88, 189, 158, 16, 3, 188, 63, 254, 114, 188, 115, 211, 40, 189, 57, 188, 96, 190, 114, 254, 30, 61, 109, 106, 85, 189, 98, 171, 11, 62, 37, 74, 127, 61, 144, 235, 184, 188, 191, 219, 34, 190, 65, 208, 22, 190, 254, 91, 130, 189, 238, 99, 22, 190, 217, 119, 199, 189, 213, 199, 178, 189, 147, 117, 17, 189, 120, 203, 160, 61, 193, 163, 242, 61, 181, 42, 5, 62, 234, 188, 12, 62, 232, 191, 65, 190, 6, 131, 151, 61, 41, 57, 38, 190, 24, 172, 239, 61, 156, 236, 3, 190, 230, 188, 117, 61, 174, 15, 139, 61, 185, 22, 11, 190, 217, 170, 167, 60, 161, 102, 236, 61, 214, 100, 10, 190, 227, 102, 148, 189, 134, 109, 247, 61, 18, 213, 239, 189, 117, 64, 120, 61, 244, 151, 105, 61, 206, 47, 31, 188, 164, 210, 61, 188, 129, 251, 117, 188, 225, 79, 157, 189, 69, 96, 40, 190, 78, 90, 10, 62, 153, 147, 9, 62, 26, 111, 5, 190, 250, 62, 18, 190, 100, 206, 191, 189, 145, 35, 172, 188, 14, 145, 22, 61, 89, 245, 140, 61, 4, 25, 150, 189, 125, 211, 18, 190, 74, 223, 18, 191, 141, 191, 8, 189, 171, 47, 92, 59, 227, 114, 188, 190, 102, 195, 240, 61, 162, 39, 124, 189, 66, 36, 210, 61, 175, 135, 152, 62, 66, 163, 178, 62, 89, 238, 184, 189, 5, 23, 94, 189, 18, 185, 251, 189, 150, 174, 5, 190, 93, 244, 59, 61, 110, 9, 254, 61, 171, 45, 111, 190, 157, 128, 0, 61, 48, 52, 178, 187, 34, 147, 21, 190, 143, 200, 193, 62, 217, 84, 165, 60, 120, 83, 29, 61, 121, 61, 248, 189, 79, 74, 147, 61, 92, 233, 35, 61, 129, 162, 237, 189, 238, 168, 156, 62, 9, 99, 68, 189, 161, 231, 192, 62, 240, 118, 189, 190, 143, 113, 45, 62, 117, 151, 41, 190, 225, 142, 145, 191, 174, 28, 201, 61, 62, 166, 255, 61, 192, 148, 16, 189, 206, 115, 15, 191, 89, 118, 182, 61, 134, 208, 74, 191, 71, 7, 129, 61, 149, 81, 41, 190, 172, 4, 252, 61, 135, 163, 231, 189, 224, 62, 63, 190, 47, 171, 87, 190, 78, 174, 122, 62, 74, 163, 213, 61, 4, 35, 142, 61, 188, 184, 9, 61, 58, 205, 242, 190, 144, 97, 164, 62, 48, 65, 81, 189, 74, 26, 7, 190, 75, 3, 66, 189, 202, 166, 212, 61, 70, 3, 171, 60, 36, 14, 212, 60, 1, 183, 8, 62, 210, 190, 24, 62, 112, 157, 3, 62, 30, 18, 252, 188, 59, 26, 135, 62, 35, 6, 113, 62, 28, 101, 0, 190, 181, 95, 224, 189, 17, 134, 134, 189, 20, 83, 89, 188, 3, 138, 183, 189, 164, 246, 9, 61, 90, 232, 109, 189, 245, 112, 237, 189, 191, 88, 49, 190, 173, 147, 15, 190, 206, 8, 148, 189, 54, 4, 101, 61, 250, 253, 137, 59, 59, 164, 234, 189, 221, 82, 118, 60, 194, 38, 9, 62, 134, 221, 114, 189, 150, 102, 172, 189, 1, 130, 30, 60, 181, 208, 247, 189, 31, 114, 237, 189, 68, 39, 227, 61, 38, 134, 18, 190, 240, 224, 196, 189, 35, 252, 123, 61, 26, 189, 12, 62, 224, 238, 207, 188, 76, 171, 67, 190, 45, 37, 244, 187, 136, 47, 50, 189, 9, 234, 215, 189, 85, 239, 177, 61, 205, 43, 185, 61, 6, 254, 232, 190, 228, 121, 113, 62, 6, 146, 75, 61, 98, 211, 142, 190, 6, 211, 129, 62, 103, 208, 162, 61, 204, 20, 184, 188, 34, 63, 196, 62, 10, 71, 86, 62, 87, 20, 26, 191, 238, 133, 40, 191, 89, 34, 50, 191, 127, 239, 139, 190, 173, 178, 7, 190, 71, 137, 31, 62, 173, 159, 228, 190, 87, 219, 235, 60, 18, 149, 232, 190, 193, 141, 21, 61, 71, 163, 43, 62, 138, 19, 54, 61, 127, 110, 146, 189, 114, 5, 59, 190, 51, 112, 1, 189, 89, 196, 118, 61, 156, 120, 73, 189, 88, 227, 239, 185, 115, 125, 209, 189, 127, 202, 234, 61, 4, 237, 212, 189, 237, 15, 92, 61, 83, 145, 181, 190, 109, 11, 11, 191, 192, 123, 52, 62, 98, 54, 198, 62, 1, 31, 22, 191, 197, 148, 114, 62, 163, 194, 203, 61, 236, 157, 20, 190, 181, 234, 216, 62, 115, 17, 27, 62, 177, 253, 126, 190, 189, 198, 225, 190, 211, 87, 131, 191, 16, 195, 250, 188, 183, 20, 78, 189, 166, 63, 188, 61, 68, 241, 3, 191, 115, 199, 132, 190, 27, 91, 150, 190, 93, 63, 87, 190, 208, 124, 170, 189, 59, 197, 200, 189, 134, 73, 68, 189, 137, 165, 227, 190, 170, 0, 213, 188, 8, 91, 134, 190, 249, 167, 142, 190, 188, 64, 242, 58, 140, 18, 75, 189, 226, 205, 66, 61, 165, 152, 148, 190, 50, 171, 73, 62, 64, 45, 218, 189, 182, 154, 21, 191, 147, 26, 198, 61, 171, 120, 19, 60, 251, 148, 145, 189, 2, 167, 241, 61, 103, 122, 8, 61, 65, 72, 7, 188, 177, 105, 133, 62, 7, 48, 33, 62, 67, 207, 101, 191, 194, 27, 66, 191, 223, 31, 17, 191, 0, 0, 229, 188, 15, 223, 21, 190, 161, 220, 180, 61, 212, 48, 244, 190, 101, 109, 188, 189, 186, 191, 14, 190, 63, 193, 70, 62, 121, 163, 15, 190, 97, 153, 190, 61, 122, 59, 219, 189, 134, 2, 156, 189, 147, 215, 128, 185, 164, 255, 127, 60, 118, 223, 215, 60, 237, 85, 44, 59, 243, 239, 4, 190, 240, 26, 16, 62, 27, 243, 15, 190, 136, 15, 12, 62, 233, 27, 4, 191, 250, 223, 141, 62, 82, 200, 47, 62, 180, 238, 32, 62, 19, 190, 153, 62, 122, 12, 137, 62, 38, 109, 79, 62, 71, 117, 41, 62, 26, 111, 168, 62, 80, 159, 48, 62, 209, 111, 179, 62, 105, 160, 161, 60, 228, 192, 6, 62, 85, 65, 165, 62, 201, 79, 151, 190, 214, 6, 252, 189, 46, 178, 29, 62, 145, 198, 64, 190, 59, 162, 61, 189, 153, 21, 163, 189, 112, 244, 201, 190, 183, 149, 136, 61, 133, 165, 35, 62, 196, 83, 104, 188, 254, 75, 220, 61, 236, 108, 171, 190, 135, 100, 200, 188, 123, 198, 237, 61, 214, 0, 4, 191, 93, 83, 39, 190, 107, 215, 168, 57, 115, 192, 141, 190, 213, 18, 10, 63, 176, 197, 17, 190, 31, 152, 173, 190, 10, 206, 36, 190, 7, 11, 155, 60, 202, 186, 194, 190, 207, 233, 158, 60, 31, 127, 96, 60, 14, 244, 46, 62, 128, 214, 206, 190, 98, 197, 6, 191, 126, 68, 185, 190, 174, 69, 38, 190, 38, 182, 138, 190, 121, 21, 61, 62, 4, 78, 178, 188, 165, 18, 4, 62, 250, 166, 197, 59, 5, 51, 228, 190, 21, 27, 163, 62, 63, 161, 39, 190, 172, 169, 110, 190, 179, 46, 117, 190, 90, 218, 103, 61, 233, 211, 59, 189, 132, 11, 53, 62, 189, 246, 144, 59, 201, 42, 7, 191, 118, 127, 189, 62, 194, 33, 187, 190, 18, 11, 159, 190, 183, 165, 169, 62, 197, 140, 170, 189, 123, 10, 134, 60, 150, 252, 51, 191, 60, 24, 72, 61, 0, 204, 209, 62, 217, 26, 76, 191, 47, 110, 81, 61, 164, 161, 45, 62, 198, 121, 131, 62, 60, 155, 106, 189, 82, 7, 133, 190, 182, 194, 181, 61, 59, 19, 33, 62, 221, 95, 94, 62, 42, 200, 32, 189, 7, 15, 1, 62, 114, 214, 148, 62, 63, 82, 110, 190, 185, 54, 66, 190, 134, 223, 1, 62, 168, 122, 173, 189, 93, 176, 254, 189, 120, 99, 140, 62, 228, 10, 4, 62, 186, 253, 171, 189, 216, 65, 171, 62, 135, 81, 82, 62, 14, 125, 134, 189, 100, 58, 13, 190, 159, 124, 180, 190, 112, 119, 199, 61, 227, 121, 18, 62, 9, 158, 71, 60, 194, 144, 88, 62, 50, 249, 15, 191, 248, 143, 252, 190, 183, 205, 132, 62, 97, 3, 153, 62, 101, 55, 39, 189, 36, 245, 139, 61, 250, 169, 48, 190, 229, 53, 9, 191, 215, 135, 162, 62, 128, 255, 167, 61, 176, 198, 80, 62, 98, 231, 131, 62, 58, 132, 174, 61, 224, 71, 157, 190, 86, 91, 52, 61, 5, 19, 71, 190, 195, 38, 165, 189, 22, 238, 176, 188, 230, 31, 123, 190, 90, 14, 234, 190, 121, 117, 165, 190, 196, 131, 126, 62, 5, 128, 53, 190, 183, 133, 49, 189, 159, 60, 238, 189, 113, 108, 141, 190, 54, 161, 10, 190, 46, 122, 206, 190, 192, 4, 217, 190, 168, 100, 150, 61, 166, 248, 198, 62, 213, 230, 232, 189, 222, 133, 6, 188, 104, 122, 226, 189, 26, 233, 55, 61, 116, 85, 226, 189, 171, 164, 16, 190, 75, 193, 141, 61, 23, 107, 214, 61, 226, 194, 241, 61, 226, 132, 149, 60, 217, 217, 0, 190, 116, 80, 234, 61, 160, 52, 164, 189, 153, 62, 155, 61, 228, 14, 159, 189, 144, 224, 251, 187, 115, 159, 18, 190, 173, 203, 213, 61, 132, 182, 38, 190, 153, 202, 78, 60, 224, 50, 35, 60, 126, 180, 58, 190, 193, 69, 200, 189, 77, 58, 156, 61, 49, 106, 160, 61, 101, 28, 204, 189, 148, 8, 229, 61, 182, 186, 50, 190, 65, 214, 36, 190, 128, 203, 196, 61, 238, 73, 212, 188, 43, 188, 3, 61, 206, 113, 142, 189, 20, 254, 103, 62, 186, 124, 16, 62, 100, 69, 210, 62, 128, 44, 12, 191, 224, 207, 170, 190, 74, 180, 43, 190, 127, 204, 4, 190, 254, 134, 105, 190, 44, 129, 157, 189, 44, 15, 9, 190, 120, 105, 237, 62, 152, 50, 176, 60, 227, 226, 163, 189, 167, 174, 251, 189, 90, 171, 167, 62, 242, 169, 138, 191, 117, 14, 215, 190, 247, 230, 254, 62, 60, 37, 26, 190, 187, 227, 144, 191, 217, 95, 129, 190, 107, 88, 180, 62, 49, 78, 102, 191, 59, 166, 87, 189, 17, 95, 146, 62, 112, 126, 149, 60, 9, 199, 122, 190, 71, 99, 133, 190, 185, 69, 162, 62, 84, 165, 91, 190, 188, 125, 208, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 200, 122, 60, 125, 18, 104, 189, 208, 240, 22, 190, 224, 37, 15, 62, 158, 111, 62, 189, 137, 141, 147, 62, 213, 133, 160, 62, 244, 154, 216, 62, 233, 247, 121, 62, 158, 114, 145, 62, 84, 50, 153, 189, 183, 33, 150, 61, 133, 240, 157, 61, 20, 233, 28, 189, 0, 232, 58, 190, 170, 216, 58, 62, 66, 147, 53, 62, 238, 123, 158, 189, 6, 175, 170, 189, 126, 210, 183, 189, 186, 147, 177, 61, 0, 167, 175, 61, 180, 83, 6, 190, 230, 241, 152, 62, 171, 100, 111, 62, 236, 52, 80, 62, 97, 66, 12, 61, 19, 153, 93, 62, 154, 21, 206, 62, 193, 26, 245, 61, 113, 42, 74, 190, 208, 193, 188, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 154, 245, 61, 109, 174, 203, 190, 254, 146, 247, 189, 47, 199, 77, 63, 107, 81, 50, 189, 180, 62, 101, 191, 46, 101, 255, 62, 203, 89, 182, 61, 10, 167, 133, 60, 54, 242, 220, 61, 118, 225, 206, 61, 185, 141, 9, 190, 109, 182, 15, 62, 28, 10, 122, 62, 15, 255, 190, 190, 89, 239, 33, 191, 240, 182, 182, 190, 16, 14, 29, 63, 108, 104, 87, 61, 47, 34, 151, 61, 94, 34, 97, 190, 163, 238, 156, 62, 21, 102, 0, 190, 49, 31, 56, 191, 79, 21, 37, 191, 138, 118, 238, 190, 197, 108, 148, 62, 92, 115, 57, 191, 222, 50, 102, 62, 120, 108, 27, 191, 162, 56, 178, 189, 38, 74, 138, 63, 158, 253, 222, 62, 170, 8, 103, 189, 65, 202, 133, 61, 155, 247, 117, 62, 151, 109, 19, 190, 178, 109, 225, 58, 234, 16, 100, 189, 255, 178, 167, 190, 91, 114, 215, 190, 239, 219, 134, 190, 192, 243, 7, 187, 232, 40, 50, 62, 241, 32, 253, 189, 113, 190, 29, 63, 48, 63, 191, 62, 249, 198, 206, 61, 165, 65, 154, 190, 166, 31, 51, 62, 247, 143, 185, 61, 142, 63, 35, 188, 224, 42, 94, 190, 133, 240, 166, 62, 199, 156, 225, 60, 214, 172, 80, 61, 210, 239, 87, 62, 111, 41, 147, 61, 136, 194, 17, 62, 24, 8, 162, 188, 53, 241, 133, 190, 72, 84, 5, 62, 150, 16, 186, 60, 16, 6, 90, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {79, 188, 41, 61, 149, 222, 171, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {30, 208, 37, 63, 120, 208, 25, 63, 51, 45, 234, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {21, 232, 26, 192, 8, 143, 80, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0056/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}