// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 129, 66, 63, 64, 244, 130, 63, 219, 151, 199, 62, 91, 157, 21, 63, 168, 129, 161, 63, 189, 205, 240, 62, 228, 99, 132, 189, 184, 124, 188, 191, 16, 87, 1, 191, 161, 49, 40, 191, 146, 38, 74, 191, 57, 93, 168, 62, 140, 201, 121, 190, 77, 208, 97, 63, 236, 114, 105, 62, 129, 19, 19, 191, 176, 230, 137, 191, 94, 175, 188, 190, 228, 131, 144, 62, 255, 241, 135, 63, 114, 232, 165, 62, 210, 87, 70, 63, 181, 149, 60, 191, 126, 163, 138, 190, 72, 253, 63, 63, 73, 252, 49, 191, 139, 52, 254, 189, 43, 253, 232, 190, 115, 126, 178, 63, 109, 248, 230, 62, 98, 196, 18, 191, 153, 111, 102, 63, 226, 149, 240, 62, 227, 230, 132, 63, 28, 209, 41, 60, 174, 168, 213, 189, 146, 214, 125, 189, 130, 168, 199, 190, 20, 140, 159, 62, 242, 152, 6, 191, 200, 206, 125, 63, 227, 126, 148, 62, 84, 214, 201, 62, 164, 59, 174, 190, 106, 27, 51, 61, 47, 155, 189, 62, 107, 82, 98, 191, 90, 191, 27, 191, 33, 34, 8, 191, 108, 162, 178, 62, 39, 51, 161, 61, 173, 99, 135, 191, 5, 155, 5, 62, 73, 101, 57, 61, 190, 8, 204, 60, 80, 93, 123, 62, 187, 197, 37, 191, 169, 130, 221, 190, 90, 61, 5, 191, 101, 12, 199, 62, 53, 156, 158, 190, 218, 38, 234, 62, 51, 131, 66, 191, 215, 212, 23, 62, 109, 45, 67, 191, 42, 228, 185, 62, 75, 177, 1, 190, 142, 114, 47, 62, 164, 149, 199, 60, 196, 105, 171, 190, 232, 69, 77, 62, 197, 88, 223, 62, 172, 41, 128, 61, 203, 195, 221, 191, 210, 28, 21, 191, 250, 71, 11, 191, 11, 47, 129, 63, 167, 200, 175, 189, 173, 254, 79, 189, 224, 31, 191, 189, 15, 82, 66, 191, 250, 90, 41, 61, 166, 72, 57, 191, 151, 74, 148, 62, 54, 154, 208, 62, 165, 157, 45, 63, 198, 240, 112, 190, 158, 136, 199, 62, 174, 155, 83, 191, 185, 84, 107, 190, 94, 37, 208, 190, 237, 194, 14, 62, 220, 15, 33, 63, 11, 62, 211, 190, 254, 223, 194, 62, 151, 216, 26, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 105, 211, 190, 158, 243, 222, 62, 199, 230, 104, 61, 168, 75, 162, 190, 38, 189, 170, 62, 215, 154, 12, 191, 235, 187, 94, 62, 197, 16, 15, 191, 226, 34, 195, 62, 23, 215, 197, 62, 90, 98, 166, 190, 41, 137, 186, 62, 220, 10, 144, 61, 242, 123, 34, 63, 235, 191, 20, 63, 156, 106, 155, 190, 68, 127, 6, 63, 25, 218, 250, 62, 50, 4, 89, 188, 209, 250, 117, 189, 133, 179, 103, 188, 7, 255, 173, 62, 201, 197, 244, 62, 228, 82, 153, 190, 172, 3, 140, 62, 227, 136, 207, 190, 58, 176, 195, 190, 38, 32, 178, 62, 171, 193, 179, 61, 130, 19, 57, 189, 32, 140, 75, 62, 205, 100, 211, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 60, 158, 190, 86, 44, 13, 190, 109, 46, 135, 62, 150, 252, 173, 190, 156, 5, 113, 190, 227, 220, 49, 62, 226, 255, 249, 60, 23, 185, 75, 190, 24, 176, 12, 189, 117, 61, 175, 190, 142, 100, 28, 189, 165, 55, 109, 190, 89, 71, 245, 189, 123, 211, 175, 190, 4, 137, 94, 189, 250, 233, 71, 190, 91, 40, 21, 191, 231, 144, 13, 190, 101, 191, 43, 190, 49, 77, 113, 59, 36, 140, 47, 60, 28, 99, 2, 191, 175, 110, 118, 189, 126, 191, 139, 190, 82, 103, 164, 60, 234, 89, 177, 190, 138, 189, 58, 189, 20, 123, 240, 189, 67, 11, 188, 188, 177, 246, 68, 189, 44, 148, 95, 189, 212, 33, 168, 190, 97, 120, 155, 190, 243, 222, 156, 190, 144, 235, 172, 190, 182, 30, 22, 62, 240, 74, 17, 190, 174, 43, 53, 62, 146, 99, 51, 190, 159, 42, 111, 62, 99, 47, 115, 62, 119, 206, 8, 190, 63, 202, 205, 61, 162, 63, 118, 62, 96, 67, 153, 58, 201, 166, 192, 61, 216, 232, 202, 61, 26, 76, 111, 62, 156, 1, 251, 189, 5, 31, 56, 62, 221, 73, 187, 62, 44, 114, 12, 62, 113, 104, 1, 190, 103, 68, 91, 190, 250, 129, 240, 61, 210, 97, 56, 62, 124, 163, 149, 61, 228, 129, 251, 190, 99, 21, 70, 191, 236, 111, 154, 59, 64, 158, 146, 190, 95, 8, 153, 62, 141, 83, 111, 61, 44, 80, 111, 61, 193, 133, 202, 190, 145, 165, 187, 190, 19, 41, 104, 62, 173, 132, 174, 62, 16, 81, 224, 190, 242, 11, 241, 189, 76, 67, 77, 190, 51, 96, 16, 188, 0, 102, 117, 61, 21, 91, 173, 190, 89, 85, 238, 60, 131, 212, 169, 187, 10, 250, 193, 188, 46, 37, 221, 190, 77, 4, 172, 62, 63, 40, 62, 60, 215, 13, 140, 189, 8, 107, 147, 189, 21, 56, 29, 62, 149, 3, 217, 62, 206, 91, 108, 189, 3, 144, 62, 62, 14, 83, 98, 62, 208, 157, 179, 189, 58, 186, 99, 62, 145, 24, 39, 190, 153, 138, 160, 189, 16, 2, 158, 62, 184, 225, 143, 61, 24, 247, 245, 56, 113, 189, 54, 190, 52, 120, 210, 189, 83, 231, 201, 189, 178, 94, 99, 62, 45, 156, 94, 61, 4, 141, 13, 190, 116, 75, 14, 61, 12, 242, 59, 62, 29, 136, 25, 62, 86, 1, 5, 191, 223, 70, 123, 62, 132, 222, 53, 189, 160, 241, 76, 62, 214, 217, 224, 189, 0, 115, 195, 190, 138, 126, 67, 189, 23, 163, 54, 60, 126, 58, 145, 190, 178, 77, 114, 62, 183, 156, 118, 62, 98, 22, 197, 61, 74, 180, 197, 188, 251, 53, 34, 62, 143, 172, 207, 189, 141, 24, 13, 61, 221, 3, 175, 189, 145, 85, 4, 62, 236, 230, 115, 62, 31, 199, 142, 189, 230, 88, 245, 189, 117, 30, 105, 62, 46, 216, 35, 62, 240, 31, 42, 189, 234, 35, 109, 189, 122, 125, 176, 190, 35, 82, 47, 61, 83, 167, 158, 60, 80, 199, 63, 61, 31, 29, 200, 190, 86, 220, 129, 61, 244, 138, 220, 189, 96, 80, 34, 190, 159, 78, 153, 62, 123, 3, 80, 191, 241, 75, 106, 60, 129, 152, 165, 62, 152, 154, 131, 190, 253, 24, 30, 191, 4, 4, 80, 62, 182, 176, 219, 61, 188, 50, 109, 191, 111, 18, 0, 191, 35, 47, 88, 61, 85, 43, 140, 62, 12, 75, 158, 61, 207, 200, 182, 61, 164, 249, 99, 61, 241, 218, 162, 190, 7, 42, 220, 61, 77, 199, 51, 62, 135, 198, 140, 189, 145, 35, 97, 61, 144, 234, 145, 61, 72, 240, 141, 62, 239, 251, 129, 190, 244, 254, 39, 190, 51, 124, 31, 191, 61, 7, 16, 191, 5, 92, 5, 62, 95, 22, 34, 191, 199, 148, 10, 191, 240, 199, 161, 189, 230, 90, 8, 191, 41, 210, 191, 62, 98, 169, 20, 62, 96, 219, 147, 61, 7, 119, 205, 189, 189, 122, 49, 60, 50, 184, 82, 190, 123, 183, 168, 190, 109, 129, 58, 62, 57, 229, 72, 62, 48, 48, 36, 62, 62, 37, 47, 61, 79, 109, 0, 61, 159, 47, 39, 191, 217, 136, 25, 190, 21, 189, 76, 61, 181, 104, 217, 61, 186, 184, 124, 189, 196, 133, 71, 62, 231, 90, 245, 190, 227, 35, 11, 190, 168, 32, 11, 62, 18, 30, 220, 190, 223, 240, 187, 62, 148, 238, 206, 59, 56, 100, 145, 188, 165, 38, 12, 190, 99, 69, 212, 189, 1, 236, 175, 60, 71, 253, 34, 61, 194, 159, 39, 190, 47, 123, 32, 190, 209, 112, 158, 189, 118, 193, 20, 59, 78, 89, 3, 62, 76, 15, 149, 189, 130, 219, 210, 189, 5, 240, 2, 190, 201, 56, 4, 189, 123, 212, 8, 189, 242, 248, 116, 61, 229, 74, 22, 190, 192, 178, 179, 61, 186, 154, 65, 189, 253, 231, 133, 61, 226, 84, 190, 61, 242, 165, 207, 188, 1, 175, 244, 189, 113, 233, 182, 61, 113, 70, 13, 190, 46, 16, 37, 190, 105, 238, 117, 188, 14, 100, 184, 61, 145, 180, 44, 189, 38, 114, 33, 190, 183, 31, 143, 188, 112, 206, 36, 190, 212, 229, 209, 189, 210, 66, 184, 62, 180, 52, 162, 62, 90, 7, 31, 61, 4, 108, 86, 189, 219, 64, 187, 189, 77, 122, 171, 61, 39, 120, 195, 62, 235, 102, 239, 190, 227, 84, 200, 189, 123, 124, 27, 190, 80, 135, 60, 190, 223, 55, 160, 61, 101, 148, 37, 62, 174, 146, 100, 61, 81, 206, 220, 61, 163, 230, 213, 189, 119, 164, 161, 190, 118, 135, 163, 189, 166, 139, 132, 188, 84, 100, 137, 61, 216, 62, 100, 62, 206, 218, 128, 62, 227, 66, 179, 188, 86, 99, 217, 60, 57, 0, 146, 190, 238, 138, 25, 190, 109, 137, 24, 62, 229, 154, 200, 187, 171, 175, 134, 62, 143, 120, 234, 190, 253, 128, 82, 190, 178, 76, 187, 189, 243, 113, 194, 189, 65, 228, 27, 62, 147, 26, 210, 189, 25, 99, 174, 61, 169, 107, 173, 189, 187, 127, 31, 62, 218, 94, 219, 61, 139, 76, 202, 61, 60, 183, 89, 61, 213, 22, 59, 190, 26, 12, 26, 190, 253, 217, 42, 190, 132, 239, 60, 187, 132, 86, 4, 189, 237, 12, 224, 189, 149, 15, 20, 190, 225, 97, 129, 61, 229, 215, 76, 189, 159, 216, 205, 189, 160, 152, 102, 189, 80, 235, 192, 61, 127, 8, 46, 190, 148, 81, 216, 189, 203, 91, 17, 62, 7, 180, 44, 60, 204, 56, 80, 61, 152, 27, 1, 190, 78, 24, 41, 190, 184, 192, 70, 60, 240, 151, 144, 61, 26, 204, 139, 189, 29, 107, 140, 189, 108, 234, 12, 189, 51, 123, 165, 190, 139, 12, 223, 61, 64, 166, 169, 62, 23, 190, 43, 190, 148, 207, 109, 187, 89, 165, 223, 190, 27, 242, 3, 191, 152, 1, 242, 190, 202, 21, 176, 190, 226, 10, 182, 191, 190, 98, 7, 191, 183, 43, 35, 190, 162, 162, 172, 190, 114, 248, 75, 62, 175, 20, 66, 190, 206, 13, 197, 61, 9, 208, 226, 62, 203, 58, 61, 190, 105, 210, 223, 61, 241, 118, 78, 62, 214, 99, 22, 62, 226, 196, 99, 61, 51, 135, 0, 190, 150, 131, 208, 62, 5, 72, 136, 190, 55, 180, 246, 61, 101, 198, 31, 189, 37, 69, 231, 189, 57, 206, 191, 190, 153, 206, 59, 61, 55, 112, 179, 190, 40, 11, 20, 189, 192, 253, 110, 189, 229, 181, 227, 61, 155, 222, 42, 190, 80, 220, 227, 189, 135, 64, 124, 187, 2, 8, 22, 60, 200, 83, 223, 61, 70, 54, 155, 189, 8, 81, 202, 61, 41, 79, 5, 61, 215, 184, 104, 61, 50, 107, 214, 188, 50, 143, 181, 189, 244, 102, 206, 189, 185, 140, 213, 60, 22, 200, 150, 61, 23, 197, 41, 189, 17, 208, 228, 189, 15, 156, 34, 189, 169, 15, 156, 189, 162, 253, 27, 190, 139, 107, 19, 62, 250, 83, 206, 189, 164, 208, 148, 189, 91, 220, 170, 189, 92, 238, 135, 60, 91, 65, 148, 189, 229, 104, 176, 189, 29, 26, 178, 61, 249, 18, 67, 60, 32, 189, 41, 186, 196, 119, 187, 61, 165, 10, 182, 62, 63, 74, 249, 189, 252, 117, 68, 61, 64, 198, 161, 61, 144, 118, 9, 191, 198, 11, 226, 59, 217, 33, 51, 191, 106, 6, 20, 190, 225, 39, 19, 190, 139, 21, 63, 190, 233, 18, 7, 62, 184, 217, 192, 61, 118, 147, 65, 62, 65, 85, 211, 61, 189, 34, 195, 190, 148, 140, 20, 62, 186, 194, 10, 190, 144, 114, 134, 190, 97, 18, 125, 62, 97, 65, 156, 62, 168, 77, 10, 62, 130, 0, 26, 62, 160, 162, 110, 61, 36, 59, 157, 190, 135, 192, 196, 61, 228, 166, 102, 62, 135, 76, 178, 187, 218, 230, 33, 62, 187, 155, 2, 191, 157, 218, 29, 61, 130, 40, 44, 188, 169, 165, 29, 191, 251, 66, 179, 190, 99, 59, 149, 191, 187, 192, 218, 190, 199, 80, 204, 61, 202, 149, 153, 191, 80, 251, 213, 190, 80, 49, 42, 189, 6, 109, 253, 62, 31, 58, 109, 62, 248, 127, 242, 61, 88, 238, 231, 61, 105, 5, 209, 190, 253, 214, 67, 62, 103, 93, 144, 61, 168, 81, 240, 61, 34, 125, 75, 60, 117, 46, 75, 62, 64, 135, 20, 63, 231, 106, 39, 62, 140, 65, 154, 189, 154, 104, 141, 190, 195, 128, 68, 62, 245, 84, 169, 62, 14, 139, 20, 191, 130, 116, 64, 63, 106, 210, 125, 191, 51, 54, 149, 62, 229, 221, 151, 191, 27, 233, 15, 63, 143, 163, 165, 62, 194, 73, 183, 61, 198, 162, 0, 191, 227, 148, 83, 190, 99, 194, 191, 190, 87, 246, 154, 190, 34, 17, 207, 189, 207, 191, 10, 191, 120, 96, 220, 190, 199, 224, 231, 62, 0, 94, 185, 62, 142, 191, 41, 62, 163, 147, 214, 61, 209, 224, 250, 59, 121, 0, 232, 60, 177, 200, 18, 190, 48, 192, 35, 62, 5, 218, 255, 62, 225, 111, 56, 189, 179, 191, 103, 62, 195, 108, 222, 62, 3, 161, 88, 62, 20, 184, 14, 190, 174, 222, 119, 190, 255, 138, 20, 62, 8, 41, 12, 62, 218, 49, 190, 190, 21, 141, 221, 62, 164, 113, 1, 191, 217, 152, 21, 62, 89, 62, 104, 190, 123, 241, 194, 62, 131, 174, 44, 187, 179, 142, 168, 62, 252, 57, 9, 191, 200, 0, 187, 61, 206, 113, 19, 62, 47, 128, 29, 63, 130, 201, 148, 191, 25, 121, 216, 61, 122, 92, 74, 190, 150, 129, 4, 62, 83, 90, 195, 62, 236, 249, 64, 190, 12, 131, 19, 62, 222, 246, 72, 189, 129, 211, 162, 62, 210, 192, 109, 191, 250, 73, 201, 61, 0, 81, 15, 190, 12, 15, 173, 191, 113, 81, 13, 191, 101, 199, 208, 61, 72, 237, 107, 62, 106, 172, 60, 62, 114, 4, 70, 62, 13, 18, 72, 61, 152, 53, 85, 189, 183, 26, 126, 61, 33, 245, 120, 188, 57, 151, 195, 189, 51, 218, 169, 62, 70, 112, 0, 189, 236, 1, 1, 62, 22, 145, 32, 189, 246, 226, 233, 188, 96, 74, 163, 188, 12, 228, 170, 189, 137, 99, 190, 61, 171, 91, 210, 189, 50, 208, 133, 61, 99, 20, 174, 59, 223, 58, 180, 187, 61, 135, 46, 62, 204, 58, 41, 61, 252, 58, 3, 187, 107, 4, 167, 188, 210, 175, 30, 61, 46, 48, 182, 61, 180, 7, 132, 59, 249, 179, 173, 61, 159, 177, 38, 190, 179, 205, 248, 61, 141, 154, 245, 189, 176, 56, 22, 190, 140, 223, 253, 189, 197, 77, 215, 189, 8, 190, 28, 189, 119, 127, 0, 190, 104, 247, 177, 188, 195, 236, 217, 188, 168, 89, 151, 61, 142, 2, 155, 186, 25, 151, 113, 189, 189, 31, 54, 61, 217, 94, 37, 190, 30, 144, 88, 188, 218, 22, 21, 62, 65, 141, 23, 62, 141, 39, 50, 190, 31, 166, 18, 190, 38, 72, 228, 189, 138, 199, 83, 61, 113, 225, 198, 189, 121, 59, 59, 61, 114, 148, 28, 62, 142, 172, 176, 61, 45, 207, 10, 188, 154, 93, 235, 189, 143, 35, 130, 61, 98, 116, 190, 61, 113, 122, 176, 61, 101, 235, 68, 190, 62, 140, 156, 60, 46, 33, 45, 190, 56, 0, 228, 61, 148, 146, 19, 190, 147, 99, 160, 189, 204, 15, 193, 189, 125, 98, 2, 190, 151, 31, 32, 190, 122, 60, 247, 189, 220, 74, 252, 61, 108, 108, 10, 190, 203, 197, 80, 61, 18, 204, 9, 61, 200, 173, 46, 190, 2, 251, 10, 61, 123, 199, 44, 61, 175, 242, 102, 61, 253, 78, 8, 190, 134, 42, 43, 61, 226, 130, 45, 190, 237, 65, 141, 60, 67, 214, 214, 189, 1, 233, 208, 61, 216, 5, 76, 61, 28, 164, 90, 189, 232, 28, 51, 62, 148, 248, 39, 186, 7, 115, 38, 190, 211, 62, 36, 189, 2, 183, 144, 189, 114, 150, 188, 188, 201, 188, 0, 190, 130, 11, 19, 190, 17, 77, 217, 189, 125, 15, 7, 61, 168, 235, 47, 62, 152, 82, 146, 189, 108, 235, 10, 190, 170, 38, 10, 189, 109, 10, 0, 190, 150, 49, 181, 188, 104, 157, 34, 190, 95, 236, 24, 189, 144, 13, 146, 61, 92, 7, 53, 61, 133, 107, 186, 187, 9, 234, 32, 190, 59, 3, 96, 189, 15, 235, 93, 61, 12, 39, 178, 62, 210, 61, 134, 62, 161, 155, 8, 62, 210, 101, 163, 60, 0, 128, 149, 62, 63, 196, 174, 61, 35, 149, 166, 61, 118, 62, 160, 189, 52, 123, 100, 190, 89, 28, 146, 61, 108, 75, 71, 190, 182, 133, 52, 189, 152, 215, 69, 62, 238, 191, 192, 61, 0, 112, 138, 188, 124, 66, 151, 61, 203, 242, 155, 61, 158, 189, 20, 189, 152, 250, 17, 188, 136, 0, 41, 62, 196, 73, 71, 62, 147, 172, 196, 61, 209, 159, 190, 60, 135, 250, 207, 59, 204, 108, 44, 62, 120, 220, 192, 60, 178, 143, 123, 62, 249, 103, 38, 190, 184, 17, 134, 61, 157, 182, 169, 190, 187, 141, 24, 190, 70, 167, 80, 190, 18, 119, 202, 61, 146, 50, 38, 190, 43, 176, 25, 190, 10, 47, 218, 61, 247, 106, 15, 62, 224, 140, 239, 188, 239, 126, 251, 188, 114, 207, 18, 190, 227, 193, 19, 190, 101, 207, 6, 190, 197, 248, 231, 189, 105, 103, 30, 190, 143, 44, 9, 62, 66, 241, 176, 60, 41, 103, 159, 189, 192, 55, 57, 57, 122, 161, 15, 62, 95, 138, 143, 189, 26, 20, 140, 61, 212, 73, 34, 62, 9, 190, 147, 188, 167, 57, 242, 189, 144, 36, 30, 190, 136, 130, 52, 190, 86, 189, 89, 61, 220, 194, 119, 60, 54, 32, 65, 189, 90, 211, 9, 190, 180, 230, 222, 189, 67, 248, 23, 61, 187, 33, 194, 189, 195, 14, 32, 189, 59, 114, 27, 189, 21, 15, 2, 62, 23, 170, 251, 61, 248, 132, 236, 188, 116, 147, 134, 60, 151, 207, 135, 62, 192, 36, 64, 62, 157, 185, 26, 191, 119, 111, 176, 189, 24, 28, 50, 190, 125, 20, 56, 190, 10, 182, 215, 61, 100, 81, 238, 189, 40, 73, 251, 189, 190, 186, 171, 61, 101, 196, 3, 190, 186, 96, 147, 190, 123, 4, 95, 62, 233, 93, 46, 190, 118, 116, 233, 61, 218, 95, 219, 61, 232, 92, 152, 189, 217, 79, 35, 62, 231, 74, 200, 61, 75, 194, 0, 189, 91, 169, 50, 62, 8, 7, 89, 62, 164, 207, 13, 61, 43, 136, 96, 189, 235, 174, 101, 190, 88, 140, 195, 61, 91, 215, 79, 190, 17, 94, 245, 62, 58, 149, 110, 189, 84, 247, 214, 61, 73, 74, 250, 190, 125, 234, 163, 62, 82, 1, 111, 189, 112, 231, 151, 190, 166, 120, 169, 62, 57, 63, 141, 190, 13, 164, 118, 62, 208, 10, 134, 190, 106, 151, 101, 62, 47, 19, 145, 190, 217, 172, 108, 62, 73, 242, 23, 190, 137, 220, 154, 61, 75, 179, 78, 62, 204, 233, 229, 190, 214, 63, 117, 62, 234, 66, 48, 191, 53, 172, 119, 62, 34, 69, 72, 190, 253, 156, 112, 190, 94, 58, 113, 190, 106, 136, 104, 190, 133, 47, 153, 190, 83, 111, 141, 62, 119, 178, 162, 190, 103, 249, 12, 62, 245, 120, 218, 60, 222, 162, 43, 189, 22, 59, 183, 189, 241, 65, 166, 190, 181, 152, 194, 61, 80, 132, 59, 60, 181, 52, 109, 190, 162, 126, 89, 190, 241, 224, 146, 190, 229, 53, 98, 189, 41, 23, 42, 190, 245, 172, 238, 62, 241, 29, 136, 190, 101, 20, 143, 189, 25, 117, 13, 63, 214, 124, 229, 190, 144, 43, 217, 189, 192, 14, 13, 62, 136, 177, 129, 190, 143, 38, 156, 190, 164, 159, 217, 189, 27, 134, 112, 190, 232, 207, 182, 189, 111, 224, 19, 189, 85, 190, 189, 190, 189, 157, 209, 189, 44, 83, 97, 61, 156, 13, 47, 190, 140, 104, 121, 190, 86, 181, 157, 61, 149, 196, 54, 190, 169, 7, 174, 187, 118, 3, 131, 62, 134, 36, 132, 190, 13, 14, 94, 60, 209, 158, 232, 62, 16, 51, 119, 62, 195, 213, 238, 61, 20, 108, 51, 61, 133, 166, 30, 189, 141, 44, 117, 189, 38, 192, 215, 61, 95, 173, 99, 191, 194, 124, 110, 190, 207, 22, 217, 189, 84, 177, 149, 190, 213, 197, 210, 60, 65, 59, 225, 62, 206, 64, 86, 61, 97, 9, 118, 189, 183, 212, 9, 190, 108, 250, 14, 62, 191, 46, 163, 188, 209, 165, 171, 190, 37, 95, 82, 62, 84, 114, 171, 62, 56, 52, 119, 62, 80, 82, 193, 189, 31, 150, 245, 188, 183, 67, 31, 60, 177, 193, 8, 190, 232, 122, 8, 62, 98, 40, 196, 61, 121, 112, 138, 62, 187, 84, 54, 191, 113, 131, 112, 190, 113, 218, 174, 190, 48, 183, 198, 61, 152, 147, 244, 188, 139, 39, 30, 189, 121, 60, 46, 62, 165, 251, 148, 189, 46, 210, 29, 188, 199, 107, 193, 60, 111, 28, 52, 62, 69, 224, 227, 61, 157, 198, 51, 190, 64, 42, 4, 190, 112, 188, 29, 190, 129, 167, 102, 188, 98, 104, 0, 185, 95, 180, 18, 188, 222, 97, 29, 190, 101, 7, 154, 189, 181, 137, 45, 190, 132, 238, 42, 190, 34, 73, 159, 189, 245, 116, 207, 189, 248, 67, 27, 190, 15, 43, 143, 189, 140, 93, 10, 189, 193, 28, 48, 190, 56, 143, 205, 188, 238, 155, 101, 61, 76, 232, 164, 189, 143, 180, 241, 189, 238, 213, 5, 190, 13, 135, 43, 62, 253, 101, 169, 61, 174, 5, 201, 190, 47, 30, 205, 190, 253, 75, 193, 190, 79, 82, 93, 190, 201, 239, 157, 189, 47, 204, 228, 190, 4, 235, 183, 190, 243, 54, 134, 62, 226, 196, 150, 62, 196, 181, 195, 189, 62, 208, 106, 62, 6, 5, 63, 189, 91, 9, 184, 189, 143, 36, 108, 188, 38, 66, 100, 62, 238, 82, 5, 63, 125, 37, 55, 186, 165, 66, 190, 60, 51, 183, 206, 62, 12, 100, 235, 61, 104, 207, 162, 189, 161, 57, 208, 189, 8, 147, 166, 189, 36, 105, 186, 188, 124, 205, 173, 189, 242, 75, 203, 62, 223, 43, 20, 191, 86, 190, 171, 62, 152, 68, 214, 190, 230, 207, 173, 62, 183, 248, 47, 62, 42, 217, 230, 60, 140, 45, 239, 187, 30, 170, 205, 60, 208, 89, 141, 62, 252, 29, 10, 190, 116, 19, 88, 187, 139, 141, 71, 188, 0, 176, 101, 62, 247, 88, 215, 190, 251, 208, 76, 62, 199, 249, 234, 188, 129, 201, 99, 190, 76, 15, 250, 188, 247, 49, 245, 61, 111, 99, 234, 61, 220, 126, 10, 62, 32, 252, 145, 190, 91, 34, 12, 190, 126, 205, 77, 61, 10, 196, 92, 190, 38, 30, 213, 61, 81, 137, 144, 61, 238, 88, 79, 62, 223, 246, 40, 62, 239, 223, 130, 189, 120, 3, 162, 61, 99, 123, 109, 189, 77, 183, 0, 63, 225, 160, 166, 60, 248, 131, 145, 62, 13, 53, 149, 190, 211, 182, 147, 61, 100, 93, 185, 60, 32, 154, 148, 190, 240, 167, 154, 190, 40, 118, 138, 189, 113, 193, 192, 190, 30, 244, 3, 191, 108, 61, 54, 190, 176, 207, 83, 190, 2, 129, 163, 62, 220, 174, 96, 62, 55, 215, 31, 189, 203, 197, 36, 190, 53, 166, 58, 189, 132, 85, 199, 62, 159, 93, 138, 190, 136, 52, 49, 62, 71, 116, 131, 61, 208, 167, 183, 190, 172, 89, 243, 190, 128, 219, 73, 62, 101, 207, 132, 190, 135, 156, 104, 60, 37, 83, 165, 62, 100, 127, 101, 190, 236, 203, 6, 190, 109, 69, 1, 62, 95, 178, 186, 190, 19, 13, 167, 60, 149, 85, 150, 60, 86, 19, 180, 190, 145, 188, 127, 62, 65, 42, 229, 61, 125, 148, 199, 189, 61, 45, 133, 188, 227, 18, 85, 190, 55, 168, 31, 191, 141, 167, 155, 190, 169, 205, 67, 61, 193, 40, 130, 191, 170, 94, 7, 190, 37, 243, 47, 62, 51, 70, 7, 61, 106, 70, 103, 62, 131, 4, 199, 61, 243, 96, 167, 62, 202, 59, 15, 190, 182, 174, 5, 62, 69, 163, 38, 62, 23, 80, 153, 188, 142, 104, 209, 61, 71, 112, 148, 61, 235, 133, 240, 62, 254, 79, 106, 189, 195, 198, 240, 189, 104, 173, 38, 187, 151, 166, 161, 189, 230, 112, 118, 62, 48, 139, 36, 190, 178, 96, 200, 62, 4, 165, 197, 190, 86, 190, 10, 62, 149, 83, 199, 190, 227, 160, 137, 62, 254, 119, 32, 62, 100, 103, 134, 62, 133, 220, 186, 188, 108, 134, 152, 62, 171, 48, 128, 61, 173, 250, 158, 188, 103, 164, 49, 62, 35, 132, 137, 62, 16, 23, 188, 60, 136, 91, 13, 191, 151, 9, 29, 62, 122, 214, 16, 190, 43, 58, 87, 187, 21, 124, 47, 190, 159, 150, 172, 188, 34, 59, 156, 61, 115, 57, 139, 61, 9, 53, 44, 190, 194, 79, 122, 61, 179, 148, 180, 61, 140, 152, 48, 61, 143, 97, 136, 62, 3, 22, 95, 62, 46, 85, 240, 189, 109, 204, 157, 62, 234, 104, 223, 61, 53, 185, 235, 189, 205, 9, 46, 62, 93, 172, 247, 61, 211, 195, 208, 61, 214, 251, 35, 62, 18, 53, 159, 61, 141, 181, 228, 189, 12, 97, 78, 190, 104, 31, 222, 62, 1, 216, 144, 62, 24, 227, 78, 190, 93, 135, 87, 60, 244, 12, 107, 62, 181, 68, 239, 188, 232, 38, 128, 62, 89, 236, 139, 190, 60, 3, 88, 190, 11, 14, 243, 60, 248, 51, 249, 188, 75, 197, 179, 62, 168, 76, 230, 61, 19, 163, 82, 59, 41, 54, 142, 190, 173, 212, 57, 190, 53, 158, 121, 61, 246, 206, 24, 188, 80, 155, 152, 61, 32, 72, 14, 190, 90, 93, 2, 188, 31, 182, 93, 60, 180, 112, 133, 61, 120, 249, 22, 190, 76, 197, 148, 190, 173, 50, 215, 61, 77, 69, 64, 187, 88, 246, 4, 190, 123, 129, 234, 61, 219, 17, 53, 191, 232, 25, 13, 190, 177, 200, 24, 62, 101, 254, 95, 62, 185, 203, 63, 62, 79, 133, 201, 188, 83, 22, 98, 60, 39, 174, 131, 62, 207, 235, 37, 189, 130, 54, 19, 62, 144, 119, 106, 191, 125, 27, 231, 61, 54, 44, 158, 189, 227, 160, 170, 190, 52, 246, 71, 62, 44, 88, 39, 61, 146, 69, 126, 62, 34, 189, 38, 61, 1, 230, 242, 190, 119, 241, 237, 61, 249, 203, 55, 62, 218, 9, 55, 190, 240, 143, 109, 189, 14, 78, 128, 62, 116, 15, 140, 62, 204, 204, 231, 61, 143, 12, 196, 190, 41, 198, 231, 190, 159, 34, 46, 62, 246, 49, 182, 62, 50, 60, 198, 189, 227, 112, 147, 62, 169, 168, 245, 190, 221, 147, 230, 188, 179, 47, 196, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 95, 134, 188, 199, 225, 2, 62, 145, 195, 149, 62, 57, 203, 204, 62, 231, 74, 210, 188, 232, 21, 33, 188, 84, 207, 55, 61, 39, 93, 236, 187, 123, 135, 241, 61, 152, 176, 88, 61, 85, 171, 135, 189, 90, 252, 128, 62, 123, 23, 227, 60, 223, 224, 117, 61, 252, 185, 24, 61, 191, 176, 104, 189, 88, 104, 0, 190, 2, 7, 150, 189, 49, 58, 22, 190, 147, 9, 35, 190, 17, 81, 145, 62, 64, 223, 140, 190, 168, 244, 0, 62, 10, 144, 155, 188, 237, 253, 35, 62, 179, 38, 234, 61, 171, 148, 120, 62, 49, 52, 155, 189, 12, 236, 242, 188, 199, 3, 79, 62, 29, 12, 87, 190, 11, 221, 245, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 32, 131, 62, 15, 31, 206, 62, 53, 238, 169, 62, 241, 210, 228, 189, 34, 108, 100, 62, 128, 127, 13, 191, 19, 84, 24, 190, 239, 23, 146, 190, 208, 115, 33, 190, 228, 140, 128, 191, 179, 173, 26, 62, 199, 174, 170, 190, 208, 180, 176, 63, 134, 118, 67, 63, 163, 116, 35, 63, 21, 184, 23, 190, 0, 109, 215, 61, 114, 228, 251, 61, 206, 160, 20, 190, 61, 115, 63, 189, 11, 119, 197, 189, 210, 103, 244, 62, 100, 231, 192, 59, 145, 125, 12, 191, 173, 118, 160, 189, 159, 174, 47, 63, 104, 92, 42, 190, 16, 175, 101, 189, 12, 171, 166, 62, 52, 32, 235, 189, 133, 2, 135, 62, 223, 172, 18, 191, 177, 255, 153, 190, 251, 151, 17, 190, 239, 228, 245, 189, 2, 229, 39, 190, 200, 192, 176, 190, 195, 221, 215, 59, 163, 77, 163, 61, 131, 184, 13, 190, 75, 114, 15, 62, 18, 121, 135, 62, 249, 190, 183, 188, 134, 207, 69, 190, 138, 255, 203, 61, 117, 33, 128, 62, 223, 183, 232, 187, 30, 200, 54, 61, 184, 34, 160, 61, 94, 194, 231, 188, 173, 4, 71, 61, 206, 30, 29, 190, 37, 199, 4, 190, 123, 14, 19, 62, 227, 195, 4, 191, 44, 180, 216, 62, 140, 84, 220, 187, 135, 127, 179, 62, 51, 83, 46, 190, 137, 66, 205, 62, 234, 158, 50, 190, 88, 39, 84, 190, 136, 241, 160, 62, 192, 29, 251, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 142, 210, 189, 23, 101, 77, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {4, 91, 183, 190, 220, 224, 159, 190, 180, 85, 97, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {170, 51, 162, 191, 218, 64, 36, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0040/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}