// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {7, 163, 74, 63, 165, 0, 132, 63, 198, 45, 196, 62, 189, 58, 18, 63, 176, 132, 164, 63, 104, 8, 241, 62, 21, 118, 200, 187, 9, 221, 188, 191, 157, 200, 4, 191, 172, 220, 38, 191, 103, 112, 72, 191, 143, 81, 179, 62, 88, 215, 113, 190, 143, 101, 121, 63, 129, 64, 114, 62, 173, 223, 14, 191, 96, 57, 150, 191, 188, 95, 203, 190, 186, 128, 140, 62, 106, 216, 143, 63, 6, 197, 152, 62, 191, 115, 73, 63, 32, 25, 63, 191, 139, 250, 141, 190, 129, 231, 59, 63, 167, 111, 59, 191, 237, 165, 14, 190, 176, 171, 242, 190, 97, 97, 191, 63, 191, 24, 220, 62, 212, 167, 25, 191, 184, 165, 119, 63, 69, 125, 233, 62, 3, 39, 126, 63, 69, 166, 208, 61, 207, 116, 195, 189, 177, 247, 129, 189, 83, 138, 231, 190, 187, 191, 162, 62, 112, 143, 5, 191, 12, 82, 139, 63, 76, 170, 145, 62, 13, 18, 192, 62, 194, 104, 189, 190, 91, 141, 199, 60, 140, 237, 171, 62, 0, 250, 114, 191, 199, 101, 21, 191, 43, 20, 17, 191, 63, 103, 85, 62, 101, 128, 110, 61, 35, 3, 142, 191, 243, 215, 7, 62, 210, 72, 64, 61, 218, 160, 137, 60, 113, 232, 152, 62, 71, 32, 38, 191, 200, 23, 9, 191, 246, 192, 12, 191, 35, 35, 200, 62, 67, 187, 166, 190, 64, 131, 5, 63, 72, 85, 60, 191, 47, 235, 24, 62, 47, 193, 82, 191, 99, 223, 184, 62, 44, 32, 89, 190, 153, 27, 54, 62, 181, 122, 20, 60, 215, 242, 175, 190, 140, 33, 99, 62, 136, 151, 217, 62, 136, 124, 207, 61, 117, 59, 232, 191, 73, 202, 16, 191, 197, 88, 247, 190, 66, 1, 128, 63, 46, 212, 100, 189, 194, 156, 71, 189, 141, 217, 133, 190, 223, 236, 63, 191, 194, 124, 2, 61, 142, 150, 60, 191, 132, 188, 147, 62, 138, 252, 196, 62, 152, 32, 37, 63, 226, 234, 164, 190, 18, 22, 196, 62, 132, 69, 93, 191, 242, 23, 123, 190, 24, 38, 233, 190, 11, 12, 64, 62, 157, 46, 27, 63, 175, 90, 239, 190, 13, 249, 229, 62, 116, 208, 25, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 59, 221, 190, 146, 105, 229, 62, 174, 117, 48, 188, 191, 85, 168, 190, 135, 101, 170, 62, 212, 118, 24, 191, 239, 187, 117, 62, 89, 70, 17, 191, 0, 12, 194, 62, 168, 106, 214, 62, 99, 13, 157, 190, 125, 41, 153, 62, 25, 61, 197, 59, 19, 168, 32, 63, 0, 61, 18, 63, 39, 115, 175, 190, 16, 140, 12, 63, 239, 98, 247, 62, 172, 229, 138, 189, 206, 184, 205, 189, 151, 201, 145, 61, 43, 20, 158, 62, 85, 24, 231, 62, 105, 17, 151, 190, 179, 230, 131, 62, 186, 214, 237, 190, 61, 83, 181, 190, 233, 69, 177, 62, 61, 139, 54, 61, 34, 204, 104, 189, 227, 21, 87, 62, 251, 233, 184, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 60, 158, 190, 86, 44, 13, 190, 109, 46, 135, 62, 150, 252, 173, 190, 156, 5, 113, 190, 227, 220, 49, 62, 226, 255, 249, 60, 23, 185, 75, 190, 24, 176, 12, 189, 117, 61, 175, 190, 142, 100, 28, 189, 165, 55, 109, 190, 89, 71, 245, 189, 123, 211, 175, 190, 4, 137, 94, 189, 250, 233, 71, 190, 91, 40, 21, 191, 231, 144, 13, 190, 101, 191, 43, 190, 49, 77, 113, 59, 36, 140, 47, 60, 28, 99, 2, 191, 175, 110, 118, 189, 126, 191, 139, 190, 82, 103, 164, 60, 234, 89, 177, 190, 138, 189, 58, 189, 20, 123, 240, 189, 67, 11, 188, 188, 177, 246, 68, 189, 44, 148, 95, 189, 212, 33, 168, 190, 231, 233, 173, 190, 7, 83, 159, 190, 181, 66, 188, 190, 18, 233, 46, 62, 198, 30, 50, 190, 62, 232, 9, 60, 119, 70, 66, 190, 232, 215, 115, 62, 255, 165, 129, 62, 238, 83, 37, 190, 101, 114, 174, 61, 178, 24, 130, 62, 38, 29, 173, 60, 223, 16, 161, 61, 21, 221, 225, 61, 6, 27, 45, 62, 64, 71, 207, 189, 212, 243, 88, 62, 177, 208, 187, 62, 194, 64, 23, 62, 72, 47, 25, 190, 206, 153, 70, 190, 56, 230, 255, 61, 150, 213, 44, 62, 255, 142, 128, 61, 233, 229, 18, 191, 12, 169, 84, 191, 130, 128, 96, 60, 122, 225, 134, 190, 134, 216, 151, 62, 156, 66, 72, 61, 228, 200, 59, 61, 128, 120, 223, 190, 116, 81, 192, 190, 151, 174, 103, 62, 244, 219, 190, 62, 201, 55, 13, 191, 130, 101, 7, 190, 79, 207, 100, 190, 82, 238, 30, 60, 193, 122, 133, 61, 68, 36, 212, 190, 59, 87, 28, 188, 136, 139, 167, 58, 1, 196, 17, 188, 15, 51, 254, 190, 144, 232, 173, 62, 177, 116, 81, 186, 15, 209, 105, 189, 16, 184, 60, 189, 180, 31, 29, 62, 50, 136, 221, 62, 178, 91, 101, 189, 211, 143, 76, 62, 65, 122, 96, 62, 37, 4, 236, 189, 187, 199, 99, 62, 50, 10, 49, 190, 86, 158, 157, 189, 247, 66, 157, 62, 141, 27, 176, 61, 40, 61, 53, 58, 214, 166, 80, 190, 91, 5, 9, 190, 122, 204, 155, 189, 185, 109, 104, 62, 159, 78, 118, 61, 10, 103, 111, 190, 186, 171, 107, 61, 164, 212, 91, 62, 39, 116, 43, 62, 167, 177, 15, 191, 144, 41, 109, 62, 49, 248, 252, 188, 250, 129, 85, 62, 225, 228, 1, 190, 37, 105, 220, 190, 100, 246, 248, 188, 175, 44, 188, 186, 71, 139, 141, 190, 48, 101, 112, 62, 176, 108, 94, 62, 103, 149, 159, 61, 91, 199, 65, 189, 26, 163, 18, 62, 33, 230, 14, 190, 44, 159, 246, 60, 97, 4, 182, 189, 125, 226, 3, 62, 172, 200, 123, 62, 225, 156, 179, 189, 182, 131, 15, 190, 91, 125, 80, 62, 202, 154, 26, 62, 154, 141, 74, 189, 197, 223, 121, 189, 67, 144, 180, 190, 80, 53, 42, 61, 251, 72, 75, 60, 206, 51, 233, 61, 55, 148, 2, 191, 181, 114, 51, 61, 27, 126, 248, 189, 182, 99, 25, 190, 117, 187, 153, 62, 40, 185, 143, 191, 241, 75, 106, 60, 141, 151, 167, 62, 213, 75, 65, 190, 154, 123, 48, 191, 79, 253, 78, 62, 131, 147, 214, 61, 199, 209, 115, 191, 30, 143, 15, 191, 105, 255, 128, 61, 18, 202, 170, 62, 183, 181, 187, 61, 55, 180, 240, 61, 64, 215, 66, 61, 46, 32, 146, 190, 204, 253, 205, 61, 191, 77, 95, 62, 125, 45, 97, 189, 8, 99, 130, 61, 108, 1, 182, 61, 141, 134, 139, 62, 121, 86, 120, 190, 120, 121, 4, 190, 137, 235, 65, 191, 119, 207, 52, 191, 150, 242, 56, 62, 58, 1, 67, 191, 226, 190, 34, 191, 48, 51, 69, 189, 114, 251, 43, 191, 144, 34, 205, 62, 34, 192, 72, 62, 148, 100, 123, 59, 7, 119, 205, 189, 29, 8, 27, 188, 255, 8, 94, 190, 252, 45, 171, 190, 246, 23, 111, 62, 105, 105, 112, 62, 206, 9, 26, 62, 82, 228, 25, 61, 223, 99, 62, 61, 13, 12, 65, 191, 238, 45, 13, 190, 117, 0, 17, 62, 53, 121, 12, 62, 185, 222, 46, 189, 90, 6, 124, 62, 228, 210, 212, 190, 180, 157, 234, 189, 137, 191, 140, 62, 5, 44, 239, 190, 168, 169, 215, 62, 163, 129, 158, 61, 220, 163, 178, 187, 165, 38, 12, 190, 99, 69, 212, 189, 1, 236, 175, 60, 71, 253, 34, 61, 194, 159, 39, 190, 47, 123, 32, 190, 209, 112, 158, 189, 118, 193, 20, 59, 78, 89, 3, 62, 76, 15, 149, 189, 130, 219, 210, 189, 5, 240, 2, 190, 201, 56, 4, 189, 123, 212, 8, 189, 242, 248, 116, 61, 229, 74, 22, 190, 192, 178, 179, 61, 186, 154, 65, 189, 253, 231, 133, 61, 226, 84, 190, 61, 242, 165, 207, 188, 1, 175, 244, 189, 113, 233, 182, 61, 113, 70, 13, 190, 46, 16, 37, 190, 105, 238, 117, 188, 14, 100, 184, 61, 145, 180, 44, 189, 38, 114, 33, 190, 183, 31, 143, 188, 112, 206, 36, 190, 212, 229, 209, 189, 72, 66, 190, 62, 168, 2, 158, 62, 173, 156, 181, 188, 124, 74, 35, 188, 55, 188, 9, 190, 180, 55, 150, 61, 213, 56, 187, 62, 16, 162, 6, 191, 57, 101, 209, 189, 27, 132, 72, 190, 89, 189, 85, 190, 165, 61, 155, 61, 113, 165, 79, 62, 208, 71, 33, 60, 28, 248, 235, 61, 35, 105, 255, 189, 29, 32, 194, 190, 58, 95, 43, 190, 46, 218, 209, 188, 24, 9, 248, 61, 255, 129, 90, 62, 243, 15, 144, 62, 194, 79, 78, 189, 182, 209, 55, 61, 197, 203, 169, 190, 149, 180, 74, 190, 221, 82, 2, 62, 115, 70, 6, 61, 26, 229, 133, 62, 234, 7, 251, 190, 231, 68, 66, 190, 103, 193, 163, 189, 243, 113, 194, 189, 65, 228, 27, 62, 147, 26, 210, 189, 25, 99, 174, 61, 169, 107, 173, 189, 187, 127, 31, 62, 218, 94, 219, 61, 139, 76, 202, 61, 60, 183, 89, 61, 213, 22, 59, 190, 26, 12, 26, 190, 253, 217, 42, 190, 132, 239, 60, 187, 132, 86, 4, 189, 237, 12, 224, 189, 149, 15, 20, 190, 225, 97, 129, 61, 229, 215, 76, 189, 159, 216, 205, 189, 160, 152, 102, 189, 80, 235, 192, 61, 127, 8, 46, 190, 148, 81, 216, 189, 203, 91, 17, 62, 7, 180, 44, 60, 204, 56, 80, 61, 152, 27, 1, 190, 78, 24, 41, 190, 184, 192, 70, 60, 240, 151, 144, 61, 26, 204, 139, 189, 29, 107, 140, 189, 108, 234, 12, 189, 211, 216, 166, 189, 152, 167, 250, 61, 29, 8, 130, 62, 211, 33, 103, 190, 13, 3, 154, 59, 194, 243, 14, 191, 201, 94, 7, 191, 156, 159, 225, 190, 177, 235, 198, 190, 93, 145, 191, 191, 169, 27, 3, 191, 248, 96, 98, 190, 240, 44, 201, 190, 214, 46, 95, 62, 153, 155, 47, 190, 90, 95, 141, 61, 154, 142, 215, 62, 143, 68, 51, 190, 239, 233, 22, 61, 193, 182, 85, 62, 173, 45, 17, 62, 5, 36, 88, 61, 233, 119, 179, 189, 15, 175, 215, 62, 183, 229, 128, 190, 240, 88, 5, 62, 152, 71, 31, 189, 197, 61, 220, 189, 7, 75, 181, 190, 113, 235, 192, 60, 58, 180, 155, 190, 40, 11, 20, 189, 192, 253, 110, 189, 229, 181, 227, 61, 155, 222, 42, 190, 80, 220, 227, 189, 135, 64, 124, 187, 2, 8, 22, 60, 200, 83, 223, 61, 70, 54, 155, 189, 8, 81, 202, 61, 41, 79, 5, 61, 215, 184, 104, 61, 50, 107, 214, 188, 50, 143, 181, 189, 244, 102, 206, 189, 185, 140, 213, 60, 22, 200, 150, 61, 23, 197, 41, 189, 17, 208, 228, 189, 15, 156, 34, 189, 169, 15, 156, 189, 162, 253, 27, 190, 139, 107, 19, 62, 250, 83, 206, 189, 164, 208, 148, 189, 91, 220, 170, 189, 92, 238, 135, 60, 91, 65, 148, 189, 229, 104, 176, 189, 29, 26, 178, 61, 249, 18, 67, 60, 32, 189, 41, 186, 145, 5, 201, 61, 12, 206, 185, 62, 243, 226, 112, 190, 71, 56, 122, 61, 35, 25, 150, 61, 245, 174, 27, 191, 185, 44, 52, 60, 181, 73, 56, 191, 25, 117, 11, 190, 85, 200, 31, 190, 114, 214, 74, 190, 54, 151, 21, 62, 51, 99, 229, 61, 30, 13, 55, 62, 218, 252, 243, 61, 30, 158, 195, 190, 55, 117, 234, 61, 195, 20, 69, 190, 184, 138, 133, 190, 114, 44, 142, 62, 248, 99, 158, 62, 122, 187, 23, 62, 232, 75, 26, 62, 44, 41, 137, 61, 163, 11, 185, 190, 123, 70, 150, 61, 208, 91, 86, 62, 38, 79, 139, 60, 47, 94, 61, 62, 170, 90, 6, 191, 20, 92, 77, 61, 60, 187, 170, 187, 73, 116, 38, 191, 198, 9, 181, 190, 201, 22, 157, 191, 168, 253, 222, 190, 73, 192, 221, 61, 211, 216, 173, 191, 227, 150, 213, 190, 163, 141, 215, 189, 249, 204, 10, 63, 25, 95, 111, 62, 11, 26, 229, 61, 190, 213, 183, 61, 165, 99, 214, 190, 29, 80, 77, 62, 98, 106, 96, 61, 91, 107, 215, 61, 254, 103, 233, 60, 251, 118, 89, 62, 160, 139, 31, 63, 201, 173, 25, 62, 201, 139, 153, 189, 222, 85, 148, 190, 252, 9, 76, 62, 131, 88, 162, 62, 33, 5, 28, 191, 60, 104, 57, 63, 11, 255, 119, 191, 104, 160, 140, 62, 163, 19, 150, 191, 209, 246, 4, 63, 229, 208, 160, 62, 10, 144, 157, 61, 96, 147, 8, 191, 195, 39, 99, 190, 71, 0, 136, 190, 96, 30, 156, 190, 235, 108, 156, 189, 241, 35, 50, 191, 111, 44, 226, 190, 254, 172, 251, 62, 8, 57, 188, 62, 150, 55, 87, 62, 4, 162, 17, 62, 5, 37, 33, 186, 37, 57, 166, 60, 138, 218, 238, 189, 14, 60, 18, 62, 249, 155, 7, 63, 111, 63, 206, 58, 246, 65, 151, 62, 198, 122, 229, 62, 203, 7, 78, 62, 103, 158, 10, 190, 26, 234, 130, 190, 186, 47, 18, 62, 57, 233, 21, 62, 19, 17, 165, 190, 252, 218, 212, 62, 169, 215, 255, 190, 230, 19, 1, 62, 168, 139, 129, 190, 215, 172, 205, 62, 60, 36, 168, 187, 7, 170, 174, 62, 55, 69, 20, 191, 149, 223, 169, 61, 34, 178, 5, 62, 248, 105, 40, 63, 238, 18, 157, 191, 190, 92, 128, 61, 210, 187, 93, 190, 140, 215, 28, 62, 78, 137, 197, 62, 132, 250, 109, 190, 172, 254, 11, 62, 162, 149, 14, 189, 200, 6, 171, 62, 195, 9, 116, 191, 105, 113, 205, 61, 1, 14, 21, 190, 54, 182, 168, 191, 135, 2, 8, 191, 212, 230, 1, 62, 132, 17, 124, 62, 2, 115, 84, 62, 235, 86, 79, 62, 108, 65, 102, 61, 43, 194, 142, 189, 88, 116, 90, 61, 190, 166, 25, 60, 34, 143, 160, 189, 33, 233, 166, 62, 243, 184, 158, 60, 87, 232, 251, 61, 46, 81, 111, 189, 3, 57, 75, 189, 96, 74, 163, 188, 12, 228, 170, 189, 137, 99, 190, 61, 171, 91, 210, 189, 50, 208, 133, 61, 99, 20, 174, 59, 223, 58, 180, 187, 61, 135, 46, 62, 204, 58, 41, 61, 252, 58, 3, 187, 107, 4, 167, 188, 210, 175, 30, 61, 46, 48, 182, 61, 180, 7, 132, 59, 249, 179, 173, 61, 159, 177, 38, 190, 179, 205, 248, 61, 141, 154, 245, 189, 176, 56, 22, 190, 140, 223, 253, 189, 197, 77, 215, 189, 8, 190, 28, 189, 119, 127, 0, 190, 104, 247, 177, 188, 195, 236, 217, 188, 168, 89, 151, 61, 142, 2, 155, 186, 25, 151, 113, 189, 189, 31, 54, 61, 217, 94, 37, 190, 30, 144, 88, 188, 218, 22, 21, 62, 65, 141, 23, 62, 141, 39, 50, 190, 31, 166, 18, 190, 38, 72, 228, 189, 138, 199, 83, 61, 113, 225, 198, 189, 121, 59, 59, 61, 114, 148, 28, 62, 142, 172, 176, 61, 45, 207, 10, 188, 154, 93, 235, 189, 143, 35, 130, 61, 98, 116, 190, 61, 113, 122, 176, 61, 101, 235, 68, 190, 62, 140, 156, 60, 46, 33, 45, 190, 56, 0, 228, 61, 148, 146, 19, 190, 147, 99, 160, 189, 204, 15, 193, 189, 125, 98, 2, 190, 151, 31, 32, 190, 122, 60, 247, 189, 220, 74, 252, 61, 108, 108, 10, 190, 203, 197, 80, 61, 18, 204, 9, 61, 200, 173, 46, 190, 2, 251, 10, 61, 123, 199, 44, 61, 175, 242, 102, 61, 253, 78, 8, 190, 134, 42, 43, 61, 226, 130, 45, 190, 237, 65, 141, 60, 67, 214, 214, 189, 1, 233, 208, 61, 216, 5, 76, 61, 28, 164, 90, 189, 232, 28, 51, 62, 148, 248, 39, 186, 7, 115, 38, 190, 211, 62, 36, 189, 2, 183, 144, 189, 114, 150, 188, 188, 201, 188, 0, 190, 130, 11, 19, 190, 17, 77, 217, 189, 125, 15, 7, 61, 168, 235, 47, 62, 152, 82, 146, 189, 108, 235, 10, 190, 170, 38, 10, 189, 109, 10, 0, 190, 150, 49, 181, 188, 104, 157, 34, 190, 95, 236, 24, 189, 144, 13, 146, 61, 92, 7, 53, 61, 133, 107, 186, 187, 9, 234, 32, 190, 59, 3, 96, 189, 15, 235, 93, 61, 220, 246, 177, 62, 149, 241, 129, 62, 6, 11, 10, 62, 103, 83, 240, 59, 91, 39, 141, 62, 125, 115, 195, 61, 37, 39, 141, 61, 16, 132, 214, 189, 166, 167, 88, 190, 134, 7, 94, 61, 198, 78, 87, 190, 229, 135, 38, 189, 37, 101, 72, 62, 244, 45, 154, 61, 235, 165, 132, 59, 67, 145, 152, 61, 95, 184, 49, 61, 253, 231, 143, 189, 104, 213, 165, 188, 89, 247, 39, 62, 103, 130, 57, 62, 203, 230, 213, 61, 239, 26, 14, 60, 147, 249, 232, 59, 168, 228, 35, 62, 205, 117, 167, 60, 46, 80, 106, 62, 194, 45, 21, 190, 139, 31, 19, 61, 143, 238, 169, 190, 237, 32, 30, 190, 58, 170, 82, 190, 18, 119, 202, 61, 146, 50, 38, 190, 43, 176, 25, 190, 10, 47, 218, 61, 247, 106, 15, 62, 224, 140, 239, 188, 239, 126, 251, 188, 114, 207, 18, 190, 227, 193, 19, 190, 101, 207, 6, 190, 197, 248, 231, 189, 105, 103, 30, 190, 143, 44, 9, 62, 66, 241, 176, 60, 41, 103, 159, 189, 192, 55, 57, 57, 122, 161, 15, 62, 95, 138, 143, 189, 26, 20, 140, 61, 212, 73, 34, 62, 9, 190, 147, 188, 167, 57, 242, 189, 144, 36, 30, 190, 136, 130, 52, 190, 86, 189, 89, 61, 220, 194, 119, 60, 54, 32, 65, 189, 90, 211, 9, 190, 180, 230, 222, 189, 67, 248, 23, 61, 187, 33, 194, 189, 195, 14, 32, 189, 121, 216, 131, 189, 253, 154, 1, 62, 57, 124, 251, 61, 169, 88, 104, 189, 169, 204, 219, 60, 22, 89, 148, 62, 59, 23, 67, 62, 111, 227, 33, 191, 72, 102, 165, 189, 186, 148, 55, 190, 136, 27, 88, 190, 104, 155, 211, 61, 5, 220, 14, 190, 148, 205, 231, 189, 121, 108, 172, 61, 137, 152, 226, 189, 56, 16, 151, 190, 25, 46, 66, 62, 136, 149, 48, 190, 54, 100, 216, 61, 88, 105, 218, 61, 149, 239, 183, 189, 129, 170, 35, 62, 135, 233, 139, 61, 203, 209, 27, 189, 152, 106, 80, 62, 26, 44, 84, 62, 166, 151, 254, 60, 96, 204, 80, 189, 28, 141, 105, 190, 28, 16, 168, 61, 53, 128, 112, 190, 82, 74, 12, 63, 218, 138, 31, 189, 73, 201, 248, 61, 70, 2, 42, 191, 203, 15, 176, 62, 151, 223, 41, 189, 245, 196, 141, 190, 212, 60, 202, 62, 169, 75, 163, 190, 20, 23, 154, 62, 168, 83, 63, 190, 37, 239, 56, 62, 43, 177, 144, 190, 238, 61, 129, 62, 48, 53, 95, 190, 90, 252, 191, 61, 2, 88, 72, 62, 204, 220, 240, 190, 65, 17, 126, 62, 106, 32, 92, 191, 140, 47, 129, 62, 225, 10, 130, 190, 7, 166, 131, 190, 145, 64, 25, 190, 72, 238, 90, 190, 248, 185, 155, 190, 143, 125, 153, 62, 211, 92, 228, 190, 77, 132, 6, 62, 196, 96, 44, 61, 252, 186, 94, 61, 191, 3, 73, 60, 252, 113, 179, 190, 131, 248, 104, 61, 236, 138, 130, 60, 156, 28, 106, 190, 78, 99, 132, 190, 150, 134, 155, 190, 28, 121, 183, 189, 136, 141, 45, 190, 184, 206, 223, 62, 172, 117, 132, 190, 101, 20, 143, 189, 173, 172, 5, 63, 184, 148, 4, 191, 210, 90, 20, 190, 205, 168, 213, 61, 174, 105, 130, 190, 44, 76, 146, 190, 172, 175, 217, 189, 175, 127, 125, 190, 69, 97, 245, 189, 219, 165, 4, 189, 169, 129, 207, 190, 122, 220, 10, 190, 73, 80, 97, 61, 79, 223, 52, 190, 131, 80, 79, 190, 198, 194, 184, 61, 13, 233, 95, 190, 75, 193, 209, 188, 164, 200, 117, 62, 13, 34, 159, 190, 178, 238, 93, 60, 161, 126, 2, 63, 138, 219, 124, 62, 244, 85, 129, 61, 62, 121, 48, 61, 105, 184, 123, 189, 12, 54, 163, 189, 78, 51, 208, 61, 32, 164, 130, 191, 181, 56, 115, 190, 120, 166, 5, 190, 101, 194, 161, 190, 58, 58, 37, 61, 143, 45, 232, 62, 60, 26, 191, 60, 27, 73, 18, 189, 218, 141, 51, 190, 219, 128, 162, 61, 19, 81, 178, 189, 203, 2, 184, 190, 32, 247, 91, 62, 125, 189, 158, 62, 20, 201, 129, 62, 49, 68, 7, 190, 113, 171, 218, 188, 213, 185, 130, 189, 227, 98, 55, 190, 235, 251, 192, 61, 0, 235, 223, 61, 92, 63, 125, 62, 180, 178, 72, 191, 208, 39, 114, 190, 47, 200, 174, 190, 48, 183, 198, 61, 152, 147, 244, 188, 139, 39, 30, 189, 121, 60, 46, 62, 165, 251, 148, 189, 46, 210, 29, 188, 199, 107, 193, 60, 111, 28, 52, 62, 69, 224, 227, 61, 157, 198, 51, 190, 64, 42, 4, 190, 112, 188, 29, 190, 129, 167, 102, 188, 98, 104, 0, 185, 95, 180, 18, 188, 222, 97, 29, 190, 101, 7, 154, 189, 181, 137, 45, 190, 132, 238, 42, 190, 34, 73, 159, 189, 245, 116, 207, 189, 248, 67, 27, 190, 15, 43, 143, 189, 140, 93, 10, 189, 193, 28, 48, 190, 56, 143, 205, 188, 238, 155, 101, 61, 76, 232, 164, 189, 143, 180, 241, 189, 238, 213, 5, 190, 13, 135, 43, 62, 253, 101, 169, 61, 181, 176, 241, 190, 166, 200, 222, 190, 128, 63, 197, 190, 39, 37, 47, 190, 101, 1, 66, 190, 37, 188, 50, 191, 85, 83, 218, 190, 34, 46, 145, 62, 11, 52, 162, 62, 250, 135, 28, 190, 18, 54, 55, 62, 105, 60, 0, 189, 151, 142, 57, 189, 95, 15, 137, 189, 16, 27, 126, 62, 9, 189, 220, 62, 246, 179, 57, 61, 97, 51, 186, 61, 200, 166, 234, 62, 87, 4, 9, 62, 80, 222, 39, 188, 58, 212, 78, 189, 253, 63, 135, 189, 104, 119, 67, 189, 27, 200, 144, 189, 103, 33, 203, 62, 19, 1, 27, 191, 143, 42, 193, 62, 90, 143, 210, 190, 25, 246, 177, 62, 72, 114, 30, 62, 92, 58, 146, 186, 76, 117, 188, 187, 100, 119, 218, 60, 156, 146, 142, 62, 69, 126, 4, 190, 103, 79, 244, 187, 128, 118, 142, 60, 217, 97, 102, 62, 235, 226, 232, 190, 96, 139, 77, 62, 0, 127, 22, 189, 255, 139, 106, 190, 3, 15, 32, 189, 66, 142, 6, 62, 142, 231, 224, 61, 72, 48, 19, 62, 153, 139, 141, 190, 157, 139, 29, 190, 212, 182, 95, 60, 15, 71, 107, 190, 169, 167, 2, 62, 123, 195, 112, 61, 118, 57, 92, 62, 242, 214, 37, 62, 215, 62, 88, 189, 66, 4, 156, 61, 122, 187, 71, 189, 128, 197, 249, 62, 205, 75, 65, 61, 249, 151, 136, 62, 250, 254, 149, 190, 39, 182, 170, 61, 46, 179, 252, 60, 236, 181, 212, 190, 129, 209, 198, 190, 103, 133, 104, 189, 53, 2, 202, 190, 249, 147, 42, 191, 161, 163, 61, 190, 221, 141, 159, 190, 4, 202, 163, 62, 12, 223, 70, 62, 69, 229, 150, 189, 203, 197, 36, 190, 31, 103, 130, 189, 13, 22, 174, 62, 8, 202, 242, 190, 129, 24, 11, 62, 101, 90, 160, 61, 57, 194, 153, 190, 200, 84, 197, 190, 46, 49, 102, 62, 126, 205, 153, 190, 218, 149, 43, 61, 229, 97, 146, 62, 245, 22, 96, 190, 88, 66, 51, 190, 251, 151, 8, 62, 22, 206, 172, 190, 209, 245, 38, 61, 40, 94, 236, 187, 72, 162, 160, 190, 186, 63, 125, 62, 22, 151, 150, 61, 99, 214, 20, 190, 44, 100, 225, 188, 38, 160, 80, 190, 98, 36, 5, 191, 201, 112, 162, 190, 65, 149, 111, 61, 34, 201, 153, 191, 133, 13, 2, 190, 202, 184, 65, 62, 241, 154, 27, 61, 61, 10, 115, 62, 112, 10, 222, 61, 52, 42, 167, 62, 208, 140, 24, 190, 215, 82, 15, 62, 161, 75, 35, 62, 124, 24, 251, 188, 27, 63, 237, 61, 123, 146, 169, 61, 88, 226, 204, 62, 74, 93, 164, 189, 193, 64, 84, 190, 223, 118, 165, 187, 239, 253, 162, 189, 170, 221, 110, 62, 21, 88, 5, 190, 73, 45, 186, 62, 28, 99, 234, 190, 253, 42, 252, 61, 110, 205, 207, 190, 168, 249, 146, 62, 245, 164, 24, 62, 61, 68, 132, 62, 170, 217, 188, 188, 237, 64, 155, 62, 39, 118, 140, 61, 8, 24, 29, 188, 117, 31, 46, 62, 160, 40, 153, 62, 102, 244, 210, 60, 248, 200, 21, 191, 11, 2, 34, 62, 0, 47, 22, 190, 92, 68, 204, 187, 130, 15, 57, 190, 225, 251, 130, 187, 95, 254, 151, 61, 5, 227, 165, 61, 143, 193, 34, 190, 187, 75, 75, 61, 150, 239, 84, 61, 57, 130, 206, 60, 248, 74, 150, 62, 138, 19, 80, 62, 67, 109, 198, 189, 224, 202, 156, 62, 193, 173, 248, 61, 22, 204, 232, 189, 28, 235, 54, 62, 213, 63, 213, 61, 60, 74, 10, 62, 193, 166, 14, 62, 30, 118, 165, 61, 107, 92, 200, 189, 188, 58, 68, 190, 246, 128, 232, 62, 176, 124, 154, 62, 129, 145, 116, 190, 189, 4, 123, 60, 60, 162, 128, 62, 209, 97, 23, 188, 5, 61, 140, 62, 24, 219, 255, 189, 79, 14, 89, 190, 153, 115, 66, 61, 75, 148, 17, 188, 31, 6, 190, 62, 92, 233, 213, 61, 134, 232, 175, 60, 63, 213, 147, 190, 120, 81, 74, 190, 38, 73, 141, 61, 120, 156, 196, 58, 36, 21, 154, 61, 2, 56, 23, 190, 62, 103, 232, 188, 59, 86, 4, 187, 176, 115, 131, 61, 118, 170, 7, 190, 79, 126, 122, 190, 106, 188, 186, 61, 116, 85, 55, 60, 206, 240, 26, 190, 132, 122, 247, 61, 147, 50, 36, 191, 175, 150, 0, 190, 226, 24, 44, 62, 191, 34, 48, 62, 40, 160, 51, 62, 39, 168, 158, 189, 59, 88, 130, 60, 13, 203, 129, 62, 19, 215, 72, 61, 188, 161, 7, 62, 43, 177, 117, 191, 159, 197, 233, 61, 184, 103, 212, 189, 157, 100, 197, 190, 103, 222, 72, 62, 115, 195, 157, 60, 82, 167, 126, 62, 131, 39, 38, 61, 192, 192, 241, 190, 129, 44, 17, 62, 211, 135, 105, 62, 255, 157, 44, 190, 233, 96, 202, 188, 101, 62, 135, 62, 74, 214, 129, 62, 96, 150, 2, 62, 209, 13, 217, 190, 236, 125, 250, 190, 48, 188, 71, 62, 49, 44, 182, 62, 195, 247, 208, 189, 202, 196, 154, 62, 73, 152, 0, 191, 223, 225, 51, 189, 131, 214, 220, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 95, 134, 188, 155, 12, 18, 62, 160, 182, 151, 62, 28, 202, 199, 62, 128, 199, 236, 188, 143, 65, 38, 61, 84, 207, 55, 61, 149, 10, 189, 188, 123, 135, 241, 61, 194, 235, 131, 61, 85, 171, 135, 189, 24, 203, 130, 62, 73, 51, 33, 61, 151, 133, 99, 61, 186, 160, 57, 61, 191, 176, 104, 189, 88, 104, 0, 190, 2, 7, 150, 189, 203, 115, 28, 190, 147, 9, 35, 190, 5, 128, 145, 62, 143, 122, 161, 190, 73, 9, 191, 61, 205, 148, 52, 189, 237, 253, 35, 62, 12, 19, 17, 62, 251, 187, 119, 62, 214, 59, 188, 189, 21, 46, 218, 188, 51, 153, 81, 62, 69, 6, 91, 190, 96, 70, 14, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 32, 131, 62, 235, 108, 214, 62, 25, 14, 181, 62, 158, 48, 213, 189, 179, 34, 105, 62, 165, 109, 35, 191, 19, 84, 24, 190, 33, 95, 160, 190, 208, 115, 33, 190, 7, 93, 117, 191, 179, 173, 26, 62, 143, 242, 176, 190, 211, 78, 177, 63, 0, 38, 78, 63, 52, 50, 38, 63, 21, 184, 23, 190, 0, 109, 215, 61, 114, 228, 251, 61, 14, 253, 226, 189, 61, 115, 63, 189, 19, 124, 162, 189, 198, 242, 5, 63, 63, 82, 126, 60, 58, 213, 38, 191, 173, 118, 160, 189, 219, 33, 106, 63, 64, 70, 19, 190, 49, 199, 149, 189, 146, 86, 150, 62, 128, 52, 189, 189, 11, 32, 146, 62, 246, 233, 24, 191, 177, 255, 153, 190, 168, 21, 8, 190, 139, 237, 25, 190, 77, 63, 46, 190, 86, 21, 181, 190, 207, 43, 37, 189, 163, 77, 163, 61, 134, 212, 56, 190, 75, 114, 15, 62, 28, 63, 174, 62, 249, 190, 183, 188, 177, 236, 100, 190, 185, 63, 229, 61, 16, 105, 147, 62, 143, 143, 139, 189, 30, 200, 54, 61, 184, 34, 160, 61, 94, 194, 231, 188, 231, 123, 30, 61, 206, 30, 29, 190, 145, 198, 11, 190, 200, 40, 24, 62, 111, 246, 253, 190, 88, 223, 200, 62, 140, 84, 220, 187, 116, 144, 180, 62, 82, 143, 68, 190, 53, 250, 196, 62, 57, 176, 59, 190, 22, 182, 94, 190, 238, 148, 152, 62, 211, 30, 166, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {196, 107, 215, 189, 176, 148, 107, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {98, 20, 188, 190, 186, 70, 95, 190, 238, 0, 170, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {28, 99, 209, 191, 168, 227, 51, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0040/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}