// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {124, 235, 252, 189, 251, 213, 13, 63, 68, 29, 180, 62, 111, 25, 13, 63, 215, 134, 253, 62, 207, 35, 197, 62, 125, 252, 81, 190, 96, 47, 132, 62, 200, 32, 113, 190, 115, 51, 195, 189, 130, 34, 182, 190, 219, 181, 128, 62, 183, 1, 90, 190, 18, 23, 130, 62, 55, 52, 142, 62, 147, 97, 202, 190, 104, 20, 208, 190, 131, 42, 208, 190, 132, 33, 246, 61, 9, 245, 159, 62, 178, 172, 183, 62, 199, 25, 147, 62, 225, 26, 81, 190, 31, 187, 147, 190, 55, 218, 3, 63, 238, 144, 189, 190, 149, 133, 72, 189, 84, 2, 16, 191, 102, 181, 28, 62, 101, 143, 13, 63, 178, 188, 126, 190, 38, 159, 24, 62, 52, 37, 229, 62, 233, 236, 13, 63, 16, 185, 234, 62, 95, 53, 134, 190, 22, 68, 232, 62, 51, 82, 174, 189, 214, 190, 205, 61, 151, 71, 135, 190, 177, 229, 135, 62, 25, 52, 193, 62, 27, 172, 179, 62, 68, 134, 131, 190, 27, 130, 159, 188, 227, 67, 91, 62, 77, 76, 196, 190, 123, 25, 248, 190, 131, 0, 146, 190, 93, 136, 243, 62, 32, 24, 130, 62, 212, 202, 12, 191, 227, 29, 9, 61, 51, 179, 147, 62, 50, 95, 30, 189, 191, 218, 129, 62, 205, 77, 7, 191, 239, 0, 4, 191, 43, 78, 164, 190, 205, 94, 185, 61, 146, 216, 212, 190, 244, 10, 50, 62, 153, 152, 161, 190, 232, 7, 184, 62, 222, 27, 186, 190, 20, 2, 143, 62, 90, 21, 162, 189, 26, 59, 144, 61, 117, 252, 139, 61, 196, 186, 6, 191, 10, 72, 156, 190, 241, 8, 91, 62, 75, 133, 18, 59, 72, 98, 7, 191, 193, 149, 10, 191, 157, 117, 186, 190, 253, 255, 162, 62, 245, 245, 94, 190, 0, 251, 146, 189, 241, 172, 235, 62, 116, 53, 43, 190, 75, 93, 147, 189, 191, 56, 195, 190, 54, 213, 84, 62, 234, 108, 191, 60, 217, 126, 12, 62, 195, 119, 223, 60, 95, 186, 131, 62, 148, 206, 104, 190, 13, 76, 52, 190, 44, 1, 143, 190, 3, 229, 222, 190, 150, 171, 15, 63, 142, 241, 234, 190, 142, 143, 90, 189, 37, 217, 198, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 180, 19, 191, 205, 13, 203, 62, 146, 154, 207, 62, 184, 119, 254, 190, 12, 253, 161, 60, 253, 121, 226, 190, 255, 4, 100, 62, 116, 65, 3, 191, 102, 13, 154, 62, 33, 135, 1, 63, 216, 147, 219, 190, 28, 251, 122, 62, 220, 135, 188, 190, 79, 16, 147, 62, 148, 50, 4, 63, 124, 239, 241, 190, 138, 122, 97, 189, 127, 217, 211, 62, 154, 30, 37, 190, 118, 155, 189, 61, 77, 55, 2, 63, 233, 16, 232, 61, 54, 59, 13, 63, 211, 36, 0, 190, 250, 181, 233, 62, 161, 23, 11, 191, 13, 129, 105, 190, 222, 214, 243, 62, 158, 171, 140, 62, 192, 178, 110, 61, 163, 85, 136, 62, 198, 87, 235, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 24, 46, 190, 181, 40, 65, 189, 104, 186, 169, 61, 231, 122, 243, 189, 174, 142, 29, 62, 91, 140, 230, 61, 130, 162, 15, 62, 59, 4, 118, 187, 38, 85, 35, 190, 26, 254, 25, 190, 111, 41, 116, 61, 89, 61, 221, 189, 119, 171, 237, 189, 84, 170, 218, 61, 166, 38, 26, 190, 244, 149, 133, 189, 194, 217, 187, 61, 106, 205, 227, 61, 228, 146, 245, 189, 224, 200, 107, 189, 58, 124, 42, 190, 147, 224, 43, 190, 234, 183, 9, 189, 99, 237, 240, 189, 103, 110, 224, 189, 84, 182, 20, 190, 180, 63, 217, 61, 42, 179, 220, 189, 229, 212, 145, 61, 74, 170, 150, 187, 211, 57, 26, 62, 103, 23, 245, 189, 2, 56, 39, 62, 189, 117, 113, 189, 181, 188, 243, 189, 252, 167, 41, 62, 43, 161, 157, 187, 253, 198, 233, 61, 115, 57, 251, 61, 209, 193, 233, 61, 55, 158, 47, 189, 166, 109, 136, 189, 135, 26, 202, 61, 72, 109, 89, 61, 206, 189, 21, 62, 97, 97, 45, 62, 125, 130, 52, 189, 91, 183, 100, 60, 174, 116, 13, 190, 115, 181, 114, 61, 15, 122, 117, 189, 155, 83, 128, 60, 141, 80, 241, 189, 77, 51, 218, 189, 116, 122, 157, 61, 75, 117, 235, 61, 35, 134, 3, 62, 180, 148, 169, 189, 114, 74, 177, 189, 161, 64, 148, 189, 21, 16, 129, 189, 38, 208, 176, 61, 133, 49, 40, 61, 14, 242, 231, 59, 79, 168, 35, 62, 202, 210, 50, 190, 248, 31, 32, 62, 109, 122, 48, 190, 102, 87, 226, 61, 95, 79, 182, 189, 28, 83, 210, 61, 198, 153, 28, 188, 154, 150, 5, 190, 90, 143, 17, 62, 139, 11, 3, 62, 143, 139, 40, 190, 199, 198, 19, 190, 244, 175, 187, 189, 116, 7, 44, 62, 52, 137, 82, 61, 97, 1, 31, 62, 197, 246, 37, 190, 106, 238, 23, 62, 161, 120, 74, 61, 59, 197, 101, 189, 144, 155, 238, 61, 232, 106, 41, 62, 15, 211, 1, 189, 196, 194, 204, 61, 159, 33, 122, 189, 4, 211, 13, 60, 187, 167, 51, 62, 226, 116, 122, 61, 136, 202, 180, 189, 135, 31, 36, 190, 166, 63, 53, 189, 6, 113, 230, 189, 177, 119, 237, 60, 67, 121, 220, 57, 141, 245, 85, 187, 42, 116, 143, 189, 95, 225, 149, 61, 155, 29, 79, 188, 47, 247, 184, 60, 156, 224, 243, 61, 208, 65, 154, 189, 32, 30, 33, 62, 148, 112, 16, 190, 207, 186, 1, 190, 134, 156, 42, 190, 237, 207, 239, 189, 237, 183, 26, 190, 181, 177, 42, 62, 240, 123, 121, 61, 69, 232, 39, 62, 150, 107, 146, 189, 220, 112, 253, 61, 4, 70, 166, 189, 208, 47, 44, 190, 201, 248, 39, 190, 131, 50, 150, 61, 150, 60, 232, 61, 64, 200, 21, 190, 183, 40, 7, 190, 25, 153, 46, 62, 163, 234, 17, 62, 43, 13, 244, 188, 113, 186, 149, 189, 174, 179, 44, 62, 211, 78, 8, 62, 177, 108, 87, 189, 73, 150, 126, 189, 11, 60, 226, 61, 62, 2, 194, 61, 101, 241, 184, 61, 32, 156, 127, 189, 123, 238, 31, 62, 101, 16, 39, 190, 99, 244, 252, 61, 194, 57, 47, 62, 42, 85, 39, 190, 173, 84, 47, 189, 85, 157, 82, 61, 32, 131, 254, 61, 251, 226, 2, 190, 117, 183, 129, 189, 26, 21, 198, 60, 251, 225, 35, 62, 60, 188, 80, 188, 65, 16, 4, 62, 160, 164, 135, 189, 22, 196, 50, 190, 251, 131, 29, 61, 73, 18, 9, 61, 90, 8, 127, 189, 57, 202, 76, 61, 152, 128, 179, 189, 103, 117, 39, 62, 30, 72, 63, 188, 252, 7, 251, 58, 101, 168, 224, 60, 150, 5, 241, 189, 16, 131, 51, 62, 205, 138, 44, 190, 219, 68, 82, 60, 166, 208, 247, 60, 204, 25, 133, 60, 236, 39, 6, 62, 250, 207, 143, 188, 135, 98, 42, 62, 56, 161, 134, 189, 195, 183, 27, 60, 135, 132, 139, 189, 32, 183, 27, 190, 132, 230, 139, 61, 184, 5, 228, 61, 108, 222, 169, 189, 156, 203, 205, 60, 22, 82, 152, 61, 111, 21, 14, 190, 211, 23, 189, 59, 11, 144, 233, 61, 132, 23, 4, 62, 138, 24, 59, 61, 47, 54, 16, 62, 11, 20, 167, 189, 185, 16, 98, 189, 143, 35, 239, 61, 229, 163, 145, 189, 212, 50, 37, 62, 41, 210, 140, 60, 69, 225, 118, 61, 165, 38, 12, 190, 16, 58, 187, 189, 225, 152, 110, 61, 134, 254, 34, 61, 97, 58, 232, 189, 0, 217, 11, 190, 195, 62, 129, 189, 6, 18, 136, 59, 218, 52, 17, 62, 48, 224, 141, 188, 130, 219, 210, 189, 198, 154, 246, 189, 226, 39, 1, 189, 243, 243, 121, 60, 42, 111, 163, 61, 70, 44, 27, 190, 15, 5, 7, 62, 152, 26, 149, 60, 154, 15, 170, 61, 87, 175, 12, 62, 253, 56, 135, 60, 177, 213, 228, 189, 83, 199, 8, 62, 212, 20, 215, 189, 52, 45, 11, 190, 159, 243, 15, 188, 166, 213, 239, 61, 165, 162, 154, 188, 205, 187, 241, 189, 157, 104, 22, 188, 77, 19, 18, 190, 212, 229, 209, 189, 134, 148, 52, 62, 85, 154, 35, 61, 210, 96, 186, 189, 155, 166, 71, 189, 162, 250, 28, 189, 196, 205, 62, 61, 113, 23, 28, 62, 242, 18, 198, 61, 98, 0, 11, 190, 74, 37, 21, 61, 129, 107, 130, 188, 120, 139, 134, 61, 118, 5, 214, 57, 46, 200, 18, 62, 248, 90, 3, 61, 230, 145, 47, 62, 232, 117, 45, 190, 122, 154, 17, 62, 19, 79, 9, 62, 132, 201, 231, 61, 81, 91, 93, 61, 124, 85, 4, 60, 228, 207, 103, 188, 191, 216, 19, 62, 135, 97, 46, 190, 112, 192, 235, 189, 234, 214, 127, 189, 180, 195, 161, 189, 151, 233, 134, 61, 200, 56, 40, 190, 21, 217, 15, 190, 128, 221, 36, 61, 151, 197, 173, 189, 23, 110, 44, 62, 88, 129, 175, 189, 25, 99, 174, 61, 176, 62, 141, 189, 129, 105, 45, 62, 78, 154, 252, 61, 78, 52, 229, 61, 187, 196, 145, 61, 87, 89, 45, 190, 127, 74, 23, 190, 135, 52, 22, 190, 132, 239, 60, 187, 44, 126, 135, 188, 152, 64, 182, 189, 211, 228, 5, 190, 80, 18, 157, 61, 11, 19, 41, 189, 122, 230, 176, 189, 19, 170, 75, 189, 119, 65, 225, 61, 199, 155, 35, 190, 89, 31, 169, 189, 201, 96, 15, 62, 97, 78, 206, 60, 159, 110, 124, 61, 121, 56, 233, 189, 5, 249, 25, 190, 247, 76, 2, 61, 158, 105, 176, 61, 253, 172, 130, 189, 29, 107, 140, 189, 91, 238, 161, 61, 18, 1, 231, 189, 196, 213, 244, 59, 159, 183, 136, 61, 10, 220, 26, 62, 229, 105, 226, 60, 143, 212, 79, 189, 59, 242, 90, 188, 60, 159, 189, 189, 214, 106, 28, 190, 138, 103, 15, 190, 134, 162, 214, 189, 202, 185, 236, 187, 24, 155, 25, 190, 97, 65, 50, 61, 203, 195, 146, 189, 1, 83, 255, 61, 75, 74, 48, 62, 76, 241, 108, 188, 106, 197, 44, 190, 105, 143, 19, 62, 179, 203, 158, 61, 116, 236, 10, 189, 169, 82, 232, 189, 114, 47, 21, 62, 23, 214, 243, 189, 119, 88, 114, 61, 238, 82, 11, 190, 89, 241, 65, 61, 107, 154, 71, 189, 207, 222, 32, 62, 77, 44, 45, 61, 40, 11, 20, 189, 192, 253, 110, 189, 229, 181, 227, 61, 155, 222, 42, 190, 80, 220, 227, 189, 135, 64, 124, 187, 2, 8, 22, 60, 200, 83, 223, 61, 70, 54, 155, 189, 8, 81, 202, 61, 41, 79, 5, 61, 215, 184, 104, 61, 50, 107, 214, 188, 50, 143, 181, 189, 244, 102, 206, 189, 185, 140, 213, 60, 22, 200, 150, 61, 23, 197, 41, 189, 17, 208, 228, 189, 15, 156, 34, 189, 169, 15, 156, 189, 162, 253, 27, 190, 139, 107, 19, 62, 250, 83, 206, 189, 164, 208, 148, 189, 91, 220, 170, 189, 92, 238, 135, 60, 91, 65, 148, 189, 229, 104, 176, 189, 29, 26, 178, 61, 249, 18, 67, 60, 32, 189, 41, 186, 65, 37, 139, 60, 4, 77, 34, 62, 9, 9, 43, 190, 103, 219, 78, 187, 193, 212, 134, 188, 147, 7, 21, 190, 141, 224, 28, 190, 242, 114, 186, 61, 144, 141, 158, 189, 129, 110, 195, 189, 241, 5, 205, 189, 107, 158, 235, 60, 118, 4, 198, 61, 155, 106, 219, 61, 160, 178, 63, 59, 109, 1, 145, 60, 213, 17, 36, 62, 199, 180, 1, 190, 10, 149, 8, 190, 13, 104, 22, 62, 167, 112, 254, 61, 200, 18, 87, 188, 135, 172, 16, 188, 242, 174, 170, 61, 39, 104, 110, 189, 27, 23, 12, 61, 0, 241, 74, 189, 166, 40, 216, 189, 217, 77, 14, 190, 114, 212, 154, 189, 183, 205, 88, 61, 161, 12, 130, 61, 77, 181, 29, 190, 35, 151, 233, 189, 242, 147, 73, 187, 220, 8, 157, 189, 122, 67, 21, 188, 148, 158, 234, 188, 252, 103, 43, 190, 9, 36, 164, 189, 32, 125, 38, 60, 163, 152, 170, 60, 34, 98, 135, 188, 20, 238, 10, 62, 83, 218, 24, 190, 69, 70, 231, 60, 102, 167, 183, 60, 114, 102, 198, 189, 47, 181, 135, 189, 100, 254, 213, 58, 213, 208, 12, 190, 38, 125, 46, 189, 174, 85, 242, 188, 113, 26, 177, 189, 89, 13, 86, 61, 213, 7, 179, 61, 220, 33, 21, 190, 1, 114, 144, 189, 41, 157, 138, 61, 8, 115, 35, 62, 191, 153, 96, 189, 75, 187, 238, 61, 247, 29, 250, 61, 179, 175, 9, 190, 191, 95, 49, 188, 163, 161, 1, 62, 193, 97, 7, 189, 64, 224, 155, 189, 142, 196, 63, 189, 132, 186, 9, 62, 115, 28, 142, 189, 28, 158, 6, 62, 90, 147, 10, 62, 253, 5, 53, 61, 148, 248, 226, 188, 101, 69, 3, 189, 228, 194, 50, 62, 55, 242, 235, 189, 37, 152, 224, 61, 74, 176, 141, 61, 44, 114, 129, 189, 9, 160, 253, 61, 98, 181, 137, 60, 194, 130, 30, 61, 233, 127, 0, 190, 184, 23, 5, 190, 165, 193, 20, 62, 89, 101, 179, 189, 195, 135, 194, 188, 169, 111, 103, 61, 63, 149, 103, 58, 89, 173, 203, 186, 248, 96, 60, 61, 207, 104, 208, 61, 146, 187, 46, 190, 187, 145, 250, 61, 174, 19, 183, 189, 59, 212, 49, 62, 220, 92, 15, 62, 89, 20, 2, 62, 20, 133, 211, 189, 104, 194, 205, 61, 201, 177, 29, 59, 9, 141, 11, 62, 100, 165, 17, 62, 247, 245, 1, 62, 39, 138, 143, 61, 196, 2, 155, 189, 167, 200, 145, 188, 92, 126, 51, 60, 252, 4, 151, 189, 17, 147, 18, 190, 79, 32, 38, 190, 170, 134, 35, 189, 226, 86, 87, 61, 77, 164, 135, 61, 243, 80, 40, 62, 153, 100, 159, 189, 205, 166, 168, 61, 89, 190, 235, 189, 63, 197, 150, 59, 197, 22, 198, 189, 57, 209, 85, 60, 25, 142, 9, 62, 20, 109, 181, 189, 229, 134, 138, 189, 117, 216, 28, 190, 201, 233, 198, 189, 154, 228, 18, 188, 140, 217, 146, 189, 172, 158, 9, 62, 150, 80, 177, 189, 65, 183, 172, 61, 222, 133, 147, 59, 3, 30, 176, 59, 252, 43, 52, 62, 74, 250, 96, 61, 83, 158, 135, 60, 32, 16, 228, 187, 178, 131, 79, 61, 220, 150, 6, 62, 181, 48, 197, 60, 176, 181, 199, 61, 11, 155, 22, 190, 179, 95, 17, 62, 123, 105, 202, 189, 153, 177, 223, 189, 221, 16, 211, 189, 143, 30, 129, 189, 26, 226, 197, 188, 200, 27, 215, 189, 108, 255, 172, 187, 236, 98, 33, 60, 47, 212, 184, 61, 63, 247, 124, 61, 153, 104, 57, 189, 19, 71, 133, 61, 47, 27, 21, 190, 63, 41, 122, 59, 187, 214, 37, 62, 65, 141, 23, 62, 39, 122, 45, 190, 71, 66, 5, 190, 160, 31, 222, 189, 85, 53, 97, 61, 196, 184, 199, 189, 210, 54, 70, 61, 94, 104, 29, 62, 241, 111, 6, 62, 50, 85, 118, 59, 4, 43, 231, 189, 8, 199, 157, 61, 239, 222, 194, 61, 222, 120, 192, 61, 214, 48, 21, 190, 25, 80, 245, 60, 60, 95, 43, 190, 69, 69, 2, 62, 37, 21, 24, 190, 220, 58, 109, 189, 90, 154, 176, 189, 185, 175, 172, 189, 255, 186, 238, 189, 207, 31, 230, 189, 92, 85, 33, 62, 194, 112, 10, 190, 192, 189, 86, 61, 139, 56, 177, 61, 211, 131, 23, 190, 175, 158, 136, 61, 161, 12, 114, 61, 6, 96, 128, 61, 253, 78, 8, 190, 134, 42, 43, 61, 226, 130, 45, 190, 237, 65, 141, 60, 67, 214, 214, 189, 1, 233, 208, 61, 216, 5, 76, 61, 28, 164, 90, 189, 232, 28, 51, 62, 148, 248, 39, 186, 7, 115, 38, 190, 211, 62, 36, 189, 2, 183, 144, 189, 114, 150, 188, 188, 201, 188, 0, 190, 130, 11, 19, 190, 17, 77, 217, 189, 125, 15, 7, 61, 168, 235, 47, 62, 152, 82, 146, 189, 108, 235, 10, 190, 170, 38, 10, 189, 109, 10, 0, 190, 150, 49, 181, 188, 104, 157, 34, 190, 95, 236, 24, 189, 144, 13, 146, 61, 92, 7, 53, 61, 133, 107, 186, 187, 9, 234, 32, 190, 59, 3, 96, 189, 15, 235, 93, 61, 214, 86, 36, 62, 211, 206, 96, 61, 204, 130, 222, 60, 214, 93, 151, 61, 156, 214, 38, 62, 101, 198, 119, 61, 185, 131, 6, 190, 132, 151, 17, 62, 30, 12, 100, 189, 11, 210, 236, 61, 42, 111, 182, 187, 93, 216, 244, 61, 98, 18, 181, 61, 177, 245, 54, 188, 126, 105, 91, 61, 79, 25, 36, 62, 186, 3, 161, 186, 215, 177, 15, 190, 251, 201, 166, 61, 75, 181, 31, 62, 141, 174, 115, 61, 94, 121, 51, 61, 144, 181, 170, 188, 69, 147, 13, 62, 6, 181, 9, 62, 252, 204, 138, 189, 234, 146, 153, 61, 174, 19, 219, 189, 234, 95, 55, 189, 174, 111, 152, 189, 42, 106, 210, 189, 78, 40, 185, 188, 18, 119, 202, 61, 146, 50, 38, 190, 43, 176, 25, 190, 10, 47, 218, 61, 247, 106, 15, 62, 224, 140, 239, 188, 239, 126, 251, 188, 114, 207, 18, 190, 227, 193, 19, 190, 101, 207, 6, 190, 197, 248, 231, 189, 105, 103, 30, 190, 143, 44, 9, 62, 66, 241, 176, 60, 41, 103, 159, 189, 192, 55, 57, 57, 122, 161, 15, 62, 95, 138, 143, 189, 26, 20, 140, 61, 212, 73, 34, 62, 9, 190, 147, 188, 167, 57, 242, 189, 144, 36, 30, 190, 136, 130, 52, 190, 86, 189, 89, 61, 220, 194, 119, 60, 54, 32, 65, 189, 90, 211, 9, 190, 180, 230, 222, 189, 67, 248, 23, 61, 187, 33, 194, 189, 195, 14, 32, 189, 106, 11, 147, 61, 243, 206, 76, 61, 156, 222, 69, 188, 93, 189, 29, 189, 37, 18, 220, 61, 232, 54, 144, 61, 233, 228, 34, 62, 32, 66, 208, 60, 184, 15, 52, 190, 17, 23, 45, 188, 165, 211, 153, 189, 36, 30, 29, 62, 170, 44, 1, 189, 228, 67, 123, 189, 7, 82, 67, 189, 171, 37, 88, 61, 195, 207, 30, 190, 86, 27, 37, 62, 195, 182, 153, 189, 187, 255, 151, 60, 190, 46, 73, 60, 134, 156, 201, 189, 235, 168, 198, 61, 94, 163, 155, 61, 234, 106, 12, 190, 249, 221, 2, 62, 208, 148, 196, 61, 24, 102, 56, 188, 160, 198, 12, 188, 105, 127, 36, 190, 146, 138, 48, 62, 80, 130, 11, 190, 53, 214, 169, 61, 176, 54, 133, 61, 115, 254, 19, 61, 160, 236, 20, 190, 202, 53, 36, 62, 152, 48, 107, 61, 72, 188, 28, 190, 152, 15, 111, 189, 136, 229, 50, 190, 66, 130, 125, 60, 183, 76, 37, 190, 1, 112, 186, 61, 30, 157, 47, 190, 34, 55, 33, 62, 202, 203, 68, 61, 152, 1, 6, 188, 211, 177, 135, 61, 42, 246, 223, 189, 169, 224, 49, 62, 102, 166, 253, 189, 84, 231, 7, 62, 113, 46, 241, 60, 152, 39, 34, 190, 207, 98, 187, 61, 173, 74, 42, 190, 245, 254, 48, 190, 193, 84, 202, 61, 157, 94, 27, 62, 175, 114, 176, 189, 189, 193, 1, 62, 209, 35, 197, 189, 5, 103, 189, 60, 29, 248, 47, 190, 109, 158, 162, 188, 180, 78, 245, 61, 61, 61, 230, 187, 31, 196, 162, 187, 15, 167, 58, 189, 130, 126, 183, 189, 127, 51, 141, 189, 206, 218, 50, 62, 215, 62, 121, 59, 149, 188, 149, 189, 185, 129, 6, 62, 141, 91, 170, 61, 171, 254, 198, 61, 218, 181, 113, 187, 159, 46, 237, 189, 187, 28, 9, 190, 18, 124, 138, 189, 38, 108, 35, 190, 224, 56, 18, 62, 66, 240, 20, 61, 248, 142, 34, 190, 193, 111, 48, 190, 69, 140, 179, 61, 204, 38, 18, 190, 175, 106, 125, 61, 10, 177, 24, 61, 185, 244, 28, 61, 105, 182, 16, 190, 3, 36, 254, 187, 237, 126, 225, 61, 209, 211, 46, 61, 22, 0, 232, 61, 151, 180, 17, 61, 233, 17, 38, 60, 255, 149, 97, 189, 131, 157, 25, 189, 217, 133, 119, 61, 77, 58, 216, 189, 85, 13, 18, 59, 204, 107, 171, 188, 118, 145, 188, 61, 222, 158, 34, 188, 136, 72, 110, 61, 234, 251, 41, 62, 221, 147, 149, 61, 5, 19, 182, 188, 199, 149, 31, 62, 71, 214, 35, 62, 14, 25, 102, 189, 239, 135, 42, 190, 194, 198, 17, 62, 208, 96, 20, 62, 153, 47, 139, 61, 18, 36, 196, 189, 107, 236, 183, 61, 215, 236, 103, 61, 1, 78, 233, 189, 7, 155, 8, 190, 32, 144, 238, 61, 36, 9, 28, 62, 98, 3, 232, 189, 0, 207, 16, 190, 63, 255, 45, 190, 178, 167, 202, 61, 46, 83, 146, 188, 139, 39, 30, 189, 182, 109, 49, 62, 70, 68, 141, 189, 46, 210, 29, 188, 175, 126, 2, 61, 111, 28, 52, 62, 233, 113, 242, 61, 233, 69, 39, 190, 26, 128, 0, 190, 97, 119, 17, 190, 214, 141, 169, 187, 97, 221, 9, 60, 46, 159, 50, 59, 222, 97, 29, 190, 134, 55, 139, 189, 50, 71, 34, 190, 132, 238, 42, 190, 79, 130, 144, 189, 245, 116, 207, 189, 167, 137, 19, 190, 114, 238, 125, 189, 57, 98, 227, 188, 254, 170, 47, 190, 56, 143, 205, 188, 238, 155, 101, 61, 193, 227, 145, 189, 143, 180, 241, 189, 58, 183, 5, 190, 122, 188, 47, 62, 201, 136, 174, 61, 37, 190, 70, 61, 169, 196, 27, 190, 220, 22, 189, 189, 121, 2, 194, 188, 58, 225, 130, 61, 238, 191, 199, 188, 89, 113, 57, 189, 197, 174, 153, 189, 229, 2, 161, 189, 184, 9, 240, 189, 124, 228, 240, 61, 111, 44, 52, 190, 46, 94, 171, 189, 57, 134, 199, 61, 203, 5, 203, 61, 64, 113, 46, 62, 206, 208, 127, 61, 64, 124, 156, 188, 146, 238, 200, 188, 6, 55, 134, 59, 187, 217, 210, 189, 129, 19, 130, 189, 12, 10, 201, 189, 64, 247, 32, 190, 99, 84, 34, 62, 11, 208, 68, 189, 98, 47, 117, 189, 40, 166, 27, 62, 13, 121, 195, 189, 11, 91, 173, 189, 27, 249, 69, 61, 143, 90, 3, 190, 3, 211, 98, 189, 176, 24, 45, 190, 114, 28, 222, 61, 164, 162, 32, 190, 242, 11, 151, 189, 50, 207, 80, 188, 183, 79, 89, 61, 232, 187, 212, 60, 168, 174, 43, 62, 51, 156, 117, 60, 236, 149, 7, 190, 65, 181, 232, 189, 5, 4, 43, 62, 57, 197, 14, 61, 11, 251, 70, 188, 9, 216, 240, 189, 88, 110, 7, 190, 127, 230, 80, 189, 42, 88, 37, 190, 201, 66, 131, 61, 234, 71, 162, 189, 69, 207, 143, 61, 21, 90, 153, 60, 87, 88, 37, 189, 27, 171, 89, 60, 99, 141, 33, 190, 218, 52, 161, 61, 204, 233, 72, 189, 72, 175, 173, 61, 24, 108, 52, 190, 133, 86, 158, 61, 65, 238, 201, 61, 10, 142, 139, 60, 42, 33, 128, 189, 42, 138, 6, 189, 30, 226, 31, 190, 33, 23, 214, 189, 163, 35, 10, 190, 47, 133, 65, 61, 42, 64, 113, 188, 193, 102, 6, 60, 212, 53, 108, 188, 127, 47, 255, 189, 247, 42, 193, 189, 152, 9, 191, 61, 207, 213, 207, 61, 144, 254, 136, 61, 7, 251, 73, 189, 194, 170, 84, 189, 207, 204, 120, 189, 107, 55, 44, 62, 250, 115, 99, 189, 216, 176, 162, 61, 54, 206, 227, 61, 41, 202, 193, 189, 127, 236, 118, 189, 83, 103, 181, 61, 234, 212, 238, 189, 64, 85, 240, 61, 133, 29, 47, 190, 3, 179, 22, 190, 103, 90, 159, 60, 199, 141, 209, 189, 164, 241, 234, 188, 13, 208, 21, 62, 35, 254, 153, 189, 66, 135, 23, 190, 93, 20, 29, 190, 153, 124, 71, 189, 10, 120, 147, 189, 56, 253, 89, 59, 9, 251, 46, 61, 116, 129, 151, 189, 152, 62, 224, 61, 58, 33, 220, 60, 104, 179, 13, 62, 231, 47, 150, 61, 100, 28, 245, 60, 31, 68, 0, 62, 243, 218, 43, 190, 27, 251, 216, 188, 7, 76, 44, 189, 113, 134, 0, 62, 145, 120, 34, 190, 232, 224, 25, 190, 204, 164, 39, 62, 81, 219, 30, 190, 39, 138, 2, 62, 110, 227, 205, 60, 126, 26, 181, 189, 4, 178, 214, 61, 115, 204, 25, 62, 217, 254, 120, 189, 32, 251, 149, 61, 1, 251, 216, 61, 90, 181, 40, 62, 168, 169, 129, 189, 135, 132, 231, 61, 123, 154, 19, 189, 111, 37, 164, 188, 173, 58, 44, 62, 180, 240, 28, 62, 154, 207, 237, 189, 80, 51, 19, 60, 121, 27, 10, 61, 115, 173, 93, 189, 64, 207, 183, 61, 4, 80, 47, 190, 235, 137, 26, 62, 236, 25, 134, 61, 161, 43, 213, 189, 108, 92, 38, 188, 142, 192, 225, 61, 177, 165, 205, 60, 20, 63, 254, 61, 18, 148, 41, 62, 123, 178, 7, 62, 155, 211, 52, 190, 127, 64, 34, 62, 186, 23, 186, 61, 164, 4, 49, 190, 61, 254, 179, 61, 163, 132, 204, 188, 208, 193, 145, 61, 245, 144, 185, 61, 26, 192, 210, 61, 202, 74, 80, 189, 171, 6, 16, 190, 162, 62, 23, 62, 142, 39, 191, 61, 186, 229, 184, 58, 209, 113, 169, 60, 152, 229, 195, 61, 119, 186, 234, 60, 171, 29, 25, 61, 218, 122, 63, 60, 52, 207, 27, 190, 172, 25, 123, 189, 85, 245, 159, 189, 123, 61, 31, 61, 172, 220, 30, 61, 178, 119, 201, 189, 125, 198, 11, 190, 35, 40, 129, 61, 170, 41, 183, 188, 212, 136, 52, 61, 179, 201, 179, 61, 162, 114, 113, 61, 102, 180, 141, 61, 239, 29, 140, 61, 229, 6, 246, 61, 18, 156, 230, 189, 152, 143, 129, 61, 60, 139, 229, 61, 152, 67, 240, 60, 115, 243, 165, 61, 4, 178, 124, 187, 4, 34, 214, 189, 86, 106, 5, 190, 67, 110, 27, 62, 41, 71, 49, 62, 43, 177, 134, 189, 112, 231, 23, 190, 62, 205, 52, 61, 151, 81, 253, 61, 18, 196, 189, 188, 152, 216, 139, 189, 137, 239, 151, 188, 234, 124, 240, 61, 65, 145, 34, 61, 180, 9, 199, 189, 163, 103, 103, 59, 73, 44, 86, 189, 246, 180, 253, 61, 111, 155, 159, 188, 94, 163, 133, 189, 223, 248, 122, 60, 102, 33, 133, 61, 78, 114, 121, 61, 163, 240, 32, 60, 203, 169, 108, 188, 75, 53, 241, 61, 71, 242, 117, 189, 196, 218, 18, 190, 148, 255, 38, 190, 140, 107, 16, 62, 193, 140, 33, 62, 31, 39, 244, 189, 242, 60, 130, 189, 99, 147, 74, 188, 103, 38, 171, 61, 0, 236, 240, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 43, 241, 188, 230, 59, 67, 60, 166, 63, 49, 62, 177, 253, 39, 62, 147, 55, 29, 190, 226, 97, 126, 60, 183, 253, 173, 61, 98, 236, 187, 188, 242, 113, 14, 62, 180, 45, 244, 189, 85, 171, 135, 189, 75, 205, 158, 61, 7, 61, 250, 189, 29, 195, 100, 61, 84, 233, 39, 61, 13, 18, 11, 189, 129, 192, 166, 189, 2, 7, 150, 189, 48, 222, 38, 190, 147, 9, 35, 190, 129, 153, 17, 62, 210, 2, 38, 190, 206, 185, 242, 60, 119, 232, 142, 59, 105, 201, 51, 62, 214, 33, 161, 61, 154, 231, 69, 61, 230, 147, 69, 61, 134, 27, 1, 190, 213, 65, 146, 187, 5, 117, 92, 189, 186, 34, 19, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {172, 153, 196, 61, 198, 14, 20, 62, 125, 107, 228, 61, 115, 130, 34, 187, 167, 65, 48, 61, 79, 116, 17, 190, 240, 227, 37, 190, 183, 213, 111, 189, 199, 112, 44, 190, 136, 89, 177, 189, 179, 173, 26, 62, 84, 254, 235, 189, 46, 110, 153, 61, 129, 160, 4, 62, 64, 100, 41, 188, 21, 72, 46, 190, 51, 202, 208, 61, 114, 228, 251, 61, 80, 125, 122, 189, 61, 115, 63, 189, 93, 238, 193, 60, 84, 150, 3, 62, 84, 50, 215, 189, 172, 39, 171, 188, 36, 140, 141, 189, 155, 93, 37, 62, 132, 236, 140, 189, 96, 192, 202, 188, 148, 14, 36, 62, 168, 69, 150, 60, 214, 59, 165, 59, 169, 157, 210, 189, 207, 203, 24, 189, 222, 33, 233, 189, 224, 19, 8, 190, 13, 59, 106, 189, 67, 169, 29, 190, 85, 51, 74, 189, 132, 130, 217, 61, 128, 175, 178, 189, 127, 100, 24, 62, 137, 170, 33, 190, 249, 190, 183, 188, 17, 79, 188, 189, 109, 56, 141, 60, 230, 190, 48, 62, 14, 137, 22, 61, 146, 229, 243, 60, 113, 151, 223, 61, 94, 194, 231, 188, 21, 113, 51, 61, 206, 30, 29, 190, 77, 72, 53, 188, 32, 77, 205, 59, 233, 117, 110, 189, 115, 91, 43, 62, 78, 113, 132, 188, 37, 79, 34, 62, 56, 226, 250, 188, 220, 235, 83, 61, 194, 146, 46, 190, 190, 120, 183, 189, 220, 62, 237, 61, 222, 94, 88, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {210, 149, 133, 189, 197, 66, 193, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {168, 90, 207, 190, 123, 243, 95, 191, 112, 76, 131, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {124, 84, 38, 189, 107, 229, 205, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0040/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}