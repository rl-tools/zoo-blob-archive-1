// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 144, 243, 62, 231, 158, 122, 63, 199, 194, 200, 62, 95, 125, 47, 63, 43, 229, 114, 63, 83, 97, 248, 62, 54, 218, 148, 189, 134, 216, 95, 61, 100, 203, 109, 191, 220, 114, 241, 190, 124, 213, 46, 191, 62, 8, 187, 62, 225, 15, 51, 190, 145, 152, 65, 63, 15, 143, 80, 61, 33, 161, 218, 190, 39, 101, 221, 190, 3, 49, 138, 190, 243, 246, 193, 62, 243, 112, 55, 63, 54, 47, 172, 62, 250, 39, 9, 63, 198, 35, 85, 191, 152, 36, 141, 190, 208, 161, 54, 63, 62, 51, 211, 190, 53, 106, 174, 189, 194, 135, 5, 191, 63, 44, 102, 63, 44, 220, 217, 62, 11, 107, 246, 190, 177, 13, 80, 59, 211, 91, 20, 63, 26, 155, 120, 63, 191, 186, 217, 62, 62, 61, 221, 189, 34, 139, 251, 61, 106, 39, 167, 190, 11, 44, 186, 62, 7, 0, 234, 190, 220, 5, 107, 63, 178, 104, 252, 61, 166, 236, 218, 62, 81, 238, 161, 190, 128, 220, 147, 60, 164, 202, 212, 62, 63, 27, 255, 190, 155, 203, 35, 191, 248, 21, 225, 190, 201, 218, 3, 63, 229, 0, 209, 61, 31, 21, 96, 191, 9, 194, 65, 60, 229, 170, 38, 62, 35, 60, 16, 62, 23, 84, 183, 62, 214, 122, 37, 191, 51, 14, 15, 191, 174, 85, 180, 190, 59, 253, 98, 62, 22, 57, 3, 190, 156, 255, 34, 63, 3, 93, 84, 191, 129, 210, 144, 62, 146, 215, 18, 191, 16, 239, 221, 62, 112, 173, 91, 61, 143, 182, 7, 62, 50, 58, 72, 59, 192, 214, 233, 190, 27, 228, 218, 189, 240, 58, 208, 62, 4, 225, 170, 60, 77, 213, 160, 191, 210, 180, 146, 190, 86, 234, 252, 190, 45, 28, 240, 62, 215, 159, 164, 190, 18, 33, 143, 190, 151, 156, 55, 63, 150, 63, 85, 191, 142, 195, 151, 60, 38, 208, 74, 191, 120, 39, 139, 62, 231, 160, 168, 62, 214, 196, 70, 63, 150, 98, 136, 190, 121, 177, 212, 62, 49, 236, 57, 191, 119, 244, 161, 189, 206, 173, 190, 190, 90, 223, 243, 189, 164, 191, 34, 63, 227, 210, 5, 191, 198, 59, 35, 190, 144, 55, 28, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 228, 234, 190, 67, 6, 125, 62, 88, 217, 41, 62, 68, 7, 207, 190, 32, 41, 214, 62, 176, 250, 49, 191, 42, 194, 188, 59, 3, 106, 250, 190, 41, 229, 195, 62, 84, 198, 236, 62, 62, 50, 155, 190, 42, 219, 228, 62, 223, 91, 4, 60, 150, 231, 40, 63, 61, 202, 28, 63, 198, 66, 166, 190, 183, 72, 211, 62, 237, 70, 234, 62, 153, 130, 132, 189, 4, 129, 216, 61, 155, 157, 144, 61, 118, 77, 129, 62, 203, 230, 14, 63, 1, 46, 27, 190, 68, 190, 10, 63, 243, 15, 5, 191, 79, 24, 10, 190, 18, 171, 203, 62, 235, 6, 85, 62, 189, 201, 182, 187, 37, 187, 152, 62, 128, 113, 150, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 60, 158, 190, 86, 44, 13, 190, 6, 12, 150, 62, 29, 157, 163, 190, 86, 52, 82, 190, 100, 70, 81, 62, 226, 255, 249, 60, 243, 129, 68, 190, 206, 155, 82, 188, 187, 63, 175, 190, 142, 100, 28, 189, 0, 146, 97, 190, 89, 71, 245, 189, 186, 126, 135, 190, 60, 134, 236, 188, 207, 164, 45, 190, 132, 59, 187, 190, 1, 94, 148, 187, 234, 55, 15, 190, 77, 51, 82, 59, 217, 117, 23, 61, 249, 175, 227, 190, 24, 119, 116, 188, 126, 191, 139, 190, 116, 77, 92, 61, 132, 53, 162, 190, 52, 50, 168, 188, 3, 104, 131, 189, 242, 57, 20, 188, 161, 23, 164, 188, 87, 111, 96, 189, 212, 33, 168, 190, 148, 146, 89, 189, 127, 228, 93, 190, 15, 227, 171, 190, 213, 204, 38, 61, 49, 36, 173, 189, 177, 144, 200, 61, 139, 180, 66, 189, 20, 245, 23, 62, 143, 148, 245, 61, 186, 50, 132, 189, 176, 138, 2, 62, 44, 75, 39, 62, 9, 185, 0, 189, 172, 93, 247, 61, 103, 37, 110, 61, 156, 71, 6, 62, 45, 186, 37, 190, 136, 128, 180, 61, 80, 192, 143, 61, 221, 53, 205, 61, 28, 55, 138, 190, 130, 10, 121, 190, 56, 213, 186, 61, 112, 247, 75, 62, 36, 170, 62, 61, 106, 68, 22, 190, 55, 6, 72, 191, 215, 225, 85, 59, 43, 111, 5, 191, 98, 77, 101, 62, 93, 48, 142, 61, 14, 185, 155, 61, 32, 195, 141, 188, 114, 133, 121, 190, 84, 50, 84, 62, 154, 124, 124, 190, 224, 187, 49, 190, 15, 156, 130, 189, 128, 75, 1, 189, 221, 242, 2, 190, 37, 57, 243, 59, 151, 114, 242, 59, 85, 39, 189, 61, 114, 92, 132, 189, 132, 153, 50, 190, 251, 148, 178, 190, 143, 13, 139, 62, 163, 51, 201, 60, 79, 13, 149, 189, 28, 125, 157, 190, 153, 222, 46, 62, 220, 80, 6, 189, 99, 217, 48, 189, 100, 135, 143, 61, 83, 4, 36, 62, 51, 74, 208, 189, 217, 164, 22, 62, 249, 228, 6, 189, 110, 189, 107, 189, 130, 120, 39, 62, 249, 126, 218, 188, 199, 35, 95, 185, 1, 234, 126, 190, 32, 178, 228, 189, 48, 126, 245, 189, 207, 40, 42, 62, 255, 53, 113, 61, 248, 193, 83, 60, 83, 214, 13, 189, 94, 35, 133, 61, 72, 141, 227, 61, 24, 47, 159, 190, 141, 203, 132, 62, 165, 159, 7, 189, 217, 24, 68, 62, 78, 215, 126, 189, 143, 20, 162, 190, 36, 74, 202, 189, 118, 11, 169, 187, 242, 208, 145, 190, 179, 248, 43, 62, 10, 32, 52, 62, 211, 99, 226, 61, 198, 40, 74, 61, 125, 184, 32, 62, 139, 156, 150, 189, 207, 101, 247, 186, 58, 18, 218, 189, 123, 133, 6, 62, 245, 134, 154, 61, 210, 47, 178, 189, 128, 64, 170, 189, 211, 175, 151, 62, 156, 139, 192, 61, 26, 183, 130, 188, 253, 147, 141, 189, 154, 127, 21, 188, 103, 7, 19, 62, 228, 199, 142, 60, 103, 240, 135, 189, 110, 101, 140, 190, 127, 1, 23, 62, 124, 237, 24, 61, 213, 23, 97, 190, 100, 21, 147, 62, 200, 2, 137, 190, 92, 74, 173, 61, 72, 216, 117, 62, 90, 43, 38, 190, 30, 214, 182, 190, 240, 179, 80, 62, 155, 68, 162, 61, 156, 48, 235, 190, 2, 43, 202, 189, 24, 112, 208, 59, 209, 192, 125, 62, 20, 96, 243, 60, 19, 240, 17, 62, 211, 29, 104, 61, 87, 216, 49, 190, 165, 36, 239, 61, 132, 129, 128, 61, 103, 87, 238, 189, 57, 174, 20, 62, 200, 97, 11, 190, 76, 156, 139, 62, 221, 66, 59, 189, 47, 147, 205, 188, 96, 150, 88, 60, 163, 42, 28, 190, 6, 52, 152, 61, 141, 141, 37, 190, 52, 70, 141, 188, 172, 24, 92, 61, 161, 106, 226, 187, 12, 190, 135, 62, 237, 124, 141, 189, 15, 92, 14, 62, 53, 67, 152, 189, 19, 213, 0, 190, 204, 147, 28, 61, 232, 29, 54, 190, 2, 65, 240, 188, 236, 86, 16, 62, 114, 64, 217, 189, 159, 180, 230, 189, 41, 132, 70, 61, 175, 131, 142, 190, 115, 190, 224, 189, 54, 62, 21, 62, 181, 218, 98, 189, 108, 99, 106, 60, 176, 40, 163, 61, 226, 250, 234, 189, 8, 119, 161, 189, 121, 144, 58, 61, 118, 205, 117, 190, 160, 184, 44, 62, 197, 47, 172, 187, 162, 97, 81, 61, 165, 38, 12, 190, 99, 69, 212, 189, 1, 236, 175, 60, 71, 253, 34, 61, 194, 159, 39, 190, 47, 123, 32, 190, 209, 112, 158, 189, 118, 193, 20, 59, 78, 89, 3, 62, 76, 15, 149, 189, 130, 219, 210, 189, 5, 240, 2, 190, 201, 56, 4, 189, 123, 212, 8, 189, 242, 248, 116, 61, 229, 74, 22, 190, 192, 178, 179, 61, 186, 154, 65, 189, 253, 231, 133, 61, 226, 84, 190, 61, 242, 165, 207, 188, 1, 175, 244, 189, 113, 233, 182, 61, 113, 70, 13, 190, 46, 16, 37, 190, 105, 238, 117, 188, 14, 100, 184, 61, 145, 180, 44, 189, 38, 114, 33, 190, 183, 31, 143, 188, 112, 206, 36, 190, 212, 229, 209, 189, 74, 41, 157, 62, 177, 121, 132, 62, 142, 96, 220, 61, 52, 40, 155, 189, 170, 35, 176, 60, 133, 24, 188, 60, 49, 106, 186, 62, 255, 96, 24, 190, 28, 241, 140, 189, 192, 156, 223, 187, 252, 0, 15, 190, 217, 58, 23, 62, 161, 22, 74, 60, 51, 168, 61, 62, 55, 74, 167, 61, 230, 250, 136, 188, 46, 117, 38, 190, 119, 110, 17, 62, 204, 164, 85, 60, 14, 22, 251, 60, 114, 168, 117, 62, 24, 217, 88, 61, 125, 81, 130, 61, 157, 114, 101, 188, 194, 224, 13, 190, 223, 47, 141, 190, 31, 20, 36, 62, 231, 11, 104, 190, 216, 28, 175, 62, 226, 90, 210, 190, 122, 218, 119, 190, 31, 137, 5, 190, 243, 113, 194, 189, 65, 228, 27, 62, 147, 26, 210, 189, 25, 99, 174, 61, 169, 107, 173, 189, 187, 127, 31, 62, 218, 94, 219, 61, 139, 76, 202, 61, 60, 183, 89, 61, 213, 22, 59, 190, 26, 12, 26, 190, 253, 217, 42, 190, 132, 239, 60, 187, 132, 86, 4, 189, 237, 12, 224, 189, 149, 15, 20, 190, 225, 97, 129, 61, 229, 215, 76, 189, 159, 216, 205, 189, 160, 152, 102, 189, 80, 235, 192, 61, 127, 8, 46, 190, 148, 81, 216, 189, 203, 91, 17, 62, 7, 180, 44, 60, 204, 56, 80, 61, 152, 27, 1, 190, 78, 24, 41, 190, 184, 192, 70, 60, 240, 151, 144, 61, 26, 204, 139, 189, 29, 107, 140, 189, 108, 234, 12, 189, 6, 45, 206, 190, 226, 131, 168, 61, 131, 105, 236, 60, 104, 109, 209, 61, 138, 87, 135, 187, 185, 236, 132, 190, 61, 131, 164, 190, 22, 117, 201, 190, 140, 219, 71, 190, 119, 107, 116, 191, 68, 63, 241, 190, 160, 73, 12, 190, 254, 219, 218, 189, 0, 60, 154, 61, 37, 134, 110, 190, 22, 178, 50, 62, 75, 196, 213, 62, 50, 156, 90, 190, 248, 143, 197, 61, 96, 149, 81, 62, 58, 253, 82, 61, 25, 126, 98, 61, 51, 246, 161, 190, 210, 233, 156, 62, 122, 48, 106, 190, 77, 47, 244, 61, 152, 241, 250, 189, 158, 5, 170, 189, 233, 93, 163, 190, 215, 252, 9, 189, 187, 133, 230, 190, 40, 11, 20, 189, 192, 253, 110, 189, 229, 181, 227, 61, 155, 222, 42, 190, 80, 220, 227, 189, 135, 64, 124, 187, 2, 8, 22, 60, 200, 83, 223, 61, 70, 54, 155, 189, 8, 81, 202, 61, 41, 79, 5, 61, 215, 184, 104, 61, 50, 107, 214, 188, 50, 143, 181, 189, 244, 102, 206, 189, 185, 140, 213, 60, 22, 200, 150, 61, 23, 197, 41, 189, 17, 208, 228, 189, 15, 156, 34, 189, 169, 15, 156, 189, 162, 253, 27, 190, 139, 107, 19, 62, 250, 83, 206, 189, 164, 208, 148, 189, 91, 220, 170, 189, 92, 238, 135, 60, 91, 65, 148, 189, 229, 104, 176, 189, 29, 26, 178, 61, 249, 18, 67, 60, 32, 189, 41, 186, 75, 99, 197, 61, 125, 139, 154, 62, 227, 36, 24, 61, 232, 5, 81, 61, 2, 159, 107, 61, 128, 152, 157, 190, 97, 176, 108, 188, 99, 3, 162, 190, 6, 151, 249, 189, 204, 245, 181, 189, 84, 232, 18, 190, 189, 177, 3, 62, 63, 172, 129, 61, 46, 168, 67, 62, 82, 177, 124, 61, 255, 56, 144, 190, 172, 23, 68, 62, 75, 183, 102, 188, 159, 55, 112, 190, 222, 172, 80, 62, 212, 166, 162, 62, 83, 12, 39, 61, 240, 152, 10, 62, 39, 238, 241, 60, 191, 125, 101, 189, 150, 226, 0, 190, 0, 131, 111, 62, 129, 129, 8, 190, 147, 25, 16, 62, 163, 253, 235, 190, 18, 44, 139, 60, 116, 44, 89, 188, 75, 11, 239, 190, 51, 89, 128, 190, 206, 227, 42, 191, 29, 153, 226, 190, 30, 89, 85, 59, 177, 113, 61, 61, 238, 70, 160, 190, 71, 51, 249, 189, 150, 31, 66, 62, 27, 163, 44, 62, 190, 194, 53, 61, 27, 21, 153, 62, 54, 45, 254, 190, 34, 159, 4, 62, 227, 66, 37, 62, 166, 26, 242, 60, 148, 71, 35, 189, 40, 95, 52, 62, 94, 227, 153, 61, 199, 232, 21, 62, 23, 168, 245, 190, 6, 239, 162, 190, 24, 47, 91, 62, 168, 191, 141, 62, 67, 84, 129, 190, 18, 226, 142, 188, 5, 242, 213, 191, 124, 125, 159, 62, 119, 122, 111, 191, 22, 90, 158, 62, 81, 28, 143, 62, 36, 28, 146, 60, 227, 39, 143, 190, 16, 244, 158, 189, 65, 117, 121, 190, 163, 71, 158, 190, 141, 13, 2, 190, 122, 240, 173, 61, 105, 140, 144, 190, 185, 115, 226, 62, 32, 236, 167, 62, 50, 68, 214, 61, 174, 148, 185, 61, 78, 18, 15, 61, 195, 179, 63, 189, 48, 12, 34, 190, 61, 235, 83, 62, 97, 51, 238, 62, 141, 86, 142, 189, 99, 17, 102, 62, 137, 172, 170, 62, 145, 134, 89, 62, 62, 10, 144, 190, 171, 61, 140, 190, 35, 47, 30, 62, 7, 26, 235, 61, 22, 97, 25, 190, 94, 248, 78, 61, 235, 115, 29, 191, 136, 111, 46, 62, 109, 62, 136, 190, 234, 195, 179, 62, 31, 44, 49, 189, 152, 160, 154, 62, 209, 128, 16, 190, 77, 18, 107, 62, 211, 82, 58, 62, 100, 111, 139, 62, 23, 63, 127, 191, 200, 246, 68, 62, 141, 230, 9, 188, 153, 108, 165, 61, 21, 138, 183, 62, 74, 29, 65, 189, 80, 154, 168, 61, 203, 47, 165, 189, 114, 221, 62, 62, 177, 62, 48, 191, 197, 57, 193, 61, 1, 253, 10, 190, 154, 240, 124, 191, 22, 39, 149, 190, 219, 23, 73, 61, 250, 148, 225, 59, 114, 186, 38, 62, 60, 74, 217, 61, 18, 170, 139, 61, 68, 6, 17, 190, 16, 156, 227, 61, 144, 113, 11, 190, 122, 68, 212, 189, 137, 54, 136, 62, 19, 147, 136, 190, 218, 211, 19, 62, 30, 253, 247, 189, 230, 226, 228, 189, 96, 74, 163, 188, 12, 228, 170, 189, 137, 99, 190, 61, 171, 91, 210, 189, 50, 208, 133, 61, 99, 20, 174, 59, 223, 58, 180, 187, 61, 135, 46, 62, 204, 58, 41, 61, 252, 58, 3, 187, 107, 4, 167, 188, 210, 175, 30, 61, 46, 48, 182, 61, 180, 7, 132, 59, 249, 179, 173, 61, 159, 177, 38, 190, 179, 205, 248, 61, 141, 154, 245, 189, 176, 56, 22, 190, 140, 223, 253, 189, 197, 77, 215, 189, 8, 190, 28, 189, 119, 127, 0, 190, 104, 247, 177, 188, 195, 236, 217, 188, 168, 89, 151, 61, 142, 2, 155, 186, 25, 151, 113, 189, 189, 31, 54, 61, 217, 94, 37, 190, 30, 144, 88, 188, 218, 22, 21, 62, 65, 141, 23, 62, 141, 39, 50, 190, 31, 166, 18, 190, 38, 72, 228, 189, 138, 199, 83, 61, 113, 225, 198, 189, 121, 59, 59, 61, 114, 148, 28, 62, 146, 172, 176, 61, 45, 207, 10, 188, 154, 93, 235, 189, 143, 35, 130, 61, 98, 116, 190, 61, 113, 122, 176, 61, 101, 235, 68, 190, 74, 140, 156, 60, 46, 33, 45, 190, 56, 0, 228, 61, 148, 146, 19, 190, 147, 99, 160, 189, 204, 15, 193, 189, 125, 98, 2, 190, 151, 31, 32, 190, 122, 60, 247, 189, 226, 74, 252, 61, 108, 108, 10, 190, 203, 197, 80, 61, 26, 204, 9, 61, 200, 173, 46, 190, 10, 251, 10, 61, 123, 199, 44, 61, 175, 242, 102, 61, 253, 78, 8, 190, 134, 42, 43, 61, 226, 130, 45, 190, 237, 65, 141, 60, 67, 214, 214, 189, 1, 233, 208, 61, 216, 5, 76, 61, 28, 164, 90, 189, 232, 28, 51, 62, 148, 248, 39, 186, 7, 115, 38, 190, 211, 62, 36, 189, 2, 183, 144, 189, 114, 150, 188, 188, 201, 188, 0, 190, 130, 11, 19, 190, 17, 77, 217, 189, 125, 15, 7, 61, 168, 235, 47, 62, 152, 82, 146, 189, 108, 235, 10, 190, 170, 38, 10, 189, 109, 10, 0, 190, 150, 49, 181, 188, 104, 157, 34, 190, 95, 236, 24, 189, 144, 13, 146, 61, 92, 7, 53, 61, 133, 107, 186, 187, 9, 234, 32, 190, 59, 3, 96, 189, 15, 235, 93, 61, 130, 199, 171, 62, 120, 196, 97, 62, 46, 190, 17, 62, 236, 98, 85, 60, 135, 222, 140, 62, 7, 159, 43, 60, 88, 83, 55, 61, 99, 212, 252, 61, 81, 141, 28, 190, 177, 109, 199, 61, 175, 41, 44, 190, 55, 133, 64, 61, 68, 242, 89, 62, 38, 55, 174, 61, 129, 7, 139, 59, 141, 60, 190, 61, 22, 239, 136, 61, 191, 187, 159, 189, 82, 249, 159, 188, 71, 158, 245, 61, 213, 105, 74, 62, 185, 143, 166, 61, 80, 73, 1, 61, 130, 209, 6, 189, 121, 177, 58, 62, 202, 52, 21, 190, 219, 73, 126, 62, 139, 214, 117, 190, 84, 175, 14, 62, 202, 221, 150, 190, 55, 99, 62, 190, 249, 230, 93, 190, 18, 119, 202, 61, 146, 50, 38, 190, 43, 176, 25, 190, 10, 47, 218, 61, 247, 106, 15, 62, 224, 140, 239, 188, 239, 126, 251, 188, 114, 207, 18, 190, 227, 193, 19, 190, 101, 207, 6, 190, 197, 248, 231, 189, 105, 103, 30, 190, 143, 44, 9, 62, 66, 241, 176, 60, 41, 103, 159, 189, 192, 55, 57, 57, 122, 161, 15, 62, 95, 138, 143, 189, 26, 20, 140, 61, 212, 73, 34, 62, 9, 190, 147, 188, 167, 57, 242, 189, 144, 36, 30, 190, 136, 130, 52, 190, 86, 189, 89, 61, 220, 194, 119, 60, 54, 32, 65, 189, 90, 211, 9, 190, 180, 230, 222, 189, 67, 248, 23, 61, 187, 33, 194, 189, 195, 14, 32, 189, 19, 230, 159, 60, 229, 163, 220, 61, 183, 53, 3, 62, 73, 192, 104, 61, 56, 92, 10, 61, 117, 184, 136, 61, 199, 83, 83, 62, 203, 217, 139, 190, 220, 104, 39, 188, 242, 144, 154, 189, 82, 126, 209, 189, 6, 140, 86, 62, 132, 221, 177, 189, 120, 68, 197, 189, 228, 191, 170, 61, 84, 120, 230, 189, 230, 84, 144, 190, 134, 146, 84, 62, 197, 208, 21, 190, 125, 121, 3, 62, 151, 141, 234, 61, 30, 27, 187, 189, 88, 59, 46, 62, 41, 90, 189, 61, 236, 45, 63, 187, 236, 230, 33, 187, 24, 193, 78, 62, 186, 8, 74, 188, 52, 251, 126, 61, 57, 107, 114, 190, 176, 36, 230, 61, 166, 177, 59, 190, 216, 21, 168, 62, 118, 1, 149, 61, 117, 193, 26, 62, 27, 144, 115, 190, 20, 219, 231, 62, 225, 80, 139, 61, 88, 144, 60, 190, 225, 20, 239, 61, 13, 114, 73, 190, 27, 61, 83, 62, 28, 72, 199, 189, 232, 45, 79, 62, 187, 44, 156, 190, 12, 141, 178, 62, 91, 1, 217, 188, 210, 189, 195, 61, 15, 132, 201, 62, 42, 223, 137, 190, 133, 89, 149, 62, 228, 26, 31, 191, 59, 21, 143, 62, 56, 135, 63, 190, 94, 65, 163, 189, 198, 229, 9, 190, 190, 119, 3, 190, 130, 34, 182, 189, 17, 21, 158, 62, 167, 83, 131, 190, 31, 68, 38, 62, 119, 251, 88, 62, 22, 25, 145, 189, 142, 61, 209, 187, 156, 198, 131, 190, 255, 27, 207, 61, 233, 85, 181, 61, 212, 126, 232, 189, 59, 116, 35, 61, 191, 205, 81, 190, 167, 67, 131, 188, 172, 45, 107, 190, 88, 0, 211, 62, 196, 212, 11, 60, 187, 118, 151, 189, 74, 174, 249, 62, 105, 229, 103, 190, 41, 91, 5, 62, 137, 150, 13, 62, 0, 162, 108, 190, 27, 240, 232, 189, 157, 95, 183, 189, 129, 201, 244, 189, 230, 36, 167, 61, 26, 31, 14, 189, 219, 118, 130, 190, 105, 49, 116, 189, 127, 49, 135, 61, 13, 17, 30, 190, 235, 216, 5, 190, 171, 15, 3, 60, 46, 43, 115, 188, 243, 27, 164, 189, 112, 111, 69, 62, 170, 19, 133, 61, 18, 156, 63, 60, 43, 124, 183, 62, 122, 57, 73, 62, 198, 133, 7, 62, 65, 144, 4, 189, 73, 188, 16, 61, 73, 58, 131, 190, 191, 89, 176, 61, 122, 250, 157, 190, 227, 182, 183, 189, 175, 20, 23, 61, 211, 145, 67, 190, 123, 17, 228, 61, 66, 72, 201, 62, 108, 67, 237, 61, 189, 214, 68, 189, 96, 47, 190, 189, 107, 19, 71, 62, 4, 93, 82, 59, 133, 114, 203, 190, 5, 93, 13, 62, 246, 174, 146, 62, 109, 45, 27, 62, 29, 134, 133, 189, 241, 179, 115, 189, 136, 95, 133, 61, 175, 18, 181, 190, 30, 113, 169, 61, 60, 125, 38, 189, 7, 49, 145, 62, 236, 122, 234, 190, 229, 200, 137, 190, 234, 93, 175, 190, 178, 167, 202, 61, 46, 83, 146, 188, 139, 39, 30, 189, 182, 109, 49, 62, 70, 68, 141, 189, 46, 210, 29, 188, 175, 126, 2, 61, 111, 28, 52, 62, 233, 113, 242, 61, 233, 69, 39, 190, 26, 128, 0, 190, 97, 119, 17, 190, 214, 141, 169, 187, 97, 221, 9, 60, 46, 159, 50, 59, 222, 97, 29, 190, 134, 55, 139, 189, 50, 71, 34, 190, 132, 238, 42, 190, 79, 130, 144, 189, 245, 116, 207, 189, 167, 137, 19, 190, 114, 238, 125, 189, 57, 98, 227, 188, 254, 170, 47, 190, 56, 143, 205, 188, 238, 155, 101, 61, 193, 227, 145, 189, 143, 180, 241, 189, 58, 183, 5, 190, 122, 188, 47, 62, 201, 136, 174, 61, 254, 136, 33, 190, 194, 12, 133, 190, 68, 185, 144, 190, 125, 20, 91, 190, 139, 114, 8, 189, 110, 147, 219, 188, 163, 30, 58, 190, 15, 95, 97, 62, 205, 165, 38, 62, 135, 97, 144, 189, 15, 45, 129, 62, 34, 136, 184, 187, 159, 237, 54, 190, 15, 141, 20, 61, 197, 127, 107, 62, 81, 75, 8, 63, 236, 118, 139, 60, 243, 70, 104, 61, 48, 193, 132, 62, 85, 97, 22, 62, 189, 191, 135, 190, 200, 138, 30, 190, 235, 156, 103, 189, 60, 138, 183, 187, 240, 121, 20, 61, 202, 182, 30, 189, 173, 172, 32, 191, 18, 155, 174, 62, 199, 93, 170, 190, 208, 163, 57, 62, 133, 16, 48, 62, 177, 83, 244, 60, 245, 167, 169, 187, 34, 26, 140, 188, 6, 63, 137, 62, 40, 251, 145, 189, 210, 95, 155, 188, 191, 22, 6, 190, 231, 99, 83, 62, 25, 118, 75, 190, 237, 217, 129, 62, 10, 173, 163, 60, 108, 33, 62, 190, 107, 0, 31, 61, 13, 195, 28, 62, 72, 207, 227, 61, 28, 32, 3, 62, 111, 210, 149, 190, 114, 148, 18, 190, 11, 174, 22, 61, 129, 212, 99, 190, 185, 79, 206, 61, 225, 136, 105, 61, 124, 238, 70, 62, 66, 79, 33, 62, 2, 109, 189, 189, 208, 108, 194, 61, 90, 116, 113, 190, 218, 111, 244, 62, 111, 247, 217, 188, 50, 235, 183, 62, 203, 204, 164, 190, 82, 60, 145, 61, 0, 185, 145, 60, 10, 142, 139, 60, 103, 42, 151, 190, 245, 218, 38, 189, 244, 105, 1, 190, 250, 213, 23, 190, 149, 93, 127, 189, 212, 58, 101, 189, 14, 252, 133, 62, 216, 16, 254, 61, 98, 38, 50, 189, 184, 56, 251, 189, 36, 38, 3, 190, 230, 40, 81, 62, 73, 22, 21, 61, 4, 3, 229, 61, 230, 27, 152, 61, 180, 246, 20, 190, 59, 48, 227, 190, 139, 83, 91, 62, 133, 234, 232, 189, 67, 239, 53, 61, 36, 58, 20, 62, 197, 22, 115, 190, 74, 79, 64, 189, 88, 151, 253, 61, 153, 60, 79, 190, 66, 130, 103, 61, 67, 8, 44, 190, 228, 216, 155, 190, 164, 143, 54, 62, 2, 152, 177, 188, 79, 226, 164, 188, 201, 187, 74, 188, 118, 183, 73, 190, 135, 20, 222, 190, 58, 181, 132, 190, 222, 89, 68, 189, 103, 57, 25, 190, 201, 65, 237, 189, 139, 200, 118, 61, 84, 219, 173, 187, 211, 2, 51, 62, 32, 113, 171, 61, 45, 12, 143, 62, 38, 161, 241, 189, 239, 101, 109, 61, 228, 193, 46, 62, 76, 209, 156, 189, 93, 153, 239, 60, 86, 25, 90, 61, 160, 223, 133, 62, 184, 247, 20, 60, 102, 158, 181, 190, 91, 231, 28, 61, 186, 56, 236, 189, 118, 250, 136, 62, 90, 89, 122, 189, 95, 202, 19, 190, 60, 176, 53, 191, 84, 111, 118, 62, 232, 188, 5, 191, 200, 145, 91, 62, 170, 241, 59, 62, 9, 244, 138, 62, 6, 163, 146, 189, 183, 226, 88, 62, 105, 105, 160, 61, 92, 176, 16, 61, 67, 251, 25, 62, 27, 79, 18, 62, 171, 132, 241, 188, 188, 37, 148, 190, 91, 132, 74, 62, 253, 3, 203, 189, 206, 86, 190, 60, 253, 93, 246, 189, 70, 117, 214, 188, 87, 183, 140, 61, 58, 38, 237, 60, 203, 93, 34, 190, 191, 4, 79, 61, 212, 132, 190, 61, 254, 84, 89, 61, 124, 90, 134, 62, 78, 246, 90, 62, 176, 122, 46, 190, 245, 247, 147, 62, 90, 94, 136, 61, 38, 71, 164, 189, 100, 207, 107, 60, 191, 34, 209, 61, 63, 237, 56, 61, 116, 163, 109, 62, 114, 149, 31, 61, 229, 120, 4, 190, 238, 180, 101, 190, 200, 95, 143, 62, 17, 155, 51, 62, 227, 57, 192, 189, 51, 248, 165, 58, 44, 142, 235, 61, 44, 115, 22, 58, 16, 226, 236, 61, 200, 240, 201, 59, 218, 123, 50, 190, 17, 106, 133, 189, 132, 0, 177, 189, 196, 224, 65, 62, 159, 242, 19, 62, 123, 165, 214, 189, 223, 1, 41, 190, 224, 69, 246, 60, 101, 21, 27, 189, 172, 139, 76, 189, 229, 109, 77, 61, 249, 186, 142, 189, 237, 56, 109, 188, 243, 239, 210, 61, 112, 201, 44, 61, 147, 163, 24, 190, 157, 154, 237, 58, 182, 174, 174, 61, 154, 131, 144, 188, 254, 98, 208, 60, 45, 74, 146, 189, 244, 128, 40, 190, 72, 169, 8, 190, 93, 65, 11, 62, 216, 160, 190, 62, 254, 186, 57, 62, 32, 188, 151, 61, 200, 182, 76, 61, 67, 164, 78, 62, 196, 159, 219, 189, 250, 45, 49, 62, 43, 139, 218, 190, 135, 39, 184, 61, 131, 241, 146, 60, 218, 158, 66, 190, 79, 17, 65, 62, 45, 4, 151, 60, 195, 15, 55, 62, 135, 30, 193, 59, 242, 227, 193, 190, 25, 60, 12, 61, 146, 177, 189, 61, 38, 254, 65, 190, 42, 112, 72, 189, 93, 75, 100, 62, 18, 214, 63, 62, 115, 141, 68, 61, 124, 119, 149, 190, 15, 60, 101, 190, 10, 140, 24, 190, 147, 36, 168, 62, 184, 240, 121, 190, 126, 7, 140, 62, 137, 173, 207, 190, 204, 132, 185, 187, 85, 220, 134, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 98, 234, 60, 6, 41, 142, 61, 190, 223, 84, 62, 63, 210, 176, 62, 198, 22, 10, 188, 253, 60, 37, 190, 84, 207, 55, 61, 165, 50, 129, 61, 123, 135, 241, 61, 82, 177, 23, 60, 85, 171, 135, 189, 173, 30, 119, 62, 147, 254, 80, 61, 5, 66, 146, 61, 240, 151, 101, 61, 191, 176, 104, 189, 88, 104, 0, 190, 2, 7, 150, 189, 197, 13, 19, 190, 147, 9, 35, 190, 226, 140, 136, 62, 138, 176, 191, 189, 48, 233, 27, 62, 109, 186, 52, 59, 105, 201, 51, 62, 128, 12, 232, 61, 162, 212, 95, 62, 77, 240, 179, 189, 50, 214, 122, 189, 129, 75, 36, 62, 140, 207, 51, 190, 28, 81, 15, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 109, 160, 62, 166, 97, 168, 62, 61, 251, 59, 62, 193, 70, 66, 189, 197, 197, 49, 62, 206, 46, 71, 190, 19, 84, 24, 190, 254, 73, 158, 190, 208, 115, 33, 190, 105, 36, 83, 191, 179, 173, 26, 62, 128, 39, 132, 190, 219, 145, 140, 63, 74, 31, 31, 63, 57, 242, 227, 62, 21, 184, 23, 190, 0, 109, 215, 61, 114, 228, 251, 61, 153, 95, 81, 190, 61, 115, 63, 189, 76, 146, 173, 189, 169, 202, 238, 62, 156, 158, 106, 61, 166, 178, 236, 190, 36, 140, 141, 189, 251, 114, 7, 63, 51, 158, 117, 190, 159, 216, 222, 189, 46, 148, 191, 62, 61, 162, 214, 189, 40, 255, 15, 61, 122, 39, 180, 190, 33, 183, 77, 190, 233, 196, 2, 190, 111, 80, 52, 190, 23, 48, 55, 190, 103, 204, 148, 190, 56, 144, 108, 61, 163, 77, 163, 61, 159, 214, 167, 189, 75, 114, 15, 62, 182, 158, 252, 188, 249, 190, 183, 188, 197, 83, 30, 190, 238, 72, 56, 189, 203, 72, 252, 61, 94, 44, 158, 189, 30, 200, 54, 61, 184, 34, 160, 61, 94, 194, 231, 188, 200, 106, 171, 61, 206, 30, 29, 190, 91, 224, 232, 189, 35, 164, 37, 62, 34, 36, 157, 190, 60, 35, 146, 62, 78, 113, 132, 188, 208, 55, 73, 62, 138, 182, 0, 190, 70, 91, 133, 62, 53, 162, 56, 190, 214, 219, 75, 190, 238, 203, 76, 62, 241, 87, 129, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {42, 109, 185, 189, 225, 89, 200, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {75, 131, 163, 63, 182, 14, 114, 191, 135, 146, 163, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {200, 250, 108, 64, 199, 147, 7, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0040/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}