// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 23, 75, 63, 118, 124, 140, 63, 139, 103, 188, 62, 157, 45, 19, 63, 138, 91, 173, 63, 135, 132, 231, 62, 108, 90, 128, 189, 73, 150, 187, 191, 115, 227, 249, 190, 88, 134, 62, 191, 66, 185, 88, 191, 201, 205, 182, 62, 217, 50, 101, 190, 235, 192, 135, 63, 200, 226, 132, 62, 82, 244, 10, 191, 3, 58, 153, 191, 104, 64, 203, 190, 48, 84, 141, 62, 67, 216, 153, 63, 23, 226, 142, 62, 95, 247, 70, 63, 200, 160, 73, 191, 69, 168, 130, 190, 124, 156, 58, 63, 206, 218, 72, 191, 120, 199, 10, 190, 150, 53, 218, 190, 36, 137, 197, 63, 114, 138, 217, 62, 85, 33, 19, 191, 79, 56, 118, 63, 6, 187, 232, 62, 11, 174, 113, 63, 183, 151, 69, 62, 229, 164, 223, 189, 99, 26, 68, 189, 14, 120, 11, 191, 141, 119, 160, 62, 137, 107, 3, 191, 76, 185, 146, 63, 104, 232, 165, 62, 117, 178, 186, 62, 62, 236, 210, 190, 167, 146, 32, 61, 241, 86, 166, 62, 71, 184, 106, 191, 129, 76, 27, 191, 157, 163, 25, 191, 216, 1, 66, 62, 227, 161, 38, 61, 178, 81, 145, 191, 99, 181, 6, 62, 118, 53, 12, 61, 78, 144, 180, 60, 120, 216, 181, 62, 2, 37, 43, 191, 92, 214, 20, 191, 211, 158, 22, 191, 118, 241, 175, 62, 38, 254, 223, 190, 165, 77, 4, 63, 140, 134, 42, 191, 13, 113, 8, 62, 20, 187, 87, 191, 140, 110, 179, 62, 70, 147, 104, 190, 140, 235, 64, 62, 65, 204, 148, 60, 96, 170, 136, 190, 3, 152, 126, 62, 240, 169, 212, 62, 1, 100, 165, 61, 43, 208, 238, 191, 93, 46, 15, 191, 7, 153, 195, 190, 146, 219, 139, 63, 206, 200, 210, 59, 204, 195, 199, 189, 188, 219, 170, 190, 224, 82, 56, 191, 181, 211, 57, 60, 61, 86, 80, 191, 243, 45, 152, 62, 253, 67, 213, 62, 184, 96, 34, 63, 250, 93, 185, 190, 200, 33, 190, 62, 113, 108, 113, 191, 37, 16, 83, 190, 165, 206, 175, 190, 141, 72, 79, 62, 149, 40, 26, 63, 189, 3, 222, 190, 231, 184, 235, 62, 234, 129, 25, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {107, 35, 227, 190, 194, 250, 228, 62, 91, 159, 162, 189, 213, 22, 172, 190, 83, 166, 168, 62, 14, 91, 39, 191, 187, 125, 109, 62, 2, 63, 22, 191, 110, 32, 192, 62, 136, 220, 217, 62, 138, 62, 148, 190, 227, 224, 135, 62, 84, 137, 2, 57, 120, 49, 31, 63, 173, 178, 17, 63, 165, 246, 176, 190, 123, 159, 10, 63, 86, 128, 245, 62, 95, 160, 157, 189, 177, 79, 137, 189, 69, 141, 168, 187, 211, 132, 139, 62, 176, 126, 227, 62, 34, 179, 129, 190, 44, 223, 111, 62, 44, 163, 232, 190, 231, 183, 210, 190, 133, 156, 172, 62, 42, 171, 132, 61, 168, 134, 125, 189, 220, 159, 143, 62, 98, 109, 175, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 60, 158, 190, 86, 44, 13, 190, 109, 46, 135, 62, 150, 252, 173, 190, 156, 5, 113, 190, 227, 220, 49, 62, 226, 255, 249, 60, 23, 185, 75, 190, 24, 176, 12, 189, 117, 61, 175, 190, 142, 100, 28, 189, 165, 55, 109, 190, 89, 71, 245, 189, 123, 211, 175, 190, 4, 137, 94, 189, 250, 233, 71, 190, 91, 40, 21, 191, 231, 144, 13, 190, 101, 191, 43, 190, 49, 77, 113, 59, 36, 140, 47, 60, 28, 99, 2, 191, 175, 110, 118, 189, 126, 191, 139, 190, 82, 103, 164, 60, 234, 89, 177, 190, 138, 189, 58, 189, 20, 123, 240, 189, 67, 11, 188, 188, 177, 246, 68, 189, 44, 148, 95, 189, 212, 33, 168, 190, 241, 126, 204, 190, 85, 54, 169, 190, 240, 140, 195, 190, 11, 124, 69, 62, 196, 102, 132, 190, 236, 142, 20, 189, 164, 12, 102, 190, 189, 194, 104, 62, 180, 93, 130, 62, 248, 234, 90, 190, 6, 160, 3, 61, 230, 1, 124, 62, 25, 20, 160, 61, 71, 237, 248, 60, 244, 87, 232, 61, 29, 113, 31, 62, 240, 37, 161, 189, 248, 87, 110, 62, 16, 155, 242, 62, 25, 125, 39, 62, 194, 112, 4, 190, 168, 97, 41, 190, 115, 43, 241, 61, 223, 153, 33, 62, 35, 44, 137, 61, 34, 199, 19, 191, 209, 177, 97, 191, 144, 130, 15, 61, 209, 25, 137, 190, 107, 124, 149, 62, 214, 135, 122, 61, 183, 40, 5, 61, 227, 112, 246, 190, 182, 122, 199, 190, 96, 55, 117, 62, 126, 64, 198, 62, 44, 3, 36, 191, 175, 85, 4, 190, 48, 154, 127, 190, 250, 141, 18, 60, 134, 149, 146, 61, 216, 178, 238, 190, 150, 239, 147, 189, 118, 18, 30, 58, 147, 6, 42, 61, 38, 56, 8, 191, 216, 128, 175, 62, 68, 4, 75, 60, 159, 122, 142, 187, 1, 171, 111, 188, 118, 118, 63, 62, 222, 245, 225, 62, 61, 53, 8, 189, 67, 183, 95, 62, 113, 225, 108, 62, 246, 183, 6, 190, 204, 207, 117, 62, 83, 204, 27, 190, 123, 53, 128, 189, 147, 114, 162, 62, 207, 158, 211, 61, 46, 206, 108, 59, 24, 10, 73, 190, 229, 86, 28, 190, 156, 2, 101, 189, 65, 73, 131, 62, 228, 107, 3, 61, 106, 6, 189, 190, 143, 122, 202, 61, 117, 172, 102, 62, 147, 116, 89, 62, 0, 74, 19, 191, 36, 54, 109, 62, 95, 4, 138, 188, 116, 188, 75, 62, 183, 31, 241, 189, 75, 76, 15, 191, 128, 9, 230, 186, 87, 192, 188, 59, 140, 57, 155, 190, 239, 130, 81, 62, 115, 161, 43, 62, 84, 157, 18, 61, 241, 243, 5, 190, 4, 211, 227, 61, 158, 216, 56, 190, 42, 170, 252, 60, 184, 114, 246, 189, 146, 7, 195, 61, 120, 16, 123, 62, 87, 255, 245, 189, 197, 122, 50, 190, 80, 84, 64, 62, 129, 161, 14, 62, 89, 2, 170, 189, 156, 92, 183, 189, 173, 24, 193, 190, 109, 63, 199, 60, 43, 144, 164, 60, 4, 247, 175, 61, 202, 180, 28, 191, 197, 75, 95, 61, 72, 224, 17, 190, 116, 164, 32, 190, 91, 209, 148, 62, 69, 90, 169, 191, 208, 97, 93, 60, 115, 207, 160, 62, 106, 204, 8, 190, 178, 49, 65, 191, 102, 136, 65, 62, 29, 105, 230, 61, 20, 59, 110, 191, 25, 18, 17, 191, 151, 83, 170, 61, 51, 183, 156, 62, 110, 254, 215, 61, 55, 87, 231, 61, 67, 56, 34, 61, 7, 46, 148, 190, 254, 177, 228, 61, 10, 211, 114, 62, 188, 182, 59, 189, 167, 124, 66, 61, 184, 95, 184, 61, 102, 99, 137, 62, 254, 247, 112, 190, 144, 136, 3, 190, 63, 245, 93, 191, 120, 247, 67, 191, 200, 6, 47, 62, 154, 58, 86, 191, 4, 159, 35, 191, 199, 51, 144, 189, 81, 184, 73, 191, 223, 85, 207, 62, 167, 142, 72, 62, 148, 100, 123, 59, 7, 119, 205, 189, 30, 245, 65, 187, 147, 26, 14, 190, 191, 93, 175, 190, 239, 204, 105, 62, 60, 65, 110, 62, 232, 230, 162, 61, 136, 104, 154, 188, 100, 56, 76, 61, 192, 88, 69, 191, 14, 192, 12, 190, 16, 171, 58, 62, 161, 212, 210, 61, 137, 153, 102, 60, 193, 9, 113, 62, 15, 134, 202, 190, 252, 147, 236, 189, 154, 41, 165, 62, 38, 237, 236, 190, 16, 238, 213, 62, 226, 72, 135, 62, 73, 120, 102, 61, 165, 38, 12, 190, 99, 69, 212, 189, 1, 236, 175, 60, 71, 253, 34, 61, 194, 159, 39, 190, 47, 123, 32, 190, 209, 112, 158, 189, 118, 193, 20, 59, 78, 89, 3, 62, 76, 15, 149, 189, 130, 219, 210, 189, 5, 240, 2, 190, 201, 56, 4, 189, 123, 212, 8, 189, 242, 248, 116, 61, 229, 74, 22, 190, 192, 178, 179, 61, 186, 154, 65, 189, 253, 231, 133, 61, 226, 84, 190, 61, 242, 165, 207, 188, 1, 175, 244, 189, 113, 233, 182, 61, 113, 70, 13, 190, 46, 16, 37, 190, 105, 238, 117, 188, 14, 100, 184, 61, 145, 180, 44, 189, 38, 114, 33, 190, 183, 31, 143, 188, 112, 206, 36, 190, 212, 229, 209, 189, 212, 246, 193, 62, 97, 19, 166, 62, 32, 105, 182, 188, 168, 39, 172, 60, 244, 174, 2, 190, 223, 158, 34, 62, 238, 22, 196, 62, 11, 214, 8, 191, 244, 71, 196, 189, 138, 201, 81, 190, 209, 54, 87, 190, 54, 129, 192, 61, 43, 238, 74, 62, 215, 47, 18, 60, 84, 204, 8, 62, 24, 5, 8, 190, 86, 79, 197, 190, 118, 237, 38, 190, 237, 129, 71, 189, 203, 120, 22, 62, 175, 57, 80, 62, 152, 220, 149, 62, 255, 98, 34, 189, 67, 85, 88, 61, 55, 190, 172, 190, 225, 194, 123, 190, 213, 99, 238, 61, 6, 71, 91, 61, 59, 34, 139, 62, 200, 166, 248, 190, 99, 154, 65, 190, 114, 136, 153, 189, 102, 183, 210, 189, 154, 108, 2, 62, 147, 26, 210, 189, 25, 99, 174, 61, 199, 205, 181, 189, 187, 127, 31, 62, 25, 218, 189, 61, 107, 98, 191, 61, 67, 233, 225, 60, 68, 229, 59, 190, 26, 12, 26, 190, 110, 94, 75, 190, 132, 239, 60, 187, 211, 5, 21, 189, 140, 56, 5, 190, 174, 157, 23, 190, 225, 97, 129, 61, 229, 215, 76, 189, 5, 79, 228, 189, 160, 152, 102, 189, 142, 46, 177, 61, 56, 18, 46, 190, 70, 64, 232, 189, 203, 91, 17, 62, 90, 225, 39, 59, 204, 56, 80, 61, 152, 27, 1, 190, 208, 26, 41, 190, 252, 80, 5, 188, 93, 209, 130, 61, 26, 204, 139, 189, 29, 107, 140, 189, 108, 234, 12, 189, 150, 129, 129, 189, 215, 40, 0, 62, 49, 196, 61, 62, 56, 117, 120, 190, 225, 174, 197, 60, 135, 34, 7, 191, 64, 62, 2, 191, 174, 217, 233, 190, 109, 185, 192, 190, 12, 159, 191, 191, 11, 241, 21, 191, 146, 69, 149, 190, 107, 153, 231, 190, 2, 101, 63, 62, 30, 104, 44, 190, 125, 130, 140, 60, 12, 3, 203, 62, 110, 77, 61, 190, 221, 232, 232, 188, 244, 61, 75, 62, 63, 179, 134, 61, 180, 29, 179, 59, 185, 204, 177, 189, 247, 107, 214, 62, 252, 88, 131, 190, 119, 160, 2, 62, 75, 105, 243, 189, 104, 162, 7, 190, 139, 120, 175, 190, 246, 87, 82, 187, 0, 37, 153, 190, 40, 11, 20, 189, 192, 253, 110, 189, 229, 181, 227, 61, 155, 222, 42, 190, 80, 220, 227, 189, 135, 64, 124, 187, 2, 8, 22, 60, 200, 83, 223, 61, 70, 54, 155, 189, 8, 81, 202, 61, 41, 79, 5, 61, 215, 184, 104, 61, 50, 107, 214, 188, 50, 143, 181, 189, 244, 102, 206, 189, 185, 140, 213, 60, 22, 200, 150, 61, 23, 197, 41, 189, 17, 208, 228, 189, 15, 156, 34, 189, 169, 15, 156, 189, 162, 253, 27, 190, 139, 107, 19, 62, 250, 83, 206, 189, 164, 208, 148, 189, 91, 220, 170, 189, 92, 238, 135, 60, 91, 65, 148, 189, 229, 104, 176, 189, 29, 26, 178, 61, 249, 18, 67, 60, 32, 189, 41, 186, 6, 86, 207, 61, 211, 49, 195, 62, 105, 221, 150, 190, 99, 0, 179, 61, 193, 51, 178, 61, 232, 7, 65, 191, 253, 234, 2, 61, 203, 17, 55, 191, 82, 62, 247, 189, 136, 185, 35, 190, 184, 187, 75, 190, 36, 230, 55, 62, 166, 141, 214, 61, 207, 164, 66, 62, 108, 189, 18, 62, 96, 63, 203, 190, 53, 194, 239, 61, 183, 7, 74, 190, 176, 74, 140, 190, 106, 86, 154, 62, 6, 206, 159, 62, 73, 0, 35, 62, 52, 11, 57, 62, 191, 71, 148, 61, 92, 114, 194, 190, 1, 47, 6, 61, 0, 73, 74, 62, 135, 238, 27, 61, 25, 146, 103, 62, 201, 120, 5, 191, 40, 232, 79, 61, 131, 143, 13, 187, 162, 3, 31, 191, 107, 65, 163, 190, 71, 16, 158, 191, 140, 212, 237, 190, 123, 66, 7, 62, 182, 174, 173, 191, 160, 213, 193, 190, 76, 0, 234, 189, 218, 92, 26, 63, 216, 44, 126, 62, 91, 25, 204, 61, 108, 229, 189, 61, 243, 95, 221, 190, 132, 119, 97, 62, 15, 20, 183, 61, 242, 65, 210, 61, 247, 191, 23, 61, 192, 182, 71, 62, 140, 136, 26, 63, 53, 221, 252, 61, 10, 121, 215, 189, 60, 26, 152, 190, 247, 59, 105, 62, 71, 164, 153, 62, 177, 185, 48, 191, 206, 184, 78, 63, 117, 93, 118, 191, 0, 240, 134, 62, 100, 122, 153, 191, 131, 142, 227, 62, 71, 124, 158, 62, 136, 50, 128, 61, 232, 242, 16, 191, 90, 244, 106, 190, 185, 72, 145, 190, 184, 81, 164, 190, 226, 16, 224, 189, 245, 207, 77, 191, 232, 97, 237, 190, 112, 15, 246, 62, 126, 100, 195, 62, 97, 242, 65, 62, 159, 109, 212, 61, 2, 88, 194, 186, 69, 230, 60, 61, 208, 26, 9, 190, 254, 192, 29, 62, 96, 38, 3, 63, 17, 131, 88, 60, 49, 117, 158, 62, 61, 138, 246, 62, 93, 67, 58, 62, 171, 1, 245, 189, 37, 191, 111, 190, 243, 30, 19, 62, 55, 102, 247, 61, 240, 99, 172, 190, 175, 127, 224, 62, 0, 168, 1, 191, 113, 33, 16, 62, 73, 225, 145, 190, 123, 244, 203, 62, 234, 106, 142, 188, 57, 73, 161, 62, 166, 244, 32, 191, 237, 192, 134, 61, 217, 197, 219, 61, 185, 142, 43, 63, 84, 49, 168, 191, 82, 79, 149, 60, 157, 77, 121, 190, 14, 73, 31, 62, 184, 212, 199, 62, 197, 240, 146, 190, 245, 168, 153, 61, 246, 203, 6, 189, 2, 59, 194, 62, 9, 194, 126, 191, 198, 212, 205, 61, 217, 182, 39, 190, 229, 7, 170, 191, 6, 206, 20, 191, 25, 32, 2, 62, 33, 47, 129, 62, 155, 24, 68, 62, 84, 13, 91, 62, 237, 51, 72, 61, 187, 220, 183, 189, 19, 207, 47, 61, 217, 130, 158, 187, 151, 174, 210, 189, 110, 104, 168, 62, 130, 87, 170, 60, 64, 133, 239, 61, 161, 221, 103, 189, 63, 157, 147, 189, 96, 74, 163, 188, 12, 228, 170, 189, 137, 99, 190, 61, 171, 91, 210, 189, 50, 208, 133, 61, 99, 20, 174, 59, 223, 58, 180, 187, 61, 135, 46, 62, 204, 58, 41, 61, 252, 58, 3, 187, 107, 4, 167, 188, 210, 175, 30, 61, 46, 48, 182, 61, 180, 7, 132, 59, 249, 179, 173, 61, 159, 177, 38, 190, 179, 205, 248, 61, 141, 154, 245, 189, 176, 56, 22, 190, 140, 223, 253, 189, 197, 77, 215, 189, 8, 190, 28, 189, 119, 127, 0, 190, 104, 247, 177, 188, 195, 236, 217, 188, 168, 89, 151, 61, 142, 2, 155, 186, 25, 151, 113, 189, 189, 31, 54, 61, 217, 94, 37, 190, 30, 144, 88, 188, 218, 22, 21, 62, 65, 141, 23, 62, 141, 39, 50, 190, 31, 166, 18, 190, 38, 72, 228, 189, 138, 199, 83, 61, 113, 225, 198, 189, 121, 59, 59, 61, 114, 148, 28, 62, 142, 172, 176, 61, 45, 207, 10, 188, 154, 93, 235, 189, 143, 35, 130, 61, 98, 116, 190, 61, 113, 122, 176, 61, 101, 235, 68, 190, 62, 140, 156, 60, 46, 33, 45, 190, 56, 0, 228, 61, 148, 146, 19, 190, 147, 99, 160, 189, 204, 15, 193, 189, 125, 98, 2, 190, 151, 31, 32, 190, 122, 60, 247, 189, 220, 74, 252, 61, 108, 108, 10, 190, 203, 197, 80, 61, 18, 204, 9, 61, 200, 173, 46, 190, 2, 251, 10, 61, 123, 199, 44, 61, 175, 242, 102, 61, 253, 78, 8, 190, 134, 42, 43, 61, 226, 130, 45, 190, 237, 65, 141, 60, 67, 214, 214, 189, 1, 233, 208, 61, 216, 5, 76, 61, 28, 164, 90, 189, 232, 28, 51, 62, 148, 248, 39, 186, 7, 115, 38, 190, 211, 62, 36, 189, 2, 183, 144, 189, 114, 150, 188, 188, 201, 188, 0, 190, 130, 11, 19, 190, 17, 77, 217, 189, 125, 15, 7, 61, 168, 235, 47, 62, 152, 82, 146, 189, 108, 235, 10, 190, 170, 38, 10, 189, 109, 10, 0, 190, 150, 49, 181, 188, 104, 157, 34, 190, 95, 236, 24, 189, 144, 13, 146, 61, 92, 7, 53, 61, 133, 107, 186, 187, 9, 234, 32, 190, 59, 3, 96, 189, 15, 235, 93, 61, 49, 148, 181, 62, 49, 204, 137, 62, 171, 119, 233, 61, 215, 64, 209, 60, 228, 118, 141, 62, 115, 134, 175, 61, 255, 182, 161, 61, 115, 189, 226, 189, 105, 182, 86, 190, 19, 103, 82, 61, 10, 49, 80, 190, 14, 77, 2, 60, 63, 84, 74, 62, 87, 101, 148, 61, 250, 222, 226, 60, 106, 245, 82, 61, 221, 199, 159, 60, 77, 86, 146, 189, 199, 26, 72, 189, 183, 173, 52, 62, 191, 158, 32, 62, 188, 153, 241, 61, 127, 139, 240, 187, 75, 87, 134, 60, 152, 41, 9, 62, 249, 84, 196, 188, 154, 34, 81, 62, 1, 234, 2, 190, 189, 135, 121, 60, 207, 90, 175, 190, 23, 210, 32, 190, 79, 39, 75, 190, 18, 119, 202, 61, 146, 50, 38, 190, 43, 176, 25, 190, 10, 47, 218, 61, 247, 106, 15, 62, 224, 140, 239, 188, 239, 126, 251, 188, 114, 207, 18, 190, 227, 193, 19, 190, 101, 207, 6, 190, 197, 248, 231, 189, 105, 103, 30, 190, 143, 44, 9, 62, 66, 241, 176, 60, 41, 103, 159, 189, 192, 55, 57, 57, 122, 161, 15, 62, 95, 138, 143, 189, 26, 20, 140, 61, 212, 73, 34, 62, 9, 190, 147, 188, 167, 57, 242, 189, 144, 36, 30, 190, 136, 130, 52, 190, 86, 189, 89, 61, 220, 194, 119, 60, 54, 32, 65, 189, 90, 211, 9, 190, 180, 230, 222, 189, 67, 248, 23, 61, 187, 33, 194, 189, 195, 14, 32, 189, 210, 83, 152, 189, 42, 27, 10, 62, 27, 100, 239, 61, 126, 214, 155, 189, 169, 40, 111, 61, 87, 38, 161, 62, 159, 82, 89, 62, 188, 160, 29, 191, 146, 199, 157, 189, 210, 65, 67, 190, 199, 100, 100, 190, 44, 73, 219, 61, 145, 234, 132, 190, 250, 180, 205, 189, 179, 117, 170, 61, 154, 68, 225, 189, 30, 28, 173, 190, 132, 55, 29, 62, 244, 69, 69, 190, 230, 129, 182, 61, 6, 116, 190, 61, 255, 5, 1, 190, 45, 123, 23, 62, 93, 253, 254, 60, 11, 244, 87, 189, 139, 136, 72, 62, 209, 160, 73, 62, 203, 136, 77, 186, 68, 185, 61, 189, 12, 199, 101, 190, 151, 30, 130, 60, 232, 194, 140, 190, 202, 122, 4, 63, 183, 99, 224, 189, 100, 18, 7, 62, 203, 150, 41, 191, 124, 61, 153, 62, 14, 123, 68, 189, 74, 241, 179, 190, 101, 193, 204, 62, 16, 155, 177, 190, 47, 49, 141, 62, 86, 209, 77, 190, 27, 156, 13, 62, 171, 224, 176, 190, 11, 19, 104, 62, 241, 62, 147, 190, 34, 215, 214, 61, 89, 216, 88, 62, 103, 67, 234, 190, 97, 2, 133, 62, 93, 254, 105, 191, 235, 176, 136, 62, 136, 17, 162, 190, 226, 177, 135, 190, 188, 92, 33, 190, 242, 57, 82, 190, 127, 204, 146, 190, 42, 33, 164, 62, 172, 124, 7, 191, 92, 158, 4, 62, 177, 89, 22, 61, 110, 39, 79, 61, 42, 15, 199, 59, 50, 239, 181, 190, 63, 14, 145, 61, 34, 171, 145, 188, 122, 63, 104, 190, 224, 28, 143, 190, 73, 238, 160, 190, 214, 249, 143, 189, 141, 130, 52, 190, 91, 233, 226, 62, 12, 227, 169, 190, 101, 20, 143, 189, 150, 16, 9, 63, 12, 51, 10, 191, 53, 114, 51, 190, 197, 122, 223, 61, 218, 187, 136, 190, 213, 63, 122, 190, 172, 175, 217, 189, 137, 93, 89, 190, 117, 13, 252, 189, 165, 170, 68, 60, 112, 175, 208, 190, 28, 83, 246, 189, 73, 80, 97, 61, 18, 152, 57, 190, 179, 14, 61, 190, 100, 146, 214, 61, 103, 117, 104, 190, 1, 66, 170, 60, 142, 124, 112, 62, 191, 48, 160, 190, 178, 238, 93, 60, 82, 184, 10, 63, 140, 58, 141, 62, 208, 97, 173, 60, 76, 164, 18, 61, 226, 157, 57, 189, 66, 187, 19, 190, 237, 194, 11, 62, 158, 157, 135, 191, 4, 127, 111, 190, 167, 93, 10, 190, 162, 57, 171, 190, 108, 247, 234, 61, 120, 24, 220, 62, 89, 27, 213, 60, 166, 218, 136, 188, 215, 56, 76, 190, 246, 10, 65, 61, 48, 109, 6, 190, 98, 116, 189, 190, 82, 164, 79, 62, 201, 223, 151, 62, 117, 234, 110, 62, 35, 204, 232, 189, 56, 119, 60, 189, 224, 87, 249, 189, 189, 44, 83, 190, 57, 211, 130, 61, 24, 177, 188, 61, 51, 56, 150, 62, 232, 78, 78, 191, 58, 110, 133, 190, 68, 52, 185, 190, 2, 102, 172, 61, 105, 77, 124, 189, 139, 39, 30, 189, 199, 137, 14, 62, 85, 50, 158, 189, 46, 210, 29, 188, 15, 74, 39, 60, 111, 28, 52, 62, 164, 101, 169, 61, 11, 38, 61, 190, 70, 38, 5, 190, 206, 169, 44, 190, 197, 174, 59, 189, 211, 126, 41, 188, 172, 186, 38, 189, 222, 97, 29, 190, 248, 111, 167, 189, 181, 137, 45, 190, 132, 238, 42, 190, 242, 76, 224, 189, 245, 116, 207, 189, 238, 198, 59, 190, 41, 62, 156, 189, 157, 176, 93, 189, 193, 28, 48, 190, 56, 143, 205, 188, 238, 155, 101, 61, 62, 238, 229, 189, 143, 180, 241, 189, 53, 40, 8, 190, 167, 8, 11, 62, 79, 200, 97, 61, 1, 234, 10, 191, 92, 82, 234, 190, 14, 179, 180, 190, 40, 216, 52, 190, 243, 95, 159, 190, 125, 173, 56, 191, 251, 58, 245, 190, 175, 200, 137, 62, 218, 5, 170, 62, 222, 104, 80, 190, 18, 51, 218, 61, 49, 113, 43, 189, 7, 2, 202, 59, 201, 47, 255, 189, 38, 76, 134, 62, 25, 92, 203, 62, 216, 231, 171, 61, 241, 2, 20, 62, 182, 31, 223, 62, 189, 72, 253, 61, 51, 7, 196, 186, 189, 119, 13, 60, 169, 161, 150, 189, 27, 6, 175, 189, 190, 149, 88, 189, 71, 242, 202, 62, 62, 115, 31, 191, 210, 1, 221, 62, 177, 44, 4, 191, 103, 80, 188, 62, 242, 245, 20, 62, 9, 10, 40, 189, 108, 205, 32, 188, 117, 31, 33, 61, 250, 120, 130, 62, 5, 177, 1, 190, 68, 162, 78, 58, 16, 155, 201, 60, 180, 118, 119, 62, 97, 60, 237, 190, 101, 248, 77, 62, 170, 48, 51, 189, 80, 121, 115, 190, 91, 211, 230, 188, 54, 108, 226, 61, 119, 191, 230, 61, 124, 12, 33, 62, 155, 80, 153, 190, 212, 29, 55, 190, 233, 22, 154, 188, 175, 233, 136, 190, 118, 131, 5, 62, 188, 111, 250, 60, 114, 70, 89, 62, 41, 237, 35, 62, 6, 253, 107, 189, 133, 5, 77, 61, 22, 15, 147, 189, 114, 38, 235, 62, 85, 117, 90, 61, 252, 2, 131, 62, 101, 110, 153, 190, 204, 142, 155, 61, 135, 61, 200, 60, 19, 165, 11, 191, 34, 5, 221, 190, 81, 11, 150, 189, 183, 113, 128, 190, 183, 170, 74, 191, 168, 18, 124, 190, 101, 180, 213, 190, 138, 136, 171, 62, 10, 170, 87, 62, 153, 189, 72, 189, 21, 244, 16, 190, 97, 71, 16, 188, 135, 122, 208, 62, 173, 173, 8, 191, 24, 248, 28, 62, 249, 48, 158, 61, 137, 240, 159, 190, 14, 149, 218, 190, 186, 69, 125, 62, 96, 128, 55, 190, 191, 229, 106, 61, 96, 176, 171, 62, 178, 136, 80, 190, 54, 216, 124, 189, 60, 224, 249, 61, 52, 31, 160, 190, 167, 229, 49, 61, 58, 186, 73, 61, 241, 45, 124, 190, 248, 86, 122, 62, 215, 35, 25, 62, 174, 211, 9, 189, 18, 109, 50, 189, 143, 58, 96, 190, 216, 141, 2, 191, 239, 175, 186, 190, 13, 210, 43, 61, 87, 160, 153, 191, 149, 189, 16, 190, 205, 172, 61, 62, 120, 195, 218, 60, 210, 187, 108, 62, 248, 38, 186, 61, 242, 133, 154, 62, 23, 57, 35, 190, 5, 86, 253, 61, 192, 151, 16, 62, 47, 60, 93, 59, 118, 191, 207, 61, 182, 58, 85, 61, 178, 98, 11, 63, 20, 241, 251, 189, 206, 165, 110, 190, 228, 186, 201, 188, 238, 240, 215, 189, 88, 106, 85, 62, 142, 95, 2, 190, 236, 41, 215, 62, 9, 74, 230, 190, 118, 203, 191, 61, 28, 39, 227, 190, 164, 167, 143, 62, 182, 142, 9, 62, 201, 178, 113, 62, 78, 177, 5, 189, 123, 48, 161, 62, 210, 172, 83, 61, 244, 4, 200, 188, 212, 94, 49, 62, 229, 10, 161, 62, 140, 70, 44, 61, 184, 106, 22, 191, 133, 148, 37, 62, 157, 190, 33, 190, 12, 5, 200, 188, 68, 10, 47, 190, 148, 112, 5, 189, 88, 232, 148, 61, 110, 134, 201, 61, 5, 154, 52, 190, 216, 36, 185, 60, 104, 113, 202, 59, 253, 58, 39, 188, 160, 162, 143, 62, 8, 223, 51, 62, 212, 142, 217, 189, 81, 73, 155, 62, 30, 131, 214, 61, 132, 61, 7, 190, 116, 193, 42, 62, 26, 13, 158, 61, 1, 38, 8, 62, 218, 230, 0, 62, 175, 33, 163, 61, 6, 113, 230, 189, 4, 47, 86, 190, 186, 26, 253, 62, 76, 59, 159, 62, 248, 138, 132, 190, 218, 229, 154, 60, 148, 185, 138, 62, 236, 220, 23, 61, 143, 95, 149, 62, 36, 213, 217, 189, 83, 19, 104, 190, 137, 66, 127, 61, 133, 88, 128, 60, 191, 241, 177, 62, 40, 44, 191, 61, 39, 253, 13, 61, 215, 203, 161, 190, 36, 89, 77, 190, 27, 58, 125, 61, 118, 131, 31, 187, 66, 2, 153, 61, 83, 21, 18, 190, 204, 105, 110, 189, 208, 33, 77, 189, 4, 166, 77, 61, 159, 135, 225, 189, 42, 98, 116, 190, 40, 82, 252, 61, 132, 250, 99, 187, 97, 147, 83, 190, 179, 36, 17, 62, 50, 29, 40, 191, 47, 1, 228, 189, 22, 229, 68, 62, 35, 144, 81, 62, 29, 138, 82, 62, 22, 129, 209, 189, 61, 21, 11, 189, 137, 35, 162, 62, 217, 28, 233, 61, 132, 125, 53, 62, 46, 106, 121, 191, 158, 90, 245, 61, 178, 162, 161, 189, 31, 241, 194, 190, 26, 66, 86, 62, 33, 71, 201, 189, 43, 48, 148, 62, 203, 169, 86, 61, 73, 164, 1, 191, 142, 89, 15, 62, 150, 189, 116, 62, 13, 80, 93, 190, 154, 14, 71, 189, 35, 104, 109, 62, 1, 216, 111, 62, 8, 51, 16, 62, 246, 235, 229, 190, 82, 79, 3, 191, 250, 96, 41, 62, 175, 114, 164, 62, 55, 36, 232, 189, 13, 73, 151, 62, 109, 65, 1, 191, 82, 53, 181, 189, 5, 9, 233, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 95, 134, 188, 92, 181, 21, 62, 4, 163, 157, 62, 186, 209, 201, 62, 4, 222, 19, 189, 187, 185, 192, 60, 84, 207, 55, 61, 226, 172, 72, 188, 81, 206, 189, 61, 115, 125, 109, 60, 85, 171, 135, 189, 1, 104, 143, 62, 51, 175, 181, 61, 71, 124, 139, 61, 211, 133, 67, 61, 191, 176, 104, 189, 88, 104, 0, 190, 2, 7, 150, 189, 142, 108, 34, 190, 147, 9, 35, 190, 158, 128, 142, 62, 76, 124, 174, 190, 173, 197, 220, 61, 243, 104, 213, 188, 39, 203, 5, 62, 221, 120, 26, 62, 27, 216, 123, 62, 231, 141, 153, 189, 60, 59, 47, 189, 202, 133, 89, 62, 36, 104, 114, 190, 189, 27, 53, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 32, 131, 62, 53, 168, 229, 62, 182, 206, 203, 62, 111, 208, 216, 189, 50, 54, 95, 62, 57, 178, 34, 191, 19, 84, 24, 190, 6, 142, 162, 190, 131, 110, 33, 190, 69, 83, 109, 191, 179, 173, 26, 62, 70, 84, 191, 190, 226, 1, 169, 63, 70, 191, 80, 63, 80, 44, 48, 63, 21, 184, 23, 190, 0, 109, 215, 61, 114, 228, 251, 61, 92, 135, 144, 189, 61, 115, 63, 189, 143, 3, 162, 189, 20, 51, 10, 63, 157, 140, 130, 188, 157, 186, 48, 191, 181, 43, 160, 189, 60, 221, 151, 63, 212, 149, 4, 190, 206, 92, 163, 189, 141, 147, 133, 62, 105, 21, 159, 189, 198, 238, 161, 62, 166, 9, 33, 191, 177, 255, 153, 190, 202, 32, 50, 190, 209, 205, 37, 190, 33, 107, 112, 190, 2, 92, 176, 190, 101, 240, 49, 189, 163, 77, 163, 61, 144, 150, 86, 190, 130, 114, 15, 62, 221, 202, 184, 62, 249, 190, 183, 188, 78, 114, 116, 190, 35, 179, 34, 62, 164, 160, 198, 62, 11, 157, 170, 189, 30, 200, 54, 61, 184, 34, 160, 61, 94, 194, 231, 188, 6, 118, 47, 61, 206, 30, 29, 190, 144, 117, 3, 190, 55, 80, 47, 62, 197, 233, 3, 191, 77, 117, 219, 62, 121, 64, 222, 187, 13, 11, 190, 62, 5, 124, 77, 190, 29, 216, 218, 62, 208, 192, 47, 190, 169, 126, 103, 190, 99, 233, 150, 62, 57, 72, 16, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 206, 228, 189, 65, 31, 134, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {105, 108, 31, 191, 149, 214, 136, 190, 156, 255, 85, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {87, 100, 86, 191, 218, 47, 39, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0040/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}