// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 168, 59, 63, 129, 29, 132, 63, 184, 198, 197, 62, 3, 229, 24, 63, 185, 120, 156, 63, 141, 10, 239, 62, 34, 252, 191, 189, 253, 165, 164, 191, 12, 32, 26, 191, 174, 71, 41, 191, 19, 98, 66, 191, 65, 106, 167, 62, 126, 115, 127, 190, 202, 173, 71, 63, 3, 193, 61, 62, 162, 85, 28, 191, 123, 5, 117, 191, 86, 224, 129, 190, 73, 86, 155, 62, 64, 138, 128, 63, 188, 216, 166, 62, 72, 78, 63, 63, 164, 109, 66, 191, 148, 24, 144, 190, 225, 55, 66, 63, 254, 70, 30, 191, 170, 201, 14, 190, 131, 179, 226, 190, 43, 224, 172, 63, 122, 85, 239, 62, 228, 109, 13, 191, 86, 137, 92, 63, 1, 206, 248, 62, 223, 127, 130, 63, 74, 238, 201, 61, 151, 135, 200, 189, 0, 32, 63, 189, 192, 187, 169, 190, 192, 177, 157, 62, 231, 13, 9, 191, 239, 156, 110, 63, 247, 127, 114, 62, 4, 171, 214, 62, 105, 12, 144, 190, 200, 100, 101, 61, 188, 206, 198, 62, 106, 250, 100, 191, 161, 23, 32, 191, 160, 116, 243, 190, 82, 251, 247, 62, 70, 137, 189, 61, 100, 58, 115, 191, 174, 75, 11, 62, 182, 24, 209, 60, 197, 144, 126, 61, 96, 21, 125, 62, 251, 245, 38, 191, 37, 78, 208, 190, 253, 36, 205, 190, 82, 22, 208, 62, 250, 140, 58, 190, 95, 142, 210, 62, 218, 45, 70, 191, 167, 55, 36, 62, 23, 235, 51, 191, 153, 110, 187, 62, 63, 151, 104, 189, 115, 172, 24, 62, 190, 160, 23, 61, 155, 185, 178, 190, 63, 185, 39, 62, 31, 22, 229, 62, 203, 25, 179, 61, 221, 25, 209, 191, 174, 57, 14, 191, 124, 135, 36, 191, 172, 134, 135, 63, 177, 31, 151, 189, 118, 198, 188, 189, 79, 13, 13, 189, 91, 101, 64, 191, 250, 176, 92, 61, 157, 110, 58, 191, 7, 117, 152, 62, 219, 24, 217, 62, 127, 94, 33, 63, 153, 244, 72, 190, 66, 81, 202, 62, 180, 39, 74, 191, 108, 195, 105, 190, 3, 63, 200, 190, 41, 22, 223, 61, 32, 12, 37, 63, 180, 178, 223, 190, 89, 228, 164, 62, 109, 74, 30, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 13, 188, 190, 23, 83, 214, 62, 196, 157, 228, 61, 21, 157, 153, 190, 105, 176, 183, 62, 167, 51, 12, 191, 106, 72, 85, 62, 11, 249, 7, 191, 232, 95, 187, 62, 99, 147, 178, 62, 53, 52, 167, 190, 53, 4, 225, 62, 249, 136, 13, 62, 196, 131, 38, 63, 220, 252, 21, 63, 127, 235, 148, 190, 50, 252, 241, 62, 173, 31, 242, 62, 65, 74, 163, 60, 67, 105, 143, 188, 100, 206, 113, 60, 80, 220, 200, 62, 213, 6, 3, 63, 231, 5, 134, 190, 189, 2, 167, 62, 201, 198, 147, 190, 196, 254, 193, 190, 56, 224, 178, 62, 245, 109, 165, 61, 103, 167, 8, 189, 251, 20, 66, 62, 196, 160, 199, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 60, 158, 190, 86, 44, 13, 190, 186, 208, 135, 62, 150, 252, 173, 190, 156, 5, 113, 190, 168, 236, 52, 62, 226, 255, 249, 60, 207, 20, 75, 190, 149, 90, 3, 189, 117, 61, 175, 190, 142, 100, 28, 189, 227, 49, 109, 190, 89, 71, 245, 189, 123, 211, 175, 190, 64, 165, 87, 189, 60, 141, 70, 190, 14, 228, 20, 191, 14, 139, 8, 190, 218, 125, 42, 190, 49, 77, 113, 59, 132, 4, 66, 60, 28, 99, 2, 191, 71, 110, 111, 189, 126, 191, 139, 190, 135, 30, 181, 60, 234, 89, 177, 190, 177, 121, 54, 189, 167, 219, 238, 189, 67, 11, 188, 188, 153, 215, 58, 189, 44, 148, 95, 189, 212, 33, 168, 190, 239, 121, 82, 190, 0, 125, 143, 190, 106, 211, 186, 190, 46, 193, 218, 61, 15, 102, 238, 189, 137, 10, 106, 62, 254, 87, 13, 190, 125, 205, 91, 62, 187, 93, 94, 62, 64, 54, 214, 189, 148, 6, 252, 61, 70, 200, 108, 62, 142, 177, 66, 188, 76, 212, 194, 61, 188, 248, 185, 61, 173, 67, 96, 62, 108, 234, 45, 190, 217, 120, 211, 61, 225, 76, 98, 62, 74, 85, 241, 61, 34, 63, 110, 190, 246, 232, 94, 190, 146, 135, 202, 61, 73, 187, 73, 62, 192, 61, 73, 61, 229, 224, 140, 190, 32, 202, 68, 191, 128, 57, 210, 59, 151, 224, 171, 190, 131, 198, 149, 62, 6, 77, 128, 61, 128, 48, 158, 61, 100, 246, 151, 190, 211, 238, 170, 190, 175, 169, 114, 62, 150, 28, 113, 62, 142, 66, 181, 190, 172, 113, 5, 190, 57, 19, 27, 190, 31, 147, 73, 189, 177, 86, 154, 61, 177, 71, 138, 190, 107, 207, 65, 61, 155, 212, 84, 60, 179, 188, 105, 189, 33, 207, 220, 190, 45, 186, 177, 62, 174, 254, 232, 60, 54, 45, 211, 189, 120, 173, 181, 189, 51, 168, 37, 62, 187, 67, 184, 62, 19, 74, 70, 189, 44, 151, 53, 62, 135, 248, 112, 62, 207, 135, 195, 189, 19, 140, 110, 62, 29, 253, 32, 190, 199, 154, 138, 189, 155, 99, 155, 62, 183, 78, 117, 61, 23, 62, 166, 60, 188, 17, 69, 190, 68, 94, 217, 189, 230, 5, 18, 190, 225, 25, 66, 62, 95, 46, 65, 61, 132, 151, 120, 189, 238, 28, 189, 187, 2, 230, 9, 62, 185, 201, 217, 61, 34, 108, 229, 190, 110, 148, 129, 62, 23, 190, 178, 189, 143, 35, 22, 62, 201, 47, 197, 189, 93, 218, 182, 190, 55, 45, 140, 189, 103, 115, 115, 60, 52, 216, 158, 190, 59, 138, 88, 62, 12, 206, 89, 62, 251, 139, 187, 61, 106, 243, 15, 187, 165, 122, 21, 62, 7, 247, 171, 189, 73, 138, 180, 60, 237, 135, 0, 190, 184, 41, 246, 61, 95, 57, 77, 62, 142, 14, 175, 189, 174, 237, 217, 189, 120, 152, 115, 62, 8, 88, 13, 62, 34, 184, 51, 189, 142, 186, 200, 189, 9, 9, 169, 190, 238, 108, 79, 61, 217, 89, 19, 61, 3, 37, 94, 61, 206, 3, 140, 190, 252, 65, 71, 61, 94, 61, 198, 189, 150, 159, 57, 190, 12, 218, 160, 62, 75, 26, 32, 191, 214, 38, 139, 60, 109, 41, 169, 62, 18, 48, 84, 190, 94, 16, 245, 190, 124, 114, 100, 62, 148, 49, 240, 61, 234, 102, 74, 191, 132, 226, 209, 190, 3, 254, 132, 61, 111, 76, 157, 62, 8, 230, 176, 61, 108, 65, 1, 62, 60, 87, 187, 61, 103, 79, 105, 190, 62, 100, 254, 61, 206, 3, 31, 62, 35, 70, 130, 189, 142, 96, 224, 61, 139, 13, 121, 61, 32, 40, 148, 62, 246, 82, 21, 190, 67, 156, 170, 189, 230, 245, 161, 190, 152, 163, 155, 190, 181, 54, 209, 61, 14, 135, 40, 191, 154, 55, 143, 190, 158, 244, 58, 189, 39, 46, 128, 190, 245, 97, 199, 62, 183, 134, 180, 61, 41, 38, 9, 62, 7, 119, 205, 189, 221, 200, 222, 59, 233, 35, 109, 190, 170, 185, 19, 190, 59, 165, 211, 61, 209, 157, 65, 62, 109, 131, 179, 61, 250, 201, 28, 189, 247, 119, 58, 61, 17, 161, 42, 191, 223, 29, 5, 190, 247, 151, 60, 189, 232, 39, 216, 60, 219, 65, 125, 189, 206, 130, 33, 62, 49, 151, 202, 190, 151, 74, 235, 189, 229, 216, 169, 59, 133, 179, 187, 190, 183, 118, 166, 62, 70, 67, 175, 189, 56, 100, 145, 188, 165, 38, 12, 190, 99, 69, 212, 189, 1, 236, 175, 60, 71, 253, 34, 61, 194, 159, 39, 190, 47, 123, 32, 190, 209, 112, 158, 189, 118, 193, 20, 59, 78, 89, 3, 62, 76, 15, 149, 189, 130, 219, 210, 189, 5, 240, 2, 190, 201, 56, 4, 189, 123, 212, 8, 189, 242, 248, 116, 61, 229, 74, 22, 190, 192, 178, 179, 61, 186, 154, 65, 189, 253, 231, 133, 61, 226, 84, 190, 61, 242, 165, 207, 188, 1, 175, 244, 189, 113, 233, 182, 61, 113, 70, 13, 190, 46, 16, 37, 190, 105, 238, 117, 188, 14, 100, 184, 61, 145, 180, 44, 189, 38, 114, 33, 190, 183, 31, 143, 188, 112, 206, 36, 190, 212, 229, 209, 189, 250, 73, 177, 62, 208, 153, 166, 62, 163, 142, 62, 61, 167, 251, 189, 189, 253, 43, 49, 189, 136, 146, 17, 61, 225, 57, 204, 62, 5, 195, 195, 190, 196, 122, 156, 189, 142, 240, 224, 189, 85, 49, 38, 190, 246, 42, 190, 61, 238, 97, 0, 62, 36, 113, 217, 61, 115, 106, 202, 61, 8, 32, 202, 189, 64, 46, 135, 190, 226, 61, 202, 188, 92, 75, 248, 188, 76, 246, 7, 61, 255, 79, 73, 62, 144, 46, 87, 62, 15, 88, 107, 187, 4, 16, 39, 60, 36, 251, 137, 190, 6, 79, 46, 190, 236, 177, 5, 62, 191, 212, 117, 189, 248, 154, 135, 62, 106, 204, 222, 190, 20, 50, 89, 190, 48, 1, 215, 189, 243, 113, 194, 189, 65, 228, 27, 62, 147, 26, 210, 189, 25, 99, 174, 61, 169, 107, 173, 189, 187, 127, 31, 62, 218, 94, 219, 61, 139, 76, 202, 61, 60, 183, 89, 61, 213, 22, 59, 190, 26, 12, 26, 190, 253, 217, 42, 190, 132, 239, 60, 187, 132, 86, 4, 189, 237, 12, 224, 189, 149, 15, 20, 190, 225, 97, 129, 61, 229, 215, 76, 189, 159, 216, 205, 189, 160, 152, 102, 189, 80, 235, 192, 61, 127, 8, 46, 190, 148, 81, 216, 189, 203, 91, 17, 62, 7, 180, 44, 60, 204, 56, 80, 61, 152, 27, 1, 190, 78, 24, 41, 190, 184, 192, 70, 60, 240, 151, 144, 61, 26, 204, 139, 189, 29, 107, 140, 189, 108, 234, 12, 189, 109, 253, 245, 190, 236, 214, 179, 61, 125, 96, 211, 62, 79, 66, 192, 189, 96, 192, 163, 188, 60, 90, 221, 190, 233, 246, 195, 190, 182, 46, 7, 191, 226, 229, 159, 190, 42, 5, 178, 191, 107, 228, 6, 191, 109, 232, 155, 189, 58, 150, 129, 190, 7, 103, 213, 61, 229, 28, 82, 190, 76, 95, 209, 61, 21, 46, 213, 62, 175, 170, 60, 190, 181, 240, 58, 62, 5, 81, 85, 62, 204, 104, 83, 62, 126, 147, 176, 59, 142, 157, 42, 190, 254, 235, 193, 62, 40, 21, 136, 190, 236, 123, 0, 62, 207, 206, 11, 58, 33, 255, 168, 189, 17, 165, 206, 190, 2, 132, 133, 61, 200, 39, 197, 190, 40, 11, 20, 189, 192, 253, 110, 189, 229, 181, 227, 61, 155, 222, 42, 190, 80, 220, 227, 189, 135, 64, 124, 187, 2, 8, 22, 60, 200, 83, 223, 61, 70, 54, 155, 189, 8, 81, 202, 61, 41, 79, 5, 61, 215, 184, 104, 61, 50, 107, 214, 188, 50, 143, 181, 189, 244, 102, 206, 189, 185, 140, 213, 60, 22, 200, 150, 61, 23, 197, 41, 189, 17, 208, 228, 189, 15, 156, 34, 189, 169, 15, 156, 189, 162, 253, 27, 190, 139, 107, 19, 62, 250, 83, 206, 189, 164, 208, 148, 189, 91, 220, 170, 189, 92, 238, 135, 60, 91, 65, 148, 189, 229, 104, 176, 189, 29, 26, 178, 61, 249, 18, 67, 60, 32, 189, 41, 186, 6, 176, 165, 61, 154, 228, 176, 62, 81, 101, 6, 189, 3, 41, 74, 61, 160, 12, 198, 61, 33, 94, 202, 190, 115, 144, 67, 59, 64, 178, 41, 191, 169, 168, 17, 190, 59, 235, 3, 190, 83, 42, 54, 190, 124, 8, 250, 61, 124, 109, 171, 61, 74, 143, 96, 62, 172, 130, 181, 61, 152, 24, 183, 190, 215, 252, 80, 62, 181, 203, 245, 188, 199, 156, 119, 190, 191, 74, 115, 62, 205, 235, 161, 62, 203, 11, 238, 61, 70, 44, 43, 62, 135, 190, 76, 61, 253, 207, 90, 190, 109, 197, 137, 61, 53, 110, 115, 62, 211, 238, 6, 189, 116, 174, 21, 62, 126, 16, 0, 191, 28, 48, 24, 61, 4, 147, 137, 188, 249, 195, 22, 191, 161, 51, 175, 190, 42, 149, 134, 191, 189, 99, 214, 190, 111, 168, 185, 61, 157, 174, 105, 191, 100, 142, 211, 190, 127, 251, 173, 189, 100, 158, 184, 62, 14, 224, 105, 62, 48, 50, 220, 61, 9, 7, 27, 62, 177, 223, 208, 190, 40, 25, 58, 62, 90, 229, 203, 61, 220, 4, 128, 61, 250, 139, 10, 187, 173, 132, 56, 62, 11, 13, 29, 63, 255, 146, 45, 62, 153, 140, 247, 188, 197, 253, 137, 190, 94, 206, 78, 62, 145, 200, 169, 62, 91, 134, 0, 191, 98, 192, 83, 63, 9, 4, 130, 191, 177, 199, 156, 62, 68, 41, 128, 191, 5, 110, 6, 63, 30, 182, 165, 62, 21, 240, 181, 61, 116, 75, 234, 190, 76, 209, 82, 190, 234, 29, 169, 190, 245, 17, 162, 190, 193, 68, 167, 189, 15, 43, 227, 190, 244, 235, 212, 190, 163, 157, 251, 62, 161, 210, 171, 62, 137, 229, 57, 62, 192, 245, 236, 61, 206, 62, 198, 187, 146, 105, 73, 60, 130, 67, 8, 190, 3, 99, 21, 62, 174, 211, 8, 63, 106, 82, 74, 189, 188, 32, 79, 62, 1, 85, 218, 62, 4, 236, 82, 62, 217, 8, 0, 190, 231, 87, 130, 190, 212, 70, 6, 62, 36, 126, 13, 62, 77, 106, 174, 190, 165, 63, 2, 63, 107, 107, 239, 190, 64, 164, 17, 62, 207, 0, 115, 190, 130, 47, 201, 62, 202, 148, 163, 187, 75, 5, 169, 62, 246, 245, 231, 190, 107, 178, 221, 61, 254, 112, 24, 62, 201, 235, 0, 63, 207, 246, 143, 191, 214, 46, 215, 61, 223, 30, 45, 190, 225, 63, 162, 61, 94, 178, 197, 62, 232, 216, 40, 190, 120, 34, 239, 61, 64, 246, 83, 189, 194, 6, 142, 62, 6, 15, 110, 191, 171, 26, 217, 61, 214, 4, 40, 190, 42, 188, 174, 191, 85, 31, 249, 190, 2, 0, 33, 61, 54, 190, 28, 62, 84, 118, 7, 62, 135, 0, 62, 62, 222, 179, 96, 61, 188, 70, 165, 189, 0, 128, 142, 61, 120, 70, 4, 190, 50, 93, 15, 190, 245, 142, 169, 62, 27, 202, 240, 189, 40, 166, 7, 62, 218, 112, 148, 189, 231, 40, 86, 189, 96, 74, 163, 188, 12, 228, 170, 189, 137, 99, 190, 61, 171, 91, 210, 189, 50, 208, 133, 61, 99, 20, 174, 59, 223, 58, 180, 187, 61, 135, 46, 62, 204, 58, 41, 61, 252, 58, 3, 187, 107, 4, 167, 188, 210, 175, 30, 61, 46, 48, 182, 61, 180, 7, 132, 59, 249, 179, 173, 61, 159, 177, 38, 190, 179, 205, 248, 61, 141, 154, 245, 189, 176, 56, 22, 190, 140, 223, 253, 189, 197, 77, 215, 189, 8, 190, 28, 189, 119, 127, 0, 190, 104, 247, 177, 188, 195, 236, 217, 188, 168, 89, 151, 61, 142, 2, 155, 186, 25, 151, 113, 189, 189, 31, 54, 61, 217, 94, 37, 190, 30, 144, 88, 188, 218, 22, 21, 62, 65, 141, 23, 62, 141, 39, 50, 190, 31, 166, 18, 190, 38, 72, 228, 189, 138, 199, 83, 61, 113, 225, 198, 189, 121, 59, 59, 61, 114, 148, 28, 62, 142, 172, 176, 61, 45, 207, 10, 188, 154, 93, 235, 189, 143, 35, 130, 61, 98, 116, 190, 61, 113, 122, 176, 61, 101, 235, 68, 190, 62, 140, 156, 60, 46, 33, 45, 190, 56, 0, 228, 61, 148, 146, 19, 190, 147, 99, 160, 189, 204, 15, 193, 189, 125, 98, 2, 190, 151, 31, 32, 190, 122, 60, 247, 189, 220, 74, 252, 61, 108, 108, 10, 190, 203, 197, 80, 61, 18, 204, 9, 61, 200, 173, 46, 190, 2, 251, 10, 61, 123, 199, 44, 61, 175, 242, 102, 61, 253, 78, 8, 190, 134, 42, 43, 61, 226, 130, 45, 190, 237, 65, 141, 60, 67, 214, 214, 189, 1, 233, 208, 61, 216, 5, 76, 61, 28, 164, 90, 189, 232, 28, 51, 62, 148, 248, 39, 186, 7, 115, 38, 190, 211, 62, 36, 189, 2, 183, 144, 189, 114, 150, 188, 188, 201, 188, 0, 190, 130, 11, 19, 190, 17, 77, 217, 189, 125, 15, 7, 61, 168, 235, 47, 62, 152, 82, 146, 189, 108, 235, 10, 190, 170, 38, 10, 189, 109, 10, 0, 190, 150, 49, 181, 188, 104, 157, 34, 190, 95, 236, 24, 189, 144, 13, 146, 61, 92, 7, 53, 61, 133, 107, 186, 187, 9, 234, 32, 190, 59, 3, 96, 189, 15, 235, 93, 61, 116, 124, 180, 62, 5, 178, 136, 62, 145, 212, 10, 62, 16, 39, 73, 61, 70, 61, 161, 62, 19, 206, 200, 61, 106, 64, 184, 61, 234, 183, 225, 188, 72, 85, 105, 190, 37, 205, 187, 61, 125, 4, 54, 190, 126, 140, 133, 189, 129, 150, 95, 62, 175, 232, 255, 61, 34, 152, 230, 188, 173, 114, 136, 61, 210, 157, 216, 61, 86, 165, 167, 188, 23, 92, 172, 188, 95, 248, 64, 62, 10, 164, 60, 62, 139, 142, 230, 61, 147, 197, 158, 60, 154, 26, 85, 60, 216, 157, 51, 62, 121, 73, 177, 188, 20, 206, 120, 62, 199, 100, 28, 190, 184, 197, 72, 61, 10, 241, 169, 190, 190, 229, 4, 190, 71, 20, 72, 190, 18, 119, 202, 61, 146, 50, 38, 190, 43, 176, 25, 190, 10, 47, 218, 61, 247, 106, 15, 62, 224, 140, 239, 188, 239, 126, 251, 188, 114, 207, 18, 190, 227, 193, 19, 190, 101, 207, 6, 190, 197, 248, 231, 189, 105, 103, 30, 190, 143, 44, 9, 62, 66, 241, 176, 60, 41, 103, 159, 189, 192, 55, 57, 57, 122, 161, 15, 62, 95, 138, 143, 189, 26, 20, 140, 61, 212, 73, 34, 62, 9, 190, 147, 188, 167, 57, 242, 189, 144, 36, 30, 190, 136, 130, 52, 190, 86, 189, 89, 61, 220, 194, 119, 60, 54, 32, 65, 189, 90, 211, 9, 190, 180, 230, 222, 189, 67, 248, 23, 61, 187, 33, 194, 189, 195, 14, 32, 189, 147, 64, 231, 188, 121, 40, 3, 62, 248, 198, 234, 61, 91, 140, 216, 59, 85, 0, 20, 61, 166, 52, 55, 62, 14, 127, 68, 62, 123, 40, 247, 190, 204, 132, 129, 189, 151, 232, 34, 190, 35, 61, 41, 190, 110, 213, 7, 62, 61, 36, 198, 189, 242, 235, 184, 189, 162, 19, 174, 61, 217, 90, 23, 190, 189, 106, 136, 190, 211, 213, 102, 62, 63, 38, 45, 190, 77, 77, 8, 62, 6, 105, 201, 61, 162, 12, 132, 189, 62, 130, 41, 62, 11, 82, 215, 61, 156, 138, 10, 189, 101, 194, 10, 62, 27, 178, 76, 62, 57, 100, 17, 61, 169, 199, 200, 188, 192, 81, 112, 190, 194, 19, 238, 61, 14, 86, 71, 190, 106, 221, 205, 62, 3, 82, 85, 189, 212, 60, 208, 61, 136, 33, 250, 190, 50, 160, 174, 62, 230, 232, 138, 189, 232, 31, 143, 190, 166, 118, 81, 62, 195, 90, 155, 190, 219, 131, 112, 62, 212, 147, 136, 190, 24, 64, 96, 62, 54, 205, 186, 190, 62, 159, 120, 62, 77, 139, 29, 190, 105, 239, 149, 61, 4, 38, 144, 62, 10, 31, 179, 190, 243, 22, 134, 62, 210, 218, 48, 191, 60, 131, 134, 62, 14, 0, 166, 190, 30, 31, 46, 190, 89, 1, 147, 190, 146, 184, 107, 190, 71, 241, 130, 190, 171, 111, 144, 62, 72, 93, 239, 190, 123, 15, 50, 62, 93, 153, 183, 186, 162, 143, 240, 189, 129, 139, 21, 190, 248, 107, 153, 190, 223, 253, 229, 61, 190, 52, 191, 188, 222, 66, 56, 190, 231, 174, 202, 189, 109, 65, 124, 190, 34, 34, 231, 188, 255, 175, 135, 190, 62, 28, 219, 62, 192, 163, 35, 190, 136, 212, 147, 189, 218, 103, 4, 63, 57, 79, 190, 190, 78, 96, 234, 186, 118, 254, 240, 61, 137, 123, 164, 190, 175, 236, 117, 190, 155, 214, 217, 189, 153, 23, 131, 190, 112, 68, 10, 61, 137, 211, 13, 190, 186, 112, 183, 190, 205, 83, 225, 189, 151, 223, 120, 61, 101, 45, 117, 190, 216, 165, 130, 190, 19, 222, 99, 189, 135, 181, 37, 190, 195, 44, 140, 189, 152, 197, 62, 62, 124, 58, 192, 189, 42, 109, 147, 60, 235, 105, 206, 62, 27, 135, 95, 62, 19, 67, 13, 62, 29, 118, 25, 61, 136, 234, 42, 189, 231, 228, 218, 189, 30, 56, 188, 61, 70, 52, 60, 191, 138, 124, 90, 190, 124, 168, 212, 189, 116, 135, 148, 190, 141, 103, 156, 60, 98, 113, 217, 62, 89, 228, 93, 61, 242, 77, 167, 189, 179, 128, 3, 190, 229, 42, 23, 62, 30, 226, 171, 188, 58, 240, 180, 190, 245, 29, 65, 62, 130, 195, 162, 62, 17, 90, 105, 62, 155, 244, 225, 189, 213, 172, 85, 189, 108, 61, 67, 61, 242, 140, 63, 190, 4, 106, 7, 62, 43, 108, 160, 61, 216, 191, 135, 62, 84, 83, 43, 191, 175, 37, 127, 190, 60, 40, 185, 190, 48, 183, 198, 61, 152, 147, 244, 188, 139, 39, 30, 189, 121, 60, 46, 62, 165, 251, 148, 189, 46, 210, 29, 188, 199, 107, 193, 60, 111, 28, 52, 62, 69, 224, 227, 61, 157, 198, 51, 190, 64, 42, 4, 190, 112, 188, 29, 190, 129, 167, 102, 188, 98, 104, 0, 185, 95, 180, 18, 188, 222, 97, 29, 190, 101, 7, 154, 189, 181, 137, 45, 190, 132, 238, 42, 190, 34, 73, 159, 189, 245, 116, 207, 189, 248, 67, 27, 190, 15, 43, 143, 189, 140, 93, 10, 189, 193, 28, 48, 190, 56, 143, 205, 188, 238, 155, 101, 61, 76, 232, 164, 189, 143, 180, 241, 189, 238, 213, 5, 190, 13, 135, 43, 62, 253, 101, 169, 61, 144, 219, 155, 190, 185, 249, 178, 190, 128, 81, 213, 190, 41, 35, 140, 190, 50, 123, 203, 60, 31, 84, 245, 190, 210, 128, 145, 190, 148, 23, 157, 62, 201, 145, 140, 62, 122, 152, 123, 188, 240, 114, 144, 62, 128, 145, 8, 189, 52, 220, 1, 190, 171, 73, 130, 61, 72, 138, 82, 62, 197, 179, 20, 63, 234, 3, 0, 61, 36, 56, 190, 60, 85, 170, 172, 62, 88, 129, 177, 61, 65, 73, 252, 189, 48, 166, 8, 190, 102, 191, 154, 189, 20, 237, 130, 187, 154, 80, 5, 190, 176, 43, 250, 62, 76, 96, 3, 191, 42, 199, 156, 62, 26, 179, 220, 190, 198, 193, 168, 62, 99, 102, 57, 62, 69, 238, 73, 61, 181, 26, 144, 188, 203, 164, 157, 60, 16, 110, 137, 62, 134, 246, 255, 189, 53, 151, 110, 60, 45, 39, 34, 189, 62, 137, 99, 62, 137, 152, 182, 190, 23, 225, 74, 62, 235, 254, 136, 188, 55, 209, 94, 190, 196, 166, 250, 188, 213, 22, 236, 61, 238, 42, 20, 62, 180, 232, 237, 61, 167, 69, 158, 190, 80, 110, 221, 189, 10, 220, 144, 61, 206, 126, 103, 190, 7, 52, 208, 61, 225, 52, 96, 61, 82, 179, 61, 62, 143, 19, 39, 62, 135, 95, 154, 189, 68, 231, 146, 61, 177, 220, 193, 189, 34, 155, 249, 62, 162, 11, 220, 187, 9, 171, 146, 62, 156, 121, 161, 190, 205, 83, 151, 61, 114, 247, 81, 60, 206, 169, 32, 190, 85, 226, 108, 190, 244, 238, 126, 189, 57, 24, 205, 190, 68, 206, 195, 190, 0, 175, 179, 189, 130, 50, 217, 189, 69, 89, 156, 62, 218, 233, 86, 62, 90, 3, 201, 188, 237, 29, 36, 190, 76, 49, 125, 189, 39, 208, 163, 62, 216, 139, 53, 190, 230, 84, 51, 62, 73, 44, 112, 61, 192, 235, 143, 190, 134, 136, 191, 190, 196, 55, 55, 62, 100, 163, 172, 190, 98, 233, 122, 59, 226, 151, 140, 62, 103, 16, 99, 190, 230, 119, 85, 190, 241, 212, 6, 62, 105, 207, 175, 190, 158, 152, 130, 60, 137, 235, 64, 189, 87, 151, 192, 190, 11, 10, 124, 62, 253, 223, 170, 188, 11, 158, 33, 190, 6, 10, 119, 188, 40, 66, 91, 190, 215, 189, 43, 191, 28, 3, 150, 190, 244, 95, 3, 61, 176, 213, 75, 191, 160, 105, 15, 190, 105, 82, 12, 62, 98, 54, 170, 60, 204, 170, 88, 62, 214, 237, 180, 61, 139, 185, 162, 62, 22, 208, 2, 190, 3, 193, 236, 61, 229, 88, 42, 62, 54, 105, 144, 189, 162, 38, 163, 61, 199, 194, 76, 61, 15, 94, 251, 62, 135, 74, 52, 189, 86, 140, 17, 189, 204, 74, 87, 60, 190, 75, 169, 189, 224, 5, 123, 62, 210, 254, 57, 190, 34, 41, 1, 63, 165, 143, 142, 190, 230, 119, 38, 62, 5, 253, 200, 190, 50, 142, 130, 62, 145, 58, 36, 62, 172, 116, 135, 62, 113, 8, 27, 189, 115, 21, 146, 62, 247, 233, 139, 61, 45, 43, 76, 188, 248, 165, 67, 62, 94, 31, 104, 62, 63, 99, 127, 60, 148, 156, 237, 190, 18, 216, 42, 62, 7, 95, 7, 190, 18, 115, 52, 187, 211, 122, 37, 190, 72, 102, 241, 188, 51, 94, 218, 61, 32, 54, 98, 61, 136, 26, 60, 190, 184, 149, 183, 61, 173, 63, 233, 61, 42, 34, 38, 61, 98, 48, 133, 62, 116, 233, 83, 62, 192, 154, 9, 190, 88, 136, 161, 62, 250, 160, 191, 61, 158, 39, 213, 189, 156, 249, 20, 62, 217, 25, 221, 61, 240, 47, 161, 61, 181, 139, 42, 62, 116, 160, 145, 61, 53, 20, 229, 189, 59, 20, 93, 190, 155, 112, 208, 62, 252, 38, 130, 62, 113, 38, 71, 190, 72, 78, 8, 61, 63, 183, 77, 62, 6, 91, 247, 188, 19, 105, 95, 62, 6, 215, 109, 190, 100, 175, 167, 190, 182, 10, 188, 59, 42, 43, 70, 189, 174, 37, 132, 62, 248, 254, 252, 61, 21, 185, 171, 188, 60, 202, 137, 190, 57, 18, 37, 190, 31, 236, 47, 61, 175, 54, 11, 189, 62, 91, 238, 61, 226, 27, 250, 189, 201, 183, 40, 61, 29, 83, 250, 60, 184, 103, 101, 61, 134, 48, 25, 190, 168, 189, 156, 190, 98, 63, 45, 62, 78, 126, 199, 188, 96, 212, 207, 189, 84, 21, 0, 62, 242, 85, 21, 191, 36, 238, 19, 190, 26, 175, 19, 62, 43, 30, 143, 62, 133, 18, 75, 62, 124, 3, 19, 61, 14, 108, 163, 60, 158, 120, 120, 62, 124, 163, 183, 189, 112, 132, 31, 62, 3, 252, 87, 191, 38, 50, 233, 61, 125, 216, 147, 189, 15, 22, 152, 190, 219, 129, 80, 62, 86, 31, 47, 61, 228, 148, 109, 62, 185, 165, 42, 61, 107, 239, 237, 190, 193, 150, 184, 61, 229, 93, 17, 62, 223, 157, 59, 190, 81, 207, 130, 189, 209, 249, 111, 62, 118, 3, 138, 62, 145, 232, 207, 61, 166, 171, 178, 190, 241, 124, 197, 190, 194, 13, 166, 61, 82, 183, 173, 62, 161, 81, 239, 189, 196, 146, 144, 62, 229, 195, 233, 190, 75, 124, 153, 188, 135, 14, 175, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {10, 215, 106, 188, 192, 155, 203, 61, 129, 179, 154, 62, 207, 56, 201, 62, 34, 210, 184, 59, 101, 177, 175, 189, 84, 207, 55, 61, 30, 180, 202, 59, 123, 135, 241, 61, 177, 39, 107, 187, 85, 171, 135, 189, 55, 222, 137, 62, 111, 252, 8, 61, 156, 160, 28, 61, 244, 70, 40, 61, 191, 176, 104, 189, 88, 104, 0, 190, 2, 7, 150, 189, 175, 166, 25, 190, 147, 9, 35, 190, 32, 202, 147, 62, 32, 53, 97, 190, 41, 49, 214, 61, 55, 158, 215, 188, 237, 253, 35, 62, 106, 76, 201, 61, 201, 233, 113, 62, 109, 203, 150, 189, 34, 231, 26, 189, 136, 103, 82, 62, 118, 206, 89, 190, 155, 135, 205, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {17, 52, 131, 62, 134, 115, 183, 62, 71, 222, 159, 62, 96, 12, 154, 189, 56, 148, 94, 62, 86, 236, 231, 190, 19, 84, 24, 190, 84, 230, 135, 190, 208, 115, 33, 190, 103, 147, 122, 191, 179, 173, 26, 62, 177, 2, 166, 190, 62, 140, 169, 63, 182, 127, 59, 63, 8, 64, 24, 63, 21, 184, 23, 190, 0, 109, 215, 61, 114, 228, 251, 61, 121, 244, 43, 190, 61, 115, 63, 189, 230, 55, 162, 189, 219, 235, 246, 62, 249, 161, 23, 60, 134, 197, 7, 191, 173, 118, 160, 189, 237, 228, 45, 63, 55, 84, 52, 190, 125, 209, 132, 189, 148, 147, 183, 62, 43, 7, 240, 189, 155, 1, 91, 62, 239, 136, 4, 191, 171, 253, 153, 190, 240, 184, 214, 189, 233, 99, 249, 189, 237, 136, 61, 190, 247, 174, 179, 190, 9, 150, 215, 59, 163, 77, 163, 61, 30, 250, 197, 189, 75, 114, 15, 62, 211, 62, 125, 62, 249, 190, 183, 188, 154, 24, 51, 190, 140, 241, 191, 61, 201, 70, 141, 62, 250, 62, 217, 188, 30, 200, 54, 61, 184, 34, 160, 61, 94, 194, 231, 188, 213, 213, 151, 61, 206, 30, 29, 190, 34, 132, 0, 190, 176, 173, 31, 62, 195, 148, 239, 190, 50, 28, 209, 62, 140, 84, 220, 187, 96, 65, 167, 62, 27, 185, 34, 190, 2, 87, 174, 62, 179, 195, 35, 190, 103, 151, 84, 190, 218, 78, 170, 62, 65, 37, 19, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 180, 185, 189, 167, 141, 68, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {29, 171, 108, 63, 36, 79, 161, 191, 242, 82, 129, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {245, 225, 99, 64, 71, 139, 32, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0040/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}