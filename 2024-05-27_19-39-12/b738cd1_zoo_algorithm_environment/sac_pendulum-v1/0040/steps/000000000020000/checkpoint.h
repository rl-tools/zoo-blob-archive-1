// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {36, 128, 78, 63, 27, 9, 150, 63, 92, 101, 192, 62, 123, 158, 18, 63, 44, 187, 179, 63, 22, 115, 232, 62, 246, 63, 45, 190, 126, 111, 199, 191, 125, 3, 5, 191, 95, 192, 39, 191, 98, 136, 93, 191, 243, 245, 177, 62, 211, 85, 56, 190, 203, 153, 150, 63, 100, 224, 135, 62, 62, 63, 232, 190, 65, 161, 169, 191, 129, 247, 238, 190, 161, 3, 142, 62, 168, 162, 165, 63, 84, 85, 134, 62, 152, 233, 65, 63, 218, 21, 115, 191, 83, 35, 82, 190, 222, 143, 49, 63, 205, 106, 76, 191, 7, 203, 51, 190, 214, 138, 143, 190, 171, 74, 217, 63, 49, 115, 207, 62, 31, 57, 58, 191, 228, 47, 97, 63, 56, 9, 255, 62, 227, 63, 90, 63, 138, 114, 244, 61, 136, 201, 211, 186, 9, 67, 179, 60, 161, 14, 20, 191, 151, 110, 146, 62, 165, 55, 240, 190, 159, 189, 163, 63, 186, 114, 152, 62, 69, 160, 151, 62, 59, 134, 218, 190, 23, 95, 72, 61, 228, 192, 201, 62, 48, 115, 139, 191, 8, 44, 5, 191, 183, 173, 35, 191, 6, 254, 133, 61, 202, 160, 90, 61, 165, 137, 148, 191, 128, 158, 8, 62, 132, 198, 134, 60, 192, 144, 215, 60, 195, 240, 48, 62, 38, 169, 34, 191, 86, 224, 10, 191, 21, 60, 9, 191, 97, 220, 153, 62, 11, 227, 22, 191, 124, 131, 70, 63, 163, 140, 55, 191, 187, 51, 244, 61, 58, 153, 97, 191, 20, 220, 173, 62, 26, 190, 167, 190, 229, 47, 89, 62, 146, 126, 168, 60, 114, 218, 87, 190, 215, 100, 155, 62, 149, 37, 211, 62, 228, 66, 146, 60, 48, 250, 246, 191, 39, 28, 18, 191, 161, 182, 86, 190, 171, 27, 135, 63, 253, 53, 182, 61, 225, 78, 187, 61, 78, 90, 206, 190, 98, 112, 71, 191, 111, 109, 123, 188, 214, 142, 81, 191, 150, 67, 148, 62, 43, 124, 216, 62, 44, 174, 47, 63, 125, 60, 144, 190, 234, 42, 181, 62, 103, 174, 115, 191, 56, 63, 151, 190, 194, 140, 203, 190, 39, 216, 91, 62, 175, 63, 26, 63, 8, 182, 194, 190, 27, 181, 230, 62, 27, 141, 25, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 222, 219, 190, 211, 233, 220, 62, 121, 194, 86, 190, 211, 204, 179, 190, 87, 76, 182, 62, 183, 43, 38, 191, 31, 89, 96, 62, 59, 174, 28, 191, 104, 23, 170, 62, 6, 186, 3, 63, 237, 61, 175, 190, 157, 138, 240, 61, 90, 101, 142, 189, 67, 60, 40, 63, 160, 169, 4, 63, 45, 156, 138, 190, 56, 149, 11, 63, 6, 207, 10, 63, 50, 76, 135, 190, 218, 247, 106, 189, 154, 201, 105, 62, 235, 244, 91, 62, 201, 182, 150, 62, 146, 222, 125, 190, 121, 174, 82, 62, 142, 131, 17, 191, 225, 69, 140, 190, 215, 48, 163, 62, 203, 146, 209, 61, 239, 177, 188, 189, 148, 79, 109, 62, 9, 235, 171, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 60, 158, 190, 86, 44, 13, 190, 109, 46, 135, 62, 150, 252, 173, 190, 156, 5, 113, 190, 227, 220, 49, 62, 226, 255, 249, 60, 23, 185, 75, 190, 24, 176, 12, 189, 117, 61, 175, 190, 142, 100, 28, 189, 165, 55, 109, 190, 89, 71, 245, 189, 123, 211, 175, 190, 4, 137, 94, 189, 250, 233, 71, 190, 91, 40, 21, 191, 231, 144, 13, 190, 101, 191, 43, 190, 49, 77, 113, 59, 36, 140, 47, 60, 28, 99, 2, 191, 175, 110, 118, 189, 126, 191, 139, 190, 82, 103, 164, 60, 234, 89, 177, 190, 138, 189, 58, 189, 20, 123, 240, 189, 67, 11, 188, 188, 177, 246, 68, 189, 44, 148, 95, 189, 212, 33, 168, 190, 196, 224, 242, 190, 198, 34, 182, 190, 241, 128, 22, 191, 21, 158, 71, 62, 180, 218, 177, 190, 62, 196, 133, 190, 52, 166, 137, 190, 209, 96, 122, 62, 217, 9, 120, 62, 205, 138, 158, 190, 31, 245, 47, 61, 164, 0, 118, 62, 85, 229, 189, 61, 141, 4, 138, 188, 142, 87, 205, 61, 91, 10, 57, 62, 35, 210, 106, 189, 106, 110, 133, 62, 52, 138, 194, 62, 15, 221, 37, 62, 107, 194, 104, 190, 85, 69, 21, 190, 237, 181, 189, 61, 184, 233, 25, 62, 125, 34, 163, 61, 68, 255, 19, 191, 131, 229, 144, 191, 187, 232, 229, 60, 154, 125, 137, 190, 119, 145, 148, 62, 148, 91, 81, 61, 57, 47, 215, 60, 76, 20, 10, 191, 187, 165, 208, 190, 181, 28, 85, 62, 88, 171, 187, 62, 7, 247, 60, 191, 251, 93, 54, 190, 190, 63, 150, 190, 73, 118, 65, 61, 19, 66, 140, 61, 203, 105, 22, 191, 212, 65, 39, 189, 18, 248, 24, 58, 136, 23, 83, 61, 130, 227, 17, 191, 122, 102, 171, 62, 43, 90, 47, 60, 112, 173, 33, 61, 142, 177, 64, 61, 153, 202, 39, 62, 103, 163, 219, 62, 186, 1, 81, 189, 226, 35, 107, 62, 60, 23, 98, 62, 4, 239, 13, 190, 7, 5, 140, 62, 176, 14, 89, 190, 146, 18, 189, 189, 115, 239, 153, 62, 4, 109, 189, 61, 54, 146, 137, 60, 92, 123, 79, 190, 73, 40, 35, 190, 243, 140, 120, 189, 70, 72, 121, 62, 178, 147, 191, 61, 48, 30, 189, 190, 247, 239, 5, 62, 161, 22, 131, 62, 252, 146, 88, 62, 103, 90, 18, 191, 126, 211, 91, 62, 214, 1, 196, 60, 113, 144, 130, 62, 190, 132, 36, 190, 52, 19, 11, 191, 250, 251, 131, 60, 134, 128, 229, 187, 136, 17, 143, 190, 135, 63, 128, 62, 198, 114, 30, 62, 98, 187, 71, 61, 178, 180, 104, 190, 92, 38, 1, 62, 80, 93, 11, 190, 108, 21, 64, 61, 79, 117, 74, 190, 212, 53, 252, 61, 220, 233, 206, 62, 20, 210, 230, 189, 102, 1, 218, 189, 75, 168, 10, 62, 116, 71, 36, 62, 123, 218, 15, 189, 12, 70, 31, 190, 184, 194, 233, 190, 22, 30, 169, 188, 199, 133, 253, 188, 67, 160, 144, 190, 0, 56, 91, 191, 66, 176, 183, 189, 102, 175, 86, 190, 157, 190, 3, 190, 29, 95, 143, 62, 176, 227, 221, 191, 208, 97, 93, 60, 86, 44, 155, 62, 230, 129, 185, 189, 38, 140, 125, 191, 13, 102, 46, 62, 31, 2, 223, 61, 217, 159, 144, 191, 186, 207, 77, 191, 156, 144, 148, 61, 198, 109, 64, 62, 200, 58, 208, 61, 40, 82, 26, 62, 229, 213, 96, 188, 158, 191, 228, 190, 86, 32, 5, 62, 226, 82, 52, 62, 111, 249, 137, 189, 50, 138, 76, 61, 47, 54, 136, 61, 198, 219, 136, 62, 10, 109, 159, 190, 162, 213, 168, 190, 100, 167, 151, 191, 25, 44, 118, 191, 45, 133, 88, 62, 226, 55, 30, 191, 236, 147, 68, 191, 121, 9, 73, 188, 205, 31, 146, 191, 174, 177, 167, 62, 216, 18, 18, 62, 176, 14, 143, 189, 79, 104, 102, 189, 163, 172, 118, 190, 107, 80, 56, 189, 210, 217, 0, 191, 150, 143, 47, 62, 143, 238, 132, 62, 113, 118, 135, 61, 128, 3, 18, 189, 107, 39, 172, 61, 100, 215, 16, 191, 80, 141, 236, 189, 123, 153, 143, 62, 21, 214, 127, 61, 177, 209, 248, 62, 90, 38, 135, 62, 245, 100, 167, 190, 195, 34, 165, 189, 239, 96, 222, 62, 203, 173, 226, 190, 131, 83, 221, 62, 204, 84, 187, 62, 62, 123, 13, 63, 165, 38, 12, 190, 99, 69, 212, 189, 1, 236, 175, 60, 71, 253, 34, 61, 194, 159, 39, 190, 47, 123, 32, 190, 209, 112, 158, 189, 118, 193, 20, 59, 78, 89, 3, 62, 76, 15, 149, 189, 130, 219, 210, 189, 5, 240, 2, 190, 201, 56, 4, 189, 123, 212, 8, 189, 242, 248, 116, 61, 229, 74, 22, 190, 192, 178, 179, 61, 186, 154, 65, 189, 253, 231, 133, 61, 226, 84, 190, 61, 242, 165, 207, 188, 1, 175, 244, 189, 113, 233, 182, 61, 113, 70, 13, 190, 46, 16, 37, 190, 105, 238, 117, 188, 14, 100, 184, 61, 145, 180, 44, 189, 38, 114, 33, 190, 183, 31, 143, 188, 112, 206, 36, 190, 212, 229, 209, 189, 178, 202, 211, 62, 202, 96, 162, 62, 188, 197, 234, 61, 222, 229, 182, 188, 30, 215, 43, 190, 227, 35, 158, 62, 10, 44, 190, 62, 52, 103, 13, 191, 128, 145, 198, 189, 64, 38, 106, 190, 46, 28, 134, 190, 141, 85, 167, 61, 115, 136, 55, 62, 140, 39, 12, 189, 108, 133, 8, 62, 185, 193, 179, 189, 11, 69, 213, 190, 91, 9, 88, 190, 220, 65, 236, 59, 84, 21, 229, 61, 103, 101, 130, 62, 239, 88, 145, 62, 182, 158, 62, 189, 150, 46, 230, 60, 87, 2, 168, 190, 0, 245, 0, 190, 21, 10, 59, 62, 160, 2, 134, 61, 35, 217, 128, 62, 123, 142, 249, 190, 149, 197, 70, 190, 251, 16, 211, 189, 102, 183, 210, 189, 154, 108, 2, 62, 147, 26, 210, 189, 25, 99, 174, 61, 199, 205, 181, 189, 187, 127, 31, 62, 25, 218, 189, 61, 107, 98, 191, 61, 67, 233, 225, 60, 68, 229, 59, 190, 26, 12, 26, 190, 110, 94, 75, 190, 132, 239, 60, 187, 211, 5, 21, 189, 140, 56, 5, 190, 174, 157, 23, 190, 225, 97, 129, 61, 229, 215, 76, 189, 5, 79, 228, 189, 160, 152, 102, 189, 142, 46, 177, 61, 56, 18, 46, 190, 70, 64, 232, 189, 203, 91, 17, 62, 90, 225, 39, 59, 204, 56, 80, 61, 152, 27, 1, 190, 208, 26, 41, 190, 252, 80, 5, 188, 93, 209, 130, 61, 26, 204, 139, 189, 29, 107, 140, 189, 108, 234, 12, 189, 250, 129, 242, 189, 164, 15, 26, 62, 93, 56, 116, 62, 55, 195, 249, 189, 220, 2, 149, 61, 200, 13, 140, 190, 118, 159, 24, 191, 51, 141, 254, 190, 161, 28, 80, 190, 208, 27, 211, 191, 253, 5, 45, 191, 44, 114, 136, 190, 100, 127, 35, 191, 194, 73, 133, 61, 62, 12, 233, 189, 13, 236, 132, 185, 101, 158, 210, 62, 9, 198, 226, 189, 240, 61, 117, 59, 144, 92, 142, 62, 1, 10, 147, 61, 238, 216, 92, 60, 76, 84, 135, 190, 31, 97, 220, 62, 106, 132, 119, 190, 209, 127, 75, 62, 180, 236, 1, 190, 202, 95, 70, 189, 236, 172, 172, 190, 42, 159, 130, 189, 89, 178, 5, 191, 40, 11, 20, 189, 192, 253, 110, 189, 229, 181, 227, 61, 155, 222, 42, 190, 80, 220, 227, 189, 135, 64, 124, 187, 2, 8, 22, 60, 200, 83, 223, 61, 70, 54, 155, 189, 8, 81, 202, 61, 41, 79, 5, 61, 215, 184, 104, 61, 50, 107, 214, 188, 50, 143, 181, 189, 244, 102, 206, 189, 185, 140, 213, 60, 22, 200, 150, 61, 23, 197, 41, 189, 17, 208, 228, 189, 15, 156, 34, 189, 169, 15, 156, 189, 162, 253, 27, 190, 139, 107, 19, 62, 250, 83, 206, 189, 164, 208, 148, 189, 91, 220, 170, 189, 92, 238, 135, 60, 91, 65, 148, 189, 229, 104, 176, 189, 29, 26, 178, 61, 249, 18, 67, 60, 32, 189, 41, 186, 181, 165, 202, 61, 44, 204, 194, 62, 181, 5, 73, 190, 117, 67, 60, 61, 54, 255, 194, 61, 20, 182, 114, 191, 84, 96, 19, 61, 136, 176, 55, 191, 131, 125, 236, 189, 155, 40, 15, 190, 4, 19, 117, 190, 206, 69, 57, 62, 77, 84, 169, 61, 72, 46, 83, 62, 11, 104, 27, 62, 42, 224, 202, 190, 127, 12, 4, 62, 31, 29, 84, 190, 28, 105, 114, 190, 88, 32, 137, 62, 84, 108, 196, 62, 34, 108, 23, 62, 42, 117, 103, 62, 149, 93, 23, 61, 20, 129, 210, 190, 76, 37, 99, 62, 137, 129, 99, 62, 126, 200, 72, 61, 143, 192, 95, 62, 66, 26, 8, 191, 167, 43, 29, 61, 209, 57, 44, 189, 91, 154, 12, 191, 39, 119, 153, 190, 56, 22, 151, 191, 17, 13, 243, 190, 76, 60, 24, 62, 160, 89, 166, 191, 131, 118, 178, 190, 146, 215, 45, 190, 1, 137, 18, 63, 94, 136, 130, 62, 172, 252, 14, 62, 221, 32, 140, 61, 145, 245, 220, 190, 142, 97, 99, 62, 142, 185, 76, 61, 79, 245, 184, 62, 123, 130, 131, 60, 29, 201, 37, 62, 232, 239, 51, 63, 8, 51, 231, 61, 233, 123, 146, 190, 78, 85, 156, 190, 55, 45, 52, 62, 13, 107, 164, 62, 80, 247, 71, 191, 69, 221, 68, 63, 255, 84, 30, 191, 170, 187, 119, 62, 186, 6, 173, 191, 159, 123, 223, 62, 140, 71, 165, 62, 121, 154, 180, 61, 236, 101, 34, 191, 2, 118, 129, 190, 150, 219, 67, 190, 151, 119, 157, 190, 15, 100, 101, 190, 235, 65, 84, 191, 119, 142, 2, 191, 7, 239, 19, 63, 157, 211, 204, 62, 68, 51, 144, 61, 171, 141, 247, 61, 221, 15, 82, 60, 45, 218, 240, 60, 45, 114, 106, 190, 95, 223, 39, 62, 55, 120, 14, 63, 120, 224, 73, 59, 178, 7, 152, 62, 99, 149, 195, 62, 31, 114, 49, 62, 168, 82, 144, 190, 253, 26, 95, 190, 209, 34, 218, 61, 49, 27, 242, 61, 144, 249, 110, 190, 87, 147, 208, 62, 4, 137, 22, 191, 80, 246, 8, 62, 56, 173, 137, 190, 112, 171, 229, 62, 215, 204, 170, 189, 205, 157, 161, 62, 133, 124, 52, 191, 140, 60, 216, 60, 222, 178, 135, 61, 168, 67, 45, 63, 230, 123, 179, 191, 252, 89, 190, 189, 224, 172, 149, 190, 102, 75, 58, 62, 5, 153, 191, 62, 95, 196, 209, 190, 60, 251, 38, 62, 49, 92, 37, 189, 218, 217, 209, 62, 0, 202, 133, 191, 250, 146, 155, 61, 181, 142, 196, 189, 176, 219, 168, 191, 228, 60, 34, 191, 204, 204, 59, 62, 188, 244, 134, 62, 73, 121, 128, 62, 74, 79, 103, 62, 120, 126, 10, 61, 235, 133, 140, 189, 33, 214, 139, 61, 239, 240, 155, 188, 177, 20, 135, 189, 196, 24, 159, 62, 133, 229, 76, 61, 227, 146, 249, 61, 107, 221, 78, 189, 39, 3, 78, 189, 96, 74, 163, 188, 12, 228, 170, 189, 137, 99, 190, 61, 171, 91, 210, 189, 50, 208, 133, 61, 99, 20, 174, 59, 223, 58, 180, 187, 61, 135, 46, 62, 204, 58, 41, 61, 252, 58, 3, 187, 107, 4, 167, 188, 210, 175, 30, 61, 46, 48, 182, 61, 180, 7, 132, 59, 249, 179, 173, 61, 159, 177, 38, 190, 179, 205, 248, 61, 141, 154, 245, 189, 176, 56, 22, 190, 140, 223, 253, 189, 197, 77, 215, 189, 8, 190, 28, 189, 119, 127, 0, 190, 104, 247, 177, 188, 195, 236, 217, 188, 168, 89, 151, 61, 142, 2, 155, 186, 25, 151, 113, 189, 189, 31, 54, 61, 217, 94, 37, 190, 30, 144, 88, 188, 218, 22, 21, 62, 65, 141, 23, 62, 141, 39, 50, 190, 179, 169, 39, 190, 38, 72, 228, 189, 138, 199, 83, 61, 24, 122, 213, 189, 121, 59, 59, 61, 111, 202, 14, 62, 235, 157, 112, 61, 45, 207, 10, 188, 154, 93, 235, 189, 65, 144, 81, 61, 234, 71, 189, 61, 113, 122, 176, 61, 112, 66, 87, 190, 242, 15, 195, 186, 46, 33, 45, 190, 56, 0, 228, 61, 42, 90, 23, 190, 147, 99, 160, 189, 204, 15, 193, 189, 147, 25, 13, 190, 151, 31, 32, 190, 122, 60, 247, 189, 61, 241, 188, 61, 108, 108, 10, 190, 153, 13, 23, 61, 99, 191, 185, 60, 201, 201, 50, 190, 209, 97, 122, 60, 123, 199, 44, 61, 175, 242, 102, 61, 253, 78, 8, 190, 134, 42, 43, 61, 226, 130, 45, 190, 237, 65, 141, 60, 67, 214, 214, 189, 1, 233, 208, 61, 216, 5, 76, 61, 28, 164, 90, 189, 232, 28, 51, 62, 148, 248, 39, 186, 7, 115, 38, 190, 211, 62, 36, 189, 2, 183, 144, 189, 114, 150, 188, 188, 201, 188, 0, 190, 130, 11, 19, 190, 17, 77, 217, 189, 125, 15, 7, 61, 168, 235, 47, 62, 152, 82, 146, 189, 108, 235, 10, 190, 170, 38, 10, 189, 109, 10, 0, 190, 150, 49, 181, 188, 104, 157, 34, 190, 95, 236, 24, 189, 144, 13, 146, 61, 92, 7, 53, 61, 133, 107, 186, 187, 9, 234, 32, 190, 59, 3, 96, 189, 15, 235, 93, 61, 103, 209, 193, 62, 195, 11, 143, 62, 202, 80, 173, 61, 80, 143, 213, 188, 77, 150, 155, 62, 87, 5, 119, 61, 162, 61, 220, 61, 79, 132, 220, 189, 15, 41, 75, 190, 31, 32, 171, 61, 65, 239, 125, 190, 150, 25, 20, 61, 51, 228, 205, 61, 248, 95, 220, 61, 182, 175, 27, 61, 39, 90, 136, 188, 187, 188, 127, 61, 77, 232, 49, 60, 48, 18, 168, 189, 226, 90, 236, 61, 142, 57, 36, 62, 92, 224, 245, 60, 133, 201, 69, 61, 83, 56, 128, 189, 186, 103, 170, 61, 10, 80, 210, 188, 139, 60, 39, 62, 59, 66, 76, 190, 236, 156, 47, 61, 222, 98, 185, 190, 120, 88, 124, 190, 171, 52, 141, 190, 18, 119, 202, 61, 146, 50, 38, 190, 43, 176, 25, 190, 10, 47, 218, 61, 247, 106, 15, 62, 224, 140, 239, 188, 239, 126, 251, 188, 114, 207, 18, 190, 227, 193, 19, 190, 101, 207, 6, 190, 197, 248, 231, 189, 105, 103, 30, 190, 143, 44, 9, 62, 66, 241, 176, 60, 41, 103, 159, 189, 192, 55, 57, 57, 122, 161, 15, 62, 95, 138, 143, 189, 26, 20, 140, 61, 212, 73, 34, 62, 9, 190, 147, 188, 167, 57, 242, 189, 144, 36, 30, 190, 136, 130, 52, 190, 86, 189, 89, 61, 220, 194, 119, 60, 54, 32, 65, 189, 90, 211, 9, 190, 180, 230, 222, 189, 67, 248, 23, 61, 187, 33, 194, 189, 195, 14, 32, 189, 41, 151, 170, 189, 163, 122, 236, 61, 227, 216, 18, 62, 38, 6, 12, 61, 235, 46, 197, 61, 190, 238, 166, 62, 168, 237, 76, 62, 109, 232, 35, 191, 219, 200, 203, 189, 254, 101, 10, 190, 65, 123, 48, 190, 225, 117, 136, 61, 60, 221, 18, 190, 54, 90, 164, 189, 159, 19, 122, 61, 184, 213, 240, 189, 223, 245, 172, 190, 228, 92, 12, 62, 190, 135, 63, 190, 255, 130, 74, 62, 98, 141, 203, 61, 57, 46, 194, 189, 114, 42, 18, 62, 81, 170, 59, 61, 1, 9, 154, 189, 99, 67, 145, 62, 34, 227, 75, 62, 6, 142, 74, 61, 130, 71, 207, 189, 243, 41, 116, 190, 162, 23, 3, 62, 150, 202, 132, 190, 187, 78, 235, 62, 208, 142, 30, 190, 24, 74, 61, 62, 100, 76, 44, 191, 94, 253, 115, 62, 88, 190, 161, 187, 53, 248, 207, 190, 8, 49, 7, 63, 106, 7, 94, 190, 77, 246, 81, 62, 187, 183, 165, 190, 175, 84, 80, 62, 107, 17, 212, 190, 24, 214, 47, 62, 229, 184, 9, 190, 180, 173, 5, 62, 59, 214, 42, 62, 52, 174, 244, 190, 240, 81, 137, 62, 211, 78, 129, 191, 36, 22, 140, 62, 65, 166, 217, 190, 171, 91, 141, 190, 75, 238, 81, 190, 42, 138, 6, 190, 117, 215, 194, 190, 33, 39, 181, 62, 110, 170, 17, 191, 215, 119, 12, 62, 174, 20, 37, 62, 129, 14, 20, 188, 51, 3, 57, 189, 212, 253, 225, 190, 238, 60, 236, 60, 28, 59, 67, 189, 148, 119, 104, 190, 250, 223, 223, 190, 31, 51, 231, 190, 128, 58, 9, 190, 87, 69, 35, 190, 181, 197, 218, 62, 229, 129, 16, 191, 101, 20, 143, 189, 255, 41, 3, 63, 47, 163, 205, 190, 3, 212, 166, 190, 184, 23, 180, 61, 181, 25, 89, 190, 4, 92, 160, 190, 11, 39, 143, 190, 177, 175, 2, 190, 32, 253, 9, 190, 171, 92, 4, 62, 184, 165, 157, 190, 38, 203, 97, 190, 73, 80, 97, 61, 11, 26, 23, 190, 165, 43, 55, 190, 219, 172, 81, 62, 131, 177, 28, 190, 100, 50, 204, 187, 138, 200, 108, 62, 160, 93, 81, 190, 178, 238, 93, 60, 66, 101, 20, 63, 193, 130, 161, 62, 213, 134, 193, 189, 128, 143, 122, 61, 166, 117, 98, 189, 84, 184, 150, 190, 215, 190, 44, 62, 199, 213, 130, 191, 58, 84, 68, 190, 87, 67, 2, 190, 167, 249, 205, 190, 68, 154, 32, 62, 64, 69, 215, 62, 213, 43, 127, 60, 37, 67, 11, 61, 12, 209, 162, 190, 161, 120, 252, 187, 12, 129, 92, 190, 2, 113, 231, 190, 246, 48, 92, 62, 230, 174, 122, 62, 60, 240, 111, 62, 191, 64, 144, 189, 30, 129, 129, 189, 147, 40, 14, 190, 192, 96, 87, 190, 98, 166, 88, 189, 164, 253, 243, 61, 67, 120, 164, 62, 121, 75, 70, 191, 241, 157, 141, 190, 48, 114, 195, 190, 2, 102, 172, 61, 105, 77, 124, 189, 139, 39, 30, 189, 199, 137, 14, 62, 85, 50, 158, 189, 46, 210, 29, 188, 15, 74, 39, 60, 111, 28, 52, 62, 164, 101, 169, 61, 11, 38, 61, 190, 70, 38, 5, 190, 206, 169, 44, 190, 197, 174, 59, 189, 211, 126, 41, 188, 172, 186, 38, 189, 222, 97, 29, 190, 248, 111, 167, 189, 181, 137, 45, 190, 132, 238, 42, 190, 242, 76, 224, 189, 245, 116, 207, 189, 238, 198, 59, 190, 41, 62, 156, 189, 157, 176, 93, 189, 193, 28, 48, 190, 56, 143, 205, 188, 238, 155, 101, 61, 62, 238, 229, 189, 143, 180, 241, 189, 53, 40, 8, 190, 167, 8, 11, 62, 79, 200, 97, 61, 79, 212, 28, 191, 23, 229, 230, 190, 103, 7, 2, 191, 184, 244, 28, 190, 245, 153, 160, 190, 140, 226, 105, 191, 128, 200, 249, 190, 115, 124, 180, 62, 74, 130, 178, 62, 131, 91, 92, 190, 221, 74, 45, 62, 166, 213, 60, 188, 39, 215, 116, 60, 82, 150, 197, 189, 128, 54, 141, 62, 96, 48, 195, 62, 21, 99, 52, 62, 39, 75, 132, 62, 55, 166, 196, 62, 226, 61, 16, 62, 22, 178, 185, 189, 23, 238, 242, 60, 159, 1, 103, 189, 171, 196, 146, 189, 231, 197, 81, 188, 71, 242, 202, 62, 230, 14, 64, 191, 28, 188, 223, 62, 252, 254, 242, 190, 157, 105, 209, 62, 120, 34, 17, 62, 177, 116, 188, 188, 74, 167, 191, 188, 247, 5, 63, 61, 71, 117, 160, 62, 6, 42, 30, 190, 48, 217, 157, 188, 34, 92, 88, 61, 21, 25, 114, 62, 5, 110, 224, 190, 253, 219, 105, 62, 124, 0, 78, 189, 44, 180, 137, 190, 33, 184, 236, 188, 79, 62, 241, 61, 235, 180, 177, 61, 184, 16, 68, 62, 104, 149, 139, 190, 234, 121, 73, 190, 25, 71, 125, 189, 46, 254, 129, 190, 198, 84, 221, 61, 54, 21, 37, 61, 75, 253, 138, 62, 155, 122, 37, 62, 46, 102, 182, 189, 88, 68, 165, 61, 51, 47, 147, 61, 213, 157, 239, 62, 198, 89, 6, 62, 17, 187, 90, 62, 10, 40, 131, 190, 113, 190, 176, 61, 223, 32, 55, 188, 106, 143, 53, 191, 189, 29, 3, 191, 241, 4, 64, 189, 142, 1, 101, 189, 253, 44, 77, 191, 0, 183, 81, 190, 246, 197, 4, 191, 37, 217, 113, 62, 194, 117, 55, 62, 78, 237, 106, 189, 123, 123, 45, 190, 228, 199, 180, 189, 255, 151, 253, 62, 1, 232, 9, 191, 242, 141, 30, 62, 55, 245, 227, 61, 150, 4, 68, 190, 77, 122, 183, 190, 114, 100, 157, 62, 54, 255, 26, 188, 103, 35, 251, 61, 249, 243, 210, 62, 52, 36, 237, 189, 40, 240, 135, 61, 186, 206, 8, 62, 137, 92, 37, 190, 252, 127, 196, 61, 94, 148, 19, 62, 158, 150, 92, 190, 34, 59, 64, 62, 89, 147, 117, 62, 207, 83, 198, 61, 75, 79, 84, 189, 145, 143, 84, 190, 76, 230, 29, 191, 28, 154, 186, 190, 62, 179, 126, 60, 104, 189, 159, 191, 93, 252, 25, 190, 109, 245, 124, 62, 132, 219, 98, 61, 168, 241, 72, 62, 120, 29, 236, 61, 36, 140, 164, 62, 242, 38, 8, 190, 29, 136, 196, 61, 112, 158, 39, 62, 169, 47, 72, 62, 143, 182, 183, 61, 43, 48, 72, 61, 101, 221, 21, 63, 226, 58, 0, 190, 97, 67, 148, 190, 66, 194, 215, 60, 224, 18, 32, 190, 240, 138, 104, 62, 78, 244, 83, 189, 221, 1, 177, 62, 221, 8, 196, 190, 74, 59, 245, 61, 222, 130, 232, 190, 81, 218, 170, 62, 10, 177, 27, 62, 200, 136, 131, 62, 150, 30, 100, 189, 71, 137, 167, 62, 44, 5, 196, 61, 112, 32, 126, 189, 206, 253, 9, 62, 195, 220, 164, 62, 114, 230, 231, 60, 179, 13, 11, 191, 198, 217, 86, 62, 72, 18, 62, 190, 61, 190, 96, 189, 84, 82, 35, 190, 28, 109, 44, 188, 147, 184, 252, 60, 160, 99, 28, 62, 241, 69, 17, 190, 61, 163, 103, 187, 121, 4, 67, 189, 224, 41, 215, 59, 212, 153, 128, 62, 178, 80, 56, 62, 124, 48, 11, 188, 198, 100, 145, 62, 172, 221, 147, 61, 168, 175, 195, 189, 179, 93, 154, 62, 210, 42, 179, 61, 206, 95, 119, 62, 19, 221, 152, 61, 90, 180, 17, 62, 51, 43, 187, 189, 90, 105, 123, 190, 202, 174, 19, 63, 93, 146, 175, 62, 70, 155, 235, 190, 28, 243, 30, 189, 68, 5, 138, 62, 37, 220, 212, 189, 131, 181, 175, 62, 79, 208, 207, 190, 57, 246, 22, 190, 55, 193, 89, 61, 147, 108, 158, 188, 92, 91, 221, 62, 226, 92, 79, 61, 44, 14, 107, 60, 157, 164, 155, 190, 203, 202, 56, 190, 186, 17, 91, 189, 221, 188, 205, 189, 65, 17, 20, 62, 71, 165, 56, 190, 251, 118, 133, 188, 73, 36, 3, 190, 52, 215, 132, 59, 30, 39, 246, 189, 11, 181, 198, 190, 141, 73, 29, 188, 171, 217, 172, 61, 117, 208, 148, 190, 179, 81, 94, 62, 25, 239, 65, 191, 76, 208, 17, 190, 99, 249, 59, 62, 87, 222, 113, 62, 122, 238, 92, 62, 218, 220, 165, 189, 53, 247, 221, 60, 159, 104, 195, 62, 177, 111, 80, 61, 148, 155, 73, 62, 26, 242, 123, 191, 94, 94, 229, 61, 240, 213, 36, 183, 103, 153, 222, 190, 110, 127, 74, 62, 101, 101, 185, 189, 65, 130, 180, 62, 106, 179, 81, 61, 169, 198, 13, 191, 99, 178, 18, 62, 41, 230, 32, 62, 82, 119, 117, 190, 42, 217, 97, 189, 64, 127, 124, 62, 238, 90, 103, 62, 189, 242, 41, 62, 136, 162, 243, 190, 91, 182, 20, 191, 60, 9, 142, 62, 18, 34, 145, 62, 251, 82, 203, 189, 203, 26, 137, 62, 165, 70, 6, 191, 252, 190, 147, 189, 186, 131, 246, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 95, 134, 188, 90, 11, 14, 62, 183, 244, 157, 62, 92, 163, 194, 62, 234, 9, 105, 189, 99, 61, 88, 189, 84, 207, 55, 61, 24, 195, 212, 188, 81, 206, 189, 61, 168, 146, 133, 188, 85, 171, 135, 189, 225, 221, 148, 62, 172, 242, 63, 61, 250, 94, 151, 61, 87, 68, 8, 61, 191, 176, 104, 189, 62, 170, 18, 190, 2, 7, 150, 189, 6, 38, 16, 190, 147, 9, 35, 190, 77, 29, 128, 62, 76, 181, 147, 190, 80, 74, 177, 61, 27, 64, 59, 60, 39, 203, 5, 62, 123, 139, 60, 62, 255, 210, 134, 62, 26, 229, 127, 189, 59, 13, 203, 188, 59, 219, 120, 62, 67, 73, 113, 190, 30, 163, 41, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 32, 131, 62, 100, 126, 231, 62, 69, 181, 190, 62, 155, 111, 198, 189, 189, 60, 158, 62, 56, 222, 47, 191, 19, 84, 24, 190, 75, 83, 140, 190, 131, 110, 33, 190, 170, 67, 120, 191, 179, 173, 26, 62, 11, 88, 175, 190, 33, 186, 150, 63, 32, 199, 92, 63, 144, 189, 49, 63, 21, 184, 23, 190, 123, 96, 214, 61, 114, 228, 251, 61, 98, 123, 69, 189, 61, 115, 63, 189, 231, 211, 183, 188, 90, 142, 8, 63, 111, 3, 89, 61, 178, 249, 42, 191, 181, 43, 160, 189, 10, 68, 158, 63, 9, 38, 163, 189, 223, 177, 61, 190, 18, 66, 35, 62, 78, 130, 55, 189, 193, 208, 191, 62, 115, 202, 34, 191, 177, 255, 153, 190, 176, 196, 40, 190, 169, 76, 146, 190, 46, 88, 107, 190, 214, 11, 246, 190, 210, 239, 216, 60, 163, 77, 163, 61, 71, 241, 155, 190, 130, 114, 15, 62, 203, 58, 224, 62, 249, 190, 183, 188, 34, 75, 145, 190, 152, 101, 232, 61, 208, 203, 223, 62, 218, 195, 139, 190, 30, 200, 54, 61, 90, 210, 160, 61, 94, 194, 231, 188, 212, 205, 219, 61, 206, 30, 29, 190, 17, 226, 57, 188, 139, 172, 183, 61, 23, 73, 222, 190, 255, 199, 202, 62, 121, 64, 222, 187, 34, 52, 244, 62, 92, 43, 166, 190, 243, 5, 239, 62, 144, 223, 145, 190, 166, 242, 145, 190, 243, 89, 211, 62, 86, 39, 155, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 230, 203, 189, 25, 225, 203, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {210, 188, 181, 191, 106, 82, 212, 62, 135, 159, 93, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {137, 85, 251, 62, 255, 201, 152, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0040/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}