// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 56, 24, 62, 131, 217, 55, 63, 108, 141, 204, 62, 150, 75, 50, 63, 253, 168, 51, 63, 157, 147, 226, 62, 139, 216, 174, 189, 176, 136, 138, 62, 86, 177, 186, 190, 85, 19, 25, 190, 209, 80, 173, 190, 199, 252, 170, 62, 86, 79, 50, 190, 18, 74, 43, 63, 137, 202, 23, 62, 141, 29, 178, 190, 7, 20, 23, 191, 101, 95, 163, 190, 227, 163, 202, 62, 252, 238, 217, 62, 0, 130, 163, 62, 123, 230, 144, 62, 115, 223, 162, 190, 201, 213, 145, 190, 46, 66, 242, 62, 68, 106, 217, 190, 152, 44, 152, 189, 232, 47, 249, 190, 159, 88, 233, 62, 213, 90, 2, 63, 127, 248, 27, 191, 155, 18, 12, 189, 121, 2, 203, 62, 175, 142, 60, 63, 247, 131, 31, 63, 227, 121, 17, 190, 3, 129, 164, 62, 84, 124, 148, 190, 215, 64, 147, 62, 182, 23, 156, 190, 191, 174, 48, 63, 88, 24, 154, 62, 87, 116, 186, 62, 183, 27, 217, 190, 73, 37, 234, 188, 19, 174, 159, 62, 172, 50, 183, 190, 163, 254, 1, 191, 33, 133, 202, 190, 254, 254, 75, 63, 216, 181, 64, 62, 158, 25, 60, 191, 159, 214, 76, 61, 40, 80, 75, 62, 116, 23, 72, 62, 108, 248, 182, 62, 198, 122, 5, 191, 174, 13, 15, 191, 48, 194, 239, 190, 27, 254, 16, 62, 178, 164, 130, 190, 199, 190, 71, 63, 18, 156, 219, 190, 70, 162, 3, 63, 78, 119, 216, 190, 203, 225, 176, 62, 128, 112, 150, 60, 62, 215, 187, 61, 115, 103, 229, 59, 30, 160, 22, 191, 38, 126, 149, 190, 29, 124, 145, 62, 8, 49, 131, 61, 105, 201, 104, 191, 109, 149, 221, 190, 52, 101, 187, 190, 223, 205, 138, 62, 0, 48, 136, 190, 45, 235, 130, 190, 101, 48, 76, 63, 44, 234, 125, 190, 176, 45, 0, 190, 121, 152, 81, 191, 143, 199, 71, 62, 242, 155, 36, 62, 108, 41, 28, 63, 181, 125, 4, 190, 182, 211, 124, 62, 248, 129, 236, 190, 193, 110, 29, 190, 96, 65, 184, 190, 82, 119, 157, 190, 118, 145, 14, 63, 80, 238, 65, 191, 20, 24, 72, 190, 109, 190, 217, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {146, 169, 246, 190, 242, 191, 206, 62, 216, 240, 144, 62, 115, 247, 4, 191, 117, 151, 146, 62, 73, 19, 226, 190, 27, 231, 39, 62, 45, 179, 13, 191, 27, 161, 255, 62, 7, 121, 1, 63, 211, 72, 177, 190, 77, 52, 178, 62, 186, 164, 152, 190, 18, 85, 21, 63, 224, 86, 40, 63, 88, 168, 6, 191, 178, 96, 51, 62, 158, 136, 5, 63, 92, 10, 126, 190, 242, 105, 66, 62, 116, 38, 196, 62, 243, 62, 21, 62, 21, 55, 25, 63, 103, 51, 8, 190, 30, 155, 4, 63, 210, 246, 27, 191, 31, 188, 127, 189, 140, 55, 235, 62, 214, 193, 140, 62, 68, 217, 121, 62, 121, 59, 191, 62, 235, 78, 134, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 60, 158, 190, 53, 55, 19, 190, 198, 89, 124, 62, 225, 152, 135, 190, 99, 137, 134, 189, 190, 239, 242, 61, 226, 255, 249, 60, 98, 105, 108, 190, 2, 78, 6, 61, 138, 148, 169, 190, 142, 100, 28, 189, 237, 163, 206, 189, 14, 86, 241, 189, 244, 45, 191, 189, 200, 165, 44, 60, 236, 235, 110, 190, 188, 165, 39, 190, 1, 84, 135, 61, 209, 2, 49, 190, 12, 240, 128, 60, 46, 158, 245, 186, 46, 100, 167, 190, 131, 220, 199, 187, 114, 39, 125, 190, 230, 217, 10, 61, 3, 238, 191, 190, 166, 19, 5, 188, 186, 44, 172, 189, 159, 115, 70, 61, 145, 119, 226, 59, 34, 181, 4, 188, 173, 221, 169, 190, 69, 161, 221, 61, 198, 141, 247, 189, 60, 125, 20, 190, 236, 59, 30, 62, 93, 56, 166, 189, 63, 80, 236, 61, 173, 224, 127, 61, 78, 185, 105, 61, 116, 48, 159, 61, 124, 83, 145, 189, 95, 86, 11, 62, 218, 120, 238, 61, 79, 26, 241, 59, 36, 233, 254, 61, 165, 133, 140, 61, 168, 45, 127, 188, 181, 87, 82, 190, 46, 79, 178, 61, 27, 198, 138, 189, 211, 62, 255, 61, 67, 174, 45, 190, 232, 240, 25, 190, 67, 138, 186, 61, 62, 67, 87, 62, 8, 150, 56, 62, 239, 103, 25, 190, 9, 137, 84, 190, 212, 84, 249, 60, 150, 21, 90, 190, 217, 87, 59, 62, 99, 133, 150, 61, 1, 91, 166, 61, 135, 254, 140, 61, 11, 138, 105, 190, 84, 129, 60, 62, 68, 58, 72, 190, 122, 177, 132, 189, 160, 232, 193, 189, 234, 187, 62, 61, 71, 101, 87, 189, 33, 106, 46, 61, 154, 98, 104, 61, 230, 170, 219, 61, 5, 130, 95, 189, 163, 26, 56, 190, 7, 114, 114, 190, 223, 127, 154, 62, 190, 30, 14, 61, 133, 65, 84, 189, 110, 158, 121, 190, 238, 97, 49, 62, 107, 249, 110, 61, 98, 184, 90, 189, 40, 149, 207, 61, 103, 187, 37, 62, 36, 154, 199, 188, 124, 160, 23, 62, 107, 115, 210, 189, 138, 79, 157, 188, 218, 251, 109, 62, 250, 249, 96, 60, 105, 19, 131, 60, 74, 128, 56, 190, 235, 97, 153, 189, 175, 244, 7, 190, 173, 4, 227, 61, 187, 144, 170, 60, 87, 19, 248, 60, 201, 138, 125, 189, 11, 6, 90, 61, 156, 87, 115, 61, 62, 97, 154, 189, 21, 187, 121, 62, 103, 244, 236, 188, 64, 86, 68, 62, 8, 187, 155, 189, 37, 71, 52, 190, 63, 161, 4, 190, 151, 191, 217, 187, 255, 156, 101, 190, 28, 158, 45, 62, 56, 125, 239, 61, 117, 181, 28, 62, 98, 226, 123, 188, 163, 65, 16, 62, 226, 36, 52, 188, 0, 174, 125, 189, 86, 36, 1, 190, 249, 12, 131, 61, 175, 198, 103, 61, 246, 116, 170, 189, 54, 94, 41, 189, 125, 24, 148, 62, 5, 113, 62, 62, 127, 18, 170, 60, 47, 255, 139, 189, 12, 102, 113, 61, 48, 64, 95, 61, 118, 235, 130, 187, 204, 150, 193, 189, 159, 46, 52, 189, 185, 198, 192, 61, 222, 176, 54, 60, 153, 233, 237, 189, 63, 44, 143, 62, 164, 153, 116, 190, 246, 93, 121, 61, 148, 115, 137, 62, 23, 84, 154, 190, 105, 155, 39, 190, 50, 189, 58, 62, 255, 195, 207, 61, 237, 188, 163, 190, 160, 168, 82, 189, 178, 133, 20, 61, 139, 211, 158, 62, 148, 171, 188, 60, 141, 240, 172, 61, 137, 45, 191, 60, 239, 169, 18, 190, 187, 62, 200, 61, 146, 216, 103, 186, 50, 198, 76, 189, 71, 157, 30, 62, 209, 33, 67, 189, 219, 169, 131, 62, 4, 63, 22, 189, 52, 58, 0, 189, 63, 193, 224, 60, 102, 193, 224, 189, 240, 77, 182, 61, 207, 92, 51, 190, 174, 3, 170, 187, 148, 90, 53, 59, 143, 252, 158, 60, 214, 17, 220, 61, 28, 17, 169, 189, 125, 164, 20, 62, 5, 68, 143, 189, 166, 106, 0, 189, 108, 4, 135, 189, 141, 11, 50, 190, 253, 26, 53, 188, 142, 120, 191, 61, 109, 60, 203, 189, 43, 171, 101, 189, 87, 168, 72, 61, 218, 36, 131, 190, 174, 229, 167, 189, 219, 36, 233, 61, 201, 39, 241, 60, 42, 50, 96, 60, 190, 149, 133, 61, 167, 41, 132, 189, 119, 222, 145, 189, 8, 90, 60, 61, 155, 189, 42, 190, 152, 155, 202, 61, 118, 81, 34, 187, 228, 17, 78, 61, 165, 38, 12, 190, 99, 69, 212, 189, 237, 6, 10, 61, 71, 253, 34, 61, 251, 121, 29, 190, 188, 160, 32, 190, 209, 112, 158, 189, 118, 193, 20, 59, 13, 64, 3, 62, 15, 161, 132, 189, 130, 219, 210, 189, 102, 36, 2, 190, 201, 56, 4, 189, 254, 89, 156, 188, 23, 199, 121, 61, 112, 233, 20, 190, 28, 201, 201, 61, 91, 18, 21, 189, 95, 14, 149, 61, 147, 152, 194, 61, 88, 190, 64, 188, 1, 175, 244, 189, 29, 251, 197, 61, 113, 70, 13, 190, 165, 56, 34, 190, 223, 149, 23, 188, 39, 33, 224, 61, 225, 197, 43, 189, 250, 231, 20, 190, 183, 31, 143, 188, 209, 201, 36, 190, 212, 229, 209, 189, 147, 175, 92, 62, 50, 121, 49, 62, 81, 251, 123, 188, 149, 94, 164, 189, 30, 72, 78, 61, 185, 115, 30, 61, 113, 206, 131, 62, 20, 24, 255, 188, 55, 19, 210, 189, 211, 236, 106, 61, 142, 91, 138, 189, 83, 89, 10, 62, 164, 206, 14, 60, 176, 68, 92, 62, 143, 44, 227, 61, 43, 40, 25, 61, 82, 172, 185, 189, 22, 47, 36, 62, 225, 86, 138, 61, 22, 237, 15, 61, 49, 158, 31, 62, 71, 137, 107, 61, 163, 167, 202, 61, 98, 96, 49, 61, 237, 88, 107, 190, 14, 127, 90, 190, 143, 124, 55, 61, 52, 32, 1, 190, 89, 213, 156, 62, 177, 130, 145, 190, 220, 147, 42, 190, 100, 184, 96, 189, 243, 113, 194, 189, 65, 228, 27, 62, 147, 26, 210, 189, 25, 99, 174, 61, 169, 107, 173, 189, 187, 127, 31, 62, 218, 94, 219, 61, 139, 76, 202, 61, 60, 183, 89, 61, 213, 22, 59, 190, 26, 12, 26, 190, 253, 217, 42, 190, 132, 239, 60, 187, 132, 86, 4, 189, 237, 12, 224, 189, 149, 15, 20, 190, 225, 97, 129, 61, 229, 215, 76, 189, 159, 216, 205, 189, 160, 152, 102, 189, 80, 235, 192, 61, 127, 8, 46, 190, 148, 81, 216, 189, 203, 91, 17, 62, 7, 180, 44, 60, 204, 56, 80, 61, 152, 27, 1, 190, 78, 24, 41, 190, 184, 192, 70, 60, 240, 151, 144, 61, 26, 204, 139, 189, 29, 107, 140, 189, 146, 122, 198, 60, 167, 178, 17, 190, 236, 249, 135, 60, 0, 86, 214, 60, 150, 47, 39, 62, 122, 113, 78, 61, 104, 131, 164, 189, 177, 225, 36, 189, 228, 164, 16, 190, 181, 33, 247, 189, 204, 234, 70, 190, 83, 58, 42, 190, 225, 61, 101, 189, 97, 55, 252, 189, 31, 21, 212, 60, 54, 20, 180, 189, 125, 229, 55, 62, 17, 51, 77, 62, 9, 208, 8, 189, 236, 141, 14, 190, 127, 20, 30, 62, 81, 89, 55, 61, 168, 144, 234, 188, 232, 39, 43, 190, 144, 196, 28, 62, 224, 82, 248, 189, 136, 35, 166, 61, 1, 170, 59, 190, 99, 162, 61, 59, 247, 188, 71, 189, 5, 140, 250, 61, 77, 167, 240, 60, 40, 11, 20, 189, 192, 253, 110, 189, 229, 181, 227, 61, 155, 222, 42, 190, 80, 220, 227, 189, 135, 64, 124, 187, 2, 8, 22, 60, 200, 83, 223, 61, 70, 54, 155, 189, 8, 81, 202, 61, 41, 79, 5, 61, 215, 184, 104, 61, 50, 107, 214, 188, 50, 143, 181, 189, 244, 102, 206, 189, 185, 140, 213, 60, 22, 200, 150, 61, 23, 197, 41, 189, 17, 208, 228, 189, 15, 156, 34, 189, 169, 15, 156, 189, 162, 253, 27, 190, 139, 107, 19, 62, 250, 83, 206, 189, 164, 208, 148, 189, 91, 220, 170, 189, 92, 238, 135, 60, 91, 65, 148, 189, 229, 104, 176, 189, 29, 26, 178, 61, 249, 18, 67, 60, 32, 189, 41, 186, 54, 74, 140, 61, 0, 21, 154, 62, 6, 174, 135, 188, 12, 155, 152, 188, 70, 187, 179, 61, 85, 228, 92, 190, 165, 227, 17, 189, 142, 209, 18, 188, 2, 2, 248, 188, 40, 138, 102, 189, 114, 241, 6, 190, 169, 192, 52, 62, 137, 96, 233, 61, 103, 221, 72, 62, 7, 20, 204, 61, 127, 225, 2, 190, 239, 73, 129, 62, 240, 26, 163, 189, 78, 23, 249, 189, 35, 63, 204, 61, 92, 45, 150, 62, 160, 207, 66, 61, 51, 233, 8, 62, 54, 215, 108, 59, 236, 130, 250, 189, 146, 191, 29, 189, 196, 114, 44, 62, 67, 178, 4, 190, 247, 187, 253, 61, 197, 165, 75, 190, 80, 79, 52, 61, 190, 228, 25, 188, 238, 140, 173, 190, 223, 97, 118, 190, 132, 211, 3, 190, 212, 62, 150, 190, 222, 154, 198, 189, 37, 135, 185, 61, 209, 141, 138, 190, 120, 30, 27, 190, 153, 63, 2, 62, 84, 228, 191, 61, 121, 247, 177, 187, 183, 128, 59, 62, 17, 232, 236, 190, 0, 213, 103, 61, 37, 60, 55, 62, 114, 211, 10, 190, 254, 90, 50, 190, 236, 44, 23, 62, 254, 193, 111, 190, 19, 26, 46, 62, 236, 182, 60, 190, 138, 44, 89, 190, 186, 144, 55, 62, 54, 39, 128, 62, 154, 217, 30, 60, 32, 46, 35, 190, 171, 76, 35, 191, 234, 30, 179, 62, 175, 60, 203, 190, 195, 70, 143, 62, 76, 176, 116, 62, 112, 141, 208, 188, 221, 47, 19, 190, 14, 124, 228, 188, 244, 191, 178, 189, 15, 207, 106, 190, 185, 133, 251, 189, 66, 232, 255, 61, 172, 115, 81, 190, 92, 16, 31, 62, 151, 232, 62, 62, 135, 215, 69, 61, 181, 209, 209, 58, 30, 70, 148, 188, 14, 67, 195, 189, 251, 195, 32, 190, 44, 140, 49, 62, 138, 76, 195, 61, 169, 25, 7, 190, 15, 228, 115, 62, 141, 229, 182, 60, 163, 205, 118, 62, 251, 36, 76, 190, 201, 196, 113, 190, 101, 132, 47, 62, 222, 22, 113, 61, 85, 137, 55, 60, 138, 31, 19, 61, 179, 168, 20, 190, 115, 208, 36, 62, 144, 117, 133, 189, 234, 79, 39, 62, 133, 66, 246, 189, 223, 33, 97, 62, 77, 13, 39, 190, 91, 187, 203, 61, 194, 57, 34, 62, 242, 22, 36, 62, 100, 140, 187, 190, 224, 175, 193, 61, 232, 174, 150, 189, 172, 191, 172, 61, 16, 221, 147, 62, 223, 128, 150, 188, 88, 133, 149, 60, 202, 125, 92, 60, 171, 182, 179, 189, 16, 183, 83, 190, 63, 216, 217, 60, 180, 57, 44, 190, 121, 196, 7, 191, 71, 78, 249, 189, 27, 221, 134, 61, 3, 151, 224, 61, 163, 83, 49, 62, 132, 242, 56, 189, 159, 118, 141, 61, 61, 47, 254, 189, 29, 176, 114, 61, 21, 77, 45, 190, 37, 230, 20, 58, 175, 131, 101, 62, 245, 176, 191, 189, 221, 121, 29, 61, 2, 176, 55, 190, 91, 223, 31, 190, 68, 220, 131, 188, 30, 123, 160, 189, 44, 151, 214, 61, 136, 91, 210, 189, 12, 103, 151, 61, 99, 20, 174, 59, 201, 200, 2, 187, 61, 135, 46, 62, 243, 234, 61, 61, 202, 167, 43, 59, 145, 158, 159, 188, 76, 53, 82, 61, 185, 13, 184, 61, 219, 163, 63, 60, 158, 111, 187, 61, 61, 236, 37, 190, 137, 28, 5, 62, 118, 22, 235, 189, 85, 242, 13, 190, 135, 107, 253, 189, 56, 145, 180, 189, 136, 49, 21, 189, 178, 96, 238, 189, 13, 108, 173, 188, 157, 115, 190, 188, 159, 72, 156, 61, 223, 144, 189, 60, 142, 209, 111, 189, 224, 250, 118, 61, 82, 204, 37, 190, 84, 171, 57, 188, 155, 18, 22, 62, 65, 141, 23, 62, 141, 39, 50, 190, 24, 176, 12, 190, 118, 75, 228, 189, 138, 199, 83, 61, 188, 102, 193, 189, 121, 59, 59, 61, 148, 176, 35, 62, 169, 166, 217, 61, 45, 207, 10, 188, 154, 93, 235, 189, 243, 161, 144, 61, 239, 222, 194, 61, 113, 122, 176, 61, 9, 41, 48, 190, 121, 100, 226, 60, 46, 33, 45, 190, 146, 8, 233, 61, 62, 108, 19, 190, 129, 109, 150, 189, 230, 145, 192, 189, 221, 26, 237, 189, 196, 201, 21, 190, 122, 60, 247, 189, 229, 45, 18, 62, 108, 108, 10, 190, 203, 197, 80, 61, 5, 180, 91, 61, 200, 173, 46, 190, 221, 203, 79, 61, 202, 206, 50, 61, 175, 242, 102, 61, 253, 78, 8, 190, 134, 42, 43, 61, 226, 130, 45, 190, 237, 65, 141, 60, 67, 214, 214, 189, 1, 233, 208, 61, 216, 5, 76, 61, 28, 164, 90, 189, 232, 28, 51, 62, 148, 248, 39, 186, 7, 115, 38, 190, 211, 62, 36, 189, 2, 183, 144, 189, 114, 150, 188, 188, 201, 188, 0, 190, 130, 11, 19, 190, 17, 77, 217, 189, 125, 15, 7, 61, 168, 235, 47, 62, 152, 82, 146, 189, 108, 235, 10, 190, 170, 38, 10, 189, 109, 10, 0, 190, 150, 49, 181, 188, 104, 157, 34, 190, 95, 236, 24, 189, 144, 13, 146, 61, 92, 7, 53, 61, 133, 107, 186, 187, 9, 234, 32, 190, 59, 3, 96, 189, 15, 235, 93, 61, 182, 30, 135, 62, 73, 227, 49, 62, 188, 101, 32, 61, 39, 242, 136, 61, 189, 199, 142, 62, 227, 231, 166, 61, 40, 96, 232, 188, 20, 45, 27, 62, 2, 19, 34, 190, 191, 223, 27, 62, 158, 6, 73, 189, 17, 15, 232, 60, 46, 31, 99, 62, 188, 38, 165, 61, 35, 100, 103, 59, 20, 198, 23, 62, 82, 184, 222, 61, 111, 221, 225, 189, 194, 210, 44, 61, 94, 212, 186, 61, 51, 7, 204, 61, 69, 203, 240, 61, 231, 218, 238, 60, 101, 147, 16, 61, 130, 56, 220, 61, 148, 91, 17, 189, 255, 89, 253, 61, 20, 143, 40, 190, 129, 218, 231, 61, 35, 12, 50, 190, 119, 235, 231, 189, 79, 25, 226, 189, 18, 119, 202, 61, 146, 50, 38, 190, 43, 176, 25, 190, 10, 47, 218, 61, 247, 106, 15, 62, 224, 140, 239, 188, 239, 126, 251, 188, 114, 207, 18, 190, 227, 193, 19, 190, 101, 207, 6, 190, 197, 248, 231, 189, 105, 103, 30, 190, 143, 44, 9, 62, 66, 241, 176, 60, 41, 103, 159, 189, 192, 55, 57, 57, 122, 161, 15, 62, 95, 138, 143, 189, 26, 20, 140, 61, 212, 73, 34, 62, 9, 190, 147, 188, 167, 57, 242, 189, 144, 36, 30, 190, 136, 130, 52, 190, 86, 189, 89, 61, 220, 194, 119, 60, 54, 32, 65, 189, 90, 211, 9, 190, 180, 230, 222, 189, 67, 248, 23, 61, 187, 33, 194, 189, 195, 14, 32, 189, 97, 144, 57, 59, 156, 177, 176, 61, 181, 57, 131, 61, 88, 190, 188, 60, 104, 201, 73, 61, 212, 33, 106, 61, 178, 119, 48, 62, 79, 38, 191, 189, 58, 125, 248, 188, 156, 235, 46, 189, 196, 166, 178, 189, 104, 182, 118, 62, 107, 1, 245, 60, 192, 217, 204, 189, 193, 168, 120, 61, 23, 192, 101, 189, 8, 227, 109, 190, 221, 92, 9, 62, 107, 47, 178, 189, 114, 67, 64, 60, 7, 114, 182, 61, 135, 5, 103, 189, 170, 143, 6, 62, 32, 36, 134, 61, 47, 220, 19, 190, 181, 111, 177, 60, 124, 255, 54, 62, 69, 165, 26, 188, 208, 165, 132, 61, 217, 226, 250, 189, 3, 68, 27, 62, 133, 89, 51, 190, 172, 40, 112, 61, 193, 60, 136, 61, 227, 73, 164, 61, 212, 60, 29, 190, 137, 32, 94, 62, 86, 2, 7, 61, 222, 20, 47, 190, 114, 246, 29, 59, 216, 146, 215, 188, 105, 191, 58, 187, 253, 3, 63, 190, 33, 111, 83, 62, 19, 62, 49, 190, 145, 148, 33, 62, 34, 197, 237, 61, 152, 160, 47, 61, 8, 65, 134, 61, 253, 238, 146, 190, 230, 111, 110, 62, 64, 191, 137, 190, 223, 48, 64, 62, 179, 248, 15, 60, 54, 120, 13, 190, 187, 36, 169, 61, 140, 211, 21, 190, 2, 24, 23, 190, 169, 161, 57, 62, 72, 148, 227, 61, 66, 152, 123, 60, 162, 152, 57, 62, 32, 76, 171, 189, 160, 202, 147, 59, 18, 53, 104, 190, 120, 45, 45, 61, 14, 134, 30, 62, 239, 178, 210, 59, 55, 229, 144, 187, 13, 227, 27, 190, 233, 184, 53, 189, 241, 15, 99, 190, 181, 27, 153, 62, 86, 124, 61, 60, 107, 248, 74, 189, 209, 223, 178, 62, 80, 157, 134, 189, 212, 106, 220, 61, 200, 193, 189, 61, 136, 175, 85, 190, 201, 6, 14, 190, 158, 237, 135, 189, 45, 154, 136, 189, 16, 96, 11, 62, 138, 205, 70, 61, 72, 25, 20, 190, 182, 161, 217, 189, 109, 179, 214, 61, 47, 105, 28, 190, 208, 160, 157, 188, 48, 252, 85, 62, 46, 42, 127, 61, 205, 88, 76, 189, 197, 208, 250, 61, 15, 194, 249, 61, 69, 147, 54, 61, 212, 177, 27, 62, 16, 157, 14, 61, 191, 92, 141, 61, 49, 224, 103, 189, 115, 95, 98, 60, 252, 91, 164, 59, 209, 228, 219, 189, 97, 118, 8, 187, 190, 255, 2, 190, 41, 65, 162, 61, 109, 99, 110, 189, 21, 9, 150, 60, 34, 243, 150, 62, 19, 168, 198, 61, 201, 127, 170, 189, 196, 121, 235, 61, 219, 6, 88, 62, 200, 176, 109, 189, 218, 175, 90, 190, 179, 233, 175, 61, 32, 204, 108, 62, 210, 28, 160, 61, 246, 185, 217, 189, 66, 106, 169, 60, 21, 101, 7, 61, 122, 85, 10, 190, 107, 203, 137, 188, 203, 169, 6, 61, 140, 231, 111, 62, 55, 212, 119, 190, 114, 155, 58, 190, 150, 149, 96, 190, 178, 167, 202, 61, 46, 83, 146, 188, 139, 39, 30, 189, 182, 109, 49, 62, 70, 68, 141, 189, 46, 210, 29, 188, 175, 126, 2, 61, 111, 28, 52, 62, 233, 113, 242, 61, 233, 69, 39, 190, 26, 128, 0, 190, 97, 119, 17, 190, 214, 141, 169, 187, 97, 221, 9, 60, 46, 159, 50, 59, 222, 97, 29, 190, 134, 55, 139, 189, 50, 71, 34, 190, 132, 238, 42, 190, 79, 130, 144, 189, 245, 116, 207, 189, 167, 137, 19, 190, 114, 238, 125, 189, 57, 98, 227, 188, 254, 170, 47, 190, 56, 143, 205, 188, 238, 155, 101, 61, 193, 227, 145, 189, 143, 180, 241, 189, 58, 183, 5, 190, 122, 188, 47, 62, 201, 136, 174, 61, 214, 179, 194, 189, 65, 39, 134, 190, 87, 137, 168, 189, 72, 54, 46, 190, 163, 209, 123, 60, 104, 36, 169, 188, 200, 244, 31, 190, 224, 247, 153, 189, 159, 53, 6, 61, 53, 110, 226, 189, 58, 201, 5, 62, 202, 157, 210, 189, 109, 145, 140, 190, 123, 140, 161, 61, 167, 79, 108, 62, 58, 222, 68, 62, 41, 83, 8, 60, 124, 122, 0, 62, 207, 102, 160, 59, 147, 19, 92, 62, 182, 149, 235, 189, 205, 171, 28, 190, 87, 207, 155, 60, 186, 102, 136, 189, 141, 81, 102, 62, 8, 135, 147, 189, 103, 254, 45, 190, 194, 144, 173, 62, 163, 61, 186, 189, 147, 206, 150, 59, 118, 246, 179, 61, 29, 32, 148, 189, 47, 134, 18, 189, 82, 220, 119, 188, 78, 161, 35, 62, 51, 180, 24, 190, 189, 112, 139, 60, 2, 171, 31, 190, 249, 21, 62, 62, 226, 229, 141, 189, 226, 243, 108, 62, 46, 119, 92, 61, 213, 186, 49, 190, 20, 212, 217, 61, 153, 64, 70, 62, 134, 45, 242, 61, 86, 240, 168, 61, 121, 195, 101, 190, 158, 169, 155, 189, 62, 195, 36, 189, 147, 119, 26, 190, 68, 211, 248, 188, 81, 131, 192, 187, 58, 201, 46, 62, 60, 9, 6, 62, 113, 125, 0, 190, 71, 46, 209, 189, 30, 183, 66, 190, 77, 42, 187, 62, 253, 173, 137, 189, 81, 24, 167, 62, 85, 16, 134, 190, 216, 175, 181, 61, 8, 122, 163, 60, 10, 142, 139, 60, 89, 129, 55, 190, 237, 76, 53, 189, 30, 226, 31, 190, 180, 116, 71, 190, 38, 197, 181, 189, 118, 198, 35, 60, 90, 150, 183, 60, 14, 215, 240, 188, 137, 211, 12, 189, 127, 47, 255, 189, 71, 99, 29, 190, 152, 9, 191, 61, 129, 15, 58, 61, 88, 178, 217, 60, 43, 189, 176, 188, 94, 84, 229, 189, 46, 174, 42, 190, 46, 205, 45, 62, 208, 36, 138, 189, 171, 235, 101, 61, 149, 97, 131, 61, 213, 120, 35, 190, 242, 222, 113, 189, 5, 231, 198, 61, 131, 45, 198, 189, 209, 216, 177, 61, 74, 218, 126, 190, 45, 216, 140, 190, 12, 190, 8, 61, 206, 75, 220, 189, 164, 241, 234, 188, 122, 110, 147, 61, 114, 73, 28, 190, 11, 18, 31, 190, 220, 141, 28, 190, 250, 150, 177, 189, 252, 57, 202, 189, 33, 25, 127, 189, 107, 101, 54, 60, 42, 172, 118, 60, 138, 79, 8, 62, 105, 234, 138, 61, 4, 247, 126, 62, 217, 232, 198, 189, 87, 218, 200, 60, 152, 234, 94, 62, 226, 47, 63, 190, 119, 169, 85, 189, 180, 112, 28, 61, 235, 119, 251, 61, 222, 79, 3, 61, 103, 217, 81, 190, 79, 106, 244, 61, 0, 218, 230, 189, 219, 0, 133, 62, 71, 56, 255, 61, 13, 207, 34, 190, 184, 178, 202, 188, 52, 199, 140, 62, 254, 35, 91, 190, 28, 97, 107, 62, 35, 139, 38, 62, 14, 133, 131, 62, 7, 235, 203, 189, 241, 8, 25, 62, 132, 31, 120, 60, 150, 124, 89, 189, 91, 133, 27, 62, 147, 60, 13, 62, 215, 204, 205, 189, 159, 85, 181, 189, 230, 172, 218, 61, 13, 24, 173, 189, 211, 197, 22, 61, 137, 200, 209, 189, 30, 254, 140, 61, 35, 12, 75, 61, 59, 201, 64, 189, 52, 65, 194, 189, 54, 9, 180, 61, 32, 130, 44, 60, 0, 86, 225, 61, 69, 15, 7, 62, 128, 239, 58, 62, 129, 62, 74, 190, 219, 182, 100, 62, 88, 25, 208, 60, 213, 48, 71, 190, 198, 191, 209, 60, 34, 152, 122, 61, 0, 45, 157, 60, 92, 195, 85, 62, 92, 225, 214, 61, 46, 85, 216, 189, 49, 101, 98, 190, 226, 99, 79, 62, 102, 146, 233, 61, 37, 239, 88, 189, 153, 166, 132, 61, 184, 82, 223, 61, 30, 143, 8, 61, 157, 229, 122, 61, 125, 84, 41, 61, 40, 101, 57, 190, 206, 221, 65, 189, 228, 18, 40, 189, 112, 134, 142, 59, 129, 142, 14, 62, 202, 182, 179, 189, 194, 102, 85, 190, 26, 219, 154, 61, 123, 71, 6, 188, 135, 91, 209, 60, 45, 152, 168, 61, 27, 56, 163, 60, 174, 143, 153, 60, 153, 81, 222, 61, 32, 53, 61, 61, 35, 177, 185, 189, 209, 19, 43, 61, 28, 244, 1, 62, 45, 87, 126, 60, 155, 136, 138, 61, 250, 91, 156, 189, 13, 185, 207, 189, 30, 24, 213, 189, 174, 82, 63, 62, 178, 229, 130, 62, 142, 171, 202, 61, 132, 224, 161, 60, 191, 199, 145, 60, 11, 250, 132, 62, 35, 17, 26, 61, 21, 182, 139, 61, 124, 103, 19, 190, 104, 247, 6, 62, 56, 239, 189, 61, 207, 71, 12, 190, 222, 247, 24, 62, 100, 174, 28, 60, 13, 48, 117, 62, 169, 1, 179, 61, 13, 17, 106, 190, 161, 249, 11, 62, 97, 212, 18, 62, 212, 192, 132, 189, 113, 166, 91, 188, 176, 186, 73, 62, 81, 163, 61, 62, 20, 126, 254, 61, 209, 134, 116, 190, 111, 137, 76, 190, 181, 159, 149, 188, 169, 175, 130, 62, 91, 212, 7, 190, 36, 114, 128, 62, 46, 101, 47, 190, 10, 114, 158, 61, 228, 167, 79, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 192, 14, 61, 69, 41, 136, 61, 210, 221, 87, 62, 132, 59, 142, 62, 134, 149, 59, 189, 157, 127, 175, 189, 105, 118, 87, 61, 251, 22, 199, 61, 123, 135, 241, 61, 200, 116, 221, 189, 85, 171, 135, 189, 58, 1, 108, 62, 31, 196, 201, 60, 50, 58, 181, 61, 61, 41, 44, 61, 235, 101, 63, 189, 30, 72, 220, 189, 2, 7, 150, 189, 122, 187, 24, 190, 147, 9, 35, 190, 95, 9, 89, 62, 53, 5, 6, 190, 238, 23, 233, 61, 159, 252, 241, 188, 105, 201, 51, 62, 115, 158, 70, 62, 203, 21, 50, 62, 60, 167, 97, 188, 238, 247, 97, 189, 10, 56, 162, 61, 21, 112, 21, 190, 227, 180, 86, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 73, 148, 62, 88, 41, 114, 62, 253, 110, 33, 62, 56, 90, 209, 188, 247, 163, 8, 62, 232, 134, 202, 189, 138, 165, 25, 190, 118, 110, 71, 190, 208, 115, 33, 190, 217, 244, 1, 190, 179, 173, 26, 62, 108, 95, 113, 190, 253, 100, 19, 63, 206, 66, 159, 62, 123, 247, 38, 62, 129, 108, 25, 190, 125, 157, 217, 61, 114, 228, 251, 61, 207, 7, 245, 189, 61, 115, 63, 189, 249, 77, 206, 188, 62, 176, 130, 62, 142, 83, 158, 60, 216, 207, 49, 190, 36, 140, 141, 189, 39, 102, 177, 62, 175, 67, 55, 190, 243, 49, 109, 189, 176, 210, 150, 62, 22, 186, 154, 189, 84, 107, 134, 188, 173, 19, 138, 190, 57, 90, 40, 190, 141, 66, 251, 189, 44, 71, 57, 190, 46, 95, 237, 189, 213, 250, 129, 190, 74, 245, 86, 189, 221, 206, 161, 61, 37, 152, 157, 189, 75, 114, 15, 62, 70, 241, 251, 189, 249, 190, 183, 188, 239, 79, 219, 189, 248, 9, 160, 189, 14, 177, 44, 62, 134, 41, 192, 189, 178, 7, 51, 61, 94, 36, 159, 61, 94, 194, 231, 188, 62, 85, 150, 61, 206, 30, 29, 190, 236, 156, 138, 189, 29, 203, 180, 61, 243, 148, 98, 190, 77, 166, 60, 62, 78, 113, 132, 188, 145, 252, 76, 62, 208, 54, 206, 189, 183, 156, 61, 61, 133, 7, 53, 190, 67, 69, 28, 190, 171, 169, 5, 62, 214, 23, 92, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 71, 138, 189, 92, 7, 139, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {219, 217, 160, 63, 240, 178, 148, 190, 172, 82, 43, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {178, 26, 16, 61, 205, 188, 142, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0040/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}