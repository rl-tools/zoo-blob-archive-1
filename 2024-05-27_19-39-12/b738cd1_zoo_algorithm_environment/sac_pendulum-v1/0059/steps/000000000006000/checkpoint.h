// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 29, 219, 62, 151, 63, 54, 190, 144, 144, 171, 59, 187, 182, 213, 190, 245, 6, 245, 62, 40, 186, 181, 61, 252, 80, 237, 190, 248, 199, 114, 191, 120, 35, 136, 189, 237, 120, 148, 190, 82, 164, 36, 191, 121, 83, 187, 62, 116, 14, 135, 62, 245, 82, 117, 191, 123, 222, 17, 191, 202, 25, 8, 191, 176, 255, 140, 63, 178, 53, 235, 62, 28, 240, 48, 61, 145, 8, 231, 190, 106, 200, 33, 191, 61, 229, 185, 190, 235, 36, 155, 62, 162, 239, 11, 62, 250, 149, 38, 63, 125, 106, 0, 191, 116, 66, 137, 62, 162, 55, 26, 191, 120, 115, 137, 62, 6, 202, 183, 61, 103, 108, 97, 63, 36, 130, 94, 190, 237, 31, 139, 190, 158, 116, 2, 190, 212, 164, 126, 189, 130, 92, 10, 191, 170, 168, 19, 191, 222, 247, 57, 63, 81, 172, 58, 62, 47, 86, 166, 190, 220, 99, 58, 61, 177, 100, 19, 63, 24, 148, 69, 63, 191, 193, 3, 63, 82, 146, 137, 62, 49, 13, 129, 190, 6, 215, 180, 59, 252, 113, 26, 191, 195, 223, 170, 190, 105, 26, 136, 63, 209, 246, 103, 61, 52, 219, 142, 190, 134, 96, 209, 191, 35, 39, 253, 190, 105, 108, 6, 63, 225, 117, 25, 63, 70, 235, 224, 62, 243, 111, 0, 191, 247, 153, 91, 191, 199, 222, 211, 190, 42, 243, 147, 61, 47, 250, 9, 63, 244, 40, 171, 190, 246, 217, 147, 62, 57, 1, 172, 190, 158, 189, 30, 60, 131, 104, 139, 190, 227, 68, 85, 63, 184, 165, 73, 190, 44, 68, 160, 62, 85, 232, 235, 61, 129, 255, 151, 62, 121, 71, 189, 62, 208, 213, 103, 189, 180, 29, 33, 63, 84, 53, 240, 190, 98, 220, 109, 63, 110, 128, 200, 62, 115, 148, 254, 189, 216, 168, 200, 61, 224, 137, 40, 63, 32, 69, 22, 188, 21, 9, 196, 188, 109, 195, 36, 63, 172, 12, 123, 189, 251, 80, 6, 188, 201, 18, 136, 60, 146, 94, 59, 63, 102, 251, 110, 63, 124, 249, 132, 62, 138, 138, 160, 189, 212, 200, 5, 190, 2, 119, 16, 63, 46, 170, 12, 63, 250, 92, 42, 191, 70, 73, 51, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 126, 25, 191, 117, 160, 72, 63, 218, 58, 24, 63, 100, 131, 159, 62, 223, 244, 211, 190, 129, 244, 232, 190, 151, 44, 123, 62, 6, 27, 69, 63, 133, 117, 201, 62, 118, 117, 70, 63, 189, 197, 31, 63, 51, 84, 72, 191, 106, 159, 66, 62, 134, 237, 72, 190, 234, 16, 215, 190, 66, 190, 203, 190, 47, 40, 54, 190, 208, 100, 91, 62, 241, 100, 75, 62, 164, 6, 165, 190, 202, 164, 132, 61, 123, 91, 1, 191, 85, 106, 242, 62, 111, 86, 39, 191, 175, 87, 140, 62, 185, 206, 207, 190, 91, 50, 146, 190, 113, 238, 154, 190, 183, 241, 134, 190, 193, 247, 194, 60, 115, 55, 138, 190, 36, 154, 139, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 157, 32, 190, 144, 228, 19, 60, 198, 209, 142, 189, 8, 102, 50, 189, 15, 28, 49, 189, 206, 43, 39, 190, 156, 122, 239, 188, 122, 180, 148, 62, 232, 201, 127, 62, 197, 148, 6, 189, 91, 105, 91, 61, 168, 106, 52, 190, 244, 162, 234, 189, 248, 217, 14, 61, 187, 183, 136, 62, 192, 129, 111, 62, 36, 48, 254, 189, 152, 162, 235, 61, 7, 7, 128, 62, 188, 70, 156, 189, 255, 217, 153, 60, 209, 233, 175, 61, 255, 210, 85, 62, 138, 15, 133, 61, 68, 169, 99, 62, 158, 185, 66, 190, 109, 70, 188, 61, 232, 231, 226, 61, 0, 201, 25, 190, 78, 167, 205, 61, 218, 88, 201, 189, 192, 80, 234, 60, 203, 53, 76, 189, 163, 241, 138, 189, 11, 49, 79, 190, 201, 124, 209, 190, 123, 26, 138, 190, 134, 200, 3, 191, 148, 153, 71, 62, 99, 97, 200, 61, 22, 228, 212, 61, 56, 230, 125, 190, 3, 202, 68, 62, 78, 175, 145, 60, 182, 170, 240, 190, 206, 27, 212, 60, 160, 132, 186, 60, 67, 61, 224, 189, 19, 26, 7, 62, 79, 47, 147, 190, 61, 190, 27, 62, 108, 161, 31, 190, 175, 226, 62, 62, 151, 112, 17, 62, 37, 219, 129, 188, 96, 189, 229, 60, 179, 160, 18, 61, 105, 71, 247, 190, 172, 110, 142, 190, 93, 227, 186, 61, 190, 97, 162, 189, 123, 74, 150, 60, 80, 120, 68, 190, 242, 77, 158, 190, 168, 240, 169, 61, 173, 80, 23, 190, 62, 26, 40, 62, 225, 0, 75, 189, 206, 89, 210, 187, 250, 92, 105, 189, 247, 21, 5, 190, 163, 107, 196, 189, 29, 60, 170, 189, 111, 112, 25, 190, 230, 58, 76, 189, 215, 62, 184, 189, 253, 136, 4, 62, 87, 218, 212, 189, 123, 108, 247, 61, 87, 40, 21, 61, 78, 11, 8, 61, 215, 116, 13, 189, 227, 66, 206, 61, 184, 53, 249, 189, 187, 196, 30, 62, 70, 95, 37, 190, 244, 54, 28, 189, 204, 226, 136, 58, 162, 83, 0, 190, 156, 213, 244, 189, 204, 18, 140, 185, 65, 195, 216, 61, 222, 6, 21, 62, 214, 22, 221, 61, 193, 164, 108, 189, 23, 7, 31, 190, 186, 155, 43, 62, 9, 242, 3, 62, 159, 115, 115, 185, 103, 189, 28, 189, 241, 231, 247, 61, 20, 104, 16, 61, 244, 65, 204, 190, 148, 174, 145, 189, 156, 19, 165, 62, 12, 114, 249, 61, 119, 214, 179, 62, 85, 84, 241, 61, 144, 20, 69, 62, 29, 206, 30, 190, 62, 221, 10, 191, 10, 246, 124, 190, 46, 172, 227, 62, 113, 37, 240, 190, 174, 24, 64, 188, 54, 191, 16, 191, 169, 180, 107, 62, 250, 232, 43, 62, 145, 172, 19, 190, 242, 58, 93, 190, 56, 36, 212, 61, 152, 24, 39, 62, 170, 156, 31, 58, 222, 183, 135, 190, 135, 244, 34, 62, 134, 157, 83, 190, 68, 2, 169, 61, 203, 125, 42, 62, 53, 23, 161, 61, 197, 93, 139, 61, 51, 75, 129, 62, 162, 198, 157, 62, 56, 226, 145, 189, 140, 167, 51, 191, 35, 99, 62, 62, 20, 19, 20, 62, 155, 151, 156, 190, 89, 45, 93, 190, 19, 51, 223, 61, 176, 149, 16, 190, 196, 227, 108, 190, 254, 0, 127, 62, 215, 54, 50, 190, 178, 53, 207, 61, 213, 168, 7, 191, 197, 235, 71, 61, 78, 58, 19, 62, 129, 237, 187, 61, 118, 2, 10, 62, 56, 254, 139, 187, 210, 172, 125, 62, 135, 204, 94, 60, 69, 174, 150, 190, 34, 14, 122, 191, 218, 91, 16, 190, 133, 241, 162, 61, 69, 98, 35, 61, 198, 103, 49, 62, 199, 245, 70, 190, 70, 121, 86, 190, 135, 62, 47, 190, 164, 158, 78, 191, 3, 157, 91, 189, 246, 71, 92, 190, 224, 107, 137, 62, 208, 23, 138, 189, 78, 231, 26, 62, 58, 114, 106, 191, 154, 162, 134, 62, 168, 2, 56, 191, 53, 224, 190, 61, 139, 1, 93, 62, 250, 110, 227, 190, 234, 17, 159, 61, 9, 165, 74, 62, 237, 1, 241, 189, 76, 52, 85, 187, 34, 239, 248, 61, 7, 66, 174, 61, 23, 221, 21, 189, 82, 119, 200, 61, 45, 42, 232, 189, 44, 177, 146, 188, 224, 67, 59, 62, 206, 204, 204, 61, 93, 225, 221, 189, 133, 169, 124, 62, 84, 132, 94, 62, 216, 255, 103, 189, 240, 245, 22, 189, 29, 67, 133, 189, 144, 179, 188, 62, 47, 31, 154, 189, 152, 117, 117, 189, 44, 226, 128, 62, 33, 8, 26, 62, 43, 222, 184, 190, 123, 80, 114, 191, 230, 40, 45, 62, 119, 160, 160, 61, 185, 228, 20, 189, 165, 149, 5, 61, 4, 56, 136, 61, 239, 237, 162, 190, 28, 170, 1, 190, 129, 182, 229, 61, 33, 50, 226, 62, 180, 249, 5, 62, 65, 225, 243, 190, 106, 7, 26, 189, 151, 108, 47, 62, 121, 144, 169, 61, 132, 165, 3, 61, 218, 241, 152, 189, 71, 245, 229, 61, 212, 153, 9, 190, 130, 250, 29, 190, 250, 220, 154, 191, 254, 231, 254, 190, 2, 28, 68, 60, 145, 118, 44, 190, 221, 177, 231, 61, 151, 130, 155, 190, 177, 22, 128, 190, 9, 69, 183, 61, 170, 5, 44, 62, 93, 21, 114, 60, 108, 236, 12, 61, 147, 241, 241, 61, 86, 101, 35, 190, 238, 166, 127, 188, 67, 66, 150, 189, 27, 179, 43, 62, 72, 116, 199, 61, 10, 110, 201, 61, 0, 164, 140, 189, 50, 14, 121, 59, 188, 81, 20, 190, 180, 60, 178, 190, 239, 146, 63, 190, 31, 54, 45, 62, 245, 255, 203, 190, 4, 150, 226, 60, 60, 97, 229, 190, 32, 59, 100, 189, 129, 237, 222, 61, 159, 198, 203, 61, 43, 207, 36, 190, 135, 51, 131, 189, 118, 86, 96, 189, 176, 62, 181, 61, 43, 23, 154, 60, 56, 170, 206, 61, 233, 167, 208, 190, 30, 45, 60, 62, 173, 12, 155, 62, 108, 13, 45, 189, 30, 112, 21, 190, 182, 64, 35, 190, 42, 156, 49, 190, 43, 57, 205, 60, 40, 39, 40, 189, 133, 253, 7, 62, 84, 131, 0, 190, 215, 127, 138, 60, 47, 125, 124, 60, 79, 48, 36, 188, 89, 5, 143, 189, 125, 198, 229, 61, 116, 16, 37, 62, 239, 65, 134, 189, 227, 98, 246, 189, 148, 126, 31, 61, 239, 138, 154, 187, 227, 14, 200, 189, 223, 56, 181, 189, 216, 70, 131, 187, 11, 117, 187, 189, 78, 168, 172, 189, 55, 164, 189, 189, 218, 166, 30, 61, 77, 214, 214, 188, 82, 170, 232, 61, 249, 237, 39, 190, 67, 170, 115, 61, 11, 193, 207, 188, 49, 185, 217, 189, 106, 29, 160, 61, 119, 176, 248, 189, 76, 113, 45, 190, 208, 129, 172, 61, 76, 52, 113, 61, 16, 232, 5, 62, 102, 34, 6, 62, 223, 28, 149, 188, 62, 211, 207, 189, 124, 126, 124, 60, 52, 4, 17, 190, 77, 1, 58, 189, 231, 56, 189, 61, 80, 154, 93, 61, 41, 20, 47, 189, 223, 213, 203, 60, 120, 74, 107, 189, 248, 53, 188, 61, 187, 152, 234, 189, 153, 12, 4, 190, 207, 159, 88, 189, 137, 224, 14, 189, 172, 80, 147, 189, 135, 95, 24, 190, 180, 163, 251, 61, 191, 227, 122, 188, 141, 26, 162, 60, 164, 177, 237, 189, 170, 5, 187, 189, 242, 189, 244, 188, 159, 225, 154, 189, 141, 237, 129, 188, 42, 163, 108, 60, 78, 210, 102, 188, 205, 192, 137, 61, 203, 202, 186, 62, 150, 103, 233, 62, 179, 137, 25, 190, 66, 213, 143, 191, 246, 47, 98, 190, 67, 129, 202, 61, 5, 112, 104, 62, 174, 12, 27, 62, 150, 17, 131, 190, 173, 100, 131, 189, 0, 135, 6, 61, 56, 50, 127, 62, 196, 219, 208, 189, 56, 185, 121, 61, 0, 253, 76, 191, 174, 156, 131, 62, 233, 56, 44, 191, 104, 159, 214, 188, 39, 36, 135, 190, 34, 212, 41, 189, 85, 243, 84, 190, 171, 156, 28, 190, 64, 241, 57, 189, 241, 6, 122, 191, 250, 35, 6, 191, 162, 128, 26, 62, 127, 165, 49, 190, 125, 18, 44, 190, 204, 100, 154, 190, 67, 61, 137, 189, 11, 135, 134, 189, 243, 0, 170, 190, 136, 173, 58, 60, 237, 37, 222, 190, 121, 230, 145, 62, 246, 60, 160, 189, 114, 94, 35, 62, 69, 1, 51, 191, 129, 45, 124, 62, 149, 148, 103, 191, 204, 148, 224, 61, 37, 204, 135, 189, 151, 19, 79, 191, 129, 140, 144, 62, 215, 93, 41, 61, 136, 92, 172, 61, 5, 253, 181, 61, 229, 88, 47, 62, 138, 170, 49, 62, 35, 45, 99, 62, 241, 241, 28, 190, 115, 253, 175, 189, 131, 112, 182, 61, 53, 20, 36, 190, 210, 247, 147, 189, 224, 228, 219, 189, 21, 8, 79, 61, 160, 216, 2, 61, 67, 107, 61, 186, 49, 41, 1, 191, 17, 178, 108, 189, 1, 230, 150, 62, 227, 68, 63, 61, 207, 46, 136, 189, 250, 110, 138, 60, 207, 163, 38, 62, 208, 101, 103, 62, 65, 212, 164, 189, 16, 45, 218, 190, 220, 33, 103, 61, 34, 23, 41, 62, 49, 151, 72, 62, 216, 5, 181, 62, 12, 36, 145, 189, 214, 30, 99, 61, 254, 117, 5, 190, 152, 24, 2, 191, 51, 102, 37, 191, 209, 106, 140, 62, 136, 79, 60, 191, 221, 143, 151, 190, 147, 77, 61, 191, 180, 207, 118, 62, 55, 158, 2, 62, 37, 188, 30, 62, 217, 115, 125, 190, 27, 213, 212, 61, 151, 22, 109, 189, 130, 246, 85, 62, 157, 165, 120, 190, 120, 112, 11, 190, 83, 224, 197, 190, 186, 41, 23, 62, 11, 42, 246, 62, 252, 50, 16, 190, 251, 236, 146, 189, 144, 192, 45, 189, 30, 86, 48, 190, 99, 114, 53, 189, 194, 49, 136, 60, 194, 102, 26, 190, 110, 241, 5, 62, 180, 200, 42, 190, 197, 244, 63, 61, 93, 91, 169, 190, 19, 177, 213, 61, 128, 156, 159, 61, 2, 238, 221, 61, 203, 203, 214, 62, 107, 213, 237, 61, 30, 44, 245, 61, 156, 33, 125, 59, 37, 103, 122, 62, 75, 104, 19, 61, 195, 42, 21, 190, 188, 99, 177, 189, 171, 145, 187, 61, 102, 138, 151, 62, 34, 171, 12, 60, 15, 143, 152, 189, 36, 185, 10, 62, 132, 54, 139, 189, 181, 51, 182, 61, 176, 94, 84, 62, 143, 245, 164, 189, 215, 216, 60, 190, 216, 201, 250, 61, 93, 194, 64, 190, 102, 77, 187, 61, 107, 241, 180, 189, 84, 250, 105, 187, 141, 242, 101, 185, 121, 62, 28, 62, 18, 93, 153, 190, 188, 113, 130, 62, 164, 175, 150, 188, 108, 24, 81, 62, 90, 134, 59, 189, 253, 215, 192, 190, 155, 240, 184, 61, 238, 130, 175, 190, 229, 162, 163, 61, 240, 131, 164, 190, 145, 65, 135, 58, 0, 68, 246, 186, 109, 71, 57, 62, 238, 150, 132, 189, 248, 168, 135, 61, 206, 154, 186, 188, 150, 47, 124, 61, 74, 95, 133, 61, 54, 35, 70, 190, 38, 160, 19, 62, 161, 212, 183, 189, 27, 233, 238, 189, 131, 20, 188, 189, 32, 51, 182, 60, 120, 97, 161, 62, 246, 113, 213, 188, 175, 57, 246, 61, 84, 64, 3, 190, 39, 73, 227, 186, 184, 138, 132, 189, 105, 237, 198, 61, 226, 155, 0, 62, 129, 120, 6, 190, 248, 22, 244, 61, 124, 218, 213, 189, 231, 102, 230, 189, 159, 73, 72, 190, 173, 60, 52, 190, 190, 155, 34, 190, 255, 36, 142, 61, 141, 144, 240, 61, 222, 5, 228, 61, 112, 151, 132, 189, 71, 100, 26, 190, 40, 72, 246, 61, 119, 123, 49, 189, 194, 166, 25, 62, 127, 212, 226, 188, 247, 150, 62, 189, 148, 104, 153, 60, 64, 176, 155, 61, 3, 72, 159, 189, 84, 171, 125, 189, 8, 184, 77, 188, 177, 122, 22, 61, 236, 128, 18, 61, 239, 80, 191, 61, 109, 121, 97, 189, 236, 137, 69, 62, 233, 179, 129, 188, 195, 26, 80, 189, 145, 3, 72, 190, 67, 183, 249, 190, 148, 57, 122, 62, 160, 107, 145, 61, 22, 201, 248, 59, 194, 186, 184, 189, 60, 167, 139, 61, 153, 16, 52, 61, 242, 2, 7, 190, 94, 234, 144, 189, 171, 220, 193, 60, 221, 222, 57, 62, 88, 217, 1, 191, 232, 32, 171, 189, 114, 225, 18, 62, 23, 149, 187, 61, 160, 253, 54, 62, 106, 230, 200, 61, 221, 175, 19, 62, 50, 103, 88, 60, 6, 125, 8, 189, 202, 234, 184, 190, 18, 148, 24, 189, 38, 32, 34, 61, 245, 228, 7, 62, 10, 122, 234, 60, 157, 254, 110, 190, 187, 112, 88, 190, 162, 124, 163, 188, 46, 137, 190, 61, 90, 175, 42, 61, 68, 182, 253, 188, 105, 156, 158, 190, 126, 126, 97, 188, 97, 6, 173, 62, 5, 150, 30, 190, 251, 28, 215, 61, 31, 32, 142, 61, 242, 31, 48, 61, 180, 21, 210, 190, 169, 247, 114, 59, 109, 230, 148, 188, 115, 208, 154, 62, 132, 63, 193, 61, 105, 219, 5, 191, 78, 147, 88, 189, 89, 7, 140, 62, 205, 140, 215, 62, 147, 30, 137, 61, 27, 89, 213, 189, 199, 191, 82, 62, 17, 180, 150, 61, 192, 127, 214, 187, 94, 91, 99, 190, 94, 152, 87, 61, 118, 211, 147, 186, 222, 148, 238, 61, 139, 48, 132, 62, 19, 200, 128, 190, 241, 248, 217, 190, 77, 177, 216, 189, 201, 162, 73, 190, 113, 10, 217, 61, 251, 3, 206, 61, 106, 77, 249, 188, 249, 229, 68, 62, 83, 255, 147, 189, 181, 136, 15, 190, 64, 207, 149, 61, 5, 161, 230, 59, 214, 58, 31, 62, 57, 59, 248, 189, 74, 191, 12, 62, 245, 55, 189, 189, 106, 249, 48, 191, 124, 177, 71, 189, 110, 47, 182, 61, 57, 161, 251, 60, 166, 4, 127, 190, 222, 63, 70, 60, 86, 233, 91, 190, 5, 214, 127, 61, 196, 117, 13, 61, 136, 110, 8, 190, 120, 201, 131, 62, 19, 65, 133, 60, 143, 38, 125, 188, 241, 110, 54, 190, 11, 244, 248, 189, 100, 4, 153, 190, 5, 36, 0, 62, 67, 251, 89, 62, 54, 192, 253, 188, 184, 208, 88, 190, 180, 144, 108, 62, 191, 56, 30, 190, 68, 69, 65, 188, 13, 122, 162, 189, 18, 130, 120, 62, 76, 39, 65, 60, 81, 20, 79, 61, 155, 203, 153, 188, 213, 244, 122, 62, 117, 30, 193, 60, 140, 130, 104, 190, 25, 153, 3, 62, 117, 156, 114, 190, 187, 69, 30, 189, 40, 54, 46, 190, 76, 224, 48, 189, 112, 43, 2, 62, 127, 86, 71, 188, 231, 243, 252, 61, 55, 185, 57, 61, 67, 29, 103, 190, 116, 25, 208, 189, 195, 60, 177, 61, 19, 47, 8, 189, 179, 138, 167, 188, 252, 57, 45, 62, 240, 153, 21, 190, 24, 113, 252, 188, 47, 236, 38, 190, 155, 45, 91, 62, 182, 219, 21, 190, 123, 237, 207, 190, 62, 93, 159, 61, 244, 214, 20, 57, 249, 199, 116, 62, 167, 180, 167, 190, 60, 172, 131, 188, 141, 235, 229, 190, 121, 102, 204, 61, 194, 45, 162, 190, 112, 155, 165, 62, 237, 5, 227, 188, 59, 1, 36, 191, 115, 222, 9, 61, 146, 168, 185, 189, 185, 206, 24, 189, 215, 125, 126, 189, 105, 102, 49, 61, 121, 199, 254, 61, 73, 75, 165, 61, 95, 52, 199, 59, 253, 159, 114, 189, 186, 107, 229, 61, 27, 47, 37, 62, 24, 229, 24, 62, 111, 218, 145, 190, 201, 7, 193, 189, 217, 95, 119, 61, 221, 201, 3, 190, 136, 10, 43, 189, 140, 63, 154, 189, 101, 242, 158, 62, 112, 201, 181, 60, 216, 27, 75, 60, 62, 122, 175, 61, 84, 241, 53, 190, 229, 20, 149, 188, 16, 216, 200, 190, 36, 126, 61, 62, 163, 148, 5, 62, 42, 86, 255, 189, 191, 190, 23, 190, 214, 160, 46, 190, 33, 98, 84, 61, 213, 248, 192, 187, 123, 23, 152, 189, 145, 191, 130, 62, 4, 155, 1, 62, 155, 167, 163, 190, 96, 252, 218, 188, 48, 255, 53, 189, 121, 112, 2, 62, 71, 4, 6, 62, 119, 185, 112, 61, 183, 123, 178, 61, 78, 55, 77, 61, 146, 231, 49, 190, 218, 198, 212, 190, 140, 36, 252, 189, 214, 92, 129, 62, 246, 81, 248, 59, 69, 211, 51, 62, 114, 243, 11, 190, 29, 86, 27, 190, 201, 97, 1, 189, 254, 33, 88, 62, 229, 103, 4, 190, 137, 140, 2, 190, 49, 19, 40, 62, 219, 243, 103, 61, 38, 237, 252, 61, 116, 249, 204, 189, 193, 14, 58, 62, 92, 210, 40, 62, 190, 182, 17, 61, 86, 11, 112, 60, 206, 22, 207, 189, 54, 199, 181, 61, 76, 237, 10, 63, 90, 206, 124, 190, 97, 178, 207, 61, 38, 63, 23, 62, 47, 129, 132, 62, 147, 223, 25, 190, 191, 106, 98, 60, 250, 32, 5, 189, 177, 60, 80, 190, 4, 204, 200, 62, 251, 162, 228, 60, 153, 149, 128, 61, 250, 175, 198, 188, 153, 23, 152, 62, 232, 173, 26, 62, 130, 95, 1, 62, 77, 63, 120, 62, 79, 253, 27, 61, 90, 87, 37, 62, 202, 59, 133, 190, 157, 86, 182, 62, 92, 42, 213, 61, 252, 72, 82, 62, 24, 59, 5, 62, 111, 33, 186, 189, 83, 168, 199, 60, 64, 76, 54, 62, 35, 209, 22, 62, 88, 148, 129, 60, 149, 221, 220, 61, 246, 11, 141, 190, 17, 22, 20, 190, 223, 72, 113, 62, 165, 41, 139, 61, 2, 85, 126, 190, 13, 126, 50, 62, 127, 62, 38, 190, 212, 95, 32, 188, 110, 239, 69, 189, 60, 85, 17, 190, 132, 56, 4, 191, 0, 165, 226, 189, 123, 93, 90, 62, 42, 203, 104, 62, 210, 170, 214, 61, 106, 211, 219, 61, 43, 198, 103, 188, 162, 89, 94, 190, 54, 81, 65, 61, 164, 255, 107, 61, 242, 232, 195, 187, 21, 8, 94, 59, 5, 53, 233, 189, 104, 186, 172, 188, 221, 214, 181, 62, 5, 59, 109, 62, 192, 68, 164, 189, 50, 119, 19, 61, 5, 140, 76, 60, 23, 70, 73, 62, 241, 224, 23, 61, 212, 13, 124, 62, 89, 229, 130, 60, 53, 94, 171, 189, 63, 131, 144, 190, 246, 42, 168, 188, 131, 230, 76, 62, 5, 19, 197, 190, 151, 110, 43, 190, 36, 203, 146, 190, 164, 71, 122, 61, 211, 87, 30, 62, 172, 113, 16, 190, 178, 173, 48, 190, 249, 110, 9, 62, 65, 237, 181, 62, 69, 110, 191, 61, 101, 32, 147, 190, 134, 206, 66, 189, 47, 63, 206, 190, 250, 48, 86, 62, 145, 149, 190, 62, 53, 191, 84, 189, 194, 63, 24, 190, 184, 183, 89, 60, 21, 166, 60, 62, 34, 33, 109, 62, 171, 20, 113, 62, 125, 239, 59, 61, 93, 197, 97, 189, 7, 105, 149, 62, 149, 227, 0, 190, 12, 234, 139, 62, 74, 175, 249, 60, 133, 202, 255, 61, 194, 237, 58, 190, 40, 14, 12, 191, 242, 208, 171, 189, 109, 195, 63, 188, 24, 133, 11, 190, 85, 140, 19, 61, 198, 205, 86, 190, 116, 10, 60, 190, 96, 147, 168, 189, 17, 221, 133, 190, 220, 27, 47, 190, 226, 28, 132, 62, 219, 190, 69, 62, 252, 142, 142, 62, 174, 195, 136, 190, 208, 9, 253, 61, 14, 114, 53, 190, 231, 7, 27, 187, 132, 148, 113, 62, 185, 228, 16, 61, 253, 41, 82, 188, 235, 38, 108, 190, 185, 46, 54, 190, 2, 65, 141, 189, 98, 75, 100, 190, 117, 25, 91, 62, 75, 55, 155, 61, 210, 181, 65, 191, 205, 93, 200, 60, 174, 245, 170, 188, 43, 202, 69, 62, 252, 222, 180, 62, 27, 76, 237, 190, 96, 151, 64, 61, 35, 219, 36, 62, 41, 130, 180, 62, 112, 200, 12, 190, 242, 37, 199, 61, 88, 65, 82, 62, 123, 44, 142, 188, 40, 198, 0, 190, 62, 8, 155, 61, 6, 121, 105, 190, 49, 219, 221, 190, 27, 4, 7, 190, 11, 243, 247, 190, 53, 163, 4, 191, 251, 253, 29, 62, 65, 180, 67, 190, 0, 86, 244, 190, 170, 156, 210, 189, 134, 146, 81, 188, 83, 136, 106, 62, 105, 210, 83, 190, 147, 213, 155, 189, 58, 96, 28, 190, 164, 147, 145, 60, 176, 160, 208, 60, 127, 174, 207, 61, 231, 60, 21, 62, 226, 206, 16, 62, 162, 50, 215, 61, 154, 208, 180, 188, 212, 159, 57, 59, 39, 243, 175, 61, 22, 44, 16, 190, 32, 2, 126, 61, 68, 59, 32, 62, 145, 118, 191, 189, 250, 13, 146, 189, 89, 82, 53, 190, 140, 170, 22, 62, 251, 28, 28, 190, 50, 111, 187, 61, 167, 15, 81, 190, 16, 188, 12, 62, 1, 78, 241, 189, 70, 218, 172, 61, 225, 73, 25, 188, 253, 70, 220, 189, 175, 122, 157, 61, 67, 179, 164, 60, 54, 49, 198, 61, 78, 228, 34, 190, 213, 5, 92, 62, 142, 138, 31, 189, 206, 78, 244, 188, 146, 120, 34, 61, 204, 117, 162, 188, 207, 20, 242, 190, 63, 41, 21, 62, 27, 237, 133, 62, 19, 96, 222, 61, 123, 104, 0, 62, 236, 72, 217, 60, 210, 177, 142, 60, 123, 250, 7, 190, 213, 225, 34, 191, 110, 103, 43, 191, 231, 190, 133, 62, 96, 41, 66, 191, 105, 31, 102, 190, 193, 75, 81, 191, 40, 167, 157, 62, 107, 1, 19, 61, 120, 107, 92, 62, 78, 124, 71, 190, 30, 18, 123, 62, 164, 78, 145, 189, 171, 62, 52, 62, 5, 249, 133, 190, 215, 182, 112, 189, 153, 223, 149, 190, 225, 26, 225, 61, 74, 190, 207, 62, 64, 114, 46, 62, 184, 75, 174, 61, 40, 224, 52, 190, 163, 65, 83, 189, 139, 74, 166, 188, 4, 57, 22, 190, 245, 100, 123, 189, 114, 136, 236, 189, 7, 152, 219, 189, 27, 102, 6, 190, 168, 4, 113, 61, 60, 116, 0, 189, 143, 217, 242, 189, 73, 34, 24, 62, 110, 129, 53, 190, 148, 53, 227, 188, 74, 2, 232, 61, 22, 167, 0, 62, 132, 141, 216, 61, 94, 192, 8, 190, 70, 189, 82, 190, 196, 208, 29, 189, 210, 186, 224, 61, 204, 154, 70, 190, 81, 94, 171, 189, 91, 53, 226, 61, 199, 127, 153, 188, 138, 162, 115, 189, 198, 104, 227, 61, 222, 26, 75, 190, 110, 147, 25, 62, 213, 237, 129, 61, 84, 0, 46, 62, 234, 167, 123, 62, 78, 75, 3, 60, 223, 236, 130, 60, 218, 42, 37, 188, 169, 43, 13, 62, 18, 207, 146, 61, 210, 255, 184, 61, 196, 104, 41, 62, 176, 155, 59, 62, 25, 10, 33, 62, 112, 123, 236, 189, 145, 212, 145, 188, 192, 27, 14, 188, 135, 18, 143, 61, 27, 225, 155, 61, 59, 185, 114, 189, 24, 132, 170, 61, 77, 30, 188, 189, 65, 118, 126, 61, 198, 114, 241, 61, 70, 224, 87, 61, 111, 205, 234, 60, 187, 163, 39, 61, 129, 37, 46, 62, 27, 96, 226, 61, 84, 151, 249, 61, 205, 249, 55, 190, 57, 1, 3, 62, 80, 173, 51, 189, 195, 25, 253, 60, 196, 255, 10, 61, 119, 1, 115, 61, 179, 216, 242, 61, 85, 172, 14, 62, 203, 197, 92, 62, 130, 92, 5, 190, 18, 54, 116, 191, 227, 104, 86, 62, 104, 28, 0, 189, 57, 126, 94, 189, 68, 3, 1, 189, 168, 2, 1, 61, 16, 254, 154, 190, 109, 140, 30, 190, 242, 45, 89, 60, 189, 114, 105, 60, 127, 66, 112, 62, 100, 169, 141, 190, 145, 106, 245, 188, 176, 10, 69, 61, 28, 143, 6, 62, 212, 116, 185, 61, 61, 168, 209, 58, 249, 103, 2, 189, 207, 118, 134, 189, 31, 41, 68, 190, 161, 162, 65, 191, 181, 180, 133, 190, 36, 244, 197, 61, 117, 142, 232, 188, 2, 81, 154, 62, 123, 72, 206, 189, 4, 111, 39, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {42, 54, 164, 62, 136, 122, 8, 62, 72, 86, 88, 189, 45, 125, 27, 62, 39, 200, 202, 61, 98, 202, 99, 189, 18, 64, 66, 62, 183, 247, 205, 188, 161, 30, 10, 190, 138, 64, 46, 190, 213, 238, 8, 190, 8, 139, 193, 61, 68, 141, 133, 62, 153, 124, 115, 190, 146, 97, 155, 61, 169, 87, 54, 190, 224, 181, 35, 189, 161, 66, 119, 189, 118, 129, 15, 62, 72, 192, 217, 189, 101, 65, 58, 62, 225, 36, 180, 61, 8, 151, 147, 61, 8, 232, 27, 190, 243, 239, 4, 62, 235, 86, 89, 62, 18, 80, 101, 190, 149, 21, 228, 61, 125, 68, 159, 62, 96, 118, 49, 190, 189, 115, 6, 62, 37, 163, 143, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {6, 202, 122, 190, 66, 110, 226, 190, 131, 185, 73, 60, 242, 182, 249, 62, 194, 239, 223, 190, 119, 185, 237, 62, 167, 11, 76, 191, 155, 199, 249, 62, 155, 154, 131, 189, 188, 180, 250, 189, 113, 51, 82, 191, 49, 139, 141, 62, 28, 95, 92, 63, 136, 240, 151, 189, 200, 62, 95, 62, 5, 181, 170, 61, 230, 23, 110, 190, 90, 180, 176, 190, 139, 108, 242, 61, 170, 194, 48, 62, 39, 200, 212, 62, 41, 152, 73, 190, 2, 29, 35, 190, 123, 121, 142, 190, 82, 68, 253, 62, 71, 77, 181, 62, 200, 31, 157, 62, 47, 222, 237, 188, 10, 255, 83, 63, 151, 12, 28, 190, 223, 255, 41, 189, 94, 170, 29, 191, 196, 167, 179, 190, 112, 237, 42, 190, 17, 194, 85, 189, 29, 241, 140, 61, 32, 58, 238, 189, 48, 31, 147, 62, 158, 237, 211, 61, 183, 178, 130, 61, 187, 23, 118, 189, 222, 106, 224, 61, 227, 154, 71, 62, 99, 54, 59, 189, 210, 100, 67, 62, 73, 82, 111, 62, 119, 8, 46, 61, 207, 199, 95, 188, 231, 243, 1, 189, 19, 56, 13, 62, 63, 71, 229, 188, 128, 202, 36, 188, 151, 132, 84, 190, 246, 12, 244, 61, 5, 24, 156, 61, 155, 217, 241, 61, 89, 137, 143, 62, 83, 140, 32, 190, 26, 197, 116, 62, 159, 224, 18, 190, 0, 138, 205, 189, 157, 103, 11, 61, 106, 241, 48, 190, 138, 98, 206, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 233, 0, 190, 184, 217, 160, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {165, 103, 58, 61, 141, 163, 72, 190, 188, 9, 142, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {58, 61, 175, 191, 13, 90, 90, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0059/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}