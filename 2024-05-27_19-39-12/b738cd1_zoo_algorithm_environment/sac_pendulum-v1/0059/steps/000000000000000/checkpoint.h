// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 233, 231, 62, 200, 137, 65, 190, 64, 205, 179, 60, 60, 72, 214, 190, 206, 196, 190, 62, 61, 23, 137, 62, 91, 96, 247, 190, 13, 207, 16, 191, 143, 16, 198, 190, 51, 169, 251, 190, 146, 207, 172, 190, 39, 186, 166, 62, 213, 61, 52, 189, 120, 87, 18, 191, 14, 176, 16, 191, 174, 153, 173, 190, 219, 215, 62, 190, 116, 216, 192, 62, 52, 214, 8, 62, 109, 66, 169, 60, 157, 150, 156, 190, 190, 94, 253, 190, 169, 0, 13, 62, 38, 23, 137, 62, 222, 169, 205, 62, 10, 27, 198, 190, 153, 115, 101, 62, 128, 106, 8, 190, 173, 147, 50, 189, 3, 127, 248, 62, 212, 233, 5, 63, 126, 251, 37, 190, 86, 144, 176, 190, 177, 44, 36, 190, 113, 89, 235, 62, 28, 223, 246, 190, 174, 106, 186, 190, 197, 192, 16, 63, 247, 205, 65, 62, 119, 126, 211, 187, 225, 48, 132, 61, 45, 249, 16, 63, 89, 119, 212, 62, 189, 61, 120, 61, 5, 71, 30, 62, 88, 42, 135, 190, 231, 39, 13, 63, 120, 170, 211, 190, 66, 226, 35, 62, 97, 138, 10, 63, 21, 126, 132, 189, 66, 126, 177, 189, 176, 66, 7, 191, 213, 116, 5, 191, 214, 136, 194, 62, 197, 102, 168, 62, 36, 211, 216, 62, 231, 79, 18, 191, 158, 171, 97, 62, 50, 27, 170, 190, 54, 95, 207, 60, 141, 161, 5, 63, 103, 212, 99, 190, 122, 42, 161, 62, 212, 11, 193, 190, 67, 213, 233, 60, 13, 137, 91, 190, 148, 88, 17, 63, 164, 180, 14, 190, 42, 63, 175, 62, 38, 244, 28, 189, 68, 15, 153, 62, 229, 27, 49, 188, 122, 148, 201, 190, 9, 123, 250, 62, 234, 60, 251, 190, 41, 1, 158, 190, 80, 21, 108, 62, 226, 82, 109, 190, 52, 68, 210, 190, 207, 215, 14, 63, 132, 176, 241, 62, 126, 227, 82, 190, 32, 10, 235, 62, 123, 215, 131, 189, 121, 18, 43, 188, 53, 171, 211, 60, 55, 185, 156, 62, 204, 49, 226, 62, 157, 132, 192, 62, 12, 192, 233, 188, 70, 51, 189, 190, 188, 105, 211, 62, 130, 226, 210, 61, 97, 181, 133, 190, 120, 35, 249, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 169, 19, 191, 227, 194, 9, 63, 98, 103, 152, 62, 235, 154, 211, 62, 49, 151, 136, 190, 48, 69, 5, 191, 62, 162, 159, 62, 84, 247, 7, 63, 94, 34, 146, 62, 170, 122, 7, 63, 197, 144, 190, 62, 96, 188, 241, 190, 73, 119, 34, 190, 29, 17, 138, 190, 79, 168, 182, 190, 7, 140, 130, 190, 167, 59, 178, 190, 192, 75, 216, 62, 99, 177, 19, 62, 248, 223, 66, 189, 111, 223, 71, 62, 90, 138, 239, 190, 190, 47, 10, 63, 135, 203, 1, 191, 60, 238, 132, 62, 80, 193, 154, 190, 150, 165, 163, 190, 133, 255, 255, 190, 212, 0, 133, 190, 28, 127, 203, 61, 169, 237, 63, 189, 242, 28, 5, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 14, 34, 190, 184, 37, 203, 189, 198, 76, 8, 190, 182, 189, 45, 190, 192, 218, 9, 62, 134, 60, 254, 189, 201, 58, 171, 189, 219, 100, 47, 62, 99, 220, 254, 61, 70, 162, 194, 189, 37, 211, 169, 61, 223, 96, 7, 189, 185, 27, 126, 189, 54, 11, 62, 189, 243, 221, 12, 62, 237, 103, 52, 62, 23, 158, 22, 60, 166, 217, 84, 59, 85, 157, 14, 62, 47, 212, 6, 190, 78, 241, 136, 189, 59, 131, 247, 61, 175, 248, 111, 61, 198, 33, 179, 60, 194, 190, 47, 62, 35, 210, 249, 189, 212, 120, 185, 61, 175, 196, 20, 61, 0, 201, 25, 190, 201, 59, 146, 189, 145, 136, 228, 189, 39, 35, 6, 62, 34, 104, 76, 189, 60, 212, 220, 189, 48, 162, 146, 61, 196, 170, 16, 190, 239, 27, 2, 61, 19, 83, 246, 59, 77, 218, 252, 61, 206, 3, 44, 61, 228, 109, 6, 62, 57, 187, 2, 190, 223, 50, 48, 60, 74, 236, 167, 61, 90, 4, 171, 189, 18, 46, 24, 62, 109, 54, 229, 189, 146, 112, 14, 190, 17, 27, 49, 62, 51, 119, 131, 189, 194, 174, 42, 62, 232, 13, 3, 190, 14, 114, 84, 60, 195, 251, 16, 62, 97, 67, 17, 190, 0, 54, 22, 62, 135, 131, 199, 61, 53, 142, 76, 60, 136, 74, 50, 190, 169, 134, 91, 61, 190, 97, 162, 189, 94, 147, 78, 189, 103, 119, 44, 190, 244, 148, 33, 190, 168, 240, 169, 61, 173, 80, 23, 190, 62, 26, 40, 62, 225, 0, 75, 189, 206, 89, 210, 187, 250, 92, 105, 189, 247, 21, 5, 190, 163, 107, 196, 189, 29, 60, 170, 189, 111, 112, 25, 190, 230, 58, 76, 189, 215, 62, 184, 189, 253, 136, 4, 62, 87, 218, 212, 189, 123, 108, 247, 61, 87, 40, 21, 61, 78, 11, 8, 61, 215, 116, 13, 189, 227, 66, 206, 61, 184, 53, 249, 189, 187, 196, 30, 62, 70, 95, 37, 190, 244, 54, 28, 189, 204, 226, 136, 58, 162, 83, 0, 190, 156, 213, 244, 189, 204, 18, 140, 185, 65, 195, 216, 61, 222, 6, 21, 62, 214, 22, 221, 61, 193, 164, 108, 189, 23, 7, 31, 190, 240, 88, 43, 62, 183, 78, 52, 62, 53, 253, 35, 62, 65, 49, 15, 189, 4, 64, 70, 61, 236, 194, 86, 189, 227, 120, 45, 190, 25, 53, 72, 189, 17, 95, 28, 62, 34, 71, 189, 61, 164, 185, 32, 62, 8, 107, 9, 62, 216, 72, 13, 62, 65, 169, 40, 189, 31, 58, 34, 190, 83, 69, 18, 189, 184, 63, 20, 62, 246, 101, 138, 61, 189, 212, 33, 62, 127, 113, 205, 189, 151, 111, 238, 61, 7, 38, 46, 62, 248, 23, 40, 190, 232, 236, 33, 190, 48, 49, 15, 189, 183, 226, 74, 61, 221, 243, 252, 189, 202, 14, 30, 190, 199, 202, 34, 62, 108, 163, 241, 61, 44, 112, 133, 189, 220, 241, 227, 189, 53, 23, 161, 61, 67, 109, 122, 61, 68, 91, 18, 62, 171, 101, 246, 61, 45, 159, 198, 61, 161, 195, 239, 61, 70, 127, 226, 61, 146, 167, 3, 62, 63, 16, 119, 189, 56, 27, 6, 190, 127, 98, 255, 61, 140, 137, 29, 189, 165, 86, 251, 189, 9, 149, 46, 60, 214, 198, 37, 190, 180, 30, 34, 61, 69, 119, 41, 190, 239, 182, 92, 189, 67, 113, 27, 62, 85, 234, 71, 61, 59, 151, 129, 61, 190, 128, 90, 59, 145, 230, 50, 62, 131, 116, 79, 61, 123, 31, 229, 189, 243, 107, 226, 189, 44, 178, 12, 62, 212, 19, 31, 190, 69, 98, 35, 61, 151, 190, 145, 61, 96, 72, 81, 188, 181, 8, 162, 189, 135, 62, 47, 190, 162, 115, 17, 190, 215, 211, 242, 189, 14, 244, 22, 190, 211, 147, 188, 61, 168, 208, 134, 61, 26, 207, 198, 61, 34, 75, 234, 189, 122, 12, 238, 189, 234, 235, 50, 190, 233, 115, 36, 189, 209, 71, 14, 62, 19, 115, 46, 61, 172, 40, 7, 190, 73, 108, 49, 62, 141, 73, 36, 190, 130, 23, 184, 61, 139, 51, 195, 60, 150, 28, 192, 189, 86, 199, 159, 189, 196, 186, 202, 61, 45, 42, 232, 189, 239, 145, 239, 60, 202, 186, 145, 61, 124, 192, 9, 190, 13, 109, 36, 61, 20, 73, 214, 61, 1, 31, 2, 189, 216, 255, 103, 189, 123, 178, 38, 62, 86, 153, 9, 190, 56, 39, 154, 61, 47, 31, 154, 189, 148, 61, 22, 190, 34, 14, 254, 61, 207, 13, 49, 60, 138, 100, 207, 189, 145, 195, 234, 60, 114, 225, 225, 61, 146, 190, 155, 60, 50, 161, 166, 189, 139, 130, 186, 61, 215, 196, 141, 61, 125, 110, 228, 189, 246, 162, 191, 189, 29, 182, 139, 189, 80, 243, 214, 60, 10, 108, 243, 61, 154, 195, 156, 61, 147, 221, 183, 189, 180, 19, 134, 61, 27, 104, 77, 61, 95, 164, 2, 189, 21, 114, 149, 189, 88, 138, 54, 61, 54, 159, 42, 190, 250, 75, 131, 61, 82, 52, 13, 190, 41, 12, 106, 189, 17, 89, 224, 189, 145, 118, 44, 190, 191, 242, 212, 189, 181, 227, 58, 61, 211, 233, 113, 58, 43, 38, 184, 61, 224, 189, 15, 62, 221, 84, 137, 188, 26, 9, 228, 60, 214, 49, 194, 61, 56, 93, 27, 190, 77, 220, 51, 62, 42, 117, 213, 189, 131, 28, 220, 61, 252, 153, 72, 61, 71, 204, 76, 61, 63, 83, 96, 189, 208, 147, 43, 190, 43, 101, 125, 189, 71, 227, 81, 61, 249, 102, 240, 188, 4, 57, 48, 188, 247, 114, 218, 189, 49, 52, 33, 62, 69, 223, 15, 190, 46, 200, 57, 187, 44, 82, 174, 61, 212, 2, 196, 61, 25, 57, 194, 189, 77, 1, 166, 189, 127, 58, 177, 189, 201, 214, 174, 61, 190, 156, 213, 61, 90, 67, 206, 61, 180, 158, 218, 189, 223, 154, 45, 62, 242, 195, 217, 61, 108, 13, 45, 189, 30, 112, 21, 190, 238, 169, 13, 190, 191, 10, 49, 190, 22, 183, 76, 61, 40, 39, 40, 189, 122, 193, 34, 62, 2, 26, 0, 190, 176, 187, 33, 61, 125, 61, 122, 60, 85, 111, 171, 60, 74, 145, 130, 189, 125, 198, 229, 61, 116, 16, 37, 62, 239, 65, 134, 189, 85, 197, 241, 189, 148, 126, 31, 61, 127, 62, 176, 60, 39, 17, 197, 189, 106, 131, 175, 189, 118, 251, 152, 60, 11, 117, 187, 189, 25, 180, 132, 189, 55, 164, 189, 189, 187, 157, 40, 61, 77, 214, 214, 188, 82, 170, 232, 61, 249, 237, 39, 190, 67, 170, 115, 61, 26, 146, 203, 188, 49, 185, 217, 189, 147, 135, 209, 61, 119, 176, 248, 189, 76, 113, 45, 190, 208, 129, 172, 61, 76, 52, 113, 61, 16, 232, 5, 62, 102, 34, 6, 62, 223, 28, 149, 188, 62, 211, 207, 189, 124, 126, 124, 60, 52, 4, 17, 190, 77, 1, 58, 189, 231, 56, 189, 61, 80, 154, 93, 61, 41, 20, 47, 189, 223, 213, 203, 60, 120, 74, 107, 189, 248, 53, 188, 61, 187, 152, 234, 189, 153, 12, 4, 190, 207, 159, 88, 189, 137, 224, 14, 189, 172, 80, 147, 189, 135, 95, 24, 190, 180, 163, 251, 61, 191, 227, 122, 188, 141, 26, 162, 60, 164, 177, 237, 189, 170, 5, 187, 189, 242, 189, 244, 188, 159, 225, 154, 189, 141, 237, 129, 188, 42, 163, 108, 60, 78, 210, 102, 188, 213, 211, 204, 61, 51, 182, 7, 62, 146, 173, 125, 61, 162, 115, 70, 61, 228, 147, 138, 61, 107, 206, 12, 190, 38, 176, 229, 61, 110, 192, 27, 62, 54, 241, 50, 62, 172, 145, 213, 60, 140, 24, 232, 61, 142, 156, 230, 61, 97, 216, 67, 189, 39, 78, 169, 60, 31, 26, 39, 62, 93, 16, 22, 62, 56, 15, 35, 62, 254, 187, 184, 189, 48, 135, 215, 59, 96, 54, 237, 189, 142, 203, 236, 188, 125, 178, 15, 189, 236, 96, 201, 61, 12, 144, 232, 61, 62, 255, 95, 61, 131, 170, 241, 189, 56, 224, 37, 190, 127, 165, 49, 190, 53, 43, 230, 60, 114, 182, 255, 189, 141, 12, 52, 62, 11, 135, 134, 189, 212, 203, 16, 62, 79, 210, 7, 189, 24, 55, 230, 189, 139, 17, 242, 61, 133, 201, 144, 189, 233, 115, 185, 61, 91, 33, 248, 189, 54, 204, 51, 62, 92, 139, 153, 189, 21, 49, 138, 187, 58, 61, 45, 190, 109, 51, 231, 189, 181, 246, 36, 62, 67, 204, 83, 61, 46, 134, 247, 60, 109, 185, 1, 62, 223, 3, 159, 61, 124, 42, 153, 186, 235, 181, 34, 62, 34, 158, 34, 190, 190, 203, 171, 189, 148, 69, 247, 61, 235, 66, 25, 190, 159, 67, 35, 61, 33, 233, 135, 189, 130, 139, 213, 61, 132, 137, 201, 189, 67, 107, 61, 186, 40, 18, 253, 189, 158, 194, 132, 189, 239, 141, 24, 62, 197, 111, 61, 61, 170, 172, 29, 190, 72, 55, 176, 61, 149, 54, 185, 61, 240, 167, 11, 61, 200, 252, 129, 189, 99, 76, 157, 189, 113, 129, 87, 189, 205, 172, 40, 189, 147, 149, 13, 62, 174, 169, 146, 189, 2, 169, 202, 189, 248, 14, 200, 188, 233, 124, 232, 60, 149, 10, 24, 61, 139, 106, 30, 190, 5, 201, 136, 189, 118, 249, 251, 186, 98, 216, 11, 190, 190, 207, 192, 188, 1, 141, 65, 61, 111, 124, 226, 61, 163, 77, 26, 61, 17, 93, 135, 189, 178, 121, 243, 186, 176, 54, 220, 189, 74, 123, 48, 62, 188, 120, 98, 189, 59, 145, 11, 190, 146, 70, 109, 189, 27, 238, 162, 61, 153, 218, 59, 189, 228, 66, 16, 190, 232, 21, 213, 188, 244, 163, 47, 62, 168, 163, 148, 189, 144, 167, 99, 189, 113, 27, 37, 189, 242, 39, 146, 189, 4, 237, 46, 62, 106, 43, 9, 190, 80, 238, 83, 61, 127, 60, 6, 190, 116, 170, 230, 61, 250, 11, 53, 61, 229, 95, 140, 61, 212, 138, 231, 61, 181, 230, 41, 62, 45, 116, 2, 62, 203, 103, 248, 60, 156, 227, 42, 62, 115, 34, 160, 61, 30, 237, 224, 187, 244, 195, 221, 189, 77, 32, 41, 62, 97, 14, 10, 62, 46, 214, 132, 59, 7, 91, 210, 189, 41, 103, 223, 61, 2, 176, 37, 190, 62, 253, 181, 61, 85, 50, 190, 61, 214, 8, 167, 189, 3, 161, 74, 189, 171, 16, 253, 61, 25, 65, 139, 60, 4, 61, 230, 60, 94, 94, 145, 60, 139, 47, 31, 190, 77, 200, 250, 60, 101, 165, 192, 61, 7, 190, 7, 190, 251, 233, 18, 62, 39, 158, 159, 61, 12, 40, 171, 187, 207, 3, 218, 189, 195, 93, 44, 190, 126, 160, 147, 61, 167, 126, 247, 189, 63, 73, 180, 61, 120, 211, 194, 189, 228, 205, 163, 189, 157, 87, 104, 189, 146, 78, 46, 62, 113, 169, 34, 189, 217, 199, 128, 61, 197, 172, 149, 61, 204, 171, 140, 61, 62, 62, 146, 61, 199, 4, 39, 190, 68, 65, 37, 62, 85, 1, 242, 189, 205, 2, 239, 189, 174, 253, 119, 61, 132, 124, 66, 61, 213, 218, 119, 61, 246, 113, 213, 188, 192, 53, 16, 62, 193, 39, 224, 189, 228, 43, 218, 186, 39, 63, 55, 189, 105, 237, 198, 61, 172, 192, 25, 62, 96, 60, 223, 189, 248, 22, 244, 61, 171, 117, 206, 189, 40, 162, 188, 189, 186, 189, 47, 190, 108, 126, 41, 190, 190, 155, 34, 190, 255, 36, 142, 61, 38, 14, 18, 62, 236, 218, 0, 62, 88, 60, 58, 189, 219, 110, 22, 190, 47, 52, 22, 62, 201, 93, 155, 188, 194, 166, 25, 62, 167, 137, 55, 187, 247, 150, 62, 189, 148, 104, 153, 60, 64, 176, 155, 61, 3, 72, 159, 189, 84, 171, 125, 189, 8, 184, 77, 188, 240, 37, 41, 61, 236, 128, 18, 61, 47, 165, 211, 61, 109, 121, 97, 189, 15, 222, 136, 61, 157, 59, 253, 188, 85, 198, 47, 190, 193, 46, 37, 188, 182, 36, 195, 189, 252, 146, 19, 62, 30, 50, 63, 189, 226, 105, 220, 59, 82, 43, 174, 189, 19, 176, 182, 61, 227, 215, 44, 62, 244, 41, 166, 188, 155, 172, 168, 189, 72, 66, 145, 189, 168, 51, 222, 61, 32, 128, 245, 189, 210, 251, 38, 190, 29, 207, 232, 60, 13, 193, 59, 188, 175, 60, 174, 61, 36, 243, 232, 61, 84, 245, 73, 61, 212, 97, 33, 189, 91, 214, 46, 60, 207, 23, 204, 61, 130, 153, 236, 61, 210, 97, 77, 189, 245, 228, 7, 62, 197, 104, 250, 189, 43, 114, 17, 190, 228, 50, 202, 188, 31, 167, 147, 188, 224, 18, 134, 61, 164, 220, 193, 60, 177, 86, 94, 188, 174, 245, 23, 189, 164, 157, 11, 62, 5, 179, 21, 62, 53, 181, 44, 190, 18, 127, 250, 61, 138, 145, 25, 62, 41, 233, 80, 61, 151, 206, 24, 190, 195, 66, 150, 61, 165, 119, 148, 189, 199, 110, 113, 189, 90, 176, 245, 187, 237, 149, 26, 190, 97, 155, 3, 190, 162, 60, 10, 62, 126, 152, 16, 62, 143, 230, 17, 190, 76, 39, 127, 189, 164, 81, 189, 189, 216, 133, 15, 190, 194, 255, 150, 61, 169, 85, 200, 188, 58, 24, 45, 62, 171, 71, 13, 190, 137, 6, 239, 61, 196, 79, 113, 61, 43, 90, 11, 190, 143, 4, 129, 189, 8, 152, 216, 189, 147, 62, 50, 190, 32, 133, 231, 61, 173, 65, 138, 188, 138, 71, 209, 189, 24, 202, 207, 61, 201, 235, 55, 61, 5, 57, 34, 190, 132, 26, 15, 61, 138, 222, 114, 189, 204, 186, 221, 61, 92, 167, 215, 189, 22, 126, 238, 61, 208, 66, 148, 189, 70, 17, 8, 190, 147, 54, 224, 61, 247, 100, 252, 61, 77, 212, 45, 62, 98, 66, 206, 189, 137, 0, 13, 62, 15, 19, 166, 189, 233, 169, 81, 61, 64, 241, 228, 61, 57, 76, 47, 61, 237, 157, 42, 62, 174, 32, 22, 190, 190, 30, 20, 190, 135, 211, 152, 189, 38, 248, 248, 189, 141, 105, 245, 59, 219, 89, 22, 60, 216, 172, 170, 61, 28, 127, 3, 189, 4, 37, 50, 189, 121, 221, 48, 62, 161, 171, 254, 189, 143, 216, 224, 189, 130, 161, 78, 188, 185, 85, 42, 62, 155, 25, 50, 62, 112, 134, 11, 188, 27, 213, 124, 61, 47, 126, 234, 61, 16, 135, 119, 188, 105, 40, 137, 189, 100, 43, 250, 61, 181, 245, 108, 189, 145, 226, 29, 189, 29, 154, 10, 190, 218, 53, 254, 189, 248, 102, 5, 62, 61, 167, 98, 188, 55, 85, 8, 62, 56, 2, 114, 59, 178, 51, 37, 190, 94, 159, 148, 189, 223, 38, 168, 61, 5, 156, 216, 60, 147, 38, 84, 188, 254, 193, 36, 62, 101, 218, 21, 190, 141, 166, 243, 61, 16, 244, 44, 190, 227, 146, 150, 188, 204, 229, 24, 190, 246, 243, 1, 185, 182, 49, 29, 61, 209, 35, 4, 62, 42, 31, 2, 62, 147, 75, 239, 189, 12, 144, 26, 190, 117, 52, 215, 189, 121, 161, 182, 189, 251, 68, 94, 189, 217, 26, 11, 62, 202, 17, 220, 189, 93, 4, 114, 189, 127, 221, 142, 61, 33, 255, 62, 61, 253, 51, 239, 189, 251, 188, 208, 189, 8, 197, 88, 189, 124, 192, 154, 61, 45, 243, 104, 60, 106, 251, 27, 189, 184, 145, 215, 189, 245, 63, 211, 61, 159, 114, 34, 62, 148, 73, 251, 61, 5, 158, 155, 189, 206, 9, 56, 189, 111, 154, 253, 60, 109, 21, 4, 190, 39, 207, 180, 61, 33, 40, 57, 189, 89, 175, 26, 61, 112, 201, 181, 60, 99, 148, 29, 189, 165, 60, 106, 61, 188, 51, 50, 190, 226, 224, 206, 61, 98, 130, 213, 187, 17, 222, 185, 61, 198, 198, 204, 61, 129, 170, 138, 61, 254, 5, 245, 189, 194, 90, 12, 190, 33, 6, 211, 61, 65, 70, 148, 61, 163, 188, 225, 189, 0, 207, 205, 61, 48, 225, 87, 61, 237, 131, 37, 62, 148, 162, 177, 189, 7, 166, 141, 189, 150, 74, 30, 61, 5, 25, 14, 61, 153, 116, 101, 61, 118, 0, 177, 59, 254, 116, 158, 189, 234, 78, 115, 188, 218, 16, 153, 60, 28, 164, 163, 61, 37, 167, 6, 62, 246, 81, 248, 59, 92, 174, 176, 61, 178, 225, 152, 60, 166, 227, 98, 61, 201, 97, 1, 189, 161, 69, 23, 62, 212, 76, 41, 190, 213, 14, 37, 190, 101, 147, 45, 62, 93, 197, 157, 188, 214, 96, 42, 62, 237, 95, 50, 190, 102, 194, 196, 61, 119, 107, 18, 61, 200, 54, 231, 61, 163, 73, 91, 189, 137, 182, 88, 187, 237, 119, 141, 189, 148, 179, 209, 61, 135, 246, 49, 190, 163, 79, 11, 62, 246, 178, 194, 61, 222, 157, 201, 61, 236, 89, 93, 189, 74, 15, 108, 60, 53, 11, 243, 188, 104, 41, 2, 190, 203, 28, 43, 62, 90, 167, 19, 190, 166, 240, 30, 62, 73, 35, 50, 190, 86, 81, 194, 61, 232, 173, 26, 62, 213, 173, 208, 189, 72, 56, 162, 61, 158, 4, 11, 62, 90, 87, 37, 62, 184, 195, 237, 189, 55, 15, 21, 61, 82, 112, 130, 188, 134, 125, 221, 60, 218, 154, 207, 61, 5, 172, 98, 189, 42, 198, 209, 61, 62, 97, 140, 61, 98, 13, 32, 62, 59, 105, 77, 61, 11, 238, 101, 188, 65, 56, 60, 189, 217, 223, 31, 190, 137, 0, 39, 61, 69, 92, 140, 61, 5, 112, 68, 187, 61, 230, 48, 190, 179, 101, 172, 189, 71, 70, 10, 62, 154, 30, 87, 61, 65, 40, 4, 190, 221, 133, 110, 189, 57, 47, 181, 189, 198, 19, 23, 62, 37, 21, 50, 62, 145, 82, 114, 61, 248, 251, 251, 61, 43, 198, 103, 188, 78, 46, 46, 190, 148, 195, 83, 188, 25, 21, 25, 190, 51, 211, 199, 187, 221, 214, 29, 61, 1, 201, 85, 189, 167, 72, 87, 189, 160, 244, 37, 62, 129, 231, 138, 61, 148, 162, 139, 61, 206, 68, 96, 61, 54, 221, 130, 189, 24, 252, 28, 62, 14, 170, 190, 189, 115, 234, 7, 62, 119, 236, 253, 189, 151, 28, 3, 60, 102, 200, 21, 62, 235, 247, 16, 62, 201, 142, 14, 189, 115, 21, 52, 190, 218, 201, 199, 188, 174, 160, 255, 189, 72, 129, 42, 62, 248, 182, 13, 62, 198, 169, 84, 189, 235, 9, 56, 189, 49, 65, 239, 60, 55, 150, 6, 62, 78, 90, 140, 188, 25, 37, 36, 190, 40, 71, 67, 189, 121, 116, 1, 190, 226, 74, 205, 61, 2, 237, 117, 61, 39, 79, 93, 189, 157, 142, 42, 190, 204, 77, 138, 61, 212, 24, 185, 61, 245, 84, 16, 62, 126, 163, 253, 61, 184, 213, 2, 62, 11, 23, 163, 189, 31, 130, 23, 62, 122, 13, 52, 190, 224, 134, 8, 62, 228, 227, 180, 59, 178, 194, 24, 62, 131, 40, 4, 190, 8, 60, 153, 189, 44, 221, 130, 61, 232, 17, 30, 190, 150, 123, 39, 189, 111, 231, 164, 61, 213, 35, 226, 189, 62, 241, 209, 188, 132, 47, 199, 189, 90, 132, 23, 190, 250, 11, 7, 61, 6, 178, 236, 61, 163, 87, 236, 60, 20, 202, 42, 62, 64, 129, 19, 190, 199, 149, 252, 61, 115, 131, 8, 189, 75, 128, 252, 189, 82, 143, 116, 60, 185, 228, 16, 61, 40, 239, 14, 190, 211, 156, 40, 190, 212, 178, 38, 62, 197, 223, 229, 189, 246, 142, 182, 61, 173, 56, 44, 62, 0, 91, 205, 60, 86, 21, 248, 189, 140, 185, 21, 190, 215, 114, 212, 61, 53, 24, 198, 61, 238, 180, 7, 61, 182, 57, 165, 187, 95, 173, 219, 61, 193, 158, 179, 60, 192, 143, 230, 61, 87, 170, 214, 189, 210, 253, 195, 61, 85, 235, 200, 61, 130, 80, 246, 189, 40, 198, 0, 190, 156, 178, 24, 189, 125, 208, 129, 189, 249, 157, 145, 189, 119, 182, 26, 187, 151, 114, 161, 189, 218, 56, 38, 190, 251, 253, 29, 62, 67, 37, 52, 190, 98, 30, 185, 60, 32, 14, 163, 61, 114, 82, 99, 188, 95, 232, 29, 62, 239, 196, 22, 190, 179, 59, 141, 189, 140, 217, 180, 189, 65, 85, 134, 61, 94, 131, 248, 60, 184, 82, 13, 61, 152, 111, 115, 61, 223, 52, 195, 61, 144, 79, 166, 60, 63, 198, 246, 60, 75, 147, 58, 59, 108, 86, 242, 61, 133, 210, 130, 60, 42, 146, 88, 61, 36, 219, 45, 62, 68, 123, 127, 188, 218, 137, 193, 189, 164, 230, 245, 189, 198, 69, 176, 61, 162, 157, 27, 190, 40, 123, 133, 189, 183, 211, 224, 189, 204, 250, 17, 62, 45, 48, 94, 189, 4, 234, 236, 61, 40, 211, 100, 61, 213, 80, 220, 189, 193, 148, 41, 61, 14, 100, 53, 61, 216, 204, 134, 61, 73, 224, 36, 190, 29, 83, 230, 188, 137, 93, 34, 62, 227, 121, 44, 190, 45, 148, 21, 61, 164, 105, 203, 187, 126, 1, 11, 189, 232, 174, 198, 189, 216, 164, 175, 61, 114, 185, 1, 188, 111, 192, 12, 190, 47, 127, 84, 189, 174, 64, 142, 189, 126, 188, 252, 60, 43, 109, 15, 190, 39, 65, 229, 189, 170, 104, 4, 190, 130, 176, 96, 61, 247, 115, 215, 189, 4, 193, 112, 187, 122, 111, 4, 62, 216, 239, 231, 60, 131, 44, 7, 189, 208, 166, 143, 61, 191, 53, 11, 62, 29, 151, 26, 190, 215, 173, 24, 62, 103, 82, 84, 189, 187, 194, 112, 189, 249, 54, 160, 189, 4, 224, 100, 61, 59, 98, 202, 61, 64, 114, 46, 62, 208, 170, 1, 62, 119, 140, 27, 190, 161, 228, 204, 188, 3, 100, 19, 60, 233, 232, 255, 189, 229, 121, 226, 188, 235, 129, 158, 189, 161, 5, 155, 189, 186, 3, 224, 189, 135, 132, 189, 61, 7, 236, 123, 59, 5, 76, 192, 189, 254, 45, 45, 62, 186, 100, 32, 190, 198, 129, 219, 59, 248, 196, 32, 62, 134, 211, 28, 62, 194, 119, 9, 62, 140, 235, 218, 189, 230, 179, 48, 190, 196, 208, 29, 189, 11, 142, 25, 62, 159, 78, 49, 190, 20, 124, 113, 189, 11, 30, 8, 62, 14, 190, 20, 59, 24, 48, 28, 189, 198, 104, 227, 61, 88, 24, 40, 190, 227, 116, 47, 62, 182, 190, 187, 61, 123, 196, 44, 62, 78, 29, 25, 62, 242, 131, 193, 60, 194, 143, 140, 188, 251, 134, 242, 61, 94, 37, 34, 62, 60, 125, 244, 61, 228, 252, 145, 187, 210, 65, 153, 61, 206, 242, 248, 61, 247, 196, 50, 62, 85, 46, 148, 60, 109, 181, 45, 189, 142, 192, 40, 188, 241, 105, 7, 62, 71, 210, 250, 61, 168, 224, 54, 188, 36, 27, 13, 62, 123, 153, 18, 190, 149, 230, 8, 62, 147, 151, 6, 62, 219, 60, 143, 61, 106, 241, 160, 189, 69, 129, 183, 61, 250, 6, 33, 62, 39, 226, 17, 62, 1, 171, 8, 62, 96, 185, 28, 190, 23, 23, 3, 62, 104, 155, 6, 190, 204, 8, 27, 61, 224, 128, 216, 61, 119, 1, 115, 61, 200, 63, 200, 61, 60, 197, 24, 61, 137, 2, 12, 60, 140, 157, 167, 61, 190, 66, 8, 190, 31, 176, 245, 61, 225, 14, 135, 189, 125, 37, 242, 60, 56, 62, 92, 61, 0, 135, 13, 61, 218, 229, 38, 190, 36, 136, 185, 60, 221, 169, 8, 190, 109, 190, 2, 190, 12, 181, 34, 62, 163, 41, 14, 62, 6, 132, 255, 189, 83, 70, 200, 60, 36, 37, 125, 61, 240, 216, 137, 188, 204, 92, 246, 60, 234, 139, 10, 190, 81, 206, 161, 61, 207, 14, 162, 189, 41, 74, 8, 62, 108, 123, 26, 59, 55, 64, 160, 60, 117, 142, 232, 188, 200, 38, 52, 62, 196, 84, 153, 61, 232, 41, 179, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {164, 18, 0, 62, 16, 209, 248, 60, 72, 86, 88, 189, 140, 31, 25, 62, 206, 28, 76, 60, 92, 101, 202, 188, 212, 3, 81, 61, 120, 124, 62, 189, 101, 177, 227, 189, 138, 64, 46, 190, 28, 214, 19, 190, 64, 195, 36, 62, 12, 69, 195, 60, 161, 171, 141, 189, 159, 167, 237, 61, 210, 65, 33, 190, 74, 66, 7, 190, 249, 10, 246, 189, 90, 49, 209, 61, 179, 54, 0, 190, 177, 17, 170, 61, 70, 97, 176, 61, 38, 70, 168, 61, 89, 1, 243, 189, 148, 185, 24, 62, 92, 5, 114, 61, 40, 196, 24, 190, 4, 125, 164, 189, 155, 161, 204, 188, 251, 202, 251, 189, 73, 255, 70, 189, 152, 77, 14, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 158, 41, 190, 232, 241, 175, 189, 131, 185, 73, 60, 206, 82, 213, 61, 41, 219, 23, 190, 206, 52, 254, 61, 170, 181, 39, 190, 9, 109, 9, 62, 120, 252, 177, 189, 188, 180, 250, 189, 91, 140, 209, 189, 7, 95, 137, 60, 163, 122, 91, 61, 212, 107, 167, 61, 235, 156, 39, 61, 155, 39, 205, 61, 179, 95, 41, 188, 211, 166, 27, 190, 86, 57, 88, 61, 54, 245, 35, 62, 103, 131, 35, 62, 95, 217, 135, 189, 12, 33, 200, 189, 69, 100, 230, 189, 121, 142, 172, 61, 190, 235, 227, 61, 197, 139, 20, 62, 173, 218, 197, 187, 41, 62, 57, 188, 227, 48, 43, 190, 83, 82, 170, 189, 55, 134, 30, 190, 223, 27, 47, 190, 170, 47, 42, 189, 17, 194, 85, 189, 113, 4, 112, 61, 48, 214, 18, 190, 191, 136, 5, 62, 130, 236, 248, 60, 147, 229, 45, 62, 118, 141, 92, 189, 222, 106, 224, 61, 69, 117, 2, 61, 96, 147, 204, 60, 87, 162, 63, 61, 138, 54, 197, 60, 136, 202, 19, 62, 0, 228, 172, 188, 123, 198, 193, 189, 29, 156, 108, 61, 138, 170, 136, 60, 169, 212, 173, 60, 121, 239, 200, 189, 3, 253, 74, 188, 111, 228, 100, 60, 223, 6, 45, 61, 64, 255, 39, 61, 244, 54, 187, 189, 218, 157, 33, 62, 71, 167, 171, 189, 188, 222, 254, 189, 206, 63, 162, 60, 245, 50, 47, 190, 164, 33, 220, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 164, 239, 189, 18, 220, 149, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {116, 133, 71, 191, 126, 100, 179, 191, 250, 168, 62, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {12, 88, 94, 190, 213, 91, 59, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0059/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}