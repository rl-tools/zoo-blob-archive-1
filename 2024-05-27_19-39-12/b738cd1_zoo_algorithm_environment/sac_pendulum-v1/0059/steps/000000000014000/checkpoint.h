// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 29, 219, 62, 151, 63, 54, 190, 144, 144, 171, 59, 43, 44, 33, 191, 116, 97, 215, 62, 81, 195, 21, 62, 221, 78, 222, 190, 87, 74, 130, 191, 52, 101, 114, 189, 213, 248, 148, 190, 133, 206, 39, 191, 175, 229, 137, 62, 74, 126, 190, 62, 145, 196, 146, 191, 56, 201, 5, 191, 29, 241, 116, 190, 233, 75, 189, 63, 222, 35, 204, 62, 240, 129, 4, 189, 123, 62, 230, 190, 54, 247, 2, 191, 72, 173, 0, 191, 112, 45, 142, 62, 161, 190, 49, 62, 122, 67, 11, 63, 201, 78, 34, 191, 122, 229, 135, 62, 225, 7, 38, 191, 24, 117, 139, 62, 35, 64, 40, 62, 203, 87, 79, 63, 213, 59, 21, 191, 15, 110, 149, 190, 190, 131, 85, 61, 131, 28, 236, 188, 177, 44, 8, 191, 204, 105, 47, 191, 112, 196, 60, 63, 50, 135, 71, 62, 97, 75, 220, 189, 205, 94, 200, 62, 234, 127, 4, 63, 39, 147, 79, 63, 76, 222, 56, 63, 107, 193, 132, 62, 218, 110, 205, 190, 255, 213, 211, 62, 171, 104, 27, 191, 225, 164, 98, 190, 56, 116, 125, 63, 185, 186, 43, 189, 106, 166, 10, 191, 103, 246, 220, 191, 84, 146, 215, 190, 236, 94, 15, 63, 231, 226, 55, 63, 249, 159, 230, 62, 109, 233, 25, 191, 116, 131, 154, 191, 71, 175, 190, 190, 194, 31, 173, 62, 25, 231, 59, 62, 190, 41, 107, 190, 246, 217, 147, 62, 57, 1, 172, 190, 158, 189, 30, 60, 110, 123, 42, 190, 99, 138, 136, 63, 102, 240, 122, 190, 2, 84, 53, 63, 76, 159, 16, 62, 236, 245, 123, 62, 103, 193, 165, 62, 33, 163, 197, 61, 181, 84, 13, 63, 194, 129, 52, 190, 181, 17, 148, 63, 118, 4, 236, 62, 140, 45, 129, 190, 19, 186, 203, 189, 127, 175, 38, 63, 63, 85, 168, 62, 212, 233, 13, 62, 37, 121, 29, 63, 172, 12, 123, 189, 251, 80, 6, 188, 201, 18, 136, 60, 46, 4, 64, 63, 149, 98, 146, 63, 114, 119, 150, 62, 10, 165, 217, 190, 116, 49, 132, 190, 58, 26, 9, 63, 82, 253, 9, 63, 5, 184, 77, 191, 243, 5, 47, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 126, 25, 191, 111, 147, 65, 63, 205, 12, 35, 63, 46, 91, 249, 62, 6, 177, 210, 190, 248, 55, 5, 191, 146, 213, 132, 62, 205, 21, 72, 63, 69, 250, 151, 62, 46, 11, 92, 63, 71, 117, 8, 63, 38, 175, 83, 191, 63, 112, 151, 62, 77, 114, 141, 190, 211, 110, 253, 190, 93, 21, 125, 190, 91, 186, 167, 190, 210, 177, 200, 61, 233, 219, 37, 62, 231, 83, 71, 188, 200, 102, 172, 189, 123, 91, 1, 191, 245, 70, 241, 62, 211, 54, 107, 191, 198, 116, 100, 62, 167, 63, 8, 191, 232, 47, 156, 190, 128, 175, 179, 190, 183, 241, 134, 190, 166, 217, 251, 189, 73, 116, 131, 190, 106, 28, 205, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 157, 32, 190, 93, 220, 223, 188, 252, 100, 102, 189, 219, 239, 172, 189, 182, 60, 121, 189, 136, 22, 145, 190, 1, 85, 57, 189, 168, 6, 128, 62, 170, 84, 162, 62, 180, 2, 151, 189, 116, 32, 215, 61, 143, 73, 51, 190, 240, 140, 168, 189, 205, 246, 195, 188, 226, 150, 130, 62, 211, 73, 92, 62, 173, 169, 217, 61, 130, 184, 45, 61, 74, 45, 123, 62, 241, 127, 150, 189, 180, 148, 249, 59, 209, 233, 175, 61, 43, 127, 136, 62, 150, 111, 47, 63, 71, 76, 94, 62, 136, 172, 151, 190, 149, 54, 144, 61, 72, 50, 27, 61, 0, 201, 25, 190, 80, 143, 196, 61, 18, 157, 228, 189, 45, 8, 236, 61, 203, 53, 76, 189, 14, 1, 103, 190, 247, 198, 102, 62, 56, 149, 139, 190, 53, 134, 16, 191, 237, 198, 8, 191, 84, 135, 72, 62, 99, 34, 23, 60, 175, 36, 89, 62, 17, 91, 190, 190, 7, 83, 136, 62, 233, 121, 244, 186, 30, 110, 199, 190, 102, 216, 112, 190, 33, 35, 146, 189, 79, 47, 181, 189, 54, 109, 121, 62, 134, 136, 23, 191, 181, 57, 177, 61, 217, 52, 174, 60, 99, 115, 67, 62, 151, 112, 17, 62, 237, 96, 56, 190, 230, 140, 43, 190, 43, 247, 144, 61, 14, 99, 25, 191, 203, 156, 233, 190, 61, 40, 151, 190, 190, 97, 162, 189, 221, 235, 159, 189, 5, 233, 157, 190, 32, 191, 253, 189, 168, 240, 169, 61, 173, 80, 23, 190, 62, 26, 40, 62, 225, 0, 75, 189, 206, 89, 210, 187, 250, 92, 105, 189, 247, 21, 5, 190, 163, 107, 196, 189, 29, 60, 170, 189, 111, 112, 25, 190, 230, 58, 76, 189, 215, 62, 184, 189, 253, 136, 4, 62, 87, 218, 212, 189, 123, 108, 247, 61, 87, 40, 21, 61, 78, 11, 8, 61, 215, 116, 13, 189, 227, 66, 206, 61, 184, 53, 249, 189, 187, 196, 30, 62, 70, 95, 37, 190, 244, 54, 28, 189, 204, 226, 136, 58, 162, 83, 0, 190, 156, 213, 244, 189, 204, 18, 140, 185, 65, 195, 216, 61, 222, 6, 21, 62, 214, 22, 221, 61, 193, 164, 108, 189, 23, 7, 31, 190, 186, 155, 43, 62, 3, 91, 222, 61, 134, 244, 63, 188, 96, 48, 185, 188, 80, 62, 170, 61, 126, 233, 248, 61, 203, 155, 161, 190, 226, 32, 163, 189, 128, 206, 139, 62, 69, 76, 228, 61, 65, 91, 177, 62, 147, 21, 215, 62, 237, 48, 54, 62, 79, 31, 169, 189, 90, 7, 59, 191, 154, 162, 102, 190, 130, 66, 161, 62, 179, 164, 59, 191, 95, 47, 129, 189, 140, 60, 161, 191, 127, 226, 145, 62, 250, 232, 43, 62, 208, 44, 111, 190, 1, 144, 30, 191, 17, 205, 124, 61, 100, 221, 129, 62, 211, 32, 38, 61, 212, 134, 123, 190, 135, 244, 34, 62, 156, 163, 166, 190, 61, 126, 12, 62, 215, 41, 32, 62, 53, 23, 161, 61, 143, 124, 148, 61, 39, 43, 134, 62, 91, 248, 191, 62, 218, 206, 90, 189, 163, 176, 144, 191, 12, 207, 43, 62, 175, 138, 43, 62, 146, 145, 84, 190, 192, 29, 78, 190, 174, 180, 11, 62, 56, 244, 26, 190, 105, 155, 4, 190, 213, 16, 112, 62, 150, 251, 223, 190, 78, 37, 145, 61, 75, 187, 249, 190, 180, 159, 251, 60, 121, 62, 93, 190, 0, 197, 112, 61, 228, 204, 186, 61, 56, 254, 139, 187, 229, 9, 108, 62, 188, 248, 52, 190, 222, 233, 192, 190, 145, 142, 181, 191, 137, 9, 108, 190, 191, 177, 213, 188, 69, 98, 35, 61, 84, 97, 135, 61, 179, 105, 166, 190, 26, 176, 229, 189, 135, 62, 47, 190, 203, 145, 142, 191, 112, 206, 139, 190, 15, 182, 162, 190, 218, 6, 148, 62, 93, 218, 172, 62, 186, 70, 52, 62, 113, 41, 161, 191, 99, 241, 52, 62, 227, 131, 140, 191, 170, 45, 177, 61, 99, 71, 110, 62, 79, 174, 198, 190, 63, 140, 111, 62, 170, 233, 29, 62, 138, 57, 186, 189, 7, 162, 99, 62, 11, 189, 168, 187, 130, 174, 148, 60, 20, 154, 58, 190, 56, 137, 67, 62, 45, 42, 232, 189, 40, 9, 254, 60, 152, 53, 255, 62, 145, 197, 48, 61, 147, 50, 156, 62, 195, 99, 186, 62, 73, 121, 156, 62, 216, 255, 103, 189, 243, 18, 68, 190, 135, 229, 47, 61, 103, 187, 159, 62, 47, 31, 154, 189, 37, 15, 111, 189, 95, 190, 123, 62, 20, 109, 128, 62, 108, 182, 194, 190, 191, 49, 172, 191, 150, 59, 255, 61, 2, 6, 117, 61, 97, 165, 204, 60, 127, 174, 110, 61, 10, 61, 27, 61, 162, 70, 142, 190, 35, 114, 200, 59, 233, 211, 182, 61, 146, 224, 237, 62, 163, 126, 49, 62, 215, 105, 173, 190, 20, 175, 39, 189, 90, 240, 1, 62, 216, 191, 232, 61, 17, 148, 134, 188, 218, 241, 152, 189, 254, 88, 104, 61, 178, 183, 191, 59, 204, 218, 166, 189, 11, 183, 208, 191, 77, 207, 9, 191, 11, 146, 76, 61, 145, 118, 44, 190, 139, 99, 136, 61, 249, 185, 233, 190, 100, 193, 110, 190, 9, 69, 183, 61, 6, 174, 198, 59, 178, 158, 73, 62, 26, 179, 212, 61, 220, 210, 153, 62, 63, 59, 142, 190, 185, 161, 223, 60, 121, 217, 28, 190, 102, 220, 106, 62, 206, 221, 109, 187, 174, 203, 19, 62, 208, 195, 1, 61, 58, 111, 54, 190, 230, 180, 70, 190, 83, 84, 68, 191, 112, 205, 19, 190, 165, 1, 20, 60, 100, 161, 216, 190, 57, 57, 12, 189, 110, 85, 94, 191, 208, 173, 104, 189, 129, 237, 222, 61, 145, 222, 25, 189, 17, 8, 2, 191, 83, 172, 99, 189, 205, 126, 113, 190, 40, 174, 86, 61, 229, 81, 60, 61, 56, 170, 206, 61, 48, 122, 62, 191, 92, 40, 39, 62, 224, 26, 243, 62, 108, 13, 45, 189, 30, 112, 21, 190, 182, 64, 35, 190, 42, 156, 49, 190, 43, 57, 205, 60, 40, 39, 40, 189, 133, 253, 7, 62, 84, 131, 0, 190, 215, 127, 138, 60, 47, 125, 124, 60, 79, 48, 36, 188, 89, 5, 143, 189, 125, 198, 229, 61, 116, 16, 37, 62, 239, 65, 134, 189, 227, 98, 246, 189, 148, 126, 31, 61, 239, 138, 154, 187, 227, 14, 200, 189, 223, 56, 181, 189, 216, 70, 131, 187, 11, 117, 187, 189, 78, 168, 172, 189, 55, 164, 189, 189, 218, 166, 30, 61, 77, 214, 214, 188, 82, 170, 232, 61, 249, 237, 39, 190, 67, 170, 115, 61, 11, 193, 207, 188, 49, 185, 217, 189, 106, 29, 160, 61, 119, 176, 248, 189, 76, 113, 45, 190, 208, 129, 172, 61, 76, 52, 113, 61, 16, 232, 5, 62, 102, 34, 6, 62, 223, 28, 149, 188, 62, 211, 207, 189, 124, 126, 124, 60, 52, 4, 17, 190, 77, 1, 58, 189, 231, 56, 189, 61, 80, 154, 93, 61, 41, 20, 47, 189, 223, 213, 203, 60, 120, 74, 107, 189, 248, 53, 188, 61, 187, 152, 234, 189, 153, 12, 4, 190, 207, 159, 88, 189, 137, 224, 14, 189, 172, 80, 147, 189, 135, 95, 24, 190, 180, 163, 251, 61, 191, 227, 122, 188, 141, 26, 162, 60, 164, 177, 237, 189, 170, 5, 187, 189, 242, 189, 244, 188, 159, 225, 154, 189, 141, 237, 129, 188, 42, 163, 108, 60, 78, 210, 102, 188, 92, 33, 182, 189, 78, 141, 146, 62, 244, 20, 206, 62, 43, 186, 42, 61, 121, 34, 174, 191, 32, 35, 131, 190, 47, 175, 78, 188, 221, 179, 195, 62, 61, 175, 99, 60, 160, 143, 250, 188, 12, 238, 118, 189, 251, 13, 200, 61, 19, 4, 131, 62, 87, 253, 98, 190, 234, 182, 30, 190, 17, 147, 229, 190, 182, 216, 24, 62, 176, 6, 130, 191, 4, 245, 188, 190, 172, 131, 228, 190, 34, 212, 41, 189, 83, 198, 16, 190, 145, 195, 59, 190, 69, 245, 173, 189, 172, 177, 156, 191, 230, 187, 18, 191, 174, 215, 12, 61, 127, 165, 49, 190, 180, 4, 129, 190, 146, 92, 200, 190, 29, 172, 44, 62, 11, 135, 134, 189, 244, 41, 41, 191, 171, 129, 18, 190, 182, 240, 57, 191, 247, 13, 145, 62, 246, 60, 160, 189, 92, 9, 49, 62, 156, 209, 158, 191, 131, 21, 1, 62, 200, 53, 169, 191, 226, 190, 193, 61, 11, 6, 20, 189, 18, 42, 138, 191, 129, 140, 144, 62, 173, 11, 2, 189, 27, 113, 252, 61, 196, 32, 148, 62, 143, 130, 164, 61, 130, 12, 238, 61, 21, 70, 22, 62, 237, 57, 168, 189, 115, 253, 175, 189, 33, 83, 7, 62, 53, 20, 36, 190, 187, 251, 112, 190, 224, 228, 219, 189, 74, 6, 84, 61, 134, 41, 141, 61, 67, 107, 61, 186, 88, 40, 47, 191, 129, 69, 247, 188, 109, 218, 109, 62, 227, 68, 63, 61, 224, 100, 231, 189, 36, 165, 215, 60, 84, 27, 1, 62, 13, 153, 69, 60, 227, 119, 166, 189, 171, 64, 6, 191, 20, 13, 7, 61, 21, 213, 19, 62, 243, 88, 18, 62, 179, 121, 178, 62, 123, 38, 63, 190, 140, 255, 132, 189, 189, 85, 34, 190, 96, 170, 41, 191, 206, 212, 124, 191, 199, 114, 157, 62, 214, 200, 127, 191, 199, 251, 160, 190, 64, 121, 202, 191, 90, 181, 86, 62, 55, 158, 2, 62, 248, 34, 85, 62, 136, 178, 8, 191, 45, 228, 84, 61, 105, 143, 163, 189, 223, 177, 35, 62, 223, 55, 157, 190, 120, 112, 11, 190, 161, 238, 231, 190, 246, 237, 240, 61, 12, 184, 218, 62, 252, 50, 16, 190, 4, 234, 19, 190, 177, 187, 230, 189, 79, 12, 27, 190, 45, 186, 68, 190, 197, 194, 101, 190, 146, 93, 152, 190, 220, 125, 171, 61, 214, 14, 69, 61, 91, 30, 31, 189, 38, 245, 112, 190, 87, 33, 221, 61, 126, 142, 170, 189, 192, 154, 174, 188, 178, 142, 58, 63, 219, 67, 150, 62, 3, 173, 123, 62, 233, 130, 105, 190, 201, 48, 174, 62, 195, 190, 35, 190, 49, 18, 54, 190, 188, 99, 177, 189, 101, 86, 132, 62, 80, 143, 46, 63, 245, 7, 181, 61, 69, 108, 161, 190, 53, 207, 157, 61, 125, 77, 54, 189, 181, 51, 182, 61, 238, 86, 197, 62, 240, 41, 20, 190, 210, 170, 233, 190, 216, 201, 250, 61, 55, 115, 97, 189, 221, 162, 109, 62, 235, 224, 177, 189, 20, 11, 94, 189, 189, 96, 123, 190, 191, 206, 37, 62, 237, 107, 73, 190, 71, 204, 65, 62, 153, 167, 251, 61, 138, 235, 31, 62, 72, 17, 148, 189, 104, 194, 245, 190, 254, 211, 17, 61, 216, 102, 244, 190, 2, 102, 119, 61, 51, 241, 0, 191, 120, 54, 47, 61, 8, 175, 216, 188, 118, 98, 98, 62, 172, 224, 109, 189, 248, 168, 135, 61, 152, 204, 50, 61, 8, 112, 108, 190, 155, 17, 44, 188, 203, 186, 210, 190, 102, 232, 193, 61, 205, 168, 26, 190, 27, 233, 238, 189, 13, 205, 18, 190, 30, 21, 161, 60, 87, 13, 92, 62, 246, 113, 213, 188, 236, 9, 244, 61, 59, 2, 4, 190, 39, 73, 227, 186, 112, 28, 145, 189, 105, 237, 198, 61, 138, 159, 234, 61, 22, 160, 6, 190, 248, 22, 244, 61, 105, 41, 215, 189, 1, 38, 241, 189, 217, 18, 81, 190, 173, 60, 52, 190, 190, 155, 34, 190, 255, 36, 142, 61, 62, 200, 210, 61, 210, 27, 222, 61, 232, 249, 142, 189, 71, 100, 26, 190, 20, 162, 235, 61, 71, 153, 69, 189, 194, 166, 25, 62, 179, 121, 29, 189, 247, 150, 62, 189, 148, 104, 153, 60, 64, 176, 155, 61, 3, 72, 159, 189, 84, 171, 125, 189, 8, 184, 77, 188, 177, 122, 22, 61, 236, 128, 18, 61, 91, 238, 188, 61, 109, 121, 97, 189, 209, 221, 74, 62, 114, 123, 81, 60, 73, 151, 131, 61, 131, 9, 133, 190, 241, 148, 33, 191, 38, 98, 46, 62, 156, 168, 150, 61, 124, 15, 126, 61, 111, 221, 60, 189, 157, 103, 139, 60, 111, 24, 105, 61, 205, 112, 185, 61, 225, 67, 18, 190, 151, 83, 5, 189, 56, 176, 43, 62, 10, 131, 242, 190, 120, 228, 19, 190, 6, 15, 193, 61, 109, 83, 201, 61, 117, 34, 201, 61, 106, 230, 200, 61, 182, 52, 32, 61, 136, 137, 57, 190, 6, 27, 15, 61, 141, 139, 4, 191, 46, 52, 150, 189, 10, 175, 115, 189, 245, 228, 7, 62, 152, 211, 151, 189, 224, 122, 141, 190, 117, 117, 51, 190, 162, 124, 163, 188, 91, 85, 9, 62, 247, 248, 94, 59, 128, 119, 139, 189, 184, 194, 186, 190, 178, 40, 157, 190, 20, 212, 111, 62, 73, 236, 5, 190, 242, 177, 14, 62, 95, 254, 221, 61, 41, 43, 172, 188, 170, 77, 206, 190, 234, 63, 157, 61, 89, 191, 145, 190, 208, 136, 153, 62, 146, 163, 0, 62, 240, 200, 132, 190, 101, 51, 180, 189, 35, 162, 163, 62, 16, 86, 239, 62, 192, 122, 67, 60, 27, 89, 213, 189, 33, 124, 168, 62, 219, 200, 122, 62, 220, 160, 96, 61, 98, 170, 15, 191, 7, 111, 140, 189, 239, 231, 174, 189, 222, 148, 238, 61, 77, 203, 176, 62, 100, 222, 195, 190, 120, 6, 245, 190, 77, 177, 216, 189, 11, 91, 84, 189, 240, 200, 211, 62, 80, 166, 67, 62, 223, 63, 252, 189, 121, 104, 34, 62, 49, 73, 25, 189, 239, 180, 153, 60, 125, 162, 201, 61, 57, 45, 51, 62, 254, 113, 64, 62, 41, 94, 160, 190, 56, 127, 66, 62, 119, 151, 56, 190, 71, 170, 148, 191, 54, 174, 222, 189, 87, 231, 119, 62, 92, 223, 205, 61, 82, 251, 136, 190, 5, 223, 182, 61, 88, 102, 123, 190, 5, 214, 127, 61, 44, 228, 162, 61, 151, 48, 22, 191, 180, 56, 125, 62, 13, 64, 210, 189, 58, 184, 234, 189, 185, 161, 112, 190, 11, 244, 248, 189, 48, 155, 233, 190, 148, 63, 31, 61, 101, 12, 143, 62, 54, 192, 253, 188, 34, 11, 226, 189, 165, 248, 169, 62, 56, 156, 57, 190, 12, 70, 155, 189, 116, 241, 126, 190, 187, 203, 132, 62, 126, 116, 159, 61, 92, 65, 175, 188, 123, 44, 167, 61, 73, 178, 65, 62, 195, 106, 239, 59, 214, 138, 155, 190, 85, 22, 166, 61, 142, 63, 204, 190, 228, 50, 44, 189, 159, 26, 131, 190, 176, 110, 25, 189, 16, 67, 188, 61, 39, 39, 140, 60, 242, 153, 4, 62, 55, 185, 57, 61, 78, 252, 28, 190, 136, 237, 149, 190, 223, 32, 144, 58, 64, 240, 91, 190, 253, 171, 148, 189, 185, 179, 215, 61, 240, 153, 21, 190, 71, 74, 239, 189, 17, 92, 50, 190, 247, 149, 231, 61, 182, 219, 21, 190, 252, 140, 24, 191, 7, 0, 172, 189, 133, 122, 120, 190, 177, 244, 38, 62, 62, 203, 219, 190, 182, 139, 47, 188, 78, 85, 21, 191, 168, 101, 242, 60, 83, 91, 23, 191, 91, 16, 160, 62, 19, 57, 29, 188, 128, 54, 172, 191, 122, 137, 116, 189, 40, 163, 229, 189, 158, 233, 228, 188, 180, 181, 245, 61, 200, 244, 175, 189, 94, 204, 16, 62, 113, 193, 132, 59, 45, 201, 146, 61, 253, 159, 114, 189, 145, 218, 74, 62, 146, 110, 72, 62, 144, 249, 122, 61, 14, 118, 181, 190, 105, 250, 70, 190, 173, 89, 132, 189, 221, 201, 3, 190, 16, 130, 128, 188, 15, 16, 24, 190, 242, 64, 107, 62, 112, 201, 181, 60, 2, 164, 134, 62, 69, 234, 1, 187, 206, 206, 17, 191, 149, 193, 17, 189, 152, 142, 150, 60, 78, 173, 18, 62, 155, 102, 191, 62, 142, 105, 37, 191, 99, 64, 131, 61, 235, 34, 128, 190, 186, 134, 9, 59, 177, 5, 0, 63, 116, 81, 88, 190, 3, 219, 63, 61, 184, 46, 181, 61, 123, 72, 174, 61, 107, 89, 165, 189, 125, 86, 12, 189, 44, 185, 141, 61, 202, 102, 208, 61, 119, 185, 112, 61, 203, 163, 95, 62, 3, 171, 130, 190, 172, 53, 174, 190, 141, 162, 74, 189, 133, 18, 3, 191, 74, 108, 134, 190, 246, 81, 248, 59, 245, 20, 188, 62, 11, 44, 33, 191, 13, 250, 74, 190, 201, 97, 1, 189, 123, 114, 42, 62, 57, 205, 32, 190, 74, 198, 32, 190, 14, 145, 131, 62, 254, 36, 191, 189, 36, 242, 147, 61, 67, 44, 13, 190, 48, 23, 77, 62, 36, 144, 233, 61, 97, 73, 181, 61, 187, 86, 170, 189, 8, 148, 218, 189, 37, 37, 43, 189, 56, 102, 12, 63, 8, 163, 150, 190, 251, 144, 151, 62, 209, 24, 35, 62, 50, 89, 75, 62, 57, 29, 116, 190, 7, 56, 189, 60, 250, 32, 5, 189, 146, 204, 222, 189, 248, 83, 53, 63, 157, 131, 181, 187, 218, 28, 185, 189, 64, 161, 224, 189, 41, 7, 83, 62, 232, 173, 26, 62, 32, 137, 17, 62, 11, 192, 31, 62, 32, 195, 255, 61, 90, 87, 37, 62, 237, 172, 185, 190, 140, 62, 174, 62, 118, 118, 82, 62, 186, 243, 202, 62, 159, 114, 27, 62, 122, 243, 229, 188, 114, 199, 41, 189, 73, 103, 163, 62, 204, 65, 156, 61, 151, 6, 57, 62, 34, 43, 167, 62, 203, 205, 171, 190, 251, 10, 138, 189, 158, 204, 200, 62, 167, 42, 79, 62, 3, 171, 243, 190, 149, 197, 132, 62, 18, 106, 5, 190, 30, 29, 8, 61, 17, 163, 50, 188, 60, 85, 17, 190, 129, 23, 50, 191, 51, 37, 157, 62, 45, 108, 165, 62, 147, 131, 135, 62, 109, 249, 83, 62, 254, 5, 81, 62, 43, 198, 103, 188, 126, 74, 122, 190, 128, 57, 13, 62, 65, 32, 132, 62, 242, 232, 195, 187, 11, 100, 218, 59, 209, 170, 97, 189, 165, 82, 166, 61, 68, 32, 203, 62, 163, 164, 161, 62, 159, 29, 239, 189, 171, 237, 61, 61, 247, 230, 93, 60, 120, 30, 98, 62, 37, 43, 162, 59, 154, 41, 130, 62, 240, 160, 213, 61, 66, 99, 89, 189, 44, 170, 27, 191, 111, 82, 29, 61, 221, 103, 68, 62, 51, 37, 16, 191, 50, 44, 100, 190, 69, 131, 32, 191, 137, 6, 45, 188, 211, 87, 30, 62, 158, 85, 91, 190, 86, 162, 86, 191, 195, 175, 18, 62, 247, 115, 212, 62, 111, 37, 0, 62, 8, 20, 103, 190, 134, 206, 66, 189, 159, 194, 29, 191, 16, 243, 110, 62, 185, 45, 251, 62, 53, 191, 84, 189, 157, 96, 32, 189, 19, 86, 229, 61, 192, 205, 67, 62, 166, 98, 57, 62, 86, 118, 201, 62, 195, 20, 192, 61, 243, 190, 23, 61, 215, 57, 116, 62, 233, 120, 85, 188, 28, 33, 90, 62, 173, 249, 231, 188, 203, 83, 129, 62, 90, 248, 151, 189, 254, 110, 21, 191, 223, 93, 9, 190, 0, 45, 14, 189, 26, 155, 156, 189, 172, 84, 175, 61, 223, 120, 173, 189, 92, 58, 104, 190, 96, 147, 168, 189, 6, 227, 162, 190, 132, 142, 230, 190, 252, 137, 134, 62, 58, 63, 180, 62, 224, 93, 175, 62, 186, 155, 84, 190, 208, 9, 253, 61, 6, 121, 45, 190, 205, 46, 130, 61, 144, 155, 54, 62, 185, 228, 16, 61, 104, 202, 204, 189, 133, 96, 14, 190, 75, 9, 223, 190, 98, 133, 243, 187, 24, 105, 186, 190, 215, 241, 127, 62, 147, 113, 58, 188, 190, 161, 130, 191, 199, 247, 37, 189, 54, 210, 50, 61, 169, 15, 72, 62, 137, 101, 147, 62, 119, 203, 249, 190, 169, 138, 129, 61, 242, 16, 56, 62, 179, 202, 117, 62, 187, 161, 144, 189, 63, 60, 0, 61, 249, 86, 117, 62, 147, 9, 61, 187, 40, 198, 0, 190, 78, 141, 98, 61, 6, 121, 105, 190, 250, 169, 218, 190, 253, 100, 145, 190, 169, 116, 248, 190, 53, 163, 4, 191, 251, 253, 29, 62, 74, 47, 116, 190, 0, 86, 244, 190, 103, 124, 153, 187, 134, 146, 81, 188, 62, 46, 135, 62, 139, 163, 6, 190, 18, 222, 239, 189, 55, 224, 2, 191, 106, 220, 182, 189, 204, 232, 179, 188, 11, 209, 240, 61, 237, 154, 28, 62, 70, 54, 52, 62, 144, 238, 137, 61, 85, 120, 70, 189, 236, 204, 52, 61, 204, 150, 141, 61, 88, 204, 82, 190, 40, 45, 158, 60, 249, 7, 158, 62, 170, 113, 231, 190, 243, 94, 168, 189, 100, 244, 54, 190, 89, 63, 245, 61, 251, 28, 28, 190, 91, 235, 35, 62, 69, 95, 235, 62, 139, 129, 225, 61, 65, 31, 83, 190, 38, 201, 185, 61, 1, 173, 155, 189, 253, 70, 220, 189, 208, 15, 155, 60, 198, 163, 82, 61, 155, 3, 14, 61, 78, 228, 34, 190, 186, 152, 205, 61, 163, 161, 167, 189, 72, 1, 139, 189, 20, 200, 108, 61, 100, 216, 169, 186, 170, 218, 209, 190, 71, 204, 142, 61, 56, 111, 94, 62, 124, 170, 175, 58, 33, 40, 39, 62, 80, 101, 76, 62, 225, 107, 224, 189, 50, 46, 8, 190, 242, 57, 80, 191, 106, 236, 90, 191, 242, 35, 22, 62, 88, 26, 111, 191, 215, 26, 142, 190, 20, 82, 204, 191, 36, 148, 174, 62, 107, 1, 19, 61, 47, 77, 144, 61, 77, 35, 13, 191, 78, 19, 53, 62, 239, 62, 80, 189, 93, 169, 24, 62, 44, 146, 157, 190, 215, 182, 112, 189, 108, 54, 201, 190, 35, 189, 193, 61, 24, 34, 230, 62, 64, 114, 46, 62, 184, 75, 174, 61, 40, 224, 52, 190, 163, 65, 83, 189, 139, 74, 166, 188, 4, 57, 22, 190, 245, 100, 123, 189, 114, 136, 236, 189, 7, 152, 219, 189, 27, 102, 6, 190, 168, 4, 113, 61, 60, 116, 0, 189, 143, 217, 242, 189, 73, 34, 24, 62, 110, 129, 53, 190, 148, 53, 227, 188, 74, 2, 232, 61, 22, 167, 0, 62, 132, 141, 216, 61, 94, 192, 8, 190, 70, 189, 82, 190, 196, 208, 29, 189, 210, 186, 224, 61, 204, 154, 70, 190, 81, 94, 171, 189, 91, 53, 226, 61, 199, 127, 153, 188, 138, 162, 115, 189, 198, 104, 227, 61, 222, 26, 75, 190, 110, 147, 25, 62, 213, 237, 129, 61, 84, 0, 46, 62, 2, 193, 67, 62, 210, 47, 14, 61, 245, 145, 51, 189, 130, 183, 171, 189, 177, 134, 95, 61, 98, 49, 73, 61, 35, 86, 180, 60, 97, 230, 66, 62, 131, 205, 250, 61, 181, 85, 15, 62, 12, 69, 9, 190, 202, 158, 37, 186, 105, 149, 134, 188, 255, 246, 233, 186, 8, 90, 244, 60, 229, 101, 12, 62, 255, 132, 164, 188, 211, 42, 218, 189, 45, 152, 158, 61, 14, 164, 131, 61, 70, 224, 87, 61, 71, 122, 14, 61, 43, 250, 30, 63, 50, 199, 11, 62, 169, 53, 55, 61, 210, 19, 0, 62, 140, 179, 116, 190, 57, 1, 3, 62, 105, 188, 218, 189, 143, 220, 73, 61, 180, 166, 56, 61, 119, 1, 115, 61, 40, 228, 192, 61, 14, 201, 33, 62, 213, 44, 137, 62, 15, 135, 250, 189, 208, 52, 161, 191, 32, 169, 42, 62, 133, 189, 87, 189, 114, 203, 76, 58, 175, 94, 194, 188, 157, 93, 85, 61, 182, 217, 158, 190, 160, 224, 31, 61, 76, 33, 132, 189, 142, 18, 92, 188, 197, 148, 82, 62, 193, 87, 130, 190, 46, 189, 128, 189, 4, 10, 179, 188, 5, 19, 215, 61, 124, 244, 182, 60, 61, 168, 209, 58, 66, 178, 17, 190, 193, 106, 92, 190, 106, 22, 39, 190, 138, 171, 131, 191, 133, 224, 198, 190, 215, 14, 52, 189, 117, 142, 232, 188, 94, 122, 96, 62, 192, 111, 159, 190, 39, 77, 92, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 29, 173, 62, 6, 248, 35, 62, 72, 86, 88, 189, 29, 101, 236, 61, 214, 10, 189, 61, 109, 58, 16, 190, 23, 20, 38, 62, 138, 15, 129, 188, 161, 30, 10, 190, 138, 64, 46, 190, 184, 57, 2, 190, 227, 154, 141, 60, 224, 99, 125, 62, 248, 191, 34, 190, 112, 23, 3, 62, 0, 178, 57, 190, 79, 3, 176, 189, 42, 52, 47, 189, 155, 44, 166, 62, 56, 102, 161, 189, 210, 75, 29, 62, 119, 15, 242, 61, 79, 123, 169, 61, 142, 241, 42, 190, 226, 37, 212, 61, 7, 144, 120, 62, 52, 81, 86, 190, 242, 107, 241, 61, 131, 111, 134, 62, 96, 118, 49, 190, 162, 231, 194, 61, 82, 183, 134, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 101, 129, 190, 216, 235, 193, 190, 131, 185, 73, 60, 21, 91, 251, 62, 236, 106, 194, 190, 76, 98, 78, 63, 0, 72, 40, 191, 50, 1, 153, 63, 155, 154, 131, 189, 188, 180, 250, 189, 29, 12, 112, 191, 24, 94, 229, 62, 86, 178, 114, 63, 128, 50, 113, 190, 151, 203, 58, 62, 124, 135, 170, 61, 200, 179, 21, 189, 88, 126, 217, 190, 148, 223, 3, 63, 104, 132, 211, 61, 34, 5, 200, 62, 4, 235, 187, 190, 43, 140, 8, 190, 54, 170, 5, 191, 79, 21, 78, 63, 104, 9, 159, 62, 215, 47, 142, 62, 160, 214, 122, 189, 83, 96, 85, 63, 151, 12, 28, 190, 136, 49, 244, 188, 81, 100, 240, 190, 125, 81, 178, 190, 170, 188, 94, 191, 17, 194, 85, 189, 98, 230, 43, 190, 132, 144, 115, 189, 193, 237, 231, 62, 221, 42, 177, 61, 128, 119, 18, 63, 187, 23, 118, 189, 222, 106, 224, 61, 62, 207, 183, 62, 25, 8, 94, 189, 244, 174, 75, 190, 216, 4, 199, 62, 251, 208, 158, 60, 33, 26, 94, 188, 123, 148, 8, 189, 66, 186, 86, 62, 38, 59, 80, 62, 88, 90, 2, 189, 236, 127, 203, 190, 51, 154, 221, 189, 80, 69, 10, 60, 68, 165, 68, 61, 167, 93, 5, 63, 98, 52, 68, 190, 34, 231, 66, 62, 147, 123, 93, 190, 216, 164, 191, 190, 157, 103, 11, 61, 172, 253, 13, 190, 113, 232, 98, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {248, 99, 29, 190, 251, 130, 178, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {103, 251, 154, 189, 210, 110, 21, 191, 153, 30, 29, 64};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {231, 108, 253, 63, 48, 127, 53, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0059/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}