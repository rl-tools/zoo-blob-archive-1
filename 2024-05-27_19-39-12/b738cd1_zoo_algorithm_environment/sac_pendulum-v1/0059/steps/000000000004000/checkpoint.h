// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 29, 219, 62, 151, 63, 54, 190, 144, 144, 171, 59, 87, 239, 177, 190, 102, 102, 50, 63, 46, 20, 217, 61, 208, 236, 214, 190, 102, 177, 79, 191, 104, 25, 178, 189, 108, 83, 233, 190, 174, 240, 10, 191, 102, 224, 155, 62, 247, 209, 49, 62, 201, 3, 81, 191, 180, 203, 21, 191, 54, 191, 34, 191, 87, 137, 1, 62, 32, 30, 26, 63, 130, 0, 44, 61, 195, 172, 23, 190, 56, 94, 41, 191, 16, 137, 150, 190, 221, 21, 6, 63, 59, 86, 0, 62, 190, 68, 4, 63, 72, 212, 215, 190, 229, 200, 140, 62, 27, 80, 14, 191, 238, 134, 182, 62, 40, 218, 46, 62, 166, 205, 77, 63, 33, 4, 67, 190, 143, 123, 134, 190, 176, 77, 76, 190, 46, 164, 68, 62, 202, 121, 15, 191, 237, 145, 3, 191, 171, 176, 56, 63, 252, 31, 58, 61, 71, 151, 239, 189, 149, 152, 18, 190, 51, 221, 21, 63, 116, 136, 49, 63, 115, 219, 3, 63, 239, 128, 132, 62, 88, 63, 217, 190, 150, 56, 163, 62, 199, 26, 40, 191, 101, 228, 139, 190, 70, 72, 98, 63, 179, 250, 25, 61, 72, 196, 132, 190, 129, 208, 154, 191, 209, 249, 241, 190, 62, 137, 17, 63, 72, 18, 211, 62, 181, 220, 249, 62, 45, 115, 7, 191, 160, 232, 71, 189, 135, 109, 21, 191, 48, 33, 30, 62, 253, 240, 23, 63, 242, 142, 142, 190, 246, 217, 147, 62, 57, 1, 172, 190, 158, 189, 30, 60, 161, 35, 87, 190, 159, 63, 77, 63, 76, 24, 75, 190, 201, 22, 146, 62, 81, 98, 235, 188, 223, 128, 198, 62, 198, 222, 74, 62, 157, 76, 186, 190, 28, 185, 34, 63, 104, 160, 14, 191, 112, 153, 179, 60, 117, 5, 252, 62, 134, 204, 148, 190, 58, 239, 230, 189, 153, 173, 47, 63, 128, 232, 35, 62, 7, 173, 60, 190, 67, 254, 36, 63, 172, 12, 123, 189, 251, 80, 6, 188, 201, 18, 136, 60, 252, 93, 9, 63, 177, 166, 67, 63, 27, 124, 186, 62, 231, 61, 95, 190, 166, 209, 127, 190, 89, 43, 25, 63, 215, 176, 220, 62, 104, 2, 39, 191, 232, 105, 245, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 126, 25, 191, 11, 151, 57, 63, 166, 239, 20, 63, 25, 167, 182, 62, 135, 156, 198, 190, 215, 162, 8, 191, 233, 110, 157, 62, 22, 164, 51, 63, 197, 11, 240, 62, 104, 8, 46, 63, 101, 132, 9, 63, 223, 133, 60, 191, 238, 189, 136, 62, 179, 22, 157, 190, 69, 212, 222, 190, 193, 143, 108, 190, 78, 154, 246, 189, 167, 106, 131, 62, 62, 152, 35, 62, 38, 97, 153, 190, 32, 4, 250, 61, 123, 91, 1, 191, 54, 51, 248, 62, 175, 48, 0, 191, 96, 94, 192, 62, 178, 167, 245, 190, 33, 67, 66, 190, 137, 188, 208, 190, 183, 241, 134, 190, 128, 86, 39, 189, 76, 12, 13, 190, 185, 228, 225, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 157, 32, 190, 188, 253, 219, 188, 70, 73, 196, 189, 10, 184, 156, 189, 254, 249, 247, 186, 197, 1, 55, 190, 138, 45, 136, 188, 95, 93, 121, 62, 128, 53, 74, 62, 40, 66, 142, 189, 158, 54, 119, 61, 35, 1, 43, 190, 125, 137, 13, 190, 165, 228, 200, 60, 136, 105, 73, 62, 47, 148, 124, 62, 178, 59, 12, 190, 82, 55, 236, 61, 17, 193, 114, 62, 77, 20, 92, 189, 36, 54, 132, 60, 209, 233, 175, 61, 231, 88, 50, 62, 61, 238, 135, 61, 134, 31, 69, 62, 253, 232, 89, 190, 106, 77, 160, 61, 71, 117, 227, 61, 0, 201, 25, 190, 200, 210, 211, 60, 147, 249, 221, 189, 226, 39, 176, 61, 203, 53, 76, 189, 130, 96, 26, 187, 224, 7, 100, 190, 254, 137, 243, 190, 31, 239, 26, 190, 185, 136, 254, 189, 224, 173, 84, 62, 106, 13, 24, 62, 170, 226, 24, 189, 13, 253, 174, 189, 45, 239, 219, 61, 67, 5, 206, 61, 112, 225, 145, 190, 217, 30, 158, 61, 69, 102, 153, 189, 244, 95, 143, 189, 241, 9, 150, 62, 75, 67, 75, 190, 202, 60, 5, 62, 32, 93, 176, 189, 109, 187, 73, 62, 151, 112, 17, 62, 82, 247, 23, 61, 20, 217, 203, 60, 1, 129, 222, 188, 161, 220, 158, 189, 144, 87, 143, 190, 237, 195, 163, 60, 190, 97, 162, 189, 74, 64, 109, 189, 57, 175, 133, 190, 110, 231, 129, 190, 168, 240, 169, 61, 173, 80, 23, 190, 62, 26, 40, 62, 225, 0, 75, 189, 206, 89, 210, 187, 250, 92, 105, 189, 247, 21, 5, 190, 163, 107, 196, 189, 29, 60, 170, 189, 111, 112, 25, 190, 230, 58, 76, 189, 215, 62, 184, 189, 253, 136, 4, 62, 87, 218, 212, 189, 123, 108, 247, 61, 87, 40, 21, 61, 78, 11, 8, 61, 215, 116, 13, 189, 227, 66, 206, 61, 184, 53, 249, 189, 187, 196, 30, 62, 70, 95, 37, 190, 244, 54, 28, 189, 204, 226, 136, 58, 162, 83, 0, 190, 156, 213, 244, 189, 204, 18, 140, 185, 65, 195, 216, 61, 222, 6, 21, 62, 214, 22, 221, 61, 193, 164, 108, 189, 23, 7, 31, 190, 186, 155, 43, 62, 15, 74, 208, 61, 218, 108, 7, 62, 60, 117, 5, 61, 190, 179, 86, 62, 151, 150, 138, 61, 167, 1, 164, 190, 100, 12, 175, 189, 159, 96, 145, 62, 190, 120, 227, 61, 234, 186, 191, 62, 237, 109, 62, 62, 65, 187, 211, 61, 152, 195, 37, 190, 160, 64, 236, 190, 202, 197, 153, 190, 150, 68, 102, 62, 28, 176, 6, 190, 54, 97, 159, 188, 201, 156, 191, 190, 110, 144, 232, 61, 250, 232, 43, 62, 70, 42, 105, 190, 109, 125, 137, 190, 225, 208, 223, 61, 37, 207, 78, 62, 167, 180, 150, 59, 96, 104, 152, 190, 135, 244, 34, 62, 70, 235, 251, 189, 217, 164, 150, 61, 25, 215, 29, 62, 53, 23, 161, 61, 122, 156, 0, 62, 63, 219, 64, 62, 46, 81, 43, 62, 253, 11, 49, 189, 139, 144, 195, 190, 123, 126, 57, 62, 45, 184, 50, 62, 163, 220, 220, 190, 125, 170, 53, 190, 203, 144, 240, 61, 0, 51, 35, 190, 195, 133, 33, 190, 197, 254, 39, 61, 22, 29, 75, 190, 37, 174, 199, 61, 19, 100, 204, 190, 34, 104, 134, 60, 119, 122, 89, 62, 53, 26, 190, 61, 87, 218, 10, 62, 56, 254, 139, 187, 218, 121, 138, 62, 152, 53, 179, 187, 212, 15, 227, 190, 197, 185, 46, 191, 244, 20, 160, 190, 233, 8, 249, 189, 69, 98, 35, 61, 10, 196, 16, 62, 130, 166, 196, 190, 188, 192, 28, 190, 135, 62, 47, 190, 105, 140, 80, 191, 80, 157, 131, 61, 236, 139, 19, 190, 180, 65, 129, 62, 168, 208, 134, 61, 121, 11, 239, 61, 85, 107, 66, 191, 93, 90, 93, 62, 158, 114, 241, 190, 96, 163, 95, 60, 86, 175, 31, 62, 175, 0, 247, 190, 196, 134, 16, 190, 227, 100, 7, 62, 123, 174, 50, 190, 214, 168, 67, 190, 220, 24, 41, 62, 34, 58, 195, 189, 162, 224, 30, 189, 42, 180, 211, 188, 45, 42, 232, 189, 237, 234, 205, 189, 40, 146, 145, 61, 107, 66, 222, 188, 207, 25, 34, 61, 218, 246, 17, 61, 244, 195, 39, 189, 216, 255, 103, 189, 98, 244, 177, 188, 26, 59, 153, 190, 252, 116, 177, 62, 47, 31, 154, 189, 57, 173, 126, 60, 146, 234, 46, 62, 62, 91, 74, 60, 231, 33, 161, 190, 93, 219, 18, 191, 121, 119, 28, 62, 29, 253, 250, 61, 150, 87, 50, 190, 145, 10, 190, 61, 161, 116, 248, 187, 55, 201, 155, 190, 126, 101, 112, 186, 89, 190, 71, 60, 51, 181, 212, 62, 107, 228, 20, 62, 198, 177, 91, 190, 125, 174, 129, 189, 123, 176, 128, 62, 177, 23, 239, 61, 208, 235, 17, 61, 218, 241, 152, 189, 182, 103, 36, 62, 155, 38, 2, 61, 34, 252, 85, 190, 218, 231, 95, 191, 79, 81, 3, 191, 1, 233, 161, 61, 145, 118, 44, 190, 134, 211, 211, 61, 231, 130, 164, 190, 91, 223, 98, 190, 9, 69, 183, 61, 248, 54, 37, 62, 72, 114, 57, 60, 136, 36, 123, 61, 28, 114, 68, 62, 160, 161, 185, 189, 62, 85, 139, 61, 173, 249, 172, 189, 216, 223, 153, 61, 130, 125, 175, 61, 18, 200, 227, 61, 114, 138, 159, 59, 95, 49, 18, 189, 226, 70, 8, 190, 155, 27, 60, 190, 125, 210, 43, 190, 198, 122, 136, 61, 178, 133, 71, 190, 209, 115, 52, 61, 52, 210, 142, 190, 136, 226, 191, 189, 129, 237, 222, 61, 199, 73, 84, 61, 102, 127, 71, 190, 234, 59, 143, 189, 218, 67, 121, 60, 240, 74, 232, 61, 135, 169, 121, 59, 56, 170, 206, 61, 87, 119, 115, 190, 20, 142, 66, 62, 169, 116, 109, 62, 108, 13, 45, 189, 30, 112, 21, 190, 182, 64, 35, 190, 42, 156, 49, 190, 43, 57, 205, 60, 40, 39, 40, 189, 133, 253, 7, 62, 84, 131, 0, 190, 215, 127, 138, 60, 47, 125, 124, 60, 79, 48, 36, 188, 89, 5, 143, 189, 125, 198, 229, 61, 116, 16, 37, 62, 239, 65, 134, 189, 227, 98, 246, 189, 148, 126, 31, 61, 239, 138, 154, 187, 227, 14, 200, 189, 223, 56, 181, 189, 216, 70, 131, 187, 11, 117, 187, 189, 78, 168, 172, 189, 55, 164, 189, 189, 218, 166, 30, 61, 77, 214, 214, 188, 82, 170, 232, 61, 249, 237, 39, 190, 67, 170, 115, 61, 11, 193, 207, 188, 49, 185, 217, 189, 106, 29, 160, 61, 119, 176, 248, 189, 76, 113, 45, 190, 208, 129, 172, 61, 76, 52, 113, 61, 16, 232, 5, 62, 102, 34, 6, 62, 223, 28, 149, 188, 62, 211, 207, 189, 124, 126, 124, 60, 52, 4, 17, 190, 77, 1, 58, 189, 231, 56, 189, 61, 80, 154, 93, 61, 41, 20, 47, 189, 223, 213, 203, 60, 120, 74, 107, 189, 248, 53, 188, 61, 187, 152, 234, 189, 153, 12, 4, 190, 207, 159, 88, 189, 137, 224, 14, 189, 172, 80, 147, 189, 135, 95, 24, 190, 180, 163, 251, 61, 191, 227, 122, 188, 141, 26, 162, 60, 164, 177, 237, 189, 170, 5, 187, 189, 242, 189, 244, 188, 159, 225, 154, 189, 141, 237, 129, 188, 42, 163, 108, 60, 78, 210, 102, 188, 181, 20, 23, 62, 193, 42, 142, 62, 236, 87, 111, 62, 59, 148, 242, 189, 23, 175, 61, 191, 78, 142, 59, 190, 13, 10, 20, 62, 171, 40, 28, 190, 241, 168, 37, 62, 67, 26, 93, 190, 120, 251, 208, 188, 87, 32, 28, 62, 49, 172, 43, 190, 213, 61, 77, 190, 104, 13, 46, 62, 219, 67, 3, 191, 172, 120, 85, 62, 241, 153, 149, 190, 182, 132, 185, 61, 63, 68, 130, 190, 34, 212, 41, 189, 169, 64, 114, 189, 95, 231, 7, 61, 6, 10, 165, 190, 193, 253, 34, 191, 160, 203, 82, 191, 199, 135, 114, 190, 127, 165, 49, 190, 44, 243, 66, 190, 189, 170, 38, 191, 23, 47, 129, 189, 11, 135, 134, 189, 197, 111, 169, 190, 242, 108, 132, 61, 248, 137, 155, 190, 37, 203, 135, 62, 246, 60, 160, 189, 224, 58, 246, 61, 42, 175, 16, 191, 77, 161, 143, 62, 129, 229, 58, 191, 156, 123, 248, 60, 238, 74, 178, 189, 200, 30, 67, 191, 122, 241, 12, 62, 201, 16, 133, 60, 35, 213, 50, 61, 26, 237, 20, 61, 71, 240, 56, 62, 204, 136, 16, 184, 111, 56, 89, 62, 198, 60, 109, 190, 115, 253, 175, 189, 46, 112, 23, 61, 195, 214, 34, 190, 155, 238, 146, 189, 224, 228, 219, 189, 201, 201, 176, 188, 131, 54, 32, 190, 67, 107, 61, 186, 72, 190, 88, 190, 57, 104, 137, 190, 23, 8, 131, 62, 227, 68, 63, 61, 78, 173, 129, 189, 211, 177, 207, 61, 253, 173, 90, 62, 145, 171, 121, 62, 170, 143, 161, 188, 3, 9, 237, 190, 231, 14, 129, 61, 55, 128, 196, 61, 182, 238, 93, 62, 236, 30, 140, 62, 174, 142, 205, 189, 242, 107, 242, 60, 71, 131, 253, 189, 64, 221, 183, 190, 158, 187, 100, 191, 81, 13, 33, 62, 90, 242, 188, 190, 149, 33, 145, 190, 141, 164, 6, 191, 67, 118, 154, 187, 55, 158, 2, 62, 186, 176, 52, 61, 138, 149, 154, 190, 63, 197, 219, 61, 167, 48, 137, 59, 227, 57, 104, 62, 247, 227, 137, 190, 120, 112, 11, 190, 202, 86, 133, 190, 28, 205, 21, 62, 203, 173, 170, 62, 252, 50, 16, 190, 8, 235, 5, 190, 117, 82, 173, 61, 212, 83, 27, 190, 42, 125, 55, 189, 80, 169, 15, 189, 201, 176, 250, 189, 219, 119, 172, 61, 57, 169, 20, 190, 18, 93, 130, 185, 72, 196, 81, 190, 255, 60, 214, 61, 55, 156, 98, 188, 54, 247, 201, 61, 42, 182, 180, 62, 237, 56, 222, 61, 208, 96, 9, 61, 80, 180, 32, 60, 240, 42, 95, 62, 72, 212, 15, 61, 135, 160, 2, 190, 188, 99, 177, 189, 98, 174, 23, 188, 204, 169, 148, 62, 64, 24, 92, 58, 131, 12, 254, 189, 94, 192, 240, 61, 166, 252, 148, 189, 181, 51, 182, 61, 162, 186, 36, 62, 50, 17, 174, 189, 241, 101, 181, 189, 216, 201, 250, 61, 93, 82, 96, 190, 19, 67, 114, 61, 141, 9, 251, 189, 162, 218, 19, 189, 237, 65, 192, 60, 253, 172, 211, 61, 160, 161, 156, 190, 70, 97, 50, 62, 39, 90, 2, 189, 179, 174, 213, 61, 221, 111, 162, 189, 11, 243, 161, 190, 105, 58, 76, 61, 7, 105, 95, 190, 251, 228, 246, 60, 190, 15, 182, 190, 120, 21, 134, 188, 131, 110, 164, 189, 27, 29, 13, 62, 135, 213, 14, 190, 248, 168, 135, 61, 185, 57, 162, 189, 206, 24, 83, 61, 112, 56, 19, 59, 192, 242, 51, 190, 212, 63, 236, 61, 58, 51, 21, 190, 27, 233, 238, 189, 222, 122, 95, 60, 16, 241, 178, 188, 16, 35, 125, 62, 246, 113, 213, 188, 175, 57, 246, 61, 84, 64, 3, 190, 39, 73, 227, 186, 184, 138, 132, 189, 105, 237, 198, 61, 226, 155, 0, 62, 129, 120, 6, 190, 248, 22, 244, 61, 124, 218, 213, 189, 231, 102, 230, 189, 159, 73, 72, 190, 173, 60, 52, 190, 190, 155, 34, 190, 255, 36, 142, 61, 141, 144, 240, 61, 222, 5, 228, 61, 112, 151, 132, 189, 71, 100, 26, 190, 40, 72, 246, 61, 119, 123, 49, 189, 194, 166, 25, 62, 127, 212, 226, 188, 247, 150, 62, 189, 148, 104, 153, 60, 64, 176, 155, 61, 3, 72, 159, 189, 84, 171, 125, 189, 8, 184, 77, 188, 177, 122, 22, 61, 236, 128, 18, 61, 239, 80, 191, 61, 109, 121, 97, 189, 143, 19, 109, 62, 152, 125, 152, 188, 219, 94, 230, 189, 37, 250, 16, 190, 34, 184, 159, 190, 33, 93, 130, 62, 61, 94, 180, 61, 72, 9, 167, 57, 1, 149, 144, 189, 107, 148, 208, 61, 175, 149, 78, 60, 84, 10, 115, 189, 212, 121, 100, 189, 207, 199, 161, 60, 160, 120, 36, 62, 218, 236, 190, 190, 164, 2, 80, 189, 82, 181, 53, 62, 128, 63, 151, 61, 151, 226, 53, 62, 106, 230, 200, 61, 176, 104, 38, 62, 126, 175, 107, 60, 122, 127, 166, 189, 65, 215, 58, 190, 158, 158, 16, 189, 66, 75, 158, 59, 245, 228, 7, 62, 160, 122, 35, 61, 154, 113, 138, 190, 19, 31, 191, 189, 162, 124, 163, 188, 54, 1, 243, 61, 16, 200, 155, 59, 15, 68, 37, 188, 108, 84, 153, 190, 206, 190, 40, 188, 41, 1, 150, 62, 203, 255, 5, 190, 3, 231, 2, 62, 42, 222, 205, 61, 207, 83, 58, 61, 141, 231, 241, 190, 221, 182, 17, 61, 222, 168, 58, 59, 139, 83, 116, 62, 233, 142, 5, 61, 46, 138, 209, 190, 9, 60, 222, 189, 107, 204, 144, 62, 168, 87, 182, 62, 161, 99, 35, 61, 27, 89, 213, 189, 190, 100, 24, 62, 197, 121, 155, 61, 111, 121, 186, 187, 38, 72, 103, 190, 140, 79, 132, 61, 154, 248, 142, 60, 222, 148, 238, 61, 159, 196, 89, 62, 205, 199, 113, 190, 138, 212, 179, 190, 77, 177, 216, 189, 224, 1, 36, 190, 224, 132, 238, 61, 154, 57, 235, 61, 223, 241, 40, 187, 142, 98, 97, 62, 236, 130, 51, 189, 191, 190, 206, 189, 18, 192, 171, 61, 23, 136, 30, 61, 166, 196, 16, 62, 170, 67, 228, 188, 200, 26, 53, 62, 49, 119, 190, 189, 165, 40, 7, 191, 172, 78, 150, 59, 238, 55, 72, 62, 173, 171, 207, 61, 2, 55, 107, 190, 62, 166, 137, 61, 2, 185, 67, 190, 5, 214, 127, 61, 41, 150, 142, 61, 104, 179, 39, 190, 94, 145, 141, 62, 20, 48, 57, 61, 226, 101, 222, 187, 222, 144, 67, 190, 11, 244, 248, 189, 53, 17, 50, 190, 131, 177, 0, 62, 231, 40, 77, 62, 54, 192, 253, 188, 208, 41, 67, 190, 176, 226, 79, 62, 148, 254, 71, 190, 158, 215, 11, 189, 104, 248, 40, 189, 230, 105, 80, 62, 17, 68, 83, 61, 31, 172, 229, 60, 71, 60, 64, 188, 138, 104, 61, 62, 106, 170, 180, 59, 134, 205, 41, 190, 107, 248, 188, 61, 145, 215, 54, 190, 201, 253, 154, 189, 4, 73, 19, 190, 55, 37, 148, 189, 16, 64, 227, 61, 46, 47, 57, 189, 16, 39, 162, 61, 55, 185, 57, 61, 13, 165, 122, 190, 188, 156, 4, 190, 105, 160, 118, 61, 187, 239, 8, 60, 66, 44, 42, 189, 208, 246, 2, 62, 240, 153, 21, 190, 97, 235, 173, 61, 227, 122, 78, 190, 89, 219, 27, 62, 182, 219, 21, 190, 109, 77, 187, 190, 145, 150, 202, 61, 196, 90, 223, 60, 191, 191, 90, 62, 209, 94, 93, 190, 209, 17, 127, 189, 202, 36, 188, 190, 28, 51, 162, 61, 148, 28, 105, 190, 242, 148, 115, 62, 197, 254, 79, 189, 25, 53, 6, 191, 110, 116, 247, 60, 12, 159, 0, 190, 74, 26, 169, 189, 77, 145, 225, 189, 181, 95, 219, 60, 3, 141, 183, 61, 34, 20, 97, 61, 182, 64, 118, 189, 253, 159, 114, 189, 46, 91, 140, 61, 160, 81, 37, 62, 135, 197, 13, 62, 98, 33, 46, 190, 237, 142, 169, 189, 126, 208, 50, 61, 221, 201, 3, 190, 59, 36, 158, 60, 203, 187, 171, 189, 12, 228, 126, 62, 112, 201, 181, 60, 214, 60, 101, 61, 88, 251, 165, 61, 47, 184, 61, 190, 110, 96, 43, 60, 200, 74, 151, 190, 28, 239, 52, 62, 252, 107, 38, 62, 251, 158, 23, 189, 90, 194, 248, 189, 96, 50, 6, 190, 16, 90, 117, 59, 43, 57, 106, 61, 190, 245, 103, 189, 155, 189, 155, 62, 240, 193, 204, 61, 222, 126, 18, 190, 253, 135, 112, 188, 225, 203, 151, 61, 99, 81, 227, 61, 235, 69, 238, 61, 119, 185, 112, 61, 181, 221, 180, 61, 43, 38, 133, 61, 65, 157, 2, 190, 244, 8, 173, 190, 178, 108, 239, 189, 173, 215, 128, 62, 246, 81, 248, 59, 171, 45, 104, 62, 88, 159, 8, 190, 181, 88, 32, 189, 201, 97, 1, 189, 242, 180, 72, 62, 38, 180, 13, 190, 118, 207, 32, 190, 49, 235, 43, 62, 55, 14, 71, 60, 175, 182, 16, 62, 179, 119, 252, 189, 91, 98, 63, 62, 57, 88, 23, 62, 148, 144, 186, 61, 178, 195, 161, 188, 35, 27, 228, 189, 62, 51, 153, 61, 78, 119, 253, 62, 72, 143, 105, 190, 133, 99, 206, 61, 78, 106, 235, 61, 179, 207, 133, 62, 234, 110, 14, 190, 133, 131, 58, 61, 250, 32, 5, 189, 7, 12, 77, 190, 178, 51, 215, 62, 199, 196, 63, 60, 230, 74, 126, 60, 205, 13, 67, 189, 223, 227, 153, 62, 232, 173, 26, 62, 232, 170, 109, 61, 86, 80, 107, 62, 165, 201, 149, 61, 90, 87, 37, 62, 57, 70, 113, 190, 215, 65, 166, 62, 209, 80, 64, 61, 235, 152, 21, 62, 236, 19, 206, 61, 211, 8, 211, 189, 140, 169, 131, 60, 1, 228, 5, 62, 12, 187, 10, 62, 98, 69, 235, 185, 133, 59, 26, 189, 14, 79, 144, 190, 253, 65, 48, 190, 13, 16, 119, 61, 121, 94, 237, 60, 199, 13, 164, 189, 120, 80, 211, 61, 119, 227, 40, 190, 94, 93, 37, 189, 204, 152, 179, 189, 60, 85, 17, 190, 65, 235, 226, 190, 86, 154, 11, 190, 243, 32, 54, 62, 126, 248, 71, 62, 29, 7, 155, 61, 3, 226, 180, 61, 43, 198, 103, 188, 210, 134, 140, 190, 231, 145, 144, 60, 116, 163, 163, 59, 242, 232, 195, 187, 65, 131, 251, 187, 99, 32, 130, 188, 12, 241, 109, 60, 211, 15, 166, 62, 228, 141, 68, 62, 161, 211, 173, 189, 190, 251, 18, 61, 104, 189, 152, 188, 192, 5, 74, 62, 95, 29, 33, 188, 215, 114, 115, 62, 34, 225, 146, 189, 73, 235, 229, 189, 128, 31, 73, 190, 32, 60, 39, 189, 22, 20, 49, 189, 160, 80, 133, 190, 179, 50, 66, 190, 173, 237, 114, 190, 253, 79, 171, 188, 211, 87, 30, 62, 75, 146, 51, 190, 79, 219, 96, 190, 228, 219, 251, 61, 210, 187, 161, 62, 188, 46, 151, 61, 33, 71, 171, 190, 134, 206, 66, 189, 231, 76, 168, 190, 156, 158, 61, 62, 42, 120, 136, 62, 53, 191, 84, 189, 95, 27, 18, 190, 254, 95, 37, 61, 140, 184, 84, 62, 191, 173, 68, 62, 55, 192, 74, 62, 73, 134, 122, 60, 182, 45, 25, 189, 147, 222, 147, 62, 183, 84, 231, 189, 228, 83, 78, 62, 174, 202, 62, 61, 203, 11, 177, 61, 131, 140, 87, 190, 143, 121, 11, 191, 191, 201, 194, 189, 137, 233, 184, 189, 30, 50, 2, 190, 26, 130, 236, 188, 36, 42, 127, 190, 67, 173, 30, 190, 96, 147, 168, 189, 55, 81, 64, 190, 166, 96, 92, 190, 1, 194, 119, 62, 131, 66, 32, 62, 69, 57, 132, 62, 18, 41, 156, 190, 208, 9, 253, 61, 107, 144, 66, 190, 197, 83, 167, 188, 119, 154, 34, 62, 185, 228, 16, 61, 189, 142, 7, 61, 166, 136, 83, 190, 155, 80, 110, 190, 97, 79, 130, 189, 206, 47, 221, 188, 228, 88, 131, 62, 181, 36, 11, 62, 160, 66, 13, 191, 29, 28, 107, 61, 47, 54, 91, 61, 106, 139, 99, 62, 30, 114, 194, 62, 23, 180, 56, 190, 190, 232, 19, 62, 166, 182, 68, 62, 22, 189, 209, 62, 141, 203, 211, 189, 218, 59, 101, 62, 241, 35, 116, 62, 10, 236, 23, 61, 40, 198, 0, 190, 42, 8, 0, 62, 112, 141, 96, 190, 82, 24, 147, 190, 121, 184, 40, 62, 85, 219, 148, 190, 144, 246, 197, 190, 251, 253, 29, 62, 249, 72, 111, 60, 71, 181, 167, 190, 199, 242, 189, 189, 134, 146, 81, 188, 38, 254, 109, 62, 222, 252, 19, 190, 91, 74, 67, 189, 105, 231, 224, 189, 111, 47, 141, 61, 89, 101, 136, 61, 211, 40, 220, 61, 197, 251, 219, 61, 204, 240, 30, 62, 211, 71, 125, 61, 255, 229, 89, 60, 3, 188, 165, 60, 160, 201, 234, 61, 73, 13, 51, 190, 234, 206, 193, 61, 166, 162, 51, 62, 108, 96, 59, 60, 130, 25, 147, 189, 6, 185, 211, 189, 44, 78, 16, 62, 251, 28, 28, 190, 22, 97, 157, 61, 175, 114, 95, 190, 74, 5, 19, 62, 193, 24, 138, 189, 9, 94, 239, 61, 172, 107, 203, 59, 253, 70, 220, 189, 51, 104, 119, 61, 28, 207, 57, 61, 94, 21, 186, 61, 78, 228, 34, 190, 126, 160, 42, 62, 91, 150, 138, 61, 74, 88, 195, 60, 209, 240, 21, 189, 223, 35, 0, 60, 137, 134, 11, 191, 88, 203, 227, 61, 139, 85, 91, 62, 210, 21, 219, 61, 109, 237, 242, 188, 189, 25, 52, 190, 146, 208, 126, 189, 197, 103, 251, 189, 93, 31, 30, 191, 121, 49, 117, 191, 113, 110, 107, 60, 239, 124, 199, 190, 114, 66, 129, 190, 87, 103, 4, 191, 245, 153, 140, 189, 107, 1, 19, 61, 240, 194, 92, 61, 155, 125, 109, 190, 59, 163, 124, 62, 63, 41, 25, 189, 31, 176, 68, 62, 110, 76, 141, 190, 215, 182, 112, 189, 148, 106, 146, 190, 79, 218, 242, 61, 12, 206, 135, 62, 64, 114, 46, 62, 170, 221, 222, 61, 228, 59, 50, 190, 63, 210, 3, 189, 139, 74, 166, 188, 233, 232, 255, 189, 245, 100, 123, 189, 229, 100, 188, 189, 124, 57, 172, 189, 240, 149, 223, 189, 168, 4, 113, 61, 60, 116, 0, 189, 217, 44, 193, 189, 254, 45, 45, 62, 186, 100, 32, 190, 148, 53, 227, 188, 5, 105, 10, 62, 22, 167, 0, 62, 192, 164, 6, 62, 94, 192, 8, 190, 70, 189, 82, 190, 196, 208, 29, 189, 184, 249, 239, 61, 159, 78, 49, 190, 38, 21, 126, 189, 11, 30, 8, 62, 14, 190, 20, 59, 24, 48, 28, 189, 198, 104, 227, 61, 233, 191, 43, 190, 227, 116, 47, 62, 213, 237, 129, 61, 84, 0, 46, 62, 125, 76, 118, 62, 12, 84, 101, 60, 196, 24, 247, 60, 185, 249, 90, 61, 75, 219, 47, 62, 234, 222, 241, 61, 240, 28, 160, 61, 255, 64, 228, 61, 75, 181, 58, 62, 217, 179, 29, 62, 65, 158, 101, 189, 243, 78, 131, 188, 120, 37, 18, 60, 187, 233, 118, 60, 61, 27, 252, 61, 119, 86, 86, 189, 177, 123, 12, 62, 149, 189, 203, 189, 49, 215, 249, 61, 223, 235, 19, 62, 70, 224, 87, 61, 161, 137, 173, 60, 187, 11, 222, 60, 252, 79, 40, 62, 59, 35, 17, 62, 164, 107, 17, 62, 221, 92, 44, 190, 57, 1, 3, 62, 61, 21, 179, 189, 120, 17, 63, 61, 190, 72, 105, 61, 119, 1, 115, 61, 105, 215, 44, 62, 223, 9, 145, 61, 97, 186, 124, 61, 95, 104, 220, 189, 253, 216, 25, 191, 223, 122, 76, 62, 116, 48, 87, 188, 176, 162, 48, 190, 154, 82, 3, 58, 178, 189, 131, 60, 200, 81, 169, 190, 240, 184, 91, 189, 162, 103, 14, 190, 110, 216, 150, 189, 96, 95, 101, 62, 247, 132, 191, 189, 127, 129, 122, 189, 94, 104, 110, 61, 234, 144, 0, 62, 110, 193, 188, 61, 61, 168, 209, 58, 222, 175, 224, 59, 119, 210, 97, 61, 78, 31, 165, 190, 204, 18, 217, 190, 188, 240, 180, 190, 166, 21, 24, 61, 117, 142, 232, 188, 194, 62, 107, 62, 9, 120, 90, 190, 94, 49, 247, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {216, 170, 139, 62, 144, 216, 233, 61, 72, 86, 88, 189, 244, 115, 55, 62, 16, 127, 230, 61, 41, 35, 60, 189, 59, 106, 38, 62, 218, 137, 48, 189, 161, 30, 10, 190, 138, 64, 46, 190, 163, 92, 20, 190, 236, 79, 128, 61, 187, 54, 129, 62, 61, 29, 123, 190, 247, 34, 219, 187, 169, 87, 54, 190, 109, 108, 236, 58, 23, 24, 68, 189, 199, 245, 25, 62, 28, 159, 25, 190, 206, 113, 10, 62, 44, 175, 34, 62, 171, 18, 191, 61, 160, 137, 17, 190, 130, 190, 18, 62, 128, 166, 80, 62, 2, 144, 33, 190, 62, 21, 191, 61, 51, 167, 137, 62, 114, 170, 26, 190, 75, 49, 192, 61, 128, 68, 141, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {100, 87, 117, 190, 7, 110, 150, 190, 131, 185, 73, 60, 152, 63, 190, 62, 185, 86, 206, 190, 89, 89, 215, 62, 253, 73, 43, 191, 231, 39, 104, 62, 155, 154, 131, 189, 188, 180, 250, 189, 58, 69, 19, 191, 208, 23, 108, 62, 124, 241, 44, 63, 203, 136, 70, 60, 155, 215, 46, 62, 5, 181, 170, 61, 40, 95, 76, 190, 160, 34, 142, 190, 194, 84, 223, 61, 207, 14, 20, 62, 255, 198, 176, 62, 205, 24, 57, 190, 161, 57, 36, 190, 169, 108, 83, 190, 184, 155, 195, 62, 153, 90, 178, 62, 240, 99, 172, 62, 15, 98, 227, 60, 2, 47, 49, 63, 65, 207, 32, 190, 37, 184, 35, 186, 252, 20, 23, 191, 134, 146, 167, 190, 78, 167, 1, 190, 17, 194, 85, 189, 215, 229, 136, 61, 67, 66, 65, 190, 9, 122, 139, 62, 115, 222, 219, 61, 156, 91, 160, 60, 187, 23, 118, 189, 222, 106, 224, 61, 31, 85, 222, 61, 166, 218, 72, 189, 245, 48, 68, 62, 226, 88, 85, 62, 81, 87, 100, 61, 207, 199, 95, 188, 61, 233, 78, 189, 44, 62, 19, 62, 199, 236, 45, 189, 88, 160, 188, 59, 131, 246, 61, 190, 13, 241, 179, 61, 97, 236, 213, 61, 31, 199, 4, 62, 169, 153, 94, 62, 81, 174, 0, 190, 206, 64, 129, 62, 196, 227, 9, 190, 124, 53, 233, 189, 2, 218, 248, 60, 92, 212, 81, 190, 66, 38, 210, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 18, 186, 189, 216, 213, 137, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {197, 3, 148, 61, 42, 95, 48, 191, 98, 139, 36, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {56, 239, 226, 63, 212, 179, 35, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0059/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}