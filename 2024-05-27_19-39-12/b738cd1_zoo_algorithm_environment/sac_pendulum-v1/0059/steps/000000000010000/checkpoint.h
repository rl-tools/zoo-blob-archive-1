// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 29, 219, 62, 151, 63, 54, 190, 144, 144, 171, 59, 159, 241, 24, 191, 122, 155, 194, 62, 194, 91, 6, 62, 81, 29, 214, 190, 40, 79, 124, 191, 47, 7, 96, 189, 255, 152, 153, 190, 29, 111, 21, 191, 204, 100, 174, 62, 204, 15, 197, 62, 236, 89, 135, 191, 73, 111, 12, 191, 8, 90, 161, 190, 24, 29, 171, 63, 42, 52, 231, 62, 113, 248, 72, 188, 83, 59, 12, 191, 213, 218, 16, 191, 8, 216, 239, 190, 208, 240, 139, 62, 12, 140, 31, 62, 102, 107, 23, 63, 55, 126, 6, 191, 136, 138, 142, 62, 210, 20, 38, 191, 167, 29, 124, 62, 44, 20, 23, 62, 217, 210, 86, 63, 139, 246, 250, 190, 95, 56, 125, 190, 140, 117, 47, 189, 126, 194, 21, 189, 129, 65, 7, 191, 197, 236, 20, 191, 17, 204, 75, 63, 214, 91, 25, 62, 183, 47, 71, 190, 38, 157, 147, 62, 243, 52, 7, 63, 138, 31, 78, 63, 73, 72, 23, 63, 204, 113, 131, 62, 156, 86, 191, 190, 13, 128, 180, 62, 73, 119, 29, 191, 239, 72, 120, 190, 25, 149, 130, 63, 60, 30, 182, 60, 17, 197, 6, 191, 6, 14, 209, 191, 80, 54, 234, 190, 124, 238, 16, 63, 255, 40, 25, 63, 226, 251, 217, 62, 52, 60, 36, 191, 24, 156, 119, 191, 88, 233, 197, 190, 114, 57, 170, 62, 119, 78, 149, 62, 26, 6, 135, 190, 246, 217, 147, 62, 57, 1, 172, 190, 158, 189, 30, 60, 31, 111, 35, 190, 5, 234, 131, 63, 127, 110, 124, 190, 213, 21, 4, 63, 242, 182, 62, 61, 62, 81, 127, 62, 175, 24, 186, 62, 127, 104, 11, 62, 65, 38, 21, 63, 236, 142, 159, 190, 22, 198, 144, 63, 110, 65, 214, 62, 80, 186, 80, 190, 131, 109, 48, 60, 192, 97, 38, 63, 17, 90, 30, 62, 252, 38, 180, 60, 6, 4, 29, 63, 172, 12, 123, 189, 251, 80, 6, 188, 201, 18, 136, 60, 142, 47, 65, 63, 254, 209, 128, 63, 234, 217, 134, 62, 46, 245, 157, 190, 97, 141, 20, 190, 64, 198, 13, 63, 17, 239, 13, 63, 44, 129, 41, 191, 22, 171, 40, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 126, 25, 191, 199, 133, 64, 63, 38, 237, 43, 63, 73, 12, 224, 62, 217, 156, 192, 190, 189, 194, 19, 191, 79, 240, 143, 62, 74, 42, 71, 63, 157, 238, 184, 62, 69, 18, 85, 63, 23, 31, 14, 63, 140, 86, 77, 191, 215, 65, 146, 62, 195, 51, 118, 190, 143, 101, 247, 190, 216, 12, 152, 190, 143, 82, 142, 190, 244, 170, 186, 61, 32, 170, 71, 62, 23, 189, 92, 190, 135, 34, 163, 189, 123, 91, 1, 191, 106, 179, 241, 62, 33, 147, 98, 191, 88, 180, 141, 62, 43, 168, 5, 191, 132, 12, 179, 190, 155, 5, 214, 190, 183, 241, 134, 190, 5, 188, 188, 189, 221, 25, 138, 190, 117, 181, 229, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 157, 32, 190, 197, 197, 12, 187, 187, 181, 129, 189, 42, 79, 176, 189, 187, 17, 35, 189, 67, 114, 75, 190, 231, 64, 171, 188, 26, 51, 140, 62, 76, 25, 162, 62, 44, 212, 100, 189, 211, 153, 235, 61, 88, 70, 28, 190, 46, 13, 124, 189, 30, 31, 139, 188, 193, 12, 136, 62, 81, 94, 119, 62, 114, 62, 125, 186, 114, 90, 77, 61, 138, 21, 132, 62, 127, 225, 141, 189, 191, 116, 112, 60, 209, 233, 175, 61, 143, 137, 137, 62, 189, 186, 165, 62, 170, 69, 95, 62, 153, 232, 102, 190, 10, 212, 117, 61, 155, 8, 131, 61, 0, 201, 25, 190, 32, 146, 208, 61, 144, 50, 3, 190, 233, 0, 243, 61, 203, 53, 76, 189, 57, 154, 77, 190, 73, 6, 118, 62, 218, 142, 82, 190, 68, 142, 198, 190, 130, 178, 42, 191, 216, 136, 102, 62, 78, 55, 249, 60, 142, 62, 93, 62, 167, 36, 180, 190, 145, 3, 133, 62, 123, 102, 56, 188, 109, 170, 255, 190, 255, 136, 250, 189, 101, 103, 120, 189, 39, 171, 212, 189, 99, 162, 59, 62, 177, 71, 230, 190, 110, 179, 201, 61, 195, 177, 8, 190, 184, 122, 49, 62, 151, 112, 17, 62, 189, 119, 38, 190, 168, 123, 70, 190, 180, 222, 158, 61, 75, 59, 40, 191, 162, 2, 161, 190, 19, 199, 85, 57, 190, 97, 162, 189, 174, 118, 163, 189, 26, 43, 69, 190, 105, 0, 7, 190, 168, 240, 169, 61, 173, 80, 23, 190, 62, 26, 40, 62, 225, 0, 75, 189, 206, 89, 210, 187, 250, 92, 105, 189, 247, 21, 5, 190, 163, 107, 196, 189, 29, 60, 170, 189, 111, 112, 25, 190, 230, 58, 76, 189, 215, 62, 184, 189, 253, 136, 4, 62, 87, 218, 212, 189, 123, 108, 247, 61, 87, 40, 21, 61, 78, 11, 8, 61, 215, 116, 13, 189, 227, 66, 206, 61, 184, 53, 249, 189, 187, 196, 30, 62, 70, 95, 37, 190, 244, 54, 28, 189, 204, 226, 136, 58, 162, 83, 0, 190, 156, 213, 244, 189, 204, 18, 140, 185, 65, 195, 216, 61, 222, 6, 21, 62, 214, 22, 221, 61, 193, 164, 108, 189, 23, 7, 31, 190, 186, 155, 43, 62, 112, 219, 233, 61, 1, 119, 61, 189, 116, 10, 14, 189, 59, 127, 217, 61, 150, 215, 77, 61, 235, 51, 200, 190, 76, 176, 162, 189, 94, 44, 146, 62, 225, 64, 243, 61, 32, 125, 173, 62, 161, 248, 199, 61, 210, 119, 10, 62, 227, 198, 233, 189, 251, 124, 36, 191, 151, 120, 167, 190, 210, 108, 191, 62, 25, 201, 7, 191, 165, 219, 42, 189, 67, 242, 88, 191, 246, 197, 136, 62, 250, 232, 43, 62, 162, 182, 86, 190, 34, 247, 218, 190, 110, 209, 167, 61, 101, 250, 55, 62, 81, 115, 188, 60, 24, 22, 130, 190, 135, 244, 34, 62, 186, 114, 140, 190, 35, 124, 227, 61, 72, 126, 17, 62, 53, 23, 161, 61, 0, 92, 210, 61, 209, 5, 128, 62, 136, 220, 186, 62, 116, 194, 141, 189, 42, 230, 136, 191, 169, 102, 35, 62, 146, 131, 53, 62, 30, 25, 155, 190, 198, 19, 46, 190, 17, 92, 154, 61, 109, 154, 16, 190, 75, 4, 9, 190, 169, 166, 160, 62, 129, 155, 196, 190, 28, 145, 173, 61, 112, 146, 1, 191, 66, 110, 145, 60, 226, 36, 137, 189, 216, 64, 117, 61, 239, 255, 210, 61, 56, 254, 139, 187, 149, 213, 107, 62, 180, 114, 208, 189, 127, 92, 144, 190, 238, 148, 177, 191, 193, 237, 185, 189, 178, 3, 182, 61, 69, 98, 35, 61, 124, 180, 78, 60, 58, 131, 39, 190, 118, 42, 81, 190, 135, 62, 47, 190, 44, 198, 128, 191, 182, 166, 73, 190, 112, 193, 114, 190, 196, 215, 153, 62, 38, 71, 172, 62, 247, 192, 54, 62, 23, 44, 143, 191, 114, 55, 70, 62, 69, 137, 120, 191, 202, 205, 176, 61, 108, 207, 110, 62, 8, 25, 241, 190, 105, 97, 118, 62, 91, 248, 91, 62, 247, 164, 203, 189, 4, 109, 162, 61, 102, 198, 151, 61, 209, 94, 143, 61, 228, 236, 202, 189, 13, 252, 38, 62, 45, 42, 232, 189, 201, 20, 91, 60, 35, 90, 1, 63, 116, 153, 151, 61, 208, 165, 155, 62, 87, 37, 190, 62, 79, 26, 161, 62, 216, 255, 103, 189, 200, 204, 152, 189, 159, 95, 76, 61, 145, 110, 169, 62, 47, 31, 154, 189, 29, 253, 154, 189, 196, 216, 147, 62, 253, 17, 136, 62, 156, 227, 192, 190, 81, 135, 160, 191, 113, 134, 35, 62, 27, 83, 90, 61, 108, 18, 95, 60, 204, 79, 32, 61, 207, 16, 29, 61, 226, 113, 133, 190, 108, 195, 103, 60, 28, 57, 251, 61, 104, 112, 204, 62, 167, 236, 53, 62, 191, 231, 185, 190, 150, 86, 149, 189, 43, 221, 222, 61, 12, 8, 188, 61, 175, 83, 242, 59, 218, 241, 152, 189, 198, 108, 67, 61, 37, 227, 170, 190, 246, 105, 221, 189, 47, 226, 198, 191, 68, 164, 243, 190, 191, 156, 64, 61, 145, 118, 44, 190, 8, 77, 83, 60, 190, 29, 167, 190, 61, 221, 104, 190, 9, 69, 183, 61, 25, 242, 163, 61, 234, 111, 28, 62, 152, 2, 184, 61, 79, 97, 85, 62, 75, 181, 137, 190, 126, 138, 145, 60, 155, 4, 244, 189, 89, 240, 91, 62, 6, 253, 86, 61, 97, 117, 255, 61, 51, 33, 80, 60, 203, 129, 219, 189, 134, 158, 31, 190, 253, 172, 49, 191, 254, 225, 3, 190, 45, 118, 90, 62, 234, 78, 162, 190, 158, 84, 27, 189, 221, 15, 53, 191, 197, 23, 13, 189, 129, 237, 222, 61, 191, 196, 29, 61, 195, 71, 150, 190, 120, 221, 120, 189, 125, 113, 59, 190, 102, 248, 157, 61, 149, 108, 253, 60, 56, 170, 206, 61, 126, 196, 47, 191, 52, 80, 62, 62, 88, 118, 221, 62, 108, 13, 45, 189, 30, 112, 21, 190, 182, 64, 35, 190, 42, 156, 49, 190, 43, 57, 205, 60, 40, 39, 40, 189, 133, 253, 7, 62, 84, 131, 0, 190, 215, 127, 138, 60, 47, 125, 124, 60, 79, 48, 36, 188, 89, 5, 143, 189, 125, 198, 229, 61, 116, 16, 37, 62, 239, 65, 134, 189, 227, 98, 246, 189, 148, 126, 31, 61, 239, 138, 154, 187, 227, 14, 200, 189, 223, 56, 181, 189, 216, 70, 131, 187, 11, 117, 187, 189, 78, 168, 172, 189, 55, 164, 189, 189, 218, 166, 30, 61, 77, 214, 214, 188, 82, 170, 232, 61, 249, 237, 39, 190, 67, 170, 115, 61, 11, 193, 207, 188, 49, 185, 217, 189, 106, 29, 160, 61, 119, 176, 248, 189, 76, 113, 45, 190, 208, 129, 172, 61, 76, 52, 113, 61, 16, 232, 5, 62, 102, 34, 6, 62, 223, 28, 149, 188, 62, 211, 207, 189, 124, 126, 124, 60, 52, 4, 17, 190, 77, 1, 58, 189, 231, 56, 189, 61, 80, 154, 93, 61, 41, 20, 47, 189, 223, 213, 203, 60, 120, 74, 107, 189, 248, 53, 188, 61, 187, 152, 234, 189, 153, 12, 4, 190, 207, 159, 88, 189, 137, 224, 14, 189, 172, 80, 147, 189, 135, 95, 24, 190, 180, 163, 251, 61, 191, 227, 122, 188, 141, 26, 162, 60, 164, 177, 237, 189, 170, 5, 187, 189, 242, 189, 244, 188, 159, 225, 154, 189, 141, 237, 129, 188, 42, 163, 108, 60, 78, 210, 102, 188, 233, 138, 56, 61, 171, 96, 159, 62, 253, 253, 199, 62, 192, 114, 55, 188, 32, 187, 174, 191, 229, 95, 97, 190, 144, 139, 150, 61, 226, 143, 129, 62, 106, 235, 240, 61, 215, 87, 6, 190, 11, 252, 121, 189, 102, 29, 56, 62, 70, 150, 103, 62, 60, 141, 41, 190, 191, 35, 130, 189, 203, 109, 4, 191, 229, 148, 80, 62, 54, 248, 96, 191, 60, 17, 66, 190, 51, 3, 141, 190, 34, 212, 41, 189, 180, 171, 0, 190, 27, 9, 49, 190, 73, 217, 255, 189, 163, 130, 155, 191, 15, 30, 19, 191, 48, 8, 31, 61, 127, 165, 49, 190, 173, 88, 142, 190, 72, 221, 188, 190, 210, 90, 119, 61, 11, 135, 134, 189, 238, 183, 17, 191, 117, 156, 232, 189, 245, 39, 24, 191, 233, 36, 137, 62, 246, 60, 160, 189, 46, 201, 24, 62, 200, 130, 132, 191, 66, 191, 71, 62, 109, 163, 155, 191, 31, 107, 187, 61, 107, 176, 110, 189, 18, 65, 141, 191, 129, 140, 144, 62, 168, 25, 243, 61, 122, 4, 182, 61, 253, 12, 58, 62, 152, 167, 213, 61, 99, 84, 151, 62, 104, 124, 46, 62, 189, 69, 253, 189, 115, 253, 175, 189, 226, 148, 194, 61, 53, 20, 36, 190, 228, 200, 240, 189, 224, 228, 219, 189, 74, 6, 84, 61, 134, 41, 141, 61, 67, 107, 61, 186, 158, 22, 255, 190, 129, 69, 247, 188, 40, 120, 123, 62, 227, 68, 63, 61, 134, 89, 194, 189, 63, 95, 85, 188, 96, 244, 10, 62, 171, 100, 18, 62, 205, 3, 22, 190, 160, 214, 13, 191, 201, 249, 43, 61, 113, 42, 38, 62, 238, 109, 38, 62, 242, 172, 180, 62, 212, 127, 128, 190, 100, 162, 221, 189, 114, 29, 16, 190, 233, 19, 16, 191, 251, 146, 105, 191, 239, 237, 88, 62, 101, 88, 76, 191, 13, 67, 144, 190, 212, 58, 154, 191, 169, 244, 99, 62, 55, 158, 2, 62, 2, 68, 97, 62, 76, 135, 171, 190, 253, 189, 187, 61, 164, 107, 3, 190, 70, 122, 62, 62, 69, 82, 139, 190, 120, 112, 11, 190, 152, 64, 202, 190, 51, 105, 7, 62, 204, 70, 216, 62, 252, 50, 16, 190, 215, 196, 204, 189, 208, 187, 54, 189, 231, 238, 43, 190, 142, 117, 40, 190, 149, 109, 1, 190, 240, 252, 28, 190, 38, 226, 246, 61, 3, 38, 198, 187, 16, 43, 200, 58, 160, 146, 167, 190, 72, 212, 119, 61, 140, 172, 33, 60, 64, 79, 87, 61, 86, 130, 35, 63, 159, 126, 67, 62, 245, 15, 84, 62, 207, 211, 22, 190, 183, 14, 171, 62, 56, 23, 166, 189, 211, 19, 145, 189, 188, 99, 177, 189, 98, 85, 161, 62, 9, 205, 5, 63, 38, 112, 131, 61, 45, 203, 100, 190, 21, 250, 237, 61, 73, 181, 31, 189, 181, 51, 182, 61, 233, 140, 190, 62, 62, 200, 209, 189, 204, 147, 17, 191, 216, 201, 250, 61, 68, 182, 6, 189, 25, 169, 62, 62, 190, 111, 184, 189, 133, 162, 204, 188, 227, 11, 86, 190, 122, 66, 36, 62, 151, 223, 56, 190, 215, 28, 90, 62, 158, 182, 16, 62, 63, 238, 52, 62, 106, 62, 128, 189, 199, 66, 228, 190, 46, 29, 71, 61, 97, 197, 204, 190, 132, 109, 163, 61, 207, 18, 213, 190, 1, 118, 131, 61, 0, 184, 184, 58, 76, 177, 105, 62, 87, 206, 60, 189, 248, 168, 135, 61, 35, 10, 161, 61, 21, 203, 192, 188, 113, 49, 210, 60, 86, 88, 211, 190, 113, 94, 190, 61, 93, 125, 10, 190, 27, 233, 238, 189, 35, 140, 167, 189, 236, 55, 242, 187, 57, 142, 109, 62, 246, 113, 213, 188, 175, 57, 246, 61, 84, 64, 3, 190, 39, 73, 227, 186, 184, 138, 132, 189, 105, 237, 198, 61, 226, 155, 0, 62, 129, 120, 6, 190, 248, 22, 244, 61, 124, 218, 213, 189, 231, 102, 230, 189, 159, 73, 72, 190, 173, 60, 52, 190, 190, 155, 34, 190, 255, 36, 142, 61, 141, 144, 240, 61, 222, 5, 228, 61, 112, 151, 132, 189, 71, 100, 26, 190, 40, 72, 246, 61, 119, 123, 49, 189, 194, 166, 25, 62, 127, 212, 226, 188, 247, 150, 62, 189, 148, 104, 153, 60, 64, 176, 155, 61, 3, 72, 159, 189, 84, 171, 125, 189, 8, 184, 77, 188, 177, 122, 22, 61, 236, 128, 18, 61, 239, 80, 191, 61, 109, 121, 97, 189, 160, 180, 60, 62, 123, 164, 162, 60, 224, 1, 172, 61, 160, 231, 128, 190, 196, 118, 33, 191, 31, 91, 68, 62, 120, 191, 149, 61, 222, 89, 133, 61, 252, 115, 132, 189, 53, 6, 221, 60, 77, 201, 64, 61, 50, 72, 36, 61, 84, 168, 248, 189, 115, 77, 34, 189, 143, 210, 42, 62, 167, 74, 244, 190, 160, 157, 43, 190, 72, 234, 186, 61, 193, 190, 132, 61, 6, 106, 241, 61, 106, 230, 200, 61, 192, 125, 84, 61, 118, 137, 49, 190, 202, 102, 183, 60, 142, 107, 11, 191, 175, 37, 10, 189, 113, 83, 249, 60, 245, 228, 7, 62, 68, 161, 166, 189, 226, 174, 99, 190, 11, 250, 44, 190, 162, 124, 163, 188, 192, 61, 229, 61, 164, 141, 135, 61, 195, 60, 93, 189, 96, 152, 189, 190, 203, 181, 62, 190, 41, 183, 135, 62, 180, 122, 6, 190, 178, 208, 19, 62, 218, 74, 171, 61, 232, 26, 23, 188, 100, 215, 215, 190, 56, 70, 192, 61, 18, 192, 48, 190, 202, 56, 163, 62, 168, 222, 195, 61, 246, 127, 179, 190, 170, 86, 216, 189, 104, 33, 161, 62, 196, 193, 221, 62, 102, 239, 142, 60, 27, 89, 213, 189, 148, 185, 141, 62, 166, 180, 216, 60, 45, 182, 18, 61, 44, 118, 213, 190, 180, 58, 136, 189, 83, 140, 87, 189, 222, 148, 238, 61, 253, 103, 170, 62, 22, 121, 193, 190, 181, 44, 238, 190, 77, 177, 216, 189, 166, 217, 233, 189, 69, 57, 169, 62, 241, 181, 43, 62, 25, 114, 186, 189, 82, 72, 23, 62, 111, 60, 68, 189, 245, 124, 58, 189, 200, 121, 143, 61, 171, 93, 236, 61, 181, 244, 30, 62, 208, 202, 134, 190, 144, 220, 16, 62, 34, 34, 244, 189, 236, 240, 144, 191, 57, 169, 187, 189, 203, 9, 40, 62, 47, 0, 235, 61, 103, 59, 151, 190, 93, 178, 192, 61, 107, 60, 122, 190, 5, 214, 127, 61, 223, 235, 3, 61, 1, 203, 184, 190, 21, 173, 114, 62, 41, 199, 51, 189, 64, 205, 113, 189, 237, 11, 86, 190, 11, 244, 248, 189, 225, 76, 236, 190, 190, 68, 179, 61, 87, 251, 115, 62, 54, 192, 253, 188, 126, 243, 148, 189, 189, 116, 157, 62, 205, 241, 21, 190, 233, 103, 21, 189, 26, 212, 97, 190, 199, 75, 128, 62, 36, 142, 225, 61, 70, 175, 164, 60, 194, 172, 241, 61, 123, 229, 91, 62, 5, 102, 79, 60, 111, 199, 154, 190, 186, 225, 3, 62, 115, 83, 156, 190, 131, 203, 21, 189, 188, 255, 107, 190, 186, 149, 99, 187, 62, 104, 13, 62, 113, 203, 2, 61, 25, 219, 15, 62, 55, 185, 57, 61, 250, 71, 6, 190, 217, 66, 4, 190, 85, 176, 121, 61, 167, 238, 57, 190, 7, 75, 250, 188, 22, 204, 29, 62, 240, 153, 21, 190, 193, 184, 34, 189, 220, 204, 26, 190, 224, 220, 10, 62, 182, 219, 21, 190, 102, 242, 246, 190, 148, 34, 138, 189, 81, 192, 47, 190, 124, 67, 83, 62, 62, 203, 219, 190, 205, 56, 201, 188, 195, 115, 7, 191, 108, 63, 17, 61, 98, 72, 245, 190, 225, 24, 157, 62, 6, 142, 74, 188, 188, 3, 167, 191, 148, 248, 164, 188, 80, 142, 191, 189, 243, 41, 1, 189, 26, 79, 170, 60, 159, 79, 90, 188, 127, 62, 15, 62, 85, 253, 96, 61, 202, 88, 121, 61, 253, 159, 114, 189, 0, 84, 98, 62, 76, 44, 77, 62, 99, 110, 157, 61, 14, 118, 181, 190, 110, 134, 37, 190, 104, 56, 123, 189, 221, 201, 3, 190, 2, 225, 230, 59, 247, 12, 201, 189, 106, 50, 102, 62, 112, 201, 181, 60, 63, 123, 38, 62, 160, 8, 132, 61, 10, 6, 202, 190, 111, 203, 25, 60, 240, 148, 247, 189, 91, 236, 50, 62, 186, 47, 149, 62, 82, 34, 153, 190, 27, 57, 120, 188, 154, 34, 50, 190, 233, 124, 187, 60, 2, 254, 175, 62, 242, 173, 6, 190, 103, 14, 35, 62, 36, 59, 222, 61, 211, 130, 220, 189, 201, 145, 30, 189, 0, 115, 131, 187, 161, 236, 210, 61, 29, 237, 238, 61, 119, 185, 112, 61, 171, 44, 33, 62, 110, 113, 7, 61, 222, 212, 94, 190, 117, 208, 47, 190, 217, 141, 150, 190, 208, 236, 0, 62, 246, 81, 248, 59, 196, 98, 163, 62, 161, 215, 198, 190, 10, 209, 11, 190, 201, 97, 1, 189, 140, 155, 74, 62, 68, 215, 1, 190, 141, 163, 17, 190, 153, 88, 76, 62, 197, 197, 229, 188, 8, 83, 217, 61, 43, 31, 221, 189, 12, 74, 89, 62, 7, 208, 17, 62, 30, 17, 177, 61, 185, 73, 11, 189, 141, 79, 127, 189, 60, 136, 214, 59, 170, 49, 16, 63, 238, 20, 139, 190, 19, 196, 39, 62, 225, 65, 234, 61, 215, 145, 113, 62, 77, 218, 126, 190, 91, 56, 176, 60, 250, 32, 5, 189, 5, 204, 232, 189, 193, 21, 251, 62, 27, 94, 132, 60, 137, 24, 201, 188, 169, 125, 172, 189, 72, 170, 126, 62, 232, 173, 26, 62, 97, 219, 28, 62, 225, 47, 57, 62, 191, 42, 237, 61, 90, 87, 37, 62, 198, 0, 168, 190, 30, 62, 196, 62, 89, 80, 66, 62, 59, 60, 166, 62, 136, 231, 33, 62, 153, 186, 188, 188, 222, 204, 21, 188, 236, 40, 156, 62, 9, 50, 209, 61, 103, 253, 66, 62, 113, 224, 120, 62, 44, 138, 151, 190, 2, 93, 168, 189, 17, 9, 179, 62, 96, 194, 26, 62, 162, 246, 21, 191, 70, 188, 89, 62, 57, 114, 3, 190, 158, 133, 159, 57, 176, 201, 254, 53, 60, 85, 17, 190, 88, 195, 42, 191, 153, 165, 37, 61, 164, 144, 153, 62, 219, 254, 134, 62, 52, 176, 58, 62, 132, 1, 57, 62, 43, 198, 103, 188, 164, 125, 119, 190, 39, 25, 249, 61, 165, 120, 134, 62, 242, 232, 195, 187, 198, 37, 156, 187, 133, 92, 211, 189, 51, 230, 187, 60, 255, 82, 161, 62, 57, 232, 168, 62, 222, 1, 246, 189, 117, 4, 41, 61, 125, 110, 246, 60, 65, 44, 79, 62, 12, 184, 17, 61, 11, 192, 113, 62, 90, 194, 147, 61, 131, 26, 76, 189, 11, 45, 226, 190, 133, 131, 9, 189, 241, 241, 136, 62, 162, 69, 250, 190, 185, 180, 41, 190, 147, 7, 240, 190, 212, 239, 224, 60, 211, 87, 30, 62, 108, 204, 93, 190, 133, 231, 9, 191, 73, 74, 35, 62, 53, 64, 228, 62, 204, 122, 218, 61, 227, 64, 137, 190, 134, 206, 66, 189, 127, 113, 248, 190, 136, 12, 88, 62, 120, 149, 253, 62, 53, 191, 84, 189, 43, 105, 139, 189, 172, 213, 91, 61, 219, 6, 57, 62, 47, 85, 94, 62, 122, 182, 179, 62, 110, 64, 122, 61, 237, 247, 7, 60, 104, 12, 122, 62, 71, 155, 37, 189, 177, 70, 95, 62, 246, 136, 130, 59, 228, 21, 79, 62, 190, 255, 234, 189, 197, 153, 19, 191, 125, 18, 218, 189, 222, 88, 114, 61, 97, 54, 134, 189, 203, 86, 136, 61, 154, 154, 190, 189, 4, 182, 100, 190, 96, 147, 168, 189, 166, 80, 154, 190, 154, 233, 136, 190, 100, 159, 131, 62, 240, 13, 158, 62, 99, 57, 165, 62, 202, 36, 115, 190, 208, 9, 253, 61, 59, 181, 48, 190, 235, 246, 41, 61, 111, 146, 63, 62, 185, 228, 16, 61, 119, 146, 168, 189, 207, 119, 78, 190, 14, 188, 105, 190, 101, 213, 83, 189, 246, 206, 222, 190, 196, 143, 102, 62, 10, 77, 15, 60, 184, 187, 110, 191, 25, 120, 55, 189, 214, 191, 226, 60, 86, 166, 59, 62, 234, 187, 147, 62, 119, 203, 249, 190, 180, 25, 39, 62, 53, 66, 36, 62, 120, 41, 142, 62, 221, 94, 233, 189, 189, 235, 220, 61, 47, 100, 81, 62, 47, 34, 30, 188, 40, 198, 0, 190, 71, 109, 99, 61, 6, 121, 105, 190, 208, 204, 219, 190, 251, 173, 177, 190, 169, 116, 248, 190, 53, 163, 4, 191, 251, 253, 29, 62, 115, 204, 33, 190, 0, 86, 244, 190, 160, 187, 38, 189, 134, 146, 81, 188, 213, 222, 128, 62, 226, 174, 69, 190, 85, 45, 245, 189, 192, 40, 170, 190, 242, 213, 6, 188, 154, 200, 131, 188, 77, 170, 233, 61, 136, 75, 47, 62, 174, 179, 34, 62, 84, 81, 236, 61, 118, 0, 130, 189, 184, 177, 50, 61, 156, 133, 82, 61, 16, 73, 50, 190, 180, 189, 114, 60, 207, 214, 120, 62, 130, 63, 188, 190, 39, 196, 146, 189, 6, 115, 85, 190, 198, 108, 210, 61, 251, 28, 28, 190, 187, 157, 10, 62, 46, 16, 180, 61, 148, 103, 231, 61, 224, 194, 17, 190, 148, 37, 127, 61, 59, 74, 123, 189, 253, 70, 220, 189, 213, 160, 54, 61, 194, 180, 11, 60, 122, 93, 188, 61, 78, 228, 34, 190, 233, 233, 29, 62, 79, 182, 1, 190, 145, 148, 83, 189, 230, 209, 6, 62, 156, 25, 135, 60, 6, 112, 248, 190, 227, 78, 204, 61, 29, 82, 107, 62, 65, 130, 77, 61, 160, 62, 24, 62, 36, 170, 115, 61, 157, 162, 158, 189, 41, 16, 205, 189, 138, 81, 55, 191, 177, 255, 86, 191, 252, 82, 47, 62, 129, 126, 75, 191, 188, 78, 119, 190, 253, 143, 163, 191, 143, 231, 167, 62, 107, 1, 19, 61, 104, 59, 173, 61, 235, 150, 196, 190, 201, 185, 98, 62, 43, 66, 4, 189, 105, 187, 67, 62, 217, 222, 133, 190, 215, 182, 112, 189, 157, 239, 172, 190, 118, 160, 2, 62, 160, 176, 217, 62, 64, 114, 46, 62, 184, 75, 174, 61, 40, 224, 52, 190, 163, 65, 83, 189, 139, 74, 166, 188, 4, 57, 22, 190, 245, 100, 123, 189, 114, 136, 236, 189, 7, 152, 219, 189, 27, 102, 6, 190, 168, 4, 113, 61, 60, 116, 0, 189, 143, 217, 242, 189, 73, 34, 24, 62, 110, 129, 53, 190, 148, 53, 227, 188, 74, 2, 232, 61, 22, 167, 0, 62, 132, 141, 216, 61, 94, 192, 8, 190, 70, 189, 82, 190, 196, 208, 29, 189, 210, 186, 224, 61, 204, 154, 70, 190, 81, 94, 171, 189, 91, 53, 226, 61, 199, 127, 153, 188, 138, 162, 115, 189, 198, 104, 227, 61, 222, 26, 75, 190, 110, 147, 25, 62, 213, 237, 129, 61, 84, 0, 46, 62, 124, 211, 89, 62, 206, 76, 169, 185, 214, 63, 53, 189, 242, 10, 199, 188, 188, 75, 1, 62, 134, 246, 166, 61, 161, 41, 65, 61, 28, 194, 89, 62, 129, 255, 13, 62, 14, 205, 76, 62, 89, 96, 183, 189, 109, 121, 23, 59, 100, 70, 6, 189, 57, 69, 22, 61, 230, 46, 162, 61, 123, 234, 51, 61, 223, 116, 69, 60, 172, 235, 181, 189, 205, 57, 192, 61, 41, 231, 202, 61, 70, 224, 87, 61, 121, 164, 118, 61, 81, 218, 152, 62, 83, 70, 21, 62, 223, 46, 206, 61, 159, 78, 216, 61, 153, 11, 102, 190, 57, 1, 3, 62, 206, 168, 151, 189, 85, 249, 167, 60, 179, 70, 196, 61, 119, 1, 115, 61, 215, 81, 167, 61, 93, 49, 61, 62, 25, 223, 144, 62, 182, 113, 1, 190, 217, 43, 155, 191, 48, 203, 67, 62, 54, 147, 101, 189, 202, 193, 195, 187, 133, 236, 26, 189, 116, 167, 64, 61, 20, 143, 154, 190, 143, 88, 60, 188, 92, 41, 121, 188, 150, 125, 52, 189, 41, 112, 95, 62, 93, 169, 141, 190, 245, 3, 160, 189, 141, 217, 190, 188, 95, 8, 203, 61, 28, 118, 27, 61, 61, 168, 209, 58, 215, 205, 14, 190, 51, 222, 178, 190, 16, 230, 50, 190, 154, 153, 135, 191, 82, 35, 150, 190, 239, 235, 85, 61, 117, 142, 232, 188, 57, 66, 70, 62, 55, 76, 43, 190, 170, 52, 124, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 46, 178, 62, 52, 158, 36, 62, 72, 86, 88, 189, 255, 220, 247, 61, 94, 106, 132, 61, 102, 57, 1, 190, 183, 234, 34, 62, 164, 207, 139, 188, 161, 30, 10, 190, 138, 64, 46, 190, 137, 3, 4, 190, 109, 248, 187, 60, 192, 76, 131, 62, 71, 108, 39, 190, 215, 23, 20, 62, 169, 87, 54, 190, 205, 204, 158, 189, 27, 14, 19, 189, 5, 71, 139, 62, 53, 41, 99, 189, 231, 94, 32, 62, 171, 223, 9, 62, 149, 4, 196, 61, 222, 120, 15, 190, 117, 218, 3, 62, 24, 157, 106, 62, 215, 205, 98, 190, 42, 188, 4, 62, 143, 140, 135, 62, 96, 118, 49, 190, 233, 142, 2, 62, 200, 30, 134, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 227, 134, 190, 187, 135, 213, 190, 131, 185, 73, 60, 134, 208, 233, 62, 120, 134, 199, 190, 131, 203, 51, 63, 159, 212, 45, 191, 183, 154, 110, 63, 155, 154, 131, 189, 188, 180, 250, 189, 237, 228, 71, 191, 50, 246, 190, 62, 6, 252, 103, 63, 184, 26, 65, 190, 148, 194, 67, 62, 5, 181, 170, 61, 185, 179, 4, 190, 183, 21, 214, 190, 85, 147, 204, 62, 145, 143, 224, 61, 18, 74, 197, 62, 232, 92, 115, 190, 99, 197, 20, 190, 163, 54, 250, 190, 146, 141, 47, 63, 145, 43, 158, 62, 134, 217, 146, 62, 138, 223, 116, 189, 160, 61, 76, 63, 151, 12, 28, 190, 108, 171, 51, 189, 184, 239, 7, 191, 173, 190, 172, 190, 43, 192, 38, 191, 17, 194, 85, 189, 195, 206, 251, 189, 198, 0, 202, 189, 68, 221, 215, 62, 180, 217, 198, 61, 184, 14, 204, 62, 187, 23, 118, 189, 222, 106, 224, 61, 22, 38, 151, 62, 222, 254, 54, 189, 119, 188, 213, 189, 43, 59, 169, 62, 107, 152, 132, 188, 207, 199, 95, 188, 43, 146, 136, 189, 228, 51, 100, 62, 86, 170, 46, 62, 223, 251, 60, 189, 60, 3, 173, 190, 139, 167, 186, 60, 67, 106, 63, 61, 181, 164, 199, 61, 116, 13, 219, 62, 117, 156, 66, 190, 44, 70, 54, 62, 84, 222, 65, 190, 51, 15, 143, 190, 157, 103, 11, 61, 149, 49, 38, 190, 73, 140, 29, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 154, 38, 190, 212, 195, 165, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {11, 34, 136, 63, 238, 42, 172, 190, 6, 160, 231, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {79, 147, 48, 64, 87, 186, 169, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0059/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}