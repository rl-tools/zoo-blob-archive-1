// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 29, 219, 62, 151, 63, 54, 190, 144, 144, 171, 59, 244, 245, 12, 191, 159, 109, 196, 62, 195, 169, 1, 62, 23, 167, 205, 190, 1, 64, 120, 191, 248, 56, 12, 189, 240, 89, 136, 190, 152, 57, 26, 191, 63, 130, 155, 62, 6, 128, 206, 62, 109, 182, 128, 191, 143, 228, 15, 191, 17, 185, 189, 190, 202, 247, 162, 63, 208, 248, 229, 62, 217, 37, 194, 60, 103, 26, 220, 190, 76, 111, 28, 191, 182, 30, 209, 190, 229, 162, 134, 62, 184, 64, 35, 62, 94, 185, 24, 63, 121, 179, 249, 190, 174, 185, 146, 62, 21, 252, 33, 191, 104, 29, 59, 62, 53, 14, 3, 62, 233, 85, 93, 63, 235, 28, 193, 190, 245, 217, 142, 190, 105, 52, 141, 189, 193, 8, 34, 189, 237, 31, 9, 191, 65, 17, 11, 191, 16, 117, 77, 63, 234, 155, 27, 62, 245, 199, 93, 190, 172, 67, 91, 62, 4, 157, 11, 63, 65, 12, 80, 63, 104, 118, 1, 63, 149, 74, 140, 62, 80, 8, 160, 190, 140, 95, 45, 62, 3, 6, 34, 191, 50, 162, 152, 190, 236, 161, 128, 63, 249, 161, 217, 60, 222, 3, 227, 190, 29, 89, 195, 191, 121, 84, 252, 190, 104, 182, 14, 63, 243, 198, 25, 63, 176, 158, 216, 62, 37, 86, 25, 191, 233, 47, 87, 191, 161, 174, 209, 190, 28, 179, 67, 62, 102, 213, 145, 62, 215, 117, 161, 190, 246, 217, 147, 62, 57, 1, 172, 190, 158, 189, 30, 60, 109, 110, 81, 190, 181, 239, 125, 63, 103, 216, 94, 190, 56, 208, 227, 62, 179, 171, 190, 188, 95, 54, 138, 62, 242, 74, 185, 62, 234, 165, 94, 61, 172, 1, 30, 63, 52, 117, 173, 190, 250, 52, 137, 63, 249, 253, 199, 62, 203, 68, 91, 190, 136, 99, 115, 61, 177, 94, 39, 63, 16, 213, 209, 61, 30, 187, 24, 189, 128, 215, 30, 63, 172, 12, 123, 189, 251, 80, 6, 188, 201, 18, 136, 60, 77, 217, 62, 63, 167, 231, 114, 63, 70, 32, 141, 62, 254, 77, 130, 190, 60, 97, 13, 190, 233, 126, 15, 63, 146, 29, 16, 63, 214, 103, 37, 191, 213, 206, 37, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 126, 25, 191, 210, 3, 61, 63, 242, 251, 35, 63, 51, 217, 195, 62, 250, 225, 174, 190, 225, 129, 6, 191, 177, 133, 147, 62, 229, 158, 68, 63, 45, 211, 204, 62, 34, 71, 77, 63, 38, 227, 17, 63, 122, 155, 73, 191, 238, 71, 134, 62, 14, 186, 80, 190, 41, 28, 225, 190, 65, 2, 158, 190, 195, 94, 123, 190, 157, 175, 175, 61, 105, 196, 93, 62, 162, 105, 146, 190, 234, 25, 207, 189, 123, 91, 1, 191, 223, 61, 1, 63, 67, 143, 72, 191, 108, 252, 156, 62, 32, 106, 243, 190, 150, 163, 154, 190, 168, 211, 190, 190, 183, 241, 134, 190, 171, 171, 39, 189, 123, 165, 142, 190, 91, 86, 225, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 157, 32, 190, 74, 9, 130, 60, 179, 165, 180, 189, 60, 202, 137, 189, 77, 53, 57, 189, 185, 94, 60, 190, 165, 4, 6, 189, 48, 233, 149, 62, 91, 136, 155, 62, 173, 168, 32, 189, 2, 207, 182, 61, 151, 52, 28, 190, 226, 221, 157, 189, 80, 6, 32, 188, 34, 42, 154, 62, 42, 252, 125, 62, 30, 36, 146, 188, 234, 234, 108, 61, 28, 234, 139, 62, 176, 224, 171, 189, 146, 220, 230, 60, 209, 233, 175, 61, 240, 20, 135, 62, 235, 165, 14, 62, 82, 60, 115, 62, 40, 165, 89, 190, 230, 10, 113, 61, 92, 146, 165, 61, 0, 201, 25, 190, 101, 42, 0, 62, 108, 229, 7, 190, 161, 193, 157, 61, 203, 53, 76, 189, 195, 15, 252, 189, 86, 232, 196, 61, 66, 46, 84, 190, 84, 221, 160, 190, 222, 105, 47, 191, 3, 33, 72, 62, 104, 182, 116, 61, 67, 99, 52, 62, 76, 55, 148, 190, 138, 60, 83, 62, 106, 246, 55, 61, 210, 206, 6, 191, 9, 27, 79, 189, 184, 75, 208, 188, 213, 239, 154, 189, 14, 235, 44, 62, 48, 31, 184, 190, 204, 32, 242, 61, 237, 74, 9, 190, 101, 16, 57, 62, 151, 112, 17, 62, 132, 213, 191, 189, 123, 231, 88, 190, 133, 139, 166, 61, 147, 41, 43, 191, 36, 231, 138, 190, 123, 149, 244, 61, 190, 97, 162, 189, 152, 154, 105, 189, 208, 32, 37, 190, 131, 240, 101, 190, 168, 240, 169, 61, 173, 80, 23, 190, 62, 26, 40, 62, 225, 0, 75, 189, 206, 89, 210, 187, 250, 92, 105, 189, 247, 21, 5, 190, 163, 107, 196, 189, 29, 60, 170, 189, 111, 112, 25, 190, 230, 58, 76, 189, 215, 62, 184, 189, 253, 136, 4, 62, 87, 218, 212, 189, 123, 108, 247, 61, 87, 40, 21, 61, 78, 11, 8, 61, 215, 116, 13, 189, 227, 66, 206, 61, 184, 53, 249, 189, 187, 196, 30, 62, 70, 95, 37, 190, 244, 54, 28, 189, 204, 226, 136, 58, 162, 83, 0, 190, 156, 213, 244, 189, 204, 18, 140, 185, 65, 195, 216, 61, 222, 6, 21, 62, 214, 22, 221, 61, 193, 164, 108, 189, 23, 7, 31, 190, 186, 155, 43, 62, 206, 170, 236, 61, 99, 50, 127, 188, 223, 230, 210, 188, 180, 103, 36, 62, 234, 222, 6, 61, 222, 28, 200, 190, 251, 83, 167, 189, 176, 51, 153, 62, 125, 102, 247, 61, 86, 149, 166, 62, 75, 219, 9, 62, 217, 210, 34, 62, 179, 215, 231, 189, 67, 21, 28, 191, 162, 49, 152, 190, 186, 156, 191, 62, 49, 41, 186, 190, 171, 138, 20, 189, 160, 93, 39, 191, 203, 138, 75, 62, 250, 232, 43, 62, 240, 171, 120, 190, 236, 221, 154, 190, 57, 130, 192, 61, 118, 228, 38, 62, 15, 166, 239, 60, 208, 18, 120, 190, 135, 244, 34, 62, 151, 74, 137, 190, 3, 123, 236, 61, 26, 48, 13, 62, 53, 23, 161, 61, 171, 199, 148, 61, 53, 38, 104, 62, 44, 2, 140, 62, 70, 160, 152, 189, 184, 211, 101, 191, 157, 82, 47, 62, 120, 45, 18, 62, 22, 125, 198, 190, 222, 115, 82, 190, 65, 138, 128, 61, 31, 168, 16, 190, 19, 192, 12, 190, 96, 81, 153, 62, 194, 43, 145, 190, 248, 115, 196, 61, 177, 94, 247, 190, 101, 153, 167, 60, 174, 201, 209, 60, 62, 197, 152, 61, 219, 90, 242, 61, 56, 254, 139, 187, 127, 203, 117, 62, 6, 117, 136, 189, 70, 215, 174, 190, 211, 158, 152, 191, 65, 214, 202, 189, 149, 169, 217, 61, 69, 98, 35, 61, 253, 81, 138, 61, 69, 49, 49, 190, 207, 126, 120, 190, 135, 62, 47, 190, 148, 31, 98, 191, 226, 81, 56, 190, 136, 215, 110, 190, 109, 185, 135, 62, 193, 4, 45, 62, 196, 43, 33, 62, 126, 28, 131, 191, 215, 166, 96, 62, 210, 7, 92, 191, 41, 223, 170, 61, 18, 1, 101, 62, 184, 222, 7, 191, 19, 217, 93, 62, 242, 87, 84, 62, 68, 11, 223, 189, 219, 172, 8, 61, 186, 244, 140, 61, 30, 198, 175, 61, 237, 172, 195, 189, 127, 81, 20, 62, 45, 42, 232, 189, 214, 212, 102, 60, 172, 80, 210, 62, 212, 198, 201, 61, 119, 231, 12, 62, 94, 129, 181, 62, 9, 48, 157, 62, 216, 255, 103, 189, 78, 192, 64, 189, 49, 102, 24, 61, 98, 81, 166, 62, 47, 31, 154, 189, 106, 215, 152, 189, 169, 71, 140, 62, 120, 20, 103, 62, 65, 207, 188, 190, 105, 234, 143, 191, 57, 191, 47, 62, 141, 133, 118, 61, 29, 136, 82, 187, 141, 4, 3, 61, 203, 13, 84, 61, 124, 21, 149, 190, 165, 219, 175, 188, 156, 176, 1, 62, 106, 169, 198, 62, 168, 151, 34, 62, 113, 86, 189, 190, 194, 86, 160, 189, 30, 237, 242, 61, 33, 168, 153, 61, 33, 97, 24, 61, 218, 241, 152, 189, 57, 20, 180, 61, 1, 90, 151, 190, 214, 137, 4, 190, 6, 218, 180, 191, 142, 92, 235, 190, 220, 233, 88, 61, 145, 118, 44, 190, 122, 70, 221, 60, 222, 53, 147, 190, 248, 179, 103, 190, 9, 69, 183, 61, 142, 183, 240, 61, 21, 20, 225, 61, 92, 101, 142, 61, 110, 47, 58, 62, 121, 50, 109, 190, 191, 193, 173, 60, 195, 4, 205, 189, 209, 230, 78, 62, 5, 107, 147, 61, 149, 170, 11, 62, 227, 108, 94, 189, 201, 137, 165, 189, 104, 180, 19, 190, 34, 214, 23, 191, 122, 55, 56, 190, 36, 90, 2, 62, 132, 81, 128, 190, 80, 41, 190, 188, 190, 69, 45, 191, 27, 22, 238, 188, 129, 237, 222, 61, 54, 127, 74, 61, 126, 247, 98, 190, 76, 98, 134, 189, 177, 41, 5, 190, 117, 139, 170, 61, 79, 61, 149, 60, 56, 170, 206, 61, 113, 212, 23, 191, 114, 244, 63, 62, 64, 202, 211, 62, 108, 13, 45, 189, 30, 112, 21, 190, 182, 64, 35, 190, 42, 156, 49, 190, 43, 57, 205, 60, 40, 39, 40, 189, 133, 253, 7, 62, 84, 131, 0, 190, 215, 127, 138, 60, 47, 125, 124, 60, 79, 48, 36, 188, 89, 5, 143, 189, 125, 198, 229, 61, 116, 16, 37, 62, 239, 65, 134, 189, 227, 98, 246, 189, 148, 126, 31, 61, 239, 138, 154, 187, 227, 14, 200, 189, 223, 56, 181, 189, 216, 70, 131, 187, 11, 117, 187, 189, 78, 168, 172, 189, 55, 164, 189, 189, 218, 166, 30, 61, 77, 214, 214, 188, 82, 170, 232, 61, 249, 237, 39, 190, 67, 170, 115, 61, 11, 193, 207, 188, 49, 185, 217, 189, 106, 29, 160, 61, 119, 176, 248, 189, 76, 113, 45, 190, 208, 129, 172, 61, 76, 52, 113, 61, 16, 232, 5, 62, 102, 34, 6, 62, 223, 28, 149, 188, 62, 211, 207, 189, 124, 126, 124, 60, 52, 4, 17, 190, 77, 1, 58, 189, 231, 56, 189, 61, 80, 154, 93, 61, 41, 20, 47, 189, 223, 213, 203, 60, 120, 74, 107, 189, 248, 53, 188, 61, 187, 152, 234, 189, 153, 12, 4, 190, 207, 159, 88, 189, 137, 224, 14, 189, 172, 80, 147, 189, 135, 95, 24, 190, 180, 163, 251, 61, 191, 227, 122, 188, 141, 26, 162, 60, 164, 177, 237, 189, 170, 5, 187, 189, 242, 189, 244, 188, 159, 225, 154, 189, 141, 237, 129, 188, 42, 163, 108, 60, 78, 210, 102, 188, 13, 200, 53, 61, 252, 186, 143, 62, 73, 108, 180, 62, 191, 244, 214, 189, 73, 100, 160, 191, 181, 8, 98, 190, 156, 40, 122, 61, 6, 187, 33, 62, 182, 178, 229, 61, 128, 32, 126, 190, 92, 180, 122, 189, 79, 95, 7, 62, 34, 91, 97, 62, 60, 141, 41, 190, 1, 62, 168, 60, 99, 132, 30, 191, 21, 145, 66, 62, 184, 209, 74, 191, 242, 0, 234, 189, 240, 185, 124, 190, 34, 212, 41, 189, 140, 247, 27, 190, 27, 9, 49, 190, 46, 29, 14, 190, 156, 71, 142, 191, 24, 124, 17, 191, 59, 132, 188, 61, 127, 165, 49, 190, 173, 88, 142, 190, 189, 9, 186, 190, 247, 39, 124, 189, 11, 135, 134, 189, 76, 226, 206, 190, 39, 59, 210, 189, 152, 89, 26, 191, 196, 218, 135, 62, 246, 60, 160, 189, 122, 106, 32, 62, 207, 192, 97, 191, 204, 123, 92, 62, 151, 166, 135, 191, 164, 13, 238, 61, 215, 154, 89, 189, 4, 49, 138, 191, 129, 140, 144, 62, 99, 102, 4, 62, 23, 203, 197, 61, 254, 85, 247, 61, 98, 248, 229, 61, 142, 244, 160, 62, 135, 208, 51, 62, 148, 83, 236, 189, 115, 253, 175, 189, 187, 228, 242, 61, 53, 20, 36, 190, 4, 67, 191, 189, 224, 228, 219, 189, 74, 6, 84, 61, 134, 41, 141, 61, 67, 107, 61, 186, 161, 191, 230, 190, 129, 69, 247, 188, 197, 201, 133, 62, 227, 68, 63, 61, 216, 83, 158, 189, 120, 67, 139, 59, 207, 206, 18, 62, 250, 242, 56, 62, 37, 202, 37, 190, 59, 118, 2, 191, 161, 32, 82, 61, 239, 78, 47, 62, 125, 240, 53, 62, 16, 234, 183, 62, 172, 230, 62, 190, 158, 143, 67, 189, 13, 102, 13, 190, 215, 5, 2, 191, 167, 235, 75, 191, 141, 127, 85, 62, 75, 128, 36, 191, 21, 178, 140, 190, 57, 176, 111, 191, 7, 83, 85, 62, 55, 158, 2, 62, 10, 140, 44, 62, 109, 29, 149, 190, 92, 144, 207, 61, 1, 180, 15, 190, 5, 186, 69, 62, 198, 126, 133, 190, 120, 112, 11, 190, 171, 66, 188, 190, 186, 245, 10, 62, 37, 114, 221, 62, 252, 50, 16, 190, 39, 137, 71, 189, 226, 137, 214, 189, 40, 36, 81, 190, 34, 205, 245, 189, 170, 162, 157, 188, 163, 49, 239, 189, 222, 251, 23, 62, 160, 233, 234, 189, 80, 255, 48, 61, 138, 61, 195, 190, 215, 111, 192, 61, 114, 4, 203, 61, 200, 93, 143, 61, 61, 94, 24, 63, 180, 50, 84, 62, 115, 90, 130, 62, 231, 124, 192, 189, 171, 192, 153, 62, 221, 192, 239, 188, 124, 6, 4, 189, 188, 99, 177, 189, 198, 130, 164, 62, 4, 177, 213, 62, 229, 219, 206, 60, 168, 227, 234, 189, 237, 221, 240, 61, 190, 206, 141, 189, 181, 51, 182, 61, 171, 180, 181, 62, 200, 90, 212, 189, 54, 47, 45, 191, 216, 201, 250, 61, 195, 149, 156, 189, 129, 1, 26, 62, 168, 61, 165, 189, 79, 121, 28, 188, 99, 6, 221, 189, 40, 213, 39, 62, 24, 120, 91, 190, 187, 201, 113, 62, 240, 105, 197, 61, 76, 142, 74, 62, 98, 146, 88, 189, 13, 135, 231, 190, 97, 125, 175, 61, 135, 108, 189, 190, 144, 5, 174, 61, 43, 213, 203, 190, 107, 148, 64, 61, 45, 50, 226, 59, 197, 219, 77, 62, 156, 219, 69, 189, 248, 168, 135, 61, 84, 128, 55, 61, 112, 204, 222, 60, 44, 122, 81, 61, 254, 211, 154, 190, 77, 63, 1, 62, 135, 111, 218, 189, 27, 233, 238, 189, 240, 115, 156, 189, 118, 201, 121, 60, 192, 33, 136, 62, 246, 113, 213, 188, 175, 57, 246, 61, 84, 64, 3, 190, 39, 73, 227, 186, 184, 138, 132, 189, 105, 237, 198, 61, 226, 155, 0, 62, 129, 120, 6, 190, 248, 22, 244, 61, 124, 218, 213, 189, 231, 102, 230, 189, 159, 73, 72, 190, 173, 60, 52, 190, 190, 155, 34, 190, 255, 36, 142, 61, 141, 144, 240, 61, 222, 5, 228, 61, 112, 151, 132, 189, 71, 100, 26, 190, 40, 72, 246, 61, 119, 123, 49, 189, 194, 166, 25, 62, 127, 212, 226, 188, 247, 150, 62, 189, 148, 104, 153, 60, 64, 176, 155, 61, 3, 72, 159, 189, 84, 171, 125, 189, 8, 184, 77, 188, 177, 122, 22, 61, 236, 128, 18, 61, 239, 80, 191, 61, 109, 121, 97, 189, 89, 216, 70, 62, 153, 160, 236, 58, 138, 235, 141, 61, 147, 183, 113, 190, 156, 225, 22, 191, 177, 172, 85, 62, 250, 43, 171, 61, 18, 226, 75, 61, 3, 60, 132, 189, 93, 114, 7, 61, 205, 66, 33, 61, 156, 80, 67, 188, 6, 159, 214, 189, 103, 37, 205, 188, 193, 79, 47, 62, 197, 165, 238, 190, 164, 11, 23, 190, 166, 43, 210, 61, 25, 47, 120, 61, 212, 112, 23, 62, 106, 230, 200, 61, 179, 92, 194, 61, 252, 105, 6, 190, 158, 82, 253, 59, 6, 89, 247, 190, 215, 128, 140, 188, 121, 228, 149, 61, 245, 228, 7, 62, 120, 10, 88, 189, 76, 21, 76, 190, 224, 85, 64, 190, 162, 124, 163, 188, 107, 36, 9, 62, 237, 181, 3, 61, 231, 167, 171, 189, 236, 43, 181, 190, 214, 71, 172, 188, 231, 213, 151, 62, 151, 216, 247, 189, 39, 47, 217, 61, 41, 252, 200, 61, 220, 144, 192, 59, 239, 2, 222, 190, 205, 135, 6, 62, 123, 145, 201, 189, 106, 223, 163, 62, 27, 192, 171, 61, 129, 163, 186, 190, 194, 97, 214, 189, 138, 12, 149, 62, 4, 12, 211, 62, 113, 89, 74, 61, 27, 89, 213, 189, 186, 103, 142, 62, 64, 162, 134, 61, 235, 44, 222, 187, 197, 61, 111, 190, 162, 200, 82, 188, 103, 55, 102, 189, 222, 148, 238, 61, 192, 63, 160, 62, 115, 177, 165, 190, 136, 44, 234, 190, 77, 177, 216, 189, 161, 92, 2, 190, 62, 185, 129, 62, 51, 128, 21, 62, 134, 71, 89, 189, 253, 136, 60, 62, 251, 233, 72, 189, 27, 180, 147, 189, 188, 199, 135, 61, 44, 216, 186, 61, 210, 64, 31, 62, 245, 215, 62, 190, 111, 45, 6, 62, 143, 209, 178, 189, 255, 5, 132, 191, 196, 60, 149, 189, 104, 71, 157, 61, 13, 69, 230, 61, 253, 23, 143, 190, 55, 24, 144, 61, 129, 183, 102, 190, 5, 214, 127, 61, 213, 69, 227, 60, 62, 81, 120, 190, 116, 21, 122, 62, 17, 160, 220, 59, 135, 25, 216, 188, 69, 206, 69, 190, 11, 244, 248, 189, 55, 98, 214, 190, 106, 124, 241, 61, 208, 130, 98, 62, 54, 192, 253, 188, 107, 116, 250, 189, 123, 232, 135, 62, 45, 76, 26, 190, 189, 220, 157, 188, 107, 141, 67, 190, 117, 21, 130, 62, 208, 185, 148, 61, 198, 83, 10, 61, 85, 145, 137, 61, 202, 16, 117, 62, 196, 160, 196, 60, 252, 183, 178, 190, 191, 188, 5, 62, 85, 218, 135, 190, 5, 51, 234, 188, 51, 17, 99, 190, 146, 150, 89, 188, 5, 133, 11, 62, 93, 6, 164, 58, 142, 140, 22, 62, 55, 185, 57, 61, 98, 73, 31, 190, 129, 13, 238, 189, 36, 94, 150, 61, 231, 191, 21, 190, 239, 197, 0, 189, 166, 103, 34, 62, 240, 153, 21, 190, 141, 147, 174, 188, 232, 227, 37, 190, 232, 57, 42, 62, 182, 219, 21, 190, 250, 148, 189, 190, 3, 194, 84, 188, 63, 120, 104, 189, 246, 108, 104, 62, 244, 233, 208, 190, 252, 218, 19, 188, 86, 54, 232, 190, 12, 203, 168, 61, 179, 49, 179, 190, 107, 237, 171, 62, 149, 88, 16, 187, 56, 48, 147, 191, 101, 83, 42, 61, 28, 97, 65, 189, 126, 229, 77, 188, 242, 130, 148, 188, 218, 64, 156, 60, 59, 76, 42, 62, 170, 192, 101, 61, 226, 70, 118, 61, 253, 159, 114, 189, 213, 205, 88, 62, 82, 66, 90, 62, 44, 163, 17, 62, 35, 118, 175, 190, 139, 107, 211, 189, 176, 47, 56, 61, 221, 201, 3, 190, 128, 249, 219, 60, 208, 248, 138, 189, 123, 61, 134, 62, 112, 201, 181, 60, 103, 166, 211, 61, 127, 201, 195, 61, 199, 206, 107, 190, 212, 225, 147, 188, 244, 112, 118, 190, 121, 79, 53, 62, 56, 49, 128, 62, 39, 207, 32, 190, 201, 39, 73, 189, 136, 88, 45, 190, 192, 112, 189, 60, 7, 51, 98, 62, 69, 50, 137, 188, 218, 33, 45, 62, 172, 217, 222, 61, 79, 250, 106, 190, 97, 111, 36, 189, 65, 58, 117, 189, 236, 186, 226, 61, 93, 191, 240, 61, 119, 185, 112, 61, 185, 100, 217, 61, 78, 242, 78, 61, 24, 231, 76, 190, 191, 41, 133, 190, 183, 27, 179, 189, 54, 219, 141, 62, 246, 81, 248, 59, 124, 89, 70, 62, 166, 202, 237, 189, 173, 85, 4, 190, 201, 97, 1, 189, 20, 25, 79, 62, 51, 123, 16, 190, 245, 204, 23, 190, 149, 104, 40, 62, 218, 41, 254, 60, 236, 246, 198, 61, 125, 35, 210, 189, 63, 151, 87, 62, 94, 180, 21, 62, 45, 108, 93, 61, 89, 132, 5, 189, 126, 59, 118, 189, 99, 108, 24, 61, 0, 63, 20, 63, 184, 87, 145, 190, 40, 119, 71, 62, 69, 21, 213, 61, 16, 239, 134, 62, 225, 193, 70, 190, 254, 59, 110, 58, 250, 32, 5, 189, 80, 72, 6, 190, 16, 226, 223, 62, 125, 162, 226, 60, 78, 33, 12, 61, 151, 208, 123, 189, 175, 18, 137, 62, 232, 173, 26, 62, 214, 84, 39, 62, 202, 197, 78, 62, 97, 204, 164, 61, 90, 87, 37, 62, 145, 62, 180, 190, 22, 188, 191, 62, 208, 247, 21, 62, 134, 122, 143, 62, 73, 244, 242, 61, 244, 4, 120, 189, 209, 90, 162, 188, 243, 67, 142, 62, 203, 97, 153, 61, 205, 29, 38, 62, 106, 86, 46, 62, 46, 43, 171, 190, 255, 32, 249, 189, 131, 225, 167, 62, 26, 232, 194, 61, 218, 220, 21, 191, 241, 44, 62, 62, 68, 33, 4, 190, 242, 214, 166, 187, 36, 92, 9, 189, 60, 85, 17, 190, 94, 119, 38, 191, 178, 144, 23, 189, 31, 85, 138, 62, 160, 86, 93, 62, 57, 3, 16, 62, 116, 18, 20, 62, 43, 198, 103, 188, 254, 31, 85, 190, 217, 148, 172, 61, 159, 195, 107, 62, 242, 232, 195, 187, 217, 154, 169, 58, 235, 247, 199, 189, 216, 173, 62, 60, 141, 3, 187, 62, 197, 95, 156, 62, 72, 217, 165, 189, 36, 91, 30, 61, 132, 17, 138, 60, 43, 232, 80, 62, 204, 215, 32, 61, 51, 122, 126, 62, 211, 239, 86, 61, 203, 159, 44, 189, 201, 17, 205, 190, 168, 64, 215, 188, 99, 198, 78, 62, 41, 149, 178, 190, 12, 13, 51, 190, 254, 184, 170, 190, 92, 255, 48, 61, 211, 87, 30, 62, 211, 216, 90, 190, 47, 58, 168, 190, 226, 35, 25, 62, 13, 78, 220, 62, 198, 25, 252, 61, 167, 94, 135, 190, 134, 206, 66, 189, 41, 42, 237, 190, 212, 178, 109, 62, 217, 63, 243, 62, 53, 191, 84, 189, 186, 81, 160, 189, 24, 243, 41, 61, 20, 119, 70, 62, 169, 108, 112, 62, 129, 96, 148, 62, 85, 108, 133, 61, 58, 48, 148, 187, 192, 144, 130, 62, 202, 110, 81, 189, 62, 54, 120, 62, 70, 28, 47, 61, 10, 84, 54, 62, 147, 230, 12, 190, 191, 109, 21, 191, 92, 41, 133, 189, 121, 136, 140, 59, 29, 177, 167, 189, 176, 230, 42, 61, 237, 119, 27, 190, 250, 221, 65, 190, 96, 147, 168, 189, 193, 224, 142, 190, 77, 81, 100, 190, 100, 67, 131, 62, 69, 59, 128, 62, 46, 111, 157, 62, 250, 62, 125, 190, 208, 9, 253, 61, 18, 16, 66, 190, 209, 194, 226, 60, 88, 143, 81, 62, 185, 228, 16, 61, 163, 5, 139, 189, 75, 132, 127, 190, 108, 42, 75, 190, 46, 10, 129, 189, 224, 78, 176, 190, 65, 21, 91, 62, 1, 215, 137, 60, 3, 7, 70, 191, 125, 53, 56, 189, 6, 59, 189, 60, 219, 7, 58, 62, 31, 178, 136, 62, 119, 203, 249, 190, 105, 20, 23, 62, 178, 118, 26, 62, 78, 228, 143, 62, 142, 74, 15, 190, 220, 245, 9, 62, 71, 161, 70, 62, 206, 200, 95, 188, 40, 198, 0, 190, 197, 204, 112, 61, 6, 121, 105, 190, 232, 73, 222, 190, 11, 249, 135, 190, 169, 116, 248, 190, 53, 163, 4, 191, 251, 253, 29, 62, 232, 142, 234, 189, 0, 86, 244, 190, 98, 156, 98, 189, 134, 146, 81, 188, 82, 15, 131, 62, 42, 240, 84, 190, 53, 153, 163, 189, 210, 12, 93, 190, 165, 134, 29, 188, 24, 48, 84, 57, 127, 224, 245, 61, 28, 161, 59, 62, 36, 82, 37, 62, 60, 68, 250, 61, 118, 128, 81, 188, 149, 246, 77, 60, 97, 220, 79, 61, 7, 153, 244, 189, 103, 25, 128, 61, 121, 39, 112, 62, 120, 98, 101, 190, 165, 48, 93, 189, 54, 20, 75, 190, 121, 134, 13, 62, 251, 28, 28, 190, 237, 57, 10, 62, 40, 90, 9, 190, 234, 214, 20, 62, 32, 72, 21, 190, 65, 196, 89, 61, 17, 104, 40, 189, 253, 70, 220, 189, 105, 81, 168, 61, 120, 8, 0, 188, 245, 117, 191, 61, 78, 228, 34, 190, 41, 94, 58, 62, 252, 96, 197, 189, 239, 125, 15, 189, 128, 6, 170, 61, 121, 246, 121, 59, 30, 227, 7, 191, 203, 168, 242, 61, 189, 25, 116, 62, 62, 0, 159, 61, 129, 211, 246, 61, 93, 82, 139, 60, 70, 15, 232, 188, 38, 188, 197, 189, 75, 5, 45, 191, 241, 220, 83, 191, 42, 13, 67, 62, 9, 231, 41, 191, 86, 161, 109, 190, 1, 109, 131, 191, 254, 68, 103, 62, 107, 1, 19, 61, 221, 196, 136, 61, 154, 84, 147, 190, 205, 160, 115, 62, 128, 43, 55, 189, 9, 249, 74, 62, 14, 153, 125, 190, 215, 182, 112, 189, 175, 222, 164, 190, 182, 82, 7, 62, 51, 227, 206, 62, 64, 114, 46, 62, 184, 75, 174, 61, 40, 224, 52, 190, 163, 65, 83, 189, 139, 74, 166, 188, 4, 57, 22, 190, 245, 100, 123, 189, 114, 136, 236, 189, 7, 152, 219, 189, 27, 102, 6, 190, 168, 4, 113, 61, 60, 116, 0, 189, 143, 217, 242, 189, 73, 34, 24, 62, 110, 129, 53, 190, 148, 53, 227, 188, 74, 2, 232, 61, 22, 167, 0, 62, 132, 141, 216, 61, 94, 192, 8, 190, 70, 189, 82, 190, 196, 208, 29, 189, 210, 186, 224, 61, 204, 154, 70, 190, 81, 94, 171, 189, 91, 53, 226, 61, 199, 127, 153, 188, 138, 162, 115, 189, 198, 104, 227, 61, 222, 26, 75, 190, 110, 147, 25, 62, 213, 237, 129, 61, 84, 0, 46, 62, 191, 13, 117, 62, 14, 62, 213, 188, 235, 37, 146, 187, 29, 66, 154, 188, 77, 142, 241, 61, 184, 209, 137, 61, 210, 65, 154, 61, 127, 188, 84, 62, 5, 81, 40, 62, 248, 38, 63, 62, 197, 11, 167, 189, 157, 156, 133, 188, 175, 169, 26, 189, 224, 128, 181, 61, 211, 197, 193, 61, 108, 121, 109, 60, 192, 111, 180, 60, 200, 170, 152, 189, 243, 221, 111, 61, 40, 137, 0, 62, 70, 224, 87, 61, 31, 220, 131, 61, 221, 198, 197, 61, 221, 63, 54, 62, 221, 205, 184, 61, 167, 240, 195, 61, 90, 128, 84, 190, 57, 1, 3, 62, 28, 132, 27, 189, 93, 240, 232, 59, 72, 56, 124, 61, 119, 1, 115, 61, 55, 224, 178, 61, 115, 21, 39, 62, 59, 49, 132, 62, 198, 148, 7, 190, 126, 159, 142, 191, 166, 235, 72, 62, 121, 77, 83, 189, 139, 42, 223, 188, 42, 228, 43, 189, 115, 250, 215, 60, 95, 84, 155, 190, 95, 94, 118, 189, 103, 89, 78, 60, 107, 6, 25, 189, 202, 178, 105, 62, 83, 230, 132, 190, 76, 148, 141, 189, 204, 223, 172, 187, 143, 208, 233, 61, 227, 112, 119, 61, 61, 168, 209, 58, 80, 104, 198, 189, 178, 105, 153, 190, 182, 226, 54, 190, 215, 134, 112, 191, 32, 12, 130, 190, 111, 230, 204, 61, 117, 142, 232, 188, 102, 106, 96, 62, 131, 109, 228, 189, 119, 181, 224, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 34, 177, 62, 192, 28, 9, 62, 72, 86, 88, 189, 238, 176, 243, 61, 22, 43, 85, 61, 249, 143, 221, 189, 115, 142, 48, 62, 141, 207, 29, 188, 161, 30, 10, 190, 138, 64, 46, 190, 86, 252, 53, 190, 151, 116, 132, 61, 51, 27, 136, 62, 131, 167, 63, 190, 4, 120, 5, 62, 169, 87, 54, 190, 196, 10, 132, 189, 105, 93, 30, 189, 14, 168, 112, 62, 211, 250, 132, 189, 90, 172, 69, 62, 50, 179, 241, 61, 146, 164, 170, 61, 64, 185, 14, 190, 49, 70, 0, 62, 199, 192, 107, 62, 227, 211, 103, 190, 111, 202, 14, 62, 112, 180, 136, 62, 96, 118, 49, 190, 109, 125, 14, 62, 121, 42, 132, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 2, 137, 190, 222, 221, 207, 190, 131, 185, 73, 60, 39, 205, 219, 62, 124, 41, 208, 190, 149, 216, 19, 63, 120, 222, 50, 191, 8, 153, 67, 63, 155, 154, 131, 189, 188, 180, 250, 189, 234, 160, 52, 191, 8, 116, 159, 62, 128, 40, 88, 63, 248, 131, 77, 190, 222, 230, 76, 62, 5, 181, 170, 61, 211, 187, 48, 190, 205, 108, 194, 190, 81, 99, 146, 62, 185, 174, 8, 62, 127, 0, 205, 62, 205, 115, 57, 190, 255, 237, 31, 190, 220, 15, 216, 190, 136, 58, 35, 63, 205, 46, 166, 62, 9, 57, 147, 62, 74, 44, 136, 189, 58, 94, 68, 63, 151, 12, 28, 190, 139, 238, 70, 189, 6, 190, 14, 191, 205, 235, 184, 190, 198, 2, 198, 190, 17, 194, 85, 189, 35, 47, 142, 188, 87, 46, 215, 189, 24, 65, 181, 62, 123, 172, 185, 61, 181, 162, 102, 62, 187, 23, 118, 189, 222, 106, 224, 61, 168, 68, 146, 62, 235, 130, 123, 189, 224, 187, 157, 61, 86, 187, 168, 62, 52, 161, 181, 60, 207, 199, 95, 188, 35, 171, 159, 189, 87, 97, 78, 62, 113, 211, 211, 61, 255, 187, 206, 188, 219, 173, 144, 190, 29, 53, 177, 61, 103, 75, 128, 61, 31, 224, 32, 62, 28, 146, 178, 62, 126, 169, 39, 190, 203, 94, 63, 62, 67, 66, 45, 190, 180, 50, 48, 190, 157, 103, 11, 61, 227, 98, 42, 190, 144, 252, 236, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 223, 32, 190, 122, 196, 164, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {37, 250, 12, 62, 148, 219, 122, 191, 55, 163, 237, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {101, 220, 4, 191, 254, 44, 241, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0059/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}