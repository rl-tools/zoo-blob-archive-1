// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 29, 219, 62, 151, 63, 54, 190, 144, 144, 171, 59, 220, 220, 41, 191, 200, 229, 231, 62, 28, 241, 16, 62, 86, 222, 245, 190, 52, 96, 134, 191, 18, 214, 111, 189, 23, 13, 148, 190, 223, 69, 32, 191, 118, 135, 149, 62, 58, 179, 191, 62, 227, 3, 148, 191, 90, 120, 5, 191, 209, 140, 37, 190, 87, 36, 198, 63, 42, 254, 206, 62, 157, 149, 30, 189, 77, 166, 192, 190, 186, 223, 246, 190, 76, 20, 7, 191, 79, 235, 151, 62, 137, 150, 37, 62, 121, 140, 12, 63, 202, 78, 45, 191, 223, 239, 108, 62, 10, 125, 43, 191, 116, 197, 143, 62, 67, 208, 28, 62, 220, 69, 78, 63, 85, 117, 39, 191, 222, 229, 140, 190, 167, 166, 186, 61, 196, 117, 20, 189, 163, 216, 9, 191, 20, 72, 30, 191, 53, 228, 61, 63, 201, 129, 80, 62, 148, 213, 175, 189, 33, 162, 214, 62, 56, 227, 2, 63, 218, 245, 78, 63, 183, 111, 60, 63, 152, 33, 137, 62, 130, 73, 5, 191, 252, 89, 196, 62, 141, 57, 9, 191, 137, 93, 169, 190, 137, 104, 117, 63, 235, 174, 20, 189, 3, 34, 27, 191, 23, 128, 221, 191, 13, 190, 213, 190, 109, 137, 13, 63, 58, 85, 65, 63, 126, 212, 229, 62, 93, 30, 46, 191, 40, 168, 157, 191, 65, 65, 178, 190, 129, 89, 163, 62, 203, 209, 222, 61, 210, 250, 127, 190, 246, 217, 147, 62, 57, 1, 172, 190, 158, 189, 30, 60, 251, 191, 79, 190, 168, 4, 134, 63, 61, 247, 143, 190, 49, 47, 59, 63, 113, 102, 31, 62, 179, 46, 129, 62, 202, 162, 155, 62, 50, 232, 196, 61, 155, 226, 15, 63, 61, 132, 159, 189, 33, 140, 157, 63, 254, 136, 247, 62, 195, 204, 135, 190, 72, 253, 36, 189, 118, 47, 36, 63, 227, 164, 144, 62, 239, 74, 67, 62, 103, 226, 25, 63, 172, 12, 123, 189, 251, 80, 6, 188, 201, 18, 136, 60, 214, 108, 63, 63, 57, 42, 152, 63, 76, 162, 140, 62, 117, 232, 7, 191, 9, 166, 35, 190, 167, 239, 1, 63, 90, 87, 9, 63, 68, 246, 90, 191, 70, 221, 46, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 126, 25, 191, 20, 246, 60, 63, 200, 16, 28, 63, 96, 137, 7, 63, 195, 204, 212, 190, 79, 207, 255, 190, 114, 63, 128, 62, 98, 137, 71, 63, 86, 70, 158, 62, 222, 186, 93, 63, 100, 248, 7, 63, 173, 108, 78, 191, 217, 111, 166, 62, 80, 61, 133, 190, 113, 215, 0, 191, 6, 106, 179, 190, 25, 130, 188, 190, 27, 19, 218, 61, 74, 83, 22, 62, 96, 97, 57, 61, 132, 116, 221, 189, 123, 91, 1, 191, 80, 180, 222, 62, 140, 158, 105, 191, 3, 136, 82, 62, 7, 153, 255, 190, 151, 82, 169, 190, 171, 241, 201, 190, 183, 241, 134, 190, 116, 68, 5, 190, 24, 23, 166, 190, 211, 136, 201, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 157, 32, 190, 227, 34, 193, 188, 144, 28, 59, 189, 172, 32, 138, 189, 85, 57, 86, 189, 120, 140, 138, 190, 105, 102, 135, 189, 17, 68, 126, 62, 215, 161, 162, 62, 152, 24, 146, 189, 177, 129, 193, 61, 14, 37, 38, 190, 193, 225, 170, 189, 172, 94, 177, 188, 9, 4, 134, 62, 158, 110, 93, 62, 55, 13, 40, 62, 98, 83, 92, 61, 170, 112, 120, 62, 25, 236, 157, 189, 215, 59, 193, 59, 209, 233, 175, 61, 110, 164, 136, 62, 101, 18, 73, 63, 71, 172, 103, 62, 128, 53, 146, 190, 93, 6, 174, 61, 215, 184, 19, 61, 0, 201, 25, 190, 85, 46, 205, 61, 109, 116, 206, 189, 227, 193, 225, 61, 203, 53, 76, 189, 100, 95, 43, 190, 239, 34, 128, 62, 223, 104, 103, 190, 243, 144, 10, 191, 25, 75, 248, 190, 175, 251, 57, 62, 218, 73, 250, 60, 150, 151, 99, 62, 44, 130, 170, 190, 167, 219, 134, 62, 71, 18, 198, 61, 37, 38, 177, 190, 171, 63, 52, 190, 84, 213, 116, 189, 105, 52, 218, 187, 249, 65, 169, 62, 27, 246, 241, 190, 152, 89, 197, 61, 193, 15, 31, 62, 181, 28, 65, 62, 151, 112, 17, 62, 168, 122, 33, 190, 6, 125, 81, 190, 69, 139, 211, 61, 114, 204, 17, 191, 138, 184, 185, 190, 45, 95, 108, 190, 190, 97, 162, 189, 127, 1, 149, 189, 13, 133, 110, 190, 122, 161, 4, 190, 168, 240, 169, 61, 173, 80, 23, 190, 62, 26, 40, 62, 225, 0, 75, 189, 206, 89, 210, 187, 250, 92, 105, 189, 247, 21, 5, 190, 163, 107, 196, 189, 29, 60, 170, 189, 111, 112, 25, 190, 230, 58, 76, 189, 215, 62, 184, 189, 253, 136, 4, 62, 87, 218, 212, 189, 123, 108, 247, 61, 87, 40, 21, 61, 78, 11, 8, 61, 215, 116, 13, 189, 227, 66, 206, 61, 184, 53, 249, 189, 187, 196, 30, 62, 70, 95, 37, 190, 244, 54, 28, 189, 204, 226, 136, 58, 162, 83, 0, 190, 156, 213, 244, 189, 204, 18, 140, 185, 65, 195, 216, 61, 222, 6, 21, 62, 214, 22, 221, 61, 193, 164, 108, 189, 23, 7, 31, 190, 186, 155, 43, 62, 198, 202, 196, 61, 74, 199, 181, 59, 207, 5, 21, 188, 160, 102, 169, 61, 8, 254, 248, 61, 64, 175, 156, 190, 129, 24, 172, 189, 21, 144, 139, 62, 49, 131, 213, 61, 200, 129, 176, 62, 222, 210, 194, 62, 254, 91, 60, 62, 157, 161, 158, 189, 26, 16, 68, 191, 252, 74, 143, 190, 172, 202, 144, 62, 203, 191, 63, 191, 223, 139, 145, 189, 122, 173, 176, 191, 86, 89, 136, 62, 250, 232, 43, 62, 179, 224, 137, 190, 97, 96, 35, 191, 168, 108, 106, 61, 9, 99, 133, 62, 126, 10, 32, 61, 77, 102, 119, 190, 135, 244, 34, 62, 73, 155, 178, 190, 201, 226, 14, 62, 194, 190, 38, 62, 53, 23, 161, 61, 0, 53, 215, 61, 210, 193, 156, 62, 250, 33, 7, 63, 70, 40, 135, 189, 33, 36, 142, 191, 75, 76, 21, 62, 205, 78, 77, 62, 98, 176, 64, 190, 9, 122, 39, 190, 161, 154, 206, 61, 35, 252, 26, 190, 162, 246, 185, 189, 138, 174, 152, 62, 164, 136, 26, 191, 56, 130, 128, 61, 72, 183, 250, 190, 230, 176, 33, 61, 39, 214, 186, 190, 159, 170, 93, 61, 114, 84, 132, 61, 56, 254, 139, 187, 13, 103, 91, 62, 197, 174, 76, 190, 55, 117, 156, 190, 35, 43, 173, 191, 111, 167, 9, 190, 231, 239, 221, 60, 69, 98, 35, 61, 26, 117, 140, 59, 7, 73, 100, 190, 190, 233, 13, 190, 135, 62, 47, 190, 26, 111, 147, 191, 106, 109, 155, 190, 178, 248, 210, 190, 59, 254, 152, 62, 93, 218, 172, 62, 2, 221, 59, 62, 229, 16, 165, 191, 138, 105, 78, 62, 148, 82, 145, 191, 67, 192, 220, 61, 14, 138, 108, 62, 180, 221, 173, 190, 63, 140, 111, 62, 149, 47, 99, 62, 114, 26, 187, 189, 184, 15, 118, 62, 223, 31, 171, 188, 232, 49, 186, 61, 209, 138, 70, 190, 84, 173, 83, 62, 45, 42, 232, 189, 18, 37, 26, 61, 152, 53, 255, 62, 201, 171, 166, 60, 147, 50, 156, 62, 195, 99, 186, 62, 73, 121, 156, 62, 216, 255, 103, 189, 149, 131, 76, 190, 135, 229, 47, 61, 181, 29, 172, 62, 47, 31, 154, 189, 5, 21, 210, 187, 86, 6, 101, 62, 77, 32, 112, 62, 231, 208, 195, 190, 12, 4, 177, 191, 16, 15, 217, 61, 10, 39, 171, 61, 80, 156, 235, 60, 133, 97, 186, 61, 54, 143, 48, 61, 125, 205, 143, 190, 212, 55, 81, 61, 73, 122, 62, 61, 135, 141, 1, 63, 115, 177, 42, 62, 41, 28, 174, 190, 27, 31, 250, 188, 43, 24, 21, 62, 34, 180, 231, 61, 140, 25, 130, 187, 218, 241, 152, 189, 106, 175, 181, 61, 56, 127, 204, 60, 98, 220, 139, 189, 124, 55, 220, 191, 189, 190, 15, 191, 246, 79, 168, 60, 145, 118, 44, 190, 125, 194, 218, 61, 189, 113, 5, 191, 205, 171, 113, 190, 9, 69, 183, 61, 215, 122, 141, 187, 191, 56, 75, 62, 90, 78, 243, 61, 22, 150, 167, 62, 166, 245, 103, 190, 224, 96, 248, 60, 119, 158, 30, 190, 199, 108, 109, 62, 65, 132, 68, 188, 233, 178, 21, 62, 243, 250, 227, 60, 69, 168, 46, 190, 176, 174, 61, 190, 74, 139, 69, 191, 46, 198, 8, 190, 225, 155, 26, 189, 229, 234, 254, 190, 129, 123, 227, 188, 89, 132, 116, 191, 197, 119, 143, 189, 129, 237, 222, 61, 247, 46, 141, 189, 240, 151, 0, 191, 65, 140, 62, 189, 79, 225, 81, 190, 207, 148, 82, 61, 213, 39, 142, 61, 56, 170, 206, 61, 12, 64, 63, 191, 24, 116, 40, 62, 221, 194, 245, 62, 108, 13, 45, 189, 30, 112, 21, 190, 182, 64, 35, 190, 42, 156, 49, 190, 43, 57, 205, 60, 40, 39, 40, 189, 133, 253, 7, 62, 84, 131, 0, 190, 215, 127, 138, 60, 47, 125, 124, 60, 79, 48, 36, 188, 89, 5, 143, 189, 125, 198, 229, 61, 116, 16, 37, 62, 239, 65, 134, 189, 227, 98, 246, 189, 148, 126, 31, 61, 239, 138, 154, 187, 227, 14, 200, 189, 223, 56, 181, 189, 216, 70, 131, 187, 11, 117, 187, 189, 78, 168, 172, 189, 55, 164, 189, 189, 218, 166, 30, 61, 77, 214, 214, 188, 82, 170, 232, 61, 249, 237, 39, 190, 67, 170, 115, 61, 11, 193, 207, 188, 49, 185, 217, 189, 106, 29, 160, 61, 119, 176, 248, 189, 76, 113, 45, 190, 208, 129, 172, 61, 76, 52, 113, 61, 16, 232, 5, 62, 102, 34, 6, 62, 223, 28, 149, 188, 62, 211, 207, 189, 124, 126, 124, 60, 52, 4, 17, 190, 77, 1, 58, 189, 231, 56, 189, 61, 80, 154, 93, 61, 41, 20, 47, 189, 223, 213, 203, 60, 120, 74, 107, 189, 248, 53, 188, 61, 187, 152, 234, 189, 153, 12, 4, 190, 207, 159, 88, 189, 137, 224, 14, 189, 172, 80, 147, 189, 135, 95, 24, 190, 180, 163, 251, 61, 191, 227, 122, 188, 141, 26, 162, 60, 164, 177, 237, 189, 170, 5, 187, 189, 242, 189, 244, 188, 159, 225, 154, 189, 141, 237, 129, 188, 42, 163, 108, 60, 78, 210, 102, 188, 85, 71, 110, 59, 36, 145, 188, 62, 234, 52, 1, 63, 209, 26, 139, 61, 50, 229, 172, 191, 188, 201, 131, 190, 215, 79, 170, 61, 118, 34, 214, 62, 60, 177, 238, 61, 202, 181, 252, 188, 121, 249, 255, 61, 89, 130, 105, 62, 170, 70, 162, 62, 235, 58, 16, 190, 245, 64, 206, 189, 23, 14, 0, 191, 72, 246, 99, 62, 208, 167, 130, 191, 89, 154, 142, 190, 237, 205, 4, 191, 34, 212, 41, 189, 1, 228, 152, 190, 94, 44, 76, 190, 109, 151, 241, 188, 9, 193, 132, 191, 126, 64, 0, 191, 51, 241, 65, 61, 127, 165, 49, 190, 150, 51, 31, 190, 249, 99, 153, 190, 97, 65, 61, 62, 11, 135, 134, 189, 8, 58, 50, 191, 27, 80, 46, 190, 9, 18, 68, 191, 38, 115, 150, 62, 246, 60, 160, 189, 95, 136, 61, 62, 4, 119, 162, 191, 3, 150, 68, 62, 139, 11, 174, 191, 187, 212, 7, 62, 87, 0, 25, 189, 159, 52, 138, 191, 129, 140, 144, 62, 62, 41, 43, 62, 198, 107, 0, 62, 222, 45, 157, 62, 76, 128, 122, 61, 253, 93, 158, 62, 2, 196, 5, 62, 76, 30, 104, 189, 115, 253, 175, 189, 137, 168, 20, 62, 53, 20, 36, 190, 157, 223, 135, 190, 224, 228, 219, 189, 74, 6, 84, 61, 134, 41, 141, 61, 67, 107, 61, 186, 7, 94, 46, 191, 129, 69, 247, 188, 8, 120, 138, 62, 227, 68, 63, 61, 20, 79, 10, 190, 101, 26, 69, 61, 207, 108, 15, 62, 136, 78, 163, 60, 11, 11, 198, 189, 40, 52, 249, 190, 150, 192, 224, 60, 154, 184, 22, 62, 44, 101, 6, 62, 176, 240, 180, 62, 134, 172, 215, 189, 29, 155, 165, 189, 198, 149, 33, 190, 213, 170, 47, 191, 62, 10, 98, 191, 75, 154, 182, 62, 71, 190, 127, 191, 23, 72, 165, 190, 255, 182, 216, 191, 73, 137, 87, 62, 55, 158, 2, 62, 123, 184, 82, 62, 29, 224, 6, 191, 1, 8, 61, 61, 246, 70, 168, 189, 13, 146, 31, 62, 122, 72, 152, 190, 120, 112, 11, 190, 203, 100, 239, 190, 221, 176, 239, 61, 234, 140, 223, 62, 252, 50, 16, 190, 215, 191, 14, 190, 252, 88, 54, 190, 98, 166, 17, 190, 177, 4, 84, 190, 91, 193, 126, 190, 242, 49, 179, 190, 151, 132, 169, 61, 252, 222, 62, 61, 203, 10, 22, 189, 126, 134, 103, 190, 33, 202, 225, 61, 185, 230, 173, 189, 145, 152, 1, 189, 242, 166, 57, 63, 106, 168, 168, 62, 11, 5, 152, 62, 9, 121, 129, 190, 223, 64, 167, 62, 168, 25, 60, 190, 32, 169, 41, 190, 188, 99, 177, 189, 186, 188, 96, 62, 95, 39, 72, 63, 16, 92, 179, 61, 138, 115, 172, 190, 24, 31, 220, 61, 124, 203, 8, 189, 181, 51, 182, 61, 3, 154, 187, 62, 199, 185, 212, 189, 108, 23, 229, 190, 216, 201, 250, 61, 32, 54, 179, 189, 102, 239, 103, 62, 69, 189, 233, 189, 150, 216, 98, 189, 189, 96, 123, 190, 51, 236, 50, 62, 188, 127, 95, 190, 202, 211, 50, 62, 253, 132, 190, 61, 242, 155, 27, 62, 94, 254, 155, 189, 147, 33, 223, 190, 63, 101, 221, 187, 68, 5, 0, 191, 77, 53, 129, 61, 134, 150, 1, 191, 47, 96, 20, 61, 212, 175, 48, 189, 196, 137, 100, 62, 199, 25, 140, 189, 248, 168, 135, 61, 255, 69, 201, 60, 127, 186, 148, 190, 77, 13, 25, 189, 36, 174, 193, 190, 53, 187, 42, 61, 106, 8, 61, 190, 27, 233, 238, 189, 117, 198, 42, 190, 122, 112, 148, 188, 150, 182, 89, 62, 246, 113, 213, 188, 236, 9, 244, 61, 59, 2, 4, 190, 39, 73, 227, 186, 112, 28, 145, 189, 105, 237, 198, 61, 138, 159, 234, 61, 22, 160, 6, 190, 248, 22, 244, 61, 105, 41, 215, 189, 1, 38, 241, 189, 217, 18, 81, 190, 173, 60, 52, 190, 190, 155, 34, 190, 255, 36, 142, 61, 62, 200, 210, 61, 210, 27, 222, 61, 232, 249, 142, 189, 71, 100, 26, 190, 20, 162, 235, 61, 71, 153, 69, 189, 194, 166, 25, 62, 179, 121, 29, 189, 247, 150, 62, 189, 148, 104, 153, 60, 64, 176, 155, 61, 3, 72, 159, 189, 84, 171, 125, 189, 8, 184, 77, 188, 177, 122, 22, 61, 236, 128, 18, 61, 91, 238, 188, 61, 109, 121, 97, 189, 13, 15, 73, 62, 56, 49, 186, 59, 0, 155, 98, 61, 133, 106, 118, 190, 34, 163, 28, 191, 204, 155, 39, 62, 184, 15, 139, 61, 135, 247, 96, 61, 59, 9, 83, 189, 20, 165, 46, 60, 196, 64, 148, 61, 187, 98, 152, 61, 138, 187, 10, 190, 156, 13, 194, 188, 34, 211, 48, 62, 79, 52, 242, 190, 192, 215, 3, 190, 130, 181, 196, 61, 100, 152, 222, 61, 203, 208, 194, 61, 106, 230, 200, 61, 116, 214, 33, 61, 147, 1, 64, 190, 191, 178, 32, 61, 168, 77, 4, 191, 55, 58, 173, 189, 15, 71, 64, 189, 245, 228, 7, 62, 175, 171, 136, 189, 198, 67, 142, 190, 208, 30, 60, 190, 162, 124, 163, 188, 21, 12, 36, 62, 152, 144, 143, 183, 94, 160, 152, 189, 73, 127, 185, 190, 98, 83, 231, 190, 105, 231, 102, 62, 77, 92, 248, 189, 200, 189, 13, 62, 7, 93, 5, 62, 115, 216, 151, 188, 140, 227, 204, 190, 186, 160, 142, 61, 168, 160, 211, 190, 20, 254, 139, 62, 55, 231, 5, 62, 152, 106, 89, 190, 148, 15, 146, 189, 187, 54, 157, 62, 116, 198, 244, 62, 210, 53, 242, 60, 27, 89, 213, 189, 3, 162, 183, 62, 87, 219, 137, 62, 25, 174, 60, 61, 104, 92, 66, 191, 240, 42, 31, 59, 35, 38, 41, 190, 222, 148, 238, 61, 186, 160, 172, 62, 179, 193, 150, 190, 36, 206, 242, 190, 77, 177, 216, 189, 93, 130, 32, 189, 161, 145, 211, 62, 151, 139, 58, 62, 192, 224, 5, 190, 228, 20, 94, 62, 144, 81, 154, 188, 213, 59, 19, 61, 83, 209, 221, 61, 177, 63, 63, 62, 198, 139, 80, 62, 83, 28, 173, 190, 1, 103, 90, 62, 206, 24, 57, 190, 168, 24, 146, 191, 181, 165, 251, 189, 214, 43, 143, 62, 33, 175, 198, 61, 183, 130, 120, 190, 18, 168, 196, 61, 150, 11, 122, 190, 5, 214, 127, 61, 212, 154, 186, 61, 27, 4, 21, 191, 242, 11, 130, 62, 11, 88, 142, 189, 50, 108, 6, 190, 72, 34, 112, 190, 11, 244, 248, 189, 139, 254, 221, 190, 195, 73, 178, 60, 172, 229, 151, 62, 54, 192, 253, 188, 112, 129, 240, 189, 51, 229, 176, 62, 39, 212, 48, 190, 11, 5, 153, 189, 116, 241, 126, 190, 178, 17, 140, 62, 41, 158, 157, 61, 210, 178, 151, 188, 149, 184, 156, 61, 178, 112, 70, 62, 19, 165, 42, 60, 128, 230, 112, 190, 228, 215, 95, 61, 168, 81, 208, 190, 83, 123, 5, 189, 100, 86, 116, 190, 213, 144, 34, 189, 72, 79, 186, 61, 105, 157, 168, 60, 137, 229, 251, 61, 55, 185, 57, 61, 101, 23, 43, 190, 122, 160, 163, 190, 164, 200, 24, 187, 100, 183, 97, 190, 136, 191, 221, 189, 69, 145, 216, 61, 240, 153, 21, 190, 226, 215, 4, 190, 85, 197, 70, 190, 8, 123, 246, 61, 182, 219, 21, 190, 168, 177, 37, 191, 77, 153, 104, 189, 185, 91, 72, 190, 38, 255, 38, 62, 62, 203, 219, 190, 60, 156, 186, 187, 156, 206, 25, 191, 108, 43, 23, 61, 207, 35, 30, 191, 127, 118, 159, 62, 98, 80, 105, 187, 17, 51, 176, 191, 96, 115, 84, 188, 231, 41, 19, 190, 46, 84, 175, 188, 96, 88, 31, 62, 188, 45, 209, 189, 55, 107, 4, 62, 247, 242, 255, 187, 84, 170, 84, 61, 253, 159, 114, 189, 174, 73, 33, 62, 73, 90, 66, 62, 87, 190, 127, 61, 100, 159, 181, 190, 17, 57, 45, 190, 194, 204, 75, 61, 221, 201, 3, 190, 78, 171, 85, 189, 201, 70, 52, 190, 68, 204, 115, 62, 112, 201, 181, 60, 209, 174, 134, 62, 250, 98, 240, 187, 109, 193, 64, 191, 56, 252, 15, 189, 93, 50, 255, 60, 67, 73, 17, 62, 180, 215, 187, 62, 177, 207, 70, 191, 63, 212, 102, 61, 244, 137, 132, 190, 70, 19, 146, 60, 201, 238, 254, 62, 140, 176, 139, 190, 153, 39, 161, 61, 192, 254, 199, 61, 253, 69, 227, 61, 120, 255, 157, 189, 62, 211, 18, 189, 118, 203, 136, 61, 157, 7, 225, 61, 119, 185, 112, 61, 105, 65, 121, 62, 84, 219, 143, 190, 23, 126, 187, 190, 132, 104, 114, 189, 93, 236, 34, 191, 37, 229, 176, 190, 246, 81, 248, 59, 160, 166, 214, 62, 91, 33, 79, 191, 95, 217, 98, 190, 201, 97, 1, 189, 129, 6, 36, 62, 186, 109, 48, 190, 222, 28, 35, 190, 75, 217, 115, 62, 187, 26, 255, 189, 95, 45, 107, 61, 79, 70, 22, 190, 64, 204, 72, 62, 140, 207, 219, 61, 112, 109, 177, 61, 228, 11, 124, 189, 132, 232, 7, 190, 142, 253, 99, 189, 62, 213, 11, 63, 157, 137, 132, 190, 179, 14, 187, 62, 20, 52, 11, 62, 22, 203, 60, 62, 24, 97, 139, 190, 221, 4, 72, 61, 250, 32, 5, 189, 26, 98, 171, 189, 42, 69, 72, 63, 16, 70, 71, 188, 220, 22, 247, 189, 68, 255, 201, 189, 184, 6, 69, 62, 232, 173, 26, 62, 94, 149, 13, 62, 200, 128, 42, 62, 34, 39, 246, 61, 90, 87, 37, 62, 136, 220, 171, 190, 96, 227, 174, 62, 138, 45, 99, 62, 53, 72, 219, 62, 124, 26, 48, 62, 63, 90, 185, 188, 245, 203, 199, 188, 20, 14, 167, 62, 27, 162, 206, 61, 138, 158, 63, 62, 74, 223, 180, 62, 142, 57, 157, 190, 205, 137, 72, 189, 217, 209, 209, 62, 14, 157, 93, 62, 158, 34, 210, 190, 102, 122, 146, 62, 145, 151, 251, 189, 150, 159, 113, 61, 39, 40, 139, 60, 60, 85, 17, 190, 144, 73, 46, 191, 178, 213, 197, 62, 182, 148, 172, 62, 79, 29, 145, 62, 63, 98, 117, 62, 157, 135, 91, 62, 43, 198, 103, 188, 239, 241, 109, 190, 224, 106, 44, 62, 166, 129, 135, 62, 242, 232, 195, 187, 123, 227, 139, 60, 166, 140, 194, 189, 244, 87, 143, 61, 208, 91, 204, 62, 91, 145, 184, 62, 86, 247, 233, 189, 220, 232, 82, 61, 105, 97, 30, 188, 83, 38, 102, 62, 46, 134, 1, 188, 28, 45, 125, 62, 42, 76, 10, 62, 83, 134, 11, 189, 160, 231, 31, 191, 240, 152, 212, 60, 185, 121, 62, 62, 98, 250, 48, 191, 239, 98, 92, 190, 71, 34, 66, 191, 122, 154, 88, 59, 211, 87, 30, 62, 133, 228, 68, 190, 52, 30, 96, 191, 217, 71, 15, 62, 111, 99, 232, 62, 46, 7, 7, 62, 163, 90, 97, 190, 134, 206, 66, 189, 189, 101, 26, 191, 242, 45, 116, 62, 187, 200, 244, 62, 53, 191, 84, 189, 126, 221, 35, 189, 112, 207, 232, 61, 24, 243, 64, 62, 114, 139, 63, 62, 100, 74, 222, 62, 240, 142, 235, 61, 106, 192, 30, 61, 11, 115, 113, 62, 230, 6, 134, 188, 183, 132, 92, 62, 125, 16, 45, 189, 215, 118, 136, 62, 5, 51, 131, 189, 232, 226, 21, 191, 5, 110, 21, 190, 46, 135, 72, 189, 231, 177, 183, 189, 227, 159, 195, 61, 49, 204, 210, 189, 93, 223, 113, 190, 96, 147, 168, 189, 184, 65, 154, 190, 4, 39, 3, 191, 243, 119, 135, 62, 170, 91, 199, 62, 69, 17, 166, 62, 124, 227, 73, 190, 208, 9, 253, 61, 149, 59, 35, 190, 190, 202, 52, 61, 38, 172, 55, 62, 185, 228, 16, 61, 64, 55, 213, 189, 6, 84, 236, 189, 195, 205, 239, 190, 202, 78, 61, 188, 216, 121, 205, 190, 54, 14, 112, 62, 113, 203, 150, 188, 150, 49, 139, 191, 195, 112, 13, 189, 64, 69, 213, 187, 209, 19, 60, 62, 8, 3, 158, 62, 119, 203, 249, 190, 10, 232, 241, 60, 95, 245, 47, 62, 206, 225, 101, 62, 55, 167, 89, 189, 235, 23, 80, 60, 21, 150, 133, 62, 249, 239, 50, 189, 40, 198, 0, 190, 48, 102, 151, 60, 6, 121, 105, 190, 250, 169, 218, 190, 251, 173, 152, 190, 169, 116, 248, 190, 53, 163, 4, 191, 251, 253, 29, 62, 84, 34, 194, 190, 0, 86, 244, 190, 203, 150, 30, 189, 134, 146, 81, 188, 76, 217, 139, 62, 109, 56, 16, 190, 169, 219, 248, 189, 32, 43, 10, 191, 25, 164, 127, 189, 194, 253, 140, 189, 20, 200, 233, 61, 94, 14, 5, 62, 78, 194, 53, 62, 6, 47, 177, 60, 240, 57, 121, 188, 34, 121, 80, 61, 107, 5, 153, 61, 214, 146, 76, 190, 154, 47, 19, 61, 66, 196, 188, 62, 22, 244, 244, 190, 100, 206, 169, 189, 43, 40, 82, 190, 42, 83, 178, 61, 251, 28, 28, 190, 110, 155, 36, 62, 125, 157, 14, 63, 240, 78, 239, 61, 199, 143, 56, 190, 234, 138, 188, 61, 192, 96, 155, 189, 253, 70, 220, 189, 6, 144, 181, 60, 93, 43, 66, 61, 37, 139, 16, 188, 78, 228, 34, 190, 130, 240, 181, 61, 23, 248, 72, 189, 36, 233, 36, 189, 73, 52, 88, 61, 72, 242, 92, 188, 245, 4, 196, 190, 1, 175, 145, 61, 19, 214, 103, 62, 28, 93, 102, 186, 128, 123, 43, 62, 85, 34, 149, 62, 46, 242, 244, 189, 238, 250, 244, 189, 207, 134, 85, 191, 3, 44, 66, 191, 54, 184, 37, 62, 23, 91, 95, 191, 236, 121, 143, 190, 103, 208, 208, 191, 82, 18, 171, 62, 107, 1, 19, 61, 231, 94, 84, 61, 173, 160, 8, 191, 162, 35, 58, 62, 173, 68, 59, 189, 97, 181, 35, 62, 249, 220, 145, 190, 215, 182, 112, 189, 96, 248, 208, 190, 110, 230, 220, 61, 82, 157, 235, 62, 64, 114, 46, 62, 184, 75, 174, 61, 40, 224, 52, 190, 163, 65, 83, 189, 139, 74, 166, 188, 4, 57, 22, 190, 245, 100, 123, 189, 114, 136, 236, 189, 7, 152, 219, 189, 27, 102, 6, 190, 168, 4, 113, 61, 60, 116, 0, 189, 143, 217, 242, 189, 73, 34, 24, 62, 110, 129, 53, 190, 148, 53, 227, 188, 74, 2, 232, 61, 22, 167, 0, 62, 132, 141, 216, 61, 94, 192, 8, 190, 70, 189, 82, 190, 196, 208, 29, 189, 210, 186, 224, 61, 204, 154, 70, 190, 81, 94, 171, 189, 91, 53, 226, 61, 199, 127, 153, 188, 138, 162, 115, 189, 198, 104, 227, 61, 222, 26, 75, 190, 110, 147, 25, 62, 213, 237, 129, 61, 84, 0, 46, 62, 83, 250, 65, 62, 11, 218, 44, 61, 155, 35, 1, 189, 213, 43, 148, 189, 47, 54, 177, 61, 43, 227, 212, 60, 108, 107, 63, 60, 23, 38, 55, 62, 48, 207, 235, 61, 237, 205, 208, 61, 178, 49, 237, 189, 226, 195, 26, 59, 203, 155, 33, 188, 29, 178, 184, 55, 128, 104, 1, 61, 63, 131, 88, 62, 158, 21, 116, 188, 223, 7, 224, 189, 174, 174, 140, 61, 67, 90, 27, 61, 70, 224, 87, 61, 28, 41, 254, 60, 22, 81, 53, 63, 143, 58, 20, 62, 199, 252, 154, 61, 179, 242, 250, 61, 74, 226, 114, 190, 57, 1, 3, 62, 105, 219, 220, 189, 246, 181, 39, 61, 131, 164, 157, 60, 119, 1, 115, 61, 68, 181, 11, 62, 239, 189, 23, 62, 32, 64, 143, 62, 144, 244, 247, 189, 29, 250, 151, 191, 195, 248, 21, 62, 175, 213, 243, 188, 91, 93, 36, 60, 135, 18, 0, 60, 122, 123, 103, 61, 158, 92, 156, 190, 1, 34, 41, 61, 233, 224, 82, 189, 179, 139, 210, 60, 246, 188, 77, 62, 30, 164, 127, 190, 142, 78, 102, 189, 159, 1, 8, 187, 91, 107, 204, 61, 237, 246, 237, 60, 61, 168, 209, 58, 140, 201, 250, 189, 157, 153, 73, 190, 108, 109, 15, 190, 210, 8, 108, 191, 6, 25, 188, 190, 167, 6, 243, 188, 117, 142, 232, 188, 80, 53, 130, 62, 26, 249, 171, 190, 198, 200, 99, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 135, 170, 62, 126, 192, 39, 62, 72, 86, 88, 189, 125, 81, 229, 61, 251, 140, 142, 61, 154, 18, 4, 190, 117, 158, 49, 62, 172, 196, 121, 188, 161, 30, 10, 190, 138, 64, 46, 190, 180, 112, 198, 189, 107, 205, 68, 61, 195, 16, 128, 62, 182, 154, 54, 190, 42, 201, 241, 61, 0, 178, 57, 190, 248, 171, 187, 189, 175, 120, 35, 189, 45, 16, 175, 62, 77, 92, 156, 189, 35, 220, 22, 62, 150, 247, 251, 61, 87, 162, 159, 61, 169, 239, 36, 190, 169, 58, 193, 61, 128, 118, 126, 62, 244, 72, 133, 190, 82, 40, 190, 61, 96, 109, 136, 62, 96, 118, 49, 190, 226, 17, 152, 61, 109, 35, 140, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 54, 128, 190, 99, 190, 188, 190, 131, 185, 73, 60, 6, 119, 1, 63, 84, 53, 192, 190, 146, 95, 97, 63, 92, 172, 43, 191, 235, 43, 157, 63, 155, 154, 131, 189, 188, 180, 250, 189, 39, 210, 135, 191, 251, 63, 244, 62, 253, 95, 117, 63, 155, 95, 150, 190, 62, 20, 57, 62, 124, 135, 170, 61, 62, 231, 209, 188, 209, 158, 215, 190, 155, 8, 3, 63, 254, 55, 222, 61, 96, 167, 200, 62, 204, 64, 225, 190, 146, 63, 2, 190, 16, 218, 8, 191, 4, 91, 79, 63, 147, 60, 158, 62, 166, 22, 146, 62, 0, 76, 141, 189, 130, 88, 87, 63, 151, 12, 28, 190, 237, 49, 0, 189, 136, 39, 238, 190, 69, 231, 174, 190, 108, 160, 83, 191, 17, 194, 85, 189, 26, 175, 32, 190, 51, 111, 128, 189, 233, 3, 218, 62, 26, 70, 39, 62, 62, 180, 5, 63, 187, 23, 118, 189, 222, 106, 224, 61, 190, 86, 98, 62, 98, 122, 214, 189, 224, 238, 18, 190, 16, 41, 170, 62, 225, 35, 143, 59, 33, 26, 94, 188, 77, 49, 47, 188, 215, 141, 153, 62, 146, 56, 36, 62, 18, 145, 70, 189, 21, 98, 198, 190, 197, 229, 244, 189, 146, 237, 151, 59, 35, 86, 230, 60, 193, 36, 15, 63, 23, 132, 82, 190, 115, 225, 43, 62, 48, 106, 64, 190, 221, 230, 165, 190, 157, 103, 11, 61, 168, 44, 243, 189, 100, 194, 62, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 58, 28, 190, 159, 233, 176, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {222, 124, 178, 191, 243, 12, 22, 191, 80, 58, 225, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {117, 223, 89, 192, 198, 210, 50, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0059/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}