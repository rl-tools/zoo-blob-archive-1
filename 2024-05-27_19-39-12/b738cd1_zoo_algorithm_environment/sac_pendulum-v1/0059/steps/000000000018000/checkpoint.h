// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 29, 219, 62, 151, 63, 54, 190, 144, 144, 171, 59, 201, 114, 48, 191, 60, 92, 234, 62, 33, 124, 8, 62, 82, 14, 248, 190, 125, 68, 139, 191, 72, 29, 138, 189, 65, 48, 96, 190, 24, 63, 36, 191, 210, 3, 160, 62, 103, 113, 188, 62, 230, 101, 152, 191, 212, 7, 255, 190, 164, 7, 125, 189, 209, 150, 201, 63, 16, 255, 209, 62, 112, 34, 27, 189, 61, 193, 193, 190, 180, 37, 228, 190, 189, 47, 8, 191, 56, 3, 147, 62, 76, 41, 33, 62, 37, 66, 13, 63, 188, 49, 42, 191, 219, 87, 61, 62, 80, 117, 45, 191, 82, 103, 134, 62, 115, 109, 34, 62, 38, 49, 76, 63, 113, 217, 47, 191, 6, 168, 126, 190, 229, 240, 4, 62, 14, 234, 244, 188, 53, 232, 11, 191, 168, 105, 5, 191, 191, 209, 70, 63, 115, 189, 95, 62, 55, 120, 242, 189, 88, 129, 217, 62, 111, 194, 3, 63, 130, 184, 78, 63, 149, 125, 58, 63, 142, 60, 137, 62, 132, 86, 25, 191, 139, 64, 215, 62, 45, 112, 6, 191, 89, 199, 194, 190, 252, 138, 123, 63, 19, 130, 82, 189, 80, 200, 21, 191, 177, 164, 222, 191, 149, 165, 221, 190, 106, 84, 12, 63, 233, 103, 66, 63, 246, 238, 231, 62, 130, 24, 57, 191, 58, 27, 163, 191, 67, 51, 162, 190, 240, 146, 150, 62, 92, 235, 38, 62, 205, 235, 152, 190, 246, 217, 147, 62, 57, 1, 172, 190, 158, 189, 30, 60, 161, 224, 119, 190, 93, 156, 138, 63, 214, 210, 163, 190, 57, 21, 54, 63, 129, 251, 55, 62, 142, 202, 129, 62, 115, 66, 139, 62, 112, 125, 228, 61, 194, 174, 18, 63, 25, 243, 133, 187, 245, 133, 164, 63, 27, 4, 228, 62, 245, 219, 68, 190, 122, 64, 160, 189, 74, 144, 44, 63, 103, 235, 143, 62, 219, 224, 65, 62, 238, 186, 24, 63, 172, 12, 123, 189, 251, 80, 6, 188, 201, 18, 136, 60, 186, 205, 63, 63, 0, 225, 158, 63, 127, 225, 99, 62, 217, 35, 11, 191, 57, 173, 232, 189, 11, 11, 2, 63, 66, 125, 7, 63, 247, 239, 96, 191, 209, 21, 48, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 126, 25, 191, 244, 229, 57, 63, 111, 30, 24, 63, 229, 2, 13, 63, 43, 185, 215, 190, 186, 185, 9, 191, 228, 178, 129, 62, 127, 233, 71, 63, 128, 242, 157, 62, 11, 77, 93, 63, 119, 94, 6, 63, 159, 54, 70, 191, 32, 96, 180, 62, 90, 50, 140, 190, 200, 213, 2, 191, 138, 131, 191, 190, 52, 112, 194, 190, 112, 26, 34, 62, 131, 4, 13, 62, 247, 207, 208, 61, 54, 12, 9, 190, 123, 91, 1, 191, 172, 238, 207, 62, 13, 146, 108, 191, 66, 224, 53, 62, 139, 38, 16, 191, 95, 89, 136, 190, 37, 55, 205, 190, 183, 241, 134, 190, 81, 0, 9, 190, 251, 49, 157, 190, 96, 38, 183, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 157, 32, 190, 137, 188, 147, 188, 82, 187, 243, 188, 33, 130, 140, 189, 133, 43, 43, 189, 179, 179, 130, 190, 57, 172, 144, 189, 104, 102, 128, 62, 18, 11, 165, 62, 198, 18, 134, 189, 198, 53, 199, 61, 73, 45, 29, 190, 105, 251, 92, 189, 13, 210, 183, 188, 230, 174, 137, 62, 59, 142, 100, 62, 70, 26, 35, 62, 253, 43, 98, 61, 100, 63, 122, 62, 137, 34, 155, 189, 193, 66, 98, 59, 209, 233, 175, 61, 202, 19, 138, 62, 228, 248, 82, 63, 147, 167, 108, 62, 152, 192, 134, 190, 30, 104, 158, 61, 22, 60, 2, 61, 0, 201, 25, 190, 109, 55, 220, 61, 46, 129, 215, 189, 223, 155, 240, 61, 203, 53, 76, 189, 32, 195, 112, 190, 41, 108, 149, 62, 26, 193, 74, 190, 233, 133, 255, 190, 245, 77, 10, 191, 29, 144, 65, 62, 155, 171, 182, 60, 153, 79, 118, 62, 226, 78, 175, 190, 41, 230, 143, 62, 9, 162, 13, 62, 3, 188, 216, 190, 213, 14, 83, 190, 225, 151, 132, 189, 159, 129, 168, 60, 187, 55, 168, 62, 165, 58, 237, 190, 35, 230, 201, 61, 188, 23, 54, 62, 103, 49, 69, 62, 151, 112, 17, 62, 16, 123, 42, 190, 229, 88, 81, 190, 126, 208, 247, 61, 156, 146, 25, 191, 40, 164, 215, 190, 80, 106, 108, 190, 190, 97, 162, 189, 9, 253, 152, 189, 188, 126, 160, 190, 36, 165, 216, 189, 168, 240, 169, 61, 173, 80, 23, 190, 62, 26, 40, 62, 225, 0, 75, 189, 206, 89, 210, 187, 250, 92, 105, 189, 247, 21, 5, 190, 163, 107, 196, 189, 29, 60, 170, 189, 111, 112, 25, 190, 230, 58, 76, 189, 215, 62, 184, 189, 253, 136, 4, 62, 87, 218, 212, 189, 123, 108, 247, 61, 87, 40, 21, 61, 78, 11, 8, 61, 215, 116, 13, 189, 227, 66, 206, 61, 184, 53, 249, 189, 187, 196, 30, 62, 70, 95, 37, 190, 244, 54, 28, 189, 204, 226, 136, 58, 162, 83, 0, 190, 156, 213, 244, 189, 204, 18, 140, 185, 65, 195, 216, 61, 222, 6, 21, 62, 214, 22, 221, 61, 193, 164, 108, 189, 23, 7, 31, 190, 186, 155, 43, 62, 98, 125, 0, 62, 250, 185, 237, 186, 80, 207, 28, 187, 40, 7, 138, 61, 199, 247, 73, 62, 46, 219, 151, 190, 32, 152, 135, 189, 126, 200, 137, 62, 174, 199, 248, 61, 255, 185, 175, 62, 169, 88, 168, 62, 21, 32, 94, 62, 212, 77, 95, 189, 128, 101, 67, 191, 143, 129, 197, 190, 31, 17, 175, 62, 222, 65, 83, 191, 147, 113, 114, 189, 214, 68, 194, 191, 131, 109, 133, 62, 250, 232, 43, 62, 64, 213, 111, 190, 71, 111, 29, 191, 2, 202, 128, 61, 200, 134, 159, 62, 125, 113, 65, 61, 13, 113, 105, 190, 135, 244, 34, 62, 249, 154, 172, 190, 202, 145, 19, 62, 30, 6, 37, 62, 53, 23, 161, 61, 121, 222, 223, 61, 126, 237, 152, 62, 67, 219, 5, 63, 219, 211, 158, 189, 195, 44, 124, 191, 88, 27, 1, 62, 11, 1, 53, 62, 29, 120, 121, 190, 108, 69, 57, 190, 234, 119, 146, 61, 210, 170, 29, 190, 111, 78, 72, 189, 150, 119, 143, 62, 3, 90, 77, 191, 45, 43, 102, 61, 248, 173, 9, 191, 80, 202, 230, 60, 23, 88, 9, 191, 222, 139, 41, 61, 238, 103, 47, 61, 56, 254, 139, 187, 12, 30, 76, 62, 191, 184, 151, 190, 250, 81, 172, 190, 5, 18, 162, 191, 135, 120, 29, 190, 112, 124, 15, 188, 69, 98, 35, 61, 223, 45, 172, 188, 233, 32, 109, 190, 199, 52, 44, 190, 135, 62, 47, 190, 2, 47, 148, 191, 215, 74, 169, 190, 110, 227, 32, 191, 14, 118, 156, 62, 93, 218, 172, 62, 166, 24, 71, 62, 99, 102, 164, 191, 242, 236, 26, 62, 208, 0, 145, 191, 203, 36, 227, 61, 13, 89, 100, 62, 96, 227, 172, 190, 63, 140, 111, 62, 46, 220, 145, 62, 153, 206, 201, 189, 21, 133, 142, 62, 95, 199, 160, 188, 195, 215, 17, 62, 202, 211, 68, 190, 127, 185, 100, 62, 45, 42, 232, 189, 248, 145, 87, 61, 152, 53, 255, 62, 19, 74, 231, 189, 147, 50, 156, 62, 195, 99, 186, 62, 73, 121, 156, 62, 216, 255, 103, 189, 81, 120, 64, 190, 135, 229, 47, 61, 142, 250, 169, 62, 47, 31, 154, 189, 183, 207, 1, 189, 138, 72, 95, 62, 12, 7, 102, 62, 159, 162, 181, 190, 205, 143, 178, 191, 220, 152, 207, 61, 95, 165, 169, 61, 148, 66, 20, 61, 238, 58, 178, 61, 113, 0, 102, 61, 81, 87, 144, 190, 43, 248, 148, 61, 234, 218, 144, 60, 184, 7, 5, 63, 204, 3, 33, 62, 199, 77, 196, 190, 169, 146, 207, 188, 100, 247, 27, 62, 22, 170, 210, 61, 178, 27, 101, 60, 218, 241, 152, 189, 229, 88, 199, 61, 235, 65, 56, 60, 93, 14, 121, 189, 59, 6, 229, 191, 210, 82, 22, 191, 51, 97, 114, 59, 145, 118, 44, 190, 131, 123, 1, 62, 0, 163, 19, 191, 180, 99, 101, 190, 9, 69, 183, 61, 47, 141, 205, 188, 230, 42, 96, 62, 212, 9, 16, 62, 80, 212, 108, 62, 56, 80, 56, 190, 177, 29, 179, 188, 138, 240, 37, 190, 8, 200, 107, 62, 190, 163, 186, 188, 94, 24, 8, 62, 251, 31, 202, 60, 158, 91, 85, 190, 219, 20, 84, 190, 79, 29, 73, 191, 213, 185, 10, 190, 110, 163, 26, 189, 120, 141, 19, 191, 39, 244, 7, 189, 21, 224, 132, 191, 23, 82, 19, 190, 129, 237, 222, 61, 36, 41, 99, 190, 113, 151, 8, 191, 233, 199, 27, 189, 241, 188, 111, 190, 222, 8, 246, 60, 173, 255, 111, 61, 56, 170, 206, 61, 170, 203, 69, 191, 19, 236, 12, 62, 253, 112, 242, 62, 108, 13, 45, 189, 30, 112, 21, 190, 182, 64, 35, 190, 42, 156, 49, 190, 43, 57, 205, 60, 40, 39, 40, 189, 133, 253, 7, 62, 84, 131, 0, 190, 215, 127, 138, 60, 47, 125, 124, 60, 79, 48, 36, 188, 89, 5, 143, 189, 125, 198, 229, 61, 116, 16, 37, 62, 239, 65, 134, 189, 227, 98, 246, 189, 148, 126, 31, 61, 239, 138, 154, 187, 227, 14, 200, 189, 223, 56, 181, 189, 216, 70, 131, 187, 11, 117, 187, 189, 78, 168, 172, 189, 55, 164, 189, 189, 218, 166, 30, 61, 77, 214, 214, 188, 82, 170, 232, 61, 249, 237, 39, 190, 67, 170, 115, 61, 11, 193, 207, 188, 49, 185, 217, 189, 106, 29, 160, 61, 119, 176, 248, 189, 76, 113, 45, 190, 208, 129, 172, 61, 76, 52, 113, 61, 16, 232, 5, 62, 102, 34, 6, 62, 223, 28, 149, 188, 62, 211, 207, 189, 124, 126, 124, 60, 52, 4, 17, 190, 77, 1, 58, 189, 231, 56, 189, 61, 80, 154, 93, 61, 41, 20, 47, 189, 223, 213, 203, 60, 120, 74, 107, 189, 248, 53, 188, 61, 187, 152, 234, 189, 153, 12, 4, 190, 207, 159, 88, 189, 137, 224, 14, 189, 172, 80, 147, 189, 135, 95, 24, 190, 180, 163, 251, 61, 191, 227, 122, 188, 141, 26, 162, 60, 164, 177, 237, 189, 170, 5, 187, 189, 242, 189, 244, 188, 159, 225, 154, 189, 141, 237, 129, 188, 42, 163, 108, 60, 78, 210, 102, 188, 136, 127, 186, 60, 249, 97, 188, 62, 189, 156, 2, 63, 210, 85, 162, 61, 41, 41, 165, 191, 40, 161, 133, 190, 221, 78, 184, 61, 4, 164, 218, 62, 72, 95, 245, 61, 194, 183, 97, 188, 149, 193, 190, 61, 193, 160, 160, 62, 188, 181, 171, 62, 14, 18, 36, 190, 110, 205, 59, 190, 197, 218, 21, 191, 97, 102, 88, 62, 70, 15, 132, 191, 197, 155, 155, 190, 80, 43, 1, 191, 34, 212, 41, 189, 102, 175, 227, 190, 128, 99, 140, 190, 101, 190, 5, 189, 53, 141, 102, 191, 182, 246, 250, 190, 110, 249, 192, 60, 127, 165, 49, 190, 36, 205, 30, 190, 58, 240, 134, 190, 150, 126, 77, 62, 11, 135, 134, 189, 210, 183, 52, 191, 223, 119, 87, 190, 237, 50, 107, 191, 149, 38, 151, 62, 246, 60, 160, 189, 213, 243, 74, 62, 221, 23, 159, 191, 142, 71, 82, 62, 66, 102, 173, 191, 28, 180, 32, 62, 106, 29, 40, 189, 226, 71, 143, 191, 129, 140, 144, 62, 69, 152, 185, 62, 78, 131, 248, 61, 147, 90, 183, 62, 104, 213, 59, 61, 92, 247, 253, 62, 100, 188, 238, 61, 235, 177, 236, 188, 115, 253, 175, 189, 75, 247, 42, 62, 53, 20, 36, 190, 19, 210, 223, 190, 224, 228, 219, 189, 74, 6, 84, 61, 134, 41, 141, 61, 67, 107, 61, 186, 191, 74, 34, 191, 129, 69, 247, 188, 64, 175, 144, 62, 227, 68, 63, 61, 243, 84, 17, 190, 26, 223, 76, 61, 24, 61, 23, 62, 253, 165, 138, 60, 136, 146, 195, 189, 49, 62, 240, 190, 215, 182, 219, 60, 205, 187, 20, 62, 25, 214, 0, 62, 237, 215, 180, 62, 165, 34, 11, 190, 30, 20, 7, 190, 188, 202, 28, 190, 232, 151, 48, 191, 46, 191, 117, 191, 112, 210, 148, 62, 175, 238, 135, 191, 155, 75, 165, 190, 71, 46, 231, 191, 151, 237, 88, 62, 55, 158, 2, 62, 62, 209, 95, 62, 17, 186, 3, 191, 79, 198, 53, 61, 91, 227, 202, 189, 246, 231, 36, 62, 142, 30, 146, 190, 120, 112, 11, 190, 1, 26, 240, 190, 51, 49, 242, 61, 201, 55, 223, 62, 252, 50, 16, 190, 103, 244, 33, 190, 219, 188, 73, 190, 214, 53, 13, 190, 113, 29, 95, 190, 139, 188, 141, 190, 45, 5, 199, 190, 146, 141, 130, 61, 179, 204, 32, 61, 162, 114, 94, 189, 122, 172, 111, 190, 30, 179, 209, 61, 207, 200, 224, 189, 161, 134, 9, 189, 84, 9, 54, 63, 149, 84, 171, 62, 48, 62, 159, 62, 109, 150, 129, 190, 168, 211, 157, 62, 255, 13, 54, 190, 46, 50, 43, 190, 188, 99, 177, 189, 132, 80, 39, 62, 148, 58, 80, 63, 100, 135, 174, 61, 138, 58, 181, 190, 228, 75, 6, 62, 37, 160, 235, 188, 181, 51, 182, 61, 33, 157, 171, 62, 171, 56, 151, 189, 193, 30, 225, 190, 216, 201, 250, 61, 252, 204, 6, 189, 140, 148, 115, 62, 28, 19, 200, 189, 175, 221, 110, 189, 189, 96, 123, 190, 37, 213, 52, 62, 85, 145, 80, 190, 149, 112, 46, 62, 27, 1, 233, 61, 60, 176, 17, 62, 69, 162, 160, 189, 99, 148, 196, 190, 198, 153, 49, 61, 133, 177, 0, 191, 32, 89, 131, 61, 88, 161, 235, 190, 166, 168, 47, 61, 114, 43, 43, 189, 220, 238, 110, 62, 254, 254, 168, 189, 248, 168, 135, 61, 10, 180, 173, 60, 87, 243, 124, 190, 103, 59, 14, 189, 75, 70, 198, 190, 152, 106, 194, 61, 244, 28, 14, 190, 27, 233, 238, 189, 201, 209, 54, 190, 55, 16, 8, 61, 199, 9, 80, 62, 246, 113, 213, 188, 236, 9, 244, 61, 59, 2, 4, 190, 39, 73, 227, 186, 112, 28, 145, 189, 105, 237, 198, 61, 138, 159, 234, 61, 22, 160, 6, 190, 248, 22, 244, 61, 105, 41, 215, 189, 1, 38, 241, 189, 217, 18, 81, 190, 173, 60, 52, 190, 190, 155, 34, 190, 255, 36, 142, 61, 62, 200, 210, 61, 210, 27, 222, 61, 232, 249, 142, 189, 71, 100, 26, 190, 20, 162, 235, 61, 71, 153, 69, 189, 194, 166, 25, 62, 179, 121, 29, 189, 247, 150, 62, 189, 148, 104, 153, 60, 64, 176, 155, 61, 3, 72, 159, 189, 84, 171, 125, 189, 8, 184, 77, 188, 177, 122, 22, 61, 236, 128, 18, 61, 91, 238, 188, 61, 109, 121, 97, 189, 177, 132, 82, 62, 161, 103, 199, 60, 47, 220, 74, 61, 118, 223, 98, 190, 218, 251, 16, 191, 125, 103, 25, 62, 231, 244, 144, 61, 161, 206, 42, 61, 98, 122, 50, 189, 230, 83, 168, 58, 145, 159, 142, 61, 120, 119, 203, 61, 102, 61, 19, 190, 114, 144, 118, 188, 95, 6, 40, 62, 61, 30, 10, 191, 150, 138, 197, 189, 105, 64, 195, 61, 250, 153, 14, 62, 181, 9, 153, 61, 106, 230, 200, 61, 100, 222, 205, 60, 137, 15, 65, 190, 183, 89, 60, 61, 48, 8, 1, 191, 217, 246, 246, 189, 131, 244, 251, 188, 245, 228, 7, 62, 236, 39, 93, 189, 236, 124, 149, 190, 65, 15, 67, 190, 162, 124, 163, 188, 14, 117, 57, 62, 126, 217, 79, 188, 176, 192, 195, 189, 251, 246, 181, 190, 121, 175, 251, 190, 39, 47, 96, 62, 65, 36, 249, 189, 251, 28, 9, 62, 208, 25, 12, 62, 156, 107, 137, 188, 146, 38, 200, 190, 205, 0, 231, 61, 91, 135, 249, 190, 22, 115, 132, 62, 40, 172, 16, 62, 56, 101, 95, 190, 218, 44, 130, 189, 116, 238, 151, 62, 251, 52, 250, 62, 212, 103, 59, 61, 27, 89, 213, 189, 65, 125, 195, 62, 239, 14, 139, 62, 51, 230, 23, 61, 222, 246, 86, 191, 215, 127, 20, 188, 197, 8, 109, 190, 222, 148, 238, 61, 140, 40, 172, 62, 173, 89, 138, 190, 0, 40, 241, 190, 77, 177, 216, 189, 221, 135, 54, 188, 139, 40, 205, 62, 61, 102, 53, 62, 181, 160, 18, 190, 163, 43, 164, 62, 93, 178, 152, 188, 40, 246, 90, 61, 172, 86, 210, 61, 46, 0, 79, 62, 134, 138, 79, 62, 137, 83, 195, 190, 242, 247, 117, 62, 164, 98, 49, 190, 197, 31, 144, 191, 124, 140, 51, 190, 230, 38, 184, 62, 139, 69, 208, 61, 192, 194, 104, 190, 113, 131, 210, 61, 100, 187, 128, 190, 5, 214, 127, 61, 219, 167, 236, 61, 180, 205, 17, 191, 218, 156, 130, 62, 134, 218, 169, 188, 119, 192, 11, 190, 79, 17, 111, 190, 11, 244, 248, 189, 185, 99, 211, 190, 55, 196, 37, 60, 222, 210, 150, 62, 54, 192, 253, 188, 175, 194, 125, 189, 120, 41, 182, 62, 30, 8, 36, 190, 78, 113, 151, 189, 116, 241, 126, 190, 193, 180, 142, 62, 177, 106, 185, 61, 28, 181, 187, 188, 32, 110, 197, 61, 224, 154, 62, 62, 9, 108, 128, 60, 243, 165, 26, 190, 3, 94, 134, 61, 239, 206, 208, 190, 46, 207, 187, 188, 174, 141, 55, 190, 2, 173, 228, 188, 173, 230, 187, 61, 82, 151, 27, 61, 145, 101, 222, 61, 55, 185, 57, 61, 185, 157, 42, 190, 128, 149, 153, 190, 88, 59, 93, 187, 63, 157, 142, 190, 59, 148, 204, 189, 47, 90, 251, 61, 240, 153, 21, 190, 76, 57, 15, 190, 223, 51, 55, 190, 7, 227, 230, 61, 182, 219, 21, 190, 68, 238, 40, 191, 74, 84, 85, 189, 6, 191, 61, 190, 223, 115, 39, 62, 62, 203, 219, 190, 122, 120, 87, 187, 122, 72, 27, 191, 0, 231, 249, 60, 5, 242, 31, 191, 230, 152, 154, 62, 69, 201, 200, 59, 142, 195, 185, 191, 70, 147, 94, 189, 36, 129, 34, 190, 65, 131, 119, 188, 246, 20, 98, 62, 117, 2, 228, 189, 42, 228, 248, 61, 26, 165, 97, 188, 148, 126, 13, 61, 253, 159, 114, 189, 156, 214, 15, 62, 82, 1, 33, 62, 98, 33, 101, 61, 100, 159, 181, 190, 147, 224, 62, 190, 36, 170, 128, 61, 221, 201, 3, 190, 55, 47, 152, 189, 115, 96, 82, 190, 187, 220, 108, 62, 112, 201, 181, 60, 47, 154, 139, 62, 130, 11, 142, 60, 41, 120, 96, 191, 218, 187, 229, 188, 223, 54, 27, 61, 208, 27, 17, 62, 10, 117, 190, 62, 169, 252, 126, 191, 7, 67, 130, 61, 10, 0, 138, 190, 104, 138, 248, 60, 1, 72, 2, 63, 28, 160, 171, 190, 48, 163, 210, 61, 209, 180, 224, 61, 24, 188, 151, 61, 156, 204, 134, 189, 107, 145, 128, 189, 131, 168, 163, 61, 252, 175, 221, 61, 119, 185, 112, 61, 195, 131, 133, 62, 89, 154, 163, 190, 196, 201, 200, 190, 98, 157, 138, 189, 137, 237, 68, 191, 113, 177, 207, 190, 246, 81, 248, 59, 95, 215, 228, 62, 74, 128, 130, 191, 86, 30, 112, 190, 201, 97, 1, 189, 119, 235, 245, 61, 94, 187, 56, 190, 185, 204, 51, 190, 79, 231, 117, 62, 244, 194, 36, 190, 155, 247, 79, 61, 185, 11, 52, 190, 61, 92, 68, 62, 111, 13, 153, 61, 118, 241, 176, 61, 81, 3, 34, 189, 238, 33, 44, 190, 21, 129, 157, 189, 199, 88, 9, 63, 95, 31, 124, 190, 95, 40, 177, 62, 225, 2, 246, 61, 14, 55, 43, 62, 169, 32, 152, 190, 38, 146, 135, 61, 250, 32, 5, 189, 2, 232, 186, 189, 146, 173, 74, 63, 10, 238, 197, 188, 138, 230, 20, 190, 165, 73, 227, 189, 187, 11, 47, 62, 232, 173, 26, 62, 50, 239, 6, 62, 98, 155, 32, 62, 226, 242, 248, 61, 90, 87, 37, 62, 105, 9, 170, 190, 106, 112, 176, 62, 38, 180, 104, 62, 232, 245, 233, 62, 56, 120, 37, 62, 138, 79, 196, 186, 247, 226, 178, 188, 89, 84, 172, 62, 107, 155, 218, 61, 11, 172, 77, 62, 88, 22, 190, 62, 174, 242, 148, 190, 107, 98, 23, 189, 167, 147, 207, 62, 240, 187, 110, 62, 109, 185, 191, 190, 255, 124, 148, 62, 191, 215, 250, 189, 185, 151, 116, 61, 118, 179, 116, 61, 60, 85, 17, 190, 144, 46, 41, 191, 155, 215, 202, 62, 92, 98, 174, 62, 113, 3, 148, 62, 55, 7, 133, 62, 242, 39, 93, 62, 43, 198, 103, 188, 132, 190, 106, 190, 238, 77, 71, 62, 46, 107, 143, 62, 242, 232, 195, 187, 52, 33, 220, 186, 191, 69, 220, 189, 130, 116, 146, 61, 61, 181, 196, 62, 185, 4, 202, 62, 42, 216, 3, 190, 116, 236, 42, 61, 92, 70, 6, 59, 152, 11, 86, 62, 93, 123, 128, 60, 171, 30, 122, 62, 241, 38, 244, 61, 244, 212, 1, 189, 97, 127, 31, 191, 255, 51, 36, 59, 67, 188, 58, 62, 255, 87, 71, 191, 4, 20, 71, 190, 207, 81, 103, 191, 143, 224, 95, 187, 211, 87, 30, 62, 159, 189, 87, 190, 63, 123, 101, 191, 58, 158, 24, 62, 21, 241, 239, 62, 193, 115, 3, 62, 114, 32, 97, 190, 134, 206, 66, 189, 227, 26, 22, 191, 33, 68, 103, 62, 225, 230, 1, 63, 53, 191, 84, 189, 109, 218, 50, 189, 169, 167, 238, 61, 121, 84, 61, 62, 91, 39, 88, 62, 120, 66, 238, 62, 139, 16, 9, 62, 195, 172, 33, 61, 50, 149, 107, 62, 167, 33, 158, 188, 171, 225, 90, 62, 171, 148, 50, 189, 71, 238, 135, 62, 155, 42, 125, 189, 121, 138, 20, 191, 212, 147, 62, 190, 29, 129, 134, 189, 18, 135, 102, 189, 9, 147, 211, 61, 226, 130, 131, 189, 179, 225, 124, 190, 96, 147, 168, 189, 65, 31, 145, 190, 26, 59, 2, 191, 254, 161, 134, 62, 33, 30, 210, 62, 72, 54, 158, 62, 225, 87, 70, 190, 208, 9, 253, 61, 166, 137, 24, 190, 60, 153, 198, 60, 74, 40, 52, 62, 185, 228, 16, 61, 72, 79, 216, 189, 87, 39, 170, 189, 96, 107, 224, 190, 174, 24, 83, 60, 195, 133, 236, 190, 77, 122, 127, 62, 240, 199, 199, 188, 252, 27, 140, 191, 217, 25, 3, 189, 148, 178, 23, 187, 21, 147, 75, 62, 178, 147, 148, 62, 119, 203, 249, 190, 10, 232, 241, 60, 237, 114, 64, 62, 114, 63, 137, 62, 146, 19, 200, 188, 102, 65, 107, 60, 225, 177, 145, 62, 67, 213, 20, 189, 40, 198, 0, 190, 92, 211, 156, 60, 6, 121, 105, 190, 250, 169, 218, 190, 86, 89, 160, 190, 169, 116, 248, 190, 53, 163, 4, 191, 251, 253, 29, 62, 68, 25, 244, 190, 0, 86, 244, 190, 228, 189, 164, 188, 134, 146, 81, 188, 32, 89, 140, 62, 96, 28, 0, 190, 64, 101, 8, 190, 65, 128, 4, 191, 202, 208, 23, 189, 8, 158, 165, 189, 90, 66, 234, 61, 158, 250, 6, 62, 185, 67, 55, 62, 236, 173, 164, 60, 119, 100, 178, 187, 111, 95, 160, 61, 193, 131, 145, 61, 60, 74, 65, 190, 235, 227, 49, 61, 33, 224, 192, 62, 134, 130, 3, 191, 90, 15, 156, 189, 186, 241, 112, 190, 246, 183, 132, 61, 251, 28, 28, 190, 239, 170, 39, 62, 246, 137, 27, 63, 180, 5, 248, 61, 176, 183, 25, 190, 83, 83, 141, 61, 236, 159, 170, 189, 253, 70, 220, 189, 56, 165, 1, 61, 70, 152, 208, 60, 139, 10, 141, 187, 78, 228, 34, 190, 38, 61, 174, 61, 179, 35, 81, 189, 72, 240, 37, 189, 127, 133, 244, 60, 238, 175, 152, 187, 69, 120, 192, 190, 223, 134, 143, 61, 137, 113, 101, 62, 13, 202, 200, 187, 48, 60, 43, 62, 66, 39, 72, 62, 184, 117, 22, 190, 74, 144, 8, 190, 244, 18, 86, 191, 99, 200, 95, 191, 220, 19, 56, 62, 214, 2, 109, 191, 88, 228, 143, 190, 244, 15, 220, 191, 155, 197, 165, 62, 107, 1, 19, 61, 35, 101, 80, 61, 144, 58, 11, 191, 66, 200, 50, 62, 10, 128, 134, 189, 176, 221, 19, 62, 134, 14, 150, 190, 215, 182, 112, 189, 42, 164, 209, 190, 251, 148, 186, 61, 134, 173, 235, 62, 64, 114, 46, 62, 184, 75, 174, 61, 40, 224, 52, 190, 163, 65, 83, 189, 139, 74, 166, 188, 4, 57, 22, 190, 245, 100, 123, 189, 114, 136, 236, 189, 7, 152, 219, 189, 27, 102, 6, 190, 168, 4, 113, 61, 60, 116, 0, 189, 143, 217, 242, 189, 73, 34, 24, 62, 110, 129, 53, 190, 148, 53, 227, 188, 74, 2, 232, 61, 22, 167, 0, 62, 132, 141, 216, 61, 94, 192, 8, 190, 70, 189, 82, 190, 196, 208, 29, 189, 210, 186, 224, 61, 204, 154, 70, 190, 81, 94, 171, 189, 91, 53, 226, 61, 199, 127, 153, 188, 138, 162, 115, 189, 198, 104, 227, 61, 222, 26, 75, 190, 110, 147, 25, 62, 213, 237, 129, 61, 84, 0, 46, 62, 75, 194, 68, 62, 226, 116, 82, 61, 100, 74, 83, 189, 29, 220, 118, 189, 241, 219, 238, 61, 109, 75, 150, 60, 39, 11, 164, 59, 71, 27, 38, 62, 6, 115, 230, 61, 244, 158, 161, 61, 193, 149, 211, 189, 147, 70, 248, 60, 81, 197, 106, 188, 140, 104, 158, 59, 140, 47, 33, 61, 163, 254, 99, 62, 50, 132, 39, 188, 91, 182, 230, 189, 135, 217, 152, 61, 169, 253, 13, 60, 70, 224, 87, 61, 143, 30, 22, 61, 124, 103, 67, 63, 92, 156, 12, 62, 110, 242, 222, 61, 195, 77, 194, 61, 227, 236, 122, 190, 57, 1, 3, 62, 192, 254, 219, 189, 162, 35, 95, 60, 205, 31, 90, 59, 119, 1, 115, 61, 245, 47, 209, 61, 237, 87, 24, 62, 3, 108, 141, 62, 70, 118, 238, 189, 42, 32, 153, 191, 113, 176, 10, 62, 115, 216, 14, 189, 101, 245, 155, 60, 172, 91, 45, 57, 91, 224, 136, 61, 158, 15, 156, 190, 184, 72, 165, 60, 216, 56, 193, 189, 132, 142, 21, 61, 89, 119, 72, 62, 54, 4, 162, 190, 190, 33, 104, 189, 83, 140, 126, 59, 140, 123, 203, 61, 223, 208, 4, 61, 61, 168, 209, 58, 112, 177, 5, 190, 219, 136, 87, 190, 163, 104, 6, 190, 222, 118, 112, 191, 151, 42, 213, 190, 254, 37, 65, 189, 117, 142, 232, 188, 147, 26, 138, 62, 5, 245, 210, 190, 102, 115, 56, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 6, 174, 62, 156, 24, 52, 62, 72, 86, 88, 189, 47, 231, 232, 61, 226, 198, 28, 61, 75, 225, 2, 190, 212, 214, 60, 62, 21, 19, 244, 188, 161, 30, 10, 190, 138, 64, 46, 190, 19, 2, 173, 189, 52, 67, 148, 61, 137, 90, 127, 62, 200, 247, 85, 190, 187, 206, 229, 61, 0, 178, 57, 190, 58, 96, 201, 189, 247, 213, 31, 189, 81, 111, 176, 62, 24, 209, 164, 189, 213, 111, 12, 62, 169, 65, 6, 62, 247, 69, 148, 61, 115, 68, 26, 190, 97, 187, 197, 61, 43, 92, 126, 62, 97, 101, 135, 190, 182, 83, 202, 61, 43, 229, 135, 62, 96, 118, 49, 190, 99, 35, 131, 61, 183, 44, 144, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 110, 125, 190, 125, 3, 191, 190, 131, 185, 73, 60, 20, 209, 252, 62, 115, 167, 193, 190, 86, 203, 108, 63, 103, 152, 43, 191, 149, 93, 167, 63, 155, 154, 131, 189, 188, 180, 250, 189, 26, 124, 133, 191, 250, 48, 0, 63, 111, 173, 115, 63, 52, 167, 161, 190, 27, 125, 30, 62, 124, 135, 170, 61, 27, 37, 0, 189, 186, 121, 207, 190, 105, 144, 251, 62, 193, 210, 164, 61, 188, 45, 186, 62, 49, 244, 3, 191, 214, 186, 248, 189, 87, 173, 10, 191, 70, 166, 76, 63, 198, 124, 153, 62, 221, 252, 159, 62, 167, 227, 119, 189, 46, 101, 84, 63, 151, 12, 28, 190, 82, 49, 215, 188, 131, 68, 238, 190, 85, 12, 183, 190, 202, 56, 89, 191, 17, 194, 85, 189, 235, 182, 58, 190, 106, 148, 141, 189, 140, 93, 183, 62, 170, 26, 43, 62, 41, 108, 253, 62, 187, 23, 118, 189, 222, 106, 224, 61, 117, 205, 172, 62, 175, 164, 34, 190, 46, 162, 37, 190, 248, 102, 137, 62, 27, 185, 197, 188, 33, 26, 94, 188, 219, 142, 139, 187, 220, 25, 181, 62, 147, 152, 251, 61, 109, 25, 164, 189, 145, 79, 211, 190, 121, 162, 33, 190, 191, 7, 90, 188, 194, 229, 136, 60, 6, 200, 25, 63, 179, 61, 91, 190, 162, 90, 15, 62, 102, 203, 52, 190, 161, 156, 175, 190, 157, 103, 11, 61, 10, 4, 235, 189, 131, 173, 79, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {100, 229, 32, 190, 181, 242, 187, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {14, 144, 136, 191, 226, 84, 221, 188, 41, 130, 64, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {97, 132, 5, 192, 76, 252, 57, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0059/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}