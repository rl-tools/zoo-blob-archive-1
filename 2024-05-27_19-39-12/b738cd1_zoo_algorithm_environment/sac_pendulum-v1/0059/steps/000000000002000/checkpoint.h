// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 29, 219, 62, 151, 63, 54, 190, 144, 144, 171, 59, 230, 12, 148, 190, 147, 174, 53, 63, 78, 33, 30, 62, 202, 165, 219, 190, 154, 194, 83, 191, 193, 57, 100, 190, 33, 65, 17, 191, 10, 181, 33, 191, 45, 12, 129, 62, 104, 74, 197, 61, 112, 186, 30, 191, 234, 80, 11, 191, 151, 4, 40, 191, 88, 131, 75, 190, 98, 18, 187, 62, 224, 118, 208, 61, 203, 26, 130, 62, 73, 223, 152, 190, 66, 3, 69, 190, 137, 119, 232, 62, 223, 140, 1, 62, 23, 30, 195, 62, 49, 163, 40, 191, 175, 92, 20, 62, 192, 184, 164, 190, 51, 235, 130, 62, 12, 131, 180, 62, 217, 104, 38, 63, 225, 100, 8, 190, 0, 64, 156, 190, 101, 196, 12, 60, 107, 37, 179, 62, 97, 225, 1, 191, 35, 153, 204, 190, 224, 149, 60, 63, 46, 166, 76, 62, 219, 173, 204, 189, 209, 184, 93, 189, 191, 167, 11, 63, 80, 129, 43, 63, 120, 4, 134, 62, 85, 82, 137, 62, 204, 237, 243, 190, 171, 178, 68, 63, 69, 30, 192, 190, 160, 194, 45, 62, 242, 121, 15, 63, 160, 44, 32, 189, 173, 221, 243, 189, 49, 187, 59, 191, 20, 111, 247, 190, 127, 29, 40, 63, 23, 252, 214, 62, 82, 114, 210, 62, 66, 154, 53, 191, 222, 242, 201, 62, 26, 196, 151, 190, 70, 180, 208, 60, 229, 254, 28, 63, 213, 172, 33, 190, 246, 217, 147, 62, 57, 1, 172, 190, 158, 189, 30, 60, 207, 0, 114, 190, 65, 51, 82, 63, 89, 39, 50, 190, 47, 113, 230, 62, 90, 244, 24, 190, 255, 125, 156, 62, 129, 99, 56, 61, 161, 189, 64, 191, 192, 3, 235, 62, 2, 111, 29, 191, 33, 18, 172, 190, 91, 32, 78, 62, 125, 154, 182, 190, 132, 246, 21, 191, 178, 82, 4, 63, 254, 221, 253, 62, 80, 129, 35, 190, 168, 200, 5, 63, 172, 12, 123, 189, 251, 80, 6, 188, 201, 18, 136, 60, 153, 101, 5, 63, 212, 59, 34, 63, 189, 46, 166, 62, 239, 240, 178, 190, 123, 63, 18, 191, 176, 200, 212, 62, 55, 116, 38, 62, 29, 249, 15, 191, 203, 23, 7, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 126, 25, 191, 242, 114, 45, 63, 159, 68, 255, 62, 14, 172, 213, 62, 71, 183, 121, 190, 0, 172, 233, 190, 166, 136, 207, 62, 72, 145, 50, 63, 112, 101, 7, 63, 246, 193, 18, 63, 61, 68, 26, 63, 209, 54, 42, 191, 195, 69, 64, 62, 220, 49, 167, 190, 206, 29, 163, 190, 24, 41, 244, 189, 77, 51, 166, 190, 5, 129, 141, 62, 175, 124, 69, 62, 171, 150, 2, 190, 9, 11, 143, 62, 123, 91, 1, 191, 48, 242, 250, 62, 89, 136, 17, 191, 238, 84, 240, 62, 131, 1, 203, 190, 39, 231, 163, 189, 116, 93, 33, 191, 183, 241, 134, 190, 239, 125, 187, 61, 231, 201, 182, 60, 115, 158, 142, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 157, 32, 190, 126, 19, 161, 188, 121, 40, 77, 190, 17, 211, 32, 190, 154, 44, 15, 61, 42, 207, 48, 190, 176, 87, 139, 189, 205, 117, 117, 62, 90, 123, 74, 62, 81, 16, 152, 189, 231, 245, 144, 61, 190, 137, 199, 189, 176, 137, 161, 189, 217, 209, 189, 188, 158, 248, 59, 62, 6, 205, 102, 62, 72, 182, 246, 60, 220, 46, 215, 187, 42, 133, 97, 62, 16, 84, 180, 189, 135, 243, 226, 60, 209, 233, 175, 61, 213, 34, 55, 62, 129, 233, 147, 61, 111, 117, 69, 62, 161, 84, 87, 190, 193, 103, 166, 61, 251, 18, 170, 61, 0, 201, 25, 190, 178, 218, 134, 59, 97, 3, 234, 189, 4, 217, 194, 61, 203, 53, 76, 189, 26, 109, 182, 189, 178, 252, 99, 189, 245, 162, 135, 190, 34, 94, 232, 189, 37, 48, 2, 189, 208, 25, 26, 62, 169, 205, 96, 61, 153, 159, 0, 62, 113, 54, 66, 190, 71, 162, 37, 61, 52, 170, 181, 61, 42, 245, 146, 190, 206, 189, 210, 61, 89, 213, 168, 189, 89, 113, 187, 189, 193, 113, 109, 62, 178, 252, 13, 190, 216, 96, 41, 62, 38, 82, 86, 189, 44, 206, 208, 61, 151, 112, 17, 62, 154, 37, 91, 189, 37, 150, 181, 61, 184, 65, 56, 61, 3, 101, 64, 60, 220, 17, 112, 190, 180, 8, 136, 60, 190, 97, 162, 189, 40, 212, 154, 189, 167, 55, 103, 190, 155, 254, 76, 190, 168, 240, 169, 61, 173, 80, 23, 190, 62, 26, 40, 62, 225, 0, 75, 189, 206, 89, 210, 187, 250, 92, 105, 189, 247, 21, 5, 190, 163, 107, 196, 189, 29, 60, 170, 189, 111, 112, 25, 190, 230, 58, 76, 189, 215, 62, 184, 189, 253, 136, 4, 62, 87, 218, 212, 189, 123, 108, 247, 61, 87, 40, 21, 61, 78, 11, 8, 61, 215, 116, 13, 189, 227, 66, 206, 61, 184, 53, 249, 189, 187, 196, 30, 62, 70, 95, 37, 190, 244, 54, 28, 189, 204, 226, 136, 58, 162, 83, 0, 190, 156, 213, 244, 189, 204, 18, 140, 185, 65, 195, 216, 61, 222, 6, 21, 62, 214, 22, 221, 61, 193, 164, 108, 189, 23, 7, 31, 190, 186, 155, 43, 62, 255, 124, 142, 61, 65, 168, 104, 62, 45, 194, 127, 61, 184, 223, 211, 61, 157, 20, 4, 61, 207, 132, 70, 190, 172, 97, 230, 189, 175, 103, 121, 62, 19, 212, 193, 61, 134, 55, 52, 62, 242, 12, 38, 62, 180, 195, 112, 58, 45, 196, 139, 189, 254, 247, 151, 190, 68, 27, 200, 189, 82, 63, 253, 61, 102, 129, 183, 61, 68, 56, 91, 61, 246, 94, 6, 190, 75, 159, 142, 60, 250, 232, 43, 62, 163, 218, 143, 190, 20, 18, 110, 190, 24, 0, 167, 61, 186, 146, 47, 62, 11, 249, 197, 188, 210, 241, 91, 190, 135, 244, 34, 62, 121, 120, 85, 188, 26, 136, 89, 61, 148, 28, 239, 186, 53, 23, 161, 61, 80, 77, 10, 62, 57, 44, 147, 61, 106, 64, 64, 61, 181, 188, 171, 60, 156, 230, 13, 61, 0, 13, 242, 61, 124, 129, 45, 62, 185, 79, 48, 190, 114, 141, 24, 190, 154, 35, 229, 61, 110, 41, 187, 189, 135, 23, 161, 189, 70, 40, 225, 58, 170, 146, 124, 190, 67, 53, 141, 61, 23, 81, 28, 190, 87, 152, 169, 189, 190, 32, 83, 62, 85, 226, 60, 61, 57, 136, 13, 62, 56, 254, 139, 187, 26, 196, 137, 62, 243, 207, 7, 189, 206, 142, 107, 190, 139, 211, 103, 190, 84, 77, 4, 61, 251, 171, 72, 190, 69, 98, 35, 61, 59, 203, 3, 62, 231, 16, 6, 190, 158, 14, 15, 190, 135, 62, 47, 190, 177, 224, 220, 190, 131, 244, 115, 189, 254, 197, 151, 189, 40, 141, 32, 62, 168, 208, 134, 61, 126, 157, 207, 61, 21, 53, 214, 190, 140, 162, 66, 60, 28, 95, 56, 190, 150, 141, 208, 188, 125, 238, 22, 62, 241, 37, 17, 61, 172, 40, 7, 190, 157, 209, 7, 62, 55, 40, 43, 190, 50, 128, 87, 186, 12, 203, 144, 61, 112, 30, 164, 190, 73, 4, 138, 189, 231, 68, 85, 61, 45, 42, 232, 189, 136, 87, 20, 189, 202, 186, 145, 61, 35, 121, 137, 189, 13, 109, 36, 61, 53, 227, 214, 61, 1, 31, 2, 189, 216, 255, 103, 189, 121, 43, 224, 188, 242, 59, 4, 190, 210, 15, 39, 62, 47, 31, 154, 189, 178, 118, 166, 60, 7, 69, 197, 61, 255, 238, 193, 189, 248, 50, 52, 190, 76, 247, 214, 189, 233, 85, 250, 61, 75, 134, 231, 61, 57, 176, 19, 190, 44, 203, 10, 62, 68, 226, 12, 60, 201, 154, 64, 190, 130, 147, 187, 61, 124, 237, 141, 189, 118, 150, 130, 62, 232, 17, 24, 62, 56, 50, 21, 61, 216, 192, 226, 189, 226, 151, 52, 62, 155, 178, 223, 61, 81, 20, 74, 61, 218, 241, 152, 189, 207, 224, 49, 62, 116, 160, 145, 189, 216, 164, 118, 189, 245, 246, 164, 190, 246, 226, 78, 190, 82, 40, 151, 189, 145, 118, 44, 190, 177, 136, 200, 60, 158, 65, 194, 189, 249, 136, 8, 190, 9, 69, 183, 61, 86, 149, 13, 62, 196, 49, 231, 60, 29, 253, 184, 61, 152, 237, 24, 62, 17, 170, 186, 189, 198, 217, 60, 62, 197, 76, 207, 189, 3, 225, 160, 61, 234, 30, 151, 61, 242, 217, 186, 61, 158, 95, 186, 187, 76, 3, 241, 189, 173, 22, 123, 189, 188, 0, 66, 189, 103, 23, 85, 189, 188, 170, 3, 61, 196, 193, 177, 189, 242, 4, 216, 61, 168, 120, 61, 190, 72, 206, 49, 189, 129, 237, 222, 61, 52, 211, 14, 61, 204, 74, 28, 190, 22, 253, 113, 189, 226, 108, 150, 60, 217, 164, 248, 61, 29, 204, 144, 61, 56, 170, 206, 61, 122, 131, 32, 190, 170, 13, 81, 62, 11, 55, 64, 62, 108, 13, 45, 189, 30, 112, 21, 190, 64, 47, 28, 190, 42, 156, 49, 190, 96, 31, 17, 61, 40, 39, 40, 189, 145, 181, 17, 62, 148, 37, 0, 190, 150, 47, 182, 60, 47, 125, 124, 60, 252, 48, 102, 59, 188, 170, 138, 189, 125, 198, 229, 61, 116, 16, 37, 62, 239, 65, 134, 189, 149, 222, 245, 189, 148, 126, 31, 61, 84, 122, 231, 59, 227, 14, 200, 189, 223, 56, 181, 189, 27, 156, 183, 186, 11, 117, 187, 189, 62, 185, 167, 189, 55, 164, 189, 189, 218, 166, 30, 61, 77, 214, 214, 188, 82, 170, 232, 61, 249, 237, 39, 190, 67, 170, 115, 61, 11, 193, 207, 188, 49, 185, 217, 189, 231, 106, 175, 61, 119, 176, 248, 189, 76, 113, 45, 190, 208, 129, 172, 61, 76, 52, 113, 61, 16, 232, 5, 62, 102, 34, 6, 62, 223, 28, 149, 188, 62, 211, 207, 189, 124, 126, 124, 60, 52, 4, 17, 190, 77, 1, 58, 189, 231, 56, 189, 61, 80, 154, 93, 61, 41, 20, 47, 189, 223, 213, 203, 60, 120, 74, 107, 189, 248, 53, 188, 61, 187, 152, 234, 189, 153, 12, 4, 190, 207, 159, 88, 189, 137, 224, 14, 189, 172, 80, 147, 189, 135, 95, 24, 190, 180, 163, 251, 61, 191, 227, 122, 188, 141, 26, 162, 60, 164, 177, 237, 189, 170, 5, 187, 189, 242, 189, 244, 188, 159, 225, 154, 189, 141, 237, 129, 188, 42, 163, 108, 60, 78, 210, 102, 188, 188, 109, 62, 62, 180, 208, 163, 61, 175, 3, 196, 59, 39, 221, 40, 188, 175, 120, 135, 189, 189, 37, 75, 190, 54, 23, 41, 62, 29, 163, 137, 189, 170, 139, 48, 62, 224, 120, 162, 189, 157, 165, 143, 61, 195, 11, 140, 62, 126, 227, 6, 190, 153, 155, 132, 189, 142, 98, 42, 62, 43, 124, 146, 61, 68, 54, 202, 61, 218, 70, 227, 189, 155, 244, 212, 60, 121, 193, 247, 189, 34, 212, 41, 189, 171, 91, 30, 60, 232, 240, 13, 61, 220, 88, 50, 189, 114, 110, 23, 189, 117, 81, 144, 190, 207, 114, 115, 190, 127, 165, 49, 190, 218, 250, 202, 60, 159, 96, 156, 190, 21, 243, 99, 61, 11, 135, 134, 189, 21, 61, 44, 189, 26, 151, 187, 58, 244, 236, 52, 190, 174, 80, 68, 62, 246, 60, 160, 189, 229, 222, 204, 61, 32, 245, 158, 190, 117, 220, 171, 61, 43, 143, 152, 190, 89, 139, 196, 58, 156, 37, 6, 190, 140, 185, 218, 190, 137, 225, 18, 62, 139, 241, 242, 59, 116, 136, 202, 60, 60, 88, 181, 61, 109, 86, 246, 61, 155, 39, 28, 190, 43, 75, 45, 62, 99, 241, 70, 190, 115, 253, 175, 189, 244, 15, 133, 61, 249, 10, 35, 190, 84, 207, 136, 189, 171, 57, 228, 189, 17, 177, 7, 61, 114, 106, 8, 190, 67, 107, 61, 186, 136, 213, 133, 190, 169, 110, 186, 189, 98, 82, 49, 62, 227, 68, 63, 61, 251, 35, 29, 190, 222, 116, 60, 62, 242, 175, 99, 62, 130, 121, 43, 61, 252, 73, 121, 189, 5, 85, 241, 189, 54, 154, 141, 188, 147, 89, 129, 61, 213, 194, 50, 62, 90, 59, 203, 188, 46, 212, 53, 190, 22, 218, 239, 189, 164, 1, 28, 189, 255, 222, 83, 190, 232, 235, 183, 190, 222, 130, 80, 189, 182, 13, 237, 59, 221, 166, 101, 190, 159, 253, 198, 189, 246, 138, 94, 189, 55, 158, 2, 62, 70, 38, 141, 188, 124, 127, 131, 190, 102, 250, 164, 61, 5, 164, 233, 188, 150, 82, 73, 62, 217, 239, 64, 190, 120, 112, 11, 190, 106, 5, 48, 190, 252, 130, 2, 62, 242, 51, 25, 62, 252, 50, 16, 190, 169, 220, 222, 189, 95, 200, 41, 62, 80, 148, 213, 189, 54, 118, 72, 189, 137, 34, 48, 189, 114, 97, 240, 189, 88, 174, 221, 61, 172, 167, 31, 190, 18, 203, 152, 60, 13, 91, 47, 190, 190, 202, 196, 61, 143, 120, 10, 187, 185, 28, 123, 61, 125, 134, 23, 62, 215, 139, 234, 61, 95, 137, 96, 61, 110, 229, 100, 60, 105, 205, 23, 62, 183, 232, 53, 61, 214, 245, 188, 189, 188, 99, 177, 189, 132, 215, 91, 61, 207, 10, 35, 62, 142, 163, 56, 188, 185, 68, 233, 189, 72, 22, 210, 61, 237, 54, 22, 190, 181, 51, 182, 61, 184, 138, 148, 61, 216, 138, 186, 189, 36, 161, 114, 189, 216, 201, 250, 61, 187, 98, 150, 189, 18, 59, 131, 61, 164, 100, 133, 188, 67, 247, 190, 189, 80, 143, 30, 61, 119, 251, 170, 61, 138, 64, 82, 190, 116, 62, 132, 61, 246, 159, 31, 61, 183, 254, 199, 186, 21, 166, 160, 189, 126, 45, 56, 190, 124, 31, 81, 61, 163, 254, 69, 190, 107, 62, 142, 61, 130, 99, 64, 190, 14, 242, 70, 189, 174, 87, 232, 189, 29, 150, 43, 62, 198, 213, 207, 189, 248, 168, 135, 61, 146, 114, 173, 188, 173, 105, 26, 61, 206, 147, 224, 60, 102, 218, 22, 190, 42, 183, 16, 62, 69, 147, 27, 190, 27, 233, 238, 189, 182, 85, 25, 60, 168, 162, 147, 60, 158, 70, 236, 61, 246, 113, 213, 188, 99, 6, 9, 62, 125, 124, 2, 190, 39, 73, 227, 186, 9, 100, 119, 189, 105, 237, 198, 61, 190, 206, 16, 62, 162, 24, 246, 189, 248, 22, 244, 61, 76, 181, 206, 189, 222, 234, 202, 189, 90, 211, 60, 190, 134, 89, 42, 190, 190, 155, 34, 190, 255, 36, 142, 61, 127, 196, 6, 62, 75, 66, 243, 61, 194, 121, 112, 189, 71, 100, 26, 190, 192, 3, 9, 62, 58, 205, 232, 188, 194, 166, 25, 62, 167, 69, 101, 188, 247, 150, 62, 189, 148, 104, 153, 60, 64, 176, 155, 61, 3, 72, 159, 189, 84, 171, 125, 189, 8, 184, 77, 188, 227, 191, 23, 61, 236, 128, 18, 61, 247, 115, 192, 61, 109, 121, 97, 189, 233, 252, 157, 62, 84, 17, 152, 189, 75, 211, 240, 189, 255, 80, 236, 189, 235, 63, 30, 190, 127, 179, 55, 62, 186, 85, 35, 62, 176, 17, 4, 62, 39, 131, 80, 59, 152, 99, 174, 61, 13, 54, 121, 61, 25, 193, 121, 61, 177, 76, 111, 189, 221, 180, 108, 60, 214, 46, 2, 62, 149, 44, 13, 190, 85, 228, 39, 190, 3, 99, 63, 62, 147, 106, 6, 61, 112, 21, 56, 62, 106, 230, 200, 61, 127, 148, 68, 62, 172, 41, 132, 60, 101, 115, 180, 60, 255, 204, 46, 60, 142, 182, 178, 61, 178, 137, 83, 188, 245, 228, 7, 62, 170, 238, 55, 61, 123, 165, 38, 190, 42, 191, 172, 189, 162, 124, 163, 188, 124, 248, 70, 62, 37, 103, 200, 60, 142, 246, 158, 188, 212, 224, 50, 190, 154, 36, 169, 61, 105, 196, 138, 62, 236, 5, 143, 189, 23, 132, 244, 61, 177, 216, 41, 62, 124, 211, 126, 61, 65, 37, 184, 190, 34, 53, 40, 62, 133, 110, 132, 189, 4, 34, 1, 62, 211, 35, 25, 61, 180, 96, 114, 190, 147, 166, 12, 190, 244, 207, 78, 62, 20, 74, 187, 62, 229, 194, 139, 61, 27, 89, 213, 189, 99, 255, 73, 62, 139, 203, 237, 188, 161, 224, 201, 60, 175, 227, 226, 189, 20, 60, 247, 61, 131, 137, 190, 189, 222, 148, 238, 61, 204, 98, 14, 62, 173, 51, 64, 190, 111, 91, 136, 190, 77, 177, 216, 189, 128, 252, 89, 190, 77, 166, 49, 62, 183, 86, 36, 62, 40, 49, 15, 189, 122, 213, 70, 62, 104, 148, 64, 61, 109, 30, 11, 190, 124, 52, 193, 61, 116, 188, 38, 59, 161, 63, 40, 62, 230, 191, 122, 189, 236, 189, 26, 61, 96, 225, 9, 189, 29, 213, 210, 190, 92, 35, 134, 61, 174, 84, 21, 62, 8, 5, 78, 62, 170, 128, 66, 190, 34, 223, 221, 61, 9, 195, 14, 190, 5, 214, 127, 61, 199, 128, 90, 61, 220, 107, 236, 189, 19, 206, 140, 62, 74, 231, 2, 61, 48, 158, 164, 188, 21, 248, 254, 189, 11, 244, 248, 189, 135, 127, 247, 189, 121, 46, 1, 62, 246, 18, 92, 62, 54, 192, 253, 188, 86, 54, 171, 189, 149, 14, 103, 62, 94, 5, 238, 189, 28, 14, 115, 189, 223, 240, 164, 188, 125, 216, 96, 62, 80, 72, 16, 62, 229, 219, 45, 188, 249, 91, 30, 61, 54, 147, 70, 62, 200, 49, 72, 188, 67, 240, 218, 189, 167, 248, 195, 61, 47, 158, 45, 190, 56, 113, 132, 189, 221, 44, 194, 189, 43, 110, 128, 189, 32, 16, 170, 61, 228, 186, 69, 189, 202, 196, 0, 62, 55, 185, 57, 61, 48, 48, 77, 190, 76, 251, 20, 190, 103, 169, 148, 61, 10, 153, 41, 61, 108, 2, 196, 188, 100, 12, 250, 61, 240, 153, 21, 190, 123, 68, 150, 61, 57, 172, 54, 190, 189, 166, 240, 61, 182, 219, 21, 190, 143, 112, 9, 190, 128, 55, 165, 61, 69, 243, 10, 62, 15, 84, 31, 62, 12, 77, 70, 190, 125, 156, 163, 189, 165, 22, 74, 190, 98, 205, 4, 61, 98, 195, 234, 189, 40, 81, 121, 62, 53, 223, 174, 189, 223, 154, 162, 190, 21, 161, 140, 59, 142, 171, 206, 189, 172, 9, 209, 189, 42, 25, 24, 61, 80, 1, 243, 58, 167, 145, 168, 60, 195, 88, 178, 58, 216, 52, 13, 187, 253, 159, 114, 189, 178, 71, 194, 61, 213, 166, 156, 61, 125, 109, 34, 62, 10, 214, 0, 190, 252, 128, 124, 189, 4, 227, 158, 188, 221, 201, 3, 190, 118, 244, 27, 60, 213, 160, 60, 189, 11, 172, 88, 62, 112, 201, 181, 60, 22, 145, 194, 61, 4, 122, 17, 61, 44, 50, 123, 190, 160, 142, 102, 61, 180, 72, 207, 189, 1, 84, 209, 61, 152, 4, 69, 62, 169, 33, 71, 61, 238, 237, 142, 189, 80, 146, 51, 190, 97, 242, 70, 61, 13, 102, 37, 62, 119, 45, 207, 189, 93, 18, 147, 62, 255, 45, 149, 61, 152, 28, 209, 61, 191, 94, 191, 189, 152, 187, 33, 61, 85, 169, 169, 61, 141, 55, 218, 61, 119, 185, 112, 61, 205, 117, 241, 61, 227, 39, 239, 60, 233, 58, 96, 189, 68, 64, 212, 189, 152, 252, 47, 60, 15, 233, 55, 62, 246, 81, 248, 59, 55, 14, 83, 62, 120, 160, 15, 189, 8, 24, 78, 189, 201, 97, 1, 189, 136, 160, 50, 62, 16, 82, 45, 190, 149, 185, 138, 190, 151, 16, 40, 62, 81, 233, 124, 189, 99, 107, 9, 62, 132, 224, 31, 190, 207, 103, 13, 62, 182, 215, 178, 61, 203, 166, 103, 61, 219, 72, 136, 189, 195, 28, 139, 189, 66, 251, 165, 60, 133, 223, 209, 62, 177, 153, 86, 190, 127, 242, 165, 61, 112, 97, 183, 61, 175, 60, 132, 62, 206, 200, 125, 189, 88, 53, 144, 58, 250, 32, 5, 189, 234, 81, 21, 190, 138, 1, 208, 62, 102, 24, 140, 189, 204, 39, 141, 189, 92, 47, 2, 190, 211, 40, 135, 62, 232, 173, 26, 62, 181, 206, 88, 61, 42, 199, 16, 62, 9, 177, 144, 61, 90, 87, 37, 62, 227, 151, 22, 190, 250, 237, 90, 60, 201, 84, 86, 189, 134, 125, 221, 60, 112, 91, 143, 61, 70, 5, 119, 189, 208, 180, 142, 61, 214, 249, 5, 61, 56, 8, 248, 61, 252, 97, 226, 60, 11, 238, 101, 188, 56, 233, 156, 189, 201, 190, 63, 190, 229, 254, 166, 60, 102, 208, 140, 61, 5, 112, 68, 187, 122, 157, 82, 190, 119, 17, 233, 189, 104, 224, 5, 62, 28, 81, 85, 61, 60, 85, 17, 190, 8, 19, 121, 189, 238, 141, 232, 189, 181, 119, 229, 61, 218, 214, 15, 62, 53, 181, 211, 60, 173, 186, 183, 61, 43, 198, 103, 188, 87, 157, 74, 190, 201, 65, 74, 189, 230, 189, 49, 190, 242, 232, 195, 187, 190, 49, 180, 188, 253, 19, 204, 60, 185, 4, 29, 61, 172, 191, 93, 62, 202, 225, 173, 61, 1, 167, 15, 61, 247, 142, 247, 60, 229, 94, 188, 188, 8, 204, 40, 62, 77, 63, 158, 189, 166, 159, 50, 62, 255, 75, 56, 190, 209, 102, 78, 189, 254, 195, 45, 189, 114, 38, 171, 61, 147, 83, 77, 189, 60, 0, 35, 190, 102, 106, 10, 190, 96, 76, 20, 190, 230, 208, 131, 61, 211, 87, 30, 62, 72, 79, 27, 190, 144, 233, 49, 190, 174, 168, 163, 61, 218, 116, 96, 62, 172, 252, 41, 59, 151, 184, 134, 190, 134, 206, 66, 189, 207, 67, 130, 190, 35, 45, 7, 62, 248, 159, 55, 62, 53, 191, 84, 189, 181, 85, 40, 190, 112, 81, 218, 61, 198, 79, 107, 62, 253, 97, 47, 62, 104, 151, 12, 62, 167, 5, 41, 62, 15, 62, 66, 189, 108, 27, 148, 62, 255, 119, 26, 190, 202, 78, 109, 62, 102, 162, 27, 61, 219, 96, 2, 189, 82, 120, 46, 190, 158, 217, 226, 190, 71, 52, 54, 61, 228, 167, 203, 188, 115, 179, 229, 187, 57, 21, 18, 188, 233, 92, 14, 190, 4, 63, 119, 188, 96, 147, 168, 189, 164, 190, 9, 190, 168, 33, 64, 190, 229, 133, 96, 62, 229, 221, 230, 61, 218, 28, 96, 62, 111, 197, 130, 190, 208, 9, 253, 61, 171, 34, 36, 190, 57, 250, 58, 189, 42, 75, 50, 62, 185, 228, 16, 61, 81, 234, 135, 189, 164, 236, 47, 190, 120, 110, 0, 61, 153, 195, 152, 189, 205, 156, 183, 61, 223, 205, 96, 62, 211, 104, 143, 61, 180, 125, 135, 190, 22, 206, 138, 189, 29, 82, 12, 62, 170, 119, 41, 62, 89, 210, 53, 62, 20, 214, 43, 187, 192, 33, 235, 61, 34, 88, 195, 61, 80, 201, 44, 62, 169, 84, 173, 189, 251, 207, 7, 62, 201, 30, 33, 62, 10, 124, 61, 189, 40, 198, 0, 190, 242, 233, 5, 61, 125, 208, 129, 189, 90, 20, 156, 189, 191, 226, 136, 187, 197, 10, 158, 189, 127, 26, 38, 190, 251, 253, 29, 62, 182, 61, 190, 189, 55, 197, 171, 60, 254, 227, 0, 61, 134, 146, 81, 188, 143, 104, 21, 62, 35, 25, 64, 190, 247, 41, 167, 189, 186, 60, 213, 189, 188, 126, 247, 60, 22, 142, 194, 61, 34, 49, 205, 60, 185, 26, 12, 62, 150, 200, 182, 61, 118, 122, 206, 61, 234, 242, 134, 61, 71, 96, 151, 189, 122, 249, 255, 61, 236, 156, 132, 189, 55, 133, 6, 62, 135, 224, 136, 62, 121, 107, 132, 60, 163, 124, 136, 189, 238, 250, 209, 189, 108, 176, 66, 62, 251, 28, 28, 190, 94, 255, 62, 60, 5, 28, 40, 190, 250, 247, 35, 62, 247, 255, 215, 189, 23, 34, 227, 61, 57, 235, 60, 61, 253, 70, 220, 189, 245, 48, 101, 61, 144, 14, 71, 61, 94, 43, 4, 62, 78, 228, 34, 190, 91, 67, 44, 61, 122, 153, 53, 62, 21, 167, 12, 61, 220, 14, 135, 189, 202, 238, 159, 188, 187, 63, 252, 189, 220, 137, 13, 60, 43, 55, 125, 62, 58, 139, 63, 61, 43, 70, 246, 189, 244, 75, 89, 190, 113, 65, 129, 190, 17, 44, 22, 189, 80, 58, 236, 190, 176, 41, 184, 190, 92, 159, 216, 189, 171, 82, 1, 60, 226, 95, 59, 190, 39, 155, 209, 189, 51, 2, 10, 189, 107, 1, 19, 61, 45, 65, 44, 189, 181, 122, 48, 190, 104, 58, 127, 62, 12, 145, 97, 189, 27, 210, 58, 62, 212, 32, 62, 190, 215, 182, 112, 189, 89, 35, 72, 190, 38, 249, 247, 61, 102, 107, 135, 62, 64, 114, 46, 62, 170, 221, 222, 61, 228, 59, 50, 190, 63, 210, 3, 189, 139, 74, 166, 188, 233, 232, 255, 189, 245, 100, 123, 189, 229, 100, 188, 189, 124, 57, 172, 189, 240, 149, 223, 189, 168, 4, 113, 61, 60, 116, 0, 189, 217, 44, 193, 189, 254, 45, 45, 62, 186, 100, 32, 190, 148, 53, 227, 188, 5, 105, 10, 62, 22, 167, 0, 62, 192, 164, 6, 62, 94, 192, 8, 190, 70, 189, 82, 190, 196, 208, 29, 189, 184, 249, 239, 61, 159, 78, 49, 190, 38, 21, 126, 189, 11, 30, 8, 62, 14, 190, 20, 59, 24, 48, 28, 189, 198, 104, 227, 61, 233, 191, 43, 190, 227, 116, 47, 62, 213, 237, 129, 61, 84, 0, 46, 62, 107, 17, 43, 62, 106, 203, 96, 189, 7, 79, 233, 188, 231, 190, 113, 61, 234, 252, 8, 62, 76, 79, 246, 61, 126, 214, 122, 59, 120, 12, 253, 61, 164, 105, 253, 61, 118, 120, 54, 62, 93, 212, 170, 187, 226, 201, 165, 189, 105, 217, 236, 58, 40, 203, 194, 61, 222, 19, 16, 62, 232, 112, 63, 61, 143, 67, 222, 61, 65, 241, 214, 189, 67, 146, 220, 61, 112, 144, 58, 62, 70, 224, 87, 61, 209, 113, 11, 189, 202, 196, 137, 61, 146, 165, 45, 62, 217, 0, 207, 61, 179, 174, 5, 62, 130, 12, 24, 190, 57, 1, 3, 62, 101, 99, 208, 189, 38, 157, 35, 61, 218, 188, 156, 61, 119, 1, 115, 61, 12, 181, 54, 62, 142, 173, 149, 188, 161, 199, 45, 189, 171, 176, 137, 188, 89, 164, 122, 190, 186, 165, 19, 62, 186, 83, 96, 188, 187, 249, 211, 187, 124, 29, 8, 61, 112, 190, 91, 60, 0, 76, 119, 190, 236, 17, 254, 60, 27, 106, 50, 190, 42, 96, 19, 190, 155, 1, 86, 62, 175, 196, 26, 62, 153, 148, 16, 190, 91, 121, 61, 61, 73, 53, 203, 61, 237, 72, 187, 61, 61, 168, 209, 58, 177, 28, 78, 60, 125, 47, 0, 61, 126, 4, 42, 190, 78, 80, 9, 188, 153, 128, 201, 189, 44, 136, 207, 188, 117, 142, 232, 188, 71, 9, 84, 62, 96, 41, 176, 188, 41, 3, 170, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {153, 11, 105, 62, 183, 2, 100, 61, 72, 86, 88, 189, 156, 170, 14, 62, 147, 7, 66, 61, 76, 82, 115, 189, 230, 193, 193, 61, 241, 103, 112, 189, 217, 140, 2, 190, 138, 64, 46, 190, 126, 237, 84, 190, 165, 254, 153, 61, 13, 9, 51, 62, 116, 127, 52, 190, 161, 163, 157, 187, 240, 235, 41, 190, 214, 141, 175, 60, 187, 201, 176, 188, 209, 140, 32, 62, 250, 228, 205, 189, 114, 75, 45, 62, 1, 226, 9, 62, 94, 125, 149, 61, 176, 171, 38, 190, 176, 235, 33, 62, 243, 143, 111, 62, 152, 199, 7, 190, 171, 220, 82, 60, 143, 53, 90, 62, 114, 170, 26, 190, 239, 188, 174, 59, 247, 52, 98, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 139, 131, 190, 173, 96, 202, 189, 131, 185, 73, 60, 209, 63, 46, 62, 170, 104, 91, 190, 0, 205, 9, 62, 26, 226, 161, 190, 195, 110, 28, 62, 203, 212, 131, 189, 188, 180, 250, 189, 89, 3, 7, 190, 7, 102, 173, 61, 152, 134, 156, 62, 89, 213, 20, 61, 233, 20, 105, 61, 17, 4, 191, 61, 203, 111, 46, 190, 78, 144, 97, 190, 210, 78, 14, 62, 22, 183, 248, 61, 142, 90, 122, 62, 149, 247, 12, 190, 198, 212, 16, 190, 148, 82, 187, 189, 126, 148, 60, 62, 79, 143, 155, 62, 49, 245, 60, 62, 199, 192, 200, 59, 42, 89, 196, 62, 65, 207, 32, 190, 23, 233, 104, 188, 241, 137, 174, 190, 72, 194, 169, 190, 214, 70, 78, 190, 17, 194, 85, 189, 41, 236, 125, 61, 130, 249, 35, 190, 206, 195, 110, 62, 33, 91, 249, 61, 160, 55, 149, 60, 197, 179, 119, 189, 222, 106, 224, 61, 251, 241, 195, 61, 82, 57, 19, 60, 159, 180, 242, 61, 204, 101, 100, 61, 94, 230, 78, 61, 160, 231, 8, 188, 53, 2, 141, 189, 183, 242, 3, 62, 160, 173, 42, 187, 240, 4, 101, 57, 224, 66, 69, 190, 22, 3, 60, 61, 21, 179, 177, 61, 124, 61, 65, 61, 117, 79, 153, 61, 86, 191, 249, 189, 245, 236, 24, 62, 37, 222, 7, 190, 231, 96, 35, 190, 2, 218, 248, 60, 83, 140, 46, 190, 250, 104, 192, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 88, 211, 189, 29, 0, 42, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {167, 191, 146, 190, 155, 243, 82, 191, 250, 103, 17, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {135, 60, 233, 63, 214, 48, 48, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0059/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}