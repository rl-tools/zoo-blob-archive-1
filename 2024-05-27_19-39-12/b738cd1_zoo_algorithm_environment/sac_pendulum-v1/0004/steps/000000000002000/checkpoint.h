// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 28, 88, 62, 218, 93, 125, 62, 155, 12, 213, 190, 38, 163, 214, 190, 222, 183, 223, 190, 198, 239, 178, 189, 212, 97, 28, 62, 18, 39, 44, 63, 102, 87, 80, 62, 169, 51, 226, 190, 94, 124, 247, 190, 43, 240, 124, 62, 117, 94, 48, 191, 149, 149, 85, 63, 119, 5, 179, 190, 10, 217, 195, 189, 147, 107, 247, 62, 43, 155, 35, 62, 234, 83, 135, 62, 65, 0, 17, 190, 207, 146, 162, 190, 171, 238, 216, 61, 110, 246, 160, 61, 58, 166, 153, 62, 38, 84, 83, 190, 224, 83, 74, 62, 31, 93, 199, 61, 121, 3, 240, 62, 238, 162, 7, 63, 171, 30, 155, 62, 147, 191, 20, 63, 253, 96, 28, 62, 205, 187, 187, 62, 156, 46, 246, 189, 135, 190, 152, 190, 98, 138, 6, 190, 201, 151, 242, 190, 51, 203, 51, 63, 101, 32, 60, 190, 103, 114, 234, 59, 130, 67, 54, 63, 179, 143, 178, 62, 172, 132, 87, 190, 85, 107, 16, 191, 227, 19, 50, 189, 79, 244, 137, 62, 198, 213, 60, 62, 32, 115, 251, 61, 114, 127, 15, 62, 209, 41, 102, 190, 116, 128, 105, 189, 140, 232, 136, 190, 222, 169, 141, 189, 219, 140, 215, 62, 221, 180, 94, 62, 201, 54, 129, 62, 112, 182, 117, 190, 126, 49, 161, 189, 224, 138, 15, 63, 112, 199, 190, 62, 220, 105, 99, 189, 195, 67, 52, 191, 236, 147, 37, 189, 146, 50, 0, 191, 132, 233, 63, 62, 64, 105, 27, 62, 111, 111, 0, 189, 178, 202, 74, 191, 33, 255, 72, 61, 140, 60, 22, 62, 140, 202, 35, 63, 2, 244, 136, 190, 107, 133, 213, 190, 55, 227, 11, 191, 62, 217, 240, 190, 241, 136, 251, 60, 225, 93, 165, 61, 39, 84, 213, 62, 237, 246, 169, 62, 245, 19, 104, 191, 225, 232, 94, 190, 81, 234, 93, 62, 179, 140, 201, 62, 16, 31, 110, 62, 88, 9, 206, 61, 164, 52, 46, 191, 249, 54, 57, 190, 151, 109, 242, 190, 219, 114, 205, 61, 183, 186, 179, 61, 54, 182, 190, 190, 7, 37, 113, 191, 23, 11, 156, 190, 54, 27, 147, 62, 129, 11, 160, 62, 38, 200, 222, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {229, 188, 237, 190, 140, 92, 234, 61, 127, 68, 223, 189, 153, 148, 139, 190, 34, 72, 17, 189, 77, 71, 251, 190, 186, 116, 145, 190, 109, 53, 28, 191, 202, 54, 240, 190, 41, 93, 6, 191, 34, 99, 164, 190, 99, 53, 189, 190, 245, 73, 225, 189, 198, 208, 96, 190, 255, 102, 141, 187, 106, 28, 34, 62, 87, 127, 31, 63, 136, 13, 28, 62, 4, 12, 251, 189, 121, 3, 138, 62, 73, 165, 150, 190, 8, 238, 145, 190, 96, 1, 24, 63, 49, 65, 22, 63, 54, 23, 125, 190, 55, 96, 51, 62, 172, 231, 240, 62, 44, 87, 228, 61, 221, 28, 12, 63, 96, 168, 221, 62, 82, 191, 221, 61, 4, 175, 206, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 30, 225, 61, 116, 255, 68, 61, 27, 77, 77, 190, 58, 97, 19, 62, 189, 34, 4, 190, 90, 254, 250, 61, 155, 6, 48, 62, 91, 211, 58, 189, 45, 119, 194, 61, 125, 190, 160, 61, 225, 202, 54, 190, 189, 185, 138, 61, 49, 210, 4, 189, 153, 5, 17, 61, 94, 51, 4, 62, 182, 141, 155, 61, 191, 170, 205, 189, 142, 20, 134, 61, 132, 208, 23, 62, 34, 125, 3, 190, 137, 235, 67, 60, 149, 86, 31, 189, 131, 129, 60, 62, 222, 80, 151, 60, 122, 115, 55, 62, 203, 65, 92, 60, 165, 207, 83, 189, 143, 130, 49, 188, 7, 204, 129, 188, 20, 222, 12, 190, 220, 5, 16, 190, 18, 102, 89, 189, 9, 173, 33, 62, 183, 34, 47, 190, 159, 167, 1, 190, 227, 224, 65, 59, 204, 13, 5, 190, 229, 33, 152, 61, 167, 235, 171, 61, 202, 89, 34, 190, 65, 212, 97, 61, 116, 213, 207, 188, 7, 173, 98, 188, 205, 46, 225, 61, 172, 133, 81, 189, 116, 141, 236, 61, 84, 243, 169, 189, 13, 56, 126, 61, 247, 133, 22, 62, 15, 206, 161, 189, 234, 75, 179, 61, 28, 177, 172, 189, 241, 211, 36, 190, 221, 88, 101, 61, 91, 15, 175, 189, 180, 106, 25, 190, 94, 196, 19, 189, 228, 51, 129, 60, 140, 144, 180, 189, 217, 179, 141, 189, 61, 21, 80, 189, 37, 128, 44, 60, 125, 78, 52, 190, 203, 58, 21, 190, 87, 127, 18, 61, 27, 200, 187, 189, 70, 90, 171, 189, 10, 65, 20, 190, 45, 206, 145, 190, 97, 32, 8, 190, 43, 10, 139, 188, 27, 191, 154, 61, 23, 96, 141, 61, 101, 84, 243, 189, 49, 51, 30, 189, 188, 61, 39, 188, 71, 110, 198, 189, 218, 54, 131, 189, 208, 113, 159, 190, 37, 146, 128, 62, 176, 77, 154, 61, 110, 244, 171, 189, 19, 153, 18, 62, 94, 85, 78, 189, 218, 96, 161, 61, 55, 30, 114, 190, 243, 41, 142, 61, 236, 85, 72, 62, 226, 141, 149, 190, 108, 24, 156, 59, 156, 112, 16, 62, 195, 192, 86, 188, 205, 85, 100, 189, 115, 252, 108, 189, 243, 45, 49, 190, 77, 245, 88, 60, 126, 251, 81, 62, 253, 123, 111, 189, 71, 212, 143, 189, 132, 139, 144, 188, 105, 227, 171, 61, 172, 230, 141, 61, 116, 210, 128, 189, 111, 195, 33, 62, 72, 231, 24, 190, 132, 106, 195, 189, 96, 212, 227, 60, 193, 65, 8, 189, 0, 186, 187, 188, 110, 64, 218, 189, 148, 6, 48, 190, 180, 28, 34, 190, 4, 201, 211, 61, 244, 42, 32, 190, 126, 250, 79, 62, 157, 158, 187, 61, 74, 168, 21, 190, 94, 62, 23, 190, 193, 127, 148, 190, 16, 9, 31, 190, 207, 219, 0, 62, 44, 237, 69, 61, 249, 0, 135, 60, 190, 239, 17, 190, 203, 37, 78, 189, 225, 191, 8, 190, 210, 13, 75, 190, 135, 111, 168, 189, 189, 41, 92, 190, 26, 39, 211, 189, 141, 87, 82, 187, 110, 34, 13, 62, 2, 85, 83, 190, 66, 110, 14, 190, 173, 171, 131, 190, 198, 224, 161, 188, 245, 97, 35, 62, 80, 37, 182, 61, 210, 184, 162, 61, 169, 82, 213, 61, 149, 46, 217, 189, 104, 21, 7, 60, 6, 84, 195, 189, 144, 210, 65, 62, 185, 198, 48, 62, 230, 202, 223, 189, 86, 112, 106, 189, 235, 95, 69, 62, 163, 62, 108, 190, 175, 37, 56, 62, 195, 216, 40, 62, 133, 165, 134, 189, 60, 183, 91, 190, 238, 210, 184, 61, 8, 88, 27, 62, 4, 163, 15, 190, 21, 59, 187, 61, 220, 59, 237, 189, 118, 47, 152, 60, 104, 209, 203, 61, 122, 220, 137, 60, 102, 232, 154, 61, 108, 158, 165, 190, 240, 189, 34, 189, 20, 7, 139, 189, 156, 217, 238, 61, 38, 162, 106, 61, 16, 129, 20, 61, 68, 177, 60, 189, 112, 127, 130, 190, 234, 121, 81, 190, 219, 122, 149, 61, 145, 94, 88, 190, 197, 135, 93, 189, 243, 114, 189, 61, 173, 95, 166, 188, 240, 126, 135, 62, 38, 176, 105, 61, 155, 247, 70, 62, 246, 255, 229, 61, 77, 236, 37, 62, 211, 89, 187, 59, 15, 3, 113, 62, 61, 33, 27, 62, 195, 201, 137, 60, 120, 10, 144, 189, 214, 156, 5, 59, 88, 28, 58, 61, 252, 158, 78, 62, 230, 35, 234, 60, 240, 43, 15, 62, 165, 158, 21, 62, 196, 3, 96, 62, 187, 101, 209, 188, 120, 228, 196, 189, 216, 169, 107, 59, 186, 183, 192, 61, 58, 43, 39, 62, 167, 55, 152, 189, 128, 228, 18, 189, 160, 67, 80, 62, 4, 37, 58, 189, 132, 41, 218, 188, 152, 79, 90, 61, 19, 63, 211, 189, 183, 123, 50, 189, 183, 80, 252, 188, 3, 247, 8, 62, 40, 130, 30, 62, 118, 141, 220, 61, 194, 221, 25, 62, 71, 91, 165, 188, 6, 177, 153, 61, 2, 13, 164, 61, 236, 125, 229, 60, 176, 80, 235, 61, 153, 142, 81, 189, 244, 50, 210, 189, 225, 103, 199, 189, 176, 189, 111, 62, 125, 96, 251, 61, 169, 118, 78, 189, 223, 71, 150, 61, 203, 103, 3, 62, 64, 115, 74, 190, 104, 220, 25, 190, 155, 105, 136, 189, 89, 246, 179, 189, 117, 39, 15, 189, 53, 59, 1, 61, 151, 20, 10, 190, 168, 189, 253, 61, 142, 181, 191, 189, 70, 175, 205, 189, 34, 242, 177, 188, 40, 122, 231, 189, 201, 254, 135, 190, 33, 44, 13, 190, 82, 63, 83, 61, 199, 229, 136, 188, 138, 90, 128, 188, 92, 136, 122, 189, 103, 72, 114, 61, 96, 3, 152, 61, 67, 88, 128, 62, 197, 90, 210, 58, 178, 95, 0, 188, 222, 31, 6, 188, 67, 137, 104, 61, 224, 14, 20, 190, 187, 153, 21, 189, 7, 99, 177, 189, 210, 233, 165, 61, 199, 204, 150, 61, 123, 101, 219, 61, 115, 155, 87, 58, 79, 54, 57, 190, 93, 24, 13, 62, 76, 204, 5, 61, 135, 8, 112, 189, 167, 43, 139, 61, 99, 110, 34, 62, 119, 64, 33, 190, 95, 66, 27, 62, 248, 173, 3, 190, 38, 62, 148, 189, 58, 247, 134, 60, 130, 116, 126, 61, 46, 126, 48, 189, 213, 45, 24, 190, 231, 254, 236, 61, 21, 69, 201, 188, 139, 129, 112, 59, 33, 73, 36, 190, 216, 39, 208, 186, 19, 62, 30, 61, 45, 104, 232, 61, 201, 12, 23, 190, 70, 216, 194, 189, 219, 206, 126, 189, 142, 197, 195, 61, 89, 17, 44, 61, 197, 34, 143, 188, 120, 9, 178, 189, 36, 54, 81, 189, 66, 136, 203, 189, 209, 144, 196, 60, 122, 71, 210, 189, 216, 57, 158, 61, 133, 251, 205, 188, 122, 31, 31, 190, 25, 33, 93, 62, 106, 233, 74, 190, 196, 34, 33, 61, 98, 243, 22, 189, 83, 89, 230, 61, 161, 112, 195, 61, 135, 150, 138, 190, 76, 109, 53, 190, 6, 107, 127, 190, 107, 138, 179, 189, 87, 154, 210, 189, 94, 241, 112, 62, 126, 243, 91, 188, 103, 122, 121, 61, 187, 243, 119, 61, 126, 174, 37, 189, 192, 233, 219, 188, 101, 66, 142, 62, 45, 206, 32, 62, 140, 124, 103, 62, 49, 100, 67, 190, 151, 100, 32, 190, 173, 67, 221, 60, 255, 234, 117, 62, 108, 84, 160, 60, 132, 139, 113, 62, 177, 68, 5, 190, 119, 190, 83, 62, 145, 243, 167, 187, 121, 247, 8, 190, 117, 94, 29, 190, 110, 98, 142, 189, 195, 8, 166, 189, 174, 56, 79, 61, 44, 90, 198, 189, 192, 66, 178, 189, 144, 243, 18, 190, 107, 62, 218, 189, 21, 180, 20, 188, 125, 245, 81, 190, 177, 148, 189, 60, 149, 164, 196, 57, 13, 148, 71, 190, 178, 80, 66, 61, 162, 239, 23, 62, 119, 75, 17, 190, 204, 50, 233, 188, 96, 26, 196, 188, 112, 210, 0, 62, 79, 233, 34, 190, 190, 207, 78, 61, 43, 133, 4, 62, 190, 147, 117, 190, 143, 239, 209, 189, 172, 134, 19, 188, 67, 225, 147, 60, 210, 13, 81, 61, 148, 29, 77, 190, 161, 120, 213, 61, 151, 104, 90, 60, 43, 93, 113, 187, 141, 230, 101, 190, 171, 231, 0, 188, 245, 91, 130, 62, 64, 98, 101, 190, 114, 187, 42, 62, 206, 70, 30, 190, 242, 24, 74, 189, 127, 220, 142, 189, 124, 252, 69, 190, 160, 19, 90, 62, 215, 133, 89, 189, 104, 84, 40, 190, 114, 79, 126, 62, 206, 208, 50, 62, 225, 214, 194, 188, 202, 119, 83, 62, 3, 44, 121, 189, 30, 52, 132, 189, 9, 14, 5, 189, 158, 211, 10, 62, 20, 186, 115, 189, 127, 58, 61, 190, 180, 88, 174, 188, 91, 253, 63, 61, 105, 199, 22, 62, 166, 187, 83, 61, 213, 164, 105, 190, 81, 224, 249, 187, 86, 16, 125, 190, 74, 153, 185, 61, 212, 114, 156, 61, 187, 139, 58, 190, 17, 94, 78, 62, 168, 153, 185, 61, 207, 203, 153, 188, 184, 111, 2, 62, 98, 204, 100, 189, 183, 81, 95, 190, 103, 58, 24, 62, 226, 245, 44, 190, 91, 77, 123, 189, 19, 186, 0, 62, 6, 193, 139, 190, 126, 22, 184, 189, 100, 100, 31, 190, 173, 158, 132, 190, 142, 145, 50, 62, 108, 199, 148, 190, 144, 98, 99, 61, 217, 108, 200, 61, 249, 233, 4, 62, 178, 208, 12, 190, 74, 100, 235, 61, 75, 144, 29, 62, 192, 199, 151, 62, 237, 171, 43, 190, 225, 19, 156, 61, 61, 171, 147, 60, 109, 240, 199, 60, 194, 234, 130, 189, 89, 200, 227, 61, 182, 106, 159, 60, 12, 10, 28, 62, 95, 40, 186, 61, 47, 176, 141, 190, 60, 91, 41, 190, 165, 167, 102, 61, 224, 106, 86, 190, 64, 111, 130, 62, 165, 15, 57, 189, 20, 193, 32, 190, 199, 26, 18, 190, 9, 99, 78, 190, 199, 195, 186, 61, 89, 64, 149, 186, 76, 182, 74, 190, 241, 121, 166, 62, 105, 74, 88, 61, 168, 253, 146, 190, 6, 106, 104, 62, 28, 222, 44, 61, 186, 119, 132, 189, 131, 239, 39, 190, 162, 225, 78, 62, 170, 12, 175, 189, 64, 186, 73, 190, 148, 67, 114, 189, 143, 46, 44, 62, 216, 8, 0, 190, 44, 23, 46, 62, 64, 227, 76, 61, 148, 216, 239, 61, 198, 23, 184, 61, 63, 167, 201, 61, 230, 122, 8, 59, 73, 221, 123, 190, 213, 66, 66, 61, 211, 233, 212, 61, 56, 43, 142, 188, 214, 248, 124, 190, 249, 166, 245, 188, 13, 51, 62, 61, 94, 70, 161, 61, 10, 63, 49, 190, 24, 11, 247, 189, 134, 90, 198, 189, 166, 20, 212, 189, 152, 228, 94, 62, 196, 42, 81, 62, 175, 185, 222, 189, 144, 214, 11, 62, 47, 9, 97, 187, 145, 108, 186, 189, 4, 149, 10, 190, 41, 230, 162, 188, 90, 148, 145, 61, 21, 108, 60, 61, 102, 188, 110, 62, 13, 34, 30, 60, 18, 139, 85, 61, 235, 11, 81, 62, 78, 34, 105, 190, 179, 38, 170, 189, 241, 54, 47, 190, 164, 201, 119, 59, 225, 64, 7, 61, 32, 42, 92, 62, 206, 132, 208, 189, 207, 144, 207, 189, 6, 165, 74, 190, 1, 114, 66, 62, 109, 110, 208, 61, 25, 76, 183, 60, 171, 161, 50, 61, 183, 207, 141, 190, 146, 50, 171, 61, 40, 240, 16, 190, 81, 95, 248, 189, 190, 110, 89, 62, 23, 89, 223, 60, 16, 235, 239, 61, 88, 236, 116, 188, 205, 164, 31, 190, 12, 93, 52, 62, 228, 175, 138, 62, 102, 212, 197, 189, 110, 77, 146, 189, 25, 104, 193, 61, 129, 136, 94, 59, 29, 77, 48, 190, 106, 163, 187, 61, 103, 229, 156, 62, 160, 80, 106, 61, 165, 188, 205, 61, 155, 97, 0, 190, 32, 116, 37, 62, 241, 51, 207, 189, 233, 140, 173, 61, 190, 201, 208, 189, 252, 113, 218, 189, 143, 54, 199, 188, 64, 21, 158, 61, 226, 20, 120, 190, 55, 150, 195, 61, 152, 57, 11, 190, 173, 52, 44, 61, 96, 237, 76, 61, 69, 52, 54, 190, 173, 122, 48, 62, 58, 218, 45, 190, 61, 240, 28, 189, 20, 155, 72, 190, 253, 135, 186, 188, 194, 213, 37, 189, 73, 24, 150, 189, 158, 39, 174, 61, 232, 112, 154, 62, 159, 154, 230, 61, 104, 216, 237, 188, 200, 137, 156, 189, 96, 57, 69, 62, 84, 47, 147, 60, 232, 154, 181, 61, 114, 8, 116, 62, 220, 30, 162, 61, 249, 161, 16, 61, 191, 242, 127, 61, 68, 161, 57, 189, 188, 202, 75, 60, 145, 241, 75, 188, 128, 218, 243, 189, 96, 154, 11, 62, 24, 60, 252, 188, 228, 203, 40, 61, 9, 89, 32, 188, 243, 167, 27, 62, 6, 121, 86, 189, 162, 196, 62, 61, 150, 152, 60, 188, 99, 175, 137, 189, 111, 93, 159, 188, 107, 198, 106, 61, 84, 75, 16, 190, 109, 215, 213, 188, 235, 11, 149, 188, 101, 7, 234, 61, 147, 83, 6, 62, 213, 66, 243, 187, 51, 131, 56, 61, 211, 97, 135, 59, 191, 5, 252, 60, 38, 119, 22, 190, 148, 95, 88, 190, 125, 216, 178, 60, 97, 105, 16, 188, 14, 187, 33, 190, 214, 255, 230, 189, 201, 33, 17, 61, 217, 95, 247, 61, 241, 13, 197, 61, 103, 8, 12, 62, 48, 37, 137, 190, 176, 57, 172, 60, 209, 119, 235, 61, 21, 28, 96, 190, 222, 99, 92, 190, 71, 72, 80, 62, 1, 32, 165, 190, 236, 73, 192, 61, 122, 120, 102, 189, 109, 67, 80, 190, 217, 67, 175, 189, 139, 206, 174, 189, 227, 47, 252, 189, 84, 191, 139, 189, 74, 113, 252, 189, 177, 220, 93, 62, 199, 155, 50, 62, 157, 17, 113, 190, 61, 23, 128, 187, 53, 103, 161, 62, 182, 129, 174, 61, 248, 61, 32, 188, 23, 192, 14, 61, 191, 167, 144, 190, 85, 123, 151, 61, 22, 185, 171, 189, 182, 249, 126, 62, 33, 201, 211, 189, 132, 232, 17, 190, 109, 119, 135, 189, 27, 215, 77, 189, 138, 102, 156, 61, 59, 230, 55, 188, 97, 126, 58, 190, 141, 229, 44, 190, 177, 153, 132, 190, 126, 169, 225, 61, 0, 1, 168, 190, 91, 7, 154, 61, 85, 127, 207, 190, 185, 46, 245, 188, 1, 235, 105, 189, 52, 94, 157, 189, 207, 155, 219, 189, 234, 211, 130, 189, 61, 134, 31, 190, 230, 102, 133, 189, 33, 194, 173, 190, 0, 122, 104, 189, 75, 201, 164, 60, 85, 160, 222, 60, 227, 239, 9, 62, 139, 35, 55, 190, 125, 100, 192, 189, 138, 202, 135, 61, 65, 103, 166, 61, 33, 15, 62, 187, 132, 108, 155, 62, 158, 6, 142, 190, 221, 127, 217, 60, 143, 158, 154, 61, 24, 117, 9, 62, 143, 253, 192, 59, 201, 110, 214, 61, 219, 118, 41, 62, 3, 196, 253, 60, 54, 119, 160, 190, 172, 217, 250, 60, 180, 22, 247, 61, 20, 29, 56, 190, 18, 9, 181, 189, 182, 214, 6, 190, 79, 45, 136, 59, 68, 58, 114, 61, 156, 51, 151, 61, 136, 27, 8, 62, 71, 109, 92, 61, 47, 180, 83, 190, 103, 166, 92, 190, 70, 134, 22, 190, 175, 92, 12, 190, 126, 218, 35, 61, 174, 5, 18, 190, 179, 149, 83, 62, 72, 7, 25, 62, 232, 142, 182, 189, 250, 230, 36, 187, 35, 67, 49, 62, 101, 89, 232, 189, 168, 13, 112, 62, 26, 214, 229, 60, 225, 138, 12, 189, 60, 38, 48, 61, 47, 42, 129, 62, 255, 5, 255, 59, 172, 220, 8, 62, 19, 135, 253, 188, 238, 81, 86, 60, 185, 220, 177, 61, 218, 104, 104, 61, 69, 69, 84, 189, 158, 171, 21, 62, 14, 44, 68, 190, 4, 74, 77, 61, 74, 21, 183, 189, 91, 115, 207, 61, 186, 172, 53, 190, 224, 36, 80, 189, 12, 203, 244, 61, 131, 219, 9, 190, 92, 82, 239, 187, 0, 119, 83, 61, 136, 39, 36, 188, 226, 161, 250, 60, 254, 6, 70, 62, 44, 248, 20, 62, 173, 108, 12, 189, 206, 216, 163, 60, 133, 46, 238, 188, 107, 22, 133, 61, 39, 82, 129, 189, 250, 165, 252, 188, 174, 92, 104, 189, 0, 79, 72, 62, 42, 91, 8, 62, 11, 152, 15, 190, 20, 4, 23, 187, 12, 196, 219, 187, 91, 100, 200, 61, 57, 18, 124, 189, 180, 128, 27, 62, 130, 112, 80, 189, 220, 90, 65, 189, 141, 90, 199, 188, 184, 217, 135, 189, 147, 86, 145, 188, 102, 12, 138, 61, 26, 96, 155, 61, 253, 208, 220, 59, 29, 243, 121, 61, 175, 106, 187, 60, 57, 191, 186, 188, 125, 209, 18, 62, 55, 198, 53, 190, 244, 142, 225, 189, 10, 161, 247, 61, 89, 131, 239, 189, 84, 13, 238, 61, 188, 82, 113, 61, 170, 241, 47, 62, 143, 222, 134, 61, 141, 206, 203, 61, 245, 142, 12, 190, 145, 96, 255, 61, 39, 182, 5, 190, 107, 83, 237, 61, 202, 103, 27, 62, 41, 18, 75, 190, 17, 198, 253, 189, 202, 149, 86, 61, 207, 248, 193, 189, 60, 177, 21, 62, 178, 102, 171, 59, 226, 161, 183, 189, 49, 156, 33, 190, 98, 195, 35, 62, 142, 138, 65, 62, 71, 74, 47, 190, 32, 24, 66, 188, 70, 162, 220, 189, 122, 12, 157, 189, 185, 69, 185, 189, 23, 73, 49, 62, 247, 229, 10, 62, 75, 203, 208, 61, 4, 246, 231, 61, 66, 52, 142, 61, 11, 126, 48, 189, 163, 128, 114, 61, 105, 244, 2, 190, 239, 157, 117, 189, 124, 16, 167, 189, 189, 1, 163, 60, 1, 203, 61, 61, 164, 74, 22, 190, 11, 253, 76, 190, 194, 90, 214, 189, 178, 90, 20, 62, 222, 116, 222, 60, 123, 97, 12, 61, 156, 47, 156, 189, 210, 86, 126, 189, 68, 62, 1, 190, 140, 155, 48, 61, 245, 179, 236, 189, 55, 185, 191, 189, 170, 51, 243, 61, 59, 180, 196, 61, 187, 98, 196, 61, 199, 137, 129, 189, 143, 37, 32, 190, 138, 207, 22, 62, 51, 58, 200, 61, 1, 98, 8, 189, 50, 218, 24, 190, 190, 48, 220, 60, 215, 63, 17, 60, 63, 46, 208, 60, 24, 20, 235, 189, 114, 124, 15, 190, 92, 229, 183, 189, 50, 243, 190, 61, 19, 80, 223, 189, 16, 185, 144, 189, 96, 43, 48, 190, 214, 48, 164, 61, 109, 75, 225, 189, 134, 165, 53, 190, 238, 227, 3, 190, 175, 212, 9, 189, 36, 2, 252, 61, 253, 58, 137, 61, 147, 168, 50, 61, 122, 225, 2, 62, 110, 46, 15, 62, 160, 18, 185, 189, 79, 83, 26, 190, 32, 18, 166, 190, 108, 215, 97, 188, 185, 58, 56, 61, 131, 165, 163, 61, 177, 64, 193, 62, 24, 4, 215, 189, 62, 12, 20, 190, 165, 41, 15, 61, 202, 205, 224, 189, 102, 108, 204, 188, 182, 196, 101, 62, 224, 114, 62, 190, 119, 216, 229, 62, 217, 24, 169, 189, 183, 201, 136, 188, 228, 88, 104, 62, 245, 16, 186, 61, 129, 15, 217, 60, 73, 43, 33, 190, 118, 47, 142, 61, 185, 249, 9, 62, 123, 63, 15, 190, 233, 250, 76, 190, 251, 201, 94, 61, 5, 47, 106, 61, 190, 22, 212, 189, 98, 236, 56, 190, 208, 206, 212, 61, 110, 3, 85, 190, 97, 170, 220, 61, 21, 46, 132, 189, 255, 181, 125, 190, 132, 19, 47, 189, 142, 177, 109, 190, 191, 176, 31, 62, 198, 255, 72, 190, 48, 151, 96, 190, 175, 116, 205, 61, 51, 11, 97, 61, 84, 143, 136, 61, 45, 78, 88, 60, 87, 107, 99, 189, 70, 27, 29, 62, 113, 87, 134, 189, 3, 191, 68, 190, 216, 165, 192, 61, 81, 36, 127, 62, 213, 206, 6, 62, 206, 145, 32, 189, 165, 253, 54, 188, 23, 222, 123, 61, 9, 145, 13, 62, 0, 38, 104, 189, 174, 76, 133, 190, 244, 163, 26, 190, 177, 53, 75, 61, 241, 73, 77, 189, 179, 149, 56, 62, 138, 149, 120, 190, 69, 160, 28, 188, 93, 154, 225, 189, 21, 108, 97, 190, 91, 78, 45, 189, 175, 50, 9, 190, 70, 0, 105, 62, 79, 60, 52, 59, 144, 21, 82, 61, 34, 82, 213, 61, 91, 105, 133, 189, 3, 48, 232, 189, 217, 137, 34, 62, 76, 167, 176, 190, 234, 64, 154, 188, 141, 216, 243, 189, 34, 234, 42, 190, 114, 217, 61, 61, 131, 144, 144, 190, 88, 128, 169, 190, 141, 3, 101, 62, 7, 100, 90, 61, 78, 206, 90, 60, 137, 71, 155, 61, 108, 142, 48, 61, 140, 180, 120, 61, 164, 107, 149, 61, 104, 195, 207, 189, 59, 63, 81, 62, 204, 249, 119, 190, 68, 253, 193, 189, 46, 200, 79, 188, 69, 43, 43, 62, 235, 190, 92, 190, 228, 204, 64, 62, 25, 152, 234, 61, 188, 54, 148, 61, 31, 124, 32, 62, 74, 10, 116, 189, 109, 52, 159, 187, 234, 176, 17, 190, 51, 20, 76, 62, 251, 177, 220, 59, 179, 92, 33, 190, 2, 50, 39, 62, 149, 98, 63, 190, 35, 161, 135, 188, 45, 90, 79, 190, 108, 225, 176, 190, 94, 194, 254, 189, 33, 240, 16, 190, 168, 24, 109, 190, 162, 181, 237, 61, 242, 195, 196, 190, 212, 117, 229, 60, 237, 82, 175, 61, 201, 197, 50, 62, 188, 6, 215, 61, 246, 2, 34, 60, 111, 118, 204, 189, 251, 214, 135, 62, 46, 28, 251, 188, 185, 231, 195, 189, 144, 73, 190, 189, 212, 191, 16, 189, 189, 155, 162, 190, 63, 219, 186, 61, 164, 239, 123, 62, 219, 25, 48, 62, 142, 112, 57, 62, 127, 155, 125, 190, 121, 224, 129, 62, 184, 144, 121, 62, 6, 149, 209, 59, 111, 64, 190, 62, 3, 167, 209, 61, 121, 238, 173, 190, 100, 215, 239, 188, 72, 16, 71, 190, 60, 242, 133, 61, 231, 95, 101, 62, 52, 223, 63, 59, 193, 252, 133, 62, 162, 133, 89, 61, 79, 15, 12, 190, 159, 245, 104, 62, 248, 163, 251, 189, 192, 225, 61, 189, 44, 36, 6, 190, 244, 125, 30, 62, 46, 33, 127, 61, 13, 218, 144, 189, 167, 169, 197, 61, 19, 32, 103, 62, 50, 148, 150, 61, 196, 78, 227, 61, 153, 195, 218, 190, 146, 216, 47, 62, 57, 233, 142, 190, 0, 152, 56, 189, 232, 146, 210, 189, 235, 96, 130, 189, 19, 139, 39, 190, 55, 29, 2, 190, 189, 145, 102, 62, 49, 162, 127, 190, 191, 171, 7, 190, 130, 143, 166, 189, 226, 163, 127, 61, 241, 80, 79, 190, 87, 84, 79, 60, 245, 85, 25, 62, 34, 115, 199, 189, 200, 186, 158, 61, 133, 247, 26, 62, 107, 90, 48, 61, 171, 128, 235, 61, 84, 80, 32, 62, 88, 108, 46, 62, 190, 79, 36, 188, 97, 124, 82, 190, 136, 138, 252, 61, 124, 168, 153, 189, 117, 202, 57, 189, 145, 83, 4, 190, 9, 168, 217, 61, 204, 78, 252, 61, 1, 236, 251, 189, 126, 60, 254, 59, 121, 82, 155, 189, 124, 71, 6, 189, 57, 30, 17, 62, 103, 0, 216, 61, 16, 231, 141, 188, 250, 240, 52, 190, 220, 148, 182, 61, 249, 191, 127, 62, 40, 250, 173, 188, 20, 35, 189, 62, 147, 7, 163, 61, 0, 190, 69, 190, 186, 254, 23, 62, 169, 129, 210, 61, 83, 105, 31, 188, 29, 203, 179, 61, 89, 77, 118, 190, 253, 155, 60, 62, 188, 32, 122, 189, 11, 108, 132, 187, 99, 34, 69, 62, 60, 170, 176, 60, 38, 234, 16, 61, 33, 100, 62, 190, 45, 214, 254, 61, 236, 247, 166, 61, 238, 176, 207, 61, 206, 253, 5, 190, 173, 132, 192, 61, 10, 125, 133, 189, 154, 137, 32, 61, 200, 88, 177, 190, 230, 100, 250, 61, 167, 186, 138, 61, 238, 141, 193, 61, 176, 145, 180, 189, 64, 30, 101, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 96, 36, 62, 231, 166, 42, 189, 118, 59, 67, 62, 151, 121, 59, 189, 164, 53, 150, 61, 190, 114, 169, 60, 85, 205, 24, 62, 91, 23, 35, 188, 48, 203, 1, 190, 247, 60, 237, 61, 11, 141, 215, 189, 238, 12, 53, 62, 179, 17, 152, 189, 160, 141, 114, 60, 46, 200, 161, 187, 158, 34, 50, 188, 177, 87, 235, 61, 223, 19, 99, 188, 92, 58, 91, 62, 222, 113, 55, 62, 218, 209, 33, 190, 0, 253, 106, 188, 176, 132, 49, 190, 219, 234, 99, 190, 66, 24, 0, 190, 50, 151, 215, 61, 124, 252, 157, 61, 83, 53, 186, 60, 42, 24, 209, 188, 166, 176, 123, 61, 129, 90, 78, 61, 159, 192, 16, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 148, 134, 61, 240, 87, 82, 189, 183, 63, 213, 59, 74, 253, 190, 61, 170, 161, 253, 60, 192, 71, 131, 62, 70, 83, 172, 60, 241, 240, 3, 61, 147, 195, 86, 189, 197, 105, 105, 62, 89, 151, 131, 60, 100, 100, 185, 190, 115, 235, 82, 62, 203, 209, 139, 190, 193, 194, 23, 190, 153, 19, 100, 190, 171, 63, 185, 61, 105, 51, 25, 190, 53, 114, 208, 190, 53, 199, 195, 62, 156, 77, 129, 62, 6, 63, 172, 189, 85, 171, 218, 189, 85, 252, 73, 62, 167, 48, 2, 190, 20, 133, 161, 190, 66, 139, 129, 190, 105, 194, 54, 62, 164, 120, 124, 62, 213, 171, 41, 190, 250, 219, 63, 189, 237, 44, 64, 190, 132, 31, 27, 189, 139, 99, 34, 62, 40, 25, 211, 190, 149, 32, 49, 190, 90, 82, 126, 190, 181, 72, 20, 190, 199, 68, 100, 190, 179, 1, 150, 60, 195, 206, 8, 190, 125, 71, 24, 189, 127, 136, 56, 62, 28, 90, 170, 60, 68, 188, 11, 62, 32, 201, 164, 189, 55, 94, 137, 61, 29, 40, 16, 190, 0, 195, 48, 190, 243, 97, 163, 189, 81, 168, 133, 190, 126, 159, 42, 190, 160, 97, 226, 61, 144, 129, 245, 189, 234, 63, 69, 189, 183, 56, 170, 61, 84, 95, 10, 62, 22, 254, 30, 62, 238, 207, 232, 186, 245, 206, 125, 61, 113, 141, 218, 61, 127, 13, 218, 61, 154, 219, 185, 188, 196, 198, 60, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {205, 124, 1, 190, 189, 52, 86, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {125, 121, 139, 63, 93, 92, 226, 63, 108, 228, 84, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {209, 42, 16, 192, 131, 138, 79, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0004/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}