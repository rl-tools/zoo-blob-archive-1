// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 90, 38, 63, 70, 105, 21, 62, 33, 101, 172, 190, 211, 157, 255, 189, 154, 173, 127, 191, 62, 70, 155, 189, 15, 116, 166, 62, 191, 180, 120, 63, 62, 226, 18, 62, 220, 52, 237, 190, 205, 249, 78, 190, 195, 120, 5, 63, 242, 234, 38, 191, 9, 0, 152, 62, 22, 121, 33, 191, 196, 53, 232, 61, 250, 160, 166, 63, 193, 234, 9, 62, 223, 132, 251, 62, 183, 54, 214, 190, 191, 114, 120, 190, 214, 210, 11, 63, 211, 149, 17, 63, 234, 95, 178, 62, 104, 148, 250, 59, 131, 102, 130, 63, 197, 15, 42, 62, 207, 144, 66, 63, 107, 10, 41, 63, 147, 61, 148, 62, 118, 243, 32, 63, 134, 224, 203, 62, 39, 1, 162, 62, 46, 59, 22, 190, 87, 2, 60, 191, 177, 36, 117, 190, 109, 223, 105, 191, 239, 214, 68, 61, 162, 39, 133, 190, 111, 242, 43, 62, 48, 42, 80, 63, 237, 195, 175, 62, 238, 93, 111, 190, 139, 183, 219, 190, 46, 128, 103, 62, 0, 11, 147, 62, 216, 214, 42, 63, 68, 228, 198, 61, 196, 117, 125, 190, 15, 175, 129, 189, 158, 251, 103, 189, 203, 142, 175, 190, 165, 235, 137, 63, 89, 102, 85, 62, 82, 32, 26, 190, 58, 237, 70, 63, 50, 81, 175, 190, 127, 253, 185, 61, 185, 71, 204, 63, 82, 144, 76, 60, 165, 169, 251, 62, 46, 5, 75, 191, 197, 203, 100, 61, 66, 122, 28, 190, 249, 206, 169, 63, 1, 42, 103, 62, 222, 20, 176, 189, 165, 127, 28, 191, 12, 204, 130, 62, 2, 95, 130, 190, 243, 2, 224, 62, 198, 98, 133, 190, 106, 177, 56, 191, 221, 140, 150, 191, 85, 220, 199, 190, 63, 161, 128, 62, 101, 123, 223, 62, 90, 31, 140, 62, 111, 79, 221, 62, 161, 119, 168, 191, 232, 1, 115, 190, 165, 67, 151, 62, 98, 56, 81, 63, 242, 97, 200, 61, 24, 88, 71, 187, 252, 17, 107, 191, 131, 63, 8, 190, 80, 215, 114, 191, 96, 52, 33, 63, 70, 204, 195, 60, 79, 162, 10, 191, 27, 150, 177, 191, 89, 0, 131, 190, 198, 248, 139, 190, 144, 22, 212, 62, 101, 146, 237, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 245, 144, 191, 128, 200, 176, 62, 237, 14, 249, 187, 182, 42, 8, 191, 167, 135, 19, 62, 241, 196, 202, 190, 250, 76, 198, 190, 133, 191, 129, 191, 252, 50, 202, 190, 38, 125, 41, 191, 70, 132, 6, 191, 156, 229, 140, 61, 195, 182, 5, 61, 118, 229, 168, 190, 185, 94, 44, 190, 80, 76, 17, 62, 117, 133, 255, 62, 136, 234, 2, 190, 156, 243, 36, 62, 16, 208, 218, 188, 99, 177, 204, 189, 191, 82, 187, 190, 29, 143, 19, 63, 196, 99, 174, 62, 232, 223, 137, 61, 147, 76, 195, 189, 133, 170, 100, 62, 240, 11, 33, 61, 21, 15, 183, 62, 117, 7, 204, 62, 99, 158, 8, 190, 219, 248, 231, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {85, 203, 170, 62, 66, 41, 157, 189, 212, 62, 221, 190, 68, 128, 179, 61, 217, 238, 148, 189, 133, 253, 217, 190, 101, 16, 137, 62, 156, 153, 16, 191, 99, 236, 88, 62, 173, 52, 165, 190, 247, 219, 99, 190, 198, 172, 93, 62, 102, 24, 234, 188, 251, 175, 74, 189, 44, 19, 72, 61, 235, 102, 158, 61, 134, 194, 14, 190, 62, 19, 10, 62, 217, 103, 143, 62, 175, 88, 19, 189, 165, 35, 195, 189, 145, 138, 130, 62, 36, 98, 251, 61, 193, 198, 166, 61, 236, 129, 185, 60, 66, 22, 60, 61, 33, 50, 25, 60, 212, 240, 19, 190, 103, 21, 170, 189, 255, 204, 129, 190, 197, 52, 5, 191, 48, 165, 33, 188, 9, 173, 33, 62, 183, 34, 47, 190, 159, 167, 1, 190, 227, 224, 65, 59, 204, 13, 5, 190, 229, 33, 152, 61, 167, 235, 171, 61, 202, 89, 34, 190, 65, 212, 97, 61, 116, 213, 207, 188, 7, 173, 98, 188, 205, 46, 225, 61, 172, 133, 81, 189, 116, 141, 236, 61, 84, 243, 169, 189, 13, 56, 126, 61, 247, 133, 22, 62, 15, 206, 161, 189, 234, 75, 179, 61, 28, 177, 172, 189, 241, 211, 36, 190, 221, 88, 101, 61, 91, 15, 175, 189, 180, 106, 25, 190, 94, 196, 19, 189, 228, 51, 129, 60, 140, 144, 180, 189, 217, 179, 141, 189, 61, 21, 80, 189, 37, 128, 44, 60, 125, 78, 52, 190, 203, 58, 21, 190, 246, 135, 89, 62, 230, 234, 195, 190, 67, 60, 11, 190, 32, 93, 10, 189, 173, 169, 180, 190, 71, 223, 229, 190, 213, 193, 170, 190, 146, 162, 32, 61, 188, 24, 55, 62, 156, 159, 60, 188, 210, 247, 205, 62, 240, 112, 36, 191, 15, 222, 148, 190, 124, 76, 244, 189, 151, 241, 67, 190, 108, 231, 240, 62, 46, 42, 53, 62, 221, 217, 139, 61, 158, 200, 245, 61, 117, 94, 124, 186, 234, 216, 238, 189, 189, 70, 206, 190, 92, 103, 172, 62, 87, 17, 12, 62, 255, 227, 10, 191, 210, 7, 62, 62, 189, 205, 113, 62, 77, 108, 228, 61, 240, 250, 114, 61, 139, 50, 55, 190, 177, 51, 161, 191, 104, 173, 154, 61, 173, 49, 72, 62, 48, 244, 81, 189, 114, 169, 241, 189, 132, 139, 144, 188, 8, 57, 80, 61, 154, 193, 140, 61, 21, 243, 132, 189, 111, 195, 33, 62, 72, 231, 24, 190, 132, 106, 195, 189, 96, 212, 227, 60, 47, 137, 182, 61, 113, 160, 53, 189, 168, 54, 219, 189, 131, 22, 59, 190, 13, 245, 174, 190, 217, 212, 11, 187, 244, 42, 32, 190, 143, 19, 2, 62, 233, 8, 179, 61, 72, 25, 83, 190, 237, 229, 103, 190, 89, 158, 7, 191, 245, 13, 127, 190, 56, 211, 44, 62, 44, 237, 69, 61, 196, 86, 222, 188, 239, 237, 21, 190, 221, 61, 168, 189, 159, 158, 55, 190, 134, 102, 9, 190, 180, 221, 244, 189, 15, 14, 99, 190, 174, 57, 20, 190, 188, 90, 22, 188, 199, 161, 170, 61, 78, 123, 10, 191, 107, 32, 50, 189, 165, 220, 43, 191, 168, 13, 54, 190, 241, 47, 106, 62, 108, 0, 43, 60, 103, 70, 140, 62, 3, 30, 202, 61, 235, 63, 243, 190, 85, 110, 219, 60, 241, 193, 5, 190, 77, 243, 143, 62, 55, 128, 3, 62, 198, 93, 193, 188, 70, 1, 139, 62, 52, 219, 216, 62, 195, 70, 131, 190, 235, 240, 154, 62, 78, 54, 108, 62, 243, 72, 72, 190, 242, 187, 119, 190, 91, 11, 70, 62, 69, 164, 194, 61, 64, 87, 251, 189, 234, 160, 32, 61, 39, 95, 8, 190, 231, 204, 23, 190, 74, 251, 13, 190, 38, 126, 241, 61, 212, 72, 128, 62, 119, 34, 211, 190, 81, 52, 175, 189, 232, 130, 117, 189, 80, 36, 13, 189, 0, 142, 230, 60, 161, 124, 119, 191, 173, 189, 155, 62, 54, 31, 87, 191, 50, 111, 170, 190, 152, 130, 137, 62, 230, 158, 91, 190, 20, 162, 213, 189, 189, 198, 47, 61, 253, 233, 61, 60, 161, 45, 169, 62, 150, 139, 34, 62, 20, 87, 113, 62, 114, 67, 166, 62, 41, 227, 53, 62, 94, 113, 144, 62, 119, 175, 156, 62, 81, 222, 97, 62, 28, 56, 150, 61, 143, 143, 60, 59, 223, 228, 138, 61, 68, 39, 22, 59, 89, 208, 140, 62, 35, 173, 134, 62, 234, 218, 26, 62, 33, 9, 146, 61, 116, 101, 140, 62, 3, 123, 32, 62, 223, 102, 158, 190, 22, 229, 183, 188, 97, 216, 244, 61, 48, 44, 145, 188, 123, 67, 103, 189, 59, 73, 168, 190, 148, 164, 148, 61, 223, 42, 145, 190, 11, 152, 233, 61, 132, 209, 53, 62, 180, 55, 88, 190, 61, 214, 214, 189, 169, 211, 68, 188, 78, 174, 250, 61, 224, 38, 47, 62, 129, 113, 244, 59, 138, 20, 229, 61, 156, 151, 43, 57, 237, 198, 246, 61, 213, 188, 6, 60, 205, 33, 13, 62, 16, 152, 222, 61, 242, 124, 139, 60, 168, 254, 254, 189, 93, 235, 51, 61, 224, 227, 125, 61, 172, 246, 131, 62, 128, 46, 60, 190, 80, 136, 251, 61, 192, 1, 56, 61, 178, 246, 0, 62, 37, 199, 40, 191, 73, 85, 167, 190, 73, 177, 80, 59, 222, 148, 165, 190, 187, 84, 1, 192, 8, 81, 215, 61, 187, 62, 244, 61, 31, 179, 173, 190, 93, 24, 187, 189, 238, 89, 43, 61, 25, 137, 134, 62, 1, 203, 20, 191, 148, 147, 51, 191, 188, 111, 222, 189, 192, 69, 41, 62, 166, 6, 23, 62, 107, 217, 34, 188, 200, 215, 179, 62, 54, 206, 223, 62, 113, 74, 20, 62, 199, 58, 13, 63, 164, 161, 209, 189, 248, 114, 72, 62, 80, 74, 71, 191, 160, 68, 76, 190, 234, 6, 149, 61, 80, 3, 77, 190, 4, 52, 178, 60, 247, 173, 61, 62, 214, 165, 18, 191, 69, 150, 65, 61, 79, 54, 57, 190, 193, 155, 227, 61, 76, 204, 5, 61, 135, 8, 112, 189, 177, 252, 106, 61, 99, 110, 34, 62, 175, 148, 37, 190, 95, 66, 27, 62, 248, 173, 3, 190, 38, 62, 148, 189, 58, 247, 134, 60, 185, 177, 54, 61, 95, 169, 88, 189, 213, 45, 24, 190, 162, 141, 236, 61, 21, 69, 201, 188, 206, 86, 103, 188, 33, 73, 36, 190, 140, 6, 43, 187, 19, 62, 30, 61, 109, 145, 212, 61, 201, 12, 23, 190, 175, 217, 241, 189, 185, 95, 142, 189, 62, 22, 131, 61, 89, 17, 44, 61, 175, 168, 59, 189, 120, 9, 178, 189, 73, 10, 159, 189, 84, 45, 219, 189, 126, 213, 54, 188, 47, 223, 210, 189, 23, 163, 130, 62, 202, 140, 70, 58, 26, 1, 170, 190, 113, 225, 73, 61, 135, 133, 174, 190, 245, 7, 165, 189, 122, 65, 244, 61, 202, 75, 120, 191, 245, 142, 218, 62, 84, 218, 114, 191, 174, 189, 234, 190, 83, 50, 179, 188, 96, 254, 215, 190, 170, 177, 153, 190, 204, 244, 149, 61, 244, 200, 101, 61, 93, 28, 5, 62, 66, 206, 51, 62, 225, 129, 159, 62, 73, 254, 160, 62, 57, 156, 142, 62, 7, 96, 8, 63, 246, 157, 101, 62, 180, 213, 82, 189, 243, 88, 193, 190, 72, 253, 51, 61, 254, 190, 189, 62, 23, 12, 43, 189, 53, 170, 130, 62, 134, 228, 169, 189, 217, 74, 54, 61, 172, 60, 177, 60, 121, 247, 8, 190, 175, 181, 29, 190, 75, 20, 143, 189, 10, 71, 167, 189, 5, 20, 79, 61, 50, 90, 198, 189, 192, 66, 178, 189, 244, 244, 18, 190, 101, 62, 218, 189, 21, 180, 20, 188, 230, 243, 81, 190, 177, 148, 189, 60, 27, 78, 166, 57, 222, 243, 71, 190, 50, 23, 65, 61, 158, 170, 23, 62, 6, 170, 17, 190, 111, 203, 236, 188, 96, 26, 196, 188, 139, 102, 0, 62, 36, 233, 34, 190, 55, 203, 76, 61, 99, 23, 4, 62, 158, 154, 117, 190, 143, 239, 209, 189, 236, 246, 25, 188, 235, 230, 147, 60, 107, 7, 80, 61, 200, 61, 77, 190, 183, 161, 212, 61, 125, 14, 90, 60, 43, 93, 113, 187, 190, 254, 5, 191, 211, 111, 222, 61, 119, 68, 193, 62, 224, 79, 199, 190, 224, 181, 81, 62, 120, 204, 42, 61, 65, 7, 30, 190, 205, 163, 104, 191, 206, 6, 86, 191, 84, 199, 189, 62, 191, 54, 125, 62, 218, 141, 200, 190, 43, 102, 119, 62, 19, 128, 206, 62, 18, 246, 62, 190, 134, 78, 189, 62, 138, 193, 235, 60, 88, 74, 144, 190, 202, 237, 27, 190, 165, 110, 45, 61, 27, 137, 140, 190, 39, 123, 23, 191, 130, 228, 132, 61, 35, 120, 167, 60, 239, 4, 110, 62, 154, 46, 45, 61, 155, 224, 86, 190, 210, 130, 15, 62, 147, 25, 245, 189, 74, 246, 0, 189, 156, 97, 60, 62, 190, 142, 83, 190, 204, 79, 27, 63, 51, 255, 13, 61, 76, 195, 49, 191, 204, 244, 218, 61, 103, 215, 222, 189, 165, 60, 4, 191, 77, 229, 228, 62, 165, 30, 150, 191, 117, 64, 95, 62, 122, 113, 150, 191, 99, 32, 9, 191, 100, 59, 214, 60, 7, 117, 163, 190, 49, 34, 175, 190, 86, 159, 186, 61, 247, 32, 212, 190, 69, 230, 214, 60, 226, 76, 160, 62, 21, 198, 156, 62, 196, 197, 27, 62, 117, 228, 29, 63, 8, 27, 49, 63, 62, 103, 179, 62, 39, 221, 7, 190, 24, 184, 69, 190, 110, 146, 2, 61, 160, 23, 149, 62, 159, 217, 38, 191, 213, 140, 99, 61, 81, 75, 147, 188, 232, 44, 144, 190, 201, 241, 90, 62, 243, 52, 13, 191, 150, 121, 61, 61, 236, 133, 48, 62, 205, 48, 138, 190, 59, 60, 146, 62, 222, 128, 226, 61, 45, 159, 149, 190, 251, 247, 64, 191, 89, 22, 129, 191, 160, 184, 151, 62, 170, 22, 169, 62, 0, 220, 229, 190, 68, 11, 171, 62, 18, 48, 154, 62, 129, 183, 179, 190, 16, 160, 161, 62, 231, 132, 242, 61, 3, 252, 42, 190, 157, 237, 130, 190, 144, 126, 74, 62, 110, 6, 205, 190, 148, 90, 16, 191, 15, 161, 101, 61, 88, 7, 0, 62, 74, 114, 90, 60, 124, 145, 83, 62, 159, 40, 109, 189, 202, 58, 139, 62, 252, 83, 55, 62, 144, 94, 21, 61, 252, 82, 61, 62, 65, 133, 141, 190, 79, 237, 91, 190, 59, 76, 173, 61, 64, 66, 75, 190, 128, 204, 92, 191, 81, 62, 152, 189, 8, 23, 63, 62, 230, 16, 64, 61, 10, 63, 49, 190, 111, 147, 32, 191, 226, 196, 46, 190, 186, 170, 193, 190, 113, 17, 61, 191, 32, 211, 218, 61, 216, 3, 2, 191, 31, 37, 173, 60, 234, 104, 145, 62, 162, 204, 213, 60, 228, 137, 8, 62, 103, 246, 23, 190, 7, 84, 22, 190, 76, 67, 194, 189, 16, 243, 52, 63, 18, 161, 79, 62, 232, 221, 144, 61, 63, 195, 139, 190, 81, 158, 139, 191, 167, 228, 53, 190, 119, 157, 207, 190, 64, 19, 22, 189, 137, 145, 184, 62, 251, 214, 38, 59, 218, 56, 37, 191, 111, 199, 69, 190, 84, 231, 0, 190, 31, 82, 135, 62, 34, 201, 48, 189, 207, 26, 183, 61, 235, 252, 95, 62, 87, 191, 219, 190, 205, 235, 9, 191, 236, 111, 27, 191, 95, 181, 15, 189, 1, 67, 198, 62, 210, 169, 6, 191, 68, 90, 238, 61, 178, 190, 191, 61, 204, 25, 149, 190, 76, 183, 117, 62, 0, 103, 152, 62, 240, 225, 150, 190, 149, 216, 115, 189, 179, 168, 194, 61, 72, 223, 209, 189, 52, 75, 2, 191, 184, 233, 38, 62, 191, 23, 142, 62, 36, 150, 35, 189, 141, 160, 85, 61, 49, 106, 105, 190, 251, 238, 120, 62, 102, 71, 195, 189, 142, 10, 106, 61, 70, 34, 181, 190, 65, 237, 121, 189, 10, 27, 92, 61, 164, 107, 119, 62, 11, 56, 200, 190, 231, 240, 153, 61, 191, 11, 228, 189, 45, 32, 198, 189, 198, 254, 243, 60, 16, 148, 71, 191, 128, 103, 161, 62, 141, 241, 14, 191, 96, 228, 157, 60, 63, 128, 169, 188, 105, 205, 207, 189, 231, 200, 102, 189, 155, 2, 152, 189, 51, 55, 195, 61, 190, 119, 158, 62, 120, 79, 20, 62, 237, 244, 26, 189, 109, 163, 195, 61, 111, 224, 72, 62, 21, 253, 22, 62, 34, 168, 40, 62, 200, 201, 126, 62, 117, 151, 34, 62, 21, 39, 179, 61, 220, 81, 26, 62, 198, 235, 26, 190, 188, 33, 215, 61, 58, 176, 133, 60, 69, 155, 154, 189, 241, 140, 73, 61, 71, 80, 23, 63, 36, 142, 152, 189, 136, 214, 119, 188, 235, 211, 7, 63, 193, 26, 24, 190, 57, 62, 10, 190, 102, 245, 171, 62, 124, 212, 195, 189, 221, 28, 185, 61, 103, 84, 201, 62, 202, 208, 139, 189, 171, 104, 72, 62, 255, 193, 50, 190, 216, 237, 67, 62, 236, 28, 212, 62, 222, 193, 13, 190, 125, 182, 35, 189, 74, 30, 192, 61, 56, 226, 193, 188, 154, 141, 210, 190, 20, 127, 161, 62, 53, 19, 244, 61, 86, 254, 251, 61, 192, 242, 174, 190, 244, 190, 193, 190, 28, 109, 58, 62, 38, 164, 148, 62, 152, 39, 128, 61, 47, 190, 43, 62, 148, 69, 159, 190, 240, 72, 114, 190, 211, 218, 220, 62, 78, 235, 169, 190, 122, 67, 21, 62, 178, 19, 67, 62, 225, 240, 215, 190, 150, 81, 63, 62, 159, 9, 40, 63, 128, 131, 170, 190, 134, 103, 209, 189, 15, 5, 165, 191, 0, 155, 182, 190, 4, 166, 134, 189, 54, 117, 91, 190, 141, 248, 127, 62, 170, 237, 72, 61, 27, 112, 191, 190, 31, 123, 131, 189, 161, 83, 171, 62, 215, 97, 203, 188, 220, 238, 58, 187, 57, 102, 42, 62, 162, 115, 142, 191, 112, 94, 77, 190, 116, 55, 231, 189, 168, 15, 99, 62, 20, 78, 36, 62, 34, 129, 231, 190, 127, 71, 88, 190, 8, 114, 187, 188, 215, 189, 3, 62, 59, 15, 235, 60, 221, 33, 57, 62, 28, 216, 14, 190, 145, 244, 176, 190, 194, 79, 72, 60, 223, 119, 183, 190, 162, 199, 94, 61, 101, 17, 106, 191, 243, 125, 66, 62, 162, 21, 72, 190, 118, 144, 152, 191, 120, 23, 138, 61, 255, 210, 51, 191, 132, 166, 151, 190, 88, 52, 59, 191, 17, 120, 171, 191, 164, 183, 31, 190, 80, 138, 10, 189, 56, 22, 24, 62, 197, 169, 34, 62, 129, 67, 9, 189, 7, 188, 165, 62, 114, 76, 239, 62, 55, 96, 25, 189, 112, 156, 134, 62, 162, 142, 120, 62, 168, 209, 22, 190, 138, 199, 70, 191, 86, 225, 252, 61, 96, 2, 13, 62, 22, 130, 116, 61, 61, 35, 4, 61, 208, 54, 130, 62, 184, 95, 66, 191, 24, 219, 144, 190, 106, 25, 111, 62, 81, 159, 207, 187, 240, 253, 141, 190, 140, 88, 133, 189, 52, 139, 92, 190, 54, 6, 139, 190, 98, 176, 94, 62, 177, 141, 59, 191, 131, 81, 200, 62, 94, 31, 185, 190, 125, 40, 146, 190, 110, 20, 144, 190, 218, 67, 230, 190, 10, 95, 31, 190, 8, 165, 39, 187, 75, 34, 98, 189, 0, 214, 100, 62, 10, 200, 172, 62, 206, 136, 64, 62, 80, 188, 156, 62, 183, 36, 53, 62, 228, 224, 196, 62, 102, 5, 76, 62, 195, 252, 3, 62, 48, 4, 49, 191, 62, 48, 71, 62, 15, 145, 168, 62, 131, 200, 47, 188, 132, 28, 135, 61, 101, 121, 157, 189, 24, 200, 133, 191, 176, 220, 123, 61, 181, 74, 45, 190, 239, 119, 244, 189, 73, 244, 128, 62, 99, 79, 200, 190, 245, 65, 144, 61, 160, 54, 193, 188, 226, 247, 231, 189, 12, 138, 69, 191, 132, 95, 101, 191, 22, 139, 189, 62, 194, 63, 111, 62, 240, 150, 241, 190, 184, 220, 179, 60, 230, 12, 60, 62, 173, 123, 42, 61, 250, 139, 160, 62, 218, 95, 95, 62, 119, 130, 54, 190, 252, 189, 117, 60, 245, 171, 210, 61, 133, 136, 219, 189, 58, 190, 160, 190, 32, 172, 175, 61, 178, 243, 178, 189, 52, 23, 154, 60, 134, 86, 80, 62, 191, 252, 123, 190, 2, 149, 32, 62, 152, 222, 28, 187, 79, 159, 216, 61, 175, 87, 159, 190, 117, 213, 252, 61, 49, 76, 238, 62, 127, 120, 147, 190, 12, 156, 6, 188, 161, 158, 118, 62, 142, 198, 120, 190, 14, 145, 232, 189, 20, 169, 17, 63, 6, 73, 141, 189, 209, 69, 243, 61, 232, 10, 130, 62, 60, 70, 80, 188, 56, 62, 112, 62, 39, 246, 157, 190, 16, 217, 209, 188, 160, 247, 201, 62, 35, 9, 23, 190, 56, 223, 219, 61, 164, 95, 250, 61, 107, 139, 30, 62, 132, 21, 102, 190, 14, 148, 24, 63, 73, 160, 140, 188, 247, 219, 117, 62, 159, 202, 54, 190, 253, 173, 109, 190, 87, 199, 114, 62, 24, 98, 182, 61, 55, 178, 37, 190, 96, 239, 241, 61, 184, 9, 222, 189, 40, 46, 25, 190, 63, 148, 127, 62, 144, 85, 46, 190, 164, 149, 217, 190, 20, 158, 149, 62, 89, 255, 108, 62, 37, 192, 250, 60, 31, 2, 4, 62, 14, 157, 132, 190, 159, 184, 217, 62, 237, 252, 98, 190, 126, 116, 12, 63, 215, 42, 243, 62, 95, 117, 186, 61, 234, 177, 158, 61, 11, 141, 58, 62, 207, 39, 42, 190, 39, 95, 111, 62, 215, 213, 208, 190, 99, 219, 156, 189, 143, 115, 50, 188, 190, 55, 29, 187, 69, 239, 167, 190, 221, 5, 198, 190, 136, 66, 139, 190, 136, 135, 29, 190, 147, 126, 13, 62, 125, 206, 232, 61, 1, 252, 42, 191, 115, 225, 131, 61, 165, 170, 124, 191, 132, 107, 63, 191, 62, 152, 148, 62, 241, 75, 174, 189, 249, 88, 30, 62, 116, 124, 72, 61, 41, 105, 151, 62, 62, 217, 152, 61, 7, 166, 71, 61, 198, 247, 190, 190, 183, 172, 35, 63, 110, 56, 8, 61, 42, 156, 10, 191, 114, 218, 201, 190, 237, 217, 217, 190, 182, 209, 200, 61, 87, 61, 161, 61, 105, 4, 19, 191, 70, 255, 150, 190, 219, 3, 39, 190, 121, 242, 134, 62, 202, 120, 117, 62, 41, 23, 14, 190, 167, 66, 155, 191, 62, 137, 1, 62, 158, 243, 150, 62, 114, 59, 5, 190, 136, 130, 168, 189, 106, 30, 171, 61, 40, 157, 255, 189, 235, 63, 184, 62, 49, 11, 161, 61, 97, 160, 182, 62, 104, 147, 137, 61, 216, 48, 129, 61, 236, 234, 170, 59, 234, 51, 56, 191, 211, 49, 235, 61, 111, 100, 85, 62, 81, 139, 33, 190, 100, 123, 190, 62, 238, 188, 194, 62, 81, 214, 138, 190, 218, 61, 20, 191, 28, 80, 195, 191, 50, 43, 140, 62, 216, 24, 0, 63, 153, 115, 236, 190, 176, 133, 206, 62, 202, 24, 112, 62, 150, 11, 113, 189, 245, 110, 173, 62, 211, 235, 78, 62, 148, 206, 120, 190, 224, 249, 146, 190, 179, 40, 159, 61, 251, 132, 36, 190, 237, 61, 58, 191, 83, 234, 255, 189, 202, 84, 195, 60, 187, 134, 55, 62, 181, 161, 31, 190, 240, 19, 106, 190, 61, 176, 135, 62, 209, 45, 172, 189, 101, 27, 161, 59, 228, 16, 40, 62, 18, 45, 160, 190, 184, 173, 84, 61, 127, 156, 91, 191, 248, 234, 131, 62, 79, 122, 92, 191, 229, 2, 110, 190, 119, 4, 242, 62, 236, 11, 35, 190, 62, 168, 50, 188, 179, 245, 150, 190, 218, 76, 223, 188, 168, 58, 9, 62, 156, 21, 125, 190, 251, 236, 28, 190, 172, 155, 123, 189, 175, 245, 51, 189, 12, 114, 28, 62, 53, 38, 104, 60, 28, 91, 132, 190, 9, 193, 232, 62, 242, 152, 192, 62, 158, 14, 219, 190, 71, 185, 193, 190, 158, 182, 7, 191, 86, 184, 76, 62, 87, 187, 210, 189, 138, 25, 18, 188, 120, 98, 49, 191, 190, 207, 49, 61, 62, 189, 17, 191, 13, 242, 64, 62, 27, 246, 188, 189, 44, 64, 146, 62, 206, 223, 13, 63, 217, 2, 72, 190, 37, 86, 170, 189, 82, 198, 25, 62, 152, 56, 23, 61, 220, 120, 13, 191, 39, 180, 166, 62, 180, 32, 156, 191, 95, 187, 50, 62, 111, 157, 38, 191, 157, 26, 87, 190, 146, 226, 38, 62, 5, 122, 124, 190, 58, 4, 192, 190, 189, 156, 62, 62, 94, 155, 49, 62, 130, 220, 89, 60, 13, 80, 50, 62, 31, 26, 179, 62, 42, 144, 110, 62, 65, 236, 106, 60, 75, 86, 147, 62, 156, 123, 36, 62, 250, 49, 214, 189, 163, 109, 154, 190, 184, 225, 12, 62, 150, 137, 114, 62, 209, 247, 131, 190, 166, 0, 237, 61, 130, 71, 46, 189, 15, 87, 240, 190, 90, 233, 170, 62, 52, 243, 164, 61, 74, 126, 146, 61, 121, 86, 239, 190, 64, 199, 197, 61, 38, 235, 2, 189, 86, 121, 90, 61, 65, 191, 35, 62, 92, 63, 220, 190, 234, 153, 188, 62, 185, 196, 88, 191, 129, 53, 192, 190, 76, 210, 96, 61, 8, 83, 75, 190, 89, 30, 160, 190, 211, 116, 151, 188, 37, 235, 194, 190, 97, 191, 181, 61, 35, 123, 124, 62, 123, 189, 140, 62, 136, 124, 192, 62, 169, 218, 36, 62, 253, 180, 54, 62, 85, 132, 162, 62, 161, 75, 149, 189, 130, 68, 220, 189, 178, 183, 6, 60, 12, 2, 116, 61, 79, 152, 230, 190, 129, 34, 81, 62, 230, 141, 190, 62, 137, 144, 240, 61, 232, 185, 111, 62, 77, 212, 43, 191, 12, 248, 214, 62, 181, 127, 184, 62, 253, 139, 173, 190, 2, 14, 165, 62, 20, 233, 211, 62, 210, 78, 244, 190, 243, 9, 16, 191, 125, 192, 36, 191, 128, 38, 21, 62, 102, 72, 99, 62, 192, 52, 135, 190, 136, 94, 102, 62, 26, 95, 176, 61, 169, 107, 240, 190, 126, 216, 167, 62, 218, 237, 144, 188, 80, 237, 153, 190, 43, 44, 146, 190, 150, 221, 56, 189, 245, 145, 162, 189, 67, 184, 234, 190, 7, 229, 221, 61, 8, 124, 57, 62, 23, 195, 95, 62, 218, 227, 173, 189, 57, 58, 200, 190, 24, 195, 115, 62, 224, 7, 253, 189, 83, 128, 128, 189, 113, 108, 95, 62, 37, 112, 23, 190, 131, 208, 181, 190, 240, 23, 115, 62, 122, 201, 255, 188, 78, 24, 16, 191, 148, 186, 106, 189, 28, 161, 254, 190, 107, 155, 38, 189, 229, 181, 223, 190, 37, 85, 121, 190, 145, 235, 140, 190, 55, 206, 85, 190, 160, 84, 151, 191, 83, 188, 29, 62, 100, 185, 200, 61, 243, 190, 60, 62, 202, 183, 83, 190, 197, 167, 171, 62, 24, 73, 207, 62, 42, 21, 204, 190, 66, 97, 35, 189, 28, 206, 144, 190, 61, 8, 151, 62, 17, 213, 150, 61, 71, 145, 94, 62, 203, 179, 1, 190, 9, 83, 205, 190, 45, 190, 17, 191, 248, 119, 154, 190, 30, 251, 192, 189, 163, 82, 18, 63, 244, 28, 9, 60, 74, 85, 38, 191, 80, 67, 7, 191, 214, 245, 172, 62, 19, 22, 160, 62, 226, 140, 229, 190, 25, 64, 184, 62, 7, 132, 178, 62, 212, 4, 162, 190, 96, 146, 201, 189, 34, 126, 181, 190, 191, 176, 87, 61, 124, 34, 101, 62, 183, 245, 7, 191, 205, 189, 44, 62, 29, 115, 195, 188, 219, 203, 246, 190, 71, 137, 156, 62, 152, 17, 2, 62, 5, 248, 176, 190, 177, 79, 149, 190, 140, 230, 81, 189, 112, 152, 30, 62, 18, 166, 204, 190, 44, 234, 202, 188, 236, 217, 114, 61, 94, 0, 180, 61, 230, 78, 11, 190, 138, 226, 67, 190, 233, 110, 44, 62, 88, 216, 142, 62, 64, 214, 5, 190, 100, 62, 38, 62, 181, 198, 175, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 184, 50, 62, 231, 166, 42, 189, 11, 119, 169, 62, 183, 67, 80, 190, 190, 174, 197, 61, 75, 143, 22, 62, 190, 117, 75, 62, 87, 32, 67, 62, 184, 19, 25, 190, 176, 59, 111, 62, 16, 86, 216, 189, 70, 6, 105, 62, 185, 254, 133, 189, 189, 5, 135, 61, 100, 153, 24, 62, 120, 232, 20, 188, 87, 73, 50, 62, 198, 116, 238, 189, 198, 81, 32, 62, 43, 127, 139, 62, 170, 158, 105, 189, 56, 189, 94, 61, 198, 227, 69, 190, 162, 188, 213, 190, 225, 86, 128, 59, 159, 242, 47, 62, 80, 154, 208, 61, 178, 254, 194, 61, 243, 12, 88, 61, 70, 190, 206, 61, 201, 42, 129, 62, 99, 168, 172, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 38, 4, 62, 240, 87, 82, 189, 141, 76, 120, 187, 173, 48, 35, 62, 246, 17, 154, 61, 203, 192, 187, 62, 88, 34, 130, 60, 32, 251, 48, 63, 181, 242, 84, 189, 46, 84, 11, 63, 76, 236, 131, 60, 54, 89, 26, 191, 18, 52, 179, 63, 205, 141, 227, 190, 38, 120, 79, 191, 112, 77, 142, 190, 172, 252, 152, 61, 144, 136, 9, 191, 75, 158, 35, 191, 187, 219, 70, 63, 83, 47, 6, 63, 224, 85, 134, 190, 216, 146, 204, 190, 145, 100, 156, 63, 96, 14, 225, 190, 196, 3, 36, 191, 182, 203, 59, 191, 200, 213, 234, 62, 32, 166, 206, 62, 161, 6, 166, 190, 135, 135, 132, 191, 195, 156, 158, 190, 35, 159, 207, 189, 139, 99, 34, 62, 28, 237, 80, 191, 14, 201, 83, 189, 131, 228, 206, 190, 121, 234, 141, 190, 202, 200, 149, 190, 251, 53, 34, 190, 97, 159, 8, 190, 229, 250, 168, 188, 104, 120, 56, 62, 38, 72, 90, 62, 253, 198, 168, 62, 175, 33, 78, 189, 165, 242, 48, 62, 242, 55, 27, 190, 85, 168, 153, 190, 14, 192, 39, 61, 54, 131, 139, 190, 35, 181, 133, 190, 155, 168, 6, 62, 74, 170, 99, 190, 215, 55, 131, 188, 206, 58, 50, 62, 91, 20, 119, 62, 135, 8, 140, 62, 115, 202, 68, 188, 102, 97, 24, 61, 235, 38, 47, 62, 37, 2, 113, 62, 228, 245, 175, 61, 230, 129, 238, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 86, 212, 189, 145, 150, 220, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {155, 33, 86, 190, 251, 46, 41, 63, 238, 76, 62, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {254, 82, 164, 63, 181, 89, 240, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0004/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}