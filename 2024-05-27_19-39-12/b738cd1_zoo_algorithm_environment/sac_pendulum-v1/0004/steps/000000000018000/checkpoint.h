// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 178, 53, 63, 197, 221, 228, 61, 194, 77, 156, 190, 142, 246, 5, 190, 155, 245, 127, 191, 224, 103, 13, 61, 125, 228, 161, 62, 149, 45, 131, 63, 103, 156, 41, 62, 98, 58, 220, 190, 136, 171, 93, 190, 43, 255, 0, 63, 203, 114, 50, 191, 154, 41, 136, 62, 83, 97, 33, 191, 240, 9, 174, 61, 71, 245, 169, 63, 131, 188, 14, 62, 12, 213, 255, 62, 223, 192, 226, 190, 96, 234, 136, 190, 203, 82, 2, 63, 105, 167, 24, 63, 112, 235, 167, 62, 106, 204, 225, 58, 109, 246, 132, 63, 23, 43, 102, 62, 180, 137, 68, 63, 58, 74, 59, 63, 144, 184, 147, 62, 95, 25, 36, 63, 80, 227, 240, 62, 120, 49, 178, 62, 227, 181, 132, 190, 9, 255, 66, 191, 78, 222, 90, 190, 84, 61, 105, 191, 8, 118, 137, 61, 155, 222, 147, 190, 198, 67, 170, 61, 148, 190, 76, 63, 139, 219, 170, 62, 158, 207, 6, 190, 226, 238, 215, 190, 174, 146, 145, 62, 32, 148, 143, 62, 56, 116, 55, 63, 58, 185, 10, 62, 158, 190, 164, 190, 252, 124, 249, 189, 229, 192, 125, 189, 15, 63, 178, 190, 170, 81, 141, 63, 183, 10, 85, 62, 107, 13, 186, 189, 54, 8, 48, 63, 203, 60, 190, 190, 19, 102, 72, 62, 167, 189, 193, 63, 215, 142, 0, 61, 19, 143, 6, 63, 80, 118, 59, 191, 63, 168, 161, 188, 168, 228, 49, 190, 87, 58, 173, 63, 45, 129, 104, 62, 47, 92, 139, 189, 197, 203, 40, 191, 10, 36, 106, 62, 121, 60, 83, 190, 193, 181, 209, 62, 95, 186, 110, 190, 55, 223, 58, 191, 126, 41, 153, 191, 11, 48, 206, 190, 22, 169, 131, 62, 246, 121, 234, 62, 202, 236, 111, 62, 254, 183, 216, 62, 231, 190, 175, 191, 182, 100, 129, 190, 8, 231, 146, 62, 230, 100, 90, 63, 31, 35, 14, 62, 223, 4, 110, 188, 100, 190, 110, 191, 0, 241, 56, 190, 151, 213, 126, 191, 235, 230, 25, 63, 138, 73, 66, 60, 201, 20, 46, 191, 195, 76, 188, 191, 99, 76, 101, 190, 49, 155, 147, 190, 67, 32, 187, 62, 153, 158, 228, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {181, 205, 149, 191, 138, 14, 172, 62, 105, 12, 51, 188, 43, 57, 9, 191, 145, 181, 19, 62, 219, 247, 208, 190, 3, 91, 204, 190, 197, 165, 134, 191, 213, 3, 206, 190, 136, 225, 40, 191, 108, 124, 3, 191, 57, 204, 142, 61, 126, 108, 194, 61, 90, 197, 196, 190, 134, 227, 64, 190, 21, 77, 11, 62, 13, 207, 207, 62, 107, 248, 17, 190, 31, 252, 90, 62, 19, 144, 126, 61, 48, 11, 181, 189, 124, 156, 201, 190, 49, 76, 12, 63, 107, 155, 198, 62, 65, 83, 41, 62, 142, 118, 50, 190, 225, 23, 85, 62, 254, 221, 192, 60, 217, 119, 164, 62, 200, 109, 198, 62, 99, 66, 160, 60, 101, 139, 239, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 173, 163, 62, 239, 48, 10, 189, 253, 221, 230, 190, 209, 108, 4, 62, 174, 249, 232, 189, 219, 133, 9, 191, 6, 137, 166, 62, 181, 41, 253, 190, 13, 22, 140, 62, 11, 23, 193, 190, 251, 31, 112, 190, 123, 108, 39, 62, 50, 202, 157, 189, 128, 244, 223, 59, 49, 216, 246, 61, 50, 211, 150, 61, 92, 141, 35, 190, 31, 195, 50, 62, 108, 116, 129, 62, 121, 25, 158, 189, 122, 183, 166, 189, 233, 220, 154, 62, 222, 204, 4, 62, 116, 47, 139, 61, 143, 183, 134, 188, 66, 33, 207, 60, 29, 218, 39, 61, 30, 110, 32, 190, 246, 213, 141, 189, 250, 78, 151, 190, 178, 107, 27, 191, 122, 202, 102, 189, 9, 173, 33, 62, 183, 34, 47, 190, 159, 167, 1, 190, 227, 224, 65, 59, 204, 13, 5, 190, 229, 33, 152, 61, 167, 235, 171, 61, 202, 89, 34, 190, 65, 212, 97, 61, 116, 213, 207, 188, 7, 173, 98, 188, 205, 46, 225, 61, 172, 133, 81, 189, 116, 141, 236, 61, 84, 243, 169, 189, 13, 56, 126, 61, 247, 133, 22, 62, 15, 206, 161, 189, 234, 75, 179, 61, 28, 177, 172, 189, 241, 211, 36, 190, 221, 88, 101, 61, 91, 15, 175, 189, 180, 106, 25, 190, 94, 196, 19, 189, 228, 51, 129, 60, 140, 144, 180, 189, 217, 179, 141, 189, 61, 21, 80, 189, 37, 128, 44, 60, 125, 78, 52, 190, 203, 58, 21, 190, 187, 133, 6, 62, 91, 172, 245, 190, 65, 88, 181, 189, 121, 132, 215, 189, 170, 52, 246, 190, 61, 10, 21, 191, 56, 15, 250, 190, 244, 124, 91, 60, 9, 11, 146, 61, 164, 216, 185, 61, 116, 48, 229, 62, 227, 114, 50, 191, 150, 141, 183, 190, 244, 188, 67, 190, 107, 111, 146, 190, 1, 188, 3, 63, 142, 161, 37, 62, 85, 62, 228, 188, 39, 91, 101, 61, 25, 183, 35, 60, 208, 51, 212, 189, 147, 67, 1, 191, 117, 82, 167, 62, 235, 239, 162, 61, 203, 14, 26, 191, 197, 41, 84, 62, 6, 193, 113, 62, 10, 193, 35, 62, 16, 67, 8, 61, 59, 82, 138, 190, 80, 200, 178, 191, 137, 210, 241, 188, 173, 49, 72, 62, 48, 244, 81, 189, 114, 169, 241, 189, 132, 139, 144, 188, 8, 57, 80, 61, 154, 193, 140, 61, 21, 243, 132, 189, 111, 195, 33, 62, 72, 231, 24, 190, 132, 106, 195, 189, 96, 212, 227, 60, 47, 137, 182, 61, 113, 160, 53, 189, 168, 54, 219, 189, 131, 22, 59, 190, 13, 245, 174, 190, 217, 212, 11, 187, 244, 42, 32, 190, 143, 19, 2, 62, 233, 8, 179, 61, 72, 25, 83, 190, 237, 229, 103, 190, 89, 158, 7, 191, 245, 13, 127, 190, 56, 211, 44, 62, 44, 237, 69, 61, 196, 86, 222, 188, 239, 237, 21, 190, 221, 61, 168, 189, 159, 158, 55, 190, 134, 102, 9, 190, 180, 221, 244, 189, 83, 146, 129, 190, 30, 193, 9, 190, 53, 68, 136, 59, 154, 238, 149, 61, 231, 137, 21, 191, 212, 182, 71, 190, 93, 158, 57, 191, 152, 222, 42, 190, 149, 101, 249, 61, 104, 111, 65, 61, 127, 28, 168, 62, 74, 129, 238, 59, 243, 212, 227, 190, 122, 91, 88, 188, 113, 106, 8, 190, 108, 138, 156, 62, 175, 225, 253, 61, 31, 111, 225, 189, 166, 59, 151, 62, 149, 100, 208, 62, 207, 145, 113, 190, 94, 230, 81, 62, 66, 146, 124, 62, 164, 28, 58, 190, 232, 98, 167, 190, 87, 89, 69, 62, 40, 222, 224, 61, 88, 153, 209, 189, 128, 230, 21, 61, 74, 211, 87, 190, 241, 237, 84, 190, 239, 154, 75, 190, 187, 123, 224, 61, 162, 11, 143, 62, 102, 74, 219, 190, 203, 140, 153, 189, 169, 195, 124, 189, 178, 242, 56, 189, 117, 135, 228, 61, 131, 214, 109, 191, 200, 213, 177, 62, 39, 89, 99, 191, 31, 21, 180, 190, 167, 50, 133, 62, 253, 184, 95, 190, 12, 193, 151, 189, 137, 239, 168, 61, 54, 36, 139, 59, 254, 138, 163, 62, 195, 253, 50, 62, 202, 239, 115, 62, 23, 88, 154, 62, 227, 107, 49, 62, 13, 207, 161, 62, 135, 76, 145, 62, 32, 219, 118, 62, 129, 118, 175, 61, 161, 64, 2, 189, 138, 139, 175, 61, 93, 144, 11, 188, 200, 127, 147, 62, 157, 249, 130, 62, 42, 104, 15, 62, 130, 31, 118, 61, 65, 146, 155, 62, 245, 46, 245, 61, 150, 115, 136, 190, 152, 184, 54, 189, 58, 215, 213, 61, 70, 112, 227, 189, 177, 74, 246, 188, 54, 73, 144, 190, 68, 109, 116, 61, 229, 252, 19, 190, 26, 15, 94, 62, 105, 170, 60, 62, 65, 146, 118, 190, 213, 180, 223, 189, 205, 173, 86, 189, 95, 182, 32, 62, 157, 179, 19, 62, 123, 45, 93, 189, 183, 118, 196, 61, 239, 200, 241, 60, 72, 37, 16, 62, 102, 51, 161, 188, 183, 151, 10, 62, 70, 158, 183, 61, 246, 25, 85, 60, 119, 218, 126, 189, 49, 129, 117, 61, 76, 35, 212, 61, 86, 103, 131, 62, 115, 213, 143, 190, 41, 74, 222, 61, 178, 5, 21, 61, 174, 246, 135, 61, 96, 95, 22, 191, 65, 129, 169, 190, 184, 195, 15, 60, 121, 246, 194, 190, 159, 208, 18, 192, 134, 218, 98, 62, 187, 62, 244, 61, 190, 212, 188, 190, 42, 233, 19, 190, 175, 35, 86, 188, 116, 79, 93, 62, 16, 37, 45, 191, 247, 129, 53, 191, 9, 47, 214, 189, 22, 144, 46, 62, 218, 27, 28, 62, 20, 26, 179, 188, 156, 76, 176, 62, 224, 255, 190, 62, 106, 134, 35, 62, 230, 243, 6, 63, 210, 83, 224, 189, 141, 49, 96, 62, 21, 35, 81, 191, 139, 3, 133, 190, 66, 105, 234, 61, 18, 71, 75, 190, 214, 102, 128, 61, 56, 7, 1, 62, 56, 237, 31, 191, 34, 208, 251, 188, 79, 54, 57, 190, 193, 155, 227, 61, 76, 204, 5, 61, 135, 8, 112, 189, 177, 252, 106, 61, 99, 110, 34, 62, 175, 148, 37, 190, 95, 66, 27, 62, 248, 173, 3, 190, 38, 62, 148, 189, 58, 247, 134, 60, 185, 177, 54, 61, 95, 169, 88, 189, 213, 45, 24, 190, 162, 141, 236, 61, 21, 69, 201, 188, 206, 86, 103, 188, 33, 73, 36, 190, 140, 6, 43, 187, 19, 62, 30, 61, 109, 145, 212, 61, 201, 12, 23, 190, 175, 217, 241, 189, 185, 95, 142, 189, 62, 22, 131, 61, 89, 17, 44, 61, 175, 168, 59, 189, 120, 9, 178, 189, 73, 10, 159, 189, 84, 45, 219, 189, 126, 213, 54, 188, 47, 223, 210, 189, 135, 16, 85, 62, 109, 76, 211, 60, 135, 26, 182, 190, 83, 53, 119, 61, 161, 107, 192, 190, 248, 121, 143, 189, 206, 153, 123, 62, 79, 100, 115, 191, 66, 132, 245, 62, 146, 228, 130, 191, 63, 31, 0, 191, 4, 232, 161, 189, 74, 119, 6, 191, 73, 210, 136, 190, 52, 141, 240, 61, 175, 171, 32, 61, 245, 35, 213, 61, 66, 181, 76, 62, 128, 89, 165, 62, 177, 17, 146, 62, 192, 210, 137, 62, 137, 5, 19, 63, 46, 50, 72, 62, 38, 45, 195, 188, 190, 33, 219, 190, 49, 5, 135, 187, 15, 161, 194, 62, 165, 67, 129, 189, 227, 199, 132, 62, 128, 87, 190, 189, 55, 66, 120, 188, 225, 92, 194, 188, 121, 247, 8, 190, 175, 181, 29, 190, 75, 20, 143, 189, 10, 71, 167, 189, 5, 20, 79, 61, 50, 90, 198, 189, 192, 66, 178, 189, 244, 244, 18, 190, 101, 62, 218, 189, 21, 180, 20, 188, 230, 243, 81, 190, 177, 148, 189, 60, 27, 78, 166, 57, 222, 243, 71, 190, 50, 23, 65, 61, 158, 170, 23, 62, 6, 170, 17, 190, 111, 203, 236, 188, 96, 26, 196, 188, 139, 102, 0, 62, 36, 233, 34, 190, 55, 203, 76, 61, 99, 23, 4, 62, 158, 154, 117, 190, 143, 239, 209, 189, 236, 246, 25, 188, 235, 230, 147, 60, 107, 7, 80, 61, 200, 61, 77, 190, 183, 161, 212, 61, 125, 14, 90, 60, 43, 93, 113, 187, 53, 146, 2, 191, 186, 107, 170, 61, 71, 79, 208, 62, 14, 132, 227, 190, 13, 253, 86, 62, 19, 135, 142, 61, 87, 240, 114, 190, 93, 61, 91, 191, 90, 174, 90, 191, 236, 55, 234, 62, 148, 126, 168, 62, 211, 255, 188, 190, 237, 150, 122, 62, 22, 40, 210, 62, 159, 137, 183, 190, 31, 121, 198, 62, 96, 223, 6, 61, 174, 110, 152, 190, 125, 88, 33, 190, 106, 48, 162, 61, 137, 105, 133, 190, 219, 236, 27, 191, 227, 183, 204, 61, 198, 80, 141, 187, 172, 62, 113, 62, 195, 209, 234, 61, 130, 244, 98, 190, 250, 16, 37, 62, 254, 97, 3, 190, 140, 163, 84, 189, 53, 94, 93, 62, 168, 101, 68, 190, 160, 144, 28, 63, 253, 49, 95, 61, 249, 206, 63, 191, 11, 63, 93, 61, 120, 203, 5, 190, 116, 88, 23, 191, 202, 63, 224, 62, 67, 13, 157, 191, 188, 78, 76, 62, 8, 37, 141, 191, 117, 137, 240, 190, 238, 227, 200, 188, 167, 66, 177, 190, 139, 223, 203, 190, 111, 111, 161, 61, 213, 92, 209, 190, 10, 46, 235, 188, 32, 130, 120, 62, 210, 208, 142, 62, 146, 162, 8, 62, 206, 113, 48, 63, 194, 53, 41, 63, 116, 217, 187, 62, 179, 75, 31, 190, 43, 188, 108, 190, 224, 81, 237, 60, 113, 199, 165, 62, 145, 29, 47, 191, 125, 230, 135, 61, 40, 57, 178, 189, 220, 225, 187, 190, 53, 211, 71, 62, 173, 198, 7, 191, 58, 66, 136, 60, 35, 23, 81, 62, 214, 148, 170, 190, 103, 118, 148, 62, 194, 96, 243, 61, 24, 47, 195, 190, 10, 45, 58, 191, 19, 250, 132, 191, 115, 221, 197, 62, 31, 115, 212, 62, 166, 148, 219, 190, 74, 203, 175, 62, 80, 23, 146, 62, 159, 56, 6, 191, 205, 200, 172, 62, 78, 150, 2, 62, 32, 177, 56, 190, 211, 55, 133, 190, 160, 73, 114, 62, 212, 39, 195, 190, 39, 44, 22, 191, 177, 245, 199, 61, 221, 210, 205, 61, 202, 87, 71, 60, 100, 199, 142, 62, 215, 37, 136, 189, 133, 174, 151, 62, 186, 74, 47, 62, 218, 89, 224, 60, 103, 9, 84, 62, 52, 206, 133, 190, 79, 237, 91, 190, 208, 47, 167, 61, 216, 56, 108, 190, 160, 176, 91, 191, 205, 129, 147, 189, 136, 60, 58, 62, 227, 241, 23, 62, 10, 63, 49, 190, 211, 174, 31, 191, 107, 91, 159, 190, 52, 91, 241, 190, 99, 82, 109, 191, 10, 58, 28, 62, 67, 10, 3, 191, 149, 237, 15, 61, 88, 66, 131, 62, 190, 27, 109, 61, 201, 200, 45, 62, 231, 112, 16, 190, 203, 97, 22, 190, 99, 235, 162, 189, 43, 200, 57, 63, 242, 45, 61, 62, 10, 230, 173, 61, 172, 50, 251, 190, 178, 165, 152, 191, 126, 6, 26, 190, 90, 71, 224, 190, 253, 35, 21, 189, 245, 1, 207, 62, 146, 120, 217, 187, 204, 122, 64, 191, 238, 151, 66, 190, 228, 16, 47, 190, 155, 237, 153, 62, 252, 143, 158, 189, 214, 118, 167, 61, 208, 42, 96, 62, 31, 159, 13, 191, 102, 69, 5, 191, 195, 248, 36, 191, 45, 75, 133, 61, 141, 235, 244, 62, 53, 141, 10, 191, 230, 85, 227, 61, 250, 215, 133, 61, 170, 40, 195, 190, 245, 124, 136, 62, 67, 114, 153, 62, 203, 248, 165, 190, 204, 241, 157, 189, 65, 114, 2, 62, 8, 40, 171, 189, 100, 159, 10, 191, 94, 137, 76, 62, 234, 174, 117, 62, 143, 196, 179, 189, 153, 213, 1, 62, 17, 99, 118, 190, 187, 152, 139, 62, 238, 166, 232, 189, 155, 138, 30, 61, 139, 6, 218, 190, 114, 221, 112, 189, 14, 159, 141, 61, 242, 246, 109, 62, 98, 131, 200, 190, 193, 140, 129, 61, 124, 165, 235, 189, 9, 167, 72, 190, 23, 219, 184, 61, 57, 188, 58, 191, 72, 53, 149, 62, 134, 221, 9, 191, 39, 199, 93, 61, 141, 183, 124, 188, 40, 194, 244, 189, 197, 198, 139, 189, 125, 209, 148, 189, 87, 188, 213, 61, 153, 180, 141, 62, 183, 206, 186, 61, 56, 14, 41, 189, 184, 173, 152, 61, 188, 180, 79, 62, 142, 189, 235, 61, 77, 107, 17, 62, 171, 143, 128, 62, 249, 189, 38, 62, 230, 40, 158, 61, 220, 183, 47, 62, 168, 21, 20, 190, 202, 98, 229, 61, 111, 159, 145, 189, 147, 253, 184, 189, 42, 53, 51, 61, 71, 80, 23, 63, 20, 220, 241, 189, 43, 140, 180, 189, 203, 83, 0, 63, 38, 77, 28, 190, 251, 29, 57, 190, 99, 251, 141, 62, 48, 225, 34, 190, 16, 147, 0, 61, 208, 218, 166, 62, 80, 64, 22, 190, 255, 203, 120, 62, 65, 44, 93, 190, 15, 28, 16, 62, 253, 78, 182, 62, 146, 202, 80, 190, 110, 188, 147, 189, 68, 102, 83, 61, 43, 44, 218, 189, 130, 186, 20, 191, 158, 79, 140, 62, 24, 107, 138, 61, 20, 100, 161, 61, 105, 236, 222, 190, 229, 69, 195, 190, 104, 22, 12, 62, 151, 81, 126, 62, 53, 217, 212, 187, 162, 246, 5, 62, 193, 1, 171, 190, 13, 28, 93, 190, 95, 65, 219, 62, 235, 184, 159, 190, 202, 80, 53, 62, 116, 190, 30, 62, 202, 118, 210, 190, 132, 240, 68, 62, 126, 45, 42, 63, 133, 214, 180, 190, 134, 103, 209, 189, 223, 183, 173, 191, 10, 245, 183, 190, 209, 153, 161, 189, 40, 161, 61, 190, 52, 201, 132, 62, 77, 26, 137, 188, 170, 199, 199, 190, 249, 206, 223, 189, 100, 29, 168, 62, 143, 50, 90, 189, 184, 215, 237, 187, 119, 156, 36, 62, 196, 161, 140, 191, 95, 110, 128, 190, 57, 231, 91, 189, 113, 54, 88, 62, 115, 69, 40, 62, 251, 212, 254, 190, 202, 56, 109, 190, 27, 34, 140, 189, 36, 86, 1, 62, 93, 243, 94, 60, 236, 89, 86, 62, 107, 179, 0, 190, 79, 59, 100, 190, 242, 81, 79, 61, 175, 231, 189, 190, 255, 217, 129, 61, 172, 91, 102, 191, 245, 21, 75, 62, 98, 134, 113, 189, 179, 59, 149, 191, 231, 89, 229, 61, 151, 87, 66, 191, 75, 157, 166, 190, 17, 206, 76, 191, 45, 160, 177, 191, 84, 192, 253, 189, 134, 241, 204, 186, 131, 130, 16, 62, 146, 120, 22, 62, 43, 144, 253, 187, 167, 104, 189, 62, 19, 102, 234, 62, 83, 135, 19, 189, 170, 97, 154, 62, 230, 84, 99, 62, 88, 50, 195, 189, 2, 251, 115, 191, 194, 249, 172, 61, 49, 188, 36, 62, 74, 151, 72, 61, 32, 92, 88, 61, 157, 192, 127, 62, 39, 250, 106, 191, 254, 46, 158, 190, 177, 104, 80, 62, 28, 107, 63, 61, 160, 131, 150, 190, 182, 49, 208, 188, 192, 92, 107, 190, 176, 120, 105, 190, 29, 103, 178, 62, 164, 131, 47, 191, 178, 199, 241, 62, 133, 105, 218, 190, 140, 16, 167, 190, 185, 145, 176, 190, 253, 27, 254, 190, 52, 85, 186, 189, 89, 166, 135, 61, 136, 243, 139, 189, 62, 123, 96, 62, 188, 155, 205, 62, 180, 151, 82, 62, 88, 173, 149, 62, 188, 112, 42, 62, 198, 128, 233, 62, 18, 205, 60, 62, 17, 175, 39, 62, 96, 80, 59, 191, 242, 196, 34, 62, 37, 16, 176, 62, 227, 49, 220, 188, 207, 113, 170, 61, 122, 53, 22, 189, 153, 135, 144, 191, 149, 229, 20, 61, 189, 202, 8, 190, 178, 70, 51, 190, 64, 214, 148, 62, 19, 102, 237, 190, 251, 177, 207, 61, 225, 197, 2, 189, 24, 227, 83, 190, 13, 42, 66, 191, 212, 118, 111, 191, 3, 41, 242, 62, 148, 244, 167, 62, 224, 17, 217, 190, 30, 21, 144, 61, 23, 200, 25, 62, 26, 214, 25, 190, 47, 58, 175, 62, 178, 238, 112, 62, 92, 165, 76, 190, 255, 201, 244, 60, 41, 9, 24, 62, 101, 76, 182, 189, 99, 14, 176, 190, 236, 89, 255, 61, 23, 121, 202, 189, 21, 51, 37, 61, 190, 243, 143, 62, 118, 110, 130, 190, 226, 44, 65, 62, 191, 255, 76, 188, 226, 90, 4, 62, 196, 136, 89, 190, 111, 199, 43, 62, 49, 76, 238, 62, 98, 68, 166, 190, 178, 141, 144, 189, 44, 63, 90, 62, 35, 149, 134, 190, 222, 242, 25, 190, 41, 97, 2, 63, 29, 173, 248, 189, 140, 34, 137, 61, 225, 12, 73, 62, 7, 36, 171, 189, 142, 38, 134, 62, 34, 224, 187, 190, 49, 84, 139, 189, 130, 107, 171, 62, 188, 167, 79, 190, 230, 62, 163, 61, 230, 0, 179, 61, 113, 52, 131, 61, 230, 199, 213, 190, 116, 51, 15, 63, 169, 239, 119, 189, 163, 105, 77, 62, 53, 134, 135, 190, 16, 206, 128, 190, 43, 222, 74, 62, 217, 212, 89, 61, 140, 238, 96, 190, 185, 165, 174, 61, 145, 196, 2, 190, 165, 113, 13, 190, 61, 14, 121, 62, 144, 85, 46, 190, 102, 151, 234, 190, 32, 64, 167, 62, 54, 33, 153, 62, 251, 187, 158, 59, 226, 224, 58, 62, 98, 71, 133, 190, 120, 229, 230, 62, 207, 24, 40, 190, 139, 37, 20, 63, 208, 133, 1, 63, 95, 117, 186, 61, 234, 177, 158, 61, 17, 3, 107, 62, 227, 204, 28, 190, 2, 174, 134, 62, 108, 165, 193, 190, 164, 122, 120, 188, 59, 15, 212, 188, 7, 211, 37, 61, 129, 31, 169, 190, 241, 116, 167, 190, 64, 242, 129, 190, 223, 166, 33, 190, 147, 126, 13, 62, 122, 179, 24, 62, 107, 104, 76, 191, 17, 68, 197, 61, 183, 202, 124, 191, 104, 80, 40, 191, 62, 152, 148, 62, 235, 57, 176, 189, 239, 117, 152, 62, 136, 93, 138, 61, 14, 193, 76, 62, 31, 66, 234, 61, 15, 66, 226, 61, 85, 101, 192, 190, 207, 228, 27, 63, 110, 56, 8, 61, 250, 61, 12, 191, 132, 94, 231, 190, 92, 94, 229, 190, 249, 88, 10, 62, 167, 74, 19, 62, 228, 51, 1, 191, 118, 246, 164, 190, 138, 71, 113, 190, 98, 137, 129, 62, 215, 133, 164, 62, 155, 146, 177, 189, 250, 111, 187, 191, 245, 216, 233, 61, 198, 139, 176, 62, 69, 182, 1, 190, 7, 174, 219, 189, 20, 83, 225, 61, 130, 17, 17, 190, 106, 169, 173, 62, 57, 59, 82, 188, 197, 161, 177, 62, 131, 130, 240, 61, 93, 216, 132, 61, 168, 110, 196, 61, 161, 6, 53, 191, 68, 155, 180, 61, 244, 141, 97, 62, 45, 114, 82, 190, 166, 93, 197, 62, 169, 204, 182, 62, 60, 72, 180, 190, 53, 137, 25, 191, 242, 145, 218, 191, 149, 122, 164, 62, 163, 234, 12, 63, 234, 211, 219, 190, 41, 37, 206, 62, 132, 121, 236, 61, 90, 76, 48, 190, 248, 137, 176, 62, 37, 42, 78, 62, 180, 247, 205, 190, 16, 213, 144, 190, 18, 26, 199, 61, 80, 233, 18, 190, 159, 242, 100, 191, 249, 227, 205, 189, 249, 55, 143, 59, 240, 122, 63, 62, 222, 31, 225, 189, 217, 41, 114, 190, 168, 208, 138, 62, 160, 161, 184, 189, 229, 73, 66, 189, 179, 40, 73, 62, 168, 217, 149, 190, 33, 20, 14, 61, 189, 201, 108, 191, 49, 136, 86, 62, 42, 249, 111, 191, 237, 189, 114, 190, 185, 103, 255, 62, 82, 212, 111, 190, 37, 241, 123, 61, 141, 187, 157, 190, 138, 15, 171, 188, 188, 145, 32, 62, 52, 180, 129, 190, 26, 26, 29, 190, 86, 252, 79, 189, 151, 168, 110, 189, 94, 32, 168, 61, 68, 185, 204, 188, 96, 127, 136, 190, 79, 187, 217, 62, 57, 28, 176, 62, 142, 252, 75, 191, 66, 59, 200, 190, 122, 166, 24, 191, 147, 227, 37, 62, 180, 52, 5, 190, 22, 22, 145, 188, 77, 110, 107, 191, 21, 112, 150, 188, 119, 53, 60, 191, 107, 240, 67, 62, 117, 94, 105, 60, 61, 218, 145, 62, 5, 83, 7, 63, 161, 164, 48, 190, 214, 234, 228, 189, 113, 167, 41, 62, 223, 242, 60, 188, 203, 130, 12, 191, 250, 163, 195, 62, 50, 196, 150, 191, 185, 126, 131, 62, 89, 77, 58, 191, 90, 234, 125, 190, 62, 227, 168, 61, 98, 82, 158, 190, 46, 24, 166, 190, 6, 225, 105, 62, 205, 3, 31, 62, 155, 225, 199, 188, 138, 19, 100, 62, 167, 117, 163, 62, 147, 75, 65, 62, 181, 111, 170, 59, 54, 180, 181, 62, 10, 12, 9, 62, 119, 113, 230, 189, 8, 149, 188, 190, 105, 207, 196, 61, 150, 191, 122, 62, 137, 43, 144, 190, 234, 212, 222, 61, 29, 80, 167, 189, 37, 247, 34, 191, 220, 109, 144, 62, 92, 153, 73, 61, 146, 186, 226, 61, 115, 227, 245, 190, 54, 191, 205, 61, 4, 123, 28, 189, 124, 254, 109, 61, 155, 138, 23, 62, 88, 120, 226, 190, 136, 191, 198, 62, 159, 248, 87, 191, 16, 69, 168, 190, 139, 93, 252, 60, 114, 62, 79, 190, 84, 233, 155, 190, 136, 207, 186, 60, 13, 15, 189, 190, 185, 178, 180, 61, 142, 219, 131, 62, 151, 131, 137, 62, 252, 122, 189, 62, 113, 181, 69, 62, 50, 186, 72, 62, 240, 10, 175, 62, 130, 130, 145, 189, 0, 192, 213, 189, 167, 223, 188, 60, 208, 220, 162, 61, 54, 214, 234, 190, 212, 201, 95, 62, 231, 112, 197, 62, 208, 142, 212, 61, 68, 113, 91, 62, 27, 212, 42, 191, 75, 163, 200, 62, 93, 120, 194, 62, 245, 210, 204, 190, 230, 90, 164, 62, 167, 5, 230, 62, 249, 3, 20, 191, 221, 90, 0, 191, 118, 224, 38, 191, 251, 227, 102, 62, 59, 180, 154, 62, 114, 164, 130, 190, 76, 234, 103, 62, 144, 90, 214, 61, 65, 226, 37, 191, 134, 75, 172, 62, 200, 35, 174, 188, 41, 53, 156, 190, 169, 54, 152, 190, 234, 30, 146, 188, 156, 42, 147, 189, 104, 105, 238, 190, 161, 37, 14, 62, 170, 169, 25, 62, 104, 7, 88, 62, 180, 82, 111, 188, 246, 0, 212, 190, 142, 202, 126, 62, 227, 175, 18, 190, 29, 191, 146, 189, 121, 12, 110, 62, 221, 6, 16, 190, 131, 208, 181, 190, 115, 175, 171, 62, 116, 45, 136, 189, 81, 153, 9, 191, 36, 245, 153, 189, 231, 117, 2, 191, 107, 155, 38, 189, 52, 143, 9, 191, 221, 133, 150, 190, 48, 11, 183, 190, 138, 16, 142, 190, 232, 128, 186, 191, 128, 143, 30, 62, 76, 218, 143, 61, 59, 152, 97, 62, 37, 214, 117, 190, 245, 101, 184, 62, 52, 145, 206, 62, 191, 216, 203, 190, 164, 209, 176, 188, 28, 180, 107, 190, 225, 20, 135, 62, 66, 247, 232, 61, 184, 147, 95, 62, 154, 203, 178, 190, 81, 247, 211, 190, 50, 71, 61, 191, 245, 220, 169, 190, 29, 198, 252, 189, 153, 224, 22, 63, 85, 148, 153, 60, 157, 61, 62, 191, 249, 8, 8, 191, 203, 184, 165, 62, 139, 18, 161, 62, 248, 40, 250, 190, 48, 89, 162, 62, 179, 75, 159, 62, 92, 49, 226, 190, 200, 114, 88, 189, 37, 188, 233, 190, 29, 1, 238, 61, 1, 110, 148, 62, 121, 160, 9, 191, 117, 39, 230, 61, 72, 109, 188, 189, 39, 70, 42, 191, 4, 141, 155, 62, 95, 152, 224, 61, 70, 55, 232, 190, 5, 46, 177, 190, 30, 86, 123, 189, 68, 23, 50, 62, 163, 226, 255, 190, 59, 192, 100, 60, 132, 63, 9, 188, 221, 51, 123, 61, 3, 139, 165, 189, 91, 27, 81, 190, 193, 230, 40, 62, 12, 248, 135, 62, 167, 112, 128, 190, 173, 136, 36, 62, 130, 96, 219, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 249, 50, 62, 231, 166, 42, 189, 205, 135, 181, 62, 183, 67, 80, 190, 143, 193, 248, 61, 108, 59, 14, 62, 202, 57, 82, 62, 14, 8, 82, 62, 184, 19, 25, 190, 159, 137, 94, 62, 16, 86, 216, 189, 15, 96, 114, 62, 47, 64, 127, 189, 219, 237, 165, 61, 198, 138, 29, 62, 215, 149, 223, 59, 109, 141, 43, 62, 111, 112, 47, 190, 214, 251, 3, 62, 89, 127, 136, 62, 63, 198, 136, 189, 0, 72, 154, 61, 108, 246, 117, 190, 234, 116, 206, 190, 103, 127, 36, 189, 202, 246, 50, 62, 187, 206, 126, 60, 111, 15, 152, 61, 227, 164, 140, 61, 130, 22, 206, 61, 49, 22, 142, 62, 20, 134, 184, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {246, 35, 70, 62, 240, 87, 82, 189, 228, 236, 190, 188, 173, 48, 35, 62, 131, 207, 46, 61, 93, 237, 187, 62, 15, 24, 229, 59, 98, 9, 49, 63, 181, 242, 84, 189, 12, 51, 16, 63, 76, 236, 131, 60, 189, 103, 35, 191, 197, 7, 190, 63, 247, 125, 246, 190, 124, 62, 119, 191, 99, 120, 170, 190, 132, 72, 147, 61, 160, 208, 2, 191, 20, 74, 39, 191, 171, 175, 68, 63, 60, 252, 12, 63, 216, 38, 162, 190, 32, 28, 192, 190, 8, 58, 154, 63, 197, 81, 239, 190, 89, 29, 46, 191, 255, 190, 67, 191, 197, 83, 229, 62, 108, 219, 194, 62, 113, 73, 187, 190, 84, 121, 144, 191, 31, 62, 172, 190, 165, 87, 44, 189, 139, 99, 34, 62, 229, 96, 104, 191, 14, 201, 83, 189, 105, 48, 239, 190, 13, 122, 109, 190, 244, 54, 160, 190, 158, 234, 129, 190, 97, 159, 8, 190, 54, 161, 34, 61, 104, 120, 56, 62, 203, 143, 14, 62, 134, 232, 245, 62, 48, 198, 253, 189, 172, 40, 12, 62, 102, 206, 136, 190, 237, 135, 137, 190, 156, 208, 35, 61, 62, 108, 58, 190, 174, 3, 113, 190, 99, 40, 107, 62, 27, 206, 179, 190, 57, 29, 187, 186, 152, 165, 150, 62, 153, 13, 147, 62, 79, 16, 106, 62, 100, 206, 38, 61, 253, 33, 58, 61, 58, 224, 124, 62, 59, 203, 75, 62, 184, 147, 90, 62, 213, 249, 117, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 148, 227, 189, 38, 126, 235, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {97, 95, 151, 191, 172, 82, 93, 63, 141, 247, 252, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {11, 108, 24, 192, 28, 59, 121, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0004/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}