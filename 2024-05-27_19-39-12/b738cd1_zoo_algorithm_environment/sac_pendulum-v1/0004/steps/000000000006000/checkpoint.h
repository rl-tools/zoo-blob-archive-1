// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {36, 13, 52, 62, 129, 83, 23, 62, 109, 144, 210, 190, 63, 23, 146, 190, 13, 6, 85, 191, 222, 77, 2, 62, 30, 110, 147, 62, 11, 61, 92, 63, 27, 238, 84, 62, 214, 196, 87, 190, 150, 72, 104, 190, 234, 181, 252, 62, 223, 184, 254, 190, 226, 206, 211, 62, 90, 25, 38, 191, 25, 247, 13, 62, 100, 53, 134, 63, 182, 252, 24, 62, 162, 42, 228, 62, 156, 226, 21, 191, 128, 181, 145, 190, 165, 18, 120, 62, 40, 58, 222, 62, 9, 207, 124, 62, 1, 249, 156, 190, 221, 58, 29, 63, 84, 248, 240, 61, 24, 236, 42, 63, 70, 136, 71, 63, 77, 230, 165, 62, 102, 184, 25, 63, 203, 55, 159, 62, 135, 135, 175, 62, 28, 249, 45, 190, 238, 158, 18, 191, 85, 247, 110, 190, 14, 184, 17, 191, 212, 228, 115, 61, 12, 33, 171, 190, 95, 138, 71, 62, 47, 68, 62, 63, 59, 202, 195, 62, 195, 92, 155, 189, 130, 225, 151, 189, 120, 2, 132, 62, 46, 120, 180, 62, 7, 182, 222, 62, 53, 193, 82, 61, 141, 30, 151, 61, 61, 238, 38, 190, 147, 136, 107, 189, 194, 95, 191, 190, 195, 224, 97, 63, 232, 168, 176, 62, 26, 33, 63, 190, 86, 102, 11, 63, 170, 243, 166, 190, 29, 4, 40, 60, 53, 90, 113, 63, 226, 150, 132, 62, 105, 54, 208, 62, 168, 19, 106, 191, 160, 222, 142, 188, 187, 118, 13, 191, 246, 80, 135, 63, 247, 140, 127, 62, 28, 176, 192, 60, 223, 122, 26, 191, 33, 223, 28, 62, 37, 51, 11, 62, 105, 38, 1, 63, 145, 25, 187, 190, 31, 149, 31, 191, 108, 8, 123, 191, 97, 137, 6, 191, 139, 160, 8, 62, 86, 146, 22, 63, 193, 70, 149, 62, 74, 75, 7, 63, 4, 155, 140, 191, 207, 182, 108, 190, 17, 151, 139, 62, 131, 251, 36, 63, 107, 234, 38, 62, 7, 205, 157, 61, 197, 35, 13, 191, 168, 42, 251, 189, 32, 111, 41, 191, 196, 125, 138, 62, 32, 32, 180, 60, 189, 211, 211, 190, 152, 32, 147, 191, 212, 54, 131, 190, 219, 124, 210, 189, 120, 113, 136, 62, 2, 248, 254, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 238, 21, 191, 242, 130, 136, 62, 229, 225, 115, 189, 233, 15, 38, 191, 88, 6, 73, 190, 208, 158, 206, 190, 158, 77, 93, 190, 191, 218, 72, 191, 221, 135, 146, 190, 130, 76, 5, 191, 104, 195, 215, 190, 246, 243, 76, 190, 251, 21, 84, 189, 108, 119, 33, 190, 66, 254, 113, 190, 51, 216, 32, 62, 170, 55, 46, 63, 237, 27, 234, 189, 185, 216, 84, 62, 117, 197, 75, 61, 23, 64, 88, 190, 177, 69, 63, 190, 66, 130, 24, 63, 208, 98, 7, 63, 158, 123, 247, 189, 54, 19, 82, 186, 175, 115, 68, 62, 19, 230, 128, 188, 95, 123, 9, 63, 190, 48, 173, 62, 88, 1, 40, 62, 104, 98, 92, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 186, 145, 61, 73, 178, 54, 189, 166, 237, 187, 190, 187, 192, 66, 62, 155, 114, 3, 190, 54, 236, 131, 189, 248, 54, 134, 62, 164, 52, 238, 60, 240, 132, 134, 61, 181, 131, 160, 189, 20, 36, 38, 190, 11, 67, 231, 61, 215, 95, 143, 189, 141, 72, 56, 188, 252, 70, 227, 61, 89, 18, 188, 61, 134, 235, 149, 189, 154, 68, 17, 62, 3, 194, 133, 62, 41, 104, 25, 189, 20, 55, 192, 59, 193, 23, 75, 62, 237, 130, 24, 62, 44, 179, 172, 61, 208, 51, 191, 189, 244, 44, 56, 61, 202, 193, 6, 188, 162, 173, 163, 189, 186, 144, 143, 189, 159, 178, 169, 189, 43, 42, 208, 190, 27, 48, 178, 189, 9, 173, 33, 62, 183, 34, 47, 190, 159, 167, 1, 190, 227, 224, 65, 59, 204, 13, 5, 190, 229, 33, 152, 61, 167, 235, 171, 61, 202, 89, 34, 190, 65, 212, 97, 61, 116, 213, 207, 188, 7, 173, 98, 188, 205, 46, 225, 61, 172, 133, 81, 189, 116, 141, 236, 61, 84, 243, 169, 189, 13, 56, 126, 61, 247, 133, 22, 62, 15, 206, 161, 189, 234, 75, 179, 61, 28, 177, 172, 189, 241, 211, 36, 190, 221, 88, 101, 61, 91, 15, 175, 189, 180, 106, 25, 190, 94, 196, 19, 189, 228, 51, 129, 60, 140, 144, 180, 189, 217, 179, 141, 189, 61, 21, 80, 189, 37, 128, 44, 60, 125, 78, 52, 190, 203, 58, 21, 190, 52, 199, 236, 60, 157, 133, 14, 191, 40, 193, 2, 190, 240, 250, 119, 189, 161, 188, 229, 190, 10, 179, 238, 190, 147, 21, 254, 189, 83, 2, 54, 62, 79, 39, 221, 61, 154, 171, 182, 189, 243, 117, 58, 62, 96, 221, 220, 189, 116, 130, 138, 190, 120, 244, 38, 190, 45, 116, 134, 190, 234, 219, 228, 62, 20, 218, 40, 62, 53, 82, 130, 60, 81, 103, 144, 60, 25, 229, 140, 189, 3, 240, 180, 190, 175, 115, 223, 190, 28, 233, 29, 62, 57, 60, 113, 62, 91, 169, 249, 190, 18, 141, 194, 61, 94, 65, 93, 62, 254, 236, 234, 61, 153, 88, 102, 60, 132, 121, 102, 190, 168, 113, 51, 191, 48, 160, 186, 188, 159, 91, 80, 62, 243, 91, 81, 189, 114, 169, 241, 189, 132, 139, 144, 188, 252, 202, 138, 61, 154, 193, 140, 61, 85, 227, 116, 189, 111, 195, 33, 62, 72, 231, 24, 190, 132, 106, 195, 189, 96, 212, 227, 60, 154, 235, 192, 61, 148, 155, 24, 189, 168, 54, 219, 189, 131, 22, 59, 190, 136, 183, 174, 190, 167, 220, 8, 59, 244, 42, 32, 190, 226, 253, 15, 62, 206, 54, 185, 61, 150, 58, 83, 190, 237, 229, 103, 190, 68, 158, 7, 191, 68, 186, 114, 190, 188, 254, 50, 62, 44, 237, 69, 61, 51, 137, 191, 188, 243, 153, 21, 190, 147, 190, 162, 189, 253, 254, 52, 190, 42, 241, 8, 190, 48, 202, 217, 189, 49, 236, 79, 190, 238, 219, 49, 190, 246, 182, 161, 187, 176, 102, 48, 62, 193, 160, 132, 190, 245, 144, 2, 190, 162, 165, 109, 190, 6, 140, 1, 189, 239, 18, 57, 62, 136, 237, 38, 188, 110, 83, 2, 62, 146, 129, 46, 62, 205, 94, 147, 190, 168, 140, 153, 187, 211, 229, 202, 189, 212, 73, 154, 62, 113, 164, 80, 62, 148, 122, 143, 189, 7, 156, 178, 61, 76, 253, 81, 62, 231, 68, 162, 190, 45, 160, 132, 62, 175, 68, 50, 62, 136, 236, 183, 59, 250, 90, 177, 190, 240, 4, 228, 61, 112, 202, 79, 62, 148, 97, 221, 189, 233, 200, 199, 61, 15, 218, 242, 189, 125, 27, 116, 189, 141, 41, 249, 61, 94, 69, 138, 188, 108, 122, 207, 61, 185, 197, 220, 190, 16, 184, 102, 60, 27, 221, 242, 188, 219, 151, 181, 61, 36, 216, 186, 61, 99, 46, 21, 60, 200, 240, 220, 188, 165, 134, 10, 191, 83, 81, 126, 190, 177, 56, 122, 62, 156, 133, 37, 190, 210, 87, 184, 189, 89, 122, 178, 61, 54, 209, 223, 188, 4, 130, 154, 62, 73, 115, 222, 61, 246, 191, 110, 62, 170, 30, 56, 62, 81, 125, 78, 62, 42, 145, 22, 62, 244, 208, 111, 62, 190, 78, 70, 62, 124, 152, 100, 186, 35, 127, 130, 189, 165, 184, 79, 61, 226, 39, 58, 188, 58, 94, 94, 62, 5, 82, 5, 62, 51, 254, 13, 62, 248, 132, 207, 61, 151, 176, 27, 62, 28, 54, 105, 186, 111, 72, 213, 189, 10, 130, 241, 60, 233, 25, 172, 61, 193, 62, 32, 62, 203, 255, 238, 189, 7, 181, 93, 189, 207, 255, 115, 62, 90, 116, 19, 190, 22, 202, 194, 60, 251, 236, 144, 61, 2, 190, 20, 190, 239, 184, 90, 189, 215, 248, 233, 188, 214, 166, 105, 62, 220, 226, 90, 62, 48, 105, 21, 62, 99, 245, 190, 61, 99, 152, 106, 188, 235, 235, 223, 59, 140, 151, 54, 62, 194, 177, 171, 61, 150, 187, 241, 61, 145, 3, 107, 189, 1, 218, 159, 189, 81, 177, 64, 189, 140, 20, 132, 62, 144, 244, 52, 62, 164, 217, 146, 60, 42, 167, 162, 61, 77, 114, 139, 61, 18, 62, 98, 190, 4, 226, 229, 190, 215, 91, 198, 190, 31, 130, 174, 190, 136, 59, 74, 190, 67, 137, 61, 191, 140, 123, 77, 62, 145, 26, 246, 61, 15, 6, 165, 190, 68, 191, 136, 190, 41, 112, 130, 189, 74, 30, 33, 62, 180, 88, 6, 191, 122, 142, 44, 191, 144, 233, 201, 190, 2, 146, 5, 62, 58, 79, 59, 62, 132, 0, 149, 60, 189, 174, 128, 62, 157, 189, 137, 62, 54, 227, 214, 62, 82, 128, 22, 63, 49, 205, 2, 189, 12, 239, 28, 62, 68, 176, 239, 190, 185, 170, 126, 190, 102, 201, 3, 62, 176, 92, 136, 190, 244, 199, 213, 61, 158, 95, 129, 62, 204, 228, 137, 190, 7, 137, 89, 61, 79, 54, 57, 190, 154, 171, 9, 62, 76, 204, 5, 61, 135, 8, 112, 189, 167, 43, 139, 61, 99, 110, 34, 62, 177, 52, 32, 190, 95, 66, 27, 62, 248, 173, 3, 190, 38, 62, 148, 189, 58, 247, 134, 60, 52, 103, 127, 61, 111, 199, 46, 189, 213, 45, 24, 190, 44, 144, 236, 61, 21, 69, 201, 188, 53, 87, 6, 59, 33, 73, 36, 190, 216, 39, 208, 186, 19, 62, 30, 61, 13, 135, 230, 61, 201, 12, 23, 190, 95, 232, 201, 189, 44, 129, 126, 189, 252, 241, 195, 61, 89, 17, 44, 61, 213, 32, 152, 188, 120, 9, 178, 189, 72, 191, 88, 189, 232, 160, 205, 189, 171, 116, 180, 60, 122, 71, 210, 189, 249, 43, 49, 62, 30, 242, 11, 190, 194, 246, 194, 190, 101, 118, 112, 62, 171, 11, 12, 190, 28, 10, 82, 190, 217, 174, 74, 62, 135, 128, 74, 61, 68, 54, 128, 60, 146, 15, 27, 191, 135, 152, 135, 190, 212, 223, 0, 190, 106, 77, 201, 189, 54, 227, 95, 190, 116, 101, 73, 62, 217, 56, 192, 187, 33, 21, 240, 61, 197, 101, 212, 61, 183, 9, 155, 62, 144, 164, 56, 60, 14, 249, 198, 62, 195, 52, 176, 62, 71, 91, 72, 62, 23, 244, 104, 189, 122, 71, 242, 190, 168, 198, 107, 60, 113, 114, 174, 62, 203, 73, 203, 189, 90, 234, 81, 62, 195, 156, 230, 189, 212, 25, 40, 189, 228, 18, 239, 61, 121, 247, 8, 190, 175, 181, 29, 190, 75, 20, 143, 189, 10, 71, 167, 189, 5, 20, 79, 61, 50, 90, 198, 189, 192, 66, 178, 189, 244, 244, 18, 190, 101, 62, 218, 189, 21, 180, 20, 188, 230, 243, 81, 190, 177, 148, 189, 60, 27, 78, 166, 57, 222, 243, 71, 190, 50, 23, 65, 61, 158, 170, 23, 62, 6, 170, 17, 190, 111, 203, 236, 188, 96, 26, 196, 188, 139, 102, 0, 62, 36, 233, 34, 190, 55, 203, 76, 61, 99, 23, 4, 62, 158, 154, 117, 190, 143, 239, 209, 189, 236, 246, 25, 188, 235, 230, 147, 60, 107, 7, 80, 61, 200, 61, 77, 190, 183, 161, 212, 61, 125, 14, 90, 60, 43, 93, 113, 187, 184, 210, 108, 190, 250, 80, 246, 61, 118, 187, 156, 62, 197, 7, 210, 190, 182, 133, 64, 62, 62, 91, 162, 190, 146, 191, 26, 190, 28, 67, 194, 190, 213, 220, 177, 190, 207, 199, 138, 62, 251, 106, 11, 62, 63, 79, 178, 190, 101, 61, 106, 62, 56, 194, 133, 62, 80, 3, 234, 189, 79, 190, 157, 62, 123, 191, 139, 59, 170, 50, 137, 190, 35, 151, 21, 190, 150, 93, 55, 189, 103, 110, 224, 190, 139, 35, 246, 190, 135, 131, 190, 61, 135, 20, 253, 60, 5, 67, 150, 62, 122, 13, 124, 59, 68, 233, 80, 190, 143, 180, 129, 61, 11, 226, 204, 189, 111, 103, 136, 61, 134, 122, 90, 62, 135, 103, 61, 190, 39, 196, 158, 62, 240, 233, 9, 190, 6, 170, 110, 190, 206, 176, 68, 62, 126, 40, 0, 190, 9, 176, 228, 190, 233, 66, 197, 62, 157, 152, 128, 190, 189, 253, 16, 190, 51, 69, 130, 190, 174, 130, 161, 190, 253, 10, 156, 61, 31, 150, 121, 190, 109, 172, 157, 190, 164, 204, 25, 62, 104, 29, 94, 190, 165, 49, 73, 61, 212, 80, 93, 62, 200, 182, 138, 62, 209, 5, 116, 60, 208, 97, 204, 62, 182, 67, 249, 62, 100, 76, 103, 62, 81, 105, 12, 190, 239, 77, 34, 190, 248, 3, 175, 61, 130, 94, 62, 62, 99, 126, 60, 190, 26, 239, 85, 186, 135, 4, 171, 188, 99, 63, 33, 190, 209, 40, 59, 62, 236, 212, 140, 190, 43, 200, 173, 61, 27, 80, 147, 61, 21, 207, 27, 190, 33, 7, 144, 62, 163, 145, 159, 190, 172, 92, 134, 190, 253, 140, 151, 190, 9, 118, 31, 191, 190, 249, 39, 62, 14, 54, 106, 62, 252, 76, 225, 190, 194, 100, 162, 62, 124, 236, 30, 62, 220, 39, 77, 190, 245, 48, 132, 62, 66, 177, 193, 61, 161, 205, 97, 190, 249, 227, 114, 190, 119, 192, 225, 59, 237, 6, 17, 191, 175, 106, 16, 191, 85, 170, 162, 61, 36, 22, 33, 62, 186, 224, 42, 61, 84, 145, 23, 62, 179, 2, 105, 189, 19, 185, 51, 62, 39, 111, 72, 62, 220, 161, 194, 61, 227, 69, 43, 62, 245, 149, 105, 190, 79, 122, 82, 190, 55, 215, 94, 62, 144, 2, 93, 190, 158, 60, 62, 191, 178, 34, 161, 190, 207, 16, 48, 61, 211, 149, 74, 189, 10, 63, 49, 190, 228, 144, 207, 190, 135, 32, 201, 189, 219, 29, 125, 190, 166, 13, 179, 190, 235, 63, 207, 189, 190, 218, 166, 190, 190, 124, 23, 62, 170, 164, 25, 62, 223, 153, 134, 188, 226, 242, 156, 190, 7, 191, 251, 190, 29, 0, 188, 190, 71, 247, 35, 190, 171, 88, 149, 62, 179, 119, 104, 62, 49, 139, 23, 190, 239, 152, 22, 60, 202, 119, 105, 191, 149, 145, 68, 190, 243, 8, 191, 190, 207, 52, 158, 61, 225, 153, 58, 62, 204, 153, 60, 62, 26, 190, 218, 190, 255, 38, 208, 189, 12, 157, 24, 189, 232, 107, 97, 62, 231, 157, 41, 188, 83, 125, 12, 61, 185, 218, 25, 189, 137, 137, 185, 190, 207, 200, 193, 189, 137, 89, 38, 190, 61, 76, 251, 189, 254, 13, 149, 62, 76, 232, 94, 190, 178, 189, 205, 61, 109, 114, 4, 59, 72, 188, 141, 190, 141, 203, 76, 62, 108, 116, 143, 62, 12, 41, 105, 190, 219, 126, 2, 190, 29, 153, 88, 189, 15, 47, 182, 190, 38, 248, 172, 190, 190, 118, 34, 62, 29, 105, 146, 62, 36, 28, 99, 62, 98, 221, 30, 61, 71, 132, 42, 190, 167, 210, 68, 62, 75, 173, 185, 188, 35, 85, 167, 61, 177, 240, 56, 61, 192, 211, 186, 189, 85, 213, 212, 189, 170, 60, 213, 61, 69, 115, 141, 190, 204, 123, 17, 62, 85, 154, 14, 190, 216, 237, 128, 61, 142, 140, 246, 60, 155, 140, 248, 189, 176, 104, 53, 62, 207, 172, 145, 190, 79, 144, 159, 60, 206, 94, 240, 189, 193, 238, 47, 189, 66, 107, 51, 189, 221, 247, 136, 189, 204, 191, 29, 62, 141, 158, 174, 62, 103, 212, 36, 62, 210, 52, 135, 189, 211, 223, 14, 189, 15, 13, 39, 62, 122, 5, 1, 62, 70, 38, 239, 61, 85, 7, 128, 62, 118, 235, 102, 61, 216, 61, 111, 61, 108, 23, 222, 61, 83, 218, 25, 189, 38, 233, 42, 61, 65, 55, 57, 61, 117, 69, 242, 189, 242, 217, 106, 61, 193, 42, 89, 62, 209, 39, 205, 189, 190, 232, 158, 188, 144, 199, 164, 62, 80, 57, 5, 190, 206, 206, 143, 61, 211, 114, 242, 61, 2, 204, 32, 190, 130, 50, 43, 62, 76, 151, 5, 62, 92, 84, 102, 190, 249, 162, 113, 62, 138, 105, 78, 189, 23, 50, 172, 61, 51, 100, 113, 62, 105, 78, 197, 189, 151, 103, 6, 189, 138, 155, 240, 61, 155, 213, 26, 62, 183, 137, 161, 189, 190, 90, 162, 61, 80, 68, 58, 62, 40, 193, 223, 187, 90, 125, 170, 190, 101, 128, 76, 190, 66, 226, 9, 62, 157, 88, 81, 62, 200, 57, 156, 61, 213, 234, 247, 61, 9, 86, 136, 190, 159, 5, 207, 189, 176, 19, 146, 62, 22, 110, 71, 190, 113, 153, 21, 61, 162, 207, 111, 62, 186, 35, 22, 191, 6, 93, 13, 62, 71, 58, 41, 190, 42, 252, 147, 190, 133, 51, 25, 190, 24, 0, 24, 191, 155, 16, 164, 189, 146, 253, 191, 61, 156, 206, 164, 190, 225, 236, 101, 62, 189, 32, 70, 62, 238, 209, 181, 190, 79, 249, 128, 60, 24, 184, 177, 62, 192, 21, 85, 190, 126, 51, 126, 189, 142, 141, 103, 190, 216, 230, 93, 191, 115, 17, 146, 190, 151, 223, 246, 58, 194, 174, 125, 62, 235, 188, 224, 61, 184, 150, 135, 190, 48, 174, 43, 190, 46, 226, 172, 59, 140, 222, 45, 62, 29, 86, 232, 188, 165, 19, 23, 61, 47, 100, 6, 190, 128, 153, 190, 190, 138, 67, 35, 189, 251, 29, 237, 190, 228, 209, 233, 61, 85, 109, 49, 191, 15, 21, 109, 189, 248, 133, 89, 189, 106, 13, 9, 190, 178, 251, 73, 190, 169, 210, 200, 190, 142, 94, 94, 190, 220, 6, 62, 189, 98, 220, 88, 191, 168, 8, 251, 189, 99, 197, 1, 188, 160, 86, 122, 61, 255, 118, 7, 62, 191, 63, 15, 190, 220, 116, 60, 189, 91, 234, 199, 61, 196, 228, 142, 61, 65, 6, 10, 62, 221, 125, 129, 62, 82, 172, 138, 190, 111, 53, 247, 190, 206, 93, 165, 61, 62, 218, 19, 62, 198, 203, 34, 189, 191, 176, 176, 60, 40, 163, 230, 61, 33, 108, 127, 190, 4, 105, 231, 190, 98, 50, 69, 61, 223, 22, 29, 189, 44, 136, 184, 190, 2, 26, 45, 189, 59, 102, 92, 189, 138, 43, 124, 190, 39, 200, 86, 62, 72, 236, 222, 58, 214, 154, 91, 61, 102, 56, 51, 190, 212, 37, 132, 190, 119, 122, 108, 190, 148, 109, 222, 189, 89, 151, 70, 190, 124, 50, 193, 59, 148, 178, 22, 190, 109, 42, 120, 62, 228, 109, 123, 62, 152, 77, 89, 62, 139, 6, 243, 61, 195, 168, 144, 62, 159, 95, 102, 62, 70, 100, 71, 62, 217, 144, 198, 61, 69, 92, 226, 190, 113, 146, 152, 61, 63, 36, 151, 62, 207, 27, 203, 189, 109, 63, 123, 61, 39, 77, 146, 61, 33, 175, 180, 190, 131, 134, 4, 62, 43, 136, 5, 188, 144, 189, 14, 60, 163, 122, 34, 62, 208, 254, 140, 190, 143, 126, 41, 61, 174, 51, 217, 190, 243, 214, 240, 188, 135, 60, 190, 190, 28, 78, 13, 191, 243, 217, 86, 62, 142, 190, 1, 62, 179, 119, 132, 190, 104, 86, 175, 60, 215, 226, 75, 61, 131, 41, 17, 62, 181, 3, 136, 62, 190, 11, 88, 62, 12, 159, 47, 190, 92, 60, 58, 189, 178, 218, 22, 190, 25, 30, 153, 190, 163, 139, 139, 190, 2, 190, 239, 61, 174, 249, 146, 189, 91, 237, 86, 62, 101, 179, 30, 62, 51, 238, 73, 190, 57, 106, 139, 61, 174, 6, 140, 61, 2, 68, 2, 62, 188, 97, 148, 189, 180, 114, 255, 61, 29, 180, 2, 62, 210, 241, 143, 190, 68, 30, 236, 60, 90, 161, 2, 61, 148, 136, 51, 190, 120, 244, 26, 62, 247, 23, 130, 62, 232, 163, 5, 190, 76, 24, 92, 62, 17, 191, 69, 61, 173, 27, 13, 190, 172, 21, 97, 62, 144, 155, 143, 190, 182, 114, 222, 189, 208, 247, 103, 62, 201, 27, 210, 189, 194, 55, 208, 61, 118, 254, 30, 62, 76, 217, 187, 62, 173, 133, 30, 62, 176, 252, 199, 62, 182, 36, 77, 61, 226, 127, 25, 62, 228, 82, 77, 190, 153, 175, 197, 189, 176, 155, 113, 62, 39, 142, 202, 188, 200, 253, 227, 189, 69, 123, 122, 61, 183, 22, 113, 189, 126, 2, 100, 189, 81, 187, 33, 62, 149, 14, 200, 189, 253, 7, 201, 61, 34, 110, 88, 62, 230, 161, 124, 62, 122, 17, 188, 189, 115, 79, 172, 61, 72, 246, 239, 189, 249, 69, 84, 62, 53, 215, 38, 190, 137, 82, 189, 62, 135, 36, 168, 62, 19, 83, 196, 61, 220, 179, 162, 61, 94, 188, 7, 62, 221, 137, 66, 189, 195, 198, 187, 61, 245, 149, 172, 190, 14, 81, 71, 189, 130, 181, 5, 62, 210, 124, 98, 60, 62, 154, 81, 190, 45, 96, 174, 190, 210, 182, 100, 190, 16, 182, 22, 61, 147, 126, 13, 62, 208, 141, 124, 61, 10, 247, 175, 190, 86, 254, 178, 188, 87, 75, 162, 190, 42, 117, 239, 190, 62, 152, 148, 62, 23, 143, 191, 189, 13, 195, 72, 60, 166, 84, 67, 62, 183, 139, 235, 61, 113, 105, 240, 187, 193, 35, 22, 61, 68, 38, 32, 190, 197, 254, 138, 62, 93, 146, 105, 61, 225, 27, 155, 190, 153, 80, 130, 190, 224, 141, 205, 189, 245, 75, 45, 61, 172, 87, 159, 61, 254, 91, 156, 190, 54, 109, 29, 190, 196, 141, 146, 190, 238, 25, 37, 62, 46, 46, 62, 190, 25, 165, 160, 189, 107, 105, 217, 190, 40, 68, 237, 61, 19, 233, 172, 189, 252, 113, 2, 190, 72, 105, 3, 190, 227, 140, 217, 61, 48, 142, 143, 188, 65, 138, 185, 61, 235, 213, 134, 189, 6, 102, 97, 62, 167, 168, 137, 62, 194, 245, 100, 61, 223, 131, 161, 189, 130, 125, 180, 190, 193, 226, 53, 62, 108, 122, 233, 61, 158, 68, 39, 190, 48, 16, 194, 62, 151, 84, 192, 190, 237, 65, 138, 190, 204, 7, 137, 190, 25, 119, 26, 191, 207, 110, 49, 62, 113, 79, 226, 62, 9, 120, 241, 190, 69, 200, 214, 62, 224, 7, 202, 61, 125, 123, 39, 189, 248, 253, 147, 62, 26, 204, 59, 62, 91, 190, 105, 190, 176, 4, 132, 190, 23, 153, 32, 190, 35, 242, 131, 190, 83, 182, 22, 191, 143, 139, 90, 189, 190, 169, 69, 61, 212, 224, 83, 62, 130, 41, 44, 190, 150, 203, 93, 190, 133, 152, 47, 62, 152, 57, 133, 189, 126, 175, 209, 61, 30, 191, 223, 61, 164, 52, 130, 190, 183, 126, 150, 62, 224, 134, 56, 191, 79, 168, 133, 62, 181, 10, 208, 190, 255, 80, 149, 190, 207, 163, 241, 61, 247, 1, 136, 62, 136, 9, 232, 189, 63, 15, 34, 60, 124, 28, 77, 189, 151, 137, 227, 61, 87, 139, 150, 189, 25, 43, 141, 190, 29, 28, 128, 61, 190, 68, 139, 61, 218, 96, 78, 62, 195, 96, 145, 59, 166, 64, 193, 189, 51, 150, 161, 62, 241, 115, 33, 62, 219, 133, 151, 189, 192, 201, 49, 190, 253, 95, 136, 190, 86, 198, 43, 62, 153, 149, 135, 188, 82, 40, 19, 62, 136, 145, 128, 190, 65, 215, 183, 60, 241, 228, 35, 190, 11, 16, 0, 190, 127, 254, 172, 189, 215, 194, 142, 62, 62, 59, 132, 62, 46, 99, 49, 190, 136, 133, 232, 189, 75, 14, 60, 62, 165, 42, 109, 189, 90, 233, 151, 190, 81, 36, 161, 62, 174, 4, 211, 190, 245, 73, 150, 189, 137, 244, 224, 190, 21, 231, 69, 190, 217, 64, 41, 61, 157, 27, 164, 190, 148, 209, 196, 190, 213, 103, 77, 62, 178, 205, 247, 61, 169, 99, 135, 61, 195, 243, 65, 62, 72, 88, 154, 62, 102, 23, 74, 62, 218, 237, 13, 62, 229, 48, 105, 62, 66, 7, 54, 62, 158, 222, 36, 190, 144, 197, 243, 190, 143, 47, 44, 61, 184, 202, 110, 62, 79, 227, 145, 190, 205, 82, 9, 62, 140, 15, 66, 62, 80, 122, 149, 190, 7, 248, 76, 62, 219, 181, 114, 188, 239, 40, 154, 60, 70, 117, 188, 190, 243, 93, 204, 62, 53, 117, 33, 189, 170, 44, 40, 190, 208, 81, 132, 62, 254, 188, 109, 61, 46, 109, 195, 61, 68, 168, 122, 190, 135, 198, 116, 189, 91, 91, 225, 61, 220, 239, 59, 190, 228, 155, 41, 190, 224, 228, 96, 62, 74, 159, 173, 190, 80, 36, 14, 61, 114, 234, 133, 62, 197, 191, 92, 62, 26, 188, 142, 62, 168, 251, 73, 62, 154, 185, 147, 61, 161, 226, 170, 62, 145, 43, 210, 189, 30, 239, 0, 190, 212, 158, 154, 61, 137, 88, 163, 61, 26, 207, 165, 190, 147, 36, 238, 61, 79, 107, 125, 62, 245, 226, 15, 62, 105, 21, 83, 62, 226, 47, 157, 190, 205, 33, 187, 62, 191, 157, 187, 62, 12, 16, 146, 190, 183, 175, 174, 62, 36, 43, 62, 62, 7, 121, 234, 190, 24, 30, 81, 190, 52, 50, 35, 190, 10, 87, 66, 62, 179, 196, 131, 62, 54, 40, 139, 190, 96, 128, 75, 62, 225, 253, 180, 61, 48, 147, 171, 190, 7, 54, 165, 62, 87, 227, 69, 189, 217, 183, 120, 190, 139, 52, 128, 190, 36, 29, 163, 57, 121, 251, 103, 190, 129, 52, 147, 190, 18, 239, 22, 62, 4, 230, 100, 62, 229, 161, 121, 62, 73, 18, 100, 188, 83, 226, 194, 190, 236, 116, 106, 62, 11, 172, 238, 189, 99, 169, 172, 189, 229, 189, 7, 62, 253, 91, 198, 189, 131, 208, 181, 190, 159, 120, 27, 62, 30, 185, 10, 62, 128, 4, 65, 191, 181, 94, 196, 190, 224, 251, 137, 190, 195, 195, 59, 189, 83, 215, 139, 190, 252, 157, 191, 189, 188, 111, 157, 61, 166, 81, 228, 189, 55, 214, 166, 190, 128, 66, 250, 189, 201, 87, 252, 61, 3, 101, 204, 186, 238, 237, 156, 58, 230, 237, 30, 62, 161, 167, 174, 61, 79, 0, 101, 191, 203, 214, 235, 188, 237, 117, 255, 190, 159, 89, 136, 61, 33, 176, 2, 189, 137, 141, 103, 190, 250, 185, 64, 62, 247, 143, 168, 190, 225, 148, 174, 190, 235, 112, 9, 190, 143, 103, 191, 188, 72, 40, 169, 62, 130, 8, 113, 62, 121, 46, 169, 190, 53, 107, 94, 190, 65, 254, 59, 62, 112, 243, 173, 62, 136, 89, 139, 190, 224, 22, 181, 62, 54, 243, 203, 61, 65, 130, 142, 190, 117, 234, 56, 60, 216, 56, 248, 61, 13, 230, 158, 61, 42, 52, 46, 62, 19, 68, 4, 191, 96, 19, 8, 62, 158, 104, 229, 188, 143, 243, 66, 190, 2, 112, 145, 62, 9, 23, 132, 61, 225, 236, 19, 190, 66, 126, 144, 190, 126, 91, 10, 189, 217, 231, 58, 190, 121, 249, 12, 190, 25, 18, 156, 189, 133, 60, 183, 61, 40, 70, 10, 62, 250, 218, 134, 189, 91, 96, 121, 190, 220, 92, 50, 62, 235, 186, 103, 62, 16, 15, 152, 186, 255, 129, 21, 62, 123, 236, 141, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {36, 180, 98, 62, 231, 166, 42, 189, 163, 43, 141, 62, 95, 41, 74, 190, 48, 28, 0, 62, 5, 22, 168, 61, 161, 131, 112, 62, 239, 156, 82, 62, 219, 65, 4, 190, 3, 225, 60, 62, 16, 86, 216, 189, 31, 82, 85, 62, 183, 156, 106, 189, 234, 62, 78, 61, 78, 104, 255, 61, 110, 219, 148, 188, 182, 238, 59, 62, 133, 38, 203, 189, 185, 47, 99, 62, 25, 73, 83, 62, 118, 146, 170, 189, 65, 216, 83, 61, 178, 142, 65, 190, 35, 104, 185, 190, 2, 141, 158, 189, 50, 173, 43, 62, 5, 131, 228, 61, 13, 31, 225, 61, 181, 95, 108, 188, 139, 176, 177, 61, 122, 49, 157, 61, 111, 186, 63, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 58, 30, 62, 240, 87, 82, 189, 241, 244, 135, 188, 70, 104, 36, 62, 67, 239, 4, 61, 50, 84, 146, 62, 144, 91, 205, 60, 94, 170, 57, 63, 67, 110, 85, 189, 134, 0, 207, 62, 76, 236, 131, 60, 18, 31, 13, 191, 136, 177, 198, 62, 234, 179, 206, 190, 206, 231, 3, 191, 52, 164, 136, 190, 115, 66, 173, 61, 8, 102, 155, 190, 84, 23, 12, 191, 212, 110, 12, 63, 175, 9, 233, 62, 85, 28, 133, 190, 59, 23, 123, 190, 25, 59, 56, 63, 7, 137, 88, 190, 35, 97, 254, 190, 221, 5, 172, 190, 14, 221, 209, 62, 213, 6, 151, 62, 118, 199, 112, 190, 216, 114, 27, 191, 85, 101, 97, 190, 64, 28, 130, 58, 139, 99, 34, 62, 142, 40, 71, 191, 199, 149, 80, 189, 145, 87, 169, 190, 200, 155, 63, 190, 11, 0, 128, 190, 119, 201, 142, 188, 117, 175, 8, 190, 203, 0, 97, 189, 104, 120, 56, 62, 216, 116, 96, 62, 197, 40, 136, 62, 212, 155, 97, 189, 141, 119, 214, 61, 239, 12, 241, 189, 154, 123, 87, 190, 202, 251, 10, 189, 144, 123, 141, 190, 223, 33, 0, 190, 111, 24, 6, 62, 232, 163, 189, 189, 199, 86, 56, 189, 177, 198, 171, 62, 103, 110, 254, 61, 238, 224, 71, 62, 121, 254, 16, 62, 106, 249, 196, 61, 97, 41, 68, 62, 219, 128, 80, 62, 167, 32, 138, 61, 58, 201, 249, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {88, 213, 220, 189, 40, 132, 166, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {145, 246, 190, 191, 253, 225, 148, 63, 74, 83, 245, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {227, 128, 8, 64, 103, 49, 54, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0004/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}