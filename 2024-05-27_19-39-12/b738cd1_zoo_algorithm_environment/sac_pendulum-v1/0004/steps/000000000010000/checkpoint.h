// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 110, 11, 63, 182, 164, 41, 62, 175, 71, 192, 190, 41, 106, 61, 190, 183, 206, 106, 191, 118, 184, 249, 59, 168, 214, 160, 62, 132, 149, 103, 63, 103, 53, 82, 62, 206, 130, 177, 190, 57, 84, 63, 190, 249, 157, 241, 62, 139, 161, 255, 190, 81, 186, 149, 62, 139, 3, 38, 191, 228, 207, 117, 62, 22, 247, 141, 63, 18, 30, 7, 62, 92, 52, 2, 63, 211, 140, 241, 190, 225, 87, 132, 190, 199, 6, 17, 63, 19, 241, 49, 63, 98, 213, 150, 62, 106, 155, 248, 189, 55, 159, 97, 63, 50, 29, 63, 62, 63, 124, 60, 63, 78, 49, 60, 63, 205, 84, 153, 62, 251, 98, 32, 63, 196, 186, 179, 62, 152, 41, 174, 62, 229, 46, 15, 190, 96, 78, 50, 191, 5, 206, 107, 190, 50, 235, 40, 191, 222, 59, 3, 189, 73, 131, 149, 190, 197, 52, 84, 62, 163, 209, 61, 63, 240, 251, 198, 62, 66, 28, 57, 190, 243, 28, 174, 189, 46, 128, 36, 62, 133, 116, 175, 62, 13, 125, 8, 63, 87, 226, 192, 61, 6, 27, 196, 189, 178, 121, 217, 189, 87, 209, 74, 189, 188, 203, 0, 191, 73, 49, 116, 63, 127, 124, 133, 62, 138, 25, 57, 190, 132, 232, 48, 63, 110, 131, 130, 190, 174, 49, 83, 59, 215, 106, 141, 63, 126, 223, 201, 61, 213, 175, 207, 62, 212, 144, 103, 191, 84, 19, 246, 61, 184, 30, 187, 190, 127, 238, 147, 63, 213, 158, 127, 62, 145, 169, 190, 189, 138, 23, 2, 191, 247, 246, 108, 62, 113, 23, 90, 61, 158, 102, 223, 62, 11, 173, 163, 190, 162, 136, 44, 191, 223, 84, 141, 191, 209, 152, 225, 190, 109, 65, 28, 62, 203, 7, 58, 63, 19, 69, 128, 62, 122, 93, 238, 62, 94, 215, 148, 191, 62, 224, 138, 190, 173, 111, 141, 62, 234, 112, 60, 63, 132, 116, 31, 62, 26, 142, 67, 61, 93, 97, 80, 191, 8, 31, 226, 189, 170, 65, 102, 191, 4, 39, 232, 62, 14, 85, 172, 61, 64, 226, 241, 190, 231, 107, 162, 191, 221, 242, 148, 190, 220, 189, 63, 190, 127, 54, 235, 62, 94, 241, 235, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 144, 127, 191, 79, 27, 159, 62, 114, 122, 68, 189, 152, 77, 13, 191, 150, 56, 160, 60, 240, 45, 193, 190, 3, 114, 152, 190, 159, 57, 106, 191, 168, 40, 153, 190, 221, 171, 32, 191, 216, 38, 253, 190, 13, 58, 221, 59, 213, 120, 101, 188, 162, 174, 130, 190, 197, 1, 156, 190, 130, 81, 61, 62, 150, 29, 24, 63, 240, 88, 82, 189, 198, 245, 50, 62, 216, 159, 205, 189, 1, 250, 43, 190, 66, 215, 189, 190, 20, 127, 29, 63, 191, 116, 255, 62, 162, 231, 113, 189, 111, 233, 244, 188, 12, 40, 129, 62, 129, 55, 180, 187, 211, 38, 215, 62, 205, 239, 208, 62, 3, 41, 224, 61, 169, 202, 189, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 59, 129, 62, 147, 127, 159, 189, 198, 225, 191, 190, 174, 145, 189, 61, 0, 167, 83, 189, 209, 27, 133, 189, 104, 239, 157, 62, 44, 163, 68, 190, 119, 158, 29, 62, 108, 210, 134, 190, 166, 57, 105, 190, 46, 141, 59, 62, 174, 168, 118, 188, 234, 86, 93, 189, 192, 71, 208, 60, 43, 80, 5, 62, 35, 105, 140, 189, 109, 17, 5, 62, 106, 135, 134, 62, 33, 209, 52, 189, 9, 179, 148, 188, 6, 107, 97, 62, 213, 232, 27, 62, 150, 193, 195, 61, 146, 227, 74, 188, 238, 52, 75, 61, 109, 93, 214, 60, 27, 132, 158, 189, 140, 218, 92, 189, 111, 164, 78, 190, 200, 69, 6, 191, 253, 222, 102, 188, 9, 173, 33, 62, 183, 34, 47, 190, 159, 167, 1, 190, 227, 224, 65, 59, 204, 13, 5, 190, 229, 33, 152, 61, 167, 235, 171, 61, 202, 89, 34, 190, 65, 212, 97, 61, 116, 213, 207, 188, 7, 173, 98, 188, 205, 46, 225, 61, 172, 133, 81, 189, 116, 141, 236, 61, 84, 243, 169, 189, 13, 56, 126, 61, 247, 133, 22, 62, 15, 206, 161, 189, 234, 75, 179, 61, 28, 177, 172, 189, 241, 211, 36, 190, 221, 88, 101, 61, 91, 15, 175, 189, 180, 106, 25, 190, 94, 196, 19, 189, 228, 51, 129, 60, 140, 144, 180, 189, 217, 179, 141, 189, 61, 21, 80, 189, 37, 128, 44, 60, 125, 78, 52, 190, 203, 58, 21, 190, 70, 238, 44, 62, 203, 249, 206, 190, 104, 113, 0, 190, 226, 130, 247, 60, 80, 239, 177, 190, 115, 125, 241, 190, 191, 121, 32, 190, 136, 222, 129, 61, 231, 121, 49, 62, 154, 219, 150, 189, 143, 247, 157, 62, 237, 102, 20, 191, 95, 164, 129, 190, 237, 209, 5, 190, 230, 172, 39, 190, 153, 171, 243, 62, 231, 30, 79, 62, 56, 194, 169, 61, 252, 27, 107, 189, 29, 87, 34, 190, 222, 22, 2, 190, 236, 40, 206, 190, 35, 28, 146, 62, 153, 107, 56, 62, 87, 180, 26, 191, 42, 129, 17, 62, 140, 183, 108, 62, 74, 225, 5, 62, 127, 238, 58, 61, 206, 8, 207, 189, 170, 171, 163, 191, 190, 14, 144, 61, 249, 165, 77, 62, 48, 244, 81, 189, 114, 169, 241, 189, 132, 139, 144, 188, 128, 232, 132, 61, 154, 193, 140, 61, 213, 39, 121, 189, 111, 195, 33, 62, 72, 231, 24, 190, 132, 106, 195, 189, 96, 212, 227, 60, 154, 248, 189, 61, 78, 134, 34, 189, 168, 54, 219, 189, 131, 22, 59, 190, 181, 212, 174, 190, 66, 200, 243, 57, 244, 42, 32, 190, 236, 117, 12, 62, 206, 54, 185, 61, 72, 25, 83, 190, 237, 229, 103, 190, 89, 158, 7, 191, 39, 226, 117, 190, 82, 122, 49, 62, 44, 237, 69, 61, 77, 200, 188, 188, 243, 153, 21, 190, 167, 250, 164, 189, 108, 115, 55, 190, 195, 73, 9, 190, 255, 250, 223, 189, 225, 174, 110, 190, 66, 71, 26, 190, 90, 163, 107, 189, 178, 91, 255, 61, 48, 169, 162, 190, 98, 160, 37, 190, 68, 231, 150, 190, 18, 21, 66, 190, 89, 192, 209, 61, 114, 62, 199, 189, 143, 134, 15, 62, 9, 247, 29, 62, 127, 187, 172, 190, 237, 222, 35, 189, 195, 6, 246, 189, 177, 251, 139, 62, 148, 130, 63, 62, 20, 235, 217, 189, 55, 244, 193, 189, 144, 192, 6, 62, 207, 171, 96, 190, 140, 215, 64, 62, 106, 116, 60, 62, 7, 125, 232, 189, 186, 116, 114, 190, 69, 241, 184, 61, 111, 196, 51, 62, 73, 52, 26, 190, 178, 129, 164, 61, 105, 153, 33, 190, 222, 45, 8, 190, 115, 39, 87, 61, 211, 125, 194, 61, 125, 20, 69, 62, 58, 108, 239, 190, 144, 219, 101, 189, 226, 67, 41, 189, 160, 62, 192, 61, 47, 129, 133, 61, 45, 253, 1, 191, 52, 231, 37, 62, 192, 67, 99, 191, 177, 14, 202, 190, 15, 152, 121, 62, 69, 252, 50, 190, 99, 235, 20, 190, 92, 65, 232, 60, 123, 54, 151, 188, 127, 55, 173, 62, 209, 171, 1, 62, 32, 210, 76, 62, 32, 93, 63, 62, 66, 155, 88, 62, 243, 213, 70, 62, 59, 198, 153, 62, 4, 232, 72, 62, 174, 219, 2, 61, 21, 33, 134, 189, 149, 10, 49, 61, 119, 212, 16, 189, 49, 17, 125, 62, 245, 83, 101, 62, 129, 120, 12, 62, 9, 178, 182, 61, 203, 59, 59, 62, 209, 58, 67, 61, 164, 159, 52, 190, 158, 77, 198, 188, 244, 60, 255, 61, 154, 85, 233, 61, 29, 101, 190, 189, 21, 121, 126, 190, 224, 9, 7, 62, 10, 106, 138, 190, 210, 3, 142, 60, 233, 134, 248, 61, 234, 214, 27, 190, 152, 223, 209, 189, 167, 148, 76, 189, 15, 9, 110, 62, 74, 150, 84, 62, 215, 122, 117, 61, 146, 23, 183, 61, 0, 194, 211, 189, 5, 30, 254, 61, 65, 27, 67, 61, 141, 210, 181, 61, 194, 36, 6, 62, 223, 6, 225, 188, 238, 55, 249, 189, 14, 4, 101, 188, 81, 252, 79, 62, 254, 21, 74, 62, 187, 221, 238, 189, 195, 224, 132, 61, 90, 72, 201, 61, 115, 151, 102, 190, 83, 180, 14, 191, 255, 17, 186, 190, 116, 176, 47, 190, 24, 231, 135, 190, 255, 2, 153, 191, 118, 196, 8, 62, 145, 26, 246, 61, 153, 239, 141, 190, 2, 235, 11, 190, 127, 224, 132, 61, 176, 157, 143, 188, 46, 79, 2, 191, 36, 202, 50, 191, 99, 6, 171, 190, 228, 249, 26, 62, 43, 0, 50, 62, 108, 236, 6, 61, 188, 64, 210, 61, 172, 41, 54, 62, 191, 225, 150, 62, 214, 109, 24, 63, 255, 176, 19, 189, 147, 82, 11, 62, 43, 252, 10, 191, 35, 33, 87, 190, 203, 205, 230, 61, 227, 188, 114, 190, 250, 240, 164, 61, 80, 173, 124, 62, 113, 69, 252, 190, 235, 117, 175, 189, 79, 54, 57, 190, 193, 155, 227, 61, 76, 204, 5, 61, 135, 8, 112, 189, 177, 252, 106, 61, 99, 110, 34, 62, 175, 148, 37, 190, 95, 66, 27, 62, 248, 173, 3, 190, 38, 62, 148, 189, 58, 247, 134, 60, 185, 177, 54, 61, 95, 169, 88, 189, 213, 45, 24, 190, 162, 141, 236, 61, 21, 69, 201, 188, 206, 86, 103, 188, 33, 73, 36, 190, 140, 6, 43, 187, 19, 62, 30, 61, 109, 145, 212, 61, 201, 12, 23, 190, 175, 217, 241, 189, 185, 95, 142, 189, 62, 22, 131, 61, 89, 17, 44, 61, 175, 168, 59, 189, 120, 9, 178, 189, 73, 10, 159, 189, 84, 45, 219, 189, 126, 213, 54, 188, 47, 223, 210, 189, 2, 186, 117, 62, 4, 205, 38, 189, 235, 250, 199, 190, 69, 101, 224, 61, 182, 230, 111, 190, 55, 235, 168, 189, 214, 167, 62, 62, 147, 51, 217, 190, 76, 78, 150, 62, 239, 27, 114, 191, 92, 132, 236, 190, 162, 52, 240, 189, 239, 90, 82, 190, 233, 245, 150, 190, 166, 247, 182, 61, 169, 207, 85, 60, 117, 251, 20, 62, 56, 23, 25, 62, 142, 227, 86, 62, 216, 227, 215, 61, 234, 206, 176, 62, 248, 55, 231, 62, 112, 38, 123, 62, 88, 245, 163, 189, 128, 210, 237, 190, 165, 236, 75, 60, 24, 218, 184, 62, 192, 213, 203, 189, 175, 188, 123, 62, 80, 53, 112, 189, 21, 124, 21, 189, 54, 132, 22, 61, 121, 247, 8, 190, 175, 181, 29, 190, 75, 20, 143, 189, 10, 71, 167, 189, 5, 20, 79, 61, 50, 90, 198, 189, 192, 66, 178, 189, 244, 244, 18, 190, 101, 62, 218, 189, 21, 180, 20, 188, 230, 243, 81, 190, 177, 148, 189, 60, 27, 78, 166, 57, 222, 243, 71, 190, 50, 23, 65, 61, 158, 170, 23, 62, 6, 170, 17, 190, 111, 203, 236, 188, 96, 26, 196, 188, 139, 102, 0, 62, 36, 233, 34, 190, 55, 203, 76, 61, 99, 23, 4, 62, 158, 154, 117, 190, 143, 239, 209, 189, 236, 246, 25, 188, 235, 230, 147, 60, 107, 7, 80, 61, 200, 61, 77, 190, 183, 161, 212, 61, 125, 14, 90, 60, 43, 93, 113, 187, 99, 90, 233, 190, 15, 45, 21, 62, 51, 175, 186, 62, 50, 88, 154, 190, 133, 225, 63, 62, 79, 42, 46, 190, 182, 200, 87, 190, 211, 6, 130, 191, 213, 193, 43, 191, 217, 171, 176, 62, 218, 140, 94, 62, 1, 199, 193, 190, 209, 216, 97, 62, 74, 76, 201, 62, 142, 87, 22, 188, 111, 72, 176, 62, 232, 83, 209, 59, 170, 247, 119, 190, 216, 52, 199, 189, 227, 10, 133, 61, 186, 220, 164, 190, 76, 133, 248, 190, 165, 30, 141, 61, 30, 253, 42, 61, 38, 183, 131, 62, 13, 77, 100, 61, 46, 113, 103, 190, 9, 175, 235, 61, 170, 206, 244, 189, 188, 89, 48, 61, 208, 250, 52, 62, 211, 232, 69, 190, 157, 79, 5, 63, 113, 135, 173, 188, 32, 135, 238, 190, 201, 227, 255, 61, 119, 97, 219, 189, 13, 129, 105, 190, 148, 234, 248, 62, 250, 57, 42, 191, 85, 183, 254, 61, 65, 227, 104, 191, 142, 133, 15, 191, 32, 225, 186, 61, 50, 186, 140, 190, 145, 33, 167, 190, 152, 109, 139, 61, 55, 16, 182, 190, 114, 178, 161, 60, 184, 99, 129, 62, 66, 57, 146, 62, 180, 244, 4, 62, 166, 2, 13, 63, 206, 240, 26, 63, 193, 173, 144, 62, 149, 173, 19, 190, 136, 28, 21, 190, 254, 71, 88, 61, 47, 36, 131, 62, 253, 81, 211, 190, 23, 90, 226, 60, 182, 244, 249, 189, 80, 100, 56, 190, 157, 107, 93, 62, 12, 222, 252, 190, 142, 98, 112, 61, 25, 9, 35, 62, 41, 204, 11, 190, 118, 112, 139, 62, 23, 209, 162, 189, 190, 173, 167, 190, 231, 106, 86, 191, 169, 99, 93, 191, 200, 58, 137, 62, 236, 178, 150, 62, 248, 227, 221, 190, 64, 165, 161, 62, 185, 146, 148, 62, 84, 10, 37, 190, 79, 236, 148, 62, 174, 139, 170, 61, 54, 73, 19, 190, 141, 200, 95, 190, 69, 176, 43, 62, 66, 76, 240, 190, 221, 43, 244, 190, 141, 103, 1, 61, 99, 52, 19, 62, 122, 217, 24, 61, 139, 68, 91, 62, 14, 35, 152, 189, 50, 137, 126, 62, 246, 218, 45, 62, 72, 134, 139, 61, 76, 96, 47, 62, 235, 17, 128, 190, 79, 122, 82, 190, 255, 135, 19, 62, 78, 216, 99, 190, 132, 131, 74, 191, 228, 56, 66, 190, 207, 16, 48, 61, 0, 51, 76, 61, 10, 63, 49, 190, 65, 123, 49, 191, 0, 61, 210, 189, 58, 156, 143, 190, 239, 236, 39, 191, 166, 88, 165, 189, 59, 85, 5, 191, 70, 128, 237, 61, 143, 152, 164, 62, 40, 243, 202, 188, 3, 67, 213, 189, 8, 242, 170, 190, 149, 251, 225, 190, 80, 37, 168, 189, 240, 221, 244, 62, 160, 115, 68, 62, 235, 10, 139, 188, 181, 137, 61, 190, 93, 19, 141, 191, 86, 209, 24, 190, 139, 255, 211, 190, 3, 115, 215, 60, 255, 178, 64, 62, 54, 227, 70, 61, 43, 198, 221, 190, 198, 56, 48, 190, 190, 114, 255, 189, 41, 195, 141, 62, 8, 54, 210, 58, 43, 150, 197, 60, 181, 82, 152, 61, 21, 132, 227, 190, 106, 35, 18, 191, 167, 77, 205, 190, 161, 193, 21, 189, 192, 140, 189, 62, 208, 227, 164, 190, 227, 25, 130, 61, 109, 174, 198, 61, 105, 190, 123, 190, 41, 207, 103, 62, 137, 69, 123, 62, 245, 147, 105, 190, 71, 21, 189, 189, 224, 11, 225, 60, 75, 75, 62, 190, 239, 77, 177, 190, 171, 240, 251, 61, 159, 188, 137, 62, 21, 26, 254, 61, 152, 183, 168, 61, 50, 205, 88, 190, 152, 237, 120, 62, 68, 213, 183, 189, 193, 126, 221, 188, 117, 229, 205, 189, 252, 135, 175, 189, 70, 244, 129, 188, 247, 180, 25, 62, 102, 196, 189, 190, 41, 196, 180, 61, 31, 47, 213, 189, 14, 157, 20, 61, 169, 220, 1, 61, 226, 165, 240, 190, 165, 46, 123, 62, 46, 201, 26, 191, 55, 35, 168, 189, 61, 143, 153, 189, 230, 171, 65, 189, 50, 120, 201, 189, 60, 188, 203, 189, 228, 248, 1, 62, 212, 30, 173, 62, 223, 206, 13, 62, 92, 232, 165, 189, 69, 88, 169, 189, 35, 179, 91, 62, 90, 142, 197, 61, 196, 195, 12, 62, 31, 221, 125, 62, 168, 109, 210, 61, 253, 106, 5, 61, 165, 39, 227, 61, 84, 85, 228, 189, 72, 137, 112, 61, 83, 200, 171, 60, 186, 170, 0, 190, 138, 118, 176, 61, 57, 72, 221, 62, 32, 32, 129, 189, 253, 139, 185, 60, 175, 22, 235, 62, 89, 20, 29, 190, 81, 98, 194, 188, 181, 230, 82, 62, 48, 143, 89, 190, 99, 189, 56, 62, 219, 163, 194, 62, 118, 67, 140, 189, 243, 242, 121, 62, 199, 9, 23, 190, 107, 146, 45, 62, 136, 34, 180, 62, 157, 154, 13, 190, 94, 241, 201, 189, 142, 66, 20, 62, 250, 80, 37, 62, 102, 135, 231, 189, 144, 140, 71, 62, 127, 63, 76, 62, 74, 159, 44, 61, 68, 153, 175, 190, 43, 30, 136, 190, 22, 64, 72, 62, 26, 251, 124, 62, 187, 70, 204, 61, 195, 241, 219, 61, 125, 158, 141, 190, 28, 13, 216, 189, 219, 233, 156, 62, 63, 95, 165, 190, 68, 101, 24, 187, 64, 246, 88, 62, 65, 68, 29, 191, 108, 108, 25, 62, 116, 13, 83, 62, 4, 164, 145, 190, 255, 184, 175, 189, 187, 125, 142, 191, 113, 2, 68, 190, 154, 179, 66, 187, 63, 30, 139, 190, 53, 208, 89, 62, 76, 65, 15, 62, 189, 214, 167, 190, 165, 6, 146, 188, 93, 35, 165, 62, 238, 178, 121, 190, 168, 14, 60, 189, 145, 22, 212, 189, 81, 11, 94, 191, 88, 130, 146, 190, 91, 198, 177, 189, 233, 68, 115, 62, 70, 159, 252, 61, 17, 75, 178, 190, 22, 128, 23, 190, 254, 151, 144, 188, 175, 155, 45, 62, 79, 42, 140, 189, 193, 192, 174, 61, 25, 3, 5, 190, 248, 150, 176, 190, 90, 253, 48, 189, 29, 117, 208, 190, 28, 61, 171, 61, 222, 226, 33, 191, 228, 112, 80, 62, 114, 106, 245, 189, 43, 41, 53, 191, 226, 64, 181, 188, 218, 235, 45, 191, 134, 206, 160, 190, 201, 30, 19, 191, 87, 123, 129, 191, 40, 210, 31, 190, 228, 78, 12, 189, 216, 117, 234, 61, 154, 5, 39, 62, 218, 208, 194, 189, 18, 28, 229, 60, 189, 156, 92, 62, 22, 135, 197, 187, 242, 26, 67, 62, 44, 100, 124, 62, 240, 101, 78, 190, 42, 160, 6, 191, 161, 214, 191, 61, 96, 12, 1, 62, 245, 214, 108, 60, 24, 131, 214, 60, 246, 179, 94, 62, 100, 238, 20, 191, 115, 153, 198, 190, 60, 1, 15, 62, 189, 115, 64, 189, 146, 81, 179, 190, 74, 101, 65, 189, 56, 134, 178, 189, 116, 202, 146, 190, 35, 223, 123, 62, 192, 143, 178, 190, 93, 171, 125, 62, 229, 118, 194, 190, 226, 206, 159, 190, 48, 146, 130, 190, 36, 70, 65, 190, 153, 18, 60, 190, 208, 58, 14, 188, 105, 25, 224, 189, 59, 215, 110, 62, 224, 196, 148, 62, 238, 35, 12, 62, 87, 77, 27, 62, 94, 139, 95, 62, 41, 128, 153, 62, 15, 253, 77, 62, 89, 59, 197, 61, 172, 57, 245, 190, 165, 214, 9, 62, 191, 142, 157, 62, 255, 67, 168, 189, 110, 185, 82, 61, 218, 217, 250, 188, 207, 103, 52, 191, 20, 198, 186, 61, 197, 160, 20, 190, 244, 71, 80, 189, 58, 254, 127, 62, 144, 154, 113, 190, 50, 125, 227, 60, 6, 184, 84, 190, 6, 140, 215, 189, 34, 216, 80, 191, 116, 125, 67, 191, 70, 118, 176, 62, 139, 242, 97, 62, 249, 159, 144, 190, 159, 54, 46, 59, 64, 210, 68, 62, 99, 93, 83, 62, 133, 195, 152, 62, 192, 213, 63, 62, 14, 223, 5, 190, 69, 108, 137, 188, 233, 25, 239, 187, 30, 239, 23, 190, 159, 189, 91, 190, 91, 56, 159, 61, 253, 32, 177, 189, 166, 144, 53, 62, 44, 102, 106, 62, 18, 210, 99, 190, 82, 46, 21, 62, 25, 169, 200, 60, 44, 251, 128, 61, 27, 42, 225, 189, 111, 90, 238, 61, 93, 4, 146, 62, 49, 253, 133, 190, 132, 65, 202, 60, 244, 213, 35, 62, 254, 235, 105, 190, 64, 21, 121, 58, 97, 39, 201, 62, 22, 154, 67, 190, 64, 129, 66, 62, 186, 77, 116, 62, 221, 210, 49, 188, 36, 10, 129, 62, 83, 81, 172, 190, 110, 249, 85, 189, 246, 254, 171, 62, 35, 93, 22, 190, 176, 2, 115, 61, 178, 20, 31, 62, 122, 190, 178, 62, 96, 239, 148, 61, 112, 67, 249, 62, 105, 104, 50, 61, 108, 19, 47, 62, 86, 10, 59, 190, 50, 125, 31, 190, 30, 147, 128, 62, 162, 243, 230, 60, 240, 150, 1, 190, 185, 78, 93, 61, 2, 97, 166, 189, 9, 181, 28, 189, 13, 106, 15, 62, 149, 14, 200, 189, 111, 129, 78, 190, 71, 22, 146, 62, 95, 27, 76, 62, 28, 179, 171, 189, 90, 152, 230, 61, 72, 246, 239, 189, 176, 97, 192, 62, 9, 119, 138, 190, 50, 247, 4, 63, 206, 220, 233, 62, 19, 83, 196, 61, 220, 179, 162, 61, 194, 130, 34, 62, 69, 78, 207, 189, 120, 243, 114, 62, 35, 178, 159, 190, 212, 86, 235, 189, 213, 248, 225, 188, 110, 39, 79, 60, 126, 70, 187, 190, 59, 221, 223, 190, 34, 132, 118, 190, 64, 122, 217, 189, 147, 126, 13, 62, 5, 39, 190, 61, 10, 210, 137, 190, 126, 74, 113, 61, 239, 192, 14, 191, 154, 254, 65, 191, 62, 152, 148, 62, 72, 141, 179, 189, 13, 10, 142, 59, 117, 40, 3, 62, 72, 109, 128, 62, 149, 232, 32, 62, 19, 242, 41, 188, 79, 47, 141, 190, 79, 50, 229, 62, 224, 190, 101, 61, 61, 37, 11, 191, 19, 78, 180, 190, 73, 61, 141, 190, 176, 69, 110, 61, 0, 31, 130, 58, 228, 47, 170, 190, 10, 142, 79, 189, 191, 247, 96, 190, 137, 114, 60, 62, 205, 165, 15, 62, 115, 236, 23, 190, 240, 68, 20, 191, 111, 96, 143, 61, 9, 240, 125, 62, 186, 179, 41, 190, 242, 18, 28, 190, 20, 3, 120, 61, 78, 245, 184, 189, 64, 251, 128, 62, 221, 131, 240, 60, 221, 221, 147, 62, 85, 180, 93, 62, 29, 154, 82, 61, 190, 48, 236, 189, 116, 213, 32, 191, 255, 118, 15, 62, 17, 193, 63, 62, 68, 176, 35, 190, 222, 1, 184, 62, 197, 94, 70, 189, 91, 53, 166, 190, 134, 168, 52, 191, 96, 4, 162, 191, 210, 75, 146, 62, 131, 74, 1, 63, 53, 245, 230, 190, 35, 215, 210, 62, 196, 249, 82, 62, 131, 67, 192, 188, 194, 233, 161, 62, 18, 93, 52, 62, 152, 72, 60, 190, 150, 224, 111, 190, 13, 206, 23, 61, 235, 118, 90, 190, 17, 126, 9, 191, 85, 182, 244, 189, 46, 20, 35, 61, 10, 211, 84, 62, 111, 83, 8, 190, 11, 197, 103, 190, 39, 66, 111, 62, 234, 94, 164, 189, 232, 190, 173, 61, 18, 36, 21, 62, 34, 210, 146, 190, 55, 156, 10, 62, 95, 213, 80, 191, 227, 170, 125, 62, 147, 114, 18, 191, 107, 60, 134, 190, 164, 185, 154, 62, 160, 90, 156, 60, 27, 131, 156, 189, 205, 252, 221, 189, 90, 87, 50, 189, 213, 134, 54, 61, 177, 64, 50, 190, 24, 65, 60, 190, 195, 148, 236, 185, 84, 104, 190, 188, 193, 21, 23, 62, 243, 44, 18, 188, 81, 194, 71, 190, 224, 159, 210, 62, 116, 205, 128, 62, 48, 196, 193, 189, 218, 227, 129, 190, 2, 23, 211, 190, 24, 55, 70, 62, 133, 2, 221, 188, 141, 128, 107, 61, 49, 221, 218, 190, 5, 9, 173, 59, 187, 179, 130, 190, 98, 99, 155, 61, 45, 220, 89, 189, 68, 38, 152, 62, 133, 164, 223, 62, 81, 108, 79, 190, 48, 84, 204, 189, 197, 2, 40, 62, 23, 118, 29, 60, 31, 58, 158, 190, 38, 63, 177, 62, 59, 77, 70, 191, 79, 90, 240, 61, 232, 125, 36, 191, 176, 206, 118, 190, 198, 137, 165, 61, 238, 60, 149, 190, 41, 79, 192, 190, 198, 223, 47, 62, 216, 143, 40, 62, 45, 202, 79, 61, 59, 119, 79, 62, 202, 254, 151, 62, 234, 147, 106, 62, 10, 175, 120, 61, 61, 122, 143, 62, 3, 28, 57, 62, 57, 15, 12, 190, 17, 247, 209, 190, 218, 178, 207, 61, 139, 102, 104, 62, 147, 36, 135, 190, 163, 95, 240, 61, 85, 127, 86, 61, 222, 228, 252, 190, 71, 243, 135, 62, 52, 231, 246, 61, 101, 207, 190, 59, 61, 38, 217, 190, 75, 24, 66, 62, 227, 77, 249, 188, 24, 48, 182, 60, 140, 142, 125, 62, 241, 237, 165, 189, 28, 204, 128, 62, 45, 105, 36, 191, 80, 22, 181, 190, 1, 241, 136, 61, 191, 48, 50, 190, 83, 195, 136, 190, 230, 31, 50, 61, 139, 169, 184, 190, 68, 63, 205, 61, 41, 93, 136, 62, 90, 183, 135, 62, 117, 146, 182, 62, 81, 18, 212, 61, 76, 13, 9, 62, 11, 73, 166, 62, 146, 200, 145, 189, 110, 3, 250, 189, 186, 218, 113, 60, 212, 173, 103, 60, 185, 150, 193, 190, 112, 87, 14, 62, 218, 252, 184, 62, 184, 129, 16, 62, 177, 152, 107, 62, 197, 48, 28, 191, 135, 216, 233, 62, 71, 154, 182, 62, 227, 52, 147, 190, 78, 44, 156, 62, 241, 109, 134, 62, 236, 129, 7, 191, 118, 193, 67, 191, 119, 251, 217, 190, 78, 29, 247, 61, 14, 25, 87, 62, 187, 77, 129, 190, 13, 246, 68, 62, 93, 220, 214, 61, 109, 45, 166, 190, 34, 9, 158, 62, 249, 232, 41, 189, 32, 78, 113, 190, 137, 241, 104, 190, 229, 175, 130, 61, 172, 120, 235, 189, 76, 84, 157, 190, 32, 11, 238, 61, 167, 234, 79, 62, 33, 95, 123, 62, 111, 178, 49, 189, 112, 95, 207, 190, 23, 81, 97, 62, 153, 247, 244, 189, 59, 173, 210, 59, 237, 239, 68, 62, 153, 66, 21, 190, 131, 208, 181, 190, 69, 29, 8, 62, 236, 139, 171, 187, 174, 26, 26, 191, 166, 140, 67, 190, 212, 112, 249, 190, 107, 155, 38, 189, 128, 229, 139, 190, 17, 83, 102, 190, 140, 226, 117, 189, 250, 171, 171, 189, 251, 13, 88, 191, 203, 4, 121, 189, 90, 229, 195, 61, 9, 252, 9, 62, 235, 211, 58, 190, 8, 244, 57, 62, 210, 125, 164, 62, 140, 32, 38, 191, 123, 119, 7, 190, 19, 229, 17, 191, 94, 233, 141, 62, 161, 193, 8, 187, 40, 158, 142, 188, 104, 97, 196, 60, 94, 22, 192, 190, 11, 110, 234, 190, 173, 204, 143, 190, 56, 203, 231, 189, 85, 69, 229, 62, 99, 162, 208, 61, 230, 147, 203, 190, 1, 95, 245, 190, 141, 156, 143, 62, 208, 15, 174, 62, 2, 206, 219, 190, 172, 204, 172, 62, 222, 145, 132, 62, 164, 196, 179, 190, 144, 106, 125, 190, 36, 33, 165, 189, 132, 240, 7, 61, 68, 223, 35, 62, 224, 45, 5, 191, 186, 122, 10, 62, 192, 62, 133, 188, 56, 84, 168, 190, 167, 64, 153, 62, 128, 129, 180, 61, 233, 186, 89, 190, 142, 45, 128, 190, 225, 239, 72, 61, 122, 162, 128, 60, 221, 101, 56, 190, 38, 232, 188, 189, 242, 10, 166, 61, 231, 100, 247, 61, 12, 132, 215, 189, 112, 202, 97, 190, 46, 204, 54, 62, 105, 44, 128, 62, 129, 138, 234, 188, 189, 208, 34, 62, 30, 175, 201, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {114, 20, 109, 62, 231, 166, 42, 189, 136, 14, 169, 62, 186, 136, 76, 190, 180, 180, 238, 61, 201, 118, 2, 62, 92, 194, 104, 62, 115, 143, 80, 62, 184, 19, 25, 190, 155, 141, 100, 62, 16, 86, 216, 189, 8, 212, 92, 62, 29, 134, 199, 189, 224, 161, 51, 61, 155, 139, 7, 62, 204, 71, 50, 189, 17, 210, 56, 62, 188, 255, 34, 190, 205, 197, 63, 62, 115, 160, 128, 62, 200, 233, 162, 189, 211, 16, 19, 61, 99, 187, 104, 190, 120, 116, 180, 190, 167, 120, 117, 189, 120, 84, 37, 62, 145, 16, 202, 61, 252, 118, 221, 61, 146, 219, 76, 61, 221, 121, 189, 61, 163, 73, 3, 62, 177, 240, 175, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 58, 42, 62, 240, 87, 82, 189, 111, 89, 150, 188, 246, 93, 35, 62, 208, 45, 10, 60, 185, 249, 201, 62, 77, 34, 16, 61, 43, 143, 47, 63, 181, 242, 84, 189, 166, 189, 11, 63, 76, 236, 131, 60, 127, 173, 27, 191, 141, 182, 105, 63, 231, 136, 226, 190, 68, 152, 7, 191, 70, 241, 135, 190, 79, 186, 235, 61, 206, 250, 243, 190, 84, 203, 0, 191, 220, 139, 52, 63, 5, 178, 4, 63, 140, 33, 133, 190, 242, 186, 168, 190, 124, 178, 148, 63, 47, 187, 149, 190, 115, 161, 26, 191, 137, 173, 1, 191, 149, 174, 246, 62, 177, 238, 183, 62, 218, 228, 171, 190, 118, 242, 62, 191, 242, 139, 149, 190, 100, 171, 132, 189, 139, 99, 34, 62, 148, 64, 77, 191, 33, 115, 84, 189, 194, 247, 140, 190, 129, 24, 79, 190, 228, 188, 131, 190, 15, 91, 4, 189, 97, 159, 8, 190, 213, 227, 88, 189, 104, 120, 56, 62, 71, 72, 102, 62, 239, 130, 204, 62, 41, 222, 74, 189, 234, 37, 128, 62, 234, 108, 231, 189, 108, 43, 117, 190, 162, 87, 64, 61, 120, 73, 141, 190, 87, 91, 47, 190, 19, 35, 17, 62, 227, 108, 19, 190, 181, 42, 149, 187, 224, 89, 155, 62, 116, 169, 51, 62, 42, 234, 85, 62, 40, 66, 95, 61, 251, 202, 128, 61, 158, 172, 106, 62, 242, 138, 73, 62, 50, 108, 202, 61, 5, 55, 167, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {207, 137, 198, 189, 81, 19, 182, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {73, 176, 209, 191, 33, 220, 184, 63, 81, 138, 236, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {22, 119, 107, 64, 238, 223, 58, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0004/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}