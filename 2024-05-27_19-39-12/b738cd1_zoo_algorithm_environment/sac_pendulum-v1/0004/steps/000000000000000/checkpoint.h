// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 116, 58, 62, 5, 95, 164, 62, 147, 118, 116, 190, 49, 143, 239, 190, 178, 137, 156, 190, 10, 232, 249, 189, 81, 27, 77, 62, 190, 213, 246, 62, 236, 148, 229, 61, 51, 104, 193, 190, 167, 145, 137, 190, 236, 150, 47, 62, 114, 108, 8, 191, 87, 148, 246, 62, 232, 7, 68, 190, 184, 102, 156, 189, 76, 130, 3, 63, 76, 241, 51, 62, 107, 52, 31, 62, 55, 4, 62, 189, 146, 55, 136, 190, 72, 62, 225, 59, 219, 17, 116, 61, 7, 220, 183, 62, 241, 75, 155, 190, 138, 81, 85, 62, 51, 236, 38, 62, 85, 192, 166, 62, 5, 142, 6, 63, 175, 36, 193, 62, 122, 5, 244, 62, 68, 248, 5, 62, 189, 184, 157, 62, 157, 123, 33, 190, 14, 23, 202, 190, 48, 211, 180, 189, 82, 248, 187, 190, 143, 143, 196, 62, 187, 166, 3, 190, 58, 90, 20, 190, 115, 48, 175, 62, 245, 152, 196, 62, 249, 178, 93, 188, 122, 193, 89, 61, 118, 37, 105, 190, 212, 234, 213, 60, 107, 163, 192, 61, 78, 12, 225, 61, 231, 112, 14, 189, 235, 39, 72, 190, 164, 38, 91, 189, 124, 50, 27, 190, 136, 197, 133, 59, 28, 186, 248, 62, 24, 97, 163, 61, 90, 222, 47, 62, 219, 50, 82, 190, 172, 141, 147, 190, 148, 214, 181, 62, 232, 134, 207, 62, 56, 246, 21, 62, 168, 178, 248, 190, 141, 129, 136, 189, 162, 69, 208, 190, 102, 41, 86, 62, 200, 60, 22, 62, 167, 31, 135, 189, 105, 122, 197, 190, 30, 128, 21, 61, 54, 243, 156, 61, 218, 170, 6, 63, 41, 174, 159, 190, 129, 229, 172, 190, 250, 101, 53, 190, 169, 24, 250, 190, 181, 172, 61, 190, 223, 51, 151, 189, 16, 138, 231, 62, 98, 208, 211, 62, 247, 62, 16, 191, 52, 229, 197, 190, 55, 197, 15, 188, 243, 165, 163, 62, 51, 193, 142, 62, 228, 10, 91, 189, 227, 37, 222, 190, 53, 85, 171, 190, 104, 244, 0, 191, 196, 238, 173, 61, 85, 227, 51, 62, 143, 60, 22, 190, 67, 94, 15, 191, 27, 90, 253, 190, 96, 55, 104, 61, 38, 13, 96, 62, 43, 160, 177, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 202, 19, 191, 219, 184, 65, 62, 85, 205, 244, 189, 153, 17, 204, 190, 23, 145, 42, 190, 10, 234, 243, 190, 233, 33, 159, 190, 7, 79, 248, 190, 251, 250, 93, 190, 101, 31, 199, 190, 9, 142, 156, 190, 13, 80, 143, 190, 43, 87, 33, 190, 219, 240, 183, 190, 151, 107, 159, 189, 72, 19, 220, 60, 249, 14, 0, 63, 86, 49, 141, 62, 114, 126, 7, 190, 184, 70, 114, 62, 221, 95, 213, 190, 158, 185, 59, 190, 27, 0, 19, 63, 130, 205, 150, 62, 51, 242, 1, 191, 39, 139, 92, 62, 76, 204, 158, 62, 117, 171, 75, 62, 7, 90, 161, 62, 191, 172, 176, 62, 31, 16, 85, 189, 247, 39, 216, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 255, 253, 60, 54, 101, 188, 188, 236, 144, 173, 189, 126, 59, 182, 61, 94, 17, 7, 189, 89, 87, 27, 62, 194, 204, 30, 62, 192, 4, 240, 185, 125, 22, 172, 61, 28, 211, 29, 62, 131, 9, 197, 189, 47, 29, 35, 62, 243, 153, 200, 61, 77, 69, 203, 61, 201, 83, 174, 61, 95, 204, 22, 62, 97, 38, 37, 190, 93, 103, 151, 61, 85, 245, 234, 61, 39, 82, 173, 189, 189, 83, 166, 188, 48, 57, 130, 189, 35, 48, 221, 61, 175, 123, 60, 61, 110, 148, 52, 62, 239, 97, 11, 61, 88, 9, 0, 190, 170, 106, 65, 61, 245, 122, 176, 189, 137, 219, 13, 190, 229, 116, 47, 190, 64, 213, 188, 189, 9, 173, 33, 62, 183, 34, 47, 190, 159, 167, 1, 190, 227, 224, 65, 59, 204, 13, 5, 190, 229, 33, 152, 61, 167, 235, 171, 61, 202, 89, 34, 190, 65, 212, 97, 61, 116, 213, 207, 188, 7, 173, 98, 188, 205, 46, 225, 61, 172, 133, 81, 189, 116, 141, 236, 61, 84, 243, 169, 189, 13, 56, 126, 61, 247, 133, 22, 62, 15, 206, 161, 189, 234, 75, 179, 61, 28, 177, 172, 189, 241, 211, 36, 190, 221, 88, 101, 61, 91, 15, 175, 189, 180, 106, 25, 190, 94, 196, 19, 189, 228, 51, 129, 60, 140, 144, 180, 189, 217, 179, 141, 189, 61, 21, 80, 189, 37, 128, 44, 60, 125, 78, 52, 190, 203, 58, 21, 190, 17, 176, 136, 189, 84, 248, 185, 61, 13, 131, 243, 189, 207, 165, 219, 189, 242, 79, 8, 190, 204, 146, 159, 188, 53, 165, 127, 59, 13, 192, 29, 62, 196, 0, 197, 61, 50, 108, 176, 189, 202, 183, 154, 188, 228, 126, 135, 61, 79, 9, 209, 60, 30, 234, 198, 59, 4, 160, 27, 190, 56, 223, 10, 62, 172, 174, 41, 189, 79, 21, 217, 189, 108, 101, 87, 61, 231, 141, 94, 189, 114, 134, 226, 60, 37, 183, 51, 190, 150, 73, 61, 60, 22, 7, 151, 61, 89, 117, 18, 190, 131, 74, 202, 188, 152, 237, 52, 61, 48, 201, 132, 189, 245, 5, 124, 189, 65, 96, 194, 60, 194, 30, 160, 188, 80, 7, 106, 189, 157, 54, 52, 62, 110, 226, 240, 60, 45, 9, 119, 189, 132, 139, 144, 188, 32, 28, 159, 61, 172, 230, 141, 61, 240, 194, 179, 189, 111, 195, 33, 62, 72, 231, 24, 190, 132, 106, 195, 189, 96, 212, 227, 60, 163, 74, 212, 60, 171, 236, 5, 189, 126, 55, 218, 189, 82, 24, 107, 189, 80, 251, 40, 190, 185, 229, 235, 61, 244, 42, 32, 190, 154, 107, 51, 62, 167, 17, 194, 61, 202, 168, 251, 189, 9, 108, 23, 190, 51, 241, 51, 190, 157, 109, 51, 190, 5, 200, 4, 62, 44, 237, 69, 61, 80, 220, 10, 61, 156, 239, 20, 190, 180, 130, 253, 188, 12, 191, 12, 189, 139, 126, 43, 190, 67, 47, 230, 189, 105, 13, 1, 190, 46, 226, 29, 188, 221, 59, 4, 189, 233, 184, 231, 61, 41, 250, 254, 189, 184, 241, 27, 190, 60, 127, 28, 190, 109, 34, 9, 189, 136, 201, 32, 62, 146, 214, 188, 61, 171, 33, 172, 61, 1, 167, 34, 62, 184, 232, 94, 189, 127, 207, 98, 188, 132, 50, 231, 188, 89, 36, 11, 62, 238, 207, 23, 62, 219, 92, 12, 190, 136, 52, 1, 189, 107, 25, 42, 62, 231, 136, 32, 190, 10, 56, 38, 62, 67, 172, 22, 62, 150, 139, 202, 189, 177, 79, 17, 190, 33, 251, 131, 61, 183, 168, 49, 62, 219, 48, 51, 190, 24, 43, 11, 62, 27, 177, 1, 190, 89, 2, 209, 61, 215, 46, 31, 62, 136, 101, 240, 189, 158, 177, 61, 59, 223, 225, 17, 190, 30, 89, 236, 189, 21, 72, 231, 187, 59, 141, 43, 62, 197, 163, 217, 187, 47, 170, 191, 61, 179, 177, 92, 189, 109, 2, 241, 189, 159, 179, 157, 189, 134, 202, 49, 62, 80, 33, 4, 190, 102, 247, 7, 61, 50, 113, 153, 185, 134, 131, 252, 60, 189, 135, 226, 61, 23, 39, 61, 61, 14, 46, 195, 61, 230, 70, 31, 62, 190, 206, 86, 61, 75, 42, 173, 59, 42, 215, 155, 61, 87, 85, 223, 61, 160, 131, 212, 188, 149, 255, 143, 189, 126, 1, 29, 190, 123, 196, 205, 61, 205, 46, 141, 61, 160, 207, 231, 60, 35, 213, 127, 61, 38, 182, 78, 61, 61, 131, 31, 62, 107, 240, 2, 61, 149, 91, 250, 189, 80, 1, 149, 189, 12, 63, 254, 61, 61, 97, 40, 62, 167, 93, 192, 189, 174, 135, 46, 189, 211, 253, 30, 62, 49, 239, 21, 189, 38, 100, 29, 189, 57, 126, 252, 61, 180, 209, 166, 189, 248, 77, 76, 189, 37, 16, 44, 189, 254, 209, 201, 60, 138, 37, 79, 61, 5, 96, 22, 61, 196, 5, 162, 61, 115, 74, 142, 189, 242, 103, 145, 61, 152, 28, 28, 61, 92, 62, 143, 189, 103, 74, 248, 60, 118, 232, 139, 189, 144, 179, 49, 190, 117, 207, 42, 190, 41, 150, 28, 62, 4, 114, 182, 61, 190, 130, 88, 189, 241, 162, 158, 61, 200, 1, 151, 61, 116, 23, 0, 190, 183, 244, 25, 190, 210, 189, 58, 189, 64, 112, 206, 189, 72, 8, 167, 61, 53, 59, 1, 61, 208, 190, 113, 189, 168, 189, 253, 61, 188, 216, 192, 189, 177, 212, 202, 189, 221, 23, 45, 188, 66, 50, 160, 189, 8, 16, 22, 190, 39, 11, 13, 190, 62, 239, 219, 61, 194, 74, 73, 60, 138, 172, 98, 60, 176, 100, 229, 189, 186, 50, 21, 62, 229, 53, 187, 61, 70, 177, 37, 62, 78, 74, 250, 187, 207, 89, 20, 189, 5, 1, 195, 61, 253, 216, 0, 62, 164, 81, 45, 190, 112, 153, 249, 187, 212, 106, 17, 189, 183, 96, 228, 61, 136, 57, 191, 59, 72, 59, 22, 62, 32, 255, 168, 61, 38, 138, 41, 190, 50, 123, 25, 62, 76, 204, 5, 61, 135, 8, 112, 189, 23, 97, 159, 61, 99, 110, 34, 62, 21, 95, 24, 190, 95, 66, 27, 62, 35, 101, 4, 190, 38, 62, 148, 189, 58, 247, 134, 60, 4, 248, 139, 61, 51, 185, 14, 189, 213, 45, 24, 190, 162, 43, 2, 62, 21, 69, 201, 188, 11, 67, 147, 60, 56, 25, 36, 190, 69, 246, 219, 59, 97, 196, 23, 61, 170, 91, 9, 62, 65, 147, 15, 190, 119, 232, 161, 189, 81, 160, 84, 189, 4, 55, 218, 61, 89, 17, 44, 61, 112, 127, 172, 187, 115, 214, 178, 189, 196, 182, 32, 189, 43, 23, 155, 189, 108, 187, 16, 61, 122, 186, 193, 189, 115, 147, 203, 188, 168, 24, 240, 189, 119, 181, 252, 187, 34, 202, 12, 62, 66, 98, 8, 189, 22, 187, 97, 61, 186, 244, 153, 189, 102, 70, 29, 62, 198, 122, 153, 61, 227, 4, 50, 190, 131, 153, 158, 189, 175, 194, 255, 189, 151, 97, 12, 62, 253, 219, 149, 188, 70, 227, 9, 62, 176, 11, 141, 61, 160, 166, 21, 189, 187, 76, 131, 61, 139, 50, 233, 189, 161, 247, 34, 61, 179, 201, 4, 62, 216, 203, 31, 62, 47, 203, 185, 61, 13, 115, 27, 190, 185, 61, 39, 190, 12, 198, 59, 61, 163, 97, 191, 61, 164, 154, 195, 61, 38, 23, 206, 61, 147, 24, 224, 189, 60, 105, 6, 62, 109, 98, 148, 189, 121, 247, 8, 190, 97, 102, 29, 190, 0, 164, 113, 187, 139, 158, 200, 189, 66, 117, 219, 61, 93, 249, 20, 188, 49, 81, 174, 189, 114, 181, 131, 189, 27, 200, 121, 189, 112, 249, 239, 60, 176, 181, 35, 190, 120, 11, 198, 60, 44, 17, 170, 61, 182, 3, 42, 190, 50, 135, 9, 62, 12, 220, 51, 62, 178, 132, 246, 189, 24, 85, 253, 188, 244, 65, 182, 188, 102, 83, 8, 62, 249, 244, 230, 189, 36, 39, 43, 61, 83, 197, 4, 62, 89, 191, 254, 189, 70, 66, 14, 189, 127, 177, 38, 188, 227, 99, 251, 61, 45, 104, 118, 61, 11, 117, 180, 189, 1, 252, 215, 61, 55, 56, 250, 61, 119, 152, 165, 184, 202, 112, 75, 189, 2, 193, 4, 189, 175, 135, 205, 61, 179, 95, 230, 189, 76, 91, 251, 189, 28, 204, 13, 190, 195, 164, 226, 61, 232, 134, 171, 189, 133, 243, 22, 190, 231, 93, 1, 62, 215, 31, 8, 190, 250, 15, 240, 189, 191, 29, 170, 189, 230, 174, 238, 61, 163, 172, 159, 61, 146, 88, 216, 61, 138, 145, 189, 189, 35, 153, 137, 189, 215, 158, 52, 61, 198, 247, 177, 61, 100, 23, 229, 188, 52, 236, 14, 190, 125, 26, 203, 60, 74, 137, 20, 190, 243, 85, 41, 62, 25, 94, 30, 61, 219, 253, 197, 187, 235, 164, 167, 189, 3, 80, 211, 189, 65, 215, 10, 61, 155, 59, 2, 62, 241, 216, 122, 189, 10, 182, 11, 62, 216, 147, 105, 189, 129, 99, 82, 61, 58, 193, 195, 189, 30, 171, 156, 61, 188, 89, 43, 190, 221, 53, 1, 62, 89, 70, 3, 62, 65, 210, 143, 61, 94, 201, 234, 61, 67, 18, 163, 189, 200, 203, 86, 189, 253, 174, 44, 61, 209, 180, 62, 61, 55, 134, 217, 61, 197, 54, 0, 61, 70, 43, 22, 60, 111, 132, 211, 189, 177, 56, 248, 61, 224, 197, 9, 190, 8, 38, 69, 61, 205, 44, 196, 60, 170, 250, 10, 62, 119, 148, 75, 189, 72, 223, 210, 61, 85, 138, 229, 189, 241, 155, 193, 185, 90, 55, 33, 62, 45, 45, 127, 61, 172, 224, 42, 190, 72, 196, 224, 61, 174, 5, 143, 61, 199, 244, 49, 190, 230, 160, 215, 189, 235, 241, 244, 188, 51, 245, 13, 190, 148, 253, 71, 189, 136, 50, 148, 188, 250, 235, 15, 60, 116, 91, 23, 190, 125, 93, 49, 190, 37, 174, 70, 61, 200, 195, 97, 189, 150, 160, 131, 189, 70, 165, 203, 189, 151, 120, 167, 60, 227, 141, 131, 189, 69, 236, 21, 62, 228, 136, 9, 189, 161, 172, 145, 189, 40, 12, 243, 189, 78, 155, 44, 62, 33, 187, 122, 188, 180, 44, 47, 190, 209, 82, 117, 189, 31, 174, 127, 189, 39, 107, 7, 190, 104, 43, 29, 62, 94, 206, 229, 61, 62, 120, 118, 61, 107, 132, 45, 62, 253, 178, 166, 61, 3, 206, 0, 62, 228, 39, 42, 190, 46, 240, 171, 61, 105, 38, 90, 188, 185, 221, 139, 60, 16, 64, 6, 190, 93, 184, 237, 189, 245, 119, 63, 61, 131, 32, 85, 61, 10, 63, 49, 190, 24, 11, 247, 189, 67, 227, 197, 189, 166, 20, 212, 189, 118, 5, 193, 61, 32, 205, 242, 61, 21, 140, 138, 189, 44, 197, 11, 61, 42, 17, 83, 61, 219, 225, 15, 190, 115, 194, 44, 190, 62, 103, 159, 188, 137, 50, 15, 186, 117, 35, 59, 60, 92, 129, 27, 188, 100, 96, 138, 189, 234, 145, 167, 60, 164, 219, 13, 62, 69, 218, 51, 190, 140, 252, 243, 189, 56, 91, 231, 189, 193, 218, 92, 189, 57, 132, 140, 189, 249, 208, 11, 62, 168, 220, 200, 189, 51, 32, 44, 61, 119, 126, 247, 189, 117, 130, 192, 61, 215, 202, 37, 62, 7, 149, 11, 190, 130, 44, 86, 61, 80, 231, 245, 189, 23, 63, 132, 61, 45, 48, 251, 189, 113, 137, 46, 190, 29, 19, 30, 62, 34, 61, 242, 61, 50, 25, 179, 189, 220, 56, 107, 189, 165, 15, 168, 60, 39, 49, 175, 61, 29, 172, 48, 62, 245, 242, 218, 189, 230, 41, 103, 189, 88, 22, 103, 61, 117, 160, 133, 188, 79, 33, 25, 190, 26, 95, 150, 61, 60, 203, 3, 62, 159, 98, 214, 61, 208, 210, 163, 61, 182, 102, 14, 190, 162, 158, 200, 61, 6, 85, 213, 189, 180, 229, 157, 61, 206, 24, 145, 60, 70, 134, 200, 187, 62, 118, 12, 190, 71, 152, 222, 61, 9, 32, 156, 189, 7, 219, 244, 60, 237, 117, 56, 189, 101, 150, 134, 61, 184, 95, 50, 187, 108, 191, 11, 190, 38, 130, 38, 62, 43, 12, 82, 189, 203, 18, 166, 61, 159, 21, 116, 189, 64, 99, 147, 61, 44, 232, 24, 61, 36, 209, 13, 190, 221, 5, 17, 62, 136, 180, 27, 62, 200, 178, 243, 61, 228, 86, 5, 190, 175, 128, 128, 188, 127, 181, 225, 61, 88, 84, 198, 60, 129, 48, 36, 189, 127, 146, 34, 62, 109, 169, 56, 61, 237, 8, 87, 61, 247, 207, 251, 189, 248, 229, 44, 60, 68, 225, 248, 189, 213, 72, 11, 61, 13, 14, 50, 190, 42, 152, 44, 61, 230, 251, 132, 188, 174, 92, 222, 61, 174, 200, 9, 62, 67, 155, 6, 62, 194, 174, 65, 189, 214, 142, 99, 61, 72, 10, 39, 187, 177, 150, 110, 189, 26, 185, 148, 187, 183, 113, 176, 61, 3, 149, 33, 190, 124, 244, 103, 189, 105, 47, 13, 188, 15, 148, 1, 62, 143, 231, 32, 62, 7, 120, 212, 189, 201, 108, 185, 61, 45, 196, 131, 59, 43, 25, 99, 61, 2, 110, 247, 189, 141, 42, 175, 189, 175, 193, 31, 61, 86, 119, 21, 61, 21, 28, 235, 189, 33, 155, 198, 189, 94, 248, 79, 60, 101, 48, 22, 62, 126, 164, 187, 61, 207, 228, 47, 62, 53, 232, 32, 190, 132, 63, 127, 61, 134, 99, 2, 62, 166, 224, 192, 188, 142, 142, 180, 189, 97, 6, 174, 187, 227, 95, 39, 190, 120, 112, 190, 188, 68, 99, 18, 189, 70, 85, 151, 60, 231, 159, 119, 61, 18, 24, 41, 189, 130, 254, 42, 190, 123, 16, 16, 189, 28, 46, 195, 59, 163, 196, 92, 61, 142, 126, 138, 61, 253, 221, 233, 189, 153, 151, 28, 190, 105, 115, 48, 62, 19, 64, 22, 62, 139, 164, 18, 61, 199, 4, 6, 189, 44, 175, 14, 190, 198, 125, 70, 61, 82, 115, 252, 189, 76, 39, 158, 61, 20, 235, 93, 186, 231, 222, 175, 189, 64, 137, 175, 189, 90, 77, 44, 190, 28, 26, 130, 61, 134, 118, 50, 189, 134, 72, 149, 189, 207, 146, 24, 189, 226, 134, 69, 60, 138, 44, 38, 61, 21, 50, 23, 190, 72, 40, 143, 59, 39, 237, 229, 189, 197, 35, 96, 60, 17, 148, 239, 61, 140, 28, 121, 185, 130, 164, 212, 189, 86, 98, 161, 61, 151, 15, 170, 187, 95, 156, 208, 61, 109, 107, 139, 61, 214, 182, 94, 61, 7, 185, 160, 189, 169, 121, 4, 62, 183, 20, 213, 188, 200, 134, 48, 190, 70, 157, 209, 60, 130, 149, 6, 62, 151, 32, 128, 189, 58, 81, 108, 188, 207, 254, 243, 61, 131, 32, 44, 190, 173, 51, 225, 61, 177, 179, 215, 61, 50, 15, 153, 189, 31, 79, 178, 61, 105, 248, 102, 189, 166, 234, 17, 62, 86, 251, 235, 188, 62, 85, 9, 190, 23, 85, 176, 189, 167, 48, 113, 60, 185, 76, 144, 189, 56, 236, 26, 190, 20, 186, 135, 187, 3, 35, 13, 61, 50, 26, 13, 59, 100, 152, 253, 61, 166, 39, 0, 62, 70, 34, 3, 62, 72, 88, 248, 189, 157, 26, 47, 190, 236, 217, 32, 61, 170, 241, 138, 189, 91, 26, 37, 189, 244, 226, 92, 189, 169, 60, 29, 62, 25, 107, 33, 62, 132, 124, 31, 190, 92, 223, 57, 61, 167, 89, 144, 61, 30, 191, 16, 190, 12, 145, 16, 62, 143, 236, 177, 61, 91, 35, 11, 189, 159, 225, 137, 61, 170, 25, 34, 62, 1, 34, 156, 61, 205, 253, 8, 61, 109, 226, 22, 189, 245, 114, 68, 189, 218, 117, 146, 60, 247, 249, 214, 61, 95, 241, 146, 188, 249, 242, 220, 61, 91, 157, 22, 190, 83, 225, 206, 187, 78, 62, 55, 189, 157, 173, 226, 61, 236, 102, 29, 190, 136, 232, 29, 189, 66, 28, 251, 61, 231, 148, 234, 189, 103, 90, 201, 187, 147, 78, 28, 189, 218, 236, 195, 188, 78, 72, 189, 60, 18, 67, 12, 62, 180, 142, 21, 62, 42, 228, 179, 188, 73, 105, 29, 61, 19, 212, 39, 189, 44, 197, 156, 61, 231, 229, 33, 189, 240, 187, 120, 60, 219, 100, 224, 189, 203, 170, 36, 62, 228, 91, 9, 62, 53, 242, 0, 190, 144, 34, 8, 189, 178, 180, 123, 60, 162, 233, 225, 61, 23, 170, 147, 189, 71, 169, 42, 62, 25, 205, 63, 189, 250, 166, 30, 187, 216, 139, 233, 188, 238, 91, 178, 189, 145, 203, 30, 186, 2, 144, 147, 61, 231, 207, 109, 61, 116, 173, 97, 57, 255, 62, 167, 61, 58, 21, 145, 60, 209, 123, 14, 189, 46, 50, 3, 62, 113, 55, 38, 190, 111, 250, 222, 189, 20, 170, 228, 61, 135, 217, 240, 189, 44, 139, 49, 62, 27, 120, 85, 61, 199, 85, 46, 62, 97, 160, 141, 61, 117, 254, 8, 62, 172, 64, 216, 189, 108, 22, 27, 62, 160, 2, 243, 189, 137, 235, 246, 61, 111, 2, 21, 62, 122, 199, 52, 190, 251, 85, 255, 189, 29, 161, 176, 61, 149, 204, 87, 189, 140, 177, 44, 62, 212, 1, 96, 187, 226, 161, 183, 189, 222, 171, 17, 190, 48, 10, 41, 62, 224, 103, 6, 62, 144, 160, 35, 190, 37, 107, 18, 189, 70, 162, 220, 189, 66, 181, 193, 189, 172, 125, 199, 189, 168, 69, 51, 62, 60, 11, 12, 62, 75, 203, 208, 61, 93, 3, 34, 62, 77, 104, 120, 61, 28, 177, 57, 188, 207, 139, 162, 61, 150, 115, 117, 188, 93, 252, 111, 189, 68, 55, 165, 189, 212, 220, 212, 60, 18, 208, 159, 61, 143, 242, 48, 190, 83, 231, 42, 190, 107, 210, 22, 61, 178, 90, 20, 62, 182, 102, 239, 60, 58, 242, 160, 61, 204, 217, 129, 189, 58, 86, 130, 188, 41, 56, 240, 189, 140, 155, 48, 61, 245, 179, 236, 189, 228, 227, 151, 189, 134, 13, 11, 62, 18, 72, 202, 61, 21, 56, 202, 61, 95, 97, 118, 189, 143, 37, 32, 190, 165, 192, 43, 62, 164, 136, 220, 61, 8, 77, 164, 188, 50, 218, 24, 190, 243, 61, 21, 61, 68, 74, 211, 60, 225, 178, 10, 61, 207, 210, 209, 189, 177, 144, 246, 189, 70, 96, 125, 189, 104, 203, 4, 62, 8, 221, 180, 189, 6, 88, 61, 189, 230, 149, 48, 190, 83, 155, 239, 61, 238, 232, 247, 189, 234, 49, 12, 190, 133, 219, 218, 189, 186, 123, 73, 188, 230, 250, 18, 62, 229, 67, 208, 61, 224, 251, 118, 61, 185, 221, 33, 62, 4, 244, 249, 61, 226, 189, 133, 189, 28, 164, 2, 190, 133, 139, 42, 190, 143, 70, 179, 189, 245, 169, 199, 189, 146, 165, 45, 62, 157, 231, 174, 61, 128, 182, 129, 189, 134, 161, 96, 61, 241, 161, 4, 60, 54, 50, 123, 189, 176, 50, 241, 189, 73, 36, 19, 62, 69, 232, 149, 189, 154, 126, 20, 62, 23, 199, 18, 190, 244, 122, 27, 61, 22, 99, 43, 62, 27, 47, 245, 61, 252, 15, 39, 61, 13, 137, 25, 189, 77, 84, 15, 61, 91, 191, 35, 62, 188, 201, 227, 189, 42, 113, 236, 189, 245, 56, 145, 189, 245, 119, 92, 61, 243, 67, 206, 189, 119, 80, 179, 61, 213, 135, 124, 61, 249, 204, 129, 189, 170, 164, 41, 61, 84, 26, 95, 189, 72, 164, 208, 189, 227, 241, 40, 189, 234, 93, 187, 61, 89, 161, 249, 60, 248, 10, 24, 190, 108, 88, 230, 189, 6, 103, 226, 61, 43, 109, 110, 61, 105, 147, 61, 61, 4, 45, 130, 61, 215, 61, 20, 190, 107, 109, 88, 61, 113, 87, 134, 189, 231, 136, 205, 189, 40, 253, 149, 61, 109, 22, 47, 62, 230, 128, 60, 61, 204, 249, 191, 189, 23, 60, 192, 188, 200, 25, 46, 62, 183, 238, 227, 61, 39, 183, 231, 189, 98, 170, 48, 190, 25, 242, 10, 190, 208, 1, 222, 189, 241, 73, 77, 189, 162, 187, 37, 62, 98, 237, 79, 189, 60, 109, 108, 189, 243, 1, 226, 60, 79, 242, 52, 190, 91, 78, 45, 189, 117, 248, 0, 190, 158, 148, 6, 62, 7, 54, 245, 189, 158, 15, 186, 61, 110, 158, 162, 189, 166, 58, 0, 62, 176, 167, 139, 189, 106, 90, 10, 62, 3, 246, 144, 189, 27, 254, 160, 61, 35, 124, 20, 189, 115, 185, 207, 189, 200, 85, 10, 62, 227, 120, 109, 188, 244, 153, 159, 187, 17, 76, 39, 62, 64, 114, 42, 62, 145, 141, 242, 189, 27, 83, 131, 188, 65, 49, 185, 188, 139, 9, 251, 61, 31, 176, 247, 187, 12, 32, 237, 189, 88, 44, 165, 188, 92, 77, 47, 190, 4, 92, 4, 189, 246, 136, 71, 189, 159, 151, 170, 61, 165, 167, 201, 189, 95, 212, 192, 61, 55, 227, 38, 189, 157, 34, 68, 61, 46, 108, 222, 61, 18, 129, 21, 190, 103, 85, 40, 190, 130, 75, 21, 62, 113, 152, 179, 189, 241, 107, 217, 61, 169, 63, 212, 189, 89, 222, 4, 62, 225, 74, 134, 61, 22, 75, 82, 61, 173, 112, 8, 190, 157, 194, 86, 59, 23, 180, 159, 189, 40, 134, 18, 60, 203, 140, 63, 61, 231, 53, 5, 61, 153, 11, 177, 59, 215, 39, 97, 189, 146, 75, 34, 189, 10, 245, 28, 62, 243, 158, 37, 62, 216, 116, 249, 189, 114, 91, 206, 189, 60, 193, 41, 61, 22, 246, 76, 61, 209, 252, 187, 189, 33, 209, 50, 190, 35, 190, 185, 189, 24, 48, 12, 190, 16, 27, 33, 60, 63, 66, 31, 62, 198, 185, 220, 61, 120, 50, 16, 62, 212, 140, 115, 189, 242, 145, 18, 62, 178, 67, 185, 61, 173, 235, 206, 61, 151, 19, 101, 188, 5, 52, 250, 61, 166, 31, 10, 190, 240, 111, 79, 189, 197, 100, 44, 190, 226, 89, 195, 188, 60, 169, 15, 62, 103, 129, 151, 61, 199, 54, 227, 189, 81, 63, 39, 186, 229, 235, 237, 189, 138, 129, 38, 62, 242, 100, 184, 189, 114, 190, 0, 189, 84, 224, 127, 189, 33, 73, 253, 61, 71, 204, 114, 61, 175, 43, 66, 189, 10, 187, 50, 62, 87, 163, 181, 61, 71, 229, 32, 61, 28, 224, 233, 61, 34, 146, 7, 190, 182, 130, 4, 62, 129, 117, 28, 190, 128, 52, 239, 189, 71, 73, 242, 189, 105, 79, 84, 61, 22, 28, 116, 189, 47, 251, 1, 189, 63, 243, 39, 62, 31, 199, 153, 189, 63, 212, 27, 190, 253, 240, 253, 188, 153, 243, 17, 62, 135, 80, 38, 190, 235, 143, 78, 61, 86, 239, 231, 61, 117, 9, 23, 190, 221, 78, 9, 62, 140, 243, 203, 61, 232, 75, 99, 60, 8, 56, 49, 62, 101, 73, 204, 60, 94, 251, 36, 62, 243, 222, 84, 187, 43, 251, 19, 190, 142, 170, 173, 61, 88, 104, 210, 60, 11, 222, 17, 188, 233, 66, 164, 189, 59, 36, 166, 61, 245, 46, 21, 62, 6, 199, 25, 190, 73, 147, 98, 61, 41, 211, 20, 190, 181, 18, 208, 60, 150, 183, 26, 62, 13, 42, 41, 62, 112, 26, 89, 61, 212, 196, 32, 189, 236, 100, 86, 61, 4, 55, 157, 61, 209, 78, 152, 61, 61, 40, 225, 61, 165, 122, 188, 61, 66, 18, 12, 189, 24, 35, 2, 62, 111, 73, 10, 62, 46, 3, 202, 189, 239, 46, 66, 188, 51, 172, 21, 190, 240, 82, 207, 189, 107, 247, 233, 189, 9, 102, 189, 61, 161, 247, 177, 61, 189, 161, 5, 189, 244, 110, 10, 61, 165, 173, 5, 190, 172, 101, 161, 61, 65, 81, 208, 61, 174, 84, 10, 62, 199, 240, 173, 189, 70, 49, 31, 190, 177, 90, 164, 189, 21, 138, 211, 60, 182, 187, 37, 190, 75, 178, 59, 61, 144, 87, 5, 62, 223, 17, 113, 61, 101, 18, 138, 189, 10, 124, 60, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 111, 18, 62, 231, 166, 42, 189, 216, 44, 202, 61, 111, 250, 1, 189, 42, 47, 129, 60, 231, 16, 155, 189, 236, 131, 155, 60, 64, 37, 37, 61, 228, 41, 230, 189, 174, 37, 182, 61, 37, 125, 175, 189, 85, 79, 178, 61, 1, 31, 207, 189, 195, 167, 162, 189, 125, 11, 131, 189, 191, 16, 238, 189, 216, 238, 7, 61, 28, 3, 12, 61, 17, 105, 190, 60, 254, 209, 189, 61, 34, 217, 30, 190, 102, 159, 23, 189, 202, 192, 0, 190, 66, 15, 48, 190, 45, 188, 185, 189, 3, 239, 160, 61, 232, 24, 2, 61, 139, 142, 164, 189, 211, 28, 155, 189, 202, 13, 11, 61, 203, 6, 47, 60, 211, 207, 247, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 235, 182, 61, 240, 87, 82, 189, 134, 191, 148, 189, 87, 247, 228, 61, 162, 127, 236, 189, 188, 134, 48, 62, 103, 124, 232, 188, 240, 53, 7, 189, 127, 174, 165, 189, 11, 76, 190, 61, 58, 24, 18, 61, 225, 128, 36, 190, 144, 254, 159, 61, 202, 60, 197, 189, 150, 221, 143, 189, 202, 110, 254, 189, 202, 21, 149, 61, 198, 231, 50, 190, 132, 66, 3, 190, 249, 152, 51, 62, 125, 143, 51, 62, 146, 43, 162, 189, 224, 134, 167, 189, 177, 85, 28, 62, 154, 190, 30, 190, 12, 112, 28, 190, 119, 197, 246, 189, 131, 29, 105, 60, 185, 204, 6, 62, 63, 21, 110, 189, 2, 104, 81, 189, 37, 156, 237, 189, 166, 76, 245, 60, 139, 99, 34, 62, 193, 55, 12, 190, 159, 195, 2, 190, 184, 43, 50, 190, 252, 238, 188, 189, 104, 87, 35, 190, 35, 252, 110, 61, 254, 91, 12, 190, 63, 124, 195, 60, 125, 123, 10, 62, 99, 150, 146, 189, 65, 237, 41, 62, 77, 225, 35, 190, 119, 72, 102, 61, 193, 144, 9, 190, 85, 255, 166, 189, 155, 84, 201, 189, 146, 0, 148, 189, 42, 244, 5, 190, 228, 143, 29, 62, 219, 253, 38, 190, 16, 206, 208, 189, 15, 102, 218, 61, 179, 67, 11, 62, 30, 209, 21, 61, 205, 64, 184, 189, 132, 139, 136, 61, 151, 80, 27, 62, 201, 58, 154, 61, 156, 122, 237, 188, 132, 14, 194, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 235, 47, 190, 114, 173, 223, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {35, 158, 3, 192, 145, 32, 6, 191, 144, 253, 134, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {32, 146, 133, 190, 68, 79, 156, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0004/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}