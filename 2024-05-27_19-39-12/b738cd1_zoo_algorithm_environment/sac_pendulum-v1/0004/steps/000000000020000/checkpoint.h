// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {76, 114, 73, 63, 187, 182, 221, 61, 32, 251, 150, 190, 54, 61, 8, 190, 20, 192, 149, 191, 147, 185, 250, 185, 88, 198, 162, 62, 174, 71, 124, 63, 18, 229, 62, 62, 105, 154, 70, 191, 106, 159, 77, 190, 21, 184, 5, 63, 84, 136, 48, 191, 137, 106, 104, 62, 243, 216, 32, 191, 85, 209, 214, 61, 168, 176, 170, 63, 242, 50, 51, 62, 224, 73, 253, 62, 80, 184, 215, 190, 188, 117, 129, 190, 86, 191, 237, 62, 140, 128, 49, 63, 14, 216, 157, 62, 59, 206, 108, 60, 159, 1, 138, 63, 86, 245, 126, 62, 21, 184, 70, 63, 13, 176, 68, 63, 230, 6, 110, 62, 144, 167, 36, 63, 239, 165, 209, 62, 99, 69, 183, 62, 173, 57, 19, 191, 31, 32, 69, 191, 71, 29, 31, 190, 22, 143, 72, 191, 15, 227, 134, 60, 89, 171, 154, 190, 228, 126, 130, 60, 203, 64, 84, 63, 243, 55, 165, 62, 134, 129, 83, 190, 198, 119, 244, 190, 238, 118, 145, 62, 146, 176, 137, 62, 219, 143, 39, 63, 93, 168, 26, 62, 48, 143, 164, 190, 140, 99, 176, 189, 53, 179, 9, 190, 152, 145, 221, 190, 6, 116, 140, 63, 136, 40, 114, 62, 115, 79, 208, 189, 114, 215, 61, 63, 218, 82, 176, 190, 36, 151, 36, 62, 234, 170, 202, 63, 89, 137, 60, 60, 170, 3, 3, 63, 80, 1, 45, 191, 170, 59, 158, 59, 195, 107, 24, 190, 125, 195, 173, 63, 13, 156, 118, 62, 121, 52, 23, 190, 248, 110, 53, 191, 230, 235, 108, 62, 232, 19, 138, 190, 217, 12, 197, 62, 214, 238, 104, 190, 196, 166, 22, 191, 111, 68, 153, 191, 5, 203, 215, 190, 70, 171, 52, 62, 1, 111, 250, 62, 254, 187, 153, 62, 206, 66, 206, 62, 250, 201, 171, 191, 106, 98, 135, 190, 13, 229, 143, 62, 11, 83, 82, 63, 186, 148, 36, 62, 140, 125, 61, 189, 243, 137, 107, 191, 152, 166, 72, 190, 234, 202, 141, 191, 224, 186, 26, 63, 55, 38, 142, 61, 215, 226, 2, 191, 177, 28, 192, 191, 200, 107, 120, 190, 106, 144, 201, 190, 90, 122, 177, 62, 184, 13, 211, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 9, 150, 191, 188, 12, 159, 62, 218, 9, 102, 188, 249, 223, 133, 190, 190, 86, 195, 60, 157, 219, 199, 190, 188, 224, 211, 190, 254, 79, 135, 191, 141, 236, 184, 190, 148, 198, 38, 191, 174, 23, 2, 191, 209, 149, 121, 62, 82, 156, 190, 189, 100, 93, 221, 190, 155, 84, 33, 190, 162, 189, 246, 61, 80, 28, 153, 62, 174, 45, 113, 189, 168, 188, 96, 62, 167, 100, 230, 60, 49, 71, 221, 189, 34, 100, 208, 190, 105, 134, 1, 63, 243, 50, 140, 62, 53, 137, 217, 61, 124, 189, 27, 190, 89, 98, 68, 62, 80, 211, 89, 60, 186, 138, 149, 62, 154, 242, 200, 62, 108, 120, 179, 60, 80, 1, 227, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 225, 191, 62, 169, 18, 48, 188, 162, 67, 242, 190, 74, 177, 22, 62, 253, 38, 174, 189, 137, 72, 30, 191, 129, 3, 186, 62, 70, 242, 244, 190, 247, 56, 64, 62, 218, 95, 202, 190, 142, 243, 89, 190, 245, 198, 23, 62, 143, 124, 109, 189, 219, 73, 215, 186, 46, 119, 39, 62, 68, 218, 117, 61, 36, 73, 8, 190, 9, 187, 252, 61, 160, 23, 150, 62, 214, 193, 86, 189, 36, 107, 218, 189, 49, 217, 98, 62, 168, 127, 248, 61, 245, 68, 217, 61, 126, 105, 1, 188, 67, 255, 118, 60, 141, 227, 147, 60, 44, 59, 50, 190, 129, 9, 191, 189, 49, 128, 160, 190, 134, 227, 48, 191, 55, 43, 24, 189, 9, 173, 33, 62, 183, 34, 47, 190, 159, 167, 1, 190, 227, 224, 65, 59, 204, 13, 5, 190, 229, 33, 152, 61, 167, 235, 171, 61, 202, 89, 34, 190, 65, 212, 97, 61, 116, 213, 207, 188, 7, 173, 98, 188, 205, 46, 225, 61, 172, 133, 81, 189, 116, 141, 236, 61, 84, 243, 169, 189, 13, 56, 126, 61, 247, 133, 22, 62, 15, 206, 161, 189, 234, 75, 179, 61, 28, 177, 172, 189, 241, 211, 36, 190, 221, 88, 101, 61, 91, 15, 175, 189, 180, 106, 25, 190, 94, 196, 19, 189, 228, 51, 129, 60, 140, 144, 180, 189, 217, 179, 141, 189, 61, 21, 80, 189, 37, 128, 44, 60, 125, 78, 52, 190, 203, 58, 21, 190, 31, 204, 198, 61, 37, 42, 9, 191, 24, 125, 177, 189, 240, 16, 38, 190, 152, 128, 231, 190, 144, 223, 32, 191, 161, 3, 17, 191, 170, 253, 215, 188, 151, 181, 158, 188, 85, 179, 196, 61, 242, 53, 224, 62, 116, 199, 50, 191, 59, 232, 187, 190, 135, 129, 127, 190, 169, 169, 200, 190, 65, 32, 3, 63, 202, 202, 26, 62, 169, 158, 178, 189, 81, 97, 87, 61, 34, 224, 49, 60, 181, 211, 213, 189, 136, 212, 18, 191, 227, 188, 163, 62, 157, 36, 154, 61, 58, 77, 25, 191, 132, 57, 66, 62, 248, 26, 101, 62, 75, 137, 36, 62, 37, 190, 48, 60, 4, 133, 145, 190, 180, 90, 181, 191, 14, 254, 196, 188, 173, 49, 72, 62, 48, 244, 81, 189, 114, 169, 241, 189, 132, 139, 144, 188, 8, 57, 80, 61, 154, 193, 140, 61, 21, 243, 132, 189, 111, 195, 33, 62, 72, 231, 24, 190, 132, 106, 195, 189, 96, 212, 227, 60, 47, 137, 182, 61, 113, 160, 53, 189, 168, 54, 219, 189, 131, 22, 59, 190, 13, 245, 174, 190, 217, 212, 11, 187, 244, 42, 32, 190, 143, 19, 2, 62, 233, 8, 179, 61, 72, 25, 83, 190, 237, 229, 103, 190, 89, 158, 7, 191, 245, 13, 127, 190, 56, 211, 44, 62, 44, 237, 69, 61, 196, 86, 222, 188, 239, 237, 21, 190, 221, 61, 168, 189, 159, 158, 55, 190, 134, 102, 9, 190, 180, 221, 244, 189, 89, 85, 64, 190, 252, 92, 41, 190, 64, 31, 126, 60, 124, 85, 138, 61, 193, 157, 240, 190, 237, 130, 113, 190, 121, 69, 91, 191, 14, 204, 236, 189, 165, 145, 152, 61, 230, 109, 191, 61, 68, 244, 181, 62, 205, 145, 196, 61, 25, 183, 174, 190, 132, 155, 45, 189, 253, 148, 18, 190, 82, 26, 156, 62, 176, 114, 7, 62, 216, 185, 13, 190, 16, 44, 172, 62, 118, 76, 216, 62, 160, 78, 140, 190, 181, 152, 45, 62, 53, 9, 111, 62, 76, 247, 19, 190, 222, 87, 167, 190, 251, 49, 54, 62, 221, 207, 126, 61, 182, 187, 192, 189, 21, 190, 175, 188, 172, 47, 87, 190, 170, 3, 58, 190, 109, 217, 218, 189, 0, 106, 251, 61, 155, 110, 158, 62, 177, 47, 218, 190, 204, 193, 133, 189, 170, 55, 116, 189, 41, 254, 7, 190, 233, 182, 200, 60, 78, 228, 115, 191, 101, 249, 120, 62, 33, 80, 90, 191, 236, 215, 167, 190, 35, 127, 181, 62, 26, 77, 51, 190, 38, 44, 19, 190, 195, 118, 220, 61, 14, 129, 251, 58, 102, 206, 197, 62, 39, 158, 18, 62, 124, 212, 109, 62, 217, 142, 152, 62, 86, 133, 12, 62, 70, 34, 120, 62, 37, 218, 146, 62, 237, 60, 132, 62, 228, 13, 1, 62, 238, 195, 62, 189, 122, 184, 52, 61, 186, 189, 227, 187, 57, 189, 131, 62, 241, 2, 191, 62, 194, 148, 97, 62, 191, 29, 174, 60, 0, 237, 171, 62, 167, 143, 26, 62, 48, 29, 142, 190, 156, 62, 200, 188, 243, 209, 215, 61, 226, 18, 216, 189, 88, 85, 14, 189, 117, 98, 142, 190, 158, 21, 150, 60, 114, 102, 254, 189, 153, 119, 88, 62, 161, 157, 80, 62, 1, 179, 134, 190, 123, 179, 9, 190, 55, 230, 45, 189, 168, 174, 9, 62, 218, 175, 17, 62, 94, 107, 146, 189, 111, 92, 209, 61, 62, 101, 67, 61, 104, 244, 31, 62, 156, 2, 113, 189, 157, 75, 46, 62, 133, 70, 166, 61, 115, 34, 169, 60, 255, 97, 72, 189, 124, 62, 153, 61, 104, 143, 184, 61, 50, 230, 138, 62, 239, 179, 166, 190, 148, 76, 8, 62, 89, 78, 51, 61, 29, 211, 125, 61, 177, 255, 33, 191, 13, 2, 160, 190, 74, 224, 218, 60, 53, 105, 184, 190, 163, 237, 30, 192, 195, 63, 2, 62, 187, 62, 244, 61, 223, 133, 227, 190, 52, 146, 194, 189, 9, 245, 246, 60, 88, 13, 87, 62, 255, 232, 49, 191, 124, 84, 53, 191, 151, 39, 196, 189, 108, 131, 54, 62, 225, 208, 13, 62, 7, 186, 27, 189, 49, 142, 171, 62, 155, 234, 194, 62, 47, 126, 0, 62, 167, 154, 241, 62, 83, 22, 16, 190, 73, 32, 89, 62, 10, 189, 101, 191, 92, 114, 97, 190, 185, 252, 162, 61, 148, 126, 59, 190, 223, 231, 89, 60, 202, 12, 1, 62, 75, 37, 36, 191, 211, 122, 16, 188, 79, 54, 57, 190, 193, 155, 227, 61, 76, 204, 5, 61, 135, 8, 112, 189, 177, 252, 106, 61, 99, 110, 34, 62, 175, 148, 37, 190, 95, 66, 27, 62, 248, 173, 3, 190, 38, 62, 148, 189, 58, 247, 134, 60, 185, 177, 54, 61, 95, 169, 88, 189, 213, 45, 24, 190, 162, 141, 236, 61, 21, 69, 201, 188, 206, 86, 103, 188, 33, 73, 36, 190, 140, 6, 43, 187, 19, 62, 30, 61, 109, 145, 212, 61, 201, 12, 23, 190, 175, 217, 241, 189, 185, 95, 142, 189, 62, 22, 131, 61, 89, 17, 44, 61, 175, 168, 59, 189, 120, 9, 178, 189, 73, 10, 159, 189, 84, 45, 219, 189, 126, 213, 54, 188, 47, 223, 210, 189, 238, 31, 53, 62, 105, 195, 10, 61, 167, 235, 179, 190, 105, 36, 150, 61, 242, 53, 178, 190, 91, 52, 13, 190, 169, 252, 61, 62, 235, 47, 119, 191, 146, 53, 203, 62, 213, 241, 124, 191, 236, 198, 239, 190, 165, 132, 242, 187, 100, 154, 237, 190, 170, 251, 160, 190, 183, 18, 31, 62, 198, 118, 31, 61, 60, 182, 251, 61, 48, 126, 36, 62, 196, 163, 167, 62, 102, 188, 149, 62, 227, 162, 114, 62, 253, 76, 5, 63, 136, 45, 54, 62, 171, 251, 99, 188, 75, 106, 187, 190, 54, 24, 246, 186, 28, 49, 179, 62, 42, 141, 116, 189, 34, 136, 103, 62, 173, 142, 159, 189, 213, 50, 83, 61, 151, 138, 31, 188, 121, 247, 8, 190, 175, 181, 29, 190, 75, 20, 143, 189, 10, 71, 167, 189, 5, 20, 79, 61, 50, 90, 198, 189, 192, 66, 178, 189, 244, 244, 18, 190, 101, 62, 218, 189, 21, 180, 20, 188, 230, 243, 81, 190, 177, 148, 189, 60, 27, 78, 166, 57, 222, 243, 71, 190, 50, 23, 65, 61, 158, 170, 23, 62, 6, 170, 17, 190, 111, 203, 236, 188, 96, 26, 196, 188, 139, 102, 0, 62, 36, 233, 34, 190, 55, 203, 76, 61, 99, 23, 4, 62, 158, 154, 117, 190, 143, 239, 209, 189, 236, 246, 25, 188, 235, 230, 147, 60, 107, 7, 80, 61, 200, 61, 77, 190, 183, 161, 212, 61, 125, 14, 90, 60, 43, 93, 113, 187, 145, 148, 3, 191, 185, 187, 172, 61, 226, 189, 190, 62, 235, 36, 225, 190, 81, 173, 87, 62, 49, 10, 61, 61, 100, 154, 28, 190, 72, 178, 79, 191, 208, 173, 107, 191, 68, 77, 203, 62, 112, 64, 147, 62, 245, 24, 226, 190, 15, 25, 88, 62, 63, 253, 197, 62, 52, 247, 206, 190, 213, 75, 188, 62, 170, 173, 157, 188, 140, 243, 213, 190, 95, 34, 30, 190, 24, 203, 93, 61, 63, 130, 105, 190, 151, 167, 44, 191, 148, 114, 220, 61, 190, 223, 158, 188, 83, 243, 83, 62, 70, 84, 155, 61, 224, 241, 63, 190, 135, 130, 6, 62, 45, 238, 203, 189, 148, 36, 131, 190, 186, 26, 32, 62, 212, 178, 26, 190, 175, 200, 36, 63, 39, 228, 205, 61, 117, 195, 79, 191, 17, 92, 194, 61, 172, 30, 233, 189, 249, 236, 24, 191, 11, 220, 240, 62, 214, 162, 152, 191, 127, 32, 239, 61, 211, 137, 139, 191, 194, 191, 218, 190, 187, 215, 9, 60, 55, 194, 164, 190, 242, 54, 198, 190, 232, 239, 21, 62, 0, 242, 223, 190, 91, 30, 8, 60, 110, 238, 102, 62, 123, 78, 148, 62, 105, 152, 15, 62, 153, 223, 46, 63, 54, 7, 32, 63, 9, 60, 197, 62, 20, 88, 12, 190, 254, 41, 62, 190, 127, 63, 61, 61, 155, 11, 162, 62, 236, 246, 58, 191, 247, 90, 149, 61, 165, 118, 123, 189, 81, 147, 173, 190, 159, 101, 81, 62, 23, 160, 8, 191, 84, 140, 198, 60, 210, 163, 47, 62, 206, 200, 175, 190, 1, 189, 147, 62, 43, 111, 188, 61, 175, 70, 157, 190, 247, 65, 48, 191, 244, 248, 140, 191, 254, 204, 168, 62, 84, 169, 193, 62, 223, 124, 253, 190, 93, 48, 160, 62, 62, 145, 133, 62, 184, 155, 14, 191, 46, 70, 163, 62, 93, 240, 171, 61, 92, 181, 133, 190, 107, 134, 132, 190, 27, 113, 92, 62, 46, 103, 177, 190, 170, 112, 35, 191, 172, 234, 225, 61, 65, 220, 174, 61, 99, 184, 130, 188, 47, 42, 121, 62, 2, 23, 253, 188, 229, 31, 137, 62, 29, 167, 77, 62, 111, 78, 12, 190, 73, 5, 32, 62, 154, 128, 102, 190, 79, 237, 91, 190, 101, 196, 232, 61, 50, 38, 128, 190, 130, 50, 118, 191, 105, 29, 167, 189, 92, 151, 33, 62, 78, 3, 149, 62, 10, 63, 49, 190, 42, 252, 42, 191, 205, 113, 185, 190, 74, 152, 0, 191, 198, 198, 132, 191, 89, 243, 224, 61, 143, 204, 22, 191, 114, 19, 40, 60, 159, 138, 122, 62, 145, 28, 207, 58, 99, 121, 229, 61, 131, 39, 10, 190, 59, 5, 42, 190, 220, 224, 42, 188, 60, 61, 46, 63, 203, 249, 43, 62, 137, 225, 110, 61, 122, 76, 31, 191, 83, 193, 169, 191, 118, 44, 148, 189, 251, 241, 232, 190, 26, 192, 22, 61, 243, 119, 173, 62, 1, 236, 206, 188, 81, 204, 68, 191, 47, 223, 91, 190, 211, 55, 27, 190, 254, 152, 136, 62, 113, 192, 240, 189, 101, 42, 161, 61, 244, 250, 62, 62, 226, 217, 3, 191, 120, 116, 255, 190, 39, 216, 55, 191, 197, 187, 226, 59, 159, 142, 221, 62, 209, 61, 4, 191, 12, 95, 240, 61, 212, 16, 113, 60, 176, 48, 231, 190, 197, 177, 122, 62, 169, 9, 162, 62, 216, 70, 191, 190, 124, 116, 175, 189, 90, 179, 195, 61, 101, 159, 112, 189, 205, 185, 26, 191, 204, 19, 98, 62, 132, 195, 113, 62, 174, 0, 177, 189, 197, 125, 162, 61, 158, 8, 98, 190, 68, 71, 120, 62, 126, 62, 170, 189, 246, 14, 82, 61, 183, 144, 172, 190, 220, 163, 135, 189, 47, 247, 197, 61, 57, 106, 136, 62, 223, 135, 196, 190, 21, 114, 87, 61, 79, 233, 230, 189, 58, 221, 120, 190, 226, 51, 71, 61, 190, 35, 66, 191, 123, 111, 77, 62, 63, 147, 251, 190, 208, 121, 97, 61, 53, 205, 236, 60, 61, 140, 243, 189, 213, 219, 12, 190, 243, 151, 153, 189, 67, 12, 205, 61, 170, 126, 157, 62, 58, 221, 68, 61, 139, 53, 236, 188, 206, 76, 209, 61, 153, 252, 58, 62, 61, 190, 67, 61, 44, 115, 30, 62, 202, 14, 135, 62, 64, 67, 54, 62, 233, 127, 45, 61, 121, 244, 25, 62, 122, 54, 15, 190, 180, 88, 210, 61, 197, 16, 129, 189, 179, 202, 60, 189, 137, 227, 19, 61, 71, 80, 23, 63, 135, 212, 7, 190, 38, 118, 123, 189, 72, 211, 247, 62, 38, 202, 0, 190, 99, 135, 6, 190, 203, 87, 144, 62, 23, 165, 78, 190, 19, 98, 174, 61, 180, 221, 163, 62, 25, 31, 44, 190, 209, 236, 147, 62, 200, 251, 138, 190, 133, 54, 20, 62, 73, 139, 164, 62, 184, 50, 71, 190, 222, 16, 134, 189, 87, 168, 204, 61, 248, 62, 26, 190, 167, 225, 21, 191, 202, 19, 147, 62, 212, 86, 251, 61, 100, 85, 156, 61, 59, 129, 229, 190, 17, 38, 168, 190, 246, 211, 27, 62, 61, 246, 136, 62, 135, 233, 76, 60, 0, 0, 21, 62, 82, 222, 152, 190, 177, 3, 64, 190, 95, 65, 219, 62, 120, 32, 162, 190, 40, 87, 239, 61, 82, 133, 22, 62, 129, 99, 31, 191, 240, 139, 71, 62, 24, 147, 43, 63, 89, 213, 169, 190, 134, 103, 209, 189, 191, 31, 180, 191, 188, 205, 156, 190, 218, 92, 113, 189, 193, 111, 113, 190, 134, 233, 106, 62, 136, 73, 60, 188, 250, 26, 10, 191, 136, 208, 246, 189, 9, 166, 122, 62, 159, 104, 14, 190, 199, 98, 133, 187, 10, 216, 51, 62, 234, 174, 140, 191, 232, 168, 152, 190, 108, 134, 114, 190, 95, 178, 66, 62, 102, 254, 28, 62, 244, 161, 0, 191, 38, 28, 68, 190, 143, 197, 158, 189, 107, 88, 223, 61, 180, 100, 43, 190, 253, 80, 56, 62, 199, 93, 180, 189, 53, 103, 46, 188, 187, 32, 9, 61, 143, 220, 177, 190, 51, 208, 132, 61, 154, 4, 69, 191, 127, 18, 50, 62, 108, 66, 5, 190, 239, 109, 150, 191, 255, 98, 153, 61, 226, 221, 51, 191, 83, 31, 142, 190, 115, 208, 53, 191, 240, 128, 160, 191, 122, 188, 29, 190, 122, 232, 134, 60, 69, 183, 30, 62, 207, 96, 35, 62, 95, 184, 212, 188, 8, 224, 212, 62, 224, 207, 253, 62, 199, 33, 144, 189, 17, 58, 141, 62, 89, 158, 77, 62, 84, 143, 118, 189, 133, 222, 112, 191, 160, 4, 211, 61, 114, 160, 1, 62, 118, 232, 142, 61, 231, 152, 1, 60, 140, 255, 131, 62, 225, 193, 104, 191, 81, 177, 236, 189, 82, 28, 47, 62, 117, 38, 212, 60, 254, 165, 144, 190, 100, 22, 171, 188, 59, 96, 100, 190, 104, 61, 133, 190, 168, 190, 135, 62, 165, 162, 51, 191, 237, 78, 224, 62, 162, 65, 196, 190, 188, 225, 146, 190, 179, 5, 209, 190, 0, 54, 237, 190, 22, 208, 233, 189, 129, 158, 197, 61, 166, 122, 129, 189, 162, 96, 89, 62, 154, 94, 196, 62, 73, 203, 83, 62, 96, 91, 156, 62, 42, 119, 7, 62, 88, 222, 222, 62, 165, 56, 34, 62, 26, 155, 44, 62, 195, 129, 81, 191, 191, 130, 53, 62, 233, 92, 157, 62, 134, 197, 138, 188, 141, 15, 17, 61, 109, 192, 37, 189, 106, 179, 157, 191, 53, 41, 63, 61, 119, 186, 235, 189, 36, 170, 35, 190, 73, 244, 132, 62, 117, 122, 225, 190, 102, 110, 6, 62, 231, 28, 137, 189, 9, 138, 7, 190, 220, 217, 61, 191, 221, 176, 129, 191, 20, 112, 214, 62, 55, 127, 149, 62, 71, 140, 222, 190, 62, 118, 181, 61, 236, 0, 207, 61, 89, 33, 74, 190, 71, 9, 166, 62, 157, 87, 118, 62, 122, 162, 143, 190, 166, 103, 84, 61, 247, 200, 5, 62, 28, 245, 104, 189, 6, 52, 210, 190, 25, 14, 25, 62, 135, 55, 178, 189, 70, 24, 88, 61, 211, 38, 120, 62, 38, 202, 101, 190, 164, 97, 37, 62, 172, 152, 207, 60, 32, 164, 176, 61, 25, 255, 143, 190, 138, 167, 96, 62, 49, 76, 238, 62, 22, 73, 168, 190, 75, 234, 44, 189, 127, 132, 60, 62, 12, 224, 96, 190, 200, 81, 25, 190, 112, 30, 17, 63, 75, 194, 51, 190, 65, 145, 171, 61, 240, 51, 59, 62, 95, 206, 241, 189, 113, 1, 173, 62, 30, 73, 212, 190, 222, 36, 172, 189, 12, 190, 149, 62, 72, 6, 65, 190, 77, 98, 180, 61, 139, 215, 214, 61, 98, 235, 182, 61, 109, 229, 225, 190, 233, 129, 22, 63, 178, 66, 34, 189, 109, 235, 74, 62, 84, 204, 134, 190, 31, 181, 48, 190, 159, 251, 67, 62, 254, 251, 194, 61, 152, 74, 74, 190, 254, 127, 250, 61, 186, 222, 238, 189, 107, 144, 179, 189, 255, 130, 122, 62, 144, 85, 46, 190, 186, 247, 204, 190, 159, 215, 173, 62, 28, 204, 170, 62, 158, 160, 151, 189, 126, 88, 52, 62, 196, 248, 181, 190, 237, 112, 231, 62, 217, 240, 31, 190, 108, 37, 33, 63, 137, 215, 21, 63, 87, 114, 18, 62, 234, 177, 158, 61, 181, 254, 124, 62, 250, 198, 208, 189, 52, 13, 144, 62, 230, 192, 219, 190, 98, 97, 178, 188, 104, 85, 186, 189, 189, 115, 0, 61, 39, 118, 155, 190, 19, 242, 173, 190, 226, 154, 60, 190, 156, 63, 93, 190, 147, 126, 13, 62, 47, 218, 76, 62, 200, 222, 136, 191, 227, 35, 225, 61, 44, 41, 122, 191, 224, 26, 51, 191, 30, 9, 149, 62, 21, 27, 245, 189, 185, 51, 178, 62, 19, 12, 223, 58, 70, 246, 82, 62, 132, 65, 27, 60, 3, 87, 14, 62, 64, 244, 204, 190, 157, 138, 50, 63, 110, 56, 8, 61, 254, 192, 15, 191, 186, 172, 235, 190, 4, 219, 227, 190, 203, 193, 19, 61, 181, 27, 220, 61, 164, 9, 5, 191, 121, 39, 211, 190, 44, 239, 104, 190, 226, 130, 16, 62, 150, 243, 2, 62, 234, 180, 6, 189, 154, 252, 173, 191, 157, 9, 17, 62, 55, 107, 170, 62, 202, 226, 63, 190, 37, 25, 231, 189, 46, 77, 135, 61, 45, 225, 10, 190, 161, 218, 194, 62, 161, 231, 239, 187, 182, 240, 173, 62, 183, 19, 34, 190, 196, 225, 173, 188, 151, 65, 74, 62, 205, 40, 56, 191, 170, 140, 186, 61, 16, 155, 66, 62, 207, 6, 111, 190, 10, 144, 199, 62, 193, 103, 176, 62, 55, 245, 140, 190, 184, 244, 27, 191, 233, 37, 237, 191, 9, 26, 126, 62, 191, 148, 251, 62, 3, 168, 254, 190, 254, 153, 189, 62, 142, 63, 224, 186, 212, 8, 76, 190, 167, 167, 167, 62, 172, 203, 33, 62, 151, 123, 28, 191, 132, 5, 137, 190, 93, 29, 170, 61, 201, 129, 228, 189, 17, 12, 129, 191, 220, 162, 197, 189, 32, 247, 152, 56, 102, 129, 37, 62, 43, 79, 44, 190, 101, 186, 77, 190, 151, 145, 122, 62, 135, 131, 113, 189, 8, 40, 120, 190, 47, 112, 25, 62, 124, 107, 129, 190, 133, 225, 217, 188, 133, 147, 108, 191, 73, 203, 68, 62, 20, 222, 106, 191, 69, 78, 135, 190, 191, 104, 246, 62, 75, 99, 153, 190, 183, 25, 234, 61, 5, 84, 182, 190, 58, 104, 110, 189, 73, 114, 175, 61, 100, 231, 128, 190, 88, 228, 47, 190, 155, 76, 119, 189, 72, 128, 104, 189, 36, 138, 132, 61, 90, 34, 20, 189, 33, 249, 146, 190, 52, 64, 209, 62, 57, 235, 166, 62, 227, 91, 104, 191, 180, 16, 220, 190, 148, 18, 41, 191, 30, 118, 21, 62, 119, 32, 32, 190, 250, 102, 141, 189, 64, 168, 128, 191, 213, 215, 16, 189, 54, 56, 75, 191, 47, 217, 80, 62, 27, 114, 134, 61, 143, 5, 129, 62, 251, 245, 10, 63, 174, 100, 65, 190, 67, 215, 212, 189, 227, 58, 43, 62, 156, 75, 228, 188, 138, 130, 25, 191, 12, 112, 159, 62, 199, 102, 151, 191, 47, 169, 80, 62, 152, 14, 48, 191, 96, 113, 86, 190, 203, 133, 217, 60, 225, 199, 167, 190, 92, 149, 181, 190, 141, 172, 127, 62, 129, 185, 33, 62, 0, 141, 49, 189, 168, 6, 79, 62, 135, 205, 155, 62, 178, 10, 73, 62, 169, 217, 229, 188, 234, 237, 168, 62, 9, 248, 224, 61, 108, 169, 248, 189, 60, 238, 209, 190, 172, 38, 226, 61, 32, 167, 84, 62, 18, 182, 140, 190, 3, 42, 94, 61, 149, 113, 225, 189, 155, 201, 58, 191, 237, 107, 135, 62, 164, 136, 69, 61, 182, 185, 55, 62, 14, 50, 252, 190, 70, 174, 14, 62, 28, 141, 223, 188, 120, 85, 63, 61, 230, 160, 11, 62, 215, 82, 220, 190, 230, 111, 169, 62, 106, 255, 97, 191, 182, 123, 167, 190, 209, 189, 215, 61, 196, 174, 21, 190, 19, 7, 167, 190, 91, 90, 162, 61, 102, 130, 188, 190, 37, 92, 87, 62, 247, 130, 145, 62, 7, 147, 147, 62, 120, 57, 191, 62, 45, 96, 39, 62, 6, 171, 45, 62, 125, 225, 194, 62, 8, 46, 135, 188, 196, 75, 146, 189, 37, 204, 102, 188, 100, 211, 29, 61, 183, 6, 238, 190, 135, 139, 98, 62, 85, 106, 18, 63, 203, 70, 33, 62, 28, 58, 48, 62, 28, 115, 45, 191, 11, 231, 192, 62, 52, 199, 171, 62, 0, 64, 236, 190, 244, 143, 170, 62, 59, 166, 213, 62, 54, 247, 0, 191, 200, 198, 230, 190, 77, 197, 52, 191, 239, 156, 37, 62, 136, 144, 129, 62, 233, 36, 157, 190, 246, 250, 100, 62, 83, 94, 186, 61, 61, 79, 52, 191, 102, 40, 157, 62, 248, 234, 106, 189, 26, 154, 194, 190, 214, 197, 150, 190, 57, 245, 72, 189, 178, 132, 89, 189, 104, 44, 3, 191, 167, 112, 7, 62, 83, 34, 15, 62, 128, 32, 78, 62, 105, 60, 122, 189, 186, 96, 201, 190, 81, 79, 86, 62, 153, 24, 0, 190, 51, 83, 79, 190, 247, 183, 51, 62, 159, 235, 191, 189, 131, 208, 181, 190, 219, 98, 135, 62, 246, 14, 141, 189, 28, 245, 25, 191, 236, 196, 135, 189, 133, 32, 250, 190, 107, 155, 38, 189, 242, 224, 14, 191, 123, 167, 160, 190, 11, 182, 190, 190, 213, 230, 151, 190, 233, 42, 217, 191, 90, 129, 132, 61, 64, 96, 45, 61, 180, 57, 52, 62, 231, 31, 134, 190, 147, 124, 123, 62, 217, 204, 177, 62, 110, 135, 187, 190, 54, 116, 7, 187, 95, 128, 106, 190, 242, 91, 115, 62, 23, 194, 18, 61, 59, 36, 62, 62, 17, 70, 3, 191, 9, 99, 223, 190, 173, 38, 65, 191, 71, 254, 171, 190, 51, 164, 72, 190, 59, 93, 248, 62, 227, 132, 121, 189, 52, 176, 53, 191, 242, 158, 11, 191, 177, 112, 184, 62, 152, 249, 146, 62, 232, 183, 254, 190, 99, 129, 177, 62, 127, 140, 165, 62, 144, 202, 174, 190, 129, 86, 106, 189, 51, 76, 14, 191, 15, 27, 47, 61, 247, 38, 105, 62, 145, 236, 4, 191, 109, 175, 232, 61, 148, 159, 63, 190, 17, 236, 62, 191, 63, 113, 147, 62, 33, 49, 7, 62, 212, 7, 5, 191, 86, 2, 163, 190, 183, 238, 153, 189, 111, 198, 84, 62, 168, 50, 16, 191, 41, 98, 1, 61, 196, 167, 122, 60, 2, 8, 179, 61, 136, 159, 16, 190, 2, 40, 39, 190, 172, 59, 16, 62, 151, 205, 161, 62, 129, 215, 208, 190, 14, 119, 62, 62, 182, 38, 143, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 79, 41, 62, 231, 166, 42, 189, 117, 195, 180, 62, 183, 67, 80, 190, 91, 22, 230, 61, 182, 145, 17, 62, 173, 244, 79, 62, 191, 129, 70, 62, 184, 19, 25, 190, 27, 203, 83, 62, 16, 86, 216, 189, 192, 209, 102, 62, 228, 60, 144, 189, 68, 101, 148, 61, 209, 182, 29, 62, 139, 66, 222, 59, 62, 78, 51, 62, 57, 255, 39, 190, 151, 161, 46, 61, 109, 7, 135, 62, 208, 14, 162, 189, 82, 123, 155, 61, 172, 210, 95, 190, 49, 204, 198, 190, 187, 216, 174, 189, 170, 239, 41, 62, 120, 114, 150, 59, 16, 169, 115, 61, 136, 171, 245, 61, 191, 84, 165, 61, 195, 56, 55, 62, 136, 211, 188, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 27, 126, 62, 240, 87, 82, 189, 252, 214, 123, 188, 173, 48, 35, 62, 197, 48, 71, 61, 50, 80, 176, 62, 118, 146, 114, 188, 90, 248, 39, 63, 181, 242, 84, 189, 55, 17, 248, 62, 76, 236, 131, 60, 101, 41, 20, 191, 94, 33, 190, 63, 186, 176, 214, 190, 103, 108, 125, 191, 48, 228, 131, 190, 160, 234, 250, 60, 166, 40, 250, 190, 168, 85, 37, 191, 52, 213, 52, 63, 14, 180, 223, 62, 71, 118, 133, 190, 169, 172, 181, 190, 97, 79, 164, 63, 68, 236, 232, 190, 108, 203, 27, 191, 73, 204, 77, 191, 43, 141, 186, 62, 220, 112, 235, 62, 80, 1, 130, 190, 144, 245, 133, 191, 126, 112, 158, 190, 188, 49, 70, 61, 139, 99, 34, 62, 26, 34, 111, 191, 14, 201, 83, 189, 14, 205, 235, 190, 168, 241, 131, 190, 161, 147, 180, 190, 237, 33, 136, 190, 97, 159, 8, 190, 65, 176, 150, 60, 104, 120, 56, 62, 214, 99, 243, 61, 30, 28, 8, 63, 137, 95, 9, 190, 16, 215, 19, 62, 234, 151, 159, 190, 167, 152, 153, 190, 183, 13, 137, 60, 8, 4, 18, 190, 94, 18, 77, 190, 169, 144, 141, 62, 93, 14, 201, 190, 250, 35, 29, 188, 181, 59, 161, 62, 94, 194, 151, 62, 245, 127, 105, 62, 73, 233, 151, 60, 243, 130, 43, 61, 245, 58, 119, 62, 116, 157, 74, 62, 210, 82, 43, 62, 192, 204, 45, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 236, 205, 189, 53, 99, 254, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {170, 185, 220, 63, 170, 205, 201, 189, 56, 66, 39, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {124, 248, 217, 191, 16, 254, 242, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0004/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}