// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 71, 32, 63, 62, 44, 29, 62, 103, 220, 168, 190, 41, 28, 19, 190, 58, 83, 119, 191, 175, 86, 95, 189, 231, 81, 157, 62, 203, 247, 118, 63, 57, 202, 51, 62, 12, 124, 230, 190, 247, 235, 59, 190, 253, 66, 254, 62, 197, 59, 31, 191, 204, 58, 153, 62, 155, 23, 33, 191, 132, 63, 8, 62, 231, 62, 164, 63, 203, 4, 13, 62, 18, 154, 3, 63, 205, 84, 213, 190, 188, 147, 123, 190, 108, 32, 36, 63, 156, 142, 23, 63, 140, 205, 171, 62, 245, 228, 253, 60, 171, 158, 115, 63, 64, 38, 60, 62, 13, 28, 66, 63, 51, 59, 46, 63, 180, 236, 152, 62, 99, 137, 31, 63, 180, 145, 194, 62, 92, 131, 176, 62, 184, 128, 11, 190, 247, 202, 53, 191, 210, 247, 121, 190, 136, 82, 87, 191, 54, 198, 59, 187, 199, 28, 133, 190, 156, 176, 76, 62, 131, 234, 76, 63, 185, 73, 182, 62, 236, 40, 117, 190, 61, 57, 165, 190, 3, 14, 72, 62, 18, 230, 157, 62, 129, 132, 29, 63, 124, 209, 251, 61, 61, 131, 64, 190, 114, 251, 194, 189, 65, 209, 44, 189, 35, 13, 196, 190, 189, 179, 132, 63, 119, 225, 73, 62, 203, 201, 30, 190, 218, 64, 43, 63, 129, 227, 159, 190, 49, 127, 193, 60, 156, 10, 168, 63, 191, 229, 147, 61, 188, 9, 242, 62, 25, 2, 74, 191, 64, 140, 93, 61, 108, 84, 70, 190, 83, 66, 155, 63, 231, 7, 140, 62, 200, 66, 153, 189, 86, 221, 9, 191, 31, 109, 106, 62, 91, 71, 4, 190, 44, 237, 218, 62, 7, 11, 144, 190, 68, 22, 57, 191, 131, 45, 152, 191, 59, 107, 203, 190, 210, 53, 91, 62, 20, 124, 1, 63, 32, 220, 141, 62, 218, 173, 231, 62, 206, 52, 158, 191, 214, 207, 142, 190, 182, 32, 142, 62, 220, 126, 73, 63, 37, 244, 5, 62, 137, 141, 240, 59, 139, 28, 94, 191, 2, 80, 20, 190, 85, 27, 128, 191, 193, 23, 8, 63, 142, 170, 63, 61, 98, 28, 11, 191, 151, 125, 173, 191, 160, 148, 133, 190, 34, 127, 142, 190, 52, 159, 203, 62, 28, 168, 235, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {100, 226, 143, 191, 109, 58, 171, 62, 93, 29, 15, 189, 7, 119, 4, 191, 26, 18, 5, 62, 242, 71, 197, 190, 202, 216, 179, 190, 64, 203, 117, 191, 176, 159, 180, 190, 15, 209, 39, 191, 60, 76, 5, 191, 251, 206, 137, 61, 203, 86, 214, 187, 179, 24, 150, 190, 173, 29, 79, 190, 59, 116, 37, 62, 173, 46, 11, 63, 10, 47, 2, 190, 192, 58, 43, 62, 2, 21, 187, 189, 100, 92, 214, 189, 230, 139, 196, 190, 35, 65, 29, 63, 244, 68, 203, 62, 110, 75, 4, 61, 191, 102, 105, 189, 63, 241, 121, 62, 197, 1, 180, 60, 215, 62, 190, 62, 127, 190, 175, 62, 87, 169, 154, 189, 211, 145, 228, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {134, 250, 161, 62, 181, 152, 84, 189, 63, 203, 195, 190, 76, 188, 206, 61, 34, 244, 138, 189, 172, 159, 152, 190, 62, 53, 168, 62, 163, 57, 4, 191, 75, 202, 66, 62, 177, 131, 163, 190, 242, 52, 117, 190, 218, 17, 93, 62, 236, 179, 28, 189, 135, 62, 60, 189, 90, 141, 89, 61, 127, 157, 243, 61, 38, 75, 197, 189, 36, 41, 8, 62, 182, 120, 133, 62, 118, 220, 118, 189, 140, 44, 130, 189, 161, 81, 124, 62, 7, 229, 18, 62, 115, 107, 192, 61, 100, 201, 42, 60, 177, 232, 63, 61, 173, 68, 74, 61, 32, 94, 190, 189, 209, 239, 67, 189, 182, 209, 120, 190, 101, 240, 1, 191, 79, 53, 82, 188, 9, 173, 33, 62, 183, 34, 47, 190, 159, 167, 1, 190, 227, 224, 65, 59, 204, 13, 5, 190, 229, 33, 152, 61, 167, 235, 171, 61, 202, 89, 34, 190, 65, 212, 97, 61, 116, 213, 207, 188, 7, 173, 98, 188, 205, 46, 225, 61, 172, 133, 81, 189, 116, 141, 236, 61, 84, 243, 169, 189, 13, 56, 126, 61, 247, 133, 22, 62, 15, 206, 161, 189, 234, 75, 179, 61, 28, 177, 172, 189, 241, 211, 36, 190, 221, 88, 101, 61, 91, 15, 175, 189, 180, 106, 25, 190, 94, 196, 19, 189, 228, 51, 129, 60, 140, 144, 180, 189, 217, 179, 141, 189, 61, 21, 80, 189, 37, 128, 44, 60, 125, 78, 52, 190, 203, 58, 21, 190, 228, 187, 96, 62, 95, 169, 201, 190, 229, 84, 222, 189, 67, 175, 122, 187, 111, 118, 181, 190, 130, 246, 2, 191, 179, 155, 46, 190, 134, 172, 132, 188, 23, 7, 25, 62, 78, 121, 150, 189, 251, 3, 161, 62, 51, 86, 27, 191, 36, 224, 137, 190, 100, 153, 25, 190, 11, 5, 44, 190, 222, 109, 0, 63, 134, 95, 106, 62, 236, 76, 130, 61, 124, 153, 191, 58, 66, 161, 18, 190, 42, 111, 19, 190, 200, 151, 215, 190, 48, 140, 159, 62, 36, 179, 47, 62, 0, 254, 9, 191, 199, 151, 18, 62, 232, 75, 142, 62, 82, 106, 23, 62, 239, 44, 159, 61, 157, 103, 12, 190, 13, 126, 153, 191, 84, 124, 164, 61, 249, 165, 77, 62, 48, 244, 81, 189, 114, 169, 241, 189, 132, 139, 144, 188, 128, 232, 132, 61, 154, 193, 140, 61, 213, 39, 121, 189, 111, 195, 33, 62, 72, 231, 24, 190, 132, 106, 195, 189, 96, 212, 227, 60, 154, 248, 189, 61, 78, 134, 34, 189, 168, 54, 219, 189, 131, 22, 59, 190, 181, 212, 174, 190, 66, 200, 243, 57, 244, 42, 32, 190, 236, 117, 12, 62, 206, 54, 185, 61, 72, 25, 83, 190, 237, 229, 103, 190, 89, 158, 7, 191, 39, 226, 117, 190, 82, 122, 49, 62, 44, 237, 69, 61, 77, 200, 188, 188, 243, 153, 21, 190, 167, 250, 164, 189, 108, 115, 55, 190, 195, 73, 9, 190, 255, 250, 223, 189, 157, 127, 97, 190, 157, 115, 19, 190, 52, 193, 234, 187, 149, 254, 255, 61, 52, 45, 5, 191, 210, 53, 13, 190, 194, 189, 215, 190, 189, 44, 127, 190, 226, 249, 33, 62, 175, 253, 191, 189, 71, 46, 30, 62, 174, 249, 1, 62, 167, 42, 221, 190, 48, 201, 171, 188, 90, 207, 184, 189, 39, 44, 154, 62, 179, 188, 75, 62, 112, 198, 116, 189, 126, 196, 83, 61, 198, 43, 101, 62, 156, 225, 140, 190, 140, 179, 124, 62, 149, 126, 89, 62, 59, 193, 37, 190, 131, 202, 94, 190, 171, 206, 1, 62, 140, 177, 31, 62, 210, 53, 216, 189, 174, 173, 150, 61, 221, 78, 237, 189, 176, 36, 200, 189, 196, 206, 117, 189, 217, 4, 218, 61, 252, 4, 98, 62, 99, 216, 226, 190, 1, 126, 41, 189, 52, 63, 101, 189, 119, 184, 218, 189, 132, 99, 142, 61, 137, 199, 99, 191, 69, 44, 82, 62, 238, 48, 105, 191, 208, 167, 197, 190, 9, 148, 127, 62, 172, 127, 78, 190, 168, 240, 242, 189, 245, 140, 144, 61, 60, 8, 33, 187, 76, 169, 174, 62, 188, 125, 254, 61, 172, 244, 75, 62, 47, 240, 63, 62, 67, 54, 35, 62, 102, 79, 101, 62, 159, 231, 154, 62, 240, 39, 89, 62, 244, 153, 72, 61, 10, 214, 34, 189, 170, 76, 134, 61, 37, 23, 167, 188, 133, 215, 135, 62, 21, 237, 133, 62, 226, 69, 17, 62, 13, 33, 158, 61, 65, 248, 145, 62, 93, 19, 218, 61, 223, 111, 97, 190, 7, 78, 131, 60, 12, 24, 0, 62, 110, 26, 40, 189, 245, 225, 128, 59, 82, 75, 174, 190, 17, 242, 170, 61, 228, 185, 154, 190, 38, 208, 42, 61, 103, 211, 23, 62, 193, 213, 66, 190, 117, 73, 193, 189, 65, 250, 148, 60, 103, 176, 73, 62, 129, 98, 89, 62, 119, 62, 234, 60, 19, 190, 161, 61, 139, 217, 9, 190, 104, 124, 179, 61, 192, 91, 175, 60, 162, 144, 253, 61, 218, 135, 1, 62, 19, 208, 217, 187, 240, 20, 9, 190, 49, 86, 105, 61, 1, 132, 29, 62, 228, 209, 125, 62, 63, 11, 14, 190, 32, 244, 178, 61, 74, 93, 149, 61, 162, 75, 6, 189, 77, 24, 23, 191, 145, 52, 171, 190, 156, 112, 59, 189, 37, 219, 178, 190, 189, 0, 231, 191, 100, 211, 22, 62, 187, 62, 244, 61, 158, 231, 165, 190, 205, 32, 219, 189, 25, 106, 79, 61, 108, 60, 133, 61, 213, 208, 13, 191, 7, 138, 50, 191, 1, 77, 66, 190, 6, 174, 50, 62, 206, 13, 49, 62, 234, 95, 39, 60, 90, 27, 111, 62, 155, 50, 151, 62, 162, 210, 82, 62, 148, 245, 17, 63, 197, 143, 115, 189, 23, 105, 53, 62, 167, 53, 58, 191, 163, 109, 76, 190, 202, 181, 238, 61, 229, 196, 79, 190, 94, 92, 144, 61, 76, 105, 100, 62, 209, 238, 20, 191, 143, 184, 135, 189, 79, 54, 57, 190, 193, 155, 227, 61, 76, 204, 5, 61, 135, 8, 112, 189, 177, 252, 106, 61, 99, 110, 34, 62, 175, 148, 37, 190, 95, 66, 27, 62, 248, 173, 3, 190, 38, 62, 148, 189, 58, 247, 134, 60, 185, 177, 54, 61, 95, 169, 88, 189, 213, 45, 24, 190, 162, 141, 236, 61, 21, 69, 201, 188, 206, 86, 103, 188, 33, 73, 36, 190, 140, 6, 43, 187, 19, 62, 30, 61, 109, 145, 212, 61, 201, 12, 23, 190, 175, 217, 241, 189, 185, 95, 142, 189, 62, 22, 131, 61, 89, 17, 44, 61, 175, 168, 59, 189, 120, 9, 178, 189, 73, 10, 159, 189, 84, 45, 219, 189, 126, 213, 54, 188, 47, 223, 210, 189, 55, 38, 142, 62, 121, 163, 78, 189, 26, 68, 190, 190, 127, 160, 185, 61, 237, 135, 169, 190, 254, 236, 31, 190, 20, 215, 22, 62, 163, 170, 94, 191, 192, 171, 178, 62, 198, 206, 127, 191, 167, 51, 251, 190, 153, 55, 40, 190, 15, 60, 173, 190, 129, 35, 154, 190, 221, 79, 197, 61, 166, 37, 15, 61, 243, 170, 7, 62, 84, 56, 35, 62, 176, 248, 119, 62, 77, 233, 53, 62, 255, 119, 137, 62, 177, 135, 253, 62, 83, 185, 103, 62, 210, 145, 141, 189, 115, 132, 3, 191, 12, 32, 107, 60, 72, 26, 183, 62, 8, 125, 153, 189, 141, 137, 111, 62, 7, 9, 106, 189, 85, 64, 181, 189, 191, 22, 35, 61, 121, 247, 8, 190, 175, 181, 29, 190, 75, 20, 143, 189, 10, 71, 167, 189, 5, 20, 79, 61, 50, 90, 198, 189, 192, 66, 178, 189, 244, 244, 18, 190, 101, 62, 218, 189, 21, 180, 20, 188, 230, 243, 81, 190, 177, 148, 189, 60, 27, 78, 166, 57, 222, 243, 71, 190, 50, 23, 65, 61, 158, 170, 23, 62, 6, 170, 17, 190, 111, 203, 236, 188, 96, 26, 196, 188, 139, 102, 0, 62, 36, 233, 34, 190, 55, 203, 76, 61, 99, 23, 4, 62, 158, 154, 117, 190, 143, 239, 209, 189, 236, 246, 25, 188, 235, 230, 147, 60, 107, 7, 80, 61, 200, 61, 77, 190, 183, 161, 212, 61, 125, 14, 90, 60, 43, 93, 113, 187, 75, 252, 0, 191, 248, 24, 244, 61, 157, 122, 196, 62, 212, 93, 191, 190, 87, 4, 69, 62, 219, 231, 10, 61, 41, 2, 80, 190, 198, 189, 121, 191, 213, 1, 64, 191, 179, 78, 196, 62, 163, 167, 134, 62, 93, 87, 200, 190, 145, 149, 102, 62, 108, 93, 206, 62, 167, 129, 11, 190, 138, 184, 187, 62, 147, 120, 150, 60, 158, 3, 92, 190, 76, 199, 246, 189, 133, 55, 232, 61, 245, 177, 139, 190, 44, 250, 2, 191, 35, 142, 145, 61, 162, 35, 217, 60, 140, 255, 114, 62, 226, 190, 148, 61, 200, 45, 99, 190, 105, 53, 17, 62, 22, 35, 0, 190, 73, 68, 99, 60, 102, 27, 44, 62, 53, 178, 91, 190, 189, 165, 18, 63, 202, 93, 27, 60, 223, 28, 16, 191, 170, 180, 231, 61, 39, 176, 230, 189, 104, 38, 224, 190, 49, 20, 253, 62, 208, 145, 140, 191, 44, 254, 49, 62, 70, 202, 148, 191, 157, 188, 18, 191, 94, 76, 15, 61, 203, 93, 159, 190, 65, 248, 172, 190, 194, 232, 168, 61, 148, 192, 176, 190, 180, 216, 90, 61, 224, 252, 156, 62, 169, 203, 153, 62, 166, 112, 35, 62, 133, 173, 21, 63, 1, 22, 45, 63, 228, 10, 168, 62, 38, 191, 254, 189, 30, 40, 63, 190, 152, 83, 157, 60, 54, 130, 152, 62, 112, 143, 7, 191, 78, 225, 81, 61, 168, 9, 28, 189, 52, 56, 127, 190, 116, 39, 86, 62, 213, 90, 5, 191, 28, 123, 35, 61, 120, 184, 54, 62, 109, 166, 112, 190, 169, 197, 141, 62, 147, 172, 155, 61, 10, 131, 168, 190, 126, 88, 78, 191, 16, 251, 115, 191, 97, 220, 158, 62, 221, 235, 175, 62, 1, 44, 233, 190, 13, 184, 162, 62, 78, 70, 150, 62, 208, 72, 151, 190, 81, 49, 161, 62, 72, 26, 209, 61, 39, 35, 17, 190, 27, 185, 107, 190, 88, 173, 99, 62, 23, 217, 206, 190, 131, 72, 5, 191, 214, 26, 88, 61, 202, 255, 5, 62, 147, 229, 95, 60, 119, 219, 109, 62, 234, 173, 143, 189, 159, 183, 140, 62, 8, 55, 44, 62, 121, 212, 33, 61, 166, 86, 28, 62, 125, 46, 139, 190, 79, 237, 91, 190, 34, 197, 232, 61, 51, 134, 145, 190, 37, 255, 88, 191, 109, 250, 244, 188, 105, 187, 95, 61, 166, 19, 147, 61, 10, 63, 49, 190, 175, 236, 78, 191, 149, 70, 22, 190, 233, 223, 180, 190, 199, 51, 44, 191, 137, 74, 149, 60, 21, 207, 44, 191, 239, 100, 248, 60, 42, 47, 114, 62, 8, 168, 219, 188, 160, 224, 231, 188, 164, 13, 43, 190, 82, 58, 145, 190, 229, 218, 159, 189, 163, 152, 5, 63, 139, 14, 33, 62, 67, 206, 39, 61, 137, 13, 67, 190, 114, 144, 156, 191, 247, 214, 32, 190, 169, 149, 245, 190, 172, 210, 80, 187, 158, 183, 116, 62, 107, 85, 41, 61, 97, 146, 166, 190, 64, 53, 48, 190, 29, 39, 223, 189, 82, 102, 138, 62, 30, 70, 144, 187, 247, 133, 141, 61, 225, 184, 36, 62, 194, 215, 235, 190, 112, 4, 17, 191, 254, 79, 16, 191, 107, 92, 98, 188, 38, 151, 211, 62, 236, 193, 250, 190, 150, 72, 179, 61, 175, 20, 207, 61, 27, 92, 123, 190, 103, 212, 116, 62, 17, 160, 144, 62, 30, 127, 138, 190, 227, 232, 85, 189, 107, 113, 167, 61, 92, 134, 221, 189, 102, 8, 241, 190, 91, 205, 41, 62, 41, 48, 142, 62, 147, 39, 164, 60, 228, 34, 171, 61, 113, 96, 110, 190, 187, 99, 123, 62, 181, 199, 199, 189, 177, 203, 33, 61, 9, 104, 157, 190, 199, 148, 142, 189, 224, 120, 93, 61, 21, 207, 76, 62, 210, 151, 182, 190, 23, 127, 0, 62, 2, 245, 219, 189, 182, 44, 17, 190, 12, 52, 185, 61, 240, 221, 57, 191, 243, 9, 142, 62, 129, 53, 29, 191, 199, 67, 67, 189, 4, 23, 78, 189, 196, 201, 167, 189, 181, 15, 78, 189, 6, 168, 30, 189, 64, 182, 4, 62, 34, 194, 175, 62, 58, 171, 21, 62, 147, 10, 162, 189, 73, 93, 134, 189, 183, 20, 46, 62, 39, 139, 6, 62, 242, 197, 35, 62, 242, 84, 130, 62, 198, 203, 4, 62, 202, 187, 126, 61, 24, 227, 32, 62, 183, 175, 225, 189, 70, 106, 193, 61, 20, 50, 56, 61, 22, 148, 214, 189, 0, 14, 140, 61, 171, 186, 9, 63, 28, 56, 116, 189, 67, 241, 36, 60, 204, 158, 254, 62, 244, 46, 35, 190, 116, 74, 151, 189, 140, 223, 121, 62, 185, 61, 181, 189, 140, 235, 7, 62, 148, 88, 234, 62, 177, 169, 126, 188, 213, 130, 65, 62, 254, 156, 12, 190, 155, 183, 70, 62, 202, 146, 196, 62, 181, 83, 5, 190, 145, 215, 116, 189, 170, 69, 218, 61, 59, 44, 158, 61, 173, 209, 136, 190, 67, 82, 157, 62, 254, 10, 21, 62, 232, 102, 236, 61, 55, 221, 174, 190, 106, 17, 186, 190, 193, 79, 87, 62, 113, 168, 137, 62, 216, 60, 165, 61, 67, 244, 25, 62, 240, 92, 162, 190, 121, 40, 92, 190, 12, 164, 204, 62, 192, 60, 155, 190, 116, 214, 187, 61, 59, 161, 77, 62, 45, 73, 8, 191, 161, 46, 56, 62, 184, 93, 33, 63, 7, 248, 158, 190, 208, 10, 222, 189, 91, 55, 148, 191, 44, 195, 160, 190, 225, 116, 160, 189, 29, 131, 106, 190, 91, 141, 113, 62, 32, 14, 21, 62, 69, 248, 197, 190, 224, 204, 86, 189, 229, 208, 159, 62, 12, 55, 143, 60, 39, 38, 151, 187, 109, 95, 9, 62, 107, 113, 127, 191, 207, 39, 229, 189, 10, 39, 21, 190, 118, 11, 98, 62, 182, 75, 32, 62, 13, 111, 204, 190, 117, 150, 74, 190, 53, 62, 108, 188, 96, 194, 5, 62, 108, 130, 152, 60, 54, 221, 19, 62, 217, 10, 6, 190, 25, 125, 174, 190, 241, 203, 112, 188, 248, 67, 202, 190, 69, 76, 189, 61, 250, 161, 79, 191, 106, 125, 166, 61, 218, 130, 237, 189, 59, 232, 140, 191, 248, 211, 201, 188, 147, 192, 64, 191, 229, 139, 171, 190, 236, 237, 65, 191, 150, 159, 151, 191, 15, 115, 39, 190, 221, 190, 10, 188, 230, 36, 6, 62, 144, 211, 44, 62, 228, 164, 150, 189, 10, 251, 79, 62, 66, 113, 147, 62, 19, 144, 57, 189, 22, 126, 83, 62, 79, 207, 119, 62, 183, 102, 38, 190, 1, 9, 60, 191, 151, 8, 181, 61, 159, 173, 20, 62, 238, 236, 251, 60, 233, 12, 4, 61, 110, 57, 120, 62, 117, 0, 58, 191, 79, 178, 146, 190, 17, 101, 107, 62, 36, 23, 252, 188, 35, 161, 168, 190, 80, 166, 39, 189, 187, 193, 41, 190, 11, 12, 183, 190, 29, 24, 132, 62, 8, 198, 38, 191, 166, 160, 153, 62, 12, 226, 212, 190, 39, 29, 163, 190, 78, 175, 143, 190, 230, 46, 162, 190, 33, 253, 47, 190, 74, 211, 44, 60, 249, 61, 175, 189, 212, 255, 103, 62, 89, 174, 155, 62, 0, 80, 17, 62, 159, 176, 62, 62, 80, 50, 50, 62, 41, 47, 170, 62, 255, 34, 76, 62, 119, 11, 235, 61, 201, 97, 32, 191, 188, 192, 30, 62, 19, 255, 167, 62, 139, 234, 99, 189, 186, 52, 126, 61, 116, 198, 132, 189, 86, 66, 128, 191, 119, 74, 170, 61, 53, 212, 26, 190, 100, 66, 228, 189, 83, 202, 136, 62, 35, 204, 178, 190, 251, 54, 83, 61, 194, 182, 137, 189, 174, 243, 249, 189, 187, 143, 78, 191, 197, 229, 89, 191, 24, 197, 194, 62, 124, 250, 112, 62, 86, 140, 217, 190, 40, 179, 165, 57, 199, 78, 54, 62, 12, 216, 178, 61, 146, 55, 164, 62, 77, 93, 87, 62, 120, 13, 24, 190, 218, 244, 141, 60, 76, 168, 182, 61, 111, 72, 238, 189, 183, 225, 139, 190, 97, 77, 156, 61, 193, 134, 168, 189, 56, 42, 166, 61, 97, 60, 100, 62, 47, 219, 121, 190, 91, 184, 45, 62, 7, 137, 105, 186, 247, 204, 189, 61, 27, 163, 141, 190, 246, 157, 235, 61, 134, 227, 214, 62, 174, 199, 139, 190, 148, 114, 12, 59, 63, 28, 79, 62, 66, 57, 114, 190, 201, 48, 139, 189, 144, 196, 242, 62, 124, 146, 132, 189, 191, 37, 19, 62, 137, 228, 159, 62, 112, 220, 21, 61, 63, 122, 110, 62, 145, 197, 141, 190, 54, 13, 4, 189, 249, 207, 186, 62, 54, 136, 25, 190, 29, 74, 165, 61, 218, 189, 237, 61, 150, 75, 107, 62, 100, 147, 208, 189, 89, 171, 21, 63, 95, 67, 25, 188, 6, 207, 105, 62, 19, 166, 61, 190, 32, 130, 99, 190, 167, 23, 131, 62, 149, 233, 127, 61, 71, 237, 32, 190, 164, 178, 198, 61, 115, 90, 11, 190, 236, 102, 4, 190, 100, 249, 106, 62, 163, 74, 30, 190, 33, 61, 157, 190, 125, 15, 154, 62, 81, 242, 46, 62, 91, 203, 148, 61, 136, 8, 6, 62, 34, 59, 105, 190, 15, 109, 186, 62, 176, 209, 127, 190, 46, 173, 5, 63, 147, 87, 227, 62, 95, 117, 186, 61, 45, 190, 158, 61, 51, 209, 29, 62, 194, 135, 46, 190, 88, 250, 129, 62, 80, 135, 151, 190, 93, 35, 215, 189, 154, 244, 37, 62, 79, 209, 16, 61, 134, 202, 175, 190, 151, 39, 216, 190, 95, 234, 140, 190, 125, 177, 28, 60, 147, 126, 13, 62, 161, 247, 199, 61, 50, 178, 222, 190, 77, 109, 160, 61, 187, 137, 72, 191, 218, 150, 68, 191, 62, 152, 148, 62, 17, 120, 124, 189, 141, 122, 0, 62, 20, 129, 164, 61, 233, 15, 131, 62, 126, 168, 179, 61, 207, 110, 19, 61, 58, 246, 190, 190, 149, 65, 11, 63, 110, 56, 8, 61, 102, 176, 7, 191, 197, 180, 184, 190, 214, 49, 178, 190, 141, 190, 199, 61, 206, 44, 129, 61, 55, 75, 6, 191, 192, 127, 80, 190, 47, 85, 77, 190, 225, 156, 101, 62, 180, 81, 110, 62, 212, 13, 7, 190, 238, 13, 134, 191, 97, 24, 252, 61, 72, 225, 150, 62, 142, 62, 1, 190, 139, 249, 230, 189, 152, 69, 178, 61, 158, 28, 182, 189, 20, 84, 162, 62, 124, 185, 17, 61, 126, 94, 169, 62, 73, 125, 216, 61, 66, 225, 142, 61, 64, 26, 171, 188, 179, 180, 48, 191, 254, 123, 5, 62, 174, 115, 90, 62, 155, 222, 250, 189, 145, 87, 184, 62, 231, 211, 153, 62, 7, 105, 167, 190, 206, 250, 11, 191, 127, 22, 182, 191, 14, 30, 170, 62, 139, 243, 17, 63, 76, 184, 241, 190, 154, 244, 201, 62, 99, 124, 140, 62, 106, 28, 57, 188, 187, 65, 173, 62, 39, 20, 65, 62, 154, 96, 38, 190, 151, 206, 132, 190, 144, 92, 245, 61, 0, 128, 17, 190, 72, 12, 31, 191, 57, 226, 196, 189, 118, 145, 194, 60, 187, 4, 52, 62, 211, 182, 198, 189, 134, 239, 117, 190, 123, 144, 135, 62, 29, 92, 181, 189, 143, 143, 47, 61, 194, 51, 5, 62, 179, 235, 160, 190, 119, 99, 140, 61, 20, 89, 77, 191, 233, 36, 134, 62, 233, 139, 63, 191, 113, 84, 129, 190, 43, 232, 243, 62, 55, 242, 231, 189, 124, 218, 170, 189, 148, 17, 64, 190, 53, 85, 90, 189, 104, 38, 149, 61, 233, 191, 104, 190, 128, 67, 60, 190, 61, 126, 6, 188, 248, 132, 35, 189, 237, 14, 30, 62, 189, 26, 30, 187, 129, 30, 57, 190, 76, 222, 223, 62, 57, 169, 183, 62, 19, 123, 113, 190, 46, 242, 143, 190, 194, 173, 12, 191, 186, 27, 65, 62, 126, 17, 142, 189, 45, 233, 187, 60, 90, 16, 26, 191, 11, 137, 56, 61, 213, 97, 232, 190, 153, 66, 60, 62, 73, 106, 196, 189, 94, 23, 142, 62, 114, 228, 5, 63, 195, 241, 87, 190, 57, 107, 194, 189, 141, 147, 48, 62, 75, 9, 248, 60, 93, 1, 255, 190, 123, 47, 182, 62, 164, 9, 143, 191, 90, 45, 32, 62, 247, 133, 47, 191, 134, 0, 118, 190, 148, 189, 12, 62, 135, 139, 131, 190, 77, 254, 182, 190, 202, 158, 69, 62, 228, 235, 42, 62, 61, 2, 212, 60, 196, 133, 69, 62, 194, 245, 163, 62, 39, 170, 80, 62, 46, 36, 82, 60, 35, 231, 150, 62, 247, 171, 39, 62, 233, 255, 235, 189, 172, 121, 175, 190, 13, 153, 235, 61, 80, 103, 114, 62, 205, 84, 136, 190, 88, 12, 230, 61, 222, 154, 178, 187, 224, 204, 246, 190, 147, 116, 162, 62, 178, 49, 129, 61, 4, 83, 30, 61, 253, 15, 227, 190, 170, 102, 11, 62, 24, 70, 27, 189, 125, 169, 181, 60, 83, 253, 56, 62, 8, 201, 161, 190, 113, 158, 172, 62, 194, 211, 82, 191, 217, 209, 193, 190, 230, 204, 78, 61, 168, 103, 67, 190, 212, 14, 148, 190, 29, 126, 17, 59, 183, 101, 190, 190, 55, 58, 203, 61, 123, 11, 133, 62, 105, 144, 131, 62, 227, 226, 177, 62, 254, 164, 0, 62, 212, 4, 54, 62, 80, 221, 162, 62, 124, 186, 173, 189, 36, 221, 247, 189, 178, 97, 63, 60, 93, 118, 21, 61, 115, 250, 217, 190, 82, 103, 52, 62, 18, 206, 199, 62, 112, 108, 2, 62, 1, 87, 107, 62, 80, 243, 41, 191, 193, 138, 233, 62, 131, 30, 186, 62, 91, 242, 177, 190, 11, 54, 159, 62, 241, 153, 215, 62, 247, 169, 4, 191, 186, 106, 39, 191, 224, 19, 13, 191, 221, 255, 37, 62, 96, 184, 122, 62, 182, 192, 116, 190, 33, 4, 85, 62, 86, 238, 178, 61, 26, 87, 224, 190, 26, 128, 164, 62, 100, 81, 217, 188, 207, 243, 109, 190, 69, 178, 131, 190, 167, 61, 51, 61, 111, 206, 140, 189, 106, 199, 191, 190, 42, 15, 244, 61, 182, 44, 60, 62, 197, 245, 123, 62, 233, 62, 73, 189, 113, 195, 200, 190, 202, 28, 113, 62, 65, 131, 232, 189, 79, 104, 202, 188, 88, 31, 112, 62, 129, 204, 38, 190, 131, 208, 181, 190, 176, 255, 95, 62, 209, 248, 231, 188, 127, 146, 7, 191, 55, 77, 55, 189, 59, 85, 3, 191, 107, 155, 38, 189, 117, 140, 182, 190, 242, 200, 124, 190, 112, 105, 91, 190, 128, 1, 32, 190, 58, 149, 137, 191, 45, 175, 131, 61, 9, 99, 250, 61, 42, 65, 90, 62, 254, 145, 85, 190, 179, 8, 145, 62, 216, 234, 192, 62, 220, 30, 219, 190, 208, 172, 174, 189, 111, 193, 162, 190, 234, 106, 144, 62, 16, 226, 152, 61, 239, 55, 49, 62, 117, 118, 35, 189, 28, 26, 196, 190, 160, 202, 0, 191, 36, 2, 155, 190, 227, 113, 168, 189, 239, 247, 5, 63, 233, 80, 112, 61, 212, 178, 218, 190, 142, 162, 7, 191, 178, 240, 180, 62, 53, 177, 171, 62, 47, 203, 249, 190, 134, 221, 174, 62, 100, 187, 196, 62, 34, 0, 180, 190, 4, 78, 45, 190, 157, 173, 104, 190, 12, 243, 148, 61, 2, 211, 115, 62, 47, 69, 4, 191, 74, 161, 27, 62, 24, 165, 92, 187, 64, 159, 251, 190, 226, 97, 159, 62, 234, 148, 247, 61, 196, 199, 91, 190, 205, 75, 138, 190, 220, 164, 28, 61, 71, 186, 25, 62, 173, 157, 136, 190, 163, 52, 234, 188, 218, 85, 130, 61, 6, 32, 222, 61, 2, 60, 202, 189, 238, 99, 73, 190, 46, 185, 59, 62, 243, 145, 142, 62, 38, 172, 62, 189, 227, 242, 51, 62, 177, 4, 229, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 119, 96, 62, 231, 166, 42, 189, 213, 9, 188, 62, 186, 136, 76, 190, 214, 78, 16, 62, 181, 204, 20, 62, 204, 110, 126, 62, 9, 131, 91, 62, 184, 19, 25, 190, 14, 65, 103, 62, 16, 86, 216, 189, 15, 161, 99, 62, 175, 180, 19, 189, 41, 163, 112, 61, 243, 73, 235, 61, 52, 29, 136, 188, 47, 88, 80, 62, 138, 228, 255, 189, 162, 36, 25, 62, 107, 249, 137, 62, 146, 28, 141, 189, 153, 153, 89, 61, 193, 157, 86, 190, 68, 8, 179, 190, 143, 144, 7, 189, 57, 225, 45, 62, 167, 176, 188, 61, 2, 208, 198, 61, 162, 243, 99, 61, 204, 120, 196, 61, 83, 214, 92, 62, 66, 126, 29, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 218, 21, 62, 240, 87, 82, 189, 195, 179, 122, 188, 246, 93, 35, 62, 107, 172, 172, 60, 78, 51, 194, 62, 177, 90, 128, 60, 47, 17, 48, 63, 181, 242, 84, 189, 36, 74, 14, 63, 76, 236, 131, 60, 116, 18, 29, 191, 105, 249, 158, 63, 83, 51, 231, 190, 22, 156, 23, 191, 146, 201, 155, 190, 50, 175, 190, 61, 46, 128, 5, 191, 103, 20, 15, 191, 103, 82, 66, 63, 8, 154, 9, 63, 117, 174, 145, 190, 128, 69, 199, 190, 100, 112, 148, 63, 160, 138, 191, 190, 164, 74, 35, 191, 213, 246, 38, 191, 183, 24, 248, 62, 225, 180, 198, 62, 227, 183, 176, 190, 112, 15, 86, 191, 45, 6, 161, 190, 190, 22, 242, 189, 139, 99, 34, 62, 188, 96, 87, 191, 33, 115, 84, 189, 159, 10, 178, 190, 116, 45, 118, 190, 0, 135, 151, 190, 4, 40, 233, 189, 97, 159, 8, 190, 113, 229, 47, 189, 104, 120, 56, 62, 172, 53, 55, 62, 0, 217, 186, 62, 130, 110, 152, 189, 229, 254, 130, 62, 216, 94, 26, 190, 60, 46, 153, 190, 225, 124, 229, 60, 63, 206, 138, 190, 191, 236, 114, 190, 116, 183, 62, 62, 59, 5, 110, 190, 52, 46, 116, 58, 169, 23, 131, 62, 192, 236, 35, 62, 172, 30, 105, 62, 155, 132, 174, 61, 156, 168, 44, 61, 146, 165, 66, 62, 192, 236, 107, 62, 3, 131, 143, 61, 255, 221, 218, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 196, 221, 189, 0, 249, 223, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {180, 255, 24, 191, 183, 47, 17, 62, 11, 237, 229, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {206, 212, 8, 192, 188, 174, 75, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0004/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}