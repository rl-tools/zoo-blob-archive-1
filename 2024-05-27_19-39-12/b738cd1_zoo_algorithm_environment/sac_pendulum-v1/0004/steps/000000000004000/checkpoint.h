// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 229, 244, 189, 173, 191, 115, 62, 41, 25, 244, 190, 228, 16, 171, 190, 231, 107, 10, 191, 236, 132, 38, 61, 85, 69, 131, 62, 147, 88, 80, 63, 50, 26, 27, 62, 248, 203, 214, 190, 234, 117, 227, 190, 90, 252, 7, 63, 10, 160, 10, 191, 78, 25, 55, 63, 25, 1, 32, 191, 27, 241, 42, 62, 243, 108, 85, 63, 154, 168, 37, 62, 242, 16, 180, 62, 169, 244, 1, 191, 20, 90, 159, 190, 155, 68, 19, 62, 91, 19, 152, 62, 206, 210, 122, 62, 33, 64, 73, 190, 88, 154, 102, 62, 226, 121, 206, 61, 166, 240, 33, 63, 13, 240, 57, 63, 131, 193, 144, 62, 46, 127, 16, 63, 3, 227, 104, 62, 106, 174, 192, 62, 28, 88, 189, 189, 68, 173, 204, 190, 156, 150, 89, 190, 69, 148, 219, 190, 80, 95, 250, 62, 20, 130, 209, 190, 115, 130, 19, 62, 37, 166, 18, 63, 115, 255, 207, 62, 121, 52, 77, 190, 215, 250, 196, 190, 217, 236, 177, 62, 67, 119, 162, 62, 148, 213, 172, 62, 212, 116, 111, 61, 98, 69, 162, 61, 157, 148, 60, 190, 157, 120, 132, 189, 248, 39, 155, 190, 150, 77, 93, 62, 48, 211, 10, 63, 85, 74, 218, 60, 61, 0, 227, 62, 6, 229, 164, 190, 220, 161, 226, 188, 16, 41, 37, 63, 97, 106, 155, 62, 63, 65, 183, 62, 26, 81, 84, 191, 110, 105, 13, 190, 214, 193, 11, 191, 224, 131, 60, 63, 21, 10, 35, 62, 238, 18, 89, 61, 192, 227, 61, 191, 230, 10, 7, 62, 184, 154, 33, 62, 111, 197, 36, 63, 31, 146, 185, 190, 27, 193, 5, 191, 124, 104, 53, 191, 216, 38, 16, 191, 253, 156, 153, 61, 21, 92, 250, 61, 165, 180, 232, 62, 14, 193, 11, 63, 172, 188, 128, 191, 193, 176, 11, 190, 83, 122, 113, 62, 173, 192, 5, 63, 38, 27, 76, 62, 103, 113, 183, 61, 244, 78, 43, 191, 188, 58, 112, 189, 252, 123, 29, 191, 211, 140, 167, 62, 188, 124, 195, 188, 255, 227, 161, 190, 178, 186, 111, 191, 181, 99, 87, 190, 1, 239, 179, 189, 124, 62, 205, 62, 21, 139, 3, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {126, 16, 248, 190, 95, 40, 90, 62, 44, 41, 139, 189, 52, 211, 176, 190, 180, 240, 135, 189, 100, 221, 211, 190, 106, 8, 140, 190, 242, 38, 54, 191, 183, 202, 243, 190, 101, 253, 17, 191, 159, 239, 217, 190, 42, 103, 206, 190, 39, 106, 171, 189, 64, 13, 43, 190, 1, 73, 211, 189, 84, 70, 44, 62, 67, 36, 46, 63, 1, 164, 94, 189, 223, 150, 139, 189, 167, 220, 77, 62, 237, 88, 103, 190, 23, 221, 36, 190, 78, 202, 20, 63, 179, 174, 12, 63, 210, 183, 34, 190, 65, 46, 57, 62, 137, 139, 46, 62, 204, 118, 129, 60, 97, 197, 8, 63, 210, 56, 186, 62, 151, 175, 62, 62, 217, 13, 180, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 178, 222, 61, 189, 169, 178, 58, 166, 119, 150, 190, 46, 109, 255, 61, 99, 157, 119, 190, 168, 15, 219, 187, 95, 182, 98, 62, 17, 94, 139, 189, 231, 48, 28, 61, 134, 93, 149, 189, 46, 185, 96, 190, 147, 239, 53, 62, 57, 231, 41, 190, 117, 18, 251, 187, 6, 36, 140, 61, 163, 200, 197, 61, 43, 2, 161, 189, 41, 123, 197, 61, 131, 71, 219, 61, 208, 14, 167, 189, 130, 108, 130, 61, 214, 169, 222, 61, 244, 19, 51, 62, 87, 72, 85, 188, 82, 109, 147, 61, 88, 36, 111, 60, 153, 248, 21, 189, 204, 54, 23, 189, 183, 231, 55, 189, 141, 158, 155, 189, 155, 106, 107, 190, 22, 202, 151, 189, 9, 173, 33, 62, 183, 34, 47, 190, 159, 167, 1, 190, 227, 224, 65, 59, 204, 13, 5, 190, 229, 33, 152, 61, 167, 235, 171, 61, 202, 89, 34, 190, 65, 212, 97, 61, 116, 213, 207, 188, 7, 173, 98, 188, 205, 46, 225, 61, 172, 133, 81, 189, 116, 141, 236, 61, 84, 243, 169, 189, 13, 56, 126, 61, 247, 133, 22, 62, 15, 206, 161, 189, 234, 75, 179, 61, 28, 177, 172, 189, 241, 211, 36, 190, 221, 88, 101, 61, 91, 15, 175, 189, 180, 106, 25, 190, 94, 196, 19, 189, 228, 51, 129, 60, 140, 144, 180, 189, 217, 179, 141, 189, 61, 21, 80, 189, 37, 128, 44, 60, 125, 78, 52, 190, 203, 58, 21, 190, 67, 71, 141, 61, 186, 69, 158, 190, 101, 40, 39, 190, 112, 148, 53, 190, 167, 79, 201, 190, 221, 43, 165, 190, 93, 230, 220, 189, 108, 201, 158, 61, 23, 96, 141, 61, 254, 193, 249, 189, 104, 104, 200, 61, 55, 149, 144, 189, 189, 211, 114, 190, 89, 194, 229, 189, 155, 50, 188, 190, 229, 138, 178, 62, 32, 135, 197, 61, 105, 159, 141, 189, 58, 123, 215, 61, 41, 120, 112, 189, 232, 81, 112, 190, 62, 189, 144, 190, 112, 206, 169, 61, 172, 66, 51, 62, 70, 151, 197, 190, 229, 61, 102, 61, 113, 40, 34, 62, 223, 140, 48, 61, 57, 14, 66, 189, 112, 117, 29, 190, 216, 52, 204, 190, 36, 11, 242, 60, 108, 165, 60, 62, 126, 147, 130, 59, 84, 161, 183, 189, 132, 139, 144, 188, 43, 135, 109, 61, 172, 230, 141, 61, 190, 81, 150, 189, 111, 195, 33, 62, 72, 231, 24, 190, 132, 106, 195, 189, 96, 212, 227, 60, 175, 245, 114, 61, 177, 52, 83, 189, 168, 54, 219, 189, 131, 22, 59, 190, 19, 227, 71, 190, 59, 145, 28, 61, 244, 42, 32, 190, 217, 135, 25, 62, 206, 54, 185, 61, 68, 57, 74, 190, 114, 68, 22, 190, 52, 34, 234, 190, 249, 161, 97, 190, 29, 161, 28, 62, 44, 237, 69, 61, 50, 51, 34, 60, 243, 153, 21, 190, 21, 135, 82, 189, 135, 165, 41, 190, 66, 136, 30, 190, 185, 187, 230, 189, 245, 57, 128, 190, 65, 154, 6, 190, 62, 235, 97, 188, 166, 78, 20, 62, 233, 18, 219, 190, 158, 107, 34, 190, 64, 238, 69, 190, 69, 97, 77, 188, 103, 17, 57, 62, 19, 209, 56, 61, 99, 25, 25, 62, 137, 43, 126, 62, 176, 113, 218, 190, 188, 33, 171, 60, 107, 251, 240, 189, 24, 34, 140, 62, 84, 155, 91, 62, 131, 225, 178, 189, 5, 195, 233, 189, 31, 73, 89, 62, 174, 2, 122, 190, 10, 67, 110, 62, 108, 247, 66, 62, 134, 139, 179, 189, 224, 59, 120, 190, 117, 244, 230, 61, 32, 127, 101, 62, 252, 210, 204, 189, 154, 127, 232, 61, 253, 6, 6, 190, 154, 222, 100, 187, 149, 189, 162, 61, 165, 81, 162, 60, 178, 239, 25, 61, 14, 194, 177, 190, 133, 33, 82, 188, 31, 6, 131, 189, 165, 172, 239, 61, 89, 130, 130, 61, 5, 188, 98, 61, 248, 223, 103, 189, 171, 15, 224, 190, 51, 252, 88, 190, 163, 125, 85, 62, 8, 21, 77, 190, 15, 172, 73, 189, 44, 130, 152, 61, 120, 56, 142, 187, 89, 179, 136, 62, 122, 223, 169, 61, 2, 114, 78, 62, 128, 79, 44, 62, 102, 199, 71, 62, 94, 139, 223, 61, 120, 251, 84, 62, 90, 186, 22, 62, 194, 202, 155, 187, 186, 209, 129, 189, 250, 147, 11, 60, 100, 34, 66, 61, 101, 64, 54, 62, 14, 187, 197, 61, 138, 31, 218, 61, 204, 173, 14, 62, 33, 107, 23, 62, 244, 35, 90, 187, 74, 204, 223, 189, 211, 52, 200, 59, 33, 252, 116, 61, 82, 134, 11, 62, 65, 53, 251, 189, 43, 43, 223, 188, 24, 203, 118, 62, 179, 201, 182, 189, 104, 84, 81, 61, 58, 195, 150, 61, 219, 178, 36, 190, 181, 86, 207, 188, 197, 117, 49, 189, 146, 68, 70, 62, 29, 82, 69, 62, 233, 148, 16, 62, 157, 77, 125, 61, 125, 50, 162, 60, 205, 195, 46, 187, 222, 2, 64, 62, 141, 130, 137, 61, 107, 215, 153, 61, 137, 62, 137, 189, 224, 38, 140, 189, 132, 239, 143, 189, 109, 22, 138, 62, 6, 143, 23, 62, 231, 40, 24, 60, 122, 100, 147, 61, 222, 203, 88, 61, 62, 99, 184, 190, 226, 166, 93, 190, 139, 209, 135, 190, 66, 231, 75, 190, 13, 129, 8, 191, 196, 205, 53, 190, 138, 171, 15, 62, 145, 26, 246, 61, 108, 141, 250, 189, 13, 78, 133, 190, 140, 246, 255, 189, 34, 145, 40, 61, 45, 255, 84, 191, 243, 208, 252, 190, 188, 27, 85, 190, 71, 89, 7, 62, 254, 163, 57, 62, 238, 238, 80, 60, 129, 228, 4, 190, 91, 216, 54, 62, 155, 150, 189, 62, 126, 127, 194, 62, 161, 63, 54, 61, 150, 137, 112, 61, 120, 205, 151, 190, 58, 127, 131, 190, 245, 90, 192, 61, 164, 126, 73, 190, 58, 18, 27, 62, 199, 188, 107, 62, 144, 157, 116, 185, 137, 87, 26, 190, 79, 54, 57, 190, 93, 24, 13, 62, 76, 204, 5, 61, 135, 8, 112, 189, 167, 43, 139, 61, 99, 110, 34, 62, 119, 64, 33, 190, 95, 66, 27, 62, 248, 173, 3, 190, 38, 62, 148, 189, 58, 247, 134, 60, 130, 116, 126, 61, 46, 126, 48, 189, 213, 45, 24, 190, 231, 254, 236, 61, 21, 69, 201, 188, 133, 129, 112, 59, 33, 73, 36, 190, 216, 39, 208, 186, 19, 62, 30, 61, 45, 104, 232, 61, 201, 12, 23, 190, 70, 216, 194, 189, 219, 206, 126, 189, 142, 197, 195, 61, 89, 17, 44, 61, 197, 34, 143, 188, 120, 9, 178, 189, 36, 54, 81, 189, 66, 136, 203, 189, 209, 144, 196, 60, 122, 71, 210, 189, 160, 22, 140, 61, 140, 73, 212, 189, 181, 85, 139, 190, 52, 200, 90, 62, 111, 230, 205, 190, 184, 160, 233, 189, 238, 137, 93, 61, 229, 188, 169, 61, 31, 238, 66, 60, 144, 136, 252, 190, 159, 26, 104, 190, 204, 203, 69, 190, 188, 184, 168, 190, 47, 15, 35, 190, 47, 226, 70, 62, 163, 80, 122, 60, 80, 93, 219, 61, 20, 16, 193, 61, 101, 47, 91, 189, 122, 253, 16, 60, 21, 212, 177, 62, 129, 178, 145, 62, 209, 23, 104, 62, 142, 72, 65, 190, 132, 94, 188, 190, 88, 139, 222, 60, 190, 66, 141, 62, 72, 161, 114, 188, 226, 104, 89, 62, 196, 17, 177, 189, 130, 236, 131, 61, 156, 221, 206, 188, 121, 247, 8, 190, 175, 181, 29, 190, 75, 20, 143, 189, 10, 71, 167, 189, 5, 20, 79, 61, 50, 90, 198, 189, 192, 66, 178, 189, 244, 244, 18, 190, 101, 62, 218, 189, 21, 180, 20, 188, 230, 243, 81, 190, 177, 148, 189, 60, 27, 78, 166, 57, 222, 243, 71, 190, 50, 23, 65, 61, 158, 170, 23, 62, 6, 170, 17, 190, 111, 203, 236, 188, 96, 26, 196, 188, 139, 102, 0, 62, 36, 233, 34, 190, 55, 203, 76, 61, 99, 23, 4, 62, 158, 154, 117, 190, 143, 239, 209, 189, 236, 246, 25, 188, 235, 230, 147, 60, 107, 7, 80, 61, 200, 61, 77, 190, 183, 161, 212, 61, 125, 14, 90, 60, 43, 93, 113, 187, 1, 192, 158, 190, 176, 9, 96, 61, 49, 100, 150, 62, 21, 206, 229, 190, 167, 77, 47, 62, 118, 11, 76, 190, 28, 218, 241, 189, 221, 7, 178, 189, 91, 52, 10, 190, 128, 3, 152, 62, 134, 226, 190, 61, 176, 160, 163, 190, 180, 45, 98, 62, 41, 162, 125, 62, 45, 222, 106, 190, 135, 2, 142, 62, 82, 228, 50, 188, 139, 73, 9, 190, 185, 196, 47, 190, 24, 105, 171, 61, 106, 82, 182, 190, 106, 27, 140, 190, 67, 105, 27, 61, 18, 152, 22, 61, 34, 182, 127, 62, 186, 241, 237, 60, 108, 104, 47, 190, 247, 46, 75, 61, 77, 142, 16, 190, 108, 150, 136, 61, 134, 72, 56, 62, 191, 204, 139, 190, 66, 96, 152, 62, 32, 149, 44, 189, 4, 24, 135, 189, 249, 73, 54, 62, 107, 65, 53, 190, 179, 123, 156, 190, 168, 56, 159, 62, 222, 125, 83, 190, 55, 189, 226, 189, 116, 25, 240, 189, 218, 43, 162, 190, 204, 198, 8, 62, 77, 73, 144, 190, 58, 161, 124, 190, 95, 244, 19, 62, 141, 42, 39, 190, 55, 203, 82, 61, 200, 67, 76, 62, 87, 161, 51, 62, 109, 109, 104, 188, 143, 241, 159, 62, 191, 18, 192, 62, 30, 85, 142, 62, 2, 47, 92, 190, 219, 144, 77, 189, 50, 101, 178, 61, 103, 166, 206, 61, 34, 5, 120, 189, 71, 54, 94, 61, 202, 111, 26, 58, 181, 19, 2, 60, 162, 11, 44, 62, 51, 111, 155, 190, 233, 69, 155, 188, 54, 230, 4, 61, 219, 25, 215, 190, 76, 99, 150, 62, 210, 160, 67, 190, 205, 126, 89, 190, 0, 88, 58, 190, 249, 180, 66, 190, 145, 63, 196, 61, 198, 255, 172, 61, 120, 135, 208, 190, 215, 202, 168, 62, 119, 134, 123, 61, 15, 26, 6, 191, 241, 47, 112, 62, 101, 135, 172, 61, 11, 201, 18, 190, 99, 96, 93, 190, 249, 124, 2, 62, 199, 108, 6, 191, 166, 151, 151, 190, 169, 123, 122, 188, 247, 207, 71, 62, 90, 18, 73, 60, 214, 210, 0, 62, 143, 250, 150, 188, 29, 204, 6, 62, 223, 196, 29, 62, 113, 46, 225, 61, 86, 68, 0, 62, 86, 131, 136, 190, 51, 38, 34, 190, 239, 195, 96, 62, 199, 63, 59, 190, 120, 219, 44, 191, 113, 138, 253, 189, 207, 16, 48, 61, 52, 37, 58, 189, 10, 63, 49, 190, 24, 11, 247, 189, 151, 124, 198, 189, 3, 53, 213, 189, 246, 225, 70, 188, 130, 95, 169, 61, 115, 126, 78, 190, 240, 125, 145, 61, 162, 94, 43, 190, 237, 53, 247, 188, 224, 171, 191, 190, 132, 41, 137, 190, 39, 130, 41, 190, 101, 183, 220, 189, 1, 21, 132, 62, 196, 208, 51, 62, 172, 31, 239, 188, 199, 136, 36, 62, 49, 59, 48, 191, 11, 97, 227, 189, 112, 249, 139, 190, 232, 60, 162, 61, 167, 205, 10, 62, 135, 37, 128, 62, 117, 175, 164, 190, 203, 57, 252, 189, 208, 191, 9, 190, 147, 125, 97, 62, 143, 112, 4, 189, 46, 167, 36, 61, 116, 122, 69, 61, 18, 233, 151, 190, 144, 197, 184, 61, 187, 193, 86, 189, 230, 211, 103, 189, 223, 86, 149, 62, 219, 168, 79, 190, 213, 3, 217, 61, 85, 244, 171, 60, 131, 51, 179, 190, 25, 158, 74, 62, 231, 131, 140, 62, 27, 160, 24, 190, 35, 19, 243, 189, 239, 39, 108, 61, 121, 119, 167, 190, 77, 124, 74, 190, 201, 15, 163, 61, 165, 170, 163, 62, 140, 9, 65, 62, 210, 73, 142, 61, 224, 253, 10, 190, 244, 64, 69, 62, 219, 95, 136, 189, 19, 210, 132, 61, 245, 253, 124, 187, 194, 239, 251, 189, 17, 218, 140, 189, 226, 29, 147, 61, 105, 166, 131, 190, 243, 126, 209, 61, 61, 59, 34, 190, 62, 77, 4, 61, 58, 216, 186, 60, 157, 58, 32, 190, 142, 198, 62, 62, 118, 70, 131, 190, 84, 5, 143, 60, 124, 163, 253, 189, 205, 192, 105, 189, 57, 174, 182, 188, 192, 112, 190, 189, 236, 210, 20, 62, 65, 230, 164, 62, 99, 80, 17, 62, 13, 245, 174, 189, 225, 181, 170, 188, 15, 47, 28, 62, 147, 214, 4, 62, 254, 225, 193, 61, 12, 56, 84, 62, 125, 241, 103, 61, 0, 70, 108, 61, 39, 175, 162, 61, 84, 13, 95, 188, 136, 70, 112, 60, 211, 51, 76, 61, 48, 104, 12, 190, 247, 110, 170, 61, 90, 40, 95, 62, 61, 235, 77, 61, 212, 133, 17, 59, 131, 253, 199, 62, 222, 13, 187, 189, 187, 250, 10, 62, 168, 126, 138, 61, 222, 241, 11, 189, 0, 30, 2, 62, 52, 38, 103, 62, 250, 209, 254, 189, 231, 239, 87, 62, 243, 95, 119, 188, 54, 243, 237, 61, 9, 241, 152, 62, 15, 195, 123, 189, 4, 93, 23, 189, 44, 251, 5, 62, 69, 97, 49, 62, 169, 199, 179, 189, 123, 154, 46, 188, 213, 168, 184, 61, 195, 137, 63, 61, 4, 208, 143, 190, 14, 59, 43, 190, 19, 203, 35, 62, 64, 151, 20, 62, 241, 87, 207, 61, 125, 33, 4, 62, 237, 248, 177, 190, 177, 171, 23, 188, 130, 232, 154, 62, 173, 228, 102, 190, 103, 165, 89, 189, 189, 133, 60, 62, 135, 106, 59, 191, 232, 251, 10, 62, 248, 37, 105, 190, 38, 46, 116, 190, 47, 93, 11, 190, 82, 119, 171, 189, 45, 113, 188, 189, 27, 216, 116, 61, 57, 112, 170, 190, 140, 48, 101, 62, 88, 38, 68, 62, 39, 47, 25, 191, 181, 229, 34, 60, 133, 34, 184, 62, 25, 35, 7, 189, 132, 171, 69, 189, 153, 34, 74, 189, 153, 3, 79, 191, 16, 76, 38, 189, 220, 207, 69, 189, 105, 238, 140, 62, 152, 113, 108, 61, 224, 148, 79, 190, 67, 30, 244, 189, 27, 236, 198, 188, 153, 234, 21, 62, 163, 41, 128, 187, 70, 196, 49, 189, 250, 228, 47, 190, 203, 242, 198, 190, 136, 132, 76, 61, 27, 89, 226, 190, 142, 45, 213, 61, 147, 171, 62, 191, 45, 249, 255, 189, 214, 195, 78, 61, 40, 228, 148, 189, 154, 4, 26, 190, 6, 133, 156, 190, 214, 117, 61, 190, 188, 182, 7, 189, 237, 149, 72, 191, 131, 85, 188, 189, 41, 252, 205, 186, 235, 88, 152, 61, 113, 125, 82, 62, 82, 195, 245, 189, 50, 122, 38, 190, 105, 188, 238, 61, 222, 64, 234, 61, 117, 94, 40, 62, 27, 166, 164, 62, 250, 255, 140, 190, 52, 176, 141, 190, 33, 67, 183, 61, 101, 234, 45, 62, 121, 126, 135, 188, 118, 143, 201, 61, 220, 135, 119, 62, 57, 223, 246, 189, 153, 57, 221, 190, 207, 51, 1, 61, 176, 113, 101, 61, 42, 86, 126, 190, 211, 80, 117, 189, 74, 234, 154, 190, 67, 85, 125, 189, 66, 211, 21, 62, 194, 34, 114, 61, 152, 92, 154, 61, 247, 23, 203, 189, 190, 88, 136, 190, 212, 190, 253, 189, 230, 77, 169, 190, 107, 30, 26, 190, 129, 215, 3, 60, 169, 167, 20, 190, 36, 64, 108, 62, 231, 232, 99, 62, 226, 178, 254, 189, 243, 241, 141, 61, 148, 251, 157, 62, 241, 222, 182, 61, 113, 54, 115, 62, 51, 72, 123, 188, 192, 0, 106, 190, 225, 183, 135, 61, 176, 252, 133, 62, 94, 125, 155, 188, 117, 118, 187, 61, 51, 129, 129, 61, 224, 197, 248, 189, 46, 49, 140, 61, 239, 228, 10, 189, 123, 158, 160, 188, 240, 153, 229, 61, 80, 11, 225, 190, 240, 119, 100, 60, 151, 52, 118, 190, 93, 62, 239, 60, 61, 14, 79, 190, 136, 244, 81, 189, 102, 68, 249, 61, 96, 92, 11, 189, 180, 213, 94, 190, 225, 216, 251, 187, 146, 189, 186, 187, 76, 3, 198, 189, 218, 46, 100, 62, 40, 157, 53, 62, 110, 87, 156, 189, 120, 214, 155, 189, 118, 174, 101, 189, 139, 198, 122, 190, 91, 20, 181, 189, 217, 181, 223, 60, 11, 184, 155, 189, 80, 192, 63, 62, 181, 150, 4, 62, 255, 120, 30, 190, 142, 29, 141, 60, 49, 164, 209, 60, 175, 21, 177, 61, 40, 153, 145, 189, 197, 188, 154, 61, 114, 34, 233, 61, 179, 12, 9, 190, 232, 247, 138, 60, 51, 165, 195, 61, 206, 29, 26, 190, 6, 99, 66, 62, 42, 45, 90, 62, 50, 0, 174, 187, 126, 104, 36, 62, 74, 88, 248, 61, 200, 220, 68, 189, 252, 35, 134, 62, 220, 122, 126, 190, 202, 241, 186, 189, 208, 185, 143, 62, 49, 21, 11, 190, 72, 55, 22, 61, 28, 8, 29, 62, 66, 52, 157, 62, 83, 207, 247, 61, 126, 188, 169, 62, 212, 70, 136, 189, 201, 78, 59, 62, 138, 102, 111, 190, 197, 169, 228, 188, 24, 210, 120, 62, 147, 227, 183, 189, 41, 118, 233, 189, 195, 67, 80, 61, 123, 207, 66, 190, 193, 216, 90, 61, 220, 70, 32, 62, 226, 161, 183, 189, 254, 199, 63, 189, 170, 147, 67, 62, 196, 129, 55, 62, 88, 208, 45, 190, 211, 56, 18, 60, 70, 162, 220, 189, 244, 2, 3, 61, 206, 241, 229, 189, 103, 165, 147, 62, 94, 214, 128, 62, 75, 203, 208, 61, 91, 16, 146, 61, 116, 155, 212, 61, 69, 131, 205, 189, 157, 213, 243, 61, 215, 24, 24, 190, 128, 132, 133, 189, 198, 30, 201, 189, 66, 13, 145, 60, 249, 189, 58, 61, 98, 53, 141, 190, 138, 223, 55, 190, 199, 167, 89, 189, 178, 90, 20, 62, 226, 49, 67, 61, 125, 38, 80, 188, 155, 88, 36, 189, 97, 147, 12, 189, 221, 106, 147, 190, 140, 155, 48, 61, 245, 179, 236, 189, 209, 182, 142, 189, 136, 128, 108, 62, 167, 60, 17, 62, 10, 35, 204, 61, 180, 54, 88, 59, 68, 38, 32, 190, 97, 185, 74, 62, 93, 146, 105, 61, 209, 100, 6, 189, 100, 8, 91, 190, 25, 177, 14, 61, 244, 193, 42, 61, 62, 228, 34, 61, 7, 157, 34, 190, 162, 133, 177, 189, 76, 19, 78, 190, 192, 204, 31, 62, 239, 160, 31, 190, 240, 230, 218, 189, 90, 89, 143, 190, 161, 251, 22, 62, 97, 97, 104, 190, 111, 93, 162, 189, 232, 36, 16, 190, 164, 70, 168, 61, 159, 23, 211, 61, 247, 63, 224, 61, 26, 255, 165, 58, 105, 90, 94, 62, 5, 51, 38, 62, 196, 144, 218, 60, 186, 251, 21, 190, 24, 44, 213, 190, 230, 213, 230, 61, 79, 14, 39, 61, 135, 122, 5, 190, 174, 51, 193, 62, 50, 225, 156, 190, 27, 246, 112, 190, 236, 160, 28, 188, 200, 77, 233, 189, 223, 254, 109, 187, 133, 174, 138, 62, 20, 134, 236, 190, 69, 46, 214, 62, 180, 44, 64, 189, 61, 200, 51, 190, 93, 112, 128, 62, 43, 224, 44, 62, 45, 80, 174, 189, 133, 226, 126, 190, 153, 100, 52, 189, 72, 74, 63, 190, 210, 207, 149, 190, 53, 59, 234, 189, 203, 57, 177, 61, 233, 242, 17, 62, 107, 122, 64, 190, 226, 109, 45, 190, 43, 233, 217, 61, 148, 169, 217, 189, 54, 51, 216, 61, 117, 207, 53, 61, 162, 8, 168, 190, 145, 166, 165, 62, 164, 28, 9, 191, 165, 188, 104, 62, 15, 86, 140, 190, 76, 25, 148, 190, 154, 117, 18, 62, 136, 232, 202, 62, 234, 178, 96, 61, 49, 77, 233, 61, 122, 11, 195, 60, 2, 72, 64, 62, 62, 26, 227, 188, 84, 136, 146, 190, 143, 210, 223, 61, 70, 198, 59, 62, 254, 17, 78, 62, 103, 90, 68, 60, 220, 128, 0, 189, 130, 100, 152, 62, 156, 148, 28, 62, 65, 88, 64, 189, 130, 199, 78, 190, 160, 112, 102, 190, 163, 132, 60, 62, 144, 213, 215, 60, 68, 157, 51, 62, 242, 84, 48, 190, 78, 220, 205, 60, 92, 224, 240, 189, 167, 240, 119, 190, 199, 175, 174, 188, 135, 206, 152, 62, 178, 217, 133, 62, 173, 168, 195, 189, 65, 199, 180, 188, 135, 126, 33, 62, 96, 203, 131, 190, 20, 30, 53, 190, 11, 47, 139, 62, 135, 220, 184, 190, 136, 221, 181, 189, 233, 63, 192, 190, 147, 147, 75, 190, 68, 228, 33, 62, 61, 188, 0, 191, 186, 203, 181, 190, 137, 236, 68, 62, 121, 19, 251, 61, 221, 213, 80, 61, 166, 18, 34, 62, 26, 5, 69, 61, 13, 79, 26, 62, 143, 244, 62, 62, 185, 202, 212, 61, 70, 167, 87, 62, 70, 4, 136, 190, 162, 98, 145, 190, 34, 49, 194, 60, 132, 92, 78, 62, 86, 51, 101, 190, 70, 160, 35, 62, 157, 13, 38, 62, 6, 245, 163, 189, 106, 25, 47, 62, 227, 176, 75, 60, 22, 176, 181, 189, 189, 181, 114, 190, 156, 64, 150, 62, 135, 62, 67, 189, 89, 100, 217, 189, 235, 80, 114, 62, 169, 230, 225, 189, 245, 85, 37, 61, 195, 8, 131, 190, 191, 5, 54, 190, 217, 192, 161, 61, 4, 118, 77, 190, 176, 122, 76, 190, 33, 123, 10, 62, 150, 209, 76, 190, 210, 234, 6, 61, 41, 108, 48, 62, 209, 223, 97, 62, 26, 204, 70, 62, 76, 235, 54, 62, 74, 38, 27, 60, 23, 247, 135, 62, 74, 201, 171, 189, 37, 188, 241, 189, 38, 228, 173, 59, 119, 206, 33, 61, 130, 121, 135, 190, 206, 184, 186, 61, 207, 208, 105, 62, 35, 105, 244, 61, 116, 231, 121, 62, 125, 222, 171, 190, 102, 179, 164, 62, 198, 227, 150, 62, 15, 199, 41, 190, 47, 108, 189, 62, 160, 174, 1, 62, 92, 174, 209, 190, 246, 207, 116, 188, 154, 13, 247, 189, 131, 83, 77, 62, 49, 72, 148, 62, 151, 182, 142, 190, 122, 98, 104, 62, 119, 47, 151, 61, 153, 21, 141, 190, 250, 116, 152, 62, 145, 94, 61, 189, 161, 216, 28, 190, 53, 179, 86, 190, 115, 65, 110, 61, 50, 231, 61, 190, 100, 17, 69, 190, 16, 248, 14, 62, 33, 232, 145, 62, 178, 154, 47, 62, 181, 57, 194, 60, 247, 177, 170, 190, 168, 218, 71, 62, 73, 138, 16, 190, 20, 56, 189, 189, 156, 249, 232, 60, 53, 115, 15, 190, 174, 213, 168, 190, 213, 195, 140, 61, 120, 177, 32, 62, 190, 18, 92, 191, 157, 122, 24, 190, 17, 102, 105, 190, 229, 140, 152, 189, 83, 215, 139, 190, 255, 143, 17, 58, 214, 240, 180, 61, 28, 145, 222, 189, 43, 98, 191, 59, 104, 155, 184, 61, 52, 53, 156, 61, 182, 17, 128, 190, 9, 154, 160, 60, 81, 24, 4, 62, 96, 123, 169, 189, 23, 62, 19, 191, 170, 245, 68, 61, 63, 165, 204, 190, 156, 64, 198, 58, 217, 26, 250, 189, 176, 78, 17, 189, 121, 52, 147, 62, 22, 64, 121, 190, 56, 167, 46, 190, 224, 55, 238, 189, 21, 86, 51, 189, 62, 145, 128, 62, 52, 230, 119, 62, 24, 49, 106, 190, 102, 161, 121, 190, 88, 7, 9, 62, 46, 166, 153, 62, 68, 218, 44, 190, 95, 129, 193, 62, 2, 59, 191, 61, 88, 163, 111, 190, 28, 233, 68, 62, 110, 151, 81, 62, 226, 249, 226, 61, 117, 19, 84, 62, 186, 175, 3, 191, 83, 19, 35, 62, 249, 22, 106, 188, 65, 40, 15, 190, 47, 134, 133, 62, 253, 220, 131, 61, 67, 218, 75, 189, 140, 171, 129, 190, 234, 107, 73, 61, 177, 43, 30, 190, 30, 111, 49, 188, 196, 16, 201, 189, 8, 235, 14, 62, 117, 174, 150, 61, 135, 35, 144, 188, 39, 183, 90, 190, 5, 43, 36, 62, 90, 129, 66, 62, 165, 76, 139, 60, 165, 12, 58, 61, 108, 22, 229, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {107, 216, 78, 62, 231, 166, 42, 189, 146, 45, 81, 62, 208, 96, 3, 190, 0, 81, 244, 61, 128, 98, 62, 61, 171, 206, 86, 62, 105, 216, 72, 62, 48, 203, 1, 190, 12, 127, 51, 62, 16, 86, 216, 189, 38, 188, 77, 62, 129, 55, 125, 189, 212, 55, 56, 61, 76, 48, 169, 61, 91, 24, 149, 188, 52, 134, 37, 62, 53, 125, 205, 189, 61, 196, 120, 62, 162, 123, 139, 62, 250, 226, 215, 189, 105, 163, 60, 60, 209, 38, 130, 190, 233, 195, 129, 190, 160, 106, 173, 189, 211, 151, 34, 62, 204, 209, 206, 61, 156, 104, 163, 61, 248, 62, 167, 188, 101, 248, 193, 61, 17, 146, 183, 60, 202, 121, 15, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {161, 173, 203, 61, 240, 87, 82, 189, 69, 98, 225, 59, 124, 213, 2, 62, 246, 61, 170, 61, 22, 35, 119, 62, 89, 48, 162, 60, 159, 191, 14, 63, 147, 195, 86, 189, 175, 39, 172, 62, 76, 236, 131, 60, 216, 178, 5, 191, 54, 187, 136, 62, 225, 252, 195, 190, 134, 49, 177, 190, 85, 212, 129, 190, 65, 177, 147, 61, 41, 46, 183, 190, 17, 254, 16, 191, 95, 184, 29, 63, 7, 178, 178, 62, 15, 53, 3, 190, 211, 74, 146, 190, 218, 221, 233, 62, 143, 213, 59, 190, 124, 57, 204, 190, 199, 210, 188, 190, 194, 230, 162, 62, 41, 32, 92, 62, 244, 240, 86, 190, 144, 75, 173, 190, 91, 4, 91, 190, 221, 107, 205, 59, 139, 99, 34, 62, 45, 223, 25, 191, 241, 18, 232, 189, 96, 189, 167, 190, 252, 184, 34, 190, 244, 227, 116, 190, 133, 48, 61, 187, 195, 206, 8, 190, 78, 199, 199, 188, 104, 120, 56, 62, 174, 5, 216, 61, 221, 237, 76, 62, 225, 122, 118, 189, 1, 68, 77, 60, 3, 161, 9, 190, 254, 149, 73, 190, 201, 178, 212, 188, 138, 184, 124, 190, 163, 74, 20, 190, 233, 38, 12, 62, 190, 39, 177, 189, 71, 198, 20, 189, 18, 19, 61, 62, 237, 160, 248, 61, 243, 152, 81, 62, 59, 244, 76, 61, 209, 238, 231, 61, 191, 25, 31, 62, 235, 115, 20, 62, 251, 12, 89, 189, 247, 19, 158, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 74, 251, 189, 203, 191, 145, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {91, 218, 186, 62, 72, 220, 75, 63, 211, 132, 138, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {137, 88, 2, 192, 34, 106, 56, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0004/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}