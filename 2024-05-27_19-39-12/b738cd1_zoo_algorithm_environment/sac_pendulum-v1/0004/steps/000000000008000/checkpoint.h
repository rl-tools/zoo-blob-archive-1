// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 229, 2, 63, 103, 246, 16, 62, 148, 197, 192, 190, 198, 228, 83, 190, 20, 151, 84, 191, 0, 198, 3, 61, 216, 156, 156, 62, 180, 3, 103, 63, 235, 143, 82, 62, 162, 189, 96, 190, 48, 184, 34, 190, 30, 58, 237, 62, 167, 169, 238, 190, 201, 17, 192, 62, 201, 30, 39, 191, 215, 6, 113, 62, 114, 147, 137, 63, 255, 199, 1, 62, 162, 15, 252, 62, 103, 27, 3, 191, 90, 93, 144, 190, 77, 140, 13, 63, 75, 194, 43, 63, 198, 239, 109, 62, 216, 178, 98, 190, 203, 25, 59, 63, 215, 105, 27, 62, 18, 32, 52, 63, 239, 8, 55, 63, 214, 221, 158, 62, 48, 195, 29, 63, 185, 106, 164, 62, 209, 150, 173, 62, 159, 10, 46, 190, 205, 10, 36, 191, 246, 157, 112, 190, 17, 178, 40, 191, 104, 157, 57, 61, 6, 204, 147, 190, 153, 179, 26, 62, 111, 109, 73, 63, 15, 157, 188, 62, 221, 98, 255, 189, 67, 74, 5, 189, 166, 16, 51, 62, 243, 63, 172, 62, 68, 45, 2, 63, 63, 175, 195, 61, 141, 198, 203, 188, 109, 97, 14, 190, 53, 195, 78, 189, 57, 39, 240, 190, 74, 47, 104, 63, 130, 84, 151, 62, 205, 186, 40, 190, 36, 145, 25, 63, 113, 247, 144, 190, 119, 50, 15, 61, 92, 6, 133, 63, 244, 201, 53, 62, 150, 252, 193, 62, 109, 134, 118, 191, 202, 92, 101, 61, 220, 74, 5, 191, 118, 205, 138, 63, 87, 125, 121, 62, 146, 204, 160, 189, 69, 74, 15, 191, 12, 188, 62, 62, 144, 137, 207, 61, 80, 6, 234, 62, 17, 106, 176, 190, 108, 51, 45, 191, 190, 44, 136, 191, 116, 238, 228, 190, 242, 191, 227, 61, 122, 49, 57, 63, 72, 223, 126, 62, 177, 219, 248, 62, 6, 16, 146, 191, 181, 42, 131, 190, 250, 247, 138, 62, 61, 247, 56, 63, 132, 13, 33, 62, 93, 33, 106, 61, 198, 151, 53, 191, 208, 30, 16, 190, 82, 110, 77, 191, 148, 101, 148, 62, 11, 196, 177, 61, 203, 136, 224, 190, 13, 47, 152, 191, 17, 208, 139, 190, 54, 114, 30, 190, 35, 135, 156, 62, 144, 240, 242, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {217, 232, 88, 191, 167, 161, 150, 62, 66, 176, 6, 189, 94, 192, 33, 191, 5, 172, 32, 190, 204, 187, 191, 190, 29, 100, 129, 190, 102, 89, 88, 191, 81, 185, 189, 190, 220, 100, 24, 191, 79, 166, 239, 190, 62, 231, 156, 188, 154, 99, 67, 187, 183, 182, 119, 190, 42, 171, 151, 190, 204, 112, 62, 62, 207, 157, 29, 63, 18, 10, 164, 189, 155, 127, 115, 62, 167, 34, 214, 188, 28, 234, 66, 190, 236, 98, 168, 190, 108, 124, 29, 63, 161, 175, 252, 62, 113, 57, 253, 189, 214, 186, 112, 189, 42, 171, 133, 62, 100, 247, 58, 59, 36, 137, 237, 62, 240, 247, 166, 62, 226, 59, 168, 61, 53, 171, 131, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 103, 63, 62, 101, 22, 193, 189, 5, 190, 195, 190, 175, 26, 199, 61, 91, 172, 153, 189, 76, 246, 158, 189, 192, 201, 149, 62, 146, 240, 97, 59, 254, 30, 210, 61, 3, 60, 30, 190, 252, 80, 90, 190, 193, 127, 37, 62, 33, 224, 209, 188, 72, 243, 85, 189, 123, 165, 24, 61, 246, 20, 219, 61, 23, 196, 150, 189, 28, 253, 251, 61, 6, 98, 136, 62, 202, 77, 129, 189, 211, 136, 248, 188, 9, 32, 74, 62, 99, 92, 7, 62, 208, 15, 176, 61, 121, 136, 31, 189, 112, 157, 4, 61, 154, 74, 67, 60, 50, 162, 182, 189, 201, 213, 140, 189, 47, 79, 43, 190, 79, 35, 248, 190, 45, 238, 43, 189, 9, 173, 33, 62, 183, 34, 47, 190, 159, 167, 1, 190, 227, 224, 65, 59, 204, 13, 5, 190, 229, 33, 152, 61, 167, 235, 171, 61, 202, 89, 34, 190, 65, 212, 97, 61, 116, 213, 207, 188, 7, 173, 98, 188, 205, 46, 225, 61, 172, 133, 81, 189, 116, 141, 236, 61, 84, 243, 169, 189, 13, 56, 126, 61, 247, 133, 22, 62, 15, 206, 161, 189, 234, 75, 179, 61, 28, 177, 172, 189, 241, 211, 36, 190, 221, 88, 101, 61, 91, 15, 175, 189, 180, 106, 25, 190, 94, 196, 19, 189, 228, 51, 129, 60, 140, 144, 180, 189, 217, 179, 141, 189, 61, 21, 80, 189, 37, 128, 44, 60, 125, 78, 52, 190, 203, 58, 21, 190, 92, 122, 90, 61, 3, 219, 216, 190, 172, 223, 1, 190, 203, 19, 18, 61, 151, 45, 216, 190, 247, 210, 237, 190, 203, 85, 24, 190, 15, 83, 191, 61, 213, 224, 78, 62, 72, 202, 182, 189, 200, 183, 135, 62, 209, 191, 222, 190, 248, 145, 155, 190, 158, 225, 13, 190, 219, 215, 46, 190, 15, 70, 239, 62, 224, 69, 75, 62, 41, 128, 167, 61, 40, 230, 101, 189, 67, 136, 16, 190, 90, 36, 52, 190, 86, 243, 194, 190, 229, 92, 134, 62, 23, 219, 73, 62, 230, 98, 21, 191, 16, 55, 10, 62, 216, 79, 119, 62, 154, 128, 2, 62, 207, 57, 48, 61, 67, 225, 178, 189, 94, 66, 127, 191, 223, 252, 18, 188, 249, 165, 77, 62, 48, 244, 81, 189, 114, 169, 241, 189, 132, 139, 144, 188, 128, 232, 132, 61, 154, 193, 140, 61, 213, 39, 121, 189, 111, 195, 33, 62, 72, 231, 24, 190, 132, 106, 195, 189, 96, 212, 227, 60, 154, 248, 189, 61, 78, 134, 34, 189, 168, 54, 219, 189, 131, 22, 59, 190, 181, 212, 174, 190, 66, 200, 243, 57, 244, 42, 32, 190, 236, 117, 12, 62, 206, 54, 185, 61, 72, 25, 83, 190, 237, 229, 103, 190, 89, 158, 7, 191, 39, 226, 117, 190, 82, 122, 49, 62, 44, 237, 69, 61, 77, 200, 188, 188, 243, 153, 21, 190, 167, 250, 164, 189, 108, 115, 55, 190, 195, 73, 9, 190, 255, 250, 223, 189, 224, 71, 109, 190, 234, 184, 23, 190, 32, 238, 42, 189, 200, 182, 23, 62, 163, 105, 153, 190, 9, 192, 20, 190, 202, 78, 152, 190, 252, 38, 26, 190, 233, 221, 11, 62, 133, 179, 181, 189, 93, 246, 243, 61, 203, 163, 221, 61, 202, 178, 179, 190, 207, 111, 239, 188, 213, 163, 230, 189, 158, 94, 147, 62, 35, 70, 81, 62, 224, 218, 193, 189, 62, 241, 13, 189, 168, 65, 29, 62, 102, 226, 104, 190, 49, 201, 91, 62, 94, 5, 70, 62, 149, 202, 147, 189, 82, 210, 176, 190, 23, 220, 197, 61, 39, 211, 68, 62, 117, 69, 11, 190, 218, 225, 185, 61, 250, 237, 16, 190, 201, 238, 241, 189, 42, 38, 146, 61, 170, 214, 179, 60, 22, 199, 58, 62, 242, 229, 242, 190, 51, 253, 4, 189, 171, 187, 114, 189, 139, 180, 117, 61, 43, 8, 131, 61, 152, 110, 164, 189, 100, 157, 209, 61, 82, 70, 62, 191, 137, 19, 182, 190, 246, 186, 104, 62, 90, 51, 62, 190, 13, 56, 5, 190, 4, 248, 76, 61, 25, 123, 41, 189, 122, 196, 161, 62, 225, 85, 254, 61, 130, 160, 59, 62, 150, 215, 32, 62, 224, 7, 87, 62, 123, 49, 59, 62, 231, 6, 144, 62, 209, 135, 43, 62, 138, 201, 72, 59, 101, 160, 156, 189, 214, 38, 52, 61, 248, 16, 64, 189, 26, 84, 109, 62, 25, 170, 47, 62, 37, 104, 13, 62, 178, 64, 124, 61, 35, 192, 45, 62, 245, 20, 104, 60, 75, 147, 12, 190, 128, 215, 57, 54, 136, 1, 1, 62, 84, 141, 25, 62, 184, 82, 234, 189, 195, 237, 51, 190, 185, 97, 64, 62, 115, 88, 109, 190, 129, 204, 38, 60, 210, 56, 207, 61, 92, 119, 18, 190, 148, 143, 167, 189, 12, 203, 61, 189, 236, 147, 118, 62, 159, 42, 78, 62, 87, 131, 190, 61, 64, 215, 216, 61, 211, 1, 140, 189, 252, 155, 228, 61, 67, 154, 202, 61, 146, 246, 164, 61, 161, 230, 7, 62, 51, 194, 56, 189, 146, 136, 194, 189, 63, 221, 1, 189, 253, 201, 113, 62, 2, 17, 51, 62, 58, 67, 183, 189, 127, 166, 100, 61, 127, 52, 231, 61, 115, 73, 138, 190, 245, 84, 5, 191, 163, 221, 186, 190, 7, 139, 146, 190, 99, 120, 122, 190, 230, 120, 112, 191, 196, 188, 254, 61, 145, 26, 246, 61, 114, 255, 136, 190, 31, 231, 43, 190, 203, 200, 22, 61, 190, 105, 92, 61, 42, 54, 10, 191, 152, 249, 34, 191, 123, 162, 192, 190, 180, 6, 18, 62, 29, 213, 44, 62, 126, 32, 251, 187, 95, 125, 50, 62, 20, 2, 128, 62, 206, 134, 179, 62, 146, 89, 19, 63, 157, 52, 47, 189, 130, 199, 4, 62, 92, 79, 253, 190, 171, 87, 74, 190, 73, 34, 222, 61, 106, 181, 119, 190, 62, 242, 163, 61, 91, 16, 71, 62, 44, 57, 203, 190, 118, 228, 37, 189, 79, 54, 57, 190, 221, 132, 3, 62, 76, 204, 5, 61, 135, 8, 112, 189, 167, 43, 139, 61, 99, 110, 34, 62, 192, 246, 32, 190, 95, 66, 27, 62, 248, 173, 3, 190, 38, 62, 148, 189, 58, 247, 134, 60, 252, 200, 115, 61, 92, 29, 49, 189, 213, 45, 24, 190, 162, 141, 236, 61, 21, 69, 201, 188, 165, 103, 12, 187, 33, 73, 36, 190, 216, 39, 208, 186, 19, 62, 30, 61, 183, 194, 224, 61, 201, 12, 23, 190, 168, 71, 214, 189, 154, 228, 126, 189, 138, 150, 184, 61, 89, 17, 44, 61, 172, 105, 200, 188, 120, 9, 178, 189, 229, 216, 111, 189, 94, 228, 208, 189, 112, 1, 120, 60, 122, 71, 210, 189, 129, 49, 134, 62, 10, 84, 103, 189, 4, 86, 208, 190, 100, 192, 30, 62, 251, 96, 23, 190, 151, 171, 81, 190, 240, 229, 100, 62, 160, 45, 5, 189, 163, 73, 57, 62, 26, 42, 74, 191, 187, 153, 201, 190, 105, 144, 159, 189, 156, 161, 193, 189, 5, 128, 138, 190, 10, 74, 7, 62, 21, 37, 52, 188, 127, 66, 19, 62, 81, 129, 5, 62, 70, 222, 137, 62, 68, 148, 72, 60, 187, 46, 183, 62, 129, 159, 206, 62, 244, 156, 112, 62, 238, 102, 120, 189, 207, 3, 210, 190, 194, 56, 6, 59, 166, 104, 188, 62, 170, 146, 246, 189, 235, 185, 121, 62, 170, 30, 136, 189, 127, 185, 172, 60, 82, 203, 202, 61, 121, 247, 8, 190, 175, 181, 29, 190, 75, 20, 143, 189, 10, 71, 167, 189, 5, 20, 79, 61, 50, 90, 198, 189, 192, 66, 178, 189, 244, 244, 18, 190, 101, 62, 218, 189, 21, 180, 20, 188, 230, 243, 81, 190, 177, 148, 189, 60, 27, 78, 166, 57, 222, 243, 71, 190, 50, 23, 65, 61, 158, 170, 23, 62, 6, 170, 17, 190, 111, 203, 236, 188, 96, 26, 196, 188, 139, 102, 0, 62, 36, 233, 34, 190, 55, 203, 76, 61, 99, 23, 4, 62, 158, 154, 117, 190, 143, 239, 209, 189, 236, 246, 25, 188, 235, 230, 147, 60, 107, 7, 80, 61, 200, 61, 77, 190, 183, 161, 212, 61, 125, 14, 90, 60, 43, 93, 113, 187, 84, 54, 176, 190, 189, 75, 232, 61, 45, 81, 187, 62, 39, 150, 151, 190, 193, 181, 67, 62, 45, 179, 61, 190, 173, 253, 92, 190, 125, 56, 77, 191, 16, 249, 6, 191, 185, 56, 168, 62, 188, 125, 82, 62, 236, 81, 196, 190, 221, 51, 97, 62, 41, 157, 193, 62, 81, 98, 217, 187, 17, 19, 174, 62, 156, 131, 149, 58, 17, 189, 108, 190, 223, 145, 227, 189, 143, 128, 25, 61, 224, 232, 185, 190, 79, 71, 232, 190, 124, 180, 172, 61, 151, 254, 46, 61, 156, 157, 131, 62, 250, 92, 136, 61, 127, 130, 114, 190, 191, 210, 235, 61, 86, 147, 2, 190, 193, 89, 173, 61, 24, 224, 41, 62, 117, 190, 46, 190, 251, 170, 208, 62, 220, 134, 96, 189, 135, 26, 171, 190, 241, 174, 7, 62, 224, 49, 207, 189, 206, 207, 140, 190, 11, 119, 226, 62, 115, 23, 170, 190, 89, 42, 155, 61, 24, 90, 22, 191, 17, 210, 241, 190, 99, 38, 161, 61, 173, 246, 128, 190, 8, 210, 159, 190, 201, 217, 188, 61, 240, 134, 151, 190, 45, 151, 48, 61, 184, 57, 132, 62, 22, 38, 148, 62, 179, 209, 162, 61, 178, 82, 9, 63, 221, 164, 23, 63, 193, 104, 133, 62, 122, 120, 16, 190, 143, 171, 33, 190, 174, 33, 156, 61, 44, 220, 128, 62, 70, 53, 146, 190, 7, 50, 110, 60, 146, 32, 160, 189, 51, 94, 56, 190, 204, 63, 84, 62, 83, 88, 201, 190, 2, 125, 210, 60, 6, 87, 23, 62, 200, 234, 232, 189, 214, 164, 141, 62, 86, 67, 243, 189, 231, 72, 164, 190, 194, 55, 43, 191, 124, 120, 67, 191, 6, 113, 110, 62, 13, 112, 142, 62, 191, 132, 227, 190, 118, 105, 158, 62, 10, 0, 136, 62, 229, 95, 20, 190, 100, 46, 146, 62, 129, 39, 163, 61, 125, 19, 28, 190, 115, 89, 105, 190, 82, 241, 247, 61, 153, 167, 1, 191, 61, 117, 245, 190, 155, 67, 56, 61, 190, 20, 28, 62, 120, 173, 221, 60, 245, 33, 87, 62, 144, 15, 166, 189, 9, 208, 116, 62, 150, 105, 40, 62, 99, 80, 200, 61, 191, 55, 25, 62, 68, 50, 103, 190, 79, 122, 82, 190, 183, 89, 14, 62, 13, 81, 108, 190, 159, 5, 65, 191, 23, 250, 158, 190, 207, 16, 48, 61, 147, 130, 238, 60, 10, 63, 49, 190, 35, 147, 20, 191, 41, 235, 247, 189, 58, 4, 211, 190, 19, 150, 23, 191, 208, 142, 57, 190, 69, 79, 242, 190, 226, 5, 26, 62, 154, 249, 119, 62, 5, 160, 107, 189, 41, 9, 43, 190, 84, 206, 243, 190, 213, 44, 220, 190, 166, 63, 10, 190, 0, 208, 223, 62, 87, 83, 50, 62, 44, 184, 225, 189, 158, 98, 58, 190, 221, 4, 127, 191, 214, 218, 70, 190, 27, 167, 219, 190, 238, 6, 42, 60, 169, 251, 23, 62, 132, 17, 118, 61, 232, 194, 221, 190, 188, 178, 70, 190, 117, 76, 215, 189, 96, 46, 139, 62, 201, 157, 11, 60, 242, 116, 4, 61, 237, 209, 135, 61, 173, 56, 213, 190, 20, 205, 221, 190, 51, 156, 157, 190, 210, 35, 161, 189, 37, 183, 171, 62, 220, 15, 101, 190, 178, 199, 175, 61, 68, 116, 138, 61, 188, 109, 122, 190, 76, 19, 97, 62, 132, 32, 131, 62, 250, 57, 105, 190, 113, 31, 251, 189, 110, 153, 223, 58, 124, 191, 134, 190, 77, 177, 170, 190, 234, 228, 241, 61, 75, 213, 141, 62, 213, 249, 77, 62, 128, 135, 157, 61, 55, 36, 63, 190, 252, 55, 116, 62, 11, 145, 112, 189, 55, 26, 223, 60, 246, 101, 48, 60, 190, 122, 172, 189, 123, 35, 135, 189, 219, 28, 10, 62, 64, 185, 186, 190, 168, 233, 215, 61, 94, 138, 240, 189, 145, 93, 12, 60, 170, 20, 146, 60, 78, 68, 74, 190, 137, 77, 68, 62, 49, 174, 240, 190, 144, 94, 102, 189, 210, 107, 206, 189, 218, 0, 78, 189, 172, 196, 197, 189, 198, 132, 188, 189, 17, 106, 231, 61, 83, 67, 165, 62, 246, 247, 0, 62, 35, 171, 180, 189, 231, 81, 218, 189, 207, 139, 98, 62, 55, 197, 160, 61, 132, 2, 1, 62, 15, 228, 107, 62, 53, 59, 144, 61, 163, 157, 185, 60, 225, 46, 219, 61, 239, 19, 229, 189, 62, 164, 47, 61, 252, 43, 151, 188, 121, 136, 8, 190, 219, 171, 155, 61, 196, 222, 159, 62, 44, 147, 173, 189, 218, 119, 71, 186, 239, 92, 211, 62, 147, 247, 27, 190, 226, 204, 243, 58, 219, 177, 85, 62, 70, 11, 88, 190, 139, 176, 33, 62, 40, 170, 125, 62, 168, 241, 8, 190, 38, 17, 120, 62, 14, 230, 240, 189, 26, 48, 253, 61, 103, 107, 156, 62, 235, 213, 218, 189, 62, 168, 150, 189, 22, 29, 248, 61, 254, 154, 32, 62, 204, 95, 196, 189, 98, 61, 1, 62, 45, 115, 55, 62, 239, 235, 76, 59, 100, 201, 142, 190, 242, 34, 106, 190, 176, 73, 36, 62, 169, 213, 121, 62, 19, 219, 181, 61, 238, 9, 209, 61, 216, 110, 147, 190, 142, 191, 253, 189, 26, 253, 143, 62, 187, 171, 129, 190, 201, 25, 5, 189, 36, 17, 115, 62, 59, 113, 2, 191, 223, 210, 35, 62, 72, 60, 157, 61, 71, 151, 147, 190, 65, 207, 233, 189, 190, 21, 105, 191, 147, 123, 17, 190, 161, 19, 112, 61, 51, 140, 147, 190, 133, 37, 99, 62, 130, 101, 48, 62, 118, 30, 153, 190, 55, 244, 133, 60, 2, 193, 172, 62, 63, 138, 163, 190, 40, 170, 61, 189, 36, 48, 67, 190, 213, 254, 73, 191, 96, 62, 173, 190, 208, 140, 28, 189, 233, 213, 129, 62, 101, 191, 238, 61, 80, 181, 153, 190, 105, 2, 16, 190, 12, 255, 23, 60, 16, 13, 55, 62, 215, 105, 175, 189, 83, 39, 86, 61, 96, 187, 203, 189, 50, 145, 181, 190, 200, 101, 110, 189, 63, 205, 207, 190, 125, 123, 144, 61, 18, 194, 48, 191, 192, 106, 50, 62, 36, 202, 249, 189, 213, 151, 109, 190, 141, 109, 117, 188, 141, 40, 11, 191, 1, 176, 153, 190, 73, 103, 58, 190, 57, 158, 130, 191, 60, 146, 26, 190, 55, 23, 54, 189, 58, 75, 205, 61, 111, 218, 25, 62, 179, 68, 238, 189, 90, 188, 220, 60, 7, 175, 59, 62, 61, 193, 23, 60, 231, 39, 62, 62, 243, 219, 117, 62, 135, 201, 105, 190, 229, 214, 1, 191, 212, 90, 199, 61, 72, 179, 12, 62, 168, 44, 45, 60, 58, 192, 203, 60, 78, 60, 33, 62, 235, 12, 169, 190, 187, 160, 243, 190, 224, 208, 16, 62, 90, 188, 241, 188, 162, 138, 187, 190, 245, 58, 48, 189, 134, 41, 185, 188, 169, 155, 158, 190, 90, 197, 114, 62, 95, 13, 151, 189, 19, 41, 56, 62, 164, 115, 139, 190, 211, 15, 152, 190, 166, 158, 64, 190, 253, 45, 191, 189, 187, 96, 67, 190, 184, 112, 29, 186, 118, 27, 9, 190, 249, 231, 117, 62, 143, 195, 137, 62, 63, 10, 80, 62, 150, 14, 2, 62, 165, 163, 119, 62, 81, 214, 134, 62, 46, 97, 79, 62, 134, 120, 217, 61, 247, 143, 204, 190, 147, 110, 213, 61, 194, 107, 155, 62, 147, 150, 206, 189, 200, 15, 104, 61, 103, 127, 27, 60, 187, 218, 224, 190, 4, 214, 26, 62, 149, 219, 229, 189, 14, 44, 82, 189, 53, 200, 110, 62, 189, 254, 99, 190, 39, 84, 80, 61, 98, 200, 106, 190, 17, 206, 153, 189, 86, 81, 52, 191, 117, 224, 51, 191, 225, 220, 144, 62, 70, 182, 62, 62, 229, 87, 114, 190, 105, 51, 191, 60, 133, 83, 31, 62, 60, 49, 83, 62, 21, 222, 148, 62, 78, 117, 72, 62, 250, 145, 19, 190, 149, 18, 217, 188, 145, 246, 40, 189, 226, 161, 79, 190, 48, 51, 103, 190, 245, 244, 161, 61, 124, 28, 141, 189, 180, 146, 91, 62, 113, 130, 93, 62, 80, 229, 83, 190, 66, 164, 6, 62, 174, 188, 57, 61, 58, 154, 190, 61, 122, 199, 150, 189, 224, 160, 14, 62, 162, 129, 43, 62, 126, 97, 134, 190, 222, 47, 54, 61, 182, 151, 252, 61, 193, 95, 101, 190, 90, 192, 209, 61, 66, 149, 173, 62, 93, 174, 64, 190, 217, 92, 112, 62, 110, 239, 6, 62, 246, 191, 142, 189, 22, 130, 90, 62, 163, 216, 167, 190, 198, 189, 143, 189, 145, 244, 151, 62, 238, 10, 242, 189, 11, 149, 172, 61, 207, 63, 59, 62, 194, 208, 210, 62, 213, 5, 38, 62, 128, 107, 217, 62, 73, 136, 161, 61, 44, 124, 29, 62, 32, 15, 18, 190, 23, 176, 19, 190, 93, 189, 132, 62, 28, 193, 28, 59, 13, 12, 209, 189, 87, 153, 37, 61, 188, 11, 46, 188, 68, 128, 143, 189, 105, 49, 238, 61, 149, 14, 200, 189, 176, 219, 162, 189, 240, 166, 138, 62, 107, 26, 77, 62, 131, 19, 180, 189, 94, 218, 250, 61, 72, 246, 239, 189, 173, 210, 162, 62, 246, 147, 110, 190, 86, 137, 242, 62, 98, 91, 212, 62, 19, 83, 196, 61, 220, 179, 162, 61, 15, 224, 27, 62, 80, 225, 167, 189, 222, 8, 89, 62, 148, 109, 157, 190, 244, 63, 165, 189, 156, 213, 26, 188, 151, 113, 208, 60, 73, 223, 168, 190, 212, 9, 202, 190, 183, 117, 119, 190, 204, 45, 172, 189, 147, 126, 13, 62, 179, 249, 174, 61, 98, 6, 162, 190, 222, 41, 46, 61, 120, 184, 188, 190, 190, 138, 34, 191, 62, 152, 148, 62, 107, 144, 182, 189, 116, 142, 84, 60, 229, 243, 203, 61, 226, 196, 109, 62, 218, 20, 240, 60, 148, 6, 81, 60, 62, 240, 87, 190, 70, 241, 188, 62, 93, 146, 105, 61, 245, 47, 0, 191, 106, 42, 169, 190, 87, 0, 82, 190, 21, 43, 126, 61, 99, 96, 26, 61, 203, 184, 173, 190, 166, 90, 17, 190, 112, 26, 127, 190, 192, 247, 30, 62, 239, 132, 57, 189, 79, 147, 252, 189, 153, 98, 6, 191, 218, 161, 164, 61, 23, 117, 132, 61, 210, 189, 70, 190, 75, 92, 27, 190, 190, 119, 189, 61, 4, 61, 176, 189, 182, 23, 53, 62, 204, 98, 81, 60, 62, 172, 121, 62, 142, 52, 132, 62, 221, 59, 105, 61, 133, 54, 179, 189, 152, 211, 253, 190, 129, 220, 222, 61, 105, 231, 35, 62, 144, 69, 38, 190, 3, 149, 188, 62, 212, 80, 50, 190, 10, 77, 166, 190, 108, 221, 25, 191, 220, 50, 123, 191, 255, 221, 106, 62, 66, 77, 239, 62, 235, 186, 236, 190, 130, 210, 213, 62, 59, 95, 33, 62, 27, 178, 231, 188, 73, 174, 153, 62, 194, 174, 42, 62, 112, 117, 83, 190, 75, 187, 124, 190, 83, 246, 118, 189, 193, 30, 125, 190, 128, 180, 8, 191, 247, 205, 216, 189, 1, 230, 39, 61, 122, 59, 82, 62, 33, 243, 30, 190, 68, 196, 118, 190, 25, 215, 85, 62, 95, 104, 185, 189, 131, 65, 1, 62, 33, 71, 244, 61, 78, 84, 130, 190, 237, 64, 43, 62, 58, 154, 71, 191, 48, 158, 128, 62, 100, 134, 4, 191, 152, 143, 158, 190, 137, 105, 99, 62, 35, 27, 243, 61, 108, 103, 75, 190, 56, 145, 73, 189, 218, 158, 217, 189, 139, 234, 12, 61, 204, 135, 41, 190, 209, 153, 135, 190, 96, 189, 3, 187, 9, 229, 139, 186, 183, 72, 58, 62, 156, 152, 249, 59, 82, 46, 24, 190, 230, 68, 185, 62, 232, 2, 78, 62, 110, 187, 138, 188, 245, 97, 85, 190, 129, 193, 167, 190, 62, 226, 55, 62, 234, 250, 139, 189, 233, 41, 183, 61, 135, 152, 164, 190, 92, 21, 59, 60, 116, 43, 64, 190, 213, 194, 145, 60, 150, 94, 229, 189, 218, 30, 130, 62, 235, 83, 190, 62, 157, 152, 60, 190, 234, 36, 243, 189, 66, 47, 35, 62, 174, 150, 140, 187, 181, 176, 177, 190, 80, 249, 164, 62, 141, 62, 249, 190, 29, 62, 66, 61, 81, 64, 10, 191, 175, 217, 113, 190, 168, 74, 94, 61, 231, 229, 143, 190, 126, 191, 200, 190, 185, 168, 51, 62, 9, 28, 13, 62, 23, 111, 124, 61, 239, 228, 78, 62, 11, 243, 158, 62, 80, 233, 75, 62, 250, 4, 143, 61, 198, 200, 132, 62, 55, 48, 54, 62, 240, 74, 21, 190, 35, 74, 225, 190, 245, 193, 131, 61, 111, 205, 102, 62, 124, 225, 145, 190, 232, 138, 247, 61, 77, 158, 7, 62, 125, 203, 215, 190, 132, 143, 120, 62, 120, 251, 204, 60, 226, 163, 16, 61, 66, 114, 224, 190, 57, 167, 125, 62, 202, 143, 137, 189, 174, 115, 223, 189, 137, 205, 122, 62, 38, 66, 49, 61, 178, 40, 16, 62, 55, 189, 209, 190, 81, 171, 108, 190, 190, 128, 139, 61, 92, 171, 71, 190, 20, 228, 113, 190, 209, 182, 209, 61, 2, 192, 212, 190, 218, 97, 134, 61, 17, 218, 129, 62, 3, 244, 71, 62, 156, 111, 139, 62, 194, 0, 5, 62, 170, 3, 175, 61, 52, 2, 173, 62, 66, 241, 5, 190, 4, 188, 9, 190, 109, 250, 30, 60, 55, 223, 66, 61, 36, 75, 203, 190, 99, 213, 18, 62, 83, 139, 152, 62, 168, 59, 29, 62, 139, 77, 48, 62, 250, 47, 246, 190, 221, 213, 195, 62, 224, 12, 182, 62, 8, 89, 160, 190, 172, 120, 160, 62, 49, 196, 96, 62, 66, 178, 10, 191, 249, 252, 15, 191, 133, 102, 152, 190, 91, 225, 1, 62, 134, 246, 83, 62, 145, 90, 129, 190, 9, 46, 71, 62, 121, 175, 156, 61, 7, 107, 180, 190, 7, 244, 153, 62, 70, 151, 128, 189, 115, 52, 134, 190, 17, 155, 120, 190, 154, 239, 155, 60, 108, 146, 49, 190, 117, 246, 154, 190, 31, 16, 223, 61, 145, 72, 77, 62, 120, 210, 129, 62, 2, 212, 28, 189, 87, 1, 218, 190, 75, 118, 93, 62, 37, 159, 20, 190, 109, 134, 43, 188, 3, 191, 51, 62, 105, 1, 238, 189, 131, 208, 181, 190, 73, 33, 182, 61, 36, 255, 198, 188, 226, 119, 65, 191, 35, 164, 184, 190, 160, 144, 222, 190, 107, 155, 38, 189, 83, 215, 139, 190, 195, 110, 102, 190, 5, 67, 132, 60, 3, 138, 8, 190, 76, 157, 41, 191, 132, 252, 28, 190, 88, 114, 55, 188, 236, 211, 144, 59, 146, 36, 22, 190, 155, 232, 236, 61, 126, 186, 75, 62, 156, 87, 75, 191, 109, 221, 212, 189, 194, 253, 24, 191, 210, 200, 56, 62, 98, 39, 167, 189, 249, 67, 34, 190, 189, 37, 121, 188, 175, 111, 216, 190, 152, 67, 242, 190, 224, 174, 149, 190, 244, 129, 1, 190, 69, 189, 179, 62, 201, 78, 189, 61, 60, 145, 169, 190, 161, 202, 190, 190, 226, 172, 63, 62, 78, 97, 176, 62, 219, 167, 196, 190, 141, 42, 171, 62, 251, 191, 86, 62, 213, 149, 178, 190, 93, 235, 77, 190, 218, 228, 70, 61, 59, 179, 164, 59, 207, 189, 219, 61, 120, 77, 5, 191, 154, 48, 0, 62, 136, 154, 97, 189, 223, 162, 134, 190, 45, 15, 149, 62, 207, 205, 144, 61, 248, 26, 58, 190, 56, 195, 136, 190, 99, 58, 145, 59, 173, 216, 160, 189, 244, 123, 17, 190, 89, 194, 218, 189, 100, 1, 171, 61, 167, 96, 252, 61, 174, 13, 194, 189, 231, 158, 123, 190, 80, 62, 56, 62, 59, 217, 103, 62, 175, 124, 191, 60, 200, 190, 30, 62, 165, 48, 166, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 84, 98, 62, 231, 166, 42, 189, 228, 111, 162, 62, 186, 136, 76, 190, 240, 84, 4, 62, 186, 234, 208, 61, 6, 55, 99, 62, 46, 237, 72, 62, 150, 167, 9, 190, 121, 174, 90, 62, 16, 86, 216, 189, 89, 190, 89, 62, 249, 104, 133, 189, 218, 99, 42, 61, 137, 253, 193, 61, 100, 161, 29, 189, 64, 12, 38, 62, 105, 36, 15, 190, 250, 1, 86, 62, 12, 11, 110, 62, 73, 197, 166, 189, 138, 3, 38, 61, 110, 253, 77, 190, 43, 43, 179, 190, 39, 31, 191, 189, 80, 49, 28, 62, 135, 214, 248, 61, 124, 176, 227, 61, 225, 20, 119, 60, 114, 175, 148, 61, 132, 101, 106, 61, 34, 45, 29, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 45, 9, 62, 240, 87, 82, 189, 236, 171, 205, 188, 246, 93, 35, 62, 217, 105, 37, 60, 165, 105, 173, 62, 229, 201, 134, 60, 184, 42, 43, 63, 116, 86, 85, 189, 9, 224, 241, 62, 76, 236, 131, 60, 183, 69, 17, 191, 68, 150, 40, 63, 69, 108, 210, 190, 59, 245, 254, 190, 39, 254, 132, 190, 12, 7, 193, 61, 15, 167, 196, 190, 190, 241, 3, 191, 252, 133, 25, 63, 188, 203, 237, 62, 179, 92, 121, 190, 228, 199, 145, 190, 208, 174, 126, 63, 199, 67, 113, 190, 86, 166, 7, 191, 176, 195, 212, 190, 220, 221, 224, 62, 11, 214, 151, 62, 186, 157, 146, 190, 71, 44, 36, 191, 102, 237, 131, 190, 95, 117, 38, 189, 139, 99, 34, 62, 115, 20, 74, 191, 33, 115, 84, 189, 138, 66, 159, 190, 124, 70, 68, 190, 150, 69, 133, 190, 14, 114, 3, 60, 239, 172, 8, 190, 8, 173, 148, 189, 104, 120, 56, 62, 170, 127, 127, 62, 211, 81, 165, 62, 134, 221, 249, 188, 80, 183, 92, 62, 0, 185, 243, 189, 159, 193, 94, 190, 94, 108, 150, 60, 141, 251, 131, 190, 166, 68, 78, 190, 8, 12, 224, 61, 216, 160, 240, 189, 140, 138, 189, 188, 164, 236, 188, 62, 233, 216, 48, 62, 228, 140, 84, 62, 253, 40, 170, 61, 91, 92, 139, 61, 210, 133, 94, 62, 122, 31, 90, 62, 120, 154, 68, 62, 14, 211, 211, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {138, 4, 212, 189, 222, 29, 171, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {74, 230, 179, 191, 113, 10, 220, 62, 192, 213, 124, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {183, 71, 26, 64, 118, 75, 163, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0004/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}