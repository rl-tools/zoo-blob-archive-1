// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {216, 247, 27, 63, 134, 180, 226, 61, 109, 13, 188, 190, 10, 28, 31, 190, 67, 202, 108, 191, 228, 93, 58, 189, 69, 87, 156, 62, 15, 33, 108, 63, 91, 163, 80, 62, 126, 43, 216, 190, 116, 176, 100, 190, 133, 49, 241, 62, 79, 182, 12, 191, 155, 198, 86, 62, 102, 58, 36, 191, 5, 99, 42, 62, 89, 224, 152, 63, 122, 191, 254, 61, 161, 7, 7, 63, 99, 52, 216, 190, 112, 188, 110, 190, 212, 91, 29, 63, 62, 197, 30, 63, 46, 169, 168, 62, 64, 105, 64, 189, 63, 20, 107, 63, 9, 227, 55, 62, 203, 166, 64, 63, 86, 10, 58, 63, 67, 235, 149, 62, 41, 91, 31, 63, 211, 194, 210, 62, 143, 143, 172, 62, 102, 23, 39, 190, 138, 188, 51, 191, 65, 64, 104, 190, 46, 114, 54, 191, 203, 91, 148, 189, 158, 214, 145, 190, 155, 25, 83, 62, 226, 30, 58, 63, 195, 194, 196, 62, 90, 35, 96, 190, 57, 73, 158, 190, 132, 154, 60, 62, 92, 45, 169, 62, 16, 239, 18, 63, 33, 176, 211, 61, 68, 3, 16, 190, 200, 28, 171, 189, 87, 211, 93, 189, 243, 170, 227, 190, 89, 109, 124, 63, 49, 217, 108, 62, 143, 246, 44, 190, 155, 152, 46, 63, 150, 237, 146, 190, 236, 227, 245, 60, 188, 248, 153, 63, 249, 30, 215, 61, 109, 128, 225, 62, 57, 224, 68, 191, 239, 53, 52, 62, 57, 38, 116, 190, 128, 184, 149, 63, 113, 45, 134, 62, 199, 237, 149, 189, 74, 13, 236, 190, 231, 57, 131, 62, 82, 171, 250, 188, 247, 54, 209, 62, 83, 183, 154, 190, 235, 77, 52, 191, 99, 156, 145, 191, 176, 24, 223, 190, 210, 35, 104, 62, 89, 189, 40, 63, 27, 9, 97, 62, 18, 110, 238, 62, 98, 52, 150, 191, 105, 45, 143, 190, 74, 112, 135, 62, 27, 48, 70, 63, 118, 181, 10, 62, 92, 222, 23, 61, 208, 60, 83, 191, 23, 107, 221, 189, 28, 44, 107, 191, 1, 236, 0, 63, 209, 6, 140, 61, 95, 38, 8, 191, 101, 41, 168, 191, 45, 204, 151, 190, 252, 51, 107, 190, 79, 223, 225, 62, 152, 174, 241, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 68, 135, 191, 223, 79, 167, 62, 131, 98, 89, 189, 13, 42, 15, 191, 52, 96, 204, 61, 23, 105, 205, 190, 172, 34, 167, 190, 137, 120, 109, 191, 66, 24, 169, 190, 35, 117, 35, 191, 140, 108, 1, 191, 6, 32, 70, 60, 159, 20, 12, 189, 33, 176, 144, 190, 80, 10, 111, 190, 80, 166, 41, 62, 4, 59, 17, 63, 59, 67, 210, 189, 142, 174, 40, 62, 41, 24, 193, 189, 113, 175, 23, 190, 137, 205, 202, 190, 66, 87, 28, 63, 39, 210, 228, 62, 49, 61, 17, 61, 247, 47, 103, 187, 24, 152, 128, 62, 150, 243, 146, 187, 185, 39, 207, 62, 105, 6, 193, 62, 225, 29, 96, 61, 193, 217, 212, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 182, 144, 62, 21, 180, 74, 189, 122, 99, 193, 190, 166, 169, 192, 61, 128, 97, 144, 189, 14, 226, 30, 190, 94, 254, 168, 62, 37, 42, 201, 190, 155, 98, 44, 62, 104, 141, 155, 190, 95, 97, 113, 190, 179, 251, 74, 62, 53, 105, 83, 189, 77, 215, 81, 189, 13, 186, 20, 61, 178, 222, 3, 62, 101, 248, 172, 189, 161, 137, 242, 61, 86, 70, 123, 62, 177, 109, 65, 189, 81, 252, 63, 189, 200, 236, 96, 62, 51, 249, 19, 62, 92, 176, 190, 61, 86, 36, 94, 188, 88, 245, 53, 61, 127, 208, 45, 61, 22, 199, 165, 189, 67, 232, 69, 189, 34, 46, 132, 190, 238, 105, 7, 191, 223, 6, 212, 188, 9, 173, 33, 62, 183, 34, 47, 190, 159, 167, 1, 190, 227, 224, 65, 59, 204, 13, 5, 190, 229, 33, 152, 61, 167, 235, 171, 61, 202, 89, 34, 190, 65, 212, 97, 61, 116, 213, 207, 188, 7, 173, 98, 188, 205, 46, 225, 61, 172, 133, 81, 189, 116, 141, 236, 61, 84, 243, 169, 189, 13, 56, 126, 61, 247, 133, 22, 62, 15, 206, 161, 189, 234, 75, 179, 61, 28, 177, 172, 189, 241, 211, 36, 190, 221, 88, 101, 61, 91, 15, 175, 189, 180, 106, 25, 190, 94, 196, 19, 189, 228, 51, 129, 60, 140, 144, 180, 189, 217, 179, 141, 189, 61, 21, 80, 189, 37, 128, 44, 60, 125, 78, 52, 190, 203, 58, 21, 190, 13, 209, 149, 62, 73, 39, 204, 190, 14, 16, 225, 189, 143, 60, 144, 60, 238, 12, 153, 190, 5, 187, 4, 191, 113, 199, 229, 189, 73, 236, 193, 60, 192, 28, 14, 62, 249, 24, 91, 189, 78, 196, 164, 62, 24, 125, 254, 190, 175, 84, 85, 190, 118, 255, 12, 190, 51, 119, 27, 190, 214, 27, 2, 63, 232, 175, 114, 62, 248, 201, 119, 61, 49, 161, 194, 188, 117, 75, 66, 190, 122, 43, 10, 190, 157, 129, 220, 190, 204, 183, 157, 62, 38, 230, 87, 62, 151, 226, 247, 190, 79, 42, 24, 62, 99, 73, 144, 62, 185, 173, 24, 62, 232, 40, 153, 61, 195, 126, 2, 190, 84, 192, 156, 191, 17, 201, 17, 62, 249, 165, 77, 62, 48, 244, 81, 189, 114, 169, 241, 189, 132, 139, 144, 188, 128, 232, 132, 61, 154, 193, 140, 61, 213, 39, 121, 189, 111, 195, 33, 62, 72, 231, 24, 190, 132, 106, 195, 189, 96, 212, 227, 60, 154, 248, 189, 61, 78, 134, 34, 189, 168, 54, 219, 189, 131, 22, 59, 190, 181, 212, 174, 190, 66, 200, 243, 57, 244, 42, 32, 190, 236, 117, 12, 62, 206, 54, 185, 61, 72, 25, 83, 190, 237, 229, 103, 190, 89, 158, 7, 191, 39, 226, 117, 190, 82, 122, 49, 62, 44, 237, 69, 61, 77, 200, 188, 188, 243, 153, 21, 190, 167, 250, 164, 189, 108, 115, 55, 190, 195, 73, 9, 190, 255, 250, 223, 189, 91, 243, 96, 190, 95, 209, 31, 190, 192, 2, 80, 188, 69, 3, 247, 61, 162, 251, 199, 190, 84, 96, 33, 190, 30, 20, 175, 190, 203, 139, 87, 190, 179, 184, 249, 61, 39, 253, 147, 189, 147, 64, 34, 62, 30, 136, 26, 62, 21, 125, 177, 190, 31, 142, 217, 188, 132, 80, 211, 189, 249, 136, 160, 62, 54, 14, 88, 62, 27, 115, 175, 189, 71, 63, 249, 188, 17, 188, 31, 62, 189, 63, 131, 190, 176, 156, 86, 62, 221, 26, 75, 62, 79, 59, 210, 189, 142, 154, 87, 190, 124, 96, 251, 61, 37, 58, 50, 62, 60, 30, 218, 189, 29, 217, 152, 61, 130, 117, 7, 190, 39, 151, 241, 189, 97, 182, 100, 60, 153, 118, 16, 62, 212, 185, 67, 62, 72, 78, 234, 190, 172, 206, 116, 189, 26, 74, 20, 189, 162, 92, 159, 188, 234, 46, 158, 61, 221, 192, 67, 191, 60, 115, 27, 62, 206, 28, 105, 191, 43, 220, 200, 190, 188, 73, 119, 62, 53, 132, 57, 190, 190, 116, 19, 190, 163, 197, 32, 61, 139, 9, 158, 187, 149, 72, 171, 62, 82, 212, 182, 61, 86, 127, 86, 62, 198, 61, 47, 62, 180, 67, 34, 62, 193, 196, 46, 62, 2, 228, 146, 62, 9, 7, 91, 62, 182, 103, 29, 61, 194, 177, 122, 189, 20, 56, 61, 61, 251, 41, 207, 188, 28, 73, 123, 62, 31, 93, 87, 62, 32, 132, 3, 62, 6, 45, 220, 61, 42, 143, 138, 62, 182, 45, 59, 61, 15, 67, 50, 190, 46, 167, 188, 188, 193, 66, 244, 61, 72, 179, 51, 61, 150, 144, 36, 189, 221, 30, 154, 190, 82, 205, 226, 61, 151, 79, 130, 190, 31, 208, 11, 61, 104, 69, 226, 61, 139, 94, 55, 190, 120, 85, 177, 189, 108, 146, 251, 188, 216, 25, 121, 62, 7, 122, 86, 62, 109, 198, 65, 61, 101, 199, 152, 61, 36, 189, 12, 190, 59, 3, 132, 61, 148, 189, 5, 61, 50, 103, 202, 61, 122, 33, 10, 62, 121, 202, 20, 189, 172, 171, 239, 189, 26, 162, 0, 60, 249, 168, 80, 62, 161, 3, 77, 62, 163, 72, 3, 190, 20, 249, 65, 61, 210, 235, 179, 61, 29, 99, 25, 190, 203, 109, 14, 191, 255, 165, 174, 190, 22, 127, 162, 189, 70, 168, 156, 190, 133, 28, 185, 191, 138, 74, 18, 62, 252, 235, 245, 61, 198, 53, 147, 190, 246, 174, 210, 189, 235, 77, 167, 61, 212, 238, 170, 188, 61, 185, 9, 191, 184, 226, 34, 191, 119, 24, 118, 190, 231, 78, 47, 62, 46, 30, 56, 62, 204, 11, 218, 60, 207, 181, 9, 62, 214, 80, 101, 62, 46, 163, 133, 62, 106, 233, 22, 63, 195, 121, 13, 189, 71, 203, 33, 62, 224, 198, 48, 191, 71, 48, 73, 190, 84, 96, 252, 61, 10, 39, 90, 190, 177, 213, 171, 61, 36, 191, 114, 62, 119, 135, 16, 191, 102, 92, 237, 189, 79, 54, 57, 190, 193, 155, 227, 61, 76, 204, 5, 61, 135, 8, 112, 189, 177, 252, 106, 61, 99, 110, 34, 62, 175, 148, 37, 190, 95, 66, 27, 62, 248, 173, 3, 190, 38, 62, 148, 189, 58, 247, 134, 60, 185, 177, 54, 61, 95, 169, 88, 189, 213, 45, 24, 190, 162, 141, 236, 61, 21, 69, 201, 188, 206, 86, 103, 188, 33, 73, 36, 190, 140, 6, 43, 187, 19, 62, 30, 61, 109, 145, 212, 61, 201, 12, 23, 190, 175, 217, 241, 189, 185, 95, 142, 189, 62, 22, 131, 61, 89, 17, 44, 61, 175, 168, 59, 189, 120, 9, 178, 189, 73, 10, 159, 189, 84, 45, 219, 189, 126, 213, 54, 188, 47, 223, 210, 189, 56, 121, 124, 62, 111, 123, 63, 189, 195, 137, 196, 190, 46, 90, 172, 61, 223, 182, 140, 190, 120, 216, 213, 189, 242, 11, 39, 62, 240, 127, 54, 191, 159, 6, 155, 62, 240, 91, 125, 191, 229, 102, 247, 190, 170, 90, 43, 190, 251, 82, 144, 190, 74, 183, 161, 190, 236, 59, 158, 61, 95, 250, 223, 60, 129, 81, 15, 62, 26, 162, 5, 62, 248, 252, 108, 62, 74, 112, 24, 62, 81, 76, 152, 62, 183, 122, 228, 62, 101, 180, 104, 62, 73, 106, 139, 189, 96, 36, 4, 191, 180, 3, 253, 58, 1, 136, 182, 62, 62, 86, 177, 189, 127, 232, 114, 62, 75, 219, 138, 189, 171, 161, 190, 189, 153, 62, 20, 61, 121, 247, 8, 190, 175, 181, 29, 190, 75, 20, 143, 189, 10, 71, 167, 189, 5, 20, 79, 61, 50, 90, 198, 189, 192, 66, 178, 189, 244, 244, 18, 190, 101, 62, 218, 189, 21, 180, 20, 188, 230, 243, 81, 190, 177, 148, 189, 60, 27, 78, 166, 57, 222, 243, 71, 190, 50, 23, 65, 61, 158, 170, 23, 62, 6, 170, 17, 190, 111, 203, 236, 188, 96, 26, 196, 188, 139, 102, 0, 62, 36, 233, 34, 190, 55, 203, 76, 61, 99, 23, 4, 62, 158, 154, 117, 190, 143, 239, 209, 189, 236, 246, 25, 188, 235, 230, 147, 60, 107, 7, 80, 61, 200, 61, 77, 190, 183, 161, 212, 61, 125, 14, 90, 60, 43, 93, 113, 187, 124, 86, 254, 190, 45, 39, 3, 62, 58, 164, 190, 62, 82, 248, 178, 190, 124, 57, 69, 62, 181, 224, 104, 189, 253, 240, 75, 190, 195, 40, 131, 191, 52, 2, 54, 191, 196, 168, 186, 62, 108, 170, 103, 62, 242, 252, 188, 190, 11, 150, 105, 62, 32, 17, 200, 62, 145, 151, 159, 189, 221, 1, 180, 62, 51, 83, 111, 60, 136, 225, 95, 190, 209, 36, 213, 189, 195, 207, 210, 61, 0, 148, 152, 190, 52, 120, 252, 190, 103, 241, 117, 61, 40, 187, 30, 61, 48, 89, 133, 62, 232, 121, 127, 61, 102, 163, 94, 190, 234, 247, 255, 61, 132, 114, 239, 189, 146, 14, 4, 61, 40, 210, 58, 62, 105, 34, 89, 190, 124, 90, 20, 63, 232, 161, 66, 60, 37, 158, 6, 191, 238, 70, 6, 62, 70, 170, 237, 189, 22, 103, 182, 190, 13, 14, 0, 63, 237, 90, 104, 191, 177, 217, 249, 61, 112, 239, 131, 191, 121, 227, 10, 191, 244, 194, 94, 61, 229, 83, 151, 190, 229, 176, 167, 190, 169, 93, 172, 61, 232, 12, 163, 190, 248, 250, 13, 61, 39, 214, 134, 62, 138, 26, 149, 62, 34, 158, 41, 62, 71, 125, 16, 63, 154, 156, 29, 63, 163, 35, 163, 62, 194, 211, 17, 190, 193, 6, 48, 190, 134, 240, 68, 61, 155, 189, 138, 62, 99, 100, 236, 190, 71, 74, 32, 61, 236, 103, 235, 189, 122, 185, 98, 190, 144, 166, 95, 62, 74, 98, 5, 191, 225, 143, 58, 61, 162, 65, 45, 62, 120, 72, 74, 190, 176, 168, 139, 62, 36, 188, 89, 59, 115, 239, 163, 190, 188, 14, 90, 191, 31, 102, 105, 191, 69, 181, 149, 62, 97, 137, 157, 62, 217, 184, 221, 190, 141, 19, 163, 62, 191, 98, 148, 62, 21, 21, 115, 190, 119, 75, 154, 62, 131, 143, 194, 61, 213, 206, 8, 190, 1, 171, 102, 190, 244, 133, 76, 62, 113, 4, 223, 190, 148, 119, 254, 190, 187, 145, 15, 61, 176, 54, 15, 62, 93, 44, 15, 61, 96, 219, 101, 62, 37, 224, 134, 189, 254, 59, 133, 62, 133, 160, 50, 62, 85, 96, 81, 61, 236, 98, 45, 62, 32, 251, 139, 190, 79, 122, 82, 190, 166, 116, 29, 62, 79, 193, 135, 190, 159, 88, 87, 191, 107, 225, 31, 189, 207, 16, 48, 61, 119, 230, 158, 61, 10, 63, 49, 190, 227, 46, 82, 191, 152, 184, 9, 190, 164, 48, 168, 190, 140, 201, 39, 191, 159, 92, 141, 188, 184, 157, 40, 191, 181, 15, 165, 61, 35, 109, 139, 62, 96, 4, 40, 188, 145, 158, 149, 189, 36, 212, 51, 190, 86, 53, 181, 190, 8, 27, 220, 188, 35, 99, 246, 62, 199, 196, 71, 62, 167, 171, 3, 61, 242, 52, 65, 190, 228, 59, 155, 191, 216, 28, 236, 189, 13, 194, 232, 190, 120, 178, 42, 61, 247, 232, 81, 62, 12, 114, 129, 61, 216, 20, 179, 190, 152, 44, 20, 190, 80, 183, 224, 189, 8, 99, 140, 62, 203, 17, 140, 188, 169, 223, 32, 61, 135, 118, 214, 61, 86, 243, 228, 190, 22, 118, 21, 191, 228, 92, 0, 191, 57, 248, 253, 187, 218, 228, 203, 62, 12, 48, 219, 190, 113, 35, 156, 61, 183, 150, 201, 61, 175, 161, 131, 190, 70, 198, 112, 62, 97, 243, 135, 62, 133, 114, 124, 190, 249, 15, 142, 189, 36, 91, 74, 61, 121, 233, 13, 190, 225, 14, 214, 190, 210, 103, 23, 62, 24, 150, 139, 62, 13, 66, 139, 61, 0, 132, 170, 61, 62, 85, 96, 190, 219, 98, 120, 62, 68, 210, 185, 189, 223, 46, 67, 188, 108, 66, 79, 190, 120, 161, 159, 189, 150, 44, 119, 61, 16, 173, 21, 62, 82, 253, 186, 190, 102, 147, 181, 61, 235, 152, 210, 189, 55, 166, 172, 189, 99, 192, 138, 61, 168, 220, 44, 191, 213, 6, 114, 62, 3, 176, 29, 191, 198, 174, 150, 189, 187, 244, 166, 189, 239, 107, 134, 189, 208, 113, 170, 189, 58, 241, 174, 189, 126, 164, 11, 62, 71, 114, 170, 62, 144, 4, 247, 61, 33, 204, 163, 189, 25, 44, 229, 189, 98, 67, 31, 62, 133, 6, 175, 61, 233, 89, 7, 62, 240, 177, 132, 62, 134, 48, 210, 61, 111, 197, 22, 61, 153, 255, 243, 61, 197, 25, 221, 189, 172, 243, 98, 61, 6, 255, 120, 60, 134, 228, 15, 190, 39, 208, 187, 61, 115, 174, 240, 62, 223, 1, 71, 189, 109, 107, 134, 60, 123, 203, 238, 62, 9, 32, 47, 190, 153, 198, 178, 189, 41, 68, 108, 62, 202, 128, 100, 190, 203, 210, 225, 61, 13, 74, 207, 62, 205, 242, 129, 189, 132, 152, 72, 62, 15, 212, 25, 190, 203, 166, 26, 62, 136, 70, 189, 62, 64, 151, 250, 189, 235, 183, 108, 189, 232, 247, 210, 61, 253, 236, 78, 62, 19, 79, 70, 190, 110, 220, 138, 62, 182, 104, 11, 62, 112, 249, 181, 61, 193, 191, 161, 190, 130, 102, 173, 190, 34, 72, 67, 62, 195, 97, 139, 62, 240, 223, 192, 61, 187, 124, 20, 62, 108, 20, 157, 190, 75, 120, 35, 190, 220, 165, 173, 62, 86, 152, 173, 190, 51, 71, 156, 60, 106, 128, 33, 62, 15, 232, 38, 191, 98, 235, 24, 62, 198, 219, 198, 62, 113, 4, 179, 190, 77, 73, 179, 189, 33, 13, 154, 191, 115, 73, 139, 190, 99, 180, 132, 189, 235, 48, 141, 190, 150, 101, 88, 62, 212, 58, 147, 61, 196, 23, 212, 190, 84, 157, 164, 189, 137, 215, 148, 62, 185, 166, 197, 189, 194, 152, 32, 189, 109, 125, 76, 188, 197, 113, 97, 191, 67, 101, 113, 190, 143, 96, 239, 189, 164, 239, 76, 62, 166, 168, 244, 61, 213, 21, 215, 190, 227, 184, 93, 190, 204, 128, 145, 189, 184, 199, 236, 61, 98, 234, 155, 59, 225, 224, 186, 61, 178, 164, 27, 190, 248, 150, 176, 190, 178, 10, 219, 188, 158, 169, 207, 190, 72, 182, 189, 61, 136, 205, 21, 191, 32, 123, 233, 61, 207, 164, 228, 189, 188, 136, 110, 191, 103, 175, 120, 189, 49, 229, 57, 191, 224, 179, 162, 190, 177, 91, 58, 191, 253, 105, 121, 191, 69, 175, 39, 190, 72, 39, 139, 188, 154, 165, 255, 61, 42, 33, 47, 62, 125, 66, 204, 189, 135, 135, 240, 61, 2, 80, 106, 62, 162, 107, 238, 188, 190, 106, 44, 62, 69, 94, 122, 62, 106, 0, 47, 190, 149, 53, 26, 191, 174, 245, 172, 61, 227, 17, 10, 62, 233, 114, 168, 60, 232, 43, 227, 60, 43, 40, 110, 62, 249, 229, 52, 191, 194, 210, 95, 190, 19, 196, 39, 62, 170, 105, 57, 189, 68, 221, 170, 190, 236, 96, 49, 189, 61, 213, 250, 189, 58, 80, 147, 190, 228, 228, 130, 62, 79, 3, 251, 190, 229, 201, 154, 62, 172, 174, 206, 190, 252, 95, 157, 190, 19, 228, 150, 190, 193, 123, 129, 190, 28, 205, 42, 190, 65, 174, 50, 187, 237, 145, 190, 189, 41, 59, 107, 62, 157, 14, 161, 62, 113, 184, 6, 62, 182, 69, 66, 62, 5, 159, 66, 62, 65, 42, 171, 62, 228, 47, 74, 62, 206, 80, 221, 61, 243, 76, 16, 191, 239, 60, 25, 62, 5, 86, 162, 62, 17, 122, 129, 189, 17, 42, 94, 61, 19, 210, 27, 189, 108, 0, 106, 191, 249, 151, 135, 61, 181, 249, 246, 189, 36, 134, 150, 189, 145, 125, 132, 62, 245, 94, 146, 190, 191, 98, 244, 60, 179, 197, 29, 190, 46, 177, 215, 189, 134, 192, 82, 191, 44, 212, 85, 191, 59, 149, 194, 62, 198, 128, 118, 62, 180, 54, 187, 190, 203, 118, 44, 187, 13, 186, 69, 62, 40, 213, 37, 62, 45, 4, 160, 62, 230, 97, 77, 62, 5, 13, 30, 190, 5, 34, 127, 58, 88, 90, 246, 60, 192, 217, 241, 189, 77, 155, 136, 190, 180, 189, 174, 61, 159, 110, 172, 189, 223, 32, 2, 62, 238, 18, 112, 62, 195, 94, 108, 190, 125, 186, 31, 62, 205, 230, 129, 60, 68, 59, 66, 61, 114, 240, 71, 190, 76, 144, 229, 61, 245, 75, 177, 62, 107, 30, 128, 190, 158, 150, 6, 60, 205, 194, 47, 62, 27, 115, 105, 190, 211, 58, 140, 189, 120, 185, 233, 62, 245, 153, 72, 190, 73, 180, 251, 61, 3, 200, 133, 62, 126, 48, 219, 187, 17, 76, 132, 62, 57, 84, 153, 190, 71, 41, 145, 189, 117, 154, 180, 62, 134, 226, 18, 190, 254, 10, 172, 61, 253, 219, 236, 61, 215, 74, 177, 62, 79, 78, 119, 188, 93, 96, 13, 63, 16, 254, 117, 188, 198, 212, 81, 62, 217, 54, 37, 190, 11, 123, 59, 190, 253, 235, 114, 62, 244, 230, 134, 61, 132, 27, 19, 190, 51, 179, 192, 61, 209, 193, 247, 189, 209, 43, 66, 189, 0, 199, 52, 62, 149, 14, 200, 189, 91, 254, 148, 190, 50, 64, 155, 62, 252, 170, 89, 62, 235, 176, 47, 189, 228, 97, 5, 62, 0, 12, 25, 190, 39, 229, 202, 62, 223, 227, 111, 190, 98, 27, 9, 63, 74, 61, 238, 62, 19, 83, 196, 61, 220, 179, 162, 61, 246, 29, 49, 62, 51, 228, 1, 190, 247, 141, 127, 62, 231, 6, 164, 190, 133, 1, 175, 189, 150, 123, 165, 60, 60, 12, 252, 60, 235, 25, 185, 190, 78, 45, 205, 190, 27, 105, 127, 190, 78, 205, 189, 189, 147, 126, 13, 62, 27, 152, 226, 61, 44, 184, 155, 190, 180, 226, 157, 61, 170, 112, 58, 191, 125, 31, 59, 191, 62, 152, 148, 62, 180, 242, 171, 189, 231, 200, 146, 60, 108, 109, 250, 61, 12, 2, 124, 62, 239, 236, 7, 62, 31, 246, 199, 59, 39, 143, 153, 190, 201, 188, 250, 62, 234, 67, 12, 61, 114, 203, 8, 191, 17, 113, 187, 190, 92, 152, 169, 190, 254, 65, 162, 61, 253, 187, 170, 60, 119, 138, 234, 190, 147, 19, 197, 189, 222, 118, 94, 190, 96, 17, 88, 62, 127, 205, 79, 62, 221, 85, 23, 190, 114, 238, 77, 191, 116, 197, 252, 61, 65, 127, 146, 62, 36, 51, 8, 190, 217, 113, 7, 190, 208, 154, 144, 61, 232, 213, 184, 189, 74, 173, 150, 62, 198, 22, 204, 60, 12, 32, 164, 62, 81, 129, 63, 62, 12, 193, 130, 61, 2, 113, 194, 189, 192, 195, 44, 191, 74, 180, 18, 62, 164, 90, 85, 62, 155, 136, 31, 190, 50, 226, 187, 62, 85, 4, 60, 62, 119, 44, 163, 190, 165, 42, 29, 191, 160, 125, 169, 191, 166, 106, 165, 62, 13, 170, 11, 63, 229, 249, 225, 190, 160, 211, 212, 62, 90, 102, 125, 62, 244, 171, 0, 189, 220, 193, 168, 62, 161, 138, 66, 62, 110, 29, 244, 189, 156, 60, 114, 190, 24, 79, 232, 61, 19, 187, 40, 190, 247, 188, 6, 191, 14, 83, 220, 189, 232, 201, 30, 61, 173, 229, 87, 62, 248, 221, 211, 189, 170, 182, 96, 190, 210, 238, 129, 62, 200, 17, 148, 189, 247, 219, 172, 61, 173, 189, 30, 62, 234, 237, 155, 190, 195, 218, 2, 62, 52, 199, 60, 191, 54, 19, 117, 62, 126, 219, 44, 191, 212, 41, 106, 190, 103, 213, 192, 62, 106, 66, 237, 188, 229, 245, 36, 189, 66, 172, 35, 190, 178, 179, 202, 184, 140, 246, 202, 61, 77, 15, 17, 190, 51, 168, 13, 190, 228, 48, 178, 60, 253, 150, 232, 188, 213, 52, 254, 61, 186, 130, 254, 187, 39, 149, 81, 190, 121, 170, 224, 62, 55, 121, 142, 62, 151, 157, 16, 190, 84, 74, 145, 190, 230, 16, 0, 191, 49, 100, 74, 62, 83, 80, 76, 60, 66, 93, 18, 61, 26, 50, 0, 191, 134, 223, 178, 57, 68, 18, 165, 190, 9, 151, 9, 62, 245, 56, 27, 59, 80, 9, 164, 62, 141, 81, 240, 62, 216, 96, 89, 190, 175, 205, 187, 189, 138, 202, 49, 62, 180, 5, 215, 59, 140, 122, 191, 190, 82, 130, 178, 62, 122, 70, 116, 191, 194, 30, 15, 62, 132, 101, 43, 191, 221, 219, 107, 190, 129, 37, 139, 61, 101, 91, 158, 190, 231, 120, 183, 190, 207, 60, 63, 62, 74, 63, 49, 62, 28, 133, 8, 61, 151, 249, 62, 62, 25, 242, 152, 62, 131, 157, 114, 62, 21, 53, 6, 61, 173, 130, 142, 62, 147, 84, 45, 62, 208, 63, 1, 190, 251, 237, 215, 190, 186, 123, 230, 61, 114, 248, 102, 62, 106, 77, 131, 190, 112, 241, 216, 61, 46, 110, 16, 188, 230, 146, 19, 191, 219, 23, 141, 62, 51, 47, 247, 61, 226, 34, 147, 60, 33, 160, 184, 190, 186, 225, 50, 62, 34, 171, 155, 188, 142, 14, 231, 61, 154, 96, 114, 62, 4, 196, 13, 190, 93, 151, 191, 62, 61, 243, 52, 191, 207, 233, 175, 190, 87, 24, 138, 61, 226, 58, 47, 190, 217, 196, 125, 190, 253, 143, 175, 60, 189, 94, 147, 190, 114, 103, 217, 61, 242, 189, 151, 62, 13, 145, 146, 62, 139, 112, 221, 62, 148, 242, 172, 61, 203, 181, 91, 62, 240, 18, 161, 62, 24, 70, 123, 189, 51, 175, 232, 189, 142, 102, 137, 61, 219, 102, 157, 60, 249, 75, 161, 190, 21, 14, 28, 62, 186, 3, 197, 62, 195, 77, 14, 62, 218, 37, 132, 62, 247, 221, 39, 191, 120, 194, 232, 62, 203, 125, 182, 62, 225, 117, 170, 190, 200, 4, 162, 62, 180, 157, 180, 62, 51, 72, 2, 191, 9, 237, 55, 191, 19, 5, 254, 190, 160, 82, 22, 62, 252, 248, 88, 62, 238, 18, 102, 190, 220, 30, 82, 62, 218, 128, 168, 61, 237, 146, 203, 190, 3, 173, 158, 62, 91, 222, 233, 188, 90, 110, 102, 190, 160, 75, 109, 190, 185, 10, 153, 61, 36, 94, 187, 189, 19, 243, 173, 190, 109, 110, 219, 61, 58, 5, 80, 62, 192, 186, 132, 62, 101, 166, 91, 189, 148, 80, 198, 190, 201, 195, 100, 62, 230, 208, 220, 189, 166, 133, 89, 187, 196, 139, 102, 62, 76, 45, 36, 190, 131, 208, 181, 190, 196, 180, 42, 62, 184, 160, 233, 58, 4, 103, 7, 191, 6, 2, 70, 190, 171, 46, 1, 191, 107, 155, 38, 189, 171, 173, 180, 190, 227, 229, 91, 190, 177, 108, 30, 190, 150, 80, 248, 189, 124, 21, 108, 191, 158, 199, 93, 189, 127, 250, 41, 62, 100, 208, 73, 62, 186, 255, 72, 190, 207, 141, 90, 62, 129, 73, 190, 62, 250, 181, 35, 191, 183, 41, 254, 189, 32, 234, 206, 190, 51, 148, 155, 62, 239, 202, 124, 61, 16, 67, 219, 188, 0, 47, 45, 61, 69, 98, 179, 190, 116, 176, 191, 190, 98, 197, 144, 190, 90, 225, 184, 189, 32, 137, 248, 62, 208, 123, 211, 61, 206, 242, 220, 190, 109, 142, 8, 191, 47, 172, 171, 62, 30, 153, 169, 62, 145, 124, 251, 190, 2, 64, 171, 62, 154, 51, 157, 62, 108, 14, 177, 190, 116, 86, 95, 190, 50, 77, 54, 190, 21, 219, 99, 61, 114, 106, 64, 62, 21, 151, 1, 191, 22, 2, 15, 62, 116, 235, 203, 188, 123, 247, 235, 190, 139, 92, 153, 62, 43, 3, 228, 61, 227, 51, 82, 190, 232, 156, 134, 190, 234, 177, 35, 61, 130, 87, 212, 61, 3, 195, 114, 190, 145, 179, 104, 189, 7, 216, 149, 61, 8, 226, 247, 61, 170, 209, 225, 189, 192, 37, 75, 190, 71, 232, 49, 62, 85, 60, 141, 62, 12, 110, 205, 188, 155, 62, 54, 62, 172, 47, 255, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {142, 110, 102, 62, 231, 166, 42, 189, 184, 42, 190, 62, 186, 136, 76, 190, 212, 50, 25, 62, 6, 238, 7, 62, 21, 247, 123, 62, 170, 117, 94, 62, 184, 19, 25, 190, 240, 37, 103, 62, 16, 86, 216, 189, 75, 209, 95, 62, 203, 42, 117, 189, 147, 186, 86, 61, 206, 73, 19, 62, 154, 176, 216, 188, 204, 54, 64, 62, 82, 218, 248, 189, 168, 32, 15, 62, 157, 151, 135, 62, 240, 9, 151, 189, 34, 219, 70, 61, 127, 243, 82, 190, 253, 117, 183, 190, 139, 99, 45, 189, 92, 169, 47, 62, 183, 132, 164, 61, 96, 193, 208, 61, 157, 128, 130, 61, 142, 103, 196, 61, 191, 195, 38, 62, 4, 236, 161, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {101, 107, 34, 62, 240, 87, 82, 189, 38, 159, 135, 188, 246, 93, 35, 62, 85, 38, 152, 60, 210, 86, 193, 62, 50, 150, 203, 60, 211, 90, 46, 63, 181, 242, 84, 189, 61, 241, 12, 63, 76, 236, 131, 60, 238, 21, 29, 191, 95, 20, 138, 63, 126, 80, 230, 190, 50, 200, 25, 191, 21, 12, 145, 190, 88, 132, 189, 61, 183, 192, 246, 190, 173, 58, 255, 190, 161, 243, 55, 63, 123, 115, 7, 63, 136, 68, 142, 190, 165, 237, 181, 190, 208, 17, 151, 63, 37, 46, 172, 190, 173, 201, 32, 191, 172, 138, 13, 191, 148, 206, 249, 62, 146, 117, 189, 62, 105, 156, 173, 190, 8, 33, 73, 191, 54, 85, 155, 190, 107, 171, 192, 189, 139, 99, 34, 62, 11, 60, 90, 191, 33, 115, 84, 189, 162, 220, 160, 190, 158, 14, 76, 190, 222, 126, 137, 190, 86, 248, 89, 189, 97, 159, 8, 190, 242, 8, 6, 189, 104, 120, 56, 62, 125, 93, 50, 62, 44, 157, 200, 62, 254, 164, 166, 189, 202, 175, 115, 62, 62, 4, 34, 190, 44, 112, 131, 190, 134, 150, 20, 61, 231, 102, 142, 190, 183, 26, 66, 190, 156, 145, 75, 62, 97, 192, 113, 190, 189, 218, 22, 58, 77, 57, 124, 62, 229, 148, 65, 62, 55, 208, 75, 62, 244, 247, 175, 61, 21, 0, 124, 61, 175, 4, 104, 62, 200, 66, 86, 62, 130, 6, 15, 61, 41, 200, 197, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {252, 76, 211, 189, 4, 172, 204, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {27, 146, 2, 63, 135, 57, 15, 64, 19, 3, 35, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {61, 247, 198, 191, 120, 83, 192, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0004/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}