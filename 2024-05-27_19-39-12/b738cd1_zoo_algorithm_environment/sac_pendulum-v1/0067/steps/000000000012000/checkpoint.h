// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 149, 57, 63, 20, 61, 24, 191, 122, 188, 154, 190, 42, 255, 237, 62, 25, 18, 61, 191, 164, 193, 243, 190, 175, 135, 188, 62, 17, 184, 168, 191, 48, 120, 119, 190, 106, 238, 238, 188, 147, 163, 145, 191, 191, 132, 12, 191, 185, 27, 43, 190, 147, 159, 147, 190, 74, 146, 202, 62, 236, 217, 8, 63, 253, 52, 116, 191, 3, 218, 10, 62, 24, 32, 183, 62, 91, 16, 91, 191, 115, 13, 47, 190, 65, 90, 49, 63, 20, 72, 164, 63, 92, 120, 164, 62, 144, 195, 25, 191, 58, 116, 93, 190, 22, 18, 243, 189, 250, 223, 4, 63, 190, 139, 43, 190, 181, 248, 247, 62, 211, 36, 113, 62, 242, 171, 157, 191, 25, 184, 150, 190, 210, 2, 66, 62, 36, 207, 133, 63, 85, 233, 163, 190, 160, 136, 55, 62, 5, 230, 0, 191, 141, 240, 47, 62, 73, 98, 130, 190, 1, 170, 194, 190, 4, 94, 125, 190, 39, 195, 244, 190, 87, 2, 184, 190, 59, 230, 31, 191, 186, 49, 148, 190, 142, 55, 193, 62, 166, 47, 56, 63, 244, 13, 54, 63, 104, 124, 55, 191, 191, 219, 133, 190, 98, 188, 96, 191, 55, 230, 221, 190, 177, 172, 180, 186, 140, 67, 219, 190, 223, 179, 136, 190, 70, 174, 169, 62, 96, 53, 69, 62, 236, 43, 223, 62, 65, 123, 148, 190, 21, 201, 65, 61, 64, 35, 120, 191, 92, 59, 215, 62, 46, 91, 52, 63, 220, 32, 34, 191, 210, 7, 115, 190, 73, 29, 100, 190, 150, 126, 124, 63, 152, 154, 163, 61, 73, 76, 247, 62, 212, 169, 147, 191, 217, 112, 87, 190, 70, 254, 48, 191, 249, 149, 173, 190, 219, 179, 182, 190, 42, 52, 183, 62, 50, 156, 7, 190, 109, 251, 255, 190, 182, 206, 38, 58, 82, 86, 225, 61, 155, 113, 200, 190, 199, 45, 76, 63, 211, 220, 149, 63, 19, 194, 164, 62, 225, 73, 176, 190, 12, 236, 168, 191, 132, 209, 199, 190, 128, 5, 130, 62, 37, 212, 130, 63, 0, 190, 212, 62, 45, 118, 149, 62, 142, 129, 67, 191, 250, 255, 214, 190, 113, 66, 187, 190, 216, 8, 16, 190, 30, 33, 25, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {187, 104, 50, 191, 98, 235, 225, 189, 122, 76, 206, 189, 243, 119, 120, 189, 185, 214, 162, 61, 9, 38, 213, 189, 207, 165, 81, 60, 179, 137, 85, 190, 62, 214, 53, 63, 113, 246, 96, 191, 232, 228, 172, 62, 216, 248, 93, 62, 109, 30, 78, 62, 1, 238, 33, 190, 33, 188, 41, 191, 158, 200, 125, 190, 129, 220, 71, 191, 78, 155, 49, 63, 218, 152, 187, 62, 12, 201, 29, 63, 127, 74, 37, 62, 39, 37, 14, 191, 133, 120, 17, 63, 240, 208, 62, 63, 173, 29, 47, 191, 42, 226, 17, 62, 105, 226, 17, 61, 206, 229, 180, 188, 21, 219, 67, 62, 202, 100, 77, 62, 15, 175, 196, 189, 158, 146, 77, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {246, 238, 142, 190, 73, 140, 97, 190, 95, 59, 167, 190, 22, 67, 227, 61, 20, 124, 129, 190, 146, 253, 193, 190, 165, 1, 203, 190, 190, 244, 231, 62, 233, 109, 147, 190, 237, 38, 196, 60, 209, 4, 140, 190, 195, 3, 85, 190, 148, 143, 173, 60, 29, 122, 251, 61, 3, 94, 185, 60, 252, 17, 219, 189, 196, 50, 76, 190, 190, 44, 9, 190, 126, 98, 14, 190, 241, 205, 13, 62, 165, 6, 30, 190, 194, 139, 37, 191, 210, 17, 255, 189, 139, 176, 103, 61, 159, 37, 255, 61, 181, 19, 66, 189, 14, 97, 91, 60, 209, 232, 149, 62, 142, 141, 115, 61, 7, 61, 10, 190, 164, 138, 112, 189, 98, 36, 215, 62, 138, 210, 80, 62, 82, 22, 179, 62, 17, 221, 175, 62, 29, 85, 164, 190, 216, 61, 176, 60, 242, 23, 109, 62, 129, 125, 156, 62, 56, 111, 131, 190, 222, 229, 46, 62, 237, 129, 242, 190, 189, 73, 51, 62, 97, 208, 77, 61, 35, 216, 26, 62, 85, 48, 7, 62, 45, 212, 5, 191, 236, 1, 93, 62, 190, 201, 91, 189, 227, 129, 196, 188, 214, 105, 208, 62, 83, 126, 239, 60, 80, 186, 193, 190, 101, 209, 135, 190, 23, 204, 193, 61, 180, 43, 55, 62, 36, 185, 5, 191, 232, 147, 156, 62, 95, 118, 134, 60, 113, 179, 165, 190, 70, 139, 235, 190, 30, 22, 8, 62, 128, 20, 147, 62, 87, 164, 25, 190, 68, 17, 244, 60, 140, 230, 74, 62, 17, 76, 13, 191, 213, 205, 71, 190, 62, 167, 151, 189, 97, 131, 212, 61, 84, 211, 74, 62, 197, 228, 224, 190, 46, 235, 135, 60, 166, 70, 3, 62, 229, 207, 112, 62, 66, 187, 27, 61, 44, 169, 136, 62, 188, 183, 130, 190, 117, 129, 192, 190, 251, 75, 157, 60, 241, 247, 185, 190, 37, 48, 205, 188, 158, 93, 214, 61, 27, 249, 173, 189, 171, 164, 107, 61, 78, 150, 192, 190, 23, 9, 170, 189, 93, 246, 122, 62, 161, 68, 179, 189, 137, 53, 6, 62, 246, 217, 44, 62, 213, 124, 113, 189, 146, 202, 50, 191, 139, 237, 150, 61, 7, 69, 13, 190, 41, 43, 111, 190, 70, 150, 222, 61, 78, 55, 149, 189, 220, 86, 43, 62, 33, 53, 35, 190, 10, 128, 151, 62, 41, 22, 125, 62, 243, 188, 214, 62, 221, 63, 137, 191, 105, 239, 119, 61, 87, 62, 245, 190, 139, 197, 84, 62, 12, 135, 93, 62, 34, 82, 159, 62, 180, 216, 208, 189, 32, 124, 34, 190, 188, 220, 9, 62, 35, 70, 13, 62, 94, 78, 142, 190, 147, 165, 96, 62, 252, 145, 22, 61, 238, 240, 136, 189, 209, 65, 128, 61, 200, 123, 62, 190, 155, 238, 6, 61, 141, 4, 205, 190, 157, 1, 145, 188, 231, 163, 150, 61, 101, 210, 39, 191, 45, 161, 86, 190, 211, 19, 105, 190, 16, 36, 192, 61, 42, 140, 45, 61, 7, 27, 185, 61, 48, 250, 64, 62, 149, 115, 18, 62, 190, 186, 21, 188, 176, 167, 23, 62, 78, 139, 105, 62, 235, 119, 159, 62, 71, 22, 32, 190, 7, 46, 132, 60, 1, 108, 135, 188, 43, 222, 143, 62, 20, 14, 36, 62, 97, 57, 219, 188, 241, 242, 24, 190, 12, 88, 144, 190, 194, 27, 79, 62, 255, 157, 179, 189, 63, 190, 234, 188, 118, 157, 162, 189, 101, 167, 178, 189, 91, 35, 207, 187, 225, 62, 134, 190, 95, 186, 135, 62, 59, 249, 24, 62, 145, 172, 131, 190, 83, 31, 41, 62, 61, 11, 185, 60, 203, 120, 84, 61, 104, 217, 195, 190, 48, 241, 22, 61, 252, 92, 89, 62, 131, 175, 78, 190, 44, 215, 196, 190, 144, 255, 214, 188, 183, 34, 24, 190, 49, 122, 243, 61, 235, 75, 149, 190, 37, 94, 228, 190, 20, 220, 60, 190, 53, 74, 197, 61, 226, 184, 145, 189, 145, 22, 77, 189, 34, 190, 164, 61, 242, 78, 56, 190, 247, 193, 60, 189, 94, 133, 29, 189, 232, 2, 147, 62, 19, 194, 39, 190, 152, 17, 20, 191, 34, 79, 38, 62, 206, 255, 22, 61, 105, 48, 106, 62, 171, 70, 19, 62, 119, 213, 35, 191, 112, 189, 162, 187, 23, 229, 209, 62, 36, 236, 251, 189, 235, 17, 219, 189, 89, 221, 123, 190, 69, 227, 176, 62, 235, 254, 48, 62, 185, 219, 5, 190, 160, 114, 103, 190, 77, 79, 150, 62, 160, 216, 30, 62, 129, 129, 239, 190, 137, 150, 119, 191, 209, 37, 163, 60, 53, 109, 175, 189, 206, 156, 203, 62, 161, 34, 15, 191, 85, 96, 185, 62, 169, 241, 135, 191, 34, 245, 185, 62, 235, 32, 237, 190, 48, 131, 253, 61, 190, 60, 5, 188, 15, 243, 60, 61, 185, 25, 29, 62, 98, 10, 62, 62, 185, 99, 240, 59, 239, 120, 57, 191, 75, 67, 106, 190, 142, 8, 133, 62, 69, 103, 75, 62, 243, 37, 23, 190, 235, 154, 6, 190, 172, 233, 12, 62, 206, 64, 14, 62, 203, 224, 255, 190, 231, 180, 78, 191, 254, 70, 87, 62, 178, 35, 108, 191, 29, 125, 231, 61, 195, 178, 251, 190, 160, 196, 183, 61, 214, 250, 169, 188, 141, 151, 200, 189, 219, 114, 188, 60, 38, 251, 104, 60, 147, 72, 17, 62, 98, 231, 220, 61, 224, 216, 19, 62, 89, 174, 147, 190, 213, 9, 72, 62, 185, 151, 108, 190, 205, 85, 155, 61, 187, 69, 28, 62, 209, 103, 95, 62, 122, 188, 141, 189, 203, 140, 104, 61, 26, 10, 72, 61, 99, 99, 58, 190, 122, 69, 102, 60, 189, 20, 145, 62, 200, 30, 195, 189, 205, 210, 51, 190, 159, 139, 110, 190, 100, 238, 77, 190, 230, 247, 253, 61, 133, 21, 247, 189, 83, 238, 67, 59, 54, 160, 179, 61, 25, 204, 161, 190, 40, 235, 106, 190, 120, 193, 254, 188, 159, 94, 155, 189, 69, 124, 158, 61, 5, 181, 185, 60, 75, 80, 5, 190, 48, 168, 183, 190, 115, 72, 229, 190, 145, 116, 43, 62, 157, 147, 238, 190, 214, 112, 106, 190, 76, 62, 161, 190, 125, 5, 166, 62, 242, 191, 152, 190, 128, 162, 83, 191, 29, 23, 140, 190, 24, 216, 153, 190, 137, 18, 73, 191, 245, 43, 114, 190, 6, 205, 1, 62, 158, 29, 199, 187, 166, 250, 196, 62, 182, 182, 162, 188, 41, 232, 176, 190, 220, 220, 169, 189, 78, 211, 191, 61, 161, 46, 149, 62, 6, 26, 171, 190, 73, 229, 68, 190, 130, 81, 201, 190, 228, 104, 208, 190, 195, 157, 170, 190, 217, 214, 3, 190, 24, 217, 202, 189, 237, 91, 207, 190, 90, 37, 143, 190, 193, 195, 149, 60, 251, 190, 214, 190, 133, 204, 147, 191, 168, 242, 51, 190, 71, 235, 216, 189, 37, 253, 45, 191, 127, 221, 14, 191, 108, 198, 111, 190, 185, 186, 179, 62, 255, 192, 192, 190, 79, 200, 191, 191, 45, 46, 0, 191, 143, 149, 193, 60, 185, 97, 207, 190, 123, 133, 72, 62, 247, 43, 240, 190, 232, 22, 76, 190, 1, 80, 154, 62, 149, 249, 140, 61, 153, 254, 209, 189, 127, 93, 76, 62, 23, 18, 227, 189, 32, 39, 234, 189, 184, 214, 32, 62, 74, 34, 131, 189, 252, 41, 115, 189, 147, 112, 4, 191, 226, 136, 102, 61, 143, 224, 9, 190, 184, 77, 30, 191, 167, 19, 61, 191, 234, 86, 102, 62, 114, 14, 6, 190, 154, 201, 58, 190, 119, 78, 9, 191, 24, 0, 97, 62, 113, 236, 45, 190, 186, 65, 10, 191, 100, 70, 235, 189, 67, 217, 228, 62, 159, 60, 161, 190, 47, 71, 114, 61, 111, 194, 81, 190, 149, 108, 202, 60, 33, 43, 174, 190, 215, 124, 193, 189, 74, 131, 125, 62, 255, 15, 53, 190, 139, 124, 185, 190, 92, 234, 132, 190, 19, 219, 77, 189, 173, 85, 104, 62, 135, 213, 62, 60, 83, 130, 17, 191, 28, 143, 63, 190, 30, 25, 247, 61, 26, 184, 211, 187, 2, 62, 46, 189, 198, 72, 2, 190, 174, 199, 143, 62, 109, 103, 172, 189, 212, 198, 194, 189, 14, 149, 23, 190, 181, 200, 182, 62, 111, 224, 182, 190, 215, 154, 179, 189, 200, 209, 126, 190, 180, 246, 10, 62, 226, 105, 20, 190, 214, 208, 147, 190, 213, 47, 81, 189, 226, 93, 36, 61, 33, 145, 53, 62, 114, 250, 127, 190, 114, 68, 119, 60, 19, 28, 255, 60, 147, 227, 222, 60, 162, 60, 41, 190, 83, 174, 227, 61, 1, 85, 13, 190, 243, 88, 67, 191, 83, 7, 23, 189, 211, 5, 81, 61, 58, 247, 12, 62, 64, 141, 122, 62, 209, 238, 32, 191, 7, 121, 89, 189, 82, 55, 33, 62, 247, 50, 36, 190, 53, 108, 50, 190, 164, 239, 69, 186, 65, 91, 24, 62, 51, 83, 159, 61, 255, 196, 203, 189, 36, 13, 96, 189, 39, 241, 91, 61, 50, 3, 102, 188, 223, 155, 184, 61, 83, 34, 177, 60, 236, 57, 239, 189, 130, 121, 188, 60, 179, 116, 65, 62, 23, 150, 97, 61, 245, 177, 134, 189, 216, 102, 233, 61, 101, 33, 31, 61, 15, 224, 196, 189, 177, 129, 179, 187, 74, 37, 104, 188, 201, 98, 221, 61, 65, 58, 191, 61, 10, 41, 176, 189, 147, 46, 158, 189, 210, 250, 222, 189, 133, 235, 64, 190, 227, 8, 1, 189, 182, 148, 173, 189, 212, 63, 169, 61, 8, 117, 188, 190, 144, 37, 57, 190, 239, 168, 56, 61, 218, 18, 145, 61, 126, 161, 48, 189, 52, 218, 34, 189, 167, 144, 11, 189, 253, 84, 7, 190, 241, 42, 228, 60, 238, 191, 238, 188, 215, 41, 167, 189, 57, 139, 139, 189, 241, 99, 38, 61, 249, 250, 48, 61, 195, 23, 19, 190, 222, 101, 107, 61, 112, 65, 9, 190, 182, 35, 155, 61, 242, 110, 192, 186, 112, 116, 4, 62, 31, 187, 182, 188, 119, 70, 131, 61, 52, 21, 131, 60, 218, 38, 101, 189, 51, 188, 10, 62, 230, 123, 41, 190, 14, 132, 74, 188, 162, 197, 202, 189, 166, 153, 232, 61, 57, 154, 38, 190, 128, 104, 0, 189, 30, 104, 219, 189, 2, 42, 15, 190, 132, 33, 233, 189, 60, 89, 5, 62, 115, 113, 102, 61, 11, 149, 38, 188, 228, 129, 11, 190, 213, 235, 26, 190, 118, 177, 116, 189, 73, 207, 7, 61, 23, 241, 243, 189, 227, 172, 46, 62, 63, 68, 32, 62, 37, 37, 73, 62, 171, 66, 7, 189, 153, 133, 110, 190, 218, 201, 149, 190, 2, 114, 118, 61, 219, 222, 157, 188, 241, 201, 165, 62, 176, 246, 85, 190, 5, 230, 10, 62, 20, 169, 205, 190, 181, 208, 17, 191, 193, 197, 219, 189, 47, 207, 61, 189, 142, 96, 28, 191, 140, 233, 195, 62, 197, 144, 200, 62, 223, 95, 40, 60, 201, 210, 65, 189, 205, 72, 92, 190, 178, 247, 184, 62, 48, 238, 175, 61, 71, 74, 38, 62, 21, 17, 78, 61, 20, 253, 152, 187, 52, 122, 99, 189, 198, 1, 199, 190, 126, 252, 130, 62, 167, 109, 169, 190, 0, 180, 91, 188, 119, 204, 57, 189, 61, 175, 248, 190, 73, 200, 113, 190, 162, 204, 225, 190, 194, 40, 202, 61, 69, 146, 112, 189, 172, 215, 173, 190, 255, 76, 83, 61, 182, 166, 19, 62, 170, 99, 253, 189, 186, 119, 13, 189, 136, 121, 184, 189, 152, 70, 87, 189, 218, 141, 12, 62, 115, 90, 89, 188, 62, 226, 142, 61, 85, 223, 221, 190, 217, 49, 38, 191, 138, 75, 61, 189, 105, 139, 254, 61, 61, 31, 71, 62, 82, 44, 79, 62, 85, 23, 21, 191, 44, 53, 32, 62, 80, 254, 203, 62, 115, 30, 1, 189, 168, 24, 19, 190, 114, 37, 251, 188, 50, 223, 48, 62, 71, 110, 158, 62, 198, 204, 190, 189, 215, 5, 21, 190, 38, 228, 70, 62, 83, 215, 3, 60, 180, 87, 1, 190, 79, 182, 56, 190, 56, 25, 14, 191, 75, 199, 231, 61, 232, 11, 249, 190, 42, 21, 18, 190, 110, 4, 185, 61, 8, 233, 183, 60, 172, 70, 192, 189, 156, 22, 238, 190, 6, 66, 177, 190, 205, 8, 6, 190, 217, 73, 58, 61, 130, 23, 19, 191, 59, 195, 84, 62, 18, 118, 252, 61, 189, 220, 239, 60, 224, 9, 132, 62, 76, 56, 136, 61, 91, 248, 132, 189, 76, 172, 29, 60, 254, 2, 71, 62, 192, 90, 52, 191, 175, 67, 27, 62, 68, 92, 124, 189, 103, 94, 245, 190, 40, 89, 2, 189, 175, 85, 242, 191, 98, 44, 51, 62, 35, 90, 8, 62, 172, 76, 236, 190, 172, 54, 52, 189, 205, 132, 44, 62, 158, 198, 51, 189, 128, 144, 32, 190, 227, 209, 234, 60, 84, 102, 3, 190, 158, 51, 53, 58, 52, 81, 106, 189, 4, 158, 53, 61, 73, 71, 149, 189, 137, 182, 46, 60, 39, 237, 226, 188, 39, 12, 116, 61, 120, 23, 5, 62, 24, 243, 36, 190, 149, 203, 56, 190, 142, 78, 157, 189, 138, 9, 250, 189, 141, 50, 155, 61, 140, 75, 6, 190, 152, 9, 101, 187, 198, 246, 233, 56, 209, 102, 204, 61, 8, 190, 69, 189, 141, 184, 117, 61, 27, 78, 153, 189, 96, 221, 37, 190, 124, 222, 148, 58, 216, 157, 27, 61, 155, 186, 70, 60, 127, 158, 12, 61, 134, 45, 96, 186, 164, 202, 49, 191, 47, 101, 153, 190, 21, 88, 221, 190, 111, 250, 166, 62, 166, 42, 224, 190, 14, 107, 135, 190, 105, 168, 11, 190, 1, 102, 135, 62, 221, 241, 246, 60, 0, 4, 73, 61, 172, 250, 63, 190, 115, 95, 203, 60, 157, 202, 10, 190, 221, 207, 0, 189, 187, 175, 4, 61, 121, 107, 10, 191, 132, 250, 71, 191, 96, 53, 26, 190, 74, 58, 170, 189, 56, 13, 62, 62, 24, 119, 180, 62, 225, 97, 3, 191, 76, 236, 163, 61, 99, 9, 200, 62, 40, 42, 89, 190, 170, 2, 87, 190, 237, 97, 102, 190, 206, 216, 130, 62, 225, 135, 140, 62, 150, 196, 122, 61, 196, 66, 63, 190, 90, 218, 202, 62, 230, 187, 246, 190, 79, 174, 68, 190, 214, 192, 93, 190, 108, 148, 58, 62, 54, 80, 134, 190, 242, 87, 69, 189, 76, 65, 146, 190, 210, 233, 132, 62, 22, 10, 21, 190, 68, 164, 217, 58, 63, 122, 90, 190, 45, 15, 80, 189, 166, 250, 50, 190, 120, 162, 203, 189, 169, 5, 161, 61, 99, 55, 179, 190, 74, 242, 208, 190, 99, 215, 89, 62, 41, 15, 18, 187, 35, 65, 7, 60, 121, 94, 131, 62, 51, 149, 57, 191, 47, 31, 190, 61, 182, 161, 158, 62, 114, 119, 111, 190, 13, 64, 237, 57, 252, 135, 170, 61, 172, 134, 138, 187, 168, 194, 159, 62, 72, 138, 161, 189, 41, 57, 125, 190, 59, 40, 99, 62, 185, 194, 19, 190, 251, 72, 65, 62, 173, 23, 91, 190, 212, 194, 44, 189, 75, 15, 254, 189, 147, 0, 88, 62, 235, 255, 253, 61, 88, 105, 5, 191, 53, 221, 16, 62, 62, 213, 135, 61, 220, 91, 105, 61, 54, 1, 67, 60, 84, 167, 64, 62, 172, 197, 189, 189, 56, 51, 5, 62, 231, 30, 88, 190, 214, 71, 197, 60, 83, 104, 202, 187, 231, 34, 34, 190, 127, 112, 28, 62, 74, 59, 121, 62, 69, 67, 32, 190, 142, 67, 20, 190, 19, 124, 212, 62, 5, 213, 55, 189, 37, 170, 89, 62, 237, 95, 159, 61, 239, 96, 40, 190, 94, 167, 21, 62, 120, 240, 6, 190, 86, 11, 244, 61, 226, 125, 138, 189, 243, 241, 57, 189, 213, 255, 24, 190, 60, 47, 253, 62, 59, 233, 5, 191, 195, 230, 125, 61, 64, 120, 226, 61, 97, 182, 215, 62, 168, 93, 46, 191, 96, 157, 10, 62, 122, 213, 190, 190, 236, 133, 179, 62, 65, 27, 19, 190, 95, 198, 45, 61, 64, 165, 167, 61, 52, 27, 16, 190, 123, 216, 59, 62, 30, 44, 190, 189, 130, 131, 107, 61, 10, 15, 244, 60, 147, 183, 202, 190, 207, 23, 117, 189, 127, 13, 12, 62, 226, 119, 90, 61, 159, 8, 47, 190, 149, 144, 14, 63, 126, 16, 176, 190, 172, 26, 14, 62, 111, 126, 237, 190, 210, 76, 193, 191, 183, 57, 92, 62, 32, 83, 124, 62, 175, 249, 218, 190, 142, 8, 210, 62, 90, 48, 160, 62, 93, 230, 194, 62, 53, 156, 106, 190, 3, 2, 160, 62, 222, 141, 90, 62, 171, 63, 170, 62, 104, 165, 196, 190, 120, 41, 177, 61, 242, 35, 18, 191, 4, 138, 56, 62, 12, 29, 99, 187, 4, 238, 250, 61, 22, 29, 100, 189, 234, 143, 183, 190, 173, 4, 142, 62, 47, 160, 163, 61, 215, 98, 234, 189, 229, 203, 69, 62, 38, 236, 65, 190, 76, 131, 238, 190, 238, 124, 167, 60, 55, 42, 171, 62, 128, 67, 14, 62, 149, 93, 0, 191, 137, 186, 118, 62, 247, 142, 92, 62, 37, 86, 214, 190, 207, 194, 2, 191, 146, 204, 148, 62, 1, 102, 53, 62, 206, 152, 60, 190, 61, 226, 106, 61, 127, 242, 12, 62, 118, 16, 69, 190, 89, 46, 32, 190, 244, 36, 76, 61, 122, 41, 190, 189, 181, 114, 188, 189, 26, 183, 24, 62, 241, 54, 229, 60, 104, 249, 131, 189, 138, 50, 189, 61, 238, 45, 57, 61, 123, 206, 93, 61, 204, 21, 253, 61, 159, 155, 150, 190, 48, 184, 232, 61, 121, 221, 175, 189, 104, 94, 26, 61, 45, 70, 238, 189, 250, 62, 21, 62, 139, 253, 48, 61, 248, 248, 21, 61, 3, 94, 138, 61, 133, 150, 35, 62, 181, 187, 51, 62, 92, 156, 168, 61, 224, 156, 96, 62, 46, 232, 47, 62, 156, 92, 6, 190, 226, 80, 148, 61, 239, 65, 246, 188, 26, 187, 41, 190, 224, 29, 203, 190, 52, 24, 120, 189, 96, 193, 233, 190, 235, 249, 148, 61, 142, 41, 113, 191, 174, 23, 160, 190, 125, 208, 29, 190, 13, 173, 26, 190, 154, 174, 52, 62, 150, 223, 87, 190, 38, 197, 150, 61, 59, 18, 91, 61, 217, 111, 212, 189, 199, 36, 141, 190, 54, 71, 35, 62, 33, 204, 101, 191, 57, 30, 36, 191, 202, 105, 241, 61, 29, 175, 21, 190, 107, 246, 136, 62, 63, 74, 29, 190, 97, 245, 23, 191, 78, 48, 80, 62, 58, 251, 67, 62, 173, 86, 97, 188, 74, 221, 235, 189, 170, 255, 35, 190, 146, 220, 187, 61, 80, 20, 11, 190, 130, 0, 180, 190, 120, 99, 26, 190, 40, 212, 142, 62, 73, 143, 241, 190, 162, 208, 64, 61, 141, 253, 53, 191, 115, 119, 189, 189, 249, 146, 24, 62, 212, 219, 233, 61, 26, 103, 173, 61, 27, 3, 170, 189, 61, 43, 112, 191, 228, 247, 160, 62, 182, 239, 159, 61, 249, 236, 58, 62, 92, 212, 103, 62, 216, 16, 121, 189, 252, 133, 123, 188, 173, 99, 156, 189, 72, 111, 185, 191, 53, 26, 32, 191, 161, 91, 170, 61, 183, 253, 165, 62, 160, 96, 146, 60, 144, 210, 165, 190, 133, 234, 203, 61, 8, 55, 172, 62, 241, 180, 53, 62, 143, 183, 129, 62, 188, 145, 120, 62, 38, 88, 164, 61, 230, 118, 66, 191, 130, 76, 84, 62, 27, 118, 45, 190, 57, 101, 58, 190, 33, 112, 156, 62, 161, 178, 39, 62, 27, 102, 158, 62, 110, 5, 119, 188, 219, 61, 182, 62, 89, 87, 179, 188, 133, 145, 232, 61, 224, 251, 63, 61, 80, 152, 75, 61, 210, 18, 204, 61, 30, 17, 173, 189, 50, 82, 115, 190, 74, 27, 28, 62, 48, 148, 121, 189, 79, 60, 24, 61, 132, 43, 68, 62, 18, 137, 113, 62, 58, 211, 75, 61, 123, 92, 100, 61, 195, 24, 147, 190, 73, 236, 59, 62, 4, 21, 214, 62, 174, 28, 13, 190, 151, 107, 168, 189, 187, 217, 228, 61, 212, 248, 173, 61, 82, 87, 87, 188, 2, 99, 45, 190, 44, 186, 133, 62, 234, 250, 97, 190, 198, 105, 136, 62, 40, 96, 66, 61, 35, 164, 24, 191, 179, 102, 115, 190, 93, 16, 148, 190, 52, 65, 0, 61, 200, 43, 200, 190, 38, 176, 217, 189, 92, 239, 84, 190, 25, 162, 85, 61, 38, 43, 16, 189, 86, 198, 37, 189, 252, 249, 19, 190, 148, 181, 130, 61, 36, 13, 132, 189, 135, 129, 150, 190, 33, 232, 20, 62, 61, 92, 172, 190, 167, 37, 131, 191, 20, 206, 92, 62, 120, 34, 201, 189, 50, 246, 104, 62, 89, 169, 158, 62, 214, 160, 61, 191, 155, 232, 71, 62, 193, 24, 205, 62, 94, 246, 169, 186, 95, 77, 23, 189, 125, 164, 17, 190, 18, 118, 137, 62, 251, 166, 139, 62, 242, 113, 41, 189, 176, 45, 138, 189, 81, 72, 104, 61, 140, 196, 190, 61, 174, 75, 107, 61, 208, 172, 226, 190, 12, 14, 150, 190, 45, 124, 10, 191, 61, 242, 54, 191, 245, 5, 28, 62, 163, 124, 204, 190, 144, 212, 177, 61, 52, 8, 79, 190, 91, 145, 18, 190, 165, 57, 212, 62, 214, 3, 40, 191, 155, 38, 203, 188, 51, 181, 11, 191, 140, 198, 207, 189, 148, 174, 195, 189, 20, 168, 162, 61, 226, 136, 13, 190, 22, 173, 92, 62, 251, 160, 139, 190, 221, 129, 151, 61, 143, 75, 6, 62, 213, 41, 45, 190, 138, 19, 36, 191, 0, 138, 92, 62, 19, 44, 191, 62, 94, 89, 164, 190, 240, 246, 105, 191, 236, 167, 68, 62, 139, 69, 90, 61, 189, 107, 102, 190, 52, 92, 188, 189, 219, 99, 13, 61, 26, 82, 62, 61, 146, 204, 223, 190, 104, 121, 201, 61, 9, 94, 169, 61, 238, 146, 184, 190, 250, 48, 30, 190, 132, 32, 21, 62, 233, 63, 85, 190, 41, 118, 168, 190, 152, 219, 154, 190, 201, 52, 163, 190, 132, 105, 129, 62, 43, 203, 94, 189, 107, 23, 104, 62, 74, 160, 149, 61, 175, 80, 232, 60, 60, 150, 143, 62, 192, 85, 54, 190, 49, 189, 213, 190, 102, 65, 8, 62, 134, 185, 131, 62, 24, 242, 241, 191, 189, 63, 177, 62, 206, 210, 177, 189, 35, 177, 239, 62, 219, 106, 82, 190, 190, 211, 0, 192, 255, 240, 158, 61, 6, 122, 125, 188, 81, 181, 226, 188, 210, 211, 215, 189, 11, 223, 205, 60, 155, 180, 161, 62, 34, 67, 170, 189, 65, 107, 230, 60, 117, 227, 220, 61, 41, 86, 128, 62, 50, 113, 169, 190, 58, 160, 6, 190, 120, 83, 190, 61, 142, 206, 41, 62, 23, 225, 83, 190, 27, 71, 45, 189, 209, 195, 119, 189, 41, 10, 230, 189, 169, 232, 234, 188, 44, 189, 76, 62, 71, 139, 193, 188, 110, 39, 144, 189, 127, 241, 43, 189, 0, 146, 63, 62, 236, 225, 149, 62, 123, 175, 92, 190, 20, 234, 30, 61, 137, 31, 134, 190, 141, 233, 158, 189, 64, 224, 5, 190, 106, 71, 166, 190, 167, 238, 12, 190, 239, 199, 138, 190, 219, 117, 124, 60, 245, 34, 154, 189, 26, 110, 163, 60, 206, 151, 32, 62, 247, 159, 220, 189, 134, 220, 107, 190, 97, 214, 239, 61, 189, 168, 147, 62, 17, 235, 94, 62, 49, 126, 170, 190, 19, 62, 43, 62, 149, 114, 125, 190, 73, 106, 68, 62, 123, 132, 113, 59, 179, 49, 39, 62, 30, 205, 118, 189, 34, 14, 153, 61, 17, 219, 28, 62, 67, 85, 119, 190, 182, 91, 126, 189, 187, 89, 151, 61, 104, 249, 226, 61, 127, 63, 174, 189, 97, 35, 184, 189, 69, 88, 218, 189, 254, 147, 58, 62, 100, 175, 162, 190, 233, 190, 243, 60, 83, 250, 118, 189, 121, 12, 129, 190, 5, 184, 25, 190, 214, 189, 56, 190, 117, 97, 195, 61, 229, 224, 118, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {164, 149, 126, 189, 132, 11, 18, 62, 242, 154, 182, 61, 59, 205, 71, 62, 79, 135, 20, 60, 4, 131, 158, 61, 119, 218, 165, 190, 198, 88, 131, 62, 33, 32, 250, 61, 102, 119, 0, 190, 17, 180, 168, 189, 169, 198, 161, 62, 117, 66, 155, 190, 144, 118, 17, 62, 123, 116, 43, 188, 178, 123, 27, 62, 226, 167, 20, 62, 119, 222, 149, 189, 137, 82, 150, 62, 190, 101, 10, 62, 41, 136, 88, 189, 237, 233, 108, 62, 142, 235, 18, 61, 47, 27, 3, 62, 144, 140, 235, 61, 13, 11, 250, 187, 206, 163, 6, 190, 85, 10, 164, 62, 76, 158, 151, 189, 30, 121, 159, 61, 65, 222, 100, 190, 48, 124, 82, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 183, 249, 190, 113, 220, 58, 63, 238, 180, 66, 61, 78, 67, 245, 62, 34, 212, 74, 62, 98, 24, 84, 190, 151, 220, 88, 191, 189, 254, 111, 60, 174, 84, 101, 191, 95, 243, 163, 191, 44, 184, 178, 190, 91, 42, 85, 190, 87, 46, 225, 189, 113, 38, 248, 189, 112, 84, 2, 191, 222, 223, 85, 190, 232, 84, 155, 62, 194, 88, 220, 187, 80, 158, 6, 191, 173, 42, 102, 190, 158, 59, 42, 62, 149, 228, 102, 63, 173, 20, 250, 62, 148, 35, 8, 190, 112, 20, 6, 191, 249, 53, 214, 190, 228, 205, 67, 190, 237, 40, 191, 190, 38, 26, 98, 191, 155, 251, 167, 63, 20, 50, 95, 61, 162, 198, 0, 62, 199, 68, 173, 62, 156, 228, 2, 190, 140, 225, 242, 190, 245, 207, 67, 62, 113, 238, 127, 190, 22, 201, 16, 61, 95, 198, 183, 62, 165, 95, 193, 189, 128, 28, 80, 60, 223, 188, 228, 61, 109, 153, 89, 62, 18, 251, 141, 60, 237, 175, 36, 62, 56, 108, 194, 188, 57, 100, 154, 189, 25, 126, 20, 189, 36, 219, 28, 190, 172, 101, 222, 61, 24, 117, 248, 61, 29, 206, 146, 62, 108, 153, 109, 190, 32, 241, 129, 188, 0, 130, 42, 62, 93, 63, 76, 190, 52, 248, 39, 190, 88, 197, 3, 191, 140, 91, 58, 62, 50, 239, 239, 189, 166, 198, 22, 62, 193, 196, 128, 62, 67, 191, 93, 62, 212, 223, 123, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 217, 54, 62, 187, 217, 247, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {67, 176, 212, 190, 255, 0, 167, 189, 184, 150, 61, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {132, 119, 50, 189, 202, 145, 92, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0067/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}