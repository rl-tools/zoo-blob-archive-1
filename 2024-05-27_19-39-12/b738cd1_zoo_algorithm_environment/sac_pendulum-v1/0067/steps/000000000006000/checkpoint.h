// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {241, 56, 48, 63, 146, 183, 228, 190, 167, 146, 162, 190, 127, 36, 240, 62, 227, 76, 64, 191, 154, 1, 236, 190, 152, 217, 192, 62, 163, 222, 127, 191, 222, 132, 135, 190, 197, 194, 60, 189, 31, 168, 111, 191, 202, 212, 45, 191, 254, 249, 83, 188, 235, 45, 210, 190, 101, 113, 214, 62, 130, 233, 2, 63, 239, 205, 135, 191, 72, 156, 105, 61, 136, 44, 195, 62, 11, 132, 58, 191, 97, 193, 18, 190, 5, 69, 32, 63, 198, 86, 154, 63, 57, 104, 180, 62, 210, 211, 16, 191, 77, 120, 254, 190, 252, 3, 177, 189, 82, 113, 146, 62, 108, 237, 13, 190, 159, 222, 222, 62, 222, 13, 9, 63, 45, 231, 95, 191, 28, 218, 130, 190, 239, 66, 252, 61, 213, 75, 111, 63, 124, 96, 131, 190, 112, 102, 69, 62, 178, 175, 238, 190, 208, 130, 59, 62, 147, 120, 134, 189, 185, 30, 37, 190, 142, 161, 152, 190, 162, 148, 213, 190, 93, 96, 185, 190, 150, 185, 45, 191, 41, 150, 153, 190, 144, 133, 13, 62, 235, 83, 57, 63, 125, 244, 22, 63, 47, 244, 41, 191, 165, 198, 132, 190, 212, 239, 95, 191, 178, 10, 40, 191, 206, 113, 198, 188, 248, 59, 244, 190, 197, 111, 168, 190, 225, 22, 149, 62, 203, 68, 58, 62, 98, 36, 222, 62, 250, 92, 140, 190, 194, 94, 128, 189, 56, 160, 93, 191, 62, 213, 212, 62, 88, 226, 36, 63, 106, 9, 60, 191, 137, 216, 121, 190, 160, 37, 30, 190, 131, 244, 44, 63, 67, 209, 152, 61, 233, 130, 27, 63, 94, 137, 128, 191, 30, 200, 39, 190, 159, 6, 153, 190, 111, 231, 20, 190, 183, 131, 139, 190, 140, 182, 178, 62, 92, 202, 225, 189, 104, 86, 7, 191, 105, 0, 139, 189, 251, 45, 240, 62, 107, 52, 184, 190, 9, 219, 69, 63, 79, 34, 133, 63, 28, 183, 207, 62, 151, 0, 226, 188, 174, 126, 145, 191, 245, 115, 166, 190, 2, 176, 182, 61, 5, 214, 108, 63, 67, 199, 207, 62, 6, 109, 145, 62, 63, 33, 41, 191, 27, 39, 235, 190, 19, 204, 94, 190, 91, 145, 222, 189, 85, 155, 37, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 87, 44, 191, 142, 122, 217, 189, 170, 60, 78, 190, 110, 246, 165, 189, 161, 173, 136, 61, 24, 84, 26, 190, 184, 190, 32, 189, 21, 102, 66, 190, 151, 185, 36, 63, 132, 109, 59, 191, 80, 149, 25, 62, 75, 252, 178, 62, 235, 251, 89, 62, 237, 37, 59, 190, 16, 192, 17, 191, 75, 157, 62, 189, 153, 43, 49, 191, 132, 219, 244, 62, 28, 188, 217, 62, 223, 200, 25, 63, 236, 47, 21, 62, 249, 56, 6, 191, 25, 133, 43, 63, 208, 243, 51, 63, 224, 27, 32, 191, 185, 195, 16, 62, 198, 211, 26, 62, 160, 175, 219, 60, 232, 109, 37, 188, 18, 70, 200, 62, 77, 28, 245, 189, 72, 205, 67, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {112, 35, 106, 190, 22, 154, 101, 190, 187, 235, 134, 190, 11, 106, 224, 61, 123, 229, 109, 190, 223, 46, 235, 190, 200, 221, 158, 190, 45, 254, 214, 62, 138, 18, 82, 190, 191, 97, 37, 62, 9, 60, 76, 190, 108, 151, 81, 190, 138, 25, 15, 61, 91, 19, 193, 61, 54, 128, 10, 60, 147, 12, 191, 189, 209, 5, 33, 189, 31, 73, 179, 61, 22, 249, 184, 189, 78, 201, 46, 62, 125, 5, 51, 189, 191, 15, 226, 190, 145, 66, 183, 189, 56, 98, 11, 62, 7, 99, 189, 61, 120, 228, 15, 189, 202, 13, 92, 60, 237, 163, 132, 62, 63, 47, 185, 61, 44, 171, 10, 190, 188, 228, 141, 189, 162, 51, 215, 62, 182, 189, 247, 61, 131, 237, 169, 62, 82, 208, 165, 62, 9, 54, 171, 190, 53, 250, 93, 61, 252, 99, 149, 62, 255, 71, 146, 62, 180, 255, 129, 190, 245, 13, 65, 62, 63, 254, 143, 190, 4, 191, 13, 62, 90, 4, 133, 60, 50, 214, 81, 62, 133, 79, 63, 62, 8, 254, 241, 190, 81, 34, 76, 62, 65, 118, 27, 190, 39, 107, 86, 60, 181, 75, 200, 62, 170, 233, 254, 60, 210, 50, 162, 190, 141, 214, 165, 190, 131, 199, 231, 187, 216, 85, 56, 62, 241, 168, 100, 190, 230, 171, 148, 62, 155, 173, 81, 61, 186, 167, 164, 190, 246, 173, 183, 190, 1, 25, 226, 61, 23, 175, 144, 62, 91, 94, 19, 190, 28, 237, 195, 189, 170, 41, 69, 62, 255, 20, 153, 190, 163, 3, 17, 190, 142, 60, 246, 189, 143, 148, 22, 62, 101, 21, 158, 62, 233, 118, 152, 190, 87, 217, 233, 187, 141, 47, 171, 61, 175, 41, 156, 62, 43, 86, 151, 61, 234, 176, 137, 62, 21, 12, 102, 190, 205, 204, 167, 190, 247, 228, 241, 187, 237, 104, 133, 190, 174, 211, 175, 189, 43, 229, 82, 61, 171, 240, 205, 189, 112, 188, 163, 60, 220, 221, 200, 190, 250, 148, 132, 189, 203, 194, 144, 62, 161, 68, 179, 189, 202, 162, 236, 61, 28, 134, 207, 60, 121, 247, 207, 188, 248, 217, 131, 190, 108, 34, 227, 61, 185, 139, 247, 189, 160, 38, 177, 190, 24, 140, 59, 60, 73, 135, 58, 189, 44, 246, 219, 61, 26, 83, 214, 189, 237, 231, 168, 62, 135, 127, 46, 62, 29, 233, 147, 62, 126, 244, 21, 191, 205, 71, 186, 61, 251, 93, 161, 190, 198, 67, 195, 61, 195, 174, 114, 62, 151, 238, 137, 62, 7, 232, 44, 61, 65, 251, 245, 188, 5, 27, 112, 62, 77, 113, 166, 188, 251, 185, 90, 190, 142, 75, 137, 62, 148, 87, 99, 61, 89, 4, 160, 189, 190, 8, 218, 189, 32, 119, 52, 190, 241, 237, 11, 189, 194, 90, 18, 190, 55, 170, 151, 60, 138, 48, 2, 62, 204, 11, 223, 190, 212, 233, 181, 189, 244, 209, 87, 189, 100, 14, 23, 62, 101, 130, 208, 61, 115, 65, 141, 61, 248, 231, 21, 62, 206, 112, 10, 62, 90, 134, 135, 188, 254, 153, 19, 62, 38, 231, 87, 62, 246, 78, 151, 62, 154, 217, 69, 190, 222, 127, 142, 61, 186, 75, 254, 60, 134, 160, 131, 62, 77, 72, 189, 61, 83, 234, 145, 188, 53, 135, 226, 189, 40, 126, 85, 190, 80, 174, 48, 62, 137, 83, 218, 189, 135, 170, 114, 61, 27, 241, 135, 189, 252, 203, 232, 189, 177, 158, 13, 186, 160, 203, 165, 190, 117, 190, 46, 62, 5, 206, 18, 62, 98, 207, 178, 61, 166, 12, 231, 61, 178, 2, 169, 187, 97, 168, 200, 59, 85, 73, 132, 190, 114, 165, 62, 58, 233, 206, 57, 62, 33, 215, 88, 190, 239, 159, 150, 190, 252, 70, 3, 189, 141, 206, 35, 190, 135, 103, 210, 61, 0, 251, 144, 190, 221, 193, 234, 190, 187, 140, 77, 190, 138, 102, 184, 61, 197, 8, 100, 190, 212, 146, 32, 190, 14, 227, 182, 61, 30, 28, 14, 190, 17, 18, 165, 189, 69, 25, 192, 189, 49, 37, 120, 62, 231, 22, 170, 189, 79, 228, 140, 190, 54, 186, 212, 60, 98, 149, 128, 60, 48, 0, 114, 62, 87, 235, 195, 61, 78, 8, 14, 191, 13, 33, 19, 60, 57, 231, 206, 62, 196, 192, 53, 190, 120, 46, 215, 189, 231, 36, 135, 190, 118, 130, 175, 62, 174, 142, 200, 61, 59, 131, 197, 189, 148, 26, 123, 190, 243, 180, 126, 62, 160, 216, 30, 62, 61, 203, 100, 190, 201, 238, 116, 190, 209, 37, 163, 60, 117, 152, 212, 189, 246, 147, 214, 62, 83, 98, 56, 190, 91, 200, 51, 62, 251, 71, 19, 191, 92, 52, 141, 62, 247, 53, 29, 190, 221, 56, 112, 60, 36, 217, 102, 187, 15, 243, 60, 61, 185, 25, 29, 62, 45, 128, 24, 62, 185, 99, 240, 59, 123, 106, 9, 191, 234, 126, 77, 190, 169, 150, 172, 188, 54, 67, 103, 62, 105, 141, 43, 189, 52, 248, 11, 190, 2, 189, 126, 62, 206, 64, 14, 62, 121, 171, 41, 190, 147, 105, 38, 190, 69, 112, 164, 61, 79, 81, 213, 189, 82, 59, 80, 61, 206, 214, 21, 190, 107, 104, 199, 61, 107, 60, 136, 188, 5, 240, 176, 189, 245, 97, 255, 60, 226, 133, 145, 60, 128, 192, 20, 62, 239, 154, 0, 62, 47, 103, 28, 62, 55, 166, 44, 190, 218, 208, 92, 62, 52, 29, 73, 190, 119, 50, 157, 61, 235, 79, 103, 62, 47, 34, 121, 62, 80, 169, 50, 189, 129, 206, 198, 61, 146, 64, 76, 61, 36, 209, 93, 190, 100, 247, 174, 60, 6, 217, 149, 62, 103, 171, 38, 189, 213, 106, 58, 190, 7, 84, 146, 190, 149, 72, 12, 190, 92, 177, 22, 62, 128, 45, 211, 188, 58, 27, 224, 60, 53, 129, 250, 61, 60, 127, 129, 190, 72, 187, 45, 190, 219, 131, 80, 61, 152, 223, 122, 189, 50, 125, 171, 61, 5, 181, 185, 60, 109, 41, 163, 189, 173, 12, 133, 190, 226, 113, 24, 61, 160, 69, 111, 62, 67, 84, 98, 190, 220, 87, 57, 190, 81, 60, 230, 190, 168, 184, 182, 62, 89, 159, 247, 189, 245, 210, 139, 190, 20, 214, 185, 190, 112, 210, 31, 190, 53, 47, 136, 190, 120, 52, 128, 189, 182, 0, 219, 61, 158, 29, 199, 187, 211, 102, 213, 62, 115, 191, 156, 187, 206, 72, 187, 190, 8, 64, 39, 61, 71, 100, 179, 61, 173, 226, 193, 61, 185, 106, 146, 189, 94, 8, 244, 61, 13, 9, 144, 190, 92, 114, 223, 190, 180, 158, 212, 190, 11, 242, 206, 61, 85, 184, 135, 190, 170, 241, 131, 190, 132, 98, 116, 190, 193, 195, 149, 60, 157, 45, 152, 190, 4, 140, 79, 191, 244, 158, 251, 61, 89, 119, 246, 189, 53, 163, 6, 191, 62, 47, 162, 190, 108, 198, 111, 190, 173, 121, 170, 62, 54, 210, 141, 190, 221, 37, 11, 191, 134, 50, 11, 191, 174, 112, 2, 62, 103, 46, 148, 190, 142, 169, 137, 61, 197, 240, 3, 191, 232, 22, 76, 190, 208, 17, 145, 62, 149, 122, 122, 61, 41, 140, 27, 190, 64, 252, 131, 62, 23, 18, 227, 189, 93, 49, 68, 190, 207, 37, 201, 62, 14, 194, 134, 190, 169, 73, 133, 190, 108, 139, 9, 191, 226, 136, 102, 61, 110, 31, 170, 61, 244, 132, 251, 190, 244, 42, 2, 191, 18, 142, 86, 62, 136, 25, 236, 189, 130, 200, 90, 190, 9, 188, 199, 190, 136, 104, 103, 62, 125, 112, 51, 190, 223, 158, 228, 190, 15, 200, 57, 189, 118, 167, 197, 62, 198, 110, 72, 190, 222, 115, 171, 61, 82, 142, 51, 190, 56, 42, 13, 60, 201, 195, 139, 190, 214, 132, 154, 189, 42, 27, 148, 62, 92, 63, 79, 190, 242, 236, 51, 190, 68, 71, 191, 60, 25, 108, 58, 189, 250, 91, 115, 62, 0, 52, 188, 61, 237, 99, 236, 190, 156, 21, 38, 190, 58, 60, 0, 62, 210, 211, 99, 60, 40, 121, 87, 189, 202, 195, 6, 190, 91, 142, 94, 62, 140, 100, 16, 188, 167, 51, 193, 189, 156, 229, 56, 190, 44, 56, 189, 62, 215, 187, 40, 190, 76, 228, 152, 189, 164, 67, 153, 190, 119, 153, 56, 62, 31, 210, 191, 189, 254, 147, 186, 190, 213, 97, 203, 189, 19, 187, 215, 60, 26, 86, 161, 61, 230, 214, 66, 190, 186, 35, 24, 186, 205, 85, 62, 61, 101, 188, 79, 189, 137, 42, 238, 189, 124, 71, 67, 62, 74, 88, 97, 189, 76, 241, 169, 190, 22, 8, 211, 189, 210, 87, 47, 61, 215, 231, 7, 62, 36, 50, 77, 62, 81, 62, 5, 191, 69, 241, 202, 189, 240, 141, 5, 62, 245, 65, 129, 189, 101, 55, 24, 190, 234, 29, 219, 60, 71, 195, 13, 62, 171, 246, 188, 60, 136, 29, 241, 189, 137, 193, 39, 189, 225, 28, 178, 61, 119, 205, 38, 188, 128, 158, 191, 61, 153, 130, 199, 60, 59, 197, 231, 189, 130, 121, 188, 60, 179, 116, 65, 62, 165, 104, 107, 61, 245, 177, 134, 189, 95, 58, 239, 61, 101, 33, 31, 61, 56, 224, 191, 189, 177, 116, 208, 186, 74, 37, 104, 188, 204, 138, 229, 61, 36, 117, 200, 61, 10, 41, 176, 189, 82, 86, 153, 189, 239, 7, 217, 189, 133, 235, 64, 190, 252, 97, 225, 188, 182, 148, 173, 189, 62, 95, 176, 61, 239, 29, 188, 190, 71, 17, 55, 190, 170, 87, 87, 61, 117, 12, 153, 61, 66, 240, 27, 189, 52, 218, 34, 189, 232, 16, 0, 189, 253, 84, 7, 190, 113, 132, 0, 61, 183, 33, 203, 188, 215, 41, 167, 189, 57, 139, 139, 189, 241, 99, 38, 61, 249, 250, 48, 61, 195, 23, 19, 190, 222, 101, 107, 61, 112, 65, 9, 190, 182, 35, 155, 61, 242, 110, 192, 186, 112, 116, 4, 62, 31, 187, 182, 188, 119, 70, 131, 61, 52, 21, 131, 60, 218, 38, 101, 189, 51, 188, 10, 62, 230, 123, 41, 190, 14, 132, 74, 188, 162, 197, 202, 189, 166, 153, 232, 61, 57, 154, 38, 190, 128, 104, 0, 189, 30, 104, 219, 189, 2, 42, 15, 190, 132, 33, 233, 189, 60, 89, 5, 62, 115, 113, 102, 61, 11, 149, 38, 188, 228, 129, 11, 190, 213, 235, 26, 190, 118, 177, 116, 189, 73, 207, 7, 61, 23, 241, 243, 189, 135, 214, 180, 61, 75, 223, 233, 61, 29, 20, 123, 61, 38, 106, 114, 189, 245, 126, 160, 190, 202, 213, 14, 190, 144, 195, 144, 189, 243, 47, 16, 61, 52, 138, 123, 62, 224, 67, 85, 190, 23, 193, 198, 61, 217, 157, 156, 190, 69, 49, 142, 190, 11, 107, 232, 189, 96, 74, 73, 189, 161, 129, 79, 191, 81, 103, 145, 62, 61, 128, 153, 62, 76, 198, 250, 189, 41, 157, 94, 189, 253, 179, 179, 189, 164, 51, 132, 62, 247, 168, 116, 189, 77, 245, 174, 61, 233, 12, 148, 61, 182, 236, 138, 188, 17, 135, 88, 189, 93, 45, 115, 61, 92, 210, 77, 62, 183, 3, 188, 190, 199, 85, 103, 189, 22, 174, 110, 189, 88, 13, 171, 190, 58, 82, 103, 190, 173, 22, 238, 190, 102, 172, 10, 62, 232, 70, 154, 188, 191, 145, 215, 190, 103, 240, 163, 60, 109, 16, 250, 61, 163, 29, 115, 190, 0, 65, 218, 189, 218, 153, 182, 189, 148, 35, 36, 189, 57, 213, 89, 61, 7, 207, 215, 60, 232, 214, 13, 62, 117, 192, 164, 190, 131, 255, 148, 190, 6, 76, 10, 190, 19, 57, 224, 61, 5, 61, 61, 62, 21, 195, 243, 61, 234, 152, 249, 190, 226, 0, 255, 61, 238, 94, 193, 62, 136, 205, 106, 61, 216, 137, 255, 189, 192, 10, 143, 188, 192, 31, 33, 62, 237, 105, 150, 62, 86, 166, 184, 189, 159, 150, 12, 190, 89, 183, 83, 62, 83, 215, 3, 60, 180, 87, 1, 190, 202, 59, 213, 189, 18, 135, 249, 190, 27, 218, 222, 61, 145, 162, 253, 190, 37, 53, 243, 189, 95, 64, 117, 189, 132, 105, 59, 188, 93, 14, 137, 189, 78, 193, 121, 189, 88, 12, 199, 190, 193, 217, 162, 189, 78, 108, 68, 61, 1, 178, 19, 191, 225, 124, 43, 62, 18, 118, 252, 61, 128, 48, 236, 60, 216, 14, 124, 62, 35, 61, 23, 62, 45, 116, 180, 188, 76, 172, 29, 60, 126, 15, 130, 61, 112, 109, 240, 190, 36, 51, 29, 62, 139, 223, 222, 189, 24, 242, 114, 190, 253, 166, 38, 190, 116, 87, 21, 191, 30, 20, 140, 61, 35, 90, 8, 62, 94, 206, 115, 190, 172, 54, 52, 189, 205, 132, 44, 62, 158, 198, 51, 189, 128, 144, 32, 190, 227, 209, 234, 60, 84, 102, 3, 190, 158, 51, 53, 58, 52, 81, 106, 189, 4, 158, 53, 61, 73, 71, 149, 189, 137, 182, 46, 60, 39, 237, 226, 188, 39, 12, 116, 61, 120, 23, 5, 62, 24, 243, 36, 190, 149, 203, 56, 190, 142, 78, 157, 189, 138, 9, 250, 189, 141, 50, 155, 61, 140, 75, 6, 190, 152, 9, 101, 187, 198, 246, 233, 56, 209, 102, 204, 61, 8, 190, 69, 189, 141, 184, 117, 61, 27, 78, 153, 189, 96, 221, 37, 190, 124, 222, 148, 58, 216, 157, 27, 61, 155, 186, 70, 60, 127, 158, 12, 61, 134, 45, 96, 186, 244, 108, 1, 191, 239, 10, 153, 190, 55, 221, 214, 190, 193, 175, 179, 62, 42, 27, 161, 190, 122, 237, 167, 190, 28, 58, 27, 190, 18, 103, 115, 62, 179, 32, 153, 189, 237, 224, 127, 189, 158, 77, 54, 190, 154, 166, 193, 60, 158, 158, 75, 190, 6, 250, 93, 188, 239, 135, 166, 61, 67, 100, 207, 190, 138, 34, 159, 190, 28, 37, 92, 190, 105, 175, 67, 189, 24, 131, 41, 62, 63, 128, 167, 62, 39, 67, 202, 190, 11, 125, 242, 60, 162, 75, 195, 62, 16, 192, 32, 190, 80, 59, 76, 190, 11, 94, 104, 190, 20, 150, 111, 62, 220, 91, 141, 62, 81, 80, 20, 61, 25, 8, 68, 190, 152, 231, 202, 62, 129, 132, 139, 190, 32, 107, 42, 190, 85, 252, 108, 190, 236, 163, 80, 62, 180, 179, 56, 190, 152, 140, 123, 190, 111, 99, 153, 190, 31, 201, 161, 62, 240, 95, 149, 190, 252, 50, 183, 189, 168, 1, 92, 190, 180, 24, 165, 189, 10, 235, 151, 190, 234, 4, 35, 189, 176, 22, 32, 62, 67, 4, 41, 190, 211, 246, 40, 60, 154, 92, 183, 61, 101, 229, 148, 189, 157, 175, 199, 188, 210, 191, 196, 61, 115, 153, 212, 190, 69, 136, 7, 61, 110, 186, 121, 62, 48, 121, 30, 190, 239, 56, 241, 60, 17, 144, 160, 61, 145, 49, 98, 61, 176, 48, 110, 62, 34, 250, 143, 188, 185, 203, 109, 190, 84, 76, 92, 62, 2, 83, 159, 189, 234, 232, 100, 62, 165, 148, 57, 190, 209, 202, 136, 187, 31, 229, 169, 189, 92, 107, 70, 62, 117, 91, 11, 62, 56, 124, 182, 190, 201, 47, 159, 61, 78, 44, 37, 62, 237, 195, 95, 61, 133, 189, 128, 61, 88, 84, 56, 62, 197, 170, 198, 188, 129, 190, 85, 62, 193, 13, 9, 190, 25, 20, 36, 61, 112, 48, 199, 189, 115, 220, 49, 190, 155, 153, 49, 62, 247, 17, 105, 62, 146, 117, 61, 190, 140, 167, 11, 190, 204, 79, 205, 62, 250, 250, 180, 61, 105, 82, 132, 62, 105, 136, 7, 62, 217, 27, 201, 189, 110, 145, 74, 62, 66, 28, 59, 188, 96, 3, 44, 62, 122, 229, 58, 189, 80, 247, 98, 189, 247, 250, 127, 190, 8, 215, 153, 61, 56, 6, 65, 191, 6, 102, 130, 61, 119, 95, 235, 61, 33, 64, 118, 61, 137, 17, 255, 190, 70, 8, 70, 62, 221, 140, 125, 190, 221, 51, 6, 189, 102, 197, 193, 61, 220, 153, 106, 61, 91, 78, 26, 189, 180, 248, 173, 190, 239, 209, 57, 62, 69, 162, 73, 190, 69, 137, 209, 61, 154, 250, 68, 61, 83, 213, 219, 188, 163, 131, 69, 189, 82, 80, 92, 189, 169, 105, 46, 62, 156, 121, 77, 190, 140, 226, 80, 61, 252, 125, 130, 190, 144, 161, 205, 62, 225, 2, 190, 190, 148, 217, 138, 191, 106, 191, 138, 62, 228, 155, 70, 190, 254, 77, 36, 190, 148, 62, 205, 62, 41, 42, 167, 62, 118, 244, 182, 62, 124, 14, 79, 190, 175, 233, 172, 62, 136, 69, 126, 62, 145, 140, 152, 62, 29, 187, 231, 190, 85, 41, 51, 62, 162, 199, 171, 190, 100, 122, 21, 62, 231, 228, 145, 188, 23, 94, 39, 62, 192, 121, 100, 60, 60, 221, 161, 190, 139, 191, 114, 62, 125, 163, 133, 60, 233, 56, 28, 188, 168, 52, 61, 62, 221, 123, 42, 190, 106, 141, 197, 190, 27, 204, 27, 60, 204, 105, 79, 62, 173, 23, 6, 62, 249, 24, 153, 190, 213, 135, 134, 62, 210, 237, 143, 62, 179, 247, 237, 190, 34, 144, 189, 190, 168, 102, 72, 62, 79, 45, 85, 62, 144, 184, 252, 189, 141, 80, 149, 60, 10, 209, 14, 62, 202, 24, 44, 188, 130, 254, 141, 189, 69, 155, 161, 61, 86, 199, 239, 189, 220, 179, 176, 188, 53, 217, 76, 62, 29, 151, 116, 188, 153, 148, 188, 189, 196, 225, 37, 62, 211, 246, 209, 188, 180, 253, 61, 61, 249, 61, 162, 61, 70, 243, 163, 190, 120, 75, 48, 62, 105, 105, 62, 62, 252, 254, 182, 188, 219, 233, 136, 189, 33, 76, 183, 61, 56, 224, 137, 61, 213, 12, 99, 61, 77, 233, 121, 61, 211, 80, 67, 62, 150, 135, 70, 62, 211, 163, 128, 61, 208, 32, 170, 61, 128, 7, 82, 62, 119, 247, 212, 61, 33, 99, 247, 61, 67, 253, 184, 188, 168, 186, 144, 190, 54, 217, 180, 190, 65, 155, 167, 189, 219, 239, 205, 190, 211, 146, 234, 61, 74, 50, 75, 191, 162, 90, 145, 190, 138, 147, 13, 190, 117, 222, 154, 189, 12, 14, 6, 62, 150, 223, 87, 190, 221, 236, 18, 62, 220, 240, 63, 188, 16, 167, 2, 189, 248, 93, 117, 190, 155, 138, 89, 62, 254, 38, 135, 191, 235, 99, 202, 190, 120, 201, 211, 61, 188, 145, 70, 190, 66, 74, 117, 62, 25, 17, 4, 62, 28, 132, 17, 191, 40, 18, 215, 61, 225, 54, 110, 62, 117, 167, 101, 61, 43, 111, 15, 190, 81, 199, 97, 190, 165, 243, 20, 62, 180, 60, 28, 189, 93, 9, 163, 190, 168, 93, 40, 190, 144, 148, 132, 62, 70, 221, 165, 190, 237, 155, 14, 61, 104, 32, 4, 191, 34, 153, 185, 189, 100, 155, 179, 61, 193, 29, 11, 60, 29, 216, 24, 62, 33, 118, 116, 189, 17, 9, 72, 191, 211, 164, 35, 62, 191, 178, 253, 61, 71, 34, 30, 62, 58, 112, 4, 62, 64, 237, 210, 189, 87, 229, 44, 189, 114, 130, 175, 189, 11, 111, 243, 190, 239, 21, 9, 191, 72, 254, 213, 61, 242, 201, 147, 62, 135, 192, 144, 189, 60, 58, 137, 190, 222, 205, 52, 62, 207, 196, 176, 62, 229, 126, 156, 61, 237, 196, 113, 62, 61, 194, 59, 62, 158, 192, 152, 61, 202, 236, 121, 190, 31, 214, 111, 62, 255, 241, 58, 190, 12, 115, 109, 190, 142, 79, 97, 62, 161, 125, 27, 62, 167, 226, 163, 62, 133, 21, 111, 189, 242, 239, 183, 62, 148, 117, 195, 61, 195, 94, 31, 62, 244, 73, 152, 61, 144, 232, 9, 62, 17, 105, 175, 61, 178, 86, 255, 188, 252, 171, 89, 190, 165, 76, 128, 62, 143, 205, 224, 189, 247, 195, 68, 189, 218, 189, 65, 62, 77, 20, 93, 62, 127, 202, 230, 61, 177, 223, 190, 61, 53, 119, 110, 190, 155, 43, 128, 62, 176, 49, 237, 62, 12, 10, 194, 188, 5, 240, 60, 188, 224, 67, 163, 60, 237, 221, 124, 61, 236, 73, 158, 189, 202, 95, 155, 189, 171, 255, 56, 62, 164, 211, 25, 190, 126, 242, 110, 62, 158, 71, 189, 60, 86, 163, 224, 190, 225, 227, 99, 190, 233, 87, 138, 190, 181, 74, 148, 61, 184, 3, 174, 190, 206, 94, 46, 190, 217, 108, 88, 190, 73, 101, 10, 61, 142, 89, 225, 189, 69, 77, 109, 190, 102, 26, 251, 189, 97, 144, 62, 61, 64, 87, 14, 190, 148, 123, 142, 190, 156, 26, 63, 62, 22, 120, 92, 190, 134, 22, 1, 191, 156, 36, 53, 62, 112, 107, 157, 189, 85, 43, 85, 62, 147, 164, 119, 62, 137, 56, 27, 191, 135, 130, 41, 62, 241, 93, 202, 62, 144, 116, 69, 61, 167, 152, 236, 188, 221, 237, 35, 190, 157, 10, 130, 62, 186, 21, 144, 62, 157, 139, 52, 189, 217, 104, 98, 189, 41, 217, 100, 61, 44, 147, 44, 61, 245, 1, 15, 189, 106, 92, 12, 190, 241, 146, 51, 190, 39, 253, 39, 190, 196, 191, 79, 187, 83, 30, 18, 62, 57, 71, 5, 190, 61, 180, 111, 61, 250, 142, 109, 190, 177, 213, 41, 190, 165, 64, 86, 62, 73, 135, 25, 190, 129, 123, 155, 61, 76, 41, 146, 190, 103, 227, 29, 189, 52, 49, 138, 188, 62, 198, 152, 61, 110, 242, 233, 189, 118, 56, 211, 61, 61, 227, 180, 189, 228, 37, 179, 187, 178, 94, 180, 60, 90, 217, 252, 189, 49, 99, 44, 190, 145, 161, 243, 61, 148, 3, 61, 62, 99, 252, 46, 189, 130, 233, 30, 190, 77, 232, 71, 62, 177, 30, 234, 188, 55, 63, 140, 190, 52, 92, 188, 189, 239, 193, 51, 190, 26, 82, 62, 61, 25, 36, 19, 191, 30, 131, 16, 61, 246, 57, 170, 190, 238, 146, 184, 190, 236, 50, 65, 190, 115, 0, 97, 62, 81, 4, 14, 190, 42, 195, 152, 190, 30, 81, 65, 190, 248, 135, 107, 190, 233, 182, 12, 62, 69, 249, 143, 190, 153, 37, 10, 62, 74, 160, 149, 61, 28, 34, 124, 61, 166, 134, 128, 62, 108, 80, 202, 60, 176, 156, 189, 190, 102, 65, 8, 62, 195, 140, 142, 62, 2, 173, 159, 191, 132, 61, 33, 60, 122, 166, 117, 190, 252, 34, 11, 63, 46, 237, 105, 190, 160, 121, 142, 191, 247, 84, 113, 61, 176, 41, 90, 190, 11, 90, 86, 61, 171, 66, 14, 190, 62, 177, 19, 62, 33, 210, 174, 62, 221, 157, 122, 61, 189, 93, 199, 188, 70, 160, 130, 61, 8, 60, 133, 62, 173, 117, 192, 188, 160, 85, 144, 189, 24, 171, 81, 62, 202, 39, 76, 62, 58, 28, 117, 190, 122, 55, 125, 189, 40, 235, 231, 61, 218, 57, 20, 60, 145, 189, 37, 61, 224, 160, 72, 62, 226, 46, 25, 61, 167, 129, 14, 190, 111, 70, 37, 61, 215, 193, 13, 62, 225, 174, 170, 62, 46, 163, 215, 189, 135, 175, 28, 61, 155, 110, 37, 190, 245, 247, 192, 60, 136, 3, 72, 189, 30, 126, 103, 189, 161, 47, 102, 189, 173, 1, 152, 189, 196, 110, 21, 62, 9, 219, 136, 61, 228, 8, 147, 61, 122, 17, 56, 62, 35, 233, 164, 189, 181, 127, 82, 190, 255, 185, 13, 62, 145, 46, 147, 62, 219, 83, 107, 62, 136, 125, 68, 190, 126, 178, 72, 62, 234, 217, 74, 190, 198, 191, 68, 62, 60, 212, 154, 61, 160, 231, 49, 62, 235, 215, 52, 188, 35, 190, 13, 62, 186, 217, 61, 62, 86, 250, 106, 190, 34, 110, 49, 189, 13, 142, 212, 61, 250, 143, 33, 62, 166, 112, 191, 189, 44, 181, 253, 189, 249, 167, 205, 188, 129, 67, 70, 62, 204, 186, 71, 190, 236, 94, 108, 61, 65, 179, 237, 187, 244, 229, 62, 190, 112, 99, 126, 189, 244, 242, 137, 189, 52, 110, 4, 62, 113, 117, 188, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 112, 235, 185, 124, 126, 254, 61, 187, 93, 163, 61, 133, 130, 39, 62, 22, 130, 144, 188, 71, 34, 115, 61, 163, 144, 97, 190, 188, 149, 150, 62, 184, 167, 241, 61, 239, 138, 9, 190, 166, 18, 79, 189, 110, 31, 137, 62, 178, 41, 154, 190, 144, 118, 17, 62, 94, 67, 199, 189, 109, 165, 212, 61, 38, 105, 154, 61, 119, 222, 149, 189, 240, 228, 128, 62, 76, 13, 60, 61, 37, 235, 140, 189, 236, 204, 148, 62, 38, 68, 190, 59, 240, 23, 255, 61, 105, 184, 197, 61, 204, 96, 26, 59, 11, 71, 88, 60, 243, 165, 145, 62, 44, 81, 174, 189, 64, 194, 33, 62, 172, 165, 84, 190, 163, 2, 112, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {18, 78, 214, 190, 224, 218, 49, 63, 48, 110, 145, 61, 43, 179, 2, 62, 250, 242, 70, 62, 64, 120, 94, 190, 144, 167, 186, 190, 248, 58, 155, 61, 229, 68, 77, 191, 235, 58, 117, 191, 17, 123, 150, 190, 250, 60, 90, 190, 4, 57, 225, 189, 113, 38, 248, 189, 77, 88, 197, 190, 2, 253, 81, 190, 58, 144, 50, 61, 194, 88, 220, 187, 199, 27, 247, 190, 200, 108, 119, 190, 86, 137, 65, 62, 209, 197, 32, 63, 195, 238, 199, 62, 62, 31, 81, 190, 74, 209, 17, 191, 80, 165, 193, 190, 48, 96, 71, 190, 216, 11, 167, 190, 251, 127, 124, 190, 205, 189, 121, 63, 145, 31, 39, 189, 118, 237, 51, 62, 160, 116, 167, 62, 44, 7, 78, 189, 126, 64, 206, 190, 227, 178, 55, 61, 242, 243, 60, 190, 84, 171, 222, 188, 145, 249, 189, 62, 194, 50, 152, 189, 36, 123, 26, 62, 188, 193, 137, 61, 193, 14, 134, 62, 217, 71, 203, 59, 180, 175, 36, 62, 56, 108, 194, 188, 79, 136, 217, 188, 166, 165, 126, 189, 114, 203, 103, 190, 172, 101, 222, 61, 191, 192, 208, 61, 22, 6, 78, 62, 40, 155, 83, 190, 137, 26, 196, 189, 87, 226, 41, 62, 41, 68, 46, 190, 47, 156, 77, 190, 39, 108, 198, 190, 129, 171, 91, 62, 73, 14, 255, 189, 201, 84, 99, 62, 154, 206, 61, 62, 230, 178, 95, 62, 216, 148, 59, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 223, 50, 62, 228, 159, 185, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {175, 20, 173, 61, 21, 253, 142, 62, 163, 79, 113, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {236, 157, 70, 190, 193, 229, 100, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0067/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}