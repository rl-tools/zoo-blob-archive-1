// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 254, 62, 63, 177, 119, 30, 191, 254, 75, 160, 190, 115, 69, 236, 62, 241, 42, 75, 191, 124, 53, 233, 190, 230, 254, 179, 62, 98, 109, 177, 191, 100, 135, 159, 190, 68, 10, 53, 61, 171, 238, 188, 191, 198, 250, 223, 190, 238, 184, 196, 190, 20, 247, 65, 190, 110, 198, 181, 62, 90, 55, 247, 62, 165, 184, 133, 191, 240, 231, 173, 61, 87, 249, 175, 62, 252, 13, 90, 191, 92, 23, 61, 190, 187, 189, 57, 63, 79, 91, 178, 63, 114, 148, 154, 62, 155, 101, 30, 191, 163, 174, 115, 190, 142, 23, 18, 190, 100, 177, 214, 62, 128, 2, 60, 190, 178, 13, 236, 62, 65, 116, 84, 62, 10, 131, 157, 191, 128, 165, 159, 190, 16, 104, 149, 188, 15, 37, 151, 63, 150, 214, 208, 190, 35, 22, 252, 61, 217, 198, 36, 191, 145, 156, 153, 60, 139, 9, 4, 191, 24, 230, 6, 191, 151, 59, 41, 190, 22, 187, 212, 190, 16, 74, 23, 191, 241, 148, 35, 191, 209, 0, 184, 190, 198, 82, 210, 62, 220, 136, 47, 63, 126, 143, 85, 63, 152, 89, 26, 191, 254, 80, 105, 190, 133, 190, 48, 191, 14, 226, 37, 191, 96, 233, 169, 187, 112, 22, 9, 191, 70, 253, 91, 190, 29, 136, 173, 62, 52, 209, 25, 62, 127, 206, 49, 63, 136, 165, 157, 190, 145, 141, 160, 188, 150, 223, 143, 191, 230, 228, 190, 62, 247, 153, 58, 63, 255, 198, 84, 191, 230, 133, 51, 190, 193, 189, 222, 190, 142, 111, 129, 63, 53, 4, 82, 61, 166, 148, 233, 62, 165, 57, 161, 191, 106, 27, 101, 190, 10, 178, 225, 190, 226, 173, 10, 191, 166, 144, 215, 190, 70, 206, 167, 62, 77, 146, 62, 188, 214, 105, 1, 191, 34, 112, 11, 189, 140, 160, 126, 62, 102, 86, 224, 190, 88, 22, 71, 63, 97, 113, 171, 63, 240, 213, 172, 62, 36, 47, 104, 190, 253, 231, 192, 191, 103, 91, 224, 190, 38, 43, 44, 62, 179, 97, 132, 63, 196, 93, 205, 62, 111, 160, 143, 62, 108, 132, 98, 191, 8, 86, 206, 190, 211, 206, 7, 191, 122, 190, 190, 190, 234, 25, 1, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {136, 0, 55, 191, 16, 215, 6, 190, 68, 232, 251, 189, 121, 113, 4, 190, 46, 227, 140, 62, 148, 49, 20, 190, 81, 238, 57, 60, 174, 68, 82, 190, 163, 80, 57, 63, 204, 246, 123, 191, 190, 117, 172, 62, 164, 216, 118, 62, 78, 213, 69, 62, 98, 218, 128, 190, 6, 141, 46, 191, 193, 221, 41, 190, 56, 55, 121, 191, 156, 77, 24, 63, 206, 221, 171, 62, 252, 71, 21, 63, 224, 184, 242, 61, 224, 224, 22, 191, 216, 45, 228, 62, 74, 229, 35, 63, 45, 224, 91, 191, 39, 126, 254, 61, 111, 161, 16, 60, 14, 218, 143, 189, 172, 206, 96, 61, 181, 48, 13, 62, 33, 186, 220, 189, 167, 14, 155, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 217, 145, 190, 112, 3, 125, 190, 67, 32, 177, 190, 7, 228, 178, 61, 29, 79, 141, 190, 187, 199, 66, 190, 208, 93, 214, 190, 82, 250, 205, 62, 233, 121, 155, 190, 192, 205, 230, 188, 62, 0, 159, 190, 170, 27, 148, 190, 25, 25, 34, 61, 79, 114, 198, 61, 156, 137, 152, 187, 138, 12, 2, 190, 93, 52, 76, 190, 132, 55, 66, 190, 64, 186, 19, 190, 71, 158, 196, 60, 184, 141, 10, 190, 48, 54, 42, 191, 111, 95, 35, 190, 137, 65, 158, 188, 235, 193, 176, 61, 171, 238, 192, 189, 154, 141, 45, 188, 115, 209, 118, 62, 88, 101, 202, 60, 44, 88, 46, 190, 136, 87, 162, 189, 135, 253, 199, 62, 240, 243, 6, 62, 198, 192, 169, 62, 23, 172, 180, 62, 165, 113, 210, 190, 251, 66, 5, 61, 215, 126, 77, 62, 169, 86, 153, 62, 249, 194, 168, 190, 44, 78, 147, 62, 149, 65, 254, 190, 42, 48, 73, 62, 82, 153, 218, 57, 101, 189, 9, 62, 249, 203, 131, 61, 228, 87, 49, 191, 92, 105, 74, 62, 63, 16, 132, 190, 189, 151, 250, 61, 120, 87, 220, 62, 234, 87, 97, 60, 77, 251, 192, 190, 84, 190, 152, 190, 141, 116, 127, 61, 95, 217, 77, 62, 73, 131, 60, 191, 142, 80, 141, 62, 35, 116, 1, 189, 204, 205, 190, 190, 85, 103, 6, 191, 212, 3, 62, 61, 185, 143, 139, 62, 248, 52, 83, 190, 250, 158, 233, 61, 250, 64, 56, 62, 192, 202, 186, 190, 140, 41, 213, 190, 189, 125, 200, 189, 79, 153, 76, 62, 164, 38, 178, 62, 67, 113, 238, 190, 172, 249, 41, 189, 244, 143, 210, 61, 19, 13, 187, 62, 29, 107, 58, 190, 149, 190, 177, 62, 230, 162, 161, 189, 170, 94, 22, 191, 24, 219, 42, 189, 163, 58, 34, 191, 236, 58, 147, 189, 85, 60, 166, 61, 197, 90, 22, 190, 53, 72, 252, 61, 158, 181, 130, 190, 139, 102, 115, 190, 62, 184, 186, 62, 161, 68, 179, 189, 233, 244, 51, 61, 3, 155, 157, 60, 135, 9, 161, 188, 67, 76, 78, 191, 55, 68, 176, 61, 68, 54, 6, 190, 189, 126, 172, 190, 58, 191, 169, 189, 40, 99, 206, 189, 97, 241, 72, 190, 134, 98, 133, 190, 35, 62, 164, 62, 21, 4, 88, 62, 171, 223, 147, 61, 118, 17, 181, 191, 68, 237, 125, 62, 254, 163, 253, 190, 83, 175, 7, 61, 240, 71, 210, 62, 74, 119, 148, 62, 12, 195, 234, 189, 19, 213, 35, 190, 14, 253, 4, 62, 37, 30, 59, 190, 105, 145, 52, 190, 84, 130, 140, 62, 95, 60, 98, 62, 47, 103, 191, 189, 167, 77, 100, 190, 243, 43, 122, 62, 187, 167, 189, 189, 33, 132, 254, 190, 46, 80, 71, 61, 10, 129, 43, 62, 228, 20, 94, 191, 40, 103, 148, 190, 225, 135, 137, 190, 138, 211, 250, 60, 216, 228, 254, 61, 187, 127, 219, 61, 187, 93, 67, 62, 4, 45, 87, 62, 59, 65, 114, 189, 250, 133, 227, 61, 170, 52, 102, 62, 37, 250, 177, 62, 73, 185, 91, 190, 72, 157, 110, 61, 152, 112, 149, 189, 80, 176, 167, 62, 104, 190, 158, 61, 38, 128, 19, 189, 146, 250, 73, 190, 104, 73, 200, 190, 17, 217, 9, 62, 106, 103, 27, 190, 133, 99, 204, 59, 242, 87, 228, 189, 129, 248, 233, 189, 36, 134, 133, 188, 114, 149, 94, 190, 92, 211, 69, 62, 212, 215, 64, 62, 192, 87, 221, 190, 39, 31, 255, 61, 150, 135, 37, 189, 158, 9, 212, 60, 10, 118, 217, 190, 97, 89, 8, 189, 93, 39, 109, 62, 225, 50, 132, 190, 214, 222, 21, 191, 252, 88, 130, 189, 182, 133, 254, 189, 210, 77, 127, 62, 249, 78, 104, 190, 170, 204, 202, 190, 191, 186, 43, 190, 236, 125, 225, 61, 48, 102, 130, 190, 96, 20, 95, 61, 71, 48, 142, 61, 28, 8, 173, 190, 170, 58, 163, 186, 197, 40, 186, 189, 134, 159, 72, 62, 37, 152, 157, 189, 154, 225, 15, 191, 245, 147, 193, 61, 226, 195, 145, 61, 158, 3, 32, 62, 47, 153, 69, 62, 50, 166, 57, 191, 52, 18, 195, 189, 64, 167, 197, 62, 165, 218, 206, 190, 102, 47, 27, 190, 234, 153, 197, 190, 35, 232, 177, 62, 254, 169, 140, 62, 54, 27, 147, 189, 121, 241, 129, 190, 123, 252, 105, 62, 160, 216, 30, 62, 196, 154, 230, 190, 52, 139, 150, 191, 209, 37, 163, 60, 209, 73, 162, 189, 220, 205, 167, 62, 88, 252, 64, 191, 197, 27, 187, 62, 143, 62, 146, 191, 176, 209, 184, 62, 244, 143, 37, 191, 215, 169, 95, 189, 100, 47, 151, 189, 15, 243, 60, 61, 185, 25, 29, 62, 93, 50, 91, 62, 185, 99, 240, 59, 54, 18, 58, 191, 229, 77, 94, 190, 130, 89, 109, 61, 174, 179, 40, 62, 176, 150, 32, 190, 251, 212, 169, 189, 90, 133, 231, 57, 206, 64, 14, 62, 22, 33, 123, 191, 15, 25, 133, 191, 90, 10, 55, 62, 178, 35, 108, 191, 145, 121, 247, 61, 27, 125, 255, 190, 237, 225, 96, 60, 3, 226, 14, 60, 93, 238, 98, 189, 169, 35, 51, 62, 242, 53, 176, 61, 76, 31, 203, 61, 31, 140, 120, 62, 6, 95, 135, 62, 71, 45, 217, 190, 223, 141, 185, 61, 94, 238, 84, 190, 130, 154, 20, 62, 123, 43, 75, 190, 101, 135, 154, 62, 79, 165, 161, 189, 230, 198, 95, 188, 3, 173, 245, 60, 218, 10, 129, 190, 152, 32, 69, 189, 95, 198, 110, 62, 203, 247, 76, 190, 153, 221, 227, 189, 23, 115, 14, 190, 156, 134, 254, 190, 50, 7, 32, 62, 114, 11, 176, 190, 61, 254, 29, 189, 128, 135, 156, 59, 111, 32, 207, 190, 182, 91, 67, 190, 27, 22, 175, 189, 161, 175, 190, 187, 163, 213, 106, 61, 5, 181, 185, 60, 75, 80, 5, 190, 172, 253, 185, 190, 227, 136, 3, 191, 233, 248, 72, 62, 110, 136, 73, 191, 232, 209, 106, 190, 188, 149, 65, 190, 126, 74, 193, 62, 215, 120, 213, 190, 45, 244, 114, 191, 244, 122, 176, 190, 180, 59, 239, 190, 19, 93, 124, 191, 69, 174, 101, 190, 153, 166, 74, 62, 158, 29, 199, 187, 109, 220, 192, 62, 149, 238, 90, 188, 37, 40, 228, 190, 85, 40, 32, 190, 78, 211, 191, 61, 12, 78, 195, 62, 172, 100, 190, 190, 233, 223, 53, 190, 167, 172, 180, 190, 215, 164, 131, 190, 27, 40, 112, 190, 5, 39, 174, 190, 97, 239, 171, 59, 237, 91, 207, 190, 60, 238, 180, 190, 193, 195, 149, 60, 251, 190, 214, 190, 226, 96, 147, 191, 78, 26, 72, 190, 210, 212, 29, 190, 85, 58, 42, 191, 127, 221, 14, 191, 108, 198, 111, 190, 67, 163, 152, 62, 223, 186, 195, 190, 229, 140, 192, 191, 186, 78, 243, 190, 183, 186, 25, 61, 242, 17, 0, 191, 46, 144, 41, 62, 84, 163, 255, 190, 232, 22, 76, 190, 27, 117, 126, 62, 52, 253, 135, 60, 248, 183, 4, 190, 161, 44, 77, 62, 23, 18, 227, 189, 156, 61, 36, 190, 228, 177, 15, 62, 239, 184, 179, 189, 166, 244, 206, 189, 157, 60, 4, 191, 226, 136, 102, 61, 125, 72, 74, 190, 2, 238, 37, 191, 146, 27, 61, 191, 211, 139, 55, 62, 217, 121, 139, 190, 170, 247, 113, 190, 56, 23, 66, 191, 193, 139, 38, 62, 74, 127, 145, 190, 8, 9, 6, 191, 26, 146, 18, 190, 138, 30, 33, 63, 253, 82, 197, 190, 197, 203, 141, 190, 200, 214, 135, 190, 222, 125, 241, 61, 52, 208, 149, 190, 63, 196, 61, 190, 92, 223, 122, 62, 105, 149, 150, 190, 216, 111, 44, 190, 82, 5, 34, 191, 236, 201, 214, 189, 95, 152, 155, 62, 107, 71, 51, 191, 29, 110, 24, 191, 120, 43, 11, 61, 227, 110, 248, 61, 229, 33, 152, 189, 64, 163, 248, 188, 101, 100, 51, 190, 106, 233, 217, 62, 39, 206, 76, 190, 1, 5, 241, 61, 248, 21, 142, 190, 31, 106, 174, 62, 0, 244, 241, 190, 62, 158, 171, 189, 24, 192, 22, 190, 66, 5, 154, 62, 147, 43, 19, 190, 211, 159, 115, 190, 248, 64, 13, 59, 174, 136, 121, 61, 11, 0, 54, 62, 158, 254, 136, 190, 150, 116, 65, 61, 183, 39, 36, 189, 213, 37, 128, 61, 92, 50, 107, 189, 184, 232, 248, 61, 19, 120, 196, 189, 98, 124, 120, 191, 76, 236, 8, 60, 112, 16, 78, 61, 204, 222, 161, 61, 29, 222, 128, 62, 235, 130, 59, 191, 36, 179, 187, 189, 116, 213, 22, 62, 62, 219, 127, 190, 192, 133, 70, 190, 143, 100, 130, 60, 131, 237, 26, 62, 42, 63, 148, 62, 15, 199, 51, 189, 212, 202, 253, 188, 175, 217, 173, 61, 50, 3, 102, 188, 223, 155, 184, 61, 83, 34, 177, 60, 236, 57, 239, 189, 130, 121, 188, 60, 179, 116, 65, 62, 23, 150, 97, 61, 245, 177, 134, 189, 216, 102, 233, 61, 101, 33, 31, 61, 15, 224, 196, 189, 177, 129, 179, 187, 74, 37, 104, 188, 201, 98, 221, 61, 65, 58, 191, 61, 10, 41, 176, 189, 147, 46, 158, 189, 210, 250, 222, 189, 133, 235, 64, 190, 227, 8, 1, 189, 182, 148, 173, 189, 212, 63, 169, 61, 8, 117, 188, 190, 144, 37, 57, 190, 239, 168, 56, 61, 218, 18, 145, 61, 126, 161, 48, 189, 52, 218, 34, 189, 167, 144, 11, 189, 253, 84, 7, 190, 241, 42, 228, 60, 238, 191, 238, 188, 215, 41, 167, 189, 57, 139, 139, 189, 241, 99, 38, 61, 249, 250, 48, 61, 195, 23, 19, 190, 222, 101, 107, 61, 112, 65, 9, 190, 182, 35, 155, 61, 242, 110, 192, 186, 112, 116, 4, 62, 31, 187, 182, 188, 119, 70, 131, 61, 52, 21, 131, 60, 218, 38, 101, 189, 51, 188, 10, 62, 230, 123, 41, 190, 14, 132, 74, 188, 162, 197, 202, 189, 166, 153, 232, 61, 57, 154, 38, 190, 128, 104, 0, 189, 30, 104, 219, 189, 2, 42, 15, 190, 132, 33, 233, 189, 60, 89, 5, 62, 115, 113, 102, 61, 11, 149, 38, 188, 228, 129, 11, 190, 213, 235, 26, 190, 118, 177, 116, 189, 73, 207, 7, 61, 23, 241, 243, 189, 76, 15, 189, 62, 89, 144, 73, 62, 73, 141, 128, 62, 16, 156, 140, 188, 104, 168, 243, 190, 26, 56, 195, 190, 18, 226, 245, 61, 133, 137, 99, 189, 178, 125, 54, 62, 114, 18, 57, 190, 187, 33, 8, 62, 142, 44, 154, 190, 208, 42, 60, 191, 200, 128, 41, 190, 79, 28, 59, 189, 42, 209, 44, 191, 106, 21, 29, 63, 144, 206, 32, 62, 73, 125, 24, 190, 209, 131, 112, 189, 183, 235, 238, 60, 34, 83, 11, 63, 194, 249, 246, 189, 125, 159, 247, 61, 45, 169, 133, 60, 38, 213, 225, 60, 39, 64, 229, 188, 12, 110, 4, 191, 243, 78, 78, 62, 186, 84, 225, 190, 172, 63, 199, 60, 40, 128, 104, 189, 2, 72, 30, 191, 254, 86, 111, 190, 237, 9, 172, 190, 107, 150, 106, 62, 103, 10, 36, 189, 198, 191, 127, 190, 152, 154, 233, 61, 194, 174, 55, 62, 196, 71, 10, 190, 239, 84, 28, 61, 188, 224, 68, 189, 172, 1, 192, 189, 47, 120, 85, 62, 136, 137, 143, 61, 130, 161, 177, 61, 86, 159, 184, 190, 127, 14, 128, 191, 232, 11, 248, 188, 213, 141, 247, 61, 21, 141, 23, 62, 54, 28, 125, 62, 132, 104, 55, 191, 122, 49, 219, 61, 182, 111, 203, 62, 247, 148, 68, 189, 180, 76, 32, 190, 181, 107, 134, 188, 237, 73, 71, 62, 52, 49, 249, 62, 165, 97, 22, 188, 111, 245, 2, 190, 127, 157, 98, 62, 179, 220, 138, 61, 108, 76, 168, 61, 70, 193, 241, 190, 5, 200, 117, 191, 96, 239, 16, 61, 22, 236, 52, 191, 127, 191, 66, 190, 27, 85, 61, 62, 28, 252, 161, 61, 13, 3, 22, 190, 103, 139, 180, 190, 22, 89, 148, 61, 155, 246, 131, 190, 148, 238, 138, 189, 32, 146, 105, 191, 18, 246, 5, 62, 212, 177, 30, 189, 192, 234, 23, 189, 46, 240, 57, 62, 34, 241, 231, 62, 119, 237, 248, 189, 206, 222, 64, 190, 232, 112, 122, 62, 33, 62, 50, 191, 137, 112, 98, 61, 185, 46, 37, 63, 247, 121, 175, 60, 248, 242, 87, 61, 87, 128, 2, 192, 66, 134, 13, 62, 173, 122, 143, 62, 67, 209, 204, 190, 172, 54, 52, 189, 205, 132, 44, 62, 158, 198, 51, 189, 128, 144, 32, 190, 227, 209, 234, 60, 84, 102, 3, 190, 158, 51, 53, 58, 52, 81, 106, 189, 4, 158, 53, 61, 73, 71, 149, 189, 137, 182, 46, 60, 39, 237, 226, 188, 39, 12, 116, 61, 120, 23, 5, 62, 24, 243, 36, 190, 149, 203, 56, 190, 142, 78, 157, 189, 138, 9, 250, 189, 141, 50, 155, 61, 140, 75, 6, 190, 152, 9, 101, 187, 198, 246, 233, 56, 209, 102, 204, 61, 8, 190, 69, 189, 141, 184, 117, 61, 27, 78, 153, 189, 96, 221, 37, 190, 124, 222, 148, 58, 216, 157, 27, 61, 155, 186, 70, 60, 127, 158, 12, 61, 134, 45, 96, 186, 252, 185, 79, 191, 142, 232, 143, 190, 0, 80, 174, 190, 202, 108, 7, 63, 121, 156, 52, 191, 175, 180, 127, 190, 173, 11, 196, 189, 160, 5, 161, 62, 93, 171, 138, 61, 184, 201, 43, 190, 84, 24, 29, 190, 125, 33, 59, 189, 68, 93, 238, 189, 228, 188, 198, 61, 186, 8, 136, 61, 63, 72, 15, 191, 75, 205, 145, 191, 188, 217, 161, 189, 203, 91, 174, 190, 189, 114, 0, 62, 9, 61, 125, 62, 97, 59, 29, 191, 57, 3, 0, 60, 129, 235, 190, 62, 77, 31, 72, 190, 61, 90, 103, 190, 75, 51, 100, 190, 74, 78, 142, 62, 75, 108, 250, 62, 97, 2, 2, 62, 42, 212, 12, 190, 245, 85, 222, 62, 255, 91, 218, 190, 183, 177, 21, 190, 49, 9, 190, 59, 88, 164, 167, 62, 146, 12, 222, 190, 168, 211, 202, 60, 233, 179, 29, 190, 143, 42, 59, 62, 2, 230, 30, 190, 53, 183, 145, 189, 237, 100, 2, 190, 130, 164, 37, 190, 74, 78, 63, 190, 227, 208, 126, 59, 49, 245, 137, 61, 41, 135, 223, 190, 176, 61, 65, 191, 213, 170, 133, 62, 233, 70, 46, 190, 143, 207, 243, 189, 1, 34, 135, 62, 22, 38, 86, 191, 144, 26, 74, 190, 14, 210, 148, 62, 26, 103, 142, 190, 94, 24, 165, 188, 35, 130, 156, 61, 223, 232, 212, 189, 244, 75, 1, 63, 95, 240, 131, 190, 111, 133, 28, 190, 221, 253, 111, 62, 77, 12, 99, 190, 223, 246, 75, 62, 171, 158, 140, 190, 100, 181, 241, 189, 238, 96, 195, 189, 205, 234, 116, 62, 32, 214, 180, 61, 248, 227, 19, 191, 248, 37, 141, 62, 66, 67, 131, 61, 180, 212, 139, 61, 214, 217, 209, 61, 95, 9, 103, 62, 25, 111, 137, 189, 210, 147, 13, 62, 168, 6, 120, 190, 240, 184, 51, 190, 88, 215, 185, 61, 57, 25, 251, 189, 77, 230, 118, 62, 197, 198, 144, 62, 185, 177, 76, 190, 212, 239, 63, 61, 183, 145, 239, 62, 214, 67, 135, 189, 97, 11, 130, 62, 78, 56, 16, 62, 218, 100, 62, 190, 88, 200, 217, 61, 237, 159, 67, 190, 114, 110, 246, 61, 16, 43, 109, 188, 153, 22, 134, 186, 212, 46, 147, 189, 172, 234, 15, 63, 143, 7, 217, 189, 66, 47, 157, 61, 236, 10, 234, 61, 96, 13, 248, 62, 34, 220, 17, 191, 146, 164, 121, 61, 73, 114, 180, 190, 111, 55, 205, 62, 12, 226, 209, 190, 71, 95, 133, 61, 42, 77, 76, 187, 52, 27, 16, 190, 118, 14, 73, 62, 192, 167, 72, 62, 97, 153, 35, 61, 138, 180, 35, 61, 103, 55, 232, 190, 249, 33, 249, 188, 54, 135, 182, 62, 80, 199, 134, 61, 251, 19, 255, 189, 149, 144, 14, 63, 196, 12, 230, 190, 15, 10, 182, 61, 242, 56, 190, 190, 252, 217, 195, 191, 96, 124, 137, 62, 50, 251, 199, 62, 79, 63, 11, 191, 93, 134, 247, 62, 196, 1, 167, 62, 203, 34, 189, 62, 25, 87, 177, 190, 91, 203, 158, 62, 158, 248, 23, 62, 205, 139, 155, 62, 135, 243, 253, 190, 58, 188, 199, 61, 158, 68, 25, 191, 52, 233, 36, 62, 144, 218, 252, 59, 66, 1, 137, 61, 210, 200, 135, 190, 189, 171, 18, 191, 127, 34, 132, 62, 38, 14, 116, 61, 185, 120, 142, 189, 112, 86, 82, 62, 61, 43, 69, 190, 85, 251, 241, 190, 44, 217, 147, 61, 78, 75, 138, 62, 81, 39, 2, 62, 69, 215, 77, 191, 100, 214, 110, 62, 61, 96, 66, 62, 91, 66, 1, 191, 118, 195, 39, 191, 78, 145, 42, 62, 238, 218, 72, 62, 228, 245, 158, 190, 211, 24, 40, 62, 110, 104, 0, 62, 112, 249, 85, 190, 20, 197, 24, 190, 228, 177, 133, 61, 20, 177, 163, 189, 198, 208, 164, 189, 225, 240, 11, 62, 49, 188, 188, 189, 4, 135, 138, 189, 47, 70, 134, 61, 92, 99, 101, 60, 186, 202, 85, 61, 108, 133, 228, 61, 61, 137, 129, 190, 22, 17, 16, 62, 44, 148, 13, 62, 198, 213, 198, 189, 56, 111, 214, 189, 214, 73, 195, 61, 12, 18, 73, 61, 4, 238, 21, 62, 47, 230, 234, 60, 29, 191, 5, 62, 138, 140, 65, 62, 184, 61, 111, 61, 235, 146, 110, 62, 158, 153, 40, 62, 156, 20, 60, 190, 210, 246, 254, 61, 85, 145, 52, 189, 203, 202, 36, 190, 89, 24, 53, 191, 43, 94, 26, 190, 77, 152, 60, 191, 72, 219, 24, 189, 197, 169, 152, 191, 215, 82, 166, 190, 109, 143, 99, 190, 18, 105, 29, 188, 22, 198, 110, 61, 150, 223, 87, 190, 125, 111, 158, 188, 28, 96, 194, 61, 248, 88, 131, 189, 157, 22, 217, 190, 179, 91, 218, 61, 8, 144, 136, 191, 80, 148, 15, 191, 246, 242, 17, 190, 37, 198, 145, 190, 201, 59, 151, 62, 109, 119, 74, 191, 171, 189, 59, 191, 174, 98, 160, 62, 49, 104, 52, 62, 153, 124, 75, 190, 9, 180, 242, 189, 61, 187, 90, 190, 247, 236, 72, 62, 238, 146, 116, 190, 155, 69, 34, 190, 68, 183, 169, 190, 54, 158, 123, 62, 120, 68, 36, 191, 27, 121, 19, 61, 181, 18, 76, 191, 203, 200, 240, 188, 233, 134, 36, 62, 128, 51, 32, 62, 49, 93, 158, 61, 210, 241, 102, 189, 182, 231, 107, 191, 54, 71, 159, 62, 122, 158, 130, 61, 253, 12, 73, 62, 236, 188, 132, 62, 248, 238, 133, 189, 248, 110, 53, 61, 226, 44, 67, 189, 249, 42, 204, 191, 194, 169, 31, 191, 105, 210, 213, 61, 216, 52, 177, 62, 78, 58, 74, 59, 3, 72, 187, 190, 128, 155, 70, 62, 74, 127, 169, 62, 120, 42, 24, 62, 99, 200, 131, 62, 156, 181, 140, 62, 142, 116, 214, 61, 32, 36, 42, 191, 214, 147, 147, 62, 141, 45, 86, 190, 164, 13, 9, 190, 218, 169, 0, 63, 243, 154, 56, 62, 186, 187, 186, 62, 167, 252, 99, 189, 140, 252, 197, 62, 84, 132, 194, 188, 150, 25, 34, 62, 114, 253, 75, 187, 108, 205, 8, 190, 53, 218, 11, 62, 237, 201, 225, 189, 128, 207, 85, 190, 250, 70, 224, 61, 145, 107, 136, 190, 10, 114, 131, 189, 35, 201, 132, 62, 47, 246, 7, 63, 111, 255, 120, 189, 146, 46, 191, 61, 24, 127, 157, 190, 156, 150, 78, 62, 66, 181, 29, 63, 243, 241, 122, 190, 20, 49, 6, 190, 219, 234, 138, 189, 136, 241, 196, 61, 196, 174, 84, 189, 188, 118, 112, 190, 45, 84, 66, 62, 137, 54, 89, 190, 196, 239, 139, 62, 13, 176, 149, 189, 155, 177, 60, 191, 56, 111, 115, 190, 16, 192, 52, 190, 13, 149, 48, 62, 84, 138, 190, 190, 1, 15, 109, 188, 228, 128, 11, 190, 254, 244, 166, 61, 28, 227, 197, 189, 193, 163, 164, 60, 58, 75, 212, 189, 60, 82, 137, 188, 69, 121, 41, 60, 48, 76, 82, 190, 43, 219, 31, 62, 50, 160, 141, 190, 148, 83, 180, 191, 208, 105, 80, 62, 102, 39, 202, 189, 76, 108, 52, 62, 173, 150, 179, 62, 138, 73, 89, 191, 145, 230, 230, 61, 15, 188, 207, 62, 172, 40, 176, 189, 24, 112, 102, 189, 77, 211, 16, 190, 16, 196, 148, 62, 116, 156, 230, 62, 227, 190, 37, 61, 148, 124, 87, 189, 209, 125, 152, 61, 142, 96, 178, 61, 91, 107, 134, 61, 3, 35, 29, 191, 197, 47, 160, 190, 206, 59, 81, 191, 229, 100, 101, 191, 172, 109, 8, 61, 225, 110, 49, 191, 168, 220, 225, 61, 52, 8, 79, 190, 134, 115, 86, 190, 202, 99, 225, 62, 167, 175, 92, 191, 237, 160, 211, 60, 204, 3, 255, 190, 204, 166, 101, 190, 31, 98, 162, 190, 89, 38, 132, 61, 175, 9, 142, 190, 191, 95, 96, 62, 186, 234, 129, 190, 137, 189, 201, 60, 228, 48, 191, 61, 80, 19, 109, 190, 22, 8, 38, 191, 147, 102, 128, 62, 86, 117, 227, 62, 39, 28, 24, 191, 195, 135, 90, 191, 146, 188, 137, 190, 113, 76, 134, 61, 113, 175, 6, 190, 52, 92, 188, 189, 174, 127, 16, 61, 26, 82, 62, 61, 237, 155, 223, 190, 27, 186, 181, 61, 68, 31, 201, 61, 238, 146, 184, 190, 216, 139, 152, 190, 193, 183, 110, 62, 50, 191, 97, 190, 144, 69, 189, 189, 254, 104, 181, 190, 202, 167, 117, 190, 125, 61, 184, 61, 65, 244, 132, 190, 227, 22, 68, 62, 74, 160, 149, 61, 52, 163, 209, 61, 122, 211, 144, 62, 32, 176, 117, 190, 167, 100, 190, 190, 102, 65, 8, 62, 124, 69, 32, 62, 216, 219, 205, 191, 17, 45, 151, 62, 43, 82, 123, 190, 100, 51, 191, 62, 175, 199, 169, 190, 100, 246, 248, 191, 212, 250, 189, 58, 19, 196, 120, 188, 56, 169, 140, 189, 102, 60, 167, 189, 118, 214, 225, 187, 13, 197, 149, 62, 215, 37, 10, 190, 194, 90, 12, 62, 163, 41, 59, 62, 105, 14, 119, 62, 215, 54, 17, 191, 28, 223, 73, 190, 226, 214, 179, 61, 21, 175, 20, 62, 99, 122, 141, 190, 121, 209, 220, 187, 229, 237, 42, 190, 12, 143, 80, 190, 241, 44, 85, 60, 27, 230, 128, 62, 105, 47, 76, 189, 214, 190, 1, 61, 7, 86, 172, 189, 129, 114, 137, 62, 125, 153, 174, 62, 10, 208, 70, 190, 31, 60, 2, 61, 161, 233, 138, 190, 241, 202, 2, 190, 45, 68, 83, 190, 89, 127, 0, 191, 210, 168, 93, 190, 60, 94, 161, 190, 65, 16, 172, 188, 124, 226, 70, 190, 228, 181, 197, 189, 61, 86, 6, 62, 222, 190, 117, 190, 86, 231, 201, 190, 221, 0, 6, 61, 132, 250, 146, 62, 9, 125, 13, 62, 214, 237, 208, 190, 56, 99, 132, 62, 146, 180, 179, 190, 222, 205, 35, 62, 62, 108, 1, 62, 159, 24, 30, 62, 177, 146, 237, 189, 88, 79, 16, 61, 50, 210, 128, 188, 83, 1, 2, 191, 51, 72, 215, 189, 46, 247, 32, 57, 216, 38, 89, 62, 141, 251, 239, 189, 126, 39, 56, 190, 149, 17, 217, 61, 146, 131, 86, 62, 186, 130, 221, 190, 255, 202, 114, 61, 1, 180, 247, 58, 19, 18, 150, 190, 90, 23, 139, 190, 54, 32, 162, 190, 142, 153, 62, 61, 65, 47, 211, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 190, 12, 190, 145, 151, 42, 62, 19, 134, 35, 62, 56, 139, 154, 62, 44, 55, 14, 61, 241, 253, 240, 60, 53, 193, 222, 190, 70, 191, 90, 62, 40, 235, 231, 61, 43, 26, 52, 190, 75, 191, 109, 187, 64, 178, 144, 62, 117, 66, 155, 190, 144, 118, 17, 62, 160, 106, 40, 190, 160, 29, 2, 62, 166, 128, 81, 62, 119, 222, 149, 189, 7, 18, 129, 62, 248, 252, 193, 189, 79, 69, 248, 60, 110, 2, 139, 62, 61, 107, 150, 60, 17, 43, 182, 61, 208, 192, 32, 62, 67, 215, 68, 60, 30, 52, 111, 190, 188, 250, 153, 62, 108, 115, 249, 189, 111, 89, 129, 61, 175, 38, 88, 190, 241, 30, 139, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 93, 250, 189, 220, 71, 71, 63, 222, 242, 143, 61, 215, 94, 70, 63, 83, 134, 61, 62, 253, 43, 18, 190, 10, 97, 92, 191, 213, 241, 153, 189, 233, 145, 151, 191, 124, 6, 156, 191, 228, 69, 62, 191, 165, 80, 249, 189, 87, 46, 225, 189, 113, 38, 248, 189, 50, 200, 2, 191, 1, 100, 61, 190, 168, 142, 246, 62, 194, 88, 220, 187, 6, 255, 18, 191, 170, 102, 183, 190, 16, 35, 127, 62, 76, 46, 90, 63, 56, 97, 39, 63, 91, 78, 176, 188, 164, 116, 105, 191, 7, 95, 217, 190, 237, 254, 147, 190, 251, 11, 171, 190, 179, 174, 145, 191, 210, 39, 148, 63, 181, 200, 134, 61, 205, 151, 131, 62, 125, 178, 234, 62, 18, 168, 15, 190, 203, 155, 34, 191, 119, 110, 154, 62, 71, 81, 169, 190, 94, 3, 131, 188, 46, 198, 14, 63, 19, 190, 78, 190, 248, 90, 226, 60, 7, 164, 238, 61, 131, 29, 226, 62, 125, 143, 84, 188, 237, 175, 36, 62, 56, 108, 194, 188, 229, 47, 75, 60, 210, 200, 95, 189, 60, 244, 124, 189, 172, 101, 222, 61, 19, 68, 62, 62, 207, 118, 184, 62, 207, 72, 70, 190, 249, 31, 203, 61, 212, 158, 114, 62, 151, 200, 107, 190, 16, 134, 64, 62, 21, 172, 13, 191, 203, 156, 90, 62, 106, 110, 53, 190, 40, 64, 31, 62, 157, 2, 154, 62, 244, 163, 208, 62, 187, 4, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 83, 129, 62, 95, 166, 15, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {14, 107, 96, 63, 13, 139, 178, 63, 234, 218, 61, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {188, 136, 149, 192, 197, 99, 31, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0067/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}