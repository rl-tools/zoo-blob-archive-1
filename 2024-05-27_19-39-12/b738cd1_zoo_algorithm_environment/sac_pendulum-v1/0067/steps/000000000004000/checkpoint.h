// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 55, 48, 63, 93, 145, 179, 190, 128, 56, 144, 190, 22, 174, 235, 62, 22, 172, 8, 191, 169, 172, 4, 191, 180, 213, 191, 62, 143, 54, 72, 191, 126, 29, 141, 190, 159, 95, 118, 190, 32, 170, 179, 190, 166, 228, 62, 191, 151, 34, 21, 189, 197, 107, 25, 191, 44, 216, 250, 62, 56, 237, 4, 63, 81, 144, 113, 191, 170, 36, 175, 189, 109, 236, 185, 62, 19, 60, 23, 191, 47, 251, 35, 190, 189, 15, 20, 63, 191, 104, 140, 63, 196, 5, 189, 62, 252, 193, 240, 190, 155, 14, 41, 191, 79, 84, 221, 189, 74, 160, 138, 60, 210, 213, 237, 188, 59, 167, 243, 62, 174, 27, 6, 63, 123, 94, 35, 191, 176, 132, 141, 190, 203, 86, 140, 62, 12, 53, 85, 63, 120, 27, 164, 190, 162, 43, 24, 62, 25, 45, 250, 190, 21, 54, 91, 62, 213, 101, 15, 189, 58, 93, 93, 189, 130, 250, 175, 190, 95, 134, 23, 191, 246, 133, 202, 61, 74, 255, 56, 191, 187, 172, 147, 190, 60, 218, 166, 190, 34, 202, 69, 63, 130, 77, 217, 62, 226, 30, 34, 191, 153, 36, 113, 190, 200, 133, 58, 191, 161, 19, 94, 191, 84, 92, 255, 187, 50, 193, 211, 190, 174, 112, 25, 191, 11, 246, 145, 62, 55, 240, 246, 61, 61, 176, 250, 62, 170, 253, 118, 190, 26, 185, 9, 61, 67, 48, 53, 191, 67, 232, 239, 62, 139, 227, 13, 63, 161, 89, 61, 191, 85, 117, 38, 190, 183, 21, 225, 189, 180, 138, 15, 63, 135, 21, 224, 61, 244, 228, 20, 63, 27, 231, 36, 191, 78, 70, 239, 189, 251, 125, 52, 190, 178, 123, 25, 190, 206, 29, 131, 190, 100, 145, 189, 62, 195, 127, 7, 188, 97, 201, 13, 191, 80, 93, 151, 61, 3, 118, 201, 62, 21, 177, 179, 190, 251, 30, 59, 63, 62, 245, 109, 63, 251, 254, 229, 62, 150, 227, 153, 189, 160, 34, 150, 190, 37, 136, 2, 191, 82, 163, 200, 61, 173, 10, 11, 63, 150, 41, 203, 62, 121, 45, 137, 62, 179, 114, 205, 190, 189, 129, 5, 191, 28, 112, 81, 190, 39, 127, 163, 61, 126, 162, 35, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 223, 39, 191, 60, 6, 244, 189, 140, 178, 104, 190, 6, 63, 66, 186, 148, 172, 252, 61, 124, 183, 210, 189, 2, 7, 93, 189, 220, 192, 83, 190, 77, 106, 29, 63, 117, 29, 6, 191, 48, 131, 207, 61, 111, 77, 47, 62, 2, 235, 118, 62, 223, 117, 33, 190, 103, 154, 205, 190, 75, 253, 229, 188, 254, 233, 48, 191, 15, 92, 174, 62, 246, 79, 192, 62, 46, 10, 37, 63, 129, 45, 133, 187, 231, 99, 15, 191, 176, 42, 46, 63, 125, 48, 59, 63, 219, 63, 42, 191, 125, 156, 0, 62, 119, 26, 128, 61, 202, 120, 153, 59, 237, 110, 164, 61, 90, 68, 239, 62, 116, 244, 33, 190, 40, 179, 139, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 104, 152, 189, 189, 21, 52, 190, 122, 39, 92, 190, 54, 252, 141, 61, 23, 30, 123, 190, 55, 202, 221, 190, 113, 12, 118, 190, 38, 113, 189, 62, 136, 139, 41, 190, 27, 156, 72, 62, 234, 189, 6, 190, 195, 59, 90, 190, 152, 44, 67, 61, 252, 69, 137, 61, 143, 136, 223, 59, 22, 60, 86, 189, 25, 69, 146, 61, 75, 196, 171, 61, 246, 41, 94, 189, 74, 163, 64, 62, 30, 127, 145, 189, 198, 37, 73, 190, 64, 121, 12, 189, 142, 128, 22, 62, 105, 120, 141, 61, 192, 163, 75, 188, 218, 95, 131, 187, 205, 55, 120, 62, 104, 116, 173, 60, 187, 218, 193, 189, 211, 209, 116, 189, 64, 214, 208, 62, 59, 14, 58, 61, 38, 34, 168, 62, 174, 135, 140, 62, 179, 189, 146, 190, 173, 111, 203, 61, 72, 180, 120, 62, 217, 64, 111, 62, 180, 217, 91, 190, 70, 245, 56, 62, 213, 154, 70, 190, 141, 76, 227, 61, 123, 209, 30, 189, 119, 90, 129, 62, 177, 250, 96, 62, 241, 224, 240, 190, 172, 252, 90, 62, 53, 44, 66, 190, 49, 70, 39, 61, 137, 32, 197, 62, 126, 127, 222, 57, 142, 69, 142, 190, 128, 2, 189, 190, 34, 198, 200, 189, 153, 26, 76, 62, 135, 40, 253, 189, 135, 98, 161, 62, 152, 151, 13, 60, 185, 168, 142, 190, 73, 36, 139, 190, 25, 115, 139, 61, 250, 146, 152, 62, 30, 154, 35, 190, 223, 154, 185, 60, 227, 51, 66, 62, 44, 38, 90, 190, 35, 26, 112, 60, 253, 25, 207, 189, 10, 47, 70, 62, 68, 68, 140, 62, 78, 202, 85, 190, 53, 12, 227, 60, 169, 120, 193, 61, 87, 240, 108, 62, 160, 212, 67, 62, 129, 163, 137, 62, 126, 250, 17, 190, 103, 70, 153, 190, 204, 43, 14, 187, 237, 49, 129, 189, 225, 145, 136, 189, 163, 174, 141, 61, 112, 207, 159, 189, 108, 113, 70, 61, 137, 221, 93, 190, 10, 174, 237, 188, 24, 100, 130, 62, 95, 115, 171, 189, 211, 167, 166, 61, 232, 211, 70, 62, 114, 186, 133, 60, 12, 178, 139, 189, 219, 137, 20, 62, 234, 235, 232, 188, 48, 20, 77, 190, 227, 8, 250, 188, 89, 140, 43, 189, 58, 78, 35, 61, 192, 96, 184, 189, 139, 3, 206, 62, 91, 79, 223, 61, 82, 31, 107, 62, 227, 160, 241, 190, 118, 57, 207, 61, 46, 57, 91, 190, 171, 210, 142, 61, 174, 88, 136, 62, 36, 142, 160, 62, 196, 127, 131, 61, 41, 174, 8, 189, 103, 60, 159, 62, 51, 202, 128, 189, 81, 244, 52, 190, 190, 244, 168, 62, 100, 244, 151, 61, 89, 218, 204, 188, 235, 54, 33, 190, 8, 121, 34, 190, 131, 1, 189, 188, 9, 243, 7, 190, 245, 45, 117, 61, 75, 43, 25, 62, 60, 1, 176, 190, 30, 37, 113, 189, 33, 189, 54, 188, 231, 128, 31, 62, 170, 192, 210, 61, 31, 166, 153, 60, 159, 185, 224, 61, 88, 231, 178, 61, 134, 108, 190, 60, 183, 128, 30, 62, 90, 186, 48, 62, 218, 218, 100, 62, 138, 79, 33, 190, 190, 79, 167, 61, 205, 84, 49, 61, 58, 226, 71, 62, 139, 210, 9, 62, 39, 137, 60, 188, 89, 162, 225, 189, 101, 135, 113, 190, 27, 51, 48, 62, 94, 228, 3, 190, 52, 172, 181, 61, 236, 188, 79, 189, 82, 156, 208, 189, 130, 150, 42, 60, 116, 34, 176, 190, 201, 235, 43, 62, 34, 233, 255, 61, 244, 150, 180, 61, 191, 185, 189, 61, 123, 62, 236, 60, 243, 61, 199, 60, 203, 173, 52, 190, 248, 243, 172, 56, 19, 217, 51, 62, 223, 105, 76, 190, 44, 92, 3, 190, 175, 166, 28, 189, 16, 236, 10, 190, 59, 167, 98, 61, 201, 27, 147, 190, 122, 85, 244, 190, 114, 195, 76, 190, 159, 246, 183, 61, 198, 213, 111, 190, 11, 169, 172, 189, 38, 20, 176, 61, 100, 72, 236, 189, 72, 148, 194, 189, 109, 239, 249, 189, 160, 185, 108, 62, 75, 12, 174, 188, 69, 249, 20, 189, 223, 90, 171, 188, 225, 10, 8, 61, 143, 107, 129, 62, 52, 132, 171, 61, 107, 210, 137, 190, 149, 98, 142, 61, 105, 119, 186, 62, 193, 240, 77, 190, 240, 88, 0, 190, 90, 208, 132, 190, 0, 88, 176, 62, 72, 205, 178, 60, 45, 250, 195, 188, 177, 118, 133, 190, 202, 196, 115, 62, 202, 40, 50, 62, 209, 186, 195, 189, 100, 132, 146, 189, 125, 181, 18, 61, 103, 128, 10, 190, 97, 50, 29, 62, 80, 186, 51, 189, 51, 112, 138, 61, 33, 107, 148, 190, 83, 137, 108, 62, 249, 0, 132, 189, 249, 23, 232, 189, 244, 170, 160, 189, 153, 74, 131, 61, 75, 68, 47, 62, 239, 76, 24, 62, 226, 102, 131, 60, 239, 207, 193, 190, 32, 125, 44, 190, 169, 139, 250, 189, 132, 154, 74, 62, 143, 137, 4, 62, 182, 151, 180, 189, 42, 204, 58, 61, 246, 241, 42, 62, 178, 243, 125, 189, 171, 43, 229, 189, 118, 90, 229, 188, 68, 212, 197, 189, 205, 0, 9, 61, 212, 93, 46, 189, 130, 137, 244, 61, 35, 176, 5, 189, 27, 102, 198, 189, 194, 153, 16, 60, 61, 252, 30, 61, 39, 242, 47, 62, 132, 22, 228, 61, 35, 144, 210, 61, 166, 12, 255, 189, 9, 6, 70, 62, 9, 116, 27, 190, 69, 57, 11, 61, 1, 93, 145, 62, 210, 53, 140, 62, 210, 136, 225, 188, 104, 107, 151, 61, 219, 30, 81, 61, 57, 158, 98, 190, 223, 230, 4, 60, 73, 159, 149, 62, 105, 188, 199, 188, 215, 27, 26, 190, 93, 142, 144, 190, 13, 65, 41, 190, 98, 71, 14, 62, 116, 71, 31, 189, 194, 220, 35, 61, 21, 178, 57, 62, 49, 180, 99, 190, 37, 130, 245, 189, 112, 142, 39, 61, 189, 5, 72, 189, 236, 221, 195, 61, 79, 104, 205, 188, 67, 247, 39, 61, 125, 140, 156, 189, 165, 88, 40, 61, 47, 109, 150, 62, 161, 228, 22, 188, 142, 10, 74, 188, 202, 131, 190, 190, 126, 86, 136, 62, 22, 177, 69, 188, 59, 21, 166, 189, 116, 126, 83, 189, 83, 251, 153, 189, 193, 16, 16, 190, 34, 138, 72, 189, 115, 135, 16, 62, 86, 97, 226, 189, 184, 25, 177, 62, 82, 34, 211, 188, 6, 85, 216, 190, 6, 32, 241, 61, 58, 215, 167, 188, 53, 197, 5, 189, 82, 15, 38, 187, 248, 115, 208, 61, 72, 100, 58, 190, 181, 199, 121, 190, 164, 106, 186, 190, 136, 21, 30, 61, 232, 219, 131, 190, 175, 35, 210, 189, 159, 13, 101, 190, 193, 195, 149, 60, 94, 181, 244, 189, 56, 154, 238, 190, 233, 29, 189, 61, 76, 254, 247, 190, 241, 10, 129, 190, 250, 66, 180, 60, 10, 198, 111, 190, 65, 187, 159, 62, 0, 3, 125, 190, 31, 32, 78, 190, 23, 41, 57, 190, 70, 114, 214, 189, 135, 253, 185, 190, 160, 22, 211, 59, 240, 20, 80, 191, 210, 71, 73, 190, 182, 101, 103, 62, 81, 241, 2, 188, 99, 146, 17, 61, 24, 206, 15, 190, 241, 121, 141, 188, 175, 134, 86, 189, 221, 60, 133, 62, 98, 58, 158, 190, 184, 197, 140, 190, 208, 14, 156, 190, 226, 136, 102, 61, 118, 168, 154, 188, 129, 85, 50, 190, 122, 211, 189, 190, 129, 215, 144, 62, 181, 76, 128, 60, 236, 60, 54, 190, 121, 34, 186, 190, 5, 244, 53, 62, 3, 82, 16, 190, 129, 136, 208, 190, 226, 151, 138, 60, 143, 162, 179, 62, 118, 21, 18, 190, 98, 0, 38, 62, 6, 245, 232, 189, 249, 185, 36, 188, 241, 63, 103, 190, 61, 248, 227, 189, 5, 185, 143, 62, 116, 142, 5, 190, 61, 137, 213, 189, 195, 55, 52, 61, 25, 133, 247, 60, 209, 19, 130, 62, 11, 145, 0, 62, 83, 79, 137, 190, 85, 15, 196, 189, 93, 68, 17, 62, 120, 77, 160, 188, 249, 47, 34, 189, 47, 137, 29, 190, 8, 103, 95, 62, 189, 70, 178, 189, 106, 57, 32, 189, 131, 75, 60, 190, 210, 20, 181, 62, 157, 7, 164, 188, 186, 68, 110, 189, 36, 191, 104, 190, 30, 145, 50, 62, 30, 102, 218, 189, 70, 82, 174, 190, 185, 106, 135, 189, 18, 67, 31, 61, 119, 59, 119, 60, 59, 42, 161, 189, 239, 85, 143, 60, 178, 176, 77, 61, 253, 155, 155, 189, 99, 103, 237, 189, 242, 249, 82, 62, 166, 55, 85, 188, 231, 234, 20, 190, 133, 111, 86, 190, 246, 153, 128, 187, 111, 140, 8, 62, 173, 104, 55, 62, 228, 82, 168, 190, 8, 254, 180, 189, 80, 9, 195, 61, 115, 44, 137, 189, 167, 246, 31, 190, 159, 149, 15, 61, 71, 4, 21, 62, 61, 128, 144, 188, 33, 15, 144, 189, 138, 106, 226, 188, 52, 38, 210, 61, 44, 158, 78, 187, 205, 91, 238, 61, 179, 142, 53, 61, 41, 217, 169, 189, 225, 186, 182, 60, 108, 221, 69, 62, 63, 30, 152, 61, 245, 177, 134, 189, 37, 62, 21, 62, 101, 33, 31, 61, 51, 157, 152, 189, 104, 61, 135, 60, 252, 82, 140, 188, 115, 78, 15, 62, 222, 114, 3, 62, 10, 41, 176, 189, 7, 169, 130, 189, 250, 171, 145, 189, 224, 202, 55, 190, 208, 10, 203, 186, 51, 32, 179, 189, 14, 211, 192, 61, 71, 111, 174, 190, 217, 17, 31, 190, 30, 201, 143, 61, 195, 149, 203, 61, 16, 61, 87, 188, 52, 218, 34, 189, 147, 67, 134, 57, 253, 84, 7, 190, 55, 162, 102, 61, 73, 133, 170, 59, 215, 41, 167, 189, 57, 139, 139, 189, 241, 99, 38, 61, 249, 250, 48, 61, 195, 23, 19, 190, 222, 101, 107, 61, 112, 65, 9, 190, 182, 35, 155, 61, 242, 110, 192, 186, 112, 116, 4, 62, 31, 187, 182, 188, 119, 70, 131, 61, 52, 21, 131, 60, 218, 38, 101, 189, 51, 188, 10, 62, 230, 123, 41, 190, 14, 132, 74, 188, 162, 197, 202, 189, 166, 153, 232, 61, 57, 154, 38, 190, 128, 104, 0, 189, 30, 104, 219, 189, 2, 42, 15, 190, 132, 33, 233, 189, 60, 89, 5, 62, 115, 113, 102, 61, 11, 149, 38, 188, 228, 129, 11, 190, 213, 235, 26, 190, 118, 177, 116, 189, 73, 207, 7, 61, 23, 241, 243, 189, 187, 40, 140, 61, 44, 42, 238, 61, 126, 12, 79, 61, 238, 221, 165, 189, 41, 213, 226, 190, 19, 40, 232, 189, 216, 62, 170, 189, 31, 167, 13, 61, 111, 203, 125, 62, 224, 67, 85, 190, 151, 171, 203, 61, 138, 209, 53, 190, 223, 152, 155, 190, 13, 135, 253, 189, 67, 119, 35, 189, 14, 132, 95, 191, 193, 12, 139, 62, 175, 156, 148, 62, 211, 133, 255, 189, 39, 207, 217, 60, 111, 42, 121, 190, 15, 105, 120, 62, 181, 133, 164, 61, 222, 30, 14, 61, 39, 95, 6, 62, 44, 121, 141, 188, 131, 195, 134, 60, 52, 211, 179, 61, 71, 29, 36, 62, 175, 113, 11, 190, 54, 155, 101, 189, 103, 70, 22, 189, 51, 254, 47, 190, 224, 108, 93, 190, 217, 37, 199, 190, 29, 67, 254, 61, 225, 54, 140, 188, 225, 142, 194, 190, 126, 84, 93, 61, 168, 24, 194, 61, 243, 85, 106, 190, 110, 98, 215, 188, 7, 96, 153, 189, 237, 216, 73, 188, 212, 52, 93, 61, 66, 86, 147, 60, 73, 2, 16, 62, 201, 225, 154, 190, 0, 12, 156, 189, 49, 54, 30, 190, 200, 147, 9, 62, 43, 186, 77, 62, 113, 199, 40, 62, 213, 83, 122, 190, 151, 120, 31, 62, 197, 212, 181, 62, 166, 177, 23, 61, 146, 54, 12, 190, 209, 168, 122, 59, 237, 100, 13, 62, 234, 159, 135, 62, 93, 166, 74, 189, 142, 201, 1, 190, 90, 122, 97, 62, 83, 215, 3, 60, 180, 87, 1, 190, 134, 138, 209, 189, 83, 142, 140, 190, 128, 87, 181, 61, 169, 28, 193, 190, 133, 229, 95, 189, 154, 97, 108, 189, 228, 182, 76, 189, 100, 165, 116, 189, 132, 135, 28, 189, 235, 144, 87, 190, 126, 193, 132, 189, 78, 108, 68, 61, 171, 35, 0, 191, 239, 25, 8, 62, 18, 118, 252, 61, 32, 184, 184, 188, 233, 190, 76, 62, 237, 91, 75, 62, 111, 211, 21, 189, 76, 172, 29, 60, 195, 119, 9, 61, 252, 3, 168, 190, 36, 51, 29, 62, 75, 195, 222, 189, 234, 123, 224, 189, 220, 248, 251, 189, 14, 141, 235, 189, 159, 212, 77, 61, 35, 90, 8, 62, 201, 179, 109, 190, 172, 54, 52, 189, 205, 132, 44, 62, 158, 198, 51, 189, 128, 144, 32, 190, 227, 209, 234, 60, 84, 102, 3, 190, 158, 51, 53, 58, 52, 81, 106, 189, 4, 158, 53, 61, 73, 71, 149, 189, 137, 182, 46, 60, 39, 237, 226, 188, 39, 12, 116, 61, 120, 23, 5, 62, 24, 243, 36, 190, 149, 203, 56, 190, 142, 78, 157, 189, 138, 9, 250, 189, 141, 50, 155, 61, 140, 75, 6, 190, 152, 9, 101, 187, 198, 246, 233, 56, 209, 102, 204, 61, 8, 190, 69, 189, 141, 184, 117, 61, 27, 78, 153, 189, 96, 221, 37, 190, 124, 222, 148, 58, 216, 157, 27, 61, 155, 186, 70, 60, 127, 158, 12, 61, 134, 45, 96, 186, 227, 250, 192, 190, 62, 176, 156, 190, 76, 38, 205, 190, 50, 182, 156, 62, 172, 102, 225, 190, 155, 125, 172, 190, 11, 173, 24, 190, 228, 111, 21, 62, 140, 192, 99, 189, 109, 11, 121, 189, 113, 185, 57, 190, 35, 233, 96, 60, 13, 156, 119, 190, 48, 121, 43, 189, 143, 131, 154, 61, 223, 111, 225, 190, 36, 65, 13, 190, 59, 17, 90, 190, 213, 6, 173, 188, 113, 238, 39, 62, 101, 11, 101, 62, 11, 171, 53, 190, 80, 19, 76, 61, 94, 204, 176, 62, 229, 160, 57, 190, 61, 7, 103, 190, 51, 61, 119, 190, 26, 9, 48, 62, 52, 132, 72, 62, 131, 175, 33, 61, 111, 163, 88, 190, 169, 123, 199, 62, 176, 46, 224, 189, 60, 91, 255, 189, 165, 78, 81, 190, 68, 214, 34, 62, 97, 38, 34, 190, 89, 255, 122, 190, 184, 240, 119, 190, 136, 79, 128, 62, 7, 112, 137, 190, 138, 237, 178, 188, 253, 74, 30, 190, 149, 187, 182, 189, 27, 221, 147, 190, 184, 106, 134, 189, 30, 95, 29, 62, 170, 242, 140, 189, 169, 177, 5, 62, 155, 196, 165, 61, 132, 188, 103, 59, 17, 253, 131, 188, 91, 191, 194, 61, 150, 139, 39, 190, 162, 45, 197, 61, 27, 93, 112, 62, 160, 111, 49, 190, 102, 30, 54, 61, 83, 92, 127, 61, 238, 72, 209, 60, 253, 96, 25, 62, 170, 130, 34, 61, 11, 40, 105, 190, 8, 145, 74, 62, 156, 5, 191, 189, 83, 150, 80, 62, 216, 234, 79, 190, 190, 228, 122, 58, 157, 160, 116, 189, 158, 62, 23, 62, 242, 144, 158, 61, 126, 53, 55, 190, 61, 252, 75, 61, 56, 167, 100, 62, 72, 216, 190, 186, 177, 209, 242, 61, 32, 225, 38, 62, 241, 21, 137, 188, 112, 144, 47, 62, 26, 181, 194, 189, 162, 181, 29, 61, 29, 225, 252, 189, 161, 61, 27, 190, 115, 232, 62, 62, 233, 80, 117, 62, 254, 238, 52, 190, 146, 218, 186, 189, 36, 65, 181, 62, 28, 82, 130, 61, 235, 255, 131, 62, 65, 123, 74, 62, 200, 60, 154, 188, 12, 76, 93, 62, 230, 62, 104, 61, 73, 147, 51, 62, 126, 98, 127, 188, 146, 168, 97, 189, 247, 158, 49, 190, 169, 245, 24, 188, 95, 85, 37, 191, 220, 6, 168, 61, 222, 211, 75, 61, 231, 74, 4, 190, 225, 212, 233, 190, 132, 73, 66, 62, 120, 114, 81, 190, 95, 34, 108, 190, 58, 114, 247, 61, 208, 229, 207, 61, 252, 113, 60, 190, 116, 151, 29, 191, 114, 132, 57, 62, 13, 165, 70, 190, 99, 62, 14, 62, 228, 147, 108, 61, 62, 39, 55, 189, 23, 228, 91, 188, 185, 131, 206, 189, 77, 23, 220, 61, 135, 249, 3, 190, 176, 178, 66, 61, 223, 137, 81, 189, 91, 234, 10, 62, 210, 151, 169, 190, 110, 18, 13, 191, 255, 141, 109, 62, 20, 185, 141, 189, 252, 212, 156, 190, 201, 48, 156, 62, 250, 222, 166, 62, 126, 62, 142, 62, 246, 171, 54, 190, 243, 70, 193, 62, 146, 224, 35, 62, 78, 212, 113, 62, 171, 79, 201, 190, 133, 184, 54, 62, 3, 22, 108, 190, 58, 73, 249, 61, 13, 55, 135, 189, 37, 115, 70, 62, 184, 196, 193, 60, 23, 229, 163, 190, 93, 237, 137, 62, 160, 200, 103, 189, 220, 86, 16, 61, 12, 113, 68, 62, 199, 106, 67, 190, 100, 17, 186, 190, 217, 101, 144, 189, 53, 6, 10, 62, 43, 193, 18, 62, 254, 0, 88, 190, 206, 151, 149, 62, 127, 131, 100, 62, 13, 175, 209, 190, 181, 52, 162, 190, 194, 217, 40, 62, 226, 72, 85, 62, 15, 127, 39, 190, 228, 65, 16, 188, 40, 198, 184, 61, 108, 246, 64, 61, 28, 82, 8, 189, 208, 156, 206, 61, 84, 143, 195, 189, 13, 187, 171, 188, 106, 149, 112, 62, 187, 32, 103, 189, 226, 38, 173, 189, 56, 160, 10, 62, 194, 47, 34, 189, 192, 188, 100, 61, 197, 237, 148, 61, 126, 26, 95, 190, 146, 221, 56, 62, 235, 192, 160, 61, 35, 142, 237, 189, 249, 217, 161, 189, 12, 253, 80, 61, 152, 135, 230, 61, 141, 11, 144, 61, 62, 31, 62, 61, 188, 91, 59, 62, 229, 179, 11, 62, 7, 217, 86, 59, 31, 98, 154, 61, 164, 145, 101, 62, 124, 76, 220, 61, 229, 221, 10, 62, 123, 209, 66, 189, 13, 177, 137, 190, 110, 229, 115, 190, 171, 82, 200, 189, 247, 149, 189, 190, 30, 11, 192, 61, 240, 64, 109, 191, 77, 210, 150, 190, 67, 223, 27, 190, 229, 35, 167, 189, 150, 141, 25, 62, 150, 223, 87, 190, 165, 179, 0, 62, 100, 167, 117, 58, 151, 37, 142, 189, 85, 133, 132, 190, 61, 95, 86, 62, 164, 7, 134, 191, 220, 203, 60, 190, 254, 17, 4, 62, 114, 91, 24, 190, 94, 81, 131, 62, 89, 153, 4, 61, 9, 235, 196, 190, 21, 229, 41, 62, 153, 146, 73, 62, 151, 179, 7, 61, 207, 71, 50, 190, 232, 51, 98, 190, 247, 165, 2, 62, 176, 194, 157, 189, 33, 4, 124, 190, 206, 228, 52, 190, 162, 53, 134, 62, 245, 209, 235, 189, 7, 46, 158, 60, 76, 31, 216, 190, 47, 9, 35, 189, 231, 35, 22, 61, 242, 46, 215, 189, 123, 239, 255, 61, 67, 38, 49, 189, 23, 231, 31, 191, 32, 208, 155, 61, 155, 176, 175, 61, 244, 49, 8, 62, 10, 176, 107, 61, 40, 59, 158, 189, 199, 190, 141, 188, 145, 93, 213, 189, 89, 173, 91, 60, 193, 102, 189, 190, 147, 40, 201, 61, 133, 14, 128, 62, 128, 98, 244, 189, 8, 74, 110, 189, 186, 150, 52, 62, 233, 154, 156, 62, 14, 10, 187, 60, 2, 153, 69, 62, 52, 94, 38, 62, 53, 72, 134, 61, 250, 156, 33, 190, 24, 58, 117, 62, 235, 44, 29, 190, 163, 3, 106, 190, 7, 239, 95, 62, 178, 83, 20, 62, 9, 80, 153, 62, 251, 122, 200, 189, 36, 134, 187, 62, 80, 167, 139, 61, 135, 214, 26, 62, 188, 147, 36, 62, 155, 140, 37, 61, 22, 164, 178, 61, 124, 109, 233, 188, 254, 31, 29, 190, 141, 33, 102, 62, 77, 225, 202, 189, 174, 161, 25, 189, 118, 54, 95, 62, 1, 29, 85, 62, 65, 200, 178, 60, 69, 154, 120, 61, 79, 3, 146, 190, 112, 80, 128, 62, 36, 73, 214, 62, 145, 68, 145, 187, 247, 24, 146, 189, 196, 219, 144, 61, 83, 120, 149, 61, 4, 120, 103, 189, 151, 44, 225, 188, 246, 231, 241, 61, 159, 57, 202, 189, 209, 111, 102, 62, 104, 92, 115, 188, 109, 81, 173, 190, 247, 95, 127, 190, 1, 36, 62, 190, 37, 245, 231, 60, 224, 136, 174, 190, 244, 11, 208, 189, 22, 145, 54, 190, 240, 171, 40, 61, 35, 104, 66, 190, 191, 161, 225, 189, 102, 24, 249, 189, 76, 95, 17, 61, 242, 255, 11, 190, 76, 224, 166, 190, 171, 113, 40, 62, 167, 234, 88, 190, 162, 121, 94, 190, 86, 217, 37, 61, 182, 19, 25, 190, 141, 219, 65, 62, 129, 195, 140, 62, 175, 92, 176, 190, 243, 213, 36, 62, 108, 127, 184, 62, 184, 160, 43, 61, 225, 219, 165, 189, 196, 83, 60, 190, 78, 200, 133, 62, 25, 72, 95, 62, 228, 146, 145, 56, 89, 220, 174, 189, 226, 129, 10, 61, 13, 13, 195, 61, 99, 25, 111, 188, 157, 65, 228, 189, 130, 197, 14, 189, 118, 113, 163, 189, 156, 78, 10, 61, 185, 248, 45, 62, 253, 71, 143, 189, 177, 160, 180, 61, 196, 238, 28, 190, 169, 71, 13, 190, 124, 0, 1, 61, 162, 210, 117, 189, 209, 176, 198, 61, 6, 128, 53, 190, 181, 112, 28, 189, 255, 119, 56, 188, 27, 72, 249, 61, 235, 41, 150, 189, 214, 104, 14, 61, 226, 204, 144, 187, 91, 152, 12, 60, 155, 156, 71, 189, 6, 31, 79, 59, 142, 83, 46, 190, 210, 145, 109, 61, 103, 188, 143, 61, 215, 12, 140, 59, 146, 118, 246, 189, 79, 214, 186, 61, 28, 164, 5, 60, 13, 52, 57, 190, 52, 92, 188, 189, 129, 144, 38, 189, 26, 82, 62, 61, 99, 6, 0, 191, 17, 167, 74, 61, 174, 178, 245, 190, 210, 33, 186, 190, 124, 40, 60, 190, 0, 86, 85, 62, 179, 119, 63, 190, 196, 222, 144, 190, 37, 140, 44, 190, 64, 213, 9, 190, 75, 129, 113, 59, 79, 67, 6, 191, 116, 37, 229, 61, 74, 160, 149, 61, 196, 52, 210, 61, 114, 108, 127, 62, 34, 16, 81, 185, 200, 237, 167, 190, 102, 65, 8, 62, 150, 92, 89, 62, 249, 175, 69, 191, 113, 149, 152, 189, 24, 243, 26, 190, 209, 8, 65, 62, 122, 66, 83, 190, 60, 131, 36, 191, 154, 111, 88, 60, 171, 150, 6, 190, 53, 255, 32, 190, 163, 7, 9, 190, 153, 136, 8, 62, 170, 128, 142, 62, 99, 19, 128, 61, 193, 237, 237, 188, 162, 243, 227, 188, 131, 63, 70, 62, 83, 29, 118, 188, 123, 139, 185, 189, 7, 101, 77, 62, 113, 167, 40, 62, 179, 212, 60, 190, 21, 235, 191, 189, 6, 166, 15, 62, 113, 114, 71, 61, 238, 228, 72, 61, 82, 26, 62, 62, 127, 233, 17, 61, 51, 111, 46, 190, 248, 44, 159, 61, 150, 193, 241, 61, 181, 126, 121, 62, 2, 30, 11, 189, 177, 35, 165, 187, 13, 93, 243, 189, 213, 51, 38, 61, 245, 163, 20, 188, 239, 115, 91, 188, 192, 141, 152, 189, 98, 164, 41, 189, 219, 106, 16, 62, 39, 245, 164, 61, 11, 198, 84, 61, 15, 220, 35, 62, 37, 187, 221, 189, 46, 212, 69, 190, 212, 173, 37, 62, 248, 123, 136, 62, 181, 189, 48, 62, 94, 155, 32, 190, 80, 217, 36, 62, 234, 23, 30, 190, 84, 226, 15, 62, 13, 101, 238, 61, 68, 226, 74, 62, 57, 164, 186, 187, 5, 98, 206, 61, 96, 9, 59, 62, 140, 221, 112, 190, 254, 9, 138, 189, 225, 219, 199, 61, 136, 153, 33, 62, 254, 202, 134, 189, 181, 75, 249, 189, 44, 208, 142, 189, 125, 172, 53, 62, 224, 66, 97, 190, 39, 111, 116, 61, 108, 244, 20, 61, 114, 161, 40, 190, 207, 42, 150, 188, 139, 55, 179, 189, 25, 147, 8, 62, 219, 132, 193, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 3, 26, 61, 99, 150, 194, 61, 37, 240, 181, 61, 197, 61, 60, 62, 40, 24, 142, 188, 92, 18, 134, 61, 87, 221, 83, 190, 133, 110, 143, 62, 210, 247, 57, 61, 255, 62, 157, 189, 107, 22, 93, 186, 0, 16, 122, 62, 248, 164, 139, 190, 144, 118, 17, 62, 39, 104, 50, 189, 72, 238, 220, 61, 109, 159, 80, 61, 119, 222, 149, 189, 172, 151, 120, 62, 83, 216, 154, 61, 53, 208, 153, 189, 163, 248, 134, 62, 38, 94, 123, 188, 152, 201, 194, 61, 103, 217, 227, 61, 219, 175, 214, 188, 227, 168, 18, 189, 40, 33, 129, 62, 22, 192, 172, 189, 250, 115, 23, 62, 0, 174, 80, 190, 227, 237, 82, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 65, 191, 190, 8, 89, 43, 63, 116, 216, 131, 61, 12, 5, 0, 62, 132, 63, 75, 62, 240, 245, 75, 190, 154, 202, 41, 189, 204, 127, 172, 61, 44, 44, 42, 191, 9, 170, 37, 191, 96, 158, 133, 190, 101, 208, 75, 190, 11, 32, 221, 189, 113, 38, 248, 189, 10, 195, 183, 190, 203, 237, 47, 190, 232, 62, 159, 187, 194, 88, 220, 187, 39, 100, 225, 190, 214, 226, 53, 190, 194, 195, 48, 62, 192, 151, 7, 63, 26, 121, 172, 62, 169, 226, 98, 190, 243, 187, 34, 191, 147, 250, 168, 190, 132, 187, 105, 190, 141, 242, 150, 190, 75, 237, 215, 189, 10, 114, 57, 63, 196, 56, 152, 189, 183, 47, 53, 62, 197, 166, 88, 62, 212, 200, 96, 188, 7, 181, 162, 190, 26, 86, 150, 60, 37, 84, 17, 190, 244, 208, 179, 188, 171, 147, 140, 62, 91, 206, 124, 189, 251, 165, 133, 62, 178, 144, 25, 62, 12, 248, 39, 62, 102, 26, 2, 189, 242, 86, 53, 62, 56, 108, 194, 188, 250, 45, 107, 186, 176, 154, 164, 189, 227, 205, 16, 190, 172, 101, 222, 61, 91, 237, 215, 60, 249, 153, 216, 61, 155, 182, 63, 190, 136, 30, 229, 189, 99, 163, 27, 62, 241, 182, 46, 190, 186, 122, 25, 190, 47, 177, 153, 190, 146, 33, 47, 62, 78, 123, 239, 189, 58, 220, 199, 61, 119, 37, 205, 61, 44, 224, 64, 62, 227, 248, 26, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 158, 42, 62, 249, 86, 170, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {88, 99, 150, 191, 12, 250, 217, 191, 97, 93, 138, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {232, 169, 200, 63, 40, 73, 23, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0067/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}