// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {207, 231, 25, 63, 94, 168, 228, 189, 98, 49, 195, 190, 36, 100, 8, 63, 164, 96, 191, 190, 14, 97, 228, 190, 222, 124, 1, 62, 247, 81, 19, 191, 125, 52, 121, 190, 68, 32, 145, 190, 124, 137, 129, 60, 185, 231, 4, 191, 14, 241, 78, 189, 136, 113, 49, 191, 232, 58, 36, 62, 65, 71, 166, 62, 192, 200, 56, 191, 213, 119, 70, 190, 1, 76, 186, 62, 170, 3, 167, 190, 9, 74, 16, 190, 10, 198, 235, 62, 222, 195, 25, 63, 170, 189, 214, 62, 219, 167, 170, 190, 195, 197, 62, 191, 64, 180, 29, 190, 40, 31, 28, 61, 202, 111, 162, 189, 223, 232, 235, 62, 222, 237, 251, 62, 119, 248, 10, 191, 132, 159, 111, 190, 169, 179, 0, 63, 204, 45, 60, 63, 117, 64, 168, 190, 16, 167, 9, 62, 212, 131, 21, 191, 51, 16, 46, 61, 254, 236, 92, 62, 237, 23, 203, 189, 189, 76, 130, 190, 240, 150, 34, 191, 20, 191, 233, 62, 24, 144, 244, 190, 71, 167, 154, 190, 220, 169, 33, 191, 24, 188, 191, 62, 192, 25, 61, 62, 90, 179, 227, 190, 233, 104, 158, 190, 60, 10, 34, 191, 180, 234, 109, 191, 113, 103, 37, 190, 194, 126, 233, 190, 92, 200, 74, 191, 25, 166, 43, 62, 99, 85, 173, 60, 57, 205, 37, 63, 209, 174, 108, 190, 67, 9, 58, 62, 28, 216, 24, 191, 60, 236, 209, 62, 38, 180, 170, 62, 135, 49, 11, 191, 47, 177, 44, 190, 12, 157, 17, 190, 217, 133, 62, 63, 161, 60, 82, 62, 67, 22, 22, 63, 214, 165, 119, 190, 245, 187, 141, 188, 130, 90, 125, 190, 201, 159, 74, 190, 215, 55, 149, 190, 140, 169, 0, 63, 42, 28, 193, 189, 187, 68, 222, 190, 171, 248, 198, 62, 144, 1, 19, 62, 80, 46, 140, 190, 64, 157, 23, 63, 217, 99, 32, 63, 232, 23, 233, 62, 122, 219, 252, 187, 77, 197, 10, 188, 204, 21, 153, 190, 112, 168, 59, 189, 243, 232, 208, 62, 64, 89, 186, 62, 254, 160, 161, 62, 83, 228, 189, 190, 10, 119, 229, 190, 143, 163, 163, 190, 180, 63, 238, 62, 23, 8, 214, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {36, 77, 17, 191, 93, 83, 241, 189, 174, 179, 156, 190, 114, 224, 157, 61, 124, 51, 43, 62, 172, 135, 188, 61, 145, 217, 200, 61, 229, 51, 82, 190, 152, 214, 13, 63, 42, 36, 19, 191, 45, 146, 144, 62, 84, 185, 166, 188, 132, 201, 154, 62, 255, 163, 131, 190, 237, 107, 134, 190, 92, 100, 175, 60, 189, 166, 42, 191, 224, 44, 87, 62, 39, 111, 219, 62, 105, 215, 35, 63, 65, 249, 99, 190, 73, 163, 26, 191, 72, 47, 47, 63, 250, 101, 15, 63, 229, 7, 33, 191, 172, 28, 150, 61, 205, 86, 186, 189, 41, 78, 64, 189, 95, 18, 20, 62, 148, 177, 6, 63, 112, 249, 78, 190, 148, 34, 231, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 232, 80, 60, 100, 175, 1, 190, 139, 96, 178, 189, 19, 209, 182, 188, 98, 230, 1, 190, 193, 38, 72, 190, 133, 187, 5, 190, 234, 28, 140, 62, 22, 106, 47, 190, 131, 75, 73, 62, 181, 136, 201, 189, 244, 44, 29, 190, 47, 132, 247, 61, 125, 27, 204, 61, 239, 74, 130, 189, 1, 67, 141, 61, 45, 73, 173, 61, 6, 193, 96, 187, 220, 168, 134, 189, 40, 147, 65, 62, 240, 225, 116, 189, 221, 193, 207, 59, 34, 86, 6, 61, 1, 39, 167, 61, 75, 195, 208, 60, 226, 185, 25, 61, 161, 170, 98, 61, 246, 163, 28, 62, 97, 92, 121, 189, 34, 67, 20, 189, 186, 170, 143, 188, 77, 86, 188, 62, 2, 154, 137, 189, 163, 26, 14, 62, 175, 16, 30, 62, 21, 2, 21, 190, 168, 18, 170, 61, 198, 117, 0, 62, 138, 226, 171, 61, 71, 101, 132, 189, 91, 163, 134, 62, 68, 84, 81, 190, 14, 144, 70, 60, 111, 19, 33, 190, 28, 75, 142, 62, 61, 216, 107, 61, 204, 63, 137, 190, 180, 64, 249, 61, 241, 150, 13, 190, 97, 64, 56, 62, 60, 107, 198, 62, 229, 114, 137, 60, 231, 158, 96, 190, 165, 118, 65, 190, 160, 212, 20, 190, 210, 169, 74, 62, 41, 69, 23, 190, 234, 191, 27, 62, 199, 191, 31, 190, 96, 175, 69, 190, 24, 135, 34, 190, 148, 50, 3, 189, 39, 212, 5, 62, 168, 90, 155, 189, 133, 235, 20, 189, 77, 158, 137, 61, 164, 206, 90, 190, 91, 69, 181, 61, 99, 71, 64, 189, 46, 92, 4, 62, 221, 70, 16, 62, 101, 58, 60, 190, 190, 52, 232, 61, 118, 243, 15, 62, 136, 218, 172, 61, 78, 101, 34, 61, 206, 94, 145, 62, 202, 29, 67, 190, 9, 255, 29, 190, 65, 117, 126, 60, 230, 202, 31, 188, 149, 248, 112, 61, 122, 160, 239, 61, 192, 59, 75, 190, 209, 84, 22, 62, 160, 97, 161, 189, 140, 179, 241, 189, 29, 221, 168, 61, 91, 134, 192, 189, 204, 70, 153, 189, 131, 48, 169, 61, 144, 111, 9, 189, 28, 194, 226, 188, 218, 183, 161, 61, 107, 105, 210, 189, 156, 69, 24, 190, 199, 21, 131, 187, 51, 41, 250, 188, 231, 139, 72, 61, 170, 240, 177, 188, 201, 109, 212, 62, 181, 34, 44, 61, 89, 22, 88, 62, 133, 236, 152, 190, 108, 124, 28, 62, 156, 233, 70, 190, 157, 162, 214, 61, 110, 227, 122, 62, 16, 95, 177, 62, 57, 253, 158, 61, 229, 153, 252, 59, 105, 133, 132, 62, 58, 107, 10, 61, 77, 167, 24, 189, 31, 22, 190, 62, 142, 112, 186, 60, 252, 101, 71, 61, 146, 199, 221, 187, 232, 19, 150, 190, 128, 61, 132, 61, 79, 95, 160, 189, 151, 124, 68, 61, 141, 226, 254, 61, 49, 138, 111, 190, 217, 101, 213, 59, 187, 215, 219, 189, 176, 29, 39, 62, 136, 177, 235, 61, 223, 191, 40, 189, 117, 97, 58, 60, 141, 33, 78, 61, 56, 169, 14, 62, 135, 184, 45, 62, 242, 14, 178, 61, 22, 225, 232, 61, 81, 188, 132, 189, 140, 110, 237, 61, 229, 155, 40, 61, 104, 4, 226, 61, 218, 236, 161, 61, 45, 207, 174, 185, 169, 52, 17, 190, 133, 94, 167, 189, 89, 199, 24, 62, 133, 105, 135, 189, 167, 83, 55, 62, 64, 249, 37, 189, 208, 120, 11, 190, 146, 58, 147, 61, 127, 229, 77, 190, 63, 76, 248, 61, 19, 63, 152, 61, 18, 84, 0, 62, 184, 76, 15, 59, 33, 169, 252, 188, 206, 154, 135, 61, 91, 84, 165, 189, 137, 138, 103, 189, 42, 193, 224, 61, 128, 132, 23, 190, 219, 144, 146, 188, 125, 46, 99, 187, 85, 32, 39, 60, 42, 137, 65, 189, 205, 164, 44, 190, 154, 236, 150, 190, 23, 75, 14, 190, 119, 146, 123, 189, 162, 72, 89, 190, 33, 4, 33, 190, 70, 18, 36, 61, 218, 193, 201, 59, 192, 128, 151, 189, 59, 231, 178, 189, 42, 196, 41, 62, 135, 75, 161, 61, 51, 250, 115, 188, 172, 244, 218, 189, 153, 8, 234, 188, 110, 212, 159, 62, 194, 103, 166, 188, 44, 31, 194, 60, 118, 220, 14, 62, 239, 106, 76, 62, 44, 105, 134, 190, 58, 70, 157, 189, 186, 63, 46, 190, 174, 60, 52, 62, 52, 62, 135, 189, 224, 141, 19, 60, 174, 141, 105, 190, 140, 11, 108, 62, 202, 40, 50, 62, 209, 186, 195, 189, 100, 132, 146, 189, 125, 181, 18, 61, 110, 23, 0, 190, 99, 15, 163, 61, 34, 76, 52, 189, 58, 190, 0, 189, 172, 100, 220, 189, 149, 166, 63, 62, 117, 24, 129, 189, 207, 113, 1, 190, 198, 96, 184, 189, 153, 74, 131, 61, 75, 68, 47, 62, 12, 113, 34, 62, 226, 102, 131, 60, 18, 65, 58, 190, 81, 180, 212, 189, 162, 210, 207, 189, 125, 61, 36, 62, 143, 137, 4, 62, 115, 235, 134, 189, 175, 195, 16, 190, 246, 241, 42, 62, 178, 243, 125, 189, 171, 43, 229, 189, 168, 188, 2, 190, 68, 212, 197, 189, 174, 0, 216, 60, 212, 93, 46, 189, 130, 137, 244, 61, 80, 179, 148, 188, 215, 166, 201, 189, 251, 106, 217, 60, 31, 99, 195, 61, 242, 43, 60, 62, 82, 194, 133, 61, 111, 246, 160, 61, 140, 199, 253, 185, 234, 73, 104, 62, 22, 192, 20, 190, 114, 64, 37, 61, 13, 2, 137, 62, 152, 164, 156, 62, 240, 177, 34, 188, 213, 172, 228, 61, 77, 219, 52, 187, 148, 217, 29, 190, 54, 66, 220, 61, 17, 194, 158, 62, 59, 173, 178, 189, 55, 71, 155, 189, 172, 118, 31, 190, 156, 38, 167, 190, 253, 193, 70, 62, 246, 143, 163, 186, 168, 2, 190, 60, 28, 7, 38, 62, 154, 74, 35, 190, 171, 217, 137, 189, 193, 0, 143, 189, 18, 187, 50, 189, 18, 116, 207, 61, 120, 132, 219, 188, 201, 214, 176, 61, 181, 72, 177, 189, 249, 79, 124, 60, 180, 10, 33, 62, 36, 40, 2, 188, 188, 13, 32, 61, 18, 145, 219, 189, 47, 170, 20, 61, 183, 170, 204, 61, 201, 214, 220, 189, 206, 190, 28, 61, 204, 189, 54, 190, 103, 118, 192, 187, 151, 40, 152, 189, 70, 48, 41, 61, 175, 229, 19, 190, 87, 106, 68, 61, 139, 129, 46, 190, 191, 179, 31, 189, 215, 119, 159, 61, 86, 192, 53, 190, 193, 222, 158, 61, 92, 128, 175, 61, 118, 81, 16, 62, 13, 195, 221, 189, 137, 55, 237, 189, 65, 89, 15, 189, 223, 87, 105, 188, 160, 33, 36, 190, 224, 2, 82, 189, 143, 176, 88, 189, 54, 64, 202, 189, 35, 255, 84, 189, 64, 236, 129, 190, 162, 96, 11, 188, 132, 20, 134, 190, 129, 43, 139, 189, 54, 55, 165, 61, 130, 182, 45, 190, 68, 80, 67, 62, 108, 130, 123, 190, 65, 216, 72, 190, 55, 247, 119, 61, 14, 119, 161, 189, 149, 117, 73, 190, 135, 223, 161, 188, 176, 28, 188, 190, 2, 223, 113, 190, 73, 231, 76, 61, 112, 246, 255, 189, 27, 122, 22, 62, 50, 229, 102, 190, 43, 68, 248, 60, 42, 45, 244, 61, 40, 178, 131, 61, 144, 71, 132, 190, 236, 157, 222, 189, 232, 115, 166, 189, 159, 204, 223, 61, 29, 234, 238, 189, 92, 99, 178, 61, 125, 75, 128, 190, 37, 90, 141, 62, 123, 106, 133, 61, 165, 194, 41, 190, 101, 216, 95, 190, 104, 147, 201, 61, 248, 190, 46, 60, 150, 85, 94, 190, 14, 64, 199, 60, 10, 43, 113, 62, 237, 237, 255, 189, 145, 225, 64, 62, 250, 128, 37, 190, 157, 45, 52, 60, 89, 135, 25, 190, 125, 87, 187, 189, 66, 242, 101, 62, 45, 61, 83, 60, 33, 26, 192, 189, 247, 127, 12, 60, 157, 85, 69, 61, 233, 241, 86, 62, 130, 141, 30, 62, 25, 253, 55, 189, 105, 231, 102, 189, 44, 235, 185, 189, 148, 146, 127, 189, 56, 77, 203, 188, 86, 162, 255, 189, 57, 61, 202, 61, 129, 11, 42, 190, 156, 23, 50, 58, 4, 91, 28, 190, 124, 180, 161, 62, 74, 234, 28, 61, 80, 4, 181, 189, 8, 197, 38, 190, 210, 171, 140, 61, 48, 245, 116, 60, 23, 61, 107, 190, 183, 52, 212, 189, 133, 148, 84, 188, 27, 234, 205, 188, 132, 9, 133, 189, 86, 126, 202, 189, 1, 4, 11, 62, 76, 14, 221, 188, 204, 187, 233, 189, 62, 145, 22, 62, 3, 254, 200, 61, 164, 13, 28, 190, 177, 0, 174, 190, 234, 244, 4, 189, 104, 234, 19, 62, 203, 205, 72, 62, 123, 196, 11, 190, 105, 208, 33, 189, 60, 84, 104, 189, 45, 252, 255, 189, 96, 214, 32, 190, 59, 227, 166, 61, 254, 102, 171, 61, 22, 238, 242, 189, 63, 227, 200, 188, 62, 101, 37, 189, 60, 122, 144, 61, 219, 138, 242, 187, 73, 49, 218, 61, 123, 107, 137, 186, 189, 125, 183, 189, 89, 190, 126, 60, 160, 114, 42, 62, 152, 96, 60, 61, 71, 69, 135, 189, 145, 255, 237, 61, 101, 33, 31, 61, 144, 203, 168, 189, 15, 29, 121, 61, 81, 237, 30, 189, 152, 45, 251, 61, 69, 81, 243, 61, 10, 41, 176, 189, 49, 64, 201, 189, 156, 60, 222, 189, 135, 113, 73, 190, 16, 190, 34, 61, 131, 197, 174, 189, 39, 131, 129, 61, 177, 156, 21, 190, 125, 166, 1, 190, 146, 204, 49, 61, 111, 2, 226, 61, 115, 218, 249, 59, 31, 211, 36, 189, 252, 145, 197, 57, 6, 139, 1, 190, 171, 34, 58, 61, 133, 105, 47, 60, 215, 41, 167, 189, 57, 139, 139, 189, 241, 99, 38, 61, 249, 250, 48, 61, 195, 23, 19, 190, 222, 101, 107, 61, 112, 65, 9, 190, 182, 35, 155, 61, 242, 110, 192, 186, 112, 116, 4, 62, 31, 187, 182, 188, 119, 70, 131, 61, 52, 21, 131, 60, 218, 38, 101, 189, 51, 188, 10, 62, 230, 123, 41, 190, 14, 132, 74, 188, 162, 197, 202, 189, 166, 153, 232, 61, 57, 154, 38, 190, 128, 104, 0, 189, 30, 104, 219, 189, 2, 42, 15, 190, 132, 33, 233, 189, 60, 89, 5, 62, 115, 113, 102, 61, 11, 149, 38, 188, 228, 129, 11, 190, 213, 235, 26, 190, 118, 177, 116, 189, 73, 207, 7, 61, 23, 241, 243, 189, 82, 53, 48, 61, 233, 89, 226, 61, 79, 217, 156, 61, 4, 90, 1, 190, 40, 68, 230, 189, 51, 98, 129, 189, 52, 112, 232, 189, 149, 208, 32, 61, 169, 140, 38, 62, 228, 167, 108, 190, 181, 40, 98, 61, 217, 84, 172, 189, 66, 81, 139, 190, 232, 8, 206, 189, 100, 105, 57, 189, 145, 179, 172, 190, 127, 61, 59, 62, 191, 162, 26, 62, 237, 198, 109, 190, 192, 154, 183, 61, 126, 74, 152, 190, 60, 41, 223, 61, 221, 147, 108, 62, 26, 4, 20, 190, 94, 101, 198, 61, 222, 193, 219, 59, 121, 66, 155, 61, 80, 147, 131, 61, 86, 236, 241, 61, 214, 163, 140, 61, 79, 103, 34, 189, 226, 239, 51, 189, 134, 95, 202, 189, 116, 22, 126, 190, 53, 226, 168, 190, 156, 199, 50, 59, 234, 126, 245, 61, 202, 18, 73, 190, 204, 32, 30, 61, 37, 6, 23, 61, 239, 35, 143, 190, 69, 228, 179, 188, 255, 20, 77, 190, 168, 64, 215, 61, 25, 213, 8, 62, 121, 67, 168, 60, 7, 64, 157, 61, 213, 133, 71, 190, 146, 46, 152, 189, 178, 194, 165, 190, 2, 220, 168, 61, 248, 208, 96, 62, 219, 82, 65, 62, 167, 221, 170, 189, 75, 66, 79, 62, 92, 31, 93, 62, 200, 98, 227, 188, 28, 165, 6, 190, 56, 13, 145, 61, 27, 60, 147, 61, 239, 114, 28, 62, 103, 166, 118, 187, 150, 195, 16, 190, 108, 41, 65, 62, 83, 215, 3, 60, 48, 227, 250, 189, 164, 66, 187, 189, 86, 100, 16, 190, 218, 164, 47, 62, 64, 56, 4, 190, 166, 7, 204, 60, 41, 104, 218, 59, 117, 10, 210, 189, 196, 50, 37, 61, 135, 24, 39, 61, 101, 231, 210, 57, 212, 137, 128, 61, 78, 108, 68, 61, 66, 100, 30, 190, 241, 16, 27, 62, 18, 118, 252, 61, 201, 18, 165, 189, 159, 52, 18, 62, 183, 133, 253, 61, 135, 209, 3, 62, 196, 192, 30, 60, 13, 125, 143, 189, 181, 80, 1, 190, 36, 51, 29, 62, 58, 47, 221, 189, 89, 35, 160, 189, 229, 158, 52, 189, 152, 56, 70, 59, 38, 183, 183, 60, 66, 44, 12, 62, 129, 45, 69, 190, 172, 54, 52, 189, 205, 132, 44, 62, 158, 198, 51, 189, 128, 144, 32, 190, 227, 209, 234, 60, 84, 102, 3, 190, 158, 51, 53, 58, 52, 81, 106, 189, 4, 158, 53, 61, 73, 71, 149, 189, 137, 182, 46, 60, 39, 237, 226, 188, 39, 12, 116, 61, 120, 23, 5, 62, 24, 243, 36, 190, 149, 203, 56, 190, 142, 78, 157, 189, 138, 9, 250, 189, 141, 50, 155, 61, 140, 75, 6, 190, 152, 9, 101, 187, 198, 246, 233, 56, 209, 102, 204, 61, 8, 190, 69, 189, 141, 184, 117, 61, 27, 78, 153, 189, 96, 221, 37, 190, 124, 222, 148, 58, 216, 157, 27, 61, 155, 186, 70, 60, 127, 158, 12, 61, 134, 45, 96, 186, 126, 25, 173, 190, 162, 189, 147, 190, 23, 203, 96, 190, 182, 245, 99, 62, 133, 164, 100, 190, 214, 17, 217, 189, 62, 10, 224, 189, 224, 125, 81, 187, 130, 84, 166, 188, 174, 185, 236, 189, 17, 166, 115, 190, 74, 229, 195, 61, 134, 162, 41, 190, 204, 86, 105, 188, 20, 29, 162, 60, 104, 221, 118, 190, 220, 110, 26, 190, 229, 103, 134, 190, 217, 33, 44, 189, 122, 246, 82, 62, 117, 206, 13, 62, 21, 49, 244, 61, 131, 105, 250, 61, 182, 80, 40, 62, 217, 208, 119, 190, 83, 98, 72, 190, 146, 220, 56, 190, 90, 51, 135, 59, 60, 175, 242, 61, 193, 149, 200, 61, 91, 73, 57, 190, 124, 64, 197, 62, 67, 125, 42, 189, 197, 222, 194, 189, 159, 12, 201, 189, 246, 204, 204, 61, 194, 239, 123, 186, 108, 58, 227, 189, 102, 65, 64, 190, 235, 183, 54, 62, 112, 172, 95, 190, 60, 47, 42, 60, 121, 169, 35, 190, 217, 23, 106, 189, 65, 220, 89, 190, 194, 17, 1, 189, 29, 126, 227, 61, 23, 98, 210, 61, 110, 170, 27, 62, 96, 145, 143, 61, 55, 153, 136, 61, 156, 74, 223, 58, 75, 10, 248, 61, 207, 135, 169, 188, 122, 125, 94, 62, 145, 207, 193, 61, 104, 246, 76, 190, 126, 89, 148, 61, 94, 155, 212, 61, 199, 162, 70, 189, 185, 9, 194, 61, 122, 43, 23, 62, 4, 252, 67, 190, 4, 244, 64, 62, 37, 40, 166, 189, 191, 168, 70, 62, 249, 126, 59, 190, 226, 69, 57, 188, 192, 253, 222, 189, 232, 119, 87, 61, 78, 230, 42, 60, 48, 194, 244, 189, 49, 6, 178, 61, 145, 71, 253, 61, 4, 236, 64, 189, 44, 18, 224, 61, 59, 210, 171, 61, 119, 108, 235, 59, 228, 29, 10, 62, 201, 219, 15, 190, 187, 95, 226, 61, 217, 17, 146, 188, 172, 133, 150, 189, 154, 120, 6, 62, 191, 67, 11, 62, 113, 188, 96, 189, 129, 79, 193, 189, 193, 171, 131, 62, 186, 6, 217, 61, 241, 40, 113, 62, 36, 186, 62, 62, 202, 245, 121, 189, 138, 204, 71, 62, 154, 77, 70, 61, 126, 159, 55, 62, 48, 241, 53, 189, 202, 121, 89, 189, 105, 118, 252, 189, 18, 99, 19, 62, 162, 95, 243, 189, 170, 115, 197, 61, 168, 225, 234, 61, 68, 122, 195, 189, 120, 255, 106, 190, 51, 220, 3, 62, 91, 116, 249, 189, 150, 87, 6, 190, 137, 203, 11, 62, 89, 185, 5, 62, 240, 64, 47, 190, 239, 143, 78, 188, 48, 216, 44, 62, 160, 140, 65, 190, 197, 101, 244, 61, 149, 173, 89, 60, 255, 30, 62, 190, 51, 234, 199, 61, 33, 167, 42, 189, 151, 233, 19, 189, 251, 7, 240, 189, 206, 186, 75, 61, 3, 150, 236, 188, 245, 169, 168, 61, 160, 175, 78, 190, 177, 126, 168, 61, 80, 38, 25, 62, 162, 146, 111, 188, 134, 253, 136, 190, 92, 249, 85, 62, 179, 114, 62, 62, 216, 72, 13, 62, 243, 36, 23, 188, 147, 151, 177, 62, 22, 47, 74, 188, 143, 253, 115, 61, 179, 161, 91, 190, 88, 64, 115, 62, 210, 116, 67, 190, 252, 129, 251, 60, 2, 234, 218, 189, 124, 76, 46, 62, 145, 90, 178, 189, 91, 214, 252, 189, 247, 212, 65, 62, 93, 17, 37, 187, 180, 54, 25, 62, 184, 211, 57, 62, 97, 39, 64, 190, 249, 114, 157, 190, 134, 93, 0, 62, 244, 222, 196, 61, 27, 24, 113, 61, 111, 159, 61, 190, 103, 225, 76, 62, 204, 71, 20, 62, 183, 240, 158, 190, 198, 106, 37, 190, 238, 166, 135, 61, 204, 147, 179, 61, 240, 175, 134, 189, 204, 102, 53, 61, 199, 129, 249, 60, 92, 224, 218, 61, 52, 123, 90, 189, 192, 117, 161, 61, 36, 182, 175, 188, 253, 18, 130, 189, 75, 173, 106, 62, 177, 246, 229, 188, 224, 255, 253, 188, 244, 63, 204, 59, 238, 27, 200, 189, 154, 16, 177, 60, 79, 127, 32, 61, 19, 65, 17, 190, 213, 115, 22, 62, 52, 199, 156, 61, 147, 201, 71, 190, 231, 240, 14, 190, 252, 60, 86, 61, 142, 83, 18, 62, 100, 232, 250, 61, 38, 56, 203, 60, 127, 125, 173, 61, 222, 250, 13, 62, 59, 232, 51, 190, 181, 120, 134, 189, 18, 164, 105, 62, 137, 122, 130, 61, 143, 47, 1, 62, 52, 215, 132, 189, 248, 140, 22, 190, 163, 181, 129, 190, 162, 113, 202, 189, 97, 37, 5, 190, 59, 39, 123, 60, 211, 111, 236, 190, 81, 132, 210, 187, 93, 67, 0, 190, 110, 0, 207, 189, 60, 32, 135, 61, 42, 247, 115, 190, 241, 136, 67, 61, 66, 19, 140, 61, 183, 177, 141, 61, 232, 225, 99, 190, 200, 58, 44, 62, 250, 19, 215, 190, 235, 232, 59, 190, 167, 205, 34, 189, 127, 123, 129, 190, 204, 244, 137, 62, 117, 129, 168, 189, 207, 11, 128, 188, 7, 127, 140, 62, 180, 244, 43, 189, 142, 178, 187, 60, 84, 54, 41, 190, 123, 53, 51, 190, 233, 16, 137, 61, 47, 47, 30, 190, 105, 74, 130, 189, 3, 113, 18, 190, 166, 225, 103, 62, 167, 106, 163, 188, 17, 108, 174, 189, 226, 123, 38, 190, 77, 37, 95, 59, 36, 219, 170, 61, 124, 228, 176, 58, 2, 24, 179, 61, 190, 224, 149, 189, 17, 20, 161, 190, 12, 43, 174, 61, 143, 123, 62, 189, 228, 155, 182, 61, 165, 113, 161, 61, 33, 18, 2, 190, 202, 171, 184, 61, 67, 84, 229, 189, 96, 89, 90, 61, 216, 12, 46, 190, 29, 188, 201, 61, 71, 253, 116, 62, 69, 30, 181, 189, 39, 234, 210, 61, 35, 21, 40, 62, 45, 213, 30, 62, 107, 238, 130, 60, 34, 243, 56, 61, 198, 18, 135, 61, 224, 32, 147, 60, 246, 245, 12, 190, 204, 221, 100, 62, 211, 140, 76, 190, 48, 164, 24, 190, 97, 158, 21, 62, 39, 61, 207, 61, 63, 246, 85, 62, 243, 57, 166, 189, 100, 91, 122, 62, 63, 244, 99, 60, 180, 189, 175, 61, 33, 161, 41, 62, 129, 170, 168, 188, 71, 202, 236, 61, 115, 74, 169, 189, 151, 227, 27, 190, 88, 226, 224, 61, 106, 16, 7, 190, 147, 222, 148, 60, 192, 130, 246, 61, 84, 201, 8, 62, 77, 232, 136, 189, 61, 193, 27, 189, 230, 124, 86, 190, 55, 50, 78, 62, 207, 78, 113, 62, 43, 185, 130, 59, 120, 228, 13, 190, 137, 254, 155, 61, 195, 225, 83, 61, 41, 92, 157, 189, 65, 172, 222, 60, 64, 224, 247, 61, 92, 196, 220, 189, 231, 141, 63, 62, 212, 218, 74, 61, 106, 119, 132, 190, 165, 214, 91, 190, 156, 176, 115, 59, 99, 200, 33, 189, 133, 93, 77, 190, 122, 29, 116, 61, 163, 178, 26, 190, 149, 143, 155, 189, 233, 128, 30, 190, 122, 174, 39, 190, 221, 139, 72, 190, 52, 109, 32, 62, 116, 131, 237, 189, 90, 235, 139, 190, 205, 48, 6, 62, 252, 164, 215, 189, 105, 87, 79, 190, 124, 193, 125, 188, 53, 146, 81, 190, 0, 148, 122, 62, 215, 54, 47, 62, 152, 225, 225, 188, 8, 13, 95, 62, 98, 27, 42, 62, 88, 45, 118, 60, 230, 31, 8, 189, 146, 193, 186, 189, 217, 152, 235, 61, 130, 29, 36, 62, 30, 186, 249, 60, 137, 145, 34, 189, 84, 159, 71, 61, 13, 13, 195, 61, 99, 25, 111, 188, 157, 65, 228, 189, 130, 197, 14, 189, 118, 113, 163, 189, 156, 78, 10, 61, 185, 248, 45, 62, 253, 71, 143, 189, 177, 160, 180, 61, 196, 238, 28, 190, 169, 71, 13, 190, 124, 0, 1, 61, 162, 210, 117, 189, 209, 176, 198, 61, 6, 128, 53, 190, 181, 112, 28, 189, 255, 119, 56, 188, 27, 72, 249, 61, 235, 41, 150, 189, 214, 104, 14, 61, 226, 204, 144, 187, 91, 152, 12, 60, 155, 156, 71, 189, 6, 31, 79, 59, 142, 83, 46, 190, 210, 145, 109, 61, 103, 188, 143, 61, 215, 12, 140, 59, 146, 118, 246, 189, 79, 214, 186, 61, 28, 164, 5, 60, 13, 52, 57, 190, 52, 92, 188, 189, 77, 108, 161, 188, 249, 149, 238, 61, 58, 95, 44, 189, 77, 184, 29, 62, 245, 188, 95, 189, 56, 193, 0, 190, 133, 103, 4, 189, 242, 226, 16, 62, 150, 24, 10, 190, 177, 14, 160, 189, 110, 192, 5, 190, 30, 39, 95, 61, 123, 153, 136, 59, 59, 29, 205, 189, 177, 139, 12, 62, 203, 11, 150, 61, 255, 29, 11, 61, 67, 56, 98, 62, 200, 127, 5, 190, 223, 46, 13, 190, 218, 95, 8, 62, 139, 53, 162, 61, 57, 55, 114, 190, 68, 143, 152, 189, 143, 74, 18, 190, 188, 220, 251, 61, 209, 166, 107, 189, 145, 162, 179, 189, 50, 62, 61, 189, 106, 245, 230, 189, 225, 120, 47, 190, 251, 70, 16, 190, 121, 206, 198, 61, 168, 28, 39, 62, 13, 207, 13, 187, 128, 117, 207, 188, 179, 214, 208, 189, 18, 161, 16, 62, 72, 239, 50, 189, 87, 162, 27, 190, 60, 104, 75, 62, 116, 103, 13, 62, 0, 149, 18, 190, 111, 13, 203, 189, 94, 188, 174, 61, 171, 91, 169, 188, 208, 58, 170, 61, 144, 221, 226, 61, 143, 130, 95, 188, 112, 252, 24, 190, 250, 10, 218, 61, 152, 252, 250, 61, 128, 143, 24, 62, 120, 44, 4, 61, 65, 205, 174, 60, 212, 152, 48, 190, 180, 137, 3, 61, 147, 20, 161, 187, 182, 164, 100, 188, 70, 144, 254, 189, 38, 225, 188, 187, 87, 221, 188, 61, 88, 38, 249, 60, 53, 64, 128, 61, 160, 110, 25, 62, 130, 140, 187, 189, 214, 4, 19, 190, 150, 176, 54, 62, 155, 70, 91, 62, 93, 100, 9, 62, 219, 196, 173, 188, 1, 22, 53, 62, 88, 168, 19, 190, 25, 142, 3, 62, 187, 66, 210, 61, 167, 43, 103, 62, 135, 107, 20, 60, 151, 197, 9, 62, 77, 80, 9, 62, 69, 59, 42, 190, 222, 204, 102, 60, 128, 168, 219, 61, 115, 86, 164, 61, 72, 136, 125, 60, 152, 50, 249, 58, 144, 175, 124, 190, 0, 143, 81, 62, 112, 95, 59, 190, 254, 92, 14, 61, 48, 38, 124, 60, 247, 178, 210, 189, 14, 221, 215, 60, 154, 132, 79, 190, 80, 105, 8, 62, 119, 239, 166, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {15, 245, 53, 61, 209, 185, 206, 61, 52, 141, 54, 60, 10, 25, 32, 62, 245, 46, 78, 189, 207, 117, 134, 61, 41, 250, 28, 190, 10, 117, 103, 62, 6, 72, 50, 61, 155, 60, 89, 189, 101, 213, 14, 189, 195, 209, 96, 62, 59, 177, 110, 190, 144, 118, 17, 62, 66, 16, 16, 189, 247, 94, 164, 61, 226, 16, 61, 189, 119, 222, 149, 189, 180, 242, 127, 62, 199, 193, 254, 61, 59, 50, 208, 189, 6, 85, 27, 62, 86, 106, 243, 188, 13, 69, 255, 60, 48, 118, 167, 61, 63, 163, 77, 189, 230, 91, 123, 189, 144, 24, 125, 62, 22, 192, 172, 189, 149, 215, 151, 61, 91, 202, 25, 190, 81, 250, 8, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 2, 145, 190, 199, 48, 246, 62, 5, 143, 208, 60, 223, 102, 222, 61, 25, 144, 17, 62, 170, 162, 218, 189, 201, 40, 28, 61, 177, 149, 3, 62, 53, 108, 7, 190, 248, 162, 151, 190, 72, 209, 53, 190, 247, 213, 100, 190, 51, 242, 153, 189, 113, 38, 248, 189, 126, 179, 67, 190, 214, 158, 8, 190, 13, 8, 160, 188, 194, 88, 220, 187, 129, 23, 160, 190, 63, 35, 38, 190, 99, 144, 9, 62, 231, 157, 88, 62, 122, 111, 26, 62, 243, 100, 95, 190, 253, 147, 212, 190, 57, 41, 56, 190, 14, 84, 37, 190, 242, 65, 91, 190, 75, 237, 215, 189, 244, 160, 104, 62, 122, 100, 66, 188, 165, 174, 79, 62, 193, 144, 217, 61, 33, 59, 126, 188, 106, 243, 124, 190, 5, 120, 217, 186, 54, 82, 251, 189, 255, 26, 29, 189, 146, 31, 1, 62, 88, 1, 203, 188, 119, 23, 35, 60, 249, 68, 89, 62, 167, 9, 83, 61, 86, 89, 10, 190, 30, 225, 41, 62, 56, 108, 194, 188, 223, 9, 61, 57, 131, 90, 218, 189, 223, 3, 150, 189, 172, 101, 222, 61, 132, 169, 186, 188, 254, 191, 147, 61, 103, 25, 16, 190, 108, 242, 16, 190, 56, 187, 235, 61, 50, 13, 23, 190, 3, 54, 18, 190, 191, 134, 58, 190, 167, 155, 44, 61, 25, 240, 239, 189, 58, 220, 199, 61, 165, 177, 24, 62, 141, 71, 21, 62, 145, 163, 204, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 60, 15, 62, 164, 136, 76, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {171, 160, 195, 190, 100, 41, 246, 62, 253, 80, 17, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {144, 19, 202, 191, 83, 55, 233, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0067/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}