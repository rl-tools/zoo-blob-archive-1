// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 11, 63, 63, 145, 234, 57, 191, 184, 182, 153, 190, 62, 112, 234, 62, 229, 81, 98, 191, 216, 3, 224, 190, 232, 225, 181, 62, 87, 64, 178, 191, 78, 161, 142, 190, 169, 172, 95, 188, 203, 190, 168, 191, 233, 150, 218, 190, 196, 204, 210, 190, 22, 129, 92, 190, 209, 19, 176, 62, 167, 169, 252, 62, 125, 40, 132, 191, 241, 50, 200, 61, 225, 139, 173, 62, 2, 109, 100, 191, 233, 30, 47, 190, 96, 74, 57, 63, 153, 154, 173, 63, 238, 174, 156, 62, 57, 135, 29, 191, 35, 32, 66, 190, 200, 119, 6, 190, 17, 116, 238, 62, 131, 27, 93, 190, 190, 29, 240, 62, 146, 126, 88, 62, 28, 188, 164, 191, 209, 134, 136, 190, 206, 240, 188, 61, 119, 101, 118, 63, 152, 103, 185, 190, 231, 86, 22, 62, 204, 79, 27, 191, 9, 192, 143, 61, 99, 154, 211, 190, 239, 32, 189, 190, 186, 2, 115, 190, 165, 73, 227, 190, 130, 122, 184, 190, 89, 6, 26, 191, 145, 112, 198, 190, 93, 78, 233, 62, 177, 220, 48, 63, 253, 20, 62, 63, 100, 82, 40, 191, 86, 228, 110, 190, 214, 243, 63, 191, 199, 78, 0, 191, 0, 16, 132, 181, 227, 215, 20, 191, 81, 222, 71, 190, 12, 98, 166, 62, 62, 22, 50, 62, 6, 194, 21, 63, 156, 82, 154, 190, 101, 27, 216, 187, 0, 90, 138, 191, 212, 245, 198, 62, 187, 55, 55, 63, 79, 190, 76, 191, 185, 197, 90, 190, 216, 34, 194, 190, 46, 123, 128, 63, 158, 203, 212, 61, 210, 190, 237, 62, 96, 102, 147, 191, 187, 253, 130, 190, 81, 163, 11, 191, 4, 163, 113, 190, 221, 84, 202, 190, 205, 158, 172, 62, 235, 144, 88, 190, 249, 205, 238, 190, 78, 33, 255, 188, 207, 36, 175, 61, 14, 61, 206, 190, 253, 56, 72, 63, 237, 153, 164, 63, 30, 245, 175, 62, 233, 84, 129, 190, 175, 18, 171, 191, 13, 98, 233, 190, 116, 121, 55, 62, 115, 35, 130, 63, 140, 63, 197, 62, 241, 130, 143, 62, 59, 61, 114, 191, 208, 83, 199, 190, 155, 205, 2, 191, 253, 230, 116, 190, 95, 252, 2, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {241, 96, 49, 191, 204, 214, 249, 189, 173, 147, 239, 189, 41, 96, 137, 189, 148, 180, 55, 62, 208, 103, 9, 190, 224, 40, 188, 59, 239, 101, 88, 190, 3, 18, 59, 63, 166, 121, 114, 191, 28, 88, 170, 62, 190, 217, 23, 62, 127, 140, 66, 62, 140, 216, 0, 190, 36, 221, 58, 191, 237, 46, 38, 190, 183, 171, 98, 191, 27, 248, 39, 63, 17, 216, 181, 62, 254, 146, 21, 63, 15, 243, 221, 61, 22, 45, 19, 191, 154, 196, 244, 62, 138, 22, 49, 63, 121, 149, 99, 191, 7, 222, 250, 61, 69, 222, 9, 59, 228, 231, 135, 189, 113, 188, 37, 62, 52, 10, 32, 62, 115, 181, 210, 189, 233, 111, 167, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 217, 145, 190, 255, 90, 124, 190, 136, 6, 177, 190, 7, 228, 178, 61, 231, 67, 115, 190, 134, 123, 72, 190, 93, 39, 214, 190, 171, 85, 242, 62, 246, 53, 153, 190, 192, 71, 129, 188, 90, 214, 158, 190, 169, 199, 116, 190, 19, 215, 92, 61, 79, 114, 198, 61, 156, 137, 152, 187, 131, 235, 167, 189, 93, 52, 76, 190, 11, 145, 62, 190, 48, 255, 221, 189, 211, 199, 192, 61, 108, 223, 19, 190, 129, 43, 42, 191, 240, 165, 220, 189, 202, 135, 189, 59, 235, 193, 176, 61, 96, 77, 195, 189, 203, 119, 96, 188, 100, 102, 160, 62, 88, 101, 202, 60, 106, 254, 222, 189, 91, 63, 162, 189, 221, 234, 199, 62, 129, 152, 14, 62, 58, 181, 181, 62, 240, 14, 200, 62, 187, 163, 163, 190, 126, 142, 176, 60, 234, 86, 85, 62, 36, 154, 164, 62, 153, 183, 149, 190, 231, 148, 158, 62, 13, 145, 253, 190, 11, 172, 89, 62, 69, 175, 109, 58, 114, 237, 18, 62, 237, 146, 21, 62, 173, 229, 24, 191, 56, 167, 89, 62, 223, 198, 108, 190, 234, 20, 245, 61, 249, 226, 214, 62, 43, 160, 151, 60, 75, 207, 195, 190, 110, 173, 149, 190, 53, 16, 254, 61, 133, 198, 78, 62, 9, 146, 35, 191, 171, 31, 147, 62, 236, 150, 156, 188, 160, 174, 177, 190, 66, 59, 229, 190, 105, 99, 192, 61, 125, 156, 159, 62, 176, 191, 17, 190, 192, 39, 252, 60, 60, 7, 39, 62, 65, 231, 221, 190, 168, 114, 165, 190, 234, 6, 124, 189, 224, 213, 68, 62, 198, 116, 158, 62, 62, 75, 229, 190, 182, 246, 141, 60, 51, 104, 227, 61, 122, 105, 172, 62, 93, 234, 40, 189, 38, 102, 177, 62, 253, 215, 32, 190, 74, 199, 8, 191, 53, 219, 167, 188, 38, 32, 26, 191, 170, 49, 1, 187, 110, 32, 244, 61, 187, 235, 238, 189, 124, 99, 5, 62, 229, 125, 185, 190, 119, 217, 41, 190, 247, 127, 176, 62, 161, 68, 179, 189, 35, 230, 156, 61, 28, 137, 27, 62, 229, 193, 226, 188, 58, 195, 57, 191, 249, 199, 169, 61, 188, 119, 44, 190, 73, 13, 172, 190, 110, 71, 183, 61, 224, 131, 78, 189, 183, 184, 55, 61, 76, 202, 40, 190, 18, 40, 152, 62, 11, 105, 69, 62, 62, 55, 153, 62, 69, 48, 172, 191, 120, 180, 8, 62, 151, 238, 0, 191, 59, 11, 19, 62, 39, 104, 153, 62, 8, 7, 138, 62, 143, 176, 2, 190, 48, 216, 50, 190, 235, 109, 14, 62, 154, 9, 148, 61, 251, 249, 117, 190, 114, 87, 115, 62, 197, 187, 244, 61, 113, 238, 210, 189, 175, 216, 38, 61, 160, 136, 242, 188, 48, 198, 150, 188, 196, 23, 255, 190, 133, 163, 154, 60, 125, 190, 218, 61, 250, 183, 82, 191, 112, 221, 121, 190, 167, 244, 117, 190, 80, 7, 211, 61, 174, 11, 156, 61, 112, 178, 150, 61, 63, 88, 58, 62, 110, 213, 71, 62, 128, 96, 216, 188, 217, 83, 227, 61, 7, 207, 96, 62, 192, 241, 172, 62, 30, 170, 71, 190, 213, 30, 180, 61, 50, 40, 137, 189, 89, 177, 162, 62, 209, 77, 213, 61, 170, 70, 24, 189, 195, 253, 10, 190, 226, 248, 173, 190, 170, 31, 16, 62, 157, 185, 46, 190, 148, 157, 196, 60, 74, 145, 222, 189, 92, 190, 220, 189, 49, 55, 171, 188, 94, 193, 134, 190, 144, 96, 117, 62, 25, 220, 50, 62, 165, 5, 184, 190, 84, 109, 0, 62, 73, 19, 243, 188, 167, 249, 14, 61, 88, 252, 202, 190, 198, 166, 104, 188, 52, 57, 102, 62, 131, 237, 97, 190, 198, 12, 9, 191, 76, 89, 167, 189, 2, 20, 33, 190, 66, 161, 4, 62, 50, 137, 86, 190, 158, 159, 211, 190, 227, 134, 63, 190, 27, 122, 219, 61, 104, 232, 61, 190, 237, 158, 231, 60, 74, 184, 106, 61, 246, 110, 133, 190, 98, 15, 135, 188, 100, 112, 165, 189, 247, 114, 64, 62, 17, 214, 195, 189, 119, 142, 25, 191, 108, 86, 4, 62, 130, 42, 193, 61, 134, 60, 57, 62, 6, 74, 65, 62, 121, 226, 55, 191, 148, 218, 17, 189, 184, 131, 198, 62, 224, 164, 170, 190, 118, 178, 24, 190, 147, 31, 162, 190, 255, 188, 177, 62, 8, 183, 69, 62, 92, 34, 178, 189, 16, 214, 148, 190, 41, 157, 118, 62, 160, 216, 30, 62, 196, 154, 230, 190, 40, 56, 148, 191, 209, 37, 163, 60, 241, 149, 190, 189, 211, 166, 191, 62, 31, 105, 48, 191, 16, 129, 162, 62, 75, 86, 148, 191, 223, 250, 183, 62, 72, 216, 24, 191, 48, 139, 180, 61, 77, 172, 14, 189, 15, 243, 60, 61, 185, 25, 29, 62, 213, 40, 63, 62, 185, 99, 240, 59, 96, 52, 56, 191, 80, 155, 111, 190, 152, 71, 129, 62, 84, 134, 58, 62, 143, 144, 28, 190, 130, 75, 46, 190, 83, 76, 139, 61, 206, 64, 14, 62, 136, 97, 50, 191, 24, 176, 126, 191, 233, 153, 25, 62, 178, 35, 108, 191, 176, 144, 183, 61, 27, 125, 255, 190, 237, 225, 96, 60, 108, 182, 233, 59, 207, 19, 206, 189, 39, 58, 187, 61, 43, 154, 103, 59, 222, 244, 21, 62, 126, 11, 91, 62, 63, 124, 84, 62, 43, 220, 210, 190, 56, 218, 213, 61, 168, 140, 65, 190, 78, 28, 205, 61, 237, 162, 78, 61, 95, 60, 144, 62, 238, 157, 213, 189, 119, 149, 63, 188, 184, 164, 93, 61, 29, 50, 113, 190, 190, 35, 26, 189, 125, 52, 145, 62, 173, 164, 17, 190, 41, 127, 206, 189, 180, 7, 74, 190, 253, 128, 198, 190, 237, 53, 13, 62, 30, 133, 128, 190, 167, 173, 151, 188, 76, 18, 143, 61, 140, 67, 203, 190, 194, 8, 132, 190, 196, 147, 162, 189, 196, 103, 146, 189, 151, 234, 64, 61, 5, 181, 185, 60, 75, 80, 5, 190, 172, 253, 185, 190, 53, 155, 252, 190, 124, 135, 77, 62, 96, 39, 35, 191, 232, 209, 106, 190, 158, 133, 78, 190, 126, 34, 130, 62, 159, 126, 184, 190, 34, 5, 115, 191, 72, 7, 221, 190, 151, 117, 204, 190, 128, 251, 114, 191, 69, 174, 101, 190, 226, 33, 85, 62, 158, 29, 199, 187, 81, 153, 170, 62, 124, 25, 136, 188, 109, 129, 1, 191, 151, 222, 248, 189, 78, 211, 191, 61, 184, 8, 167, 62, 164, 169, 241, 190, 233, 223, 53, 190, 251, 194, 168, 190, 6, 242, 206, 190, 213, 153, 104, 190, 145, 104, 151, 190, 164, 238, 58, 59, 237, 91, 207, 190, 168, 229, 180, 190, 193, 195, 149, 60, 251, 190, 214, 190, 226, 96, 147, 191, 78, 26, 72, 190, 210, 212, 29, 190, 85, 58, 42, 191, 127, 221, 14, 191, 108, 198, 111, 190, 67, 163, 152, 62, 223, 186, 195, 190, 229, 140, 192, 191, 186, 78, 243, 190, 183, 186, 25, 61, 242, 17, 0, 191, 46, 144, 41, 62, 84, 163, 255, 190, 232, 22, 76, 190, 27, 117, 126, 62, 52, 253, 135, 60, 248, 183, 4, 190, 161, 44, 77, 62, 23, 18, 227, 189, 156, 61, 36, 190, 228, 177, 15, 62, 239, 184, 179, 189, 166, 244, 206, 189, 157, 60, 4, 191, 226, 136, 102, 61, 125, 72, 74, 190, 2, 238, 37, 191, 146, 27, 61, 191, 211, 139, 55, 62, 147, 186, 92, 190, 65, 18, 97, 190, 217, 97, 50, 191, 232, 71, 24, 62, 188, 7, 146, 190, 15, 102, 6, 191, 51, 171, 252, 189, 178, 61, 33, 63, 149, 158, 223, 190, 226, 147, 30, 190, 23, 129, 124, 190, 187, 115, 176, 61, 21, 114, 153, 190, 83, 1, 25, 190, 67, 70, 95, 62, 166, 56, 139, 190, 16, 254, 54, 190, 43, 229, 53, 191, 65, 175, 8, 190, 96, 106, 149, 62, 116, 87, 12, 191, 241, 70, 13, 191, 78, 173, 59, 189, 82, 155, 8, 62, 24, 203, 81, 189, 143, 241, 249, 188, 62, 227, 66, 190, 150, 16, 219, 62, 130, 10, 100, 190, 38, 19, 190, 61, 22, 199, 124, 190, 70, 46, 158, 62, 22, 174, 250, 190, 185, 77, 196, 189, 90, 30, 83, 190, 216, 29, 110, 62, 33, 204, 2, 190, 203, 158, 129, 190, 113, 183, 223, 188, 177, 206, 142, 61, 25, 72, 65, 62, 98, 245, 136, 190, 154, 5, 253, 60, 246, 178, 255, 59, 63, 121, 92, 61, 116, 73, 158, 189, 250, 220, 223, 61, 40, 180, 217, 189, 9, 129, 78, 191, 210, 37, 183, 187, 22, 121, 136, 61, 157, 61, 233, 61, 51, 90, 129, 62, 229, 127, 49, 191, 36, 57, 43, 189, 220, 187, 30, 62, 91, 120, 135, 190, 157, 198, 53, 190, 64, 122, 29, 61, 231, 203, 36, 62, 100, 182, 120, 62, 174, 204, 103, 189, 156, 188, 112, 189, 186, 205, 172, 61, 50, 3, 102, 188, 223, 155, 184, 61, 83, 34, 177, 60, 236, 57, 239, 189, 130, 121, 188, 60, 179, 116, 65, 62, 23, 150, 97, 61, 245, 177, 134, 189, 216, 102, 233, 61, 101, 33, 31, 61, 15, 224, 196, 189, 177, 129, 179, 187, 74, 37, 104, 188, 201, 98, 221, 61, 65, 58, 191, 61, 10, 41, 176, 189, 147, 46, 158, 189, 210, 250, 222, 189, 133, 235, 64, 190, 227, 8, 1, 189, 182, 148, 173, 189, 212, 63, 169, 61, 8, 117, 188, 190, 144, 37, 57, 190, 239, 168, 56, 61, 218, 18, 145, 61, 126, 161, 48, 189, 52, 218, 34, 189, 167, 144, 11, 189, 253, 84, 7, 190, 241, 42, 228, 60, 238, 191, 238, 188, 215, 41, 167, 189, 57, 139, 139, 189, 241, 99, 38, 61, 249, 250, 48, 61, 195, 23, 19, 190, 222, 101, 107, 61, 112, 65, 9, 190, 182, 35, 155, 61, 242, 110, 192, 186, 112, 116, 4, 62, 31, 187, 182, 188, 119, 70, 131, 61, 52, 21, 131, 60, 218, 38, 101, 189, 51, 188, 10, 62, 230, 123, 41, 190, 14, 132, 74, 188, 162, 197, 202, 189, 166, 153, 232, 61, 57, 154, 38, 190, 128, 104, 0, 189, 30, 104, 219, 189, 2, 42, 15, 190, 132, 33, 233, 189, 60, 89, 5, 62, 115, 113, 102, 61, 11, 149, 38, 188, 228, 129, 11, 190, 213, 235, 26, 190, 118, 177, 116, 189, 73, 207, 7, 61, 23, 241, 243, 189, 86, 251, 145, 62, 134, 238, 29, 62, 93, 60, 37, 62, 151, 58, 144, 189, 248, 176, 182, 190, 51, 233, 207, 190, 49, 161, 23, 61, 248, 141, 107, 60, 67, 97, 99, 62, 114, 18, 57, 190, 218, 197, 165, 61, 130, 219, 140, 190, 77, 139, 44, 191, 130, 85, 42, 190, 205, 110, 121, 189, 123, 238, 40, 191, 108, 32, 0, 63, 157, 109, 98, 62, 107, 63, 139, 189, 235, 189, 205, 188, 122, 151, 202, 189, 126, 78, 232, 62, 13, 114, 217, 61, 94, 129, 186, 61, 77, 234, 87, 60, 97, 173, 129, 60, 152, 84, 191, 188, 194, 119, 219, 190, 235, 80, 41, 62, 219, 239, 212, 190, 86, 157, 210, 188, 222, 226, 102, 189, 141, 47, 36, 191, 35, 143, 128, 190, 139, 213, 208, 190, 82, 231, 33, 62, 42, 159, 27, 189, 237, 244, 142, 190, 140, 124, 153, 61, 126, 128, 58, 62, 58, 254, 242, 189, 246, 62, 186, 59, 37, 88, 148, 189, 27, 250, 70, 189, 165, 140, 62, 62, 139, 36, 92, 61, 149, 254, 150, 61, 173, 173, 204, 190, 76, 163, 90, 191, 213, 25, 59, 189, 112, 16, 1, 62, 60, 105, 57, 62, 137, 54, 107, 62, 127, 69, 48, 191, 67, 98, 40, 62, 192, 41, 204, 62, 167, 54, 130, 189, 167, 242, 18, 190, 230, 177, 120, 59, 227, 2, 73, 62, 111, 217, 223, 62, 202, 84, 33, 189, 78, 182, 36, 190, 207, 177, 96, 62, 59, 9, 41, 62, 102, 88, 200, 61, 11, 92, 51, 190, 217, 10, 14, 191, 222, 199, 83, 61, 89, 149, 31, 191, 55, 76, 51, 189, 193, 72, 20, 62, 214, 58, 51, 62, 244, 111, 26, 190, 240, 236, 120, 190, 6, 170, 219, 59, 206, 13, 68, 190, 120, 171, 182, 189, 167, 101, 82, 191, 62, 251, 22, 62, 86, 145, 234, 61, 152, 206, 65, 60, 83, 255, 81, 62, 55, 158, 214, 62, 109, 249, 249, 189, 53, 16, 127, 61, 20, 236, 138, 62, 151, 69, 35, 191, 0, 93, 8, 62, 180, 216, 23, 63, 81, 25, 181, 189, 191, 40, 155, 60, 115, 43, 236, 191, 150, 56, 31, 62, 21, 104, 167, 62, 55, 1, 198, 190, 172, 54, 52, 189, 205, 132, 44, 62, 158, 198, 51, 189, 128, 144, 32, 190, 227, 209, 234, 60, 84, 102, 3, 190, 158, 51, 53, 58, 52, 81, 106, 189, 4, 158, 53, 61, 73, 71, 149, 189, 137, 182, 46, 60, 39, 237, 226, 188, 39, 12, 116, 61, 120, 23, 5, 62, 24, 243, 36, 190, 149, 203, 56, 190, 142, 78, 157, 189, 138, 9, 250, 189, 141, 50, 155, 61, 140, 75, 6, 190, 152, 9, 101, 187, 198, 246, 233, 56, 209, 102, 204, 61, 8, 190, 69, 189, 141, 184, 117, 61, 27, 78, 153, 189, 96, 221, 37, 190, 124, 222, 148, 58, 216, 157, 27, 61, 155, 186, 70, 60, 127, 158, 12, 61, 134, 45, 96, 186, 120, 166, 85, 191, 63, 39, 150, 190, 26, 91, 225, 190, 208, 104, 222, 62, 15, 70, 23, 191, 183, 112, 146, 190, 133, 234, 26, 190, 48, 38, 156, 62, 62, 249, 171, 61, 17, 37, 208, 189, 13, 86, 68, 190, 59, 222, 199, 60, 123, 219, 22, 190, 222, 144, 138, 61, 182, 205, 100, 61, 167, 142, 17, 191, 161, 233, 124, 191, 114, 117, 232, 189, 34, 52, 117, 190, 121, 18, 53, 62, 102, 196, 110, 62, 175, 238, 24, 191, 95, 29, 208, 61, 88, 19, 188, 62, 178, 13, 98, 190, 136, 25, 75, 190, 70, 63, 59, 190, 114, 223, 139, 62, 12, 147, 214, 62, 236, 8, 189, 61, 194, 71, 46, 190, 157, 66, 225, 62, 176, 0, 249, 190, 240, 126, 44, 190, 164, 19, 17, 190, 159, 94, 130, 62, 241, 59, 170, 190, 143, 179, 159, 189, 219, 129, 143, 190, 141, 114, 46, 62, 69, 236, 209, 189, 17, 217, 146, 189, 107, 19, 71, 190, 190, 110, 173, 189, 184, 151, 104, 190, 174, 126, 17, 189, 136, 159, 125, 61, 146, 47, 214, 190, 230, 42, 21, 191, 252, 167, 134, 62, 198, 213, 141, 189, 196, 179, 28, 189, 144, 187, 102, 62, 74, 86, 76, 191, 92, 42, 212, 60, 45, 124, 136, 62, 17, 141, 158, 190, 100, 21, 8, 60, 158, 85, 240, 61, 44, 144, 228, 189, 63, 64, 234, 62, 35, 205, 131, 190, 223, 156, 74, 190, 32, 219, 127, 62, 170, 43, 37, 190, 219, 84, 76, 62, 93, 160, 94, 190, 90, 246, 157, 189, 224, 228, 211, 189, 253, 113, 113, 62, 156, 186, 2, 62, 22, 156, 15, 191, 195, 240, 64, 62, 251, 8, 141, 61, 249, 90, 163, 61, 246, 91, 151, 60, 249, 185, 89, 62, 175, 11, 175, 189, 164, 177, 247, 61, 75, 91, 105, 190, 55, 23, 200, 189, 52, 134, 69, 61, 61, 23, 9, 190, 34, 30, 52, 62, 192, 248, 143, 62, 52, 235, 53, 190, 15, 122, 38, 190, 61, 226, 234, 62, 0, 250, 155, 189, 210, 111, 95, 62, 73, 179, 173, 61, 50, 99, 53, 190, 29, 221, 245, 61, 72, 56, 42, 190, 239, 236, 5, 62, 55, 165, 92, 189, 241, 172, 101, 189, 71, 184, 3, 190, 186, 33, 2, 63, 32, 65, 187, 190, 200, 212, 88, 61, 22, 19, 197, 61, 205, 251, 228, 62, 4, 186, 33, 191, 211, 98, 112, 61, 22, 124, 189, 190, 239, 146, 187, 62, 145, 27, 98, 190, 87, 134, 49, 61, 171, 132, 165, 61, 52, 27, 16, 190, 139, 161, 43, 62, 106, 249, 120, 61, 104, 42, 186, 60, 104, 121, 128, 60, 77, 186, 211, 190, 179, 68, 105, 189, 18, 112, 89, 62, 163, 183, 234, 188, 136, 135, 32, 190, 149, 144, 14, 63, 221, 60, 220, 190, 120, 143, 154, 61, 58, 48, 214, 190, 184, 32, 211, 191, 161, 202, 102, 62, 95, 48, 148, 62, 194, 87, 248, 190, 109, 175, 225, 62, 239, 37, 166, 62, 137, 2, 193, 62, 46, 252, 139, 190, 213, 108, 156, 62, 146, 172, 31, 62, 230, 160, 158, 62, 126, 45, 232, 190, 201, 242, 13, 62, 69, 127, 21, 191, 9, 107, 38, 62, 148, 200, 209, 188, 150, 57, 156, 61, 63, 116, 8, 190, 196, 133, 238, 190, 146, 7, 148, 62, 211, 132, 35, 61, 2, 82, 92, 189, 83, 253, 79, 62, 29, 44, 74, 190, 59, 181, 247, 190, 195, 68, 94, 61, 170, 165, 180, 62, 21, 128, 248, 61, 181, 58, 44, 191, 81, 112, 102, 62, 246, 9, 43, 62, 187, 255, 240, 190, 78, 199, 23, 191, 137, 153, 111, 62, 129, 38, 81, 62, 81, 117, 105, 190, 197, 30, 32, 62, 109, 109, 10, 62, 13, 196, 109, 190, 183, 215, 24, 190, 25, 197, 165, 61, 44, 161, 138, 189, 2, 70, 193, 189, 190, 253, 18, 62, 71, 11, 59, 189, 170, 158, 97, 189, 250, 181, 144, 61, 208, 247, 149, 61, 203, 128, 146, 61, 242, 131, 10, 62, 26, 74, 118, 190, 60, 100, 6, 62, 182, 242, 99, 61, 66, 28, 235, 188, 20, 154, 176, 189, 89, 202, 11, 62, 196, 249, 129, 61, 115, 161, 165, 61, 92, 102, 112, 61, 92, 145, 15, 62, 213, 20, 88, 62, 130, 208, 184, 61, 51, 115, 136, 62, 109, 139, 41, 62, 157, 43, 51, 190, 57, 18, 204, 61, 165, 1, 32, 189, 153, 135, 17, 190, 61, 155, 38, 191, 1, 200, 245, 189, 198, 200, 45, 191, 77, 11, 130, 58, 213, 116, 153, 191, 205, 201, 168, 190, 74, 25, 78, 190, 234, 183, 222, 58, 130, 128, 137, 61, 150, 223, 87, 190, 47, 210, 29, 60, 162, 111, 197, 61, 212, 238, 148, 189, 25, 111, 170, 190, 66, 59, 211, 61, 214, 75, 139, 191, 80, 15, 22, 191, 88, 208, 179, 189, 238, 14, 164, 190, 57, 120, 154, 62, 132, 15, 36, 191, 228, 197, 47, 191, 69, 117, 142, 62, 66, 118, 71, 62, 154, 157, 6, 190, 18, 195, 216, 189, 75, 108, 75, 190, 17, 66, 84, 62, 171, 210, 83, 190, 113, 45, 54, 190, 131, 252, 142, 190, 152, 35, 116, 62, 133, 211, 24, 191, 3, 246, 237, 60, 56, 112, 70, 191, 90, 67, 145, 188, 97, 231, 56, 62, 177, 181, 19, 62, 251, 56, 156, 61, 25, 116, 128, 189, 195, 30, 116, 191, 150, 16, 164, 62, 140, 152, 127, 61, 16, 159, 50, 62, 157, 94, 129, 62, 17, 139, 38, 59, 252, 56, 138, 60, 209, 233, 27, 189, 122, 42, 181, 191, 142, 180, 19, 191, 148, 207, 251, 61, 83, 159, 165, 62, 26, 4, 168, 60, 203, 28, 182, 190, 109, 34, 4, 62, 141, 163, 169, 62, 152, 146, 83, 62, 236, 248, 121, 62, 253, 220, 121, 62, 238, 72, 202, 61, 59, 219, 44, 191, 42, 136, 138, 62, 8, 85, 82, 190, 119, 231, 50, 190, 71, 93, 216, 62, 246, 222, 45, 62, 54, 66, 187, 62, 3, 208, 60, 189, 97, 47, 200, 62, 15, 237, 155, 60, 189, 124, 48, 62, 238, 35, 109, 61, 91, 57, 67, 189, 150, 177, 10, 62, 79, 132, 156, 189, 124, 187, 75, 190, 246, 78, 50, 62, 141, 119, 35, 190, 11, 169, 138, 188, 79, 70, 128, 62, 61, 35, 186, 62, 212, 194, 149, 59, 159, 65, 188, 61, 249, 96, 145, 190, 230, 143, 97, 62, 114, 194, 11, 63, 132, 77, 39, 190, 241, 250, 167, 189, 174, 216, 67, 61, 222, 180, 194, 61, 30, 132, 17, 189, 245, 64, 42, 190, 170, 62, 93, 62, 115, 73, 64, 190, 241, 182, 135, 62, 22, 37, 220, 188, 205, 250, 62, 191, 229, 241, 129, 190, 190, 187, 104, 190, 31, 18, 222, 61, 50, 151, 191, 190, 1, 57, 63, 189, 59, 176, 39, 190, 251, 101, 184, 61, 44, 218, 152, 189, 169, 94, 130, 188, 145, 51, 240, 189, 248, 141, 151, 60, 237, 224, 115, 188, 224, 12, 97, 190, 62, 73, 13, 62, 192, 212, 161, 190, 191, 68, 142, 191, 128, 170, 83, 62, 65, 141, 199, 189, 93, 45, 77, 62, 132, 59, 168, 62, 80, 31, 77, 191, 7, 155, 44, 62, 155, 46, 210, 62, 98, 137, 207, 189, 38, 184, 68, 189, 229, 51, 3, 190, 55, 172, 150, 62, 18, 174, 209, 62, 146, 126, 82, 60, 156, 127, 168, 189, 217, 204, 140, 61, 201, 114, 212, 61, 22, 16, 163, 61, 205, 6, 5, 191, 56, 109, 132, 190, 205, 91, 56, 191, 229, 100, 101, 191, 76, 210, 207, 61, 140, 224, 9, 191, 57, 130, 162, 61, 52, 8, 79, 190, 126, 142, 40, 190, 118, 172, 215, 62, 59, 151, 93, 191, 71, 68, 165, 61, 114, 4, 252, 190, 135, 66, 114, 190, 186, 117, 27, 190, 122, 133, 35, 61, 247, 125, 136, 190, 253, 158, 84, 62, 186, 234, 129, 190, 83, 229, 139, 61, 111, 121, 85, 61, 138, 76, 71, 190, 236, 5, 17, 191, 118, 62, 119, 62, 160, 163, 217, 62, 57, 176, 229, 190, 11, 108, 84, 191, 9, 236, 182, 189, 166, 142, 166, 61, 11, 68, 26, 190, 52, 92, 188, 189, 174, 127, 16, 61, 26, 82, 62, 61, 237, 155, 223, 190, 247, 158, 217, 61, 235, 57, 134, 61, 238, 146, 184, 190, 27, 11, 117, 190, 50, 205, 164, 62, 30, 40, 104, 190, 217, 134, 166, 189, 250, 203, 143, 190, 203, 24, 132, 190, 50, 152, 178, 61, 38, 40, 72, 190, 161, 176, 89, 62, 74, 160, 149, 61, 80, 119, 7, 62, 222, 92, 156, 62, 181, 95, 51, 190, 137, 219, 192, 190, 102, 65, 8, 62, 23, 124, 115, 62, 210, 100, 203, 191, 78, 32, 144, 62, 200, 145, 45, 190, 48, 68, 218, 62, 41, 252, 145, 190, 247, 192, 255, 191, 38, 109, 34, 61, 19, 196, 120, 188, 240, 142, 59, 189, 220, 230, 247, 188, 187, 237, 114, 61, 78, 133, 180, 62, 186, 161, 114, 189, 13, 247, 171, 59, 23, 159, 23, 62, 113, 13, 147, 62, 31, 141, 253, 190, 167, 251, 43, 190, 251, 205, 128, 61, 245, 195, 62, 62, 97, 77, 140, 190, 77, 123, 16, 189, 201, 176, 216, 189, 141, 53, 20, 190, 159, 103, 134, 189, 237, 52, 147, 62, 206, 215, 130, 189, 4, 233, 206, 189, 140, 229, 95, 189, 46, 245, 51, 62, 23, 219, 200, 62, 132, 103, 142, 190, 50, 122, 91, 61, 147, 40, 132, 190, 207, 204, 143, 189, 11, 98, 37, 190, 0, 70, 228, 190, 161, 251, 18, 190, 32, 15, 166, 190, 200, 25, 76, 61, 174, 223, 245, 189, 24, 206, 153, 60, 234, 240, 39, 62, 72, 25, 250, 189, 167, 53, 148, 190, 249, 242, 186, 61, 252, 233, 150, 62, 23, 148, 93, 62, 68, 105, 193, 190, 57, 88, 88, 62, 99, 48, 153, 190, 237, 104, 84, 62, 81, 55, 42, 61, 82, 53, 41, 62, 79, 89, 159, 189, 212, 159, 108, 61, 132, 129, 144, 61, 171, 242, 178, 190, 83, 42, 107, 189, 87, 233, 113, 61, 173, 55, 23, 62, 26, 68, 166, 189, 79, 54, 221, 189, 193, 129, 158, 189, 212, 217, 98, 62, 42, 83, 197, 190, 146, 98, 31, 61, 241, 80, 38, 189, 250, 53, 138, 190, 217, 135, 77, 190, 131, 82, 126, 190, 235, 99, 202, 61, 154, 164, 109, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 139, 137, 189, 86, 48, 40, 62, 14, 156, 31, 62, 0, 250, 87, 62, 168, 109, 218, 60, 208, 53, 73, 61, 149, 1, 204, 190, 63, 173, 109, 62, 5, 56, 154, 61, 43, 26, 52, 190, 153, 158, 37, 188, 103, 196, 156, 62, 117, 66, 155, 190, 144, 118, 17, 62, 50, 235, 182, 189, 173, 208, 22, 62, 166, 64, 111, 62, 119, 222, 149, 189, 110, 39, 140, 62, 74, 243, 170, 60, 71, 192, 64, 188, 208, 145, 116, 62, 155, 51, 173, 60, 180, 181, 226, 61, 176, 51, 37, 62, 105, 46, 76, 59, 17, 241, 28, 190, 60, 161, 162, 62, 197, 191, 4, 190, 37, 167, 248, 61, 52, 174, 114, 190, 174, 207, 120, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 63, 180, 190, 139, 54, 65, 63, 211, 32, 122, 61, 62, 62, 249, 62, 226, 59, 61, 62, 44, 183, 22, 190, 30, 223, 93, 191, 30, 113, 159, 189, 35, 171, 133, 191, 124, 6, 156, 191, 101, 4, 56, 191, 92, 84, 26, 190, 87, 46, 225, 189, 113, 38, 248, 189, 147, 42, 211, 190, 114, 149, 90, 190, 162, 118, 185, 62, 194, 88, 220, 187, 36, 181, 17, 191, 10, 247, 141, 190, 57, 128, 81, 62, 122, 186, 88, 63, 11, 73, 9, 63, 172, 183, 151, 189, 33, 134, 82, 191, 169, 142, 216, 190, 208, 117, 106, 190, 44, 143, 181, 190, 87, 130, 106, 191, 149, 201, 161, 63, 203, 116, 186, 61, 246, 77, 45, 62, 15, 199, 233, 62, 61, 108, 194, 189, 100, 67, 26, 191, 224, 38, 157, 62, 236, 231, 134, 190, 67, 183, 171, 60, 5, 203, 7, 63, 70, 48, 6, 190, 105, 98, 182, 61, 7, 164, 238, 61, 209, 173, 159, 62, 174, 160, 92, 188, 237, 175, 36, 62, 56, 108, 194, 188, 228, 101, 244, 185, 145, 171, 121, 189, 208, 19, 194, 189, 172, 101, 222, 61, 172, 204, 44, 62, 12, 193, 173, 62, 75, 79, 93, 190, 154, 215, 77, 188, 5, 198, 142, 62, 51, 77, 89, 190, 206, 89, 169, 61, 163, 170, 1, 191, 125, 88, 104, 62, 177, 132, 31, 190, 175, 153, 182, 62, 72, 81, 177, 62, 202, 240, 185, 62, 218, 110, 122, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {85, 239, 91, 62, 175, 112, 4, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {169, 149, 228, 62, 11, 193, 52, 63, 91, 235, 233, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {35, 163, 53, 192, 178, 26, 208, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0067/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}