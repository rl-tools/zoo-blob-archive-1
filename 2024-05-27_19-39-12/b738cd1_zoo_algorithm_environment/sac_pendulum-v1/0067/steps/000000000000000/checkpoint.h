// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 106, 3, 63, 9, 132, 12, 190, 59, 85, 184, 190, 186, 28, 230, 62, 228, 238, 177, 190, 189, 90, 199, 190, 29, 205, 139, 61, 219, 103, 249, 190, 197, 118, 84, 190, 46, 75, 48, 190, 157, 22, 32, 62, 3, 1, 14, 191, 171, 18, 222, 60, 86, 225, 252, 190, 38, 31, 86, 61, 91, 32, 109, 62, 89, 230, 4, 191, 111, 42, 136, 190, 58, 200, 195, 62, 120, 170, 145, 190, 77, 126, 30, 189, 83, 248, 85, 62, 124, 142, 237, 62, 109, 200, 194, 62, 108, 13, 161, 190, 124, 247, 3, 191, 152, 235, 84, 190, 245, 141, 151, 189, 162, 108, 1, 190, 40, 205, 202, 62, 177, 75, 185, 62, 75, 76, 212, 190, 31, 177, 160, 190, 140, 216, 2, 63, 90, 93, 5, 63, 206, 245, 200, 190, 107, 19, 80, 62, 162, 175, 223, 190, 65, 179, 134, 188, 4, 254, 100, 62, 110, 126, 165, 189, 1, 228, 81, 190, 196, 202, 7, 191, 149, 210, 192, 62, 163, 158, 225, 190, 32, 140, 99, 190, 241, 214, 231, 190, 4, 172, 101, 62, 152, 208, 213, 61, 133, 196, 237, 190, 213, 49, 195, 190, 222, 98, 15, 191, 157, 150, 5, 191, 109, 172, 223, 190, 65, 20, 213, 190, 32, 14, 13, 191, 207, 169, 194, 61, 53, 250, 222, 189, 45, 75, 167, 62, 107, 23, 21, 190, 135, 5, 235, 60, 85, 229, 248, 190, 237, 52, 186, 62, 155, 167, 182, 62, 136, 25, 1, 191, 54, 91, 75, 190, 159, 77, 182, 189, 168, 53, 211, 62, 170, 7, 195, 62, 216, 6, 238, 62, 230, 227, 179, 190, 224, 255, 252, 60, 127, 237, 163, 190, 150, 110, 92, 190, 107, 172, 149, 190, 160, 58, 188, 62, 10, 250, 15, 61, 135, 241, 220, 190, 147, 61, 220, 62, 199, 96, 150, 61, 24, 48, 149, 190, 66, 128, 234, 62, 46, 81, 9, 63, 227, 246, 226, 62, 184, 227, 165, 61, 166, 225, 65, 188, 116, 169, 142, 190, 101, 151, 27, 189, 187, 35, 237, 61, 227, 47, 218, 62, 55, 94, 75, 62, 98, 3, 175, 190, 60, 243, 193, 190, 118, 81, 137, 190, 31, 198, 163, 62, 142, 1, 92, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 164, 19, 191, 217, 180, 160, 190, 234, 255, 181, 190, 65, 137, 213, 59, 43, 92, 35, 62, 117, 49, 3, 190, 223, 26, 58, 61, 45, 185, 122, 190, 86, 8, 205, 62, 110, 15, 14, 191, 123, 143, 176, 62, 215, 159, 104, 190, 22, 107, 81, 61, 185, 227, 195, 190, 241, 108, 246, 190, 224, 58, 155, 60, 68, 105, 241, 190, 177, 22, 118, 189, 24, 239, 201, 62, 251, 217, 15, 63, 93, 113, 118, 190, 85, 189, 7, 191, 140, 231, 8, 63, 83, 45, 218, 62, 205, 114, 13, 191, 28, 112, 45, 61, 132, 125, 94, 189, 232, 31, 58, 190, 164, 81, 122, 62, 253, 79, 215, 62, 80, 216, 184, 190, 13, 172, 193, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 58, 6, 61, 164, 176, 133, 189, 226, 183, 103, 189, 205, 185, 200, 189, 214, 243, 115, 189, 74, 151, 191, 189, 131, 8, 67, 189, 216, 164, 46, 62, 126, 88, 41, 190, 214, 51, 27, 62, 113, 131, 158, 185, 159, 230, 6, 190, 156, 92, 41, 62, 23, 54, 230, 61, 27, 30, 26, 190, 105, 13, 4, 62, 190, 108, 214, 61, 10, 42, 80, 61, 212, 168, 251, 188, 141, 171, 0, 190, 51, 121, 203, 189, 230, 158, 156, 60, 38, 192, 82, 189, 44, 4, 203, 60, 192, 207, 241, 60, 236, 80, 151, 61, 153, 51, 210, 61, 163, 154, 40, 61, 14, 126, 155, 189, 57, 187, 165, 189, 220, 203, 29, 61, 210, 197, 255, 61, 120, 75, 26, 188, 255, 113, 232, 61, 4, 128, 27, 62, 32, 211, 134, 189, 228, 91, 52, 190, 181, 251, 99, 61, 101, 88, 205, 188, 253, 71, 17, 62, 104, 90, 24, 62, 222, 199, 199, 189, 53, 32, 168, 189, 177, 86, 42, 190, 140, 160, 240, 61, 200, 101, 248, 61, 162, 128, 211, 189, 219, 81, 226, 189, 123, 210, 177, 189, 167, 220, 38, 62, 28, 203, 193, 61, 104, 169, 185, 61, 0, 10, 50, 190, 108, 162, 83, 189, 11, 45, 136, 189, 241, 60, 70, 61, 176, 84, 208, 189, 227, 16, 222, 61, 105, 237, 49, 190, 215, 213, 94, 60, 145, 108, 36, 190, 76, 147, 9, 189, 29, 156, 236, 61, 110, 99, 8, 61, 165, 10, 195, 188, 187, 188, 139, 61, 193, 133, 43, 190, 212, 145, 7, 62, 240, 67, 24, 190, 121, 239, 253, 61, 155, 14, 181, 61, 219, 112, 7, 190, 137, 228, 16, 62, 125, 222, 11, 62, 231, 65, 123, 61, 186, 48, 130, 60, 165, 87, 46, 62, 114, 227, 40, 190, 148, 147, 250, 189, 185, 27, 205, 189, 247, 46, 26, 61, 11, 2, 25, 62, 3, 229, 49, 61, 11, 56, 13, 190, 60, 8, 109, 61, 98, 195, 147, 188, 189, 240, 36, 190, 45, 100, 183, 188, 242, 14, 146, 189, 116, 239, 180, 189, 3, 50, 144, 61, 18, 197, 9, 59, 137, 133, 193, 188, 171, 86, 147, 59, 175, 94, 182, 189, 229, 169, 13, 189, 80, 240, 201, 60, 19, 150, 116, 189, 29, 149, 9, 62, 166, 107, 246, 59, 180, 217, 48, 62, 101, 60, 73, 188, 117, 7, 51, 61, 2, 185, 161, 189, 77, 42, 98, 61, 147, 198, 118, 189, 228, 233, 46, 188, 93, 224, 51, 62, 91, 31, 32, 62, 203, 76, 17, 62, 24, 140, 211, 61, 22, 4, 255, 61, 184, 124, 239, 61, 244, 3, 41, 189, 199, 69, 31, 62, 123, 254, 158, 188, 26, 29, 7, 62, 182, 24, 21, 62, 198, 94, 38, 190, 43, 97, 31, 190, 110, 177, 254, 60, 141, 198, 110, 188, 77, 196, 147, 61, 71, 68, 9, 189, 226, 230, 2, 189, 238, 150, 160, 189, 128, 190, 37, 62, 137, 83, 8, 62, 131, 31, 86, 189, 16, 183, 204, 188, 35, 113, 168, 60, 207, 194, 35, 62, 206, 26, 225, 61, 62, 253, 114, 60, 20, 103, 245, 59, 6, 148, 140, 59, 2, 214, 173, 188, 112, 190, 178, 61, 231, 221, 193, 188, 56, 184, 104, 59, 232, 8, 140, 189, 203, 149, 28, 190, 195, 102, 134, 189, 244, 174, 236, 61, 123, 195, 142, 189, 49, 143, 164, 61, 250, 236, 226, 189, 12, 158, 224, 189, 45, 36, 195, 61, 1, 21, 37, 190, 168, 88, 2, 62, 119, 146, 10, 61, 18, 198, 174, 61, 77, 17, 160, 189, 183, 79, 26, 190, 164, 122, 5, 62, 93, 238, 42, 190, 96, 232, 120, 189, 92, 112, 163, 61, 13, 233, 231, 189, 233, 74, 11, 62, 239, 235, 20, 62, 88, 7, 24, 62, 4, 158, 245, 189, 255, 92, 120, 189, 195, 246, 36, 190, 252, 43, 97, 189, 195, 66, 217, 189, 41, 189, 30, 60, 132, 129, 26, 190, 125, 182, 244, 61, 78, 106, 129, 61, 208, 215, 183, 188, 22, 22, 128, 61, 24, 131, 0, 61, 172, 216, 47, 62, 98, 116, 0, 62, 94, 31, 200, 61, 57, 90, 112, 61, 42, 244, 46, 62, 169, 123, 239, 188, 34, 153, 219, 61, 250, 107, 164, 61, 176, 31, 51, 62, 54, 65, 52, 190, 103, 156, 215, 186, 87, 81, 143, 189, 112, 21, 4, 62, 246, 188, 179, 189, 242, 61, 133, 187, 237, 88, 215, 189, 224, 194, 31, 62, 202, 40, 50, 62, 209, 186, 195, 189, 100, 132, 146, 189, 125, 181, 18, 61, 139, 11, 235, 189, 99, 15, 163, 61, 48, 207, 35, 189, 50, 96, 73, 189, 75, 155, 56, 189, 193, 24, 50, 62, 162, 245, 128, 189, 207, 113, 1, 190, 145, 234, 168, 189, 153, 74, 131, 61, 75, 68, 47, 62, 55, 19, 34, 62, 226, 102, 131, 60, 36, 153, 48, 190, 233, 242, 185, 189, 140, 236, 121, 189, 112, 18, 28, 62, 143, 137, 4, 62, 102, 235, 137, 189, 116, 237, 241, 189, 246, 241, 42, 62, 178, 243, 125, 189, 171, 43, 229, 189, 51, 68, 23, 190, 68, 212, 197, 189, 141, 40, 193, 60, 212, 93, 46, 189, 69, 128, 243, 61, 116, 219, 33, 189, 216, 254, 46, 190, 74, 207, 83, 61, 89, 39, 161, 61, 194, 80, 3, 190, 116, 28, 250, 188, 145, 15, 6, 190, 238, 171, 40, 62, 14, 48, 201, 61, 134, 211, 30, 189, 191, 217, 221, 189, 226, 204, 49, 62, 142, 38, 182, 60, 203, 200, 28, 58, 9, 3, 28, 62, 141, 188, 26, 190, 121, 41, 5, 190, 86, 153, 138, 61, 111, 135, 23, 61, 80, 235, 10, 190, 8, 104, 219, 188, 198, 86, 140, 189, 218, 142, 50, 190, 253, 216, 171, 189, 215, 251, 74, 61, 79, 150, 152, 189, 10, 225, 149, 61, 229, 37, 190, 188, 212, 156, 20, 190, 89, 186, 218, 188, 223, 193, 185, 189, 108, 135, 198, 61, 57, 42, 199, 188, 149, 67, 192, 61, 5, 74, 176, 189, 223, 154, 132, 60, 163, 174, 50, 62, 142, 227, 32, 58, 161, 27, 127, 61, 234, 209, 193, 189, 46, 76, 55, 61, 183, 137, 228, 61, 49, 201, 192, 189, 221, 195, 58, 61, 198, 108, 31, 190, 103, 118, 192, 187, 151, 40, 152, 189, 215, 85, 96, 61, 175, 229, 19, 190, 87, 106, 68, 61, 113, 241, 31, 190, 15, 102, 216, 188, 19, 41, 188, 61, 44, 162, 50, 190, 100, 129, 187, 61, 248, 132, 219, 61, 118, 81, 16, 62, 157, 175, 205, 189, 231, 7, 219, 189, 89, 243, 170, 188, 105, 162, 87, 187, 204, 132, 21, 190, 29, 224, 75, 189, 46, 223, 72, 189, 128, 244, 161, 188, 132, 218, 137, 61, 14, 101, 142, 189, 209, 242, 152, 189, 205, 236, 130, 189, 227, 130, 230, 59, 187, 211, 19, 62, 76, 231, 13, 190, 134, 144, 10, 62, 77, 55, 12, 190, 79, 242, 201, 189, 56, 162, 51, 62, 94, 38, 123, 61, 172, 123, 147, 189, 166, 224, 231, 189, 116, 154, 181, 189, 12, 36, 221, 189, 230, 34, 68, 188, 75, 207, 231, 188, 234, 129, 117, 189, 118, 199, 225, 189, 169, 55, 219, 61, 199, 19, 13, 62, 211, 165, 188, 61, 27, 22, 132, 189, 169, 183, 183, 60, 93, 8, 9, 61, 66, 97, 7, 62, 32, 227, 165, 189, 156, 186, 49, 62, 222, 160, 181, 189, 67, 151, 35, 61, 51, 119, 0, 62, 107, 9, 154, 189, 209, 245, 31, 190, 70, 245, 62, 61, 80, 186, 160, 61, 25, 217, 180, 189, 164, 142, 163, 61, 225, 74, 26, 62, 242, 243, 177, 189, 131, 135, 26, 62, 14, 217, 180, 189, 148, 127, 166, 61, 197, 91, 221, 189, 31, 212, 250, 188, 230, 204, 40, 62, 101, 173, 185, 61, 94, 154, 60, 189, 232, 240, 31, 61, 25, 207, 176, 61, 237, 67, 244, 59, 28, 19, 3, 62, 21, 47, 6, 189, 112, 62, 226, 189, 51, 132, 47, 190, 155, 122, 80, 188, 215, 81, 29, 61, 158, 18, 129, 189, 99, 7, 163, 59, 94, 50, 49, 190, 30, 162, 122, 188, 3, 254, 144, 189, 111, 235, 51, 62, 154, 42, 137, 61, 185, 123, 84, 189, 175, 140, 101, 188, 108, 105, 28, 188, 99, 135, 129, 61, 45, 116, 26, 190, 169, 254, 175, 189, 12, 65, 48, 189, 184, 127, 27, 62, 87, 4, 174, 189, 163, 154, 154, 189, 167, 144, 13, 62, 119, 225, 9, 189, 131, 18, 157, 189, 118, 126, 15, 61, 12, 156, 3, 62, 45, 173, 188, 189, 239, 98, 47, 190, 213, 150, 173, 186, 148, 67, 119, 60, 74, 154, 25, 62, 181, 179, 194, 189, 168, 191, 250, 189, 185, 147, 202, 189, 79, 36, 73, 189, 124, 108, 21, 190, 236, 190, 193, 61, 232, 252, 90, 61, 58, 202, 41, 190, 141, 255, 141, 189, 23, 173, 52, 187, 197, 137, 161, 188, 72, 223, 149, 188, 204, 221, 221, 61, 203, 214, 51, 189, 42, 253, 127, 189, 209, 238, 118, 60, 24, 179, 39, 62, 8, 184, 94, 61, 96, 61, 116, 189, 202, 75, 17, 62, 101, 33, 31, 61, 94, 228, 107, 189, 205, 195, 204, 61, 162, 187, 226, 188, 226, 175, 210, 61, 62, 159, 11, 62, 222, 66, 214, 189, 33, 145, 251, 189, 160, 140, 197, 189, 197, 125, 30, 190, 66, 0, 235, 61, 191, 243, 179, 189, 163, 51, 245, 59, 68, 49, 202, 189, 121, 105, 153, 189, 77, 215, 175, 60, 18, 181, 12, 62, 35, 125, 248, 60, 129, 82, 126, 188, 222, 164, 11, 61, 247, 255, 230, 189, 146, 56, 48, 61, 153, 232, 134, 61, 173, 231, 133, 189, 201, 74, 89, 189, 143, 249, 88, 61, 159, 88, 114, 61, 236, 232, 8, 190, 97, 204, 147, 61, 245, 23, 3, 190, 182, 35, 155, 61, 88, 225, 87, 60, 112, 116, 4, 62, 90, 53, 234, 187, 172, 224, 164, 61, 22, 73, 217, 60, 46, 137, 36, 189, 221, 87, 27, 62, 230, 123, 41, 190, 51, 15, 66, 59, 67, 250, 170, 189, 123, 136, 242, 61, 191, 157, 22, 190, 128, 104, 0, 189, 246, 15, 203, 189, 247, 57, 18, 190, 15, 16, 218, 189, 36, 133, 21, 62, 135, 197, 147, 61, 113, 75, 189, 59, 228, 129, 11, 190, 93, 59, 10, 190, 118, 177, 116, 189, 120, 166, 72, 61, 224, 93, 211, 189, 141, 112, 59, 61, 66, 104, 12, 62, 19, 3, 99, 61, 113, 113, 248, 189, 71, 43, 170, 61, 89, 133, 19, 189, 243, 152, 14, 189, 6, 195, 113, 60, 165, 128, 38, 62, 183, 232, 22, 190, 75, 60, 229, 61, 38, 252, 215, 188, 162, 225, 245, 189, 52, 221, 218, 189, 183, 173, 135, 189, 68, 31, 230, 189, 193, 58, 51, 62, 101, 137, 20, 62, 187, 95, 34, 190, 139, 197, 228, 60, 96, 196, 38, 190, 246, 91, 67, 61, 65, 231, 217, 61, 34, 221, 35, 189, 2, 190, 165, 61, 5, 73, 80, 61, 45, 195, 229, 61, 214, 205, 95, 61, 255, 48, 26, 62, 47, 240, 175, 60, 14, 109, 138, 188, 162, 115, 197, 189, 187, 173, 40, 61, 206, 98, 252, 189, 85, 197, 205, 189, 99, 243, 196, 189, 165, 77, 37, 62, 26, 92, 0, 189, 195, 176, 203, 61, 145, 67, 186, 187, 183, 207, 157, 189, 233, 153, 163, 188, 55, 7, 3, 190, 82, 234, 180, 61, 0, 89, 243, 61, 202, 191, 49, 62, 211, 19, 225, 189, 207, 60, 20, 190, 197, 204, 243, 61, 195, 214, 143, 187, 197, 71, 238, 61, 249, 247, 59, 189, 187, 19, 43, 62, 168, 151, 151, 188, 218, 219, 234, 61, 8, 57, 35, 62, 150, 141, 236, 61, 176, 116, 161, 189, 119, 237, 253, 61, 144, 93, 197, 60, 49, 55, 212, 61, 40, 121, 66, 189, 26, 102, 216, 187, 241, 27, 187, 60, 161, 95, 8, 60, 230, 14, 231, 189, 254, 74, 168, 189, 117, 155, 253, 189, 115, 29, 5, 62, 152, 183, 6, 190, 187, 174, 217, 186, 130, 226, 145, 60, 35, 37, 33, 190, 114, 122, 56, 61, 152, 87, 223, 59, 170, 80, 51, 59, 252, 218, 197, 60, 253, 238, 68, 61, 155, 184, 26, 190, 36, 212, 251, 61, 147, 193, 252, 61, 21, 187, 49, 189, 42, 199, 210, 61, 189, 201, 51, 62, 142, 189, 245, 61, 129, 52, 53, 60, 26, 48, 175, 189, 194, 68, 14, 190, 36, 51, 29, 62, 25, 36, 203, 189, 215, 76, 166, 189, 6, 57, 8, 189, 159, 43, 19, 60, 42, 174, 58, 59, 151, 237, 20, 62, 233, 26, 202, 189, 172, 54, 52, 189, 205, 132, 44, 62, 158, 198, 51, 189, 128, 144, 32, 190, 227, 209, 234, 60, 84, 102, 3, 190, 158, 51, 53, 58, 45, 174, 75, 189, 4, 158, 53, 61, 46, 161, 134, 189, 137, 182, 46, 60, 39, 237, 226, 188, 39, 12, 116, 61, 120, 23, 5, 62, 24, 243, 36, 190, 34, 167, 49, 190, 142, 78, 157, 189, 138, 9, 250, 189, 123, 133, 168, 61, 251, 130, 251, 189, 195, 58, 102, 59, 198, 246, 233, 56, 141, 226, 219, 61, 42, 235, 39, 189, 141, 184, 117, 61, 27, 78, 153, 189, 96, 221, 37, 190, 130, 88, 13, 60, 216, 157, 27, 61, 102, 204, 160, 60, 127, 158, 12, 61, 210, 205, 51, 186, 88, 223, 18, 190, 245, 238, 210, 189, 221, 6, 23, 189, 37, 234, 153, 61, 68, 186, 14, 190, 197, 91, 53, 61, 30, 35, 137, 189, 6, 177, 124, 189, 81, 232, 225, 61, 106, 43, 234, 189, 240, 251, 35, 190, 135, 79, 238, 61, 52, 124, 26, 190, 61, 37, 218, 61, 129, 88, 50, 190, 222, 112, 10, 190, 91, 235, 57, 61, 178, 63, 185, 189, 66, 123, 223, 60, 239, 174, 101, 189, 140, 58, 246, 61, 252, 207, 3, 62, 27, 78, 101, 61, 7, 225, 195, 61, 84, 205, 240, 189, 63, 2, 18, 190, 206, 166, 142, 189, 211, 220, 121, 189, 201, 4, 80, 61, 231, 50, 162, 61, 230, 124, 22, 189, 169, 31, 41, 62, 107, 241, 81, 188, 177, 229, 73, 189, 131, 24, 130, 189, 125, 23, 194, 61, 100, 89, 131, 61, 251, 161, 123, 189, 74, 219, 16, 190, 40, 155, 210, 61, 156, 213, 50, 190, 37, 67, 199, 188, 170, 245, 216, 189, 64, 73, 211, 59, 53, 68, 46, 190, 80, 96, 67, 187, 37, 160, 203, 61, 54, 125, 44, 62, 11, 210, 52, 62, 247, 156, 194, 61, 178, 213, 205, 61, 184, 236, 176, 189, 62, 122, 212, 61, 131, 205, 158, 188, 80, 207, 46, 62, 194, 118, 169, 61, 128, 53, 42, 190, 191, 117, 254, 61, 141, 236, 25, 62, 46, 21, 254, 189, 70, 152, 239, 61, 148, 17, 10, 62, 244, 189, 19, 190, 230, 247, 246, 61, 14, 123, 153, 189, 187, 206, 40, 62, 135, 140, 20, 190, 161, 80, 45, 189, 169, 75, 38, 190, 9, 112, 19, 60, 59, 65, 157, 189, 182, 42, 70, 189, 127, 76, 37, 61, 50, 63, 26, 62, 143, 250, 3, 190, 58, 251, 48, 61, 244, 132, 117, 59, 152, 189, 2, 61, 2, 12, 253, 61, 101, 140, 7, 190, 197, 53, 19, 62, 5, 87, 82, 188, 3, 202, 210, 189, 18, 209, 177, 61, 114, 228, 20, 62, 204, 70, 181, 60, 151, 219, 200, 188, 182, 248, 31, 62, 109, 101, 14, 62, 217, 79, 49, 62, 112, 241, 12, 62, 206, 168, 60, 60, 163, 239, 11, 62, 197, 234, 204, 61, 26, 195, 36, 62, 76, 180, 153, 189, 71, 38, 180, 188, 243, 48, 13, 190, 40, 233, 34, 62, 108, 150, 100, 189, 240, 127, 165, 60, 241, 64, 9, 62, 89, 134, 175, 189, 54, 24, 154, 189, 163, 39, 157, 61, 180, 224, 132, 189, 225, 151, 221, 189, 31, 218, 39, 62, 92, 11, 168, 61, 176, 13, 24, 190, 197, 180, 136, 61, 226, 169, 116, 61, 98, 116, 46, 190, 216, 218, 184, 61, 246, 136, 160, 189, 186, 238, 199, 189, 208, 16, 177, 61, 179, 166, 236, 187, 77, 210, 228, 189, 63, 219, 227, 189, 202, 76, 248, 60, 197, 228, 74, 189, 185, 117, 185, 61, 174, 59, 129, 189, 54, 173, 210, 61, 207, 99, 79, 61, 167, 232, 212, 188, 230, 18, 49, 190, 161, 144, 52, 62, 65, 78, 19, 62, 127, 7, 18, 62, 126, 44, 89, 61, 83, 149, 44, 62, 124, 242, 57, 189, 208, 5, 193, 188, 152, 211, 4, 189, 207, 196, 31, 62, 188, 40, 217, 187, 26, 181, 92, 188, 11, 138, 6, 190, 123, 105, 185, 61, 77, 154, 208, 189, 230, 162, 236, 186, 230, 54, 127, 61, 56, 12, 49, 188, 175, 168, 220, 61, 199, 206, 90, 189, 132, 66, 31, 190, 53, 24, 0, 190, 245, 167, 30, 62, 237, 244, 235, 61, 165, 93, 186, 188, 68, 87, 39, 190, 205, 33, 52, 62, 44, 193, 223, 61, 58, 56, 214, 189, 176, 118, 10, 190, 30, 131, 212, 60, 206, 147, 135, 61, 154, 92, 54, 188, 166, 175, 181, 61, 222, 250, 164, 61, 190, 233, 34, 62, 164, 212, 147, 188, 9, 14, 94, 61, 176, 240, 52, 61, 247, 58, 127, 188, 209, 36, 39, 62, 12, 164, 255, 61, 186, 221, 111, 189, 152, 204, 104, 61, 246, 29, 129, 189, 203, 211, 161, 187, 170, 155, 168, 61, 171, 68, 243, 189, 105, 158, 255, 61, 228, 102, 234, 61, 149, 174, 94, 189, 175, 246, 17, 190, 49, 129, 17, 189, 217, 113, 218, 61, 23, 253, 35, 62, 70, 200, 45, 189, 190, 147, 40, 61, 139, 56, 43, 62, 104, 19, 8, 190, 179, 21, 223, 188, 79, 237, 38, 62, 67, 134, 208, 61, 25, 46, 136, 61, 205, 255, 111, 188, 115, 113, 250, 189, 108, 131, 255, 189, 114, 226, 50, 61, 127, 226, 15, 61, 214, 113, 19, 189, 247, 210, 154, 189, 93, 178, 205, 61, 137, 59, 34, 190, 99, 139, 1, 190, 203, 23, 58, 61, 113, 40, 175, 189, 55, 92, 218, 61, 129, 44, 50, 62, 168, 189, 17, 62, 95, 131, 174, 189, 55, 177, 194, 61, 215, 120, 46, 61, 193, 144, 33, 189, 7, 147, 12, 189, 108, 30, 45, 190, 194, 1, 193, 61, 87, 93, 27, 57, 112, 182, 124, 60, 48, 31, 169, 61, 29, 176, 20, 190, 240, 146, 26, 62, 15, 98, 129, 189, 109, 79, 136, 189, 250, 205, 225, 59, 85, 223, 23, 190, 52, 183, 18, 190, 170, 27, 139, 187, 163, 91, 139, 61, 134, 91, 7, 61, 247, 197, 194, 188, 138, 40, 181, 189, 175, 131, 5, 60, 178, 112, 11, 62, 220, 233, 190, 61, 141, 71, 20, 62, 131, 176, 12, 190, 61, 146, 187, 189, 207, 189, 117, 61, 180, 163, 30, 60, 125, 230, 205, 61, 19, 113, 201, 61, 69, 190, 154, 189, 42, 238, 103, 61, 27, 151, 189, 189, 82, 248, 220, 61, 93, 162, 199, 60, 117, 218, 37, 62, 38, 124, 33, 62, 43, 146, 252, 189, 136, 159, 24, 62, 49, 141, 187, 61, 145, 206, 6, 62, 240, 224, 118, 61, 223, 129, 163, 61, 9, 9, 194, 61, 118, 248, 57, 189, 27, 186, 244, 189, 92, 139, 50, 62, 128, 21, 15, 190, 223, 160, 23, 190, 248, 235, 226, 61, 234, 187, 158, 61, 195, 241, 42, 62, 218, 35, 153, 189, 168, 59, 7, 62, 141, 214, 137, 188, 161, 121, 73, 61, 223, 255, 202, 61, 66, 53, 159, 188, 243, 35, 62, 61, 220, 171, 193, 189, 207, 61, 25, 190, 135, 7, 101, 60, 152, 205, 46, 190, 97, 133, 223, 60, 208, 145, 203, 60, 255, 7, 213, 61, 107, 190, 146, 189, 229, 142, 103, 189, 9, 164, 23, 190, 105, 213, 251, 61, 171, 210, 39, 62, 174, 14, 45, 189, 234, 26, 42, 190, 80, 50, 121, 61, 224, 32, 54, 61, 86, 249, 182, 189, 57, 71, 46, 189, 49, 201, 2, 62, 111, 7, 52, 190, 101, 10, 43, 62, 190, 203, 184, 61, 222, 234, 32, 190, 118, 86, 221, 189, 30, 229, 14, 62, 209, 77, 0, 190, 141, 246, 204, 189, 106, 170, 44, 62, 8, 56, 219, 189, 182, 11, 25, 190, 180, 89, 51, 61, 143, 3, 51, 190, 4, 100, 17, 190, 115, 198, 51, 62, 187, 122, 186, 189, 53, 113, 48, 190, 175, 73, 179, 187, 61, 186, 12, 189, 48, 48, 185, 189, 157, 253, 46, 62, 199, 206, 5, 190, 55, 194, 155, 61, 220, 40, 20, 62, 59, 200, 133, 60, 99, 229, 234, 61, 14, 234, 227, 61, 97, 18, 186, 61, 60, 69, 23, 60, 216, 204, 10, 189, 136, 202, 34, 61, 235, 6, 233, 61, 197, 224, 194, 188, 135, 147, 77, 61, 206, 43, 49, 189, 238, 138, 205, 61, 9, 229, 7, 188, 210, 59, 211, 189, 42, 44, 212, 188, 8, 153, 156, 189, 65, 69, 36, 61, 149, 214, 49, 62, 116, 161, 128, 189, 37, 16, 199, 61, 24, 1, 26, 190, 247, 97, 7, 190, 74, 88, 17, 61, 74, 229, 97, 189, 145, 108, 216, 61, 202, 140, 34, 190, 13, 120, 5, 189, 196, 238, 167, 187, 220, 17, 8, 62, 235, 162, 147, 189, 170, 8, 48, 61, 208, 229, 168, 59, 137, 140, 11, 60, 115, 50, 25, 189, 211, 234, 15, 60, 223, 254, 27, 190, 72, 80, 132, 61, 57, 252, 152, 61, 106, 255, 67, 60, 133, 249, 232, 189, 14, 153, 204, 61, 227, 155, 132, 60, 98, 242, 46, 190, 21, 148, 135, 189, 233, 1, 9, 59, 115, 122, 9, 62, 197, 8, 135, 61, 167, 30, 3, 62, 90, 226, 76, 185, 212, 251, 208, 189, 109, 250, 91, 61, 109, 42, 11, 60, 235, 86, 157, 189, 58, 176, 21, 189, 66, 42, 184, 189, 239, 60, 168, 61, 30, 141, 218, 60, 120, 110, 167, 61, 41, 116, 0, 62, 201, 82, 171, 61, 253, 201, 223, 189, 201, 238, 51, 62, 250, 21, 166, 60, 197, 42, 159, 189, 65, 130, 44, 62, 150, 228, 21, 62, 233, 207, 48, 190, 97, 215, 136, 189, 20, 117, 222, 189, 14, 115, 19, 62, 103, 60, 225, 60, 180, 248, 2, 60, 182, 22, 37, 59, 111, 143, 181, 189, 53, 171, 221, 189, 127, 25, 14, 190, 120, 62, 202, 61, 32, 24, 20, 62, 6, 35, 135, 59, 56, 5, 134, 60, 35, 187, 211, 189, 60, 139, 10, 62, 46, 179, 251, 189, 164, 96, 2, 190, 234, 52, 37, 62, 96, 85, 26, 62, 117, 165, 247, 189, 132, 250, 194, 189, 68, 46, 169, 61, 185, 183, 119, 188, 123, 184, 187, 61, 148, 115, 215, 61, 240, 127, 16, 188, 15, 122, 187, 189, 170, 4, 3, 62, 33, 136, 208, 61, 154, 112, 1, 62, 141, 246, 170, 59, 222, 40, 238, 59, 135, 138, 51, 190, 178, 158, 50, 61, 215, 50, 33, 60, 6, 109, 210, 189, 48, 218, 233, 189, 59, 0, 255, 188, 127, 101, 184, 61, 51, 28, 73, 61, 6, 180, 137, 61, 247, 242, 226, 61, 228, 8, 85, 189, 182, 8, 31, 190, 74, 215, 58, 61, 137, 86, 31, 62, 242, 243, 178, 187, 182, 176, 12, 62, 115, 108, 213, 61, 215, 144, 8, 189, 132, 106, 127, 60, 6, 148, 224, 60, 104, 28, 149, 61, 206, 206, 24, 61, 41, 151, 37, 62, 58, 183, 175, 61, 102, 131, 0, 190, 51, 54, 190, 55, 94, 250, 226, 60, 169, 90, 62, 61, 210, 7, 154, 61, 64, 158, 214, 61, 45, 226, 4, 190, 62, 172, 45, 61, 199, 26, 12, 190, 163, 128, 26, 189, 19, 37, 54, 189, 21, 158, 181, 60, 47, 200, 3, 189, 242, 221, 29, 190, 12, 12, 222, 61, 82, 13, 203, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 37, 144, 189, 130, 162, 20, 189, 106, 163, 20, 189, 240, 187, 46, 189, 116, 113, 212, 189, 227, 45, 145, 187, 203, 221, 5, 190, 56, 126, 147, 60, 97, 31, 128, 61, 88, 226, 201, 189, 119, 105, 15, 190, 91, 152, 34, 62, 198, 73, 13, 190, 70, 20, 33, 62, 64, 170, 105, 189, 97, 80, 120, 189, 127, 197, 161, 189, 122, 8, 134, 189, 178, 173, 14, 62, 192, 25, 192, 61, 94, 31, 41, 190, 180, 229, 199, 61, 97, 188, 243, 189, 42, 163, 36, 189, 174, 138, 136, 189, 241, 193, 200, 189, 136, 142, 226, 188, 40, 38, 20, 62, 195, 133, 154, 189, 196, 242, 18, 62, 9, 79, 209, 189, 232, 176, 131, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 25, 40, 190, 201, 10, 235, 61, 12, 200, 212, 189, 92, 158, 80, 57, 150, 204, 37, 62, 143, 53, 199, 188, 102, 12, 65, 59, 103, 241, 46, 60, 116, 33, 21, 190, 163, 23, 54, 189, 240, 124, 237, 189, 90, 160, 45, 190, 2, 136, 213, 189, 178, 124, 18, 190, 210, 152, 17, 190, 51, 125, 228, 188, 24, 25, 17, 61, 195, 133, 238, 187, 248, 78, 50, 188, 87, 229, 255, 189, 245, 138, 177, 61, 246, 127, 156, 60, 248, 45, 94, 61, 242, 176, 26, 190, 74, 156, 190, 189, 1, 87, 8, 190, 193, 142, 242, 189, 218, 29, 93, 189, 229, 14, 171, 189, 178, 5, 40, 62, 29, 51, 65, 61, 24, 171, 171, 61, 48, 89, 182, 61, 88, 195, 16, 190, 247, 248, 4, 190, 237, 227, 140, 187, 108, 71, 14, 190, 182, 230, 140, 188, 207, 206, 3, 62, 27, 31, 161, 188, 118, 175, 30, 60, 73, 78, 23, 62, 59, 218, 19, 61, 122, 82, 154, 188, 212, 249, 46, 62, 154, 170, 162, 188, 254, 114, 181, 60, 86, 241, 195, 188, 163, 50, 84, 188, 95, 159, 230, 61, 224, 252, 45, 61, 71, 17, 194, 61, 212, 255, 9, 190, 210, 14, 7, 190, 84, 248, 128, 61, 33, 16, 16, 190, 142, 101, 62, 61, 55, 45, 212, 189, 246, 108, 99, 60, 104, 254, 67, 189, 40, 35, 242, 61, 52, 170, 15, 62, 4, 88, 11, 62, 73, 240, 152, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 31, 211, 61, 222, 28, 218, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {198, 202, 194, 191, 223, 58, 75, 191, 111, 240, 162, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {240, 163, 156, 61, 93, 41, 167, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0067/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}