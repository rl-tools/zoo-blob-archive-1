// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 24, 41, 63, 174, 211, 8, 191, 233, 67, 166, 190, 206, 24, 250, 62, 52, 143, 60, 191, 115, 228, 234, 190, 3, 220, 183, 62, 139, 154, 158, 191, 165, 45, 83, 190, 59, 66, 166, 186, 91, 245, 131, 191, 122, 90, 30, 191, 44, 50, 6, 189, 74, 235, 196, 190, 29, 93, 203, 62, 123, 48, 2, 63, 208, 54, 139, 191, 126, 252, 203, 61, 150, 179, 189, 62, 160, 89, 80, 191, 66, 148, 47, 190, 89, 67, 35, 63, 171, 209, 157, 63, 209, 166, 172, 62, 199, 42, 25, 191, 40, 201, 216, 190, 235, 103, 203, 189, 37, 97, 1, 63, 92, 75, 102, 190, 135, 216, 229, 62, 194, 161, 217, 62, 109, 165, 137, 191, 169, 138, 129, 190, 124, 52, 233, 61, 192, 196, 136, 63, 46, 155, 149, 190, 54, 204, 93, 62, 178, 53, 0, 191, 33, 40, 10, 62, 109, 51, 5, 190, 4, 146, 106, 190, 150, 210, 135, 190, 253, 107, 201, 190, 240, 112, 182, 190, 57, 232, 41, 191, 103, 233, 143, 190, 123, 18, 98, 62, 91, 191, 55, 63, 155, 102, 44, 63, 228, 129, 53, 191, 181, 91, 141, 190, 160, 212, 117, 191, 95, 190, 246, 190, 31, 117, 33, 59, 204, 65, 250, 190, 128, 235, 130, 190, 90, 102, 150, 62, 125, 219, 54, 62, 240, 174, 223, 62, 135, 60, 149, 190, 195, 21, 34, 188, 74, 252, 131, 191, 187, 160, 183, 62, 5, 22, 45, 63, 200, 36, 58, 191, 209, 111, 123, 190, 63, 34, 61, 190, 45, 137, 77, 63, 187, 129, 147, 61, 28, 208, 18, 63, 97, 199, 152, 191, 218, 143, 32, 190, 16, 144, 255, 190, 28, 249, 53, 190, 173, 44, 181, 190, 166, 127, 186, 62, 7, 88, 152, 189, 170, 113, 5, 191, 226, 79, 145, 189, 13, 224, 172, 62, 220, 141, 192, 190, 50, 127, 69, 63, 227, 125, 136, 63, 25, 7, 195, 62, 56, 139, 188, 189, 21, 59, 171, 191, 188, 116, 161, 190, 205, 118, 6, 62, 144, 65, 131, 63, 204, 195, 194, 62, 122, 110, 158, 62, 129, 53, 57, 191, 149, 9, 219, 190, 14, 210, 111, 190, 148, 214, 27, 190, 196, 169, 32, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 140, 54, 191, 68, 9, 196, 189, 236, 246, 22, 190, 139, 53, 68, 189, 206, 140, 140, 61, 135, 33, 218, 189, 36, 244, 45, 59, 102, 201, 63, 190, 33, 248, 37, 63, 115, 104, 89, 191, 72, 215, 111, 62, 98, 17, 175, 62, 135, 74, 93, 62, 8, 38, 66, 190, 115, 53, 23, 191, 2, 154, 247, 189, 201, 33, 55, 191, 50, 57, 18, 63, 210, 85, 215, 62, 137, 122, 24, 63, 52, 66, 25, 62, 139, 73, 6, 191, 242, 94, 31, 63, 136, 58, 50, 63, 52, 120, 15, 191, 164, 175, 31, 62, 200, 64, 3, 62, 174, 213, 139, 60, 240, 38, 109, 61, 112, 252, 183, 62, 192, 78, 191, 189, 247, 160, 100, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 22, 153, 190, 91, 145, 122, 190, 95, 36, 168, 190, 245, 28, 194, 61, 242, 215, 134, 190, 133, 210, 208, 190, 60, 103, 185, 190, 60, 57, 206, 62, 160, 5, 117, 190, 83, 240, 136, 61, 38, 198, 101, 190, 37, 121, 70, 190, 139, 242, 139, 60, 141, 11, 179, 61, 8, 217, 109, 188, 205, 163, 255, 189, 5, 113, 87, 190, 78, 13, 243, 59, 50, 178, 1, 190, 119, 248, 42, 62, 97, 251, 191, 189, 159, 160, 25, 191, 208, 21, 189, 189, 38, 58, 9, 62, 238, 151, 138, 61, 233, 50, 41, 189, 78, 122, 92, 60, 145, 141, 116, 62, 245, 221, 151, 61, 169, 27, 26, 190, 117, 60, 171, 189, 190, 195, 211, 62, 109, 57, 56, 62, 238, 187, 178, 62, 107, 30, 174, 62, 187, 32, 163, 190, 156, 130, 244, 60, 24, 47, 129, 62, 29, 140, 158, 62, 6, 81, 136, 190, 28, 181, 60, 62, 182, 220, 203, 190, 234, 18, 43, 62, 235, 21, 180, 60, 57, 227, 46, 62, 181, 150, 30, 62, 191, 206, 252, 190, 224, 34, 73, 62, 207, 65, 206, 189, 203, 47, 151, 60, 54, 219, 202, 62, 91, 120, 190, 60, 225, 33, 175, 190, 4, 88, 152, 190, 52, 55, 41, 60, 219, 93, 58, 62, 192, 22, 173, 190, 69, 127, 154, 62, 150, 151, 142, 60, 17, 221, 170, 190, 97, 121, 210, 190, 47, 99, 198, 61, 135, 25, 148, 62, 159, 200, 11, 190, 126, 80, 11, 190, 154, 127, 87, 62, 68, 67, 226, 190, 49, 43, 140, 190, 80, 182, 232, 189, 236, 61, 193, 61, 150, 77, 129, 62, 73, 72, 162, 190, 111, 118, 116, 188, 129, 188, 206, 61, 11, 180, 139, 62, 77, 75, 185, 61, 153, 92, 137, 62, 193, 114, 121, 190, 30, 50, 166, 190, 16, 159, 62, 60, 222, 179, 192, 190, 239, 235, 141, 189, 218, 51, 119, 61, 252, 61, 127, 189, 71, 51, 206, 60, 215, 17, 194, 190, 206, 188, 94, 189, 174, 16, 133, 62, 161, 68, 179, 189, 162, 6, 34, 62, 154, 87, 5, 60, 229, 9, 71, 188, 100, 1, 249, 190, 150, 24, 221, 61, 234, 240, 10, 190, 76, 96, 197, 190, 115, 200, 214, 188, 237, 95, 173, 189, 224, 185, 44, 62, 219, 114, 19, 190, 19, 62, 161, 62, 31, 46, 128, 62, 9, 101, 203, 62, 58, 30, 74, 191, 227, 197, 153, 61, 86, 231, 206, 190, 98, 105, 55, 62, 114, 25, 63, 62, 218, 207, 157, 62, 35, 33, 2, 189, 40, 199, 193, 189, 83, 239, 45, 62, 34, 199, 43, 187, 40, 1, 107, 190, 39, 122, 110, 62, 124, 247, 76, 60, 124, 205, 109, 189, 192, 110, 111, 189, 179, 53, 125, 190, 60, 211, 4, 61, 149, 84, 107, 190, 205, 72, 7, 189, 44, 187, 140, 61, 237, 33, 8, 191, 175, 235, 11, 190, 150, 67, 42, 190, 166, 120, 207, 61, 252, 205, 97, 61, 31, 59, 187, 61, 84, 63, 51, 62, 190, 93, 20, 62, 141, 30, 202, 188, 89, 160, 16, 62, 218, 158, 85, 62, 132, 12, 163, 62, 245, 186, 51, 190, 204, 124, 1, 61, 192, 235, 31, 186, 187, 76, 145, 62, 44, 167, 246, 61, 35, 152, 153, 188, 68, 131, 18, 190, 81, 242, 126, 190, 150, 139, 54, 62, 30, 181, 167, 189, 13, 240, 186, 60, 156, 3, 162, 189, 25, 53, 199, 189, 109, 92, 165, 59, 227, 121, 146, 190, 79, 7, 55, 62, 73, 111, 29, 62, 207, 180, 7, 189, 22, 148, 24, 62, 45, 73, 167, 188, 196, 245, 201, 60, 202, 42, 165, 190, 0, 25, 146, 187, 130, 201, 72, 62, 214, 108, 95, 190, 32, 93, 192, 190, 3, 53, 22, 189, 227, 254, 23, 190, 6, 147, 209, 61, 244, 209, 149, 190, 190, 86, 215, 190, 39, 34, 64, 190, 106, 54, 154, 61, 18, 79, 27, 190, 91, 17, 20, 190, 169, 172, 188, 61, 4, 138, 80, 190, 202, 115, 78, 189, 56, 14, 173, 189, 165, 229, 111, 62, 127, 142, 241, 189, 250, 93, 237, 190, 23, 52, 188, 61, 155, 177, 47, 61, 8, 150, 89, 62, 132, 4, 231, 61, 158, 233, 21, 191, 68, 49, 159, 188, 142, 47, 213, 62, 63, 185, 57, 190, 85, 237, 3, 190, 182, 190, 153, 190, 220, 98, 171, 62, 94, 109, 30, 62, 60, 117, 241, 189, 63, 156, 116, 190, 91, 95, 113, 62, 160, 216, 30, 62, 142, 161, 157, 190, 49, 2, 40, 191, 209, 37, 163, 60, 56, 212, 183, 189, 191, 208, 235, 62, 252, 65, 179, 190, 84, 33, 135, 62, 225, 125, 84, 191, 0, 65, 172, 62, 189, 166, 139, 190, 183, 177, 48, 188, 74, 12, 192, 60, 15, 243, 60, 61, 185, 25, 29, 62, 112, 103, 31, 62, 185, 99, 240, 59, 134, 154, 45, 191, 0, 207, 102, 190, 193, 65, 44, 61, 225, 167, 103, 62, 254, 246, 36, 190, 48, 93, 58, 190, 22, 9, 127, 62, 206, 64, 14, 62, 23, 181, 123, 190, 77, 128, 251, 190, 85, 58, 26, 62, 81, 168, 12, 191, 150, 197, 130, 61, 44, 7, 132, 190, 5, 249, 198, 61, 2, 191, 30, 189, 188, 2, 201, 189, 94, 201, 253, 60, 194, 146, 22, 188, 207, 184, 1, 62, 54, 52, 219, 61, 221, 224, 38, 62, 197, 226, 71, 190, 9, 223, 78, 62, 17, 116, 127, 190, 115, 176, 171, 61, 197, 161, 65, 62, 55, 64, 102, 62, 83, 1, 179, 189, 186, 134, 116, 61, 200, 125, 44, 61, 23, 170, 74, 190, 93, 112, 206, 60, 232, 199, 142, 62, 241, 150, 134, 189, 145, 37, 69, 190, 49, 149, 132, 190, 250, 109, 31, 190, 200, 219, 13, 62, 171, 248, 157, 189, 99, 27, 27, 60, 14, 226, 133, 61, 224, 176, 137, 190, 191, 123, 99, 190, 183, 24, 170, 60, 88, 195, 175, 189, 223, 54, 97, 61, 5, 181, 185, 60, 78, 101, 5, 190, 55, 23, 177, 190, 84, 236, 233, 189, 210, 190, 36, 62, 16, 74, 213, 190, 190, 146, 116, 190, 91, 181, 149, 190, 15, 222, 185, 62, 104, 123, 143, 190, 205, 146, 218, 190, 242, 191, 173, 190, 196, 41, 140, 190, 195, 169, 194, 190, 198, 205, 37, 190, 51, 107, 187, 61, 158, 29, 199, 187, 204, 158, 214, 62, 138, 82, 30, 188, 106, 176, 190, 190, 7, 148, 143, 189, 78, 211, 191, 61, 28, 204, 127, 62, 122, 158, 31, 190, 225, 63, 106, 60, 137, 203, 198, 190, 30, 253, 1, 191, 100, 121, 174, 190, 73, 5, 202, 61, 139, 168, 36, 190, 43, 188, 201, 190, 197, 179, 172, 190, 193, 195, 149, 60, 98, 30, 196, 190, 145, 232, 136, 191, 246, 13, 185, 61, 196, 8, 215, 189, 238, 221, 40, 191, 52, 189, 5, 191, 108, 198, 111, 190, 160, 227, 183, 62, 196, 100, 182, 190, 167, 61, 98, 191, 167, 218, 23, 191, 244, 253, 229, 61, 126, 148, 69, 190, 76, 2, 53, 62, 31, 210, 1, 191, 232, 22, 76, 190, 1, 129, 159, 62, 146, 169, 153, 61, 212, 85, 30, 190, 205, 90, 132, 62, 23, 18, 227, 189, 161, 73, 55, 190, 4, 73, 191, 62, 19, 31, 29, 189, 66, 145, 8, 190, 253, 200, 4, 191, 226, 136, 102, 61, 168, 50, 218, 61, 22, 214, 42, 191, 243, 116, 37, 191, 124, 118, 114, 62, 127, 170, 63, 190, 236, 72, 127, 190, 117, 226, 248, 190, 74, 110, 63, 62, 73, 93, 61, 190, 108, 223, 209, 190, 77, 145, 246, 189, 85, 45, 202, 62, 174, 80, 134, 190, 12, 132, 129, 60, 51, 60, 94, 190, 234, 91, 211, 60, 74, 137, 140, 190, 54, 41, 214, 189, 168, 169, 122, 62, 233, 203, 85, 190, 151, 158, 174, 190, 232, 75, 194, 189, 93, 26, 147, 189, 114, 79, 108, 62, 163, 219, 134, 61, 240, 78, 28, 191, 54, 138, 25, 190, 162, 252, 224, 61, 194, 72, 254, 188, 203, 150, 138, 189, 84, 43, 19, 190, 80, 58, 99, 62, 48, 158, 130, 189, 164, 198, 172, 189, 228, 243, 90, 190, 44, 87, 176, 62, 44, 121, 137, 190, 27, 157, 167, 189, 133, 62, 150, 190, 17, 74, 33, 62, 196, 196, 241, 189, 178, 164, 165, 190, 50, 166, 174, 189, 161, 238, 126, 60, 153, 200, 14, 62, 236, 237, 112, 190, 147, 63, 222, 59, 46, 145, 27, 61, 253, 162, 138, 188, 120, 150, 4, 190, 39, 130, 38, 62, 127, 245, 170, 189, 121, 207, 9, 191, 57, 134, 141, 189, 220, 194, 141, 61, 208, 63, 13, 62, 157, 102, 70, 62, 124, 6, 18, 191, 232, 138, 129, 189, 79, 116, 21, 62, 228, 122, 199, 189, 69, 45, 39, 190, 150, 236, 149, 60, 150, 177, 10, 62, 69, 99, 115, 61, 85, 196, 189, 189, 111, 135, 58, 189, 159, 247, 134, 61, 50, 3, 102, 188, 223, 155, 184, 61, 83, 34, 177, 60, 236, 57, 239, 189, 130, 121, 188, 60, 179, 116, 65, 62, 23, 150, 97, 61, 245, 177, 134, 189, 216, 102, 233, 61, 101, 33, 31, 61, 15, 224, 196, 189, 177, 129, 179, 187, 74, 37, 104, 188, 201, 98, 221, 61, 65, 58, 191, 61, 10, 41, 176, 189, 147, 46, 158, 189, 210, 250, 222, 189, 133, 235, 64, 190, 227, 8, 1, 189, 182, 148, 173, 189, 212, 63, 169, 61, 8, 117, 188, 190, 144, 37, 57, 190, 239, 168, 56, 61, 218, 18, 145, 61, 126, 161, 48, 189, 52, 218, 34, 189, 167, 144, 11, 189, 253, 84, 7, 190, 241, 42, 228, 60, 238, 191, 238, 188, 215, 41, 167, 189, 57, 139, 139, 189, 241, 99, 38, 61, 249, 250, 48, 61, 195, 23, 19, 190, 222, 101, 107, 61, 112, 65, 9, 190, 182, 35, 155, 61, 242, 110, 192, 186, 112, 116, 4, 62, 31, 187, 182, 188, 119, 70, 131, 61, 52, 21, 131, 60, 218, 38, 101, 189, 51, 188, 10, 62, 230, 123, 41, 190, 14, 132, 74, 188, 162, 197, 202, 189, 166, 153, 232, 61, 57, 154, 38, 190, 128, 104, 0, 189, 30, 104, 219, 189, 2, 42, 15, 190, 132, 33, 233, 189, 60, 89, 5, 62, 115, 113, 102, 61, 11, 149, 38, 188, 228, 129, 11, 190, 213, 235, 26, 190, 118, 177, 116, 189, 73, 207, 7, 61, 23, 241, 243, 189, 222, 43, 219, 61, 213, 54, 2, 62, 27, 102, 175, 61, 110, 186, 44, 189, 46, 33, 151, 190, 21, 131, 107, 190, 18, 43, 51, 189, 111, 73, 16, 61, 8, 251, 145, 62, 224, 67, 85, 190, 41, 78, 215, 61, 134, 124, 192, 190, 79, 202, 215, 190, 156, 234, 203, 189, 30, 103, 45, 189, 168, 186, 42, 191, 83, 169, 160, 62, 69, 144, 177, 62, 117, 187, 93, 189, 195, 171, 120, 189, 55, 15, 52, 190, 172, 165, 141, 62, 175, 38, 88, 189, 126, 57, 245, 61, 99, 218, 99, 61, 87, 118, 8, 188, 86, 172, 109, 189, 9, 239, 128, 60, 59, 39, 114, 62, 69, 80, 227, 190, 11, 236, 42, 189, 109, 183, 73, 189, 52, 227, 212, 190, 159, 220, 105, 190, 105, 90, 244, 190, 15, 240, 255, 61, 80, 183, 24, 189, 136, 222, 198, 190, 40, 138, 152, 60, 124, 98, 4, 62, 187, 72, 49, 190, 234, 114, 186, 189, 83, 103, 194, 189, 185, 181, 62, 189, 164, 200, 169, 61, 142, 184, 255, 60, 176, 140, 5, 62, 79, 213, 175, 190, 234, 80, 244, 190, 57, 95, 186, 189, 38, 14, 10, 62, 244, 235, 67, 62, 100, 190, 235, 61, 29, 12, 9, 191, 85, 130, 23, 62, 102, 163, 195, 62, 161, 43, 71, 61, 183, 50, 7, 190, 195, 217, 82, 188, 234, 18, 37, 62, 112, 70, 162, 62, 68, 192, 146, 189, 29, 57, 8, 190, 250, 240, 84, 62, 83, 215, 3, 60, 180, 87, 1, 190, 208, 161, 218, 189, 217, 221, 13, 191, 186, 90, 8, 62, 41, 104, 229, 190, 80, 115, 13, 190, 133, 118, 17, 189, 99, 110, 238, 59, 69, 157, 74, 189, 219, 221, 221, 189, 218, 8, 213, 190, 60, 231, 116, 189, 78, 108, 68, 61, 130, 23, 19, 191, 123, 249, 63, 62, 18, 118, 252, 61, 125, 240, 90, 61, 35, 118, 136, 62, 16, 200, 237, 61, 125, 174, 143, 59, 76, 172, 29, 60, 204, 99, 105, 61, 235, 42, 10, 191, 120, 234, 28, 62, 6, 24, 225, 189, 89, 220, 110, 190, 220, 1, 15, 190, 252, 196, 140, 191, 103, 145, 156, 61, 35, 90, 8, 62, 11, 30, 31, 190, 172, 54, 52, 189, 205, 132, 44, 62, 158, 198, 51, 189, 128, 144, 32, 190, 227, 209, 234, 60, 84, 102, 3, 190, 158, 51, 53, 58, 52, 81, 106, 189, 4, 158, 53, 61, 73, 71, 149, 189, 137, 182, 46, 60, 39, 237, 226, 188, 39, 12, 116, 61, 120, 23, 5, 62, 24, 243, 36, 190, 149, 203, 56, 190, 142, 78, 157, 189, 138, 9, 250, 189, 141, 50, 155, 61, 140, 75, 6, 190, 152, 9, 101, 187, 198, 246, 233, 56, 209, 102, 204, 61, 8, 190, 69, 189, 141, 184, 117, 61, 27, 78, 153, 189, 96, 221, 37, 190, 124, 222, 148, 58, 216, 157, 27, 61, 155, 186, 70, 60, 127, 158, 12, 61, 134, 45, 96, 186, 247, 230, 27, 191, 126, 152, 156, 190, 164, 126, 223, 190, 149, 236, 174, 62, 110, 152, 168, 190, 60, 25, 147, 190, 200, 90, 29, 190, 119, 177, 112, 62, 238, 183, 140, 188, 117, 182, 110, 189, 187, 141, 58, 190, 125, 68, 172, 60, 101, 191, 44, 190, 116, 101, 214, 187, 91, 77, 150, 61, 244, 141, 227, 190, 156, 124, 14, 191, 125, 9, 61, 190, 41, 39, 208, 188, 128, 86, 47, 62, 199, 252, 172, 62, 106, 72, 238, 190, 1, 1, 76, 61, 220, 69, 198, 62, 85, 54, 39, 190, 255, 201, 85, 190, 68, 231, 91, 190, 103, 253, 109, 62, 177, 43, 157, 62, 154, 78, 82, 61, 193, 112, 66, 190, 212, 26, 205, 62, 56, 216, 192, 190, 235, 177, 71, 190, 13, 37, 142, 190, 78, 181, 71, 62, 143, 192, 56, 190, 162, 48, 227, 189, 184, 111, 176, 190, 9, 224, 134, 62, 173, 176, 91, 190, 127, 7, 142, 188, 190, 192, 119, 190, 172, 87, 150, 189, 105, 22, 104, 190, 191, 82, 77, 189, 101, 111, 2, 62, 175, 104, 94, 190, 126, 229, 83, 190, 234, 50, 15, 62, 12, 171, 58, 187, 5, 185, 67, 188, 124, 180, 107, 62, 83, 65, 30, 191, 188, 87, 134, 61, 169, 229, 137, 62, 107, 9, 73, 190, 46, 26, 40, 60, 41, 33, 199, 61, 200, 203, 26, 59, 66, 170, 133, 62, 20, 52, 30, 189, 117, 244, 123, 190, 140, 139, 107, 62, 170, 174, 202, 189, 96, 225, 93, 62, 132, 1, 52, 190, 159, 193, 220, 188, 248, 136, 201, 189, 211, 63, 85, 62, 200, 59, 31, 62, 141, 37, 223, 190, 18, 210, 239, 61, 34, 147, 182, 61, 126, 84, 147, 61, 71, 58, 34, 61, 174, 118, 67, 62, 80, 71, 145, 189, 109, 150, 45, 62, 11, 71, 32, 190, 111, 118, 126, 61, 251, 36, 231, 188, 80, 95, 34, 190, 80, 34, 43, 62, 68, 2, 126, 62, 206, 204, 26, 190, 2, 45, 12, 190, 128, 80, 216, 62, 57, 106, 19, 61, 21, 161, 120, 62, 39, 48, 169, 61, 244, 17, 5, 190, 39, 168, 49, 62, 26, 237, 135, 189, 226, 94, 21, 62, 239, 107, 152, 189, 80, 247, 98, 189, 84, 137, 124, 190, 178, 121, 170, 62, 49, 61, 41, 191, 184, 199, 91, 61, 140, 85, 227, 61, 89, 78, 159, 62, 108, 141, 2, 191, 247, 25, 58, 62, 75, 74, 178, 190, 212, 137, 108, 62, 67, 197, 47, 187, 102, 185, 25, 61, 238, 159, 222, 61, 7, 33, 18, 190, 36, 210, 55, 62, 69, 162, 73, 190, 58, 14, 189, 61, 128, 244, 33, 61, 233, 114, 49, 190, 118, 33, 150, 189, 219, 102, 72, 61, 36, 36, 28, 62, 162, 150, 62, 190, 32, 156, 12, 63, 81, 84, 163, 190, 32, 0, 155, 62, 118, 133, 189, 190, 118, 164, 171, 191, 99, 83, 135, 62, 58, 172, 177, 189, 3, 193, 44, 190, 122, 159, 193, 62, 91, 12, 160, 62, 130, 10, 185, 62, 0, 27, 92, 190, 65, 118, 166, 62, 152, 217, 97, 62, 60, 87, 166, 62, 211, 207, 219, 190, 11, 120, 34, 62, 142, 71, 241, 190, 167, 188, 50, 62, 169, 237, 135, 188, 194, 203, 16, 62, 184, 217, 17, 189, 148, 100, 182, 190, 72, 32, 122, 62, 133, 50, 54, 188, 23, 48, 103, 188, 154, 64, 74, 62, 192, 141, 59, 190, 33, 19, 208, 190, 180, 83, 147, 188, 93, 190, 118, 62, 67, 157, 15, 62, 183, 146, 196, 190, 250, 210, 119, 62, 248, 214, 106, 62, 6, 187, 230, 190, 225, 167, 219, 190, 64, 91, 95, 62, 181, 96, 56, 62, 145, 47, 24, 190, 191, 130, 198, 188, 251, 7, 240, 61, 41, 100, 168, 189, 230, 4, 60, 190, 146, 168, 70, 61, 166, 122, 185, 189, 182, 18, 120, 189, 231, 117, 42, 62, 202, 190, 14, 60, 140, 7, 127, 189, 119, 109, 254, 61, 212, 57, 247, 58, 93, 180, 93, 61, 239, 181, 190, 61, 43, 32, 159, 190, 72, 118, 2, 62, 154, 70, 254, 61, 115, 219, 144, 188, 203, 231, 235, 189, 170, 166, 232, 61, 123, 53, 21, 61, 4, 188, 148, 61, 20, 228, 106, 61, 65, 84, 44, 62, 180, 127, 135, 62, 117, 180, 97, 61, 208, 181, 14, 62, 243, 7, 60, 62, 5, 216, 113, 188, 156, 67, 193, 61, 60, 78, 95, 189, 84, 151, 136, 190, 211, 242, 209, 190, 63, 195, 179, 189, 86, 78, 205, 190, 17, 145, 220, 61, 209, 220, 90, 191, 104, 185, 137, 190, 150, 55, 26, 190, 190, 152, 14, 190, 46, 148, 10, 62, 150, 223, 87, 190, 238, 53, 250, 61, 174, 187, 162, 188, 7, 96, 75, 189, 185, 255, 114, 190, 43, 112, 78, 62, 251, 89, 139, 191, 32, 58, 18, 191, 7, 58, 147, 61, 73, 56, 89, 190, 170, 112, 96, 62, 139, 164, 81, 61, 99, 241, 28, 191, 11, 152, 169, 61, 220, 54, 85, 62, 248, 82, 44, 61, 236, 137, 22, 190, 224, 229, 85, 190, 191, 85, 192, 61, 143, 93, 171, 188, 3, 104, 180, 190, 224, 158, 37, 190, 69, 42, 133, 62, 160, 170, 229, 190, 255, 63, 214, 60, 174, 24, 22, 191, 43, 246, 230, 189, 80, 93, 249, 61, 216, 109, 204, 61, 22, 12, 234, 61, 15, 212, 176, 189, 233, 12, 79, 191, 0, 158, 141, 62, 83, 178, 199, 61, 30, 131, 68, 62, 178, 104, 76, 62, 253, 116, 110, 189, 181, 180, 1, 60, 101, 149, 190, 189, 206, 27, 136, 191, 155, 103, 29, 191, 223, 86, 140, 61, 228, 202, 164, 62, 228, 136, 130, 188, 216, 62, 150, 190, 85, 158, 13, 62, 90, 175, 171, 62, 55, 120, 62, 62, 52, 78, 127, 62, 194, 168, 127, 62, 187, 168, 139, 61, 158, 142, 231, 190, 101, 32, 83, 62, 44, 155, 65, 190, 161, 48, 53, 190, 214, 206, 104, 62, 203, 247, 34, 62, 12, 47, 163, 62, 228, 40, 25, 189, 118, 95, 178, 62, 225, 112, 187, 61, 146, 177, 27, 62, 13, 86, 98, 61, 107, 198, 236, 61, 90, 230, 212, 61, 52, 242, 8, 189, 4, 104, 120, 190, 218, 193, 122, 62, 19, 67, 180, 189, 17, 63, 183, 188, 181, 191, 38, 62, 1, 250, 68, 62, 244, 83, 182, 61, 254, 86, 138, 61, 105, 168, 109, 190, 11, 57, 109, 62, 227, 120, 228, 62, 87, 120, 159, 189, 128, 213, 168, 59, 88, 234, 6, 61, 113, 41, 155, 61, 71, 228, 107, 189, 225, 98, 188, 189, 143, 197, 100, 62, 196, 116, 68, 190, 53, 81, 126, 62, 127, 6, 21, 61, 65, 159, 2, 191, 93, 94, 100, 190, 75, 137, 155, 190, 49, 86, 140, 61, 66, 41, 193, 190, 243, 248, 41, 190, 203, 241, 106, 190, 87, 3, 213, 60, 81, 194, 44, 189, 138, 52, 94, 190, 204, 167, 14, 190, 93, 176, 112, 61, 5, 101, 253, 189, 184, 41, 129, 190, 161, 82, 77, 62, 74, 85, 125, 190, 2, 8, 71, 191, 183, 57, 104, 62, 217, 76, 106, 189, 243, 29, 100, 62, 165, 112, 88, 62, 117, 176, 44, 191, 216, 206, 72, 62, 152, 91, 199, 62, 9, 117, 145, 61, 62, 213, 211, 188, 144, 155, 9, 190, 219, 47, 125, 62, 95, 55, 155, 62, 66, 65, 216, 188, 46, 48, 59, 189, 112, 139, 135, 61, 47, 33, 153, 61, 231, 75, 171, 187, 178, 55, 57, 190, 116, 122, 155, 190, 30, 71, 132, 190, 60, 74, 45, 190, 57, 76, 18, 62, 71, 234, 143, 190, 253, 161, 134, 188, 52, 8, 79, 190, 38, 12, 48, 190, 23, 35, 192, 62, 14, 90, 203, 190, 5, 180, 243, 60, 84, 29, 232, 190, 125, 195, 14, 60, 143, 103, 193, 60, 253, 151, 69, 189, 2, 134, 38, 190, 112, 254, 54, 62, 110, 78, 90, 190, 160, 153, 39, 61, 80, 61, 196, 61, 70, 3, 81, 190, 106, 66, 4, 191, 250, 37, 74, 62, 252, 42, 168, 62, 152, 150, 105, 190, 193, 145, 234, 190, 55, 209, 144, 62, 37, 132, 237, 186, 23, 152, 139, 190, 52, 92, 188, 189, 75, 182, 199, 189, 26, 82, 62, 61, 49, 58, 249, 190, 124, 241, 160, 61, 77, 203, 201, 189, 238, 146, 184, 190, 189, 61, 242, 189, 149, 216, 31, 62, 21, 141, 246, 189, 71, 189, 159, 190, 103, 158, 146, 190, 130, 99, 129, 190, 52, 70, 142, 62, 242, 20, 214, 189, 33, 195, 69, 62, 74, 160, 149, 61, 133, 205, 163, 60, 12, 170, 128, 62, 22, 248, 183, 189, 117, 139, 199, 190, 102, 65, 8, 62, 190, 214, 127, 62, 32, 243, 207, 191, 205, 152, 190, 62, 208, 194, 114, 190, 137, 22, 255, 62, 141, 161, 34, 190, 32, 25, 203, 191, 190, 47, 154, 61, 127, 149, 236, 189, 207, 238, 162, 61, 183, 97, 67, 190, 67, 49, 175, 61, 246, 146, 170, 62, 228, 106, 223, 59, 92, 242, 15, 188, 181, 13, 154, 61, 27, 146, 131, 62, 141, 157, 33, 190, 211, 104, 124, 189, 16, 134, 30, 62, 177, 5, 65, 62, 190, 35, 144, 190, 211, 191, 110, 189, 126, 132, 69, 61, 39, 105, 95, 189, 18, 57, 21, 60, 164, 253, 12, 62, 112, 102, 109, 61, 23, 90, 188, 189, 193, 206, 141, 188, 107, 1, 43, 62, 188, 214, 140, 62, 154, 195, 32, 190, 124, 78, 53, 61, 30, 243, 108, 190, 110, 103, 33, 189, 112, 180, 204, 189, 232, 116, 55, 190, 137, 63, 144, 189, 89, 172, 36, 190, 18, 2, 180, 61, 29, 107, 29, 60, 139, 236, 94, 61, 120, 17, 52, 62, 106, 64, 151, 189, 195, 236, 104, 190, 231, 113, 243, 61, 45, 124, 143, 62, 223, 163, 125, 62, 126, 53, 105, 190, 213, 199, 65, 62, 206, 215, 128, 190, 181, 183, 83, 62, 39, 235, 49, 61, 121, 96, 38, 62, 171, 15, 82, 189, 28, 63, 216, 61, 92, 45, 48, 62, 172, 190, 81, 190, 144, 222, 15, 189, 129, 135, 178, 61, 199, 204, 14, 62, 150, 202, 203, 189, 167, 7, 180, 189, 187, 214, 71, 189, 117, 126, 69, 62, 53, 163, 119, 190, 90, 41, 68, 61, 240, 81, 115, 189, 26, 240, 81, 190, 65, 73, 230, 189, 15, 131, 219, 189, 80, 32, 228, 61, 30, 248, 77, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {146, 132, 21, 188, 27, 71, 3, 62, 2, 47, 170, 61, 10, 116, 46, 62, 92, 123, 21, 188, 63, 221, 134, 61, 191, 33, 136, 190, 36, 156, 144, 62, 16, 177, 25, 62, 71, 98, 254, 189, 223, 174, 118, 189, 138, 50, 153, 62, 117, 66, 155, 190, 144, 118, 17, 62, 75, 131, 142, 189, 110, 10, 1, 62, 163, 75, 191, 61, 119, 222, 149, 189, 165, 64, 138, 62, 195, 185, 192, 61, 123, 107, 87, 189, 24, 230, 144, 62, 172, 98, 172, 60, 21, 153, 251, 61, 59, 11, 146, 61, 134, 200, 111, 187, 187, 121, 214, 187, 205, 35, 156, 62, 147, 139, 225, 189, 91, 92, 204, 61, 188, 170, 87, 190, 125, 161, 105, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {124, 165, 218, 190, 159, 31, 55, 63, 18, 160, 128, 61, 192, 107, 137, 62, 228, 158, 77, 62, 88, 145, 89, 190, 253, 251, 38, 191, 93, 72, 92, 61, 172, 21, 96, 191, 185, 128, 155, 191, 182, 18, 164, 190, 103, 94, 84, 190, 87, 46, 225, 189, 113, 38, 248, 189, 113, 34, 228, 190, 82, 56, 82, 190, 138, 233, 49, 62, 194, 88, 220, 187, 160, 76, 254, 190, 98, 104, 129, 190, 227, 43, 61, 62, 185, 152, 47, 63, 136, 253, 215, 62, 89, 142, 44, 190, 71, 25, 3, 191, 214, 187, 201, 190, 164, 48, 52, 190, 253, 147, 179, 190, 199, 178, 44, 191, 125, 247, 141, 63, 72, 68, 189, 187, 83, 84, 31, 62, 40, 108, 169, 62, 240, 153, 203, 189, 125, 60, 223, 190, 216, 58, 224, 61, 174, 120, 76, 190, 20, 15, 121, 59, 183, 114, 175, 62, 97, 51, 140, 189, 85, 252, 57, 61, 66, 92, 251, 61, 40, 10, 129, 62, 124, 16, 135, 60, 237, 175, 36, 62, 56, 108, 194, 188, 133, 183, 41, 189, 15, 8, 42, 189, 225, 31, 30, 190, 172, 101, 222, 61, 58, 157, 7, 62, 34, 108, 127, 62, 25, 126, 96, 190, 87, 185, 192, 189, 100, 172, 28, 62, 35, 89, 44, 190, 230, 170, 16, 190, 46, 26, 232, 190, 203, 140, 80, 62, 31, 136, 236, 189, 43, 196, 112, 62, 161, 129, 103, 62, 176, 74, 80, 62, 44, 234, 85, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 62, 54, 62, 21, 251, 202, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {97, 13, 186, 191, 65, 111, 46, 190, 252, 112, 98, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {157, 204, 214, 62, 234, 233, 212, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0067/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}