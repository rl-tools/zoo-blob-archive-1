// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 44, 62, 63, 16, 135, 35, 191, 58, 203, 167, 190, 174, 203, 238, 62, 168, 36, 60, 191, 149, 236, 250, 190, 248, 219, 196, 62, 185, 153, 171, 191, 11, 224, 114, 190, 215, 72, 10, 189, 124, 69, 161, 191, 170, 114, 237, 190, 213, 38, 85, 190, 71, 154, 78, 190, 249, 230, 189, 62, 88, 240, 8, 63, 142, 20, 113, 191, 159, 183, 198, 61, 32, 168, 189, 62, 218, 223, 94, 191, 16, 146, 28, 190, 98, 197, 48, 63, 210, 123, 169, 63, 171, 53, 151, 62, 169, 28, 23, 191, 80, 9, 49, 190, 177, 238, 7, 190, 85, 69, 247, 62, 133, 210, 103, 190, 28, 147, 249, 62, 198, 130, 132, 62, 71, 88, 157, 191, 153, 7, 150, 190, 178, 254, 3, 62, 250, 250, 131, 63, 107, 186, 155, 190, 228, 69, 54, 62, 108, 74, 5, 191, 21, 2, 238, 61, 147, 221, 153, 190, 243, 100, 193, 190, 30, 76, 144, 190, 244, 180, 217, 190, 95, 110, 91, 190, 20, 208, 35, 191, 48, 133, 165, 190, 104, 221, 220, 62, 133, 245, 52, 63, 118, 52, 56, 63, 91, 115, 43, 191, 143, 85, 130, 190, 28, 120, 86, 191, 183, 123, 236, 190, 201, 249, 151, 185, 44, 247, 244, 190, 238, 30, 104, 190, 229, 123, 160, 62, 75, 104, 60, 62, 190, 227, 9, 63, 58, 92, 152, 190, 108, 249, 98, 187, 39, 226, 135, 191, 101, 42, 216, 62, 4, 79, 54, 63, 183, 63, 28, 191, 160, 14, 134, 190, 58, 182, 161, 190, 131, 179, 132, 63, 205, 64, 155, 61, 131, 124, 238, 62, 138, 236, 152, 191, 139, 72, 123, 190, 182, 31, 5, 191, 107, 153, 239, 189, 233, 113, 246, 190, 208, 60, 180, 62, 48, 209, 43, 190, 211, 152, 255, 190, 154, 3, 163, 185, 245, 155, 208, 60, 150, 143, 201, 190, 10, 145, 68, 63, 220, 110, 161, 63, 244, 186, 154, 62, 136, 104, 181, 190, 122, 24, 174, 191, 209, 124, 205, 190, 195, 188, 107, 62, 205, 200, 128, 63, 189, 3, 219, 62, 17, 16, 153, 62, 120, 142, 77, 191, 38, 38, 212, 190, 159, 184, 218, 190, 187, 67, 210, 189, 238, 238, 15, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 79, 44, 191, 93, 126, 226, 189, 156, 200, 186, 189, 241, 7, 68, 189, 12, 173, 21, 60, 110, 22, 234, 189, 4, 20, 74, 60, 168, 140, 109, 190, 161, 84, 57, 63, 233, 229, 100, 191, 206, 44, 167, 62, 159, 114, 28, 62, 169, 233, 49, 62, 23, 40, 31, 190, 147, 134, 68, 191, 186, 28, 161, 190, 110, 251, 77, 191, 116, 62, 55, 63, 207, 97, 162, 62, 74, 128, 26, 63, 68, 89, 247, 61, 76, 3, 14, 191, 41, 64, 7, 63, 204, 254, 54, 63, 130, 137, 68, 191, 44, 166, 16, 62, 150, 239, 64, 60, 49, 43, 143, 189, 29, 101, 84, 62, 237, 176, 44, 62, 163, 102, 183, 189, 218, 107, 3, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 217, 145, 190, 24, 173, 118, 190, 78, 203, 176, 190, 7, 228, 178, 61, 158, 51, 150, 190, 33, 110, 109, 190, 84, 221, 208, 190, 137, 116, 233, 62, 48, 26, 168, 190, 73, 252, 180, 188, 35, 31, 154, 190, 27, 22, 103, 190, 37, 254, 76, 61, 79, 114, 198, 61, 110, 129, 153, 187, 115, 88, 13, 190, 93, 52, 76, 190, 41, 221, 93, 190, 99, 115, 46, 190, 142, 178, 246, 61, 37, 34, 46, 190, 115, 179, 41, 191, 116, 26, 13, 190, 92, 165, 121, 61, 235, 193, 176, 61, 3, 77, 156, 189, 107, 59, 38, 188, 94, 177, 152, 62, 88, 101, 202, 60, 185, 109, 12, 190, 142, 106, 159, 189, 180, 127, 200, 62, 141, 129, 42, 62, 16, 92, 186, 62, 7, 192, 190, 62, 218, 36, 154, 190, 245, 84, 0, 185, 48, 20, 86, 62, 244, 37, 166, 62, 253, 244, 112, 190, 208, 160, 44, 62, 215, 224, 239, 190, 165, 103, 69, 62, 43, 35, 226, 59, 197, 127, 8, 62, 80, 94, 36, 62, 122, 71, 23, 191, 142, 173, 108, 62, 248, 201, 196, 189, 115, 5, 211, 188, 131, 27, 194, 62, 206, 249, 175, 60, 75, 7, 210, 190, 156, 222, 135, 190, 224, 65, 249, 61, 6, 192, 66, 62, 107, 73, 40, 191, 106, 203, 156, 62, 150, 206, 16, 188, 49, 87, 155, 190, 105, 244, 230, 190, 217, 8, 31, 62, 152, 198, 157, 62, 207, 141, 17, 190, 129, 85, 68, 188, 191, 239, 48, 62, 116, 153, 10, 191, 2, 130, 134, 190, 49, 152, 131, 189, 24, 29, 2, 62, 251, 169, 101, 62, 169, 54, 225, 190, 87, 238, 50, 60, 229, 41, 0, 62, 199, 68, 129, 62, 121, 61, 46, 61, 144, 119, 147, 62, 214, 50, 143, 190, 203, 168, 242, 190, 107, 130, 142, 59, 102, 184, 200, 190, 232, 145, 122, 188, 109, 137, 236, 61, 112, 165, 190, 189, 230, 79, 163, 61, 168, 101, 211, 190, 239, 30, 172, 189, 8, 70, 140, 62, 161, 68, 179, 189, 5, 171, 230, 61, 149, 237, 88, 62, 73, 124, 77, 189, 41, 40, 55, 191, 4, 119, 174, 61, 128, 111, 49, 190, 253, 187, 132, 190, 52, 127, 180, 61, 43, 94, 151, 189, 95, 77, 248, 61, 143, 135, 50, 190, 168, 236, 110, 62, 6, 246, 66, 62, 220, 55, 192, 62, 2, 132, 143, 191, 183, 193, 234, 187, 135, 234, 252, 190, 53, 179, 35, 62, 171, 70, 55, 62, 233, 203, 120, 62, 120, 118, 250, 189, 194, 235, 102, 190, 33, 121, 222, 61, 41, 45, 0, 62, 160, 178, 183, 190, 182, 54, 18, 62, 241, 72, 245, 60, 81, 222, 20, 190, 204, 125, 158, 61, 134, 100, 58, 190, 18, 37, 146, 188, 179, 62, 8, 191, 89, 243, 224, 188, 152, 181, 68, 61, 14, 139, 43, 191, 167, 110, 136, 190, 163, 123, 109, 190, 156, 119, 183, 61, 48, 201, 172, 60, 105, 198, 169, 61, 75, 173, 80, 62, 170, 64, 52, 62, 105, 46, 115, 60, 7, 89, 195, 61, 180, 140, 85, 62, 151, 151, 171, 62, 160, 67, 26, 190, 114, 51, 0, 60, 228, 57, 82, 189, 38, 90, 154, 62, 133, 57, 3, 62, 223, 154, 93, 189, 217, 173, 203, 189, 24, 43, 171, 190, 229, 128, 42, 62, 33, 190, 173, 189, 172, 193, 96, 189, 211, 51, 10, 190, 210, 215, 192, 189, 227, 89, 100, 189, 105, 58, 129, 190, 156, 26, 138, 62, 119, 224, 38, 62, 14, 176, 194, 190, 84, 251, 36, 62, 219, 37, 136, 59, 49, 176, 129, 61, 64, 231, 188, 190, 1, 98, 8, 61, 171, 108, 113, 62, 160, 242, 70, 190, 162, 173, 220, 190, 60, 187, 107, 189, 157, 217, 11, 190, 14, 187, 209, 61, 104, 34, 109, 190, 218, 183, 221, 190, 132, 75, 57, 190, 48, 233, 179, 61, 238, 135, 115, 189, 104, 57, 183, 189, 82, 137, 162, 61, 230, 121, 65, 190, 212, 156, 254, 188, 128, 242, 195, 189, 96, 4, 102, 62, 78, 109, 57, 190, 40, 198, 26, 191, 138, 23, 77, 62, 214, 245, 215, 61, 81, 239, 90, 62, 126, 145, 65, 62, 198, 154, 44, 191, 64, 204, 125, 187, 19, 221, 207, 62, 171, 76, 106, 190, 87, 35, 7, 190, 244, 137, 138, 190, 58, 80, 170, 62, 104, 128, 64, 62, 123, 251, 20, 190, 51, 255, 131, 190, 14, 217, 125, 62, 160, 216, 30, 62, 119, 105, 230, 190, 122, 106, 143, 191, 209, 37, 163, 60, 223, 94, 127, 189, 39, 249, 206, 62, 122, 1, 44, 191, 255, 77, 182, 62, 122, 241, 137, 191, 146, 161, 199, 62, 248, 208, 17, 191, 99, 8, 43, 62, 199, 209, 3, 187, 15, 243, 60, 61, 185, 25, 29, 62, 184, 191, 92, 62, 185, 99, 240, 59, 40, 192, 47, 191, 165, 142, 80, 190, 19, 10, 180, 62, 10, 219, 93, 62, 143, 144, 28, 190, 36, 103, 6, 190, 60, 130, 187, 61, 206, 64, 14, 62, 41, 81, 10, 191, 198, 228, 116, 191, 197, 47, 75, 62, 178, 35, 108, 191, 119, 106, 3, 62, 27, 125, 255, 190, 101, 128, 110, 60, 80, 11, 132, 60, 125, 123, 250, 189, 201, 87, 29, 61, 124, 212, 167, 59, 147, 8, 76, 62, 58, 89, 44, 62, 29, 26, 21, 62, 110, 250, 218, 190, 251, 183, 84, 62, 188, 253, 68, 190, 53, 92, 140, 61, 16, 40, 20, 62, 19, 205, 136, 62, 69, 192, 205, 189, 110, 227, 19, 61, 62, 134, 167, 61, 239, 63, 52, 190, 238, 156, 120, 61, 189, 50, 182, 62, 125, 111, 5, 190, 95, 6, 171, 189, 6, 140, 102, 190, 201, 252, 139, 190, 202, 74, 222, 61, 143, 69, 34, 190, 12, 240, 234, 188, 19, 111, 161, 61, 134, 197, 219, 190, 21, 177, 116, 190, 194, 17, 173, 189, 157, 217, 185, 189, 182, 152, 131, 61, 5, 181, 185, 60, 75, 80, 5, 190, 90, 5, 186, 190, 44, 87, 239, 190, 139, 101, 11, 62, 10, 206, 8, 191, 63, 216, 106, 190, 199, 125, 175, 190, 161, 40, 165, 62, 68, 143, 193, 190, 179, 145, 87, 191, 59, 125, 155, 190, 105, 122, 178, 190, 0, 84, 81, 191, 36, 17, 102, 190, 209, 35, 197, 61, 158, 29, 199, 187, 220, 91, 191, 62, 66, 5, 57, 189, 93, 79, 186, 190, 114, 135, 254, 189, 78, 211, 191, 61, 151, 30, 150, 62, 94, 148, 179, 190, 153, 118, 54, 190, 189, 51, 165, 190, 190, 50, 181, 190, 164, 246, 188, 190, 24, 90, 10, 190, 65, 140, 254, 189, 237, 91, 207, 190, 234, 162, 85, 190, 193, 195, 149, 60, 251, 190, 214, 190, 226, 96, 147, 191, 237, 114, 78, 190, 124, 188, 186, 189, 150, 29, 42, 191, 127, 221, 14, 191, 108, 198, 111, 190, 182, 188, 179, 62, 223, 186, 195, 190, 100, 11, 193, 191, 70, 234, 243, 190, 154, 194, 91, 61, 183, 107, 229, 190, 49, 162, 64, 62, 134, 214, 233, 190, 232, 22, 76, 190, 223, 219, 154, 62, 160, 180, 152, 61, 80, 180, 205, 189, 226, 201, 100, 62, 23, 18, 227, 189, 17, 120, 234, 189, 170, 147, 46, 62, 195, 61, 146, 189, 85, 60, 138, 189, 245, 126, 4, 191, 226, 136, 102, 61, 109, 184, 14, 190, 113, 197, 29, 191, 146, 27, 61, 191, 239, 4, 94, 62, 54, 234, 247, 60, 193, 132, 211, 189, 80, 208, 17, 191, 85, 140, 109, 62, 156, 79, 126, 190, 116, 76, 10, 191, 223, 33, 154, 189, 44, 127, 11, 63, 63, 122, 197, 190, 6, 76, 39, 189, 33, 109, 64, 190, 90, 217, 39, 62, 86, 231, 170, 190, 131, 78, 186, 189, 6, 131, 152, 62, 101, 94, 114, 190, 193, 54, 96, 188, 212, 215, 89, 191, 163, 231, 225, 189, 19, 24, 171, 62, 232, 18, 139, 190, 193, 226, 198, 190, 175, 176, 154, 189, 37, 84, 36, 62, 224, 139, 90, 188, 98, 47, 81, 61, 69, 238, 115, 189, 178, 250, 182, 62, 6, 195, 25, 190, 252, 247, 194, 58, 192, 0, 202, 189, 220, 192, 204, 62, 197, 226, 211, 190, 104, 198, 228, 189, 161, 123, 73, 190, 147, 190, 35, 62, 188, 99, 224, 189, 91, 46, 134, 190, 203, 15, 236, 188, 9, 149, 41, 61, 26, 62, 120, 62, 168, 15, 157, 190, 183, 155, 19, 61, 206, 90, 218, 59, 139, 26, 87, 61, 4, 99, 68, 190, 114, 84, 80, 61, 46, 234, 17, 190, 8, 134, 71, 191, 143, 30, 97, 61, 162, 181, 222, 61, 180, 33, 237, 61, 209, 158, 144, 62, 175, 8, 40, 191, 18, 73, 66, 189, 182, 98, 39, 62, 53, 189, 130, 190, 102, 183, 80, 190, 156, 53, 252, 188, 253, 76, 14, 62, 3, 24, 57, 62, 142, 244, 213, 189, 161, 60, 145, 189, 132, 122, 28, 60, 50, 3, 102, 188, 223, 155, 184, 61, 83, 34, 177, 60, 236, 57, 239, 189, 130, 121, 188, 60, 179, 116, 65, 62, 23, 150, 97, 61, 245, 177, 134, 189, 216, 102, 233, 61, 101, 33, 31, 61, 15, 224, 196, 189, 177, 129, 179, 187, 74, 37, 104, 188, 201, 98, 221, 61, 65, 58, 191, 61, 10, 41, 176, 189, 147, 46, 158, 189, 210, 250, 222, 189, 133, 235, 64, 190, 227, 8, 1, 189, 182, 148, 173, 189, 212, 63, 169, 61, 8, 117, 188, 190, 144, 37, 57, 190, 239, 168, 56, 61, 218, 18, 145, 61, 126, 161, 48, 189, 52, 218, 34, 189, 167, 144, 11, 189, 253, 84, 7, 190, 241, 42, 228, 60, 238, 191, 238, 188, 215, 41, 167, 189, 57, 139, 139, 189, 241, 99, 38, 61, 249, 250, 48, 61, 195, 23, 19, 190, 222, 101, 107, 61, 112, 65, 9, 190, 182, 35, 155, 61, 242, 110, 192, 186, 112, 116, 4, 62, 31, 187, 182, 188, 119, 70, 131, 61, 52, 21, 131, 60, 218, 38, 101, 189, 51, 188, 10, 62, 230, 123, 41, 190, 14, 132, 74, 188, 162, 197, 202, 189, 166, 153, 232, 61, 57, 154, 38, 190, 128, 104, 0, 189, 30, 104, 219, 189, 2, 42, 15, 190, 132, 33, 233, 189, 60, 89, 5, 62, 115, 113, 102, 61, 11, 149, 38, 188, 228, 129, 11, 190, 213, 235, 26, 190, 118, 177, 116, 189, 73, 207, 7, 61, 23, 241, 243, 189, 15, 1, 133, 62, 36, 215, 40, 62, 21, 191, 237, 61, 196, 69, 146, 189, 168, 172, 175, 189, 69, 239, 196, 190, 215, 47, 19, 59, 165, 61, 21, 189, 15, 111, 146, 62, 114, 18, 57, 190, 3, 104, 155, 61, 199, 7, 80, 190, 136, 199, 32, 191, 96, 130, 37, 190, 141, 100, 3, 189, 184, 153, 17, 191, 254, 173, 219, 62, 243, 220, 155, 62, 132, 204, 240, 61, 190, 182, 60, 61, 72, 48, 17, 190, 177, 31, 210, 62, 232, 200, 101, 62, 159, 19, 227, 61, 166, 81, 211, 60, 61, 54, 70, 61, 42, 65, 97, 60, 79, 71, 241, 190, 236, 99, 47, 62, 173, 230, 158, 190, 118, 52, 199, 188, 176, 229, 146, 188, 212, 192, 5, 191, 161, 177, 128, 190, 86, 53, 194, 190, 114, 195, 5, 62, 16, 76, 67, 189, 148, 241, 165, 190, 253, 125, 166, 61, 124, 60, 35, 62, 88, 38, 130, 189, 191, 114, 244, 189, 153, 252, 123, 189, 226, 24, 137, 189, 238, 42, 27, 62, 246, 246, 105, 188, 69, 234, 42, 61, 97, 115, 241, 190, 87, 236, 41, 191, 208, 148, 203, 60, 25, 218, 34, 62, 227, 33, 55, 62, 18, 1, 94, 62, 244, 83, 27, 191, 149, 230, 52, 62, 93, 7, 208, 62, 62, 26, 154, 189, 111, 28, 41, 190, 153, 134, 48, 189, 57, 190, 49, 62, 49, 20, 211, 62, 207, 214, 191, 189, 246, 167, 26, 190, 73, 34, 46, 62, 83, 215, 3, 60, 180, 87, 1, 190, 204, 29, 61, 190, 56, 25, 14, 191, 11, 87, 149, 61, 14, 124, 21, 191, 105, 170, 18, 190, 65, 215, 225, 61, 135, 182, 92, 61, 202, 191, 25, 190, 26, 33, 251, 190, 8, 111, 170, 190, 240, 143, 58, 190, 252, 39, 58, 61, 130, 23, 19, 191, 65, 110, 52, 62, 18, 118, 252, 61, 199, 9, 240, 58, 145, 6, 98, 62, 110, 184, 153, 61, 52, 178, 246, 189, 76, 172, 29, 60, 201, 68, 100, 62, 169, 9, 76, 191, 175, 67, 27, 62, 184, 201, 175, 61, 247, 47, 253, 190, 219, 19, 139, 188, 146, 168, 248, 191, 70, 62, 39, 62, 35, 90, 8, 62, 235, 182, 13, 191, 172, 54, 52, 189, 205, 132, 44, 62, 158, 198, 51, 189, 128, 144, 32, 190, 227, 209, 234, 60, 84, 102, 3, 190, 158, 51, 53, 58, 52, 81, 106, 189, 4, 158, 53, 61, 73, 71, 149, 189, 137, 182, 46, 60, 39, 237, 226, 188, 39, 12, 116, 61, 120, 23, 5, 62, 24, 243, 36, 190, 149, 203, 56, 190, 142, 78, 157, 189, 138, 9, 250, 189, 141, 50, 155, 61, 140, 75, 6, 190, 152, 9, 101, 187, 198, 246, 233, 56, 209, 102, 204, 61, 8, 190, 69, 189, 141, 184, 117, 61, 27, 78, 153, 189, 96, 221, 37, 190, 124, 222, 148, 58, 216, 157, 27, 61, 155, 186, 70, 60, 127, 158, 12, 61, 134, 45, 96, 186, 113, 168, 54, 191, 156, 60, 153, 190, 140, 243, 200, 190, 54, 39, 196, 62, 160, 72, 223, 190, 179, 223, 134, 190, 102, 116, 248, 189, 27, 249, 138, 62, 67, 169, 189, 61, 156, 208, 51, 189, 141, 37, 47, 190, 74, 154, 91, 60, 241, 123, 7, 190, 53, 193, 138, 188, 136, 4, 101, 60, 205, 88, 16, 191, 74, 22, 71, 191, 221, 227, 130, 189, 141, 2, 64, 189, 132, 168, 53, 62, 37, 36, 179, 62, 225, 201, 5, 191, 42, 174, 201, 61, 130, 34, 200, 62, 19, 252, 129, 190, 197, 38, 97, 190, 20, 146, 108, 190, 134, 164, 129, 62, 18, 21, 188, 62, 58, 116, 135, 61, 24, 95, 49, 190, 90, 32, 196, 62, 137, 54, 250, 190, 193, 204, 85, 190, 211, 25, 28, 190, 43, 229, 94, 62, 141, 181, 96, 190, 248, 246, 105, 189, 43, 194, 137, 190, 51, 180, 63, 62, 242, 170, 150, 189, 8, 187, 155, 189, 201, 80, 66, 190, 149, 222, 160, 189, 66, 47, 61, 190, 28, 93, 240, 189, 214, 251, 64, 61, 185, 158, 189, 190, 69, 159, 214, 190, 8, 186, 158, 62, 59, 117, 107, 61, 51, 246, 243, 188, 63, 30, 147, 62, 59, 240, 66, 191, 151, 45, 151, 61, 105, 235, 152, 62, 66, 30, 145, 190, 20, 11, 252, 188, 63, 19, 144, 61, 94, 229, 178, 189, 93, 4, 216, 62, 96, 146, 62, 190, 33, 164, 119, 190, 8, 249, 80, 62, 154, 220, 40, 190, 136, 150, 69, 62, 42, 24, 69, 190, 225, 123, 255, 188, 74, 128, 4, 190, 46, 18, 110, 62, 248, 208, 17, 62, 157, 248, 1, 191, 229, 206, 4, 62, 249, 16, 230, 61, 242, 119, 148, 61, 154, 167, 213, 188, 109, 169, 77, 62, 214, 242, 94, 189, 252, 69, 233, 61, 72, 252, 77, 190, 167, 13, 154, 60, 138, 14, 188, 187, 202, 45, 49, 190, 229, 206, 15, 62, 3, 139, 128, 62, 189, 177, 33, 190, 240, 111, 45, 190, 90, 86, 222, 62, 110, 238, 116, 189, 234, 220, 78, 62, 74, 13, 122, 61, 176, 36, 18, 190, 94, 113, 33, 62, 14, 78, 210, 189, 233, 58, 4, 62, 129, 157, 128, 189, 16, 58, 87, 60, 255, 93, 131, 189, 100, 239, 6, 63, 139, 157, 190, 190, 227, 250, 6, 61, 109, 76, 205, 61, 12, 207, 238, 62, 173, 124, 40, 191, 72, 88, 135, 61, 191, 62, 198, 190, 228, 103, 193, 62, 164, 28, 66, 190, 80, 241, 253, 60, 64, 165, 167, 61, 52, 27, 16, 190, 53, 111, 29, 62, 104, 86, 120, 61, 25, 43, 18, 59, 124, 180, 119, 187, 172, 136, 190, 190, 77, 94, 163, 189, 164, 245, 78, 62, 39, 211, 110, 61, 22, 41, 36, 190, 149, 144, 14, 63, 234, 208, 169, 190, 115, 252, 151, 61, 21, 98, 219, 190, 64, 163, 210, 191, 181, 0, 92, 62, 194, 141, 184, 62, 60, 56, 238, 190, 96, 225, 191, 62, 102, 20, 160, 62, 225, 94, 185, 62, 53, 35, 131, 190, 120, 149, 148, 62, 178, 41, 68, 62, 164, 161, 164, 62, 41, 175, 204, 190, 226, 60, 24, 61, 191, 177, 15, 191, 101, 100, 40, 62, 155, 164, 50, 189, 96, 220, 211, 61, 213, 146, 185, 189, 70, 139, 230, 190, 245, 236, 146, 62, 54, 202, 15, 61, 155, 189, 22, 190, 174, 34, 39, 62, 173, 128, 76, 190, 227, 100, 251, 190, 169, 112, 171, 60, 62, 121, 165, 62, 140, 151, 6, 62, 253, 107, 41, 191, 86, 231, 109, 62, 226, 225, 46, 62, 85, 235, 216, 190, 73, 69, 19, 191, 97, 191, 146, 62, 122, 119, 51, 62, 215, 136, 87, 190, 140, 206, 62, 62, 60, 102, 28, 62, 61, 228, 134, 190, 93, 209, 54, 190, 2, 47, 182, 61, 137, 162, 186, 189, 108, 20, 245, 189, 147, 44, 16, 62, 235, 209, 94, 186, 169, 204, 128, 189, 59, 128, 117, 61, 173, 162, 6, 62, 9, 203, 104, 61, 237, 26, 212, 61, 131, 110, 130, 190, 166, 32, 9, 62, 133, 129, 55, 61, 112, 137, 92, 58, 17, 67, 135, 189, 12, 227, 55, 62, 183, 90, 140, 61, 174, 207, 200, 61, 195, 43, 213, 61, 79, 214, 18, 62, 60, 92, 58, 62, 234, 197, 232, 61, 170, 51, 146, 62, 136, 218, 34, 62, 0, 190, 86, 190, 138, 7, 172, 61, 60, 16, 227, 188, 145, 85, 14, 190, 54, 180, 242, 190, 68, 116, 161, 189, 11, 21, 15, 191, 10, 219, 207, 58, 198, 244, 107, 191, 252, 8, 159, 190, 204, 170, 38, 190, 78, 203, 102, 189, 223, 66, 34, 62, 150, 223, 87, 190, 171, 179, 84, 61, 15, 181, 192, 61, 45, 253, 151, 189, 213, 192, 167, 190, 86, 161, 231, 61, 90, 17, 90, 191, 9, 217, 22, 191, 112, 222, 179, 61, 255, 37, 169, 189, 241, 113, 156, 62, 184, 9, 184, 190, 16, 235, 25, 191, 128, 196, 150, 62, 126, 172, 85, 62, 118, 26, 192, 189, 136, 67, 213, 189, 59, 148, 60, 190, 244, 194, 41, 62, 42, 56, 87, 190, 80, 139, 109, 190, 225, 135, 76, 190, 252, 21, 118, 62, 247, 15, 1, 191, 239, 252, 244, 60, 54, 55, 68, 191, 150, 101, 197, 189, 79, 88, 35, 62, 171, 163, 218, 61, 192, 228, 104, 61, 168, 64, 167, 189, 101, 140, 115, 191, 49, 96, 155, 62, 90, 198, 70, 61, 233, 229, 52, 62, 144, 156, 93, 62, 43, 196, 50, 189, 167, 217, 102, 188, 235, 253, 114, 189, 223, 125, 188, 191, 183, 30, 25, 191, 64, 146, 207, 61, 11, 50, 162, 62, 60, 145, 158, 59, 55, 185, 172, 190, 103, 199, 237, 61, 143, 190, 161, 62, 208, 15, 78, 62, 105, 163, 111, 62, 169, 154, 108, 62, 221, 66, 160, 61, 74, 121, 81, 191, 214, 46, 107, 62, 107, 172, 66, 190, 21, 64, 93, 190, 172, 192, 189, 62, 84, 30, 43, 62, 56, 222, 141, 62, 120, 3, 92, 189, 238, 96, 212, 62, 135, 160, 215, 59, 225, 195, 194, 61, 173, 71, 87, 61, 247, 239, 67, 61, 2, 75, 2, 62, 215, 182, 208, 189, 45, 153, 161, 189, 70, 225, 64, 62, 107, 43, 18, 190, 127, 149, 32, 61, 72, 48, 113, 62, 81, 202, 126, 62, 202, 241, 139, 61, 235, 67, 246, 61, 231, 89, 80, 190, 123, 237, 114, 62, 183, 114, 230, 62, 13, 97, 194, 189, 42, 177, 163, 189, 229, 57, 169, 61, 188, 19, 5, 62, 118, 38, 248, 60, 21, 77, 56, 190, 232, 184, 100, 62, 98, 76, 84, 190, 143, 105, 129, 62, 72, 24, 19, 61, 9, 178, 43, 191, 218, 79, 140, 190, 101, 68, 117, 190, 255, 132, 206, 60, 94, 45, 197, 190, 203, 101, 179, 189, 190, 54, 60, 190, 193, 115, 132, 61, 255, 211, 101, 187, 93, 248, 4, 190, 48, 193, 1, 190, 4, 228, 13, 61, 108, 236, 69, 189, 31, 243, 175, 190, 227, 116, 137, 61, 80, 59, 198, 190, 79, 88, 135, 191, 158, 85, 135, 62, 237, 96, 141, 189, 197, 154, 79, 62, 4, 182, 164, 62, 168, 52, 70, 191, 234, 11, 83, 62, 122, 44, 207, 62, 49, 125, 234, 189, 202, 135, 155, 189, 113, 63, 66, 190, 62, 195, 137, 62, 235, 185, 175, 62, 227, 116, 56, 189, 222, 149, 206, 189, 221, 2, 16, 188, 1, 23, 138, 61, 171, 202, 64, 61, 32, 71, 9, 191, 194, 69, 155, 190, 73, 3, 28, 191, 201, 77, 92, 191, 45, 200, 221, 61, 227, 41, 213, 190, 173, 42, 233, 61, 52, 8, 79, 190, 99, 51, 48, 190, 115, 17, 213, 62, 173, 66, 61, 191, 81, 13, 234, 59, 209, 228, 6, 191, 141, 161, 12, 190, 161, 235, 49, 190, 178, 138, 248, 61, 79, 169, 14, 190, 188, 61, 89, 62, 107, 160, 130, 190, 98, 203, 60, 61, 34, 238, 19, 62, 82, 123, 72, 190, 110, 247, 10, 191, 169, 214, 83, 62, 153, 95, 191, 62, 156, 0, 176, 190, 239, 16, 110, 191, 34, 139, 49, 62, 65, 23, 42, 61, 162, 183, 88, 190, 52, 92, 188, 189, 174, 127, 16, 61, 26, 82, 62, 61, 237, 155, 223, 190, 91, 88, 252, 61, 226, 216, 254, 60, 238, 146, 184, 190, 126, 11, 63, 190, 93, 219, 92, 62, 0, 137, 92, 190, 41, 118, 168, 190, 138, 194, 183, 190, 233, 71, 146, 190, 119, 150, 104, 62, 248, 29, 138, 189, 200, 255, 119, 62, 74, 160, 149, 61, 166, 248, 191, 61, 153, 251, 159, 62, 220, 206, 131, 190, 11, 151, 196, 190, 102, 65, 8, 62, 123, 72, 126, 62, 213, 181, 223, 191, 64, 0, 164, 62, 70, 225, 216, 189, 138, 70, 221, 62, 214, 39, 114, 190, 110, 80, 1, 192, 160, 74, 144, 61, 19, 196, 120, 188, 41, 213, 214, 189, 218, 24, 133, 189, 53, 42, 27, 61, 83, 250, 151, 62, 152, 253, 170, 189, 241, 174, 190, 188, 160, 63, 181, 61, 132, 139, 109, 62, 60, 125, 207, 190, 78, 9, 73, 190, 227, 67, 207, 61, 93, 162, 12, 62, 210, 117, 163, 190, 135, 22, 181, 189, 151, 27, 125, 189, 227, 255, 0, 190, 199, 223, 57, 189, 1, 25, 124, 62, 171, 139, 214, 189, 102, 6, 26, 190, 100, 209, 112, 189, 180, 69, 236, 61, 148, 54, 172, 62, 149, 94, 142, 190, 208, 66, 174, 59, 61, 138, 134, 190, 89, 204, 154, 189, 172, 46, 18, 190, 193, 94, 182, 190, 177, 27, 47, 190, 121, 153, 139, 190, 25, 104, 192, 60, 124, 169, 175, 189, 129, 142, 74, 59, 149, 207, 26, 62, 132, 111, 186, 189, 185, 181, 111, 190, 162, 92, 183, 61, 22, 247, 149, 62, 106, 106, 111, 62, 83, 11, 167, 190, 37, 222, 13, 62, 68, 44, 121, 190, 253, 213, 78, 62, 114, 5, 13, 189, 89, 22, 35, 62, 13, 137, 63, 189, 129, 41, 2, 61, 173, 195, 2, 62, 35, 188, 115, 190, 189, 48, 177, 189, 74, 101, 36, 61, 117, 98, 190, 61, 48, 183, 201, 189, 28, 124, 189, 189, 184, 38, 11, 190, 89, 68, 72, 62, 15, 195, 197, 190, 25, 2, 76, 60, 95, 133, 168, 189, 174, 184, 115, 190, 27, 2, 29, 190, 245, 152, 55, 190, 196, 129, 191, 61, 132, 241, 45, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 51, 137, 189, 57, 16, 24, 62, 22, 185, 229, 61, 152, 178, 20, 62, 128, 233, 74, 60, 81, 67, 151, 61, 103, 124, 172, 190, 81, 28, 118, 62, 26, 78, 221, 61, 108, 217, 252, 189, 46, 17, 152, 188, 10, 166, 163, 62, 117, 66, 155, 190, 144, 118, 17, 62, 86, 123, 128, 187, 34, 92, 32, 62, 121, 156, 12, 62, 119, 222, 149, 189, 20, 177, 150, 62, 144, 110, 205, 61, 127, 67, 44, 189, 120, 84, 111, 62, 44, 123, 225, 60, 236, 149, 6, 62, 190, 235, 39, 62, 191, 188, 124, 188, 121, 218, 214, 189, 128, 170, 164, 62, 237, 14, 168, 189, 50, 174, 181, 61, 48, 199, 143, 190, 64, 220, 83, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 73, 2, 191, 228, 242, 60, 63, 99, 179, 51, 61, 145, 248, 208, 62, 77, 149, 73, 62, 48, 150, 62, 190, 56, 141, 103, 191, 188, 122, 246, 189, 127, 54, 108, 191, 55, 244, 162, 191, 5, 52, 23, 191, 204, 223, 102, 190, 87, 46, 225, 189, 113, 38, 248, 189, 137, 206, 213, 190, 215, 66, 101, 190, 115, 205, 168, 62, 194, 88, 220, 187, 155, 12, 5, 191, 230, 67, 163, 190, 33, 210, 36, 62, 113, 155, 110, 63, 236, 135, 0, 63, 194, 18, 11, 190, 253, 220, 35, 191, 60, 64, 210, 190, 179, 173, 92, 190, 142, 170, 196, 190, 88, 36, 103, 191, 139, 162, 172, 63, 45, 158, 209, 61, 252, 111, 228, 61, 201, 129, 175, 62, 188, 11, 2, 190, 22, 64, 2, 191, 28, 95, 101, 62, 91, 199, 132, 190, 202, 134, 248, 60, 2, 139, 236, 62, 205, 97, 7, 190, 140, 133, 254, 60, 174, 208, 242, 61, 137, 117, 26, 62, 30, 178, 253, 188, 237, 175, 36, 62, 56, 108, 194, 188, 41, 114, 130, 189, 164, 220, 127, 189, 147, 57, 43, 190, 172, 101, 222, 61, 44, 188, 231, 61, 105, 236, 142, 62, 31, 87, 115, 190, 167, 3, 172, 189, 171, 37, 75, 62, 149, 219, 110, 190, 216, 121, 179, 189, 191, 249, 1, 191, 251, 223, 55, 62, 25, 228, 23, 190, 218, 126, 115, 62, 82, 171, 134, 62, 223, 210, 98, 62, 222, 117, 122, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {64, 134, 46, 62, 33, 50, 6, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {208, 202, 202, 190, 64, 203, 94, 191, 171, 10, 196, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {33, 131, 199, 191, 36, 71, 132, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0067/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}