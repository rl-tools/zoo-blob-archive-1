// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 6, 151, 62, 212, 32, 1, 191, 158, 28, 45, 191, 235, 130, 230, 61, 137, 239, 147, 61, 154, 191, 92, 62, 26, 233, 63, 63, 228, 9, 85, 191, 181, 117, 60, 190, 96, 216, 43, 191, 237, 207, 23, 63, 54, 252, 148, 189, 254, 171, 64, 191, 198, 27, 234, 190, 105, 247, 6, 60, 74, 18, 227, 190, 193, 107, 69, 63, 125, 160, 210, 61, 137, 31, 240, 190, 187, 104, 192, 190, 188, 185, 39, 63, 233, 180, 145, 61, 222, 44, 75, 63, 182, 147, 80, 190, 122, 98, 53, 62, 246, 208, 147, 62, 177, 198, 179, 59, 195, 3, 99, 189, 126, 159, 125, 63, 126, 247, 184, 62, 205, 5, 24, 190, 102, 82, 162, 191, 239, 26, 151, 190, 226, 218, 157, 62, 193, 52, 245, 190, 21, 244, 247, 62, 254, 228, 120, 190, 121, 222, 86, 63, 163, 27, 199, 61, 161, 215, 175, 62, 181, 24, 28, 63, 74, 174, 247, 62, 212, 2, 26, 190, 176, 26, 126, 62, 186, 10, 31, 191, 75, 216, 53, 63, 106, 157, 156, 191, 97, 225, 213, 190, 134, 33, 43, 191, 138, 113, 151, 191, 68, 32, 146, 190, 74, 62, 225, 61, 112, 49, 148, 60, 248, 12, 47, 189, 39, 188, 42, 63, 156, 6, 79, 191, 24, 103, 238, 190, 186, 213, 100, 63, 231, 84, 142, 63, 83, 135, 124, 62, 144, 48, 130, 188, 105, 121, 129, 191, 69, 4, 245, 190, 61, 22, 34, 191, 155, 203, 240, 62, 86, 44, 211, 190, 178, 223, 0, 191, 97, 77, 22, 190, 213, 62, 140, 62, 4, 203, 52, 63, 41, 65, 67, 63, 189, 247, 92, 62, 78, 203, 216, 187, 179, 128, 14, 191, 226, 31, 240, 61, 240, 101, 107, 190, 148, 4, 131, 191, 145, 212, 62, 190, 168, 203, 129, 190, 175, 196, 173, 191, 179, 31, 56, 191, 85, 113, 128, 191, 21, 19, 177, 190, 68, 167, 223, 189, 62, 26, 3, 190, 56, 55, 12, 63, 100, 214, 3, 191, 88, 76, 9, 190, 94, 6, 53, 191, 111, 90, 217, 62, 66, 91, 5, 189, 92, 88, 71, 191, 183, 120, 45, 62, 6, 129, 15, 63, 224, 114, 199, 188, 15, 58, 222, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {15, 181, 73, 191, 69, 183, 151, 189, 179, 158, 211, 187, 137, 208, 131, 190, 201, 241, 100, 189, 89, 221, 168, 60, 28, 62, 125, 61, 224, 103, 185, 62, 179, 107, 193, 190, 53, 16, 129, 190, 206, 99, 239, 189, 127, 9, 44, 62, 76, 63, 56, 62, 170, 162, 60, 190, 166, 37, 254, 190, 111, 161, 66, 190, 54, 68, 36, 62, 226, 102, 199, 190, 104, 132, 20, 189, 140, 218, 90, 62, 166, 32, 120, 62, 220, 217, 3, 189, 117, 238, 24, 63, 219, 12, 122, 190, 80, 205, 3, 190, 150, 48, 184, 62, 248, 213, 86, 190, 7, 180, 229, 61, 127, 190, 219, 189, 102, 234, 168, 62, 82, 163, 157, 190, 125, 183, 65, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 63, 185, 189, 243, 24, 16, 190, 23, 242, 149, 62, 34, 72, 46, 62, 167, 88, 68, 190, 209, 150, 225, 61, 191, 86, 247, 188, 70, 241, 91, 62, 119, 93, 239, 189, 249, 1, 214, 189, 220, 84, 154, 191, 197, 131, 150, 61, 236, 148, 223, 61, 60, 27, 52, 189, 58, 31, 195, 61, 233, 111, 143, 190, 214, 84, 227, 190, 44, 207, 37, 62, 65, 149, 131, 62, 184, 89, 42, 62, 46, 92, 124, 190, 122, 208, 139, 61, 53, 146, 63, 61, 39, 224, 189, 189, 222, 185, 167, 189, 44, 167, 247, 190, 125, 39, 151, 190, 154, 37, 135, 190, 172, 174, 142, 62, 118, 91, 25, 61, 71, 11, 219, 189, 101, 193, 155, 62, 97, 50, 4, 190, 94, 8, 223, 189, 137, 76, 64, 189, 149, 33, 23, 190, 100, 7, 81, 62, 184, 196, 246, 61, 97, 99, 254, 190, 238, 224, 180, 61, 138, 129, 207, 60, 253, 33, 18, 62, 123, 245, 194, 190, 116, 117, 161, 58, 1, 84, 135, 61, 188, 34, 139, 62, 226, 86, 179, 188, 54, 45, 236, 190, 203, 102, 171, 189, 180, 154, 33, 62, 60, 177, 116, 190, 62, 242, 69, 62, 195, 135, 15, 190, 10, 114, 40, 62, 192, 134, 150, 188, 157, 103, 159, 62, 187, 73, 81, 62, 139, 0, 25, 190, 59, 9, 77, 61, 123, 49, 179, 190, 102, 241, 84, 62, 57, 3, 192, 190, 180, 40, 3, 190, 210, 114, 23, 62, 104, 42, 204, 189, 225, 203, 225, 189, 80, 139, 244, 189, 146, 231, 137, 62, 175, 7, 232, 187, 235, 73, 182, 189, 156, 181, 196, 61, 213, 110, 25, 62, 124, 68, 10, 189, 154, 44, 20, 60, 163, 119, 200, 62, 207, 73, 236, 61, 227, 189, 162, 189, 135, 87, 47, 189, 89, 34, 169, 61, 11, 240, 14, 62, 83, 50, 123, 62, 34, 219, 14, 189, 158, 94, 214, 189, 87, 170, 48, 190, 88, 66, 139, 189, 163, 108, 45, 191, 140, 123, 179, 61, 214, 178, 15, 62, 63, 43, 135, 62, 100, 182, 185, 190, 16, 186, 214, 190, 10, 136, 165, 190, 238, 170, 83, 62, 214, 65, 135, 62, 242, 93, 191, 61, 35, 225, 237, 189, 14, 112, 239, 190, 17, 123, 108, 190, 49, 133, 136, 191, 28, 159, 91, 62, 104, 147, 107, 191, 59, 53, 186, 62, 119, 15, 200, 188, 255, 149, 208, 62, 167, 171, 124, 60, 128, 229, 218, 189, 40, 145, 57, 191, 101, 28, 76, 190, 55, 138, 217, 62, 151, 106, 142, 61, 188, 151, 15, 189, 89, 70, 87, 191, 83, 2, 46, 190, 247, 59, 12, 189, 242, 56, 62, 191, 144, 190, 62, 62, 135, 165, 241, 190, 180, 55, 78, 62, 199, 26, 138, 190, 94, 7, 18, 62, 134, 226, 235, 190, 32, 93, 0, 191, 190, 15, 202, 190, 166, 90, 24, 62, 111, 249, 154, 62, 42, 252, 41, 189, 138, 59, 252, 190, 4, 210, 25, 62, 88, 211, 118, 190, 76, 163, 90, 188, 53, 211, 73, 62, 193, 189, 134, 62, 128, 142, 59, 189, 5, 152, 141, 61, 92, 180, 181, 56, 73, 153, 163, 62, 197, 173, 150, 61, 153, 63, 28, 190, 89, 211, 97, 190, 233, 17, 231, 61, 127, 184, 36, 188, 133, 73, 188, 189, 66, 142, 244, 61, 20, 71, 120, 190, 120, 74, 72, 186, 69, 175, 200, 61, 111, 185, 70, 62, 65, 205, 35, 62, 211, 130, 0, 61, 12, 178, 43, 62, 246, 192, 161, 61, 119, 243, 200, 188, 14, 140, 229, 61, 4, 25, 3, 62, 150, 114, 40, 62, 0, 43, 53, 190, 96, 234, 231, 186, 182, 18, 65, 62, 126, 198, 24, 62, 159, 26, 85, 62, 58, 91, 16, 189, 226, 147, 100, 190, 13, 171, 214, 189, 66, 222, 140, 61, 50, 204, 22, 62, 244, 209, 28, 61, 28, 58, 50, 190, 60, 183, 65, 61, 85, 129, 193, 188, 151, 171, 34, 191, 96, 15, 215, 61, 165, 92, 102, 62, 105, 162, 3, 62, 100, 63, 222, 189, 105, 93, 28, 62, 241, 214, 96, 190, 182, 141, 252, 61, 232, 255, 40, 189, 84, 42, 71, 190, 28, 61, 148, 190, 20, 171, 15, 61, 99, 101, 82, 62, 1, 80, 97, 60, 181, 5, 22, 191, 192, 82, 92, 63, 182, 98, 9, 190, 222, 82, 6, 62, 176, 93, 53, 62, 139, 55, 185, 62, 236, 18, 238, 189, 209, 228, 113, 63, 117, 84, 253, 60, 126, 233, 164, 62, 21, 227, 135, 190, 59, 128, 239, 61, 112, 81, 130, 190, 139, 23, 164, 62, 15, 212, 8, 190, 198, 90, 69, 62, 134, 4, 200, 188, 69, 229, 247, 60, 212, 254, 91, 190, 131, 158, 223, 190, 183, 131, 228, 61, 252, 189, 34, 190, 31, 67, 111, 190, 160, 93, 142, 62, 242, 160, 227, 62, 39, 26, 139, 190, 191, 211, 198, 189, 157, 79, 90, 62, 6, 235, 157, 190, 155, 17, 204, 61, 193, 12, 1, 190, 117, 12, 105, 59, 98, 140, 75, 191, 58, 175, 140, 190, 84, 45, 129, 189, 212, 131, 160, 190, 242, 46, 131, 61, 163, 235, 157, 190, 54, 116, 133, 62, 119, 96, 172, 190, 77, 212, 52, 62, 56, 42, 46, 190, 135, 164, 22, 189, 237, 12, 238, 60, 136, 0, 18, 188, 173, 117, 34, 190, 74, 42, 48, 190, 100, 141, 240, 189, 197, 153, 11, 62, 25, 172, 43, 61, 208, 103, 73, 59, 14, 21, 223, 189, 61, 115, 231, 61, 251, 248, 81, 60, 196, 121, 138, 61, 118, 118, 31, 61, 43, 26, 158, 61, 151, 12, 192, 61, 56, 153, 157, 189, 164, 208, 15, 189, 235, 113, 216, 189, 244, 158, 128, 61, 127, 143, 88, 190, 19, 21, 6, 61, 159, 206, 161, 188, 59, 156, 71, 62, 23, 60, 31, 190, 236, 214, 125, 189, 100, 176, 196, 61, 253, 118, 106, 189, 159, 36, 65, 189, 3, 229, 22, 190, 161, 234, 58, 190, 181, 82, 201, 189, 84, 54, 51, 188, 66, 245, 247, 189, 218, 185, 127, 189, 241, 85, 69, 190, 250, 48, 134, 60, 221, 124, 158, 60, 134, 168, 8, 186, 191, 89, 31, 62, 158, 165, 252, 189, 193, 27, 179, 60, 229, 168, 4, 62, 198, 84, 217, 61, 135, 242, 42, 61, 71, 236, 46, 190, 25, 30, 66, 190, 101, 124, 240, 61, 90, 75, 122, 189, 183, 205, 178, 61, 155, 128, 193, 189, 197, 151, 38, 190, 129, 172, 29, 190, 159, 184, 9, 62, 41, 155, 57, 61, 132, 68, 127, 61, 9, 27, 6, 190, 155, 125, 195, 189, 23, 242, 41, 61, 197, 119, 154, 189, 61, 35, 72, 190, 133, 33, 82, 190, 167, 155, 117, 188, 6, 33, 50, 190, 0, 133, 232, 189, 197, 30, 93, 189, 129, 45, 201, 189, 226, 187, 246, 61, 251, 245, 3, 61, 164, 206, 48, 190, 212, 241, 108, 60, 209, 35, 47, 62, 131, 4, 32, 190, 129, 250, 40, 62, 151, 21, 43, 190, 20, 229, 206, 189, 126, 32, 3, 190, 145, 205, 241, 189, 2, 159, 3, 62, 159, 76, 200, 61, 81, 5, 195, 61, 49, 58, 184, 189, 21, 177, 153, 189, 202, 153, 28, 190, 205, 212, 1, 61, 75, 153, 147, 189, 136, 233, 1, 187, 188, 36, 169, 189, 52, 189, 5, 189, 68, 248, 88, 189, 74, 218, 29, 189, 113, 177, 48, 187, 224, 8, 113, 189, 9, 61, 17, 190, 151, 78, 29, 190, 211, 231, 221, 189, 72, 12, 160, 188, 135, 248, 185, 188, 214, 221, 171, 62, 131, 222, 55, 61, 69, 107, 113, 61, 16, 187, 150, 62, 223, 127, 10, 61, 147, 40, 150, 189, 52, 144, 180, 190, 219, 33, 0, 62, 5, 222, 140, 62, 67, 132, 141, 190, 13, 167, 107, 190, 38, 152, 220, 190, 172, 187, 151, 62, 146, 241, 141, 190, 173, 96, 12, 62, 60, 20, 129, 190, 161, 142, 128, 190, 208, 197, 31, 190, 91, 238, 179, 190, 15, 79, 210, 188, 244, 117, 8, 190, 20, 116, 152, 62, 196, 195, 179, 190, 66, 62, 221, 190, 16, 115, 212, 188, 244, 112, 141, 190, 236, 49, 134, 62, 168, 29, 176, 62, 252, 237, 238, 189, 245, 87, 201, 189, 225, 223, 82, 62, 64, 29, 5, 190, 14, 218, 106, 188, 164, 116, 31, 61, 164, 109, 158, 62, 73, 222, 182, 190, 238, 156, 68, 61, 153, 129, 129, 61, 106, 238, 140, 61, 110, 0, 129, 62, 45, 132, 24, 191, 22, 235, 104, 62, 9, 20, 30, 62, 93, 124, 135, 190, 160, 183, 244, 189, 87, 102, 62, 62, 73, 96, 229, 189, 148, 95, 148, 189, 223, 204, 240, 188, 244, 160, 135, 62, 208, 253, 71, 62, 168, 218, 103, 62, 145, 247, 30, 61, 101, 28, 115, 190, 196, 42, 142, 60, 43, 155, 84, 61, 26, 53, 100, 62, 36, 17, 18, 62, 45, 190, 7, 191, 106, 165, 53, 190, 110, 184, 47, 60, 56, 173, 227, 190, 88, 131, 6, 60, 117, 209, 131, 190, 130, 9, 232, 61, 162, 20, 130, 189, 132, 225, 43, 190, 168, 183, 113, 59, 86, 129, 99, 189, 128, 60, 5, 62, 227, 191, 110, 189, 226, 242, 7, 63, 6, 147, 64, 61, 6, 217, 29, 190, 136, 206, 150, 60, 151, 54, 112, 190, 67, 187, 11, 191, 237, 146, 176, 62, 65, 116, 167, 188, 254, 206, 169, 189, 60, 103, 70, 62, 197, 44, 187, 61, 131, 245, 165, 62, 93, 51, 90, 190, 58, 121, 142, 62, 93, 205, 194, 62, 51, 199, 114, 189, 243, 232, 189, 61, 0, 102, 217, 189, 33, 139, 159, 62, 9, 184, 37, 190, 154, 204, 156, 62, 242, 35, 147, 62, 182, 195, 230, 190, 199, 128, 160, 61, 54, 201, 2, 189, 87, 127, 115, 61, 198, 77, 108, 60, 192, 156, 184, 189, 68, 21, 87, 190, 85, 147, 169, 61, 218, 255, 27, 190, 150, 93, 64, 190, 235, 155, 85, 62, 115, 111, 136, 61, 155, 240, 182, 189, 78, 140, 99, 62, 104, 246, 133, 190, 69, 240, 229, 190, 0, 26, 175, 62, 230, 42, 27, 190, 192, 149, 127, 190, 103, 235, 131, 62, 226, 211, 169, 59, 160, 59, 188, 61, 60, 166, 38, 190, 197, 18, 57, 62, 47, 68, 101, 62, 79, 60, 81, 61, 235, 207, 136, 62, 52, 188, 144, 189, 81, 179, 195, 62, 34, 169, 143, 190, 60, 216, 176, 62, 234, 197, 39, 62, 86, 150, 244, 189, 156, 225, 190, 189, 0, 196, 244, 61, 67, 93, 18, 62, 246, 226, 215, 189, 182, 191, 215, 188, 253, 239, 46, 60, 148, 155, 26, 190, 8, 147, 12, 190, 15, 195, 251, 60, 209, 163, 145, 188, 203, 2, 66, 189, 81, 116, 251, 61, 202, 192, 245, 189, 176, 225, 234, 189, 4, 132, 234, 59, 101, 225, 157, 61, 229, 102, 246, 189, 85, 122, 11, 190, 203, 152, 122, 187, 6, 191, 163, 61, 50, 17, 136, 189, 246, 142, 244, 189, 168, 159, 18, 62, 115, 56, 186, 189, 46, 218, 44, 190, 30, 224, 1, 190, 239, 86, 171, 189, 80, 167, 195, 188, 224, 196, 1, 190, 198, 205, 214, 189, 3, 124, 168, 60, 182, 133, 5, 191, 36, 85, 203, 61, 24, 232, 84, 190, 11, 193, 5, 62, 103, 114, 79, 62, 134, 9, 58, 62, 35, 37, 234, 190, 1, 54, 36, 62, 114, 15, 27, 190, 127, 48, 170, 190, 40, 132, 216, 62, 116, 80, 152, 62, 194, 66, 29, 62, 204, 156, 173, 61, 162, 191, 116, 190, 25, 65, 237, 190, 167, 113, 190, 62, 19, 236, 33, 189, 218, 182, 123, 190, 158, 181, 78, 62, 70, 107, 150, 61, 105, 225, 148, 62, 88, 89, 211, 61, 93, 239, 226, 61, 11, 5, 123, 62, 212, 213, 5, 61, 126, 240, 184, 61, 190, 77, 212, 59, 197, 145, 94, 62, 200, 20, 208, 190, 29, 212, 29, 63, 133, 92, 211, 62, 17, 121, 221, 62, 233, 154, 92, 61, 15, 235, 4, 63, 95, 113, 134, 190, 80, 24, 52, 190, 30, 36, 214, 62, 117, 28, 60, 62, 185, 67, 118, 188, 204, 244, 77, 61, 15, 144, 96, 61, 21, 4, 14, 191, 6, 32, 159, 189, 198, 209, 192, 62, 204, 168, 52, 190, 116, 171, 116, 62, 15, 66, 195, 62, 53, 37, 142, 190, 85, 31, 253, 61, 53, 31, 6, 63, 153, 164, 18, 190, 163, 80, 157, 60, 109, 120, 16, 61, 40, 94, 151, 62, 4, 62, 203, 190, 11, 181, 211, 190, 32, 58, 28, 62, 254, 17, 150, 190, 138, 213, 73, 190, 98, 46, 242, 190, 241, 64, 119, 62, 9, 218, 223, 190, 166, 145, 197, 189, 208, 184, 232, 189, 86, 194, 88, 61, 234, 65, 243, 189, 224, 222, 15, 190, 155, 192, 184, 60, 50, 192, 16, 61, 5, 41, 146, 188, 51, 247, 93, 189, 247, 33, 2, 189, 152, 11, 213, 189, 145, 213, 51, 189, 195, 135, 47, 189, 253, 18, 119, 189, 71, 17, 51, 190, 248, 220, 32, 61, 89, 130, 156, 188, 23, 46, 150, 189, 78, 151, 230, 60, 135, 136, 13, 61, 59, 237, 13, 190, 189, 253, 221, 61, 240, 237, 164, 189, 25, 242, 200, 189, 250, 156, 197, 189, 202, 166, 231, 60, 74, 249, 181, 61, 167, 43, 11, 189, 30, 168, 134, 189, 248, 35, 17, 62, 14, 239, 32, 189, 138, 74, 169, 61, 11, 101, 45, 190, 253, 22, 226, 189, 84, 232, 125, 61, 230, 99, 126, 61, 251, 177, 133, 186, 75, 201, 19, 190, 65, 85, 199, 61, 126, 29, 93, 62, 171, 190, 28, 62, 52, 54, 164, 61, 87, 237, 60, 190, 164, 216, 73, 190, 169, 23, 93, 61, 134, 91, 110, 60, 223, 148, 152, 61, 138, 51, 29, 60, 48, 239, 56, 61, 67, 79, 45, 60, 180, 33, 46, 189, 12, 212, 7, 61, 95, 106, 239, 61, 44, 17, 202, 61, 93, 32, 179, 188, 225, 91, 205, 189, 145, 12, 175, 190, 124, 60, 215, 189, 213, 38, 83, 62, 246, 235, 118, 61, 7, 31, 229, 189, 73, 190, 6, 189, 225, 90, 131, 62, 49, 80, 177, 190, 218, 91, 60, 62, 195, 53, 3, 191, 26, 191, 200, 190, 79, 251, 55, 190, 123, 180, 197, 62, 191, 206, 48, 191, 95, 213, 175, 62, 187, 135, 69, 189, 192, 50, 125, 62, 218, 95, 161, 188, 88, 71, 136, 191, 13, 195, 160, 191, 214, 156, 50, 190, 43, 160, 175, 62, 78, 152, 247, 190, 84, 186, 140, 62, 62, 113, 184, 190, 25, 224, 85, 190, 197, 145, 21, 190, 27, 239, 69, 191, 236, 88, 20, 191, 201, 195, 10, 191, 5, 58, 87, 62, 38, 152, 202, 187, 92, 193, 36, 189, 10, 4, 40, 189, 88, 107, 227, 190, 53, 161, 47, 191, 113, 110, 32, 61, 145, 218, 57, 62, 6, 167, 138, 190, 41, 211, 137, 61, 166, 166, 60, 62, 241, 222, 189, 62, 215, 160, 97, 189, 202, 200, 49, 62, 19, 74, 162, 190, 236, 51, 47, 62, 5, 251, 127, 190, 30, 189, 111, 62, 86, 215, 122, 60, 87, 54, 35, 62, 22, 27, 5, 191, 41, 13, 34, 191, 50, 120, 76, 190, 200, 140, 179, 190, 160, 2, 244, 190, 54, 156, 135, 62, 158, 63, 133, 62, 95, 254, 146, 190, 2, 4, 200, 60, 61, 39, 183, 62, 239, 75, 75, 190, 60, 146, 190, 61, 94, 34, 223, 189, 133, 229, 43, 62, 217, 219, 42, 191, 54, 238, 16, 190, 251, 31, 55, 62, 67, 147, 12, 190, 82, 103, 1, 190, 13, 202, 188, 190, 152, 101, 250, 62, 243, 15, 196, 189, 75, 68, 7, 62, 191, 9, 82, 189, 35, 111, 139, 190, 221, 31, 4, 63, 147, 23, 71, 190, 49, 157, 43, 62, 136, 1, 31, 62, 143, 133, 38, 62, 172, 208, 172, 190, 168, 173, 172, 61, 149, 2, 3, 190, 3, 238, 72, 191, 156, 161, 227, 189, 109, 171, 42, 62, 104, 89, 205, 190, 52, 148, 73, 62, 255, 177, 158, 62, 93, 201, 231, 190, 163, 103, 29, 190, 7, 230, 230, 187, 131, 1, 181, 189, 119, 23, 207, 190, 186, 72, 39, 190, 252, 106, 132, 62, 222, 166, 102, 191, 8, 190, 47, 190, 161, 248, 201, 62, 247, 75, 101, 191, 233, 70, 192, 62, 218, 118, 84, 191, 245, 44, 141, 62, 239, 203, 182, 190, 119, 237, 38, 61, 204, 23, 211, 60, 60, 189, 2, 189, 135, 175, 29, 62, 235, 208, 166, 61, 77, 242, 138, 187, 17, 92, 3, 62, 118, 119, 26, 61, 36, 150, 206, 188, 84, 183, 10, 190, 143, 247, 188, 61, 111, 98, 225, 61, 24, 55, 52, 190, 114, 155, 215, 189, 5, 125, 162, 189, 233, 126, 152, 61, 28, 203, 237, 189, 132, 176, 28, 62, 173, 132, 56, 60, 197, 58, 6, 62, 50, 89, 182, 61, 250, 80, 254, 189, 254, 208, 9, 189, 205, 254, 220, 188, 87, 158, 11, 190, 21, 186, 7, 62, 172, 50, 44, 189, 165, 86, 51, 190, 4, 187, 43, 190, 93, 164, 218, 189, 64, 194, 198, 188, 118, 50, 243, 61, 76, 183, 27, 189, 108, 186, 162, 61, 64, 213, 132, 61, 58, 83, 194, 61, 146, 70, 17, 190, 249, 24, 109, 189, 207, 156, 211, 61, 168, 144, 64, 189, 139, 101, 56, 61, 154, 223, 206, 60, 223, 201, 40, 62, 17, 158, 211, 189, 123, 119, 214, 59, 112, 231, 63, 61, 64, 89, 145, 61, 243, 122, 162, 189, 115, 42, 27, 190, 38, 197, 214, 189, 241, 190, 103, 189, 93, 210, 17, 62, 175, 200, 47, 190, 145, 187, 36, 190, 54, 132, 24, 190, 43, 107, 220, 189, 90, 51, 196, 189, 96, 139, 62, 189, 3, 144, 24, 190, 253, 195, 32, 190, 194, 224, 184, 189, 228, 22, 228, 189, 131, 97, 233, 189, 205, 230, 83, 189, 27, 196, 208, 189, 106, 111, 11, 191, 38, 215, 189, 188, 238, 70, 41, 62, 91, 34, 93, 62, 161, 224, 203, 190, 128, 93, 253, 61, 30, 229, 113, 62, 249, 152, 7, 62, 223, 234, 12, 190, 77, 122, 103, 61, 239, 248, 115, 191, 143, 244, 136, 189, 136, 30, 70, 59, 51, 173, 238, 60, 186, 23, 58, 191, 248, 159, 96, 62, 121, 69, 110, 191, 94, 28, 182, 61, 50, 11, 72, 62, 210, 182, 11, 189, 71, 222, 167, 61, 194, 133, 52, 190, 104, 235, 84, 62, 202, 150, 71, 190, 108, 2, 181, 190, 41, 74, 109, 62, 118, 89, 90, 191, 112, 250, 90, 190, 89, 234, 22, 191, 49, 11, 147, 62, 124, 191, 94, 190, 104, 121, 129, 62, 111, 204, 15, 191, 88, 245, 113, 59, 19, 112, 126, 62, 82, 139, 251, 62, 215, 179, 152, 190, 215, 117, 56, 62, 124, 232, 106, 62, 31, 139, 90, 62, 172, 150, 107, 189, 96, 107, 31, 191, 94, 138, 140, 191, 75, 32, 254, 189, 45, 87, 0, 190, 198, 193, 150, 190, 93, 81, 51, 189, 9, 217, 188, 62, 196, 39, 74, 191, 73, 244, 138, 189, 168, 9, 147, 62, 35, 140, 47, 190, 128, 243, 59, 61, 113, 123, 229, 62, 11, 228, 210, 61, 109, 177, 39, 191, 166, 96, 3, 190, 167, 195, 141, 62, 33, 42, 37, 191, 249, 98, 202, 188, 230, 54, 208, 190, 185, 46, 153, 62, 232, 90, 158, 189, 103, 109, 127, 61, 253, 136, 123, 62, 159, 66, 81, 190, 193, 132, 30, 190, 110, 104, 17, 61, 252, 158, 228, 190, 159, 27, 170, 61, 120, 108, 174, 189, 167, 240, 147, 61, 85, 43, 187, 61, 27, 200, 5, 62, 79, 57, 212, 61, 127, 33, 161, 190, 153, 188, 52, 62, 146, 248, 22, 62, 111, 185, 157, 62, 197, 72, 197, 189, 8, 172, 0, 62, 108, 10, 32, 190, 106, 185, 163, 62, 189, 114, 3, 62, 98, 201, 82, 59, 219, 20, 144, 189, 2, 185, 16, 190, 218, 184, 3, 62, 186, 225, 8, 190, 191, 63, 186, 189, 100, 161, 111, 188, 222, 51, 157, 190, 27, 85, 8, 61, 32, 253, 11, 191, 159, 28, 128, 60, 18, 38, 4, 60, 167, 230, 55, 190, 127, 13, 141, 189, 3, 142, 145, 190, 105, 120, 4, 62, 123, 216, 234, 189, 67, 78, 141, 189, 201, 253, 81, 189, 3, 85, 113, 189, 137, 188, 32, 190, 0, 201, 183, 62, 243, 161, 6, 61, 242, 100, 0, 190, 180, 174, 0, 62, 144, 144, 202, 61, 197, 134, 50, 62, 182, 121, 228, 189, 94, 44, 138, 189, 110, 209, 229, 189, 161, 35, 187, 190, 129, 148, 124, 62, 10, 236, 78, 190, 132, 4, 61, 188, 32, 51, 232, 189, 201, 97, 75, 60, 64, 180, 196, 61, 124, 214, 175, 190, 198, 1, 106, 190, 43, 57, 56, 189, 223, 103, 97, 62, 102, 124, 109, 61, 229, 117, 232, 187, 63, 200, 253, 59, 75, 248, 163, 190, 102, 62, 41, 189, 177, 211, 155, 190, 100, 70, 140, 62, 133, 108, 3, 62, 223, 104, 69, 61, 152, 27, 162, 190, 153, 222, 144, 62, 149, 128, 191, 59, 17, 184, 8, 190, 39, 118, 188, 189, 92, 55, 57, 62, 219, 186, 169, 61, 120, 202, 165, 60, 246, 242, 216, 190, 61, 210, 13, 191, 188, 2, 105, 61, 115, 235, 172, 61, 158, 150, 128, 190, 118, 197, 37, 62, 180, 12, 220, 188, 202, 27, 196, 62, 97, 239, 188, 188, 247, 243, 66, 62, 155, 71, 159, 62, 142, 236, 201, 190, 44, 21, 139, 189, 246, 169, 106, 62, 111, 170, 221, 62, 46, 168, 104, 189, 216, 128, 48, 62, 217, 197, 143, 62, 145, 82, 220, 189, 222, 42, 246, 188, 41, 54, 128, 190, 92, 71, 41, 60, 3, 247, 112, 190, 106, 68, 129, 190, 236, 210, 213, 61, 194, 84, 226, 62, 71, 215, 241, 189, 174, 105, 141, 190, 158, 181, 68, 191, 176, 114, 95, 62, 64, 96, 58, 190, 25, 165, 218, 61, 133, 170, 229, 61, 75, 178, 12, 191, 207, 167, 116, 190, 160, 188, 8, 62, 12, 85, 96, 190, 193, 98, 170, 62, 130, 208, 185, 190, 240, 131, 151, 61, 54, 69, 68, 61, 102, 39, 125, 62, 238, 218, 150, 62, 7, 227, 111, 191, 225, 189, 82, 189, 62, 241, 137, 191, 215, 55, 126, 62, 146, 91, 43, 190, 181, 114, 145, 188, 142, 166, 109, 62, 129, 148, 62, 62, 96, 172, 60, 61, 142, 93, 204, 62, 210, 214, 179, 189, 37, 113, 50, 190, 225, 145, 205, 62, 228, 70, 185, 61, 240, 244, 210, 189, 221, 82, 254, 188, 105, 43, 159, 189, 66, 254, 135, 191, 79, 62, 69, 190, 85, 146, 2, 62, 0, 155, 5, 190, 152, 36, 201, 62, 134, 93, 11, 63, 68, 90, 6, 191, 118, 121, 198, 188, 231, 57, 207, 62, 172, 125, 106, 190, 77, 192, 113, 190, 69, 93, 244, 61, 80, 254, 177, 62, 120, 19, 101, 191, 31, 235, 241, 190, 63, 130, 180, 62, 156, 52, 24, 191, 65, 156, 184, 61, 88, 244, 32, 191, 70, 123, 111, 62, 110, 72, 151, 190, 84, 200, 170, 61, 221, 192, 247, 61, 235, 222, 3, 190, 35, 33, 22, 59, 171, 146, 54, 63, 226, 208, 123, 61, 39, 236, 124, 62, 166, 139, 45, 62, 193, 81, 118, 190, 74, 55, 236, 189, 150, 20, 18, 190, 152, 167, 95, 190, 62, 215, 170, 189, 157, 204, 0, 63, 89, 191, 172, 190, 62, 133, 35, 190, 43, 234, 117, 62, 41, 197, 50, 190, 182, 112, 239, 189, 82, 226, 145, 62, 165, 1, 19, 191, 150, 125, 228, 190, 199, 86, 108, 191, 10, 108, 72, 62, 35, 253, 64, 191, 136, 46, 64, 190, 132, 251, 109, 190, 166, 86, 68, 191, 160, 6, 24, 62, 222, 249, 81, 191, 185, 24, 195, 61, 45, 30, 186, 190, 113, 145, 190, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {6, 174, 204, 61, 176, 237, 176, 61, 186, 106, 177, 189, 159, 118, 154, 62, 248, 3, 174, 62, 142, 67, 252, 189, 198, 24, 60, 62, 200, 135, 55, 190, 98, 5, 29, 190, 206, 31, 173, 189, 11, 102, 8, 62, 51, 120, 183, 188, 90, 226, 144, 61, 25, 149, 139, 62, 161, 60, 193, 189, 175, 108, 32, 62, 130, 225, 142, 189, 225, 8, 234, 189, 149, 26, 147, 62, 112, 7, 15, 61, 175, 167, 34, 61, 133, 242, 145, 62, 23, 175, 79, 190, 31, 77, 18, 190, 27, 72, 96, 62, 35, 161, 223, 61, 161, 94, 36, 190, 100, 189, 23, 62, 242, 184, 174, 61, 218, 121, 236, 189, 21, 105, 115, 62, 72, 123, 170, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {137, 119, 25, 190, 199, 44, 165, 190, 140, 31, 138, 190, 223, 162, 134, 63, 144, 141, 80, 189, 213, 45, 220, 62, 67, 139, 35, 63, 2, 141, 248, 61, 225, 244, 3, 62, 137, 38, 104, 189, 62, 119, 2, 191, 99, 104, 128, 190, 53, 95, 22, 191, 192, 231, 208, 190, 167, 125, 13, 190, 197, 241, 85, 191, 66, 63, 74, 63, 182, 56, 38, 190, 227, 229, 92, 61, 78, 197, 175, 63, 4, 88, 61, 63, 133, 158, 155, 63, 219, 245, 8, 62, 105, 162, 3, 60, 227, 88, 149, 62, 153, 33, 116, 63, 212, 65, 156, 190, 248, 62, 106, 62, 207, 90, 10, 191, 63, 217, 95, 191, 223, 46, 136, 63, 9, 116, 131, 191, 93, 204, 254, 190, 164, 118, 212, 60, 13, 145, 236, 61, 201, 211, 79, 61, 56, 41, 179, 190, 42, 228, 9, 188, 62, 204, 133, 61, 92, 70, 151, 61, 140, 65, 206, 61, 186, 12, 43, 62, 214, 81, 54, 190, 106, 233, 221, 189, 201, 111, 146, 62, 187, 37, 174, 61, 161, 211, 35, 61, 14, 172, 60, 61, 241, 26, 150, 62, 121, 93, 155, 60, 71, 138, 129, 190, 182, 169, 118, 59, 159, 244, 138, 189, 10, 27, 93, 61, 63, 66, 226, 187, 171, 69, 33, 61, 156, 88, 157, 190, 235, 8, 6, 190, 17, 83, 177, 60, 3, 214, 217, 61, 174, 1, 254, 60, 49, 15, 156, 62, 238, 134, 149, 62, 144, 188, 254, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 154, 37, 190, 186, 247, 190, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {151, 109, 75, 190, 0, 51, 5, 192, 255, 153, 66, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {146, 29, 201, 191, 185, 189, 22, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0034/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}