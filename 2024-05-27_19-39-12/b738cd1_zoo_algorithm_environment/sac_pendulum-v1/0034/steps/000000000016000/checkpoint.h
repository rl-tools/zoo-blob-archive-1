// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 231, 60, 62, 184, 181, 0, 191, 162, 71, 40, 191, 93, 76, 216, 61, 212, 81, 198, 61, 222, 142, 81, 62, 224, 134, 60, 63, 190, 161, 107, 191, 104, 187, 74, 190, 68, 216, 94, 191, 146, 127, 22, 63, 107, 101, 118, 189, 16, 226, 108, 191, 200, 195, 134, 190, 218, 162, 140, 60, 195, 237, 23, 191, 19, 227, 79, 63, 255, 148, 249, 61, 147, 153, 246, 190, 79, 35, 159, 190, 29, 42, 35, 63, 102, 252, 68, 61, 236, 53, 122, 63, 13, 112, 75, 190, 122, 98, 53, 62, 246, 208, 147, 62, 177, 198, 179, 59, 204, 64, 76, 190, 158, 104, 126, 63, 194, 217, 191, 62, 175, 85, 58, 190, 59, 220, 170, 191, 96, 97, 160, 190, 245, 154, 143, 62, 101, 101, 219, 190, 215, 246, 0, 63, 78, 198, 187, 190, 46, 215, 103, 63, 197, 107, 246, 61, 84, 194, 171, 62, 219, 70, 45, 63, 7, 146, 1, 63, 210, 190, 147, 190, 218, 218, 103, 62, 21, 61, 24, 191, 19, 73, 51, 63, 111, 173, 164, 191, 50, 67, 253, 190, 164, 42, 81, 191, 9, 141, 156, 191, 86, 18, 152, 190, 74, 62, 225, 61, 112, 49, 148, 60, 248, 12, 47, 189, 165, 77, 44, 63, 35, 143, 109, 191, 123, 94, 245, 190, 218, 75, 100, 63, 173, 64, 153, 63, 78, 215, 129, 62, 250, 157, 52, 189, 169, 114, 142, 191, 112, 70, 219, 190, 156, 135, 37, 191, 27, 48, 240, 62, 135, 130, 205, 190, 141, 17, 3, 191, 97, 152, 79, 190, 248, 51, 125, 62, 178, 15, 56, 63, 243, 144, 85, 63, 43, 89, 113, 62, 83, 65, 233, 188, 141, 197, 16, 191, 145, 163, 234, 61, 182, 20, 130, 190, 135, 186, 144, 191, 136, 197, 66, 190, 73, 77, 34, 189, 109, 189, 177, 191, 230, 123, 64, 191, 198, 129, 148, 191, 133, 93, 150, 190, 26, 237, 205, 189, 134, 127, 196, 189, 192, 152, 10, 63, 41, 127, 9, 191, 34, 206, 17, 190, 196, 79, 70, 191, 154, 21, 197, 62, 147, 140, 139, 186, 11, 98, 77, 191, 177, 14, 48, 62, 211, 165, 3, 63, 126, 123, 90, 60, 193, 102, 3, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {161, 127, 104, 191, 183, 167, 138, 189, 160, 48, 177, 188, 231, 215, 155, 190, 82, 243, 37, 189, 24, 148, 152, 61, 167, 160, 198, 61, 223, 32, 172, 62, 179, 107, 193, 190, 208, 174, 140, 190, 106, 2, 199, 189, 56, 50, 9, 62, 32, 247, 93, 62, 184, 30, 65, 190, 21, 148, 28, 191, 25, 240, 99, 190, 92, 3, 2, 62, 226, 102, 199, 190, 29, 172, 75, 189, 21, 120, 62, 62, 94, 170, 54, 62, 239, 1, 92, 60, 27, 182, 25, 63, 227, 180, 126, 190, 26, 98, 46, 190, 6, 28, 171, 62, 229, 98, 11, 190, 187, 15, 242, 61, 104, 252, 155, 189, 31, 218, 169, 62, 225, 74, 160, 190, 121, 44, 52, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 35, 78, 189, 17, 224, 221, 189, 167, 38, 131, 62, 11, 171, 71, 62, 234, 213, 186, 190, 217, 215, 217, 61, 200, 62, 127, 188, 156, 3, 119, 62, 119, 93, 239, 189, 4, 189, 5, 190, 115, 170, 165, 191, 186, 225, 164, 61, 211, 32, 239, 61, 21, 105, 86, 59, 130, 189, 16, 62, 1, 164, 181, 190, 251, 79, 219, 190, 44, 207, 37, 62, 8, 178, 95, 62, 168, 109, 53, 62, 50, 95, 137, 190, 5, 228, 203, 61, 194, 192, 111, 61, 167, 118, 142, 189, 117, 255, 10, 189, 76, 123, 16, 191, 218, 15, 125, 190, 244, 3, 134, 190, 84, 155, 170, 62, 248, 34, 130, 61, 5, 113, 120, 189, 232, 162, 151, 62, 164, 29, 203, 189, 42, 23, 208, 189, 191, 119, 161, 189, 155, 82, 77, 189, 127, 107, 174, 62, 210, 12, 243, 61, 78, 147, 3, 191, 132, 21, 5, 62, 138, 129, 207, 60, 245, 170, 171, 61, 6, 201, 211, 190, 215, 40, 69, 188, 86, 144, 33, 61, 177, 166, 172, 62, 117, 44, 127, 60, 53, 137, 6, 191, 102, 33, 15, 61, 180, 154, 33, 62, 215, 42, 130, 190, 84, 182, 93, 62, 173, 196, 57, 190, 5, 226, 64, 62, 133, 72, 246, 59, 78, 4, 182, 62, 252, 161, 72, 62, 106, 85, 181, 190, 228, 195, 209, 61, 171, 100, 77, 190, 132, 72, 132, 62, 6, 41, 194, 190, 147, 119, 237, 189, 134, 86, 28, 62, 70, 226, 244, 189, 110, 253, 247, 189, 118, 47, 95, 189, 177, 78, 169, 62, 18, 96, 62, 61, 185, 225, 198, 189, 173, 248, 219, 61, 13, 69, 57, 62, 124, 68, 10, 189, 160, 43, 68, 187, 219, 235, 9, 63, 91, 228, 249, 61, 135, 126, 157, 189, 181, 126, 119, 189, 71, 217, 57, 187, 33, 226, 44, 62, 252, 60, 190, 62, 34, 219, 14, 189, 223, 127, 0, 190, 1, 220, 58, 190, 58, 84, 124, 61, 129, 198, 78, 191, 246, 94, 213, 61, 82, 71, 6, 62, 77, 165, 142, 62, 193, 68, 136, 190, 205, 11, 191, 190, 121, 107, 161, 190, 27, 171, 246, 61, 82, 153, 144, 62, 207, 209, 232, 61, 180, 115, 225, 189, 9, 49, 11, 191, 11, 246, 111, 190, 179, 95, 132, 191, 122, 24, 138, 62, 204, 87, 136, 191, 72, 131, 225, 62, 95, 47, 4, 189, 204, 202, 225, 62, 167, 171, 124, 60, 3, 166, 151, 189, 55, 63, 71, 191, 177, 208, 94, 190, 86, 250, 243, 62, 91, 35, 148, 61, 143, 251, 147, 189, 177, 66, 124, 191, 111, 22, 7, 190, 247, 59, 12, 189, 39, 72, 105, 191, 10, 118, 64, 62, 138, 59, 250, 190, 19, 245, 103, 62, 27, 209, 136, 190, 90, 15, 22, 62, 251, 116, 246, 190, 18, 244, 240, 190, 240, 83, 214, 190, 176, 134, 49, 62, 204, 170, 150, 62, 216, 23, 154, 189, 172, 64, 253, 190, 87, 6, 232, 61, 58, 32, 109, 190, 238, 64, 246, 187, 244, 192, 55, 62, 139, 13, 70, 62, 19, 164, 141, 189, 170, 66, 115, 61, 245, 137, 90, 57, 155, 135, 156, 62, 197, 173, 150, 61, 17, 135, 52, 190, 176, 157, 33, 190, 202, 105, 219, 61, 63, 252, 85, 60, 147, 137, 167, 189, 180, 64, 242, 61, 177, 229, 133, 190, 238, 171, 82, 61, 69, 175, 200, 61, 12, 183, 45, 62, 28, 150, 23, 62, 116, 225, 87, 61, 15, 228, 23, 62, 8, 208, 192, 61, 242, 219, 219, 188, 74, 10, 17, 62, 19, 224, 70, 62, 57, 107, 79, 62, 151, 82, 82, 190, 228, 150, 207, 59, 131, 194, 84, 62, 94, 33, 46, 62, 33, 145, 67, 62, 56, 107, 114, 187, 163, 213, 87, 190, 70, 244, 19, 190, 165, 140, 82, 61, 111, 38, 4, 62, 214, 203, 13, 61, 113, 198, 47, 190, 187, 73, 229, 61, 85, 129, 193, 188, 97, 15, 29, 191, 172, 106, 52, 189, 158, 0, 96, 62, 16, 234, 59, 62, 121, 201, 184, 189, 238, 218, 56, 62, 207, 181, 94, 190, 176, 236, 209, 187, 232, 255, 40, 189, 160, 166, 46, 190, 108, 213, 133, 190, 163, 120, 117, 60, 255, 6, 118, 62, 197, 149, 150, 60, 132, 91, 47, 191, 128, 108, 91, 63, 25, 91, 128, 190, 141, 131, 8, 62, 66, 248, 237, 61, 88, 35, 208, 62, 164, 182, 0, 190, 155, 228, 112, 63, 174, 223, 147, 61, 205, 77, 185, 62, 166, 41, 122, 190, 41, 29, 234, 61, 1, 227, 150, 190, 233, 145, 159, 62, 187, 211, 241, 189, 2, 153, 77, 62, 101, 204, 38, 189, 69, 229, 247, 60, 76, 94, 37, 190, 106, 105, 5, 191, 178, 207, 244, 61, 176, 144, 200, 189, 74, 194, 115, 190, 124, 33, 162, 62, 68, 185, 252, 62, 209, 18, 187, 190, 191, 211, 198, 189, 114, 200, 120, 62, 242, 92, 180, 190, 211, 138, 10, 62, 96, 49, 166, 189, 163, 87, 134, 58, 228, 114, 93, 191, 97, 54, 144, 190, 49, 87, 121, 189, 146, 243, 157, 190, 136, 102, 183, 183, 18, 34, 146, 190, 128, 116, 133, 62, 188, 72, 178, 190, 6, 164, 44, 62, 56, 42, 46, 190, 135, 164, 22, 189, 237, 12, 238, 60, 136, 0, 18, 188, 173, 117, 34, 190, 74, 42, 48, 190, 100, 141, 240, 189, 197, 153, 11, 62, 25, 172, 43, 61, 208, 103, 73, 59, 14, 21, 223, 189, 61, 115, 231, 61, 251, 248, 81, 60, 196, 121, 138, 61, 118, 118, 31, 61, 43, 26, 158, 61, 151, 12, 192, 61, 56, 153, 157, 189, 164, 208, 15, 189, 235, 113, 216, 189, 244, 158, 128, 61, 127, 143, 88, 190, 19, 21, 6, 61, 159, 206, 161, 188, 59, 156, 71, 62, 23, 60, 31, 190, 236, 214, 125, 189, 100, 176, 196, 61, 253, 118, 106, 189, 159, 36, 65, 189, 3, 229, 22, 190, 161, 234, 58, 190, 181, 82, 201, 189, 84, 54, 51, 188, 66, 245, 247, 189, 218, 185, 127, 189, 241, 85, 69, 190, 250, 48, 134, 60, 221, 124, 158, 60, 134, 168, 8, 186, 191, 89, 31, 62, 158, 165, 252, 189, 193, 27, 179, 60, 229, 168, 4, 62, 198, 84, 217, 61, 135, 242, 42, 61, 71, 236, 46, 190, 25, 30, 66, 190, 101, 124, 240, 61, 90, 75, 122, 189, 183, 205, 178, 61, 155, 128, 193, 189, 197, 151, 38, 190, 129, 172, 29, 190, 159, 184, 9, 62, 41, 155, 57, 61, 132, 68, 127, 61, 9, 27, 6, 190, 155, 125, 195, 189, 23, 242, 41, 61, 197, 119, 154, 189, 61, 35, 72, 190, 133, 33, 82, 190, 167, 155, 117, 188, 6, 33, 50, 190, 0, 133, 232, 189, 197, 30, 93, 189, 129, 45, 201, 189, 226, 187, 246, 61, 251, 245, 3, 61, 164, 206, 48, 190, 212, 241, 108, 60, 209, 35, 47, 62, 131, 4, 32, 190, 129, 250, 40, 62, 151, 21, 43, 190, 20, 229, 206, 189, 126, 32, 3, 190, 145, 205, 241, 189, 2, 159, 3, 62, 159, 76, 200, 61, 81, 5, 195, 61, 49, 58, 184, 189, 21, 177, 153, 189, 202, 153, 28, 190, 205, 212, 1, 61, 75, 153, 147, 189, 136, 233, 1, 187, 188, 36, 169, 189, 52, 189, 5, 189, 68, 248, 88, 189, 74, 218, 29, 189, 113, 177, 48, 187, 224, 8, 113, 189, 9, 61, 17, 190, 151, 78, 29, 190, 25, 23, 58, 186, 65, 39, 45, 189, 152, 173, 99, 61, 175, 218, 57, 62, 215, 247, 173, 61, 12, 246, 123, 188, 179, 0, 152, 62, 106, 143, 29, 188, 147, 40, 150, 189, 62, 130, 204, 190, 58, 223, 168, 62, 125, 215, 139, 62, 39, 22, 177, 190, 3, 66, 136, 190, 198, 84, 249, 190, 196, 225, 173, 62, 87, 172, 254, 189, 173, 96, 12, 62, 189, 119, 150, 190, 192, 66, 160, 190, 138, 4, 37, 61, 124, 236, 19, 191, 252, 226, 178, 188, 136, 114, 75, 190, 100, 92, 161, 62, 193, 191, 102, 190, 249, 66, 143, 190, 151, 230, 1, 189, 242, 41, 152, 190, 81, 140, 139, 62, 189, 157, 187, 62, 120, 16, 3, 190, 247, 102, 247, 189, 105, 165, 80, 62, 14, 12, 32, 190, 95, 171, 159, 188, 74, 188, 238, 188, 226, 35, 174, 62, 163, 83, 244, 190, 154, 152, 5, 59, 153, 129, 129, 61, 100, 10, 12, 60, 9, 228, 154, 62, 90, 209, 14, 191, 245, 8, 84, 62, 254, 55, 22, 62, 209, 14, 143, 190, 254, 9, 7, 190, 53, 231, 101, 62, 73, 96, 229, 189, 113, 224, 179, 189, 230, 173, 224, 189, 107, 190, 139, 62, 15, 184, 47, 62, 238, 93, 253, 61, 250, 45, 170, 60, 233, 209, 22, 190, 192, 184, 145, 61, 55, 140, 85, 61, 203, 197, 114, 62, 184, 32, 230, 61, 169, 197, 255, 190, 111, 231, 121, 189, 173, 213, 5, 189, 150, 186, 234, 190, 225, 217, 186, 188, 42, 170, 149, 190, 1, 35, 26, 62, 33, 187, 91, 188, 15, 141, 88, 190, 144, 100, 147, 188, 172, 202, 92, 189, 128, 60, 5, 62, 76, 225, 3, 190, 95, 244, 27, 63, 117, 64, 192, 60, 132, 255, 104, 190, 16, 123, 102, 60, 170, 92, 117, 190, 68, 79, 33, 191, 9, 137, 224, 62, 65, 116, 167, 188, 132, 84, 9, 190, 156, 71, 79, 62, 195, 186, 63, 61, 119, 232, 156, 62, 163, 157, 110, 190, 29, 84, 159, 62, 58, 83, 193, 62, 227, 15, 216, 189, 147, 143, 216, 61, 108, 41, 19, 189, 158, 117, 156, 62, 59, 81, 54, 190, 188, 127, 158, 62, 228, 48, 137, 62, 144, 232, 235, 190, 235, 188, 84, 61, 58, 217, 43, 189, 192, 237, 126, 61, 114, 96, 90, 60, 31, 84, 50, 190, 234, 187, 109, 190, 32, 118, 177, 61, 218, 255, 27, 190, 251, 109, 173, 190, 210, 164, 144, 62, 21, 62, 122, 61, 11, 232, 59, 190, 215, 121, 100, 62, 46, 34, 136, 190, 240, 130, 2, 191, 189, 28, 213, 62, 230, 42, 27, 190, 242, 152, 144, 190, 186, 17, 141, 62, 23, 139, 173, 188, 124, 193, 141, 61, 148, 45, 64, 190, 205, 196, 94, 62, 216, 231, 138, 62, 30, 108, 23, 61, 204, 142, 145, 62, 249, 117, 185, 188, 177, 27, 197, 62, 140, 194, 138, 190, 126, 180, 203, 62, 154, 194, 39, 62, 86, 150, 244, 189, 156, 225, 190, 189, 0, 196, 244, 61, 67, 93, 18, 62, 246, 226, 215, 189, 182, 191, 215, 188, 253, 239, 46, 60, 148, 155, 26, 190, 8, 147, 12, 190, 15, 195, 251, 60, 209, 163, 145, 188, 203, 2, 66, 189, 81, 116, 251, 61, 202, 192, 245, 189, 176, 225, 234, 189, 4, 132, 234, 59, 101, 225, 157, 61, 229, 102, 246, 189, 85, 122, 11, 190, 203, 152, 122, 187, 6, 191, 163, 61, 50, 17, 136, 189, 246, 142, 244, 189, 168, 159, 18, 62, 115, 56, 186, 189, 46, 218, 44, 190, 30, 224, 1, 190, 239, 86, 171, 189, 80, 167, 195, 188, 224, 196, 1, 190, 198, 205, 214, 189, 3, 124, 168, 60, 215, 56, 9, 191, 197, 187, 144, 61, 111, 93, 93, 190, 127, 194, 9, 62, 170, 35, 133, 62, 138, 49, 30, 62, 48, 153, 244, 190, 235, 104, 39, 62, 114, 15, 27, 190, 9, 125, 218, 190, 144, 78, 2, 63, 88, 250, 146, 62, 246, 241, 206, 61, 231, 54, 195, 61, 210, 187, 126, 190, 37, 27, 4, 191, 71, 176, 235, 62, 19, 236, 33, 189, 39, 165, 140, 190, 63, 190, 106, 62, 49, 90, 74, 61, 109, 53, 135, 62, 197, 156, 192, 61, 199, 83, 37, 62, 123, 116, 136, 62, 129, 11, 222, 60, 123, 107, 215, 61, 46, 160, 173, 61, 194, 119, 91, 62, 216, 169, 205, 190, 76, 239, 34, 63, 105, 221, 211, 62, 195, 230, 215, 62, 157, 167, 143, 61, 109, 208, 6, 63, 105, 157, 178, 190, 74, 146, 78, 190, 88, 160, 240, 62, 195, 111, 66, 62, 109, 18, 19, 189, 204, 244, 77, 61, 168, 228, 233, 61, 52, 200, 28, 191, 108, 35, 137, 189, 168, 103, 235, 62, 185, 123, 59, 190, 218, 210, 105, 62, 51, 96, 214, 62, 210, 248, 190, 190, 85, 31, 253, 61, 105, 179, 9, 63, 153, 10, 39, 190, 64, 52, 215, 60, 117, 188, 1, 61, 40, 1, 154, 62, 238, 219, 222, 190, 216, 33, 210, 190, 218, 129, 66, 62, 223, 192, 172, 190, 35, 179, 180, 190, 151, 103, 253, 190, 226, 42, 120, 62, 111, 230, 224, 190, 29, 87, 204, 189, 208, 184, 232, 189, 86, 194, 88, 61, 234, 65, 243, 189, 224, 222, 15, 190, 155, 192, 184, 60, 50, 192, 16, 61, 5, 41, 146, 188, 51, 247, 93, 189, 247, 33, 2, 189, 152, 11, 213, 189, 145, 213, 51, 189, 195, 135, 47, 189, 253, 18, 119, 189, 71, 17, 51, 190, 248, 220, 32, 61, 89, 130, 156, 188, 23, 46, 150, 189, 78, 151, 230, 60, 135, 136, 13, 61, 59, 237, 13, 190, 189, 253, 221, 61, 240, 237, 164, 189, 25, 242, 200, 189, 250, 156, 197, 189, 202, 166, 231, 60, 74, 249, 181, 61, 167, 43, 11, 189, 30, 168, 134, 189, 248, 35, 17, 62, 14, 239, 32, 189, 138, 74, 169, 61, 11, 101, 45, 190, 29, 173, 192, 189, 205, 122, 144, 61, 153, 122, 248, 60, 97, 214, 171, 189, 208, 180, 68, 190, 122, 210, 218, 61, 126, 235, 81, 62, 220, 52, 252, 61, 52, 54, 164, 61, 206, 61, 53, 190, 37, 240, 65, 190, 159, 251, 26, 61, 197, 169, 151, 61, 255, 197, 146, 61, 214, 31, 131, 60, 65, 154, 108, 61, 183, 235, 6, 60, 180, 33, 46, 189, 101, 39, 165, 60, 160, 196, 133, 61, 40, 219, 3, 62, 80, 144, 99, 188, 118, 116, 208, 189, 168, 15, 205, 190, 243, 150, 215, 189, 228, 15, 133, 62, 210, 61, 160, 61, 106, 29, 51, 190, 95, 125, 208, 188, 18, 92, 128, 62, 194, 93, 184, 190, 177, 209, 26, 62, 87, 237, 9, 191, 231, 247, 207, 190, 53, 183, 93, 190, 100, 125, 242, 62, 178, 137, 65, 191, 237, 73, 219, 62, 227, 39, 16, 190, 9, 225, 137, 62, 218, 95, 161, 188, 174, 81, 105, 191, 229, 123, 177, 191, 126, 172, 154, 190, 148, 233, 206, 62, 41, 145, 211, 190, 120, 12, 133, 62, 230, 179, 245, 190, 88, 187, 56, 190, 197, 145, 21, 190, 44, 182, 106, 191, 132, 214, 23, 191, 152, 89, 9, 191, 253, 138, 121, 62, 202, 197, 205, 60, 5, 68, 89, 189, 10, 4, 40, 189, 203, 251, 214, 190, 169, 171, 43, 191, 234, 8, 194, 61, 39, 145, 63, 62, 120, 86, 156, 190, 41, 211, 137, 61, 52, 7, 49, 62, 115, 50, 212, 62, 149, 187, 180, 189, 130, 196, 67, 62, 19, 157, 179, 190, 163, 184, 105, 61, 138, 179, 156, 190, 120, 209, 56, 62, 114, 209, 187, 60, 87, 54, 35, 62, 238, 250, 7, 191, 204, 224, 58, 191, 206, 250, 109, 190, 199, 168, 157, 190, 123, 34, 8, 191, 247, 105, 157, 62, 83, 196, 165, 62, 18, 177, 208, 190, 2, 4, 200, 60, 206, 224, 206, 62, 2, 95, 102, 190, 180, 49, 6, 62, 20, 147, 127, 189, 230, 3, 208, 61, 171, 79, 56, 191, 162, 76, 78, 190, 4, 53, 25, 62, 32, 76, 6, 190, 73, 75, 139, 190, 119, 212, 173, 190, 51, 212, 222, 62, 16, 140, 36, 190, 21, 62, 21, 62, 83, 211, 92, 189, 203, 192, 134, 190, 141, 34, 7, 63, 178, 19, 19, 190, 32, 31, 44, 62, 155, 187, 105, 62, 176, 152, 33, 62, 141, 108, 200, 190, 168, 173, 172, 61, 81, 104, 224, 189, 65, 181, 121, 191, 9, 134, 225, 189, 3, 144, 82, 62, 184, 120, 213, 190, 109, 126, 150, 61, 109, 109, 198, 62, 13, 220, 8, 191, 163, 103, 29, 190, 105, 180, 42, 61, 151, 25, 7, 190, 196, 51, 134, 190, 112, 42, 44, 189, 201, 40, 126, 62, 88, 228, 119, 191, 150, 140, 59, 190, 75, 3, 237, 62, 110, 242, 127, 191, 221, 39, 227, 62, 175, 193, 109, 191, 166, 92, 138, 62, 150, 65, 191, 190, 64, 90, 32, 61, 204, 23, 211, 60, 60, 189, 2, 189, 135, 175, 29, 62, 235, 208, 166, 61, 77, 242, 138, 187, 17, 92, 3, 62, 118, 119, 26, 61, 36, 150, 206, 188, 84, 183, 10, 190, 143, 247, 188, 61, 111, 98, 225, 61, 24, 55, 52, 190, 114, 155, 215, 189, 5, 125, 162, 189, 233, 126, 152, 61, 28, 203, 237, 189, 132, 176, 28, 62, 173, 132, 56, 60, 197, 58, 6, 62, 50, 89, 182, 61, 250, 80, 254, 189, 254, 208, 9, 189, 205, 254, 220, 188, 87, 158, 11, 190, 21, 186, 7, 62, 172, 50, 44, 189, 165, 86, 51, 190, 4, 187, 43, 190, 93, 164, 218, 189, 64, 194, 198, 188, 118, 50, 243, 61, 76, 183, 27, 189, 108, 186, 162, 61, 64, 213, 132, 61, 58, 83, 194, 61, 146, 70, 17, 190, 249, 24, 109, 189, 207, 156, 211, 61, 168, 144, 64, 189, 139, 101, 56, 61, 154, 223, 206, 60, 223, 201, 40, 62, 17, 158, 211, 189, 123, 119, 214, 59, 112, 231, 63, 61, 64, 89, 145, 61, 243, 122, 162, 189, 115, 42, 27, 190, 38, 197, 214, 189, 241, 190, 103, 189, 93, 210, 17, 62, 175, 200, 47, 190, 145, 187, 36, 190, 54, 132, 24, 190, 43, 107, 220, 189, 90, 51, 196, 189, 96, 139, 62, 189, 3, 144, 24, 190, 253, 195, 32, 190, 194, 224, 184, 189, 228, 22, 228, 189, 131, 97, 233, 189, 205, 230, 83, 189, 27, 196, 208, 189, 87, 151, 83, 191, 48, 87, 60, 185, 105, 104, 60, 62, 101, 225, 79, 62, 218, 99, 245, 190, 53, 188, 53, 62, 47, 119, 117, 62, 249, 164, 240, 61, 223, 234, 12, 190, 95, 129, 188, 61, 106, 140, 130, 191, 142, 173, 87, 189, 209, 70, 137, 61, 12, 202, 199, 60, 190, 230, 84, 191, 132, 184, 147, 62, 247, 187, 140, 191, 94, 28, 182, 61, 236, 179, 113, 62, 142, 207, 66, 189, 152, 133, 93, 62, 237, 150, 108, 189, 122, 123, 75, 62, 88, 204, 96, 190, 187, 27, 173, 190, 1, 33, 179, 62, 1, 137, 185, 191, 45, 150, 179, 190, 178, 48, 22, 191, 173, 210, 148, 62, 199, 241, 84, 190, 138, 190, 134, 62, 10, 152, 61, 191, 101, 134, 81, 188, 126, 74, 137, 62, 128, 190, 46, 63, 18, 38, 202, 190, 93, 75, 156, 62, 184, 48, 78, 62, 208, 35, 63, 62, 172, 150, 107, 189, 7, 30, 37, 191, 87, 185, 142, 191, 228, 181, 8, 190, 220, 185, 6, 189, 50, 23, 181, 190, 72, 116, 132, 189, 14, 62, 222, 62, 84, 196, 63, 191, 73, 244, 138, 189, 195, 67, 164, 62, 211, 181, 82, 190, 32, 58, 57, 62, 223, 126, 14, 63, 171, 18, 140, 61, 77, 206, 51, 191, 100, 67, 13, 190, 68, 1, 227, 62, 45, 216, 93, 191, 49, 174, 18, 60, 46, 200, 225, 190, 154, 23, 144, 62, 187, 124, 186, 189, 94, 160, 143, 61, 100, 190, 112, 62, 44, 251, 95, 190, 179, 90, 9, 190, 191, 226, 101, 61, 137, 69, 192, 190, 25, 6, 7, 62, 37, 148, 13, 190, 85, 153, 122, 61, 85, 43, 187, 61, 76, 110, 99, 61, 108, 103, 18, 62, 224, 167, 195, 190, 91, 66, 21, 62, 228, 203, 2, 62, 67, 82, 152, 62, 186, 122, 153, 189, 210, 50, 73, 62, 108, 10, 32, 190, 29, 12, 174, 62, 169, 41, 3, 62, 204, 92, 13, 61, 123, 88, 191, 189, 249, 250, 106, 190, 183, 114, 40, 62, 138, 53, 224, 189, 31, 137, 166, 188, 40, 220, 61, 59, 12, 233, 75, 190, 120, 115, 239, 60, 72, 99, 22, 191, 83, 21, 219, 61, 215, 237, 66, 60, 126, 187, 112, 190, 98, 28, 152, 189, 11, 107, 130, 190, 67, 193, 77, 62, 47, 205, 116, 190, 199, 246, 228, 188, 247, 144, 130, 189, 191, 71, 175, 187, 137, 188, 32, 190, 205, 230, 192, 62, 238, 218, 216, 188, 220, 18, 16, 190, 1, 97, 36, 62, 75, 123, 199, 61, 26, 210, 15, 62, 237, 242, 180, 189, 107, 121, 218, 189, 110, 209, 229, 189, 219, 82, 211, 190, 72, 208, 141, 62, 211, 28, 101, 190, 145, 227, 234, 57, 178, 135, 3, 190, 156, 123, 37, 61, 187, 211, 174, 61, 70, 159, 0, 191, 105, 11, 117, 190, 26, 202, 66, 189, 79, 161, 97, 62, 130, 157, 8, 61, 237, 56, 169, 188, 232, 148, 190, 60, 222, 117, 156, 190, 52, 27, 14, 189, 31, 254, 169, 190, 158, 62, 173, 62, 157, 75, 89, 189, 221, 7, 89, 60, 61, 126, 160, 190, 198, 99, 158, 62, 149, 128, 191, 59, 228, 122, 131, 190, 108, 212, 18, 190, 195, 148, 59, 62, 48, 66, 237, 60, 101, 235, 143, 61, 147, 128, 203, 190, 243, 226, 36, 191, 241, 129, 108, 61, 115, 235, 172, 61, 178, 81, 150, 190, 101, 253, 52, 62, 245, 171, 169, 189, 204, 174, 201, 62, 88, 197, 27, 189, 35, 78, 102, 62, 183, 54, 190, 62, 14, 184, 14, 191, 123, 198, 14, 189, 136, 70, 130, 62, 85, 227, 237, 62, 71, 120, 63, 189, 134, 167, 121, 62, 106, 114, 142, 62, 198, 161, 236, 189, 18, 144, 2, 189, 177, 214, 134, 190, 231, 72, 79, 59, 240, 14, 87, 190, 99, 212, 163, 190, 255, 182, 228, 61, 53, 97, 235, 62, 71, 215, 241, 189, 247, 228, 159, 190, 215, 175, 105, 191, 140, 86, 92, 62, 17, 94, 137, 190, 139, 149, 10, 62, 234, 168, 205, 61, 205, 161, 30, 191, 108, 142, 77, 190, 160, 188, 8, 62, 172, 173, 126, 190, 102, 45, 183, 62, 104, 75, 225, 190, 189, 255, 2, 61, 86, 12, 96, 61, 206, 0, 150, 62, 50, 140, 151, 62, 137, 15, 140, 191, 187, 184, 46, 189, 199, 169, 151, 191, 93, 91, 128, 62, 179, 0, 38, 190, 119, 208, 247, 187, 51, 67, 110, 62, 233, 255, 218, 61, 254, 111, 85, 61, 88, 205, 212, 62, 5, 191, 100, 60, 101, 147, 24, 190, 60, 177, 229, 62, 248, 56, 192, 61, 155, 8, 8, 190, 221, 82, 254, 188, 246, 126, 169, 189, 112, 42, 149, 191, 122, 21, 59, 190, 203, 181, 25, 62, 252, 189, 36, 190, 162, 133, 171, 62, 223, 98, 26, 63, 239, 96, 253, 190, 118, 121, 198, 188, 73, 237, 223, 62, 32, 166, 131, 190, 207, 110, 15, 190, 200, 98, 13, 62, 207, 26, 180, 62, 190, 109, 113, 191, 203, 237, 233, 190, 156, 172, 252, 62, 255, 222, 60, 191, 160, 8, 103, 62, 245, 158, 48, 191, 251, 148, 119, 62, 195, 27, 146, 190, 170, 223, 188, 61, 221, 192, 247, 61, 172, 10, 0, 190, 35, 33, 22, 59, 70, 40, 95, 63, 87, 253, 28, 58, 195, 243, 179, 62, 86, 181, 37, 62, 125, 18, 16, 60, 74, 55, 236, 189, 237, 153, 161, 189, 3, 137, 217, 190, 153, 120, 190, 189, 145, 55, 34, 63, 102, 6, 165, 190, 228, 220, 18, 190, 43, 234, 117, 62, 230, 191, 180, 190, 182, 112, 239, 189, 82, 226, 145, 62, 163, 248, 249, 190, 237, 185, 51, 191, 151, 27, 113, 191, 139, 249, 67, 62, 185, 49, 50, 191, 187, 97, 130, 190, 40, 37, 199, 190, 114, 163, 68, 191, 26, 86, 211, 61, 97, 182, 21, 191, 149, 76, 136, 61, 50, 126, 221, 190, 89, 1, 237, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {85, 28, 191, 61, 223, 12, 198, 61, 170, 254, 148, 189, 170, 202, 157, 62, 103, 149, 169, 62, 33, 121, 229, 189, 156, 75, 39, 62, 200, 135, 55, 190, 98, 5, 29, 190, 206, 31, 173, 189, 239, 196, 3, 62, 182, 13, 115, 189, 185, 137, 96, 61, 104, 125, 139, 62, 161, 60, 193, 189, 239, 90, 37, 62, 113, 50, 158, 189, 225, 8, 234, 189, 73, 160, 130, 62, 4, 70, 138, 61, 144, 71, 192, 60, 253, 45, 142, 62, 23, 175, 79, 190, 31, 77, 18, 190, 130, 17, 101, 62, 167, 122, 227, 61, 6, 58, 24, 190, 205, 22, 45, 62, 119, 49, 170, 61, 77, 135, 237, 189, 189, 44, 128, 62, 152, 52, 140, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 253, 29, 190, 34, 206, 212, 190, 168, 207, 144, 190, 41, 80, 143, 63, 42, 208, 76, 189, 236, 104, 222, 62, 203, 174, 73, 63, 2, 141, 248, 61, 225, 244, 3, 62, 137, 38, 104, 189, 149, 222, 5, 191, 254, 67, 119, 190, 180, 193, 44, 191, 144, 210, 239, 190, 167, 125, 13, 190, 125, 232, 96, 191, 221, 175, 96, 63, 182, 56, 38, 190, 153, 20, 9, 61, 43, 149, 183, 63, 27, 37, 91, 63, 82, 37, 181, 63, 219, 245, 8, 62, 105, 162, 3, 60, 84, 206, 169, 62, 20, 165, 142, 63, 139, 160, 145, 190, 202, 16, 144, 62, 40, 203, 46, 191, 39, 134, 132, 191, 199, 119, 156, 63, 25, 110, 159, 191, 187, 73, 2, 191, 187, 123, 136, 59, 3, 180, 1, 62, 209, 54, 238, 188, 136, 0, 183, 190, 47, 166, 132, 188, 243, 183, 157, 58, 92, 70, 151, 61, 140, 65, 206, 61, 186, 12, 43, 62, 186, 63, 66, 190, 243, 43, 157, 189, 132, 28, 195, 62, 147, 174, 3, 62, 161, 211, 35, 61, 41, 59, 135, 61, 102, 154, 164, 62, 121, 93, 155, 60, 149, 107, 135, 190, 132, 59, 231, 188, 79, 162, 27, 190, 185, 177, 95, 60, 63, 66, 226, 187, 171, 69, 33, 61, 204, 233, 141, 190, 5, 2, 250, 189, 186, 139, 251, 188, 251, 98, 24, 61, 225, 81, 151, 61, 244, 28, 138, 62, 139, 211, 165, 62, 12, 42, 78, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 247, 48, 190, 52, 93, 204, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {59, 35, 200, 191, 194, 4, 51, 191, 55, 69, 177, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {41, 230, 104, 192, 178, 211, 35, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0034/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}