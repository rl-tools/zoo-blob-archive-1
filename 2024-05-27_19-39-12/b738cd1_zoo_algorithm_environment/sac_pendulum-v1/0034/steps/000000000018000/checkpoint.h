// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {30, 10, 40, 62, 207, 94, 5, 191, 20, 12, 37, 191, 254, 59, 175, 61, 216, 55, 216, 61, 147, 153, 76, 62, 105, 216, 60, 63, 205, 83, 114, 191, 65, 28, 54, 190, 169, 223, 104, 191, 146, 214, 12, 63, 102, 176, 39, 189, 1, 153, 127, 191, 201, 28, 159, 190, 65, 143, 115, 61, 106, 46, 39, 191, 50, 198, 87, 63, 151, 166, 196, 61, 85, 213, 10, 191, 238, 53, 152, 190, 186, 62, 40, 63, 251, 91, 37, 61, 240, 177, 120, 63, 221, 24, 37, 190, 122, 98, 53, 62, 246, 208, 147, 62, 177, 198, 179, 59, 155, 226, 214, 190, 55, 149, 130, 63, 213, 178, 184, 62, 75, 214, 26, 190, 41, 101, 173, 191, 26, 20, 151, 190, 246, 7, 137, 62, 212, 154, 225, 190, 59, 177, 1, 63, 153, 157, 206, 190, 224, 69, 111, 63, 39, 128, 194, 61, 166, 180, 170, 62, 171, 12, 48, 63, 22, 27, 2, 63, 237, 72, 141, 190, 197, 105, 64, 62, 150, 56, 20, 191, 227, 2, 52, 63, 239, 186, 160, 191, 225, 160, 11, 191, 2, 15, 92, 191, 141, 227, 155, 191, 2, 36, 149, 190, 74, 62, 225, 61, 112, 49, 148, 60, 248, 12, 47, 189, 116, 64, 44, 63, 244, 194, 103, 191, 6, 62, 7, 191, 134, 242, 97, 63, 163, 102, 155, 63, 39, 73, 125, 62, 49, 228, 252, 188, 206, 100, 144, 191, 109, 157, 221, 190, 9, 107, 34, 191, 237, 191, 250, 62, 91, 20, 206, 190, 0, 216, 5, 191, 96, 47, 90, 190, 95, 247, 111, 62, 249, 211, 53, 63, 25, 16, 85, 63, 129, 42, 126, 62, 160, 90, 46, 189, 251, 45, 12, 191, 188, 207, 214, 61, 16, 43, 125, 190, 77, 96, 147, 191, 121, 67, 64, 190, 34, 99, 201, 189, 236, 199, 173, 191, 104, 9, 69, 191, 7, 42, 159, 191, 72, 93, 130, 190, 6, 95, 213, 189, 58, 196, 27, 190, 185, 166, 22, 63, 87, 113, 12, 191, 243, 160, 26, 190, 49, 176, 76, 191, 53, 176, 185, 62, 41, 91, 250, 187, 102, 110, 71, 191, 153, 239, 41, 62, 46, 173, 1, 63, 171, 117, 128, 60, 117, 40, 254, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 196, 113, 191, 50, 11, 179, 189, 85, 230, 124, 188, 84, 186, 177, 190, 90, 70, 162, 188, 43, 184, 141, 61, 106, 88, 204, 61, 85, 56, 165, 62, 179, 107, 193, 190, 116, 137, 151, 190, 212, 148, 24, 190, 115, 103, 233, 61, 106, 201, 75, 62, 241, 241, 68, 190, 178, 191, 37, 191, 120, 174, 105, 190, 26, 243, 211, 61, 226, 102, 199, 190, 24, 114, 107, 189, 178, 140, 50, 62, 106, 53, 66, 62, 34, 93, 47, 61, 99, 219, 24, 63, 69, 140, 133, 190, 221, 253, 70, 190, 202, 88, 176, 62, 231, 21, 89, 190, 210, 112, 185, 61, 198, 180, 180, 189, 239, 96, 171, 62, 134, 225, 172, 190, 118, 38, 48, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {66, 107, 66, 189, 161, 13, 3, 190, 125, 236, 133, 62, 252, 161, 47, 62, 92, 173, 206, 190, 4, 80, 226, 61, 72, 126, 198, 189, 18, 69, 103, 62, 119, 93, 239, 189, 43, 51, 34, 190, 61, 140, 170, 191, 198, 149, 144, 61, 45, 89, 11, 62, 135, 132, 179, 59, 2, 141, 20, 62, 182, 31, 196, 190, 114, 105, 214, 190, 44, 207, 37, 62, 234, 209, 68, 62, 22, 76, 61, 62, 46, 235, 140, 190, 153, 17, 212, 61, 165, 183, 21, 61, 119, 125, 103, 189, 208, 135, 221, 189, 81, 156, 10, 191, 185, 52, 111, 190, 226, 239, 126, 190, 6, 239, 174, 62, 164, 132, 85, 61, 29, 218, 12, 190, 31, 15, 152, 62, 185, 90, 209, 189, 30, 92, 184, 189, 230, 174, 183, 189, 175, 236, 85, 189, 173, 117, 204, 62, 107, 111, 234, 61, 57, 76, 23, 191, 97, 205, 6, 62, 138, 129, 207, 60, 255, 178, 60, 61, 200, 183, 239, 190, 82, 65, 38, 187, 80, 203, 57, 61, 244, 122, 186, 62, 200, 31, 157, 60, 134, 118, 11, 191, 248, 33, 221, 60, 180, 154, 33, 62, 115, 133, 135, 190, 203, 148, 94, 62, 64, 13, 68, 190, 151, 168, 73, 62, 86, 142, 12, 61, 50, 75, 182, 62, 162, 138, 186, 61, 146, 80, 203, 190, 144, 204, 229, 61, 183, 198, 40, 190, 181, 98, 140, 62, 247, 56, 175, 190, 70, 198, 131, 190, 242, 68, 24, 62, 161, 228, 32, 190, 167, 64, 7, 190, 86, 138, 23, 189, 203, 52, 156, 62, 125, 179, 199, 61, 59, 226, 193, 189, 47, 108, 212, 61, 150, 143, 20, 62, 124, 68, 10, 189, 92, 214, 219, 60, 172, 248, 14, 63, 94, 254, 237, 61, 81, 41, 149, 189, 231, 127, 145, 189, 60, 26, 46, 189, 254, 96, 21, 62, 161, 14, 190, 62, 34, 219, 14, 189, 59, 219, 41, 190, 165, 34, 65, 190, 55, 213, 160, 61, 181, 1, 105, 191, 195, 195, 209, 61, 143, 176, 238, 61, 89, 179, 137, 62, 76, 71, 134, 190, 200, 110, 195, 190, 249, 56, 185, 190, 229, 74, 96, 61, 127, 134, 143, 62, 28, 174, 215, 61, 49, 150, 208, 189, 66, 139, 14, 191, 226, 119, 100, 190, 7, 64, 108, 191, 199, 226, 137, 62, 100, 47, 153, 191, 91, 216, 237, 62, 84, 155, 255, 59, 27, 29, 225, 62, 167, 171, 124, 60, 237, 147, 61, 189, 152, 196, 68, 191, 52, 98, 92, 190, 61, 26, 251, 62, 2, 180, 159, 61, 165, 97, 150, 189, 105, 130, 85, 191, 229, 155, 85, 190, 247, 59, 12, 189, 16, 23, 102, 191, 17, 229, 61, 62, 15, 196, 253, 190, 138, 129, 82, 62, 249, 142, 132, 190, 188, 45, 11, 62, 100, 175, 247, 190, 122, 197, 12, 191, 14, 113, 211, 190, 20, 14, 207, 61, 238, 239, 146, 62, 51, 14, 158, 189, 105, 36, 255, 190, 213, 136, 171, 61, 196, 30, 93, 190, 20, 172, 135, 60, 69, 11, 68, 62, 201, 31, 37, 62, 85, 24, 202, 189, 201, 110, 121, 61, 116, 190, 82, 188, 232, 7, 144, 62, 197, 173, 150, 61, 101, 17, 43, 190, 82, 195, 9, 190, 136, 53, 7, 62, 115, 113, 7, 61, 187, 80, 65, 189, 88, 154, 254, 61, 89, 151, 136, 190, 188, 201, 141, 61, 69, 175, 200, 61, 74, 122, 30, 62, 159, 121, 30, 62, 179, 217, 139, 61, 115, 240, 22, 62, 179, 123, 220, 61, 10, 133, 236, 187, 189, 140, 12, 62, 41, 194, 111, 62, 82, 145, 105, 62, 179, 130, 108, 190, 81, 79, 36, 60, 61, 211, 111, 62, 192, 160, 40, 62, 175, 150, 65, 62, 71, 7, 32, 188, 93, 105, 61, 190, 91, 0, 228, 189, 37, 232, 51, 61, 240, 198, 0, 61, 235, 177, 185, 188, 78, 191, 28, 190, 46, 179, 252, 61, 85, 129, 193, 188, 45, 87, 41, 191, 150, 150, 217, 189, 200, 248, 122, 62, 227, 36, 24, 62, 223, 129, 137, 189, 25, 178, 48, 62, 171, 197, 95, 190, 168, 222, 118, 189, 232, 255, 40, 189, 39, 234, 44, 190, 83, 8, 97, 190, 172, 182, 37, 188, 42, 182, 111, 62, 56, 156, 9, 61, 184, 114, 34, 191, 129, 150, 99, 63, 238, 97, 136, 190, 243, 201, 255, 61, 94, 157, 138, 61, 95, 150, 209, 62, 119, 89, 211, 189, 227, 29, 121, 63, 25, 203, 193, 61, 237, 38, 185, 62, 239, 45, 128, 190, 162, 91, 5, 62, 99, 186, 151, 190, 3, 241, 100, 62, 228, 235, 44, 190, 130, 215, 73, 62, 115, 160, 6, 189, 69, 229, 247, 60, 96, 45, 85, 190, 127, 44, 4, 191, 115, 192, 230, 61, 104, 77, 6, 190, 252, 149, 128, 190, 200, 42, 157, 62, 196, 162, 6, 63, 225, 110, 189, 190, 191, 211, 198, 189, 19, 196, 137, 62, 126, 234, 176, 190, 181, 107, 16, 62, 64, 166, 189, 189, 5, 188, 107, 188, 130, 167, 90, 191, 6, 54, 140, 190, 167, 203, 90, 189, 219, 156, 161, 190, 26, 201, 21, 189, 142, 95, 153, 190, 216, 175, 125, 62, 54, 208, 175, 190, 129, 118, 59, 62, 56, 42, 46, 190, 135, 164, 22, 189, 237, 12, 238, 60, 136, 0, 18, 188, 173, 117, 34, 190, 74, 42, 48, 190, 100, 141, 240, 189, 197, 153, 11, 62, 25, 172, 43, 61, 208, 103, 73, 59, 14, 21, 223, 189, 61, 115, 231, 61, 251, 248, 81, 60, 196, 121, 138, 61, 118, 118, 31, 61, 43, 26, 158, 61, 151, 12, 192, 61, 56, 153, 157, 189, 164, 208, 15, 189, 235, 113, 216, 189, 244, 158, 128, 61, 127, 143, 88, 190, 19, 21, 6, 61, 159, 206, 161, 188, 59, 156, 71, 62, 23, 60, 31, 190, 236, 214, 125, 189, 100, 176, 196, 61, 253, 118, 106, 189, 159, 36, 65, 189, 3, 229, 22, 190, 161, 234, 58, 190, 181, 82, 201, 189, 84, 54, 51, 188, 66, 245, 247, 189, 218, 185, 127, 189, 241, 85, 69, 190, 250, 48, 134, 60, 221, 124, 158, 60, 134, 168, 8, 186, 191, 89, 31, 62, 158, 165, 252, 189, 193, 27, 179, 60, 229, 168, 4, 62, 198, 84, 217, 61, 135, 242, 42, 61, 71, 236, 46, 190, 25, 30, 66, 190, 101, 124, 240, 61, 90, 75, 122, 189, 183, 205, 178, 61, 155, 128, 193, 189, 197, 151, 38, 190, 129, 172, 29, 190, 159, 184, 9, 62, 41, 155, 57, 61, 132, 68, 127, 61, 9, 27, 6, 190, 155, 125, 195, 189, 23, 242, 41, 61, 197, 119, 154, 189, 61, 35, 72, 190, 133, 33, 82, 190, 167, 155, 117, 188, 6, 33, 50, 190, 0, 133, 232, 189, 197, 30, 93, 189, 129, 45, 201, 189, 226, 187, 246, 61, 251, 245, 3, 61, 164, 206, 48, 190, 212, 241, 108, 60, 209, 35, 47, 62, 131, 4, 32, 190, 129, 250, 40, 62, 151, 21, 43, 190, 20, 229, 206, 189, 126, 32, 3, 190, 145, 205, 241, 189, 2, 159, 3, 62, 159, 76, 200, 61, 81, 5, 195, 61, 49, 58, 184, 189, 21, 177, 153, 189, 202, 153, 28, 190, 205, 212, 1, 61, 75, 153, 147, 189, 136, 233, 1, 187, 188, 36, 169, 189, 52, 189, 5, 189, 68, 248, 88, 189, 74, 218, 29, 189, 113, 177, 48, 187, 224, 8, 113, 189, 9, 61, 17, 190, 151, 78, 29, 190, 145, 242, 11, 188, 58, 126, 92, 189, 103, 48, 166, 61, 8, 141, 180, 61, 75, 139, 6, 62, 243, 173, 80, 188, 138, 158, 149, 62, 239, 158, 164, 188, 147, 40, 150, 189, 146, 35, 187, 190, 46, 167, 202, 62, 16, 206, 135, 62, 83, 93, 172, 190, 38, 29, 142, 190, 187, 42, 13, 191, 254, 207, 176, 62, 213, 78, 215, 189, 173, 96, 12, 62, 185, 178, 161, 190, 197, 253, 164, 190, 236, 72, 228, 61, 233, 49, 52, 191, 217, 33, 215, 188, 9, 179, 92, 190, 6, 201, 156, 62, 220, 252, 87, 190, 62, 111, 117, 190, 230, 233, 192, 189, 183, 21, 202, 190, 161, 104, 137, 62, 77, 163, 183, 62, 199, 156, 244, 189, 112, 192, 10, 190, 135, 47, 38, 62, 52, 54, 105, 190, 89, 148, 219, 188, 157, 49, 197, 188, 53, 65, 172, 62, 76, 171, 41, 191, 165, 151, 26, 188, 153, 129, 129, 61, 223, 59, 167, 188, 206, 43, 135, 62, 21, 186, 23, 191, 123, 208, 76, 62, 199, 19, 11, 62, 198, 15, 145, 190, 125, 65, 53, 190, 253, 251, 78, 62, 73, 96, 229, 189, 171, 46, 254, 189, 156, 219, 217, 189, 155, 25, 122, 62, 180, 190, 41, 62, 17, 175, 208, 60, 215, 124, 25, 61, 221, 54, 80, 190, 177, 220, 254, 60, 107, 85, 211, 60, 98, 253, 131, 62, 136, 135, 206, 61, 24, 167, 27, 191, 5, 94, 191, 189, 52, 205, 138, 189, 223, 53, 234, 190, 100, 246, 6, 189, 138, 0, 144, 190, 204, 161, 42, 62, 200, 126, 155, 188, 92, 201, 53, 190, 97, 171, 95, 189, 139, 206, 130, 189, 128, 60, 5, 62, 58, 209, 247, 189, 114, 129, 40, 63, 111, 221, 180, 60, 12, 236, 93, 190, 6, 89, 184, 60, 138, 185, 117, 190, 155, 161, 37, 191, 89, 241, 245, 62, 65, 116, 167, 188, 40, 220, 26, 190, 155, 246, 87, 62, 24, 162, 84, 61, 20, 219, 155, 62, 126, 122, 122, 190, 192, 236, 167, 62, 190, 75, 181, 62, 125, 243, 163, 189, 110, 130, 248, 61, 201, 190, 28, 186, 51, 127, 156, 62, 121, 21, 59, 190, 60, 49, 147, 62, 108, 201, 136, 62, 146, 1, 235, 190, 83, 154, 14, 61, 131, 181, 42, 189, 239, 199, 68, 61, 237, 11, 245, 60, 36, 91, 63, 190, 81, 239, 141, 190, 5, 217, 189, 61, 218, 255, 27, 190, 18, 63, 196, 190, 0, 251, 135, 62, 99, 198, 118, 61, 127, 140, 54, 190, 118, 96, 95, 62, 65, 165, 129, 190, 191, 138, 9, 191, 212, 140, 208, 62, 230, 42, 27, 190, 229, 35, 154, 190, 195, 139, 145, 62, 73, 210, 253, 188, 78, 148, 168, 61, 167, 251, 81, 190, 112, 167, 101, 62, 231, 1, 124, 62, 206, 152, 185, 60, 247, 228, 147, 62, 28, 57, 1, 188, 41, 216, 206, 62, 141, 34, 139, 190, 37, 87, 192, 62, 32, 15, 42, 62, 86, 150, 244, 189, 156, 225, 190, 189, 0, 196, 244, 61, 67, 93, 18, 62, 246, 226, 215, 189, 182, 191, 215, 188, 253, 239, 46, 60, 148, 155, 26, 190, 8, 147, 12, 190, 15, 195, 251, 60, 209, 163, 145, 188, 203, 2, 66, 189, 81, 116, 251, 61, 202, 192, 245, 189, 176, 225, 234, 189, 4, 132, 234, 59, 101, 225, 157, 61, 229, 102, 246, 189, 85, 122, 11, 190, 203, 152, 122, 187, 6, 191, 163, 61, 50, 17, 136, 189, 246, 142, 244, 189, 168, 159, 18, 62, 115, 56, 186, 189, 46, 218, 44, 190, 30, 224, 1, 190, 239, 86, 171, 189, 80, 167, 195, 188, 224, 196, 1, 190, 198, 205, 214, 189, 3, 124, 168, 60, 198, 91, 8, 191, 234, 248, 82, 61, 113, 93, 86, 190, 155, 199, 243, 61, 62, 121, 129, 62, 84, 78, 4, 62, 18, 72, 7, 191, 2, 13, 43, 62, 114, 15, 27, 190, 172, 173, 248, 190, 193, 8, 0, 63, 9, 210, 146, 62, 205, 77, 198, 61, 252, 239, 179, 61, 200, 98, 114, 190, 143, 62, 9, 191, 56, 253, 231, 62, 19, 236, 33, 189, 226, 128, 147, 190, 59, 28, 116, 62, 165, 78, 62, 61, 124, 122, 141, 62, 153, 42, 148, 61, 71, 46, 44, 62, 207, 68, 117, 62, 201, 187, 163, 60, 113, 169, 233, 61, 210, 218, 193, 61, 107, 45, 110, 62, 52, 7, 206, 190, 239, 181, 28, 63, 238, 165, 214, 62, 17, 33, 217, 62, 70, 21, 156, 61, 8, 238, 8, 63, 78, 201, 166, 190, 9, 174, 144, 190, 244, 236, 251, 62, 132, 75, 75, 62, 37, 204, 37, 189, 204, 244, 77, 61, 116, 232, 223, 61, 210, 229, 14, 191, 12, 216, 141, 189, 80, 133, 239, 62, 5, 43, 61, 190, 143, 51, 94, 62, 5, 248, 228, 62, 37, 95, 170, 190, 85, 31, 253, 61, 57, 60, 14, 63, 78, 93, 42, 190, 134, 117, 75, 61, 23, 5, 112, 60, 153, 64, 151, 62, 169, 11, 222, 190, 49, 135, 201, 190, 74, 195, 111, 62, 165, 39, 172, 190, 224, 236, 184, 190, 31, 11, 5, 191, 125, 131, 111, 62, 158, 163, 217, 190, 66, 87, 205, 189, 208, 184, 232, 189, 86, 194, 88, 61, 234, 65, 243, 189, 224, 222, 15, 190, 155, 192, 184, 60, 50, 192, 16, 61, 5, 41, 146, 188, 51, 247, 93, 189, 247, 33, 2, 189, 152, 11, 213, 189, 145, 213, 51, 189, 195, 135, 47, 189, 253, 18, 119, 189, 71, 17, 51, 190, 248, 220, 32, 61, 89, 130, 156, 188, 23, 46, 150, 189, 78, 151, 230, 60, 135, 136, 13, 61, 59, 237, 13, 190, 189, 253, 221, 61, 240, 237, 164, 189, 25, 242, 200, 189, 250, 156, 197, 189, 202, 166, 231, 60, 74, 249, 181, 61, 167, 43, 11, 189, 30, 168, 134, 189, 248, 35, 17, 62, 14, 239, 32, 189, 138, 74, 169, 61, 11, 101, 45, 190, 224, 76, 154, 189, 113, 163, 192, 61, 224, 35, 60, 61, 206, 35, 212, 189, 51, 63, 138, 190, 193, 109, 232, 61, 244, 68, 76, 62, 146, 39, 186, 61, 52, 54, 164, 61, 135, 123, 61, 190, 127, 111, 31, 190, 239, 77, 95, 61, 20, 59, 190, 61, 58, 118, 199, 61, 233, 11, 68, 60, 100, 201, 151, 61, 186, 125, 23, 61, 180, 33, 46, 189, 189, 110, 159, 60, 56, 75, 129, 61, 111, 96, 26, 62, 126, 178, 213, 188, 144, 86, 190, 189, 226, 24, 197, 190, 44, 181, 204, 189, 160, 121, 160, 62, 200, 95, 208, 61, 7, 205, 84, 190, 188, 24, 37, 189, 0, 62, 136, 62, 187, 197, 183, 190, 253, 108, 23, 62, 116, 188, 12, 191, 163, 200, 200, 190, 53, 183, 93, 190, 10, 66, 227, 62, 64, 55, 96, 191, 107, 169, 206, 62, 234, 28, 5, 190, 145, 235, 134, 62, 218, 95, 161, 188, 86, 52, 105, 191, 5, 211, 176, 191, 126, 172, 154, 190, 113, 124, 198, 62, 135, 82, 236, 190, 148, 31, 132, 62, 248, 160, 0, 191, 71, 205, 129, 190, 197, 145, 21, 190, 248, 206, 113, 191, 201, 176, 21, 191, 246, 79, 11, 191, 149, 123, 105, 62, 73, 178, 125, 189, 20, 35, 105, 189, 10, 4, 40, 189, 77, 58, 254, 190, 58, 109, 42, 191, 142, 160, 241, 60, 134, 47, 60, 62, 182, 74, 161, 190, 41, 211, 137, 61, 67, 241, 43, 62, 232, 232, 215, 62, 234, 102, 178, 189, 143, 167, 89, 62, 181, 188, 176, 190, 206, 19, 202, 188, 121, 5, 178, 190, 135, 231, 62, 62, 69, 68, 240, 60, 87, 54, 35, 62, 67, 251, 6, 191, 62, 143, 56, 191, 240, 25, 111, 190, 253, 40, 168, 190, 158, 45, 9, 191, 94, 219, 155, 62, 26, 159, 180, 62, 137, 110, 213, 190, 2, 4, 200, 60, 89, 153, 217, 62, 73, 23, 97, 190, 210, 106, 16, 62, 81, 210, 138, 189, 7, 116, 172, 61, 8, 25, 54, 191, 18, 56, 68, 190, 232, 100, 36, 62, 77, 27, 4, 190, 19, 0, 168, 190, 17, 89, 178, 190, 65, 228, 216, 62, 118, 141, 28, 190, 81, 246, 36, 62, 83, 211, 92, 189, 233, 248, 132, 190, 57, 34, 6, 63, 251, 229, 203, 189, 142, 251, 21, 62, 85, 250, 107, 62, 115, 138, 42, 62, 40, 210, 192, 190, 168, 173, 172, 61, 219, 212, 15, 190, 57, 169, 130, 191, 174, 93, 228, 189, 146, 7, 72, 62, 213, 107, 215, 190, 222, 29, 199, 189, 3, 145, 211, 62, 121, 192, 253, 190, 163, 103, 29, 190, 174, 132, 130, 61, 132, 200, 8, 190, 188, 89, 101, 190, 26, 54, 45, 188, 114, 60, 123, 62, 57, 112, 120, 191, 225, 101, 47, 190, 254, 163, 245, 62, 130, 127, 129, 191, 168, 206, 4, 63, 92, 223, 137, 191, 19, 79, 136, 62, 133, 214, 185, 190, 147, 214, 41, 61, 204, 23, 211, 60, 60, 189, 2, 189, 135, 175, 29, 62, 235, 208, 166, 61, 77, 242, 138, 187, 17, 92, 3, 62, 118, 119, 26, 61, 36, 150, 206, 188, 84, 183, 10, 190, 143, 247, 188, 61, 111, 98, 225, 61, 24, 55, 52, 190, 114, 155, 215, 189, 5, 125, 162, 189, 233, 126, 152, 61, 28, 203, 237, 189, 132, 176, 28, 62, 173, 132, 56, 60, 197, 58, 6, 62, 50, 89, 182, 61, 250, 80, 254, 189, 254, 208, 9, 189, 205, 254, 220, 188, 87, 158, 11, 190, 21, 186, 7, 62, 172, 50, 44, 189, 165, 86, 51, 190, 4, 187, 43, 190, 93, 164, 218, 189, 64, 194, 198, 188, 118, 50, 243, 61, 76, 183, 27, 189, 108, 186, 162, 61, 64, 213, 132, 61, 58, 83, 194, 61, 146, 70, 17, 190, 249, 24, 109, 189, 207, 156, 211, 61, 168, 144, 64, 189, 139, 101, 56, 61, 154, 223, 206, 60, 223, 201, 40, 62, 17, 158, 211, 189, 123, 119, 214, 59, 112, 231, 63, 61, 64, 89, 145, 61, 243, 122, 162, 189, 115, 42, 27, 190, 38, 197, 214, 189, 241, 190, 103, 189, 93, 210, 17, 62, 175, 200, 47, 190, 145, 187, 36, 190, 54, 132, 24, 190, 43, 107, 220, 189, 90, 51, 196, 189, 96, 139, 62, 189, 3, 144, 24, 190, 253, 195, 32, 190, 194, 224, 184, 189, 228, 22, 228, 189, 131, 97, 233, 189, 205, 230, 83, 189, 27, 196, 208, 189, 116, 204, 83, 191, 65, 132, 250, 59, 60, 61, 68, 62, 132, 101, 134, 62, 146, 167, 16, 191, 254, 237, 88, 62, 17, 200, 122, 62, 48, 237, 13, 62, 223, 234, 12, 190, 205, 212, 155, 61, 238, 23, 134, 191, 87, 243, 80, 189, 38, 155, 210, 61, 188, 12, 182, 60, 214, 7, 67, 191, 119, 253, 160, 62, 12, 235, 144, 191, 94, 28, 182, 61, 246, 186, 131, 62, 203, 51, 43, 189, 237, 53, 131, 62, 211, 60, 18, 189, 10, 113, 68, 62, 234, 179, 91, 190, 114, 79, 166, 190, 214, 119, 189, 62, 227, 27, 205, 191, 250, 80, 197, 190, 6, 99, 29, 191, 156, 22, 146, 62, 81, 139, 72, 190, 8, 185, 138, 62, 86, 99, 72, 191, 189, 73, 194, 60, 200, 46, 137, 62, 208, 91, 53, 63, 33, 106, 243, 190, 120, 231, 175, 62, 70, 65, 124, 62, 227, 111, 76, 62, 172, 150, 107, 189, 163, 125, 38, 191, 31, 21, 149, 191, 118, 123, 224, 189, 19, 129, 46, 59, 204, 214, 167, 190, 215, 231, 135, 189, 71, 77, 232, 62, 38, 252, 62, 191, 73, 244, 138, 189, 95, 30, 172, 62, 124, 149, 78, 190, 247, 161, 82, 62, 98, 6, 18, 63, 41, 33, 180, 61, 144, 20, 50, 191, 221, 21, 187, 189, 10, 104, 238, 62, 108, 60, 131, 191, 203, 35, 195, 60, 71, 73, 250, 190, 34, 237, 154, 62, 163, 189, 47, 189, 68, 248, 150, 61, 77, 102, 108, 62, 82, 107, 129, 190, 123, 238, 82, 190, 130, 18, 37, 61, 11, 150, 148, 190, 199, 132, 244, 61, 118, 22, 130, 190, 3, 214, 129, 61, 85, 43, 187, 61, 10, 197, 4, 60, 119, 76, 205, 61, 92, 237, 215, 190, 217, 187, 16, 62, 149, 52, 235, 61, 253, 24, 155, 62, 173, 162, 209, 189, 173, 199, 54, 62, 108, 10, 32, 190, 87, 247, 164, 62, 195, 144, 232, 61, 135, 110, 196, 60, 102, 195, 180, 189, 251, 139, 168, 190, 42, 216, 4, 62, 216, 173, 80, 190, 72, 38, 107, 189, 106, 65, 27, 187, 231, 223, 40, 190, 101, 139, 29, 61, 87, 170, 45, 191, 31, 223, 5, 61, 218, 161, 52, 188, 164, 241, 126, 190, 233, 199, 136, 189, 29, 54, 134, 190, 162, 33, 104, 62, 21, 139, 140, 190, 71, 29, 135, 59, 205, 60, 59, 189, 42, 90, 111, 187, 137, 188, 32, 190, 65, 244, 203, 62, 238, 218, 216, 188, 156, 107, 17, 190, 166, 38, 57, 62, 22, 198, 204, 61, 40, 79, 19, 62, 117, 133, 212, 189, 132, 43, 39, 190, 110, 209, 229, 189, 7, 220, 217, 190, 112, 147, 137, 62, 132, 102, 122, 190, 107, 249, 185, 187, 158, 226, 244, 189, 44, 87, 213, 60, 28, 185, 180, 61, 253, 89, 23, 191, 177, 20, 113, 190, 228, 128, 172, 189, 5, 84, 100, 62, 74, 199, 254, 60, 83, 69, 151, 188, 111, 229, 16, 187, 85, 214, 152, 190, 99, 197, 48, 189, 108, 165, 164, 190, 111, 228, 172, 62, 37, 23, 172, 189, 188, 22, 46, 186, 157, 8, 182, 190, 180, 40, 163, 62, 149, 128, 191, 59, 153, 32, 166, 190, 152, 105, 64, 190, 180, 213, 65, 62, 239, 77, 1, 61, 9, 83, 153, 61, 167, 187, 196, 190, 4, 42, 41, 191, 29, 247, 32, 61, 115, 235, 172, 61, 155, 236, 154, 190, 241, 199, 61, 62, 71, 240, 173, 189, 56, 222, 209, 62, 42, 177, 62, 189, 65, 126, 108, 62, 43, 176, 180, 62, 103, 15, 15, 191, 255, 219, 106, 188, 27, 49, 136, 62, 249, 215, 250, 62, 121, 117, 23, 189, 252, 8, 103, 62, 236, 121, 147, 62, 59, 30, 7, 190, 251, 70, 5, 189, 113, 193, 147, 190, 232, 212, 13, 189, 244, 67, 237, 189, 132, 138, 184, 190, 27, 152, 225, 61, 203, 5, 218, 62, 71, 215, 241, 189, 68, 181, 148, 190, 152, 197, 108, 191, 52, 173, 89, 62, 250, 242, 155, 190, 149, 33, 17, 62, 98, 33, 171, 61, 153, 194, 43, 191, 96, 60, 75, 190, 160, 188, 8, 62, 184, 173, 150, 190, 139, 106, 172, 62, 137, 195, 249, 190, 28, 89, 79, 60, 40, 247, 128, 61, 220, 89, 141, 62, 79, 146, 148, 62, 201, 105, 143, 191, 36, 41, 92, 189, 76, 3, 154, 191, 187, 213, 112, 62, 128, 88, 31, 190, 41, 126, 70, 188, 118, 53, 83, 62, 139, 28, 182, 61, 211, 216, 95, 61, 43, 36, 214, 62, 251, 138, 151, 61, 59, 72, 64, 190, 181, 62, 252, 62, 129, 112, 207, 61, 228, 7, 216, 189, 221, 82, 254, 188, 155, 115, 208, 189, 122, 74, 150, 191, 90, 138, 63, 190, 214, 192, 75, 62, 52, 131, 40, 190, 118, 154, 155, 62, 12, 125, 34, 63, 179, 207, 233, 190, 118, 121, 198, 188, 200, 210, 237, 62, 247, 130, 126, 190, 51, 188, 199, 189, 69, 107, 5, 62, 173, 127, 178, 62, 131, 86, 111, 191, 214, 5, 228, 190, 136, 48, 4, 63, 19, 201, 79, 191, 15, 254, 146, 62, 253, 2, 66, 191, 77, 81, 112, 62, 60, 9, 141, 190, 211, 148, 207, 61, 221, 192, 247, 61, 175, 17, 19, 190, 35, 33, 22, 59, 208, 55, 98, 63, 240, 175, 179, 57, 103, 242, 179, 62, 52, 16, 26, 62, 160, 227, 66, 188, 74, 55, 236, 189, 40, 187, 186, 189, 242, 31, 231, 190, 70, 46, 218, 189, 187, 164, 33, 63, 161, 112, 176, 190, 47, 151, 5, 190, 43, 234, 117, 62, 164, 7, 189, 190, 182, 112, 239, 189, 82, 226, 145, 62, 242, 238, 10, 191, 96, 141, 66, 191, 16, 14, 115, 191, 164, 5, 60, 62, 154, 215, 61, 191, 50, 209, 140, 190, 104, 42, 207, 190, 114, 163, 68, 191, 107, 242, 253, 61, 13, 192, 15, 191, 78, 157, 99, 61, 65, 249, 232, 190, 168, 141, 4, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 246, 187, 61, 31, 169, 197, 61, 66, 246, 152, 189, 118, 27, 151, 62, 239, 141, 169, 62, 239, 16, 192, 189, 133, 148, 47, 62, 200, 135, 55, 190, 98, 5, 29, 190, 206, 31, 173, 189, 235, 57, 254, 61, 96, 143, 194, 189, 143, 143, 96, 61, 97, 218, 139, 62, 161, 60, 193, 189, 245, 226, 39, 62, 233, 29, 158, 189, 225, 8, 234, 189, 169, 119, 129, 62, 182, 88, 48, 61, 74, 37, 2, 61, 30, 214, 143, 62, 23, 175, 79, 190, 31, 77, 18, 190, 59, 98, 108, 62, 60, 161, 244, 61, 208, 158, 50, 190, 121, 98, 35, 62, 239, 42, 188, 61, 69, 35, 14, 190, 84, 190, 133, 62, 120, 174, 152, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {125, 72, 40, 190, 88, 248, 222, 190, 182, 10, 142, 190, 212, 246, 143, 63, 157, 0, 47, 189, 47, 104, 227, 62, 113, 106, 70, 63, 2, 141, 248, 61, 225, 244, 3, 62, 137, 38, 104, 189, 188, 29, 3, 191, 116, 121, 120, 190, 32, 156, 47, 191, 165, 247, 249, 190, 167, 125, 13, 190, 191, 69, 101, 191, 136, 94, 98, 63, 182, 56, 38, 190, 199, 253, 0, 61, 81, 217, 183, 63, 92, 79, 97, 63, 135, 173, 177, 63, 219, 245, 8, 62, 105, 162, 3, 60, 197, 54, 177, 62, 139, 176, 149, 63, 22, 197, 141, 190, 166, 137, 148, 62, 188, 238, 60, 191, 213, 95, 132, 191, 228, 121, 159, 63, 66, 157, 170, 191, 64, 117, 251, 190, 8, 234, 215, 60, 120, 215, 12, 62, 182, 241, 168, 189, 140, 206, 193, 190, 207, 127, 187, 188, 114, 85, 254, 188, 92, 70, 151, 61, 140, 65, 206, 61, 186, 12, 43, 62, 236, 30, 63, 190, 200, 143, 133, 189, 197, 57, 238, 62, 167, 43, 15, 62, 161, 211, 35, 61, 64, 114, 133, 61, 62, 132, 158, 62, 121, 93, 155, 60, 182, 57, 149, 190, 200, 26, 211, 59, 179, 6, 71, 190, 254, 158, 108, 189, 63, 66, 226, 187, 171, 69, 33, 61, 27, 1, 150, 190, 222, 27, 252, 189, 40, 165, 117, 189, 251, 13, 18, 188, 86, 69, 217, 61, 97, 47, 154, 62, 139, 231, 156, 62, 105, 102, 193, 185};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 3, 48, 190, 14, 162, 215, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {37, 87, 142, 189, 44, 237, 31, 63, 210, 60, 85, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {158, 97, 243, 62, 240, 65, 149, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0034/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}