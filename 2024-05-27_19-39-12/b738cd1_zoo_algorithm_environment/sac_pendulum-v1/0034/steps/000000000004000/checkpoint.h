// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {114, 97, 90, 62, 134, 111, 169, 190, 134, 174, 50, 191, 156, 147, 15, 62, 185, 188, 9, 190, 93, 126, 131, 62, 140, 239, 40, 63, 41, 94, 253, 190, 20, 117, 104, 190, 131, 223, 180, 190, 127, 110, 35, 63, 123, 237, 159, 189, 5, 87, 200, 190, 172, 227, 235, 190, 140, 178, 96, 61, 145, 32, 236, 190, 153, 184, 249, 62, 32, 106, 0, 190, 115, 135, 36, 190, 8, 20, 58, 191, 26, 32, 47, 63, 146, 242, 42, 62, 7, 179, 29, 63, 132, 40, 51, 189, 122, 98, 53, 62, 246, 208, 147, 62, 177, 198, 179, 59, 247, 228, 110, 189, 150, 146, 240, 62, 108, 177, 196, 62, 151, 85, 194, 189, 103, 82, 16, 191, 86, 64, 59, 190, 255, 59, 142, 62, 23, 165, 226, 190, 226, 116, 255, 62, 15, 190, 224, 189, 171, 134, 34, 63, 76, 57, 161, 187, 112, 220, 159, 62, 220, 26, 192, 62, 207, 78, 238, 62, 132, 129, 16, 190, 184, 126, 189, 62, 179, 160, 29, 191, 246, 16, 39, 63, 196, 141, 112, 191, 98, 127, 202, 190, 28, 70, 179, 190, 144, 31, 23, 191, 23, 117, 207, 190, 74, 62, 225, 61, 112, 49, 148, 60, 248, 12, 47, 189, 144, 213, 31, 63, 147, 68, 164, 190, 60, 237, 248, 190, 222, 111, 55, 63, 186, 38, 21, 63, 145, 124, 246, 62, 243, 52, 170, 61, 119, 246, 202, 190, 18, 16, 13, 191, 130, 239, 208, 190, 212, 194, 5, 63, 126, 237, 221, 190, 3, 120, 227, 190, 25, 3, 181, 190, 214, 157, 158, 62, 213, 97, 187, 62, 191, 61, 73, 63, 85, 38, 26, 62, 148, 60, 53, 189, 82, 141, 212, 190, 175, 172, 26, 60, 29, 168, 215, 59, 98, 81, 43, 191, 135, 71, 41, 190, 227, 223, 20, 191, 150, 157, 84, 190, 228, 160, 80, 191, 147, 9, 14, 191, 3, 130, 102, 190, 174, 46, 196, 189, 195, 25, 73, 190, 4, 191, 37, 63, 224, 176, 6, 191, 48, 104, 173, 189, 99, 245, 102, 191, 70, 185, 240, 62, 24, 28, 128, 190, 198, 44, 19, 191, 217, 200, 94, 62, 173, 61, 16, 63, 215, 190, 173, 61, 121, 230, 0, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 97, 36, 191, 56, 15, 20, 61, 13, 23, 193, 61, 173, 169, 10, 190, 238, 87, 175, 189, 52, 96, 241, 61, 127, 76, 131, 62, 1, 153, 176, 62, 179, 107, 193, 190, 194, 220, 223, 190, 101, 109, 17, 61, 73, 50, 24, 62, 190, 133, 98, 62, 218, 201, 25, 190, 9, 215, 226, 190, 4, 170, 133, 189, 91, 118, 52, 62, 226, 102, 199, 190, 181, 233, 1, 61, 4, 128, 128, 62, 151, 49, 252, 62, 74, 140, 67, 189, 84, 126, 18, 63, 216, 164, 133, 190, 163, 6, 145, 189, 39, 140, 218, 62, 186, 101, 143, 190, 9, 255, 197, 62, 63, 173, 238, 189, 212, 189, 154, 62, 133, 38, 46, 190, 156, 115, 69, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 61, 169, 186, 174, 73, 25, 190, 11, 194, 94, 62, 145, 65, 14, 189, 96, 31, 183, 189, 107, 220, 12, 189, 124, 70, 80, 188, 142, 170, 224, 61, 119, 93, 239, 189, 247, 120, 6, 61, 158, 83, 73, 190, 61, 95, 22, 61, 8, 101, 11, 61, 243, 177, 206, 186, 189, 122, 14, 61, 97, 123, 226, 188, 117, 143, 236, 189, 44, 207, 37, 62, 81, 27, 130, 62, 51, 162, 32, 62, 53, 244, 17, 190, 201, 31, 137, 188, 94, 21, 54, 61, 87, 136, 110, 188, 133, 218, 154, 189, 114, 44, 157, 190, 162, 54, 54, 190, 170, 156, 98, 190, 122, 127, 101, 62, 33, 195, 22, 188, 186, 46, 89, 190, 37, 146, 71, 62, 56, 247, 54, 190, 77, 65, 219, 188, 71, 142, 227, 60, 89, 156, 163, 189, 252, 202, 145, 62, 224, 2, 75, 62, 241, 12, 187, 190, 128, 13, 146, 60, 138, 129, 207, 60, 235, 175, 180, 62, 198, 42, 166, 189, 129, 88, 184, 61, 232, 213, 175, 60, 205, 25, 142, 62, 250, 239, 213, 189, 152, 196, 58, 190, 98, 113, 41, 61, 180, 154, 33, 62, 169, 221, 119, 190, 46, 191, 45, 62, 92, 80, 78, 59, 101, 101, 3, 62, 94, 53, 255, 61, 84, 220, 140, 62, 75, 199, 144, 189, 102, 71, 12, 62, 66, 200, 4, 62, 224, 193, 231, 189, 133, 111, 5, 62, 81, 76, 154, 190, 43, 148, 11, 190, 145, 102, 242, 61, 208, 15, 221, 189, 216, 207, 5, 189, 83, 161, 24, 189, 46, 94, 166, 60, 22, 34, 168, 61, 204, 147, 147, 190, 143, 26, 6, 62, 200, 41, 11, 62, 124, 68, 10, 189, 35, 142, 34, 62, 175, 221, 205, 61, 154, 29, 29, 62, 239, 26, 4, 189, 22, 123, 133, 61, 63, 66, 45, 188, 64, 69, 60, 62, 152, 148, 95, 62, 34, 219, 14, 189, 246, 87, 152, 61, 53, 100, 132, 187, 191, 171, 180, 189, 172, 166, 55, 191, 217, 10, 39, 62, 173, 191, 39, 62, 50, 130, 84, 62, 5, 190, 105, 189, 208, 101, 88, 190, 229, 217, 28, 190, 116, 38, 53, 189, 31, 2, 145, 62, 214, 182, 235, 61, 36, 88, 91, 189, 94, 24, 79, 188, 94, 241, 55, 190, 110, 178, 33, 191, 94, 165, 35, 62, 118, 207, 94, 190, 118, 176, 160, 62, 93, 45, 131, 61, 222, 184, 106, 62, 167, 171, 124, 60, 252, 185, 232, 59, 64, 49, 167, 190, 4, 88, 104, 190, 166, 150, 172, 62, 174, 31, 31, 61, 39, 130, 191, 189, 127, 17, 208, 190, 62, 20, 172, 61, 247, 59, 12, 189, 198, 165, 104, 190, 137, 14, 0, 61, 235, 215, 106, 190, 93, 252, 3, 62, 45, 83, 0, 190, 72, 68, 177, 189, 254, 206, 149, 190, 147, 28, 10, 190, 0, 156, 12, 190, 2, 103, 15, 62, 15, 102, 76, 62, 70, 193, 114, 61, 84, 195, 213, 190, 210, 166, 146, 189, 148, 42, 123, 190, 22, 164, 71, 189, 47, 58, 0, 62, 61, 136, 38, 62, 139, 8, 174, 189, 185, 5, 75, 61, 92, 118, 193, 188, 186, 122, 112, 62, 197, 173, 150, 61, 84, 26, 27, 189, 50, 231, 12, 190, 123, 24, 50, 61, 194, 189, 5, 61, 245, 38, 175, 189, 235, 129, 218, 61, 8, 101, 68, 190, 253, 40, 152, 60, 69, 175, 200, 61, 64, 86, 37, 62, 88, 128, 19, 62, 138, 2, 143, 60, 214, 147, 6, 62, 25, 217, 84, 61, 230, 231, 36, 61, 125, 86, 12, 190, 209, 223, 218, 61, 144, 126, 17, 62, 189, 182, 208, 189, 23, 236, 206, 187, 85, 195, 223, 61, 8, 213, 29, 189, 169, 103, 26, 62, 4, 68, 204, 188, 236, 62, 59, 188, 163, 21, 108, 189, 242, 189, 61, 62, 221, 173, 10, 190, 39, 133, 124, 62, 234, 91, 206, 190, 238, 184, 78, 61, 85, 129, 193, 188, 175, 106, 214, 189, 245, 207, 112, 62, 225, 201, 17, 62, 164, 166, 155, 62, 144, 180, 213, 189, 122, 26, 14, 62, 119, 251, 209, 189, 232, 148, 38, 62, 232, 255, 40, 189, 251, 46, 23, 190, 211, 0, 85, 60, 184, 69, 170, 61, 234, 7, 88, 62, 122, 220, 166, 190, 224, 189, 198, 189, 173, 132, 194, 62, 190, 199, 3, 190, 243, 203, 250, 61, 190, 231, 222, 60, 188, 51, 166, 62, 46, 133, 29, 191, 254, 99, 132, 61, 53, 153, 178, 60, 220, 127, 42, 62, 208, 38, 92, 190, 32, 201, 15, 188, 155, 202, 35, 190, 185, 172, 250, 61, 117, 224, 4, 62, 138, 254, 84, 62, 101, 45, 147, 188, 69, 229, 247, 60, 145, 229, 36, 189, 240, 83, 168, 59, 165, 2, 32, 62, 130, 47, 198, 61, 151, 59, 210, 189, 38, 95, 33, 62, 90, 49, 161, 62, 241, 245, 203, 189, 191, 211, 198, 189, 174, 246, 188, 61, 129, 83, 33, 190, 224, 23, 192, 61, 30, 0, 122, 190, 112, 214, 43, 189, 151, 154, 208, 190, 239, 253, 143, 190, 129, 92, 21, 190, 48, 199, 150, 190, 124, 248, 20, 60, 107, 80, 229, 190, 241, 55, 148, 62, 145, 215, 188, 190, 84, 203, 75, 62, 56, 42, 46, 190, 160, 249, 174, 188, 237, 12, 238, 60, 136, 0, 18, 188, 8, 212, 28, 190, 19, 123, 46, 190, 217, 104, 188, 189, 197, 153, 11, 62, 25, 172, 43, 61, 189, 131, 139, 60, 14, 21, 223, 189, 210, 49, 9, 62, 116, 6, 101, 60, 78, 120, 181, 61, 118, 118, 31, 61, 43, 26, 158, 61, 151, 12, 192, 61, 56, 153, 157, 189, 164, 208, 15, 189, 252, 116, 201, 189, 244, 158, 128, 61, 127, 143, 88, 190, 44, 14, 92, 61, 187, 250, 127, 188, 213, 132, 83, 62, 23, 60, 31, 190, 236, 214, 125, 189, 124, 247, 200, 61, 253, 118, 106, 189, 109, 82, 147, 188, 46, 172, 6, 190, 185, 109, 58, 190, 181, 82, 201, 189, 241, 99, 33, 188, 66, 245, 247, 189, 162, 215, 91, 189, 112, 2, 69, 190, 209, 86, 207, 60, 186, 88, 182, 60, 238, 130, 79, 59, 191, 89, 31, 62, 118, 86, 249, 189, 193, 27, 179, 60, 237, 91, 5, 62, 237, 54, 226, 61, 83, 83, 48, 61, 71, 236, 46, 190, 25, 30, 66, 190, 101, 124, 240, 61, 90, 75, 122, 189, 183, 205, 178, 61, 227, 28, 191, 189, 197, 151, 38, 190, 155, 138, 28, 190, 152, 63, 14, 62, 77, 91, 58, 61, 132, 68, 127, 61, 9, 27, 6, 190, 155, 125, 195, 189, 92, 111, 131, 61, 108, 166, 154, 189, 214, 53, 68, 190, 56, 30, 82, 190, 243, 36, 61, 188, 6, 33, 50, 190, 0, 133, 232, 189, 197, 30, 93, 189, 129, 45, 201, 189, 226, 187, 246, 61, 251, 245, 3, 61, 164, 206, 48, 190, 212, 241, 108, 60, 209, 35, 47, 62, 131, 4, 32, 190, 129, 250, 40, 62, 151, 21, 43, 190, 20, 229, 206, 189, 126, 32, 3, 190, 145, 205, 241, 189, 2, 159, 3, 62, 159, 76, 200, 61, 81, 5, 195, 61, 49, 58, 184, 189, 21, 177, 153, 189, 202, 153, 28, 190, 205, 212, 1, 61, 75, 153, 147, 189, 136, 233, 1, 187, 188, 36, 169, 189, 52, 189, 5, 189, 68, 248, 88, 189, 74, 218, 29, 189, 113, 177, 48, 187, 224, 8, 113, 189, 9, 61, 17, 190, 151, 78, 29, 190, 210, 93, 34, 61, 226, 47, 162, 189, 254, 62, 196, 61, 216, 96, 80, 190, 136, 16, 40, 62, 253, 150, 77, 190, 217, 144, 90, 62, 148, 244, 137, 190, 147, 40, 150, 189, 16, 250, 177, 190, 108, 242, 203, 60, 232, 216, 42, 62, 24, 22, 57, 190, 179, 44, 140, 190, 5, 102, 78, 190, 120, 150, 206, 62, 141, 124, 43, 190, 173, 96, 12, 62, 44, 4, 26, 189, 198, 153, 109, 190, 41, 104, 252, 189, 199, 171, 29, 191, 183, 58, 101, 189, 45, 62, 196, 190, 163, 166, 48, 62, 26, 235, 151, 60, 191, 220, 26, 190, 150, 18, 98, 62, 94, 247, 50, 190, 241, 38, 32, 62, 229, 98, 131, 62, 151, 224, 2, 190, 132, 45, 218, 189, 169, 129, 39, 62, 188, 180, 208, 189, 154, 146, 208, 189, 246, 70, 237, 189, 207, 16, 180, 61, 68, 55, 73, 190, 115, 83, 235, 61, 153, 129, 129, 61, 66, 65, 36, 190, 12, 107, 7, 62, 211, 162, 233, 189, 195, 39, 207, 61, 19, 215, 8, 62, 2, 21, 120, 190, 154, 224, 212, 189, 37, 21, 2, 62, 73, 96, 229, 189, 137, 149, 198, 189, 8, 177, 167, 189, 233, 50, 110, 62, 215, 111, 81, 62, 190, 141, 173, 61, 80, 68, 231, 61, 11, 171, 129, 189, 50, 60, 183, 189, 201, 234, 46, 61, 207, 30, 4, 62, 47, 244, 74, 62, 209, 205, 251, 190, 135, 195, 178, 60, 125, 9, 3, 61, 142, 22, 226, 190, 168, 219, 73, 188, 209, 153, 50, 190, 192, 250, 18, 61, 218, 181, 155, 189, 233, 173, 151, 189, 249, 75, 169, 188, 11, 54, 158, 189, 128, 60, 5, 62, 236, 225, 3, 62, 147, 100, 111, 62, 178, 226, 54, 189, 254, 145, 174, 188, 126, 199, 235, 60, 182, 2, 130, 190, 248, 233, 211, 190, 247, 118, 63, 62, 65, 116, 167, 188, 124, 10, 72, 189, 225, 183, 18, 62, 139, 36, 209, 61, 63, 44, 152, 62, 45, 186, 3, 190, 32, 166, 229, 61, 219, 18, 109, 189, 255, 84, 171, 187, 202, 132, 168, 61, 222, 147, 113, 61, 162, 112, 158, 62, 197, 164, 155, 190, 61, 80, 203, 61, 236, 104, 132, 62, 45, 139, 233, 190, 83, 248, 171, 61, 199, 171, 241, 187, 17, 128, 80, 188, 206, 66, 50, 61, 250, 169, 193, 189, 68, 158, 36, 190, 43, 77, 136, 61, 218, 255, 27, 190, 204, 181, 179, 61, 11, 75, 92, 188, 152, 129, 66, 188, 112, 154, 97, 187, 227, 185, 143, 62, 198, 141, 145, 190, 254, 225, 158, 190, 248, 61, 116, 62, 230, 42, 27, 190, 154, 115, 109, 190, 252, 47, 92, 62, 8, 255, 34, 61, 43, 110, 118, 61, 212, 214, 165, 189, 107, 185, 1, 62, 210, 98, 139, 190, 141, 27, 64, 61, 74, 70, 128, 62, 169, 52, 71, 61, 206, 223, 198, 62, 50, 205, 203, 190, 47, 25, 58, 62, 59, 142, 233, 61, 86, 150, 244, 189, 156, 225, 190, 189, 0, 196, 244, 61, 67, 93, 18, 62, 246, 226, 215, 189, 182, 191, 215, 188, 253, 239, 46, 60, 148, 155, 26, 190, 8, 147, 12, 190, 15, 195, 251, 60, 209, 163, 145, 188, 203, 2, 66, 189, 81, 116, 251, 61, 202, 192, 245, 189, 176, 225, 234, 189, 4, 132, 234, 59, 101, 225, 157, 61, 229, 102, 246, 189, 85, 122, 11, 190, 203, 152, 122, 187, 6, 191, 163, 61, 50, 17, 136, 189, 246, 142, 244, 189, 168, 159, 18, 62, 115, 56, 186, 189, 46, 218, 44, 190, 30, 224, 1, 190, 239, 86, 171, 189, 80, 167, 195, 188, 224, 196, 1, 190, 198, 205, 214, 189, 3, 124, 168, 60, 188, 254, 251, 190, 126, 26, 215, 60, 220, 143, 78, 190, 155, 170, 155, 61, 90, 39, 76, 62, 252, 54, 201, 61, 230, 78, 7, 191, 203, 110, 91, 62, 114, 15, 27, 190, 118, 227, 1, 190, 254, 158, 193, 61, 2, 208, 53, 62, 100, 174, 210, 61, 142, 51, 181, 61, 84, 219, 77, 190, 109, 35, 203, 190, 168, 139, 123, 62, 19, 236, 33, 189, 68, 150, 86, 190, 160, 105, 26, 62, 75, 10, 182, 61, 19, 8, 155, 62, 99, 64, 32, 62, 244, 82, 10, 188, 45, 224, 3, 190, 129, 29, 121, 189, 249, 9, 162, 61, 189, 213, 142, 61, 40, 81, 147, 62, 185, 82, 27, 191, 214, 133, 173, 62, 167, 116, 203, 62, 8, 159, 157, 62, 12, 141, 13, 185, 177, 234, 188, 62, 56, 37, 155, 190, 110, 30, 144, 187, 194, 80, 255, 61, 158, 96, 64, 62, 207, 208, 144, 60, 204, 244, 77, 61, 19, 133, 129, 190, 227, 92, 25, 190, 19, 246, 52, 189, 1, 193, 249, 59, 161, 90, 116, 190, 58, 5, 90, 62, 167, 111, 22, 62, 128, 17, 170, 189, 85, 31, 253, 61, 48, 153, 226, 62, 197, 164, 241, 189, 228, 93, 127, 60, 231, 32, 155, 60, 227, 49, 103, 62, 103, 41, 37, 190, 189, 54, 21, 190, 178, 84, 95, 61, 86, 239, 144, 190, 42, 10, 84, 61, 58, 142, 255, 190, 45, 241, 162, 62, 237, 21, 133, 190, 235, 2, 203, 188, 208, 184, 232, 189, 86, 194, 88, 61, 234, 65, 243, 189, 224, 222, 15, 190, 155, 192, 184, 60, 50, 192, 16, 61, 5, 41, 146, 188, 51, 247, 93, 189, 247, 33, 2, 189, 152, 11, 213, 189, 145, 213, 51, 189, 195, 135, 47, 189, 253, 18, 119, 189, 71, 17, 51, 190, 248, 220, 32, 61, 89, 130, 156, 188, 23, 46, 150, 189, 78, 151, 230, 60, 135, 136, 13, 61, 59, 237, 13, 190, 189, 253, 221, 61, 240, 237, 164, 189, 25, 242, 200, 189, 250, 156, 197, 189, 202, 166, 231, 60, 74, 249, 181, 61, 167, 43, 11, 189, 30, 168, 134, 189, 248, 35, 17, 62, 14, 239, 32, 189, 138, 74, 169, 61, 11, 101, 45, 190, 122, 230, 191, 189, 116, 99, 121, 60, 220, 224, 134, 61, 153, 110, 39, 189, 160, 161, 49, 190, 208, 45, 1, 62, 90, 193, 74, 62, 106, 144, 160, 61, 52, 54, 164, 61, 87, 242, 76, 190, 144, 167, 189, 61, 162, 118, 238, 60, 228, 185, 73, 59, 28, 131, 58, 61, 240, 23, 151, 188, 158, 204, 180, 61, 150, 89, 3, 62, 180, 33, 46, 189, 165, 205, 59, 61, 219, 91, 246, 61, 25, 163, 209, 61, 234, 47, 168, 189, 195, 44, 14, 190, 164, 38, 73, 190, 58, 233, 64, 190, 243, 44, 15, 62, 80, 198, 107, 61, 248, 50, 179, 189, 71, 21, 189, 189, 131, 27, 118, 62, 122, 94, 220, 190, 103, 61, 62, 62, 11, 78, 12, 61, 43, 253, 3, 190, 124, 206, 207, 188, 35, 109, 18, 62, 135, 145, 143, 189, 24, 97, 43, 62, 246, 161, 2, 62, 17, 214, 154, 61, 218, 95, 161, 188, 2, 209, 132, 190, 253, 61, 40, 190, 75, 112, 1, 189, 145, 142, 72, 62, 119, 228, 160, 189, 222, 100, 2, 62, 195, 49, 97, 190, 226, 109, 252, 61, 197, 145, 21, 190, 243, 97, 87, 190, 152, 19, 67, 190, 186, 182, 24, 190, 221, 220, 108, 189, 5, 2, 54, 62, 143, 19, 225, 189, 14, 163, 68, 61, 178, 91, 135, 188, 149, 190, 140, 190, 78, 200, 91, 188, 215, 11, 241, 188, 93, 57, 184, 189, 114, 202, 219, 61, 80, 188, 44, 62, 11, 47, 156, 62, 32, 124, 78, 61, 230, 13, 100, 61, 109, 221, 150, 190, 86, 132, 185, 189, 252, 119, 94, 190, 199, 38, 143, 62, 200, 132, 56, 189, 87, 54, 35, 62, 203, 170, 206, 190, 69, 88, 36, 190, 86, 84, 150, 189, 169, 207, 199, 190, 82, 163, 146, 190, 111, 125, 86, 62, 178, 151, 56, 62, 144, 150, 111, 189, 2, 4, 200, 60, 248, 226, 123, 62, 65, 1, 1, 189, 102, 219, 211, 61, 124, 49, 254, 189, 41, 96, 225, 61, 64, 27, 143, 190, 217, 36, 107, 187, 17, 78, 26, 62, 195, 148, 71, 189, 22, 116, 98, 190, 52, 249, 235, 190, 19, 34, 19, 63, 100, 15, 48, 189, 98, 199, 13, 62, 251, 92, 40, 189, 125, 47, 140, 190, 193, 169, 160, 61, 117, 13, 112, 189, 34, 45, 36, 62, 224, 46, 71, 62, 27, 196, 38, 62, 179, 188, 188, 189, 168, 173, 172, 61, 108, 79, 55, 189, 66, 110, 243, 189, 169, 139, 4, 190, 149, 221, 234, 61, 30, 76, 176, 190, 85, 135, 94, 60, 16, 178, 138, 189, 215, 241, 45, 190, 163, 103, 29, 190, 64, 205, 98, 60, 122, 125, 149, 188, 201, 206, 162, 190, 110, 84, 33, 190, 84, 151, 93, 62, 132, 41, 166, 190, 2, 67, 37, 190, 244, 200, 186, 59, 171, 255, 37, 191, 15, 253, 132, 62, 40, 148, 113, 191, 187, 49, 138, 62, 193, 64, 192, 190, 212, 224, 133, 188, 204, 23, 211, 60, 243, 165, 205, 188, 135, 175, 29, 62, 133, 186, 186, 61, 77, 242, 138, 187, 160, 101, 20, 62, 88, 126, 42, 61, 21, 52, 198, 187, 84, 183, 10, 190, 254, 64, 234, 61, 111, 98, 225, 61, 172, 201, 51, 190, 97, 213, 169, 189, 220, 69, 134, 189, 233, 126, 152, 61, 28, 203, 237, 189, 132, 176, 28, 62, 173, 132, 56, 60, 197, 58, 6, 62, 105, 197, 240, 61, 250, 80, 254, 189, 66, 58, 3, 189, 181, 240, 42, 188, 74, 71, 3, 190, 21, 186, 7, 62, 172, 50, 44, 189, 165, 86, 51, 190, 33, 153, 41, 190, 228, 160, 216, 189, 175, 186, 198, 188, 118, 50, 243, 61, 142, 1, 196, 188, 108, 186, 162, 61, 64, 213, 132, 61, 58, 83, 194, 61, 146, 70, 17, 190, 249, 24, 109, 189, 207, 156, 211, 61, 168, 144, 64, 189, 139, 101, 56, 61, 154, 223, 206, 60, 223, 201, 40, 62, 17, 158, 211, 189, 123, 119, 214, 59, 112, 231, 63, 61, 64, 89, 145, 61, 243, 122, 162, 189, 115, 42, 27, 190, 38, 197, 214, 189, 241, 190, 103, 189, 93, 210, 17, 62, 175, 200, 47, 190, 145, 187, 36, 190, 54, 132, 24, 190, 43, 107, 220, 189, 90, 51, 196, 189, 96, 139, 62, 189, 3, 144, 24, 190, 253, 195, 32, 190, 194, 224, 184, 189, 228, 22, 228, 189, 131, 97, 233, 189, 205, 230, 83, 189, 27, 196, 208, 189, 116, 247, 139, 189, 105, 224, 227, 189, 90, 143, 5, 188, 136, 136, 56, 62, 184, 36, 43, 190, 211, 47, 15, 62, 101, 53, 102, 62, 28, 193, 51, 62, 223, 234, 12, 190, 207, 170, 34, 189, 207, 55, 96, 190, 229, 12, 17, 190, 142, 198, 223, 188, 64, 132, 7, 189, 149, 15, 142, 189, 250, 135, 36, 189, 184, 13, 156, 190, 94, 28, 182, 61, 194, 190, 239, 61, 20, 10, 121, 189, 176, 194, 56, 188, 95, 219, 70, 190, 58, 24, 90, 62, 160, 80, 209, 189, 131, 249, 183, 190, 157, 46, 167, 189, 245, 255, 225, 190, 44, 143, 86, 61, 41, 54, 171, 190, 170, 214, 138, 62, 226, 92, 147, 190, 215, 189, 95, 62, 137, 81, 21, 190, 116, 243, 199, 60, 76, 183, 138, 61, 107, 117, 10, 62, 208, 171, 190, 189, 155, 222, 127, 61, 162, 116, 152, 62, 254, 208, 18, 62, 172, 150, 107, 189, 244, 91, 217, 190, 71, 66, 66, 190, 90, 13, 15, 190, 111, 44, 235, 189, 54, 39, 28, 190, 251, 171, 47, 190, 247, 243, 6, 62, 9, 75, 5, 189, 73, 244, 138, 189, 144, 161, 73, 62, 226, 226, 110, 189, 225, 22, 83, 189, 144, 121, 83, 190, 59, 138, 46, 62, 45, 149, 155, 190, 47, 208, 68, 190, 206, 135, 237, 186, 54, 94, 3, 191, 170, 158, 20, 62, 58, 58, 91, 191, 247, 22, 170, 62, 40, 254, 60, 190, 11, 81, 10, 61, 189, 44, 83, 62, 87, 85, 65, 189, 159, 64, 224, 189, 239, 42, 172, 61, 171, 107, 223, 190, 10, 2, 89, 188, 89, 246, 152, 60, 157, 150, 241, 61, 85, 43, 187, 61, 94, 86, 8, 62, 191, 235, 216, 189, 113, 30, 21, 190, 237, 142, 238, 61, 4, 188, 94, 62, 131, 229, 152, 62, 102, 253, 26, 189, 3, 182, 87, 61, 108, 10, 32, 190, 142, 49, 141, 62, 137, 78, 243, 61, 86, 192, 134, 188, 42, 6, 8, 189, 108, 60, 152, 61, 6, 235, 208, 61, 134, 234, 110, 188, 240, 215, 18, 190, 190, 100, 29, 189, 247, 46, 160, 190, 26, 205, 140, 61, 147, 135, 150, 190, 168, 188, 174, 61, 175, 133, 77, 61, 252, 82, 14, 190, 6, 21, 13, 190, 252, 122, 173, 189, 14, 5, 26, 62, 96, 16, 43, 62, 32, 193, 255, 189, 250, 226, 237, 189, 87, 244, 31, 190, 137, 188, 32, 190, 79, 2, 209, 61, 196, 191, 32, 188, 244, 177, 246, 189, 128, 120, 235, 189, 201, 10, 26, 189, 65, 5, 169, 61, 198, 218, 189, 61, 84, 30, 2, 190, 110, 209, 229, 189, 11, 249, 49, 190, 69, 125, 12, 62, 29, 149, 136, 189, 176, 23, 218, 189, 144, 92, 22, 190, 211, 193, 17, 190, 223, 104, 2, 62, 173, 129, 48, 59, 204, 209, 0, 190, 161, 217, 123, 60, 214, 227, 93, 189, 80, 137, 114, 61, 251, 20, 140, 188, 194, 9, 24, 61, 163, 60, 160, 190, 102, 47, 234, 187, 160, 13, 82, 190, 210, 130, 218, 61, 189, 219, 128, 61, 169, 27, 234, 60, 139, 28, 157, 190, 143, 125, 83, 62, 149, 128, 191, 59, 205, 240, 81, 62, 109, 141, 151, 61, 241, 124, 46, 62, 7, 92, 216, 61, 186, 65, 137, 61, 248, 3, 221, 190, 55, 178, 126, 190, 201, 178, 191, 61, 115, 235, 172, 61, 109, 16, 67, 190, 114, 11, 17, 62, 22, 253, 22, 62, 184, 253, 176, 62, 109, 39, 46, 189, 246, 84, 25, 62, 151, 70, 135, 60, 79, 205, 254, 189, 120, 66, 45, 61, 232, 192, 54, 62, 104, 25, 221, 62, 19, 217, 13, 190, 4, 119, 15, 62, 80, 44, 119, 62, 116, 15, 189, 189, 31, 213, 171, 189, 195, 75, 133, 189, 28, 4, 223, 61, 38, 230, 186, 190, 62, 155, 221, 61, 145, 8, 36, 61, 114, 51, 29, 62, 71, 215, 241, 189, 112, 169, 238, 189, 34, 168, 87, 190, 48, 193, 205, 61, 188, 46, 25, 61, 226, 8, 200, 60, 82, 125, 69, 190, 48, 238, 202, 187, 73, 74, 236, 59, 160, 188, 8, 62, 104, 75, 72, 189, 180, 45, 50, 62, 172, 30, 170, 188, 6, 31, 172, 189, 169, 115, 190, 61, 215, 157, 158, 186, 89, 24, 43, 190, 186, 137, 251, 189, 105, 190, 134, 61, 223, 137, 185, 190, 169, 60, 66, 189, 152, 14, 146, 190, 144, 17, 60, 190, 234, 71, 120, 61, 33, 148, 50, 62, 41, 122, 212, 59, 227, 66, 132, 62, 114, 248, 55, 190, 82, 232, 141, 188, 90, 163, 169, 62, 114, 142, 155, 61, 236, 165, 180, 60, 221, 82, 254, 188, 94, 131, 144, 189, 242, 213, 15, 190, 14, 204, 130, 190, 37, 190, 197, 61, 156, 27, 127, 189, 246, 124, 179, 62, 237, 224, 164, 62, 218, 20, 254, 189, 118, 121, 198, 188, 233, 77, 183, 62, 76, 22, 41, 190, 124, 54, 139, 190, 229, 157, 19, 190, 63, 47, 167, 62, 68, 71, 9, 191, 91, 46, 206, 190, 25, 57, 180, 188, 217, 29, 206, 190, 82, 189, 58, 61, 139, 101, 63, 191, 224, 118, 91, 62, 38, 228, 166, 190, 3, 14, 204, 61, 98, 122, 11, 62, 166, 216, 235, 188, 246, 28, 245, 187, 49, 250, 131, 62, 213, 144, 34, 62, 223, 146, 131, 190, 36, 234, 86, 62, 233, 115, 34, 190, 74, 55, 236, 189, 83, 251, 164, 189, 222, 144, 247, 60, 201, 103, 8, 61, 176, 20, 75, 61, 96, 14, 82, 190, 9, 144, 78, 187, 105, 183, 71, 62, 214, 149, 185, 61, 182, 112, 239, 189, 139, 218, 139, 62, 85, 9, 107, 190, 124, 243, 51, 189, 4, 97, 46, 191, 84, 174, 73, 62, 253, 166, 162, 190, 193, 170, 73, 62, 103, 149, 75, 189, 241, 171, 211, 190, 186, 107, 84, 61, 75, 57, 124, 190, 226, 7, 52, 62, 55, 193, 131, 189, 210, 55, 222, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 219, 203, 59, 231, 73, 200, 61, 127, 154, 3, 61, 184, 89, 84, 62, 73, 62, 135, 62, 196, 187, 71, 190, 149, 140, 102, 62, 96, 55, 46, 190, 18, 100, 21, 190, 206, 31, 173, 189, 243, 44, 43, 62, 176, 186, 182, 189, 125, 65, 169, 61, 239, 231, 133, 62, 161, 60, 193, 189, 26, 122, 21, 62, 55, 35, 12, 60, 225, 8, 234, 189, 158, 20, 130, 62, 186, 162, 5, 60, 119, 39, 102, 61, 10, 231, 78, 62, 139, 109, 56, 190, 31, 77, 18, 190, 185, 45, 89, 62, 144, 210, 187, 61, 110, 204, 13, 190, 70, 35, 4, 62, 98, 47, 180, 60, 235, 48, 64, 190, 113, 76, 115, 62, 173, 89, 163, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {15, 205, 187, 189, 133, 192, 82, 190, 20, 123, 134, 190, 11, 228, 18, 63, 97, 74, 131, 189, 252, 117, 252, 62, 47, 179, 192, 62, 168, 238, 248, 61, 151, 50, 4, 62, 137, 38, 104, 189, 29, 133, 230, 190, 45, 78, 127, 190, 99, 120, 231, 190, 54, 220, 225, 190, 167, 125, 13, 190, 155, 56, 87, 191, 79, 178, 243, 62, 182, 56, 38, 190, 19, 48, 11, 62, 18, 37, 176, 62, 230, 80, 230, 62, 156, 230, 40, 63, 70, 139, 9, 62, 105, 162, 3, 60, 134, 209, 115, 62, 39, 160, 10, 63, 87, 215, 136, 190, 65, 134, 179, 61, 46, 88, 209, 190, 183, 148, 238, 189, 202, 241, 32, 63, 179, 24, 202, 190, 70, 17, 102, 190, 195, 64, 128, 60, 69, 110, 45, 62, 117, 190, 27, 62, 179, 24, 131, 190, 103, 194, 178, 61, 129, 152, 201, 189, 7, 21, 151, 61, 82, 231, 205, 61, 186, 12, 43, 62, 109, 30, 1, 189, 67, 138, 237, 189, 249, 180, 143, 61, 144, 236, 2, 189, 161, 211, 35, 61, 101, 194, 93, 189, 105, 69, 241, 61, 121, 93, 155, 60, 233, 223, 94, 190, 36, 25, 0, 62, 191, 150, 141, 60, 20, 131, 240, 189, 214, 226, 224, 187, 171, 69, 33, 61, 127, 145, 80, 190, 63, 2, 231, 189, 43, 254, 167, 61, 60, 125, 206, 61, 81, 242, 143, 188, 46, 238, 63, 62, 83, 45, 245, 61, 203, 184, 142, 57};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 58, 26, 190, 128, 190, 118, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {18, 32, 170, 62, 93, 129, 146, 190, 142, 204, 153, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {236, 172, 2, 63, 93, 234, 12, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0034/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}