// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {158, 13, 169, 62, 25, 125, 221, 190, 86, 134, 46, 191, 65, 177, 190, 61, 43, 100, 119, 61, 181, 102, 113, 62, 224, 229, 64, 63, 255, 57, 62, 191, 8, 123, 85, 190, 112, 136, 33, 191, 102, 28, 251, 62, 162, 59, 65, 189, 9, 69, 14, 191, 226, 107, 210, 190, 227, 139, 241, 60, 26, 248, 214, 190, 60, 159, 29, 63, 103, 235, 181, 61, 172, 238, 246, 190, 62, 90, 238, 190, 90, 68, 35, 63, 193, 184, 28, 62, 133, 20, 34, 63, 233, 2, 57, 190, 122, 98, 53, 62, 246, 208, 147, 62, 177, 198, 179, 59, 91, 209, 65, 61, 225, 205, 104, 63, 100, 52, 169, 62, 4, 133, 194, 190, 112, 194, 141, 191, 80, 80, 122, 190, 13, 186, 145, 62, 122, 240, 2, 191, 255, 221, 246, 62, 5, 0, 99, 190, 8, 36, 48, 63, 176, 5, 131, 61, 153, 185, 208, 62, 48, 55, 10, 63, 45, 223, 223, 62, 63, 1, 69, 189, 198, 76, 157, 62, 111, 243, 27, 191, 253, 192, 54, 63, 146, 15, 163, 191, 35, 134, 170, 190, 214, 217, 10, 191, 73, 43, 132, 191, 255, 141, 168, 190, 74, 62, 225, 61, 112, 49, 148, 60, 248, 12, 47, 189, 198, 59, 39, 63, 158, 110, 30, 191, 18, 217, 5, 191, 103, 116, 99, 63, 135, 24, 112, 63, 230, 242, 143, 62, 46, 72, 41, 61, 27, 57, 130, 191, 99, 59, 233, 190, 118, 140, 209, 190, 106, 83, 231, 62, 170, 166, 228, 190, 10, 23, 250, 190, 177, 69, 232, 189, 57, 227, 161, 62, 171, 46, 50, 63, 147, 82, 27, 63, 88, 229, 72, 62, 190, 115, 86, 59, 250, 201, 19, 191, 46, 95, 189, 61, 4, 208, 58, 190, 5, 177, 94, 191, 165, 19, 45, 190, 69, 241, 3, 191, 15, 38, 154, 191, 16, 151, 53, 191, 105, 90, 95, 191, 248, 155, 139, 190, 140, 43, 132, 189, 126, 166, 212, 189, 116, 246, 10, 63, 221, 243, 5, 191, 87, 159, 203, 189, 217, 225, 57, 191, 115, 164, 228, 62, 159, 122, 78, 190, 102, 107, 54, 191, 186, 18, 39, 62, 94, 77, 17, 63, 84, 177, 152, 58, 8, 141, 155, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 12, 58, 191, 163, 175, 246, 60, 232, 69, 163, 60, 88, 27, 190, 189, 247, 90, 68, 189, 109, 46, 173, 188, 46, 166, 51, 61, 3, 179, 215, 62, 179, 107, 193, 190, 232, 4, 72, 190, 237, 33, 248, 188, 142, 60, 94, 62, 153, 183, 63, 62, 67, 40, 45, 190, 124, 72, 3, 191, 62, 37, 200, 189, 181, 246, 56, 62, 226, 102, 199, 190, 189, 235, 255, 187, 75, 56, 170, 62, 143, 198, 189, 62, 197, 74, 124, 189, 107, 177, 13, 63, 206, 47, 80, 190, 255, 81, 130, 187, 44, 213, 175, 62, 210, 78, 116, 190, 151, 50, 94, 62, 28, 77, 28, 190, 108, 235, 172, 62, 238, 248, 97, 190, 69, 52, 72, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 59, 2, 190, 244, 30, 65, 190, 244, 186, 205, 62, 185, 65, 48, 62, 115, 14, 118, 190, 222, 210, 19, 62, 136, 62, 181, 189, 27, 218, 92, 62, 119, 93, 239, 189, 240, 204, 196, 189, 119, 91, 129, 191, 52, 166, 65, 61, 13, 112, 174, 61, 195, 228, 210, 189, 40, 71, 30, 61, 189, 151, 186, 189, 181, 157, 218, 190, 44, 207, 37, 62, 253, 191, 172, 62, 31, 47, 42, 62, 17, 218, 23, 190, 41, 223, 199, 60, 29, 196, 136, 60, 126, 217, 219, 189, 136, 212, 81, 190, 251, 135, 164, 190, 124, 233, 163, 190, 163, 80, 149, 190, 158, 179, 115, 62, 55, 95, 57, 188, 175, 70, 147, 190, 145, 71, 176, 62, 20, 187, 9, 190, 230, 85, 31, 190, 228, 85, 55, 189, 40, 82, 34, 190, 88, 200, 170, 62, 64, 127, 98, 62, 149, 127, 207, 190, 76, 140, 133, 61, 138, 129, 207, 60, 228, 125, 134, 62, 170, 110, 221, 189, 95, 12, 93, 189, 73, 2, 186, 61, 164, 153, 55, 62, 176, 233, 16, 189, 130, 197, 192, 190, 133, 133, 117, 189, 180, 154, 33, 62, 41, 53, 118, 190, 127, 63, 1, 62, 13, 203, 40, 189, 111, 24, 42, 62, 195, 210, 62, 188, 12, 37, 94, 62, 208, 245, 60, 189, 63, 143, 133, 60, 161, 18, 175, 61, 2, 202, 169, 190, 175, 6, 88, 62, 11, 66, 224, 190, 75, 91, 131, 190, 161, 114, 216, 61, 105, 203, 197, 189, 20, 37, 173, 189, 25, 187, 35, 190, 42, 177, 221, 62, 51, 126, 77, 189, 134, 10, 88, 61, 79, 8, 205, 61, 35, 190, 107, 62, 124, 68, 10, 189, 151, 144, 127, 61, 132, 206, 14, 62, 112, 29, 233, 61, 240, 215, 158, 61, 104, 186, 175, 60, 216, 169, 214, 61, 134, 71, 191, 59, 153, 106, 252, 61, 34, 219, 14, 189, 126, 224, 77, 189, 40, 76, 63, 189, 26, 217, 123, 190, 8, 138, 38, 191, 50, 124, 5, 62, 48, 234, 45, 62, 184, 211, 88, 62, 223, 158, 172, 190, 8, 234, 255, 190, 47, 113, 104, 190, 194, 125, 130, 62, 39, 21, 132, 62, 166, 149, 242, 60, 170, 27, 145, 189, 92, 243, 133, 190, 15, 84, 116, 190, 246, 29, 82, 191, 184, 145, 231, 61, 125, 221, 3, 191, 232, 201, 131, 62, 168, 129, 205, 189, 33, 206, 164, 62, 167, 171, 124, 60, 227, 39, 42, 190, 109, 182, 56, 191, 63, 182, 92, 190, 192, 235, 166, 62, 108, 48, 127, 61, 114, 230, 195, 189, 172, 71, 17, 191, 98, 168, 147, 60, 247, 59, 12, 189, 206, 58, 250, 190, 76, 150, 37, 62, 202, 213, 193, 190, 216, 132, 17, 62, 167, 101, 144, 190, 85, 155, 52, 62, 145, 86, 182, 190, 249, 67, 139, 190, 116, 133, 131, 190, 188, 239, 59, 62, 167, 219, 84, 62, 45, 191, 194, 189, 168, 142, 239, 190, 143, 13, 17, 62, 50, 139, 112, 190, 100, 124, 239, 188, 17, 235, 104, 62, 111, 143, 135, 62, 91, 146, 75, 60, 186, 134, 135, 61, 86, 98, 140, 188, 205, 146, 170, 62, 197, 173, 150, 61, 83, 82, 19, 190, 105, 207, 138, 190, 18, 4, 209, 61, 13, 28, 150, 189, 205, 193, 214, 189, 176, 35, 12, 62, 110, 113, 97, 190, 128, 12, 179, 188, 69, 175, 200, 61, 248, 109, 106, 62, 204, 21, 65, 62, 250, 79, 128, 60, 125, 165, 62, 62, 247, 186, 73, 61, 196, 134, 254, 59, 75, 159, 215, 186, 73, 12, 143, 61, 28, 109, 24, 62, 44, 1, 233, 189, 62, 152, 48, 60, 49, 224, 22, 62, 70, 53, 135, 61, 156, 150, 93, 62, 194, 84, 156, 189, 193, 61, 120, 190, 97, 240, 239, 189, 48, 36, 29, 62, 132, 198, 194, 61, 81, 241, 23, 62, 166, 18, 72, 190, 212, 14, 9, 61, 85, 129, 193, 188, 232, 169, 253, 190, 87, 159, 73, 62, 49, 174, 98, 62, 83, 54, 66, 62, 22, 225, 19, 190, 153, 168, 229, 61, 199, 122, 49, 190, 45, 61, 64, 62, 232, 255, 40, 189, 13, 95, 97, 190, 219, 92, 200, 190, 239, 236, 149, 61, 101, 119, 64, 62, 89, 187, 139, 187, 147, 25, 182, 190, 105, 235, 103, 63, 126, 120, 201, 189, 239, 149, 231, 61, 9, 212, 213, 61, 7, 14, 160, 62, 1, 90, 209, 189, 34, 215, 128, 63, 192, 181, 167, 186, 61, 131, 143, 62, 67, 189, 131, 190, 51, 131, 9, 62, 37, 6, 28, 190, 213, 47, 115, 62, 28, 244, 7, 189, 56, 161, 55, 62, 229, 117, 214, 188, 69, 229, 247, 60, 171, 245, 239, 189, 74, 230, 77, 190, 102, 232, 9, 62, 245, 111, 147, 189, 119, 117, 88, 190, 158, 74, 128, 62, 121, 133, 249, 62, 214, 184, 21, 190, 191, 211, 198, 189, 192, 182, 72, 62, 215, 11, 144, 190, 12, 147, 10, 62, 13, 62, 11, 190, 70, 231, 6, 189, 225, 135, 53, 191, 74, 42, 99, 190, 236, 155, 176, 188, 123, 113, 134, 190, 206, 174, 179, 188, 67, 168, 172, 190, 94, 217, 141, 62, 89, 30, 142, 190, 17, 126, 58, 62, 56, 42, 46, 190, 160, 249, 174, 188, 237, 12, 238, 60, 136, 0, 18, 188, 8, 212, 28, 190, 19, 123, 46, 190, 217, 104, 188, 189, 197, 153, 11, 62, 25, 172, 43, 61, 189, 131, 139, 60, 14, 21, 223, 189, 210, 49, 9, 62, 116, 6, 101, 60, 78, 120, 181, 61, 118, 118, 31, 61, 43, 26, 158, 61, 151, 12, 192, 61, 56, 153, 157, 189, 164, 208, 15, 189, 252, 116, 201, 189, 244, 158, 128, 61, 127, 143, 88, 190, 44, 14, 92, 61, 187, 250, 127, 188, 213, 132, 83, 62, 23, 60, 31, 190, 236, 214, 125, 189, 124, 247, 200, 61, 253, 118, 106, 189, 109, 82, 147, 188, 46, 172, 6, 190, 185, 109, 58, 190, 181, 82, 201, 189, 84, 54, 51, 188, 66, 245, 247, 189, 218, 185, 127, 189, 241, 85, 69, 190, 250, 48, 134, 60, 221, 124, 158, 60, 134, 168, 8, 186, 191, 89, 31, 62, 158, 165, 252, 189, 193, 27, 179, 60, 229, 168, 4, 62, 198, 84, 217, 61, 135, 242, 42, 61, 71, 236, 46, 190, 25, 30, 66, 190, 101, 124, 240, 61, 90, 75, 122, 189, 183, 205, 178, 61, 155, 128, 193, 189, 197, 151, 38, 190, 129, 172, 29, 190, 159, 184, 9, 62, 41, 155, 57, 61, 132, 68, 127, 61, 9, 27, 6, 190, 155, 125, 195, 189, 23, 242, 41, 61, 197, 119, 154, 189, 61, 35, 72, 190, 133, 33, 82, 190, 167, 155, 117, 188, 6, 33, 50, 190, 0, 133, 232, 189, 197, 30, 93, 189, 129, 45, 201, 189, 226, 187, 246, 61, 251, 245, 3, 61, 164, 206, 48, 190, 212, 241, 108, 60, 209, 35, 47, 62, 131, 4, 32, 190, 129, 250, 40, 62, 151, 21, 43, 190, 20, 229, 206, 189, 126, 32, 3, 190, 145, 205, 241, 189, 2, 159, 3, 62, 159, 76, 200, 61, 81, 5, 195, 61, 49, 58, 184, 189, 21, 177, 153, 189, 202, 153, 28, 190, 205, 212, 1, 61, 75, 153, 147, 189, 136, 233, 1, 187, 188, 36, 169, 189, 52, 189, 5, 189, 68, 248, 88, 189, 74, 218, 29, 189, 113, 177, 48, 187, 224, 8, 113, 189, 9, 61, 17, 190, 151, 78, 29, 190, 211, 231, 221, 189, 151, 178, 179, 188, 69, 64, 61, 189, 229, 173, 142, 62, 247, 101, 34, 61, 104, 124, 53, 61, 252, 128, 133, 62, 143, 78, 96, 61, 147, 40, 150, 189, 189, 23, 190, 190, 134, 118, 30, 190, 90, 92, 129, 62, 105, 129, 129, 190, 15, 105, 74, 190, 38, 152, 220, 190, 53, 221, 90, 62, 164, 41, 186, 190, 173, 96, 12, 62, 63, 26, 0, 190, 203, 233, 7, 190, 124, 205, 161, 190, 149, 193, 13, 191, 12, 85, 231, 188, 53, 171, 151, 189, 113, 136, 110, 62, 121, 151, 168, 190, 138, 117, 3, 191, 247, 237, 2, 62, 68, 69, 146, 190, 43, 125, 107, 62, 112, 241, 132, 62, 176, 18, 43, 189, 129, 65, 145, 189, 255, 3, 7, 62, 88, 56, 250, 189, 88, 245, 196, 189, 22, 161, 90, 61, 33, 225, 23, 62, 96, 165, 148, 190, 112, 215, 84, 61, 153, 129, 129, 61, 36, 126, 40, 61, 24, 197, 152, 62, 206, 212, 217, 190, 235, 171, 16, 62, 91, 41, 148, 61, 140, 110, 106, 190, 18, 88, 178, 189, 49, 225, 80, 62, 73, 96, 229, 189, 103, 8, 131, 189, 39, 7, 135, 188, 141, 217, 143, 62, 123, 48, 100, 62, 123, 251, 219, 61, 108, 93, 172, 60, 170, 244, 139, 190, 145, 30, 172, 60, 59, 49, 190, 61, 80, 196, 92, 62, 134, 238, 66, 62, 94, 137, 36, 191, 184, 197, 103, 190, 74, 199, 184, 187, 211, 208, 218, 190, 73, 206, 6, 61, 240, 33, 141, 190, 130, 244, 245, 59, 199, 186, 193, 189, 175, 200, 197, 189, 215, 134, 4, 61, 230, 94, 127, 189, 128, 60, 5, 62, 207, 255, 212, 60, 192, 191, 194, 62, 89, 117, 26, 61, 18, 136, 236, 189, 199, 244, 86, 61, 56, 68, 94, 190, 25, 80, 12, 191, 103, 194, 94, 62, 65, 116, 167, 188, 45, 41, 114, 189, 254, 196, 67, 62, 153, 98, 175, 61, 9, 196, 163, 62, 157, 88, 78, 190, 62, 207, 110, 62, 247, 77, 152, 62, 99, 87, 159, 189, 126, 44, 173, 61, 135, 166, 198, 189, 130, 218, 176, 62, 99, 248, 65, 190, 36, 124, 104, 62, 224, 165, 138, 62, 169, 190, 218, 190, 133, 68, 197, 61, 239, 102, 93, 189, 41, 0, 214, 188, 252, 162, 210, 60, 222, 62, 223, 189, 147, 85, 24, 190, 73, 178, 174, 61, 218, 255, 27, 190, 202, 102, 154, 189, 170, 58, 177, 61, 120, 67, 43, 61, 238, 248, 1, 190, 233, 181, 117, 62, 95, 162, 118, 190, 22, 138, 221, 190, 111, 83, 122, 62, 230, 42, 27, 190, 4, 30, 94, 190, 70, 234, 114, 62, 77, 12, 154, 60, 209, 228, 203, 61, 74, 161, 37, 190, 200, 125, 5, 62, 202, 62, 164, 61, 65, 26, 18, 188, 117, 130, 136, 62, 99, 250, 65, 189, 10, 92, 215, 62, 119, 107, 171, 190, 94, 254, 107, 62, 161, 110, 13, 62, 86, 150, 244, 189, 156, 225, 190, 189, 0, 196, 244, 61, 67, 93, 18, 62, 246, 226, 215, 189, 182, 191, 215, 188, 253, 239, 46, 60, 148, 155, 26, 190, 8, 147, 12, 190, 15, 195, 251, 60, 209, 163, 145, 188, 203, 2, 66, 189, 81, 116, 251, 61, 202, 192, 245, 189, 176, 225, 234, 189, 4, 132, 234, 59, 101, 225, 157, 61, 229, 102, 246, 189, 85, 122, 11, 190, 203, 152, 122, 187, 6, 191, 163, 61, 50, 17, 136, 189, 246, 142, 244, 189, 168, 159, 18, 62, 115, 56, 186, 189, 46, 218, 44, 190, 30, 224, 1, 190, 239, 86, 171, 189, 80, 167, 195, 188, 224, 196, 1, 190, 198, 205, 214, 189, 3, 124, 168, 60, 234, 84, 254, 190, 92, 110, 242, 61, 139, 88, 120, 190, 255, 60, 120, 61, 250, 43, 124, 62, 64, 203, 18, 62, 93, 2, 196, 190, 215, 18, 39, 62, 114, 15, 27, 190, 208, 46, 110, 190, 17, 4, 120, 62, 69, 34, 141, 62, 38, 232, 218, 61, 40, 240, 224, 61, 208, 90, 82, 190, 251, 235, 245, 190, 248, 15, 131, 62, 19, 236, 33, 189, 44, 29, 103, 190, 66, 97, 65, 62, 156, 103, 118, 61, 34, 221, 157, 62, 19, 193, 249, 61, 126, 204, 112, 61, 9, 28, 158, 61, 189, 168, 69, 189, 68, 80, 155, 61, 230, 180, 131, 61, 143, 173, 137, 62, 83, 28, 233, 190, 206, 3, 241, 62, 95, 21, 198, 62, 255, 230, 211, 62, 28, 150, 176, 60, 23, 58, 245, 62, 17, 86, 19, 190, 16, 44, 70, 190, 201, 49, 139, 62, 1, 124, 52, 62, 78, 158, 246, 60, 204, 244, 77, 61, 195, 158, 77, 189, 173, 57, 4, 191, 111, 168, 173, 189, 9, 159, 139, 62, 79, 97, 89, 190, 161, 140, 138, 62, 230, 143, 152, 62, 140, 87, 120, 190, 85, 31, 253, 61, 0, 138, 1, 63, 44, 91, 43, 190, 222, 96, 106, 188, 68, 217, 160, 61, 122, 31, 131, 62, 137, 213, 202, 190, 124, 41, 189, 190, 15, 133, 196, 60, 97, 70, 149, 190, 207, 75, 35, 190, 22, 202, 219, 190, 160, 8, 128, 62, 158, 235, 184, 190, 126, 107, 197, 189, 208, 184, 232, 189, 86, 194, 88, 61, 234, 65, 243, 189, 224, 222, 15, 190, 155, 192, 184, 60, 50, 192, 16, 61, 5, 41, 146, 188, 51, 247, 93, 189, 247, 33, 2, 189, 152, 11, 213, 189, 145, 213, 51, 189, 195, 135, 47, 189, 253, 18, 119, 189, 71, 17, 51, 190, 248, 220, 32, 61, 89, 130, 156, 188, 23, 46, 150, 189, 78, 151, 230, 60, 135, 136, 13, 61, 59, 237, 13, 190, 189, 253, 221, 61, 240, 237, 164, 189, 25, 242, 200, 189, 250, 156, 197, 189, 202, 166, 231, 60, 74, 249, 181, 61, 167, 43, 11, 189, 30, 168, 134, 189, 248, 35, 17, 62, 14, 239, 32, 189, 138, 74, 169, 61, 11, 101, 45, 190, 122, 23, 253, 189, 89, 232, 94, 61, 66, 217, 18, 62, 143, 230, 212, 60, 182, 117, 132, 189, 228, 64, 173, 61, 24, 90, 94, 62, 159, 130, 52, 62, 52, 54, 164, 61, 176, 79, 77, 190, 178, 131, 46, 190, 103, 181, 171, 61, 35, 208, 111, 189, 114, 17, 122, 61, 88, 166, 29, 186, 64, 183, 183, 61, 87, 184, 77, 61, 180, 33, 46, 189, 193, 95, 123, 61, 38, 252, 28, 62, 213, 59, 179, 61, 179, 54, 190, 188, 37, 179, 203, 189, 101, 122, 129, 190, 253, 184, 223, 189, 13, 201, 52, 62, 58, 198, 20, 61, 34, 25, 121, 189, 69, 51, 130, 189, 59, 69, 142, 62, 37, 230, 162, 190, 250, 233, 114, 62, 26, 173, 159, 190, 135, 190, 190, 190, 105, 202, 63, 190, 147, 120, 185, 62, 224, 203, 166, 190, 205, 211, 158, 62, 188, 53, 57, 188, 10, 62, 75, 62, 218, 95, 161, 188, 178, 12, 139, 191, 225, 188, 151, 191, 219, 204, 35, 190, 217, 183, 153, 62, 182, 40, 8, 191, 169, 79, 105, 62, 242, 164, 181, 190, 51, 162, 222, 60, 197, 145, 21, 190, 6, 212, 8, 191, 81, 145, 43, 191, 202, 110, 213, 190, 247, 30, 58, 62, 42, 195, 203, 61, 31, 177, 99, 190, 1, 238, 41, 189, 251, 120, 50, 190, 95, 29, 9, 191, 194, 159, 167, 61, 18, 152, 9, 62, 44, 230, 110, 190, 175, 6, 137, 61, 77, 228, 18, 62, 56, 85, 179, 62, 36, 77, 93, 188, 74, 20, 49, 62, 207, 242, 95, 190, 128, 181, 170, 61, 66, 118, 85, 190, 219, 115, 124, 62, 95, 204, 74, 60, 87, 54, 35, 62, 228, 108, 216, 190, 160, 176, 202, 190, 117, 167, 20, 190, 157, 158, 152, 190, 95, 203, 217, 190, 118, 184, 137, 62, 37, 147, 145, 62, 210, 53, 21, 190, 2, 4, 200, 60, 202, 36, 169, 62, 195, 93, 60, 190, 27, 248, 15, 62, 115, 83, 182, 189, 148, 193, 23, 62, 204, 242, 20, 191, 166, 223, 28, 189, 145, 98, 114, 62, 196, 36, 139, 189, 97, 36, 79, 190, 205, 253, 187, 190, 87, 18, 10, 63, 162, 63, 13, 60, 66, 252, 3, 62, 36, 96, 40, 189, 205, 62, 118, 190, 32, 117, 229, 62, 16, 115, 158, 189, 105, 200, 198, 61, 95, 13, 93, 62, 189, 236, 51, 62, 22, 26, 132, 190, 168, 173, 172, 61, 41, 139, 223, 187, 68, 185, 38, 191, 127, 9, 219, 189, 153, 249, 125, 62, 230, 227, 178, 190, 184, 46, 71, 62, 251, 170, 138, 62, 221, 175, 239, 190, 163, 103, 29, 190, 218, 163, 214, 189, 115, 96, 84, 189, 100, 72, 235, 190, 47, 39, 158, 61, 153, 99, 115, 62, 78, 210, 41, 191, 149, 245, 79, 190, 126, 46, 32, 62, 192, 59, 86, 191, 126, 57, 96, 62, 9, 191, 69, 191, 154, 207, 136, 62, 171, 37, 180, 190, 244, 122, 29, 189, 204, 23, 211, 60, 60, 189, 2, 189, 135, 175, 29, 62, 235, 208, 166, 61, 77, 242, 138, 187, 17, 92, 3, 62, 118, 119, 26, 61, 36, 150, 206, 188, 84, 183, 10, 190, 143, 247, 188, 61, 111, 98, 225, 61, 24, 55, 52, 190, 114, 155, 215, 189, 5, 125, 162, 189, 233, 126, 152, 61, 28, 203, 237, 189, 132, 176, 28, 62, 173, 132, 56, 60, 197, 58, 6, 62, 50, 89, 182, 61, 250, 80, 254, 189, 254, 208, 9, 189, 205, 254, 220, 188, 87, 158, 11, 190, 21, 186, 7, 62, 172, 50, 44, 189, 165, 86, 51, 190, 4, 187, 43, 190, 93, 164, 218, 189, 64, 194, 198, 188, 118, 50, 243, 61, 76, 183, 27, 189, 108, 186, 162, 61, 64, 213, 132, 61, 58, 83, 194, 61, 146, 70, 17, 190, 249, 24, 109, 189, 207, 156, 211, 61, 168, 144, 64, 189, 139, 101, 56, 61, 154, 223, 206, 60, 223, 201, 40, 62, 17, 158, 211, 189, 123, 119, 214, 59, 112, 231, 63, 61, 64, 89, 145, 61, 243, 122, 162, 189, 115, 42, 27, 190, 38, 197, 214, 189, 241, 190, 103, 189, 93, 210, 17, 62, 175, 200, 47, 190, 145, 187, 36, 190, 54, 132, 24, 190, 43, 107, 220, 189, 90, 51, 196, 189, 96, 139, 62, 189, 3, 144, 24, 190, 253, 195, 32, 190, 194, 224, 184, 189, 228, 22, 228, 189, 131, 97, 233, 189, 205, 230, 83, 189, 27, 196, 208, 189, 199, 175, 185, 190, 206, 129, 157, 189, 211, 24, 45, 62, 199, 232, 17, 62, 199, 85, 69, 190, 88, 93, 129, 61, 102, 139, 88, 62, 63, 179, 56, 62, 223, 234, 12, 190, 219, 57, 172, 60, 101, 255, 115, 191, 141, 46, 232, 189, 54, 168, 131, 189, 150, 58, 205, 184, 115, 131, 3, 191, 244, 250, 70, 62, 48, 232, 58, 191, 94, 28, 182, 61, 225, 15, 108, 62, 157, 210, 137, 188, 187, 166, 144, 188, 51, 19, 244, 189, 163, 28, 73, 62, 254, 206, 7, 190, 90, 132, 223, 190, 168, 245, 123, 187, 222, 253, 45, 191, 230, 126, 136, 188, 219, 44, 16, 191, 36, 153, 130, 62, 151, 239, 133, 190, 205, 83, 132, 62, 47, 10, 51, 190, 207, 86, 6, 188, 35, 73, 94, 62, 177, 26, 142, 62, 234, 167, 239, 189, 76, 133, 136, 61, 33, 221, 119, 62, 49, 59, 89, 62, 172, 150, 107, 189, 217, 228, 0, 191, 96, 67, 123, 191, 99, 54, 29, 190, 166, 81, 20, 190, 163, 149, 123, 190, 135, 164, 16, 190, 155, 248, 161, 62, 77, 179, 7, 191, 73, 244, 138, 189, 126, 250, 154, 62, 67, 226, 240, 189, 125, 100, 144, 189, 222, 244, 84, 62, 233, 94, 1, 62, 125, 17, 9, 191, 219, 164, 97, 190, 11, 131, 69, 61, 193, 95, 42, 191, 85, 93, 127, 61, 16, 120, 2, 191, 95, 232, 145, 62, 170, 175, 12, 190, 253, 187, 63, 61, 208, 236, 129, 62, 15, 79, 12, 190, 192, 170, 222, 189, 214, 176, 105, 188, 180, 27, 149, 190, 19, 164, 104, 60, 69, 23, 141, 60, 86, 48, 147, 61, 85, 43, 187, 61, 10, 126, 64, 62, 3, 121, 40, 62, 177, 127, 139, 190, 209, 184, 42, 62, 22, 65, 64, 62, 231, 55, 158, 62, 121, 189, 87, 188, 93, 82, 32, 62, 108, 10, 32, 190, 66, 175, 167, 62, 11, 45, 240, 61, 171, 231, 51, 61, 99, 57, 73, 189, 208, 138, 208, 188, 229, 127, 248, 61, 121, 120, 79, 60, 188, 110, 9, 189, 98, 42, 215, 60, 186, 51, 154, 190, 177, 119, 86, 61, 169, 94, 221, 190, 90, 53, 154, 60, 55, 188, 125, 60, 233, 33, 189, 189, 156, 21, 167, 189, 10, 217, 56, 190, 175, 194, 171, 189, 36, 7, 64, 62, 55, 30, 49, 190, 32, 236, 134, 189, 164, 170, 226, 189, 137, 188, 32, 190, 248, 202, 157, 62, 157, 243, 3, 61, 32, 244, 244, 189, 142, 248, 5, 61, 120, 157, 153, 61, 188, 216, 5, 62, 76, 252, 160, 188, 222, 2, 220, 189, 110, 209, 229, 189, 2, 193, 127, 190, 34, 62, 98, 62, 28, 137, 20, 190, 118, 58, 248, 189, 175, 48, 242, 189, 166, 14, 26, 189, 232, 102, 8, 62, 41, 243, 42, 189, 213, 117, 25, 190, 251, 75, 168, 189, 250, 58, 224, 61, 73, 137, 135, 61, 255, 12, 26, 61, 173, 147, 127, 61, 237, 96, 175, 190, 232, 96, 52, 188, 68, 131, 145, 190, 67, 220, 46, 62, 82, 210, 141, 61, 53, 31, 181, 61, 78, 209, 139, 190, 36, 210, 131, 62, 149, 128, 191, 59, 144, 122, 151, 61, 151, 170, 77, 61, 218, 137, 74, 62, 235, 46, 195, 61, 229, 141, 20, 61, 202, 165, 226, 190, 194, 237, 220, 190, 190, 231, 1, 60, 115, 235, 172, 61, 188, 176, 88, 190, 146, 144, 32, 62, 159, 92, 154, 61, 222, 213, 173, 62, 217, 228, 55, 189, 34, 237, 47, 62, 216, 229, 148, 62, 175, 93, 152, 190, 107, 26, 73, 189, 44, 55, 178, 61, 26, 4, 221, 62, 16, 107, 144, 189, 211, 118, 29, 62, 160, 11, 135, 62, 83, 123, 220, 189, 178, 149, 66, 189, 174, 129, 120, 190, 3, 141, 235, 61, 173, 171, 182, 190, 29, 44, 232, 189, 235, 173, 183, 61, 202, 153, 220, 62, 71, 215, 241, 189, 218, 243, 140, 190, 177, 85, 19, 191, 238, 152, 79, 62, 224, 209, 147, 189, 199, 242, 86, 61, 92, 74, 231, 61, 92, 113, 243, 190, 159, 236, 97, 190, 160, 188, 8, 62, 211, 103, 85, 190, 103, 5, 150, 62, 156, 56, 130, 190, 228, 121, 206, 61, 125, 165, 64, 61, 151, 58, 55, 62, 190, 32, 149, 62, 122, 157, 19, 191, 58, 1, 200, 188, 105, 198, 120, 191, 121, 103, 138, 62, 111, 188, 62, 190, 227, 64, 67, 189, 208, 59, 101, 62, 198, 232, 85, 62, 243, 57, 145, 61, 120, 157, 192, 62, 50, 139, 47, 190, 132, 108, 62, 190, 102, 4, 177, 62, 107, 139, 231, 61, 69, 195, 202, 189, 221, 82, 254, 188, 202, 125, 194, 58, 248, 99, 105, 191, 96, 127, 68, 190, 59, 38, 185, 61, 107, 234, 114, 189, 118, 66, 184, 62, 245, 86, 2, 63, 208, 19, 16, 191, 118, 121, 198, 188, 244, 44, 207, 62, 249, 249, 81, 190, 98, 47, 157, 190, 119, 35, 100, 61, 253, 36, 176, 62, 180, 31, 80, 191, 96, 176, 255, 190, 5, 129, 92, 61, 82, 206, 6, 191, 248, 111, 14, 189, 168, 128, 43, 191, 124, 67, 113, 62, 66, 67, 144, 190, 67, 50, 129, 61, 221, 192, 247, 61, 177, 138, 203, 189, 120, 83, 237, 186, 119, 238, 37, 63, 246, 82, 108, 61, 151, 217, 55, 62, 135, 159, 45, 62, 147, 155, 91, 190, 74, 55, 236, 189, 215, 7, 255, 189, 95, 217, 59, 61, 48, 135, 140, 189, 225, 230, 225, 62, 176, 253, 145, 190, 62, 133, 35, 190, 151, 228, 109, 62, 144, 85, 109, 188, 182, 112, 239, 189, 82, 226, 145, 62, 247, 89, 226, 190, 6, 151, 50, 190, 47, 152, 105, 191, 95, 183, 61, 62, 109, 247, 17, 191, 183, 163, 199, 189, 178, 118, 71, 190, 150, 186, 47, 191, 127, 170, 236, 61, 179, 54, 61, 191, 200, 147, 207, 61, 240, 153, 139, 190, 46, 204, 120, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 221, 3, 62, 78, 96, 69, 61, 100, 38, 173, 60, 182, 67, 134, 62, 170, 138, 170, 62, 204, 229, 40, 190, 138, 200, 57, 62, 96, 55, 46, 190, 98, 5, 29, 190, 206, 31, 173, 189, 3, 159, 89, 62, 41, 219, 127, 189, 134, 204, 120, 61, 35, 144, 126, 62, 161, 60, 193, 189, 135, 204, 14, 62, 95, 27, 159, 189, 225, 8, 234, 189, 215, 93, 159, 62, 22, 231, 15, 61, 9, 218, 236, 60, 26, 64, 69, 62, 23, 175, 79, 190, 31, 77, 18, 190, 238, 120, 93, 62, 22, 158, 198, 61, 57, 181, 23, 190, 117, 94, 16, 62, 119, 199, 98, 61, 167, 90, 215, 189, 151, 37, 77, 62, 47, 235, 217, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {112, 90, 39, 190, 143, 113, 113, 190, 70, 63, 129, 190, 119, 216, 86, 63, 74, 221, 47, 189, 93, 20, 2, 63, 195, 135, 246, 62, 168, 238, 248, 61, 225, 244, 3, 62, 137, 38, 104, 189, 89, 21, 245, 190, 107, 108, 149, 190, 100, 239, 6, 191, 16, 176, 191, 190, 167, 125, 13, 190, 127, 170, 70, 191, 46, 48, 48, 63, 182, 56, 38, 190, 26, 247, 189, 61, 160, 16, 149, 63, 61, 225, 19, 63, 47, 63, 94, 63, 219, 245, 8, 62, 105, 162, 3, 60, 177, 206, 139, 62, 158, 43, 67, 63, 248, 32, 155, 190, 140, 59, 48, 61, 106, 183, 217, 190, 134, 109, 35, 191, 49, 225, 119, 63, 162, 90, 49, 191, 16, 196, 17, 191, 198, 130, 182, 61, 39, 233, 28, 62, 143, 144, 34, 62, 160, 167, 185, 190, 189, 79, 203, 60, 39, 197, 166, 61, 7, 21, 151, 61, 140, 65, 206, 61, 186, 12, 43, 62, 21, 253, 237, 189, 220, 50, 2, 190, 55, 218, 156, 62, 214, 176, 40, 61, 161, 211, 35, 61, 53, 228, 210, 187, 160, 243, 150, 62, 121, 93, 155, 60, 20, 211, 129, 190, 142, 90, 4, 62, 160, 230, 45, 60, 4, 132, 218, 60, 63, 66, 226, 187, 171, 69, 33, 61, 108, 67, 166, 190, 234, 95, 149, 189, 76, 124, 195, 61, 123, 77, 107, 62, 138, 134, 196, 60, 126, 146, 191, 62, 65, 36, 134, 62, 192, 173, 170, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 85, 16, 190, 255, 141, 170, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {58, 127, 188, 189, 37, 217, 164, 62, 188, 250, 19, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {114, 84, 125, 62, 186, 83, 100, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0034/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}