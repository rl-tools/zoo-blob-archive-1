// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 37, 75, 62, 16, 26, 232, 190, 89, 247, 49, 191, 55, 166, 78, 61, 51, 47, 119, 188, 175, 65, 130, 62, 54, 131, 57, 63, 41, 55, 44, 191, 48, 59, 116, 190, 82, 57, 252, 190, 218, 155, 5, 63, 123, 158, 165, 189, 231, 36, 212, 190, 157, 204, 232, 190, 139, 195, 176, 60, 144, 224, 235, 190, 202, 22, 24, 63, 34, 189, 131, 188, 12, 40, 156, 190, 139, 73, 239, 190, 190, 242, 46, 63, 85, 97, 60, 62, 68, 14, 23, 63, 65, 114, 0, 190, 122, 98, 53, 62, 246, 208, 147, 62, 177, 198, 179, 59, 51, 123, 44, 189, 103, 124, 33, 63, 240, 34, 187, 62, 81, 201, 130, 190, 172, 183, 129, 191, 129, 248, 111, 190, 133, 106, 125, 62, 137, 130, 252, 190, 91, 224, 245, 62, 216, 6, 104, 190, 13, 26, 25, 63, 26, 58, 131, 61, 51, 46, 200, 62, 162, 159, 4, 63, 159, 232, 220, 62, 191, 38, 25, 190, 5, 74, 145, 62, 207, 62, 33, 191, 161, 106, 48, 63, 232, 245, 152, 191, 239, 168, 186, 190, 46, 174, 195, 190, 64, 91, 117, 191, 38, 209, 197, 190, 74, 62, 225, 61, 112, 49, 148, 60, 248, 12, 47, 189, 43, 89, 34, 63, 157, 254, 17, 191, 242, 22, 8, 191, 158, 205, 90, 63, 58, 10, 53, 63, 27, 199, 204, 62, 79, 180, 20, 62, 208, 34, 88, 191, 71, 102, 254, 190, 241, 126, 185, 190, 113, 96, 204, 62, 40, 132, 233, 190, 177, 252, 8, 191, 60, 229, 54, 190, 94, 23, 174, 62, 56, 207, 43, 63, 81, 126, 11, 63, 250, 144, 60, 62, 27, 101, 173, 188, 77, 145, 10, 191, 128, 28, 131, 61, 156, 80, 164, 189, 214, 72, 56, 191, 47, 11, 252, 189, 165, 99, 3, 191, 53, 81, 120, 191, 231, 242, 73, 191, 164, 74, 72, 191, 89, 51, 153, 190, 255, 43, 211, 189, 178, 146, 65, 189, 121, 163, 19, 63, 2, 133, 5, 191, 53, 109, 162, 189, 75, 220, 53, 191, 28, 122, 236, 62, 23, 74, 71, 190, 210, 165, 61, 191, 226, 226, 40, 62, 88, 134, 16, 63, 189, 9, 151, 188, 106, 18, 201, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 161, 38, 191, 196, 146, 184, 61, 59, 103, 34, 61, 227, 142, 181, 189, 58, 45, 201, 189, 14, 133, 89, 61, 27, 55, 225, 61, 148, 147, 186, 62, 179, 107, 193, 190, 153, 203, 139, 190, 185, 183, 157, 189, 224, 209, 120, 62, 103, 127, 139, 62, 180, 146, 4, 190, 169, 33, 202, 190, 135, 179, 163, 189, 200, 27, 22, 62, 226, 102, 199, 190, 122, 154, 218, 60, 85, 16, 142, 62, 236, 117, 203, 62, 102, 170, 151, 189, 182, 201, 251, 62, 152, 244, 75, 190, 243, 224, 38, 60, 115, 149, 179, 62, 67, 243, 114, 190, 8, 187, 173, 62, 120, 177, 78, 190, 73, 8, 164, 62, 167, 97, 29, 190, 229, 147, 71, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 124, 223, 189, 175, 165, 84, 190, 239, 128, 189, 62, 112, 146, 57, 60, 250, 167, 216, 189, 103, 230, 85, 188, 81, 36, 166, 189, 92, 39, 11, 62, 119, 93, 239, 189, 7, 87, 207, 189, 168, 235, 67, 191, 3, 71, 144, 60, 2, 162, 167, 188, 68, 209, 234, 189, 27, 158, 123, 60, 79, 221, 120, 189, 19, 111, 156, 190, 44, 207, 37, 62, 20, 175, 163, 62, 110, 57, 242, 61, 203, 115, 5, 190, 235, 64, 193, 188, 28, 167, 210, 188, 1, 137, 240, 189, 5, 147, 76, 190, 247, 201, 114, 190, 71, 114, 134, 190, 203, 25, 161, 190, 83, 216, 85, 62, 232, 41, 239, 188, 239, 108, 126, 190, 103, 241, 150, 62, 157, 195, 31, 190, 30, 246, 182, 189, 167, 169, 7, 60, 143, 247, 213, 189, 172, 181, 105, 62, 55, 210, 96, 62, 233, 184, 207, 190, 56, 233, 50, 61, 138, 129, 207, 60, 51, 142, 132, 62, 153, 100, 219, 189, 127, 242, 141, 60, 16, 191, 48, 61, 64, 204, 97, 62, 0, 115, 114, 189, 234, 119, 138, 190, 202, 131, 92, 60, 180, 154, 33, 62, 140, 25, 123, 190, 95, 100, 17, 62, 35, 162, 59, 188, 193, 43, 22, 62, 71, 170, 62, 61, 138, 182, 132, 62, 34, 3, 185, 187, 78, 43, 193, 61, 65, 101, 7, 62, 136, 50, 94, 190, 154, 36, 54, 62, 16, 29, 182, 190, 68, 185, 128, 190, 149, 176, 251, 61, 51, 146, 200, 189, 218, 183, 127, 189, 159, 227, 45, 190, 192, 244, 171, 62, 4, 143, 29, 61, 194, 125, 238, 59, 11, 152, 247, 61, 99, 50, 91, 62, 124, 68, 10, 189, 210, 253, 198, 61, 6, 7, 181, 62, 25, 213, 4, 62, 163, 17, 176, 61, 131, 240, 45, 61, 69, 33, 201, 189, 222, 193, 148, 60, 11, 136, 167, 62, 34, 219, 14, 189, 83, 80, 40, 189, 53, 26, 217, 188, 54, 29, 23, 190, 65, 39, 67, 191, 39, 236, 47, 62, 13, 27, 43, 62, 3, 22, 132, 62, 213, 144, 44, 190, 105, 254, 78, 190, 201, 155, 172, 189, 60, 196, 193, 61, 160, 185, 142, 62, 87, 134, 154, 61, 219, 6, 145, 189, 241, 163, 206, 189, 105, 67, 140, 190, 102, 230, 51, 191, 31, 101, 246, 61, 127, 183, 51, 190, 138, 63, 147, 62, 243, 60, 126, 189, 247, 62, 141, 62, 167, 171, 124, 60, 86, 57, 33, 190, 227, 216, 193, 190, 29, 33, 135, 190, 58, 69, 167, 62, 171, 212, 132, 60, 247, 109, 20, 190, 152, 41, 211, 190, 22, 240, 199, 61, 247, 59, 12, 189, 64, 163, 182, 190, 63, 142, 204, 61, 236, 131, 163, 190, 234, 23, 1, 62, 95, 0, 63, 190, 242, 168, 141, 61, 84, 232, 164, 190, 62, 110, 193, 189, 130, 217, 104, 190, 119, 239, 78, 62, 152, 58, 47, 62, 219, 214, 57, 189, 226, 216, 222, 190, 231, 254, 153, 61, 204, 149, 129, 190, 78, 184, 188, 188, 184, 163, 66, 62, 95, 102, 101, 62, 239, 54, 111, 189, 73, 162, 191, 61, 230, 104, 73, 188, 143, 80, 153, 62, 197, 173, 150, 61, 69, 140, 167, 189, 225, 146, 140, 190, 90, 73, 192, 61, 12, 51, 198, 187, 125, 182, 190, 189, 242, 161, 12, 62, 220, 130, 113, 190, 252, 11, 185, 188, 69, 175, 200, 61, 98, 23, 74, 62, 37, 31, 65, 62, 2, 80, 108, 60, 91, 83, 50, 62, 199, 30, 80, 61, 214, 85, 46, 61, 222, 166, 120, 189, 174, 230, 204, 61, 35, 39, 11, 62, 93, 124, 234, 189, 219, 168, 181, 60, 50, 15, 21, 62, 205, 195, 95, 60, 240, 145, 82, 62, 64, 220, 135, 189, 150, 72, 90, 190, 92, 202, 227, 189, 41, 21, 90, 62, 165, 197, 137, 61, 83, 225, 126, 62, 18, 28, 165, 190, 151, 168, 135, 61, 85, 129, 193, 188, 80, 145, 150, 190, 3, 197, 118, 62, 140, 77, 136, 61, 216, 128, 151, 62, 207, 109, 31, 190, 191, 103, 205, 61, 60, 142, 14, 190, 157, 145, 61, 62, 232, 255, 40, 189, 72, 189, 73, 190, 197, 75, 252, 189, 35, 1, 160, 61, 237, 174, 78, 62, 159, 231, 186, 189, 113, 152, 143, 190, 201, 36, 48, 63, 25, 33, 191, 189, 70, 105, 236, 61, 243, 80, 237, 61, 176, 18, 154, 62, 65, 4, 162, 190, 172, 144, 53, 63, 208, 193, 221, 60, 244, 127, 127, 62, 187, 32, 107, 190, 10, 221, 226, 61, 172, 63, 218, 188, 152, 249, 230, 61, 1, 204, 7, 62, 180, 194, 61, 62, 217, 57, 160, 188, 69, 229, 247, 60, 90, 211, 112, 188, 1, 103, 63, 190, 226, 3, 8, 62, 118, 35, 247, 61, 246, 245, 17, 190, 76, 180, 103, 62, 204, 114, 237, 62, 208, 197, 54, 190, 191, 211, 198, 189, 164, 62, 61, 62, 151, 42, 100, 190, 198, 127, 227, 61, 178, 232, 18, 190, 26, 118, 68, 189, 183, 21, 28, 191, 144, 117, 166, 190, 131, 200, 224, 189, 212, 58, 150, 190, 239, 219, 110, 189, 24, 167, 188, 190, 198, 65, 129, 62, 165, 62, 189, 190, 86, 133, 55, 62, 56, 42, 46, 190, 160, 249, 174, 188, 237, 12, 238, 60, 136, 0, 18, 188, 8, 212, 28, 190, 19, 123, 46, 190, 217, 104, 188, 189, 197, 153, 11, 62, 25, 172, 43, 61, 189, 131, 139, 60, 14, 21, 223, 189, 210, 49, 9, 62, 116, 6, 101, 60, 78, 120, 181, 61, 118, 118, 31, 61, 43, 26, 158, 61, 151, 12, 192, 61, 56, 153, 157, 189, 164, 208, 15, 189, 252, 116, 201, 189, 244, 158, 128, 61, 127, 143, 88, 190, 44, 14, 92, 61, 187, 250, 127, 188, 213, 132, 83, 62, 23, 60, 31, 190, 236, 214, 125, 189, 124, 247, 200, 61, 253, 118, 106, 189, 109, 82, 147, 188, 46, 172, 6, 190, 185, 109, 58, 190, 181, 82, 201, 189, 84, 54, 51, 188, 66, 245, 247, 189, 218, 185, 127, 189, 241, 85, 69, 190, 250, 48, 134, 60, 221, 124, 158, 60, 134, 168, 8, 186, 191, 89, 31, 62, 158, 165, 252, 189, 193, 27, 179, 60, 229, 168, 4, 62, 198, 84, 217, 61, 135, 242, 42, 61, 71, 236, 46, 190, 25, 30, 66, 190, 101, 124, 240, 61, 90, 75, 122, 189, 183, 205, 178, 61, 155, 128, 193, 189, 197, 151, 38, 190, 129, 172, 29, 190, 159, 184, 9, 62, 41, 155, 57, 61, 132, 68, 127, 61, 9, 27, 6, 190, 155, 125, 195, 189, 23, 242, 41, 61, 197, 119, 154, 189, 61, 35, 72, 190, 133, 33, 82, 190, 167, 155, 117, 188, 6, 33, 50, 190, 0, 133, 232, 189, 197, 30, 93, 189, 129, 45, 201, 189, 226, 187, 246, 61, 251, 245, 3, 61, 164, 206, 48, 190, 212, 241, 108, 60, 209, 35, 47, 62, 131, 4, 32, 190, 129, 250, 40, 62, 151, 21, 43, 190, 20, 229, 206, 189, 126, 32, 3, 190, 145, 205, 241, 189, 2, 159, 3, 62, 159, 76, 200, 61, 81, 5, 195, 61, 49, 58, 184, 189, 21, 177, 153, 189, 202, 153, 28, 190, 205, 212, 1, 61, 75, 153, 147, 189, 136, 233, 1, 187, 188, 36, 169, 189, 52, 189, 5, 189, 68, 248, 88, 189, 74, 218, 29, 189, 113, 177, 48, 187, 224, 8, 113, 189, 9, 61, 17, 190, 151, 78, 29, 190, 37, 84, 236, 189, 11, 114, 26, 189, 234, 96, 130, 189, 157, 241, 109, 61, 110, 179, 8, 62, 73, 84, 186, 187, 222, 227, 130, 62, 15, 113, 229, 60, 147, 40, 150, 189, 14, 9, 181, 190, 246, 75, 4, 62, 163, 181, 107, 62, 128, 157, 82, 190, 114, 82, 95, 190, 158, 28, 221, 190, 238, 84, 109, 62, 176, 6, 12, 190, 173, 96, 12, 62, 5, 226, 236, 189, 134, 223, 17, 190, 243, 204, 21, 190, 103, 138, 46, 191, 39, 246, 108, 188, 12, 147, 252, 189, 122, 122, 130, 62, 151, 128, 183, 189, 240, 99, 117, 190, 192, 167, 146, 62, 104, 105, 144, 190, 216, 230, 96, 62, 86, 50, 145, 62, 197, 82, 72, 189, 114, 17, 157, 189, 229, 32, 26, 62, 152, 161, 233, 189, 173, 74, 21, 190, 96, 217, 1, 190, 71, 190, 162, 61, 150, 198, 68, 190, 22, 219, 119, 61, 153, 129, 129, 61, 122, 66, 253, 189, 204, 4, 35, 62, 175, 222, 10, 190, 92, 251, 136, 61, 43, 134, 190, 61, 249, 79, 87, 190, 65, 82, 233, 189, 200, 220, 17, 62, 73, 96, 229, 189, 203, 46, 167, 189, 152, 96, 163, 189, 124, 48, 123, 62, 239, 45, 95, 62, 11, 54, 78, 60, 204, 86, 46, 62, 253, 180, 96, 190, 28, 227, 176, 189, 247, 95, 141, 61, 190, 181, 242, 61, 98, 52, 92, 62, 93, 121, 0, 191, 252, 195, 230, 188, 35, 226, 6, 188, 194, 174, 218, 190, 244, 30, 251, 59, 59, 183, 123, 190, 7, 175, 5, 189, 105, 238, 49, 188, 86, 215, 220, 189, 40, 245, 9, 61, 58, 8, 163, 189, 128, 60, 5, 62, 255, 170, 2, 60, 171, 138, 179, 62, 254, 206, 68, 60, 36, 85, 227, 189, 186, 236, 116, 60, 221, 155, 90, 190, 224, 211, 4, 191, 73, 181, 124, 62, 65, 116, 167, 188, 41, 37, 95, 189, 206, 164, 30, 62, 44, 182, 219, 61, 105, 77, 151, 62, 127, 113, 33, 190, 144, 170, 84, 62, 5, 251, 143, 62, 202, 130, 57, 60, 24, 56, 171, 61, 241, 185, 212, 60, 181, 196, 179, 62, 160, 171, 58, 190, 212, 238, 121, 62, 127, 179, 141, 62, 179, 3, 225, 190, 68, 61, 247, 61, 134, 215, 246, 188, 105, 12, 81, 189, 223, 85, 111, 61, 137, 211, 244, 189, 99, 243, 217, 189, 219, 141, 177, 61, 218, 255, 27, 190, 87, 24, 139, 188, 2, 10, 81, 61, 213, 126, 128, 61, 181, 97, 192, 189, 13, 231, 136, 62, 123, 21, 123, 190, 119, 193, 202, 190, 223, 87, 131, 62, 230, 42, 27, 190, 115, 126, 99, 190, 241, 80, 119, 62, 169, 11, 34, 61, 161, 47, 142, 61, 50, 60, 205, 189, 225, 254, 37, 62, 242, 210, 243, 61, 254, 0, 33, 61, 234, 160, 130, 62, 230, 190, 152, 186, 108, 166, 216, 62, 108, 205, 146, 190, 191, 127, 149, 62, 24, 95, 31, 62, 86, 150, 244, 189, 156, 225, 190, 189, 0, 196, 244, 61, 67, 93, 18, 62, 246, 226, 215, 189, 182, 191, 215, 188, 253, 239, 46, 60, 148, 155, 26, 190, 8, 147, 12, 190, 15, 195, 251, 60, 209, 163, 145, 188, 203, 2, 66, 189, 81, 116, 251, 61, 202, 192, 245, 189, 176, 225, 234, 189, 4, 132, 234, 59, 101, 225, 157, 61, 229, 102, 246, 189, 85, 122, 11, 190, 203, 152, 122, 187, 6, 191, 163, 61, 50, 17, 136, 189, 246, 142, 244, 189, 168, 159, 18, 62, 115, 56, 186, 189, 46, 218, 44, 190, 30, 224, 1, 190, 239, 86, 171, 189, 80, 167, 195, 188, 224, 196, 1, 190, 198, 205, 214, 189, 3, 124, 168, 60, 36, 130, 251, 190, 172, 131, 197, 61, 44, 57, 110, 190, 8, 174, 1, 60, 91, 207, 143, 62, 178, 125, 139, 61, 60, 64, 183, 190, 41, 30, 44, 62, 114, 15, 27, 190, 7, 73, 88, 190, 142, 49, 72, 62, 232, 139, 133, 62, 203, 238, 74, 61, 249, 59, 159, 61, 219, 32, 69, 190, 209, 192, 238, 190, 79, 176, 136, 62, 19, 236, 33, 189, 128, 60, 97, 190, 81, 19, 30, 62, 35, 95, 166, 61, 226, 41, 148, 62, 251, 196, 32, 62, 43, 65, 47, 61, 194, 5, 4, 62, 85, 53, 20, 189, 237, 43, 162, 61, 130, 229, 155, 61, 208, 59, 147, 62, 82, 47, 217, 190, 168, 37, 28, 63, 93, 29, 198, 62, 105, 240, 183, 62, 74, 100, 208, 60, 172, 163, 230, 62, 77, 247, 49, 190, 172, 196, 230, 189, 53, 159, 47, 62, 246, 23, 78, 62, 83, 123, 85, 60, 204, 244, 77, 61, 62, 113, 209, 189, 246, 239, 206, 190, 214, 10, 123, 189, 46, 217, 51, 62, 103, 194, 87, 190, 237, 26, 111, 62, 30, 242, 131, 62, 74, 83, 89, 190, 85, 31, 253, 61, 161, 90, 252, 62, 159, 121, 43, 190, 52, 217, 91, 188, 108, 28, 49, 61, 79, 197, 129, 62, 229, 97, 188, 190, 9, 93, 147, 190, 20, 168, 70, 60, 114, 192, 164, 190, 183, 24, 253, 189, 104, 191, 241, 190, 3, 158, 144, 62, 217, 78, 157, 190, 244, 209, 179, 189, 208, 184, 232, 189, 86, 194, 88, 61, 234, 65, 243, 189, 224, 222, 15, 190, 155, 192, 184, 60, 50, 192, 16, 61, 5, 41, 146, 188, 51, 247, 93, 189, 247, 33, 2, 189, 152, 11, 213, 189, 145, 213, 51, 189, 195, 135, 47, 189, 253, 18, 119, 189, 71, 17, 51, 190, 248, 220, 32, 61, 89, 130, 156, 188, 23, 46, 150, 189, 78, 151, 230, 60, 135, 136, 13, 61, 59, 237, 13, 190, 189, 253, 221, 61, 240, 237, 164, 189, 25, 242, 200, 189, 250, 156, 197, 189, 202, 166, 231, 60, 74, 249, 181, 61, 167, 43, 11, 189, 30, 168, 134, 189, 248, 35, 17, 62, 14, 239, 32, 189, 138, 74, 169, 61, 11, 101, 45, 190, 11, 135, 7, 190, 22, 223, 49, 61, 128, 106, 253, 61, 53, 56, 13, 61, 235, 115, 1, 190, 219, 211, 3, 62, 174, 72, 81, 62, 55, 145, 20, 62, 52, 54, 164, 61, 20, 241, 60, 190, 211, 136, 6, 190, 174, 248, 132, 61, 61, 166, 91, 188, 198, 79, 90, 61, 132, 216, 110, 188, 20, 230, 179, 61, 183, 225, 76, 61, 180, 33, 46, 189, 128, 126, 102, 61, 172, 89, 21, 62, 77, 91, 174, 61, 31, 79, 218, 188, 239, 138, 0, 190, 42, 94, 115, 190, 130, 41, 55, 190, 48, 9, 40, 62, 141, 220, 195, 60, 196, 29, 191, 189, 28, 45, 154, 189, 129, 197, 129, 62, 67, 249, 198, 190, 186, 151, 105, 62, 44, 47, 208, 189, 215, 2, 194, 190, 245, 203, 248, 189, 137, 42, 162, 62, 44, 140, 186, 189, 68, 215, 147, 62, 1, 194, 38, 61, 237, 9, 104, 62, 218, 95, 161, 188, 209, 148, 100, 191, 214, 69, 68, 191, 20, 72, 53, 190, 230, 71, 159, 62, 139, 228, 248, 190, 225, 247, 39, 62, 124, 217, 166, 190, 138, 34, 5, 61, 197, 145, 21, 190, 194, 172, 172, 190, 80, 24, 232, 190, 128, 23, 203, 190, 4, 67, 8, 62, 67, 125, 41, 62, 160, 145, 50, 190, 59, 55, 94, 189, 152, 156, 162, 189, 98, 224, 18, 191, 68, 88, 67, 61, 204, 168, 205, 61, 45, 160, 41, 190, 184, 48, 74, 61, 196, 70, 118, 62, 97, 37, 170, 62, 110, 120, 174, 60, 171, 205, 17, 62, 64, 200, 80, 190, 16, 32, 13, 190, 128, 247, 132, 190, 47, 148, 126, 62, 78, 227, 203, 187, 87, 54, 35, 62, 178, 4, 188, 190, 16, 125, 202, 190, 7, 33, 246, 189, 133, 215, 161, 190, 129, 174, 175, 190, 239, 248, 129, 62, 104, 174, 131, 62, 76, 12, 64, 190, 2, 4, 200, 60, 81, 128, 161, 62, 230, 51, 247, 189, 54, 198, 222, 61, 197, 48, 190, 189, 29, 228, 166, 61, 37, 82, 237, 190, 190, 80, 165, 189, 170, 43, 8, 62, 19, 215, 182, 189, 48, 42, 196, 190, 70, 215, 200, 190, 119, 2, 6, 63, 19, 13, 84, 189, 117, 230, 239, 61, 36, 96, 40, 189, 73, 170, 114, 190, 13, 41, 171, 62, 209, 117, 51, 60, 76, 211, 8, 62, 60, 254, 91, 62, 48, 128, 69, 62, 188, 39, 95, 190, 168, 173, 172, 61, 36, 196, 56, 58, 139, 189, 20, 191, 34, 116, 200, 189, 181, 207, 89, 62, 59, 232, 168, 190, 245, 13, 130, 62, 118, 190, 43, 62, 78, 99, 189, 190, 163, 103, 29, 190, 168, 221, 4, 59, 118, 192, 23, 189, 133, 110, 230, 190, 28, 118, 224, 61, 241, 25, 123, 62, 58, 87, 11, 191, 94, 116, 86, 190, 74, 32, 83, 61, 96, 3, 80, 191, 234, 107, 93, 62, 24, 25, 58, 191, 26, 17, 146, 62, 233, 241, 173, 190, 85, 157, 56, 189, 204, 23, 211, 60, 243, 165, 205, 188, 135, 175, 29, 62, 133, 186, 186, 61, 77, 242, 138, 187, 160, 101, 20, 62, 88, 126, 42, 61, 21, 52, 198, 187, 84, 183, 10, 190, 254, 64, 234, 61, 111, 98, 225, 61, 172, 201, 51, 190, 97, 213, 169, 189, 220, 69, 134, 189, 233, 126, 152, 61, 28, 203, 237, 189, 132, 176, 28, 62, 173, 132, 56, 60, 197, 58, 6, 62, 105, 197, 240, 61, 250, 80, 254, 189, 66, 58, 3, 189, 181, 240, 42, 188, 74, 71, 3, 190, 21, 186, 7, 62, 172, 50, 44, 189, 165, 86, 51, 190, 33, 153, 41, 190, 228, 160, 216, 189, 175, 186, 198, 188, 118, 50, 243, 61, 142, 1, 196, 188, 108, 186, 162, 61, 64, 213, 132, 61, 58, 83, 194, 61, 146, 70, 17, 190, 249, 24, 109, 189, 207, 156, 211, 61, 168, 144, 64, 189, 139, 101, 56, 61, 154, 223, 206, 60, 223, 201, 40, 62, 17, 158, 211, 189, 123, 119, 214, 59, 112, 231, 63, 61, 64, 89, 145, 61, 243, 122, 162, 189, 115, 42, 27, 190, 38, 197, 214, 189, 241, 190, 103, 189, 93, 210, 17, 62, 175, 200, 47, 190, 145, 187, 36, 190, 54, 132, 24, 190, 43, 107, 220, 189, 90, 51, 196, 189, 96, 139, 62, 189, 3, 144, 24, 190, 253, 195, 32, 190, 194, 224, 184, 189, 228, 22, 228, 189, 131, 97, 233, 189, 205, 230, 83, 189, 27, 196, 208, 189, 207, 110, 150, 190, 121, 212, 179, 189, 84, 249, 24, 62, 18, 119, 51, 62, 138, 127, 25, 190, 47, 164, 157, 61, 119, 239, 102, 62, 67, 127, 15, 62, 223, 234, 12, 190, 173, 57, 16, 59, 105, 98, 49, 191, 38, 216, 234, 189, 65, 227, 138, 189, 220, 236, 165, 188, 67, 165, 207, 190, 198, 7, 41, 62, 0, 159, 255, 190, 94, 28, 182, 61, 108, 246, 98, 62, 203, 13, 68, 189, 163, 242, 45, 188, 152, 115, 200, 189, 205, 157, 91, 62, 4, 123, 15, 190, 170, 190, 210, 190, 35, 35, 209, 60, 230, 93, 35, 191, 51, 20, 167, 60, 140, 60, 10, 191, 95, 161, 139, 62, 54, 182, 132, 190, 97, 132, 120, 62, 97, 109, 21, 190, 64, 153, 3, 186, 241, 230, 66, 62, 97, 62, 169, 62, 108, 69, 223, 189, 22, 48, 209, 61, 84, 14, 136, 62, 219, 83, 41, 62, 172, 150, 107, 189, 54, 110, 232, 190, 164, 95, 55, 191, 209, 78, 29, 190, 177, 32, 211, 189, 248, 27, 92, 190, 137, 29, 155, 189, 75, 30, 148, 62, 189, 200, 144, 190, 73, 244, 138, 189, 10, 215, 152, 62, 89, 32, 230, 189, 208, 50, 127, 189, 158, 170, 206, 61, 70, 193, 24, 62, 68, 186, 239, 190, 196, 193, 126, 190, 137, 102, 57, 61, 135, 172, 44, 191, 191, 136, 180, 61, 97, 115, 26, 191, 191, 45, 153, 62, 122, 7, 49, 190, 76, 9, 207, 60, 67, 28, 131, 62, 248, 136, 218, 189, 147, 84, 229, 189, 60, 9, 132, 61, 157, 205, 218, 190, 85, 254, 11, 61, 131, 209, 198, 187, 19, 185, 197, 61, 85, 43, 187, 61, 253, 159, 5, 62, 100, 255, 137, 60, 131, 99, 109, 190, 139, 248, 52, 62, 73, 15, 66, 62, 3, 201, 172, 62, 49, 191, 245, 188, 0, 238, 234, 61, 108, 10, 32, 190, 226, 44, 157, 62, 212, 101, 198, 61, 81, 96, 141, 60, 69, 224, 76, 188, 187, 249, 40, 61, 47, 217, 1, 62, 148, 107, 174, 189, 39, 200, 237, 189, 64, 194, 117, 60, 40, 10, 151, 190, 75, 133, 191, 61, 198, 83, 189, 190, 25, 21, 125, 60, 122, 158, 41, 60, 154, 45, 12, 190, 195, 133, 16, 190, 120, 187, 128, 189, 37, 204, 253, 61, 145, 13, 44, 62, 144, 64, 17, 190, 2, 124, 22, 190, 164, 86, 233, 189, 137, 188, 32, 190, 213, 103, 8, 62, 85, 235, 241, 187, 179, 65, 232, 189, 158, 78, 215, 189, 164, 121, 120, 188, 233, 96, 163, 61, 92, 97, 235, 61, 179, 153, 0, 190, 110, 209, 229, 189, 24, 81, 22, 190, 63, 183, 64, 62, 241, 175, 30, 189, 110, 150, 9, 190, 157, 82, 54, 190, 221, 55, 219, 189, 22, 10, 214, 61, 140, 251, 71, 60, 205, 117, 1, 190, 138, 142, 165, 186, 225, 122, 153, 189, 70, 212, 64, 61, 84, 42, 148, 188, 239, 249, 180, 61, 29, 112, 169, 190, 193, 23, 181, 187, 244, 249, 131, 190, 180, 150, 245, 61, 63, 10, 57, 61, 207, 10, 149, 61, 180, 248, 142, 190, 195, 238, 100, 62, 149, 128, 191, 59, 100, 90, 247, 61, 13, 6, 11, 62, 89, 132, 68, 62, 144, 49, 179, 61, 6, 129, 68, 61, 188, 113, 222, 190, 19, 8, 179, 190, 203, 32, 184, 61, 115, 235, 172, 61, 42, 105, 90, 190, 27, 135, 32, 62, 36, 95, 2, 62, 201, 39, 164, 62, 99, 229, 57, 189, 213, 32, 67, 62, 22, 39, 143, 62, 232, 49, 46, 190, 142, 109, 128, 60, 151, 251, 32, 62, 2, 239, 218, 62, 230, 176, 156, 189, 37, 127, 30, 62, 47, 182, 132, 62, 207, 39, 71, 189, 246, 79, 10, 189, 20, 203, 87, 190, 198, 242, 226, 61, 48, 107, 190, 190, 46, 149, 44, 189, 85, 140, 167, 61, 209, 106, 182, 62, 71, 215, 241, 189, 6, 245, 84, 190, 3, 76, 200, 190, 87, 8, 56, 62, 135, 5, 31, 189, 237, 184, 141, 61, 209, 219, 230, 61, 197, 194, 184, 190, 62, 183, 79, 189, 160, 188, 8, 62, 47, 160, 66, 190, 131, 218, 137, 62, 230, 111, 83, 190, 31, 109, 140, 61, 226, 120, 136, 61, 138, 114, 38, 62, 199, 10, 65, 62, 215, 104, 202, 190, 185, 163, 179, 61, 169, 87, 50, 191, 175, 12, 117, 62, 189, 174, 87, 190, 136, 102, 220, 189, 225, 141, 58, 62, 156, 114, 116, 62, 104, 73, 138, 61, 172, 169, 177, 62, 22, 11, 172, 189, 215, 58, 250, 189, 112, 213, 184, 62, 176, 178, 0, 62, 214, 184, 142, 189, 221, 82, 254, 188, 246, 226, 11, 60, 241, 201, 44, 191, 247, 235, 68, 190, 116, 203, 212, 61, 82, 221, 79, 189, 65, 42, 212, 62, 5, 187, 239, 62, 49, 88, 190, 190, 118, 121, 198, 188, 182, 34, 212, 62, 170, 110, 80, 190, 228, 183, 156, 190, 211, 164, 191, 61, 141, 166, 181, 62, 178, 22, 71, 191, 208, 11, 244, 190, 89, 76, 148, 187, 163, 115, 1, 191, 193, 200, 226, 188, 46, 10, 34, 191, 102, 52, 126, 62, 180, 105, 136, 190, 75, 63, 129, 61, 192, 230, 194, 61, 8, 230, 248, 189, 41, 23, 62, 189, 45, 94, 16, 63, 170, 198, 198, 61, 131, 193, 177, 61, 175, 233, 19, 62, 173, 35, 15, 61, 74, 55, 236, 189, 75, 217, 234, 189, 76, 26, 137, 62, 255, 88, 153, 189, 30, 174, 197, 62, 136, 63, 152, 190, 220, 254, 42, 190, 143, 167, 54, 62, 149, 70, 23, 62, 182, 112, 239, 189, 153, 99, 146, 62, 148, 231, 174, 190, 188, 171, 78, 188, 255, 35, 122, 191, 194, 172, 61, 62, 255, 148, 199, 190, 68, 168, 35, 61, 32, 245, 144, 189, 51, 177, 0, 191, 6, 235, 18, 62, 212, 181, 11, 191, 19, 203, 200, 61, 146, 9, 59, 190, 174, 236, 242, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 147, 89, 61, 211, 223, 160, 61, 175, 30, 132, 61, 136, 252, 136, 62, 84, 181, 160, 62, 234, 167, 4, 190, 25, 225, 62, 62, 96, 55, 46, 190, 98, 5, 29, 190, 206, 31, 173, 189, 57, 216, 129, 62, 108, 171, 12, 190, 77, 142, 178, 61, 112, 171, 143, 62, 161, 60, 193, 189, 205, 134, 12, 62, 101, 36, 128, 189, 225, 8, 234, 189, 217, 179, 145, 62, 49, 171, 141, 61, 227, 8, 81, 188, 171, 82, 60, 62, 139, 109, 56, 190, 31, 77, 18, 190, 134, 56, 90, 62, 213, 163, 177, 61, 20, 96, 33, 190, 236, 169, 48, 62, 111, 60, 104, 61, 52, 213, 2, 190, 180, 225, 82, 62, 99, 151, 79, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 122, 253, 189, 192, 49, 63, 190, 161, 150, 136, 190, 136, 12, 52, 63, 231, 212, 106, 189, 46, 133, 247, 62, 221, 242, 226, 62, 168, 238, 248, 61, 225, 244, 3, 62, 137, 38, 104, 189, 247, 233, 235, 190, 151, 199, 98, 190, 96, 191, 6, 191, 97, 13, 203, 190, 167, 125, 13, 190, 21, 241, 70, 191, 89, 95, 35, 63, 182, 56, 38, 190, 0, 218, 210, 61, 133, 190, 118, 63, 130, 53, 253, 62, 27, 33, 79, 63, 70, 139, 9, 62, 105, 162, 3, 60, 93, 196, 139, 62, 10, 230, 45, 63, 184, 132, 159, 190, 9, 44, 107, 61, 79, 162, 204, 190, 222, 72, 183, 190, 220, 95, 101, 63, 48, 51, 8, 191, 10, 52, 222, 190, 7, 70, 29, 60, 179, 83, 32, 62, 13, 192, 46, 62, 255, 116, 174, 190, 126, 154, 44, 61, 233, 211, 236, 188, 7, 21, 151, 61, 140, 65, 206, 61, 186, 12, 43, 62, 141, 223, 138, 189, 49, 166, 15, 190, 21, 206, 45, 62, 172, 41, 2, 189, 161, 211, 35, 61, 201, 68, 87, 189, 12, 131, 83, 62, 121, 93, 155, 60, 220, 170, 120, 190, 170, 92, 50, 62, 97, 56, 57, 188, 40, 170, 73, 189, 214, 226, 224, 187, 171, 69, 33, 61, 15, 228, 139, 190, 204, 10, 4, 190, 0, 203, 176, 61, 103, 111, 252, 61, 6, 67, 25, 188, 219, 154, 164, 62, 157, 77, 55, 62, 55, 221, 4, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 219, 31, 190, 185, 200, 153, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {4, 11, 110, 191, 30, 174, 189, 191, 59, 11, 14, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {8, 14, 46, 192, 12, 164, 78, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0034/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}