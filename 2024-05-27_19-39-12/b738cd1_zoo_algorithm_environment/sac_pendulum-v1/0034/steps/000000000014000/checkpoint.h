// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {211, 17, 164, 62, 1, 227, 251, 190, 247, 2, 44, 191, 32, 132, 209, 61, 149, 61, 183, 61, 90, 190, 87, 62, 46, 86, 62, 63, 36, 200, 99, 191, 130, 1, 71, 190, 162, 226, 83, 191, 16, 189, 20, 63, 177, 93, 153, 189, 170, 104, 75, 191, 216, 59, 184, 190, 158, 95, 1, 60, 63, 20, 6, 191, 13, 88, 81, 63, 75, 230, 196, 61, 209, 10, 249, 190, 243, 16, 181, 190, 215, 64, 37, 63, 241, 172, 115, 61, 120, 76, 102, 63, 201, 154, 64, 190, 122, 98, 53, 62, 246, 208, 147, 62, 177, 198, 179, 59, 187, 205, 7, 190, 135, 123, 130, 63, 201, 84, 183, 62, 63, 99, 9, 190, 69, 200, 172, 191, 253, 253, 149, 190, 145, 140, 154, 62, 90, 78, 218, 190, 240, 244, 248, 62, 136, 210, 143, 190, 4, 94, 101, 63, 58, 73, 211, 61, 129, 130, 173, 62, 142, 69, 43, 63, 239, 153, 252, 62, 141, 35, 64, 190, 162, 131, 123, 62, 20, 239, 27, 191, 171, 15, 53, 63, 90, 15, 164, 191, 88, 229, 227, 190, 234, 170, 54, 191, 142, 67, 158, 191, 153, 74, 148, 190, 74, 62, 225, 61, 112, 49, 148, 60, 248, 12, 47, 189, 144, 106, 43, 63, 23, 139, 97, 191, 230, 211, 240, 190, 23, 147, 99, 63, 225, 190, 151, 63, 116, 219, 128, 62, 146, 111, 35, 59, 27, 253, 135, 191, 17, 114, 230, 190, 191, 175, 54, 191, 156, 172, 235, 62, 248, 110, 204, 190, 146, 249, 1, 191, 25, 84, 60, 190, 35, 63, 132, 62, 169, 113, 54, 63, 13, 53, 82, 63, 244, 220, 107, 62, 78, 58, 188, 188, 5, 209, 14, 191, 233, 5, 222, 61, 165, 145, 117, 190, 206, 64, 139, 191, 231, 217, 82, 190, 183, 63, 131, 189, 165, 35, 180, 191, 74, 31, 58, 191, 25, 149, 138, 191, 208, 197, 172, 190, 100, 132, 213, 189, 211, 91, 252, 189, 33, 193, 5, 63, 46, 244, 4, 191, 126, 177, 17, 190, 101, 157, 63, 191, 84, 199, 208, 62, 126, 227, 186, 188, 113, 7, 75, 191, 252, 155, 36, 62, 121, 115, 6, 63, 137, 142, 167, 187, 107, 139, 227, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {107, 252, 83, 191, 239, 215, 143, 189, 218, 223, 95, 188, 68, 114, 146, 190, 20, 204, 193, 189, 47, 144, 23, 61, 193, 223, 151, 61, 151, 94, 180, 62, 179, 107, 193, 190, 109, 186, 143, 190, 225, 74, 220, 189, 68, 60, 34, 62, 2, 215, 84, 62, 141, 212, 60, 190, 234, 93, 11, 191, 33, 154, 86, 190, 107, 101, 32, 62, 226, 102, 199, 190, 1, 232, 63, 189, 155, 28, 69, 62, 133, 37, 83, 62, 225, 39, 44, 189, 21, 15, 25, 63, 44, 83, 128, 190, 187, 180, 26, 190, 111, 154, 175, 62, 112, 11, 26, 190, 202, 139, 166, 61, 108, 235, 209, 189, 124, 182, 166, 62, 2, 186, 157, 190, 192, 135, 56, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {54, 213, 133, 189, 32, 116, 14, 190, 117, 109, 132, 62, 127, 152, 77, 62, 114, 39, 146, 190, 60, 5, 204, 61, 19, 22, 52, 189, 66, 174, 109, 62, 119, 93, 239, 189, 23, 48, 6, 190, 32, 173, 164, 191, 108, 43, 114, 61, 16, 240, 223, 61, 38, 100, 14, 189, 152, 83, 6, 62, 190, 97, 172, 190, 72, 242, 228, 190, 44, 207, 37, 62, 133, 205, 109, 62, 203, 247, 44, 62, 210, 254, 138, 190, 189, 188, 203, 61, 255, 101, 225, 60, 169, 246, 172, 189, 202, 250, 175, 189, 108, 3, 18, 191, 20, 210, 140, 190, 73, 12, 132, 190, 232, 5, 161, 62, 28, 235, 225, 60, 33, 167, 240, 189, 33, 189, 151, 62, 176, 241, 231, 189, 32, 240, 191, 189, 113, 157, 155, 189, 185, 225, 172, 189, 254, 252, 81, 62, 27, 111, 248, 61, 189, 68, 254, 190, 209, 146, 205, 61, 138, 129, 207, 60, 188, 154, 221, 61, 157, 239, 221, 190, 171, 113, 94, 59, 106, 70, 76, 61, 97, 29, 163, 62, 13, 111, 53, 59, 66, 136, 5, 191, 90, 82, 21, 189, 180, 154, 33, 62, 245, 26, 135, 190, 178, 97, 81, 62, 217, 82, 66, 190, 190, 69, 56, 62, 105, 123, 209, 185, 95, 50, 173, 62, 85, 213, 101, 62, 60, 43, 148, 190, 56, 147, 134, 61, 15, 195, 142, 190, 134, 87, 102, 62, 231, 31, 188, 190, 72, 200, 191, 189, 109, 229, 19, 62, 195, 240, 127, 189, 226, 72, 0, 190, 235, 90, 197, 189, 17, 240, 149, 62, 46, 232, 53, 61, 88, 48, 220, 189, 175, 0, 203, 61, 32, 231, 68, 62, 124, 68, 10, 189, 67, 75, 86, 58, 170, 196, 10, 63, 18, 102, 226, 61, 111, 230, 197, 189, 248, 149, 132, 189, 159, 75, 128, 61, 75, 132, 99, 62, 63, 234, 186, 62, 34, 219, 14, 189, 241, 118, 187, 188, 136, 85, 81, 190, 142, 78, 153, 61, 178, 132, 57, 191, 198, 95, 193, 61, 79, 100, 234, 61, 238, 152, 138, 62, 31, 227, 156, 190, 132, 55, 172, 190, 159, 28, 159, 190, 223, 52, 61, 62, 143, 14, 138, 62, 7, 17, 214, 61, 4, 92, 8, 190, 108, 171, 12, 191, 130, 32, 99, 190, 110, 12, 139, 191, 48, 163, 132, 62, 172, 133, 103, 191, 159, 187, 218, 62, 222, 156, 172, 188, 127, 123, 220, 62, 167, 171, 124, 60, 165, 212, 155, 189, 228, 59, 56, 191, 41, 115, 77, 190, 250, 110, 240, 62, 62, 29, 172, 61, 164, 222, 137, 189, 41, 60, 115, 191, 177, 193, 169, 189, 247, 59, 12, 189, 52, 131, 99, 191, 119, 185, 74, 62, 16, 217, 248, 190, 248, 237, 101, 62, 210, 26, 127, 190, 33, 3, 33, 62, 147, 192, 239, 190, 7, 58, 209, 190, 249, 171, 217, 190, 37, 244, 75, 62, 179, 160, 150, 62, 153, 96, 84, 189, 186, 113, 246, 190, 214, 110, 2, 62, 84, 168, 116, 190, 105, 242, 79, 188, 4, 1, 52, 62, 122, 98, 122, 62, 199, 58, 130, 189, 35, 47, 119, 61, 25, 46, 228, 58, 243, 41, 168, 62, 197, 173, 150, 61, 100, 95, 44, 190, 76, 98, 86, 190, 150, 148, 221, 61, 235, 75, 176, 59, 201, 182, 188, 189, 106, 14, 6, 62, 178, 107, 137, 190, 8, 210, 157, 59, 69, 175, 200, 61, 76, 180, 54, 62, 245, 15, 28, 62, 104, 156, 243, 60, 131, 138, 47, 62, 83, 215, 170, 61, 28, 52, 245, 188, 106, 22, 9, 62, 40, 174, 16, 62, 175, 93, 47, 62, 223, 90, 89, 190, 42, 230, 132, 60, 164, 141, 77, 62, 84, 236, 40, 62, 70, 150, 77, 62, 180, 213, 92, 188, 72, 50, 105, 190, 244, 253, 143, 189, 230, 83, 59, 61, 112, 16, 9, 62, 82, 0, 199, 60, 35, 233, 64, 190, 84, 108, 169, 61, 85, 129, 193, 188, 193, 154, 38, 191, 235, 25, 55, 61, 235, 55, 88, 62, 123, 135, 33, 62, 84, 102, 221, 189, 46, 76, 44, 62, 200, 233, 68, 190, 82, 80, 151, 61, 232, 255, 40, 189, 56, 119, 42, 190, 106, 156, 132, 190, 154, 191, 23, 61, 24, 172, 101, 62, 73, 209, 139, 59, 206, 237, 34, 191, 26, 46, 88, 63, 122, 148, 50, 190, 49, 21, 19, 62, 214, 140, 34, 62, 125, 61, 198, 62, 75, 66, 9, 190, 250, 88, 109, 63, 151, 196, 163, 61, 67, 85, 174, 62, 14, 255, 130, 190, 67, 46, 240, 61, 12, 186, 153, 190, 67, 131, 157, 62, 103, 56, 1, 190, 117, 47, 73, 62, 44, 140, 217, 188, 69, 229, 247, 60, 140, 161, 76, 190, 250, 149, 9, 191, 194, 168, 229, 61, 190, 124, 240, 189, 72, 140, 118, 190, 104, 210, 151, 62, 117, 28, 240, 62, 140, 220, 186, 190, 191, 211, 198, 189, 11, 249, 105, 62, 13, 133, 172, 190, 154, 152, 241, 61, 174, 14, 214, 189, 25, 8, 42, 187, 232, 141, 88, 191, 163, 6, 143, 190, 107, 88, 158, 189, 4, 40, 161, 190, 173, 173, 78, 60, 90, 138, 146, 190, 9, 2, 132, 62, 126, 159, 175, 190, 19, 175, 49, 62, 56, 42, 46, 190, 135, 164, 22, 189, 237, 12, 238, 60, 136, 0, 18, 188, 173, 117, 34, 190, 74, 42, 48, 190, 100, 141, 240, 189, 197, 153, 11, 62, 25, 172, 43, 61, 208, 103, 73, 59, 14, 21, 223, 189, 61, 115, 231, 61, 251, 248, 81, 60, 196, 121, 138, 61, 118, 118, 31, 61, 43, 26, 158, 61, 151, 12, 192, 61, 56, 153, 157, 189, 164, 208, 15, 189, 235, 113, 216, 189, 244, 158, 128, 61, 127, 143, 88, 190, 19, 21, 6, 61, 159, 206, 161, 188, 59, 156, 71, 62, 23, 60, 31, 190, 236, 214, 125, 189, 100, 176, 196, 61, 253, 118, 106, 189, 159, 36, 65, 189, 3, 229, 22, 190, 161, 234, 58, 190, 181, 82, 201, 189, 84, 54, 51, 188, 66, 245, 247, 189, 218, 185, 127, 189, 241, 85, 69, 190, 250, 48, 134, 60, 221, 124, 158, 60, 134, 168, 8, 186, 191, 89, 31, 62, 158, 165, 252, 189, 193, 27, 179, 60, 229, 168, 4, 62, 198, 84, 217, 61, 135, 242, 42, 61, 71, 236, 46, 190, 25, 30, 66, 190, 101, 124, 240, 61, 90, 75, 122, 189, 183, 205, 178, 61, 155, 128, 193, 189, 197, 151, 38, 190, 129, 172, 29, 190, 159, 184, 9, 62, 41, 155, 57, 61, 132, 68, 127, 61, 9, 27, 6, 190, 155, 125, 195, 189, 23, 242, 41, 61, 197, 119, 154, 189, 61, 35, 72, 190, 133, 33, 82, 190, 167, 155, 117, 188, 6, 33, 50, 190, 0, 133, 232, 189, 197, 30, 93, 189, 129, 45, 201, 189, 226, 187, 246, 61, 251, 245, 3, 61, 164, 206, 48, 190, 212, 241, 108, 60, 209, 35, 47, 62, 131, 4, 32, 190, 129, 250, 40, 62, 151, 21, 43, 190, 20, 229, 206, 189, 126, 32, 3, 190, 145, 205, 241, 189, 2, 159, 3, 62, 159, 76, 200, 61, 81, 5, 195, 61, 49, 58, 184, 189, 21, 177, 153, 189, 202, 153, 28, 190, 205, 212, 1, 61, 75, 153, 147, 189, 136, 233, 1, 187, 188, 36, 169, 189, 52, 189, 5, 189, 68, 248, 88, 189, 74, 218, 29, 189, 113, 177, 48, 187, 224, 8, 113, 189, 9, 61, 17, 190, 151, 78, 29, 190, 77, 165, 221, 189, 130, 19, 19, 189, 232, 156, 186, 60, 80, 7, 144, 62, 8, 225, 191, 61, 228, 106, 210, 60, 160, 207, 151, 62, 180, 142, 53, 61, 147, 40, 150, 189, 61, 252, 189, 190, 91, 127, 142, 62, 253, 70, 139, 62, 193, 28, 162, 190, 103, 3, 131, 190, 38, 152, 220, 190, 158, 19, 193, 62, 21, 192, 36, 190, 173, 96, 12, 62, 167, 49, 65, 190, 164, 50, 151, 190, 173, 186, 111, 188, 174, 198, 216, 190, 139, 23, 167, 188, 250, 6, 54, 190, 244, 196, 156, 62, 22, 216, 143, 190, 105, 62, 187, 190, 72, 8, 155, 188, 244, 112, 141, 190, 4, 96, 137, 62, 69, 64, 182, 62, 13, 107, 0, 190, 26, 249, 222, 189, 6, 41, 105, 62, 173, 54, 17, 190, 23, 183, 117, 187, 178, 133, 32, 189, 59, 141, 175, 62, 229, 98, 192, 190, 132, 238, 174, 60, 153, 129, 129, 61, 253, 253, 95, 61, 221, 152, 145, 62, 110, 160, 12, 191, 173, 147, 95, 62, 232, 92, 37, 62, 82, 5, 139, 190, 237, 182, 254, 189, 211, 185, 78, 62, 73, 96, 229, 189, 176, 206, 160, 189, 193, 79, 166, 189, 75, 37, 139, 62, 184, 202, 57, 62, 158, 202, 51, 62, 9, 101, 155, 60, 77, 45, 30, 190, 10, 25, 62, 61, 36, 220, 101, 61, 44, 127, 95, 62, 205, 85, 1, 62, 221, 100, 248, 190, 91, 150, 170, 189, 0, 200, 135, 188, 159, 85, 226, 190, 46, 172, 102, 188, 165, 170, 148, 190, 136, 236, 26, 62, 209, 191, 60, 189, 243, 104, 101, 190, 213, 192, 31, 188, 138, 137, 116, 189, 128, 60, 5, 62, 72, 137, 205, 189, 76, 154, 23, 63, 59, 63, 6, 61, 204, 89, 95, 190, 110, 124, 212, 59, 11, 130, 101, 190, 71, 97, 26, 191, 92, 193, 205, 62, 65, 116, 167, 188, 128, 221, 236, 189, 255, 10, 66, 62, 100, 174, 121, 61, 184, 53, 167, 62, 7, 190, 104, 190, 239, 250, 147, 62, 199, 18, 194, 62, 82, 23, 195, 189, 140, 12, 208, 61, 180, 75, 166, 189, 38, 50, 158, 62, 133, 64, 47, 190, 7, 214, 157, 62, 59, 119, 137, 62, 197, 253, 232, 190, 158, 105, 135, 61, 9, 39, 48, 189, 148, 13, 148, 61, 199, 45, 40, 188, 143, 125, 15, 190, 26, 32, 102, 190, 152, 170, 150, 61, 218, 255, 27, 190, 109, 70, 133, 190, 118, 156, 144, 62, 27, 29, 142, 61, 39, 13, 25, 190, 98, 157, 100, 62, 210, 248, 133, 190, 202, 147, 250, 190, 222, 222, 204, 62, 230, 42, 27, 190, 253, 14, 139, 190, 48, 127, 136, 62, 161, 42, 134, 188, 134, 117, 162, 61, 25, 30, 53, 190, 89, 135, 82, 62, 143, 43, 130, 62, 1, 208, 84, 61, 3, 88, 140, 62, 194, 172, 91, 189, 101, 57, 191, 62, 47, 85, 138, 190, 136, 253, 191, 62, 198, 83, 36, 62, 86, 150, 244, 189, 156, 225, 190, 189, 0, 196, 244, 61, 67, 93, 18, 62, 246, 226, 215, 189, 182, 191, 215, 188, 253, 239, 46, 60, 148, 155, 26, 190, 8, 147, 12, 190, 15, 195, 251, 60, 209, 163, 145, 188, 203, 2, 66, 189, 81, 116, 251, 61, 202, 192, 245, 189, 176, 225, 234, 189, 4, 132, 234, 59, 101, 225, 157, 61, 229, 102, 246, 189, 85, 122, 11, 190, 203, 152, 122, 187, 6, 191, 163, 61, 50, 17, 136, 189, 246, 142, 244, 189, 168, 159, 18, 62, 115, 56, 186, 189, 46, 218, 44, 190, 30, 224, 1, 190, 239, 86, 171, 189, 80, 167, 195, 188, 224, 196, 1, 190, 198, 205, 214, 189, 3, 124, 168, 60, 147, 160, 7, 191, 104, 20, 184, 61, 44, 164, 95, 190, 204, 60, 21, 62, 188, 141, 84, 62, 203, 176, 63, 62, 196, 155, 240, 190, 174, 5, 26, 62, 114, 15, 27, 190, 238, 91, 176, 190, 251, 49, 1, 63, 252, 174, 151, 62, 134, 246, 8, 62, 73, 110, 207, 61, 45, 155, 121, 190, 219, 13, 255, 190, 30, 84, 224, 62, 19, 236, 33, 189, 16, 242, 135, 190, 45, 52, 97, 62, 77, 37, 91, 61, 237, 176, 140, 62, 253, 90, 204, 61, 148, 12, 25, 62, 112, 22, 129, 62, 72, 95, 17, 61, 99, 205, 195, 61, 232, 94, 46, 61, 146, 255, 80, 62, 105, 121, 205, 190, 230, 30, 30, 63, 151, 159, 209, 62, 126, 99, 221, 62, 198, 213, 115, 61, 235, 78, 8, 63, 232, 94, 164, 190, 0, 210, 74, 190, 54, 115, 229, 62, 44, 176, 60, 62, 103, 146, 134, 188, 204, 244, 77, 61, 64, 59, 158, 61, 190, 221, 28, 191, 139, 186, 152, 189, 120, 66, 220, 62, 211, 183, 60, 190, 167, 107, 114, 62, 186, 126, 210, 62, 13, 73, 176, 190, 85, 31, 253, 61, 212, 197, 9, 63, 56, 235, 27, 190, 94, 34, 11, 61, 119, 19, 20, 61, 65, 183, 150, 62, 51, 113, 215, 190, 59, 40, 213, 190, 162, 95, 54, 62, 151, 159, 158, 190, 31, 112, 141, 190, 37, 203, 240, 190, 55, 141, 116, 62, 159, 182, 226, 190, 17, 191, 188, 189, 208, 184, 232, 189, 86, 194, 88, 61, 234, 65, 243, 189, 224, 222, 15, 190, 155, 192, 184, 60, 50, 192, 16, 61, 5, 41, 146, 188, 51, 247, 93, 189, 247, 33, 2, 189, 152, 11, 213, 189, 145, 213, 51, 189, 195, 135, 47, 189, 253, 18, 119, 189, 71, 17, 51, 190, 248, 220, 32, 61, 89, 130, 156, 188, 23, 46, 150, 189, 78, 151, 230, 60, 135, 136, 13, 61, 59, 237, 13, 190, 189, 253, 221, 61, 240, 237, 164, 189, 25, 242, 200, 189, 250, 156, 197, 189, 202, 166, 231, 60, 74, 249, 181, 61, 167, 43, 11, 189, 30, 168, 134, 189, 248, 35, 17, 62, 14, 239, 32, 189, 138, 74, 169, 61, 11, 101, 45, 190, 247, 170, 221, 189, 62, 221, 134, 61, 174, 159, 25, 61, 216, 220, 18, 189, 136, 57, 54, 190, 181, 148, 210, 61, 41, 179, 87, 62, 197, 6, 41, 62, 52, 54, 164, 61, 54, 193, 61, 190, 108, 105, 115, 190, 144, 134, 47, 61, 63, 40, 109, 61, 242, 170, 144, 61, 28, 13, 181, 60, 69, 13, 31, 61, 99, 225, 215, 188, 180, 33, 46, 189, 95, 219, 201, 60, 191, 102, 191, 61, 30, 225, 214, 61, 23, 82, 69, 187, 55, 156, 215, 189, 61, 180, 192, 190, 60, 208, 210, 189, 195, 75, 88, 62, 37, 13, 103, 61, 135, 35, 39, 190, 161, 4, 165, 187, 109, 122, 129, 62, 23, 135, 180, 190, 81, 178, 49, 62, 83, 25, 15, 191, 1, 237, 213, 190, 49, 61, 93, 190, 175, 155, 232, 62, 39, 97, 31, 191, 36, 160, 207, 62, 85, 162, 137, 189, 0, 207, 132, 62, 218, 95, 161, 188, 134, 109, 126, 191, 238, 124, 163, 191, 18, 181, 120, 190, 152, 25, 197, 62, 249, 164, 225, 190, 56, 154, 132, 62, 246, 233, 209, 190, 23, 17, 0, 190, 197, 145, 21, 190, 158, 171, 101, 191, 85, 124, 24, 191, 82, 204, 9, 191, 35, 196, 115, 62, 243, 130, 134, 61, 57, 223, 149, 189, 10, 4, 40, 189, 102, 162, 179, 190, 51, 136, 47, 191, 180, 137, 241, 61, 89, 244, 58, 62, 24, 117, 117, 190, 41, 211, 137, 61, 127, 165, 50, 62, 170, 233, 198, 62, 86, 185, 105, 189, 122, 17, 61, 62, 13, 180, 181, 190, 85, 74, 1, 62, 109, 181, 134, 190, 119, 152, 99, 62, 255, 98, 206, 60, 87, 54, 35, 62, 148, 181, 6, 191, 70, 233, 61, 191, 141, 198, 82, 190, 79, 241, 158, 190, 138, 187, 252, 190, 52, 14, 145, 62, 173, 35, 149, 62, 25, 111, 200, 190, 2, 4, 200, 60, 215, 102, 195, 62, 185, 99, 92, 190, 174, 114, 224, 61, 72, 182, 179, 189, 226, 195, 22, 62, 182, 211, 52, 191, 86, 95, 34, 190, 173, 69, 30, 62, 159, 223, 17, 190, 237, 216, 82, 190, 120, 134, 176, 190, 160, 23, 243, 62, 52, 93, 234, 189, 164, 69, 17, 62, 83, 211, 92, 189, 178, 47, 138, 190, 23, 139, 6, 63, 172, 73, 29, 190, 90, 82, 29, 62, 37, 163, 78, 62, 243, 151, 32, 62, 143, 181, 191, 190, 168, 173, 172, 61, 31, 70, 13, 190, 23, 139, 114, 191, 245, 144, 228, 189, 211, 132, 73, 62, 28, 223, 211, 190, 5, 120, 61, 62, 221, 55, 179, 62, 104, 75, 7, 191, 163, 103, 29, 190, 119, 123, 98, 60, 56, 36, 248, 189, 1, 100, 164, 190, 119, 154, 140, 189, 238, 57, 128, 62, 161, 81, 116, 191, 98, 150, 53, 190, 210, 48, 228, 62, 193, 93, 116, 191, 227, 45, 216, 62, 124, 255, 83, 191, 237, 32, 139, 62, 147, 87, 187, 190, 211, 81, 29, 61, 204, 23, 211, 60, 60, 189, 2, 189, 135, 175, 29, 62, 235, 208, 166, 61, 77, 242, 138, 187, 17, 92, 3, 62, 118, 119, 26, 61, 36, 150, 206, 188, 84, 183, 10, 190, 143, 247, 188, 61, 111, 98, 225, 61, 24, 55, 52, 190, 114, 155, 215, 189, 5, 125, 162, 189, 233, 126, 152, 61, 28, 203, 237, 189, 132, 176, 28, 62, 173, 132, 56, 60, 197, 58, 6, 62, 50, 89, 182, 61, 250, 80, 254, 189, 254, 208, 9, 189, 205, 254, 220, 188, 87, 158, 11, 190, 21, 186, 7, 62, 172, 50, 44, 189, 165, 86, 51, 190, 4, 187, 43, 190, 93, 164, 218, 189, 64, 194, 198, 188, 118, 50, 243, 61, 76, 183, 27, 189, 108, 186, 162, 61, 64, 213, 132, 61, 58, 83, 194, 61, 146, 70, 17, 190, 249, 24, 109, 189, 207, 156, 211, 61, 168, 144, 64, 189, 139, 101, 56, 61, 154, 223, 206, 60, 223, 201, 40, 62, 17, 158, 211, 189, 123, 119, 214, 59, 112, 231, 63, 61, 64, 89, 145, 61, 243, 122, 162, 189, 115, 42, 27, 190, 38, 197, 214, 189, 241, 190, 103, 189, 93, 210, 17, 62, 175, 200, 47, 190, 145, 187, 36, 190, 54, 132, 24, 190, 43, 107, 220, 189, 90, 51, 196, 189, 96, 139, 62, 189, 3, 144, 24, 190, 253, 195, 32, 190, 194, 224, 184, 189, 228, 22, 228, 189, 131, 97, 233, 189, 205, 230, 83, 189, 27, 196, 208, 189, 255, 218, 47, 191, 159, 210, 179, 187, 5, 57, 54, 62, 234, 50, 78, 62, 184, 68, 235, 190, 186, 131, 28, 62, 131, 127, 120, 62, 207, 86, 0, 62, 223, 234, 12, 190, 28, 137, 147, 61, 180, 184, 131, 191, 59, 15, 100, 189, 162, 195, 49, 61, 210, 87, 247, 60, 21, 78, 90, 191, 165, 236, 131, 62, 26, 99, 134, 191, 94, 28, 182, 61, 135, 36, 92, 62, 146, 41, 48, 189, 40, 28, 51, 62, 20, 229, 10, 190, 74, 46, 81, 62, 74, 136, 89, 190, 113, 190, 172, 190, 118, 22, 166, 62, 157, 190, 143, 191, 199, 37, 148, 190, 153, 130, 248, 190, 77, 95, 150, 62, 0, 122, 82, 190, 150, 93, 132, 62, 249, 0, 51, 191, 231, 230, 81, 187, 104, 37, 135, 62, 86, 186, 26, 63, 250, 225, 182, 190, 37, 103, 115, 62, 191, 40, 95, 62, 162, 138, 77, 62, 172, 150, 107, 189, 68, 171, 42, 191, 178, 23, 148, 191, 29, 0, 1, 190, 61, 61, 170, 189, 180, 118, 169, 190, 139, 115, 132, 189, 175, 229, 207, 62, 195, 66, 74, 191, 73, 244, 138, 189, 57, 211, 154, 62, 108, 226, 75, 190, 97, 120, 14, 62, 242, 97, 5, 63, 131, 21, 176, 61, 1, 37, 50, 191, 94, 3, 246, 189, 196, 103, 205, 62, 249, 5, 57, 191, 197, 18, 183, 187, 65, 54, 200, 190, 249, 32, 151, 62, 247, 172, 145, 189, 2, 32, 137, 61, 214, 54, 121, 62, 111, 49, 98, 190, 118, 117, 7, 190, 100, 25, 130, 61, 252, 175, 240, 190, 224, 69, 246, 61, 149, 205, 200, 189, 17, 228, 100, 61, 85, 43, 187, 61, 65, 134, 163, 61, 92, 81, 19, 62, 166, 216, 153, 190, 109, 167, 30, 62, 19, 213, 0, 62, 65, 122, 156, 62, 29, 143, 167, 189, 0, 149, 50, 62, 108, 10, 32, 190, 117, 116, 169, 62, 122, 130, 237, 61, 188, 140, 190, 60, 147, 220, 164, 189, 6, 187, 53, 190, 166, 113, 13, 62, 224, 233, 66, 189, 226, 144, 235, 188, 223, 71, 157, 187, 36, 21, 122, 190, 222, 126, 190, 60, 112, 6, 0, 191, 204, 37, 40, 62, 20, 4, 218, 59, 229, 83, 131, 190, 107, 103, 155, 189, 33, 55, 137, 190, 95, 216, 55, 62, 223, 116, 81, 190, 146, 240, 56, 189, 147, 168, 144, 189, 232, 236, 232, 188, 137, 188, 32, 190, 103, 243, 189, 62, 176, 8, 4, 61, 196, 90, 16, 190, 241, 152, 25, 62, 197, 70, 204, 61, 79, 69, 12, 62, 147, 95, 172, 189, 240, 119, 157, 189, 110, 209, 229, 189, 210, 36, 214, 190, 239, 177, 143, 62, 125, 57, 99, 190, 248, 52, 61, 188, 68, 169, 6, 190, 222, 235, 62, 61, 153, 115, 140, 61, 90, 193, 211, 190, 16, 40, 134, 190, 185, 16, 67, 189, 222, 134, 83, 62, 11, 248, 1, 61, 36, 21, 29, 189, 12, 139, 152, 60, 233, 163, 165, 190, 181, 172, 39, 189, 201, 105, 172, 190, 220, 66, 161, 62, 44, 249, 196, 60, 2, 134, 8, 61, 143, 12, 169, 190, 79, 87, 143, 62, 149, 128, 191, 59, 141, 42, 64, 190, 136, 48, 250, 189, 26, 57, 54, 62, 105, 63, 65, 61, 192, 101, 79, 61, 222, 172, 212, 190, 67, 182, 32, 191, 8, 112, 69, 61, 115, 235, 172, 61, 113, 22, 148, 190, 115, 225, 43, 62, 142, 149, 176, 189, 80, 188, 195, 62, 16, 115, 61, 189, 152, 253, 88, 62, 6, 21, 163, 62, 246, 230, 5, 191, 199, 175, 143, 189, 55, 140, 124, 62, 226, 108, 220, 62, 244, 128, 132, 189, 242, 129, 59, 62, 131, 237, 137, 62, 208, 152, 179, 189, 47, 195, 244, 188, 235, 87, 137, 190, 20, 21, 70, 61, 174, 217, 74, 190, 213, 210, 134, 190, 228, 210, 222, 61, 182, 105, 235, 62, 71, 215, 241, 189, 65, 192, 143, 190, 106, 67, 95, 191, 102, 13, 93, 62, 204, 220, 87, 190, 157, 215, 2, 62, 18, 229, 10, 62, 234, 167, 24, 191, 16, 35, 57, 190, 160, 188, 8, 62, 38, 248, 109, 190, 5, 144, 177, 62, 25, 63, 210, 190, 198, 103, 168, 61, 140, 109, 86, 61, 14, 25, 142, 62, 200, 217, 146, 62, 199, 251, 136, 191, 23, 48, 11, 189, 150, 96, 141, 191, 173, 93, 134, 62, 170, 66, 43, 190, 105, 175, 157, 188, 18, 118, 108, 62, 216, 182, 248, 61, 236, 142, 43, 61, 143, 149, 206, 62, 17, 154, 59, 188, 207, 30, 45, 190, 141, 112, 213, 62, 33, 211, 179, 61, 139, 230, 11, 190, 221, 82, 254, 188, 14, 40, 231, 189, 244, 255, 148, 191, 91, 42, 66, 190, 66, 36, 4, 62, 188, 152, 36, 190, 79, 190, 175, 62, 107, 144, 15, 63, 92, 136, 2, 191, 118, 121, 198, 188, 239, 226, 205, 62, 5, 202, 133, 190, 157, 29, 73, 190, 170, 41, 252, 61, 208, 203, 177, 62, 109, 188, 113, 191, 10, 242, 234, 190, 123, 148, 237, 62, 162, 165, 47, 191, 214, 28, 64, 62, 252, 13, 44, 191, 16, 86, 115, 62, 201, 71, 146, 190, 137, 217, 161, 61, 221, 192, 247, 61, 106, 131, 9, 190, 35, 33, 22, 59, 227, 60, 82, 63, 99, 104, 60, 61, 112, 231, 153, 62, 78, 58, 46, 62, 165, 12, 181, 189, 74, 55, 236, 189, 216, 252, 3, 190, 209, 13, 170, 190, 188, 50, 179, 189, 133, 82, 17, 63, 132, 193, 175, 190, 62, 133, 35, 190, 43, 234, 117, 62, 47, 99, 133, 190, 182, 112, 239, 189, 82, 226, 145, 62, 145, 69, 17, 191, 55, 48, 23, 191, 31, 147, 109, 191, 57, 176, 81, 62, 160, 47, 75, 191, 234, 237, 83, 190, 48, 220, 153, 190, 114, 163, 68, 191, 119, 113, 22, 62, 198, 217, 61, 191, 99, 118, 183, 61, 189, 17, 196, 190, 235, 209, 206, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 77, 186, 61, 149, 53, 179, 61, 134, 125, 180, 189, 231, 201, 162, 62, 150, 94, 171, 62, 254, 31, 218, 189, 70, 197, 45, 62, 200, 135, 55, 190, 98, 5, 29, 190, 206, 31, 173, 189, 235, 45, 8, 62, 196, 44, 57, 189, 3, 73, 94, 61, 239, 121, 138, 62, 161, 60, 193, 189, 80, 75, 33, 62, 193, 17, 145, 189, 225, 8, 234, 189, 47, 238, 139, 62, 225, 92, 138, 61, 227, 59, 9, 61, 52, 224, 142, 62, 23, 175, 79, 190, 31, 77, 18, 190, 26, 117, 98, 62, 13, 214, 225, 61, 100, 228, 28, 190, 156, 145, 37, 62, 244, 60, 154, 61, 165, 175, 239, 189, 170, 54, 115, 62, 212, 199, 107, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {160, 148, 24, 190, 233, 41, 198, 190, 38, 142, 143, 190, 55, 200, 140, 63, 222, 87, 57, 189, 25, 24, 213, 62, 190, 13, 63, 63, 2, 141, 248, 61, 225, 244, 3, 62, 137, 38, 104, 189, 239, 20, 4, 191, 85, 214, 110, 190, 27, 128, 34, 191, 14, 101, 225, 190, 167, 125, 13, 190, 175, 85, 92, 191, 223, 219, 88, 63, 182, 56, 38, 190, 127, 149, 68, 61, 18, 163, 181, 63, 172, 163, 83, 63, 197, 11, 177, 63, 219, 245, 8, 62, 105, 162, 3, 60, 193, 75, 162, 62, 230, 244, 137, 63, 65, 127, 147, 190, 240, 46, 142, 62, 7, 69, 32, 191, 87, 27, 125, 191, 98, 53, 149, 63, 16, 46, 150, 191, 244, 203, 5, 191, 20, 99, 11, 186, 102, 37, 243, 61, 161, 93, 106, 60, 205, 200, 185, 190, 204, 239, 29, 189, 64, 167, 2, 61, 92, 70, 151, 61, 140, 65, 206, 61, 186, 12, 43, 62, 223, 129, 64, 190, 117, 14, 143, 189, 200, 102, 161, 62, 213, 214, 225, 61, 161, 211, 35, 61, 22, 135, 115, 61, 115, 5, 161, 62, 121, 93, 155, 60, 6, 46, 135, 190, 0, 196, 18, 189, 45, 33, 0, 190, 96, 115, 134, 61, 63, 66, 226, 187, 171, 69, 33, 61, 251, 245, 145, 190, 115, 146, 4, 190, 234, 70, 38, 188, 147, 181, 142, 61, 115, 200, 11, 61, 11, 105, 137, 62, 101, 10, 170, 62, 147, 244, 210, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 39, 40, 190, 41, 189, 198, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {7, 55, 140, 191, 197, 42, 193, 190, 254, 73, 134, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {179, 16, 20, 192, 60, 197, 182, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0034/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}