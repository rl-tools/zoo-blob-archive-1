// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {125, 155, 26, 62, 68, 83, 229, 190, 178, 82, 193, 190, 209, 218, 14, 190, 73, 84, 2, 63, 169, 201, 182, 61, 93, 56, 101, 62, 53, 15, 73, 62, 9, 11, 4, 190, 34, 93, 98, 62, 41, 172, 254, 190, 134, 77, 222, 61, 54, 148, 204, 190, 252, 3, 71, 62, 189, 234, 64, 190, 191, 51, 139, 62, 254, 66, 165, 62, 77, 144, 0, 62, 234, 114, 54, 61, 91, 152, 200, 62, 215, 67, 249, 190, 70, 195, 12, 191, 135, 145, 173, 190, 65, 95, 151, 190, 204, 207, 4, 63, 158, 8, 131, 62, 184, 247, 152, 61, 13, 206, 219, 190, 210, 160, 189, 62, 67, 121, 100, 190, 28, 141, 50, 62, 79, 79, 93, 189, 106, 236, 255, 190, 68, 230, 90, 189, 75, 230, 28, 62, 137, 142, 101, 62, 18, 238, 134, 62, 62, 34, 73, 190, 247, 51, 129, 61, 201, 254, 12, 187, 144, 13, 186, 190, 9, 215, 72, 190, 10, 242, 5, 63, 187, 185, 186, 190, 119, 176, 170, 190, 192, 31, 242, 190, 18, 238, 77, 190, 79, 28, 13, 190, 3, 98, 224, 62, 197, 106, 81, 190, 34, 7, 186, 62, 82, 168, 236, 188, 12, 159, 15, 191, 43, 50, 88, 62, 92, 57, 132, 190, 7, 137, 224, 61, 132, 150, 121, 190, 30, 78, 19, 191, 9, 117, 159, 190, 237, 206, 226, 189, 146, 63, 10, 60, 138, 246, 87, 190, 231, 24, 159, 62, 78, 227, 214, 61, 92, 184, 132, 62, 155, 227, 27, 60, 203, 122, 160, 62, 112, 203, 65, 62, 105, 218, 220, 190, 63, 167, 138, 190, 118, 135, 190, 62, 184, 22, 248, 62, 88, 57, 195, 62, 252, 98, 6, 190, 147, 38, 99, 190, 242, 125, 39, 190, 149, 102, 144, 62, 139, 99, 157, 61, 64, 55, 158, 189, 47, 148, 5, 191, 22, 117, 62, 62, 232, 208, 10, 63, 141, 55, 232, 190, 44, 181, 9, 63, 2, 21, 186, 62, 161, 24, 100, 187, 136, 122, 201, 62, 229, 211, 144, 190, 104, 87, 115, 190, 104, 88, 0, 62, 81, 213, 27, 188, 93, 17, 2, 191, 29, 50, 125, 190, 195, 126, 179, 190, 217, 127, 152, 62, 174, 78, 176, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 193, 19, 191, 130, 174, 55, 62, 133, 52, 203, 61, 242, 17, 13, 62, 238, 30, 182, 189, 149, 177, 49, 190, 183, 71, 250, 62, 127, 217, 84, 190, 132, 91, 148, 190, 142, 163, 52, 62, 157, 75, 2, 63, 225, 210, 10, 191, 9, 159, 88, 189, 239, 11, 151, 62, 221, 46, 136, 62, 165, 149, 240, 190, 108, 168, 137, 62, 114, 149, 6, 63, 126, 236, 68, 61, 249, 242, 188, 62, 159, 63, 133, 61, 145, 177, 31, 190, 187, 152, 16, 63, 169, 204, 13, 191, 57, 194, 152, 190, 221, 123, 145, 62, 42, 158, 251, 190, 239, 120, 95, 62, 63, 103, 241, 190, 96, 28, 180, 190, 103, 18, 189, 62, 243, 123, 49, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 19, 88, 189, 179, 164, 173, 61, 228, 28, 38, 190, 223, 151, 50, 190, 85, 206, 55, 61, 22, 157, 156, 61, 87, 72, 184, 61, 235, 36, 51, 62, 7, 40, 35, 62, 44, 123, 176, 61, 211, 251, 20, 62, 201, 203, 218, 61, 241, 218, 13, 190, 60, 132, 8, 190, 157, 162, 39, 62, 146, 138, 112, 61, 89, 21, 235, 189, 137, 147, 243, 61, 97, 72, 146, 189, 93, 159, 37, 190, 41, 182, 195, 61, 220, 218, 158, 189, 38, 93, 201, 189, 179, 215, 238, 59, 227, 66, 51, 62, 25, 140, 38, 189, 193, 75, 247, 60, 140, 91, 70, 60, 247, 240, 43, 190, 97, 250, 194, 188, 186, 196, 30, 190, 89, 100, 37, 62, 147, 74, 207, 61, 1, 124, 29, 190, 235, 130, 195, 60, 227, 230, 40, 190, 140, 122, 45, 60, 171, 125, 246, 61, 89, 210, 34, 62, 161, 176, 212, 189, 50, 61, 51, 61, 114, 52, 154, 61, 99, 179, 248, 61, 128, 98, 185, 189, 207, 5, 228, 188, 227, 231, 139, 189, 180, 225, 30, 190, 55, 102, 146, 61, 21, 36, 108, 61, 43, 151, 14, 190, 226, 146, 49, 62, 69, 93, 36, 190, 217, 129, 232, 189, 175, 79, 65, 61, 194, 25, 41, 190, 239, 55, 141, 189, 90, 2, 5, 61, 2, 214, 232, 189, 37, 28, 52, 190, 125, 197, 204, 189, 82, 130, 216, 188, 234, 228, 9, 190, 26, 43, 50, 190, 68, 113, 87, 189, 98, 182, 184, 189, 49, 30, 43, 190, 255, 34, 96, 61, 117, 134, 207, 61, 208, 59, 12, 187, 26, 119, 202, 61, 159, 10, 37, 190, 183, 226, 175, 61, 81, 13, 21, 190, 114, 211, 43, 190, 31, 82, 207, 61, 167, 241, 179, 61, 156, 0, 153, 189, 177, 39, 28, 190, 112, 226, 158, 189, 124, 224, 70, 60, 105, 100, 53, 60, 119, 200, 217, 61, 235, 129, 9, 61, 207, 35, 38, 189, 115, 131, 135, 189, 185, 205, 47, 190, 140, 178, 5, 190, 115, 18, 242, 61, 47, 26, 43, 189, 102, 191, 159, 61, 187, 195, 186, 184, 216, 26, 169, 189, 4, 2, 142, 189, 167, 169, 167, 189, 36, 235, 201, 61, 115, 9, 84, 189, 157, 203, 49, 62, 235, 78, 114, 189, 118, 8, 132, 189, 101, 126, 217, 61, 77, 51, 9, 62, 198, 144, 205, 61, 238, 128, 50, 190, 191, 253, 207, 61, 142, 28, 137, 189, 210, 57, 24, 62, 129, 53, 134, 189, 63, 191, 149, 189, 32, 97, 60, 61, 186, 63, 213, 61, 127, 77, 88, 189, 105, 222, 4, 190, 201, 134, 142, 189, 242, 57, 195, 189, 139, 159, 46, 62, 141, 235, 26, 190, 17, 245, 30, 61, 41, 133, 122, 189, 245, 181, 48, 190, 154, 167, 46, 190, 61, 236, 62, 188, 211, 65, 135, 60, 146, 162, 40, 189, 100, 190, 82, 189, 95, 14, 89, 61, 158, 23, 33, 61, 84, 235, 14, 190, 166, 96, 165, 61, 152, 201, 214, 60, 104, 140, 13, 62, 93, 36, 67, 61, 11, 58, 159, 189, 32, 106, 4, 61, 14, 112, 161, 189, 45, 220, 165, 189, 24, 138, 47, 61, 143, 46, 200, 61, 181, 97, 37, 190, 97, 62, 35, 62, 86, 26, 215, 61, 25, 143, 39, 189, 35, 162, 248, 61, 95, 215, 130, 61, 240, 40, 88, 60, 192, 97, 128, 61, 163, 36, 147, 188, 177, 65, 79, 61, 212, 86, 9, 62, 134, 41, 198, 189, 155, 162, 243, 61, 191, 136, 110, 61, 172, 247, 9, 62, 168, 191, 24, 189, 157, 226, 165, 61, 6, 148, 39, 62, 147, 180, 45, 190, 93, 216, 89, 60, 112, 83, 194, 60, 72, 20, 250, 189, 8, 89, 187, 61, 40, 15, 121, 61, 216, 41, 41, 190, 142, 226, 33, 189, 60, 185, 140, 61, 240, 27, 24, 62, 19, 38, 15, 62, 124, 208, 25, 62, 125, 186, 31, 190, 252, 178, 30, 189, 249, 39, 116, 61, 75, 98, 6, 190, 60, 27, 40, 62, 118, 153, 104, 60, 59, 54, 52, 189, 15, 210, 51, 62, 189, 12, 91, 189, 195, 254, 179, 189, 93, 34, 2, 60, 187, 178, 24, 190, 124, 25, 188, 61, 45, 39, 7, 61, 169, 95, 31, 190, 98, 169, 2, 62, 86, 200, 192, 189, 70, 134, 149, 61, 109, 244, 213, 189, 62, 238, 169, 189, 226, 133, 3, 190, 76, 177, 202, 61, 71, 58, 130, 189, 95, 160, 149, 61, 160, 137, 205, 60, 53, 252, 189, 61, 26, 82, 72, 189, 192, 94, 41, 61, 91, 251, 233, 189, 6, 67, 10, 189, 30, 118, 2, 62, 139, 83, 30, 62, 209, 168, 207, 59, 224, 208, 185, 61, 15, 174, 248, 60, 116, 6, 189, 60, 168, 73, 24, 189, 118, 158, 24, 190, 36, 72, 186, 188, 224, 76, 15, 60, 236, 55, 160, 189, 205, 4, 209, 60, 112, 39, 245, 188, 150, 6, 15, 62, 234, 31, 207, 189, 223, 149, 219, 61, 197, 66, 199, 188, 138, 239, 210, 189, 243, 126, 99, 189, 240, 151, 197, 189, 104, 191, 39, 190, 251, 46, 12, 190, 148, 147, 166, 61, 210, 42, 50, 190, 43, 247, 13, 189, 241, 64, 8, 62, 52, 253, 241, 61, 57, 136, 245, 60, 4, 136, 145, 189, 201, 27, 183, 187, 88, 46, 2, 62, 155, 11, 25, 62, 247, 38, 79, 189, 119, 231, 114, 189, 28, 78, 14, 189, 97, 93, 29, 62, 118, 101, 9, 62, 253, 190, 9, 62, 146, 95, 11, 190, 23, 197, 100, 189, 31, 238, 168, 188, 184, 96, 206, 189, 66, 178, 2, 190, 164, 179, 248, 189, 243, 138, 168, 61, 68, 240, 86, 61, 14, 163, 40, 190, 131, 108, 239, 61, 169, 187, 21, 62, 143, 172, 2, 61, 209, 12, 25, 190, 19, 87, 221, 188, 183, 55, 22, 190, 196, 209, 21, 62, 129, 104, 14, 61, 209, 154, 172, 189, 192, 29, 29, 190, 41, 121, 103, 61, 75, 249, 28, 62, 193, 25, 7, 190, 220, 187, 141, 61, 145, 226, 60, 189, 84, 14, 108, 189, 57, 189, 9, 62, 103, 85, 213, 61, 244, 218, 132, 189, 66, 245, 155, 61, 227, 164, 87, 60, 181, 238, 230, 189, 168, 18, 227, 189, 43, 214, 197, 61, 254, 46, 25, 61, 247, 80, 131, 189, 147, 2, 179, 188, 209, 196, 160, 61, 215, 198, 214, 189, 15, 172, 226, 189, 41, 134, 25, 190, 143, 4, 234, 188, 228, 249, 203, 59, 98, 241, 249, 188, 251, 203, 14, 190, 246, 218, 252, 188, 165, 65, 213, 189, 133, 57, 15, 188, 5, 117, 31, 62, 245, 167, 48, 190, 134, 113, 162, 60, 99, 41, 1, 190, 33, 38, 17, 189, 229, 153, 27, 62, 112, 118, 158, 61, 35, 118, 123, 61, 68, 110, 21, 62, 140, 205, 160, 60, 190, 138, 50, 61, 134, 216, 50, 61, 1, 201, 253, 189, 132, 21, 172, 61, 51, 225, 251, 61, 179, 4, 41, 190, 19, 46, 8, 190, 226, 75, 252, 60, 57, 188, 147, 60, 233, 45, 212, 61, 227, 227, 7, 60, 220, 36, 202, 61, 164, 242, 250, 60, 5, 41, 163, 61, 136, 83, 153, 61, 140, 106, 144, 188, 182, 128, 62, 188, 10, 65, 192, 61, 122, 120, 43, 190, 179, 122, 157, 189, 22, 208, 251, 189, 117, 35, 216, 59, 147, 75, 32, 190, 148, 217, 23, 190, 140, 224, 2, 190, 101, 187, 189, 61, 196, 60, 173, 187, 205, 127, 231, 189, 137, 225, 153, 187, 82, 21, 173, 189, 179, 234, 37, 62, 195, 209, 13, 62, 169, 72, 208, 189, 157, 198, 15, 62, 113, 157, 39, 190, 225, 203, 164, 189, 79, 134, 137, 189, 237, 32, 116, 189, 203, 143, 223, 189, 108, 254, 163, 189, 101, 29, 31, 62, 255, 255, 8, 190, 138, 189, 225, 59, 87, 97, 48, 62, 210, 21, 72, 61, 162, 105, 89, 61, 239, 199, 179, 61, 87, 175, 15, 59, 206, 73, 162, 61, 13, 221, 29, 188, 163, 152, 63, 188, 157, 64, 6, 61, 179, 10, 27, 61, 146, 88, 11, 62, 88, 28, 33, 189, 117, 198, 130, 61, 34, 229, 51, 190, 170, 45, 222, 189, 163, 121, 42, 189, 39, 178, 52, 62, 184, 94, 179, 188, 200, 15, 65, 61, 126, 255, 3, 190, 231, 158, 164, 61, 6, 97, 33, 61, 181, 12, 193, 188, 161, 138, 179, 189, 220, 8, 34, 190, 233, 252, 114, 189, 206, 185, 204, 188, 174, 65, 184, 186, 145, 187, 123, 61, 137, 54, 31, 190, 32, 98, 131, 189, 82, 84, 10, 62, 107, 187, 220, 189, 197, 235, 35, 62, 165, 90, 188, 189, 165, 56, 204, 185, 156, 234, 46, 62, 130, 242, 132, 61, 168, 15, 229, 188, 103, 239, 158, 189, 58, 89, 76, 189, 239, 72, 6, 62, 216, 54, 181, 188, 56, 69, 28, 62, 227, 68, 26, 190, 168, 221, 240, 61, 196, 182, 40, 189, 125, 3, 177, 188, 250, 167, 139, 189, 6, 149, 124, 60, 142, 59, 82, 189, 92, 244, 234, 60, 101, 140, 23, 62, 75, 81, 4, 62, 25, 88, 14, 190, 49, 187, 209, 188, 161, 171, 143, 188, 33, 63, 213, 61, 56, 248, 146, 189, 148, 31, 17, 190, 88, 27, 7, 189, 80, 95, 5, 188, 248, 253, 26, 60, 214, 4, 216, 189, 184, 56, 83, 189, 35, 122, 15, 190, 247, 11, 240, 61, 218, 117, 58, 189, 127, 138, 0, 188, 171, 8, 129, 60, 31, 221, 165, 189, 217, 188, 77, 60, 20, 124, 180, 188, 145, 160, 242, 189, 94, 244, 167, 61, 187, 129, 51, 62, 35, 157, 203, 61, 113, 80, 148, 61, 217, 115, 12, 190, 144, 12, 187, 189, 212, 12, 210, 61, 67, 196, 40, 190, 27, 154, 223, 61, 240, 47, 106, 61, 141, 47, 198, 188, 11, 197, 151, 188, 91, 215, 213, 61, 245, 9, 17, 190, 215, 123, 121, 189, 27, 103, 38, 190, 135, 73, 141, 60, 83, 251, 50, 189, 114, 120, 164, 189, 76, 196, 7, 62, 77, 145, 194, 189, 169, 45, 164, 189, 241, 136, 98, 61, 61, 240, 45, 61, 158, 168, 220, 189, 37, 218, 99, 61, 95, 94, 19, 62, 82, 172, 236, 61, 245, 163, 29, 190, 187, 155, 128, 189, 89, 82, 149, 189, 207, 29, 177, 58, 152, 61, 171, 61, 55, 228, 166, 189, 153, 230, 130, 61, 216, 2, 23, 62, 5, 97, 24, 62, 112, 182, 222, 188, 183, 144, 9, 190, 106, 219, 34, 62, 178, 246, 252, 61, 47, 44, 222, 189, 25, 211, 193, 59, 60, 60, 135, 61, 51, 48, 39, 60, 65, 110, 0, 61, 79, 237, 37, 190, 164, 226, 67, 61, 83, 72, 19, 62, 25, 203, 237, 61, 239, 3, 29, 190, 88, 210, 101, 189, 111, 38, 192, 189, 26, 255, 36, 189, 165, 97, 240, 60, 81, 226, 1, 189, 243, 250, 19, 190, 171, 162, 202, 61, 39, 200, 50, 62, 22, 60, 6, 190, 156, 36, 14, 62, 173, 119, 191, 189, 0, 120, 194, 189, 172, 253, 194, 60, 58, 90, 48, 190, 3, 87, 92, 61, 210, 176, 160, 61, 51, 87, 31, 189, 253, 6, 200, 189, 88, 168, 129, 60, 138, 85, 13, 62, 250, 75, 14, 188, 171, 71, 64, 61, 237, 9, 30, 190, 11, 57, 240, 61, 49, 84, 116, 188, 70, 158, 4, 61, 228, 0, 77, 61, 121, 242, 166, 61, 251, 185, 34, 61, 233, 22, 27, 190, 56, 123, 178, 61, 76, 82, 106, 189, 113, 45, 49, 190, 169, 207, 88, 189, 68, 250, 193, 189, 90, 93, 41, 62, 155, 161, 35, 62, 223, 81, 210, 61, 206, 147, 72, 189, 146, 69, 72, 61, 116, 105, 228, 61, 195, 236, 138, 189, 128, 114, 239, 61, 158, 30, 126, 188, 55, 147, 228, 189, 173, 160, 18, 62, 6, 96, 212, 188, 148, 209, 13, 190, 153, 201, 232, 61, 118, 198, 6, 62, 28, 241, 216, 189, 42, 244, 27, 62, 243, 80, 150, 188, 148, 188, 195, 189, 30, 59, 3, 190, 199, 93, 106, 189, 101, 62, 92, 187, 178, 79, 176, 61, 246, 222, 41, 62, 126, 237, 126, 188, 121, 243, 245, 61, 194, 57, 232, 188, 165, 32, 23, 62, 174, 66, 124, 189, 26, 131, 227, 61, 35, 230, 224, 188, 181, 173, 193, 188, 114, 34, 20, 61, 142, 134, 159, 61, 24, 165, 94, 189, 175, 52, 27, 60, 58, 137, 233, 61, 180, 71, 183, 189, 141, 181, 163, 189, 145, 163, 134, 60, 74, 118, 214, 61, 177, 29, 105, 59, 225, 15, 8, 61, 170, 187, 29, 61, 116, 203, 9, 190, 71, 49, 53, 61, 132, 240, 38, 189, 91, 41, 41, 190, 148, 204, 6, 188, 0, 14, 229, 61, 249, 170, 196, 189, 202, 61, 1, 60, 211, 57, 148, 187, 228, 156, 74, 188, 135, 39, 58, 61, 78, 148, 42, 62, 243, 70, 102, 189, 208, 109, 34, 62, 123, 222, 43, 62, 104, 138, 206, 189, 30, 190, 75, 189, 23, 185, 17, 62, 221, 244, 197, 188, 204, 30, 201, 61, 152, 61, 236, 61, 70, 53, 44, 190, 109, 140, 36, 190, 214, 80, 56, 61, 83, 203, 64, 61, 39, 80, 41, 190, 51, 26, 170, 188, 218, 108, 252, 188, 96, 173, 145, 61, 151, 216, 17, 62, 222, 6, 1, 190, 248, 202, 102, 61, 219, 197, 39, 190, 99, 132, 32, 62, 248, 35, 201, 189, 40, 117, 148, 61, 20, 6, 172, 188, 64, 41, 169, 61, 40, 24, 52, 190, 39, 68, 31, 62, 103, 225, 252, 189, 107, 153, 171, 61, 187, 134, 10, 61, 162, 180, 210, 189, 234, 53, 133, 61, 13, 206, 62, 60, 46, 235, 12, 190, 219, 209, 19, 61, 49, 159, 28, 190, 185, 254, 30, 61, 85, 240, 191, 61, 191, 165, 150, 61, 19, 159, 166, 189, 203, 190, 34, 62, 186, 197, 103, 61, 150, 129, 9, 189, 183, 0, 60, 61, 189, 110, 221, 188, 156, 198, 139, 60, 216, 160, 24, 61, 167, 73, 7, 62, 71, 141, 49, 62, 220, 184, 42, 190, 140, 13, 42, 190, 142, 38, 18, 190, 141, 94, 158, 61, 180, 155, 35, 59, 48, 24, 235, 189, 29, 145, 227, 60, 58, 163, 3, 190, 173, 134, 109, 188, 230, 229, 118, 189, 232, 31, 35, 190, 21, 105, 166, 61, 255, 247, 249, 189, 230, 154, 127, 189, 213, 11, 52, 62, 171, 139, 235, 61, 186, 191, 13, 62, 255, 194, 31, 62, 58, 172, 251, 189, 204, 163, 195, 61, 152, 199, 38, 61, 28, 109, 12, 190, 111, 131, 82, 188, 47, 245, 148, 61, 70, 12, 35, 190, 159, 108, 152, 189, 48, 26, 151, 187, 117, 120, 150, 189, 73, 225, 243, 61, 237, 68, 92, 189, 50, 115, 17, 190, 250, 78, 185, 189, 238, 78, 223, 189, 224, 50, 250, 189, 76, 153, 47, 62, 220, 205, 71, 189, 7, 111, 34, 61, 27, 29, 124, 61, 225, 195, 200, 187, 59, 165, 43, 190, 152, 113, 241, 189, 251, 40, 215, 189, 14, 68, 153, 189, 177, 13, 36, 62, 183, 135, 31, 189, 81, 51, 44, 190, 79, 120, 15, 189, 245, 129, 243, 188, 251, 45, 148, 188, 35, 121, 57, 61, 153, 91, 29, 190, 64, 88, 161, 188, 196, 188, 193, 189, 122, 169, 126, 60, 254, 119, 31, 189, 154, 199, 171, 61, 24, 59, 205, 61, 112, 198, 189, 189, 185, 76, 155, 59, 178, 92, 215, 61, 122, 182, 15, 189, 76, 213, 12, 61, 44, 212, 46, 62, 97, 134, 39, 61, 153, 124, 189, 61, 161, 175, 210, 61, 17, 63, 3, 62, 144, 28, 48, 189, 49, 20, 241, 60, 48, 224, 118, 188, 10, 148, 215, 189, 208, 53, 226, 189, 137, 24, 215, 61, 211, 81, 202, 189, 79, 154, 109, 189, 199, 40, 27, 62, 251, 86, 14, 187, 62, 103, 179, 189, 173, 25, 173, 189, 87, 227, 184, 60, 85, 89, 35, 189, 23, 202, 147, 61, 167, 217, 27, 62, 253, 178, 197, 60, 15, 29, 166, 61, 152, 193, 172, 189, 114, 235, 143, 60, 233, 175, 92, 61, 188, 37, 182, 61, 96, 221, 188, 188, 30, 14, 83, 60, 99, 133, 4, 62, 106, 248, 152, 60, 236, 171, 237, 189, 69, 138, 188, 61, 166, 56, 231, 61, 135, 22, 204, 59, 34, 48, 218, 60, 133, 137, 51, 61, 143, 47, 236, 189, 37, 119, 182, 189, 118, 158, 228, 189, 69, 150, 11, 62, 102, 130, 44, 188, 130, 26, 43, 62, 11, 126, 128, 61, 233, 178, 47, 190, 195, 137, 50, 62, 40, 54, 228, 61, 198, 43, 99, 61, 70, 35, 52, 190, 9, 121, 25, 62, 176, 244, 216, 189, 131, 36, 26, 61, 22, 49, 146, 188, 213, 157, 243, 189, 245, 51, 194, 61, 105, 117, 171, 189, 42, 111, 117, 61, 216, 29, 39, 62, 166, 204, 1, 61, 71, 72, 26, 62, 157, 119, 204, 61, 150, 95, 157, 59, 0, 27, 221, 61, 169, 149, 154, 61, 103, 38, 100, 61, 34, 223, 68, 189, 136, 235, 83, 61, 16, 15, 52, 190, 141, 139, 1, 61, 68, 61, 44, 62, 143, 30, 11, 189, 89, 183, 19, 62, 215, 4, 39, 62, 21, 203, 47, 62, 123, 130, 30, 189, 231, 25, 5, 62, 17, 235, 173, 187, 206, 230, 222, 189, 62, 103, 10, 61, 153, 148, 203, 61, 84, 164, 27, 62, 130, 19, 16, 62, 194, 7, 46, 62, 207, 240, 136, 60, 132, 240, 250, 189, 56, 253, 209, 61, 179, 198, 134, 61, 173, 152, 6, 62, 174, 18, 16, 62, 24, 80, 239, 61, 166, 221, 107, 189, 149, 105, 21, 190, 20, 45, 149, 189, 46, 155, 10, 62, 98, 187, 36, 190, 117, 142, 12, 190, 74, 148, 241, 188, 181, 111, 73, 61, 87, 70, 117, 189, 131, 223, 12, 62, 71, 93, 157, 189, 172, 179, 231, 61, 31, 122, 122, 61, 6, 45, 141, 187, 223, 77, 139, 61, 170, 133, 245, 189, 202, 115, 82, 60, 183, 126, 10, 190, 176, 158, 10, 190, 218, 184, 130, 189, 196, 14, 195, 189, 187, 243, 15, 62, 34, 251, 203, 189, 222, 188, 197, 61, 222, 179, 136, 189, 19, 56, 254, 188, 162, 191, 150, 189, 79, 72, 41, 189, 116, 210, 246, 61, 224, 181, 71, 61, 166, 182, 144, 189, 187, 19, 62, 188, 30, 181, 52, 190, 56, 49, 5, 188, 191, 72, 35, 190, 209, 96, 127, 189, 245, 243, 60, 61, 130, 198, 141, 188, 158, 175, 210, 61, 5, 166, 2, 62, 246, 114, 51, 61, 32, 14, 253, 189, 223, 237, 131, 61, 20, 208, 208, 61, 77, 155, 44, 189, 162, 237, 172, 189, 87, 243, 163, 60, 58, 31, 11, 190, 44, 136, 49, 190, 238, 186, 15, 62, 111, 135, 23, 62, 73, 202, 40, 62, 25, 208, 156, 189, 77, 114, 46, 61, 121, 220, 19, 190, 132, 90, 140, 189, 229, 165, 114, 61, 42, 9, 54, 61, 48, 151, 237, 189, 65, 174, 75, 61, 5, 54, 48, 189, 12, 80, 204, 188, 127, 125, 14, 62, 139, 194, 82, 189, 118, 79, 95, 188, 63, 223, 219, 60, 141, 194, 22, 189, 41, 221, 223, 61, 195, 246, 174, 61, 9, 89, 140, 61, 240, 217, 218, 189, 4, 204, 29, 61, 243, 134, 2, 62, 254, 155, 49, 62, 196, 5, 143, 61, 1, 42, 157, 189, 157, 4, 54, 188, 135, 85, 40, 189, 145, 140, 251, 61, 254, 48, 65, 60, 5, 83, 40, 190, 25, 209, 96, 189, 13, 58, 130, 189, 3, 188, 164, 61, 156, 129, 180, 189, 231, 160, 101, 61, 78, 231, 8, 60, 40, 170, 158, 61, 16, 162, 71, 189, 229, 161, 13, 61, 221, 83, 175, 189, 11, 253, 3, 62, 187, 234, 237, 61, 221, 74, 29, 62, 102, 126, 239, 59, 65, 27, 31, 62, 210, 205, 169, 61, 69, 88, 25, 62, 210, 98, 174, 189, 23, 65, 159, 61, 175, 154, 35, 190, 204, 152, 75, 188, 112, 22, 198, 61, 249, 39, 194, 188, 93, 191, 239, 61, 118, 67, 215, 188, 34, 161, 93, 189, 241, 7, 136, 189, 99, 186, 52, 190, 16, 211, 246, 59, 39, 104, 217, 60, 76, 140, 151, 187, 43, 139, 82, 61, 156, 239, 42, 190, 234, 55, 16, 190, 17, 34, 241, 188, 217, 148, 196, 189, 226, 172, 37, 60, 38, 206, 217, 189, 68, 247, 12, 62, 63, 35, 2, 61, 228, 55, 255, 61, 42, 132, 36, 60, 119, 77, 243, 61, 180, 17, 33, 62, 208, 66, 252, 61, 37, 186, 10, 62, 218, 206, 103, 61, 203, 182, 230, 61, 165, 216, 176, 61, 25, 239, 35, 189, 238, 14, 22, 62, 130, 157, 137, 61, 139, 221, 196, 61, 150, 38, 30, 190, 189, 163, 66, 61, 32, 32, 148, 188, 78, 42, 32, 62, 143, 191, 11, 62, 27, 102, 29, 190, 172, 27, 98, 60, 182, 218, 113, 60, 252, 108, 196, 189, 182, 213, 91, 189, 195, 70, 2, 190, 181, 124, 88, 61, 238, 43, 50, 190, 231, 109, 216, 189, 16, 31, 237, 61, 78, 87, 57, 188, 161, 33, 175, 61, 28, 49, 234, 60, 52, 247, 44, 187, 199, 152, 39, 190, 59, 99, 10, 190, 106, 99, 16, 190, 177, 125, 40, 60, 58, 60, 63, 189, 126, 227, 30, 190, 143, 139, 48, 189, 5, 203, 149, 60, 156, 138, 169, 61, 235, 217, 238, 61, 161, 148, 48, 61, 246, 87, 2, 62, 86, 59, 52, 188, 21, 137, 191, 60, 55, 21, 39, 62, 172, 53, 44, 190, 148, 146, 43, 62, 67, 140, 141, 188, 50, 190, 12, 190, 70, 244, 187, 61, 153, 54, 203, 189, 40, 236, 6, 61, 137, 31, 122, 189, 194, 227, 44, 61, 116, 135, 44, 190, 126, 55, 1, 190, 26, 128, 247, 61, 68, 155, 42, 189, 234, 251, 22, 188, 230, 87, 211, 188, 61, 132, 18, 190, 7, 176, 166, 61, 177, 176, 252, 60, 185, 251, 243, 61, 151, 66, 177, 61, 247, 103, 50, 62, 29, 110, 134, 61, 162, 238, 245, 61, 245, 68, 46, 62, 10, 26, 81, 61, 195, 182, 149, 189, 93, 242, 17, 189, 84, 29, 119, 61, 180, 107, 82, 188, 81, 221, 43, 62, 44, 200, 51, 190, 99, 253, 160, 188, 60, 157, 150, 189, 68, 82, 70, 58, 35, 64, 80, 188, 87, 142, 165, 189, 179, 75, 129, 61, 46, 241, 105, 61, 161, 83, 250, 60, 145, 92, 124, 189, 20, 39, 76, 61, 33, 190, 0, 62, 149, 18, 253, 189, 70, 132, 160, 189, 210, 49, 88, 61, 38, 254, 34, 61, 137, 102, 244, 189, 194, 87, 204, 60, 85, 96, 158, 189, 234, 91, 116, 189, 44, 147, 197, 59, 193, 39, 7, 190, 244, 99, 248, 189, 72, 209, 37, 62, 130, 192, 157, 189, 62, 189, 233, 61, 4, 183, 39, 62, 78, 119, 67, 189, 40, 80, 38, 62, 140, 161, 151, 189, 114, 141, 16, 62, 222, 128, 19, 190, 130, 67, 23, 62, 246, 179, 86, 61, 127, 26, 144, 189, 86, 57, 54, 61, 43, 247, 80, 189, 53, 247, 153, 189, 254, 158, 151, 61, 94, 153, 5, 62, 233, 85, 16, 61, 246, 0, 162, 60, 221, 127, 5, 61, 18, 105, 5, 62, 95, 49, 247, 61, 192, 124, 185, 189, 140, 25, 38, 190, 191, 202, 35, 61, 217, 19, 180, 188, 83, 110, 33, 60, 124, 8, 11, 62, 55, 121, 4, 62, 206, 135, 94, 189, 249, 104, 0, 62, 6, 64, 150, 61, 198, 66, 36, 190, 81, 234, 46, 62, 217, 140, 61, 61, 4, 88, 42, 189, 55, 132, 5, 60, 101, 198, 13, 62, 174, 216, 252, 189, 229, 61, 36, 60, 155, 220, 38, 190, 126, 108, 187, 189, 111, 176, 19, 190, 211, 127, 150, 189, 251, 191, 239, 189, 244, 170, 213, 59, 163, 9, 27, 188, 181, 51, 112, 61, 173, 63, 190, 189, 124, 226, 238, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 195, 42, 61, 174, 224, 37, 60, 40, 181, 10, 190, 16, 42, 76, 61, 188, 218, 232, 189, 219, 28, 1, 190, 245, 133, 206, 189, 79, 251, 125, 188, 35, 118, 165, 61, 123, 195, 50, 190, 86, 245, 41, 190, 183, 153, 47, 62, 215, 208, 0, 62, 146, 74, 16, 190, 15, 36, 162, 189, 183, 218, 133, 61, 101, 88, 52, 189, 81, 7, 36, 189, 208, 160, 171, 189, 222, 106, 35, 190, 94, 171, 184, 189, 90, 44, 235, 60, 136, 93, 224, 60, 49, 46, 33, 190, 127, 150, 43, 62, 21, 217, 12, 62, 53, 176, 75, 189, 35, 24, 20, 190, 179, 52, 1, 190, 168, 220, 39, 189, 61, 67, 9, 190, 205, 188, 61, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 56, 49, 190, 226, 151, 234, 188, 52, 244, 232, 189, 85, 64, 170, 189, 41, 31, 140, 61, 25, 12, 35, 62, 127, 141, 129, 61, 13, 60, 55, 61, 11, 88, 22, 190, 193, 118, 34, 190, 232, 178, 11, 189, 89, 233, 229, 189, 48, 248, 10, 62, 70, 149, 20, 62, 114, 108, 213, 189, 20, 197, 8, 61, 72, 77, 234, 61, 62, 144, 44, 190, 57, 38, 144, 60, 10, 85, 47, 62, 25, 47, 47, 62, 50, 82, 15, 190, 207, 8, 26, 190, 215, 143, 164, 61, 28, 215, 183, 189, 176, 98, 165, 189, 176, 15, 70, 61, 39, 123, 245, 189, 125, 253, 118, 187, 47, 65, 100, 189, 113, 24, 227, 188, 30, 173, 135, 61, 127, 122, 105, 189, 169, 254, 212, 61, 98, 129, 142, 188, 246, 2, 160, 60, 8, 160, 41, 190, 225, 48, 37, 62, 143, 157, 220, 189, 198, 220, 103, 61, 249, 8, 147, 188, 165, 141, 166, 189, 178, 241, 45, 60, 167, 79, 224, 189, 42, 166, 8, 62, 184, 236, 224, 189, 9, 14, 69, 61, 93, 133, 230, 187, 182, 249, 24, 190, 164, 101, 12, 62, 100, 248, 229, 189, 54, 198, 231, 59, 113, 97, 174, 61, 36, 209, 249, 189, 114, 229, 250, 61, 116, 133, 212, 189, 0, 255, 95, 60, 156, 158, 249, 188, 63, 141, 46, 62, 46, 36, 184, 61, 7, 103, 156, 61, 64, 225, 254, 61, 148, 30, 121, 61, 98, 251, 167, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 158, 32, 190, 234, 103, 191, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {205, 211, 197, 190, 162, 126, 82, 190, 131, 0, 13, 64};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {20, 168, 127, 190, 255, 15, 75, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0019/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}