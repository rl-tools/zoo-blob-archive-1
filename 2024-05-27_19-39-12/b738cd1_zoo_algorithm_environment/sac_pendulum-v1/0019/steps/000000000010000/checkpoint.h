// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {216, 178, 240, 62, 254, 48, 106, 191, 118, 54, 203, 190, 117, 97, 45, 190, 219, 81, 27, 63, 3, 37, 34, 188, 168, 241, 30, 62, 210, 223, 240, 62, 212, 56, 146, 190, 221, 199, 153, 62, 143, 172, 238, 190, 121, 50, 251, 62, 81, 175, 250, 190, 34, 166, 255, 60, 181, 126, 219, 190, 44, 44, 56, 63, 13, 97, 107, 63, 238, 29, 140, 62, 153, 62, 140, 61, 120, 5, 205, 62, 234, 158, 30, 191, 4, 165, 132, 191, 138, 210, 134, 190, 225, 31, 179, 59, 123, 213, 92, 63, 212, 183, 209, 62, 66, 144, 105, 190, 28, 39, 77, 190, 126, 233, 143, 191, 163, 102, 136, 190, 23, 221, 150, 62, 220, 215, 146, 191, 92, 151, 16, 191, 104, 110, 11, 61, 82, 106, 121, 62, 67, 236, 215, 62, 204, 24, 239, 61, 43, 17, 53, 190, 238, 149, 242, 62, 223, 114, 2, 191, 227, 182, 47, 191, 171, 54, 29, 190, 19, 219, 57, 63, 183, 22, 79, 191, 228, 62, 157, 190, 193, 24, 61, 191, 50, 185, 50, 191, 145, 103, 98, 190, 138, 49, 22, 63, 16, 30, 184, 61, 231, 31, 21, 63, 226, 30, 121, 189, 68, 101, 58, 191, 195, 132, 142, 62, 185, 174, 199, 190, 194, 38, 222, 191, 178, 211, 201, 190, 210, 171, 32, 191, 127, 155, 80, 189, 106, 58, 195, 189, 132, 76, 134, 188, 33, 24, 51, 63, 166, 91, 46, 63, 200, 191, 107, 61, 209, 11, 62, 63, 22, 198, 126, 60, 197, 124, 193, 62, 141, 69, 30, 62, 23, 232, 20, 191, 170, 76, 253, 62, 140, 60, 114, 63, 65, 21, 2, 63, 176, 55, 31, 63, 26, 160, 67, 191, 227, 6, 40, 190, 31, 238, 232, 189, 180, 141, 53, 63, 59, 205, 116, 190, 172, 183, 190, 190, 152, 53, 164, 62, 233, 147, 65, 63, 142, 153, 157, 62, 132, 91, 53, 191, 143, 161, 51, 63, 117, 101, 170, 62, 33, 51, 73, 190, 198, 164, 57, 63, 51, 230, 193, 190, 59, 106, 106, 63, 161, 197, 43, 63, 148, 87, 0, 63, 41, 110, 78, 191, 250, 243, 105, 190, 151, 249, 57, 191, 142, 123, 43, 63, 25, 230, 234, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 220, 23, 191, 136, 107, 250, 62, 85, 210, 110, 62, 49, 251, 193, 61, 102, 138, 158, 190, 162, 124, 154, 190, 108, 204, 5, 63, 189, 173, 67, 62, 226, 122, 82, 62, 31, 159, 56, 190, 252, 249, 189, 62, 242, 67, 14, 191, 249, 115, 175, 187, 185, 119, 204, 62, 5, 234, 253, 61, 238, 165, 212, 190, 5, 176, 168, 62, 8, 170, 246, 62, 105, 168, 135, 190, 140, 68, 20, 63, 156, 90, 207, 61, 98, 13, 222, 189, 105, 16, 235, 62, 40, 104, 29, 191, 95, 81, 26, 191, 158, 28, 170, 62, 250, 196, 82, 190, 29, 144, 144, 62, 176, 120, 9, 190, 160, 157, 139, 190, 171, 125, 110, 189, 9, 206, 193, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 102, 147, 190, 114, 95, 16, 62, 117, 14, 181, 190, 147, 224, 122, 191, 203, 76, 54, 62, 77, 1, 120, 190, 108, 165, 45, 62, 36, 10, 146, 62, 90, 70, 128, 60, 88, 122, 42, 62, 14, 43, 88, 62, 101, 104, 227, 61, 115, 197, 112, 191, 58, 88, 15, 189, 195, 46, 135, 189, 68, 74, 81, 190, 160, 85, 68, 191, 137, 159, 237, 189, 109, 169, 56, 188, 236, 80, 14, 189, 22, 78, 111, 191, 229, 155, 37, 62, 62, 249, 51, 190, 178, 94, 141, 61, 81, 27, 131, 63, 96, 225, 76, 188, 229, 213, 165, 191, 176, 212, 8, 191, 144, 27, 104, 190, 253, 203, 153, 191, 113, 155, 174, 190, 194, 45, 156, 62, 181, 191, 131, 61, 197, 129, 69, 190, 142, 43, 235, 188, 177, 221, 40, 190, 174, 126, 54, 189, 68, 131, 241, 61, 123, 113, 212, 61, 172, 106, 13, 190, 171, 86, 48, 61, 42, 114, 209, 60, 32, 145, 151, 61, 128, 98, 185, 189, 207, 5, 228, 188, 222, 33, 203, 189, 57, 175, 64, 190, 106, 241, 25, 61, 21, 36, 108, 61, 136, 154, 17, 190, 22, 113, 7, 62, 163, 87, 72, 190, 217, 129, 232, 189, 8, 165, 26, 60, 193, 16, 93, 190, 239, 55, 141, 189, 251, 63, 60, 61, 106, 61, 40, 190, 37, 28, 52, 190, 125, 197, 204, 189, 82, 130, 216, 188, 234, 228, 9, 190, 139, 219, 86, 190, 52, 94, 122, 189, 98, 182, 184, 189, 49, 30, 43, 190, 255, 34, 96, 61, 117, 134, 207, 61, 208, 59, 12, 187, 26, 119, 202, 61, 159, 10, 37, 190, 183, 226, 175, 61, 81, 13, 21, 190, 114, 211, 43, 190, 31, 82, 207, 61, 167, 241, 179, 61, 156, 0, 153, 189, 177, 39, 28, 190, 112, 226, 158, 189, 124, 224, 70, 60, 105, 100, 53, 60, 119, 200, 217, 61, 235, 129, 9, 61, 207, 35, 38, 189, 115, 131, 135, 189, 185, 205, 47, 190, 140, 178, 5, 190, 115, 18, 242, 61, 47, 26, 43, 189, 102, 191, 159, 61, 187, 195, 186, 184, 216, 26, 169, 189, 4, 2, 142, 189, 167, 169, 167, 189, 36, 235, 201, 61, 115, 9, 84, 189, 51, 37, 253, 190, 0, 26, 130, 190, 247, 153, 233, 190, 227, 125, 73, 62, 200, 138, 172, 190, 55, 84, 141, 190, 126, 230, 194, 190, 47, 143, 155, 62, 60, 44, 57, 190, 40, 149, 159, 62, 246, 26, 33, 60, 9, 39, 5, 190, 28, 225, 199, 61, 83, 90, 208, 62, 225, 28, 2, 191, 162, 178, 229, 62, 118, 46, 245, 188, 84, 165, 198, 61, 14, 49, 194, 62, 165, 174, 202, 188, 124, 143, 20, 190, 213, 67, 158, 190, 142, 148, 41, 191, 10, 248, 171, 190, 57, 211, 74, 190, 191, 30, 130, 190, 250, 78, 4, 190, 219, 99, 99, 61, 6, 196, 242, 61, 182, 234, 170, 190, 248, 84, 255, 190, 253, 224, 130, 61, 182, 7, 178, 189, 199, 31, 153, 62, 141, 118, 206, 61, 52, 37, 10, 62, 246, 153, 199, 189, 57, 122, 203, 189, 114, 88, 160, 189, 238, 75, 60, 57, 185, 225, 172, 62, 26, 69, 147, 190, 64, 179, 249, 61, 63, 110, 116, 189, 199, 147, 97, 62, 137, 239, 96, 62, 206, 161, 147, 62, 198, 25, 50, 62, 203, 126, 107, 62, 71, 100, 223, 61, 155, 6, 199, 189, 211, 5, 36, 62, 234, 17, 134, 60, 4, 238, 238, 61, 166, 7, 20, 62, 135, 190, 92, 61, 222, 98, 14, 191, 224, 82, 234, 61, 157, 144, 158, 62, 254, 241, 82, 190, 215, 24, 49, 190, 201, 223, 155, 61, 126, 253, 235, 61, 41, 194, 227, 61, 45, 8, 1, 60, 186, 240, 54, 190, 3, 237, 184, 189, 150, 189, 81, 61, 186, 80, 236, 61, 19, 38, 15, 62, 22, 101, 220, 61, 136, 151, 51, 190, 44, 90, 134, 189, 72, 198, 154, 60, 1, 8, 55, 190, 60, 27, 40, 62, 6, 209, 32, 60, 224, 33, 163, 189, 69, 52, 249, 61, 189, 215, 149, 189, 121, 254, 192, 189, 59, 171, 143, 188, 200, 159, 73, 190, 229, 177, 143, 61, 92, 76, 4, 61, 142, 69, 31, 190, 56, 180, 164, 61, 86, 200, 192, 189, 12, 227, 162, 60, 44, 34, 250, 189, 114, 87, 171, 189, 20, 66, 8, 190, 76, 177, 202, 61, 71, 58, 130, 189, 125, 234, 239, 60, 69, 141, 208, 60, 202, 103, 2, 60, 73, 242, 86, 189, 41, 206, 71, 62, 250, 17, 160, 61, 142, 26, 32, 189, 141, 108, 21, 190, 94, 152, 156, 62, 142, 42, 186, 61, 47, 178, 167, 62, 142, 173, 236, 188, 202, 13, 228, 61, 51, 247, 60, 190, 170, 203, 190, 60, 203, 26, 36, 62, 203, 0, 96, 62, 14, 204, 139, 61, 228, 192, 10, 62, 50, 203, 255, 61, 160, 230, 201, 61, 113, 125, 22, 189, 242, 119, 36, 187, 178, 77, 107, 61, 156, 58, 45, 61, 47, 156, 31, 191, 121, 211, 32, 191, 10, 51, 34, 190, 66, 77, 24, 190, 122, 136, 150, 62, 201, 154, 165, 189, 54, 96, 224, 190, 37, 62, 175, 62, 142, 245, 81, 190, 157, 241, 93, 62, 118, 59, 132, 62, 111, 138, 10, 62, 229, 110, 213, 189, 215, 42, 160, 62, 165, 7, 244, 62, 13, 49, 90, 61, 172, 224, 173, 188, 254, 190, 118, 62, 171, 212, 143, 62, 114, 85, 22, 62, 117, 204, 141, 60, 120, 20, 248, 189, 66, 117, 201, 189, 55, 139, 128, 190, 180, 181, 161, 189, 196, 104, 175, 189, 57, 19, 107, 190, 152, 199, 48, 62, 222, 128, 240, 189, 79, 161, 113, 62, 228, 229, 244, 62, 156, 239, 63, 61, 209, 130, 96, 62, 181, 149, 142, 191, 205, 81, 13, 61, 38, 109, 94, 61, 41, 106, 155, 61, 22, 103, 187, 61, 186, 119, 143, 190, 29, 108, 132, 190, 31, 94, 164, 62, 17, 229, 140, 190, 124, 133, 85, 61, 66, 59, 164, 190, 218, 221, 115, 191, 156, 172, 174, 62, 240, 227, 146, 62, 64, 4, 19, 62, 21, 58, 91, 62, 18, 45, 34, 188, 212, 60, 166, 61, 181, 192, 177, 61, 133, 212, 121, 62, 150, 234, 119, 191, 28, 207, 184, 61, 88, 198, 112, 190, 133, 1, 140, 62, 76, 114, 41, 191, 139, 69, 206, 190, 156, 45, 49, 61, 248, 119, 2, 62, 249, 76, 148, 191, 102, 26, 158, 62, 205, 119, 132, 190, 150, 87, 52, 62, 106, 110, 43, 191, 111, 248, 40, 58, 58, 164, 137, 191, 100, 0, 229, 61, 211, 231, 75, 190, 20, 217, 202, 191, 228, 135, 49, 190, 205, 199, 30, 62, 112, 118, 158, 61, 35, 118, 123, 61, 68, 110, 21, 62, 140, 205, 160, 60, 190, 138, 50, 61, 134, 216, 50, 61, 1, 201, 253, 189, 132, 21, 172, 61, 51, 225, 251, 61, 179, 4, 41, 190, 19, 46, 8, 190, 226, 75, 252, 60, 57, 188, 147, 60, 233, 45, 212, 61, 227, 227, 7, 60, 220, 36, 202, 61, 164, 242, 250, 60, 5, 41, 163, 61, 136, 83, 153, 61, 140, 106, 144, 188, 182, 128, 62, 188, 10, 65, 192, 61, 122, 120, 43, 190, 179, 122, 157, 189, 22, 208, 251, 189, 117, 35, 216, 59, 147, 75, 32, 190, 148, 217, 23, 190, 140, 224, 2, 190, 101, 187, 189, 61, 196, 60, 173, 187, 205, 127, 231, 189, 137, 225, 153, 187, 240, 231, 246, 189, 179, 234, 37, 62, 8, 66, 254, 61, 88, 152, 209, 189, 46, 13, 6, 62, 44, 176, 39, 190, 176, 109, 163, 189, 79, 134, 137, 189, 91, 58, 173, 189, 203, 143, 223, 189, 177, 157, 223, 189, 180, 60, 32, 62, 109, 222, 0, 190, 163, 161, 233, 59, 87, 97, 48, 62, 183, 43, 147, 60, 220, 249, 220, 60, 239, 199, 179, 61, 170, 223, 196, 188, 97, 185, 79, 61, 112, 23, 30, 188, 163, 152, 63, 188, 103, 127, 189, 186, 179, 10, 27, 61, 108, 30, 205, 61, 70, 132, 112, 189, 240, 84, 19, 61, 12, 155, 85, 190, 87, 70, 9, 190, 114, 43, 244, 188, 213, 85, 19, 62, 126, 144, 208, 191, 101, 43, 193, 61, 128, 76, 172, 189, 189, 230, 71, 62, 156, 91, 54, 190, 175, 21, 10, 62, 245, 69, 135, 190, 48, 38, 10, 191, 84, 94, 171, 62, 158, 163, 179, 190, 202, 100, 135, 190, 97, 170, 132, 189, 164, 9, 101, 189, 150, 251, 113, 191, 127, 132, 172, 62, 105, 249, 132, 190, 85, 157, 171, 62, 52, 37, 13, 189, 81, 18, 71, 191, 65, 47, 36, 190, 143, 116, 69, 61, 6, 12, 103, 189, 77, 21, 133, 187, 127, 96, 64, 190, 230, 65, 92, 191, 145, 18, 239, 188, 47, 127, 15, 62, 243, 228, 152, 189, 236, 8, 76, 61, 79, 237, 15, 190, 55, 92, 103, 61, 153, 191, 124, 190, 96, 141, 135, 62, 25, 160, 75, 62, 87, 78, 25, 189, 210, 218, 101, 62, 148, 101, 51, 191, 233, 198, 24, 191, 18, 166, 25, 191, 23, 62, 134, 59, 101, 108, 158, 190, 59, 200, 128, 191, 220, 3, 154, 191, 171, 137, 136, 190, 135, 14, 195, 61, 14, 78, 232, 61, 73, 66, 104, 61, 113, 172, 22, 63, 17, 15, 181, 189, 61, 191, 12, 62, 84, 83, 7, 192, 194, 248, 243, 61, 218, 8, 237, 61, 240, 161, 166, 190, 163, 3, 54, 191, 118, 122, 72, 190, 181, 68, 137, 62, 79, 179, 94, 61, 179, 202, 161, 62, 25, 164, 74, 190, 242, 244, 127, 190, 74, 47, 117, 61, 39, 55, 31, 61, 170, 217, 179, 62, 17, 88, 73, 191, 35, 147, 149, 62, 116, 27, 69, 62, 15, 201, 124, 188, 208, 78, 240, 190, 35, 222, 60, 62, 225, 147, 228, 190, 187, 210, 113, 190, 78, 245, 0, 62, 12, 80, 149, 189, 209, 51, 59, 187, 250, 65, 131, 189, 158, 156, 33, 62, 69, 43, 104, 62, 243, 177, 116, 189, 93, 110, 80, 63, 23, 93, 157, 61, 24, 25, 155, 189, 107, 20, 184, 61, 243, 77, 132, 62, 17, 125, 52, 62, 116, 70, 248, 62, 28, 51, 75, 190, 217, 111, 233, 188, 204, 242, 42, 190, 28, 124, 45, 61, 55, 56, 83, 189, 240, 134, 169, 61, 241, 208, 38, 62, 26, 13, 62, 62, 212, 55, 127, 189, 11, 186, 188, 188, 95, 126, 103, 58, 103, 24, 46, 62, 26, 215, 182, 190, 157, 27, 5, 191, 140, 90, 41, 61, 124, 138, 169, 62, 29, 121, 231, 187, 171, 163, 24, 190, 221, 128, 183, 61, 53, 218, 131, 62, 238, 140, 30, 62, 245, 26, 129, 190, 202, 88, 209, 189, 116, 168, 231, 61, 198, 170, 117, 190, 45, 26, 104, 190, 159, 101, 76, 190, 162, 49, 201, 188, 224, 78, 126, 62, 5, 3, 164, 62, 178, 98, 50, 191, 25, 94, 31, 63, 83, 3, 130, 190, 6, 108, 204, 62, 94, 254, 91, 63, 233, 39, 17, 190, 217, 209, 31, 191, 132, 107, 40, 63, 72, 21, 7, 62, 55, 75, 160, 191, 149, 48, 28, 190, 84, 251, 188, 62, 129, 85, 201, 189, 96, 178, 40, 62, 4, 40, 156, 189, 143, 211, 165, 62, 241, 30, 19, 190, 198, 59, 226, 189, 32, 89, 76, 61, 194, 188, 190, 60, 26, 99, 13, 62, 108, 121, 145, 190, 129, 31, 245, 60, 74, 97, 144, 190, 255, 47, 172, 60, 138, 87, 159, 60, 132, 238, 247, 61, 236, 236, 163, 62, 245, 100, 144, 62, 69, 170, 69, 62, 151, 107, 105, 190, 62, 173, 41, 61, 71, 203, 93, 62, 103, 142, 211, 189, 22, 124, 77, 62, 86, 250, 10, 190, 7, 207, 45, 191, 188, 47, 29, 62, 2, 111, 10, 62, 191, 118, 131, 190, 90, 183, 17, 190, 208, 220, 89, 62, 158, 27, 17, 62, 143, 13, 1, 62, 4, 87, 135, 189, 210, 5, 174, 59, 180, 240, 111, 189, 162, 55, 85, 62, 111, 6, 207, 189, 209, 17, 136, 190, 132, 122, 73, 62, 38, 48, 190, 59, 133, 55, 228, 61, 113, 203, 26, 190, 227, 241, 226, 61, 49, 226, 164, 190, 69, 246, 195, 62, 137, 119, 140, 61, 49, 134, 83, 62, 184, 4, 96, 62, 80, 38, 73, 62, 97, 24, 203, 61, 52, 160, 25, 190, 77, 232, 46, 62, 50, 19, 224, 60, 39, 176, 207, 190, 21, 166, 247, 61, 204, 163, 129, 189, 177, 177, 254, 190, 197, 150, 71, 187, 226, 116, 123, 62, 58, 99, 128, 190, 213, 54, 132, 190, 53, 21, 93, 61, 214, 242, 163, 61, 208, 176, 89, 57, 143, 135, 115, 62, 134, 85, 73, 191, 117, 143, 131, 190, 181, 147, 137, 62, 233, 228, 214, 190, 51, 49, 51, 190, 177, 124, 208, 189, 254, 48, 219, 190, 53, 22, 215, 190, 10, 96, 136, 61, 7, 13, 14, 190, 49, 128, 66, 189, 36, 60, 187, 189, 83, 210, 72, 189, 27, 10, 130, 62, 97, 46, 181, 190, 16, 73, 53, 189, 87, 53, 29, 62, 37, 36, 71, 59, 241, 74, 38, 190, 113, 39, 3, 191, 13, 26, 1, 191, 127, 43, 41, 190, 96, 173, 145, 61, 253, 227, 91, 63, 171, 112, 91, 191, 214, 226, 229, 188, 214, 160, 178, 189, 151, 204, 112, 188, 173, 8, 201, 189, 89, 86, 137, 62, 134, 107, 119, 190, 238, 44, 136, 61, 40, 24, 52, 190, 29, 83, 24, 62, 27, 180, 7, 190, 119, 41, 155, 61, 187, 134, 10, 61, 186, 64, 249, 189, 12, 179, 72, 61, 13, 206, 62, 60, 40, 208, 24, 190, 141, 104, 72, 60, 49, 159, 28, 190, 130, 2, 29, 61, 157, 31, 152, 61, 73, 65, 84, 61, 220, 228, 182, 189, 201, 95, 34, 62, 61, 45, 39, 61, 187, 253, 67, 189, 134, 143, 234, 60, 189, 110, 221, 188, 156, 198, 139, 60, 58, 36, 115, 60, 167, 73, 7, 62, 19, 62, 44, 62, 207, 44, 44, 190, 243, 12, 42, 190, 66, 31, 18, 190, 141, 94, 158, 61, 180, 155, 35, 59, 11, 125, 9, 190, 29, 145, 227, 60, 57, 213, 219, 61, 44, 186, 119, 189, 131, 220, 107, 60, 187, 97, 151, 190, 141, 27, 12, 62, 135, 97, 12, 191, 177, 253, 56, 61, 118, 62, 68, 62, 202, 231, 160, 62, 195, 98, 230, 61, 140, 28, 111, 62, 6, 143, 251, 189, 194, 95, 205, 189, 28, 209, 35, 61, 80, 162, 175, 189, 107, 99, 219, 188, 184, 196, 43, 190, 166, 200, 118, 185, 210, 139, 196, 189, 152, 44, 171, 188, 196, 165, 100, 190, 2, 165, 116, 62, 142, 25, 242, 60, 50, 115, 17, 190, 84, 163, 75, 61, 246, 80, 225, 189, 114, 241, 202, 189, 254, 171, 42, 62, 155, 228, 129, 190, 28, 183, 148, 190, 151, 39, 119, 61, 18, 245, 90, 189, 155, 192, 2, 62, 155, 140, 30, 189, 12, 237, 35, 62, 161, 106, 228, 61, 113, 177, 130, 62, 242, 254, 62, 191, 173, 110, 40, 61, 33, 82, 95, 190, 138, 65, 2, 189, 174, 11, 61, 190, 80, 52, 163, 60, 97, 204, 214, 190, 116, 167, 40, 62, 28, 169, 33, 190, 24, 208, 163, 62, 146, 246, 188, 61, 180, 222, 207, 61, 133, 235, 220, 61, 84, 251, 202, 190, 32, 60, 38, 190, 119, 78, 255, 61, 136, 58, 150, 189, 44, 57, 128, 62, 176, 36, 68, 190, 52, 194, 149, 190, 253, 103, 136, 62, 63, 218, 94, 62, 160, 70, 104, 189, 181, 42, 150, 190, 12, 176, 64, 61, 232, 83, 150, 62, 101, 119, 66, 190, 13, 204, 47, 191, 204, 107, 172, 189, 253, 69, 243, 189, 109, 114, 178, 189, 181, 91, 165, 61, 91, 137, 206, 62, 247, 240, 226, 60, 185, 161, 230, 190, 90, 202, 248, 62, 47, 31, 195, 188, 203, 168, 156, 61, 252, 242, 159, 62, 165, 64, 140, 189, 196, 94, 151, 191, 187, 88, 28, 190, 121, 100, 200, 189, 194, 181, 25, 62, 215, 193, 163, 60, 232, 148, 136, 189, 141, 120, 13, 191, 56, 16, 36, 61, 149, 83, 224, 189, 32, 250, 246, 59, 215, 87, 95, 62, 111, 142, 137, 191, 163, 114, 57, 190, 130, 79, 27, 190, 20, 214, 132, 62, 220, 88, 210, 61, 195, 57, 147, 190, 209, 15, 153, 190, 93, 122, 166, 190, 244, 130, 200, 189, 150, 84, 10, 190, 204, 88, 220, 189, 64, 7, 111, 190, 153, 30, 127, 62, 1, 159, 242, 62, 207, 176, 123, 61, 29, 219, 229, 190, 98, 60, 187, 62, 77, 224, 225, 61, 60, 41, 248, 60, 164, 12, 151, 62, 169, 33, 69, 190, 70, 198, 178, 190, 116, 72, 91, 190, 138, 195, 157, 190, 150, 13, 56, 62, 156, 172, 3, 189, 240, 189, 181, 62, 110, 2, 143, 190, 81, 37, 216, 189, 82, 248, 112, 189, 125, 165, 223, 60, 2, 247, 130, 62, 82, 98, 22, 63, 129, 114, 90, 190, 127, 180, 169, 190, 28, 209, 154, 62, 146, 65, 21, 63, 221, 239, 80, 190, 5, 192, 48, 60, 150, 138, 79, 190, 89, 210, 34, 188, 111, 38, 2, 190, 42, 164, 125, 62, 126, 68, 49, 61, 126, 47, 83, 191, 100, 111, 199, 190, 143, 57, 126, 62, 76, 97, 162, 61, 206, 54, 118, 62, 129, 192, 57, 191, 220, 117, 92, 62, 154, 102, 233, 189, 85, 171, 249, 61, 160, 22, 205, 62, 147, 193, 194, 62, 40, 121, 156, 190, 40, 113, 158, 61, 107, 119, 13, 60, 85, 113, 120, 191, 35, 10, 96, 190, 119, 178, 28, 62, 25, 61, 34, 190, 69, 233, 177, 60, 116, 73, 249, 189, 156, 247, 228, 62, 21, 82, 154, 190, 205, 196, 35, 62, 120, 214, 223, 188, 158, 153, 251, 61, 252, 0, 186, 61, 15, 218, 137, 62, 75, 7, 113, 57, 129, 134, 21, 191, 250, 63, 226, 61, 136, 84, 173, 190, 155, 180, 75, 191, 236, 223, 198, 61, 12, 134, 200, 62, 93, 172, 130, 62, 220, 197, 142, 189, 13, 25, 189, 62, 42, 115, 45, 62, 133, 16, 222, 61, 1, 226, 238, 61, 128, 97, 194, 190, 37, 103, 61, 62, 232, 69, 160, 190, 39, 54, 179, 190, 90, 44, 187, 189, 99, 53, 94, 190, 246, 24, 99, 62, 135, 42, 242, 59, 238, 141, 13, 191, 110, 87, 179, 62, 21, 56, 46, 189, 240, 80, 162, 62, 189, 102, 57, 63, 187, 36, 255, 61, 114, 14, 167, 191, 108, 249, 231, 62, 70, 15, 47, 63, 121, 79, 152, 191, 172, 79, 156, 190, 170, 13, 236, 61, 33, 163, 79, 191, 236, 126, 27, 190, 191, 184, 63, 62, 216, 54, 114, 62, 191, 178, 180, 61, 218, 123, 33, 190, 58, 37, 185, 59, 115, 88, 218, 190, 38, 146, 164, 62, 74, 251, 176, 190, 59, 63, 209, 189, 10, 116, 152, 190, 136, 196, 143, 61, 25, 222, 131, 190, 91, 190, 202, 61, 45, 62, 86, 61, 213, 144, 182, 61, 157, 145, 218, 60, 40, 72, 242, 190, 153, 90, 53, 190, 168, 18, 7, 189, 22, 135, 128, 187, 18, 173, 26, 62, 115, 247, 239, 190, 164, 181, 21, 191, 63, 135, 239, 61, 122, 110, 181, 61, 19, 4, 16, 62, 226, 87, 27, 190, 67, 244, 144, 190, 97, 181, 76, 189, 138, 99, 134, 187, 167, 92, 43, 62, 206, 173, 59, 191, 40, 203, 27, 190, 79, 187, 7, 62, 135, 20, 188, 189, 212, 140, 130, 191, 1, 56, 184, 187, 16, 10, 246, 186, 139, 60, 159, 62, 252, 102, 144, 190, 24, 253, 222, 60, 32, 217, 71, 190, 135, 159, 85, 62, 168, 116, 116, 62, 84, 163, 169, 62, 14, 113, 83, 62, 39, 91, 52, 62, 119, 22, 172, 62, 236, 90, 221, 188, 159, 24, 103, 190, 235, 208, 210, 188, 26, 120, 136, 190, 80, 132, 59, 189, 1, 215, 189, 190, 10, 104, 145, 190, 220, 11, 124, 190, 212, 52, 98, 189, 10, 89, 175, 61, 16, 241, 48, 190, 145, 180, 200, 190, 80, 236, 136, 62, 218, 63, 140, 191, 100, 108, 107, 61, 113, 247, 227, 190, 169, 149, 90, 191, 82, 66, 37, 189, 175, 163, 233, 190, 153, 201, 122, 61, 91, 153, 217, 190, 164, 131, 173, 61, 218, 205, 117, 189, 77, 62, 248, 189, 180, 237, 34, 62, 189, 155, 71, 189, 133, 238, 152, 62, 225, 25, 55, 62, 40, 108, 195, 61, 10, 135, 215, 190, 108, 41, 220, 61, 198, 133, 116, 62, 135, 74, 74, 62, 15, 237, 185, 186, 105, 82, 86, 62, 107, 207, 115, 191, 105, 134, 157, 189, 61, 153, 60, 190, 160, 29, 137, 62, 31, 150, 65, 190, 34, 192, 169, 62, 139, 28, 32, 62, 234, 120, 39, 190, 123, 73, 4, 62, 4, 192, 134, 189, 44, 104, 107, 190, 182, 213, 91, 189, 245, 68, 27, 190, 244, 39, 86, 61, 140, 101, 62, 190, 222, 217, 216, 189, 16, 31, 237, 61, 228, 92, 216, 188, 154, 208, 112, 61, 28, 49, 234, 60, 23, 161, 83, 187, 151, 228, 48, 190, 75, 24, 11, 190, 12, 20, 31, 190, 131, 220, 148, 188, 58, 60, 63, 189, 126, 227, 30, 190, 70, 86, 123, 189, 163, 76, 244, 187, 55, 105, 166, 61, 22, 10, 189, 61, 19, 119, 185, 60, 246, 87, 2, 62, 86, 59, 52, 188, 21, 137, 191, 60, 55, 21, 39, 62, 39, 222, 70, 190, 191, 222, 21, 62, 232, 158, 221, 188, 185, 58, 15, 190, 185, 56, 147, 61, 153, 54, 203, 189, 168, 39, 172, 59, 50, 147, 7, 62, 20, 236, 51, 191, 155, 105, 101, 190, 250, 97, 123, 188, 62, 205, 103, 189, 122, 223, 204, 191, 162, 213, 48, 189, 146, 54, 106, 190, 248, 78, 151, 189, 161, 7, 48, 190, 254, 192, 182, 61, 227, 116, 168, 61, 129, 25, 162, 61, 137, 89, 156, 62, 119, 69, 134, 62, 32, 174, 202, 62, 175, 149, 45, 62, 2, 114, 149, 62, 69, 59, 134, 190, 175, 166, 100, 190, 218, 232, 244, 60, 223, 218, 206, 190, 90, 195, 23, 62, 169, 36, 8, 191, 251, 8, 104, 62, 116, 40, 51, 191, 103, 211, 188, 61, 13, 87, 54, 61, 165, 55, 85, 190, 216, 221, 251, 61, 160, 126, 191, 62, 104, 84, 106, 191, 27, 160, 104, 191, 155, 185, 47, 188, 18, 95, 82, 60, 37, 215, 129, 190, 212, 226, 3, 63, 47, 246, 221, 62, 166, 129, 183, 62, 236, 4, 155, 190, 14, 48, 12, 63, 193, 53, 23, 62, 248, 183, 57, 61, 253, 182, 166, 62, 86, 255, 169, 190, 96, 68, 100, 191, 91, 51, 94, 190, 133, 79, 230, 190, 158, 63, 25, 62, 205, 218, 31, 62, 229, 226, 204, 60, 210, 116, 222, 187, 49, 231, 107, 190, 47, 254, 78, 61, 25, 180, 88, 189, 159, 3, 196, 62, 103, 247, 55, 191, 107, 168, 160, 188, 138, 251, 108, 190, 105, 70, 110, 62, 209, 13, 188, 62, 38, 194, 39, 190, 63, 254, 173, 190, 99, 191, 234, 189, 101, 15, 105, 62, 23, 38, 140, 188, 113, 215, 97, 62, 113, 229, 167, 62, 96, 222, 188, 189, 185, 164, 119, 191, 32, 16, 219, 61, 1, 109, 127, 189, 223, 201, 3, 190, 86, 6, 210, 188, 8, 81, 244, 61, 158, 232, 145, 190, 229, 64, 174, 62, 190, 192, 121, 61, 157, 184, 202, 61, 60, 39, 204, 62, 92, 163, 237, 61, 109, 175, 207, 60, 255, 181, 107, 190, 24, 161, 186, 61, 72, 247, 247, 60, 121, 62, 151, 190, 239, 215, 60, 189, 247, 175, 139, 190, 247, 24, 211, 190, 233, 207, 48, 190, 94, 208, 28, 62, 161, 220, 82, 190, 120, 163, 183, 190, 158, 3, 155, 62, 173, 92, 91, 62, 214, 215, 13, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 197, 241, 61, 232, 106, 40, 189, 40, 181, 10, 190, 14, 103, 13, 62, 183, 128, 84, 61, 73, 16, 45, 190, 228, 247, 150, 60, 111, 98, 182, 60, 40, 71, 118, 62, 123, 195, 50, 190, 61, 5, 74, 190, 250, 191, 168, 62, 183, 239, 83, 62, 138, 225, 223, 188, 94, 91, 21, 61, 116, 35, 49, 62, 7, 89, 160, 61, 59, 19, 33, 190, 137, 66, 206, 189, 168, 97, 68, 190, 26, 174, 235, 189, 126, 106, 69, 60, 88, 244, 19, 190, 245, 249, 114, 190, 209, 135, 164, 62, 192, 55, 124, 62, 225, 119, 19, 190, 155, 181, 63, 190, 172, 23, 28, 190, 95, 221, 17, 190, 13, 197, 236, 189, 191, 14, 148, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 157, 69, 191, 0, 170, 30, 188, 52, 244, 232, 189, 69, 87, 65, 63, 30, 119, 236, 61, 80, 47, 10, 62, 192, 223, 53, 62, 235, 227, 175, 62, 120, 225, 99, 191, 193, 118, 34, 190, 145, 93, 41, 188, 22, 73, 26, 190, 241, 86, 150, 63, 198, 228, 94, 62, 36, 95, 67, 191, 14, 210, 170, 61, 185, 236, 244, 61, 120, 190, 140, 191, 188, 122, 131, 60, 214, 59, 86, 62, 50, 190, 205, 62, 95, 112, 17, 191, 44, 58, 12, 191, 154, 233, 248, 62, 83, 206, 12, 191, 149, 14, 137, 60, 102, 90, 19, 63, 169, 22, 140, 190, 83, 188, 27, 58, 114, 127, 132, 63, 147, 63, 39, 191, 58, 249, 175, 62, 242, 28, 63, 61, 175, 177, 130, 61, 98, 129, 142, 188, 203, 85, 55, 62, 79, 173, 114, 190, 240, 27, 28, 62, 205, 82, 115, 190, 43, 43, 127, 62, 179, 133, 184, 188, 165, 141, 166, 189, 114, 199, 96, 188, 246, 64, 29, 191, 192, 144, 104, 62, 190, 95, 184, 188, 80, 175, 231, 189, 177, 38, 37, 190, 106, 236, 90, 190, 155, 216, 105, 62, 100, 151, 223, 189, 68, 217, 33, 62, 201, 162, 38, 62, 119, 233, 13, 190, 191, 19, 152, 62, 222, 56, 237, 186, 237, 23, 168, 189, 41, 245, 244, 190, 254, 82, 242, 60, 91, 13, 17, 62, 64, 209, 98, 61, 91, 69, 122, 62, 90, 145, 168, 61, 125, 184, 50, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {175, 115, 88, 190, 186, 127, 131, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {93, 239, 200, 190, 166, 50, 163, 63, 14, 93, 238, 60};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {112, 104, 85, 63, 60, 234, 208, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0019/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}