// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 58, 192, 62, 13, 51, 88, 191, 194, 128, 221, 190, 218, 122, 33, 190, 165, 21, 35, 63, 166, 161, 246, 188, 137, 46, 167, 61, 77, 252, 201, 62, 164, 134, 126, 190, 237, 248, 198, 62, 48, 1, 21, 191, 179, 131, 244, 62, 205, 103, 71, 190, 56, 173, 134, 59, 213, 179, 213, 190, 19, 7, 48, 63, 241, 146, 65, 63, 236, 191, 148, 62, 156, 106, 179, 61, 193, 207, 29, 62, 168, 197, 19, 191, 95, 49, 137, 191, 241, 210, 237, 189, 79, 87, 39, 189, 110, 155, 101, 63, 158, 206, 182, 62, 106, 189, 112, 190, 13, 128, 111, 190, 61, 168, 47, 191, 161, 43, 206, 190, 249, 99, 85, 62, 170, 0, 153, 191, 118, 63, 15, 191, 197, 133, 178, 59, 4, 29, 160, 62, 100, 70, 225, 62, 248, 189, 9, 62, 215, 172, 77, 190, 77, 128, 254, 62, 27, 235, 1, 191, 246, 188, 212, 190, 186, 146, 148, 189, 140, 101, 54, 63, 193, 14, 85, 191, 31, 90, 159, 190, 195, 145, 227, 190, 17, 9, 13, 191, 6, 42, 39, 190, 224, 152, 20, 63, 182, 229, 177, 61, 162, 141, 20, 63, 79, 212, 198, 189, 235, 53, 34, 191, 0, 3, 95, 62, 135, 40, 200, 190, 178, 168, 190, 191, 151, 233, 224, 190, 135, 42, 37, 191, 207, 20, 104, 188, 18, 137, 73, 189, 119, 228, 191, 189, 74, 174, 54, 63, 125, 196, 40, 63, 47, 29, 26, 62, 67, 101, 253, 62, 150, 204, 234, 188, 227, 238, 214, 62, 218, 252, 146, 189, 234, 20, 9, 191, 192, 163, 174, 62, 213, 144, 110, 63, 206, 40, 5, 63, 215, 141, 34, 63, 139, 184, 18, 191, 64, 23, 9, 190, 238, 248, 210, 189, 92, 248, 73, 63, 35, 104, 170, 189, 245, 150, 136, 190, 16, 4, 91, 62, 218, 242, 66, 63, 200, 156, 51, 62, 52, 216, 30, 191, 218, 99, 51, 63, 84, 99, 167, 62, 41, 133, 27, 190, 65, 159, 56, 63, 226, 165, 204, 190, 135, 27, 69, 63, 242, 193, 47, 63, 27, 182, 1, 63, 49, 212, 93, 191, 239, 93, 40, 190, 153, 181, 33, 191, 54, 195, 12, 63, 252, 35, 14, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 65, 240, 190, 206, 9, 235, 62, 89, 186, 165, 62, 184, 80, 144, 61, 244, 134, 169, 190, 133, 13, 61, 190, 115, 55, 242, 62, 26, 222, 46, 62, 60, 40, 57, 62, 111, 149, 177, 189, 106, 242, 13, 63, 131, 57, 213, 190, 221, 242, 136, 189, 72, 53, 208, 62, 241, 247, 39, 62, 5, 243, 29, 191, 19, 108, 204, 62, 172, 144, 6, 63, 35, 70, 226, 188, 138, 39, 8, 63, 54, 159, 98, 188, 111, 55, 33, 190, 240, 182, 252, 62, 151, 92, 13, 191, 128, 126, 38, 191, 177, 177, 200, 62, 85, 74, 186, 190, 11, 43, 226, 62, 210, 13, 158, 189, 173, 14, 191, 190, 160, 153, 133, 189, 58, 251, 213, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 159, 98, 190, 72, 221, 60, 61, 64, 243, 183, 190, 189, 49, 113, 191, 178, 85, 50, 62, 9, 172, 159, 189, 38, 14, 47, 62, 1, 73, 41, 62, 109, 67, 15, 62, 232, 22, 77, 62, 240, 157, 123, 62, 101, 104, 227, 61, 185, 23, 107, 191, 144, 157, 133, 189, 24, 177, 148, 188, 3, 77, 47, 190, 214, 28, 66, 191, 59, 82, 199, 61, 194, 190, 164, 60, 40, 105, 0, 190, 103, 108, 110, 191, 150, 229, 166, 61, 139, 55, 34, 190, 178, 94, 141, 61, 224, 61, 132, 63, 255, 97, 72, 189, 102, 205, 128, 191, 199, 244, 28, 61, 105, 11, 104, 190, 207, 120, 158, 191, 147, 215, 152, 190, 146, 199, 29, 62, 181, 191, 131, 61, 197, 129, 69, 190, 142, 43, 235, 188, 177, 221, 40, 190, 174, 126, 54, 189, 68, 131, 241, 61, 123, 113, 212, 61, 172, 106, 13, 190, 171, 86, 48, 61, 42, 114, 209, 60, 32, 145, 151, 61, 128, 98, 185, 189, 207, 5, 228, 188, 222, 33, 203, 189, 57, 175, 64, 190, 106, 241, 25, 61, 21, 36, 108, 61, 136, 154, 17, 190, 22, 113, 7, 62, 163, 87, 72, 190, 217, 129, 232, 189, 8, 165, 26, 60, 193, 16, 93, 190, 239, 55, 141, 189, 251, 63, 60, 61, 106, 61, 40, 190, 37, 28, 52, 190, 125, 197, 204, 189, 82, 130, 216, 188, 234, 228, 9, 190, 139, 219, 86, 190, 52, 94, 122, 189, 98, 182, 184, 189, 49, 30, 43, 190, 255, 34, 96, 61, 117, 134, 207, 61, 208, 59, 12, 187, 26, 119, 202, 61, 159, 10, 37, 190, 183, 226, 175, 61, 81, 13, 21, 190, 114, 211, 43, 190, 31, 82, 207, 61, 167, 241, 179, 61, 156, 0, 153, 189, 177, 39, 28, 190, 112, 226, 158, 189, 124, 224, 70, 60, 105, 100, 53, 60, 119, 200, 217, 61, 235, 129, 9, 61, 207, 35, 38, 189, 115, 131, 135, 189, 185, 205, 47, 190, 140, 178, 5, 190, 115, 18, 242, 61, 47, 26, 43, 189, 102, 191, 159, 61, 187, 195, 186, 184, 216, 26, 169, 189, 4, 2, 142, 189, 167, 169, 167, 189, 36, 235, 201, 61, 115, 9, 84, 189, 138, 212, 49, 62, 19, 45, 12, 190, 134, 154, 183, 189, 239, 150, 227, 61, 141, 216, 246, 61, 22, 145, 189, 61, 22, 133, 66, 190, 103, 190, 103, 61, 189, 1, 114, 189, 192, 148, 17, 62, 70, 192, 125, 189, 171, 154, 157, 189, 171, 112, 75, 61, 111, 80, 160, 61, 95, 25, 60, 189, 183, 247, 15, 190, 193, 17, 139, 189, 0, 125, 216, 189, 253, 226, 42, 62, 8, 86, 67, 190, 66, 13, 26, 61, 162, 119, 125, 189, 127, 228, 52, 190, 197, 43, 50, 190, 192, 29, 180, 58, 182, 84, 98, 189, 153, 25, 35, 189, 135, 225, 45, 189, 27, 116, 74, 61, 195, 238, 22, 61, 36, 190, 11, 190, 132, 22, 24, 61, 166, 63, 179, 188, 76, 42, 137, 62, 112, 31, 8, 62, 240, 124, 45, 62, 227, 170, 233, 189, 144, 58, 230, 189, 108, 224, 143, 189, 163, 100, 54, 59, 10, 42, 157, 62, 134, 237, 121, 190, 73, 132, 254, 61, 238, 1, 51, 189, 109, 234, 118, 62, 57, 117, 45, 62, 195, 197, 164, 62, 81, 189, 147, 61, 110, 240, 109, 62, 19, 197, 150, 61, 43, 124, 102, 189, 116, 62, 31, 62, 223, 223, 13, 60, 205, 152, 4, 62, 182, 35, 29, 62, 216, 139, 9, 61, 126, 231, 223, 190, 76, 94, 36, 62, 140, 85, 154, 62, 113, 93, 78, 190, 146, 202, 41, 190, 192, 194, 159, 61, 248, 238, 54, 62, 41, 132, 190, 61, 45, 8, 1, 60, 186, 240, 54, 190, 3, 237, 184, 189, 150, 189, 81, 61, 186, 80, 236, 61, 19, 38, 15, 62, 22, 101, 220, 61, 136, 151, 51, 190, 44, 90, 134, 189, 72, 198, 154, 60, 1, 8, 55, 190, 60, 27, 40, 62, 6, 209, 32, 60, 224, 33, 163, 189, 69, 52, 249, 61, 189, 215, 149, 189, 121, 254, 192, 189, 59, 171, 143, 188, 200, 159, 73, 190, 229, 177, 143, 61, 92, 76, 4, 61, 142, 69, 31, 190, 56, 180, 164, 61, 86, 200, 192, 189, 12, 227, 162, 60, 44, 34, 250, 189, 114, 87, 171, 189, 20, 66, 8, 190, 76, 177, 202, 61, 71, 58, 130, 189, 125, 234, 239, 60, 69, 141, 208, 60, 250, 205, 15, 61, 132, 188, 119, 190, 198, 131, 216, 61, 96, 6, 174, 61, 230, 162, 149, 189, 111, 223, 214, 60, 252, 183, 111, 62, 128, 50, 39, 189, 60, 47, 133, 62, 49, 244, 21, 61, 9, 157, 242, 61, 212, 243, 187, 189, 25, 119, 243, 60, 23, 13, 57, 61, 56, 146, 126, 62, 203, 238, 143, 188, 122, 28, 29, 62, 0, 117, 5, 61, 99, 214, 28, 62, 109, 18, 47, 190, 87, 193, 24, 61, 253, 242, 191, 59, 226, 211, 231, 59, 103, 184, 169, 190, 45, 116, 8, 191, 4, 102, 171, 190, 235, 79, 26, 190, 44, 31, 135, 62, 99, 67, 172, 189, 137, 5, 155, 190, 228, 100, 208, 62, 35, 204, 196, 190, 146, 141, 16, 60, 226, 28, 22, 62, 125, 135, 190, 61, 32, 24, 176, 188, 149, 230, 141, 62, 39, 48, 139, 62, 13, 112, 198, 60, 142, 139, 30, 189, 145, 143, 158, 61, 17, 177, 104, 62, 7, 20, 34, 62, 108, 236, 71, 188, 30, 156, 217, 189, 85, 139, 0, 190, 53, 89, 107, 190, 176, 82, 214, 189, 226, 145, 119, 189, 155, 2, 111, 190, 58, 60, 7, 62, 79, 237, 41, 190, 243, 38, 30, 62, 162, 157, 222, 62, 42, 254, 17, 61, 69, 17, 164, 61, 30, 53, 129, 191, 52, 46, 151, 188, 163, 88, 89, 61, 57, 156, 222, 61, 189, 81, 176, 61, 16, 5, 174, 190, 61, 113, 12, 190, 115, 2, 119, 62, 218, 74, 78, 190, 247, 109, 83, 60, 166, 205, 162, 190, 150, 173, 39, 191, 56, 208, 180, 62, 214, 44, 109, 62, 181, 98, 17, 62, 100, 92, 85, 62, 171, 230, 77, 62, 247, 200, 158, 61, 209, 252, 168, 61, 133, 212, 121, 62, 252, 129, 39, 191, 133, 13, 113, 61, 107, 104, 106, 190, 194, 74, 89, 62, 70, 107, 17, 191, 151, 15, 50, 189, 64, 191, 204, 60, 94, 68, 177, 61, 149, 240, 130, 191, 50, 172, 210, 61, 22, 75, 138, 190, 80, 93, 58, 62, 78, 190, 253, 190, 157, 53, 188, 59, 127, 116, 77, 191, 167, 209, 7, 63, 10, 245, 162, 61, 234, 237, 188, 191, 126, 236, 127, 190, 15, 106, 0, 62, 112, 118, 158, 61, 35, 118, 123, 61, 68, 110, 21, 62, 140, 205, 160, 60, 190, 138, 50, 61, 134, 216, 50, 61, 1, 201, 253, 189, 132, 21, 172, 61, 51, 225, 251, 61, 179, 4, 41, 190, 19, 46, 8, 190, 226, 75, 252, 60, 57, 188, 147, 60, 233, 45, 212, 61, 227, 227, 7, 60, 220, 36, 202, 61, 164, 242, 250, 60, 5, 41, 163, 61, 136, 83, 153, 61, 140, 106, 144, 188, 182, 128, 62, 188, 10, 65, 192, 61, 122, 120, 43, 190, 179, 122, 157, 189, 22, 208, 251, 189, 117, 35, 216, 59, 147, 75, 32, 190, 148, 217, 23, 190, 140, 224, 2, 190, 101, 187, 189, 61, 196, 60, 173, 187, 205, 127, 231, 189, 137, 225, 153, 187, 240, 231, 246, 189, 179, 234, 37, 62, 8, 66, 254, 61, 88, 152, 209, 189, 46, 13, 6, 62, 44, 176, 39, 190, 176, 109, 163, 189, 79, 134, 137, 189, 91, 58, 173, 189, 203, 143, 223, 189, 177, 157, 223, 189, 180, 60, 32, 62, 109, 222, 0, 190, 163, 161, 233, 59, 87, 97, 48, 62, 183, 43, 147, 60, 220, 249, 220, 60, 239, 199, 179, 61, 170, 223, 196, 188, 97, 185, 79, 61, 112, 23, 30, 188, 163, 152, 63, 188, 103, 127, 189, 186, 179, 10, 27, 61, 108, 30, 205, 61, 70, 132, 112, 189, 240, 84, 19, 61, 12, 155, 85, 190, 87, 70, 9, 190, 114, 43, 244, 188, 213, 85, 19, 62, 20, 92, 32, 191, 12, 46, 47, 62, 142, 40, 233, 188, 145, 4, 30, 62, 120, 173, 95, 189, 100, 79, 191, 61, 193, 177, 62, 190, 93, 147, 32, 191, 67, 51, 154, 62, 12, 30, 43, 190, 220, 68, 79, 190, 219, 81, 192, 189, 37, 34, 174, 189, 228, 190, 235, 190, 77, 174, 148, 62, 105, 249, 132, 190, 224, 143, 144, 62, 144, 190, 136, 189, 213, 185, 164, 190, 6, 166, 162, 60, 30, 207, 74, 61, 126, 51, 220, 61, 212, 127, 132, 59, 19, 231, 39, 190, 220, 45, 243, 190, 24, 16, 148, 60, 192, 207, 197, 61, 104, 255, 216, 189, 197, 22, 162, 60, 137, 24, 43, 190, 194, 83, 246, 60, 198, 178, 176, 189, 96, 141, 135, 62, 154, 37, 104, 62, 212, 166, 170, 62, 72, 237, 132, 62, 7, 20, 242, 190, 69, 101, 37, 191, 83, 4, 139, 190, 161, 15, 112, 61, 214, 236, 28, 190, 214, 59, 139, 191, 139, 73, 162, 191, 61, 133, 141, 190, 190, 237, 243, 61, 22, 31, 226, 61, 235, 129, 35, 189, 159, 22, 115, 61, 147, 16, 171, 189, 54, 98, 48, 62, 216, 94, 4, 192, 241, 236, 43, 62, 204, 165, 245, 61, 192, 90, 48, 190, 230, 241, 124, 190, 184, 220, 133, 190, 181, 68, 137, 62, 163, 86, 177, 62, 73, 165, 165, 62, 66, 95, 39, 190, 104, 97, 115, 190, 174, 157, 121, 61, 132, 242, 14, 189, 208, 79, 177, 62, 106, 163, 40, 190, 243, 148, 223, 61, 41, 102, 75, 62, 29, 41, 82, 59, 70, 196, 157, 188, 26, 67, 205, 61, 94, 154, 138, 190, 35, 127, 121, 190, 42, 160, 83, 188, 32, 80, 52, 60, 34, 221, 179, 189, 153, 158, 124, 189, 184, 26, 39, 62, 10, 188, 7, 189, 181, 223, 145, 189, 241, 136, 98, 61, 20, 167, 70, 61, 149, 89, 201, 189, 61, 193, 203, 189, 27, 80, 17, 62, 54, 92, 6, 62, 31, 102, 40, 62, 143, 255, 32, 190, 5, 156, 176, 189, 146, 107, 228, 187, 207, 70, 186, 61, 19, 137, 127, 189, 2, 142, 141, 61, 241, 239, 33, 62, 223, 160, 37, 62, 222, 50, 47, 189, 244, 109, 60, 190, 5, 130, 204, 61, 77, 241, 56, 62, 135, 203, 171, 190, 142, 133, 11, 191, 162, 53, 199, 61, 44, 136, 126, 62, 86, 71, 21, 61, 181, 151, 74, 189, 18, 166, 63, 62, 231, 8, 56, 62, 186, 196, 37, 62, 127, 136, 44, 61, 247, 77, 38, 190, 97, 76, 5, 62, 248, 186, 109, 190, 192, 202, 27, 190, 52, 207, 80, 190, 50, 77, 154, 61, 50, 174, 28, 62, 126, 158, 167, 62, 251, 27, 19, 191, 253, 78, 215, 62, 53, 132, 109, 190, 231, 131, 160, 62, 105, 160, 100, 63, 69, 104, 255, 189, 219, 159, 183, 190, 132, 159, 41, 63, 169, 0, 220, 61, 160, 119, 129, 191, 110, 120, 61, 190, 225, 231, 194, 62, 145, 3, 4, 189, 30, 142, 9, 62, 170, 242, 30, 189, 115, 219, 186, 62, 87, 165, 17, 190, 23, 255, 237, 189, 78, 96, 136, 61, 115, 122, 39, 61, 153, 114, 218, 61, 20, 52, 97, 190, 233, 152, 52, 61, 13, 242, 134, 190, 50, 125, 64, 61, 251, 222, 106, 188, 63, 165, 36, 62, 28, 14, 123, 62, 91, 119, 149, 62, 2, 1, 41, 62, 138, 211, 41, 190, 72, 65, 86, 61, 194, 76, 88, 62, 118, 211, 194, 189, 135, 185, 96, 62, 3, 158, 31, 190, 225, 97, 14, 191, 140, 9, 85, 62, 21, 168, 6, 62, 5, 66, 123, 190, 46, 7, 5, 190, 110, 143, 94, 62, 186, 134, 91, 62, 237, 82, 227, 61, 70, 70, 11, 189, 9, 25, 18, 189, 66, 81, 232, 188, 154, 41, 94, 62, 72, 83, 249, 189, 255, 202, 115, 190, 241, 214, 63, 62, 40, 133, 94, 189, 162, 97, 142, 61, 224, 153, 197, 189, 160, 237, 232, 61, 158, 140, 179, 190, 62, 191, 189, 62, 32, 22, 62, 60, 110, 179, 112, 62, 107, 13, 249, 61, 169, 59, 65, 62, 144, 253, 40, 61, 139, 148, 197, 189, 202, 103, 16, 62, 237, 45, 68, 188, 22, 197, 135, 190, 123, 161, 245, 61, 228, 13, 215, 189, 30, 195, 203, 190, 253, 87, 164, 61, 29, 168, 72, 62, 103, 73, 140, 190, 91, 228, 144, 190, 109, 248, 128, 60, 191, 6, 18, 62, 254, 240, 84, 189, 23, 162, 160, 62, 142, 243, 30, 191, 203, 252, 233, 189, 97, 212, 150, 189, 65, 29, 93, 190, 135, 39, 58, 61, 205, 208, 231, 60, 238, 25, 220, 190, 31, 180, 149, 190, 243, 10, 130, 61, 212, 126, 254, 189, 30, 190, 75, 189, 56, 5, 239, 59, 68, 112, 176, 189, 171, 66, 137, 62, 96, 187, 255, 188, 20, 171, 10, 191, 56, 199, 142, 189, 30, 25, 101, 188, 43, 229, 54, 190, 166, 199, 43, 190, 209, 214, 0, 191, 79, 132, 142, 189, 96, 173, 145, 61, 16, 71, 104, 63, 109, 195, 37, 191, 255, 48, 9, 187, 152, 116, 13, 191, 99, 132, 32, 62, 248, 35, 201, 189, 254, 10, 135, 62, 134, 107, 119, 190, 238, 44, 136, 61, 40, 24, 52, 190, 29, 83, 24, 62, 27, 180, 7, 190, 119, 41, 155, 61, 187, 134, 10, 61, 186, 64, 249, 189, 12, 179, 72, 61, 13, 206, 62, 60, 40, 208, 24, 190, 141, 104, 72, 60, 49, 159, 28, 190, 130, 2, 29, 61, 157, 31, 152, 61, 73, 65, 84, 61, 220, 228, 182, 189, 201, 95, 34, 62, 61, 45, 39, 61, 187, 253, 67, 189, 134, 143, 234, 60, 189, 110, 221, 188, 156, 198, 139, 60, 58, 36, 115, 60, 167, 73, 7, 62, 19, 62, 44, 62, 207, 44, 44, 190, 243, 12, 42, 190, 66, 31, 18, 190, 141, 94, 158, 61, 180, 155, 35, 59, 11, 125, 9, 190, 29, 145, 227, 60, 2, 117, 199, 189, 224, 150, 92, 189, 155, 13, 245, 188, 23, 135, 87, 190, 117, 121, 192, 61, 142, 121, 55, 190, 149, 88, 138, 188, 34, 163, 32, 62, 200, 85, 52, 62, 26, 131, 65, 62, 157, 175, 98, 62, 6, 143, 251, 189, 229, 145, 230, 60, 107, 125, 114, 61, 131, 253, 173, 189, 253, 119, 208, 188, 159, 194, 163, 187, 225, 100, 195, 189, 3, 11, 52, 188, 82, 103, 5, 188, 56, 123, 50, 190, 56, 131, 38, 62, 36, 16, 137, 187, 50, 115, 17, 190, 86, 201, 14, 190, 0, 140, 21, 190, 6, 84, 64, 190, 234, 13, 24, 62, 56, 168, 14, 190, 99, 154, 86, 189, 72, 0, 209, 61, 41, 166, 135, 189, 91, 23, 27, 189, 124, 44, 243, 188, 234, 235, 154, 61, 89, 182, 164, 61, 171, 133, 44, 62, 246, 59, 3, 191, 174, 172, 72, 189, 187, 78, 176, 60, 42, 95, 9, 190, 178, 86, 42, 60, 188, 94, 75, 61, 216, 21, 204, 190, 118, 191, 12, 62, 154, 186, 64, 189, 171, 59, 158, 62, 71, 154, 55, 62, 111, 94, 226, 61, 1, 35, 200, 61, 48, 71, 48, 190, 78, 75, 154, 60, 75, 95, 30, 62, 77, 25, 59, 189, 106, 239, 81, 62, 43, 28, 107, 189, 242, 198, 168, 190, 9, 140, 65, 62, 82, 205, 103, 62, 252, 101, 182, 189, 148, 64, 172, 190, 107, 234, 18, 62, 130, 99, 158, 62, 40, 12, 245, 189, 203, 192, 156, 190, 110, 135, 190, 61, 54, 46, 0, 190, 47, 16, 9, 190, 226, 36, 104, 62, 140, 169, 167, 62, 173, 97, 142, 187, 98, 205, 224, 190, 12, 25, 214, 62, 253, 200, 3, 61, 19, 81, 201, 61, 255, 192, 129, 62, 165, 92, 228, 189, 229, 22, 187, 190, 74, 66, 57, 190, 153, 50, 199, 189, 155, 216, 249, 61, 218, 236, 146, 60, 152, 179, 155, 61, 182, 239, 107, 190, 126, 228, 139, 61, 252, 23, 205, 61, 217, 152, 100, 189, 195, 186, 80, 62, 169, 65, 131, 191, 126, 176, 65, 189, 119, 246, 68, 190, 142, 77, 127, 62, 45, 166, 154, 61, 122, 45, 150, 190, 23, 206, 167, 190, 121, 116, 52, 188, 83, 252, 11, 188, 172, 92, 176, 61, 130, 84, 20, 189, 184, 150, 158, 190, 73, 139, 165, 62, 80, 252, 205, 62, 213, 85, 253, 61, 6, 225, 212, 190, 64, 205, 200, 62, 109, 174, 60, 188, 146, 201, 132, 61, 54, 108, 128, 62, 198, 231, 133, 190, 231, 149, 76, 190, 232, 220, 69, 190, 172, 231, 67, 189, 233, 37, 28, 62, 55, 44, 181, 189, 46, 249, 107, 62, 234, 34, 31, 190, 245, 44, 165, 189, 129, 100, 16, 62, 131, 96, 97, 61, 109, 186, 107, 62, 164, 179, 5, 63, 210, 145, 76, 189, 28, 162, 185, 190, 225, 174, 129, 62, 197, 93, 9, 63, 193, 39, 72, 190, 225, 134, 188, 187, 233, 54, 60, 61, 114, 87, 76, 190, 69, 246, 183, 190, 34, 205, 58, 62, 73, 92, 135, 61, 197, 111, 79, 191, 25, 78, 152, 190, 16, 79, 80, 62, 106, 72, 35, 189, 29, 136, 57, 62, 59, 0, 173, 190, 112, 161, 83, 62, 56, 42, 234, 189, 26, 122, 13, 62, 208, 226, 168, 62, 124, 252, 185, 62, 208, 125, 7, 191, 10, 173, 165, 61, 144, 155, 225, 60, 89, 109, 26, 191, 101, 226, 132, 190, 47, 195, 231, 61, 139, 99, 242, 190, 115, 61, 211, 59, 80, 70, 6, 190, 60, 186, 231, 62, 98, 102, 221, 190, 36, 40, 24, 62, 117, 7, 0, 189, 233, 153, 255, 61, 141, 144, 100, 61, 100, 179, 140, 62, 107, 119, 32, 190, 9, 59, 238, 190, 43, 202, 159, 61, 1, 229, 167, 190, 70, 14, 90, 191, 44, 130, 244, 61, 87, 205, 155, 62, 230, 87, 144, 62, 111, 241, 30, 190, 77, 191, 227, 62, 135, 173, 240, 61, 63, 147, 232, 61, 123, 49, 210, 61, 182, 168, 10, 191, 102, 141, 33, 62, 63, 143, 163, 190, 203, 106, 191, 190, 111, 197, 33, 190, 69, 182, 41, 190, 65, 89, 35, 62, 161, 236, 144, 189, 89, 68, 11, 191, 225, 112, 142, 62, 71, 188, 246, 188, 86, 7, 157, 62, 61, 158, 57, 63, 30, 128, 10, 62, 121, 29, 143, 191, 178, 145, 235, 62, 229, 118, 23, 63, 49, 215, 149, 191, 223, 15, 180, 190, 96, 206, 4, 61, 69, 107, 136, 190, 221, 117, 44, 190, 157, 78, 251, 61, 16, 75, 98, 62, 9, 96, 160, 59, 148, 152, 152, 189, 151, 246, 83, 189, 242, 8, 197, 190, 28, 51, 152, 62, 34, 226, 183, 189, 64, 134, 139, 189, 203, 59, 143, 190, 180, 109, 172, 61, 145, 134, 101, 190, 83, 76, 29, 62, 47, 185, 152, 61, 173, 199, 136, 61, 28, 24, 138, 60, 142, 27, 15, 190, 224, 97, 48, 190, 239, 122, 159, 61, 77, 197, 219, 61, 207, 10, 208, 61, 172, 44, 139, 190, 252, 116, 105, 190, 196, 75, 135, 61, 163, 172, 215, 61, 248, 205, 2, 62, 180, 38, 29, 190, 12, 178, 44, 190, 152, 191, 149, 61, 110, 15, 160, 60, 163, 112, 1, 62, 225, 48, 60, 191, 243, 175, 4, 190, 219, 184, 10, 62, 78, 145, 252, 188, 172, 192, 58, 191, 53, 207, 59, 60, 79, 121, 215, 188, 230, 47, 167, 62, 129, 3, 234, 189, 246, 40, 148, 61, 149, 237, 61, 190, 201, 119, 44, 62, 155, 60, 29, 62, 143, 201, 197, 62, 14, 147, 60, 62, 239, 170, 91, 62, 157, 36, 158, 62, 255, 29, 1, 62, 171, 217, 74, 190, 37, 83, 132, 189, 140, 151, 1, 191, 180, 128, 136, 186, 165, 0, 71, 189, 56, 124, 158, 190, 81, 130, 134, 190, 183, 96, 11, 190, 27, 97, 90, 61, 103, 207, 90, 190, 186, 206, 180, 190, 41, 38, 166, 62, 16, 116, 124, 191, 160, 10, 192, 189, 7, 84, 67, 190, 211, 204, 51, 191, 175, 52, 155, 189, 218, 196, 194, 190, 225, 4, 7, 189, 165, 246, 146, 190, 138, 153, 139, 62, 97, 142, 73, 190, 9, 119, 48, 190, 143, 6, 23, 62, 145, 105, 85, 189, 237, 225, 148, 62, 174, 135, 200, 62, 99, 62, 165, 189, 209, 87, 207, 187, 65, 207, 179, 61, 241, 63, 123, 62, 175, 130, 55, 62, 250, 81, 98, 62, 191, 186, 99, 62, 33, 154, 3, 191, 48, 68, 73, 190, 172, 12, 48, 190, 63, 245, 145, 62, 179, 108, 209, 189, 0, 235, 170, 62, 118, 239, 15, 62, 45, 35, 42, 190, 132, 163, 15, 62, 13, 73, 79, 190, 14, 211, 46, 61, 182, 213, 91, 189, 245, 68, 27, 190, 244, 39, 86, 61, 140, 101, 62, 190, 222, 217, 216, 189, 16, 31, 237, 61, 228, 92, 216, 188, 154, 208, 112, 61, 28, 49, 234, 60, 23, 161, 83, 187, 151, 228, 48, 190, 75, 24, 11, 190, 12, 20, 31, 190, 131, 220, 148, 188, 58, 60, 63, 189, 126, 227, 30, 190, 70, 86, 123, 189, 163, 76, 244, 187, 55, 105, 166, 61, 22, 10, 189, 61, 19, 119, 185, 60, 246, 87, 2, 62, 86, 59, 52, 188, 21, 137, 191, 60, 55, 21, 39, 62, 39, 222, 70, 190, 191, 222, 21, 62, 232, 158, 221, 188, 185, 58, 15, 190, 185, 56, 147, 61, 153, 54, 203, 189, 168, 39, 172, 59, 27, 127, 212, 61, 27, 32, 250, 190, 25, 216, 29, 190, 224, 26, 45, 189, 145, 64, 8, 61, 184, 89, 149, 191, 33, 105, 191, 188, 60, 107, 12, 190, 14, 203, 94, 189, 48, 91, 10, 61, 242, 113, 151, 61, 232, 140, 24, 62, 177, 30, 159, 61, 40, 234, 117, 62, 127, 71, 115, 62, 153, 159, 146, 62, 128, 152, 30, 62, 27, 127, 96, 62, 113, 122, 173, 189, 198, 105, 178, 189, 47, 16, 139, 61, 120, 35, 244, 189, 2, 9, 63, 62, 147, 192, 176, 190, 42, 75, 163, 61, 185, 38, 3, 191, 252, 108, 227, 61, 188, 3, 139, 59, 66, 186, 95, 190, 39, 120, 132, 62, 232, 45, 160, 62, 64, 254, 27, 191, 120, 68, 12, 191, 179, 182, 122, 61, 15, 88, 151, 189, 116, 114, 141, 190, 227, 134, 64, 62, 196, 111, 196, 62, 20, 240, 101, 62, 142, 49, 160, 190, 210, 175, 2, 63, 161, 169, 194, 61, 198, 230, 34, 61, 78, 184, 151, 62, 232, 34, 179, 190, 111, 89, 8, 191, 167, 5, 89, 190, 117, 22, 196, 190, 95, 139, 14, 62, 218, 174, 53, 62, 116, 74, 226, 61, 49, 72, 42, 60, 213, 133, 53, 190, 199, 14, 65, 62, 137, 107, 36, 190, 41, 71, 189, 62, 32, 236, 47, 191, 53, 167, 95, 189, 245, 194, 115, 190, 75, 130, 122, 62, 56, 231, 185, 62, 1, 222, 14, 190, 238, 60, 169, 190, 10, 139, 138, 189, 12, 99, 195, 61, 35, 206, 153, 60, 194, 247, 124, 62, 11, 24, 189, 62, 254, 161, 20, 190, 165, 25, 53, 191, 154, 163, 135, 61, 212, 105, 176, 189, 116, 95, 98, 190, 18, 224, 140, 61, 59, 62, 140, 61, 170, 141, 148, 190, 73, 16, 181, 62, 203, 25, 180, 60, 55, 119, 134, 61, 105, 30, 170, 62, 84, 162, 29, 62, 12, 49, 38, 188, 230, 129, 251, 189, 124, 112, 235, 61, 2, 168, 134, 60, 133, 135, 189, 189, 115, 207, 145, 189, 172, 187, 145, 190, 70, 66, 10, 191, 118, 2, 125, 189, 201, 105, 1, 62, 65, 11, 74, 190, 79, 166, 178, 190, 218, 133, 147, 62, 75, 146, 69, 62, 161, 138, 3, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 83, 64, 61, 232, 106, 40, 189, 40, 181, 10, 190, 32, 179, 31, 60, 58, 200, 46, 61, 73, 16, 45, 190, 220, 133, 238, 188, 34, 14, 19, 61, 164, 199, 48, 62, 123, 195, 50, 190, 61, 5, 74, 190, 202, 85, 164, 62, 62, 78, 128, 62, 55, 17, 251, 189, 235, 70, 254, 60, 132, 209, 48, 62, 186, 238, 143, 61, 159, 190, 88, 190, 137, 66, 206, 189, 3, 15, 12, 190, 181, 107, 104, 189, 13, 1, 35, 61, 253, 100, 209, 189, 81, 170, 141, 190, 45, 79, 139, 62, 220, 121, 109, 62, 134, 121, 251, 189, 79, 142, 206, 189, 172, 23, 28, 190, 231, 162, 50, 190, 36, 2, 172, 189, 37, 82, 118, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 252, 55, 191, 0, 170, 30, 188, 52, 244, 232, 189, 172, 62, 177, 60, 128, 194, 220, 61, 80, 47, 10, 62, 243, 15, 22, 62, 215, 34, 79, 62, 3, 113, 92, 191, 193, 118, 34, 190, 145, 93, 41, 188, 124, 90, 180, 189, 89, 237, 162, 63, 127, 82, 47, 62, 14, 156, 55, 191, 132, 161, 182, 61, 23, 108, 20, 62, 240, 76, 95, 191, 188, 122, 131, 60, 190, 143, 252, 61, 84, 97, 125, 62, 96, 244, 198, 190, 16, 175, 1, 191, 221, 147, 217, 62, 132, 100, 24, 191, 156, 198, 28, 60, 207, 169, 6, 63, 5, 65, 139, 190, 83, 188, 27, 58, 60, 233, 7, 63, 163, 66, 238, 190, 66, 137, 148, 62, 190, 61, 107, 61, 175, 177, 130, 61, 98, 129, 142, 188, 112, 82, 65, 61, 254, 131, 130, 190, 240, 27, 28, 62, 221, 179, 120, 190, 90, 2, 119, 62, 22, 145, 217, 189, 165, 141, 166, 189, 114, 199, 96, 188, 183, 121, 234, 190, 197, 89, 11, 61, 47, 182, 24, 189, 59, 235, 2, 190, 98, 45, 40, 190, 167, 85, 91, 190, 151, 52, 232, 62, 100, 151, 223, 189, 129, 40, 19, 61, 60, 250, 207, 60, 170, 190, 251, 189, 36, 47, 57, 62, 68, 210, 179, 189, 75, 232, 81, 189, 50, 165, 132, 190, 193, 203, 196, 60, 54, 47, 34, 62, 64, 209, 98, 61, 115, 65, 66, 62, 186, 129, 49, 62, 40, 171, 17, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {217, 136, 82, 190, 218, 166, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {196, 136, 37, 191, 92, 133, 108, 63, 206, 65, 176, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {218, 70, 129, 62, 20, 52, 60, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0019/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}