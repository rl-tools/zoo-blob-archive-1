// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 191, 220, 62, 131, 169, 136, 191, 118, 163, 203, 190, 33, 171, 28, 190, 2, 61, 53, 63, 255, 101, 100, 61, 55, 227, 197, 61, 213, 97, 255, 62, 83, 231, 153, 190, 110, 164, 153, 62, 44, 180, 254, 190, 163, 34, 241, 62, 250, 95, 6, 191, 17, 173, 231, 188, 96, 60, 222, 190, 193, 116, 60, 63, 244, 56, 129, 63, 29, 90, 146, 62, 126, 63, 95, 59, 51, 178, 180, 62, 93, 9, 27, 191, 142, 176, 142, 191, 159, 162, 112, 190, 2, 221, 138, 189, 66, 180, 93, 63, 250, 152, 198, 62, 208, 154, 227, 189, 74, 106, 105, 190, 160, 22, 157, 191, 197, 215, 157, 190, 246, 144, 98, 62, 242, 240, 141, 191, 228, 34, 16, 191, 30, 213, 165, 61, 164, 142, 143, 62, 13, 224, 216, 62, 10, 155, 224, 61, 53, 205, 46, 190, 52, 89, 235, 62, 90, 253, 7, 191, 168, 168, 68, 191, 62, 140, 56, 190, 46, 124, 50, 63, 238, 131, 111, 191, 251, 195, 121, 190, 91, 42, 65, 191, 10, 198, 67, 191, 161, 107, 172, 190, 149, 229, 31, 63, 129, 1, 248, 61, 42, 83, 237, 62, 130, 37, 203, 189, 47, 254, 57, 191, 255, 30, 155, 62, 83, 152, 221, 190, 106, 121, 237, 191, 39, 222, 222, 190, 101, 126, 57, 191, 98, 123, 125, 189, 174, 22, 21, 190, 150, 18, 236, 61, 138, 91, 95, 63, 129, 68, 36, 63, 105, 128, 179, 61, 183, 232, 76, 63, 168, 3, 186, 187, 2, 60, 161, 62, 217, 159, 196, 61, 45, 112, 18, 191, 68, 165, 24, 63, 145, 133, 129, 63, 146, 104, 240, 62, 36, 49, 8, 63, 159, 116, 91, 191, 8, 197, 90, 190, 248, 40, 248, 189, 112, 242, 93, 63, 46, 82, 134, 190, 6, 239, 132, 190, 216, 157, 196, 62, 224, 62, 61, 63, 61, 181, 145, 62, 250, 198, 43, 191, 129, 34, 46, 63, 88, 196, 168, 62, 18, 140, 26, 190, 7, 28, 53, 63, 96, 52, 92, 190, 197, 70, 148, 63, 47, 222, 28, 63, 145, 143, 253, 62, 155, 31, 96, 191, 38, 66, 55, 190, 240, 36, 86, 191, 227, 254, 46, 63, 113, 89, 244, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 153, 33, 191, 154, 253, 2, 63, 61, 175, 23, 62, 155, 77, 207, 61, 97, 100, 165, 190, 191, 84, 166, 190, 94, 239, 234, 62, 142, 230, 15, 62, 8, 143, 83, 62, 127, 240, 134, 190, 13, 86, 200, 62, 252, 133, 15, 191, 60, 249, 186, 188, 143, 245, 207, 62, 43, 204, 211, 61, 29, 91, 126, 190, 242, 59, 165, 62, 45, 51, 217, 62, 141, 47, 113, 190, 7, 44, 42, 63, 65, 94, 156, 61, 128, 153, 247, 189, 114, 192, 231, 62, 113, 20, 33, 191, 135, 172, 22, 191, 124, 213, 155, 62, 153, 127, 139, 190, 202, 196, 104, 62, 50, 58, 20, 190, 115, 250, 96, 190, 153, 239, 85, 189, 212, 197, 196, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 49, 136, 190, 197, 66, 58, 62, 70, 198, 171, 190, 124, 62, 140, 191, 91, 74, 17, 62, 196, 93, 34, 191, 102, 217, 48, 62, 244, 132, 148, 62, 104, 245, 60, 61, 180, 190, 47, 62, 136, 121, 83, 62, 101, 104, 227, 61, 232, 123, 72, 191, 83, 138, 107, 189, 91, 4, 42, 189, 147, 135, 147, 190, 106, 58, 141, 191, 250, 186, 8, 190, 68, 6, 5, 188, 90, 48, 129, 188, 106, 247, 102, 191, 120, 182, 89, 62, 70, 132, 42, 190, 178, 94, 141, 61, 209, 138, 129, 63, 15, 237, 238, 58, 240, 134, 169, 191, 10, 21, 31, 191, 144, 27, 104, 190, 50, 99, 131, 191, 80, 254, 161, 190, 248, 185, 190, 62, 181, 191, 131, 61, 197, 129, 69, 190, 142, 43, 235, 188, 177, 221, 40, 190, 174, 126, 54, 189, 68, 131, 241, 61, 123, 113, 212, 61, 172, 106, 13, 190, 171, 86, 48, 61, 42, 114, 209, 60, 32, 145, 151, 61, 128, 98, 185, 189, 207, 5, 228, 188, 222, 33, 203, 189, 57, 175, 64, 190, 106, 241, 25, 61, 21, 36, 108, 61, 136, 154, 17, 190, 22, 113, 7, 62, 163, 87, 72, 190, 217, 129, 232, 189, 8, 165, 26, 60, 193, 16, 93, 190, 239, 55, 141, 189, 251, 63, 60, 61, 106, 61, 40, 190, 37, 28, 52, 190, 125, 197, 204, 189, 82, 130, 216, 188, 234, 228, 9, 190, 139, 219, 86, 190, 52, 94, 122, 189, 98, 182, 184, 189, 49, 30, 43, 190, 255, 34, 96, 61, 117, 134, 207, 61, 208, 59, 12, 187, 26, 119, 202, 61, 159, 10, 37, 190, 183, 226, 175, 61, 81, 13, 21, 190, 114, 211, 43, 190, 31, 82, 207, 61, 167, 241, 179, 61, 156, 0, 153, 189, 177, 39, 28, 190, 112, 226, 158, 189, 124, 224, 70, 60, 105, 100, 53, 60, 119, 200, 217, 61, 235, 129, 9, 61, 207, 35, 38, 189, 115, 131, 135, 189, 185, 205, 47, 190, 140, 178, 5, 190, 115, 18, 242, 61, 47, 26, 43, 189, 102, 191, 159, 61, 187, 195, 186, 184, 216, 26, 169, 189, 4, 2, 142, 189, 167, 169, 167, 189, 36, 235, 201, 61, 115, 9, 84, 189, 176, 38, 38, 191, 142, 104, 158, 190, 34, 26, 248, 190, 229, 163, 57, 62, 52, 92, 142, 190, 56, 134, 175, 190, 85, 237, 178, 190, 173, 133, 102, 62, 103, 166, 5, 190, 253, 42, 31, 62, 48, 204, 14, 190, 131, 52, 245, 189, 26, 5, 182, 61, 11, 99, 153, 62, 172, 238, 26, 191, 42, 97, 238, 62, 54, 199, 215, 188, 241, 195, 125, 61, 170, 162, 93, 62, 82, 17, 254, 189, 255, 184, 10, 190, 165, 192, 157, 190, 122, 168, 35, 191, 78, 114, 167, 190, 247, 221, 254, 190, 95, 125, 138, 190, 216, 143, 5, 190, 97, 4, 40, 61, 136, 112, 248, 61, 2, 30, 176, 190, 231, 13, 26, 191, 16, 28, 137, 60, 70, 115, 194, 189, 151, 124, 163, 62, 160, 245, 224, 61, 133, 12, 15, 62, 43, 218, 137, 189, 220, 103, 253, 189, 220, 242, 110, 189, 6, 131, 232, 188, 62, 25, 183, 62, 20, 157, 162, 190, 96, 140, 22, 62, 108, 153, 105, 189, 63, 228, 86, 62, 20, 180, 121, 62, 33, 37, 155, 62, 202, 225, 93, 62, 122, 118, 114, 62, 98, 219, 244, 61, 219, 17, 2, 190, 74, 130, 26, 62, 173, 30, 73, 60, 243, 21, 209, 60, 5, 170, 31, 62, 61, 226, 81, 61, 111, 94, 8, 191, 176, 238, 24, 62, 212, 239, 148, 62, 67, 242, 64, 190, 155, 132, 39, 190, 106, 161, 150, 61, 77, 156, 4, 62, 114, 222, 232, 61, 45, 8, 1, 60, 186, 240, 54, 190, 3, 237, 184, 189, 150, 189, 81, 61, 186, 80, 236, 61, 19, 38, 15, 62, 22, 101, 220, 61, 136, 151, 51, 190, 44, 90, 134, 189, 72, 198, 154, 60, 1, 8, 55, 190, 60, 27, 40, 62, 6, 209, 32, 60, 224, 33, 163, 189, 69, 52, 249, 61, 189, 215, 149, 189, 121, 254, 192, 189, 59, 171, 143, 188, 200, 159, 73, 190, 229, 177, 143, 61, 92, 76, 4, 61, 142, 69, 31, 190, 56, 180, 164, 61, 86, 200, 192, 189, 12, 227, 162, 60, 44, 34, 250, 189, 114, 87, 171, 189, 20, 66, 8, 190, 76, 177, 202, 61, 71, 58, 130, 189, 125, 234, 239, 60, 69, 141, 208, 60, 140, 177, 54, 60, 43, 227, 168, 188, 57, 176, 66, 62, 162, 253, 181, 61, 63, 216, 130, 187, 151, 234, 12, 190, 163, 227, 164, 62, 165, 136, 101, 61, 245, 213, 173, 62, 181, 100, 139, 189, 250, 104, 7, 62, 225, 157, 44, 190, 113, 86, 156, 60, 108, 62, 71, 62, 178, 250, 107, 62, 231, 118, 227, 61, 64, 150, 19, 62, 22, 183, 6, 62, 178, 38, 113, 61, 17, 42, 247, 188, 33, 246, 203, 60, 127, 13, 250, 189, 174, 74, 65, 61, 218, 204, 14, 191, 85, 51, 27, 191, 47, 247, 8, 190, 98, 200, 44, 190, 225, 126, 163, 62, 117, 47, 103, 189, 112, 9, 206, 190, 13, 187, 181, 62, 67, 218, 7, 190, 210, 198, 135, 62, 135, 141, 169, 62, 117, 225, 46, 62, 88, 110, 201, 189, 181, 61, 175, 62, 108, 40, 40, 63, 78, 14, 175, 61, 51, 65, 242, 188, 226, 63, 155, 62, 86, 19, 149, 62, 65, 124, 250, 61, 189, 204, 32, 189, 95, 248, 246, 189, 7, 254, 190, 189, 144, 200, 134, 190, 119, 125, 162, 59, 126, 120, 107, 189, 51, 177, 134, 190, 86, 233, 58, 62, 109, 10, 91, 189, 43, 34, 137, 62, 236, 145, 216, 62, 107, 34, 111, 61, 253, 165, 114, 62, 21, 156, 165, 191, 102, 117, 166, 61, 169, 163, 223, 187, 29, 189, 176, 61, 65, 255, 233, 61, 154, 211, 164, 190, 35, 119, 138, 190, 217, 110, 174, 62, 195, 23, 180, 190, 133, 93, 30, 62, 4, 148, 155, 190, 119, 209, 73, 191, 207, 6, 141, 62, 199, 183, 145, 62, 50, 110, 13, 62, 106, 81, 130, 62, 69, 228, 104, 61, 99, 35, 160, 61, 78, 8, 102, 61, 133, 212, 121, 62, 119, 47, 72, 191, 216, 70, 133, 61, 186, 183, 122, 190, 186, 40, 125, 62, 99, 84, 154, 189, 233, 24, 180, 190, 21, 104, 79, 61, 120, 254, 14, 62, 234, 225, 146, 191, 165, 91, 214, 62, 6, 63, 130, 190, 124, 35, 201, 62, 172, 96, 134, 191, 71, 245, 205, 60, 225, 131, 149, 191, 205, 7, 93, 62, 17, 115, 77, 190, 255, 200, 216, 191, 131, 100, 108, 190, 230, 55, 53, 62, 112, 118, 158, 61, 35, 118, 123, 61, 68, 110, 21, 62, 140, 205, 160, 60, 190, 138, 50, 61, 134, 216, 50, 61, 1, 201, 253, 189, 132, 21, 172, 61, 51, 225, 251, 61, 179, 4, 41, 190, 19, 46, 8, 190, 226, 75, 252, 60, 57, 188, 147, 60, 233, 45, 212, 61, 227, 227, 7, 60, 220, 36, 202, 61, 164, 242, 250, 60, 5, 41, 163, 61, 136, 83, 153, 61, 140, 106, 144, 188, 182, 128, 62, 188, 10, 65, 192, 61, 122, 120, 43, 190, 179, 122, 157, 189, 22, 208, 251, 189, 117, 35, 216, 59, 147, 75, 32, 190, 148, 217, 23, 190, 140, 224, 2, 190, 101, 187, 189, 61, 196, 60, 173, 187, 205, 127, 231, 189, 137, 225, 153, 187, 240, 231, 246, 189, 179, 234, 37, 62, 8, 66, 254, 61, 88, 152, 209, 189, 46, 13, 6, 62, 44, 176, 39, 190, 176, 109, 163, 189, 79, 134, 137, 189, 91, 58, 173, 189, 203, 143, 223, 189, 177, 157, 223, 189, 180, 60, 32, 62, 109, 222, 0, 190, 163, 161, 233, 59, 87, 97, 48, 62, 183, 43, 147, 60, 220, 249, 220, 60, 239, 199, 179, 61, 170, 223, 196, 188, 97, 185, 79, 61, 112, 23, 30, 188, 163, 152, 63, 188, 103, 127, 189, 186, 179, 10, 27, 61, 108, 30, 205, 61, 70, 132, 112, 189, 240, 84, 19, 61, 12, 155, 85, 190, 87, 70, 9, 190, 114, 43, 244, 188, 213, 85, 19, 62, 172, 184, 51, 192, 92, 118, 109, 61, 53, 110, 179, 189, 24, 166, 54, 62, 40, 218, 188, 190, 146, 122, 225, 61, 4, 33, 140, 190, 40, 188, 11, 191, 158, 140, 178, 62, 153, 55, 0, 191, 185, 250, 135, 190, 77, 253, 192, 188, 58, 234, 110, 189, 251, 154, 178, 191, 214, 53, 169, 62, 105, 249, 132, 190, 132, 102, 168, 62, 19, 183, 82, 189, 64, 193, 146, 191, 131, 252, 9, 191, 104, 151, 1, 61, 242, 127, 16, 189, 142, 151, 8, 61, 70, 63, 90, 190, 107, 43, 130, 191, 106, 98, 160, 189, 184, 143, 48, 62, 236, 179, 196, 189, 154, 220, 21, 61, 221, 136, 244, 189, 162, 156, 182, 60, 217, 179, 195, 190, 96, 141, 135, 62, 128, 211, 81, 62, 237, 162, 6, 190, 174, 228, 91, 62, 141, 35, 96, 191, 182, 125, 49, 191, 248, 145, 61, 191, 239, 51, 255, 60, 224, 36, 218, 190, 58, 183, 95, 191, 98, 74, 161, 191, 45, 17, 125, 190, 23, 237, 185, 61, 11, 240, 216, 61, 87, 178, 25, 61, 216, 192, 31, 63, 127, 151, 200, 189, 224, 78, 11, 62, 149, 229, 245, 191, 92, 91, 209, 61, 200, 16, 243, 61, 71, 187, 233, 190, 117, 216, 85, 191, 79, 73, 68, 190, 208, 222, 149, 62, 166, 85, 15, 190, 248, 184, 166, 62, 11, 133, 74, 190, 226, 99, 128, 190, 246, 73, 147, 61, 38, 76, 133, 61, 224, 179, 193, 62, 187, 186, 112, 191, 151, 60, 199, 62, 89, 17, 170, 62, 222, 224, 62, 189, 232, 193, 66, 191, 22, 204, 147, 62, 57, 174, 174, 190, 209, 131, 135, 190, 15, 160, 101, 62, 204, 72, 24, 190, 36, 242, 183, 189, 205, 225, 201, 189, 164, 148, 234, 61, 103, 179, 85, 62, 78, 99, 186, 189, 122, 102, 129, 63, 33, 247, 143, 61, 72, 84, 251, 189, 10, 242, 152, 60, 84, 197, 137, 62, 112, 100, 48, 62, 102, 114, 201, 62, 56, 211, 24, 190, 101, 38, 18, 189, 24, 165, 56, 191, 120, 228, 54, 62, 118, 148, 197, 189, 184, 214, 102, 61, 91, 213, 10, 62, 195, 154, 25, 62, 11, 13, 221, 189, 225, 70, 209, 187, 164, 192, 33, 61, 80, 43, 18, 62, 86, 153, 160, 190, 185, 179, 10, 191, 127, 81, 49, 60, 232, 224, 78, 62, 46, 183, 151, 60, 88, 84, 3, 190, 55, 165, 208, 61, 248, 96, 157, 62, 136, 174, 73, 62, 29, 240, 129, 190, 50, 250, 164, 189, 181, 221, 44, 62, 212, 12, 91, 190, 142, 236, 145, 190, 8, 129, 157, 190, 69, 200, 175, 188, 84, 192, 154, 62, 216, 150, 180, 62, 174, 188, 78, 191, 189, 209, 12, 63, 142, 218, 102, 190, 33, 252, 201, 62, 111, 101, 82, 63, 20, 225, 251, 189, 45, 182, 0, 191, 92, 8, 37, 63, 234, 63, 223, 61, 252, 187, 173, 191, 61, 27, 5, 190, 136, 244, 185, 62, 63, 25, 70, 190, 121, 205, 56, 62, 216, 127, 177, 189, 221, 211, 163, 62, 227, 62, 26, 190, 205, 14, 14, 190, 132, 43, 40, 61, 177, 50, 70, 188, 54, 6, 29, 62, 15, 221, 214, 190, 252, 192, 157, 60, 15, 160, 146, 190, 177, 79, 110, 59, 20, 47, 142, 187, 32, 37, 234, 61, 42, 185, 164, 62, 31, 148, 143, 62, 194, 220, 68, 62, 253, 147, 183, 190, 28, 170, 198, 186, 219, 30, 85, 62, 231, 246, 78, 190, 78, 93, 61, 62, 255, 156, 17, 190, 166, 75, 53, 191, 88, 55, 44, 62, 91, 59, 224, 61, 137, 101, 125, 190, 150, 193, 14, 190, 111, 20, 80, 62, 198, 49, 7, 62, 199, 78, 2, 62, 178, 218, 151, 189, 5, 230, 218, 187, 130, 161, 128, 189, 170, 87, 86, 62, 152, 111, 149, 189, 183, 99, 178, 190, 240, 241, 87, 62, 223, 191, 122, 188, 118, 236, 251, 61, 53, 233, 60, 190, 247, 227, 6, 62, 110, 59, 163, 190, 213, 79, 189, 62, 126, 193, 184, 61, 120, 26, 95, 62, 105, 53, 133, 62, 37, 219, 65, 62, 68, 43, 223, 61, 253, 205, 59, 190, 191, 105, 35, 62, 65, 106, 209, 59, 222, 232, 28, 191, 170, 216, 1, 62, 225, 22, 202, 189, 59, 51, 244, 190, 209, 131, 138, 59, 103, 177, 100, 62, 58, 134, 114, 190, 200, 161, 129, 190, 92, 203, 19, 61, 177, 154, 186, 61, 243, 14, 130, 188, 73, 155, 141, 62, 224, 211, 164, 191, 70, 65, 18, 190, 39, 60, 133, 62, 124, 101, 217, 190, 173, 160, 181, 190, 144, 216, 148, 189, 247, 100, 200, 190, 206, 74, 239, 190, 171, 64, 15, 62, 154, 85, 238, 189, 96, 185, 184, 189, 1, 141, 184, 189, 254, 15, 217, 60, 185, 83, 130, 62, 69, 154, 251, 190, 208, 64, 15, 190, 164, 26, 57, 62, 72, 221, 174, 61, 185, 209, 149, 189, 205, 110, 59, 191, 13, 26, 1, 191, 121, 64, 39, 190, 24, 32, 132, 61, 179, 101, 94, 63, 94, 136, 35, 191, 234, 235, 194, 61, 246, 211, 168, 189, 148, 217, 131, 189, 19, 252, 46, 190, 204, 231, 143, 62, 96, 225, 129, 190, 238, 44, 136, 61, 40, 24, 52, 190, 29, 83, 24, 62, 27, 180, 7, 190, 119, 41, 155, 61, 187, 134, 10, 61, 186, 64, 249, 189, 12, 179, 72, 61, 13, 206, 62, 60, 40, 208, 24, 190, 141, 104, 72, 60, 49, 159, 28, 190, 130, 2, 29, 61, 157, 31, 152, 61, 73, 65, 84, 61, 220, 228, 182, 189, 201, 95, 34, 62, 61, 45, 39, 61, 187, 253, 67, 189, 134, 143, 234, 60, 189, 110, 221, 188, 156, 198, 139, 60, 58, 36, 115, 60, 167, 73, 7, 62, 19, 62, 44, 62, 207, 44, 44, 190, 243, 12, 42, 190, 66, 31, 18, 190, 141, 94, 158, 61, 180, 155, 35, 59, 11, 125, 9, 190, 29, 145, 227, 60, 171, 193, 54, 62, 157, 13, 2, 190, 167, 125, 139, 188, 52, 8, 149, 190, 194, 172, 19, 62, 149, 70, 39, 191, 69, 217, 68, 61, 41, 7, 75, 62, 55, 157, 154, 62, 9, 31, 162, 61, 90, 92, 136, 62, 6, 143, 251, 189, 190, 157, 63, 189, 238, 147, 164, 61, 229, 201, 107, 189, 94, 36, 42, 61, 98, 170, 90, 190, 111, 62, 77, 60, 91, 238, 5, 190, 173, 217, 38, 189, 88, 157, 210, 190, 125, 166, 68, 62, 242, 217, 215, 60, 50, 115, 17, 190, 2, 191, 49, 62, 117, 179, 21, 190, 43, 121, 147, 190, 119, 245, 49, 62, 36, 228, 27, 190, 114, 172, 154, 190, 21, 66, 202, 61, 26, 240, 6, 190, 81, 114, 70, 62, 160, 217, 136, 189, 188, 105, 25, 62, 117, 252, 219, 61, 135, 41, 150, 62, 48, 113, 84, 191, 242, 255, 76, 61, 178, 54, 63, 190, 141, 18, 54, 189, 167, 198, 139, 190, 50, 34, 74, 60, 242, 168, 222, 190, 38, 44, 33, 62, 22, 27, 133, 189, 135, 57, 156, 62, 76, 130, 58, 62, 127, 162, 172, 61, 139, 12, 200, 61, 239, 222, 249, 190, 56, 100, 55, 190, 102, 163, 255, 61, 171, 102, 43, 190, 156, 44, 114, 62, 206, 47, 132, 190, 20, 192, 162, 190, 45, 163, 142, 62, 117, 109, 85, 62, 196, 208, 59, 189, 11, 121, 142, 190, 196, 15, 118, 60, 188, 35, 145, 62, 163, 84, 104, 190, 28, 8, 143, 191, 245, 225, 206, 189, 70, 150, 236, 189, 90, 144, 174, 189, 252, 225, 105, 190, 172, 36, 223, 62, 140, 50, 115, 60, 104, 20, 255, 190, 73, 235, 0, 63, 177, 67, 60, 189, 238, 124, 189, 61, 137, 190, 181, 62, 92, 178, 129, 189, 196, 89, 210, 191, 125, 180, 0, 190, 121, 100, 200, 189, 187, 176, 47, 62, 178, 16, 164, 60, 133, 116, 36, 190, 119, 165, 127, 191, 100, 128, 25, 61, 78, 217, 137, 188, 176, 249, 255, 60, 40, 66, 106, 62, 82, 26, 128, 191, 162, 153, 114, 190, 110, 73, 252, 189, 198, 64, 125, 62, 158, 48, 183, 61, 123, 232, 132, 190, 163, 234, 139, 190, 143, 143, 226, 190, 240, 207, 180, 189, 210, 75, 48, 190, 65, 69, 180, 189, 84, 28, 130, 190, 6, 118, 137, 62, 68, 37, 4, 63, 11, 86, 109, 61, 184, 9, 16, 191, 174, 251, 175, 62, 117, 12, 89, 62, 28, 238, 160, 60, 38, 8, 158, 62, 45, 42, 76, 190, 233, 101, 243, 190, 49, 207, 102, 190, 226, 81, 226, 190, 216, 219, 36, 62, 80, 119, 85, 189, 146, 56, 234, 62, 6, 166, 222, 190, 168, 39, 243, 189, 158, 91, 24, 62, 119, 53, 246, 60, 70, 23, 135, 62, 153, 141, 39, 63, 57, 127, 89, 190, 165, 220, 164, 190, 33, 14, 138, 62, 172, 88, 14, 63, 36, 20, 79, 190, 91, 44, 11, 59, 108, 83, 134, 190, 229, 46, 238, 61, 228, 230, 0, 190, 174, 19, 115, 62, 242, 151, 129, 61, 71, 109, 110, 191, 120, 104, 203, 190, 186, 168, 129, 62, 177, 7, 144, 61, 18, 238, 139, 62, 87, 78, 154, 191, 184, 210, 103, 62, 64, 2, 245, 189, 89, 247, 5, 62, 148, 47, 245, 62, 242, 42, 206, 62, 201, 177, 55, 190, 11, 48, 201, 61, 27, 46, 169, 60, 50, 214, 188, 191, 52, 222, 129, 190, 189, 182, 37, 62, 223, 35, 199, 190, 233, 153, 162, 60, 59, 17, 206, 189, 204, 206, 201, 62, 216, 129, 156, 190, 75, 52, 21, 62, 197, 76, 124, 59, 118, 99, 30, 62, 85, 142, 149, 61, 240, 213, 147, 62, 137, 11, 210, 189, 56, 227, 42, 191, 138, 244, 182, 61, 50, 213, 176, 190, 169, 88, 79, 191, 236, 63, 112, 61, 229, 252, 199, 62, 123, 139, 99, 62, 9, 24, 28, 189, 139, 123, 184, 62, 222, 242, 66, 62, 91, 139, 170, 61, 1, 226, 238, 61, 169, 247, 197, 190, 42, 142, 8, 62, 209, 155, 165, 190, 241, 192, 220, 190, 203, 158, 167, 189, 75, 12, 99, 190, 137, 101, 123, 62, 233, 185, 132, 188, 121, 123, 80, 191, 174, 155, 188, 62, 186, 168, 107, 189, 63, 30, 214, 62, 52, 204, 49, 63, 37, 227, 177, 61, 252, 159, 162, 191, 80, 133, 215, 62, 8, 232, 29, 63, 13, 62, 197, 191, 100, 222, 168, 190, 104, 99, 133, 61, 102, 20, 151, 191, 0, 68, 110, 190, 75, 124, 36, 62, 163, 2, 85, 62, 180, 227, 206, 61, 174, 1, 120, 190, 251, 91, 148, 188, 116, 62, 249, 190, 9, 180, 150, 62, 131, 204, 218, 190, 63, 118, 206, 189, 1, 48, 59, 190, 132, 184, 101, 61, 213, 0, 244, 190, 55, 144, 160, 61, 119, 69, 29, 58, 124, 141, 147, 61, 160, 114, 8, 188, 146, 48, 31, 191, 17, 87, 129, 190, 132, 146, 104, 189, 209, 92, 42, 190, 136, 146, 14, 62, 186, 25, 2, 191, 9, 95, 60, 191, 238, 36, 134, 61, 196, 103, 8, 62, 191, 84, 240, 61, 80, 147, 34, 190, 104, 76, 73, 190, 161, 227, 191, 189, 211, 151, 170, 189, 246, 179, 124, 62, 190, 180, 80, 191, 98, 90, 114, 190, 54, 69, 197, 61, 212, 27, 158, 189, 176, 18, 155, 191, 236, 120, 65, 189, 48, 0, 216, 188, 7, 72, 113, 62, 133, 50, 185, 190, 79, 152, 187, 188, 66, 42, 19, 190, 177, 108, 66, 62, 117, 181, 167, 62, 49, 67, 135, 62, 193, 90, 141, 62, 157, 52, 245, 61, 154, 84, 155, 62, 214, 132, 235, 189, 111, 250, 142, 190, 75, 74, 242, 188, 111, 103, 109, 190, 162, 255, 228, 189, 225, 168, 177, 190, 137, 214, 152, 190, 23, 30, 145, 190, 167, 69, 252, 188, 50, 1, 135, 61, 127, 60, 45, 190, 33, 119, 182, 190, 146, 25, 79, 62, 148, 110, 133, 191, 0, 152, 108, 188, 241, 186, 4, 191, 243, 178, 107, 191, 173, 42, 93, 189, 109, 87, 179, 190, 62, 156, 39, 187, 238, 170, 5, 191, 78, 247, 9, 62, 68, 29, 124, 190, 155, 239, 222, 188, 82, 28, 224, 61, 85, 152, 152, 189, 116, 18, 147, 62, 134, 52, 93, 62, 87, 122, 241, 60, 73, 156, 182, 190, 96, 63, 140, 61, 11, 30, 112, 62, 115, 178, 155, 62, 214, 172, 174, 61, 47, 80, 62, 62, 111, 192, 115, 191, 172, 5, 67, 190, 238, 66, 126, 190, 162, 55, 238, 61, 135, 207, 46, 190, 24, 31, 167, 62, 66, 145, 13, 62, 76, 209, 64, 190, 139, 119, 231, 61, 134, 31, 240, 189, 192, 215, 72, 190, 182, 213, 91, 189, 245, 68, 27, 190, 244, 39, 86, 61, 140, 101, 62, 190, 222, 217, 216, 189, 16, 31, 237, 61, 228, 92, 216, 188, 154, 208, 112, 61, 28, 49, 234, 60, 23, 161, 83, 187, 151, 228, 48, 190, 75, 24, 11, 190, 12, 20, 31, 190, 131, 220, 148, 188, 58, 60, 63, 189, 126, 227, 30, 190, 70, 86, 123, 189, 163, 76, 244, 187, 55, 105, 166, 61, 22, 10, 189, 61, 19, 119, 185, 60, 246, 87, 2, 62, 86, 59, 52, 188, 21, 137, 191, 60, 55, 21, 39, 62, 39, 222, 70, 190, 191, 222, 21, 62, 232, 158, 221, 188, 185, 58, 15, 190, 185, 56, 147, 61, 153, 54, 203, 189, 168, 39, 172, 59, 94, 135, 5, 62, 18, 123, 60, 191, 85, 218, 142, 190, 167, 26, 208, 188, 1, 148, 158, 189, 240, 4, 238, 191, 101, 96, 211, 188, 226, 194, 68, 190, 203, 247, 164, 189, 44, 115, 151, 190, 140, 164, 254, 61, 236, 235, 235, 61, 245, 27, 78, 61, 113, 192, 195, 62, 45, 96, 142, 62, 185, 224, 7, 63, 173, 244, 31, 62, 236, 101, 151, 62, 159, 252, 198, 190, 84, 113, 143, 190, 85, 162, 24, 188, 223, 218, 206, 190, 186, 210, 32, 62, 28, 21, 10, 191, 213, 235, 153, 62, 47, 184, 78, 191, 41, 45, 215, 61, 196, 45, 59, 61, 80, 70, 95, 190, 96, 188, 15, 62, 87, 66, 203, 62, 68, 96, 98, 191, 242, 11, 125, 191, 148, 84, 100, 189, 167, 119, 95, 60, 69, 208, 122, 190, 228, 79, 22, 63, 78, 17, 225, 62, 147, 35, 179, 62, 23, 226, 202, 190, 30, 43, 12, 63, 196, 193, 254, 62, 88, 90, 128, 61, 72, 91, 188, 62, 162, 221, 161, 190, 225, 29, 157, 191, 54, 143, 81, 190, 86, 76, 192, 190, 146, 78, 46, 62, 39, 1, 34, 62, 95, 205, 187, 62, 243, 249, 76, 190, 215, 188, 104, 190, 222, 36, 9, 62, 9, 119, 12, 189, 31, 33, 213, 62, 11, 221, 46, 191, 125, 231, 98, 189, 182, 199, 74, 190, 83, 68, 105, 62, 189, 231, 186, 62, 118, 198, 6, 190, 238, 90, 174, 190, 70, 120, 97, 190, 39, 199, 150, 62, 30, 15, 186, 189, 247, 243, 65, 62, 18, 145, 164, 62, 158, 147, 220, 59, 18, 102, 159, 191, 244, 123, 244, 61, 123, 202, 109, 189, 217, 31, 41, 190, 126, 214, 187, 189, 223, 255, 19, 62, 204, 34, 138, 190, 53, 164, 178, 62, 157, 40, 252, 61, 93, 37, 185, 61, 180, 44, 246, 62, 174, 70, 176, 61, 239, 168, 225, 60, 60, 3, 153, 190, 226, 20, 203, 61, 170, 137, 220, 60, 217, 228, 122, 190, 17, 51, 104, 189, 56, 246, 141, 190, 202, 46, 129, 190, 208, 225, 38, 190, 186, 212, 21, 62, 165, 75, 74, 190, 223, 17, 172, 190, 96, 40, 154, 62, 207, 122, 96, 62, 0, 114, 32, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 95, 58, 62, 232, 106, 40, 189, 40, 181, 10, 190, 192, 15, 182, 61, 48, 251, 139, 61, 73, 16, 45, 190, 15, 82, 213, 60, 116, 188, 57, 61, 29, 124, 192, 62, 123, 195, 50, 190, 61, 5, 74, 190, 194, 38, 156, 62, 39, 73, 61, 62, 181, 239, 159, 187, 144, 173, 120, 61, 183, 168, 51, 62, 234, 184, 170, 61, 237, 50, 38, 190, 137, 66, 206, 189, 221, 44, 97, 190, 123, 131, 17, 190, 21, 102, 167, 60, 17, 108, 50, 190, 51, 111, 91, 190, 98, 188, 165, 62, 184, 181, 71, 62, 189, 124, 83, 190, 34, 228, 112, 190, 172, 23, 28, 190, 23, 110, 10, 190, 173, 111, 10, 190, 189, 240, 105, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {112, 177, 69, 191, 0, 170, 30, 188, 52, 244, 232, 189, 219, 32, 37, 63, 217, 99, 214, 61, 80, 47, 10, 62, 60, 7, 42, 62, 91, 112, 221, 62, 123, 86, 115, 191, 193, 118, 34, 190, 145, 93, 41, 188, 150, 136, 89, 190, 34, 100, 140, 63, 189, 152, 111, 62, 155, 108, 66, 191, 22, 5, 174, 61, 219, 64, 199, 61, 209, 153, 151, 191, 188, 122, 131, 60, 12, 4, 114, 62, 23, 186, 206, 62, 188, 95, 37, 191, 73, 128, 10, 191, 15, 41, 14, 63, 170, 241, 2, 191, 219, 227, 207, 188, 66, 19, 14, 63, 20, 17, 140, 190, 83, 188, 27, 58, 40, 74, 177, 63, 102, 162, 49, 191, 59, 44, 227, 62, 180, 14, 37, 61, 175, 177, 130, 61, 98, 129, 142, 188, 75, 97, 93, 62, 59, 203, 131, 190, 240, 27, 28, 62, 116, 222, 138, 190, 2, 127, 147, 62, 41, 56, 166, 189, 165, 141, 166, 189, 114, 199, 96, 188, 109, 123, 58, 191, 243, 188, 160, 62, 52, 35, 139, 60, 74, 248, 20, 190, 247, 210, 49, 190, 158, 165, 116, 190, 22, 240, 10, 190, 100, 151, 223, 189, 130, 173, 64, 62, 75, 166, 57, 62, 62, 16, 119, 190, 24, 211, 92, 62, 124, 33, 255, 188, 239, 149, 18, 190, 95, 109, 1, 191, 118, 204, 33, 62, 3, 252, 202, 61, 64, 209, 98, 61, 230, 168, 191, 62, 200, 198, 136, 61, 82, 219, 237, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 149, 74, 190, 6, 221, 162, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {93, 209, 214, 191, 57, 123, 114, 63, 55, 243, 21, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {128, 65, 235, 63, 254, 133, 189, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0019/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}