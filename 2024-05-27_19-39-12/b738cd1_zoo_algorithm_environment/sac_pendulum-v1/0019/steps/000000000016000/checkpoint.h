// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 75, 206, 62, 58, 64, 132, 191, 241, 24, 196, 190, 47, 223, 22, 190, 174, 125, 58, 63, 220, 142, 120, 61, 116, 211, 208, 61, 24, 7, 10, 63, 35, 22, 160, 190, 62, 185, 149, 62, 236, 157, 247, 190, 59, 188, 238, 62, 119, 190, 25, 191, 28, 202, 133, 189, 20, 223, 215, 190, 196, 43, 62, 63, 22, 2, 131, 63, 109, 246, 142, 62, 73, 61, 161, 188, 46, 20, 143, 62, 56, 123, 25, 191, 51, 102, 146, 191, 126, 163, 173, 190, 251, 7, 143, 189, 118, 204, 94, 63, 49, 23, 174, 62, 16, 133, 188, 189, 226, 128, 140, 190, 159, 77, 161, 191, 8, 55, 159, 190, 235, 133, 88, 62, 23, 160, 144, 191, 81, 50, 6, 191, 204, 63, 4, 62, 36, 81, 147, 62, 111, 113, 221, 62, 36, 102, 206, 61, 68, 127, 41, 190, 51, 19, 234, 62, 198, 228, 8, 191, 122, 125, 73, 191, 44, 51, 31, 190, 147, 101, 48, 63, 194, 33, 114, 191, 20, 152, 101, 190, 95, 219, 63, 191, 228, 206, 68, 191, 208, 183, 176, 190, 138, 14, 30, 63, 192, 213, 144, 61, 215, 239, 229, 62, 137, 64, 227, 189, 69, 5, 61, 191, 235, 78, 152, 62, 32, 159, 250, 190, 181, 223, 241, 191, 158, 160, 220, 190, 174, 148, 65, 191, 206, 62, 187, 189, 180, 59, 41, 190, 113, 50, 221, 61, 3, 105, 97, 63, 246, 254, 33, 63, 244, 174, 41, 189, 192, 162, 82, 63, 165, 186, 188, 187, 106, 95, 160, 62, 34, 93, 209, 61, 248, 28, 19, 191, 100, 146, 29, 63, 90, 187, 124, 63, 44, 226, 246, 62, 111, 141, 14, 63, 168, 143, 95, 191, 218, 235, 62, 190, 134, 234, 249, 189, 252, 107, 99, 63, 106, 255, 118, 190, 254, 123, 134, 190, 241, 0, 205, 62, 108, 96, 56, 63, 102, 164, 145, 62, 45, 145, 44, 191, 196, 167, 44, 63, 121, 31, 173, 62, 14, 133, 24, 190, 89, 29, 50, 63, 240, 55, 235, 189, 50, 197, 154, 63, 179, 148, 20, 63, 250, 229, 248, 62, 90, 12, 97, 191, 252, 32, 54, 190, 121, 8, 93, 191, 191, 164, 49, 63, 28, 2, 202, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 87, 42, 191, 237, 241, 3, 63, 207, 101, 12, 62, 56, 112, 180, 61, 45, 142, 174, 190, 131, 190, 164, 190, 252, 48, 227, 62, 192, 30, 2, 62, 202, 196, 86, 62, 63, 229, 144, 190, 228, 98, 195, 62, 242, 239, 10, 191, 25, 66, 8, 189, 64, 140, 209, 62, 189, 205, 190, 61, 168, 54, 98, 190, 71, 46, 161, 62, 175, 198, 212, 62, 86, 158, 127, 190, 74, 29, 34, 63, 25, 100, 73, 61, 52, 140, 229, 189, 241, 114, 227, 62, 42, 89, 32, 191, 48, 104, 17, 191, 95, 100, 154, 62, 93, 226, 159, 190, 208, 40, 105, 62, 64, 246, 14, 190, 136, 132, 121, 190, 183, 238, 118, 189, 139, 164, 185, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 103, 133, 190, 109, 63, 77, 62, 242, 185, 172, 190, 236, 150, 148, 191, 58, 21, 7, 62, 125, 6, 68, 191, 134, 148, 43, 62, 177, 20, 163, 62, 179, 76, 34, 61, 69, 204, 65, 62, 123, 59, 76, 62, 101, 104, 227, 61, 232, 123, 72, 191, 227, 163, 96, 189, 180, 164, 52, 189, 111, 90, 153, 190, 234, 203, 151, 191, 131, 176, 61, 190, 196, 2, 47, 60, 101, 177, 84, 187, 166, 163, 71, 191, 164, 83, 103, 62, 220, 67, 47, 190, 178, 94, 141, 61, 29, 56, 129, 63, 75, 4, 232, 58, 66, 203, 163, 191, 146, 119, 33, 191, 144, 27, 104, 190, 148, 249, 94, 191, 101, 90, 159, 190, 180, 226, 200, 62, 181, 191, 131, 61, 197, 129, 69, 190, 142, 43, 235, 188, 177, 221, 40, 190, 174, 126, 54, 189, 68, 131, 241, 61, 123, 113, 212, 61, 172, 106, 13, 190, 171, 86, 48, 61, 42, 114, 209, 60, 32, 145, 151, 61, 128, 98, 185, 189, 207, 5, 228, 188, 222, 33, 203, 189, 57, 175, 64, 190, 106, 241, 25, 61, 21, 36, 108, 61, 136, 154, 17, 190, 22, 113, 7, 62, 163, 87, 72, 190, 217, 129, 232, 189, 8, 165, 26, 60, 193, 16, 93, 190, 239, 55, 141, 189, 251, 63, 60, 61, 106, 61, 40, 190, 37, 28, 52, 190, 125, 197, 204, 189, 82, 130, 216, 188, 234, 228, 9, 190, 139, 219, 86, 190, 52, 94, 122, 189, 98, 182, 184, 189, 49, 30, 43, 190, 255, 34, 96, 61, 117, 134, 207, 61, 208, 59, 12, 187, 26, 119, 202, 61, 159, 10, 37, 190, 183, 226, 175, 61, 81, 13, 21, 190, 114, 211, 43, 190, 31, 82, 207, 61, 167, 241, 179, 61, 156, 0, 153, 189, 177, 39, 28, 190, 112, 226, 158, 189, 124, 224, 70, 60, 105, 100, 53, 60, 119, 200, 217, 61, 235, 129, 9, 61, 207, 35, 38, 189, 115, 131, 135, 189, 185, 205, 47, 190, 140, 178, 5, 190, 115, 18, 242, 61, 47, 26, 43, 189, 102, 191, 159, 61, 187, 195, 186, 184, 216, 26, 169, 189, 4, 2, 142, 189, 167, 169, 167, 189, 36, 235, 201, 61, 115, 9, 84, 189, 237, 254, 55, 191, 96, 30, 198, 190, 109, 7, 243, 190, 167, 62, 56, 62, 193, 217, 132, 190, 76, 114, 176, 190, 137, 20, 176, 190, 122, 162, 62, 62, 140, 165, 3, 190, 125, 209, 47, 62, 149, 118, 250, 189, 200, 152, 12, 190, 21, 21, 172, 61, 166, 143, 144, 62, 10, 114, 13, 191, 65, 212, 215, 62, 70, 200, 210, 188, 66, 62, 90, 61, 216, 19, 103, 62, 15, 68, 34, 190, 224, 230, 28, 190, 165, 192, 157, 190, 59, 125, 37, 191, 140, 78, 170, 190, 109, 192, 7, 191, 209, 104, 133, 190, 204, 236, 21, 190, 148, 74, 25, 61, 240, 6, 244, 61, 72, 121, 183, 190, 205, 231, 11, 191, 51, 177, 132, 189, 254, 175, 199, 189, 101, 138, 169, 62, 25, 47, 255, 61, 164, 181, 16, 62, 188, 168, 133, 189, 77, 59, 225, 189, 251, 243, 78, 189, 159, 156, 87, 189, 3, 181, 187, 62, 219, 183, 167, 190, 134, 87, 25, 62, 98, 5, 126, 189, 166, 102, 89, 62, 220, 106, 123, 62, 82, 37, 155, 62, 121, 81, 88, 62, 174, 82, 118, 62, 27, 187, 1, 62, 171, 49, 11, 190, 26, 27, 12, 62, 226, 158, 50, 60, 44, 245, 84, 61, 220, 86, 35, 62, 85, 84, 116, 61, 151, 138, 5, 191, 185, 96, 61, 62, 157, 4, 145, 62, 115, 82, 57, 190, 225, 65, 30, 190, 155, 227, 144, 61, 14, 34, 2, 62, 25, 3, 185, 61, 45, 8, 1, 60, 186, 240, 54, 190, 3, 237, 184, 189, 150, 189, 81, 61, 186, 80, 236, 61, 19, 38, 15, 62, 22, 101, 220, 61, 136, 151, 51, 190, 44, 90, 134, 189, 72, 198, 154, 60, 1, 8, 55, 190, 60, 27, 40, 62, 6, 209, 32, 60, 224, 33, 163, 189, 69, 52, 249, 61, 189, 215, 149, 189, 121, 254, 192, 189, 59, 171, 143, 188, 200, 159, 73, 190, 229, 177, 143, 61, 92, 76, 4, 61, 142, 69, 31, 190, 56, 180, 164, 61, 86, 200, 192, 189, 12, 227, 162, 60, 44, 34, 250, 189, 114, 87, 171, 189, 20, 66, 8, 190, 76, 177, 202, 61, 71, 58, 130, 189, 125, 234, 239, 60, 69, 141, 208, 60, 45, 112, 28, 60, 204, 228, 141, 59, 223, 174, 80, 62, 198, 146, 187, 61, 246, 203, 115, 57, 13, 125, 238, 189, 100, 241, 169, 62, 11, 31, 211, 60, 119, 4, 176, 62, 208, 103, 168, 189, 49, 210, 8, 62, 11, 237, 36, 190, 107, 34, 216, 60, 200, 192, 79, 62, 130, 212, 106, 62, 206, 117, 221, 61, 46, 208, 21, 62, 188, 69, 12, 62, 29, 98, 56, 61, 164, 216, 240, 188, 9, 38, 25, 61, 149, 133, 149, 189, 219, 30, 72, 61, 144, 141, 2, 191, 56, 215, 24, 191, 81, 218, 184, 189, 56, 130, 47, 190, 128, 183, 167, 62, 43, 100, 40, 189, 217, 160, 190, 190, 25, 29, 180, 62, 246, 31, 238, 189, 212, 55, 133, 62, 132, 245, 182, 62, 145, 81, 75, 62, 152, 112, 196, 189, 112, 214, 179, 62, 221, 51, 53, 63, 3, 27, 231, 61, 194, 167, 88, 189, 61, 226, 168, 62, 43, 57, 135, 62, 97, 240, 1, 62, 224, 239, 254, 188, 227, 178, 242, 189, 101, 194, 248, 189, 241, 11, 132, 190, 24, 226, 133, 60, 187, 13, 43, 189, 158, 97, 135, 190, 153, 64, 27, 62, 55, 191, 161, 189, 140, 135, 142, 62, 89, 197, 212, 62, 181, 202, 162, 61, 129, 129, 130, 62, 37, 57, 166, 191, 130, 247, 227, 61, 36, 30, 157, 187, 18, 146, 192, 61, 193, 205, 3, 62, 87, 101, 163, 190, 157, 21, 137, 190, 94, 21, 156, 62, 176, 172, 171, 190, 40, 84, 48, 62, 0, 182, 162, 190, 83, 122, 62, 191, 67, 122, 133, 62, 32, 182, 154, 62, 254, 204, 253, 61, 95, 145, 166, 62, 180, 248, 39, 61, 66, 37, 15, 62, 16, 141, 74, 61, 133, 212, 121, 62, 206, 79, 49, 191, 73, 188, 218, 61, 9, 56, 130, 190, 223, 189, 130, 62, 139, 192, 45, 189, 72, 215, 146, 190, 117, 101, 241, 61, 56, 47, 40, 62, 1, 81, 136, 191, 2, 222, 218, 62, 111, 6, 137, 190, 205, 175, 3, 63, 114, 83, 128, 191, 159, 3, 111, 60, 172, 158, 126, 191, 56, 157, 146, 62, 42, 244, 15, 190, 114, 183, 219, 191, 17, 130, 122, 190, 19, 146, 55, 62, 112, 118, 158, 61, 35, 118, 123, 61, 68, 110, 21, 62, 140, 205, 160, 60, 190, 138, 50, 61, 134, 216, 50, 61, 1, 201, 253, 189, 132, 21, 172, 61, 51, 225, 251, 61, 179, 4, 41, 190, 19, 46, 8, 190, 226, 75, 252, 60, 57, 188, 147, 60, 233, 45, 212, 61, 227, 227, 7, 60, 220, 36, 202, 61, 164, 242, 250, 60, 5, 41, 163, 61, 136, 83, 153, 61, 140, 106, 144, 188, 182, 128, 62, 188, 10, 65, 192, 61, 122, 120, 43, 190, 179, 122, 157, 189, 22, 208, 251, 189, 117, 35, 216, 59, 147, 75, 32, 190, 148, 217, 23, 190, 140, 224, 2, 190, 101, 187, 189, 61, 196, 60, 173, 187, 205, 127, 231, 189, 137, 225, 153, 187, 240, 231, 246, 189, 179, 234, 37, 62, 8, 66, 254, 61, 88, 152, 209, 189, 46, 13, 6, 62, 44, 176, 39, 190, 176, 109, 163, 189, 79, 134, 137, 189, 91, 58, 173, 189, 203, 143, 223, 189, 177, 157, 223, 189, 180, 60, 32, 62, 109, 222, 0, 190, 163, 161, 233, 59, 87, 97, 48, 62, 183, 43, 147, 60, 220, 249, 220, 60, 239, 199, 179, 61, 170, 223, 196, 188, 97, 185, 79, 61, 112, 23, 30, 188, 163, 152, 63, 188, 103, 127, 189, 186, 179, 10, 27, 61, 108, 30, 205, 61, 70, 132, 112, 189, 240, 84, 19, 61, 12, 155, 85, 190, 87, 70, 9, 190, 114, 43, 244, 188, 213, 85, 19, 62, 84, 105, 59, 192, 118, 43, 125, 61, 72, 177, 134, 189, 167, 169, 55, 62, 100, 121, 191, 190, 214, 157, 233, 61, 245, 251, 130, 190, 116, 44, 18, 191, 41, 103, 185, 62, 153, 55, 0, 191, 20, 0, 126, 190, 78, 4, 218, 188, 251, 197, 131, 189, 60, 14, 183, 191, 116, 140, 177, 62, 105, 249, 132, 190, 194, 67, 171, 62, 28, 72, 77, 189, 132, 189, 151, 191, 57, 31, 13, 191, 252, 178, 201, 60, 252, 198, 156, 186, 201, 66, 105, 61, 141, 13, 98, 190, 84, 214, 126, 191, 198, 81, 180, 189, 0, 48, 50, 62, 53, 76, 203, 189, 244, 185, 225, 60, 190, 143, 251, 189, 178, 203, 28, 61, 11, 32, 203, 190, 96, 141, 135, 62, 230, 159, 63, 62, 203, 211, 91, 190, 19, 143, 90, 62, 109, 248, 99, 191, 100, 127, 63, 191, 207, 226, 80, 191, 145, 15, 117, 61, 91, 196, 29, 191, 181, 250, 97, 191, 2, 81, 159, 191, 243, 69, 113, 190, 51, 116, 189, 61, 7, 181, 144, 61, 40, 182, 201, 59, 46, 147, 28, 63, 81, 183, 209, 189, 18, 202, 12, 62, 155, 171, 247, 191, 242, 29, 176, 61, 233, 214, 244, 61, 149, 234, 45, 191, 151, 106, 90, 191, 155, 125, 71, 190, 212, 244, 149, 62, 16, 248, 141, 190, 235, 47, 170, 62, 152, 158, 72, 190, 61, 250, 125, 190, 155, 1, 160, 61, 93, 226, 32, 61, 147, 204, 193, 62, 164, 241, 131, 191, 19, 11, 205, 62, 201, 61, 200, 62, 149, 4, 101, 189, 118, 171, 87, 191, 71, 238, 166, 62, 180, 185, 163, 190, 249, 15, 139, 190, 154, 167, 130, 62, 12, 163, 210, 189, 172, 13, 223, 189, 184, 159, 220, 189, 56, 231, 221, 61, 17, 48, 86, 62, 49, 176, 228, 189, 80, 153, 136, 63, 28, 120, 139, 61, 204, 4, 8, 190, 30, 70, 112, 61, 35, 255, 72, 62, 76, 55, 48, 62, 254, 67, 197, 62, 247, 95, 14, 190, 103, 22, 6, 189, 64, 159, 72, 191, 226, 233, 117, 62, 93, 24, 229, 189, 80, 113, 77, 61, 103, 59, 7, 62, 232, 144, 14, 62, 70, 145, 9, 190, 216, 222, 155, 189, 250, 65, 57, 61, 32, 124, 29, 62, 177, 139, 165, 190, 86, 200, 24, 191, 243, 115, 241, 187, 119, 84, 181, 61, 160, 105, 176, 59, 159, 12, 180, 189, 171, 146, 154, 61, 170, 72, 168, 62, 108, 122, 62, 62, 229, 206, 130, 190, 172, 147, 17, 190, 22, 152, 53, 62, 255, 230, 109, 190, 66, 120, 151, 190, 208, 134, 200, 190, 148, 235, 95, 189, 49, 153, 166, 62, 109, 16, 188, 62, 149, 40, 70, 191, 155, 179, 12, 63, 2, 47, 116, 190, 230, 166, 194, 62, 225, 113, 81, 63, 166, 64, 7, 190, 24, 236, 10, 191, 248, 154, 25, 63, 179, 125, 161, 60, 160, 198, 161, 191, 171, 234, 15, 190, 53, 233, 194, 62, 200, 20, 132, 190, 152, 223, 63, 62, 96, 8, 184, 189, 62, 43, 162, 62, 237, 176, 62, 190, 255, 64, 2, 190, 58, 105, 251, 60, 84, 43, 88, 189, 135, 48, 37, 62, 16, 255, 4, 191, 77, 34, 45, 60, 88, 209, 149, 190, 17, 38, 30, 59, 174, 120, 6, 189, 134, 206, 223, 61, 23, 44, 135, 62, 137, 223, 143, 62, 1, 36, 67, 62, 237, 254, 230, 190, 255, 66, 59, 189, 202, 9, 82, 62, 54, 167, 51, 190, 253, 73, 52, 62, 247, 29, 10, 190, 4, 143, 53, 191, 137, 20, 60, 62, 160, 185, 202, 61, 254, 208, 122, 190, 113, 42, 9, 190, 83, 140, 75, 62, 255, 188, 254, 61, 70, 183, 181, 61, 175, 171, 157, 189, 229, 24, 168, 188, 101, 95, 151, 189, 183, 73, 96, 62, 161, 94, 146, 189, 126, 13, 184, 190, 216, 225, 81, 62, 133, 118, 6, 189, 122, 147, 243, 61, 41, 26, 71, 190, 43, 202, 8, 62, 142, 174, 151, 190, 233, 247, 197, 62, 142, 96, 187, 61, 18, 252, 93, 62, 97, 92, 130, 62, 172, 44, 68, 62, 223, 46, 251, 61, 206, 240, 68, 190, 175, 131, 13, 62, 178, 148, 107, 60, 181, 63, 42, 191, 100, 175, 244, 61, 109, 22, 160, 189, 113, 40, 239, 190, 26, 111, 34, 187, 96, 7, 115, 62, 29, 68, 98, 190, 140, 71, 108, 190, 182, 255, 81, 61, 14, 50, 180, 61, 81, 103, 74, 189, 193, 123, 131, 62, 86, 20, 175, 191, 49, 69, 43, 190, 230, 204, 133, 62, 174, 248, 212, 190, 173, 160, 181, 190, 91, 72, 215, 189, 230, 117, 202, 190, 194, 215, 4, 191, 34, 108, 8, 62, 77, 19, 9, 190, 213, 62, 31, 188, 199, 109, 208, 189, 0, 169, 164, 60, 128, 239, 112, 62, 21, 165, 251, 190, 48, 245, 16, 190, 129, 0, 55, 62, 134, 100, 162, 61, 223, 36, 162, 189, 225, 239, 42, 191, 13, 26, 1, 191, 249, 16, 71, 190, 24, 32, 132, 61, 20, 138, 87, 63, 238, 139, 38, 191, 33, 217, 182, 61, 32, 71, 164, 189, 168, 46, 172, 189, 202, 99, 47, 190, 165, 245, 134, 62, 150, 4, 132, 190, 238, 44, 136, 61, 40, 24, 52, 190, 29, 83, 24, 62, 27, 180, 7, 190, 119, 41, 155, 61, 187, 134, 10, 61, 186, 64, 249, 189, 12, 179, 72, 61, 13, 206, 62, 60, 40, 208, 24, 190, 141, 104, 72, 60, 49, 159, 28, 190, 130, 2, 29, 61, 157, 31, 152, 61, 73, 65, 84, 61, 220, 228, 182, 189, 201, 95, 34, 62, 61, 45, 39, 61, 187, 253, 67, 189, 134, 143, 234, 60, 189, 110, 221, 188, 156, 198, 139, 60, 58, 36, 115, 60, 167, 73, 7, 62, 19, 62, 44, 62, 207, 44, 44, 190, 243, 12, 42, 190, 66, 31, 18, 190, 141, 94, 158, 61, 180, 155, 35, 59, 11, 125, 9, 190, 29, 145, 227, 60, 3, 141, 58, 62, 85, 168, 2, 190, 53, 120, 174, 187, 253, 57, 176, 190, 56, 201, 21, 62, 225, 232, 32, 191, 162, 195, 128, 61, 112, 219, 55, 62, 190, 104, 160, 62, 198, 99, 46, 61, 14, 231, 138, 62, 6, 143, 251, 189, 72, 111, 167, 189, 107, 136, 138, 61, 52, 139, 104, 189, 182, 181, 60, 61, 245, 26, 111, 190, 188, 132, 29, 189, 183, 68, 46, 190, 125, 61, 87, 189, 69, 153, 210, 190, 9, 62, 60, 62, 155, 211, 29, 61, 50, 115, 17, 190, 115, 122, 47, 62, 66, 107, 9, 190, 43, 121, 147, 190, 113, 25, 236, 61, 187, 228, 63, 190, 114, 172, 154, 190, 161, 144, 191, 61, 55, 71, 21, 190, 213, 121, 78, 62, 235, 92, 147, 189, 112, 133, 26, 62, 33, 61, 218, 61, 154, 170, 157, 62, 130, 156, 86, 191, 156, 153, 81, 61, 69, 133, 66, 190, 238, 206, 83, 189, 11, 212, 150, 190, 53, 68, 14, 60, 22, 251, 218, 190, 3, 191, 42, 62, 36, 99, 56, 189, 89, 21, 152, 62, 100, 79, 77, 62, 216, 254, 161, 61, 237, 106, 199, 61, 214, 250, 2, 191, 62, 171, 49, 190, 13, 253, 252, 61, 135, 20, 45, 190, 149, 95, 104, 62, 61, 204, 130, 190, 7, 149, 165, 190, 61, 251, 155, 62, 248, 181, 82, 62, 72, 238, 40, 189, 193, 180, 134, 190, 221, 53, 157, 60, 40, 182, 140, 62, 184, 42, 94, 190, 58, 31, 147, 191, 200, 206, 204, 189, 175, 252, 224, 189, 164, 242, 159, 189, 33, 5, 109, 190, 58, 102, 228, 62, 225, 18, 205, 60, 21, 95, 12, 191, 65, 0, 2, 63, 177, 67, 60, 189, 4, 202, 212, 61, 24, 157, 191, 62, 95, 84, 107, 189, 88, 126, 215, 191, 167, 204, 235, 189, 121, 100, 200, 189, 20, 225, 54, 62, 172, 226, 205, 60, 192, 212, 68, 190, 76, 50, 136, 191, 84, 190, 71, 61, 38, 42, 192, 59, 217, 97, 61, 61, 248, 159, 123, 62, 124, 28, 126, 191, 113, 76, 155, 190, 151, 194, 208, 189, 11, 24, 127, 62, 98, 54, 182, 61, 220, 60, 120, 190, 64, 101, 134, 190, 61, 239, 223, 190, 68, 111, 170, 189, 179, 170, 53, 190, 15, 193, 164, 189, 188, 207, 124, 190, 81, 180, 146, 62, 251, 37, 6, 63, 236, 173, 135, 61, 31, 4, 32, 191, 59, 203, 174, 62, 193, 41, 108, 62, 66, 223, 206, 60, 112, 244, 169, 62, 77, 175, 65, 190, 27, 73, 255, 190, 55, 59, 98, 190, 163, 149, 226, 190, 10, 174, 39, 62, 73, 74, 69, 189, 163, 67, 244, 62, 150, 197, 236, 190, 179, 158, 212, 189, 139, 196, 49, 62, 211, 107, 36, 61, 61, 90, 145, 62, 39, 99, 39, 63, 235, 56, 137, 190, 35, 198, 151, 190, 23, 66, 139, 62, 123, 16, 15, 63, 168, 123, 59, 190, 201, 134, 220, 59, 189, 12, 132, 190, 17, 110, 51, 62, 4, 76, 14, 190, 186, 90, 113, 62, 120, 46, 103, 61, 163, 92, 109, 191, 180, 44, 222, 190, 125, 89, 129, 62, 64, 49, 252, 61, 198, 71, 138, 62, 135, 228, 161, 191, 7, 162, 103, 62, 94, 225, 5, 190, 22, 124, 0, 62, 194, 233, 0, 63, 177, 70, 204, 62, 230, 85, 59, 190, 246, 245, 180, 61, 47, 222, 140, 60, 11, 209, 196, 191, 0, 100, 91, 190, 133, 207, 15, 62, 111, 230, 247, 190, 169, 242, 69, 60, 185, 219, 10, 190, 198, 236, 204, 62, 245, 252, 131, 190, 82, 247, 4, 62, 109, 240, 30, 59, 154, 116, 30, 62, 248, 3, 94, 61, 194, 226, 145, 62, 180, 92, 245, 189, 222, 191, 41, 191, 123, 200, 150, 61, 107, 15, 181, 190, 216, 207, 75, 191, 229, 169, 103, 61, 185, 151, 192, 62, 39, 184, 93, 62, 197, 191, 164, 186, 39, 234, 186, 62, 229, 136, 109, 62, 183, 96, 198, 61, 1, 226, 238, 61, 190, 198, 193, 190, 120, 64, 23, 62, 21, 24, 159, 190, 26, 165, 217, 190, 94, 226, 147, 189, 60, 115, 82, 190, 119, 27, 148, 62, 28, 14, 102, 188, 200, 49, 90, 191, 96, 105, 169, 62, 159, 112, 83, 189, 222, 181, 94, 62, 36, 106, 53, 63, 93, 184, 69, 61, 59, 171, 151, 191, 142, 101, 220, 62, 235, 64, 28, 63, 162, 27, 232, 191, 97, 251, 161, 190, 192, 168, 41, 61, 18, 232, 143, 191, 154, 122, 100, 190, 6, 60, 70, 62, 31, 215, 77, 62, 150, 165, 14, 62, 87, 56, 121, 190, 129, 199, 170, 60, 146, 148, 9, 191, 128, 4, 162, 62, 231, 240, 209, 190, 49, 67, 129, 189, 227, 98, 60, 190, 247, 98, 35, 61, 10, 207, 254, 190, 14, 15, 210, 61, 42, 24, 33, 60, 70, 215, 151, 61, 73, 52, 102, 188, 238, 85, 25, 191, 147, 49, 116, 190, 194, 213, 161, 189, 128, 110, 28, 190, 252, 231, 55, 62, 248, 200, 4, 191, 101, 83, 51, 191, 208, 157, 173, 61, 112, 149, 254, 61, 78, 35, 227, 61, 107, 44, 47, 190, 240, 178, 76, 190, 44, 166, 158, 189, 226, 178, 178, 189, 205, 54, 147, 62, 204, 80, 88, 191, 7, 22, 137, 190, 61, 230, 178, 61, 62, 149, 214, 189, 109, 26, 160, 191, 107, 79, 150, 189, 1, 7, 81, 189, 103, 63, 88, 62, 159, 41, 187, 190, 44, 46, 41, 189, 120, 8, 12, 190, 98, 234, 69, 62, 29, 142, 178, 62, 58, 112, 121, 62, 230, 204, 129, 62, 60, 176, 206, 61, 148, 53, 151, 62, 165, 159, 243, 189, 18, 34, 147, 190, 175, 7, 36, 189, 111, 103, 109, 190, 190, 98, 17, 190, 167, 31, 176, 190, 183, 252, 153, 190, 186, 70, 129, 190, 161, 81, 3, 189, 128, 254, 124, 61, 114, 96, 38, 190, 236, 83, 180, 190, 209, 63, 59, 62, 152, 188, 131, 191, 183, 28, 44, 189, 82, 45, 255, 190, 131, 223, 113, 191, 157, 66, 100, 189, 226, 237, 163, 190, 77, 91, 99, 61, 213, 185, 14, 191, 255, 176, 221, 61, 61, 74, 140, 190, 193, 16, 199, 188, 141, 148, 71, 61, 105, 119, 151, 189, 86, 47, 147, 62, 29, 220, 107, 62, 93, 96, 208, 59, 232, 80, 156, 190, 223, 121, 139, 61, 236, 15, 107, 62, 251, 6, 159, 62, 104, 175, 189, 61, 242, 205, 70, 62, 134, 71, 87, 191, 149, 70, 121, 190, 111, 150, 105, 190, 130, 211, 205, 60, 144, 35, 57, 190, 193, 77, 169, 62, 29, 178, 9, 62, 158, 147, 66, 190, 100, 12, 245, 61, 80, 184, 15, 190, 23, 12, 52, 190, 182, 213, 91, 189, 245, 68, 27, 190, 244, 39, 86, 61, 140, 101, 62, 190, 222, 217, 216, 189, 16, 31, 237, 61, 228, 92, 216, 188, 154, 208, 112, 61, 28, 49, 234, 60, 23, 161, 83, 187, 151, 228, 48, 190, 75, 24, 11, 190, 12, 20, 31, 190, 131, 220, 148, 188, 58, 60, 63, 189, 126, 227, 30, 190, 70, 86, 123, 189, 163, 76, 244, 187, 55, 105, 166, 61, 22, 10, 189, 61, 19, 119, 185, 60, 246, 87, 2, 62, 86, 59, 52, 188, 21, 137, 191, 60, 55, 21, 39, 62, 39, 222, 70, 190, 191, 222, 21, 62, 232, 158, 221, 188, 185, 58, 15, 190, 185, 56, 147, 61, 153, 54, 203, 189, 168, 39, 172, 59, 248, 28, 15, 62, 245, 137, 60, 191, 206, 205, 152, 190, 159, 163, 150, 188, 216, 181, 157, 189, 117, 132, 239, 191, 188, 59, 2, 189, 131, 148, 28, 190, 116, 214, 163, 189, 79, 76, 146, 190, 213, 18, 5, 62, 252, 118, 229, 61, 123, 27, 108, 61, 242, 255, 214, 62, 177, 69, 144, 62, 18, 104, 13, 63, 236, 83, 35, 62, 116, 159, 156, 62, 48, 243, 192, 190, 121, 191, 134, 190, 139, 240, 182, 188, 205, 173, 198, 190, 66, 124, 24, 62, 117, 19, 11, 191, 76, 94, 163, 62, 215, 171, 74, 191, 82, 236, 198, 61, 200, 73, 108, 61, 198, 131, 80, 190, 134, 22, 10, 62, 202, 154, 205, 62, 160, 107, 113, 191, 197, 244, 98, 191, 81, 214, 168, 189, 106, 231, 187, 186, 253, 6, 115, 190, 148, 135, 28, 63, 39, 116, 219, 62, 67, 43, 178, 62, 191, 98, 198, 190, 95, 14, 11, 63, 82, 149, 63, 63, 230, 104, 153, 61, 103, 61, 198, 62, 23, 137, 158, 190, 61, 27, 157, 191, 162, 210, 71, 190, 56, 109, 160, 190, 222, 172, 50, 62, 37, 127, 39, 62, 163, 70, 32, 63, 34, 66, 94, 190, 173, 41, 100, 190, 206, 160, 148, 61, 114, 136, 221, 188, 144, 17, 218, 62, 4, 67, 44, 191, 246, 129, 241, 189, 189, 40, 54, 190, 75, 140, 107, 62, 34, 234, 186, 62, 213, 25, 252, 189, 91, 162, 168, 190, 26, 22, 128, 190, 213, 226, 152, 62, 173, 79, 8, 190, 185, 48, 59, 62, 54, 103, 163, 62, 88, 138, 239, 60, 97, 255, 165, 191, 75, 150, 240, 61, 77, 168, 227, 189, 128, 138, 48, 190, 133, 51, 253, 189, 246, 18, 29, 62, 130, 44, 145, 190, 13, 23, 178, 62, 251, 231, 245, 61, 130, 118, 189, 61, 101, 6, 248, 62, 166, 149, 165, 61, 90, 62, 202, 60, 169, 205, 170, 190, 174, 104, 158, 61, 168, 76, 0, 60, 127, 245, 127, 190, 131, 14, 125, 189, 233, 235, 149, 190, 113, 89, 103, 190, 40, 144, 32, 190, 127, 143, 255, 61, 17, 101, 76, 190, 214, 139, 171, 190, 56, 197, 142, 62, 141, 250, 101, 62, 46, 225, 130, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 231, 76, 62, 232, 106, 40, 189, 40, 181, 10, 190, 150, 211, 149, 61, 67, 251, 148, 61, 73, 16, 45, 190, 238, 65, 246, 60, 179, 144, 104, 61, 107, 61, 208, 62, 123, 195, 50, 190, 61, 5, 74, 190, 49, 23, 162, 62, 211, 72, 44, 62, 167, 225, 227, 187, 47, 186, 132, 61, 201, 118, 52, 62, 192, 165, 161, 61, 201, 179, 56, 190, 137, 66, 206, 189, 190, 199, 106, 190, 123, 242, 23, 190, 87, 173, 209, 60, 255, 104, 51, 190, 78, 164, 96, 190, 54, 170, 169, 62, 63, 121, 84, 62, 116, 210, 104, 190, 24, 200, 118, 190, 172, 23, 28, 190, 84, 79, 6, 190, 228, 112, 12, 190, 70, 122, 147, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 92, 68, 191, 0, 170, 30, 188, 52, 244, 232, 189, 88, 64, 32, 63, 159, 4, 199, 61, 80, 47, 10, 62, 50, 61, 34, 62, 225, 244, 234, 62, 134, 12, 118, 191, 193, 118, 34, 190, 145, 93, 41, 188, 232, 134, 95, 190, 72, 42, 141, 63, 142, 32, 126, 62, 255, 26, 71, 191, 33, 131, 163, 61, 144, 133, 169, 61, 85, 82, 148, 191, 188, 122, 131, 60, 67, 195, 122, 62, 95, 222, 197, 62, 17, 212, 37, 191, 109, 38, 7, 191, 4, 2, 13, 63, 29, 52, 241, 190, 168, 22, 51, 189, 187, 34, 16, 63, 237, 194, 134, 190, 83, 188, 27, 58, 186, 241, 177, 63, 84, 196, 43, 191, 206, 229, 239, 62, 123, 2, 49, 61, 175, 177, 130, 61, 98, 129, 142, 188, 169, 90, 19, 62, 3, 39, 141, 190, 240, 27, 28, 62, 195, 242, 146, 190, 174, 17, 144, 62, 140, 135, 142, 189, 165, 141, 166, 189, 114, 199, 96, 188, 145, 144, 60, 191, 241, 65, 170, 62, 224, 117, 203, 59, 11, 53, 26, 190, 17, 160, 63, 190, 93, 23, 122, 190, 57, 109, 101, 190, 100, 151, 223, 189, 102, 69, 61, 62, 228, 224, 48, 62, 103, 199, 120, 190, 176, 131, 71, 62, 130, 39, 75, 189, 145, 67, 62, 190, 116, 241, 0, 191, 130, 170, 59, 62, 204, 110, 148, 61, 64, 209, 98, 61, 108, 123, 175, 62, 35, 27, 21, 61, 236, 218, 11, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 23, 75, 190, 16, 140, 180, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {117, 77, 140, 191, 151, 54, 253, 191, 113, 98, 40, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {10, 78, 41, 190, 68, 84, 98, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0019/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}