// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 145, 123, 62, 203, 248, 39, 191, 224, 175, 230, 190, 45, 153, 62, 190, 24, 241, 45, 63, 230, 38, 17, 61, 152, 31, 38, 62, 37, 112, 185, 62, 231, 164, 143, 190, 217, 190, 8, 62, 189, 32, 60, 191, 98, 78, 255, 62, 173, 122, 104, 190, 182, 27, 147, 61, 47, 173, 176, 190, 203, 96, 204, 62, 182, 6, 25, 63, 135, 195, 147, 62, 173, 221, 182, 61, 131, 1, 151, 62, 167, 227, 19, 191, 219, 65, 119, 191, 55, 210, 171, 189, 200, 52, 217, 189, 47, 62, 132, 63, 181, 200, 184, 62, 162, 54, 146, 189, 168, 65, 29, 190, 44, 131, 202, 189, 163, 158, 234, 190, 92, 45, 151, 62, 181, 14, 65, 191, 173, 37, 41, 191, 4, 197, 32, 190, 189, 122, 82, 62, 179, 60, 246, 62, 90, 143, 30, 188, 103, 141, 4, 191, 72, 206, 249, 62, 179, 224, 111, 190, 87, 126, 200, 190, 128, 1, 136, 189, 72, 98, 30, 63, 211, 210, 70, 191, 41, 246, 157, 190, 124, 169, 161, 190, 235, 114, 217, 190, 130, 34, 78, 190, 74, 22, 171, 62, 188, 149, 118, 190, 144, 181, 46, 63, 91, 181, 117, 189, 216, 66, 61, 191, 113, 202, 116, 62, 82, 252, 39, 190, 108, 196, 185, 190, 210, 132, 52, 191, 25, 199, 40, 191, 172, 177, 50, 190, 171, 90, 91, 188, 4, 122, 22, 190, 15, 125, 207, 189, 179, 65, 61, 63, 236, 242, 16, 62, 183, 94, 243, 62, 197, 155, 117, 189, 82, 237, 14, 63, 140, 187, 251, 61, 218, 32, 17, 191, 218, 117, 101, 189, 4, 187, 89, 63, 44, 251, 12, 63, 5, 147, 15, 63, 15, 189, 230, 190, 46, 232, 63, 190, 199, 145, 60, 190, 126, 66, 0, 63, 166, 104, 19, 61, 223, 223, 213, 190, 224, 207, 235, 190, 164, 232, 66, 63, 36, 171, 205, 62, 239, 34, 238, 190, 202, 49, 46, 63, 29, 204, 91, 62, 247, 76, 0, 190, 24, 48, 59, 63, 185, 163, 254, 190, 243, 184, 80, 190, 113, 161, 54, 63, 35, 176, 212, 62, 160, 251, 72, 191, 225, 245, 65, 190, 208, 36, 14, 191, 138, 99, 2, 63, 61, 170, 4, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 57, 35, 191, 210, 99, 205, 62, 35, 24, 19, 62, 114, 244, 77, 62, 121, 50, 113, 190, 13, 178, 160, 189, 99, 116, 15, 63, 187, 248, 64, 61, 4, 136, 206, 61, 123, 177, 12, 190, 19, 8, 8, 63, 69, 127, 160, 190, 194, 77, 15, 62, 108, 34, 223, 62, 112, 129, 28, 62, 141, 179, 44, 191, 49, 239, 9, 63, 23, 73, 1, 63, 93, 142, 161, 189, 81, 20, 8, 63, 162, 91, 226, 61, 132, 221, 196, 58, 169, 91, 170, 62, 246, 6, 5, 191, 107, 18, 3, 191, 18, 212, 231, 62, 114, 4, 55, 190, 100, 69, 171, 62, 241, 221, 160, 189, 77, 164, 127, 190, 231, 53, 137, 189, 197, 48, 172, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 80, 139, 190, 246, 121, 240, 61, 27, 225, 179, 190, 187, 246, 114, 191, 49, 141, 1, 62, 223, 80, 140, 61, 18, 243, 62, 62, 151, 248, 143, 62, 20, 26, 110, 62, 100, 111, 63, 62, 232, 110, 130, 62, 26, 255, 223, 61, 113, 178, 144, 191, 114, 254, 206, 187, 224, 193, 191, 60, 83, 156, 28, 190, 172, 191, 78, 191, 99, 152, 1, 62, 84, 230, 137, 60, 139, 251, 97, 189, 27, 205, 60, 191, 33, 201, 187, 58, 67, 63, 35, 190, 65, 104, 166, 60, 111, 49, 69, 63, 229, 136, 72, 60, 150, 43, 152, 191, 49, 229, 235, 189, 213, 22, 104, 190, 174, 160, 132, 191, 22, 166, 137, 190, 248, 38, 86, 62, 181, 53, 156, 61, 98, 27, 69, 190, 32, 204, 158, 188, 177, 221, 40, 190, 229, 9, 4, 189, 68, 131, 241, 61, 223, 74, 235, 61, 250, 143, 4, 190, 171, 86, 48, 61, 245, 79, 31, 61, 188, 133, 178, 61, 128, 98, 185, 189, 207, 5, 228, 188, 243, 15, 189, 189, 251, 173, 54, 190, 212, 63, 47, 61, 21, 36, 108, 61, 136, 154, 17, 190, 155, 105, 22, 62, 236, 250, 65, 190, 217, 129, 232, 189, 8, 165, 26, 60, 11, 102, 80, 190, 239, 55, 141, 189, 105, 33, 65, 61, 0, 123, 39, 190, 37, 28, 52, 190, 125, 197, 204, 189, 82, 130, 216, 188, 234, 228, 9, 190, 2, 41, 81, 190, 52, 94, 122, 189, 98, 182, 184, 189, 49, 30, 43, 190, 255, 34, 96, 61, 117, 134, 207, 61, 208, 59, 12, 187, 26, 119, 202, 61, 159, 10, 37, 190, 183, 226, 175, 61, 81, 13, 21, 190, 114, 211, 43, 190, 31, 82, 207, 61, 167, 241, 179, 61, 156, 0, 153, 189, 177, 39, 28, 190, 112, 226, 158, 189, 124, 224, 70, 60, 105, 100, 53, 60, 119, 200, 217, 61, 235, 129, 9, 61, 207, 35, 38, 189, 115, 131, 135, 189, 185, 205, 47, 190, 140, 178, 5, 190, 115, 18, 242, 61, 47, 26, 43, 189, 102, 191, 159, 61, 187, 195, 186, 184, 216, 26, 169, 189, 4, 2, 142, 189, 167, 169, 167, 189, 36, 235, 201, 61, 115, 9, 84, 189, 157, 203, 49, 62, 15, 53, 131, 189, 118, 8, 132, 189, 218, 74, 204, 61, 224, 39, 9, 62, 198, 144, 205, 61, 247, 122, 51, 190, 68, 60, 192, 61, 142, 28, 137, 189, 166, 148, 23, 62, 126, 68, 135, 189, 126, 255, 149, 189, 88, 224, 36, 61, 214, 162, 198, 61, 127, 77, 88, 189, 105, 222, 4, 190, 2, 96, 158, 189, 13, 10, 219, 189, 139, 159, 46, 62, 237, 33, 41, 190, 169, 140, 9, 61, 6, 128, 122, 189, 245, 181, 48, 190, 193, 187, 46, 190, 61, 236, 62, 188, 102, 118, 38, 60, 107, 202, 72, 189, 212, 175, 84, 189, 95, 14, 89, 61, 58, 163, 11, 61, 84, 235, 14, 190, 223, 41, 145, 61, 70, 253, 144, 61, 17, 30, 136, 62, 105, 190, 39, 62, 98, 46, 37, 62, 205, 54, 115, 187, 204, 29, 23, 189, 45, 219, 36, 189, 5, 160, 123, 61, 211, 232, 110, 62, 215, 149, 51, 190, 46, 137, 52, 62, 248, 44, 92, 189, 25, 137, 120, 62, 183, 246, 76, 62, 247, 49, 135, 62, 71, 221, 222, 61, 52, 85, 92, 62, 206, 56, 153, 61, 76, 235, 237, 60, 102, 51, 71, 62, 140, 80, 185, 59, 119, 5, 43, 62, 117, 168, 66, 62, 37, 234, 160, 61, 36, 184, 174, 190, 99, 152, 52, 62, 167, 113, 157, 62, 55, 210, 90, 190, 168, 47, 72, 190, 112, 21, 163, 61, 98, 139, 197, 61, 189, 29, 254, 61, 254, 43, 11, 61, 232, 180, 55, 190, 124, 65, 140, 189, 150, 189, 81, 61, 77, 111, 4, 62, 19, 38, 15, 62, 31, 47, 2, 62, 136, 151, 51, 190, 252, 178, 30, 189, 235, 117, 30, 61, 229, 218, 31, 190, 60, 27, 40, 62, 6, 209, 32, 60, 141, 37, 139, 189, 157, 195, 21, 62, 189, 215, 149, 189, 121, 254, 192, 189, 42, 143, 92, 188, 138, 160, 48, 190, 45, 56, 147, 61, 92, 76, 4, 61, 140, 76, 31, 190, 178, 115, 209, 61, 86, 200, 192, 189, 25, 179, 11, 61, 150, 152, 251, 189, 114, 87, 171, 189, 20, 66, 8, 190, 76, 177, 202, 61, 71, 58, 130, 189, 211, 244, 78, 61, 69, 141, 208, 60, 93, 181, 8, 62, 233, 29, 73, 190, 48, 40, 2, 62, 167, 97, 183, 61, 64, 142, 2, 61, 126, 214, 131, 62, 35, 57, 127, 62, 146, 18, 72, 188, 10, 108, 37, 62, 93, 27, 197, 61, 169, 15, 251, 61, 250, 183, 61, 189, 98, 122, 73, 61, 125, 124, 127, 60, 82, 119, 68, 62, 217, 158, 145, 60, 227, 216, 37, 62, 180, 216, 18, 188, 249, 253, 85, 62, 187, 165, 46, 190, 51, 217, 139, 61, 87, 83, 145, 60, 248, 159, 87, 60, 39, 40, 6, 190, 147, 58, 214, 190, 122, 130, 147, 190, 237, 71, 10, 190, 219, 87, 137, 62, 88, 139, 144, 189, 32, 52, 139, 190, 10, 86, 167, 62, 42, 26, 87, 190, 218, 1, 78, 61, 116, 114, 216, 61, 169, 77, 214, 61, 230, 5, 17, 189, 159, 59, 143, 62, 231, 155, 191, 61, 156, 54, 251, 60, 55, 118, 22, 190, 54, 210, 117, 61, 192, 143, 91, 62, 98, 201, 33, 62, 125, 213, 79, 189, 176, 156, 28, 190, 2, 42, 67, 190, 160, 160, 55, 190, 168, 248, 16, 190, 160, 4, 7, 190, 238, 4, 163, 190, 151, 105, 239, 61, 236, 252, 125, 190, 193, 60, 103, 61, 140, 181, 225, 62, 1, 135, 145, 61, 172, 65, 131, 188, 88, 18, 3, 191, 240, 226, 118, 189, 252, 93, 85, 61, 167, 100, 71, 61, 93, 113, 68, 60, 93, 229, 189, 190, 83, 21, 87, 59, 109, 86, 86, 62, 253, 255, 119, 190, 225, 24, 136, 61, 146, 96, 175, 190, 195, 89, 103, 191, 154, 170, 154, 62, 119, 25, 62, 62, 59, 188, 255, 61, 105, 58, 102, 62, 156, 12, 131, 59, 119, 145, 29, 61, 208, 143, 62, 61, 39, 100, 118, 62, 220, 20, 104, 191, 137, 252, 70, 61, 6, 212, 57, 190, 180, 129, 204, 61, 229, 111, 54, 191, 114, 1, 251, 189, 237, 187, 153, 188, 249, 207, 196, 61, 110, 211, 84, 191, 169, 58, 197, 187, 180, 140, 160, 190, 98, 102, 235, 61, 61, 140, 222, 190, 23, 101, 118, 61, 208, 211, 141, 191, 90, 194, 30, 190, 12, 110, 54, 61, 228, 45, 161, 191, 145, 175, 44, 190, 145, 69, 55, 62, 112, 118, 158, 61, 35, 118, 123, 61, 68, 110, 21, 62, 140, 205, 160, 60, 190, 138, 50, 61, 134, 216, 50, 61, 1, 201, 253, 189, 132, 21, 172, 61, 51, 225, 251, 61, 179, 4, 41, 190, 19, 46, 8, 190, 226, 75, 252, 60, 57, 188, 147, 60, 233, 45, 212, 61, 227, 227, 7, 60, 220, 36, 202, 61, 164, 242, 250, 60, 5, 41, 163, 61, 136, 83, 153, 61, 140, 106, 144, 188, 182, 128, 62, 188, 10, 65, 192, 61, 122, 120, 43, 190, 179, 122, 157, 189, 22, 208, 251, 189, 117, 35, 216, 59, 147, 75, 32, 190, 148, 217, 23, 190, 140, 224, 2, 190, 101, 187, 189, 61, 196, 60, 173, 187, 205, 127, 231, 189, 137, 225, 153, 187, 240, 231, 246, 189, 179, 234, 37, 62, 8, 66, 254, 61, 88, 152, 209, 189, 46, 13, 6, 62, 44, 176, 39, 190, 176, 109, 163, 189, 79, 134, 137, 189, 91, 58, 173, 189, 203, 143, 223, 189, 177, 157, 223, 189, 180, 60, 32, 62, 109, 222, 0, 190, 163, 161, 233, 59, 87, 97, 48, 62, 183, 43, 147, 60, 220, 249, 220, 60, 239, 199, 179, 61, 170, 223, 196, 188, 97, 185, 79, 61, 112, 23, 30, 188, 163, 152, 63, 188, 103, 127, 189, 186, 179, 10, 27, 61, 108, 30, 205, 61, 70, 132, 112, 189, 240, 84, 19, 61, 12, 155, 85, 190, 87, 70, 9, 190, 114, 43, 244, 188, 213, 85, 19, 62, 135, 128, 235, 189, 62, 245, 131, 62, 92, 182, 9, 61, 228, 252, 244, 61, 72, 224, 172, 189, 151, 233, 149, 61, 254, 81, 14, 190, 80, 115, 0, 191, 192, 186, 64, 62, 194, 251, 254, 189, 38, 92, 190, 189, 229, 37, 161, 188, 81, 194, 163, 189, 64, 58, 146, 190, 35, 12, 93, 62, 105, 249, 132, 190, 109, 17, 134, 62, 81, 24, 211, 189, 65, 66, 161, 189, 29, 139, 8, 62, 214, 168, 214, 61, 71, 24, 74, 62, 52, 181, 118, 60, 44, 160, 96, 189, 199, 130, 233, 187, 130, 154, 213, 61, 93, 110, 38, 62, 84, 53, 252, 189, 186, 245, 226, 60, 215, 218, 173, 189, 203, 18, 146, 189, 120, 31, 209, 60, 96, 141, 135, 62, 213, 252, 12, 62, 139, 173, 44, 189, 5, 99, 113, 62, 152, 173, 218, 190, 112, 2, 248, 190, 40, 153, 194, 190, 139, 41, 54, 62, 61, 111, 3, 62, 169, 188, 45, 191, 142, 57, 77, 191, 210, 111, 150, 190, 175, 206, 212, 61, 227, 40, 14, 62, 202, 51, 129, 59, 159, 22, 115, 61, 184, 206, 191, 189, 60, 196, 71, 62, 63, 254, 159, 191, 217, 29, 34, 62, 112, 61, 221, 61, 110, 250, 176, 190, 188, 70, 57, 189, 21, 103, 99, 190, 94, 67, 137, 62, 229, 25, 131, 62, 210, 92, 162, 62, 184, 19, 48, 190, 83, 100, 137, 190, 235, 84, 76, 61, 146, 23, 61, 189, 100, 126, 162, 62, 67, 196, 40, 190, 173, 159, 172, 61, 240, 47, 106, 61, 190, 243, 78, 189, 11, 197, 151, 188, 198, 197, 191, 61, 245, 9, 17, 190, 215, 123, 121, 189, 27, 103, 38, 190, 135, 73, 141, 60, 83, 251, 50, 189, 143, 73, 233, 189, 250, 98, 221, 61, 149, 184, 196, 189, 169, 45, 164, 189, 241, 136, 98, 61, 59, 53, 56, 188, 30, 230, 24, 190, 37, 218, 99, 61, 9, 190, 1, 62, 246, 161, 153, 61, 121, 82, 30, 190, 187, 155, 128, 189, 106, 141, 249, 189, 207, 29, 177, 58, 152, 87, 131, 61, 175, 48, 235, 189, 41, 218, 11, 60, 10, 86, 200, 61, 126, 187, 239, 61, 112, 182, 222, 188, 34, 227, 55, 190, 195, 203, 26, 61, 135, 10, 45, 62, 112, 60, 172, 190, 38, 13, 52, 191, 100, 93, 80, 61, 124, 211, 125, 62, 129, 189, 41, 61, 59, 15, 88, 189, 33, 3, 139, 62, 83, 165, 25, 62, 229, 208, 30, 62, 206, 199, 70, 61, 57, 82, 56, 191, 129, 255, 90, 61, 141, 232, 15, 190, 86, 149, 0, 190, 131, 52, 173, 190, 191, 9, 233, 189, 192, 251, 214, 61, 95, 95, 137, 62, 3, 8, 56, 191, 132, 116, 135, 62, 85, 109, 109, 190, 211, 250, 28, 62, 249, 240, 29, 63, 84, 184, 4, 190, 160, 182, 133, 191, 113, 35, 94, 62, 41, 117, 46, 61, 132, 224, 131, 191, 215, 199, 217, 189, 209, 229, 149, 62, 152, 19, 84, 61, 110, 168, 1, 62, 121, 255, 201, 188, 66, 96, 190, 62, 151, 241, 58, 189, 109, 134, 20, 189, 142, 2, 182, 61, 203, 166, 4, 62, 176, 178, 121, 61, 80, 17, 34, 190, 191, 1, 203, 61, 34, 161, 143, 190, 189, 237, 113, 61, 76, 41, 89, 61, 231, 7, 225, 61, 65, 37, 138, 62, 231, 86, 147, 62, 144, 201, 80, 62, 110, 176, 165, 189, 18, 162, 245, 61, 113, 34, 87, 62, 180, 138, 151, 189, 251, 127, 127, 62, 145, 67, 3, 190, 234, 214, 227, 190, 105, 97, 92, 62, 242, 93, 15, 62, 21, 39, 117, 190, 220, 131, 28, 190, 244, 253, 92, 62, 33, 161, 16, 62, 222, 68, 32, 62, 208, 131, 67, 61, 219, 195, 161, 59, 131, 152, 71, 187, 99, 73, 91, 62, 134, 174, 224, 188, 122, 127, 206, 189, 189, 251, 86, 62, 237, 11, 5, 61, 27, 149, 92, 61, 211, 160, 13, 189, 70, 164, 45, 62, 75, 101, 187, 190, 228, 210, 192, 62, 124, 147, 159, 61, 108, 95, 62, 62, 78, 206, 20, 62, 222, 139, 66, 62, 98, 211, 144, 61, 78, 83, 35, 188, 164, 49, 87, 62, 64, 47, 248, 187, 51, 115, 13, 190, 177, 131, 25, 62, 185, 213, 106, 189, 218, 152, 148, 190, 177, 15, 12, 62, 129, 38, 77, 62, 93, 79, 138, 190, 218, 83, 157, 190, 5, 137, 128, 60, 209, 10, 149, 61, 0, 236, 130, 60, 97, 15, 136, 62, 42, 60, 207, 190, 173, 143, 180, 188, 28, 176, 148, 189, 255, 38, 10, 190, 135, 39, 58, 61, 86, 94, 196, 61, 102, 239, 12, 190, 198, 176, 10, 190, 68, 64, 204, 61, 125, 3, 236, 189, 30, 190, 75, 189, 203, 103, 180, 59, 67, 156, 9, 189, 17, 44, 94, 62, 74, 166, 21, 62, 170, 88, 5, 191, 231, 157, 18, 190, 62, 181, 63, 59, 152, 166, 58, 189, 166, 199, 43, 190, 163, 249, 184, 190, 42, 77, 14, 189, 96, 173, 145, 61, 248, 26, 39, 63, 144, 65, 235, 190, 255, 48, 9, 187, 202, 15, 244, 190, 99, 132, 32, 62, 248, 35, 201, 189, 188, 45, 47, 62, 93, 23, 145, 190, 238, 44, 136, 61, 40, 24, 52, 190, 29, 83, 24, 62, 27, 180, 7, 190, 119, 41, 155, 61, 187, 134, 10, 61, 186, 64, 249, 189, 12, 179, 72, 61, 13, 206, 62, 60, 40, 208, 24, 190, 141, 104, 72, 60, 49, 159, 28, 190, 130, 2, 29, 61, 157, 31, 152, 61, 73, 65, 84, 61, 220, 228, 182, 189, 201, 95, 34, 62, 61, 45, 39, 61, 187, 253, 67, 189, 134, 143, 234, 60, 189, 110, 221, 188, 156, 198, 139, 60, 58, 36, 115, 60, 167, 73, 7, 62, 19, 62, 44, 62, 207, 44, 44, 190, 243, 12, 42, 190, 66, 31, 18, 190, 141, 94, 158, 61, 180, 155, 35, 59, 11, 125, 9, 190, 29, 145, 227, 60, 215, 49, 29, 190, 236, 84, 55, 188, 56, 94, 159, 189, 8, 57, 44, 190, 111, 176, 134, 61, 255, 247, 249, 189, 71, 145, 160, 189, 208, 217, 34, 62, 171, 139, 235, 61, 162, 37, 254, 61, 220, 167, 14, 62, 58, 172, 251, 189, 204, 163, 195, 61, 97, 195, 203, 60, 134, 146, 30, 190, 63, 92, 9, 189, 47, 245, 148, 61, 70, 1, 34, 190, 60, 232, 186, 189, 253, 12, 148, 188, 117, 120, 150, 189, 73, 225, 243, 61, 243, 15, 144, 189, 50, 115, 17, 190, 228, 135, 9, 190, 142, 208, 230, 189, 224, 50, 250, 189, 76, 153, 47, 62, 220, 205, 71, 189, 7, 111, 34, 61, 164, 188, 60, 61, 241, 108, 200, 187, 83, 221, 37, 60, 35, 9, 25, 189, 76, 41, 51, 60, 101, 209, 171, 61, 84, 162, 93, 62, 110, 124, 169, 190, 16, 244, 163, 189, 240, 67, 31, 62, 218, 33, 226, 189, 89, 182, 100, 61, 23, 49, 231, 61, 160, 214, 227, 190, 65, 250, 17, 62, 237, 195, 175, 61, 100, 21, 149, 62, 37, 154, 41, 62, 2, 67, 8, 62, 53, 190, 68, 62, 122, 190, 175, 189, 250, 108, 2, 62, 243, 81, 25, 62, 36, 164, 35, 189, 240, 20, 68, 62, 184, 249, 32, 189, 168, 15, 55, 190, 30, 26, 53, 62, 216, 19, 90, 62, 184, 218, 131, 189, 219, 94, 186, 190, 134, 0, 248, 61, 69, 171, 144, 62, 73, 46, 37, 189, 96, 35, 87, 190, 22, 204, 99, 62, 72, 15, 208, 189, 8, 175, 96, 190, 208, 153, 91, 62, 128, 31, 117, 62, 116, 57, 76, 60, 5, 121, 171, 190, 138, 7, 193, 62, 118, 94, 70, 61, 161, 38, 60, 62, 208, 47, 139, 62, 144, 229, 35, 190, 49, 226, 1, 190, 233, 205, 225, 189, 141, 128, 190, 189, 95, 86, 158, 61, 205, 48, 184, 187, 192, 155, 5, 62, 234, 219, 119, 189, 149, 175, 177, 61, 126, 47, 50, 62, 19, 240, 35, 189, 35, 7, 127, 62, 150, 190, 237, 190, 194, 179, 158, 61, 103, 42, 46, 190, 192, 167, 69, 62, 190, 60, 188, 60, 101, 66, 125, 190, 14, 35, 131, 190, 40, 114, 24, 62, 238, 221, 230, 189, 89, 208, 57, 62, 132, 146, 211, 189, 179, 81, 192, 190, 1, 168, 89, 62, 71, 31, 153, 62, 84, 109, 138, 61, 49, 76, 148, 190, 33, 30, 204, 62, 167, 130, 158, 189, 209, 128, 153, 61, 69, 17, 130, 62, 45, 255, 155, 190, 93, 39, 59, 189, 234, 162, 68, 190, 166, 39, 131, 189, 43, 110, 249, 61, 123, 103, 131, 189, 95, 180, 73, 62, 19, 223, 40, 59, 35, 229, 145, 189, 130, 107, 70, 62, 170, 151, 100, 187, 83, 147, 128, 62, 41, 228, 197, 62, 194, 66, 5, 61, 175, 217, 178, 190, 94, 101, 89, 62, 57, 230, 249, 62, 71, 44, 40, 190, 118, 64, 117, 188, 38, 192, 48, 62, 232, 195, 52, 61, 157, 89, 179, 190, 67, 254, 28, 188, 28, 148, 79, 61, 208, 234, 177, 190, 197, 139, 113, 61, 209, 151, 221, 61, 242, 139, 154, 61, 130, 142, 9, 62, 44, 87, 235, 59, 51, 164, 51, 62, 97, 234, 209, 189, 150, 126, 6, 62, 239, 7, 179, 61, 21, 192, 164, 62, 144, 194, 224, 189, 232, 246, 217, 61, 245, 237, 249, 188, 5, 123, 144, 190, 12, 228, 210, 190, 25, 63, 234, 61, 236, 5, 1, 191, 205, 12, 190, 189, 157, 111, 6, 189, 121, 27, 176, 62, 148, 64, 213, 190, 57, 162, 223, 61, 88, 121, 46, 189, 225, 134, 16, 62, 157, 254, 4, 61, 164, 48, 102, 62, 32, 16, 85, 190, 172, 201, 3, 191, 223, 245, 14, 62, 16, 93, 154, 190, 227, 8, 80, 191, 69, 122, 156, 61, 120, 20, 159, 62, 146, 145, 159, 62, 167, 208, 114, 189, 85, 246, 27, 63, 213, 217, 184, 61, 237, 17, 16, 62, 208, 13, 13, 62, 223, 121, 52, 191, 212, 234, 78, 62, 135, 249, 93, 190, 162, 239, 183, 190, 238, 37, 241, 189, 2, 175, 27, 190, 72, 248, 16, 62, 233, 53, 219, 188, 62, 24, 221, 190, 126, 196, 52, 62, 239, 22, 141, 187, 98, 226, 149, 62, 28, 100, 14, 63, 59, 38, 66, 62, 177, 135, 171, 191, 58, 251, 234, 62, 128, 29, 2, 63, 106, 35, 121, 191, 82, 6, 134, 190, 200, 224, 150, 61, 66, 144, 10, 190, 74, 15, 137, 189, 170, 232, 15, 62, 80, 19, 35, 62, 232, 38, 43, 61, 54, 149, 54, 189, 246, 215, 143, 188, 183, 240, 140, 190, 69, 134, 16, 62, 63, 131, 39, 189, 98, 35, 183, 188, 41, 127, 84, 190, 123, 192, 134, 61, 89, 53, 22, 190, 45, 174, 128, 61, 82, 171, 26, 62, 127, 114, 242, 60, 202, 76, 79, 189, 16, 188, 91, 189, 188, 190, 148, 189, 70, 37, 3, 62, 69, 220, 70, 62, 59, 125, 215, 61, 127, 188, 244, 189, 201, 243, 8, 190, 117, 148, 51, 62, 165, 14, 31, 62, 130, 31, 158, 61, 89, 134, 46, 190, 120, 103, 177, 189, 33, 163, 15, 189, 247, 201, 30, 62, 219, 29, 63, 62, 42, 183, 20, 191, 230, 247, 203, 189, 200, 61, 79, 61, 120, 107, 133, 61, 17, 2, 202, 190, 88, 6, 251, 60, 237, 90, 158, 185, 92, 244, 127, 62, 106, 128, 131, 189, 152, 73, 158, 61, 184, 106, 154, 190, 133, 156, 228, 61, 128, 186, 31, 62, 158, 82, 171, 62, 80, 12, 40, 62, 206, 138, 33, 62, 113, 28, 82, 62, 49, 130, 32, 62, 12, 129, 20, 190, 88, 169, 51, 190, 236, 40, 242, 190, 202, 158, 128, 60, 228, 145, 152, 58, 231, 58, 4, 190, 119, 44, 0, 190, 70, 73, 157, 190, 58, 169, 38, 189, 6, 24, 161, 190, 247, 29, 9, 191, 9, 75, 121, 62, 203, 216, 7, 191, 23, 240, 90, 61, 243, 249, 51, 190, 150, 33, 102, 190, 1, 91, 145, 189, 92, 53, 29, 190, 46, 61, 33, 190, 221, 193, 213, 189, 66, 179, 166, 187, 134, 109, 133, 190, 135, 152, 24, 189, 67, 57, 68, 61, 209, 240, 137, 188, 135, 224, 151, 62, 179, 195, 110, 62, 70, 86, 102, 60, 52, 223, 210, 61, 133, 58, 187, 61, 191, 85, 46, 62, 63, 204, 16, 61, 217, 124, 149, 61, 129, 84, 112, 62, 254, 25, 40, 190, 176, 45, 76, 189, 113, 142, 69, 190, 71, 47, 141, 62, 241, 152, 178, 189, 83, 86, 172, 62, 48, 135, 6, 62, 86, 181, 254, 189, 38, 67, 29, 62, 221, 31, 172, 189, 208, 184, 39, 189, 182, 213, 91, 189, 195, 70, 2, 190, 181, 124, 88, 61, 238, 43, 50, 190, 231, 109, 216, 189, 16, 31, 237, 61, 78, 87, 57, 188, 161, 33, 175, 61, 28, 49, 234, 60, 52, 247, 44, 187, 199, 152, 39, 190, 59, 99, 10, 190, 106, 99, 16, 190, 177, 125, 40, 60, 58, 60, 63, 189, 126, 227, 30, 190, 143, 139, 48, 189, 5, 203, 149, 60, 156, 138, 169, 61, 235, 217, 238, 61, 161, 148, 48, 61, 246, 87, 2, 62, 86, 59, 52, 188, 21, 137, 191, 60, 55, 21, 39, 62, 172, 53, 44, 190, 148, 146, 43, 62, 67, 140, 141, 188, 50, 190, 12, 190, 70, 244, 187, 61, 153, 54, 203, 189, 40, 236, 6, 61, 250, 192, 34, 62, 65, 0, 130, 190, 0, 94, 14, 190, 62, 81, 208, 189, 183, 214, 239, 61, 201, 130, 169, 190, 100, 245, 223, 188, 200, 216, 185, 189, 214, 47, 252, 60, 122, 232, 152, 61, 153, 77, 122, 61, 184, 216, 6, 61, 240, 240, 250, 60, 73, 219, 30, 62, 125, 202, 97, 62, 128, 246, 127, 62, 15, 216, 51, 62, 94, 12, 164, 61, 102, 65, 113, 189, 5, 171, 10, 190, 178, 23, 206, 60, 175, 169, 212, 189, 175, 183, 68, 62, 84, 34, 128, 190, 44, 147, 155, 62, 144, 33, 161, 190, 249, 117, 96, 189, 38, 122, 44, 189, 6, 93, 105, 190, 111, 170, 126, 61, 220, 98, 128, 62, 173, 227, 194, 190, 121, 229, 235, 190, 245, 158, 39, 62, 216, 182, 145, 189, 235, 41, 178, 190, 45, 50, 7, 62, 133, 30, 145, 62, 109, 151, 95, 62, 79, 29, 122, 190, 137, 207, 1, 63, 238, 101, 190, 61, 148, 33, 7, 62, 61, 187, 161, 62, 13, 171, 201, 190, 93, 35, 175, 190, 41, 6, 209, 189, 10, 238, 189, 190, 221, 54, 212, 61, 19, 91, 25, 62, 167, 96, 32, 62, 197, 204, 21, 62, 200, 34, 38, 190, 7, 82, 118, 62, 107, 249, 9, 190, 161, 220, 206, 62, 48, 241, 104, 190, 157, 40, 3, 61, 165, 220, 92, 190, 80, 235, 74, 62, 166, 242, 160, 62, 37, 134, 191, 189, 204, 131, 91, 190, 174, 96, 134, 61, 225, 213, 21, 62, 97, 159, 187, 61, 172, 79, 123, 62, 61, 233, 196, 62, 212, 235, 182, 189, 173, 95, 254, 190, 30, 46, 139, 61, 220, 169, 177, 61, 83, 44, 226, 189, 133, 37, 229, 61, 109, 198, 9, 62, 73, 71, 183, 190, 38, 237, 182, 62, 93, 106, 76, 62, 96, 35, 81, 61, 35, 243, 163, 62, 173, 125, 58, 62, 124, 24, 223, 61, 80, 204, 10, 189, 137, 255, 132, 62, 36, 95, 198, 57, 191, 124, 90, 60, 218, 221, 115, 189, 78, 109, 152, 190, 126, 132, 203, 190, 74, 201, 52, 60, 41, 48, 201, 61, 104, 82, 35, 190, 170, 217, 193, 190, 196, 103, 118, 62, 169, 196, 31, 62, 3, 203, 155, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 88, 26, 62, 27, 65, 18, 189, 40, 181, 10, 190, 114, 110, 24, 61, 117, 252, 143, 60, 102, 201, 24, 190, 248, 237, 184, 189, 93, 97, 196, 188, 148, 5, 62, 62, 123, 195, 50, 190, 61, 5, 74, 190, 114, 202, 155, 62, 95, 191, 125, 62, 224, 17, 46, 190, 155, 184, 234, 60, 170, 121, 59, 62, 28, 156, 196, 61, 175, 11, 32, 190, 137, 66, 206, 189, 39, 120, 46, 190, 21, 207, 221, 60, 209, 18, 203, 61, 148, 179, 30, 188, 50, 39, 167, 190, 117, 46, 191, 62, 126, 102, 75, 62, 86, 144, 15, 190, 28, 11, 78, 190, 179, 52, 1, 190, 54, 200, 31, 190, 199, 124, 2, 189, 215, 237, 40, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 54, 64, 191, 159, 55, 36, 188, 52, 244, 232, 189, 76, 227, 169, 189, 104, 0, 23, 62, 140, 200, 14, 62, 168, 71, 41, 62, 202, 67, 121, 62, 97, 139, 105, 191, 193, 118, 34, 190, 145, 93, 41, 188, 171, 93, 10, 190, 152, 105, 98, 63, 36, 127, 15, 62, 32, 175, 31, 191, 26, 104, 8, 62, 150, 116, 84, 62, 126, 177, 220, 190, 188, 122, 131, 60, 65, 26, 38, 62, 148, 176, 149, 62, 29, 227, 161, 190, 120, 102, 206, 190, 14, 150, 145, 62, 79, 25, 37, 191, 223, 20, 16, 189, 99, 63, 207, 62, 184, 128, 58, 190, 125, 253, 118, 187, 243, 117, 104, 62, 128, 57, 202, 190, 206, 146, 163, 62, 24, 169, 173, 61, 145, 239, 131, 61, 98, 129, 142, 188, 251, 53, 159, 60, 224, 8, 113, 190, 204, 240, 27, 62, 230, 165, 50, 190, 69, 170, 30, 62, 26, 18, 165, 189, 165, 141, 166, 189, 114, 199, 96, 188, 15, 144, 180, 190, 125, 246, 175, 61, 100, 143, 226, 189, 230, 137, 41, 188, 34, 179, 238, 189, 87, 211, 78, 190, 43, 89, 1, 63, 100, 151, 223, 189, 116, 68, 41, 60, 128, 30, 207, 187, 231, 63, 215, 189, 255, 64, 34, 62, 105, 161, 221, 61, 241, 92, 58, 189, 62, 212, 224, 189, 205, 177, 152, 61, 23, 62, 112, 62, 7, 103, 156, 61, 99, 111, 83, 62, 175, 8, 60, 62, 206, 55, 194, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {96, 97, 177, 189, 22, 185, 80, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {41, 115, 250, 191, 148, 99, 57, 63, 56, 147, 59, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {112, 234, 27, 192, 201, 124, 49, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0019/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}