// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {91, 20, 211, 62, 175, 234, 135, 191, 117, 142, 175, 190, 165, 52, 18, 190, 70, 61, 62, 63, 141, 82, 173, 61, 137, 184, 169, 61, 154, 237, 251, 62, 182, 251, 162, 190, 68, 36, 154, 62, 146, 40, 240, 190, 100, 132, 239, 62, 198, 158, 19, 191, 60, 59, 224, 188, 187, 4, 216, 190, 229, 253, 61, 63, 216, 145, 130, 63, 56, 50, 141, 62, 160, 23, 145, 189, 55, 74, 181, 62, 102, 154, 19, 191, 127, 221, 145, 191, 112, 233, 160, 190, 178, 155, 186, 189, 122, 111, 92, 63, 129, 233, 160, 62, 117, 165, 220, 189, 89, 230, 149, 190, 222, 86, 165, 191, 219, 120, 147, 190, 218, 251, 94, 62, 174, 119, 141, 191, 121, 1, 11, 191, 158, 187, 60, 62, 102, 145, 134, 62, 21, 90, 218, 62, 163, 13, 221, 61, 41, 221, 26, 190, 130, 213, 230, 62, 41, 238, 6, 191, 83, 172, 71, 191, 175, 127, 51, 190, 194, 219, 46, 63, 201, 200, 117, 191, 110, 0, 37, 190, 35, 88, 75, 191, 39, 231, 66, 191, 73, 98, 195, 190, 71, 66, 21, 63, 209, 25, 224, 61, 214, 249, 228, 62, 196, 170, 238, 189, 41, 46, 71, 191, 116, 190, 133, 62, 122, 223, 13, 191, 168, 4, 247, 191, 31, 45, 203, 190, 253, 37, 79, 191, 162, 115, 207, 189, 121, 249, 51, 190, 123, 116, 17, 62, 31, 249, 92, 63, 154, 51, 27, 63, 141, 75, 122, 189, 47, 91, 90, 63, 106, 165, 53, 187, 121, 23, 162, 62, 96, 109, 169, 61, 175, 252, 18, 191, 54, 182, 36, 63, 2, 88, 124, 63, 236, 6, 240, 62, 180, 153, 21, 63, 187, 247, 90, 191, 92, 90, 92, 190, 246, 89, 13, 190, 0, 70, 105, 63, 213, 45, 83, 190, 50, 74, 51, 190, 172, 1, 192, 62, 114, 80, 56, 63, 22, 254, 137, 62, 38, 34, 49, 191, 61, 253, 40, 63, 242, 117, 168, 62, 113, 32, 32, 190, 117, 25, 47, 63, 230, 137, 74, 61, 241, 64, 147, 63, 137, 229, 19, 63, 119, 236, 246, 62, 51, 47, 98, 191, 153, 204, 28, 190, 53, 161, 112, 191, 72, 197, 58, 63, 12, 215, 167, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 117, 43, 191, 84, 219, 2, 63, 231, 196, 203, 61, 24, 218, 176, 61, 65, 255, 156, 190, 236, 31, 166, 190, 84, 7, 236, 62, 103, 55, 164, 61, 38, 133, 75, 62, 237, 94, 157, 190, 66, 226, 195, 62, 188, 228, 3, 191, 241, 255, 17, 189, 57, 185, 211, 62, 130, 197, 181, 61, 252, 134, 92, 190, 205, 69, 114, 62, 212, 253, 211, 62, 104, 104, 123, 190, 208, 188, 27, 63, 253, 145, 207, 60, 34, 125, 175, 189, 186, 103, 225, 62, 160, 156, 30, 191, 139, 169, 9, 191, 230, 133, 148, 62, 125, 63, 202, 190, 241, 53, 101, 62, 237, 147, 22, 190, 238, 128, 165, 190, 179, 160, 108, 189, 180, 7, 175, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 116, 129, 190, 119, 193, 145, 62, 194, 13, 161, 190, 44, 187, 154, 191, 29, 252, 255, 61, 230, 16, 115, 191, 103, 133, 55, 62, 47, 133, 169, 62, 51, 107, 135, 61, 107, 69, 66, 62, 175, 239, 64, 62, 101, 104, 227, 61, 241, 212, 52, 191, 114, 84, 177, 189, 141, 13, 78, 189, 171, 113, 174, 190, 117, 124, 138, 191, 221, 14, 157, 190, 150, 165, 2, 60, 44, 107, 162, 60, 176, 169, 224, 190, 253, 89, 147, 62, 146, 116, 38, 190, 12, 198, 83, 61, 142, 89, 129, 63, 121, 131, 27, 61, 103, 53, 132, 191, 225, 8, 37, 191, 144, 27, 104, 190, 142, 109, 16, 191, 213, 233, 166, 190, 199, 238, 231, 62, 181, 191, 131, 61, 197, 129, 69, 190, 142, 43, 235, 188, 177, 221, 40, 190, 174, 126, 54, 189, 68, 131, 241, 61, 123, 113, 212, 61, 172, 106, 13, 190, 171, 86, 48, 61, 42, 114, 209, 60, 32, 145, 151, 61, 128, 98, 185, 189, 207, 5, 228, 188, 222, 33, 203, 189, 57, 175, 64, 190, 106, 241, 25, 61, 21, 36, 108, 61, 136, 154, 17, 190, 22, 113, 7, 62, 163, 87, 72, 190, 217, 129, 232, 189, 8, 165, 26, 60, 193, 16, 93, 190, 239, 55, 141, 189, 251, 63, 60, 61, 106, 61, 40, 190, 37, 28, 52, 190, 125, 197, 204, 189, 82, 130, 216, 188, 234, 228, 9, 190, 139, 219, 86, 190, 52, 94, 122, 189, 98, 182, 184, 189, 49, 30, 43, 190, 255, 34, 96, 61, 117, 134, 207, 61, 208, 59, 12, 187, 26, 119, 202, 61, 159, 10, 37, 190, 183, 226, 175, 61, 81, 13, 21, 190, 114, 211, 43, 190, 31, 82, 207, 61, 167, 241, 179, 61, 156, 0, 153, 189, 177, 39, 28, 190, 112, 226, 158, 189, 124, 224, 70, 60, 105, 100, 53, 60, 119, 200, 217, 61, 235, 129, 9, 61, 207, 35, 38, 189, 115, 131, 135, 189, 185, 205, 47, 190, 140, 178, 5, 190, 115, 18, 242, 61, 47, 26, 43, 189, 102, 191, 159, 61, 187, 195, 186, 184, 216, 26, 169, 189, 4, 2, 142, 189, 167, 169, 167, 189, 36, 235, 201, 61, 115, 9, 84, 189, 82, 49, 110, 191, 52, 103, 244, 190, 104, 99, 235, 190, 191, 225, 61, 62, 55, 79, 92, 190, 76, 114, 176, 190, 28, 41, 172, 190, 90, 108, 39, 62, 237, 187, 4, 190, 202, 85, 58, 62, 184, 63, 2, 190, 221, 182, 4, 190, 255, 68, 179, 61, 106, 114, 139, 62, 44, 249, 10, 191, 201, 248, 204, 62, 175, 159, 140, 188, 6, 249, 69, 61, 13, 202, 110, 62, 125, 222, 57, 190, 193, 157, 36, 190, 165, 192, 157, 190, 224, 112, 47, 191, 141, 231, 168, 190, 56, 120, 56, 191, 69, 59, 121, 190, 83, 136, 30, 190, 180, 93, 34, 61, 73, 180, 1, 62, 170, 12, 184, 190, 193, 65, 11, 191, 122, 233, 13, 190, 90, 207, 209, 189, 75, 107, 170, 62, 8, 12, 224, 61, 215, 159, 16, 62, 36, 9, 104, 189, 147, 202, 101, 189, 96, 3, 112, 189, 214, 190, 245, 189, 46, 66, 181, 62, 52, 0, 170, 190, 113, 231, 14, 62, 177, 120, 79, 188, 43, 20, 109, 62, 131, 225, 111, 62, 245, 6, 146, 62, 221, 146, 106, 62, 226, 254, 120, 62, 42, 92, 244, 61, 172, 132, 12, 190, 184, 149, 192, 61, 83, 124, 64, 61, 131, 208, 181, 61, 1, 40, 23, 62, 133, 210, 30, 62, 151, 226, 8, 191, 48, 241, 59, 62, 13, 79, 160, 62, 140, 114, 52, 190, 63, 4, 3, 190, 65, 200, 244, 61, 166, 217, 221, 61, 236, 94, 100, 61, 45, 8, 1, 60, 186, 240, 54, 190, 3, 237, 184, 189, 150, 189, 81, 61, 186, 80, 236, 61, 19, 38, 15, 62, 22, 101, 220, 61, 136, 151, 51, 190, 44, 90, 134, 189, 72, 198, 154, 60, 1, 8, 55, 190, 60, 27, 40, 62, 6, 209, 32, 60, 224, 33, 163, 189, 69, 52, 249, 61, 189, 215, 149, 189, 121, 254, 192, 189, 59, 171, 143, 188, 200, 159, 73, 190, 229, 177, 143, 61, 92, 76, 4, 61, 142, 69, 31, 190, 56, 180, 164, 61, 86, 200, 192, 189, 12, 227, 162, 60, 44, 34, 250, 189, 114, 87, 171, 189, 20, 66, 8, 190, 76, 177, 202, 61, 71, 58, 130, 189, 125, 234, 239, 60, 69, 141, 208, 60, 124, 185, 127, 58, 61, 54, 91, 187, 177, 116, 75, 62, 142, 210, 164, 61, 122, 44, 30, 60, 246, 141, 222, 189, 177, 195, 170, 62, 198, 114, 88, 188, 8, 188, 170, 62, 66, 43, 186, 189, 64, 26, 1, 62, 246, 208, 21, 190, 33, 10, 157, 60, 184, 100, 90, 62, 109, 36, 92, 62, 190, 114, 8, 62, 115, 154, 12, 62, 54, 37, 3, 62, 56, 30, 31, 61, 169, 108, 0, 189, 15, 202, 211, 60, 54, 140, 99, 189, 232, 227, 49, 61, 24, 176, 244, 190, 12, 162, 28, 191, 27, 228, 156, 189, 77, 9, 49, 190, 143, 224, 163, 62, 166, 133, 40, 189, 215, 132, 188, 190, 10, 228, 171, 62, 231, 103, 0, 190, 17, 249, 127, 62, 229, 237, 172, 62, 123, 156, 38, 62, 181, 27, 179, 189, 250, 90, 181, 62, 237, 122, 71, 63, 161, 4, 221, 61, 108, 15, 254, 189, 150, 167, 181, 62, 21, 17, 133, 62, 189, 65, 30, 62, 76, 232, 170, 187, 78, 181, 249, 189, 45, 112, 33, 190, 235, 109, 113, 190, 62, 134, 94, 61, 57, 165, 137, 188, 215, 215, 134, 190, 181, 18, 25, 62, 187, 86, 19, 190, 204, 250, 132, 62, 77, 199, 164, 62, 170, 35, 206, 61, 236, 56, 147, 62, 178, 167, 164, 191, 97, 88, 6, 61, 28, 225, 19, 59, 227, 234, 213, 61, 12, 120, 14, 62, 240, 109, 161, 190, 107, 38, 127, 190, 252, 75, 98, 62, 228, 96, 164, 190, 115, 16, 76, 62, 220, 0, 160, 190, 166, 40, 57, 191, 162, 44, 123, 62, 60, 249, 140, 62, 24, 174, 250, 61, 47, 16, 163, 62, 127, 160, 98, 61, 90, 11, 34, 62, 97, 61, 31, 61, 133, 212, 121, 62, 251, 117, 42, 191, 113, 255, 176, 61, 91, 8, 136, 190, 83, 212, 95, 62, 243, 118, 56, 189, 177, 10, 160, 190, 251, 157, 11, 62, 42, 1, 38, 62, 46, 160, 121, 191, 209, 87, 231, 62, 254, 181, 136, 190, 72, 197, 22, 63, 147, 94, 121, 191, 94, 135, 184, 60, 219, 11, 95, 191, 73, 188, 160, 62, 192, 229, 219, 189, 47, 136, 210, 191, 86, 234, 137, 190, 79, 200, 54, 62, 112, 118, 158, 61, 79, 193, 242, 60, 81, 83, 249, 61, 140, 205, 160, 60, 190, 138, 50, 61, 188, 12, 67, 60, 230, 136, 21, 190, 132, 21, 172, 61, 166, 214, 186, 61, 179, 4, 41, 190, 19, 46, 8, 190, 226, 75, 252, 60, 57, 188, 147, 60, 233, 45, 212, 61, 227, 227, 7, 60, 220, 36, 202, 61, 192, 78, 147, 186, 5, 41, 163, 61, 136, 83, 153, 61, 127, 120, 166, 188, 42, 181, 49, 189, 229, 201, 146, 61, 149, 66, 69, 190, 222, 33, 214, 189, 22, 208, 251, 189, 187, 31, 206, 188, 49, 179, 32, 190, 88, 70, 24, 190, 170, 67, 7, 190, 143, 99, 121, 61, 196, 60, 173, 187, 18, 5, 5, 190, 137, 225, 153, 187, 240, 231, 246, 189, 179, 234, 37, 62, 8, 66, 254, 61, 88, 152, 209, 189, 46, 13, 6, 62, 44, 176, 39, 190, 176, 109, 163, 189, 79, 134, 137, 189, 91, 58, 173, 189, 203, 143, 223, 189, 177, 157, 223, 189, 180, 60, 32, 62, 109, 222, 0, 190, 163, 161, 233, 59, 87, 97, 48, 62, 183, 43, 147, 60, 220, 249, 220, 60, 239, 199, 179, 61, 170, 223, 196, 188, 97, 185, 79, 61, 112, 23, 30, 188, 163, 152, 63, 188, 103, 127, 189, 186, 179, 10, 27, 61, 108, 30, 205, 61, 70, 132, 112, 189, 240, 84, 19, 61, 12, 155, 85, 190, 87, 70, 9, 190, 114, 43, 244, 188, 213, 85, 19, 62, 44, 73, 58, 192, 76, 186, 129, 61, 83, 211, 40, 189, 198, 51, 45, 62, 32, 103, 193, 190, 27, 112, 223, 61, 29, 188, 148, 190, 79, 139, 6, 191, 207, 197, 170, 62, 153, 55, 0, 191, 222, 51, 151, 190, 92, 212, 31, 189, 90, 175, 107, 189, 176, 8, 170, 191, 239, 118, 158, 62, 105, 249, 132, 190, 249, 127, 161, 62, 241, 254, 126, 189, 131, 110, 154, 191, 86, 211, 17, 191, 146, 161, 79, 61, 69, 61, 158, 61, 124, 153, 179, 186, 147, 46, 78, 190, 223, 72, 129, 191, 192, 123, 21, 61, 97, 104, 43, 62, 126, 123, 225, 189, 57, 31, 232, 60, 58, 141, 233, 189, 255, 196, 17, 60, 23, 255, 209, 190, 96, 141, 135, 62, 13, 32, 13, 62, 204, 234, 148, 190, 32, 142, 112, 62, 17, 137, 108, 191, 173, 5, 56, 191, 51, 33, 120, 191, 65, 240, 171, 189, 73, 237, 57, 191, 77, 98, 106, 191, 74, 238, 157, 191, 145, 169, 86, 190, 32, 94, 227, 61, 232, 119, 46, 189, 247, 36, 90, 60, 73, 33, 6, 63, 43, 166, 153, 189, 119, 136, 25, 62, 74, 169, 4, 192, 197, 116, 244, 189, 147, 160, 7, 62, 250, 138, 64, 191, 0, 128, 94, 191, 58, 129, 42, 190, 100, 73, 150, 62, 154, 163, 5, 191, 159, 135, 176, 62, 28, 120, 50, 190, 27, 222, 101, 190, 125, 103, 178, 61, 24, 193, 235, 60, 103, 192, 159, 62, 55, 174, 169, 191, 216, 125, 175, 62, 112, 215, 200, 62, 244, 165, 124, 189, 199, 144, 66, 191, 233, 219, 196, 62, 104, 71, 154, 190, 182, 177, 189, 190, 111, 254, 86, 62, 10, 91, 218, 189, 135, 200, 195, 189, 48, 202, 128, 189, 253, 34, 232, 61, 53, 109, 65, 62, 218, 226, 48, 190, 122, 199, 158, 63, 199, 127, 136, 61, 181, 202, 28, 190, 234, 160, 130, 61, 45, 245, 243, 61, 89, 250, 54, 62, 3, 173, 171, 62, 238, 36, 235, 189, 152, 184, 221, 60, 78, 86, 100, 191, 12, 172, 77, 62, 28, 140, 182, 189, 96, 191, 62, 61, 159, 12, 17, 62, 182, 239, 36, 62, 237, 117, 82, 190, 250, 65, 29, 190, 150, 119, 120, 61, 132, 243, 118, 62, 244, 236, 160, 190, 196, 138, 25, 191, 193, 150, 158, 188, 81, 35, 156, 188, 173, 146, 225, 59, 91, 117, 91, 189, 45, 191, 166, 61, 60, 150, 175, 62, 55, 185, 54, 62, 222, 41, 139, 190, 77, 110, 31, 190, 59, 79, 54, 62, 214, 152, 108, 190, 102, 81, 166, 190, 104, 104, 205, 190, 230, 162, 78, 189, 77, 69, 173, 62, 216, 151, 205, 62, 118, 3, 240, 190, 123, 56, 26, 63, 186, 202, 117, 190, 233, 104, 185, 62, 1, 255, 86, 63, 125, 4, 218, 189, 146, 250, 224, 190, 233, 188, 28, 63, 159, 120, 31, 189, 78, 255, 117, 191, 228, 103, 16, 190, 198, 166, 230, 62, 157, 106, 144, 190, 191, 152, 62, 62, 27, 176, 188, 189, 50, 6, 161, 62, 255, 133, 15, 190, 160, 216, 152, 189, 55, 178, 8, 61, 13, 56, 255, 189, 90, 82, 26, 62, 48, 216, 12, 191, 69, 133, 73, 59, 251, 145, 121, 190, 4, 142, 136, 60, 17, 245, 122, 189, 195, 46, 185, 61, 168, 208, 176, 62, 15, 241, 144, 62, 159, 133, 51, 62, 176, 81, 242, 190, 213, 152, 190, 189, 202, 200, 112, 62, 35, 95, 23, 190, 243, 69, 47, 62, 224, 82, 45, 189, 127, 21, 58, 191, 244, 65, 65, 62, 238, 0, 1, 62, 67, 148, 120, 190, 248, 247, 228, 189, 80, 217, 121, 62, 4, 33, 212, 61, 203, 191, 128, 61, 4, 249, 167, 189, 13, 147, 49, 189, 90, 228, 175, 189, 184, 173, 82, 62, 13, 101, 128, 189, 50, 117, 185, 190, 147, 114, 75, 62, 239, 152, 186, 189, 30, 76, 206, 61, 240, 103, 75, 190, 107, 68, 253, 61, 172, 12, 143, 190, 217, 33, 196, 62, 115, 72, 165, 61, 74, 203, 75, 62, 27, 20, 139, 62, 59, 37, 55, 62, 77, 70, 224, 61, 11, 92, 70, 190, 117, 102, 230, 61, 90, 135, 119, 60, 33, 177, 39, 191, 218, 207, 217, 61, 83, 33, 58, 189, 238, 224, 245, 190, 140, 171, 220, 187, 83, 212, 118, 62, 246, 177, 107, 190, 44, 7, 106, 190, 222, 208, 130, 61, 216, 85, 142, 61, 159, 51, 153, 189, 191, 14, 134, 62, 110, 215, 179, 191, 174, 68, 6, 190, 63, 57, 161, 62, 200, 2, 202, 190, 54, 212, 182, 190, 217, 220, 232, 189, 41, 6, 188, 190, 133, 104, 12, 191, 26, 165, 44, 62, 169, 214, 224, 189, 115, 192, 164, 61, 45, 28, 156, 189, 211, 210, 129, 61, 149, 198, 133, 62, 235, 85, 252, 190, 149, 61, 237, 189, 105, 206, 108, 62, 205, 143, 242, 61, 124, 134, 47, 189, 165, 78, 24, 191, 13, 26, 1, 191, 247, 99, 77, 190, 130, 144, 91, 61, 4, 240, 88, 63, 250, 240, 38, 191, 140, 122, 209, 61, 166, 136, 197, 188, 148, 249, 166, 189, 12, 157, 71, 190, 65, 18, 149, 62, 130, 245, 172, 190, 238, 44, 136, 61, 40, 24, 52, 190, 29, 83, 24, 62, 27, 180, 7, 190, 119, 41, 155, 61, 187, 134, 10, 61, 186, 64, 249, 189, 12, 179, 72, 61, 13, 206, 62, 60, 40, 208, 24, 190, 141, 104, 72, 60, 49, 159, 28, 190, 130, 2, 29, 61, 157, 31, 152, 61, 73, 65, 84, 61, 220, 228, 182, 189, 201, 95, 34, 62, 61, 45, 39, 61, 187, 253, 67, 189, 134, 143, 234, 60, 189, 110, 221, 188, 156, 198, 139, 60, 58, 36, 115, 60, 167, 73, 7, 62, 19, 62, 44, 62, 207, 44, 44, 190, 243, 12, 42, 190, 66, 31, 18, 190, 141, 94, 158, 61, 180, 155, 35, 59, 11, 125, 9, 190, 29, 145, 227, 60, 96, 231, 42, 62, 204, 15, 18, 190, 111, 92, 172, 188, 208, 236, 182, 190, 202, 7, 34, 62, 128, 100, 27, 191, 83, 204, 102, 61, 185, 59, 83, 62, 110, 55, 137, 62, 109, 247, 4, 61, 105, 122, 136, 62, 6, 143, 251, 189, 77, 76, 164, 189, 176, 51, 187, 61, 139, 252, 152, 189, 243, 187, 158, 61, 7, 146, 121, 190, 163, 155, 195, 188, 239, 134, 55, 190, 194, 166, 28, 189, 69, 153, 210, 190, 200, 216, 40, 62, 42, 157, 203, 60, 50, 115, 17, 190, 48, 123, 20, 62, 26, 74, 20, 190, 43, 121, 147, 190, 58, 157, 201, 61, 102, 213, 64, 190, 114, 172, 154, 190, 132, 31, 172, 61, 47, 237, 5, 190, 62, 82, 72, 62, 245, 101, 147, 189, 135, 113, 21, 62, 168, 210, 213, 61, 58, 86, 168, 62, 25, 141, 79, 191, 202, 172, 108, 61, 139, 244, 48, 190, 35, 222, 72, 189, 111, 241, 155, 190, 116, 220, 85, 60, 58, 203, 199, 190, 200, 62, 36, 62, 255, 111, 24, 189, 247, 235, 149, 62, 76, 54, 129, 62, 85, 195, 169, 61, 6, 223, 191, 61, 16, 138, 5, 191, 189, 139, 44, 190, 71, 197, 204, 61, 130, 27, 83, 190, 183, 151, 112, 62, 47, 229, 125, 190, 0, 6, 176, 190, 243, 158, 150, 62, 157, 7, 103, 62, 136, 16, 37, 189, 57, 204, 133, 190, 251, 120, 51, 61, 91, 36, 137, 62, 188, 27, 95, 190, 178, 173, 150, 191, 96, 192, 250, 189, 68, 200, 212, 189, 251, 161, 151, 189, 78, 183, 114, 190, 24, 55, 210, 62, 240, 140, 61, 60, 239, 133, 254, 190, 4, 148, 0, 63, 177, 67, 60, 189, 165, 209, 202, 61, 124, 245, 182, 62, 35, 58, 79, 189, 30, 137, 209, 191, 234, 26, 235, 189, 121, 100, 200, 189, 56, 89, 49, 62, 25, 194, 2, 61, 251, 61, 100, 190, 186, 251, 142, 191, 6, 238, 90, 61, 250, 2, 2, 60, 25, 171, 6, 61, 13, 152, 100, 62, 191, 120, 123, 191, 210, 76, 146, 190, 76, 131, 223, 189, 29, 143, 127, 62, 191, 46, 180, 61, 175, 215, 131, 190, 91, 36, 132, 190, 227, 125, 247, 190, 104, 210, 148, 189, 152, 133, 78, 190, 57, 231, 119, 189, 103, 64, 118, 190, 182, 133, 160, 62, 4, 137, 247, 62, 230, 118, 135, 61, 62, 46, 23, 191, 116, 55, 174, 62, 76, 204, 120, 62, 101, 58, 233, 60, 96, 79, 161, 62, 17, 65, 59, 190, 94, 153, 241, 190, 186, 251, 91, 190, 130, 153, 232, 190, 205, 52, 36, 62, 158, 30, 32, 189, 25, 116, 249, 62, 66, 254, 243, 190, 33, 65, 218, 189, 15, 29, 13, 62, 76, 247, 28, 61, 235, 227, 126, 62, 217, 199, 42, 63, 216, 1, 138, 190, 43, 230, 154, 190, 48, 141, 140, 62, 59, 150, 14, 63, 215, 101, 81, 190, 190, 48, 132, 60, 223, 229, 154, 190, 217, 133, 55, 62, 48, 182, 2, 190, 235, 173, 106, 62, 179, 199, 63, 61, 141, 249, 128, 191, 25, 231, 215, 190, 124, 120, 131, 62, 155, 127, 158, 61, 43, 226, 139, 62, 229, 123, 165, 191, 30, 178, 103, 62, 247, 14, 0, 190, 218, 22, 230, 61, 9, 184, 228, 62, 116, 84, 202, 62, 142, 187, 73, 190, 12, 249, 177, 61, 18, 0, 1, 60, 115, 206, 199, 191, 54, 145, 112, 190, 67, 234, 250, 61, 76, 120, 9, 191, 98, 215, 143, 60, 82, 164, 15, 190, 173, 110, 199, 62, 15, 10, 138, 190, 107, 199, 2, 62, 39, 38, 85, 187, 46, 11, 24, 62, 92, 215, 94, 61, 76, 126, 142, 62, 71, 161, 188, 189, 126, 201, 36, 191, 87, 244, 53, 61, 146, 249, 177, 190, 69, 180, 79, 191, 123, 114, 70, 61, 242, 249, 165, 62, 244, 30, 85, 62, 185, 137, 5, 189, 143, 86, 177, 62, 190, 189, 130, 62, 252, 154, 178, 61, 1, 226, 238, 61, 218, 36, 201, 190, 200, 227, 27, 62, 197, 93, 166, 190, 44, 137, 235, 190, 251, 255, 188, 189, 90, 187, 94, 190, 70, 84, 160, 62, 158, 219, 216, 188, 39, 190, 78, 191, 168, 239, 174, 62, 247, 143, 128, 189, 97, 210, 114, 62, 94, 194, 54, 63, 139, 67, 87, 61, 184, 178, 143, 191, 139, 145, 211, 62, 220, 99, 20, 63, 26, 143, 239, 191, 203, 142, 168, 190, 118, 123, 95, 60, 202, 120, 142, 191, 211, 247, 135, 190, 245, 105, 90, 62, 12, 247, 55, 62, 192, 81, 60, 62, 127, 67, 191, 190, 52, 135, 203, 60, 136, 252, 11, 191, 106, 91, 123, 62, 143, 74, 228, 190, 219, 147, 233, 189, 219, 117, 59, 190, 13, 216, 150, 61, 86, 91, 199, 190, 255, 104, 44, 61, 204, 245, 27, 59, 206, 202, 166, 60, 25, 242, 6, 189, 253, 217, 34, 191, 229, 167, 75, 190, 4, 146, 85, 188, 251, 83, 196, 189, 104, 101, 10, 62, 128, 219, 239, 190, 189, 172, 60, 191, 94, 220, 22, 62, 140, 44, 0, 62, 195, 88, 195, 61, 188, 67, 27, 190, 43, 139, 85, 190, 126, 60, 11, 190, 87, 91, 80, 189, 219, 115, 119, 62, 203, 248, 93, 191, 211, 102, 137, 190, 1, 17, 74, 61, 155, 134, 217, 189, 0, 156, 165, 191, 9, 35, 143, 189, 13, 114, 123, 189, 97, 25, 67, 62, 71, 31, 229, 190, 219, 41, 103, 189, 146, 41, 247, 189, 122, 139, 31, 62, 45, 211, 154, 62, 122, 210, 91, 62, 102, 169, 78, 62, 35, 138, 141, 61, 78, 222, 131, 62, 34, 185, 73, 190, 144, 202, 177, 190, 32, 251, 150, 189, 111, 103, 109, 190, 49, 158, 20, 190, 57, 244, 175, 190, 101, 171, 163, 190, 66, 87, 129, 190, 228, 78, 214, 188, 70, 247, 198, 60, 202, 236, 75, 190, 183, 252, 164, 190, 86, 203, 28, 62, 202, 118, 135, 191, 102, 13, 124, 189, 187, 227, 243, 190, 23, 72, 115, 191, 214, 8, 43, 189, 124, 47, 147, 190, 81, 190, 176, 61, 85, 244, 27, 191, 190, 62, 45, 62, 107, 243, 62, 190, 136, 58, 186, 185, 129, 66, 167, 61, 115, 237, 175, 189, 4, 130, 151, 62, 153, 103, 146, 62, 216, 127, 153, 61, 238, 142, 141, 190, 203, 9, 171, 61, 7, 5, 124, 62, 40, 163, 172, 62, 83, 5, 7, 62, 158, 180, 75, 62, 223, 183, 85, 191, 111, 136, 139, 190, 186, 44, 113, 190, 114, 82, 251, 60, 192, 98, 67, 190, 110, 16, 168, 62, 147, 110, 21, 62, 87, 216, 60, 190, 104, 36, 232, 61, 220, 123, 142, 189, 217, 43, 58, 190, 182, 213, 91, 189, 245, 68, 27, 190, 244, 39, 86, 61, 140, 101, 62, 190, 222, 217, 216, 189, 16, 31, 237, 61, 228, 92, 216, 188, 154, 208, 112, 61, 28, 49, 234, 60, 23, 161, 83, 187, 151, 228, 48, 190, 75, 24, 11, 190, 12, 20, 31, 190, 131, 220, 148, 188, 58, 60, 63, 189, 126, 227, 30, 190, 70, 86, 123, 189, 163, 76, 244, 187, 55, 105, 166, 61, 22, 10, 189, 61, 19, 119, 185, 60, 246, 87, 2, 62, 86, 59, 52, 188, 21, 137, 191, 60, 55, 21, 39, 62, 39, 222, 70, 190, 191, 222, 21, 62, 232, 158, 221, 188, 185, 58, 15, 190, 185, 56, 147, 61, 153, 54, 203, 189, 168, 39, 172, 59, 237, 19, 21, 62, 31, 20, 57, 191, 229, 201, 154, 190, 248, 54, 70, 188, 116, 125, 191, 189, 230, 26, 237, 191, 67, 130, 138, 188, 252, 241, 72, 190, 162, 113, 148, 189, 163, 5, 138, 190, 48, 84, 12, 62, 44, 242, 21, 62, 16, 181, 128, 61, 33, 253, 214, 62, 3, 74, 144, 62, 125, 176, 18, 63, 167, 53, 43, 62, 58, 49, 160, 62, 69, 136, 183, 190, 164, 242, 130, 190, 75, 37, 8, 189, 45, 54, 199, 190, 137, 215, 38, 62, 167, 227, 6, 191, 84, 224, 161, 62, 173, 195, 87, 191, 37, 128, 243, 61, 166, 212, 137, 61, 161, 111, 67, 190, 189, 103, 25, 62, 100, 38, 204, 62, 169, 56, 153, 191, 80, 247, 104, 191, 97, 20, 195, 189, 0, 2, 136, 60, 176, 133, 107, 190, 47, 223, 26, 63, 170, 10, 196, 62, 148, 105, 178, 62, 182, 40, 192, 190, 137, 168, 11, 63, 247, 13, 60, 63, 36, 71, 155, 61, 134, 76, 188, 62, 3, 3, 155, 190, 138, 236, 156, 191, 107, 200, 65, 190, 223, 157, 192, 190, 230, 177, 48, 62, 48, 160, 50, 62, 190, 241, 28, 63, 184, 192, 102, 190, 189, 239, 100, 190, 151, 5, 166, 61, 128, 91, 234, 188, 105, 64, 202, 62, 176, 95, 40, 191, 35, 34, 208, 189, 241, 233, 63, 190, 248, 8, 111, 62, 50, 136, 186, 62, 61, 215, 19, 190, 3, 61, 164, 190, 118, 214, 139, 190, 76, 180, 141, 62, 71, 58, 51, 190, 60, 81, 74, 62, 34, 180, 172, 62, 192, 36, 136, 61, 149, 63, 173, 191, 136, 58, 13, 62, 34, 184, 31, 190, 9, 147, 56, 190, 55, 208, 23, 190, 96, 184, 41, 62, 106, 170, 140, 190, 130, 82, 184, 62, 179, 186, 6, 62, 115, 21, 188, 61, 205, 226, 4, 63, 72, 139, 193, 61, 30, 214, 18, 61, 154, 207, 183, 190, 51, 167, 162, 61, 40, 147, 93, 188, 8, 250, 110, 190, 117, 251, 76, 189, 224, 13, 152, 190, 121, 79, 112, 190, 18, 165, 12, 190, 63, 16, 221, 61, 223, 158, 60, 190, 249, 19, 161, 190, 181, 119, 117, 62, 52, 154, 102, 62, 128, 237, 22, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 28, 124, 62, 232, 106, 40, 189, 40, 181, 10, 190, 124, 187, 116, 61, 138, 192, 109, 61, 73, 16, 45, 190, 61, 100, 163, 60, 213, 234, 135, 61, 190, 134, 215, 62, 208, 72, 83, 190, 61, 5, 74, 190, 141, 164, 148, 62, 109, 182, 34, 62, 211, 79, 136, 189, 49, 101, 249, 61, 46, 173, 36, 62, 22, 237, 112, 61, 109, 97, 21, 190, 137, 66, 206, 189, 36, 75, 121, 190, 146, 59, 22, 190, 110, 244, 162, 60, 69, 174, 53, 190, 176, 74, 95, 190, 103, 2, 160, 62, 129, 247, 25, 62, 14, 214, 130, 190, 41, 7, 79, 190, 172, 23, 28, 190, 86, 205, 251, 189, 105, 134, 11, 190, 201, 49, 153, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {196, 177, 75, 191, 0, 170, 30, 188, 52, 244, 232, 189, 250, 209, 38, 63, 2, 225, 182, 61, 80, 47, 10, 62, 241, 170, 28, 62, 166, 159, 237, 62, 82, 229, 107, 191, 49, 17, 33, 190, 145, 93, 41, 188, 249, 141, 80, 190, 219, 143, 133, 63, 124, 148, 127, 62, 59, 49, 77, 191, 220, 1, 152, 61, 234, 174, 148, 61, 21, 78, 151, 191, 188, 122, 131, 60, 37, 131, 104, 62, 1, 146, 185, 62, 144, 249, 27, 191, 35, 55, 255, 190, 204, 62, 10, 63, 104, 42, 221, 190, 103, 44, 78, 189, 98, 45, 11, 63, 143, 112, 132, 190, 83, 188, 27, 58, 46, 11, 175, 63, 83, 22, 34, 191, 12, 95, 1, 63, 252, 66, 99, 60, 175, 177, 130, 61, 98, 129, 142, 188, 144, 121, 7, 62, 182, 119, 138, 190, 240, 27, 28, 62, 158, 206, 130, 190, 16, 186, 105, 62, 89, 220, 60, 189, 57, 81, 167, 189, 114, 199, 96, 188, 170, 110, 49, 191, 197, 18, 193, 62, 217, 71, 152, 189, 135, 233, 50, 190, 48, 96, 53, 190, 217, 50, 75, 190, 234, 203, 186, 190, 100, 151, 223, 189, 192, 139, 49, 62, 36, 186, 52, 62, 26, 50, 87, 190, 24, 143, 72, 62, 129, 131, 69, 188, 20, 20, 38, 190, 166, 44, 232, 190, 155, 14, 62, 62, 205, 93, 148, 61, 64, 209, 98, 61, 176, 115, 116, 62, 156, 85, 2, 61, 140, 221, 13, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {19, 67, 86, 190, 35, 78, 176, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {89, 233, 217, 63, 133, 59, 138, 191, 12, 132, 18, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {221, 51, 5, 62, 106, 59, 101, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0019/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}