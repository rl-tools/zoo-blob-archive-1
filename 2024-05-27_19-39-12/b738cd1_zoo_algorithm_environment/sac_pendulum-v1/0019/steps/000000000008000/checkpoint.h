// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {10, 88, 230, 62, 26, 250, 94, 191, 143, 183, 196, 190, 252, 224, 40, 190, 194, 64, 23, 63, 168, 78, 3, 189, 101, 169, 198, 61, 238, 110, 220, 62, 75, 26, 118, 190, 26, 207, 178, 62, 87, 54, 233, 190, 237, 165, 0, 63, 152, 152, 169, 190, 6, 242, 115, 189, 235, 137, 198, 190, 30, 75, 51, 63, 18, 8, 92, 63, 226, 153, 147, 62, 67, 24, 143, 61, 145, 70, 159, 62, 250, 159, 22, 191, 53, 147, 128, 191, 175, 161, 136, 190, 230, 59, 104, 187, 242, 170, 92, 63, 163, 153, 209, 62, 162, 137, 133, 190, 103, 53, 162, 190, 149, 204, 132, 191, 204, 43, 138, 190, 32, 144, 104, 62, 85, 243, 162, 191, 120, 195, 250, 190, 248, 94, 162, 61, 49, 78, 115, 62, 30, 106, 217, 62, 46, 30, 2, 62, 255, 236, 64, 190, 65, 184, 248, 62, 196, 58, 252, 190, 252, 246, 14, 191, 107, 178, 12, 190, 236, 166, 58, 63, 224, 10, 79, 191, 148, 78, 155, 190, 216, 108, 18, 191, 124, 126, 52, 191, 139, 62, 7, 190, 149, 251, 23, 63, 216, 26, 6, 189, 166, 206, 29, 63, 232, 48, 172, 189, 21, 83, 58, 191, 228, 92, 93, 62, 151, 76, 8, 191, 8, 185, 211, 191, 248, 158, 195, 190, 167, 182, 23, 191, 150, 178, 168, 60, 7, 204, 171, 189, 156, 150, 195, 59, 105, 20, 60, 63, 207, 20, 36, 63, 112, 220, 151, 61, 231, 169, 45, 63, 135, 46, 171, 188, 157, 7, 194, 62, 1, 122, 174, 60, 226, 69, 6, 191, 167, 65, 243, 62, 133, 50, 101, 63, 179, 60, 6, 63, 101, 50, 44, 63, 244, 238, 30, 191, 2, 28, 186, 189, 111, 12, 225, 189, 90, 68, 55, 63, 191, 245, 65, 190, 54, 205, 101, 190, 94, 67, 154, 62, 139, 106, 63, 63, 184, 53, 94, 62, 218, 136, 62, 191, 3, 41, 54, 63, 216, 209, 171, 62, 242, 3, 61, 190, 97, 156, 57, 63, 196, 32, 172, 190, 83, 201, 112, 63, 235, 150, 33, 63, 207, 252, 1, 63, 119, 251, 86, 191, 144, 170, 54, 190, 236, 167, 36, 191, 103, 80, 25, 63, 104, 39, 87, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 1, 18, 191, 97, 181, 234, 62, 64, 243, 160, 62, 75, 44, 161, 61, 196, 82, 189, 190, 139, 47, 132, 190, 160, 84, 255, 62, 242, 158, 72, 62, 166, 68, 48, 62, 44, 160, 90, 189, 146, 49, 0, 63, 110, 172, 255, 190, 249, 245, 51, 189, 147, 93, 217, 62, 200, 180, 19, 62, 72, 122, 1, 191, 248, 225, 175, 62, 107, 74, 5, 63, 239, 241, 226, 189, 128, 56, 21, 63, 63, 34, 39, 61, 12, 147, 200, 189, 28, 246, 244, 62, 170, 62, 19, 191, 77, 199, 40, 191, 248, 89, 171, 62, 182, 35, 194, 190, 143, 162, 187, 62, 167, 244, 1, 190, 40, 235, 212, 190, 212, 180, 98, 189, 57, 203, 191, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {89, 127, 125, 190, 77, 84, 243, 187, 51, 23, 192, 190, 46, 83, 102, 191, 149, 71, 59, 62, 53, 239, 5, 190, 223, 64, 32, 62, 105, 223, 248, 61, 94, 78, 136, 61, 112, 215, 72, 62, 22, 25, 110, 62, 101, 104, 227, 61, 57, 167, 111, 191, 200, 208, 201, 189, 27, 157, 48, 189, 112, 52, 75, 190, 210, 80, 65, 191, 86, 46, 163, 188, 63, 149, 135, 60, 246, 154, 41, 190, 245, 166, 106, 191, 198, 129, 150, 61, 207, 116, 46, 190, 178, 94, 141, 61, 36, 44, 138, 63, 43, 34, 165, 189, 99, 62, 129, 191, 18, 23, 93, 190, 144, 27, 104, 190, 110, 108, 156, 191, 173, 168, 159, 190, 88, 128, 229, 61, 181, 191, 131, 61, 197, 129, 69, 190, 142, 43, 235, 188, 177, 221, 40, 190, 174, 126, 54, 189, 68, 131, 241, 61, 123, 113, 212, 61, 172, 106, 13, 190, 171, 86, 48, 61, 42, 114, 209, 60, 32, 145, 151, 61, 128, 98, 185, 189, 207, 5, 228, 188, 222, 33, 203, 189, 57, 175, 64, 190, 106, 241, 25, 61, 21, 36, 108, 61, 136, 154, 17, 190, 22, 113, 7, 62, 163, 87, 72, 190, 217, 129, 232, 189, 8, 165, 26, 60, 193, 16, 93, 190, 239, 55, 141, 189, 251, 63, 60, 61, 106, 61, 40, 190, 37, 28, 52, 190, 125, 197, 204, 189, 82, 130, 216, 188, 234, 228, 9, 190, 139, 219, 86, 190, 52, 94, 122, 189, 98, 182, 184, 189, 49, 30, 43, 190, 255, 34, 96, 61, 117, 134, 207, 61, 208, 59, 12, 187, 26, 119, 202, 61, 159, 10, 37, 190, 183, 226, 175, 61, 81, 13, 21, 190, 114, 211, 43, 190, 31, 82, 207, 61, 167, 241, 179, 61, 156, 0, 153, 189, 177, 39, 28, 190, 112, 226, 158, 189, 124, 224, 70, 60, 105, 100, 53, 60, 119, 200, 217, 61, 235, 129, 9, 61, 207, 35, 38, 189, 115, 131, 135, 189, 185, 205, 47, 190, 140, 178, 5, 190, 115, 18, 242, 61, 47, 26, 43, 189, 102, 191, 159, 61, 187, 195, 186, 184, 216, 26, 169, 189, 4, 2, 142, 189, 167, 169, 167, 189, 36, 235, 201, 61, 115, 9, 84, 189, 77, 220, 139, 190, 249, 229, 57, 190, 78, 113, 186, 189, 190, 37, 98, 62, 13, 47, 156, 189, 107, 96, 157, 189, 3, 0, 100, 190, 56, 4, 83, 62, 117, 36, 3, 190, 247, 146, 109, 62, 4, 90, 25, 188, 75, 236, 211, 189, 104, 156, 246, 61, 168, 53, 124, 62, 119, 220, 214, 190, 146, 13, 14, 60, 219, 201, 133, 187, 147, 42, 29, 61, 190, 128, 144, 62, 142, 172, 163, 189, 245, 192, 247, 189, 138, 246, 131, 189, 127, 144, 204, 190, 93, 149, 151, 190, 218, 235, 175, 59, 250, 212, 215, 188, 190, 255, 212, 189, 36, 142, 87, 61, 140, 141, 9, 62, 233, 92, 117, 190, 117, 121, 210, 190, 203, 128, 126, 61, 67, 50, 193, 189, 110, 247, 117, 62, 223, 49, 140, 61, 106, 190, 42, 62, 158, 3, 253, 189, 203, 210, 196, 189, 243, 33, 226, 189, 228, 174, 227, 60, 91, 126, 156, 62, 12, 229, 141, 190, 58, 104, 252, 61, 197, 184, 5, 189, 129, 221, 121, 62, 135, 2, 98, 62, 149, 168, 154, 62, 216, 5, 250, 61, 139, 63, 129, 62, 106, 193, 200, 61, 13, 113, 177, 189, 152, 50, 37, 62, 201, 161, 137, 60, 21, 92, 135, 61, 122, 42, 255, 61, 65, 138, 77, 61, 238, 10, 6, 191, 135, 172, 82, 61, 105, 59, 164, 62, 31, 36, 68, 190, 56, 207, 27, 190, 209, 246, 192, 61, 133, 37, 23, 62, 227, 163, 134, 61, 45, 8, 1, 60, 186, 240, 54, 190, 3, 237, 184, 189, 150, 189, 81, 61, 186, 80, 236, 61, 19, 38, 15, 62, 22, 101, 220, 61, 136, 151, 51, 190, 44, 90, 134, 189, 72, 198, 154, 60, 1, 8, 55, 190, 60, 27, 40, 62, 6, 209, 32, 60, 224, 33, 163, 189, 69, 52, 249, 61, 189, 215, 149, 189, 121, 254, 192, 189, 59, 171, 143, 188, 200, 159, 73, 190, 229, 177, 143, 61, 92, 76, 4, 61, 142, 69, 31, 190, 56, 180, 164, 61, 86, 200, 192, 189, 12, 227, 162, 60, 44, 34, 250, 189, 114, 87, 171, 189, 20, 66, 8, 190, 76, 177, 202, 61, 71, 58, 130, 189, 125, 234, 239, 60, 69, 141, 208, 60, 177, 207, 66, 188, 127, 36, 27, 190, 131, 177, 12, 62, 116, 189, 187, 61, 51, 206, 168, 189, 74, 158, 131, 189, 15, 106, 124, 62, 88, 110, 92, 61, 29, 5, 151, 62, 211, 244, 63, 188, 140, 241, 226, 61, 224, 157, 10, 190, 26, 132, 249, 60, 20, 150, 238, 61, 130, 121, 108, 62, 54, 64, 145, 60, 203, 251, 37, 62, 22, 181, 162, 61, 161, 105, 241, 61, 189, 95, 196, 189, 85, 58, 137, 186, 211, 221, 87, 61, 108, 153, 15, 60, 251, 104, 4, 191, 210, 97, 27, 191, 233, 119, 138, 190, 231, 6, 24, 190, 34, 242, 146, 62, 144, 92, 153, 189, 251, 91, 186, 190, 51, 63, 191, 62, 127, 89, 194, 190, 247, 174, 3, 62, 214, 16, 93, 62, 68, 246, 236, 61, 166, 100, 165, 189, 110, 161, 146, 62, 103, 164, 206, 62, 180, 253, 248, 60, 151, 71, 155, 188, 34, 14, 52, 62, 188, 142, 113, 62, 92, 39, 18, 62, 40, 195, 93, 60, 79, 119, 231, 189, 44, 43, 228, 189, 150, 103, 110, 190, 137, 238, 222, 189, 239, 184, 128, 189, 118, 236, 152, 190, 82, 118, 6, 62, 180, 107, 26, 190, 39, 52, 84, 62, 147, 84, 251, 62, 170, 128, 245, 60, 142, 170, 60, 62, 105, 222, 137, 191, 154, 85, 205, 60, 55, 106, 83, 61, 50, 249, 144, 61, 176, 194, 194, 61, 2, 37, 153, 190, 130, 70, 97, 190, 71, 62, 137, 62, 149, 137, 89, 190, 23, 204, 163, 187, 158, 169, 163, 190, 18, 101, 80, 191, 253, 138, 191, 62, 91, 7, 157, 62, 85, 254, 25, 62, 61, 183, 55, 62, 157, 89, 202, 61, 154, 72, 225, 61, 110, 79, 222, 61, 133, 212, 121, 62, 237, 145, 79, 191, 243, 72, 150, 61, 172, 59, 88, 190, 173, 224, 140, 62, 59, 48, 29, 191, 204, 121, 230, 189, 38, 31, 135, 61, 15, 150, 172, 61, 45, 191, 100, 191, 145, 39, 36, 62, 146, 172, 123, 190, 249, 119, 59, 62, 156, 187, 25, 191, 69, 21, 44, 188, 55, 77, 15, 191, 201, 75, 246, 62, 253, 172, 10, 190, 242, 145, 175, 191, 66, 160, 47, 190, 223, 1, 205, 61, 112, 118, 158, 61, 35, 118, 123, 61, 68, 110, 21, 62, 140, 205, 160, 60, 190, 138, 50, 61, 134, 216, 50, 61, 1, 201, 253, 189, 132, 21, 172, 61, 51, 225, 251, 61, 179, 4, 41, 190, 19, 46, 8, 190, 226, 75, 252, 60, 57, 188, 147, 60, 233, 45, 212, 61, 227, 227, 7, 60, 220, 36, 202, 61, 164, 242, 250, 60, 5, 41, 163, 61, 136, 83, 153, 61, 140, 106, 144, 188, 182, 128, 62, 188, 10, 65, 192, 61, 122, 120, 43, 190, 179, 122, 157, 189, 22, 208, 251, 189, 117, 35, 216, 59, 147, 75, 32, 190, 148, 217, 23, 190, 140, 224, 2, 190, 101, 187, 189, 61, 196, 60, 173, 187, 205, 127, 231, 189, 137, 225, 153, 187, 240, 231, 246, 189, 179, 234, 37, 62, 8, 66, 254, 61, 88, 152, 209, 189, 46, 13, 6, 62, 44, 176, 39, 190, 176, 109, 163, 189, 79, 134, 137, 189, 91, 58, 173, 189, 203, 143, 223, 189, 177, 157, 223, 189, 180, 60, 32, 62, 109, 222, 0, 190, 163, 161, 233, 59, 87, 97, 48, 62, 183, 43, 147, 60, 220, 249, 220, 60, 239, 199, 179, 61, 170, 223, 196, 188, 97, 185, 79, 61, 112, 23, 30, 188, 163, 152, 63, 188, 103, 127, 189, 186, 179, 10, 27, 61, 108, 30, 205, 61, 70, 132, 112, 189, 240, 84, 19, 61, 12, 155, 85, 190, 87, 70, 9, 190, 114, 43, 244, 188, 213, 85, 19, 62, 221, 85, 153, 191, 155, 251, 249, 61, 62, 13, 129, 189, 207, 217, 72, 62, 128, 71, 253, 189, 126, 149, 12, 62, 1, 45, 96, 190, 24, 83, 22, 191, 253, 82, 185, 62, 241, 37, 151, 190, 81, 231, 53, 190, 98, 141, 156, 189, 204, 35, 150, 189, 182, 49, 51, 191, 4, 255, 197, 62, 105, 249, 132, 190, 193, 243, 169, 62, 208, 13, 180, 188, 146, 86, 60, 191, 53, 45, 139, 189, 53, 76, 14, 61, 88, 30, 252, 188, 54, 216, 38, 61, 3, 169, 58, 190, 7, 221, 25, 191, 24, 14, 103, 189, 111, 21, 234, 61, 226, 245, 148, 189, 204, 238, 30, 61, 192, 93, 29, 190, 242, 207, 3, 62, 96, 110, 32, 190, 96, 141, 135, 62, 146, 27, 11, 62, 85, 251, 37, 62, 27, 248, 125, 62, 89, 213, 247, 190, 153, 244, 35, 191, 217, 55, 208, 190, 37, 183, 197, 60, 243, 95, 131, 190, 211, 232, 175, 191, 113, 4, 164, 191, 30, 157, 130, 190, 185, 4, 235, 61, 8, 81, 188, 61, 207, 103, 161, 189, 215, 247, 130, 61, 53, 53, 177, 189, 227, 181, 18, 62, 158, 79, 26, 192, 74, 136, 225, 61, 165, 170, 234, 61, 152, 231, 199, 190, 197, 110, 223, 190, 20, 41, 101, 190, 181, 68, 137, 62, 81, 232, 57, 62, 236, 107, 166, 62, 253, 25, 60, 190, 212, 21, 112, 190, 229, 111, 130, 61, 90, 209, 143, 189, 103, 127, 150, 62, 240, 31, 188, 190, 253, 123, 71, 62, 66, 117, 87, 62, 148, 104, 90, 60, 223, 52, 154, 188, 120, 188, 31, 62, 248, 78, 207, 190, 187, 91, 129, 190, 65, 82, 147, 61, 255, 240, 152, 189, 69, 209, 135, 188, 253, 103, 20, 189, 117, 161, 61, 62, 36, 196, 1, 62, 7, 170, 57, 189, 69, 215, 163, 62, 181, 212, 174, 61, 39, 186, 168, 189, 152, 233, 145, 61, 135, 162, 60, 62, 85, 69, 54, 62, 202, 58, 216, 62, 163, 68, 56, 190, 198, 18, 250, 188, 51, 175, 239, 189, 255, 118, 156, 61, 206, 53, 1, 189, 182, 178, 194, 61, 8, 132, 62, 62, 34, 120, 80, 62, 177, 132, 64, 189, 241, 147, 11, 190, 46, 179, 80, 61, 192, 243, 87, 62, 155, 98, 162, 190, 235, 41, 11, 191, 212, 84, 197, 61, 129, 20, 184, 62, 167, 123, 29, 61, 149, 157, 180, 189, 184, 237, 55, 62, 59, 20, 107, 62, 154, 226, 38, 62, 121, 68, 135, 190, 244, 252, 250, 189, 44, 227, 230, 61, 71, 252, 107, 190, 232, 139, 59, 190, 209, 154, 70, 190, 193, 129, 79, 61, 117, 142, 89, 62, 242, 86, 172, 62, 108, 154, 5, 191, 162, 7, 13, 63, 22, 183, 87, 190, 29, 29, 203, 62, 9, 138, 102, 63, 113, 181, 211, 189, 94, 157, 180, 190, 9, 124, 44, 63, 110, 142, 235, 61, 174, 80, 114, 191, 62, 239, 39, 190, 171, 208, 211, 62, 205, 11, 190, 189, 166, 136, 219, 61, 169, 122, 205, 189, 128, 181, 183, 62, 92, 233, 25, 190, 139, 207, 213, 189, 201, 209, 232, 60, 21, 224, 128, 61, 101, 25, 219, 61, 220, 181, 129, 190, 169, 57, 47, 61, 101, 129, 129, 190, 206, 148, 67, 61, 155, 144, 23, 61, 32, 161, 16, 62, 253, 133, 151, 62, 42, 138, 157, 62, 90, 148, 60, 62, 243, 160, 73, 190, 56, 74, 99, 61, 66, 202, 96, 62, 84, 245, 27, 190, 101, 176, 66, 62, 163, 106, 12, 190, 11, 68, 35, 191, 2, 193, 204, 61, 39, 141, 24, 62, 194, 237, 116, 190, 200, 247, 242, 189, 28, 142, 110, 62, 144, 176, 58, 62, 164, 247, 168, 61, 252, 245, 162, 189, 101, 59, 143, 189, 145, 177, 172, 189, 211, 10, 97, 62, 193, 5, 3, 190, 180, 128, 151, 190, 55, 154, 39, 62, 238, 237, 5, 61, 28, 82, 162, 61, 67, 176, 9, 190, 29, 89, 232, 61, 244, 196, 169, 190, 114, 108, 195, 62, 248, 124, 149, 61, 215, 46, 96, 62, 173, 82, 47, 62, 50, 173, 76, 62, 116, 155, 157, 61, 78, 132, 7, 190, 181, 206, 49, 62, 213, 209, 71, 187, 103, 114, 247, 190, 2, 110, 203, 61, 77, 194, 226, 189, 109, 182, 241, 190, 214, 188, 77, 189, 17, 3, 103, 62, 122, 231, 130, 190, 224, 245, 134, 190, 174, 148, 22, 61, 22, 10, 227, 61, 40, 211, 128, 189, 224, 4, 145, 62, 40, 170, 26, 191, 33, 73, 16, 190, 156, 255, 68, 62, 242, 133, 168, 190, 250, 170, 205, 189, 138, 54, 117, 186, 16, 150, 230, 190, 216, 19, 136, 190, 225, 30, 22, 61, 31, 237, 253, 189, 30, 190, 75, 189, 196, 37, 247, 189, 23, 51, 196, 189, 40, 179, 146, 62, 235, 103, 62, 190, 36, 50, 5, 189, 5, 17, 143, 61, 47, 242, 11, 189, 231, 62, 90, 190, 91, 0, 161, 190, 13, 26, 1, 191, 43, 36, 162, 189, 96, 173, 145, 61, 79, 129, 106, 63, 184, 195, 61, 191, 104, 238, 73, 188, 152, 220, 66, 190, 234, 43, 92, 60, 248, 35, 201, 189, 155, 28, 147, 62, 134, 107, 119, 190, 238, 44, 136, 61, 40, 24, 52, 190, 29, 83, 24, 62, 27, 180, 7, 190, 119, 41, 155, 61, 187, 134, 10, 61, 186, 64, 249, 189, 12, 179, 72, 61, 13, 206, 62, 60, 40, 208, 24, 190, 141, 104, 72, 60, 49, 159, 28, 190, 130, 2, 29, 61, 157, 31, 152, 61, 73, 65, 84, 61, 220, 228, 182, 189, 201, 95, 34, 62, 61, 45, 39, 61, 187, 253, 67, 189, 134, 143, 234, 60, 189, 110, 221, 188, 156, 198, 139, 60, 58, 36, 115, 60, 167, 73, 7, 62, 19, 62, 44, 62, 207, 44, 44, 190, 243, 12, 42, 190, 66, 31, 18, 190, 141, 94, 158, 61, 180, 155, 35, 59, 11, 125, 9, 190, 29, 145, 227, 60, 204, 235, 193, 60, 22, 57, 78, 189, 176, 81, 53, 188, 207, 64, 123, 190, 179, 94, 187, 61, 207, 233, 217, 190, 153, 148, 67, 60, 144, 12, 69, 62, 249, 41, 139, 62, 2, 181, 15, 62, 52, 75, 118, 62, 6, 143, 251, 189, 121, 134, 143, 189, 165, 165, 139, 61, 107, 121, 135, 189, 250, 34, 254, 188, 194, 226, 183, 189, 68, 250, 255, 188, 163, 118, 110, 189, 136, 195, 188, 187, 1, 154, 170, 190, 215, 185, 141, 62, 248, 115, 73, 60, 50, 115, 17, 190, 153, 171, 218, 188, 138, 139, 12, 190, 18, 91, 230, 189, 9, 212, 62, 62, 205, 112, 128, 190, 187, 85, 141, 190, 237, 20, 200, 61, 55, 85, 132, 189, 229, 113, 61, 61, 222, 237, 85, 189, 196, 207, 206, 61, 41, 9, 178, 61, 0, 240, 62, 62, 36, 138, 33, 191, 23, 144, 135, 188, 2, 250, 138, 189, 146, 236, 174, 189, 101, 7, 183, 189, 110, 38, 195, 60, 210, 96, 201, 190, 210, 107, 23, 62, 197, 209, 182, 189, 135, 95, 159, 62, 98, 255, 27, 62, 170, 174, 208, 61, 237, 178, 173, 61, 143, 64, 146, 190, 224, 197, 139, 189, 220, 234, 16, 62, 183, 222, 98, 188, 139, 86, 90, 62, 226, 219, 212, 189, 80, 31, 171, 190, 161, 70, 64, 62, 7, 220, 110, 62, 182, 238, 171, 189, 169, 202, 163, 190, 251, 34, 220, 61, 239, 240, 150, 62, 123, 42, 70, 190, 46, 156, 4, 191, 217, 82, 131, 189, 189, 140, 245, 189, 120, 21, 149, 189, 181, 223, 54, 62, 191, 14, 172, 62, 180, 21, 29, 61, 142, 49, 234, 190, 93, 229, 232, 62, 252, 9, 145, 60, 48, 21, 168, 61, 28, 109, 148, 62, 99, 135, 118, 189, 28, 200, 60, 191, 69, 204, 45, 190, 121, 100, 200, 189, 97, 126, 16, 62, 251, 36, 72, 61, 167, 68, 22, 188, 174, 192, 212, 190, 18, 253, 12, 61, 113, 209, 136, 189, 135, 48, 8, 188, 58, 252, 56, 62, 109, 42, 137, 191, 90, 124, 32, 190, 205, 26, 41, 190, 149, 77, 144, 62, 140, 143, 237, 61, 251, 249, 160, 190, 88, 131, 159, 190, 11, 73, 87, 190, 77, 66, 207, 189, 124, 225, 236, 189, 20, 213, 230, 189, 172, 237, 119, 190, 37, 205, 112, 62, 121, 61, 201, 62, 60, 232, 133, 61, 23, 40, 232, 190, 184, 37, 180, 62, 95, 16, 74, 188, 0, 227, 55, 60, 240, 94, 146, 62, 165, 108, 77, 190, 19, 107, 169, 190, 153, 5, 109, 190, 65, 15, 94, 190, 108, 166, 42, 62, 184, 0, 57, 189, 66, 173, 103, 62, 102, 244, 145, 190, 111, 125, 218, 189, 123, 191, 162, 189, 71, 119, 125, 60, 73, 167, 99, 62, 156, 216, 16, 63, 128, 51, 98, 190, 225, 32, 173, 190, 171, 159, 152, 62, 254, 76, 21, 63, 210, 132, 93, 190, 74, 58, 55, 188, 165, 165, 237, 189, 86, 210, 186, 189, 90, 157, 36, 190, 16, 167, 144, 62, 237, 153, 28, 61, 76, 139, 43, 191, 252, 184, 207, 190, 70, 244, 142, 62, 1, 214, 41, 62, 121, 116, 117, 62, 3, 244, 14, 191, 98, 154, 81, 62, 152, 38, 241, 189, 164, 91, 246, 61, 201, 121, 224, 62, 53, 35, 186, 62, 187, 245, 7, 191, 82, 28, 138, 61, 185, 5, 60, 60, 249, 177, 78, 191, 248, 74, 232, 189, 240, 55, 9, 62, 72, 220, 107, 190, 2, 171, 48, 61, 26, 71, 41, 190, 65, 226, 218, 62, 153, 142, 130, 190, 162, 181, 39, 62, 71, 85, 23, 189, 135, 205, 225, 61, 141, 251, 170, 61, 118, 167, 126, 62, 212, 68, 133, 57, 105, 185, 7, 191, 113, 38, 190, 61, 130, 106, 158, 190, 11, 141, 84, 191, 187, 52, 247, 61, 151, 170, 198, 62, 247, 85, 145, 62, 166, 156, 89, 190, 182, 232, 217, 62, 12, 113, 6, 62, 15, 252, 210, 61, 241, 217, 203, 61, 106, 58, 233, 190, 239, 113, 202, 61, 138, 184, 164, 190, 157, 155, 192, 190, 250, 210, 254, 189, 227, 173, 87, 190, 2, 29, 51, 62, 183, 190, 189, 189, 9, 13, 245, 190, 13, 218, 175, 62, 123, 210, 150, 188, 206, 10, 191, 62, 252, 198, 61, 63, 111, 212, 27, 62, 214, 4, 147, 191, 62, 22, 228, 62, 96, 123, 37, 63, 95, 217, 138, 191, 185, 92, 169, 190, 237, 99, 90, 61, 208, 24, 43, 191, 11, 216, 13, 190, 97, 6, 34, 62, 75, 9, 100, 62, 203, 40, 158, 61, 137, 129, 167, 189, 176, 216, 238, 188, 119, 216, 149, 190, 232, 8, 169, 62, 45, 174, 139, 190, 106, 40, 187, 189, 188, 152, 168, 190, 18, 86, 50, 61, 100, 213, 109, 190, 73, 225, 224, 61, 227, 233, 160, 61, 45, 45, 175, 61, 16, 71, 204, 60, 97, 122, 199, 190, 163, 99, 253, 189, 252, 32, 147, 188, 35, 156, 43, 61, 144, 78, 3, 62, 145, 145, 211, 190, 255, 235, 231, 190, 31, 12, 167, 61, 218, 43, 140, 61, 98, 229, 2, 62, 185, 93, 55, 190, 171, 185, 109, 190, 87, 125, 46, 59, 121, 85, 246, 60, 31, 115, 5, 62, 38, 171, 53, 191, 235, 215, 8, 190, 27, 232, 31, 62, 175, 4, 166, 189, 111, 136, 101, 191, 164, 130, 11, 188, 9, 233, 214, 187, 22, 91, 167, 62, 171, 2, 108, 190, 10, 70, 254, 60, 235, 111, 63, 190, 111, 209, 97, 62, 59, 6, 80, 62, 218, 31, 175, 62, 217, 197, 19, 62, 207, 163, 76, 62, 14, 131, 176, 62, 72, 105, 225, 60, 201, 153, 69, 190, 188, 111, 220, 188, 86, 145, 134, 190, 106, 39, 23, 189, 232, 151, 145, 190, 75, 12, 167, 190, 219, 220, 94, 190, 45, 163, 103, 189, 105, 75, 212, 61, 14, 57, 48, 190, 200, 109, 188, 190, 189, 7, 141, 62, 36, 140, 135, 191, 15, 120, 90, 61, 19, 19, 167, 190, 143, 242, 90, 191, 53, 92, 135, 189, 128, 104, 170, 190, 79, 109, 131, 60, 130, 254, 172, 190, 107, 71, 29, 62, 213, 255, 25, 190, 204, 206, 221, 189, 23, 169, 55, 62, 125, 193, 133, 189, 40, 167, 144, 62, 163, 173, 140, 62, 236, 81, 132, 61, 109, 23, 40, 189, 10, 119, 191, 61, 142, 121, 117, 62, 251, 27, 89, 62, 123, 82, 212, 61, 230, 209, 80, 62, 64, 40, 92, 191, 28, 9, 165, 189, 115, 20, 60, 190, 116, 94, 146, 62, 235, 57, 55, 190, 57, 251, 162, 62, 171, 222, 16, 62, 178, 119, 52, 190, 70, 91, 235, 61, 53, 38, 183, 189, 106, 111, 174, 189, 182, 213, 91, 189, 245, 68, 27, 190, 244, 39, 86, 61, 140, 101, 62, 190, 222, 217, 216, 189, 16, 31, 237, 61, 228, 92, 216, 188, 154, 208, 112, 61, 28, 49, 234, 60, 23, 161, 83, 187, 151, 228, 48, 190, 75, 24, 11, 190, 12, 20, 31, 190, 131, 220, 148, 188, 58, 60, 63, 189, 126, 227, 30, 190, 70, 86, 123, 189, 163, 76, 244, 187, 55, 105, 166, 61, 22, 10, 189, 61, 19, 119, 185, 60, 246, 87, 2, 62, 86, 59, 52, 188, 21, 137, 191, 60, 55, 21, 39, 62, 39, 222, 70, 190, 191, 222, 21, 62, 232, 158, 221, 188, 185, 58, 15, 190, 185, 56, 147, 61, 153, 54, 203, 189, 168, 39, 172, 59, 142, 96, 146, 61, 216, 68, 32, 191, 124, 59, 92, 190, 246, 71, 112, 186, 185, 151, 143, 189, 38, 112, 179, 191, 14, 45, 150, 189, 23, 83, 61, 190, 54, 32, 134, 189, 27, 190, 192, 189, 136, 215, 148, 61, 103, 238, 187, 61, 252, 168, 185, 61, 74, 36, 148, 62, 193, 6, 129, 62, 168, 10, 159, 62, 83, 85, 58, 62, 228, 57, 151, 62, 74, 197, 54, 190, 117, 45, 8, 190, 206, 237, 20, 61, 223, 218, 206, 190, 103, 23, 17, 62, 101, 110, 253, 190, 228, 130, 10, 62, 78, 109, 45, 191, 115, 132, 201, 61, 70, 245, 105, 61, 253, 185, 83, 190, 255, 50, 35, 62, 234, 236, 182, 62, 236, 197, 61, 191, 211, 96, 73, 191, 125, 62, 154, 188, 106, 105, 47, 189, 209, 22, 117, 190, 138, 168, 150, 62, 42, 201, 198, 62, 111, 19, 151, 62, 0, 209, 147, 190, 197, 41, 4, 63, 251, 224, 239, 61, 6, 33, 171, 60, 145, 119, 160, 62, 173, 18, 163, 190, 32, 171, 58, 191, 35, 106, 113, 190, 36, 142, 201, 190, 94, 62, 20, 62, 81, 18, 62, 62, 247, 47, 38, 61, 94, 40, 198, 188, 33, 20, 92, 190, 63, 12, 124, 61, 68, 23, 233, 189, 185, 244, 179, 62, 29, 29, 59, 191, 113, 239, 161, 189, 11, 239, 108, 190, 91, 253, 130, 62, 209, 191, 196, 62, 146, 241, 47, 190, 209, 211, 175, 190, 166, 254, 7, 190, 206, 17, 40, 62, 110, 58, 235, 188, 37, 192, 109, 62, 242, 243, 191, 62, 65, 241, 9, 190, 168, 107, 102, 191, 213, 32, 192, 61, 169, 183, 199, 188, 174, 172, 54, 190, 82, 81, 72, 60, 159, 22, 212, 61, 238, 198, 127, 190, 52, 194, 193, 62, 111, 185, 145, 61, 86, 159, 175, 61, 25, 80, 185, 62, 153, 249, 18, 62, 147, 200, 157, 60, 43, 0, 62, 190, 202, 91, 1, 62, 70, 203, 30, 61, 45, 152, 72, 190, 154, 45, 116, 189, 44, 69, 139, 190, 104, 76, 248, 190, 103, 90, 23, 190, 168, 161, 48, 62, 130, 83, 56, 190, 149, 45, 166, 190, 84, 46, 166, 62, 125, 240, 86, 62, 84, 164, 195, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 90, 62, 188, 232, 106, 40, 189, 40, 181, 10, 190, 168, 48, 211, 61, 231, 147, 81, 61, 73, 16, 45, 190, 178, 213, 15, 60, 207, 197, 40, 61, 32, 38, 46, 62, 123, 195, 50, 190, 61, 5, 74, 190, 96, 35, 183, 62, 173, 131, 52, 62, 153, 70, 153, 189, 54, 252, 57, 61, 53, 21, 53, 62, 203, 83, 156, 61, 130, 91, 28, 190, 137, 66, 206, 189, 194, 26, 8, 190, 224, 158, 178, 189, 246, 171, 118, 60, 20, 187, 28, 190, 158, 217, 126, 190, 165, 55, 141, 62, 231, 200, 130, 62, 222, 46, 4, 190, 22, 33, 18, 190, 172, 23, 28, 190, 173, 246, 7, 190, 19, 247, 224, 189, 61, 156, 74, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {132, 22, 52, 191, 0, 170, 30, 188, 52, 244, 232, 189, 63, 160, 219, 62, 32, 253, 236, 61, 80, 47, 10, 62, 124, 189, 45, 62, 59, 157, 137, 62, 111, 201, 68, 191, 193, 118, 34, 190, 145, 93, 41, 188, 8, 117, 250, 189, 161, 106, 165, 63, 234, 157, 89, 62, 186, 105, 55, 191, 112, 99, 176, 61, 220, 160, 16, 62, 50, 161, 105, 191, 188, 122, 131, 60, 105, 127, 25, 62, 160, 199, 143, 62, 140, 48, 252, 190, 27, 111, 7, 191, 144, 104, 236, 62, 204, 114, 20, 191, 53, 37, 98, 60, 150, 61, 11, 63, 131, 40, 127, 190, 83, 188, 27, 58, 215, 198, 74, 63, 197, 167, 15, 191, 149, 4, 194, 62, 194, 64, 93, 61, 175, 177, 130, 61, 98, 129, 142, 188, 164, 230, 13, 62, 33, 166, 123, 190, 240, 27, 28, 62, 195, 13, 104, 190, 187, 177, 145, 62, 201, 231, 111, 189, 165, 141, 166, 189, 114, 199, 96, 188, 93, 38, 27, 191, 161, 234, 246, 61, 16, 113, 43, 188, 40, 128, 217, 189, 109, 24, 44, 190, 151, 165, 101, 190, 112, 74, 228, 62, 100, 151, 223, 189, 111, 94, 21, 62, 132, 245, 230, 61, 88, 141, 18, 190, 55, 145, 127, 62, 208, 205, 181, 189, 71, 35, 105, 189, 116, 17, 209, 190, 175, 130, 35, 61, 148, 3, 24, 62, 64, 209, 98, 61, 97, 65, 147, 62, 48, 191, 224, 61, 62, 150, 201, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 238, 83, 190, 167, 157, 111, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {42, 108, 234, 191, 241, 213, 76, 62, 203, 229, 87, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {128, 196, 132, 189, 86, 69, 47, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0019/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}