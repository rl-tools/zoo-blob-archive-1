// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {214, 242, 233, 62, 49, 7, 136, 191, 217, 204, 198, 190, 133, 34, 31, 190, 185, 248, 42, 63, 202, 43, 46, 61, 95, 2, 30, 62, 115, 37, 1, 63, 120, 16, 152, 190, 54, 168, 156, 62, 235, 10, 3, 191, 191, 222, 238, 62, 71, 193, 8, 191, 107, 48, 194, 187, 152, 119, 228, 190, 75, 201, 58, 63, 79, 80, 123, 63, 145, 212, 147, 62, 18, 110, 49, 61, 75, 152, 183, 62, 32, 61, 31, 191, 243, 129, 140, 191, 119, 68, 45, 190, 25, 128, 72, 189, 91, 228, 93, 63, 171, 100, 219, 62, 203, 118, 25, 190, 202, 72, 44, 190, 195, 174, 151, 191, 110, 180, 156, 190, 10, 206, 111, 62, 199, 219, 146, 191, 46, 121, 14, 191, 201, 43, 178, 58, 73, 35, 150, 62, 225, 61, 213, 62, 121, 185, 232, 61, 70, 201, 68, 190, 194, 15, 235, 62, 118, 226, 6, 191, 176, 77, 63, 191, 8, 169, 48, 190, 160, 71, 53, 63, 108, 83, 104, 191, 139, 113, 133, 190, 113, 148, 83, 191, 206, 62, 58, 191, 175, 149, 138, 190, 233, 168, 33, 63, 79, 98, 250, 61, 77, 159, 1, 63, 117, 129, 175, 189, 151, 73, 55, 191, 178, 101, 156, 62, 43, 147, 206, 190, 129, 75, 232, 191, 132, 107, 213, 190, 201, 196, 48, 191, 248, 212, 236, 189, 246, 238, 10, 190, 25, 171, 158, 61, 186, 78, 90, 63, 217, 47, 39, 63, 79, 73, 130, 61, 25, 154, 70, 63, 36, 0, 128, 60, 184, 252, 175, 62, 72, 217, 222, 61, 75, 35, 20, 191, 91, 97, 6, 63, 242, 203, 127, 63, 229, 56, 247, 62, 94, 221, 17, 63, 123, 116, 95, 191, 158, 248, 62, 190, 82, 9, 204, 189, 232, 172, 83, 63, 172, 8, 128, 190, 32, 4, 145, 190, 34, 192, 190, 62, 232, 20, 62, 63, 145, 181, 147, 62, 69, 26, 41, 191, 77, 220, 51, 63, 103, 98, 167, 62, 154, 198, 33, 190, 127, 239, 57, 63, 56, 144, 110, 190, 74, 71, 133, 63, 153, 250, 37, 63, 53, 106, 0, 63, 43, 74, 91, 191, 83, 167, 71, 190, 118, 201, 79, 191, 191, 58, 41, 63, 215, 132, 229, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 122, 27, 191, 168, 146, 3, 63, 180, 116, 52, 62, 148, 158, 226, 61, 148, 3, 162, 190, 232, 213, 164, 190, 238, 40, 0, 63, 157, 185, 59, 62, 52, 116, 89, 62, 248, 253, 103, 190, 89, 24, 217, 62, 188, 149, 20, 191, 61, 242, 126, 188, 213, 192, 204, 62, 149, 38, 222, 61, 211, 224, 209, 190, 229, 32, 167, 62, 147, 29, 223, 62, 26, 60, 105, 190, 103, 243, 25, 63, 86, 29, 97, 61, 58, 43, 6, 190, 250, 138, 243, 62, 102, 203, 35, 191, 51, 23, 19, 191, 8, 7, 168, 62, 200, 48, 145, 190, 153, 33, 113, 62, 169, 244, 12, 190, 90, 233, 138, 190, 0, 212, 68, 189, 125, 122, 197, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 112, 137, 190, 238, 125, 52, 62, 202, 171, 178, 190, 78, 120, 127, 191, 102, 197, 32, 62, 91, 59, 12, 191, 104, 195, 49, 62, 11, 124, 161, 62, 103, 1, 153, 60, 227, 233, 49, 62, 146, 219, 100, 62, 101, 104, 227, 61, 34, 86, 83, 191, 213, 179, 124, 188, 117, 173, 4, 189, 90, 220, 134, 190, 61, 215, 100, 191, 172, 166, 148, 189, 139, 134, 117, 187, 97, 105, 207, 59, 132, 85, 115, 191, 225, 171, 90, 62, 101, 83, 44, 190, 178, 94, 141, 61, 223, 215, 134, 63, 33, 208, 1, 188, 39, 251, 173, 191, 112, 172, 21, 191, 144, 27, 104, 190, 75, 80, 141, 191, 163, 243, 152, 190, 243, 190, 193, 62, 181, 191, 131, 61, 197, 129, 69, 190, 142, 43, 235, 188, 177, 221, 40, 190, 174, 126, 54, 189, 68, 131, 241, 61, 123, 113, 212, 61, 172, 106, 13, 190, 171, 86, 48, 61, 42, 114, 209, 60, 32, 145, 151, 61, 128, 98, 185, 189, 207, 5, 228, 188, 222, 33, 203, 189, 57, 175, 64, 190, 106, 241, 25, 61, 21, 36, 108, 61, 136, 154, 17, 190, 22, 113, 7, 62, 163, 87, 72, 190, 217, 129, 232, 189, 8, 165, 26, 60, 193, 16, 93, 190, 239, 55, 141, 189, 251, 63, 60, 61, 106, 61, 40, 190, 37, 28, 52, 190, 125, 197, 204, 189, 82, 130, 216, 188, 234, 228, 9, 190, 139, 219, 86, 190, 52, 94, 122, 189, 98, 182, 184, 189, 49, 30, 43, 190, 255, 34, 96, 61, 117, 134, 207, 61, 208, 59, 12, 187, 26, 119, 202, 61, 159, 10, 37, 190, 183, 226, 175, 61, 81, 13, 21, 190, 114, 211, 43, 190, 31, 82, 207, 61, 167, 241, 179, 61, 156, 0, 153, 189, 177, 39, 28, 190, 112, 226, 158, 189, 124, 224, 70, 60, 105, 100, 53, 60, 119, 200, 217, 61, 235, 129, 9, 61, 207, 35, 38, 189, 115, 131, 135, 189, 185, 205, 47, 190, 140, 178, 5, 190, 115, 18, 242, 61, 47, 26, 43, 189, 102, 191, 159, 61, 187, 195, 186, 184, 216, 26, 169, 189, 4, 2, 142, 189, 167, 169, 167, 189, 36, 235, 201, 61, 115, 9, 84, 189, 28, 181, 22, 191, 14, 50, 151, 190, 238, 200, 253, 190, 133, 6, 61, 62, 124, 34, 167, 190, 31, 240, 166, 190, 248, 41, 192, 190, 115, 158, 119, 62, 228, 55, 7, 190, 67, 194, 61, 62, 71, 33, 238, 189, 154, 109, 248, 189, 189, 175, 185, 61, 154, 217, 164, 62, 185, 88, 24, 191, 201, 76, 249, 62, 227, 188, 214, 188, 218, 131, 144, 61, 142, 127, 125, 62, 243, 65, 208, 189, 52, 17, 7, 190, 165, 192, 157, 190, 188, 195, 40, 191, 101, 163, 169, 190, 197, 247, 225, 190, 82, 32, 143, 190, 208, 128, 2, 190, 181, 14, 56, 61, 254, 247, 247, 61, 186, 205, 175, 190, 208, 133, 23, 191, 103, 129, 5, 61, 160, 131, 158, 189, 223, 152, 160, 62, 24, 17, 227, 61, 84, 110, 14, 62, 74, 22, 169, 189, 54, 98, 251, 189, 0, 79, 127, 189, 122, 57, 252, 58, 125, 81, 179, 62, 222, 57, 154, 190, 141, 167, 8, 62, 128, 202, 133, 189, 235, 177, 86, 62, 48, 88, 116, 62, 2, 207, 153, 62, 71, 70, 99, 62, 16, 69, 109, 62, 152, 185, 248, 61, 231, 179, 225, 189, 185, 185, 38, 62, 13, 215, 69, 60, 4, 15, 69, 61, 4, 156, 31, 62, 190, 199, 36, 61, 50, 17, 11, 191, 195, 219, 12, 62, 237, 9, 150, 62, 115, 205, 73, 190, 96, 6, 52, 190, 219, 56, 133, 61, 159, 134, 2, 62, 169, 95, 247, 61, 45, 8, 1, 60, 186, 240, 54, 190, 3, 237, 184, 189, 150, 189, 81, 61, 186, 80, 236, 61, 19, 38, 15, 62, 22, 101, 220, 61, 136, 151, 51, 190, 44, 90, 134, 189, 72, 198, 154, 60, 1, 8, 55, 190, 60, 27, 40, 62, 6, 209, 32, 60, 224, 33, 163, 189, 69, 52, 249, 61, 189, 215, 149, 189, 121, 254, 192, 189, 59, 171, 143, 188, 200, 159, 73, 190, 229, 177, 143, 61, 92, 76, 4, 61, 142, 69, 31, 190, 56, 180, 164, 61, 86, 200, 192, 189, 12, 227, 162, 60, 44, 34, 250, 189, 114, 87, 171, 189, 20, 66, 8, 190, 76, 177, 202, 61, 71, 58, 130, 189, 125, 234, 239, 60, 69, 141, 208, 60, 61, 34, 198, 60, 249, 85, 41, 189, 75, 168, 66, 62, 216, 83, 177, 61, 140, 228, 175, 188, 245, 28, 10, 190, 202, 181, 158, 62, 88, 84, 132, 61, 166, 116, 171, 62, 163, 174, 65, 189, 67, 115, 247, 61, 11, 67, 64, 190, 140, 1, 137, 60, 41, 65, 50, 62, 197, 12, 106, 62, 156, 86, 231, 61, 145, 105, 18, 62, 167, 119, 7, 62, 64, 79, 164, 61, 181, 60, 84, 189, 30, 196, 184, 60, 109, 211, 124, 189, 251, 24, 58, 61, 86, 208, 20, 191, 181, 152, 29, 191, 112, 24, 25, 190, 99, 41, 40, 190, 138, 46, 158, 62, 161, 196, 153, 189, 181, 114, 218, 190, 188, 226, 180, 62, 151, 239, 66, 190, 92, 133, 138, 62, 125, 139, 149, 62, 62, 141, 27, 62, 18, 48, 185, 189, 85, 22, 172, 62, 18, 222, 20, 63, 77, 56, 138, 61, 164, 89, 25, 189, 66, 0, 136, 62, 151, 20, 163, 62, 99, 197, 3, 62, 45, 13, 135, 188, 105, 25, 231, 189, 203, 113, 176, 189, 58, 23, 137, 190, 148, 23, 245, 187, 76, 228, 143, 189, 55, 14, 112, 190, 184, 227, 86, 62, 12, 61, 163, 189, 107, 39, 134, 62, 88, 140, 228, 62, 65, 242, 60, 61, 153, 140, 112, 62, 3, 92, 157, 191, 85, 97, 101, 61, 60, 130, 185, 60, 83, 97, 187, 61, 87, 238, 225, 61, 199, 236, 154, 190, 243, 255, 139, 190, 0, 112, 169, 62, 4, 135, 171, 190, 149, 149, 254, 61, 54, 27, 155, 190, 34, 20, 116, 191, 56, 130, 157, 62, 4, 243, 83, 62, 29, 156, 24, 62, 218, 102, 121, 62, 154, 128, 151, 60, 41, 0, 90, 61, 23, 90, 144, 61, 133, 212, 121, 62, 136, 60, 117, 191, 108, 116, 156, 61, 38, 173, 127, 190, 176, 4, 125, 62, 211, 24, 168, 190, 108, 89, 225, 190, 191, 211, 162, 60, 156, 204, 22, 62, 214, 146, 162, 191, 221, 202, 210, 62, 23, 30, 128, 190, 163, 124, 23, 62, 163, 40, 97, 191, 105, 242, 221, 60, 204, 139, 152, 191, 193, 49, 132, 61, 208, 168, 76, 190, 236, 182, 207, 191, 111, 29, 82, 190, 241, 212, 66, 62, 112, 118, 158, 61, 35, 118, 123, 61, 68, 110, 21, 62, 140, 205, 160, 60, 190, 138, 50, 61, 134, 216, 50, 61, 1, 201, 253, 189, 132, 21, 172, 61, 51, 225, 251, 61, 179, 4, 41, 190, 19, 46, 8, 190, 226, 75, 252, 60, 57, 188, 147, 60, 233, 45, 212, 61, 227, 227, 7, 60, 220, 36, 202, 61, 164, 242, 250, 60, 5, 41, 163, 61, 136, 83, 153, 61, 140, 106, 144, 188, 182, 128, 62, 188, 10, 65, 192, 61, 122, 120, 43, 190, 179, 122, 157, 189, 22, 208, 251, 189, 117, 35, 216, 59, 147, 75, 32, 190, 148, 217, 23, 190, 140, 224, 2, 190, 101, 187, 189, 61, 196, 60, 173, 187, 205, 127, 231, 189, 137, 225, 153, 187, 240, 231, 246, 189, 179, 234, 37, 62, 8, 66, 254, 61, 88, 152, 209, 189, 46, 13, 6, 62, 44, 176, 39, 190, 176, 109, 163, 189, 79, 134, 137, 189, 91, 58, 173, 189, 203, 143, 223, 189, 177, 157, 223, 189, 180, 60, 32, 62, 109, 222, 0, 190, 163, 161, 233, 59, 87, 97, 48, 62, 183, 43, 147, 60, 220, 249, 220, 60, 239, 199, 179, 61, 170, 223, 196, 188, 97, 185, 79, 61, 112, 23, 30, 188, 163, 152, 63, 188, 103, 127, 189, 186, 179, 10, 27, 61, 108, 30, 205, 61, 70, 132, 112, 189, 240, 84, 19, 61, 12, 155, 85, 190, 87, 70, 9, 190, 114, 43, 244, 188, 213, 85, 19, 62, 234, 101, 28, 192, 105, 88, 145, 61, 97, 13, 61, 189, 107, 171, 49, 62, 206, 172, 160, 190, 82, 254, 242, 61, 213, 103, 115, 190, 136, 103, 8, 191, 173, 193, 179, 62, 131, 157, 232, 190, 175, 163, 143, 190, 56, 135, 64, 189, 188, 189, 132, 189, 222, 29, 157, 191, 163, 39, 165, 62, 105, 249, 132, 190, 201, 167, 163, 62, 119, 11, 106, 189, 46, 150, 105, 191, 41, 83, 175, 190, 253, 203, 235, 60, 22, 201, 107, 189, 164, 223, 252, 60, 187, 139, 92, 190, 74, 81, 131, 191, 244, 213, 65, 188, 71, 141, 24, 62, 129, 26, 199, 189, 134, 113, 19, 61, 26, 142, 15, 190, 156, 180, 125, 60, 232, 80, 171, 190, 96, 141, 135, 62, 57, 181, 69, 62, 0, 85, 160, 189, 193, 236, 91, 62, 67, 90, 92, 191, 102, 183, 41, 191, 235, 226, 42, 191, 71, 42, 39, 60, 37, 148, 172, 190, 33, 73, 106, 191, 6, 94, 164, 191, 78, 115, 132, 190, 32, 33, 181, 61, 81, 194, 171, 61, 89, 87, 60, 61, 186, 226, 22, 63, 95, 32, 201, 189, 91, 154, 7, 62, 69, 73, 1, 192, 252, 126, 213, 61, 169, 95, 235, 61, 5, 10, 187, 190, 75, 127, 77, 191, 132, 176, 71, 190, 214, 217, 148, 62, 202, 35, 5, 189, 144, 52, 163, 62, 17, 173, 78, 190, 96, 114, 130, 190, 203, 180, 133, 61, 15, 168, 111, 61, 248, 200, 177, 62, 120, 158, 102, 191, 151, 246, 191, 62, 11, 234, 152, 62, 221, 69, 9, 189, 174, 9, 27, 191, 103, 84, 129, 62, 4, 41, 180, 190, 126, 165, 132, 190, 119, 86, 70, 62, 199, 30, 23, 190, 23, 18, 148, 189, 25, 152, 169, 189, 230, 16, 6, 62, 64, 202, 65, 62, 154, 197, 172, 189, 48, 226, 114, 63, 73, 95, 154, 61, 246, 22, 215, 189, 91, 110, 157, 60, 207, 180, 140, 62, 48, 213, 55, 62, 95, 170, 236, 62, 104, 13, 21, 190, 55, 192, 238, 188, 216, 87, 16, 191, 5, 9, 28, 62, 55, 85, 153, 189, 150, 19, 136, 61, 211, 184, 20, 62, 28, 99, 43, 62, 213, 254, 199, 189, 31, 131, 128, 60, 95, 248, 139, 60, 39, 222, 238, 61, 117, 25, 193, 190, 199, 227, 4, 191, 210, 9, 68, 59, 21, 123, 139, 62, 206, 200, 176, 188, 226, 92, 9, 190, 142, 130, 9, 61, 227, 11, 149, 62, 42, 177, 46, 62, 245, 26, 129, 190, 14, 12, 105, 189, 148, 159, 36, 62, 68, 47, 108, 190, 44, 168, 138, 190, 0, 160, 127, 190, 131, 14, 141, 188, 199, 49, 147, 62, 21, 82, 171, 62, 194, 18, 69, 191, 164, 15, 9, 63, 54, 82, 137, 190, 219, 228, 199, 62, 156, 198, 87, 63, 76, 186, 56, 190, 181, 1, 254, 190, 2, 224, 40, 63, 159, 93, 24, 62, 33, 217, 171, 191, 55, 1, 8, 190, 55, 221, 177, 62, 239, 76, 206, 189, 205, 130, 53, 62, 25, 102, 141, 189, 251, 33, 166, 62, 180, 36, 23, 190, 77, 71, 11, 190, 52, 196, 106, 61, 32, 190, 218, 58, 208, 35, 31, 62, 82, 70, 172, 190, 127, 60, 230, 60, 45, 32, 149, 190, 131, 169, 238, 59, 7, 111, 71, 60, 204, 67, 3, 62, 113, 151, 172, 62, 220, 128, 143, 62, 71, 12, 78, 62, 159, 215, 143, 190, 46, 92, 168, 60, 94, 162, 87, 62, 231, 235, 52, 190, 247, 127, 81, 62, 34, 121, 26, 190, 2, 161, 42, 191, 253, 189, 46, 62, 14, 209, 235, 61, 237, 182, 128, 190, 232, 80, 23, 190, 157, 15, 75, 62, 239, 219, 23, 62, 83, 40, 11, 62, 181, 219, 102, 189, 253, 50, 226, 60, 107, 47, 73, 189, 102, 173, 82, 62, 138, 24, 179, 189, 215, 59, 152, 190, 189, 208, 87, 62, 221, 211, 230, 59, 198, 111, 254, 61, 165, 249, 42, 190, 241, 196, 245, 61, 142, 58, 172, 190, 81, 133, 187, 62, 197, 112, 174, 61, 169, 200, 93, 62, 93, 55, 136, 62, 234, 174, 69, 62, 226, 235, 216, 61, 40, 115, 41, 190, 68, 122, 54, 62, 104, 51, 165, 60, 223, 232, 240, 190, 64, 16, 5, 62, 147, 74, 173, 189, 33, 203, 248, 190, 89, 177, 230, 60, 29, 149, 101, 62, 190, 239, 125, 190, 156, 219, 136, 190, 56, 80, 33, 61, 17, 66, 185, 61, 177, 102, 183, 60, 116, 197, 153, 62, 105, 101, 144, 191, 173, 29, 13, 190, 65, 176, 117, 62, 115, 135, 205, 190, 232, 37, 181, 190, 220, 206, 81, 189, 68, 56, 1, 191, 242, 12, 234, 190, 9, 26, 14, 62, 202, 103, 233, 189, 85, 175, 191, 189, 23, 253, 193, 189, 73, 3, 33, 60, 198, 25, 132, 62, 84, 140, 252, 190, 54, 84, 24, 190, 150, 173, 26, 62, 154, 23, 164, 61, 89, 125, 198, 189, 21, 61, 54, 191, 13, 26, 1, 191, 74, 160, 16, 190, 24, 32, 132, 61, 66, 15, 101, 63, 20, 33, 36, 191, 41, 46, 227, 61, 249, 225, 215, 189, 252, 22, 111, 189, 165, 161, 45, 190, 227, 35, 145, 62, 96, 225, 129, 190, 238, 44, 136, 61, 40, 24, 52, 190, 29, 83, 24, 62, 27, 180, 7, 190, 119, 41, 155, 61, 187, 134, 10, 61, 186, 64, 249, 189, 12, 179, 72, 61, 13, 206, 62, 60, 40, 208, 24, 190, 141, 104, 72, 60, 49, 159, 28, 190, 130, 2, 29, 61, 157, 31, 152, 61, 73, 65, 84, 61, 220, 228, 182, 189, 201, 95, 34, 62, 61, 45, 39, 61, 187, 253, 67, 189, 134, 143, 234, 60, 189, 110, 221, 188, 156, 198, 139, 60, 58, 36, 115, 60, 167, 73, 7, 62, 19, 62, 44, 62, 207, 44, 44, 190, 243, 12, 42, 190, 66, 31, 18, 190, 141, 94, 158, 61, 180, 155, 35, 59, 11, 125, 9, 190, 29, 145, 227, 60, 72, 90, 19, 62, 43, 102, 193, 189, 89, 142, 94, 59, 82, 241, 129, 190, 173, 197, 26, 62, 252, 171, 23, 191, 112, 151, 81, 61, 88, 181, 93, 62, 144, 180, 161, 62, 91, 214, 231, 61, 230, 113, 132, 62, 6, 143, 251, 189, 238, 8, 46, 189, 243, 148, 135, 61, 7, 244, 130, 189, 22, 147, 36, 61, 202, 6, 66, 190, 19, 208, 78, 61, 198, 167, 195, 189, 54, 2, 185, 188, 131, 26, 185, 190, 148, 20, 73, 62, 131, 79, 5, 61, 50, 115, 17, 190, 121, 163, 239, 61, 207, 36, 0, 190, 48, 64, 141, 190, 68, 81, 86, 62, 236, 5, 39, 190, 114, 172, 154, 190, 103, 38, 176, 61, 213, 27, 196, 189, 254, 171, 70, 62, 30, 141, 159, 189, 18, 131, 22, 62, 23, 204, 245, 61, 165, 225, 143, 62, 132, 151, 83, 191, 190, 219, 30, 61, 168, 8, 100, 190, 251, 197, 54, 189, 161, 50, 108, 190, 165, 73, 112, 60, 42, 56, 218, 190, 157, 216, 41, 62, 29, 124, 230, 189, 156, 217, 160, 62, 135, 78, 28, 62, 217, 119, 190, 61, 142, 78, 231, 61, 201, 91, 228, 190, 157, 102, 67, 190, 197, 113, 253, 61, 199, 122, 39, 190, 7, 176, 117, 62, 111, 210, 110, 190, 246, 236, 150, 190, 142, 92, 132, 62, 184, 246, 94, 62, 208, 103, 44, 189, 152, 118, 145, 190, 130, 150, 242, 60, 190, 247, 150, 62, 29, 21, 103, 190, 219, 20, 138, 191, 16, 111, 174, 189, 107, 99, 236, 189, 96, 241, 183, 189, 139, 41, 56, 190, 160, 124, 224, 62, 183, 193, 73, 60, 172, 195, 231, 190, 116, 220, 255, 62, 215, 232, 25, 189, 132, 120, 160, 61, 233, 49, 175, 62, 12, 133, 134, 189, 148, 176, 194, 191, 164, 110, 15, 190, 121, 100, 200, 189, 69, 106, 39, 62, 167, 106, 122, 60, 209, 74, 170, 189, 227, 147, 66, 191, 65, 129, 37, 61, 148, 184, 133, 189, 99, 185, 89, 60, 183, 48, 102, 62, 191, 85, 132, 191, 203, 99, 69, 190, 182, 171, 9, 190, 55, 194, 128, 62, 160, 215, 200, 61, 84, 30, 136, 190, 136, 49, 147, 190, 238, 147, 193, 190, 242, 31, 228, 189, 42, 70, 12, 190, 173, 57, 204, 189, 75, 175, 130, 190, 190, 175, 86, 62, 40, 165, 6, 63, 242, 169, 80, 61, 116, 191, 3, 191, 170, 88, 181, 62, 96, 172, 51, 62, 70, 145, 171, 60, 238, 10, 155, 62, 199, 86, 79, 190, 213, 94, 224, 190, 79, 49, 101, 190, 226, 9, 224, 190, 231, 52, 41, 62, 189, 246, 86, 189, 65, 191, 215, 62, 108, 240, 178, 190, 42, 67, 231, 189, 1, 249, 177, 61, 250, 115, 167, 60, 123, 22, 136, 62, 144, 55, 34, 63, 3, 243, 75, 190, 185, 226, 168, 190, 172, 173, 141, 62, 198, 160, 16, 63, 143, 129, 74, 190, 189, 205, 133, 59, 3, 131, 71, 190, 66, 149, 128, 61, 37, 254, 0, 190, 141, 8, 103, 62, 188, 1, 136, 61, 159, 90, 107, 191, 13, 34, 198, 190, 251, 152, 114, 62, 29, 202, 73, 61, 81, 49, 132, 62, 102, 228, 132, 191, 18, 181, 98, 62, 100, 157, 227, 189, 28, 192, 11, 62, 229, 86, 230, 62, 160, 112, 204, 62, 124, 65, 156, 190, 82, 27, 206, 61, 143, 217, 215, 60, 140, 210, 165, 191, 140, 225, 141, 190, 18, 95, 48, 62, 58, 106, 129, 190, 184, 105, 132, 60, 5, 210, 181, 189, 123, 28, 212, 62, 252, 164, 172, 190, 111, 93, 37, 62, 161, 214, 0, 186, 249, 193, 23, 62, 102, 171, 188, 61, 75, 163, 147, 62, 8, 88, 51, 189, 180, 58, 36, 191, 11, 81, 241, 61, 243, 64, 173, 190, 129, 187, 77, 191, 223, 89, 157, 61, 190, 240, 209, 62, 96, 29, 121, 62, 251, 208, 17, 189, 10, 144, 188, 62, 20, 35, 54, 62, 61, 57, 192, 61, 1, 226, 238, 61, 100, 109, 187, 190, 136, 55, 39, 62, 15, 55, 162, 190, 113, 69, 210, 190, 81, 184, 160, 189, 253, 249, 99, 190, 104, 164, 109, 62, 190, 37, 123, 60, 186, 70, 54, 191, 167, 202, 192, 62, 162, 122, 68, 189, 45, 219, 185, 62, 69, 217, 51, 63, 144, 23, 234, 61, 208, 17, 164, 191, 80, 199, 223, 62, 99, 128, 43, 63, 144, 88, 177, 191, 166, 197, 163, 190, 248, 0, 227, 61, 43, 58, 126, 191, 82, 134, 47, 190, 89, 222, 43, 62, 208, 105, 93, 62, 12, 37, 203, 60, 244, 196, 26, 190, 2, 28, 154, 188, 71, 83, 226, 190, 72, 10, 161, 62, 73, 161, 228, 190, 99, 96, 0, 190, 245, 177, 116, 190, 98, 29, 131, 61, 95, 114, 187, 190, 220, 238, 175, 61, 42, 90, 205, 59, 192, 145, 173, 61, 209, 184, 3, 59, 17, 201, 22, 191, 117, 40, 119, 190, 108, 235, 166, 188, 135, 130, 161, 189, 97, 165, 9, 62, 136, 94, 250, 190, 147, 249, 50, 191, 165, 244, 192, 61, 252, 98, 238, 61, 50, 60, 253, 61, 12, 63, 30, 190, 236, 236, 99, 190, 109, 36, 161, 189, 153, 62, 104, 189, 248, 44, 73, 62, 100, 26, 77, 191, 2, 206, 112, 190, 32, 53, 221, 61, 226, 44, 129, 189, 120, 141, 147, 191, 140, 247, 111, 189, 96, 219, 43, 61, 73, 252, 119, 62, 81, 88, 175, 190, 44, 24, 197, 188, 206, 103, 35, 190, 233, 234, 80, 62, 33, 217, 150, 62, 121, 17, 139, 62, 36, 249, 158, 62, 61, 228, 10, 62, 104, 166, 159, 62, 162, 220, 185, 189, 207, 246, 123, 190, 216, 190, 65, 187, 111, 103, 109, 190, 218, 47, 217, 189, 217, 114, 176, 190, 14, 176, 168, 190, 225, 54, 163, 190, 185, 210, 22, 189, 254, 138, 142, 61, 32, 125, 42, 190, 169, 191, 186, 190, 173, 182, 85, 62, 225, 175, 138, 191, 169, 16, 154, 188, 140, 46, 7, 191, 237, 136, 98, 191, 252, 188, 77, 189, 95, 127, 0, 191, 215, 39, 155, 188, 55, 175, 8, 191, 241, 28, 229, 61, 152, 210, 53, 190, 119, 50, 218, 189, 33, 87, 7, 62, 110, 206, 136, 189, 170, 16, 148, 62, 4, 205, 62, 62, 36, 37, 48, 61, 115, 217, 1, 191, 180, 188, 157, 61, 105, 44, 112, 62, 185, 184, 94, 62, 150, 133, 165, 60, 85, 227, 59, 62, 110, 239, 130, 191, 13, 85, 58, 190, 140, 102, 118, 190, 228, 247, 70, 62, 216, 210, 67, 190, 212, 47, 165, 62, 181, 182, 19, 62, 122, 3, 58, 190, 64, 84, 227, 61, 198, 13, 218, 189, 22, 196, 115, 190, 182, 213, 91, 189, 245, 68, 27, 190, 244, 39, 86, 61, 140, 101, 62, 190, 222, 217, 216, 189, 16, 31, 237, 61, 228, 92, 216, 188, 154, 208, 112, 61, 28, 49, 234, 60, 23, 161, 83, 187, 151, 228, 48, 190, 75, 24, 11, 190, 12, 20, 31, 190, 131, 220, 148, 188, 58, 60, 63, 189, 126, 227, 30, 190, 70, 86, 123, 189, 163, 76, 244, 187, 55, 105, 166, 61, 22, 10, 189, 61, 19, 119, 185, 60, 246, 87, 2, 62, 86, 59, 52, 188, 21, 137, 191, 60, 55, 21, 39, 62, 39, 222, 70, 190, 191, 222, 21, 62, 232, 158, 221, 188, 185, 58, 15, 190, 185, 56, 147, 61, 153, 54, 203, 189, 168, 39, 172, 59, 234, 245, 25, 62, 77, 223, 61, 191, 230, 124, 137, 190, 206, 130, 247, 188, 155, 40, 16, 189, 52, 133, 231, 191, 192, 89, 5, 189, 31, 88, 53, 190, 38, 159, 170, 189, 121, 41, 124, 190, 38, 153, 243, 61, 102, 89, 185, 61, 230, 217, 69, 61, 236, 217, 187, 62, 138, 70, 141, 62, 0, 132, 12, 63, 199, 122, 30, 62, 102, 46, 147, 62, 79, 61, 173, 190, 214, 116, 125, 190, 178, 3, 25, 58, 223, 218, 206, 190, 246, 72, 36, 62, 3, 163, 11, 191, 57, 241, 144, 62, 83, 43, 78, 191, 168, 157, 178, 61, 210, 185, 6, 61, 240, 213, 108, 190, 152, 74, 250, 61, 19, 227, 201, 62, 79, 255, 117, 191, 225, 229, 133, 191, 117, 64, 175, 188, 67, 240, 12, 61, 17, 110, 127, 190, 185, 244, 26, 63, 34, 72, 230, 62, 172, 160, 189, 62, 43, 22, 168, 190, 14, 178, 13, 63, 173, 184, 134, 62, 60, 254, 120, 61, 208, 90, 184, 62, 5, 242, 162, 190, 171, 135, 142, 191, 155, 124, 90, 190, 65, 48, 213, 190, 155, 142, 41, 62, 242, 25, 30, 62, 226, 16, 5, 62, 115, 174, 177, 189, 0, 130, 99, 190, 157, 113, 244, 61, 57, 167, 11, 189, 37, 139, 210, 62, 107, 16, 54, 191, 220, 68, 138, 186, 14, 148, 81, 190, 192, 234, 109, 62, 219, 140, 191, 62, 79, 158, 7, 190, 59, 216, 178, 190, 138, 78, 16, 190, 4, 62, 144, 62, 226, 173, 151, 189, 36, 182, 76, 62, 97, 10, 168, 62, 37, 61, 245, 188, 238, 203, 148, 191, 253, 158, 238, 61, 82, 81, 121, 189, 26, 65, 21, 190, 204, 244, 100, 189, 203, 125, 19, 62, 24, 244, 146, 190, 220, 11, 175, 62, 202, 125, 193, 61, 211, 7, 215, 61, 180, 73, 241, 62, 91, 88, 210, 61, 78, 83, 8, 61, 107, 105, 134, 190, 54, 167, 175, 61, 87, 107, 201, 60, 248, 167, 157, 190, 241, 234, 55, 189, 10, 201, 144, 190, 227, 137, 148, 190, 16, 222, 53, 190, 83, 123, 16, 62, 197, 164, 75, 190, 122, 37, 179, 190, 111, 139, 149, 62, 233, 37, 107, 62, 83, 165, 20, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 25, 64, 62, 232, 106, 40, 189, 40, 181, 10, 190, 20, 75, 207, 61, 143, 77, 135, 61, 73, 16, 45, 190, 183, 150, 173, 60, 148, 39, 241, 60, 108, 149, 165, 62, 123, 195, 50, 190, 61, 5, 74, 190, 203, 160, 156, 62, 188, 140, 62, 62, 160, 157, 169, 187, 135, 22, 24, 61, 127, 203, 57, 62, 249, 251, 186, 61, 34, 76, 53, 190, 137, 66, 206, 189, 37, 248, 78, 190, 94, 81, 13, 190, 136, 47, 132, 60, 111, 20, 39, 190, 25, 139, 94, 190, 35, 8, 170, 62, 42, 126, 106, 62, 3, 126, 73, 190, 157, 65, 109, 190, 172, 23, 28, 190, 149, 90, 15, 190, 115, 246, 4, 190, 144, 104, 32, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 49, 84, 191, 0, 170, 30, 188, 52, 244, 232, 189, 246, 155, 46, 63, 26, 36, 232, 61, 80, 47, 10, 62, 146, 161, 48, 62, 237, 121, 206, 62, 177, 224, 117, 191, 193, 118, 34, 190, 145, 93, 41, 188, 180, 139, 80, 190, 119, 211, 147, 63, 157, 176, 107, 62, 161, 22, 77, 191, 133, 233, 183, 61, 103, 164, 232, 61, 167, 34, 156, 191, 188, 122, 131, 60, 213, 42, 94, 62, 62, 70, 220, 62, 208, 154, 37, 191, 173, 85, 15, 191, 71, 186, 11, 63, 225, 219, 19, 191, 204, 230, 30, 186, 114, 141, 20, 63, 144, 125, 143, 190, 83, 188, 27, 58, 6, 140, 172, 63, 184, 177, 57, 191, 216, 32, 224, 62, 96, 120, 153, 61, 175, 177, 130, 61, 98, 129, 142, 188, 2, 136, 71, 62, 222, 111, 120, 190, 240, 27, 28, 62, 160, 114, 130, 190, 138, 229, 134, 62, 139, 94, 221, 188, 165, 141, 166, 189, 114, 199, 96, 188, 233, 187, 39, 191, 192, 9, 134, 62, 45, 26, 24, 59, 193, 28, 3, 190, 200, 70, 44, 190, 92, 142, 103, 190, 216, 125, 187, 189, 100, 151, 223, 189, 93, 56, 55, 62, 116, 104, 63, 62, 140, 179, 51, 190, 253, 9, 139, 62, 250, 143, 72, 188, 188, 129, 219, 189, 25, 106, 253, 190, 175, 69, 105, 61, 251, 169, 0, 62, 64, 209, 98, 61, 144, 200, 134, 62, 14, 35, 215, 61, 231, 88, 139, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 137, 78, 190, 83, 23, 148, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {183, 44, 217, 63, 23, 182, 170, 63, 249, 137, 76, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {62, 67, 116, 192, 57, 223, 131, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0019/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}