// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 138, 163, 188, 81, 247, 28, 63, 43, 198, 28, 62, 146, 66, 124, 62, 16, 39, 18, 191, 39, 99, 243, 62, 153, 14, 92, 62, 174, 87, 219, 62, 106, 200, 205, 190, 232, 86, 49, 190, 244, 92, 65, 191, 160, 136, 141, 189, 92, 98, 219, 62, 72, 121, 227, 190, 58, 215, 18, 190, 23, 224, 75, 190, 12, 148, 136, 63, 130, 184, 44, 191, 111, 154, 42, 191, 113, 90, 156, 62, 92, 210, 207, 190, 6, 153, 60, 62, 27, 159, 235, 188, 144, 69, 121, 190, 129, 88, 50, 62, 133, 180, 51, 63, 92, 100, 30, 191, 90, 38, 227, 57, 44, 99, 136, 191, 222, 144, 199, 62, 211, 203, 150, 190, 40, 148, 12, 63, 250, 124, 33, 190, 138, 152, 68, 63, 170, 24, 15, 191, 122, 202, 7, 191, 246, 118, 41, 189, 27, 149, 115, 63, 212, 190, 145, 190, 232, 235, 254, 190, 242, 250, 5, 191, 192, 172, 6, 63, 220, 188, 84, 190, 41, 250, 79, 191, 203, 90, 149, 62, 165, 91, 170, 62, 31, 72, 107, 191, 103, 236, 35, 61, 38, 129, 188, 62, 148, 238, 244, 190, 129, 45, 19, 63, 221, 150, 69, 191, 143, 40, 60, 62, 250, 193, 146, 59, 38, 12, 204, 62, 166, 254, 130, 190, 94, 66, 29, 191, 56, 240, 147, 62, 3, 34, 111, 190, 250, 198, 2, 191, 131, 86, 171, 62, 117, 113, 230, 62, 221, 48, 157, 190, 220, 113, 12, 63, 133, 192, 99, 63, 224, 73, 18, 63, 77, 73, 78, 190, 0, 26, 62, 191, 178, 19, 59, 190, 97, 151, 32, 62, 202, 93, 6, 189, 97, 15, 234, 190, 160, 188, 85, 63, 73, 215, 56, 62, 86, 249, 197, 189, 218, 39, 252, 189, 205, 40, 166, 190, 232, 106, 43, 63, 1, 25, 177, 190, 100, 52, 53, 191, 75, 5, 155, 188, 62, 89, 14, 190, 174, 98, 128, 63, 160, 43, 107, 191, 164, 157, 228, 62, 122, 230, 17, 62, 94, 241, 11, 63, 2, 84, 231, 190, 102, 1, 132, 63, 13, 234, 51, 191, 103, 129, 2, 191, 185, 189, 6, 191, 174, 77, 182, 61, 198, 141, 93, 189, 136, 143, 41, 191, 29, 60, 70, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {207, 9, 22, 191, 74, 87, 125, 62, 234, 47, 35, 62, 253, 197, 236, 62, 168, 142, 97, 62, 10, 158, 93, 188, 161, 113, 26, 190, 125, 198, 19, 188, 29, 145, 203, 62, 18, 228, 198, 189, 198, 186, 169, 61, 139, 208, 95, 62, 93, 96, 241, 62, 210, 14, 221, 61, 207, 112, 133, 190, 68, 212, 45, 63, 29, 139, 201, 62, 193, 148, 246, 190, 162, 102, 150, 190, 79, 195, 249, 189, 155, 105, 216, 62, 254, 147, 189, 189, 48, 35, 26, 63, 85, 6, 189, 189, 40, 143, 23, 190, 132, 7, 239, 190, 213, 17, 102, 62, 206, 92, 100, 62, 147, 120, 35, 189, 41, 247, 124, 190, 211, 217, 26, 62, 162, 1, 97, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 168, 241, 189, 171, 215, 221, 189, 193, 80, 33, 62, 72, 0, 187, 189, 74, 53, 165, 61, 184, 177, 92, 61, 69, 198, 241, 61, 108, 130, 14, 188, 215, 91, 47, 190, 107, 155, 132, 61, 249, 17, 155, 189, 227, 135, 24, 190, 103, 58, 194, 61, 33, 106, 198, 61, 90, 10, 54, 190, 167, 79, 80, 189, 51, 136, 176, 61, 21, 27, 29, 188, 241, 124, 111, 61, 4, 165, 35, 62, 229, 243, 3, 189, 154, 218, 50, 190, 19, 32, 134, 189, 187, 55, 43, 62, 37, 171, 44, 62, 31, 104, 178, 189, 94, 219, 186, 61, 1, 99, 39, 190, 125, 230, 223, 61, 230, 5, 33, 190, 179, 171, 175, 189, 162, 138, 31, 188, 66, 179, 54, 62, 185, 119, 124, 62, 127, 254, 140, 61, 79, 128, 5, 62, 13, 36, 214, 61, 193, 126, 218, 189, 120, 209, 241, 189, 140, 124, 136, 62, 29, 51, 217, 189, 185, 41, 239, 190, 64, 104, 160, 187, 110, 216, 131, 61, 130, 179, 65, 61, 179, 150, 226, 61, 134, 33, 113, 190, 71, 72, 133, 62, 9, 77, 79, 62, 133, 244, 246, 189, 66, 28, 0, 190, 138, 123, 65, 62, 129, 47, 204, 60, 26, 32, 30, 189, 142, 27, 75, 62, 239, 69, 3, 61, 188, 125, 190, 189, 90, 205, 153, 189, 56, 97, 39, 62, 98, 88, 163, 57, 35, 163, 162, 61, 175, 76, 173, 190, 187, 167, 227, 189, 125, 210, 20, 62, 93, 129, 124, 189, 127, 226, 104, 62, 37, 202, 29, 190, 79, 194, 62, 62, 98, 85, 151, 61, 28, 67, 179, 60, 77, 221, 55, 62, 207, 236, 65, 62, 41, 187, 155, 61, 219, 56, 97, 190, 197, 72, 98, 61, 174, 122, 106, 189, 228, 46, 95, 62, 184, 247, 41, 62, 201, 153, 143, 189, 80, 97, 140, 62, 86, 89, 41, 62, 4, 178, 211, 61, 239, 142, 1, 190, 204, 146, 186, 60, 146, 146, 102, 62, 111, 60, 24, 190, 153, 84, 51, 189, 125, 191, 195, 60, 213, 228, 140, 61, 137, 243, 176, 189, 125, 245, 100, 62, 185, 2, 44, 190, 57, 115, 124, 189, 190, 154, 223, 61, 127, 95, 136, 61, 49, 5, 135, 61, 156, 204, 79, 62, 191, 213, 198, 191, 244, 194, 14, 191, 220, 22, 16, 62, 236, 113, 138, 190, 222, 129, 147, 57, 247, 79, 157, 62, 5, 177, 223, 189, 254, 47, 55, 62, 180, 231, 16, 189, 40, 138, 226, 62, 135, 150, 7, 190, 146, 138, 148, 62, 34, 75, 225, 187, 133, 98, 85, 190, 152, 218, 50, 189, 165, 51, 164, 191, 105, 49, 51, 62, 163, 90, 124, 190, 48, 14, 168, 190, 202, 103, 28, 62, 150, 226, 241, 189, 28, 106, 53, 189, 54, 188, 10, 191, 25, 211, 137, 190, 141, 198, 155, 190, 111, 201, 193, 60, 202, 66, 134, 62, 166, 34, 217, 61, 14, 216, 173, 62, 233, 189, 68, 62, 75, 229, 146, 191, 245, 76, 24, 190, 140, 178, 190, 62, 132, 43, 178, 59, 177, 176, 121, 187, 118, 42, 133, 61, 129, 35, 195, 189, 128, 196, 107, 190, 199, 180, 126, 61, 112, 115, 199, 61, 134, 161, 145, 188, 242, 108, 33, 190, 91, 119, 251, 189, 209, 158, 56, 188, 240, 220, 226, 61, 16, 148, 114, 62, 19, 130, 53, 62, 101, 249, 251, 61, 80, 94, 187, 190, 143, 227, 119, 61, 41, 126, 213, 188, 4, 159, 23, 188, 35, 129, 68, 61, 129, 56, 186, 189, 108, 169, 179, 189, 23, 221, 6, 188, 12, 44, 96, 62, 81, 226, 221, 61, 118, 10, 131, 190, 162, 204, 82, 62, 21, 196, 205, 188, 177, 125, 16, 62, 252, 208, 62, 62, 148, 186, 160, 190, 112, 120, 206, 62, 86, 181, 158, 62, 217, 125, 32, 61, 13, 70, 145, 189, 163, 157, 18, 191, 255, 176, 188, 189, 167, 148, 0, 62, 231, 120, 108, 190, 118, 78, 29, 191, 36, 150, 49, 190, 163, 38, 88, 62, 94, 15, 202, 187, 111, 132, 80, 62, 34, 153, 158, 190, 131, 50, 99, 189, 158, 118, 166, 62, 70, 52, 252, 62, 150, 200, 124, 62, 3, 220, 152, 62, 102, 250, 206, 190, 219, 210, 186, 190, 135, 5, 192, 61, 68, 90, 35, 62, 230, 207, 7, 61, 72, 207, 92, 190, 100, 252, 19, 189, 193, 143, 56, 190, 224, 56, 192, 190, 154, 155, 136, 191, 13, 188, 140, 62, 55, 252, 37, 62, 247, 170, 252, 187, 95, 89, 79, 62, 135, 75, 211, 62, 2, 160, 189, 61, 199, 31, 181, 188, 109, 206, 18, 191, 103, 165, 162, 189, 247, 92, 150, 60, 146, 114, 7, 190, 225, 153, 194, 190, 222, 163, 69, 190, 44, 105, 202, 188, 41, 35, 110, 190, 110, 101, 188, 62, 69, 239, 143, 190, 204, 167, 14, 62, 119, 229, 228, 61, 103, 175, 144, 62, 188, 68, 203, 62, 70, 41, 173, 62, 110, 22, 233, 190, 209, 4, 196, 190, 189, 150, 207, 61, 115, 54, 39, 62, 221, 247, 160, 62, 229, 186, 180, 190, 66, 72, 241, 59, 248, 226, 99, 190, 88, 149, 133, 190, 138, 205, 64, 191, 117, 102, 13, 62, 185, 71, 82, 62, 103, 28, 228, 60, 70, 240, 161, 190, 231, 124, 156, 189, 226, 170, 42, 190, 224, 30, 36, 61, 100, 98, 222, 61, 25, 11, 190, 61, 211, 18, 243, 189, 96, 211, 23, 62, 16, 107, 239, 189, 105, 144, 176, 62, 55, 238, 114, 189, 92, 246, 82, 62, 222, 190, 233, 190, 6, 186, 167, 189, 37, 116, 132, 190, 123, 143, 201, 190, 202, 137, 210, 188, 100, 138, 250, 188, 255, 255, 202, 186, 143, 124, 43, 61, 72, 126, 243, 189, 172, 77, 62, 61, 176, 130, 108, 61, 21, 108, 132, 190, 122, 205, 122, 60, 42, 241, 145, 189, 24, 119, 102, 62, 10, 31, 155, 189, 217, 101, 180, 62, 60, 34, 196, 189, 188, 227, 208, 189, 234, 10, 126, 190, 192, 238, 254, 189, 106, 226, 196, 190, 80, 122, 100, 189, 66, 254, 138, 61, 23, 144, 151, 61, 114, 153, 178, 61, 182, 32, 149, 189, 172, 24, 140, 62, 130, 187, 190, 60, 125, 240, 241, 61, 184, 149, 29, 190, 15, 199, 137, 62, 238, 99, 30, 60, 103, 248, 185, 187, 234, 120, 67, 190, 234, 84, 248, 189, 135, 97, 51, 62, 88, 129, 15, 190, 173, 160, 131, 190, 203, 182, 184, 62, 8, 58, 189, 62, 247, 225, 5, 190, 60, 59, 44, 190, 25, 84, 136, 61, 59, 141, 55, 62, 174, 189, 87, 190, 97, 222, 165, 62, 245, 157, 232, 61, 125, 91, 203, 62, 184, 246, 39, 61, 61, 104, 204, 189, 237, 42, 94, 62, 160, 182, 5, 190, 222, 94, 187, 189, 67, 86, 76, 189, 85, 182, 189, 61, 129, 171, 109, 189, 230, 254, 164, 189, 158, 150, 204, 61, 196, 120, 102, 186, 115, 136, 96, 189, 85, 15, 37, 190, 35, 48, 222, 61, 71, 41, 134, 61, 42, 223, 97, 189, 214, 151, 8, 61, 139, 86, 147, 190, 194, 68, 248, 58, 12, 160, 36, 62, 148, 253, 11, 189, 217, 21, 100, 61, 180, 254, 177, 61, 178, 137, 133, 62, 209, 2, 34, 190, 159, 82, 217, 189, 2, 122, 122, 62, 204, 44, 89, 62, 88, 228, 0, 190, 226, 102, 218, 60, 245, 234, 69, 62, 62, 10, 114, 187, 39, 242, 216, 189, 253, 199, 217, 59, 224, 207, 59, 190, 30, 29, 143, 191, 227, 195, 235, 190, 202, 219, 18, 189, 217, 123, 214, 190, 87, 207, 149, 60, 13, 135, 147, 62, 26, 164, 191, 190, 214, 130, 24, 62, 137, 147, 140, 190, 183, 212, 155, 62, 85, 132, 61, 190, 149, 85, 184, 62, 158, 252, 178, 189, 138, 35, 172, 187, 18, 16, 37, 187, 74, 140, 132, 191, 209, 179, 172, 62, 10, 159, 223, 190, 97, 18, 148, 190, 96, 39, 184, 61, 94, 227, 106, 61, 160, 106, 65, 61, 127, 83, 97, 190, 218, 200, 50, 188, 165, 145, 178, 61, 3, 66, 20, 190, 212, 45, 160, 62, 248, 213, 236, 61, 196, 166, 141, 62, 231, 192, 41, 189, 173, 215, 51, 191, 110, 50, 170, 62, 177, 87, 80, 188, 182, 129, 209, 61, 4, 214, 244, 189, 80, 116, 231, 61, 243, 201, 77, 190, 21, 87, 14, 189, 238, 26, 28, 62, 105, 244, 178, 189, 130, 0, 88, 60, 61, 72, 244, 189, 106, 216, 209, 189, 159, 65, 185, 190, 113, 166, 140, 61, 252, 43, 135, 61, 2, 110, 99, 190, 237, 169, 241, 188, 186, 165, 133, 60, 170, 225, 207, 61, 244, 5, 27, 190, 152, 37, 156, 189, 4, 219, 33, 62, 214, 53, 146, 61, 136, 25, 64, 61, 175, 134, 104, 189, 199, 177, 50, 61, 223, 153, 65, 190, 199, 139, 83, 190, 139, 16, 10, 62, 26, 228, 64, 189, 214, 199, 67, 190, 61, 122, 238, 189, 20, 16, 203, 62, 142, 209, 46, 190, 165, 233, 118, 61, 20, 109, 192, 189, 131, 36, 241, 188, 252, 55, 137, 62, 43, 214, 254, 61, 24, 31, 189, 60, 179, 137, 235, 61, 100, 37, 12, 62, 70, 198, 52, 62, 201, 180, 177, 61, 166, 244, 163, 62, 185, 40, 145, 190, 31, 236, 149, 189, 114, 79, 132, 190, 26, 217, 177, 61, 202, 163, 209, 189, 82, 162, 87, 189, 52, 20, 213, 60, 183, 141, 187, 60, 64, 240, 115, 62, 173, 110, 43, 62, 49, 199, 94, 62, 110, 91, 182, 190, 19, 110, 194, 61, 174, 181, 163, 61, 159, 240, 198, 62, 133, 70, 68, 62, 254, 123, 187, 62, 125, 214, 124, 190, 27, 183, 173, 189, 38, 194, 82, 190, 199, 38, 202, 188, 46, 121, 46, 62, 219, 167, 36, 190, 235, 22, 113, 61, 139, 80, 222, 61, 136, 107, 123, 62, 19, 183, 180, 188, 94, 43, 54, 188, 158, 191, 14, 190, 161, 66, 38, 62, 50, 98, 99, 190, 221, 128, 145, 58, 84, 97, 136, 189, 36, 33, 53, 190, 96, 72, 114, 190, 244, 198, 233, 189, 130, 108, 253, 61, 244, 78, 65, 190, 25, 85, 1, 189, 251, 27, 27, 62, 13, 130, 134, 189, 171, 76, 155, 189, 162, 121, 46, 190, 95, 145, 27, 188, 217, 53, 49, 61, 216, 52, 23, 60, 56, 93, 59, 62, 115, 16, 169, 189, 232, 103, 128, 62, 176, 216, 115, 189, 50, 118, 158, 189, 238, 5, 143, 61, 79, 74, 178, 59, 130, 204, 205, 189, 155, 116, 159, 189, 51, 198, 5, 190, 251, 221, 52, 190, 101, 80, 17, 190, 203, 123, 236, 189, 242, 203, 136, 190, 149, 149, 163, 61, 231, 209, 91, 62, 247, 121, 76, 189, 183, 90, 250, 61, 1, 70, 141, 61, 133, 26, 162, 189, 100, 248, 131, 190, 134, 188, 180, 61, 54, 92, 90, 190, 85, 152, 134, 188, 58, 15, 68, 188, 234, 199, 129, 190, 151, 200, 96, 62, 59, 133, 2, 62, 156, 204, 13, 61, 5, 223, 181, 61, 154, 50, 8, 190, 242, 14, 79, 190, 30, 35, 145, 189, 28, 22, 4, 61, 4, 216, 22, 62, 173, 62, 170, 189, 89, 236, 12, 190, 14, 201, 2, 61, 247, 76, 139, 191, 61, 253, 60, 190, 50, 231, 8, 186, 26, 38, 151, 188, 26, 38, 227, 61, 122, 77, 128, 60, 45, 62, 110, 62, 139, 164, 171, 62, 135, 60, 176, 190, 111, 56, 61, 62, 182, 9, 46, 62, 255, 45, 145, 62, 19, 193, 41, 190, 168, 203, 175, 187, 149, 203, 214, 188, 106, 97, 224, 190, 227, 176, 145, 62, 164, 108, 64, 190, 98, 38, 190, 189, 161, 20, 132, 62, 69, 66, 241, 187, 58, 195, 229, 61, 232, 27, 92, 190, 220, 177, 22, 60, 156, 148, 130, 187, 202, 176, 148, 189, 196, 145, 144, 62, 129, 116, 43, 62, 227, 112, 185, 62, 105, 209, 255, 61, 54, 188, 91, 191, 154, 168, 195, 190, 209, 250, 46, 190, 220, 38, 111, 190, 148, 20, 18, 190, 157, 112, 116, 189, 199, 97, 188, 61, 176, 185, 118, 60, 173, 29, 41, 190, 186, 229, 62, 62, 83, 121, 248, 188, 22, 99, 139, 62, 126, 216, 212, 188, 164, 131, 60, 62, 209, 52, 17, 60, 73, 216, 21, 190, 43, 77, 211, 189, 247, 191, 16, 189, 203, 246, 150, 62, 11, 179, 249, 189, 50, 209, 166, 189, 78, 1, 47, 62, 64, 63, 131, 62, 228, 149, 4, 190, 79, 88, 139, 190, 17, 143, 112, 62, 228, 14, 193, 188, 197, 235, 47, 188, 102, 199, 168, 61, 64, 33, 135, 62, 76, 220, 178, 62, 125, 136, 81, 189, 237, 237, 134, 60, 183, 47, 231, 61, 211, 147, 27, 62, 15, 79, 143, 62, 33, 145, 121, 61, 232, 194, 159, 62, 204, 220, 37, 189, 34, 61, 161, 190, 178, 128, 219, 59, 109, 250, 71, 189, 130, 45, 162, 61, 54, 60, 113, 190, 76, 102, 43, 61, 164, 230, 188, 189, 198, 237, 60, 190, 22, 108, 123, 61, 127, 122, 150, 62, 39, 173, 50, 62, 228, 32, 150, 190, 161, 79, 164, 61, 250, 208, 241, 189, 141, 116, 244, 62, 16, 195, 194, 61, 217, 77, 24, 61, 75, 224, 40, 61, 63, 79, 208, 61, 100, 84, 144, 190, 52, 185, 165, 188, 38, 43, 162, 189, 70, 193, 14, 62, 186, 238, 164, 190, 163, 25, 131, 60, 233, 206, 105, 188, 48, 197, 159, 190, 1, 182, 161, 62, 28, 59, 120, 61, 218, 106, 16, 62, 252, 168, 35, 60, 224, 149, 6, 191, 217, 134, 74, 188, 111, 222, 81, 62, 182, 44, 172, 190, 45, 4, 195, 190, 101, 111, 215, 189, 211, 128, 93, 62, 19, 178, 168, 189, 73, 61, 87, 60, 222, 247, 153, 190, 28, 200, 11, 188, 21, 233, 124, 62, 135, 85, 90, 62, 2, 184, 31, 62, 36, 86, 122, 62, 93, 52, 245, 190, 46, 129, 205, 190, 221, 106, 38, 62, 2, 127, 85, 62, 176, 246, 33, 62, 238, 230, 223, 189, 85, 129, 34, 62, 71, 239, 171, 190, 225, 2, 49, 189, 137, 132, 120, 191, 177, 165, 240, 61, 107, 91, 170, 61, 54, 164, 37, 190, 74, 246, 216, 62, 73, 115, 81, 62, 122, 239, 255, 61, 46, 47, 255, 61, 127, 2, 192, 190, 73, 24, 157, 61, 151, 109, 16, 62, 19, 15, 142, 187, 86, 165, 236, 190, 86, 134, 146, 190, 42, 34, 163, 62, 56, 89, 85, 190, 24, 178, 25, 62, 222, 78, 183, 190, 164, 253, 91, 61, 26, 224, 35, 62, 171, 106, 192, 61, 110, 204, 166, 62, 97, 196, 73, 62, 146, 157, 162, 190, 141, 124, 102, 190, 236, 54, 38, 62, 164, 126, 67, 62, 0, 24, 22, 62, 125, 232, 178, 190, 212, 47, 186, 187, 144, 154, 150, 190, 59, 202, 64, 190, 33, 140, 31, 191, 199, 44, 76, 62, 162, 165, 241, 61, 117, 50, 7, 62, 22, 161, 202, 189, 132, 157, 154, 61, 124, 119, 100, 189, 253, 44, 161, 189, 231, 49, 159, 189, 215, 102, 117, 58, 64, 59, 250, 189, 46, 222, 11, 190, 181, 224, 54, 189, 243, 124, 244, 61, 16, 65, 137, 189, 81, 239, 79, 188, 80, 74, 170, 61, 93, 76, 171, 189, 159, 189, 25, 61, 25, 243, 14, 61, 88, 113, 1, 62, 161, 238, 5, 190, 26, 209, 30, 62, 203, 127, 153, 189, 75, 170, 191, 61, 178, 204, 34, 190, 82, 212, 239, 189, 122, 175, 124, 61, 154, 102, 43, 190, 237, 48, 53, 190, 174, 56, 240, 188, 127, 253, 218, 189, 194, 70, 27, 187, 215, 58, 242, 61, 166, 183, 85, 189, 77, 253, 51, 190, 185, 95, 48, 62, 102, 207, 111, 190, 10, 150, 59, 62, 71, 59, 128, 61, 176, 221, 170, 190, 79, 239, 251, 190, 198, 190, 139, 189, 28, 163, 189, 190, 33, 46, 30, 61, 156, 187, 147, 190, 99, 207, 203, 61, 103, 58, 22, 191, 98, 245, 10, 189, 57, 107, 54, 62, 87, 15, 170, 62, 104, 68, 183, 61, 102, 247, 177, 190, 211, 150, 97, 189, 42, 254, 177, 189, 180, 63, 48, 190, 36, 80, 175, 189, 245, 170, 228, 61, 56, 83, 130, 188, 108, 246, 161, 190, 242, 233, 152, 61, 28, 144, 132, 62, 108, 100, 161, 190, 170, 253, 193, 189, 36, 146, 184, 189, 77, 247, 4, 62, 27, 25, 224, 61, 114, 15, 209, 189, 219, 200, 126, 190, 13, 193, 248, 189, 76, 69, 202, 60, 246, 119, 195, 60, 197, 22, 229, 61, 236, 92, 63, 61, 234, 182, 102, 60, 53, 59, 134, 62, 151, 61, 194, 186, 201, 58, 20, 62, 210, 36, 42, 189, 243, 214, 74, 62, 21, 104, 44, 188, 41, 206, 180, 61, 47, 56, 25, 190, 2, 37, 173, 60, 176, 84, 4, 190, 240, 160, 22, 190, 41, 142, 102, 190, 250, 55, 85, 62, 120, 20, 164, 62, 187, 97, 177, 188, 233, 30, 208, 190, 197, 122, 172, 62, 126, 37, 92, 61, 110, 232, 136, 190, 48, 124, 78, 62, 24, 199, 234, 60, 62, 187, 169, 62, 186, 1, 235, 188, 0, 150, 15, 190, 235, 250, 134, 62, 181, 125, 252, 62, 174, 99, 137, 59, 93, 26, 219, 61, 177, 139, 77, 62, 0, 44, 61, 191, 180, 23, 54, 60, 143, 15, 9, 187, 185, 220, 217, 190, 60, 153, 45, 190, 57, 147, 13, 62, 231, 211, 101, 62, 241, 174, 38, 190, 97, 123, 155, 62, 100, 2, 1, 189, 164, 69, 77, 62, 6, 206, 182, 62, 93, 1, 47, 62, 229, 97, 201, 189, 252, 187, 30, 62, 144, 143, 145, 190, 3, 101, 29, 190, 101, 229, 139, 60, 244, 196, 162, 61, 255, 84, 73, 62, 124, 3, 138, 190, 208, 53, 136, 61, 252, 233, 19, 191, 240, 10, 95, 188, 76, 173, 180, 191, 23, 20, 102, 62, 246, 166, 138, 61, 118, 173, 78, 190, 99, 37, 24, 191, 24, 65, 249, 189, 200, 65, 42, 61, 177, 76, 89, 190, 165, 144, 145, 61, 92, 143, 193, 61, 61, 4, 69, 190, 248, 18, 88, 62, 195, 174, 189, 186, 38, 26, 217, 61, 97, 19, 250, 58, 66, 198, 221, 61, 244, 227, 0, 61, 248, 48, 32, 190, 179, 93, 145, 190, 214, 170, 0, 191, 45, 76, 88, 62, 149, 86, 168, 190, 244, 189, 122, 190, 80, 75, 196, 62, 132, 104, 127, 62, 43, 249, 49, 190, 85, 235, 26, 190, 119, 45, 164, 62, 37, 24, 205, 189, 175, 97, 157, 61, 20, 20, 149, 62, 186, 191, 128, 62, 70, 175, 150, 62, 4, 195, 32, 62, 48, 38, 174, 190, 207, 241, 143, 60, 117, 110, 193, 61, 68, 152, 173, 189, 89, 248, 30, 60, 93, 105, 27, 190, 13, 40, 18, 190, 1, 74, 183, 188, 85, 232, 27, 62, 163, 88, 220, 189, 68, 76, 238, 189, 225, 62, 208, 189, 125, 145, 231, 59, 159, 121, 167, 189, 210, 182, 157, 61, 22, 135, 90, 60, 149, 140, 202, 188, 42, 136, 16, 62, 170, 168, 131, 61, 63, 229, 166, 187, 114, 183, 51, 189, 252, 51, 19, 190, 31, 221, 178, 59, 171, 203, 204, 189, 22, 181, 131, 61, 168, 143, 27, 189, 253, 112, 21, 190, 16, 29, 244, 189, 188, 189, 219, 61, 183, 95, 26, 190, 174, 199, 161, 61, 118, 203, 172, 59, 255, 102, 59, 190, 57, 125, 136, 189, 148, 248, 132, 59, 203, 163, 42, 189, 120, 143, 170, 60, 208, 234, 61, 60, 89, 244, 234, 188, 117, 184, 236, 189, 181, 233, 51, 62, 149, 42, 202, 61, 230, 13, 88, 62, 149, 95, 229, 188, 211, 62, 56, 62, 87, 245, 31, 190, 243, 42, 244, 188, 27, 55, 69, 61, 139, 128, 77, 62, 54, 4, 84, 189, 244, 109, 119, 190, 28, 193, 187, 61, 143, 96, 82, 60, 186, 110, 86, 188, 181, 12, 144, 190, 163, 158, 149, 189, 208, 15, 213, 61, 92, 30, 120, 62, 17, 147, 130, 190, 128, 241, 242, 61, 223, 14, 189, 189, 2, 100, 18, 59, 250, 217, 154, 190, 194, 148, 194, 189, 128, 159, 243, 61, 73, 19, 182, 60, 226, 69, 29, 190, 196, 83, 63, 189, 97, 194, 205, 189, 85, 112, 209, 189, 130, 4, 228, 61, 81, 199, 175, 61, 255, 60, 130, 61, 108, 24, 148, 61, 39, 49, 150, 60, 177, 111, 44, 190, 1, 247, 176, 61, 45, 32, 145, 61, 215, 134, 189, 189, 198, 103, 159, 189, 184, 204, 199, 188, 127, 5, 4, 190, 216, 98, 72, 61, 33, 15, 164, 189, 5, 20, 26, 190, 39, 204, 26, 190, 26, 234, 160, 189, 250, 58, 18, 189, 113, 201, 144, 189, 111, 189, 190, 61, 30, 83, 10, 62, 154, 172, 38, 62, 132, 211, 224, 189, 75, 128, 173, 60, 192, 60, 151, 189, 225, 137, 32, 190, 203, 222, 108, 189, 220, 20, 52, 189, 142, 55, 56, 190, 162, 17, 226, 189, 158, 146, 240, 60, 197, 100, 223, 190, 209, 150, 88, 62, 37, 20, 213, 60, 172, 142, 213, 190, 35, 16, 31, 189, 144, 40, 104, 189, 14, 10, 153, 62, 9, 141, 215, 190, 10, 197, 165, 62, 201, 216, 203, 190, 155, 167, 182, 189, 199, 60, 129, 190, 199, 74, 128, 190, 123, 192, 230, 61, 109, 130, 125, 190, 149, 113, 217, 190, 253, 151, 125, 62, 204, 200, 17, 187, 4, 68, 22, 60, 131, 88, 202, 190, 82, 164, 57, 189, 120, 73, 193, 189, 17, 222, 144, 189, 242, 68, 155, 189, 149, 21, 152, 190, 227, 147, 111, 62, 81, 195, 159, 189, 24, 161, 153, 190, 103, 66, 4, 62, 59, 119, 69, 61, 211, 22, 147, 189, 142, 133, 114, 61, 49, 9, 222, 186, 238, 49, 73, 190, 80, 133, 110, 189, 189, 94, 118, 61, 112, 67, 29, 61, 95, 74, 154, 189, 23, 190, 147, 190, 100, 197, 164, 189, 37, 238, 21, 61, 235, 53, 42, 190, 188, 121, 247, 189, 70, 187, 238, 189, 205, 225, 116, 62, 61, 181, 110, 190, 77, 237, 36, 190, 206, 7, 34, 190, 200, 65, 135, 62, 250, 161, 175, 62, 171, 52, 209, 188, 246, 213, 204, 189, 177, 218, 198, 61, 30, 11, 184, 61, 72, 130, 190, 189, 159, 17, 196, 189, 99, 28, 236, 61, 125, 109, 42, 190, 70, 51, 2, 191, 83, 171, 143, 189, 127, 191, 29, 190, 135, 4, 49, 190, 68, 65, 56, 60, 5, 80, 79, 189, 168, 172, 130, 190, 222, 4, 163, 62, 73, 222, 54, 61, 140, 214, 75, 61, 144, 217, 69, 61, 249, 173, 9, 61, 88, 76, 138, 62, 211, 211, 185, 188, 139, 50, 159, 62, 110, 45, 179, 190, 43, 195, 217, 61, 189, 146, 11, 190, 132, 161, 195, 190, 237, 33, 33, 189, 124, 69, 167, 61, 243, 79, 43, 190, 206, 187, 121, 62, 240, 241, 182, 189, 91, 159, 0, 190, 121, 53, 1, 62, 137, 82, 121, 190, 154, 141, 237, 58, 158, 20, 72, 188, 114, 107, 116, 62, 53, 17, 52, 61, 156, 223, 156, 62, 58, 206, 1, 189, 178, 38, 102, 190, 214, 172, 147, 190, 44, 101, 0, 190, 121, 19, 225, 189, 43, 223, 34, 189, 242, 216, 141, 186, 167, 26, 188, 61, 55, 226, 235, 60, 68, 29, 113, 189, 173, 9, 32, 62, 136, 90, 136, 189, 38, 234, 96, 62, 155, 203, 57, 61, 56, 87, 158, 189, 178, 110, 170, 189, 232, 215, 142, 61, 109, 159, 123, 189, 240, 110, 145, 61, 142, 3, 56, 190, 9, 222, 37, 190, 199, 22, 135, 188, 122, 40, 189, 62, 253, 209, 120, 62, 63, 253, 244, 61, 106, 143, 120, 190, 159, 35, 129, 188, 45, 139, 78, 62, 160, 99, 178, 61, 124, 40, 72, 62, 27, 26, 211, 61, 77, 158, 133, 62, 239, 46, 236, 61, 163, 244, 9, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {243, 88, 5, 190, 133, 53, 160, 188, 171, 5, 133, 62, 204, 93, 121, 62, 241, 29, 1, 189, 164, 138, 193, 61, 67, 143, 87, 61, 68, 144, 161, 61, 238, 55, 25, 62, 227, 162, 60, 190, 176, 44, 105, 62, 239, 240, 104, 190, 152, 3, 51, 190, 177, 16, 168, 188, 58, 97, 130, 190, 114, 142, 130, 61, 230, 146, 154, 61, 4, 229, 87, 187, 242, 61, 41, 62, 124, 205, 43, 61, 224, 241, 42, 190, 166, 104, 85, 188, 226, 229, 28, 62, 114, 116, 186, 61, 32, 166, 141, 61, 42, 148, 55, 61, 143, 213, 19, 190, 5, 159, 248, 189, 121, 17, 201, 61, 161, 104, 82, 189, 232, 95, 5, 190, 229, 119, 127, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 59, 26, 189, 198, 251, 7, 62, 25, 35, 109, 61, 152, 109, 44, 191, 168, 77, 21, 190, 57, 15, 52, 63, 204, 46, 39, 63, 145, 245, 179, 62, 242, 57, 233, 190, 65, 227, 59, 189, 47, 13, 250, 190, 17, 56, 198, 61, 62, 163, 229, 62, 145, 135, 117, 62, 221, 218, 236, 61, 37, 208, 160, 190, 147, 10, 35, 190, 6, 71, 197, 190, 254, 201, 222, 62, 86, 194, 239, 62, 124, 126, 221, 61, 250, 238, 154, 190, 235, 155, 174, 190, 63, 216, 3, 63, 147, 114, 182, 190, 10, 206, 149, 189, 98, 96, 14, 190, 240, 251, 170, 189, 128, 29, 32, 63, 242, 167, 215, 190, 248, 172, 161, 62, 4, 63, 192, 189, 4, 60, 7, 190, 151, 153, 134, 190, 224, 10, 151, 190, 20, 164, 220, 61, 164, 38, 68, 190, 163, 241, 145, 61, 235, 87, 148, 62, 193, 129, 192, 61, 151, 52, 22, 190, 185, 27, 130, 62, 199, 185, 19, 62, 248, 206, 149, 62, 115, 66, 185, 61, 57, 0, 35, 62, 245, 8, 231, 61, 17, 12, 191, 190, 163, 164, 56, 190, 180, 7, 50, 190, 17, 229, 175, 60, 227, 210, 204, 59, 251, 167, 111, 61, 213, 82, 136, 62, 109, 89, 248, 189, 204, 233, 113, 190, 218, 132, 32, 62, 185, 86, 74, 188, 133, 69, 243, 61, 29, 168, 16, 190, 73, 124, 113, 60, 208, 132, 105, 62, 47, 91, 52, 62, 14, 197, 45, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 149, 136, 189, 144, 51, 235, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {68, 95, 120, 190, 112, 54, 186, 62, 184, 98, 148, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {225, 212, 216, 191, 240, 94, 38, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0094/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}