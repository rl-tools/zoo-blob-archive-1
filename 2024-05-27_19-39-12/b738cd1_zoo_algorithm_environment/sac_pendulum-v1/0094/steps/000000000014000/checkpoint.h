// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 62, 220, 62, 186, 186, 132, 63, 245, 57, 45, 62, 43, 222, 117, 62, 168, 133, 177, 190, 86, 100, 6, 63, 151, 104, 180, 61, 228, 51, 207, 62, 96, 78, 199, 190, 244, 156, 136, 190, 204, 251, 174, 191, 215, 246, 222, 189, 38, 121, 24, 63, 168, 157, 119, 191, 105, 207, 128, 190, 104, 103, 244, 190, 180, 165, 11, 63, 227, 187, 26, 191, 7, 141, 161, 191, 169, 115, 12, 191, 145, 211, 71, 190, 211, 21, 226, 62, 228, 194, 172, 190, 212, 41, 124, 190, 203, 49, 69, 62, 87, 5, 1, 63, 161, 227, 23, 191, 113, 147, 163, 189, 231, 92, 141, 191, 199, 113, 170, 62, 207, 246, 167, 190, 80, 199, 254, 62, 26, 238, 152, 189, 228, 63, 101, 63, 231, 54, 56, 191, 2, 22, 27, 191, 79, 205, 141, 190, 96, 138, 119, 63, 122, 53, 47, 190, 24, 34, 81, 191, 5, 86, 243, 61, 99, 36, 18, 63, 200, 181, 211, 190, 245, 72, 84, 191, 224, 109, 141, 62, 197, 205, 152, 62, 17, 119, 168, 191, 60, 207, 151, 60, 12, 179, 49, 62, 223, 112, 33, 63, 132, 212, 18, 63, 11, 151, 134, 191, 177, 117, 193, 62, 170, 119, 27, 189, 65, 168, 75, 63, 34, 114, 36, 191, 178, 84, 11, 191, 58, 245, 2, 63, 147, 151, 63, 191, 75, 120, 237, 190, 185, 237, 148, 62, 59, 71, 208, 62, 100, 147, 119, 190, 45, 176, 21, 63, 19, 223, 214, 63, 85, 54, 189, 62, 105, 229, 114, 190, 133, 204, 117, 191, 218, 140, 40, 190, 136, 158, 185, 62, 114, 196, 10, 191, 72, 245, 215, 190, 44, 190, 79, 63, 50, 199, 15, 190, 159, 116, 238, 189, 96, 113, 51, 62, 129, 81, 68, 190, 161, 55, 39, 63, 78, 185, 199, 190, 130, 240, 142, 191, 17, 55, 79, 189, 204, 94, 242, 190, 209, 144, 158, 62, 47, 141, 100, 191, 161, 166, 44, 62, 149, 153, 104, 63, 150, 10, 242, 62, 87, 87, 24, 191, 161, 124, 196, 62, 220, 253, 65, 191, 170, 177, 53, 191, 91, 178, 39, 191, 219, 221, 49, 61, 142, 77, 41, 190, 94, 148, 32, 63, 223, 57, 103, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 81, 7, 191, 87, 189, 35, 62, 133, 210, 54, 62, 160, 79, 131, 62, 15, 111, 137, 189, 2, 64, 112, 190, 61, 51, 155, 61, 126, 223, 196, 189, 114, 115, 189, 62, 215, 146, 244, 61, 89, 19, 142, 62, 142, 117, 188, 60, 38, 250, 57, 63, 230, 172, 143, 62, 159, 76, 25, 190, 224, 228, 237, 62, 134, 7, 4, 63, 160, 3, 134, 190, 4, 49, 241, 190, 103, 42, 142, 189, 82, 219, 213, 62, 111, 29, 65, 61, 77, 168, 248, 62, 171, 178, 216, 189, 83, 243, 63, 190, 82, 115, 36, 191, 211, 234, 237, 60, 49, 22, 181, 61, 142, 31, 120, 62, 232, 45, 204, 190, 180, 244, 155, 61, 157, 113, 140, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 226, 179, 61, 201, 85, 27, 190, 156, 222, 128, 61, 235, 219, 87, 190, 5, 182, 127, 61, 39, 214, 59, 190, 90, 120, 243, 187, 108, 130, 14, 188, 125, 12, 175, 190, 202, 216, 93, 190, 169, 38, 80, 61, 220, 152, 56, 190, 178, 204, 107, 62, 243, 245, 95, 61, 215, 108, 216, 190, 76, 252, 134, 190, 105, 79, 14, 62, 69, 115, 158, 190, 241, 124, 111, 61, 4, 165, 35, 62, 145, 66, 9, 189, 52, 118, 153, 189, 199, 234, 9, 190, 187, 55, 43, 62, 26, 172, 255, 190, 175, 104, 87, 190, 177, 9, 94, 59, 182, 138, 229, 190, 218, 27, 66, 62, 203, 13, 134, 190, 203, 133, 150, 190, 142, 184, 4, 61, 102, 204, 227, 188, 91, 178, 4, 62, 250, 124, 53, 62, 129, 80, 50, 62, 153, 56, 119, 62, 158, 213, 43, 190, 104, 206, 33, 190, 245, 130, 189, 62, 37, 55, 49, 61, 53, 23, 233, 190, 68, 255, 177, 189, 126, 17, 108, 62, 70, 34, 251, 61, 72, 2, 194, 61, 1, 142, 94, 190, 105, 68, 145, 62, 208, 86, 254, 61, 17, 100, 74, 190, 28, 28, 161, 189, 54, 174, 149, 62, 251, 35, 99, 62, 137, 209, 250, 189, 163, 165, 148, 62, 130, 54, 193, 61, 218, 181, 244, 188, 218, 221, 213, 189, 118, 242, 119, 62, 52, 226, 222, 60, 207, 188, 236, 59, 152, 210, 213, 190, 237, 244, 183, 189, 241, 183, 227, 61, 79, 192, 37, 191, 30, 29, 8, 189, 135, 20, 9, 190, 81, 65, 154, 61, 65, 55, 33, 62, 237, 32, 173, 188, 94, 13, 216, 61, 189, 113, 35, 62, 48, 149, 232, 61, 52, 151, 141, 190, 2, 54, 129, 61, 173, 221, 16, 189, 23, 48, 144, 62, 4, 0, 199, 61, 57, 141, 4, 190, 165, 227, 80, 62, 214, 184, 41, 189, 145, 52, 147, 61, 151, 71, 59, 190, 169, 72, 173, 188, 103, 224, 156, 62, 240, 1, 134, 190, 151, 39, 101, 189, 41, 251, 234, 188, 165, 215, 17, 62, 61, 65, 117, 190, 147, 97, 88, 62, 123, 155, 71, 190, 60, 122, 152, 190, 240, 214, 248, 60, 71, 125, 6, 61, 106, 97, 134, 189, 154, 215, 251, 190, 35, 56, 216, 191, 188, 46, 9, 191, 44, 216, 136, 62, 85, 253, 52, 191, 215, 181, 162, 188, 183, 171, 153, 62, 211, 175, 23, 190, 71, 230, 52, 62, 159, 188, 148, 61, 2, 41, 200, 62, 214, 199, 74, 190, 61, 92, 139, 62, 129, 37, 55, 62, 24, 243, 232, 61, 87, 214, 218, 61, 10, 72, 254, 191, 61, 238, 121, 62, 103, 214, 189, 190, 16, 245, 208, 190, 150, 40, 41, 62, 24, 170, 3, 190, 209, 49, 254, 188, 71, 203, 22, 191, 238, 115, 10, 190, 53, 56, 157, 190, 115, 26, 74, 62, 222, 165, 122, 62, 236, 93, 12, 61, 244, 47, 155, 62, 238, 165, 206, 62, 236, 4, 179, 191, 189, 23, 195, 190, 152, 235, 163, 62, 14, 3, 245, 61, 244, 212, 239, 190, 87, 183, 40, 62, 214, 255, 191, 60, 188, 23, 255, 190, 97, 126, 123, 187, 142, 57, 120, 62, 154, 83, 31, 190, 137, 175, 250, 61, 61, 45, 57, 59, 117, 255, 151, 62, 158, 37, 179, 188, 20, 121, 165, 61, 126, 156, 22, 62, 87, 30, 188, 61, 87, 241, 15, 191, 10, 245, 47, 189, 251, 216, 70, 190, 6, 224, 60, 62, 252, 128, 47, 62, 120, 255, 197, 190, 91, 111, 143, 190, 44, 180, 24, 62, 82, 201, 53, 62, 152, 64, 138, 190, 206, 42, 125, 190, 234, 168, 27, 62, 201, 8, 49, 60, 74, 106, 46, 190, 135, 122, 246, 61, 26, 103, 159, 191, 29, 48, 207, 62, 104, 60, 239, 62, 109, 28, 177, 190, 114, 46, 174, 188, 174, 185, 74, 190, 199, 73, 83, 190, 61, 117, 66, 62, 97, 222, 137, 189, 27, 57, 63, 191, 91, 118, 93, 62, 191, 46, 133, 62, 176, 225, 144, 62, 171, 112, 154, 62, 120, 5, 24, 191, 199, 75, 31, 190, 32, 25, 193, 62, 196, 120, 101, 63, 219, 144, 98, 62, 144, 100, 155, 62, 229, 54, 97, 190, 172, 210, 4, 191, 131, 70, 139, 189, 210, 40, 221, 61, 158, 151, 147, 62, 30, 204, 77, 190, 138, 182, 200, 190, 212, 214, 152, 188, 63, 22, 217, 190, 203, 130, 114, 191, 1, 18, 23, 62, 214, 127, 160, 62, 185, 112, 65, 190, 174, 227, 165, 62, 17, 71, 20, 61, 49, 175, 13, 62, 205, 145, 55, 62, 226, 68, 240, 190, 195, 197, 87, 191, 93, 58, 24, 62, 66, 231, 240, 190, 139, 101, 158, 190, 255, 240, 25, 188, 10, 215, 3, 61, 211, 117, 117, 190, 165, 174, 144, 62, 54, 174, 208, 190, 138, 217, 87, 62, 68, 234, 44, 62, 140, 138, 204, 62, 174, 61, 169, 62, 80, 40, 220, 62, 132, 237, 7, 191, 197, 64, 17, 191, 7, 171, 133, 189, 204, 243, 243, 61, 227, 41, 5, 63, 219, 31, 208, 190, 19, 115, 142, 190, 246, 18, 222, 190, 132, 18, 140, 190, 100, 72, 101, 191, 114, 94, 160, 190, 237, 150, 46, 62, 148, 127, 8, 188, 246, 59, 176, 190, 250, 17, 208, 189, 160, 244, 194, 190, 105, 232, 145, 62, 24, 237, 110, 61, 152, 183, 214, 60, 190, 110, 183, 189, 190, 123, 32, 62, 108, 15, 201, 62, 20, 187, 164, 62, 249, 188, 52, 187, 21, 115, 95, 62, 206, 129, 142, 190, 200, 79, 150, 62, 245, 159, 139, 190, 217, 171, 254, 190, 214, 32, 179, 189, 229, 120, 177, 60, 49, 171, 70, 60, 221, 58, 171, 61, 178, 138, 51, 191, 179, 129, 116, 187, 180, 65, 49, 61, 193, 151, 242, 61, 147, 171, 12, 190, 255, 28, 71, 190, 121, 156, 70, 62, 133, 49, 138, 191, 155, 25, 155, 62, 79, 214, 157, 189, 107, 86, 55, 190, 21, 171, 189, 190, 179, 148, 237, 187, 121, 169, 182, 190, 134, 227, 201, 189, 194, 34, 203, 189, 229, 178, 145, 61, 15, 3, 13, 62, 2, 40, 182, 189, 242, 43, 133, 62, 52, 158, 0, 61, 171, 60, 212, 61, 49, 236, 57, 190, 19, 75, 130, 62, 26, 184, 63, 188, 220, 233, 52, 189, 24, 84, 141, 189, 126, 67, 35, 189, 30, 178, 2, 62, 84, 173, 95, 190, 200, 175, 152, 190, 33, 140, 181, 62, 26, 237, 4, 63, 215, 26, 84, 190, 160, 17, 47, 190, 131, 204, 180, 61, 205, 252, 138, 62, 185, 56, 129, 190, 22, 195, 158, 62, 13, 208, 94, 62, 0, 220, 204, 62, 174, 29, 62, 189, 233, 99, 60, 189, 80, 230, 16, 63, 99, 123, 31, 59, 45, 34, 120, 189, 150, 126, 40, 189, 108, 235, 1, 191, 100, 203, 7, 62, 231, 195, 237, 61, 198, 126, 69, 190, 37, 225, 224, 187, 241, 164, 228, 188, 242, 83, 8, 62, 28, 222, 69, 190, 77, 80, 135, 62, 172, 254, 91, 189, 33, 132, 36, 189, 35, 110, 153, 190, 220, 32, 9, 62, 123, 116, 106, 62, 98, 62, 155, 190, 145, 24, 174, 190, 166, 103, 159, 61, 184, 26, 215, 62, 178, 175, 189, 190, 64, 166, 187, 190, 25, 133, 182, 62, 45, 107, 80, 62, 92, 109, 222, 189, 126, 48, 28, 62, 44, 165, 154, 62, 26, 139, 214, 61, 79, 59, 192, 189, 30, 244, 8, 61, 26, 159, 178, 190, 31, 30, 150, 191, 19, 234, 221, 190, 120, 238, 50, 62, 49, 207, 108, 191, 133, 223, 179, 57, 73, 217, 183, 62, 80, 146, 212, 190, 85, 6, 30, 62, 177, 234, 168, 190, 151, 90, 147, 62, 123, 183, 112, 190, 59, 62, 193, 62, 193, 1, 162, 60, 7, 95, 56, 62, 222, 202, 104, 62, 73, 135, 153, 191, 191, 197, 244, 62, 25, 145, 23, 191, 64, 88, 196, 190, 139, 224, 239, 61, 38, 148, 10, 63, 178, 25, 19, 62, 125, 127, 141, 190, 121, 4, 40, 62, 207, 44, 130, 62, 119, 47, 219, 61, 246, 183, 154, 62, 171, 213, 55, 63, 38, 180, 113, 62, 55, 228, 115, 62, 89, 74, 142, 191, 229, 170, 3, 63, 38, 116, 131, 61, 134, 233, 160, 62, 208, 38, 125, 190, 183, 14, 0, 191, 193, 192, 229, 61, 81, 165, 122, 190, 185, 78, 135, 190, 205, 232, 62, 62, 235, 38, 160, 189, 228, 87, 193, 189, 121, 83, 1, 191, 77, 139, 17, 190, 205, 111, 220, 190, 30, 54, 51, 189, 127, 147, 253, 190, 152, 27, 220, 189, 78, 196, 141, 189, 118, 3, 152, 190, 30, 20, 240, 190, 235, 81, 134, 62, 111, 55, 94, 62, 148, 122, 226, 190, 82, 243, 72, 190, 112, 163, 138, 61, 60, 206, 172, 189, 26, 220, 152, 190, 79, 54, 140, 61, 78, 198, 181, 61, 77, 9, 43, 62, 107, 199, 9, 191, 115, 9, 164, 190, 230, 244, 194, 62, 7, 222, 162, 190, 92, 77, 91, 60, 25, 254, 138, 190, 230, 22, 1, 62, 184, 110, 116, 62, 67, 201, 6, 61, 67, 48, 11, 60, 67, 243, 209, 61, 245, 254, 133, 62, 241, 149, 29, 62, 79, 53, 176, 61, 110, 40, 156, 62, 84, 197, 3, 191, 0, 207, 134, 188, 28, 160, 167, 190, 55, 100, 244, 189, 226, 80, 95, 190, 85, 106, 218, 59, 246, 72, 3, 61, 46, 148, 130, 60, 85, 147, 50, 61, 190, 27, 241, 61, 43, 38, 78, 62, 169, 39, 166, 190, 36, 220, 203, 59, 38, 128, 223, 188, 172, 233, 192, 62, 148, 132, 27, 189, 191, 17, 169, 62, 246, 206, 148, 190, 184, 10, 85, 190, 203, 181, 216, 189, 211, 39, 49, 190, 239, 11, 254, 61, 185, 40, 239, 190, 92, 201, 239, 62, 131, 121, 180, 61, 131, 30, 51, 62, 182, 159, 132, 61, 184, 53, 215, 188, 68, 0, 208, 190, 190, 23, 4, 62, 112, 151, 21, 190, 1, 155, 112, 189, 177, 108, 3, 62, 247, 59, 186, 190, 123, 152, 57, 191, 41, 215, 234, 190, 51, 99, 58, 62, 188, 191, 218, 188, 66, 72, 68, 61, 180, 152, 255, 61, 110, 226, 101, 191, 151, 150, 59, 190, 235, 208, 251, 189, 70, 182, 94, 62, 144, 108, 98, 190, 205, 218, 141, 190, 166, 67, 45, 62, 67, 152, 189, 191, 181, 62, 134, 62, 181, 31, 172, 190, 101, 20, 23, 190, 175, 47, 152, 62, 57, 97, 127, 61, 55, 92, 141, 62, 154, 47, 89, 190, 171, 107, 208, 191, 126, 28, 124, 60, 175, 196, 37, 191, 8, 115, 55, 191, 6, 155, 180, 61, 89, 233, 14, 61, 25, 35, 162, 62, 92, 181, 56, 191, 47, 169, 206, 62, 31, 36, 206, 59, 183, 105, 109, 190, 60, 47, 111, 191, 33, 205, 88, 62, 244, 70, 165, 190, 225, 170, 27, 191, 152, 192, 235, 190, 40, 250, 204, 61, 171, 247, 209, 62, 216, 8, 27, 191, 65, 189, 157, 190, 12, 224, 151, 190, 31, 119, 83, 190, 2, 170, 193, 190, 110, 19, 18, 62, 74, 40, 81, 62, 161, 241, 50, 62, 210, 58, 147, 188, 14, 235, 13, 190, 43, 71, 3, 190, 16, 243, 122, 191, 8, 14, 74, 190, 196, 192, 3, 62, 57, 225, 159, 190, 212, 232, 185, 61, 64, 182, 51, 61, 64, 10, 51, 62, 210, 64, 154, 62, 147, 52, 44, 191, 21, 151, 20, 62, 120, 71, 173, 61, 216, 186, 111, 62, 73, 207, 137, 190, 118, 241, 156, 190, 208, 63, 183, 189, 113, 35, 15, 191, 95, 135, 177, 62, 34, 229, 149, 190, 102, 35, 35, 190, 61, 233, 85, 62, 55, 7, 118, 62, 51, 172, 200, 61, 94, 113, 128, 190, 182, 212, 238, 189, 69, 226, 107, 187, 203, 95, 55, 60, 63, 177, 130, 62, 30, 214, 224, 62, 201, 245, 174, 62, 246, 55, 208, 61, 171, 135, 145, 191, 183, 89, 28, 191, 63, 81, 44, 189, 233, 168, 101, 190, 105, 249, 179, 190, 78, 137, 94, 190, 22, 94, 7, 61, 92, 129, 0, 189, 187, 55, 120, 190, 9, 166, 38, 62, 140, 114, 32, 61, 254, 206, 111, 62, 111, 230, 191, 189, 162, 159, 58, 62, 100, 64, 106, 59, 84, 150, 244, 189, 134, 234, 45, 61, 247, 72, 84, 61, 38, 46, 45, 62, 213, 86, 145, 190, 171, 216, 77, 190, 108, 35, 55, 62, 23, 177, 213, 62, 114, 148, 140, 190, 200, 58, 181, 190, 132, 125, 153, 62, 112, 36, 203, 61, 2, 61, 26, 190, 131, 158, 117, 60, 195, 91, 183, 62, 6, 56, 141, 62, 182, 44, 36, 190, 188, 2, 187, 61, 116, 17, 28, 190, 2, 237, 92, 62, 22, 245, 158, 62, 196, 85, 225, 59, 50, 73, 177, 62, 136, 37, 52, 190, 116, 101, 232, 190, 112, 206, 126, 189, 156, 104, 172, 189, 24, 185, 173, 61, 232, 120, 20, 190, 134, 3, 209, 188, 40, 252, 167, 189, 184, 22, 114, 190, 169, 182, 224, 60, 8, 168, 169, 62, 237, 206, 124, 62, 28, 197, 83, 191, 201, 253, 129, 189, 155, 98, 101, 190, 115, 98, 231, 62, 103, 29, 68, 62, 64, 222, 55, 189, 120, 165, 71, 189, 118, 77, 10, 62, 120, 158, 151, 190, 217, 212, 39, 188, 85, 90, 119, 190, 213, 58, 41, 62, 253, 235, 26, 191, 83, 98, 85, 189, 247, 212, 18, 188, 174, 236, 37, 191, 33, 63, 160, 62, 27, 185, 148, 190, 173, 204, 69, 62, 29, 76, 7, 190, 175, 76, 89, 191, 221, 168, 176, 190, 102, 179, 158, 62, 198, 169, 240, 190, 233, 158, 185, 190, 89, 133, 21, 60, 143, 139, 154, 62, 233, 107, 55, 188, 227, 155, 80, 61, 187, 145, 136, 190, 19, 5, 136, 189, 29, 93, 136, 62, 233, 176, 214, 62, 175, 15, 184, 61, 147, 30, 241, 61, 81, 139, 137, 190, 135, 139, 58, 191, 233, 160, 255, 61, 190, 1, 2, 189, 188, 1, 145, 62, 116, 133, 236, 189, 123, 75, 244, 61, 111, 112, 65, 191, 229, 218, 160, 189, 149, 110, 146, 191, 253, 217, 210, 61, 137, 162, 178, 61, 16, 231, 139, 191, 188, 163, 213, 62, 125, 152, 115, 62, 82, 156, 59, 62, 60, 86, 228, 61, 113, 16, 19, 191, 132, 39, 234, 188, 142, 67, 22, 62, 151, 83, 184, 61, 135, 33, 164, 190, 253, 252, 234, 190, 22, 205, 200, 62, 158, 173, 50, 190, 162, 105, 94, 62, 142, 216, 77, 190, 175, 225, 15, 62, 91, 99, 10, 62, 178, 171, 74, 190, 139, 83, 75, 62, 197, 196, 18, 62, 53, 113, 44, 190, 170, 88, 4, 191, 159, 242, 95, 62, 248, 180, 143, 61, 39, 16, 147, 62, 63, 254, 157, 190, 143, 117, 220, 61, 17, 117, 203, 190, 68, 50, 126, 190, 134, 36, 120, 191, 228, 80, 184, 62, 13, 24, 189, 61, 23, 105, 7, 62, 162, 211, 206, 189, 1, 35, 154, 61, 124, 119, 100, 189, 253, 44, 161, 189, 218, 142, 159, 189, 151, 227, 238, 187, 64, 59, 250, 189, 154, 221, 11, 190, 181, 224, 54, 189, 141, 34, 229, 61, 16, 65, 137, 189, 49, 16, 211, 188, 101, 17, 143, 61, 77, 158, 171, 189, 159, 189, 25, 61, 172, 18, 186, 60, 36, 223, 242, 61, 161, 238, 5, 190, 26, 209, 30, 62, 236, 40, 156, 189, 187, 223, 179, 61, 108, 80, 36, 190, 82, 212, 239, 189, 122, 175, 124, 61, 154, 102, 43, 190, 237, 48, 53, 190, 86, 126, 241, 188, 137, 62, 237, 189, 194, 70, 27, 187, 101, 234, 235, 61, 163, 199, 131, 189, 77, 44, 13, 191, 241, 251, 47, 62, 121, 153, 174, 190, 227, 51, 231, 60, 212, 47, 40, 62, 225, 43, 202, 190, 123, 211, 249, 190, 162, 88, 96, 190, 25, 184, 222, 190, 104, 221, 154, 186, 200, 230, 6, 62, 183, 113, 144, 188, 111, 238, 6, 190, 4, 134, 225, 189, 169, 77, 190, 61, 85, 93, 186, 62, 196, 251, 97, 61, 182, 139, 222, 190, 3, 192, 124, 189, 219, 176, 24, 190, 200, 219, 39, 191, 69, 10, 251, 187, 57, 107, 44, 189, 229, 39, 72, 189, 194, 153, 221, 190, 6, 155, 30, 61, 102, 109, 37, 62, 189, 160, 234, 190, 163, 192, 23, 190, 185, 32, 22, 190, 132, 117, 80, 61, 46, 150, 140, 61, 75, 237, 107, 190, 39, 109, 69, 190, 147, 216, 225, 189, 1, 191, 229, 61, 47, 42, 64, 190, 100, 251, 197, 61, 116, 36, 251, 61, 131, 62, 54, 189, 152, 178, 108, 62, 193, 124, 242, 188, 90, 175, 10, 62, 26, 147, 229, 189, 37, 24, 59, 62, 95, 214, 128, 189, 178, 68, 134, 61, 13, 238, 63, 189, 201, 44, 112, 61, 99, 199, 160, 189, 229, 84, 136, 190, 226, 153, 161, 190, 168, 199, 60, 62, 173, 125, 205, 62, 223, 31, 151, 57, 20, 78, 231, 190, 19, 45, 177, 62, 167, 5, 25, 61, 145, 150, 13, 190, 110, 153, 46, 62, 202, 43, 138, 61, 5, 114, 162, 62, 182, 48, 114, 61, 95, 9, 44, 190, 35, 54, 133, 62, 7, 142, 224, 62, 99, 184, 112, 189, 15, 115, 73, 62, 55, 95, 31, 61, 242, 37, 25, 191, 70, 45, 163, 189, 55, 154, 163, 60, 60, 171, 242, 190, 201, 28, 11, 190, 210, 252, 176, 61, 186, 41, 107, 62, 214, 18, 126, 190, 30, 216, 200, 62, 240, 66, 67, 61, 234, 171, 119, 61, 208, 55, 169, 62, 86, 154, 230, 62, 54, 252, 99, 190, 191, 204, 49, 62, 145, 41, 158, 190, 55, 180, 146, 190, 72, 90, 189, 60, 255, 228, 126, 59, 58, 131, 77, 57, 127, 195, 141, 190, 80, 194, 208, 61, 31, 100, 38, 191, 6, 253, 0, 189, 51, 53, 166, 191, 128, 211, 146, 62, 64, 113, 182, 61, 80, 254, 89, 189, 137, 28, 248, 190, 177, 203, 18, 190, 208, 13, 166, 62, 62, 87, 40, 191, 30, 180, 67, 61, 123, 240, 137, 62, 156, 56, 144, 190, 51, 144, 34, 62, 41, 218, 221, 189, 39, 202, 187, 61, 56, 129, 216, 189, 79, 181, 111, 61, 35, 175, 65, 60, 88, 60, 129, 189, 224, 114, 81, 190, 82, 207, 239, 190, 227, 115, 186, 62, 146, 132, 2, 191, 202, 84, 186, 190, 178, 194, 162, 62, 118, 231, 18, 63, 6, 17, 130, 189, 185, 175, 109, 190, 23, 12, 67, 62, 131, 25, 253, 190, 106, 221, 205, 62, 112, 44, 133, 62, 251, 145, 11, 63, 186, 100, 142, 62, 122, 218, 0, 63, 22, 128, 59, 191, 207, 241, 143, 60, 117, 110, 193, 61, 68, 152, 173, 189, 89, 248, 30, 60, 93, 105, 27, 190, 13, 40, 18, 190, 1, 74, 183, 188, 85, 232, 27, 62, 163, 88, 220, 189, 68, 76, 238, 189, 225, 62, 208, 189, 125, 145, 231, 59, 159, 121, 167, 189, 210, 182, 157, 61, 22, 135, 90, 60, 149, 140, 202, 188, 42, 136, 16, 62, 170, 168, 131, 61, 63, 229, 166, 187, 114, 183, 51, 189, 252, 51, 19, 190, 31, 221, 178, 59, 171, 203, 204, 189, 22, 181, 131, 61, 168, 143, 27, 189, 253, 112, 21, 190, 16, 29, 244, 189, 188, 189, 219, 61, 183, 95, 26, 190, 174, 199, 161, 61, 118, 203, 172, 59, 255, 102, 59, 190, 130, 51, 197, 189, 45, 113, 196, 60, 96, 210, 247, 188, 59, 185, 154, 61, 16, 189, 125, 62, 217, 136, 32, 61, 21, 204, 132, 190, 72, 195, 151, 62, 43, 166, 163, 61, 70, 185, 119, 62, 198, 138, 180, 190, 252, 65, 104, 62, 75, 26, 182, 190, 221, 59, 28, 190, 6, 151, 70, 62, 6, 129, 141, 62, 48, 113, 162, 189, 1, 237, 96, 188, 220, 162, 140, 62, 113, 93, 1, 62, 92, 14, 212, 189, 111, 23, 114, 190, 185, 51, 53, 189, 93, 62, 90, 62, 240, 222, 72, 62, 59, 234, 237, 190, 53, 60, 146, 61, 97, 129, 203, 189, 232, 58, 65, 190, 119, 132, 13, 190, 231, 235, 70, 190, 240, 5, 58, 190, 73, 19, 182, 60, 226, 69, 29, 190, 196, 83, 63, 189, 97, 194, 205, 189, 85, 112, 209, 189, 130, 4, 228, 61, 81, 199, 175, 61, 255, 60, 130, 61, 108, 24, 148, 61, 39, 49, 150, 60, 177, 111, 44, 190, 1, 247, 176, 61, 45, 32, 145, 61, 215, 134, 189, 189, 198, 103, 159, 189, 184, 204, 199, 188, 127, 5, 4, 190, 216, 98, 72, 61, 33, 15, 164, 189, 5, 20, 26, 190, 39, 204, 26, 190, 26, 234, 160, 189, 250, 58, 18, 189, 113, 201, 144, 189, 111, 189, 190, 61, 30, 83, 10, 62, 154, 172, 38, 62, 132, 211, 224, 189, 75, 128, 173, 60, 192, 60, 151, 189, 225, 137, 32, 190, 203, 222, 108, 189, 120, 72, 25, 63, 238, 47, 81, 61, 253, 95, 181, 189, 123, 251, 178, 62, 224, 28, 150, 63, 114, 70, 155, 62, 65, 21, 12, 62, 147, 156, 127, 191, 83, 68, 73, 61, 67, 207, 60, 191, 41, 221, 13, 63, 33, 87, 107, 191, 207, 47, 16, 63, 78, 191, 53, 191, 154, 161, 104, 191, 15, 251, 58, 190, 170, 112, 22, 190, 202, 158, 222, 62, 51, 167, 113, 191, 43, 251, 77, 191, 218, 56, 185, 62, 40, 160, 203, 61, 1, 61, 55, 62, 110, 56, 60, 191, 220, 141, 18, 191, 67, 241, 122, 190, 127, 71, 136, 62, 203, 143, 224, 186, 70, 252, 91, 191, 175, 111, 154, 62, 22, 202, 57, 62, 186, 50, 166, 190, 36, 211, 172, 62, 150, 30, 91, 61, 252, 5, 241, 189, 9, 191, 54, 60, 14, 143, 82, 190, 111, 141, 47, 60, 131, 105, 82, 63, 151, 200, 87, 190, 182, 115, 184, 188, 218, 95, 219, 60, 196, 21, 16, 62, 230, 102, 134, 190, 211, 156, 61, 62, 110, 255, 135, 190, 214, 130, 128, 190, 200, 26, 5, 190, 98, 96, 111, 62, 181, 232, 162, 61, 252, 131, 25, 191, 189, 217, 16, 191, 207, 231, 124, 62, 216, 226, 136, 62, 102, 220, 32, 189, 203, 248, 239, 190, 151, 109, 105, 62, 13, 104, 175, 61, 18, 212, 85, 190, 128, 229, 131, 189, 134, 142, 127, 61, 143, 79, 62, 190, 189, 209, 21, 191, 110, 171, 205, 189, 105, 88, 102, 188, 221, 23, 148, 190, 247, 248, 250, 188, 216, 185, 179, 190, 161, 195, 231, 189, 227, 106, 138, 62, 36, 191, 164, 189, 197, 148, 109, 60, 87, 178, 5, 61, 206, 110, 213, 62, 95, 167, 123, 62, 104, 39, 7, 189, 227, 129, 160, 62, 239, 135, 129, 190, 82, 205, 10, 63, 46, 221, 128, 190, 146, 72, 231, 190, 57, 128, 11, 190, 154, 20, 183, 61, 167, 110, 89, 190, 7, 100, 132, 62, 61, 109, 246, 190, 175, 187, 127, 190, 77, 71, 106, 61, 60, 60, 99, 189, 79, 239, 199, 188, 195, 36, 129, 190, 88, 6, 70, 62, 244, 71, 254, 190, 114, 183, 129, 62, 42, 8, 30, 190, 231, 50, 244, 190, 193, 56, 20, 191, 15, 8, 236, 189, 138, 149, 218, 189, 63, 1, 65, 190, 106, 43, 221, 189, 8, 71, 72, 61, 240, 175, 67, 189, 62, 213, 15, 190, 19, 201, 4, 62, 229, 250, 159, 189, 168, 188, 50, 62, 212, 185, 252, 188, 132, 18, 188, 189, 93, 227, 14, 190, 73, 248, 183, 60, 135, 241, 159, 189, 167, 237, 91, 61, 76, 147, 141, 190, 157, 161, 143, 190, 76, 230, 251, 189, 26, 252, 181, 62, 37, 40, 181, 62, 212, 166, 132, 60, 82, 56, 158, 190, 126, 18, 255, 188, 31, 175, 121, 62, 226, 122, 229, 188, 172, 7, 22, 62, 242, 57, 151, 61, 220, 209, 78, 62, 96, 202, 89, 189, 65, 178, 13, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {223, 122, 252, 189, 77, 66, 141, 61, 38, 27, 161, 62, 15, 158, 149, 62, 91, 129, 9, 61, 90, 193, 58, 62, 249, 125, 17, 61, 203, 192, 12, 62, 108, 180, 29, 62, 181, 39, 83, 189, 20, 107, 189, 62, 160, 197, 78, 190, 217, 174, 94, 190, 209, 95, 36, 190, 235, 215, 40, 190, 21, 182, 147, 60, 233, 54, 209, 61, 96, 230, 174, 188, 154, 153, 31, 62, 246, 191, 219, 61, 44, 199, 53, 190, 160, 1, 198, 189, 166, 84, 66, 62, 45, 153, 193, 60, 20, 86, 200, 61, 42, 148, 55, 61, 221, 230, 140, 190, 5, 159, 248, 189, 186, 31, 201, 62, 247, 99, 67, 59, 139, 213, 15, 190, 166, 98, 102, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 7, 26, 190, 102, 235, 170, 61, 167, 201, 4, 61, 60, 103, 110, 191, 130, 24, 2, 190, 221, 6, 135, 63, 9, 179, 162, 63, 207, 150, 171, 62, 234, 117, 216, 190, 154, 139, 29, 190, 124, 144, 64, 191, 211, 134, 50, 63, 188, 235, 211, 62, 85, 71, 183, 62, 59, 44, 128, 63, 144, 209, 148, 190, 123, 81, 54, 190, 83, 229, 214, 190, 19, 238, 67, 63, 208, 191, 3, 63, 30, 25, 221, 61, 174, 43, 93, 190, 210, 193, 147, 190, 102, 180, 249, 62, 251, 112, 7, 191, 10, 206, 149, 189, 53, 110, 219, 190, 240, 251, 170, 189, 119, 84, 186, 63, 39, 87, 37, 191, 153, 152, 150, 62, 195, 3, 71, 189, 25, 25, 147, 190, 253, 250, 198, 190, 85, 206, 143, 190, 151, 4, 25, 62, 255, 126, 108, 190, 5, 152, 190, 189, 219, 17, 239, 62, 125, 52, 183, 61, 191, 125, 62, 190, 30, 223, 235, 62, 15, 192, 76, 62, 65, 192, 205, 62, 137, 238, 168, 61, 24, 196, 39, 61, 41, 170, 113, 189, 54, 194, 175, 190, 75, 255, 60, 190, 81, 141, 161, 190, 101, 88, 139, 62, 113, 153, 128, 190, 110, 188, 111, 61, 181, 14, 73, 62, 160, 51, 40, 190, 255, 1, 179, 189, 97, 233, 32, 62, 185, 86, 74, 188, 0, 36, 182, 62, 29, 168, 16, 190, 116, 250, 234, 189, 74, 176, 219, 62, 78, 5, 54, 62, 164, 10, 45, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 71, 6, 189, 225, 30, 114, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {207, 131, 188, 62, 114, 4, 50, 190, 63, 7, 98, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {208, 57, 148, 63, 38, 127, 181, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0094/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}