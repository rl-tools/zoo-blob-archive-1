// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {235, 137, 219, 62, 7, 125, 84, 63, 150, 91, 19, 62, 141, 4, 141, 62, 200, 143, 172, 190, 17, 114, 4, 63, 216, 195, 130, 61, 135, 63, 204, 62, 197, 24, 201, 190, 227, 56, 23, 190, 85, 51, 151, 191, 161, 208, 224, 189, 178, 84, 28, 63, 81, 172, 87, 191, 35, 9, 54, 190, 95, 159, 150, 190, 181, 91, 85, 63, 189, 94, 43, 191, 239, 88, 99, 191, 213, 137, 160, 190, 92, 132, 179, 190, 23, 13, 171, 62, 93, 143, 167, 190, 191, 75, 146, 190, 11, 155, 124, 62, 230, 126, 12, 63, 46, 112, 30, 191, 44, 204, 37, 190, 187, 217, 156, 191, 234, 213, 174, 62, 65, 82, 212, 190, 193, 188, 221, 62, 227, 42, 231, 189, 87, 252, 83, 63, 104, 142, 48, 191, 96, 131, 42, 191, 251, 225, 116, 190, 215, 70, 97, 63, 203, 213, 65, 190, 141, 121, 2, 191, 136, 1, 156, 190, 200, 89, 20, 63, 213, 175, 196, 190, 190, 251, 119, 191, 215, 26, 132, 62, 52, 131, 189, 62, 204, 198, 157, 191, 7, 33, 99, 189, 130, 119, 253, 61, 0, 187, 42, 63, 35, 200, 10, 63, 164, 239, 104, 191, 241, 220, 232, 62, 23, 172, 149, 189, 54, 254, 47, 63, 253, 126, 18, 191, 233, 203, 18, 191, 18, 22, 223, 62, 81, 129, 52, 191, 103, 39, 250, 190, 58, 52, 168, 62, 25, 108, 191, 62, 9, 133, 155, 190, 141, 57, 22, 63, 244, 202, 191, 63, 190, 128, 232, 62, 112, 214, 100, 190, 45, 17, 63, 191, 109, 145, 45, 190, 251, 99, 149, 62, 248, 183, 233, 190, 84, 180, 222, 190, 210, 59, 73, 63, 160, 230, 215, 189, 158, 232, 12, 59, 68, 200, 83, 189, 223, 210, 160, 190, 251, 72, 37, 63, 145, 175, 179, 190, 225, 145, 117, 191, 181, 189, 220, 188, 33, 248, 36, 190, 88, 117, 32, 63, 159, 66, 118, 191, 247, 57, 87, 62, 252, 138, 94, 63, 157, 140, 241, 62, 105, 7, 212, 190, 43, 199, 17, 63, 232, 235, 72, 191, 55, 41, 245, 190, 35, 72, 53, 191, 105, 24, 174, 60, 23, 146, 20, 190, 242, 48, 225, 62, 100, 121, 113, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {138, 32, 21, 191, 67, 1, 78, 62, 115, 130, 111, 62, 124, 119, 121, 62, 54, 147, 53, 61, 171, 32, 73, 189, 147, 219, 34, 61, 204, 248, 9, 188, 185, 109, 178, 62, 110, 82, 61, 61, 205, 229, 138, 62, 208, 6, 240, 61, 136, 92, 65, 63, 148, 196, 222, 59, 200, 166, 247, 189, 132, 69, 37, 63, 255, 148, 24, 63, 214, 118, 218, 190, 254, 43, 216, 190, 157, 116, 14, 189, 119, 128, 203, 62, 113, 249, 204, 60, 204, 136, 9, 63, 127, 209, 135, 189, 11, 83, 105, 190, 163, 220, 235, 190, 35, 226, 161, 60, 76, 161, 94, 61, 211, 195, 121, 62, 229, 7, 196, 190, 107, 190, 29, 189, 2, 130, 136, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 168, 241, 189, 145, 83, 235, 189, 1, 92, 32, 62, 65, 8, 185, 189, 74, 53, 165, 61, 136, 16, 89, 61, 22, 101, 232, 61, 108, 130, 14, 188, 69, 10, 47, 190, 227, 167, 132, 61, 60, 82, 185, 189, 227, 135, 24, 190, 144, 163, 148, 61, 207, 239, 163, 61, 193, 121, 54, 190, 164, 4, 79, 189, 160, 105, 110, 61, 6, 120, 151, 188, 241, 124, 111, 61, 4, 165, 35, 62, 251, 181, 5, 189, 180, 159, 66, 190, 0, 183, 147, 189, 187, 55, 43, 62, 37, 171, 44, 62, 214, 219, 191, 189, 133, 150, 185, 61, 3, 239, 38, 190, 69, 202, 189, 61, 88, 1, 33, 190, 70, 35, 184, 189, 115, 59, 29, 189, 189, 233, 190, 61, 104, 60, 82, 62, 95, 50, 10, 62, 115, 6, 48, 62, 157, 155, 56, 62, 232, 214, 79, 190, 110, 145, 237, 189, 204, 88, 172, 62, 15, 111, 206, 187, 133, 107, 235, 190, 220, 127, 35, 190, 127, 164, 79, 62, 6, 215, 198, 61, 226, 200, 221, 61, 231, 9, 56, 190, 176, 101, 154, 62, 83, 206, 63, 62, 58, 153, 127, 190, 223, 12, 41, 190, 110, 73, 125, 62, 195, 100, 60, 62, 195, 57, 189, 189, 5, 142, 140, 62, 88, 248, 74, 61, 244, 84, 147, 60, 95, 116, 137, 189, 178, 224, 147, 62, 178, 65, 210, 188, 73, 92, 135, 61, 223, 168, 207, 190, 243, 15, 167, 60, 57, 38, 245, 61, 86, 0, 146, 190, 175, 174, 42, 62, 56, 21, 26, 190, 108, 86, 110, 61, 255, 131, 193, 61, 145, 217, 145, 188, 136, 22, 250, 61, 212, 189, 13, 62, 24, 229, 193, 61, 45, 232, 129, 190, 38, 17, 51, 61, 61, 220, 88, 189, 42, 95, 152, 62, 225, 194, 22, 62, 251, 203, 208, 188, 104, 142, 102, 62, 253, 107, 30, 62, 245, 99, 187, 61, 220, 114, 115, 190, 201, 114, 123, 189, 52, 94, 157, 62, 181, 138, 30, 190, 254, 176, 138, 189, 53, 243, 140, 189, 142, 158, 103, 62, 19, 137, 250, 189, 97, 233, 101, 62, 242, 23, 90, 190, 237, 38, 210, 189, 74, 118, 129, 61, 182, 185, 253, 61, 229, 74, 61, 59, 184, 140, 30, 62, 247, 255, 233, 191, 45, 15, 9, 191, 203, 69, 143, 62, 201, 84, 16, 191, 242, 58, 20, 188, 32, 28, 140, 62, 250, 174, 197, 189, 40, 61, 69, 62, 27, 234, 70, 189, 39, 158, 170, 62, 238, 243, 16, 190, 93, 153, 89, 62, 241, 154, 44, 61, 111, 167, 47, 61, 197, 239, 131, 61, 194, 73, 5, 192, 224, 100, 160, 61, 55, 229, 147, 190, 235, 104, 177, 190, 22, 127, 43, 62, 78, 45, 172, 189, 33, 184, 26, 189, 143, 201, 7, 191, 204, 6, 15, 190, 53, 56, 157, 190, 216, 30, 59, 62, 19, 211, 137, 62, 88, 78, 97, 62, 36, 151, 172, 62, 29, 195, 159, 62, 205, 166, 207, 191, 104, 244, 173, 190, 199, 184, 173, 62, 87, 70, 125, 61, 97, 117, 130, 189, 92, 133, 121, 62, 76, 73, 115, 186, 132, 102, 154, 190, 107, 34, 215, 60, 251, 195, 104, 62, 112, 121, 185, 189, 30, 86, 150, 61, 146, 156, 227, 60, 153, 63, 138, 62, 180, 94, 128, 61, 216, 44, 64, 62, 129, 185, 130, 62, 180, 89, 245, 61, 4, 121, 159, 190, 135, 244, 73, 60, 236, 78, 31, 190, 36, 43, 67, 62, 159, 14, 254, 61, 54, 64, 151, 188, 183, 15, 132, 190, 147, 58, 77, 62, 32, 118, 7, 62, 28, 207, 158, 61, 214, 48, 135, 190, 21, 93, 41, 62, 65, 199, 194, 60, 110, 43, 222, 61, 176, 42, 0, 62, 226, 76, 85, 191, 107, 75, 209, 62, 66, 70, 248, 62, 68, 241, 144, 190, 225, 89, 85, 189, 177, 134, 57, 190, 169, 246, 12, 190, 162, 162, 59, 62, 137, 223, 166, 189, 52, 64, 88, 191, 186, 137, 249, 61, 189, 191, 118, 62, 186, 254, 129, 62, 16, 127, 110, 62, 221, 63, 28, 191, 152, 240, 78, 190, 27, 5, 199, 62, 213, 97, 79, 63, 86, 210, 82, 62, 201, 110, 145, 62, 249, 18, 119, 190, 173, 151, 6, 191, 190, 128, 128, 189, 46, 103, 214, 61, 110, 63, 137, 62, 218, 141, 65, 190, 221, 6, 138, 190, 220, 160, 227, 188, 114, 140, 214, 190, 38, 225, 83, 191, 60, 56, 250, 61, 181, 28, 134, 62, 226, 214, 29, 190, 85, 158, 78, 62, 113, 152, 168, 62, 69, 134, 140, 59, 26, 173, 185, 60, 57, 50, 1, 191, 234, 33, 59, 190, 144, 178, 20, 62, 121, 74, 94, 190, 79, 135, 232, 190, 24, 35, 234, 187, 188, 172, 208, 60, 190, 203, 226, 189, 241, 224, 174, 62, 54, 200, 201, 190, 244, 87, 149, 61, 86, 1, 20, 62, 217, 230, 246, 62, 87, 103, 235, 62, 215, 0, 236, 62, 166, 31, 233, 190, 150, 230, 217, 190, 17, 228, 109, 189, 246, 207, 113, 62, 234, 77, 200, 62, 142, 199, 179, 190, 88, 237, 21, 190, 21, 196, 137, 190, 144, 42, 96, 190, 31, 73, 72, 191, 39, 69, 138, 188, 132, 57, 117, 62, 95, 7, 98, 190, 184, 167, 172, 190, 0, 76, 210, 189, 67, 53, 152, 190, 128, 7, 88, 62, 178, 81, 172, 61, 76, 181, 188, 61, 60, 137, 2, 190, 154, 73, 10, 62, 85, 239, 128, 61, 82, 124, 189, 62, 245, 15, 83, 189, 253, 95, 108, 62, 52, 128, 178, 190, 71, 31, 130, 189, 63, 55, 138, 190, 242, 23, 217, 190, 238, 247, 188, 61, 135, 206, 138, 188, 26, 61, 20, 188, 97, 104, 32, 61, 161, 228, 60, 191, 8, 209, 75, 61, 129, 23, 222, 60, 127, 203, 1, 190, 147, 171, 12, 190, 40, 187, 28, 190, 190, 61, 82, 62, 238, 80, 129, 191, 228, 150, 166, 62, 121, 151, 170, 189, 2, 47, 119, 187, 150, 215, 189, 190, 38, 163, 158, 189, 12, 8, 191, 190, 221, 242, 33, 61, 184, 28, 230, 188, 101, 183, 156, 61, 51, 206, 244, 61, 241, 153, 155, 189, 91, 110, 140, 62, 41, 130, 9, 61, 191, 243, 228, 61, 132, 125, 40, 190, 223, 252, 130, 62, 250, 158, 220, 59, 202, 27, 4, 58, 35, 121, 69, 189, 140, 186, 164, 189, 141, 173, 21, 62, 211, 183, 48, 190, 101, 238, 137, 190, 28, 248, 188, 62, 214, 197, 237, 62, 177, 189, 197, 189, 178, 144, 29, 190, 245, 168, 196, 61, 221, 62, 51, 62, 199, 235, 23, 190, 106, 46, 166, 62, 177, 138, 46, 62, 90, 192, 209, 62, 213, 197, 107, 61, 229, 162, 186, 189, 164, 60, 240, 62, 156, 44, 92, 189, 212, 105, 159, 189, 114, 100, 142, 189, 184, 10, 152, 190, 69, 234, 145, 61, 198, 90, 20, 190, 113, 81, 253, 189, 240, 62, 127, 184, 250, 199, 36, 189, 116, 192, 99, 61, 36, 99, 16, 190, 62, 183, 85, 62, 103, 140, 35, 189, 11, 220, 193, 188, 32, 20, 181, 190, 236, 126, 192, 61, 103, 26, 11, 62, 115, 59, 22, 190, 197, 118, 39, 190, 72, 79, 170, 61, 97, 150, 228, 62, 47, 225, 228, 190, 129, 234, 98, 190, 23, 41, 140, 62, 213, 168, 114, 62, 193, 56, 97, 190, 77, 215, 234, 61, 220, 14, 153, 62, 100, 25, 92, 60, 38, 40, 78, 190, 89, 123, 151, 61, 17, 92, 135, 190, 43, 90, 157, 191, 10, 196, 219, 190, 237, 150, 37, 62, 86, 48, 62, 191, 160, 164, 145, 60, 68, 75, 146, 62, 37, 224, 193, 190, 178, 129, 49, 62, 231, 180, 108, 190, 83, 221, 137, 62, 220, 85, 81, 190, 87, 137, 181, 62, 220, 98, 84, 188, 177, 38, 138, 62, 94, 30, 86, 62, 193, 63, 150, 191, 45, 170, 163, 62, 174, 78, 0, 191, 70, 239, 165, 190, 15, 36, 2, 62, 238, 149, 27, 63, 27, 159, 216, 61, 117, 92, 100, 190, 172, 57, 195, 61, 147, 4, 120, 62, 214, 248, 140, 61, 54, 237, 165, 62, 43, 115, 86, 63, 13, 97, 137, 62, 253, 21, 253, 61, 247, 236, 97, 191, 204, 235, 10, 63, 149, 33, 181, 189, 143, 154, 150, 62, 227, 167, 84, 190, 204, 235, 248, 189, 151, 106, 28, 188, 226, 119, 202, 189, 201, 118, 133, 60, 178, 84, 49, 62, 217, 140, 185, 189, 193, 254, 234, 189, 135, 97, 118, 190, 58, 39, 29, 190, 236, 247, 59, 189, 126, 149, 77, 189, 61, 190, 230, 190, 83, 16, 205, 189, 205, 67, 192, 189, 141, 107, 89, 189, 129, 68, 157, 190, 251, 162, 128, 62, 223, 186, 80, 62, 58, 180, 212, 189, 69, 139, 187, 189, 46, 168, 31, 62, 57, 164, 34, 189, 43, 206, 150, 190, 60, 70, 94, 188, 105, 189, 183, 61, 72, 223, 30, 189, 70, 27, 137, 190, 149, 224, 123, 190, 110, 9, 8, 63, 47, 104, 134, 190, 185, 198, 35, 61, 56, 85, 69, 190, 102, 195, 152, 61, 35, 185, 129, 62, 134, 232, 253, 61, 207, 185, 42, 60, 211, 199, 230, 61, 77, 63, 129, 61, 159, 81, 82, 62, 150, 132, 188, 61, 146, 133, 183, 62, 58, 241, 176, 190, 107, 245, 37, 190, 74, 172, 155, 190, 190, 117, 151, 60, 243, 103, 120, 189, 10, 83, 20, 189, 33, 39, 158, 60, 126, 73, 246, 60, 15, 68, 21, 62, 248, 79, 50, 62, 229, 54, 66, 62, 147, 240, 159, 190, 32, 145, 238, 60, 225, 200, 248, 60, 74, 141, 194, 62, 118, 117, 166, 61, 160, 221, 175, 62, 135, 30, 129, 190, 59, 247, 41, 190, 77, 90, 183, 190, 171, 39, 49, 190, 150, 147, 245, 61, 33, 90, 190, 190, 167, 127, 121, 62, 96, 12, 169, 61, 156, 216, 131, 62, 183, 145, 38, 189, 123, 70, 74, 189, 205, 220, 238, 190, 68, 174, 89, 62, 200, 78, 124, 190, 142, 158, 112, 60, 15, 248, 117, 62, 176, 162, 224, 190, 174, 23, 2, 191, 28, 115, 2, 190, 231, 4, 175, 62, 177, 23, 37, 190, 135, 152, 70, 189, 0, 141, 218, 61, 75, 178, 47, 191, 12, 63, 217, 189, 71, 1, 89, 190, 225, 72, 102, 61, 144, 108, 98, 190, 36, 116, 25, 190, 11, 141, 25, 62, 116, 233, 142, 191, 57, 174, 108, 62, 14, 137, 172, 189, 88, 228, 223, 188, 1, 131, 155, 62, 93, 14, 150, 189, 148, 75, 111, 62, 38, 51, 166, 189, 242, 181, 35, 191, 24, 88, 9, 190, 251, 74, 255, 190, 96, 47, 110, 190, 8, 181, 152, 61, 146, 133, 165, 189, 203, 152, 237, 61, 91, 115, 142, 190, 175, 83, 133, 62, 161, 144, 244, 189, 129, 32, 119, 190, 184, 108, 93, 191, 69, 203, 23, 61, 161, 254, 4, 191, 27, 189, 28, 190, 199, 53, 16, 190, 11, 163, 144, 61, 192, 133, 143, 62, 127, 139, 13, 190, 252, 116, 178, 189, 116, 128, 26, 62, 209, 119, 135, 190, 140, 115, 166, 190, 21, 78, 146, 61, 242, 241, 196, 60, 24, 45, 124, 60, 241, 158, 153, 190, 217, 122, 145, 190, 253, 171, 121, 190, 84, 177, 134, 191, 32, 187, 90, 190, 156, 135, 10, 61, 31, 124, 148, 190, 136, 114, 190, 61, 174, 54, 149, 188, 17, 218, 50, 62, 190, 134, 152, 62, 21, 216, 230, 190, 63, 56, 238, 61, 132, 37, 172, 61, 78, 37, 80, 62, 31, 195, 128, 190, 43, 218, 195, 60, 222, 141, 8, 190, 222, 196, 56, 191, 131, 161, 90, 62, 96, 202, 135, 190, 228, 219, 31, 190, 156, 6, 77, 62, 155, 225, 179, 61, 201, 29, 67, 61, 86, 141, 126, 190, 204, 201, 27, 190, 69, 226, 107, 187, 252, 77, 67, 189, 95, 212, 132, 62, 165, 170, 161, 62, 98, 190, 182, 62, 33, 145, 186, 61, 187, 171, 143, 191, 43, 139, 19, 191, 44, 156, 231, 189, 209, 244, 96, 190, 111, 90, 230, 189, 159, 27, 241, 189, 72, 103, 165, 61, 157, 252, 116, 60, 202, 255, 63, 190, 223, 146, 70, 62, 127, 35, 123, 187, 38, 225, 128, 62, 130, 105, 33, 189, 126, 25, 68, 62, 244, 13, 254, 59, 214, 153, 218, 189, 138, 197, 159, 61, 58, 246, 173, 60, 186, 184, 119, 62, 61, 42, 68, 190, 110, 50, 2, 190, 40, 17, 80, 62, 0, 1, 182, 62, 244, 17, 230, 189, 145, 85, 150, 190, 84, 180, 165, 62, 92, 181, 195, 188, 90, 13, 68, 61, 77, 66, 137, 61, 87, 168, 164, 62, 192, 188, 176, 62, 5, 115, 130, 188, 225, 181, 188, 60, 163, 7, 155, 190, 150, 88, 54, 62, 163, 203, 132, 62, 37, 80, 32, 189, 37, 189, 172, 62, 27, 139, 243, 189, 28, 151, 23, 191, 77, 243, 126, 189, 82, 97, 190, 189, 251, 218, 51, 61, 103, 55, 185, 190, 211, 137, 232, 188, 46, 139, 18, 190, 17, 116, 121, 190, 76, 83, 90, 60, 182, 6, 163, 62, 35, 196, 69, 62, 19, 77, 161, 190, 231, 105, 212, 187, 17, 107, 116, 190, 188, 67, 231, 62, 100, 131, 166, 61, 140, 91, 26, 189, 199, 246, 138, 189, 168, 27, 40, 62, 113, 122, 182, 190, 46, 242, 212, 189, 181, 97, 67, 190, 137, 176, 206, 61, 194, 137, 180, 190, 43, 205, 165, 189, 39, 181, 109, 189, 38, 237, 32, 191, 14, 83, 156, 62, 154, 218, 2, 61, 31, 126, 119, 61, 21, 24, 30, 190, 252, 91, 36, 191, 191, 193, 212, 189, 254, 32, 133, 62, 241, 59, 178, 190, 210, 48, 198, 190, 211, 251, 211, 189, 83, 214, 138, 62, 123, 40, 194, 189, 52, 174, 183, 60, 237, 56, 150, 190, 230, 241, 238, 189, 83, 142, 132, 62, 106, 85, 153, 62, 191, 195, 222, 61, 31, 141, 155, 62, 16, 112, 208, 190, 18, 98, 0, 191, 76, 189, 226, 60, 212, 107, 90, 62, 139, 160, 2, 62, 72, 43, 142, 189, 108, 44, 214, 61, 70, 176, 225, 190, 52, 7, 152, 188, 0, 145, 133, 191, 226, 188, 183, 61, 49, 175, 230, 61, 49, 79, 7, 191, 158, 223, 209, 62, 229, 6, 125, 62, 146, 238, 35, 62, 101, 194, 248, 61, 123, 241, 229, 190, 15, 3, 92, 60, 146, 240, 41, 62, 159, 73, 120, 61, 188, 160, 204, 190, 9, 20, 237, 190, 250, 26, 200, 62, 41, 30, 79, 190, 2, 174, 56, 62, 9, 236, 143, 190, 160, 26, 148, 61, 49, 37, 23, 62, 130, 187, 146, 189, 1, 184, 124, 62, 153, 28, 94, 62, 28, 16, 96, 190, 40, 136, 227, 190, 47, 117, 47, 62, 97, 103, 44, 62, 220, 42, 102, 62, 91, 35, 133, 190, 233, 10, 126, 61, 130, 214, 166, 190, 233, 68, 60, 190, 142, 64, 74, 191, 114, 2, 143, 62, 57, 199, 26, 62, 117, 50, 7, 62, 22, 161, 202, 189, 132, 157, 154, 61, 124, 119, 100, 189, 253, 44, 161, 189, 231, 49, 159, 189, 215, 102, 117, 58, 64, 59, 250, 189, 46, 222, 11, 190, 181, 224, 54, 189, 243, 124, 244, 61, 16, 65, 137, 189, 81, 239, 79, 188, 80, 74, 170, 61, 93, 76, 171, 189, 159, 189, 25, 61, 25, 243, 14, 61, 88, 113, 1, 62, 161, 238, 5, 190, 26, 209, 30, 62, 203, 127, 153, 189, 75, 170, 191, 61, 178, 204, 34, 190, 82, 212, 239, 189, 122, 175, 124, 61, 154, 102, 43, 190, 237, 48, 53, 190, 174, 56, 240, 188, 127, 253, 218, 189, 194, 70, 27, 187, 215, 58, 242, 61, 166, 183, 85, 189, 176, 206, 101, 190, 54, 176, 38, 62, 145, 2, 201, 190, 90, 40, 235, 61, 51, 171, 255, 61, 156, 40, 202, 190, 161, 242, 241, 190, 243, 196, 105, 190, 235, 72, 13, 191, 60, 96, 19, 186, 21, 32, 97, 62, 225, 124, 216, 188, 104, 134, 233, 189, 89, 136, 153, 189, 129, 32, 235, 61, 17, 35, 176, 62, 219, 13, 168, 61, 35, 39, 26, 190, 71, 34, 215, 189, 149, 81, 162, 190, 200, 12, 210, 190, 192, 108, 138, 189, 11, 162, 157, 61, 206, 234, 75, 190, 204, 13, 169, 190, 208, 31, 78, 60, 232, 157, 50, 62, 220, 38, 230, 190, 124, 235, 15, 190, 185, 32, 22, 190, 97, 48, 95, 61, 63, 229, 147, 61, 202, 121, 148, 190, 237, 33, 72, 190, 6, 83, 228, 189, 203, 71, 215, 61, 193, 127, 222, 189, 88, 33, 230, 61, 106, 223, 108, 61, 100, 94, 242, 58, 128, 74, 133, 62, 118, 153, 169, 188, 22, 216, 8, 62, 79, 109, 135, 189, 190, 138, 61, 62, 242, 105, 210, 57, 213, 134, 222, 61, 238, 58, 6, 189, 189, 142, 142, 61, 146, 172, 249, 189, 137, 139, 60, 190, 75, 240, 128, 190, 166, 107, 90, 62, 140, 131, 205, 62, 252, 70, 2, 58, 118, 234, 205, 190, 57, 81, 186, 62, 125, 136, 145, 60, 50, 224, 61, 190, 240, 58, 75, 62, 227, 221, 185, 61, 230, 106, 174, 62, 67, 83, 150, 60, 207, 198, 2, 190, 63, 134, 148, 62, 10, 254, 246, 62, 112, 97, 36, 61, 139, 12, 239, 61, 128, 143, 10, 62, 149, 53, 69, 191, 144, 11, 2, 190, 56, 223, 233, 61, 49, 163, 206, 190, 190, 176, 21, 190, 64, 127, 21, 60, 21, 249, 160, 62, 28, 107, 81, 190, 90, 181, 167, 62, 135, 16, 78, 60, 156, 182, 4, 62, 25, 25, 182, 62, 129, 29, 236, 61, 136, 114, 255, 189, 100, 20, 159, 62, 149, 185, 128, 190, 1, 59, 71, 190, 244, 149, 232, 188, 255, 29, 41, 62, 216, 161, 101, 61, 139, 146, 106, 190, 92, 157, 193, 61, 100, 154, 38, 191, 120, 216, 77, 60, 199, 29, 185, 191, 188, 221, 128, 62, 232, 160, 174, 61, 48, 115, 175, 190, 254, 147, 0, 191, 86, 62, 23, 190, 185, 38, 85, 62, 83, 254, 7, 191, 82, 189, 74, 61, 24, 216, 4, 62, 130, 27, 122, 190, 110, 93, 49, 62, 225, 56, 181, 61, 61, 240, 156, 61, 94, 136, 156, 189, 102, 204, 52, 61, 165, 139, 180, 61, 170, 193, 238, 61, 14, 206, 132, 190, 13, 136, 248, 190, 156, 6, 115, 62, 122, 192, 208, 190, 123, 112, 155, 190, 28, 161, 169, 62, 138, 243, 15, 63, 28, 98, 25, 190, 209, 130, 54, 190, 190, 166, 77, 62, 100, 64, 17, 190, 140, 113, 134, 62, 123, 122, 135, 62, 46, 125, 14, 63, 195, 94, 146, 62, 219, 44, 158, 62, 93, 25, 216, 190, 207, 241, 143, 60, 117, 110, 193, 61, 68, 152, 173, 189, 89, 248, 30, 60, 93, 105, 27, 190, 13, 40, 18, 190, 1, 74, 183, 188, 85, 232, 27, 62, 163, 88, 220, 189, 68, 76, 238, 189, 225, 62, 208, 189, 125, 145, 231, 59, 159, 121, 167, 189, 210, 182, 157, 61, 22, 135, 90, 60, 149, 140, 202, 188, 42, 136, 16, 62, 170, 168, 131, 61, 63, 229, 166, 187, 114, 183, 51, 189, 252, 51, 19, 190, 31, 221, 178, 59, 171, 203, 204, 189, 22, 181, 131, 61, 168, 143, 27, 189, 253, 112, 21, 190, 16, 29, 244, 189, 188, 189, 219, 61, 183, 95, 26, 190, 174, 199, 161, 61, 118, 203, 172, 59, 255, 102, 59, 190, 129, 153, 146, 189, 177, 58, 171, 61, 99, 62, 50, 189, 148, 225, 54, 60, 174, 16, 53, 62, 206, 13, 6, 60, 16, 50, 125, 190, 67, 107, 133, 62, 140, 69, 152, 61, 225, 51, 103, 62, 193, 124, 116, 190, 221, 82, 74, 62, 217, 130, 174, 190, 53, 29, 108, 189, 46, 181, 136, 60, 255, 120, 118, 62, 206, 47, 3, 188, 104, 249, 30, 190, 67, 140, 112, 62, 156, 205, 154, 61, 229, 52, 178, 189, 92, 58, 163, 190, 199, 253, 211, 189, 36, 164, 45, 62, 240, 75, 116, 62, 17, 130, 176, 190, 128, 254, 136, 187, 135, 254, 185, 189, 129, 19, 196, 189, 239, 195, 80, 190, 34, 49, 148, 190, 253, 59, 164, 61, 73, 19, 182, 60, 226, 69, 29, 190, 196, 83, 63, 189, 97, 194, 205, 189, 85, 112, 209, 189, 130, 4, 228, 61, 81, 199, 175, 61, 255, 60, 130, 61, 108, 24, 148, 61, 39, 49, 150, 60, 177, 111, 44, 190, 1, 247, 176, 61, 45, 32, 145, 61, 215, 134, 189, 189, 198, 103, 159, 189, 184, 204, 199, 188, 127, 5, 4, 190, 216, 98, 72, 61, 33, 15, 164, 189, 5, 20, 26, 190, 39, 204, 26, 190, 26, 234, 160, 189, 250, 58, 18, 189, 113, 201, 144, 189, 111, 189, 190, 61, 30, 83, 10, 62, 154, 172, 38, 62, 132, 211, 224, 189, 75, 128, 173, 60, 192, 60, 151, 189, 225, 137, 32, 190, 203, 222, 108, 189, 67, 191, 173, 62, 79, 103, 175, 188, 103, 143, 246, 189, 132, 203, 114, 189, 55, 40, 39, 190, 197, 141, 146, 62, 245, 149, 122, 62, 41, 238, 94, 191, 246, 206, 122, 59, 123, 26, 60, 191, 230, 95, 20, 63, 66, 190, 89, 191, 217, 62, 15, 63, 89, 196, 200, 190, 207, 173, 96, 191, 227, 212, 58, 191, 141, 118, 17, 190, 32, 12, 38, 63, 93, 12, 55, 191, 135, 8, 74, 191, 42, 93, 153, 62, 62, 248, 108, 190, 145, 81, 46, 62, 212, 159, 57, 191, 49, 123, 80, 188, 97, 12, 123, 190, 124, 5, 187, 189, 72, 51, 206, 188, 228, 38, 119, 191, 177, 105, 151, 62, 56, 196, 174, 60, 41, 145, 18, 190, 231, 129, 164, 60, 146, 242, 181, 188, 137, 28, 49, 190, 145, 68, 130, 60, 139, 123, 8, 190, 43, 99, 86, 60, 152, 233, 200, 62, 241, 74, 56, 190, 88, 204, 35, 189, 110, 25, 237, 189, 114, 192, 226, 61, 206, 166, 128, 190, 15, 249, 46, 62, 9, 40, 128, 190, 158, 199, 70, 190, 217, 89, 21, 190, 165, 133, 81, 62, 165, 228, 130, 189, 231, 42, 206, 190, 177, 133, 215, 190, 93, 212, 130, 62, 156, 50, 140, 62, 198, 65, 184, 189, 212, 80, 171, 190, 54, 41, 47, 62, 140, 75, 169, 188, 134, 15, 67, 190, 168, 17, 45, 190, 85, 19, 91, 61, 240, 62, 143, 190, 248, 163, 8, 191, 81, 252, 255, 189, 178, 148, 235, 189, 158, 172, 145, 190, 76, 229, 131, 59, 84, 152, 23, 190, 191, 151, 128, 189, 205, 18, 156, 62, 168, 144, 72, 61, 134, 36, 109, 61, 231, 178, 92, 61, 166, 173, 152, 62, 81, 169, 147, 62, 215, 57, 214, 59, 158, 100, 175, 62, 193, 178, 145, 190, 28, 173, 155, 62, 11, 38, 185, 189, 205, 107, 196, 190, 179, 72, 8, 61, 13, 127, 225, 61, 26, 34, 34, 190, 79, 58, 136, 62, 40, 183, 230, 190, 172, 21, 213, 189, 9, 172, 225, 61, 41, 89, 141, 189, 79, 239, 199, 188, 153, 87, 161, 189, 60, 173, 109, 62, 198, 162, 0, 191, 129, 89, 146, 62, 138, 88, 133, 188, 113, 184, 172, 190, 45, 183, 3, 191, 229, 36, 43, 190, 63, 123, 225, 189, 82, 1, 191, 189, 155, 146, 126, 189, 187, 185, 139, 61, 37, 143, 128, 188, 80, 253, 227, 189, 236, 216, 25, 62, 87, 147, 17, 190, 40, 132, 65, 62, 69, 27, 185, 59, 165, 17, 143, 189, 152, 7, 24, 190, 34, 233, 203, 60, 145, 52, 176, 188, 9, 247, 70, 61, 71, 208, 125, 190, 166, 64, 132, 190, 119, 45, 204, 189, 125, 100, 198, 62, 49, 233, 158, 62, 81, 235, 218, 61, 69, 42, 153, 190, 230, 192, 53, 61, 228, 14, 229, 61, 206, 71, 177, 61, 136, 252, 40, 62, 54, 181, 114, 61, 135, 92, 119, 62, 93, 125, 220, 61, 240, 181, 108, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {160, 251, 26, 190, 7, 15, 133, 61, 224, 120, 184, 62, 116, 79, 42, 62, 184, 162, 220, 61, 184, 211, 27, 62, 194, 87, 188, 60, 32, 160, 17, 62, 98, 59, 56, 62, 107, 199, 4, 190, 1, 224, 143, 62, 142, 177, 71, 190, 242, 214, 12, 190, 70, 244, 152, 58, 252, 186, 146, 190, 113, 42, 139, 189, 6, 141, 9, 62, 5, 40, 46, 189, 116, 124, 197, 61, 186, 16, 82, 61, 224, 241, 42, 190, 196, 68, 70, 188, 30, 25, 78, 62, 80, 112, 77, 61, 58, 113, 41, 61, 42, 148, 55, 61, 183, 27, 133, 190, 5, 159, 248, 189, 76, 148, 192, 62, 155, 89, 11, 189, 220, 97, 79, 189, 145, 200, 143, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 84, 75, 189, 250, 166, 4, 62, 86, 143, 48, 61, 234, 70, 80, 191, 183, 48, 2, 190, 15, 70, 136, 63, 30, 89, 56, 63, 182, 230, 190, 62, 141, 230, 223, 190, 227, 143, 178, 189, 207, 158, 30, 191, 213, 208, 144, 62, 8, 239, 220, 62, 149, 13, 177, 62, 28, 40, 31, 63, 66, 225, 157, 190, 92, 52, 20, 190, 199, 38, 215, 190, 210, 81, 228, 62, 182, 55, 245, 62, 124, 126, 221, 61, 134, 106, 111, 190, 103, 123, 164, 190, 176, 61, 252, 62, 55, 213, 214, 190, 10, 206, 149, 189, 234, 195, 113, 190, 240, 251, 170, 189, 131, 85, 180, 63, 71, 89, 220, 190, 71, 192, 157, 62, 34, 192, 137, 189, 178, 17, 254, 189, 51, 26, 188, 190, 129, 201, 173, 190, 110, 61, 44, 62, 80, 179, 88, 190, 135, 160, 8, 62, 98, 70, 20, 63, 125, 37, 148, 61, 199, 184, 56, 190, 49, 235, 237, 62, 111, 25, 102, 62, 44, 231, 19, 63, 99, 104, 237, 61, 132, 132, 81, 61, 135, 108, 146, 62, 191, 92, 173, 190, 221, 236, 123, 190, 211, 86, 213, 190, 84, 243, 44, 62, 24, 91, 9, 190, 251, 167, 111, 61, 166, 75, 131, 62, 108, 219, 65, 190, 128, 107, 36, 190, 251, 62, 51, 62, 185, 86, 74, 188, 172, 246, 247, 62, 29, 168, 16, 190, 106, 134, 78, 189, 138, 111, 167, 62, 129, 1, 43, 62, 243, 155, 82, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 119, 66, 189, 96, 158, 104, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {49, 15, 8, 191, 33, 68, 148, 62, 178, 239, 248, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {82, 145, 226, 190, 225, 73, 54, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0094/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}