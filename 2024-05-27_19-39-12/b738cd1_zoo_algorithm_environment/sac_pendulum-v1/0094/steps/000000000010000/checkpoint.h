// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 27, 220, 62, 78, 170, 107, 63, 44, 240, 52, 62, 195, 217, 126, 62, 60, 83, 163, 190, 31, 201, 2, 63, 56, 212, 124, 61, 141, 122, 214, 62, 42, 33, 193, 190, 23, 191, 42, 190, 35, 200, 162, 191, 243, 55, 237, 189, 17, 121, 28, 63, 212, 4, 92, 191, 192, 120, 74, 190, 120, 85, 202, 190, 21, 116, 53, 63, 182, 72, 42, 191, 72, 11, 139, 191, 177, 119, 235, 190, 250, 254, 100, 190, 89, 148, 179, 62, 10, 108, 155, 190, 45, 107, 146, 190, 46, 45, 125, 62, 127, 203, 6, 63, 151, 227, 26, 191, 106, 24, 3, 190, 197, 102, 146, 191, 12, 173, 191, 62, 93, 25, 144, 190, 94, 198, 253, 62, 93, 161, 3, 190, 80, 185, 86, 63, 49, 242, 32, 191, 147, 71, 43, 191, 127, 218, 49, 190, 144, 101, 114, 63, 78, 212, 82, 190, 214, 110, 47, 191, 54, 202, 51, 190, 25, 139, 21, 63, 39, 78, 193, 190, 187, 245, 78, 191, 34, 178, 155, 62, 2, 81, 193, 62, 76, 72, 165, 191, 89, 77, 138, 59, 24, 73, 239, 61, 121, 132, 33, 63, 213, 135, 16, 63, 107, 159, 115, 191, 101, 211, 223, 62, 116, 41, 151, 188, 180, 193, 56, 63, 14, 94, 20, 191, 119, 70, 14, 191, 155, 253, 231, 62, 168, 72, 49, 191, 211, 235, 247, 190, 70, 17, 167, 62, 237, 162, 202, 62, 52, 240, 154, 190, 215, 64, 24, 63, 72, 5, 195, 63, 174, 184, 215, 62, 42, 253, 111, 190, 159, 200, 92, 191, 7, 222, 25, 190, 63, 124, 159, 62, 78, 188, 239, 190, 41, 103, 218, 190, 26, 21, 77, 63, 166, 208, 13, 189, 20, 13, 41, 61, 172, 92, 245, 61, 63, 160, 166, 190, 160, 73, 37, 63, 241, 226, 173, 190, 218, 247, 114, 191, 169, 80, 120, 189, 235, 59, 156, 190, 35, 67, 247, 62, 77, 44, 115, 191, 144, 137, 50, 62, 98, 50, 95, 63, 88, 223, 246, 62, 47, 9, 235, 190, 184, 212, 7, 63, 97, 17, 75, 191, 171, 78, 7, 191, 25, 190, 51, 191, 180, 202, 34, 61, 10, 103, 122, 190, 80, 161, 248, 62, 158, 165, 110, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {70, 61, 13, 191, 19, 142, 77, 62, 24, 135, 88, 62, 111, 180, 123, 62, 157, 43, 241, 188, 212, 52, 227, 189, 94, 192, 233, 61, 66, 248, 42, 189, 170, 137, 187, 62, 158, 29, 18, 61, 240, 183, 98, 62, 115, 65, 176, 61, 228, 116, 49, 63, 245, 81, 229, 61, 152, 91, 41, 190, 120, 173, 21, 63, 248, 103, 23, 63, 162, 254, 184, 190, 113, 248, 227, 190, 169, 31, 96, 189, 8, 14, 206, 62, 92, 8, 122, 61, 174, 70, 1, 63, 228, 121, 165, 189, 135, 178, 62, 190, 64, 201, 21, 191, 207, 178, 243, 60, 246, 61, 155, 60, 167, 67, 125, 62, 166, 249, 226, 190, 208, 204, 22, 189, 64, 143, 190, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 250, 119, 189, 30, 20, 251, 189, 175, 227, 238, 61, 237, 181, 65, 190, 5, 182, 127, 61, 163, 187, 81, 189, 105, 45, 28, 62, 108, 130, 14, 188, 135, 156, 90, 190, 176, 170, 49, 187, 122, 210, 13, 189, 227, 31, 23, 190, 158, 153, 19, 62, 95, 66, 197, 61, 10, 3, 122, 190, 1, 138, 9, 190, 196, 171, 203, 61, 246, 185, 24, 59, 241, 124, 111, 61, 4, 165, 35, 62, 143, 190, 75, 189, 86, 175, 29, 190, 197, 83, 195, 189, 187, 55, 43, 62, 198, 202, 13, 61, 22, 72, 255, 189, 230, 50, 77, 60, 93, 215, 83, 190, 46, 153, 10, 62, 114, 10, 19, 190, 157, 159, 25, 190, 188, 14, 171, 59, 75, 119, 0, 61, 35, 205, 26, 62, 123, 129, 32, 62, 108, 110, 62, 62, 11, 49, 76, 62, 107, 214, 71, 190, 105, 206, 250, 189, 85, 136, 178, 62, 233, 249, 179, 60, 73, 145, 242, 190, 20, 103, 26, 190, 107, 21, 90, 62, 93, 30, 202, 61, 127, 116, 4, 62, 183, 189, 59, 190, 188, 183, 147, 62, 195, 8, 44, 62, 160, 34, 93, 190, 208, 170, 253, 189, 206, 155, 132, 62, 3, 76, 81, 62, 226, 116, 178, 189, 190, 220, 148, 62, 206, 181, 128, 61, 61, 127, 9, 188, 181, 158, 216, 189, 233, 213, 141, 62, 54, 237, 233, 187, 210, 52, 70, 61, 116, 66, 215, 190, 239, 131, 187, 188, 246, 48, 231, 61, 215, 117, 168, 190, 251, 121, 165, 61, 255, 8, 6, 190, 200, 114, 156, 61, 119, 140, 5, 62, 74, 180, 61, 188, 164, 116, 230, 61, 43, 1, 30, 62, 162, 93, 242, 61, 161, 222, 149, 190, 34, 128, 16, 61, 38, 248, 22, 189, 24, 111, 147, 62, 202, 121, 226, 61, 198, 185, 150, 189, 179, 111, 100, 62, 99, 170, 189, 61, 164, 132, 158, 61, 27, 212, 83, 190, 226, 246, 38, 189, 153, 197, 166, 62, 248, 224, 30, 190, 138, 251, 123, 189, 151, 7, 62, 189, 238, 158, 69, 62, 53, 236, 59, 190, 170, 171, 96, 62, 4, 123, 73, 190, 251, 182, 25, 190, 210, 85, 111, 61, 205, 148, 111, 61, 227, 164, 60, 189, 69, 193, 144, 189, 38, 178, 224, 191, 152, 233, 6, 191, 206, 188, 155, 62, 89, 102, 13, 191, 90, 240, 11, 188, 223, 27, 142, 62, 26, 91, 183, 189, 172, 49, 75, 62, 149, 231, 32, 61, 130, 98, 174, 62, 151, 139, 8, 190, 52, 43, 107, 62, 209, 231, 34, 188, 85, 218, 98, 61, 45, 97, 250, 61, 87, 252, 5, 192, 69, 202, 217, 61, 33, 75, 153, 190, 254, 136, 175, 190, 220, 18, 56, 62, 52, 0, 13, 189, 20, 173, 142, 188, 248, 246, 6, 191, 54, 67, 86, 189, 53, 56, 157, 190, 70, 235, 93, 62, 153, 69, 137, 62, 104, 228, 4, 62, 8, 39, 169, 62, 108, 146, 176, 62, 170, 170, 205, 191, 210, 154, 190, 190, 111, 6, 173, 62, 67, 219, 161, 61, 153, 60, 60, 190, 176, 203, 101, 62, 54, 226, 241, 187, 204, 34, 246, 190, 38, 171, 17, 187, 112, 33, 108, 62, 187, 47, 210, 189, 181, 54, 151, 61, 172, 255, 23, 60, 182, 157, 142, 62, 61, 128, 183, 60, 149, 170, 41, 62, 114, 249, 97, 62, 184, 166, 199, 61, 122, 185, 202, 190, 239, 94, 128, 189, 55, 59, 68, 190, 144, 76, 68, 62, 199, 155, 6, 62, 194, 240, 53, 190, 186, 250, 153, 190, 216, 27, 57, 62, 131, 127, 36, 62, 111, 224, 144, 60, 46, 177, 140, 190, 81, 15, 30, 62, 74, 154, 157, 186, 119, 129, 117, 61, 81, 212, 222, 61, 92, 70, 139, 191, 185, 107, 203, 62, 11, 6, 238, 62, 8, 215, 110, 190, 248, 186, 59, 189, 107, 221, 111, 190, 41, 225, 10, 190, 242, 67, 55, 62, 37, 189, 180, 189, 17, 208, 78, 191, 80, 75, 34, 62, 59, 192, 117, 62, 117, 217, 134, 62, 78, 29, 151, 62, 242, 71, 22, 191, 91, 19, 62, 190, 238, 239, 197, 62, 50, 221, 90, 63, 137, 108, 84, 62, 60, 224, 146, 62, 65, 92, 122, 190, 210, 96, 4, 191, 62, 170, 57, 189, 222, 17, 203, 61, 118, 202, 135, 62, 245, 154, 64, 190, 14, 218, 71, 190, 229, 222, 97, 189, 202, 114, 213, 190, 91, 26, 114, 191, 57, 217, 54, 62, 192, 60, 158, 62, 147, 76, 77, 190, 238, 124, 117, 62, 156, 102, 85, 62, 89, 105, 235, 61, 89, 119, 208, 61, 30, 23, 253, 190, 108, 117, 202, 190, 131, 68, 1, 62, 225, 97, 171, 190, 222, 140, 206, 190, 59, 93, 49, 189, 249, 241, 50, 60, 216, 71, 69, 190, 185, 118, 166, 62, 50, 160, 206, 190, 40, 43, 22, 62, 255, 61, 15, 62, 15, 167, 213, 62, 149, 116, 218, 62, 120, 134, 231, 62, 212, 227, 5, 191, 105, 241, 220, 190, 140, 207, 146, 189, 185, 37, 83, 62, 77, 10, 211, 62, 89, 174, 175, 190, 118, 227, 65, 190, 163, 149, 156, 190, 224, 68, 99, 190, 122, 245, 68, 191, 45, 169, 251, 189, 37, 93, 124, 62, 158, 207, 65, 190, 184, 167, 172, 190, 76, 201, 218, 189, 215, 12, 179, 190, 225, 127, 94, 62, 230, 7, 152, 61, 139, 185, 143, 61, 202, 5, 249, 189, 194, 217, 13, 62, 66, 44, 94, 62, 137, 173, 181, 62, 152, 76, 48, 189, 158, 131, 104, 62, 26, 221, 68, 190, 27, 36, 54, 62, 79, 200, 144, 190, 173, 75, 215, 190, 5, 37, 68, 61, 2, 183, 127, 187, 194, 101, 31, 188, 182, 209, 79, 61, 228, 251, 73, 191, 224, 107, 224, 60, 26, 0, 204, 60, 97, 160, 57, 189, 147, 171, 12, 190, 251, 30, 58, 190, 92, 117, 76, 62, 108, 207, 132, 191, 156, 118, 161, 62, 228, 254, 181, 189, 246, 178, 70, 189, 88, 89, 196, 190, 226, 152, 55, 189, 53, 77, 185, 190, 128, 55, 12, 188, 88, 127, 52, 189, 12, 237, 158, 61, 182, 128, 203, 61, 229, 102, 137, 189, 173, 70, 141, 62, 158, 207, 44, 61, 22, 61, 173, 61, 84, 77, 32, 190, 123, 119, 124, 62, 205, 28, 58, 188, 120, 185, 163, 187, 5, 95, 64, 189, 202, 15, 165, 189, 6, 92, 189, 61, 54, 72, 56, 190, 161, 107, 134, 190, 86, 199, 190, 62, 35, 141, 240, 62, 29, 7, 37, 190, 125, 167, 18, 190, 10, 32, 203, 61, 112, 229, 103, 62, 211, 159, 28, 190, 87, 117, 166, 62, 65, 227, 54, 62, 163, 103, 212, 62, 158, 74, 113, 61, 23, 218, 169, 189, 169, 32, 4, 63, 104, 35, 206, 188, 64, 34, 188, 189, 235, 26, 74, 61, 35, 214, 167, 190, 76, 203, 144, 61, 114, 206, 167, 60, 8, 79, 23, 190, 231, 143, 196, 188, 207, 59, 157, 188, 194, 111, 173, 61, 128, 21, 38, 190, 9, 104, 109, 62, 229, 120, 73, 189, 251, 68, 178, 188, 255, 179, 143, 190, 47, 4, 194, 61, 39, 24, 60, 62, 52, 29, 58, 190, 225, 14, 116, 190, 163, 48, 148, 61, 194, 139, 209, 62, 34, 139, 147, 190, 212, 24, 145, 190, 196, 45, 176, 62, 192, 13, 102, 62, 122, 224, 131, 189, 125, 73, 236, 61, 17, 214, 139, 62, 146, 190, 92, 60, 184, 126, 152, 189, 243, 75, 100, 61, 14, 192, 169, 190, 137, 189, 153, 191, 168, 254, 218, 190, 174, 43, 15, 62, 4, 57, 77, 191, 1, 131, 152, 60, 22, 223, 149, 62, 26, 22, 199, 190, 255, 121, 44, 62, 164, 48, 160, 190, 153, 177, 140, 62, 54, 193, 87, 190, 20, 247, 185, 62, 168, 213, 219, 188, 193, 139, 42, 62, 82, 243, 46, 62, 47, 21, 153, 191, 71, 133, 194, 62, 173, 2, 8, 191, 157, 49, 176, 190, 13, 108, 254, 61, 109, 137, 16, 63, 155, 100, 200, 61, 81, 41, 116, 190, 74, 100, 7, 62, 207, 44, 130, 62, 139, 67, 95, 61, 67, 132, 163, 62, 97, 80, 69, 63, 251, 47, 135, 62, 124, 103, 242, 61, 230, 195, 115, 191, 213, 50, 2, 63, 166, 11, 102, 189, 120, 115, 128, 62, 227, 167, 84, 190, 136, 21, 11, 190, 56, 24, 67, 188, 116, 204, 28, 190, 26, 213, 96, 189, 150, 46, 250, 61, 217, 140, 185, 189, 132, 158, 236, 189, 21, 13, 182, 190, 245, 43, 49, 190, 193, 222, 163, 189, 126, 149, 77, 189, 18, 226, 220, 190, 7, 79, 210, 189, 151, 199, 168, 189, 82, 94, 147, 189, 56, 187, 176, 190, 202, 152, 77, 62, 132, 192, 65, 62, 71, 199, 34, 190, 46, 106, 10, 190, 44, 125, 222, 61, 96, 144, 243, 188, 43, 206, 150, 190, 36, 217, 26, 189, 154, 142, 179, 61, 86, 253, 133, 188, 70, 27, 137, 190, 66, 5, 104, 190, 59, 111, 228, 62, 14, 123, 157, 190, 150, 253, 250, 60, 109, 0, 136, 190, 58, 103, 142, 61, 250, 171, 126, 62, 172, 209, 154, 61, 105, 55, 194, 59, 8, 147, 221, 61, 157, 197, 4, 62, 163, 51, 84, 62, 255, 50, 171, 61, 243, 227, 180, 62, 69, 45, 137, 190, 224, 185, 68, 189, 181, 174, 170, 190, 177, 223, 20, 187, 204, 178, 194, 189, 241, 204, 128, 188, 55, 250, 137, 60, 187, 17, 204, 60, 156, 223, 250, 61, 132, 241, 2, 62, 55, 109, 64, 62, 255, 161, 168, 190, 18, 185, 138, 60, 50, 34, 4, 189, 190, 151, 193, 62, 162, 93, 135, 61, 69, 16, 171, 62, 128, 219, 156, 190, 8, 10, 214, 189, 127, 9, 176, 190, 211, 39, 49, 190, 250, 56, 248, 61, 186, 145, 221, 190, 194, 65, 158, 62, 18, 22, 175, 61, 138, 95, 102, 62, 91, 14, 160, 57, 35, 180, 37, 189, 206, 10, 214, 190, 162, 148, 56, 62, 168, 53, 85, 190, 29, 246, 99, 188, 224, 239, 142, 62, 141, 245, 194, 190, 234, 178, 22, 191, 157, 7, 116, 190, 20, 114, 145, 62, 191, 25, 219, 189, 73, 14, 86, 188, 234, 239, 233, 61, 32, 180, 92, 191, 127, 129, 13, 190, 31, 11, 56, 190, 231, 6, 175, 61, 144, 108, 98, 190, 162, 108, 108, 190, 238, 122, 34, 62, 231, 150, 164, 191, 86, 36, 121, 62, 188, 46, 42, 190, 100, 134, 195, 189, 160, 28, 159, 62, 106, 80, 65, 189, 166, 137, 114, 62, 38, 51, 166, 189, 190, 48, 108, 191, 17, 155, 200, 189, 27, 109, 15, 191, 164, 163, 210, 190, 183, 17, 104, 61, 229, 147, 186, 189, 43, 212, 114, 62, 188, 126, 1, 191, 101, 204, 175, 62, 70, 136, 39, 189, 97, 190, 154, 190, 105, 250, 134, 191, 19, 61, 7, 62, 198, 141, 212, 190, 102, 84, 128, 190, 9, 211, 131, 190, 246, 97, 128, 61, 74, 190, 180, 62, 113, 243, 136, 190, 41, 247, 79, 190, 86, 29, 67, 189, 226, 154, 135, 190, 140, 115, 166, 190, 222, 163, 130, 61, 216, 36, 251, 61, 231, 36, 23, 61, 1, 76, 153, 190, 191, 49, 75, 190, 135, 12, 37, 190, 130, 218, 137, 191, 252, 52, 91, 190, 213, 207, 228, 61, 9, 216, 140, 190, 160, 21, 190, 61, 69, 182, 61, 60, 203, 76, 47, 62, 219, 101, 149, 62, 214, 101, 18, 191, 75, 141, 244, 61, 85, 182, 166, 61, 89, 247, 75, 62, 141, 114, 213, 190, 104, 187, 59, 190, 162, 101, 209, 189, 240, 228, 47, 191, 55, 202, 133, 62, 95, 227, 142, 190, 209, 158, 27, 190, 190, 135, 65, 62, 122, 248, 21, 62, 119, 198, 166, 61, 102, 8, 121, 190, 74, 145, 66, 190, 69, 226, 107, 187, 173, 46, 240, 59, 29, 123, 132, 62, 20, 20, 182, 62, 158, 82, 182, 62, 75, 198, 214, 61, 106, 107, 141, 191, 70, 158, 27, 191, 145, 11, 188, 189, 184, 42, 91, 190, 39, 152, 75, 190, 43, 2, 41, 190, 241, 189, 162, 61, 12, 235, 125, 188, 196, 153, 84, 190, 250, 229, 66, 62, 76, 176, 34, 60, 22, 96, 106, 62, 251, 193, 104, 189, 128, 95, 52, 62, 25, 3, 194, 187, 123, 138, 200, 189, 175, 95, 52, 61, 172, 214, 88, 60, 109, 160, 67, 62, 219, 61, 105, 190, 125, 216, 22, 190, 207, 119, 74, 62, 247, 170, 186, 62, 224, 141, 85, 190, 155, 76, 156, 190, 227, 253, 155, 62, 244, 10, 250, 60, 60, 41, 226, 60, 213, 37, 128, 61, 109, 98, 166, 62, 100, 208, 175, 62, 99, 107, 0, 189, 66, 179, 10, 61, 133, 130, 95, 190, 24, 213, 99, 62, 38, 76, 145, 62, 136, 174, 98, 61, 173, 101, 175, 62, 49, 157, 18, 190, 174, 91, 56, 191, 215, 198, 134, 189, 71, 206, 168, 189, 194, 170, 239, 61, 218, 132, 137, 190, 107, 39, 232, 188, 5, 28, 226, 189, 100, 116, 87, 190, 125, 182, 184, 61, 196, 173, 178, 62, 139, 241, 99, 62, 149, 212, 50, 191, 180, 217, 96, 189, 149, 142, 117, 190, 136, 212, 235, 62, 52, 22, 235, 61, 87, 250, 43, 188, 171, 57, 171, 189, 132, 215, 32, 62, 145, 48, 157, 190, 246, 116, 64, 61, 93, 98, 92, 190, 0, 173, 1, 62, 112, 49, 222, 190, 206, 128, 120, 61, 92, 143, 11, 189, 222, 3, 19, 191, 235, 146, 157, 62, 195, 124, 18, 190, 196, 52, 15, 62, 236, 201, 186, 189, 99, 239, 89, 191, 127, 118, 1, 189, 25, 235, 91, 62, 130, 175, 243, 190, 92, 206, 199, 190, 241, 95, 185, 189, 64, 51, 114, 62, 3, 60, 209, 189, 229, 45, 29, 61, 240, 103, 154, 190, 241, 61, 214, 189, 27, 229, 142, 62, 167, 82, 220, 62, 244, 43, 127, 61, 185, 114, 82, 62, 44, 209, 221, 190, 75, 107, 250, 190, 121, 207, 199, 61, 87, 33, 181, 61, 250, 80, 69, 62, 130, 102, 192, 189, 71, 251, 181, 61, 113, 44, 41, 191, 140, 7, 33, 188, 178, 117, 134, 191, 96, 133, 99, 61, 66, 178, 241, 61, 225, 193, 126, 191, 226, 96, 207, 62, 50, 22, 108, 62, 56, 94, 72, 62, 8, 180, 208, 61, 46, 201, 6, 191, 92, 4, 231, 61, 185, 177, 9, 62, 155, 233, 121, 61, 122, 196, 178, 190, 213, 168, 1, 191, 252, 201, 189, 62, 103, 159, 81, 190, 250, 37, 101, 62, 144, 9, 97, 190, 203, 124, 210, 61, 33, 34, 9, 62, 80, 91, 239, 189, 42, 198, 89, 62, 71, 63, 30, 62, 89, 63, 86, 190, 174, 30, 248, 190, 82, 79, 109, 62, 241, 221, 203, 61, 208, 134, 124, 62, 249, 21, 155, 190, 120, 250, 247, 61, 34, 60, 194, 190, 248, 89, 107, 190, 11, 238, 104, 191, 101, 205, 177, 62, 113, 119, 0, 62, 117, 50, 7, 62, 22, 161, 202, 189, 132, 157, 154, 61, 124, 119, 100, 189, 253, 44, 161, 189, 231, 49, 159, 189, 215, 102, 117, 58, 64, 59, 250, 189, 46, 222, 11, 190, 181, 224, 54, 189, 243, 124, 244, 61, 16, 65, 137, 189, 81, 239, 79, 188, 80, 74, 170, 61, 93, 76, 171, 189, 159, 189, 25, 61, 25, 243, 14, 61, 88, 113, 1, 62, 161, 238, 5, 190, 26, 209, 30, 62, 203, 127, 153, 189, 75, 170, 191, 61, 178, 204, 34, 190, 82, 212, 239, 189, 122, 175, 124, 61, 154, 102, 43, 190, 237, 48, 53, 190, 174, 56, 240, 188, 127, 253, 218, 189, 194, 70, 27, 187, 215, 58, 242, 61, 166, 183, 85, 189, 41, 3, 223, 190, 249, 160, 60, 62, 109, 122, 182, 190, 216, 203, 44, 61, 31, 133, 0, 62, 225, 43, 202, 190, 162, 161, 77, 191, 143, 58, 72, 190, 28, 78, 11, 191, 44, 7, 125, 60, 16, 49, 88, 62, 109, 250, 68, 187, 139, 139, 241, 189, 247, 212, 184, 189, 77, 177, 243, 61, 43, 216, 183, 62, 46, 206, 135, 61, 239, 61, 169, 190, 164, 44, 12, 190, 135, 200, 92, 190, 156, 44, 15, 191, 130, 150, 205, 189, 164, 213, 72, 189, 14, 173, 17, 190, 60, 93, 204, 190, 97, 188, 78, 61, 27, 186, 39, 62, 116, 200, 225, 190, 142, 199, 25, 190, 185, 32, 22, 190, 31, 12, 96, 61, 3, 161, 154, 61, 93, 154, 116, 190, 119, 31, 79, 190, 6, 89, 236, 189, 66, 53, 20, 61, 225, 92, 15, 190, 58, 154, 204, 61, 114, 250, 76, 61, 129, 41, 176, 188, 159, 40, 125, 62, 144, 87, 132, 189, 248, 201, 230, 61, 177, 226, 175, 189, 216, 157, 52, 62, 119, 77, 101, 189, 248, 219, 87, 61, 120, 150, 102, 189, 150, 2, 92, 61, 87, 17, 243, 189, 121, 214, 105, 190, 247, 201, 145, 190, 238, 109, 82, 62, 230, 11, 203, 62, 97, 61, 102, 189, 144, 170, 219, 190, 86, 76, 189, 62, 143, 30, 160, 59, 234, 78, 99, 190, 214, 255, 55, 62, 19, 192, 155, 61, 205, 103, 168, 62, 162, 104, 166, 188, 62, 133, 40, 190, 235, 45, 137, 62, 180, 193, 232, 62, 30, 167, 93, 60, 140, 24, 75, 62, 123, 175, 221, 61, 13, 210, 43, 191, 13, 155, 245, 61, 39, 226, 177, 61, 168, 39, 214, 190, 98, 203, 28, 190, 117, 94, 137, 61, 108, 84, 148, 62, 222, 202, 90, 190, 206, 153, 187, 62, 41, 75, 168, 60, 54, 37, 230, 61, 223, 32, 182, 62, 199, 19, 163, 62, 109, 36, 251, 189, 146, 182, 135, 62, 186, 139, 136, 190, 184, 120, 85, 190, 149, 82, 150, 61, 19, 84, 245, 61, 173, 43, 45, 61, 106, 143, 138, 190, 25, 66, 242, 61, 152, 60, 31, 191, 200, 162, 110, 58, 53, 15, 173, 191, 39, 102, 137, 62, 219, 205, 180, 61, 82, 186, 148, 189, 1, 134, 226, 190, 118, 251, 16, 190, 85, 214, 88, 62, 22, 152, 21, 191, 144, 239, 100, 61, 70, 39, 29, 62, 49, 196, 133, 190, 229, 6, 49, 62, 223, 210, 7, 189, 143, 69, 137, 61, 103, 70, 179, 189, 75, 98, 54, 61, 86, 128, 178, 187, 189, 166, 146, 187, 29, 243, 142, 190, 97, 247, 244, 190, 213, 241, 130, 62, 23, 16, 231, 190, 81, 141, 171, 190, 101, 77, 171, 62, 249, 135, 18, 63, 175, 10, 31, 190, 194, 159, 80, 190, 225, 229, 102, 62, 173, 68, 61, 190, 146, 4, 140, 62, 136, 16, 136, 62, 158, 138, 13, 63, 248, 145, 149, 62, 197, 166, 168, 62, 102, 118, 24, 191, 207, 241, 143, 60, 117, 110, 193, 61, 68, 152, 173, 189, 89, 248, 30, 60, 93, 105, 27, 190, 13, 40, 18, 190, 1, 74, 183, 188, 85, 232, 27, 62, 163, 88, 220, 189, 68, 76, 238, 189, 225, 62, 208, 189, 125, 145, 231, 59, 159, 121, 167, 189, 210, 182, 157, 61, 22, 135, 90, 60, 149, 140, 202, 188, 42, 136, 16, 62, 170, 168, 131, 61, 63, 229, 166, 187, 114, 183, 51, 189, 252, 51, 19, 190, 31, 221, 178, 59, 171, 203, 204, 189, 22, 181, 131, 61, 168, 143, 27, 189, 253, 112, 21, 190, 16, 29, 244, 189, 188, 189, 219, 61, 183, 95, 26, 190, 174, 199, 161, 61, 118, 203, 172, 59, 255, 102, 59, 190, 129, 153, 146, 189, 108, 72, 53, 61, 15, 207, 164, 189, 240, 21, 147, 61, 175, 167, 93, 62, 201, 215, 4, 189, 75, 227, 86, 190, 82, 44, 133, 62, 95, 238, 31, 61, 121, 68, 116, 62, 204, 123, 148, 190, 236, 88, 74, 62, 204, 165, 190, 190, 236, 65, 68, 190, 110, 55, 107, 61, 82, 248, 143, 62, 251, 83, 55, 189, 149, 64, 103, 190, 207, 95, 87, 62, 111, 89, 184, 61, 83, 102, 0, 190, 215, 79, 142, 190, 213, 61, 88, 189, 80, 165, 46, 62, 55, 222, 71, 62, 124, 84, 235, 190, 169, 227, 127, 61, 75, 24, 255, 189, 214, 167, 26, 190, 64, 74, 96, 190, 68, 202, 61, 190, 45, 184, 221, 189, 73, 19, 182, 60, 226, 69, 29, 190, 196, 83, 63, 189, 97, 194, 205, 189, 85, 112, 209, 189, 130, 4, 228, 61, 81, 199, 175, 61, 255, 60, 130, 61, 108, 24, 148, 61, 39, 49, 150, 60, 177, 111, 44, 190, 1, 247, 176, 61, 45, 32, 145, 61, 215, 134, 189, 189, 198, 103, 159, 189, 184, 204, 199, 188, 127, 5, 4, 190, 216, 98, 72, 61, 33, 15, 164, 189, 5, 20, 26, 190, 39, 204, 26, 190, 26, 234, 160, 189, 250, 58, 18, 189, 113, 201, 144, 189, 111, 189, 190, 61, 30, 83, 10, 62, 154, 172, 38, 62, 132, 211, 224, 189, 75, 128, 173, 60, 192, 60, 151, 189, 225, 137, 32, 190, 203, 222, 108, 189, 246, 199, 10, 63, 100, 37, 20, 190, 98, 203, 241, 189, 109, 79, 172, 61, 162, 149, 187, 61, 138, 157, 144, 62, 199, 151, 84, 62, 225, 209, 105, 191, 57, 133, 32, 60, 230, 218, 55, 191, 218, 62, 15, 63, 208, 88, 101, 191, 138, 254, 11, 63, 205, 159, 5, 191, 46, 221, 94, 191, 74, 96, 12, 191, 98, 55, 59, 190, 181, 142, 14, 63, 174, 147, 72, 191, 101, 38, 77, 191, 140, 40, 159, 62, 220, 168, 11, 189, 131, 195, 42, 62, 248, 38, 61, 191, 198, 19, 164, 190, 192, 37, 125, 190, 42, 146, 158, 60, 18, 203, 210, 188, 252, 157, 109, 191, 196, 224, 147, 62, 0, 115, 154, 61, 120, 206, 131, 190, 190, 151, 139, 62, 155, 115, 175, 60, 105, 210, 63, 190, 174, 189, 124, 189, 134, 28, 45, 190, 87, 211, 8, 189, 198, 213, 33, 63, 74, 12, 100, 190, 39, 85, 130, 189, 52, 37, 144, 189, 17, 156, 175, 61, 236, 61, 143, 190, 4, 231, 35, 62, 210, 5, 134, 190, 209, 179, 103, 190, 232, 216, 23, 190, 143, 201, 98, 62, 19, 52, 71, 188, 209, 219, 8, 191, 36, 246, 2, 191, 114, 88, 118, 62, 28, 188, 137, 62, 83, 237, 124, 189, 63, 239, 222, 190, 10, 237, 75, 62, 230, 126, 18, 59, 249, 217, 62, 190, 61, 12, 53, 190, 7, 22, 117, 61, 71, 176, 145, 190, 252, 252, 237, 190, 44, 235, 235, 189, 231, 243, 126, 189, 208, 6, 150, 190, 231, 41, 123, 186, 246, 45, 119, 190, 170, 8, 196, 189, 242, 64, 152, 62, 51, 146, 255, 59, 229, 116, 47, 61, 26, 199, 97, 61, 9, 195, 183, 62, 172, 28, 145, 62, 239, 0, 229, 187, 104, 120, 178, 62, 174, 250, 16, 190, 144, 208, 230, 62, 91, 53, 20, 190, 235, 117, 190, 190, 82, 239, 140, 188, 52, 141, 223, 61, 181, 150, 56, 190, 119, 157, 141, 62, 129, 177, 233, 190, 252, 50, 30, 190, 234, 9, 181, 61, 121, 153, 229, 188, 79, 239, 199, 188, 26, 249, 25, 190, 143, 193, 100, 62, 72, 159, 245, 190, 161, 132, 140, 62, 218, 2, 90, 189, 215, 160, 204, 190, 186, 35, 13, 191, 164, 10, 46, 190, 72, 21, 212, 189, 147, 130, 19, 190, 118, 66, 160, 189, 201, 41, 130, 61, 219, 196, 39, 189, 161, 221, 242, 189, 226, 187, 25, 62, 68, 215, 19, 190, 22, 82, 43, 62, 96, 191, 178, 186, 83, 87, 176, 189, 119, 245, 34, 190, 230, 128, 165, 60, 40, 229, 129, 189, 119, 229, 13, 61, 226, 121, 134, 190, 81, 145, 137, 190, 24, 166, 211, 189, 219, 26, 196, 62, 49, 205, 164, 62, 48, 200, 35, 61, 85, 105, 152, 190, 76, 102, 89, 60, 144, 248, 23, 62, 91, 161, 95, 61, 30, 195, 37, 62, 137, 10, 116, 61, 216, 28, 110, 62, 52, 4, 125, 61, 119, 133, 133, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 211, 17, 190, 244, 206, 147, 61, 208, 127, 173, 62, 247, 181, 90, 62, 243, 111, 119, 61, 195, 175, 35, 62, 48, 59, 74, 58, 71, 23, 16, 62, 116, 2, 24, 62, 110, 243, 143, 189, 41, 30, 151, 62, 136, 76, 99, 190, 15, 243, 37, 190, 138, 134, 116, 189, 47, 178, 103, 190, 98, 159, 114, 189, 117, 211, 168, 61, 218, 6, 215, 188, 179, 179, 35, 62, 70, 223, 174, 61, 224, 241, 42, 190, 119, 120, 222, 189, 42, 60, 54, 62, 122, 152, 152, 61, 15, 175, 73, 61, 42, 148, 55, 61, 37, 179, 128, 190, 5, 159, 248, 189, 82, 196, 184, 62, 29, 221, 172, 188, 77, 136, 114, 189, 55, 66, 106, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 155, 132, 189, 67, 177, 230, 61, 66, 59, 100, 61, 122, 14, 79, 191, 210, 44, 6, 190, 255, 77, 137, 63, 97, 121, 94, 63, 197, 242, 184, 62, 206, 41, 215, 190, 220, 4, 160, 189, 188, 232, 35, 191, 108, 200, 178, 62, 191, 129, 218, 62, 120, 232, 179, 62, 169, 5, 87, 63, 196, 219, 154, 190, 38, 160, 9, 190, 49, 215, 222, 190, 148, 163, 248, 62, 34, 3, 5, 63, 124, 126, 221, 61, 113, 132, 153, 190, 35, 101, 156, 190, 139, 77, 252, 62, 50, 154, 238, 190, 10, 206, 149, 189, 222, 175, 185, 190, 240, 251, 170, 189, 241, 67, 177, 63, 248, 60, 26, 191, 117, 114, 156, 62, 21, 217, 77, 189, 54, 215, 4, 190, 58, 119, 191, 190, 95, 185, 138, 190, 169, 52, 29, 62, 191, 218, 89, 190, 97, 162, 0, 62, 211, 118, 13, 63, 37, 152, 167, 61, 239, 68, 65, 190, 93, 10, 208, 62, 96, 90, 66, 62, 57, 99, 217, 62, 235, 255, 196, 61, 46, 209, 83, 61, 82, 118, 237, 61, 33, 29, 170, 190, 30, 224, 125, 190, 24, 28, 180, 190, 156, 128, 124, 62, 203, 69, 15, 190, 251, 167, 111, 61, 178, 237, 106, 62, 223, 106, 71, 190, 10, 108, 169, 189, 154, 69, 19, 62, 185, 86, 74, 188, 247, 55, 207, 62, 29, 168, 16, 190, 120, 159, 173, 189, 157, 9, 181, 62, 86, 33, 53, 62, 247, 227, 75, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 47, 132, 188, 205, 210, 79, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {136, 112, 99, 190, 238, 210, 51, 189, 9, 12, 22, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {32, 145, 83, 63, 83, 101, 125, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0094/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}