// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 152, 215, 62, 40, 149, 133, 63, 82, 42, 17, 62, 25, 65, 121, 62, 84, 96, 176, 190, 0, 49, 5, 63, 77, 53, 172, 61, 153, 186, 194, 62, 174, 157, 194, 190, 78, 150, 165, 190, 148, 74, 177, 191, 107, 77, 209, 189, 98, 80, 19, 63, 111, 255, 128, 191, 137, 151, 127, 190, 71, 22, 247, 190, 220, 168, 7, 63, 144, 219, 26, 191, 185, 244, 160, 191, 164, 81, 7, 191, 170, 16, 92, 190, 22, 247, 232, 62, 231, 119, 185, 190, 232, 101, 119, 190, 51, 35, 50, 62, 236, 236, 2, 63, 105, 121, 25, 191, 228, 80, 2, 189, 233, 120, 145, 191, 247, 186, 171, 62, 6, 74, 186, 190, 177, 204, 8, 63, 217, 108, 187, 189, 88, 88, 102, 63, 128, 209, 70, 191, 181, 197, 25, 191, 26, 201, 188, 190, 125, 99, 131, 63, 150, 187, 44, 190, 128, 79, 111, 191, 212, 3, 128, 62, 240, 196, 15, 63, 8, 177, 202, 190, 179, 103, 83, 191, 99, 151, 144, 62, 174, 23, 133, 62, 27, 168, 170, 191, 3, 113, 108, 61, 105, 116, 43, 62, 250, 65, 41, 63, 33, 176, 20, 63, 46, 148, 133, 191, 2, 103, 254, 62, 158, 199, 163, 188, 231, 150, 78, 63, 118, 178, 47, 191, 194, 41, 9, 191, 201, 183, 4, 63, 104, 152, 75, 191, 183, 187, 232, 190, 118, 17, 145, 62, 160, 8, 221, 62, 253, 247, 76, 190, 40, 143, 18, 63, 3, 177, 218, 63, 136, 43, 187, 62, 145, 211, 123, 190, 225, 226, 119, 191, 86, 199, 78, 190, 28, 68, 189, 62, 242, 62, 24, 191, 152, 124, 207, 190, 82, 159, 79, 63, 1, 226, 194, 189, 253, 134, 254, 189, 178, 131, 74, 62, 189, 211, 49, 190, 140, 24, 39, 63, 223, 158, 236, 190, 184, 70, 147, 191, 74, 225, 122, 189, 4, 170, 212, 190, 252, 114, 188, 62, 165, 127, 101, 191, 31, 171, 41, 62, 24, 50, 105, 63, 210, 193, 240, 62, 238, 147, 26, 191, 88, 121, 203, 62, 160, 96, 66, 191, 90, 245, 72, 191, 216, 243, 38, 191, 93, 115, 245, 60, 249, 119, 84, 190, 156, 199, 35, 63, 7, 0, 109, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 202, 9, 191, 18, 40, 46, 62, 22, 241, 46, 62, 250, 215, 128, 62, 200, 107, 160, 189, 207, 164, 99, 190, 67, 166, 188, 61, 226, 51, 215, 189, 209, 179, 180, 62, 43, 232, 248, 61, 210, 180, 144, 62, 64, 64, 58, 59, 225, 215, 49, 63, 13, 46, 155, 62, 206, 64, 72, 190, 186, 186, 213, 62, 243, 93, 1, 63, 186, 84, 99, 190, 20, 138, 241, 190, 249, 127, 147, 189, 159, 166, 214, 62, 140, 92, 15, 61, 198, 174, 247, 62, 8, 34, 227, 189, 172, 202, 46, 190, 240, 55, 44, 191, 231, 160, 225, 60, 160, 229, 84, 61, 171, 42, 100, 62, 219, 104, 203, 190, 68, 249, 165, 61, 26, 213, 224, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 253, 17, 62, 146, 32, 11, 190, 233, 141, 217, 61, 235, 219, 87, 190, 5, 182, 127, 61, 250, 104, 151, 188, 192, 177, 148, 188, 181, 15, 35, 188, 56, 52, 156, 190, 40, 164, 174, 190, 172, 216, 149, 61, 57, 94, 95, 190, 42, 5, 141, 62, 253, 166, 226, 60, 220, 93, 6, 191, 152, 103, 142, 190, 249, 223, 42, 62, 127, 73, 249, 190, 241, 124, 111, 61, 4, 165, 35, 62, 216, 211, 68, 61, 56, 123, 238, 188, 252, 227, 10, 190, 187, 55, 43, 62, 71, 90, 2, 191, 64, 36, 93, 190, 177, 9, 94, 59, 28, 249, 134, 190, 129, 116, 95, 62, 83, 27, 135, 190, 63, 38, 155, 190, 211, 208, 22, 61, 129, 2, 137, 188, 153, 27, 249, 61, 195, 246, 40, 62, 252, 60, 89, 62, 5, 186, 137, 62, 146, 101, 72, 190, 153, 184, 30, 190, 48, 82, 185, 62, 120, 240, 15, 61, 236, 168, 222, 190, 93, 31, 208, 189, 87, 181, 96, 62, 114, 137, 254, 61, 163, 102, 159, 61, 213, 67, 78, 190, 117, 232, 162, 62, 236, 230, 236, 61, 93, 231, 118, 190, 151, 57, 173, 189, 129, 137, 146, 62, 211, 134, 96, 62, 79, 26, 225, 189, 92, 159, 160, 62, 155, 162, 170, 61, 64, 8, 210, 188, 124, 1, 250, 189, 110, 93, 143, 62, 151, 66, 146, 59, 105, 147, 113, 59, 47, 117, 230, 190, 100, 251, 169, 189, 151, 195, 179, 61, 144, 120, 38, 191, 67, 130, 160, 189, 213, 180, 4, 190, 154, 160, 221, 61, 225, 242, 31, 62, 122, 58, 4, 189, 89, 52, 3, 62, 81, 227, 21, 62, 43, 79, 239, 61, 150, 214, 129, 190, 188, 127, 146, 61, 101, 31, 71, 189, 162, 250, 151, 62, 123, 5, 9, 62, 190, 147, 125, 189, 124, 156, 82, 62, 3, 19, 126, 189, 155, 9, 140, 61, 9, 131, 69, 190, 249, 29, 236, 188, 32, 32, 158, 62, 222, 245, 109, 190, 153, 122, 26, 189, 1, 113, 22, 189, 49, 163, 239, 61, 111, 224, 157, 190, 167, 143, 131, 62, 63, 133, 78, 190, 190, 186, 153, 190, 222, 41, 107, 60, 57, 213, 190, 61, 165, 90, 172, 189, 52, 141, 15, 191, 79, 172, 214, 191, 60, 178, 1, 191, 178, 21, 141, 62, 249, 143, 48, 191, 176, 243, 56, 59, 247, 90, 156, 62, 129, 96, 222, 189, 234, 227, 80, 62, 69, 71, 6, 61, 227, 159, 212, 62, 8, 30, 42, 190, 135, 88, 154, 62, 30, 245, 119, 62, 195, 21, 151, 61, 70, 82, 238, 61, 6, 235, 255, 191, 82, 39, 122, 62, 68, 169, 171, 190, 11, 70, 195, 190, 111, 123, 71, 62, 118, 223, 240, 189, 37, 81, 175, 188, 27, 254, 15, 191, 255, 40, 123, 189, 53, 56, 157, 190, 82, 247, 81, 62, 174, 99, 136, 62, 13, 142, 147, 187, 95, 158, 165, 62, 125, 52, 212, 62, 188, 156, 175, 191, 62, 85, 163, 190, 63, 94, 171, 62, 123, 32, 32, 62, 250, 38, 246, 190, 7, 1, 15, 62, 86, 119, 146, 61, 203, 44, 214, 190, 231, 27, 113, 187, 177, 35, 133, 62, 14, 132, 24, 190, 207, 145, 43, 62, 90, 241, 101, 186, 166, 233, 163, 62, 20, 150, 151, 189, 85, 91, 48, 61, 205, 242, 5, 62, 191, 40, 204, 61, 102, 92, 23, 191, 181, 34, 18, 189, 18, 219, 73, 190, 113, 95, 65, 62, 17, 216, 60, 62, 245, 19, 208, 190, 211, 193, 136, 190, 243, 82, 16, 62, 186, 5, 59, 62, 182, 198, 184, 190, 185, 74, 72, 190, 207, 63, 29, 62, 232, 193, 98, 61, 176, 226, 170, 190, 44, 113, 232, 61, 36, 99, 156, 191, 179, 196, 209, 62, 35, 55, 236, 62, 173, 187, 188, 190, 154, 117, 108, 59, 243, 63, 63, 190, 79, 183, 39, 190, 35, 37, 75, 62, 192, 153, 110, 189, 171, 246, 75, 191, 161, 111, 121, 62, 185, 225, 139, 62, 191, 23, 151, 62, 59, 227, 171, 62, 78, 21, 35, 191, 18, 134, 8, 190, 99, 206, 198, 62, 181, 100, 117, 63, 139, 69, 121, 62, 148, 5, 165, 62, 200, 19, 87, 190, 169, 198, 0, 191, 192, 129, 13, 189, 128, 100, 255, 61, 19, 251, 151, 62, 0, 168, 70, 190, 31, 159, 234, 190, 77, 16, 125, 188, 125, 243, 204, 190, 247, 27, 110, 191, 152, 134, 211, 61, 29, 168, 178, 62, 185, 112, 65, 190, 90, 138, 168, 62, 30, 130, 224, 187, 5, 148, 29, 62, 35, 189, 62, 62, 148, 91, 231, 190, 28, 13, 106, 191, 65, 176, 31, 62, 200, 247, 2, 191, 14, 225, 149, 190, 62, 0, 7, 188, 26, 144, 35, 61, 234, 196, 160, 190, 205, 8, 142, 62, 85, 219, 202, 190, 90, 240, 94, 62, 191, 154, 43, 62, 140, 138, 204, 62, 137, 203, 154, 62, 77, 64, 228, 62, 225, 44, 15, 191, 35, 131, 26, 191, 164, 33, 100, 189, 146, 12, 229, 61, 129, 31, 1, 63, 236, 253, 210, 190, 167, 25, 141, 190, 4, 123, 215, 190, 116, 181, 146, 190, 201, 104, 99, 191, 151, 176, 167, 190, 125, 21, 38, 62, 157, 239, 100, 189, 243, 211, 0, 191, 219, 173, 210, 189, 7, 203, 205, 190, 230, 110, 156, 62, 168, 14, 84, 61, 238, 237, 7, 60, 236, 38, 155, 189, 29, 76, 34, 62, 102, 131, 184, 62, 63, 29, 159, 62, 94, 126, 16, 60, 184, 143, 88, 62, 43, 113, 75, 190, 127, 27, 98, 62, 101, 145, 144, 190, 226, 218, 240, 190, 235, 184, 142, 189, 167, 233, 22, 61, 206, 20, 166, 60, 203, 40, 183, 61, 75, 156, 50, 191, 31, 118, 84, 188, 184, 247, 74, 61, 147, 77, 44, 62, 147, 171, 12, 190, 4, 9, 98, 190, 226, 225, 66, 62, 240, 211, 134, 191, 3, 127, 152, 62, 99, 74, 252, 189, 208, 217, 46, 190, 230, 100, 157, 190, 205, 122, 163, 60, 85, 130, 179, 190, 39, 157, 220, 189, 38, 144, 254, 189, 112, 193, 139, 61, 217, 184, 252, 61, 98, 126, 197, 189, 241, 167, 129, 62, 149, 40, 79, 61, 61, 127, 205, 61, 198, 162, 70, 190, 24, 86, 130, 62, 54, 218, 43, 189, 36, 55, 116, 189, 185, 75, 164, 189, 117, 60, 194, 188, 240, 187, 161, 61, 92, 232, 110, 190, 10, 70, 161, 190, 123, 75, 178, 62, 43, 68, 8, 63, 252, 70, 111, 190, 37, 244, 58, 190, 245, 160, 165, 61, 226, 225, 149, 62, 73, 222, 143, 190, 11, 125, 158, 62, 208, 117, 104, 62, 69, 174, 201, 62, 179, 237, 249, 189, 255, 248, 13, 189, 48, 88, 22, 63, 92, 140, 181, 60, 218, 165, 58, 189, 249, 23, 159, 189, 249, 15, 23, 191, 128, 58, 11, 62, 170, 104, 152, 61, 2, 144, 76, 190, 225, 82, 169, 187, 234, 71, 108, 187, 242, 41, 30, 62, 229, 5, 81, 190, 218, 28, 139, 62, 125, 166, 160, 188, 73, 77, 254, 187, 174, 181, 179, 190, 37, 123, 24, 62, 244, 30, 102, 62, 245, 223, 159, 190, 126, 207, 185, 190, 127, 86, 147, 61, 103, 27, 218, 62, 244, 97, 252, 190, 212, 237, 193, 190, 32, 173, 175, 62, 5, 15, 113, 62, 67, 36, 4, 190, 22, 111, 39, 62, 112, 116, 160, 62, 152, 192, 212, 61, 86, 106, 149, 189, 57, 255, 136, 61, 39, 231, 149, 190, 5, 40, 152, 191, 129, 149, 219, 190, 87, 141, 25, 62, 96, 24, 118, 191, 183, 200, 14, 187, 167, 22, 167, 62, 246, 110, 211, 190, 53, 28, 31, 62, 161, 201, 191, 190, 13, 129, 146, 62, 244, 185, 114, 190, 112, 4, 195, 62, 175, 255, 35, 188, 201, 246, 9, 62, 198, 35, 74, 62, 231, 36, 153, 191, 133, 40, 223, 62, 176, 172, 24, 191, 143, 175, 201, 190, 197, 217, 252, 61, 197, 160, 15, 63, 194, 157, 227, 61, 124, 11, 146, 190, 72, 22, 55, 62, 207, 44, 130, 62, 85, 110, 163, 61, 235, 175, 151, 62, 208, 245, 56, 63, 91, 0, 107, 62, 160, 64, 78, 62, 121, 40, 146, 191, 154, 168, 1, 63, 174, 177, 27, 60, 20, 247, 157, 62, 28, 153, 124, 190, 0, 43, 255, 190, 116, 79, 207, 61, 253, 35, 175, 190, 12, 139, 173, 190, 33, 134, 56, 62, 28, 251, 159, 189, 188, 238, 237, 189, 46, 120, 11, 191, 217, 96, 38, 190, 78, 144, 22, 191, 30, 54, 51, 189, 10, 55, 24, 191, 53, 83, 29, 190, 251, 121, 40, 190, 120, 83, 186, 190, 174, 64, 5, 191, 63, 43, 126, 62, 161, 162, 81, 62, 173, 191, 11, 191, 130, 7, 115, 190, 205, 40, 96, 188, 196, 127, 189, 189, 26, 220, 152, 190, 84, 201, 108, 61, 12, 21, 83, 61, 150, 49, 31, 62, 143, 148, 37, 191, 199, 248, 201, 190, 114, 229, 166, 62, 27, 95, 162, 190, 180, 200, 103, 187, 251, 5, 149, 190, 37, 159, 5, 62, 163, 97, 110, 62, 255, 52, 107, 60, 163, 180, 133, 186, 19, 67, 179, 61, 58, 198, 118, 62, 94, 183, 3, 62, 205, 53, 154, 61, 221, 2, 141, 62, 166, 241, 23, 191, 220, 113, 127, 189, 34, 159, 175, 190, 74, 124, 56, 190, 192, 188, 91, 190, 79, 125, 225, 59, 40, 127, 211, 60, 98, 21, 157, 187, 239, 35, 9, 188, 102, 45, 221, 61, 39, 98, 72, 62, 78, 8, 172, 190, 36, 220, 203, 59, 11, 211, 84, 189, 242, 163, 188, 62, 234, 217, 189, 189, 158, 170, 167, 62, 235, 248, 170, 190, 206, 187, 131, 190, 195, 37, 203, 189, 211, 39, 49, 190, 212, 91, 12, 62, 10, 161, 222, 190, 197, 111, 5, 63, 131, 206, 200, 61, 67, 223, 79, 62, 231, 232, 189, 61, 156, 179, 28, 188, 68, 0, 208, 190, 170, 41, 8, 62, 42, 91, 239, 189, 245, 48, 82, 189, 245, 66, 45, 62, 108, 203, 185, 190, 254, 195, 45, 191, 132, 121, 223, 190, 203, 254, 75, 62, 115, 153, 100, 58, 205, 169, 159, 61, 68, 15, 16, 62, 198, 223, 94, 191, 213, 39, 23, 190, 238, 89, 196, 189, 1, 163, 128, 62, 144, 108, 98, 190, 113, 220, 119, 190, 129, 240, 60, 62, 184, 107, 184, 191, 173, 220, 140, 62, 184, 35, 155, 190, 101, 20, 23, 190, 34, 42, 150, 62, 180, 206, 113, 61, 51, 27, 139, 62, 149, 46, 152, 190, 95, 42, 209, 191, 133, 4, 232, 185, 116, 207, 49, 191, 56, 105, 80, 191, 211, 131, 171, 61, 17, 117, 150, 61, 24, 234, 178, 62, 44, 107, 72, 191, 205, 232, 214, 62, 238, 233, 0, 61, 171, 190, 104, 190, 142, 191, 79, 191, 67, 244, 95, 62, 213, 171, 157, 190, 226, 95, 51, 191, 195, 159, 9, 191, 221, 234, 164, 61, 228, 199, 215, 62, 197, 50, 64, 191, 31, 25, 191, 190, 124, 139, 205, 190, 162, 55, 77, 190, 76, 92, 152, 190, 42, 52, 253, 61, 160, 14, 92, 62, 193, 42, 24, 62, 64, 253, 50, 189, 64, 27, 6, 190, 107, 71, 45, 189, 168, 97, 130, 191, 217, 203, 64, 190, 52, 205, 11, 62, 57, 94, 170, 190, 79, 118, 181, 61, 151, 35, 55, 61, 158, 99, 49, 62, 29, 158, 156, 62, 13, 69, 44, 191, 178, 181, 32, 62, 220, 34, 168, 61, 155, 227, 125, 62, 118, 95, 152, 190, 89, 217, 200, 190, 83, 190, 231, 189, 209, 105, 11, 191, 91, 19, 164, 62, 92, 139, 153, 190, 237, 127, 40, 190, 228, 25, 92, 62, 227, 213, 138, 62, 43, 160, 187, 61, 15, 43, 130, 190, 123, 26, 249, 189, 69, 226, 107, 187, 92, 44, 185, 60, 202, 229, 130, 62, 92, 43, 231, 62, 50, 6, 172, 62, 15, 153, 253, 61, 169, 162, 139, 191, 102, 128, 12, 191, 107, 255, 96, 188, 234, 248, 93, 190, 24, 37, 175, 190, 63, 40, 121, 190, 193, 226, 237, 60, 89, 103, 34, 189, 146, 221, 128, 190, 146, 38, 32, 62, 9, 198, 142, 61, 222, 51, 115, 62, 91, 135, 221, 189, 210, 7, 62, 62, 251, 211, 230, 188, 95, 206, 4, 190, 89, 46, 12, 61, 178, 226, 135, 61, 134, 228, 4, 62, 251, 59, 154, 190, 40, 44, 99, 190, 204, 2, 49, 62, 217, 217, 219, 62, 14, 160, 155, 190, 144, 9, 189, 190, 161, 133, 150, 62, 240, 250, 243, 61, 195, 159, 77, 190, 68, 116, 116, 60, 253, 133, 186, 62, 174, 146, 136, 62, 206, 63, 136, 190, 105, 217, 205, 61, 64, 120, 177, 189, 156, 93, 113, 62, 154, 46, 164, 62, 173, 158, 240, 60, 199, 56, 169, 62, 227, 80, 42, 190, 232, 237, 159, 190, 153, 217, 140, 189, 133, 203, 188, 189, 131, 129, 211, 61, 211, 4, 250, 189, 151, 107, 21, 189, 210, 197, 159, 189, 111, 11, 139, 190, 182, 7, 193, 59, 91, 133, 165, 62, 44, 199, 133, 62, 120, 224, 102, 191, 14, 124, 157, 189, 64, 89, 115, 190, 155, 49, 228, 62, 17, 78, 84, 62, 28, 250, 68, 189, 106, 221, 92, 189, 226, 171, 1, 62, 163, 115, 146, 190, 127, 104, 213, 188, 108, 74, 83, 190, 174, 216, 51, 62, 214, 19, 35, 191, 198, 36, 14, 190, 118, 152, 139, 187, 233, 145, 38, 191, 148, 200, 160, 62, 76, 6, 165, 190, 210, 100, 72, 62, 180, 105, 44, 190, 18, 124, 100, 191, 121, 93, 215, 190, 202, 191, 166, 62, 247, 35, 249, 190, 189, 205, 180, 190, 150, 120, 10, 61, 43, 230, 157, 62, 73, 11, 51, 188, 163, 142, 149, 61, 100, 56, 116, 190, 99, 214, 147, 189, 64, 138, 135, 62, 169, 176, 185, 62, 105, 119, 46, 61, 42, 115, 196, 61, 131, 195, 110, 190, 137, 92, 79, 191, 206, 72, 240, 61, 118, 0, 183, 189, 180, 29, 161, 62, 9, 225, 241, 189, 103, 111, 13, 62, 217, 203, 70, 191, 228, 2, 204, 189, 3, 190, 147, 191, 3, 93, 28, 62, 47, 156, 171, 61, 151, 40, 148, 191, 73, 229, 206, 62, 62, 232, 116, 62, 104, 162, 82, 62, 206, 40, 8, 62, 219, 53, 26, 191, 188, 206, 222, 188, 38, 40, 33, 62, 48, 67, 220, 61, 255, 184, 168, 190, 5, 167, 237, 190, 122, 17, 209, 62, 13, 150, 38, 190, 236, 144, 106, 62, 37, 168, 55, 190, 163, 132, 39, 62, 121, 173, 6, 62, 95, 1, 45, 190, 8, 204, 88, 62, 88, 109, 35, 62, 187, 244, 25, 190, 143, 61, 4, 191, 10, 52, 119, 62, 112, 207, 161, 61, 35, 49, 156, 62, 227, 245, 169, 190, 51, 120, 15, 62, 205, 188, 209, 190, 70, 231, 127, 190, 79, 136, 126, 191, 117, 115, 213, 62, 148, 144, 151, 61, 23, 105, 7, 62, 212, 43, 208, 189, 1, 35, 154, 61, 124, 119, 100, 189, 253, 44, 161, 189, 124, 193, 159, 189, 245, 110, 45, 188, 64, 59, 250, 189, 154, 221, 11, 190, 181, 224, 54, 189, 240, 246, 222, 61, 16, 65, 137, 189, 119, 160, 253, 188, 145, 10, 130, 61, 108, 186, 171, 189, 159, 189, 25, 61, 67, 178, 152, 60, 203, 132, 235, 61, 161, 238, 5, 190, 26, 209, 30, 62, 83, 200, 157, 189, 230, 233, 175, 61, 21, 233, 36, 190, 82, 212, 239, 189, 122, 175, 124, 61, 154, 102, 43, 190, 237, 48, 53, 190, 86, 126, 241, 188, 89, 134, 243, 189, 194, 70, 27, 187, 194, 166, 231, 61, 129, 210, 139, 189, 111, 152, 9, 191, 30, 214, 55, 62, 199, 139, 190, 190, 119, 222, 188, 60, 43, 39, 49, 62, 225, 43, 202, 190, 33, 171, 230, 190, 14, 213, 78, 190, 70, 190, 210, 190, 227, 41, 80, 187, 94, 51, 237, 60, 200, 37, 142, 59, 239, 100, 129, 190, 66, 73, 254, 189, 28, 134, 151, 61, 91, 57, 192, 62, 45, 232, 118, 61, 71, 117, 223, 190, 154, 172, 131, 60, 38, 10, 249, 189, 101, 110, 38, 191, 75, 229, 232, 60, 214, 129, 70, 189, 48, 53, 12, 59, 14, 245, 240, 190, 98, 188, 69, 61, 143, 104, 12, 62, 130, 45, 220, 190, 228, 114, 14, 190, 147, 151, 18, 190, 157, 22, 129, 187, 52, 198, 151, 61, 237, 0, 51, 190, 57, 18, 76, 190, 3, 132, 207, 189, 21, 232, 1, 62, 18, 165, 85, 190, 180, 113, 202, 61, 217, 218, 245, 61, 71, 156, 61, 189, 155, 142, 104, 62, 152, 158, 112, 189, 172, 27, 10, 62, 106, 54, 245, 189, 67, 27, 60, 62, 186, 89, 7, 190, 2, 3, 89, 60, 0, 99, 144, 189, 211, 148, 94, 61, 125, 157, 10, 190, 215, 212, 139, 190, 243, 95, 166, 190, 151, 1, 56, 62, 234, 107, 206, 62, 11, 99, 186, 187, 201, 152, 233, 190, 146, 101, 173, 62, 207, 148, 230, 59, 227, 183, 242, 189, 197, 12, 51, 62, 250, 10, 105, 61, 111, 74, 162, 62, 243, 15, 140, 61, 119, 212, 76, 190, 32, 190, 120, 62, 148, 9, 210, 62, 154, 10, 133, 189, 94, 136, 90, 62, 31, 238, 156, 60, 225, 55, 17, 191, 120, 38, 131, 189, 27, 59, 62, 59, 36, 68, 247, 190, 254, 236, 9, 190, 127, 220, 36, 62, 152, 135, 92, 62, 153, 125, 118, 190, 105, 194, 214, 62, 53, 52, 142, 61, 92, 198, 3, 61, 7, 9, 159, 62, 247, 128, 1, 63, 3, 37, 139, 190, 39, 80, 35, 62, 88, 185, 171, 190, 27, 218, 166, 190, 113, 42, 14, 61, 57, 214, 202, 188, 131, 31, 124, 188, 215, 121, 150, 190, 19, 73, 22, 62, 159, 100, 22, 191, 25, 160, 92, 189, 100, 31, 161, 191, 96, 69, 187, 62, 205, 19, 169, 61, 25, 59, 163, 188, 78, 73, 12, 191, 27, 120, 1, 190, 158, 24, 179, 62, 49, 133, 42, 191, 66, 70, 123, 61, 132, 99, 140, 62, 137, 32, 138, 190, 251, 144, 44, 62, 199, 55, 80, 190, 221, 26, 188, 61, 171, 238, 198, 189, 238, 136, 103, 61, 53, 90, 226, 189, 50, 218, 68, 190, 164, 108, 108, 190, 236, 22, 0, 191, 142, 167, 162, 62, 170, 91, 254, 190, 7, 249, 179, 190, 108, 74, 161, 62, 228, 107, 15, 63, 126, 216, 99, 189, 53, 69, 92, 190, 234, 22, 50, 62, 104, 148, 5, 191, 152, 211, 217, 62, 206, 71, 142, 62, 24, 72, 3, 63, 149, 124, 149, 62, 228, 10, 1, 63, 209, 57, 86, 191, 207, 241, 143, 60, 117, 110, 193, 61, 68, 152, 173, 189, 89, 248, 30, 60, 93, 105, 27, 190, 13, 40, 18, 190, 1, 74, 183, 188, 85, 232, 27, 62, 163, 88, 220, 189, 68, 76, 238, 189, 225, 62, 208, 189, 125, 145, 231, 59, 159, 121, 167, 189, 210, 182, 157, 61, 22, 135, 90, 60, 149, 140, 202, 188, 42, 136, 16, 62, 170, 168, 131, 61, 63, 229, 166, 187, 114, 183, 51, 189, 252, 51, 19, 190, 31, 221, 178, 59, 171, 203, 204, 189, 22, 181, 131, 61, 168, 143, 27, 189, 253, 112, 21, 190, 16, 29, 244, 189, 188, 189, 219, 61, 183, 95, 26, 190, 174, 199, 161, 61, 118, 203, 172, 59, 255, 102, 59, 190, 245, 198, 3, 190, 243, 76, 128, 61, 117, 253, 77, 189, 169, 76, 156, 61, 57, 49, 133, 62, 166, 218, 17, 61, 223, 15, 128, 190, 154, 243, 149, 62, 188, 101, 127, 61, 247, 103, 135, 62, 52, 172, 179, 190, 249, 65, 101, 62, 26, 166, 195, 190, 157, 211, 44, 190, 97, 136, 55, 62, 166, 196, 151, 62, 239, 218, 158, 189, 184, 126, 180, 188, 37, 240, 139, 62, 13, 253, 1, 62, 81, 8, 246, 189, 144, 52, 140, 190, 5, 166, 255, 188, 219, 93, 92, 62, 252, 73, 65, 62, 60, 181, 215, 190, 126, 153, 149, 61, 185, 189, 212, 189, 215, 29, 81, 190, 239, 14, 17, 190, 78, 153, 67, 190, 151, 42, 21, 190, 73, 19, 182, 60, 226, 69, 29, 190, 196, 83, 63, 189, 97, 194, 205, 189, 85, 112, 209, 189, 130, 4, 228, 61, 81, 199, 175, 61, 255, 60, 130, 61, 108, 24, 148, 61, 39, 49, 150, 60, 177, 111, 44, 190, 1, 247, 176, 61, 45, 32, 145, 61, 215, 134, 189, 189, 198, 103, 159, 189, 184, 204, 199, 188, 127, 5, 4, 190, 216, 98, 72, 61, 33, 15, 164, 189, 5, 20, 26, 190, 39, 204, 26, 190, 26, 234, 160, 189, 250, 58, 18, 189, 113, 201, 144, 189, 111, 189, 190, 61, 30, 83, 10, 62, 154, 172, 38, 62, 132, 211, 224, 189, 75, 128, 173, 60, 192, 60, 151, 189, 225, 137, 32, 190, 203, 222, 108, 189, 219, 202, 24, 63, 29, 233, 147, 188, 54, 52, 164, 189, 197, 229, 213, 62, 154, 13, 149, 63, 58, 92, 158, 62, 77, 162, 48, 62, 246, 0, 138, 191, 143, 58, 117, 61, 44, 65, 52, 191, 240, 64, 20, 63, 62, 102, 115, 191, 223, 182, 21, 63, 112, 178, 55, 191, 128, 175, 98, 191, 32, 186, 225, 189, 100, 84, 30, 190, 137, 111, 229, 62, 227, 232, 130, 191, 64, 96, 83, 191, 213, 164, 189, 62, 83, 251, 242, 61, 171, 175, 94, 62, 240, 26, 65, 191, 75, 155, 45, 191, 63, 115, 131, 190, 192, 234, 172, 62, 133, 97, 78, 60, 30, 85, 91, 191, 147, 40, 156, 62, 155, 204, 120, 62, 107, 177, 180, 190, 4, 125, 168, 62, 212, 121, 137, 61, 195, 19, 16, 190, 159, 125, 254, 58, 106, 128, 106, 190, 181, 50, 149, 188, 127, 153, 81, 63, 166, 76, 101, 190, 97, 203, 90, 189, 124, 102, 4, 61, 50, 235, 195, 61, 193, 51, 143, 190, 133, 27, 35, 62, 135, 226, 162, 190, 158, 193, 137, 190, 9, 102, 13, 190, 93, 148, 110, 62, 72, 126, 130, 61, 145, 5, 37, 191, 145, 106, 25, 191, 249, 233, 110, 62, 40, 156, 129, 62, 150, 88, 161, 189, 159, 76, 2, 191, 146, 228, 102, 62, 195, 106, 149, 61, 105, 183, 147, 190, 250, 121, 185, 189, 219, 68, 81, 61, 91, 183, 87, 190, 99, 191, 25, 191, 121, 172, 242, 189, 166, 199, 162, 187, 221, 23, 148, 190, 237, 69, 184, 188, 110, 48, 168, 190, 47, 242, 146, 189, 216, 98, 142, 62, 65, 139, 117, 189, 223, 52, 255, 60, 20, 24, 53, 61, 206, 110, 213, 62, 64, 252, 126, 62, 180, 236, 119, 188, 117, 198, 162, 62, 137, 214, 130, 190, 117, 80, 12, 63, 106, 158, 99, 190, 90, 126, 212, 190, 116, 227, 255, 189, 17, 181, 222, 61, 247, 95, 68, 190, 5, 142, 137, 62, 53, 133, 238, 190, 85, 154, 97, 190, 83, 30, 155, 61, 148, 70, 60, 189, 79, 239, 199, 188, 131, 239, 104, 190, 68, 240, 81, 62, 197, 94, 228, 190, 191, 74, 135, 62, 123, 67, 5, 190, 169, 160, 240, 190, 182, 112, 7, 191, 254, 197, 198, 189, 163, 99, 217, 189, 182, 134, 47, 190, 116, 72, 255, 189, 75, 95, 41, 61, 157, 239, 116, 189, 252, 33, 32, 190, 73, 238, 242, 61, 190, 49, 88, 189, 9, 21, 46, 62, 175, 2, 85, 189, 194, 179, 192, 189, 17, 92, 70, 190, 179, 240, 214, 187, 19, 113, 166, 189, 160, 51, 103, 61, 159, 85, 161, 190, 61, 145, 152, 190, 233, 26, 22, 190, 235, 68, 176, 62, 143, 229, 183, 62, 91, 119, 56, 59, 104, 9, 167, 190, 230, 120, 39, 189, 62, 148, 128, 62, 150, 90, 132, 189, 118, 95, 16, 62, 225, 125, 139, 61, 193, 42, 66, 62, 82, 117, 59, 190, 88, 208, 4, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 88, 153, 189, 82, 168, 177, 61, 95, 200, 168, 62, 4, 13, 169, 62, 24, 95, 20, 61, 68, 90, 71, 62, 13, 216, 245, 60, 75, 224, 6, 62, 38, 123, 28, 62, 252, 191, 131, 189, 145, 31, 188, 62, 40, 150, 112, 190, 183, 26, 133, 190, 33, 183, 14, 190, 51, 61, 35, 190, 232, 39, 1, 61, 178, 136, 212, 61, 172, 142, 166, 188, 204, 219, 18, 62, 130, 54, 250, 61, 178, 191, 57, 190, 80, 112, 194, 189, 73, 185, 60, 62, 232, 49, 214, 58, 45, 234, 169, 61, 42, 148, 55, 61, 211, 40, 136, 190, 5, 159, 248, 189, 222, 61, 215, 62, 53, 133, 185, 187, 208, 249, 3, 190, 58, 192, 100, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 250, 79, 190, 66, 1, 170, 61, 160, 167, 54, 61, 183, 4, 104, 191, 194, 144, 246, 189, 54, 229, 133, 63, 4, 107, 164, 63, 1, 117, 169, 62, 189, 46, 213, 190, 61, 204, 71, 190, 206, 234, 59, 191, 177, 22, 80, 63, 59, 77, 208, 62, 48, 22, 177, 62, 215, 14, 132, 63, 223, 71, 151, 190, 202, 250, 50, 190, 175, 152, 209, 190, 163, 55, 83, 63, 178, 131, 6, 63, 1, 194, 220, 61, 48, 225, 100, 190, 227, 215, 140, 190, 89, 175, 255, 62, 226, 177, 9, 191, 10, 206, 149, 189, 46, 128, 208, 190, 240, 251, 170, 189, 96, 243, 196, 63, 144, 210, 42, 191, 11, 159, 145, 62, 252, 35, 33, 189, 3, 148, 171, 190, 70, 63, 220, 190, 32, 229, 156, 190, 4, 205, 25, 62, 28, 176, 136, 190, 219, 238, 191, 189, 228, 218, 6, 63, 246, 90, 194, 61, 149, 103, 68, 190, 107, 237, 248, 62, 192, 12, 82, 62, 141, 84, 192, 62, 172, 6, 173, 61, 220, 47, 58, 61, 48, 182, 187, 189, 246, 104, 173, 190, 91, 224, 67, 190, 140, 167, 178, 190, 183, 226, 171, 62, 168, 16, 143, 190, 185, 96, 111, 61, 149, 238, 21, 62, 210, 0, 51, 190, 205, 194, 149, 189, 118, 60, 48, 62, 185, 86, 74, 188, 178, 211, 195, 62, 29, 168, 16, 190, 48, 15, 38, 190, 186, 235, 222, 62, 172, 148, 58, 62, 74, 42, 53, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {64, 188, 5, 189, 173, 193, 146, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {173, 55, 80, 62, 28, 107, 152, 63, 128, 202, 11, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {174, 255, 111, 191, 72, 151, 137, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0094/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}