// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {193, 242, 147, 187, 235, 4, 167, 62, 190, 180, 169, 61, 152, 6, 178, 62, 178, 125, 17, 189, 10, 140, 20, 188, 207, 228, 174, 62, 186, 40, 159, 189, 194, 204, 55, 190, 161, 252, 126, 190, 201, 251, 248, 190, 0, 10, 83, 190, 50, 195, 136, 62, 90, 147, 178, 189, 222, 88, 49, 190, 248, 178, 151, 190, 246, 215, 5, 63, 179, 84, 0, 190, 105, 150, 2, 191, 237, 234, 139, 62, 69, 76, 223, 190, 22, 189, 5, 62, 255, 167, 184, 188, 190, 163, 215, 189, 84, 180, 44, 60, 227, 231, 252, 62, 228, 218, 187, 190, 173, 61, 212, 62, 84, 199, 207, 190, 7, 247, 116, 62, 89, 126, 58, 190, 125, 153, 52, 62, 214, 181, 162, 61, 90, 136, 239, 62, 73, 60, 18, 191, 30, 219, 5, 191, 79, 133, 65, 189, 50, 106, 187, 62, 64, 140, 8, 190, 78, 239, 226, 190, 232, 164, 218, 190, 206, 28, 188, 62, 66, 162, 131, 190, 243, 18, 20, 190, 195, 239, 149, 62, 215, 6, 254, 62, 202, 176, 5, 191, 208, 222, 98, 190, 207, 232, 252, 62, 2, 185, 127, 190, 60, 114, 13, 62, 233, 250, 17, 191, 219, 218, 158, 61, 241, 201, 245, 187, 75, 216, 184, 62, 178, 188, 77, 190, 104, 68, 223, 190, 193, 132, 152, 62, 199, 160, 56, 190, 29, 111, 195, 190, 68, 57, 242, 62, 152, 152, 12, 60, 215, 201, 228, 189, 81, 71, 181, 62, 82, 117, 2, 63, 158, 215, 244, 62, 233, 133, 202, 189, 92, 216, 204, 190, 178, 36, 236, 190, 83, 78, 154, 62, 193, 127, 203, 190, 249, 200, 27, 190, 111, 26, 3, 63, 235, 87, 201, 61, 161, 106, 49, 189, 87, 80, 98, 189, 248, 2, 126, 190, 106, 102, 2, 63, 4, 246, 99, 190, 143, 124, 160, 190, 119, 197, 212, 190, 37, 186, 42, 190, 145, 72, 153, 62, 190, 177, 243, 190, 32, 246, 13, 62, 13, 187, 36, 190, 67, 245, 17, 63, 55, 160, 170, 190, 41, 249, 234, 62, 54, 94, 1, 190, 131, 213, 244, 190, 129, 67, 126, 190, 120, 17, 40, 190, 117, 197, 158, 189, 184, 86, 236, 190, 53, 90, 172, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {246, 148, 19, 191, 209, 122, 5, 62, 18, 212, 28, 61, 1, 146, 2, 63, 90, 60, 153, 62, 18, 145, 62, 62, 144, 247, 6, 190, 168, 155, 188, 60, 165, 1, 0, 63, 19, 23, 236, 190, 227, 16, 20, 189, 131, 23, 233, 62, 163, 226, 240, 62, 157, 116, 209, 61, 33, 10, 166, 190, 108, 171, 2, 63, 179, 145, 136, 62, 149, 175, 8, 191, 212, 142, 81, 190, 115, 207, 252, 189, 225, 169, 40, 62, 151, 74, 156, 188, 225, 147, 4, 63, 175, 143, 53, 190, 70, 76, 208, 190, 207, 212, 6, 191, 155, 132, 244, 61, 32, 62, 161, 62, 6, 76, 91, 62, 68, 107, 190, 190, 79, 93, 42, 62, 196, 215, 123, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 168, 241, 189, 238, 204, 170, 189, 193, 80, 33, 62, 178, 248, 157, 189, 157, 2, 165, 61, 184, 177, 92, 61, 69, 198, 241, 61, 108, 130, 14, 188, 215, 91, 47, 190, 194, 183, 204, 61, 124, 163, 118, 189, 145, 46, 31, 190, 29, 10, 191, 61, 218, 193, 241, 61, 144, 21, 26, 190, 219, 32, 249, 188, 186, 255, 240, 61, 21, 27, 29, 188, 241, 124, 111, 61, 4, 165, 35, 62, 229, 243, 3, 189, 153, 1, 23, 190, 49, 228, 141, 189, 187, 55, 43, 62, 37, 171, 44, 62, 150, 10, 120, 189, 126, 39, 203, 61, 1, 99, 39, 190, 101, 161, 5, 62, 230, 5, 33, 190, 202, 167, 150, 189, 14, 61, 130, 60, 117, 136, 47, 62, 238, 116, 138, 189, 253, 168, 141, 61, 41, 59, 102, 61, 247, 228, 199, 59, 184, 104, 57, 187, 211, 242, 48, 190, 16, 175, 45, 62, 102, 216, 86, 188, 10, 145, 3, 190, 219, 184, 185, 61, 53, 251, 3, 189, 123, 197, 181, 61, 208, 8, 150, 61, 2, 96, 38, 190, 41, 217, 242, 61, 52, 119, 17, 189, 232, 251, 177, 189, 141, 192, 213, 189, 245, 158, 41, 62, 91, 60, 253, 61, 51, 28, 82, 59, 161, 31, 19, 62, 99, 225, 148, 188, 160, 120, 177, 60, 163, 186, 92, 189, 154, 168, 189, 61, 23, 246, 203, 61, 158, 113, 195, 61, 186, 49, 29, 190, 43, 122, 39, 190, 154, 200, 115, 61, 238, 158, 21, 62, 127, 233, 45, 189, 149, 33, 13, 190, 97, 40, 171, 61, 183, 166, 94, 189, 237, 149, 135, 188, 29, 202, 151, 61, 152, 227, 201, 61, 26, 87, 117, 61, 161, 45, 6, 62, 198, 82, 173, 187, 41, 242, 32, 190, 43, 108, 6, 62, 245, 53, 236, 61, 137, 68, 114, 189, 193, 151, 208, 61, 205, 211, 163, 189, 233, 225, 219, 61, 158, 239, 123, 189, 72, 221, 231, 60, 109, 245, 47, 62, 161, 62, 28, 190, 124, 66, 9, 190, 112, 68, 86, 188, 37, 51, 227, 61, 24, 206, 236, 189, 209, 84, 7, 62, 147, 89, 47, 190, 56, 253, 221, 189, 94, 53, 199, 61, 63, 249, 145, 188, 75, 40, 204, 188, 152, 180, 37, 62, 0, 250, 23, 190, 210, 155, 174, 189, 132, 244, 149, 60, 100, 142, 125, 61, 121, 48, 200, 189, 37, 235, 204, 61, 254, 49, 49, 62, 125, 178, 13, 188, 134, 9, 57, 189, 138, 14, 51, 62, 104, 39, 14, 62, 65, 223, 175, 61, 108, 88, 198, 61, 179, 174, 244, 188, 112, 200, 62, 61, 10, 150, 137, 61, 245, 224, 18, 190, 72, 163, 22, 62, 183, 216, 5, 61, 197, 129, 15, 62, 57, 84, 154, 60, 187, 141, 32, 190, 140, 201, 22, 190, 92, 206, 54, 188, 29, 247, 17, 190, 177, 250, 128, 189, 40, 13, 133, 61, 184, 250, 243, 61, 84, 33, 94, 61, 188, 0, 52, 184, 165, 89, 104, 188, 240, 140, 164, 61, 79, 141, 46, 62, 237, 238, 191, 61, 74, 10, 233, 60, 142, 249, 223, 61, 239, 66, 133, 189, 129, 68, 154, 189, 142, 96, 145, 61, 234, 165, 30, 62, 143, 216, 129, 188, 171, 241, 46, 190, 0, 244, 39, 190, 18, 98, 218, 60, 246, 102, 185, 61, 206, 251, 46, 62, 199, 218, 218, 61, 249, 7, 62, 188, 252, 158, 4, 190, 146, 180, 220, 61, 4, 177, 211, 188, 245, 217, 25, 190, 187, 96, 200, 189, 21, 25, 6, 189, 39, 249, 227, 189, 19, 101, 7, 62, 7, 180, 39, 62, 27, 89, 234, 61, 44, 71, 18, 190, 240, 218, 219, 61, 158, 64, 140, 61, 222, 100, 47, 62, 202, 42, 0, 62, 67, 18, 223, 189, 3, 67, 97, 61, 62, 23, 249, 61, 110, 38, 146, 189, 206, 82, 9, 190, 118, 38, 145, 58, 55, 57, 1, 190, 124, 243, 41, 60, 149, 70, 23, 61, 82, 183, 234, 189, 55, 11, 72, 189, 167, 93, 239, 61, 124, 98, 190, 60, 95, 121, 156, 189, 243, 54, 182, 187, 211, 182, 248, 189, 109, 143, 161, 188, 234, 101, 46, 62, 68, 16, 48, 61, 222, 243, 1, 62, 83, 143, 131, 189, 59, 162, 205, 61, 225, 81, 1, 61, 168, 66, 74, 189, 181, 174, 14, 190, 41, 87, 160, 61, 81, 154, 173, 189, 23, 153, 16, 62, 9, 214, 213, 189, 179, 134, 45, 190, 179, 22, 1, 62, 239, 120, 208, 189, 84, 110, 6, 62, 146, 59, 204, 189, 74, 223, 27, 62, 116, 108, 2, 61, 182, 220, 237, 189, 16, 134, 108, 189, 179, 65, 138, 188, 82, 225, 209, 189, 205, 14, 249, 61, 46, 58, 62, 60, 7, 63, 188, 188, 59, 150, 7, 190, 153, 160, 8, 190, 179, 86, 231, 61, 201, 113, 186, 189, 152, 145, 234, 61, 172, 86, 204, 189, 58, 187, 28, 188, 94, 30, 182, 61, 149, 200, 192, 61, 73, 152, 133, 189, 120, 160, 139, 60, 92, 174, 174, 61, 10, 99, 6, 190, 118, 14, 238, 61, 62, 245, 235, 189, 113, 54, 79, 60, 170, 171, 157, 61, 187, 236, 153, 189, 186, 194, 102, 61, 142, 145, 107, 61, 131, 107, 89, 188, 76, 15, 201, 61, 254, 210, 230, 188, 215, 241, 34, 190, 228, 248, 22, 190, 11, 167, 10, 62, 26, 117, 220, 189, 185, 178, 120, 189, 9, 119, 247, 189, 181, 203, 174, 188, 41, 102, 233, 189, 150, 125, 28, 62, 190, 107, 147, 189, 125, 122, 52, 61, 158, 142, 17, 190, 36, 181, 165, 189, 55, 2, 246, 189, 20, 186, 185, 189, 167, 36, 224, 187, 111, 45, 118, 189, 217, 139, 253, 188, 174, 97, 220, 189, 30, 156, 20, 190, 139, 73, 155, 60, 160, 96, 41, 61, 233, 84, 172, 189, 91, 216, 10, 189, 33, 51, 20, 190, 128, 97, 5, 61, 84, 35, 41, 187, 102, 20, 227, 61, 35, 163, 39, 189, 12, 80, 29, 62, 245, 96, 20, 61, 237, 171, 158, 60, 176, 18, 177, 189, 83, 43, 88, 189, 113, 229, 131, 61, 185, 39, 44, 190, 3, 84, 160, 58, 84, 119, 86, 61, 192, 29, 150, 60, 162, 100, 31, 61, 201, 250, 37, 189, 222, 230, 236, 189, 99, 144, 56, 61, 248, 11, 157, 59, 46, 33, 116, 189, 81, 244, 231, 189, 23, 170, 68, 188, 237, 121, 12, 62, 66, 154, 2, 62, 142, 191, 75, 187, 173, 16, 151, 61, 85, 97, 40, 62, 170, 241, 179, 189, 93, 72, 152, 61, 138, 97, 198, 189, 68, 125, 186, 61, 86, 215, 204, 189, 94, 120, 222, 61, 66, 65, 29, 189, 2, 164, 201, 188, 67, 102, 18, 189, 66, 208, 241, 188, 156, 232, 242, 189, 178, 93, 217, 189, 189, 11, 22, 190, 70, 187, 12, 62, 27, 130, 152, 61, 254, 80, 94, 188, 222, 212, 102, 188, 229, 212, 183, 61, 96, 108, 30, 60, 135, 7, 248, 189, 19, 43, 106, 189, 158, 23, 209, 61, 254, 248, 4, 62, 98, 237, 195, 59, 206, 49, 171, 61, 29, 113, 216, 189, 134, 197, 83, 60, 62, 59, 33, 62, 251, 146, 44, 189, 210, 17, 72, 61, 144, 207, 52, 188, 209, 209, 11, 62, 232, 156, 52, 189, 0, 235, 100, 189, 179, 136, 161, 61, 248, 216, 39, 62, 230, 193, 253, 59, 43, 46, 64, 61, 112, 170, 19, 62, 174, 71, 45, 61, 200, 81, 156, 60, 62, 2, 26, 61, 110, 49, 136, 189, 246, 147, 188, 189, 93, 121, 143, 189, 82, 97, 191, 189, 222, 194, 174, 189, 24, 232, 48, 190, 38, 46, 26, 62, 8, 30, 37, 190, 156, 177, 200, 189, 97, 35, 26, 190, 14, 221, 19, 62, 189, 162, 216, 61, 134, 123, 39, 62, 142, 148, 224, 60, 187, 134, 157, 61, 206, 251, 30, 62, 57, 177, 41, 190, 114, 211, 244, 61, 135, 165, 141, 189, 11, 173, 95, 61, 193, 222, 174, 188, 45, 204, 177, 61, 82, 1, 58, 188, 251, 86, 228, 61, 254, 99, 65, 61, 25, 23, 36, 62, 107, 16, 18, 190, 72, 162, 168, 61, 56, 179, 191, 61, 163, 194, 240, 189, 51, 47, 29, 190, 29, 166, 196, 186, 228, 139, 239, 61, 9, 254, 186, 61, 115, 87, 14, 62, 250, 141, 130, 188, 252, 97, 18, 62, 199, 224, 31, 190, 219, 240, 152, 188, 231, 175, 52, 62, 147, 226, 225, 60, 46, 154, 152, 189, 173, 94, 80, 189, 206, 184, 216, 189, 247, 242, 39, 190, 44, 132, 190, 61, 228, 128, 137, 61, 246, 227, 233, 189, 59, 174, 20, 60, 207, 248, 12, 62, 176, 222, 5, 62, 53, 255, 238, 189, 64, 252, 51, 62, 93, 199, 52, 62, 12, 170, 240, 61, 106, 61, 148, 61, 120, 224, 35, 189, 56, 89, 225, 60, 117, 29, 235, 189, 31, 119, 16, 190, 74, 195, 36, 62, 168, 42, 129, 189, 87, 99, 111, 189, 133, 209, 210, 189, 248, 122, 240, 61, 71, 4, 187, 188, 45, 138, 173, 189, 156, 232, 69, 189, 68, 200, 32, 61, 156, 6, 44, 59, 207, 139, 158, 189, 174, 50, 32, 189, 74, 180, 163, 189, 125, 246, 104, 61, 214, 11, 202, 189, 115, 171, 131, 61, 212, 86, 192, 61, 204, 66, 52, 190, 177, 128, 211, 189, 75, 31, 230, 189, 92, 83, 50, 62, 73, 209, 34, 62, 180, 42, 48, 190, 181, 212, 166, 189, 10, 169, 21, 190, 231, 192, 207, 61, 152, 170, 212, 61, 5, 57, 238, 61, 54, 242, 40, 190, 26, 108, 6, 188, 114, 233, 229, 187, 142, 204, 38, 62, 189, 241, 251, 61, 157, 196, 58, 60, 204, 202, 19, 189, 56, 227, 178, 189, 98, 163, 245, 189, 189, 133, 247, 61, 56, 85, 14, 62, 120, 237, 34, 190, 49, 41, 8, 62, 228, 29, 33, 60, 55, 232, 42, 62, 203, 44, 164, 60, 95, 46, 223, 189, 132, 98, 14, 190, 194, 187, 91, 60, 225, 87, 36, 190, 61, 225, 248, 189, 21, 210, 14, 61, 63, 166, 35, 190, 45, 24, 63, 189, 34, 147, 141, 61, 61, 127, 128, 61, 24, 184, 8, 190, 181, 109, 169, 60, 83, 151, 128, 61, 125, 240, 139, 189, 91, 87, 158, 189, 99, 93, 0, 190, 144, 186, 26, 189, 58, 211, 179, 61, 29, 210, 46, 60, 241, 58, 169, 61, 185, 235, 25, 61, 197, 124, 7, 62, 46, 246, 173, 189, 64, 25, 203, 60, 201, 199, 48, 190, 145, 248, 205, 61, 152, 218, 238, 188, 34, 223, 131, 188, 39, 56, 172, 189, 224, 163, 48, 190, 128, 134, 147, 189, 81, 169, 218, 189, 255, 173, 46, 190, 252, 122, 139, 189, 57, 119, 29, 62, 196, 18, 188, 60, 89, 97, 6, 62, 205, 244, 3, 62, 227, 172, 112, 189, 103, 24, 167, 189, 234, 139, 34, 62, 140, 171, 192, 188, 72, 90, 132, 188, 82, 12, 42, 188, 205, 207, 11, 190, 72, 96, 49, 62, 217, 147, 5, 62, 111, 194, 15, 61, 217, 7, 33, 62, 2, 218, 30, 190, 206, 163, 17, 190, 117, 57, 205, 188, 136, 58, 20, 61, 253, 126, 226, 61, 98, 122, 244, 61, 123, 253, 195, 189, 79, 10, 187, 61, 8, 246, 50, 190, 37, 47, 149, 60, 48, 150, 216, 189, 120, 148, 235, 189, 121, 148, 137, 189, 18, 218, 35, 190, 177, 57, 42, 62, 156, 251, 19, 62, 19, 105, 103, 189, 241, 55, 214, 61, 103, 9, 1, 62, 75, 132, 217, 61, 59, 131, 249, 188, 234, 108, 20, 61, 147, 222, 17, 190, 36, 218, 196, 61, 163, 110, 184, 61, 78, 149, 62, 188, 14, 199, 56, 60, 85, 179, 50, 61, 95, 154, 82, 188, 59, 1, 157, 188, 213, 126, 241, 188, 128, 146, 7, 190, 61, 86, 216, 61, 63, 90, 43, 190, 25, 99, 191, 61, 169, 147, 17, 62, 111, 122, 79, 61, 59, 120, 139, 188, 121, 31, 238, 189, 78, 129, 6, 190, 249, 82, 102, 189, 224, 34, 12, 189, 165, 139, 14, 190, 87, 28, 24, 190, 207, 146, 41, 190, 193, 209, 83, 189, 125, 223, 241, 189, 162, 96, 189, 189, 201, 199, 176, 61, 250, 138, 1, 62, 255, 145, 146, 189, 223, 226, 63, 189, 58, 196, 14, 59, 97, 64, 32, 190, 196, 223, 12, 190, 169, 91, 120, 61, 22, 231, 14, 62, 251, 105, 82, 58, 41, 97, 99, 61, 82, 249, 223, 188, 219, 252, 217, 61, 105, 74, 95, 189, 157, 121, 41, 190, 236, 16, 25, 62, 174, 102, 129, 189, 159, 13, 14, 62, 200, 184, 28, 190, 72, 233, 41, 62, 150, 231, 121, 189, 194, 99, 249, 189, 242, 125, 191, 61, 157, 206, 56, 61, 182, 43, 111, 189, 38, 63, 167, 61, 65, 5, 186, 60, 155, 31, 38, 62, 87, 232, 166, 187, 57, 92, 70, 189, 62, 184, 60, 189, 206, 155, 176, 189, 54, 249, 5, 190, 13, 192, 45, 190, 82, 185, 122, 188, 80, 168, 39, 190, 77, 144, 144, 189, 127, 224, 32, 62, 38, 199, 25, 62, 23, 160, 66, 189, 248, 120, 156, 61, 230, 197, 236, 187, 175, 89, 50, 190, 67, 29, 18, 62, 163, 16, 11, 61, 187, 206, 97, 188, 134, 61, 117, 189, 113, 32, 153, 189, 7, 38, 230, 189, 142, 222, 42, 189, 58, 182, 220, 188, 144, 68, 167, 61, 197, 236, 32, 190, 27, 160, 252, 61, 125, 137, 99, 189, 66, 23, 192, 189, 119, 206, 189, 61, 143, 167, 206, 189, 115, 118, 156, 61, 124, 130, 180, 189, 62, 226, 229, 60, 74, 217, 39, 187, 191, 51, 180, 61, 25, 61, 158, 189, 113, 87, 23, 60, 254, 21, 31, 61, 176, 198, 231, 61, 207, 222, 21, 189, 78, 117, 4, 190, 238, 5, 70, 189, 73, 226, 157, 189, 108, 111, 188, 61, 108, 55, 38, 189, 103, 49, 220, 188, 67, 250, 174, 61, 254, 186, 48, 190, 67, 72, 15, 190, 192, 253, 7, 62, 8, 55, 89, 61, 165, 195, 131, 188, 230, 107, 11, 62, 163, 153, 14, 62, 45, 73, 118, 188, 93, 218, 21, 62, 80, 62, 247, 189, 17, 181, 239, 60, 83, 138, 37, 186, 108, 243, 254, 189, 114, 127, 130, 61, 57, 189, 188, 60, 237, 255, 169, 61, 33, 25, 65, 188, 194, 190, 191, 189, 97, 134, 207, 61, 123, 233, 147, 187, 145, 32, 24, 62, 56, 253, 169, 61, 142, 242, 201, 189, 255, 155, 43, 62, 36, 86, 247, 189, 92, 201, 225, 188, 91, 108, 157, 189, 61, 238, 137, 188, 73, 7, 16, 190, 126, 79, 191, 189, 164, 203, 7, 62, 212, 154, 182, 60, 230, 23, 3, 190, 229, 210, 162, 61, 73, 185, 17, 62, 191, 9, 65, 188, 186, 65, 3, 189, 167, 32, 246, 189, 165, 23, 189, 187, 167, 131, 232, 189, 98, 228, 47, 188, 158, 201, 247, 189, 221, 158, 35, 62, 160, 28, 150, 189, 35, 9, 7, 62, 87, 64, 151, 189, 132, 157, 154, 61, 226, 227, 60, 189, 253, 44, 161, 189, 207, 181, 86, 189, 11, 143, 39, 61, 64, 59, 250, 189, 219, 167, 198, 189, 68, 232, 42, 189, 155, 254, 46, 62, 16, 65, 137, 189, 67, 221, 31, 61, 196, 47, 0, 62, 138, 165, 112, 189, 202, 158, 19, 61, 205, 98, 182, 61, 176, 163, 42, 62, 161, 238, 5, 190, 26, 209, 30, 62, 221, 167, 153, 189, 248, 31, 18, 62, 92, 139, 21, 190, 82, 212, 239, 189, 122, 175, 124, 61, 45, 72, 10, 190, 111, 113, 50, 190, 243, 109, 12, 61, 110, 188, 146, 189, 26, 9, 236, 59, 162, 251, 24, 62, 193, 31, 99, 188, 172, 244, 1, 190, 142, 202, 80, 60, 100, 110, 146, 189, 171, 133, 10, 61, 156, 171, 245, 189, 41, 84, 18, 190, 136, 80, 150, 188, 160, 168, 188, 189, 217, 229, 207, 188, 215, 184, 20, 190, 166, 44, 97, 189, 80, 27, 239, 189, 103, 11, 147, 188, 56, 145, 206, 189, 162, 3, 175, 61, 11, 181, 2, 62, 27, 223, 90, 189, 244, 103, 130, 189, 43, 2, 189, 60, 13, 55, 146, 189, 249, 165, 36, 61, 229, 192, 51, 189, 105, 85, 133, 189, 2, 245, 33, 61, 8, 172, 1, 190, 38, 25, 151, 61, 177, 150, 168, 61, 51, 223, 154, 61, 97, 141, 124, 189, 167, 126, 208, 188, 249, 94, 53, 61, 104, 140, 124, 188, 122, 15, 47, 62, 95, 102, 60, 189, 166, 103, 41, 62, 81, 144, 231, 61, 12, 146, 60, 188, 229, 61, 57, 189, 56, 247, 45, 61, 117, 254, 133, 59, 209, 174, 12, 62, 51, 188, 139, 188, 161, 30, 61, 61, 162, 47, 38, 189, 105, 119, 200, 61, 15, 193, 87, 61, 144, 94, 162, 56, 68, 174, 231, 189, 107, 246, 229, 61, 90, 70, 144, 189, 5, 19, 88, 61, 2, 104, 205, 189, 216, 58, 137, 61, 246, 169, 235, 61, 34, 107, 73, 61, 139, 93, 8, 190, 41, 130, 45, 62, 239, 65, 130, 189, 252, 116, 48, 190, 250, 40, 217, 61, 246, 54, 4, 190, 158, 71, 116, 61, 178, 162, 182, 60, 15, 1, 133, 189, 57, 95, 131, 61, 185, 141, 0, 62, 30, 94, 58, 189, 187, 130, 155, 60, 102, 110, 21, 62, 12, 183, 228, 60, 142, 107, 152, 61, 220, 67, 240, 188, 195, 240, 169, 189, 78, 210, 19, 62, 114, 32, 253, 61, 206, 89, 45, 62, 40, 25, 52, 190, 116, 163, 187, 61, 156, 135, 13, 62, 68, 17, 192, 61, 63, 33, 141, 61, 26, 68, 87, 189, 223, 202, 242, 189, 139, 130, 15, 62, 14, 34, 140, 61, 9, 79, 207, 189, 97, 222, 50, 60, 201, 138, 245, 187, 10, 40, 155, 189, 208, 127, 27, 190, 55, 171, 161, 61, 88, 119, 19, 190, 120, 244, 81, 61, 56, 180, 219, 189, 13, 158, 229, 61, 102, 228, 152, 189, 52, 84, 166, 59, 63, 119, 215, 61, 68, 246, 222, 61, 139, 198, 221, 61, 167, 97, 168, 189, 103, 122, 18, 190, 10, 101, 158, 59, 156, 82, 154, 189, 130, 104, 225, 188, 14, 81, 252, 187, 80, 217, 114, 188, 123, 198, 11, 62, 79, 132, 130, 189, 179, 232, 50, 62, 43, 35, 42, 190, 57, 215, 234, 189, 212, 201, 50, 188, 94, 251, 183, 61, 84, 78, 47, 190, 247, 141, 193, 189, 82, 16, 208, 61, 118, 32, 51, 62, 27, 111, 1, 190, 228, 43, 186, 61, 239, 141, 245, 61, 78, 96, 207, 189, 125, 83, 40, 62, 129, 29, 174, 61, 132, 37, 51, 62, 46, 183, 31, 190, 178, 155, 49, 62, 255, 92, 80, 61, 207, 241, 143, 60, 87, 38, 214, 61, 56, 58, 173, 189, 14, 195, 35, 61, 31, 153, 20, 190, 13, 40, 18, 190, 175, 243, 152, 188, 67, 128, 29, 62, 148, 33, 214, 189, 68, 76, 238, 189, 143, 59, 201, 189, 45, 72, 192, 60, 118, 211, 149, 189, 6, 17, 215, 61, 245, 66, 103, 60, 111, 58, 255, 186, 31, 4, 29, 62, 65, 240, 138, 61, 63, 229, 166, 187, 74, 13, 45, 189, 77, 37, 19, 190, 177, 238, 3, 60, 96, 239, 147, 189, 251, 20, 137, 61, 168, 143, 27, 189, 4, 84, 21, 190, 8, 106, 213, 189, 3, 207, 226, 61, 149, 253, 18, 190, 176, 116, 163, 61, 248, 4, 211, 60, 47, 231, 43, 190, 90, 210, 156, 189, 110, 170, 241, 188, 152, 52, 3, 190, 113, 217, 239, 59, 238, 100, 128, 188, 129, 69, 171, 188, 133, 163, 57, 61, 98, 104, 48, 62, 237, 141, 22, 62, 108, 112, 159, 61, 193, 87, 104, 189, 233, 232, 43, 62, 21, 99, 14, 190, 208, 20, 186, 188, 16, 162, 136, 61, 120, 80, 43, 62, 255, 56, 89, 188, 149, 9, 189, 189, 221, 66, 70, 61, 7, 242, 219, 187, 69, 132, 232, 188, 98, 152, 196, 189, 52, 101, 211, 189, 154, 168, 124, 61, 236, 252, 221, 61, 35, 216, 218, 189, 69, 236, 196, 61, 166, 164, 19, 189, 189, 186, 46, 62, 198, 162, 51, 190, 189, 64, 198, 189, 55, 169, 167, 61, 73, 19, 182, 60, 226, 69, 29, 190, 122, 116, 42, 189, 8, 115, 193, 189, 249, 213, 195, 189, 38, 221, 242, 61, 37, 225, 188, 61, 247, 12, 142, 61, 220, 140, 162, 61, 39, 49, 150, 60, 72, 48, 35, 190, 244, 48, 188, 61, 192, 20, 160, 61, 215, 134, 189, 189, 198, 103, 159, 189, 231, 242, 158, 188, 127, 5, 4, 190, 30, 146, 72, 61, 36, 150, 155, 189, 176, 106, 21, 190, 152, 16, 19, 190, 26, 234, 160, 189, 123, 251, 241, 188, 113, 201, 144, 189, 111, 189, 190, 61, 30, 83, 10, 62, 218, 120, 44, 62, 60, 14, 211, 189, 75, 128, 173, 60, 252, 70, 137, 189, 65, 121, 26, 190, 203, 222, 108, 189, 132, 235, 94, 61, 190, 9, 112, 61, 62, 210, 110, 189, 164, 18, 208, 61, 197, 115, 213, 189, 165, 222, 27, 62, 249, 74, 28, 188, 55, 96, 44, 190, 12, 114, 174, 189, 90, 94, 104, 189, 66, 7, 127, 61, 135, 14, 138, 189, 77, 255, 45, 62, 226, 64, 48, 190, 155, 167, 182, 189, 218, 61, 210, 61, 190, 3, 133, 60, 179, 76, 59, 189, 21, 193, 171, 61, 255, 25, 223, 189, 68, 111, 36, 62, 59, 51, 22, 190, 47, 132, 164, 61, 153, 25, 225, 189, 221, 125, 194, 60, 95, 44, 11, 190, 221, 140, 54, 61, 133, 76, 1, 190, 207, 185, 42, 190, 125, 155, 1, 62, 14, 173, 150, 189, 57, 144, 28, 190, 131, 126, 141, 189, 107, 244, 222, 189, 126, 185, 72, 189, 114, 141, 27, 62, 62, 5, 180, 61, 38, 87, 29, 190, 14, 40, 180, 189, 0, 148, 201, 61, 132, 12, 137, 188, 28, 215, 203, 189, 189, 191, 38, 190, 232, 163, 13, 188, 95, 48, 91, 60, 236, 154, 70, 188, 60, 11, 176, 189, 154, 119, 189, 189, 6, 202, 105, 61, 101, 22, 225, 61, 223, 75, 1, 190, 146, 14, 0, 190, 76, 89, 134, 61, 55, 206, 35, 62, 174, 136, 9, 62, 147, 67, 169, 189, 16, 181, 32, 61, 209, 86, 70, 61, 207, 76, 38, 189, 104, 142, 132, 188, 201, 210, 152, 189, 176, 110, 200, 189, 188, 124, 1, 190, 22, 73, 155, 189, 118, 207, 146, 189, 97, 85, 213, 61, 223, 150, 134, 189, 169, 192, 75, 188, 250, 226, 128, 189, 232, 238, 241, 61, 181, 117, 246, 189, 20, 190, 196, 61, 42, 228, 209, 189, 198, 50, 249, 60, 43, 220, 212, 60, 39, 42, 149, 61, 109, 176, 254, 61, 145, 63, 184, 189, 14, 159, 217, 61, 210, 72, 246, 61, 60, 98, 247, 189, 204, 200, 124, 189, 250, 85, 169, 61, 57, 93, 32, 190, 238, 173, 9, 62, 169, 55, 45, 190, 21, 168, 224, 189, 151, 48, 2, 62, 205, 75, 119, 189, 36, 178, 203, 188, 164, 33, 30, 188, 77, 70, 137, 61, 126, 34, 4, 62, 203, 67, 45, 61, 68, 232, 48, 189, 160, 128, 91, 189, 139, 76, 30, 189, 181, 124, 135, 189, 252, 139, 53, 61, 94, 106, 157, 186, 150, 244, 4, 189, 130, 34, 157, 188, 52, 244, 106, 61, 44, 170, 118, 189, 249, 91, 186, 61, 119, 217, 217, 189, 43, 114, 3, 62, 145, 29, 82, 61, 108, 98, 31, 190, 86, 204, 73, 189, 99, 130, 46, 188, 249, 1, 239, 189, 23, 167, 178, 61, 156, 9, 133, 189, 129, 191, 179, 187, 149, 60, 170, 61, 109, 210, 40, 62, 51, 7, 188, 61, 28, 194, 29, 62, 2, 89, 0, 190, 245, 107, 226, 189, 9, 94, 12, 62, 53, 213, 218, 61, 22, 123, 39, 62, 94, 159, 69, 186, 221, 220, 107, 61, 218, 120, 8, 62, 85, 57, 43, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {245, 0, 228, 189, 0, 10, 173, 189, 21, 241, 220, 61, 121, 92, 213, 61, 132, 231, 92, 189, 221, 199, 199, 188, 164, 238, 233, 59, 114, 116, 113, 61, 18, 41, 101, 188, 252, 150, 159, 189, 164, 12, 15, 62, 172, 127, 232, 189, 8, 117, 29, 190, 65, 36, 194, 189, 116, 207, 30, 190, 90, 199, 178, 189, 127, 202, 156, 189, 232, 19, 108, 189, 88, 95, 180, 61, 114, 210, 220, 187, 173, 156, 243, 189, 65, 168, 119, 59, 151, 236, 175, 61, 178, 145, 173, 189, 62, 215, 54, 61, 18, 110, 161, 61, 17, 59, 212, 189, 30, 69, 230, 189, 233, 81, 203, 188, 65, 73, 126, 189, 200, 49, 26, 190, 244, 14, 52, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 234, 144, 189, 7, 248, 173, 61, 110, 48, 12, 61, 108, 150, 60, 59, 70, 2, 149, 189, 215, 77, 191, 61, 83, 236, 43, 62, 52, 167, 163, 61, 64, 164, 251, 189, 70, 195, 23, 187, 229, 5, 241, 188, 93, 200, 4, 62, 153, 149, 143, 61, 252, 63, 126, 189, 12, 221, 162, 61, 146, 81, 234, 61, 100, 196, 254, 188, 149, 218, 12, 190, 210, 85, 33, 61, 94, 1, 26, 62, 41, 77, 25, 62, 174, 236, 184, 189, 192, 89, 15, 190, 237, 25, 148, 61, 113, 172, 239, 189, 109, 3, 152, 189, 127, 24, 44, 190, 196, 109, 170, 189, 89, 99, 215, 60, 220, 28, 51, 189, 93, 223, 182, 61, 240, 31, 170, 189, 193, 125, 13, 190, 193, 245, 44, 190, 14, 222, 1, 190, 24, 2, 71, 61, 41, 203, 253, 189, 125, 50, 117, 60, 92, 220, 26, 62, 228, 63, 68, 61, 145, 142, 4, 190, 107, 122, 204, 61, 248, 201, 193, 61, 165, 75, 94, 61, 96, 234, 237, 188, 89, 160, 16, 62, 176, 79, 247, 59, 16, 242, 158, 189, 13, 82, 10, 190, 120, 228, 204, 189, 166, 136, 40, 61, 16, 157, 45, 188, 134, 189, 194, 61, 179, 3, 171, 61, 24, 116, 45, 190, 161, 227, 194, 189, 227, 129, 223, 61, 95, 39, 71, 188, 154, 39, 111, 61, 44, 250, 22, 190, 13, 176, 90, 61, 4, 55, 136, 60, 156, 16, 32, 62, 36, 177, 197, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {79, 62, 168, 189, 149, 46, 61, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {161, 47, 82, 190, 84, 222, 194, 61, 185, 10, 213, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {104, 197, 15, 190, 0, 71, 35, 185};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0094/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}