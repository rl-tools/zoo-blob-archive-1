// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {10, 112, 130, 62, 255, 21, 103, 63, 10, 168, 253, 61, 208, 220, 159, 62, 138, 80, 161, 190, 132, 50, 7, 63, 124, 247, 176, 61, 141, 100, 193, 62, 189, 79, 205, 190, 88, 61, 60, 190, 219, 72, 129, 191, 18, 65, 130, 189, 114, 168, 14, 63, 130, 195, 39, 191, 31, 87, 47, 190, 106, 13, 123, 190, 119, 236, 86, 63, 183, 11, 48, 191, 116, 58, 68, 191, 51, 250, 53, 190, 143, 247, 210, 190, 37, 3, 160, 62, 140, 176, 104, 190, 251, 125, 132, 190, 6, 200, 105, 62, 100, 84, 10, 63, 19, 153, 34, 191, 238, 175, 230, 189, 108, 35, 154, 191, 153, 114, 166, 62, 25, 122, 188, 190, 32, 143, 199, 62, 147, 58, 35, 190, 102, 88, 83, 63, 246, 200, 22, 191, 19, 65, 29, 191, 44, 81, 5, 190, 110, 171, 88, 63, 244, 232, 134, 190, 127, 106, 205, 190, 210, 142, 218, 190, 200, 189, 17, 63, 62, 186, 170, 190, 49, 87, 113, 191, 29, 253, 115, 62, 203, 245, 210, 62, 191, 20, 131, 191, 200, 126, 1, 60, 131, 96, 143, 62, 201, 167, 195, 62, 157, 242, 40, 63, 71, 168, 95, 191, 232, 11, 12, 62, 56, 100, 117, 189, 118, 109, 23, 63, 238, 164, 239, 190, 33, 22, 29, 191, 11, 116, 204, 62, 229, 162, 5, 191, 241, 254, 4, 191, 213, 13, 161, 62, 52, 136, 174, 62, 239, 138, 162, 190, 236, 83, 19, 63, 228, 241, 166, 63, 46, 38, 1, 63, 118, 39, 69, 190, 67, 202, 43, 191, 243, 158, 242, 189, 143, 124, 121, 62, 249, 211, 169, 190, 58, 121, 235, 190, 176, 233, 96, 63, 225, 197, 163, 61, 237, 94, 71, 189, 25, 42, 56, 190, 49, 236, 131, 190, 232, 213, 38, 63, 70, 118, 191, 190, 202, 80, 55, 191, 40, 101, 96, 60, 219, 92, 8, 190, 27, 156, 62, 63, 199, 84, 119, 191, 3, 128, 160, 62, 13, 192, 11, 63, 61, 189, 11, 63, 254, 107, 222, 190, 152, 66, 34, 63, 84, 211, 73, 191, 97, 138, 5, 191, 129, 225, 31, 191, 43, 28, 76, 60, 195, 232, 224, 189, 38, 253, 136, 62, 73, 145, 124, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 66, 8, 191, 2, 236, 63, 62, 15, 12, 96, 62, 224, 29, 162, 62, 237, 162, 67, 61, 116, 247, 4, 189, 157, 12, 194, 187, 68, 3, 192, 186, 116, 205, 194, 62, 243, 135, 138, 58, 130, 57, 88, 62, 229, 59, 17, 62, 45, 123, 37, 63, 90, 235, 247, 58, 234, 151, 30, 190, 188, 168, 40, 63, 198, 221, 241, 62, 40, 69, 233, 190, 78, 94, 194, 190, 154, 249, 133, 189, 127, 2, 211, 62, 75, 145, 169, 189, 103, 73, 24, 63, 237, 183, 174, 189, 68, 210, 232, 189, 237, 43, 219, 190, 237, 161, 2, 62, 144, 208, 17, 62, 231, 49, 206, 61, 47, 162, 155, 190, 119, 227, 53, 61, 26, 159, 243, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 168, 241, 189, 177, 50, 234, 189, 59, 101, 34, 62, 99, 207, 181, 189, 74, 53, 165, 61, 158, 12, 103, 61, 145, 44, 253, 61, 108, 130, 14, 188, 180, 163, 46, 190, 227, 167, 132, 61, 172, 58, 157, 189, 227, 135, 24, 190, 98, 46, 191, 61, 99, 133, 186, 61, 36, 103, 54, 190, 164, 4, 79, 189, 110, 52, 152, 61, 186, 253, 17, 188, 241, 124, 111, 61, 4, 165, 35, 62, 110, 45, 0, 189, 235, 1, 65, 190, 129, 63, 128, 189, 187, 55, 43, 62, 37, 171, 44, 62, 248, 211, 191, 189, 120, 236, 191, 61, 108, 155, 38, 190, 55, 78, 204, 61, 88, 1, 33, 190, 186, 33, 171, 189, 173, 36, 200, 188, 38, 240, 67, 62, 237, 159, 104, 62, 212, 166, 146, 61, 133, 67, 4, 62, 33, 223, 8, 62, 195, 105, 72, 190, 247, 64, 1, 190, 23, 54, 143, 62, 155, 250, 167, 189, 68, 136, 248, 190, 120, 208, 189, 189, 219, 113, 17, 62, 15, 15, 173, 61, 157, 186, 178, 61, 143, 216, 119, 190, 60, 40, 148, 62, 73, 120, 73, 62, 33, 205, 23, 190, 242, 169, 68, 190, 106, 248, 74, 62, 122, 141, 230, 61, 123, 50, 153, 189, 123, 184, 108, 62, 147, 173, 132, 60, 35, 216, 6, 61, 127, 80, 155, 189, 159, 152, 71, 62, 40, 182, 85, 189, 213, 140, 158, 61, 212, 137, 220, 190, 225, 232, 132, 189, 144, 3, 5, 62, 240, 140, 84, 190, 192, 57, 64, 62, 214, 252, 41, 190, 131, 123, 246, 61, 164, 245, 149, 61, 232, 121, 21, 187, 130, 16, 32, 62, 51, 236, 26, 62, 185, 22, 156, 61, 83, 147, 134, 190, 156, 8, 125, 61, 236, 237, 71, 189, 98, 78, 137, 62, 193, 132, 0, 62, 167, 120, 181, 189, 178, 18, 138, 62, 24, 248, 28, 62, 19, 74, 5, 62, 124, 181, 82, 190, 200, 214, 255, 188, 44, 236, 136, 62, 19, 91, 47, 190, 123, 97, 64, 189, 9, 44, 13, 189, 126, 21, 101, 62, 157, 181, 9, 190, 170, 254, 89, 62, 161, 20, 76, 190, 110, 1, 201, 189, 241, 128, 164, 61, 43, 161, 181, 61, 239, 24, 198, 59, 19, 236, 22, 62, 194, 236, 207, 191, 108, 142, 6, 191, 190, 93, 120, 62, 209, 107, 218, 190, 90, 5, 118, 59, 225, 247, 150, 62, 186, 179, 246, 189, 55, 238, 76, 62, 125, 67, 5, 190, 51, 5, 201, 62, 89, 181, 41, 190, 60, 90, 138, 62, 250, 217, 214, 60, 125, 252, 178, 189, 114, 80, 98, 61, 47, 97, 244, 191, 101, 199, 30, 62, 193, 152, 152, 190, 185, 160, 187, 190, 252, 23, 58, 62, 154, 46, 122, 190, 70, 102, 231, 187, 208, 18, 15, 191, 175, 72, 145, 189, 104, 145, 152, 190, 239, 108, 25, 62, 184, 168, 140, 62, 46, 22, 203, 61, 239, 193, 172, 62, 11, 157, 161, 62, 49, 238, 209, 191, 243, 151, 169, 190, 19, 84, 180, 62, 216, 230, 153, 59, 233, 61, 133, 60, 157, 204, 98, 62, 53, 33, 81, 189, 122, 103, 167, 190, 16, 183, 164, 188, 159, 95, 65, 62, 3, 134, 42, 189, 208, 104, 25, 59, 0, 153, 9, 188, 32, 44, 74, 62, 235, 112, 196, 61, 177, 131, 102, 62, 52, 129, 135, 62, 45, 27, 225, 61, 250, 195, 170, 190, 214, 58, 81, 189, 4, 17, 67, 190, 244, 86, 31, 62, 196, 115, 150, 61, 176, 107, 47, 60, 212, 251, 165, 190, 228, 246, 65, 62, 20, 151, 35, 62, 64, 46, 4, 62, 95, 202, 153, 190, 63, 145, 35, 62, 23, 118, 215, 188, 241, 54, 36, 62, 197, 195, 12, 62, 194, 127, 248, 190, 247, 235, 213, 62, 178, 228, 242, 62, 202, 180, 8, 190, 111, 59, 92, 189, 31, 201, 94, 190, 89, 29, 247, 189, 85, 91, 67, 62, 90, 54, 209, 189, 99, 43, 50, 191, 6, 96, 69, 188, 180, 60, 117, 62, 47, 147, 46, 62, 194, 195, 111, 62, 30, 218, 219, 190, 211, 223, 42, 190, 154, 208, 183, 62, 61, 71, 48, 63, 180, 175, 133, 62, 13, 7, 157, 62, 191, 218, 132, 190, 219, 83, 11, 191, 121, 121, 80, 188, 28, 157, 33, 62, 37, 116, 131, 62, 33, 221, 57, 190, 214, 192, 47, 190, 63, 16, 115, 189, 3, 27, 226, 190, 244, 119, 98, 191, 183, 57, 62, 62, 122, 154, 100, 62, 66, 118, 137, 188, 90, 189, 95, 62, 68, 44, 227, 62, 130, 218, 107, 188, 31, 171, 77, 189, 171, 35, 3, 191, 61, 94, 167, 189, 149, 29, 184, 61, 42, 14, 1, 190, 201, 243, 213, 190, 121, 151, 165, 189, 193, 207, 164, 188, 59, 15, 26, 190, 77, 123, 186, 62, 135, 27, 170, 190, 51, 145, 159, 61, 124, 214, 19, 62, 95, 150, 224, 62, 140, 148, 220, 62, 58, 203, 191, 62, 49, 80, 206, 190, 149, 188, 219, 190, 129, 193, 137, 188, 59, 210, 65, 62, 255, 75, 224, 62, 230, 129, 169, 190, 179, 74, 211, 189, 59, 249, 118, 190, 214, 170, 98, 190, 138, 118, 67, 191, 234, 6, 91, 61, 20, 130, 115, 62, 66, 112, 94, 190, 224, 98, 169, 190, 95, 70, 178, 189, 178, 63, 130, 190, 134, 158, 246, 61, 70, 250, 206, 61, 39, 32, 192, 61, 204, 217, 215, 189, 186, 159, 22, 62, 10, 248, 97, 62, 201, 34, 191, 62, 213, 206, 246, 188, 140, 166, 113, 62, 66, 186, 144, 190, 173, 69, 232, 61, 171, 158, 133, 190, 81, 54, 137, 190, 217, 89, 178, 61, 154, 94, 36, 187, 236, 82, 42, 60, 178, 135, 74, 61, 132, 85, 222, 190, 23, 35, 33, 61, 149, 28, 93, 61, 84, 227, 38, 190, 41, 149, 2, 190, 108, 34, 20, 190, 102, 187, 95, 62, 44, 77, 20, 191, 185, 165, 174, 62, 169, 55, 227, 189, 140, 62, 9, 62, 57, 119, 204, 190, 143, 10, 248, 189, 140, 69, 194, 190, 171, 184, 86, 61, 132, 20, 211, 59, 149, 80, 143, 61, 139, 51, 224, 61, 146, 225, 189, 189, 221, 245, 140, 62, 32, 218, 132, 60, 19, 201, 221, 61, 144, 63, 56, 190, 193, 221, 128, 62, 73, 43, 247, 186, 36, 132, 197, 187, 154, 167, 187, 189, 54, 203, 0, 190, 139, 27, 20, 62, 244, 155, 55, 190, 119, 244, 142, 190, 189, 26, 187, 62, 109, 154, 205, 62, 22, 13, 170, 189, 229, 174, 50, 190, 103, 183, 167, 61, 18, 90, 41, 62, 194, 62, 242, 189, 134, 70, 166, 62, 81, 94, 3, 62, 12, 119, 205, 62, 213, 243, 191, 61, 213, 98, 243, 189, 148, 128, 176, 62, 23, 5, 212, 189, 26, 84, 132, 189, 240, 13, 250, 189, 14, 26, 12, 190, 177, 205, 127, 58, 144, 13, 23, 190, 88, 218, 187, 59, 223, 229, 17, 61, 106, 123, 94, 189, 49, 249, 125, 189, 107, 218, 108, 188, 42, 233, 28, 62, 64, 237, 42, 189, 152, 46, 165, 60, 113, 189, 195, 190, 133, 35, 46, 61, 165, 234, 72, 61, 119, 119, 209, 189, 189, 224, 3, 189, 200, 36, 8, 62, 150, 249, 194, 62, 11, 157, 202, 190, 244, 28, 30, 190, 111, 157, 139, 62, 36, 107, 114, 62, 123, 130, 65, 190, 75, 33, 139, 61, 187, 136, 130, 62, 143, 194, 204, 59, 225, 232, 22, 190, 133, 182, 60, 61, 15, 21, 64, 189, 84, 208, 143, 191, 4, 18, 222, 190, 10, 253, 3, 62, 225, 188, 20, 191, 127, 181, 145, 60, 61, 172, 146, 62, 204, 25, 203, 190, 196, 114, 47, 62, 171, 77, 130, 190, 74, 84, 136, 62, 58, 79, 100, 190, 126, 234, 180, 62, 68, 223, 128, 189, 94, 173, 69, 62, 211, 209, 80, 62, 233, 113, 170, 191, 222, 142, 155, 62, 50, 248, 255, 190, 25, 253, 170, 190, 248, 151, 255, 61, 127, 200, 165, 62, 199, 87, 247, 61, 26, 201, 120, 190, 92, 231, 247, 61, 221, 145, 18, 62, 245, 69, 34, 61, 236, 174, 165, 62, 227, 22, 233, 62, 221, 226, 136, 62, 149, 29, 241, 61, 166, 138, 136, 191, 194, 15, 21, 63, 136, 66, 53, 189, 214, 49, 119, 62, 227, 167, 84, 190, 5, 132, 226, 60, 22, 89, 156, 189, 132, 83, 162, 189, 234, 104, 241, 61, 59, 219, 234, 61, 243, 39, 176, 189, 214, 212, 100, 189, 144, 166, 27, 190, 241, 166, 0, 190, 146, 20, 119, 59, 192, 227, 31, 189, 12, 189, 199, 190, 54, 108, 168, 188, 230, 200, 222, 188, 238, 31, 100, 61, 80, 45, 74, 190, 194, 56, 84, 62, 158, 13, 133, 62, 162, 189, 245, 186, 92, 194, 80, 58, 171, 99, 190, 61, 58, 155, 72, 188, 131, 230, 149, 190, 76, 59, 156, 189, 156, 8, 43, 62, 212, 50, 153, 189, 67, 130, 135, 190, 161, 25, 24, 190, 126, 146, 32, 63, 87, 164, 89, 190, 100, 144, 61, 61, 2, 122, 34, 190, 118, 49, 167, 60, 78, 130, 135, 62, 221, 36, 7, 62, 46, 175, 206, 60, 175, 27, 228, 61, 175, 58, 43, 62, 247, 69, 85, 62, 95, 187, 211, 61, 11, 94, 183, 62, 14, 90, 147, 190, 111, 63, 248, 188, 162, 12, 155, 190, 13, 115, 175, 61, 28, 80, 150, 189, 153, 188, 253, 188, 73, 71, 4, 61, 232, 88, 195, 60, 69, 246, 100, 62, 60, 132, 45, 62, 48, 148, 87, 62, 174, 52, 174, 190, 205, 213, 159, 61, 75, 120, 5, 61, 32, 126, 196, 62, 118, 117, 40, 62, 113, 75, 182, 62, 147, 126, 140, 190, 249, 196, 175, 189, 182, 187, 155, 190, 30, 16, 68, 190, 12, 235, 17, 62, 133, 110, 144, 190, 3, 88, 228, 61, 69, 60, 221, 61, 2, 210, 141, 62, 26, 58, 42, 188, 82, 32, 0, 189, 39, 67, 173, 190, 165, 63, 94, 62, 71, 191, 94, 190, 196, 75, 151, 60, 232, 126, 112, 62, 160, 87, 170, 190, 213, 115, 233, 190, 82, 33, 105, 188, 123, 28, 165, 62, 100, 143, 18, 190, 204, 244, 131, 188, 45, 117, 244, 61, 204, 76, 161, 190, 34, 25, 214, 189, 25, 21, 48, 190, 18, 43, 81, 189, 118, 24, 101, 190, 223, 139, 193, 189, 241, 92, 49, 62, 81, 210, 11, 191, 131, 51, 132, 62, 19, 189, 207, 189, 111, 200, 201, 61, 97, 27, 195, 62, 165, 144, 93, 60, 219, 29, 142, 61, 38, 51, 166, 189, 223, 13, 182, 190, 191, 108, 147, 190, 182, 166, 206, 190, 48, 89, 19, 190, 101, 155, 233, 189, 179, 115, 107, 189, 122, 218, 75, 62, 67, 226, 121, 190, 134, 16, 157, 62, 66, 237, 26, 189, 46, 199, 92, 190, 235, 201, 77, 191, 117, 212, 16, 62, 96, 162, 224, 190, 85, 152, 134, 188, 76, 34, 65, 188, 133, 226, 70, 189, 227, 107, 187, 62, 50, 53, 123, 59, 34, 67, 9, 61, 66, 118, 57, 61, 111, 211, 62, 190, 163, 219, 162, 190, 173, 226, 9, 190, 89, 219, 252, 61, 4, 224, 5, 190, 18, 237, 148, 190, 200, 2, 30, 190, 225, 255, 133, 186, 215, 223, 137, 191, 5, 32, 76, 190, 54, 5, 114, 61, 214, 23, 46, 190, 17, 154, 204, 61, 4, 72, 73, 60, 213, 195, 60, 62, 219, 225, 160, 62, 202, 152, 253, 190, 49, 227, 30, 62, 215, 36, 194, 61, 73, 75, 121, 62, 127, 64, 81, 190, 21, 113, 174, 188, 105, 87, 134, 189, 69, 50, 28, 191, 231, 100, 131, 62, 76, 114, 129, 190, 160, 78, 21, 190, 58, 132, 101, 62, 231, 198, 161, 61, 227, 81, 220, 61, 148, 204, 125, 190, 81, 233, 193, 189, 69, 226, 107, 187, 218, 133, 6, 59, 169, 37, 138, 62, 200, 97, 167, 62, 196, 82, 183, 62, 78, 84, 51, 62, 53, 246, 145, 191, 115, 31, 17, 191, 255, 222, 23, 190, 1, 96, 100, 190, 238, 136, 91, 189, 191, 213, 176, 189, 39, 193, 175, 61, 43, 231, 243, 60, 225, 204, 60, 190, 240, 115, 72, 62, 85, 7, 207, 188, 83, 142, 134, 62, 49, 236, 31, 189, 30, 183, 59, 62, 212, 63, 244, 186, 44, 224, 8, 190, 49, 90, 93, 61, 238, 48, 94, 188, 197, 84, 132, 62, 4, 5, 49, 190, 56, 254, 222, 189, 216, 108, 70, 62, 62, 186, 151, 62, 81, 140, 164, 189, 209, 252, 145, 190, 13, 239, 158, 62, 252, 145, 246, 188, 171, 21, 164, 61, 82, 130, 166, 61, 249, 141, 148, 62, 80, 99, 179, 62, 179, 208, 11, 60, 37, 69, 179, 59, 239, 245, 108, 190, 60, 182, 15, 62, 179, 115, 131, 62, 127, 154, 49, 61, 105, 243, 166, 62, 225, 30, 158, 189, 35, 44, 240, 190, 101, 7, 49, 189, 64, 64, 172, 189, 175, 100, 148, 61, 86, 146, 212, 190, 181, 126, 63, 188, 4, 45, 33, 190, 162, 200, 90, 190, 35, 180, 102, 61, 130, 253, 160, 62, 15, 101, 20, 62, 123, 145, 160, 190, 146, 215, 30, 61, 97, 157, 81, 190, 87, 150, 232, 62, 138, 94, 168, 60, 192, 15, 144, 60, 143, 228, 13, 189, 27, 45, 30, 62, 146, 30, 177, 190, 69, 42, 245, 188, 200, 24, 1, 190, 102, 248, 58, 61, 122, 169, 168, 190, 87, 239, 192, 186, 54, 213, 155, 189, 234, 255, 17, 191, 163, 141, 163, 62, 35, 38, 94, 61, 203, 150, 146, 61, 96, 255, 226, 189, 131, 192, 14, 191, 119, 49, 91, 189, 0, 183, 130, 62, 63, 19, 182, 190, 192, 183, 190, 190, 98, 12, 82, 190, 45, 142, 133, 62, 241, 46, 83, 190, 245, 181, 100, 60, 115, 89, 148, 190, 253, 176, 128, 189, 142, 95, 129, 62, 11, 52, 104, 62, 149, 42, 11, 62, 148, 5, 173, 62, 233, 83, 230, 190, 201, 108, 241, 190, 228, 49, 112, 61, 203, 237, 144, 62, 60, 209, 43, 62, 9, 238, 151, 189, 67, 0, 230, 61, 81, 173, 212, 190, 222, 0, 169, 188, 49, 167, 134, 191, 201, 32, 179, 61, 77, 6, 217, 61, 138, 32, 247, 190, 167, 91, 221, 62, 72, 6, 133, 62, 187, 159, 218, 61, 171, 187, 1, 62, 2, 54, 194, 190, 48, 24, 63, 61, 166, 157, 56, 62, 69, 219, 118, 61, 254, 156, 217, 190, 37, 101, 176, 190, 40, 248, 201, 62, 93, 114, 67, 190, 190, 22, 35, 62, 48, 155, 166, 190, 84, 234, 149, 61, 202, 55, 47, 62, 176, 74, 133, 60, 235, 178, 152, 62, 134, 125, 125, 62, 117, 46, 104, 190, 138, 64, 199, 190, 250, 108, 13, 62, 187, 93, 104, 62, 130, 36, 117, 62, 134, 205, 134, 190, 29, 57, 84, 188, 91, 151, 142, 190, 222, 239, 29, 190, 63, 212, 51, 191, 2, 120, 84, 62, 144, 145, 44, 62, 117, 50, 7, 62, 22, 161, 202, 189, 132, 157, 154, 61, 124, 119, 100, 189, 253, 44, 161, 189, 231, 49, 159, 189, 215, 102, 117, 58, 64, 59, 250, 189, 46, 222, 11, 190, 181, 224, 54, 189, 243, 124, 244, 61, 16, 65, 137, 189, 81, 239, 79, 188, 80, 74, 170, 61, 93, 76, 171, 189, 159, 189, 25, 61, 25, 243, 14, 61, 88, 113, 1, 62, 161, 238, 5, 190, 26, 209, 30, 62, 203, 127, 153, 189, 75, 170, 191, 61, 178, 204, 34, 190, 82, 212, 239, 189, 122, 175, 124, 61, 154, 102, 43, 190, 237, 48, 53, 190, 174, 56, 240, 188, 127, 253, 218, 189, 194, 70, 27, 187, 215, 58, 242, 61, 166, 183, 85, 189, 114, 124, 14, 190, 246, 62, 45, 62, 198, 138, 218, 190, 43, 114, 51, 62, 241, 218, 192, 61, 249, 39, 201, 190, 208, 222, 17, 191, 164, 188, 153, 190, 152, 51, 20, 191, 132, 224, 6, 61, 141, 120, 42, 190, 81, 43, 164, 189, 246, 45, 1, 191, 103, 182, 50, 189, 227, 105, 44, 62, 239, 47, 169, 62, 238, 219, 165, 61, 5, 54, 198, 190, 202, 213, 91, 190, 20, 188, 187, 190, 2, 104, 218, 190, 61, 238, 171, 189, 68, 102, 218, 61, 153, 88, 154, 190, 158, 84, 6, 191, 98, 197, 48, 61, 198, 237, 115, 62, 252, 12, 227, 190, 5, 25, 9, 190, 226, 248, 21, 190, 31, 13, 227, 61, 164, 217, 180, 61, 216, 219, 165, 190, 227, 193, 129, 190, 37, 75, 244, 189, 29, 236, 6, 62, 9, 119, 132, 189, 111, 117, 218, 61, 134, 165, 110, 61, 246, 166, 93, 188, 207, 227, 132, 62, 18, 242, 67, 189, 30, 52, 13, 62, 203, 57, 162, 189, 168, 209, 59, 62, 242, 202, 143, 188, 19, 113, 161, 61, 218, 57, 96, 189, 137, 156, 77, 59, 59, 19, 221, 189, 132, 205, 67, 190, 43, 25, 132, 190, 218, 33, 85, 62, 33, 107, 175, 62, 158, 196, 187, 60, 176, 238, 215, 190, 50, 84, 181, 62, 170, 104, 168, 58, 212, 210, 27, 190, 148, 107, 75, 62, 237, 110, 247, 60, 170, 146, 170, 62, 12, 194, 103, 61, 255, 195, 73, 190, 236, 68, 189, 62, 115, 13, 251, 62, 10, 122, 167, 60, 9, 127, 20, 61, 102, 25, 10, 62, 154, 68, 72, 191, 179, 24, 219, 189, 236, 56, 197, 61, 163, 140, 221, 190, 88, 226, 59, 190, 165, 12, 28, 61, 128, 186, 150, 62, 112, 144, 75, 190, 204, 121, 152, 62, 89, 69, 48, 189, 224, 205, 2, 62, 83, 248, 184, 62, 17, 226, 3, 62, 63, 212, 207, 189, 184, 231, 147, 62, 39, 105, 138, 190, 227, 155, 35, 190, 38, 87, 150, 189, 137, 150, 57, 62, 21, 97, 120, 61, 44, 171, 122, 190, 215, 57, 101, 60, 32, 175, 52, 191, 191, 184, 145, 60, 205, 90, 193, 191, 60, 157, 57, 62, 168, 192, 167, 61, 64, 179, 179, 190, 229, 110, 238, 190, 54, 96, 17, 190, 96, 22, 65, 62, 121, 86, 189, 190, 194, 48, 82, 61, 170, 106, 227, 61, 84, 123, 118, 190, 131, 168, 61, 62, 188, 139, 36, 62, 25, 131, 145, 61, 167, 109, 146, 189, 159, 230, 98, 61, 157, 195, 232, 61, 183, 211, 4, 62, 244, 170, 105, 190, 63, 2, 14, 191, 57, 25, 97, 62, 177, 143, 199, 190, 54, 126, 151, 190, 6, 224, 176, 62, 191, 195, 233, 62, 215, 197, 0, 190, 225, 85, 60, 190, 181, 17, 115, 62, 36, 17, 151, 189, 42, 76, 124, 62, 12, 99, 139, 62, 30, 150, 244, 62, 227, 123, 145, 62, 137, 121, 156, 62, 199, 32, 236, 190, 207, 241, 143, 60, 117, 110, 193, 61, 68, 152, 173, 189, 89, 248, 30, 60, 93, 105, 27, 190, 13, 40, 18, 190, 1, 74, 183, 188, 85, 232, 27, 62, 163, 88, 220, 189, 68, 76, 238, 189, 225, 62, 208, 189, 125, 145, 231, 59, 159, 121, 167, 189, 210, 182, 157, 61, 22, 135, 90, 60, 149, 140, 202, 188, 42, 136, 16, 62, 170, 168, 131, 61, 63, 229, 166, 187, 114, 183, 51, 189, 252, 51, 19, 190, 31, 221, 178, 59, 171, 203, 204, 189, 22, 181, 131, 61, 168, 143, 27, 189, 253, 112, 21, 190, 16, 29, 244, 189, 188, 189, 219, 61, 183, 95, 26, 190, 174, 199, 161, 61, 118, 203, 172, 59, 255, 102, 59, 190, 57, 125, 136, 189, 212, 137, 115, 61, 188, 227, 23, 189, 33, 132, 171, 60, 62, 248, 170, 61, 163, 228, 237, 60, 100, 18, 60, 190, 178, 10, 99, 62, 128, 177, 152, 61, 240, 1, 107, 62, 96, 24, 1, 190, 112, 159, 39, 62, 173, 204, 158, 190, 89, 82, 69, 188, 76, 183, 11, 61, 102, 245, 73, 62, 11, 192, 167, 188, 218, 131, 48, 190, 44, 205, 73, 62, 47, 195, 62, 61, 107, 221, 214, 189, 23, 57, 216, 190, 250, 238, 194, 189, 235, 246, 23, 62, 111, 80, 201, 61, 86, 90, 155, 190, 246, 20, 130, 61, 252, 236, 131, 189, 94, 130, 193, 189, 246, 244, 64, 190, 50, 125, 83, 190, 118, 145, 251, 61, 73, 19, 182, 60, 226, 69, 29, 190, 196, 83, 63, 189, 97, 194, 205, 189, 85, 112, 209, 189, 130, 4, 228, 61, 81, 199, 175, 61, 255, 60, 130, 61, 108, 24, 148, 61, 39, 49, 150, 60, 177, 111, 44, 190, 1, 247, 176, 61, 45, 32, 145, 61, 215, 134, 189, 189, 198, 103, 159, 189, 184, 204, 199, 188, 127, 5, 4, 190, 216, 98, 72, 61, 33, 15, 164, 189, 5, 20, 26, 190, 39, 204, 26, 190, 26, 234, 160, 189, 250, 58, 18, 189, 113, 201, 144, 189, 111, 189, 190, 61, 30, 83, 10, 62, 154, 172, 38, 62, 132, 211, 224, 189, 75, 128, 173, 60, 192, 60, 151, 189, 225, 137, 32, 190, 203, 222, 108, 189, 112, 62, 129, 189, 191, 206, 36, 190, 205, 188, 52, 190, 71, 58, 21, 61, 128, 220, 165, 190, 187, 44, 110, 62, 36, 121, 58, 62, 57, 188, 32, 191, 66, 107, 85, 189, 52, 166, 30, 191, 194, 36, 1, 63, 123, 119, 31, 191, 71, 8, 243, 62, 105, 73, 182, 190, 97, 122, 61, 191, 188, 144, 12, 191, 181, 116, 177, 189, 133, 197, 6, 63, 169, 211, 227, 190, 165, 55, 16, 191, 114, 87, 112, 62, 75, 211, 81, 190, 159, 230, 2, 62, 55, 78, 8, 191, 20, 96, 45, 190, 141, 164, 181, 190, 109, 187, 246, 188, 171, 26, 155, 189, 188, 10, 62, 191, 45, 229, 129, 62, 168, 176, 41, 61, 205, 252, 95, 189, 110, 196, 154, 189, 21, 63, 15, 189, 216, 35, 244, 189, 223, 190, 62, 188, 201, 62, 180, 189, 238, 70, 127, 189, 48, 47, 39, 62, 128, 233, 208, 189, 178, 1, 31, 61, 207, 150, 12, 190, 236, 130, 235, 188, 15, 89, 59, 190, 217, 154, 24, 62, 209, 53, 113, 190, 3, 4, 60, 190, 25, 64, 3, 190, 58, 23, 39, 62, 12, 134, 70, 190, 24, 231, 137, 190, 91, 97, 157, 190, 12, 231, 156, 62, 76, 79, 135, 62, 178, 38, 195, 189, 252, 107, 80, 190, 98, 230, 80, 62, 170, 120, 62, 187, 178, 62, 34, 190, 122, 90, 215, 189, 23, 144, 248, 60, 26, 123, 28, 190, 151, 223, 8, 191, 68, 6, 26, 190, 199, 232, 154, 190, 24, 235, 130, 190, 228, 222, 176, 59, 43, 184, 2, 190, 139, 134, 42, 190, 100, 54, 160, 62, 21, 64, 61, 61, 185, 199, 137, 61, 67, 223, 82, 61, 248, 208, 192, 62, 61, 183, 146, 62, 129, 14, 84, 60, 117, 25, 171, 62, 246, 206, 107, 190, 159, 45, 210, 62, 33, 3, 246, 189, 111, 185, 157, 190, 9, 50, 26, 61, 36, 95, 234, 61, 241, 34, 25, 190, 212, 50, 131, 62, 125, 94, 165, 190, 19, 120, 2, 190, 26, 240, 2, 62, 178, 65, 13, 190, 243, 229, 190, 188, 134, 127, 171, 189, 185, 193, 113, 62, 171, 241, 164, 190, 153, 62, 152, 62, 246, 146, 91, 189, 28, 27, 7, 190, 17, 137, 251, 190, 57, 124, 27, 190, 233, 207, 235, 189, 38, 236, 164, 60, 99, 215, 143, 188, 188, 85, 154, 61, 169, 55, 27, 60, 163, 131, 211, 189, 236, 139, 25, 62, 35, 138, 194, 189, 209, 97, 76, 62, 60, 228, 63, 60, 197, 66, 166, 189, 198, 248, 244, 189, 53, 66, 97, 61, 70, 64, 196, 60, 12, 110, 42, 61, 231, 46, 104, 190, 189, 87, 113, 190, 120, 179, 158, 189, 226, 155, 193, 62, 106, 69, 132, 62, 243, 200, 47, 62, 12, 183, 146, 190, 25, 244, 77, 61, 228, 134, 11, 62, 65, 68, 39, 62, 183, 69, 54, 62, 7, 192, 89, 61, 50, 191, 126, 62, 175, 38, 49, 62, 229, 205, 139, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 3, 7, 190, 198, 116, 73, 61, 215, 145, 173, 62, 71, 198, 128, 62, 121, 4, 182, 61, 145, 165, 249, 61, 4, 117, 219, 60, 159, 221, 4, 62, 148, 125, 37, 62, 109, 225, 52, 190, 46, 143, 147, 62, 57, 107, 24, 190, 210, 83, 18, 190, 220, 202, 178, 188, 86, 232, 96, 190, 25, 172, 109, 60, 218, 133, 242, 61, 12, 44, 60, 189, 175, 82, 195, 61, 136, 44, 66, 61, 224, 241, 42, 190, 132, 81, 32, 189, 65, 171, 65, 62, 187, 154, 57, 61, 83, 243, 130, 61, 42, 148, 55, 61, 135, 42, 134, 190, 5, 159, 248, 189, 244, 216, 152, 62, 113, 109, 68, 189, 140, 82, 180, 189, 37, 152, 150, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 212, 68, 189, 216, 145, 15, 62, 3, 223, 198, 60, 162, 122, 89, 191, 39, 103, 13, 190, 109, 244, 111, 63, 212, 111, 51, 63, 184, 184, 182, 62, 105, 155, 227, 190, 23, 120, 130, 189, 107, 89, 34, 191, 131, 84, 72, 62, 120, 166, 229, 62, 229, 31, 154, 62, 125, 94, 10, 63, 111, 57, 164, 190, 24, 133, 16, 190, 161, 214, 204, 190, 194, 3, 229, 62, 211, 17, 244, 62, 124, 126, 221, 61, 215, 84, 160, 190, 61, 185, 173, 190, 139, 38, 1, 63, 181, 160, 205, 190, 10, 206, 149, 189, 52, 80, 80, 190, 240, 251, 170, 189, 23, 35, 144, 63, 226, 176, 186, 190, 93, 58, 159, 62, 194, 229, 178, 189, 171, 150, 0, 190, 255, 184, 174, 190, 118, 70, 175, 190, 69, 250, 33, 62, 169, 243, 75, 190, 91, 102, 133, 60, 194, 158, 174, 62, 81, 176, 176, 61, 187, 170, 46, 190, 230, 65, 205, 62, 241, 177, 71, 62, 178, 207, 247, 62, 157, 9, 224, 61, 89, 42, 191, 61, 5, 89, 170, 62, 142, 219, 178, 190, 209, 10, 104, 190, 248, 36, 181, 190, 228, 87, 104, 61, 119, 201, 146, 189, 251, 167, 111, 61, 184, 68, 128, 62, 161, 111, 46, 190, 9, 176, 90, 190, 53, 246, 26, 62, 185, 86, 74, 188, 120, 152, 154, 62, 29, 168, 16, 190, 159, 54, 235, 59, 10, 150, 122, 62, 188, 122, 51, 62, 231, 178, 69, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 37, 134, 189, 31, 179, 82, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {217, 3, 139, 63, 234, 36, 136, 63, 53, 213, 100, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {102, 226, 250, 190, 11, 233, 16, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0094/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}