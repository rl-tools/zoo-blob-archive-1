// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 17, 82, 61, 143, 65, 10, 63, 194, 141, 74, 62, 188, 145, 34, 62, 30, 99, 238, 190, 96, 202, 89, 62, 40, 191, 175, 62, 139, 45, 254, 61, 192, 221, 165, 190, 21, 60, 102, 190, 51, 9, 60, 191, 119, 107, 81, 190, 163, 51, 173, 62, 206, 53, 159, 190, 87, 144, 39, 190, 138, 141, 201, 189, 174, 204, 229, 62, 174, 217, 165, 190, 211, 155, 26, 191, 66, 30, 140, 62, 71, 139, 156, 190, 0, 220, 18, 62, 85, 92, 26, 190, 72, 34, 74, 190, 129, 225, 223, 61, 144, 140, 57, 63, 177, 205, 216, 190, 215, 94, 173, 62, 235, 44, 24, 191, 97, 88, 166, 62, 114, 81, 91, 190, 132, 97, 4, 63, 108, 32, 169, 187, 146, 170, 241, 62, 26, 244, 62, 191, 131, 65, 243, 190, 38, 192, 136, 60, 204, 129, 66, 63, 27, 22, 66, 190, 116, 208, 10, 191, 74, 217, 28, 191, 203, 170, 205, 62, 242, 34, 67, 190, 80, 24, 151, 190, 199, 153, 159, 62, 11, 158, 166, 62, 37, 125, 93, 191, 244, 213, 12, 190, 179, 37, 144, 62, 111, 205, 240, 190, 231, 19, 137, 62, 98, 221, 54, 191, 150, 58, 255, 61, 222, 210, 101, 60, 36, 105, 216, 62, 64, 205, 170, 189, 42, 159, 16, 191, 187, 237, 152, 62, 205, 229, 13, 190, 35, 53, 222, 190, 246, 44, 175, 62, 220, 155, 136, 62, 88, 130, 52, 190, 83, 195, 150, 62, 210, 169, 76, 63, 97, 189, 11, 63, 76, 63, 69, 190, 255, 245, 66, 191, 32, 71, 181, 190, 136, 177, 143, 62, 8, 99, 173, 189, 63, 47, 203, 190, 111, 26, 3, 63, 235, 87, 201, 61, 161, 106, 49, 189, 93, 152, 253, 189, 63, 224, 112, 190, 98, 28, 30, 63, 99, 72, 148, 190, 92, 53, 50, 191, 247, 28, 119, 190, 118, 43, 24, 190, 245, 242, 97, 63, 252, 130, 19, 191, 34, 45, 179, 62, 178, 145, 108, 61, 6, 242, 7, 63, 147, 8, 212, 190, 82, 114, 95, 63, 21, 145, 144, 190, 70, 193, 12, 191, 140, 20, 235, 190, 14, 195, 139, 189, 153, 135, 42, 190, 31, 17, 244, 190, 197, 168, 203, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 179, 5, 191, 81, 166, 180, 62, 19, 47, 115, 60, 210, 67, 253, 62, 176, 137, 156, 62, 108, 229, 4, 188, 24, 146, 239, 189, 51, 38, 174, 61, 77, 145, 242, 62, 218, 89, 176, 190, 236, 133, 19, 61, 53, 2, 219, 62, 147, 118, 235, 62, 89, 222, 75, 62, 134, 156, 183, 190, 176, 131, 51, 63, 7, 76, 0, 63, 76, 108, 212, 190, 57, 108, 136, 190, 93, 133, 0, 190, 133, 90, 216, 62, 42, 84, 217, 61, 250, 9, 25, 63, 49, 70, 10, 190, 70, 76, 208, 190, 120, 248, 236, 190, 121, 170, 77, 62, 231, 213, 148, 62, 141, 205, 182, 61, 132, 126, 126, 190, 218, 108, 99, 62, 87, 226, 11, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 168, 241, 189, 173, 185, 165, 189, 193, 80, 33, 62, 138, 16, 163, 189, 150, 171, 177, 61, 184, 177, 92, 61, 69, 198, 241, 61, 108, 130, 14, 188, 215, 91, 47, 190, 21, 32, 186, 61, 249, 17, 155, 189, 227, 135, 24, 190, 103, 58, 194, 61, 170, 161, 221, 61, 51, 105, 37, 190, 114, 227, 201, 188, 229, 61, 228, 61, 21, 27, 29, 188, 241, 124, 111, 61, 4, 165, 35, 62, 229, 243, 3, 189, 31, 23, 38, 190, 239, 110, 103, 189, 187, 55, 43, 62, 37, 171, 44, 62, 153, 63, 147, 189, 212, 186, 203, 61, 1, 99, 39, 190, 16, 216, 246, 61, 230, 5, 33, 190, 64, 179, 158, 189, 121, 76, 214, 59, 34, 181, 147, 62, 139, 81, 121, 62, 165, 193, 91, 61, 107, 230, 224, 61, 218, 71, 224, 61, 62, 223, 117, 60, 97, 56, 60, 190, 96, 70, 98, 62, 33, 42, 41, 189, 229, 4, 134, 190, 226, 36, 146, 188, 26, 26, 95, 61, 149, 24, 103, 61, 133, 125, 156, 61, 71, 23, 55, 190, 75, 8, 133, 62, 186, 106, 71, 62, 39, 152, 139, 190, 32, 102, 15, 190, 55, 191, 28, 62, 199, 183, 24, 62, 20, 213, 55, 61, 8, 5, 71, 62, 149, 71, 107, 188, 160, 120, 177, 60, 242, 126, 92, 189, 1, 246, 23, 62, 64, 41, 139, 61, 101, 241, 234, 61, 83, 41, 47, 190, 4, 129, 22, 190, 203, 121, 210, 61, 68, 202, 59, 62, 210, 148, 112, 62, 108, 3, 64, 190, 15, 155, 0, 62, 195, 28, 136, 61, 145, 241, 10, 61, 142, 31, 129, 61, 152, 157, 20, 62, 128, 150, 132, 61, 25, 191, 201, 60, 175, 30, 113, 189, 118, 101, 143, 189, 102, 161, 7, 62, 24, 232, 245, 61, 159, 83, 219, 188, 75, 112, 122, 62, 118, 103, 38, 62, 169, 187, 204, 189, 229, 249, 9, 190, 153, 108, 16, 188, 88, 176, 118, 62, 42, 32, 146, 189, 104, 66, 189, 189, 156, 141, 158, 188, 37, 51, 227, 61, 115, 2, 139, 189, 223, 1, 50, 62, 176, 157, 58, 190, 3, 144, 31, 189, 141, 95, 21, 62, 166, 149, 44, 188, 100, 17, 12, 61, 46, 231, 26, 62, 116, 90, 34, 191, 164, 65, 202, 190, 95, 173, 74, 61, 99, 38, 1, 190, 244, 231, 96, 189, 50, 8, 86, 62, 93, 208, 209, 187, 204, 129, 10, 62, 242, 125, 35, 189, 213, 137, 191, 62, 189, 84, 160, 187, 238, 63, 126, 62, 123, 188, 20, 60, 146, 253, 22, 190, 64, 29, 246, 189, 166, 14, 236, 190, 254, 22, 115, 61, 122, 44, 18, 190, 196, 231, 99, 190, 73, 201, 28, 62, 192, 61, 135, 189, 254, 152, 11, 190, 153, 148, 225, 190, 92, 206, 54, 188, 143, 195, 138, 190, 46, 126, 152, 189, 141, 218, 79, 62, 36, 32, 60, 187, 243, 158, 130, 62, 128, 194, 177, 61, 137, 195, 152, 190, 48, 69, 61, 189, 39, 252, 159, 62, 213, 76, 230, 61, 162, 207, 41, 189, 101, 211, 39, 62, 83, 14, 81, 189, 28, 107, 41, 190, 22, 182, 164, 61, 42, 157, 4, 62, 77, 166, 191, 60, 129, 62, 23, 190, 27, 11, 17, 190, 106, 244, 224, 60, 23, 63, 196, 61, 21, 21, 100, 62, 190, 94, 19, 62, 248, 244, 140, 61, 96, 177, 154, 190, 64, 208, 104, 61, 164, 198, 117, 189, 147, 79, 93, 60, 128, 204, 17, 59, 69, 207, 234, 189, 150, 60, 163, 189, 19, 101, 7, 62, 57, 89, 93, 62, 197, 73, 88, 61, 116, 230, 79, 190, 202, 12, 55, 62, 46, 89, 58, 61, 196, 111, 183, 61, 194, 98, 33, 62, 149, 206, 240, 189, 143, 157, 174, 62, 26, 53, 48, 62, 93, 95, 30, 61, 237, 121, 248, 189, 28, 41, 154, 189, 248, 174, 246, 189, 16, 55, 145, 187, 244, 58, 3, 189, 178, 120, 179, 190, 158, 236, 27, 190, 112, 225, 12, 62, 127, 212, 202, 188, 236, 84, 249, 61, 185, 110, 18, 190, 107, 223, 9, 189, 185, 133, 126, 62, 181, 24, 129, 62, 81, 25, 217, 61, 216, 164, 33, 62, 217, 104, 98, 190, 161, 123, 58, 190, 141, 28, 219, 61, 125, 152, 153, 59, 181, 174, 14, 190, 148, 36, 244, 189, 6, 117, 135, 188, 254, 229, 184, 61, 178, 153, 141, 190, 185, 101, 187, 190, 216, 120, 111, 62, 253, 121, 131, 61, 214, 126, 251, 61, 94, 1, 19, 62, 178, 208, 103, 62, 147, 86, 9, 62, 145, 131, 28, 190, 112, 7, 31, 190, 177, 133, 79, 188, 138, 49, 23, 190, 176, 127, 50, 61, 131, 223, 121, 190, 76, 17, 192, 189, 175, 202, 27, 190, 150, 150, 50, 190, 48, 12, 178, 62, 200, 201, 51, 190, 196, 72, 27, 62, 3, 155, 72, 61, 92, 245, 55, 62, 3, 230, 64, 62, 3, 218, 14, 62, 213, 96, 144, 190, 28, 202, 129, 190, 234, 239, 26, 62, 66, 170, 111, 189, 118, 14, 238, 61, 223, 234, 142, 190, 237, 87, 139, 61, 131, 51, 154, 60, 58, 32, 60, 190, 150, 193, 73, 190, 180, 107, 51, 62, 234, 194, 16, 62, 221, 215, 222, 61, 120, 50, 64, 189, 74, 176, 154, 189, 49, 20, 54, 190, 35, 192, 45, 62, 47, 220, 110, 188, 51, 118, 16, 189, 144, 86, 141, 189, 82, 187, 134, 61, 41, 102, 233, 189, 146, 47, 43, 62, 50, 116, 140, 60, 49, 165, 202, 61, 229, 166, 135, 190, 230, 93, 167, 189, 116, 33, 195, 189, 137, 135, 228, 189, 16, 71, 175, 189, 23, 150, 17, 61, 215, 200, 104, 61, 221, 186, 38, 188, 0, 49, 253, 189, 115, 126, 18, 61, 19, 213, 229, 61, 233, 84, 172, 189, 4, 2, 13, 189, 227, 154, 231, 189, 216, 26, 250, 61, 164, 4, 205, 60, 112, 101, 65, 62, 113, 32, 250, 189, 228, 51, 231, 61, 252, 49, 70, 190, 87, 228, 241, 188, 146, 245, 175, 190, 212, 242, 173, 189, 249, 148, 7, 189, 189, 162, 131, 188, 176, 15, 235, 60, 72, 47, 228, 189, 231, 201, 62, 62, 239, 18, 193, 61, 95, 7, 198, 61, 158, 179, 91, 190, 236, 20, 96, 62, 227, 88, 4, 61, 132, 139, 125, 59, 81, 25, 115, 190, 38, 171, 109, 189, 127, 117, 8, 62, 162, 10, 28, 190, 248, 163, 137, 190, 50, 144, 127, 62, 165, 73, 148, 62, 75, 194, 56, 190, 136, 202, 52, 190, 138, 97, 198, 189, 255, 108, 22, 62, 104, 139, 97, 190, 104, 160, 110, 62, 115, 251, 21, 61, 2, 77, 166, 62, 105, 77, 6, 187, 158, 149, 61, 188, 191, 35, 203, 189, 85, 74, 41, 190, 162, 137, 5, 190, 28, 5, 182, 61, 56, 64, 128, 61, 134, 188, 106, 189, 9, 16, 177, 188, 131, 242, 206, 61, 238, 55, 174, 188, 31, 26, 162, 189, 91, 243, 30, 190, 115, 240, 214, 61, 118, 214, 102, 61, 115, 202, 137, 189, 101, 58, 82, 61, 17, 121, 5, 190, 143, 79, 39, 189, 1, 211, 8, 62, 58, 13, 50, 188, 189, 55, 157, 61, 209, 238, 156, 187, 64, 213, 198, 61, 193, 91, 115, 189, 24, 2, 167, 189, 179, 136, 161, 61, 175, 77, 11, 62, 150, 160, 180, 59, 153, 200, 252, 60, 197, 158, 198, 61, 136, 64, 207, 60, 197, 195, 0, 189, 132, 116, 162, 188, 193, 2, 84, 190, 194, 163, 228, 190, 237, 43, 173, 190, 186, 170, 147, 189, 37, 245, 164, 190, 88, 114, 103, 189, 20, 192, 100, 62, 66, 10, 161, 190, 30, 61, 191, 61, 67, 96, 54, 190, 199, 242, 156, 62, 55, 118, 225, 189, 221, 20, 174, 62, 23, 163, 131, 188, 253, 71, 215, 60, 60, 209, 67, 189, 90, 77, 246, 190, 119, 140, 153, 62, 84, 129, 188, 190, 64, 241, 95, 190, 196, 213, 31, 61, 211, 215, 72, 61, 86, 168, 185, 185, 229, 51, 31, 190, 254, 99, 65, 61, 62, 31, 183, 61, 98, 43, 67, 190, 236, 174, 123, 62, 191, 94, 15, 61, 60, 250, 66, 62, 161, 76, 164, 189, 195, 5, 3, 190, 110, 171, 134, 62, 229, 181, 242, 187, 47, 208, 226, 61, 164, 85, 46, 189, 28, 46, 1, 62, 224, 16, 62, 190, 21, 87, 14, 189, 238, 26, 28, 62, 134, 50, 63, 188, 195, 144, 99, 189, 13, 13, 165, 189, 106, 216, 209, 189, 161, 145, 86, 190, 118, 169, 7, 61, 139, 84, 197, 60, 97, 143, 252, 189, 108, 224, 96, 188, 217, 245, 147, 188, 170, 225, 207, 61, 244, 5, 27, 190, 144, 9, 17, 62, 215, 155, 37, 62, 58, 76, 236, 61, 136, 25, 64, 61, 120, 224, 35, 189, 190, 92, 148, 186, 87, 225, 246, 189, 27, 115, 43, 190, 114, 252, 12, 62, 107, 117, 104, 189, 12, 107, 42, 190, 122, 34, 20, 190, 249, 56, 168, 62, 39, 230, 224, 189, 253, 102, 82, 61, 88, 63, 49, 190, 142, 103, 20, 61, 178, 135, 9, 62, 129, 216, 205, 188, 4, 47, 49, 61, 92, 39, 97, 60, 211, 20, 155, 61, 82, 253, 168, 60, 224, 176, 240, 61, 98, 14, 100, 62, 87, 180, 117, 190, 72, 24, 209, 189, 3, 194, 73, 190, 22, 149, 38, 62, 121, 75, 207, 189, 235, 198, 153, 188, 106, 198, 77, 61, 12, 33, 224, 188, 217, 175, 118, 62, 220, 134, 197, 61, 42, 253, 120, 62, 54, 242, 40, 190, 72, 210, 125, 61, 186, 244, 204, 188, 197, 113, 136, 62, 159, 168, 94, 62, 234, 250, 65, 62, 89, 6, 142, 190, 97, 44, 148, 189, 98, 163, 245, 189, 238, 213, 235, 61, 56, 85, 14, 62, 42, 45, 36, 190, 49, 41, 8, 62, 228, 29, 33, 60, 55, 232, 42, 62, 203, 44, 164, 60, 95, 46, 223, 189, 236, 24, 18, 190, 91, 108, 31, 60, 225, 87, 36, 190, 244, 238, 249, 189, 155, 6, 68, 60, 14, 1, 45, 190, 45, 24, 63, 189, 20, 189, 112, 61, 187, 96, 124, 61, 24, 184, 8, 190, 181, 109, 169, 60, 83, 151, 128, 61, 146, 226, 175, 189, 91, 87, 158, 189, 99, 93, 0, 190, 144, 186, 26, 189, 101, 14, 141, 61, 29, 210, 46, 60, 241, 58, 169, 61, 58, 106, 141, 60, 197, 124, 7, 62, 142, 188, 178, 189, 63, 211, 200, 59, 254, 249, 43, 187, 12, 109, 76, 61, 59, 85, 239, 188, 42, 121, 115, 189, 33, 193, 201, 189, 11, 35, 102, 190, 161, 104, 222, 189, 203, 123, 236, 189, 22, 7, 96, 190, 176, 59, 247, 186, 92, 80, 33, 62, 247, 121, 76, 189, 103, 158, 6, 62, 244, 228, 83, 61, 138, 48, 206, 189, 25, 30, 32, 190, 117, 51, 10, 62, 189, 179, 38, 190, 85, 152, 134, 188, 58, 15, 68, 188, 38, 90, 237, 189, 186, 75, 100, 62, 253, 95, 2, 62, 156, 204, 13, 61, 217, 7, 33, 62, 225, 231, 37, 190, 157, 81, 60, 190, 16, 167, 111, 189, 49, 154, 62, 61, 159, 171, 165, 61, 2, 42, 150, 187, 74, 94, 13, 190, 45, 148, 82, 61, 14, 253, 198, 190, 19, 220, 21, 190, 137, 54, 59, 189, 18, 93, 201, 186, 133, 240, 96, 61, 152, 53, 52, 189, 156, 172, 123, 62, 217, 235, 146, 62, 27, 244, 245, 188, 94, 54, 2, 62, 90, 244, 79, 62, 40, 173, 92, 62, 82, 65, 68, 190, 69, 103, 146, 187, 170, 162, 102, 189, 121, 171, 80, 60, 82, 93, 29, 62, 13, 72, 47, 190, 243, 156, 150, 189, 79, 114, 86, 62, 108, 228, 164, 188, 230, 155, 107, 61, 248, 166, 79, 190, 128, 146, 7, 190, 231, 42, 44, 61, 220, 128, 200, 189, 70, 11, 108, 62, 222, 41, 220, 61, 120, 112, 159, 62, 82, 44, 67, 61, 73, 168, 131, 190, 36, 93, 142, 190, 201, 6, 99, 189, 220, 8, 39, 190, 1, 84, 40, 190, 113, 100, 29, 190, 78, 230, 10, 61, 208, 147, 253, 188, 242, 233, 64, 190, 100, 85, 11, 62, 140, 63, 221, 61, 79, 156, 120, 62, 180, 25, 161, 189, 181, 155, 22, 62, 205, 145, 37, 61, 83, 118, 213, 189, 80, 75, 235, 189, 62, 243, 70, 61, 230, 19, 128, 62, 217, 214, 9, 190, 213, 230, 168, 189, 4, 88, 231, 61, 138, 199, 94, 62, 209, 34, 39, 190, 235, 19, 132, 190, 236, 16, 25, 62, 137, 132, 80, 188, 168, 20, 1, 187, 236, 252, 224, 60, 37, 56, 112, 62, 122, 141, 159, 62, 180, 194, 166, 189, 8, 176, 247, 61, 213, 143, 242, 187, 190, 76, 66, 61, 94, 46, 131, 62, 67, 76, 117, 59, 9, 78, 143, 62, 60, 16, 55, 60, 186, 64, 7, 190, 51, 153, 16, 61, 105, 51, 112, 188, 2, 89, 59, 189, 239, 158, 3, 190, 27, 223, 29, 61, 132, 206, 203, 189, 83, 40, 77, 190, 240, 234, 131, 61, 235, 24, 90, 62, 30, 66, 158, 61, 202, 148, 107, 61, 43, 235, 147, 61, 30, 150, 220, 189, 6, 112, 225, 62, 93, 72, 172, 61, 88, 113, 185, 188, 48, 202, 85, 61, 113, 32, 153, 189, 236, 223, 81, 190, 143, 217, 142, 189, 194, 114, 149, 188, 54, 51, 10, 62, 57, 108, 114, 190, 104, 155, 26, 61, 232, 192, 182, 189, 201, 43, 200, 189, 74, 58, 140, 62, 125, 89, 146, 189, 141, 109, 40, 62, 81, 169, 134, 189, 35, 46, 45, 189, 213, 200, 208, 59, 235, 55, 164, 61, 213, 48, 6, 190, 228, 71, 81, 190, 195, 202, 48, 189, 94, 227, 15, 62, 150, 29, 133, 189, 193, 29, 189, 188, 186, 221, 63, 190, 220, 65, 130, 58, 190, 59, 73, 62, 165, 110, 76, 61, 169, 15, 172, 60, 79, 238, 218, 61, 244, 182, 152, 190, 182, 228, 140, 190, 28, 130, 79, 62, 148, 129, 123, 61, 165, 195, 131, 188, 28, 25, 234, 188, 176, 1, 81, 62, 230, 112, 116, 189, 69, 171, 217, 60, 243, 254, 147, 190, 28, 132, 249, 61, 27, 70, 208, 60, 154, 127, 1, 190, 1, 189, 193, 62, 185, 32, 137, 61, 213, 198, 62, 62, 17, 185, 42, 61, 225, 134, 16, 190, 189, 27, 241, 61, 255, 168, 40, 60, 213, 87, 203, 61, 37, 100, 87, 190, 102, 192, 63, 190, 184, 121, 99, 62, 50, 75, 29, 190, 63, 149, 12, 62, 139, 36, 90, 190, 107, 206, 198, 61, 150, 42, 205, 61, 212, 55, 168, 188, 41, 215, 59, 62, 27, 71, 89, 61, 177, 97, 101, 190, 216, 16, 17, 190, 151, 49, 104, 62, 167, 54, 20, 61, 186, 65, 3, 189, 28, 140, 143, 190, 14, 81, 155, 61, 184, 133, 22, 190, 149, 247, 13, 190, 225, 67, 141, 190, 102, 98, 132, 62, 30, 15, 54, 61, 35, 9, 7, 62, 36, 91, 175, 189, 132, 157, 154, 61, 184, 208, 91, 189, 253, 44, 161, 189, 160, 55, 159, 189, 44, 198, 81, 59, 64, 59, 250, 189, 20, 135, 12, 190, 181, 224, 54, 189, 34, 33, 2, 62, 16, 65, 137, 189, 128, 137, 207, 187, 9, 18, 184, 61, 62, 246, 166, 189, 159, 189, 25, 61, 44, 83, 93, 61, 1, 107, 13, 62, 161, 238, 5, 190, 26, 209, 30, 62, 47, 38, 154, 189, 106, 88, 206, 61, 115, 23, 34, 190, 82, 212, 239, 189, 122, 175, 124, 61, 65, 232, 37, 190, 237, 48, 53, 190, 0, 144, 251, 188, 223, 89, 211, 189, 124, 109, 137, 187, 94, 193, 3, 62, 254, 89, 60, 189, 172, 244, 1, 190, 142, 202, 80, 60, 100, 110, 146, 189, 171, 133, 10, 61, 156, 171, 245, 189, 41, 84, 18, 190, 136, 80, 150, 188, 160, 168, 188, 189, 217, 229, 207, 188, 215, 184, 20, 190, 166, 44, 97, 189, 80, 27, 239, 189, 103, 11, 147, 188, 56, 145, 206, 189, 162, 3, 175, 61, 11, 181, 2, 62, 27, 223, 90, 189, 244, 103, 130, 189, 43, 2, 189, 60, 13, 55, 146, 189, 249, 165, 36, 61, 229, 192, 51, 189, 105, 85, 133, 189, 2, 245, 33, 61, 8, 172, 1, 190, 38, 25, 151, 61, 177, 150, 168, 61, 51, 223, 154, 61, 97, 141, 124, 189, 167, 126, 208, 188, 249, 94, 53, 61, 104, 140, 124, 188, 209, 76, 33, 189, 187, 104, 54, 190, 48, 183, 184, 189, 232, 159, 249, 60, 142, 165, 234, 188, 12, 214, 61, 61, 119, 176, 252, 60, 134, 12, 75, 188, 175, 120, 80, 62, 99, 227, 19, 61, 71, 121, 8, 62, 243, 223, 118, 189, 88, 163, 44, 62, 182, 251, 7, 60, 189, 33, 138, 61, 35, 209, 50, 190, 114, 159, 120, 61, 182, 123, 42, 190, 189, 77, 20, 190, 172, 157, 105, 190, 253, 193, 229, 61, 183, 230, 114, 62, 34, 114, 238, 188, 166, 110, 214, 190, 41, 130, 45, 62, 202, 21, 30, 58, 122, 246, 112, 190, 201, 140, 16, 62, 127, 140, 104, 189, 43, 109, 139, 62, 236, 28, 27, 189, 50, 193, 141, 189, 255, 239, 129, 62, 118, 252, 237, 62, 235, 14, 70, 190, 41, 92, 12, 62, 47, 193, 37, 62, 64, 146, 6, 190, 70, 227, 246, 60, 243, 157, 251, 189, 237, 58, 79, 190, 109, 89, 161, 188, 107, 231, 182, 61, 163, 179, 51, 62, 179, 159, 93, 190, 54, 189, 108, 62, 100, 159, 33, 61, 84, 212, 93, 62, 222, 168, 164, 62, 103, 200, 27, 189, 13, 72, 132, 190, 31, 36, 156, 60, 177, 117, 238, 189, 74, 250, 208, 189, 37, 251, 147, 61, 86, 73, 183, 189, 10, 40, 155, 189, 1, 241, 117, 190, 128, 140, 245, 61, 188, 25, 130, 190, 215, 88, 173, 60, 183, 150, 229, 190, 147, 78, 90, 62, 59, 47, 185, 59, 208, 85, 49, 190, 117, 201, 154, 190, 17, 243, 109, 189, 31, 207, 170, 60, 203, 213, 110, 190, 231, 102, 172, 188, 51, 216, 107, 61, 9, 179, 62, 190, 58, 40, 255, 61, 132, 211, 121, 60, 2, 36, 11, 62, 38, 172, 101, 59, 49, 218, 150, 61, 137, 90, 255, 61, 156, 206, 45, 190, 106, 106, 175, 190, 25, 97, 139, 190, 53, 255, 83, 62, 233, 40, 158, 190, 244, 119, 100, 190, 118, 227, 128, 62, 114, 32, 76, 62, 54, 193, 86, 190, 198, 86, 4, 190, 239, 141, 245, 61, 233, 144, 247, 189, 79, 141, 132, 61, 89, 36, 82, 62, 224, 103, 36, 62, 239, 235, 79, 62, 184, 224, 14, 62, 60, 127, 10, 189, 207, 241, 143, 60, 117, 110, 193, 61, 68, 152, 173, 189, 89, 248, 30, 60, 93, 105, 27, 190, 13, 40, 18, 190, 1, 74, 183, 188, 85, 232, 27, 62, 163, 88, 220, 189, 68, 76, 238, 189, 225, 62, 208, 189, 125, 145, 231, 59, 159, 121, 167, 189, 210, 182, 157, 61, 22, 135, 90, 60, 149, 140, 202, 188, 42, 136, 16, 62, 170, 168, 131, 61, 63, 229, 166, 187, 114, 183, 51, 189, 252, 51, 19, 190, 31, 221, 178, 59, 171, 203, 204, 189, 22, 181, 131, 61, 168, 143, 27, 189, 253, 112, 21, 190, 16, 29, 244, 189, 188, 189, 219, 61, 183, 95, 26, 190, 174, 199, 161, 61, 118, 203, 172, 59, 255, 102, 59, 190, 90, 210, 156, 189, 240, 154, 24, 189, 1, 134, 164, 189, 82, 93, 71, 188, 158, 91, 33, 60, 218, 84, 49, 189, 142, 22, 155, 60, 167, 123, 72, 62, 133, 251, 2, 62, 168, 28, 208, 61, 8, 49, 183, 189, 80, 26, 55, 62, 104, 2, 48, 190, 221, 194, 213, 189, 251, 135, 78, 61, 68, 9, 53, 62, 243, 128, 137, 189, 134, 125, 204, 189, 72, 132, 165, 61, 156, 29, 202, 60, 250, 245, 235, 187, 209, 216, 214, 189, 182, 56, 232, 189, 243, 214, 227, 61, 236, 252, 221, 61, 70, 143, 252, 189, 215, 123, 180, 61, 40, 109, 105, 189, 145, 93, 44, 62, 186, 33, 142, 190, 123, 220, 5, 190, 19, 178, 84, 61, 73, 19, 182, 60, 226, 69, 29, 190, 196, 83, 63, 189, 97, 194, 205, 189, 85, 112, 209, 189, 130, 4, 228, 61, 81, 199, 175, 61, 255, 60, 130, 61, 108, 24, 148, 61, 39, 49, 150, 60, 177, 111, 44, 190, 1, 247, 176, 61, 45, 32, 145, 61, 215, 134, 189, 189, 198, 103, 159, 189, 184, 204, 199, 188, 127, 5, 4, 190, 216, 98, 72, 61, 33, 15, 164, 189, 5, 20, 26, 190, 39, 204, 26, 190, 26, 234, 160, 189, 250, 58, 18, 189, 113, 201, 144, 189, 111, 189, 190, 61, 30, 83, 10, 62, 154, 172, 38, 62, 132, 211, 224, 189, 75, 128, 173, 60, 192, 60, 151, 189, 225, 137, 32, 190, 203, 222, 108, 189, 132, 235, 94, 61, 59, 100, 64, 61, 216, 29, 84, 189, 46, 35, 165, 61, 109, 214, 241, 189, 94, 159, 18, 62, 189, 231, 131, 188, 23, 125, 44, 190, 103, 123, 189, 189, 144, 40, 104, 189, 132, 146, 220, 60, 5, 46, 154, 189, 81, 93, 35, 62, 118, 138, 79, 190, 155, 167, 182, 189, 60, 29, 164, 61, 212, 216, 209, 186, 46, 111, 96, 189, 252, 68, 184, 61, 158, 199, 213, 189, 34, 180, 48, 62, 85, 213, 24, 190, 98, 58, 135, 61, 103, 14, 235, 189, 221, 125, 194, 60, 95, 44, 11, 190, 162, 62, 8, 61, 192, 16, 5, 190, 141, 174, 48, 190, 162, 4, 4, 62, 207, 184, 188, 189, 217, 29, 37, 190, 167, 162, 159, 189, 215, 113, 228, 189, 102, 29, 50, 189, 105, 2, 10, 62, 237, 15, 191, 61, 102, 92, 27, 190, 29, 9, 213, 189, 111, 23, 204, 61, 69, 236, 79, 59, 203, 42, 205, 189, 84, 47, 66, 190, 127, 68, 58, 188, 196, 105, 20, 60, 5, 163, 175, 189, 108, 40, 206, 189, 206, 88, 193, 189, 50, 22, 70, 61, 228, 151, 215, 61, 66, 119, 252, 189, 65, 255, 249, 189, 88, 57, 197, 61, 164, 187, 7, 62, 140, 47, 238, 61, 239, 15, 165, 189, 16, 181, 32, 61, 64, 147, 104, 187, 140, 110, 105, 189, 5, 8, 103, 188, 110, 9, 248, 189, 79, 144, 219, 189, 244, 214, 23, 190, 75, 22, 6, 190, 176, 239, 134, 189, 178, 75, 64, 61, 38, 31, 230, 60, 18, 34, 81, 189, 254, 50, 187, 189, 0, 34, 81, 62, 168, 35, 167, 189, 7, 43, 255, 61, 37, 180, 254, 188, 19, 237, 206, 60, 100, 231, 140, 61, 73, 151, 168, 61, 71, 9, 69, 62, 23, 95, 113, 190, 14, 159, 217, 61, 80, 90, 86, 61, 122, 39, 48, 190, 176, 96, 10, 190, 188, 154, 42, 62, 243, 184, 179, 189, 223, 33, 76, 62, 140, 164, 255, 189, 162, 182, 249, 189, 175, 91, 76, 62, 205, 75, 119, 189, 81, 175, 202, 188, 33, 161, 18, 189, 110, 240, 15, 62, 152, 121, 8, 62, 243, 225, 16, 62, 89, 68, 173, 189, 171, 181, 146, 189, 118, 186, 50, 190, 50, 222, 185, 189, 3, 233, 132, 189, 142, 27, 174, 189, 34, 78, 64, 60, 219, 244, 124, 61, 183, 137, 162, 60, 164, 212, 37, 189, 143, 171, 15, 62, 191, 214, 37, 189, 219, 187, 67, 62, 69, 205, 133, 61, 50, 85, 212, 189, 231, 75, 209, 189, 33, 132, 68, 61, 185, 27, 246, 189, 10, 102, 185, 61, 17, 177, 80, 190, 130, 79, 8, 190, 6, 93, 27, 60, 50, 118, 173, 62, 206, 170, 86, 62, 14, 223, 160, 61, 2, 214, 100, 190, 245, 107, 226, 189, 114, 201, 70, 62, 124, 218, 50, 61, 21, 38, 51, 62, 125, 130, 148, 61, 132, 107, 112, 62, 210, 250, 64, 61, 76, 243, 43, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {30, 94, 243, 189, 79, 217, 82, 189, 203, 224, 33, 62, 243, 133, 53, 62, 111, 98, 37, 189, 111, 157, 205, 60, 12, 81, 78, 61, 166, 253, 76, 61, 152, 211, 199, 61, 80, 81, 52, 190, 83, 234, 94, 62, 225, 36, 54, 190, 191, 247, 80, 190, 200, 143, 215, 189, 56, 145, 99, 190, 37, 91, 168, 188, 179, 128, 16, 61, 78, 92, 201, 188, 171, 146, 0, 62, 132, 33, 91, 61, 164, 180, 35, 190, 65, 168, 119, 59, 226, 212, 242, 61, 183, 193, 6, 61, 3, 9, 82, 61, 42, 148, 55, 61, 15, 134, 19, 190, 5, 159, 248, 189, 208, 240, 83, 189, 106, 236, 162, 189, 160, 111, 51, 190, 206, 20, 75, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 234, 32, 189, 5, 112, 7, 62, 220, 148, 104, 61, 139, 187, 130, 190, 160, 49, 190, 189, 235, 208, 71, 62, 10, 16, 169, 62, 104, 175, 74, 62, 172, 71, 172, 190, 4, 9, 8, 60, 83, 73, 96, 190, 105, 236, 17, 62, 237, 52, 166, 62, 209, 133, 129, 189, 189, 138, 25, 62, 43, 216, 70, 190, 242, 87, 241, 189, 197, 89, 157, 190, 228, 212, 18, 62, 72, 82, 137, 62, 118, 224, 223, 61, 174, 236, 184, 189, 108, 37, 118, 190, 232, 118, 152, 62, 209, 198, 81, 190, 10, 206, 149, 189, 58, 65, 68, 190, 240, 251, 170, 189, 120, 52, 133, 60, 180, 230, 217, 189, 94, 99, 81, 62, 242, 26, 195, 189, 228, 119, 7, 190, 216, 252, 128, 190, 163, 66, 89, 190, 13, 10, 205, 61, 242, 209, 52, 190, 22, 88, 98, 61, 19, 129, 131, 62, 5, 200, 144, 61, 207, 139, 65, 190, 59, 98, 180, 61, 192, 50, 4, 62, 113, 61, 143, 61, 219, 243, 90, 61, 113, 102, 15, 62, 43, 50, 10, 61, 230, 232, 160, 190, 107, 182, 99, 190, 169, 53, 3, 190, 21, 157, 24, 188, 96, 14, 180, 188, 89, 124, 118, 61, 179, 3, 171, 61, 46, 164, 47, 190, 198, 121, 94, 190, 44, 126, 2, 62, 185, 86, 74, 188, 219, 115, 202, 61, 29, 168, 16, 190, 189, 133, 20, 61, 46, 188, 50, 188, 116, 226, 33, 62, 48, 89, 7, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 154, 162, 189, 34, 149, 74, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {184, 85, 62, 190, 200, 68, 148, 191, 87, 188, 246, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {178, 153, 216, 63, 192, 205, 87, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0094/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}