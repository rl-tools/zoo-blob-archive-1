// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 36, 225, 62, 52, 219, 151, 63, 78, 200, 15, 62, 51, 122, 108, 62, 198, 120, 211, 190, 239, 26, 11, 63, 196, 146, 109, 61, 182, 210, 144, 62, 129, 96, 196, 190, 39, 202, 193, 190, 113, 17, 181, 191, 247, 153, 44, 190, 117, 125, 8, 63, 165, 173, 134, 191, 198, 24, 132, 190, 64, 115, 38, 191, 189, 231, 24, 63, 251, 196, 9, 191, 36, 134, 157, 191, 66, 97, 38, 191, 102, 140, 59, 190, 191, 70, 245, 62, 90, 100, 235, 190, 78, 84, 98, 190, 171, 247, 170, 61, 182, 24, 1, 63, 151, 165, 35, 191, 159, 142, 217, 189, 66, 131, 146, 191, 107, 1, 170, 62, 44, 247, 180, 190, 183, 175, 28, 63, 8, 9, 95, 189, 112, 57, 104, 63, 112, 206, 106, 191, 197, 210, 22, 191, 30, 93, 0, 191, 74, 198, 138, 63, 75, 9, 37, 190, 127, 180, 112, 191, 73, 197, 173, 62, 71, 24, 15, 63, 141, 58, 215, 190, 218, 203, 71, 191, 193, 53, 177, 62, 87, 159, 3, 62, 77, 83, 190, 191, 65, 203, 207, 188, 159, 18, 13, 62, 37, 199, 29, 63, 251, 178, 20, 63, 184, 85, 133, 191, 159, 156, 16, 63, 212, 113, 189, 187, 222, 242, 78, 63, 104, 73, 74, 191, 55, 160, 8, 191, 222, 136, 9, 63, 60, 80, 110, 191, 23, 90, 209, 190, 173, 205, 127, 62, 216, 158, 246, 62, 245, 237, 102, 190, 49, 147, 12, 63, 151, 45, 229, 63, 66, 253, 199, 62, 35, 125, 125, 190, 82, 156, 138, 191, 95, 243, 67, 190, 8, 140, 186, 62, 40, 43, 54, 191, 218, 209, 207, 190, 100, 101, 65, 63, 180, 64, 8, 190, 23, 164, 137, 190, 46, 158, 37, 62, 146, 186, 25, 190, 34, 245, 42, 63, 204, 126, 234, 190, 247, 45, 155, 191, 110, 221, 1, 190, 216, 60, 182, 190, 117, 8, 56, 62, 107, 29, 105, 191, 210, 147, 41, 62, 101, 235, 130, 63, 239, 29, 233, 62, 143, 34, 20, 191, 25, 227, 224, 62, 177, 98, 66, 191, 82, 179, 79, 191, 199, 58, 45, 191, 168, 10, 27, 57, 32, 8, 97, 190, 89, 53, 34, 63, 20, 110, 118, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 94, 2, 191, 101, 83, 254, 61, 115, 210, 38, 62, 128, 101, 130, 62, 112, 92, 106, 189, 119, 169, 123, 190, 122, 203, 126, 61, 124, 220, 34, 190, 103, 14, 131, 62, 173, 166, 204, 60, 6, 204, 172, 62, 220, 215, 6, 189, 177, 207, 32, 63, 83, 14, 229, 62, 106, 114, 121, 190, 101, 71, 145, 62, 211, 227, 252, 62, 24, 188, 3, 190, 249, 177, 0, 191, 39, 33, 142, 189, 47, 157, 200, 62, 157, 69, 152, 60, 32, 133, 254, 62, 221, 116, 7, 190, 238, 151, 245, 189, 61, 27, 57, 191, 1, 159, 178, 61, 74, 243, 0, 61, 84, 41, 84, 62, 144, 82, 217, 190, 50, 41, 148, 61, 199, 58, 44, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {161, 159, 4, 62, 197, 3, 9, 190, 225, 40, 8, 62, 235, 219, 87, 190, 5, 182, 127, 61, 85, 166, 70, 61, 148, 241, 96, 188, 33, 92, 56, 187, 37, 126, 142, 190, 234, 102, 186, 190, 215, 124, 40, 61, 40, 37, 178, 190, 125, 16, 131, 62, 13, 197, 141, 188, 91, 231, 14, 191, 45, 81, 140, 190, 244, 33, 37, 62, 91, 96, 231, 190, 241, 124, 111, 61, 4, 165, 35, 62, 191, 103, 131, 61, 49, 80, 17, 189, 76, 26, 17, 190, 187, 55, 43, 62, 4, 160, 241, 190, 244, 12, 97, 190, 177, 9, 94, 59, 227, 33, 155, 190, 5, 43, 86, 62, 188, 73, 183, 190, 243, 108, 168, 190, 184, 188, 140, 60, 16, 233, 193, 188, 175, 250, 7, 62, 91, 222, 47, 62, 39, 56, 97, 62, 129, 94, 145, 62, 121, 70, 115, 190, 120, 44, 77, 190, 241, 122, 182, 62, 186, 199, 94, 61, 38, 94, 183, 190, 192, 237, 197, 189, 94, 62, 100, 62, 1, 235, 250, 61, 71, 106, 18, 61, 186, 154, 50, 190, 107, 224, 180, 62, 190, 78, 180, 61, 147, 75, 167, 190, 173, 218, 149, 189, 114, 73, 149, 62, 133, 202, 95, 62, 154, 129, 1, 190, 159, 179, 159, 62, 212, 205, 182, 61, 124, 105, 238, 188, 240, 170, 148, 189, 245, 68, 142, 62, 253, 199, 62, 60, 57, 35, 201, 188, 106, 34, 251, 190, 126, 46, 15, 190, 156, 107, 235, 61, 182, 253, 39, 191, 212, 139, 90, 190, 131, 13, 208, 189, 234, 84, 175, 61, 102, 91, 242, 61, 37, 160, 36, 189, 82, 30, 239, 61, 123, 215, 252, 61, 40, 61, 30, 62, 47, 241, 121, 190, 136, 3, 4, 62, 179, 77, 86, 189, 60, 250, 173, 62, 76, 249, 10, 62, 236, 108, 37, 189, 232, 84, 26, 62, 127, 253, 19, 190, 201, 243, 171, 61, 78, 142, 62, 190, 65, 133, 7, 189, 151, 170, 163, 62, 194, 241, 129, 190, 77, 40, 129, 189, 55, 103, 221, 188, 30, 185, 189, 61, 36, 218, 183, 190, 142, 9, 119, 62, 207, 131, 54, 190, 225, 144, 184, 190, 155, 179, 56, 59, 84, 13, 160, 61, 32, 222, 143, 189, 210, 160, 7, 191, 126, 244, 204, 191, 233, 255, 0, 191, 217, 177, 99, 62, 103, 102, 51, 191, 190, 228, 55, 60, 186, 251, 130, 62, 172, 234, 153, 189, 245, 254, 74, 62, 91, 252, 98, 189, 6, 137, 193, 62, 153, 148, 39, 190, 120, 64, 137, 62, 173, 73, 166, 62, 21, 76, 117, 61, 65, 235, 152, 60, 135, 112, 11, 192, 119, 69, 34, 62, 30, 145, 145, 190, 47, 233, 196, 190, 114, 27, 58, 62, 239, 245, 2, 190, 5, 9, 160, 189, 205, 172, 15, 191, 194, 145, 113, 189, 53, 56, 157, 190, 96, 154, 27, 62, 198, 180, 133, 62, 54, 200, 76, 190, 140, 228, 169, 62, 4, 161, 165, 62, 207, 81, 198, 191, 150, 45, 70, 190, 238, 167, 166, 62, 78, 124, 57, 62, 155, 173, 243, 190, 231, 200, 60, 61, 41, 129, 168, 61, 250, 196, 191, 190, 31, 88, 76, 189, 48, 20, 133, 62, 196, 54, 242, 189, 130, 122, 71, 62, 175, 99, 72, 189, 143, 63, 176, 62, 200, 108, 190, 189, 169, 172, 157, 61, 186, 139, 144, 61, 239, 169, 193, 61, 125, 147, 33, 191, 134, 223, 208, 189, 97, 3, 138, 190, 22, 69, 46, 62, 57, 228, 66, 62, 8, 237, 20, 191, 112, 166, 167, 190, 253, 38, 210, 61, 20, 96, 101, 62, 195, 7, 188, 190, 123, 90, 69, 190, 161, 1, 22, 62, 78, 228, 114, 61, 102, 175, 208, 190, 213, 32, 0, 62, 109, 197, 174, 191, 145, 50, 218, 62, 204, 113, 226, 62, 49, 106, 14, 191, 178, 207, 111, 61, 78, 121, 67, 190, 139, 175, 35, 190, 220, 184, 98, 62, 74, 95, 81, 189, 137, 30, 78, 191, 41, 12, 91, 62, 117, 21, 154, 62, 146, 33, 138, 62, 209, 194, 174, 62, 114, 22, 47, 191, 245, 106, 192, 189, 204, 192, 195, 62, 76, 126, 106, 63, 185, 225, 155, 62, 249, 124, 188, 62, 154, 22, 79, 190, 116, 65, 4, 191, 128, 139, 128, 61, 255, 131, 52, 62, 25, 103, 160, 62, 130, 73, 65, 190, 50, 178, 38, 191, 87, 232, 125, 60, 15, 119, 206, 190, 118, 134, 109, 191, 175, 22, 96, 61, 21, 178, 192, 62, 60, 38, 252, 190, 130, 52, 178, 62, 199, 49, 224, 189, 229, 175, 61, 61, 117, 55, 80, 62, 45, 162, 228, 190, 201, 115, 146, 191, 161, 36, 88, 62, 55, 66, 13, 191, 134, 158, 170, 190, 78, 65, 70, 190, 109, 106, 217, 61, 34, 23, 131, 190, 244, 40, 55, 62, 152, 86, 219, 190, 191, 38, 95, 62, 110, 136, 65, 62, 140, 138, 204, 62, 224, 168, 18, 62, 113, 149, 234, 62, 18, 87, 194, 190, 240, 227, 6, 191, 114, 70, 191, 189, 5, 73, 31, 189, 95, 230, 25, 63, 138, 82, 253, 190, 135, 163, 196, 190, 214, 174, 57, 191, 116, 156, 151, 190, 107, 96, 112, 191, 186, 194, 172, 190, 154, 55, 148, 61, 18, 9, 89, 61, 110, 87, 45, 191, 38, 40, 177, 189, 50, 77, 250, 190, 6, 63, 136, 62, 116, 103, 71, 60, 135, 123, 86, 189, 35, 135, 150, 189, 0, 38, 60, 62, 12, 74, 178, 62, 244, 130, 179, 62, 175, 83, 195, 60, 95, 99, 135, 62, 12, 223, 60, 190, 28, 96, 82, 62, 219, 137, 176, 190, 181, 6, 239, 61, 255, 242, 25, 188, 40, 113, 171, 59, 111, 20, 213, 186, 130, 205, 53, 62, 65, 126, 253, 190, 144, 145, 154, 189, 231, 78, 116, 60, 144, 61, 170, 62, 147, 171, 12, 190, 10, 27, 160, 190, 205, 236, 43, 62, 152, 204, 4, 191, 116, 94, 130, 62, 107, 2, 51, 190, 81, 235, 115, 189, 76, 93, 54, 190, 73, 43, 241, 60, 47, 241, 173, 190, 184, 54, 174, 189, 113, 98, 43, 190, 14, 71, 147, 61, 222, 126, 221, 61, 46, 7, 235, 189, 253, 112, 117, 62, 152, 95, 148, 61, 192, 230, 150, 61, 85, 67, 100, 190, 146, 54, 128, 62, 107, 155, 253, 188, 41, 139, 169, 188, 18, 55, 1, 190, 30, 72, 12, 188, 73, 92, 9, 59, 173, 208, 130, 190, 134, 40, 181, 190, 10, 98, 168, 62, 187, 228, 11, 63, 203, 14, 161, 190, 202, 65, 88, 190, 7, 110, 103, 61, 71, 39, 167, 62, 21, 238, 129, 190, 143, 152, 149, 62, 3, 78, 115, 62, 69, 109, 203, 62, 133, 17, 61, 190, 27, 239, 78, 188, 109, 116, 44, 63, 158, 15, 3, 61, 156, 94, 6, 189, 11, 40, 198, 189, 170, 236, 42, 191, 227, 70, 42, 62, 237, 172, 51, 60, 216, 58, 97, 190, 76, 58, 164, 188, 158, 99, 245, 188, 59, 132, 40, 62, 94, 137, 112, 190, 33, 129, 148, 62, 224, 203, 158, 186, 188, 106, 76, 55, 131, 232, 203, 190, 185, 135, 51, 62, 29, 184, 96, 62, 190, 215, 195, 190, 33, 246, 213, 190, 212, 230, 136, 61, 44, 192, 228, 62, 230, 186, 33, 191, 215, 110, 229, 190, 30, 254, 167, 62, 206, 87, 102, 62, 157, 59, 8, 190, 21, 168, 19, 62, 174, 178, 170, 62, 56, 39, 12, 62, 184, 76, 117, 189, 193, 38, 142, 61, 254, 96, 74, 190, 147, 126, 136, 191, 232, 94, 220, 190, 202, 34, 42, 62, 114, 4, 114, 191, 44, 144, 115, 60, 29, 74, 163, 62, 21, 158, 197, 190, 130, 242, 20, 62, 157, 45, 197, 190, 203, 30, 133, 62, 232, 245, 115, 190, 48, 57, 181, 62, 210, 211, 167, 61, 237, 59, 48, 62, 40, 151, 30, 62, 180, 69, 154, 191, 41, 74, 188, 62, 142, 10, 12, 191, 119, 250, 196, 190, 132, 133, 204, 61, 154, 17, 22, 63, 220, 243, 214, 61, 163, 36, 138, 190, 121, 69, 12, 62, 207, 44, 130, 62, 137, 44, 203, 61, 171, 125, 151, 62, 202, 110, 61, 63, 119, 162, 126, 62, 96, 123, 33, 62, 93, 44, 132, 191, 245, 2, 3, 63, 208, 147, 253, 189, 238, 70, 178, 62, 28, 153, 124, 190, 202, 64, 39, 191, 0, 189, 228, 61, 39, 163, 255, 190, 27, 237, 207, 190, 178, 115, 97, 62, 28, 251, 159, 189, 197, 57, 210, 189, 220, 7, 8, 191, 108, 1, 24, 190, 243, 96, 79, 191, 30, 54, 51, 189, 33, 210, 25, 191, 121, 27, 91, 190, 9, 5, 112, 190, 118, 244, 230, 190, 127, 178, 26, 191, 195, 161, 140, 62, 226, 5, 88, 62, 18, 110, 53, 191, 51, 180, 156, 190, 132, 171, 222, 59, 196, 127, 189, 189, 26, 220, 152, 190, 219, 27, 174, 61, 36, 65, 130, 60, 142, 171, 34, 62, 9, 187, 68, 191, 87, 11, 28, 191, 174, 45, 172, 62, 227, 123, 245, 190, 120, 126, 44, 60, 133, 198, 158, 190, 90, 68, 216, 61, 84, 63, 81, 62, 108, 107, 159, 59, 185, 17, 55, 188, 173, 94, 227, 61, 134, 115, 193, 62, 92, 192, 33, 62, 253, 113, 172, 61, 104, 232, 159, 62, 19, 135, 67, 191, 100, 188, 80, 62, 235, 24, 169, 190, 231, 186, 223, 189, 233, 41, 29, 190, 115, 69, 218, 188, 40, 59, 81, 60, 153, 87, 79, 61, 36, 32, 73, 61, 109, 126, 208, 61, 5, 154, 51, 62, 0, 197, 110, 190, 36, 220, 203, 59, 246, 38, 148, 189, 165, 168, 186, 62, 126, 119, 234, 188, 230, 251, 152, 62, 78, 69, 155, 190, 222, 201, 238, 190, 85, 93, 34, 190, 211, 39, 49, 190, 247, 93, 250, 61, 234, 220, 8, 191, 195, 76, 226, 62, 114, 118, 134, 61, 196, 40, 10, 62, 159, 187, 145, 61, 175, 132, 148, 188, 68, 0, 208, 190, 83, 6, 255, 61, 73, 38, 7, 190, 94, 180, 93, 189, 191, 95, 25, 61, 157, 203, 185, 190, 233, 153, 65, 191, 204, 251, 213, 190, 25, 112, 57, 62, 156, 15, 6, 189, 175, 35, 53, 61, 45, 12, 29, 62, 225, 166, 97, 191, 154, 42, 89, 190, 137, 20, 7, 190, 115, 90, 155, 62, 144, 108, 98, 190, 64, 41, 180, 190, 191, 128, 36, 62, 136, 110, 197, 191, 97, 224, 121, 62, 34, 117, 186, 190, 101, 20, 23, 190, 88, 204, 187, 62, 125, 75, 127, 61, 20, 2, 149, 62, 142, 236, 225, 190, 115, 252, 185, 191, 212, 50, 54, 59, 81, 36, 56, 191, 60, 73, 86, 191, 226, 255, 210, 61, 44, 93, 132, 61, 188, 244, 203, 62, 182, 49, 68, 191, 97, 81, 237, 62, 14, 207, 76, 61, 184, 33, 130, 190, 96, 36, 63, 191, 151, 172, 114, 62, 156, 136, 186, 190, 171, 77, 69, 191, 34, 96, 25, 191, 198, 79, 251, 61, 27, 203, 243, 62, 230, 253, 85, 191, 127, 224, 222, 190, 238, 214, 189, 190, 93, 171, 69, 190, 51, 48, 170, 190, 105, 137, 12, 62, 42, 42, 122, 62, 234, 184, 16, 62, 196, 210, 217, 189, 28, 193, 0, 190, 129, 117, 1, 62, 236, 61, 116, 191, 94, 174, 45, 190, 6, 124, 34, 62, 89, 168, 152, 190, 56, 0, 220, 61, 120, 232, 102, 61, 105, 88, 90, 62, 57, 113, 160, 62, 6, 223, 79, 191, 73, 158, 32, 62, 174, 170, 219, 61, 8, 141, 129, 62, 201, 108, 72, 190, 166, 113, 239, 190, 40, 254, 19, 190, 221, 242, 228, 190, 221, 182, 132, 62, 99, 15, 133, 190, 84, 219, 12, 190, 83, 137, 107, 62, 65, 213, 186, 62, 112, 132, 186, 61, 29, 98, 106, 190, 25, 150, 235, 189, 69, 226, 107, 187, 237, 127, 80, 61, 230, 44, 133, 62, 143, 109, 13, 63, 33, 8, 182, 62, 186, 65, 221, 61, 202, 172, 92, 191, 238, 49, 214, 190, 108, 41, 5, 188, 115, 202, 84, 190, 212, 192, 168, 190, 52, 1, 166, 190, 179, 218, 160, 60, 230, 222, 140, 189, 59, 162, 150, 190, 60, 151, 16, 62, 199, 229, 210, 61, 75, 148, 117, 62, 142, 163, 31, 190, 43, 188, 73, 62, 49, 29, 179, 188, 194, 178, 167, 189, 148, 181, 126, 188, 93, 5, 153, 61, 239, 72, 133, 61, 35, 141, 190, 190, 145, 25, 151, 190, 44, 64, 28, 62, 231, 219, 224, 62, 9, 245, 239, 190, 126, 56, 225, 190, 204, 218, 134, 62, 250, 195, 36, 62, 187, 165, 60, 190, 126, 166, 58, 188, 74, 118, 188, 62, 216, 20, 129, 62, 242, 113, 165, 190, 245, 115, 254, 61, 32, 28, 144, 186, 8, 238, 97, 62, 62, 43, 161, 62, 84, 246, 168, 61, 39, 216, 147, 62, 110, 68, 115, 190, 234, 112, 79, 190, 173, 189, 188, 189, 115, 179, 249, 189, 162, 144, 218, 61, 37, 120, 76, 190, 18, 143, 140, 189, 152, 75, 186, 189, 242, 237, 140, 190, 237, 90, 46, 60, 48, 170, 143, 62, 47, 56, 136, 62, 150, 211, 130, 191, 197, 123, 243, 189, 4, 69, 141, 190, 58, 148, 214, 62, 43, 232, 86, 62, 137, 181, 255, 189, 97, 237, 168, 189, 130, 164, 196, 61, 220, 180, 132, 190, 127, 143, 179, 60, 174, 121, 218, 190, 248, 87, 58, 62, 68, 133, 68, 191, 34, 170, 27, 190, 155, 234, 209, 59, 59, 23, 82, 191, 9, 204, 164, 62, 80, 11, 174, 190, 248, 80, 50, 62, 177, 82, 29, 190, 105, 185, 106, 191, 201, 138, 1, 191, 225, 147, 215, 62, 199, 72, 222, 190, 127, 103, 180, 190, 32, 20, 68, 189, 34, 202, 210, 62, 83, 150, 173, 60, 86, 37, 148, 61, 247, 141, 77, 190, 248, 38, 97, 189, 204, 252, 133, 62, 70, 229, 162, 62, 249, 172, 154, 189, 120, 103, 2, 62, 74, 33, 74, 60, 96, 103, 86, 191, 30, 172, 12, 62, 246, 159, 112, 190, 129, 65, 238, 62, 84, 38, 29, 190, 133, 172, 38, 62, 168, 203, 159, 191, 88, 116, 17, 190, 251, 212, 150, 191, 57, 194, 145, 62, 217, 74, 7, 61, 215, 9, 177, 191, 99, 66, 204, 62, 42, 239, 84, 62, 195, 127, 78, 62, 137, 23, 27, 62, 125, 166, 45, 191, 35, 24, 51, 189, 25, 224, 22, 62, 108, 151, 214, 61, 80, 153, 154, 190, 112, 229, 3, 191, 148, 230, 209, 62, 150, 79, 64, 190, 234, 106, 64, 62, 33, 4, 34, 190, 33, 0, 75, 62, 50, 185, 202, 61, 18, 61, 246, 189, 94, 87, 75, 62, 125, 60, 43, 62, 167, 191, 25, 190, 52, 84, 13, 191, 128, 10, 145, 62, 13, 96, 140, 61, 93, 232, 157, 62, 226, 48, 182, 190, 204, 97, 13, 62, 51, 178, 205, 190, 245, 66, 148, 190, 148, 236, 134, 191, 90, 97, 227, 62, 97, 16, 46, 61, 23, 105, 7, 62, 212, 43, 208, 189, 1, 35, 154, 61, 124, 119, 100, 189, 253, 44, 161, 189, 124, 193, 159, 189, 252, 110, 45, 188, 64, 59, 250, 189, 154, 221, 11, 190, 181, 224, 54, 189, 240, 246, 222, 61, 16, 65, 137, 189, 124, 160, 253, 188, 145, 10, 130, 61, 108, 186, 171, 189, 159, 189, 25, 61, 64, 178, 152, 60, 203, 132, 235, 61, 161, 238, 5, 190, 26, 209, 30, 62, 83, 200, 157, 189, 230, 233, 175, 61, 21, 233, 36, 190, 82, 212, 239, 189, 122, 175, 124, 61, 154, 102, 43, 190, 237, 48, 53, 190, 86, 126, 241, 188, 89, 134, 243, 189, 194, 70, 27, 187, 194, 166, 231, 61, 129, 210, 139, 189, 64, 171, 12, 191, 227, 128, 23, 62, 9, 8, 204, 190, 205, 114, 162, 189, 234, 133, 173, 61, 225, 43, 202, 190, 77, 69, 243, 190, 146, 248, 150, 190, 124, 162, 217, 190, 146, 236, 84, 189, 43, 89, 219, 189, 97, 89, 191, 189, 81, 201, 136, 190, 167, 240, 221, 189, 165, 242, 65, 61, 52, 82, 152, 62, 118, 128, 48, 61, 117, 106, 0, 191, 182, 77, 12, 61, 105, 152, 114, 190, 65, 184, 52, 191, 181, 3, 52, 61, 250, 215, 43, 190, 40, 114, 227, 188, 99, 14, 12, 191, 254, 16, 54, 61, 39, 25, 250, 60, 158, 18, 221, 190, 75, 107, 14, 190, 147, 151, 18, 190, 88, 140, 65, 189, 124, 91, 162, 61, 203, 28, 202, 188, 43, 122, 99, 190, 24, 172, 140, 189, 69, 97, 104, 62, 89, 204, 99, 190, 52, 6, 9, 62, 180, 189, 43, 62, 12, 72, 17, 189, 135, 90, 112, 62, 117, 24, 0, 190, 187, 169, 250, 61, 186, 243, 250, 189, 246, 43, 61, 62, 138, 63, 41, 190, 2, 56, 203, 188, 212, 227, 233, 189, 50, 251, 106, 61, 62, 55, 80, 190, 41, 21, 119, 190, 233, 160, 163, 190, 107, 133, 42, 62, 149, 212, 213, 62, 30, 155, 31, 187, 211, 73, 220, 190, 18, 15, 163, 62, 112, 39, 57, 187, 10, 211, 21, 188, 237, 95, 76, 62, 156, 5, 120, 61, 153, 145, 183, 62, 67, 89, 209, 61, 176, 251, 110, 190, 70, 244, 152, 62, 99, 243, 237, 62, 125, 228, 28, 190, 214, 192, 89, 62, 116, 247, 35, 61, 53, 95, 245, 190, 84, 27, 146, 189, 120, 230, 225, 188, 154, 26, 12, 191, 227, 235, 200, 189, 38, 94, 103, 62, 5, 157, 77, 62, 238, 246, 88, 190, 50, 176, 219, 62, 127, 234, 189, 61, 19, 118, 182, 61, 192, 247, 189, 62, 204, 16, 8, 63, 53, 232, 255, 190, 187, 37, 228, 61, 113, 90, 133, 190, 74, 138, 137, 190, 179, 163, 128, 61, 161, 156, 63, 190, 102, 240, 134, 61, 190, 94, 147, 190, 218, 249, 24, 62, 143, 93, 39, 191, 122, 155, 62, 188, 184, 156, 128, 191, 141, 40, 200, 62, 172, 10, 206, 61, 60, 53, 51, 62, 58, 193, 247, 190, 219, 119, 189, 189, 244, 225, 186, 62, 61, 135, 39, 191, 97, 24, 199, 61, 50, 85, 142, 62, 214, 199, 105, 190, 138, 250, 53, 62, 121, 24, 199, 190, 6, 218, 137, 61, 221, 93, 158, 189, 16, 11, 132, 61, 189, 43, 203, 189, 66, 194, 162, 190, 229, 152, 131, 190, 90, 77, 220, 190, 210, 30, 104, 62, 201, 224, 235, 190, 39, 210, 172, 190, 250, 170, 170, 62, 76, 65, 32, 63, 136, 38, 166, 189, 77, 2, 78, 190, 157, 138, 75, 62, 214, 29, 222, 190, 126, 199, 225, 62, 64, 108, 143, 62, 92, 16, 20, 63, 159, 82, 171, 62, 97, 183, 233, 62, 49, 97, 98, 191, 207, 241, 143, 60, 117, 110, 193, 61, 68, 152, 173, 189, 89, 248, 30, 60, 93, 105, 27, 190, 13, 40, 18, 190, 1, 74, 183, 188, 85, 232, 27, 62, 163, 88, 220, 189, 68, 76, 238, 189, 225, 62, 208, 189, 125, 145, 231, 59, 159, 121, 167, 189, 210, 182, 157, 61, 22, 135, 90, 60, 149, 140, 202, 188, 42, 136, 16, 62, 170, 168, 131, 61, 63, 229, 166, 187, 114, 183, 51, 189, 252, 51, 19, 190, 31, 221, 178, 59, 171, 203, 204, 189, 22, 181, 131, 61, 168, 143, 27, 189, 253, 112, 21, 190, 16, 29, 244, 189, 188, 189, 219, 61, 183, 95, 26, 190, 174, 199, 161, 61, 118, 203, 172, 59, 255, 102, 59, 190, 68, 208, 245, 190, 167, 60, 202, 188, 233, 149, 44, 189, 247, 207, 196, 61, 26, 71, 162, 62, 110, 178, 60, 61, 149, 17, 117, 190, 252, 114, 183, 62, 243, 174, 145, 61, 183, 231, 53, 62, 132, 5, 207, 190, 147, 209, 140, 62, 169, 1, 214, 190, 2, 215, 127, 190, 216, 142, 176, 60, 90, 160, 153, 62, 250, 7, 51, 190, 220, 238, 70, 189, 105, 151, 183, 62, 133, 119, 58, 62, 87, 129, 12, 190, 3, 133, 178, 190, 178, 241, 37, 187, 206, 36, 143, 62, 165, 136, 82, 62, 131, 145, 2, 191, 84, 230, 172, 61, 24, 37, 207, 189, 201, 237, 141, 190, 211, 248, 12, 190, 48, 58, 85, 190, 20, 196, 130, 190, 73, 19, 182, 60, 226, 69, 29, 190, 196, 83, 63, 189, 97, 194, 205, 189, 85, 112, 209, 189, 130, 4, 228, 61, 81, 199, 175, 61, 255, 60, 130, 61, 108, 24, 148, 61, 39, 49, 150, 60, 177, 111, 44, 190, 1, 247, 176, 61, 45, 32, 145, 61, 215, 134, 189, 189, 198, 103, 159, 189, 184, 204, 199, 188, 127, 5, 4, 190, 216, 98, 72, 61, 33, 15, 164, 189, 5, 20, 26, 190, 39, 204, 26, 190, 26, 234, 160, 189, 250, 58, 18, 189, 113, 201, 144, 189, 111, 189, 190, 61, 30, 83, 10, 62, 154, 172, 38, 62, 132, 211, 224, 189, 75, 128, 173, 60, 192, 60, 151, 189, 225, 137, 32, 190, 203, 222, 108, 189, 198, 219, 10, 63, 109, 188, 76, 190, 18, 87, 132, 189, 122, 144, 235, 62, 213, 245, 133, 63, 240, 59, 161, 62, 117, 165, 128, 62, 237, 119, 159, 191, 229, 94, 166, 61, 183, 212, 49, 191, 207, 225, 37, 63, 193, 227, 127, 191, 99, 14, 38, 63, 85, 68, 91, 191, 255, 0, 111, 191, 48, 220, 235, 187, 210, 4, 97, 190, 176, 136, 10, 63, 186, 9, 156, 191, 131, 238, 96, 191, 49, 128, 200, 62, 122, 12, 182, 61, 253, 146, 133, 62, 161, 158, 77, 191, 66, 148, 87, 191, 63, 115, 131, 190, 67, 239, 191, 62, 41, 95, 21, 61, 140, 153, 106, 191, 226, 221, 154, 62, 151, 169, 186, 62, 90, 83, 3, 191, 157, 15, 207, 62, 235, 55, 86, 61, 10, 206, 178, 189, 213, 198, 41, 189, 62, 10, 123, 190, 239, 176, 246, 189, 72, 79, 62, 63, 250, 250, 70, 190, 202, 72, 12, 189, 190, 140, 199, 189, 116, 216, 24, 61, 153, 45, 133, 190, 205, 207, 46, 62, 80, 136, 231, 190, 114, 164, 200, 190, 111, 82, 55, 190, 188, 232, 132, 62, 0, 167, 200, 58, 8, 211, 41, 191, 76, 188, 25, 191, 2, 227, 135, 62, 142, 137, 149, 62, 121, 111, 96, 190, 187, 182, 7, 191, 85, 199, 133, 62, 1, 40, 125, 189, 45, 79, 146, 190, 252, 233, 133, 190, 222, 65, 138, 61, 62, 137, 160, 190, 105, 40, 42, 191, 181, 159, 115, 190, 216, 210, 75, 189, 221, 23, 148, 190, 11, 187, 76, 189, 220, 141, 202, 190, 224, 44, 34, 190, 66, 33, 128, 62, 116, 120, 200, 189, 188, 74, 211, 188, 19, 64, 190, 60, 206, 110, 213, 62, 188, 240, 129, 62, 37, 125, 126, 189, 214, 57, 164, 62, 172, 145, 98, 190, 117, 80, 12, 63, 98, 110, 135, 190, 203, 178, 142, 190, 217, 170, 193, 189, 33, 97, 56, 61, 163, 214, 125, 190, 166, 213, 133, 62, 217, 157, 247, 190, 83, 48, 134, 190, 37, 22, 168, 60, 113, 166, 99, 189, 79, 239, 199, 188, 2, 118, 154, 190, 33, 172, 52, 62, 208, 80, 180, 190, 198, 3, 112, 62, 179, 1, 25, 190, 192, 210, 181, 190, 119, 235, 221, 190, 190, 201, 211, 189, 155, 40, 203, 189, 216, 136, 10, 190, 105, 157, 105, 190, 207, 110, 206, 60, 1, 209, 170, 189, 87, 94, 95, 190, 118, 203, 219, 61, 38, 204, 159, 60, 166, 91, 45, 62, 238, 47, 234, 189, 235, 142, 184, 189, 5, 254, 92, 190, 47, 221, 78, 61, 148, 188, 8, 190, 143, 130, 9, 61, 231, 80, 200, 190, 22, 237, 184, 190, 211, 98, 106, 190, 68, 210, 158, 62, 130, 84, 176, 62, 195, 183, 9, 190, 52, 122, 197, 190, 174, 242, 195, 189, 210, 117, 159, 62, 150, 157, 240, 188, 112, 13, 5, 62, 120, 59, 42, 61, 131, 214, 41, 62, 23, 7, 132, 190, 125, 139, 23, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 124, 129, 189, 51, 23, 190, 61, 231, 167, 158, 62, 10, 246, 122, 62, 174, 119, 53, 60, 44, 57, 83, 62, 99, 161, 177, 61, 77, 27, 133, 62, 46, 231, 4, 62, 91, 230, 158, 189, 178, 0, 156, 62, 41, 51, 110, 190, 39, 173, 42, 190, 56, 2, 2, 190, 244, 224, 1, 190, 55, 45, 57, 61, 117, 205, 167, 61, 22, 220, 61, 189, 60, 176, 76, 62, 244, 86, 0, 62, 178, 191, 57, 190, 107, 19, 53, 190, 20, 226, 40, 62, 244, 125, 194, 61, 0, 222, 203, 61, 42, 148, 55, 61, 249, 197, 150, 190, 5, 159, 248, 189, 7, 112, 5, 63, 240, 74, 134, 60, 207, 183, 255, 189, 95, 252, 58, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 75, 35, 190, 54, 26, 154, 61, 98, 144, 123, 61, 251, 102, 74, 191, 131, 197, 230, 189, 155, 87, 138, 63, 158, 208, 176, 63, 254, 148, 162, 62, 22, 21, 204, 190, 109, 29, 158, 190, 85, 104, 19, 191, 110, 107, 128, 63, 157, 118, 196, 62, 31, 74, 170, 62, 139, 1, 140, 63, 229, 119, 136, 190, 149, 207, 67, 190, 34, 255, 195, 190, 191, 101, 120, 63, 5, 243, 18, 63, 1, 194, 220, 61, 7, 52, 48, 190, 112, 225, 132, 190, 121, 225, 8, 63, 58, 238, 5, 191, 10, 206, 149, 189, 103, 21, 9, 191, 240, 251, 170, 189, 249, 86, 237, 63, 77, 169, 63, 191, 185, 7, 140, 62, 153, 166, 36, 189, 228, 50, 155, 190, 105, 114, 236, 190, 23, 38, 140, 190, 39, 66, 110, 62, 95, 173, 168, 190, 40, 155, 63, 188, 156, 109, 38, 63, 12, 144, 83, 61, 53, 20, 109, 190, 152, 77, 242, 62, 176, 89, 140, 62, 102, 159, 231, 62, 150, 193, 77, 61, 171, 148, 210, 60, 204, 23, 159, 188, 136, 254, 181, 190, 243, 236, 101, 190, 183, 235, 184, 190, 119, 59, 2, 63, 9, 78, 74, 190, 185, 96, 111, 61, 138, 40, 79, 61, 99, 230, 80, 190, 15, 229, 135, 189, 1, 9, 41, 62, 185, 86, 74, 188, 24, 88, 186, 62, 29, 168, 16, 190, 190, 41, 177, 189, 82, 84, 221, 62, 27, 55, 31, 62, 23, 93, 87, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 50, 27, 188, 198, 229, 167, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {184, 245, 87, 189, 233, 153, 11, 191, 7, 111, 203, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {168, 139, 225, 186, 94, 247, 204, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0094/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}