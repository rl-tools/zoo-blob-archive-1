// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {100, 179, 16, 63, 220, 231, 155, 190, 130, 185, 213, 190, 91, 145, 22, 63, 191, 154, 162, 62, 232, 251, 10, 191, 133, 71, 88, 62, 124, 154, 41, 63, 2, 217, 210, 190, 135, 232, 0, 62, 28, 129, 117, 63, 173, 86, 10, 190, 122, 33, 24, 191, 8, 178, 209, 61, 244, 198, 52, 191, 150, 27, 235, 190, 60, 134, 162, 63, 229, 88, 32, 62, 146, 147, 244, 62, 82, 27, 46, 63, 39, 40, 166, 62, 121, 60, 102, 62, 183, 114, 99, 61, 240, 121, 49, 62, 238, 4, 3, 63, 53, 84, 51, 189, 236, 83, 215, 62, 40, 68, 250, 62, 8, 211, 85, 63, 227, 66, 74, 62, 228, 150, 53, 62, 143, 127, 26, 191, 184, 190, 211, 62, 5, 41, 159, 190, 239, 116, 130, 63, 90, 5, 181, 62, 139, 195, 19, 62, 206, 165, 87, 63, 150, 228, 69, 62, 247, 183, 65, 63, 119, 165, 22, 63, 218, 40, 16, 63, 218, 72, 165, 190, 153, 38, 200, 191, 210, 8, 252, 190, 226, 2, 14, 191, 51, 184, 168, 62, 204, 73, 225, 62, 38, 41, 79, 63, 232, 202, 14, 63, 143, 171, 36, 62, 223, 197, 80, 190, 53, 196, 76, 63, 66, 82, 61, 63, 150, 190, 196, 190, 242, 181, 163, 190, 223, 119, 199, 189, 10, 219, 83, 63, 17, 248, 5, 63, 192, 132, 134, 62, 100, 83, 53, 191, 171, 221, 211, 189, 174, 149, 103, 58, 153, 188, 201, 62, 120, 202, 75, 191, 174, 188, 234, 190, 171, 74, 7, 63, 20, 87, 115, 191, 115, 57, 157, 61, 135, 178, 206, 190, 121, 106, 219, 190, 201, 56, 61, 191, 96, 150, 255, 190, 57, 50, 165, 61, 25, 212, 185, 190, 252, 113, 252, 190, 110, 1, 168, 191, 54, 236, 154, 190, 9, 218, 115, 191, 156, 207, 67, 62, 143, 61, 232, 60, 164, 73, 66, 63, 52, 231, 147, 191, 224, 203, 123, 190, 158, 29, 32, 191, 124, 153, 29, 191, 135, 79, 23, 190, 221, 30, 203, 62, 7, 21, 70, 63, 231, 73, 169, 190, 216, 218, 15, 63, 204, 236, 147, 191, 240, 166, 105, 190, 7, 222, 232, 186, 89, 112, 40, 63, 206, 30, 180, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 176, 110, 191, 89, 27, 199, 189, 176, 66, 207, 189, 33, 218, 29, 63, 15, 242, 13, 191, 15, 175, 135, 61, 66, 203, 232, 190, 20, 94, 143, 61, 89, 234, 181, 62, 96, 225, 78, 190, 111, 32, 55, 61, 72, 148, 94, 62, 205, 156, 159, 62, 94, 10, 65, 190, 127, 125, 248, 61, 164, 44, 6, 190, 87, 180, 89, 62, 130, 1, 235, 190, 115, 93, 221, 62, 190, 101, 162, 62, 116, 120, 36, 63, 219, 45, 129, 189, 14, 117, 246, 62, 226, 150, 79, 188, 161, 36, 143, 190, 168, 84, 18, 62, 51, 200, 154, 62, 31, 233, 9, 187, 209, 118, 48, 63, 44, 1, 213, 62, 122, 111, 82, 62, 224, 51, 176, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {66, 70, 206, 190, 211, 185, 90, 62, 186, 79, 244, 62, 58, 218, 159, 62, 241, 213, 222, 189, 137, 111, 45, 190, 225, 230, 193, 62, 200, 78, 130, 62, 47, 160, 58, 62, 4, 101, 53, 62, 136, 166, 92, 61, 110, 190, 52, 189, 148, 29, 61, 62, 215, 1, 47, 61, 212, 254, 229, 190, 166, 154, 2, 189, 133, 138, 179, 62, 169, 102, 127, 188, 177, 74, 215, 190, 219, 225, 115, 62, 187, 24, 191, 190, 10, 228, 222, 190, 166, 117, 144, 189, 47, 205, 65, 190, 170, 47, 107, 61, 211, 202, 103, 191, 98, 106, 12, 191, 42, 255, 200, 190, 235, 118, 73, 191, 237, 107, 84, 62, 101, 66, 220, 190, 151, 248, 182, 62, 206, 46, 82, 190, 225, 230, 197, 60, 89, 92, 35, 189, 227, 134, 117, 189, 82, 208, 119, 61, 201, 202, 202, 188, 185, 34, 42, 190, 179, 147, 34, 189, 176, 178, 130, 189, 144, 86, 30, 62, 174, 11, 3, 61, 197, 159, 173, 61, 221, 223, 215, 189, 31, 115, 235, 60, 113, 57, 96, 187, 180, 231, 150, 189, 152, 127, 67, 190, 159, 65, 254, 189, 216, 233, 188, 189, 77, 115, 30, 190, 234, 229, 164, 187, 200, 243, 144, 61, 228, 83, 163, 59, 101, 51, 236, 61, 236, 110, 78, 189, 237, 33, 170, 189, 241, 248, 151, 188, 209, 108, 171, 189, 150, 129, 240, 188, 165, 37, 18, 190, 22, 190, 29, 60, 174, 136, 97, 61, 233, 115, 15, 191, 67, 223, 57, 190, 231, 42, 194, 188, 68, 181, 238, 62, 232, 94, 103, 62, 67, 247, 0, 190, 241, 86, 48, 61, 184, 11, 197, 61, 23, 51, 68, 188, 51, 131, 164, 190, 128, 55, 240, 189, 3, 129, 8, 189, 77, 132, 49, 62, 147, 147, 18, 62, 85, 222, 55, 190, 82, 162, 190, 189, 124, 248, 181, 62, 131, 140, 228, 61, 192, 15, 105, 61, 11, 81, 89, 62, 105, 195, 131, 62, 223, 50, 143, 190, 63, 25, 15, 62, 221, 2, 91, 189, 95, 133, 154, 61, 186, 205, 159, 188, 165, 161, 47, 61, 208, 81, 230, 190, 230, 244, 231, 189, 194, 178, 173, 62, 12, 39, 75, 190, 243, 133, 8, 190, 141, 53, 5, 61, 15, 175, 90, 185, 32, 194, 248, 60, 212, 194, 69, 190, 192, 193, 210, 61, 227, 11, 21, 189, 227, 40, 68, 190, 194, 183, 109, 61, 207, 106, 167, 61, 157, 49, 53, 190, 247, 251, 123, 59, 203, 231, 3, 190, 6, 144, 196, 61, 212, 101, 170, 61, 221, 218, 7, 189, 97, 155, 42, 189, 101, 147, 104, 188, 95, 119, 69, 61, 185, 59, 23, 62, 51, 133, 65, 61, 255, 66, 167, 189, 112, 224, 18, 190, 229, 117, 103, 190, 137, 74, 47, 190, 33, 14, 7, 62, 181, 142, 22, 190, 152, 125, 70, 61, 38, 96, 157, 59, 196, 37, 179, 189, 168, 8, 200, 189, 136, 72, 122, 61, 190, 231, 32, 190, 214, 47, 15, 61, 126, 17, 117, 62, 85, 143, 245, 61, 89, 173, 79, 62, 83, 75, 139, 189, 55, 75, 221, 190, 187, 60, 38, 190, 155, 175, 138, 190, 158, 212, 38, 188, 136, 14, 96, 191, 222, 49, 32, 191, 1, 88, 11, 191, 198, 108, 49, 62, 62, 66, 158, 190, 225, 2, 131, 190, 149, 208, 6, 62, 189, 208, 189, 188, 40, 191, 189, 189, 182, 234, 113, 190, 76, 9, 131, 60, 16, 166, 135, 190, 248, 194, 139, 188, 156, 76, 16, 188, 234, 9, 33, 189, 121, 1, 72, 62, 190, 242, 59, 191, 1, 184, 103, 190, 239, 140, 5, 62, 128, 70, 212, 190, 37, 244, 150, 62, 99, 112, 3, 188, 112, 114, 23, 62, 207, 89, 178, 190, 94, 243, 45, 61, 86, 111, 254, 60, 139, 125, 194, 61, 140, 10, 214, 59, 5, 33, 226, 189, 33, 157, 132, 189, 120, 80, 247, 60, 50, 246, 200, 189, 56, 104, 182, 190, 9, 69, 17, 190, 219, 205, 41, 61, 112, 71, 169, 61, 44, 71, 54, 61, 110, 193, 249, 60, 150, 39, 38, 190, 39, 31, 185, 62, 165, 121, 108, 188, 198, 93, 177, 62, 186, 10, 96, 62, 6, 50, 178, 62, 32, 90, 215, 188, 104, 255, 172, 61, 81, 101, 44, 62, 202, 18, 244, 60, 117, 235, 133, 61, 242, 168, 65, 62, 66, 229, 132, 190, 75, 114, 144, 61, 23, 218, 132, 61, 142, 135, 157, 189, 133, 21, 24, 189, 171, 240, 79, 190, 176, 168, 216, 190, 6, 110, 1, 191, 82, 14, 74, 190, 134, 116, 52, 190, 92, 15, 216, 60, 62, 244, 209, 187, 100, 35, 144, 189, 73, 213, 73, 61, 247, 10, 225, 189, 147, 143, 146, 190, 220, 171, 16, 62, 197, 161, 206, 189, 8, 49, 113, 189, 12, 163, 192, 189, 109, 156, 37, 61, 177, 4, 66, 191, 247, 39, 67, 62, 20, 177, 192, 188, 61, 159, 124, 190, 119, 165, 170, 62, 71, 74, 130, 190, 58, 220, 44, 191, 83, 54, 197, 190, 179, 25, 47, 62, 206, 173, 43, 188, 105, 182, 211, 62, 178, 106, 112, 190, 88, 238, 85, 62, 166, 189, 35, 191, 245, 154, 189, 190, 46, 120, 35, 191, 227, 79, 2, 189, 162, 232, 63, 190, 84, 94, 10, 61, 189, 228, 20, 191, 58, 12, 162, 61, 124, 160, 136, 190, 163, 216, 6, 62, 238, 37, 228, 190, 60, 214, 46, 188, 25, 143, 35, 190, 76, 37, 198, 190, 23, 179, 188, 190, 2, 250, 221, 190, 210, 130, 219, 189, 73, 175, 168, 62, 241, 121, 13, 60, 116, 71, 178, 62, 163, 160, 0, 191, 77, 64, 133, 61, 97, 210, 210, 60, 251, 241, 54, 62, 174, 147, 76, 61, 31, 67, 53, 61, 172, 92, 215, 187, 236, 81, 129, 189, 254, 58, 139, 61, 156, 16, 94, 62, 10, 151, 33, 190, 66, 141, 148, 62, 210, 105, 109, 190, 248, 225, 145, 188, 153, 234, 194, 190, 176, 158, 158, 190, 53, 40, 7, 190, 203, 175, 130, 190, 169, 234, 209, 189, 68, 94, 135, 62, 48, 48, 140, 190, 125, 27, 7, 62, 33, 68, 28, 62, 127, 151, 120, 59, 141, 2, 144, 190, 246, 33, 253, 60, 60, 110, 138, 188, 228, 36, 12, 190, 136, 173, 166, 61, 170, 158, 110, 62, 116, 75, 130, 189, 194, 242, 205, 61, 184, 176, 243, 189, 248, 190, 165, 62, 202, 35, 6, 61, 191, 189, 175, 62, 85, 27, 28, 62, 40, 89, 82, 62, 246, 15, 156, 61, 56, 150, 164, 62, 159, 234, 106, 61, 18, 62, 161, 61, 151, 208, 179, 189, 204, 22, 81, 62, 43, 70, 6, 190, 213, 9, 69, 190, 169, 211, 149, 190, 114, 54, 131, 190, 26, 51, 119, 190, 143, 122, 217, 61, 117, 2, 33, 62, 43, 164, 94, 191, 148, 252, 198, 62, 129, 21, 222, 190, 47, 172, 149, 60, 62, 183, 178, 188, 81, 43, 20, 191, 109, 245, 10, 62, 14, 98, 26, 61, 194, 89, 171, 62, 28, 47, 111, 189, 49, 144, 3, 191, 113, 20, 28, 190, 57, 110, 122, 187, 76, 30, 65, 59, 12, 23, 187, 61, 200, 219, 20, 189, 189, 81, 5, 62, 186, 74, 205, 189, 126, 38, 173, 61, 34, 244, 135, 191, 70, 185, 189, 190, 139, 219, 18, 191, 189, 211, 61, 62, 83, 221, 67, 62, 29, 227, 200, 60, 58, 208, 180, 190, 44, 37, 83, 62, 249, 63, 200, 62, 23, 124, 14, 61, 74, 221, 51, 190, 222, 177, 12, 191, 172, 206, 142, 190, 63, 84, 81, 190, 254, 54, 199, 190, 163, 90, 12, 189, 170, 177, 199, 61, 74, 182, 86, 62, 245, 102, 232, 189, 108, 122, 107, 62, 90, 142, 81, 190, 91, 87, 183, 60, 241, 169, 190, 189, 79, 97, 12, 62, 244, 7, 228, 61, 131, 110, 251, 61, 46, 230, 165, 184, 48, 65, 149, 190, 217, 119, 240, 61, 229, 173, 12, 191, 35, 167, 24, 190, 167, 180, 175, 61, 128, 120, 87, 190, 90, 1, 225, 189, 74, 193, 4, 63, 145, 211, 39, 190, 224, 202, 30, 62, 208, 247, 180, 190, 61, 188, 131, 190, 71, 254, 31, 62, 99, 0, 134, 190, 5, 170, 170, 190, 187, 230, 127, 189, 161, 140, 136, 190, 62, 170, 124, 62, 35, 99, 119, 190, 89, 82, 216, 62, 228, 74, 119, 190, 162, 89, 204, 61, 192, 60, 21, 190, 220, 10, 47, 190, 41, 149, 73, 190, 193, 2, 132, 189, 223, 93, 149, 62, 73, 34, 247, 61, 2, 197, 95, 191, 120, 138, 53, 62, 116, 236, 109, 62, 3, 78, 27, 62, 120, 131, 213, 189, 217, 229, 177, 189, 90, 220, 14, 62, 136, 165, 9, 190, 0, 99, 134, 57, 186, 204, 174, 190, 47, 1, 206, 189, 152, 108, 227, 189, 226, 215, 138, 62, 139, 211, 231, 62, 102, 250, 34, 62, 232, 84, 208, 189, 133, 228, 72, 62, 78, 116, 72, 190, 39, 82, 112, 62, 19, 66, 20, 62, 139, 213, 132, 62, 160, 197, 141, 190, 33, 243, 72, 190, 212, 235, 204, 190, 177, 93, 56, 191, 208, 207, 174, 61, 19, 65, 144, 61, 39, 22, 146, 191, 196, 55, 134, 62, 217, 20, 139, 189, 92, 39, 219, 189, 94, 230, 162, 190, 88, 108, 214, 189, 160, 35, 27, 62, 24, 139, 41, 62, 187, 150, 119, 60, 215, 246, 185, 189, 62, 240, 127, 188, 157, 59, 60, 61, 72, 17, 27, 62, 3, 7, 187, 61, 121, 101, 81, 189, 41, 232, 106, 190, 33, 237, 36, 191, 128, 108, 197, 61, 123, 7, 8, 62, 77, 137, 42, 189, 147, 148, 9, 62, 110, 120, 129, 62, 36, 65, 42, 62, 219, 48, 244, 190, 16, 164, 217, 190, 195, 37, 28, 190, 143, 179, 102, 62, 157, 235, 24, 62, 225, 6, 17, 190, 2, 152, 224, 61, 22, 217, 83, 61, 63, 7, 37, 190, 99, 89, 249, 62, 87, 29, 46, 191, 207, 226, 100, 190, 107, 138, 185, 61, 252, 93, 201, 61, 208, 70, 34, 62, 124, 13, 252, 190, 9, 74, 146, 62, 161, 68, 31, 191, 83, 186, 31, 189, 230, 224, 67, 61, 144, 69, 11, 62, 244, 139, 193, 190, 121, 150, 27, 190, 17, 28, 145, 62, 148, 65, 42, 188, 180, 100, 109, 62, 103, 245, 93, 188, 60, 162, 68, 191, 98, 35, 19, 62, 30, 129, 39, 60, 178, 17, 40, 191, 48, 194, 19, 62, 189, 95, 201, 189, 184, 241, 172, 190, 47, 76, 64, 191, 255, 223, 201, 61, 86, 201, 48, 190, 233, 224, 243, 190, 143, 86, 152, 62, 60, 163, 128, 60, 171, 72, 133, 59, 252, 201, 146, 62, 213, 227, 17, 62, 227, 224, 169, 61, 48, 79, 12, 62, 239, 239, 226, 188, 207, 131, 4, 188, 27, 188, 128, 61, 78, 12, 181, 62, 158, 164, 143, 61, 196, 181, 253, 190, 89, 69, 8, 62, 194, 77, 205, 190, 82, 140, 207, 189, 222, 66, 218, 61, 113, 186, 205, 61, 240, 129, 138, 61, 226, 11, 128, 60, 5, 2, 236, 190, 22, 99, 19, 60, 35, 78, 63, 191, 232, 192, 39, 189, 72, 153, 69, 190, 119, 53, 66, 191, 5, 63, 79, 62, 158, 45, 0, 62, 238, 89, 214, 61, 191, 26, 207, 60, 177, 190, 38, 190, 104, 138, 175, 62, 237, 117, 152, 190, 48, 106, 221, 60, 172, 170, 214, 188, 127, 152, 67, 190, 73, 169, 79, 62, 86, 69, 62, 60, 129, 43, 160, 188, 234, 219, 245, 189, 157, 30, 167, 190, 116, 111, 18, 62, 219, 8, 33, 62, 58, 156, 87, 61, 31, 144, 113, 189, 25, 134, 243, 60, 173, 57, 254, 57, 47, 70, 233, 61, 147, 19, 20, 62, 44, 157, 67, 190, 89, 126, 149, 190, 222, 88, 241, 190, 179, 233, 46, 62, 23, 240, 196, 62, 97, 33, 167, 61, 86, 160, 115, 190, 104, 169, 196, 62, 125, 251, 70, 62, 52, 80, 6, 191, 214, 13, 163, 190, 130, 195, 46, 62, 144, 84, 29, 62, 19, 175, 186, 60, 181, 46, 247, 62, 159, 85, 178, 190, 251, 248, 36, 190, 157, 198, 11, 190, 113, 158, 73, 191, 193, 221, 161, 62, 71, 219, 58, 62, 66, 2, 229, 61, 251, 110, 140, 190, 3, 171, 57, 191, 89, 127, 177, 62, 118, 160, 87, 60, 223, 88, 36, 190, 251, 152, 158, 189, 200, 233, 65, 190, 82, 111, 192, 61, 37, 159, 139, 190, 166, 169, 95, 62, 253, 14, 14, 190, 182, 174, 86, 62, 53, 133, 35, 191, 91, 187, 77, 62, 68, 197, 27, 62, 236, 52, 154, 61, 220, 173, 8, 61, 199, 96, 208, 62, 49, 107, 70, 62, 189, 164, 141, 189, 124, 66, 211, 61, 17, 242, 24, 190, 18, 41, 70, 191, 140, 64, 153, 189, 16, 137, 1, 190, 33, 20, 140, 60, 234, 70, 1, 191, 110, 211, 166, 189, 70, 205, 62, 61, 95, 157, 50, 190, 139, 234, 161, 190, 73, 42, 252, 190, 10, 19, 14, 190, 136, 77, 37, 189, 112, 161, 30, 62, 51, 251, 86, 190, 136, 160, 99, 191, 198, 154, 30, 190, 230, 37, 205, 190, 122, 161, 102, 62, 92, 94, 91, 190, 218, 245, 9, 61, 74, 7, 198, 190, 214, 221, 81, 190, 190, 39, 75, 62, 25, 45, 187, 62, 38, 123, 228, 190, 63, 184, 33, 62, 245, 179, 135, 190, 156, 114, 44, 190, 14, 184, 20, 191, 206, 208, 204, 190, 106, 67, 83, 189, 71, 29, 222, 188, 201, 211, 194, 61, 51, 144, 23, 62, 75, 192, 25, 62, 161, 43, 49, 61, 200, 90, 113, 190, 126, 166, 210, 60, 182, 44, 160, 62, 229, 169, 45, 191, 28, 84, 247, 190, 92, 99, 141, 62, 56, 182, 195, 187, 156, 92, 178, 59, 21, 90, 196, 190, 54, 224, 160, 62, 124, 45, 153, 191, 195, 120, 100, 62, 26, 250, 212, 60, 24, 38, 190, 62, 0, 86, 44, 190, 166, 236, 180, 190, 101, 52, 157, 61, 187, 39, 157, 61, 84, 179, 153, 62, 102, 69, 156, 62, 210, 234, 48, 191, 125, 124, 178, 62, 45, 12, 148, 62, 108, 27, 3, 191, 81, 179, 120, 190, 66, 132, 69, 191, 223, 156, 160, 190, 137, 9, 251, 189, 180, 35, 94, 62, 204, 135, 140, 62, 6, 237, 186, 189, 77, 54, 180, 62, 248, 43, 6, 62, 28, 239, 136, 62, 47, 134, 132, 190, 18, 150, 151, 190, 194, 215, 0, 190, 203, 138, 103, 186, 150, 123, 197, 62, 69, 134, 157, 189, 85, 4, 183, 190, 59, 157, 173, 62, 251, 197, 32, 190, 66, 214, 141, 189, 129, 68, 88, 62, 23, 38, 133, 61, 216, 70, 192, 189, 136, 120, 209, 188, 251, 172, 37, 62, 137, 84, 231, 62, 183, 199, 159, 62, 125, 167, 182, 190, 81, 101, 194, 190, 33, 241, 79, 189, 159, 191, 157, 62, 120, 8, 105, 190, 252, 232, 158, 189, 94, 82, 103, 62, 24, 33, 167, 189, 92, 82, 35, 190, 110, 109, 94, 58, 8, 19, 132, 190, 7, 100, 40, 63, 251, 70, 174, 190, 145, 174, 124, 61, 53, 38, 148, 190, 198, 120, 224, 190, 147, 124, 135, 62, 213, 18, 162, 62, 39, 188, 163, 61, 112, 114, 155, 190, 128, 190, 27, 191, 110, 71, 184, 62, 121, 161, 191, 188, 175, 155, 16, 189, 210, 1, 145, 189, 63, 4, 112, 189, 13, 152, 65, 62, 127, 233, 161, 189, 100, 232, 131, 188, 14, 10, 160, 190, 123, 224, 6, 190, 76, 67, 70, 191, 120, 88, 24, 62, 86, 127, 243, 62, 157, 205, 103, 61, 81, 190, 75, 190, 43, 242, 202, 62, 141, 216, 103, 62, 20, 54, 190, 62, 46, 9, 140, 62, 149, 252, 164, 62, 85, 234, 5, 190, 16, 194, 95, 189, 151, 96, 27, 191, 96, 175, 38, 191, 185, 161, 148, 59, 209, 162, 106, 187, 18, 243, 65, 191, 98, 36, 12, 62, 17, 71, 118, 189, 89, 23, 45, 189, 75, 233, 42, 190, 99, 235, 151, 190, 48, 191, 138, 62, 65, 197, 198, 187, 39, 171, 62, 188, 48, 35, 11, 190, 154, 24, 80, 190, 78, 71, 130, 61, 98, 92, 17, 62, 113, 175, 103, 62, 244, 238, 44, 190, 197, 186, 208, 190, 250, 117, 194, 190, 212, 120, 181, 61, 102, 222, 108, 62, 96, 60, 105, 189, 134, 125, 65, 187, 224, 133, 106, 62, 35, 153, 162, 61, 75, 180, 159, 62, 213, 124, 208, 62, 112, 244, 156, 62, 5, 68, 132, 190, 7, 133, 89, 188, 236, 64, 150, 191, 168, 48, 252, 190, 178, 202, 1, 188, 196, 161, 21, 61, 151, 173, 123, 191, 49, 177, 144, 62, 223, 22, 220, 61, 221, 179, 5, 190, 177, 165, 181, 190, 185, 15, 113, 190, 230, 1, 185, 61, 204, 253, 0, 61, 38, 82, 3, 61, 122, 35, 2, 190, 78, 103, 30, 190, 143, 204, 48, 190, 24, 50, 68, 62, 80, 179, 133, 62, 177, 13, 45, 189, 254, 112, 82, 190, 181, 179, 136, 190, 131, 227, 242, 61, 210, 76, 5, 63, 156, 251, 225, 189, 192, 54, 17, 190, 208, 136, 222, 62, 85, 175, 46, 62, 235, 56, 154, 189, 5, 25, 182, 61, 16, 169, 158, 189, 133, 60, 171, 61, 183, 208, 236, 189, 126, 248, 68, 61, 249, 254, 140, 58, 172, 69, 70, 61, 185, 162, 28, 61, 214, 249, 41, 189, 188, 212, 211, 61, 15, 78, 179, 188, 172, 8, 49, 190, 5, 173, 46, 190, 238, 116, 178, 187, 189, 159, 28, 61, 102, 220, 182, 189, 137, 200, 51, 190, 155, 216, 47, 189, 82, 86, 110, 61, 143, 241, 8, 61, 90, 138, 246, 61, 78, 154, 16, 190, 101, 6, 217, 60, 53, 213, 7, 62, 215, 147, 146, 189, 36, 20, 217, 189, 246, 52, 184, 61, 251, 181, 189, 189, 193, 247, 50, 190, 226, 245, 188, 189, 18, 149, 222, 188, 248, 142, 39, 61, 160, 142, 14, 62, 61, 84, 72, 61, 58, 138, 145, 61, 120, 18, 50, 190, 187, 160, 141, 62, 123, 248, 197, 190, 133, 168, 201, 189, 237, 237, 63, 190, 222, 107, 75, 191, 243, 3, 140, 62, 174, 101, 23, 62, 84, 214, 100, 62, 241, 157, 195, 190, 132, 110, 153, 190, 216, 57, 110, 62, 45, 8, 164, 61, 249, 13, 175, 62, 146, 4, 18, 60, 234, 156, 181, 60, 195, 26, 154, 61, 162, 169, 88, 62, 4, 40, 14, 62, 17, 209, 131, 190, 208, 127, 6, 191, 123, 142, 197, 190, 77, 26, 152, 62, 215, 156, 213, 62, 37, 151, 237, 61, 166, 81, 83, 189, 188, 255, 52, 62, 102, 73, 99, 189, 108, 26, 207, 190, 46, 102, 127, 60, 38, 222, 168, 190, 69, 122, 233, 61, 250, 138, 206, 61, 249, 252, 146, 190, 31, 174, 109, 61, 136, 46, 92, 62, 148, 49, 185, 62, 195, 31, 18, 191, 31, 14, 7, 61, 236, 20, 156, 189, 180, 186, 100, 62, 193, 187, 166, 61, 106, 89, 189, 61, 118, 128, 252, 189, 145, 205, 128, 62, 149, 100, 132, 189, 88, 161, 14, 190, 64, 209, 202, 62, 87, 34, 208, 185, 201, 104, 118, 190, 30, 187, 197, 189, 9, 249, 81, 62, 214, 169, 156, 188, 33, 223, 56, 62, 189, 242, 146, 190, 240, 55, 129, 190, 76, 213, 232, 61, 188, 145, 41, 62, 186, 126, 44, 190, 52, 181, 126, 61, 104, 165, 70, 190, 39, 142, 67, 189, 182, 208, 43, 189, 44, 185, 1, 62, 237, 18, 104, 62, 120, 103, 205, 188, 229, 116, 177, 62, 159, 64, 45, 59, 56, 170, 24, 61, 9, 13, 22, 63, 224, 249, 173, 189, 2, 119, 233, 61, 15, 151, 183, 61, 87, 72, 107, 62, 79, 30, 7, 190, 93, 8, 112, 190, 24, 75, 130, 62, 223, 77, 238, 60, 151, 202, 194, 190, 71, 168, 137, 62, 26, 223, 56, 191, 60, 188, 20, 191, 183, 165, 50, 190, 169, 68, 59, 62, 115, 4, 62, 62, 108, 141, 42, 190, 249, 199, 147, 190, 107, 10, 1, 192, 113, 106, 121, 191, 164, 243, 135, 60, 177, 46, 214, 191, 49, 30, 126, 62, 88, 119, 204, 189, 189, 137, 45, 188, 42, 116, 180, 189, 173, 192, 135, 189, 102, 232, 201, 60, 14, 221, 18, 62, 61, 242, 51, 189, 115, 81, 24, 190, 67, 49, 16, 189, 29, 215, 41, 190, 113, 39, 41, 62, 66, 235, 234, 189, 154, 83, 23, 61, 47, 34, 253, 189, 154, 26, 199, 61, 228, 24, 141, 61, 197, 112, 246, 60, 66, 35, 183, 188, 180, 70, 133, 61, 195, 97, 182, 189, 66, 8, 38, 190, 205, 25, 167, 61, 135, 125, 31, 189, 15, 100, 176, 60, 11, 80, 0, 61, 31, 237, 228, 61, 185, 136, 57, 190, 228, 20, 246, 188, 70, 70, 26, 190, 142, 238, 213, 187, 113, 241, 140, 189, 142, 168, 223, 189, 57, 207, 8, 62, 14, 212, 118, 189, 13, 140, 6, 62, 8, 139, 236, 62, 170, 192, 140, 191, 59, 138, 169, 62, 38, 130, 113, 189, 87, 250, 246, 190, 208, 14, 41, 191, 48, 32, 152, 62, 65, 59, 207, 190, 150, 208, 21, 62, 203, 35, 223, 61, 85, 113, 251, 189, 138, 34, 58, 191, 165, 91, 142, 190, 204, 147, 70, 190, 156, 255, 119, 190, 54, 241, 89, 61, 131, 114, 161, 61, 94, 38, 78, 62, 173, 197, 116, 190, 55, 170, 52, 191, 6, 215, 158, 191, 63, 115, 63, 191, 126, 139, 182, 190, 32, 169, 88, 189, 185, 148, 213, 190, 111, 32, 107, 61, 154, 124, 64, 190, 61, 45, 52, 191, 40, 159, 172, 62, 174, 12, 140, 189, 87, 149, 135, 190, 125, 0, 31, 190, 145, 66, 197, 190, 13, 201, 224, 190, 122, 61, 104, 61, 15, 96, 12, 191, 113, 31, 79, 190, 175, 83, 61, 190, 209, 50, 84, 191, 93, 30, 0, 63, 66, 30, 103, 61, 182, 59, 226, 60, 80, 158, 130, 190, 248, 107, 25, 191, 176, 45, 82, 62, 32, 104, 68, 190, 160, 212, 23, 189, 163, 77, 139, 61, 73, 142, 162, 190, 132, 243, 53, 61, 248, 33, 135, 190, 104, 35, 157, 62, 142, 93, 60, 190, 122, 12, 21, 191, 10, 89, 67, 190, 164, 85, 16, 62, 14, 145, 231, 62, 245, 110, 0, 62, 107, 162, 180, 190, 176, 239, 165, 62, 182, 176, 52, 189, 233, 104, 200, 61, 170, 79, 135, 61, 127, 179, 163, 189, 147, 101, 7, 61, 95, 72, 240, 61, 199, 203, 38, 190, 159, 111, 232, 61, 205, 110, 162, 61, 168, 17, 136, 61, 67, 125, 139, 61, 43, 141, 26, 190, 28, 115, 124, 189, 184, 84, 56, 189, 86, 199, 134, 189, 175, 143, 252, 58, 225, 214, 42, 190, 162, 4, 226, 189, 187, 164, 150, 60, 193, 212, 172, 189, 42, 145, 232, 188, 216, 240, 63, 190, 98, 89, 21, 190, 98, 18, 155, 61, 180, 107, 221, 189, 150, 240, 252, 61, 242, 51, 215, 61, 74, 54, 8, 62, 190, 47, 130, 189, 90, 141, 54, 189, 32, 228, 9, 190, 66, 237, 37, 190, 172, 46, 251, 189, 109, 238, 14, 191, 88, 204, 22, 190, 107, 195, 132, 187, 249, 165, 220, 62, 232, 129, 201, 61, 45, 187, 33, 190, 117, 248, 203, 61, 255, 210, 226, 189, 102, 168, 88, 62, 17, 185, 196, 189, 252, 55, 164, 188, 200, 100, 170, 188, 25, 224, 49, 62, 210, 93, 95, 62, 125, 5, 71, 190, 190, 216, 63, 190, 130, 248, 34, 61, 172, 176, 123, 189, 90, 148, 3, 189, 196, 24, 81, 61, 190, 167, 228, 61, 222, 241, 220, 189, 6, 140, 166, 189, 156, 162, 29, 190, 65, 239, 64, 62, 35, 78, 18, 190, 236, 221, 24, 62, 70, 158, 29, 191, 150, 177, 251, 188, 200, 23, 144, 62, 19, 171, 180, 190, 90, 216, 121, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {3, 73, 4, 190, 203, 229, 6, 60, 126, 52, 129, 62, 27, 131, 235, 189, 223, 212, 145, 61, 121, 125, 132, 62, 145, 199, 243, 61, 114, 115, 250, 60, 220, 77, 123, 62, 76, 139, 59, 62, 165, 201, 149, 189, 143, 199, 158, 61, 192, 112, 7, 62, 157, 12, 56, 189, 14, 128, 133, 190, 198, 221, 128, 61, 92, 222, 160, 188, 45, 215, 180, 189, 97, 88, 240, 61, 162, 38, 200, 188, 30, 191, 37, 189, 120, 75, 244, 61, 101, 198, 104, 61, 96, 131, 181, 189, 215, 1, 120, 62, 192, 96, 216, 189, 211, 174, 42, 190, 139, 63, 15, 190, 127, 43, 148, 186, 118, 253, 35, 62, 76, 143, 241, 61, 199, 200, 119, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {201, 48, 37, 191, 213, 26, 106, 189, 195, 94, 145, 190, 38, 143, 88, 189, 84, 225, 133, 61, 152, 126, 37, 189, 143, 198, 3, 191, 236, 136, 206, 190, 66, 137, 197, 189, 12, 186, 223, 62, 6, 169, 150, 190, 67, 73, 53, 62, 75, 220, 187, 62, 4, 141, 100, 63, 20, 248, 13, 191, 200, 106, 105, 62, 115, 34, 227, 62, 29, 239, 226, 190, 30, 206, 100, 191, 90, 141, 209, 190, 7, 148, 14, 63, 158, 250, 241, 62, 93, 19, 8, 63, 63, 79, 184, 61, 157, 134, 186, 62, 135, 202, 52, 190, 198, 195, 76, 63, 119, 250, 9, 62, 104, 42, 77, 63, 196, 77, 88, 63, 159, 78, 21, 190, 213, 56, 211, 190, 248, 169, 65, 62, 85, 83, 229, 60, 190, 20, 189, 190, 9, 167, 233, 189, 85, 82, 50, 191, 110, 129, 146, 190, 166, 5, 27, 190, 72, 227, 61, 62, 19, 128, 37, 190, 210, 62, 82, 190, 243, 127, 231, 59, 17, 171, 102, 190, 57, 68, 57, 190, 158, 10, 145, 189, 181, 190, 37, 62, 82, 143, 76, 190, 4, 60, 179, 62, 41, 241, 55, 62, 187, 201, 156, 62, 21, 87, 87, 62, 184, 118, 254, 62, 157, 12, 94, 62, 33, 155, 35, 62, 189, 240, 21, 190, 246, 103, 197, 189, 149, 75, 54, 190, 84, 2, 197, 60, 51, 214, 68, 188, 254, 146, 137, 60, 187, 204, 161, 62, 165, 115, 113, 61, 217, 219, 129, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 78, 212, 188, 117, 117, 195, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {248, 7, 14, 62, 115, 22, 29, 63, 9, 226, 235, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {12, 73, 181, 190, 138, 199, 38, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0017/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}