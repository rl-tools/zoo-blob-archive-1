// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 98, 10, 63, 223, 252, 121, 190, 158, 171, 224, 190, 31, 66, 23, 63, 139, 145, 114, 62, 218, 233, 8, 191, 60, 85, 88, 62, 20, 220, 35, 63, 68, 177, 198, 190, 65, 60, 226, 61, 235, 241, 116, 63, 6, 146, 18, 190, 203, 106, 17, 191, 223, 109, 253, 61, 95, 98, 53, 191, 205, 158, 200, 190, 20, 98, 151, 63, 69, 107, 20, 62, 112, 20, 235, 62, 34, 141, 43, 63, 196, 240, 166, 62, 235, 159, 104, 62, 157, 46, 135, 61, 5, 64, 52, 62, 233, 4, 1, 63, 29, 226, 248, 188, 14, 173, 217, 62, 77, 11, 234, 62, 84, 83, 81, 63, 133, 188, 67, 62, 63, 218, 48, 62, 38, 144, 21, 191, 220, 23, 217, 62, 146, 126, 109, 190, 144, 84, 126, 63, 175, 134, 193, 62, 126, 237, 73, 62, 86, 78, 79, 63, 45, 113, 49, 62, 100, 200, 64, 63, 39, 66, 20, 63, 59, 250, 14, 63, 159, 111, 168, 190, 10, 32, 185, 191, 87, 94, 247, 190, 219, 133, 31, 191, 216, 12, 175, 62, 110, 132, 220, 62, 146, 215, 81, 63, 230, 1, 6, 63, 91, 112, 29, 62, 139, 181, 75, 190, 181, 143, 56, 63, 151, 65, 68, 63, 186, 100, 178, 190, 52, 95, 139, 190, 231, 83, 162, 189, 7, 164, 85, 63, 59, 244, 253, 62, 208, 220, 133, 62, 63, 99, 37, 191, 24, 151, 189, 189, 2, 41, 65, 59, 109, 84, 199, 62, 141, 247, 69, 191, 108, 109, 233, 190, 122, 0, 11, 63, 78, 44, 113, 191, 63, 166, 188, 61, 172, 69, 225, 190, 131, 170, 176, 190, 96, 234, 58, 191, 121, 95, 229, 190, 139, 51, 174, 61, 36, 115, 180, 190, 28, 76, 2, 191, 233, 194, 151, 191, 24, 133, 151, 190, 112, 172, 72, 191, 25, 87, 29, 62, 77, 151, 60, 61, 149, 160, 65, 63, 52, 219, 138, 191, 253, 133, 140, 190, 191, 106, 24, 191, 53, 183, 20, 191, 71, 20, 9, 190, 220, 188, 197, 62, 128, 207, 60, 63, 8, 154, 202, 190, 208, 14, 17, 63, 246, 72, 145, 191, 40, 18, 86, 190, 20, 90, 253, 59, 197, 206, 25, 63, 210, 180, 173, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 232, 97, 191, 231, 9, 86, 189, 146, 10, 151, 189, 7, 143, 24, 63, 89, 71, 14, 191, 69, 215, 73, 61, 114, 54, 226, 190, 235, 197, 178, 61, 157, 254, 192, 62, 184, 126, 88, 190, 85, 44, 82, 60, 184, 154, 152, 62, 190, 232, 201, 62, 165, 12, 64, 190, 150, 143, 254, 61, 61, 93, 68, 190, 151, 165, 102, 62, 5, 249, 252, 190, 242, 123, 227, 62, 14, 41, 166, 62, 204, 12, 28, 63, 5, 113, 44, 189, 236, 18, 2, 63, 110, 21, 172, 189, 183, 252, 168, 190, 149, 224, 72, 62, 39, 222, 167, 62, 223, 147, 78, 58, 28, 115, 50, 63, 151, 12, 202, 62, 134, 126, 94, 62, 22, 173, 1, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 14, 189, 190, 199, 240, 87, 62, 7, 236, 240, 62, 78, 228, 157, 62, 44, 15, 38, 190, 109, 116, 33, 190, 153, 17, 179, 62, 175, 24, 117, 62, 35, 42, 37, 62, 156, 232, 33, 62, 149, 204, 169, 60, 145, 109, 55, 189, 54, 236, 48, 62, 209, 207, 119, 60, 249, 167, 190, 190, 65, 57, 20, 189, 180, 78, 173, 62, 134, 64, 158, 188, 226, 149, 206, 190, 109, 130, 101, 62, 191, 17, 181, 190, 255, 89, 209, 190, 93, 240, 162, 189, 180, 27, 86, 190, 34, 220, 164, 188, 101, 73, 100, 191, 7, 23, 250, 190, 4, 178, 190, 190, 152, 104, 64, 191, 25, 136, 80, 62, 196, 204, 212, 190, 173, 187, 179, 62, 206, 46, 82, 190, 225, 230, 197, 60, 89, 92, 35, 189, 227, 134, 117, 189, 82, 208, 119, 61, 201, 202, 202, 188, 185, 34, 42, 190, 179, 147, 34, 189, 176, 178, 130, 189, 144, 86, 30, 62, 174, 11, 3, 61, 197, 159, 173, 61, 221, 223, 215, 189, 31, 115, 235, 60, 113, 57, 96, 187, 180, 231, 150, 189, 152, 127, 67, 190, 159, 65, 254, 189, 216, 233, 188, 189, 77, 115, 30, 190, 234, 229, 164, 187, 200, 243, 144, 61, 228, 83, 163, 59, 101, 51, 236, 61, 236, 110, 78, 189, 237, 33, 170, 189, 241, 248, 151, 188, 209, 108, 171, 189, 150, 129, 240, 188, 165, 37, 18, 190, 22, 190, 29, 60, 174, 136, 97, 61, 146, 163, 12, 191, 2, 207, 64, 190, 196, 84, 101, 189, 200, 190, 223, 62, 55, 44, 83, 62, 209, 171, 0, 190, 211, 207, 35, 61, 134, 158, 221, 61, 11, 40, 138, 187, 241, 65, 175, 190, 226, 3, 236, 189, 247, 122, 5, 189, 14, 147, 37, 62, 113, 168, 22, 62, 212, 144, 68, 190, 240, 182, 149, 189, 178, 180, 178, 62, 87, 243, 9, 62, 180, 192, 9, 61, 53, 42, 85, 62, 87, 156, 119, 62, 133, 9, 129, 190, 209, 100, 27, 62, 34, 132, 153, 189, 137, 23, 72, 61, 83, 226, 91, 189, 76, 74, 72, 61, 139, 174, 213, 190, 205, 183, 11, 190, 97, 41, 169, 62, 228, 193, 46, 190, 85, 117, 44, 190, 141, 53, 5, 61, 15, 175, 90, 185, 32, 194, 248, 60, 212, 194, 69, 190, 192, 193, 210, 61, 227, 11, 21, 189, 227, 40, 68, 190, 194, 183, 109, 61, 207, 106, 167, 61, 157, 49, 53, 190, 247, 251, 123, 59, 203, 231, 3, 190, 6, 144, 196, 61, 212, 101, 170, 61, 221, 218, 7, 189, 97, 155, 42, 189, 101, 147, 104, 188, 95, 119, 69, 61, 185, 59, 23, 62, 51, 133, 65, 61, 255, 66, 167, 189, 112, 224, 18, 190, 229, 117, 103, 190, 137, 74, 47, 190, 33, 14, 7, 62, 181, 142, 22, 190, 152, 125, 70, 61, 38, 96, 157, 59, 196, 37, 179, 189, 168, 8, 200, 189, 136, 72, 122, 61, 190, 231, 32, 190, 62, 186, 220, 186, 6, 162, 92, 62, 23, 113, 161, 61, 77, 211, 78, 62, 96, 65, 72, 189, 236, 1, 142, 190, 209, 64, 137, 190, 28, 52, 62, 190, 141, 116, 167, 61, 131, 159, 106, 191, 246, 21, 197, 190, 90, 160, 12, 191, 10, 241, 71, 62, 203, 188, 103, 190, 114, 180, 148, 190, 149, 208, 6, 62, 249, 85, 137, 187, 40, 191, 189, 189, 153, 214, 69, 190, 115, 214, 40, 61, 178, 84, 92, 190, 41, 53, 227, 188, 185, 31, 163, 61, 25, 190, 55, 189, 150, 250, 96, 62, 205, 158, 72, 191, 25, 104, 83, 190, 208, 138, 56, 62, 81, 93, 186, 190, 246, 226, 145, 62, 56, 118, 80, 61, 225, 226, 232, 61, 3, 9, 178, 190, 191, 69, 52, 61, 216, 45, 186, 59, 204, 105, 138, 61, 222, 75, 135, 60, 135, 194, 18, 190, 150, 208, 245, 189, 106, 80, 179, 60, 146, 220, 206, 189, 93, 60, 213, 190, 79, 2, 23, 190, 13, 168, 4, 60, 238, 41, 75, 61, 97, 176, 227, 60, 86, 89, 255, 60, 234, 32, 34, 190, 117, 247, 171, 62, 208, 29, 161, 188, 247, 13, 183, 62, 213, 226, 69, 62, 17, 164, 182, 62, 82, 236, 252, 187, 15, 10, 212, 61, 92, 5, 43, 62, 183, 12, 44, 61, 29, 4, 137, 61, 50, 167, 92, 62, 32, 69, 121, 190, 2, 249, 158, 61, 104, 54, 141, 61, 53, 242, 132, 189, 98, 228, 127, 189, 171, 240, 79, 190, 176, 168, 216, 190, 199, 246, 16, 191, 236, 172, 6, 190, 66, 99, 56, 190, 40, 28, 135, 188, 78, 21, 150, 60, 130, 36, 95, 189, 144, 200, 135, 61, 195, 171, 206, 189, 222, 55, 143, 190, 186, 136, 0, 62, 227, 56, 221, 189, 6, 28, 50, 189, 49, 43, 226, 189, 13, 116, 211, 60, 193, 175, 49, 191, 116, 152, 63, 62, 173, 94, 70, 189, 52, 253, 87, 190, 45, 113, 157, 62, 102, 81, 44, 190, 223, 105, 14, 191, 229, 104, 197, 190, 167, 111, 37, 62, 42, 11, 1, 188, 225, 114, 192, 62, 142, 89, 20, 190, 192, 52, 68, 62, 212, 68, 57, 191, 222, 1, 160, 190, 204, 170, 52, 191, 223, 151, 26, 61, 252, 139, 23, 190, 100, 141, 29, 62, 117, 5, 12, 191, 213, 87, 48, 62, 71, 210, 217, 190, 163, 216, 6, 62, 42, 154, 160, 190, 0, 221, 144, 61, 25, 143, 35, 190, 22, 237, 130, 190, 137, 77, 242, 190, 99, 248, 24, 191, 170, 44, 222, 186, 119, 118, 155, 62, 132, 108, 38, 189, 20, 183, 159, 189, 250, 177, 180, 190, 115, 152, 7, 61, 50, 134, 165, 189, 163, 240, 40, 62, 98, 229, 177, 59, 166, 110, 93, 189, 242, 154, 159, 60, 151, 62, 35, 61, 26, 18, 51, 61, 162, 225, 92, 62, 180, 247, 137, 190, 226, 38, 132, 62, 156, 83, 51, 190, 231, 117, 216, 189, 102, 22, 144, 190, 197, 42, 164, 190, 16, 94, 235, 189, 217, 77, 132, 190, 72, 13, 158, 189, 86, 7, 129, 62, 59, 4, 146, 190, 123, 237, 19, 62, 200, 75, 61, 62, 73, 77, 7, 61, 65, 159, 110, 190, 161, 18, 252, 60, 151, 50, 179, 188, 68, 126, 207, 189, 161, 40, 216, 61, 150, 242, 72, 62, 157, 218, 128, 189, 200, 116, 24, 62, 242, 8, 215, 189, 127, 108, 156, 62, 130, 116, 156, 61, 67, 160, 167, 62, 219, 199, 30, 62, 73, 7, 96, 62, 137, 17, 67, 61, 23, 207, 159, 62, 251, 234, 254, 60, 149, 213, 159, 61, 63, 98, 167, 189, 148, 68, 61, 62, 106, 98, 205, 189, 187, 243, 61, 190, 11, 79, 154, 190, 165, 146, 128, 190, 13, 49, 101, 190, 76, 222, 206, 61, 23, 18, 23, 62, 231, 116, 99, 191, 16, 100, 180, 62, 44, 64, 210, 190, 214, 163, 84, 60, 24, 206, 192, 188, 112, 187, 8, 191, 218, 188, 6, 62, 149, 135, 27, 61, 219, 121, 177, 62, 47, 96, 83, 189, 185, 99, 224, 190, 246, 45, 36, 190, 61, 0, 48, 60, 209, 203, 217, 187, 248, 99, 139, 61, 65, 220, 207, 188, 195, 247, 148, 61, 99, 120, 209, 189, 160, 59, 165, 61, 214, 245, 136, 191, 191, 245, 229, 190, 184, 21, 12, 191, 176, 47, 26, 62, 10, 192, 69, 62, 76, 31, 9, 189, 22, 195, 177, 190, 66, 168, 86, 62, 191, 98, 191, 62, 143, 96, 29, 187, 230, 15, 14, 190, 198, 208, 224, 190, 231, 81, 132, 190, 142, 196, 190, 189, 153, 92, 175, 190, 4, 183, 48, 189, 11, 69, 248, 61, 4, 179, 104, 62, 181, 236, 224, 189, 62, 189, 114, 62, 66, 241, 84, 190, 155, 141, 21, 61, 212, 68, 167, 189, 182, 127, 144, 61, 55, 252, 248, 61, 229, 39, 15, 62, 85, 11, 173, 60, 70, 58, 132, 190, 58, 16, 10, 62, 182, 59, 3, 191, 95, 7, 4, 190, 143, 54, 196, 61, 52, 242, 132, 190, 117, 103, 202, 189, 12, 198, 234, 62, 40, 177, 3, 190, 166, 9, 40, 62, 246, 254, 155, 190, 109, 97, 103, 190, 254, 199, 41, 62, 69, 206, 34, 190, 27, 2, 178, 190, 116, 62, 89, 189, 237, 136, 174, 190, 21, 53, 118, 62, 219, 22, 141, 190, 79, 56, 197, 62, 117, 179, 131, 190, 131, 53, 180, 61, 50, 222, 28, 190, 74, 153, 35, 190, 240, 164, 87, 190, 47, 135, 143, 189, 64, 125, 151, 62, 179, 28, 240, 61, 69, 120, 94, 191, 143, 143, 50, 62, 120, 136, 118, 62, 103, 226, 13, 62, 74, 248, 202, 189, 70, 94, 168, 189, 40, 176, 7, 62, 51, 128, 9, 190, 138, 109, 242, 187, 197, 185, 184, 190, 27, 69, 225, 189, 198, 154, 185, 189, 247, 47, 141, 62, 179, 87, 229, 62, 255, 205, 24, 62, 192, 170, 200, 189, 228, 145, 64, 62, 75, 82, 140, 190, 249, 111, 54, 62, 35, 51, 13, 62, 225, 163, 112, 62, 36, 77, 141, 190, 5, 70, 72, 190, 179, 207, 109, 190, 67, 123, 43, 191, 136, 118, 195, 61, 49, 98, 178, 61, 93, 64, 140, 191, 150, 137, 148, 62, 10, 218, 158, 188, 98, 246, 164, 189, 229, 177, 148, 190, 237, 41, 166, 188, 84, 181, 56, 62, 34, 102, 46, 62, 44, 203, 38, 61, 91, 137, 217, 188, 228, 40, 0, 188, 20, 32, 168, 61, 208, 83, 58, 62, 49, 109, 251, 61, 141, 16, 203, 188, 201, 32, 100, 190, 5, 235, 8, 191, 129, 215, 198, 61, 103, 192, 24, 62, 83, 174, 138, 60, 93, 232, 1, 62, 116, 163, 139, 62, 190, 209, 26, 62, 55, 141, 206, 190, 165, 63, 197, 190, 67, 202, 13, 190, 151, 133, 102, 62, 218, 52, 16, 62, 102, 206, 60, 190, 25, 109, 199, 61, 140, 48, 157, 61, 76, 31, 1, 190, 42, 244, 235, 62, 108, 187, 65, 191, 141, 191, 135, 190, 62, 184, 59, 61, 64, 199, 229, 61, 249, 72, 203, 61, 67, 62, 228, 190, 249, 54, 149, 62, 115, 181, 25, 191, 116, 192, 104, 189, 210, 0, 117, 61, 235, 162, 249, 61, 13, 27, 205, 190, 191, 84, 20, 190, 35, 154, 133, 62, 105, 183, 191, 188, 228, 158, 56, 62, 104, 162, 159, 188, 231, 127, 71, 191, 165, 194, 3, 62, 166, 32, 109, 60, 62, 76, 64, 191, 186, 122, 15, 62, 189, 95, 201, 189, 240, 187, 166, 190, 18, 17, 13, 191, 18, 249, 195, 60, 86, 201, 48, 190, 23, 162, 236, 190, 200, 152, 146, 62, 233, 209, 14, 60, 56, 41, 254, 187, 93, 84, 128, 62, 243, 66, 12, 62, 244, 70, 165, 61, 161, 84, 227, 61, 116, 207, 44, 189, 207, 131, 4, 188, 30, 64, 161, 61, 163, 4, 155, 62, 165, 8, 176, 61, 144, 92, 221, 190, 165, 129, 200, 61, 148, 180, 187, 190, 138, 236, 177, 189, 249, 171, 177, 61, 113, 186, 205, 61, 240, 129, 138, 61, 61, 135, 208, 60, 165, 175, 204, 190, 27, 190, 186, 188, 88, 243, 44, 191, 233, 47, 178, 189, 236, 24, 106, 190, 37, 151, 17, 191, 217, 109, 47, 62, 99, 169, 240, 61, 72, 150, 43, 61, 195, 102, 249, 59, 128, 137, 35, 190, 33, 66, 162, 62, 255, 24, 158, 190, 29, 49, 177, 60, 181, 5, 193, 188, 191, 114, 54, 190, 77, 230, 74, 62, 180, 158, 170, 59, 91, 254, 159, 188, 37, 84, 242, 189, 113, 202, 135, 190, 134, 57, 10, 62, 138, 35, 37, 62, 39, 52, 25, 61, 140, 38, 92, 189, 75, 253, 9, 61, 81, 123, 183, 188, 224, 133, 3, 62, 155, 187, 29, 62, 30, 113, 81, 190, 243, 39, 120, 190, 235, 148, 209, 190, 229, 254, 19, 62, 183, 154, 203, 62, 184, 23, 162, 61, 134, 134, 126, 190, 78, 96, 202, 62, 73, 230, 0, 62, 187, 94, 153, 190, 203, 160, 140, 190, 236, 205, 57, 62, 210, 126, 7, 62, 150, 177, 83, 188, 229, 206, 190, 62, 47, 185, 164, 190, 0, 120, 25, 190, 95, 133, 248, 189, 212, 176, 63, 191, 112, 232, 169, 62, 141, 117, 54, 62, 114, 21, 233, 61, 107, 207, 130, 190, 108, 19, 19, 191, 207, 5, 185, 62, 174, 92, 61, 61, 18, 31, 30, 190, 69, 204, 94, 189, 61, 34, 39, 190, 114, 6, 180, 61, 177, 202, 90, 190, 249, 46, 121, 62, 150, 252, 9, 190, 148, 53, 42, 62, 38, 136, 16, 191, 182, 50, 78, 62, 97, 101, 64, 62, 243, 120, 185, 61, 85, 128, 33, 61, 91, 153, 222, 62, 72, 166, 61, 62, 189, 164, 141, 189, 124, 66, 211, 61, 17, 242, 24, 190, 21, 5, 91, 191, 42, 249, 39, 189, 229, 201, 129, 190, 33, 20, 140, 60, 190, 58, 20, 191, 92, 62, 23, 190, 70, 205, 62, 61, 55, 237, 94, 190, 217, 240, 217, 190, 251, 17, 36, 191, 10, 19, 14, 190, 73, 104, 235, 59, 88, 245, 45, 61, 51, 251, 86, 190, 94, 48, 103, 191, 55, 220, 47, 190, 230, 37, 205, 190, 45, 114, 67, 62, 163, 75, 24, 190, 219, 201, 108, 61, 130, 187, 154, 190, 228, 190, 0, 190, 77, 237, 94, 62, 110, 98, 161, 62, 74, 208, 209, 190, 142, 102, 18, 62, 70, 63, 135, 190, 154, 122, 234, 189, 142, 219, 20, 191, 244, 232, 189, 190, 215, 4, 124, 189, 196, 254, 56, 189, 204, 151, 159, 61, 9, 69, 8, 62, 209, 93, 106, 61, 3, 121, 112, 61, 75, 5, 70, 190, 5, 23, 169, 61, 88, 186, 161, 62, 33, 71, 21, 191, 111, 36, 225, 190, 239, 231, 134, 62, 66, 185, 199, 60, 196, 51, 162, 60, 213, 54, 199, 190, 130, 122, 167, 62, 31, 180, 141, 191, 155, 28, 82, 62, 176, 57, 78, 61, 62, 133, 177, 62, 251, 123, 27, 190, 47, 137, 145, 190, 17, 94, 123, 61, 255, 53, 122, 61, 81, 97, 152, 62, 68, 221, 149, 62, 72, 222, 29, 191, 101, 74, 168, 62, 210, 54, 143, 62, 242, 247, 222, 190, 133, 37, 136, 190, 37, 250, 61, 191, 53, 21, 160, 190, 247, 19, 239, 189, 18, 60, 77, 62, 16, 14, 132, 62, 229, 248, 172, 189, 179, 6, 159, 62, 185, 210, 237, 61, 206, 231, 125, 62, 167, 134, 143, 190, 59, 180, 170, 190, 128, 51, 5, 190, 11, 64, 158, 188, 175, 119, 182, 62, 80, 91, 135, 189, 125, 10, 183, 190, 175, 10, 166, 62, 243, 14, 34, 190, 21, 203, 165, 189, 131, 34, 72, 62, 164, 203, 145, 61, 157, 172, 157, 189, 233, 146, 14, 189, 235, 211, 28, 62, 205, 118, 219, 62, 147, 167, 152, 62, 122, 163, 141, 190, 104, 72, 184, 190, 163, 30, 134, 189, 81, 69, 158, 62, 195, 113, 87, 190, 23, 11, 149, 189, 206, 24, 98, 62, 128, 63, 218, 189, 233, 50, 7, 190, 96, 167, 140, 60, 254, 191, 90, 190, 250, 82, 28, 63, 67, 162, 162, 190, 88, 72, 146, 61, 237, 189, 141, 190, 213, 152, 207, 190, 53, 81, 142, 62, 148, 244, 162, 62, 242, 23, 187, 61, 232, 112, 146, 190, 152, 233, 238, 190, 128, 115, 181, 62, 201, 115, 165, 186, 219, 89, 41, 189, 4, 61, 45, 189, 239, 148, 32, 189, 186, 84, 69, 62, 13, 157, 62, 190, 125, 97, 200, 187, 3, 28, 132, 190, 207, 131, 155, 189, 111, 24, 54, 191, 78, 175, 15, 62, 148, 40, 213, 62, 57, 207, 166, 61, 108, 5, 88, 190, 159, 76, 176, 62, 192, 233, 122, 62, 83, 194, 176, 62, 121, 54, 144, 62, 173, 104, 169, 62, 52, 224, 251, 189, 94, 82, 47, 189, 86, 187, 196, 190, 225, 244, 27, 191, 250, 28, 160, 187, 209, 36, 8, 188, 125, 197, 54, 191, 5, 20, 18, 62, 23, 206, 25, 188, 86, 15, 166, 188, 136, 238, 37, 190, 180, 27, 90, 190, 83, 152, 151, 62, 55, 64, 28, 188, 65, 180, 83, 59, 149, 241, 151, 189, 208, 250, 82, 190, 57, 148, 204, 61, 104, 62, 51, 62, 234, 232, 110, 62, 123, 52, 4, 190, 250, 75, 201, 190, 152, 149, 138, 190, 112, 169, 215, 61, 4, 135, 121, 62, 53, 180, 27, 187, 3, 130, 171, 185, 26, 142, 119, 62, 82, 131, 195, 61, 145, 238, 122, 62, 83, 14, 203, 62, 42, 176, 146, 62, 119, 156, 131, 190, 122, 68, 255, 188, 213, 132, 99, 191, 29, 21, 235, 190, 71, 229, 173, 188, 214, 230, 229, 60, 75, 222, 111, 191, 141, 48, 138, 62, 135, 168, 19, 62, 108, 245, 228, 189, 125, 202, 182, 190, 137, 251, 63, 190, 121, 217, 175, 61, 11, 183, 5, 61, 200, 181, 103, 60, 193, 106, 151, 189, 180, 26, 31, 190, 10, 105, 14, 190, 122, 233, 85, 62, 78, 5, 141, 62, 61, 118, 248, 188, 17, 205, 99, 190, 158, 254, 66, 190, 189, 179, 12, 62, 186, 124, 9, 63, 47, 41, 129, 189, 137, 54, 28, 190, 162, 157, 232, 62, 183, 140, 34, 62, 235, 56, 154, 189, 5, 25, 182, 61, 16, 169, 158, 189, 133, 60, 171, 61, 183, 208, 236, 189, 126, 248, 68, 61, 249, 254, 140, 58, 172, 69, 70, 61, 185, 162, 28, 61, 214, 249, 41, 189, 188, 212, 211, 61, 15, 78, 179, 188, 172, 8, 49, 190, 5, 173, 46, 190, 238, 116, 178, 187, 189, 159, 28, 61, 102, 220, 182, 189, 137, 200, 51, 190, 155, 216, 47, 189, 82, 86, 110, 61, 143, 241, 8, 61, 90, 138, 246, 61, 78, 154, 16, 190, 101, 6, 217, 60, 53, 213, 7, 62, 215, 147, 146, 189, 36, 20, 217, 189, 246, 52, 184, 61, 251, 181, 189, 189, 193, 247, 50, 190, 226, 245, 188, 189, 18, 149, 222, 188, 248, 223, 46, 187, 27, 201, 7, 62, 72, 243, 128, 60, 117, 68, 104, 61, 33, 221, 49, 190, 118, 240, 112, 62, 200, 27, 200, 190, 247, 57, 207, 189, 197, 155, 59, 190, 139, 75, 73, 191, 5, 143, 142, 62, 115, 16, 16, 62, 139, 216, 98, 62, 31, 45, 193, 190, 237, 171, 149, 190, 96, 239, 102, 62, 8, 180, 171, 61, 226, 236, 167, 62, 120, 79, 123, 58, 203, 210, 217, 60, 4, 20, 65, 61, 96, 247, 80, 62, 200, 19, 19, 62, 234, 104, 139, 190, 78, 33, 243, 190, 137, 91, 190, 190, 178, 218, 137, 62, 230, 231, 211, 62, 228, 5, 205, 61, 78, 142, 128, 189, 212, 151, 46, 62, 60, 168, 184, 189, 181, 163, 202, 190, 205, 238, 128, 60, 75, 111, 177, 190, 46, 63, 190, 61, 130, 172, 193, 61, 245, 48, 159, 190, 131, 223, 54, 61, 204, 193, 100, 62, 188, 228, 186, 62, 112, 95, 26, 191, 139, 9, 1, 61, 215, 49, 178, 189, 136, 94, 84, 62, 215, 252, 164, 61, 22, 141, 192, 61, 77, 79, 232, 189, 171, 202, 122, 62, 8, 205, 75, 189, 200, 10, 20, 190, 0, 21, 200, 62, 26, 57, 179, 187, 236, 18, 98, 190, 246, 197, 174, 189, 194, 163, 75, 62, 71, 129, 233, 188, 161, 68, 37, 62, 212, 80, 134, 190, 54, 144, 106, 190, 59, 143, 225, 61, 14, 31, 41, 62, 4, 74, 23, 190, 175, 132, 49, 61, 82, 89, 139, 189, 134, 237, 64, 61, 172, 84, 100, 189, 109, 51, 220, 61, 42, 129, 46, 62, 245, 108, 74, 189, 229, 247, 170, 62, 173, 63, 43, 60, 189, 155, 79, 61, 76, 38, 17, 63, 68, 169, 151, 189, 209, 42, 225, 61, 131, 203, 169, 61, 212, 201, 108, 62, 77, 115, 171, 189, 199, 126, 85, 190, 241, 82, 129, 62, 53, 185, 45, 61, 17, 210, 223, 190, 12, 231, 139, 62, 18, 36, 52, 191, 90, 175, 192, 190, 117, 62, 129, 190, 148, 171, 7, 62, 9, 83, 3, 62, 163, 51, 44, 190, 102, 243, 146, 190, 129, 69, 199, 191, 234, 171, 101, 191, 85, 41, 113, 61, 109, 126, 175, 191, 175, 112, 55, 62, 88, 119, 204, 189, 189, 137, 45, 188, 42, 116, 180, 189, 173, 192, 135, 189, 102, 232, 201, 60, 14, 221, 18, 62, 61, 242, 51, 189, 115, 81, 24, 190, 67, 49, 16, 189, 29, 215, 41, 190, 113, 39, 41, 62, 66, 235, 234, 189, 154, 83, 23, 61, 47, 34, 253, 189, 154, 26, 199, 61, 228, 24, 141, 61, 197, 112, 246, 60, 66, 35, 183, 188, 180, 70, 133, 61, 195, 97, 182, 189, 66, 8, 38, 190, 205, 25, 167, 61, 135, 125, 31, 189, 15, 100, 176, 60, 11, 80, 0, 61, 31, 237, 228, 61, 185, 136, 57, 190, 228, 20, 246, 188, 70, 70, 26, 190, 142, 238, 213, 187, 113, 241, 140, 189, 142, 168, 223, 189, 57, 207, 8, 62, 69, 43, 226, 189, 69, 79, 157, 61, 198, 144, 213, 62, 137, 2, 132, 191, 154, 13, 150, 62, 30, 160, 54, 190, 81, 151, 4, 191, 117, 133, 48, 191, 124, 143, 50, 62, 137, 136, 214, 190, 35, 118, 223, 61, 144, 212, 128, 61, 58, 233, 83, 190, 57, 167, 56, 191, 225, 128, 142, 190, 231, 174, 155, 190, 190, 65, 88, 190, 58, 173, 17, 61, 131, 36, 153, 188, 176, 44, 53, 62, 153, 119, 42, 190, 241, 28, 19, 191, 40, 125, 160, 191, 238, 184, 53, 191, 11, 46, 230, 190, 157, 135, 137, 189, 124, 190, 21, 190, 103, 49, 55, 61, 220, 108, 120, 190, 165, 21, 215, 190, 60, 215, 150, 62, 80, 39, 243, 61, 91, 55, 164, 189, 216, 86, 222, 189, 214, 11, 132, 190, 179, 179, 239, 190, 159, 23, 144, 61, 89, 56, 9, 191, 126, 223, 86, 190, 215, 43, 67, 190, 34, 150, 56, 191, 106, 242, 251, 62, 43, 120, 165, 61, 72, 196, 102, 61, 103, 87, 130, 190, 178, 15, 20, 191, 49, 34, 102, 62, 100, 185, 62, 190, 78, 72, 246, 188, 66, 12, 23, 61, 39, 162, 161, 190, 188, 28, 200, 60, 47, 26, 1, 190, 80, 198, 154, 62, 15, 67, 9, 190, 237, 43, 36, 191, 183, 158, 87, 190, 110, 36, 7, 62, 143, 108, 241, 62, 227, 87, 179, 61, 87, 155, 131, 190, 6, 102, 157, 62, 14, 10, 185, 60, 233, 104, 200, 61, 170, 79, 135, 61, 127, 179, 163, 189, 147, 101, 7, 61, 95, 72, 240, 61, 199, 203, 38, 190, 159, 111, 232, 61, 205, 110, 162, 61, 168, 17, 136, 61, 67, 125, 139, 61, 43, 141, 26, 190, 28, 115, 124, 189, 184, 84, 56, 189, 86, 199, 134, 189, 175, 143, 252, 58, 225, 214, 42, 190, 162, 4, 226, 189, 187, 164, 150, 60, 193, 212, 172, 189, 42, 145, 232, 188, 216, 240, 63, 190, 98, 89, 21, 190, 98, 18, 155, 61, 180, 107, 221, 189, 150, 240, 252, 61, 242, 51, 215, 61, 74, 54, 8, 62, 190, 47, 130, 189, 90, 141, 54, 189, 32, 228, 9, 190, 66, 237, 37, 190, 172, 46, 251, 189, 179, 120, 254, 190, 111, 21, 14, 190, 237, 139, 169, 58, 81, 191, 216, 62, 102, 229, 171, 61, 156, 198, 39, 190, 109, 79, 232, 61, 168, 78, 209, 189, 144, 26, 91, 62, 10, 46, 215, 189, 9, 204, 167, 188, 236, 34, 74, 188, 182, 238, 42, 62, 166, 142, 98, 62, 244, 128, 38, 190, 24, 154, 49, 190, 65, 60, 24, 61, 153, 217, 30, 189, 152, 231, 121, 189, 176, 196, 77, 61, 113, 231, 193, 61, 223, 218, 135, 189, 144, 167, 157, 189, 46, 19, 29, 190, 209, 246, 33, 62, 233, 38, 49, 190, 245, 25, 25, 62, 83, 76, 22, 191, 28, 206, 93, 189, 62, 51, 145, 62, 20, 3, 168, 190, 42, 4, 121, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 127, 11, 190, 203, 229, 6, 60, 27, 104, 121, 62, 27, 131, 235, 189, 176, 113, 233, 61, 176, 200, 130, 62, 242, 18, 218, 61, 87, 187, 78, 189, 192, 59, 137, 62, 232, 100, 59, 62, 116, 60, 92, 189, 218, 87, 167, 61, 177, 175, 27, 62, 53, 86, 52, 189, 45, 138, 147, 190, 10, 60, 139, 61, 165, 1, 216, 186, 28, 30, 236, 189, 23, 150, 231, 61, 129, 195, 15, 189, 88, 245, 190, 188, 188, 24, 5, 62, 59, 75, 150, 61, 96, 131, 181, 189, 94, 177, 121, 62, 43, 0, 229, 189, 249, 160, 20, 190, 139, 63, 15, 190, 9, 114, 40, 189, 228, 191, 31, 62, 76, 143, 241, 61, 236, 218, 110, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 188, 25, 191, 213, 26, 106, 189, 71, 20, 143, 190, 38, 143, 88, 189, 25, 182, 225, 60, 127, 42, 42, 189, 65, 128, 215, 190, 7, 142, 196, 190, 54, 206, 213, 189, 239, 110, 232, 62, 198, 232, 143, 190, 219, 126, 67, 62, 130, 76, 179, 62, 120, 129, 90, 63, 131, 219, 243, 190, 197, 150, 120, 62, 111, 194, 193, 62, 202, 241, 228, 190, 208, 147, 74, 191, 143, 170, 194, 190, 110, 18, 0, 63, 219, 44, 233, 62, 121, 175, 2, 63, 63, 79, 184, 61, 64, 54, 187, 62, 79, 212, 65, 190, 105, 98, 59, 63, 119, 250, 9, 62, 204, 134, 60, 63, 65, 35, 72, 63, 159, 78, 21, 190, 50, 127, 202, 190, 245, 42, 131, 62, 85, 83, 229, 60, 136, 184, 183, 190, 9, 167, 233, 189, 161, 126, 46, 191, 246, 85, 152, 190, 135, 192, 117, 190, 81, 27, 65, 62, 67, 115, 49, 190, 220, 200, 69, 190, 87, 35, 219, 60, 55, 183, 128, 190, 150, 173, 24, 190, 215, 161, 200, 189, 26, 243, 218, 61, 86, 105, 57, 190, 82, 21, 188, 62, 31, 172, 56, 62, 30, 114, 140, 62, 88, 18, 54, 62, 254, 114, 246, 62, 26, 243, 91, 62, 122, 22, 50, 62, 189, 240, 21, 190, 61, 52, 217, 189, 197, 209, 32, 190, 66, 116, 152, 60, 51, 214, 68, 188, 147, 12, 167, 61, 107, 92, 198, 62, 165, 115, 113, 61, 160, 76, 183, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 239, 7, 188, 135, 13, 189, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {30, 211, 153, 191, 35, 79, 222, 191, 39, 111, 7, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {196, 7, 176, 191, 186, 17, 77, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0017/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}