// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {235, 116, 28, 190, 228, 153, 238, 61, 46, 110, 144, 190, 131, 112, 2, 63, 68, 8, 205, 62, 140, 203, 165, 190, 128, 212, 191, 62, 68, 71, 238, 62, 160, 245, 49, 190, 86, 155, 16, 62, 3, 169, 8, 63, 150, 169, 35, 61, 111, 174, 213, 190, 208, 91, 237, 62, 94, 126, 175, 190, 230, 71, 35, 190, 208, 55, 240, 61, 223, 136, 146, 62, 163, 142, 144, 188, 144, 181, 55, 62, 34, 242, 159, 62, 206, 148, 15, 62, 173, 15, 7, 190, 226, 206, 129, 62, 47, 128, 209, 62, 217, 28, 148, 190, 14, 87, 241, 62, 236, 111, 8, 62, 199, 57, 200, 62, 56, 244, 179, 61, 22, 209, 91, 62, 94, 120, 17, 191, 239, 216, 142, 61, 72, 157, 98, 190, 201, 100, 26, 190, 43, 26, 251, 62, 53, 30, 210, 62, 102, 136, 175, 62, 38, 134, 234, 61, 156, 134, 4, 63, 9, 43, 29, 189, 3, 244, 18, 63, 155, 77, 202, 190, 113, 190, 30, 190, 39, 77, 242, 190, 210, 120, 247, 190, 39, 117, 116, 190, 45, 108, 143, 62, 66, 129, 231, 62, 42, 206, 171, 62, 247, 124, 29, 62, 105, 252, 75, 190, 16, 10, 16, 191, 0, 23, 245, 62, 177, 144, 114, 189, 72, 174, 39, 61, 45, 130, 37, 190, 92, 96, 237, 62, 41, 16, 117, 62, 218, 2, 215, 62, 216, 233, 143, 190, 197, 124, 125, 190, 106, 240, 254, 189, 95, 231, 70, 190, 73, 152, 146, 190, 78, 212, 2, 191, 223, 29, 18, 63, 221, 213, 178, 190, 185, 120, 130, 60, 43, 89, 154, 190, 43, 151, 37, 62, 36, 1, 161, 190, 46, 149, 208, 190, 170, 145, 205, 62, 197, 150, 216, 188, 133, 62, 183, 189, 249, 51, 195, 190, 133, 130, 171, 190, 34, 143, 120, 190, 17, 20, 134, 189, 249, 148, 224, 61, 239, 182, 11, 63, 89, 111, 179, 190, 94, 90, 17, 189, 47, 247, 9, 191, 205, 103, 149, 190, 28, 244, 202, 190, 151, 209, 194, 62, 247, 168, 215, 62, 177, 23, 52, 190, 129, 212, 2, 63, 90, 215, 3, 191, 139, 14, 74, 189, 54, 158, 163, 62, 49, 238, 225, 62, 152, 187, 86, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 194, 19, 191, 188, 98, 212, 61, 129, 51, 161, 190, 178, 51, 7, 63, 70, 230, 247, 190, 111, 128, 139, 60, 63, 8, 159, 190, 26, 62, 99, 188, 114, 133, 132, 62, 66, 7, 5, 190, 61, 23, 124, 189, 205, 102, 134, 62, 80, 172, 241, 62, 223, 25, 130, 190, 6, 32, 152, 62, 176, 176, 127, 190, 211, 115, 153, 62, 48, 35, 2, 191, 53, 25, 16, 63, 27, 94, 1, 63, 60, 231, 236, 62, 10, 225, 23, 62, 200, 234, 16, 63, 236, 223, 86, 190, 19, 53, 195, 189, 15, 192, 74, 62, 11, 212, 157, 62, 38, 1, 14, 62, 160, 161, 14, 63, 64, 47, 222, 62, 168, 247, 34, 62, 117, 126, 153, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {34, 49, 156, 61, 48, 166, 40, 62, 171, 165, 171, 61, 180, 46, 149, 61, 225, 182, 170, 189, 93, 252, 32, 62, 211, 111, 45, 62, 235, 84, 51, 62, 2, 83, 97, 61, 197, 226, 200, 60, 201, 122, 202, 189, 19, 156, 48, 61, 181, 34, 219, 189, 178, 43, 49, 190, 185, 114, 113, 61, 140, 114, 144, 61, 73, 237, 77, 189, 33, 204, 152, 60, 28, 68, 240, 189, 215, 182, 93, 60, 35, 88, 212, 61, 246, 135, 85, 189, 11, 6, 145, 189, 157, 149, 167, 189, 133, 124, 10, 61, 22, 123, 178, 61, 104, 193, 122, 189, 64, 180, 158, 189, 236, 39, 161, 61, 176, 227, 224, 189, 186, 108, 129, 188, 155, 8, 97, 188, 119, 63, 50, 190, 144, 138, 101, 61, 145, 40, 121, 59, 110, 105, 195, 189, 195, 32, 128, 61, 53, 74, 163, 60, 128, 49, 33, 190, 102, 158, 37, 189, 58, 185, 72, 189, 224, 230, 31, 62, 38, 112, 102, 61, 233, 230, 23, 62, 173, 234, 159, 189, 151, 106, 220, 60, 44, 100, 159, 60, 54, 10, 197, 188, 83, 253, 17, 190, 130, 117, 220, 189, 121, 4, 151, 189, 114, 211, 1, 190, 169, 174, 176, 60, 8, 154, 195, 61, 230, 68, 166, 61, 172, 146, 7, 62, 172, 146, 193, 189, 172, 225, 73, 189, 75, 134, 81, 58, 8, 153, 209, 186, 173, 43, 200, 187, 235, 52, 14, 190, 222, 90, 222, 61, 92, 122, 156, 61, 142, 9, 130, 189, 122, 231, 7, 190, 207, 80, 32, 189, 48, 177, 19, 62, 164, 123, 249, 61, 171, 106, 14, 189, 239, 85, 74, 61, 61, 128, 194, 61, 252, 22, 232, 189, 115, 68, 128, 189, 99, 167, 211, 189, 201, 125, 123, 61, 240, 231, 173, 189, 77, 253, 2, 62, 184, 137, 137, 188, 214, 121, 44, 189, 11, 109, 201, 61, 228, 78, 24, 62, 108, 250, 3, 190, 69, 131, 84, 61, 229, 35, 10, 62, 228, 19, 252, 188, 79, 150, 157, 61, 157, 240, 87, 189, 86, 102, 98, 189, 103, 101, 34, 62, 215, 120, 145, 188, 37, 251, 103, 189, 47, 107, 236, 189, 155, 88, 247, 61, 55, 238, 217, 61, 254, 107, 46, 190, 141, 53, 5, 61, 15, 175, 90, 185, 32, 194, 248, 60, 38, 168, 45, 190, 192, 193, 210, 61, 93, 86, 255, 58, 36, 141, 14, 190, 92, 101, 223, 61, 203, 107, 9, 62, 198, 186, 42, 190, 148, 163, 132, 61, 233, 249, 170, 189, 33, 229, 4, 62, 143, 68, 22, 62, 133, 135, 244, 188, 57, 54, 228, 59, 97, 251, 210, 60, 239, 137, 222, 61, 73, 67, 47, 62, 73, 203, 191, 61, 37, 250, 90, 189, 112, 224, 18, 190, 65, 36, 49, 190, 137, 74, 47, 190, 145, 45, 24, 62, 115, 179, 19, 190, 146, 138, 177, 61, 77, 110, 220, 59, 117, 192, 155, 189, 128, 239, 180, 189, 229, 252, 140, 61, 190, 231, 32, 190, 140, 224, 22, 62, 247, 44, 146, 61, 174, 97, 38, 188, 223, 135, 182, 61, 151, 221, 114, 189, 215, 242, 252, 61, 238, 247, 248, 61, 107, 243, 108, 188, 109, 151, 52, 62, 215, 189, 2, 190, 69, 208, 32, 190, 146, 187, 46, 190, 235, 110, 250, 61, 153, 65, 109, 188, 32, 62, 12, 190, 142, 19, 47, 62, 117, 89, 13, 190, 66, 2, 23, 61, 17, 125, 24, 190, 2, 238, 70, 187, 195, 140, 214, 189, 35, 159, 136, 188, 83, 139, 143, 61, 151, 252, 26, 189, 175, 176, 184, 61, 244, 199, 125, 188, 206, 106, 241, 189, 105, 99, 230, 61, 99, 235, 228, 189, 64, 147, 20, 62, 54, 148, 245, 61, 30, 209, 204, 61, 22, 194, 213, 189, 83, 144, 238, 61, 120, 178, 34, 62, 248, 120, 217, 188, 121, 244, 34, 60, 40, 147, 140, 189, 189, 130, 59, 60, 82, 75, 153, 60, 188, 107, 34, 190, 81, 76, 14, 189, 89, 64, 47, 190, 220, 250, 193, 61, 109, 213, 21, 190, 236, 84, 172, 61, 245, 127, 12, 61, 190, 203, 11, 190, 211, 214, 163, 61, 147, 130, 44, 188, 244, 77, 42, 62, 68, 182, 242, 60, 123, 31, 29, 62, 102, 189, 94, 61, 187, 175, 216, 60, 175, 146, 20, 62, 162, 198, 170, 61, 179, 163, 184, 187, 163, 250, 72, 61, 46, 173, 44, 190, 89, 105, 143, 189, 226, 56, 136, 61, 14, 108, 185, 188, 103, 172, 160, 59, 18, 128, 249, 60, 69, 178, 124, 189, 1, 212, 184, 61, 145, 128, 102, 61, 99, 154, 109, 61, 31, 29, 26, 190, 58, 61, 37, 190, 236, 137, 191, 60, 119, 32, 46, 62, 16, 37, 43, 190, 111, 41, 4, 189, 204, 250, 96, 61, 131, 123, 204, 60, 149, 171, 19, 190, 72, 78, 237, 189, 133, 102, 180, 189, 29, 103, 11, 190, 155, 138, 43, 62, 125, 2, 51, 190, 85, 53, 150, 189, 134, 30, 25, 62, 232, 151, 208, 61, 101, 163, 153, 189, 184, 147, 138, 189, 118, 104, 18, 62, 144, 85, 193, 189, 36, 93, 17, 62, 104, 31, 186, 61, 254, 242, 149, 61, 224, 167, 30, 190, 198, 100, 225, 189, 24, 150, 181, 61, 253, 85, 26, 62, 155, 46, 167, 189, 120, 196, 29, 62, 231, 57, 213, 60, 26, 71, 239, 61, 60, 74, 246, 59, 38, 135, 216, 61, 226, 170, 94, 188, 18, 80, 170, 188, 60, 86, 223, 189, 98, 126, 47, 187, 9, 171, 214, 189, 11, 123, 150, 61, 34, 109, 20, 189, 131, 116, 14, 62, 60, 253, 162, 61, 53, 105, 174, 61, 104, 38, 2, 62, 113, 58, 190, 187, 123, 78, 50, 60, 114, 175, 251, 61, 70, 189, 0, 60, 56, 184, 41, 190, 242, 96, 201, 60, 66, 157, 23, 190, 61, 76, 25, 190, 124, 240, 24, 62, 150, 28, 178, 188, 43, 167, 29, 62, 149, 50, 174, 189, 47, 10, 19, 190, 191, 32, 173, 188, 70, 177, 11, 190, 43, 151, 23, 60, 126, 103, 114, 189, 56, 214, 214, 189, 3, 186, 211, 61, 100, 135, 47, 190, 30, 86, 11, 62, 216, 176, 32, 62, 102, 194, 156, 189, 209, 103, 3, 62, 128, 224, 193, 61, 92, 217, 141, 61, 172, 167, 36, 190, 15, 62, 135, 61, 249, 189, 140, 61, 98, 120, 89, 189, 26, 131, 240, 60, 113, 53, 240, 189, 123, 91, 5, 62, 58, 183, 49, 189, 125, 167, 40, 62, 176, 0, 43, 62, 59, 55, 51, 62, 9, 129, 165, 189, 24, 92, 11, 62, 74, 249, 42, 190, 131, 112, 94, 189, 14, 190, 20, 62, 219, 129, 17, 61, 130, 73, 196, 189, 179, 10, 75, 189, 28, 177, 39, 190, 74, 160, 255, 189, 14, 191, 50, 190, 146, 197, 248, 59, 165, 220, 16, 189, 75, 21, 173, 189, 47, 244, 38, 62, 86, 130, 40, 190, 91, 20, 191, 61, 228, 124, 190, 61, 237, 55, 42, 190, 147, 53, 0, 189, 161, 128, 36, 60, 126, 66, 214, 61, 78, 42, 227, 61, 219, 165, 58, 189, 189, 231, 143, 189, 189, 246, 196, 189, 223, 71, 93, 61, 96, 148, 75, 61, 82, 131, 213, 189, 78, 91, 236, 59, 250, 203, 32, 189, 106, 65, 127, 189, 23, 96, 33, 190, 150, 54, 30, 62, 143, 220, 168, 189, 152, 119, 35, 62, 64, 32, 237, 189, 243, 60, 218, 188, 27, 242, 21, 190, 153, 172, 83, 60, 148, 248, 106, 61, 92, 233, 71, 61, 226, 77, 67, 61, 99, 104, 244, 189, 172, 30, 13, 189, 28, 97, 138, 61, 73, 210, 43, 59, 103, 192, 4, 190, 157, 132, 177, 61, 101, 112, 45, 62, 72, 112, 17, 190, 121, 9, 197, 61, 144, 78, 36, 190, 235, 51, 250, 61, 229, 102, 13, 190, 171, 186, 240, 189, 114, 223, 208, 61, 100, 166, 198, 61, 57, 106, 172, 187, 147, 63, 55, 189, 123, 15, 185, 61, 159, 75, 34, 190, 107, 199, 198, 189, 125, 99, 234, 59, 136, 173, 65, 60, 5, 95, 155, 188, 104, 131, 15, 62, 193, 85, 253, 61, 46, 79, 226, 61, 242, 132, 129, 58, 157, 135, 23, 188, 250, 30, 249, 61, 109, 186, 52, 62, 133, 228, 18, 190, 162, 140, 166, 189, 12, 122, 48, 61, 214, 232, 95, 61, 216, 54, 253, 189, 55, 103, 49, 62, 120, 25, 7, 190, 237, 252, 178, 61, 149, 46, 17, 190, 189, 244, 134, 61, 132, 54, 36, 190, 26, 142, 212, 189, 25, 17, 184, 61, 224, 51, 48, 62, 14, 175, 25, 189, 229, 254, 7, 62, 77, 109, 1, 62, 216, 144, 22, 62, 192, 188, 181, 189, 222, 78, 22, 190, 64, 219, 155, 61, 223, 142, 232, 189, 99, 184, 137, 188, 36, 41, 128, 189, 235, 25, 133, 61, 19, 188, 50, 62, 202, 190, 30, 62, 4, 228, 40, 62, 8, 178, 34, 62, 19, 64, 96, 189, 221, 0, 15, 62, 89, 77, 234, 189, 27, 61, 1, 61, 115, 154, 233, 188, 92, 37, 25, 62, 219, 86, 43, 190, 143, 83, 47, 189, 235, 5, 142, 61, 236, 78, 22, 190, 137, 177, 148, 61, 75, 68, 22, 62, 53, 35, 64, 189, 186, 57, 1, 61, 224, 104, 169, 189, 18, 6, 196, 189, 93, 35, 22, 188, 220, 29, 10, 62, 234, 64, 131, 189, 78, 102, 14, 62, 179, 155, 254, 189, 110, 57, 66, 61, 44, 77, 60, 61, 215, 58, 13, 62, 20, 247, 248, 61, 167, 238, 42, 189, 8, 105, 140, 61, 203, 240, 86, 61, 222, 190, 31, 190, 198, 94, 11, 61, 28, 231, 51, 190, 44, 24, 242, 61, 42, 31, 17, 62, 140, 205, 202, 59, 91, 215, 152, 61, 27, 43, 195, 189, 160, 47, 121, 189, 189, 140, 206, 186, 34, 10, 0, 61, 52, 144, 131, 58, 17, 201, 205, 189, 119, 254, 12, 62, 200, 252, 14, 62, 61, 100, 184, 188, 67, 65, 13, 187, 3, 252, 38, 190, 197, 251, 131, 60, 192, 232, 34, 189, 184, 33, 223, 61, 5, 19, 178, 61, 227, 122, 13, 62, 238, 182, 114, 188, 144, 99, 162, 189, 37, 77, 223, 189, 158, 250, 132, 189, 174, 53, 249, 61, 117, 250, 31, 190, 90, 22, 210, 61, 97, 33, 40, 62, 96, 52, 94, 61, 0, 159, 70, 189, 51, 255, 99, 189, 169, 213, 252, 188, 91, 216, 124, 189, 127, 151, 42, 190, 202, 196, 23, 190, 97, 184, 19, 62, 238, 129, 177, 189, 69, 147, 170, 189, 193, 40, 236, 189, 52, 42, 4, 62, 33, 120, 46, 190, 88, 131, 25, 190, 70, 156, 27, 62, 81, 247, 180, 188, 237, 189, 57, 189, 152, 231, 228, 61, 103, 207, 177, 61, 201, 5, 188, 61, 63, 106, 222, 61, 251, 197, 12, 190, 146, 231, 92, 189, 139, 178, 162, 61, 185, 229, 41, 62, 200, 224, 131, 61, 63, 133, 19, 61, 182, 194, 8, 61, 188, 158, 156, 61, 215, 7, 18, 62, 154, 131, 153, 61, 126, 56, 223, 61, 108, 228, 224, 61, 196, 157, 33, 61, 141, 174, 226, 189, 183, 59, 253, 61, 105, 255, 141, 188, 106, 168, 254, 57, 239, 192, 2, 61, 59, 136, 52, 190, 92, 217, 208, 188, 213, 73, 201, 60, 198, 117, 165, 60, 133, 45, 87, 61, 169, 240, 225, 61, 122, 141, 28, 62, 78, 149, 233, 189, 225, 24, 100, 61, 169, 214, 181, 61, 172, 140, 170, 189, 73, 214, 196, 61, 76, 123, 10, 189, 114, 230, 137, 189, 155, 232, 38, 61, 201, 177, 29, 61, 144, 172, 119, 61, 190, 94, 37, 62, 195, 75, 132, 59, 74, 57, 216, 188, 225, 187, 198, 61, 227, 108, 191, 188, 10, 101, 128, 61, 116, 76, 179, 61, 55, 51, 137, 189, 99, 119, 4, 62, 155, 196, 47, 190, 136, 164, 205, 61, 110, 96, 215, 61, 11, 78, 173, 61, 10, 14, 228, 189, 185, 231, 45, 62, 238, 26, 172, 61, 207, 12, 12, 189, 37, 99, 14, 190, 8, 201, 220, 188, 48, 171, 141, 189, 139, 207, 1, 190, 149, 39, 167, 189, 203, 92, 209, 60, 56, 196, 1, 189, 211, 72, 128, 188, 195, 214, 24, 190, 232, 158, 198, 189, 250, 32, 222, 189, 200, 238, 61, 60, 145, 9, 232, 60, 26, 85, 49, 62, 11, 174, 247, 61, 141, 216, 139, 60, 3, 207, 48, 190, 22, 242, 21, 188, 132, 250, 172, 188, 250, 225, 160, 61, 126, 231, 250, 61, 190, 162, 28, 189, 252, 206, 40, 61, 2, 86, 102, 61, 234, 214, 169, 61, 107, 151, 179, 61, 0, 30, 14, 190, 90, 123, 39, 62, 143, 244, 133, 60, 54, 145, 238, 61, 246, 127, 42, 190, 102, 90, 242, 61, 24, 211, 18, 62, 88, 249, 202, 60, 11, 230, 105, 189, 58, 133, 23, 62, 38, 67, 190, 60, 119, 118, 214, 60, 161, 134, 50, 190, 176, 194, 183, 61, 137, 148, 8, 62, 242, 149, 50, 62, 62, 142, 44, 190, 174, 64, 21, 62, 222, 38, 153, 189, 29, 203, 16, 61, 52, 157, 32, 62, 250, 172, 160, 61, 20, 50, 38, 190, 135, 228, 242, 189, 216, 54, 202, 60, 225, 89, 27, 62, 43, 244, 20, 189, 163, 161, 196, 61, 177, 207, 61, 61, 95, 63, 253, 188, 165, 103, 27, 62, 37, 112, 14, 62, 191, 188, 28, 62, 187, 81, 180, 61, 10, 4, 53, 62, 53, 57, 242, 61, 146, 144, 15, 62, 236, 114, 188, 61, 253, 122, 146, 61, 50, 2, 133, 60, 48, 246, 109, 189, 170, 164, 190, 61, 215, 20, 69, 61, 133, 155, 208, 61, 18, 95, 39, 61, 114, 166, 45, 62, 196, 179, 16, 62, 160, 220, 37, 190, 123, 165, 104, 61, 40, 96, 141, 60, 162, 173, 12, 62, 137, 64, 190, 189, 252, 99, 165, 188, 118, 84, 184, 61, 244, 248, 18, 190, 101, 239, 186, 60, 105, 211, 168, 189, 206, 154, 203, 61, 68, 35, 24, 187, 119, 147, 0, 190, 131, 254, 249, 60, 244, 118, 223, 189, 179, 71, 20, 60, 22, 142, 164, 61, 50, 163, 21, 190, 222, 36, 251, 61, 216, 55, 37, 62, 146, 134, 116, 188, 30, 133, 45, 190, 102, 147, 8, 190, 180, 189, 207, 189, 138, 133, 159, 186, 130, 60, 81, 61, 197, 48, 1, 62, 7, 11, 31, 62, 0, 208, 210, 61, 188, 120, 215, 61, 34, 77, 32, 62, 144, 128, 215, 189, 203, 87, 93, 189, 153, 168, 70, 61, 135, 73, 19, 190, 44, 61, 36, 62, 123, 176, 52, 190, 91, 75, 132, 189, 16, 68, 170, 61, 51, 131, 81, 61, 193, 25, 31, 190, 131, 162, 93, 60, 44, 98, 182, 60, 37, 178, 255, 61, 224, 203, 35, 61, 79, 32, 134, 187, 178, 239, 23, 62, 29, 214, 6, 62, 46, 229, 38, 190, 251, 14, 135, 61, 255, 212, 214, 188, 81, 29, 254, 61, 58, 60, 19, 62, 25, 163, 66, 61, 64, 176, 161, 61, 196, 130, 144, 60, 186, 32, 23, 190, 192, 249, 102, 61, 3, 195, 247, 189, 199, 74, 147, 60, 102, 89, 201, 189, 252, 162, 2, 62, 175, 27, 26, 190, 183, 243, 141, 189, 72, 9, 189, 60, 43, 137, 110, 188, 75, 3, 17, 189, 151, 251, 84, 59, 254, 61, 49, 62, 77, 132, 90, 61, 227, 245, 183, 60, 213, 44, 51, 190, 68, 66, 37, 61, 252, 190, 91, 188, 255, 55, 23, 62, 106, 195, 175, 60, 82, 242, 180, 188, 136, 73, 178, 187, 234, 51, 0, 62, 94, 14, 22, 190, 10, 61, 255, 188, 196, 46, 51, 189, 5, 127, 31, 62, 23, 67, 235, 61, 151, 98, 136, 189, 219, 56, 204, 61, 21, 143, 52, 188, 5, 243, 41, 61, 4, 72, 16, 62, 22, 93, 88, 58, 214, 172, 170, 61, 22, 183, 0, 190, 139, 9, 7, 190, 10, 70, 67, 61, 127, 158, 222, 61, 232, 83, 252, 61, 17, 9, 192, 188, 137, 67, 3, 190, 110, 128, 225, 61, 188, 180, 185, 61, 254, 63, 40, 190, 186, 102, 213, 61, 13, 42, 12, 62, 32, 253, 50, 189, 143, 131, 223, 189, 93, 188, 41, 189, 253, 18, 230, 60, 145, 62, 13, 61, 143, 86, 184, 61, 17, 38, 156, 189, 188, 122, 39, 190, 51, 188, 190, 60, 82, 237, 131, 189, 165, 162, 172, 189, 67, 233, 79, 189, 96, 103, 6, 60, 235, 230, 69, 188, 102, 252, 146, 189, 215, 4, 128, 189, 91, 24, 44, 62, 212, 216, 151, 61, 237, 6, 12, 190, 72, 201, 50, 62, 139, 227, 112, 189, 173, 214, 210, 61, 86, 164, 13, 189, 157, 118, 62, 61, 30, 230, 45, 62, 87, 253, 156, 188, 222, 226, 211, 58, 93, 73, 93, 189, 89, 13, 151, 189, 192, 55, 108, 189, 57, 26, 52, 190, 253, 135, 189, 60, 31, 56, 117, 189, 186, 63, 66, 60, 156, 80, 15, 190, 201, 132, 71, 189, 162, 205, 25, 62, 213, 29, 116, 60, 115, 71, 211, 61, 174, 218, 56, 61, 18, 49, 10, 62, 188, 243, 218, 61, 45, 232, 166, 61, 239, 2, 129, 61, 240, 3, 30, 190, 232, 11, 23, 62, 241, 211, 188, 60, 235, 56, 154, 189, 5, 25, 182, 61, 16, 169, 158, 189, 133, 60, 171, 61, 183, 208, 236, 189, 126, 248, 68, 61, 249, 254, 140, 58, 172, 69, 70, 61, 185, 162, 28, 61, 214, 249, 41, 189, 188, 212, 211, 61, 15, 78, 179, 188, 172, 8, 49, 190, 5, 173, 46, 190, 238, 116, 178, 187, 189, 159, 28, 61, 102, 220, 182, 189, 137, 200, 51, 190, 155, 216, 47, 189, 82, 86, 110, 61, 143, 241, 8, 61, 90, 138, 246, 61, 78, 154, 16, 190, 101, 6, 217, 60, 53, 213, 7, 62, 215, 147, 146, 189, 36, 20, 217, 189, 246, 52, 184, 61, 251, 181, 189, 189, 193, 247, 50, 190, 226, 245, 188, 189, 18, 149, 222, 188, 28, 196, 184, 189, 251, 177, 204, 61, 250, 91, 221, 61, 87, 163, 24, 61, 13, 128, 48, 62, 122, 193, 211, 189, 249, 32, 139, 189, 229, 24, 18, 190, 80, 71, 220, 189, 117, 187, 230, 187, 80, 58, 196, 61, 168, 224, 171, 189, 96, 8, 33, 62, 169, 130, 248, 189, 17, 247, 235, 189, 153, 19, 60, 189, 186, 162, 159, 61, 157, 24, 17, 62, 5, 49, 119, 189, 127, 169, 80, 61, 36, 136, 223, 189, 91, 58, 41, 62, 153, 108, 25, 61, 53, 132, 12, 190, 66, 19, 163, 189, 205, 172, 172, 189, 220, 235, 186, 188, 13, 89, 227, 61, 203, 163, 30, 61, 84, 177, 78, 61, 248, 220, 110, 189, 101, 33, 144, 189, 215, 206, 141, 189, 66, 244, 19, 62, 45, 96, 50, 190, 5, 36, 164, 61, 140, 25, 48, 188, 13, 141, 159, 60, 110, 9, 77, 189, 50, 116, 10, 62, 128, 42, 44, 62, 181, 186, 52, 190, 89, 144, 85, 188, 205, 104, 0, 62, 105, 184, 127, 61, 101, 255, 102, 189, 169, 144, 250, 60, 54, 138, 195, 58, 104, 141, 234, 188, 28, 78, 245, 188, 187, 98, 46, 190, 69, 51, 37, 62, 93, 187, 57, 61, 100, 151, 28, 190, 44, 43, 44, 190, 144, 215, 8, 62, 128, 211, 254, 189, 216, 183, 215, 60, 21, 244, 150, 189, 102, 8, 57, 61, 238, 153, 36, 62, 53, 243, 232, 61, 188, 137, 82, 61, 189, 128, 39, 62, 207, 200, 45, 62, 210, 99, 5, 190, 236, 23, 13, 190, 211, 122, 137, 187, 213, 49, 33, 190, 235, 128, 124, 189, 68, 97, 50, 62, 235, 106, 38, 188, 74, 48, 85, 61, 154, 151, 163, 61, 159, 88, 172, 61, 127, 109, 28, 62, 221, 130, 48, 189, 81, 94, 33, 62, 199, 131, 174, 61, 62, 140, 167, 189, 201, 197, 157, 188, 229, 235, 38, 62, 167, 191, 52, 60, 247, 217, 28, 62, 36, 169, 35, 190, 5, 146, 248, 61, 138, 236, 203, 189, 138, 47, 18, 190, 92, 142, 20, 190, 131, 164, 35, 190, 199, 149, 132, 61, 133, 148, 48, 190, 64, 185, 23, 190, 216, 193, 52, 190, 14, 139, 239, 189, 81, 26, 132, 189, 186, 69, 106, 189, 186, 41, 234, 60, 181, 84, 125, 189, 205, 37, 29, 189, 93, 135, 125, 61, 14, 221, 18, 62, 61, 242, 51, 189, 115, 81, 24, 190, 67, 49, 16, 189, 29, 215, 41, 190, 113, 39, 41, 62, 66, 235, 234, 189, 180, 184, 92, 61, 47, 34, 253, 189, 143, 158, 3, 62, 228, 24, 141, 61, 48, 56, 8, 61, 66, 35, 183, 188, 147, 93, 195, 61, 195, 97, 182, 189, 253, 121, 8, 190, 34, 119, 232, 61, 20, 127, 24, 189, 118, 36, 99, 61, 87, 149, 119, 61, 215, 64, 18, 62, 139, 149, 35, 190, 101, 147, 20, 189, 51, 29, 247, 189, 107, 144, 246, 60, 139, 207, 153, 189, 75, 148, 140, 189, 143, 168, 21, 62, 200, 89, 7, 190, 98, 105, 22, 190, 225, 96, 19, 62, 31, 149, 158, 189, 62, 143, 129, 60, 100, 118, 129, 189, 113, 53, 59, 188, 127, 83, 128, 189, 250, 143, 248, 61, 101, 240, 40, 190, 116, 141, 221, 61, 42, 13, 20, 190, 62, 253, 9, 188, 160, 137, 5, 190, 80, 99, 177, 189, 170, 111, 38, 190, 229, 196, 51, 62, 166, 205, 38, 62, 194, 11, 36, 190, 181, 113, 38, 62, 196, 110, 54, 189, 160, 75, 201, 189, 162, 94, 13, 190, 172, 117, 111, 61, 197, 135, 48, 61, 212, 209, 161, 189, 178, 26, 8, 189, 63, 220, 16, 62, 94, 137, 40, 189, 80, 177, 111, 186, 130, 195, 40, 190, 36, 12, 51, 62, 117, 125, 118, 188, 120, 136, 129, 189, 97, 15, 238, 61, 0, 126, 175, 189, 154, 25, 37, 190, 6, 105, 43, 190, 90, 125, 22, 190, 65, 30, 155, 189, 227, 132, 37, 62, 115, 6, 207, 188, 184, 16, 251, 189, 167, 18, 6, 62, 104, 104, 7, 61, 226, 212, 46, 190, 81, 231, 176, 189, 38, 247, 156, 189, 202, 18, 24, 190, 160, 23, 191, 61, 50, 141, 31, 190, 208, 254, 21, 61, 176, 72, 132, 189, 173, 199, 44, 62, 94, 140, 142, 58, 246, 61, 217, 189, 122, 140, 39, 62, 28, 3, 92, 61, 12, 52, 23, 62, 250, 61, 249, 61, 77, 250, 224, 61, 228, 35, 10, 61, 97, 239, 164, 61, 167, 69, 212, 61, 147, 18, 128, 61, 116, 129, 166, 189, 150, 35, 68, 61, 12, 199, 253, 61, 60, 122, 22, 190, 183, 93, 254, 61, 53, 72, 178, 61, 182, 150, 154, 61, 206, 75, 183, 61, 142, 125, 17, 190, 253, 254, 66, 189, 109, 10, 249, 188, 47, 225, 101, 189, 129, 45, 180, 60, 129, 127, 33, 190, 147, 224, 187, 189, 196, 214, 193, 60, 195, 83, 120, 189, 243, 196, 83, 188, 95, 190, 30, 190, 135, 110, 13, 190, 232, 36, 205, 61, 39, 96, 198, 189, 94, 209, 10, 62, 82, 70, 6, 62, 196, 182, 39, 62, 3, 61, 130, 189, 245, 168, 111, 188, 76, 228, 2, 190, 50, 74, 23, 190, 31, 113, 2, 190, 95, 120, 217, 61, 160, 227, 113, 189, 242, 130, 230, 189, 231, 138, 37, 62, 207, 74, 225, 59, 171, 235, 107, 189, 236, 158, 139, 188, 8, 33, 149, 189, 118, 255, 43, 62, 255, 99, 220, 189, 253, 83, 9, 62, 209, 73, 153, 61, 151, 121, 200, 60, 49, 214, 243, 61, 227, 76, 101, 189, 128, 205, 155, 189, 244, 120, 28, 190, 174, 167, 127, 60, 173, 255, 165, 189, 152, 71, 13, 189, 168, 22, 243, 61, 239, 39, 44, 62, 148, 222, 75, 60, 178, 217, 46, 190, 119, 164, 41, 189, 147, 244, 107, 61, 59, 164, 35, 62, 34, 0, 169, 189, 222, 147, 163, 61, 92, 219, 17, 189, 103, 156, 154, 61, 2, 149, 167, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {89, 149, 176, 189, 227, 117, 219, 60, 119, 82, 24, 61, 153, 141, 161, 189, 110, 172, 188, 61, 37, 221, 58, 61, 185, 28, 7, 61, 183, 141, 1, 189, 114, 195, 0, 62, 52, 224, 148, 61, 57, 71, 31, 60, 84, 16, 156, 187, 113, 61, 42, 62, 61, 133, 223, 189, 211, 137, 254, 189, 185, 135, 40, 61, 239, 183, 106, 189, 145, 8, 92, 189, 83, 171, 190, 189, 73, 249, 0, 190, 15, 93, 230, 188, 237, 238, 233, 61, 3, 24, 159, 61, 96, 131, 181, 189, 192, 83, 8, 62, 62, 248, 52, 190, 113, 157, 7, 60, 168, 93, 230, 189, 112, 52, 206, 188, 50, 90, 33, 62, 27, 254, 19, 62, 139, 103, 41, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 228, 90, 59, 37, 101, 161, 189, 101, 116, 173, 189, 108, 11, 106, 189, 171, 185, 199, 189, 101, 59, 160, 60, 100, 212, 136, 189, 149, 63, 81, 188, 17, 51, 51, 189, 29, 55, 178, 61, 66, 226, 243, 189, 216, 6, 186, 60, 218, 96, 51, 62, 231, 62, 231, 61, 175, 88, 22, 190, 155, 124, 29, 62, 154, 209, 110, 60, 159, 191, 228, 188, 91, 179, 18, 190, 200, 117, 227, 189, 55, 184, 206, 61, 30, 172, 212, 61, 22, 26, 41, 62, 63, 79, 184, 61, 17, 241, 47, 61, 253, 240, 160, 188, 230, 177, 211, 60, 1, 16, 33, 62, 231, 14, 106, 60, 7, 156, 28, 61, 3, 67, 24, 190, 84, 69, 46, 190, 174, 150, 18, 62, 214, 42, 38, 61, 2, 243, 50, 190, 133, 234, 16, 190, 185, 195, 42, 190, 159, 15, 31, 190, 118, 226, 51, 189, 29, 243, 212, 61, 209, 146, 10, 189, 18, 26, 186, 189, 137, 150, 200, 61, 175, 226, 38, 188, 51, 70, 152, 189, 25, 80, 42, 62, 6, 13, 43, 62, 115, 252, 193, 189, 99, 75, 195, 61, 3, 100, 15, 61, 31, 185, 109, 61, 36, 85, 57, 188, 126, 37, 193, 61, 67, 104, 173, 61, 61, 38, 179, 60, 189, 240, 21, 190, 10, 56, 206, 61, 9, 47, 237, 189, 228, 162, 22, 190, 171, 172, 244, 187, 47, 154, 128, 60, 33, 48, 193, 61, 192, 78, 148, 61, 0, 26, 38, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {243, 64, 90, 61, 202, 145, 153, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {176, 50, 64, 62, 251, 129, 9, 62, 201, 44, 252, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {6, 220, 180, 189, 160, 98, 132, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0017/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}