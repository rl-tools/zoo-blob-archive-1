// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {91, 15, 167, 61, 226, 54, 115, 59, 225, 71, 178, 190, 222, 26, 15, 63, 132, 75, 161, 62, 103, 130, 195, 190, 9, 129, 176, 62, 60, 171, 254, 62, 102, 238, 131, 190, 224, 201, 129, 61, 9, 70, 102, 63, 66, 162, 148, 60, 55, 96, 64, 191, 111, 112, 66, 63, 63, 96, 184, 190, 22, 98, 74, 190, 237, 8, 135, 62, 79, 127, 27, 62, 196, 111, 153, 62, 99, 105, 128, 62, 144, 176, 178, 62, 255, 208, 85, 62, 40, 217, 135, 59, 254, 7, 69, 62, 126, 28, 42, 63, 139, 34, 65, 188, 207, 7, 191, 62, 241, 222, 253, 61, 128, 117, 181, 62, 25, 46, 164, 61, 247, 57, 202, 189, 50, 162, 99, 191, 186, 96, 112, 62, 76, 87, 16, 190, 67, 134, 159, 61, 164, 174, 232, 62, 179, 44, 160, 62, 116, 23, 204, 62, 107, 130, 252, 61, 219, 129, 72, 63, 94, 49, 134, 62, 147, 186, 18, 63, 98, 96, 17, 190, 109, 202, 183, 190, 225, 26, 247, 190, 36, 137, 4, 191, 187, 126, 150, 190, 252, 31, 163, 62, 195, 232, 240, 62, 187, 32, 134, 62, 32, 106, 215, 61, 61, 238, 155, 190, 190, 38, 5, 191, 125, 123, 253, 62, 184, 3, 98, 189, 175, 167, 150, 190, 103, 200, 7, 190, 60, 3, 33, 63, 191, 62, 228, 62, 144, 41, 125, 62, 147, 127, 202, 190, 9, 249, 7, 190, 178, 168, 66, 189, 82, 122, 12, 61, 183, 133, 209, 190, 98, 121, 227, 190, 247, 45, 3, 63, 82, 11, 13, 191, 205, 143, 254, 60, 152, 189, 234, 190, 180, 166, 85, 62, 104, 149, 196, 190, 24, 249, 229, 190, 156, 38, 29, 63, 112, 244, 6, 190, 119, 137, 158, 189, 210, 223, 187, 190, 108, 130, 157, 190, 219, 44, 163, 190, 225, 119, 57, 189, 99, 230, 164, 61, 169, 196, 17, 63, 39, 82, 227, 190, 33, 225, 45, 190, 56, 94, 247, 190, 30, 87, 12, 191, 105, 132, 62, 190, 240, 168, 52, 62, 35, 197, 87, 63, 90, 127, 75, 190, 97, 58, 175, 62, 74, 132, 65, 191, 174, 230, 248, 189, 83, 231, 151, 62, 169, 182, 184, 62, 130, 30, 136, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 13, 37, 191, 184, 229, 63, 61, 4, 221, 139, 190, 196, 10, 23, 63, 206, 122, 130, 190, 241, 168, 190, 61, 176, 115, 172, 190, 48, 203, 195, 187, 125, 211, 6, 62, 4, 175, 139, 190, 49, 47, 38, 62, 224, 60, 138, 62, 218, 102, 230, 62, 92, 242, 120, 190, 152, 225, 103, 62, 172, 20, 142, 190, 91, 144, 192, 62, 204, 123, 232, 190, 217, 186, 10, 63, 179, 182, 231, 62, 133, 243, 19, 63, 195, 238, 232, 61, 43, 55, 50, 63, 97, 52, 233, 189, 100, 84, 217, 189, 87, 226, 236, 61, 111, 182, 210, 62, 235, 234, 86, 62, 227, 233, 38, 63, 142, 27, 24, 63, 60, 28, 221, 62, 150, 236, 199, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 53, 95, 60, 222, 86, 63, 62, 45, 149, 155, 61, 121, 124, 242, 61, 32, 130, 245, 189, 55, 255, 26, 62, 242, 130, 88, 62, 196, 154, 71, 62, 56, 248, 189, 61, 115, 13, 146, 61, 228, 90, 32, 190, 167, 219, 161, 60, 69, 51, 134, 60, 111, 169, 204, 189, 127, 115, 209, 188, 122, 131, 6, 61, 249, 73, 244, 61, 217, 158, 45, 60, 177, 115, 95, 190, 56, 241, 148, 61, 190, 42, 83, 188, 72, 147, 206, 189, 131, 240, 144, 189, 96, 184, 9, 190, 3, 20, 69, 188, 119, 124, 224, 60, 122, 107, 250, 189, 140, 216, 25, 189, 96, 21, 86, 189, 204, 19, 106, 61, 231, 198, 169, 189, 161, 186, 119, 187, 86, 250, 81, 190, 68, 231, 212, 60, 129, 169, 18, 189, 230, 35, 113, 189, 114, 134, 135, 61, 45, 248, 194, 188, 185, 34, 42, 190, 179, 147, 34, 189, 176, 178, 130, 189, 144, 86, 30, 62, 174, 11, 3, 61, 197, 159, 173, 61, 221, 223, 215, 189, 31, 115, 235, 60, 13, 39, 53, 57, 180, 231, 150, 189, 152, 127, 67, 190, 159, 65, 254, 189, 255, 20, 182, 189, 77, 115, 30, 190, 82, 187, 157, 185, 30, 80, 148, 61, 191, 145, 204, 59, 162, 21, 250, 61, 47, 51, 49, 189, 149, 209, 163, 189, 234, 117, 49, 188, 154, 146, 169, 189, 144, 224, 213, 188, 92, 206, 14, 190, 201, 29, 70, 60, 184, 141, 112, 61, 140, 222, 90, 190, 122, 240, 79, 190, 241, 88, 247, 189, 120, 206, 162, 62, 93, 24, 129, 62, 167, 212, 59, 189, 151, 178, 21, 61, 99, 125, 225, 61, 148, 44, 132, 189, 78, 109, 250, 189, 119, 22, 38, 190, 156, 234, 69, 61, 48, 187, 102, 61, 21, 249, 9, 62, 132, 244, 91, 187, 50, 239, 150, 189, 220, 235, 78, 62, 85, 232, 19, 62, 2, 187, 153, 189, 20, 150, 234, 61, 125, 58, 61, 62, 218, 77, 104, 189, 191, 195, 176, 61, 123, 41, 56, 60, 28, 212, 208, 61, 130, 9, 13, 62, 92, 172, 79, 61, 17, 180, 45, 190, 225, 127, 237, 189, 28, 68, 132, 62, 70, 180, 249, 187, 126, 41, 89, 190, 141, 53, 5, 61, 15, 175, 90, 185, 32, 194, 248, 60, 212, 194, 69, 190, 192, 193, 210, 61, 190, 149, 17, 189, 178, 205, 57, 190, 207, 208, 137, 61, 227, 154, 193, 61, 98, 20, 53, 190, 46, 228, 239, 60, 214, 138, 248, 189, 235, 252, 211, 61, 148, 118, 205, 61, 221, 218, 7, 189, 4, 119, 255, 188, 45, 60, 168, 187, 232, 124, 132, 61, 27, 179, 26, 62, 117, 123, 101, 61, 10, 163, 161, 189, 112, 224, 18, 190, 199, 95, 84, 190, 137, 74, 47, 190, 33, 14, 7, 62, 181, 142, 22, 190, 170, 54, 93, 61, 17, 32, 255, 59, 43, 100, 175, 189, 168, 8, 200, 189, 249, 84, 137, 61, 190, 231, 32, 190, 23, 122, 84, 189, 158, 23, 27, 61, 104, 121, 21, 186, 180, 185, 119, 62, 77, 113, 217, 189, 129, 13, 218, 61, 138, 54, 10, 61, 76, 150, 60, 189, 54, 1, 42, 62, 150, 62, 86, 190, 63, 30, 92, 190, 46, 180, 50, 190, 229, 115, 109, 62, 132, 9, 137, 189, 99, 25, 77, 190, 48, 15, 33, 62, 8, 147, 98, 189, 137, 242, 49, 189, 154, 45, 218, 189, 51, 202, 46, 61, 22, 226, 150, 188, 232, 167, 224, 189, 53, 6, 181, 61, 104, 127, 222, 189, 96, 249, 63, 62, 65, 254, 181, 189, 4, 201, 6, 189, 220, 49, 208, 61, 234, 61, 228, 189, 142, 231, 101, 62, 51, 96, 163, 61, 49, 134, 154, 61, 223, 24, 104, 190, 193, 183, 169, 61, 174, 149, 178, 61, 10, 116, 0, 61, 1, 233, 6, 61, 249, 66, 219, 189, 156, 106, 113, 189, 96, 137, 10, 61, 84, 77, 5, 190, 217, 152, 211, 189, 70, 222, 75, 189, 33, 70, 173, 61, 43, 123, 157, 188, 162, 119, 165, 60, 189, 22, 90, 61, 20, 170, 7, 190, 57, 222, 69, 62, 253, 95, 244, 59, 225, 2, 108, 62, 167, 159, 154, 61, 100, 153, 84, 62, 246, 18, 92, 61, 69, 232, 8, 62, 142, 163, 30, 62, 191, 206, 205, 61, 150, 159, 52, 59, 134, 155, 191, 61, 92, 57, 4, 190, 179, 14, 60, 189, 213, 223, 235, 61, 238, 250, 20, 61, 212, 34, 172, 188, 10, 47, 202, 189, 236, 38, 95, 190, 144, 72, 4, 190, 4, 189, 55, 62, 235, 218, 41, 62, 65, 111, 237, 189, 119, 91, 243, 189, 192, 10, 89, 61, 240, 38, 104, 62, 214, 113, 103, 190, 59, 66, 209, 189, 235, 119, 144, 61, 53, 227, 150, 61, 148, 168, 210, 189, 103, 101, 198, 189, 25, 42, 210, 189, 48, 145, 222, 189, 114, 6, 53, 62, 10, 45, 17, 190, 12, 3, 250, 188, 152, 132, 71, 62, 168, 60, 172, 61, 252, 47, 160, 189, 79, 215, 65, 188, 46, 105, 188, 62, 31, 53, 214, 189, 23, 249, 119, 62, 239, 131, 56, 61, 188, 144, 144, 61, 158, 203, 120, 189, 15, 193, 39, 190, 106, 209, 163, 189, 57, 85, 50, 62, 71, 105, 178, 189, 2, 93, 62, 62, 15, 227, 60, 61, 202, 42, 14, 62, 58, 28, 132, 60, 110, 208, 5, 62, 120, 66, 255, 188, 85, 224, 166, 188, 229, 12, 31, 190, 116, 108, 83, 190, 23, 66, 5, 190, 22, 49, 17, 188, 205, 66, 167, 186, 65, 191, 253, 61, 222, 21, 47, 60, 123, 24, 233, 188, 169, 121, 179, 61, 78, 16, 195, 188, 107, 179, 5, 189, 146, 84, 221, 61, 219, 112, 13, 188, 228, 50, 89, 190, 56, 215, 7, 61, 38, 100, 80, 189, 254, 240, 42, 190, 100, 4, 31, 62, 172, 6, 227, 60, 239, 162, 15, 62, 142, 127, 146, 189, 102, 220, 41, 190, 131, 15, 219, 188, 61, 23, 114, 190, 169, 151, 87, 189, 105, 120, 28, 190, 7, 5, 90, 61, 12, 34, 80, 62, 190, 66, 24, 190, 68, 180, 40, 62, 248, 185, 82, 62, 176, 147, 146, 187, 108, 223, 143, 61, 102, 250, 237, 60, 53, 59, 167, 61, 93, 63, 89, 189, 207, 203, 224, 61, 115, 43, 182, 61, 15, 153, 75, 189, 72, 120, 224, 61, 82, 242, 170, 189, 180, 11, 61, 62, 123, 109, 254, 60, 89, 158, 94, 62, 100, 191, 36, 62, 15, 180, 58, 62, 110, 185, 188, 188, 159, 157, 154, 62, 206, 122, 50, 190, 107, 176, 23, 61, 72, 42, 56, 61, 219, 64, 57, 61, 176, 11, 219, 186, 186, 209, 22, 190, 137, 43, 85, 190, 240, 174, 130, 190, 121, 202, 61, 190, 30, 178, 241, 189, 93, 15, 195, 189, 133, 162, 249, 190, 214, 243, 41, 62, 30, 102, 170, 190, 242, 128, 12, 61, 171, 19, 183, 59, 2, 136, 30, 190, 94, 64, 16, 62, 148, 232, 12, 61, 61, 219, 189, 61, 86, 164, 170, 189, 69, 59, 7, 189, 8, 113, 230, 188, 189, 45, 14, 190, 190, 136, 0, 60, 75, 32, 39, 62, 199, 246, 243, 189, 194, 157, 3, 62, 98, 239, 19, 60, 142, 121, 191, 61, 24, 9, 171, 190, 145, 94, 84, 189, 84, 140, 64, 188, 59, 19, 110, 62, 190, 165, 102, 61, 22, 251, 228, 61, 198, 245, 231, 190, 21, 20, 148, 62, 69, 60, 102, 189, 92, 233, 71, 61, 116, 74, 5, 189, 190, 94, 30, 190, 148, 185, 201, 189, 125, 207, 129, 61, 79, 237, 57, 188, 135, 72, 15, 190, 164, 103, 161, 61, 151, 115, 26, 62, 121, 222, 82, 190, 116, 212, 169, 61, 235, 162, 51, 190, 52, 233, 127, 61, 167, 65, 13, 190, 54, 119, 66, 190, 9, 147, 187, 61, 169, 189, 63, 61, 101, 151, 123, 187, 64, 16, 8, 190, 101, 116, 108, 61, 95, 1, 90, 190, 177, 193, 44, 190, 246, 38, 72, 189, 94, 165, 24, 60, 117, 5, 90, 189, 236, 69, 58, 61, 70, 85, 197, 61, 18, 146, 108, 61, 81, 162, 133, 189, 7, 99, 216, 189, 218, 188, 89, 61, 227, 246, 234, 61, 187, 214, 130, 190, 52, 14, 211, 189, 14, 249, 143, 61, 112, 31, 179, 61, 68, 9, 128, 190, 75, 202, 35, 62, 104, 83, 70, 190, 255, 101, 149, 61, 199, 86, 21, 190, 228, 79, 43, 61, 209, 220, 155, 189, 196, 194, 192, 189, 141, 197, 102, 62, 201, 60, 208, 61, 244, 129, 39, 190, 110, 85, 33, 62, 227, 193, 110, 62, 250, 144, 9, 62, 154, 47, 21, 190, 218, 162, 221, 189, 119, 182, 120, 60, 101, 134, 99, 190, 221, 199, 68, 61, 240, 248, 99, 190, 17, 52, 169, 188, 135, 240, 144, 61, 196, 165, 33, 62, 175, 68, 113, 62, 134, 62, 62, 61, 69, 68, 145, 189, 97, 106, 38, 62, 54, 87, 251, 189, 71, 63, 182, 187, 14, 245, 14, 186, 210, 129, 34, 62, 111, 59, 154, 190, 109, 64, 22, 190, 60, 253, 82, 61, 7, 99, 162, 190, 154, 198, 152, 61, 100, 115, 176, 61, 47, 42, 196, 189, 52, 15, 172, 62, 127, 105, 29, 189, 114, 174, 185, 189, 157, 132, 108, 190, 226, 244, 255, 61, 51, 32, 140, 61, 48, 43, 43, 62, 170, 140, 39, 189, 78, 129, 127, 61, 73, 5, 225, 59, 230, 98, 40, 62, 33, 64, 255, 61, 7, 230, 182, 61, 247, 86, 178, 59, 213, 15, 26, 190, 23, 102, 18, 190, 3, 65, 22, 61, 215, 208, 111, 188, 84, 107, 8, 62, 73, 221, 158, 61, 196, 64, 64, 62, 146, 104, 183, 61, 27, 43, 195, 189, 77, 93, 28, 190, 23, 156, 84, 188, 202, 40, 114, 61, 35, 58, 182, 186, 221, 19, 197, 189, 140, 64, 55, 62, 237, 124, 41, 62, 255, 34, 140, 58, 58, 26, 212, 61, 250, 160, 99, 190, 221, 176, 77, 60, 182, 211, 169, 60, 102, 200, 46, 62, 219, 207, 168, 61, 220, 183, 237, 61, 54, 180, 157, 61, 165, 255, 167, 189, 217, 22, 33, 190, 188, 218, 26, 189, 51, 24, 81, 61, 94, 31, 41, 190, 112, 244, 148, 61, 221, 26, 34, 62, 53, 6, 160, 60, 9, 14, 90, 189, 93, 212, 162, 189, 136, 94, 231, 189, 122, 182, 124, 189, 196, 176, 255, 189, 185, 101, 131, 190, 243, 140, 241, 61, 93, 36, 201, 189, 41, 128, 233, 189, 11, 109, 242, 189, 89, 37, 152, 61, 86, 201, 48, 190, 226, 27, 58, 190, 121, 9, 2, 62, 227, 9, 237, 188, 70, 179, 116, 189, 66, 173, 31, 61, 34, 118, 152, 61, 103, 145, 122, 61, 227, 31, 86, 61, 151, 235, 14, 190, 180, 10, 153, 189, 138, 40, 101, 61, 226, 36, 239, 61, 53, 87, 125, 61, 83, 248, 159, 187, 30, 219, 160, 186, 150, 56, 20, 61, 233, 190, 248, 61, 176, 93, 211, 60, 163, 185, 206, 61, 240, 129, 138, 61, 85, 171, 49, 60, 64, 95, 29, 190, 147, 198, 174, 61, 170, 150, 54, 189, 17, 236, 49, 189, 174, 21, 241, 188, 177, 179, 71, 190, 234, 20, 125, 190, 42, 71, 179, 187, 70, 132, 20, 61, 148, 14, 60, 189, 70, 202, 30, 190, 103, 80, 21, 62, 183, 191, 88, 190, 45, 5, 44, 61, 110, 27, 1, 61, 5, 247, 154, 189, 61, 2, 166, 62, 247, 19, 3, 188, 119, 94, 81, 189, 226, 112, 194, 189, 132, 139, 247, 188, 215, 201, 6, 62, 251, 33, 56, 62, 14, 183, 14, 61, 29, 130, 13, 188, 148, 125, 98, 61, 118, 162, 15, 60, 74, 159, 138, 186, 43, 7, 76, 62, 245, 204, 115, 190, 63, 160, 182, 189, 219, 79, 91, 190, 217, 218, 20, 62, 15, 180, 95, 62, 76, 52, 202, 61, 24, 117, 92, 190, 32, 223, 162, 62, 244, 137, 76, 61, 16, 181, 76, 188, 125, 22, 229, 189, 219, 143, 73, 61, 156, 42, 21, 190, 11, 32, 146, 190, 63, 116, 79, 60, 60, 216, 129, 189, 33, 203, 238, 189, 154, 218, 220, 189, 12, 221, 25, 190, 236, 243, 70, 62, 15, 182, 48, 61, 41, 91, 134, 189, 229, 210, 8, 190, 142, 115, 224, 61, 192, 192, 136, 62, 197, 100, 184, 60, 75, 149, 68, 190, 104, 238, 224, 188, 178, 89, 4, 190, 20, 149, 124, 61, 65, 127, 148, 61, 211, 123, 11, 62, 1, 203, 149, 189, 233, 124, 160, 189, 109, 108, 19, 61, 237, 250, 20, 62, 6, 76, 22, 61, 118, 20, 15, 62, 222, 187, 105, 189, 145, 21, 131, 62, 99, 251, 25, 190, 236, 21, 190, 61, 110, 215, 119, 61, 77, 95, 130, 189, 207, 15, 201, 189, 64, 115, 33, 62, 80, 239, 147, 61, 102, 193, 140, 60, 196, 228, 101, 190, 44, 90, 219, 59, 157, 136, 69, 61, 26, 230, 213, 60, 147, 185, 76, 190, 61, 30, 144, 188, 30, 248, 13, 190, 104, 41, 208, 58, 173, 6, 213, 61, 249, 182, 20, 190, 73, 103, 66, 190, 144, 159, 36, 190, 193, 128, 31, 190, 206, 147, 11, 62, 220, 218, 151, 189, 251, 12, 96, 189, 32, 157, 10, 61, 73, 114, 70, 60, 118, 147, 225, 61, 106, 224, 48, 62, 248, 88, 66, 60, 114, 53, 149, 61, 22, 99, 214, 61, 73, 94, 152, 188, 56, 172, 135, 61, 237, 248, 96, 59, 198, 127, 119, 186, 227, 32, 19, 189, 4, 213, 24, 62, 80, 15, 50, 62, 188, 232, 137, 61, 232, 226, 26, 61, 233, 204, 23, 189, 199, 204, 26, 62, 1, 245, 107, 61, 67, 18, 61, 191, 60, 28, 106, 186, 249, 7, 182, 61, 7, 111, 245, 61, 212, 161, 165, 189, 235, 42, 111, 190, 211, 148, 183, 61, 253, 155, 210, 190, 98, 96, 163, 61, 141, 84, 161, 189, 112, 166, 76, 62, 70, 217, 247, 188, 240, 251, 74, 190, 208, 5, 135, 61, 118, 180, 0, 62, 200, 152, 61, 188, 4, 0, 118, 62, 154, 158, 146, 190, 51, 249, 53, 62, 208, 115, 135, 62, 194, 151, 81, 190, 204, 13, 106, 190, 91, 203, 219, 190, 19, 101, 103, 190, 32, 165, 158, 189, 94, 145, 166, 62, 243, 121, 100, 62, 128, 44, 55, 62, 252, 228, 38, 62, 190, 92, 207, 61, 41, 128, 94, 62, 83, 118, 205, 189, 253, 6, 131, 190, 205, 124, 29, 61, 254, 45, 51, 60, 170, 119, 140, 62, 240, 221, 114, 190, 205, 195, 45, 190, 186, 7, 104, 62, 85, 57, 181, 188, 1, 14, 23, 189, 11, 35, 222, 61, 151, 55, 50, 62, 37, 114, 9, 189, 127, 18, 46, 61, 129, 76, 139, 61, 183, 218, 229, 62, 81, 54, 187, 188, 21, 231, 232, 188, 133, 33, 72, 189, 133, 16, 123, 187, 218, 68, 177, 62, 181, 86, 24, 60, 91, 237, 201, 188, 31, 130, 145, 61, 160, 68, 55, 59, 50, 86, 41, 190, 225, 51, 196, 189, 202, 96, 170, 190, 22, 19, 201, 61, 204, 91, 126, 190, 91, 139, 182, 61, 244, 1, 123, 190, 7, 142, 50, 188, 102, 120, 148, 62, 234, 59, 207, 61, 211, 240, 0, 190, 157, 62, 128, 190, 71, 138, 205, 61, 180, 7, 119, 62, 11, 159, 201, 188, 6, 124, 250, 189, 217, 225, 143, 60, 144, 147, 77, 189, 32, 38, 37, 62, 109, 61, 238, 188, 79, 222, 230, 61, 178, 44, 21, 190, 188, 209, 164, 189, 228, 178, 61, 190, 157, 87, 178, 60, 60, 22, 0, 62, 249, 174, 31, 62, 127, 140, 17, 189, 179, 214, 246, 61, 96, 9, 109, 61, 175, 83, 181, 61, 227, 208, 33, 62, 130, 2, 88, 62, 10, 7, 8, 190, 119, 95, 69, 61, 147, 187, 155, 189, 40, 250, 47, 190, 214, 44, 162, 60, 66, 104, 48, 61, 75, 108, 26, 62, 31, 110, 9, 62, 166, 207, 139, 189, 51, 233, 109, 61, 247, 151, 15, 189, 41, 10, 189, 189, 123, 123, 83, 62, 15, 239, 198, 61, 18, 236, 15, 189, 156, 8, 46, 189, 160, 236, 162, 189, 209, 194, 218, 61, 211, 213, 252, 61, 182, 206, 35, 62, 13, 2, 87, 189, 16, 143, 161, 190, 61, 12, 231, 61, 39, 149, 152, 189, 138, 24, 169, 60, 212, 84, 53, 61, 210, 217, 166, 187, 101, 218, 252, 61, 152, 13, 232, 60, 95, 32, 23, 189, 187, 242, 84, 62, 210, 190, 221, 61, 232, 104, 153, 190, 250, 7, 24, 61, 202, 152, 13, 60, 210, 232, 14, 189, 153, 63, 247, 187, 99, 15, 95, 61, 250, 208, 238, 61, 190, 134, 126, 62, 193, 209, 35, 62, 243, 187, 102, 189, 218, 164, 135, 190, 28, 185, 163, 189, 110, 15, 22, 187, 212, 34, 80, 61, 40, 91, 216, 188, 211, 59, 134, 60, 36, 182, 217, 189, 198, 54, 12, 188, 179, 72, 29, 62, 215, 246, 53, 62, 225, 53, 240, 60, 172, 123, 46, 190, 21, 22, 20, 62, 60, 89, 31, 62, 178, 50, 146, 62, 40, 124, 163, 61, 181, 185, 110, 190, 177, 171, 179, 62, 159, 5, 27, 61, 235, 56, 154, 189, 5, 25, 182, 61, 16, 169, 158, 189, 133, 60, 171, 61, 183, 208, 236, 189, 126, 248, 68, 61, 249, 254, 140, 58, 172, 69, 70, 61, 185, 162, 28, 61, 214, 249, 41, 189, 188, 212, 211, 61, 15, 78, 179, 188, 172, 8, 49, 190, 5, 173, 46, 190, 238, 116, 178, 187, 189, 159, 28, 61, 102, 220, 182, 189, 137, 200, 51, 190, 155, 216, 47, 189, 82, 86, 110, 61, 143, 241, 8, 61, 90, 138, 246, 61, 78, 154, 16, 190, 101, 6, 217, 60, 53, 213, 7, 62, 215, 147, 146, 189, 36, 20, 217, 189, 246, 52, 184, 61, 251, 181, 189, 189, 193, 247, 50, 190, 226, 245, 188, 189, 18, 149, 222, 188, 113, 212, 42, 190, 207, 113, 250, 61, 84, 251, 38, 62, 231, 93, 22, 189, 243, 47, 150, 60, 128, 121, 251, 189, 171, 29, 166, 190, 125, 164, 227, 189, 32, 131, 24, 190, 177, 34, 38, 190, 213, 138, 198, 62, 192, 138, 148, 54, 149, 13, 8, 62, 200, 49, 195, 190, 70, 244, 36, 190, 119, 219, 48, 62, 197, 202, 155, 61, 76, 125, 143, 62, 198, 234, 11, 189, 123, 44, 74, 61, 137, 134, 52, 189, 67, 253, 21, 62, 251, 35, 25, 62, 76, 59, 110, 190, 58, 219, 132, 190, 237, 149, 210, 189, 26, 172, 150, 61, 246, 246, 93, 62, 227, 190, 93, 61, 53, 41, 188, 187, 216, 48, 132, 61, 89, 26, 56, 189, 36, 235, 66, 190, 194, 20, 151, 61, 208, 162, 142, 190, 135, 33, 100, 62, 201, 96, 203, 61, 220, 203, 18, 188, 56, 66, 148, 189, 147, 111, 23, 62, 47, 100, 91, 62, 166, 44, 119, 190, 41, 40, 114, 189, 192, 240, 194, 61, 207, 137, 74, 62, 135, 118, 83, 189, 251, 6, 88, 61, 23, 73, 68, 189, 253, 95, 144, 61, 199, 167, 48, 189, 239, 40, 239, 189, 120, 113, 97, 62, 95, 210, 184, 61, 162, 184, 44, 190, 232, 52, 26, 190, 53, 72, 65, 62, 47, 109, 27, 60, 229, 22, 144, 60, 214, 222, 1, 189, 231, 225, 199, 188, 110, 0, 44, 62, 204, 38, 103, 62, 167, 92, 232, 188, 190, 162, 226, 61, 207, 200, 45, 62, 233, 225, 7, 190, 236, 23, 13, 190, 189, 235, 170, 188, 213, 49, 33, 190, 131, 26, 213, 189, 106, 74, 12, 62, 128, 144, 139, 189, 161, 46, 55, 188, 104, 200, 215, 61, 42, 251, 34, 189, 44, 158, 204, 61, 45, 24, 177, 189, 118, 14, 193, 61, 71, 32, 168, 61, 136, 237, 2, 190, 211, 246, 127, 189, 90, 30, 196, 61, 33, 61, 111, 188, 43, 142, 205, 61, 196, 175, 90, 190, 17, 12, 251, 61, 169, 19, 103, 190, 138, 47, 18, 190, 232, 139, 28, 190, 55, 208, 34, 190, 243, 231, 129, 60, 210, 235, 163, 190, 168, 139, 39, 190, 162, 7, 73, 190, 47, 39, 139, 190, 191, 145, 138, 189, 88, 119, 204, 189, 189, 137, 45, 188, 42, 116, 180, 189, 173, 192, 135, 189, 102, 232, 201, 60, 14, 221, 18, 62, 61, 242, 51, 189, 115, 81, 24, 190, 67, 49, 16, 189, 29, 215, 41, 190, 113, 39, 41, 62, 66, 235, 234, 189, 154, 83, 23, 61, 47, 34, 253, 189, 154, 26, 199, 61, 228, 24, 141, 61, 197, 112, 246, 60, 66, 35, 183, 188, 180, 70, 133, 61, 195, 97, 182, 189, 66, 8, 38, 190, 205, 25, 167, 61, 135, 125, 31, 189, 15, 100, 176, 60, 11, 80, 0, 61, 31, 237, 228, 61, 185, 136, 57, 190, 228, 20, 246, 188, 70, 70, 26, 190, 142, 238, 213, 187, 113, 241, 140, 189, 142, 168, 223, 189, 57, 207, 8, 62, 46, 185, 94, 190, 96, 74, 48, 190, 252, 164, 24, 62, 129, 243, 187, 190, 188, 45, 208, 61, 124, 53, 4, 190, 134, 58, 108, 186, 37, 29, 67, 189, 217, 222, 34, 62, 67, 182, 153, 60, 221, 78, 97, 62, 0, 8, 153, 189, 15, 144, 202, 189, 205, 129, 134, 190, 51, 53, 224, 60, 234, 13, 46, 190, 52, 57, 92, 62, 149, 66, 22, 62, 223, 123, 164, 189, 150, 115, 94, 62, 105, 19, 12, 190, 111, 250, 76, 188, 96, 105, 185, 190, 90, 235, 193, 189, 140, 14, 64, 189, 223, 71, 107, 60, 236, 35, 246, 60, 181, 238, 24, 62, 95, 255, 152, 190, 200, 246, 125, 60, 188, 2, 108, 190, 83, 129, 193, 61, 104, 13, 66, 189, 38, 162, 0, 190, 172, 171, 97, 189, 20, 207, 155, 190, 205, 231, 55, 190, 93, 75, 158, 190, 255, 170, 74, 190, 116, 63, 33, 190, 42, 198, 32, 62, 0, 244, 204, 62, 47, 114, 2, 189, 115, 250, 36, 61, 201, 129, 51, 190, 53, 117, 98, 190, 151, 253, 201, 61, 104, 140, 205, 189, 168, 6, 241, 189, 163, 241, 217, 61, 48, 226, 118, 190, 213, 169, 116, 61, 143, 237, 217, 189, 184, 167, 142, 62, 125, 31, 242, 189, 112, 65, 162, 190, 85, 115, 11, 62, 115, 25, 233, 61, 8, 199, 131, 62, 91, 168, 17, 62, 110, 119, 180, 188, 32, 101, 50, 62, 164, 197, 13, 61, 233, 104, 200, 61, 170, 79, 135, 61, 127, 179, 163, 189, 217, 187, 11, 61, 41, 119, 250, 61, 106, 197, 36, 190, 159, 111, 232, 61, 205, 110, 162, 61, 168, 17, 136, 61, 67, 125, 139, 61, 12, 52, 26, 190, 28, 171, 123, 189, 153, 248, 56, 189, 86, 199, 134, 189, 44, 125, 91, 60, 97, 137, 42, 190, 162, 4, 226, 189, 129, 20, 151, 60, 162, 210, 148, 189, 42, 145, 232, 188, 225, 152, 45, 190, 210, 199, 19, 190, 143, 146, 164, 61, 113, 11, 204, 189, 92, 10, 255, 61, 83, 56, 245, 61, 218, 241, 23, 62, 190, 47, 130, 189, 110, 222, 234, 188, 28, 120, 8, 190, 130, 222, 35, 190, 25, 60, 250, 189, 165, 35, 227, 58, 120, 136, 54, 190, 191, 158, 104, 190, 218, 160, 184, 62, 219, 229, 194, 61, 22, 4, 230, 188, 236, 101, 127, 61, 66, 24, 97, 189, 39, 118, 112, 62, 251, 12, 249, 189, 143, 101, 149, 189, 10, 2, 120, 61, 218, 61, 244, 61, 204, 198, 122, 62, 49, 97, 154, 189, 193, 110, 29, 190, 253, 219, 86, 189, 123, 24, 150, 188, 51, 251, 186, 189, 192, 208, 15, 61, 13, 29, 246, 61, 19, 67, 218, 61, 129, 203, 119, 189, 234, 150, 17, 190, 98, 49, 87, 62, 227, 11, 148, 187, 102, 78, 102, 62, 233, 164, 91, 190, 201, 252, 56, 61, 117, 20, 230, 61, 190, 171, 238, 189, 154, 88, 85, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 77, 10, 190, 32, 49, 71, 60, 195, 127, 7, 62, 182, 126, 222, 189, 153, 105, 72, 62, 202, 91, 6, 62, 128, 53, 228, 61, 13, 179, 97, 189, 25, 246, 100, 62, 141, 185, 41, 62, 118, 34, 66, 189, 58, 74, 13, 187, 100, 146, 59, 62, 183, 134, 15, 190, 41, 225, 50, 190, 253, 202, 151, 61, 172, 45, 74, 189, 157, 7, 214, 189, 63, 194, 233, 60, 118, 0, 30, 61, 84, 211, 233, 188, 22, 110, 3, 62, 35, 158, 219, 61, 96, 131, 181, 189, 176, 58, 67, 62, 195, 121, 191, 189, 77, 5, 54, 189, 139, 63, 15, 190, 169, 227, 247, 60, 177, 87, 54, 62, 107, 240, 4, 62, 128, 196, 87, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 233, 128, 189, 73, 121, 106, 189, 216, 60, 82, 190, 19, 245, 88, 189, 29, 242, 200, 189, 137, 181, 6, 189, 2, 222, 33, 190, 30, 92, 127, 189, 38, 192, 172, 189, 115, 236, 154, 62, 86, 31, 209, 189, 1, 252, 240, 60, 111, 239, 62, 62, 176, 151, 41, 62, 161, 75, 195, 189, 250, 5, 102, 62, 126, 220, 135, 61, 170, 6, 209, 188, 104, 127, 170, 190, 51, 90, 134, 190, 207, 183, 65, 62, 20, 208, 65, 62, 254, 68, 142, 62, 63, 79, 184, 61, 100, 225, 98, 62, 20, 246, 202, 189, 155, 151, 129, 61, 119, 250, 9, 62, 27, 6, 26, 62, 121, 227, 118, 62, 79, 17, 22, 190, 181, 255, 142, 190, 152, 29, 30, 62, 125, 208, 228, 60, 94, 80, 86, 190, 62, 184, 233, 189, 22, 240, 146, 190, 193, 94, 81, 190, 238, 129, 46, 189, 220, 187, 132, 61, 230, 203, 197, 189, 212, 22, 217, 189, 90, 116, 209, 61, 11, 160, 239, 189, 140, 164, 7, 190, 132, 145, 66, 62, 174, 175, 24, 62, 116, 10, 82, 190, 99, 142, 229, 61, 83, 68, 195, 59, 178, 130, 137, 61, 146, 72, 83, 61, 118, 177, 5, 62, 153, 206, 132, 60, 94, 235, 24, 61, 189, 240, 21, 190, 74, 104, 34, 190, 2, 33, 232, 189, 120, 63, 214, 189, 51, 214, 68, 188, 230, 93, 151, 189, 11, 126, 6, 62, 167, 189, 112, 61, 187, 119, 48, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 3, 175, 186, 59, 218, 39, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {55, 109, 147, 191, 206, 176, 228, 61, 232, 33, 6, 64};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {137, 27, 229, 62, 220, 196, 63, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0017/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}