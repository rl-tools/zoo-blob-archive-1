// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {181, 132, 74, 63, 153, 148, 140, 190, 181, 111, 217, 190, 189, 107, 12, 63, 125, 112, 182, 62, 227, 77, 10, 191, 215, 182, 26, 62, 18, 74, 101, 63, 3, 57, 16, 191, 176, 110, 246, 61, 122, 33, 132, 63, 168, 121, 76, 190, 13, 102, 102, 191, 37, 52, 146, 189, 161, 44, 31, 191, 20, 253, 2, 191, 111, 153, 179, 63, 15, 3, 75, 62, 36, 22, 9, 63, 112, 225, 60, 63, 77, 33, 167, 62, 254, 50, 82, 62, 101, 105, 202, 61, 87, 255, 47, 62, 67, 236, 2, 63, 160, 192, 204, 59, 5, 158, 199, 62, 146, 135, 252, 62, 139, 162, 111, 63, 6, 165, 85, 62, 51, 131, 222, 61, 95, 201, 87, 191, 248, 202, 228, 62, 5, 109, 231, 190, 62, 121, 152, 63, 201, 106, 137, 62, 57, 117, 81, 61, 174, 42, 131, 63, 191, 108, 61, 62, 166, 107, 73, 63, 75, 46, 48, 63, 80, 113, 6, 63, 218, 86, 139, 190, 141, 72, 234, 191, 133, 25, 7, 191, 181, 132, 203, 190, 85, 30, 191, 62, 104, 121, 213, 62, 56, 208, 65, 63, 182, 91, 31, 63, 248, 251, 47, 62, 7, 95, 137, 62, 150, 5, 99, 63, 76, 202, 35, 63, 155, 41, 229, 190, 21, 26, 252, 190, 201, 246, 223, 189, 217, 119, 75, 63, 213, 252, 24, 63, 210, 93, 136, 62, 198, 55, 57, 191, 240, 181, 79, 190, 25, 141, 7, 189, 237, 106, 216, 62, 54, 61, 98, 191, 81, 179, 242, 190, 89, 246, 0, 63, 15, 217, 136, 191, 147, 250, 147, 61, 92, 191, 2, 191, 105, 215, 74, 191, 252, 6, 37, 191, 178, 120, 91, 191, 60, 140, 40, 188, 38, 130, 134, 190, 44, 248, 39, 191, 169, 59, 197, 191, 24, 74, 174, 190, 49, 29, 143, 191, 169, 181, 92, 62, 50, 151, 197, 60, 219, 103, 70, 63, 249, 93, 152, 191, 166, 136, 170, 190, 140, 53, 46, 191, 120, 230, 69, 191, 113, 155, 57, 190, 85, 17, 196, 62, 125, 14, 107, 63, 209, 149, 150, 190, 154, 204, 18, 63, 144, 141, 161, 191, 137, 32, 114, 190, 33, 153, 145, 189, 149, 165, 49, 63, 72, 244, 170, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {132, 132, 91, 191, 127, 33, 34, 190, 23, 67, 8, 190, 122, 239, 32, 63, 40, 226, 24, 191, 145, 222, 70, 188, 27, 29, 227, 190, 202, 174, 96, 60, 23, 114, 166, 62, 126, 31, 94, 190, 52, 250, 12, 60, 63, 102, 87, 61, 63, 122, 131, 62, 136, 6, 71, 190, 212, 71, 137, 189, 191, 110, 187, 189, 194, 98, 57, 62, 151, 122, 225, 190, 123, 16, 215, 62, 240, 44, 139, 62, 27, 217, 37, 63, 84, 147, 169, 189, 183, 8, 251, 62, 41, 245, 35, 61, 91, 113, 136, 190, 34, 213, 54, 62, 140, 3, 169, 62, 193, 23, 75, 188, 195, 195, 36, 63, 72, 136, 219, 62, 51, 111, 94, 62, 25, 92, 6, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {134, 119, 246, 190, 213, 41, 137, 62, 68, 128, 27, 63, 54, 233, 168, 62, 254, 16, 247, 188, 96, 109, 76, 190, 233, 157, 227, 62, 37, 59, 136, 62, 13, 244, 70, 62, 181, 95, 62, 62, 145, 99, 149, 61, 10, 18, 163, 189, 108, 217, 56, 62, 156, 205, 151, 61, 116, 27, 39, 191, 161, 58, 13, 61, 134, 216, 170, 62, 154, 254, 82, 61, 151, 29, 17, 191, 127, 165, 103, 62, 100, 204, 194, 190, 239, 85, 247, 190, 84, 248, 170, 189, 88, 167, 61, 190, 94, 177, 26, 62, 77, 4, 127, 191, 80, 170, 36, 191, 153, 226, 250, 190, 246, 221, 116, 191, 143, 221, 116, 62, 253, 47, 2, 191, 241, 117, 213, 62, 206, 46, 82, 190, 225, 230, 197, 60, 89, 92, 35, 189, 227, 134, 117, 189, 82, 208, 119, 61, 201, 202, 202, 188, 185, 34, 42, 190, 179, 147, 34, 189, 176, 178, 130, 189, 144, 86, 30, 62, 174, 11, 3, 61, 197, 159, 173, 61, 221, 223, 215, 189, 31, 115, 235, 60, 113, 57, 96, 187, 180, 231, 150, 189, 152, 127, 67, 190, 159, 65, 254, 189, 216, 233, 188, 189, 77, 115, 30, 190, 234, 229, 164, 187, 200, 243, 144, 61, 228, 83, 163, 59, 101, 51, 236, 61, 236, 110, 78, 189, 237, 33, 170, 189, 241, 248, 151, 188, 209, 108, 171, 189, 150, 129, 240, 188, 165, 37, 18, 190, 22, 190, 29, 60, 174, 136, 97, 61, 124, 176, 31, 191, 210, 95, 38, 190, 60, 157, 158, 61, 83, 14, 249, 62, 30, 157, 75, 62, 254, 56, 15, 190, 133, 209, 122, 61, 61, 168, 168, 61, 185, 248, 242, 187, 21, 209, 181, 190, 7, 40, 194, 189, 95, 92, 170, 189, 217, 166, 35, 62, 219, 1, 18, 62, 220, 187, 194, 190, 85, 251, 133, 189, 22, 152, 173, 62, 138, 245, 1, 62, 26, 108, 198, 60, 66, 171, 75, 62, 191, 244, 140, 62, 252, 138, 163, 190, 250, 33, 38, 62, 183, 201, 219, 189, 148, 204, 99, 61, 93, 184, 35, 190, 155, 82, 32, 189, 206, 31, 253, 190, 228, 65, 12, 190, 246, 146, 178, 62, 211, 53, 105, 190, 42, 227, 164, 189, 141, 53, 5, 61, 15, 175, 90, 185, 32, 194, 248, 60, 212, 194, 69, 190, 192, 193, 210, 61, 227, 11, 21, 189, 227, 40, 68, 190, 194, 183, 109, 61, 207, 106, 167, 61, 157, 49, 53, 190, 247, 251, 123, 59, 203, 231, 3, 190, 6, 144, 196, 61, 212, 101, 170, 61, 221, 218, 7, 189, 97, 155, 42, 189, 101, 147, 104, 188, 95, 119, 69, 61, 185, 59, 23, 62, 51, 133, 65, 61, 255, 66, 167, 189, 112, 224, 18, 190, 229, 117, 103, 190, 137, 74, 47, 190, 33, 14, 7, 62, 181, 142, 22, 190, 152, 125, 70, 61, 38, 96, 157, 59, 196, 37, 179, 189, 168, 8, 200, 189, 136, 72, 122, 61, 190, 231, 32, 190, 70, 116, 149, 189, 116, 87, 82, 62, 31, 22, 187, 61, 88, 252, 40, 62, 81, 36, 109, 190, 117, 78, 53, 191, 213, 88, 125, 190, 223, 142, 239, 190, 120, 121, 176, 189, 76, 9, 84, 191, 71, 33, 90, 191, 247, 122, 49, 191, 60, 135, 52, 62, 70, 176, 210, 190, 36, 192, 205, 190, 149, 208, 6, 62, 120, 193, 131, 188, 40, 191, 189, 189, 141, 35, 179, 190, 236, 147, 240, 60, 155, 121, 215, 190, 139, 253, 152, 189, 23, 150, 69, 189, 171, 48, 43, 190, 88, 160, 159, 61, 219, 40, 91, 191, 88, 97, 130, 190, 87, 73, 184, 61, 217, 243, 9, 191, 80, 68, 133, 62, 137, 238, 86, 189, 65, 203, 237, 61, 89, 72, 229, 190, 222, 238, 9, 60, 122, 6, 166, 61, 118, 204, 215, 61, 226, 212, 234, 59, 16, 27, 228, 189, 64, 134, 19, 189, 31, 236, 49, 61, 229, 186, 156, 189, 103, 8, 192, 190, 125, 67, 233, 189, 53, 189, 139, 187, 38, 224, 135, 61, 251, 51, 153, 61, 241, 46, 136, 60, 65, 33, 47, 190, 201, 230, 180, 62, 116, 91, 129, 186, 127, 184, 179, 62, 136, 39, 100, 62, 155, 141, 182, 62, 44, 131, 34, 189, 135, 190, 253, 61, 81, 254, 53, 62, 57, 182, 134, 61, 41, 38, 123, 61, 133, 9, 21, 62, 69, 30, 146, 190, 168, 197, 161, 61, 167, 141, 28, 61, 119, 88, 152, 189, 238, 87, 182, 59, 171, 240, 79, 190, 165, 172, 219, 190, 114, 58, 44, 189, 60, 50, 154, 189, 180, 30, 75, 190, 167, 75, 17, 62, 145, 105, 5, 189, 60, 105, 6, 190, 154, 200, 225, 187, 196, 42, 16, 190, 192, 143, 162, 190, 197, 132, 68, 62, 203, 67, 84, 189, 160, 91, 234, 189, 255, 229, 202, 190, 163, 36, 35, 61, 47, 228, 81, 191, 213, 96, 27, 62, 64, 160, 3, 62, 237, 6, 164, 190, 81, 99, 219, 62, 133, 240, 198, 190, 181, 188, 70, 191, 98, 56, 244, 190, 11, 72, 183, 62, 237, 7, 74, 190, 27, 58, 8, 63, 176, 44, 163, 190, 95, 86, 178, 62, 237, 157, 126, 190, 89, 22, 252, 190, 221, 214, 149, 190, 73, 55, 206, 188, 238, 185, 75, 190, 236, 254, 2, 62, 155, 247, 30, 191, 192, 13, 93, 62, 153, 119, 86, 191, 117, 248, 187, 62, 56, 205, 228, 190, 235, 60, 146, 61, 204, 234, 178, 190, 17, 211, 192, 190, 170, 70, 6, 191, 192, 223, 5, 191, 249, 106, 213, 189, 70, 95, 215, 62, 220, 236, 66, 190, 80, 28, 174, 62, 149, 55, 2, 191, 234, 157, 151, 61, 211, 2, 73, 61, 129, 114, 210, 61, 42, 229, 66, 62, 59, 91, 86, 61, 192, 154, 137, 61, 230, 246, 207, 61, 238, 20, 235, 61, 6, 154, 112, 62, 34, 114, 34, 188, 94, 67, 156, 62, 64, 82, 128, 190, 12, 100, 211, 61, 3, 144, 132, 190, 52, 57, 168, 190, 223, 145, 91, 190, 118, 154, 122, 190, 90, 239, 66, 190, 118, 200, 170, 62, 224, 17, 132, 190, 101, 66, 254, 61, 190, 248, 254, 61, 228, 82, 255, 60, 91, 155, 250, 190, 57, 237, 188, 61, 82, 215, 174, 60, 162, 247, 72, 190, 182, 197, 186, 61, 95, 162, 155, 62, 140, 234, 236, 188, 219, 179, 216, 61, 19, 61, 195, 189, 233, 224, 191, 62, 58, 13, 172, 60, 117, 86, 196, 62, 253, 232, 100, 62, 22, 229, 108, 62, 121, 53, 6, 62, 179, 87, 223, 62, 223, 169, 216, 61, 87, 35, 56, 62, 82, 21, 51, 189, 227, 219, 132, 62, 140, 36, 117, 190, 0, 23, 11, 190, 0, 145, 130, 190, 32, 242, 149, 190, 223, 11, 191, 190, 53, 68, 11, 191, 92, 158, 219, 61, 59, 199, 137, 191, 104, 203, 240, 62, 119, 238, 227, 190, 206, 71, 158, 61, 148, 231, 195, 60, 187, 219, 15, 191, 198, 41, 33, 62, 117, 204, 14, 61, 40, 162, 171, 62, 226, 251, 136, 188, 85, 121, 43, 191, 214, 19, 69, 190, 32, 252, 186, 60, 182, 214, 163, 187, 161, 192, 82, 58, 4, 47, 117, 58, 95, 130, 106, 61, 95, 38, 237, 189, 229, 195, 2, 62, 44, 148, 171, 191, 29, 119, 107, 191, 4, 167, 71, 191, 63, 112, 191, 61, 220, 211, 121, 62, 78, 116, 133, 188, 153, 52, 220, 190, 82, 237, 133, 62, 152, 25, 181, 61, 132, 64, 158, 189, 9, 218, 215, 190, 178, 3, 58, 191, 84, 190, 220, 190, 32, 208, 168, 190, 133, 127, 180, 190, 89, 188, 25, 61, 21, 133, 167, 61, 137, 217, 89, 62, 4, 207, 228, 189, 26, 74, 135, 62, 116, 204, 241, 189, 140, 120, 149, 60, 75, 90, 155, 189, 31, 244, 167, 62, 196, 98, 47, 62, 7, 133, 215, 61, 253, 6, 113, 61, 90, 56, 174, 190, 245, 243, 200, 61, 245, 170, 23, 191, 209, 64, 153, 61, 0, 246, 1, 62, 130, 208, 163, 189, 228, 125, 161, 190, 201, 167, 32, 63, 171, 157, 121, 190, 217, 97, 154, 62, 187, 8, 201, 190, 219, 143, 217, 190, 142, 31, 135, 62, 136, 5, 210, 190, 177, 162, 36, 190, 137, 169, 75, 190, 39, 49, 229, 190, 215, 97, 36, 62, 174, 82, 57, 190, 133, 56, 239, 62, 0, 67, 128, 190, 15, 46, 21, 62, 114, 241, 240, 189, 194, 29, 83, 190, 156, 55, 20, 190, 234, 142, 171, 189, 105, 34, 132, 62, 148, 142, 13, 62, 219, 12, 90, 191, 255, 130, 23, 62, 157, 65, 87, 62, 27, 252, 21, 62, 214, 254, 196, 189, 63, 155, 187, 189, 82, 161, 244, 61, 211, 88, 89, 190, 210, 103, 254, 60, 67, 224, 75, 190, 55, 58, 150, 190, 175, 175, 141, 189, 160, 140, 105, 62, 59, 70, 237, 62, 150, 26, 70, 62, 175, 195, 90, 190, 174, 234, 91, 62, 179, 139, 63, 190, 115, 59, 165, 62, 197, 106, 25, 62, 133, 42, 129, 62, 55, 103, 136, 190, 226, 48, 3, 190, 7, 207, 82, 191, 104, 211, 69, 191, 238, 126, 14, 62, 250, 156, 223, 61, 243, 55, 155, 191, 97, 150, 173, 62, 121, 172, 65, 190, 190, 23, 82, 190, 225, 151, 152, 190, 53, 23, 12, 190, 107, 34, 232, 61, 112, 239, 49, 62, 223, 6, 190, 187, 62, 0, 27, 189, 186, 79, 76, 60, 153, 116, 128, 61, 18, 91, 15, 62, 193, 230, 11, 62, 189, 192, 192, 60, 100, 223, 22, 190, 39, 125, 62, 191, 199, 105, 135, 61, 105, 18, 29, 62, 217, 48, 146, 60, 3, 26, 25, 62, 69, 197, 143, 62, 142, 92, 87, 62, 11, 150, 156, 190, 64, 206, 180, 190, 125, 85, 13, 190, 66, 184, 82, 62, 132, 61, 87, 62, 173, 73, 43, 189, 184, 151, 208, 62, 234, 78, 33, 62, 97, 72, 245, 189, 250, 213, 43, 63, 146, 115, 242, 190, 168, 87, 147, 189, 24, 9, 131, 61, 58, 54, 77, 62, 229, 144, 237, 62, 153, 94, 50, 191, 65, 243, 58, 62, 166, 83, 50, 191, 67, 24, 228, 61, 53, 28, 105, 61, 119, 104, 109, 62, 80, 139, 95, 190, 222, 249, 173, 62, 197, 67, 209, 62, 134, 80, 129, 60, 200, 117, 13, 63, 63, 231, 5, 190, 248, 56, 224, 190, 169, 173, 152, 62, 24, 32, 214, 60, 172, 244, 183, 190, 236, 121, 18, 62, 75, 195, 73, 190, 72, 200, 144, 190, 56, 74, 0, 191, 186, 168, 40, 62, 86, 201, 48, 190, 241, 252, 0, 191, 140, 55, 177, 62, 197, 127, 220, 60, 198, 13, 251, 60, 143, 24, 176, 62, 227, 125, 50, 62, 158, 240, 11, 62, 119, 105, 62, 62, 223, 15, 113, 60, 79, 100, 211, 187, 242, 77, 231, 61, 211, 249, 199, 62, 242, 237, 234, 61, 180, 180, 54, 191, 231, 28, 43, 62, 162, 231, 207, 190, 208, 129, 206, 189, 147, 126, 238, 61, 113, 186, 205, 61, 240, 129, 138, 61, 235, 133, 6, 190, 52, 215, 247, 190, 75, 145, 117, 187, 61, 33, 109, 191, 67, 165, 141, 61, 93, 174, 83, 190, 160, 98, 145, 191, 72, 22, 212, 62, 254, 255, 57, 62, 54, 190, 80, 62, 157, 40, 189, 61, 199, 231, 137, 60, 81, 26, 198, 62, 242, 9, 156, 190, 171, 43, 136, 61, 60, 58, 164, 187, 226, 228, 59, 190, 178, 55, 108, 62, 205, 192, 107, 60, 25, 69, 211, 188, 255, 158, 204, 189, 109, 210, 203, 190, 105, 125, 227, 61, 155, 85, 59, 62, 235, 185, 53, 61, 224, 125, 161, 189, 206, 54, 133, 61, 202, 162, 4, 188, 72, 217, 206, 61, 144, 38, 40, 62, 246, 192, 7, 189, 17, 185, 12, 190, 223, 172, 37, 191, 227, 104, 26, 62, 221, 252, 196, 62, 129, 95, 116, 61, 31, 77, 62, 190, 245, 32, 202, 62, 45, 172, 170, 62, 76, 163, 55, 191, 36, 177, 198, 190, 25, 241, 188, 189, 39, 174, 205, 61, 208, 87, 160, 62, 236, 63, 24, 63, 77, 94, 236, 190, 83, 163, 10, 190, 158, 21, 6, 190, 232, 109, 102, 191, 111, 148, 174, 62, 19, 240, 67, 62, 21, 232, 144, 61, 59, 38, 157, 190, 148, 55, 12, 191, 103, 148, 153, 62, 81, 149, 27, 188, 242, 140, 65, 190, 46, 10, 6, 61, 6, 7, 85, 190, 218, 205, 251, 61, 139, 98, 128, 190, 122, 98, 130, 62, 182, 15, 68, 61, 177, 18, 142, 62, 215, 78, 0, 191, 151, 145, 38, 62, 215, 185, 116, 62, 223, 48, 92, 62, 75, 114, 21, 188, 231, 162, 252, 62, 80, 142, 89, 62, 189, 164, 141, 189, 124, 66, 211, 61, 17, 242, 24, 190, 2, 19, 71, 191, 56, 131, 156, 189, 24, 143, 243, 189, 33, 20, 140, 60, 233, 29, 16, 191, 52, 239, 49, 190, 70, 205, 62, 61, 187, 206, 144, 190, 144, 130, 161, 190, 150, 169, 238, 190, 10, 19, 14, 190, 29, 196, 238, 189, 169, 119, 201, 61, 51, 251, 86, 190, 70, 78, 97, 191, 54, 51, 109, 190, 230, 37, 205, 190, 158, 238, 28, 62, 59, 234, 98, 190, 37, 94, 121, 189, 87, 49, 217, 190, 76, 225, 117, 190, 50, 138, 230, 61, 7, 127, 153, 62, 113, 144, 255, 190, 152, 224, 171, 61, 25, 179, 135, 190, 182, 210, 113, 190, 220, 162, 20, 191, 0, 145, 228, 190, 73, 199, 109, 189, 114, 248, 84, 189, 99, 63, 203, 61, 54, 170, 106, 62, 199, 160, 113, 62, 224, 93, 59, 62, 79, 18, 178, 189, 152, 215, 72, 62, 126, 253, 234, 62, 240, 3, 144, 191, 190, 5, 4, 191, 72, 50, 221, 62, 99, 70, 99, 62, 87, 172, 141, 61, 110, 49, 2, 190, 142, 139, 196, 62, 150, 189, 152, 191, 208, 171, 125, 62, 137, 157, 183, 61, 4, 19, 219, 62, 208, 157, 28, 190, 193, 42, 222, 190, 103, 88, 1, 62, 52, 160, 101, 62, 154, 237, 215, 62, 114, 2, 3, 63, 32, 165, 51, 191, 140, 82, 191, 62, 91, 17, 141, 62, 211, 71, 5, 191, 225, 177, 146, 190, 145, 115, 69, 191, 232, 115, 156, 190, 176, 70, 168, 189, 33, 60, 79, 62, 221, 217, 193, 62, 70, 197, 81, 190, 15, 34, 191, 62, 41, 173, 230, 61, 237, 189, 130, 62, 30, 145, 131, 190, 127, 247, 185, 190, 206, 89, 82, 190, 39, 82, 22, 60, 152, 13, 195, 62, 74, 48, 238, 60, 93, 154, 183, 190, 166, 166, 175, 62, 46, 14, 9, 190, 244, 47, 84, 189, 236, 228, 73, 62, 127, 139, 153, 61, 141, 232, 183, 189, 191, 136, 203, 189, 54, 183, 81, 62, 141, 151, 28, 63, 47, 51, 245, 62, 244, 102, 206, 190, 36, 247, 226, 190, 71, 46, 6, 189, 112, 72, 147, 62, 184, 22, 142, 190, 13, 128, 151, 189, 103, 99, 18, 62, 43, 92, 236, 189, 42, 228, 100, 191, 156, 145, 20, 189, 180, 117, 231, 190, 220, 43, 63, 63, 198, 90, 178, 190, 130, 79, 184, 61, 125, 99, 142, 190, 144, 185, 180, 190, 98, 241, 87, 62, 38, 67, 164, 62, 92, 6, 239, 61, 191, 24, 147, 190, 228, 149, 65, 191, 255, 62, 168, 62, 211, 129, 83, 61, 50, 15, 65, 189, 86, 86, 158, 190, 30, 178, 117, 187, 21, 242, 80, 61, 194, 142, 171, 60, 27, 155, 56, 188, 88, 120, 7, 191, 211, 166, 26, 191, 23, 80, 132, 191, 239, 127, 180, 61, 59, 168, 32, 63, 251, 12, 30, 190, 242, 150, 97, 190, 95, 104, 10, 63, 233, 74, 47, 190, 28, 247, 240, 62, 10, 42, 136, 62, 145, 101, 144, 62, 54, 2, 34, 190, 49, 245, 110, 60, 224, 197, 134, 191, 140, 112, 64, 191, 13, 247, 141, 60, 226, 125, 49, 188, 97, 6, 95, 191, 148, 121, 75, 62, 137, 104, 17, 190, 35, 82, 45, 190, 56, 30, 69, 190, 160, 230, 151, 190, 207, 114, 124, 62, 42, 178, 106, 189, 177, 178, 238, 188, 96, 177, 141, 189, 47, 91, 113, 190, 59, 137, 160, 61, 9, 229, 9, 62, 232, 126, 85, 62, 105, 217, 230, 189, 220, 137, 173, 190, 33, 74, 233, 190, 116, 97, 161, 61, 45, 139, 93, 62, 12, 220, 84, 60, 248, 248, 172, 188, 125, 120, 87, 62, 15, 180, 181, 61, 115, 200, 112, 62, 137, 16, 185, 62, 127, 227, 131, 62, 85, 11, 144, 190, 143, 40, 0, 190, 10, 56, 172, 191, 44, 216, 38, 191, 91, 29, 135, 60, 215, 87, 135, 187, 82, 7, 141, 191, 166, 249, 183, 62, 92, 137, 61, 188, 63, 31, 67, 190, 224, 210, 207, 190, 190, 206, 216, 190, 107, 1, 141, 61, 70, 21, 203, 58, 7, 44, 64, 60, 46, 56, 221, 189, 165, 123, 70, 190, 141, 206, 240, 189, 4, 144, 129, 61, 231, 166, 87, 62, 147, 211, 171, 189, 197, 99, 164, 190, 53, 104, 242, 190, 61, 39, 225, 61, 69, 131, 221, 62, 195, 167, 220, 189, 236, 208, 45, 190, 124, 173, 181, 62, 123, 252, 56, 62, 235, 56, 154, 189, 5, 25, 182, 61, 16, 169, 158, 189, 133, 60, 171, 61, 183, 208, 236, 189, 126, 248, 68, 61, 249, 254, 140, 58, 172, 69, 70, 61, 185, 162, 28, 61, 214, 249, 41, 189, 188, 212, 211, 61, 15, 78, 179, 188, 172, 8, 49, 190, 5, 173, 46, 190, 238, 116, 178, 187, 189, 159, 28, 61, 102, 220, 182, 189, 137, 200, 51, 190, 155, 216, 47, 189, 82, 86, 110, 61, 143, 241, 8, 61, 90, 138, 246, 61, 78, 154, 16, 190, 101, 6, 217, 60, 53, 213, 7, 62, 215, 147, 146, 189, 36, 20, 217, 189, 246, 52, 184, 61, 251, 181, 189, 189, 193, 247, 50, 190, 226, 245, 188, 189, 18, 149, 222, 188, 246, 200, 160, 62, 244, 239, 88, 62, 147, 161, 21, 62, 229, 183, 21, 62, 12, 78, 149, 61, 97, 224, 182, 62, 141, 107, 200, 190, 1, 157, 126, 189, 190, 81, 50, 190, 132, 68, 70, 191, 117, 144, 149, 62, 231, 2, 52, 62, 109, 43, 104, 62, 178, 117, 188, 190, 86, 34, 196, 190, 110, 183, 90, 62, 217, 19, 206, 61, 103, 69, 174, 62, 199, 240, 5, 60, 117, 215, 74, 61, 76, 176, 189, 61, 89, 235, 70, 62, 170, 112, 251, 61, 23, 215, 168, 189, 8, 182, 160, 190, 126, 179, 16, 191, 150, 43, 175, 62, 101, 220, 203, 62, 237, 46, 216, 61, 95, 106, 73, 60, 108, 90, 39, 62, 194, 44, 174, 61, 40, 133, 211, 190, 114, 206, 139, 61, 5, 4, 56, 190, 20, 128, 34, 62, 250, 2, 180, 61, 39, 238, 148, 190, 204, 27, 201, 61, 226, 237, 78, 62, 41, 249, 181, 62, 77, 192, 18, 191, 131, 91, 17, 61, 214, 201, 218, 189, 52, 242, 105, 62, 229, 144, 174, 61, 2, 185, 82, 189, 209, 225, 204, 189, 219, 110, 128, 62, 19, 38, 23, 189, 136, 117, 108, 190, 63, 9, 200, 62, 128, 217, 4, 189, 58, 97, 132, 190, 83, 180, 199, 189, 83, 195, 74, 62, 147, 32, 119, 189, 198, 41, 12, 61, 137, 97, 218, 190, 29, 172, 149, 190, 115, 127, 166, 60, 18, 47, 78, 62, 168, 122, 75, 190, 127, 100, 21, 62, 62, 168, 229, 190, 35, 107, 180, 188, 196, 50, 176, 61, 74, 101, 148, 62, 132, 97, 139, 62, 220, 253, 11, 62, 142, 204, 184, 62, 121, 162, 111, 188, 92, 157, 26, 60, 50, 186, 44, 63, 17, 235, 40, 190, 133, 227, 92, 62, 251, 101, 84, 62, 249, 135, 101, 62, 13, 144, 30, 190, 205, 99, 139, 190, 237, 83, 170, 62, 112, 16, 3, 58, 122, 157, 145, 190, 22, 159, 156, 62, 6, 117, 32, 191, 111, 30, 126, 191, 203, 174, 43, 190, 173, 135, 57, 62, 109, 255, 139, 62, 64, 40, 38, 190, 59, 199, 10, 190, 201, 113, 37, 192, 11, 249, 132, 191, 189, 40, 200, 61, 90, 186, 5, 192, 131, 8, 191, 62, 70, 231, 197, 189, 94, 177, 248, 187, 204, 165, 178, 189, 17, 170, 136, 189, 152, 79, 6, 61, 14, 221, 18, 62, 61, 242, 51, 189, 106, 169, 24, 190, 9, 178, 130, 189, 29, 215, 41, 190, 85, 162, 8, 62, 66, 235, 234, 189, 154, 83, 23, 61, 47, 34, 253, 189, 188, 10, 165, 61, 228, 24, 141, 61, 197, 112, 246, 60, 66, 35, 183, 188, 149, 5, 44, 61, 87, 40, 187, 189, 149, 77, 63, 190, 224, 159, 129, 61, 179, 137, 127, 189, 1, 129, 25, 60, 28, 109, 16, 61, 163, 124, 194, 61, 173, 30, 58, 190, 95, 144, 77, 189, 68, 205, 46, 190, 37, 213, 156, 187, 29, 196, 180, 189, 118, 115, 220, 189, 187, 254, 36, 190, 250, 142, 112, 61, 134, 19, 145, 62, 17, 41, 10, 63, 69, 138, 80, 191, 105, 135, 209, 62, 112, 95, 169, 188, 118, 23, 216, 190, 214, 242, 26, 191, 202, 55, 199, 62, 200, 125, 237, 190, 203, 150, 86, 62, 3, 86, 61, 62, 129, 124, 94, 189, 18, 4, 59, 191, 200, 55, 252, 190, 66, 11, 210, 189, 43, 223, 175, 190, 155, 184, 166, 189, 239, 15, 23, 62, 236, 211, 85, 62, 147, 80, 41, 191, 206, 171, 178, 190, 215, 202, 162, 191, 121, 116, 69, 191, 43, 185, 242, 190, 64, 5, 123, 189, 121, 109, 62, 191, 161, 209, 178, 189, 52, 82, 168, 189, 233, 109, 125, 191, 187, 13, 223, 62, 227, 90, 75, 190, 131, 74, 15, 191, 209, 106, 23, 190, 201, 163, 75, 191, 128, 110, 242, 190, 182, 28, 180, 188, 18, 181, 25, 191, 37, 131, 69, 190, 118, 123, 49, 190, 207, 6, 121, 191, 167, 71, 5, 63, 57, 223, 44, 189, 230, 214, 88, 189, 142, 132, 140, 190, 37, 169, 19, 191, 207, 232, 35, 62, 157, 5, 96, 190, 166, 6, 141, 189, 174, 160, 31, 62, 121, 129, 166, 190, 156, 242, 198, 61, 1, 46, 39, 191, 218, 138, 165, 62, 250, 76, 207, 190, 255, 98, 95, 191, 220, 100, 156, 189, 73, 45, 13, 62, 43, 234, 190, 62, 58, 144, 115, 62, 237, 55, 35, 191, 1, 109, 170, 62, 113, 188, 38, 190, 233, 104, 200, 61, 170, 79, 135, 61, 127, 179, 163, 189, 211, 138, 255, 60, 157, 5, 234, 61, 64, 70, 39, 190, 159, 111, 232, 61, 205, 110, 162, 61, 168, 17, 136, 61, 67, 125, 139, 61, 43, 141, 26, 190, 224, 216, 124, 189, 184, 84, 56, 189, 86, 199, 134, 189, 24, 70, 48, 187, 225, 214, 42, 190, 162, 4, 226, 189, 187, 164, 150, 60, 88, 8, 182, 189, 42, 145, 232, 188, 29, 82, 70, 190, 98, 89, 21, 190, 230, 170, 153, 61, 150, 90, 232, 189, 139, 242, 246, 61, 254, 118, 203, 61, 43, 43, 2, 62, 190, 47, 130, 189, 160, 227, 82, 189, 124, 38, 10, 190, 216, 44, 38, 190, 181, 60, 252, 189, 13, 63, 26, 191, 231, 192, 196, 189, 53, 14, 14, 62, 85, 190, 237, 62, 164, 25, 179, 61, 250, 12, 51, 190, 4, 155, 20, 62, 192, 162, 6, 190, 9, 111, 63, 62, 39, 121, 250, 189, 232, 18, 40, 188, 211, 186, 102, 189, 113, 84, 46, 62, 26, 161, 88, 62, 223, 53, 223, 190, 22, 106, 5, 190, 42, 44, 32, 188, 51, 57, 177, 188, 88, 207, 97, 189, 146, 61, 8, 57, 90, 27, 45, 62, 6, 209, 77, 190, 241, 106, 2, 190, 191, 242, 49, 190, 148, 127, 60, 62, 118, 0, 187, 190, 25, 160, 9, 62, 240, 171, 70, 191, 175, 77, 150, 189, 207, 170, 160, 62, 194, 204, 253, 190, 146, 147, 180, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 39, 27, 190, 203, 229, 6, 60, 120, 134, 130, 62, 27, 131, 235, 189, 153, 132, 33, 61, 170, 93, 141, 62, 1, 130, 66, 62, 45, 135, 16, 61, 224, 123, 126, 62, 13, 98, 70, 62, 142, 250, 185, 189, 79, 230, 131, 61, 233, 188, 25, 62, 199, 56, 99, 60, 173, 68, 124, 190, 2, 176, 179, 61, 146, 125, 9, 188, 221, 29, 37, 190, 158, 251, 19, 62, 102, 27, 83, 189, 209, 13, 212, 188, 16, 129, 159, 61, 150, 58, 120, 60, 96, 131, 181, 189, 54, 147, 131, 62, 255, 243, 215, 189, 216, 100, 142, 189, 163, 52, 40, 190, 245, 232, 5, 60, 146, 76, 56, 62, 48, 138, 232, 61, 69, 100, 85, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 58, 83, 191, 213, 26, 106, 189, 50, 222, 146, 190, 38, 143, 88, 189, 79, 218, 30, 61, 202, 81, 12, 189, 188, 244, 50, 191, 11, 214, 0, 191, 145, 128, 39, 190, 175, 106, 11, 63, 152, 104, 234, 190, 136, 255, 239, 61, 40, 234, 219, 62, 65, 124, 135, 63, 120, 4, 46, 191, 56, 175, 89, 62, 59, 207, 22, 63, 116, 69, 221, 190, 145, 21, 151, 191, 8, 175, 234, 190, 222, 116, 47, 63, 22, 194, 4, 63, 113, 192, 22, 63, 63, 79, 184, 61, 115, 239, 168, 62, 147, 15, 255, 189, 59, 11, 118, 63, 16, 113, 227, 61, 113, 242, 130, 63, 30, 137, 131, 63, 79, 250, 20, 190, 207, 67, 24, 191, 100, 137, 36, 61, 85, 83, 229, 60, 222, 242, 189, 190, 9, 167, 233, 189, 137, 133, 102, 191, 111, 52, 148, 190, 119, 244, 143, 189, 163, 113, 50, 62, 136, 60, 102, 190, 3, 243, 170, 190, 151, 47, 53, 190, 3, 253, 97, 190, 131, 50, 126, 190, 51, 29, 2, 190, 60, 99, 145, 61, 178, 90, 131, 190, 192, 132, 151, 62, 154, 68, 53, 62, 71, 47, 122, 62, 163, 137, 90, 62, 240, 38, 11, 63, 98, 243, 78, 62, 112, 32, 42, 62, 189, 240, 21, 190, 55, 34, 239, 189, 238, 149, 82, 190, 173, 156, 141, 61, 178, 126, 136, 188, 251, 233, 53, 62, 89, 64, 142, 62, 30, 59, 114, 61, 67, 236, 1, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 84, 139, 185, 232, 111, 225, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {121, 229, 155, 62, 10, 42, 91, 63, 191, 184, 220, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {238, 189, 99, 62, 98, 166, 83, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0017/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}