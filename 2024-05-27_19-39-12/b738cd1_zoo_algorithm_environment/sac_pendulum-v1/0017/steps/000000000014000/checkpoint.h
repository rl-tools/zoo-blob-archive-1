// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 232, 46, 63, 204, 109, 130, 190, 209, 21, 220, 190, 30, 104, 24, 63, 217, 74, 179, 62, 116, 221, 240, 190, 153, 238, 77, 62, 168, 8, 59, 63, 56, 27, 181, 190, 232, 42, 218, 61, 204, 13, 135, 63, 249, 53, 78, 190, 135, 95, 55, 191, 38, 28, 1, 62, 166, 77, 60, 191, 192, 144, 3, 191, 145, 98, 168, 63, 3, 96, 33, 62, 212, 247, 240, 62, 239, 231, 46, 63, 131, 235, 169, 62, 120, 130, 57, 62, 71, 107, 155, 61, 165, 105, 54, 62, 109, 209, 251, 62, 61, 255, 38, 189, 99, 117, 215, 62, 5, 249, 227, 62, 71, 42, 95, 63, 71, 154, 86, 62, 181, 31, 58, 62, 24, 86, 26, 191, 170, 199, 215, 62, 166, 85, 185, 190, 249, 229, 136, 63, 232, 24, 157, 62, 80, 95, 244, 61, 212, 113, 92, 63, 110, 175, 95, 62, 228, 22, 61, 63, 115, 126, 36, 63, 205, 192, 14, 63, 213, 68, 164, 190, 152, 52, 225, 191, 167, 241, 21, 191, 164, 59, 5, 191, 246, 199, 183, 62, 144, 157, 214, 62, 24, 232, 72, 63, 181, 31, 16, 63, 217, 135, 38, 62, 70, 31, 30, 190, 151, 213, 101, 63, 144, 181, 52, 63, 12, 158, 200, 190, 85, 95, 174, 190, 70, 23, 1, 190, 80, 123, 73, 63, 98, 17, 5, 63, 145, 32, 145, 62, 251, 180, 32, 191, 219, 215, 174, 189, 189, 155, 251, 188, 230, 34, 209, 62, 166, 179, 98, 191, 176, 98, 222, 190, 202, 245, 8, 63, 231, 54, 112, 191, 32, 23, 108, 61, 14, 8, 5, 191, 147, 4, 13, 191, 255, 82, 75, 191, 162, 21, 26, 191, 140, 22, 96, 61, 227, 224, 190, 190, 213, 3, 237, 190, 151, 2, 192, 191, 223, 166, 191, 190, 230, 238, 139, 191, 57, 156, 111, 62, 63, 227, 245, 60, 190, 28, 73, 63, 82, 138, 151, 191, 183, 208, 138, 190, 54, 229, 22, 191, 190, 216, 33, 191, 125, 90, 60, 190, 130, 35, 194, 62, 198, 196, 119, 63, 211, 89, 151, 190, 225, 219, 23, 63, 202, 25, 149, 191, 153, 231, 141, 190, 150, 97, 90, 189, 154, 231, 24, 63, 144, 239, 148, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 248, 91, 191, 113, 65, 209, 189, 135, 117, 233, 189, 13, 7, 24, 63, 48, 181, 6, 191, 227, 234, 158, 61, 251, 244, 241, 190, 203, 21, 156, 60, 247, 49, 165, 62, 174, 194, 132, 190, 137, 222, 103, 61, 34, 31, 14, 62, 214, 233, 142, 62, 230, 137, 86, 190, 173, 203, 27, 62, 42, 126, 227, 189, 129, 171, 67, 62, 121, 195, 219, 190, 239, 158, 234, 62, 237, 105, 141, 62, 96, 200, 56, 63, 52, 56, 112, 189, 197, 120, 250, 62, 75, 1, 152, 61, 183, 224, 154, 190, 204, 191, 132, 62, 219, 78, 154, 62, 100, 206, 190, 59, 40, 102, 57, 63, 164, 181, 213, 62, 118, 105, 89, 62, 80, 119, 75, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 232, 250, 190, 43, 182, 102, 62, 204, 255, 3, 63, 134, 135, 166, 62, 29, 13, 247, 189, 245, 145, 63, 190, 141, 0, 204, 62, 242, 184, 124, 62, 230, 130, 53, 62, 170, 103, 75, 62, 158, 85, 50, 61, 87, 86, 43, 189, 231, 165, 70, 62, 132, 50, 67, 61, 216, 140, 11, 191, 40, 125, 61, 188, 120, 82, 174, 62, 2, 210, 47, 59, 129, 244, 3, 191, 217, 215, 107, 62, 36, 54, 190, 190, 44, 163, 245, 190, 209, 30, 188, 189, 144, 118, 127, 190, 27, 85, 154, 61, 52, 149, 95, 191, 55, 44, 29, 191, 156, 227, 231, 190, 228, 52, 98, 191, 229, 172, 95, 62, 58, 180, 248, 190, 246, 22, 194, 62, 206, 46, 82, 190, 225, 230, 197, 60, 89, 92, 35, 189, 227, 134, 117, 189, 82, 208, 119, 61, 201, 202, 202, 188, 185, 34, 42, 190, 179, 147, 34, 189, 176, 178, 130, 189, 144, 86, 30, 62, 174, 11, 3, 61, 197, 159, 173, 61, 221, 223, 215, 189, 31, 115, 235, 60, 113, 57, 96, 187, 180, 231, 150, 189, 152, 127, 67, 190, 159, 65, 254, 189, 216, 233, 188, 189, 77, 115, 30, 190, 234, 229, 164, 187, 200, 243, 144, 61, 228, 83, 163, 59, 101, 51, 236, 61, 236, 110, 78, 189, 237, 33, 170, 189, 241, 248, 151, 188, 209, 108, 171, 189, 150, 129, 240, 188, 165, 37, 18, 190, 22, 190, 29, 60, 174, 136, 97, 61, 39, 205, 38, 191, 183, 28, 79, 190, 188, 72, 59, 188, 105, 171, 237, 62, 162, 47, 67, 62, 214, 231, 6, 190, 239, 181, 140, 61, 146, 231, 183, 61, 7, 42, 145, 188, 131, 37, 157, 190, 134, 205, 231, 189, 101, 206, 142, 188, 219, 34, 58, 62, 12, 187, 24, 62, 28, 47, 128, 190, 167, 92, 108, 189, 30, 41, 170, 62, 143, 41, 15, 62, 91, 250, 173, 60, 221, 155, 72, 62, 95, 235, 150, 62, 25, 45, 182, 190, 156, 148, 233, 61, 73, 245, 230, 189, 231, 23, 131, 61, 240, 177, 14, 188, 31, 248, 199, 60, 158, 190, 6, 191, 105, 37, 15, 190, 170, 37, 165, 62, 31, 228, 137, 190, 253, 214, 0, 190, 141, 53, 5, 61, 15, 175, 90, 185, 32, 194, 248, 60, 212, 194, 69, 190, 192, 193, 210, 61, 227, 11, 21, 189, 227, 40, 68, 190, 194, 183, 109, 61, 207, 106, 167, 61, 157, 49, 53, 190, 247, 251, 123, 59, 203, 231, 3, 190, 6, 144, 196, 61, 212, 101, 170, 61, 221, 218, 7, 189, 97, 155, 42, 189, 101, 147, 104, 188, 95, 119, 69, 61, 185, 59, 23, 62, 51, 133, 65, 61, 255, 66, 167, 189, 112, 224, 18, 190, 229, 117, 103, 190, 137, 74, 47, 190, 33, 14, 7, 62, 181, 142, 22, 190, 152, 125, 70, 61, 38, 96, 157, 59, 196, 37, 179, 189, 168, 8, 200, 189, 136, 72, 122, 61, 190, 231, 32, 190, 223, 231, 25, 61, 230, 101, 111, 62, 242, 78, 246, 61, 251, 178, 62, 62, 68, 15, 242, 189, 25, 170, 17, 191, 172, 235, 25, 190, 254, 97, 163, 190, 3, 209, 126, 189, 224, 67, 92, 191, 27, 78, 54, 191, 136, 62, 24, 191, 25, 159, 36, 62, 149, 54, 184, 190, 144, 31, 143, 190, 149, 208, 6, 62, 208, 46, 17, 189, 40, 191, 189, 189, 19, 20, 148, 190, 172, 211, 35, 59, 188, 32, 176, 190, 100, 133, 242, 188, 48, 223, 70, 189, 18, 74, 123, 189, 24, 33, 16, 62, 192, 36, 61, 191, 18, 194, 130, 190, 217, 137, 219, 61, 165, 193, 244, 190, 251, 212, 143, 62, 116, 182, 7, 189, 115, 157, 22, 62, 113, 61, 141, 190, 21, 185, 172, 61, 224, 67, 217, 61, 21, 94, 2, 62, 38, 198, 73, 61, 198, 242, 216, 189, 140, 33, 218, 188, 39, 73, 176, 60, 164, 166, 229, 189, 114, 25, 179, 190, 148, 194, 12, 190, 53, 222, 133, 61, 215, 229, 175, 61, 59, 152, 92, 61, 110, 238, 110, 61, 16, 22, 250, 189, 191, 22, 168, 62, 141, 106, 185, 60, 159, 227, 179, 62, 252, 72, 68, 62, 211, 127, 183, 62, 45, 208, 186, 58, 162, 117, 105, 61, 166, 101, 93, 62, 24, 205, 154, 61, 145, 241, 170, 61, 74, 43, 65, 62, 202, 12, 147, 190, 72, 22, 158, 61, 167, 0, 164, 61, 253, 118, 210, 189, 107, 252, 255, 60, 171, 240, 79, 190, 58, 117, 195, 190, 27, 100, 42, 190, 228, 153, 49, 190, 46, 78, 132, 188, 246, 206, 179, 61, 183, 63, 116, 186, 93, 78, 152, 189, 168, 28, 53, 61, 243, 130, 210, 189, 165, 157, 145, 190, 12, 169, 43, 62, 186, 84, 152, 189, 175, 59, 111, 189, 208, 63, 170, 189, 213, 121, 94, 61, 249, 218, 70, 191, 158, 147, 74, 62, 165, 166, 46, 61, 132, 210, 131, 190, 161, 96, 196, 62, 117, 50, 99, 190, 75, 68, 60, 191, 122, 68, 139, 190, 201, 96, 184, 62, 117, 49, 215, 59, 137, 105, 244, 62, 119, 23, 106, 190, 85, 214, 131, 62, 53, 78, 199, 190, 12, 188, 184, 190, 238, 35, 218, 190, 82, 30, 84, 61, 123, 221, 13, 190, 65, 149, 2, 61, 227, 208, 28, 191, 42, 93, 82, 61, 200, 47, 132, 190, 186, 115, 53, 62, 8, 175, 236, 190, 94, 171, 89, 61, 45, 48, 154, 190, 3, 214, 182, 190, 176, 153, 188, 190, 173, 14, 10, 191, 169, 26, 17, 190, 226, 173, 219, 62, 58, 235, 121, 189, 65, 182, 165, 62, 84, 219, 253, 190, 177, 185, 210, 61, 252, 1, 204, 60, 202, 251, 9, 62, 174, 74, 74, 62, 192, 76, 82, 62, 43, 97, 247, 60, 141, 77, 239, 189, 64, 121, 22, 62, 59, 28, 157, 61, 69, 152, 32, 61, 107, 17, 169, 62, 7, 75, 81, 190, 53, 51, 28, 62, 113, 184, 203, 190, 181, 85, 241, 189, 185, 7, 147, 189, 249, 238, 16, 190, 159, 194, 220, 189, 208, 199, 189, 62, 244, 73, 94, 190, 246, 28, 44, 62, 49, 184, 3, 62, 238, 53, 190, 188, 14, 72, 192, 190, 131, 119, 135, 61, 139, 50, 8, 61, 5, 247, 65, 190, 179, 254, 138, 61, 23, 21, 179, 62, 22, 63, 237, 57, 190, 251, 79, 188, 254, 228, 135, 189, 95, 103, 192, 62, 161, 11, 122, 189, 214, 174, 200, 62, 14, 64, 123, 62, 141, 28, 51, 62, 248, 102, 69, 62, 16, 166, 216, 62, 130, 161, 19, 62, 217, 185, 191, 61, 2, 192, 205, 189, 66, 87, 132, 62, 48, 238, 6, 190, 133, 219, 80, 190, 110, 40, 58, 190, 30, 170, 143, 190, 96, 95, 151, 190, 24, 118, 20, 190, 30, 247, 23, 62, 85, 107, 122, 191, 63, 133, 212, 62, 3, 255, 229, 190, 221, 81, 41, 61, 74, 66, 95, 58, 6, 57, 20, 191, 137, 62, 14, 62, 46, 203, 3, 61, 177, 179, 173, 62, 25, 241, 43, 189, 1, 78, 40, 191, 182, 178, 59, 190, 10, 186, 190, 60, 5, 205, 165, 188, 136, 171, 192, 61, 151, 6, 40, 188, 65, 253, 222, 61, 147, 154, 174, 189, 74, 255, 239, 61, 206, 106, 151, 191, 80, 25, 1, 191, 196, 238, 57, 191, 239, 1, 70, 62, 63, 220, 126, 62, 98, 194, 67, 61, 141, 64, 192, 190, 131, 56, 132, 62, 234, 113, 53, 62, 126, 229, 95, 62, 125, 100, 88, 190, 133, 255, 18, 191, 73, 234, 181, 190, 14, 235, 145, 190, 165, 136, 197, 190, 85, 205, 100, 60, 242, 152, 179, 61, 70, 240, 79, 62, 222, 28, 51, 190, 25, 7, 136, 62, 80, 204, 42, 190, 192, 200, 132, 188, 221, 18, 193, 189, 120, 174, 155, 62, 62, 102, 42, 62, 70, 213, 66, 61, 186, 201, 83, 61, 141, 92, 141, 190, 213, 166, 131, 61, 45, 150, 8, 191, 21, 106, 152, 189, 101, 181, 184, 61, 219, 20, 160, 189, 175, 247, 139, 190, 65, 42, 39, 63, 97, 175, 105, 190, 132, 1, 23, 62, 194, 0, 166, 190, 38, 71, 168, 190, 94, 92, 25, 62, 136, 78, 154, 190, 80, 22, 30, 190, 78, 99, 254, 189, 55, 120, 215, 190, 60, 59, 77, 62, 55, 0, 144, 190, 173, 125, 224, 62, 25, 175, 119, 190, 186, 97, 223, 61, 185, 83, 15, 190, 191, 5, 70, 190, 121, 186, 59, 190, 184, 21, 139, 189, 233, 64, 140, 62, 57, 205, 252, 61, 220, 243, 111, 191, 183, 14, 40, 62, 251, 19, 105, 62, 21, 154, 19, 62, 41, 161, 201, 189, 107, 184, 182, 189, 150, 199, 247, 61, 117, 113, 9, 190, 119, 94, 45, 60, 2, 54, 129, 190, 82, 118, 39, 190, 181, 196, 35, 190, 173, 104, 145, 62, 183, 58, 248, 62, 47, 199, 55, 62, 1, 16, 30, 190, 230, 29, 101, 62, 31, 30, 160, 190, 225, 183, 130, 62, 189, 45, 9, 62, 239, 80, 102, 62, 53, 26, 140, 190, 146, 187, 113, 190, 218, 56, 248, 190, 158, 80, 56, 191, 246, 49, 244, 61, 157, 78, 203, 61, 156, 126, 148, 191, 46, 233, 155, 62, 243, 135, 128, 189, 247, 100, 207, 189, 192, 87, 150, 190, 242, 200, 86, 190, 90, 247, 21, 62, 133, 109, 73, 62, 75, 71, 94, 60, 168, 35, 236, 189, 198, 206, 140, 60, 96, 218, 5, 61, 137, 3, 20, 62, 207, 178, 237, 61, 158, 194, 110, 189, 45, 208, 150, 190, 16, 9, 77, 191, 202, 115, 46, 62, 130, 185, 44, 62, 33, 51, 113, 189, 246, 169, 15, 62, 79, 79, 145, 62, 182, 133, 21, 62, 70, 194, 215, 190, 101, 35, 207, 190, 56, 63, 34, 190, 16, 107, 55, 62, 190, 216, 92, 62, 182, 125, 66, 190, 85, 213, 79, 62, 19, 42, 208, 61, 244, 210, 217, 189, 99, 66, 10, 63, 63, 201, 4, 191, 90, 101, 129, 190, 143, 182, 155, 61, 95, 155, 38, 62, 43, 108, 199, 62, 239, 19, 24, 191, 59, 144, 154, 62, 4, 249, 29, 191, 171, 158, 36, 61, 215, 110, 156, 61, 55, 22, 29, 62, 94, 181, 109, 190, 30, 152, 144, 61, 2, 201, 194, 62, 240, 99, 63, 61, 103, 223, 239, 62, 252, 49, 85, 189, 214, 208, 232, 190, 189, 102, 107, 62, 22, 28, 131, 188, 90, 161, 197, 190, 70, 159, 7, 62, 189, 95, 201, 189, 221, 146, 183, 190, 81, 49, 76, 191, 129, 228, 186, 61, 86, 201, 48, 190, 125, 33, 9, 191, 42, 243, 158, 62, 82, 116, 205, 60, 114, 72, 132, 60, 124, 228, 130, 62, 203, 74, 53, 62, 188, 11, 173, 61, 152, 199, 242, 61, 26, 227, 103, 188, 79, 100, 211, 187, 38, 24, 180, 61, 96, 59, 170, 62, 203, 219, 187, 61, 98, 118, 19, 191, 255, 79, 255, 61, 62, 134, 201, 190, 40, 19, 10, 190, 31, 253, 234, 61, 113, 186, 205, 61, 240, 129, 138, 61, 84, 157, 137, 188, 155, 28, 8, 191, 205, 46, 81, 189, 167, 157, 71, 191, 89, 132, 58, 189, 117, 99, 122, 190, 227, 132, 77, 191, 6, 239, 178, 62, 23, 141, 18, 62, 147, 161, 253, 61, 0, 76, 8, 61, 187, 215, 217, 189, 190, 133, 177, 62, 181, 38, 155, 190, 35, 40, 251, 60, 42, 225, 1, 189, 170, 145, 88, 190, 44, 1, 79, 62, 237, 128, 191, 59, 254, 52, 228, 188, 43, 66, 250, 189, 250, 38, 234, 190, 250, 181, 1, 62, 129, 82, 49, 62, 192, 58, 40, 61, 80, 195, 221, 189, 234, 209, 29, 61, 34, 213, 49, 189, 57, 159, 224, 61, 158, 201, 5, 62, 24, 150, 6, 190, 15, 97, 145, 190, 52, 131, 43, 191, 108, 9, 70, 62, 162, 215, 201, 62, 90, 50, 232, 60, 1, 173, 107, 190, 193, 1, 199, 62, 203, 137, 99, 62, 132, 36, 23, 191, 246, 42, 181, 190, 53, 142, 213, 188, 72, 220, 10, 62, 179, 144, 90, 188, 13, 247, 227, 62, 150, 61, 204, 190, 5, 109, 14, 190, 106, 16, 221, 189, 6, 76, 83, 191, 10, 5, 164, 62, 13, 192, 25, 62, 44, 191, 202, 61, 1, 159, 137, 190, 13, 45, 59, 191, 21, 92, 157, 62, 144, 192, 148, 61, 7, 222, 69, 190, 135, 60, 129, 189, 189, 170, 16, 190, 171, 72, 104, 61, 144, 87, 59, 190, 90, 119, 146, 62, 83, 37, 68, 190, 192, 220, 11, 62, 132, 26, 52, 191, 44, 97, 45, 62, 110, 76, 151, 62, 229, 132, 214, 61, 24, 194, 208, 60, 28, 251, 9, 63, 99, 118, 70, 61, 189, 164, 141, 189, 124, 66, 211, 61, 17, 242, 24, 190, 253, 128, 67, 191, 195, 92, 146, 189, 68, 95, 214, 189, 33, 20, 140, 60, 6, 31, 13, 191, 191, 12, 10, 190, 70, 205, 62, 61, 77, 25, 107, 190, 111, 218, 152, 190, 219, 19, 241, 190, 10, 19, 14, 190, 38, 82, 150, 189, 8, 119, 20, 62, 51, 251, 86, 190, 21, 190, 96, 191, 33, 21, 52, 190, 230, 37, 205, 190, 116, 82, 85, 62, 194, 173, 95, 190, 34, 86, 115, 188, 107, 21, 196, 190, 20, 163, 72, 190, 218, 41, 44, 62, 50, 236, 183, 62, 25, 241, 248, 190, 162, 183, 11, 62, 25, 179, 135, 190, 139, 145, 89, 190, 85, 162, 20, 191, 193, 84, 185, 190, 241, 43, 147, 188, 134, 35, 194, 59, 253, 117, 18, 62, 214, 159, 68, 62, 60, 32, 128, 62, 200, 152, 167, 60, 222, 28, 139, 189, 22, 179, 82, 62, 27, 55, 200, 62, 137, 149, 51, 191, 33, 155, 234, 190, 152, 122, 175, 62, 7, 22, 69, 62, 195, 110, 232, 186, 216, 196, 180, 190, 17, 254, 180, 62, 119, 43, 162, 191, 129, 62, 107, 62, 154, 43, 151, 61, 94, 98, 204, 62, 142, 30, 27, 190, 210, 161, 152, 190, 93, 34, 200, 61, 243, 203, 12, 62, 193, 18, 158, 62, 29, 112, 162, 62, 134, 217, 42, 191, 150, 240, 180, 62, 64, 41, 169, 62, 210, 35, 251, 190, 20, 104, 87, 190, 172, 4, 42, 191, 222, 167, 127, 190, 215, 250, 151, 188, 162, 86, 134, 62, 22, 26, 195, 62, 96, 132, 249, 189, 78, 151, 179, 62, 205, 164, 228, 61, 169, 43, 128, 62, 26, 192, 129, 190, 251, 71, 171, 190, 96, 18, 6, 190, 197, 29, 153, 58, 67, 145, 191, 62, 31, 222, 180, 60, 57, 111, 168, 190, 188, 149, 164, 62, 50, 51, 17, 190, 67, 147, 96, 189, 177, 29, 67, 62, 192, 94, 200, 61, 32, 16, 141, 189, 222, 77, 90, 189, 88, 115, 102, 62, 170, 100, 18, 63, 113, 124, 216, 62, 131, 33, 2, 191, 200, 12, 216, 190, 169, 219, 30, 189, 208, 179, 178, 62, 63, 248, 135, 190, 254, 99, 19, 60, 165, 21, 21, 62, 30, 245, 177, 189, 180, 149, 210, 190, 117, 123, 31, 188, 151, 5, 194, 190, 46, 222, 49, 63, 105, 226, 187, 190, 37, 66, 158, 61, 226, 46, 137, 190, 112, 129, 213, 190, 203, 21, 127, 62, 91, 254, 156, 62, 87, 155, 199, 61, 154, 123, 152, 190, 173, 213, 54, 191, 9, 167, 169, 62, 200, 106, 85, 61, 64, 165, 113, 189, 240, 254, 136, 189, 49, 167, 5, 187, 182, 196, 25, 62, 88, 140, 44, 61, 9, 174, 28, 61, 0, 103, 224, 190, 200, 18, 148, 190, 217, 8, 100, 191, 176, 164, 41, 62, 73, 191, 39, 63, 243, 94, 129, 61, 242, 116, 69, 190, 226, 164, 16, 63, 96, 8, 1, 61, 139, 151, 184, 62, 56, 33, 129, 62, 116, 44, 139, 62, 234, 192, 4, 190, 2, 184, 201, 189, 216, 223, 50, 191, 111, 32, 42, 191, 33, 224, 35, 61, 170, 193, 239, 60, 40, 0, 71, 191, 108, 129, 59, 62, 93, 95, 131, 189, 11, 252, 30, 189, 20, 153, 19, 190, 120, 73, 212, 190, 233, 95, 130, 62, 141, 14, 208, 60, 78, 196, 203, 188, 10, 207, 29, 190, 171, 189, 45, 190, 20, 156, 80, 61, 255, 246, 0, 62, 82, 122, 131, 62, 72, 75, 74, 190, 30, 95, 240, 190, 136, 118, 12, 191, 26, 24, 45, 62, 69, 119, 136, 62, 171, 201, 141, 189, 196, 18, 134, 186, 211, 39, 133, 62, 156, 95, 47, 61, 243, 201, 75, 62, 75, 194, 182, 62, 252, 30, 104, 62, 119, 8, 135, 190, 45, 116, 236, 189, 29, 223, 164, 191, 32, 157, 14, 191, 180, 44, 215, 59, 136, 71, 65, 61, 205, 221, 124, 191, 106, 20, 144, 62, 189, 52, 22, 61, 94, 231, 1, 190, 138, 131, 180, 190, 195, 12, 220, 190, 186, 245, 44, 185, 123, 23, 143, 61, 29, 175, 67, 189, 238, 220, 105, 190, 225, 215, 246, 189, 102, 116, 134, 190, 243, 102, 204, 61, 177, 190, 133, 62, 171, 55, 21, 190, 151, 96, 161, 190, 27, 108, 241, 190, 62, 16, 10, 62, 30, 80, 2, 63, 94, 168, 90, 190, 23, 233, 26, 190, 142, 234, 214, 62, 69, 118, 216, 61, 235, 56, 154, 189, 5, 25, 182, 61, 16, 169, 158, 189, 133, 60, 171, 61, 183, 208, 236, 189, 126, 248, 68, 61, 249, 254, 140, 58, 172, 69, 70, 61, 185, 162, 28, 61, 214, 249, 41, 189, 188, 212, 211, 61, 15, 78, 179, 188, 172, 8, 49, 190, 5, 173, 46, 190, 238, 116, 178, 187, 189, 159, 28, 61, 102, 220, 182, 189, 137, 200, 51, 190, 155, 216, 47, 189, 82, 86, 110, 61, 143, 241, 8, 61, 90, 138, 246, 61, 78, 154, 16, 190, 101, 6, 217, 60, 53, 213, 7, 62, 215, 147, 146, 189, 36, 20, 217, 189, 246, 52, 184, 61, 251, 181, 189, 189, 193, 247, 50, 190, 226, 245, 188, 189, 18, 149, 222, 188, 125, 0, 104, 62, 251, 4, 42, 62, 160, 171, 152, 61, 18, 242, 180, 61, 194, 81, 148, 189, 110, 136, 154, 62, 157, 146, 202, 190, 179, 51, 193, 189, 113, 114, 68, 190, 159, 75, 79, 191, 179, 150, 138, 62, 140, 211, 19, 62, 100, 31, 96, 62, 16, 167, 197, 190, 197, 165, 217, 190, 44, 87, 91, 62, 81, 132, 204, 61, 105, 214, 167, 62, 99, 195, 168, 188, 68, 171, 7, 61, 31, 254, 43, 61, 74, 173, 89, 62, 242, 42, 0, 62, 96, 13, 59, 190, 82, 129, 242, 190, 142, 218, 18, 191, 252, 111, 172, 62, 10, 155, 220, 62, 181, 251, 156, 61, 247, 129, 10, 189, 189, 219, 63, 62, 132, 40, 185, 188, 234, 196, 225, 190, 73, 148, 166, 60, 153, 197, 149, 190, 60, 244, 251, 61, 165, 8, 149, 61, 148, 14, 157, 190, 15, 213, 176, 61, 139, 11, 83, 62, 70, 86, 180, 62, 169, 181, 12, 191, 0, 207, 246, 60, 173, 161, 130, 189, 138, 184, 110, 62, 166, 85, 177, 61, 215, 159, 83, 61, 186, 204, 183, 189, 148, 172, 113, 62, 49, 212, 10, 189, 137, 155, 86, 190, 99, 178, 196, 62, 126, 16, 32, 187, 153, 63, 148, 190, 255, 227, 0, 190, 179, 148, 41, 62, 46, 75, 50, 189, 55, 243, 36, 62, 79, 82, 184, 190, 65, 199, 163, 190, 124, 127, 61, 61, 37, 135, 40, 62, 224, 244, 108, 190, 227, 183, 172, 61, 251, 65, 239, 189, 181, 149, 219, 60, 80, 217, 67, 61, 217, 104, 25, 62, 182, 227, 178, 62, 20, 53, 225, 59, 82, 227, 186, 62, 49, 58, 242, 187, 117, 227, 170, 60, 240, 96, 30, 63, 140, 242, 252, 189, 54, 105, 246, 61, 74, 34, 218, 61, 90, 180, 107, 62, 167, 0, 29, 189, 127, 228, 128, 190, 142, 172, 142, 62, 173, 16, 163, 60, 215, 86, 163, 190, 204, 222, 141, 62, 86, 98, 65, 191, 181, 239, 17, 191, 0, 59, 68, 190, 16, 210, 150, 62, 47, 103, 151, 62, 133, 95, 31, 190, 8, 162, 139, 190, 233, 106, 8, 192, 56, 242, 135, 191, 107, 57, 222, 60, 16, 187, 224, 191, 113, 37, 167, 62, 70, 231, 197, 189, 94, 177, 248, 187, 204, 165, 178, 189, 17, 170, 136, 189, 152, 79, 6, 61, 14, 221, 18, 62, 61, 242, 51, 189, 106, 169, 24, 190, 9, 178, 130, 189, 29, 215, 41, 190, 85, 162, 8, 62, 66, 235, 234, 189, 154, 83, 23, 61, 47, 34, 253, 189, 188, 10, 165, 61, 228, 24, 141, 61, 197, 112, 246, 60, 66, 35, 183, 188, 149, 5, 44, 61, 87, 40, 187, 189, 149, 77, 63, 190, 224, 159, 129, 61, 179, 137, 127, 189, 1, 129, 25, 60, 28, 109, 16, 61, 163, 124, 194, 61, 173, 30, 58, 190, 95, 144, 77, 189, 68, 205, 46, 190, 37, 213, 156, 187, 29, 196, 180, 189, 118, 115, 220, 189, 221, 90, 3, 62, 128, 102, 11, 189, 140, 26, 17, 62, 118, 99, 229, 62, 92, 242, 147, 191, 182, 225, 153, 62, 252, 191, 37, 189, 64, 217, 244, 190, 196, 125, 39, 191, 78, 34, 164, 62, 100, 105, 209, 190, 25, 129, 245, 61, 219, 174, 199, 61, 113, 18, 222, 189, 18, 4, 59, 191, 187, 106, 165, 190, 237, 53, 43, 190, 233, 37, 139, 190, 253, 156, 123, 59, 52, 97, 206, 61, 60, 98, 31, 62, 10, 178, 149, 190, 68, 222, 55, 191, 199, 76, 166, 191, 43, 233, 91, 191, 62, 253, 189, 190, 16, 44, 229, 189, 86, 44, 3, 191, 153, 178, 30, 60, 221, 136, 67, 190, 67, 210, 78, 191, 106, 122, 166, 62, 63, 253, 18, 190, 69, 58, 196, 190, 209, 106, 23, 190, 176, 223, 225, 190, 95, 7, 242, 190, 251, 0, 29, 62, 141, 15, 16, 191, 139, 4, 81, 190, 6, 177, 69, 190, 205, 214, 85, 191, 155, 72, 250, 62, 15, 217, 113, 61, 196, 101, 57, 61, 100, 99, 135, 190, 182, 121, 52, 191, 63, 163, 71, 62, 131, 224, 70, 190, 14, 37, 66, 189, 16, 109, 102, 61, 199, 223, 165, 190, 52, 173, 146, 61, 205, 244, 2, 191, 51, 78, 136, 62, 3, 102, 176, 190, 49, 37, 35, 191, 114, 13, 136, 190, 84, 168, 128, 62, 202, 106, 193, 62, 35, 136, 241, 61, 194, 132, 241, 190, 192, 255, 131, 62, 3, 104, 170, 189, 233, 104, 200, 61, 170, 79, 135, 61, 127, 179, 163, 189, 147, 101, 7, 61, 95, 72, 240, 61, 199, 203, 38, 190, 159, 111, 232, 61, 205, 110, 162, 61, 168, 17, 136, 61, 67, 125, 139, 61, 43, 141, 26, 190, 28, 115, 124, 189, 184, 84, 56, 189, 86, 199, 134, 189, 175, 143, 252, 58, 225, 214, 42, 190, 162, 4, 226, 189, 187, 164, 150, 60, 193, 212, 172, 189, 42, 145, 232, 188, 216, 240, 63, 190, 98, 89, 21, 190, 98, 18, 155, 61, 180, 107, 221, 189, 150, 240, 252, 61, 242, 51, 215, 61, 74, 54, 8, 62, 190, 47, 130, 189, 90, 141, 54, 189, 32, 228, 9, 190, 66, 237, 37, 190, 172, 46, 251, 189, 64, 165, 26, 191, 88, 171, 248, 189, 248, 111, 120, 61, 253, 150, 235, 62, 234, 28, 179, 61, 89, 241, 38, 190, 77, 99, 227, 61, 63, 62, 250, 189, 174, 146, 79, 62, 25, 235, 158, 189, 15, 234, 240, 188, 234, 128, 111, 188, 102, 156, 65, 62, 72, 96, 94, 62, 18, 39, 135, 190, 64, 79, 44, 190, 183, 40, 0, 61, 212, 146, 65, 189, 146, 62, 134, 189, 223, 32, 47, 61, 45, 59, 13, 62, 129, 76, 19, 190, 151, 115, 209, 189, 48, 131, 66, 190, 44, 146, 71, 62, 199, 151, 21, 190, 187, 203, 241, 61, 52, 118, 44, 191, 231, 209, 141, 189, 30, 121, 156, 62, 87, 142, 207, 190, 179, 16, 39, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {114, 166, 21, 190, 203, 229, 6, 60, 46, 13, 106, 62, 27, 131, 235, 189, 134, 64, 47, 61, 191, 121, 117, 62, 119, 107, 29, 62, 201, 96, 2, 62, 111, 1, 74, 62, 216, 179, 83, 62, 3, 32, 234, 189, 4, 130, 145, 61, 42, 59, 31, 62, 217, 235, 31, 189, 73, 21, 143, 190, 255, 63, 119, 61, 141, 199, 11, 61, 125, 244, 224, 189, 92, 203, 44, 62, 114, 172, 7, 189, 207, 194, 155, 60, 107, 232, 19, 62, 98, 117, 128, 61, 96, 131, 181, 189, 172, 84, 124, 62, 2, 201, 4, 190, 22, 131, 50, 190, 163, 52, 40, 190, 172, 6, 180, 188, 7, 132, 29, 62, 76, 143, 241, 61, 10, 4, 112, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {63, 235, 62, 191, 213, 26, 106, 189, 85, 126, 154, 190, 38, 143, 88, 189, 188, 8, 38, 61, 78, 137, 54, 189, 46, 192, 22, 191, 61, 245, 0, 191, 212, 126, 44, 190, 124, 132, 15, 63, 244, 218, 200, 190, 151, 102, 71, 62, 207, 188, 230, 62, 99, 171, 130, 63, 251, 166, 40, 191, 217, 213, 130, 62, 121, 82, 15, 63, 176, 87, 229, 190, 241, 88, 118, 191, 104, 211, 219, 190, 211, 195, 51, 63, 72, 51, 10, 63, 94, 210, 14, 63, 63, 79, 184, 61, 124, 136, 194, 62, 90, 120, 50, 190, 187, 111, 89, 63, 16, 113, 227, 61, 252, 202, 81, 63, 229, 201, 99, 63, 159, 78, 21, 190, 96, 179, 255, 190, 5, 116, 19, 62, 85, 83, 229, 60, 187, 37, 194, 190, 9, 167, 233, 189, 203, 82, 64, 191, 26, 34, 142, 190, 52, 99, 128, 189, 183, 215, 128, 62, 167, 34, 48, 190, 204, 30, 31, 190, 64, 113, 192, 60, 192, 74, 87, 190, 131, 228, 55, 190, 171, 200, 227, 189, 179, 96, 23, 62, 177, 120, 76, 190, 128, 122, 187, 62, 130, 182, 48, 62, 19, 106, 139, 62, 173, 150, 101, 62, 96, 66, 15, 63, 151, 131, 91, 62, 252, 75, 20, 62, 189, 240, 21, 190, 211, 254, 180, 189, 91, 152, 66, 190, 230, 154, 207, 60, 178, 126, 136, 188, 15, 167, 136, 61, 112, 4, 182, 62, 165, 115, 113, 61, 218, 83, 27, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 138, 20, 189, 214, 88, 193, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {253, 105, 182, 190, 190, 156, 179, 63, 82, 211, 246, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {226, 188, 161, 63, 188, 46, 143, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0017/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}