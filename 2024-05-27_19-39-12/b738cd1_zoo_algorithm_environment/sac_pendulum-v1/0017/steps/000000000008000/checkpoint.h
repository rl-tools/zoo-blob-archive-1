// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 21, 224, 62, 212, 118, 102, 190, 197, 227, 219, 190, 82, 43, 20, 63, 102, 36, 42, 62, 177, 1, 11, 191, 5, 23, 84, 62, 124, 214, 27, 63, 198, 79, 199, 190, 68, 140, 242, 61, 71, 229, 117, 63, 200, 199, 31, 190, 255, 93, 3, 191, 168, 41, 32, 62, 193, 106, 56, 191, 182, 79, 198, 190, 22, 46, 136, 63, 159, 214, 29, 62, 53, 189, 203, 62, 174, 100, 33, 63, 106, 69, 161, 62, 34, 18, 81, 62, 48, 52, 245, 61, 153, 243, 64, 62, 215, 15, 2, 63, 85, 186, 93, 61, 161, 83, 216, 62, 171, 75, 216, 62, 146, 126, 68, 63, 212, 71, 63, 62, 188, 25, 74, 62, 58, 50, 24, 191, 168, 140, 228, 62, 190, 23, 113, 190, 203, 142, 122, 63, 207, 102, 211, 62, 172, 125, 167, 62, 110, 137, 49, 63, 196, 212, 36, 62, 42, 235, 62, 63, 11, 16, 26, 63, 85, 136, 10, 63, 28, 108, 89, 190, 228, 140, 163, 191, 41, 62, 18, 191, 220, 137, 26, 191, 27, 79, 111, 62, 30, 33, 229, 62, 78, 197, 85, 63, 208, 166, 230, 62, 178, 181, 10, 62, 52, 166, 140, 190, 237, 28, 25, 63, 67, 233, 77, 63, 113, 81, 147, 190, 74, 128, 23, 190, 54, 101, 138, 189, 71, 55, 86, 63, 112, 20, 235, 62, 19, 0, 134, 62, 239, 165, 22, 191, 65, 130, 41, 189, 63, 9, 17, 188, 202, 59, 192, 62, 161, 155, 57, 191, 196, 24, 236, 190, 153, 220, 13, 63, 112, 158, 124, 191, 200, 168, 205, 61, 40, 20, 204, 190, 238, 63, 175, 190, 120, 181, 57, 191, 243, 136, 173, 190, 166, 55, 13, 62, 36, 102, 185, 190, 33, 159, 252, 190, 42, 174, 128, 191, 99, 146, 129, 190, 177, 105, 45, 191, 239, 26, 24, 62, 115, 23, 209, 60, 100, 186, 62, 63, 108, 169, 134, 191, 169, 180, 115, 190, 175, 248, 19, 191, 136, 242, 4, 191, 18, 73, 0, 190, 254, 39, 200, 62, 7, 201, 63, 63, 179, 19, 215, 190, 37, 131, 15, 63, 177, 121, 135, 191, 89, 217, 87, 190, 109, 16, 2, 59, 128, 171, 4, 63, 14, 99, 192, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 203, 84, 191, 196, 74, 241, 188, 225, 148, 38, 189, 121, 149, 20, 63, 181, 231, 20, 191, 111, 12, 202, 59, 16, 130, 227, 190, 2, 179, 2, 62, 211, 138, 212, 62, 9, 72, 96, 190, 167, 24, 154, 188, 144, 124, 140, 62, 59, 26, 216, 62, 49, 187, 40, 190, 50, 17, 149, 61, 21, 54, 134, 190, 201, 148, 136, 62, 177, 178, 229, 190, 38, 22, 233, 62, 138, 94, 172, 62, 173, 198, 26, 63, 122, 10, 84, 188, 122, 42, 1, 63, 209, 86, 66, 190, 155, 124, 196, 190, 207, 61, 66, 62, 153, 164, 152, 62, 174, 15, 184, 60, 144, 129, 47, 63, 206, 33, 199, 62, 213, 226, 107, 62, 219, 18, 37, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 18, 111, 190, 146, 106, 105, 62, 145, 71, 237, 62, 73, 85, 166, 62, 253, 158, 24, 190, 59, 155, 82, 189, 232, 89, 171, 62, 142, 6, 111, 62, 176, 203, 22, 62, 195, 74, 37, 62, 52, 114, 244, 188, 107, 29, 206, 58, 170, 32, 54, 62, 62, 8, 113, 187, 174, 232, 103, 190, 149, 20, 93, 188, 21, 255, 168, 62, 133, 178, 17, 188, 46, 105, 185, 190, 127, 82, 91, 62, 193, 195, 138, 190, 195, 232, 176, 190, 232, 32, 198, 189, 213, 189, 44, 190, 1, 56, 177, 188, 68, 50, 54, 191, 150, 14, 179, 190, 171, 238, 170, 190, 147, 116, 41, 191, 87, 194, 85, 62, 152, 20, 197, 190, 15, 14, 177, 62, 206, 46, 82, 190, 225, 230, 197, 60, 89, 92, 35, 189, 227, 134, 117, 189, 82, 208, 119, 61, 201, 202, 202, 188, 185, 34, 42, 190, 179, 147, 34, 189, 176, 178, 130, 189, 144, 86, 30, 62, 174, 11, 3, 61, 197, 159, 173, 61, 221, 223, 215, 189, 31, 115, 235, 60, 113, 57, 96, 187, 180, 231, 150, 189, 152, 127, 67, 190, 159, 65, 254, 189, 216, 233, 188, 189, 77, 115, 30, 190, 234, 229, 164, 187, 200, 243, 144, 61, 228, 83, 163, 59, 101, 51, 236, 61, 236, 110, 78, 189, 237, 33, 170, 189, 241, 248, 151, 188, 209, 108, 171, 189, 150, 129, 240, 188, 165, 37, 18, 190, 22, 190, 29, 60, 174, 136, 97, 61, 199, 182, 247, 190, 5, 109, 56, 190, 109, 244, 179, 189, 115, 225, 215, 62, 116, 153, 99, 62, 154, 144, 12, 190, 238, 106, 19, 60, 24, 105, 235, 61, 140, 80, 36, 186, 235, 137, 185, 190, 120, 136, 29, 190, 224, 184, 2, 189, 78, 104, 31, 62, 134, 36, 0, 62, 139, 123, 12, 190, 162, 3, 143, 189, 221, 102, 178, 62, 103, 94, 10, 62, 103, 211, 10, 61, 150, 219, 79, 62, 41, 57, 117, 62, 247, 71, 54, 190, 66, 240, 39, 62, 56, 223, 101, 189, 235, 213, 127, 61, 224, 54, 48, 189, 47, 113, 133, 61, 218, 251, 187, 190, 197, 53, 1, 190, 158, 42, 163, 62, 88, 255, 253, 189, 159, 140, 80, 190, 141, 53, 5, 61, 15, 175, 90, 185, 32, 194, 248, 60, 212, 194, 69, 190, 192, 193, 210, 61, 227, 11, 21, 189, 227, 40, 68, 190, 194, 183, 109, 61, 207, 106, 167, 61, 157, 49, 53, 190, 247, 251, 123, 59, 203, 231, 3, 190, 6, 144, 196, 61, 212, 101, 170, 61, 221, 218, 7, 189, 97, 155, 42, 189, 101, 147, 104, 188, 95, 119, 69, 61, 185, 59, 23, 62, 51, 133, 65, 61, 255, 66, 167, 189, 112, 224, 18, 190, 229, 117, 103, 190, 137, 74, 47, 190, 33, 14, 7, 62, 181, 142, 22, 190, 152, 125, 70, 61, 38, 96, 157, 59, 196, 37, 179, 189, 168, 8, 200, 189, 136, 72, 122, 61, 190, 231, 32, 190, 124, 254, 36, 189, 88, 179, 80, 62, 69, 213, 35, 61, 68, 196, 62, 62, 114, 111, 138, 189, 81, 231, 131, 190, 38, 68, 154, 190, 202, 175, 4, 190, 125, 214, 18, 62, 218, 96, 109, 191, 254, 192, 199, 190, 62, 109, 30, 191, 225, 85, 84, 62, 116, 25, 57, 190, 66, 133, 150, 190, 149, 208, 6, 62, 42, 95, 212, 60, 155, 194, 191, 189, 101, 191, 58, 190, 46, 248, 156, 61, 36, 221, 107, 190, 34, 70, 157, 188, 110, 47, 39, 62, 201, 180, 135, 189, 19, 71, 81, 62, 201, 62, 71, 191, 173, 199, 99, 190, 159, 186, 128, 62, 2, 207, 178, 190, 24, 67, 139, 62, 3, 84, 250, 61, 131, 230, 156, 61, 98, 34, 173, 190, 13, 218, 158, 61, 80, 115, 5, 60, 97, 100, 111, 61, 102, 80, 48, 61, 244, 41, 25, 190, 149, 250, 237, 189, 61, 206, 55, 61, 93, 95, 149, 189, 185, 69, 218, 190, 113, 87, 20, 190, 163, 163, 238, 60, 236, 125, 89, 61, 96, 161, 1, 61, 36, 209, 72, 61, 49, 241, 187, 189, 57, 138, 171, 62, 238, 255, 160, 60, 91, 235, 189, 62, 255, 184, 69, 62, 115, 28, 188, 62, 49, 29, 78, 61, 162, 161, 17, 62, 67, 235, 57, 62, 30, 191, 150, 61, 72, 104, 129, 61, 215, 71, 127, 62, 227, 215, 89, 190, 46, 150, 179, 61, 180, 11, 164, 61, 78, 238, 1, 189, 212, 38, 151, 189, 171, 240, 79, 190, 176, 168, 216, 190, 54, 120, 253, 190, 46, 205, 26, 189, 102, 208, 70, 190, 212, 147, 98, 188, 200, 51, 21, 190, 99, 179, 168, 189, 54, 79, 91, 61, 181, 94, 241, 189, 41, 20, 186, 190, 11, 124, 229, 61, 95, 28, 131, 189, 194, 181, 103, 190, 130, 201, 8, 190, 96, 221, 233, 188, 102, 78, 16, 191, 192, 195, 13, 62, 254, 6, 89, 189, 220, 221, 146, 190, 200, 248, 152, 62, 49, 181, 36, 189, 22, 19, 214, 190, 226, 129, 201, 190, 114, 54, 12, 62, 88, 175, 15, 189, 69, 70, 184, 62, 108, 52, 195, 189, 10, 245, 59, 62, 77, 167, 48, 191, 77, 16, 37, 190, 17, 139, 63, 191, 78, 9, 145, 60, 253, 15, 37, 190, 120, 172, 60, 62, 199, 129, 217, 190, 248, 89, 49, 62, 185, 74, 215, 190, 163, 216, 6, 62, 234, 118, 72, 190, 138, 247, 88, 61, 25, 143, 35, 190, 159, 70, 89, 190, 187, 146, 8, 191, 248, 249, 35, 191, 168, 148, 238, 186, 26, 139, 145, 62, 98, 14, 31, 190, 145, 240, 163, 189, 103, 149, 175, 190, 198, 236, 88, 61, 48, 250, 159, 189, 226, 233, 72, 62, 77, 128, 27, 189, 240, 99, 4, 189, 222, 19, 204, 60, 51, 21, 82, 61, 243, 160, 8, 61, 187, 3, 131, 62, 61, 161, 171, 190, 42, 100, 138, 62, 1, 46, 20, 190, 27, 132, 42, 190, 36, 4, 122, 190, 190, 202, 175, 190, 205, 205, 178, 189, 178, 32, 114, 190, 251, 23, 148, 188, 22, 10, 128, 62, 168, 57, 128, 190, 86, 12, 240, 61, 179, 77, 73, 62, 89, 196, 49, 61, 7, 212, 87, 190, 148, 235, 31, 188, 46, 21, 35, 188, 74, 207, 104, 189, 115, 94, 181, 61, 181, 64, 36, 62, 133, 199, 107, 189, 61, 42, 57, 62, 0, 194, 219, 189, 204, 157, 156, 62, 140, 41, 197, 61, 213, 21, 174, 62, 8, 225, 42, 62, 104, 37, 108, 62, 172, 61, 4, 61, 237, 226, 161, 62, 38, 61, 163, 188, 10, 125, 229, 61, 103, 66, 174, 189, 202, 188, 47, 62, 21, 42, 123, 189, 216, 185, 62, 190, 175, 77, 149, 190, 15, 109, 135, 190, 123, 72, 78, 190, 213, 233, 13, 62, 245, 175, 250, 61, 175, 170, 63, 191, 96, 230, 70, 62, 231, 137, 186, 190, 231, 102, 53, 188, 33, 4, 54, 189, 73, 209, 3, 191, 90, 108, 210, 61, 210, 96, 62, 189, 85, 9, 171, 62, 76, 210, 86, 189, 154, 119, 250, 190, 229, 236, 106, 190, 39, 114, 75, 60, 249, 144, 181, 189, 103, 59, 231, 187, 230, 83, 230, 188, 239, 12, 146, 189, 21, 214, 205, 189, 187, 192, 118, 61, 120, 80, 96, 191, 166, 254, 130, 190, 102, 158, 25, 191, 98, 89, 251, 60, 248, 187, 59, 62, 119, 192, 23, 190, 221, 80, 175, 190, 101, 206, 70, 62, 14, 123, 201, 62, 41, 137, 64, 60, 100, 146, 33, 190, 150, 93, 236, 190, 222, 25, 143, 190, 168, 251, 72, 187, 143, 86, 142, 190, 185, 58, 29, 189, 94, 211, 10, 62, 121, 118, 109, 62, 192, 153, 1, 190, 126, 12, 125, 62, 173, 87, 70, 190, 104, 126, 12, 61, 158, 225, 138, 189, 199, 205, 28, 61, 19, 20, 16, 62, 134, 46, 4, 62, 140, 254, 75, 61, 153, 84, 134, 190, 187, 209, 4, 62, 59, 153, 236, 190, 199, 243, 25, 190, 155, 173, 165, 61, 69, 178, 12, 190, 181, 59, 122, 189, 199, 209, 187, 62, 177, 42, 130, 189, 143, 211, 23, 62, 227, 61, 145, 190, 129, 103, 115, 190, 205, 141, 27, 62, 244, 213, 55, 190, 180, 6, 193, 190, 142, 161, 134, 188, 199, 93, 169, 190, 131, 224, 103, 62, 206, 234, 194, 190, 108, 212, 176, 62, 28, 113, 128, 190, 81, 218, 138, 61, 17, 203, 43, 190, 70, 187, 28, 190, 191, 91, 102, 190, 126, 84, 149, 189, 254, 56, 150, 62, 108, 233, 229, 61, 18, 63, 88, 191, 241, 18, 68, 62, 77, 112, 117, 62, 173, 44, 9, 62, 159, 8, 175, 189, 189, 171, 175, 189, 30, 47, 12, 62, 91, 19, 231, 189, 118, 214, 194, 188, 190, 220, 252, 190, 245, 55, 84, 190, 202, 232, 21, 189, 76, 171, 148, 62, 85, 255, 226, 62, 40, 119, 33, 62, 197, 112, 186, 189, 25, 136, 55, 62, 112, 250, 151, 190, 16, 133, 176, 61, 37, 146, 250, 61, 194, 40, 85, 62, 83, 98, 143, 190, 207, 17, 87, 190, 181, 117, 142, 190, 148, 46, 22, 191, 158, 124, 177, 61, 118, 232, 171, 61, 249, 90, 128, 191, 108, 9, 146, 62, 166, 251, 112, 189, 212, 118, 143, 189, 129, 129, 137, 190, 159, 142, 29, 61, 8, 20, 6, 62, 141, 9, 63, 62, 207, 133, 181, 59, 127, 69, 198, 59, 131, 161, 35, 60, 248, 1, 168, 61, 146, 193, 63, 62, 160, 81, 17, 62, 24, 255, 181, 188, 223, 16, 116, 190, 34, 119, 211, 190, 54, 94, 71, 61, 127, 176, 21, 62, 159, 100, 81, 61, 55, 171, 232, 61, 39, 205, 142, 62, 119, 123, 17, 62, 238, 144, 188, 190, 246, 100, 231, 190, 120, 223, 43, 190, 203, 144, 117, 62, 139, 125, 231, 61, 62, 233, 161, 189, 160, 160, 4, 62, 214, 210, 119, 61, 125, 66, 228, 189, 196, 113, 224, 62, 185, 224, 20, 191, 223, 75, 32, 190, 239, 141, 152, 61, 141, 56, 240, 61, 51, 26, 93, 61, 130, 22, 154, 190, 61, 18, 93, 62, 89, 61, 3, 191, 255, 91, 138, 188, 15, 207, 30, 57, 23, 90, 52, 62, 164, 150, 246, 190, 164, 143, 240, 189, 121, 190, 82, 62, 70, 207, 63, 189, 44, 59, 56, 62, 132, 236, 50, 61, 100, 147, 33, 191, 91, 109, 43, 62, 69, 103, 150, 188, 168, 117, 57, 191, 254, 27, 251, 61, 189, 95, 201, 189, 209, 88, 133, 190, 196, 191, 5, 191, 103, 189, 72, 189, 86, 201, 48, 190, 105, 110, 1, 191, 58, 166, 108, 62, 131, 195, 135, 60, 13, 67, 19, 59, 146, 12, 35, 62, 193, 174, 28, 62, 93, 253, 38, 61, 235, 16, 162, 61, 32, 214, 102, 189, 11, 122, 50, 187, 137, 37, 130, 61, 227, 64, 151, 62, 48, 77, 149, 61, 248, 145, 159, 190, 185, 136, 195, 61, 10, 200, 172, 190, 28, 161, 26, 188, 14, 104, 11, 62, 113, 186, 205, 61, 240, 129, 138, 61, 125, 164, 156, 61, 245, 118, 195, 190, 140, 174, 71, 61, 219, 97, 253, 190, 240, 36, 114, 189, 22, 209, 25, 190, 119, 189, 13, 191, 90, 117, 30, 61, 90, 250, 216, 61, 255, 161, 197, 188, 145, 151, 251, 188, 129, 109, 156, 190, 203, 26, 138, 62, 127, 18, 147, 190, 184, 61, 153, 60, 139, 1, 164, 188, 202, 202, 53, 190, 146, 152, 87, 62, 18, 227, 182, 59, 56, 131, 27, 189, 57, 37, 216, 189, 214, 55, 144, 190, 162, 86, 31, 62, 20, 148, 30, 62, 114, 145, 24, 61, 85, 126, 67, 189, 181, 48, 8, 61, 91, 60, 175, 188, 64, 143, 215, 61, 181, 223, 25, 62, 140, 132, 169, 190, 143, 204, 160, 190, 235, 181, 184, 190, 208, 183, 28, 62, 188, 26, 199, 62, 58, 46, 171, 61, 226, 58, 140, 190, 209, 236, 195, 62, 147, 166, 106, 61, 52, 74, 184, 190, 246, 23, 136, 190, 192, 2, 92, 62, 214, 246, 163, 61, 237, 169, 11, 60, 149, 217, 180, 62, 233, 234, 123, 190, 201, 97, 50, 190, 181, 206, 27, 190, 204, 8, 40, 191, 158, 81, 167, 62, 52, 173, 51, 62, 112, 170, 146, 61, 145, 228, 103, 190, 77, 196, 206, 190, 15, 141, 195, 62, 47, 180, 138, 187, 12, 187, 16, 190, 46, 145, 112, 189, 42, 208, 55, 190, 230, 170, 177, 61, 119, 71, 150, 190, 201, 120, 48, 62, 5, 183, 171, 189, 32, 247, 79, 62, 206, 93, 232, 190, 250, 244, 91, 62, 196, 129, 17, 62, 5, 120, 178, 61, 236, 21, 54, 61, 102, 15, 176, 62, 139, 200, 85, 62, 85, 212, 164, 189, 150, 138, 111, 189, 135, 189, 74, 190, 119, 90, 61, 191, 82, 115, 41, 189, 245, 254, 112, 190, 33, 20, 140, 60, 84, 39, 229, 190, 87, 190, 222, 189, 70, 205, 62, 61, 73, 52, 36, 190, 92, 132, 233, 190, 191, 242, 39, 191, 10, 19, 14, 190, 85, 253, 171, 61, 155, 2, 183, 188, 36, 255, 86, 190, 29, 64, 84, 191, 57, 141, 206, 189, 121, 41, 196, 190, 100, 62, 130, 62, 95, 26, 26, 190, 215, 240, 241, 61, 48, 165, 70, 190, 232, 81, 143, 189, 15, 45, 151, 62, 181, 226, 189, 62, 27, 180, 188, 190, 43, 130, 89, 62, 122, 34, 127, 190, 156, 59, 127, 189, 103, 183, 0, 191, 179, 146, 143, 190, 132, 61, 30, 189, 236, 150, 5, 189, 72, 167, 160, 61, 24, 4, 15, 62, 203, 61, 34, 190, 62, 93, 62, 188, 162, 48, 7, 190, 66, 175, 4, 62, 229, 237, 130, 62, 237, 106, 61, 191, 74, 220, 13, 191, 196, 113, 88, 62, 18, 70, 142, 61, 235, 209, 231, 188, 183, 109, 17, 191, 17, 117, 175, 62, 190, 95, 145, 191, 91, 232, 186, 61, 171, 197, 156, 61, 204, 50, 86, 62, 60, 242, 16, 190, 173, 182, 129, 190, 111, 246, 101, 61, 60, 224, 141, 61, 13, 15, 45, 62, 251, 105, 52, 62, 224, 144, 18, 191, 188, 138, 80, 62, 232, 248, 151, 62, 82, 228, 219, 190, 73, 226, 137, 190, 100, 7, 42, 191, 13, 54, 150, 190, 199, 72, 212, 189, 198, 247, 76, 62, 35, 235, 134, 62, 2, 143, 39, 190, 31, 178, 138, 62, 4, 185, 3, 62, 31, 217, 131, 62, 42, 116, 168, 190, 132, 101, 163, 190, 216, 214, 22, 190, 136, 142, 53, 189, 178, 200, 181, 62, 51, 84, 165, 189, 12, 116, 168, 190, 147, 163, 162, 62, 120, 100, 16, 190, 55, 194, 169, 189, 185, 158, 67, 62, 247, 149, 155, 61, 184, 147, 124, 189, 78, 91, 127, 188, 194, 133, 31, 62, 216, 35, 221, 62, 193, 75, 128, 62, 248, 18, 110, 190, 37, 30, 170, 190, 162, 37, 135, 189, 161, 194, 164, 62, 11, 14, 71, 190, 79, 247, 137, 189, 8, 117, 97, 62, 165, 197, 85, 187, 8, 249, 128, 188, 224, 186, 31, 189, 192, 103, 1, 190, 197, 45, 4, 63, 56, 135, 147, 190, 254, 194, 153, 61, 110, 146, 138, 190, 119, 202, 218, 190, 59, 1, 170, 62, 136, 208, 146, 62, 153, 76, 2, 61, 111, 104, 129, 190, 8, 182, 138, 190, 166, 46, 189, 62, 135, 29, 221, 188, 83, 153, 224, 188, 184, 170, 11, 189, 55, 202, 34, 189, 9, 124, 58, 62, 46, 197, 62, 190, 94, 236, 194, 60, 7, 3, 18, 190, 212, 6, 158, 60, 145, 237, 25, 191, 122, 169, 236, 61, 53, 77, 181, 62, 225, 249, 192, 61, 217, 194, 19, 190, 177, 5, 142, 62, 200, 202, 171, 62, 191, 116, 141, 62, 170, 80, 134, 62, 185, 48, 159, 62, 56, 49, 15, 190, 246, 26, 100, 189, 37, 222, 243, 190, 171, 160, 0, 191, 174, 95, 193, 187, 178, 184, 220, 187, 226, 71, 35, 191, 146, 226, 40, 62, 187, 11, 78, 189, 112, 96, 132, 188, 247, 4, 5, 190, 190, 211, 54, 190, 54, 152, 129, 62, 225, 101, 104, 185, 126, 187, 12, 188, 54, 29, 171, 189, 245, 172, 67, 190, 16, 218, 57, 61, 148, 213, 43, 62, 234, 4, 120, 62, 207, 142, 6, 190, 247, 236, 208, 190, 14, 159, 72, 190, 235, 66, 247, 188, 239, 36, 102, 62, 130, 107, 142, 188, 1, 246, 175, 188, 135, 73, 107, 62, 183, 15, 179, 61, 101, 193, 49, 62, 114, 200, 192, 62, 198, 230, 135, 62, 254, 45, 138, 190, 200, 240, 32, 189, 76, 15, 17, 191, 230, 184, 187, 190, 207, 25, 212, 188, 58, 121, 205, 60, 180, 7, 95, 191, 249, 91, 144, 62, 1, 22, 47, 62, 68, 6, 194, 189, 101, 26, 175, 190, 240, 133, 28, 190, 227, 209, 151, 61, 87, 209, 9, 61, 66, 11, 208, 60, 70, 193, 100, 189, 79, 211, 26, 190, 214, 101, 3, 190, 252, 190, 87, 62, 114, 61, 140, 62, 210, 3, 184, 188, 120, 69, 112, 190, 151, 60, 247, 189, 115, 45, 211, 61, 214, 218, 6, 63, 2, 125, 51, 189, 159, 89, 51, 190, 226, 95, 232, 62, 176, 139, 29, 62, 235, 56, 154, 189, 5, 25, 182, 61, 16, 169, 158, 189, 133, 60, 171, 61, 183, 208, 236, 189, 126, 248, 68, 61, 249, 254, 140, 58, 172, 69, 70, 61, 185, 162, 28, 61, 214, 249, 41, 189, 188, 212, 211, 61, 15, 78, 179, 188, 172, 8, 49, 190, 5, 173, 46, 190, 238, 116, 178, 187, 189, 159, 28, 61, 102, 220, 182, 189, 137, 200, 51, 190, 155, 216, 47, 189, 82, 86, 110, 61, 143, 241, 8, 61, 90, 138, 246, 61, 78, 154, 16, 190, 101, 6, 217, 60, 53, 213, 7, 62, 215, 147, 146, 189, 36, 20, 217, 189, 246, 52, 184, 61, 251, 181, 189, 189, 193, 247, 50, 190, 226, 245, 188, 189, 18, 149, 222, 188, 92, 57, 175, 188, 186, 158, 34, 62, 102, 250, 104, 61, 194, 202, 24, 61, 179, 4, 23, 190, 191, 35, 47, 62, 208, 199, 180, 190, 232, 170, 203, 189, 224, 131, 50, 190, 98, 62, 69, 191, 234, 99, 160, 62, 93, 174, 8, 62, 54, 222, 90, 62, 214, 130, 181, 190, 32, 113, 164, 190, 84, 201, 125, 62, 114, 7, 178, 61, 213, 244, 171, 62, 203, 190, 19, 188, 79, 31, 10, 61, 44, 120, 199, 60, 93, 196, 69, 62, 58, 61, 18, 62, 145, 139, 157, 190, 219, 92, 215, 190, 14, 39, 184, 190, 172, 208, 121, 62, 14, 19, 204, 62, 218, 31, 162, 61, 182, 248, 97, 189, 81, 100, 29, 62, 250, 211, 135, 189, 2, 251, 184, 190, 35, 31, 245, 60, 231, 209, 176, 190, 17, 62, 157, 61, 106, 173, 231, 61, 168, 41, 192, 190, 95, 160, 185, 60, 151, 45, 105, 62, 91, 94, 186, 62, 70, 150, 36, 191, 162, 78, 126, 60, 183, 150, 232, 189, 151, 134, 57, 62, 77, 98, 155, 61, 157, 71, 216, 61, 76, 214, 227, 189, 118, 248, 112, 62, 125, 120, 66, 189, 249, 42, 24, 190, 248, 249, 196, 62, 242, 67, 26, 188, 25, 85, 78, 190, 76, 64, 164, 189, 190, 63, 91, 62, 230, 41, 239, 187, 114, 77, 24, 62, 130, 12, 104, 190, 22, 56, 90, 190, 195, 120, 228, 61, 130, 195, 49, 62, 113, 123, 13, 190, 103, 72, 35, 61, 200, 86, 153, 61, 15, 243, 135, 60, 147, 107, 135, 189, 215, 92, 151, 61, 76, 112, 224, 189, 225, 185, 186, 189, 66, 58, 151, 62, 118, 226, 227, 187, 102, 47, 25, 61, 157, 144, 4, 63, 108, 200, 136, 189, 67, 235, 167, 61, 52, 19, 45, 61, 130, 224, 83, 62, 156, 140, 189, 187, 210, 220, 94, 190, 238, 180, 90, 62, 21, 38, 224, 60, 19, 132, 221, 190, 128, 7, 122, 62, 176, 38, 54, 191, 8, 100, 121, 190, 27, 62, 140, 190, 229, 156, 17, 190, 57, 177, 231, 189, 125, 83, 36, 190, 169, 7, 163, 190, 9, 29, 137, 191, 162, 32, 75, 191, 168, 184, 211, 61, 169, 164, 135, 191, 153, 219, 36, 62, 88, 119, 204, 189, 189, 137, 45, 188, 42, 116, 180, 189, 173, 192, 135, 189, 102, 232, 201, 60, 14, 221, 18, 62, 61, 242, 51, 189, 115, 81, 24, 190, 67, 49, 16, 189, 29, 215, 41, 190, 113, 39, 41, 62, 66, 235, 234, 189, 154, 83, 23, 61, 47, 34, 253, 189, 154, 26, 199, 61, 228, 24, 141, 61, 197, 112, 246, 60, 66, 35, 183, 188, 180, 70, 133, 61, 195, 97, 182, 189, 66, 8, 38, 190, 205, 25, 167, 61, 135, 125, 31, 189, 15, 100, 176, 60, 11, 80, 0, 61, 31, 237, 228, 61, 185, 136, 57, 190, 228, 20, 246, 188, 70, 70, 26, 190, 142, 238, 213, 187, 113, 241, 140, 189, 142, 168, 223, 189, 57, 207, 8, 62, 106, 221, 37, 190, 97, 164, 53, 188, 36, 140, 199, 62, 98, 85, 119, 191, 199, 20, 143, 62, 33, 187, 244, 189, 192, 241, 253, 190, 33, 192, 41, 191, 177, 122, 246, 61, 12, 229, 211, 190, 112, 209, 213, 61, 21, 22, 2, 61, 51, 137, 31, 190, 22, 72, 55, 191, 53, 223, 131, 190, 146, 35, 178, 190, 241, 245, 63, 190, 139, 168, 58, 61, 64, 255, 139, 189, 250, 91, 62, 62, 25, 60, 45, 190, 118, 178, 19, 191, 55, 101, 149, 191, 187, 125, 28, 191, 132, 127, 219, 190, 235, 131, 116, 189, 124, 190, 21, 190, 206, 63, 119, 61, 42, 27, 165, 190, 165, 21, 215, 190, 165, 149, 111, 62, 8, 131, 163, 62, 193, 250, 243, 188, 237, 98, 198, 189, 84, 35, 89, 190, 97, 222, 11, 191, 31, 210, 71, 189, 246, 90, 231, 190, 23, 218, 88, 190, 198, 92, 69, 190, 34, 101, 2, 191, 228, 110, 251, 62, 148, 255, 115, 61, 148, 197, 10, 61, 92, 136, 88, 190, 154, 87, 23, 191, 0, 145, 95, 62, 179, 18, 23, 190, 125, 198, 33, 189, 176, 209, 71, 188, 199, 227, 141, 190, 26, 118, 232, 188, 59, 190, 30, 190, 228, 82, 156, 62, 0, 87, 166, 190, 245, 165, 16, 191, 193, 249, 52, 190, 82, 42, 158, 61, 136, 1, 220, 62, 249, 124, 4, 61, 67, 105, 100, 190, 188, 142, 124, 62, 26, 166, 185, 61, 233, 104, 200, 61, 170, 79, 135, 61, 127, 179, 163, 189, 147, 101, 7, 61, 95, 72, 240, 61, 199, 203, 38, 190, 159, 111, 232, 61, 205, 110, 162, 61, 168, 17, 136, 61, 67, 125, 139, 61, 43, 141, 26, 190, 28, 115, 124, 189, 184, 84, 56, 189, 86, 199, 134, 189, 175, 143, 252, 58, 225, 214, 42, 190, 162, 4, 226, 189, 187, 164, 150, 60, 193, 212, 172, 189, 42, 145, 232, 188, 216, 240, 63, 190, 98, 89, 21, 190, 98, 18, 155, 61, 180, 107, 221, 189, 150, 240, 252, 61, 242, 51, 215, 61, 74, 54, 8, 62, 190, 47, 130, 189, 90, 141, 54, 189, 32, 228, 9, 190, 66, 237, 37, 190, 172, 46, 251, 189, 85, 14, 203, 190, 80, 125, 20, 190, 240, 188, 24, 189, 82, 243, 213, 62, 100, 242, 159, 61, 243, 58, 46, 190, 158, 143, 168, 61, 26, 215, 178, 189, 103, 121, 101, 62, 121, 124, 247, 189, 105, 223, 12, 189, 236, 132, 188, 187, 196, 198, 37, 62, 239, 118, 85, 62, 181, 89, 165, 189, 242, 63, 58, 190, 69, 86, 34, 61, 167, 113, 19, 189, 229, 240, 96, 189, 177, 48, 83, 61, 1, 174, 204, 61, 131, 140, 81, 188, 24, 104, 103, 189, 177, 42, 11, 190, 149, 234, 16, 62, 252, 211, 15, 190, 167, 79, 33, 62, 70, 120, 9, 191, 95, 199, 247, 188, 220, 248, 138, 62, 30, 165, 143, 190, 90, 177, 189, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {201, 16, 3, 190, 203, 229, 6, 60, 198, 213, 121, 62, 27, 131, 235, 189, 173, 243, 14, 62, 78, 147, 135, 62, 154, 66, 239, 61, 47, 11, 150, 188, 136, 59, 152, 62, 200, 69, 32, 62, 184, 175, 119, 189, 140, 178, 167, 61, 87, 177, 36, 62, 250, 223, 165, 187, 233, 108, 133, 190, 175, 59, 128, 61, 156, 14, 38, 189, 55, 68, 55, 189, 154, 128, 83, 61, 89, 214, 235, 188, 41, 194, 44, 189, 82, 163, 245, 61, 174, 17, 148, 61, 96, 131, 181, 189, 141, 155, 116, 62, 201, 152, 242, 189, 141, 202, 36, 190, 139, 63, 15, 190, 97, 24, 33, 189, 4, 145, 4, 62, 76, 143, 241, 61, 239, 89, 120, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {39, 136, 5, 191, 213, 26, 106, 189, 203, 150, 139, 190, 38, 143, 88, 189, 40, 92, 90, 188, 125, 101, 85, 189, 93, 10, 204, 190, 204, 181, 208, 190, 116, 222, 213, 189, 87, 150, 217, 62, 234, 248, 160, 190, 10, 173, 49, 62, 244, 216, 156, 62, 157, 120, 76, 63, 195, 200, 206, 190, 87, 42, 128, 62, 253, 230, 146, 62, 59, 0, 232, 190, 237, 159, 44, 191, 60, 85, 189, 190, 112, 163, 219, 62, 45, 106, 208, 62, 137, 91, 239, 62, 63, 79, 184, 61, 102, 74, 185, 62, 137, 250, 85, 190, 92, 90, 39, 63, 119, 250, 9, 62, 27, 32, 42, 63, 90, 124, 24, 63, 159, 78, 21, 190, 154, 189, 182, 190, 93, 37, 142, 62, 85, 83, 229, 60, 211, 56, 170, 190, 9, 167, 233, 189, 193, 182, 57, 191, 245, 29, 164, 190, 170, 152, 184, 190, 181, 35, 57, 62, 92, 29, 78, 190, 87, 72, 9, 190, 130, 152, 187, 61, 87, 241, 176, 190, 159, 92, 6, 190, 4, 115, 239, 61, 92, 158, 214, 61, 1, 75, 93, 190, 135, 110, 158, 62, 33, 48, 74, 62, 18, 16, 150, 62, 104, 11, 234, 61, 159, 0, 210, 62, 81, 247, 95, 62, 229, 172, 51, 62, 189, 240, 21, 190, 152, 72, 29, 190, 214, 19, 55, 190, 8, 155, 65, 188, 51, 214, 68, 188, 183, 108, 36, 61, 104, 15, 172, 62, 165, 115, 113, 61, 120, 147, 240, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 111, 219, 187, 180, 20, 181, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {239, 114, 131, 191, 109, 66, 93, 63, 93, 188, 157, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {228, 193, 200, 63, 220, 114, 239, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0017/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}