// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 196, 169, 62, 40, 78, 21, 190, 255, 193, 226, 190, 39, 16, 18, 63, 2, 165, 207, 61, 240, 119, 8, 191, 107, 15, 41, 62, 244, 133, 229, 62, 55, 255, 202, 190, 97, 97, 9, 62, 124, 245, 110, 63, 237, 139, 0, 190, 68, 46, 19, 191, 57, 32, 63, 62, 140, 221, 60, 191, 158, 223, 181, 190, 109, 157, 121, 63, 3, 40, 29, 62, 65, 178, 180, 62, 10, 141, 19, 63, 115, 248, 169, 62, 210, 67, 101, 62, 32, 178, 10, 62, 204, 116, 70, 62, 221, 95, 11, 63, 240, 33, 178, 61, 10, 55, 217, 62, 172, 101, 199, 62, 92, 4, 45, 63, 243, 190, 63, 62, 243, 129, 64, 62, 128, 71, 47, 191, 1, 28, 229, 62, 236, 238, 19, 190, 209, 200, 105, 63, 193, 61, 226, 62, 221, 46, 190, 62, 36, 86, 16, 63, 61, 167, 203, 61, 40, 60, 56, 63, 133, 171, 31, 63, 221, 113, 17, 63, 134, 80, 103, 190, 113, 167, 124, 191, 105, 165, 31, 191, 127, 214, 13, 191, 235, 119, 18, 62, 121, 240, 235, 62, 35, 227, 81, 63, 55, 36, 167, 62, 44, 42, 28, 62, 70, 7, 223, 190, 189, 61, 118, 62, 177, 200, 75, 63, 233, 250, 105, 190, 75, 215, 119, 60, 245, 155, 138, 189, 199, 66, 79, 63, 163, 246, 177, 62, 85, 69, 157, 62, 160, 128, 4, 191, 48, 22, 30, 189, 74, 116, 197, 188, 65, 66, 184, 62, 189, 204, 41, 191, 25, 215, 230, 190, 239, 214, 22, 63, 239, 32, 112, 191, 156, 209, 8, 189, 16, 76, 228, 190, 77, 79, 160, 190, 57, 176, 59, 191, 80, 100, 128, 190, 151, 198, 51, 62, 11, 241, 186, 190, 189, 76, 227, 190, 110, 227, 108, 191, 151, 167, 120, 190, 206, 125, 26, 191, 102, 207, 156, 61, 54, 35, 10, 61, 97, 131, 54, 63, 62, 251, 105, 191, 91, 217, 133, 190, 146, 0, 23, 191, 25, 254, 188, 190, 235, 244, 226, 189, 125, 199, 196, 62, 248, 210, 47, 63, 148, 148, 232, 190, 55, 225, 7, 63, 208, 144, 121, 191, 5, 169, 70, 190, 146, 195, 206, 58, 19, 82, 0, 63, 206, 41, 182, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {126, 11, 45, 191, 14, 10, 39, 61, 106, 195, 16, 189, 136, 65, 9, 63, 196, 185, 9, 191, 95, 28, 196, 60, 114, 159, 197, 190, 152, 117, 19, 62, 215, 204, 208, 62, 1, 113, 112, 190, 20, 146, 29, 189, 219, 112, 80, 62, 26, 77, 215, 62, 86, 140, 0, 190, 101, 136, 71, 62, 24, 66, 196, 190, 86, 236, 146, 62, 131, 23, 222, 190, 43, 133, 249, 62, 212, 51, 182, 62, 237, 166, 22, 63, 203, 44, 27, 61, 138, 208, 2, 63, 183, 175, 34, 190, 194, 129, 221, 190, 156, 215, 40, 62, 190, 211, 163, 62, 76, 7, 75, 61, 235, 82, 43, 63, 181, 155, 191, 62, 149, 147, 134, 62, 163, 111, 14, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 224, 28, 189, 244, 137, 106, 62, 126, 244, 186, 62, 45, 138, 138, 62, 216, 8, 62, 190, 77, 213, 135, 188, 72, 10, 156, 62, 39, 15, 114, 62, 61, 131, 22, 62, 174, 82, 13, 62, 222, 119, 190, 189, 90, 74, 20, 60, 21, 127, 36, 62, 180, 184, 111, 188, 233, 65, 63, 189, 114, 195, 33, 189, 86, 42, 169, 62, 81, 112, 226, 188, 77, 225, 188, 190, 232, 20, 88, 62, 117, 51, 155, 190, 168, 88, 133, 190, 247, 89, 132, 189, 211, 118, 27, 190, 205, 108, 100, 189, 107, 168, 151, 190, 41, 96, 160, 190, 69, 216, 118, 190, 73, 16, 20, 191, 60, 111, 32, 62, 153, 32, 154, 190, 213, 131, 100, 62, 206, 46, 82, 190, 225, 230, 197, 60, 89, 92, 35, 189, 227, 134, 117, 189, 82, 208, 119, 61, 201, 202, 202, 188, 185, 34, 42, 190, 179, 147, 34, 189, 176, 178, 130, 189, 144, 86, 30, 62, 174, 11, 3, 61, 197, 159, 173, 61, 221, 223, 215, 189, 31, 115, 235, 60, 113, 57, 96, 187, 180, 231, 150, 189, 152, 127, 67, 190, 159, 65, 254, 189, 216, 233, 188, 189, 77, 115, 30, 190, 234, 229, 164, 187, 200, 243, 144, 61, 228, 83, 163, 59, 101, 51, 236, 61, 236, 110, 78, 189, 237, 33, 170, 189, 241, 248, 151, 188, 209, 108, 171, 189, 150, 129, 240, 188, 165, 37, 18, 190, 22, 190, 29, 60, 174, 136, 97, 61, 208, 157, 204, 190, 7, 169, 71, 190, 196, 200, 30, 190, 36, 61, 177, 62, 89, 29, 106, 62, 100, 211, 28, 190, 10, 136, 4, 188, 213, 182, 2, 62, 28, 120, 234, 59, 148, 166, 182, 190, 112, 245, 73, 190, 32, 171, 184, 188, 121, 51, 0, 62, 150, 163, 248, 61, 181, 175, 82, 189, 146, 30, 187, 189, 221, 193, 172, 62, 42, 44, 5, 62, 210, 57, 132, 60, 231, 179, 75, 62, 69, 118, 103, 62, 226, 153, 12, 190, 195, 183, 65, 62, 227, 182, 177, 188, 76, 10, 149, 61, 144, 13, 93, 61, 151, 210, 174, 61, 84, 19, 152, 190, 95, 117, 238, 189, 126, 191, 140, 62, 128, 75, 106, 189, 242, 81, 135, 190, 141, 53, 5, 61, 15, 175, 90, 185, 32, 194, 248, 60, 212, 194, 69, 190, 192, 193, 210, 61, 227, 11, 21, 189, 227, 40, 68, 190, 194, 183, 109, 61, 207, 106, 167, 61, 157, 49, 53, 190, 247, 251, 123, 59, 203, 231, 3, 190, 6, 144, 196, 61, 212, 101, 170, 61, 221, 218, 7, 189, 97, 155, 42, 189, 101, 147, 104, 188, 95, 119, 69, 61, 185, 59, 23, 62, 51, 133, 65, 61, 255, 66, 167, 189, 112, 224, 18, 190, 229, 117, 103, 190, 137, 74, 47, 190, 33, 14, 7, 62, 181, 142, 22, 190, 152, 125, 70, 61, 38, 96, 157, 59, 196, 37, 179, 189, 168, 8, 200, 189, 136, 72, 122, 61, 190, 231, 32, 190, 127, 91, 175, 189, 173, 8, 40, 62, 51, 164, 129, 59, 67, 100, 57, 62, 3, 159, 240, 189, 7, 98, 52, 190, 109, 154, 18, 190, 177, 56, 147, 189, 142, 203, 71, 62, 16, 147, 55, 191, 168, 251, 228, 190, 25, 134, 204, 190, 115, 110, 113, 62, 187, 120, 240, 189, 39, 206, 139, 190, 200, 226, 6, 62, 235, 68, 108, 61, 197, 135, 194, 189, 156, 237, 50, 190, 122, 182, 1, 62, 131, 96, 71, 190, 68, 54, 104, 189, 96, 90, 79, 62, 44, 64, 218, 189, 115, 159, 34, 62, 223, 34, 13, 191, 80, 32, 56, 190, 229, 14, 137, 62, 197, 227, 163, 190, 228, 45, 128, 62, 162, 167, 18, 62, 190, 86, 59, 61, 87, 21, 173, 190, 223, 176, 169, 61, 128, 20, 93, 60, 86, 136, 231, 60, 14, 192, 40, 61, 225, 235, 41, 190, 79, 94, 233, 189, 21, 190, 129, 61, 252, 144, 91, 189, 129, 182, 202, 190, 97, 155, 29, 190, 79, 69, 15, 61, 139, 3, 76, 61, 107, 3, 7, 61, 62, 212, 100, 61, 8, 152, 207, 189, 120, 9, 171, 62, 135, 56, 163, 60, 157, 30, 173, 62, 72, 205, 76, 62, 6, 41, 165, 62, 76, 87, 62, 61, 68, 219, 64, 62, 148, 175, 49, 62, 5, 208, 164, 61, 39, 209, 23, 61, 193, 35, 98, 62, 187, 93, 55, 190, 153, 159, 25, 61, 91, 67, 189, 61, 68, 199, 193, 60, 198, 22, 162, 189, 171, 240, 79, 190, 176, 168, 216, 190, 224, 226, 232, 190, 200, 130, 174, 60, 155, 211, 90, 189, 130, 117, 150, 189, 232, 142, 49, 190, 254, 142, 172, 188, 30, 40, 252, 61, 126, 229, 64, 188, 221, 111, 135, 190, 241, 52, 131, 61, 203, 213, 126, 189, 232, 78, 97, 190, 56, 137, 228, 189, 165, 149, 212, 189, 23, 80, 184, 190, 34, 182, 5, 62, 178, 173, 173, 189, 214, 178, 99, 190, 77, 243, 132, 62, 245, 69, 45, 60, 41, 172, 134, 190, 20, 139, 91, 190, 109, 120, 85, 62, 243, 15, 22, 189, 176, 140, 160, 62, 95, 96, 211, 189, 19, 134, 23, 62, 30, 176, 210, 190, 110, 251, 29, 190, 156, 50, 9, 191, 194, 79, 233, 188, 189, 74, 145, 190, 13, 156, 89, 61, 93, 191, 146, 190, 6, 38, 238, 61, 234, 9, 135, 190, 163, 216, 6, 62, 181, 158, 158, 189, 121, 178, 233, 58, 25, 143, 35, 190, 147, 202, 171, 190, 220, 74, 241, 190, 29, 53, 2, 191, 168, 148, 238, 186, 20, 63, 112, 62, 212, 182, 142, 190, 145, 240, 163, 189, 124, 43, 181, 190, 149, 133, 165, 61, 8, 82, 165, 189, 187, 83, 114, 62, 227, 211, 22, 190, 72, 91, 27, 190, 66, 130, 156, 60, 185, 22, 72, 189, 239, 44, 14, 59, 181, 87, 159, 62, 25, 149, 188, 190, 21, 74, 146, 62, 220, 95, 58, 190, 168, 186, 133, 190, 246, 58, 101, 190, 29, 223, 173, 190, 39, 227, 142, 189, 196, 254, 95, 190, 241, 11, 86, 186, 127, 104, 114, 62, 24, 248, 130, 190, 150, 46, 226, 61, 153, 80, 92, 62, 224, 6, 116, 61, 131, 24, 62, 190, 233, 8, 11, 189, 145, 230, 94, 59, 228, 140, 71, 189, 165, 7, 184, 61, 151, 1, 10, 62, 204, 114, 136, 189, 217, 201, 64, 62, 95, 144, 211, 189, 33, 251, 145, 62, 171, 141, 216, 61, 9, 26, 160, 62, 91, 89, 23, 62, 2, 147, 129, 62, 33, 136, 87, 60, 101, 157, 158, 62, 150, 209, 195, 189, 34, 128, 227, 61, 180, 253, 148, 189, 201, 52, 248, 61, 145, 248, 252, 188, 88, 185, 46, 190, 162, 77, 144, 190, 44, 164, 133, 190, 56, 207, 100, 190, 223, 224, 210, 61, 209, 200, 254, 61, 61, 184, 59, 191, 108, 141, 132, 62, 191, 132, 198, 190, 199, 67, 17, 189, 153, 215, 134, 189, 161, 126, 4, 191, 201, 127, 139, 61, 165, 158, 250, 59, 100, 150, 167, 62, 222, 43, 171, 189, 36, 166, 13, 191, 128, 86, 31, 190, 9, 252, 30, 187, 125, 33, 21, 190, 247, 171, 61, 61, 6, 25, 69, 189, 234, 51, 0, 61, 193, 168, 234, 189, 29, 153, 17, 61, 174, 93, 87, 191, 210, 247, 85, 190, 156, 107, 242, 190, 190, 210, 8, 62, 46, 132, 42, 62, 213, 222, 58, 189, 26, 168, 186, 190, 221, 40, 52, 62, 159, 205, 179, 62, 118, 38, 72, 61, 38, 219, 58, 190, 51, 49, 199, 190, 98, 35, 123, 190, 125, 207, 129, 61, 178, 208, 54, 190, 120, 207, 101, 189, 43, 166, 252, 61, 223, 97, 83, 62, 155, 183, 218, 189, 125, 51, 81, 62, 54, 152, 30, 190, 24, 206, 32, 61, 40, 112, 160, 189, 235, 67, 117, 60, 70, 66, 1, 62, 170, 221, 202, 61, 208, 209, 90, 61, 68, 14, 102, 190, 219, 240, 205, 61, 155, 178, 182, 190, 196, 150, 109, 190, 78, 238, 218, 60, 11, 47, 208, 59, 117, 5, 90, 189, 243, 89, 163, 62, 154, 149, 67, 61, 155, 173, 166, 61, 30, 102, 41, 190, 49, 12, 132, 190, 153, 136, 175, 61, 96, 180, 229, 189, 121, 217, 194, 190, 30, 13, 55, 188, 218, 152, 131, 190, 147, 23, 71, 62, 48, 17, 144, 190, 247, 166, 182, 62, 148, 117, 98, 190, 31, 50, 138, 61, 76, 93, 41, 190, 130, 220, 11, 190, 155, 170, 81, 190, 46, 140, 106, 189, 147, 67, 153, 62, 165, 155, 238, 61, 141, 238, 53, 191, 98, 103, 92, 62, 247, 126, 109, 62, 116, 201, 22, 62, 93, 220, 244, 189, 85, 242, 179, 189, 10, 24, 208, 61, 66, 216, 222, 189, 17, 103, 245, 188, 68, 144, 31, 191, 75, 163, 168, 59, 156, 75, 218, 189, 227, 41, 134, 62, 35, 199, 229, 62, 181, 179, 181, 61, 16, 74, 155, 189, 158, 162, 71, 62, 80, 224, 141, 190, 197, 150, 59, 188, 7, 130, 139, 61, 47, 121, 15, 62, 142, 29, 154, 190, 240, 209, 121, 190, 133, 234, 136, 190, 131, 219, 235, 190, 224, 178, 159, 61, 160, 125, 160, 61, 245, 153, 87, 191, 221, 181, 148, 62, 139, 11, 193, 189, 240, 174, 92, 189, 20, 22, 123, 190, 80, 217, 130, 61, 167, 202, 161, 61, 136, 185, 79, 62, 230, 104, 57, 189, 34, 19, 19, 60, 180, 220, 8, 61, 99, 85, 137, 61, 106, 36, 38, 62, 65, 117, 24, 62, 120, 58, 56, 189, 132, 120, 144, 190, 151, 161, 132, 190, 62, 178, 28, 189, 131, 45, 255, 61, 152, 121, 114, 61, 253, 38, 142, 61, 85, 242, 138, 62, 53, 134, 192, 61, 251, 210, 156, 190, 17, 213, 214, 190, 79, 195, 178, 189, 107, 81, 100, 62, 229, 149, 16, 62, 141, 240, 76, 188, 247, 92, 59, 62, 30, 232, 158, 61, 81, 137, 213, 189, 94, 49, 248, 62, 11, 94, 254, 190, 154, 116, 171, 189, 14, 125, 204, 61, 9, 208, 13, 62, 7, 136, 229, 60, 46, 131, 65, 190, 127, 216, 42, 62, 56, 143, 188, 190, 157, 77, 154, 189, 198, 106, 191, 188, 55, 232, 0, 62, 254, 47, 167, 190, 207, 121, 42, 190, 7, 215, 45, 62, 10, 53, 34, 60, 79, 29, 201, 61, 116, 180, 191, 58, 191, 176, 241, 190, 165, 146, 193, 61, 47, 152, 38, 188, 162, 209, 5, 191, 213, 118, 230, 61, 189, 95, 201, 189, 144, 131, 144, 190, 8, 96, 209, 190, 26, 83, 50, 189, 86, 201, 48, 190, 247, 173, 204, 190, 207, 74, 84, 62, 83, 134, 137, 60, 50, 27, 14, 187, 85, 20, 23, 62, 160, 171, 8, 62, 120, 20, 107, 61, 25, 236, 194, 61, 157, 94, 142, 189, 99, 68, 192, 188, 60, 123, 27, 61, 107, 162, 142, 62, 169, 30, 132, 61, 59, 94, 61, 190, 78, 111, 174, 61, 6, 202, 106, 190, 143, 204, 132, 189, 207, 7, 10, 62, 113, 186, 205, 61, 240, 129, 138, 61, 151, 134, 155, 61, 27, 102, 150, 190, 172, 84, 72, 61, 54, 113, 145, 190, 124, 86, 199, 189, 141, 145, 11, 190, 192, 159, 224, 190, 70, 20, 180, 189, 43, 124, 173, 61, 235, 222, 102, 189, 202, 153, 155, 189, 4, 27, 189, 190, 9, 162, 114, 62, 208, 52, 130, 190, 107, 43, 168, 60, 207, 38, 98, 188, 88, 213, 61, 190, 167, 194, 128, 62, 159, 249, 0, 60, 234, 33, 84, 189, 244, 84, 196, 189, 9, 69, 129, 190, 83, 150, 61, 62, 54, 104, 22, 62, 208, 84, 79, 61, 210, 223, 146, 189, 116, 55, 3, 61, 178, 183, 46, 189, 35, 25, 179, 61, 109, 150, 22, 62, 58, 228, 217, 190, 41, 51, 144, 190, 59, 237, 187, 190, 0, 3, 7, 62, 152, 117, 194, 62, 78, 222, 71, 61, 162, 184, 150, 190, 228, 238, 194, 62, 132, 156, 27, 57, 34, 76, 65, 190, 247, 80, 101, 190, 29, 156, 135, 62, 21, 165, 108, 61, 242, 215, 233, 188, 218, 9, 186, 62, 22, 206, 37, 190, 45, 69, 46, 190, 242, 139, 27, 190, 132, 166, 23, 191, 75, 244, 169, 62, 66, 165, 73, 62, 164, 174, 176, 61, 65, 73, 59, 190, 166, 157, 209, 190, 103, 83, 210, 62, 122, 151, 9, 61, 70, 66, 246, 189, 153, 149, 188, 189, 214, 191, 32, 190, 209, 228, 123, 61, 163, 239, 80, 190, 135, 10, 216, 61, 241, 204, 2, 190, 47, 186, 50, 62, 255, 67, 246, 190, 143, 45, 78, 62, 104, 22, 82, 61, 142, 120, 81, 61, 143, 103, 67, 61, 74, 222, 83, 62, 207, 229, 74, 62, 138, 181, 163, 189, 111, 123, 31, 190, 150, 143, 125, 190, 85, 128, 6, 191, 84, 46, 182, 60, 89, 232, 244, 189, 33, 20, 140, 60, 25, 47, 155, 190, 226, 172, 220, 189, 70, 205, 62, 61, 241, 204, 109, 190, 131, 50, 225, 190, 228, 125, 5, 191, 10, 19, 14, 190, 3, 32, 169, 61, 64, 132, 30, 190, 1, 231, 85, 190, 168, 210, 82, 191, 237, 243, 158, 189, 69, 31, 168, 190, 188, 88, 141, 62, 174, 5, 91, 190, 10, 60, 241, 60, 180, 20, 144, 189, 59, 132, 175, 189, 156, 100, 140, 62, 19, 242, 203, 62, 208, 127, 179, 190, 34, 249, 98, 62, 29, 23, 228, 189, 145, 207, 222, 189, 68, 191, 138, 190, 3, 214, 30, 190, 195, 252, 101, 188, 65, 89, 38, 189, 178, 234, 153, 61, 184, 87, 46, 62, 98, 220, 137, 190, 189, 144, 41, 61, 83, 245, 177, 189, 127, 195, 46, 62, 69, 172, 192, 61, 39, 245, 123, 191, 108, 209, 13, 191, 150, 177, 181, 61, 145, 37, 236, 61, 142, 228, 19, 188, 65, 186, 41, 191, 19, 161, 140, 62, 106, 123, 138, 191, 55, 128, 166, 61, 197, 42, 1, 61, 109, 147, 63, 62, 217, 244, 204, 189, 106, 251, 86, 190, 40, 76, 175, 61, 138, 44, 223, 61, 75, 7, 253, 61, 157, 123, 51, 62, 152, 124, 236, 190, 51, 44, 75, 62, 11, 40, 152, 62, 247, 250, 190, 190, 139, 164, 140, 190, 148, 199, 19, 191, 30, 240, 137, 190, 4, 87, 217, 189, 54, 154, 64, 62, 135, 160, 135, 62, 139, 24, 9, 190, 78, 114, 160, 62, 234, 203, 38, 62, 79, 160, 146, 62, 95, 243, 158, 190, 137, 22, 162, 190, 64, 160, 204, 189, 95, 41, 127, 189, 125, 222, 200, 62, 1, 203, 146, 189, 103, 19, 147, 190, 58, 232, 160, 62, 134, 192, 192, 189, 22, 178, 144, 189, 126, 48, 74, 62, 10, 173, 221, 61, 31, 174, 70, 189, 51, 252, 40, 60, 197, 159, 32, 62, 249, 5, 225, 62, 113, 123, 90, 62, 200, 92, 24, 190, 95, 34, 145, 190, 164, 18, 63, 189, 3, 161, 164, 62, 206, 92, 36, 190, 171, 42, 166, 189, 33, 11, 198, 61, 236, 250, 58, 188, 112, 220, 42, 59, 14, 81, 36, 189, 47, 68, 77, 190, 192, 48, 201, 62, 106, 236, 149, 190, 217, 27, 155, 61, 145, 83, 132, 190, 164, 72, 249, 190, 8, 233, 192, 62, 108, 75, 127, 62, 35, 243, 60, 188, 193, 164, 119, 190, 255, 122, 155, 190, 13, 138, 197, 62, 241, 42, 223, 187, 235, 190, 2, 189, 195, 174, 3, 189, 144, 199, 209, 188, 212, 173, 47, 62, 163, 103, 28, 190, 212, 198, 184, 61, 79, 4, 128, 190, 200, 110, 197, 188, 178, 64, 21, 191, 70, 44, 166, 61, 203, 47, 137, 62, 217, 114, 195, 61, 46, 236, 142, 189, 72, 208, 57, 62, 135, 169, 169, 62, 48, 123, 53, 62, 104, 212, 86, 62, 9, 210, 109, 62, 185, 253, 56, 190, 152, 114, 138, 189, 142, 126, 159, 190, 57, 153, 180, 190, 182, 129, 216, 187, 34, 61, 9, 188, 65, 21, 2, 191, 17, 153, 57, 62, 119, 203, 134, 189, 172, 0, 169, 59, 104, 154, 194, 189, 119, 235, 11, 190, 113, 252, 120, 62, 222, 133, 138, 60, 251, 94, 165, 188, 215, 136, 169, 189, 136, 219, 43, 190, 206, 30, 81, 61, 103, 200, 34, 62, 34, 86, 114, 62, 101, 54, 249, 189, 80, 192, 222, 190, 218, 11, 52, 59, 117, 126, 213, 189, 218, 45, 77, 62, 111, 157, 81, 60, 119, 14, 152, 189, 153, 164, 94, 62, 246, 3, 14, 61, 200, 58, 5, 62, 137, 12, 177, 62, 95, 197, 106, 62, 138, 3, 155, 190, 153, 115, 144, 188, 129, 47, 196, 190, 69, 35, 102, 190, 44, 220, 2, 189, 220, 214, 157, 60, 196, 84, 65, 191, 131, 248, 151, 62, 214, 229, 13, 62, 110, 77, 154, 189, 109, 76, 160, 190, 103, 95, 189, 189, 48, 155, 49, 61, 143, 27, 64, 61, 24, 127, 6, 185, 44, 21, 12, 189, 55, 239, 8, 190, 66, 6, 204, 189, 109, 55, 102, 62, 121, 241, 138, 62, 200, 29, 110, 60, 250, 250, 100, 190, 3, 60, 60, 61, 103, 223, 144, 61, 205, 152, 2, 63, 33, 15, 49, 60, 130, 118, 88, 190, 137, 86, 231, 62, 59, 170, 16, 62, 235, 56, 154, 189, 5, 25, 182, 61, 16, 169, 158, 189, 133, 60, 171, 61, 183, 208, 236, 189, 126, 248, 68, 61, 249, 254, 140, 58, 172, 69, 70, 61, 185, 162, 28, 61, 214, 249, 41, 189, 188, 212, 211, 61, 15, 78, 179, 188, 172, 8, 49, 190, 5, 173, 46, 190, 238, 116, 178, 187, 189, 159, 28, 61, 102, 220, 182, 189, 137, 200, 51, 190, 155, 216, 47, 189, 82, 86, 110, 61, 143, 241, 8, 61, 90, 138, 246, 61, 78, 154, 16, 190, 101, 6, 217, 60, 53, 213, 7, 62, 215, 147, 146, 189, 36, 20, 217, 189, 246, 52, 184, 61, 251, 181, 189, 189, 193, 247, 50, 190, 226, 245, 188, 189, 18, 149, 222, 188, 92, 187, 169, 189, 124, 119, 65, 62, 225, 31, 56, 62, 243, 89, 108, 61, 79, 192, 187, 189, 114, 215, 227, 61, 122, 193, 187, 190, 181, 9, 247, 189, 197, 75, 63, 190, 182, 45, 79, 191, 20, 32, 178, 62, 220, 59, 202, 61, 250, 26, 93, 62, 220, 216, 191, 190, 75, 89, 184, 190, 123, 81, 133, 62, 80, 82, 170, 61, 213, 235, 165, 62, 204, 160, 95, 185, 223, 56, 220, 60, 173, 59, 168, 60, 197, 180, 54, 62, 176, 111, 10, 62, 239, 26, 166, 190, 138, 142, 179, 190, 244, 4, 197, 190, 23, 182, 84, 62, 237, 150, 187, 62, 75, 230, 105, 61, 42, 112, 197, 186, 104, 56, 6, 62, 233, 88, 243, 60, 181, 118, 170, 190, 225, 167, 28, 61, 61, 239, 177, 190, 90, 121, 146, 61, 235, 48, 207, 61, 167, 225, 196, 190, 84, 28, 194, 188, 199, 138, 103, 62, 82, 46, 184, 62, 218, 13, 47, 191, 195, 94, 2, 189, 171, 133, 202, 189, 152, 225, 26, 62, 163, 20, 108, 61, 97, 17, 201, 61, 113, 185, 231, 189, 186, 244, 90, 62, 138, 62, 114, 189, 155, 184, 227, 189, 168, 4, 188, 62, 175, 165, 106, 61, 156, 199, 92, 190, 118, 145, 138, 189, 67, 163, 80, 62, 17, 103, 112, 188, 122, 69, 236, 61, 125, 32, 194, 189, 239, 205, 68, 190, 119, 248, 32, 62, 12, 133, 59, 62, 173, 49, 0, 190, 152, 51, 10, 61, 209, 195, 151, 61, 209, 125, 159, 189, 215, 225, 8, 189, 6, 6, 187, 61, 182, 157, 21, 190, 253, 37, 196, 189, 236, 237, 119, 62, 26, 86, 52, 189, 240, 114, 231, 58, 71, 195, 229, 62, 83, 253, 108, 189, 244, 176, 140, 61, 206, 197, 48, 188, 74, 184, 35, 62, 30, 100, 85, 186, 12, 159, 95, 190, 17, 38, 0, 62, 27, 55, 198, 60, 117, 80, 176, 190, 218, 217, 61, 62, 255, 90, 30, 191, 75, 31, 173, 189, 142, 37, 223, 190, 171, 222, 42, 190, 153, 228, 9, 190, 125, 83, 36, 190, 59, 131, 136, 190, 165, 139, 47, 191, 113, 166, 2, 191, 182, 141, 27, 62, 184, 153, 91, 191, 106, 233, 127, 62, 88, 119, 204, 189, 189, 137, 45, 188, 42, 116, 180, 189, 173, 192, 135, 189, 102, 232, 201, 60, 14, 221, 18, 62, 61, 242, 51, 189, 115, 81, 24, 190, 67, 49, 16, 189, 29, 215, 41, 190, 113, 39, 41, 62, 66, 235, 234, 189, 154, 83, 23, 61, 47, 34, 253, 189, 154, 26, 199, 61, 228, 24, 141, 61, 197, 112, 246, 60, 66, 35, 183, 188, 180, 70, 133, 61, 195, 97, 182, 189, 66, 8, 38, 190, 205, 25, 167, 61, 135, 125, 31, 189, 15, 100, 176, 60, 11, 80, 0, 61, 31, 237, 228, 61, 185, 136, 57, 190, 228, 20, 246, 188, 70, 70, 26, 190, 142, 238, 213, 187, 113, 241, 140, 189, 142, 168, 223, 189, 57, 207, 8, 62, 171, 157, 52, 190, 88, 185, 170, 188, 182, 217, 176, 62, 53, 169, 83, 191, 65, 236, 141, 62, 112, 1, 113, 190, 80, 55, 1, 191, 191, 99, 37, 191, 92, 81, 32, 190, 43, 217, 190, 190, 124, 205, 226, 61, 80, 184, 143, 188, 103, 98, 179, 190, 195, 101, 79, 191, 11, 184, 69, 190, 84, 89, 14, 191, 108, 224, 239, 189, 211, 221, 107, 61, 226, 10, 178, 190, 223, 165, 80, 62, 25, 60, 45, 190, 218, 222, 15, 191, 124, 18, 143, 191, 25, 98, 202, 190, 120, 89, 240, 190, 105, 204, 30, 189, 124, 190, 21, 190, 8, 252, 167, 61, 121, 28, 239, 190, 165, 21, 215, 190, 26, 27, 3, 62, 98, 154, 166, 62, 238, 40, 203, 59, 213, 46, 238, 189, 162, 32, 165, 189, 125, 185, 18, 191, 63, 130, 99, 61, 39, 122, 188, 190, 252, 36, 94, 190, 223, 104, 81, 190, 224, 51, 165, 190, 176, 160, 232, 62, 113, 12, 230, 61, 164, 234, 160, 61, 55, 227, 63, 190, 142, 221, 9, 191, 251, 150, 142, 62, 173, 145, 3, 190, 186, 200, 131, 188, 140, 243, 101, 188, 119, 135, 134, 190, 62, 111, 200, 188, 29, 244, 210, 189, 5, 28, 136, 62, 20, 53, 224, 190, 246, 248, 16, 191, 53, 130, 81, 190, 182, 220, 207, 61, 159, 101, 209, 62, 15, 128, 131, 59, 105, 95, 61, 190, 31, 71, 78, 62, 163, 102, 158, 61, 233, 104, 200, 61, 170, 79, 135, 61, 127, 179, 163, 189, 147, 101, 7, 61, 95, 72, 240, 61, 199, 203, 38, 190, 159, 111, 232, 61, 205, 110, 162, 61, 168, 17, 136, 61, 67, 125, 139, 61, 43, 141, 26, 190, 28, 115, 124, 189, 184, 84, 56, 189, 86, 199, 134, 189, 175, 143, 252, 58, 225, 214, 42, 190, 162, 4, 226, 189, 187, 164, 150, 60, 193, 212, 172, 189, 42, 145, 232, 188, 216, 240, 63, 190, 98, 89, 21, 190, 98, 18, 155, 61, 180, 107, 221, 189, 150, 240, 252, 61, 242, 51, 215, 61, 74, 54, 8, 62, 190, 47, 130, 189, 90, 141, 54, 189, 32, 228, 9, 190, 66, 237, 37, 190, 172, 46, 251, 189, 41, 148, 97, 190, 106, 216, 48, 190, 252, 189, 21, 190, 6, 71, 187, 62, 192, 13, 225, 61, 238, 170, 67, 190, 96, 150, 55, 61, 145, 141, 148, 189, 67, 188, 114, 62, 238, 220, 20, 190, 69, 196, 120, 189, 193, 214, 208, 187, 221, 41, 242, 61, 38, 156, 80, 62, 170, 47, 200, 60, 161, 156, 89, 190, 76, 217, 206, 60, 216, 30, 84, 189, 146, 219, 219, 188, 62, 242, 69, 61, 28, 241, 15, 62, 222, 220, 188, 60, 70, 150, 212, 188, 44, 240, 149, 189, 102, 71, 65, 62, 97, 9, 12, 61, 126, 192, 86, 62, 122, 11, 242, 190, 18, 231, 121, 61, 63, 151, 86, 62, 194, 167, 110, 190, 208, 29, 52, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 64, 4, 190, 203, 229, 6, 60, 226, 254, 103, 62, 27, 131, 235, 189, 5, 213, 41, 62, 244, 84, 127, 62, 52, 95, 184, 61, 81, 247, 147, 60, 217, 234, 155, 62, 177, 61, 40, 62, 9, 227, 144, 189, 24, 77, 138, 61, 147, 239, 29, 62, 215, 79, 121, 189, 13, 10, 107, 190, 106, 212, 71, 61, 113, 224, 128, 189, 132, 10, 182, 188, 20, 252, 37, 61, 159, 236, 46, 188, 230, 119, 19, 189, 37, 46, 218, 61, 75, 83, 133, 61, 96, 131, 181, 189, 157, 231, 118, 62, 33, 64, 195, 189, 220, 203, 39, 190, 139, 63, 15, 190, 15, 130, 17, 189, 95, 186, 3, 62, 76, 143, 241, 61, 218, 97, 123, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 234, 197, 190, 213, 26, 106, 189, 44, 250, 122, 190, 38, 143, 88, 189, 146, 167, 42, 189, 57, 185, 108, 189, 230, 86, 156, 190, 161, 188, 229, 190, 246, 44, 210, 189, 57, 50, 251, 62, 111, 13, 92, 190, 16, 187, 44, 62, 231, 220, 125, 62, 41, 149, 21, 63, 143, 72, 116, 190, 147, 181, 134, 62, 212, 227, 147, 62, 120, 47, 177, 190, 41, 73, 24, 191, 213, 53, 180, 190, 112, 250, 229, 62, 255, 27, 162, 62, 17, 169, 215, 62, 63, 79, 184, 61, 18, 10, 199, 62, 140, 49, 73, 190, 105, 9, 4, 63, 119, 250, 9, 62, 69, 93, 56, 63, 103, 58, 232, 62, 159, 78, 21, 190, 71, 113, 148, 190, 43, 173, 135, 62, 85, 83, 229, 60, 14, 74, 153, 190, 9, 167, 233, 189, 80, 195, 28, 191, 19, 36, 159, 190, 115, 160, 85, 190, 124, 230, 39, 62, 14, 66, 83, 190, 190, 225, 157, 188, 21, 118, 7, 62, 175, 55, 177, 190, 155, 159, 17, 190, 214, 229, 39, 62, 3, 200, 97, 62, 248, 240, 138, 190, 198, 171, 111, 62, 5, 194, 27, 62, 82, 4, 70, 62, 89, 60, 120, 61, 47, 101, 150, 62, 199, 160, 50, 62, 79, 158, 32, 62, 189, 240, 21, 190, 207, 69, 58, 190, 33, 40, 83, 190, 48, 68, 82, 61, 51, 214, 68, 188, 67, 67, 29, 61, 68, 181, 113, 62, 165, 115, 113, 61, 86, 251, 52, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 204, 100, 188, 77, 231, 162, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {99, 78, 100, 188, 90, 80, 17, 63, 59, 81, 43, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {160, 118, 95, 190, 196, 37, 84, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0017/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}