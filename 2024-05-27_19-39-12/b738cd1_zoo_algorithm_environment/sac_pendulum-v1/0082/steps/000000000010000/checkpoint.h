// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 193, 29, 63, 252, 255, 140, 61, 45, 52, 47, 191, 144, 145, 59, 191, 144, 93, 162, 187, 202, 209, 238, 190, 15, 177, 32, 191, 194, 111, 113, 190, 130, 154, 5, 191, 81, 232, 155, 62, 251, 33, 178, 63, 62, 237, 158, 62, 105, 106, 215, 61, 253, 139, 78, 191, 11, 19, 116, 190, 240, 156, 124, 191, 68, 61, 149, 61, 82, 217, 222, 190, 103, 229, 239, 62, 20, 75, 128, 62, 28, 245, 186, 190, 80, 3, 19, 191, 135, 125, 131, 190, 173, 28, 233, 189, 15, 187, 141, 62, 84, 78, 153, 191, 46, 161, 165, 190, 6, 13, 196, 62, 89, 161, 107, 191, 118, 161, 88, 190, 183, 135, 173, 61, 73, 92, 147, 62, 99, 113, 16, 191, 153, 161, 129, 191, 106, 89, 229, 187, 5, 67, 214, 61, 61, 162, 176, 190, 49, 137, 108, 63, 112, 89, 254, 61, 220, 155, 10, 63, 29, 65, 125, 63, 51, 50, 105, 62, 214, 113, 167, 62, 24, 120, 38, 191, 177, 254, 12, 191, 80, 52, 124, 63, 15, 59, 95, 62, 17, 239, 40, 62, 185, 126, 88, 191, 64, 252, 37, 191, 102, 37, 91, 62, 145, 77, 25, 191, 237, 172, 250, 62, 205, 95, 182, 62, 33, 77, 135, 62, 87, 59, 49, 191, 105, 16, 178, 190, 147, 192, 99, 190, 172, 70, 232, 62, 124, 189, 184, 62, 188, 103, 181, 190, 126, 135, 126, 191, 155, 146, 137, 190, 178, 56, 67, 191, 131, 39, 196, 191, 251, 93, 200, 190, 203, 33, 146, 62, 241, 23, 108, 191, 74, 123, 61, 190, 40, 34, 215, 62, 59, 219, 182, 191, 86, 68, 163, 190, 64, 115, 242, 62, 223, 200, 112, 191, 227, 45, 140, 62, 53, 34, 241, 62, 119, 22, 123, 63, 229, 149, 163, 62, 187, 160, 215, 190, 114, 206, 127, 63, 18, 165, 17, 62, 209, 221, 2, 191, 209, 124, 183, 191, 237, 135, 196, 190, 113, 216, 54, 63, 165, 107, 88, 63, 45, 62, 210, 62, 12, 16, 223, 62, 162, 245, 235, 62, 215, 89, 175, 62, 171, 38, 250, 62, 147, 22, 86, 191, 180, 254, 84, 59, 35, 230, 223, 62, 99, 6, 139, 63, 130, 28, 180, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 161, 222, 190, 249, 184, 122, 190, 41, 17, 245, 61, 140, 190, 231, 62, 239, 143, 231, 62, 223, 78, 56, 62, 252, 76, 152, 189, 88, 126, 232, 188, 248, 213, 53, 63, 177, 7, 225, 61, 182, 130, 170, 61, 184, 34, 132, 190, 94, 219, 23, 63, 130, 223, 228, 61, 138, 205, 239, 190, 132, 141, 88, 190, 203, 99, 128, 62, 189, 187, 104, 62, 178, 46, 63, 63, 75, 21, 67, 191, 64, 191, 10, 63, 26, 51, 83, 190, 228, 144, 35, 63, 117, 104, 245, 60, 61, 231, 203, 189, 193, 75, 193, 61, 171, 62, 42, 63, 238, 132, 153, 60, 96, 36, 67, 191, 253, 98, 249, 190, 167, 171, 89, 62, 233, 220, 243, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {72, 143, 150, 190, 255, 205, 211, 61, 222, 4, 143, 60, 183, 254, 14, 62, 199, 99, 136, 190, 110, 184, 46, 190, 130, 69, 119, 189, 97, 62, 141, 190, 119, 22, 141, 190, 106, 53, 63, 190, 94, 87, 199, 61, 139, 10, 1, 62, 8, 9, 239, 61, 120, 28, 222, 61, 234, 42, 8, 190, 124, 224, 39, 191, 234, 36, 154, 60, 17, 175, 44, 62, 80, 212, 215, 189, 242, 190, 192, 61, 239, 152, 67, 191, 246, 228, 58, 191, 176, 40, 228, 190, 110, 34, 191, 190, 97, 107, 64, 191, 97, 217, 230, 189, 206, 209, 2, 62, 118, 247, 18, 191, 167, 42, 235, 190, 94, 234, 140, 190, 171, 14, 71, 190, 222, 48, 12, 190, 246, 165, 126, 190, 107, 12, 213, 61, 51, 74, 200, 61, 194, 120, 98, 62, 86, 29, 60, 190, 192, 118, 192, 61, 232, 244, 200, 189, 83, 147, 232, 189, 215, 40, 217, 190, 44, 189, 211, 189, 221, 180, 0, 62, 139, 168, 39, 60, 44, 27, 156, 62, 233, 132, 43, 61, 111, 49, 128, 190, 58, 241, 85, 190, 53, 43, 178, 190, 204, 8, 226, 61, 244, 8, 148, 190, 137, 213, 147, 189, 30, 130, 67, 190, 245, 68, 87, 190, 118, 146, 114, 191, 230, 223, 28, 62, 79, 35, 65, 189, 134, 243, 88, 61, 242, 17, 129, 62, 180, 51, 60, 190, 52, 14, 53, 189, 170, 237, 19, 62, 96, 125, 148, 190, 113, 234, 73, 62, 246, 86, 156, 190, 225, 221, 11, 63, 150, 149, 186, 60, 165, 9, 158, 61, 126, 249, 67, 62, 87, 26, 15, 60, 210, 121, 108, 190, 5, 114, 76, 62, 217, 71, 45, 190, 149, 79, 174, 190, 209, 203, 134, 62, 8, 143, 89, 190, 226, 32, 15, 62, 240, 180, 65, 62, 187, 143, 187, 190, 9, 230, 26, 63, 161, 79, 95, 62, 124, 187, 116, 188, 220, 3, 160, 62, 248, 4, 36, 190, 173, 115, 7, 190, 97, 46, 62, 61, 245, 112, 77, 62, 147, 104, 255, 190, 242, 250, 141, 62, 61, 108, 52, 62, 35, 171, 24, 62, 216, 84, 213, 59, 228, 252, 254, 60, 21, 198, 246, 188, 26, 69, 35, 61, 10, 210, 170, 61, 140, 148, 243, 59, 25, 20, 30, 190, 0, 70, 235, 61, 241, 1, 214, 61, 45, 95, 32, 190, 89, 35, 187, 187, 248, 146, 111, 189, 187, 111, 22, 190, 150, 112, 241, 61, 247, 35, 64, 190, 112, 48, 8, 190, 211, 238, 156, 61, 45, 21, 14, 190, 97, 180, 234, 188, 194, 10, 192, 61, 47, 156, 13, 62, 93, 99, 177, 189, 35, 222, 33, 187, 173, 98, 242, 61, 159, 163, 128, 61, 151, 107, 153, 189, 213, 124, 0, 190, 181, 67, 69, 190, 22, 225, 31, 190, 56, 193, 225, 189, 14, 132, 154, 189, 192, 89, 215, 188, 228, 202, 72, 61, 218, 117, 115, 60, 14, 111, 25, 189, 13, 84, 61, 190, 125, 194, 124, 189, 65, 74, 208, 61, 164, 129, 3, 62, 113, 183, 247, 61, 195, 157, 227, 61, 91, 119, 30, 62, 251, 82, 47, 62, 231, 18, 204, 61, 223, 218, 43, 62, 172, 14, 162, 61, 189, 90, 105, 190, 229, 143, 109, 62, 7, 47, 123, 62, 253, 56, 5, 190, 6, 139, 138, 62, 92, 198, 110, 60, 188, 221, 194, 62, 107, 198, 21, 190, 0, 255, 120, 190, 91, 209, 154, 62, 23, 9, 109, 190, 243, 199, 83, 62, 64, 96, 163, 62, 244, 12, 156, 62, 27, 32, 228, 190, 224, 153, 120, 190, 165, 130, 205, 61, 79, 243, 182, 189, 210, 71, 119, 62, 62, 184, 88, 189, 54, 154, 50, 189, 249, 217, 7, 190, 109, 98, 255, 61, 76, 30, 208, 189, 69, 126, 231, 188, 230, 67, 107, 190, 186, 76, 55, 62, 160, 168, 25, 62, 140, 84, 175, 61, 2, 104, 50, 62, 255, 246, 43, 190, 90, 16, 146, 61, 73, 245, 134, 190, 186, 45, 74, 62, 198, 116, 238, 189, 108, 195, 77, 62, 162, 216, 253, 61, 74, 51, 230, 190, 85, 248, 231, 62, 124, 14, 13, 62, 145, 195, 30, 62, 162, 244, 181, 62, 122, 186, 11, 62, 101, 157, 168, 190, 83, 168, 151, 190, 14, 14, 182, 62, 161, 211, 90, 191, 169, 216, 60, 61, 163, 139, 50, 61, 136, 179, 11, 62, 75, 143, 245, 190, 145, 182, 76, 189, 6, 161, 173, 188, 47, 3, 50, 61, 81, 179, 1, 62, 158, 10, 9, 62, 67, 79, 179, 190, 141, 115, 175, 61, 79, 19, 58, 61, 111, 188, 37, 62, 162, 115, 20, 61, 68, 243, 220, 189, 111, 58, 48, 61, 64, 218, 38, 61, 255, 199, 15, 189, 98, 158, 18, 190, 0, 140, 113, 62, 204, 109, 76, 191, 53, 45, 38, 62, 125, 223, 214, 189, 96, 109, 88, 62, 51, 59, 161, 61, 163, 119, 216, 61, 114, 142, 13, 62, 165, 162, 28, 189, 134, 215, 218, 189, 128, 189, 161, 61, 89, 107, 9, 62, 77, 152, 196, 189, 236, 88, 247, 62, 164, 21, 79, 189, 105, 13, 254, 190, 134, 159, 211, 61, 42, 142, 188, 190, 125, 252, 84, 188, 88, 140, 133, 62, 48, 192, 125, 189, 27, 57, 217, 61, 196, 188, 194, 189, 134, 75, 164, 61, 244, 205, 199, 189, 152, 247, 165, 189, 13, 25, 250, 189, 81, 85, 9, 190, 66, 192, 55, 60, 240, 234, 233, 59, 39, 216, 37, 190, 184, 20, 160, 60, 243, 116, 209, 61, 104, 235, 76, 61, 0, 50, 116, 61, 38, 212, 134, 189, 75, 169, 102, 61, 247, 87, 190, 61, 188, 217, 2, 190, 138, 173, 159, 189, 56, 0, 170, 189, 55, 102, 81, 189, 50, 168, 189, 61, 222, 2, 188, 189, 118, 230, 180, 60, 3, 183, 151, 189, 204, 89, 208, 189, 168, 126, 63, 190, 91, 78, 112, 61, 223, 163, 19, 189, 176, 242, 4, 62, 228, 110, 63, 62, 21, 25, 235, 61, 122, 165, 180, 188, 152, 186, 146, 188, 177, 156, 73, 190, 206, 156, 20, 189, 44, 254, 41, 190, 128, 123, 204, 189, 211, 3, 236, 61, 13, 79, 55, 190, 88, 37, 73, 190, 73, 212, 53, 61, 3, 142, 184, 61, 85, 73, 146, 61, 74, 222, 13, 190, 252, 88, 254, 60, 213, 81, 206, 61, 54, 101, 17, 62, 79, 23, 114, 61, 43, 226, 152, 61, 8, 153, 78, 187, 16, 213, 227, 189, 246, 159, 148, 189, 46, 154, 132, 189, 140, 120, 195, 188, 230, 191, 234, 61, 188, 213, 142, 189, 145, 238, 57, 190, 56, 249, 165, 186, 76, 54, 217, 189, 45, 39, 66, 61, 191, 14, 15, 62, 98, 37, 243, 189, 38, 178, 43, 190, 134, 54, 176, 61, 245, 109, 139, 190, 30, 87, 55, 60, 74, 127, 93, 61, 91, 164, 169, 189, 185, 48, 65, 190, 92, 171, 252, 60, 133, 214, 79, 60, 208, 13, 43, 61, 124, 26, 106, 62, 86, 111, 151, 190, 85, 124, 250, 190, 52, 195, 117, 190, 253, 200, 153, 189, 243, 222, 39, 62, 57, 15, 224, 190, 123, 139, 187, 189, 50, 203, 75, 190, 7, 23, 98, 61, 169, 8, 7, 190, 87, 105, 66, 62, 219, 63, 153, 61, 86, 166, 38, 190, 22, 202, 14, 63, 244, 123, 69, 61, 34, 45, 217, 189, 168, 115, 203, 189, 142, 229, 144, 188, 26, 32, 91, 62, 211, 203, 235, 61, 58, 115, 145, 62, 187, 118, 132, 189, 116, 33, 129, 62, 226, 134, 25, 190, 182, 74, 195, 189, 70, 235, 40, 190, 33, 199, 172, 190, 115, 242, 83, 190, 198, 25, 226, 61, 121, 101, 144, 189, 15, 88, 17, 188, 233, 193, 167, 62, 236, 248, 160, 188, 115, 180, 18, 62, 152, 28, 25, 190, 140, 136, 248, 190, 164, 40, 27, 63, 93, 43, 182, 189, 4, 220, 59, 62, 238, 1, 48, 62, 28, 153, 248, 189, 149, 17, 129, 190, 241, 177, 163, 188, 202, 187, 37, 191, 77, 253, 133, 62, 9, 210, 5, 62, 43, 210, 139, 62, 59, 226, 20, 191, 186, 76, 4, 189, 121, 241, 192, 190, 163, 235, 246, 190, 116, 79, 204, 189, 157, 103, 187, 62, 38, 71, 248, 190, 49, 221, 158, 61, 144, 237, 176, 187, 130, 169, 157, 61, 98, 115, 78, 190, 139, 121, 48, 190, 50, 173, 95, 189, 32, 180, 163, 61, 104, 95, 243, 189, 122, 156, 247, 189, 122, 249, 204, 61, 121, 245, 160, 187, 35, 180, 45, 188, 68, 51, 7, 190, 225, 221, 133, 61, 87, 56, 141, 61, 141, 78, 159, 189, 205, 62, 30, 62, 116, 121, 10, 62, 15, 29, 250, 189, 168, 155, 113, 61, 110, 213, 233, 189, 15, 104, 10, 61, 149, 11, 220, 61, 118, 217, 134, 187, 120, 107, 15, 190, 173, 17, 214, 61, 47, 138, 254, 189, 80, 35, 183, 188, 127, 133, 72, 60, 100, 156, 63, 190, 181, 159, 158, 190, 156, 249, 153, 189, 134, 115, 220, 61, 13, 7, 110, 61, 153, 159, 124, 61, 138, 68, 210, 189, 67, 68, 91, 62, 126, 251, 0, 191, 133, 10, 21, 190, 4, 120, 77, 190, 113, 219, 200, 62, 105, 240, 161, 59, 156, 206, 173, 190, 172, 221, 224, 190, 212, 79, 179, 190, 159, 94, 157, 191, 24, 203, 237, 62, 125, 149, 102, 191, 175, 45, 25, 62, 62, 99, 207, 56, 77, 93, 1, 188, 39, 186, 208, 61, 53, 136, 130, 190, 81, 72, 96, 190, 102, 42, 48, 62, 26, 129, 214, 62, 127, 90, 225, 61, 82, 61, 232, 190, 77, 7, 230, 190, 172, 253, 215, 60, 249, 127, 165, 190, 185, 49, 137, 189, 27, 79, 123, 61, 174, 32, 192, 189, 149, 206, 164, 190, 67, 237, 194, 60, 243, 211, 203, 190, 76, 79, 148, 62, 88, 149, 1, 192, 179, 47, 180, 190, 142, 129, 136, 190, 12, 178, 100, 189, 26, 92, 169, 191, 199, 95, 216, 62, 71, 47, 248, 190, 29, 114, 133, 62, 234, 137, 165, 62, 231, 31, 180, 190, 184, 13, 201, 188, 196, 134, 187, 190, 81, 96, 121, 62, 201, 238, 114, 62, 52, 140, 143, 191, 49, 64, 27, 190, 13, 49, 195, 190, 6, 215, 185, 191, 36, 221, 1, 191, 123, 156, 28, 61, 219, 77, 143, 190, 92, 107, 67, 190, 135, 45, 13, 63, 236, 94, 174, 191, 50, 190, 47, 190, 171, 44, 4, 190, 86, 1, 6, 190, 80, 17, 149, 190, 241, 168, 55, 61, 28, 137, 56, 63, 83, 191, 212, 61, 37, 117, 3, 62, 75, 247, 97, 189, 251, 242, 149, 189, 115, 237, 173, 189, 54, 90, 14, 191, 101, 139, 67, 190, 23, 98, 19, 191, 212, 167, 200, 62, 230, 206, 48, 191, 49, 1, 146, 61, 97, 32, 115, 61, 125, 198, 177, 190, 47, 150, 31, 63, 224, 29, 85, 60, 227, 247, 58, 62, 26, 223, 156, 60, 82, 239, 73, 189, 197, 103, 59, 191, 62, 35, 203, 190, 235, 139, 231, 61, 152, 150, 149, 191, 141, 135, 61, 189, 173, 150, 88, 62, 4, 75, 169, 189, 235, 18, 16, 191, 138, 8, 141, 62, 158, 156, 46, 62, 210, 47, 143, 190, 141, 62, 149, 62, 216, 86, 139, 61, 139, 181, 252, 188, 83, 20, 226, 188, 2, 129, 19, 190, 191, 216, 230, 189, 182, 52, 41, 190, 179, 72, 61, 61, 129, 27, 1, 188, 31, 222, 211, 62, 49, 233, 136, 62, 69, 103, 132, 61, 138, 146, 31, 62, 80, 122, 30, 190, 114, 195, 218, 190, 46, 203, 10, 62, 75, 152, 117, 190, 198, 28, 160, 62, 166, 14, 26, 62, 190, 70, 63, 62, 154, 19, 90, 189, 233, 189, 163, 187, 16, 215, 222, 188, 60, 46, 172, 62, 103, 69, 109, 62, 62, 123, 136, 62, 207, 234, 162, 190, 153, 126, 0, 191, 38, 165, 216, 61, 147, 230, 29, 191, 146, 5, 22, 190, 183, 63, 157, 62, 138, 184, 231, 190, 47, 40, 83, 190, 225, 219, 15, 191, 158, 128, 12, 191, 52, 255, 46, 62, 92, 167, 217, 60, 157, 99, 1, 191, 252, 6, 155, 61, 8, 105, 50, 59, 217, 47, 96, 62, 73, 151, 47, 62, 200, 184, 213, 190, 126, 84, 0, 62, 119, 5, 48, 62, 82, 189, 159, 189, 90, 34, 130, 62, 53, 210, 94, 190, 61, 122, 36, 62, 109, 19, 252, 61, 37, 250, 208, 189, 234, 91, 141, 190, 51, 218, 107, 190, 37, 194, 38, 191, 193, 72, 16, 62, 76, 246, 169, 60, 229, 112, 134, 62, 156, 246, 104, 190, 138, 125, 51, 62, 239, 221, 156, 190, 9, 161, 33, 191, 77, 162, 251, 190, 172, 0, 185, 62, 2, 101, 182, 190, 86, 174, 98, 61, 53, 119, 153, 189, 101, 171, 96, 190, 126, 192, 251, 59, 194, 234, 39, 185, 229, 236, 66, 190, 63, 247, 8, 62, 195, 56, 114, 189, 44, 209, 63, 190, 168, 103, 108, 186, 92, 16, 255, 187, 254, 119, 178, 188, 131, 237, 41, 190, 130, 219, 156, 189, 94, 208, 195, 61, 58, 147, 246, 60, 97, 54, 136, 187, 97, 105, 61, 61, 198, 18, 198, 59, 142, 163, 165, 60, 5, 183, 222, 189, 179, 32, 138, 189, 155, 118, 195, 187, 69, 255, 8, 62, 9, 84, 141, 189, 8, 188, 183, 61, 130, 200, 131, 61, 162, 203, 178, 61, 74, 116, 216, 188, 164, 160, 20, 61, 239, 252, 11, 61, 140, 64, 82, 190, 45, 222, 22, 191, 117, 239, 182, 62, 100, 117, 17, 61, 208, 10, 136, 62, 219, 140, 64, 191, 54, 208, 136, 62, 8, 194, 187, 61, 211, 109, 33, 188, 164, 175, 146, 191, 140, 247, 147, 189, 5, 42, 92, 62, 216, 59, 125, 61, 42, 6, 85, 62, 252, 109, 186, 62, 238, 84, 27, 191, 163, 116, 23, 191, 174, 254, 162, 60, 203, 43, 147, 62, 39, 90, 14, 191, 116, 208, 205, 187, 31, 52, 182, 190, 227, 204, 163, 191, 144, 139, 90, 191, 213, 52, 28, 62, 89, 207, 2, 190, 153, 227, 139, 62, 123, 161, 73, 62, 242, 128, 172, 191, 52, 158, 26, 62, 39, 79, 230, 61, 74, 90, 103, 190, 242, 36, 207, 59, 46, 140, 135, 190, 218, 14, 157, 61, 22, 56, 156, 61, 92, 15, 45, 191, 7, 24, 181, 61, 63, 238, 129, 62, 124, 202, 28, 190, 170, 142, 158, 61, 198, 101, 125, 61, 144, 239, 4, 190, 69, 213, 132, 62, 251, 161, 1, 63, 129, 86, 2, 190, 153, 51, 35, 62, 14, 3, 84, 61, 130, 40, 127, 188, 133, 93, 21, 59, 39, 46, 154, 189, 130, 189, 239, 60, 235, 59, 104, 189, 53, 202, 90, 62, 181, 162, 163, 62, 50, 49, 122, 61, 100, 76, 101, 60, 225, 119, 141, 191, 102, 177, 163, 60, 105, 68, 4, 62, 89, 15, 16, 62, 185, 8, 60, 186, 135, 126, 243, 189, 123, 83, 4, 191, 212, 4, 29, 60, 208, 4, 154, 189, 51, 50, 60, 62, 123, 79, 199, 62, 246, 220, 233, 60, 187, 225, 87, 62, 7, 218, 3, 62, 250, 116, 101, 62, 175, 156, 57, 62, 36, 51, 182, 190, 185, 181, 134, 188, 162, 156, 191, 62, 243, 221, 192, 187, 161, 148, 251, 59, 45, 96, 68, 61, 92, 239, 235, 189, 46, 187, 47, 62, 245, 73, 228, 189, 133, 98, 52, 189, 58, 90, 63, 62, 110, 155, 99, 61, 74, 39, 227, 189, 97, 218, 54, 62, 68, 91, 182, 190, 175, 250, 153, 188, 129, 59, 224, 185, 163, 2, 115, 189, 36, 3, 8, 62, 53, 241, 175, 61, 54, 178, 107, 62, 70, 108, 129, 62, 153, 93, 212, 190, 178, 35, 134, 62, 164, 25, 119, 61, 146, 47, 237, 61, 140, 202, 147, 187, 177, 10, 9, 62, 166, 186, 39, 61, 38, 19, 133, 62, 1, 36, 244, 58, 188, 235, 45, 61, 170, 42, 69, 62, 80, 180, 141, 189, 71, 64, 149, 62, 27, 67, 13, 190, 193, 135, 66, 62, 253, 130, 195, 61, 203, 234, 168, 189, 145, 34, 144, 62, 191, 12, 102, 62, 114, 151, 10, 190, 139, 126, 225, 61, 97, 72, 16, 189, 251, 152, 14, 62, 209, 235, 124, 62, 142, 193, 158, 62, 89, 184, 102, 190, 0, 146, 229, 61, 141, 210, 140, 62, 62, 84, 241, 187, 202, 115, 11, 62, 230, 132, 147, 59, 112, 2, 189, 189, 111, 220, 127, 60, 162, 36, 46, 62, 15, 213, 108, 190, 233, 172, 94, 62, 159, 74, 143, 188, 1, 25, 87, 61, 39, 191, 46, 62, 83, 137, 240, 61, 221, 231, 44, 190, 127, 90, 76, 62, 74, 241, 188, 189, 93, 155, 211, 190, 161, 8, 138, 62, 253, 32, 181, 189, 206, 174, 60, 62, 197, 150, 71, 62, 11, 92, 235, 61, 68, 133, 140, 62, 34, 121, 35, 62, 254, 57, 198, 61, 50, 254, 20, 62, 36, 190, 197, 189, 56, 236, 206, 61, 248, 204, 96, 62, 40, 153, 149, 62, 225, 196, 84, 190, 70, 103, 18, 62, 227, 58, 21, 62, 32, 105, 85, 62, 136, 112, 72, 62, 113, 0, 107, 189, 191, 49, 215, 61, 215, 247, 7, 62, 64, 101, 30, 62, 84, 57, 63, 61, 114, 51, 30, 190, 187, 251, 11, 62, 252, 147, 66, 190, 157, 153, 115, 62, 229, 27, 162, 61, 245, 185, 173, 189, 202, 228, 119, 61, 85, 217, 91, 62, 206, 46, 123, 61, 95, 37, 22, 187, 144, 215, 245, 62, 26, 132, 17, 191, 123, 112, 186, 61, 134, 191, 38, 61, 142, 91, 200, 189, 100, 19, 29, 62, 100, 248, 145, 61, 168, 200, 140, 62, 30, 6, 12, 191, 162, 252, 77, 62, 172, 38, 215, 61, 134, 84, 237, 61, 16, 189, 207, 188, 138, 191, 163, 62, 198, 116, 87, 61, 33, 235, 183, 190, 52, 13, 169, 61, 104, 4, 82, 191, 244, 214, 152, 190, 229, 8, 77, 62, 194, 122, 54, 190, 253, 176, 182, 190, 29, 237, 245, 61, 240, 200, 62, 62, 48, 78, 223, 61, 28, 224, 135, 189, 247, 95, 132, 62, 102, 183, 152, 189, 72, 197, 27, 62, 81, 194, 134, 62, 218, 179, 207, 190, 3, 93, 131, 62, 33, 191, 76, 62, 0, 207, 189, 62, 172, 172, 247, 62, 73, 88, 124, 190, 185, 206, 194, 62, 3, 102, 234, 62, 150, 249, 147, 189, 78, 103, 52, 190, 97, 57, 140, 189, 222, 101, 54, 62, 29, 87, 174, 189, 223, 111, 151, 189, 6, 192, 166, 190, 133, 64, 143, 191, 110, 96, 110, 189, 13, 173, 170, 62, 224, 173, 175, 61, 100, 203, 113, 188, 124, 59, 31, 190, 135, 155, 40, 191, 188, 238, 232, 189, 86, 224, 85, 61, 114, 15, 232, 189, 254, 79, 14, 62, 123, 94, 92, 188, 186, 66, 13, 190, 54, 9, 143, 61, 133, 122, 4, 62, 93, 177, 107, 61, 139, 213, 210, 189, 68, 42, 246, 189, 152, 81, 184, 189, 154, 191, 96, 61, 249, 95, 73, 59, 143, 211, 202, 60, 84, 111, 153, 188, 73, 98, 247, 189, 39, 10, 134, 189, 80, 37, 246, 188, 150, 214, 2, 190, 222, 236, 175, 61, 193, 166, 61, 190, 116, 164, 120, 188, 224, 229, 167, 189, 17, 250, 186, 61, 4, 53, 56, 61, 38, 128, 58, 189, 159, 17, 49, 190, 178, 120, 62, 189, 145, 11, 8, 190, 209, 131, 249, 61, 76, 100, 1, 190, 28, 239, 156, 61, 32, 205, 163, 61, 158, 238, 249, 61, 144, 241, 136, 60, 84, 192, 37, 60, 244, 118, 87, 189, 169, 90, 183, 61, 40, 240, 49, 189, 102, 88, 79, 60, 24, 38, 130, 189, 141, 161, 158, 61, 0, 54, 32, 190, 45, 24, 93, 190, 203, 144, 0, 190, 207, 214, 2, 190, 216, 23, 85, 189, 51, 27, 203, 188, 155, 211, 235, 188, 93, 36, 44, 61, 200, 150, 248, 189, 135, 209, 19, 60, 177, 221, 189, 189, 156, 184, 246, 61, 215, 145, 226, 60, 98, 18, 173, 188, 145, 90, 178, 61, 14, 117, 167, 185, 122, 122, 125, 189, 99, 169, 195, 189, 234, 19, 10, 61, 131, 207, 51, 190, 223, 133, 66, 190, 26, 253, 226, 189, 169, 211, 124, 62, 55, 45, 125, 190, 93, 21, 253, 189, 4, 100, 223, 61, 196, 84, 32, 61, 72, 33, 84, 59, 50, 106, 158, 62, 230, 205, 159, 186, 188, 167, 104, 62, 216, 246, 111, 61, 145, 211, 43, 190, 112, 94, 190, 62, 73, 248, 92, 190, 186, 165, 41, 190, 100, 139, 199, 61, 115, 249, 155, 190, 253, 90, 77, 62, 192, 225, 203, 189, 125, 220, 215, 59, 168, 188, 100, 190, 20, 112, 161, 188, 184, 59, 235, 190, 98, 5, 191, 60, 82, 57, 184, 60, 9, 235, 230, 62, 69, 243, 32, 190, 87, 232, 70, 190, 204, 61, 130, 190, 13, 245, 73, 191, 233, 174, 143, 190, 149, 88, 132, 62, 255, 221, 60, 190, 69, 196, 254, 190, 66, 114, 115, 62, 57, 246, 87, 62, 60, 194, 144, 188, 184, 138, 75, 61, 67, 201, 225, 61, 203, 39, 131, 190, 68, 182, 177, 62, 248, 174, 200, 189, 201, 37, 129, 190, 188, 244, 23, 62, 224, 11, 232, 189, 200, 53, 207, 62, 129, 73, 140, 62, 236, 150, 75, 190, 35, 131, 153, 62, 94, 66, 98, 190, 165, 97, 242, 189, 126, 4, 134, 190, 160, 91, 2, 188, 158, 63, 178, 62, 101, 83, 16, 189, 78, 96, 21, 191, 204, 78, 41, 190, 40, 73, 26, 190, 135, 22, 75, 62, 105, 211, 126, 62, 161, 200, 78, 62, 57, 70, 170, 62, 30, 31, 7, 62, 144, 237, 59, 190, 220, 209, 97, 62, 55, 152, 104, 62, 95, 141, 182, 190, 112, 42, 27, 189, 119, 103, 147, 189, 201, 172, 155, 189, 67, 20, 171, 190, 175, 191, 177, 62, 215, 5, 26, 190, 6, 182, 83, 62, 32, 169, 161, 62, 17, 133, 141, 190, 82, 241, 105, 62, 113, 16, 207, 189, 205, 165, 153, 190, 162, 163, 154, 62, 44, 242, 3, 61, 72, 172, 130, 62, 2, 139, 116, 62, 120, 109, 116, 62, 28, 182, 195, 61, 216, 157, 0, 189, 178, 134, 40, 191, 39, 25, 175, 62, 58, 56, 47, 188, 151, 237, 211, 60, 39, 51, 236, 189, 126, 84, 227, 189, 197, 24, 208, 190, 229, 229, 44, 191, 139, 106, 224, 190, 90, 211, 166, 62, 222, 162, 196, 190, 188, 240, 1, 62, 49, 17, 187, 190, 33, 183, 11, 62, 29, 26, 13, 189, 197, 29, 176, 61, 93, 138, 156, 61, 251, 61, 171, 62, 171, 55, 114, 187, 123, 85, 5, 190, 137, 95, 28, 189, 1, 49, 72, 190, 160, 186, 35, 62, 144, 247, 128, 188, 133, 63, 15, 61, 77, 246, 138, 59, 95, 133, 76, 190, 112, 48, 176, 61, 17, 60, 47, 62, 69, 99, 25, 61, 142, 8, 150, 190, 64, 100, 93, 189, 87, 141, 155, 190, 50, 15, 2, 189, 136, 82, 186, 190, 80, 169, 9, 189, 114, 62, 115, 61, 151, 13, 208, 60, 89, 242, 162, 190, 243, 233, 96, 60, 1, 115, 61, 190, 237, 27, 108, 62, 192, 164, 30, 190, 105, 152, 99, 61, 51, 58, 108, 61, 11, 82, 104, 189, 167, 68, 1, 190, 195, 20, 89, 190, 232, 129, 32, 190, 255, 37, 142, 59, 184, 18, 234, 188, 130, 131, 204, 189, 255, 70, 80, 190, 114, 132, 220, 61, 130, 57, 244, 61, 156, 98, 139, 189, 139, 120, 13, 190, 202, 26, 33, 190, 138, 230, 15, 62, 51, 44, 57, 189, 108, 42, 154, 189, 87, 186, 187, 61, 113, 84, 217, 61, 202, 146, 84, 190, 236, 236, 209, 188, 27, 218, 136, 61, 15, 125, 147, 61, 239, 161, 20, 62, 89, 2, 19, 190, 24, 207, 130, 188, 218, 81, 90, 189, 54, 250, 47, 190, 125, 21, 30, 190, 97, 77, 104, 61, 47, 100, 100, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 14, 115, 190, 84, 183, 252, 60, 245, 124, 125, 62, 221, 115, 98, 60, 137, 218, 160, 62, 165, 172, 21, 62, 63, 81, 53, 62, 227, 77, 116, 189, 161, 245, 29, 190, 35, 41, 251, 189, 210, 12, 15, 62, 235, 179, 32, 190, 93, 197, 148, 189, 77, 11, 76, 62, 31, 217, 134, 188, 161, 22, 43, 62, 108, 129, 12, 61, 224, 135, 70, 190, 48, 104, 50, 62, 220, 93, 51, 190, 195, 136, 166, 189, 65, 209, 173, 62, 78, 130, 106, 62, 120, 150, 128, 61, 119, 124, 4, 62, 137, 232, 44, 189, 121, 151, 22, 190, 105, 42, 229, 61, 92, 47, 80, 189, 87, 216, 120, 62, 144, 59, 103, 62, 120, 207, 112, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {181, 115, 40, 191, 195, 126, 250, 62, 139, 31, 217, 190, 137, 148, 9, 62, 239, 48, 51, 190, 215, 228, 122, 190, 230, 123, 149, 61, 125, 170, 141, 60, 63, 164, 253, 61, 21, 158, 146, 190, 34, 109, 83, 63, 121, 210, 7, 190, 139, 187, 115, 191, 44, 70, 133, 63, 11, 108, 25, 191, 31, 37, 166, 62, 99, 214, 221, 62, 70, 72, 49, 188, 143, 163, 20, 63, 221, 234, 196, 190, 217, 67, 96, 62, 141, 195, 37, 190, 217, 215, 19, 190, 248, 185, 90, 62, 169, 100, 250, 190, 117, 239, 122, 189, 0, 67, 43, 61, 208, 250, 187, 62, 163, 166, 24, 63, 6, 133, 41, 63, 38, 210, 149, 189, 95, 10, 124, 189, 136, 6, 47, 189, 82, 10, 78, 61, 135, 169, 150, 61, 87, 35, 3, 62, 21, 64, 149, 190, 59, 244, 92, 190, 63, 227, 12, 191, 224, 179, 191, 188, 10, 227, 241, 61, 173, 92, 98, 189, 162, 210, 178, 62, 133, 54, 151, 58, 244, 9, 178, 62, 103, 154, 68, 62, 158, 214, 40, 62, 39, 140, 140, 62, 12, 243, 214, 188, 9, 193, 193, 59, 122, 32, 13, 190, 157, 172, 10, 62, 161, 242, 124, 62, 181, 161, 249, 189, 6, 199, 48, 189, 151, 159, 209, 189, 35, 242, 222, 60, 45, 162, 46, 190, 217, 201, 140, 188, 193, 232, 141, 188, 134, 126, 2, 190, 219, 196, 168, 190, 26, 252, 125, 190, 29, 38, 205, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 7, 100, 188, 251, 250, 206, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {58, 28, 160, 62, 254, 130, 65, 63, 74, 189, 228, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {43, 19, 112, 191, 91, 39, 85, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0082/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}