// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 173, 24, 63, 16, 147, 240, 61, 241, 53, 50, 191, 65, 9, 85, 191, 198, 43, 186, 60, 6, 248, 201, 190, 57, 77, 46, 191, 125, 143, 239, 189, 144, 113, 230, 190, 224, 133, 137, 62, 226, 89, 201, 63, 47, 141, 117, 62, 1, 121, 101, 61, 158, 209, 70, 191, 54, 198, 115, 190, 140, 198, 113, 191, 54, 111, 58, 188, 101, 0, 200, 190, 85, 91, 245, 62, 210, 169, 122, 62, 48, 94, 190, 190, 102, 240, 40, 191, 211, 191, 190, 190, 229, 21, 27, 190, 100, 249, 117, 62, 143, 201, 165, 191, 1, 106, 147, 190, 237, 207, 183, 62, 81, 120, 129, 191, 168, 187, 66, 190, 176, 179, 160, 61, 117, 141, 195, 62, 194, 226, 253, 190, 200, 66, 132, 191, 168, 177, 75, 61, 180, 204, 37, 62, 80, 148, 182, 190, 15, 167, 126, 63, 171, 49, 46, 62, 161, 4, 9, 63, 143, 203, 144, 63, 104, 16, 88, 62, 47, 213, 94, 62, 98, 83, 21, 191, 90, 207, 12, 191, 205, 186, 126, 63, 233, 201, 121, 62, 182, 37, 200, 61, 133, 108, 55, 191, 48, 173, 80, 191, 97, 57, 150, 61, 224, 197, 23, 191, 140, 0, 171, 62, 101, 45, 185, 62, 176, 14, 254, 188, 248, 88, 32, 191, 73, 195, 240, 190, 1, 166, 135, 190, 203, 18, 150, 62, 240, 184, 239, 62, 91, 27, 245, 190, 124, 116, 142, 191, 87, 88, 43, 190, 143, 42, 59, 191, 87, 34, 208, 191, 96, 45, 181, 190, 28, 164, 49, 62, 76, 202, 124, 191, 226, 81, 58, 190, 120, 6, 201, 62, 196, 66, 196, 191, 149, 124, 162, 190, 187, 200, 227, 62, 210, 168, 128, 191, 53, 207, 149, 62, 43, 78, 234, 62, 187, 218, 141, 63, 71, 141, 142, 62, 82, 106, 215, 190, 137, 29, 137, 63, 39, 211, 53, 62, 108, 4, 1, 191, 183, 29, 194, 191, 6, 10, 167, 190, 34, 175, 80, 63, 103, 67, 128, 63, 235, 222, 191, 62, 17, 206, 248, 62, 222, 175, 3, 63, 3, 61, 184, 62, 248, 112, 235, 62, 45, 86, 124, 191, 119, 28, 74, 61, 81, 124, 221, 62, 32, 85, 163, 63, 155, 51, 140, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 150, 1, 191, 186, 71, 43, 190, 117, 180, 15, 62, 196, 236, 212, 62, 207, 112, 187, 62, 30, 168, 14, 62, 65, 144, 220, 189, 172, 246, 13, 190, 197, 178, 55, 63, 228, 13, 212, 61, 60, 97, 191, 61, 42, 21, 82, 190, 181, 206, 14, 63, 18, 0, 200, 61, 154, 2, 18, 191, 109, 197, 98, 190, 85, 161, 210, 62, 41, 108, 196, 62, 220, 126, 41, 63, 2, 231, 57, 191, 83, 187, 20, 63, 117, 130, 123, 190, 188, 111, 17, 63, 102, 148, 60, 60, 33, 252, 1, 190, 23, 40, 162, 61, 46, 148, 36, 63, 187, 240, 253, 188, 159, 218, 48, 191, 196, 148, 206, 190, 49, 143, 87, 62, 100, 128, 222, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {39, 212, 240, 190, 158, 11, 248, 61, 97, 190, 254, 61, 180, 146, 57, 62, 224, 140, 24, 191, 192, 67, 229, 189, 123, 77, 43, 189, 134, 126, 250, 190, 239, 196, 7, 191, 106, 53, 63, 190, 24, 127, 168, 62, 237, 76, 163, 188, 238, 72, 15, 62, 136, 248, 46, 62, 250, 206, 102, 190, 191, 25, 111, 191, 59, 20, 182, 189, 0, 199, 5, 62, 214, 100, 136, 188, 188, 239, 190, 61, 182, 97, 131, 191, 71, 141, 58, 191, 224, 187, 231, 190, 110, 34, 191, 190, 50, 229, 34, 191, 200, 106, 156, 189, 160, 204, 27, 62, 224, 207, 18, 191, 214, 55, 15, 191, 11, 174, 155, 190, 9, 84, 67, 190, 240, 87, 196, 189, 161, 196, 1, 190, 139, 40, 25, 62, 160, 119, 169, 61, 109, 137, 119, 62, 105, 255, 118, 190, 236, 60, 159, 61, 32, 53, 181, 61, 61, 144, 253, 188, 158, 10, 6, 191, 22, 254, 221, 189, 189, 121, 228, 61, 232, 48, 235, 60, 206, 201, 161, 62, 141, 185, 136, 61, 148, 87, 161, 190, 25, 236, 36, 190, 247, 163, 181, 190, 11, 55, 180, 61, 117, 29, 110, 190, 62, 205, 171, 189, 242, 32, 227, 189, 254, 188, 150, 190, 111, 100, 134, 191, 230, 223, 28, 62, 71, 181, 143, 189, 134, 253, 141, 61, 25, 11, 134, 62, 24, 106, 138, 190, 84, 85, 6, 189, 164, 99, 7, 62, 229, 34, 140, 190, 21, 177, 89, 62, 62, 178, 183, 190, 202, 180, 11, 63, 91, 157, 63, 61, 226, 190, 177, 61, 52, 52, 47, 62, 43, 118, 237, 60, 225, 148, 136, 190, 218, 56, 79, 62, 38, 146, 55, 190, 180, 96, 173, 190, 184, 100, 131, 62, 167, 16, 132, 190, 113, 227, 20, 62, 41, 183, 52, 62, 153, 192, 199, 190, 207, 238, 17, 63, 5, 1, 117, 62, 113, 104, 68, 189, 59, 219, 163, 62, 43, 232, 86, 189, 209, 173, 6, 190, 104, 93, 189, 61, 192, 54, 66, 62, 74, 59, 253, 190, 242, 114, 135, 62, 86, 120, 48, 62, 20, 95, 37, 62, 55, 87, 109, 61, 21, 181, 16, 61, 188, 216, 35, 189, 206, 167, 161, 60, 75, 224, 181, 61, 140, 148, 243, 59, 25, 20, 30, 190, 0, 70, 235, 61, 241, 1, 214, 61, 45, 95, 32, 190, 89, 35, 187, 187, 248, 146, 111, 189, 187, 111, 22, 190, 150, 112, 241, 61, 247, 35, 64, 190, 112, 48, 8, 190, 211, 238, 156, 61, 45, 21, 14, 190, 97, 180, 234, 188, 194, 10, 192, 61, 47, 156, 13, 62, 93, 99, 177, 189, 35, 222, 33, 187, 173, 98, 242, 61, 159, 163, 128, 61, 151, 107, 153, 189, 213, 124, 0, 190, 181, 67, 69, 190, 22, 225, 31, 190, 56, 193, 225, 189, 14, 132, 154, 189, 192, 89, 215, 188, 228, 202, 72, 61, 218, 117, 115, 60, 14, 111, 25, 189, 13, 84, 61, 190, 125, 194, 124, 189, 225, 65, 160, 61, 40, 157, 208, 61, 171, 153, 249, 61, 206, 148, 33, 62, 49, 81, 245, 61, 230, 89, 34, 62, 85, 5, 194, 61, 74, 230, 178, 61, 175, 158, 112, 61, 218, 203, 131, 190, 151, 7, 106, 62, 244, 227, 175, 61, 8, 51, 208, 189, 253, 9, 152, 62, 184, 104, 23, 60, 215, 5, 188, 62, 243, 39, 33, 190, 41, 56, 223, 190, 173, 101, 153, 62, 155, 251, 140, 190, 10, 249, 13, 62, 215, 3, 136, 62, 126, 133, 143, 62, 178, 10, 1, 191, 230, 48, 161, 190, 214, 165, 10, 62, 67, 42, 100, 189, 57, 162, 85, 62, 120, 133, 175, 61, 89, 224, 4, 189, 141, 146, 54, 190, 155, 167, 62, 62, 248, 63, 150, 189, 185, 120, 60, 189, 224, 213, 54, 190, 130, 96, 90, 62, 124, 169, 197, 61, 162, 254, 5, 62, 162, 86, 50, 62, 39, 91, 244, 189, 136, 237, 2, 61, 80, 118, 163, 190, 64, 97, 79, 62, 225, 161, 180, 189, 181, 249, 140, 62, 54, 202, 10, 62, 223, 172, 196, 190, 33, 171, 222, 62, 251, 162, 10, 62, 32, 183, 42, 62, 126, 230, 173, 62, 90, 95, 57, 62, 229, 88, 227, 190, 148, 229, 172, 190, 87, 184, 163, 62, 133, 73, 115, 191, 60, 20, 17, 186, 146, 164, 110, 61, 238, 52, 97, 62, 247, 73, 9, 191, 104, 231, 215, 60, 164, 172, 175, 188, 166, 109, 33, 59, 7, 76, 33, 62, 73, 59, 237, 61, 102, 142, 187, 190, 116, 54, 195, 61, 230, 217, 30, 62, 9, 200, 55, 62, 62, 45, 194, 60, 75, 134, 185, 189, 221, 158, 177, 187, 161, 173, 139, 61, 128, 204, 180, 188, 177, 160, 15, 190, 179, 72, 24, 62, 174, 78, 48, 191, 247, 34, 145, 62, 68, 235, 158, 189, 177, 43, 148, 62, 235, 9, 160, 61, 239, 218, 221, 60, 23, 31, 13, 62, 129, 189, 108, 190, 72, 14, 11, 190, 235, 252, 115, 61, 73, 48, 38, 62, 45, 128, 232, 189, 88, 166, 250, 62, 170, 153, 126, 61, 24, 60, 200, 190, 154, 208, 227, 61, 177, 207, 143, 189, 223, 149, 30, 61, 141, 68, 153, 62, 197, 167, 204, 61, 27, 57, 217, 61, 196, 188, 194, 189, 134, 75, 164, 61, 244, 205, 199, 189, 152, 247, 165, 189, 13, 25, 250, 189, 81, 85, 9, 190, 66, 192, 55, 60, 240, 234, 233, 59, 39, 216, 37, 190, 184, 20, 160, 60, 243, 116, 209, 61, 104, 235, 76, 61, 0, 50, 116, 61, 38, 212, 134, 189, 75, 169, 102, 61, 247, 87, 190, 61, 188, 217, 2, 190, 138, 173, 159, 189, 56, 0, 170, 189, 55, 102, 81, 189, 50, 168, 189, 61, 222, 2, 188, 189, 118, 230, 180, 60, 3, 183, 151, 189, 204, 89, 208, 189, 168, 126, 63, 190, 91, 78, 112, 61, 223, 163, 19, 189, 176, 242, 4, 62, 228, 110, 63, 62, 21, 25, 235, 61, 122, 165, 180, 188, 152, 186, 146, 188, 177, 156, 73, 190, 206, 156, 20, 189, 44, 254, 41, 190, 128, 123, 204, 189, 211, 3, 236, 61, 13, 79, 55, 190, 88, 37, 73, 190, 73, 212, 53, 61, 3, 142, 184, 61, 85, 73, 146, 61, 74, 222, 13, 190, 252, 88, 254, 60, 213, 81, 206, 61, 54, 101, 17, 62, 79, 23, 114, 61, 43, 226, 152, 61, 8, 153, 78, 187, 16, 213, 227, 189, 246, 159, 148, 189, 46, 154, 132, 189, 140, 120, 195, 188, 230, 191, 234, 61, 188, 213, 142, 189, 145, 238, 57, 190, 56, 249, 165, 186, 76, 54, 217, 189, 45, 39, 66, 61, 191, 14, 15, 62, 98, 37, 243, 189, 38, 178, 43, 190, 216, 112, 39, 61, 164, 226, 81, 190, 10, 227, 141, 61, 244, 51, 140, 189, 65, 250, 104, 188, 213, 221, 222, 189, 189, 197, 129, 189, 7, 93, 214, 187, 246, 45, 219, 61, 198, 222, 147, 62, 90, 184, 133, 190, 196, 97, 34, 191, 96, 35, 20, 191, 135, 77, 61, 190, 35, 123, 133, 61, 124, 245, 250, 190, 95, 190, 4, 59, 114, 243, 32, 191, 90, 250, 12, 62, 241, 150, 251, 189, 62, 200, 144, 62, 88, 158, 155, 61, 126, 200, 217, 189, 112, 124, 32, 63, 163, 99, 194, 61, 24, 137, 106, 190, 103, 131, 234, 190, 83, 182, 64, 187, 108, 35, 139, 62, 182, 56, 26, 62, 235, 252, 149, 62, 86, 133, 118, 190, 35, 56, 126, 62, 64, 141, 255, 189, 154, 194, 155, 189, 246, 137, 12, 190, 31, 211, 186, 190, 64, 51, 63, 190, 28, 131, 161, 61, 131, 33, 178, 189, 13, 136, 9, 189, 112, 53, 138, 62, 94, 11, 11, 187, 195, 53, 231, 60, 106, 225, 249, 189, 216, 193, 222, 190, 134, 227, 22, 63, 216, 64, 1, 189, 111, 160, 190, 61, 131, 171, 212, 61, 149, 16, 40, 190, 45, 68, 215, 190, 1, 78, 172, 189, 212, 216, 69, 191, 213, 42, 117, 62, 102, 60, 93, 61, 66, 92, 150, 62, 142, 80, 22, 191, 156, 9, 132, 59, 235, 50, 242, 190, 8, 188, 189, 190, 127, 10, 134, 188, 101, 67, 191, 62, 194, 169, 254, 190, 49, 221, 158, 61, 144, 237, 176, 187, 130, 169, 157, 61, 98, 115, 78, 190, 139, 121, 48, 190, 50, 173, 95, 189, 32, 180, 163, 61, 104, 95, 243, 189, 122, 156, 247, 189, 122, 249, 204, 61, 121, 245, 160, 187, 35, 180, 45, 188, 68, 51, 7, 190, 225, 221, 133, 61, 87, 56, 141, 61, 141, 78, 159, 189, 205, 62, 30, 62, 116, 121, 10, 62, 15, 29, 250, 189, 168, 155, 113, 61, 110, 213, 233, 189, 15, 104, 10, 61, 149, 11, 220, 61, 118, 217, 134, 187, 120, 107, 15, 190, 173, 17, 214, 61, 47, 138, 254, 189, 80, 35, 183, 188, 127, 133, 72, 60, 100, 156, 63, 190, 181, 159, 158, 190, 156, 249, 153, 189, 150, 20, 240, 61, 204, 43, 0, 62, 50, 226, 203, 61, 50, 75, 136, 190, 107, 187, 98, 62, 107, 5, 231, 190, 114, 79, 218, 189, 59, 52, 200, 190, 160, 99, 207, 62, 153, 231, 165, 186, 97, 235, 140, 190, 204, 14, 8, 191, 200, 217, 179, 190, 192, 147, 192, 191, 102, 125, 217, 62, 110, 225, 146, 191, 13, 49, 137, 62, 255, 117, 37, 190, 244, 223, 225, 60, 3, 98, 160, 62, 218, 182, 135, 190, 60, 135, 157, 190, 16, 20, 61, 62, 228, 251, 202, 62, 121, 50, 61, 62, 16, 125, 9, 191, 179, 81, 230, 190, 247, 197, 252, 188, 85, 170, 255, 190, 174, 32, 197, 61, 24, 143, 50, 61, 46, 78, 21, 190, 110, 168, 139, 190, 80, 232, 108, 189, 243, 203, 13, 191, 189, 179, 133, 62, 207, 160, 3, 192, 235, 153, 223, 190, 127, 97, 129, 190, 158, 81, 177, 186, 151, 58, 168, 191, 199, 95, 216, 62, 92, 253, 67, 191, 119, 213, 137, 62, 173, 8, 150, 62, 84, 97, 192, 190, 184, 13, 201, 188, 161, 116, 206, 190, 209, 149, 98, 62, 37, 166, 84, 62, 131, 85, 163, 191, 133, 50, 53, 190, 45, 136, 182, 190, 193, 183, 187, 191, 42, 148, 18, 191, 123, 156, 28, 61, 35, 70, 173, 190, 199, 183, 92, 190, 17, 87, 5, 63, 53, 205, 175, 191, 2, 240, 66, 190, 27, 221, 44, 190, 117, 101, 46, 190, 238, 163, 159, 190, 120, 158, 104, 61, 34, 79, 28, 63, 121, 134, 142, 61, 104, 7, 44, 62, 8, 209, 167, 189, 139, 109, 246, 189, 76, 174, 92, 189, 30, 82, 27, 191, 88, 165, 81, 190, 52, 176, 38, 191, 26, 143, 222, 62, 17, 162, 60, 191, 24, 109, 220, 61, 246, 179, 192, 61, 150, 58, 202, 190, 15, 116, 33, 63, 75, 33, 9, 60, 235, 65, 47, 62, 206, 59, 98, 61, 242, 74, 61, 189, 206, 49, 92, 191, 147, 40, 236, 190, 250, 19, 195, 61, 62, 78, 170, 191, 28, 49, 160, 189, 138, 189, 103, 62, 158, 132, 48, 189, 172, 149, 58, 191, 209, 180, 96, 62, 145, 32, 12, 62, 162, 4, 184, 190, 147, 109, 157, 62, 72, 2, 244, 61, 215, 7, 151, 188, 109, 8, 248, 188, 90, 138, 123, 190, 84, 110, 225, 189, 202, 251, 40, 190, 94, 88, 71, 61, 184, 80, 101, 61, 63, 123, 202, 62, 7, 37, 130, 62, 169, 81, 142, 61, 102, 144, 94, 62, 17, 163, 146, 190, 82, 90, 0, 191, 53, 221, 50, 62, 76, 106, 139, 190, 246, 124, 78, 62, 71, 122, 96, 62, 142, 70, 42, 62, 49, 169, 40, 190, 105, 89, 91, 60, 62, 92, 138, 60, 40, 219, 160, 62, 52, 54, 128, 62, 220, 27, 84, 62, 162, 186, 210, 190, 223, 198, 34, 191, 32, 134, 2, 62, 46, 85, 128, 191, 58, 25, 138, 190, 124, 176, 146, 62, 238, 202, 19, 191, 22, 174, 52, 190, 121, 122, 160, 190, 194, 91, 209, 190, 22, 127, 59, 62, 19, 82, 93, 61, 7, 186, 191, 190, 154, 116, 189, 61, 79, 34, 172, 60, 200, 255, 113, 62, 65, 107, 69, 62, 106, 19, 179, 190, 235, 57, 204, 61, 127, 93, 86, 62, 166, 106, 132, 189, 96, 222, 239, 62, 185, 247, 67, 190, 50, 151, 199, 61, 46, 15, 33, 62, 136, 28, 189, 189, 38, 124, 197, 190, 35, 99, 101, 190, 112, 44, 57, 191, 23, 227, 29, 62, 39, 167, 88, 61, 78, 56, 130, 62, 224, 139, 88, 190, 76, 83, 89, 62, 205, 104, 190, 190, 40, 46, 59, 191, 20, 157, 244, 190, 82, 103, 190, 62, 101, 159, 176, 190, 86, 174, 98, 61, 53, 119, 153, 189, 101, 171, 96, 190, 126, 192, 251, 59, 194, 234, 39, 185, 229, 236, 66, 190, 63, 247, 8, 62, 195, 56, 114, 189, 44, 209, 63, 190, 168, 103, 108, 186, 92, 16, 255, 187, 254, 119, 178, 188, 131, 237, 41, 190, 130, 219, 156, 189, 94, 208, 195, 61, 58, 147, 246, 60, 97, 54, 136, 187, 97, 105, 61, 61, 198, 18, 198, 59, 142, 163, 165, 60, 5, 183, 222, 189, 179, 32, 138, 189, 155, 118, 195, 187, 69, 255, 8, 62, 9, 84, 141, 189, 8, 188, 183, 61, 130, 200, 131, 61, 162, 203, 178, 61, 74, 116, 216, 188, 164, 160, 20, 61, 239, 252, 11, 61, 140, 64, 82, 190, 131, 88, 191, 190, 211, 15, 209, 62, 33, 180, 19, 185, 6, 21, 135, 62, 100, 185, 66, 191, 213, 129, 113, 62, 140, 85, 159, 62, 16, 248, 179, 61, 81, 159, 157, 191, 136, 140, 157, 189, 181, 212, 8, 62, 102, 234, 155, 60, 2, 113, 65, 62, 64, 24, 194, 62, 43, 74, 14, 191, 232, 5, 14, 191, 81, 213, 64, 189, 64, 53, 102, 62, 174, 48, 251, 190, 53, 200, 133, 189, 231, 177, 181, 190, 97, 41, 168, 191, 21, 107, 129, 191, 213, 52, 28, 62, 22, 222, 105, 190, 120, 211, 137, 62, 218, 125, 53, 62, 247, 47, 179, 191, 25, 249, 30, 62, 76, 148, 138, 61, 177, 216, 158, 190, 140, 156, 232, 59, 249, 137, 191, 190, 242, 68, 180, 61, 182, 162, 140, 61, 195, 181, 86, 191, 12, 124, 12, 61, 77, 138, 141, 62, 218, 80, 135, 190, 242, 220, 222, 61, 236, 3, 153, 59, 236, 66, 62, 190, 194, 213, 82, 62, 229, 140, 243, 62, 119, 240, 51, 190, 237, 242, 69, 190, 199, 95, 8, 189, 195, 234, 140, 190, 53, 144, 65, 62, 40, 136, 64, 190, 57, 238, 97, 188, 245, 37, 166, 189, 161, 209, 98, 62, 19, 85, 151, 62, 190, 148, 33, 60, 32, 100, 53, 189, 131, 192, 152, 191, 9, 107, 0, 190, 98, 146, 173, 61, 241, 238, 246, 61, 185, 8, 60, 186, 135, 126, 243, 189, 174, 107, 45, 191, 128, 146, 23, 190, 143, 107, 167, 189, 35, 75, 73, 62, 177, 138, 192, 62, 178, 46, 254, 60, 163, 38, 92, 62, 111, 53, 234, 61, 113, 253, 86, 62, 2, 222, 80, 62, 130, 111, 183, 190, 218, 84, 129, 60, 139, 240, 173, 62, 11, 145, 33, 61, 125, 90, 176, 60, 228, 201, 165, 61, 24, 228, 198, 189, 237, 195, 101, 62, 208, 134, 124, 190, 142, 87, 88, 188, 13, 188, 39, 62, 10, 190, 210, 61, 73, 197, 212, 189, 90, 80, 122, 62, 168, 154, 181, 190, 97, 114, 24, 61, 11, 249, 131, 60, 94, 113, 35, 189, 104, 107, 12, 62, 4, 122, 16, 62, 209, 23, 133, 62, 144, 178, 136, 62, 158, 57, 141, 190, 126, 129, 142, 62, 85, 219, 226, 60, 191, 134, 180, 61, 204, 213, 191, 187, 0, 83, 29, 62, 20, 46, 65, 59, 144, 155, 126, 62, 215, 66, 146, 188, 101, 30, 63, 189, 246, 226, 44, 62, 132, 59, 196, 189, 61, 246, 146, 62, 115, 156, 101, 190, 129, 186, 81, 62, 124, 125, 192, 61, 98, 73, 216, 189, 247, 232, 126, 62, 175, 209, 144, 62, 125, 185, 73, 190, 183, 30, 208, 61, 95, 202, 88, 60, 57, 2, 188, 61, 84, 127, 66, 62, 73, 33, 147, 62, 121, 2, 141, 190, 90, 43, 205, 61, 108, 123, 144, 62, 115, 63, 86, 60, 31, 217, 205, 61, 18, 69, 151, 61, 190, 186, 184, 189, 234, 198, 156, 188, 15, 39, 70, 62, 230, 184, 140, 190, 124, 189, 64, 62, 248, 90, 199, 188, 173, 42, 109, 61, 250, 140, 250, 61, 115, 208, 215, 61, 216, 28, 79, 190, 19, 90, 216, 61, 184, 119, 2, 190, 121, 185, 229, 190, 1, 130, 132, 62, 126, 105, 41, 190, 221, 203, 61, 62, 121, 169, 54, 62, 104, 172, 152, 61, 116, 245, 106, 62, 63, 206, 83, 62, 241, 90, 46, 61, 236, 253, 2, 62, 142, 118, 244, 188, 230, 59, 74, 61, 232, 157, 38, 62, 61, 127, 132, 62, 210, 249, 133, 190, 137, 48, 5, 62, 72, 50, 14, 62, 115, 165, 92, 62, 101, 158, 31, 62, 155, 180, 193, 188, 229, 27, 196, 61, 79, 128, 185, 61, 128, 168, 36, 62, 243, 178, 139, 61, 190, 172, 29, 190, 3, 11, 5, 62, 150, 214, 75, 190, 246, 134, 136, 62, 6, 240, 142, 61, 204, 192, 146, 189, 86, 241, 5, 62, 226, 59, 110, 62, 250, 244, 146, 61, 27, 161, 3, 188, 141, 37, 18, 63, 227, 93, 14, 191, 63, 228, 215, 61, 193, 50, 173, 61, 231, 36, 128, 189, 179, 121, 9, 62, 160, 237, 101, 62, 90, 122, 136, 62, 188, 30, 44, 191, 102, 155, 98, 62, 129, 38, 16, 62, 19, 133, 12, 62, 61, 50, 17, 188, 186, 207, 176, 62, 124, 149, 106, 61, 68, 250, 181, 190, 124, 55, 221, 61, 227, 134, 87, 191, 116, 186, 96, 190, 103, 28, 112, 62, 38, 167, 60, 190, 2, 19, 231, 190, 251, 86, 174, 61, 157, 46, 74, 62, 220, 148, 67, 62, 33, 214, 51, 189, 64, 155, 136, 62, 50, 211, 193, 189, 32, 20, 52, 62, 165, 45, 159, 62, 15, 171, 152, 190, 87, 41, 99, 62, 100, 192, 102, 61, 48, 241, 200, 62, 115, 77, 9, 63, 224, 237, 158, 190, 116, 28, 224, 62, 207, 145, 239, 62, 227, 166, 32, 190, 180, 96, 7, 190, 247, 188, 163, 189, 149, 169, 45, 62, 217, 125, 103, 189, 144, 28, 198, 188, 211, 213, 124, 190, 15, 118, 135, 191, 209, 147, 167, 60, 130, 120, 184, 62, 240, 254, 230, 61, 82, 41, 142, 60, 129, 119, 244, 189, 39, 252, 16, 191, 210, 22, 15, 189, 86, 224, 85, 61, 114, 15, 232, 189, 254, 79, 14, 62, 123, 94, 92, 188, 186, 66, 13, 190, 54, 9, 143, 61, 133, 122, 4, 62, 93, 177, 107, 61, 139, 213, 210, 189, 68, 42, 246, 189, 152, 81, 184, 189, 154, 191, 96, 61, 249, 95, 73, 59, 143, 211, 202, 60, 84, 111, 153, 188, 73, 98, 247, 189, 39, 10, 134, 189, 80, 37, 246, 188, 150, 214, 2, 190, 222, 236, 175, 61, 193, 166, 61, 190, 116, 164, 120, 188, 224, 229, 167, 189, 17, 250, 186, 61, 4, 53, 56, 61, 38, 128, 58, 189, 159, 17, 49, 190, 178, 120, 62, 189, 145, 11, 8, 190, 209, 131, 249, 61, 76, 100, 1, 190, 28, 239, 156, 61, 32, 205, 163, 61, 158, 238, 249, 61, 144, 241, 136, 60, 84, 192, 37, 60, 244, 118, 87, 189, 169, 90, 183, 61, 40, 240, 49, 189, 102, 88, 79, 60, 24, 38, 130, 189, 141, 161, 158, 61, 0, 54, 32, 190, 45, 24, 93, 190, 203, 144, 0, 190, 207, 214, 2, 190, 216, 23, 85, 189, 51, 27, 203, 188, 155, 211, 235, 188, 93, 36, 44, 61, 200, 150, 248, 189, 135, 209, 19, 60, 177, 221, 189, 189, 156, 184, 246, 61, 215, 145, 226, 60, 98, 18, 173, 188, 145, 90, 178, 61, 14, 117, 167, 185, 122, 122, 125, 189, 99, 169, 195, 189, 234, 19, 10, 61, 131, 207, 51, 190, 223, 133, 66, 190, 26, 253, 226, 189, 121, 187, 127, 62, 17, 236, 76, 190, 138, 242, 171, 189, 213, 200, 168, 61, 71, 84, 157, 61, 238, 157, 150, 61, 39, 20, 160, 62, 59, 15, 85, 62, 142, 180, 126, 62, 246, 192, 134, 61, 119, 211, 27, 190, 112, 29, 228, 62, 80, 122, 131, 190, 168, 132, 47, 190, 186, 102, 169, 61, 246, 194, 142, 190, 140, 206, 100, 62, 90, 214, 137, 189, 242, 126, 158, 60, 44, 197, 185, 190, 88, 44, 49, 61, 55, 225, 226, 190, 235, 76, 54, 61, 32, 196, 20, 61, 172, 18, 228, 62, 252, 14, 54, 190, 145, 178, 111, 190, 42, 53, 122, 190, 63, 242, 104, 191, 168, 84, 150, 190, 135, 252, 140, 62, 177, 188, 98, 190, 20, 252, 238, 190, 246, 219, 100, 62, 176, 165, 68, 62, 176, 25, 6, 189, 0, 63, 231, 61, 148, 153, 185, 61, 6, 50, 33, 190, 190, 182, 209, 62, 116, 13, 1, 189, 181, 75, 208, 190, 224, 208, 89, 61, 153, 231, 163, 189, 12, 171, 201, 62, 200, 21, 145, 62, 185, 175, 189, 190, 40, 183, 160, 62, 88, 154, 77, 190, 195, 216, 15, 190, 148, 65, 102, 190, 32, 76, 173, 188, 175, 179, 231, 62, 226, 189, 103, 61, 126, 16, 6, 191, 231, 77, 153, 190, 31, 215, 86, 190, 30, 133, 78, 62, 188, 96, 114, 62, 154, 61, 149, 62, 150, 213, 177, 62, 130, 81, 254, 61, 152, 185, 114, 190, 130, 100, 102, 62, 91, 247, 123, 62, 180, 182, 146, 190, 142, 70, 6, 61, 169, 223, 169, 189, 75, 228, 200, 188, 171, 0, 126, 190, 61, 187, 186, 62, 115, 10, 141, 61, 132, 141, 120, 62, 249, 36, 172, 62, 33, 155, 120, 190, 55, 35, 124, 62, 117, 224, 1, 190, 209, 103, 148, 190, 169, 205, 167, 62, 149, 92, 135, 61, 18, 159, 139, 62, 135, 212, 121, 62, 126, 40, 134, 62, 100, 122, 83, 189, 125, 198, 51, 61, 174, 255, 24, 191, 251, 89, 192, 62, 139, 133, 133, 60, 240, 137, 5, 61, 82, 70, 248, 189, 215, 238, 10, 190, 12, 159, 180, 190, 86, 251, 55, 191, 162, 90, 219, 190, 115, 97, 182, 62, 233, 59, 205, 190, 140, 121, 1, 62, 195, 139, 195, 190, 249, 54, 37, 62, 136, 84, 219, 59, 248, 120, 146, 61, 55, 6, 190, 61, 244, 98, 188, 62, 115, 96, 38, 61, 0, 235, 1, 190, 215, 70, 88, 189, 242, 236, 106, 190, 186, 132, 1, 62, 86, 76, 88, 60, 9, 252, 154, 61, 217, 7, 186, 61, 134, 7, 30, 190, 3, 232, 204, 60, 137, 4, 229, 61, 201, 221, 47, 61, 29, 204, 195, 190, 171, 228, 76, 190, 116, 197, 174, 190, 103, 21, 213, 188, 45, 155, 229, 190, 5, 4, 172, 189, 215, 129, 191, 61, 223, 247, 91, 61, 233, 241, 193, 190, 119, 1, 12, 62, 30, 117, 72, 190, 154, 89, 109, 62, 117, 205, 234, 189, 105, 152, 99, 61, 51, 58, 108, 61, 11, 82, 104, 189, 167, 68, 1, 190, 195, 20, 89, 190, 232, 129, 32, 190, 255, 37, 142, 59, 184, 18, 234, 188, 130, 131, 204, 189, 255, 70, 80, 190, 114, 132, 220, 61, 130, 57, 244, 61, 156, 98, 139, 189, 139, 120, 13, 190, 202, 26, 33, 190, 138, 230, 15, 62, 51, 44, 57, 189, 108, 42, 154, 189, 87, 186, 187, 61, 113, 84, 217, 61, 202, 146, 84, 190, 236, 236, 209, 188, 27, 218, 136, 61, 15, 125, 147, 61, 239, 161, 20, 62, 89, 2, 19, 190, 24, 207, 130, 188, 218, 81, 90, 189, 54, 250, 47, 190, 125, 21, 30, 190, 97, 77, 104, 61, 47, 100, 100, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 46, 90, 190, 71, 123, 91, 61, 126, 11, 116, 62, 221, 115, 98, 60, 85, 193, 162, 62, 35, 147, 16, 62, 15, 211, 109, 62, 227, 77, 116, 189, 161, 245, 29, 190, 3, 215, 165, 189, 23, 43, 24, 62, 235, 179, 32, 190, 128, 184, 144, 58, 90, 193, 29, 62, 201, 163, 242, 59, 89, 114, 213, 61, 41, 22, 71, 61, 224, 135, 70, 190, 53, 223, 21, 62, 26, 75, 55, 190, 179, 36, 9, 190, 181, 108, 172, 62, 160, 203, 89, 62, 144, 198, 142, 61, 215, 156, 61, 62, 137, 232, 44, 189, 121, 151, 22, 190, 11, 170, 1, 62, 192, 7, 66, 189, 172, 209, 136, 62, 76, 255, 127, 62, 120, 207, 112, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 75, 75, 191, 149, 16, 248, 62, 162, 164, 199, 190, 137, 148, 9, 62, 1, 191, 22, 190, 178, 218, 119, 190, 4, 39, 161, 61, 125, 170, 141, 60, 63, 164, 253, 61, 59, 88, 214, 190, 212, 92, 70, 63, 121, 210, 7, 190, 8, 45, 128, 191, 46, 171, 139, 63, 184, 248, 37, 191, 140, 128, 192, 62, 0, 139, 199, 62, 70, 72, 49, 188, 205, 50, 18, 63, 107, 2, 238, 190, 7, 112, 54, 62, 192, 58, 8, 190, 118, 124, 205, 189, 187, 212, 97, 62, 128, 137, 244, 190, 117, 239, 122, 189, 0, 67, 43, 61, 127, 69, 173, 62, 56, 130, 25, 63, 113, 201, 41, 63, 233, 100, 72, 189, 95, 10, 124, 189, 32, 56, 139, 188, 225, 185, 4, 62, 131, 83, 157, 188, 87, 35, 3, 62, 105, 229, 165, 190, 111, 84, 151, 190, 165, 206, 13, 191, 224, 179, 191, 188, 10, 227, 241, 61, 105, 133, 2, 188, 56, 66, 179, 62, 133, 54, 151, 58, 244, 122, 97, 62, 109, 227, 114, 62, 153, 104, 137, 62, 132, 19, 180, 62, 187, 30, 47, 61, 9, 193, 193, 59, 197, 6, 165, 189, 150, 64, 61, 62, 138, 157, 129, 62, 118, 8, 50, 190, 57, 189, 180, 189, 239, 213, 152, 189, 153, 46, 9, 188, 45, 162, 46, 190, 217, 201, 140, 188, 175, 19, 242, 61, 209, 178, 167, 189, 44, 196, 138, 190, 138, 125, 134, 190, 29, 38, 205, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 91, 101, 188, 76, 31, 68, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {85, 154, 244, 191, 114, 191, 0, 63, 62, 132, 236, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {122, 219, 30, 192, 236, 63, 70, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0082/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}