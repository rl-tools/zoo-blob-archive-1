// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 232, 246, 62, 51, 129, 126, 62, 163, 108, 255, 190, 102, 246, 192, 190, 97, 67, 239, 62, 162, 92, 54, 190, 62, 7, 188, 61, 234, 126, 195, 62, 35, 166, 229, 190, 46, 113, 218, 62, 205, 60, 148, 189, 103, 125, 9, 63, 178, 75, 36, 62, 57, 65, 191, 62, 200, 147, 98, 61, 167, 43, 19, 191, 159, 166, 227, 62, 239, 218, 161, 190, 100, 252, 138, 62, 208, 92, 29, 62, 14, 220, 132, 190, 93, 15, 178, 190, 234, 234, 133, 61, 219, 114, 140, 190, 14, 239, 1, 63, 30, 143, 239, 190, 246, 173, 151, 190, 10, 195, 166, 62, 139, 49, 144, 190, 82, 40, 81, 190, 38, 102, 116, 61, 72, 33, 14, 63, 19, 245, 6, 61, 102, 17, 10, 191, 10, 192, 175, 189, 247, 230, 163, 189, 204, 68, 164, 190, 46, 201, 12, 62, 78, 106, 51, 62, 31, 146, 187, 62, 72, 151, 188, 62, 109, 62, 189, 62, 85, 9, 207, 59, 158, 250, 40, 189, 48, 222, 11, 191, 107, 240, 221, 62, 20, 62, 208, 62, 126, 179, 191, 188, 82, 200, 19, 191, 242, 101, 242, 190, 4, 209, 17, 61, 4, 247, 223, 190, 254, 201, 138, 61, 116, 231, 226, 62, 6, 15, 205, 62, 222, 165, 10, 63, 253, 196, 103, 61, 30, 205, 202, 190, 113, 0, 174, 190, 144, 110, 252, 62, 29, 227, 223, 189, 228, 91, 88, 190, 177, 198, 211, 190, 214, 142, 146, 190, 105, 143, 232, 190, 227, 236, 171, 190, 78, 175, 148, 62, 62, 62, 43, 190, 11, 11, 178, 189, 52, 139, 240, 61, 18, 89, 1, 191, 9, 160, 167, 190, 89, 49, 204, 62, 154, 107, 45, 190, 178, 112, 210, 188, 2, 82, 199, 62, 206, 50, 200, 62, 53, 18, 178, 62, 255, 4, 121, 189, 6, 183, 235, 61, 166, 239, 143, 62, 94, 41, 21, 190, 73, 118, 114, 190, 224, 148, 231, 190, 78, 239, 254, 62, 165, 78, 214, 62, 74, 38, 230, 62, 253, 67, 59, 62, 232, 188, 83, 190, 111, 106, 192, 62, 185, 238, 171, 62, 151, 105, 148, 190, 96, 100, 6, 190, 194, 93, 245, 62, 100, 63, 204, 62, 20, 238, 243, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {18, 156, 19, 191, 5, 186, 165, 190, 233, 254, 11, 190, 91, 248, 10, 63, 201, 221, 114, 62, 11, 241, 50, 62, 236, 135, 158, 190, 125, 45, 4, 61, 82, 170, 167, 62, 252, 73, 42, 60, 37, 245, 159, 59, 160, 165, 250, 190, 44, 138, 31, 62, 18, 25, 139, 62, 91, 198, 12, 190, 43, 163, 244, 190, 30, 86, 231, 62, 112, 109, 66, 62, 242, 37, 19, 63, 86, 177, 235, 190, 44, 238, 118, 62, 82, 187, 0, 191, 45, 128, 6, 63, 129, 57, 216, 190, 110, 195, 175, 190, 52, 145, 227, 61, 192, 250, 152, 62, 112, 82, 38, 190, 58, 204, 10, 191, 34, 121, 141, 190, 205, 224, 118, 61, 101, 49, 159, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 217, 80, 189, 181, 26, 46, 61, 103, 66, 9, 190, 224, 137, 0, 188, 191, 215, 149, 60, 114, 212, 44, 190, 109, 213, 230, 189, 61, 4, 249, 187, 106, 119, 184, 189, 162, 60, 171, 61, 39, 177, 229, 189, 252, 107, 45, 62, 159, 150, 145, 189, 176, 23, 246, 189, 196, 74, 147, 189, 184, 142, 37, 61, 19, 210, 26, 62, 50, 65, 196, 61, 241, 245, 11, 62, 16, 104, 26, 62, 146, 71, 135, 60, 224, 96, 168, 59, 112, 38, 196, 61, 151, 122, 100, 188, 102, 67, 231, 60, 51, 11, 83, 186, 145, 250, 195, 189, 176, 54, 198, 59, 132, 114, 33, 190, 131, 122, 10, 61, 136, 140, 96, 61, 233, 63, 205, 60, 238, 88, 135, 189, 181, 223, 5, 62, 148, 199, 81, 189, 221, 99, 245, 61, 185, 217, 17, 189, 161, 89, 208, 61, 228, 197, 76, 61, 112, 192, 32, 190, 165, 180, 12, 62, 78, 62, 76, 59, 159, 209, 89, 61, 13, 87, 89, 188, 248, 48, 16, 62, 141, 15, 128, 189, 91, 168, 51, 190, 171, 7, 207, 189, 47, 102, 52, 190, 8, 89, 210, 61, 107, 55, 49, 190, 226, 255, 108, 60, 251, 118, 1, 190, 154, 171, 119, 189, 155, 168, 21, 190, 250, 93, 4, 62, 172, 226, 7, 189, 95, 72, 172, 188, 61, 145, 188, 61, 164, 219, 140, 188, 140, 119, 11, 190, 38, 248, 50, 62, 225, 226, 240, 61, 85, 119, 1, 62, 241, 145, 65, 189, 232, 205, 39, 62, 157, 144, 200, 59, 1, 31, 78, 188, 111, 39, 145, 188, 134, 200, 227, 189, 205, 3, 157, 189, 90, 202, 28, 62, 84, 82, 205, 189, 144, 4, 97, 61, 100, 57, 48, 190, 227, 253, 25, 61, 90, 108, 143, 61, 144, 59, 246, 60, 250, 107, 68, 189, 217, 10, 5, 62, 95, 155, 184, 61, 122, 112, 6, 60, 4, 3, 200, 60, 10, 59, 254, 189, 226, 65, 19, 189, 21, 240, 104, 188, 15, 72, 78, 61, 73, 201, 180, 60, 170, 58, 245, 60, 136, 20, 107, 60, 14, 50, 214, 60, 0, 14, 128, 188, 219, 192, 0, 189, 75, 12, 207, 189, 153, 80, 238, 60, 16, 88, 239, 188, 79, 152, 182, 60, 142, 213, 23, 190, 45, 83, 5, 62, 255, 131, 6, 62, 233, 21, 255, 189, 61, 10, 154, 60, 98, 118, 47, 189, 15, 161, 10, 190, 148, 227, 12, 62, 119, 204, 45, 190, 214, 7, 213, 189, 211, 238, 156, 61, 47, 174, 242, 189, 169, 191, 128, 186, 132, 241, 220, 61, 242, 158, 35, 62, 202, 239, 138, 189, 250, 103, 162, 60, 186, 121, 26, 62, 110, 107, 180, 61, 140, 108, 117, 189, 227, 76, 248, 189, 135, 35, 35, 190, 40, 155, 26, 190, 56, 193, 225, 189, 233, 253, 61, 189, 125, 100, 63, 187, 202, 187, 119, 61, 218, 232, 84, 61, 143, 185, 154, 187, 47, 184, 39, 190, 66, 115, 223, 188, 121, 189, 204, 61, 81, 167, 251, 61, 101, 204, 205, 61, 95, 181, 253, 188, 199, 201, 177, 189, 8, 211, 180, 61, 189, 120, 162, 61, 129, 31, 165, 61, 3, 218, 164, 189, 198, 109, 42, 190, 63, 199, 83, 61, 209, 219, 77, 189, 44, 184, 96, 189, 2, 190, 144, 188, 252, 244, 216, 60, 38, 74, 233, 187, 203, 0, 31, 190, 7, 202, 29, 190, 123, 199, 234, 188, 157, 17, 17, 190, 59, 6, 31, 62, 41, 142, 24, 62, 90, 58, 29, 61, 160, 79, 176, 189, 22, 135, 39, 190, 161, 83, 124, 189, 105, 100, 36, 190, 236, 246, 10, 62, 237, 27, 131, 61, 226, 130, 183, 61, 36, 211, 19, 190, 13, 147, 52, 62, 188, 33, 33, 189, 136, 165, 185, 188, 166, 50, 209, 189, 84, 116, 131, 61, 226, 125, 194, 61, 252, 171, 40, 62, 54, 165, 208, 61, 214, 195, 9, 187, 252, 91, 203, 60, 136, 77, 216, 60, 135, 165, 133, 61, 124, 23, 92, 61, 218, 95, 247, 61, 196, 5, 112, 188, 88, 202, 21, 190, 25, 10, 179, 61, 189, 157, 149, 189, 59, 160, 115, 61, 177, 214, 43, 62, 5, 116, 219, 61, 102, 101, 71, 189, 170, 241, 91, 189, 202, 243, 6, 62, 52, 121, 231, 188, 62, 219, 157, 189, 147, 166, 18, 189, 144, 103, 195, 57, 97, 165, 204, 189, 240, 116, 108, 189, 14, 130, 196, 189, 30, 163, 193, 189, 138, 198, 5, 62, 79, 71, 227, 61, 10, 174, 52, 190, 145, 134, 188, 61, 186, 244, 185, 187, 177, 167, 165, 61, 66, 114, 46, 61, 84, 123, 20, 190, 88, 108, 99, 185, 107, 120, 224, 189, 45, 191, 230, 189, 129, 124, 192, 186, 35, 141, 136, 61, 228, 170, 25, 190, 138, 223, 186, 61, 196, 204, 6, 190, 6, 244, 98, 61, 213, 190, 19, 188, 168, 103, 234, 61, 11, 174, 247, 188, 187, 203, 189, 189, 126, 224, 40, 190, 29, 52, 137, 61, 149, 156, 205, 189, 34, 42, 25, 62, 57, 26, 14, 62, 18, 35, 86, 189, 182, 234, 167, 189, 84, 121, 9, 62, 8, 130, 200, 187, 218, 31, 43, 61, 44, 128, 85, 60, 216, 61, 39, 62, 61, 163, 236, 61, 71, 156, 187, 189, 209, 212, 187, 61, 2, 63, 64, 189, 42, 37, 119, 189, 50, 184, 230, 189, 187, 89, 6, 190, 62, 50, 199, 59, 232, 3, 245, 187, 248, 238, 34, 190, 108, 142, 22, 61, 227, 12, 237, 61, 40, 71, 231, 61, 88, 20, 241, 61, 200, 147, 100, 189, 212, 12, 128, 61, 164, 183, 180, 61, 214, 138, 187, 189, 58, 83, 102, 189, 170, 125, 28, 189, 12, 208, 146, 189, 51, 197, 174, 61, 133, 154, 217, 189, 163, 128, 204, 60, 213, 137, 211, 189, 233, 196, 84, 189, 209, 122, 1, 190, 93, 192, 64, 61, 220, 244, 78, 60, 15, 155, 43, 62, 249, 203, 48, 62, 113, 189, 43, 62, 236, 177, 24, 60, 104, 72, 88, 60, 186, 208, 40, 190, 64, 143, 140, 60, 41, 157, 250, 189, 44, 139, 92, 189, 131, 184, 21, 62, 178, 48, 46, 190, 106, 87, 42, 190, 41, 217, 145, 61, 18, 61, 7, 62, 21, 64, 151, 61, 114, 229, 170, 189, 76, 3, 161, 61, 166, 105, 5, 62, 128, 160, 33, 62, 211, 176, 176, 61, 139, 187, 199, 61, 102, 202, 38, 61, 215, 124, 188, 189, 68, 157, 19, 189, 46, 154, 132, 189, 154, 71, 255, 60, 49, 79, 3, 62, 188, 213, 142, 189, 189, 207, 26, 190, 51, 84, 93, 61, 76, 54, 217, 189, 96, 117, 100, 61, 77, 231, 32, 62, 213, 224, 246, 189, 143, 202, 31, 190, 45, 222, 168, 61, 142, 101, 220, 189, 211, 66, 172, 61, 12, 224, 36, 62, 164, 77, 84, 60, 157, 145, 144, 187, 45, 211, 195, 61, 246, 230, 20, 62, 40, 70, 46, 190, 29, 55, 3, 190, 121, 218, 29, 190, 209, 230, 183, 188, 229, 129, 108, 189, 117, 82, 76, 61, 25, 105, 233, 61, 145, 2, 113, 189, 40, 40, 39, 189, 209, 253, 106, 59, 32, 73, 36, 62, 104, 87, 240, 189, 217, 232, 208, 61, 12, 194, 55, 61, 148, 148, 246, 189, 156, 8, 43, 62, 254, 170, 197, 188, 151, 203, 137, 188, 152, 79, 12, 62, 71, 139, 228, 189, 217, 176, 52, 61, 135, 213, 180, 60, 84, 102, 3, 62, 24, 223, 40, 186, 140, 212, 202, 189, 211, 31, 197, 187, 37, 183, 27, 60, 25, 87, 144, 189, 206, 129, 5, 190, 154, 166, 122, 61, 217, 61, 169, 58, 170, 191, 9, 62, 52, 150, 190, 189, 111, 0, 126, 61, 243, 250, 25, 189, 219, 6, 188, 188, 81, 100, 18, 189, 77, 153, 212, 58, 129, 78, 25, 61, 252, 183, 178, 61, 109, 66, 252, 61, 136, 2, 252, 61, 35, 246, 32, 190, 16, 229, 252, 189, 151, 93, 9, 189, 190, 102, 172, 189, 161, 87, 208, 61, 243, 69, 105, 188, 85, 46, 117, 61, 198, 241, 44, 190, 144, 135, 3, 62, 162, 22, 14, 60, 216, 89, 190, 61, 219, 149, 254, 61, 192, 160, 243, 61, 26, 207, 171, 186, 80, 11, 194, 61, 28, 170, 226, 60, 140, 219, 225, 61, 48, 81, 46, 190, 77, 64, 3, 190, 158, 38, 19, 189, 190, 229, 141, 61, 86, 171, 240, 189, 199, 171, 232, 189, 48, 37, 240, 61, 11, 136, 101, 61, 122, 9, 22, 189, 17, 64, 217, 189, 69, 240, 196, 61, 63, 187, 188, 61, 228, 219, 173, 189, 244, 93, 36, 62, 55, 70, 33, 62, 255, 163, 59, 189, 225, 197, 202, 61, 221, 166, 226, 189, 37, 131, 135, 60, 15, 207, 3, 62, 56, 184, 117, 187, 45, 172, 170, 189, 9, 95, 22, 62, 148, 106, 205, 189, 53, 51, 123, 188, 106, 50, 97, 61, 72, 227, 19, 190, 191, 46, 27, 190, 208, 119, 218, 188, 163, 168, 14, 190, 239, 137, 233, 61, 12, 96, 136, 189, 46, 156, 48, 190, 82, 213, 138, 61, 43, 85, 37, 190, 131, 126, 199, 189, 193, 190, 23, 62, 58, 2, 52, 62, 113, 24, 23, 190, 20, 31, 245, 189, 7, 156, 244, 61, 81, 178, 159, 189, 57, 181, 134, 61, 146, 76, 154, 189, 152, 12, 42, 62, 252, 200, 166, 61, 197, 3, 254, 61, 75, 73, 3, 61, 26, 153, 229, 189, 153, 68, 246, 189, 21, 149, 199, 189, 104, 210, 6, 62, 133, 124, 65, 189, 227, 68, 29, 62, 213, 171, 180, 188, 185, 23, 23, 190, 225, 155, 150, 189, 146, 24, 53, 61, 79, 38, 170, 189, 72, 218, 33, 190, 191, 239, 201, 61, 75, 13, 103, 189, 206, 74, 37, 62, 157, 104, 15, 62, 105, 197, 49, 62, 81, 196, 211, 189, 182, 177, 34, 190, 122, 210, 153, 61, 88, 142, 38, 62, 193, 163, 195, 60, 50, 228, 200, 61, 52, 14, 140, 59, 207, 8, 132, 61, 168, 147, 194, 189, 5, 90, 31, 190, 250, 7, 11, 62, 238, 135, 198, 61, 11, 205, 161, 61, 65, 246, 245, 189, 46, 36, 121, 189, 174, 218, 47, 190, 119, 207, 203, 61, 122, 254, 167, 189, 32, 51, 21, 190, 88, 139, 239, 189, 189, 110, 151, 189, 89, 137, 21, 59, 247, 154, 41, 62, 168, 172, 7, 190, 242, 188, 32, 190, 83, 101, 251, 59, 101, 246, 212, 189, 135, 47, 146, 189, 233, 126, 247, 61, 202, 7, 163, 189, 20, 162, 143, 189, 136, 175, 128, 60, 234, 243, 180, 189, 160, 152, 148, 189, 53, 75, 99, 189, 88, 111, 211, 60, 90, 88, 184, 188, 122, 162, 190, 61, 4, 223, 179, 188, 110, 7, 163, 61, 187, 247, 112, 61, 199, 59, 8, 190, 237, 7, 16, 190, 183, 199, 9, 190, 188, 203, 142, 189, 229, 80, 45, 62, 250, 133, 36, 189, 218, 25, 26, 190, 225, 92, 69, 61, 55, 86, 33, 190, 248, 207, 164, 61, 133, 37, 31, 190, 180, 115, 10, 189, 49, 73, 94, 61, 147, 40, 140, 189, 215, 32, 220, 189, 226, 145, 41, 62, 129, 107, 248, 187, 144, 233, 12, 190, 13, 10, 15, 62, 218, 21, 28, 188, 252, 126, 54, 61, 119, 130, 155, 59, 4, 40, 16, 190, 250, 216, 144, 189, 89, 234, 81, 189, 70, 251, 171, 189, 70, 121, 56, 60, 116, 189, 174, 61, 230, 90, 128, 186, 45, 45, 34, 62, 245, 123, 178, 189, 164, 46, 8, 61, 206, 175, 51, 190, 230, 128, 3, 62, 17, 240, 132, 189, 194, 183, 217, 61, 50, 230, 23, 190, 207, 146, 253, 61, 188, 200, 90, 189, 144, 53, 112, 189, 241, 111, 129, 61, 160, 247, 33, 62, 38, 190, 120, 60, 65, 104, 206, 189, 155, 24, 128, 188, 233, 112, 238, 189, 180, 148, 16, 62, 246, 123, 3, 189, 79, 170, 230, 59, 216, 94, 5, 190, 11, 110, 48, 190, 25, 50, 2, 62, 23, 96, 21, 61, 153, 80, 9, 190, 89, 9, 18, 62, 244, 201, 47, 62, 229, 181, 227, 189, 24, 245, 42, 62, 229, 12, 14, 62, 90, 92, 29, 62, 222, 52, 139, 61, 246, 35, 150, 61, 240, 254, 65, 58, 153, 150, 129, 61, 134, 216, 136, 188, 182, 116, 20, 189, 142, 102, 143, 60, 38, 190, 73, 61, 118, 24, 12, 62, 67, 56, 227, 189, 221, 173, 69, 189, 167, 63, 163, 189, 18, 164, 190, 189, 215, 187, 237, 188, 202, 109, 36, 62, 131, 90, 229, 61, 159, 160, 242, 189, 246, 96, 164, 61, 209, 97, 51, 62, 174, 239, 50, 62, 56, 71, 147, 189, 73, 210, 29, 62, 72, 160, 24, 190, 165, 49, 172, 61, 27, 252, 19, 189, 121, 166, 46, 190, 83, 241, 120, 61, 61, 56, 130, 61, 40, 192, 13, 190, 171, 229, 45, 62, 111, 94, 67, 189, 205, 142, 21, 190, 70, 168, 130, 60, 114, 118, 138, 61, 113, 128, 170, 188, 205, 122, 18, 190, 144, 217, 169, 188, 164, 190, 8, 62, 183, 206, 58, 61, 161, 183, 147, 60, 37, 181, 136, 61, 80, 33, 147, 61, 97, 161, 56, 61, 234, 67, 156, 189, 200, 89, 116, 189, 86, 23, 36, 61, 239, 105, 20, 62, 110, 214, 93, 189, 116, 92, 15, 62, 187, 93, 207, 61, 167, 142, 218, 61, 85, 56, 188, 60, 139, 223, 160, 61, 69, 73, 54, 61, 22, 152, 24, 190, 141, 186, 24, 189, 138, 193, 38, 62, 71, 229, 253, 61, 131, 200, 235, 61, 253, 125, 4, 189, 226, 34, 233, 61, 94, 51, 41, 62, 24, 229, 105, 189, 13, 39, 39, 62, 194, 4, 174, 189, 179, 6, 182, 189, 125, 67, 46, 189, 174, 237, 41, 190, 130, 203, 7, 62, 216, 149, 94, 60, 158, 81, 130, 189, 230, 24, 3, 61, 106, 27, 49, 62, 131, 104, 44, 189, 29, 173, 184, 60, 152, 214, 247, 189, 188, 82, 199, 61, 129, 84, 12, 190, 133, 38, 26, 62, 30, 18, 104, 61, 63, 62, 5, 62, 83, 156, 25, 190, 164, 65, 17, 189, 211, 70, 132, 61, 131, 69, 0, 62, 29, 14, 161, 189, 202, 166, 252, 189, 191, 26, 29, 190, 242, 185, 213, 189, 202, 98, 195, 60, 217, 26, 141, 189, 43, 100, 196, 189, 43, 35, 32, 62, 110, 247, 5, 61, 106, 228, 152, 189, 230, 9, 53, 61, 164, 152, 16, 61, 160, 98, 98, 61, 228, 127, 10, 62, 5, 40, 18, 190, 140, 74, 136, 188, 232, 253, 38, 61, 179, 218, 214, 60, 87, 53, 160, 189, 249, 145, 221, 61, 48, 224, 0, 58, 54, 69, 6, 62, 97, 34, 190, 61, 15, 184, 233, 61, 206, 84, 16, 187, 102, 209, 222, 61, 219, 206, 86, 188, 223, 140, 184, 189, 110, 181, 210, 61, 109, 99, 34, 189, 141, 45, 255, 61, 188, 10, 3, 61, 5, 221, 92, 189, 168, 253, 214, 189, 55, 56, 32, 190, 152, 11, 4, 61, 61, 15, 50, 62, 33, 216, 11, 61, 144, 235, 255, 58, 93, 231, 131, 189, 31, 3, 218, 61, 244, 212, 21, 62, 138, 137, 234, 189, 135, 229, 146, 59, 121, 63, 26, 61, 70, 247, 119, 61, 188, 45, 98, 189, 4, 59, 169, 59, 182, 82, 50, 190, 79, 99, 240, 189, 209, 185, 151, 61, 251, 229, 143, 189, 212, 46, 35, 189, 101, 44, 61, 61, 238, 163, 49, 190, 89, 122, 3, 62, 42, 119, 6, 190, 151, 102, 232, 189, 10, 250, 14, 190, 145, 236, 30, 190, 44, 95, 168, 61, 59, 241, 129, 61, 44, 164, 118, 61, 133, 80, 42, 62, 17, 152, 35, 190, 255, 22, 31, 62, 114, 218, 237, 61, 42, 104, 116, 188, 245, 228, 66, 189, 177, 68, 8, 61, 21, 186, 51, 190, 41, 215, 52, 62, 154, 120, 142, 61, 173, 64, 198, 187, 95, 42, 13, 62, 22, 53, 1, 62, 30, 199, 160, 61, 49, 45, 0, 189, 179, 207, 19, 62, 57, 6, 50, 189, 209, 189, 38, 189, 170, 108, 116, 189, 147, 101, 186, 61, 23, 13, 28, 190, 121, 58, 15, 190, 220, 69, 51, 189, 53, 171, 14, 62, 64, 205, 80, 61, 21, 126, 226, 61, 224, 19, 185, 61, 255, 38, 144, 188, 133, 85, 52, 62, 160, 45, 226, 189, 239, 210, 100, 60, 188, 227, 227, 188, 112, 87, 24, 190, 137, 46, 134, 189, 253, 227, 25, 62, 36, 78, 16, 190, 27, 154, 36, 189, 201, 35, 245, 189, 75, 231, 0, 189, 68, 192, 36, 188, 151, 49, 197, 187, 7, 78, 214, 188, 79, 121, 20, 62, 141, 107, 4, 190, 68, 102, 5, 190, 19, 115, 113, 61, 20, 15, 156, 61, 68, 29, 9, 62, 25, 148, 208, 61, 227, 32, 32, 62, 60, 231, 232, 189, 188, 240, 171, 188, 244, 210, 178, 61, 102, 130, 149, 189, 204, 173, 255, 189, 112, 188, 203, 61, 88, 190, 116, 60, 126, 187, 32, 61, 53, 63, 27, 62, 170, 40, 176, 60, 129, 52, 168, 61, 2, 50, 225, 61, 18, 199, 83, 61, 228, 39, 90, 189, 152, 239, 54, 61, 207, 62, 43, 61, 20, 31, 31, 62, 234, 130, 101, 187, 56, 129, 45, 190, 236, 242, 253, 61, 205, 81, 30, 190, 86, 97, 215, 61, 136, 225, 232, 61, 38, 226, 37, 190, 125, 103, 102, 61, 119, 167, 25, 60, 166, 106, 130, 189, 250, 115, 129, 189, 6, 58, 135, 61, 124, 77, 120, 189, 52, 46, 179, 61, 73, 139, 196, 60, 236, 109, 43, 190, 90, 174, 219, 189, 222, 143, 90, 189, 68, 69, 21, 62, 112, 146, 9, 190, 18, 236, 39, 62, 67, 52, 48, 62, 39, 147, 81, 188, 162, 17, 206, 188, 141, 115, 146, 61, 17, 184, 6, 62, 190, 14, 2, 61, 145, 43, 25, 62, 79, 68, 251, 189, 122, 112, 222, 189, 31, 65, 126, 189, 193, 32, 123, 61, 153, 146, 46, 190, 87, 91, 162, 189, 198, 95, 30, 62, 109, 229, 170, 61, 31, 91, 162, 189, 92, 119, 37, 62, 114, 1, 44, 62, 252, 228, 161, 60, 2, 238, 37, 62, 113, 253, 68, 187, 119, 94, 32, 61, 206, 198, 152, 61, 184, 125, 137, 61, 243, 16, 13, 62, 245, 246, 182, 189, 209, 107, 10, 61, 18, 249, 48, 62, 183, 214, 250, 189, 126, 27, 6, 190, 18, 156, 219, 61, 224, 138, 50, 62, 11, 13, 47, 190, 53, 1, 27, 190, 231, 42, 132, 61, 109, 114, 128, 189, 47, 207, 38, 190, 181, 228, 124, 61, 97, 102, 52, 60, 226, 180, 24, 62, 117, 199, 60, 61, 236, 133, 191, 188, 142, 57, 13, 190, 87, 134, 130, 61, 69, 123, 224, 189, 164, 251, 24, 62, 123, 94, 92, 188, 186, 66, 13, 190, 66, 208, 163, 61, 191, 187, 7, 62, 152, 101, 130, 61, 167, 83, 202, 189, 65, 175, 238, 189, 135, 111, 183, 189, 37, 111, 108, 61, 249, 95, 73, 59, 143, 211, 202, 60, 102, 166, 205, 187, 73, 98, 247, 189, 16, 152, 129, 189, 80, 37, 246, 188, 71, 81, 2, 190, 222, 236, 175, 61, 220, 25, 50, 190, 224, 161, 0, 188, 106, 188, 159, 189, 42, 252, 195, 61, 4, 53, 56, 61, 38, 128, 58, 189, 159, 17, 49, 190, 194, 116, 24, 189, 145, 11, 8, 190, 209, 131, 249, 61, 76, 100, 1, 190, 28, 239, 156, 61, 132, 197, 39, 62, 225, 101, 51, 62, 162, 18, 167, 61, 84, 192, 37, 60, 58, 32, 234, 188, 195, 90, 13, 62, 86, 173, 64, 61, 41, 166, 122, 61, 212, 2, 181, 187, 80, 222, 17, 62, 161, 17, 231, 189, 5, 188, 45, 190, 223, 239, 225, 189, 207, 214, 2, 190, 169, 81, 34, 60, 209, 32, 99, 188, 242, 126, 219, 185, 215, 60, 14, 61, 119, 74, 157, 189, 135, 209, 19, 60, 75, 140, 34, 189, 94, 226, 52, 62, 195, 233, 165, 61, 216, 196, 31, 61, 33, 180, 178, 61, 14, 117, 167, 185, 131, 211, 132, 189, 30, 123, 31, 189, 234, 19, 10, 61, 131, 207, 51, 190, 81, 245, 11, 190, 26, 253, 226, 189, 34, 56, 119, 61, 36, 37, 129, 61, 154, 36, 242, 189, 98, 211, 42, 62, 112, 95, 202, 61, 215, 51, 16, 62, 141, 220, 248, 61, 31, 146, 44, 62, 71, 157, 210, 61, 109, 183, 218, 189, 80, 41, 172, 61, 182, 227, 78, 61, 176, 3, 45, 61, 26, 43, 38, 188, 213, 19, 59, 189, 83, 205, 133, 189, 207, 68, 173, 61, 255, 25, 93, 189, 92, 226, 177, 188, 221, 62, 177, 189, 104, 82, 96, 189, 24, 242, 29, 190, 200, 5, 251, 189, 205, 27, 3, 62, 33, 201, 46, 62, 59, 74, 35, 61, 28, 173, 32, 61, 197, 135, 161, 189, 212, 76, 9, 190, 127, 243, 251, 60, 35, 207, 139, 60, 189, 164, 216, 61, 203, 184, 36, 190, 151, 130, 236, 60, 169, 63, 33, 62, 117, 202, 229, 189, 233, 160, 133, 61, 115, 146, 192, 189, 28, 139, 5, 61, 104, 149, 47, 189, 228, 118, 152, 61, 61, 34, 162, 188, 114, 208, 94, 61, 239, 152, 177, 188, 200, 4, 24, 62, 223, 181, 141, 61, 41, 193, 236, 61, 8, 64, 36, 62, 151, 243, 220, 59, 197, 171, 38, 190, 49, 1, 18, 190, 191, 244, 11, 187, 195, 38, 46, 62, 223, 150, 239, 189, 67, 1, 184, 189, 173, 109, 146, 188, 128, 41, 210, 61, 52, 135, 145, 61, 33, 209, 168, 188, 136, 190, 6, 62, 130, 122, 189, 61, 172, 17, 20, 61, 51, 165, 38, 62, 41, 64, 153, 61, 111, 221, 138, 189, 247, 105, 202, 189, 179, 93, 255, 189, 243, 40, 37, 190, 243, 179, 185, 189, 12, 244, 39, 190, 236, 143, 193, 60, 52, 223, 160, 61, 191, 76, 10, 61, 82, 190, 232, 60, 52, 127, 21, 190, 225, 95, 55, 189, 127, 93, 151, 189, 13, 169, 27, 190, 82, 75, 184, 189, 224, 211, 169, 61, 71, 145, 30, 188, 254, 118, 219, 188, 125, 11, 41, 62, 104, 94, 14, 190, 62, 2, 157, 189, 116, 35, 26, 190, 221, 6, 15, 62, 181, 191, 170, 189, 174, 196, 0, 190, 190, 66, 106, 61, 198, 124, 156, 189, 85, 190, 234, 189, 193, 187, 163, 61, 113, 53, 47, 190, 111, 178, 177, 61, 1, 159, 4, 190, 158, 41, 16, 190, 26, 98, 49, 190, 8, 198, 217, 61, 139, 178, 53, 189, 134, 165, 184, 61, 235, 151, 160, 188, 175, 92, 5, 61, 168, 120, 163, 189, 167, 121, 28, 190, 100, 151, 239, 188, 21, 132, 235, 189, 208, 41, 214, 61, 241, 88, 219, 60, 88, 62, 87, 189, 224, 17, 215, 188, 7, 211, 40, 188, 39, 116, 110, 61, 129, 2, 34, 62, 248, 9, 172, 59, 89, 138, 23, 190, 175, 143, 9, 59, 244, 219, 157, 189, 214, 30, 112, 189, 88, 69, 151, 61, 207, 250, 173, 61, 230, 194, 252, 61, 242, 167, 129, 186, 71, 18, 10, 188, 221, 30, 14, 62, 60, 144, 221, 189, 66, 136, 98, 61, 178, 87, 0, 61, 88, 75, 1, 62, 111, 128, 186, 61, 25, 172, 197, 58, 221, 46, 223, 189, 171, 156, 30, 190, 171, 0, 202, 189, 68, 191, 140, 61, 209, 77, 63, 188, 134, 226, 171, 188, 9, 36, 28, 190, 207, 146, 32, 62, 130, 57, 244, 61, 5, 165, 93, 189, 123, 186, 3, 190, 68, 189, 186, 189, 29, 202, 45, 62, 3, 223, 62, 189, 150, 87, 154, 189, 53, 101, 42, 62, 113, 84, 217, 61, 15, 145, 25, 190, 126, 13, 166, 188, 129, 67, 21, 62, 45, 204, 217, 61, 8, 108, 28, 62, 85, 81, 12, 190, 70, 230, 164, 57, 190, 91, 140, 188, 54, 250, 47, 190, 125, 21, 30, 190, 197, 222, 169, 61, 47, 100, 100, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 209, 47, 190, 63, 242, 125, 60, 240, 42, 170, 61, 140, 104, 31, 61, 210, 123, 246, 61, 90, 119, 96, 189, 69, 241, 210, 61, 242, 228, 26, 189, 100, 84, 200, 189, 123, 217, 11, 188, 172, 105, 8, 62, 253, 254, 225, 189, 35, 45, 182, 61, 45, 59, 196, 61, 178, 237, 147, 189, 71, 195, 247, 61, 143, 244, 31, 190, 217, 6, 15, 190, 155, 64, 4, 61, 252, 70, 34, 190, 214, 55, 205, 189, 64, 64, 39, 62, 44, 185, 11, 61, 201, 61, 210, 188, 168, 218, 37, 190, 151, 253, 31, 189, 47, 136, 223, 189, 148, 170, 164, 61, 43, 233, 0, 190, 77, 112, 140, 61, 110, 93, 218, 61, 173, 60, 46, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {55, 122, 149, 189, 100, 200, 12, 62, 93, 126, 20, 190, 56, 162, 34, 62, 55, 189, 253, 187, 83, 133, 25, 189, 250, 180, 193, 61, 43, 23, 181, 61, 167, 103, 17, 62, 217, 156, 107, 61, 166, 216, 43, 62, 74, 40, 248, 189, 104, 44, 63, 189, 240, 109, 201, 61, 64, 96, 52, 190, 3, 217, 4, 62, 7, 196, 157, 61, 23, 83, 142, 186, 92, 34, 10, 62, 155, 54, 4, 190, 46, 202, 168, 61, 167, 177, 42, 189, 5, 158, 107, 188, 47, 75, 5, 62, 204, 216, 227, 188, 50, 97, 122, 189, 29, 125, 78, 61, 4, 115, 41, 62, 196, 217, 9, 62, 182, 122, 42, 62, 115, 135, 144, 61, 111, 31, 179, 189, 63, 25, 9, 59, 86, 98, 33, 62, 30, 22, 41, 188, 223, 92, 18, 62, 187, 187, 5, 190, 187, 252, 239, 189, 118, 50, 49, 190, 225, 93, 175, 188, 215, 229, 3, 62, 183, 95, 46, 61, 167, 75, 181, 189, 197, 155, 104, 189, 189, 178, 13, 62, 233, 172, 248, 60, 92, 252, 101, 60, 215, 188, 211, 61, 109, 122, 165, 189, 168, 72, 181, 187, 165, 211, 32, 59, 206, 157, 247, 189, 229, 170, 25, 62, 18, 243, 185, 189, 246, 103, 135, 189, 230, 0, 33, 59, 190, 84, 155, 189, 183, 190, 46, 190, 224, 74, 162, 189, 51, 154, 201, 188, 255, 209, 47, 61, 119, 12, 40, 190, 232, 186, 2, 190, 231, 58, 254, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {63, 185, 241, 61, 126, 248, 196, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {15, 196, 134, 190, 103, 113, 176, 190, 58, 63, 1, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {74, 133, 91, 62, 156, 68, 26, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0082/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}