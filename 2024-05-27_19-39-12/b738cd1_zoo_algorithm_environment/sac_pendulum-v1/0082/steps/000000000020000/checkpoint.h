// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {91, 142, 24, 63, 52, 193, 249, 61, 176, 239, 47, 191, 64, 234, 65, 191, 159, 150, 235, 61, 137, 246, 206, 190, 107, 103, 134, 191, 33, 22, 193, 188, 79, 5, 103, 190, 209, 202, 121, 62, 186, 20, 210, 63, 230, 236, 136, 62, 145, 72, 57, 189, 125, 98, 83, 191, 47, 10, 133, 190, 186, 185, 127, 191, 103, 73, 39, 62, 97, 5, 210, 190, 152, 243, 4, 63, 78, 15, 176, 62, 37, 123, 190, 190, 8, 243, 53, 191, 5, 209, 223, 190, 229, 73, 80, 190, 39, 113, 71, 62, 183, 92, 179, 191, 84, 75, 160, 190, 228, 107, 186, 62, 131, 158, 131, 191, 221, 59, 122, 190, 97, 71, 46, 61, 222, 240, 40, 63, 100, 154, 237, 190, 149, 255, 132, 191, 119, 3, 37, 62, 77, 218, 176, 62, 16, 86, 192, 190, 212, 130, 138, 63, 237, 244, 58, 62, 148, 144, 8, 63, 122, 18, 138, 63, 213, 97, 158, 62, 241, 253, 227, 62, 166, 218, 18, 191, 246, 115, 6, 191, 40, 157, 119, 63, 173, 122, 76, 62, 192, 195, 197, 61, 1, 147, 52, 191, 149, 23, 63, 191, 126, 162, 141, 60, 228, 165, 102, 191, 25, 203, 139, 61, 144, 192, 211, 62, 111, 81, 32, 190, 226, 80, 41, 191, 149, 51, 162, 190, 150, 181, 195, 190, 56, 188, 86, 62, 50, 182, 11, 63, 72, 177, 2, 191, 71, 32, 149, 191, 16, 41, 98, 190, 72, 130, 232, 190, 148, 170, 217, 191, 251, 4, 211, 190, 60, 76, 63, 62, 78, 37, 122, 191, 73, 107, 13, 190, 28, 207, 206, 62, 207, 81, 204, 191, 184, 91, 187, 190, 235, 232, 198, 62, 93, 117, 148, 191, 84, 210, 208, 62, 139, 253, 215, 62, 115, 114, 144, 63, 63, 204, 183, 62, 78, 166, 221, 190, 62, 251, 151, 63, 57, 162, 51, 62, 7, 226, 167, 190, 162, 47, 199, 191, 37, 138, 198, 190, 116, 123, 82, 63, 179, 65, 140, 63, 157, 7, 251, 62, 235, 204, 241, 62, 26, 10, 51, 63, 172, 223, 188, 62, 58, 188, 229, 62, 52, 38, 132, 191, 120, 216, 3, 189, 173, 161, 206, 62, 31, 229, 174, 63, 210, 248, 161, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 231, 24, 191, 156, 2, 191, 188, 190, 115, 222, 62, 24, 202, 184, 62, 196, 135, 152, 62, 48, 10, 47, 62, 245, 144, 33, 190, 196, 204, 44, 190, 14, 109, 44, 63, 170, 227, 149, 61, 112, 219, 207, 61, 73, 2, 67, 189, 28, 212, 9, 63, 6, 30, 2, 62, 111, 193, 35, 191, 174, 185, 144, 190, 173, 157, 39, 63, 104, 90, 4, 63, 57, 43, 24, 63, 127, 168, 63, 191, 146, 54, 4, 63, 210, 169, 120, 189, 208, 33, 10, 63, 249, 112, 52, 60, 199, 176, 28, 190, 21, 57, 114, 61, 1, 220, 28, 63, 152, 219, 225, 61, 31, 129, 43, 191, 240, 58, 214, 190, 182, 46, 113, 62, 160, 94, 9, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 211, 103, 191, 113, 70, 111, 61, 101, 95, 91, 62, 43, 59, 88, 62, 104, 199, 128, 191, 245, 93, 124, 61, 86, 185, 59, 191, 203, 245, 38, 191, 221, 154, 76, 191, 106, 53, 63, 190, 203, 72, 131, 62, 92, 103, 60, 189, 222, 100, 74, 62, 30, 70, 8, 62, 149, 93, 114, 190, 127, 113, 132, 191, 230, 162, 65, 189, 120, 131, 10, 62, 76, 209, 131, 190, 184, 16, 157, 190, 233, 209, 138, 191, 55, 152, 59, 191, 151, 255, 39, 191, 110, 34, 191, 190, 164, 143, 94, 191, 104, 214, 237, 189, 99, 57, 90, 62, 42, 232, 21, 191, 131, 67, 96, 191, 68, 44, 40, 191, 152, 186, 63, 190, 63, 183, 254, 189, 134, 187, 58, 190, 84, 3, 42, 62, 39, 75, 10, 62, 88, 249, 108, 62, 42, 139, 152, 190, 228, 168, 135, 61, 97, 101, 227, 61, 110, 235, 181, 62, 69, 152, 24, 191, 25, 254, 242, 189, 96, 195, 252, 61, 172, 100, 140, 61, 245, 103, 165, 62, 230, 34, 141, 61, 135, 145, 3, 191, 76, 164, 104, 190, 42, 139, 192, 190, 1, 157, 202, 61, 67, 251, 17, 190, 82, 241, 55, 61, 220, 164, 34, 189, 7, 61, 49, 190, 106, 127, 148, 191, 241, 96, 32, 62, 155, 116, 47, 189, 170, 88, 176, 61, 99, 70, 136, 62, 125, 239, 55, 190, 243, 154, 30, 61, 140, 67, 76, 62, 139, 137, 111, 190, 45, 221, 111, 62, 27, 227, 204, 190, 37, 35, 20, 63, 235, 6, 186, 61, 179, 139, 221, 61, 195, 65, 206, 61, 174, 60, 146, 61, 171, 10, 153, 190, 253, 89, 129, 62, 239, 185, 105, 190, 184, 27, 205, 190, 203, 0, 125, 62, 87, 174, 216, 190, 130, 159, 33, 62, 220, 223, 57, 62, 28, 165, 216, 190, 131, 176, 10, 63, 153, 228, 137, 62, 126, 105, 5, 190, 175, 195, 142, 62, 109, 115, 24, 189, 220, 139, 83, 190, 17, 226, 35, 62, 241, 173, 16, 62, 215, 164, 21, 191, 143, 94, 122, 62, 75, 129, 58, 62, 81, 225, 54, 62, 185, 57, 172, 61, 15, 50, 154, 61, 192, 186, 235, 188, 138, 75, 20, 189, 19, 175, 223, 61, 140, 148, 243, 59, 25, 20, 30, 190, 0, 70, 235, 61, 241, 1, 214, 61, 45, 95, 32, 190, 89, 35, 187, 187, 248, 146, 111, 189, 187, 111, 22, 190, 150, 112, 241, 61, 247, 35, 64, 190, 112, 48, 8, 190, 211, 238, 156, 61, 45, 21, 14, 190, 97, 180, 234, 188, 194, 10, 192, 61, 47, 156, 13, 62, 93, 99, 177, 189, 35, 222, 33, 187, 173, 98, 242, 61, 159, 163, 128, 61, 151, 107, 153, 189, 213, 124, 0, 190, 181, 67, 69, 190, 22, 225, 31, 190, 56, 193, 225, 189, 14, 132, 154, 189, 192, 89, 215, 188, 228, 202, 72, 61, 218, 117, 115, 60, 14, 111, 25, 189, 13, 84, 61, 190, 125, 194, 124, 189, 143, 241, 98, 61, 219, 200, 190, 61, 2, 124, 238, 61, 210, 95, 40, 62, 70, 168, 239, 61, 32, 210, 22, 62, 32, 172, 144, 61, 97, 152, 79, 61, 126, 196, 150, 61, 26, 198, 115, 190, 178, 145, 72, 62, 117, 219, 201, 190, 110, 164, 208, 189, 165, 49, 151, 62, 33, 135, 35, 60, 170, 159, 182, 62, 200, 222, 105, 190, 91, 76, 42, 191, 86, 236, 148, 62, 128, 7, 1, 191, 193, 168, 11, 62, 75, 18, 139, 62, 34, 26, 150, 62, 14, 64, 252, 190, 13, 200, 167, 190, 19, 86, 15, 62, 48, 219, 92, 189, 139, 99, 107, 62, 118, 175, 26, 62, 122, 236, 155, 188, 44, 113, 60, 190, 254, 75, 79, 62, 51, 133, 240, 59, 91, 202, 55, 61, 141, 49, 241, 189, 227, 155, 108, 62, 213, 144, 85, 61, 229, 67, 95, 62, 109, 41, 90, 62, 116, 153, 206, 189, 23, 27, 119, 60, 38, 200, 178, 190, 211, 199, 119, 62, 74, 210, 47, 190, 5, 16, 153, 62, 66, 219, 23, 62, 173, 81, 137, 190, 204, 219, 216, 62, 100, 24, 10, 62, 98, 38, 63, 62, 113, 175, 160, 62, 191, 168, 64, 62, 87, 5, 6, 191, 7, 14, 163, 190, 246, 58, 155, 62, 12, 186, 128, 191, 174, 121, 117, 61, 62, 217, 156, 61, 11, 174, 124, 62, 222, 45, 11, 191, 28, 156, 194, 61, 163, 206, 206, 60, 37, 61, 9, 60, 242, 191, 58, 62, 238, 230, 30, 61, 27, 168, 203, 190, 129, 54, 34, 61, 245, 193, 228, 61, 98, 147, 178, 61, 22, 7, 7, 189, 73, 118, 28, 190, 247, 170, 151, 189, 160, 255, 49, 60, 179, 18, 152, 189, 57, 44, 91, 190, 192, 147, 106, 189, 22, 106, 88, 191, 19, 111, 137, 62, 1, 142, 31, 190, 92, 202, 155, 62, 227, 31, 2, 190, 220, 239, 211, 189, 130, 96, 34, 61, 199, 34, 0, 191, 162, 81, 141, 190, 197, 94, 237, 189, 21, 239, 210, 61, 207, 62, 63, 190, 81, 203, 224, 62, 130, 0, 188, 60, 54, 39, 10, 191, 3, 8, 137, 189, 220, 30, 96, 190, 14, 6, 162, 189, 205, 37, 132, 62, 195, 223, 33, 61, 27, 57, 217, 61, 196, 188, 194, 189, 134, 75, 164, 61, 244, 205, 199, 189, 152, 247, 165, 189, 13, 25, 250, 189, 81, 85, 9, 190, 66, 192, 55, 60, 240, 234, 233, 59, 39, 216, 37, 190, 184, 20, 160, 60, 243, 116, 209, 61, 104, 235, 76, 61, 0, 50, 116, 61, 38, 212, 134, 189, 75, 169, 102, 61, 247, 87, 190, 61, 188, 217, 2, 190, 138, 173, 159, 189, 56, 0, 170, 189, 55, 102, 81, 189, 50, 168, 189, 61, 222, 2, 188, 189, 118, 230, 180, 60, 3, 183, 151, 189, 204, 89, 208, 189, 168, 126, 63, 190, 91, 78, 112, 61, 223, 163, 19, 189, 176, 242, 4, 62, 228, 110, 63, 62, 21, 25, 235, 61, 122, 165, 180, 188, 152, 186, 146, 188, 177, 156, 73, 190, 206, 156, 20, 189, 44, 254, 41, 190, 128, 123, 204, 189, 211, 3, 236, 61, 13, 79, 55, 190, 88, 37, 73, 190, 73, 212, 53, 61, 3, 142, 184, 61, 85, 73, 146, 61, 74, 222, 13, 190, 252, 88, 254, 60, 213, 81, 206, 61, 54, 101, 17, 62, 79, 23, 114, 61, 43, 226, 152, 61, 8, 153, 78, 187, 16, 213, 227, 189, 246, 159, 148, 189, 46, 154, 132, 189, 140, 120, 195, 188, 230, 191, 234, 61, 188, 213, 142, 189, 145, 238, 57, 190, 56, 249, 165, 186, 76, 54, 217, 189, 45, 39, 66, 61, 191, 14, 15, 62, 98, 37, 243, 189, 38, 178, 43, 190, 161, 235, 122, 189, 30, 13, 135, 190, 66, 250, 97, 61, 234, 16, 255, 189, 223, 61, 121, 187, 238, 203, 14, 190, 72, 77, 24, 190, 166, 134, 15, 189, 26, 87, 241, 61, 140, 189, 153, 62, 44, 123, 173, 190, 78, 17, 41, 191, 124, 164, 12, 191, 29, 203, 144, 190, 159, 117, 130, 187, 154, 222, 1, 191, 182, 32, 188, 61, 55, 123, 141, 191, 211, 30, 34, 62, 30, 21, 140, 189, 99, 108, 166, 62, 236, 136, 178, 61, 91, 36, 198, 189, 0, 69, 35, 63, 88, 105, 204, 189, 62, 114, 153, 190, 170, 129, 215, 190, 199, 34, 254, 60, 6, 40, 105, 62, 54, 173, 185, 60, 59, 84, 114, 62, 173, 63, 142, 190, 114, 38, 24, 62, 160, 33, 248, 189, 100, 132, 228, 189, 10, 181, 222, 189, 91, 119, 188, 190, 9, 181, 70, 190, 114, 71, 244, 60, 111, 186, 4, 190, 245, 159, 173, 188, 206, 193, 147, 62, 23, 222, 250, 188, 151, 158, 129, 188, 136, 69, 5, 190, 125, 17, 197, 190, 176, 181, 247, 62, 154, 143, 240, 60, 118, 17, 132, 60, 219, 16, 137, 61, 112, 6, 75, 190, 44, 79, 9, 191, 84, 44, 227, 189, 238, 87, 135, 191, 42, 85, 131, 62, 149, 123, 66, 61, 133, 172, 156, 62, 41, 85, 12, 191, 57, 207, 28, 186, 63, 136, 61, 191, 32, 161, 183, 190, 211, 185, 225, 188, 87, 42, 215, 62, 211, 197, 238, 190, 49, 221, 158, 61, 144, 237, 176, 187, 235, 228, 183, 61, 168, 133, 103, 190, 139, 121, 48, 190, 50, 173, 95, 189, 32, 180, 163, 61, 137, 29, 243, 189, 136, 12, 243, 189, 122, 249, 204, 61, 121, 245, 160, 187, 83, 159, 138, 188, 175, 43, 23, 190, 224, 199, 25, 61, 87, 56, 141, 61, 141, 78, 159, 189, 18, 179, 20, 62, 76, 127, 12, 62, 243, 164, 249, 189, 179, 215, 46, 61, 252, 8, 7, 190, 15, 104, 10, 61, 247, 105, 175, 61, 118, 217, 134, 187, 119, 22, 34, 190, 46, 67, 161, 61, 84, 24, 14, 190, 113, 236, 181, 188, 198, 75, 159, 188, 12, 244, 94, 190, 87, 202, 173, 190, 130, 180, 212, 189, 171, 37, 51, 61, 133, 223, 128, 61, 217, 248, 169, 61, 212, 138, 20, 191, 92, 22, 156, 62, 239, 16, 246, 190, 86, 1, 33, 190, 184, 252, 217, 190, 19, 43, 7, 63, 140, 162, 244, 61, 200, 84, 162, 190, 108, 100, 192, 190, 95, 198, 142, 190, 205, 254, 18, 192, 69, 1, 189, 62, 235, 191, 105, 191, 11, 225, 232, 62, 240, 223, 180, 190, 131, 18, 225, 61, 105, 239, 104, 62, 159, 1, 37, 190, 191, 32, 143, 190, 101, 125, 162, 62, 89, 144, 252, 62, 183, 109, 240, 61, 76, 226, 132, 191, 26, 23, 179, 190, 249, 165, 189, 60, 100, 85, 71, 191, 118, 144, 92, 190, 158, 19, 35, 62, 104, 111, 61, 190, 110, 168, 139, 190, 26, 220, 136, 190, 217, 57, 116, 191, 43, 152, 153, 62, 207, 160, 3, 192, 215, 237, 93, 191, 55, 182, 7, 190, 27, 164, 149, 189, 156, 75, 145, 191, 199, 95, 216, 62, 52, 5, 140, 191, 221, 137, 24, 62, 140, 206, 137, 62, 225, 218, 153, 190, 184, 13, 201, 188, 89, 16, 164, 190, 75, 17, 58, 61, 73, 191, 229, 61, 203, 200, 174, 191, 210, 121, 82, 190, 85, 217, 203, 190, 242, 125, 183, 191, 114, 161, 9, 191, 123, 156, 28, 61, 173, 155, 1, 191, 157, 44, 27, 190, 167, 185, 253, 62, 228, 2, 165, 191, 214, 48, 134, 189, 72, 54, 209, 189, 212, 179, 90, 190, 254, 155, 98, 190, 30, 142, 134, 61, 76, 51, 31, 63, 192, 89, 0, 62, 213, 93, 91, 62, 173, 13, 227, 189, 187, 102, 141, 189, 55, 115, 75, 189, 91, 229, 38, 191, 152, 87, 58, 190, 136, 127, 64, 191, 210, 234, 226, 62, 57, 85, 61, 191, 203, 118, 32, 62, 44, 220, 9, 62, 42, 74, 194, 190, 212, 244, 71, 63, 11, 95, 149, 62, 181, 10, 50, 62, 69, 44, 75, 61, 153, 99, 114, 190, 49, 54, 102, 191, 155, 21, 237, 190, 229, 244, 2, 62, 0, 78, 193, 191, 110, 62, 26, 62, 89, 167, 111, 62, 22, 200, 48, 60, 218, 195, 69, 191, 91, 156, 31, 62, 92, 174, 132, 61, 45, 43, 162, 190, 241, 225, 158, 62, 11, 63, 78, 62, 129, 247, 165, 60, 65, 2, 149, 59, 34, 71, 158, 190, 50, 81, 35, 190, 1, 227, 3, 190, 10, 173, 212, 61, 56, 98, 138, 61, 235, 243, 158, 62, 100, 174, 32, 62, 132, 37, 184, 61, 182, 226, 37, 63, 246, 88, 144, 190, 65, 192, 20, 191, 132, 239, 111, 62, 12, 47, 197, 190, 202, 23, 126, 62, 205, 10, 25, 63, 103, 240, 239, 61, 128, 114, 70, 190, 145, 28, 229, 188, 198, 116, 76, 188, 51, 149, 99, 62, 127, 150, 54, 62, 19, 249, 7, 62, 14, 220, 9, 191, 41, 123, 35, 191, 161, 41, 170, 61, 91, 37, 156, 191, 66, 52, 201, 190, 132, 124, 69, 62, 171, 190, 68, 191, 91, 253, 251, 59, 189, 80, 4, 191, 4, 160, 43, 191, 61, 94, 65, 62, 64, 232, 140, 61, 94, 38, 38, 191, 0, 158, 254, 61, 227, 206, 191, 189, 56, 218, 110, 62, 118, 251, 56, 62, 28, 80, 22, 190, 212, 239, 134, 61, 255, 192, 78, 62, 32, 141, 86, 189, 160, 149, 15, 63, 110, 107, 47, 190, 171, 142, 23, 61, 237, 170, 11, 62, 135, 249, 143, 189, 253, 165, 209, 190, 207, 57, 151, 190, 131, 59, 154, 191, 144, 30, 25, 62, 145, 79, 20, 61, 57, 136, 132, 62, 245, 179, 90, 190, 173, 26, 82, 62, 253, 94, 75, 191, 77, 24, 73, 191, 11, 9, 239, 190, 74, 70, 182, 62, 46, 247, 181, 190, 255, 140, 85, 61, 171, 141, 162, 189, 15, 45, 99, 190, 65, 220, 235, 59, 140, 149, 249, 186, 168, 78, 71, 190, 142, 114, 8, 62, 36, 160, 114, 189, 113, 243, 64, 190, 181, 139, 20, 187, 70, 34, 22, 188, 254, 119, 178, 188, 131, 237, 41, 190, 206, 210, 156, 189, 6, 165, 187, 61, 14, 232, 7, 61, 97, 54, 136, 187, 97, 105, 61, 61, 219, 89, 158, 59, 142, 163, 165, 60, 142, 94, 228, 189, 109, 166, 150, 189, 64, 252, 205, 187, 145, 15, 6, 62, 9, 84, 141, 189, 8, 188, 183, 61, 239, 193, 131, 61, 128, 171, 168, 61, 74, 116, 216, 188, 164, 160, 20, 61, 15, 106, 13, 61, 140, 64, 82, 190, 157, 38, 170, 190, 189, 180, 218, 62, 51, 207, 15, 189, 131, 213, 135, 62, 38, 244, 93, 191, 204, 67, 9, 62, 191, 53, 0, 63, 11, 97, 205, 62, 89, 254, 186, 191, 31, 182, 151, 189, 182, 218, 118, 62, 187, 111, 27, 188, 95, 210, 48, 62, 70, 121, 200, 62, 174, 94, 138, 191, 0, 115, 49, 191, 164, 60, 15, 190, 248, 162, 66, 62, 30, 137, 153, 190, 230, 71, 138, 185, 173, 234, 211, 190, 64, 78, 179, 191, 81, 147, 156, 191, 213, 52, 28, 62, 200, 209, 134, 190, 48, 192, 145, 62, 141, 153, 34, 62, 193, 175, 190, 191, 191, 22, 98, 62, 184, 15, 238, 61, 176, 144, 165, 190, 13, 212, 33, 61, 14, 218, 1, 191, 103, 239, 247, 61, 128, 134, 199, 61, 243, 144, 53, 191, 54, 218, 160, 59, 171, 244, 162, 62, 160, 220, 215, 190, 170, 9, 57, 62, 125, 209, 31, 189, 84, 190, 117, 190, 30, 61, 65, 62, 46, 249, 29, 190, 163, 110, 154, 189, 166, 59, 85, 190, 70, 1, 250, 189, 195, 234, 140, 190, 199, 92, 96, 62, 130, 174, 88, 191, 185, 66, 199, 188, 100, 70, 177, 189, 153, 34, 105, 62, 213, 30, 154, 62, 50, 242, 38, 189, 0, 168, 200, 189, 21, 133, 156, 191, 28, 63, 26, 190, 143, 228, 102, 62, 57, 56, 240, 61, 185, 8, 60, 186, 135, 126, 243, 189, 187, 1, 147, 191, 179, 212, 60, 190, 14, 14, 174, 188, 255, 129, 66, 62, 20, 138, 189, 62, 116, 240, 253, 60, 95, 237, 92, 62, 252, 208, 202, 61, 191, 139, 151, 62, 12, 149, 93, 62, 95, 77, 184, 190, 249, 17, 232, 60, 249, 68, 190, 62, 129, 195, 90, 62, 157, 22, 242, 59, 189, 84, 176, 61, 209, 182, 169, 189, 208, 23, 140, 62, 229, 154, 143, 190, 221, 248, 122, 61, 219, 248, 55, 62, 7, 248, 16, 62, 216, 81, 1, 190, 216, 89, 112, 62, 89, 76, 184, 190, 194, 45, 93, 61, 2, 154, 178, 189, 19, 43, 52, 189, 7, 203, 238, 61, 24, 34, 6, 62, 10, 216, 83, 62, 131, 131, 68, 62, 111, 183, 140, 190, 64, 123, 140, 62, 217, 44, 55, 188, 252, 250, 121, 61, 239, 209, 9, 189, 246, 153, 32, 62, 52, 70, 185, 188, 17, 231, 100, 62, 221, 227, 91, 189, 8, 97, 214, 189, 166, 242, 46, 62, 201, 97, 186, 189, 78, 153, 127, 62, 133, 2, 209, 190, 145, 72, 73, 62, 55, 194, 185, 61, 9, 30, 0, 190, 235, 223, 110, 62, 4, 25, 157, 62, 50, 77, 130, 190, 76, 59, 154, 61, 74, 113, 152, 60, 193, 234, 189, 61, 240, 18, 74, 62, 11, 89, 149, 62, 232, 47, 143, 190, 126, 29, 27, 62, 75, 176, 147, 62, 46, 196, 225, 59, 116, 136, 247, 61, 138, 36, 13, 62, 206, 98, 64, 189, 80, 125, 33, 188, 134, 142, 84, 62, 122, 148, 181, 190, 82, 242, 55, 62, 234, 160, 199, 188, 31, 230, 95, 61, 188, 113, 76, 61, 242, 122, 228, 61, 199, 36, 138, 190, 200, 83, 160, 61, 5, 12, 45, 190, 9, 88, 0, 191, 66, 199, 92, 62, 170, 27, 177, 190, 24, 221, 58, 62, 23, 111, 37, 62, 118, 79, 47, 188, 175, 141, 67, 62, 154, 248, 141, 62, 39, 25, 240, 188, 15, 124, 149, 61, 159, 243, 218, 188, 220, 252, 2, 60, 157, 178, 16, 62, 36, 205, 97, 62, 11, 49, 173, 190, 135, 3, 33, 62, 125, 181, 3, 62, 102, 164, 97, 62, 103, 211, 10, 62, 86, 41, 60, 60, 221, 175, 221, 61, 105, 45, 113, 61, 222, 225, 32, 62, 148, 121, 2, 62, 208, 135, 5, 190, 140, 3, 12, 62, 71, 16, 97, 190, 11, 199, 141, 62, 56, 176, 163, 61, 244, 158, 96, 189, 121, 93, 13, 62, 15, 134, 95, 62, 242, 199, 120, 61, 242, 226, 192, 59, 61, 58, 82, 63, 17, 126, 12, 191, 108, 130, 192, 61, 162, 18, 31, 62, 197, 24, 113, 189, 153, 224, 133, 61, 185, 149, 208, 62, 184, 220, 129, 62, 44, 184, 71, 191, 212, 215, 91, 62, 218, 234, 1, 62, 112, 219, 248, 61, 232, 187, 5, 188, 6, 97, 166, 62, 141, 168, 20, 61, 103, 58, 182, 190, 11, 62, 162, 61, 31, 43, 104, 191, 113, 88, 103, 190, 33, 7, 105, 62, 169, 154, 100, 190, 20, 5, 247, 190, 232, 239, 241, 61, 252, 57, 114, 62, 133, 237, 102, 62, 227, 44, 186, 189, 99, 81, 158, 62, 82, 222, 215, 189, 250, 113, 84, 62, 157, 192, 146, 62, 65, 143, 169, 190, 131, 86, 103, 62, 217, 140, 154, 190, 185, 24, 214, 62, 183, 78, 13, 63, 124, 184, 180, 190, 183, 178, 220, 62, 170, 208, 245, 62, 166, 81, 207, 190, 106, 84, 30, 190, 252, 225, 7, 190, 6, 5, 176, 61, 89, 23, 53, 189, 44, 199, 76, 189, 232, 54, 158, 190, 94, 97, 135, 191, 12, 151, 20, 61, 58, 95, 200, 62, 203, 143, 211, 61, 130, 126, 253, 60, 138, 79, 16, 190, 125, 114, 26, 191, 233, 241, 190, 187, 86, 224, 85, 61, 114, 15, 232, 189, 254, 79, 14, 62, 187, 52, 144, 188, 186, 66, 13, 190, 54, 9, 143, 61, 133, 122, 4, 62, 93, 177, 107, 61, 139, 213, 210, 189, 68, 42, 246, 189, 152, 81, 184, 189, 167, 223, 56, 61, 121, 188, 248, 186, 123, 255, 166, 60, 84, 111, 153, 188, 73, 98, 247, 189, 40, 94, 145, 189, 233, 211, 49, 189, 150, 214, 2, 190, 84, 155, 153, 61, 245, 174, 61, 190, 116, 164, 120, 188, 224, 229, 167, 189, 17, 250, 186, 61, 220, 66, 20, 61, 189, 107, 79, 189, 108, 70, 54, 190, 178, 120, 62, 189, 246, 99, 13, 190, 132, 91, 240, 61, 244, 13, 2, 190, 103, 157, 148, 61, 32, 205, 163, 61, 158, 238, 249, 61, 144, 241, 136, 60, 84, 192, 37, 60, 244, 118, 87, 189, 169, 90, 183, 61, 40, 240, 49, 189, 102, 88, 79, 60, 24, 38, 130, 189, 141, 161, 158, 61, 0, 54, 32, 190, 45, 24, 93, 190, 203, 144, 0, 190, 207, 214, 2, 190, 216, 23, 85, 189, 51, 27, 203, 188, 155, 211, 235, 188, 93, 36, 44, 61, 200, 150, 248, 189, 135, 209, 19, 60, 177, 221, 189, 189, 156, 184, 246, 61, 215, 145, 226, 60, 98, 18, 173, 188, 145, 90, 178, 61, 14, 117, 167, 185, 122, 122, 125, 189, 99, 169, 195, 189, 234, 19, 10, 61, 131, 207, 51, 190, 223, 133, 66, 190, 26, 253, 226, 189, 97, 132, 135, 62, 62, 158, 52, 190, 25, 214, 126, 189, 118, 91, 129, 61, 103, 2, 210, 61, 21, 56, 196, 61, 197, 98, 154, 62, 102, 165, 136, 62, 186, 255, 127, 62, 11, 30, 134, 61, 17, 32, 45, 190, 175, 119, 50, 63, 106, 194, 138, 190, 4, 142, 51, 190, 74, 152, 0, 62, 174, 28, 132, 190, 55, 55, 64, 62, 149, 244, 63, 61, 154, 148, 176, 60, 4, 129, 11, 191, 200, 96, 134, 61, 109, 165, 218, 190, 97, 40, 49, 61, 169, 167, 63, 61, 37, 87, 196, 62, 216, 241, 69, 190, 77, 98, 128, 190, 140, 175, 121, 190, 93, 0, 126, 191, 192, 73, 179, 190, 247, 18, 138, 62, 178, 164, 128, 190, 192, 153, 25, 191, 16, 222, 229, 61, 44, 116, 120, 62, 225, 179, 199, 189, 27, 190, 215, 61, 242, 55, 166, 61, 196, 221, 121, 190, 79, 53, 3, 63, 76, 164, 40, 188, 97, 45, 225, 190, 229, 114, 133, 190, 225, 197, 29, 61, 160, 67, 226, 62, 157, 109, 56, 62, 102, 128, 39, 191, 153, 131, 254, 61, 108, 76, 153, 189, 74, 102, 115, 189, 133, 133, 124, 190, 76, 62, 58, 189, 94, 98, 39, 63, 116, 127, 38, 62, 144, 120, 1, 191, 252, 21, 168, 190, 105, 6, 157, 190, 80, 154, 245, 61, 113, 18, 149, 62, 20, 247, 207, 62, 153, 76, 182, 62, 10, 226, 9, 62, 229, 92, 131, 190, 165, 46, 49, 62, 168, 240, 151, 62, 165, 9, 110, 190, 66, 98, 148, 61, 16, 92, 241, 189, 90, 77, 91, 60, 212, 44, 82, 190, 114, 228, 190, 62, 65, 40, 19, 62, 206, 204, 125, 62, 175, 164, 174, 62, 130, 18, 107, 190, 146, 85, 210, 62, 24, 109, 41, 190, 18, 132, 156, 190, 69, 190, 207, 62, 222, 55, 156, 61, 25, 229, 102, 62, 255, 181, 166, 62, 2, 86, 138, 62, 254, 12, 92, 190, 255, 196, 179, 61, 145, 23, 14, 191, 72, 233, 192, 62, 51, 123, 34, 61, 144, 230, 145, 188, 164, 35, 27, 190, 53, 42, 54, 190, 150, 163, 167, 190, 207, 140, 82, 191, 189, 146, 251, 190, 53, 243, 176, 62, 173, 116, 231, 190, 245, 205, 51, 62, 233, 201, 161, 190, 225, 143, 66, 62, 179, 147, 234, 60, 14, 228, 137, 61, 20, 72, 13, 62, 189, 194, 195, 62, 2, 43, 1, 188, 7, 125, 7, 190, 189, 54, 139, 189, 142, 169, 127, 190, 205, 204, 38, 61, 59, 159, 11, 61, 148, 110, 180, 61, 226, 44, 86, 62, 26, 142, 50, 190, 155, 103, 76, 190, 45, 229, 192, 61, 0, 252, 214, 60, 148, 244, 205, 190, 124, 159, 153, 190, 82, 147, 182, 190, 160, 227, 27, 189, 220, 223, 246, 190, 65, 236, 36, 190, 31, 145, 233, 61, 62, 177, 156, 61, 173, 157, 192, 190, 51, 101, 98, 62, 195, 198, 12, 190, 45, 182, 98, 62, 167, 187, 166, 189, 105, 152, 99, 61, 51, 58, 108, 61, 11, 82, 104, 189, 167, 68, 1, 190, 195, 20, 89, 190, 232, 129, 32, 190, 255, 37, 142, 59, 184, 18, 234, 188, 130, 131, 204, 189, 255, 70, 80, 190, 114, 132, 220, 61, 130, 57, 244, 61, 156, 98, 139, 189, 139, 120, 13, 190, 202, 26, 33, 190, 138, 230, 15, 62, 51, 44, 57, 189, 108, 42, 154, 189, 87, 186, 187, 61, 113, 84, 217, 61, 202, 146, 84, 190, 236, 236, 209, 188, 27, 218, 136, 61, 15, 125, 147, 61, 239, 161, 20, 62, 89, 2, 19, 190, 24, 207, 130, 188, 218, 81, 90, 189, 54, 250, 47, 190, 125, 21, 30, 190, 97, 77, 104, 61, 47, 100, 100, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 120, 255, 189, 100, 76, 146, 188, 217, 63, 91, 62, 221, 115, 98, 60, 131, 110, 164, 62, 231, 10, 17, 62, 148, 249, 64, 62, 227, 77, 116, 189, 161, 245, 29, 190, 98, 154, 146, 189, 82, 96, 44, 62, 92, 226, 49, 190, 75, 217, 104, 62, 253, 182, 45, 61, 136, 41, 3, 62, 201, 236, 126, 60, 7, 210, 92, 61, 189, 207, 67, 190, 8, 158, 7, 61, 42, 244, 75, 190, 15, 184, 32, 190, 190, 174, 173, 62, 53, 54, 69, 62, 195, 250, 89, 61, 102, 149, 62, 62, 80, 239, 56, 189, 121, 151, 22, 190, 100, 43, 249, 61, 230, 11, 171, 189, 245, 94, 130, 62, 92, 129, 114, 62, 120, 207, 112, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 29, 154, 191, 227, 243, 251, 62, 56, 204, 199, 190, 137, 148, 9, 62, 66, 201, 19, 190, 155, 224, 115, 190, 48, 197, 89, 61, 125, 170, 141, 60, 63, 164, 253, 61, 145, 16, 250, 190, 170, 35, 33, 63, 168, 211, 219, 189, 244, 222, 147, 191, 89, 247, 133, 63, 99, 143, 69, 191, 5, 236, 221, 62, 64, 75, 181, 62, 18, 185, 15, 188, 161, 101, 27, 63, 176, 110, 79, 191, 104, 127, 65, 62, 33, 22, 0, 190, 6, 24, 180, 189, 177, 5, 82, 62, 62, 23, 4, 191, 188, 156, 122, 189, 0, 67, 43, 61, 12, 235, 140, 62, 96, 125, 56, 63, 159, 40, 37, 63, 235, 200, 239, 188, 95, 10, 124, 189, 214, 85, 240, 187, 2, 244, 59, 62, 108, 143, 176, 189, 87, 35, 3, 62, 206, 41, 159, 190, 197, 27, 157, 190, 65, 168, 26, 191, 224, 179, 191, 188, 10, 227, 241, 61, 209, 150, 227, 60, 82, 49, 128, 62, 6, 11, 212, 59, 96, 167, 73, 62, 65, 35, 143, 62, 2, 41, 166, 62, 42, 15, 164, 62, 66, 221, 145, 189, 235, 10, 122, 60, 121, 133, 6, 189, 106, 185, 49, 62, 61, 108, 103, 62, 108, 136, 72, 190, 163, 161, 217, 189, 57, 201, 3, 190, 199, 3, 216, 188, 246, 156, 46, 190, 217, 201, 140, 188, 230, 107, 198, 60, 115, 123, 186, 189, 217, 50, 192, 190, 171, 206, 76, 190, 29, 38, 205, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 42, 33, 189, 155, 25, 129, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {93, 120, 68, 190, 126, 116, 172, 190, 142, 8, 202, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {165, 184, 249, 63, 228, 232, 138, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0082/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}