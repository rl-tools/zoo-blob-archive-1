// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 66, 24, 63, 48, 105, 211, 58, 197, 18, 51, 191, 35, 198, 20, 191, 115, 7, 151, 61, 201, 151, 247, 190, 215, 17, 1, 191, 41, 174, 19, 190, 176, 12, 28, 191, 197, 50, 164, 62, 56, 10, 166, 63, 33, 181, 170, 62, 79, 96, 24, 62, 171, 120, 70, 191, 168, 85, 139, 190, 243, 68, 95, 191, 188, 134, 169, 61, 74, 184, 240, 190, 30, 20, 202, 62, 23, 39, 101, 62, 31, 238, 206, 190, 168, 123, 255, 190, 113, 222, 107, 190, 106, 4, 188, 189, 227, 47, 169, 62, 218, 200, 153, 191, 97, 113, 182, 190, 177, 142, 206, 62, 217, 71, 100, 191, 214, 197, 104, 190, 64, 119, 231, 61, 119, 69, 180, 62, 60, 88, 9, 191, 59, 198, 91, 191, 35, 201, 63, 189, 151, 120, 226, 61, 12, 85, 191, 190, 7, 47, 107, 63, 178, 169, 232, 61, 32, 71, 6, 63, 114, 38, 120, 63, 49, 194, 92, 62, 177, 56, 138, 62, 52, 78, 30, 191, 4, 21, 10, 191, 153, 37, 121, 63, 34, 23, 150, 62, 224, 70, 46, 62, 206, 31, 50, 191, 159, 241, 56, 191, 141, 197, 117, 62, 244, 42, 6, 191, 203, 198, 15, 63, 111, 156, 192, 62, 254, 153, 212, 62, 80, 215, 24, 191, 79, 186, 172, 190, 230, 182, 73, 190, 61, 41, 248, 62, 44, 241, 195, 62, 57, 214, 153, 190, 231, 156, 117, 191, 73, 243, 136, 190, 187, 154, 50, 191, 152, 213, 189, 191, 220, 80, 208, 190, 239, 150, 209, 62, 40, 2, 89, 191, 64, 177, 120, 190, 24, 134, 219, 62, 186, 220, 176, 191, 125, 51, 163, 190, 19, 78, 232, 62, 205, 162, 95, 191, 48, 105, 150, 62, 169, 14, 222, 62, 17, 182, 115, 63, 203, 221, 177, 62, 114, 19, 226, 190, 236, 77, 120, 63, 67, 7, 22, 62, 191, 48, 226, 190, 53, 238, 180, 191, 26, 142, 178, 190, 238, 186, 45, 63, 158, 250, 92, 63, 214, 164, 202, 62, 21, 5, 220, 62, 78, 159, 246, 62, 29, 75, 162, 62, 169, 138, 251, 62, 36, 72, 92, 191, 109, 35, 104, 60, 89, 180, 207, 62, 22, 48, 136, 63, 27, 41, 193, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 169, 200, 190, 121, 141, 175, 190, 253, 163, 247, 61, 225, 57, 243, 62, 63, 173, 222, 62, 72, 75, 78, 62, 182, 108, 178, 189, 249, 151, 147, 186, 171, 84, 41, 63, 21, 53, 231, 61, 235, 145, 199, 61, 58, 227, 160, 190, 245, 244, 13, 63, 135, 70, 204, 61, 47, 195, 208, 190, 174, 209, 76, 190, 0, 83, 197, 62, 12, 81, 115, 62, 151, 122, 73, 63, 197, 197, 55, 191, 40, 21, 1, 63, 228, 81, 84, 190, 96, 66, 31, 63, 214, 58, 172, 60, 240, 233, 132, 189, 13, 99, 198, 61, 5, 209, 37, 63, 158, 222, 69, 59, 5, 207, 64, 191, 203, 185, 250, 190, 180, 85, 99, 62, 32, 25, 58, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 144, 115, 190, 53, 205, 211, 61, 136, 220, 43, 189, 53, 189, 41, 62, 41, 13, 123, 190, 223, 31, 31, 190, 127, 201, 163, 189, 253, 186, 32, 190, 108, 249, 140, 190, 106, 53, 63, 190, 44, 85, 108, 61, 147, 148, 171, 61, 138, 180, 13, 62, 147, 62, 22, 62, 234, 42, 8, 190, 1, 67, 7, 191, 167, 67, 244, 188, 99, 146, 17, 62, 252, 89, 199, 189, 93, 16, 248, 188, 220, 107, 18, 191, 246, 228, 58, 191, 147, 123, 221, 190, 110, 34, 191, 190, 223, 151, 83, 191, 65, 109, 195, 189, 225, 225, 22, 62, 118, 247, 18, 191, 211, 235, 252, 190, 25, 111, 200, 190, 171, 14, 71, 190, 97, 1, 1, 190, 196, 193, 132, 190, 229, 145, 47, 62, 128, 179, 51, 62, 148, 11, 56, 62, 47, 229, 251, 189, 169, 74, 18, 62, 179, 86, 222, 189, 33, 190, 187, 189, 236, 61, 168, 190, 44, 189, 211, 189, 255, 170, 35, 62, 184, 32, 89, 60, 34, 172, 148, 62, 75, 223, 105, 188, 126, 24, 135, 190, 67, 72, 153, 190, 140, 250, 181, 190, 79, 169, 231, 61, 129, 198, 150, 190, 97, 25, 137, 189, 43, 230, 33, 190, 206, 74, 19, 190, 191, 246, 103, 191, 230, 223, 28, 62, 60, 98, 209, 189, 94, 194, 70, 60, 227, 187, 117, 62, 6, 125, 239, 189, 117, 114, 155, 189, 21, 231, 1, 62, 20, 103, 236, 190, 87, 107, 37, 62, 155, 157, 158, 190, 245, 212, 5, 63, 43, 65, 133, 58, 56, 159, 145, 61, 215, 121, 86, 62, 101, 211, 89, 188, 17, 243, 102, 190, 179, 13, 94, 62, 161, 247, 34, 190, 216, 160, 177, 190, 112, 149, 122, 62, 169, 60, 9, 190, 70, 2, 21, 62, 121, 73, 75, 62, 97, 173, 171, 190, 28, 33, 30, 63, 166, 204, 135, 62, 165, 189, 78, 60, 95, 92, 164, 62, 150, 163, 50, 190, 62, 160, 213, 189, 165, 201, 35, 61, 145, 77, 86, 62, 82, 150, 1, 191, 116, 176, 141, 62, 63, 201, 64, 62, 245, 176, 30, 62, 227, 94, 21, 60, 162, 194, 201, 60, 100, 49, 97, 189, 153, 49, 14, 61, 217, 104, 210, 61, 140, 148, 243, 59, 25, 20, 30, 190, 0, 70, 235, 61, 241, 1, 214, 61, 45, 95, 32, 190, 89, 35, 187, 187, 248, 146, 111, 189, 187, 111, 22, 190, 150, 112, 241, 61, 247, 35, 64, 190, 112, 48, 8, 190, 211, 238, 156, 61, 45, 21, 14, 190, 97, 180, 234, 188, 194, 10, 192, 61, 47, 156, 13, 62, 93, 99, 177, 189, 35, 222, 33, 187, 173, 98, 242, 61, 159, 163, 128, 61, 151, 107, 153, 189, 213, 124, 0, 190, 181, 67, 69, 190, 22, 225, 31, 190, 56, 193, 225, 189, 14, 132, 154, 189, 192, 89, 215, 188, 228, 202, 72, 61, 218, 117, 115, 60, 14, 111, 25, 189, 13, 84, 61, 190, 125, 194, 124, 189, 187, 101, 186, 61, 130, 254, 11, 62, 16, 222, 221, 61, 82, 247, 159, 61, 172, 20, 12, 62, 88, 106, 39, 62, 70, 170, 229, 61, 155, 149, 37, 62, 213, 75, 99, 61, 23, 223, 144, 190, 46, 176, 114, 62, 234, 111, 150, 62, 118, 172, 38, 190, 29, 32, 131, 62, 160, 214, 200, 187, 44, 56, 198, 62, 3, 11, 179, 189, 229, 156, 137, 190, 157, 252, 150, 62, 164, 221, 190, 190, 60, 12, 64, 62, 69, 237, 145, 62, 239, 161, 147, 62, 9, 11, 2, 191, 103, 148, 71, 190, 221, 115, 170, 61, 217, 178, 247, 189, 225, 65, 85, 62, 127, 134, 56, 190, 207, 161, 54, 190, 9, 200, 25, 190, 37, 175, 211, 61, 231, 92, 8, 190, 182, 11, 247, 187, 90, 32, 92, 190, 55, 246, 46, 62, 133, 7, 60, 62, 60, 117, 158, 61, 110, 140, 38, 62, 45, 50, 45, 190, 203, 173, 189, 61, 50, 8, 123, 190, 20, 128, 58, 62, 229, 236, 4, 190, 37, 134, 58, 62, 176, 63, 7, 62, 144, 111, 205, 190, 95, 128, 235, 62, 36, 24, 236, 61, 135, 92, 240, 61, 142, 254, 192, 62, 222, 166, 246, 61, 95, 160, 139, 190, 37, 30, 55, 190, 50, 95, 190, 62, 243, 195, 80, 191, 165, 171, 181, 60, 42, 82, 86, 61, 83, 171, 228, 61, 69, 227, 174, 190, 112, 48, 178, 189, 160, 125, 153, 189, 139, 194, 27, 61, 217, 51, 17, 62, 10, 42, 49, 62, 14, 37, 141, 190, 173, 125, 3, 62, 67, 110, 172, 60, 217, 210, 37, 62, 205, 44, 194, 61, 113, 110, 143, 189, 55, 193, 203, 61, 186, 222, 31, 61, 69, 155, 57, 189, 80, 176, 184, 189, 184, 8, 127, 62, 1, 125, 70, 191, 63, 252, 13, 62, 246, 73, 207, 189, 46, 232, 78, 62, 230, 129, 185, 61, 228, 208, 161, 61, 128, 179, 17, 62, 38, 95, 142, 189, 227, 116, 165, 189, 227, 61, 177, 61, 122, 80, 5, 62, 110, 38, 213, 189, 53, 121, 227, 62, 119, 30, 185, 189, 83, 119, 245, 190, 6, 118, 231, 61, 100, 94, 203, 190, 1, 47, 142, 189, 48, 161, 113, 62, 76, 169, 228, 189, 27, 57, 217, 61, 196, 188, 194, 189, 134, 75, 164, 61, 16, 164, 198, 189, 61, 241, 165, 189, 13, 25, 250, 189, 81, 85, 9, 190, 66, 192, 55, 60, 255, 51, 244, 59, 18, 203, 37, 190, 184, 20, 160, 60, 243, 116, 209, 61, 200, 97, 77, 61, 32, 108, 118, 61, 38, 212, 134, 189, 191, 238, 105, 61, 9, 206, 191, 61, 74, 54, 2, 190, 138, 173, 159, 189, 160, 74, 169, 189, 55, 102, 81, 189, 50, 168, 189, 61, 15, 12, 187, 189, 118, 230, 180, 60, 32, 110, 149, 189, 52, 181, 206, 189, 28, 76, 63, 190, 91, 78, 112, 61, 152, 131, 16, 189, 85, 207, 5, 62, 245, 161, 64, 62, 250, 171, 236, 61, 171, 102, 51, 58, 80, 253, 50, 60, 74, 192, 46, 190, 229, 50, 238, 187, 81, 224, 15, 190, 240, 178, 146, 189, 196, 81, 15, 62, 13, 79, 55, 190, 63, 141, 48, 190, 32, 126, 140, 61, 10, 106, 233, 61, 85, 73, 146, 61, 212, 165, 222, 189, 133, 235, 117, 61, 20, 34, 1, 62, 249, 77, 32, 62, 79, 23, 114, 61, 43, 226, 152, 61, 157, 28, 166, 60, 16, 213, 227, 189, 67, 114, 72, 189, 46, 154, 132, 189, 190, 209, 72, 58, 173, 254, 0, 62, 188, 213, 142, 189, 182, 103, 40, 190, 67, 101, 235, 60, 76, 54, 217, 189, 45, 39, 66, 61, 191, 14, 15, 62, 84, 32, 248, 189, 40, 252, 42, 190, 221, 202, 233, 61, 146, 2, 105, 190, 139, 58, 124, 60, 121, 126, 7, 62, 21, 72, 231, 189, 172, 208, 25, 190, 148, 173, 244, 61, 76, 101, 0, 61, 115, 254, 35, 60, 120, 1, 45, 62, 102, 221, 125, 190, 149, 103, 91, 190, 78, 38, 128, 189, 191, 90, 252, 186, 177, 175, 41, 62, 81, 134, 194, 190, 216, 222, 8, 190, 226, 124, 230, 187, 84, 171, 95, 61, 197, 78, 246, 189, 123, 176, 246, 61, 146, 131, 55, 187, 103, 154, 58, 190, 197, 165, 239, 62, 226, 34, 76, 61, 60, 89, 244, 188, 102, 52, 173, 61, 111, 100, 224, 189, 249, 160, 230, 61, 45, 200, 240, 60, 114, 223, 123, 62, 152, 82, 176, 60, 242, 252, 150, 61, 82, 125, 78, 190, 77, 8, 106, 190, 197, 192, 150, 189, 222, 7, 200, 190, 243, 200, 76, 190, 255, 163, 93, 60, 121, 32, 137, 189, 201, 109, 52, 189, 120, 25, 149, 62, 207, 237, 80, 190, 104, 25, 33, 62, 147, 22, 197, 189, 51, 120, 185, 190, 128, 38, 168, 62, 66, 165, 4, 189, 252, 239, 39, 62, 194, 208, 41, 62, 80, 250, 3, 190, 83, 241, 75, 190, 57, 47, 4, 190, 158, 99, 58, 191, 187, 157, 119, 62, 38, 236, 105, 61, 62, 207, 129, 62, 82, 192, 0, 191, 240, 248, 183, 60, 52, 39, 235, 190, 209, 71, 241, 190, 16, 126, 233, 189, 47, 34, 182, 62, 200, 157, 204, 190, 49, 221, 158, 61, 144, 237, 176, 187, 130, 169, 157, 61, 98, 115, 78, 190, 139, 121, 48, 190, 50, 173, 95, 189, 32, 180, 163, 61, 104, 95, 243, 189, 122, 156, 247, 189, 122, 249, 204, 61, 121, 245, 160, 187, 35, 180, 45, 188, 68, 51, 7, 190, 225, 221, 133, 61, 87, 56, 141, 61, 141, 78, 159, 189, 205, 62, 30, 62, 116, 121, 10, 62, 15, 29, 250, 189, 168, 155, 113, 61, 110, 213, 233, 189, 15, 104, 10, 61, 149, 11, 220, 61, 118, 217, 134, 187, 120, 107, 15, 190, 173, 17, 214, 61, 47, 138, 254, 189, 80, 35, 183, 188, 127, 133, 72, 60, 100, 156, 63, 190, 181, 159, 158, 190, 156, 249, 153, 189, 12, 127, 13, 62, 182, 184, 182, 61, 52, 33, 124, 61, 165, 151, 151, 188, 183, 148, 62, 62, 76, 136, 235, 190, 229, 122, 185, 189, 163, 57, 1, 190, 252, 213, 183, 62, 209, 195, 122, 189, 237, 176, 156, 190, 36, 87, 193, 189, 148, 99, 81, 190, 28, 23, 108, 191, 10, 222, 228, 62, 246, 47, 29, 191, 112, 202, 202, 61, 216, 37, 236, 61, 17, 223, 175, 188, 138, 225, 140, 61, 114, 51, 140, 190, 22, 180, 124, 190, 141, 250, 12, 62, 211, 139, 178, 62, 140, 105, 175, 61, 44, 105, 186, 190, 63, 67, 138, 190, 126, 130, 87, 188, 138, 77, 167, 190, 136, 122, 132, 190, 70, 183, 15, 189, 124, 233, 194, 189, 139, 19, 155, 190, 46, 246, 198, 59, 79, 53, 174, 190, 217, 40, 144, 62, 130, 113, 239, 191, 76, 161, 169, 190, 16, 231, 101, 190, 221, 252, 19, 189, 141, 243, 147, 191, 199, 95, 216, 62, 96, 146, 236, 190, 176, 140, 130, 62, 35, 92, 164, 62, 48, 122, 186, 190, 184, 13, 201, 188, 90, 14, 170, 190, 121, 20, 132, 62, 247, 89, 122, 62, 246, 215, 138, 191, 100, 233, 50, 190, 23, 95, 169, 190, 233, 79, 166, 191, 58, 45, 201, 190, 123, 156, 28, 61, 108, 27, 140, 190, 227, 142, 78, 190, 197, 84, 13, 63, 109, 46, 156, 191, 105, 233, 65, 190, 167, 170, 12, 190, 221, 252, 158, 189, 102, 41, 155, 190, 202, 124, 130, 61, 26, 94, 59, 63, 99, 197, 190, 61, 161, 52, 211, 61, 60, 122, 80, 188, 38, 101, 196, 189, 163, 6, 178, 189, 84, 43, 14, 191, 211, 234, 40, 190, 132, 110, 237, 190, 110, 89, 194, 62, 100, 42, 38, 191, 204, 64, 42, 61, 200, 121, 43, 61, 207, 122, 143, 190, 246, 209, 28, 63, 69, 108, 152, 186, 247, 145, 54, 62, 17, 185, 199, 60, 17, 223, 56, 189, 114, 201, 39, 191, 178, 245, 171, 190, 223, 183, 239, 61, 109, 39, 110, 191, 0, 213, 156, 189, 115, 82, 84, 62, 174, 173, 235, 189, 36, 181, 236, 190, 182, 238, 145, 62, 3, 25, 39, 62, 52, 216, 165, 190, 190, 227, 151, 62, 127, 66, 150, 61, 66, 87, 0, 189, 8, 105, 139, 188, 166, 97, 234, 189, 163, 226, 222, 189, 186, 147, 36, 190, 148, 220, 248, 60, 93, 198, 101, 188, 244, 127, 217, 62, 184, 151, 159, 62, 97, 242, 130, 61, 77, 76, 63, 61, 15, 82, 37, 190, 20, 244, 214, 190, 136, 193, 26, 62, 66, 167, 118, 190, 222, 128, 153, 62, 55, 211, 20, 62, 15, 66, 63, 62, 212, 141, 173, 60, 64, 46, 185, 59, 59, 86, 222, 59, 4, 9, 176, 62, 55, 164, 148, 62, 85, 225, 151, 62, 210, 142, 153, 190, 117, 217, 1, 191, 19, 82, 13, 62, 79, 166, 227, 190, 147, 232, 5, 188, 39, 19, 178, 62, 199, 143, 221, 190, 110, 21, 217, 189, 192, 130, 25, 191, 135, 242, 24, 191, 90, 94, 28, 62, 106, 38, 147, 60, 219, 23, 252, 190, 0, 20, 186, 61, 213, 70, 186, 59, 236, 36, 95, 62, 252, 139, 52, 62, 196, 36, 185, 190, 220, 184, 12, 62, 52, 52, 249, 61, 90, 8, 202, 189, 109, 40, 247, 60, 4, 67, 104, 190, 215, 96, 61, 62, 233, 100, 0, 62, 46, 53, 225, 189, 180, 74, 120, 190, 94, 162, 93, 190, 18, 125, 37, 191, 139, 241, 13, 62, 91, 10, 247, 60, 0, 146, 145, 62, 87, 214, 123, 190, 255, 70, 9, 62, 14, 104, 155, 190, 250, 19, 10, 191, 251, 187, 218, 190, 180, 215, 188, 62, 147, 140, 194, 190, 160, 27, 158, 61, 14, 229, 92, 189, 101, 38, 69, 190, 110, 139, 99, 60, 21, 249, 108, 60, 53, 157, 42, 190, 229, 238, 36, 62, 51, 98, 107, 189, 163, 188, 42, 190, 211, 254, 3, 60, 119, 160, 139, 60, 254, 119, 178, 188, 238, 137, 33, 190, 136, 103, 149, 189, 7, 70, 242, 61, 27, 167, 1, 61, 97, 54, 136, 187, 97, 105, 61, 61, 172, 89, 249, 60, 142, 163, 165, 60, 173, 38, 200, 189, 144, 160, 132, 189, 81, 222, 35, 60, 33, 15, 19, 62, 57, 132, 137, 189, 176, 150, 184, 61, 161, 21, 148, 61, 95, 189, 187, 61, 74, 116, 216, 188, 164, 160, 20, 61, 253, 78, 17, 61, 246, 199, 82, 190, 21, 22, 14, 191, 182, 248, 238, 62, 234, 62, 37, 62, 169, 189, 109, 62, 17, 178, 22, 191, 248, 11, 174, 62, 247, 177, 11, 62, 132, 56, 203, 59, 123, 163, 116, 191, 28, 223, 148, 189, 214, 197, 153, 62, 171, 136, 138, 61, 198, 24, 72, 62, 99, 65, 158, 62, 0, 83, 31, 191, 235, 168, 40, 191, 227, 122, 19, 61, 175, 177, 151, 62, 48, 8, 2, 191, 52, 187, 201, 186, 193, 241, 161, 190, 144, 171, 143, 191, 6, 37, 70, 191, 213, 52, 28, 62, 116, 66, 238, 189, 128, 225, 115, 62, 10, 100, 64, 62, 130, 142, 153, 191, 59, 175, 236, 61, 147, 63, 201, 61, 140, 221, 65, 190, 188, 166, 212, 188, 234, 128, 104, 190, 155, 198, 153, 61, 213, 71, 144, 61, 201, 109, 65, 191, 61, 23, 182, 61, 48, 8, 128, 62, 20, 247, 215, 189, 50, 142, 77, 61, 225, 69, 127, 61, 110, 149, 39, 190, 239, 148, 145, 62, 136, 224, 3, 63, 13, 148, 27, 190, 241, 137, 19, 62, 252, 211, 25, 61, 2, 17, 36, 189, 182, 183, 61, 61, 107, 180, 151, 189, 34, 70, 38, 61, 22, 30, 24, 189, 168, 17, 80, 62, 137, 154, 149, 62, 146, 250, 141, 61, 81, 194, 215, 188, 186, 31, 78, 191, 32, 117, 26, 62, 228, 24, 212, 61, 75, 9, 243, 61, 185, 8, 60, 186, 135, 126, 243, 189, 122, 218, 10, 191, 247, 43, 34, 62, 94, 194, 192, 189, 36, 125, 14, 62, 103, 152, 183, 62, 218, 32, 41, 61, 218, 74, 58, 62, 224, 250, 193, 61, 247, 151, 83, 62, 177, 80, 18, 62, 0, 203, 195, 190, 21, 13, 211, 188, 181, 68, 178, 62, 209, 71, 210, 188, 224, 214, 163, 60, 119, 20, 31, 61, 146, 210, 14, 190, 84, 87, 5, 62, 92, 138, 255, 189, 64, 88, 195, 188, 86, 124, 30, 62, 171, 185, 129, 61, 252, 194, 21, 190, 99, 0, 20, 62, 195, 29, 198, 190, 75, 228, 24, 189, 38, 183, 199, 187, 162, 114, 154, 189, 119, 131, 23, 62, 93, 222, 78, 61, 248, 133, 102, 62, 213, 104, 132, 62, 144, 86, 185, 190, 16, 29, 119, 62, 105, 52, 92, 61, 95, 36, 240, 61, 36, 200, 168, 188, 212, 129, 4, 62, 20, 20, 13, 61, 192, 103, 127, 62, 196, 145, 119, 60, 64, 178, 33, 61, 201, 139, 55, 62, 157, 42, 221, 189, 86, 197, 148, 62, 27, 22, 76, 189, 178, 169, 76, 62, 124, 202, 217, 61, 1, 224, 189, 189, 250, 235, 149, 62, 112, 53, 128, 62, 19, 78, 244, 189, 69, 13, 224, 61, 229, 122, 77, 189, 176, 103, 3, 62, 36, 192, 88, 62, 145, 83, 154, 62, 254, 165, 139, 190, 175, 16, 240, 61, 174, 145, 146, 62, 160, 112, 217, 58, 191, 245, 210, 61, 111, 59, 222, 188, 48, 136, 15, 190, 255, 6, 73, 188, 1, 185, 63, 62, 96, 233, 112, 190, 28, 183, 91, 62, 147, 199, 12, 189, 140, 94, 82, 61, 38, 70, 45, 62, 72, 92, 217, 61, 28, 61, 32, 190, 8, 68, 75, 62, 104, 132, 204, 189, 85, 202, 226, 190, 71, 158, 135, 62, 254, 176, 1, 187, 237, 137, 73, 62, 168, 144, 85, 62, 221, 199, 228, 61, 98, 63, 148, 62, 246, 196, 62, 62, 126, 203, 248, 61, 183, 128, 22, 62, 224, 182, 221, 189, 208, 168, 193, 61, 211, 213, 62, 62, 247, 143, 147, 62, 6, 244, 123, 190, 141, 44, 29, 62, 150, 28, 37, 62, 11, 190, 97, 62, 251, 19, 41, 62, 236, 242, 149, 189, 137, 144, 148, 61, 164, 144, 229, 61, 211, 234, 52, 62, 96, 217, 37, 61, 225, 11, 22, 190, 34, 62, 23, 62, 62, 223, 50, 190, 159, 170, 115, 62, 42, 106, 186, 61, 196, 223, 220, 189, 192, 152, 157, 61, 23, 54, 98, 62, 2, 60, 189, 61, 2, 57, 231, 187, 165, 126, 182, 62, 215, 210, 18, 191, 112, 142, 183, 61, 130, 20, 21, 61, 70, 83, 220, 189, 116, 49, 243, 61, 99, 98, 252, 186, 189, 200, 139, 62, 28, 192, 230, 190, 116, 187, 92, 62, 41, 108, 19, 62, 60, 116, 241, 61, 136, 62, 144, 60, 182, 27, 154, 62, 55, 226, 74, 61, 155, 134, 187, 190, 70, 54, 241, 61, 210, 248, 53, 191, 78, 175, 106, 190, 139, 14, 93, 62, 13, 187, 64, 190, 189, 133, 170, 190, 182, 35, 225, 61, 235, 171, 41, 62, 216, 162, 28, 61, 91, 117, 128, 189, 117, 120, 98, 62, 206, 9, 136, 189, 121, 71, 193, 61, 221, 205, 135, 62, 163, 61, 199, 190, 253, 233, 129, 62, 103, 244, 20, 62, 116, 58, 155, 62, 65, 195, 220, 62, 64, 21, 91, 190, 100, 31, 169, 62, 160, 63, 222, 62, 11, 119, 220, 189, 56, 209, 58, 190, 215, 94, 183, 189, 221, 71, 46, 62, 255, 161, 240, 189, 74, 96, 144, 189, 97, 66, 153, 190, 141, 116, 134, 191, 8, 93, 184, 189, 174, 153, 134, 62, 7, 7, 137, 61, 6, 72, 143, 188, 91, 56, 49, 190, 239, 60, 36, 191, 172, 72, 11, 190, 86, 224, 85, 61, 114, 15, 232, 189, 254, 79, 14, 62, 123, 94, 92, 188, 186, 66, 13, 190, 54, 9, 143, 61, 133, 122, 4, 62, 93, 177, 107, 61, 139, 213, 210, 189, 68, 42, 246, 189, 152, 81, 184, 189, 154, 191, 96, 61, 249, 95, 73, 59, 143, 211, 202, 60, 84, 111, 153, 188, 73, 98, 247, 189, 39, 10, 134, 189, 80, 37, 246, 188, 150, 214, 2, 190, 222, 236, 175, 61, 193, 166, 61, 190, 116, 164, 120, 188, 224, 229, 167, 189, 17, 250, 186, 61, 4, 53, 56, 61, 38, 128, 58, 189, 159, 17, 49, 190, 178, 120, 62, 189, 145, 11, 8, 190, 209, 131, 249, 61, 76, 100, 1, 190, 28, 239, 156, 61, 32, 205, 163, 61, 158, 238, 249, 61, 144, 241, 136, 60, 84, 192, 37, 60, 244, 118, 87, 189, 169, 90, 183, 61, 40, 240, 49, 189, 102, 88, 79, 60, 24, 38, 130, 189, 141, 161, 158, 61, 0, 54, 32, 190, 45, 24, 93, 190, 203, 144, 0, 190, 207, 214, 2, 190, 216, 23, 85, 189, 51, 27, 203, 188, 155, 211, 235, 188, 93, 36, 44, 61, 200, 150, 248, 189, 135, 209, 19, 60, 177, 221, 189, 189, 156, 184, 246, 61, 215, 145, 226, 60, 98, 18, 173, 188, 145, 90, 178, 61, 14, 117, 167, 185, 122, 122, 125, 189, 99, 169, 195, 189, 234, 19, 10, 61, 131, 207, 51, 190, 223, 133, 66, 190, 26, 253, 226, 189, 225, 187, 129, 62, 224, 251, 86, 190, 108, 217, 180, 189, 29, 56, 7, 62, 179, 43, 218, 60, 111, 102, 74, 61, 79, 185, 149, 62, 214, 13, 44, 61, 246, 229, 98, 62, 61, 232, 141, 61, 243, 237, 32, 190, 81, 163, 135, 62, 128, 24, 72, 190, 238, 70, 33, 190, 5, 104, 175, 61, 31, 29, 159, 190, 40, 198, 51, 62, 55, 222, 231, 189, 49, 145, 255, 186, 166, 184, 34, 190, 47, 253, 172, 188, 208, 198, 202, 190, 136, 166, 130, 60, 23, 197, 49, 61, 150, 1, 233, 62, 23, 63, 22, 190, 82, 111, 51, 190, 153, 16, 87, 190, 65, 98, 39, 191, 52, 58, 57, 190, 10, 247, 134, 62, 149, 56, 52, 190, 15, 16, 210, 190, 78, 16, 101, 62, 251, 238, 76, 62, 8, 217, 28, 189, 229, 226, 28, 189, 221, 112, 166, 61, 252, 204, 61, 190, 78, 126, 135, 62, 216, 226, 96, 190, 54, 3, 213, 189, 196, 77, 72, 62, 163, 75, 245, 189, 38, 22, 200, 62, 247, 147, 103, 62, 18, 227, 108, 189, 193, 7, 85, 62, 113, 140, 126, 190, 165, 66, 217, 189, 49, 126, 176, 190, 54, 219, 47, 58, 132, 74, 108, 62, 189, 137, 53, 190, 6, 91, 59, 191, 81, 107, 129, 189, 177, 60, 67, 190, 40, 74, 40, 62, 48, 247, 113, 62, 184, 57, 93, 61, 98, 143, 150, 62, 131, 193, 227, 61, 203, 175, 134, 190, 192, 227, 66, 62, 26, 150, 92, 62, 149, 165, 175, 190, 29, 103, 169, 188, 197, 46, 55, 189, 142, 46, 170, 189, 169, 27, 156, 190, 190, 25, 164, 62, 62, 67, 195, 189, 43, 23, 84, 62, 170, 236, 169, 62, 78, 41, 144, 190, 209, 143, 22, 62, 113, 166, 159, 189, 42, 11, 145, 190, 104, 51, 139, 62, 10, 228, 13, 61, 144, 1, 104, 62, 83, 1, 89, 62, 62, 200, 113, 62, 102, 198, 251, 61, 179, 45, 221, 188, 1, 97, 21, 191, 194, 190, 174, 62, 28, 172, 114, 60, 32, 188, 81, 60, 84, 201, 211, 189, 124, 45, 186, 189, 173, 192, 180, 190, 146, 122, 21, 191, 209, 142, 196, 190, 39, 88, 170, 62, 128, 218, 191, 190, 59, 237, 192, 61, 56, 3, 193, 190, 199, 109, 250, 61, 147, 63, 38, 60, 229, 149, 246, 61, 133, 123, 232, 60, 34, 47, 173, 62, 243, 101, 99, 189, 227, 102, 216, 189, 192, 61, 84, 188, 106, 26, 73, 190, 122, 251, 38, 62, 213, 130, 113, 60, 81, 226, 180, 61, 204, 20, 31, 60, 103, 170, 69, 190, 36, 149, 160, 61, 206, 131, 48, 62, 88, 233, 142, 61, 142, 249, 129, 190, 146, 17, 177, 188, 248, 156, 123, 190, 254, 46, 248, 187, 71, 131, 155, 190, 146, 43, 104, 189, 247, 228, 229, 61, 156, 37, 80, 61, 45, 219, 104, 190, 14, 149, 136, 59, 215, 173, 95, 190, 207, 3, 104, 62, 109, 210, 180, 189, 214, 212, 178, 61, 35, 38, 183, 61, 192, 129, 204, 188, 22, 85, 251, 189, 138, 75, 59, 190, 39, 251, 255, 189, 254, 211, 19, 61, 183, 127, 229, 188, 216, 154, 139, 189, 54, 72, 62, 190, 71, 199, 14, 62, 130, 57, 244, 61, 5, 165, 93, 189, 113, 51, 11, 190, 141, 151, 0, 190, 138, 230, 15, 62, 51, 44, 57, 189, 108, 42, 154, 189, 239, 170, 252, 61, 113, 84, 217, 61, 114, 86, 61, 190, 181, 180, 178, 188, 33, 176, 201, 61, 12, 48, 184, 61, 239, 161, 20, 62, 89, 2, 19, 190, 212, 142, 238, 186, 67, 127, 55, 189, 54, 250, 47, 190, 125, 21, 30, 190, 97, 77, 104, 61, 47, 100, 100, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {76, 7, 77, 190, 88, 220, 5, 59, 203, 1, 132, 62, 221, 115, 98, 60, 205, 170, 162, 62, 97, 22, 18, 62, 212, 70, 58, 62, 148, 158, 112, 189, 67, 5, 3, 190, 108, 216, 182, 189, 212, 149, 30, 62, 235, 179, 32, 190, 73, 240, 42, 189, 132, 107, 113, 62, 40, 161, 95, 189, 77, 224, 37, 62, 151, 176, 245, 60, 195, 51, 55, 190, 189, 42, 50, 62, 25, 250, 24, 190, 136, 125, 202, 189, 97, 5, 178, 62, 156, 181, 117, 62, 130, 255, 90, 61, 53, 12, 144, 61, 137, 232, 44, 189, 121, 151, 22, 190, 215, 88, 209, 61, 237, 102, 194, 189, 108, 0, 118, 62, 124, 185, 112, 62, 1, 236, 85, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {139, 61, 35, 191, 54, 110, 251, 62, 81, 216, 230, 190, 137, 148, 9, 62, 177, 79, 55, 190, 235, 75, 115, 190, 121, 51, 205, 61, 129, 55, 142, 60, 201, 84, 5, 62, 152, 39, 197, 189, 43, 227, 39, 63, 121, 210, 7, 190, 10, 73, 49, 191, 35, 4, 129, 63, 226, 74, 6, 191, 116, 94, 178, 62, 102, 143, 232, 62, 83, 58, 0, 188, 224, 97, 13, 63, 241, 228, 184, 190, 149, 229, 76, 62, 196, 92, 46, 190, 130, 61, 41, 190, 238, 136, 101, 62, 57, 40, 199, 190, 117, 239, 122, 189, 0, 67, 43, 61, 70, 243, 171, 62, 33, 239, 17, 63, 110, 99, 34, 63, 136, 210, 116, 189, 180, 233, 135, 189, 162, 18, 83, 189, 88, 181, 10, 61, 2, 206, 130, 61, 87, 35, 3, 62, 37, 162, 156, 190, 218, 252, 85, 190, 101, 218, 3, 191, 72, 51, 192, 188, 39, 4, 241, 61, 94, 73, 149, 61, 41, 180, 12, 62, 133, 54, 151, 58, 57, 192, 222, 62, 39, 126, 38, 62, 141, 98, 25, 62, 240, 96, 153, 62, 245, 65, 208, 189, 109, 243, 61, 188, 245, 16, 39, 190, 164, 47, 189, 61, 111, 122, 113, 62, 61, 107, 236, 189, 98, 244, 31, 189, 218, 2, 180, 189, 66, 156, 106, 60, 45, 162, 46, 190, 217, 201, 140, 188, 251, 89, 27, 189, 181, 66, 211, 189, 135, 211, 170, 190, 123, 235, 134, 190, 233, 113, 202, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 157, 124, 188, 140, 183, 172, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {109, 157, 232, 190, 43, 171, 152, 63, 34, 230, 193, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {16, 233, 217, 63, 144, 109, 86, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0082/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}