// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 26, 26, 63, 19, 105, 116, 61, 173, 70, 45, 191, 161, 15, 92, 191, 177, 7, 147, 186, 220, 103, 232, 190, 179, 219, 66, 191, 175, 231, 26, 190, 25, 13, 12, 191, 188, 135, 144, 62, 231, 221, 184, 63, 29, 94, 153, 62, 144, 34, 90, 61, 19, 242, 69, 191, 45, 53, 95, 190, 206, 166, 124, 191, 4, 137, 48, 61, 122, 123, 233, 190, 84, 195, 1, 63, 29, 185, 16, 62, 135, 59, 168, 190, 113, 217, 29, 191, 81, 149, 155, 190, 174, 38, 19, 190, 86, 24, 125, 62, 189, 50, 153, 191, 46, 98, 158, 190, 136, 172, 185, 62, 214, 89, 117, 191, 79, 224, 76, 190, 30, 59, 146, 61, 113, 98, 169, 62, 101, 105, 14, 191, 91, 89, 134, 191, 197, 103, 89, 189, 159, 64, 58, 62, 221, 170, 178, 190, 202, 166, 112, 63, 197, 236, 45, 62, 10, 113, 9, 63, 94, 88, 134, 63, 236, 238, 96, 62, 67, 117, 156, 62, 155, 168, 19, 191, 0, 39, 15, 191, 29, 14, 126, 63, 141, 187, 100, 62, 84, 125, 13, 62, 195, 140, 92, 191, 224, 169, 40, 191, 93, 167, 60, 62, 128, 137, 25, 191, 89, 151, 225, 62, 8, 138, 183, 62, 83, 50, 46, 61, 53, 116, 42, 191, 119, 83, 209, 190, 252, 37, 35, 190, 223, 176, 200, 62, 12, 84, 200, 62, 51, 50, 226, 190, 12, 126, 131, 191, 15, 2, 88, 190, 176, 179, 65, 191, 3, 21, 195, 191, 141, 88, 240, 190, 141, 117, 66, 62, 62, 219, 120, 191, 78, 162, 24, 190, 189, 102, 203, 62, 184, 4, 186, 191, 173, 119, 178, 190, 83, 227, 228, 62, 148, 81, 122, 191, 27, 50, 142, 62, 238, 15, 237, 62, 103, 224, 130, 63, 156, 255, 161, 62, 121, 40, 214, 190, 87, 90, 131, 63, 86, 209, 41, 62, 16, 227, 12, 191, 196, 37, 182, 191, 64, 181, 223, 190, 21, 144, 73, 63, 134, 225, 118, 63, 117, 209, 188, 62, 153, 13, 238, 62, 5, 197, 239, 62, 164, 194, 192, 62, 107, 146, 242, 62, 254, 132, 91, 191, 0, 227, 125, 187, 114, 70, 224, 62, 11, 102, 149, 63, 130, 211, 164, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 21, 240, 190, 147, 39, 49, 190, 121, 225, 58, 62, 233, 240, 216, 62, 134, 23, 248, 62, 24, 160, 6, 62, 220, 198, 81, 189, 202, 17, 201, 189, 184, 5, 61, 63, 218, 124, 210, 61, 80, 186, 174, 61, 151, 113, 95, 190, 165, 19, 15, 63, 103, 250, 190, 61, 55, 58, 247, 190, 55, 1, 104, 190, 133, 91, 142, 62, 99, 137, 134, 62, 172, 72, 66, 63, 221, 174, 54, 191, 76, 86, 22, 63, 27, 143, 43, 190, 10, 55, 32, 63, 42, 2, 133, 60, 48, 36, 5, 190, 137, 101, 158, 61, 0, 161, 34, 63, 36, 136, 15, 61, 22, 4, 58, 191, 201, 154, 221, 190, 141, 230, 99, 62, 60, 111, 238, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 99, 216, 190, 27, 212, 122, 62, 96, 104, 58, 62, 147, 112, 20, 62, 61, 242, 214, 190, 13, 87, 132, 189, 29, 35, 151, 189, 233, 212, 177, 190, 19, 169, 222, 190, 106, 53, 63, 190, 230, 194, 129, 62, 98, 198, 152, 61, 110, 67, 6, 62, 102, 24, 223, 61, 49, 173, 107, 190, 25, 249, 80, 191, 93, 158, 254, 188, 46, 68, 31, 62, 24, 73, 119, 60, 141, 75, 246, 61, 100, 30, 94, 191, 116, 107, 58, 191, 254, 148, 239, 190, 110, 34, 191, 190, 198, 33, 43, 191, 230, 169, 255, 189, 31, 146, 18, 62, 110, 88, 16, 191, 176, 19, 4, 191, 191, 22, 130, 190, 9, 84, 67, 190, 42, 73, 22, 190, 69, 27, 246, 189, 104, 56, 126, 61, 133, 26, 236, 60, 217, 189, 110, 62, 189, 186, 77, 190, 143, 153, 151, 60, 80, 4, 49, 61, 142, 180, 31, 190, 251, 244, 239, 190, 41, 246, 238, 189, 216, 157, 227, 61, 97, 208, 145, 188, 104, 243, 147, 62, 108, 240, 150, 61, 108, 109, 65, 190, 113, 97, 23, 190, 201, 12, 182, 190, 137, 246, 154, 61, 16, 71, 154, 190, 76, 219, 199, 189, 237, 122, 125, 190, 129, 112, 113, 190, 75, 46, 131, 191, 230, 223, 28, 62, 22, 157, 21, 189, 226, 228, 151, 61, 232, 229, 111, 62, 212, 45, 83, 190, 36, 31, 3, 189, 81, 62, 13, 62, 116, 202, 120, 190, 148, 147, 92, 62, 198, 37, 166, 190, 192, 39, 19, 63, 144, 164, 83, 61, 133, 59, 181, 61, 50, 51, 57, 62, 124, 130, 33, 61, 208, 5, 133, 190, 221, 131, 49, 62, 23, 117, 47, 190, 45, 107, 166, 190, 241, 182, 138, 62, 21, 78, 147, 190, 95, 9, 12, 62, 95, 217, 58, 62, 1, 134, 188, 190, 23, 179, 22, 63, 93, 183, 68, 62, 69, 212, 51, 189, 133, 255, 157, 62, 5, 211, 25, 190, 211, 224, 13, 190, 147, 172, 148, 61, 138, 62, 75, 62, 49, 169, 246, 190, 30, 238, 141, 62, 191, 187, 55, 62, 47, 22, 23, 62, 158, 194, 52, 61, 238, 29, 143, 61, 143, 239, 27, 188, 26, 162, 43, 61, 5, 72, 189, 61, 140, 148, 243, 59, 25, 20, 30, 190, 0, 70, 235, 61, 241, 1, 214, 61, 45, 95, 32, 190, 89, 35, 187, 187, 248, 146, 111, 189, 187, 111, 22, 190, 150, 112, 241, 61, 247, 35, 64, 190, 112, 48, 8, 190, 211, 238, 156, 61, 45, 21, 14, 190, 97, 180, 234, 188, 194, 10, 192, 61, 47, 156, 13, 62, 93, 99, 177, 189, 35, 222, 33, 187, 173, 98, 242, 61, 159, 163, 128, 61, 151, 107, 153, 189, 213, 124, 0, 190, 181, 67, 69, 190, 22, 225, 31, 190, 56, 193, 225, 189, 14, 132, 154, 189, 192, 89, 215, 188, 228, 202, 72, 61, 218, 117, 115, 60, 14, 111, 25, 189, 13, 84, 61, 190, 125, 194, 124, 189, 193, 152, 222, 61, 9, 50, 1, 62, 53, 35, 7, 62, 205, 220, 18, 62, 25, 172, 6, 62, 88, 135, 50, 62, 82, 4, 207, 61, 74, 182, 219, 61, 126, 42, 133, 61, 184, 216, 117, 190, 150, 20, 128, 62, 21, 216, 80, 62, 72, 118, 216, 189, 59, 132, 145, 62, 21, 64, 212, 60, 121, 51, 190, 62, 112, 142, 30, 190, 94, 130, 141, 190, 170, 121, 152, 62, 133, 153, 79, 190, 143, 249, 36, 62, 30, 121, 142, 62, 165, 150, 148, 62, 93, 73, 243, 190, 116, 23, 125, 190, 211, 40, 1, 62, 150, 192, 131, 189, 92, 251, 94, 62, 4, 4, 61, 61, 98, 166, 187, 60, 208, 160, 26, 190, 80, 31, 41, 62, 14, 5, 9, 190, 96, 210, 94, 189, 239, 10, 111, 190, 219, 211, 74, 62, 23, 164, 212, 61, 76, 74, 219, 61, 135, 224, 14, 62, 110, 121, 237, 189, 146, 49, 24, 61, 165, 101, 155, 190, 233, 221, 38, 62, 21, 152, 159, 189, 147, 77, 132, 62, 121, 69, 1, 62, 228, 70, 246, 190, 166, 250, 226, 62, 197, 39, 16, 62, 142, 76, 64, 62, 123, 41, 164, 62, 134, 87, 242, 61, 201, 202, 203, 190, 24, 30, 171, 190, 98, 10, 168, 62, 228, 69, 109, 191, 196, 167, 163, 60, 40, 47, 90, 61, 185, 110, 74, 62, 87, 166, 7, 191, 50, 213, 68, 60, 26, 15, 190, 187, 191, 164, 160, 60, 201, 227, 20, 62, 224, 209, 32, 62, 4, 191, 176, 190, 178, 88, 235, 61, 252, 128, 241, 61, 229, 65, 53, 62, 13, 154, 55, 61, 158, 105, 114, 189, 244, 33, 255, 60, 107, 128, 96, 61, 149, 12, 4, 189, 74, 223, 204, 189, 57, 172, 74, 62, 5, 168, 52, 191, 164, 114, 119, 62, 133, 163, 108, 189, 41, 204, 129, 62, 169, 64, 75, 61, 88, 54, 124, 61, 145, 124, 44, 62, 222, 125, 133, 189, 48, 51, 5, 190, 200, 116, 140, 61, 123, 59, 16, 62, 110, 210, 209, 189, 251, 50, 237, 62, 123, 207, 137, 60, 96, 4, 207, 190, 7, 132, 224, 61, 238, 111, 111, 190, 94, 216, 19, 59, 28, 48, 130, 62, 107, 48, 25, 61, 27, 57, 217, 61, 196, 188, 194, 189, 134, 75, 164, 61, 244, 205, 199, 189, 152, 247, 165, 189, 13, 25, 250, 189, 81, 85, 9, 190, 66, 192, 55, 60, 240, 234, 233, 59, 39, 216, 37, 190, 184, 20, 160, 60, 243, 116, 209, 61, 104, 235, 76, 61, 0, 50, 116, 61, 38, 212, 134, 189, 75, 169, 102, 61, 247, 87, 190, 61, 188, 217, 2, 190, 138, 173, 159, 189, 56, 0, 170, 189, 55, 102, 81, 189, 50, 168, 189, 61, 222, 2, 188, 189, 118, 230, 180, 60, 3, 183, 151, 189, 204, 89, 208, 189, 168, 126, 63, 190, 91, 78, 112, 61, 223, 163, 19, 189, 176, 242, 4, 62, 228, 110, 63, 62, 21, 25, 235, 61, 122, 165, 180, 188, 152, 186, 146, 188, 177, 156, 73, 190, 206, 156, 20, 189, 44, 254, 41, 190, 128, 123, 204, 189, 211, 3, 236, 61, 13, 79, 55, 190, 88, 37, 73, 190, 73, 212, 53, 61, 3, 142, 184, 61, 85, 73, 146, 61, 74, 222, 13, 190, 252, 88, 254, 60, 213, 81, 206, 61, 54, 101, 17, 62, 79, 23, 114, 61, 43, 226, 152, 61, 8, 153, 78, 187, 16, 213, 227, 189, 246, 159, 148, 189, 46, 154, 132, 189, 140, 120, 195, 188, 230, 191, 234, 61, 188, 213, 142, 189, 145, 238, 57, 190, 56, 249, 165, 186, 76, 54, 217, 189, 45, 39, 66, 61, 191, 14, 15, 62, 98, 37, 243, 189, 38, 178, 43, 190, 214, 151, 127, 60, 14, 149, 140, 190, 126, 168, 32, 60, 214, 241, 96, 187, 68, 209, 40, 189, 249, 207, 56, 190, 15, 95, 115, 189, 34, 63, 53, 189, 188, 177, 176, 61, 56, 94, 141, 62, 26, 159, 164, 190, 45, 251, 20, 191, 15, 52, 240, 190, 222, 38, 1, 190, 216, 148, 37, 61, 169, 150, 236, 190, 89, 207, 26, 189, 72, 242, 229, 190, 132, 60, 181, 61, 222, 236, 164, 189, 35, 104, 121, 62, 63, 164, 135, 61, 5, 181, 243, 189, 38, 85, 27, 63, 225, 221, 248, 61, 70, 30, 37, 190, 191, 234, 177, 190, 27, 54, 157, 188, 151, 203, 138, 62, 131, 110, 64, 62, 46, 236, 167, 62, 80, 21, 36, 190, 121, 190, 124, 62, 195, 13, 76, 190, 53, 56, 250, 189, 26, 243, 34, 190, 64, 152, 186, 190, 176, 114, 128, 190, 139, 236, 209, 61, 6, 174, 250, 189, 122, 156, 24, 189, 246, 59, 142, 62, 172, 33, 136, 188, 60, 225, 22, 62, 111, 216, 7, 190, 218, 192, 235, 190, 22, 139, 21, 63, 16, 103, 144, 189, 224, 63, 35, 62, 143, 112, 41, 62, 17, 203, 9, 190, 187, 244, 86, 190, 194, 28, 153, 189, 243, 86, 66, 191, 216, 118, 116, 62, 25, 86, 166, 61, 22, 61, 141, 62, 159, 144, 25, 191, 93, 160, 98, 188, 93, 207, 238, 190, 15, 114, 224, 190, 133, 87, 81, 189, 38, 210, 177, 62, 147, 31, 255, 190, 49, 221, 158, 61, 144, 237, 176, 187, 130, 169, 157, 61, 98, 115, 78, 190, 139, 121, 48, 190, 50, 173, 95, 189, 32, 180, 163, 61, 104, 95, 243, 189, 122, 156, 247, 189, 122, 249, 204, 61, 121, 245, 160, 187, 35, 180, 45, 188, 68, 51, 7, 190, 225, 221, 133, 61, 87, 56, 141, 61, 141, 78, 159, 189, 205, 62, 30, 62, 116, 121, 10, 62, 15, 29, 250, 189, 168, 155, 113, 61, 110, 213, 233, 189, 15, 104, 10, 61, 149, 11, 220, 61, 118, 217, 134, 187, 120, 107, 15, 190, 173, 17, 214, 61, 47, 138, 254, 189, 80, 35, 183, 188, 127, 133, 72, 60, 100, 156, 63, 190, 181, 159, 158, 190, 156, 249, 153, 189, 226, 163, 17, 62, 166, 251, 17, 62, 115, 76, 245, 61, 208, 121, 47, 190, 34, 118, 108, 62, 81, 222, 223, 190, 37, 33, 202, 189, 212, 80, 164, 190, 24, 107, 210, 62, 172, 69, 68, 60, 73, 207, 139, 190, 194, 76, 8, 191, 9, 171, 182, 190, 159, 112, 186, 191, 212, 56, 233, 62, 248, 205, 155, 191, 70, 56, 111, 62, 115, 29, 169, 189, 188, 232, 216, 60, 161, 165, 203, 62, 59, 51, 126, 190, 118, 68, 130, 190, 89, 142, 67, 62, 131, 3, 214, 62, 31, 191, 95, 62, 36, 163, 207, 190, 5, 120, 234, 190, 175, 79, 35, 60, 42, 182, 154, 190, 155, 86, 125, 62, 125, 44, 154, 61, 223, 56, 104, 187, 110, 168, 139, 190, 4, 152, 76, 190, 93, 218, 33, 191, 66, 41, 136, 62, 182, 236, 5, 192, 23, 101, 0, 191, 68, 12, 68, 190, 200, 138, 186, 189, 198, 221, 176, 191, 199, 95, 216, 62, 249, 193, 38, 191, 148, 242, 127, 62, 236, 137, 142, 62, 68, 117, 184, 190, 184, 13, 201, 188, 205, 160, 185, 190, 45, 3, 118, 62, 210, 50, 81, 62, 208, 185, 168, 191, 237, 24, 50, 190, 21, 117, 231, 190, 228, 103, 189, 191, 63, 50, 17, 191, 123, 156, 28, 61, 163, 184, 144, 190, 244, 212, 77, 190, 204, 120, 1, 63, 227, 190, 178, 191, 45, 202, 61, 190, 235, 159, 27, 190, 67, 197, 2, 190, 146, 181, 154, 190, 66, 162, 202, 60, 164, 246, 48, 63, 160, 16, 199, 61, 96, 202, 15, 62, 140, 225, 130, 189, 229, 45, 147, 189, 42, 201, 190, 189, 194, 178, 22, 191, 44, 183, 63, 190, 161, 161, 21, 191, 60, 249, 201, 62, 141, 58, 63, 191, 146, 214, 171, 61, 97, 75, 148, 61, 81, 181, 194, 190, 12, 55, 33, 63, 141, 4, 4, 189, 148, 207, 43, 62, 229, 246, 244, 60, 66, 67, 98, 189, 20, 202, 75, 191, 210, 84, 214, 190, 231, 120, 236, 61, 95, 160, 157, 191, 82, 59, 148, 189, 43, 134, 91, 62, 29, 22, 142, 189, 81, 98, 33, 191, 212, 38, 136, 62, 19, 132, 32, 62, 133, 136, 149, 190, 93, 50, 150, 62, 32, 214, 94, 61, 168, 240, 79, 189, 44, 6, 79, 189, 164, 46, 60, 190, 120, 255, 199, 189, 163, 126, 61, 190, 159, 148, 25, 61, 4, 210, 94, 61, 37, 129, 215, 62, 25, 103, 137, 62, 105, 147, 4, 61, 187, 53, 101, 62, 212, 71, 74, 190, 172, 194, 227, 190, 243, 45, 7, 62, 101, 166, 110, 190, 114, 151, 161, 62, 247, 174, 102, 62, 20, 61, 62, 62, 19, 148, 18, 188, 99, 75, 210, 60, 122, 234, 18, 60, 156, 178, 176, 62, 130, 138, 123, 62, 7, 78, 132, 62, 202, 111, 177, 190, 17, 249, 11, 191, 221, 173, 253, 61, 231, 20, 74, 191, 123, 183, 52, 190, 121, 145, 161, 62, 250, 147, 254, 190, 169, 16, 92, 190, 79, 176, 247, 190, 210, 180, 4, 191, 162, 81, 52, 62, 79, 244, 46, 61, 63, 71, 231, 190, 193, 36, 190, 61, 172, 17, 232, 187, 95, 13, 104, 62, 130, 225, 58, 62, 170, 250, 205, 190, 68, 218, 33, 62, 147, 124, 79, 62, 43, 23, 154, 189, 41, 182, 238, 62, 226, 10, 89, 190, 247, 134, 5, 62, 110, 140, 38, 62, 63, 144, 178, 189, 162, 49, 121, 190, 150, 204, 103, 190, 176, 181, 57, 191, 58, 34, 20, 62, 106, 93, 59, 61, 134, 216, 127, 62, 78, 110, 100, 190, 185, 239, 84, 62, 91, 40, 183, 190, 15, 195, 61, 191, 58, 134, 2, 191, 93, 65, 185, 62, 155, 19, 181, 190, 86, 174, 98, 61, 53, 119, 153, 189, 101, 171, 96, 190, 126, 192, 251, 59, 194, 234, 39, 185, 229, 236, 66, 190, 63, 247, 8, 62, 195, 56, 114, 189, 44, 209, 63, 190, 168, 103, 108, 186, 92, 16, 255, 187, 254, 119, 178, 188, 131, 237, 41, 190, 130, 219, 156, 189, 94, 208, 195, 61, 58, 147, 246, 60, 97, 54, 136, 187, 97, 105, 61, 61, 198, 18, 198, 59, 142, 163, 165, 60, 5, 183, 222, 189, 179, 32, 138, 189, 155, 118, 195, 187, 69, 255, 8, 62, 9, 84, 141, 189, 8, 188, 183, 61, 130, 200, 131, 61, 162, 203, 178, 61, 74, 116, 216, 188, 164, 160, 20, 61, 239, 252, 11, 61, 140, 64, 82, 190, 40, 168, 5, 191, 168, 210, 93, 62, 154, 207, 9, 190, 137, 64, 136, 62, 54, 202, 87, 191, 160, 76, 5, 62, 98, 178, 56, 62, 77, 106, 89, 189, 9, 237, 160, 191, 236, 236, 153, 189, 106, 22, 202, 61, 130, 177, 2, 61, 211, 56, 56, 62, 193, 241, 198, 62, 159, 30, 14, 191, 226, 164, 9, 191, 121, 32, 199, 58, 193, 9, 128, 62, 113, 141, 42, 191, 168, 189, 18, 189, 142, 138, 220, 190, 174, 86, 167, 191, 252, 192, 109, 191, 213, 52, 28, 62, 239, 106, 21, 190, 212, 254, 146, 62, 241, 110, 42, 62, 107, 153, 177, 191, 47, 207, 35, 62, 50, 126, 207, 61, 251, 198, 110, 190, 175, 108, 149, 60, 50, 116, 135, 190, 59, 163, 206, 61, 215, 62, 186, 61, 213, 178, 45, 191, 214, 156, 113, 61, 68, 27, 143, 62, 41, 149, 25, 190, 159, 37, 44, 61, 190, 144, 235, 60, 89, 13, 22, 190, 192, 164, 141, 62, 241, 184, 8, 63, 18, 207, 39, 190, 101, 170, 141, 189, 134, 200, 70, 61, 123, 21, 84, 190, 144, 7, 36, 61, 226, 109, 210, 189, 230, 3, 173, 60, 172, 196, 166, 189, 139, 97, 62, 62, 153, 44, 136, 62, 141, 177, 175, 60, 183, 66, 160, 187, 217, 24, 152, 191, 63, 89, 134, 189, 209, 63, 203, 61, 121, 109, 208, 61, 185, 8, 60, 186, 135, 126, 243, 189, 189, 112, 28, 191, 183, 45, 196, 189, 225, 131, 177, 189, 41, 59, 59, 62, 69, 158, 194, 62, 178, 254, 28, 61, 166, 227, 114, 62, 84, 211, 234, 61, 181, 74, 90, 62, 16, 134, 95, 62, 223, 219, 168, 190, 59, 33, 165, 60, 194, 131, 178, 62, 254, 106, 44, 189, 176, 71, 1, 60, 158, 175, 191, 61, 237, 240, 227, 189, 116, 200, 118, 62, 9, 21, 42, 190, 29, 180, 138, 189, 96, 23, 66, 62, 153, 35, 33, 61, 163, 16, 166, 189, 166, 86, 122, 62, 210, 173, 166, 190, 225, 182, 240, 60, 131, 255, 171, 187, 55, 69, 19, 189, 29, 6, 4, 62, 74, 73, 15, 62, 6, 198, 116, 62, 63, 21, 123, 62, 26, 106, 155, 190, 2, 13, 145, 62, 42, 10, 112, 61, 136, 169, 239, 61, 191, 146, 162, 59, 74, 144, 24, 62, 113, 235, 91, 60, 144, 246, 135, 62, 110, 227, 47, 188, 72, 2, 248, 188, 199, 153, 50, 62, 143, 78, 165, 189, 137, 154, 156, 62, 21, 114, 88, 190, 101, 192, 74, 62, 220, 2, 190, 61, 119, 91, 174, 189, 127, 173, 133, 62, 17, 79, 85, 62, 25, 2, 52, 190, 157, 86, 199, 61, 66, 96, 76, 189, 130, 214, 193, 61, 218, 158, 80, 62, 127, 124, 149, 62, 146, 230, 128, 190, 198, 123, 215, 61, 124, 1, 144, 62, 170, 209, 9, 59, 146, 206, 223, 61, 122, 23, 126, 61, 99, 62, 157, 189, 58, 161, 92, 187, 202, 221, 61, 62, 44, 224, 116, 190, 87, 87, 98, 62, 19, 40, 39, 188, 208, 201, 121, 61, 36, 116, 14, 62, 104, 179, 254, 61, 7, 45, 66, 190, 33, 65, 246, 61, 209, 164, 234, 189, 77, 191, 218, 190, 81, 83, 143, 62, 155, 170, 41, 190, 174, 128, 60, 62, 133, 164, 61, 62, 83, 135, 209, 61, 138, 89, 126, 62, 162, 22, 18, 62, 224, 49, 118, 61, 238, 239, 2, 62, 52, 119, 207, 189, 167, 79, 101, 61, 96, 53, 54, 62, 174, 179, 138, 62, 164, 96, 111, 190, 89, 24, 15, 62, 35, 3, 22, 62, 51, 233, 86, 62, 173, 136, 44, 62, 136, 211, 63, 188, 10, 131, 246, 61, 149, 243, 231, 61, 189, 250, 38, 62, 35, 28, 114, 61, 110, 163, 44, 190, 85, 241, 11, 62, 115, 63, 75, 190, 251, 115, 135, 62, 188, 40, 151, 61, 235, 220, 115, 189, 69, 242, 24, 62, 21, 204, 109, 62, 30, 116, 133, 61, 21, 127, 36, 186, 251, 40, 22, 63, 154, 179, 11, 191, 130, 62, 208, 61, 185, 69, 141, 61, 95, 106, 153, 189, 218, 54, 32, 62, 19, 119, 25, 62, 0, 229, 149, 62, 4, 159, 9, 191, 6, 7, 109, 62, 24, 192, 10, 62, 153, 68, 7, 62, 214, 95, 124, 188, 66, 194, 156, 62, 95, 7, 63, 61, 152, 45, 172, 190, 144, 109, 207, 61, 12, 212, 107, 191, 100, 220, 165, 190, 217, 3, 86, 62, 180, 88, 68, 190, 165, 252, 199, 190, 216, 32, 17, 62, 46, 109, 97, 62, 145, 182, 45, 62, 184, 61, 84, 189, 205, 188, 151, 62, 26, 111, 172, 189, 60, 165, 20, 62, 239, 18, 150, 62, 21, 197, 158, 190, 116, 91, 131, 62, 192, 54, 48, 62, 8, 104, 198, 62, 231, 28, 3, 63, 191, 15, 131, 190, 50, 136, 214, 62, 252, 172, 223, 62, 117, 193, 161, 189, 118, 200, 16, 190, 93, 72, 23, 188, 147, 162, 34, 62, 108, 2, 166, 189, 0, 228, 46, 189, 76, 14, 123, 190, 247, 199, 138, 191, 191, 113, 92, 187, 232, 19, 180, 62, 124, 246, 204, 61, 120, 60, 91, 60, 241, 241, 233, 189, 21, 169, 19, 191, 169, 142, 123, 189, 86, 224, 85, 61, 114, 15, 232, 189, 254, 79, 14, 62, 123, 94, 92, 188, 186, 66, 13, 190, 54, 9, 143, 61, 133, 122, 4, 62, 93, 177, 107, 61, 139, 213, 210, 189, 68, 42, 246, 189, 152, 81, 184, 189, 154, 191, 96, 61, 249, 95, 73, 59, 143, 211, 202, 60, 84, 111, 153, 188, 73, 98, 247, 189, 39, 10, 134, 189, 80, 37, 246, 188, 150, 214, 2, 190, 222, 236, 175, 61, 193, 166, 61, 190, 116, 164, 120, 188, 224, 229, 167, 189, 17, 250, 186, 61, 4, 53, 56, 61, 38, 128, 58, 189, 159, 17, 49, 190, 178, 120, 62, 189, 145, 11, 8, 190, 209, 131, 249, 61, 76, 100, 1, 190, 28, 239, 156, 61, 32, 205, 163, 61, 158, 238, 249, 61, 144, 241, 136, 60, 84, 192, 37, 60, 244, 118, 87, 189, 169, 90, 183, 61, 40, 240, 49, 189, 102, 88, 79, 60, 24, 38, 130, 189, 141, 161, 158, 61, 0, 54, 32, 190, 45, 24, 93, 190, 203, 144, 0, 190, 207, 214, 2, 190, 216, 23, 85, 189, 51, 27, 203, 188, 155, 211, 235, 188, 93, 36, 44, 61, 200, 150, 248, 189, 135, 209, 19, 60, 177, 221, 189, 189, 156, 184, 246, 61, 215, 145, 226, 60, 98, 18, 173, 188, 145, 90, 178, 61, 14, 117, 167, 185, 122, 122, 125, 189, 99, 169, 195, 189, 234, 19, 10, 61, 131, 207, 51, 190, 223, 133, 66, 190, 26, 253, 226, 189, 0, 191, 98, 62, 61, 56, 158, 190, 94, 170, 33, 190, 160, 87, 199, 61, 222, 215, 112, 61, 5, 157, 238, 188, 221, 89, 162, 62, 75, 57, 147, 61, 232, 153, 116, 62, 108, 42, 107, 61, 18, 225, 59, 190, 177, 130, 241, 62, 94, 38, 115, 190, 131, 247, 37, 190, 82, 96, 94, 61, 215, 48, 145, 190, 48, 168, 116, 62, 208, 47, 127, 189, 130, 139, 165, 60, 219, 69, 86, 190, 11, 241, 196, 58, 235, 247, 253, 190, 58, 134, 19, 61, 202, 108, 185, 60, 193, 125, 228, 62, 229, 208, 44, 190, 162, 16, 93, 190, 215, 172, 151, 190, 162, 69, 104, 191, 221, 251, 158, 190, 79, 192, 135, 62, 139, 155, 83, 190, 189, 58, 232, 190, 134, 206, 86, 62, 80, 135, 59, 62, 124, 0, 19, 189, 198, 249, 159, 61, 192, 3, 156, 61, 47, 95, 59, 190, 162, 213, 187, 62, 228, 191, 167, 189, 173, 204, 3, 191, 80, 145, 171, 61, 217, 26, 208, 189, 70, 197, 198, 62, 27, 89, 146, 62, 109, 91, 156, 190, 159, 71, 168, 62, 21, 124, 70, 190, 173, 74, 18, 190, 143, 19, 138, 190, 95, 114, 233, 188, 222, 18, 194, 62, 175, 165, 54, 60, 142, 231, 20, 191, 13, 115, 201, 190, 185, 149, 31, 190, 117, 167, 82, 62, 44, 152, 108, 62, 17, 154, 127, 62, 98, 189, 173, 62, 36, 75, 1, 62, 89, 178, 99, 190, 131, 117, 103, 62, 250, 145, 78, 62, 246, 59, 221, 190, 141, 207, 145, 189, 69, 121, 169, 189, 139, 252, 92, 189, 4, 54, 196, 190, 221, 146, 181, 62, 28, 134, 190, 189, 231, 15, 98, 62, 67, 207, 162, 62, 244, 163, 149, 190, 153, 233, 145, 62, 89, 189, 0, 190, 167, 178, 150, 190, 142, 164, 140, 62, 114, 238, 80, 61, 1, 235, 141, 62, 14, 239, 129, 62, 146, 110, 129, 62, 49, 93, 200, 61, 103, 193, 30, 188, 174, 37, 45, 191, 191, 241, 181, 62, 128, 151, 177, 187, 88, 164, 144, 60, 248, 86, 1, 190, 83, 23, 11, 190, 189, 181, 219, 190, 95, 156, 67, 191, 12, 150, 237, 190, 108, 59, 170, 62, 194, 82, 206, 190, 101, 128, 207, 61, 235, 200, 199, 190, 182, 195, 10, 62, 194, 36, 105, 188, 64, 54, 132, 61, 120, 74, 184, 61, 98, 80, 174, 62, 64, 4, 78, 61, 118, 159, 15, 190, 134, 153, 109, 189, 138, 12, 106, 190, 244, 52, 62, 62, 18, 48, 156, 60, 128, 95, 76, 61, 70, 31, 167, 59, 19, 55, 49, 190, 243, 114, 137, 61, 74, 133, 28, 62, 58, 1, 2, 61, 193, 128, 183, 190, 217, 62, 11, 190, 196, 55, 178, 190, 156, 249, 28, 189, 231, 123, 222, 190, 47, 191, 177, 189, 83, 207, 139, 61, 46, 24, 116, 61, 36, 252, 192, 190, 13, 165, 27, 61, 137, 224, 125, 190, 67, 20, 99, 62, 72, 254, 20, 190, 105, 152, 99, 61, 51, 58, 108, 61, 11, 82, 104, 189, 167, 68, 1, 190, 195, 20, 89, 190, 232, 129, 32, 190, 255, 37, 142, 59, 184, 18, 234, 188, 130, 131, 204, 189, 255, 70, 80, 190, 114, 132, 220, 61, 130, 57, 244, 61, 156, 98, 139, 189, 139, 120, 13, 190, 202, 26, 33, 190, 138, 230, 15, 62, 51, 44, 57, 189, 108, 42, 154, 189, 87, 186, 187, 61, 113, 84, 217, 61, 202, 146, 84, 190, 236, 236, 209, 188, 27, 218, 136, 61, 15, 125, 147, 61, 239, 161, 20, 62, 89, 2, 19, 190, 24, 207, 130, 188, 218, 81, 90, 189, 54, 250, 47, 190, 125, 21, 30, 190, 97, 77, 104, 61, 47, 100, 100, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 124, 101, 190, 52, 166, 34, 61, 248, 192, 117, 62, 221, 115, 98, 60, 153, 106, 162, 62, 0, 116, 15, 62, 150, 218, 81, 62, 227, 77, 116, 189, 161, 245, 29, 190, 207, 30, 184, 189, 112, 127, 10, 62, 235, 179, 32, 190, 244, 134, 179, 188, 198, 139, 42, 62, 122, 149, 157, 188, 221, 32, 30, 62, 80, 91, 35, 61, 224, 135, 70, 190, 160, 135, 36, 62, 196, 113, 51, 190, 199, 25, 191, 189, 178, 82, 170, 62, 51, 25, 93, 62, 139, 109, 150, 61, 151, 46, 37, 62, 137, 232, 44, 189, 121, 151, 22, 190, 60, 53, 1, 62, 239, 70, 63, 189, 121, 51, 130, 62, 192, 18, 117, 62, 120, 207, 112, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {138, 136, 58, 191, 117, 63, 244, 62, 20, 124, 208, 190, 137, 148, 9, 62, 116, 241, 23, 190, 239, 91, 127, 190, 114, 208, 153, 61, 125, 170, 141, 60, 63, 164, 253, 61, 232, 15, 204, 190, 117, 146, 89, 63, 121, 210, 7, 190, 223, 209, 130, 191, 156, 108, 137, 63, 141, 36, 30, 191, 249, 170, 175, 62, 99, 147, 221, 62, 70, 72, 49, 188, 190, 52, 18, 63, 183, 16, 200, 190, 62, 99, 71, 62, 115, 126, 20, 190, 100, 126, 244, 189, 199, 167, 112, 62, 164, 186, 246, 190, 117, 239, 122, 189, 0, 67, 43, 61, 226, 225, 199, 62, 14, 143, 24, 63, 106, 0, 49, 63, 53, 7, 205, 189, 95, 10, 124, 189, 251, 198, 55, 189, 39, 238, 188, 61, 108, 254, 55, 61, 87, 35, 3, 62, 55, 64, 160, 190, 200, 159, 125, 190, 40, 150, 5, 191, 224, 179, 191, 188, 10, 227, 241, 61, 91, 124, 170, 188, 230, 83, 197, 62, 133, 54, 151, 58, 8, 135, 153, 62, 20, 220, 70, 62, 4, 127, 119, 62, 120, 45, 163, 62, 99, 44, 99, 61, 9, 193, 193, 59, 214, 5, 214, 189, 163, 228, 43, 62, 147, 149, 117, 62, 83, 238, 19, 190, 46, 5, 106, 189, 6, 213, 157, 189, 139, 204, 103, 60, 45, 162, 46, 190, 217, 201, 140, 188, 197, 206, 155, 61, 129, 233, 221, 189, 103, 251, 154, 190, 177, 11, 141, 190, 29, 38, 205, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {89, 96, 254, 187, 92, 186, 20, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {108, 116, 195, 63, 254, 173, 4, 62, 190, 36, 50, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {233, 198, 162, 191, 172, 140, 251, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0082/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}