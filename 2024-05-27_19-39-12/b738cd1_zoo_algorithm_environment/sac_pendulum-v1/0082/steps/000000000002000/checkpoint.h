// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {3, 147, 14, 63, 231, 158, 186, 61, 233, 59, 33, 191, 32, 145, 218, 190, 210, 8, 131, 63, 90, 232, 40, 190, 192, 232, 150, 189, 46, 163, 11, 63, 22, 105, 5, 191, 83, 105, 179, 62, 225, 50, 155, 189, 28, 3, 247, 62, 54, 74, 152, 62, 118, 158, 9, 63, 138, 7, 118, 189, 110, 146, 196, 190, 139, 101, 51, 63, 175, 228, 239, 190, 109, 68, 18, 63, 212, 186, 96, 62, 115, 102, 64, 190, 136, 197, 182, 190, 57, 172, 121, 190, 168, 127, 78, 190, 240, 6, 253, 62, 251, 35, 50, 191, 66, 64, 103, 190, 60, 35, 241, 62, 158, 70, 141, 190, 250, 238, 49, 190, 131, 230, 203, 60, 185, 172, 145, 63, 180, 66, 31, 190, 108, 18, 55, 191, 95, 12, 19, 191, 236, 226, 118, 61, 204, 27, 218, 190, 15, 224, 158, 62, 1, 173, 70, 62, 32, 187, 166, 62, 94, 165, 78, 63, 30, 89, 96, 62, 166, 52, 36, 62, 145, 46, 71, 190, 185, 24, 254, 190, 87, 182, 91, 63, 104, 97, 226, 62, 94, 81, 177, 61, 45, 165, 51, 191, 151, 45, 76, 191, 16, 136, 63, 61, 20, 214, 5, 191, 125, 30, 27, 190, 3, 78, 212, 62, 241, 177, 45, 63, 40, 74, 222, 62, 245, 149, 6, 189, 117, 220, 186, 190, 60, 229, 209, 61, 132, 32, 244, 62, 30, 117, 45, 190, 254, 70, 199, 190, 236, 79, 161, 190, 246, 24, 156, 190, 99, 16, 13, 191, 8, 87, 166, 190, 225, 151, 211, 62, 213, 99, 111, 190, 3, 240, 147, 188, 139, 154, 114, 62, 212, 184, 82, 191, 144, 33, 161, 190, 225, 113, 18, 63, 206, 78, 247, 190, 34, 160, 194, 61, 53, 182, 135, 62, 173, 44, 69, 63, 137, 145, 198, 62, 16, 96, 144, 190, 65, 67, 128, 62, 166, 92, 89, 62, 65, 228, 70, 190, 185, 221, 237, 190, 170, 99, 229, 190, 88, 84, 12, 62, 56, 148, 2, 63, 153, 121, 224, 62, 136, 85, 27, 62, 156, 164, 19, 62, 75, 223, 177, 62, 100, 119, 18, 63, 76, 88, 254, 190, 160, 25, 18, 189, 4, 124, 204, 61, 216, 157, 98, 63, 8, 250, 246, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 210, 223, 190, 199, 106, 149, 190, 49, 34, 110, 188, 250, 131, 25, 63, 107, 87, 171, 62, 42, 254, 156, 61, 216, 117, 170, 189, 135, 66, 242, 61, 4, 144, 251, 62, 134, 121, 247, 60, 16, 0, 43, 62, 204, 138, 185, 190, 161, 103, 180, 62, 245, 245, 167, 62, 226, 63, 166, 190, 75, 41, 17, 190, 74, 115, 26, 63, 241, 151, 188, 62, 129, 13, 52, 63, 9, 54, 41, 191, 83, 204, 133, 62, 228, 51, 10, 191, 36, 0, 57, 63, 38, 154, 171, 190, 161, 220, 58, 190, 109, 191, 139, 62, 26, 133, 9, 63, 36, 138, 123, 189, 93, 19, 14, 191, 181, 254, 203, 190, 9, 48, 7, 62, 30, 85, 132, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 159, 228, 189, 151, 117, 163, 188, 244, 24, 72, 190, 41, 114, 71, 60, 166, 173, 85, 189, 80, 163, 104, 190, 234, 45, 13, 190, 205, 236, 153, 60, 4, 6, 78, 186, 202, 123, 57, 61, 78, 23, 35, 190, 160, 223, 101, 62, 59, 104, 8, 190, 72, 74, 78, 190, 64, 141, 181, 189, 30, 1, 12, 61, 179, 86, 55, 62, 34, 109, 174, 61, 9, 142, 13, 60, 214, 135, 142, 61, 227, 61, 65, 61, 143, 109, 240, 60, 218, 42, 5, 62, 32, 94, 150, 189, 104, 31, 111, 189, 167, 109, 210, 189, 253, 95, 4, 190, 53, 156, 165, 60, 63, 92, 143, 190, 98, 70, 150, 189, 57, 155, 17, 61, 42, 66, 183, 189, 238, 88, 135, 189, 56, 33, 187, 61, 119, 9, 54, 189, 248, 18, 181, 61, 115, 21, 250, 187, 72, 43, 159, 61, 228, 197, 76, 61, 20, 18, 103, 190, 120, 147, 3, 189, 209, 234, 0, 189, 235, 140, 11, 62, 95, 175, 191, 189, 173, 15, 197, 61, 104, 165, 93, 189, 123, 48, 52, 190, 8, 11, 164, 190, 141, 220, 180, 190, 213, 93, 94, 61, 149, 122, 14, 190, 21, 121, 203, 188, 180, 230, 56, 190, 242, 65, 121, 189, 19, 240, 209, 190, 199, 57, 249, 61, 67, 71, 59, 61, 198, 15, 20, 188, 81, 54, 94, 61, 136, 197, 157, 188, 115, 25, 249, 189, 226, 154, 22, 62, 72, 70, 149, 187, 119, 0, 13, 62, 125, 253, 78, 190, 81, 27, 2, 63, 52, 172, 211, 60, 166, 185, 45, 61, 1, 102, 51, 62, 175, 206, 151, 189, 20, 20, 78, 190, 70, 4, 126, 61, 203, 63, 4, 190, 237, 219, 219, 189, 87, 134, 114, 62, 6, 245, 155, 190, 227, 182, 238, 61, 108, 248, 16, 62, 90, 192, 237, 189, 159, 117, 231, 62, 163, 135, 123, 61, 95, 62, 10, 60, 184, 17, 135, 62, 243, 138, 86, 190, 191, 126, 21, 190, 118, 158, 175, 189, 111, 67, 246, 61, 137, 18, 195, 189, 125, 106, 60, 62, 117, 180, 6, 62, 3, 65, 195, 61, 155, 230, 233, 189, 164, 129, 123, 189, 20, 209, 7, 190, 37, 9, 4, 62, 20, 203, 47, 61, 140, 148, 243, 59, 25, 20, 30, 190, 0, 70, 235, 61, 241, 1, 214, 61, 45, 95, 32, 190, 89, 35, 187, 187, 248, 146, 111, 189, 187, 111, 22, 190, 150, 112, 241, 61, 247, 35, 64, 190, 112, 48, 8, 190, 211, 238, 156, 61, 45, 21, 14, 190, 97, 180, 234, 188, 194, 10, 192, 61, 47, 156, 13, 62, 93, 99, 177, 189, 35, 222, 33, 187, 173, 98, 242, 61, 159, 163, 128, 61, 151, 107, 153, 189, 213, 124, 0, 190, 181, 67, 69, 190, 22, 225, 31, 190, 56, 193, 225, 189, 14, 132, 154, 189, 192, 89, 215, 188, 228, 202, 72, 61, 218, 117, 115, 60, 14, 111, 25, 189, 13, 84, 61, 190, 125, 194, 124, 189, 219, 188, 222, 60, 201, 13, 68, 62, 96, 29, 253, 61, 120, 162, 1, 189, 169, 129, 243, 60, 209, 139, 29, 62, 254, 133, 209, 60, 44, 32, 170, 61, 171, 148, 91, 189, 78, 81, 112, 190, 114, 202, 130, 62, 243, 185, 201, 189, 67, 100, 181, 189, 227, 157, 87, 59, 55, 139, 36, 59, 78, 216, 247, 61, 248, 156, 252, 189, 119, 155, 57, 190, 71, 85, 232, 61, 244, 198, 84, 190, 91, 208, 40, 62, 113, 63, 211, 61, 95, 90, 18, 62, 188, 134, 146, 190, 195, 56, 41, 190, 28, 216, 192, 189, 200, 158, 27, 190, 248, 14, 231, 61, 32, 148, 70, 189, 154, 54, 15, 59, 117, 57, 197, 189, 57, 177, 192, 61, 104, 78, 235, 189, 192, 189, 12, 62, 62, 38, 99, 189, 170, 180, 9, 62, 7, 155, 70, 62, 125, 72, 58, 62, 164, 162, 185, 61, 95, 176, 225, 189, 136, 237, 21, 62, 90, 191, 49, 189, 97, 2, 121, 62, 21, 255, 110, 190, 142, 105, 51, 62, 83, 66, 5, 61, 166, 171, 54, 190, 171, 174, 170, 62, 77, 183, 254, 60, 203, 4, 223, 61, 70, 191, 166, 62, 229, 50, 8, 62, 190, 62, 3, 190, 109, 78, 176, 189, 181, 167, 168, 62, 198, 71, 121, 190, 97, 179, 7, 61, 21, 47, 174, 186, 238, 133, 129, 61, 16, 180, 52, 190, 245, 52, 214, 189, 157, 39, 175, 189, 142, 53, 229, 61, 253, 183, 4, 62, 111, 76, 21, 62, 98, 130, 63, 190, 246, 173, 17, 62, 1, 134, 151, 188, 106, 66, 193, 61, 161, 152, 247, 61, 39, 189, 2, 190, 25, 76, 137, 61, 9, 74, 141, 188, 11, 122, 176, 189, 11, 229, 182, 189, 124, 111, 33, 62, 22, 74, 133, 190, 172, 33, 65, 61, 12, 53, 196, 189, 199, 225, 144, 189, 222, 114, 76, 61, 138, 237, 104, 61, 76, 230, 81, 61, 4, 100, 25, 190, 175, 44, 154, 189, 87, 216, 70, 61, 227, 155, 167, 61, 99, 237, 93, 187, 77, 214, 186, 62, 145, 243, 4, 190, 19, 159, 18, 190, 55, 77, 39, 62, 179, 136, 212, 189, 73, 244, 136, 188, 165, 88, 94, 62, 58, 112, 108, 61, 27, 57, 217, 61, 196, 188, 194, 189, 253, 34, 168, 61, 190, 103, 149, 189, 161, 247, 187, 189, 234, 172, 250, 189, 173, 82, 9, 190, 12, 18, 196, 186, 131, 251, 106, 188, 57, 75, 40, 190, 143, 88, 160, 60, 57, 0, 230, 61, 33, 177, 181, 61, 187, 14, 185, 61, 171, 47, 133, 189, 215, 183, 127, 61, 41, 88, 143, 61, 120, 203, 239, 189, 192, 149, 159, 189, 5, 35, 130, 189, 90, 112, 165, 189, 112, 183, 155, 61, 224, 243, 223, 189, 149, 53, 148, 60, 213, 137, 211, 189, 17, 134, 163, 189, 73, 74, 28, 190, 93, 207, 26, 61, 136, 164, 145, 188, 37, 205, 15, 62, 0, 236, 45, 62, 65, 116, 13, 62, 236, 177, 24, 60, 104, 72, 88, 60, 186, 208, 40, 190, 12, 240, 67, 187, 15, 199, 11, 190, 125, 89, 139, 189, 131, 184, 21, 62, 177, 12, 54, 190, 40, 127, 42, 190, 41, 217, 145, 61, 201, 220, 249, 61, 21, 64, 151, 61, 177, 70, 211, 189, 167, 51, 126, 61, 166, 105, 5, 62, 128, 160, 33, 62, 61, 27, 130, 61, 78, 41, 159, 61, 190, 35, 228, 60, 94, 183, 227, 189, 27, 43, 62, 189, 46, 154, 132, 189, 57, 59, 224, 59, 49, 79, 3, 62, 188, 213, 142, 189, 29, 35, 40, 190, 158, 146, 12, 61, 76, 54, 217, 189, 45, 39, 66, 61, 191, 14, 15, 62, 213, 224, 246, 189, 172, 254, 42, 190, 59, 135, 47, 62, 183, 180, 210, 189, 203, 181, 248, 61, 128, 186, 29, 62, 37, 225, 142, 187, 70, 227, 148, 188, 6, 121, 76, 62, 34, 133, 33, 62, 14, 221, 39, 189, 246, 8, 73, 61, 103, 235, 30, 190, 90, 67, 94, 189, 146, 232, 142, 189, 45, 214, 123, 61, 194, 79, 56, 62, 213, 219, 159, 190, 62, 101, 252, 189, 102, 214, 250, 187, 160, 107, 9, 62, 16, 117, 192, 189, 150, 215, 29, 62, 81, 206, 193, 61, 95, 198, 50, 190, 158, 76, 160, 62, 14, 97, 65, 61, 223, 207, 219, 59, 96, 2, 235, 61, 215, 115, 63, 189, 133, 14, 173, 61, 85, 180, 214, 60, 42, 151, 5, 62, 120, 232, 5, 61, 174, 59, 77, 59, 152, 12, 92, 190, 244, 84, 24, 60, 57, 119, 113, 189, 219, 125, 107, 190, 22, 182, 8, 61, 3, 38, 201, 60, 12, 250, 42, 62, 36, 229, 23, 189, 8, 156, 212, 61, 4, 41, 171, 190, 185, 20, 16, 62, 116, 68, 132, 189, 138, 17, 2, 190, 6, 101, 131, 61, 31, 138, 19, 62, 82, 5, 120, 62, 89, 199, 47, 62, 210, 93, 20, 190, 45, 91, 29, 190, 183, 80, 253, 60, 68, 191, 6, 190, 143, 60, 128, 62, 130, 34, 200, 189, 114, 187, 127, 62, 99, 218, 173, 190, 102, 130, 179, 61, 43, 187, 226, 60, 230, 124, 71, 188, 7, 91, 113, 61, 130, 253, 134, 62, 81, 91, 28, 190, 49, 221, 158, 61, 144, 237, 176, 187, 130, 169, 157, 61, 40, 221, 64, 190, 139, 121, 48, 190, 50, 173, 95, 189, 32, 180, 163, 61, 46, 109, 246, 189, 13, 20, 250, 189, 122, 249, 204, 61, 121, 245, 160, 187, 146, 61, 45, 188, 36, 178, 254, 189, 60, 103, 166, 61, 87, 56, 141, 61, 103, 242, 151, 189, 185, 167, 28, 62, 46, 76, 18, 62, 15, 29, 250, 189, 60, 18, 166, 61, 188, 29, 234, 189, 15, 104, 10, 61, 239, 230, 216, 61, 118, 217, 134, 187, 187, 105, 2, 190, 47, 140, 8, 62, 115, 213, 239, 189, 80, 35, 183, 188, 202, 177, 82, 61, 134, 78, 33, 190, 70, 42, 158, 190, 10, 60, 45, 189, 178, 116, 154, 190, 50, 25, 207, 188, 64, 119, 105, 190, 31, 10, 110, 189, 14, 175, 150, 189, 90, 44, 208, 190, 153, 144, 73, 190, 38, 4, 216, 61, 127, 142, 158, 62, 220, 7, 120, 190, 69, 102, 137, 190, 179, 193, 160, 61, 254, 69, 46, 190, 252, 232, 247, 189, 39, 179, 50, 190, 149, 166, 46, 61, 152, 106, 11, 62, 77, 77, 22, 62, 89, 25, 3, 190, 5, 76, 189, 189, 75, 49, 251, 189, 112, 206, 145, 189, 31, 171, 32, 62, 205, 215, 9, 60, 122, 34, 184, 61, 137, 69, 83, 190, 231, 40, 70, 190, 131, 113, 142, 189, 181, 81, 173, 188, 236, 39, 19, 190, 16, 71, 241, 189, 180, 117, 177, 189, 186, 152, 62, 190, 160, 215, 154, 190, 53, 190, 29, 190, 158, 110, 82, 62, 117, 184, 78, 191, 14, 99, 86, 190, 30, 180, 125, 188, 154, 240, 110, 62, 68, 145, 189, 190, 170, 107, 12, 189, 251, 249, 59, 191, 66, 29, 188, 62, 98, 19, 59, 62, 56, 61, 14, 191, 77, 64, 24, 189, 135, 131, 182, 60, 25, 31, 168, 62, 87, 22, 69, 62, 111, 156, 32, 191, 125, 185, 57, 190, 183, 218, 205, 61, 74, 50, 93, 190, 1, 222, 2, 190, 230, 253, 160, 190, 247, 11, 176, 189, 216, 52, 166, 190, 218, 175, 210, 62, 246, 138, 119, 190, 65, 127, 242, 189, 182, 64, 99, 189, 27, 231, 186, 190, 226, 255, 209, 190, 164, 156, 143, 61, 129, 33, 63, 63, 157, 219, 20, 62, 128, 157, 119, 61, 198, 32, 45, 59, 122, 210, 34, 61, 119, 38, 39, 190, 152, 61, 41, 190, 104, 92, 72, 61, 19, 181, 112, 189, 115, 72, 152, 62, 149, 179, 243, 190, 64, 142, 87, 62, 21, 170, 141, 189, 64, 199, 47, 190, 205, 253, 207, 62, 251, 235, 154, 61, 18, 98, 136, 62, 22, 219, 14, 188, 4, 212, 180, 189, 115, 197, 154, 190, 19, 246, 36, 190, 85, 215, 179, 61, 146, 73, 8, 190, 131, 175, 109, 190, 177, 29, 228, 61, 201, 85, 12, 61, 5, 135, 210, 190, 148, 8, 37, 62, 228, 81, 235, 60, 83, 245, 141, 190, 208, 103, 61, 62, 60, 107, 171, 61, 55, 129, 83, 61, 80, 149, 193, 60, 130, 254, 40, 190, 117, 97, 6, 190, 58, 182, 212, 189, 249, 23, 225, 59, 239, 189, 191, 188, 210, 87, 77, 62, 248, 193, 254, 61, 183, 173, 157, 61, 237, 76, 63, 190, 49, 50, 31, 190, 136, 168, 163, 190, 251, 133, 42, 62, 120, 97, 70, 190, 150, 67, 68, 60, 158, 213, 130, 190, 97, 80, 229, 61, 188, 79, 143, 189, 128, 147, 131, 189, 62, 53, 159, 61, 157, 157, 33, 62, 99, 2, 53, 62, 187, 82, 16, 62, 187, 92, 40, 190, 17, 91, 213, 190, 139, 53, 42, 62, 246, 123, 3, 189, 30, 44, 223, 59, 57, 118, 67, 61, 155, 77, 56, 190, 128, 236, 119, 188, 44, 195, 9, 191, 121, 125, 153, 190, 179, 73, 1, 62, 126, 251, 240, 61, 119, 5, 47, 190, 80, 214, 16, 62, 97, 88, 45, 62, 89, 170, 104, 62, 195, 168, 202, 61, 55, 181, 122, 190, 25, 248, 55, 62, 101, 242, 89, 61, 168, 107, 170, 189, 178, 107, 39, 190, 141, 217, 33, 190, 237, 198, 105, 62, 187, 186, 6, 62, 60, 16, 194, 189, 91, 248, 238, 189, 251, 220, 17, 189, 3, 84, 79, 190, 0, 31, 10, 62, 127, 205, 55, 61, 204, 69, 160, 62, 128, 24, 90, 190, 107, 154, 181, 61, 238, 192, 0, 62, 178, 131, 1, 61, 169, 196, 45, 190, 85, 73, 154, 62, 174, 234, 139, 190, 118, 66, 181, 61, 110, 12, 90, 189, 224, 255, 60, 190, 109, 247, 119, 60, 28, 133, 241, 60, 215, 48, 39, 190, 252, 241, 49, 62, 143, 209, 117, 189, 251, 10, 26, 190, 59, 30, 154, 60, 45, 102, 233, 60, 254, 119, 178, 188, 81, 110, 33, 190, 237, 183, 141, 189, 249, 23, 255, 61, 3, 156, 32, 61, 21, 100, 9, 188, 97, 105, 61, 61, 42, 203, 91, 61, 142, 163, 165, 60, 26, 140, 189, 189, 124, 222, 146, 189, 50, 249, 224, 60, 176, 50, 23, 62, 98, 226, 129, 189, 198, 251, 185, 61, 73, 185, 148, 61, 178, 207, 190, 61, 74, 116, 216, 188, 164, 160, 20, 61, 128, 230, 60, 61, 45, 72, 82, 190, 69, 83, 116, 189, 41, 101, 180, 61, 46, 99, 208, 61, 85, 35, 0, 62, 88, 135, 197, 189, 156, 16, 185, 61, 203, 198, 28, 62, 250, 92, 176, 189, 241, 129, 149, 61, 182, 31, 248, 189, 165, 56, 21, 190, 92, 4, 42, 61, 1, 4, 11, 190, 254, 25, 4, 62, 129, 93, 108, 188, 150, 134, 30, 191, 107, 36, 123, 61, 164, 82, 76, 62, 91, 23, 7, 190, 6, 111, 80, 61, 209, 34, 23, 190, 26, 138, 128, 61, 94, 9, 165, 190, 85, 136, 242, 61, 28, 28, 58, 62, 120, 34, 19, 62, 233, 145, 1, 190, 56, 143, 136, 189, 14, 45, 157, 61, 120, 116, 1, 62, 76, 50, 21, 190, 139, 29, 220, 189, 103, 36, 139, 190, 148, 74, 211, 60, 51, 2, 101, 59, 127, 147, 31, 190, 204, 122, 152, 188, 15, 188, 76, 62, 48, 196, 221, 189, 94, 96, 116, 189, 48, 199, 192, 188, 11, 224, 27, 189, 167, 87, 135, 62, 147, 209, 160, 61, 186, 221, 148, 189, 231, 98, 39, 61, 76, 183, 45, 59, 184, 250, 132, 189, 185, 159, 118, 189, 191, 108, 167, 60, 10, 41, 166, 60, 115, 172, 73, 61, 112, 115, 181, 61, 80, 213, 225, 61, 130, 75, 171, 188, 60, 212, 79, 61, 23, 102, 149, 189, 171, 74, 113, 60, 124, 66, 28, 62, 77, 154, 116, 189, 141, 87, 5, 61, 76, 41, 148, 189, 93, 151, 20, 190, 18, 55, 120, 188, 122, 240, 62, 189, 99, 126, 95, 61, 227, 5, 138, 62, 195, 206, 5, 61, 62, 207, 29, 62, 24, 73, 128, 60, 174, 133, 90, 62, 114, 130, 194, 61, 110, 181, 150, 190, 0, 22, 21, 61, 121, 138, 136, 62, 158, 233, 130, 189, 239, 166, 113, 189, 19, 5, 138, 61, 64, 115, 222, 189, 111, 92, 75, 189, 255, 147, 4, 190, 160, 5, 189, 189, 222, 221, 25, 62, 68, 231, 175, 60, 98, 102, 57, 190, 35, 26, 63, 62, 96, 123, 163, 190, 68, 79, 20, 189, 76, 231, 13, 190, 24, 195, 205, 189, 160, 26, 167, 61, 175, 221, 194, 61, 21, 29, 182, 61, 149, 75, 27, 62, 205, 226, 155, 190, 167, 229, 70, 62, 49, 106, 12, 60, 232, 154, 2, 62, 130, 88, 19, 189, 172, 143, 204, 61, 89, 173, 76, 189, 67, 148, 84, 62, 163, 94, 21, 189, 4, 197, 168, 189, 155, 86, 10, 62, 24, 47, 25, 188, 57, 211, 155, 62, 75, 216, 87, 190, 192, 113, 68, 62, 180, 41, 161, 60, 94, 56, 176, 189, 200, 160, 49, 62, 209, 53, 33, 62, 29, 176, 245, 189, 62, 125, 251, 60, 43, 240, 53, 189, 208, 112, 136, 61, 140, 17, 73, 60, 207, 191, 107, 62, 254, 161, 216, 189, 129, 129, 3, 62, 203, 91, 109, 62, 197, 23, 90, 189, 168, 9, 85, 189, 110, 4, 77, 189, 1, 86, 30, 190, 75, 31, 107, 61, 89, 202, 43, 62, 133, 144, 133, 190, 34, 200, 80, 62, 23, 74, 129, 189, 198, 59, 217, 60, 66, 127, 166, 61, 180, 205, 78, 61, 21, 7, 63, 190, 89, 214, 130, 61, 170, 136, 17, 190, 187, 114, 171, 190, 166, 146, 138, 62, 236, 229, 50, 190, 120, 174, 63, 62, 149, 84, 16, 62, 239, 27, 247, 61, 214, 73, 40, 62, 71, 194, 155, 61, 26, 237, 254, 61, 15, 153, 139, 61, 255, 233, 241, 189, 177, 212, 98, 60, 191, 199, 213, 188, 178, 88, 79, 62, 100, 89, 207, 189, 130, 187, 242, 61, 221, 175, 219, 61, 27, 27, 44, 62, 177, 54, 163, 188, 152, 51, 233, 189, 72, 210, 36, 61, 33, 179, 47, 62, 147, 10, 18, 62, 141, 20, 128, 61, 53, 173, 12, 190, 84, 31, 23, 62, 5, 218, 229, 189, 126, 108, 53, 62, 223, 77, 200, 61, 223, 66, 195, 189, 249, 245, 3, 61, 35, 146, 18, 62, 146, 84, 82, 61, 208, 17, 105, 189, 200, 123, 92, 188, 100, 39, 96, 190, 187, 210, 241, 61, 183, 186, 84, 61, 248, 249, 232, 189, 57, 214, 43, 190, 38, 19, 55, 190, 174, 179, 111, 62, 45, 78, 96, 190, 207, 69, 45, 62, 22, 164, 45, 62, 202, 6, 131, 61, 221, 162, 1, 61, 169, 29, 142, 62, 225, 111, 15, 62, 240, 152, 219, 189, 32, 193, 35, 62, 165, 87, 93, 190, 51, 84, 45, 190, 186, 84, 30, 62, 72, 219, 235, 60, 120, 176, 152, 190, 81, 89, 1, 62, 130, 88, 18, 62, 55, 71, 67, 61, 67, 59, 243, 189, 145, 27, 42, 62, 205, 242, 146, 188, 131, 15, 131, 189, 198, 45, 76, 62, 84, 13, 187, 189, 237, 202, 132, 62, 61, 171, 68, 190, 138, 211, 16, 62, 150, 229, 181, 61, 48, 134, 10, 190, 228, 19, 78, 189, 57, 218, 150, 62, 73, 75, 199, 189, 188, 139, 73, 190, 7, 60, 5, 62, 171, 38, 193, 61, 71, 97, 80, 190, 166, 161, 33, 190, 27, 106, 227, 188, 12, 9, 167, 190, 151, 66, 97, 190, 30, 150, 176, 61, 220, 190, 63, 189, 43, 206, 39, 61, 226, 111, 237, 187, 128, 11, 20, 190, 175, 159, 82, 190, 86, 224, 85, 61, 114, 15, 232, 189, 254, 79, 14, 62, 123, 94, 92, 188, 186, 66, 13, 190, 54, 9, 143, 61, 133, 122, 4, 62, 93, 177, 107, 61, 139, 213, 210, 189, 68, 42, 246, 189, 152, 81, 184, 189, 154, 191, 96, 61, 249, 95, 73, 59, 143, 211, 202, 60, 84, 111, 153, 188, 73, 98, 247, 189, 39, 10, 134, 189, 80, 37, 246, 188, 150, 214, 2, 190, 222, 236, 175, 61, 193, 166, 61, 190, 116, 164, 120, 188, 224, 229, 167, 189, 17, 250, 186, 61, 4, 53, 56, 61, 38, 128, 58, 189, 159, 17, 49, 190, 178, 120, 62, 189, 145, 11, 8, 190, 209, 131, 249, 61, 76, 100, 1, 190, 28, 239, 156, 61, 32, 205, 163, 61, 158, 238, 249, 61, 144, 241, 136, 60, 84, 192, 37, 60, 244, 118, 87, 189, 169, 90, 183, 61, 40, 240, 49, 189, 102, 88, 79, 60, 24, 38, 130, 189, 141, 161, 158, 61, 0, 54, 32, 190, 45, 24, 93, 190, 203, 144, 0, 190, 207, 214, 2, 190, 216, 23, 85, 189, 51, 27, 203, 188, 155, 211, 235, 188, 93, 36, 44, 61, 200, 150, 248, 189, 135, 209, 19, 60, 177, 221, 189, 189, 156, 184, 246, 61, 215, 145, 226, 60, 98, 18, 173, 188, 145, 90, 178, 61, 14, 117, 167, 185, 122, 122, 125, 189, 99, 169, 195, 189, 234, 19, 10, 61, 131, 207, 51, 190, 223, 133, 66, 190, 26, 253, 226, 189, 104, 204, 60, 62, 40, 22, 246, 189, 44, 52, 146, 189, 71, 139, 27, 62, 177, 68, 170, 60, 208, 210, 0, 62, 192, 106, 85, 62, 219, 254, 76, 62, 125, 104, 54, 62, 184, 93, 167, 187, 220, 54, 79, 190, 57, 116, 77, 62, 107, 113, 148, 189, 53, 216, 162, 189, 245, 36, 135, 60, 193, 81, 135, 190, 176, 225, 11, 62, 233, 98, 199, 189, 116, 27, 4, 189, 43, 61, 11, 190, 122, 203, 215, 60, 153, 90, 60, 190, 98, 118, 222, 188, 229, 189, 140, 61, 64, 142, 214, 62, 221, 68, 49, 189, 82, 210, 8, 189, 11, 68, 6, 189, 127, 233, 96, 190, 186, 238, 4, 189, 234, 76, 70, 62, 168, 254, 82, 60, 135, 60, 50, 190, 102, 210, 225, 60, 34, 59, 8, 62, 210, 242, 217, 189, 59, 26, 47, 60, 171, 67, 0, 190, 207, 119, 188, 60, 93, 20, 142, 189, 179, 15, 132, 187, 252, 69, 26, 189, 34, 240, 242, 60, 18, 251, 214, 189, 62, 228, 20, 62, 154, 137, 210, 61, 243, 192, 183, 61, 21, 219, 76, 189, 237, 161, 31, 190, 214, 82, 21, 190, 174, 242, 146, 190, 35, 229, 186, 61, 35, 196, 17, 62, 73, 70, 13, 190, 158, 116, 169, 190, 230, 228, 244, 188, 31, 111, 14, 61, 101, 90, 231, 61, 163, 115, 7, 188, 87, 21, 217, 61, 105, 150, 75, 62, 140, 5, 237, 61, 125, 231, 228, 60, 7, 102, 16, 62, 157, 159, 24, 188, 0, 100, 208, 190, 23, 135, 9, 190, 125, 57, 52, 189, 187, 160, 198, 189, 233, 148, 74, 190, 115, 254, 1, 62, 88, 46, 0, 62, 146, 249, 32, 62, 95, 127, 27, 62, 187, 198, 211, 190, 220, 166, 7, 62, 38, 214, 165, 188, 10, 104, 60, 190, 129, 40, 130, 189, 218, 31, 79, 62, 129, 179, 76, 62, 64, 244, 230, 61, 166, 11, 109, 62, 213, 220, 217, 188, 154, 219, 243, 60, 35, 117, 101, 190, 192, 255, 173, 62, 57, 29, 235, 189, 160, 176, 35, 60, 119, 87, 234, 188, 16, 33, 202, 188, 187, 37, 184, 189, 241, 63, 136, 188, 242, 173, 97, 190, 130, 8, 130, 62, 125, 241, 123, 190, 78, 124, 230, 189, 156, 168, 138, 190, 71, 20, 18, 62, 64, 236, 22, 60, 50, 20, 145, 61, 29, 33, 97, 59, 130, 133, 113, 61, 222, 81, 130, 189, 105, 117, 63, 189, 12, 44, 147, 60, 144, 212, 138, 190, 82, 107, 89, 62, 69, 220, 3, 188, 31, 186, 85, 189, 85, 45, 193, 59, 212, 122, 50, 190, 168, 221, 25, 62, 112, 252, 56, 62, 31, 177, 62, 61, 46, 175, 225, 189, 89, 177, 114, 61, 4, 200, 204, 189, 109, 167, 202, 61, 199, 48, 136, 189, 228, 232, 153, 62, 175, 200, 235, 61, 78, 138, 189, 186, 212, 173, 247, 59, 106, 239, 223, 61, 92, 123, 207, 189, 84, 41, 150, 62, 104, 222, 208, 59, 115, 230, 201, 61, 35, 38, 183, 61, 192, 129, 204, 188, 247, 241, 216, 189, 75, 249, 40, 190, 39, 251, 255, 189, 159, 145, 62, 61, 183, 127, 229, 188, 95, 120, 49, 189, 108, 172, 47, 190, 246, 46, 20, 62, 130, 57, 244, 61, 5, 165, 93, 189, 218, 208, 254, 189, 222, 182, 247, 189, 94, 196, 31, 62, 3, 223, 62, 189, 150, 87, 154, 189, 237, 222, 26, 62, 113, 84, 217, 61, 225, 172, 52, 190, 181, 180, 178, 188, 240, 35, 0, 62, 55, 191, 200, 61, 66, 86, 30, 62, 92, 170, 10, 190, 134, 201, 134, 58, 27, 139, 55, 189, 54, 250, 47, 190, 125, 21, 30, 190, 125, 207, 152, 61, 47, 100, 100, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 10, 61, 190, 172, 241, 200, 189, 31, 219, 70, 62, 221, 115, 98, 60, 78, 81, 95, 62, 94, 190, 224, 61, 34, 209, 53, 62, 111, 224, 111, 189, 137, 200, 245, 189, 210, 214, 158, 189, 122, 115, 86, 62, 140, 109, 32, 190, 188, 113, 140, 61, 76, 22, 112, 62, 99, 101, 119, 61, 2, 169, 74, 61, 111, 105, 243, 188, 36, 18, 41, 190, 76, 26, 15, 188, 175, 13, 7, 190, 42, 122, 26, 190, 159, 96, 152, 62, 131, 184, 69, 62, 135, 220, 175, 187, 62, 40, 193, 189, 137, 232, 44, 189, 121, 151, 22, 190, 178, 114, 185, 61, 151, 23, 161, 190, 128, 42, 110, 62, 110, 198, 65, 62, 40, 54, 63, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 81, 75, 190, 81, 193, 60, 62, 58, 103, 182, 190, 137, 148, 9, 62, 51, 93, 95, 189, 28, 232, 33, 190, 128, 235, 207, 61, 198, 124, 120, 61, 163, 4, 6, 62, 59, 185, 156, 61, 81, 44, 190, 62, 45, 91, 8, 190, 245, 239, 238, 190, 152, 105, 24, 63, 203, 180, 152, 190, 229, 114, 45, 62, 125, 116, 123, 62, 230, 125, 162, 188, 1, 139, 49, 62, 4, 229, 67, 190, 92, 223, 35, 62, 104, 239, 230, 189, 149, 193, 247, 189, 81, 94, 55, 62, 214, 145, 15, 190, 117, 239, 122, 189, 0, 67, 43, 61, 200, 153, 102, 62, 74, 90, 111, 62, 203, 111, 254, 62, 108, 197, 86, 61, 140, 77, 136, 189, 93, 189, 195, 188, 126, 47, 10, 62, 81, 230, 31, 189, 87, 35, 3, 62, 79, 208, 85, 190, 21, 115, 63, 190, 74, 117, 143, 190, 208, 209, 139, 188, 171, 10, 240, 61, 236, 229, 124, 61, 6, 248, 42, 189, 96, 114, 184, 59, 9, 230, 74, 62, 79, 10, 128, 62, 218, 81, 48, 61, 117, 113, 47, 62, 216, 89, 30, 190, 26, 43, 141, 59, 37, 78, 194, 189, 127, 201, 159, 189, 12, 224, 59, 62, 246, 233, 8, 190, 152, 179, 195, 189, 94, 144, 169, 59, 88, 189, 144, 189, 45, 162, 46, 190, 217, 201, 140, 188, 212, 222, 217, 189, 56, 97, 155, 61, 231, 230, 110, 190, 65, 43, 108, 190, 193, 33, 202, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {120, 138, 46, 61, 232, 203, 230, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {10, 240, 3, 63, 24, 184, 88, 191, 106, 14, 97, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {126, 70, 121, 63, 170, 40, 180, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0082/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}