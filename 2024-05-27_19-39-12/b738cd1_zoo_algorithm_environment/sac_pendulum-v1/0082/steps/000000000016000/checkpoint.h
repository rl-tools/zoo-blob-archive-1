// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 226, 36, 63, 93, 246, 64, 62, 5, 122, 48, 191, 159, 83, 65, 191, 220, 232, 232, 60, 137, 248, 194, 190, 211, 133, 94, 191, 73, 150, 47, 188, 191, 51, 177, 190, 170, 119, 135, 62, 145, 11, 204, 63, 87, 93, 124, 62, 25, 86, 39, 188, 69, 64, 76, 191, 100, 16, 127, 190, 216, 152, 131, 191, 84, 158, 132, 61, 66, 50, 190, 190, 83, 4, 2, 63, 131, 221, 204, 62, 13, 40, 189, 190, 200, 228, 44, 191, 145, 64, 173, 190, 47, 98, 70, 190, 3, 193, 103, 62, 96, 185, 170, 191, 122, 250, 150, 190, 246, 128, 183, 62, 112, 105, 131, 191, 91, 108, 62, 190, 245, 156, 152, 61, 197, 24, 239, 62, 144, 211, 234, 190, 129, 108, 141, 191, 166, 128, 62, 189, 185, 125, 76, 62, 199, 244, 182, 190, 187, 55, 128, 63, 21, 107, 66, 62, 183, 100, 7, 63, 185, 10, 146, 63, 229, 2, 121, 62, 184, 17, 82, 62, 6, 71, 29, 191, 45, 185, 7, 191, 233, 172, 126, 63, 90, 203, 76, 62, 82, 252, 229, 61, 25, 78, 58, 191, 240, 166, 84, 191, 137, 125, 73, 61, 156, 20, 83, 191, 166, 80, 93, 61, 58, 23, 156, 62, 176, 143, 120, 189, 100, 59, 14, 191, 192, 176, 218, 190, 207, 44, 169, 190, 148, 121, 74, 62, 88, 165, 3, 63, 4, 120, 229, 190, 14, 73, 151, 191, 41, 142, 67, 190, 204, 62, 57, 191, 105, 93, 209, 191, 78, 40, 186, 190, 201, 17, 53, 62, 145, 91, 125, 191, 116, 8, 66, 190, 175, 99, 197, 62, 170, 40, 202, 191, 153, 71, 154, 190, 53, 51, 219, 62, 135, 153, 130, 191, 132, 235, 150, 62, 122, 7, 224, 62, 60, 135, 147, 63, 19, 10, 139, 62, 23, 70, 213, 190, 200, 80, 137, 63, 194, 252, 73, 62, 15, 83, 247, 190, 104, 78, 198, 191, 235, 96, 170, 190, 200, 7, 83, 63, 183, 181, 123, 63, 176, 37, 215, 62, 183, 49, 255, 62, 60, 180, 1, 63, 0, 154, 191, 62, 16, 213, 232, 62, 244, 113, 136, 191, 7, 224, 132, 61, 194, 153, 215, 62, 188, 211, 167, 63, 87, 120, 144, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 234, 1, 191, 164, 254, 208, 189, 67, 178, 178, 62, 182, 240, 203, 62, 232, 165, 168, 62, 100, 44, 59, 62, 121, 148, 14, 190, 193, 17, 62, 190, 54, 159, 50, 63, 237, 78, 201, 61, 120, 11, 197, 61, 6, 85, 11, 190, 165, 64, 13, 63, 212, 94, 210, 61, 55, 73, 31, 191, 134, 7, 99, 190, 194, 33, 210, 62, 202, 72, 7, 63, 210, 206, 50, 63, 160, 75, 53, 191, 245, 31, 21, 63, 219, 68, 86, 190, 75, 237, 7, 63, 188, 191, 62, 60, 116, 98, 9, 190, 148, 37, 135, 61, 79, 10, 35, 63, 123, 24, 198, 59, 242, 207, 44, 191, 10, 9, 200, 190, 38, 61, 102, 62, 21, 134, 233, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {125, 133, 52, 191, 70, 117, 172, 61, 138, 249, 30, 62, 201, 124, 104, 62, 179, 24, 64, 191, 49, 40, 57, 189, 226, 111, 150, 190, 26, 122, 12, 191, 232, 225, 24, 191, 106, 53, 63, 190, 209, 219, 129, 62, 71, 180, 87, 186, 44, 160, 82, 62, 240, 165, 59, 62, 149, 93, 114, 190, 15, 243, 139, 191, 57, 144, 186, 188, 191, 134, 57, 62, 229, 179, 9, 190, 99, 144, 169, 189, 216, 213, 127, 191, 71, 141, 58, 191, 25, 229, 237, 190, 110, 34, 191, 190, 23, 38, 28, 191, 162, 26, 134, 189, 154, 14, 96, 62, 224, 207, 18, 191, 63, 250, 60, 191, 40, 89, 254, 190, 189, 66, 57, 190, 246, 212, 170, 189, 56, 193, 136, 189, 168, 152, 51, 62, 158, 45, 187, 61, 179, 254, 106, 62, 158, 51, 119, 190, 85, 123, 142, 61, 239, 28, 76, 62, 212, 171, 1, 61, 19, 8, 8, 191, 35, 183, 162, 189, 133, 133, 62, 62, 178, 236, 51, 61, 168, 15, 151, 62, 153, 142, 130, 61, 250, 10, 173, 190, 52, 71, 22, 190, 253, 96, 192, 190, 241, 154, 138, 61, 255, 143, 31, 190, 73, 35, 183, 188, 42, 139, 1, 190, 128, 177, 229, 190, 246, 175, 135, 191, 167, 53, 32, 62, 187, 77, 129, 189, 240, 67, 135, 61, 9, 134, 117, 62, 238, 24, 237, 190, 194, 40, 109, 188, 212, 42, 31, 62, 150, 198, 135, 190, 188, 171, 85, 62, 166, 41, 200, 190, 243, 215, 7, 63, 6, 86, 30, 61, 28, 94, 213, 61, 27, 248, 26, 62, 20, 218, 133, 60, 46, 248, 149, 190, 247, 214, 78, 62, 36, 124, 70, 190, 100, 151, 181, 190, 99, 228, 111, 62, 149, 254, 144, 190, 18, 97, 53, 62, 234, 16, 62, 62, 213, 36, 202, 190, 1, 191, 16, 63, 53, 63, 110, 62, 76, 196, 146, 189, 225, 95, 157, 62, 127, 201, 139, 188, 31, 16, 46, 190, 217, 155, 159, 61, 123, 195, 51, 62, 171, 175, 4, 191, 109, 215, 139, 62, 26, 219, 57, 62, 62, 101, 70, 62, 215, 131, 7, 61, 187, 217, 155, 60, 87, 155, 71, 189, 236, 183, 74, 186, 1, 40, 208, 61, 140, 148, 243, 59, 25, 20, 30, 190, 0, 70, 235, 61, 241, 1, 214, 61, 45, 95, 32, 190, 89, 35, 187, 187, 248, 146, 111, 189, 187, 111, 22, 190, 150, 112, 241, 61, 247, 35, 64, 190, 112, 48, 8, 190, 211, 238, 156, 61, 45, 21, 14, 190, 97, 180, 234, 188, 194, 10, 192, 61, 47, 156, 13, 62, 93, 99, 177, 189, 35, 222, 33, 187, 173, 98, 242, 61, 159, 163, 128, 61, 151, 107, 153, 189, 213, 124, 0, 190, 181, 67, 69, 190, 22, 225, 31, 190, 56, 193, 225, 189, 14, 132, 154, 189, 192, 89, 215, 188, 228, 202, 72, 61, 218, 117, 115, 60, 14, 111, 25, 189, 13, 84, 61, 190, 125, 194, 124, 189, 194, 28, 54, 61, 46, 143, 187, 61, 57, 167, 246, 61, 189, 206, 53, 62, 135, 9, 9, 62, 95, 42, 26, 62, 182, 107, 129, 61, 234, 241, 185, 61, 21, 148, 159, 61, 220, 165, 113, 190, 79, 184, 79, 62, 40, 193, 248, 189, 174, 91, 188, 189, 198, 232, 159, 62, 105, 253, 39, 60, 152, 190, 191, 62, 140, 206, 30, 190, 120, 210, 27, 191, 181, 42, 158, 62, 2, 30, 151, 190, 149, 96, 26, 62, 150, 133, 146, 62, 181, 139, 152, 62, 50, 220, 247, 190, 113, 253, 160, 190, 229, 70, 26, 62, 88, 231, 62, 189, 105, 9, 108, 62, 155, 204, 203, 61, 138, 16, 25, 189, 224, 16, 55, 190, 17, 163, 82, 62, 37, 28, 161, 189, 73, 217, 3, 189, 187, 143, 22, 190, 126, 173, 105, 62, 140, 153, 210, 61, 199, 85, 31, 62, 246, 153, 48, 62, 103, 177, 178, 189, 111, 221, 20, 61, 79, 209, 164, 190, 145, 68, 72, 62, 198, 144, 13, 189, 42, 124, 160, 62, 2, 138, 18, 62, 228, 139, 185, 190, 127, 187, 221, 62, 206, 15, 32, 62, 161, 120, 53, 62, 218, 79, 180, 62, 167, 23, 83, 62, 122, 194, 223, 190, 104, 215, 155, 190, 209, 52, 165, 62, 135, 223, 116, 191, 139, 67, 135, 59, 154, 35, 135, 61, 32, 88, 133, 62, 62, 90, 0, 191, 99, 236, 82, 60, 213, 60, 13, 189, 208, 158, 88, 59, 188, 188, 43, 62, 176, 80, 182, 61, 227, 100, 200, 190, 129, 113, 113, 61, 191, 143, 31, 62, 46, 204, 59, 62, 174, 129, 242, 187, 91, 130, 221, 189, 225, 184, 32, 189, 200, 170, 160, 61, 166, 121, 160, 187, 203, 203, 52, 190, 38, 152, 241, 61, 42, 237, 55, 191, 139, 173, 150, 62, 237, 218, 216, 189, 70, 64, 157, 62, 36, 115, 58, 60, 47, 220, 2, 189, 140, 124, 0, 62, 181, 244, 178, 190, 104, 26, 27, 190, 20, 8, 84, 61, 134, 74, 46, 62, 19, 232, 206, 189, 191, 138, 233, 62, 199, 75, 142, 61, 110, 159, 215, 190, 67, 89, 220, 61, 11, 130, 152, 189, 79, 30, 51, 188, 116, 8, 159, 62, 64, 60, 230, 61, 27, 57, 217, 61, 196, 188, 194, 189, 134, 75, 164, 61, 244, 205, 199, 189, 152, 247, 165, 189, 13, 25, 250, 189, 81, 85, 9, 190, 66, 192, 55, 60, 240, 234, 233, 59, 39, 216, 37, 190, 184, 20, 160, 60, 243, 116, 209, 61, 104, 235, 76, 61, 0, 50, 116, 61, 38, 212, 134, 189, 75, 169, 102, 61, 247, 87, 190, 61, 188, 217, 2, 190, 138, 173, 159, 189, 56, 0, 170, 189, 55, 102, 81, 189, 50, 168, 189, 61, 222, 2, 188, 189, 118, 230, 180, 60, 3, 183, 151, 189, 204, 89, 208, 189, 168, 126, 63, 190, 91, 78, 112, 61, 223, 163, 19, 189, 176, 242, 4, 62, 228, 110, 63, 62, 21, 25, 235, 61, 122, 165, 180, 188, 152, 186, 146, 188, 177, 156, 73, 190, 206, 156, 20, 189, 44, 254, 41, 190, 128, 123, 204, 189, 211, 3, 236, 61, 13, 79, 55, 190, 88, 37, 73, 190, 73, 212, 53, 61, 3, 142, 184, 61, 85, 73, 146, 61, 74, 222, 13, 190, 252, 88, 254, 60, 213, 81, 206, 61, 54, 101, 17, 62, 79, 23, 114, 61, 43, 226, 152, 61, 8, 153, 78, 187, 16, 213, 227, 189, 246, 159, 148, 189, 46, 154, 132, 189, 140, 120, 195, 188, 230, 191, 234, 61, 188, 213, 142, 189, 145, 238, 57, 190, 56, 249, 165, 186, 76, 54, 217, 189, 45, 39, 66, 61, 191, 14, 15, 62, 98, 37, 243, 189, 38, 178, 43, 190, 61, 199, 171, 60, 164, 123, 58, 190, 163, 57, 210, 61, 47, 202, 26, 189, 150, 252, 138, 187, 220, 187, 158, 189, 143, 245, 212, 189, 167, 98, 215, 60, 117, 16, 250, 61, 61, 161, 152, 62, 73, 249, 132, 190, 221, 71, 109, 191, 187, 243, 5, 191, 121, 224, 34, 190, 2, 215, 168, 61, 215, 124, 238, 190, 175, 253, 184, 61, 73, 46, 123, 191, 243, 88, 31, 62, 127, 250, 209, 59, 159, 48, 158, 62, 35, 184, 200, 61, 62, 11, 183, 189, 115, 20, 34, 63, 195, 127, 248, 61, 251, 187, 75, 190, 188, 42, 206, 190, 76, 107, 189, 60, 175, 245, 213, 62, 13, 116, 106, 62, 145, 58, 140, 62, 3, 139, 78, 190, 64, 29, 80, 62, 123, 27, 30, 190, 63, 68, 236, 189, 150, 204, 220, 189, 122, 131, 187, 190, 106, 244, 97, 190, 150, 31, 51, 61, 247, 9, 229, 189, 164, 248, 28, 184, 199, 226, 162, 62, 241, 255, 26, 189, 226, 160, 175, 189, 86, 28, 255, 189, 6, 178, 192, 190, 176, 130, 10, 63, 121, 7, 32, 61, 177, 246, 145, 61, 108, 100, 250, 61, 226, 139, 73, 190, 143, 217, 2, 191, 54, 136, 124, 189, 96, 233, 60, 191, 247, 77, 143, 62, 97, 22, 168, 61, 240, 75, 181, 62, 223, 128, 6, 191, 226, 64, 25, 187, 233, 201, 243, 190, 233, 253, 127, 190, 220, 208, 119, 61, 162, 227, 231, 62, 212, 80, 226, 190, 49, 221, 158, 61, 144, 237, 176, 187, 130, 169, 157, 61, 98, 115, 78, 190, 139, 121, 48, 190, 50, 173, 95, 189, 32, 180, 163, 61, 104, 95, 243, 189, 122, 156, 247, 189, 122, 249, 204, 61, 121, 245, 160, 187, 35, 180, 45, 188, 68, 51, 7, 190, 225, 221, 133, 61, 87, 56, 141, 61, 141, 78, 159, 189, 205, 62, 30, 62, 116, 121, 10, 62, 15, 29, 250, 189, 168, 155, 113, 61, 110, 213, 233, 189, 15, 104, 10, 61, 149, 11, 220, 61, 118, 217, 134, 187, 120, 107, 15, 190, 173, 17, 214, 61, 47, 138, 254, 189, 80, 35, 183, 188, 127, 133, 72, 60, 100, 156, 63, 190, 181, 159, 158, 190, 156, 249, 153, 189, 65, 207, 183, 61, 11, 59, 195, 61, 192, 75, 185, 61, 189, 194, 157, 189, 43, 179, 115, 62, 43, 145, 239, 190, 87, 81, 13, 190, 182, 44, 206, 190, 177, 239, 221, 62, 216, 3, 220, 60, 60, 70, 146, 190, 184, 89, 30, 191, 87, 106, 168, 190, 80, 193, 189, 191, 47, 109, 212, 62, 210, 127, 135, 191, 224, 197, 202, 62, 152, 253, 143, 190, 82, 207, 47, 61, 21, 109, 178, 62, 73, 186, 113, 190, 74, 62, 157, 190, 108, 25, 95, 62, 185, 63, 213, 62, 59, 106, 56, 62, 224, 246, 24, 191, 77, 139, 219, 190, 183, 251, 182, 188, 151, 69, 25, 191, 128, 104, 49, 61, 34, 210, 225, 60, 206, 114, 29, 190, 110, 168, 139, 190, 85, 193, 18, 190, 77, 149, 72, 191, 106, 7, 100, 62, 207, 160, 3, 192, 84, 5, 39, 191, 155, 19, 160, 190, 172, 80, 50, 189, 60, 74, 155, 191, 199, 95, 216, 62, 83, 185, 98, 191, 143, 158, 141, 62, 200, 0, 128, 62, 149, 211, 199, 190, 184, 13, 201, 188, 230, 147, 223, 190, 181, 36, 79, 62, 25, 65, 76, 62, 31, 160, 170, 191, 27, 88, 255, 189, 124, 195, 184, 190, 175, 76, 186, 191, 127, 10, 7, 191, 123, 156, 28, 61, 83, 182, 180, 190, 103, 40, 100, 190, 2, 154, 243, 62, 63, 18, 170, 191, 70, 201, 15, 190, 182, 118, 1, 190, 181, 13, 65, 190, 230, 246, 162, 190, 44, 91, 89, 61, 102, 218, 16, 63, 216, 128, 105, 61, 119, 244, 86, 62, 241, 138, 203, 189, 221, 167, 19, 190, 50, 101, 102, 189, 36, 75, 35, 191, 181, 167, 113, 190, 252, 224, 56, 191, 138, 159, 218, 62, 174, 194, 62, 191, 55, 196, 29, 62, 204, 245, 246, 61, 128, 249, 209, 190, 8, 158, 31, 63, 153, 66, 239, 60, 77, 122, 41, 62, 240, 230, 68, 61, 166, 63, 13, 190, 227, 172, 111, 191, 161, 136, 249, 190, 48, 150, 81, 61, 36, 60, 182, 191, 115, 99, 33, 190, 178, 81, 123, 62, 195, 30, 130, 59, 174, 182, 64, 191, 145, 6, 27, 62, 69, 0, 92, 61, 125, 67, 248, 190, 194, 193, 172, 62, 127, 20, 43, 62, 92, 219, 118, 58, 45, 8, 194, 188, 83, 188, 139, 190, 106, 31, 222, 189, 5, 79, 26, 190, 97, 17, 208, 61, 182, 219, 72, 61, 14, 246, 192, 62, 108, 34, 111, 62, 97, 41, 193, 61, 175, 136, 238, 62, 25, 15, 152, 190, 186, 160, 7, 191, 63, 64, 63, 62, 18, 181, 149, 190, 148, 105, 21, 62, 67, 155, 193, 62, 88, 100, 47, 62, 52, 249, 72, 190, 1, 183, 248, 187, 169, 22, 84, 186, 192, 93, 149, 62, 48, 95, 116, 62, 40, 135, 247, 61, 88, 160, 229, 190, 219, 216, 36, 191, 75, 29, 217, 61, 102, 123, 150, 191, 123, 135, 209, 190, 57, 66, 137, 62, 138, 35, 31, 191, 44, 158, 109, 189, 39, 18, 7, 191, 200, 80, 30, 191, 72, 108, 51, 62, 96, 3, 137, 61, 242, 202, 43, 191, 140, 178, 234, 61, 143, 98, 166, 189, 83, 133, 122, 62, 23, 112, 79, 62, 156, 110, 137, 190, 84, 175, 87, 60, 208, 82, 51, 62, 26, 194, 133, 189, 91, 176, 7, 63, 27, 243, 58, 190, 201, 154, 175, 61, 91, 106, 19, 62, 89, 176, 168, 189, 9, 67, 222, 190, 70, 125, 87, 190, 72, 66, 50, 191, 118, 107, 37, 62, 221, 248, 133, 61, 162, 113, 131, 62, 16, 197, 90, 190, 92, 233, 51, 62, 51, 22, 174, 190, 198, 218, 54, 191, 93, 173, 231, 190, 235, 97, 193, 62, 203, 101, 179, 190, 86, 174, 98, 61, 53, 119, 153, 189, 101, 171, 96, 190, 126, 192, 251, 59, 194, 234, 39, 185, 229, 236, 66, 190, 63, 247, 8, 62, 195, 56, 114, 189, 44, 209, 63, 190, 168, 103, 108, 186, 92, 16, 255, 187, 254, 119, 178, 188, 131, 237, 41, 190, 130, 219, 156, 189, 94, 208, 195, 61, 58, 147, 246, 60, 97, 54, 136, 187, 97, 105, 61, 61, 198, 18, 198, 59, 142, 163, 165, 60, 5, 183, 222, 189, 179, 32, 138, 189, 155, 118, 195, 187, 69, 255, 8, 62, 9, 84, 141, 189, 8, 188, 183, 61, 130, 200, 131, 61, 162, 203, 178, 61, 74, 116, 216, 188, 164, 160, 20, 61, 239, 252, 11, 61, 140, 64, 82, 190, 27, 242, 129, 190, 115, 41, 219, 62, 170, 119, 108, 188, 105, 223, 113, 62, 44, 82, 79, 191, 165, 69, 72, 62, 246, 184, 8, 63, 32, 249, 15, 62, 128, 251, 166, 191, 86, 107, 158, 189, 253, 2, 122, 62, 67, 179, 93, 60, 113, 63, 28, 62, 166, 165, 184, 62, 20, 160, 69, 191, 191, 136, 21, 191, 24, 18, 162, 189, 184, 232, 68, 62, 201, 50, 187, 190, 24, 6, 29, 189, 255, 232, 193, 190, 95, 207, 179, 191, 219, 139, 132, 191, 213, 52, 28, 62, 229, 233, 128, 190, 244, 51, 128, 62, 32, 44, 15, 62, 236, 160, 199, 191, 79, 94, 31, 62, 15, 43, 141, 61, 156, 90, 172, 190, 145, 3, 25, 188, 157, 32, 219, 190, 210, 156, 204, 61, 128, 22, 156, 61, 60, 155, 60, 191, 255, 105, 32, 61, 109, 170, 147, 62, 51, 120, 176, 190, 117, 130, 32, 62, 36, 234, 66, 60, 179, 174, 32, 190, 145, 105, 60, 62, 53, 70, 78, 62, 221, 173, 206, 189, 213, 77, 72, 190, 12, 109, 38, 189, 195, 234, 140, 190, 105, 134, 113, 62, 113, 156, 2, 191, 165, 27, 119, 188, 245, 37, 166, 189, 132, 137, 128, 62, 171, 235, 171, 62, 233, 91, 156, 60, 63, 52, 128, 188, 88, 145, 153, 191, 64, 232, 5, 190, 12, 181, 25, 62, 27, 9, 30, 62, 185, 8, 60, 186, 135, 126, 243, 189, 8, 44, 77, 191, 78, 208, 32, 190, 0, 161, 86, 189, 175, 163, 79, 62, 123, 198, 190, 62, 109, 128, 176, 60, 77, 197, 100, 62, 210, 238, 232, 61, 189, 53, 131, 62, 42, 168, 65, 62, 253, 4, 178, 190, 195, 114, 23, 61, 22, 247, 181, 62, 12, 14, 195, 61, 119, 51, 212, 186, 93, 118, 179, 61, 77, 176, 176, 189, 57, 18, 128, 62, 16, 32, 168, 190, 176, 42, 201, 188, 109, 16, 51, 62, 136, 111, 168, 61, 91, 205, 240, 189, 165, 68, 116, 62, 213, 252, 175, 190, 22, 21, 109, 61, 15, 208, 103, 189, 163, 71, 51, 189, 172, 230, 233, 61, 175, 142, 11, 62, 243, 147, 120, 62, 6, 219, 98, 62, 151, 147, 108, 190, 251, 240, 141, 62, 201, 141, 43, 188, 248, 93, 148, 61, 111, 211, 222, 187, 42, 171, 41, 62, 165, 47, 42, 60, 226, 187, 117, 62, 6, 89, 84, 189, 162, 253, 55, 189, 69, 159, 54, 62, 173, 51, 175, 189, 119, 8, 133, 62, 69, 251, 130, 190, 204, 8, 102, 62, 36, 224, 202, 61, 196, 188, 221, 189, 185, 171, 123, 62, 239, 161, 170, 62, 203, 125, 114, 190, 111, 178, 218, 61, 91, 67, 39, 61, 20, 93, 227, 61, 39, 56, 83, 62, 74, 193, 151, 62, 223, 212, 134, 190, 185, 80, 232, 61, 221, 43, 147, 62, 212, 231, 9, 61, 210, 155, 246, 61, 197, 67, 117, 61, 230, 161, 209, 189, 78, 69, 176, 188, 56, 45, 78, 62, 229, 193, 169, 190, 228, 232, 37, 62, 254, 93, 6, 189, 65, 153, 136, 61, 204, 220, 2, 62, 144, 13, 183, 61, 254, 33, 129, 190, 144, 174, 238, 61, 231, 63, 246, 189, 224, 28, 224, 190, 93, 106, 92, 62, 131, 177, 74, 190, 223, 63, 82, 62, 240, 160, 56, 62, 152, 104, 131, 61, 185, 37, 97, 62, 29, 115, 137, 62, 84, 9, 161, 59, 156, 82, 1, 62, 126, 60, 13, 187, 161, 76, 161, 61, 121, 71, 76, 62, 251, 55, 136, 62, 119, 127, 123, 190, 66, 118, 15, 62, 148, 214, 16, 62, 155, 30, 114, 62, 98, 100, 69, 62, 116, 250, 48, 189, 161, 231, 163, 61, 102, 237, 180, 61, 32, 56, 42, 62, 78, 33, 193, 61, 145, 157, 13, 190, 198, 197, 255, 61, 57, 128, 89, 190, 226, 49, 134, 62, 16, 18, 155, 61, 17, 1, 105, 189, 146, 25, 249, 61, 197, 173, 101, 62, 249, 253, 132, 61, 54, 210, 51, 187, 180, 100, 43, 63, 229, 74, 17, 191, 218, 73, 201, 61, 18, 89, 187, 61, 233, 252, 128, 189, 56, 212, 194, 61, 109, 188, 179, 62, 132, 227, 128, 62, 172, 179, 54, 191, 112, 162, 89, 62, 50, 177, 13, 62, 23, 150, 4, 62, 139, 129, 103, 188, 106, 7, 179, 62, 187, 148, 85, 61, 67, 94, 188, 190, 75, 152, 208, 61, 16, 113, 80, 191, 226, 106, 63, 190, 223, 40, 124, 62, 3, 48, 70, 190, 14, 89, 236, 190, 56, 4, 172, 61, 143, 105, 79, 62, 47, 143, 99, 62, 189, 27, 123, 189, 140, 43, 137, 62, 249, 86, 203, 189, 120, 14, 57, 62, 163, 24, 157, 62, 243, 82, 156, 190, 45, 121, 97, 62, 20, 165, 219, 189, 235, 55, 222, 62, 197, 182, 15, 63, 40, 66, 157, 190, 240, 63, 232, 62, 158, 174, 197, 62, 121, 48, 99, 190, 47, 216, 14, 190, 97, 27, 42, 190, 128, 79, 240, 61, 228, 169, 173, 189, 121, 226, 230, 188, 57, 127, 138, 190, 112, 56, 131, 191, 213, 203, 61, 61, 179, 187, 205, 62, 3, 89, 151, 61, 121, 34, 33, 61, 134, 179, 194, 189, 235, 108, 19, 191, 99, 231, 157, 187, 86, 224, 85, 61, 114, 15, 232, 189, 254, 79, 14, 62, 123, 94, 92, 188, 186, 66, 13, 190, 54, 9, 143, 61, 133, 122, 4, 62, 93, 177, 107, 61, 139, 213, 210, 189, 68, 42, 246, 189, 152, 81, 184, 189, 154, 191, 96, 61, 249, 95, 73, 59, 143, 211, 202, 60, 84, 111, 153, 188, 73, 98, 247, 189, 39, 10, 134, 189, 80, 37, 246, 188, 150, 214, 2, 190, 222, 236, 175, 61, 193, 166, 61, 190, 116, 164, 120, 188, 224, 229, 167, 189, 17, 250, 186, 61, 4, 53, 56, 61, 38, 128, 58, 189, 159, 17, 49, 190, 178, 120, 62, 189, 145, 11, 8, 190, 209, 131, 249, 61, 76, 100, 1, 190, 28, 239, 156, 61, 32, 205, 163, 61, 158, 238, 249, 61, 144, 241, 136, 60, 84, 192, 37, 60, 244, 118, 87, 189, 169, 90, 183, 61, 40, 240, 49, 189, 102, 88, 79, 60, 24, 38, 130, 189, 141, 161, 158, 61, 0, 54, 32, 190, 45, 24, 93, 190, 203, 144, 0, 190, 207, 214, 2, 190, 216, 23, 85, 189, 51, 27, 203, 188, 155, 211, 235, 188, 93, 36, 44, 61, 200, 150, 248, 189, 135, 209, 19, 60, 177, 221, 189, 189, 156, 184, 246, 61, 215, 145, 226, 60, 98, 18, 173, 188, 145, 90, 178, 61, 14, 117, 167, 185, 122, 122, 125, 189, 99, 169, 195, 189, 234, 19, 10, 61, 131, 207, 51, 190, 223, 133, 66, 190, 26, 253, 226, 189, 249, 220, 139, 62, 2, 139, 46, 190, 78, 193, 151, 189, 102, 191, 135, 61, 20, 205, 163, 61, 59, 75, 200, 61, 249, 94, 167, 62, 231, 82, 101, 62, 214, 160, 121, 62, 67, 163, 113, 61, 74, 58, 17, 190, 40, 34, 14, 63, 218, 45, 136, 190, 237, 0, 57, 190, 171, 26, 177, 61, 180, 112, 142, 190, 198, 110, 58, 62, 123, 148, 116, 60, 28, 143, 132, 60, 173, 127, 222, 190, 56, 192, 48, 61, 211, 4, 226, 190, 120, 232, 32, 61, 113, 137, 255, 60, 83, 240, 214, 62, 239, 98, 64, 190, 47, 35, 121, 190, 125, 72, 124, 190, 235, 124, 106, 191, 44, 90, 157, 190, 12, 99, 142, 62, 51, 26, 113, 190, 76, 77, 54, 191, 231, 157, 20, 62, 148, 170, 37, 62, 228, 75, 201, 189, 148, 219, 32, 62, 190, 193, 117, 61, 253, 22, 191, 190, 65, 188, 0, 63, 160, 105, 153, 61, 128, 112, 142, 190, 184, 204, 10, 190, 51, 84, 185, 188, 55, 27, 176, 62, 44, 88, 106, 62, 236, 219, 29, 191, 28, 98, 139, 62, 226, 166, 111, 189, 255, 99, 193, 189, 212, 136, 124, 190, 202, 160, 218, 188, 207, 91, 40, 63, 45, 231, 101, 62, 118, 90, 202, 190, 25, 35, 57, 190, 15, 29, 60, 190, 48, 9, 33, 62, 40, 243, 64, 62, 17, 77, 237, 62, 28, 137, 187, 62, 227, 110, 28, 62, 183, 19, 16, 190, 17, 121, 57, 62, 214, 46, 141, 62, 117, 223, 128, 190, 136, 205, 56, 61, 218, 28, 208, 189, 44, 173, 187, 188, 31, 60, 98, 190, 221, 212, 195, 62, 250, 152, 170, 61, 224, 131, 114, 62, 60, 32, 169, 62, 114, 20, 106, 190, 94, 133, 143, 62, 148, 80, 21, 190, 82, 45, 155, 190, 59, 43, 173, 62, 87, 182, 130, 61, 208, 216, 95, 62, 35, 122, 146, 62, 129, 60, 131, 62, 236, 183, 8, 190, 76, 178, 49, 61, 250, 243, 22, 191, 165, 237, 188, 62, 144, 25, 95, 60, 84, 137, 229, 59, 48, 240, 11, 190, 202, 192, 30, 190, 49, 131, 178, 190, 11, 115, 58, 191, 105, 135, 229, 190, 184, 38, 183, 62, 82, 45, 215, 190, 29, 169, 246, 61, 121, 108, 189, 190, 229, 248, 49, 62, 239, 16, 126, 60, 79, 43, 149, 61, 238, 51, 210, 61, 155, 133, 186, 62, 37, 35, 214, 60, 227, 100, 249, 189, 188, 127, 101, 189, 208, 198, 124, 190, 81, 53, 44, 62, 197, 79, 22, 61, 84, 125, 164, 61, 88, 158, 225, 61, 15, 198, 30, 190, 165, 101, 83, 61, 28, 57, 27, 62, 230, 168, 56, 61, 237, 56, 170, 190, 211, 154, 80, 190, 12, 57, 189, 190, 40, 63, 175, 188, 94, 109, 236, 190, 106, 219, 161, 189, 73, 156, 203, 61, 89, 247, 160, 61, 73, 71, 199, 190, 170, 76, 31, 62, 177, 166, 48, 190, 157, 71, 117, 62, 152, 219, 221, 189, 105, 152, 99, 61, 51, 58, 108, 61, 11, 82, 104, 189, 167, 68, 1, 190, 195, 20, 89, 190, 232, 129, 32, 190, 255, 37, 142, 59, 184, 18, 234, 188, 130, 131, 204, 189, 255, 70, 80, 190, 114, 132, 220, 61, 130, 57, 244, 61, 156, 98, 139, 189, 139, 120, 13, 190, 202, 26, 33, 190, 138, 230, 15, 62, 51, 44, 57, 189, 108, 42, 154, 189, 87, 186, 187, 61, 113, 84, 217, 61, 202, 146, 84, 190, 236, 236, 209, 188, 27, 218, 136, 61, 15, 125, 147, 61, 239, 161, 20, 62, 89, 2, 19, 190, 24, 207, 130, 188, 218, 81, 90, 189, 54, 250, 47, 190, 125, 21, 30, 190, 97, 77, 104, 61, 47, 100, 100, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 123, 1, 190, 201, 139, 202, 60, 228, 162, 114, 62, 221, 115, 98, 60, 189, 91, 168, 62, 167, 154, 28, 62, 195, 231, 111, 62, 227, 77, 116, 189, 161, 245, 29, 190, 251, 29, 92, 189, 65, 125, 55, 62, 235, 179, 32, 190, 214, 253, 102, 61, 122, 244, 152, 61, 242, 134, 199, 60, 137, 68, 173, 61, 95, 67, 72, 61, 224, 135, 70, 190, 61, 72, 194, 61, 33, 146, 76, 190, 195, 154, 15, 190, 168, 46, 177, 62, 56, 131, 93, 62, 148, 158, 116, 61, 48, 121, 74, 62, 137, 232, 44, 189, 121, 151, 22, 190, 150, 160, 245, 61, 254, 50, 33, 189, 186, 28, 131, 62, 249, 35, 132, 62, 120, 207, 112, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 246, 129, 191, 120, 171, 231, 62, 240, 36, 201, 190, 137, 148, 9, 62, 247, 58, 30, 190, 171, 121, 123, 190, 47, 43, 160, 61, 125, 170, 141, 60, 63, 164, 253, 61, 97, 248, 221, 190, 164, 236, 47, 63, 121, 210, 7, 190, 81, 87, 132, 191, 99, 230, 132, 63, 221, 39, 52, 191, 154, 60, 208, 62, 125, 42, 185, 62, 70, 72, 49, 188, 119, 71, 14, 63, 231, 242, 20, 191, 57, 24, 59, 62, 69, 78, 10, 190, 7, 24, 224, 189, 250, 98, 91, 62, 113, 87, 1, 191, 117, 239, 122, 189, 0, 67, 43, 61, 68, 248, 165, 62, 53, 241, 41, 63, 205, 53, 39, 63, 68, 240, 106, 189, 95, 10, 124, 189, 129, 169, 124, 188, 25, 30, 61, 62, 235, 53, 55, 189, 87, 35, 3, 62, 110, 188, 172, 190, 249, 119, 158, 190, 67, 128, 17, 191, 224, 179, 191, 188, 10, 227, 241, 61, 139, 114, 97, 189, 94, 145, 221, 62, 133, 54, 151, 58, 123, 46, 57, 62, 120, 180, 133, 62, 230, 8, 168, 62, 223, 219, 176, 62, 245, 32, 157, 60, 9, 193, 193, 59, 225, 212, 19, 189, 84, 89, 38, 62, 1, 234, 122, 62, 128, 137, 67, 190, 39, 144, 198, 189, 228, 123, 184, 189, 52, 153, 235, 58, 45, 162, 46, 190, 217, 201, 140, 188, 28, 150, 4, 62, 99, 22, 47, 189, 89, 102, 143, 190, 73, 236, 106, 190, 29, 38, 205, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {125, 136, 218, 188, 153, 247, 89, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {250, 181, 149, 63, 73, 2, 72, 190, 196, 14, 47, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {170, 238, 137, 63, 175, 166, 247, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0082/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}