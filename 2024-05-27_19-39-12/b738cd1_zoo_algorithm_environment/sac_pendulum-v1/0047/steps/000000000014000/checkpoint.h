// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 164, 10, 63, 109, 82, 99, 191, 206, 110, 4, 191, 172, 108, 138, 61, 249, 237, 32, 191, 213, 151, 13, 62, 37, 4, 9, 63, 32, 39, 111, 62, 3, 34, 28, 63, 1, 173, 189, 62, 233, 74, 96, 190, 36, 213, 187, 61, 254, 253, 11, 63, 61, 252, 194, 190, 249, 165, 146, 190, 140, 222, 225, 62, 34, 66, 201, 190, 195, 6, 187, 62, 243, 236, 209, 190, 204, 72, 77, 191, 69, 125, 31, 61, 38, 26, 142, 60, 172, 21, 22, 63, 4, 255, 72, 60, 209, 252, 39, 191, 218, 29, 93, 61, 19, 150, 165, 62, 3, 253, 249, 190, 208, 26, 251, 190, 176, 230, 238, 189, 23, 57, 51, 191, 80, 211, 8, 191, 6, 37, 147, 190, 62, 224, 1, 187, 248, 126, 57, 190, 250, 32, 23, 188, 61, 149, 66, 63, 200, 20, 174, 63, 15, 152, 7, 63, 86, 12, 177, 190, 40, 200, 148, 63, 189, 79, 135, 62, 203, 249, 21, 191, 109, 221, 218, 63, 44, 55, 193, 62, 196, 242, 247, 190, 2, 73, 21, 63, 175, 81, 178, 190, 222, 102, 2, 63, 219, 166, 129, 63, 77, 103, 78, 190, 48, 179, 11, 62, 148, 197, 54, 191, 49, 242, 53, 62, 133, 145, 202, 62, 235, 62, 97, 191, 12, 248, 193, 190, 245, 160, 46, 62, 235, 31, 0, 63, 129, 187, 23, 63, 143, 161, 48, 191, 164, 20, 150, 191, 131, 132, 241, 190, 45, 156, 167, 190, 116, 68, 41, 63, 130, 189, 180, 62, 69, 183, 211, 62, 48, 252, 173, 190, 14, 26, 9, 62, 91, 194, 75, 189, 154, 209, 88, 189, 122, 111, 11, 61, 103, 4, 122, 190, 38, 151, 209, 63, 241, 51, 218, 62, 87, 84, 75, 190, 117, 106, 28, 63, 119, 205, 58, 62, 29, 135, 204, 190, 230, 52, 25, 63, 99, 243, 55, 62, 48, 184, 251, 62, 239, 8, 134, 63, 209, 103, 13, 63, 175, 110, 168, 62, 41, 78, 130, 63, 197, 57, 30, 190, 64, 29, 130, 190, 190, 18, 162, 191, 65, 130, 151, 190, 134, 176, 78, 190, 217, 14, 102, 189, 243, 199, 25, 63, 46, 6, 83, 191, 193, 30, 27, 62, 249, 216, 153, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 117, 76, 191, 66, 23, 6, 62, 75, 170, 84, 61, 150, 143, 139, 62, 33, 84, 113, 191, 80, 250, 154, 190, 199, 30, 175, 62, 34, 73, 33, 63, 88, 135, 124, 190, 234, 117, 196, 190, 171, 83, 45, 62, 139, 193, 147, 190, 55, 103, 220, 190, 95, 158, 128, 190, 189, 47, 132, 190, 46, 104, 150, 190, 49, 184, 123, 190, 147, 187, 80, 62, 137, 165, 138, 61, 194, 95, 53, 191, 124, 85, 158, 61, 149, 15, 71, 190, 27, 93, 240, 62, 182, 47, 201, 62, 210, 85, 172, 62, 25, 234, 207, 62, 7, 51, 182, 190, 190, 184, 33, 189, 246, 91, 99, 62, 98, 113, 237, 189, 117, 179, 208, 190, 144, 121, 241, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 101, 163, 190, 199, 174, 100, 190, 113, 38, 131, 61, 54, 80, 156, 187, 119, 243, 129, 191, 247, 252, 188, 61, 95, 18, 202, 59, 41, 16, 212, 62, 198, 1, 0, 62, 199, 27, 1, 63, 9, 125, 178, 61, 39, 68, 58, 189, 246, 210, 115, 62, 147, 149, 117, 191, 20, 148, 104, 191, 121, 36, 64, 189, 25, 212, 45, 62, 173, 50, 160, 189, 209, 68, 171, 190, 88, 145, 32, 189, 162, 83, 158, 59, 109, 151, 18, 191, 3, 228, 151, 190, 212, 12, 21, 60, 28, 85, 20, 190, 183, 233, 90, 62, 165, 127, 163, 191, 207, 13, 33, 61, 209, 80, 173, 60, 109, 145, 127, 62, 159, 128, 105, 190, 165, 221, 68, 62, 195, 246, 155, 60, 188, 188, 134, 190, 39, 133, 28, 190, 224, 54, 1, 190, 146, 21, 103, 191, 135, 247, 76, 190, 151, 124, 6, 62, 138, 72, 255, 61, 98, 155, 26, 62, 216, 246, 67, 61, 8, 132, 89, 59, 89, 122, 208, 61, 253, 70, 156, 189, 148, 84, 161, 190, 94, 226, 208, 190, 58, 99, 31, 190, 141, 67, 168, 61, 37, 248, 17, 190, 233, 147, 136, 189, 139, 19, 125, 189, 205, 120, 12, 62, 222, 191, 224, 190, 18, 14, 109, 190, 240, 0, 129, 60, 36, 109, 31, 189, 35, 50, 87, 62, 89, 122, 69, 191, 91, 128, 18, 189, 124, 47, 80, 60, 101, 248, 42, 61, 159, 100, 164, 189, 158, 40, 171, 189, 2, 92, 23, 190, 111, 83, 70, 189, 138, 193, 44, 62, 0, 86, 51, 189, 227, 179, 197, 190, 141, 83, 104, 62, 81, 94, 147, 188, 160, 17, 73, 190, 97, 77, 59, 60, 61, 113, 14, 63, 74, 212, 175, 62, 89, 57, 214, 61, 134, 209, 29, 63, 36, 69, 187, 189, 178, 145, 171, 190, 247, 136, 240, 61, 234, 237, 235, 190, 16, 164, 196, 190, 206, 234, 125, 190, 203, 112, 166, 62, 213, 104, 127, 62, 100, 205, 10, 190, 1, 164, 190, 60, 78, 142, 189, 59, 221, 145, 96, 61, 25, 198, 10, 189, 86, 154, 206, 190, 107, 41, 130, 62, 43, 5, 222, 189, 186, 213, 180, 62, 157, 81, 247, 189, 68, 180, 193, 190, 213, 64, 200, 190, 152, 94, 159, 62, 139, 169, 148, 61, 12, 52, 152, 61, 86, 46, 167, 191, 114, 198, 136, 62, 98, 120, 19, 191, 195, 227, 79, 62, 60, 52, 32, 191, 91, 236, 133, 62, 139, 32, 75, 189, 20, 118, 147, 61, 131, 183, 55, 190, 206, 220, 105, 60, 134, 182, 181, 190, 61, 152, 24, 62, 146, 176, 40, 61, 175, 0, 89, 190, 73, 229, 165, 59, 5, 199, 183, 190, 250, 23, 145, 190, 63, 171, 47, 61, 174, 135, 57, 190, 123, 121, 28, 187, 99, 139, 140, 62, 148, 90, 7, 63, 134, 230, 196, 58, 201, 249, 117, 189, 128, 69, 101, 62, 227, 109, 69, 190, 39, 178, 227, 189, 135, 182, 43, 191, 199, 227, 27, 189, 236, 188, 116, 61, 230, 148, 139, 62, 197, 79, 228, 61, 48, 132, 155, 191, 157, 227, 24, 62, 114, 255, 45, 190, 175, 172, 50, 62, 158, 135, 209, 61, 58, 201, 73, 62, 94, 22, 227, 61, 176, 49, 135, 61, 199, 41, 214, 62, 81, 204, 166, 190, 32, 104, 165, 190, 85, 122, 250, 189, 203, 39, 4, 189, 177, 229, 33, 190, 218, 151, 70, 190, 114, 176, 252, 61, 47, 164, 29, 62, 225, 246, 41, 190, 91, 171, 22, 190, 1, 47, 251, 61, 134, 220, 66, 190, 7, 157, 20, 61, 220, 197, 184, 190, 239, 2, 163, 62, 238, 45, 203, 188, 118, 122, 167, 62, 23, 217, 167, 188, 98, 130, 63, 190, 108, 71, 22, 190, 76, 74, 8, 62, 17, 92, 121, 62, 71, 73, 50, 62, 83, 125, 195, 61, 28, 254, 215, 59, 73, 41, 151, 61, 156, 148, 232, 188, 152, 224, 244, 190, 103, 104, 45, 191, 75, 25, 92, 189, 45, 196, 154, 61, 23, 223, 3, 62, 238, 143, 6, 62, 81, 146, 118, 62, 185, 236, 223, 190, 136, 124, 94, 62, 67, 79, 216, 61, 218, 221, 225, 61, 141, 152, 13, 188, 50, 49, 228, 61, 87, 137, 100, 188, 226, 59, 170, 62, 87, 52, 168, 62, 252, 45, 104, 190, 91, 45, 57, 190, 145, 24, 86, 190, 101, 32, 168, 62, 99, 74, 38, 189, 225, 80, 117, 189, 207, 177, 233, 189, 166, 239, 238, 189, 179, 48, 117, 189, 120, 224, 116, 62, 188, 52, 85, 62, 88, 10, 254, 61, 134, 77, 191, 190, 98, 141, 174, 62, 62, 183, 140, 190, 145, 157, 33, 62, 126, 131, 15, 189, 41, 236, 193, 189, 141, 182, 29, 191, 27, 75, 179, 61, 92, 204, 0, 191, 235, 214, 31, 190, 69, 240, 24, 191, 32, 116, 19, 190, 27, 128, 138, 62, 25, 42, 73, 62, 37, 179, 13, 62, 34, 41, 40, 190, 38, 100, 120, 191, 18, 138, 146, 190, 129, 16, 174, 59, 88, 53, 112, 62, 18, 94, 23, 191, 199, 191, 74, 190, 64, 120, 189, 190, 196, 93, 67, 189, 183, 8, 27, 189, 220, 182, 236, 191, 73, 161, 17, 61, 130, 155, 221, 190, 153, 30, 159, 62, 171, 126, 164, 62, 59, 150, 82, 190, 107, 114, 111, 62, 21, 68, 66, 62, 228, 133, 166, 190, 185, 40, 85, 189, 222, 220, 216, 61, 18, 147, 181, 62, 17, 140, 39, 191, 91, 190, 248, 189, 44, 85, 248, 61, 25, 70, 218, 190, 244, 244, 191, 61, 239, 112, 2, 63, 194, 208, 217, 61, 60, 251, 244, 62, 142, 70, 141, 62, 183, 135, 201, 62, 27, 10, 158, 190, 8, 29, 176, 189, 200, 68, 133, 60, 145, 171, 106, 62, 1, 76, 52, 61, 253, 242, 87, 60, 77, 243, 82, 190, 10, 82, 2, 62, 133, 169, 233, 189, 46, 250, 172, 61, 102, 161, 1, 191, 84, 65, 101, 62, 203, 37, 85, 62, 80, 175, 173, 190, 64, 113, 164, 189, 121, 20, 79, 62, 152, 85, 133, 189, 63, 77, 136, 191, 231, 28, 55, 62, 216, 79, 136, 191, 197, 236, 4, 62, 162, 56, 106, 190, 35, 92, 37, 190, 176, 17, 185, 190, 190, 160, 255, 61, 90, 58, 154, 189, 57, 213, 78, 189, 64, 126, 99, 62, 140, 15, 11, 62, 8, 169, 170, 62, 201, 60, 121, 190, 138, 45, 16, 62, 50, 123, 35, 190, 144, 71, 2, 191, 91, 212, 83, 61, 98, 181, 88, 61, 178, 211, 48, 61, 207, 1, 182, 61, 229, 99, 109, 62, 169, 15, 28, 189, 186, 132, 98, 61, 159, 239, 161, 62, 98, 13, 92, 191, 195, 161, 133, 61, 123, 82, 157, 190, 225, 15, 13, 189, 208, 193, 248, 61, 31, 178, 137, 190, 240, 202, 167, 62, 236, 244, 33, 190, 53, 247, 81, 59, 111, 241, 249, 61, 220, 5, 35, 190, 20, 96, 237, 189, 83, 119, 76, 191, 101, 3, 21, 191, 11, 245, 129, 188, 160, 111, 5, 191, 247, 13, 87, 188, 144, 165, 139, 60, 39, 1, 247, 190, 84, 200, 154, 62, 131, 87, 130, 62, 128, 193, 170, 62, 9, 170, 67, 190, 164, 100, 136, 190, 236, 234, 40, 190, 238, 122, 113, 62, 66, 115, 27, 62, 114, 32, 43, 191, 14, 87, 29, 191, 129, 253, 151, 61, 225, 0, 157, 190, 158, 132, 187, 189, 242, 92, 69, 190, 140, 129, 170, 61, 65, 229, 65, 62, 79, 151, 217, 189, 115, 200, 181, 190, 164, 228, 83, 190, 113, 39, 22, 62, 245, 210, 248, 190, 21, 2, 141, 190, 2, 8, 106, 62, 70, 116, 161, 62, 89, 254, 142, 62, 99, 128, 94, 191, 137, 194, 80, 190, 62, 95, 124, 188, 75, 234, 143, 190, 161, 72, 68, 189, 110, 56, 16, 62, 162, 207, 96, 191, 50, 110, 221, 62, 24, 93, 163, 189, 120, 111, 182, 62, 235, 237, 139, 190, 140, 174, 182, 190, 151, 223, 40, 62, 99, 246, 89, 61, 166, 80, 90, 61, 181, 72, 114, 62, 136, 71, 187, 62, 193, 200, 195, 61, 231, 183, 89, 61, 76, 244, 137, 190, 75, 195, 43, 191, 207, 219, 41, 62, 117, 88, 118, 62, 182, 143, 34, 190, 240, 51, 161, 61, 124, 23, 244, 189, 217, 74, 89, 62, 150, 198, 84, 188, 189, 96, 51, 61, 25, 27, 166, 189, 164, 38, 19, 61, 33, 105, 64, 189, 106, 231, 189, 190, 114, 217, 155, 61, 253, 22, 229, 189, 82, 147, 214, 190, 163, 18, 46, 189, 208, 182, 172, 60, 130, 160, 89, 190, 220, 161, 27, 61, 192, 0, 51, 62, 130, 39, 136, 62, 48, 149, 226, 61, 3, 203, 0, 190, 3, 179, 46, 190, 182, 9, 75, 62, 213, 97, 56, 62, 233, 80, 54, 190, 248, 191, 142, 61, 55, 183, 16, 190, 10, 116, 213, 189, 46, 161, 41, 190, 217, 92, 203, 60, 71, 18, 23, 60, 193, 3, 159, 190, 79, 177, 163, 189, 79, 106, 165, 61, 244, 255, 176, 60, 227, 247, 34, 188, 100, 73, 55, 191, 153, 196, 122, 188, 128, 221, 47, 191, 0, 101, 136, 62, 201, 248, 207, 190, 233, 175, 151, 189, 44, 104, 28, 190, 174, 237, 54, 189, 231, 6, 215, 190, 159, 116, 88, 190, 43, 165, 235, 190, 166, 189, 213, 61, 70, 214, 15, 60, 81, 188, 55, 190, 101, 107, 184, 60, 124, 139, 62, 190, 76, 238, 160, 189, 203, 48, 128, 190, 132, 42, 145, 61, 40, 239, 59, 62, 180, 226, 42, 191, 88, 241, 47, 189, 35, 242, 208, 189, 37, 37, 213, 189, 240, 105, 144, 62, 190, 225, 223, 190, 83, 247, 68, 190, 165, 250, 162, 188, 44, 74, 187, 190, 175, 235, 140, 190, 43, 200, 94, 62, 85, 91, 190, 188, 157, 250, 110, 191, 250, 229, 150, 62, 99, 29, 102, 189, 208, 187, 29, 62, 167, 202, 101, 62, 107, 136, 183, 62, 178, 113, 165, 187, 31, 195, 130, 188, 88, 238, 139, 60, 186, 88, 118, 191, 177, 118, 40, 191, 122, 69, 16, 62, 142, 92, 56, 62, 205, 8, 228, 190, 86, 224, 216, 190, 243, 166, 222, 189, 227, 215, 246, 61, 26, 167, 61, 191, 209, 108, 176, 189, 58, 38, 88, 62, 42, 184, 152, 190, 196, 181, 212, 62, 20, 51, 156, 191, 203, 94, 146, 61, 151, 137, 98, 60, 170, 63, 12, 62, 5, 192, 205, 190, 45, 228, 10, 190, 222, 217, 39, 191, 53, 184, 197, 61, 43, 61, 158, 189, 250, 69, 17, 62, 126, 226, 234, 190, 196, 187, 193, 61, 99, 170, 235, 62, 194, 81, 149, 189, 151, 69, 121, 190, 13, 37, 77, 61, 74, 180, 117, 62, 38, 108, 107, 189, 216, 161, 149, 190, 89, 248, 192, 61, 57, 71, 90, 62, 102, 48, 30, 190, 119, 100, 31, 190, 116, 109, 240, 62, 150, 18, 140, 189, 87, 184, 35, 190, 73, 189, 127, 61, 173, 220, 62, 190, 65, 68, 23, 62, 215, 212, 215, 60, 225, 208, 247, 190, 68, 230, 99, 190, 228, 206, 146, 190, 195, 11, 117, 189, 106, 184, 158, 190, 176, 127, 137, 189, 151, 46, 70, 61, 212, 117, 130, 190, 0, 35, 153, 190, 28, 118, 3, 62, 30, 158, 33, 189, 161, 69, 91, 190, 9, 20, 34, 188, 187, 58, 8, 63, 103, 18, 74, 191, 184, 203, 114, 189, 212, 65, 98, 190, 112, 55, 163, 189, 182, 47, 130, 189, 176, 217, 255, 188, 43, 178, 209, 62, 113, 64, 61, 189, 77, 206, 41, 59, 234, 77, 57, 62, 70, 8, 226, 62, 83, 218, 46, 190, 114, 32, 196, 191, 200, 201, 57, 62, 98, 186, 77, 189, 184, 3, 136, 190, 8, 253, 56, 61, 198, 160, 104, 190, 220, 200, 57, 185, 134, 136, 82, 190, 214, 188, 176, 190, 41, 210, 237, 61, 201, 145, 203, 62, 245, 171, 160, 189, 42, 106, 165, 189, 242, 193, 122, 190, 145, 55, 40, 190, 30, 135, 192, 62, 112, 53, 27, 190, 30, 58, 138, 62, 171, 193, 10, 61, 138, 13, 239, 189, 49, 106, 38, 62, 185, 227, 212, 188, 237, 206, 0, 190, 250, 143, 178, 190, 77, 41, 76, 62, 58, 215, 230, 189, 182, 175, 180, 190, 105, 114, 39, 190, 158, 167, 20, 189, 237, 50, 125, 187, 11, 233, 156, 60, 18, 146, 225, 188, 48, 191, 34, 61, 167, 87, 150, 190, 63, 157, 25, 62, 26, 96, 86, 190, 216, 134, 149, 62, 8, 144, 80, 61, 217, 138, 135, 190, 32, 55, 200, 188, 247, 232, 39, 61, 84, 218, 132, 190, 31, 197, 23, 62, 245, 52, 112, 190, 247, 198, 154, 62, 45, 59, 88, 62, 195, 127, 2, 190, 84, 35, 26, 191, 175, 87, 202, 189, 253, 58, 239, 189, 20, 137, 97, 191, 214, 4, 65, 190, 1, 255, 90, 191, 178, 223, 143, 61, 85, 20, 7, 190, 253, 159, 144, 61, 187, 59, 79, 188, 16, 115, 30, 190, 254, 14, 17, 59, 8, 8, 194, 60, 187, 209, 108, 61, 242, 220, 160, 61, 147, 171, 49, 61, 196, 104, 49, 191, 3, 17, 252, 190, 142, 250, 11, 190, 53, 81, 154, 190, 175, 226, 33, 190, 118, 94, 104, 190, 117, 219, 231, 61, 162, 151, 214, 62, 194, 152, 168, 62, 245, 211, 144, 188, 172, 35, 177, 189, 232, 187, 245, 62, 180, 129, 85, 191, 151, 87, 237, 188, 141, 183, 248, 190, 64, 174, 219, 189, 227, 227, 100, 61, 93, 149, 88, 62, 164, 18, 89, 62, 248, 101, 66, 189, 112, 255, 188, 61, 146, 129, 15, 190, 47, 162, 38, 62, 193, 92, 47, 191, 69, 61, 145, 190, 199, 9, 180, 61, 157, 218, 188, 61, 224, 125, 180, 60, 107, 179, 113, 60, 71, 105, 61, 62, 45, 11, 142, 62, 20, 220, 131, 62, 30, 220, 174, 62, 143, 238, 164, 188, 30, 149, 152, 62, 121, 212, 199, 61, 55, 255, 242, 190, 213, 164, 201, 61, 199, 147, 133, 62, 91, 160, 145, 190, 112, 41, 139, 190, 170, 42, 4, 191, 118, 20, 126, 61, 92, 15, 175, 62, 239, 87, 15, 190, 73, 178, 51, 190, 102, 170, 203, 190, 19, 115, 149, 189, 118, 31, 7, 62, 55, 215, 72, 62, 188, 150, 118, 61, 170, 40, 23, 191, 30, 217, 231, 189, 78, 81, 13, 62, 82, 54, 27, 62, 235, 121, 127, 60, 94, 32, 190, 60, 126, 48, 175, 60, 167, 206, 39, 189, 114, 164, 213, 189, 1, 237, 254, 61, 173, 255, 32, 189, 24, 78, 203, 61, 228, 116, 166, 189, 179, 69, 212, 61, 59, 192, 28, 190, 27, 2, 109, 62, 10, 30, 176, 61, 200, 156, 158, 61, 52, 100, 140, 188, 201, 199, 147, 61, 231, 123, 204, 60, 7, 155, 21, 62, 125, 27, 231, 61, 79, 85, 108, 189, 158, 179, 131, 61, 62, 46, 186, 59, 212, 212, 70, 186, 117, 105, 191, 189, 31, 106, 6, 190, 187, 140, 49, 190, 216, 52, 0, 189, 76, 72, 14, 190, 216, 179, 141, 190, 13, 250, 225, 190, 251, 94, 64, 190, 226, 90, 179, 62, 47, 169, 229, 61, 169, 26, 80, 62, 48, 21, 111, 62, 161, 171, 164, 60, 227, 183, 28, 191, 54, 207, 166, 190, 251, 42, 18, 190, 4, 33, 168, 62, 45, 213, 3, 62, 207, 176, 142, 190, 107, 71, 105, 62, 112, 206, 213, 190, 236, 62, 7, 188, 153, 129, 190, 190, 131, 222, 17, 62, 100, 79, 2, 62, 85, 208, 142, 190, 88, 144, 36, 61, 213, 26, 4, 191, 76, 49, 48, 190, 101, 8, 17, 62, 40, 243, 166, 190, 177, 50, 48, 189, 141, 12, 207, 189, 221, 252, 1, 191, 174, 109, 146, 189, 78, 104, 115, 62, 58, 238, 222, 189, 160, 58, 32, 191, 235, 188, 166, 62, 243, 122, 79, 191, 39, 48, 239, 189, 179, 124, 93, 190, 4, 224, 214, 188, 49, 43, 208, 61, 123, 4, 41, 190, 194, 123, 103, 62, 157, 66, 3, 190, 182, 29, 29, 190, 180, 204, 149, 189, 165, 232, 72, 62, 57, 41, 132, 190, 252, 177, 44, 190, 28, 244, 45, 62, 253, 89, 212, 60, 38, 108, 21, 62, 43, 151, 35, 190, 211, 108, 112, 60, 229, 2, 90, 62, 225, 12, 58, 62, 94, 57, 27, 190, 252, 9, 137, 62, 124, 19, 147, 62, 32, 160, 248, 189, 21, 109, 197, 189, 39, 7, 128, 189, 91, 54, 23, 62, 42, 239, 3, 63, 37, 73, 143, 190, 16, 147, 3, 62, 96, 250, 9, 63, 17, 6, 249, 189, 23, 154, 145, 62, 98, 60, 115, 189, 16, 65, 91, 60, 168, 75, 5, 191, 163, 210, 21, 189, 166, 108, 136, 61, 79, 38, 9, 191, 151, 234, 108, 62, 195, 211, 224, 62, 229, 38, 133, 191, 109, 12, 30, 190, 203, 79, 154, 61, 243, 197, 172, 62, 173, 191, 128, 190, 199, 111, 42, 190, 147, 191, 36, 189, 40, 79, 31, 62, 111, 99, 158, 62, 209, 95, 132, 62, 242, 113, 47, 190, 114, 202, 135, 62, 6, 206, 194, 190, 22, 109, 61, 191, 64, 9, 203, 190, 160, 108, 167, 62, 118, 31, 162, 61, 212, 137, 105, 61, 244, 156, 176, 189, 82, 195, 21, 190, 138, 156, 207, 61, 11, 127, 42, 189, 151, 98, 42, 190, 249, 119, 154, 60, 91, 36, 144, 190, 58, 217, 36, 62, 55, 140, 208, 189, 93, 66, 83, 190, 34, 190, 221, 189, 161, 55, 145, 61, 59, 198, 39, 190, 201, 252, 161, 189, 107, 58, 210, 61, 207, 229, 236, 61, 25, 33, 61, 190, 133, 20, 118, 190, 181, 206, 14, 190, 111, 73, 183, 61, 125, 161, 240, 61, 147, 203, 191, 189, 248, 60, 80, 190, 224, 126, 128, 189, 114, 248, 15, 189, 155, 43, 68, 60, 29, 51, 145, 61, 224, 112, 185, 61, 247, 108, 114, 190, 95, 110, 42, 62, 101, 125, 254, 188, 118, 14, 0, 62, 141, 188, 3, 190, 132, 11, 129, 187, 33, 120, 195, 189, 210, 168, 10, 62, 152, 224, 231, 60, 190, 63, 11, 190, 170, 38, 8, 62, 251, 157, 216, 61, 20, 69, 32, 62, 228, 108, 139, 189, 48, 205, 94, 61, 234, 3, 18, 188, 228, 253, 88, 189, 79, 92, 49, 190, 0, 53, 214, 189, 147, 182, 240, 61, 120, 229, 44, 189, 143, 85, 34, 189, 155, 103, 101, 61, 101, 186, 28, 190, 236, 253, 5, 62, 0, 154, 116, 189, 68, 250, 135, 189, 20, 229, 62, 190, 46, 7, 85, 61, 216, 62, 251, 189, 137, 22, 232, 61, 136, 198, 237, 189, 193, 178, 72, 61, 219, 7, 226, 189, 254, 45, 19, 190, 43, 246, 241, 188, 38, 51, 220, 188, 206, 84, 89, 189, 35, 86, 161, 60, 51, 132, 1, 62, 10, 255, 228, 187, 241, 125, 196, 189, 173, 156, 52, 190, 22, 105, 29, 62, 248, 62, 52, 190, 18, 254, 247, 61, 143, 83, 7, 61, 249, 55, 3, 190, 82, 179, 19, 62, 206, 254, 194, 189, 150, 248, 156, 189, 175, 65, 15, 189, 61, 82, 29, 190, 212, 131, 122, 189, 174, 62, 145, 60, 111, 224, 157, 189, 152, 193, 231, 189, 153, 120, 25, 190, 221, 143, 146, 61, 57, 235, 33, 190, 42, 251, 243, 61, 243, 218, 200, 61, 185, 121, 129, 61, 161, 110, 244, 61, 36, 176, 80, 188, 171, 9, 160, 61, 14, 163, 217, 189, 239, 22, 232, 62, 124, 13, 137, 187, 247, 9, 139, 190, 158, 68, 118, 62, 200, 167, 48, 190, 134, 253, 253, 190, 168, 14, 183, 62, 107, 104, 71, 61, 51, 65, 15, 61, 218, 185, 127, 191, 110, 199, 24, 62, 38, 226, 230, 61, 26, 21, 204, 190, 121, 52, 156, 190, 65, 116, 53, 62, 155, 197, 247, 190, 226, 40, 101, 62, 136, 158, 59, 190, 171, 93, 131, 62, 128, 16, 199, 189, 105, 101, 29, 190, 45, 50, 130, 59, 186, 46, 14, 62, 54, 3, 203, 188, 166, 204, 187, 61, 62, 97, 41, 62, 10, 195, 44, 190, 197, 68, 35, 191, 169, 185, 143, 190, 179, 207, 231, 190, 62, 58, 193, 189, 170, 140, 157, 190, 74, 101, 229, 188, 115, 161, 115, 190, 31, 126, 129, 62, 138, 35, 5, 190, 124, 127, 183, 189, 146, 78, 83, 62, 128, 206, 56, 61, 181, 206, 71, 62, 70, 221, 226, 62, 22, 240, 182, 62, 138, 2, 43, 190, 161, 27, 228, 59, 226, 178, 93, 62, 206, 72, 145, 191, 31, 142, 86, 191, 42, 145, 17, 190, 37, 86, 94, 186, 204, 235, 118, 190, 33, 165, 2, 190, 198, 223, 149, 62, 199, 10, 10, 62, 44, 152, 204, 188, 18, 39, 170, 190, 176, 140, 44, 62, 6, 6, 60, 190, 6, 64, 205, 188, 56, 28, 108, 191, 129, 80, 136, 62, 49, 235, 13, 186, 56, 187, 142, 62, 15, 2, 87, 190, 132, 170, 10, 61, 203, 230, 116, 60, 196, 79, 188, 60, 155, 41, 72, 61, 226, 129, 24, 62, 250, 126, 84, 190, 211, 67, 95, 189, 125, 248, 90, 62, 122, 253, 96, 62, 14, 244, 29, 189, 91, 94, 31, 191, 21, 191, 133, 188, 24, 140, 208, 187, 12, 219, 255, 190, 37, 64, 162, 189, 142, 159, 66, 61, 3, 112, 20, 190, 38, 195, 250, 60, 165, 111, 189, 61, 153, 30, 4, 62, 225, 76, 209, 60, 82, 53, 118, 62, 162, 81, 45, 189, 34, 183, 168, 62, 6, 151, 160, 62, 196, 42, 213, 190, 142, 176, 243, 61, 131, 183, 138, 61, 254, 185, 68, 190, 161, 238, 33, 190, 101, 214, 54, 190, 8, 76, 187, 61, 158, 170, 222, 186, 241, 103, 135, 62, 154, 245, 157, 61, 217, 136, 93, 61, 119, 140, 202, 60, 16, 134, 138, 61, 148, 231, 64, 190, 183, 35, 37, 62, 105, 43, 166, 189, 198, 116, 167, 188, 232, 110, 250, 190, 19, 160, 40, 62, 230, 100, 62, 189, 28, 159, 243, 60, 67, 158, 89, 61, 153, 147, 88, 188, 238, 176, 19, 191, 230, 99, 208, 61, 132, 32, 184, 187, 216, 80, 26, 62, 68, 31, 35, 190, 2, 114, 241, 61, 243, 39, 19, 189, 174, 18, 12, 62, 198, 113, 19, 190, 60, 125, 18, 62, 82, 114, 10, 62, 182, 0, 2, 190, 111, 36, 59, 190, 55, 189, 174, 190, 202, 84, 41, 62, 10, 131, 134, 60, 171, 3, 137, 188, 103, 177, 64, 190, 20, 29, 171, 61, 2, 224, 147, 60, 152, 156, 4, 61, 240, 84, 94, 191, 27, 75, 138, 62, 254, 61, 145, 191, 134, 103, 131, 62, 212, 45, 82, 61, 97, 242, 142, 189, 19, 96, 55, 190, 87, 117, 106, 61, 200, 56, 158, 189, 90, 202, 37, 190, 224, 243, 128, 190, 40, 89, 178, 188, 66, 164, 155, 62, 148, 165, 6, 60, 8, 114, 249, 60, 180, 228, 158, 62, 147, 198, 177, 190, 13, 182, 34, 62, 119, 78, 153, 61, 170, 233, 5, 62, 206, 254, 238, 189, 16, 192, 89, 189, 234, 64, 180, 187, 179, 179, 150, 62, 27, 57, 135, 62, 7, 212, 124, 191, 225, 60, 118, 62, 179, 240, 165, 190, 151, 38, 204, 190, 172, 146, 13, 189, 15, 153, 59, 62, 77, 21, 158, 60, 171, 172, 98, 191, 212, 248, 228, 62, 88, 245, 63, 190, 68, 68, 124, 61, 144, 255, 188, 189, 61, 177, 236, 62, 127, 66, 211, 61, 60, 175, 194, 189, 25, 29, 239, 62, 66, 239, 63, 189, 173, 250, 66, 190, 54, 96, 4, 62, 18, 87, 248, 188, 225, 174, 99, 190, 176, 161, 184, 190, 31, 209, 153, 62, 32, 182, 10, 61, 168, 179, 176, 189, 88, 175, 214, 189, 89, 94, 95, 61, 86, 183, 119, 190, 66, 250, 185, 189, 56, 97, 177, 190, 130, 223, 174, 61, 106, 224, 127, 62, 236, 132, 17, 62, 13, 169, 82, 189, 179, 115, 185, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {187, 203, 143, 62, 198, 223, 125, 62, 155, 94, 32, 190, 49, 188, 60, 62, 230, 211, 154, 189, 80, 160, 32, 62, 234, 144, 99, 62, 78, 235, 6, 189, 196, 53, 58, 62, 212, 61, 164, 189, 156, 234, 75, 61, 224, 25, 139, 62, 214, 104, 53, 188, 91, 209, 180, 62, 36, 72, 128, 189, 161, 155, 170, 190, 248, 174, 156, 62, 26, 211, 65, 62, 0, 155, 61, 62, 231, 6, 35, 62, 11, 67, 54, 62, 65, 37, 98, 190, 183, 161, 48, 62, 78, 40, 37, 190, 11, 120, 171, 189, 201, 50, 155, 189, 45, 58, 12, 61, 203, 197, 81, 62, 188, 240, 194, 61, 50, 249, 147, 61, 105, 119, 11, 190, 166, 123, 78, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {188, 219, 87, 191, 12, 21, 173, 190, 180, 230, 13, 191, 212, 66, 11, 191, 178, 75, 216, 190, 210, 6, 27, 62, 153, 91, 233, 62, 67, 79, 14, 63, 205, 217, 197, 190, 0, 77, 84, 191, 228, 216, 154, 62, 134, 48, 45, 62, 247, 130, 144, 189, 146, 232, 89, 191, 13, 215, 246, 62, 19, 111, 164, 63, 220, 24, 136, 62, 154, 8, 100, 191, 32, 229, 163, 62, 45, 41, 71, 189, 159, 242, 145, 62, 21, 63, 92, 189, 75, 84, 131, 63, 75, 155, 23, 189, 134, 37, 29, 62, 164, 224, 230, 61, 232, 115, 7, 63, 76, 186, 177, 190, 88, 71, 11, 62, 58, 42, 205, 188, 254, 148, 135, 190, 236, 171, 211, 190, 162, 116, 120, 62, 60, 178, 6, 190, 172, 43, 172, 61, 90, 111, 140, 189, 114, 157, 229, 189, 178, 89, 132, 190, 214, 126, 217, 190, 128, 24, 130, 62, 170, 188, 181, 190, 77, 118, 212, 62, 27, 43, 143, 190, 81, 128, 38, 190, 85, 85, 58, 191, 148, 236, 24, 189, 19, 246, 161, 62, 149, 200, 112, 62, 188, 134, 210, 189, 96, 12, 133, 62, 30, 252, 20, 190, 124, 69, 12, 190, 1, 201, 125, 190, 159, 69, 14, 63, 72, 62, 164, 62, 56, 105, 210, 61, 89, 45, 251, 189, 23, 234, 179, 61, 200, 195, 20, 62, 85, 148, 129, 60, 26, 179, 192, 190, 219, 15, 49, 190, 89, 250, 136, 190, 27, 9, 140, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {88, 39, 205, 61, 208, 83, 143, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {121, 120, 189, 62, 53, 200, 186, 63, 110, 254, 136, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {132, 156, 194, 191, 120, 158, 56, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0047/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}