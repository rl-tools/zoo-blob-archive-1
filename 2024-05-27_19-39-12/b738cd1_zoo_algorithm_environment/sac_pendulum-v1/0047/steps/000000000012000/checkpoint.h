// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {243, 134, 22, 63, 176, 148, 93, 191, 54, 19, 4, 191, 69, 243, 133, 61, 92, 153, 33, 191, 90, 227, 7, 62, 213, 193, 12, 63, 156, 45, 122, 62, 96, 142, 25, 63, 74, 229, 198, 62, 139, 194, 121, 190, 157, 163, 208, 61, 146, 33, 37, 63, 56, 121, 190, 190, 57, 162, 150, 190, 234, 154, 223, 62, 56, 66, 176, 190, 187, 83, 180, 62, 12, 142, 217, 190, 214, 255, 56, 191, 6, 174, 254, 60, 88, 246, 248, 60, 89, 55, 20, 63, 176, 158, 218, 183, 183, 114, 24, 191, 128, 18, 142, 61, 190, 124, 169, 62, 89, 52, 226, 190, 159, 99, 235, 190, 226, 109, 233, 189, 108, 183, 47, 191, 108, 75, 221, 190, 152, 200, 153, 190, 62, 224, 1, 187, 248, 126, 57, 190, 250, 32, 23, 188, 66, 208, 62, 63, 59, 31, 171, 63, 28, 61, 9, 63, 125, 145, 173, 190, 38, 31, 141, 63, 242, 97, 135, 62, 20, 227, 24, 191, 21, 238, 215, 63, 207, 132, 183, 62, 131, 58, 194, 190, 156, 37, 8, 63, 239, 15, 188, 190, 97, 83, 11, 63, 214, 136, 115, 63, 25, 29, 71, 190, 111, 210, 16, 62, 121, 64, 50, 191, 209, 48, 73, 62, 121, 26, 209, 62, 250, 60, 93, 191, 160, 189, 191, 190, 15, 159, 22, 62, 85, 133, 247, 62, 109, 152, 26, 63, 139, 50, 31, 191, 243, 199, 141, 191, 37, 1, 247, 190, 2, 9, 172, 190, 136, 62, 43, 63, 58, 11, 167, 62, 71, 236, 215, 62, 230, 179, 192, 190, 150, 174, 24, 62, 135, 17, 103, 59, 178, 247, 38, 189, 37, 36, 3, 61, 216, 0, 100, 190, 178, 198, 200, 63, 231, 107, 224, 62, 92, 49, 76, 190, 51, 219, 25, 63, 76, 132, 42, 62, 91, 232, 176, 190, 8, 93, 16, 63, 99, 135, 61, 62, 178, 127, 252, 62, 116, 81, 130, 63, 219, 246, 14, 63, 243, 166, 172, 62, 21, 210, 127, 63, 118, 126, 56, 190, 71, 105, 143, 190, 148, 215, 159, 191, 36, 128, 140, 190, 166, 128, 41, 190, 45, 212, 110, 189, 148, 152, 26, 63, 239, 27, 65, 191, 249, 41, 204, 61, 29, 112, 166, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {235, 190, 70, 191, 134, 77, 225, 61, 56, 153, 167, 61, 108, 199, 141, 62, 90, 234, 100, 191, 199, 72, 151, 190, 123, 106, 194, 62, 189, 25, 38, 63, 115, 227, 76, 190, 131, 231, 198, 190, 96, 84, 92, 62, 139, 193, 147, 190, 23, 99, 220, 190, 108, 142, 137, 190, 50, 214, 89, 190, 29, 239, 160, 190, 3, 96, 78, 190, 107, 186, 76, 62, 21, 222, 145, 61, 218, 144, 38, 191, 52, 51, 197, 61, 75, 124, 94, 190, 23, 90, 238, 62, 20, 81, 220, 62, 198, 92, 169, 62, 138, 162, 205, 62, 143, 135, 160, 190, 175, 247, 167, 188, 60, 181, 87, 62, 96, 142, 6, 190, 141, 187, 209, 190, 7, 79, 222, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 167, 162, 190, 169, 193, 97, 190, 113, 38, 138, 61, 213, 129, 240, 187, 101, 34, 132, 191, 162, 6, 179, 61, 98, 198, 134, 61, 133, 255, 211, 62, 105, 84, 219, 61, 30, 112, 224, 62, 14, 115, 241, 61, 39, 68, 58, 189, 188, 72, 117, 62, 241, 227, 86, 191, 210, 93, 86, 191, 55, 128, 170, 188, 97, 62, 55, 62, 40, 14, 152, 189, 54, 185, 172, 190, 227, 89, 18, 61, 145, 67, 31, 61, 85, 160, 6, 191, 82, 252, 151, 190, 49, 88, 196, 59, 65, 1, 31, 190, 209, 87, 91, 62, 203, 63, 164, 191, 181, 207, 40, 61, 247, 148, 249, 60, 145, 56, 132, 62, 254, 182, 39, 190, 206, 6, 38, 62, 13, 34, 118, 60, 34, 46, 54, 190, 99, 7, 237, 189, 89, 68, 242, 189, 51, 32, 101, 191, 248, 17, 76, 190, 67, 137, 205, 61, 29, 9, 231, 61, 69, 245, 45, 61, 115, 133, 141, 188, 216, 48, 134, 60, 89, 122, 208, 61, 75, 163, 199, 189, 195, 92, 92, 190, 159, 178, 177, 190, 144, 134, 248, 189, 242, 240, 171, 61, 36, 54, 56, 189, 228, 75, 154, 189, 65, 235, 123, 189, 57, 173, 27, 62, 140, 50, 224, 190, 171, 225, 99, 190, 97, 21, 120, 187, 244, 146, 158, 189, 226, 113, 33, 62, 182, 60, 86, 191, 127, 132, 41, 189, 84, 12, 30, 60, 238, 39, 163, 60, 134, 156, 87, 190, 147, 99, 22, 190, 15, 102, 41, 190, 240, 198, 94, 189, 59, 246, 35, 62, 89, 237, 78, 189, 88, 98, 192, 190, 168, 230, 86, 62, 69, 230, 153, 188, 87, 212, 16, 190, 143, 88, 45, 58, 41, 194, 18, 63, 163, 212, 177, 62, 89, 57, 214, 61, 133, 60, 22, 63, 96, 38, 233, 188, 230, 38, 137, 190, 106, 241, 30, 62, 147, 148, 185, 190, 18, 95, 197, 190, 65, 163, 137, 190, 89, 137, 157, 62, 137, 129, 122, 62, 40, 60, 11, 190, 116, 118, 167, 60, 155, 96, 230, 59, 162, 105, 123, 61, 111, 50, 164, 188, 243, 44, 175, 190, 214, 123, 121, 62, 174, 169, 94, 189, 231, 130, 170, 62, 176, 136, 9, 190, 32, 219, 185, 190, 254, 107, 185, 190, 0, 172, 146, 62, 173, 137, 153, 61, 103, 184, 149, 61, 229, 29, 175, 191, 14, 114, 114, 62, 141, 165, 16, 191, 207, 164, 76, 62, 79, 96, 19, 191, 250, 205, 117, 62, 148, 66, 165, 187, 20, 118, 147, 61, 222, 156, 36, 190, 177, 202, 198, 59, 135, 224, 193, 190, 239, 57, 55, 62, 164, 59, 54, 61, 129, 5, 102, 190, 185, 38, 75, 60, 4, 101, 128, 190, 72, 76, 85, 190, 75, 18, 80, 61, 11, 125, 57, 190, 99, 129, 32, 188, 117, 73, 126, 62, 17, 237, 2, 63, 224, 92, 70, 189, 64, 245, 90, 189, 108, 33, 108, 62, 14, 183, 169, 189, 20, 231, 193, 188, 249, 102, 36, 191, 21, 39, 25, 189, 203, 175, 48, 61, 167, 183, 135, 62, 165, 83, 214, 61, 181, 136, 148, 191, 200, 17, 2, 62, 255, 86, 29, 190, 99, 91, 77, 62, 31, 155, 182, 61, 207, 215, 38, 62, 63, 31, 243, 61, 176, 49, 135, 61, 167, 231, 200, 62, 61, 226, 149, 190, 22, 105, 144, 190, 227, 252, 172, 189, 108, 92, 143, 60, 202, 88, 45, 190, 100, 133, 67, 190, 44, 48, 207, 61, 142, 125, 30, 62, 244, 35, 55, 190, 227, 4, 27, 190, 92, 126, 2, 62, 239, 103, 67, 190, 244, 14, 117, 61, 88, 27, 174, 190, 212, 122, 158, 62, 68, 160, 132, 60, 153, 121, 151, 62, 34, 76, 7, 189, 73, 212, 53, 190, 51, 169, 18, 190, 169, 41, 23, 62, 122, 7, 132, 62, 153, 233, 57, 62, 126, 25, 156, 61, 178, 43, 26, 61, 14, 246, 120, 61, 68, 128, 17, 189, 254, 220, 230, 190, 81, 253, 33, 191, 80, 15, 80, 189, 45, 196, 154, 61, 246, 118, 32, 62, 44, 164, 208, 61, 223, 192, 79, 62, 122, 192, 202, 190, 198, 77, 112, 62, 104, 229, 238, 61, 233, 99, 232, 61, 7, 161, 214, 60, 8, 215, 218, 61, 123, 172, 53, 60, 95, 193, 172, 62, 148, 15, 168, 62, 198, 25, 99, 190, 114, 42, 69, 190, 235, 71, 106, 190, 101, 245, 174, 62, 10, 185, 19, 189, 205, 129, 137, 189, 216, 173, 170, 189, 76, 152, 214, 189, 97, 143, 120, 189, 97, 153, 112, 62, 250, 252, 80, 62, 68, 238, 247, 61, 160, 186, 155, 190, 248, 160, 172, 62, 94, 100, 157, 190, 191, 103, 29, 62, 113, 100, 250, 59, 41, 236, 193, 189, 190, 195, 4, 191, 27, 75, 179, 61, 254, 237, 245, 190, 27, 185, 27, 190, 231, 118, 254, 190, 230, 73, 20, 190, 138, 213, 141, 62, 12, 118, 66, 62, 172, 82, 15, 62, 23, 159, 23, 190, 94, 177, 94, 191, 96, 38, 83, 190, 14, 225, 0, 58, 210, 73, 109, 62, 210, 90, 8, 191, 95, 52, 76, 190, 38, 207, 187, 190, 58, 89, 39, 189, 211, 221, 36, 189, 214, 2, 221, 191, 154, 39, 50, 61, 239, 16, 210, 190, 164, 190, 149, 62, 189, 56, 169, 62, 107, 205, 87, 190, 192, 26, 112, 62, 195, 144, 112, 62, 39, 103, 160, 190, 187, 166, 129, 189, 220, 48, 200, 61, 208, 79, 172, 62, 188, 60, 30, 191, 1, 136, 20, 190, 44, 85, 248, 61, 90, 46, 216, 190, 116, 212, 158, 61, 141, 178, 253, 62, 187, 83, 133, 61, 78, 19, 233, 62, 192, 142, 143, 62, 24, 121, 201, 62, 246, 198, 163, 190, 95, 115, 236, 189, 44, 121, 254, 59, 150, 168, 104, 62, 223, 164, 70, 61, 175, 77, 171, 60, 143, 150, 81, 190, 163, 94, 231, 61, 156, 3, 243, 189, 26, 61, 131, 61, 147, 252, 245, 190, 243, 34, 83, 62, 252, 198, 53, 62, 96, 223, 155, 190, 164, 215, 4, 190, 90, 134, 68, 62, 154, 86, 138, 189, 207, 104, 134, 191, 229, 216, 251, 61, 176, 113, 138, 191, 224, 81, 0, 62, 189, 11, 104, 190, 34, 203, 36, 190, 245, 194, 176, 190, 190, 160, 255, 61, 48, 145, 137, 189, 93, 23, 176, 189, 176, 36, 58, 62, 72, 47, 16, 62, 32, 205, 175, 62, 133, 90, 139, 190, 23, 8, 32, 62, 178, 110, 15, 190, 115, 187, 225, 190, 222, 1, 13, 61, 235, 231, 78, 61, 95, 236, 16, 61, 96, 220, 129, 61, 22, 173, 82, 62, 65, 113, 191, 189, 77, 153, 80, 61, 46, 147, 166, 62, 137, 222, 15, 191, 111, 4, 184, 61, 17, 250, 165, 190, 31, 184, 219, 60, 238, 218, 20, 62, 129, 206, 116, 190, 155, 161, 164, 62, 239, 229, 8, 190, 45, 19, 29, 61, 117, 200, 1, 62, 189, 122, 48, 190, 25, 16, 16, 190, 50, 172, 67, 191, 68, 237, 3, 191, 11, 245, 129, 188, 92, 173, 0, 191, 247, 13, 87, 188, 144, 165, 139, 60, 21, 231, 170, 190, 234, 57, 138, 62, 103, 134, 143, 62, 6, 81, 166, 62, 15, 10, 23, 190, 187, 199, 104, 190, 212, 189, 33, 190, 235, 151, 107, 62, 75, 94, 20, 62, 179, 155, 40, 191, 44, 7, 30, 191, 129, 253, 151, 61, 114, 59, 145, 190, 61, 231, 243, 189, 163, 118, 64, 190, 7, 126, 185, 61, 119, 187, 53, 62, 28, 3, 199, 189, 104, 164, 173, 190, 171, 135, 79, 190, 193, 170, 30, 62, 77, 127, 192, 190, 254, 183, 122, 190, 117, 106, 72, 62, 42, 86, 154, 62, 120, 161, 137, 62, 140, 8, 99, 191, 242, 119, 25, 190, 62, 95, 124, 188, 170, 176, 137, 190, 179, 68, 102, 189, 87, 194, 2, 62, 218, 148, 114, 191, 72, 93, 212, 62, 247, 71, 141, 189, 82, 165, 182, 62, 211, 55, 129, 190, 135, 25, 146, 190, 179, 208, 44, 62, 230, 192, 113, 61, 33, 75, 80, 61, 127, 177, 113, 62, 79, 209, 177, 62, 217, 77, 185, 61, 123, 232, 111, 61, 24, 50, 147, 190, 167, 123, 9, 191, 156, 172, 51, 62, 24, 41, 106, 62, 87, 128, 38, 190, 21, 217, 143, 61, 61, 206, 252, 189, 238, 202, 87, 62, 81, 125, 77, 189, 231, 99, 30, 61, 8, 162, 229, 189, 129, 218, 250, 60, 152, 132, 174, 188, 126, 236, 153, 190, 175, 217, 173, 61, 253, 22, 229, 189, 97, 252, 202, 190, 84, 255, 38, 189, 28, 209, 185, 60, 128, 0, 84, 190, 166, 66, 30, 61, 220, 161, 40, 62, 113, 199, 135, 62, 129, 170, 229, 61, 237, 81, 251, 189, 70, 217, 249, 189, 28, 104, 71, 62, 14, 36, 53, 62, 220, 197, 4, 190, 197, 96, 138, 61, 79, 19, 23, 190, 8, 173, 203, 189, 50, 51, 49, 190, 186, 167, 4, 61, 172, 228, 155, 59, 55, 161, 159, 190, 196, 50, 165, 189, 58, 169, 5, 188, 241, 35, 13, 60, 204, 92, 116, 60, 253, 45, 47, 191, 125, 172, 52, 190, 124, 154, 64, 191, 30, 233, 138, 62, 201, 248, 207, 190, 200, 10, 196, 189, 106, 58, 44, 190, 174, 237, 54, 189, 81, 207, 200, 190, 224, 179, 67, 190, 182, 43, 210, 190, 213, 129, 143, 61, 63, 73, 11, 59, 16, 0, 102, 190, 157, 204, 25, 61, 124, 139, 62, 190, 91, 229, 157, 189, 203, 48, 128, 190, 187, 214, 191, 61, 49, 11, 77, 62, 66, 198, 21, 191, 35, 240, 234, 188, 35, 242, 208, 189, 177, 85, 200, 189, 62, 167, 143, 62, 10, 117, 201, 190, 83, 247, 68, 190, 165, 250, 162, 188, 37, 92, 185, 190, 138, 224, 143, 190, 27, 187, 93, 62, 26, 48, 214, 188, 145, 228, 117, 191, 120, 220, 141, 62, 1, 214, 8, 187, 206, 152, 25, 62, 81, 35, 44, 62, 150, 234, 151, 62, 161, 144, 174, 60, 31, 195, 130, 188, 2, 133, 63, 60, 44, 180, 105, 191, 79, 247, 35, 191, 13, 29, 35, 62, 236, 207, 59, 62, 17, 23, 229, 190, 98, 172, 216, 190, 117, 249, 50, 189, 129, 231, 29, 62, 247, 210, 53, 191, 211, 67, 178, 189, 219, 153, 82, 62, 137, 165, 165, 190, 53, 148, 208, 62, 10, 4, 162, 191, 181, 40, 139, 61, 73, 118, 147, 60, 103, 211, 33, 62, 2, 179, 177, 190, 181, 30, 70, 190, 138, 52, 27, 191, 4, 216, 165, 61, 158, 175, 162, 189, 16, 254, 12, 62, 129, 135, 202, 190, 46, 114, 177, 61, 68, 69, 212, 62, 110, 82, 152, 189, 251, 201, 84, 190, 148, 121, 169, 189, 19, 55, 19, 62, 38, 108, 107, 189, 213, 253, 106, 190, 55, 14, 168, 61, 42, 46, 52, 62, 39, 88, 164, 190, 101, 57, 165, 189, 110, 52, 233, 62, 24, 216, 170, 189, 228, 97, 18, 190, 81, 11, 152, 188, 210, 69, 3, 190, 39, 152, 14, 62, 115, 134, 62, 60, 140, 81, 218, 190, 16, 153, 82, 190, 110, 242, 165, 190, 205, 101, 44, 189, 12, 224, 134, 190, 159, 64, 6, 190, 200, 143, 92, 61, 101, 205, 137, 190, 245, 142, 77, 190, 227, 226, 172, 60, 73, 94, 16, 189, 175, 149, 87, 190, 9, 20, 34, 188, 139, 179, 245, 62, 231, 218, 104, 191, 86, 162, 75, 189, 62, 95, 102, 190, 112, 55, 163, 189, 132, 59, 178, 188, 176, 217, 255, 188, 79, 222, 207, 62, 241, 36, 201, 188, 66, 101, 167, 60, 133, 3, 51, 62, 219, 168, 206, 62, 113, 167, 121, 190, 161, 44, 174, 191, 5, 48, 57, 62, 133, 224, 155, 189, 18, 213, 115, 190, 209, 178, 62, 61, 13, 153, 97, 190, 243, 7, 140, 59, 254, 207, 75, 190, 121, 240, 124, 190, 101, 165, 230, 61, 193, 140, 195, 62, 245, 171, 160, 189, 177, 113, 217, 189, 83, 35, 72, 190, 4, 68, 34, 190, 226, 71, 195, 62, 44, 10, 26, 190, 232, 204, 137, 62, 12, 50, 156, 61, 83, 7, 219, 189, 165, 62, 27, 62, 215, 125, 255, 188, 200, 178, 184, 189, 84, 240, 179, 190, 255, 0, 42, 62, 58, 215, 230, 189, 234, 248, 167, 190, 17, 188, 28, 190, 197, 72, 154, 188, 76, 32, 55, 189, 22, 65, 140, 60, 215, 202, 232, 188, 190, 35, 66, 61, 241, 223, 140, 190, 254, 182, 254, 61, 123, 13, 35, 190, 155, 113, 148, 62, 227, 100, 94, 61, 192, 199, 75, 190, 30, 105, 27, 188, 132, 170, 117, 60, 13, 139, 128, 190, 153, 97, 16, 62, 46, 169, 97, 190, 160, 98, 160, 62, 189, 110, 103, 62, 97, 60, 206, 189, 197, 38, 178, 190, 255, 193, 52, 189, 245, 239, 3, 190, 120, 20, 105, 191, 193, 90, 33, 190, 204, 193, 117, 191, 92, 45, 24, 61, 164, 187, 48, 190, 185, 83, 145, 59, 208, 146, 69, 61, 16, 115, 30, 190, 85, 155, 113, 61, 228, 241, 187, 188, 88, 123, 145, 59, 100, 214, 245, 61, 6, 96, 212, 60, 60, 69, 22, 191, 128, 137, 0, 191, 45, 169, 10, 190, 228, 130, 82, 190, 88, 15, 86, 190, 242, 4, 115, 190, 11, 151, 146, 61, 62, 220, 185, 62, 148, 232, 132, 62, 64, 219, 192, 189, 151, 141, 94, 189, 217, 61, 236, 62, 60, 154, 36, 191, 40, 169, 14, 189, 35, 109, 9, 191, 200, 112, 223, 189, 244, 179, 96, 61, 200, 57, 79, 62, 237, 79, 84, 62, 54, 134, 100, 188, 79, 116, 177, 61, 128, 235, 27, 190, 89, 51, 31, 62, 172, 171, 39, 191, 168, 15, 149, 190, 58, 249, 96, 61, 157, 218, 188, 61, 90, 6, 150, 60, 143, 161, 169, 187, 185, 127, 70, 62, 123, 201, 113, 62, 106, 29, 125, 62, 188, 82, 171, 62, 108, 33, 144, 188, 28, 40, 148, 62, 218, 60, 136, 61, 185, 198, 218, 190, 173, 188, 189, 61, 149, 96, 134, 62, 171, 177, 116, 190, 110, 29, 134, 190, 74, 85, 208, 190, 39, 241, 92, 61, 34, 52, 168, 62, 35, 131, 9, 190, 43, 226, 58, 190, 139, 226, 201, 190, 70, 141, 152, 189, 210, 157, 4, 62, 248, 60, 90, 62, 68, 57, 167, 61, 206, 177, 19, 191, 249, 192, 231, 189, 151, 30, 28, 62, 186, 56, 23, 62, 74, 70, 140, 60, 208, 50, 198, 60, 74, 215, 211, 59, 167, 206, 39, 189, 180, 4, 182, 189, 63, 219, 233, 61, 153, 15, 107, 189, 21, 167, 165, 61, 104, 110, 150, 189, 0, 107, 223, 61, 96, 46, 13, 190, 164, 32, 121, 62, 221, 16, 192, 61, 153, 153, 148, 61, 230, 97, 186, 59, 106, 44, 156, 61, 4, 120, 42, 60, 248, 229, 6, 62, 116, 212, 193, 61, 160, 224, 46, 189, 186, 11, 135, 61, 187, 26, 218, 60, 141, 254, 88, 60, 24, 125, 154, 189, 106, 200, 20, 190, 188, 44, 6, 190, 235, 255, 76, 188, 101, 237, 249, 189, 151, 153, 130, 190, 170, 100, 200, 190, 6, 118, 62, 190, 178, 116, 183, 62, 105, 214, 182, 61, 182, 155, 61, 62, 17, 145, 73, 62, 161, 171, 164, 60, 130, 123, 24, 191, 41, 31, 149, 190, 211, 207, 203, 189, 71, 5, 150, 62, 88, 244, 5, 62, 74, 95, 129, 190, 86, 8, 110, 62, 112, 206, 213, 190, 174, 60, 55, 189, 96, 22, 171, 190, 195, 134, 35, 62, 65, 95, 20, 62, 152, 140, 99, 190, 56, 170, 123, 61, 31, 231, 227, 190, 164, 221, 29, 190, 162, 91, 15, 62, 4, 32, 175, 190, 130, 227, 46, 189, 232, 77, 12, 190, 108, 44, 230, 190, 252, 154, 25, 189, 3, 15, 128, 62, 169, 78, 190, 189, 6, 161, 15, 191, 221, 48, 177, 62, 156, 218, 67, 191, 123, 72, 200, 189, 234, 66, 125, 190, 203, 213, 40, 189, 159, 172, 6, 62, 123, 4, 41, 190, 3, 6, 92, 62, 19, 129, 235, 189, 210, 237, 8, 190, 156, 104, 115, 189, 180, 95, 57, 62, 148, 195, 108, 190, 26, 214, 32, 190, 161, 147, 17, 62, 155, 107, 64, 61, 68, 175, 247, 61, 77, 66, 17, 190, 87, 20, 10, 61, 145, 165, 82, 62, 39, 148, 73, 62, 18, 1, 13, 190, 92, 23, 138, 62, 222, 224, 149, 62, 193, 198, 234, 189, 248, 191, 242, 189, 232, 165, 194, 189, 16, 150, 38, 62, 240, 245, 1, 63, 3, 108, 143, 190, 43, 255, 250, 61, 152, 210, 11, 63, 171, 249, 250, 189, 219, 181, 131, 62, 16, 142, 82, 189, 173, 203, 158, 60, 251, 246, 243, 190, 89, 125, 119, 188, 166, 108, 136, 61, 62, 9, 253, 190, 131, 92, 101, 62, 166, 43, 221, 62, 76, 110, 93, 191, 27, 131, 28, 190, 83, 156, 136, 61, 5, 104, 171, 62, 15, 176, 123, 190, 229, 12, 28, 190, 169, 29, 236, 188, 64, 112, 20, 62, 205, 8, 155, 62, 77, 72, 146, 62, 88, 180, 29, 190, 157, 203, 116, 62, 8, 81, 187, 190, 19, 165, 44, 191, 68, 24, 194, 190, 75, 106, 167, 62, 107, 60, 88, 61, 212, 137, 105, 61, 244, 156, 176, 189, 82, 195, 21, 190, 138, 156, 207, 61, 11, 127, 42, 189, 151, 98, 42, 190, 249, 119, 154, 60, 91, 36, 144, 190, 58, 217, 36, 62, 55, 140, 208, 189, 93, 66, 83, 190, 34, 190, 221, 189, 161, 55, 145, 61, 59, 198, 39, 190, 201, 252, 161, 189, 107, 58, 210, 61, 207, 229, 236, 61, 25, 33, 61, 190, 133, 20, 118, 190, 181, 206, 14, 190, 111, 73, 183, 61, 125, 161, 240, 61, 147, 203, 191, 189, 248, 60, 80, 190, 224, 126, 128, 189, 114, 248, 15, 189, 155, 43, 68, 60, 29, 51, 145, 61, 224, 112, 185, 61, 247, 108, 114, 190, 95, 110, 42, 62, 101, 125, 254, 188, 118, 14, 0, 62, 141, 188, 3, 190, 132, 11, 129, 187, 33, 120, 195, 189, 210, 168, 10, 62, 152, 224, 231, 60, 190, 63, 11, 190, 170, 38, 8, 62, 251, 157, 216, 61, 20, 69, 32, 62, 228, 108, 139, 189, 48, 205, 94, 61, 234, 3, 18, 188, 228, 253, 88, 189, 79, 92, 49, 190, 0, 53, 214, 189, 147, 182, 240, 61, 120, 229, 44, 189, 143, 85, 34, 189, 155, 103, 101, 61, 101, 186, 28, 190, 236, 253, 5, 62, 0, 154, 116, 189, 68, 250, 135, 189, 20, 229, 62, 190, 46, 7, 85, 61, 216, 62, 251, 189, 137, 22, 232, 61, 136, 198, 237, 189, 193, 178, 72, 61, 219, 7, 226, 189, 254, 45, 19, 190, 43, 246, 241, 188, 38, 51, 220, 188, 206, 84, 89, 189, 35, 86, 161, 60, 51, 132, 1, 62, 10, 255, 228, 187, 241, 125, 196, 189, 173, 156, 52, 190, 22, 105, 29, 62, 248, 62, 52, 190, 18, 254, 247, 61, 143, 83, 7, 61, 249, 55, 3, 190, 82, 179, 19, 62, 206, 254, 194, 189, 150, 248, 156, 189, 175, 65, 15, 189, 61, 82, 29, 190, 212, 131, 122, 189, 174, 62, 145, 60, 111, 224, 157, 189, 152, 193, 231, 189, 153, 120, 25, 190, 221, 143, 146, 61, 57, 235, 33, 190, 42, 251, 243, 61, 243, 218, 200, 61, 185, 121, 129, 61, 161, 110, 244, 61, 36, 176, 80, 188, 171, 9, 160, 61, 14, 163, 217, 189, 247, 62, 207, 62, 102, 200, 19, 189, 244, 178, 131, 190, 231, 163, 123, 62, 157, 114, 81, 190, 149, 86, 208, 190, 105, 187, 146, 62, 87, 235, 151, 61, 139, 102, 100, 60, 161, 182, 146, 191, 1, 255, 33, 62, 38, 226, 230, 61, 129, 164, 186, 190, 51, 233, 166, 190, 83, 41, 32, 62, 57, 50, 223, 190, 168, 27, 134, 62, 197, 36, 68, 190, 231, 79, 122, 62, 155, 90, 202, 189, 193, 1, 71, 190, 221, 158, 173, 188, 79, 250, 19, 62, 132, 41, 142, 188, 123, 181, 77, 61, 113, 0, 61, 62, 112, 226, 68, 190, 149, 213, 26, 191, 225, 108, 127, 190, 113, 233, 19, 191, 76, 155, 229, 189, 33, 142, 170, 190, 160, 106, 13, 188, 36, 100, 122, 190, 38, 129, 131, 62, 147, 136, 7, 190, 177, 69, 192, 189, 68, 213, 77, 62, 95, 193, 131, 61, 97, 169, 85, 62, 113, 82, 225, 62, 95, 6, 192, 62, 200, 217, 220, 189, 161, 27, 228, 59, 134, 26, 84, 62, 229, 254, 108, 191, 134, 152, 30, 191, 155, 87, 141, 189, 91, 245, 169, 60, 18, 70, 119, 190, 42, 76, 252, 189, 28, 125, 150, 62, 153, 45, 62, 62, 165, 98, 106, 188, 126, 117, 170, 190, 62, 47, 43, 62, 122, 18, 69, 190, 91, 49, 157, 188, 64, 72, 74, 191, 241, 246, 136, 62, 106, 40, 187, 60, 66, 81, 146, 62, 139, 255, 83, 190, 25, 95, 132, 61, 110, 12, 167, 60, 28, 5, 91, 60, 240, 249, 71, 61, 54, 1, 25, 62, 120, 84, 69, 190, 39, 61, 99, 189, 183, 214, 81, 62, 59, 17, 82, 62, 122, 184, 87, 188, 97, 46, 11, 191, 200, 159, 223, 188, 24, 140, 208, 187, 47, 93, 242, 190, 27, 208, 146, 189, 107, 21, 38, 61, 243, 119, 57, 190, 222, 150, 106, 60, 234, 92, 166, 61, 160, 10, 12, 62, 56, 29, 60, 61, 229, 161, 118, 62, 7, 31, 131, 59, 144, 234, 167, 62, 128, 108, 159, 62, 197, 236, 189, 190, 68, 201, 228, 61, 220, 136, 122, 61, 51, 140, 60, 190, 83, 248, 53, 190, 152, 158, 18, 190, 80, 208, 211, 61, 172, 179, 46, 60, 189, 108, 58, 62, 124, 255, 156, 61, 195, 29, 159, 61, 185, 233, 85, 61, 108, 206, 19, 189, 251, 42, 47, 190, 91, 187, 11, 62, 187, 108, 80, 189, 154, 130, 35, 188, 126, 99, 14, 191, 201, 73, 187, 61, 230, 100, 62, 189, 3, 86, 125, 61, 130, 211, 106, 61, 199, 194, 123, 188, 56, 131, 38, 191, 6, 184, 40, 62, 240, 16, 147, 58, 20, 112, 0, 62, 142, 112, 3, 190, 240, 169, 62, 61, 4, 53, 154, 188, 66, 251, 37, 62, 203, 77, 2, 190, 228, 48, 28, 62, 13, 98, 21, 62, 17, 60, 254, 189, 110, 48, 34, 190, 43, 75, 149, 190, 250, 23, 197, 61, 7, 114, 50, 61, 1, 66, 21, 185, 211, 145, 48, 190, 112, 88, 131, 61, 168, 217, 111, 60, 156, 0, 19, 61, 182, 188, 93, 191, 22, 31, 123, 62, 94, 196, 142, 191, 62, 40, 138, 62, 201, 52, 94, 61, 182, 241, 142, 189, 149, 159, 38, 190, 87, 117, 106, 61, 74, 132, 164, 189, 182, 90, 6, 190, 167, 18, 96, 190, 81, 84, 181, 188, 253, 129, 158, 62, 15, 146, 96, 187, 52, 246, 48, 61, 108, 253, 154, 62, 7, 241, 148, 190, 164, 11, 35, 62, 127, 221, 164, 61, 91, 134, 14, 62, 140, 163, 222, 189, 253, 158, 33, 189, 68, 167, 62, 60, 141, 200, 150, 62, 136, 72, 140, 62, 78, 159, 34, 191, 185, 158, 114, 62, 220, 142, 152, 190, 233, 147, 196, 190, 15, 24, 64, 189, 108, 99, 57, 62, 183, 156, 130, 60, 234, 33, 100, 191, 89, 154, 218, 62, 54, 237, 56, 190, 184, 236, 156, 61, 212, 140, 212, 189, 27, 79, 178, 62, 74, 31, 242, 61, 60, 175, 194, 189, 143, 125, 234, 62, 179, 92, 123, 60, 125, 15, 250, 189, 34, 232, 36, 62, 44, 20, 60, 188, 54, 71, 107, 190, 115, 44, 186, 190, 70, 190, 143, 62, 237, 131, 102, 61, 102, 161, 186, 189, 158, 246, 215, 189, 37, 95, 99, 61, 181, 179, 106, 190, 127, 246, 140, 189, 51, 139, 156, 190, 5, 246, 177, 61, 104, 107, 137, 62, 190, 77, 219, 61, 166, 206, 132, 189, 136, 21, 180, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {195, 66, 142, 62, 146, 252, 103, 62, 9, 142, 14, 190, 101, 188, 53, 62, 9, 141, 126, 189, 207, 67, 26, 62, 245, 193, 92, 62, 48, 119, 6, 189, 29, 213, 50, 62, 183, 183, 183, 189, 176, 28, 47, 61, 66, 85, 135, 62, 200, 89, 117, 186, 33, 233, 177, 62, 9, 248, 183, 189, 249, 218, 164, 190, 78, 243, 155, 62, 111, 168, 25, 62, 199, 207, 58, 62, 61, 38, 37, 62, 145, 14, 69, 62, 88, 97, 73, 190, 205, 129, 32, 62, 78, 40, 37, 190, 11, 120, 171, 189, 201, 50, 155, 189, 250, 27, 67, 61, 155, 117, 87, 62, 197, 171, 176, 61, 94, 44, 175, 61, 29, 30, 255, 189, 234, 179, 84, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 49, 94, 191, 85, 69, 160, 190, 84, 124, 2, 191, 151, 42, 11, 191, 42, 152, 211, 190, 126, 219, 32, 62, 29, 185, 227, 62, 96, 13, 14, 63, 113, 220, 196, 190, 140, 75, 66, 191, 250, 114, 150, 62, 120, 65, 45, 62, 14, 245, 233, 189, 49, 178, 95, 191, 206, 66, 201, 62, 127, 45, 149, 63, 151, 159, 133, 62, 214, 133, 79, 191, 83, 231, 156, 62, 5, 156, 132, 189, 42, 136, 136, 62, 121, 255, 96, 189, 123, 34, 106, 63, 75, 155, 23, 189, 134, 37, 29, 62, 164, 224, 230, 61, 108, 158, 4, 63, 192, 27, 181, 190, 148, 170, 13, 62, 84, 45, 56, 186, 164, 215, 130, 190, 217, 231, 217, 190, 101, 73, 142, 62, 32, 14, 170, 189, 222, 8, 1, 61, 53, 240, 25, 189, 174, 38, 222, 189, 123, 115, 133, 190, 130, 127, 205, 190, 8, 162, 114, 62, 79, 131, 182, 190, 5, 211, 186, 62, 165, 197, 147, 190, 59, 158, 32, 190, 50, 95, 52, 191, 46, 183, 169, 187, 52, 200, 175, 62, 242, 252, 69, 62, 2, 140, 238, 189, 231, 80, 155, 62, 211, 69, 32, 190, 108, 98, 241, 189, 3, 17, 157, 190, 209, 229, 6, 63, 120, 121, 163, 62, 56, 105, 210, 61, 89, 45, 251, 189, 23, 234, 179, 61, 183, 238, 2, 62, 229, 208, 185, 60, 229, 215, 181, 190, 7, 183, 7, 190, 151, 24, 143, 190, 193, 68, 188, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 208, 197, 61, 26, 173, 134, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {78, 234, 14, 191, 209, 26, 229, 191, 53, 124, 208, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {61, 181, 31, 191, 51, 194, 129, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0047/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}