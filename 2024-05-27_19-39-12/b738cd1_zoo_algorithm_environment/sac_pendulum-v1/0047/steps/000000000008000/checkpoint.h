// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 205, 9, 63, 68, 65, 77, 191, 69, 190, 20, 191, 199, 10, 88, 61, 69, 193, 37, 191, 73, 73, 25, 62, 230, 34, 11, 63, 21, 202, 102, 62, 98, 191, 28, 63, 110, 77, 214, 62, 197, 59, 133, 190, 188, 216, 140, 61, 120, 149, 29, 63, 140, 87, 183, 190, 145, 215, 141, 190, 95, 29, 218, 62, 172, 2, 145, 190, 206, 10, 178, 62, 113, 60, 246, 190, 167, 247, 37, 191, 242, 134, 73, 188, 144, 75, 218, 59, 93, 195, 13, 63, 246, 176, 133, 60, 231, 66, 232, 190, 85, 15, 149, 61, 108, 88, 209, 62, 214, 222, 211, 190, 143, 162, 222, 190, 36, 116, 214, 189, 17, 105, 44, 191, 22, 111, 147, 190, 215, 253, 167, 190, 62, 224, 1, 187, 248, 126, 57, 190, 250, 32, 23, 188, 10, 226, 49, 63, 59, 215, 165, 63, 226, 207, 17, 63, 21, 117, 146, 190, 143, 17, 138, 63, 145, 72, 141, 62, 213, 245, 24, 191, 174, 190, 209, 63, 245, 156, 175, 62, 84, 47, 38, 190, 177, 207, 2, 63, 219, 202, 212, 190, 104, 6, 32, 63, 233, 151, 44, 63, 33, 126, 15, 190, 246, 174, 42, 62, 139, 225, 57, 191, 132, 144, 36, 62, 35, 34, 223, 62, 194, 19, 94, 191, 105, 233, 202, 190, 185, 168, 189, 61, 186, 177, 208, 62, 12, 148, 34, 63, 14, 61, 25, 191, 31, 166, 97, 191, 20, 145, 13, 191, 231, 1, 116, 190, 23, 95, 66, 63, 230, 235, 190, 62, 62, 101, 216, 62, 94, 144, 6, 191, 121, 139, 69, 62, 179, 24, 200, 60, 141, 235, 138, 189, 22, 253, 32, 61, 171, 211, 100, 190, 55, 180, 188, 63, 58, 131, 223, 62, 49, 48, 96, 190, 191, 215, 14, 63, 144, 50, 230, 61, 134, 108, 161, 190, 62, 241, 245, 62, 46, 211, 119, 62, 156, 11, 7, 63, 121, 112, 105, 63, 15, 199, 13, 63, 164, 76, 170, 62, 228, 232, 112, 63, 96, 229, 99, 190, 139, 232, 189, 190, 235, 195, 133, 191, 194, 217, 136, 190, 132, 230, 150, 189, 125, 126, 174, 189, 46, 225, 31, 63, 46, 114, 189, 190, 42, 215, 6, 60, 135, 68, 201, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 128, 54, 191, 97, 80, 164, 61, 114, 47, 1, 62, 243, 137, 149, 62, 140, 26, 77, 191, 232, 107, 133, 190, 244, 210, 194, 62, 61, 203, 36, 63, 92, 171, 69, 189, 72, 176, 179, 190, 65, 206, 83, 62, 139, 193, 147, 190, 170, 153, 219, 190, 179, 133, 20, 190, 7, 52, 38, 190, 43, 92, 160, 190, 54, 136, 4, 190, 234, 57, 78, 62, 255, 183, 90, 61, 151, 242, 247, 190, 247, 54, 45, 62, 62, 148, 166, 189, 157, 4, 225, 62, 134, 245, 227, 62, 47, 176, 163, 62, 141, 108, 207, 62, 66, 78, 95, 190, 89, 150, 16, 58, 6, 30, 80, 62, 90, 79, 159, 189, 93, 190, 212, 190, 255, 57, 247, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 12, 181, 190, 145, 130, 107, 190, 62, 86, 52, 61, 148, 131, 249, 188, 147, 221, 29, 191, 77, 119, 87, 61, 125, 154, 220, 61, 184, 173, 202, 62, 189, 238, 83, 62, 8, 70, 74, 62, 47, 172, 2, 62, 39, 68, 58, 189, 48, 28, 104, 62, 217, 213, 53, 191, 221, 44, 75, 191, 235, 228, 208, 60, 174, 219, 88, 62, 4, 186, 169, 189, 115, 194, 199, 190, 187, 26, 78, 61, 153, 37, 44, 61, 196, 8, 5, 191, 136, 128, 160, 190, 23, 56, 200, 188, 45, 50, 44, 190, 35, 86, 72, 62, 165, 36, 134, 191, 161, 216, 125, 60, 253, 132, 95, 61, 96, 162, 43, 62, 95, 80, 131, 189, 164, 179, 128, 62, 22, 175, 34, 189, 35, 28, 171, 189, 6, 45, 65, 188, 10, 31, 51, 189, 146, 168, 217, 190, 6, 4, 217, 189, 8, 220, 124, 61, 182, 122, 177, 61, 55, 198, 209, 61, 245, 24, 238, 189, 195, 155, 125, 60, 89, 122, 208, 61, 233, 205, 243, 188, 7, 19, 143, 190, 204, 147, 239, 190, 85, 6, 191, 189, 189, 210, 146, 61, 184, 82, 210, 61, 236, 170, 229, 189, 97, 129, 124, 59, 126, 220, 23, 62, 209, 240, 116, 190, 27, 98, 11, 190, 136, 223, 211, 187, 36, 54, 12, 190, 43, 69, 189, 61, 162, 59, 9, 191, 90, 84, 195, 59, 248, 128, 154, 188, 227, 253, 17, 189, 29, 218, 247, 188, 159, 240, 140, 187, 201, 111, 132, 190, 78, 161, 52, 188, 236, 196, 30, 62, 48, 253, 34, 189, 14, 35, 91, 190, 205, 6, 90, 62, 135, 217, 144, 60, 26, 54, 227, 189, 51, 164, 103, 60, 10, 118, 12, 63, 151, 241, 158, 62, 89, 57, 214, 61, 11, 206, 245, 62, 171, 220, 156, 60, 205, 172, 100, 190, 194, 61, 86, 62, 223, 199, 86, 190, 21, 3, 174, 190, 250, 128, 181, 190, 193, 125, 148, 62, 188, 211, 70, 62, 237, 21, 30, 190, 192, 162, 55, 61, 224, 4, 21, 60, 216, 220, 19, 60, 210, 47, 184, 188, 240, 101, 167, 190, 0, 159, 81, 62, 0, 205, 135, 60, 237, 75, 126, 62, 52, 142, 3, 190, 67, 195, 193, 190, 232, 133, 164, 190, 112, 14, 2, 62, 245, 160, 162, 61, 114, 96, 131, 61, 234, 60, 138, 191, 47, 30, 21, 62, 145, 244, 20, 191, 160, 192, 57, 62, 64, 231, 193, 190, 155, 80, 34, 190, 126, 40, 39, 189, 20, 118, 147, 61, 197, 31, 51, 189, 169, 36, 188, 59, 144, 251, 202, 190, 209, 223, 34, 62, 151, 33, 150, 61, 138, 181, 148, 190, 219, 253, 165, 59, 233, 190, 87, 190, 122, 255, 52, 190, 131, 217, 139, 61, 158, 197, 70, 190, 255, 224, 6, 189, 16, 178, 153, 62, 121, 178, 245, 62, 183, 138, 217, 189, 241, 248, 191, 188, 252, 71, 107, 62, 147, 155, 87, 190, 30, 111, 63, 189, 194, 31, 142, 190, 147, 78, 171, 189, 232, 211, 31, 60, 48, 52, 140, 62, 19, 125, 213, 61, 141, 179, 32, 191, 136, 84, 227, 61, 31, 133, 59, 190, 238, 231, 101, 62, 87, 14, 166, 61, 25, 30, 235, 61, 196, 101, 154, 61, 176, 49, 135, 61, 185, 72, 197, 62, 253, 156, 75, 190, 77, 109, 63, 190, 178, 228, 245, 188, 24, 38, 137, 61, 35, 15, 57, 190, 165, 38, 123, 190, 81, 18, 129, 61, 236, 216, 228, 61, 127, 69, 68, 190, 186, 88, 25, 190, 117, 140, 253, 61, 21, 238, 24, 190, 90, 252, 220, 61, 15, 184, 161, 190, 198, 50, 166, 62, 211, 188, 127, 61, 104, 143, 86, 62, 243, 200, 82, 189, 44, 121, 73, 190, 137, 136, 20, 190, 192, 206, 54, 62, 17, 191, 140, 62, 31, 99, 52, 62, 12, 71, 153, 60, 221, 94, 158, 61, 118, 174, 92, 61, 98, 248, 139, 189, 19, 37, 223, 190, 206, 2, 29, 191, 30, 59, 138, 59, 45, 196, 154, 61, 17, 223, 52, 62, 71, 59, 254, 60, 174, 145, 237, 61, 72, 250, 131, 190, 199, 253, 96, 62, 214, 83, 15, 62, 225, 202, 203, 61, 177, 130, 157, 60, 56, 156, 254, 61, 98, 115, 31, 60, 154, 53, 173, 62, 186, 73, 162, 62, 1, 168, 121, 190, 159, 74, 105, 190, 37, 140, 118, 190, 75, 228, 171, 62, 198, 109, 108, 189, 98, 69, 16, 189, 195, 64, 163, 189, 198, 196, 149, 189, 113, 209, 40, 190, 37, 49, 123, 62, 233, 178, 82, 62, 224, 155, 228, 61, 243, 82, 124, 190, 100, 83, 168, 62, 130, 59, 180, 190, 188, 160, 8, 62, 148, 205, 153, 60, 149, 77, 194, 189, 80, 161, 126, 190, 27, 75, 179, 61, 147, 186, 210, 190, 2, 86, 0, 190, 178, 64, 223, 190, 121, 123, 6, 190, 102, 50, 124, 62, 18, 149, 69, 62, 84, 54, 5, 62, 115, 180, 20, 190, 66, 132, 31, 191, 147, 44, 168, 189, 222, 167, 247, 187, 29, 102, 97, 62, 114, 25, 222, 190, 35, 46, 79, 190, 77, 190, 135, 190, 251, 94, 216, 188, 13, 1, 165, 189, 117, 44, 132, 191, 194, 72, 2, 61, 178, 32, 170, 190, 103, 154, 154, 62, 67, 25, 201, 62, 168, 142, 111, 190, 145, 205, 99, 62, 180, 169, 89, 62, 116, 216, 140, 190, 187, 146, 134, 188, 83, 253, 98, 61, 47, 156, 179, 62, 112, 201, 29, 191, 46, 110, 37, 190, 44, 85, 248, 61, 247, 80, 233, 190, 173, 54, 237, 60, 27, 204, 210, 62, 29, 182, 29, 187, 177, 132, 210, 62, 219, 185, 158, 62, 140, 193, 227, 62, 145, 151, 143, 190, 118, 121, 13, 190, 210, 124, 148, 61, 115, 65, 95, 62, 147, 230, 71, 61, 251, 158, 145, 188, 50, 223, 98, 190, 226, 199, 247, 61, 182, 55, 28, 190, 148, 73, 193, 60, 194, 175, 185, 190, 68, 179, 115, 62, 83, 30, 101, 62, 234, 111, 133, 190, 9, 159, 130, 190, 94, 192, 92, 62, 17, 100, 97, 189, 5, 161, 91, 191, 59, 132, 179, 61, 123, 231, 161, 191, 164, 143, 208, 61, 199, 214, 84, 190, 106, 152, 31, 190, 73, 146, 203, 190, 190, 160, 255, 61, 91, 140, 236, 60, 66, 134, 27, 190, 45, 170, 224, 61, 46, 46, 171, 61, 92, 78, 177, 62, 12, 71, 158, 190, 241, 78, 22, 62, 60, 57, 27, 190, 87, 35, 188, 190, 248, 228, 138, 188, 238, 146, 107, 61, 255, 24, 214, 60, 99, 111, 184, 61, 2, 195, 33, 62, 4, 244, 81, 190, 147, 6, 193, 61, 212, 161, 157, 62, 185, 80, 153, 190, 56, 152, 158, 61, 254, 236, 142, 190, 189, 48, 179, 61, 230, 170, 141, 61, 89, 48, 71, 190, 39, 52, 161, 62, 27, 191, 54, 189, 71, 124, 220, 60, 185, 40, 143, 60, 249, 72, 55, 190, 181, 24, 99, 190, 31, 172, 46, 191, 229, 16, 192, 190, 11, 245, 129, 188, 148, 163, 185, 190, 247, 13, 87, 188, 144, 165, 139, 60, 135, 117, 133, 190, 1, 3, 109, 62, 241, 219, 136, 62, 172, 170, 155, 62, 52, 116, 94, 189, 13, 233, 18, 190, 198, 129, 33, 190, 48, 17, 98, 62, 233, 177, 6, 62, 232, 225, 233, 190, 169, 217, 27, 191, 108, 110, 150, 61, 88, 72, 78, 190, 29, 143, 22, 190, 73, 75, 130, 190, 30, 1, 36, 61, 25, 222, 208, 60, 231, 237, 156, 190, 194, 155, 138, 190, 147, 81, 62, 190, 53, 89, 53, 62, 196, 215, 155, 190, 203, 199, 62, 190, 65, 54, 38, 62, 169, 72, 136, 62, 184, 17, 128, 62, 48, 188, 72, 191, 90, 93, 142, 189, 62, 95, 124, 188, 249, 73, 138, 190, 239, 247, 44, 189, 119, 12, 16, 62, 210, 80, 131, 191, 178, 254, 162, 62, 241, 209, 66, 188, 207, 181, 171, 62, 42, 251, 130, 190, 177, 134, 162, 190, 191, 91, 55, 62, 124, 33, 180, 61, 146, 68, 79, 61, 22, 129, 117, 62, 122, 46, 166, 62, 198, 101, 243, 61, 12, 140, 145, 61, 49, 188, 184, 190, 27, 16, 209, 190, 30, 226, 54, 62, 106, 89, 105, 62, 150, 34, 19, 190, 183, 76, 28, 61, 17, 96, 18, 190, 163, 129, 65, 62, 255, 22, 251, 189, 112, 145, 137, 188, 66, 189, 30, 190, 105, 146, 246, 187, 104, 95, 187, 189, 130, 190, 103, 190, 65, 103, 213, 61, 253, 22, 229, 189, 206, 242, 192, 190, 67, 146, 40, 188, 239, 152, 148, 61, 192, 78, 94, 190, 221, 43, 179, 188, 143, 216, 16, 62, 221, 160, 134, 62, 164, 234, 106, 189, 101, 112, 203, 189, 62, 53, 170, 189, 190, 57, 50, 62, 88, 185, 27, 62, 108, 106, 130, 189, 59, 183, 95, 61, 194, 13, 252, 189, 3, 211, 221, 189, 237, 166, 113, 190, 208, 154, 228, 61, 63, 53, 23, 190, 112, 220, 162, 190, 217, 245, 124, 189, 232, 19, 30, 190, 142, 104, 196, 61, 152, 214, 41, 188, 159, 121, 215, 190, 43, 164, 198, 189, 31, 144, 0, 191, 62, 109, 110, 62, 201, 248, 207, 190, 54, 161, 124, 190, 226, 236, 214, 189, 174, 237, 54, 189, 8, 120, 179, 189, 126, 95, 111, 190, 141, 116, 154, 190, 239, 189, 155, 61, 243, 225, 118, 189, 86, 17, 134, 190, 96, 51, 116, 189, 39, 188, 60, 190, 190, 165, 183, 187, 24, 135, 133, 190, 171, 106, 158, 61, 7, 63, 48, 62, 63, 132, 70, 190, 223, 202, 98, 60, 35, 242, 208, 189, 191, 28, 42, 61, 203, 22, 102, 62, 208, 197, 158, 190, 5, 151, 69, 190, 165, 250, 162, 188, 0, 78, 202, 190, 26, 215, 155, 190, 124, 70, 74, 62, 152, 165, 55, 189, 210, 217, 20, 191, 203, 224, 106, 62, 209, 216, 164, 61, 138, 118, 237, 61, 235, 143, 100, 62, 0, 172, 41, 62, 81, 176, 70, 61, 31, 195, 130, 188, 194, 158, 167, 60, 12, 28, 103, 191, 152, 197, 46, 191, 87, 58, 48, 62, 249, 217, 58, 62, 185, 99, 234, 190, 249, 106, 237, 190, 86, 19, 231, 189, 96, 204, 64, 62, 169, 153, 37, 191, 75, 11, 202, 189, 39, 78, 52, 62, 143, 220, 172, 190, 137, 226, 191, 62, 47, 21, 129, 191, 152, 11, 79, 61, 66, 99, 207, 59, 133, 31, 46, 62, 139, 11, 168, 190, 122, 41, 6, 190, 117, 157, 249, 189, 66, 73, 231, 188, 74, 214, 187, 189, 239, 151, 220, 61, 129, 99, 134, 190, 28, 212, 110, 61, 158, 239, 106, 62, 156, 31, 140, 189, 122, 106, 102, 190, 138, 83, 1, 190, 110, 214, 239, 61, 38, 108, 107, 189, 50, 165, 136, 60, 82, 231, 181, 61, 22, 191, 67, 62, 128, 254, 128, 190, 31, 130, 3, 189, 56, 182, 185, 62, 107, 70, 192, 61, 110, 136, 228, 189, 205, 57, 94, 61, 74, 67, 152, 60, 55, 60, 174, 61, 31, 247, 103, 189, 142, 143, 55, 190, 194, 152, 2, 190, 184, 235, 107, 190, 79, 167, 21, 61, 140, 223, 107, 190, 231, 158, 48, 189, 146, 61, 163, 60, 6, 136, 77, 190, 23, 88, 1, 190, 221, 183, 59, 190, 167, 192, 85, 188, 252, 252, 242, 189, 183, 8, 73, 58, 116, 30, 179, 62, 214, 173, 126, 191, 19, 140, 1, 189, 192, 49, 43, 190, 112, 55, 163, 189, 24, 67, 99, 190, 176, 217, 255, 188, 121, 206, 206, 62, 194, 245, 106, 188, 136, 113, 25, 61, 16, 5, 77, 190, 223, 38, 144, 62, 63, 171, 197, 190, 101, 161, 56, 191, 62, 248, 45, 62, 81, 71, 56, 190, 65, 252, 74, 190, 61, 31, 249, 61, 33, 221, 29, 190, 165, 136, 85, 59, 84, 89, 69, 190, 66, 42, 154, 189, 107, 135, 1, 62, 119, 117, 134, 62, 245, 171, 160, 189, 121, 247, 14, 190, 111, 13, 250, 189, 89, 102, 218, 189, 183, 212, 184, 62, 3, 24, 53, 190, 75, 237, 114, 62, 153, 178, 191, 61, 56, 105, 9, 190, 45, 241, 240, 61, 118, 202, 21, 189, 30, 95, 191, 189, 33, 8, 205, 190, 35, 84, 1, 62, 58, 215, 230, 189, 177, 128, 155, 190, 215, 189, 66, 189, 28, 151, 229, 61, 37, 133, 175, 189, 193, 195, 82, 59, 207, 253, 111, 189, 29, 113, 186, 61, 248, 213, 148, 190, 238, 20, 200, 61, 224, 216, 59, 189, 157, 116, 131, 62, 111, 155, 78, 61, 95, 68, 143, 189, 215, 86, 49, 61, 205, 144, 216, 61, 101, 229, 133, 190, 120, 94, 8, 62, 105, 211, 31, 190, 86, 12, 146, 62, 136, 146, 144, 62, 9, 161, 133, 189, 116, 106, 1, 189, 169, 63, 203, 61, 33, 125, 187, 189, 4, 186, 60, 191, 95, 238, 63, 60, 89, 231, 142, 191, 83, 166, 33, 189, 178, 168, 231, 189, 177, 63, 121, 190, 98, 102, 37, 61, 16, 115, 30, 190, 64, 254, 92, 62, 164, 153, 225, 189, 126, 2, 200, 189, 120, 6, 2, 62, 167, 234, 90, 60, 187, 153, 219, 190, 125, 254, 255, 190, 107, 65, 1, 190, 225, 104, 244, 189, 219, 91, 141, 190, 152, 112, 65, 190, 24, 244, 176, 60, 105, 90, 148, 62, 166, 235, 7, 62, 58, 163, 109, 190, 232, 236, 66, 61, 215, 17, 208, 62, 132, 254, 7, 191, 180, 65, 102, 189, 156, 9, 226, 190, 17, 108, 132, 189, 179, 237, 101, 61, 227, 81, 43, 62, 230, 126, 56, 62, 109, 33, 64, 59, 210, 207, 99, 61, 125, 121, 205, 189, 131, 75, 13, 62, 45, 27, 36, 191, 116, 57, 180, 190, 167, 81, 90, 61, 157, 218, 188, 61, 61, 205, 118, 189, 201, 43, 131, 190, 244, 37, 231, 61, 145, 1, 70, 62, 214, 131, 82, 62, 198, 218, 165, 62, 242, 99, 155, 60, 56, 140, 84, 62, 11, 1, 129, 61, 163, 165, 204, 190, 88, 65, 135, 61, 189, 27, 138, 62, 255, 104, 113, 190, 43, 28, 106, 190, 45, 15, 142, 190, 13, 32, 47, 188, 67, 188, 146, 62, 52, 216, 145, 189, 100, 226, 127, 190, 97, 97, 173, 190, 111, 220, 20, 190, 200, 225, 144, 61, 201, 2, 118, 62, 104, 78, 202, 61, 177, 108, 103, 190, 13, 96, 13, 190, 25, 1, 18, 62, 208, 204, 16, 62, 81, 188, 102, 57, 247, 193, 11, 61, 135, 186, 83, 187, 167, 206, 39, 189, 191, 212, 117, 189, 25, 170, 241, 61, 77, 208, 132, 189, 81, 190, 180, 61, 105, 65, 157, 189, 29, 33, 189, 61, 133, 24, 86, 190, 100, 249, 59, 62, 2, 119, 201, 61, 129, 25, 148, 60, 11, 146, 190, 60, 27, 155, 149, 61, 59, 210, 14, 60, 73, 87, 2, 62, 57, 77, 141, 61, 206, 2, 144, 188, 43, 0, 78, 61, 132, 127, 207, 59, 59, 76, 248, 188, 91, 10, 207, 189, 51, 97, 189, 189, 89, 52, 166, 189, 215, 167, 129, 188, 177, 97, 21, 190, 70, 208, 3, 190, 173, 126, 194, 190, 170, 5, 84, 190, 210, 235, 170, 62, 153, 103, 149, 189, 202, 168, 166, 61, 198, 110, 32, 62, 161, 171, 164, 60, 2, 245, 32, 191, 215, 171, 73, 190, 34, 187, 128, 187, 61, 229, 135, 62, 67, 68, 225, 61, 29, 138, 122, 190, 122, 119, 134, 62, 112, 206, 213, 190, 121, 185, 136, 189, 32, 31, 130, 190, 89, 179, 14, 62, 227, 200, 12, 62, 88, 104, 45, 190, 82, 2, 130, 61, 192, 230, 170, 190, 23, 56, 30, 190, 14, 67, 1, 62, 127, 237, 147, 190, 170, 149, 149, 188, 230, 41, 43, 190, 171, 58, 161, 190, 39, 120, 225, 59, 68, 74, 117, 62, 223, 254, 174, 189, 133, 96, 143, 190, 229, 87, 181, 62, 25, 84, 42, 191, 212, 135, 209, 189, 129, 128, 129, 190, 135, 161, 19, 189, 144, 98, 115, 61, 123, 4, 41, 190, 121, 142, 37, 62, 196, 122, 205, 189, 51, 202, 241, 189, 80, 33, 198, 189, 139, 141, 83, 62, 1, 189, 94, 190, 50, 104, 228, 189, 242, 66, 35, 62, 248, 96, 163, 60, 193, 39, 207, 61, 65, 210, 8, 190, 72, 33, 36, 61, 48, 189, 34, 62, 229, 156, 45, 62, 162, 36, 25, 190, 49, 178, 118, 62, 182, 72, 154, 62, 158, 28, 98, 190, 16, 60, 200, 189, 2, 86, 249, 189, 92, 94, 88, 62, 69, 76, 4, 63, 78, 220, 136, 190, 33, 41, 0, 62, 75, 36, 233, 62, 67, 58, 144, 189, 117, 90, 78, 62, 253, 145, 172, 189, 105, 74, 38, 59, 95, 54, 212, 190, 79, 231, 97, 61, 166, 108, 136, 61, 124, 147, 204, 190, 142, 42, 20, 62, 213, 119, 170, 62, 57, 234, 21, 191, 114, 182, 248, 189, 63, 54, 146, 61, 149, 131, 182, 62, 171, 46, 116, 190, 181, 211, 215, 189, 253, 170, 135, 188, 56, 183, 14, 62, 54, 71, 141, 62, 106, 148, 156, 62, 164, 133, 29, 190, 211, 12, 61, 62, 28, 148, 169, 190, 206, 90, 21, 191, 235, 74, 142, 190, 28, 148, 170, 62, 169, 191, 144, 61, 66, 156, 139, 61, 244, 156, 176, 189, 82, 195, 21, 190, 12, 111, 206, 61, 158, 30, 0, 189, 151, 98, 42, 190, 184, 255, 30, 61, 87, 50, 128, 190, 58, 217, 36, 62, 208, 10, 166, 189, 238, 76, 55, 190, 34, 190, 221, 189, 161, 55, 145, 61, 120, 26, 36, 190, 78, 254, 149, 189, 167, 4, 238, 61, 7, 188, 7, 62, 25, 33, 61, 190, 117, 136, 105, 190, 181, 206, 14, 190, 149, 220, 220, 61, 125, 161, 240, 61, 120, 124, 194, 189, 212, 87, 43, 190, 163, 167, 90, 189, 44, 198, 96, 60, 155, 43, 68, 60, 29, 51, 145, 61, 156, 241, 207, 61, 31, 115, 80, 190, 95, 110, 42, 62, 101, 125, 254, 188, 103, 37, 23, 62, 141, 188, 3, 190, 132, 11, 129, 187, 193, 120, 191, 189, 49, 118, 21, 62, 152, 224, 231, 60, 190, 63, 11, 190, 192, 66, 13, 62, 251, 157, 216, 61, 20, 69, 32, 62, 214, 112, 106, 189, 48, 205, 94, 61, 234, 3, 18, 188, 228, 253, 88, 189, 79, 92, 49, 190, 185, 172, 182, 189, 47, 148, 3, 62, 120, 229, 44, 189, 127, 208, 157, 188, 155, 103, 101, 61, 92, 200, 9, 190, 236, 253, 5, 62, 0, 154, 116, 189, 158, 99, 132, 189, 20, 229, 62, 190, 46, 7, 85, 61, 216, 62, 251, 189, 137, 22, 232, 61, 93, 222, 206, 189, 29, 53, 103, 61, 219, 7, 226, 189, 254, 45, 19, 190, 43, 246, 241, 188, 38, 51, 220, 188, 206, 84, 89, 189, 35, 86, 161, 60, 51, 132, 1, 62, 10, 255, 228, 187, 241, 125, 196, 189, 173, 156, 52, 190, 22, 105, 29, 62, 248, 62, 52, 190, 18, 254, 247, 61, 143, 83, 7, 61, 249, 55, 3, 190, 82, 179, 19, 62, 206, 254, 194, 189, 150, 248, 156, 189, 175, 65, 15, 189, 61, 82, 29, 190, 212, 131, 122, 189, 174, 62, 145, 60, 111, 224, 157, 189, 152, 193, 231, 189, 153, 120, 25, 190, 221, 143, 146, 61, 57, 235, 33, 190, 42, 251, 243, 61, 243, 218, 200, 61, 185, 121, 129, 61, 161, 110, 244, 61, 36, 176, 80, 188, 171, 9, 160, 61, 14, 163, 217, 189, 229, 251, 157, 61, 222, 185, 213, 189, 196, 237, 56, 190, 62, 93, 114, 62, 42, 131, 183, 190, 255, 229, 202, 190, 186, 92, 126, 62, 74, 122, 105, 61, 135, 137, 186, 61, 172, 21, 126, 191, 185, 84, 11, 62, 38, 226, 230, 61, 217, 112, 122, 190, 32, 110, 62, 190, 138, 97, 142, 62, 123, 49, 32, 191, 125, 97, 61, 62, 173, 18, 62, 190, 42, 243, 14, 62, 91, 25, 191, 189, 96, 216, 171, 190, 4, 57, 245, 61, 76, 240, 44, 62, 93, 106, 183, 188, 70, 0, 186, 61, 168, 152, 132, 62, 14, 7, 66, 189, 167, 160, 225, 190, 55, 155, 159, 190, 186, 34, 10, 191, 161, 79, 100, 188, 54, 131, 5, 190, 73, 172, 112, 189, 191, 24, 137, 190, 35, 14, 103, 62, 147, 187, 12, 190, 179, 74, 164, 189, 68, 174, 22, 62, 212, 9, 34, 62, 210, 18, 93, 62, 121, 239, 196, 62, 202, 224, 213, 62, 32, 36, 32, 189, 161, 27, 228, 59, 78, 159, 9, 62, 209, 105, 70, 191, 135, 77, 245, 190, 70, 184, 88, 188, 220, 23, 19, 60, 244, 67, 129, 190, 97, 156, 44, 190, 84, 249, 57, 62, 30, 205, 112, 62, 186, 155, 29, 190, 43, 59, 172, 190, 137, 3, 37, 62, 120, 112, 135, 190, 80, 204, 207, 188, 53, 101, 88, 191, 211, 13, 106, 62, 93, 177, 186, 60, 210, 140, 143, 62, 253, 26, 145, 190, 64, 99, 170, 189, 238, 190, 83, 61, 124, 149, 102, 188, 152, 194, 75, 61, 184, 204, 4, 62, 111, 72, 226, 189, 147, 64, 158, 189, 104, 34, 55, 62, 65, 57, 88, 62, 210, 71, 34, 189, 67, 122, 25, 191, 219, 83, 45, 189, 24, 140, 208, 187, 219, 73, 216, 190, 52, 35, 22, 189, 35, 213, 172, 61, 6, 149, 45, 190, 60, 161, 250, 60, 95, 173, 112, 61, 91, 252, 27, 62, 40, 19, 0, 189, 249, 228, 110, 62, 118, 99, 176, 60, 250, 95, 158, 62, 216, 146, 162, 62, 168, 159, 137, 190, 240, 243, 21, 62, 157, 123, 187, 61, 34, 213, 55, 190, 110, 171, 43, 190, 34, 58, 204, 189, 209, 167, 62, 61, 71, 215, 9, 61, 42, 92, 2, 62, 62, 15, 163, 61, 124, 32, 206, 61, 111, 185, 163, 61, 61, 208, 17, 190, 63, 69, 23, 190, 34, 199, 212, 61, 253, 89, 241, 188, 14, 185, 177, 188, 150, 192, 12, 191, 63, 7, 66, 61, 230, 100, 62, 189, 192, 226, 178, 61, 252, 53, 74, 61, 89, 125, 11, 189, 204, 52, 14, 191, 155, 219, 74, 62, 32, 103, 137, 60, 62, 35, 195, 61, 2, 206, 47, 190, 22, 168, 41, 188, 9, 209, 215, 188, 213, 208, 62, 62, 200, 254, 219, 189, 23, 37, 45, 62, 242, 93, 23, 62, 203, 135, 0, 190, 32, 131, 22, 190, 35, 246, 123, 190, 215, 44, 164, 61, 39, 176, 174, 60, 178, 12, 121, 60, 206, 16, 48, 190, 196, 79, 151, 188, 222, 211, 110, 59, 208, 241, 52, 61, 33, 25, 61, 191, 208, 159, 48, 62, 201, 136, 135, 191, 253, 88, 152, 62, 251, 248, 253, 60, 177, 9, 140, 189, 60, 248, 44, 190, 87, 117, 106, 61, 102, 105, 149, 189, 14, 200, 74, 189, 229, 35, 235, 189, 68, 163, 152, 189, 229, 236, 153, 62, 94, 248, 57, 189, 215, 50, 16, 61, 190, 31, 103, 62, 250, 5, 118, 190, 188, 177, 237, 61, 125, 253, 169, 61, 7, 55, 39, 62, 160, 167, 28, 189, 233, 51, 244, 59, 177, 213, 174, 60, 53, 169, 150, 62, 117, 16, 136, 62, 248, 243, 165, 190, 187, 61, 43, 62, 24, 67, 167, 190, 67, 187, 197, 190, 125, 165, 108, 189, 203, 48, 66, 62, 36, 168, 235, 59, 213, 182, 18, 191, 25, 200, 214, 62, 130, 104, 184, 189, 11, 157, 130, 61, 119, 53, 189, 189, 3, 114, 26, 62, 125, 227, 242, 61, 60, 175, 194, 189, 245, 163, 228, 62, 234, 34, 68, 61, 94, 163, 203, 189, 99, 197, 54, 62, 82, 94, 19, 60, 43, 211, 110, 190, 20, 215, 206, 190, 224, 158, 130, 62, 198, 169, 174, 61, 58, 215, 8, 190, 225, 125, 217, 189, 191, 250, 55, 61, 108, 109, 126, 190, 111, 88, 146, 189, 241, 252, 165, 190, 71, 193, 191, 61, 91, 9, 133, 62, 61, 29, 24, 61, 117, 175, 149, 189, 246, 157, 192, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {142, 35, 125, 62, 2, 188, 83, 62, 120, 139, 1, 190, 223, 79, 26, 62, 222, 220, 129, 189, 57, 84, 2, 62, 43, 86, 74, 62, 240, 180, 49, 189, 21, 28, 32, 62, 133, 122, 209, 189, 77, 84, 232, 60, 224, 67, 110, 62, 231, 77, 72, 189, 174, 102, 160, 62, 184, 8, 41, 190, 84, 88, 132, 190, 102, 246, 151, 62, 46, 241, 177, 61, 6, 7, 61, 62, 61, 176, 24, 62, 194, 169, 55, 62, 101, 171, 58, 190, 82, 252, 231, 61, 188, 53, 5, 190, 76, 190, 155, 189, 201, 50, 155, 189, 46, 46, 235, 60, 40, 39, 89, 62, 95, 128, 171, 61, 51, 15, 192, 61, 179, 184, 203, 189, 94, 175, 73, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 80, 91, 191, 151, 182, 0, 190, 234, 233, 208, 190, 28, 25, 0, 191, 140, 133, 204, 190, 145, 107, 39, 62, 233, 27, 205, 62, 109, 222, 22, 63, 44, 54, 199, 190, 13, 212, 233, 190, 93, 40, 151, 62, 212, 4, 64, 62, 30, 29, 226, 189, 71, 8, 93, 191, 3, 183, 7, 62, 142, 184, 82, 63, 69, 20, 129, 62, 255, 142, 33, 191, 187, 255, 143, 62, 117, 137, 150, 189, 110, 97, 139, 62, 212, 17, 234, 189, 84, 193, 51, 63, 51, 244, 160, 59, 63, 46, 29, 62, 164, 224, 230, 61, 18, 160, 225, 62, 119, 133, 205, 190, 128, 184, 16, 62, 238, 240, 61, 61, 162, 177, 106, 190, 189, 112, 234, 190, 54, 22, 89, 62, 172, 221, 138, 189, 29, 55, 19, 62, 81, 197, 54, 189, 168, 204, 212, 189, 237, 112, 130, 190, 205, 82, 167, 190, 166, 43, 108, 62, 201, 134, 183, 190, 248, 47, 14, 63, 28, 4, 143, 190, 169, 219, 228, 189, 129, 174, 216, 190, 108, 188, 185, 189, 13, 139, 38, 62, 163, 148, 110, 62, 100, 39, 253, 189, 72, 68, 196, 62, 51, 25, 55, 190, 6, 134, 252, 189, 226, 41, 126, 190, 50, 130, 232, 62, 62, 231, 131, 62, 70, 251, 5, 62, 11, 77, 251, 189, 23, 234, 179, 61, 213, 205, 69, 62, 1, 145, 78, 61, 104, 180, 173, 190, 149, 223, 41, 190, 127, 255, 106, 190, 99, 104, 250, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 249, 191, 61, 189, 41, 110, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {104, 32, 220, 191, 93, 82, 198, 189, 135, 175, 139, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {122, 215, 82, 192, 130, 40, 127, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0047/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}