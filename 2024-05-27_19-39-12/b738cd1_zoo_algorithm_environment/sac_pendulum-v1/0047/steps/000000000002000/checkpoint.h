// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 248, 207, 61, 74, 243, 157, 190, 205, 58, 25, 191, 37, 48, 13, 188, 252, 52, 28, 191, 247, 153, 176, 61, 191, 131, 38, 63, 28, 108, 11, 190, 169, 205, 0, 63, 24, 216, 134, 62, 76, 138, 101, 190, 200, 16, 19, 190, 225, 236, 155, 189, 185, 86, 178, 189, 0, 136, 129, 190, 114, 132, 0, 63, 6, 140, 202, 190, 203, 239, 152, 62, 27, 18, 186, 190, 223, 238, 137, 190, 108, 135, 168, 189, 26, 248, 236, 61, 207, 246, 235, 62, 109, 203, 220, 61, 245, 79, 226, 190, 231, 50, 196, 189, 142, 9, 109, 62, 57, 21, 156, 190, 111, 3, 143, 62, 154, 133, 7, 189, 49, 247, 213, 190, 183, 53, 87, 60, 230, 13, 199, 190, 130, 238, 232, 186, 28, 170, 59, 190, 204, 36, 133, 188, 94, 21, 36, 63, 110, 70, 201, 62, 157, 60, 252, 62, 193, 145, 132, 190, 228, 183, 74, 190, 58, 17, 249, 62, 96, 243, 253, 190, 155, 230, 212, 62, 53, 130, 210, 62, 86, 139, 145, 190, 111, 136, 66, 63, 22, 55, 85, 190, 240, 217, 199, 62, 164, 214, 134, 62, 5, 68, 134, 189, 90, 157, 73, 61, 29, 111, 84, 191, 173, 169, 165, 189, 168, 32, 241, 62, 115, 147, 35, 190, 242, 78, 180, 190, 191, 177, 47, 62, 23, 225, 72, 61, 165, 197, 18, 63, 88, 79, 35, 191, 74, 110, 74, 62, 145, 88, 6, 191, 120, 1, 143, 190, 117, 138, 194, 190, 29, 222, 186, 62, 119, 167, 137, 62, 100, 136, 29, 191, 221, 250, 116, 62, 220, 113, 128, 62, 91, 193, 193, 189, 207, 242, 163, 61, 138, 119, 61, 190, 110, 191, 80, 63, 192, 135, 160, 62, 75, 225, 242, 188, 197, 3, 235, 62, 94, 252, 111, 61, 24, 118, 97, 190, 248, 86, 180, 190, 1, 78, 250, 61, 183, 118, 28, 63, 164, 70, 163, 62, 34, 145, 242, 62, 0, 17, 81, 62, 67, 172, 56, 63, 95, 57, 3, 190, 190, 146, 198, 190, 132, 184, 0, 189, 8, 157, 120, 190, 72, 167, 5, 191, 217, 18, 46, 191, 91, 32, 228, 62, 28, 201, 3, 191, 178, 120, 85, 191, 67, 118, 9, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 157, 57, 191, 75, 207, 71, 62, 5, 132, 253, 61, 220, 255, 226, 62, 4, 17, 3, 191, 163, 182, 239, 190, 61, 139, 137, 62, 112, 67, 32, 63, 132, 46, 96, 62, 17, 221, 48, 190, 202, 164, 216, 62, 210, 168, 146, 190, 18, 139, 16, 191, 98, 64, 67, 190, 187, 36, 55, 189, 33, 99, 44, 58, 92, 146, 65, 190, 243, 168, 80, 62, 212, 142, 77, 189, 47, 5, 5, 191, 83, 156, 170, 62, 111, 14, 4, 62, 185, 78, 6, 63, 148, 69, 251, 62, 73, 211, 0, 63, 55, 70, 209, 62, 34, 63, 177, 189, 31, 62, 129, 61, 85, 4, 196, 62, 18, 66, 41, 62, 2, 169, 220, 188, 225, 36, 108, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 205, 83, 190, 11, 83, 138, 190, 29, 177, 189, 189, 68, 34, 162, 189, 38, 210, 135, 188, 118, 199, 143, 189, 61, 217, 171, 61, 99, 35, 180, 62, 175, 75, 163, 189, 165, 201, 11, 62, 138, 175, 155, 61, 39, 68, 58, 189, 16, 142, 4, 62, 61, 187, 249, 60, 127, 18, 84, 189, 29, 66, 63, 188, 190, 218, 20, 61, 212, 124, 11, 189, 43, 120, 103, 190, 33, 248, 214, 189, 48, 28, 161, 60, 189, 158, 187, 189, 190, 108, 130, 190, 166, 88, 181, 189, 182, 67, 50, 62, 17, 89, 13, 62, 138, 80, 229, 190, 67, 174, 219, 189, 214, 11, 231, 60, 162, 169, 8, 62, 89, 224, 24, 190, 216, 252, 35, 190, 98, 182, 248, 60, 125, 111, 252, 60, 187, 136, 154, 188, 230, 52, 125, 189, 132, 164, 1, 189, 128, 253, 49, 62, 70, 95, 53, 189, 65, 156, 201, 61, 111, 29, 218, 189, 137, 3, 178, 188, 144, 12, 214, 188, 250, 109, 208, 61, 255, 115, 117, 189, 122, 236, 215, 59, 225, 2, 26, 190, 3, 42, 17, 61, 118, 98, 29, 61, 137, 237, 88, 61, 62, 185, 159, 60, 23, 12, 180, 61, 177, 86, 244, 61, 221, 33, 61, 61, 110, 33, 174, 189, 5, 174, 55, 189, 52, 3, 41, 60, 255, 151, 128, 61, 151, 109, 84, 190, 229, 187, 19, 189, 81, 159, 235, 61, 77, 145, 193, 189, 212, 180, 174, 61, 233, 15, 22, 190, 57, 115, 147, 190, 216, 213, 95, 189, 54, 59, 250, 186, 4, 247, 225, 189, 190, 92, 246, 189, 110, 222, 203, 188, 32, 143, 232, 61, 56, 42, 83, 61, 207, 194, 208, 61, 147, 0, 62, 62, 190, 12, 121, 62, 89, 57, 214, 61, 245, 222, 0, 62, 16, 40, 26, 62, 182, 77, 255, 61, 145, 203, 89, 62, 39, 255, 47, 190, 110, 49, 189, 190, 248, 33, 148, 190, 216, 5, 3, 62, 97, 131, 95, 61, 225, 46, 64, 189, 181, 222, 237, 61, 128, 132, 129, 61, 186, 105, 53, 62, 176, 116, 244, 61, 145, 33, 38, 190, 131, 190, 208, 188, 50, 76, 145, 61, 250, 119, 10, 189, 245, 248, 150, 189, 78, 221, 157, 190, 252, 23, 80, 189, 231, 217, 2, 62, 42, 126, 247, 57, 29, 202, 185, 61, 146, 156, 117, 190, 16, 29, 52, 61, 245, 122, 184, 189, 149, 193, 23, 61, 241, 219, 170, 189, 176, 30, 190, 189, 233, 219, 29, 190, 20, 118, 147, 61, 117, 17, 14, 190, 88, 196, 14, 190, 213, 192, 152, 189, 136, 17, 214, 60, 95, 11, 17, 61, 159, 239, 8, 190, 179, 99, 44, 62, 83, 160, 49, 189, 222, 220, 4, 190, 195, 78, 200, 60, 149, 239, 43, 190, 50, 228, 159, 189, 186, 199, 201, 189, 65, 158, 51, 62, 213, 246, 129, 189, 109, 110, 18, 190, 122, 55, 226, 61, 143, 24, 125, 188, 42, 47, 255, 61, 254, 180, 0, 190, 14, 176, 63, 60, 96, 48, 185, 188, 242, 24, 67, 62, 135, 175, 170, 61, 84, 217, 34, 190, 102, 72, 51, 61, 142, 47, 189, 189, 28, 194, 118, 62, 22, 175, 132, 61, 175, 48, 8, 62, 55, 16, 247, 60, 254, 227, 134, 61, 213, 157, 44, 62, 195, 29, 189, 189, 25, 82, 71, 61, 53, 92, 98, 59, 92, 9, 224, 60, 98, 183, 110, 190, 26, 144, 190, 189, 113, 135, 21, 189, 104, 239, 75, 61, 35, 60, 226, 189, 208, 74, 198, 189, 41, 63, 7, 62, 17, 124, 16, 189, 111, 172, 254, 61, 242, 100, 50, 190, 218, 239, 50, 62, 139, 81, 204, 61, 57, 192, 214, 61, 100, 176, 219, 58, 159, 178, 221, 189, 50, 86, 148, 189, 163, 248, 61, 62, 226, 243, 188, 61, 24, 200, 204, 61, 134, 206, 94, 188, 190, 95, 22, 189, 103, 89, 1, 189, 51, 181, 233, 189, 53, 28, 201, 190, 29, 22, 137, 190, 117, 127, 205, 61, 45, 196, 154, 61, 146, 172, 24, 62, 30, 128, 251, 189, 178, 236, 52, 190, 206, 138, 129, 61, 67, 153, 228, 61, 133, 4, 2, 188, 246, 207, 151, 61, 181, 186, 12, 190, 140, 183, 14, 62, 117, 201, 72, 189, 10, 175, 122, 62, 17, 52, 68, 62, 75, 42, 153, 190, 154, 153, 17, 190, 161, 77, 133, 190, 115, 92, 246, 61, 226, 97, 128, 61, 48, 153, 177, 189, 12, 68, 158, 189, 138, 14, 215, 188, 30, 25, 30, 189, 130, 55, 85, 62, 105, 0, 4, 62, 218, 67, 58, 59, 165, 41, 196, 61, 9, 226, 86, 62, 130, 166, 187, 189, 250, 253, 216, 61, 193, 229, 232, 60, 194, 131, 192, 189, 204, 15, 87, 61, 27, 75, 179, 61, 132, 127, 225, 189, 19, 14, 176, 189, 65, 225, 9, 190, 30, 26, 11, 189, 127, 139, 21, 62, 223, 7, 235, 61, 243, 130, 209, 188, 208, 127, 32, 190, 8, 250, 43, 190, 99, 51, 167, 188, 99, 234, 198, 189, 128, 4, 18, 62, 253, 160, 9, 61, 124, 135, 245, 189, 50, 168, 70, 190, 40, 173, 234, 188, 88, 9, 0, 190, 4, 124, 61, 190, 149, 183, 156, 60, 235, 3, 121, 190, 251, 5, 50, 62, 125, 9, 211, 62, 10, 97, 95, 190, 24, 201, 58, 62, 92, 121, 129, 189, 21, 46, 176, 190, 249, 157, 42, 62, 1, 237, 56, 189, 163, 251, 156, 62, 116, 247, 176, 189, 39, 178, 189, 189, 156, 212, 248, 61, 177, 94, 113, 190, 185, 29, 127, 188, 23, 117, 52, 62, 20, 122, 221, 187, 243, 199, 80, 62, 162, 106, 187, 62, 208, 95, 150, 62, 84, 158, 86, 190, 74, 86, 107, 188, 213, 132, 12, 61, 136, 1, 26, 62, 210, 89, 79, 60, 192, 201, 248, 189, 190, 170, 115, 190, 69, 237, 6, 62, 1, 110, 151, 189, 68, 253, 163, 188, 230, 94, 43, 189, 41, 6, 88, 62, 222, 255, 151, 62, 129, 34, 56, 190, 108, 213, 65, 190, 161, 161, 74, 62, 181, 143, 177, 189, 167, 6, 99, 190, 188, 96, 82, 62, 108, 149, 71, 190, 179, 249, 155, 61, 101, 220, 13, 190, 23, 137, 18, 188, 167, 191, 111, 190, 190, 160, 255, 61, 73, 168, 89, 60, 38, 179, 211, 189, 112, 166, 15, 62, 250, 161, 26, 62, 102, 225, 56, 62, 227, 230, 50, 190, 215, 212, 5, 62, 209, 177, 250, 189, 108, 130, 42, 190, 126, 160, 27, 61, 61, 157, 183, 61, 140, 55, 8, 61, 17, 119, 186, 61, 89, 55, 10, 62, 159, 75, 156, 189, 53, 20, 65, 61, 58, 163, 133, 62, 244, 213, 19, 61, 206, 83, 34, 62, 101, 3, 237, 189, 134, 73, 220, 61, 166, 107, 12, 190, 47, 111, 165, 189, 91, 29, 199, 61, 220, 108, 171, 61, 208, 81, 12, 62, 10, 204, 164, 61, 67, 194, 6, 190, 182, 157, 50, 190, 86, 58, 77, 190, 147, 235, 17, 190, 3, 214, 133, 188, 226, 178, 8, 190, 181, 223, 222, 58, 133, 89, 98, 61, 63, 233, 29, 189, 134, 168, 246, 60, 236, 175, 247, 61, 78, 183, 254, 61, 201, 177, 9, 62, 35, 115, 155, 61, 78, 73, 53, 190, 11, 185, 175, 61, 16, 53, 45, 189, 177, 119, 242, 189, 178, 208, 118, 190, 94, 82, 130, 60, 81, 76, 200, 61, 255, 213, 37, 190, 204, 89, 207, 189, 72, 2, 180, 61, 29, 79, 55, 189, 46, 39, 9, 190, 38, 198, 146, 189, 66, 91, 41, 190, 58, 149, 63, 62, 121, 230, 242, 189, 207, 114, 7, 190, 243, 7, 46, 62, 91, 46, 181, 61, 102, 20, 76, 62, 108, 238, 66, 61, 70, 69, 200, 189, 62, 95, 124, 188, 223, 58, 10, 190, 226, 192, 116, 189, 237, 4, 44, 59, 69, 211, 174, 190, 79, 160, 156, 61, 3, 89, 160, 62, 86, 226, 142, 62, 10, 228, 82, 190, 173, 203, 42, 190, 210, 53, 52, 62, 230, 13, 1, 62, 73, 133, 154, 60, 38, 167, 10, 62, 163, 1, 211, 61, 173, 6, 50, 62, 110, 41, 191, 61, 190, 231, 147, 190, 22, 44, 158, 187, 163, 88, 54, 62, 24, 242, 160, 62, 81, 64, 45, 58, 90, 140, 37, 62, 25, 250, 225, 189, 236, 96, 55, 62, 126, 42, 175, 189, 126, 179, 146, 189, 107, 111, 48, 190, 215, 23, 227, 189, 21, 56, 18, 59, 252, 131, 165, 60, 45, 116, 2, 62, 15, 170, 228, 189, 119, 84, 246, 189, 102, 172, 34, 62, 95, 245, 128, 61, 25, 62, 3, 60, 196, 179, 187, 60, 26, 122, 93, 62, 27, 195, 150, 62, 136, 233, 5, 189, 30, 110, 151, 189, 65, 159, 190, 61, 160, 213, 34, 62, 174, 82, 5, 62, 115, 243, 91, 189, 22, 140, 218, 188, 160, 22, 249, 61, 95, 158, 17, 189, 106, 160, 210, 189, 92, 249, 51, 62, 162, 83, 15, 190, 31, 88, 208, 188, 115, 188, 155, 61, 35, 27, 211, 188, 226, 113, 169, 61, 179, 8, 186, 57, 46, 59, 104, 60, 231, 159, 16, 62, 140, 83, 26, 190, 95, 245, 57, 62, 143, 246, 55, 190, 76, 154, 42, 190, 100, 114, 8, 190, 174, 237, 54, 189, 24, 174, 225, 61, 72, 251, 240, 189, 226, 64, 154, 60, 12, 68, 131, 61, 71, 222, 10, 190, 100, 185, 216, 189, 50, 204, 238, 60, 11, 133, 187, 189, 112, 125, 172, 60, 14, 73, 253, 189, 53, 138, 161, 61, 236, 227, 43, 62, 51, 197, 161, 189, 245, 165, 187, 189, 160, 52, 221, 59, 255, 197, 82, 61, 94, 62, 51, 62, 178, 187, 88, 190, 5, 122, 154, 189, 109, 141, 223, 61, 9, 153, 137, 190, 7, 34, 131, 190, 38, 63, 28, 62, 9, 157, 75, 188, 221, 3, 197, 189, 98, 242, 21, 62, 152, 240, 35, 61, 100, 48, 43, 62, 60, 73, 20, 59, 139, 239, 36, 62, 251, 24, 112, 60, 31, 195, 130, 188, 252, 160, 220, 187, 22, 130, 89, 190, 113, 76, 125, 61, 248, 178, 58, 62, 255, 27, 253, 61, 229, 153, 185, 190, 21, 207, 133, 190, 34, 228, 42, 190, 140, 98, 42, 62, 190, 75, 97, 190, 136, 251, 170, 59, 181, 21, 82, 62, 225, 173, 45, 61, 24, 234, 210, 62, 106, 125, 189, 190, 211, 98, 131, 59, 215, 219, 158, 61, 255, 134, 5, 62, 106, 80, 161, 190, 37, 220, 15, 191, 149, 39, 205, 61, 8, 146, 207, 189, 155, 34, 128, 189, 47, 198, 195, 61, 138, 29, 18, 190, 181, 3, 158, 59, 246, 182, 13, 62, 37, 232, 214, 188, 203, 169, 138, 189, 5, 223, 13, 190, 211, 177, 23, 62, 182, 117, 107, 189, 248, 10, 187, 61, 39, 15, 20, 62, 210, 160, 24, 62, 240, 114, 150, 189, 26, 210, 75, 61, 89, 24, 135, 62, 93, 121, 39, 61, 116, 37, 145, 188, 4, 79, 223, 61, 5, 156, 168, 61, 15, 149, 48, 61, 63, 192, 217, 189, 48, 101, 0, 190, 232, 96, 55, 59, 160, 231, 5, 190, 200, 32, 221, 61, 24, 137, 100, 189, 104, 35, 88, 189, 97, 164, 16, 62, 79, 132, 115, 59, 23, 88, 1, 190, 245, 153, 182, 189, 129, 13, 11, 190, 108, 108, 239, 189, 183, 8, 73, 58, 59, 207, 166, 61, 0, 83, 107, 190, 250, 26, 16, 61, 54, 236, 189, 60, 239, 116, 151, 189, 84, 68, 185, 189, 176, 217, 255, 188, 26, 155, 19, 62, 45, 216, 223, 60, 135, 246, 19, 62, 98, 192, 142, 190, 113, 110, 202, 61, 10, 65, 136, 58, 40, 161, 147, 189, 152, 42, 164, 61, 247, 250, 31, 190, 14, 183, 37, 190, 96, 242, 230, 61, 10, 190, 130, 189, 222, 49, 0, 61, 229, 131, 173, 189, 244, 11, 90, 189, 227, 174, 138, 188, 18, 223, 5, 62, 245, 171, 160, 189, 83, 10, 222, 189, 223, 199, 115, 189, 49, 205, 121, 189, 210, 82, 202, 62, 64, 81, 5, 190, 76, 174, 124, 62, 17, 153, 219, 60, 189, 32, 35, 190, 222, 4, 171, 61, 93, 224, 237, 189, 191, 200, 185, 189, 159, 176, 77, 190, 205, 13, 239, 61, 210, 62, 230, 189, 183, 87, 184, 188, 58, 103, 1, 189, 173, 116, 82, 61, 156, 149, 211, 189, 205, 183, 197, 188, 92, 237, 45, 60, 72, 202, 164, 61, 115, 254, 86, 190, 51, 46, 211, 61, 247, 47, 132, 188, 139, 94, 105, 62, 250, 219, 74, 61, 101, 110, 103, 189, 99, 3, 132, 60, 6, 140, 25, 62, 188, 122, 23, 190, 99, 58, 40, 62, 146, 40, 39, 189, 19, 73, 142, 62, 19, 89, 178, 62, 52, 130, 171, 60, 216, 72, 155, 187, 165, 227, 251, 61, 109, 98, 2, 189, 232, 0, 11, 190, 161, 220, 130, 188, 55, 199, 194, 189, 97, 156, 28, 190, 86, 30, 61, 61, 134, 163, 196, 189, 160, 75, 131, 189, 16, 115, 30, 190, 2, 67, 11, 62, 66, 128, 10, 189, 157, 2, 162, 189, 212, 22, 34, 190, 151, 243, 134, 189, 161, 57, 142, 190, 191, 17, 145, 190, 57, 166, 109, 60, 179, 8, 180, 59, 228, 16, 50, 190, 129, 247, 161, 189, 135, 242, 28, 61, 60, 6, 232, 61, 146, 113, 171, 189, 46, 95, 112, 189, 105, 215, 154, 60, 173, 106, 33, 62, 69, 153, 225, 189, 130, 115, 231, 61, 205, 180, 110, 190, 125, 190, 218, 187, 98, 187, 164, 188, 210, 229, 79, 61, 160, 214, 7, 62, 147, 80, 232, 188, 199, 142, 192, 189, 129, 137, 9, 190, 110, 84, 216, 61, 63, 52, 138, 190, 15, 189, 92, 190, 160, 221, 26, 61, 2, 132, 189, 61, 93, 3, 13, 60, 67, 194, 47, 190, 145, 67, 83, 189, 236, 116, 41, 62, 82, 236, 31, 62, 73, 198, 5, 62, 195, 63, 154, 60, 90, 208, 57, 188, 112, 175, 179, 60, 105, 94, 13, 190, 181, 164, 69, 189, 194, 5, 112, 62, 1, 55, 250, 189, 173, 195, 4, 190, 65, 68, 206, 189, 252, 87, 147, 189, 146, 175, 119, 62, 143, 196, 74, 189, 179, 69, 159, 189, 183, 178, 113, 189, 138, 212, 40, 190, 126, 149, 161, 61, 142, 120, 111, 62, 101, 255, 179, 61, 220, 49, 191, 61, 217, 25, 62, 60, 53, 74, 161, 61, 121, 197, 58, 62, 165, 36, 223, 189, 217, 160, 29, 61, 24, 128, 93, 189, 148, 180, 39, 189, 63, 206, 117, 189, 156, 167, 19, 62, 239, 10, 125, 61, 172, 107, 255, 61, 167, 89, 181, 189, 62, 135, 89, 189, 150, 116, 25, 190, 222, 18, 20, 62, 39, 138, 26, 61, 142, 14, 20, 61, 58, 224, 101, 61, 207, 145, 184, 61, 193, 129, 239, 61, 173, 34, 14, 62, 232, 14, 186, 61, 65, 90, 70, 189, 64, 243, 233, 61, 93, 145, 185, 189, 113, 214, 56, 189, 180, 165, 4, 190, 20, 150, 21, 189, 29, 126, 103, 62, 217, 189, 221, 61, 206, 53, 140, 189, 89, 188, 17, 190, 167, 238, 100, 190, 15, 4, 130, 189, 100, 189, 71, 62, 238, 109, 31, 189, 223, 196, 207, 189, 180, 114, 44, 61, 161, 171, 164, 60, 46, 242, 125, 190, 13, 4, 191, 60, 220, 221, 46, 60, 141, 132, 51, 61, 82, 199, 128, 188, 66, 133, 8, 62, 175, 144, 137, 62, 187, 160, 30, 190, 208, 168, 236, 189, 253, 49, 27, 189, 154, 193, 75, 62, 15, 158, 85, 62, 196, 18, 149, 189, 202, 21, 175, 189, 94, 125, 32, 189, 128, 228, 56, 60, 125, 58, 185, 60, 16, 225, 174, 189, 210, 226, 234, 61, 234, 189, 84, 61, 168, 221, 180, 189, 99, 252, 0, 190, 129, 247, 1, 62, 154, 109, 63, 190, 167, 48, 58, 61, 112, 0, 19, 61, 255, 177, 92, 190, 140, 17, 42, 190, 149, 33, 17, 190, 208, 29, 132, 61, 196, 121, 60, 189, 123, 4, 41, 190, 142, 188, 255, 188, 96, 131, 37, 189, 98, 198, 147, 188, 108, 209, 130, 190, 1, 85, 69, 189, 7, 168, 58, 190, 166, 102, 244, 61, 238, 89, 215, 61, 104, 47, 194, 61, 127, 149, 23, 62, 16, 106, 40, 190, 53, 171, 155, 188, 115, 138, 221, 61, 21, 244, 235, 61, 20, 96, 17, 190, 184, 12, 251, 61, 239, 87, 66, 61, 63, 105, 90, 189, 6, 22, 194, 189, 43, 142, 49, 190, 87, 47, 13, 61, 28, 98, 218, 62, 137, 123, 130, 190, 186, 131, 165, 61, 31, 207, 51, 62, 192, 228, 82, 190, 216, 158, 61, 62, 114, 203, 162, 189, 51, 93, 146, 60, 239, 109, 12, 189, 174, 224, 188, 61, 89, 242, 136, 61, 21, 115, 25, 190, 93, 41, 158, 61, 21, 43, 63, 61, 6, 156, 197, 190, 134, 183, 24, 189, 42, 239, 156, 61, 242, 153, 105, 61, 62, 225, 71, 190, 46, 154, 102, 188, 202, 138, 171, 189, 107, 6, 157, 61, 161, 250, 132, 62, 6, 42, 225, 61, 239, 104, 15, 190, 255, 114, 59, 62, 156, 47, 102, 190, 112, 205, 178, 190, 205, 81, 251, 189, 243, 97, 135, 62, 200, 228, 1, 62, 69, 247, 169, 61, 244, 156, 176, 189, 82, 195, 21, 190, 53, 71, 226, 61, 233, 55, 172, 188, 151, 98, 42, 190, 62, 49, 32, 61, 87, 94, 115, 190, 58, 217, 36, 62, 82, 20, 148, 189, 186, 115, 43, 190, 34, 190, 221, 189, 161, 55, 145, 61, 120, 26, 36, 190, 78, 254, 149, 189, 116, 30, 11, 62, 127, 186, 22, 62, 25, 33, 61, 190, 124, 225, 84, 190, 181, 206, 14, 190, 43, 123, 246, 61, 125, 161, 240, 61, 120, 124, 194, 189, 210, 162, 42, 190, 227, 121, 93, 189, 53, 76, 241, 60, 155, 43, 68, 60, 29, 51, 145, 61, 74, 77, 246, 61, 107, 147, 70, 190, 95, 110, 42, 62, 101, 125, 254, 188, 112, 134, 35, 62, 18, 111, 18, 190, 104, 191, 84, 188, 79, 52, 180, 189, 35, 233, 28, 62, 92, 123, 151, 60, 58, 177, 8, 190, 16, 196, 25, 62, 159, 48, 252, 61, 170, 202, 33, 62, 39, 131, 77, 189, 48, 205, 94, 61, 53, 92, 231, 58, 46, 3, 3, 189, 235, 238, 7, 190, 114, 13, 151, 189, 42, 13, 15, 62, 82, 57, 64, 189, 221, 44, 99, 59, 162, 108, 149, 61, 16, 80, 0, 190, 226, 71, 17, 62, 49, 52, 148, 189, 223, 184, 139, 189, 193, 142, 35, 190, 41, 37, 142, 61, 52, 75, 245, 189, 133, 47, 229, 61, 40, 2, 162, 189, 100, 160, 130, 61, 253, 205, 197, 189, 245, 36, 17, 190, 43, 246, 241, 188, 38, 51, 220, 188, 206, 84, 89, 189, 35, 86, 161, 60, 51, 132, 1, 62, 10, 255, 228, 187, 241, 125, 196, 189, 173, 156, 52, 190, 22, 105, 29, 62, 248, 62, 52, 190, 18, 254, 247, 61, 143, 83, 7, 61, 249, 55, 3, 190, 82, 179, 19, 62, 206, 254, 194, 189, 150, 248, 156, 189, 175, 65, 15, 189, 61, 82, 29, 190, 212, 131, 122, 189, 174, 62, 145, 60, 111, 224, 157, 189, 152, 193, 231, 189, 153, 120, 25, 190, 221, 143, 146, 61, 57, 235, 33, 190, 42, 251, 243, 61, 243, 218, 200, 61, 185, 121, 129, 61, 161, 110, 244, 61, 36, 176, 80, 188, 171, 9, 160, 61, 14, 163, 217, 189, 39, 120, 159, 189, 35, 250, 72, 62, 131, 47, 173, 188, 132, 72, 132, 62, 246, 23, 101, 190, 185, 54, 168, 190, 143, 11, 198, 62, 82, 248, 67, 189, 204, 146, 25, 62, 70, 164, 94, 189, 38, 73, 170, 61, 38, 226, 230, 61, 227, 60, 51, 188, 85, 225, 195, 189, 91, 85, 192, 61, 221, 126, 15, 191, 110, 45, 96, 61, 199, 220, 102, 62, 160, 52, 14, 59, 40, 231, 175, 60, 172, 36, 38, 190, 24, 238, 81, 62, 248, 212, 131, 62, 0, 31, 38, 187, 107, 176, 81, 189, 208, 39, 1, 62, 63, 154, 226, 61, 118, 238, 116, 190, 211, 26, 48, 190, 228, 71, 158, 189, 218, 169, 4, 61, 113, 15, 85, 61, 255, 204, 10, 189, 153, 44, 82, 190, 87, 32, 197, 61, 113, 193, 45, 190, 238, 57, 116, 61, 244, 204, 2, 61, 91, 196, 229, 61, 159, 237, 120, 62, 8, 247, 17, 62, 140, 194, 132, 62, 254, 238, 85, 189, 108, 120, 216, 59, 5, 164, 133, 189, 106, 253, 86, 190, 170, 201, 210, 61, 76, 92, 164, 61, 235, 222, 205, 188, 114, 55, 59, 190, 212, 251, 179, 189, 99, 7, 144, 189, 17, 49, 85, 62, 244, 53, 199, 61, 49, 75, 138, 190, 203, 46, 239, 61, 88, 36, 53, 189, 35, 254, 142, 187, 89, 65, 165, 190, 146, 46, 162, 61, 131, 70, 244, 61, 198, 163, 37, 62, 42, 187, 159, 190, 191, 226, 216, 190, 134, 200, 191, 61, 207, 100, 167, 61, 19, 38, 190, 61, 1, 122, 8, 62, 6, 253, 79, 189, 210, 217, 32, 61, 132, 66, 158, 61, 230, 75, 190, 61, 239, 56, 7, 190, 12, 118, 160, 190, 70, 243, 139, 189, 162, 227, 198, 187, 103, 67, 73, 190, 147, 112, 173, 188, 202, 81, 139, 58, 191, 72, 101, 189, 245, 123, 82, 189, 104, 21, 177, 61, 116, 83, 37, 62, 231, 219, 131, 60, 102, 103, 81, 62, 94, 212, 107, 61, 41, 105, 157, 62, 76, 111, 150, 62, 43, 83, 142, 190, 45, 198, 88, 61, 172, 64, 48, 62, 159, 204, 3, 190, 166, 243, 102, 189, 213, 49, 153, 189, 43, 35, 22, 61, 168, 72, 234, 61, 77, 80, 73, 62, 88, 20, 75, 62, 237, 102, 210, 61, 6, 122, 183, 61, 8, 252, 30, 190, 157, 21, 24, 190, 206, 202, 128, 61, 59, 146, 255, 189, 115, 171, 147, 189, 64, 206, 243, 189, 9, 178, 229, 61, 237, 197, 61, 189, 111, 106, 11, 62, 148, 214, 188, 60, 65, 22, 64, 190, 34, 19, 88, 190, 211, 25, 27, 62, 126, 5, 136, 61, 66, 163, 235, 61, 125, 222, 36, 190, 107, 221, 12, 61, 80, 55, 161, 188, 178, 76, 70, 62, 229, 112, 25, 190, 189, 59, 146, 61, 107, 96, 150, 61, 158, 212, 64, 189, 90, 78, 46, 190, 109, 115, 129, 189, 169, 216, 236, 61, 130, 9, 14, 61, 28, 168, 1, 62, 64, 222, 125, 60, 29, 247, 17, 190, 248, 177, 194, 189, 189, 181, 134, 189, 209, 77, 16, 190, 167, 32, 27, 62, 35, 188, 98, 190, 59, 254, 111, 62, 231, 155, 17, 61, 159, 172, 231, 59, 48, 133, 55, 189, 87, 117, 106, 61, 87, 58, 230, 189, 152, 160, 66, 61, 42, 23, 121, 60, 142, 246, 35, 189, 122, 221, 45, 62, 19, 158, 215, 189, 18, 102, 112, 61, 180, 107, 67, 62, 97, 144, 163, 189, 64, 88, 52, 62, 154, 174, 157, 60, 98, 67, 219, 61, 121, 243, 230, 188, 146, 134, 167, 188, 100, 226, 33, 62, 33, 131, 73, 62, 118, 20, 82, 62, 48, 97, 36, 189, 166, 104, 17, 62, 15, 164, 109, 190, 14, 30, 115, 190, 97, 145, 44, 190, 245, 20, 92, 61, 70, 131, 72, 189, 25, 82, 4, 190, 210, 44, 141, 62, 199, 88, 211, 61, 59, 110, 201, 61, 221, 163, 67, 189, 238, 75, 223, 61, 131, 42, 214, 61, 60, 175, 194, 189, 94, 114, 48, 62, 218, 104, 30, 62, 253, 57, 40, 62, 139, 33, 62, 62, 12, 73, 157, 188, 89, 148, 175, 190, 47, 233, 121, 190, 59, 71, 9, 62, 45, 163, 139, 61, 217, 249, 75, 189, 202, 250, 212, 189, 46, 184, 78, 61, 156, 245, 1, 190, 95, 73, 151, 188, 53, 202, 63, 190, 77, 52, 194, 189, 247, 138, 139, 62, 207, 18, 255, 188, 218, 209, 111, 188, 11, 113, 151, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 9, 40, 62, 114, 10, 30, 62, 53, 111, 63, 188, 184, 35, 198, 61, 27, 154, 139, 189, 127, 203, 99, 60, 124, 104, 21, 62, 111, 249, 166, 189, 196, 82, 58, 62, 44, 88, 10, 190, 175, 157, 81, 189, 134, 146, 43, 62, 238, 104, 108, 189, 255, 50, 158, 62, 227, 241, 35, 190, 30, 68, 121, 189, 101, 203, 128, 62, 128, 32, 219, 61, 226, 248, 8, 62, 208, 113, 8, 62, 173, 123, 48, 62, 51, 163, 34, 190, 35, 156, 220, 61, 242, 133, 244, 189, 241, 45, 139, 189, 201, 50, 155, 189, 213, 20, 16, 59, 163, 44, 59, 62, 31, 221, 37, 188, 32, 251, 245, 60, 122, 17, 9, 190, 146, 187, 98, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 61, 195, 190, 36, 204, 193, 188, 133, 129, 96, 190, 208, 241, 90, 190, 67, 212, 45, 190, 152, 21, 179, 61, 222, 247, 47, 62, 34, 137, 179, 62, 198, 85, 134, 190, 94, 200, 90, 189, 202, 137, 64, 62, 26, 162, 3, 62, 219, 107, 202, 189, 19, 226, 246, 190, 89, 166, 224, 61, 165, 170, 224, 61, 4, 26, 124, 62, 40, 43, 74, 189, 27, 202, 62, 62, 50, 28, 26, 190, 213, 98, 217, 61, 14, 22, 24, 61, 82, 177, 144, 62, 175, 140, 105, 189, 191, 10, 29, 62, 164, 224, 230, 61, 123, 112, 81, 62, 72, 183, 103, 190, 193, 104, 28, 62, 14, 52, 223, 61, 233, 14, 10, 190, 69, 78, 128, 190, 160, 42, 195, 60, 232, 40, 158, 189, 218, 226, 174, 61, 126, 79, 232, 61, 47, 25, 192, 189, 218, 102, 8, 190, 123, 11, 198, 189, 56, 123, 4, 62, 203, 113, 76, 190, 254, 50, 7, 62, 253, 76, 55, 190, 105, 155, 206, 189, 174, 17, 35, 190, 244, 44, 22, 190, 7, 111, 221, 61, 161, 233, 35, 62, 168, 32, 208, 189, 219, 240, 42, 62, 65, 60, 69, 190, 125, 130, 223, 189, 100, 118, 25, 190, 81, 23, 70, 62, 153, 51, 43, 62, 116, 70, 13, 62, 83, 152, 14, 190, 23, 234, 179, 61, 204, 157, 43, 58, 146, 156, 96, 59, 39, 161, 152, 190, 10, 32, 18, 190, 29, 193, 7, 190, 19, 229, 26, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 207, 103, 61, 80, 37, 168, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {226, 185, 137, 63, 162, 178, 128, 62, 18, 46, 135, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {108, 142, 5, 191, 134, 214, 148, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0047/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}