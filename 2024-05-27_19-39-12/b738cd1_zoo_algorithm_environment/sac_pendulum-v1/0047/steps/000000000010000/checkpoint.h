// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {85, 200, 17, 63, 247, 141, 84, 191, 73, 172, 11, 191, 177, 73, 69, 61, 30, 255, 37, 191, 64, 9, 10, 62, 205, 211, 9, 63, 97, 115, 109, 62, 193, 185, 27, 63, 41, 110, 208, 62, 213, 219, 130, 190, 2, 251, 191, 61, 81, 249, 35, 63, 4, 182, 191, 190, 89, 118, 145, 190, 27, 160, 223, 62, 67, 255, 152, 190, 102, 39, 176, 62, 187, 23, 227, 190, 236, 26, 53, 191, 189, 192, 128, 60, 184, 31, 63, 60, 246, 92, 19, 63, 31, 42, 28, 188, 167, 96, 7, 191, 149, 129, 121, 61, 1, 12, 196, 62, 75, 14, 202, 190, 131, 95, 214, 190, 163, 158, 226, 189, 60, 254, 30, 191, 230, 144, 186, 190, 183, 188, 146, 190, 62, 224, 1, 187, 248, 126, 57, 190, 250, 32, 23, 188, 174, 175, 56, 63, 57, 159, 167, 63, 137, 66, 13, 63, 237, 95, 149, 190, 75, 0, 142, 63, 152, 9, 140, 62, 48, 22, 11, 191, 110, 144, 214, 63, 220, 8, 176, 62, 101, 149, 132, 190, 82, 174, 19, 63, 133, 26, 203, 190, 88, 109, 31, 63, 49, 52, 81, 63, 244, 240, 31, 190, 210, 2, 26, 62, 60, 128, 56, 191, 53, 111, 44, 62, 229, 216, 215, 62, 194, 181, 94, 191, 166, 228, 197, 190, 75, 43, 249, 61, 212, 104, 232, 62, 217, 154, 30, 63, 132, 193, 21, 191, 119, 64, 128, 191, 145, 225, 253, 190, 84, 66, 151, 190, 168, 104, 46, 63, 109, 23, 197, 62, 248, 98, 215, 62, 221, 8, 229, 190, 248, 46, 45, 62, 67, 236, 150, 185, 178, 153, 106, 189, 199, 241, 22, 61, 4, 142, 86, 190, 190, 193, 194, 63, 64, 143, 225, 62, 78, 247, 96, 190, 247, 137, 23, 63, 233, 11, 21, 62, 179, 75, 166, 190, 33, 73, 9, 63, 116, 132, 86, 62, 104, 155, 250, 62, 250, 235, 122, 63, 64, 176, 16, 63, 120, 118, 170, 62, 6, 5, 125, 63, 95, 68, 93, 190, 39, 245, 155, 190, 219, 139, 149, 191, 25, 153, 132, 190, 174, 70, 212, 189, 128, 225, 115, 189, 212, 196, 29, 63, 186, 57, 24, 191, 113, 237, 172, 61, 63, 9, 186, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {189, 79, 66, 191, 243, 108, 190, 61, 61, 106, 191, 61, 37, 130, 151, 62, 199, 162, 93, 191, 173, 63, 142, 190, 171, 229, 185, 62, 160, 74, 38, 63, 214, 98, 219, 189, 129, 199, 193, 190, 248, 244, 107, 62, 139, 193, 147, 190, 9, 63, 221, 190, 55, 45, 89, 190, 236, 87, 109, 190, 110, 206, 159, 190, 106, 233, 29, 190, 210, 80, 80, 62, 228, 45, 129, 61, 59, 14, 21, 191, 41, 217, 2, 62, 242, 199, 7, 190, 51, 0, 236, 62, 102, 44, 234, 62, 121, 21, 175, 62, 230, 41, 204, 62, 9, 90, 141, 190, 9, 17, 79, 188, 0, 120, 82, 62, 122, 137, 11, 190, 195, 94, 202, 190, 157, 203, 226, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 154, 170, 190, 22, 66, 103, 190, 52, 244, 112, 61, 37, 156, 96, 188, 225, 3, 100, 191, 68, 210, 145, 61, 145, 241, 217, 61, 69, 242, 210, 62, 229, 49, 4, 62, 118, 224, 180, 62, 59, 183, 14, 62, 39, 68, 58, 189, 44, 137, 102, 62, 2, 22, 74, 191, 71, 173, 78, 191, 9, 9, 143, 60, 109, 138, 69, 62, 250, 35, 148, 189, 58, 159, 181, 190, 64, 161, 30, 61, 84, 55, 104, 61, 16, 86, 23, 191, 125, 71, 154, 190, 109, 11, 47, 187, 70, 69, 47, 190, 193, 82, 83, 62, 216, 2, 160, 191, 159, 79, 224, 60, 31, 206, 56, 61, 126, 221, 109, 62, 150, 136, 16, 190, 132, 80, 18, 62, 110, 189, 152, 188, 175, 210, 226, 189, 22, 217, 127, 189, 133, 146, 142, 189, 208, 43, 56, 191, 84, 215, 45, 190, 154, 174, 163, 61, 3, 175, 207, 61, 13, 176, 38, 61, 69, 155, 187, 189, 200, 118, 227, 60, 89, 122, 208, 61, 112, 61, 243, 189, 164, 247, 118, 190, 123, 243, 186, 190, 169, 209, 161, 189, 147, 255, 133, 61, 193, 90, 145, 61, 16, 122, 199, 189, 65, 235, 123, 189, 22, 94, 32, 62, 3, 206, 203, 190, 151, 107, 45, 190, 60, 168, 27, 188, 161, 160, 11, 190, 47, 237, 235, 61, 119, 16, 64, 191, 116, 83, 54, 189, 74, 247, 160, 186, 234, 6, 178, 188, 94, 12, 119, 190, 219, 101, 34, 190, 216, 33, 137, 190, 56, 102, 70, 189, 242, 214, 34, 62, 117, 137, 37, 189, 242, 25, 181, 190, 230, 9, 82, 62, 144, 41, 199, 188, 50, 250, 208, 189, 200, 190, 78, 60, 15, 96, 4, 63, 228, 173, 151, 62, 89, 57, 214, 61, 98, 63, 12, 63, 195, 55, 58, 59, 42, 127, 114, 190, 8, 74, 45, 62, 125, 14, 143, 190, 111, 204, 188, 190, 9, 74, 192, 190, 42, 10, 153, 62, 131, 44, 52, 62, 181, 20, 15, 190, 3, 87, 9, 61, 91, 7, 213, 59, 12, 41, 80, 61, 144, 194, 76, 59, 165, 207, 163, 190, 48, 157, 110, 62, 95, 241, 54, 188, 186, 238, 110, 62, 104, 224, 5, 190, 58, 102, 186, 190, 213, 103, 179, 190, 142, 110, 98, 62, 243, 242, 139, 61, 41, 52, 134, 61, 187, 18, 165, 191, 116, 65, 55, 62, 41, 46, 20, 191, 35, 49, 75, 62, 184, 36, 11, 191, 18, 15, 150, 61, 183, 41, 199, 186, 20, 118, 147, 61, 239, 254, 3, 190, 73, 82, 135, 60, 117, 217, 190, 190, 64, 93, 69, 62, 22, 0, 108, 61, 255, 132, 129, 190, 108, 242, 33, 60, 226, 107, 152, 190, 174, 237, 53, 190, 90, 68, 55, 61, 204, 44, 66, 190, 198, 35, 163, 188, 84, 3, 141, 62, 34, 192, 1, 63, 242, 126, 172, 189, 172, 170, 78, 189, 83, 245, 118, 62, 153, 154, 220, 189, 84, 99, 3, 190, 109, 9, 13, 191, 221, 159, 156, 189, 64, 38, 170, 60, 68, 246, 135, 62, 130, 72, 202, 61, 254, 164, 109, 191, 203, 130, 236, 61, 106, 196, 26, 190, 116, 243, 87, 62, 57, 233, 181, 61, 16, 4, 45, 62, 246, 43, 213, 61, 176, 49, 135, 61, 231, 207, 194, 62, 205, 87, 130, 190, 112, 95, 118, 190, 241, 106, 60, 189, 6, 128, 234, 60, 5, 44, 52, 190, 190, 218, 106, 190, 240, 90, 166, 61, 171, 186, 9, 62, 175, 243, 61, 190, 245, 43, 33, 190, 9, 180, 252, 61, 37, 161, 48, 190, 73, 213, 182, 61, 71, 98, 167, 190, 230, 75, 159, 62, 184, 185, 9, 61, 116, 50, 128, 62, 243, 20, 48, 189, 140, 61, 62, 190, 24, 188, 25, 190, 84, 227, 38, 62, 172, 2, 136, 62, 181, 189, 57, 62, 82, 11, 154, 60, 135, 240, 105, 61, 157, 217, 121, 61, 164, 87, 32, 189, 82, 137, 227, 190, 177, 77, 22, 191, 238, 109, 18, 189, 45, 196, 154, 61, 155, 4, 47, 62, 217, 67, 157, 61, 84, 86, 50, 62, 144, 17, 172, 190, 138, 202, 119, 62, 237, 177, 255, 61, 2, 55, 217, 61, 126, 166, 187, 60, 163, 9, 223, 61, 57, 105, 123, 60, 5, 203, 172, 62, 122, 193, 167, 62, 12, 114, 97, 190, 233, 203, 79, 190, 20, 26, 112, 190, 202, 73, 175, 62, 164, 39, 1, 189, 33, 246, 139, 189, 153, 110, 164, 189, 81, 248, 184, 189, 162, 100, 78, 189, 97, 69, 110, 62, 101, 44, 77, 62, 213, 58, 228, 61, 239, 68, 40, 190, 43, 179, 169, 62, 21, 228, 167, 190, 201, 46, 19, 62, 111, 8, 189, 60, 41, 236, 193, 189, 148, 249, 143, 190, 27, 75, 179, 61, 129, 246, 231, 190, 8, 197, 23, 190, 127, 38, 228, 190, 87, 27, 230, 189, 215, 29, 137, 62, 49, 95, 58, 62, 55, 112, 8, 62, 150, 221, 20, 190, 234, 175, 38, 191, 131, 201, 20, 190, 48, 68, 27, 188, 166, 250, 99, 62, 168, 87, 246, 190, 1, 215, 77, 190, 191, 248, 159, 190, 225, 231, 8, 189, 251, 130, 89, 189, 240, 8, 185, 191, 226, 136, 38, 61, 38, 86, 183, 190, 213, 24, 157, 62, 187, 175, 179, 62, 94, 98, 98, 190, 234, 177, 107, 62, 171, 153, 105, 62, 1, 22, 153, 190, 162, 94, 8, 189, 83, 184, 179, 61, 189, 215, 178, 62, 69, 179, 17, 191, 242, 188, 7, 190, 44, 85, 248, 61, 120, 199, 225, 190, 234, 123, 109, 61, 224, 210, 237, 62, 87, 55, 55, 61, 204, 104, 228, 62, 253, 235, 146, 62, 182, 16, 218, 62, 55, 179, 153, 190, 93, 118, 222, 189, 142, 103, 23, 61, 155, 45, 100, 62, 92, 190, 92, 61, 69, 142, 83, 187, 183, 85, 91, 190, 64, 150, 249, 61, 222, 3, 11, 190, 146, 17, 92, 61, 231, 212, 214, 190, 184, 8, 99, 62, 55, 28, 79, 62, 49, 96, 149, 190, 186, 125, 82, 190, 174, 123, 61, 62, 3, 252, 156, 189, 69, 87, 128, 191, 186, 131, 156, 61, 236, 65, 156, 191, 209, 113, 235, 61, 202, 207, 114, 190, 141, 135, 38, 190, 119, 179, 185, 190, 190, 160, 255, 61, 112, 215, 16, 189, 239, 11, 233, 189, 188, 226, 29, 62, 154, 49, 11, 62, 77, 82, 177, 62, 49, 89, 155, 190, 17, 99, 20, 62, 100, 8, 47, 190, 131, 154, 205, 190, 37, 189, 150, 59, 242, 179, 31, 61, 179, 102, 178, 60, 164, 144, 164, 61, 204, 134, 64, 62, 84, 97, 32, 190, 106, 32, 105, 61, 169, 219, 166, 62, 150, 163, 222, 190, 126, 221, 82, 61, 23, 99, 176, 190, 22, 34, 5, 61, 87, 198, 13, 62, 9, 45, 82, 190, 112, 118, 169, 62, 113, 154, 38, 190, 28, 111, 159, 60, 161, 215, 199, 61, 85, 191, 47, 190, 176, 213, 75, 190, 253, 21, 31, 191, 104, 209, 203, 190, 11, 245, 129, 188, 162, 147, 228, 190, 247, 13, 87, 188, 144, 165, 139, 60, 23, 61, 156, 190, 114, 65, 119, 62, 190, 239, 153, 62, 64, 57, 168, 62, 172, 9, 27, 190, 13, 41, 41, 190, 197, 212, 30, 190, 108, 247, 118, 62, 101, 93, 27, 62, 68, 26, 31, 191, 212, 6, 28, 191, 129, 253, 151, 61, 186, 54, 118, 190, 108, 44, 17, 190, 254, 67, 48, 190, 41, 185, 184, 59, 232, 116, 204, 61, 49, 61, 35, 190, 166, 151, 164, 190, 1, 96, 79, 190, 134, 76, 31, 62, 127, 122, 162, 190, 107, 130, 112, 190, 104, 194, 76, 62, 49, 26, 144, 62, 196, 17, 139, 62, 22, 207, 78, 191, 138, 74, 177, 189, 62, 95, 124, 188, 237, 161, 136, 190, 27, 243, 45, 189, 168, 6, 18, 62, 77, 188, 137, 191, 44, 16, 189, 62, 23, 145, 121, 189, 211, 110, 171, 62, 233, 245, 129, 190, 199, 119, 128, 190, 253, 249, 54, 62, 159, 76, 121, 61, 90, 106, 63, 61, 186, 210, 123, 62, 234, 17, 176, 62, 173, 96, 226, 61, 21, 95, 129, 61, 95, 47, 169, 190, 50, 125, 232, 190, 208, 129, 52, 62, 76, 67, 107, 62, 31, 119, 23, 190, 160, 12, 175, 61, 31, 122, 234, 189, 244, 200, 86, 62, 182, 42, 210, 189, 88, 167, 85, 61, 57, 31, 207, 189, 122, 23, 129, 60, 181, 133, 213, 187, 89, 177, 77, 190, 185, 204, 215, 61, 253, 22, 229, 189, 69, 214, 186, 190, 197, 87, 120, 189, 104, 239, 71, 60, 219, 144, 123, 190, 130, 215, 152, 60, 232, 6, 46, 62, 70, 55, 138, 62, 0, 202, 232, 61, 64, 233, 195, 189, 18, 227, 160, 189, 85, 4, 73, 62, 157, 60, 52, 62, 215, 108, 178, 189, 212, 250, 129, 61, 93, 245, 17, 190, 43, 192, 179, 189, 175, 44, 78, 190, 111, 18, 161, 61, 81, 187, 237, 59, 205, 114, 137, 190, 142, 184, 136, 189, 144, 133, 9, 190, 233, 42, 162, 60, 24, 24, 10, 189, 201, 55, 16, 191, 8, 4, 71, 190, 214, 51, 26, 191, 196, 225, 116, 62, 201, 248, 207, 190, 101, 106, 72, 190, 202, 28, 248, 189, 174, 237, 54, 189, 3, 72, 129, 190, 79, 145, 77, 190, 105, 45, 172, 190, 194, 90, 189, 61, 51, 22, 4, 189, 30, 244, 148, 190, 74, 219, 7, 189, 124, 139, 62, 190, 155, 8, 217, 188, 203, 48, 128, 190, 229, 169, 49, 61, 49, 136, 33, 62, 179, 149, 167, 190, 98, 100, 139, 58, 35, 242, 208, 189, 35, 22, 88, 189, 249, 177, 129, 62, 130, 113, 191, 190, 83, 247, 68, 190, 165, 250, 162, 188, 97, 185, 194, 190, 106, 177, 145, 190, 86, 224, 82, 62, 168, 182, 1, 189, 185, 251, 88, 191, 249, 51, 125, 62, 201, 123, 166, 61, 214, 53, 14, 62, 6, 24, 59, 62, 204, 123, 124, 62, 127, 184, 61, 61, 31, 195, 130, 188, 147, 27, 91, 187, 155, 123, 111, 191, 127, 3, 41, 191, 160, 249, 45, 62, 58, 188, 55, 62, 56, 175, 227, 190, 84, 21, 222, 190, 207, 131, 183, 189, 182, 25, 60, 62, 241, 21, 64, 191, 42, 69, 185, 189, 18, 97, 75, 62, 62, 38, 176, 190, 233, 0, 201, 62, 243, 177, 155, 191, 155, 158, 81, 61, 194, 126, 99, 60, 31, 211, 59, 62, 211, 164, 185, 190, 63, 241, 65, 190, 162, 151, 198, 190, 237, 106, 92, 61, 167, 174, 143, 189, 222, 61, 6, 62, 106, 221, 196, 190, 31, 149, 183, 61, 58, 176, 181, 62, 91, 252, 130, 189, 249, 98, 77, 190, 2, 167, 145, 189, 54, 189, 13, 62, 38, 108, 107, 189, 57, 203, 226, 189, 152, 77, 179, 61, 47, 18, 58, 62, 215, 224, 157, 190, 128, 56, 213, 189, 105, 57, 221, 62, 94, 89, 179, 188, 192, 217, 1, 190, 196, 29, 110, 60, 249, 1, 129, 189, 114, 182, 2, 62, 204, 67, 197, 187, 79, 173, 161, 190, 185, 28, 43, 190, 220, 241, 139, 190, 169, 41, 15, 58, 47, 124, 145, 190, 254, 46, 162, 189, 204, 140, 73, 61, 240, 150, 103, 190, 107, 79, 1, 190, 147, 109, 71, 189, 174, 252, 192, 188, 162, 161, 24, 190, 183, 8, 73, 58, 173, 140, 215, 62, 243, 40, 119, 191, 202, 13, 131, 189, 226, 137, 77, 190, 112, 55, 163, 189, 106, 109, 204, 189, 176, 217, 255, 188, 24, 155, 201, 62, 127, 247, 78, 189, 99, 158, 64, 188, 120, 83, 206, 60, 156, 211, 171, 62, 227, 36, 152, 190, 180, 85, 130, 191, 2, 47, 50, 62, 94, 83, 125, 190, 176, 94, 105, 190, 101, 206, 208, 61, 129, 240, 73, 190, 108, 189, 157, 188, 61, 242, 99, 190, 10, 103, 44, 190, 42, 50, 224, 61, 205, 19, 160, 62, 245, 171, 160, 189, 101, 42, 246, 189, 27, 53, 5, 190, 31, 57, 9, 190, 198, 103, 197, 62, 58, 94, 31, 190, 223, 167, 134, 62, 189, 44, 148, 61, 149, 239, 214, 189, 219, 243, 26, 62, 20, 200, 22, 189, 166, 14, 188, 189, 86, 140, 172, 190, 206, 148, 16, 62, 58, 215, 230, 189, 175, 174, 157, 190, 53, 12, 21, 190, 255, 157, 6, 188, 181, 147, 176, 189, 157, 136, 164, 60, 159, 64, 13, 189, 149, 25, 149, 61, 85, 41, 143, 190, 185, 17, 233, 61, 137, 167, 3, 190, 113, 101, 145, 62, 29, 210, 114, 61, 101, 80, 47, 190, 129, 195, 201, 187, 227, 247, 132, 60, 190, 199, 128, 190, 249, 19, 7, 62, 255, 182, 59, 190, 89, 237, 155, 62, 63, 249, 118, 62, 253, 137, 190, 189, 111, 83, 169, 189, 192, 99, 66, 61, 152, 126, 243, 189, 46, 207, 91, 191, 0, 156, 246, 57, 64, 93, 115, 191, 34, 194, 93, 60, 225, 56, 75, 190, 36, 155, 237, 189, 255, 182, 163, 61, 16, 115, 30, 190, 156, 36, 23, 62, 245, 206, 109, 189, 214, 191, 220, 188, 162, 179, 22, 62, 5, 142, 253, 59, 75, 117, 225, 190, 9, 111, 6, 191, 175, 26, 70, 190, 178, 152, 18, 190, 153, 75, 133, 190, 34, 229, 98, 190, 56, 49, 78, 61, 68, 50, 187, 62, 220, 237, 107, 62, 143, 23, 51, 190, 76, 46, 87, 59, 81, 212, 225, 62, 105, 170, 17, 191, 132, 181, 221, 189, 92, 182, 14, 191, 183, 254, 184, 189, 170, 158, 136, 61, 125, 222, 68, 62, 159, 45, 77, 62, 187, 118, 177, 188, 71, 45, 180, 61, 52, 139, 8, 190, 70, 102, 19, 62, 142, 82, 37, 191, 59, 218, 144, 190, 2, 210, 15, 61, 157, 218, 188, 61, 143, 167, 137, 187, 183, 25, 69, 190, 41, 83, 160, 61, 232, 54, 72, 62, 47, 24, 116, 62, 35, 154, 170, 62, 158, 9, 50, 59, 254, 238, 137, 62, 180, 197, 95, 61, 212, 157, 206, 190, 196, 152, 176, 61, 145, 206, 136, 62, 142, 60, 131, 190, 82, 243, 137, 190, 234, 215, 206, 190, 12, 82, 8, 61, 213, 132, 158, 62, 97, 134, 214, 189, 100, 176, 71, 190, 228, 101, 179, 190, 84, 119, 242, 189, 241, 182, 193, 61, 158, 198, 95, 62, 35, 232, 172, 61, 146, 72, 233, 190, 39, 232, 5, 190, 27, 135, 16, 62, 98, 230, 18, 62, 208, 219, 192, 186, 168, 137, 177, 60, 132, 252, 110, 187, 167, 206, 39, 189, 226, 110, 158, 189, 36, 176, 213, 61, 145, 202, 143, 189, 111, 56, 190, 61, 180, 201, 171, 189, 91, 50, 198, 61, 246, 120, 62, 190, 168, 205, 79, 62, 158, 118, 187, 61, 151, 21, 25, 61, 106, 157, 205, 59, 202, 164, 138, 61, 65, 32, 83, 60, 65, 103, 6, 62, 186, 151, 134, 61, 230, 151, 19, 189, 6, 192, 117, 61, 118, 142, 251, 59, 92, 184, 149, 188, 38, 7, 211, 189, 13, 174, 4, 190, 213, 196, 245, 189, 35, 123, 183, 188, 197, 206, 6, 190, 240, 107, 85, 190, 90, 174, 203, 190, 111, 200, 59, 190, 226, 6, 178, 62, 190, 98, 137, 61, 82, 136, 10, 62, 244, 106, 36, 62, 161, 171, 164, 60, 5, 121, 25, 191, 22, 80, 133, 190, 229, 129, 139, 189, 32, 214, 130, 62, 96, 137, 7, 62, 136, 53, 132, 190, 211, 66, 117, 62, 112, 206, 213, 190, 32, 252, 139, 189, 5, 22, 147, 190, 233, 13, 26, 62, 201, 19, 19, 62, 89, 80, 69, 190, 18, 165, 120, 61, 131, 234, 196, 190, 147, 252, 29, 190, 108, 1, 7, 62, 255, 236, 171, 190, 203, 184, 208, 188, 55, 104, 68, 190, 58, 110, 183, 190, 81, 28, 176, 188, 122, 33, 121, 62, 231, 4, 204, 189, 96, 180, 197, 190, 24, 29, 182, 62, 71, 117, 55, 191, 231, 159, 206, 189, 155, 105, 121, 190, 43, 159, 247, 188, 205, 71, 10, 62, 123, 4, 41, 190, 213, 209, 60, 62, 210, 84, 183, 189, 143, 2, 220, 189, 51, 222, 148, 189, 219, 196, 45, 62, 249, 190, 104, 190, 165, 220, 11, 190, 187, 194, 32, 62, 52, 194, 40, 61, 129, 197, 1, 62, 206, 189, 20, 190, 200, 39, 5, 61, 102, 38, 68, 62, 144, 253, 71, 62, 131, 249, 240, 189, 193, 65, 129, 62, 217, 127, 144, 62, 183, 247, 43, 190, 63, 80, 211, 189, 241, 174, 198, 189, 199, 222, 28, 62, 166, 59, 3, 63, 213, 166, 140, 190, 92, 239, 238, 61, 138, 69, 215, 62, 117, 30, 214, 189, 137, 70, 129, 62, 156, 73, 137, 189, 193, 24, 140, 60, 8, 232, 193, 190, 101, 66, 230, 60, 166, 108, 136, 61, 63, 167, 235, 190, 45, 241, 54, 62, 100, 255, 194, 62, 123, 130, 63, 191, 152, 211, 26, 190, 39, 209, 140, 61, 49, 32, 172, 62, 174, 165, 125, 190, 215, 216, 251, 189, 214, 168, 218, 188, 98, 110, 13, 62, 60, 223, 150, 62, 158, 123, 147, 62, 175, 37, 30, 190, 202, 186, 81, 62, 251, 107, 182, 190, 178, 55, 42, 191, 170, 97, 170, 190, 19, 62, 167, 62, 18, 54, 114, 61, 212, 137, 105, 61, 244, 156, 176, 189, 82, 195, 21, 190, 138, 156, 207, 61, 11, 127, 42, 189, 151, 98, 42, 190, 249, 119, 154, 60, 91, 36, 144, 190, 58, 217, 36, 62, 55, 140, 208, 189, 93, 66, 83, 190, 34, 190, 221, 189, 161, 55, 145, 61, 59, 198, 39, 190, 201, 252, 161, 189, 107, 58, 210, 61, 207, 229, 236, 61, 25, 33, 61, 190, 133, 20, 118, 190, 181, 206, 14, 190, 111, 73, 183, 61, 125, 161, 240, 61, 147, 203, 191, 189, 248, 60, 80, 190, 224, 126, 128, 189, 114, 248, 15, 189, 155, 43, 68, 60, 29, 51, 145, 61, 224, 112, 185, 61, 247, 108, 114, 190, 95, 110, 42, 62, 101, 125, 254, 188, 118, 14, 0, 62, 141, 188, 3, 190, 132, 11, 129, 187, 33, 120, 195, 189, 210, 168, 10, 62, 152, 224, 231, 60, 190, 63, 11, 190, 170, 38, 8, 62, 251, 157, 216, 61, 20, 69, 32, 62, 228, 108, 139, 189, 48, 205, 94, 61, 234, 3, 18, 188, 228, 253, 88, 189, 79, 92, 49, 190, 0, 53, 214, 189, 147, 182, 240, 61, 120, 229, 44, 189, 143, 85, 34, 189, 155, 103, 101, 61, 101, 186, 28, 190, 236, 253, 5, 62, 0, 154, 116, 189, 68, 250, 135, 189, 20, 229, 62, 190, 46, 7, 85, 61, 216, 62, 251, 189, 137, 22, 232, 61, 136, 198, 237, 189, 193, 178, 72, 61, 219, 7, 226, 189, 254, 45, 19, 190, 43, 246, 241, 188, 38, 51, 220, 188, 206, 84, 89, 189, 35, 86, 161, 60, 51, 132, 1, 62, 10, 255, 228, 187, 241, 125, 196, 189, 173, 156, 52, 190, 22, 105, 29, 62, 248, 62, 52, 190, 18, 254, 247, 61, 143, 83, 7, 61, 249, 55, 3, 190, 82, 179, 19, 62, 206, 254, 194, 189, 150, 248, 156, 189, 175, 65, 15, 189, 61, 82, 29, 190, 212, 131, 122, 189, 174, 62, 145, 60, 111, 224, 157, 189, 152, 193, 231, 189, 153, 120, 25, 190, 221, 143, 146, 61, 57, 235, 33, 190, 42, 251, 243, 61, 243, 218, 200, 61, 185, 121, 129, 61, 161, 110, 244, 61, 36, 176, 80, 188, 171, 9, 160, 61, 14, 163, 217, 189, 68, 89, 165, 62, 190, 206, 8, 190, 108, 22, 126, 190, 154, 162, 125, 62, 168, 1, 119, 190, 189, 21, 221, 190, 226, 40, 133, 62, 107, 246, 145, 61, 61, 150, 220, 60, 236, 103, 141, 191, 161, 23, 39, 62, 38, 226, 230, 61, 221, 214, 152, 190, 227, 58, 156, 190, 32, 163, 53, 62, 160, 93, 3, 191, 172, 60, 131, 62, 157, 9, 121, 190, 219, 185, 88, 62, 59, 77, 199, 189, 42, 10, 97, 190, 101, 0, 72, 186, 164, 1, 26, 62, 81, 144, 165, 188, 238, 41, 208, 60, 27, 70, 85, 62, 91, 8, 48, 190, 8, 253, 9, 191, 163, 4, 133, 190, 122, 99, 25, 191, 69, 130, 158, 189, 216, 88, 146, 190, 39, 66, 251, 188, 13, 157, 128, 190, 66, 155, 123, 62, 236, 127, 5, 190, 105, 214, 161, 189, 177, 195, 53, 62, 214, 19, 197, 61, 106, 197, 89, 62, 202, 238, 212, 62, 77, 26, 185, 62, 94, 29, 139, 189, 161, 27, 228, 59, 118, 90, 53, 62, 112, 57, 91, 191, 220, 83, 8, 191, 37, 88, 196, 188, 128, 221, 26, 60, 51, 237, 115, 190, 75, 194, 16, 190, 236, 62, 132, 62, 64, 94, 92, 62, 37, 118, 100, 189, 21, 47, 169, 190, 247, 205, 39, 62, 179, 85, 96, 190, 110, 117, 179, 188, 81, 73, 74, 191, 41, 163, 128, 62, 105, 66, 199, 60, 2, 15, 146, 62, 105, 7, 112, 190, 253, 252, 128, 60, 73, 85, 11, 61, 121, 235, 182, 59, 45, 157, 78, 61, 124, 2, 18, 62, 91, 66, 52, 190, 129, 178, 122, 189, 69, 145, 87, 62, 114, 79, 81, 62, 94, 23, 106, 188, 81, 215, 6, 191, 236, 105, 8, 189, 24, 140, 208, 187, 182, 140, 227, 190, 245, 190, 138, 189, 216, 168, 57, 61, 53, 238, 66, 190, 196, 1, 160, 60, 34, 15, 146, 61, 166, 115, 18, 62, 166, 150, 59, 60, 95, 145, 119, 62, 136, 78, 137, 60, 145, 248, 164, 62, 33, 145, 162, 62, 116, 117, 163, 190, 101, 70, 254, 61, 246, 31, 143, 61, 136, 102, 56, 190, 216, 172, 60, 190, 87, 221, 246, 189, 190, 191, 165, 61, 252, 153, 195, 60, 204, 12, 21, 62, 117, 39, 158, 61, 160, 17, 176, 61, 199, 84, 133, 61, 198, 182, 205, 189, 38, 201, 42, 190, 167, 115, 2, 62, 49, 220, 242, 188, 163, 81, 21, 188, 20, 95, 22, 191, 131, 143, 53, 61, 230, 100, 62, 189, 184, 99, 152, 61, 77, 212, 99, 61, 77, 133, 144, 188, 163, 238, 45, 191, 193, 22, 66, 62, 181, 16, 168, 59, 197, 195, 204, 61, 187, 57, 28, 190, 129, 125, 191, 185, 130, 22, 151, 188, 1, 158, 49, 62, 90, 191, 230, 189, 86, 237, 49, 62, 19, 151, 38, 62, 40, 116, 255, 189, 40, 174, 29, 190, 252, 168, 136, 190, 72, 118, 127, 61, 234, 240, 252, 60, 13, 254, 112, 59, 128, 87, 75, 190, 189, 141, 225, 60, 233, 91, 159, 59, 8, 180, 247, 60, 16, 4, 98, 191, 207, 51, 85, 62, 52, 216, 140, 191, 40, 52, 143, 62, 183, 228, 25, 61, 236, 0, 143, 189, 36, 247, 44, 190, 87, 117, 106, 61, 157, 122, 163, 189, 120, 193, 191, 189, 41, 193, 45, 190, 255, 218, 11, 189, 255, 218, 153, 62, 129, 119, 195, 188, 204, 212, 171, 60, 81, 36, 133, 62, 147, 161, 138, 190, 90, 187, 9, 62, 66, 91, 153, 61, 129, 182, 18, 62, 7, 151, 145, 189, 89, 39, 78, 188, 180, 197, 36, 60, 243, 125, 148, 62, 100, 43, 139, 62, 209, 0, 230, 190, 16, 17, 78, 62, 20, 74, 163, 190, 136, 54, 201, 190, 82, 187, 93, 189, 184, 92, 62, 62, 189, 159, 69, 60, 239, 119, 74, 191, 236, 240, 215, 62, 114, 44, 14, 190, 202, 85, 155, 61, 173, 212, 203, 189, 21, 13, 104, 62, 21, 117, 235, 61, 60, 175, 194, 189, 214, 101, 231, 62, 93, 254, 26, 61, 47, 219, 208, 189, 217, 203, 50, 62, 94, 198, 91, 187, 52, 168, 106, 190, 138, 68, 196, 190, 235, 27, 138, 62, 132, 0, 137, 61, 225, 15, 220, 189, 164, 139, 218, 189, 246, 99, 85, 61, 176, 134, 108, 190, 212, 240, 123, 189, 159, 71, 156, 190, 37, 130, 183, 61, 156, 154, 137, 62, 26, 118, 81, 61, 106, 156, 137, 189, 119, 184, 182, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 82, 138, 62, 147, 81, 91, 62, 128, 218, 14, 190, 153, 48, 44, 62, 83, 183, 132, 189, 112, 85, 21, 62, 222, 232, 80, 62, 209, 136, 245, 188, 145, 164, 35, 62, 52, 249, 171, 189, 246, 165, 4, 61, 244, 50, 132, 62, 135, 16, 70, 189, 131, 127, 173, 62, 211, 223, 231, 189, 51, 78, 156, 190, 28, 186, 156, 62, 88, 123, 0, 62, 75, 112, 59, 62, 91, 230, 24, 62, 73, 7, 64, 62, 16, 254, 69, 190, 108, 243, 16, 62, 78, 40, 37, 190, 11, 120, 171, 189, 201, 50, 155, 189, 243, 45, 45, 61, 202, 250, 87, 62, 178, 20, 179, 61, 101, 106, 195, 61, 1, 96, 244, 189, 63, 231, 81, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {178, 150, 97, 191, 138, 76, 88, 190, 178, 30, 227, 190, 212, 151, 11, 191, 117, 80, 206, 190, 153, 89, 40, 62, 111, 120, 216, 62, 139, 92, 18, 63, 187, 210, 200, 190, 49, 161, 42, 191, 179, 19, 160, 62, 162, 17, 55, 62, 52, 7, 216, 189, 202, 39, 100, 191, 187, 232, 137, 62, 116, 19, 114, 63, 249, 56, 135, 62, 151, 205, 70, 191, 0, 60, 152, 62, 7, 12, 135, 189, 194, 195, 137, 62, 239, 17, 207, 189, 172, 200, 81, 63, 75, 155, 23, 189, 134, 37, 29, 62, 164, 224, 230, 61, 7, 187, 2, 63, 219, 197, 180, 190, 30, 6, 28, 62, 238, 128, 45, 61, 214, 13, 124, 190, 27, 198, 227, 190, 176, 149, 140, 62, 40, 12, 74, 189, 254, 50, 166, 61, 139, 209, 223, 188, 74, 88, 217, 189, 207, 183, 127, 190, 56, 88, 164, 190, 175, 40, 119, 62, 234, 82, 181, 190, 34, 241, 228, 62, 141, 44, 144, 190, 218, 117, 2, 190, 185, 123, 8, 191, 81, 134, 183, 188, 41, 151, 133, 62, 58, 25, 52, 62, 81, 228, 217, 189, 18, 5, 162, 62, 111, 81, 25, 190, 59, 70, 221, 189, 134, 138, 139, 190, 143, 0, 241, 62, 3, 194, 124, 62, 56, 105, 210, 61, 89, 45, 251, 189, 23, 234, 179, 61, 248, 192, 23, 62, 12, 29, 68, 61, 243, 38, 172, 190, 111, 126, 35, 190, 153, 90, 118, 190, 252, 151, 213, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 242, 210, 61, 150, 193, 122, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {170, 91, 5, 62, 252, 82, 135, 63, 244, 64, 135, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {60, 136, 8, 192, 117, 20, 87, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0047/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}