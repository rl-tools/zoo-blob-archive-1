// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 38, 92, 190, 52, 137, 136, 190, 127, 78, 15, 191, 236, 245, 61, 60, 2, 253, 142, 190, 48, 53, 202, 61, 141, 241, 215, 62, 8, 84, 217, 189, 150, 100, 255, 62, 152, 140, 60, 62, 13, 116, 156, 61, 207, 235, 175, 189, 37, 74, 26, 190, 130, 35, 227, 189, 50, 97, 172, 190, 115, 123, 9, 63, 60, 117, 135, 190, 189, 79, 62, 62, 46, 65, 117, 190, 122, 161, 202, 189, 205, 76, 4, 190, 133, 208, 57, 62, 30, 11, 103, 62, 230, 52, 202, 61, 143, 18, 131, 190, 72, 186, 70, 190, 185, 230, 150, 62, 201, 95, 99, 190, 69, 13, 165, 61, 175, 122, 43, 61, 80, 149, 199, 190, 40, 240, 93, 62, 41, 95, 200, 190, 181, 146, 81, 188, 207, 165, 86, 190, 235, 20, 33, 189, 11, 91, 4, 63, 242, 123, 172, 62, 66, 226, 254, 62, 116, 1, 180, 190, 128, 236, 150, 190, 253, 137, 17, 63, 40, 223, 243, 190, 185, 227, 39, 62, 73, 172, 240, 62, 196, 64, 167, 190, 140, 186, 166, 62, 147, 108, 92, 190, 46, 89, 121, 62, 80, 139, 162, 62, 4, 61, 43, 190, 233, 249, 60, 61, 203, 196, 9, 191, 58, 172, 144, 189, 142, 191, 214, 62, 57, 144, 170, 189, 125, 73, 116, 190, 21, 243, 226, 189, 15, 46, 121, 61, 61, 225, 10, 63, 12, 158, 14, 191, 100, 176, 154, 62, 55, 63, 6, 191, 172, 171, 166, 190, 242, 161, 62, 190, 189, 13, 189, 62, 129, 24, 51, 62, 131, 74, 181, 190, 58, 143, 112, 62, 73, 39, 34, 62, 210, 161, 21, 190, 230, 78, 253, 61, 144, 49, 254, 189, 166, 148, 252, 62, 169, 192, 1, 63, 221, 6, 61, 189, 32, 51, 169, 62, 43, 64, 141, 61, 65, 60, 143, 189, 201, 97, 146, 60, 73, 191, 204, 61, 230, 120, 252, 62, 118, 63, 211, 62, 254, 38, 247, 62, 96, 254, 150, 62, 203, 169, 17, 63, 35, 38, 194, 189, 123, 57, 170, 190, 160, 75, 101, 190, 196, 150, 141, 190, 173, 12, 189, 190, 28, 123, 210, 190, 71, 64, 228, 62, 39, 109, 253, 190, 22, 42, 14, 191, 251, 175, 148, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 176, 19, 191, 99, 57, 172, 61, 163, 53, 251, 61, 160, 103, 228, 62, 165, 100, 168, 190, 50, 45, 8, 191, 49, 44, 9, 62, 79, 85, 10, 63, 154, 37, 231, 61, 95, 172, 29, 190, 181, 146, 211, 62, 156, 68, 134, 190, 47, 89, 242, 190, 205, 84, 205, 189, 183, 2, 46, 190, 135, 68, 181, 189, 119, 238, 38, 190, 144, 104, 10, 188, 215, 145, 108, 190, 120, 217, 196, 190, 221, 17, 139, 62, 35, 241, 79, 62, 10, 28, 12, 63, 48, 44, 206, 62, 20, 119, 165, 62, 154, 204, 171, 62, 244, 151, 15, 190, 17, 156, 53, 62, 58, 235, 13, 62, 210, 163, 71, 62, 132, 160, 28, 190, 202, 59, 120, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 226, 186, 189, 72, 210, 218, 60, 15, 172, 145, 189, 246, 147, 205, 189, 210, 40, 148, 61, 91, 88, 221, 59, 158, 122, 32, 61, 224, 132, 48, 62, 147, 123, 23, 190, 102, 29, 228, 189, 240, 206, 253, 60, 66, 30, 125, 189, 155, 50, 2, 62, 168, 52, 141, 61, 198, 187, 12, 190, 95, 52, 218, 189, 93, 240, 46, 61, 98, 139, 222, 61, 221, 85, 11, 190, 35, 17, 16, 190, 220, 149, 148, 188, 82, 7, 164, 189, 105, 6, 5, 190, 44, 27, 35, 190, 75, 224, 255, 60, 219, 229, 126, 189, 62, 169, 213, 189, 4, 68, 23, 190, 6, 166, 173, 189, 70, 13, 245, 61, 246, 149, 137, 60, 131, 131, 15, 62, 227, 117, 135, 61, 29, 96, 185, 61, 48, 213, 71, 189, 63, 15, 159, 189, 165, 233, 34, 188, 25, 138, 229, 61, 105, 14, 239, 187, 179, 54, 141, 61, 172, 243, 146, 189, 75, 217, 128, 59, 199, 38, 219, 188, 5, 191, 206, 61, 205, 207, 0, 189, 36, 30, 82, 60, 31, 199, 255, 189, 215, 226, 170, 187, 191, 74, 4, 61, 222, 110, 0, 62, 59, 175, 200, 61, 14, 90, 152, 61, 190, 119, 238, 61, 215, 144, 159, 61, 109, 3, 160, 189, 253, 102, 115, 189, 18, 104, 46, 61, 254, 185, 57, 61, 55, 214, 50, 190, 173, 105, 129, 189, 177, 162, 46, 61, 186, 9, 155, 189, 106, 232, 230, 61, 139, 31, 186, 189, 45, 22, 226, 189, 111, 222, 111, 61, 54, 38, 58, 189, 88, 54, 21, 190, 141, 143, 247, 60, 196, 72, 27, 190, 244, 25, 149, 61, 17, 117, 41, 189, 208, 217, 225, 61, 252, 172, 2, 62, 95, 44, 12, 62, 109, 164, 214, 61, 1, 166, 139, 61, 49, 73, 40, 62, 97, 44, 7, 62, 31, 18, 132, 61, 124, 207, 25, 190, 35, 231, 8, 190, 45, 236, 42, 190, 186, 171, 162, 61, 170, 4, 88, 189, 47, 125, 189, 188, 194, 198, 21, 62, 212, 60, 20, 61, 5, 196, 22, 62, 105, 216, 42, 60, 51, 169, 217, 189, 229, 160, 188, 189, 162, 52, 6, 190, 211, 42, 185, 189, 96, 255, 49, 188, 15, 109, 35, 190, 14, 187, 227, 60, 40, 115, 52, 62, 38, 163, 180, 60, 60, 242, 159, 61, 139, 94, 13, 190, 145, 81, 131, 61, 91, 247, 40, 61, 149, 155, 117, 187, 100, 176, 95, 189, 15, 154, 3, 189, 161, 177, 249, 189, 20, 118, 147, 61, 191, 251, 135, 189, 5, 88, 14, 190, 53, 92, 169, 188, 2, 183, 158, 61, 222, 204, 31, 60, 238, 81, 251, 189, 46, 171, 37, 62, 214, 228, 55, 189, 58, 74, 171, 189, 102, 168, 245, 60, 196, 173, 42, 190, 132, 190, 37, 190, 2, 64, 9, 190, 80, 48, 21, 62, 80, 244, 129, 189, 108, 166, 34, 190, 68, 15, 188, 61, 80, 206, 113, 61, 194, 73, 255, 61, 120, 195, 254, 189, 190, 71, 201, 61, 139, 26, 94, 60, 2, 74, 25, 62, 133, 107, 121, 61, 41, 36, 203, 189, 48, 58, 170, 189, 72, 215, 180, 189, 12, 135, 13, 62, 176, 203, 108, 61, 242, 119, 147, 61, 124, 165, 206, 187, 81, 53, 154, 61, 69, 228, 24, 62, 213, 195, 199, 189, 134, 151, 65, 61, 15, 96, 152, 189, 83, 201, 53, 61, 142, 177, 160, 189, 160, 224, 123, 60, 206, 65, 137, 189, 96, 30, 122, 60, 184, 194, 211, 189, 245, 156, 220, 189, 200, 99, 155, 61, 3, 200, 93, 189, 241, 87, 144, 60, 202, 222, 12, 190, 137, 84, 252, 61, 242, 187, 97, 187, 218, 0, 189, 61, 241, 234, 205, 60, 191, 224, 228, 188, 169, 251, 207, 189, 211, 16, 9, 62, 139, 176, 55, 60, 197, 106, 66, 188, 245, 184, 4, 189, 198, 47, 254, 189, 62, 180, 232, 188, 216, 235, 1, 190, 97, 108, 3, 190, 63, 26, 10, 189, 44, 113, 151, 61, 187, 61, 155, 61, 98, 128, 15, 62, 178, 216, 143, 189, 161, 78, 5, 61, 163, 91, 70, 61, 62, 187, 21, 61, 212, 46, 178, 189, 175, 34, 254, 60, 13, 59, 200, 189, 101, 151, 234, 61, 143, 78, 176, 61, 144, 145, 4, 62, 208, 253, 188, 61, 204, 254, 147, 189, 235, 115, 151, 189, 128, 182, 39, 190, 190, 44, 165, 61, 224, 34, 35, 188, 125, 35, 240, 189, 160, 217, 187, 186, 30, 205, 59, 189, 135, 180, 195, 189, 18, 60, 5, 62, 34, 214, 130, 61, 48, 207, 218, 188, 224, 31, 196, 61, 134, 22, 4, 62, 31, 19, 146, 188, 64, 95, 248, 61, 197, 214, 39, 61, 206, 7, 8, 189, 167, 210, 185, 61, 27, 75, 179, 61, 140, 183, 225, 189, 69, 45, 184, 189, 90, 87, 107, 188, 227, 168, 116, 61, 54, 81, 43, 62, 243, 66, 12, 61, 92, 236, 91, 189, 33, 240, 11, 190, 114, 189, 6, 190, 94, 152, 188, 188, 225, 130, 16, 190, 236, 219, 233, 61, 247, 113, 177, 61, 239, 132, 153, 189, 205, 107, 27, 190, 39, 36, 86, 189, 134, 136, 203, 189, 45, 196, 242, 189, 37, 70, 150, 58, 107, 67, 52, 190, 29, 186, 219, 61, 56, 148, 157, 61, 131, 176, 244, 189, 71, 106, 3, 62, 213, 174, 206, 189, 196, 126, 32, 190, 127, 94, 215, 61, 6, 212, 185, 60, 46, 127, 248, 61, 194, 166, 122, 59, 212, 77, 135, 189, 129, 39, 8, 62, 185, 29, 202, 189, 103, 74, 31, 190, 229, 92, 156, 61, 167, 250, 28, 62, 77, 53, 44, 62, 37, 12, 38, 62, 190, 42, 37, 62, 53, 77, 23, 190, 191, 134, 7, 61, 102, 136, 27, 189, 79, 168, 241, 188, 66, 201, 227, 189, 56, 54, 205, 189, 199, 48, 214, 189, 105, 71, 212, 61, 45, 76, 243, 61, 16, 107, 237, 61, 246, 249, 76, 189, 204, 45, 242, 60, 188, 158, 246, 61, 243, 160, 141, 189, 22, 193, 27, 190, 149, 24, 12, 62, 4, 220, 210, 189, 137, 19, 12, 190, 70, 246, 149, 61, 70, 66, 75, 189, 155, 43, 196, 59, 54, 172, 20, 190, 15, 221, 66, 61, 56, 224, 35, 190, 213, 202, 0, 62, 151, 156, 133, 188, 85, 192, 242, 189, 244, 161, 254, 61, 255, 183, 28, 62, 174, 130, 12, 62, 184, 162, 148, 188, 171, 153, 46, 62, 35, 209, 50, 190, 115, 160, 186, 189, 208, 131, 6, 61, 235, 30, 94, 61, 97, 156, 30, 189, 172, 218, 139, 61, 122, 65, 174, 61, 11, 232, 175, 189, 70, 219, 205, 188, 57, 88, 29, 62, 138, 169, 32, 62, 115, 86, 38, 62, 239, 101, 198, 188, 83, 22, 163, 61, 58, 245, 46, 190, 97, 111, 30, 189, 179, 227, 168, 61, 185, 215, 141, 61, 231, 130, 15, 62, 145, 102, 187, 61, 108, 180, 59, 189, 6, 101, 40, 190, 141, 55, 24, 190, 8, 208, 17, 190, 215, 176, 3, 189, 226, 178, 8, 190, 151, 20, 152, 58, 133, 89, 98, 61, 64, 171, 45, 188, 102, 82, 28, 61, 131, 92, 174, 61, 138, 194, 150, 61, 201, 177, 9, 62, 135, 18, 160, 61, 163, 137, 39, 190, 78, 135, 3, 62, 8, 150, 254, 187, 234, 79, 242, 189, 24, 207, 36, 190, 103, 139, 88, 60, 197, 107, 212, 61, 247, 21, 5, 190, 19, 80, 196, 189, 211, 60, 191, 61, 217, 249, 194, 188, 210, 250, 62, 189, 255, 126, 43, 190, 145, 219, 16, 190, 0, 225, 173, 61, 53, 34, 95, 59, 219, 184, 84, 189, 161, 191, 136, 61, 122, 175, 94, 61, 34, 206, 32, 62, 47, 43, 10, 61, 149, 169, 31, 190, 62, 95, 124, 188, 168, 140, 177, 189, 239, 190, 150, 189, 206, 47, 154, 188, 157, 244, 194, 61, 205, 177, 167, 61, 197, 166, 38, 62, 136, 136, 51, 62, 145, 161, 47, 190, 190, 22, 3, 190, 255, 86, 29, 62, 140, 190, 159, 61, 53, 123, 224, 188, 156, 58, 1, 62, 174, 1, 162, 61, 185, 194, 28, 62, 234, 115, 241, 61, 47, 82, 50, 190, 128, 48, 171, 189, 90, 36, 23, 62, 59, 62, 52, 62, 158, 7, 180, 189, 39, 68, 159, 61, 0, 121, 125, 189, 210, 221, 177, 61, 131, 153, 28, 190, 112, 201, 74, 61, 247, 62, 51, 190, 105, 49, 124, 189, 254, 231, 12, 61, 2, 52, 239, 61, 72, 80, 210, 61, 97, 198, 204, 189, 32, 27, 97, 189, 194, 44, 40, 62, 125, 32, 157, 61, 59, 211, 115, 61, 211, 122, 154, 189, 172, 158, 199, 61, 226, 15, 52, 62, 133, 116, 172, 60, 213, 199, 187, 189, 26, 154, 224, 61, 211, 28, 7, 62, 101, 209, 2, 62, 10, 68, 99, 187, 69, 253, 88, 61, 99, 62, 243, 61, 77, 249, 223, 60, 54, 104, 218, 189, 221, 50, 24, 62, 56, 183, 33, 190, 47, 98, 3, 190, 185, 127, 18, 62, 80, 57, 140, 188, 103, 97, 213, 61, 244, 26, 10, 189, 40, 69, 128, 61, 61, 6, 1, 62, 23, 63, 198, 189, 16, 235, 9, 62, 187, 88, 14, 190, 252, 128, 135, 189, 236, 188, 189, 189, 217, 112, 51, 189, 116, 3, 33, 62, 193, 185, 170, 189, 107, 57, 133, 61, 100, 99, 253, 61, 97, 83, 35, 190, 100, 29, 23, 189, 71, 73, 138, 61, 169, 240, 93, 189, 251, 211, 149, 61, 140, 217, 180, 189, 7, 33, 134, 61, 114, 191, 253, 61, 0, 231, 22, 189, 33, 148, 248, 189, 113, 75, 2, 61, 229, 68, 125, 61, 242, 197, 13, 62, 21, 17, 28, 190, 25, 194, 45, 189, 212, 114, 15, 62, 12, 105, 158, 189, 52, 83, 110, 60, 91, 183, 48, 62, 181, 81, 191, 189, 160, 82, 124, 61, 118, 255, 19, 62, 243, 18, 39, 190, 137, 80, 36, 189, 140, 225, 143, 186, 105, 115, 132, 189, 201, 151, 15, 190, 31, 195, 130, 188, 147, 211, 144, 61, 48, 189, 249, 189, 244, 166, 97, 61, 188, 100, 52, 189, 34, 145, 12, 62, 198, 45, 28, 190, 126, 110, 233, 189, 87, 238, 233, 189, 73, 165, 244, 60, 241, 209, 249, 189, 181, 49, 198, 61, 24, 166, 18, 62, 35, 136, 3, 189, 235, 72, 41, 62, 249, 80, 183, 189, 230, 129, 191, 188, 129, 114, 216, 189, 191, 33, 2, 189, 13, 9, 206, 189, 44, 35, 21, 190, 89, 11, 130, 61, 10, 24, 39, 190, 112, 225, 82, 188, 132, 246, 74, 61, 109, 141, 35, 190, 154, 176, 5, 62, 74, 134, 226, 61, 186, 124, 145, 55, 217, 243, 125, 189, 46, 88, 234, 189, 140, 189, 48, 62, 34, 2, 76, 189, 112, 17, 231, 61, 144, 169, 39, 62, 223, 109, 26, 62, 109, 164, 15, 61, 14, 115, 245, 60, 201, 254, 230, 61, 57, 88, 165, 189, 232, 171, 246, 60, 170, 124, 20, 62, 169, 110, 175, 61, 26, 84, 189, 60, 118, 128, 249, 189, 78, 11, 245, 189, 27, 158, 61, 61, 61, 114, 242, 189, 255, 159, 28, 62, 148, 29, 80, 60, 187, 13, 108, 189, 70, 130, 19, 62, 155, 41, 108, 189, 196, 244, 1, 190, 19, 52, 216, 59, 97, 187, 251, 189, 13, 69, 22, 189, 162, 20, 228, 185, 181, 140, 231, 61, 203, 108, 2, 190, 52, 115, 183, 61, 98, 186, 117, 61, 29, 133, 57, 189, 127, 255, 28, 189, 176, 217, 255, 188, 252, 169, 235, 61, 6, 187, 75, 61, 44, 120, 37, 62, 53, 149, 8, 190, 186, 73, 11, 62, 155, 186, 142, 61, 206, 193, 59, 188, 31, 235, 167, 61, 229, 75, 248, 189, 134, 129, 2, 190, 160, 185, 50, 62, 95, 0, 245, 186, 207, 45, 78, 61, 71, 88, 57, 189, 183, 17, 220, 188, 202, 122, 104, 188, 192, 187, 42, 62, 92, 243, 23, 187, 43, 159, 158, 189, 33, 209, 65, 61, 219, 180, 25, 190, 203, 91, 35, 62, 85, 239, 5, 190, 85, 157, 225, 61, 30, 218, 49, 189, 249, 105, 39, 189, 236, 41, 23, 60, 203, 217, 18, 190, 217, 51, 206, 189, 60, 190, 211, 189, 42, 124, 19, 61, 10, 78, 230, 189, 139, 253, 183, 61, 221, 88, 207, 189, 56, 8, 74, 61, 249, 70, 184, 189, 113, 103, 6, 190, 114, 202, 41, 190, 82, 169, 170, 189, 165, 255, 235, 189, 185, 246, 5, 61, 200, 173, 175, 189, 234, 48, 153, 61, 233, 245, 136, 189, 49, 178, 219, 188, 188, 187, 53, 61, 114, 190, 105, 61, 130, 143, 154, 189, 91, 235, 16, 62, 25, 94, 8, 190, 255, 17, 9, 62, 143, 200, 176, 61, 52, 130, 171, 60, 173, 170, 179, 61, 222, 254, 255, 61, 6, 178, 200, 60, 232, 0, 11, 190, 75, 47, 69, 59, 130, 93, 50, 60, 194, 94, 46, 190, 145, 250, 127, 61, 122, 168, 104, 189, 173, 168, 133, 189, 16, 115, 30, 190, 203, 157, 192, 61, 243, 118, 185, 188, 23, 251, 168, 189, 244, 129, 229, 189, 232, 237, 174, 189, 75, 125, 13, 190, 108, 214, 14, 190, 251, 19, 226, 59, 11, 190, 1, 188, 110, 164, 31, 190, 67, 24, 30, 189, 244, 102, 132, 61, 251, 52, 193, 61, 34, 165, 0, 190, 172, 44, 42, 189, 16, 50, 141, 187, 22, 160, 109, 61, 170, 101, 113, 189, 255, 241, 13, 62, 254, 55, 32, 190, 24, 188, 73, 189, 139, 200, 212, 189, 89, 7, 128, 188, 152, 6, 179, 60, 27, 8, 62, 189, 177, 79, 42, 190, 49, 60, 16, 190, 242, 246, 76, 61, 85, 251, 159, 189, 122, 47, 29, 190, 158, 91, 159, 188, 2, 132, 189, 61, 242, 110, 83, 188, 126, 234, 39, 190, 220, 76, 145, 189, 60, 199, 251, 61, 254, 129, 129, 61, 92, 157, 243, 60, 74, 106, 237, 189, 19, 50, 153, 61, 171, 206, 241, 188, 147, 91, 133, 189, 161, 217, 33, 190, 209, 171, 15, 62, 251, 221, 233, 189, 86, 78, 28, 190, 156, 149, 164, 189, 52, 171, 194, 189, 223, 214, 25, 62, 220, 243, 204, 189, 40, 48, 202, 189, 184, 93, 33, 189, 64, 3, 122, 189, 242, 99, 17, 62, 43, 178, 49, 62, 101, 77, 158, 61, 28, 125, 35, 62, 228, 226, 237, 189, 200, 32, 200, 61, 100, 141, 212, 61, 252, 44, 231, 189, 64, 205, 101, 60, 193, 113, 174, 189, 45, 82, 66, 189, 79, 34, 182, 189, 139, 69, 8, 62, 231, 224, 116, 61, 57, 15, 148, 59, 1, 91, 149, 189, 158, 171, 158, 61, 149, 229, 241, 186, 208, 142, 194, 61, 201, 205, 232, 57, 120, 234, 28, 61, 94, 110, 67, 61, 125, 166, 68, 61, 224, 237, 206, 61, 143, 117, 103, 61, 22, 2, 196, 61, 224, 61, 243, 189, 139, 85, 52, 188, 66, 30, 167, 189, 62, 2, 238, 188, 133, 11, 77, 189, 126, 58, 172, 189, 40, 5, 217, 61, 233, 12, 12, 62, 20, 183, 19, 190, 102, 84, 21, 190, 5, 236, 3, 190, 127, 228, 174, 189, 88, 88, 39, 62, 40, 131, 218, 189, 26, 0, 4, 188, 254, 6, 43, 59, 161, 171, 164, 60, 216, 3, 29, 190, 174, 220, 77, 189, 21, 211, 140, 189, 28, 173, 170, 61, 247, 101, 239, 189, 236, 131, 130, 61, 42, 131, 42, 62, 160, 237, 193, 189, 218, 206, 11, 190, 244, 220, 244, 189, 89, 104, 241, 61, 125, 41, 38, 62, 61, 2, 161, 189, 204, 230, 196, 189, 85, 107, 17, 190, 186, 65, 118, 61, 48, 117, 60, 59, 46, 100, 217, 189, 36, 214, 83, 186, 20, 21, 22, 190, 168, 221, 180, 189, 136, 112, 135, 189, 62, 26, 166, 61, 250, 195, 50, 190, 167, 48, 58, 61, 152, 42, 38, 189, 128, 20, 51, 190, 56, 132, 43, 190, 25, 27, 251, 189, 238, 106, 27, 62, 105, 2, 107, 187, 123, 4, 41, 190, 75, 107, 243, 189, 14, 93, 88, 189, 35, 78, 210, 188, 233, 215, 9, 190, 162, 109, 66, 189, 102, 170, 51, 190, 72, 184, 248, 61, 106, 185, 135, 61, 250, 7, 9, 62, 177, 128, 26, 62, 35, 152, 48, 190, 115, 110, 217, 188, 115, 228, 192, 61, 27, 214, 247, 61, 55, 32, 231, 189, 114, 9, 143, 61, 191, 165, 41, 61, 178, 193, 23, 189, 155, 165, 186, 189, 56, 164, 7, 190, 86, 61, 37, 60, 178, 56, 29, 62, 242, 120, 198, 189, 88, 228, 67, 61, 129, 16, 47, 62, 7, 106, 163, 60, 143, 50, 200, 61, 75, 90, 8, 189, 44, 185, 46, 190, 193, 167, 158, 189, 129, 176, 0, 62, 21, 130, 129, 61, 213, 250, 5, 61, 113, 17, 163, 188, 10, 71, 194, 189, 3, 147, 50, 190, 232, 149, 53, 59, 136, 71, 206, 189, 46, 184, 223, 188, 191, 242, 160, 189, 3, 7, 64, 61, 126, 234, 4, 190, 81, 85, 12, 190, 76, 95, 201, 61, 223, 149, 123, 61, 30, 120, 87, 189, 103, 213, 221, 61, 202, 23, 38, 61, 1, 175, 1, 190, 216, 89, 239, 189, 3, 47, 202, 61, 140, 148, 38, 59, 99, 35, 192, 61, 151, 155, 107, 189, 27, 53, 23, 190, 183, 249, 39, 62, 157, 224, 96, 188, 151, 98, 42, 190, 221, 27, 125, 61, 119, 132, 41, 190, 119, 195, 36, 62, 247, 232, 83, 189, 232, 239, 11, 190, 87, 55, 240, 189, 111, 239, 141, 61, 120, 26, 36, 190, 32, 108, 150, 189, 122, 193, 36, 62, 89, 144, 50, 62, 46, 185, 49, 190, 13, 146, 49, 190, 181, 206, 14, 190, 176, 162, 23, 62, 134, 179, 19, 62, 33, 209, 167, 189, 245, 90, 217, 189, 82, 161, 112, 189, 65, 134, 212, 61, 155, 43, 68, 60, 254, 45, 129, 61, 61, 110, 41, 62, 111, 140, 47, 190, 95, 110, 42, 62, 90, 171, 93, 188, 18, 6, 48, 62, 147, 115, 21, 190, 140, 179, 209, 187, 112, 133, 158, 189, 228, 247, 40, 62, 234, 220, 154, 60, 162, 84, 250, 189, 33, 119, 25, 62, 119, 172, 0, 62, 170, 202, 33, 62, 84, 63, 32, 189, 189, 14, 145, 61, 33, 89, 225, 59, 179, 47, 237, 188, 207, 153, 5, 190, 211, 22, 130, 189, 255, 129, 24, 62, 93, 210, 13, 189, 217, 204, 129, 60, 92, 137, 157, 61, 206, 11, 234, 189, 93, 147, 21, 62, 22, 121, 157, 189, 242, 5, 146, 189, 7, 24, 29, 190, 94, 238, 142, 61, 52, 75, 245, 189, 230, 56, 244, 61, 215, 132, 150, 189, 37, 233, 154, 61, 253, 205, 197, 189, 140, 213, 3, 190, 114, 237, 0, 188, 48, 172, 222, 188, 2, 41, 85, 189, 244, 86, 23, 61, 92, 171, 23, 62, 10, 255, 228, 187, 242, 179, 152, 189, 253, 216, 45, 190, 22, 105, 29, 62, 248, 62, 52, 190, 228, 108, 17, 62, 139, 231, 34, 61, 249, 55, 3, 190, 82, 179, 19, 62, 206, 254, 194, 189, 101, 16, 97, 189, 63, 193, 142, 188, 176, 27, 14, 190, 150, 153, 42, 189, 174, 62, 145, 60, 220, 202, 100, 189, 152, 193, 231, 189, 223, 106, 29, 190, 88, 218, 124, 61, 184, 191, 30, 190, 239, 62, 4, 62, 243, 218, 200, 61, 205, 15, 124, 61, 230, 60, 9, 62, 56, 107, 14, 60, 171, 9, 160, 61, 105, 196, 192, 189, 12, 68, 159, 189, 11, 88, 133, 61, 88, 132, 56, 61, 13, 144, 41, 62, 76, 39, 0, 190, 237, 253, 215, 189, 33, 251, 45, 62, 242, 38, 176, 189, 111, 146, 163, 61, 228, 38, 167, 189, 45, 26, 67, 61, 38, 226, 230, 61, 125, 97, 125, 61, 6, 124, 225, 189, 8, 171, 78, 61, 172, 14, 35, 190, 176, 109, 0, 62, 166, 246, 181, 60, 90, 184, 241, 188, 167, 36, 233, 61, 203, 186, 6, 190, 104, 104, 22, 62, 212, 122, 22, 62, 94, 66, 176, 189, 194, 230, 188, 189, 251, 90, 213, 61, 108, 225, 232, 61, 120, 46, 41, 190, 185, 65, 142, 60, 0, 82, 52, 190, 60, 137, 141, 188, 52, 152, 231, 189, 194, 179, 198, 60, 112, 183, 141, 60, 200, 207, 4, 62, 217, 26, 37, 190, 222, 91, 217, 61, 202, 223, 179, 61, 129, 56, 116, 61, 80, 224, 8, 62, 56, 200, 169, 61, 96, 59, 244, 188, 7, 246, 183, 189, 61, 108, 56, 188, 152, 124, 7, 189, 246, 125, 28, 190, 249, 36, 69, 61, 190, 135, 227, 59, 40, 201, 243, 60, 120, 197, 242, 189, 155, 216, 36, 189, 69, 160, 120, 189, 225, 30, 51, 62, 56, 239, 0, 62, 8, 1, 34, 190, 84, 45, 182, 61, 177, 164, 8, 190, 155, 12, 25, 190, 3, 137, 93, 188, 9, 240, 163, 61, 61, 201, 185, 61, 32, 135, 14, 62, 190, 189, 16, 190, 210, 50, 254, 189, 115, 80, 186, 188, 1, 242, 108, 189, 225, 62, 170, 60, 80, 244, 234, 188, 132, 26, 23, 190, 116, 13, 207, 61, 115, 113, 6, 60, 66, 27, 233, 60, 7, 134, 221, 189, 190, 189, 237, 60, 35, 206, 20, 190, 190, 116, 201, 187, 185, 53, 186, 189, 11, 173, 166, 189, 110, 142, 132, 61, 226, 253, 93, 189, 134, 33, 14, 190, 224, 177, 126, 189, 117, 113, 179, 60, 80, 52, 211, 61, 249, 38, 14, 62, 24, 151, 109, 61, 12, 252, 25, 62, 126, 18, 38, 62, 35, 15, 14, 190, 115, 99, 101, 61, 248, 224, 171, 61, 115, 19, 23, 190, 132, 195, 28, 190, 143, 178, 44, 190, 169, 88, 123, 189, 206, 67, 221, 188, 202, 194, 47, 62, 10, 240, 11, 62, 245, 252, 0, 62, 222, 110, 123, 60, 90, 166, 45, 190, 90, 145, 10, 190, 144, 237, 171, 61, 183, 54, 199, 189, 122, 112, 206, 188, 215, 11, 152, 60, 155, 5, 224, 61, 42, 56, 4, 189, 31, 130, 48, 62, 252, 116, 239, 60, 198, 132, 36, 190, 27, 136, 47, 190, 197, 210, 184, 61, 155, 203, 134, 60, 110, 138, 147, 61, 56, 139, 247, 189, 236, 160, 30, 61, 62, 129, 148, 59, 57, 12, 31, 62, 176, 12, 50, 190, 239, 184, 4, 62, 7, 25, 17, 62, 220, 96, 9, 189, 100, 217, 11, 190, 122, 28, 180, 189, 232, 230, 237, 61, 129, 7, 254, 60, 145, 147, 27, 61, 47, 5, 204, 61, 124, 239, 2, 190, 244, 170, 33, 190, 69, 10, 73, 189, 81, 4, 168, 189, 103, 215, 168, 60, 131, 114, 166, 189, 161, 94, 49, 62, 175, 202, 200, 60, 131, 128, 125, 61, 161, 157, 9, 61, 130, 22, 76, 61, 116, 90, 15, 190, 78, 33, 222, 60, 141, 161, 143, 185, 86, 135, 4, 188, 30, 224, 43, 62, 7, 190, 136, 59, 191, 37, 8, 62, 117, 185, 17, 62, 22, 28, 112, 186, 28, 232, 37, 62, 2, 99, 225, 188, 223, 202, 20, 61, 71, 202, 80, 189, 13, 160, 128, 189, 203, 137, 17, 62, 58, 12, 0, 62, 118, 19, 13, 62, 218, 170, 146, 61, 85, 158, 11, 62, 97, 211, 38, 190, 15, 107, 4, 190, 222, 214, 201, 189, 247, 202, 180, 187, 228, 56, 203, 189, 0, 67, 38, 189, 34, 107, 16, 62, 164, 122, 6, 62, 23, 142, 142, 188, 61, 203, 168, 189, 41, 8, 251, 59, 200, 4, 129, 61, 252, 160, 194, 189, 92, 84, 254, 61, 164, 24, 16, 62, 252, 212, 20, 62, 127, 236, 187, 61, 231, 202, 163, 59, 0, 105, 10, 190, 234, 253, 32, 190, 111, 170, 173, 61, 99, 90, 179, 60, 97, 243, 167, 189, 134, 10, 19, 190, 145, 142, 47, 189, 75, 111, 45, 190, 51, 101, 16, 190, 117, 92, 213, 189, 135, 254, 36, 190, 129, 195, 29, 62, 179, 151, 19, 189, 82, 7, 201, 60, 92, 26, 35, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 130, 132, 61, 71, 126, 5, 62, 75, 241, 158, 189, 228, 150, 172, 61, 79, 208, 42, 190, 29, 198, 97, 189, 34, 106, 22, 62, 119, 181, 18, 190, 146, 89, 34, 62, 72, 101, 206, 189, 20, 121, 26, 190, 150, 3, 40, 62, 85, 43, 178, 189, 203, 179, 248, 61, 123, 93, 30, 190, 250, 13, 80, 61, 76, 56, 17, 62, 138, 2, 27, 62, 153, 228, 61, 61, 150, 229, 156, 61, 136, 118, 208, 61, 72, 239, 220, 189, 147, 216, 248, 60, 51, 254, 115, 189, 135, 91, 107, 189, 101, 212, 112, 189, 183, 106, 30, 190, 174, 114, 230, 61, 34, 19, 1, 190, 71, 159, 252, 59, 58, 105, 20, 190, 221, 11, 22, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 230, 43, 190, 72, 178, 8, 189, 223, 238, 42, 190, 66, 97, 191, 189, 226, 143, 170, 189, 22, 187, 221, 187, 202, 132, 238, 61, 5, 37, 18, 62, 91, 206, 51, 190, 53, 40, 128, 189, 107, 102, 194, 61, 139, 178, 244, 61, 123, 110, 129, 189, 9, 26, 228, 189, 91, 34, 14, 62, 16, 136, 236, 61, 44, 73, 200, 61, 53, 142, 126, 188, 60, 219, 23, 62, 132, 133, 244, 189, 169, 54, 189, 61, 17, 22, 145, 188, 208, 122, 228, 60, 174, 207, 95, 189, 91, 162, 49, 62, 148, 190, 254, 61, 96, 154, 35, 60, 172, 29, 227, 189, 235, 178, 198, 61, 44, 68, 48, 61, 61, 170, 208, 189, 246, 5, 35, 190, 210, 205, 251, 188, 114, 123, 140, 189, 79, 184, 131, 61, 117, 157, 28, 62, 87, 172, 25, 190, 197, 98, 228, 186, 142, 98, 116, 61, 190, 211, 205, 61, 221, 184, 24, 190, 163, 64, 86, 61, 127, 237, 26, 190, 222, 78, 176, 189, 72, 177, 14, 190, 212, 199, 177, 189, 208, 111, 26, 62, 242, 186, 35, 62, 154, 57, 37, 189, 253, 238, 27, 62, 78, 76, 180, 188, 2, 117, 182, 189, 104, 174, 48, 189, 180, 222, 42, 62, 200, 28, 240, 61, 140, 55, 15, 62, 128, 107, 19, 190, 86, 68, 212, 61, 24, 116, 165, 60, 11, 205, 31, 61, 226, 38, 10, 190, 95, 203, 36, 190, 39, 233, 207, 189, 229, 120, 164, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 83, 170, 61, 131, 235, 189, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {66, 241, 106, 63, 108, 77, 244, 63, 145, 169, 247, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {90, 210, 62, 189, 157, 167, 17, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0047/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}