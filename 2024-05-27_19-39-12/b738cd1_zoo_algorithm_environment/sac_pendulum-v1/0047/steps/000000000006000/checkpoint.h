// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 0, 171, 62, 80, 210, 71, 191, 21, 196, 25, 191, 239, 26, 100, 61, 189, 238, 9, 191, 235, 145, 48, 62, 119, 224, 14, 63, 76, 212, 42, 62, 115, 7, 27, 63, 160, 161, 219, 62, 235, 63, 167, 190, 28, 143, 228, 59, 117, 7, 91, 62, 150, 105, 241, 190, 117, 93, 124, 190, 69, 16, 184, 62, 184, 90, 165, 190, 71, 110, 199, 62, 210, 201, 7, 191, 26, 97, 8, 191, 140, 85, 142, 60, 198, 82, 15, 61, 13, 215, 0, 63, 213, 107, 16, 61, 195, 19, 212, 190, 95, 141, 129, 189, 120, 74, 192, 62, 65, 67, 184, 190, 171, 180, 140, 190, 53, 10, 230, 189, 47, 79, 53, 191, 114, 195, 72, 190, 74, 252, 185, 190, 62, 224, 1, 187, 248, 126, 57, 190, 250, 32, 23, 188, 189, 176, 39, 63, 66, 105, 163, 63, 169, 52, 15, 63, 12, 115, 176, 190, 99, 178, 41, 63, 46, 92, 241, 62, 176, 214, 32, 191, 125, 197, 193, 63, 56, 211, 201, 62, 247, 157, 90, 189, 245, 165, 16, 63, 72, 190, 220, 190, 40, 217, 37, 63, 126, 139, 232, 62, 68, 233, 6, 190, 66, 249, 43, 62, 238, 211, 51, 191, 29, 222, 7, 62, 243, 21, 222, 62, 144, 47, 57, 191, 5, 138, 203, 190, 33, 176, 155, 59, 50, 252, 155, 62, 158, 31, 41, 63, 190, 187, 42, 191, 156, 18, 74, 191, 99, 169, 17, 191, 219, 101, 129, 190, 72, 216, 2, 63, 246, 4, 231, 62, 226, 160, 218, 62, 178, 56, 200, 190, 54, 190, 97, 62, 166, 67, 160, 61, 90, 200, 179, 189, 58, 27, 57, 61, 216, 227, 70, 190, 4, 152, 189, 63, 173, 251, 189, 62, 147, 223, 57, 190, 200, 110, 250, 62, 51, 112, 9, 61, 18, 136, 77, 190, 47, 174, 135, 62, 136, 46, 167, 62, 150, 185, 8, 63, 62, 87, 76, 63, 241, 226, 11, 63, 35, 52, 183, 62, 88, 88, 92, 63, 47, 140, 143, 190, 13, 217, 228, 190, 144, 44, 101, 191, 41, 51, 127, 190, 88, 56, 51, 190, 229, 119, 176, 189, 64, 76, 37, 63, 122, 215, 161, 190, 165, 234, 237, 189, 46, 18, 215, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 104, 51, 191, 176, 111, 167, 61, 46, 198, 18, 62, 130, 166, 155, 62, 50, 150, 59, 191, 124, 191, 145, 190, 228, 63, 240, 62, 133, 44, 39, 63, 72, 173, 162, 61, 97, 168, 166, 190, 214, 68, 71, 62, 139, 193, 147, 190, 30, 208, 230, 190, 69, 176, 246, 189, 196, 178, 1, 190, 64, 63, 141, 190, 254, 51, 255, 189, 251, 177, 79, 62, 68, 55, 184, 60, 243, 102, 223, 190, 207, 221, 28, 62, 62, 94, 140, 188, 119, 224, 226, 62, 31, 12, 255, 62, 99, 222, 184, 62, 124, 109, 209, 62, 136, 7, 74, 190, 78, 219, 124, 60, 88, 218, 89, 62, 146, 50, 89, 61, 205, 123, 168, 190, 213, 149, 199, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {191, 21, 165, 190, 240, 45, 92, 190, 111, 126, 163, 60, 88, 164, 190, 188, 214, 125, 151, 190, 220, 148, 192, 187, 195, 173, 21, 62, 161, 164, 199, 62, 146, 224, 238, 61, 153, 91, 220, 61, 55, 58, 6, 62, 39, 68, 58, 189, 78, 213, 54, 62, 95, 151, 240, 190, 50, 151, 40, 191, 206, 19, 11, 61, 184, 80, 127, 62, 0, 230, 155, 189, 57, 36, 173, 190, 246, 150, 52, 189, 25, 7, 136, 61, 172, 40, 212, 190, 237, 30, 159, 190, 86, 48, 213, 188, 127, 4, 88, 190, 52, 96, 40, 62, 6, 134, 118, 191, 64, 95, 19, 188, 157, 141, 156, 61, 137, 241, 44, 62, 145, 203, 139, 190, 151, 36, 167, 187, 107, 184, 6, 189, 53, 124, 167, 189, 94, 34, 8, 188, 24, 193, 245, 188, 136, 229, 68, 190, 1, 234, 139, 189, 25, 64, 184, 61, 109, 35, 162, 61, 81, 250, 172, 60, 217, 147, 219, 189, 109, 209, 19, 60, 89, 122, 208, 61, 126, 136, 14, 189, 67, 115, 29, 190, 191, 140, 188, 190, 32, 78, 222, 189, 134, 149, 197, 61, 162, 233, 216, 61, 194, 241, 156, 189, 1, 12, 45, 61, 69, 179, 30, 62, 75, 105, 15, 190, 69, 176, 250, 189, 40, 115, 8, 59, 159, 22, 45, 190, 34, 42, 60, 61, 178, 101, 239, 190, 159, 26, 149, 59, 128, 162, 169, 188, 189, 55, 242, 188, 252, 178, 186, 189, 73, 145, 48, 190, 50, 164, 144, 190, 218, 9, 54, 61, 38, 53, 10, 62, 116, 147, 126, 189, 104, 52, 24, 190, 41, 242, 76, 62, 104, 233, 90, 61, 92, 52, 152, 189, 92, 213, 187, 60, 110, 191, 207, 62, 30, 24, 161, 62, 89, 57, 214, 61, 90, 163, 206, 62, 114, 255, 143, 61, 10, 241, 19, 190, 137, 255, 140, 62, 230, 76, 146, 189, 13, 110, 148, 190, 94, 78, 173, 190, 1, 35, 148, 62, 61, 36, 64, 62, 145, 176, 9, 190, 90, 64, 141, 61, 179, 29, 249, 59, 89, 36, 193, 188, 129, 102, 19, 189, 236, 116, 155, 190, 45, 0, 40, 62, 111, 56, 190, 61, 21, 38, 53, 62, 224, 177, 10, 190, 101, 77, 195, 190, 190, 127, 64, 190, 237, 129, 167, 61, 226, 43, 157, 61, 53, 88, 157, 61, 95, 184, 36, 191, 243, 253, 228, 61, 102, 206, 41, 191, 230, 91, 36, 62, 247, 212, 237, 190, 187, 156, 138, 190, 189, 197, 177, 189, 20, 118, 147, 61, 17, 81, 169, 188, 200, 130, 52, 189, 93, 218, 248, 190, 194, 42, 36, 62, 112, 58, 237, 61, 156, 206, 157, 190, 209, 136, 151, 61, 147, 3, 47, 190, 56, 173, 28, 190, 172, 19, 51, 61, 92, 66, 69, 190, 64, 27, 41, 189, 250, 48, 46, 62, 252, 113, 201, 62, 219, 195, 98, 190, 168, 153, 142, 188, 181, 13, 119, 62, 133, 36, 102, 190, 217, 94, 172, 60, 123, 172, 145, 190, 72, 181, 150, 189, 145, 154, 223, 59, 184, 205, 136, 62, 236, 180, 224, 61, 182, 221, 179, 190, 222, 175, 177, 61, 31, 91, 19, 190, 54, 252, 86, 62, 93, 122, 159, 61, 246, 249, 196, 61, 129, 164, 75, 61, 176, 49, 135, 61, 23, 102, 176, 62, 120, 176, 23, 190, 105, 122, 211, 189, 60, 217, 79, 189, 49, 15, 176, 61, 91, 110, 55, 190, 79, 125, 88, 190, 209, 138, 101, 61, 196, 115, 208, 61, 80, 231, 53, 190, 169, 101, 13, 190, 29, 148, 248, 61, 189, 32, 40, 190, 77, 141, 160, 61, 91, 56, 152, 190, 113, 19, 159, 62, 28, 100, 105, 61, 1, 60, 82, 62, 118, 103, 92, 189, 30, 127, 66, 190, 47, 92, 44, 190, 182, 104, 87, 62, 201, 57, 143, 62, 213, 32, 40, 62, 67, 227, 158, 189, 120, 180, 237, 61, 225, 131, 176, 61, 45, 30, 203, 189, 159, 100, 225, 190, 200, 217, 252, 190, 172, 123, 173, 61, 45, 196, 154, 61, 228, 113, 50, 62, 56, 153, 60, 189, 214, 254, 180, 189, 52, 163, 129, 190, 64, 188, 57, 62, 65, 167, 29, 62, 13, 179, 94, 61, 88, 203, 183, 187, 26, 188, 32, 62, 251, 160, 23, 189, 209, 7, 172, 62, 210, 231, 158, 62, 50, 53, 163, 190, 17, 183, 138, 190, 188, 107, 145, 190, 123, 80, 164, 62, 175, 243, 239, 189, 248, 81, 21, 188, 44, 72, 172, 189, 28, 234, 137, 189, 158, 160, 32, 190, 231, 244, 130, 62, 36, 245, 99, 62, 239, 193, 246, 61, 194, 204, 65, 190, 102, 34, 180, 62, 129, 75, 215, 190, 183, 188, 22, 62, 24, 12, 37, 188, 111, 27, 194, 189, 151, 40, 22, 190, 27, 75, 179, 61, 177, 137, 138, 190, 95, 120, 196, 189, 133, 126, 218, 190, 236, 220, 15, 189, 160, 41, 129, 62, 41, 136, 76, 62, 90, 101, 12, 62, 205, 196, 8, 190, 187, 227, 255, 190, 231, 156, 18, 189, 148, 35, 24, 187, 165, 134, 105, 62, 205, 57, 135, 190, 234, 37, 54, 190, 206, 209, 122, 190, 115, 7, 192, 59, 51, 26, 149, 189, 92, 119, 74, 191, 86, 168, 149, 60, 140, 16, 172, 190, 206, 182, 152, 62, 16, 248, 195, 62, 49, 69, 114, 190, 18, 44, 99, 62, 227, 21, 21, 62, 165, 25, 137, 190, 18, 8, 192, 61, 136, 92, 44, 61, 61, 56, 176, 62, 117, 115, 226, 190, 242, 25, 220, 189, 44, 85, 248, 61, 136, 150, 218, 190, 178, 216, 175, 59, 117, 163, 192, 62, 11, 47, 147, 189, 199, 12, 164, 62, 211, 40, 152, 62, 235, 71, 227, 62, 202, 245, 149, 190, 46, 187, 177, 189, 153, 201, 147, 61, 98, 45, 81, 62, 5, 245, 135, 61, 42, 233, 67, 61, 23, 186, 48, 190, 148, 162, 204, 61, 90, 46, 23, 190, 164, 14, 98, 189, 186, 138, 88, 190, 107, 113, 105, 62, 224, 88, 86, 62, 229, 2, 2, 190, 68, 34, 119, 190, 172, 40, 120, 62, 128, 171, 183, 188, 59, 55, 219, 190, 180, 58, 16, 62, 161, 242, 154, 191, 170, 88, 218, 61, 197, 83, 87, 190, 106, 152, 31, 190, 153, 206, 213, 190, 190, 160, 255, 61, 0, 44, 165, 61, 167, 14, 25, 190, 194, 253, 210, 61, 41, 241, 134, 61, 148, 233, 189, 62, 198, 51, 149, 190, 102, 241, 87, 62, 160, 212, 4, 190, 47, 177, 171, 190, 240, 42, 41, 188, 218, 231, 174, 61, 98, 220, 44, 61, 185, 130, 161, 61, 114, 15, 6, 62, 248, 240, 99, 190, 40, 43, 4, 62, 10, 131, 163, 62, 247, 22, 99, 190, 137, 74, 202, 61, 224, 188, 143, 190, 192, 203, 45, 62, 159, 216, 134, 60, 233, 153, 53, 190, 91, 206, 163, 62, 159, 77, 145, 61, 174, 14, 180, 60, 160, 55, 206, 188, 87, 72, 43, 190, 87, 189, 67, 190, 203, 145, 59, 191, 2, 245, 169, 190, 11, 245, 129, 188, 109, 39, 147, 190, 166, 1, 202, 188, 144, 165, 139, 60, 170, 113, 118, 190, 50, 141, 126, 62, 27, 175, 126, 62, 72, 96, 162, 62, 103, 225, 160, 60, 61, 82, 214, 189, 221, 0, 48, 190, 67, 162, 93, 62, 196, 70, 6, 62, 60, 133, 175, 190, 86, 141, 24, 191, 130, 34, 97, 61, 21, 245, 32, 190, 241, 98, 251, 189, 61, 91, 133, 190, 93, 66, 193, 61, 57, 211, 204, 186, 110, 4, 185, 190, 240, 90, 117, 190, 25, 186, 67, 190, 191, 238, 64, 62, 132, 131, 139, 190, 227, 72, 56, 190, 210, 15, 229, 61, 227, 192, 130, 62, 116, 135, 97, 62, 51, 57, 11, 191, 67, 71, 185, 189, 62, 95, 124, 188, 246, 22, 137, 190, 194, 4, 77, 189, 119, 202, 2, 62, 142, 235, 117, 191, 131, 67, 147, 62, 194, 223, 135, 60, 127, 132, 171, 62, 127, 207, 144, 190, 251, 11, 176, 190, 232, 10, 46, 62, 15, 217, 202, 61, 219, 89, 79, 61, 195, 138, 126, 62, 214, 1, 154, 62, 160, 153, 225, 61, 96, 41, 141, 61, 7, 34, 195, 190, 116, 30, 186, 190, 145, 198, 31, 62, 31, 117, 86, 62, 70, 255, 25, 190, 189, 144, 140, 59, 244, 67, 37, 190, 56, 184, 24, 62, 8, 43, 107, 190, 173, 213, 150, 189, 185, 206, 19, 190, 166, 52, 120, 187, 107, 220, 137, 189, 63, 65, 220, 189, 90, 38, 27, 62, 253, 22, 229, 189, 245, 181, 191, 190, 155, 165, 128, 61, 238, 97, 46, 62, 161, 159, 16, 190, 180, 187, 52, 189, 176, 38, 212, 61, 15, 221, 97, 62, 110, 221, 78, 190, 54, 163, 190, 189, 78, 151, 138, 188, 244, 16, 12, 62, 178, 235, 11, 62, 201, 29, 47, 61, 152, 93, 228, 61, 224, 174, 88, 189, 69, 254, 255, 189, 64, 1, 123, 190, 123, 151, 239, 61, 37, 231, 93, 190, 188, 226, 111, 190, 241, 83, 197, 59, 38, 197, 177, 189, 114, 254, 18, 62, 87, 132, 126, 61, 206, 50, 96, 190, 173, 244, 196, 60, 2, 196, 185, 190, 247, 161, 129, 62, 245, 163, 203, 190, 113, 46, 121, 190, 28, 178, 176, 189, 174, 237, 54, 189, 251, 18, 17, 188, 254, 253, 45, 190, 208, 23, 102, 190, 81, 153, 168, 61, 186, 83, 207, 188, 201, 120, 86, 190, 84, 26, 200, 60, 107, 37, 66, 190, 245, 220, 13, 61, 76, 5, 106, 190, 3, 179, 8, 62, 51, 102, 100, 62, 19, 148, 47, 190, 156, 105, 237, 58, 236, 112, 253, 189, 201, 239, 169, 61, 77, 250, 120, 62, 41, 206, 136, 190, 222, 234, 68, 190, 87, 222, 235, 188, 112, 236, 193, 190, 73, 244, 138, 190, 21, 156, 69, 62, 250, 43, 254, 188, 63, 28, 159, 190, 28, 133, 92, 62, 183, 146, 23, 62, 95, 228, 201, 61, 43, 159, 5, 62, 99, 106, 58, 62, 211, 90, 129, 61, 31, 195, 130, 188, 241, 173, 195, 59, 199, 77, 41, 191, 88, 147, 13, 191, 23, 187, 29, 62, 43, 124, 59, 62, 252, 4, 224, 190, 240, 104, 214, 190, 248, 237, 2, 190, 71, 254, 102, 62, 50, 218, 13, 191, 85, 75, 167, 189, 17, 190, 56, 62, 215, 126, 189, 190, 30, 19, 170, 62, 248, 206, 111, 191, 122, 35, 57, 61, 152, 43, 229, 187, 146, 205, 96, 62, 236, 172, 241, 190, 24, 135, 243, 190, 116, 83, 56, 61, 178, 215, 28, 189, 237, 0, 57, 189, 156, 202, 214, 61, 8, 57, 63, 190, 133, 201, 233, 61, 56, 79, 24, 62, 8, 235, 137, 189, 31, 108, 20, 190, 205, 229, 97, 190, 108, 50, 166, 61, 38, 108, 107, 189, 97, 149, 206, 61, 104, 227, 237, 61, 216, 19, 81, 62, 36, 88, 95, 190, 240, 108, 244, 188, 143, 61, 178, 62, 71, 52, 180, 61, 167, 156, 247, 188, 183, 194, 60, 61, 68, 129, 155, 61, 170, 10, 183, 61, 113, 174, 153, 189, 62, 3, 1, 190, 82, 202, 161, 189, 91, 224, 54, 190, 245, 113, 210, 61, 89, 68, 90, 190, 19, 154, 178, 189, 121, 120, 194, 61, 142, 47, 240, 189, 23, 88, 1, 190, 29, 16, 84, 190, 111, 57, 88, 189, 43, 232, 57, 190, 183, 8, 73, 58, 22, 32, 146, 62, 191, 140, 36, 191, 158, 108, 199, 188, 227, 174, 21, 190, 112, 55, 163, 189, 239, 243, 87, 190, 176, 217, 255, 188, 90, 17, 177, 62, 39, 123, 103, 188, 70, 223, 121, 61, 173, 84, 99, 190, 94, 116, 100, 62, 111, 163, 217, 190, 217, 114, 166, 190, 55, 246, 13, 62, 214, 31, 57, 190, 239, 225, 80, 190, 51, 186, 202, 61, 244, 157, 12, 190, 85, 141, 140, 187, 108, 225, 47, 190, 36, 203, 94, 189, 203, 178, 171, 61, 64, 94, 117, 62, 245, 171, 160, 189, 43, 140, 34, 190, 97, 82, 205, 189, 204, 21, 163, 189, 16, 86, 177, 62, 42, 219, 39, 190, 148, 79, 113, 62, 135, 232, 152, 61, 161, 10, 226, 189, 168, 243, 237, 61, 193, 122, 66, 189, 199, 188, 195, 189, 125, 79, 141, 190, 248, 191, 34, 62, 58, 215, 230, 189, 189, 158, 121, 190, 95, 194, 192, 188, 245, 82, 16, 62, 227, 138, 226, 189, 226, 220, 132, 189, 121, 222, 162, 189, 51, 248, 186, 61, 59, 249, 145, 190, 20, 184, 251, 61, 74, 102, 134, 188, 126, 142, 118, 62, 218, 210, 85, 61, 249, 10, 20, 61, 31, 42, 176, 61, 35, 152, 254, 61, 158, 174, 113, 190, 78, 151, 169, 61, 121, 248, 155, 189, 43, 255, 146, 62, 75, 162, 149, 62, 121, 108, 147, 61, 199, 218, 215, 188, 185, 146, 20, 62, 191, 17, 133, 189, 144, 219, 196, 190, 206, 88, 186, 61, 125, 43, 162, 191, 49, 173, 137, 189, 4, 33, 3, 189, 238, 218, 160, 190, 172, 4, 194, 187, 16, 115, 30, 190, 250, 48, 161, 62, 195, 212, 156, 189, 76, 199, 201, 189, 73, 72, 10, 62, 62, 68, 106, 61, 103, 181, 220, 190, 113, 253, 200, 190, 123, 196, 173, 60, 224, 249, 161, 189, 220, 56, 94, 190, 183, 137, 38, 190, 80, 152, 138, 60, 47, 103, 88, 62, 211, 20, 28, 61, 91, 147, 47, 190, 231, 99, 218, 61, 112, 124, 207, 62, 167, 187, 7, 191, 107, 49, 100, 61, 70, 203, 181, 190, 222, 165, 41, 189, 67, 155, 70, 61, 212, 76, 51, 62, 122, 147, 44, 62, 136, 231, 75, 188, 30, 75, 210, 61, 41, 247, 52, 189, 64, 35, 237, 61, 252, 74, 26, 191, 94, 8, 115, 190, 206, 162, 170, 61, 157, 218, 188, 61, 52, 99, 224, 188, 16, 177, 107, 190, 136, 169, 31, 62, 39, 119, 40, 62, 236, 226, 7, 62, 146, 211, 154, 62, 186, 68, 140, 60, 170, 246, 117, 62, 117, 45, 185, 61, 114, 160, 163, 190, 55, 120, 52, 61, 247, 238, 138, 62, 228, 35, 204, 189, 48, 178, 65, 190, 182, 119, 33, 190, 55, 169, 97, 188, 79, 143, 101, 62, 188, 115, 153, 60, 90, 32, 78, 190, 239, 69, 67, 190, 175, 216, 40, 190, 2, 67, 138, 61, 195, 10, 117, 62, 155, 156, 246, 61, 197, 171, 241, 186, 224, 55, 17, 190, 7, 130, 22, 62, 185, 241, 24, 62, 28, 48, 36, 189, 145, 135, 102, 59, 101, 9, 216, 188, 167, 206, 39, 189, 27, 167, 113, 189, 151, 237, 14, 62, 115, 242, 80, 188, 96, 101, 154, 61, 209, 98, 134, 188, 178, 144, 188, 61, 138, 205, 58, 190, 115, 135, 45, 62, 10, 64, 172, 61, 208, 254, 121, 60, 249, 176, 6, 61, 218, 175, 173, 61, 144, 170, 99, 60, 106, 253, 241, 61, 136, 148, 138, 61, 58, 238, 129, 188, 134, 70, 148, 61, 241, 137, 59, 188, 240, 21, 61, 189, 87, 244, 219, 189, 250, 139, 239, 189, 41, 79, 44, 189, 172, 77, 48, 184, 55, 38, 28, 190, 88, 104, 16, 190, 112, 83, 162, 190, 237, 133, 66, 190, 187, 157, 162, 62, 131, 202, 229, 189, 126, 192, 26, 62, 192, 48, 20, 62, 161, 171, 164, 60, 116, 140, 26, 191, 34, 12, 202, 189, 203, 113, 205, 61, 156, 221, 101, 62, 247, 110, 29, 61, 144, 212, 125, 190, 104, 254, 112, 62, 200, 188, 206, 190, 97, 113, 174, 189, 5, 37, 63, 190, 154, 131, 2, 62, 106, 111, 15, 62, 11, 135, 95, 188, 175, 222, 200, 61, 125, 39, 117, 190, 189, 197, 14, 190, 211, 106, 152, 61, 26, 231, 115, 190, 86, 52, 54, 187, 42, 15, 28, 190, 137, 120, 108, 190, 180, 70, 22, 190, 10, 179, 66, 62, 100, 206, 245, 189, 207, 254, 18, 190, 209, 127, 130, 62, 217, 37, 60, 191, 10, 171, 0, 190, 16, 115, 135, 190, 238, 231, 5, 189, 16, 8, 213, 60, 123, 4, 41, 190, 92, 33, 19, 62, 64, 192, 149, 189, 121, 146, 170, 189, 248, 89, 222, 189, 147, 214, 101, 62, 210, 193, 177, 190, 66, 115, 203, 188, 153, 143, 27, 62, 71, 254, 42, 61, 246, 140, 234, 61, 165, 223, 67, 190, 50, 103, 47, 186, 146, 185, 6, 62, 179, 20, 18, 62, 15, 42, 6, 190, 40, 115, 87, 62, 203, 37, 152, 62, 16, 48, 88, 190, 196, 65, 2, 190, 205, 121, 18, 190, 171, 11, 113, 62, 129, 170, 211, 62, 139, 159, 135, 190, 84, 141, 241, 61, 127, 244, 195, 62, 126, 114, 237, 189, 110, 126, 0, 62, 112, 58, 27, 189, 197, 77, 1, 188, 138, 105, 156, 190, 99, 227, 152, 61, 166, 108, 136, 61, 104, 91, 169, 190, 192, 125, 3, 62, 223, 136, 155, 62, 77, 250, 23, 191, 73, 148, 134, 189, 39, 111, 151, 188, 108, 101, 162, 62, 208, 76, 135, 190, 54, 133, 228, 189, 176, 64, 99, 188, 54, 245, 230, 61, 37, 145, 139, 62, 185, 191, 161, 62, 33, 130, 209, 189, 201, 146, 48, 62, 1, 98, 146, 190, 203, 148, 24, 191, 207, 195, 146, 190, 69, 187, 153, 62, 152, 94, 50, 61, 66, 156, 139, 61, 244, 156, 176, 189, 82, 195, 21, 190, 12, 111, 206, 61, 158, 30, 0, 189, 151, 98, 42, 190, 184, 255, 30, 61, 87, 50, 128, 190, 58, 217, 36, 62, 208, 10, 166, 189, 238, 76, 55, 190, 34, 190, 221, 189, 161, 55, 145, 61, 120, 26, 36, 190, 78, 254, 149, 189, 167, 4, 238, 61, 7, 188, 7, 62, 25, 33, 61, 190, 117, 136, 105, 190, 181, 206, 14, 190, 149, 220, 220, 61, 125, 161, 240, 61, 120, 124, 194, 189, 212, 87, 43, 190, 163, 167, 90, 189, 44, 198, 96, 60, 155, 43, 68, 60, 29, 51, 145, 61, 156, 241, 207, 61, 31, 115, 80, 190, 95, 110, 42, 62, 101, 125, 254, 188, 103, 37, 23, 62, 141, 188, 3, 190, 132, 11, 129, 187, 193, 120, 191, 189, 49, 118, 21, 62, 152, 224, 231, 60, 190, 63, 11, 190, 192, 66, 13, 62, 251, 157, 216, 61, 20, 69, 32, 62, 214, 112, 106, 189, 48, 205, 94, 61, 234, 3, 18, 188, 228, 253, 88, 189, 79, 92, 49, 190, 185, 172, 182, 189, 47, 148, 3, 62, 120, 229, 44, 189, 127, 208, 157, 188, 155, 103, 101, 61, 92, 200, 9, 190, 236, 253, 5, 62, 0, 154, 116, 189, 158, 99, 132, 189, 20, 229, 62, 190, 46, 7, 85, 61, 216, 62, 251, 189, 137, 22, 232, 61, 93, 222, 206, 189, 29, 53, 103, 61, 219, 7, 226, 189, 254, 45, 19, 190, 43, 246, 241, 188, 38, 51, 220, 188, 206, 84, 89, 189, 35, 86, 161, 60, 51, 132, 1, 62, 10, 255, 228, 187, 241, 125, 196, 189, 173, 156, 52, 190, 22, 105, 29, 62, 248, 62, 52, 190, 18, 254, 247, 61, 143, 83, 7, 61, 249, 55, 3, 190, 82, 179, 19, 62, 206, 254, 194, 189, 150, 248, 156, 189, 175, 65, 15, 189, 61, 82, 29, 190, 212, 131, 122, 189, 174, 62, 145, 60, 111, 224, 157, 189, 152, 193, 231, 189, 153, 120, 25, 190, 221, 143, 146, 61, 57, 235, 33, 190, 42, 251, 243, 61, 243, 218, 200, 61, 185, 121, 129, 61, 161, 110, 244, 61, 36, 176, 80, 188, 171, 9, 160, 61, 14, 163, 217, 189, 228, 168, 110, 190, 77, 148, 89, 189, 95, 162, 12, 190, 141, 208, 82, 62, 139, 132, 192, 190, 196, 174, 175, 190, 17, 115, 133, 62, 38, 77, 90, 61, 12, 72, 17, 62, 13, 28, 77, 191, 180, 74, 28, 62, 38, 226, 230, 61, 55, 32, 108, 190, 102, 181, 206, 189, 95, 247, 175, 62, 56, 219, 32, 191, 251, 65, 5, 62, 156, 183, 35, 190, 173, 62, 134, 61, 40, 184, 159, 189, 85, 204, 179, 190, 243, 84, 73, 62, 177, 146, 40, 62, 254, 231, 186, 188, 245, 231, 12, 62, 71, 238, 149, 62, 136, 92, 35, 61, 2, 23, 201, 190, 51, 159, 185, 190, 212, 122, 10, 191, 177, 34, 159, 187, 64, 54, 213, 189, 114, 13, 205, 189, 159, 11, 129, 190, 27, 62, 83, 62, 198, 12, 18, 190, 219, 16, 82, 189, 127, 225, 207, 61, 59, 192, 19, 62, 163, 40, 116, 62, 202, 237, 156, 62, 99, 217, 149, 62, 138, 112, 61, 189, 161, 27, 228, 59, 141, 168, 166, 61, 128, 16, 25, 191, 162, 223, 182, 190, 73, 190, 213, 60, 34, 61, 113, 61, 246, 107, 118, 190, 61, 63, 59, 190, 35, 172, 160, 61, 229, 171, 92, 62, 158, 202, 30, 190, 68, 190, 168, 190, 154, 223, 30, 62, 194, 225, 166, 190, 131, 207, 224, 188, 81, 40, 101, 191, 230, 193, 82, 62, 183, 168, 156, 61, 26, 28, 70, 62, 216, 219, 231, 190, 108, 78, 189, 190, 159, 216, 47, 61, 196, 100, 55, 189, 137, 173, 107, 61, 242, 5, 3, 62, 227, 251, 203, 189, 133, 200, 151, 189, 98, 175, 32, 62, 86, 162, 101, 62, 180, 114, 160, 189, 182, 243, 7, 191, 129, 182, 14, 189, 24, 140, 208, 187, 124, 162, 180, 190, 234, 162, 2, 187, 248, 29, 42, 62, 208, 55, 83, 190, 41, 238, 152, 188, 34, 215, 164, 60, 5, 56, 14, 62, 229, 176, 86, 189, 238, 213, 107, 62, 174, 55, 53, 61, 4, 211, 145, 62, 97, 237, 166, 62, 42, 70, 17, 190, 232, 143, 87, 62, 230, 209, 198, 61, 151, 84, 23, 190, 31, 27, 85, 190, 224, 15, 134, 189, 161, 174, 145, 60, 191, 51, 97, 60, 54, 61, 216, 61, 133, 118, 171, 61, 55, 38, 244, 61, 122, 204, 154, 61, 225, 197, 104, 190, 248, 87, 244, 189, 79, 201, 172, 61, 103, 185, 152, 188, 133, 200, 29, 189, 134, 115, 196, 190, 43, 82, 180, 61, 230, 100, 62, 189, 139, 89, 246, 61, 144, 171, 99, 61, 117, 228, 219, 188, 147, 238, 253, 190, 95, 196, 53, 62, 196, 161, 116, 60, 48, 63, 145, 61, 127, 158, 52, 190, 86, 218, 216, 58, 139, 73, 173, 188, 35, 251, 60, 62, 236, 209, 218, 189, 254, 163, 79, 62, 142, 47, 43, 62, 14, 143, 244, 189, 154, 246, 252, 189, 110, 54, 130, 190, 16, 228, 195, 61, 167, 152, 152, 60, 59, 42, 183, 60, 89, 168, 100, 189, 155, 155, 38, 190, 32, 27, 95, 189, 83, 11, 217, 60, 81, 209, 199, 190, 0, 188, 53, 61, 211, 94, 135, 191, 167, 152, 156, 62, 200, 186, 75, 188, 177, 9, 140, 189, 35, 252, 50, 190, 87, 117, 106, 61, 193, 250, 182, 189, 182, 205, 117, 59, 143, 2, 237, 187, 218, 85, 180, 189, 65, 240, 166, 62, 164, 53, 16, 190, 132, 252, 206, 61, 150, 103, 45, 62, 100, 85, 88, 190, 188, 89, 3, 62, 50, 175, 36, 61, 55, 114, 24, 62, 71, 6, 70, 188, 55, 206, 239, 60, 160, 44, 221, 60, 172, 118, 135, 62, 143, 91, 145, 62, 101, 145, 136, 190, 82, 186, 194, 61, 40, 189, 188, 190, 250, 185, 171, 190, 35, 85, 154, 189, 196, 114, 52, 62, 146, 156, 120, 187, 19, 122, 155, 190, 128, 160, 201, 62, 255, 190, 83, 60, 49, 245, 14, 61, 52, 151, 140, 189, 195, 183, 18, 62, 37, 249, 205, 61, 60, 175, 194, 189, 179, 92, 209, 62, 92, 159, 194, 61, 236, 56, 247, 188, 133, 21, 28, 62, 146, 57, 180, 60, 201, 86, 128, 190, 17, 127, 186, 190, 72, 197, 133, 62, 94, 134, 216, 61, 128, 71, 231, 189, 231, 3, 238, 189, 204, 41, 13, 61, 81, 218, 143, 190, 234, 135, 240, 189, 184, 33, 152, 190, 38, 197, 160, 61, 101, 102, 110, 62, 142, 241, 131, 61, 192, 67, 128, 189, 87, 73, 184, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 243, 124, 62, 224, 73, 87, 62, 168, 50, 219, 189, 18, 9, 15, 62, 239, 129, 140, 189, 145, 22, 229, 61, 34, 56, 81, 62, 130, 88, 254, 188, 214, 211, 46, 62, 246, 15, 202, 189, 222, 72, 175, 60, 210, 17, 98, 62, 173, 154, 87, 187, 154, 60, 161, 62, 50, 243, 70, 190, 187, 187, 99, 190, 180, 94, 149, 62, 7, 140, 150, 61, 22, 76, 55, 62, 54, 70, 32, 62, 55, 12, 47, 62, 97, 219, 89, 190, 50, 235, 227, 61, 188, 53, 5, 190, 76, 190, 155, 189, 201, 50, 155, 189, 46, 111, 159, 60, 121, 165, 91, 62, 73, 174, 170, 61, 204, 56, 185, 61, 165, 168, 206, 189, 243, 16, 61, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 59, 62, 191, 22, 154, 176, 189, 248, 174, 171, 190, 204, 198, 223, 190, 153, 90, 172, 190, 61, 200, 50, 62, 187, 6, 194, 62, 133, 229, 1, 63, 165, 18, 203, 190, 209, 92, 212, 190, 214, 77, 146, 62, 203, 182, 42, 62, 176, 109, 222, 189, 97, 144, 69, 191, 104, 181, 162, 61, 217, 163, 8, 63, 30, 154, 113, 62, 156, 74, 243, 190, 92, 23, 121, 62, 248, 88, 126, 189, 64, 126, 106, 62, 64, 117, 226, 189, 18, 227, 19, 63, 51, 244, 160, 59, 63, 46, 29, 62, 164, 224, 230, 61, 234, 193, 250, 62, 228, 7, 191, 190, 30, 180, 4, 62, 52, 238, 115, 61, 14, 155, 94, 190, 206, 10, 186, 190, 42, 135, 49, 62, 214, 134, 211, 189, 41, 213, 61, 62, 251, 137, 132, 189, 59, 168, 162, 189, 172, 184, 147, 190, 54, 110, 162, 190, 193, 231, 101, 62, 41, 121, 193, 190, 164, 190, 2, 63, 86, 205, 149, 190, 123, 12, 8, 190, 81, 78, 212, 190, 91, 76, 239, 189, 64, 169, 34, 62, 247, 40, 156, 62, 49, 18, 250, 189, 71, 112, 195, 62, 149, 25, 70, 190, 35, 212, 24, 190, 147, 235, 101, 190, 226, 35, 239, 62, 87, 230, 146, 62, 70, 251, 5, 62, 11, 77, 251, 189, 23, 234, 179, 61, 10, 124, 252, 61, 205, 68, 62, 61, 111, 247, 168, 190, 173, 78, 52, 190, 76, 244, 118, 190, 132, 207, 5, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 65, 187, 61, 140, 56, 100, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {249, 61, 35, 192, 83, 33, 15, 190, 203, 116, 225, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {122, 255, 64, 64, 14, 47, 135, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0047/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}