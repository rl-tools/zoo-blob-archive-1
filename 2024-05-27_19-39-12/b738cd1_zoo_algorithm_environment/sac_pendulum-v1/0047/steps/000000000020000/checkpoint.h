// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 69, 21, 63, 143, 90, 129, 191, 225, 255, 251, 190, 107, 254, 19, 62, 138, 56, 33, 191, 66, 251, 197, 61, 100, 22, 3, 63, 57, 87, 124, 62, 167, 106, 38, 63, 205, 21, 145, 62, 252, 75, 91, 190, 44, 214, 7, 62, 57, 188, 0, 63, 23, 178, 244, 190, 191, 11, 125, 190, 51, 229, 230, 62, 108, 212, 253, 190, 132, 46, 239, 62, 150, 53, 210, 190, 68, 86, 112, 191, 98, 251, 55, 61, 46, 16, 5, 189, 250, 215, 31, 63, 38, 189, 4, 61, 13, 205, 85, 191, 215, 82, 251, 186, 186, 150, 197, 62, 160, 67, 52, 191, 90, 161, 225, 190, 49, 181, 17, 190, 245, 32, 104, 191, 186, 129, 186, 190, 164, 16, 157, 190, 62, 224, 1, 187, 248, 126, 57, 190, 250, 32, 23, 188, 137, 116, 62, 63, 181, 55, 180, 63, 131, 28, 6, 63, 254, 164, 193, 190, 225, 23, 160, 63, 149, 19, 136, 62, 125, 84, 22, 191, 198, 84, 227, 63, 145, 13, 191, 62, 146, 53, 51, 191, 131, 119, 66, 63, 43, 46, 217, 190, 77, 11, 4, 63, 146, 81, 139, 63, 244, 78, 142, 190, 21, 33, 40, 62, 55, 13, 56, 191, 52, 141, 20, 62, 67, 42, 185, 62, 52, 126, 86, 191, 217, 100, 251, 190, 171, 155, 33, 61, 201, 22, 18, 63, 227, 165, 13, 63, 4, 61, 57, 191, 174, 235, 152, 191, 67, 204, 249, 190, 21, 45, 193, 190, 227, 88, 55, 63, 144, 218, 225, 62, 70, 232, 202, 62, 161, 159, 151, 190, 232, 138, 211, 61, 203, 193, 66, 190, 150, 140, 114, 189, 233, 36, 161, 60, 102, 37, 101, 190, 122, 157, 215, 63, 46, 178, 214, 62, 96, 169, 127, 190, 83, 231, 26, 63, 251, 149, 28, 62, 239, 166, 49, 191, 38, 52, 69, 63, 208, 202, 57, 62, 133, 162, 234, 62, 206, 66, 139, 63, 194, 177, 11, 63, 45, 42, 193, 62, 90, 52, 123, 63, 145, 247, 68, 190, 3, 94, 222, 190, 255, 138, 160, 191, 162, 20, 162, 190, 223, 134, 8, 190, 212, 31, 122, 189, 110, 178, 44, 63, 128, 163, 128, 191, 143, 225, 153, 62, 231, 88, 153, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {196, 25, 74, 191, 235, 142, 63, 62, 50, 85, 60, 60, 131, 125, 85, 62, 180, 125, 125, 191, 33, 210, 158, 190, 203, 158, 146, 62, 10, 143, 22, 63, 197, 98, 161, 190, 6, 4, 179, 190, 144, 207, 140, 62, 139, 193, 147, 190, 118, 9, 236, 190, 58, 12, 135, 190, 189, 119, 144, 190, 114, 57, 203, 189, 100, 11, 157, 190, 206, 89, 93, 62, 205, 68, 208, 60, 216, 175, 85, 191, 223, 121, 228, 61, 155, 60, 169, 189, 12, 115, 232, 62, 139, 230, 144, 62, 57, 43, 201, 62, 137, 145, 217, 62, 13, 27, 67, 190, 43, 29, 197, 189, 219, 7, 137, 62, 194, 6, 74, 189, 213, 237, 204, 190, 118, 61, 10, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {191, 154, 175, 190, 183, 121, 29, 190, 127, 99, 222, 61, 85, 240, 221, 60, 109, 63, 132, 191, 145, 39, 149, 62, 9, 169, 34, 190, 244, 43, 221, 62, 78, 250, 184, 62, 189, 5, 211, 62, 185, 33, 32, 61, 39, 68, 58, 189, 107, 212, 131, 62, 231, 166, 178, 191, 217, 60, 156, 191, 142, 18, 163, 59, 176, 135, 63, 62, 254, 181, 145, 188, 7, 103, 178, 190, 193, 21, 117, 190, 72, 182, 141, 189, 65, 250, 122, 191, 81, 51, 137, 190, 16, 92, 160, 60, 122, 57, 137, 189, 86, 89, 102, 62, 237, 165, 173, 191, 63, 157, 138, 61, 182, 202, 2, 61, 54, 200, 226, 61, 15, 206, 219, 190, 222, 68, 97, 62, 81, 149, 2, 61, 15, 131, 2, 191, 38, 155, 4, 191, 209, 187, 99, 190, 47, 27, 133, 191, 151, 60, 141, 190, 0, 197, 104, 62, 198, 23, 19, 62, 191, 56, 243, 62, 144, 85, 105, 61, 218, 67, 15, 61, 89, 122, 208, 61, 35, 176, 53, 190, 190, 81, 39, 191, 109, 89, 46, 191, 118, 187, 35, 190, 215, 163, 39, 62, 13, 192, 204, 190, 163, 114, 48, 189, 139, 19, 125, 189, 118, 8, 56, 62, 180, 170, 232, 190, 8, 241, 147, 190, 4, 225, 82, 60, 88, 6, 192, 187, 160, 27, 141, 62, 184, 146, 5, 191, 210, 66, 71, 190, 69, 32, 108, 61, 172, 221, 229, 61, 110, 18, 219, 61, 43, 139, 26, 59, 26, 98, 56, 189, 94, 124, 158, 189, 140, 160, 11, 62, 1, 30, 159, 189, 72, 224, 229, 190, 192, 45, 59, 62, 42, 178, 204, 188, 118, 69, 64, 190, 36, 92, 0, 61, 178, 2, 25, 63, 88, 228, 202, 62, 89, 57, 214, 61, 149, 252, 45, 63, 5, 159, 219, 189, 71, 71, 184, 190, 185, 92, 230, 61, 5, 183, 208, 190, 143, 43, 215, 190, 7, 30, 32, 190, 43, 174, 170, 62, 22, 218, 164, 62, 55, 21, 242, 189, 40, 192, 25, 188, 176, 45, 6, 187, 221, 81, 205, 61, 182, 130, 181, 188, 190, 101, 14, 191, 8, 105, 131, 62, 184, 182, 96, 60, 97, 227, 226, 62, 78, 33, 32, 190, 10, 123, 0, 191, 41, 182, 197, 190, 229, 248, 179, 62, 86, 106, 195, 61, 215, 42, 176, 61, 76, 142, 159, 191, 92, 195, 214, 62, 254, 31, 67, 191, 13, 97, 81, 62, 188, 6, 48, 191, 130, 10, 255, 62, 253, 69, 181, 61, 20, 118, 147, 61, 143, 161, 81, 190, 239, 173, 68, 61, 193, 90, 157, 190, 1, 190, 135, 62, 204, 141, 225, 186, 242, 222, 54, 190, 196, 192, 151, 57, 161, 98, 56, 191, 186, 131, 84, 190, 20, 51, 56, 62, 249, 70, 52, 190, 6, 45, 142, 60, 222, 82, 170, 62, 173, 11, 12, 63, 98, 123, 114, 62, 107, 176, 106, 189, 178, 22, 75, 62, 208, 179, 175, 189, 90, 71, 15, 191, 33, 142, 45, 191, 146, 74, 112, 61, 142, 188, 143, 61, 93, 178, 144, 62, 54, 40, 211, 61, 128, 22, 170, 191, 141, 19, 61, 62, 73, 164, 91, 190, 149, 7, 11, 62, 131, 7, 10, 62, 84, 246, 76, 62, 55, 178, 52, 62, 176, 49, 135, 61, 55, 124, 248, 62, 15, 46, 143, 190, 182, 81, 151, 190, 199, 209, 167, 189, 121, 27, 205, 189, 86, 245, 30, 190, 140, 102, 81, 190, 222, 70, 30, 62, 213, 40, 103, 62, 199, 86, 224, 189, 232, 15, 38, 190, 198, 11, 210, 61, 102, 117, 250, 189, 24, 105, 214, 59, 98, 146, 188, 190, 38, 240, 177, 62, 224, 172, 135, 189, 111, 152, 198, 62, 159, 193, 64, 189, 54, 58, 145, 190, 197, 222, 37, 190, 164, 186, 230, 61, 202, 79, 95, 62, 135, 118, 35, 62, 143, 99, 27, 62, 7, 186, 138, 189, 28, 88, 197, 61, 24, 180, 185, 59, 21, 40, 4, 191, 183, 75, 64, 191, 136, 84, 109, 189, 45, 196, 154, 61, 176, 156, 226, 61, 4, 249, 24, 62, 115, 141, 138, 62, 141, 17, 11, 191, 99, 200, 141, 62, 37, 94, 177, 61, 114, 56, 6, 62, 216, 191, 184, 188, 1, 11, 227, 61, 199, 135, 2, 189, 28, 43, 167, 62, 57, 170, 169, 62, 156, 228, 88, 190, 84, 203, 15, 190, 125, 180, 104, 190, 243, 140, 159, 62, 132, 90, 197, 186, 184, 227, 117, 189, 192, 122, 245, 189, 235, 102, 136, 189, 158, 27, 132, 189, 154, 178, 103, 62, 73, 80, 91, 62, 216, 238, 254, 61, 39, 247, 250, 190, 37, 201, 151, 62, 180, 152, 125, 190, 106, 244, 51, 62, 238, 184, 217, 189, 41, 236, 193, 189, 203, 54, 38, 191, 27, 75, 179, 61, 25, 66, 254, 190, 120, 216, 111, 190, 186, 221, 22, 191, 97, 139, 177, 190, 127, 86, 149, 62, 244, 116, 62, 62, 77, 197, 36, 62, 7, 167, 9, 190, 125, 48, 120, 191, 3, 46, 154, 190, 133, 21, 64, 60, 181, 111, 111, 62, 188, 157, 34, 191, 232, 199, 50, 190, 164, 12, 102, 190, 98, 64, 36, 189, 171, 151, 175, 188, 240, 173, 15, 192, 105, 201, 142, 61, 83, 45, 151, 190, 85, 204, 201, 62, 241, 71, 131, 62, 156, 164, 131, 190, 74, 102, 70, 62, 129, 163, 140, 62, 32, 70, 234, 190, 39, 92, 136, 60, 34, 108, 198, 61, 10, 233, 214, 62, 48, 228, 85, 191, 36, 11, 131, 190, 44, 85, 248, 61, 50, 83, 214, 190, 236, 162, 205, 61, 236, 10, 3, 63, 75, 113, 37, 189, 203, 62, 9, 63, 135, 116, 91, 62, 236, 47, 215, 62, 99, 63, 106, 190, 125, 39, 2, 190, 196, 171, 38, 61, 115, 94, 76, 62, 231, 249, 19, 60, 59, 93, 99, 60, 96, 216, 85, 190, 114, 142, 139, 60, 241, 236, 7, 190, 161, 136, 239, 61, 94, 131, 244, 190, 233, 100, 147, 62, 18, 101, 156, 62, 66, 129, 217, 190, 181, 199, 52, 189, 46, 77, 95, 62, 29, 236, 86, 189, 169, 61, 135, 191, 91, 92, 151, 62, 221, 5, 163, 191, 72, 179, 233, 61, 37, 118, 168, 190, 5, 27, 241, 189, 12, 138, 160, 190, 190, 160, 255, 61, 63, 36, 206, 189, 201, 17, 3, 189, 234, 14, 123, 62, 10, 185, 45, 62, 91, 6, 112, 62, 55, 202, 91, 190, 56, 20, 220, 61, 220, 116, 173, 190, 200, 224, 19, 191, 28, 96, 143, 61, 19, 126, 111, 61, 177, 117, 64, 61, 39, 218, 232, 61, 242, 219, 107, 62, 153, 40, 104, 61, 46, 199, 83, 61, 250, 124, 133, 62, 68, 98, 145, 191, 236, 235, 115, 190, 243, 33, 194, 190, 120, 246, 42, 190, 112, 57, 110, 61, 83, 25, 183, 190, 179, 22, 172, 62, 32, 145, 78, 190, 245, 135, 175, 189, 144, 67, 135, 61, 189, 237, 7, 190, 66, 172, 132, 62, 70, 115, 88, 191, 106, 111, 40, 191, 11, 245, 129, 188, 149, 101, 45, 191, 209, 28, 176, 187, 253, 116, 39, 61, 126, 149, 241, 190, 150, 101, 189, 62, 77, 183, 79, 62, 112, 119, 203, 62, 109, 237, 58, 190, 161, 233, 175, 190, 227, 127, 204, 62, 224, 184, 127, 62, 223, 136, 27, 62, 132, 129, 113, 191, 218, 85, 33, 191, 50, 250, 211, 61, 232, 137, 204, 190, 227, 250, 67, 189, 214, 164, 117, 190, 252, 160, 221, 61, 59, 138, 233, 62, 39, 114, 57, 190, 133, 112, 177, 190, 167, 84, 95, 190, 104, 25, 18, 62, 112, 139, 6, 191, 0, 48, 178, 190, 81, 46, 170, 62, 89, 25, 169, 62, 122, 176, 179, 62, 211, 193, 79, 191, 49, 179, 238, 190, 62, 95, 124, 188, 48, 122, 155, 190, 96, 141, 217, 189, 19, 128, 189, 61, 132, 249, 159, 191, 132, 22, 239, 62, 235, 131, 150, 189, 64, 129, 189, 62, 200, 44, 115, 190, 96, 84, 197, 190, 11, 134, 38, 62, 156, 76, 112, 61, 151, 42, 129, 61, 214, 207, 83, 62, 49, 98, 199, 62, 36, 50, 155, 188, 29, 38, 22, 61, 254, 55, 110, 190, 128, 58, 39, 191, 58, 189, 101, 62, 222, 192, 146, 62, 185, 45, 64, 190, 3, 196, 14, 61, 165, 72, 49, 190, 248, 153, 56, 62, 9, 107, 236, 61, 3, 86, 102, 189, 181, 220, 65, 189, 217, 102, 211, 59, 192, 72, 57, 190, 5, 9, 236, 190, 96, 179, 48, 61, 253, 22, 229, 189, 235, 254, 253, 190, 110, 97, 176, 189, 96, 197, 133, 60, 11, 12, 13, 191, 42, 5, 213, 57, 76, 204, 8, 62, 29, 18, 137, 62, 182, 123, 209, 61, 173, 115, 9, 190, 74, 219, 128, 190, 118, 107, 46, 62, 144, 171, 30, 62, 21, 204, 178, 190, 212, 130, 43, 60, 96, 152, 37, 190, 206, 83, 49, 190, 187, 159, 76, 190, 128, 233, 221, 60, 246, 2, 125, 60, 25, 255, 155, 190, 181, 170, 30, 188, 82, 143, 100, 62, 241, 161, 210, 61, 72, 132, 28, 61, 180, 63, 40, 191, 235, 50, 13, 62, 30, 14, 255, 190, 33, 206, 141, 62, 201, 248, 207, 190, 53, 75, 78, 190, 228, 80, 68, 190, 174, 237, 54, 189, 190, 212, 210, 190, 240, 245, 33, 190, 101, 5, 230, 190, 111, 129, 189, 61, 189, 91, 66, 187, 223, 201, 127, 189, 23, 157, 87, 61, 202, 154, 65, 190, 200, 39, 0, 190, 172, 130, 125, 190, 76, 25, 237, 61, 65, 156, 49, 62, 49, 47, 74, 191, 167, 10, 154, 189, 44, 218, 14, 190, 105, 20, 132, 189, 143, 49, 144, 62, 245, 208, 5, 191, 138, 191, 165, 190, 165, 250, 162, 188, 225, 198, 184, 190, 100, 47, 73, 190, 90, 230, 131, 62, 68, 242, 115, 60, 214, 48, 109, 191, 120, 36, 241, 62, 244, 52, 63, 190, 56, 76, 54, 62, 68, 53, 6, 63, 124, 214, 164, 62, 202, 52, 165, 187, 31, 195, 130, 188, 145, 142, 34, 61, 205, 35, 159, 191, 243, 2, 93, 191, 199, 208, 65, 62, 70, 46, 75, 62, 204, 126, 193, 190, 255, 53, 209, 190, 125, 244, 171, 190, 210, 95, 208, 61, 52, 171, 146, 191, 27, 211, 75, 189, 231, 218, 111, 62, 203, 206, 113, 190, 33, 52, 217, 62, 67, 218, 122, 191, 146, 149, 202, 61, 63, 135, 242, 60, 78, 210, 155, 61, 82, 67, 40, 191, 79, 86, 245, 188, 133, 73, 31, 191, 121, 47, 200, 61, 117, 18, 53, 189, 9, 151, 28, 62, 199, 160, 147, 190, 141, 135, 18, 62, 89, 126, 229, 62, 66, 123, 169, 189, 82, 216, 0, 191, 216, 127, 62, 62, 98, 148, 170, 62, 38, 108, 107, 189, 188, 151, 122, 190, 160, 190, 8, 189, 224, 123, 58, 62, 134, 110, 177, 62, 163, 123, 27, 190, 86, 23, 243, 62, 242, 154, 19, 190, 185, 225, 87, 190, 53, 9, 3, 62, 119, 45, 170, 190, 124, 95, 27, 62, 171, 252, 148, 59, 50, 26, 253, 190, 169, 219, 133, 190, 105, 52, 107, 190, 203, 245, 3, 189, 24, 145, 3, 191, 45, 33, 252, 188, 63, 238, 60, 61, 108, 67, 154, 190, 138, 39, 200, 190, 12, 175, 233, 61, 118, 63, 182, 190, 64, 99, 176, 190, 9, 20, 34, 188, 82, 246, 237, 62, 211, 60, 64, 191, 254, 148, 16, 189, 155, 232, 100, 190, 9, 40, 43, 190, 42, 182, 157, 190, 176, 217, 255, 188, 40, 175, 190, 62, 221, 43, 157, 189, 170, 15, 171, 188, 226, 104, 8, 62, 200, 194, 12, 63, 110, 57, 77, 190, 64, 158, 7, 192, 2, 250, 91, 60, 242, 216, 30, 190, 41, 6, 63, 191, 16, 20, 33, 188, 95, 81, 136, 190, 246, 212, 249, 59, 156, 58, 86, 190, 199, 3, 101, 191, 36, 89, 63, 61, 228, 68, 240, 62, 142, 11, 8, 189, 171, 183, 24, 190, 216, 35, 112, 190, 76, 161, 78, 190, 24, 250, 197, 62, 112, 70, 0, 190, 60, 111, 142, 62, 140, 139, 186, 61, 51, 25, 249, 189, 115, 189, 92, 62, 206, 35, 2, 189, 171, 133, 19, 190, 121, 209, 242, 190, 10, 9, 2, 62, 58, 215, 230, 189, 1, 161, 184, 190, 97, 44, 161, 190, 188, 240, 67, 190, 78, 114, 131, 189, 156, 77, 51, 60, 8, 194, 86, 188, 190, 19, 203, 60, 17, 141, 117, 190, 157, 138, 144, 61, 22, 70, 53, 190, 230, 157, 154, 62, 97, 233, 70, 61, 111, 244, 197, 190, 96, 32, 32, 189, 158, 80, 147, 61, 228, 133, 128, 190, 205, 124, 10, 62, 138, 116, 175, 190, 67, 34, 196, 62, 70, 122, 186, 62, 245, 85, 2, 190, 40, 133, 179, 191, 155, 227, 165, 190, 69, 101, 15, 190, 74, 252, 96, 191, 137, 75, 194, 189, 36, 123, 51, 191, 122, 200, 6, 62, 216, 46, 106, 190, 23, 41, 184, 62, 230, 19, 128, 61, 16, 115, 30, 190, 27, 168, 42, 190, 113, 50, 74, 189, 32, 17, 97, 187, 138, 105, 26, 62, 11, 115, 2, 62, 18, 46, 156, 191, 125, 55, 215, 190, 27, 208, 169, 190, 31, 244, 153, 190, 2, 111, 29, 190, 211, 188, 122, 190, 254, 237, 30, 62, 175, 68, 214, 62, 169, 199, 187, 62, 22, 250, 145, 60, 146, 97, 111, 190, 172, 186, 12, 63, 80, 171, 64, 191, 107, 148, 119, 190, 230, 79, 14, 191, 224, 105, 224, 189, 29, 190, 81, 61, 235, 157, 80, 62, 104, 44, 99, 62, 34, 216, 185, 60, 95, 92, 115, 61, 97, 15, 175, 189, 206, 243, 62, 62, 200, 19, 102, 191, 198, 176, 163, 190, 32, 11, 77, 61, 157, 218, 188, 61, 158, 235, 199, 60, 72, 115, 18, 60, 199, 45, 55, 62, 95, 233, 125, 62, 102, 85, 158, 62, 58, 174, 174, 62, 35, 230, 112, 188, 132, 142, 151, 62, 128, 108, 147, 61, 169, 51, 39, 191, 163, 94, 226, 61, 20, 0, 136, 62, 49, 2, 188, 190, 48, 54, 141, 190, 57, 30, 190, 191, 81, 161, 116, 61, 58, 25, 192, 62, 136, 172, 47, 190, 35, 180, 239, 189, 219, 209, 222, 190, 179, 73, 172, 189, 5, 4, 5, 62, 77, 157, 48, 62, 104, 108, 198, 60, 255, 101, 54, 191, 140, 63, 1, 190, 171, 98, 17, 62, 81, 93, 4, 62, 77, 122, 200, 61, 160, 106, 129, 189, 88, 166, 161, 61, 167, 206, 39, 189, 34, 95, 5, 190, 57, 75, 47, 62, 170, 116, 52, 60, 242, 76, 218, 61, 80, 173, 28, 190, 199, 219, 192, 61, 79, 164, 50, 190, 243, 122, 121, 62, 36, 244, 187, 61, 144, 11, 62, 62, 4, 197, 112, 189, 65, 244, 171, 61, 136, 19, 147, 61, 4, 97, 50, 62, 11, 131, 104, 62, 64, 252, 155, 189, 202, 208, 84, 60, 115, 58, 72, 188, 125, 157, 33, 189, 95, 112, 110, 189, 103, 244, 199, 189, 126, 122, 91, 190, 138, 180, 42, 189, 62, 243, 250, 189, 212, 195, 134, 190, 94, 122, 58, 191, 182, 188, 97, 190, 17, 68, 207, 62, 243, 89, 46, 62, 129, 255, 50, 62, 199, 117, 71, 62, 161, 171, 164, 60, 206, 92, 14, 191, 92, 128, 148, 188, 12, 145, 224, 61, 43, 211, 149, 62, 16, 144, 60, 62, 92, 155, 158, 190, 102, 147, 135, 62, 112, 206, 213, 190, 119, 241, 13, 189, 166, 176, 2, 191, 96, 200, 40, 62, 104, 174, 20, 62, 215, 49, 118, 190, 48, 41, 206, 61, 66, 192, 109, 191, 101, 62, 16, 190, 167, 189, 87, 62, 18, 203, 188, 190, 77, 210, 74, 61, 184, 196, 26, 189, 159, 96, 0, 191, 13, 238, 122, 189, 76, 234, 76, 62, 92, 1, 70, 190, 179, 106, 46, 191, 8, 224, 192, 62, 168, 17, 58, 191, 175, 177, 41, 190, 155, 71, 66, 190, 148, 167, 86, 62, 255, 224, 24, 62, 123, 4, 41, 190, 29, 43, 41, 62, 82, 231, 87, 190, 84, 170, 113, 190, 114, 124, 155, 60, 85, 217, 151, 62, 127, 79, 133, 190, 133, 64, 13, 190, 28, 245, 78, 62, 251, 110, 241, 61, 231, 217, 253, 61, 31, 90, 128, 190, 192, 7, 11, 189, 146, 242, 40, 62, 137, 10, 252, 61, 244, 187, 130, 190, 150, 10, 83, 62, 250, 169, 161, 62, 226, 210, 108, 62, 156, 181, 67, 189, 45, 222, 92, 189, 195, 51, 128, 62, 145, 191, 7, 63, 247, 80, 115, 190, 75, 193, 13, 62, 201, 132, 92, 63, 165, 17, 170, 189, 68, 33, 148, 62, 183, 6, 3, 190, 246, 152, 72, 189, 204, 97, 38, 191, 125, 168, 237, 189, 166, 108, 136, 61, 232, 224, 231, 190, 144, 133, 132, 62, 94, 111, 238, 62, 157, 17, 195, 191, 37, 27, 7, 190, 119, 135, 190, 61, 66, 221, 155, 62, 122, 78, 116, 190, 5, 201, 46, 190, 178, 25, 47, 189, 110, 145, 47, 62, 22, 32, 136, 62, 169, 55, 150, 62, 97, 40, 61, 190, 35, 112, 143, 62, 75, 91, 169, 190, 57, 125, 126, 191, 101, 148, 192, 190, 170, 253, 180, 62, 30, 173, 251, 61, 212, 137, 105, 61, 244, 156, 176, 189, 82, 195, 21, 190, 138, 156, 207, 61, 11, 127, 42, 189, 151, 98, 42, 190, 249, 119, 154, 60, 91, 36, 144, 190, 58, 217, 36, 62, 55, 140, 208, 189, 93, 66, 83, 190, 34, 190, 221, 189, 161, 55, 145, 61, 59, 198, 39, 190, 201, 252, 161, 189, 107, 58, 210, 61, 207, 229, 236, 61, 25, 33, 61, 190, 133, 20, 118, 190, 181, 206, 14, 190, 111, 73, 183, 61, 125, 161, 240, 61, 147, 203, 191, 189, 248, 60, 80, 190, 224, 126, 128, 189, 114, 248, 15, 189, 155, 43, 68, 60, 29, 51, 145, 61, 224, 112, 185, 61, 247, 108, 114, 190, 95, 110, 42, 62, 101, 125, 254, 188, 118, 14, 0, 62, 141, 188, 3, 190, 132, 11, 129, 187, 33, 120, 195, 189, 210, 168, 10, 62, 152, 224, 231, 60, 190, 63, 11, 190, 170, 38, 8, 62, 251, 157, 216, 61, 20, 69, 32, 62, 228, 108, 139, 189, 48, 205, 94, 61, 234, 3, 18, 188, 228, 253, 88, 189, 79, 92, 49, 190, 0, 53, 214, 189, 147, 182, 240, 61, 120, 229, 44, 189, 143, 85, 34, 189, 155, 103, 101, 61, 101, 186, 28, 190, 236, 253, 5, 62, 0, 154, 116, 189, 68, 250, 135, 189, 20, 229, 62, 190, 46, 7, 85, 61, 216, 62, 251, 189, 137, 22, 232, 61, 136, 198, 237, 189, 193, 178, 72, 61, 219, 7, 226, 189, 254, 45, 19, 190, 43, 246, 241, 188, 38, 51, 220, 188, 206, 84, 89, 189, 35, 86, 161, 60, 51, 132, 1, 62, 10, 255, 228, 187, 241, 125, 196, 189, 173, 156, 52, 190, 22, 105, 29, 62, 248, 62, 52, 190, 18, 254, 247, 61, 143, 83, 7, 61, 249, 55, 3, 190, 82, 179, 19, 62, 206, 254, 194, 189, 150, 248, 156, 189, 175, 65, 15, 189, 61, 82, 29, 190, 212, 131, 122, 189, 174, 62, 145, 60, 111, 224, 157, 189, 152, 193, 231, 189, 153, 120, 25, 190, 221, 143, 146, 61, 57, 235, 33, 190, 42, 251, 243, 61, 243, 218, 200, 61, 185, 121, 129, 61, 161, 110, 244, 61, 36, 176, 80, 188, 171, 9, 160, 61, 14, 163, 217, 189, 48, 156, 22, 63, 160, 155, 32, 62, 73, 228, 186, 190, 113, 54, 147, 62, 116, 183, 163, 61, 231, 186, 219, 190, 218, 123, 160, 62, 231, 207, 174, 60, 174, 98, 73, 188, 186, 161, 153, 191, 174, 1, 161, 61, 38, 226, 230, 61, 95, 91, 29, 191, 206, 169, 175, 190, 234, 222, 19, 62, 125, 233, 54, 191, 102, 82, 42, 62, 236, 57, 152, 189, 11, 9, 163, 62, 23, 66, 200, 189, 71, 182, 49, 190, 59, 23, 197, 188, 255, 255, 54, 62, 76, 175, 95, 189, 176, 166, 208, 61, 133, 93, 1, 60, 49, 199, 92, 190, 30, 129, 94, 191, 67, 104, 162, 190, 72, 63, 230, 190, 126, 81, 25, 190, 127, 105, 178, 190, 189, 251, 120, 61, 249, 45, 106, 190, 113, 165, 128, 62, 187, 201, 15, 190, 230, 22, 41, 190, 154, 238, 116, 62, 193, 42, 25, 187, 79, 199, 37, 62, 155, 121, 233, 62, 123, 220, 199, 62, 22, 226, 244, 189, 161, 27, 228, 59, 139, 18, 145, 62, 185, 154, 172, 191, 129, 69, 141, 191, 132, 158, 238, 189, 126, 145, 58, 189, 238, 56, 117, 190, 30, 182, 35, 190, 5, 52, 140, 62, 74, 91, 68, 62, 232, 53, 80, 189, 61, 53, 177, 190, 85, 195, 18, 62, 151, 186, 219, 189, 250, 22, 90, 189, 191, 93, 166, 191, 185, 204, 148, 62, 107, 138, 1, 189, 81, 234, 172, 62, 73, 146, 135, 190, 215, 117, 242, 189, 190, 73, 5, 61, 194, 230, 60, 61, 246, 117, 144, 61, 247, 218, 34, 62, 193, 42, 63, 190, 152, 223, 146, 189, 35, 177, 154, 62, 156, 225, 109, 62, 84, 147, 88, 59, 140, 79, 40, 191, 73, 33, 20, 60, 24, 140, 208, 187, 43, 24, 253, 190, 119, 95, 99, 190, 74, 180, 147, 189, 140, 186, 60, 190, 104, 208, 57, 61, 59, 70, 237, 61, 39, 228, 39, 62, 87, 74, 168, 61, 161, 189, 135, 62, 186, 6, 143, 60, 106, 165, 175, 62, 84, 185, 170, 62, 155, 233, 238, 190, 35, 163, 17, 62, 162, 253, 194, 60, 193, 0, 57, 190, 254, 40, 21, 190, 249, 110, 37, 190, 216, 239, 20, 62, 199, 150, 27, 62, 206, 187, 134, 62, 168, 108, 25, 62, 133, 166, 62, 60, 81, 87, 51, 188, 38, 196, 6, 190, 84, 144, 129, 190, 12, 157, 147, 62, 157, 161, 4, 190, 194, 47, 16, 62, 181, 173, 2, 191, 126, 236, 58, 62, 230, 100, 62, 189, 149, 112, 31, 189, 135, 241, 169, 61, 97, 82, 42, 61, 45, 91, 87, 191, 36, 196, 250, 189, 155, 105, 75, 61, 174, 146, 3, 62, 61, 91, 41, 190, 61, 102, 23, 62, 93, 134, 16, 61, 156, 212, 9, 62, 13, 1, 186, 189, 190, 98, 82, 62, 151, 103, 124, 62, 188, 69, 151, 188, 101, 215, 100, 190, 37, 1, 27, 191, 70, 154, 109, 62, 37, 204, 31, 187, 234, 113, 190, 61, 168, 128, 131, 190, 21, 44, 179, 61, 201, 191, 37, 61, 59, 220, 254, 60, 105, 229, 98, 191, 241, 92, 160, 62, 116, 126, 153, 191, 100, 163, 55, 62, 158, 83, 185, 61, 239, 87, 141, 189, 11, 154, 76, 190, 87, 117, 106, 61, 208, 17, 93, 189, 43, 51, 126, 190, 171, 139, 185, 190, 70, 240, 128, 189, 128, 238, 51, 62, 189, 135, 21, 60, 231, 217, 65, 60, 198, 144, 181, 62, 202, 249, 200, 190, 120, 149, 107, 62, 22, 80, 129, 61, 37, 160, 171, 61, 180, 190, 49, 190, 150, 179, 25, 190, 229, 242, 50, 188, 117, 254, 154, 62, 44, 235, 45, 62, 234, 112, 142, 191, 96, 6, 97, 62, 113, 122, 199, 190, 73, 102, 221, 190, 122, 159, 74, 189, 33, 10, 63, 62, 137, 154, 158, 60, 20, 51, 101, 191, 53, 189, 237, 62, 13, 246, 159, 190, 108, 100, 101, 60, 116, 86, 249, 189, 184, 196, 241, 62, 83, 49, 243, 61, 60, 175, 194, 189, 150, 174, 5, 63, 173, 229, 133, 188, 209, 125, 55, 190, 44, 249, 231, 61, 130, 69, 27, 190, 154, 133, 117, 190, 208, 170, 199, 190, 151, 33, 154, 62, 96, 129, 228, 60, 119, 226, 59, 189, 211, 9, 234, 189, 247, 194, 178, 60, 119, 165, 93, 190, 160, 119, 29, 190, 249, 9, 160, 190, 200, 134, 209, 61, 179, 92, 55, 62, 175, 52, 225, 61, 97, 252, 219, 189, 220, 238, 8, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {126, 88, 154, 62, 62, 222, 134, 62, 207, 195, 54, 190, 168, 80, 70, 62, 239, 143, 223, 189, 74, 157, 55, 62, 29, 130, 114, 62, 74, 220, 94, 189, 104, 179, 55, 62, 194, 130, 111, 189, 0, 89, 136, 61, 203, 23, 126, 62, 12, 121, 191, 60, 178, 149, 197, 62, 193, 137, 130, 189, 133, 204, 167, 190, 61, 172, 155, 62, 182, 193, 123, 62, 211, 139, 78, 62, 22, 24, 15, 62, 250, 111, 89, 62, 200, 12, 149, 190, 65, 226, 34, 62, 78, 40, 37, 190, 11, 120, 171, 189, 201, 50, 155, 189, 155, 120, 23, 61, 58, 119, 52, 62, 71, 17, 243, 61, 81, 183, 179, 61, 176, 252, 67, 190, 178, 230, 36, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 224, 84, 191, 126, 133, 36, 191, 205, 73, 36, 191, 115, 226, 18, 191, 120, 179, 219, 190, 209, 12, 17, 62, 125, 143, 220, 62, 37, 62, 21, 63, 38, 94, 184, 190, 19, 63, 147, 191, 180, 27, 182, 62, 217, 237, 49, 62, 60, 198, 95, 61, 191, 130, 93, 191, 232, 175, 23, 63, 89, 54, 227, 63, 1, 110, 135, 62, 74, 110, 143, 191, 134, 218, 176, 62, 52, 184, 33, 189, 151, 27, 170, 62, 109, 242, 214, 189, 47, 153, 132, 63, 75, 155, 23, 189, 134, 37, 29, 62, 164, 224, 230, 61, 241, 152, 105, 63, 13, 170, 196, 190, 205, 142, 14, 62, 66, 26, 34, 190, 252, 191, 115, 190, 143, 153, 210, 190, 148, 179, 80, 62, 70, 32, 85, 189, 106, 183, 26, 62, 97, 196, 223, 189, 13, 198, 37, 190, 6, 240, 136, 190, 77, 169, 147, 190, 243, 37, 102, 62, 103, 190, 196, 190, 214, 3, 132, 62, 224, 186, 126, 190, 176, 126, 55, 190, 220, 225, 65, 191, 202, 179, 138, 189, 186, 27, 191, 62, 201, 13, 230, 62, 242, 183, 243, 189, 143, 158, 153, 62, 96, 44, 234, 189, 30, 237, 53, 190, 243, 66, 73, 190, 35, 224, 11, 63, 166, 133, 250, 62, 56, 105, 210, 61, 89, 45, 251, 189, 23, 234, 179, 61, 5, 236, 80, 62, 250, 73, 147, 189, 75, 183, 217, 190, 68, 132, 170, 190, 171, 160, 170, 190, 59, 125, 225, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 11, 217, 61, 83, 238, 184, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {183, 25, 202, 190, 10, 24, 17, 63, 8, 94, 233, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {237, 113, 48, 192, 223, 255, 20, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0047/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}