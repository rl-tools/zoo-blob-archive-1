// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 91, 70, 62, 162, 0, 25, 191, 241, 225, 34, 191, 157, 118, 55, 61, 181, 110, 13, 191, 85, 106, 97, 62, 197, 0, 20, 63, 80, 70, 86, 61, 71, 155, 25, 63, 32, 186, 196, 62, 193, 157, 74, 190, 61, 22, 102, 189, 232, 152, 98, 61, 26, 7, 190, 190, 254, 192, 140, 190, 155, 10, 143, 62, 243, 158, 117, 190, 35, 111, 213, 62, 173, 61, 192, 190, 165, 123, 5, 191, 54, 4, 135, 189, 18, 204, 224, 60, 102, 43, 243, 62, 34, 199, 61, 61, 76, 59, 7, 191, 191, 173, 173, 188, 193, 135, 146, 62, 99, 71, 169, 190, 1, 49, 165, 61, 152, 218, 239, 189, 217, 237, 10, 191, 205, 33, 64, 61, 121, 2, 201, 190, 130, 238, 232, 186, 28, 170, 59, 190, 204, 36, 133, 188, 86, 150, 45, 63, 35, 199, 120, 63, 46, 133, 14, 63, 135, 206, 97, 190, 207, 245, 192, 188, 121, 232, 36, 63, 80, 170, 6, 191, 25, 168, 151, 63, 42, 105, 179, 62, 101, 32, 147, 190, 149, 63, 27, 63, 217, 135, 210, 190, 200, 242, 42, 63, 142, 243, 136, 62, 147, 53, 254, 189, 99, 145, 7, 62, 8, 64, 107, 191, 68, 110, 143, 61, 70, 16, 211, 62, 241, 126, 244, 190, 42, 228, 217, 190, 88, 242, 7, 61, 11, 26, 59, 62, 134, 47, 37, 63, 106, 128, 57, 191, 134, 247, 209, 190, 57, 249, 24, 191, 178, 78, 214, 189, 236, 36, 66, 189, 101, 98, 12, 63, 198, 95, 191, 62, 197, 148, 243, 190, 110, 35, 158, 62, 8, 10, 16, 62, 10, 144, 111, 189, 9, 141, 81, 61, 175, 86, 81, 190, 193, 135, 143, 63, 194, 211, 109, 62, 59, 36, 18, 190, 21, 138, 2, 63, 54, 70, 215, 60, 186, 10, 57, 190, 116, 149, 94, 190, 251, 28, 172, 62, 119, 76, 13, 63, 155, 220, 29, 63, 14, 67, 13, 63, 208, 86, 144, 62, 2, 166, 87, 63, 34, 7, 101, 190, 5, 64, 234, 190, 245, 254, 15, 191, 33, 220, 140, 190, 223, 205, 164, 190, 179, 175, 188, 190, 27, 203, 41, 63, 116, 25, 201, 190, 125, 173, 2, 191, 136, 184, 206, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 104, 35, 191, 179, 186, 248, 61, 136, 207, 13, 62, 122, 140, 181, 62, 118, 43, 5, 191, 207, 220, 168, 190, 88, 6, 214, 62, 67, 189, 38, 63, 228, 226, 94, 62, 247, 55, 129, 190, 76, 35, 190, 62, 210, 168, 146, 190, 111, 234, 242, 190, 109, 234, 27, 190, 236, 190, 253, 187, 181, 10, 6, 190, 240, 83, 44, 190, 164, 10, 131, 62, 184, 182, 151, 59, 42, 89, 233, 190, 5, 66, 101, 62, 28, 221, 47, 188, 22, 208, 231, 62, 115, 129, 3, 63, 244, 139, 216, 62, 244, 90, 208, 62, 108, 179, 49, 190, 42, 247, 10, 60, 76, 92, 140, 62, 27, 6, 198, 61, 192, 164, 97, 190, 0, 239, 164, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 40, 144, 190, 245, 250, 181, 190, 123, 177, 93, 60, 159, 87, 208, 188, 65, 214, 97, 189, 137, 49, 23, 190, 247, 231, 54, 62, 113, 144, 191, 62, 52, 196, 155, 61, 46, 97, 12, 62, 185, 118, 1, 62, 39, 68, 58, 189, 139, 184, 71, 62, 81, 231, 144, 190, 104, 13, 153, 190, 240, 156, 49, 188, 88, 111, 89, 62, 52, 81, 37, 190, 186, 30, 163, 190, 88, 230, 170, 189, 227, 69, 153, 61, 19, 124, 160, 190, 132, 45, 167, 190, 81, 124, 47, 189, 128, 6, 116, 187, 165, 152, 36, 62, 139, 201, 113, 191, 196, 46, 34, 188, 47, 245, 201, 60, 55, 252, 77, 62, 216, 195, 189, 190, 32, 216, 159, 190, 124, 165, 37, 61, 63, 125, 92, 189, 160, 146, 81, 60, 112, 217, 144, 59, 189, 115, 249, 187, 93, 255, 16, 62, 79, 128, 165, 61, 219, 113, 135, 61, 247, 8, 212, 188, 160, 169, 207, 189, 18, 250, 40, 60, 250, 109, 208, 61, 58, 189, 195, 185, 199, 109, 89, 189, 138, 14, 101, 190, 105, 80, 142, 189, 211, 31, 41, 62, 196, 26, 217, 61, 247, 74, 23, 188, 88, 254, 176, 61, 147, 116, 49, 62, 250, 190, 17, 189, 97, 122, 230, 189, 232, 8, 145, 187, 5, 214, 150, 189, 22, 138, 94, 60, 115, 17, 185, 190, 151, 37, 121, 60, 84, 236, 76, 60, 213, 35, 164, 187, 198, 227, 176, 186, 115, 63, 112, 190, 174, 23, 149, 190, 205, 253, 234, 189, 32, 249, 235, 61, 86, 42, 177, 60, 65, 46, 222, 189, 223, 120, 88, 61, 126, 39, 49, 60, 193, 34, 72, 60, 195, 231, 20, 61, 170, 121, 76, 62, 175, 39, 139, 62, 89, 57, 214, 61, 55, 253, 160, 62, 210, 44, 176, 61, 255, 159, 46, 60, 103, 140, 133, 62, 83, 194, 164, 61, 131, 143, 216, 190, 140, 241, 145, 190, 5, 221, 111, 62, 23, 93, 237, 61, 55, 15, 11, 190, 130, 180, 166, 61, 123, 18, 100, 61, 208, 119, 132, 61, 42, 228, 124, 61, 195, 162, 158, 190, 174, 105, 254, 61, 128, 120, 14, 62, 223, 179, 211, 60, 25, 177, 52, 190, 37, 139, 235, 190, 56, 161, 133, 189, 15, 151, 224, 60, 99, 243, 160, 61, 122, 82, 182, 61, 235, 251, 112, 190, 135, 148, 114, 61, 177, 49, 47, 191, 182, 225, 190, 61, 202, 229, 187, 190, 21, 133, 243, 190, 144, 192, 54, 190, 20, 118, 147, 61, 232, 5, 233, 187, 34, 41, 201, 189, 127, 186, 47, 191, 255, 67, 179, 61, 103, 13, 20, 62, 59, 67, 179, 190, 77, 103, 5, 62, 46, 66, 208, 189, 103, 251, 36, 190, 121, 170, 107, 188, 122, 227, 73, 190, 41, 14, 142, 189, 82, 118, 35, 61, 78, 149, 130, 62, 217, 4, 129, 189, 236, 132, 123, 188, 38, 209, 67, 62, 194, 23, 219, 189, 65, 127, 30, 62, 233, 122, 0, 190, 207, 221, 243, 188, 27, 139, 252, 189, 104, 10, 129, 62, 108, 138, 232, 61, 154, 153, 45, 190, 12, 218, 105, 60, 109, 28, 185, 189, 232, 229, 95, 62, 138, 90, 223, 61, 54, 159, 185, 61, 172, 219, 74, 61, 254, 227, 134, 61, 254, 3, 149, 62, 249, 185, 236, 189, 110, 222, 216, 60, 126, 170, 78, 189, 117, 49, 254, 61, 139, 160, 164, 190, 184, 172, 52, 190, 93, 133, 35, 61, 8, 114, 208, 61, 138, 123, 29, 190, 247, 166, 30, 190, 97, 215, 234, 61, 37, 67, 173, 189, 172, 120, 224, 61, 165, 158, 140, 190, 16, 60, 143, 62, 128, 231, 19, 61, 141, 188, 64, 62, 126, 232, 84, 189, 0, 220, 100, 190, 69, 15, 35, 190, 132, 130, 78, 62, 4, 165, 126, 62, 232, 75, 20, 62, 87, 36, 236, 189, 62, 75, 13, 62, 131, 70, 156, 188, 42, 92, 21, 190, 242, 126, 238, 190, 255, 10, 240, 190, 86, 220, 147, 61, 45, 196, 154, 61, 43, 12, 68, 62, 112, 1, 117, 189, 79, 243, 47, 190, 156, 166, 7, 190, 240, 187, 79, 62, 152, 95, 193, 61, 223, 196, 31, 61, 61, 102, 121, 188, 35, 205, 253, 61, 128, 174, 50, 189, 65, 62, 156, 62, 24, 105, 134, 62, 87, 245, 202, 190, 4, 198, 185, 190, 211, 29, 151, 190, 246, 165, 138, 62, 0, 89, 197, 189, 51, 222, 159, 189, 34, 57, 191, 189, 101, 185, 149, 189, 72, 125, 112, 188, 59, 38, 134, 62, 129, 53, 90, 62, 192, 126, 166, 61, 200, 25, 127, 60, 184, 231, 186, 62, 112, 233, 231, 190, 108, 182, 200, 61, 80, 74, 129, 188, 111, 27, 194, 189, 191, 93, 128, 186, 27, 75, 179, 61, 159, 39, 26, 190, 216, 249, 70, 189, 237, 66, 90, 190, 158, 91, 1, 190, 226, 68, 59, 62, 246, 180, 76, 62, 58, 141, 235, 61, 22, 215, 168, 189, 163, 108, 138, 190, 121, 63, 11, 60, 62, 2, 202, 188, 30, 71, 69, 62, 157, 97, 58, 190, 134, 222, 111, 190, 146, 49, 82, 190, 22, 176, 62, 60, 55, 140, 27, 190, 94, 131, 2, 191, 77, 188, 3, 61, 115, 237, 165, 190, 5, 224, 87, 62, 45, 156, 205, 62, 24, 196, 129, 190, 198, 51, 40, 62, 127, 166, 47, 188, 88, 122, 156, 190, 241, 229, 22, 62, 60, 54, 27, 188, 38, 223, 176, 62, 239, 249, 121, 190, 194, 240, 14, 190, 156, 212, 248, 61, 239, 220, 191, 190, 214, 31, 111, 60, 200, 75, 148, 62, 135, 54, 54, 190, 125, 183, 98, 62, 243, 73, 159, 62, 159, 160, 189, 62, 0, 47, 139, 190, 127, 4, 194, 189, 69, 87, 163, 61, 206, 176, 62, 62, 93, 140, 96, 61, 26, 141, 19, 189, 63, 148, 114, 190, 33, 55, 2, 62, 155, 226, 7, 190, 235, 160, 17, 190, 18, 48, 10, 190, 13, 169, 120, 62, 164, 201, 136, 62, 73, 32, 242, 189, 194, 121, 187, 190, 49, 48, 81, 62, 84, 3, 168, 189, 106, 50, 62, 190, 177, 164, 117, 61, 165, 3, 21, 191, 242, 66, 209, 61, 123, 243, 8, 190, 75, 242, 8, 190, 70, 102, 186, 190, 190, 160, 255, 61, 59, 6, 116, 61, 74, 106, 221, 189, 224, 88, 64, 62, 174, 0, 146, 61, 183, 220, 179, 62, 28, 109, 231, 190, 66, 236, 56, 62, 233, 71, 225, 189, 111, 43, 135, 190, 4, 169, 176, 60, 66, 210, 244, 60, 60, 74, 83, 60, 102, 32, 17, 62, 181, 233, 52, 62, 89, 226, 43, 190, 200, 180, 200, 61, 220, 251, 142, 62, 99, 138, 163, 189, 153, 85, 3, 62, 28, 219, 123, 190, 245, 23, 89, 62, 187, 160, 212, 188, 160, 133, 50, 190, 213, 202, 104, 62, 185, 99, 35, 62, 57, 35, 12, 61, 242, 115, 111, 61, 97, 207, 92, 190, 76, 195, 64, 190, 50, 177, 8, 191, 208, 151, 66, 190, 3, 214, 133, 188, 64, 198, 131, 190, 13, 221, 11, 189, 189, 74, 156, 60, 164, 210, 57, 190, 177, 146, 134, 61, 233, 5, 117, 62, 101, 190, 146, 62, 30, 88, 207, 60, 192, 48, 115, 60, 121, 120, 40, 190, 132, 7, 47, 62, 239, 35, 152, 61, 13, 226, 122, 190, 206, 30, 243, 190, 51, 151, 43, 61, 203, 186, 181, 189, 123, 124, 102, 190, 173, 17, 31, 190, 118, 6, 221, 61, 217, 202, 247, 187, 210, 244, 121, 190, 94, 224, 13, 190, 202, 231, 64, 190, 61, 73, 56, 62, 122, 94, 152, 190, 135, 230, 20, 190, 78, 27, 15, 62, 223, 106, 78, 62, 43, 111, 104, 62, 34, 27, 127, 190, 151, 36, 3, 190, 62, 95, 124, 188, 26, 162, 97, 190, 81, 252, 23, 189, 143, 174, 183, 61, 247, 111, 121, 191, 194, 184, 95, 62, 175, 111, 15, 62, 79, 160, 176, 62, 14, 254, 131, 190, 46, 149, 140, 190, 157, 28, 65, 62, 254, 107, 254, 61, 86, 249, 77, 61, 155, 142, 94, 62, 132, 220, 103, 62, 37, 171, 9, 62, 72, 38, 165, 61, 176, 133, 217, 190, 6, 84, 22, 190, 38, 39, 54, 62, 60, 93, 129, 62, 77, 206, 121, 189, 36, 56, 30, 61, 139, 200, 74, 190, 160, 63, 252, 61, 60, 250, 35, 190, 216, 195, 30, 190, 20, 231, 34, 190, 31, 253, 25, 189, 247, 134, 45, 188, 124, 227, 55, 60, 129, 133, 24, 62, 15, 170, 228, 189, 242, 75, 145, 190, 192, 142, 16, 62, 62, 247, 37, 62, 240, 83, 123, 189, 118, 187, 242, 188, 238, 164, 182, 61, 255, 226, 134, 62, 0, 226, 6, 190, 86, 193, 143, 189, 195, 149, 126, 61, 57, 36, 208, 61, 107, 55, 230, 61, 124, 3, 62, 61, 238, 239, 127, 61, 28, 201, 19, 61, 34, 25, 247, 189, 7, 186, 80, 190, 113, 29, 43, 62, 49, 149, 56, 190, 197, 107, 19, 190, 64, 141, 158, 61, 77, 225, 252, 189, 215, 134, 226, 61, 83, 18, 144, 61, 82, 112, 234, 59, 185, 173, 236, 61, 109, 252, 194, 190, 46, 60, 54, 62, 124, 183, 142, 190, 166, 143, 175, 190, 101, 164, 33, 190, 174, 237, 54, 189, 156, 112, 146, 61, 98, 175, 15, 190, 74, 205, 99, 190, 240, 94, 20, 61, 202, 184, 174, 60, 107, 149, 136, 190, 166, 236, 151, 61, 117, 73, 12, 190, 198, 238, 13, 58, 158, 116, 56, 190, 144, 249, 176, 61, 8, 218, 63, 62, 185, 106, 26, 190, 17, 249, 247, 189, 160, 40, 27, 189, 0, 225, 148, 61, 145, 27, 88, 62, 64, 166, 124, 190, 153, 202, 206, 189, 12, 147, 103, 61, 127, 223, 180, 190, 29, 61, 196, 190, 4, 79, 65, 62, 51, 192, 63, 188, 246, 184, 23, 190, 164, 183, 249, 61, 232, 148, 14, 62, 64, 37, 254, 61, 248, 239, 243, 61, 86, 39, 14, 62, 60, 211, 69, 61, 31, 195, 130, 188, 167, 180, 238, 60, 94, 224, 241, 190, 122, 139, 62, 190, 43, 15, 15, 62, 164, 231, 95, 62, 204, 155, 255, 190, 125, 126, 198, 190, 96, 244, 39, 190, 9, 63, 90, 62, 238, 36, 227, 190, 167, 160, 179, 189, 73, 234, 64, 62, 133, 2, 20, 190, 168, 135, 191, 62, 55, 176, 96, 191, 16, 65, 75, 61, 196, 75, 209, 59, 127, 45, 81, 62, 49, 162, 11, 191, 142, 38, 69, 191, 152, 207, 247, 61, 205, 30, 33, 189, 63, 230, 143, 188, 98, 106, 4, 62, 47, 130, 253, 189, 42, 206, 23, 62, 213, 84, 14, 61, 95, 186, 145, 189, 11, 175, 254, 189, 245, 251, 100, 190, 54, 238, 169, 61, 182, 117, 107, 189, 170, 40, 228, 61, 87, 59, 3, 62, 102, 179, 0, 62, 13, 163, 27, 190, 104, 202, 243, 61, 29, 8, 164, 62, 145, 113, 4, 62, 141, 44, 207, 187, 201, 101, 46, 61, 252, 108, 174, 61, 3, 4, 223, 61, 143, 150, 162, 189, 109, 160, 37, 190, 156, 253, 217, 189, 219, 170, 16, 190, 164, 200, 1, 62, 48, 33, 199, 189, 6, 93, 4, 190, 100, 222, 11, 62, 2, 28, 194, 188, 23, 88, 1, 190, 184, 86, 169, 189, 249, 40, 139, 189, 175, 185, 4, 190, 183, 8, 73, 58, 177, 202, 149, 62, 164, 205, 230, 190, 24, 224, 180, 60, 29, 86, 184, 189, 63, 132, 162, 189, 139, 25, 35, 187, 176, 217, 255, 188, 211, 152, 145, 62, 116, 49, 232, 187, 55, 149, 169, 61, 241, 80, 190, 189, 207, 207, 45, 62, 202, 240, 4, 190, 80, 209, 140, 190, 99, 250, 237, 61, 239, 54, 39, 190, 204, 160, 71, 190, 19, 11, 1, 62, 236, 226, 142, 189, 143, 20, 129, 60, 69, 105, 243, 189, 30, 114, 85, 189, 220, 238, 111, 61, 89, 116, 137, 62, 245, 171, 160, 189, 99, 144, 27, 190, 211, 232, 90, 189, 237, 67, 237, 189, 109, 40, 176, 62, 15, 19, 70, 190, 186, 28, 70, 62, 58, 77, 48, 189, 226, 99, 34, 190, 33, 123, 192, 61, 36, 167, 37, 189, 199, 28, 195, 189, 210, 180, 52, 190, 140, 25, 13, 62, 210, 62, 230, 189, 1, 53, 58, 190, 179, 91, 195, 188, 242, 17, 10, 62, 115, 167, 245, 189, 68, 151, 207, 189, 173, 217, 191, 189, 57, 129, 110, 61, 218, 183, 146, 190, 142, 0, 204, 61, 168, 244, 98, 188, 175, 16, 86, 62, 84, 20, 59, 61, 18, 31, 87, 61, 138, 129, 207, 61, 69, 240, 255, 61, 195, 16, 105, 190, 200, 23, 242, 61, 90, 180, 136, 189, 62, 140, 141, 62, 148, 137, 153, 62, 157, 74, 22, 62, 210, 118, 13, 190, 97, 92, 21, 62, 242, 104, 250, 188, 202, 14, 206, 189, 249, 136, 187, 58, 91, 160, 62, 191, 207, 168, 83, 189, 156, 24, 84, 61, 42, 93, 202, 190, 180, 194, 185, 188, 16, 115, 30, 190, 141, 94, 144, 62, 34, 98, 252, 188, 47, 215, 144, 188, 46, 187, 6, 61, 208, 126, 227, 61, 106, 105, 7, 191, 25, 189, 155, 190, 226, 84, 65, 61, 131, 108, 62, 189, 196, 193, 55, 190, 111, 137, 16, 190, 131, 179, 72, 61, 148, 62, 117, 62, 115, 179, 97, 61, 112, 166, 240, 189, 17, 214, 208, 61, 10, 54, 181, 62, 75, 123, 198, 190, 29, 85, 180, 61, 8, 6, 171, 190, 81, 107, 141, 189, 23, 175, 8, 60, 199, 78, 0, 62, 226, 182, 13, 62, 98, 181, 220, 189, 5, 145, 143, 61, 132, 151, 222, 189, 123, 68, 0, 62, 216, 125, 22, 191, 35, 143, 20, 190, 37, 193, 63, 61, 2, 132, 189, 61, 64, 145, 127, 60, 99, 117, 7, 190, 11, 37, 79, 62, 81, 187, 44, 62, 175, 166, 215, 61, 25, 122, 105, 62, 151, 230, 36, 188, 110, 76, 51, 62, 103, 82, 35, 61, 62, 28, 111, 190, 144, 183, 13, 187, 195, 186, 130, 62, 116, 56, 98, 188, 10, 117, 45, 190, 208, 155, 13, 190, 108, 218, 19, 189, 227, 244, 119, 62, 2, 238, 210, 188, 127, 225, 133, 190, 49, 17, 249, 189, 196, 72, 7, 190, 36, 219, 241, 60, 196, 152, 110, 62, 157, 157, 36, 62, 193, 26, 17, 62, 196, 190, 15, 190, 162, 208, 37, 62, 88, 37, 20, 62, 49, 147, 126, 189, 248, 198, 189, 187, 5, 13, 31, 189, 148, 180, 39, 189, 254, 21, 98, 189, 241, 28, 6, 62, 8, 155, 32, 61, 7, 212, 144, 61, 58, 166, 218, 60, 32, 169, 202, 60, 136, 180, 25, 190, 126, 211, 26, 62, 219, 147, 168, 61, 198, 110, 16, 60, 165, 75, 194, 60, 145, 16, 185, 61, 50, 106, 112, 61, 209, 62, 208, 61, 26, 188, 69, 61, 22, 199, 220, 188, 247, 246, 105, 61, 189, 165, 136, 187, 86, 81, 141, 189, 227, 173, 35, 190, 138, 130, 19, 190, 32, 253, 148, 61, 202, 157, 184, 59, 62, 63, 21, 190, 185, 113, 158, 190, 134, 111, 171, 190, 60, 205, 220, 189, 192, 158, 172, 62, 9, 63, 121, 189, 170, 96, 41, 62, 152, 218, 204, 61, 161, 171, 164, 60, 99, 55, 222, 190, 182, 221, 24, 188, 236, 125, 0, 62, 163, 219, 11, 62, 145, 245, 172, 188, 80, 224, 243, 189, 104, 41, 123, 62, 5, 174, 147, 190, 40, 85, 207, 189, 166, 215, 179, 189, 161, 194, 7, 62, 61, 17, 62, 62, 25, 203, 109, 61, 211, 107, 236, 61, 2, 191, 30, 190, 83, 71, 162, 189, 116, 80, 135, 61, 202, 154, 16, 190, 216, 200, 83, 61, 193, 136, 181, 189, 156, 174, 48, 190, 117, 111, 1, 190, 21, 6, 86, 62, 249, 107, 156, 189, 111, 222, 211, 188, 78, 225, 120, 62, 146, 197, 37, 191, 50, 16, 38, 190, 200, 44, 110, 190, 111, 249, 107, 187, 116, 200, 133, 60, 123, 4, 41, 190, 171, 78, 253, 61, 126, 232, 116, 189, 9, 242, 151, 189, 148, 123, 32, 190, 38, 149, 32, 62, 231, 129, 138, 190, 151, 35, 45, 61, 188, 182, 36, 62, 236, 111, 149, 61, 134, 143, 0, 62, 65, 57, 15, 190, 197, 192, 221, 59, 28, 205, 209, 61, 232, 143, 191, 61, 30, 10, 251, 189, 71, 142, 88, 62, 122, 88, 73, 62, 64, 53, 242, 189, 96, 241, 240, 189, 221, 210, 20, 190, 243, 195, 134, 62, 205, 31, 208, 62, 13, 170, 145, 190, 100, 141, 14, 62, 175, 8, 198, 62, 21, 66, 42, 190, 116, 194, 211, 61, 185, 16, 18, 189, 177, 34, 92, 60, 167, 14, 114, 190, 123, 67, 93, 61, 89, 242, 136, 61, 178, 201, 152, 190, 59, 53, 250, 61, 63, 115, 33, 62, 160, 3, 18, 191, 153, 235, 21, 62, 130, 242, 234, 188, 8, 168, 189, 62, 131, 57, 131, 190, 69, 255, 200, 189, 96, 22, 211, 188, 237, 167, 3, 62, 28, 251, 150, 62, 189, 87, 57, 62, 178, 185, 15, 190, 140, 122, 69, 62, 9, 41, 142, 190, 248, 9, 212, 190, 66, 230, 120, 190, 56, 197, 158, 62, 208, 193, 211, 61, 148, 213, 148, 61, 244, 156, 176, 189, 82, 195, 21, 190, 253, 250, 222, 61, 32, 58, 228, 188, 151, 98, 42, 190, 222, 15, 6, 61, 142, 43, 122, 190, 58, 217, 36, 62, 52, 21, 185, 189, 155, 13, 53, 190, 34, 190, 221, 189, 161, 55, 145, 61, 120, 26, 36, 190, 78, 254, 149, 189, 85, 72, 245, 61, 82, 249, 17, 62, 25, 33, 61, 190, 95, 181, 99, 190, 181, 206, 14, 190, 243, 113, 226, 61, 125, 161, 240, 61, 120, 124, 194, 189, 8, 215, 39, 190, 112, 140, 94, 189, 203, 43, 148, 60, 155, 43, 68, 60, 29, 51, 145, 61, 208, 168, 219, 61, 32, 100, 79, 190, 95, 110, 42, 62, 101, 125, 254, 188, 112, 134, 35, 62, 141, 188, 3, 190, 132, 11, 129, 187, 129, 195, 174, 189, 35, 233, 28, 62, 152, 224, 231, 60, 58, 177, 8, 190, 165, 183, 16, 62, 251, 157, 216, 61, 85, 150, 33, 62, 39, 131, 77, 189, 48, 205, 94, 61, 234, 3, 18, 188, 228, 253, 88, 189, 79, 92, 49, 190, 40, 63, 151, 189, 41, 121, 14, 62, 161, 48, 46, 189, 92, 75, 100, 59, 155, 103, 101, 61, 16, 80, 0, 190, 236, 253, 5, 62, 0, 154, 116, 189, 7, 7, 126, 189, 20, 229, 62, 190, 61, 54, 87, 61, 216, 62, 251, 189, 137, 22, 232, 61, 161, 39, 170, 189, 100, 160, 130, 61, 219, 7, 226, 189, 254, 45, 19, 190, 43, 246, 241, 188, 38, 51, 220, 188, 206, 84, 89, 189, 35, 86, 161, 60, 51, 132, 1, 62, 10, 255, 228, 187, 241, 125, 196, 189, 173, 156, 52, 190, 22, 105, 29, 62, 248, 62, 52, 190, 18, 254, 247, 61, 143, 83, 7, 61, 249, 55, 3, 190, 82, 179, 19, 62, 206, 254, 194, 189, 150, 248, 156, 189, 175, 65, 15, 189, 61, 82, 29, 190, 212, 131, 122, 189, 174, 62, 145, 60, 111, 224, 157, 189, 152, 193, 231, 189, 153, 120, 25, 190, 221, 143, 146, 61, 57, 235, 33, 190, 42, 251, 243, 61, 243, 218, 200, 61, 185, 121, 129, 61, 161, 110, 244, 61, 36, 176, 80, 188, 171, 9, 160, 61, 14, 163, 217, 189, 181, 88, 40, 190, 99, 121, 221, 61, 172, 198, 233, 189, 108, 18, 110, 62, 208, 204, 195, 190, 28, 194, 182, 190, 126, 44, 174, 62, 44, 190, 9, 61, 127, 142, 30, 62, 124, 21, 187, 190, 230, 108, 123, 61, 38, 226, 230, 61, 160, 80, 82, 190, 70, 114, 232, 189, 203, 55, 63, 62, 66, 111, 120, 191, 13, 17, 45, 62, 36, 203, 25, 60, 28, 206, 199, 61, 90, 101, 200, 189, 229, 217, 156, 190, 253, 16, 71, 62, 76, 155, 106, 62, 114, 101, 146, 60, 99, 56, 58, 60, 233, 247, 98, 62, 140, 210, 22, 61, 88, 111, 177, 190, 92, 222, 158, 190, 155, 20, 144, 190, 55, 43, 156, 59, 214, 41, 57, 189, 37, 105, 29, 189, 229, 73, 159, 190, 88, 168, 57, 62, 248, 164, 3, 190, 49, 121, 190, 61, 181, 34, 52, 189, 156, 5, 56, 62, 254, 180, 121, 62, 49, 143, 146, 62, 142, 170, 99, 62, 104, 152, 154, 188, 108, 120, 216, 59, 41, 110, 130, 61, 20, 242, 231, 190, 180, 8, 179, 189, 158, 23, 94, 61, 168, 221, 185, 61, 211, 11, 127, 190, 116, 109, 1, 190, 176, 220, 162, 60, 109, 174, 130, 62, 29, 159, 172, 189, 76, 30, 175, 190, 231, 32, 25, 62, 132, 222, 55, 190, 105, 201, 208, 59, 25, 225, 85, 191, 186, 220, 60, 62, 202, 81, 194, 61, 112, 50, 104, 62, 80, 156, 3, 191, 52, 183, 33, 191, 189, 118, 81, 61, 85, 36, 41, 188, 106, 193, 130, 61, 185, 170, 242, 61, 165, 217, 213, 189, 242, 86, 45, 189, 21, 71, 17, 62, 240, 166, 94, 62, 241, 214, 148, 189, 93, 171, 211, 190, 153, 111, 50, 189, 162, 227, 198, 187, 24, 89, 143, 190, 213, 110, 85, 60, 83, 30, 35, 62, 140, 52, 58, 190, 178, 144, 207, 188, 239, 150, 128, 60, 222, 106, 13, 62, 56, 81, 248, 188, 168, 173, 101, 62, 22, 29, 135, 61, 58, 111, 144, 62, 103, 211, 167, 62, 212, 234, 235, 189, 253, 231, 62, 62, 126, 129, 238, 61, 109, 107, 0, 190, 124, 171, 62, 190, 195, 103, 69, 189, 235, 127, 1, 61, 44, 48, 19, 61, 148, 186, 18, 62, 153, 209, 235, 61, 166, 246, 240, 61, 116, 94, 146, 61, 131, 34, 93, 190, 240, 230, 183, 189, 14, 28, 152, 61, 145, 104, 8, 189, 227, 4, 15, 189, 95, 169, 135, 190, 36, 43, 212, 61, 237, 197, 61, 189, 31, 165, 35, 62, 148, 126, 128, 61, 159, 91, 40, 189, 250, 40, 195, 190, 235, 186, 83, 62, 130, 108, 80, 60, 97, 166, 183, 61, 143, 137, 39, 190, 42, 61, 194, 60, 151, 143, 247, 187, 56, 228, 60, 62, 242, 113, 232, 189, 232, 213, 73, 62, 224, 51, 20, 62, 22, 78, 221, 189, 23, 49, 250, 189, 34, 62, 78, 190, 158, 131, 238, 61, 24, 155, 226, 60, 156, 30, 30, 61, 224, 101, 23, 61, 184, 151, 153, 190, 5, 63, 201, 189, 141, 226, 171, 188, 28, 193, 9, 190, 28, 30, 25, 189, 108, 70, 10, 191, 189, 241, 150, 62, 129, 109, 71, 61, 49, 151, 198, 189, 206, 17, 5, 190, 87, 117, 106, 61, 224, 102, 212, 189, 69, 154, 59, 61, 155, 76, 152, 61, 201, 102, 143, 189, 151, 113, 174, 62, 139, 94, 164, 190, 158, 88, 1, 62, 6, 105, 60, 62, 236, 143, 13, 190, 215, 243, 35, 62, 17, 232, 211, 188, 83, 62, 235, 61, 136, 75, 44, 61, 142, 35, 123, 61, 226, 227, 159, 61, 239, 69, 110, 62, 244, 108, 134, 62, 59, 225, 251, 189, 177, 148, 238, 61, 175, 7, 176, 190, 187, 229, 136, 190, 30, 250, 109, 190, 240, 127, 19, 62, 182, 169, 116, 60, 180, 99, 3, 190, 154, 200, 151, 62, 108, 59, 127, 61, 80, 125, 152, 61, 125, 202, 79, 189, 84, 13, 222, 61, 118, 110, 5, 62, 60, 175, 194, 189, 104, 97, 166, 62, 101, 215, 225, 61, 16, 154, 205, 61, 201, 236, 66, 62, 151, 126, 216, 61, 78, 50, 208, 190, 251, 117, 153, 190, 151, 70, 98, 62, 50, 43, 255, 61, 72, 104, 223, 189, 236, 56, 13, 190, 46, 65, 35, 61, 177, 198, 78, 190, 210, 161, 59, 189, 16, 62, 153, 190, 24, 58, 255, 60, 93, 27, 136, 62, 152, 214, 44, 61, 208, 139, 173, 189, 95, 51, 213, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {54, 152, 103, 62, 221, 243, 78, 62, 28, 14, 79, 189, 158, 202, 196, 61, 1, 205, 148, 189, 241, 153, 86, 61, 194, 46, 36, 62, 184, 248, 108, 189, 119, 21, 27, 62, 111, 55, 239, 189, 118, 159, 200, 59, 88, 156, 72, 62, 55, 32, 119, 189, 32, 58, 164, 62, 239, 246, 83, 190, 207, 98, 5, 190, 197, 224, 144, 62, 216, 59, 222, 61, 240, 234, 33, 62, 78, 16, 27, 62, 149, 254, 86, 62, 69, 29, 91, 190, 217, 80, 3, 62, 216, 225, 254, 189, 194, 143, 138, 189, 201, 50, 155, 189, 180, 145, 68, 61, 178, 88, 98, 62, 97, 3, 145, 61, 58, 104, 158, 61, 69, 168, 252, 189, 131, 249, 81, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {170, 184, 27, 191, 130, 57, 174, 189, 137, 75, 134, 190, 34, 116, 200, 190, 121, 251, 162, 190, 93, 216, 43, 62, 53, 80, 165, 62, 89, 49, 223, 62, 241, 50, 179, 190, 216, 79, 75, 190, 21, 245, 131, 62, 152, 22, 11, 62, 222, 255, 34, 190, 43, 62, 51, 191, 138, 120, 213, 61, 85, 124, 151, 62, 49, 32, 128, 62, 92, 173, 178, 190, 81, 3, 115, 62, 10, 217, 166, 189, 247, 255, 88, 62, 23, 237, 32, 60, 4, 237, 237, 62, 240, 158, 117, 189, 107, 103, 29, 62, 164, 224, 230, 61, 66, 199, 182, 62, 151, 42, 194, 190, 31, 3, 225, 61, 169, 180, 39, 61, 182, 38, 73, 190, 219, 37, 177, 190, 137, 1, 36, 62, 129, 143, 181, 189, 243, 42, 53, 62, 58, 167, 183, 189, 31, 10, 152, 189, 103, 131, 139, 190, 161, 229, 122, 190, 93, 94, 119, 62, 56, 26, 174, 190, 221, 10, 226, 62, 249, 16, 142, 190, 119, 132, 7, 190, 227, 19, 171, 190, 14, 3, 185, 189, 198, 150, 39, 62, 4, 252, 145, 62, 208, 207, 207, 189, 151, 191, 150, 62, 23, 69, 52, 190, 179, 50, 26, 190, 224, 63, 46, 190, 202, 111, 219, 62, 231, 231, 135, 62, 203, 34, 9, 62, 44, 51, 0, 190, 23, 234, 179, 61, 12, 81, 30, 61, 106, 58, 165, 60, 246, 9, 161, 190, 82, 38, 61, 190, 34, 104, 116, 190, 129, 128, 15, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 47, 171, 61, 163, 79, 67, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {228, 64, 142, 190, 64, 123, 59, 63, 217, 171, 214, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {240, 50, 166, 191, 253, 215, 97, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0047/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}