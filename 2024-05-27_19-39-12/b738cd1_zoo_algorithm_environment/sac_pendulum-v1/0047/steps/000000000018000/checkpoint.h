// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 92, 17, 63, 102, 117, 116, 191, 216, 169, 0, 191, 168, 195, 237, 61, 220, 26, 35, 191, 3, 217, 241, 61, 7, 72, 2, 63, 195, 44, 96, 62, 71, 66, 35, 63, 108, 24, 163, 62, 130, 75, 84, 190, 90, 240, 221, 61, 31, 112, 7, 63, 54, 61, 206, 190, 108, 246, 136, 190, 153, 105, 228, 62, 63, 151, 4, 191, 247, 247, 221, 62, 35, 80, 211, 190, 56, 202, 105, 191, 153, 144, 36, 61, 43, 235, 140, 188, 66, 253, 29, 63, 19, 46, 138, 60, 201, 24, 75, 191, 4, 146, 169, 188, 74, 97, 180, 62, 118, 89, 40, 191, 100, 197, 206, 190, 9, 117, 48, 190, 9, 231, 79, 191, 226, 76, 224, 190, 213, 121, 166, 190, 62, 224, 1, 187, 248, 126, 57, 190, 250, 32, 23, 188, 195, 79, 63, 63, 254, 141, 177, 63, 126, 161, 5, 63, 34, 47, 177, 190, 47, 100, 157, 63, 30, 200, 137, 62, 195, 3, 20, 191, 114, 190, 226, 63, 17, 207, 186, 62, 208, 132, 47, 191, 189, 50, 58, 63, 52, 194, 201, 190, 219, 220, 4, 63, 88, 81, 138, 63, 219, 117, 130, 190, 157, 57, 26, 62, 217, 215, 60, 191, 130, 181, 32, 62, 9, 73, 197, 62, 4, 159, 90, 191, 73, 240, 222, 190, 166, 102, 17, 62, 172, 232, 10, 63, 22, 189, 14, 63, 194, 29, 60, 191, 230, 225, 150, 191, 146, 30, 247, 190, 10, 68, 205, 190, 58, 132, 45, 63, 134, 36, 215, 62, 95, 232, 204, 62, 242, 237, 161, 190, 231, 107, 252, 61, 239, 138, 14, 190, 74, 157, 120, 189, 26, 191, 143, 60, 130, 96, 121, 190, 210, 161, 215, 63, 121, 187, 214, 62, 54, 23, 120, 190, 224, 239, 26, 63, 61, 114, 18, 62, 124, 41, 0, 191, 219, 21, 56, 63, 211, 253, 59, 62, 152, 12, 238, 62, 240, 0, 136, 63, 209, 112, 12, 63, 51, 122, 172, 62, 0, 23, 130, 63, 175, 92, 59, 190, 209, 207, 224, 190, 190, 204, 158, 191, 190, 202, 155, 190, 89, 106, 40, 190, 208, 248, 106, 189, 50, 138, 35, 63, 25, 171, 113, 191, 96, 77, 107, 62, 134, 30, 155, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {136, 217, 75, 191, 169, 5, 47, 62, 204, 252, 83, 60, 234, 155, 115, 62, 76, 243, 122, 191, 53, 17, 158, 190, 196, 102, 148, 62, 192, 172, 27, 63, 241, 224, 134, 190, 145, 248, 166, 190, 134, 152, 100, 62, 139, 193, 147, 190, 82, 203, 233, 190, 159, 98, 137, 190, 22, 69, 152, 190, 62, 202, 222, 189, 179, 14, 152, 190, 193, 32, 85, 62, 209, 65, 62, 61, 93, 173, 76, 191, 92, 186, 209, 61, 106, 236, 15, 190, 190, 55, 235, 62, 183, 83, 170, 62, 175, 61, 185, 62, 234, 142, 216, 62, 102, 231, 151, 190, 187, 84, 174, 189, 130, 135, 128, 62, 245, 201, 141, 189, 38, 230, 208, 190, 164, 30, 7, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 253, 169, 190, 111, 78, 45, 190, 171, 140, 178, 61, 0, 15, 128, 60, 178, 233, 131, 191, 73, 165, 126, 62, 163, 65, 246, 189, 12, 1, 219, 62, 46, 27, 152, 62, 210, 220, 224, 62, 100, 44, 140, 61, 39, 68, 58, 189, 141, 56, 112, 62, 226, 119, 162, 191, 155, 101, 142, 191, 83, 240, 186, 59, 174, 143, 64, 62, 236, 227, 16, 189, 0, 30, 172, 190, 167, 23, 55, 190, 9, 220, 53, 189, 76, 13, 85, 191, 23, 157, 142, 190, 3, 115, 133, 60, 209, 138, 252, 189, 225, 117, 95, 62, 74, 178, 160, 191, 166, 248, 66, 61, 168, 188, 235, 60, 15, 176, 12, 62, 234, 44, 175, 190, 239, 75, 63, 62, 236, 149, 5, 61, 7, 7, 254, 190, 190, 36, 221, 190, 69, 68, 30, 190, 126, 85, 120, 191, 35, 219, 170, 190, 107, 98, 66, 62, 229, 98, 41, 62, 52, 225, 225, 62, 22, 105, 135, 61, 41, 0, 54, 61, 89, 122, 208, 61, 226, 86, 251, 189, 43, 202, 28, 191, 174, 54, 37, 191, 97, 181, 25, 190, 20, 197, 32, 62, 245, 8, 196, 190, 13, 226, 238, 188, 139, 19, 125, 189, 211, 120, 47, 62, 130, 239, 207, 190, 200, 170, 122, 190, 91, 71, 58, 61, 158, 9, 23, 188, 65, 233, 145, 62, 227, 121, 4, 191, 224, 220, 10, 190, 252, 140, 138, 61, 106, 188, 182, 61, 62, 28, 43, 61, 113, 189, 46, 60, 18, 123, 136, 189, 198, 146, 147, 189, 235, 39, 24, 62, 19, 107, 115, 189, 84, 136, 194, 190, 29, 67, 77, 62, 34, 27, 31, 189, 218, 223, 49, 190, 212, 242, 140, 59, 182, 9, 26, 63, 19, 94, 207, 62, 89, 57, 214, 61, 96, 20, 42, 63, 188, 84, 242, 189, 159, 119, 188, 190, 220, 246, 25, 62, 109, 209, 210, 190, 69, 121, 210, 190, 245, 10, 40, 190, 77, 154, 162, 62, 78, 3, 161, 62, 96, 246, 9, 190, 74, 210, 157, 59, 234, 223, 149, 59, 106, 107, 148, 61, 187, 52, 247, 188, 144, 135, 3, 191, 27, 200, 130, 62, 175, 0, 229, 188, 96, 228, 214, 62, 17, 105, 26, 190, 66, 105, 251, 190, 100, 215, 190, 190, 109, 98, 177, 62, 25, 207, 169, 61, 40, 237, 169, 61, 39, 55, 164, 191, 249, 46, 196, 62, 142, 222, 43, 191, 151, 28, 86, 62, 117, 89, 35, 191, 229, 129, 227, 62, 111, 225, 77, 61, 20, 118, 147, 61, 169, 54, 77, 190, 184, 118, 162, 61, 75, 70, 144, 190, 180, 237, 105, 62, 51, 137, 121, 60, 159, 129, 63, 190, 67, 253, 168, 60, 117, 255, 14, 191, 188, 190, 104, 190, 159, 237, 90, 62, 100, 149, 51, 190, 198, 191, 96, 60, 20, 1, 161, 62, 3, 161, 11, 63, 211, 53, 105, 62, 172, 80, 114, 189, 220, 219, 84, 62, 42, 122, 250, 189, 129, 156, 194, 190, 1, 89, 37, 191, 202, 139, 109, 60, 113, 8, 145, 61, 204, 68, 141, 62, 184, 153, 220, 61, 203, 3, 161, 191, 129, 196, 57, 62, 210, 219, 89, 190, 200, 33, 28, 62, 254, 35, 248, 61, 243, 100, 82, 62, 152, 122, 40, 62, 176, 49, 135, 61, 71, 243, 232, 62, 71, 207, 149, 190, 142, 135, 155, 190, 65, 106, 174, 189, 67, 135, 158, 189, 79, 170, 29, 190, 253, 254, 60, 190, 121, 34, 19, 62, 81, 145, 83, 62, 112, 254, 239, 189, 47, 86, 30, 190, 149, 33, 230, 61, 180, 103, 33, 190, 144, 235, 100, 60, 150, 88, 181, 190, 168, 50, 169, 62, 13, 177, 103, 189, 186, 8, 189, 62, 58, 36, 25, 189, 195, 200, 131, 190, 72, 91, 34, 190, 153, 161, 0, 62, 237, 247, 110, 62, 147, 147, 44, 62, 238, 31, 252, 61, 222, 123, 70, 189, 106, 170, 239, 61, 242, 97, 215, 187, 242, 34, 2, 191, 182, 228, 50, 191, 1, 107, 224, 188, 45, 196, 154, 61, 61, 123, 242, 61, 115, 241, 27, 62, 104, 133, 138, 62, 91, 248, 18, 191, 98, 205, 121, 62, 184, 249, 203, 61, 17, 198, 251, 61, 187, 54, 166, 188, 225, 121, 23, 62, 83, 249, 248, 188, 163, 102, 170, 62, 15, 122, 173, 62, 35, 144, 86, 190, 67, 44, 23, 190, 127, 157, 95, 190, 86, 41, 165, 62, 13, 177, 122, 188, 76, 68, 177, 188, 137, 219, 243, 189, 68, 228, 171, 189, 153, 8, 237, 189, 213, 51, 113, 62, 122, 210, 99, 62, 236, 60, 3, 62, 72, 137, 238, 190, 223, 21, 160, 62, 65, 254, 111, 190, 53, 160, 43, 62, 91, 128, 152, 189, 41, 236, 193, 189, 145, 244, 64, 191, 27, 75, 179, 61, 244, 24, 255, 190, 95, 47, 102, 190, 233, 237, 29, 191, 62, 122, 179, 190, 241, 20, 139, 62, 71, 187, 73, 62, 94, 139, 8, 62, 122, 148, 19, 190, 98, 104, 129, 191, 213, 41, 159, 190, 90, 58, 83, 60, 221, 234, 118, 62, 166, 185, 28, 191, 187, 122, 50, 190, 61, 64, 173, 190, 80, 46, 23, 189, 122, 99, 241, 188, 11, 181, 4, 192, 46, 33, 130, 61, 253, 116, 166, 190, 207, 90, 188, 62, 227, 65, 140, 62, 162, 127, 116, 190, 42, 253, 85, 62, 6, 186, 135, 62, 243, 243, 217, 190, 95, 12, 171, 188, 206, 7, 210, 61, 221, 133, 188, 62, 18, 72, 64, 191, 238, 84, 77, 190, 44, 85, 248, 61, 86, 197, 217, 190, 101, 112, 189, 61, 135, 24, 2, 63, 31, 195, 189, 60, 132, 134, 6, 63, 134, 109, 111, 62, 144, 203, 205, 62, 157, 229, 150, 190, 107, 22, 222, 189, 144, 51, 116, 186, 98, 173, 86, 62, 161, 238, 161, 60, 113, 59, 139, 60, 190, 56, 85, 190, 78, 60, 84, 61, 19, 94, 3, 190, 255, 244, 233, 61, 137, 24, 250, 190, 84, 9, 116, 62, 76, 23, 129, 62, 92, 205, 192, 190, 122, 200, 86, 189, 134, 2, 85, 62, 177, 13, 110, 189, 2, 138, 137, 191, 85, 219, 140, 62, 129, 104, 152, 191, 253, 16, 246, 61, 39, 105, 117, 190, 68, 17, 193, 189, 220, 19, 161, 190, 190, 160, 255, 61, 236, 225, 198, 189, 5, 233, 8, 188, 105, 222, 135, 62, 225, 229, 38, 62, 147, 145, 138, 62, 2, 191, 101, 190, 244, 115, 17, 62, 115, 141, 103, 190, 140, 63, 9, 191, 150, 75, 229, 61, 176, 65, 104, 61, 78, 151, 68, 61, 75, 209, 212, 61, 19, 245, 108, 62, 25, 152, 136, 61, 248, 9, 79, 61, 184, 65, 140, 62, 53, 216, 129, 191, 7, 18, 174, 189, 128, 152, 151, 190, 106, 95, 233, 189, 73, 66, 170, 61, 193, 164, 171, 190, 216, 131, 182, 62, 165, 253, 95, 190, 205, 104, 167, 189, 83, 180, 79, 61, 19, 58, 250, 189, 90, 134, 119, 62, 53, 8, 77, 191, 254, 47, 15, 191, 11, 245, 129, 188, 21, 33, 25, 191, 247, 13, 87, 188, 144, 165, 139, 60, 106, 170, 251, 190, 14, 165, 181, 62, 187, 247, 101, 62, 253, 247, 207, 62, 249, 194, 140, 190, 39, 17, 144, 190, 3, 110, 157, 62, 17, 217, 136, 62, 166, 77, 48, 62, 251, 45, 93, 191, 145, 111, 30, 191, 129, 253, 151, 61, 218, 49, 184, 190, 245, 230, 50, 189, 172, 221, 43, 190, 69, 164, 223, 60, 62, 236, 236, 62, 98, 166, 61, 190, 113, 34, 178, 190, 85, 168, 74, 190, 176, 185, 18, 62, 224, 145, 5, 191, 118, 124, 162, 190, 203, 145, 161, 62, 26, 83, 167, 62, 226, 189, 169, 62, 198, 112, 94, 191, 162, 61, 221, 190, 62, 95, 124, 188, 213, 120, 141, 190, 52, 102, 170, 189, 213, 77, 231, 61, 27, 247, 143, 191, 213, 158, 239, 62, 42, 3, 149, 189, 111, 178, 179, 62, 119, 170, 115, 190, 93, 27, 204, 190, 55, 100, 45, 62, 112, 194, 99, 61, 114, 187, 111, 61, 169, 51, 109, 62, 107, 91, 201, 62, 209, 207, 141, 60, 68, 174, 114, 61, 229, 78, 115, 190, 11, 188, 62, 191, 236, 165, 94, 62, 226, 58, 138, 62, 230, 202, 58, 190, 100, 132, 138, 61, 213, 158, 253, 189, 164, 248, 86, 62, 194, 16, 199, 60, 81, 26, 216, 187, 115, 48, 99, 189, 148, 103, 22, 61, 171, 2, 36, 190, 182, 7, 235, 190, 253, 114, 96, 61, 253, 22, 229, 189, 107, 72, 221, 190, 110, 97, 176, 189, 96, 197, 133, 60, 62, 202, 213, 190, 237, 150, 240, 60, 27, 107, 43, 62, 203, 46, 136, 62, 43, 57, 218, 61, 35, 62, 0, 190, 150, 160, 117, 190, 127, 254, 74, 62, 19, 52, 55, 62, 132, 205, 117, 190, 221, 177, 130, 61, 96, 152, 37, 190, 152, 63, 235, 189, 203, 66, 44, 190, 89, 229, 249, 60, 84, 13, 128, 60, 194, 223, 142, 190, 136, 202, 18, 189, 241, 2, 53, 62, 157, 176, 39, 61, 53, 28, 43, 60, 171, 234, 44, 191, 24, 35, 199, 61, 108, 8, 8, 191, 169, 242, 150, 62, 201, 248, 207, 190, 126, 209, 34, 190, 189, 216, 49, 190, 174, 237, 54, 189, 217, 190, 236, 190, 11, 2, 7, 190, 74, 224, 209, 190, 118, 253, 253, 61, 73, 98, 42, 61, 152, 15, 220, 189, 131, 190, 151, 61, 202, 154, 65, 190, 49, 141, 237, 189, 203, 48, 128, 190, 1, 38, 195, 61, 224, 186, 68, 62, 224, 112, 62, 191, 136, 127, 79, 189, 35, 242, 208, 189, 128, 192, 244, 189, 191, 5, 161, 62, 57, 134, 5, 191, 111, 192, 131, 190, 165, 250, 162, 188, 113, 27, 198, 190, 233, 22, 93, 190, 40, 24, 110, 62, 156, 142, 247, 186, 75, 189, 119, 191, 35, 112, 217, 62, 175, 165, 1, 190, 242, 32, 45, 62, 103, 86, 235, 62, 103, 76, 158, 62, 108, 198, 190, 186, 31, 195, 130, 188, 177, 214, 115, 60, 172, 66, 146, 191, 1, 84, 71, 191, 206, 87, 51, 62, 155, 105, 68, 62, 173, 87, 204, 190, 158, 13, 212, 190, 13, 170, 143, 190, 77, 70, 204, 61, 203, 39, 121, 191, 92, 187, 134, 189, 51, 226, 104, 62, 117, 147, 145, 190, 185, 137, 214, 62, 37, 2, 131, 191, 165, 77, 156, 61, 168, 190, 160, 60, 87, 254, 151, 61, 72, 254, 16, 191, 98, 3, 161, 189, 97, 148, 28, 191, 212, 232, 212, 61, 204, 133, 138, 189, 211, 144, 15, 62, 72, 156, 231, 190, 165, 3, 247, 61, 158, 17, 244, 62, 15, 226, 204, 189, 16, 206, 193, 190, 33, 2, 17, 62, 38, 45, 158, 62, 38, 108, 107, 189, 199, 151, 165, 190, 69, 168, 243, 60, 204, 63, 83, 62, 42, 20, 133, 62, 194, 145, 236, 189, 9, 218, 244, 62, 4, 44, 206, 189, 155, 118, 52, 190, 74, 240, 244, 61, 207, 255, 147, 190, 236, 152, 20, 62, 7, 216, 140, 60, 216, 237, 5, 191, 131, 239, 134, 190, 48, 229, 151, 190, 86, 8, 138, 189, 213, 130, 214, 190, 24, 165, 254, 188, 207, 95, 97, 61, 124, 215, 101, 190, 86, 113, 198, 190, 83, 191, 9, 62, 211, 88, 130, 190, 72, 190, 163, 190, 9, 20, 34, 188, 167, 128, 252, 62, 211, 60, 64, 191, 90, 4, 37, 189, 155, 232, 100, 190, 32, 38, 43, 190, 242, 248, 103, 190, 176, 217, 255, 188, 150, 144, 185, 62, 191, 30, 86, 189, 105, 17, 34, 59, 116, 136, 31, 62, 43, 171, 7, 63, 13, 37, 51, 190, 204, 147, 3, 192, 253, 69, 229, 60, 145, 100, 35, 190, 243, 101, 21, 191, 69, 22, 5, 189, 216, 204, 129, 190, 195, 250, 45, 60, 142, 36, 81, 190, 249, 119, 45, 191, 209, 157, 78, 61, 254, 60, 233, 62, 127, 11, 8, 189, 213, 210, 16, 190, 216, 35, 112, 190, 54, 120, 68, 190, 178, 190, 194, 62, 176, 135, 8, 190, 201, 37, 141, 62, 222, 134, 22, 61, 107, 193, 8, 190, 222, 147, 72, 62, 197, 17, 7, 189, 217, 85, 43, 190, 58, 48, 216, 190, 139, 216, 22, 62, 58, 215, 230, 189, 205, 157, 182, 190, 225, 186, 141, 190, 21, 86, 44, 190, 230, 128, 78, 189, 123, 155, 9, 60, 201, 117, 151, 188, 137, 221, 171, 60, 133, 152, 136, 190, 238, 214, 217, 61, 205, 41, 102, 190, 150, 72, 153, 62, 214, 74, 58, 61, 28, 237, 181, 190, 164, 247, 53, 189, 100, 54, 47, 189, 178, 246, 128, 190, 210, 197, 14, 62, 53, 48, 151, 190, 20, 232, 173, 62, 50, 96, 147, 62, 48, 234, 1, 190, 192, 44, 161, 191, 14, 55, 143, 190, 78, 247, 226, 189, 68, 236, 94, 191, 252, 65, 247, 189, 212, 3, 56, 191, 78, 227, 0, 62, 31, 114, 66, 190, 5, 4, 172, 62, 90, 95, 79, 61, 16, 115, 30, 190, 129, 168, 218, 189, 173, 162, 9, 189, 24, 173, 254, 59, 44, 231, 4, 62, 170, 121, 236, 61, 182, 21, 141, 191, 164, 69, 219, 190, 128, 206, 99, 190, 203, 193, 147, 190, 143, 200, 26, 190, 148, 34, 103, 190, 55, 181, 28, 62, 137, 178, 214, 62, 141, 187, 185, 62, 216, 104, 125, 58, 87, 76, 61, 190, 113, 212, 10, 63, 235, 175, 58, 191, 105, 165, 12, 190, 35, 117, 7, 191, 14, 228, 225, 189, 33, 145, 39, 61, 29, 121, 75, 62, 92, 193, 90, 62, 197, 153, 177, 188, 178, 72, 34, 61, 194, 56, 245, 189, 109, 206, 55, 62, 65, 235, 87, 191, 84, 53, 166, 190, 209, 91, 88, 61, 157, 218, 188, 61, 248, 138, 125, 60, 143, 16, 201, 59, 25, 179, 54, 62, 184, 129, 131, 62, 203, 3, 153, 62, 232, 46, 170, 62, 211, 52, 195, 188, 178, 88, 138, 62, 78, 166, 160, 61, 68, 189, 40, 191, 132, 28, 209, 61, 243, 218, 132, 62, 48, 92, 172, 190, 211, 49, 142, 190, 110, 101, 152, 191, 84, 213, 91, 61, 91, 53, 190, 62, 109, 219, 38, 190, 66, 251, 48, 190, 198, 237, 196, 190, 8, 16, 182, 189, 172, 162, 253, 61, 169, 219, 43, 62, 72, 205, 2, 61, 137, 75, 32, 191, 34, 121, 0, 190, 39, 251, 235, 61, 140, 133, 11, 62, 26, 103, 235, 60, 61, 208, 81, 189, 20, 173, 105, 61, 167, 206, 39, 189, 221, 142, 4, 190, 99, 209, 16, 62, 117, 184, 178, 188, 162, 95, 222, 61, 55, 39, 222, 189, 118, 9, 181, 61, 150, 128, 25, 190, 103, 24, 111, 62, 213, 41, 176, 61, 80, 164, 10, 62, 21, 17, 62, 189, 42, 83, 128, 61, 104, 24, 1, 61, 207, 7, 18, 62, 53, 211, 35, 62, 116, 234, 166, 189, 189, 50, 29, 61, 127, 141, 235, 188, 202, 59, 27, 189, 218, 193, 246, 189, 135, 197, 3, 190, 160, 212, 67, 190, 178, 69, 74, 188, 192, 12, 243, 189, 172, 3, 136, 190, 216, 125, 31, 191, 209, 180, 52, 190, 4, 221, 200, 62, 22, 109, 79, 62, 179, 170, 41, 62, 9, 30, 71, 62, 161, 171, 164, 60, 185, 190, 13, 191, 81, 235, 196, 189, 18, 226, 49, 61, 68, 187, 154, 62, 73, 136, 44, 62, 217, 156, 145, 190, 177, 248, 117, 62, 112, 206, 213, 190, 27, 16, 26, 189, 24, 252, 221, 190, 183, 165, 41, 62, 159, 206, 20, 62, 113, 53, 101, 190, 201, 68, 187, 61, 48, 253, 64, 191, 123, 75, 6, 190, 84, 134, 68, 62, 37, 40, 190, 190, 69, 30, 104, 61, 228, 156, 246, 58, 25, 71, 248, 190, 201, 217, 100, 189, 153, 197, 79, 62, 175, 111, 58, 190, 134, 235, 61, 191, 108, 33, 191, 62, 210, 101, 63, 191, 71, 242, 40, 190, 53, 252, 61, 190, 141, 18, 45, 61, 55, 202, 218, 61, 123, 4, 41, 190, 59, 151, 39, 62, 175, 136, 78, 190, 124, 109, 103, 190, 100, 249, 251, 187, 46, 17, 142, 62, 85, 54, 129, 190, 57, 59, 50, 190, 95, 64, 72, 62, 196, 173, 70, 61, 98, 132, 247, 61, 105, 140, 113, 190, 1, 193, 253, 188, 196, 144, 41, 62, 62, 161, 3, 62, 205, 162, 110, 190, 16, 112, 85, 62, 158, 243, 152, 62, 115, 200, 153, 61, 72, 5, 89, 189, 244, 207, 48, 189, 124, 94, 115, 62, 217, 101, 6, 63, 32, 129, 131, 190, 213, 173, 4, 62, 23, 67, 50, 63, 168, 224, 210, 189, 183, 27, 151, 62, 184, 53, 249, 189, 240, 69, 60, 187, 162, 45, 37, 191, 222, 80, 200, 189, 166, 108, 136, 61, 133, 81, 0, 191, 214, 254, 140, 62, 67, 154, 246, 62, 139, 97, 191, 191, 90, 111, 12, 190, 27, 20, 176, 61, 121, 3, 184, 62, 155, 64, 101, 190, 90, 34, 42, 190, 40, 212, 207, 188, 25, 51, 38, 62, 132, 202, 143, 62, 208, 106, 146, 62, 214, 47, 56, 190, 204, 129, 155, 62, 243, 24, 182, 190, 144, 68, 95, 191, 244, 89, 192, 190, 82, 65, 180, 62, 51, 207, 22, 62, 212, 137, 105, 61, 244, 156, 176, 189, 82, 195, 21, 190, 138, 156, 207, 61, 11, 127, 42, 189, 151, 98, 42, 190, 249, 119, 154, 60, 91, 36, 144, 190, 58, 217, 36, 62, 55, 140, 208, 189, 93, 66, 83, 190, 34, 190, 221, 189, 161, 55, 145, 61, 59, 198, 39, 190, 201, 252, 161, 189, 107, 58, 210, 61, 207, 229, 236, 61, 25, 33, 61, 190, 133, 20, 118, 190, 181, 206, 14, 190, 111, 73, 183, 61, 125, 161, 240, 61, 147, 203, 191, 189, 248, 60, 80, 190, 224, 126, 128, 189, 114, 248, 15, 189, 155, 43, 68, 60, 29, 51, 145, 61, 224, 112, 185, 61, 247, 108, 114, 190, 95, 110, 42, 62, 101, 125, 254, 188, 118, 14, 0, 62, 141, 188, 3, 190, 132, 11, 129, 187, 33, 120, 195, 189, 210, 168, 10, 62, 152, 224, 231, 60, 190, 63, 11, 190, 170, 38, 8, 62, 251, 157, 216, 61, 20, 69, 32, 62, 228, 108, 139, 189, 48, 205, 94, 61, 234, 3, 18, 188, 228, 253, 88, 189, 79, 92, 49, 190, 0, 53, 214, 189, 147, 182, 240, 61, 120, 229, 44, 189, 143, 85, 34, 189, 155, 103, 101, 61, 101, 186, 28, 190, 236, 253, 5, 62, 0, 154, 116, 189, 68, 250, 135, 189, 20, 229, 62, 190, 46, 7, 85, 61, 216, 62, 251, 189, 137, 22, 232, 61, 136, 198, 237, 189, 193, 178, 72, 61, 219, 7, 226, 189, 254, 45, 19, 190, 43, 246, 241, 188, 38, 51, 220, 188, 206, 84, 89, 189, 35, 86, 161, 60, 51, 132, 1, 62, 10, 255, 228, 187, 241, 125, 196, 189, 173, 156, 52, 190, 22, 105, 29, 62, 248, 62, 52, 190, 18, 254, 247, 61, 143, 83, 7, 61, 249, 55, 3, 190, 82, 179, 19, 62, 206, 254, 194, 189, 150, 248, 156, 189, 175, 65, 15, 189, 61, 82, 29, 190, 212, 131, 122, 189, 174, 62, 145, 60, 111, 224, 157, 189, 152, 193, 231, 189, 153, 120, 25, 190, 221, 143, 146, 61, 57, 235, 33, 190, 42, 251, 243, 61, 243, 218, 200, 61, 185, 121, 129, 61, 161, 110, 244, 61, 36, 176, 80, 188, 171, 9, 160, 61, 14, 163, 217, 189, 178, 5, 2, 63, 134, 4, 9, 62, 0, 238, 168, 190, 178, 188, 94, 62, 206, 178, 165, 189, 98, 200, 202, 190, 112, 74, 194, 62, 24, 32, 40, 185, 59, 120, 72, 188, 73, 191, 149, 191, 58, 177, 216, 61, 38, 226, 230, 61, 188, 81, 18, 191, 206, 169, 175, 190, 234, 222, 19, 62, 236, 19, 28, 191, 254, 56, 51, 62, 215, 99, 175, 189, 224, 230, 133, 62, 23, 66, 200, 189, 19, 227, 25, 190, 59, 23, 197, 188, 82, 129, 224, 61, 190, 128, 124, 189, 56, 167, 0, 62, 107, 192, 157, 61, 49, 199, 92, 190, 0, 183, 79, 191, 45, 8, 169, 190, 227, 85, 219, 190, 202, 227, 250, 189, 127, 105, 178, 190, 102, 4, 157, 60, 213, 125, 103, 190, 98, 62, 128, 62, 232, 132, 17, 190, 86, 45, 199, 189, 223, 232, 122, 62, 168, 131, 241, 60, 6, 47, 39, 62, 58, 148, 239, 62, 14, 48, 206, 62, 91, 207, 252, 189, 161, 27, 228, 59, 71, 230, 122, 62, 94, 204, 166, 191, 153, 45, 132, 191, 61, 195, 244, 189, 224, 201, 35, 189, 134, 116, 114, 190, 95, 226, 20, 190, 195, 177, 146, 62, 223, 201, 54, 62, 44, 14, 149, 188, 203, 220, 177, 190, 156, 109, 30, 62, 12, 40, 24, 190, 154, 83, 62, 189, 239, 0, 143, 191, 185, 22, 140, 62, 66, 202, 33, 189, 112, 227, 166, 62, 235, 250, 107, 190, 63, 12, 100, 189, 74, 163, 248, 59, 135, 239, 28, 61, 164, 37, 114, 61, 134, 204, 29, 62, 237, 235, 89, 190, 104, 199, 163, 189, 111, 197, 139, 62, 233, 133, 113, 62, 192, 228, 246, 188, 50, 250, 46, 191, 143, 190, 129, 188, 24, 140, 208, 187, 210, 68, 1, 191, 197, 132, 203, 189, 157, 130, 22, 61, 243, 150, 66, 190, 168, 27, 94, 61, 158, 155, 221, 61, 78, 115, 26, 62, 103, 165, 84, 61, 69, 168, 124, 62, 235, 10, 159, 188, 19, 5, 174, 62, 202, 26, 168, 62, 246, 23, 228, 190, 162, 244, 12, 62, 234, 160, 168, 61, 69, 132, 63, 190, 237, 127, 14, 190, 182, 222, 56, 190, 84, 67, 235, 61, 208, 106, 189, 61, 3, 181, 153, 62, 208, 52, 155, 61, 84, 124, 247, 188, 220, 82, 69, 189, 164, 137, 213, 61, 139, 195, 164, 190, 88, 134, 115, 62, 127, 63, 1, 190, 136, 157, 193, 60, 238, 170, 236, 190, 66, 107, 90, 62, 230, 100, 62, 189, 28, 188, 189, 60, 236, 7, 137, 61, 84, 0, 205, 59, 212, 19, 57, 191, 183, 246, 126, 60, 166, 54, 195, 188, 251, 54, 43, 62, 140, 249, 77, 190, 192, 194, 53, 62, 205, 34, 54, 189, 56, 18, 173, 61, 178, 157, 2, 190, 207, 6, 30, 62, 196, 137, 55, 62, 27, 20, 219, 189, 224, 217, 95, 190, 91, 118, 222, 190, 17, 123, 129, 62, 79, 203, 173, 189, 247, 232, 74, 188, 77, 3, 91, 190, 13, 195, 182, 61, 171, 14, 210, 60, 58, 30, 5, 61, 76, 93, 100, 191, 119, 28, 157, 62, 107, 239, 151, 191, 122, 229, 80, 62, 118, 24, 135, 61, 239, 87, 141, 189, 253, 25, 78, 190, 87, 117, 106, 61, 154, 3, 140, 189, 244, 147, 103, 190, 39, 145, 170, 190, 92, 216, 100, 189, 103, 192, 102, 62, 253, 131, 28, 60, 14, 234, 40, 61, 41, 139, 171, 62, 25, 232, 201, 190, 122, 176, 87, 62, 41, 57, 143, 61, 224, 153, 201, 61, 130, 105, 51, 190, 125, 69, 6, 190, 163, 79, 45, 59, 47, 192, 149, 62, 214, 53, 72, 62, 39, 140, 138, 191, 59, 58, 104, 62, 247, 120, 195, 190, 76, 181, 223, 190, 20, 184, 49, 189, 243, 252, 57, 62, 239, 203, 132, 60, 51, 7, 107, 191, 209, 27, 240, 62, 113, 92, 142, 190, 244, 205, 205, 60, 100, 156, 207, 189, 42, 166, 249, 62, 197, 195, 4, 62, 60, 175, 194, 189, 175, 121, 254, 62, 218, 58, 24, 189, 221, 73, 70, 190, 130, 140, 4, 62, 75, 241, 229, 189, 209, 96, 111, 190, 206, 20, 191, 190, 80, 122, 158, 62, 173, 241, 51, 61, 76, 75, 51, 189, 88, 82, 231, 189, 113, 188, 253, 60, 101, 150, 115, 190, 91, 51, 14, 190, 161, 204, 158, 190, 56, 92, 185, 61, 20, 112, 67, 62, 203, 215, 10, 62, 85, 247, 165, 189, 89, 56, 236, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {4, 91, 151, 62, 86, 164, 148, 62, 154, 222, 33, 190, 34, 210, 72, 62, 92, 232, 190, 189, 214, 102, 51, 62, 72, 230, 109, 62, 75, 142, 64, 189, 32, 130, 58, 62, 42, 80, 44, 189, 35, 3, 113, 61, 147, 91, 140, 62, 224, 108, 197, 60, 41, 158, 191, 62, 134, 185, 133, 189, 214, 199, 170, 190, 93, 113, 154, 62, 247, 175, 119, 62, 61, 84, 69, 62, 103, 30, 18, 62, 72, 112, 82, 62, 80, 127, 145, 190, 112, 201, 35, 62, 78, 40, 37, 190, 11, 120, 171, 189, 201, 50, 155, 189, 238, 71, 7, 187, 104, 154, 57, 62, 73, 107, 234, 61, 76, 153, 134, 61, 140, 222, 47, 190, 231, 246, 47, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {146, 170, 82, 191, 13, 178, 28, 191, 24, 203, 33, 191, 5, 228, 13, 191, 49, 72, 212, 190, 33, 22, 23, 62, 50, 85, 223, 62, 252, 80, 17, 63, 241, 223, 184, 190, 4, 213, 140, 191, 65, 195, 165, 62, 36, 201, 36, 62, 241, 99, 154, 60, 12, 1, 91, 191, 74, 80, 15, 63, 142, 128, 211, 63, 249, 68, 131, 62, 12, 183, 136, 191, 76, 124, 172, 62, 42, 37, 1, 189, 177, 83, 150, 62, 72, 141, 210, 189, 237, 137, 139, 63, 75, 155, 23, 189, 134, 37, 29, 62, 164, 224, 230, 61, 203, 17, 54, 63, 64, 249, 184, 190, 205, 107, 8, 62, 235, 122, 226, 189, 65, 237, 130, 190, 206, 138, 208, 190, 222, 44, 91, 62, 154, 197, 242, 189, 36, 63, 4, 62, 189, 95, 184, 189, 131, 23, 11, 190, 82, 236, 148, 190, 130, 123, 211, 190, 198, 49, 99, 62, 252, 239, 194, 190, 254, 152, 18, 62, 239, 117, 125, 190, 22, 8, 78, 190, 10, 130, 82, 191, 50, 234, 131, 189, 234, 81, 151, 62, 247, 130, 220, 62, 39, 178, 36, 190, 76, 82, 148, 62, 154, 202, 15, 190, 54, 101, 24, 190, 222, 60, 120, 190, 213, 145, 9, 63, 169, 78, 243, 62, 56, 105, 210, 61, 89, 45, 251, 189, 23, 234, 179, 61, 163, 195, 2, 62, 2, 102, 199, 188, 180, 115, 226, 190, 22, 232, 163, 190, 209, 120, 157, 190, 22, 34, 194, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 142, 213, 61, 10, 217, 170, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {43, 210, 168, 188, 154, 68, 12, 190, 45, 56, 191, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {157, 20, 105, 63, 189, 37, 113, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0047/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}