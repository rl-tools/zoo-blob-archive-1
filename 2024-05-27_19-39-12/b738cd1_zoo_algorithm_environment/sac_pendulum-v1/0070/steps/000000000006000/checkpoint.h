// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 134, 58, 190, 40, 157, 44, 62, 166, 101, 42, 61, 48, 90, 239, 62, 2, 224, 39, 191, 116, 208, 18, 190, 221, 130, 191, 190, 95, 129, 239, 62, 47, 160, 56, 63, 79, 32, 182, 189, 57, 230, 79, 63, 220, 87, 167, 61, 183, 116, 142, 61, 238, 24, 11, 63, 104, 69, 191, 62, 228, 237, 95, 62, 157, 22, 166, 62, 53, 213, 46, 191, 231, 241, 77, 189, 22, 203, 155, 60, 69, 68, 96, 189, 99, 242, 45, 62, 228, 222, 11, 61, 221, 177, 19, 191, 173, 68, 18, 190, 94, 202, 141, 191, 64, 200, 175, 190, 226, 80, 87, 63, 128, 5, 224, 62, 235, 76, 155, 62, 147, 14, 254, 62, 203, 212, 77, 191, 115, 132, 111, 190, 253, 245, 208, 62, 205, 48, 136, 63, 76, 127, 211, 62, 25, 50, 201, 62, 9, 223, 198, 189, 22, 159, 77, 63, 151, 199, 60, 190, 85, 205, 91, 63, 4, 135, 168, 61, 113, 166, 98, 62, 173, 211, 243, 187, 26, 205, 204, 190, 158, 130, 38, 187, 195, 166, 135, 190, 224, 40, 254, 62, 28, 78, 120, 191, 30, 165, 9, 63, 16, 130, 250, 187, 89, 201, 213, 190, 65, 226, 61, 191, 63, 131, 193, 190, 38, 216, 30, 63, 58, 123, 212, 62, 52, 227, 25, 63, 52, 100, 37, 188, 142, 215, 139, 191, 200, 58, 168, 62, 58, 147, 167, 62, 127, 42, 49, 191, 9, 171, 31, 63, 53, 27, 183, 190, 219, 110, 34, 191, 105, 219, 69, 189, 250, 65, 26, 191, 56, 107, 32, 63, 229, 216, 198, 62, 157, 211, 144, 62, 109, 63, 39, 63, 232, 223, 67, 191, 115, 165, 44, 62, 89, 105, 141, 191, 174, 2, 3, 190, 215, 86, 3, 191, 47, 234, 200, 189, 166, 66, 9, 63, 56, 242, 254, 62, 36, 135, 61, 63, 61, 43, 7, 191, 241, 87, 167, 62, 125, 155, 43, 189, 164, 153, 54, 191, 125, 88, 181, 190, 102, 244, 104, 62, 88, 102, 11, 63, 19, 220, 209, 190, 29, 111, 187, 190, 150, 225, 13, 191, 106, 255, 205, 190, 159, 50, 168, 191, 51, 8, 152, 190, 223, 199, 192, 187, 53, 161, 135, 191, 95, 101, 54, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 249, 20, 191, 239, 38, 19, 63, 168, 87, 98, 190, 103, 142, 47, 63, 154, 34, 11, 62, 38, 187, 129, 62, 129, 193, 11, 191, 64, 134, 217, 61, 48, 74, 172, 61, 68, 19, 16, 63, 58, 132, 113, 62, 8, 177, 150, 190, 242, 11, 40, 62, 120, 6, 30, 63, 83, 42, 121, 62, 1, 100, 129, 61, 149, 30, 115, 190, 191, 159, 110, 190, 247, 51, 202, 62, 183, 190, 158, 62, 112, 77, 196, 62, 134, 209, 238, 62, 197, 18, 36, 63, 73, 213, 128, 61, 254, 86, 128, 190, 77, 23, 203, 190, 57, 199, 130, 62, 247, 200, 128, 62, 31, 245, 139, 190, 182, 98, 165, 190, 110, 149, 21, 61, 247, 243, 115, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 57, 131, 60, 222, 139, 12, 62, 175, 220, 216, 188, 87, 126, 34, 62, 215, 204, 126, 189, 93, 50, 123, 190, 99, 21, 37, 60, 132, 245, 216, 190, 44, 103, 33, 61, 36, 106, 80, 190, 99, 75, 15, 191, 242, 37, 162, 188, 35, 255, 19, 190, 194, 96, 3, 62, 174, 150, 250, 190, 204, 4, 174, 60, 36, 253, 197, 188, 6, 150, 111, 190, 89, 100, 218, 190, 181, 230, 75, 62, 248, 248, 135, 61, 19, 19, 192, 62, 242, 57, 192, 61, 162, 153, 109, 62, 167, 212, 190, 190, 127, 83, 79, 62, 28, 122, 149, 62, 191, 30, 43, 190, 248, 76, 7, 189, 106, 233, 87, 190, 43, 12, 157, 62, 202, 202, 14, 190, 13, 162, 76, 61, 170, 208, 193, 188, 164, 92, 57, 190, 7, 74, 74, 190, 36, 81, 211, 189, 229, 14, 22, 190, 64, 104, 165, 189, 172, 207, 4, 190, 167, 3, 135, 189, 217, 157, 218, 61, 137, 103, 23, 60, 192, 205, 54, 188, 155, 192, 58, 190, 76, 34, 3, 62, 63, 187, 41, 62, 210, 175, 134, 60, 192, 140, 16, 61, 166, 203, 122, 189, 202, 172, 165, 61, 239, 208, 33, 190, 225, 249, 78, 189, 133, 40, 6, 190, 238, 61, 212, 189, 181, 58, 169, 189, 209, 64, 180, 189, 46, 211, 217, 59, 85, 29, 119, 61, 212, 122, 22, 190, 166, 43, 217, 188, 139, 182, 21, 62, 156, 76, 57, 61, 0, 75, 37, 190, 255, 67, 231, 61, 25, 116, 100, 62, 136, 250, 191, 189, 25, 219, 17, 191, 172, 237, 159, 189, 243, 94, 149, 62, 95, 189, 197, 61, 131, 202, 205, 61, 38, 47, 40, 62, 218, 136, 123, 61, 84, 92, 231, 62, 243, 253, 8, 191, 229, 106, 212, 188, 8, 94, 12, 191, 33, 195, 42, 62, 114, 200, 39, 62, 83, 84, 231, 190, 129, 200, 213, 189, 9, 238, 201, 61, 7, 238, 134, 62, 17, 36, 53, 62, 203, 169, 21, 63, 166, 19, 25, 191, 15, 166, 83, 60, 94, 81, 190, 62, 76, 17, 154, 188, 48, 52, 68, 190, 11, 61, 13, 62, 65, 203, 67, 190, 200, 58, 106, 60, 134, 101, 173, 62, 181, 95, 16, 61, 81, 35, 240, 189, 82, 8, 47, 189, 169, 135, 184, 61, 181, 218, 143, 190, 251, 191, 24, 62, 47, 105, 160, 62, 224, 189, 1, 62, 18, 68, 0, 61, 255, 60, 119, 189, 239, 171, 19, 62, 224, 16, 154, 62, 155, 252, 63, 190, 211, 165, 134, 190, 167, 168, 176, 190, 153, 109, 173, 61, 106, 88, 11, 191, 234, 72, 79, 190, 171, 111, 94, 190, 16, 234, 206, 61, 185, 0, 212, 62, 252, 164, 155, 62, 83, 247, 252, 62, 72, 253, 169, 190, 169, 75, 83, 190, 183, 158, 222, 61, 254, 135, 29, 62, 177, 99, 115, 188, 192, 125, 126, 61, 225, 195, 110, 61, 86, 223, 32, 190, 40, 69, 144, 61, 215, 95, 183, 188, 137, 60, 237, 61, 170, 64, 36, 191, 48, 254, 198, 62, 152, 69, 110, 61, 48, 53, 126, 62, 200, 178, 148, 62, 93, 75, 8, 190, 17, 142, 153, 62, 39, 6, 136, 191, 188, 65, 38, 190, 205, 37, 18, 191, 33, 95, 42, 190, 96, 104, 32, 191, 24, 168, 154, 188, 96, 171, 62, 62, 184, 118, 27, 191, 184, 27, 94, 62, 87, 234, 20, 191, 110, 118, 200, 190, 248, 35, 180, 62, 111, 230, 169, 62, 60, 49, 157, 61, 173, 65, 177, 62, 41, 72, 128, 61, 8, 135, 109, 191, 213, 205, 182, 62, 174, 13, 232, 60, 51, 94, 13, 190, 230, 139, 176, 62, 151, 173, 150, 190, 248, 131, 116, 191, 92, 44, 75, 191, 16, 194, 247, 60, 203, 150, 210, 189, 9, 93, 226, 60, 240, 62, 36, 190, 178, 201, 241, 188, 7, 139, 18, 189, 209, 91, 193, 188, 166, 216, 177, 188, 180, 85, 80, 60, 175, 92, 39, 62, 88, 97, 51, 190, 21, 87, 29, 188, 91, 118, 10, 190, 1, 154, 39, 61, 129, 61, 120, 61, 144, 145, 106, 189, 207, 107, 1, 190, 53, 87, 82, 189, 77, 130, 121, 189, 79, 0, 179, 61, 37, 172, 7, 189, 243, 63, 21, 62, 129, 251, 250, 189, 28, 49, 158, 188, 133, 200, 114, 188, 221, 126, 25, 190, 98, 61, 151, 61, 57, 116, 74, 59, 64, 247, 52, 188, 88, 177, 194, 188, 81, 64, 29, 61, 44, 225, 192, 59, 248, 177, 185, 61, 130, 225, 173, 190, 217, 144, 45, 62, 45, 63, 135, 62, 183, 221, 189, 61, 104, 11, 1, 63, 138, 244, 145, 61, 157, 98, 90, 62, 112, 10, 169, 191, 8, 231, 56, 62, 207, 201, 116, 62, 143, 83, 64, 189, 250, 174, 221, 190, 116, 219, 176, 62, 15, 75, 5, 62, 186, 93, 17, 191, 185, 81, 79, 62, 253, 177, 192, 191, 27, 253, 40, 190, 213, 105, 60, 62, 152, 81, 93, 62, 245, 33, 181, 62, 75, 20, 171, 62, 103, 86, 119, 190, 182, 17, 23, 62, 27, 141, 76, 62, 30, 57, 3, 191, 7, 41, 31, 191, 175, 129, 134, 62, 146, 90, 110, 191, 72, 223, 122, 191, 255, 227, 138, 191, 152, 27, 8, 62, 7, 178, 85, 190, 167, 179, 171, 189, 226, 167, 18, 61, 248, 215, 83, 61, 91, 119, 46, 190, 31, 131, 27, 62, 150, 138, 131, 61, 94, 63, 78, 59, 125, 63, 204, 61, 19, 62, 140, 189, 87, 183, 140, 189, 142, 76, 161, 190, 120, 138, 76, 188, 61, 72, 186, 189, 49, 14, 230, 189, 53, 204, 3, 188, 72, 94, 55, 190, 177, 198, 5, 190, 46, 8, 216, 189, 119, 64, 223, 189, 38, 94, 31, 190, 36, 229, 215, 61, 163, 12, 85, 61, 193, 190, 250, 189, 65, 114, 41, 190, 128, 61, 144, 189, 248, 120, 201, 61, 27, 173, 56, 188, 206, 5, 113, 189, 131, 158, 177, 189, 179, 150, 35, 190, 75, 178, 147, 188, 182, 172, 94, 189, 163, 90, 21, 62, 143, 9, 105, 61, 195, 198, 23, 62, 55, 169, 25, 63, 211, 98, 133, 189, 150, 164, 19, 63, 187, 81, 33, 191, 37, 177, 71, 60, 11, 63, 35, 63, 157, 58, 172, 190, 147, 195, 118, 190, 83, 19, 232, 61, 177, 136, 24, 63, 128, 76, 169, 190, 157, 145, 3, 191, 127, 85, 137, 191, 226, 167, 123, 190, 54, 63, 222, 62, 92, 99, 188, 187, 254, 129, 2, 63, 123, 191, 38, 62, 181, 178, 11, 191, 66, 159, 52, 62, 170, 83, 50, 62, 195, 232, 49, 191, 87, 194, 47, 190, 39, 215, 135, 62, 181, 161, 135, 191, 239, 205, 17, 191, 181, 24, 194, 190, 3, 179, 143, 189, 158, 87, 143, 61, 15, 97, 172, 189, 254, 35, 8, 191, 142, 135, 174, 189, 81, 246, 16, 62, 205, 44, 62, 190, 186, 39, 214, 188, 254, 107, 210, 61, 20, 32, 230, 189, 166, 78, 248, 62, 119, 26, 249, 190, 137, 141, 73, 62, 114, 66, 197, 190, 43, 152, 152, 62, 11, 199, 198, 61, 150, 16, 202, 190, 188, 49, 227, 188, 26, 15, 149, 61, 200, 52, 117, 62, 80, 115, 83, 61, 170, 185, 142, 62, 43, 237, 247, 189, 179, 65, 114, 61, 105, 106, 112, 189, 13, 111, 248, 188, 102, 27, 140, 189, 157, 73, 2, 62, 149, 183, 5, 190, 85, 93, 200, 61, 244, 34, 217, 60, 66, 42, 43, 61, 214, 187, 6, 190, 122, 80, 52, 61, 229, 154, 241, 61, 121, 34, 161, 189, 72, 82, 73, 190, 110, 18, 145, 61, 69, 163, 31, 190, 74, 65, 128, 62, 225, 166, 219, 188, 71, 210, 135, 190, 252, 137, 107, 62, 146, 94, 133, 62, 201, 65, 49, 189, 30, 212, 104, 189, 15, 91, 4, 62, 211, 79, 61, 189, 167, 97, 225, 62, 47, 213, 0, 62, 100, 244, 156, 189, 199, 12, 212, 59, 137, 25, 156, 60, 166, 146, 42, 189, 113, 68, 156, 190, 147, 12, 158, 189, 100, 45, 1, 63, 216, 13, 17, 191, 10, 140, 18, 62, 144, 46, 63, 188, 242, 125, 58, 189, 120, 161, 139, 61, 89, 181, 8, 60, 77, 184, 128, 61, 77, 195, 131, 61, 25, 227, 92, 62, 2, 115, 221, 190, 202, 194, 182, 61, 2, 234, 201, 190, 86, 140, 229, 61, 1, 54, 34, 62, 38, 36, 26, 190, 251, 57, 48, 62, 78, 39, 246, 61, 96, 43, 226, 62, 158, 202, 226, 189, 219, 147, 249, 189, 172, 186, 204, 61, 0, 48, 13, 62, 101, 204, 120, 190, 80, 107, 175, 188, 160, 134, 32, 190, 65, 129, 99, 62, 255, 231, 204, 61, 198, 140, 237, 189, 64, 184, 81, 62, 58, 226, 3, 62, 53, 71, 202, 60, 208, 157, 237, 190, 242, 46, 90, 190, 73, 124, 21, 62, 43, 12, 100, 62, 254, 225, 149, 190, 99, 20, 46, 62, 167, 100, 198, 62, 237, 190, 22, 62, 7, 165, 71, 189, 119, 84, 181, 60, 69, 189, 33, 191, 44, 114, 202, 61, 186, 93, 186, 190, 56, 185, 48, 190, 137, 90, 168, 189, 23, 191, 160, 190, 104, 233, 40, 62, 40, 65, 132, 59, 52, 147, 223, 189, 128, 50, 130, 61, 13, 224, 129, 62, 127, 103, 15, 189, 166, 21, 142, 190, 212, 228, 10, 62, 131, 77, 30, 62, 112, 151, 39, 62, 87, 103, 79, 189, 57, 182, 222, 190, 141, 140, 255, 190, 56, 180, 165, 61, 147, 126, 30, 62, 138, 150, 166, 62, 94, 68, 73, 62, 174, 180, 218, 190, 253, 244, 194, 62, 214, 102, 96, 62, 177, 245, 225, 190, 147, 243, 154, 62, 152, 20, 61, 62, 52, 159, 92, 61, 150, 230, 29, 58, 156, 18, 51, 62, 124, 60, 138, 61, 177, 128, 182, 62, 147, 28, 48, 189, 255, 106, 67, 189, 91, 52, 19, 60, 35, 128, 134, 190, 75, 138, 155, 62, 117, 8, 75, 62, 92, 77, 164, 188, 5, 13, 4, 61, 188, 21, 31, 62, 47, 104, 36, 62, 139, 91, 217, 188, 52, 162, 8, 189, 93, 30, 5, 63, 52, 181, 48, 62, 83, 228, 108, 62, 128, 221, 148, 186, 212, 192, 18, 62, 220, 115, 92, 190, 94, 106, 144, 62, 66, 129, 15, 62, 223, 76, 89, 190, 143, 178, 85, 190, 23, 199, 183, 62, 88, 205, 117, 62, 106, 246, 15, 189, 179, 218, 136, 61, 183, 235, 4, 62, 114, 163, 8, 61, 52, 243, 120, 61, 143, 32, 124, 62, 2, 234, 167, 188, 37, 53, 66, 191, 136, 121, 155, 189, 61, 11, 38, 61, 19, 163, 240, 188, 54, 87, 64, 62, 162, 75, 101, 61, 110, 155, 12, 191, 32, 101, 9, 63, 173, 2, 243, 61, 23, 133, 176, 60, 162, 0, 4, 191, 135, 193, 29, 62, 109, 226, 146, 62, 48, 215, 122, 190, 33, 94, 145, 190, 114, 21, 178, 190, 24, 17, 61, 62, 184, 200, 219, 190, 108, 182, 99, 190, 201, 66, 35, 191, 250, 99, 145, 189, 220, 101, 10, 63, 75, 8, 235, 61, 43, 221, 221, 60, 106, 218, 22, 62, 147, 138, 204, 61, 37, 133, 214, 190, 112, 116, 57, 190, 50, 46, 189, 188, 198, 15, 226, 189, 181, 178, 195, 189, 166, 239, 54, 188, 97, 79, 64, 190, 28, 176, 220, 188, 246, 48, 18, 189, 52, 19, 2, 188, 103, 32, 19, 190, 3, 63, 163, 60, 100, 99, 95, 61, 192, 219, 16, 190, 37, 18, 90, 61, 79, 171, 34, 189, 149, 30, 177, 60, 128, 95, 8, 190, 33, 232, 78, 60, 160, 16, 220, 61, 145, 158, 23, 189, 128, 27, 193, 189, 92, 225, 250, 189, 238, 33, 37, 190, 186, 161, 1, 62, 233, 156, 40, 189, 201, 35, 105, 61, 130, 171, 141, 189, 118, 142, 12, 190, 70, 97, 135, 189, 39, 100, 46, 190, 13, 230, 20, 62, 125, 171, 38, 189, 185, 141, 206, 61, 77, 29, 236, 61, 208, 94, 224, 60, 197, 127, 139, 62, 93, 251, 130, 188, 77, 98, 85, 62, 100, 160, 85, 60, 161, 77, 131, 190, 116, 250, 139, 61, 130, 57, 130, 190, 219, 113, 255, 61, 24, 136, 101, 62, 226, 40, 194, 189, 236, 196, 53, 62, 62, 149, 213, 62, 4, 213, 155, 61, 242, 94, 19, 190, 235, 112, 110, 62, 139, 119, 222, 62, 44, 25, 87, 62, 54, 210, 171, 62, 187, 216, 181, 190, 175, 228, 116, 190, 123, 204, 146, 190, 222, 210, 80, 61, 200, 163, 152, 62, 55, 194, 41, 190, 210, 86, 181, 190, 246, 179, 167, 62, 129, 94, 157, 62, 212, 51, 145, 190, 71, 120, 43, 61, 149, 11, 22, 62, 34, 35, 154, 61, 216, 90, 255, 61, 100, 16, 50, 190, 186, 56, 223, 189, 52, 40, 193, 189, 190, 16, 160, 189, 222, 24, 65, 62, 86, 77, 46, 60, 49, 60, 228, 61, 144, 103, 18, 62, 24, 169, 65, 190, 153, 102, 163, 189, 179, 175, 27, 61, 103, 121, 166, 190, 238, 43, 46, 190, 31, 141, 109, 62, 219, 120, 231, 189, 46, 184, 61, 62, 144, 228, 12, 62, 16, 11, 211, 188, 37, 126, 236, 190, 89, 69, 2, 189, 190, 60, 145, 190, 52, 94, 140, 189, 17, 225, 10, 61, 210, 73, 138, 190, 126, 217, 92, 190, 108, 237, 190, 189, 40, 0, 252, 189, 82, 42, 31, 190, 21, 226, 42, 61, 93, 62, 135, 189, 41, 118, 227, 61, 1, 207, 110, 60, 40, 179, 223, 60, 42, 219, 130, 190, 81, 96, 134, 62, 249, 70, 48, 190, 9, 194, 241, 190, 72, 62, 163, 188, 55, 11, 90, 190, 56, 58, 193, 61, 191, 196, 151, 62, 64, 54, 29, 189, 178, 204, 149, 61, 207, 158, 62, 62, 252, 217, 240, 61, 37, 220, 122, 190, 136, 36, 209, 189, 181, 169, 197, 62, 183, 250, 209, 61, 187, 71, 119, 61, 103, 206, 196, 189, 3, 137, 34, 190, 149, 131, 10, 190, 9, 79, 5, 60, 109, 96, 140, 188, 92, 85, 231, 190, 72, 186, 56, 190, 164, 245, 217, 61, 110, 214, 94, 60, 185, 50, 117, 190, 144, 64, 233, 61, 6, 76, 145, 62, 226, 83, 42, 62, 31, 78, 47, 62, 18, 124, 144, 61, 128, 131, 149, 60, 111, 249, 237, 61, 88, 96, 32, 62, 129, 77, 88, 61, 236, 29, 19, 189, 30, 69, 20, 190, 185, 125, 148, 189, 167, 233, 234, 188, 122, 198, 23, 190, 132, 84, 208, 61, 248, 164, 40, 190, 28, 112, 196, 188, 248, 22, 34, 62, 234, 232, 141, 61, 184, 116, 170, 188, 232, 93, 54, 189, 30, 129, 8, 190, 244, 125, 6, 190, 138, 7, 93, 189, 197, 255, 9, 62, 164, 124, 42, 190, 143, 74, 0, 190, 40, 211, 137, 59, 248, 104, 121, 189, 188, 107, 17, 190, 116, 191, 218, 60, 233, 42, 202, 189, 208, 50, 45, 190, 40, 120, 153, 61, 197, 196, 17, 190, 155, 198, 187, 189, 249, 250, 175, 62, 120, 85, 231, 189, 95, 175, 42, 61, 232, 114, 185, 61, 164, 200, 111, 61, 158, 35, 1, 62, 120, 207, 232, 61, 97, 42, 206, 189, 41, 10, 161, 62, 123, 127, 131, 62, 96, 109, 56, 191, 40, 228, 110, 188, 48, 125, 157, 190, 188, 91, 101, 62, 255, 242, 147, 61, 121, 80, 155, 190, 86, 36, 235, 61, 189, 212, 119, 62, 196, 192, 65, 62, 167, 42, 140, 62, 20, 215, 252, 62, 21, 148, 199, 190, 103, 218, 199, 59, 208, 32, 174, 189, 176, 28, 197, 190, 51, 185, 117, 62, 15, 14, 88, 62, 160, 203, 165, 190, 175, 226, 154, 60, 176, 109, 65, 189, 36, 253, 25, 61, 249, 166, 184, 59, 24, 149, 5, 190, 224, 102, 181, 187, 143, 2, 78, 61, 231, 26, 177, 61, 96, 174, 130, 62, 75, 166, 22, 62, 127, 57, 115, 62, 254, 154, 133, 189, 7, 31, 62, 62, 86, 86, 36, 190, 168, 74, 11, 63, 106, 136, 70, 189, 139, 96, 50, 61, 42, 11, 200, 188, 247, 96, 86, 59, 90, 105, 95, 62, 107, 122, 46, 62, 150, 235, 7, 62, 237, 183, 19, 191, 81, 22, 26, 190, 10, 151, 1, 189, 223, 127, 113, 190, 223, 116, 87, 62, 186, 157, 129, 61, 142, 126, 90, 191, 142, 242, 33, 62, 120, 189, 26, 189, 148, 39, 156, 190, 98, 87, 23, 62, 241, 153, 51, 190, 244, 50, 241, 188, 229, 211, 194, 189, 248, 4, 11, 190, 121, 126, 134, 189, 207, 234, 128, 190, 49, 138, 55, 189, 176, 138, 54, 59, 159, 34, 194, 189, 42, 202, 150, 189, 176, 27, 167, 189, 41, 238, 89, 61, 8, 102, 133, 61, 133, 131, 65, 190, 160, 87, 202, 61, 11, 44, 182, 61, 246, 230, 101, 189, 4, 98, 3, 188, 184, 153, 83, 190, 211, 168, 55, 190, 120, 134, 202, 61, 33, 229, 63, 190, 128, 110, 170, 61, 41, 156, 190, 189, 145, 158, 208, 188, 65, 68, 132, 60, 80, 190, 28, 190, 189, 154, 30, 190, 202, 230, 132, 189, 66, 90, 97, 189, 84, 238, 147, 187, 70, 83, 19, 188, 42, 150, 53, 61, 40, 254, 101, 189, 105, 183, 145, 189, 16, 242, 252, 189, 11, 173, 187, 189, 23, 125, 103, 188, 46, 134, 1, 61, 64, 191, 29, 190, 181, 192, 55, 189, 58, 60, 17, 62, 231, 230, 158, 61, 254, 27, 86, 61, 217, 242, 190, 61, 213, 217, 122, 189, 90, 146, 150, 60, 82, 106, 50, 61, 100, 103, 185, 189, 219, 134, 175, 189, 140, 204, 58, 61, 102, 209, 96, 189, 207, 175, 194, 60, 134, 249, 175, 189, 159, 162, 5, 190, 133, 85, 109, 61, 180, 72, 157, 189, 160, 242, 130, 189, 84, 2, 10, 190, 109, 196, 23, 61, 234, 185, 37, 189, 167, 53, 134, 61, 52, 193, 225, 60, 31, 110, 10, 190, 77, 193, 204, 61, 62, 131, 49, 190, 72, 66, 246, 59, 213, 229, 157, 61, 124, 162, 104, 61, 27, 45, 231, 60, 194, 96, 8, 62, 202, 14, 140, 62, 250, 15, 59, 189, 224, 163, 183, 62, 34, 248, 151, 61, 29, 191, 241, 61, 186, 114, 175, 62, 30, 225, 72, 63, 73, 98, 184, 189, 143, 207, 149, 60, 6, 20, 55, 62, 164, 199, 143, 189, 162, 120, 171, 62, 191, 202, 238, 61, 146, 109, 33, 59, 240, 28, 194, 188, 116, 243, 250, 61, 111, 46, 156, 189, 147, 130, 170, 190, 198, 64, 9, 62, 15, 90, 11, 63, 135, 174, 4, 191, 18, 5, 119, 61, 39, 30, 96, 188, 84, 217, 190, 189, 37, 239, 80, 188, 126, 133, 108, 62, 211, 87, 205, 61, 59, 16, 225, 61, 227, 190, 104, 188, 75, 135, 239, 187, 118, 170, 231, 189, 206, 218, 39, 190, 80, 162, 155, 189, 230, 231, 142, 189, 209, 85, 93, 189, 145, 54, 247, 189, 91, 131, 31, 190, 200, 121, 171, 189, 4, 12, 96, 61, 14, 170, 39, 61, 76, 88, 188, 189, 200, 189, 102, 189, 129, 2, 170, 61, 171, 130, 53, 61, 32, 37, 33, 190, 172, 63, 139, 61, 224, 208, 55, 190, 228, 93, 230, 61, 120, 159, 58, 189, 54, 62, 20, 190, 127, 237, 209, 61, 96, 71, 217, 61, 171, 236, 170, 60, 31, 25, 185, 61, 68, 255, 20, 62, 245, 237, 32, 190, 70, 83, 11, 62, 6, 176, 95, 61, 220, 26, 113, 189, 66, 169, 79, 61, 66, 185, 215, 60, 169, 10, 127, 189, 240, 147, 83, 60, 195, 237, 41, 189, 185, 174, 103, 189, 40, 183, 71, 61, 53, 85, 76, 189, 26, 222, 33, 190, 125, 5, 22, 190, 176, 251, 44, 190, 13, 87, 29, 190, 150, 25, 167, 189, 194, 61, 247, 61, 73, 27, 64, 189, 84, 85, 34, 62, 16, 129, 75, 60, 55, 163, 37, 62, 183, 46, 27, 62, 253, 205, 202, 60, 113, 214, 80, 189, 16, 14, 196, 61, 21, 219, 180, 189, 45, 194, 133, 60, 88, 107, 135, 61, 57, 137, 217, 61, 65, 192, 2, 62, 154, 81, 43, 189, 148, 97, 211, 189, 64, 252, 51, 190, 68, 202, 52, 190, 189, 224, 76, 61, 79, 225, 210, 61, 6, 226, 67, 189, 105, 126, 45, 62, 27, 66, 147, 61, 222, 64, 125, 189, 187, 162, 35, 62, 251, 107, 26, 62, 172, 94, 247, 189, 180, 130, 107, 62, 35, 227, 6, 62, 79, 181, 100, 190, 245, 8, 211, 60, 49, 117, 22, 61, 159, 164, 203, 61, 30, 100, 34, 187, 168, 1, 41, 62, 62, 206, 243, 190, 160, 55, 179, 190, 56, 90, 180, 60, 58, 50, 117, 189, 208, 57, 248, 60, 162, 36, 86, 62, 119, 200, 160, 61, 143, 14, 131, 189, 76, 14, 174, 190, 48, 139, 109, 189, 81, 21, 131, 62, 23, 233, 102, 190, 110, 24, 7, 61, 253, 64, 46, 189, 209, 82, 128, 62, 29, 27, 15, 190, 135, 20, 185, 188, 163, 230, 108, 62, 179, 178, 24, 191, 212, 8, 152, 189, 7, 31, 157, 191, 117, 185, 205, 189, 162, 155, 218, 61, 175, 90, 79, 189, 35, 176, 68, 60, 239, 140, 53, 191, 104, 5, 9, 61, 81, 28, 9, 191, 5, 247, 39, 62, 103, 52, 12, 190, 215, 140, 30, 190, 34, 104, 38, 63, 230, 98, 126, 189, 41, 171, 254, 61, 7, 149, 60, 191, 102, 75, 25, 63, 158, 139, 141, 190, 123, 183, 159, 62, 147, 116, 42, 62, 173, 157, 203, 61, 209, 103, 16, 190, 166, 36, 244, 61, 151, 79, 139, 189, 21, 6, 187, 61, 196, 31, 113, 190, 219, 59, 19, 189, 52, 40, 166, 62, 58, 52, 22, 61, 145, 178, 140, 189, 183, 35, 251, 190, 237, 70, 147, 62, 114, 153, 87, 61, 16, 190, 191, 188, 100, 158, 239, 187, 61, 159, 4, 62, 88, 253, 2, 62, 64, 0, 21, 191, 59, 182, 20, 191, 60, 224, 243, 189, 128, 214, 52, 191, 29, 3, 108, 191, 202, 22, 55, 62, 79, 43, 152, 60, 36, 174, 73, 191, 25, 204, 52, 62, 83, 118, 24, 191, 140, 229, 49, 191, 91, 152, 29, 190, 117, 78, 82, 62, 43, 106, 210, 189, 244, 128, 172, 62, 62, 67, 184, 186, 111, 78, 178, 190, 19, 46, 63, 62, 149, 3, 171, 60, 4, 12, 55, 61, 114, 235, 3, 59, 196, 254, 202, 189, 84, 210, 224, 190, 38, 223, 76, 190, 101, 30, 19, 62, 138, 192, 116, 189, 217, 124, 6, 190, 62, 143, 219, 190, 48, 166, 116, 190, 65, 248, 178, 189, 92, 42, 77, 190, 224, 65, 12, 62, 66, 61, 135, 62, 10, 54, 176, 60, 45, 233, 181, 61, 241, 204, 69, 62, 121, 128, 122, 190, 24, 179, 3, 191, 239, 188, 208, 189, 41, 96, 230, 189, 165, 16, 207, 190, 251, 46, 27, 62, 209, 239, 4, 189, 64, 67, 123, 61, 111, 125, 7, 62, 197, 172, 102, 62, 189, 4, 9, 190, 172, 105, 62, 61, 106, 254, 158, 190, 69, 130, 248, 190, 30, 164, 44, 188, 60, 66, 109, 189, 220, 15, 119, 60, 247, 117, 86, 62, 186, 38, 209, 62, 190, 90, 67, 62, 84, 128, 127, 189, 165, 135, 7, 190, 230, 178, 153, 189, 152, 14, 115, 61, 115, 44, 238, 60, 227, 64, 199, 61, 107, 4, 164, 61, 125, 119, 210, 188, 102, 69, 38, 190, 39, 35, 222, 61, 9, 237, 64, 190, 138, 13, 92, 190, 64, 162, 176, 61, 191, 165, 135, 61, 158, 249, 121, 190, 54, 83, 215, 61, 38, 77, 154, 61, 83, 178, 230, 189, 41, 174, 61, 189, 175, 227, 163, 61, 19, 15, 28, 190, 228, 72, 37, 190, 218, 49, 141, 61, 124, 101, 165, 189, 49, 148, 32, 61, 70, 105, 212, 189, 187, 88, 59, 190, 189, 30, 200, 61, 159, 72, 26, 189, 24, 215, 117, 189, 213, 192, 7, 61, 177, 31, 246, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {170, 106, 92, 62, 164, 26, 183, 61, 203, 178, 70, 61, 248, 144, 222, 61, 42, 134, 217, 61, 117, 138, 185, 189, 181, 99, 109, 61, 187, 61, 24, 190, 169, 19, 141, 62, 2, 167, 3, 62, 183, 80, 24, 188, 240, 173, 47, 61, 61, 180, 162, 60, 29, 226, 27, 62, 237, 115, 106, 190, 77, 65, 57, 189, 80, 182, 69, 62, 7, 5, 4, 189, 249, 84, 237, 61, 222, 23, 162, 60, 203, 95, 41, 62, 151, 62, 29, 190, 97, 63, 219, 189, 163, 51, 12, 188, 78, 33, 171, 189, 79, 176, 90, 190, 77, 213, 234, 189, 244, 30, 12, 190, 130, 233, 68, 62, 162, 43, 183, 60, 239, 109, 167, 61, 217, 159, 106, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 139, 22, 191, 167, 59, 30, 190, 36, 197, 211, 62, 1, 233, 138, 62, 31, 107, 134, 63, 37, 105, 44, 190, 58, 214, 76, 63, 254, 106, 248, 61, 170, 101, 19, 63, 72, 66, 116, 62, 161, 62, 81, 61, 75, 140, 30, 190, 206, 27, 234, 190, 202, 54, 139, 190, 98, 46, 131, 191, 42, 86, 19, 62, 33, 62, 234, 190, 19, 221, 45, 62, 117, 51, 190, 190, 45, 162, 95, 189, 212, 154, 43, 62, 242, 37, 43, 62, 89, 70, 174, 61, 193, 199, 23, 190, 76, 119, 109, 62, 252, 94, 170, 60, 176, 101, 173, 189, 231, 159, 41, 189, 230, 188, 5, 191, 8, 131, 68, 63, 214, 25, 81, 62, 57, 163, 83, 189, 157, 128, 182, 61, 186, 198, 252, 61, 204, 160, 245, 62, 9, 38, 254, 190, 197, 43, 172, 61, 108, 116, 213, 61, 208, 15, 121, 190, 98, 245, 179, 189, 141, 198, 227, 60, 95, 135, 28, 190, 137, 35, 140, 62, 248, 98, 155, 190, 128, 71, 242, 53, 167, 46, 89, 190, 64, 43, 1, 63, 8, 71, 141, 189, 162, 70, 30, 190, 32, 149, 237, 61, 232, 244, 108, 189, 92, 147, 242, 61, 64, 72, 35, 191, 155, 17, 137, 62, 102, 95, 110, 61, 166, 139, 179, 61, 203, 3, 153, 62, 117, 126, 63, 188, 31, 245, 11, 62, 19, 66, 63, 62, 138, 140, 247, 189, 44, 53, 218, 61, 186, 88, 25, 190, 144, 120, 10, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 18, 12, 190, 65, 61, 141, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {83, 178, 4, 192, 108, 226, 107, 62, 113, 216, 25, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {21, 39, 50, 64, 110, 40, 50, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0070/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}