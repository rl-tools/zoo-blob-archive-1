// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 134, 58, 190, 40, 157, 44, 62, 166, 101, 42, 61, 86, 183, 86, 62, 20, 139, 229, 190, 132, 121, 66, 190, 95, 213, 223, 190, 208, 162, 143, 187, 216, 9, 55, 63, 56, 23, 205, 188, 124, 55, 54, 63, 52, 57, 236, 61, 88, 207, 24, 61, 221, 77, 122, 61, 194, 98, 204, 62, 155, 198, 176, 62, 209, 231, 171, 62, 115, 80, 47, 191, 197, 40, 169, 189, 152, 126, 206, 60, 224, 33, 151, 189, 253, 194, 149, 62, 55, 54, 12, 62, 253, 160, 19, 191, 67, 207, 113, 189, 15, 105, 85, 190, 29, 42, 229, 190, 131, 245, 46, 63, 147, 224, 88, 62, 191, 154, 182, 62, 89, 185, 209, 62, 178, 1, 19, 191, 91, 63, 70, 190, 152, 153, 69, 61, 58, 104, 83, 63, 70, 116, 216, 62, 117, 104, 238, 62, 120, 38, 73, 190, 37, 76, 78, 63, 68, 53, 79, 189, 50, 215, 31, 63, 227, 97, 2, 62, 88, 251, 128, 62, 191, 155, 20, 62, 195, 24, 212, 190, 142, 210, 173, 188, 112, 73, 161, 190, 14, 181, 0, 63, 160, 7, 75, 191, 218, 42, 61, 63, 245, 92, 72, 188, 147, 252, 171, 190, 91, 223, 99, 62, 13, 5, 255, 190, 192, 71, 9, 63, 219, 12, 223, 61, 224, 207, 31, 63, 247, 215, 142, 61, 105, 230, 150, 191, 95, 92, 162, 62, 177, 53, 104, 62, 6, 87, 51, 191, 237, 146, 33, 63, 53, 180, 19, 190, 148, 136, 46, 191, 235, 122, 32, 189, 102, 28, 20, 191, 206, 239, 1, 63, 63, 44, 152, 62, 166, 37, 54, 62, 18, 105, 67, 63, 68, 115, 70, 191, 233, 63, 64, 62, 232, 215, 95, 191, 204, 142, 150, 188, 153, 16, 229, 190, 210, 197, 183, 190, 127, 105, 11, 63, 36, 37, 212, 62, 193, 110, 85, 63, 37, 47, 7, 191, 84, 32, 85, 62, 214, 147, 130, 62, 12, 139, 55, 191, 206, 73, 190, 190, 223, 168, 1, 190, 193, 124, 9, 63, 231, 212, 186, 190, 68, 249, 151, 62, 78, 252, 19, 191, 45, 180, 136, 190, 155, 171, 55, 191, 52, 152, 34, 190, 34, 42, 7, 61, 116, 212, 25, 189, 164, 13, 119, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 249, 20, 191, 14, 234, 222, 62, 67, 21, 192, 189, 47, 112, 39, 63, 63, 74, 76, 62, 23, 98, 35, 62, 184, 10, 3, 191, 159, 55, 146, 61, 39, 113, 204, 61, 59, 74, 173, 62, 179, 95, 130, 62, 235, 8, 176, 190, 182, 147, 211, 61, 163, 126, 18, 63, 42, 72, 7, 62, 147, 14, 137, 189, 46, 230, 164, 190, 187, 90, 143, 190, 200, 84, 110, 62, 131, 251, 140, 62, 56, 79, 201, 62, 8, 173, 187, 62, 66, 136, 41, 63, 163, 185, 57, 62, 23, 60, 40, 188, 198, 229, 136, 190, 57, 62, 197, 62, 114, 90, 151, 62, 23, 22, 2, 190, 76, 47, 162, 190, 149, 177, 109, 61, 169, 250, 101, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 57, 131, 60, 205, 89, 193, 61, 14, 34, 240, 60, 252, 104, 44, 189, 61, 124, 79, 60, 77, 31, 72, 190, 99, 21, 37, 60, 152, 53, 54, 190, 222, 81, 22, 190, 194, 39, 189, 189, 61, 46, 177, 190, 205, 88, 52, 61, 49, 246, 26, 189, 235, 52, 152, 189, 57, 15, 67, 190, 13, 240, 196, 61, 214, 203, 159, 190, 176, 22, 135, 190, 138, 240, 160, 190, 87, 11, 102, 62, 149, 225, 18, 62, 185, 208, 51, 62, 23, 22, 152, 189, 141, 124, 149, 61, 248, 68, 84, 190, 160, 219, 119, 62, 77, 164, 6, 189, 71, 82, 44, 60, 67, 69, 131, 60, 247, 236, 83, 190, 9, 57, 141, 189, 20, 54, 218, 189, 13, 162, 76, 61, 170, 208, 193, 188, 164, 92, 57, 190, 7, 74, 74, 190, 36, 81, 211, 189, 229, 14, 22, 190, 64, 104, 165, 189, 172, 207, 4, 190, 167, 3, 135, 189, 217, 157, 218, 61, 137, 103, 23, 60, 192, 205, 54, 188, 155, 192, 58, 190, 76, 34, 3, 62, 63, 187, 41, 62, 210, 175, 134, 60, 192, 140, 16, 61, 166, 203, 122, 189, 202, 172, 165, 61, 239, 208, 33, 190, 225, 249, 78, 189, 133, 40, 6, 190, 238, 61, 212, 189, 181, 58, 169, 189, 209, 64, 180, 189, 46, 211, 217, 59, 85, 29, 119, 61, 212, 122, 22, 190, 166, 43, 217, 188, 139, 182, 21, 62, 156, 76, 57, 61, 0, 75, 37, 190, 255, 67, 231, 61, 25, 236, 41, 62, 17, 241, 39, 189, 165, 151, 238, 190, 46, 243, 216, 188, 197, 93, 137, 62, 132, 221, 4, 62, 192, 73, 159, 61, 9, 17, 227, 61, 121, 25, 154, 61, 64, 104, 201, 62, 171, 82, 102, 190, 144, 93, 228, 188, 76, 80, 210, 190, 122, 54, 25, 62, 95, 143, 10, 62, 134, 44, 211, 190, 60, 113, 39, 190, 77, 160, 222, 61, 12, 195, 41, 62, 33, 138, 4, 62, 76, 133, 228, 62, 174, 95, 255, 190, 116, 72, 150, 188, 148, 118, 1, 62, 67, 69, 119, 60, 55, 137, 67, 190, 218, 235, 212, 61, 190, 8, 18, 190, 60, 112, 53, 189, 240, 144, 146, 62, 121, 155, 84, 188, 81, 35, 240, 189, 154, 50, 32, 189, 105, 159, 213, 61, 167, 205, 220, 189, 112, 216, 70, 62, 7, 22, 182, 62, 219, 27, 34, 62, 240, 192, 157, 61, 61, 71, 85, 189, 163, 148, 56, 62, 179, 238, 138, 62, 170, 25, 63, 189, 183, 128, 120, 190, 183, 153, 21, 190, 181, 3, 238, 61, 160, 113, 8, 191, 233, 80, 138, 59, 88, 9, 128, 190, 63, 211, 0, 62, 60, 211, 203, 62, 51, 239, 155, 62, 1, 81, 218, 62, 44, 43, 105, 190, 77, 216, 34, 190, 219, 92, 46, 61, 109, 172, 12, 62, 138, 54, 16, 61, 74, 177, 178, 61, 221, 191, 126, 61, 131, 157, 52, 190, 103, 244, 0, 62, 139, 109, 100, 188, 137, 60, 237, 61, 207, 141, 91, 190, 215, 235, 178, 62, 132, 183, 92, 61, 59, 210, 110, 62, 54, 113, 179, 188, 93, 75, 8, 190, 235, 83, 241, 61, 110, 75, 144, 190, 188, 168, 218, 189, 63, 69, 108, 190, 249, 134, 224, 189, 227, 153, 47, 191, 141, 26, 219, 188, 200, 71, 85, 189, 44, 119, 44, 191, 229, 55, 236, 61, 227, 84, 145, 190, 198, 74, 207, 190, 254, 86, 144, 62, 57, 23, 137, 62, 90, 19, 197, 61, 182, 181, 156, 62, 175, 132, 146, 190, 251, 64, 112, 191, 120, 247, 148, 62, 255, 141, 153, 190, 67, 119, 100, 190, 85, 203, 153, 62, 158, 24, 161, 190, 44, 234, 6, 191, 234, 149, 243, 190, 16, 194, 247, 60, 68, 116, 205, 189, 9, 93, 226, 60, 90, 130, 29, 190, 178, 201, 241, 188, 221, 161, 206, 188, 209, 91, 193, 188, 103, 213, 110, 188, 180, 85, 80, 60, 12, 111, 43, 62, 146, 97, 50, 190, 79, 49, 26, 188, 91, 118, 10, 190, 218, 239, 64, 61, 218, 77, 136, 61, 144, 145, 106, 189, 207, 107, 1, 190, 53, 87, 82, 189, 77, 130, 121, 189, 79, 0, 179, 61, 37, 172, 7, 189, 243, 63, 21, 62, 147, 237, 248, 189, 123, 180, 233, 187, 133, 200, 114, 188, 221, 126, 25, 190, 34, 33, 175, 61, 221, 182, 76, 60, 64, 247, 52, 188, 215, 218, 183, 188, 81, 64, 29, 61, 82, 250, 27, 60, 248, 177, 185, 61, 124, 149, 147, 189, 99, 136, 17, 62, 169, 179, 65, 62, 139, 248, 143, 61, 236, 105, 88, 62, 138, 244, 145, 61, 201, 248, 193, 61, 15, 208, 249, 190, 86, 105, 85, 62, 58, 157, 4, 62, 213, 208, 91, 189, 217, 110, 219, 190, 121, 118, 136, 62, 252, 198, 214, 189, 85, 190, 16, 191, 181, 156, 20, 62, 25, 8, 135, 191, 4, 147, 36, 190, 208, 191, 136, 62, 70, 102, 129, 62, 137, 69, 199, 62, 173, 177, 145, 62, 116, 46, 12, 191, 130, 228, 151, 61, 13, 131, 58, 62, 66, 131, 96, 191, 234, 158, 41, 191, 209, 239, 117, 62, 231, 200, 114, 191, 226, 121, 177, 190, 91, 4, 37, 191, 152, 27, 8, 62, 7, 178, 85, 190, 167, 179, 171, 189, 226, 167, 18, 61, 248, 215, 83, 61, 91, 119, 46, 190, 31, 131, 27, 62, 150, 138, 131, 61, 94, 63, 78, 59, 125, 63, 204, 61, 19, 62, 140, 189, 87, 183, 140, 189, 142, 76, 161, 190, 120, 138, 76, 188, 61, 72, 186, 189, 49, 14, 230, 189, 53, 204, 3, 188, 72, 94, 55, 190, 177, 198, 5, 190, 46, 8, 216, 189, 119, 64, 223, 189, 38, 94, 31, 190, 36, 229, 215, 61, 163, 12, 85, 61, 193, 190, 250, 189, 65, 114, 41, 190, 128, 61, 144, 189, 248, 120, 201, 61, 27, 173, 56, 188, 206, 5, 113, 189, 131, 158, 177, 189, 179, 150, 35, 190, 75, 178, 147, 188, 56, 16, 232, 188, 190, 209, 16, 62, 42, 170, 228, 61, 102, 189, 44, 62, 252, 239, 228, 62, 211, 98, 133, 189, 91, 243, 192, 62, 121, 234, 211, 190, 223, 144, 71, 61, 65, 253, 185, 62, 150, 65, 141, 190, 13, 174, 99, 190, 182, 196, 52, 62, 188, 108, 202, 62, 172, 211, 162, 190, 245, 99, 240, 190, 224, 251, 48, 191, 83, 105, 100, 190, 88, 147, 255, 62, 96, 198, 172, 60, 5, 238, 3, 63, 46, 145, 84, 62, 35, 25, 58, 191, 217, 40, 138, 188, 44, 213, 42, 62, 230, 109, 77, 191, 216, 68, 168, 190, 151, 219, 132, 62, 172, 237, 100, 191, 32, 126, 23, 190, 39, 174, 210, 190, 3, 179, 143, 189, 156, 82, 91, 59, 16, 34, 79, 189, 22, 112, 216, 190, 111, 84, 225, 188, 175, 122, 53, 62, 113, 82, 38, 190, 44, 194, 112, 60, 119, 27, 175, 61, 17, 27, 206, 189, 151, 246, 217, 62, 98, 236, 128, 190, 241, 249, 109, 62, 24, 2, 111, 190, 17, 87, 166, 62, 187, 252, 249, 61, 58, 254, 131, 190, 201, 32, 105, 189, 92, 26, 201, 61, 139, 197, 66, 62, 64, 187, 55, 61, 190, 255, 192, 61, 123, 214, 110, 189, 71, 146, 198, 61, 132, 180, 42, 190, 189, 219, 16, 189, 245, 11, 0, 189, 125, 11, 18, 62, 74, 108, 226, 189, 127, 158, 166, 61, 25, 172, 165, 187, 71, 75, 33, 61, 214, 187, 6, 190, 234, 212, 30, 61, 148, 156, 206, 61, 90, 141, 15, 61, 233, 182, 162, 189, 177, 43, 200, 61, 47, 137, 23, 190, 216, 224, 135, 62, 172, 91, 129, 189, 46, 12, 16, 190, 71, 226, 81, 62, 232, 167, 185, 62, 62, 132, 78, 188, 154, 40, 109, 61, 95, 72, 30, 62, 152, 250, 178, 189, 158, 53, 231, 62, 207, 244, 210, 61, 166, 244, 80, 60, 205, 69, 229, 189, 176, 166, 138, 189, 1, 203, 185, 189, 122, 245, 138, 190, 216, 174, 89, 189, 245, 177, 179, 62, 146, 146, 13, 191, 126, 37, 73, 62, 125, 49, 209, 187, 43, 55, 84, 189, 177, 145, 52, 61, 203, 92, 13, 189, 97, 80, 33, 61, 77, 195, 131, 61, 74, 21, 243, 61, 95, 156, 153, 190, 130, 43, 168, 60, 14, 218, 166, 190, 78, 241, 177, 61, 125, 138, 19, 62, 118, 104, 43, 190, 204, 240, 54, 62, 58, 120, 52, 188, 4, 16, 212, 62, 27, 143, 222, 189, 217, 29, 25, 190, 117, 254, 20, 61, 193, 69, 210, 61, 78, 20, 143, 190, 47, 187, 137, 60, 10, 39, 1, 190, 74, 147, 22, 62, 173, 43, 146, 189, 192, 86, 95, 190, 204, 81, 29, 62, 166, 166, 201, 61, 60, 221, 32, 60, 213, 142, 184, 190, 42, 140, 250, 190, 145, 19, 182, 61, 167, 29, 87, 62, 3, 5, 165, 190, 24, 177, 86, 62, 15, 237, 173, 62, 22, 62, 34, 62, 7, 165, 71, 189, 161, 137, 112, 60, 179, 210, 9, 191, 151, 196, 40, 62, 1, 147, 96, 190, 163, 241, 67, 190, 49, 146, 241, 189, 206, 247, 172, 190, 57, 49, 32, 62, 189, 231, 230, 61, 192, 242, 213, 189, 49, 93, 229, 61, 1, 25, 186, 62, 234, 133, 131, 60, 47, 45, 151, 190, 146, 184, 29, 62, 71, 42, 25, 62, 144, 226, 53, 62, 184, 174, 150, 61, 219, 41, 200, 190, 70, 9, 178, 190, 182, 239, 179, 61, 172, 254, 40, 62, 92, 138, 158, 62, 32, 140, 134, 62, 137, 187, 253, 190, 23, 40, 190, 62, 102, 81, 84, 62, 192, 164, 215, 190, 28, 76, 164, 62, 40, 157, 46, 62, 222, 164, 62, 61, 150, 230, 29, 58, 190, 168, 141, 60, 19, 16, 153, 61, 123, 194, 186, 62, 228, 20, 63, 189, 125, 219, 146, 189, 230, 173, 136, 188, 9, 253, 145, 190, 171, 4, 146, 62, 129, 202, 2, 62, 182, 196, 62, 188, 233, 162, 53, 61, 185, 188, 213, 61, 239, 233, 53, 62, 22, 235, 103, 189, 19, 131, 164, 189, 245, 238, 243, 62, 131, 72, 67, 62, 146, 215, 62, 62, 62, 60, 41, 190, 167, 26, 120, 61, 81, 20, 48, 190, 126, 43, 149, 62, 11, 46, 2, 62, 152, 45, 197, 189, 229, 218, 108, 190, 17, 199, 170, 62, 32, 113, 102, 62, 102, 79, 30, 189, 188, 157, 191, 61, 96, 255, 140, 61, 129, 227, 232, 60, 52, 243, 120, 61, 63, 40, 230, 61, 142, 228, 250, 189, 199, 70, 70, 190, 213, 18, 6, 190, 252, 237, 194, 59, 51, 148, 34, 189, 161, 251, 7, 62, 232, 212, 149, 61, 193, 160, 71, 190, 142, 198, 165, 62, 173, 2, 243, 61, 63, 177, 34, 189, 170, 113, 138, 190, 143, 86, 178, 61, 92, 102, 39, 62, 199, 85, 167, 189, 95, 233, 49, 190, 37, 10, 240, 189, 24, 98, 28, 62, 245, 193, 133, 190, 104, 218, 130, 189, 198, 136, 169, 190, 1, 179, 174, 189, 42, 72, 179, 62, 70, 230, 139, 189, 210, 134, 118, 189, 158, 127, 254, 61, 58, 64, 129, 189, 168, 198, 152, 190, 35, 35, 168, 189, 47, 191, 175, 188, 198, 15, 226, 189, 161, 156, 190, 189, 31, 60, 28, 188, 177, 172, 57, 190, 21, 111, 217, 188, 102, 20, 18, 189, 52, 19, 2, 188, 155, 45, 19, 190, 125, 8, 186, 60, 100, 99, 95, 61, 192, 219, 16, 190, 37, 18, 90, 61, 79, 171, 34, 189, 96, 95, 228, 60, 28, 87, 8, 190, 33, 232, 78, 60, 89, 1, 231, 61, 134, 170, 15, 189, 128, 27, 193, 189, 58, 107, 247, 189, 207, 31, 37, 190, 222, 44, 8, 62, 226, 16, 237, 188, 173, 155, 109, 61, 130, 171, 141, 189, 196, 110, 12, 190, 56, 81, 135, 189, 87, 197, 43, 190, 175, 32, 22, 62, 67, 72, 30, 189, 236, 69, 216, 61, 190, 32, 245, 61, 208, 94, 224, 60, 170, 137, 39, 62, 165, 22, 129, 60, 178, 171, 120, 62, 59, 142, 199, 60, 93, 65, 144, 190, 223, 0, 9, 61, 172, 158, 144, 190, 37, 246, 189, 61, 202, 244, 50, 62, 183, 245, 178, 189, 93, 49, 53, 62, 38, 251, 202, 62, 186, 134, 237, 61, 182, 249, 53, 190, 12, 195, 107, 62, 75, 55, 205, 62, 211, 120, 91, 62, 166, 143, 159, 62, 240, 81, 211, 190, 92, 203, 134, 190, 158, 175, 30, 190, 196, 99, 219, 61, 230, 60, 146, 62, 238, 139, 222, 59, 65, 63, 168, 190, 41, 109, 159, 62, 24, 109, 145, 62, 83, 142, 130, 190, 125, 8, 112, 61, 135, 198, 242, 61, 185, 111, 85, 61, 216, 90, 255, 61, 141, 83, 26, 189, 219, 96, 223, 189, 16, 200, 133, 189, 116, 60, 176, 189, 189, 200, 97, 62, 116, 30, 241, 60, 189, 201, 23, 62, 226, 172, 50, 62, 172, 233, 174, 60, 74, 190, 143, 61, 197, 18, 107, 61, 250, 240, 162, 190, 118, 214, 29, 190, 228, 114, 142, 62, 219, 120, 231, 189, 153, 202, 81, 62, 222, 123, 6, 62, 241, 49, 15, 187, 86, 170, 95, 190, 165, 225, 36, 189, 197, 116, 124, 190, 0, 54, 149, 189, 158, 251, 100, 61, 165, 12, 3, 190, 126, 217, 92, 190, 24, 38, 97, 189, 20, 201, 180, 189, 82, 42, 31, 190, 23, 60, 3, 61, 0, 124, 19, 189, 167, 144, 18, 62, 1, 207, 110, 60, 147, 106, 146, 189, 48, 2, 41, 190, 89, 53, 139, 62, 57, 250, 242, 189, 232, 187, 226, 190, 210, 64, 188, 188, 168, 185, 57, 190, 14, 120, 176, 61, 3, 241, 134, 62, 21, 72, 21, 187, 31, 243, 81, 62, 82, 117, 80, 62, 228, 217, 10, 62, 121, 246, 95, 190, 139, 211, 153, 189, 39, 75, 162, 62, 68, 85, 222, 61, 62, 227, 133, 61, 19, 45, 141, 190, 38, 240, 101, 190, 186, 246, 90, 190, 154, 17, 6, 59, 251, 128, 192, 60, 245, 4, 17, 190, 114, 17, 197, 189, 20, 167, 32, 62, 24, 183, 51, 61, 9, 54, 31, 190, 125, 174, 6, 62, 246, 44, 108, 62, 1, 184, 60, 62, 31, 78, 47, 62, 206, 54, 146, 61, 226, 167, 168, 60, 140, 171, 250, 61, 242, 230, 33, 62, 70, 111, 88, 61, 236, 29, 19, 189, 30, 69, 20, 190, 72, 187, 147, 189, 167, 233, 234, 188, 122, 198, 23, 190, 132, 84, 208, 61, 248, 164, 40, 190, 107, 192, 146, 188, 248, 22, 34, 62, 234, 232, 141, 61, 118, 112, 129, 188, 242, 26, 54, 189, 30, 129, 8, 190, 244, 125, 6, 190, 138, 7, 93, 189, 53, 240, 13, 62, 253, 54, 32, 190, 108, 53, 0, 190, 40, 211, 137, 59, 1, 136, 120, 189, 188, 107, 17, 190, 23, 199, 222, 60, 54, 44, 199, 189, 140, 246, 44, 190, 50, 229, 156, 61, 117, 133, 17, 190, 155, 198, 187, 189, 138, 196, 156, 62, 51, 192, 255, 189, 241, 183, 192, 60, 145, 179, 165, 61, 136, 48, 142, 61, 32, 74, 24, 62, 139, 171, 23, 62, 211, 12, 100, 189, 87, 43, 62, 62, 122, 31, 108, 62, 121, 224, 8, 191, 40, 192, 152, 189, 213, 37, 142, 190, 13, 25, 104, 62, 243, 90, 29, 61, 23, 142, 43, 190, 46, 193, 254, 61, 135, 87, 36, 62, 166, 126, 247, 61, 11, 135, 79, 62, 171, 111, 236, 62, 188, 3, 140, 190, 71, 108, 162, 60, 39, 143, 199, 189, 37, 17, 225, 190, 146, 66, 83, 62, 4, 96, 101, 62, 255, 60, 179, 190, 111, 186, 20, 61, 129, 246, 197, 60, 59, 35, 149, 61, 249, 166, 184, 59, 30, 217, 170, 189, 97, 231, 198, 61, 5, 13, 188, 61, 118, 75, 181, 61, 27, 156, 149, 62, 221, 213, 39, 62, 125, 111, 141, 62, 210, 52, 12, 189, 61, 69, 165, 61, 234, 152, 190, 189, 45, 26, 7, 63, 136, 155, 68, 190, 179, 135, 201, 61, 233, 244, 156, 60, 239, 68, 208, 60, 78, 237, 168, 62, 130, 68, 42, 62, 199, 8, 40, 60, 159, 150, 217, 190, 104, 116, 145, 190, 90, 155, 48, 188, 91, 150, 21, 190, 246, 39, 116, 62, 112, 122, 252, 61, 234, 8, 18, 191, 38, 26, 55, 62, 127, 180, 233, 187, 145, 88, 15, 190, 222, 166, 11, 62, 201, 94, 7, 190, 123, 196, 220, 187, 229, 211, 194, 189, 248, 4, 11, 190, 121, 126, 134, 189, 207, 234, 128, 190, 49, 138, 55, 189, 176, 138, 54, 59, 159, 34, 194, 189, 42, 202, 150, 189, 176, 27, 167, 189, 41, 238, 89, 61, 8, 102, 133, 61, 133, 131, 65, 190, 160, 87, 202, 61, 11, 44, 182, 61, 246, 230, 101, 189, 4, 98, 3, 188, 184, 153, 83, 190, 211, 168, 55, 190, 120, 134, 202, 61, 33, 229, 63, 190, 128, 110, 170, 61, 41, 156, 190, 189, 145, 158, 208, 188, 65, 68, 132, 60, 80, 190, 28, 190, 189, 154, 30, 190, 202, 230, 132, 189, 66, 90, 97, 189, 84, 238, 147, 187, 70, 83, 19, 188, 42, 150, 53, 61, 40, 254, 101, 189, 105, 183, 145, 189, 229, 113, 246, 189, 129, 219, 175, 189, 5, 249, 242, 186, 248, 166, 12, 61, 64, 191, 29, 190, 181, 192, 55, 189, 58, 60, 17, 62, 203, 43, 163, 61, 254, 27, 86, 61, 217, 242, 190, 61, 213, 217, 122, 189, 90, 146, 150, 60, 8, 185, 99, 61, 100, 103, 185, 189, 187, 122, 175, 189, 134, 140, 99, 61, 54, 82, 94, 189, 207, 175, 194, 60, 12, 194, 169, 189, 10, 3, 4, 190, 227, 132, 140, 61, 45, 15, 128, 189, 73, 79, 130, 189, 84, 2, 10, 190, 10, 175, 32, 61, 234, 230, 36, 189, 208, 236, 136, 61, 189, 53, 2, 61, 107, 166, 9, 190, 114, 65, 218, 61, 255, 15, 47, 190, 72, 66, 246, 59, 0, 195, 240, 61, 95, 85, 48, 58, 34, 160, 166, 61, 190, 122, 134, 61, 99, 234, 157, 62, 43, 151, 167, 188, 37, 56, 199, 62, 8, 210, 58, 61, 41, 172, 158, 61, 36, 89, 176, 62, 230, 76, 38, 63, 88, 237, 88, 190, 104, 81, 156, 61, 219, 43, 97, 62, 101, 153, 87, 190, 137, 88, 239, 62, 57, 196, 183, 61, 92, 131, 164, 189, 42, 251, 253, 189, 116, 140, 67, 60, 75, 156, 57, 190, 167, 248, 155, 190, 152, 222, 32, 62, 204, 115, 167, 62, 250, 212, 2, 191, 192, 95, 208, 61, 40, 242, 165, 59, 86, 198, 239, 189, 193, 30, 35, 189, 142, 130, 51, 62, 197, 187, 180, 61, 59, 16, 225, 61, 231, 183, 150, 59, 42, 148, 116, 60, 234, 142, 193, 189, 71, 201, 14, 190, 196, 214, 164, 189, 230, 231, 142, 189, 135, 180, 105, 189, 114, 76, 244, 189, 212, 67, 7, 190, 239, 99, 166, 189, 29, 58, 157, 61, 246, 143, 128, 61, 204, 179, 151, 189, 250, 46, 113, 189, 139, 198, 214, 61, 119, 88, 63, 61, 240, 136, 31, 190, 124, 66, 184, 61, 70, 251, 32, 190, 219, 216, 9, 62, 67, 153, 194, 188, 176, 61, 237, 189, 203, 150, 198, 61, 4, 193, 1, 62, 242, 198, 48, 61, 243, 151, 173, 61, 132, 195, 16, 62, 14, 153, 9, 190, 42, 111, 11, 62, 213, 3, 111, 61, 68, 170, 116, 189, 66, 169, 79, 61, 66, 185, 215, 60, 169, 10, 127, 189, 240, 147, 83, 60, 195, 237, 41, 189, 185, 174, 103, 189, 40, 183, 71, 61, 53, 85, 76, 189, 26, 222, 33, 190, 125, 5, 22, 190, 176, 251, 44, 190, 13, 87, 29, 190, 150, 25, 167, 189, 194, 61, 247, 61, 73, 27, 64, 189, 84, 85, 34, 62, 16, 129, 75, 60, 55, 163, 37, 62, 183, 46, 27, 62, 253, 205, 202, 60, 113, 214, 80, 189, 16, 14, 196, 61, 21, 219, 180, 189, 45, 194, 133, 60, 88, 107, 135, 61, 57, 137, 217, 61, 65, 192, 2, 62, 154, 81, 43, 189, 148, 97, 211, 189, 64, 252, 51, 190, 68, 202, 52, 190, 189, 224, 76, 61, 79, 225, 210, 61, 119, 231, 117, 189, 130, 15, 99, 62, 81, 110, 9, 189, 77, 25, 73, 189, 227, 157, 3, 62, 251, 107, 26, 62, 155, 93, 198, 189, 78, 17, 42, 62, 63, 224, 172, 61, 138, 235, 93, 190, 220, 253, 217, 188, 81, 74, 152, 61, 207, 195, 213, 59, 54, 218, 16, 189, 200, 4, 105, 62, 114, 210, 220, 190, 206, 137, 91, 190, 20, 223, 252, 60, 69, 253, 0, 61, 187, 16, 166, 61, 202, 71, 84, 62, 116, 90, 162, 61, 140, 182, 72, 189, 250, 203, 103, 190, 68, 111, 168, 60, 65, 119, 75, 61, 55, 112, 224, 189, 77, 223, 193, 61, 152, 234, 144, 61, 237, 211, 108, 61, 89, 178, 113, 189, 135, 20, 185, 188, 38, 95, 230, 61, 3, 44, 13, 191, 38, 77, 164, 61, 228, 9, 33, 191, 49, 146, 190, 189, 247, 68, 146, 61, 123, 47, 101, 189, 188, 197, 238, 188, 241, 108, 30, 190, 112, 108, 35, 188, 72, 74, 229, 190, 44, 10, 62, 61, 216, 185, 103, 60, 198, 113, 32, 190, 78, 43, 192, 189, 9, 98, 74, 60, 58, 89, 14, 62, 7, 97, 163, 190, 20, 104, 152, 62, 25, 194, 250, 190, 222, 143, 80, 62, 165, 37, 26, 62, 219, 80, 228, 61, 10, 136, 73, 190, 45, 110, 240, 190, 5, 215, 99, 189, 209, 235, 187, 61, 160, 237, 199, 190, 22, 176, 54, 188, 183, 7, 98, 62, 41, 19, 173, 60, 145, 178, 140, 189, 98, 78, 115, 190, 143, 26, 192, 62, 191, 127, 150, 60, 0, 246, 89, 62, 225, 206, 1, 189, 61, 159, 4, 62, 236, 201, 15, 62, 42, 222, 81, 189, 107, 86, 205, 188, 153, 246, 196, 60, 247, 125, 150, 190, 102, 79, 67, 191, 76, 184, 14, 62, 120, 149, 18, 61, 148, 37, 58, 191, 192, 187, 167, 188, 242, 143, 166, 190, 214, 252, 82, 190, 78, 83, 56, 190, 110, 210, 72, 62, 64, 92, 10, 190, 108, 248, 137, 62, 249, 236, 219, 189, 191, 0, 179, 190, 32, 102, 42, 62, 138, 86, 131, 189, 250, 122, 97, 61, 19, 165, 103, 61, 41, 48, 23, 189, 40, 1, 144, 190, 113, 58, 19, 61, 101, 30, 19, 62, 133, 151, 181, 188, 201, 148, 172, 189, 6, 223, 162, 190, 34, 78, 29, 190, 91, 218, 21, 189, 17, 198, 57, 190, 117, 251, 66, 62, 179, 185, 119, 62, 68, 61, 188, 189, 75, 127, 67, 62, 241, 204, 69, 62, 231, 98, 87, 190, 160, 159, 178, 190, 250, 16, 33, 189, 12, 211, 23, 190, 85, 218, 139, 190, 176, 156, 252, 61, 199, 247, 172, 189, 192, 35, 206, 189, 148, 209, 178, 189, 132, 87, 140, 61, 81, 52, 35, 190, 81, 87, 181, 61, 177, 111, 170, 190, 198, 149, 207, 190, 132, 189, 136, 61, 150, 39, 172, 188, 191, 197, 171, 61, 49, 131, 67, 62, 157, 146, 151, 62, 124, 211, 73, 62, 84, 128, 127, 189, 186, 128, 7, 190, 155, 192, 173, 189, 50, 178, 150, 61, 224, 83, 215, 60, 252, 136, 5, 62, 107, 4, 164, 61, 108, 66, 146, 59, 42, 18, 38, 190, 166, 7, 217, 61, 9, 237, 64, 190, 239, 63, 95, 190, 136, 190, 172, 61, 212, 114, 165, 61, 146, 45, 93, 190, 67, 223, 209, 61, 84, 200, 194, 61, 50, 181, 225, 189, 10, 123, 84, 189, 175, 227, 163, 61, 208, 67, 28, 190, 123, 8, 38, 190, 148, 202, 157, 61, 45, 2, 96, 189, 49, 148, 32, 61, 168, 136, 217, 189, 118, 108, 29, 190, 80, 153, 239, 61, 161, 127, 54, 189, 169, 118, 74, 189, 213, 192, 7, 61, 122, 205, 2, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 46, 7, 61, 164, 26, 183, 61, 24, 50, 17, 188, 171, 198, 10, 62, 246, 208, 216, 61, 100, 133, 174, 189, 151, 214, 169, 61, 187, 61, 24, 190, 216, 24, 170, 62, 28, 97, 38, 61, 10, 205, 205, 60, 116, 79, 132, 188, 154, 239, 190, 61, 58, 165, 223, 61, 62, 2, 78, 189, 226, 199, 13, 189, 215, 165, 88, 62, 22, 99, 96, 59, 121, 137, 55, 61, 73, 76, 224, 60, 37, 150, 174, 61, 113, 35, 8, 190, 97, 63, 219, 189, 89, 50, 208, 59, 16, 75, 163, 189, 100, 219, 60, 190, 77, 213, 234, 189, 81, 47, 66, 190, 121, 156, 97, 62, 95, 6, 233, 188, 109, 72, 224, 187, 72, 252, 95, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 182, 140, 190, 167, 59, 30, 190, 197, 56, 140, 62, 164, 178, 134, 62, 67, 21, 71, 63, 149, 105, 44, 190, 99, 66, 30, 63, 254, 106, 248, 61, 91, 9, 4, 63, 53, 167, 59, 62, 104, 120, 189, 61, 247, 200, 12, 190, 140, 254, 238, 190, 53, 130, 132, 190, 227, 31, 191, 190, 236, 60, 20, 62, 164, 189, 228, 190, 226, 70, 66, 62, 135, 34, 167, 190, 45, 27, 96, 189, 127, 137, 30, 62, 219, 20, 46, 62, 89, 70, 174, 61, 182, 238, 26, 190, 210, 15, 127, 62, 29, 8, 1, 189, 176, 101, 173, 189, 160, 79, 6, 189, 31, 112, 195, 190, 108, 52, 166, 62, 137, 206, 34, 62, 115, 91, 76, 189, 247, 215, 179, 61, 186, 198, 252, 61, 173, 197, 238, 62, 232, 70, 188, 190, 82, 244, 49, 61, 7, 116, 213, 61, 63, 99, 154, 190, 98, 245, 179, 189, 233, 92, 217, 60, 207, 87, 246, 189, 113, 159, 108, 62, 38, 33, 142, 190, 178, 191, 172, 187, 226, 152, 70, 190, 132, 177, 53, 62, 194, 100, 141, 189, 220, 149, 47, 190, 217, 195, 114, 61, 75, 61, 30, 190, 205, 147, 242, 61, 51, 109, 12, 191, 41, 76, 140, 62, 102, 95, 110, 61, 243, 26, 176, 61, 196, 76, 156, 62, 80, 92, 215, 59, 31, 245, 11, 62, 119, 199, 98, 62, 209, 41, 252, 189, 235, 17, 128, 61, 221, 227, 45, 190, 198, 10, 10, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 209, 223, 189, 66, 184, 243, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {102, 18, 180, 62, 66, 186, 226, 191, 136, 202, 135, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {208, 102, 44, 64, 82, 30, 43, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0070/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}