// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 134, 58, 190, 40, 157, 44, 62, 166, 101, 42, 61, 60, 157, 17, 62, 226, 220, 200, 190, 77, 44, 130, 190, 208, 112, 118, 190, 34, 182, 179, 190, 215, 185, 5, 63, 192, 64, 187, 188, 157, 60, 17, 63, 228, 20, 4, 62, 112, 41, 151, 61, 248, 39, 145, 190, 5, 246, 153, 62, 48, 214, 217, 62, 167, 63, 190, 62, 75, 74, 30, 191, 197, 40, 169, 189, 152, 126, 206, 60, 224, 33, 151, 189, 81, 26, 187, 62, 90, 204, 45, 62, 193, 99, 3, 191, 158, 113, 190, 189, 143, 218, 8, 61, 182, 210, 141, 190, 143, 194, 232, 62, 144, 248, 183, 61, 24, 57, 248, 62, 142, 128, 198, 62, 216, 114, 174, 190, 214, 104, 38, 190, 70, 127, 81, 190, 178, 62, 47, 63, 185, 163, 214, 62, 183, 79, 50, 63, 12, 11, 92, 190, 38, 223, 51, 63, 91, 155, 230, 188, 203, 213, 185, 62, 155, 194, 52, 62, 53, 195, 151, 62, 83, 229, 40, 62, 143, 222, 186, 190, 57, 20, 126, 62, 24, 124, 108, 190, 74, 109, 200, 62, 202, 197, 32, 191, 21, 240, 58, 63, 74, 149, 207, 60, 238, 202, 225, 190, 210, 33, 129, 62, 140, 115, 145, 190, 239, 24, 18, 63, 15, 50, 136, 61, 37, 141, 17, 63, 151, 101, 131, 60, 211, 105, 137, 191, 208, 22, 132, 62, 116, 156, 104, 62, 126, 236, 62, 191, 249, 50, 254, 62, 139, 162, 250, 61, 195, 142, 10, 191, 210, 81, 30, 189, 225, 122, 8, 191, 72, 239, 171, 62, 125, 106, 128, 62, 208, 189, 50, 189, 1, 252, 103, 63, 92, 173, 235, 190, 64, 80, 97, 62, 173, 200, 201, 190, 55, 95, 162, 61, 248, 170, 16, 191, 11, 128, 248, 190, 143, 103, 186, 62, 31, 93, 39, 62, 56, 56, 98, 63, 146, 158, 173, 190, 58, 196, 135, 59, 38, 84, 6, 63, 220, 250, 227, 190, 227, 127, 196, 190, 135, 185, 152, 190, 224, 224, 206, 62, 112, 40, 245, 190, 93, 176, 251, 62, 194, 245, 160, 190, 130, 193, 73, 188, 229, 44, 210, 190, 67, 188, 38, 190, 73, 229, 223, 59, 42, 191, 12, 62, 169, 205, 22, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 249, 20, 191, 200, 0, 185, 62, 223, 235, 33, 190, 38, 32, 39, 63, 84, 212, 74, 62, 193, 226, 230, 61, 184, 10, 3, 191, 79, 180, 246, 60, 44, 251, 215, 61, 206, 240, 213, 62, 61, 252, 184, 62, 241, 57, 149, 190, 187, 253, 216, 189, 189, 67, 15, 63, 209, 207, 246, 61, 111, 135, 148, 190, 113, 87, 196, 190, 133, 9, 37, 190, 238, 89, 82, 62, 58, 209, 176, 62, 1, 234, 232, 62, 174, 220, 131, 62, 180, 195, 40, 63, 179, 201, 230, 62, 147, 222, 163, 190, 251, 33, 90, 190, 212, 53, 5, 63, 162, 250, 5, 63, 215, 173, 160, 189, 16, 173, 50, 190, 45, 232, 50, 189, 102, 205, 192, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 57, 131, 60, 189, 35, 12, 62, 158, 22, 165, 189, 76, 58, 28, 59, 86, 158, 78, 189, 180, 155, 201, 189, 99, 21, 37, 60, 246, 28, 98, 189, 125, 113, 110, 189, 53, 55, 220, 60, 189, 24, 32, 190, 66, 45, 208, 61, 5, 59, 72, 61, 125, 65, 120, 189, 242, 245, 132, 189, 38, 95, 192, 61, 146, 81, 91, 190, 31, 173, 85, 190, 232, 16, 75, 190, 173, 219, 26, 62, 104, 189, 152, 61, 17, 69, 33, 62, 40, 127, 19, 190, 248, 3, 208, 61, 70, 177, 221, 189, 59, 106, 85, 61, 26, 60, 149, 184, 190, 186, 244, 61, 145, 149, 238, 189, 212, 74, 61, 190, 196, 32, 44, 190, 6, 201, 116, 188, 13, 162, 76, 61, 170, 208, 193, 188, 164, 92, 57, 190, 7, 74, 74, 190, 36, 81, 211, 189, 229, 14, 22, 190, 64, 104, 165, 189, 172, 207, 4, 190, 167, 3, 135, 189, 217, 157, 218, 61, 137, 103, 23, 60, 192, 205, 54, 188, 155, 192, 58, 190, 76, 34, 3, 62, 63, 187, 41, 62, 210, 175, 134, 60, 192, 140, 16, 61, 166, 203, 122, 189, 202, 172, 165, 61, 239, 208, 33, 190, 225, 249, 78, 189, 133, 40, 6, 190, 238, 61, 212, 189, 181, 58, 169, 189, 209, 64, 180, 189, 46, 211, 217, 59, 85, 29, 119, 61, 212, 122, 22, 190, 166, 43, 217, 188, 139, 182, 21, 62, 156, 76, 57, 61, 0, 75, 37, 190, 255, 67, 231, 61, 51, 148, 5, 61, 113, 90, 57, 61, 143, 167, 162, 190, 44, 24, 202, 188, 35, 112, 125, 62, 132, 221, 4, 62, 126, 192, 49, 61, 110, 41, 116, 61, 172, 91, 147, 189, 39, 79, 25, 62, 204, 197, 36, 190, 224, 216, 188, 189, 166, 15, 175, 190, 134, 204, 248, 61, 207, 187, 239, 61, 156, 143, 156, 188, 97, 72, 13, 190, 13, 246, 190, 60, 148, 199, 4, 62, 161, 174, 235, 61, 169, 249, 74, 62, 85, 76, 198, 190, 43, 199, 97, 60, 49, 119, 48, 188, 250, 83, 39, 62, 21, 144, 24, 190, 153, 97, 175, 61, 90, 77, 18, 189, 36, 140, 78, 188, 184, 112, 11, 62, 112, 196, 81, 189, 81, 35, 240, 189, 21, 108, 230, 186, 205, 218, 155, 61, 61, 148, 97, 189, 74, 53, 58, 62, 5, 253, 169, 62, 219, 27, 34, 62, 207, 137, 84, 61, 135, 149, 18, 189, 45, 234, 41, 62, 116, 143, 134, 62, 146, 8, 52, 189, 163, 138, 88, 190, 25, 165, 179, 189, 27, 50, 193, 61, 38, 19, 238, 190, 229, 216, 223, 61, 123, 111, 110, 190, 119, 121, 8, 62, 29, 67, 220, 62, 48, 102, 152, 62, 11, 58, 216, 62, 52, 40, 55, 190, 172, 136, 209, 189, 177, 245, 173, 61, 143, 249, 41, 62, 90, 220, 237, 61, 15, 133, 255, 61, 125, 25, 116, 61, 212, 226, 26, 190, 165, 205, 44, 62, 162, 52, 134, 60, 137, 60, 237, 61, 27, 237, 205, 61, 163, 75, 46, 62, 138, 243, 235, 189, 207, 175, 17, 62, 164, 112, 62, 189, 93, 75, 8, 190, 198, 100, 178, 61, 142, 50, 3, 61, 124, 184, 168, 61, 62, 28, 246, 59, 154, 186, 201, 61, 234, 129, 0, 191, 42, 216, 66, 190, 12, 91, 159, 189, 88, 60, 6, 191, 10, 30, 5, 189, 122, 114, 197, 61, 35, 16, 93, 190, 168, 35, 105, 62, 24, 211, 93, 62, 171, 49, 21, 62, 167, 23, 210, 61, 245, 243, 238, 189, 33, 234, 53, 190, 161, 101, 189, 61, 165, 16, 40, 190, 0, 218, 219, 60, 13, 69, 245, 61, 196, 112, 60, 61, 86, 40, 99, 188, 104, 24, 18, 190, 16, 194, 247, 60, 68, 116, 205, 189, 9, 93, 226, 60, 90, 130, 29, 190, 178, 201, 241, 188, 221, 161, 206, 188, 209, 91, 193, 188, 103, 213, 110, 188, 180, 85, 80, 60, 12, 111, 43, 62, 146, 97, 50, 190, 79, 49, 26, 188, 91, 118, 10, 190, 218, 239, 64, 61, 218, 77, 136, 61, 144, 145, 106, 189, 207, 107, 1, 190, 53, 87, 82, 189, 77, 130, 121, 189, 79, 0, 179, 61, 37, 172, 7, 189, 243, 63, 21, 62, 147, 237, 248, 189, 123, 180, 233, 187, 133, 200, 114, 188, 221, 126, 25, 190, 34, 33, 175, 61, 221, 182, 76, 60, 64, 247, 52, 188, 215, 218, 183, 188, 81, 64, 29, 61, 82, 250, 27, 60, 248, 177, 185, 61, 249, 126, 253, 61, 202, 139, 204, 61, 96, 79, 152, 61, 99, 37, 227, 60, 118, 163, 175, 61, 138, 244, 145, 61, 61, 171, 171, 188, 111, 42, 143, 189, 212, 76, 67, 62, 56, 206, 242, 61, 107, 51, 244, 188, 102, 126, 206, 190, 44, 227, 45, 62, 164, 89, 126, 190, 145, 163, 252, 190, 51, 139, 245, 61, 169, 244, 182, 190, 161, 64, 34, 190, 196, 100, 134, 62, 170, 22, 97, 62, 114, 63, 158, 62, 72, 244, 80, 62, 97, 42, 45, 190, 249, 244, 103, 61, 229, 197, 46, 62, 235, 84, 213, 190, 103, 98, 152, 190, 253, 171, 77, 62, 234, 217, 107, 190, 173, 246, 48, 61, 192, 210, 26, 190, 152, 27, 8, 62, 7, 178, 85, 190, 181, 27, 171, 189, 249, 211, 20, 61, 214, 224, 84, 61, 91, 119, 46, 190, 31, 131, 27, 62, 150, 138, 131, 61, 94, 63, 78, 59, 88, 213, 204, 61, 19, 62, 140, 189, 105, 12, 140, 189, 217, 76, 161, 190, 94, 194, 67, 188, 61, 72, 186, 189, 49, 14, 230, 189, 188, 50, 203, 187, 54, 85, 55, 190, 217, 131, 5, 190, 46, 8, 216, 189, 31, 64, 223, 189, 38, 94, 31, 190, 230, 154, 216, 61, 188, 159, 86, 61, 193, 190, 250, 189, 65, 114, 41, 190, 18, 0, 143, 189, 152, 187, 201, 61, 72, 170, 54, 188, 137, 214, 112, 189, 131, 158, 177, 189, 15, 149, 35, 190, 75, 178, 147, 188, 129, 89, 224, 60, 37, 20, 253, 61, 147, 245, 118, 61, 129, 171, 10, 62, 156, 2, 153, 61, 211, 98, 133, 189, 29, 35, 200, 59, 82, 201, 180, 189, 220, 132, 67, 61, 3, 15, 19, 62, 202, 92, 55, 190, 42, 24, 70, 190, 165, 195, 7, 62, 64, 131, 219, 58, 184, 216, 109, 190, 186, 17, 180, 190, 217, 96, 181, 189, 203, 71, 78, 190, 163, 92, 227, 62, 207, 197, 215, 188, 42, 190, 147, 62, 183, 107, 62, 62, 175, 31, 213, 190, 228, 249, 195, 189, 232, 77, 41, 62, 149, 84, 244, 190, 106, 222, 253, 189, 12, 95, 118, 62, 203, 2, 130, 190, 112, 198, 42, 62, 245, 3, 138, 189, 3, 179, 143, 189, 44, 144, 33, 189, 195, 191, 190, 189, 103, 160, 123, 190, 105, 119, 195, 189, 234, 232, 35, 62, 113, 82, 38, 190, 162, 174, 185, 187, 221, 214, 53, 61, 212, 183, 36, 190, 227, 240, 194, 62, 44, 174, 53, 190, 107, 89, 166, 61, 42, 143, 37, 189, 252, 163, 157, 62, 172, 182, 162, 189, 217, 57, 240, 189, 119, 1, 222, 189, 96, 218, 9, 55, 240, 7, 164, 61, 14, 239, 179, 189, 224, 58, 164, 188, 114, 38, 76, 61, 191, 3, 172, 61, 226, 18, 0, 190, 66, 56, 137, 188, 201, 0, 49, 189, 121, 215, 240, 61, 197, 197, 241, 189, 14, 67, 11, 61, 179, 142, 144, 189, 125, 162, 110, 60, 214, 187, 6, 190, 70, 100, 174, 61, 226, 79, 29, 61, 157, 77, 20, 189, 18, 208, 83, 190, 69, 5, 123, 61, 47, 137, 23, 190, 122, 170, 108, 62, 243, 118, 131, 189, 246, 195, 59, 190, 219, 8, 32, 62, 176, 219, 0, 190, 154, 20, 145, 187, 22, 240, 244, 188, 85, 19, 1, 62, 125, 60, 39, 188, 212, 216, 142, 62, 59, 196, 176, 61, 55, 59, 36, 188, 31, 116, 18, 61, 125, 29, 154, 189, 245, 104, 68, 61, 158, 225, 141, 190, 200, 39, 218, 189, 47, 79, 159, 61, 228, 132, 80, 190, 111, 240, 255, 61, 62, 209, 254, 188, 72, 24, 131, 61, 231, 126, 114, 60, 244, 43, 1, 61, 86, 191, 30, 61, 77, 195, 131, 61, 86, 226, 90, 60, 21, 171, 62, 60, 205, 229, 176, 61, 122, 91, 191, 189, 215, 46, 20, 62, 125, 138, 19, 62, 111, 91, 208, 189, 16, 29, 234, 61, 39, 54, 246, 60, 17, 193, 218, 62, 139, 10, 155, 61, 29, 95, 49, 190, 231, 23, 227, 61, 144, 90, 28, 62, 71, 158, 160, 190, 197, 197, 49, 62, 201, 18, 44, 190, 116, 227, 42, 62, 176, 165, 28, 190, 235, 255, 176, 189, 146, 240, 24, 189, 177, 153, 14, 62, 143, 90, 59, 60, 155, 187, 19, 190, 54, 7, 167, 190, 253, 180, 214, 61, 177, 99, 52, 62, 175, 57, 239, 189, 164, 143, 56, 62, 85, 197, 81, 62, 164, 66, 200, 61, 7, 165, 71, 189, 145, 53, 172, 189, 183, 129, 40, 190, 204, 48, 79, 62, 156, 123, 221, 58, 131, 31, 254, 189, 49, 146, 241, 189, 12, 126, 137, 190, 29, 214, 189, 61, 97, 100, 18, 61, 202, 96, 17, 190, 57, 97, 89, 62, 180, 180, 55, 62, 166, 102, 138, 61, 178, 207, 114, 190, 151, 119, 188, 188, 36, 165, 116, 62, 119, 133, 2, 62, 171, 7, 116, 189, 109, 41, 180, 190, 133, 51, 87, 190, 200, 175, 56, 61, 8, 77, 121, 62, 98, 196, 141, 62, 145, 200, 229, 61, 26, 254, 96, 190, 36, 157, 172, 62, 137, 19, 27, 62, 241, 188, 2, 190, 148, 223, 140, 62, 114, 66, 203, 61, 242, 102, 169, 188, 150, 230, 29, 58, 126, 230, 152, 189, 53, 101, 226, 61, 116, 236, 161, 62, 235, 158, 107, 188, 120, 94, 72, 188, 230, 173, 136, 188, 156, 245, 99, 190, 236, 50, 105, 62, 9, 66, 183, 61, 126, 124, 68, 188, 68, 96, 13, 61, 86, 192, 94, 61, 167, 128, 3, 62, 59, 53, 190, 187, 226, 6, 15, 190, 245, 197, 190, 62, 57, 255, 20, 62, 32, 155, 10, 62, 143, 156, 37, 190, 116, 151, 181, 61, 34, 158, 235, 189, 199, 71, 113, 62, 126, 85, 219, 61, 54, 5, 80, 189, 52, 202, 112, 190, 44, 227, 158, 62, 162, 213, 59, 62, 69, 30, 185, 188, 175, 228, 91, 61, 67, 89, 243, 188, 228, 102, 10, 189, 52, 243, 120, 61, 114, 151, 209, 60, 103, 23, 247, 189, 198, 233, 91, 60, 143, 226, 228, 189, 198, 18, 113, 189, 51, 148, 34, 189, 4, 36, 123, 61, 187, 222, 114, 61, 152, 205, 242, 189, 16, 112, 231, 61, 173, 2, 243, 61, 204, 87, 94, 188, 208, 74, 126, 189, 54, 159, 184, 60, 171, 6, 42, 62, 248, 12, 55, 60, 49, 250, 101, 189, 112, 43, 156, 189, 205, 145, 200, 60, 183, 35, 11, 190, 40, 45, 51, 190, 94, 88, 83, 187, 183, 38, 88, 189, 252, 117, 231, 61, 207, 194, 190, 189, 106, 214, 65, 189, 81, 108, 212, 61, 180, 54, 153, 189, 211, 131, 59, 190, 153, 43, 245, 189, 28, 117, 55, 189, 198, 15, 226, 189, 191, 168, 183, 189, 200, 219, 14, 188, 240, 4, 52, 190, 237, 117, 216, 188, 193, 171, 16, 189, 52, 19, 2, 188, 137, 42, 19, 190, 179, 14, 214, 60, 100, 99, 95, 61, 132, 203, 16, 190, 37, 18, 90, 61, 79, 171, 34, 189, 197, 106, 7, 61, 84, 35, 8, 190, 33, 232, 78, 60, 93, 149, 238, 61, 60, 231, 7, 189, 128, 27, 193, 189, 160, 225, 241, 189, 157, 199, 36, 190, 151, 153, 14, 62, 239, 211, 147, 188, 125, 30, 117, 61, 130, 171, 141, 189, 69, 49, 12, 190, 84, 45, 134, 189, 10, 146, 40, 190, 66, 184, 22, 62, 222, 207, 21, 189, 121, 118, 225, 61, 140, 61, 0, 62, 208, 94, 224, 60, 141, 223, 212, 61, 33, 18, 221, 61, 99, 168, 99, 62, 249, 195, 237, 61, 121, 137, 99, 190, 223, 0, 9, 61, 108, 242, 98, 190, 193, 87, 12, 61, 171, 171, 38, 62, 193, 23, 99, 189, 155, 25, 44, 62, 183, 194, 190, 62, 123, 93, 211, 61, 242, 141, 1, 190, 251, 134, 86, 62, 243, 124, 150, 62, 170, 46, 41, 62, 142, 213, 145, 62, 197, 31, 146, 190, 75, 5, 31, 190, 67, 75, 29, 61, 210, 235, 195, 61, 75, 183, 130, 62, 195, 33, 6, 62, 245, 130, 137, 190, 107, 175, 141, 62, 242, 53, 113, 62, 179, 164, 58, 190, 175, 2, 61, 60, 20, 161, 130, 61, 213, 236, 64, 188, 216, 90, 255, 61, 98, 148, 222, 188, 97, 0, 1, 190, 193, 134, 18, 60, 153, 51, 186, 189, 70, 117, 75, 62, 116, 30, 241, 60, 79, 44, 0, 62, 254, 255, 16, 62, 34, 122, 174, 61, 79, 49, 177, 61, 233, 214, 144, 189, 163, 246, 102, 190, 104, 117, 131, 189, 178, 189, 134, 62, 164, 14, 211, 189, 216, 57, 69, 62, 19, 20, 172, 61, 195, 186, 134, 61, 110, 178, 16, 190, 91, 138, 104, 58, 217, 185, 99, 190, 242, 180, 193, 188, 62, 232, 187, 60, 101, 234, 53, 60, 56, 220, 182, 189, 72, 39, 177, 189, 209, 168, 229, 189, 75, 179, 226, 189, 25, 208, 139, 188, 166, 112, 154, 189, 184, 217, 249, 61, 1, 207, 110, 60, 62, 234, 241, 189, 218, 72, 165, 188, 251, 70, 131, 62, 252, 175, 3, 60, 85, 51, 164, 190, 210, 64, 188, 188, 236, 90, 85, 189, 26, 86, 112, 61, 23, 101, 135, 62, 251, 27, 151, 61, 141, 210, 118, 62, 54, 88, 90, 62, 231, 96, 6, 62, 227, 37, 215, 189, 62, 220, 55, 189, 91, 43, 102, 62, 20, 109, 147, 61, 79, 125, 127, 61, 145, 40, 20, 190, 73, 105, 209, 189, 98, 230, 251, 188, 58, 55, 160, 187, 134, 39, 169, 60, 208, 179, 36, 62, 231, 160, 210, 60, 188, 173, 28, 62, 196, 11, 216, 60, 84, 142, 239, 188, 94, 131, 203, 61, 17, 66, 89, 62, 76, 57, 27, 62, 31, 78, 47, 62, 206, 54, 146, 61, 226, 167, 168, 60, 140, 171, 250, 61, 242, 230, 33, 62, 70, 111, 88, 61, 236, 29, 19, 189, 30, 69, 20, 190, 72, 187, 147, 189, 167, 233, 234, 188, 122, 198, 23, 190, 132, 84, 208, 61, 248, 164, 40, 190, 107, 192, 146, 188, 248, 22, 34, 62, 234, 232, 141, 61, 118, 112, 129, 188, 242, 26, 54, 189, 30, 129, 8, 190, 244, 125, 6, 190, 138, 7, 93, 189, 53, 240, 13, 62, 253, 54, 32, 190, 108, 53, 0, 190, 40, 211, 137, 59, 1, 136, 120, 189, 188, 107, 17, 190, 23, 199, 222, 60, 54, 44, 199, 189, 140, 246, 44, 190, 50, 229, 156, 61, 117, 133, 17, 190, 155, 198, 187, 189, 222, 52, 132, 62, 231, 64, 6, 190, 38, 153, 13, 62, 244, 35, 156, 61, 149, 92, 109, 61, 32, 74, 24, 62, 235, 204, 14, 62, 219, 40, 219, 189, 68, 96, 224, 61, 14, 153, 98, 62, 168, 238, 158, 190, 131, 245, 61, 190, 66, 139, 23, 190, 75, 164, 90, 62, 46, 156, 132, 189, 164, 55, 101, 61, 129, 5, 89, 61, 212, 139, 147, 61, 26, 142, 120, 61, 1, 218, 65, 62, 41, 235, 188, 62, 56, 219, 69, 190, 222, 11, 44, 188, 212, 67, 243, 187, 36, 139, 194, 190, 163, 207, 59, 62, 71, 40, 57, 62, 47, 236, 152, 190, 38, 162, 228, 188, 77, 40, 32, 189, 33, 126, 6, 61, 249, 166, 184, 59, 174, 50, 253, 188, 170, 56, 2, 189, 11, 249, 24, 187, 230, 244, 238, 60, 186, 77, 134, 62, 221, 213, 39, 62, 79, 45, 125, 62, 248, 132, 68, 189, 68, 191, 148, 187, 100, 143, 128, 189, 208, 98, 55, 61, 135, 171, 144, 189, 119, 241, 191, 187, 76, 121, 155, 186, 128, 103, 198, 61, 35, 104, 31, 62, 102, 230, 5, 62, 116, 194, 216, 59, 166, 99, 152, 189, 29, 13, 249, 189, 41, 105, 27, 62, 152, 3, 70, 190, 227, 74, 43, 62, 44, 216, 173, 61, 84, 188, 25, 190, 65, 68, 179, 61, 139, 120, 39, 189, 45, 102, 28, 189, 239, 124, 182, 61, 95, 109, 222, 189, 71, 228, 128, 188, 229, 211, 194, 189, 91, 235, 2, 190, 184, 33, 133, 189, 138, 194, 120, 190, 36, 31, 36, 189, 234, 53, 10, 60, 159, 34, 194, 189, 192, 229, 148, 189, 176, 27, 167, 189, 6, 243, 126, 61, 111, 20, 159, 61, 214, 90, 64, 190, 83, 167, 222, 61, 88, 116, 197, 61, 139, 76, 65, 189, 88, 170, 246, 58, 184, 153, 83, 190, 211, 168, 55, 190, 138, 227, 220, 61, 206, 175, 60, 190, 227, 176, 183, 61, 249, 94, 181, 189, 119, 106, 184, 188, 90, 147, 191, 60, 80, 190, 28, 190, 19, 161, 30, 190, 155, 85, 82, 189, 18, 5, 77, 189, 21, 212, 140, 187, 70, 83, 19, 188, 42, 150, 53, 61, 235, 242, 101, 189, 105, 183, 145, 189, 229, 113, 246, 189, 129, 219, 175, 189, 5, 249, 242, 186, 248, 166, 12, 61, 64, 191, 29, 190, 181, 192, 55, 189, 58, 60, 17, 62, 203, 43, 163, 61, 254, 27, 86, 61, 217, 242, 190, 61, 213, 217, 122, 189, 90, 146, 150, 60, 8, 185, 99, 61, 100, 103, 185, 189, 187, 122, 175, 189, 134, 140, 99, 61, 54, 82, 94, 189, 207, 175, 194, 60, 12, 194, 169, 189, 10, 3, 4, 190, 227, 132, 140, 61, 45, 15, 128, 189, 73, 79, 130, 189, 84, 2, 10, 190, 10, 175, 32, 61, 234, 230, 36, 189, 208, 236, 136, 61, 189, 53, 2, 61, 107, 166, 9, 190, 114, 65, 218, 61, 255, 15, 47, 190, 72, 66, 246, 59, 97, 34, 19, 62, 124, 237, 61, 190, 238, 246, 104, 60, 107, 245, 154, 189, 22, 67, 136, 62, 43, 151, 167, 188, 77, 137, 177, 62, 96, 87, 199, 60, 151, 55, 188, 188, 235, 84, 158, 62, 53, 39, 24, 61, 104, 90, 90, 190, 42, 169, 148, 58, 255, 153, 60, 62, 204, 34, 54, 190, 50, 137, 163, 62, 175, 89, 56, 61, 242, 221, 8, 190, 41, 58, 46, 61, 198, 81, 128, 60, 182, 156, 115, 189, 141, 91, 154, 190, 40, 197, 182, 61, 230, 65, 28, 62, 12, 135, 114, 61, 24, 143, 117, 60, 203, 207, 17, 189, 232, 26, 202, 61, 212, 232, 188, 189, 168, 176, 81, 62, 151, 146, 144, 61, 59, 16, 225, 61, 203, 167, 171, 59, 237, 83, 244, 60, 141, 22, 182, 189, 84, 236, 5, 190, 167, 63, 161, 189, 230, 231, 142, 189, 24, 241, 99, 189, 168, 72, 242, 189, 56, 172, 244, 189, 127, 163, 165, 189, 189, 229, 177, 61, 117, 105, 162, 61, 166, 251, 137, 189, 65, 227, 108, 189, 35, 76, 233, 61, 104, 162, 67, 61, 211, 105, 30, 190, 5, 61, 213, 61, 166, 215, 23, 190, 123, 251, 24, 62, 67, 153, 194, 188, 146, 190, 215, 189, 174, 179, 202, 61, 107, 254, 2, 62, 196, 79, 96, 61, 154, 0, 177, 61, 141, 165, 18, 62, 210, 242, 249, 189, 126, 200, 12, 62, 162, 173, 112, 61, 152, 232, 108, 189, 66, 169, 79, 61, 66, 185, 215, 60, 169, 10, 127, 189, 240, 147, 83, 60, 195, 237, 41, 189, 185, 174, 103, 189, 40, 183, 71, 61, 53, 85, 76, 189, 26, 222, 33, 190, 125, 5, 22, 190, 176, 251, 44, 190, 13, 87, 29, 190, 150, 25, 167, 189, 194, 61, 247, 61, 73, 27, 64, 189, 84, 85, 34, 62, 16, 129, 75, 60, 55, 163, 37, 62, 183, 46, 27, 62, 253, 205, 202, 60, 113, 214, 80, 189, 16, 14, 196, 61, 21, 219, 180, 189, 45, 194, 133, 60, 88, 107, 135, 61, 57, 137, 217, 61, 65, 192, 2, 62, 154, 81, 43, 189, 148, 97, 211, 189, 64, 252, 51, 190, 68, 202, 52, 190, 189, 224, 76, 61, 79, 225, 210, 61, 223, 126, 76, 190, 179, 185, 48, 62, 242, 216, 121, 188, 30, 16, 161, 189, 114, 32, 9, 62, 251, 107, 26, 62, 84, 178, 197, 189, 94, 247, 55, 61, 247, 197, 218, 61, 196, 74, 105, 189, 156, 11, 199, 188, 67, 150, 177, 61, 49, 60, 40, 59, 121, 64, 236, 188, 98, 62, 81, 62, 71, 228, 125, 190, 18, 237, 91, 190, 224, 174, 119, 61, 12, 4, 27, 189, 148, 124, 91, 61, 20, 154, 238, 61, 9, 117, 66, 61, 100, 232, 181, 189, 254, 124, 253, 189, 205, 100, 132, 189, 18, 26, 27, 190, 96, 253, 249, 189, 209, 246, 39, 61, 152, 234, 144, 61, 88, 112, 113, 190, 212, 122, 31, 190, 135, 20, 185, 188, 6, 72, 45, 188, 147, 110, 185, 188, 216, 137, 181, 188, 106, 60, 4, 190, 214, 7, 95, 189, 247, 68, 146, 61, 104, 64, 163, 187, 126, 111, 245, 189, 71, 206, 175, 188, 213, 82, 161, 60, 88, 255, 153, 189, 94, 82, 187, 61, 41, 97, 198, 189, 208, 137, 230, 189, 195, 168, 10, 190, 93, 223, 148, 189, 224, 80, 63, 61, 212, 7, 191, 189, 52, 98, 236, 61, 49, 228, 96, 190, 237, 196, 26, 188, 198, 0, 104, 61, 30, 232, 11, 61, 196, 222, 68, 190, 150, 155, 60, 190, 32, 30, 22, 190, 181, 143, 53, 59, 48, 33, 113, 189, 236, 100, 188, 189, 205, 83, 205, 61, 74, 98, 160, 189, 145, 178, 140, 189, 59, 64, 13, 189, 168, 246, 55, 62, 164, 120, 253, 189, 161, 90, 238, 61, 40, 72, 101, 189, 61, 159, 4, 62, 213, 167, 5, 62, 214, 167, 225, 61, 238, 153, 64, 62, 117, 169, 3, 62, 106, 158, 185, 189, 203, 252, 220, 190, 162, 224, 21, 187, 211, 140, 143, 60, 119, 106, 181, 190, 135, 67, 5, 190, 182, 122, 50, 190, 94, 7, 121, 61, 87, 21, 104, 189, 76, 15, 102, 62, 75, 47, 213, 185, 59, 193, 251, 61, 90, 79, 140, 189, 145, 129, 93, 61, 250, 199, 50, 61, 230, 251, 172, 189, 249, 195, 36, 62, 146, 57, 184, 189, 243, 9, 220, 61, 79, 77, 14, 188, 98, 112, 73, 62, 101, 30, 19, 62, 244, 165, 68, 189, 225, 119, 162, 189, 43, 76, 208, 189, 53, 13, 11, 190, 108, 208, 34, 189, 17, 198, 57, 190, 51, 144, 60, 62, 109, 76, 75, 62, 201, 98, 156, 189, 22, 142, 74, 62, 28, 151, 64, 62, 34, 79, 65, 190, 123, 77, 184, 189, 12, 166, 36, 189, 110, 68, 22, 190, 125, 99, 75, 189, 158, 12, 159, 61, 80, 179, 131, 189, 108, 233, 42, 190, 148, 136, 7, 190, 32, 237, 183, 188, 163, 141, 76, 189, 99, 164, 175, 61, 30, 235, 233, 189, 123, 33, 150, 190, 189, 173, 153, 61, 126, 170, 15, 189, 23, 62, 24, 62, 85, 200, 25, 62, 77, 49, 79, 62, 218, 107, 49, 62, 84, 128, 127, 189, 60, 196, 5, 190, 55, 75, 138, 189, 185, 86, 182, 61, 43, 228, 47, 61, 248, 158, 14, 62, 107, 4, 164, 61, 89, 158, 4, 60, 17, 86, 40, 190, 39, 141, 237, 61, 115, 86, 44, 190, 46, 83, 91, 190, 151, 103, 127, 61, 183, 250, 202, 61, 184, 148, 87, 190, 161, 22, 210, 61, 33, 92, 5, 62, 157, 79, 241, 189, 126, 21, 74, 189, 224, 240, 206, 61, 252, 21, 12, 190, 209, 177, 251, 189, 80, 162, 187, 61, 241, 22, 90, 189, 74, 8, 128, 61, 204, 28, 163, 189, 25, 195, 26, 190, 0, 186, 237, 61, 74, 119, 221, 188, 201, 93, 89, 189, 134, 97, 3, 61, 157, 138, 1, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {89, 135, 148, 61, 164, 26, 183, 61, 90, 151, 163, 189, 223, 206, 40, 62, 223, 24, 250, 188, 100, 133, 174, 189, 236, 253, 184, 186, 86, 237, 23, 190, 193, 70, 127, 62, 217, 22, 22, 61, 28, 241, 116, 61, 90, 253, 98, 189, 156, 58, 148, 61, 129, 125, 29, 61, 172, 243, 30, 189, 152, 23, 199, 188, 237, 27, 73, 62, 140, 222, 53, 61, 71, 219, 47, 60, 73, 76, 224, 60, 79, 177, 70, 61, 149, 79, 232, 189, 108, 41, 201, 189, 89, 50, 208, 59, 165, 140, 124, 189, 120, 163, 56, 190, 77, 213, 234, 189, 74, 183, 69, 190, 163, 25, 195, 61, 3, 137, 217, 189, 117, 175, 18, 60, 127, 197, 81, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 10, 45, 189, 167, 59, 30, 190, 102, 67, 61, 62, 220, 168, 134, 62, 231, 141, 82, 62, 149, 105, 44, 190, 67, 192, 182, 62, 13, 115, 248, 61, 229, 176, 132, 62, 191, 151, 14, 62, 154, 91, 154, 61, 254, 131, 144, 189, 93, 17, 170, 190, 87, 239, 91, 190, 163, 139, 254, 188, 62, 137, 20, 62, 183, 252, 183, 190, 167, 240, 51, 62, 44, 78, 105, 190, 45, 27, 96, 189, 10, 203, 11, 62, 92, 246, 224, 61, 227, 145, 175, 61, 182, 238, 26, 190, 4, 46, 85, 62, 80, 94, 4, 189, 176, 101, 173, 189, 68, 137, 166, 189, 204, 119, 3, 190, 182, 126, 51, 61, 226, 242, 209, 61, 182, 148, 141, 189, 246, 30, 237, 61, 186, 198, 252, 61, 207, 121, 148, 62, 210, 232, 197, 190, 83, 253, 19, 190, 7, 116, 213, 61, 254, 21, 91, 190, 172, 229, 179, 189, 14, 104, 19, 61, 101, 16, 211, 189, 188, 203, 61, 62, 24, 93, 137, 190, 39, 123, 152, 189, 154, 181, 12, 190, 92, 153, 10, 188, 15, 168, 141, 189, 110, 130, 214, 189, 131, 216, 245, 60, 223, 143, 231, 189, 205, 147, 242, 61, 171, 4, 240, 190, 221, 189, 69, 62, 74, 196, 109, 61, 243, 26, 176, 61, 105, 215, 133, 62, 221, 157, 214, 59, 31, 245, 11, 62, 158, 252, 15, 62, 60, 88, 26, 189, 77, 120, 59, 189, 233, 14, 15, 190, 192, 189, 4, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {54, 117, 46, 189, 118, 112, 180, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {123, 52, 144, 191, 80, 94, 20, 192, 61, 158, 102, 60};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {211, 100, 79, 64, 89, 150, 210, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0070/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}