// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 134, 58, 190, 40, 157, 44, 62, 166, 101, 42, 61, 68, 102, 236, 62, 107, 133, 52, 191, 12, 114, 140, 190, 217, 127, 85, 190, 102, 149, 40, 63, 243, 203, 49, 63, 10, 159, 53, 189, 52, 237, 143, 63, 25, 232, 179, 61, 236, 146, 232, 62, 99, 58, 47, 63, 83, 3, 163, 62, 186, 103, 129, 62, 166, 35, 154, 62, 169, 180, 46, 191, 231, 241, 77, 189, 22, 203, 155, 60, 69, 68, 96, 189, 34, 71, 51, 62, 77, 128, 155, 60, 211, 103, 17, 191, 233, 53, 226, 190, 3, 135, 158, 191, 248, 149, 151, 190, 186, 186, 104, 63, 185, 148, 173, 62, 64, 81, 49, 62, 143, 137, 8, 63, 153, 111, 107, 191, 208, 232, 153, 190, 227, 212, 29, 63, 108, 136, 166, 63, 99, 222, 210, 62, 11, 49, 18, 63, 89, 66, 129, 190, 2, 45, 68, 63, 211, 35, 22, 190, 203, 53, 139, 63, 255, 98, 143, 61, 173, 165, 148, 62, 221, 53, 27, 190, 137, 63, 175, 190, 145, 217, 122, 62, 111, 15, 249, 190, 102, 199, 222, 62, 172, 156, 166, 191, 78, 131, 85, 62, 132, 88, 11, 190, 136, 41, 29, 191, 40, 66, 166, 191, 29, 250, 138, 190, 76, 177, 47, 63, 122, 30, 1, 63, 102, 26, 23, 63, 220, 90, 112, 61, 119, 53, 132, 191, 239, 24, 141, 62, 212, 121, 251, 62, 245, 157, 41, 191, 96, 183, 253, 62, 249, 185, 185, 190, 116, 249, 38, 191, 236, 241, 177, 189, 103, 154, 238, 190, 20, 119, 62, 63, 70, 243, 70, 62, 143, 246, 113, 62, 89, 159, 90, 63, 25, 87, 36, 191, 77, 25, 236, 62, 79, 72, 151, 191, 169, 205, 7, 190, 5, 150, 66, 191, 155, 90, 134, 61, 146, 16, 6, 63, 206, 131, 215, 62, 220, 112, 103, 63, 73, 213, 232, 190, 194, 173, 222, 62, 255, 49, 33, 62, 90, 98, 23, 191, 115, 43, 185, 190, 208, 174, 189, 62, 213, 181, 6, 63, 255, 138, 37, 190, 88, 126, 143, 191, 236, 8, 67, 190, 51, 170, 0, 191, 27, 119, 193, 191, 197, 106, 160, 190, 214, 209, 163, 190, 125, 195, 146, 191, 191, 214, 195, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 249, 20, 191, 72, 12, 156, 62, 220, 201, 118, 190, 230, 233, 44, 63, 123, 176, 194, 188, 99, 49, 46, 62, 129, 193, 11, 191, 16, 11, 84, 61, 84, 216, 134, 189, 85, 228, 62, 63, 241, 90, 44, 62, 39, 144, 25, 191, 12, 188, 225, 61, 232, 199, 47, 63, 62, 243, 133, 62, 89, 143, 140, 61, 84, 155, 41, 190, 19, 34, 229, 189, 163, 243, 136, 62, 99, 147, 236, 62, 57, 133, 23, 63, 107, 133, 13, 63, 142, 66, 90, 63, 240, 237, 73, 61, 166, 203, 189, 189, 2, 240, 160, 190, 241, 210, 128, 62, 161, 39, 116, 62, 146, 219, 162, 190, 156, 138, 124, 190, 23, 239, 247, 189, 139, 96, 139, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 57, 131, 60, 56, 161, 223, 189, 78, 173, 198, 61, 8, 50, 161, 62, 226, 185, 181, 189, 30, 86, 200, 190, 99, 21, 37, 60, 178, 247, 16, 191, 182, 14, 193, 190, 242, 106, 249, 190, 84, 110, 28, 191, 86, 85, 215, 190, 167, 100, 226, 190, 230, 169, 155, 62, 89, 153, 55, 191, 204, 0, 5, 190, 29, 128, 8, 63, 154, 202, 71, 191, 191, 238, 36, 191, 79, 239, 104, 189, 63, 97, 23, 190, 25, 21, 242, 62, 204, 16, 142, 62, 89, 185, 120, 58, 234, 181, 243, 190, 216, 177, 225, 62, 23, 175, 16, 61, 188, 177, 190, 190, 1, 128, 255, 61, 60, 2, 250, 190, 151, 14, 12, 190, 212, 149, 28, 191, 13, 162, 76, 61, 170, 208, 193, 188, 164, 92, 57, 190, 7, 74, 74, 190, 36, 81, 211, 189, 229, 14, 22, 190, 64, 104, 165, 189, 172, 207, 4, 190, 167, 3, 135, 189, 217, 157, 218, 61, 137, 103, 23, 60, 192, 205, 54, 188, 155, 192, 58, 190, 76, 34, 3, 62, 63, 187, 41, 62, 210, 175, 134, 60, 192, 140, 16, 61, 166, 203, 122, 189, 202, 172, 165, 61, 239, 208, 33, 190, 225, 249, 78, 189, 133, 40, 6, 190, 238, 61, 212, 189, 181, 58, 169, 189, 209, 64, 180, 189, 46, 211, 217, 59, 85, 29, 119, 61, 212, 122, 22, 190, 166, 43, 217, 188, 139, 182, 21, 62, 156, 76, 57, 61, 0, 75, 37, 190, 255, 67, 231, 61, 23, 29, 159, 62, 35, 19, 20, 190, 56, 153, 19, 191, 190, 155, 113, 190, 202, 103, 152, 62, 95, 189, 197, 61, 206, 133, 151, 61, 217, 206, 210, 57, 162, 11, 153, 61, 121, 4, 9, 63, 17, 60, 197, 191, 87, 162, 155, 189, 103, 134, 13, 191, 118, 129, 98, 62, 228, 50, 62, 62, 72, 69, 29, 191, 114, 147, 206, 190, 91, 12, 93, 61, 42, 43, 171, 62, 154, 130, 84, 62, 223, 139, 39, 63, 28, 174, 5, 191, 24, 125, 182, 61, 115, 95, 253, 62, 98, 85, 24, 62, 21, 173, 57, 189, 188, 223, 89, 62, 54, 119, 64, 190, 14, 85, 43, 190, 56, 121, 166, 61, 225, 116, 87, 189, 81, 35, 240, 189, 3, 203, 5, 189, 48, 36, 37, 62, 212, 33, 163, 190, 23, 183, 15, 62, 78, 252, 174, 62, 224, 189, 1, 62, 82, 63, 109, 61, 195, 223, 42, 190, 157, 181, 190, 61, 147, 45, 166, 62, 245, 197, 47, 191, 250, 176, 107, 190, 220, 118, 179, 190, 53, 13, 164, 61, 179, 28, 239, 190, 51, 114, 178, 190, 59, 255, 145, 190, 34, 171, 196, 61, 5, 107, 224, 62, 44, 83, 162, 62, 7, 60, 3, 63, 180, 250, 132, 190, 230, 54, 153, 189, 55, 37, 255, 61, 86, 125, 156, 62, 147, 59, 160, 61, 104, 254, 219, 61, 11, 232, 24, 62, 245, 145, 45, 190, 120, 226, 17, 189, 70, 74, 109, 189, 137, 60, 237, 61, 198, 90, 102, 191, 80, 245, 197, 62, 164, 168, 202, 61, 34, 48, 130, 62, 125, 133, 104, 62, 93, 75, 8, 190, 124, 133, 132, 62, 74, 204, 198, 191, 109, 131, 27, 190, 245, 21, 136, 191, 24, 227, 55, 190, 2, 245, 33, 191, 46, 141, 162, 60, 140, 42, 243, 61, 198, 75, 34, 191, 250, 80, 164, 190, 163, 59, 120, 191, 125, 5, 191, 190, 171, 28, 127, 62, 49, 134, 145, 62, 216, 1, 55, 189, 246, 237, 180, 62, 132, 36, 123, 59, 126, 62, 80, 191, 75, 90, 174, 62, 16, 16, 107, 189, 242, 117, 72, 190, 163, 215, 173, 62, 205, 89, 142, 190, 148, 57, 159, 191, 87, 90, 63, 191, 16, 194, 247, 60, 36, 214, 213, 189, 9, 93, 226, 60, 165, 129, 40, 190, 178, 201, 241, 188, 170, 225, 45, 189, 209, 91, 193, 188, 173, 204, 214, 188, 180, 85, 80, 60, 118, 201, 36, 62, 25, 3, 52, 190, 172, 84, 31, 188, 91, 118, 10, 190, 25, 148, 23, 61, 60, 212, 104, 61, 144, 145, 106, 189, 207, 107, 1, 190, 53, 87, 82, 189, 77, 130, 121, 189, 79, 0, 179, 61, 37, 172, 7, 189, 243, 63, 21, 62, 28, 72, 252, 189, 162, 73, 221, 188, 133, 200, 114, 188, 221, 126, 25, 190, 138, 33, 136, 61, 122, 98, 59, 187, 64, 247, 52, 188, 13, 140, 201, 188, 81, 64, 29, 61, 97, 36, 107, 59, 248, 177, 185, 61, 200, 145, 17, 191, 144, 85, 93, 62, 60, 5, 170, 62, 3, 170, 26, 62, 125, 245, 236, 62, 138, 244, 145, 61, 252, 239, 117, 62, 220, 138, 231, 191, 80, 99, 135, 62, 245, 8, 52, 191, 172, 106, 68, 189, 87, 155, 183, 190, 246, 202, 209, 62, 122, 207, 149, 188, 116, 62, 255, 190, 244, 185, 208, 190, 152, 226, 5, 192, 31, 58, 166, 189, 66, 74, 85, 62, 56, 232, 134, 62, 206, 144, 210, 62, 225, 254, 198, 62, 104, 139, 118, 190, 212, 177, 38, 63, 167, 160, 106, 62, 168, 206, 4, 191, 16, 126, 43, 191, 113, 125, 152, 62, 156, 115, 187, 190, 36, 116, 146, 191, 250, 243, 135, 191, 152, 27, 8, 62, 7, 178, 85, 190, 11, 14, 180, 189, 9, 234, 204, 60, 95, 10, 72, 61, 153, 96, 50, 190, 31, 131, 27, 62, 61, 163, 123, 61, 94, 63, 78, 59, 123, 212, 192, 61, 19, 62, 140, 189, 93, 47, 147, 189, 142, 76, 161, 190, 208, 137, 190, 188, 157, 136, 189, 189, 49, 14, 230, 189, 58, 249, 29, 188, 72, 94, 55, 190, 48, 3, 10, 190, 46, 8, 216, 189, 119, 64, 223, 189, 64, 81, 31, 190, 74, 237, 195, 61, 226, 154, 56, 61, 193, 190, 250, 189, 36, 149, 41, 190, 0, 87, 159, 189, 104, 34, 194, 61, 71, 65, 95, 188, 206, 5, 113, 189, 131, 158, 177, 189, 179, 150, 35, 190, 75, 178, 147, 188, 151, 213, 20, 61, 45, 192, 6, 62, 188, 88, 146, 188, 13, 179, 199, 61, 223, 108, 20, 63, 211, 98, 133, 189, 206, 181, 15, 63, 218, 142, 48, 191, 131, 144, 47, 188, 247, 251, 59, 63, 146, 10, 76, 191, 82, 167, 124, 190, 148, 180, 30, 61, 65, 245, 30, 63, 45, 221, 160, 190, 52, 92, 142, 191, 66, 254, 3, 192, 101, 99, 122, 190, 183, 130, 223, 62, 68, 77, 156, 187, 150, 57, 40, 63, 155, 49, 12, 62, 223, 28, 11, 191, 43, 60, 1, 63, 128, 157, 97, 62, 102, 175, 47, 191, 142, 141, 12, 190, 244, 251, 135, 62, 145, 65, 170, 191, 85, 228, 137, 191, 1, 240, 97, 190, 3, 179, 143, 189, 223, 193, 18, 62, 210, 13, 26, 190, 180, 206, 17, 191, 28, 97, 69, 190, 124, 173, 47, 62, 205, 44, 62, 190, 71, 213, 126, 188, 78, 85, 212, 188, 54, 8, 238, 189, 189, 80, 13, 63, 134, 184, 176, 191, 44, 163, 34, 62, 8, 241, 214, 190, 95, 64, 171, 62, 34, 66, 206, 61, 8, 124, 240, 190, 249, 106, 60, 190, 19, 124, 46, 61, 183, 45, 126, 62, 149, 88, 63, 61, 103, 180, 165, 62, 178, 236, 17, 190, 188, 248, 55, 62, 17, 13, 183, 187, 80, 172, 246, 60, 149, 183, 149, 61, 197, 121, 78, 62, 115, 65, 44, 190, 117, 118, 226, 60, 250, 155, 16, 190, 95, 210, 156, 187, 214, 187, 6, 190, 49, 124, 144, 188, 184, 153, 92, 62, 243, 164, 99, 190, 174, 35, 35, 191, 13, 185, 172, 61, 69, 163, 31, 190, 66, 97, 135, 62, 84, 127, 61, 189, 38, 66, 11, 191, 225, 165, 239, 61, 247, 252, 114, 191, 0, 246, 8, 189, 57, 252, 14, 190, 242, 11, 186, 61, 169, 168, 169, 62, 22, 163, 5, 63, 126, 208, 105, 189, 129, 181, 155, 190, 135, 167, 156, 62, 184, 244, 50, 62, 66, 27, 79, 62, 240, 14, 254, 189, 245, 79, 177, 188, 65, 178, 22, 63, 208, 181, 49, 190, 157, 254, 21, 62, 44, 199, 15, 188, 39, 151, 194, 61, 64, 166, 106, 189, 98, 8, 201, 189, 132, 186, 168, 61, 77, 195, 131, 61, 231, 184, 245, 61, 57, 43, 32, 190, 168, 202, 37, 62, 44, 183, 252, 190, 224, 224, 1, 62, 1, 54, 34, 62, 130, 16, 14, 190, 41, 176, 28, 62, 224, 32, 70, 59, 4, 73, 178, 62, 31, 188, 197, 190, 241, 134, 152, 190, 64, 20, 71, 62, 221, 89, 2, 62, 100, 197, 146, 190, 246, 217, 3, 188, 130, 195, 151, 189, 80, 132, 66, 60, 156, 81, 145, 188, 211, 245, 170, 190, 10, 232, 35, 62, 184, 226, 120, 62, 68, 191, 3, 61, 44, 121, 39, 191, 6, 24, 174, 62, 211, 116, 12, 62, 11, 137, 65, 62, 65, 8, 16, 62, 132, 171, 83, 62, 224, 231, 237, 62, 164, 118, 80, 61, 7, 165, 71, 189, 224, 185, 185, 188, 28, 186, 80, 191, 171, 21, 120, 62, 138, 38, 78, 190, 185, 80, 42, 190, 137, 90, 168, 189, 176, 71, 167, 190, 113, 153, 115, 62, 64, 12, 36, 61, 155, 199, 51, 190, 109, 147, 163, 62, 5, 166, 96, 62, 186, 185, 216, 61, 102, 94, 141, 190, 225, 160, 92, 62, 24, 147, 77, 60, 36, 63, 137, 62, 43, 126, 82, 190, 234, 104, 244, 190, 120, 61, 122, 191, 135, 217, 33, 61, 57, 183, 130, 62, 226, 80, 168, 62, 147, 27, 120, 61, 99, 192, 78, 191, 243, 20, 206, 62, 234, 70, 63, 62, 72, 47, 27, 191, 115, 48, 179, 62, 247, 20, 152, 62, 101, 147, 147, 187, 150, 230, 29, 58, 28, 120, 71, 62, 220, 202, 181, 61, 77, 99, 188, 62, 174, 212, 171, 60, 27, 140, 34, 189, 91, 52, 19, 60, 14, 230, 131, 190, 97, 235, 168, 62, 198, 107, 146, 62, 146, 90, 195, 188, 136, 253, 61, 62, 210, 88, 100, 62, 58, 15, 12, 62, 112, 106, 6, 189, 158, 116, 143, 60, 80, 5, 0, 63, 161, 63, 144, 62, 243, 56, 149, 62, 110, 71, 172, 61, 107, 12, 93, 62, 147, 184, 161, 190, 5, 73, 121, 62, 184, 71, 234, 61, 192, 29, 176, 190, 51, 113, 133, 190, 218, 117, 166, 62, 72, 27, 79, 62, 25, 253, 3, 189, 95, 241, 192, 61, 232, 237, 105, 62, 168, 95, 9, 189, 52, 243, 120, 61, 42, 210, 69, 62, 184, 124, 183, 189, 105, 118, 139, 191, 80, 86, 194, 190, 57, 173, 173, 61, 19, 163, 240, 188, 189, 235, 104, 62, 47, 179, 19, 61, 75, 117, 17, 191, 182, 51, 6, 63, 173, 2, 243, 61, 182, 13, 150, 62, 90, 99, 128, 191, 239, 1, 46, 62, 216, 246, 183, 62, 237, 102, 135, 190, 205, 137, 182, 190, 64, 156, 145, 61, 93, 70, 160, 61, 193, 175, 95, 190, 160, 21, 161, 190, 193, 67, 151, 191, 150, 210, 139, 188, 209, 197, 5, 63, 44, 177, 181, 61, 33, 91, 179, 61, 247, 19, 52, 62, 70, 46, 128, 61, 122, 185, 190, 190, 154, 17, 97, 190, 252, 186, 34, 189, 198, 15, 226, 189, 220, 232, 235, 189, 229, 28, 229, 190, 163, 155, 169, 189, 162, 15, 184, 190, 234, 92, 180, 60, 52, 19, 2, 188, 91, 27, 229, 189, 141, 206, 239, 61, 54, 140, 187, 190, 53, 178, 181, 190, 145, 148, 50, 61, 193, 255, 69, 189, 45, 96, 21, 62, 127, 183, 10, 190, 57, 38, 57, 189, 51, 173, 178, 62, 250, 253, 190, 61, 148, 125, 253, 190, 213, 170, 60, 189, 58, 236, 117, 190, 172, 17, 145, 62, 147, 42, 41, 62, 109, 123, 188, 60, 14, 83, 129, 190, 235, 244, 66, 190, 184, 205, 150, 189, 37, 111, 25, 190, 52, 25, 141, 190, 50, 102, 72, 190, 30, 131, 74, 62, 16, 188, 132, 62, 208, 94, 224, 60, 13, 160, 154, 62, 254, 166, 106, 60, 169, 206, 103, 62, 44, 244, 179, 61, 174, 116, 128, 190, 116, 250, 139, 61, 8, 235, 129, 190, 149, 227, 44, 62, 201, 117, 165, 62, 104, 192, 180, 189, 28, 148, 193, 62, 11, 106, 250, 62, 101, 144, 106, 61, 151, 82, 16, 190, 43, 198, 145, 62, 176, 187, 226, 62, 184, 148, 160, 62, 149, 93, 207, 62, 13, 190, 135, 190, 65, 72, 35, 190, 163, 238, 189, 190, 105, 198, 189, 60, 241, 3, 134, 62, 67, 221, 139, 190, 112, 183, 200, 190, 226, 146, 149, 62, 215, 252, 139, 62, 28, 73, 138, 190, 36, 163, 127, 61, 148, 231, 129, 62, 232, 18, 170, 60, 216, 90, 255, 61, 166, 225, 138, 190, 35, 71, 212, 189, 10, 157, 145, 60, 80, 211, 4, 191, 30, 98, 128, 62, 86, 77, 46, 60, 86, 132, 39, 62, 188, 54, 14, 61, 133, 202, 28, 191, 254, 153, 81, 190, 29, 196, 227, 188, 103, 121, 166, 190, 73, 148, 27, 189, 44, 166, 115, 62, 219, 120, 231, 189, 160, 79, 155, 62, 143, 129, 60, 61, 119, 78, 59, 189, 158, 183, 34, 191, 89, 69, 2, 189, 206, 101, 188, 190, 219, 36, 59, 58, 124, 26, 22, 62, 24, 50, 8, 191, 81, 126, 99, 190, 45, 103, 184, 60, 230, 141, 114, 189, 163, 165, 33, 190, 226, 204, 76, 58, 112, 177, 63, 190, 56, 240, 185, 61, 1, 207, 110, 60, 169, 229, 145, 61, 134, 41, 188, 190, 89, 32, 131, 62, 0, 177, 172, 190, 216, 215, 243, 190, 72, 62, 163, 188, 181, 99, 101, 190, 84, 224, 39, 62, 234, 13, 150, 62, 144, 253, 137, 188, 28, 68, 64, 190, 12, 176, 49, 61, 154, 234, 201, 61, 121, 234, 72, 190, 44, 41, 103, 190, 255, 175, 249, 62, 188, 41, 81, 62, 218, 185, 45, 188, 170, 69, 108, 188, 62, 114, 92, 190, 190, 84, 43, 61, 105, 203, 237, 188, 2, 165, 4, 190, 123, 232, 9, 191, 115, 155, 2, 190, 129, 134, 73, 61, 157, 147, 151, 187, 143, 72, 171, 190, 39, 152, 192, 61, 93, 111, 205, 62, 227, 181, 57, 62, 31, 78, 47, 62, 18, 124, 144, 61, 128, 131, 149, 60, 111, 249, 237, 61, 88, 96, 32, 62, 129, 77, 88, 61, 236, 29, 19, 189, 30, 69, 20, 190, 185, 125, 148, 189, 167, 233, 234, 188, 122, 198, 23, 190, 132, 84, 208, 61, 248, 164, 40, 190, 28, 112, 196, 188, 248, 22, 34, 62, 234, 232, 141, 61, 184, 116, 170, 188, 232, 93, 54, 189, 30, 129, 8, 190, 244, 125, 6, 190, 138, 7, 93, 189, 197, 255, 9, 62, 164, 124, 42, 190, 143, 74, 0, 190, 40, 211, 137, 59, 248, 104, 121, 189, 188, 107, 17, 190, 116, 191, 218, 60, 233, 42, 202, 189, 208, 50, 45, 190, 40, 120, 153, 61, 197, 196, 17, 190, 155, 198, 187, 189, 119, 123, 136, 62, 139, 249, 142, 189, 123, 248, 74, 190, 70, 197, 71, 61, 136, 55, 82, 61, 158, 35, 1, 62, 66, 75, 238, 61, 216, 211, 96, 190, 158, 11, 65, 62, 79, 246, 86, 62, 182, 104, 195, 191, 213, 64, 178, 60, 1, 147, 12, 191, 103, 69, 25, 62, 56, 243, 27, 62, 202, 60, 169, 190, 177, 29, 151, 61, 38, 207, 76, 62, 80, 207, 60, 62, 107, 140, 134, 62, 103, 157, 211, 62, 27, 230, 10, 191, 83, 88, 177, 61, 137, 253, 216, 189, 180, 236, 154, 190, 123, 215, 121, 62, 225, 29, 66, 62, 47, 136, 136, 190, 89, 8, 1, 61, 10, 142, 18, 190, 11, 106, 132, 188, 249, 166, 184, 59, 76, 131, 139, 190, 109, 14, 64, 189, 239, 174, 185, 189, 96, 204, 231, 61, 140, 194, 95, 62, 75, 166, 22, 62, 110, 13, 100, 62, 232, 92, 194, 189, 177, 222, 192, 188, 102, 242, 155, 190, 33, 141, 31, 63, 109, 119, 215, 59, 218, 95, 185, 189, 23, 58, 218, 189, 2, 231, 1, 189, 235, 95, 67, 62, 158, 227, 18, 62, 70, 66, 55, 62, 187, 208, 37, 191, 101, 21, 255, 189, 132, 70, 104, 189, 0, 235, 204, 190, 66, 131, 65, 62, 125, 210, 132, 189, 183, 249, 125, 191, 198, 134, 247, 61, 174, 214, 134, 189, 48, 144, 207, 190, 119, 3, 23, 62, 253, 143, 110, 190, 168, 60, 84, 60, 229, 211, 194, 189, 211, 208, 42, 190, 26, 143, 196, 189, 172, 21, 139, 190, 208, 154, 153, 189, 176, 138, 54, 59, 159, 34, 194, 189, 42, 202, 150, 189, 176, 27, 167, 189, 160, 42, 190, 60, 163, 237, 10, 61, 142, 120, 73, 190, 138, 52, 141, 61, 239, 85, 151, 61, 246, 230, 101, 189, 113, 101, 29, 189, 184, 153, 83, 190, 211, 168, 55, 190, 32, 96, 141, 61, 164, 53, 95, 190, 213, 216, 89, 61, 40, 141, 243, 189, 103, 77, 100, 189, 65, 68, 132, 60, 91, 120, 60, 190, 89, 96, 35, 190, 202, 230, 132, 189, 66, 90, 97, 189, 21, 91, 219, 188, 70, 83, 19, 188, 42, 150, 53, 61, 40, 254, 101, 189, 105, 183, 145, 189, 16, 242, 252, 189, 11, 173, 187, 189, 23, 125, 103, 188, 46, 134, 1, 61, 64, 191, 29, 190, 181, 192, 55, 189, 58, 60, 17, 62, 231, 230, 158, 61, 254, 27, 86, 61, 217, 242, 190, 61, 213, 217, 122, 189, 90, 146, 150, 60, 82, 106, 50, 61, 100, 103, 185, 189, 219, 134, 175, 189, 140, 204, 58, 61, 102, 209, 96, 189, 207, 175, 194, 60, 134, 249, 175, 189, 159, 162, 5, 190, 133, 85, 109, 61, 180, 72, 157, 189, 160, 242, 130, 189, 84, 2, 10, 190, 109, 196, 23, 61, 234, 185, 37, 189, 167, 53, 134, 61, 52, 193, 225, 60, 31, 110, 10, 190, 77, 193, 204, 61, 62, 131, 49, 190, 72, 66, 246, 59, 187, 45, 153, 189, 85, 149, 82, 62, 23, 178, 8, 190, 164, 91, 12, 62, 79, 89, 70, 62, 250, 15, 59, 189, 201, 135, 147, 62, 85, 109, 145, 60, 176, 58, 195, 188, 75, 65, 136, 62, 3, 32, 129, 63, 23, 157, 35, 190, 251, 219, 3, 190, 64, 214, 199, 61, 13, 79, 30, 190, 29, 104, 175, 62, 10, 195, 102, 189, 0, 26, 24, 189, 231, 74, 80, 190, 120, 128, 77, 61, 43, 180, 85, 190, 189, 164, 222, 190, 36, 233, 173, 61, 232, 17, 232, 62, 151, 252, 51, 190, 217, 178, 199, 185, 189, 33, 129, 189, 227, 241, 235, 61, 216, 115, 188, 189, 206, 92, 157, 61, 93, 126, 225, 61, 59, 16, 225, 61, 120, 149, 150, 188, 75, 135, 239, 187, 237, 84, 248, 189, 206, 218, 39, 190, 26, 32, 211, 189, 230, 231, 142, 189, 47, 119, 152, 189, 36, 67, 0, 190, 198, 131, 31, 190, 198, 236, 178, 189, 4, 12, 96, 61, 14, 170, 39, 61, 210, 190, 204, 189, 28, 86, 146, 189, 129, 2, 170, 61, 70, 121, 41, 61, 89, 107, 39, 190, 172, 63, 139, 61, 224, 208, 55, 190, 228, 93, 230, 61, 179, 178, 62, 189, 96, 54, 20, 190, 122, 6, 147, 61, 96, 71, 217, 61, 171, 236, 170, 60, 10, 191, 134, 61, 65, 225, 245, 61, 245, 237, 32, 190, 161, 220, 249, 61, 232, 103, 88, 61, 29, 67, 158, 189, 66, 169, 79, 61, 66, 185, 215, 60, 169, 10, 127, 189, 197, 138, 22, 188, 103, 103, 43, 189, 119, 253, 147, 189, 40, 183, 71, 61, 207, 67, 116, 189, 26, 222, 33, 190, 45, 250, 23, 190, 176, 251, 44, 190, 13, 87, 29, 190, 150, 25, 167, 189, 202, 250, 200, 61, 144, 108, 90, 189, 84, 85, 34, 62, 142, 248, 34, 58, 55, 163, 37, 62, 183, 46, 27, 62, 253, 205, 202, 60, 113, 214, 80, 189, 122, 207, 185, 61, 221, 209, 220, 189, 221, 59, 92, 187, 88, 107, 135, 61, 57, 137, 217, 61, 190, 24, 222, 61, 52, 225, 88, 189, 148, 97, 211, 189, 249, 115, 52, 190, 68, 202, 52, 190, 189, 224, 76, 61, 79, 225, 210, 61, 200, 236, 54, 190, 250, 225, 66, 62, 147, 69, 154, 61, 223, 185, 9, 186, 148, 142, 131, 62, 251, 107, 26, 62, 86, 225, 84, 189, 217, 240, 221, 62, 18, 249, 52, 62, 201, 119, 246, 190, 51, 6, 205, 62, 44, 138, 13, 61, 116, 140, 192, 61, 191, 211, 43, 189, 224, 15, 21, 62, 59, 159, 189, 190, 125, 53, 82, 190, 29, 156, 245, 60, 239, 11, 3, 190, 151, 197, 60, 59, 59, 255, 50, 190, 199, 14, 0, 61, 194, 179, 44, 62, 39, 48, 130, 191, 207, 234, 110, 189, 46, 117, 226, 62, 186, 63, 54, 190, 150, 148, 104, 61, 131, 166, 155, 60, 9, 204, 4, 63, 123, 128, 223, 190, 135, 20, 185, 188, 53, 249, 125, 62, 81, 11, 161, 190, 235, 83, 18, 191, 28, 74, 147, 191, 70, 0, 71, 190, 162, 155, 218, 61, 117, 124, 0, 190, 177, 240, 177, 61, 219, 254, 72, 191, 49, 48, 101, 61, 205, 56, 220, 190, 201, 120, 74, 62, 239, 131, 65, 191, 204, 65, 69, 190, 182, 119, 60, 63, 126, 146, 144, 190, 251, 143, 70, 62, 179, 22, 57, 191, 21, 132, 57, 63, 101, 56, 66, 190, 67, 68, 195, 62, 34, 1, 57, 60, 5, 211, 137, 189, 209, 198, 46, 188, 30, 240, 191, 62, 118, 45, 133, 190, 107, 81, 61, 60, 99, 134, 157, 61, 152, 27, 103, 189, 128, 82, 213, 62, 33, 233, 66, 61, 145, 178, 140, 189, 222, 21, 51, 191, 59, 134, 215, 60, 164, 213, 194, 188, 219, 53, 79, 190, 210, 156, 144, 60, 61, 159, 4, 62, 83, 69, 26, 62, 37, 8, 96, 191, 200, 69, 31, 191, 211, 87, 7, 191, 203, 16, 13, 191, 83, 43, 97, 191, 189, 205, 202, 61, 141, 56, 48, 61, 110, 24, 102, 191, 205, 13, 193, 61, 238, 66, 43, 191, 189, 87, 112, 191, 110, 4, 162, 190, 143, 50, 24, 61, 75, 192, 87, 190, 83, 77, 106, 62, 14, 138, 173, 60, 111, 78, 178, 190, 114, 228, 141, 189, 96, 109, 24, 61, 106, 148, 158, 61, 79, 245, 131, 190, 47, 53, 5, 190, 77, 31, 16, 191, 121, 150, 85, 190, 101, 30, 19, 62, 87, 179, 177, 189, 10, 242, 253, 61, 18, 45, 98, 191, 156, 54, 96, 190, 99, 252, 165, 189, 92, 42, 77, 190, 109, 230, 20, 62, 3, 77, 105, 62, 156, 200, 181, 189, 126, 193, 200, 61, 241, 204, 69, 62, 49, 146, 50, 190, 57, 14, 109, 191, 191, 197, 234, 189, 119, 207, 30, 61, 27, 208, 14, 191, 81, 145, 219, 61, 64, 207, 99, 190, 57, 191, 135, 61, 199, 156, 59, 62, 179, 140, 246, 61, 188, 51, 250, 190, 83, 73, 202, 61, 161, 34, 136, 190, 159, 42, 115, 190, 146, 213, 96, 61, 104, 102, 14, 189, 220, 249, 146, 62, 245, 36, 97, 62, 163, 116, 188, 62, 246, 116, 31, 62, 84, 128, 127, 189, 165, 135, 7, 190, 230, 178, 153, 189, 152, 14, 115, 61, 115, 44, 238, 60, 227, 64, 199, 61, 107, 4, 164, 61, 125, 119, 210, 188, 102, 69, 38, 190, 39, 35, 222, 61, 9, 237, 64, 190, 138, 13, 92, 190, 64, 162, 176, 61, 191, 165, 135, 61, 158, 249, 121, 190, 54, 83, 215, 61, 38, 77, 154, 61, 83, 178, 230, 189, 41, 174, 61, 189, 175, 227, 163, 61, 19, 15, 28, 190, 228, 72, 37, 190, 218, 49, 141, 61, 124, 101, 165, 189, 49, 148, 32, 61, 70, 105, 212, 189, 187, 88, 59, 190, 189, 30, 200, 61, 159, 72, 26, 189, 24, 215, 117, 189, 213, 192, 7, 61, 177, 31, 246, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 178, 140, 62, 164, 26, 183, 61, 210, 206, 243, 61, 115, 18, 203, 61, 237, 68, 124, 61, 152, 130, 192, 189, 41, 104, 237, 61, 50, 173, 30, 190, 197, 180, 156, 62, 193, 168, 46, 62, 140, 222, 83, 60, 164, 72, 216, 59, 11, 171, 253, 60, 163, 75, 43, 62, 221, 59, 199, 190, 142, 242, 191, 61, 14, 68, 95, 62, 121, 200, 164, 189, 109, 93, 74, 62, 222, 23, 162, 60, 242, 248, 246, 60, 113, 231, 165, 190, 154, 223, 12, 190, 163, 51, 12, 188, 12, 20, 146, 190, 2, 86, 98, 190, 28, 222, 5, 190, 172, 145, 155, 190, 157, 82, 8, 62, 111, 99, 135, 189, 47, 62, 19, 189, 217, 159, 106, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {82, 236, 160, 191, 167, 59, 30, 190, 122, 160, 15, 63, 77, 181, 131, 62, 62, 133, 112, 63, 226, 104, 44, 190, 108, 201, 89, 63, 143, 71, 248, 61, 166, 237, 75, 63, 164, 132, 201, 62, 107, 166, 108, 62, 97, 104, 9, 190, 123, 122, 11, 191, 243, 212, 153, 190, 101, 155, 156, 191, 89, 232, 29, 63, 80, 134, 249, 190, 18, 201, 157, 62, 247, 68, 161, 190, 45, 162, 95, 189, 0, 101, 76, 62, 57, 114, 129, 62, 129, 95, 157, 61, 193, 199, 23, 190, 217, 101, 74, 62, 197, 199, 156, 187, 41, 233, 172, 189, 92, 101, 95, 190, 38, 103, 34, 191, 62, 40, 70, 63, 124, 27, 22, 61, 57, 163, 83, 189, 53, 79, 248, 61, 186, 198, 252, 61, 93, 222, 254, 62, 201, 20, 219, 190, 97, 55, 200, 61, 168, 116, 213, 61, 7, 232, 157, 190, 223, 104, 179, 189, 121, 194, 180, 62, 185, 140, 1, 190, 161, 20, 157, 62, 147, 171, 161, 190, 138, 109, 90, 188, 88, 76, 62, 190, 196, 185, 53, 62, 149, 114, 8, 62, 255, 45, 28, 190, 68, 138, 184, 61, 251, 225, 10, 61, 92, 147, 242, 61, 44, 222, 27, 191, 101, 56, 150, 62, 194, 44, 110, 61, 166, 139, 179, 61, 72, 75, 158, 62, 94, 240, 166, 187, 236, 248, 11, 62, 40, 241, 57, 62, 167, 253, 133, 190, 178, 229, 198, 61, 165, 195, 164, 190, 144, 120, 10, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 115, 53, 190, 155, 98, 89, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {110, 89, 65, 191, 231, 167, 235, 191, 66, 186, 48, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {206, 122, 195, 191, 158, 192, 6, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0070/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}