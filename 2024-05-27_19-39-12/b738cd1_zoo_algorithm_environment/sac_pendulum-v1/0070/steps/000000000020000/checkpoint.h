// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 134, 58, 190, 40, 157, 44, 62, 166, 101, 42, 61, 242, 77, 73, 63, 36, 8, 62, 191, 123, 249, 29, 190, 86, 245, 183, 190, 189, 226, 49, 63, 27, 176, 44, 63, 140, 250, 113, 189, 134, 104, 153, 63, 214, 209, 234, 61, 176, 246, 223, 62, 243, 240, 40, 63, 145, 20, 157, 62, 85, 145, 105, 62, 201, 59, 189, 62, 155, 175, 51, 191, 231, 241, 77, 189, 22, 203, 155, 60, 69, 68, 96, 189, 102, 67, 92, 62, 173, 22, 4, 189, 188, 8, 20, 191, 133, 46, 190, 190, 174, 196, 163, 191, 179, 33, 152, 190, 219, 174, 110, 63, 206, 112, 141, 62, 61, 245, 54, 62, 63, 66, 22, 63, 201, 225, 112, 191, 171, 117, 179, 190, 19, 183, 48, 63, 244, 113, 170, 63, 254, 238, 221, 62, 128, 98, 38, 63, 185, 84, 65, 190, 140, 50, 69, 63, 92, 194, 111, 190, 80, 23, 152, 63, 76, 220, 203, 187, 139, 24, 181, 62, 239, 159, 140, 190, 105, 221, 172, 190, 143, 109, 162, 62, 88, 144, 212, 190, 132, 88, 221, 62, 253, 161, 162, 191, 249, 236, 121, 62, 20, 214, 248, 189, 58, 88, 27, 191, 24, 147, 171, 191, 97, 76, 123, 190, 187, 211, 45, 63, 207, 116, 230, 62, 80, 171, 27, 63, 174, 188, 114, 60, 32, 65, 132, 191, 9, 142, 128, 62, 67, 80, 47, 63, 173, 243, 39, 191, 159, 49, 215, 62, 207, 209, 198, 190, 224, 58, 59, 191, 218, 91, 199, 189, 63, 8, 14, 191, 216, 225, 69, 63, 222, 189, 66, 62, 219, 244, 138, 62, 209, 216, 104, 63, 234, 75, 20, 191, 148, 248, 244, 62, 139, 8, 161, 191, 104, 89, 241, 189, 152, 132, 101, 191, 3, 92, 103, 62, 200, 117, 5, 63, 72, 62, 216, 62, 168, 192, 98, 63, 29, 194, 237, 190, 159, 85, 37, 63, 37, 207, 142, 62, 21, 93, 8, 191, 208, 85, 2, 191, 41, 158, 222, 62, 31, 251, 3, 63, 146, 59, 22, 190, 92, 2, 151, 191, 217, 6, 85, 190, 162, 154, 10, 191, 149, 95, 198, 191, 131, 100, 149, 190, 240, 54, 158, 190, 151, 191, 145, 191, 4, 195, 183, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 249, 20, 191, 54, 79, 232, 62, 29, 138, 74, 190, 144, 11, 42, 63, 37, 181, 99, 189, 207, 212, 41, 62, 129, 193, 11, 191, 148, 243, 62, 61, 5, 222, 254, 189, 241, 98, 72, 63, 116, 165, 14, 62, 220, 218, 18, 191, 195, 127, 186, 61, 27, 32, 46, 63, 41, 228, 143, 62, 216, 245, 228, 60, 54, 6, 134, 190, 127, 136, 5, 190, 68, 216, 78, 62, 40, 192, 235, 62, 103, 226, 47, 63, 199, 140, 12, 63, 205, 44, 92, 63, 12, 190, 140, 61, 12, 167, 128, 60, 7, 189, 129, 190, 89, 65, 99, 62, 129, 184, 152, 62, 80, 219, 138, 190, 122, 139, 110, 190, 99, 241, 38, 190, 6, 121, 233, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 57, 131, 60, 0, 146, 219, 189, 105, 63, 203, 61, 106, 35, 148, 62, 234, 125, 163, 189, 183, 69, 15, 191, 99, 21, 37, 60, 8, 74, 5, 191, 142, 121, 203, 190, 16, 107, 6, 191, 84, 110, 28, 191, 98, 242, 205, 190, 249, 193, 244, 190, 153, 117, 141, 62, 93, 147, 40, 191, 136, 36, 90, 190, 215, 71, 7, 63, 64, 121, 65, 191, 64, 96, 40, 191, 126, 162, 42, 190, 195, 83, 68, 190, 49, 21, 202, 62, 140, 158, 128, 62, 66, 180, 165, 190, 234, 181, 243, 190, 28, 165, 225, 62, 133, 26, 142, 190, 90, 103, 5, 191, 168, 163, 5, 62, 106, 236, 18, 191, 119, 9, 67, 190, 37, 211, 29, 191, 13, 162, 76, 61, 170, 208, 193, 188, 164, 92, 57, 190, 7, 74, 74, 190, 36, 81, 211, 189, 229, 14, 22, 190, 64, 104, 165, 189, 172, 207, 4, 190, 167, 3, 135, 189, 217, 157, 218, 61, 137, 103, 23, 60, 192, 205, 54, 188, 155, 192, 58, 190, 76, 34, 3, 62, 63, 187, 41, 62, 210, 175, 134, 60, 192, 140, 16, 61, 166, 203, 122, 189, 202, 172, 165, 61, 239, 208, 33, 190, 225, 249, 78, 189, 133, 40, 6, 190, 238, 61, 212, 189, 181, 58, 169, 189, 209, 64, 180, 189, 46, 211, 217, 59, 85, 29, 119, 61, 212, 122, 22, 190, 166, 43, 217, 188, 139, 182, 21, 62, 156, 76, 57, 61, 0, 75, 37, 190, 255, 67, 231, 61, 24, 249, 165, 62, 26, 74, 1, 190, 100, 203, 31, 191, 183, 142, 107, 190, 67, 173, 144, 62, 95, 189, 197, 61, 196, 24, 129, 61, 52, 139, 202, 188, 171, 60, 192, 61, 114, 31, 18, 63, 0, 133, 204, 191, 187, 111, 229, 189, 13, 222, 23, 191, 79, 88, 115, 62, 9, 121, 33, 62, 236, 33, 31, 191, 189, 103, 219, 190, 2, 174, 48, 61, 16, 24, 153, 62, 196, 148, 111, 62, 189, 93, 37, 63, 161, 133, 21, 191, 53, 119, 187, 61, 183, 235, 2, 63, 168, 198, 67, 62, 121, 68, 54, 189, 88, 9, 105, 62, 1, 157, 26, 190, 84, 200, 73, 190, 213, 30, 103, 61, 107, 191, 121, 189, 81, 35, 240, 189, 150, 97, 221, 188, 23, 143, 72, 62, 227, 20, 180, 190, 160, 109, 127, 61, 14, 63, 172, 62, 224, 189, 1, 62, 208, 137, 98, 61, 187, 121, 70, 190, 108, 227, 124, 61, 162, 255, 178, 62, 55, 121, 85, 191, 252, 197, 121, 190, 59, 222, 186, 190, 20, 241, 181, 61, 116, 74, 235, 190, 21, 158, 170, 190, 3, 112, 154, 190, 42, 192, 139, 61, 127, 38, 229, 62, 2, 223, 167, 62, 170, 63, 16, 63, 59, 16, 128, 190, 128, 43, 116, 189, 163, 17, 24, 62, 128, 11, 191, 62, 36, 146, 173, 61, 147, 137, 240, 61, 97, 214, 76, 62, 89, 59, 63, 190, 7, 199, 81, 189, 74, 38, 92, 189, 137, 60, 237, 61, 8, 93, 113, 191, 234, 110, 178, 62, 181, 58, 132, 61, 67, 168, 52, 62, 36, 53, 128, 62, 93, 75, 8, 190, 16, 188, 100, 62, 225, 129, 194, 191, 245, 174, 88, 190, 145, 115, 182, 191, 156, 27, 148, 190, 47, 61, 40, 191, 43, 189, 8, 188, 46, 82, 128, 61, 76, 91, 35, 191, 126, 103, 131, 190, 31, 106, 144, 191, 110, 58, 212, 190, 185, 29, 138, 62, 52, 135, 136, 62, 57, 58, 9, 62, 121, 112, 174, 62, 173, 140, 106, 61, 238, 183, 82, 191, 52, 147, 163, 62, 10, 149, 137, 189, 5, 234, 66, 190, 83, 28, 156, 62, 205, 89, 142, 190, 105, 215, 176, 191, 135, 173, 46, 191, 16, 194, 247, 60, 36, 214, 213, 189, 9, 93, 226, 60, 165, 129, 40, 190, 178, 201, 241, 188, 170, 225, 45, 189, 209, 91, 193, 188, 173, 204, 214, 188, 180, 85, 80, 60, 118, 201, 36, 62, 25, 3, 52, 190, 172, 84, 31, 188, 91, 118, 10, 190, 25, 148, 23, 61, 60, 212, 104, 61, 144, 145, 106, 189, 207, 107, 1, 190, 53, 87, 82, 189, 77, 130, 121, 189, 79, 0, 179, 61, 37, 172, 7, 189, 243, 63, 21, 62, 28, 72, 252, 189, 162, 73, 221, 188, 133, 200, 114, 188, 221, 126, 25, 190, 138, 33, 136, 61, 122, 98, 59, 187, 64, 247, 52, 188, 13, 140, 201, 188, 81, 64, 29, 61, 97, 36, 107, 59, 248, 177, 185, 61, 217, 225, 103, 191, 65, 66, 104, 62, 111, 55, 206, 62, 175, 171, 21, 62, 147, 208, 6, 63, 138, 244, 145, 61, 181, 180, 148, 62, 1, 156, 226, 191, 89, 154, 128, 62, 28, 132, 80, 191, 234, 124, 6, 189, 246, 162, 182, 190, 86, 255, 1, 63, 65, 52, 82, 189, 151, 201, 252, 190, 253, 173, 160, 190, 172, 70, 1, 192, 119, 243, 153, 189, 239, 93, 77, 62, 236, 216, 128, 62, 74, 211, 8, 63, 248, 153, 227, 62, 73, 140, 113, 190, 80, 152, 45, 63, 227, 149, 113, 62, 253, 217, 245, 190, 119, 253, 76, 191, 32, 51, 157, 62, 114, 154, 203, 190, 124, 73, 136, 191, 20, 163, 121, 191, 152, 27, 8, 62, 7, 178, 85, 190, 11, 14, 180, 189, 9, 234, 204, 60, 95, 10, 72, 61, 153, 96, 50, 190, 31, 131, 27, 62, 61, 163, 123, 61, 94, 63, 78, 59, 123, 212, 192, 61, 19, 62, 140, 189, 93, 47, 147, 189, 142, 76, 161, 190, 208, 137, 190, 188, 157, 136, 189, 189, 49, 14, 230, 189, 58, 249, 29, 188, 72, 94, 55, 190, 48, 3, 10, 190, 46, 8, 216, 189, 119, 64, 223, 189, 64, 81, 31, 190, 74, 237, 195, 61, 226, 154, 56, 61, 193, 190, 250, 189, 36, 149, 41, 190, 0, 87, 159, 189, 104, 34, 194, 61, 71, 65, 95, 188, 206, 5, 113, 189, 131, 158, 177, 189, 179, 150, 35, 190, 75, 178, 147, 188, 73, 197, 48, 61, 163, 94, 39, 62, 55, 150, 175, 189, 91, 243, 133, 61, 95, 13, 32, 63, 211, 98, 133, 189, 138, 229, 30, 63, 184, 43, 61, 191, 235, 46, 232, 188, 87, 244, 71, 63, 69, 186, 109, 191, 64, 191, 117, 190, 83, 191, 55, 188, 48, 113, 43, 63, 16, 78, 152, 190, 16, 209, 130, 191, 177, 104, 5, 192, 52, 14, 109, 190, 48, 138, 233, 62, 236, 87, 239, 60, 200, 55, 65, 63, 182, 19, 248, 61, 73, 234, 249, 190, 90, 175, 4, 63, 109, 164, 144, 62, 154, 185, 39, 191, 173, 225, 175, 189, 75, 31, 159, 62, 59, 162, 206, 191, 251, 181, 145, 191, 146, 224, 146, 189, 3, 179, 143, 189, 183, 194, 42, 62, 176, 162, 19, 190, 127, 48, 28, 191, 86, 179, 93, 190, 228, 181, 41, 62, 205, 44, 62, 190, 79, 23, 154, 188, 230, 186, 77, 189, 136, 20, 208, 189, 27, 15, 22, 63, 38, 185, 186, 191, 251, 210, 254, 61, 30, 133, 229, 190, 235, 70, 180, 62, 217, 50, 166, 61, 64, 104, 246, 190, 160, 26, 81, 190, 247, 135, 179, 60, 178, 72, 103, 62, 101, 104, 145, 61, 196, 100, 168, 62, 40, 86, 82, 190, 28, 188, 70, 62, 145, 142, 211, 60, 187, 48, 122, 61, 208, 80, 172, 61, 228, 253, 96, 62, 24, 106, 20, 190, 82, 73, 130, 59, 33, 88, 36, 190, 127, 243, 135, 187, 214, 187, 6, 190, 132, 85, 31, 189, 231, 58, 128, 62, 161, 55, 133, 190, 203, 80, 27, 191, 20, 197, 186, 61, 69, 163, 31, 190, 180, 156, 138, 62, 212, 207, 142, 189, 254, 134, 8, 191, 174, 242, 229, 61, 234, 22, 120, 191, 160, 253, 189, 187, 78, 206, 34, 190, 44, 57, 210, 61, 60, 167, 186, 62, 177, 82, 6, 63, 17, 235, 170, 189, 171, 118, 147, 190, 54, 167, 164, 62, 33, 27, 91, 62, 214, 64, 58, 62, 225, 105, 33, 190, 166, 214, 151, 186, 233, 17, 26, 63, 8, 25, 21, 190, 204, 17, 41, 62, 119, 79, 9, 60, 78, 110, 8, 62, 114, 247, 193, 189, 115, 12, 255, 189, 248, 208, 157, 61, 77, 195, 131, 61, 47, 151, 252, 61, 243, 192, 195, 189, 154, 244, 150, 62, 131, 207, 227, 190, 243, 157, 47, 62, 1, 54, 34, 62, 245, 1, 204, 189, 226, 203, 35, 62, 62, 97, 111, 61, 156, 129, 173, 62, 172, 201, 109, 190, 221, 98, 135, 190, 243, 162, 166, 62, 117, 58, 40, 62, 57, 99, 183, 190, 155, 217, 216, 188, 75, 126, 109, 189, 91, 61, 68, 60, 105, 215, 122, 188, 145, 30, 247, 190, 126, 93, 27, 62, 166, 64, 184, 62, 110, 120, 157, 61, 144, 98, 53, 191, 235, 28, 203, 62, 10, 187, 62, 62, 43, 179, 104, 62, 3, 228, 77, 62, 173, 41, 106, 62, 196, 38, 244, 62, 9, 206, 52, 61, 7, 165, 71, 189, 67, 79, 66, 186, 92, 83, 130, 191, 153, 240, 137, 62, 54, 105, 150, 190, 210, 221, 250, 189, 137, 90, 168, 189, 39, 244, 144, 190, 91, 123, 159, 62, 131, 124, 70, 61, 11, 34, 25, 190, 253, 7, 193, 62, 233, 46, 8, 63, 202, 70, 14, 62, 224, 222, 106, 190, 167, 232, 184, 62, 173, 102, 141, 188, 164, 198, 178, 62, 61, 98, 190, 190, 206, 114, 6, 190, 232, 254, 150, 191, 235, 166, 213, 61, 37, 134, 145, 62, 92, 163, 185, 62, 148, 160, 187, 61, 231, 222, 152, 191, 121, 176, 222, 62, 145, 46, 100, 62, 93, 171, 107, 191, 154, 116, 220, 62, 236, 100, 192, 62, 174, 234, 37, 61, 150, 230, 29, 58, 119, 192, 90, 62, 167, 251, 143, 61, 41, 235, 180, 62, 238, 36, 212, 60, 38, 205, 1, 189, 91, 52, 19, 60, 141, 51, 130, 190, 211, 69, 175, 62, 210, 93, 150, 62, 46, 99, 66, 189, 144, 140, 57, 62, 147, 196, 128, 62, 171, 190, 231, 61, 105, 8, 40, 189, 154, 154, 26, 61, 161, 208, 236, 62, 141, 15, 151, 62, 188, 154, 154, 62, 73, 143, 2, 62, 41, 14, 95, 62, 142, 163, 184, 190, 59, 232, 106, 62, 244, 122, 226, 61, 48, 230, 181, 190, 108, 100, 142, 190, 21, 177, 165, 62, 67, 203, 75, 62, 44, 48, 95, 189, 101, 10, 237, 61, 155, 11, 119, 62, 73, 121, 38, 189, 52, 243, 120, 61, 76, 31, 103, 62, 177, 19, 60, 190, 214, 255, 133, 191, 132, 103, 24, 191, 154, 132, 249, 61, 19, 163, 240, 188, 122, 164, 133, 62, 185, 87, 13, 61, 75, 231, 13, 191, 143, 87, 14, 63, 210, 24, 52, 190, 244, 112, 181, 62, 130, 72, 112, 191, 59, 231, 74, 62, 142, 59, 203, 62, 88, 157, 171, 190, 96, 67, 185, 190, 120, 116, 9, 62, 164, 13, 12, 62, 30, 131, 106, 190, 160, 179, 157, 190, 152, 124, 151, 191, 72, 17, 166, 60, 9, 177, 12, 63, 238, 214, 237, 60, 163, 217, 6, 62, 181, 139, 85, 62, 59, 228, 106, 189, 161, 31, 188, 190, 27, 56, 99, 190, 164, 85, 255, 188, 198, 15, 226, 189, 150, 187, 206, 189, 78, 4, 211, 190, 78, 189, 170, 189, 252, 218, 1, 191, 40, 12, 76, 60, 52, 19, 2, 188, 69, 240, 245, 189, 83, 170, 15, 62, 218, 63, 227, 190, 79, 168, 182, 190, 29, 187, 102, 60, 246, 119, 38, 190, 182, 128, 11, 62, 41, 105, 20, 190, 26, 241, 89, 190, 166, 156, 204, 62, 227, 55, 233, 61, 211, 183, 27, 191, 36, 238, 186, 190, 161, 132, 245, 190, 104, 149, 155, 62, 58, 11, 116, 62, 111, 183, 59, 60, 132, 17, 104, 190, 139, 75, 26, 190, 93, 58, 177, 189, 22, 4, 35, 190, 42, 86, 120, 190, 76, 213, 36, 190, 55, 165, 96, 62, 107, 122, 136, 62, 208, 94, 224, 60, 111, 227, 163, 62, 115, 214, 90, 187, 107, 217, 82, 62, 245, 20, 202, 61, 9, 86, 121, 190, 116, 250, 139, 61, 30, 88, 128, 190, 207, 72, 60, 62, 73, 22, 170, 62, 131, 19, 228, 189, 218, 101, 192, 62, 176, 190, 4, 63, 212, 137, 212, 60, 201, 200, 23, 190, 172, 20, 156, 62, 198, 62, 206, 62, 38, 174, 167, 62, 171, 33, 214, 62, 80, 132, 101, 190, 119, 93, 32, 190, 111, 208, 215, 190, 248, 58, 134, 59, 136, 56, 131, 62, 115, 60, 146, 190, 53, 194, 209, 190, 69, 186, 147, 62, 35, 139, 138, 62, 229, 62, 149, 190, 197, 214, 171, 61, 45, 228, 136, 62, 167, 49, 99, 60, 216, 90, 255, 61, 4, 44, 101, 190, 19, 105, 191, 189, 117, 66, 57, 189, 217, 146, 96, 191, 54, 183, 136, 62, 86, 77, 46, 60, 145, 147, 62, 62, 107, 50, 165, 61, 168, 167, 55, 191, 227, 232, 30, 190, 78, 67, 84, 189, 103, 121, 166, 190, 67, 223, 193, 189, 253, 118, 132, 62, 219, 120, 231, 189, 30, 43, 159, 62, 81, 150, 199, 61, 111, 247, 60, 189, 77, 158, 9, 191, 89, 69, 2, 189, 75, 199, 148, 190, 206, 208, 7, 190, 178, 246, 32, 62, 37, 224, 243, 190, 137, 223, 36, 190, 37, 211, 205, 60, 56, 17, 41, 189, 192, 247, 28, 190, 49, 138, 42, 61, 3, 250, 12, 190, 214, 175, 39, 62, 1, 207, 110, 60, 79, 200, 117, 61, 240, 245, 198, 190, 214, 37, 153, 62, 49, 158, 116, 190, 51, 215, 8, 191, 72, 62, 163, 188, 130, 213, 144, 190, 129, 178, 0, 62, 152, 42, 168, 62, 213, 35, 120, 189, 195, 157, 37, 190, 191, 145, 142, 61, 76, 2, 7, 62, 131, 159, 80, 190, 222, 119, 136, 190, 76, 255, 218, 62, 215, 187, 61, 62, 244, 75, 124, 61, 16, 91, 33, 188, 146, 3, 81, 190, 69, 57, 91, 187, 67, 162, 215, 60, 154, 17, 108, 190, 155, 224, 23, 191, 84, 169, 219, 189, 68, 177, 224, 60, 148, 169, 30, 60, 202, 7, 193, 190, 23, 151, 234, 60, 119, 108, 186, 62, 82, 122, 6, 62, 31, 78, 47, 62, 18, 124, 144, 61, 128, 131, 149, 60, 111, 249, 237, 61, 88, 96, 32, 62, 129, 77, 88, 61, 236, 29, 19, 189, 30, 69, 20, 190, 185, 125, 148, 189, 167, 233, 234, 188, 122, 198, 23, 190, 132, 84, 208, 61, 248, 164, 40, 190, 28, 112, 196, 188, 248, 22, 34, 62, 234, 232, 141, 61, 184, 116, 170, 188, 232, 93, 54, 189, 30, 129, 8, 190, 244, 125, 6, 190, 138, 7, 93, 189, 197, 255, 9, 62, 164, 124, 42, 190, 143, 74, 0, 190, 40, 211, 137, 59, 248, 104, 121, 189, 188, 107, 17, 190, 116, 191, 218, 60, 233, 42, 202, 189, 208, 50, 45, 190, 40, 120, 153, 61, 197, 196, 17, 190, 155, 198, 187, 189, 191, 17, 141, 62, 249, 161, 161, 189, 30, 71, 127, 190, 243, 227, 113, 189, 96, 148, 96, 61, 158, 35, 1, 62, 198, 89, 246, 61, 135, 142, 128, 190, 83, 34, 35, 62, 180, 35, 105, 62, 44, 18, 225, 191, 105, 221, 21, 189, 38, 104, 21, 191, 115, 122, 31, 62, 55, 244, 1, 62, 156, 244, 208, 190, 145, 231, 71, 61, 105, 241, 2, 62, 175, 25, 37, 62, 239, 48, 121, 62, 176, 184, 214, 62, 88, 13, 37, 191, 226, 104, 230, 61, 2, 6, 181, 189, 47, 185, 136, 190, 229, 193, 132, 62, 181, 249, 76, 62, 220, 181, 126, 190, 253, 195, 175, 60, 111, 156, 38, 190, 134, 20, 36, 188, 249, 166, 184, 59, 20, 230, 129, 190, 197, 32, 158, 189, 82, 159, 155, 189, 247, 159, 8, 62, 107, 26, 88, 62, 75, 166, 22, 62, 114, 60, 88, 62, 137, 143, 107, 190, 126, 62, 50, 189, 233, 219, 156, 190, 140, 55, 41, 63, 68, 26, 127, 188, 234, 218, 179, 189, 235, 69, 235, 189, 220, 152, 73, 189, 87, 50, 40, 61, 120, 252, 14, 188, 218, 109, 79, 62, 187, 208, 37, 191, 22, 0, 10, 190, 71, 106, 37, 190, 158, 106, 240, 190, 241, 52, 72, 62, 98, 17, 162, 189, 183, 249, 125, 191, 116, 121, 10, 62, 106, 201, 113, 189, 88, 65, 215, 190, 246, 63, 186, 188, 103, 137, 194, 190, 76, 14, 39, 189, 229, 211, 194, 189, 211, 208, 42, 190, 26, 143, 196, 189, 172, 21, 139, 190, 208, 154, 153, 189, 176, 138, 54, 59, 159, 34, 194, 189, 42, 202, 150, 189, 176, 27, 167, 189, 160, 42, 190, 60, 163, 237, 10, 61, 142, 120, 73, 190, 138, 52, 141, 61, 239, 85, 151, 61, 246, 230, 101, 189, 113, 101, 29, 189, 184, 153, 83, 190, 211, 168, 55, 190, 32, 96, 141, 61, 164, 53, 95, 190, 213, 216, 89, 61, 40, 141, 243, 189, 103, 77, 100, 189, 65, 68, 132, 60, 91, 120, 60, 190, 89, 96, 35, 190, 202, 230, 132, 189, 66, 90, 97, 189, 21, 91, 219, 188, 70, 83, 19, 188, 42, 150, 53, 61, 40, 254, 101, 189, 105, 183, 145, 189, 16, 242, 252, 189, 11, 173, 187, 189, 23, 125, 103, 188, 46, 134, 1, 61, 64, 191, 29, 190, 181, 192, 55, 189, 58, 60, 17, 62, 231, 230, 158, 61, 254, 27, 86, 61, 217, 242, 190, 61, 213, 217, 122, 189, 90, 146, 150, 60, 82, 106, 50, 61, 100, 103, 185, 189, 219, 134, 175, 189, 140, 204, 58, 61, 102, 209, 96, 189, 207, 175, 194, 60, 134, 249, 175, 189, 159, 162, 5, 190, 133, 85, 109, 61, 180, 72, 157, 189, 160, 242, 130, 189, 84, 2, 10, 190, 109, 196, 23, 61, 234, 185, 37, 189, 167, 53, 134, 61, 52, 193, 225, 60, 31, 110, 10, 190, 77, 193, 204, 61, 62, 131, 49, 190, 72, 66, 246, 59, 155, 214, 5, 58, 234, 64, 100, 62, 50, 37, 172, 189, 97, 155, 117, 62, 27, 235, 48, 62, 250, 15, 59, 189, 111, 39, 139, 62, 172, 44, 216, 60, 121, 37, 181, 61, 201, 226, 178, 62, 254, 240, 141, 63, 103, 235, 83, 190, 165, 135, 182, 189, 91, 162, 244, 61, 64, 122, 112, 190, 98, 36, 185, 62, 64, 21, 75, 189, 95, 64, 236, 60, 172, 32, 179, 190, 17, 20, 49, 62, 157, 228, 29, 190, 46, 153, 214, 190, 70, 73, 120, 61, 167, 211, 16, 63, 2, 67, 85, 190, 240, 81, 253, 187, 61, 99, 100, 189, 44, 20, 3, 62, 247, 15, 179, 189, 108, 68, 177, 61, 77, 104, 10, 62, 59, 16, 225, 61, 120, 149, 150, 188, 75, 135, 239, 187, 237, 84, 248, 189, 206, 218, 39, 190, 26, 32, 211, 189, 230, 231, 142, 189, 47, 119, 152, 189, 36, 67, 0, 190, 198, 131, 31, 190, 198, 236, 178, 189, 4, 12, 96, 61, 14, 170, 39, 61, 210, 190, 204, 189, 28, 86, 146, 189, 129, 2, 170, 61, 70, 121, 41, 61, 89, 107, 39, 190, 172, 63, 139, 61, 224, 208, 55, 190, 228, 93, 230, 61, 179, 178, 62, 189, 96, 54, 20, 190, 122, 6, 147, 61, 96, 71, 217, 61, 171, 236, 170, 60, 10, 191, 134, 61, 65, 225, 245, 61, 245, 237, 32, 190, 161, 220, 249, 61, 232, 103, 88, 61, 29, 67, 158, 189, 66, 169, 79, 61, 66, 185, 215, 60, 169, 10, 127, 189, 197, 138, 22, 188, 103, 103, 43, 189, 119, 253, 147, 189, 40, 183, 71, 61, 207, 67, 116, 189, 26, 222, 33, 190, 45, 250, 23, 190, 176, 251, 44, 190, 13, 87, 29, 190, 150, 25, 167, 189, 202, 250, 200, 61, 144, 108, 90, 189, 84, 85, 34, 62, 142, 248, 34, 58, 55, 163, 37, 62, 183, 46, 27, 62, 253, 205, 202, 60, 113, 214, 80, 189, 122, 207, 185, 61, 221, 209, 220, 189, 221, 59, 92, 187, 88, 107, 135, 61, 57, 137, 217, 61, 190, 24, 222, 61, 52, 225, 88, 189, 148, 97, 211, 189, 249, 115, 52, 190, 68, 202, 52, 190, 189, 224, 76, 61, 79, 225, 210, 61, 253, 14, 57, 190, 140, 38, 64, 62, 111, 162, 143, 61, 249, 6, 42, 189, 108, 250, 148, 62, 251, 107, 26, 62, 140, 0, 219, 188, 182, 187, 243, 62, 182, 255, 13, 62, 176, 176, 7, 191, 141, 171, 178, 62, 15, 128, 95, 60, 74, 196, 186, 61, 191, 181, 110, 188, 181, 215, 252, 61, 88, 87, 143, 190, 86, 161, 31, 190, 189, 255, 126, 188, 91, 86, 4, 190, 124, 73, 20, 189, 109, 245, 129, 190, 194, 181, 20, 61, 111, 15, 89, 62, 58, 224, 202, 191, 203, 134, 230, 188, 137, 178, 243, 62, 250, 59, 17, 190, 14, 16, 142, 61, 153, 12, 102, 61, 132, 127, 15, 63, 40, 112, 246, 190, 135, 20, 185, 188, 91, 110, 89, 62, 142, 21, 156, 190, 147, 246, 13, 191, 18, 240, 146, 191, 226, 15, 102, 190, 162, 155, 218, 61, 20, 68, 28, 190, 231, 222, 180, 61, 248, 155, 101, 191, 110, 31, 127, 60, 123, 27, 204, 190, 242, 186, 67, 62, 118, 234, 93, 191, 201, 18, 125, 190, 115, 231, 56, 63, 26, 11, 221, 190, 43, 139, 76, 62, 124, 97, 56, 191, 90, 53, 56, 63, 21, 209, 96, 190, 126, 69, 188, 62, 37, 204, 195, 60, 62, 174, 244, 189, 189, 219, 169, 189, 55, 186, 200, 62, 210, 143, 168, 190, 187, 246, 27, 189, 57, 150, 181, 61, 217, 124, 66, 189, 10, 118, 215, 62, 121, 151, 42, 61, 145, 178, 140, 189, 106, 77, 75, 191, 3, 230, 224, 61, 159, 26, 20, 61, 143, 217, 1, 191, 214, 76, 244, 188, 61, 159, 4, 62, 182, 13, 164, 61, 53, 176, 73, 191, 216, 118, 45, 191, 103, 26, 66, 191, 198, 167, 46, 191, 199, 150, 120, 191, 32, 169, 36, 62, 44, 167, 248, 188, 242, 173, 95, 191, 62, 99, 88, 62, 229, 60, 31, 191, 144, 130, 138, 191, 170, 85, 193, 190, 209, 219, 112, 189, 7, 53, 120, 189, 206, 196, 169, 62, 73, 149, 147, 188, 111, 78, 178, 190, 124, 146, 184, 61, 41, 171, 73, 59, 192, 53, 52, 60, 222, 179, 51, 190, 47, 53, 5, 190, 54, 7, 10, 191, 195, 109, 126, 190, 101, 30, 19, 62, 239, 70, 20, 189, 75, 98, 13, 62, 168, 126, 133, 191, 45, 209, 167, 190, 20, 57, 31, 190, 92, 42, 77, 190, 52, 234, 151, 61, 217, 197, 111, 62, 155, 128, 110, 61, 6, 170, 241, 61, 84, 2, 5, 62, 40, 129, 145, 189, 104, 36, 111, 191, 224, 139, 27, 190, 75, 137, 43, 62, 125, 39, 9, 191, 25, 137, 3, 62, 35, 46, 39, 190, 50, 197, 96, 62, 67, 197, 176, 62, 197, 3, 90, 62, 58, 250, 218, 190, 125, 169, 199, 60, 75, 227, 31, 190, 164, 60, 62, 190, 218, 70, 157, 188, 11, 196, 185, 189, 106, 171, 157, 62, 123, 146, 118, 62, 13, 246, 199, 62, 24, 224, 32, 62, 84, 128, 127, 189, 165, 135, 7, 190, 230, 178, 153, 189, 152, 14, 115, 61, 115, 44, 238, 60, 227, 64, 199, 61, 107, 4, 164, 61, 125, 119, 210, 188, 102, 69, 38, 190, 39, 35, 222, 61, 9, 237, 64, 190, 138, 13, 92, 190, 64, 162, 176, 61, 191, 165, 135, 61, 158, 249, 121, 190, 54, 83, 215, 61, 38, 77, 154, 61, 83, 178, 230, 189, 41, 174, 61, 189, 175, 227, 163, 61, 19, 15, 28, 190, 228, 72, 37, 190, 218, 49, 141, 61, 124, 101, 165, 189, 49, 148, 32, 61, 70, 105, 212, 189, 187, 88, 59, 190, 189, 30, 200, 61, 159, 72, 26, 189, 24, 215, 117, 189, 213, 192, 7, 61, 177, 31, 246, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {59, 218, 106, 62, 164, 26, 183, 61, 203, 175, 240, 61, 16, 96, 220, 61, 44, 50, 160, 61, 152, 130, 192, 189, 24, 16, 41, 62, 50, 173, 30, 190, 28, 90, 161, 62, 201, 152, 52, 62, 156, 230, 217, 184, 218, 75, 147, 61, 174, 177, 156, 61, 144, 215, 33, 62, 121, 92, 188, 190, 214, 2, 233, 61, 185, 93, 81, 62, 126, 91, 151, 189, 12, 123, 105, 62, 222, 23, 162, 60, 77, 207, 22, 60, 187, 97, 178, 190, 154, 223, 12, 190, 163, 51, 12, 188, 180, 218, 98, 190, 2, 86, 98, 190, 28, 222, 5, 190, 11, 162, 169, 190, 79, 179, 159, 61, 222, 63, 120, 60, 89, 23, 167, 61, 217, 159, 106, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 58, 163, 191, 167, 59, 30, 190, 195, 72, 22, 63, 239, 211, 157, 62, 116, 25, 97, 63, 226, 104, 44, 190, 142, 201, 104, 63, 143, 71, 248, 61, 185, 146, 95, 63, 145, 199, 201, 62, 169, 196, 121, 62, 168, 209, 49, 190, 33, 230, 34, 191, 212, 24, 148, 190, 127, 40, 163, 191, 132, 252, 9, 63, 112, 13, 248, 190, 116, 108, 151, 62, 225, 152, 177, 190, 45, 162, 95, 189, 20, 22, 99, 62, 236, 150, 153, 62, 129, 95, 157, 61, 193, 199, 23, 190, 158, 198, 106, 62, 197, 199, 156, 187, 41, 233, 172, 189, 45, 168, 138, 190, 23, 57, 38, 191, 136, 133, 104, 63, 128, 249, 35, 61, 57, 163, 83, 189, 222, 73, 150, 61, 186, 198, 252, 61, 70, 252, 234, 62, 181, 3, 218, 190, 147, 255, 232, 60, 168, 116, 213, 61, 70, 109, 166, 190, 223, 104, 179, 189, 32, 77, 188, 62, 81, 194, 39, 190, 195, 105, 116, 62, 64, 235, 206, 190, 138, 117, 233, 188, 100, 201, 106, 190, 64, 226, 131, 62, 71, 94, 18, 62, 34, 238, 65, 190, 127, 97, 180, 61, 53, 124, 5, 190, 92, 147, 242, 61, 25, 219, 27, 191, 108, 76, 65, 62, 194, 44, 110, 61, 166, 139, 179, 61, 66, 128, 171, 62, 94, 240, 166, 187, 236, 248, 11, 62, 254, 177, 170, 61, 246, 150, 207, 190, 2, 98, 21, 61, 211, 215, 210, 190, 144, 120, 10, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 133, 44, 190, 203, 169, 238, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {18, 115, 224, 63, 123, 240, 178, 63, 218, 50, 46, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {207, 252, 158, 192, 152, 44, 179, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0070/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}