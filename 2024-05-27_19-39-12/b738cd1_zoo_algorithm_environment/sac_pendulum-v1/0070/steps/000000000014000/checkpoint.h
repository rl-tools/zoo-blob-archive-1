// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 134, 58, 190, 40, 157, 44, 62, 166, 101, 42, 61, 198, 133, 240, 62, 112, 47, 51, 191, 238, 252, 143, 190, 67, 61, 125, 190, 203, 76, 38, 63, 58, 100, 50, 63, 132, 99, 0, 189, 61, 243, 135, 63, 188, 153, 182, 61, 182, 199, 189, 62, 226, 54, 45, 63, 182, 175, 176, 62, 240, 24, 116, 62, 140, 5, 114, 62, 115, 36, 49, 191, 231, 241, 77, 189, 22, 203, 155, 60, 69, 68, 96, 189, 36, 89, 49, 62, 43, 235, 16, 60, 177, 189, 19, 191, 159, 116, 232, 190, 239, 122, 155, 191, 186, 176, 150, 190, 83, 50, 91, 63, 115, 123, 208, 62, 186, 53, 101, 62, 59, 143, 6, 63, 123, 7, 116, 191, 244, 18, 141, 190, 90, 138, 31, 63, 107, 77, 165, 63, 139, 64, 206, 62, 109, 29, 23, 63, 24, 200, 133, 190, 105, 176, 69, 63, 225, 112, 9, 190, 132, 23, 134, 63, 136, 228, 192, 61, 100, 135, 141, 62, 216, 68, 36, 190, 12, 23, 177, 190, 121, 38, 94, 62, 29, 136, 3, 191, 159, 12, 230, 62, 240, 15, 154, 191, 236, 6, 32, 62, 233, 32, 29, 190, 8, 170, 44, 191, 45, 201, 159, 191, 247, 123, 143, 190, 210, 123, 57, 63, 225, 244, 249, 62, 226, 203, 24, 63, 250, 128, 117, 59, 70, 78, 136, 191, 166, 34, 140, 62, 90, 94, 201, 62, 23, 231, 40, 191, 30, 237, 7, 63, 96, 151, 201, 190, 17, 169, 34, 191, 146, 124, 185, 189, 186, 141, 245, 190, 3, 246, 62, 63, 243, 47, 66, 62, 63, 131, 119, 62, 102, 196, 84, 63, 226, 164, 40, 191, 203, 251, 198, 62, 7, 41, 152, 191, 163, 73, 32, 190, 57, 131, 73, 191, 120, 46, 170, 61, 50, 16, 2, 63, 161, 170, 229, 62, 210, 235, 85, 63, 107, 235, 244, 190, 38, 197, 206, 62, 252, 242, 17, 62, 50, 51, 28, 191, 31, 106, 197, 190, 217, 36, 203, 62, 180, 5, 5, 63, 239, 169, 132, 190, 206, 7, 113, 191, 44, 26, 142, 190, 48, 114, 12, 191, 49, 88, 187, 191, 77, 56, 164, 190, 209, 195, 150, 190, 63, 13, 144, 191, 88, 224, 211, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 249, 20, 191, 193, 31, 215, 62, 75, 228, 137, 190, 74, 95, 48, 63, 254, 197, 30, 188, 77, 207, 45, 62, 129, 193, 11, 191, 14, 86, 141, 61, 190, 229, 252, 188, 9, 1, 46, 63, 115, 135, 71, 62, 93, 160, 26, 191, 143, 7, 17, 62, 91, 35, 46, 63, 12, 150, 138, 62, 196, 146, 155, 61, 71, 44, 35, 190, 154, 252, 194, 189, 110, 70, 156, 62, 20, 244, 215, 62, 4, 150, 4, 63, 140, 167, 9, 63, 47, 76, 83, 63, 62, 87, 54, 61, 20, 183, 44, 190, 6, 151, 182, 190, 190, 5, 114, 62, 95, 194, 137, 62, 168, 204, 170, 190, 168, 175, 177, 190, 116, 221, 179, 189, 221, 212, 165, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 57, 131, 60, 53, 187, 169, 189, 45, 127, 95, 61, 229, 74, 151, 62, 139, 178, 65, 189, 81, 27, 198, 190, 99, 21, 37, 60, 224, 62, 29, 191, 181, 117, 155, 190, 120, 70, 208, 190, 84, 110, 28, 191, 2, 27, 152, 190, 146, 159, 213, 190, 242, 155, 142, 62, 168, 251, 64, 191, 192, 226, 171, 189, 44, 13, 165, 62, 117, 180, 42, 191, 45, 93, 27, 191, 83, 227, 16, 61, 55, 189, 10, 190, 109, 115, 191, 62, 108, 109, 108, 62, 246, 115, 54, 62, 234, 181, 243, 190, 113, 135, 170, 62, 128, 5, 122, 62, 226, 100, 187, 190, 180, 120, 102, 61, 54, 113, 194, 190, 244, 67, 65, 189, 232, 56, 20, 191, 13, 162, 76, 61, 170, 208, 193, 188, 164, 92, 57, 190, 7, 74, 74, 190, 36, 81, 211, 189, 229, 14, 22, 190, 64, 104, 165, 189, 172, 207, 4, 190, 167, 3, 135, 189, 217, 157, 218, 61, 137, 103, 23, 60, 192, 205, 54, 188, 155, 192, 58, 190, 76, 34, 3, 62, 63, 187, 41, 62, 210, 175, 134, 60, 192, 140, 16, 61, 166, 203, 122, 189, 202, 172, 165, 61, 239, 208, 33, 190, 225, 249, 78, 189, 133, 40, 6, 190, 238, 61, 212, 189, 181, 58, 169, 189, 209, 64, 180, 189, 46, 211, 217, 59, 85, 29, 119, 61, 212, 122, 22, 190, 166, 43, 217, 188, 139, 182, 21, 62, 156, 76, 57, 61, 0, 75, 37, 190, 255, 67, 231, 61, 118, 253, 147, 62, 39, 156, 16, 190, 38, 139, 22, 191, 122, 220, 144, 190, 165, 203, 150, 62, 95, 189, 197, 61, 67, 235, 156, 61, 109, 122, 2, 61, 129, 253, 12, 61, 146, 164, 4, 63, 109, 73, 191, 191, 78, 223, 158, 189, 1, 201, 16, 191, 72, 228, 80, 62, 118, 235, 66, 62, 101, 68, 27, 191, 135, 27, 187, 190, 91, 24, 179, 60, 10, 248, 174, 62, 6, 178, 65, 62, 118, 253, 43, 63, 75, 221, 4, 191, 133, 140, 165, 61, 72, 181, 1, 63, 174, 152, 22, 62, 247, 156, 150, 189, 72, 232, 70, 62, 122, 80, 64, 190, 215, 65, 6, 190, 60, 84, 240, 61, 150, 244, 4, 189, 81, 35, 240, 189, 255, 1, 195, 188, 15, 44, 6, 62, 123, 80, 161, 190, 63, 145, 2, 62, 216, 105, 169, 62, 224, 189, 1, 62, 4, 224, 65, 61, 50, 135, 28, 190, 217, 159, 214, 61, 166, 98, 171, 62, 220, 157, 47, 191, 61, 79, 119, 190, 171, 106, 182, 190, 199, 126, 176, 61, 29, 59, 247, 190, 205, 215, 168, 190, 216, 156, 136, 190, 248, 97, 181, 61, 186, 244, 224, 62, 92, 187, 159, 62, 98, 182, 5, 63, 174, 108, 143, 190, 100, 203, 225, 189, 8, 224, 20, 62, 80, 129, 138, 62, 42, 42, 114, 61, 177, 171, 204, 61, 196, 85, 239, 61, 99, 182, 36, 190, 157, 181, 173, 188, 207, 249, 89, 189, 137, 60, 237, 61, 138, 89, 93, 191, 209, 178, 206, 62, 15, 141, 207, 61, 35, 96, 135, 62, 40, 30, 93, 62, 93, 75, 8, 190, 100, 48, 130, 62, 247, 217, 200, 191, 42, 99, 28, 190, 207, 251, 106, 191, 139, 158, 60, 190, 214, 6, 31, 191, 111, 250, 204, 60, 19, 132, 252, 61, 241, 215, 31, 191, 57, 13, 93, 190, 58, 64, 134, 191, 2, 46, 187, 190, 132, 40, 134, 62, 205, 144, 152, 62, 119, 123, 122, 189, 203, 8, 188, 62, 215, 180, 114, 189, 126, 62, 80, 191, 218, 188, 185, 62, 151, 92, 134, 189, 90, 114, 77, 190, 230, 156, 183, 62, 205, 89, 142, 190, 2, 1, 162, 191, 26, 244, 78, 191, 16, 194, 247, 60, 36, 214, 213, 189, 9, 93, 226, 60, 165, 129, 40, 190, 178, 201, 241, 188, 170, 225, 45, 189, 209, 91, 193, 188, 173, 204, 214, 188, 180, 85, 80, 60, 118, 201, 36, 62, 25, 3, 52, 190, 172, 84, 31, 188, 91, 118, 10, 190, 25, 148, 23, 61, 60, 212, 104, 61, 144, 145, 106, 189, 207, 107, 1, 190, 53, 87, 82, 189, 77, 130, 121, 189, 79, 0, 179, 61, 37, 172, 7, 189, 243, 63, 21, 62, 28, 72, 252, 189, 162, 73, 221, 188, 133, 200, 114, 188, 221, 126, 25, 190, 138, 33, 136, 61, 122, 98, 59, 187, 64, 247, 52, 188, 13, 140, 201, 188, 81, 64, 29, 61, 97, 36, 107, 59, 248, 177, 185, 61, 180, 29, 13, 191, 9, 39, 78, 62, 101, 139, 171, 62, 49, 117, 5, 62, 17, 229, 0, 63, 138, 244, 145, 61, 193, 149, 146, 62, 252, 80, 245, 191, 114, 193, 89, 62, 221, 248, 50, 191, 147, 5, 107, 189, 208, 104, 202, 190, 240, 188, 212, 62, 221, 142, 89, 61, 55, 190, 9, 191, 11, 47, 157, 190, 99, 42, 15, 192, 70, 223, 239, 189, 243, 205, 40, 62, 142, 112, 101, 62, 206, 127, 174, 62, 124, 113, 193, 62, 178, 135, 137, 190, 225, 64, 246, 62, 155, 221, 97, 62, 242, 187, 238, 190, 171, 152, 26, 191, 51, 46, 147, 62, 198, 185, 230, 190, 100, 54, 164, 191, 11, 25, 146, 191, 152, 27, 8, 62, 7, 178, 85, 190, 11, 14, 180, 189, 9, 234, 204, 60, 95, 10, 72, 61, 153, 96, 50, 190, 31, 131, 27, 62, 61, 163, 123, 61, 94, 63, 78, 59, 123, 212, 192, 61, 19, 62, 140, 189, 93, 47, 147, 189, 142, 76, 161, 190, 208, 137, 190, 188, 157, 136, 189, 189, 49, 14, 230, 189, 58, 249, 29, 188, 72, 94, 55, 190, 48, 3, 10, 190, 46, 8, 216, 189, 119, 64, 223, 189, 64, 81, 31, 190, 74, 237, 195, 61, 226, 154, 56, 61, 193, 190, 250, 189, 36, 149, 41, 190, 0, 87, 159, 189, 104, 34, 194, 61, 71, 65, 95, 188, 206, 5, 113, 189, 131, 158, 177, 189, 179, 150, 35, 190, 75, 178, 147, 188, 203, 155, 18, 61, 130, 6, 3, 62, 20, 174, 45, 61, 223, 98, 160, 61, 11, 103, 20, 63, 211, 98, 133, 189, 47, 203, 15, 63, 55, 8, 24, 191, 193, 8, 85, 188, 103, 116, 59, 63, 96, 228, 58, 191, 148, 32, 133, 190, 123, 106, 217, 61, 112, 227, 30, 63, 110, 245, 167, 190, 71, 228, 126, 191, 122, 139, 251, 191, 149, 144, 137, 190, 123, 108, 218, 62, 69, 162, 198, 188, 180, 27, 38, 63, 8, 43, 54, 62, 13, 131, 12, 191, 121, 225, 0, 63, 116, 114, 87, 62, 179, 232, 48, 191, 170, 216, 18, 190, 96, 194, 132, 62, 60, 247, 164, 191, 204, 151, 119, 191, 155, 90, 92, 190, 3, 179, 143, 189, 13, 219, 11, 62, 66, 205, 14, 190, 232, 239, 15, 191, 251, 189, 88, 190, 111, 116, 39, 62, 205, 44, 62, 190, 157, 183, 164, 188, 236, 76, 150, 187, 162, 146, 0, 190, 153, 87, 12, 63, 243, 143, 171, 191, 238, 191, 43, 62, 56, 92, 212, 190, 57, 195, 167, 62, 242, 121, 227, 61, 127, 171, 232, 190, 255, 166, 32, 190, 179, 76, 15, 61, 207, 1, 137, 62, 210, 60, 68, 61, 49, 162, 177, 62, 165, 60, 247, 189, 136, 215, 32, 62, 212, 147, 64, 60, 5, 186, 43, 61, 115, 2, 64, 61, 91, 82, 63, 62, 182, 93, 33, 190, 217, 222, 75, 61, 142, 232, 239, 189, 248, 30, 177, 59, 214, 187, 6, 190, 248, 48, 34, 61, 235, 128, 88, 62, 229, 240, 66, 190, 25, 208, 30, 191, 160, 12, 131, 61, 69, 163, 31, 190, 176, 195, 122, 62, 222, 123, 159, 188, 43, 18, 235, 190, 81, 10, 62, 62, 110, 221, 104, 191, 96, 35, 211, 188, 107, 143, 6, 190, 40, 112, 211, 61, 154, 73, 171, 62, 135, 253, 242, 62, 46, 237, 207, 188, 106, 192, 142, 190, 85, 193, 162, 62, 248, 98, 66, 62, 73, 5, 93, 62, 133, 185, 4, 190, 162, 11, 127, 189, 232, 218, 39, 63, 70, 52, 58, 190, 208, 92, 253, 61, 74, 106, 152, 188, 7, 133, 183, 61, 197, 25, 104, 188, 180, 160, 132, 189, 103, 203, 185, 61, 77, 195, 131, 61, 64, 164, 11, 62, 114, 125, 157, 190, 240, 113, 232, 61, 59, 96, 209, 190, 63, 4, 243, 61, 1, 54, 34, 62, 27, 188, 23, 190, 127, 55, 14, 62, 53, 210, 233, 60, 61, 159, 186, 62, 79, 212, 216, 190, 72, 161, 140, 190, 25, 78, 17, 62, 41, 45, 2, 62, 173, 4, 148, 190, 254, 172, 255, 186, 10, 226, 195, 189, 206, 178, 190, 61, 54, 229, 46, 188, 49, 237, 131, 190, 46, 123, 35, 62, 210, 230, 44, 62, 192, 227, 192, 60, 210, 198, 39, 191, 122, 124, 28, 62, 59, 18, 11, 62, 186, 89, 66, 62, 17, 4, 33, 189, 34, 126, 50, 62, 174, 160, 227, 62, 251, 120, 82, 61, 7, 165, 71, 189, 149, 191, 201, 188, 175, 146, 39, 191, 35, 106, 89, 62, 19, 153, 221, 189, 231, 75, 59, 190, 137, 90, 168, 189, 20, 153, 174, 190, 103, 149, 85, 62, 78, 136, 169, 60, 89, 144, 49, 190, 76, 128, 184, 62, 242, 148, 11, 62, 31, 83, 167, 61, 234, 178, 149, 190, 98, 250, 218, 60, 141, 108, 185, 60, 250, 55, 110, 62, 23, 42, 145, 189, 205, 61, 24, 191, 251, 176, 81, 191, 24, 68, 214, 60, 253, 30, 123, 62, 34, 5, 162, 62, 39, 33, 75, 61, 255, 225, 29, 191, 160, 16, 200, 62, 74, 183, 50, 62, 215, 91, 219, 190, 228, 139, 160, 62, 160, 101, 135, 62, 40, 108, 5, 188, 150, 230, 29, 58, 192, 185, 82, 62, 238, 139, 161, 61, 166, 184, 177, 62, 36, 194, 21, 61, 39, 33, 25, 189, 91, 52, 19, 60, 172, 91, 132, 190, 105, 129, 160, 62, 21, 110, 153, 62, 148, 66, 121, 188, 74, 90, 38, 62, 39, 147, 98, 62, 100, 123, 239, 61, 169, 196, 198, 188, 101, 209, 121, 60, 148, 83, 255, 62, 193, 101, 133, 62, 109, 251, 156, 62, 118, 239, 160, 61, 251, 79, 102, 62, 253, 36, 158, 190, 140, 191, 101, 62, 41, 55, 0, 62, 151, 243, 179, 190, 217, 52, 138, 190, 0, 135, 173, 62, 142, 131, 91, 62, 131, 164, 40, 189, 80, 69, 138, 61, 178, 45, 84, 62, 131, 237, 20, 189, 52, 243, 120, 61, 93, 242, 86, 62, 62, 56, 157, 189, 224, 142, 127, 191, 28, 96, 154, 190, 167, 176, 195, 61, 19, 163, 240, 188, 72, 138, 113, 62, 173, 223, 242, 60, 217, 218, 7, 191, 231, 7, 9, 63, 173, 2, 243, 61, 101, 29, 143, 62, 144, 43, 96, 191, 148, 144, 56, 62, 102, 246, 176, 62, 52, 163, 146, 190, 182, 245, 188, 190, 174, 74, 238, 60, 248, 157, 218, 61, 168, 87, 93, 190, 223, 245, 160, 190, 213, 45, 136, 191, 92, 88, 48, 57, 20, 64, 7, 63, 153, 58, 110, 61, 128, 124, 232, 61, 98, 192, 66, 62, 248, 200, 93, 61, 182, 46, 197, 190, 102, 193, 105, 190, 154, 177, 36, 189, 198, 15, 226, 189, 86, 79, 233, 189, 146, 225, 163, 190, 72, 161, 238, 189, 158, 30, 146, 190, 174, 104, 2, 188, 52, 19, 2, 188, 246, 30, 12, 190, 255, 234, 165, 61, 62, 39, 97, 190, 132, 95, 166, 190, 28, 182, 53, 61, 17, 158, 13, 190, 62, 109, 200, 61, 225, 250, 28, 190, 250, 131, 204, 189, 141, 241, 130, 62, 186, 14, 77, 61, 104, 107, 199, 190, 112, 96, 228, 189, 52, 160, 151, 190, 10, 5, 107, 62, 200, 244, 128, 61, 86, 63, 116, 188, 171, 135, 102, 190, 188, 95, 57, 190, 12, 72, 239, 189, 4, 29, 50, 190, 23, 134, 37, 190, 64, 64, 70, 190, 22, 245, 38, 62, 147, 222, 96, 62, 208, 94, 224, 60, 22, 255, 157, 62, 200, 40, 232, 59, 127, 15, 83, 62, 103, 166, 207, 61, 63, 107, 126, 190, 116, 250, 139, 61, 15, 246, 129, 190, 27, 53, 28, 62, 117, 136, 169, 62, 13, 63, 171, 189, 228, 73, 184, 62, 3, 93, 249, 62, 159, 181, 30, 61, 165, 24, 11, 190, 200, 189, 144, 62, 108, 183, 222, 62, 110, 211, 149, 62, 72, 157, 213, 62, 236, 145, 139, 190, 216, 252, 28, 190, 143, 18, 188, 190, 55, 182, 187, 59, 9, 190, 140, 62, 226, 18, 145, 190, 250, 177, 204, 190, 158, 25, 156, 62, 154, 74, 145, 62, 63, 178, 141, 190, 184, 49, 28, 61, 252, 213, 110, 62, 254, 81, 144, 60, 216, 90, 255, 61, 150, 153, 143, 190, 53, 186, 220, 189, 58, 123, 13, 61, 96, 50, 92, 190, 75, 92, 99, 62, 86, 77, 46, 60, 146, 115, 11, 62, 149, 209, 129, 61, 252, 25, 11, 191, 57, 92, 82, 190, 207, 100, 106, 187, 103, 121, 166, 190, 30, 181, 204, 188, 161, 155, 95, 62, 219, 120, 231, 189, 204, 51, 144, 62, 248, 210, 155, 61, 165, 142, 255, 188, 61, 213, 41, 191, 89, 69, 2, 189, 238, 186, 188, 190, 222, 215, 197, 61, 250, 62, 224, 61, 195, 88, 227, 190, 204, 232, 70, 190, 8, 187, 72, 188, 202, 69, 181, 189, 220, 94, 30, 190, 229, 109, 45, 61, 205, 149, 30, 190, 190, 199, 158, 61, 1, 207, 110, 60, 187, 163, 139, 61, 75, 138, 206, 190, 222, 118, 140, 62, 173, 153, 159, 190, 35, 202, 243, 190, 72, 62, 163, 188, 123, 208, 115, 190, 100, 136, 221, 61, 189, 107, 160, 62, 249, 106, 230, 188, 29, 172, 71, 190, 51, 179, 140, 61, 232, 107, 245, 61, 239, 170, 76, 190, 145, 247, 66, 190, 199, 167, 254, 62, 220, 228, 19, 62, 173, 23, 215, 59, 240, 158, 31, 188, 63, 255, 70, 190, 32, 133, 129, 187, 39, 214, 27, 188, 147, 17, 164, 189, 122, 198, 21, 191, 78, 198, 88, 190, 235, 19, 170, 61, 43, 111, 31, 186, 126, 197, 193, 190, 168, 19, 216, 60, 0, 107, 175, 62, 215, 1, 0, 62, 31, 78, 47, 62, 18, 124, 144, 61, 128, 131, 149, 60, 111, 249, 237, 61, 88, 96, 32, 62, 129, 77, 88, 61, 236, 29, 19, 189, 30, 69, 20, 190, 185, 125, 148, 189, 167, 233, 234, 188, 122, 198, 23, 190, 132, 84, 208, 61, 248, 164, 40, 190, 28, 112, 196, 188, 248, 22, 34, 62, 234, 232, 141, 61, 184, 116, 170, 188, 232, 93, 54, 189, 30, 129, 8, 190, 244, 125, 6, 190, 138, 7, 93, 189, 197, 255, 9, 62, 164, 124, 42, 190, 143, 74, 0, 190, 40, 211, 137, 59, 248, 104, 121, 189, 188, 107, 17, 190, 116, 191, 218, 60, 233, 42, 202, 189, 208, 50, 45, 190, 40, 120, 153, 61, 197, 196, 17, 190, 155, 198, 187, 189, 18, 228, 144, 62, 127, 54, 139, 189, 78, 41, 44, 190, 196, 136, 149, 61, 54, 129, 20, 61, 158, 35, 1, 62, 215, 142, 204, 61, 95, 214, 88, 190, 32, 90, 96, 62, 146, 153, 104, 62, 185, 98, 191, 191, 247, 17, 26, 61, 221, 207, 5, 191, 115, 239, 36, 62, 37, 166, 35, 62, 68, 18, 144, 190, 63, 48, 176, 61, 8, 205, 103, 62, 150, 2, 90, 62, 239, 209, 147, 62, 15, 141, 227, 62, 148, 184, 0, 191, 180, 159, 41, 61, 26, 162, 168, 189, 182, 153, 150, 190, 157, 53, 104, 62, 10, 241, 60, 62, 18, 153, 134, 190, 123, 163, 246, 60, 94, 178, 11, 190, 161, 215, 134, 188, 249, 166, 184, 59, 177, 212, 137, 190, 248, 206, 175, 188, 62, 53, 71, 189, 149, 111, 193, 61, 83, 37, 81, 62, 75, 166, 22, 62, 105, 68, 84, 62, 79, 214, 176, 189, 17, 128, 141, 61, 220, 249, 153, 190, 112, 204, 23, 63, 218, 38, 178, 59, 178, 238, 85, 189, 9, 78, 228, 189, 84, 92, 161, 188, 254, 239, 38, 62, 1, 135, 33, 62, 35, 212, 16, 62, 26, 220, 37, 191, 198, 242, 12, 190, 134, 184, 143, 189, 48, 161, 164, 190, 116, 249, 46, 62, 212, 112, 62, 59, 70, 12, 126, 191, 23, 178, 227, 61, 195, 118, 161, 189, 107, 42, 198, 190, 152, 3, 46, 62, 222, 166, 95, 190, 183, 230, 129, 188, 229, 211, 194, 189, 211, 208, 42, 190, 26, 143, 196, 189, 172, 21, 139, 190, 208, 154, 153, 189, 176, 138, 54, 59, 159, 34, 194, 189, 42, 202, 150, 189, 176, 27, 167, 189, 160, 42, 190, 60, 163, 237, 10, 61, 142, 120, 73, 190, 138, 52, 141, 61, 239, 85, 151, 61, 246, 230, 101, 189, 113, 101, 29, 189, 184, 153, 83, 190, 211, 168, 55, 190, 32, 96, 141, 61, 164, 53, 95, 190, 213, 216, 89, 61, 40, 141, 243, 189, 103, 77, 100, 189, 65, 68, 132, 60, 91, 120, 60, 190, 89, 96, 35, 190, 202, 230, 132, 189, 66, 90, 97, 189, 21, 91, 219, 188, 70, 83, 19, 188, 42, 150, 53, 61, 40, 254, 101, 189, 105, 183, 145, 189, 16, 242, 252, 189, 11, 173, 187, 189, 23, 125, 103, 188, 46, 134, 1, 61, 64, 191, 29, 190, 181, 192, 55, 189, 58, 60, 17, 62, 231, 230, 158, 61, 254, 27, 86, 61, 217, 242, 190, 61, 213, 217, 122, 189, 90, 146, 150, 60, 82, 106, 50, 61, 100, 103, 185, 189, 219, 134, 175, 189, 140, 204, 58, 61, 102, 209, 96, 189, 207, 175, 194, 60, 134, 249, 175, 189, 159, 162, 5, 190, 133, 85, 109, 61, 180, 72, 157, 189, 160, 242, 130, 189, 84, 2, 10, 190, 109, 196, 23, 61, 234, 185, 37, 189, 167, 53, 134, 61, 52, 193, 225, 60, 31, 110, 10, 190, 77, 193, 204, 61, 62, 131, 49, 190, 72, 66, 246, 59, 12, 7, 131, 189, 136, 172, 131, 62, 45, 152, 164, 189, 14, 192, 25, 62, 96, 217, 93, 62, 250, 15, 59, 189, 168, 201, 158, 62, 248, 188, 17, 61, 188, 100, 79, 60, 245, 118, 141, 62, 193, 230, 131, 63, 26, 53, 215, 189, 57, 136, 157, 189, 239, 27, 247, 61, 6, 19, 184, 189, 201, 216, 161, 62, 127, 241, 252, 188, 201, 46, 0, 189, 32, 121, 2, 190, 7, 193, 141, 61, 248, 188, 82, 190, 185, 184, 191, 190, 1, 63, 217, 61, 193, 196, 242, 62, 30, 40, 230, 189, 22, 216, 243, 60, 5, 65, 50, 189, 137, 129, 46, 62, 218, 107, 109, 189, 69, 171, 204, 61, 245, 230, 227, 61, 59, 16, 225, 61, 120, 149, 150, 188, 75, 135, 239, 187, 237, 84, 248, 189, 206, 218, 39, 190, 26, 32, 211, 189, 230, 231, 142, 189, 47, 119, 152, 189, 36, 67, 0, 190, 198, 131, 31, 190, 198, 236, 178, 189, 4, 12, 96, 61, 14, 170, 39, 61, 210, 190, 204, 189, 28, 86, 146, 189, 129, 2, 170, 61, 70, 121, 41, 61, 89, 107, 39, 190, 172, 63, 139, 61, 224, 208, 55, 190, 228, 93, 230, 61, 179, 178, 62, 189, 96, 54, 20, 190, 122, 6, 147, 61, 96, 71, 217, 61, 171, 236, 170, 60, 10, 191, 134, 61, 65, 225, 245, 61, 245, 237, 32, 190, 161, 220, 249, 61, 232, 103, 88, 61, 29, 67, 158, 189, 66, 169, 79, 61, 66, 185, 215, 60, 169, 10, 127, 189, 197, 138, 22, 188, 103, 103, 43, 189, 119, 253, 147, 189, 40, 183, 71, 61, 207, 67, 116, 189, 26, 222, 33, 190, 45, 250, 23, 190, 176, 251, 44, 190, 13, 87, 29, 190, 150, 25, 167, 189, 202, 250, 200, 61, 144, 108, 90, 189, 84, 85, 34, 62, 142, 248, 34, 58, 55, 163, 37, 62, 183, 46, 27, 62, 253, 205, 202, 60, 113, 214, 80, 189, 122, 207, 185, 61, 221, 209, 220, 189, 221, 59, 92, 187, 88, 107, 135, 61, 57, 137, 217, 61, 190, 24, 222, 61, 52, 225, 88, 189, 148, 97, 211, 189, 249, 115, 52, 190, 68, 202, 52, 190, 189, 224, 76, 61, 79, 225, 210, 61, 190, 204, 20, 190, 186, 241, 63, 62, 225, 144, 9, 61, 201, 207, 38, 59, 56, 227, 133, 62, 251, 107, 26, 62, 113, 53, 37, 189, 162, 245, 192, 62, 226, 221, 53, 62, 234, 38, 215, 190, 165, 30, 211, 62, 27, 92, 32, 61, 169, 147, 68, 61, 214, 220, 229, 188, 179, 194, 26, 62, 131, 252, 11, 191, 156, 33, 139, 190, 84, 152, 46, 61, 190, 82, 0, 190, 230, 229, 53, 60, 156, 186, 37, 190, 80, 66, 5, 188, 31, 9, 44, 62, 85, 58, 101, 191, 238, 242, 143, 189, 173, 217, 220, 62, 87, 76, 44, 190, 156, 248, 79, 61, 130, 193, 166, 188, 90, 39, 236, 62, 147, 52, 200, 190, 135, 20, 185, 188, 98, 58, 144, 62, 36, 228, 183, 190, 144, 109, 230, 190, 47, 160, 149, 191, 12, 85, 41, 190, 162, 155, 218, 61, 209, 132, 205, 189, 251, 109, 175, 61, 15, 37, 55, 191, 213, 61, 167, 61, 109, 198, 5, 191, 174, 84, 43, 62, 11, 128, 22, 191, 90, 32, 37, 190, 144, 220, 52, 63, 250, 96, 91, 190, 53, 1, 64, 62, 0, 200, 65, 191, 122, 15, 52, 63, 163, 61, 82, 190, 176, 173, 196, 62, 15, 26, 221, 60, 82, 199, 242, 188, 9, 233, 175, 187, 253, 83, 167, 62, 158, 241, 86, 190, 21, 17, 57, 61, 129, 206, 241, 60, 196, 104, 139, 189, 248, 118, 210, 62, 113, 142, 105, 61, 145, 178, 140, 189, 213, 99, 42, 191, 80, 105, 181, 61, 30, 187, 20, 189, 200, 77, 82, 190, 146, 131, 246, 59, 61, 159, 4, 62, 146, 83, 18, 62, 5, 86, 107, 191, 139, 14, 31, 191, 206, 1, 222, 190, 247, 45, 17, 191, 83, 43, 97, 191, 175, 129, 176, 61, 150, 72, 22, 61, 110, 24, 102, 191, 252, 124, 148, 61, 213, 143, 51, 191, 176, 108, 105, 191, 72, 150, 137, 190, 241, 236, 199, 61, 246, 112, 94, 190, 205, 117, 93, 62, 183, 243, 18, 60, 111, 78, 178, 190, 93, 131, 214, 187, 195, 253, 208, 60, 188, 8, 141, 61, 179, 214, 67, 190, 47, 53, 5, 190, 134, 242, 19, 191, 177, 1, 86, 190, 101, 30, 19, 62, 40, 92, 209, 189, 115, 22, 63, 62, 142, 55, 79, 191, 248, 23, 5, 190, 215, 81, 145, 189, 92, 42, 77, 190, 176, 74, 30, 62, 156, 226, 95, 62, 82, 90, 10, 190, 46, 210, 166, 61, 241, 204, 69, 62, 58, 165, 68, 190, 217, 162, 99, 191, 120, 28, 231, 189, 69, 92, 99, 60, 156, 117, 12, 191, 135, 62, 205, 61, 246, 96, 51, 190, 46, 154, 82, 61, 85, 239, 26, 62, 15, 130, 223, 61, 209, 202, 253, 190, 95, 14, 229, 61, 219, 229, 150, 190, 82, 77, 68, 190, 234, 180, 135, 61, 210, 83, 228, 188, 197, 36, 178, 62, 232, 143, 88, 62, 64, 117, 183, 62, 240, 61, 24, 62, 84, 128, 127, 189, 165, 135, 7, 190, 230, 178, 153, 189, 152, 14, 115, 61, 115, 44, 238, 60, 227, 64, 199, 61, 107, 4, 164, 61, 125, 119, 210, 188, 102, 69, 38, 190, 39, 35, 222, 61, 9, 237, 64, 190, 138, 13, 92, 190, 64, 162, 176, 61, 191, 165, 135, 61, 158, 249, 121, 190, 54, 83, 215, 61, 38, 77, 154, 61, 83, 178, 230, 189, 41, 174, 61, 189, 175, 227, 163, 61, 19, 15, 28, 190, 228, 72, 37, 190, 218, 49, 141, 61, 124, 101, 165, 189, 49, 148, 32, 61, 70, 105, 212, 189, 187, 88, 59, 190, 189, 30, 200, 61, 159, 72, 26, 189, 24, 215, 117, 189, 213, 192, 7, 61, 177, 31, 246, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 173, 122, 62, 164, 26, 183, 61, 70, 59, 194, 61, 252, 15, 218, 61, 48, 109, 143, 61, 152, 130, 192, 189, 65, 81, 142, 61, 50, 173, 30, 190, 69, 107, 161, 62, 71, 78, 46, 62, 156, 164, 97, 61, 178, 7, 8, 60, 60, 176, 166, 60, 213, 214, 50, 62, 103, 77, 181, 190, 120, 199, 29, 61, 48, 253, 97, 62, 178, 110, 169, 189, 7, 31, 80, 62, 222, 23, 162, 60, 222, 32, 122, 61, 95, 10, 152, 190, 154, 223, 12, 190, 163, 51, 12, 188, 88, 52, 130, 190, 2, 86, 98, 190, 28, 222, 5, 190, 69, 105, 162, 190, 181, 56, 53, 62, 148, 17, 153, 189, 119, 246, 81, 189, 217, 159, 106, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {241, 93, 133, 191, 167, 59, 30, 190, 103, 116, 15, 63, 48, 95, 121, 62, 232, 130, 131, 63, 226, 104, 44, 190, 132, 90, 92, 63, 143, 71, 248, 61, 83, 198, 80, 63, 98, 239, 200, 62, 132, 87, 82, 62, 153, 202, 19, 190, 169, 200, 254, 190, 142, 10, 157, 190, 29, 49, 160, 191, 166, 36, 222, 62, 107, 75, 0, 191, 84, 218, 117, 62, 162, 197, 180, 190, 45, 162, 95, 189, 145, 88, 63, 62, 86, 129, 67, 62, 129, 95, 157, 61, 193, 199, 23, 190, 125, 141, 62, 62, 197, 199, 156, 187, 41, 233, 172, 189, 184, 56, 58, 190, 216, 27, 24, 191, 196, 105, 58, 63, 125, 159, 116, 61, 57, 163, 83, 189, 94, 111, 79, 62, 186, 198, 252, 61, 69, 79, 242, 62, 13, 227, 250, 190, 193, 124, 12, 62, 168, 116, 213, 61, 73, 218, 108, 190, 223, 104, 179, 189, 10, 31, 124, 62, 187, 245, 19, 190, 224, 159, 161, 62, 166, 212, 134, 190, 27, 19, 20, 60, 133, 253, 71, 190, 209, 167, 71, 62, 92, 152, 128, 188, 101, 156, 35, 190, 252, 229, 22, 61, 27, 185, 23, 61, 92, 147, 242, 61, 79, 113, 38, 191, 103, 178, 137, 62, 194, 44, 110, 61, 166, 139, 179, 61, 221, 219, 175, 62, 94, 240, 166, 187, 236, 248, 11, 62, 66, 180, 139, 62, 169, 118, 99, 190, 224, 92, 112, 61, 48, 141, 148, 190, 144, 120, 10, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 148, 50, 190, 52, 146, 169, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {9, 68, 36, 62, 247, 190, 156, 191, 240, 55, 253, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {197, 171, 81, 63, 228, 123, 162, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0070/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}