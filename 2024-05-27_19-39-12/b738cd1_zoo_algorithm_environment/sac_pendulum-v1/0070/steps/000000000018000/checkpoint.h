// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 134, 58, 190, 40, 157, 44, 62, 166, 101, 42, 61, 211, 58, 249, 62, 107, 189, 53, 191, 205, 175, 131, 190, 247, 229, 88, 190, 149, 139, 37, 63, 6, 137, 44, 63, 147, 45, 125, 189, 4, 188, 146, 63, 89, 112, 157, 61, 152, 156, 233, 62, 203, 74, 55, 63, 242, 35, 145, 62, 209, 24, 89, 62, 197, 219, 187, 62, 255, 192, 52, 191, 231, 241, 77, 189, 22, 203, 155, 60, 69, 68, 96, 189, 11, 124, 43, 62, 22, 17, 22, 61, 85, 124, 22, 191, 120, 25, 233, 190, 209, 72, 160, 191, 17, 55, 153, 190, 32, 24, 114, 63, 58, 27, 160, 62, 202, 102, 45, 62, 79, 182, 9, 63, 200, 0, 109, 191, 191, 66, 155, 190, 124, 45, 41, 63, 255, 104, 170, 63, 87, 124, 198, 62, 88, 31, 27, 63, 18, 100, 107, 190, 170, 63, 69, 63, 115, 157, 57, 190, 226, 31, 140, 63, 215, 253, 197, 60, 52, 253, 144, 62, 140, 180, 30, 190, 71, 156, 181, 190, 159, 194, 138, 62, 193, 237, 233, 190, 129, 251, 225, 62, 39, 101, 168, 191, 185, 227, 60, 62, 163, 90, 224, 189, 243, 123, 36, 191, 123, 150, 170, 191, 234, 44, 115, 190, 175, 83, 48, 63, 249, 13, 3, 63, 54, 242, 22, 63, 216, 20, 115, 61, 242, 136, 132, 191, 127, 38, 141, 62, 166, 63, 30, 63, 151, 149, 27, 191, 225, 75, 233, 62, 27, 254, 183, 190, 51, 167, 46, 191, 188, 220, 166, 189, 42, 205, 4, 191, 240, 35, 64, 63, 32, 224, 50, 62, 170, 77, 150, 62, 112, 132, 90, 63, 39, 197, 20, 191, 157, 67, 252, 62, 129, 235, 156, 191, 243, 228, 245, 189, 241, 251, 61, 191, 228, 248, 139, 61, 116, 148, 6, 63, 156, 43, 237, 62, 187, 208, 94, 63, 44, 3, 227, 190, 158, 176, 6, 63, 178, 120, 128, 62, 230, 186, 15, 191, 59, 194, 188, 190, 147, 76, 185, 62, 29, 94, 4, 63, 203, 91, 11, 190, 104, 234, 143, 191, 232, 199, 89, 190, 38, 46, 14, 191, 215, 174, 196, 191, 122, 148, 151, 190, 216, 188, 177, 190, 188, 229, 144, 191, 46, 240, 184, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 249, 20, 191, 243, 42, 152, 62, 36, 109, 108, 190, 136, 237, 46, 63, 13, 55, 72, 189, 149, 81, 252, 61, 129, 193, 11, 191, 251, 155, 220, 60, 205, 25, 188, 189, 16, 186, 68, 63, 223, 41, 27, 62, 54, 60, 23, 191, 109, 178, 196, 61, 76, 151, 52, 63, 87, 243, 120, 62, 133, 168, 14, 61, 80, 200, 103, 190, 71, 79, 215, 189, 46, 80, 105, 62, 231, 123, 239, 62, 14, 8, 37, 63, 39, 141, 13, 63, 48, 150, 90, 63, 220, 173, 180, 61, 212, 44, 40, 189, 164, 115, 129, 190, 40, 41, 141, 62, 84, 173, 150, 62, 70, 200, 148, 190, 240, 8, 124, 190, 80, 113, 254, 189, 153, 62, 64, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 57, 131, 60, 194, 66, 224, 189, 222, 72, 142, 61, 154, 86, 151, 62, 50, 237, 23, 190, 24, 176, 230, 190, 99, 21, 37, 60, 64, 251, 4, 191, 56, 105, 205, 190, 184, 63, 12, 191, 84, 110, 28, 191, 55, 180, 253, 190, 98, 26, 255, 190, 64, 130, 147, 62, 108, 98, 45, 191, 106, 14, 75, 190, 253, 73, 19, 63, 55, 86, 80, 191, 197, 156, 50, 191, 92, 3, 218, 189, 157, 145, 65, 190, 1, 153, 1, 63, 196, 238, 135, 62, 35, 39, 40, 190, 234, 181, 243, 190, 137, 47, 220, 62, 28, 169, 241, 189, 136, 147, 219, 190, 187, 98, 212, 61, 6, 242, 7, 191, 59, 147, 53, 190, 52, 83, 38, 191, 13, 162, 76, 61, 170, 208, 193, 188, 164, 92, 57, 190, 7, 74, 74, 190, 36, 81, 211, 189, 229, 14, 22, 190, 64, 104, 165, 189, 172, 207, 4, 190, 167, 3, 135, 189, 217, 157, 218, 61, 137, 103, 23, 60, 192, 205, 54, 188, 155, 192, 58, 190, 76, 34, 3, 62, 63, 187, 41, 62, 210, 175, 134, 60, 192, 140, 16, 61, 166, 203, 122, 189, 202, 172, 165, 61, 239, 208, 33, 190, 225, 249, 78, 189, 133, 40, 6, 190, 238, 61, 212, 189, 181, 58, 169, 189, 209, 64, 180, 189, 46, 211, 217, 59, 85, 29, 119, 61, 212, 122, 22, 190, 166, 43, 217, 188, 139, 182, 21, 62, 156, 76, 57, 61, 0, 75, 37, 190, 255, 67, 231, 61, 182, 79, 154, 62, 25, 215, 241, 189, 34, 172, 28, 191, 9, 147, 69, 190, 142, 84, 147, 62, 95, 189, 197, 61, 134, 209, 134, 61, 222, 23, 158, 188, 63, 124, 189, 61, 2, 183, 5, 63, 165, 65, 183, 191, 224, 4, 130, 189, 127, 71, 22, 191, 32, 214, 82, 62, 90, 119, 77, 62, 105, 43, 35, 191, 47, 108, 218, 190, 45, 127, 162, 61, 159, 82, 168, 62, 153, 244, 109, 62, 240, 167, 33, 63, 14, 1, 14, 191, 91, 56, 188, 61, 78, 210, 0, 63, 255, 168, 34, 62, 35, 42, 92, 189, 84, 81, 81, 62, 150, 227, 44, 190, 110, 128, 59, 190, 79, 34, 121, 61, 125, 178, 130, 189, 81, 35, 240, 189, 7, 114, 242, 188, 35, 136, 39, 62, 24, 246, 163, 190, 186, 233, 235, 61, 163, 31, 181, 62, 224, 189, 1, 62, 89, 200, 139, 61, 244, 104, 52, 190, 178, 55, 173, 61, 3, 89, 166, 62, 79, 61, 55, 191, 177, 33, 119, 190, 15, 133, 174, 190, 69, 143, 175, 61, 33, 239, 240, 190, 27, 48, 179, 190, 203, 201, 149, 190, 37, 184, 170, 61, 73, 186, 220, 62, 221, 51, 161, 62, 2, 245, 5, 63, 159, 216, 131, 190, 212, 163, 72, 189, 51, 13, 2, 62, 59, 131, 161, 62, 61, 147, 199, 61, 16, 184, 247, 61, 154, 95, 29, 62, 232, 72, 46, 190, 160, 235, 39, 189, 109, 37, 80, 189, 137, 60, 237, 61, 248, 133, 108, 191, 41, 206, 189, 62, 163, 238, 188, 61, 244, 132, 102, 62, 255, 138, 99, 62, 93, 75, 8, 190, 108, 221, 119, 62, 32, 146, 197, 191, 215, 206, 43, 190, 145, 224, 164, 191, 10, 136, 109, 190, 16, 95, 36, 191, 155, 160, 112, 60, 248, 200, 180, 61, 196, 245, 34, 191, 92, 242, 152, 190, 210, 212, 120, 191, 41, 173, 197, 190, 128, 20, 131, 62, 180, 75, 142, 62, 163, 184, 20, 61, 34, 97, 180, 62, 47, 103, 73, 60, 11, 43, 84, 191, 17, 200, 168, 62, 246, 2, 132, 189, 143, 104, 93, 190, 63, 220, 165, 62, 205, 89, 142, 190, 108, 222, 159, 191, 241, 58, 50, 191, 16, 194, 247, 60, 36, 214, 213, 189, 9, 93, 226, 60, 165, 129, 40, 190, 178, 201, 241, 188, 170, 225, 45, 189, 209, 91, 193, 188, 173, 204, 214, 188, 180, 85, 80, 60, 118, 201, 36, 62, 25, 3, 52, 190, 172, 84, 31, 188, 91, 118, 10, 190, 25, 148, 23, 61, 60, 212, 104, 61, 144, 145, 106, 189, 207, 107, 1, 190, 53, 87, 82, 189, 77, 130, 121, 189, 79, 0, 179, 61, 37, 172, 7, 189, 243, 63, 21, 62, 28, 72, 252, 189, 162, 73, 221, 188, 133, 200, 114, 188, 221, 126, 25, 190, 138, 33, 136, 61, 122, 98, 59, 187, 64, 247, 52, 188, 13, 140, 201, 188, 81, 64, 29, 61, 97, 36, 107, 59, 248, 177, 185, 61, 62, 88, 23, 191, 9, 69, 80, 62, 179, 161, 180, 62, 82, 216, 17, 62, 184, 3, 234, 62, 138, 244, 145, 61, 23, 161, 132, 62, 159, 159, 230, 191, 47, 195, 146, 62, 169, 129, 56, 191, 83, 106, 143, 189, 234, 87, 183, 190, 121, 186, 222, 62, 166, 107, 54, 189, 155, 219, 253, 190, 243, 168, 190, 190, 225, 95, 6, 192, 231, 217, 159, 189, 80, 146, 89, 62, 200, 150, 136, 62, 82, 124, 235, 62, 38, 8, 204, 62, 171, 255, 143, 190, 86, 7, 73, 63, 181, 75, 85, 62, 11, 252, 19, 191, 165, 209, 70, 191, 204, 145, 143, 62, 164, 204, 200, 190, 167, 142, 147, 191, 100, 249, 125, 191, 152, 27, 8, 62, 7, 178, 85, 190, 11, 14, 180, 189, 9, 234, 204, 60, 95, 10, 72, 61, 153, 96, 50, 190, 31, 131, 27, 62, 61, 163, 123, 61, 94, 63, 78, 59, 123, 212, 192, 61, 19, 62, 140, 189, 93, 47, 147, 189, 142, 76, 161, 190, 208, 137, 190, 188, 157, 136, 189, 189, 49, 14, 230, 189, 58, 249, 29, 188, 72, 94, 55, 190, 48, 3, 10, 190, 46, 8, 216, 189, 119, 64, 223, 189, 64, 81, 31, 190, 74, 237, 195, 61, 226, 154, 56, 61, 193, 190, 250, 189, 36, 149, 41, 190, 0, 87, 159, 189, 104, 34, 194, 61, 71, 65, 95, 188, 206, 5, 113, 189, 131, 158, 177, 189, 179, 150, 35, 190, 75, 178, 147, 188, 1, 231, 167, 60, 99, 183, 28, 62, 177, 195, 66, 189, 73, 39, 208, 61, 227, 95, 30, 63, 211, 98, 133, 189, 184, 126, 27, 63, 163, 169, 51, 191, 210, 244, 180, 188, 85, 133, 54, 63, 99, 55, 78, 191, 107, 247, 106, 190, 172, 61, 104, 60, 110, 91, 32, 63, 55, 3, 150, 190, 115, 92, 138, 191, 245, 221, 4, 192, 222, 226, 102, 190, 85, 47, 230, 62, 2, 27, 96, 60, 252, 227, 45, 63, 170, 161, 6, 62, 145, 149, 253, 190, 241, 171, 2, 63, 216, 226, 119, 62, 91, 254, 42, 191, 227, 152, 241, 189, 117, 255, 145, 62, 143, 30, 183, 191, 24, 177, 141, 191, 157, 201, 11, 190, 3, 179, 143, 189, 236, 85, 20, 62, 92, 128, 17, 190, 119, 192, 20, 191, 74, 166, 50, 190, 248, 81, 55, 62, 205, 44, 62, 190, 213, 26, 15, 188, 172, 98, 30, 189, 90, 236, 214, 189, 160, 136, 12, 63, 35, 222, 164, 191, 179, 204, 29, 62, 62, 68, 217, 190, 147, 225, 171, 62, 83, 34, 205, 61, 78, 10, 248, 190, 98, 77, 75, 190, 0, 100, 69, 61, 189, 204, 111, 62, 227, 251, 101, 61, 160, 75, 158, 62, 192, 11, 43, 190, 38, 22, 78, 62, 251, 77, 103, 58, 95, 163, 250, 60, 29, 127, 177, 61, 214, 221, 87, 62, 160, 123, 39, 190, 42, 222, 159, 60, 180, 157, 28, 190, 132, 0, 101, 187, 214, 187, 6, 190, 153, 145, 189, 188, 19, 149, 87, 62, 35, 30, 132, 190, 62, 227, 29, 191, 38, 239, 174, 61, 69, 163, 31, 190, 140, 166, 135, 62, 18, 37, 129, 189, 169, 149, 9, 191, 22, 127, 213, 61, 49, 148, 115, 191, 173, 127, 219, 188, 67, 22, 37, 190, 161, 140, 183, 61, 48, 230, 173, 62, 168, 245, 3, 63, 77, 191, 160, 189, 99, 112, 152, 190, 16, 85, 153, 62, 213, 40, 63, 62, 35, 74, 53, 62, 55, 21, 36, 190, 194, 246, 86, 188, 176, 115, 25, 63, 96, 22, 67, 190, 16, 219, 28, 62, 186, 125, 142, 187, 99, 196, 176, 61, 129, 39, 156, 189, 234, 52, 241, 189, 7, 185, 154, 61, 77, 195, 131, 61, 254, 173, 210, 61, 150, 160, 226, 189, 214, 43, 70, 62, 158, 122, 17, 191, 177, 42, 10, 62, 1, 54, 34, 62, 95, 235, 5, 190, 54, 153, 31, 62, 224, 158, 208, 188, 250, 8, 170, 62, 214, 128, 223, 190, 124, 5, 153, 190, 126, 250, 101, 62, 233, 13, 4, 62, 242, 26, 152, 190, 132, 189, 93, 58, 9, 118, 135, 189, 113, 82, 57, 189, 47, 5, 101, 60, 177, 132, 212, 190, 178, 143, 43, 62, 122, 109, 146, 62, 50, 181, 18, 61, 129, 112, 48, 191, 144, 242, 214, 62, 210, 98, 10, 62, 240, 15, 66, 62, 13, 124, 78, 62, 62, 147, 89, 62, 131, 114, 240, 62, 224, 161, 54, 61, 7, 165, 71, 189, 153, 110, 134, 188, 122, 19, 91, 191, 203, 147, 137, 62, 5, 149, 112, 190, 8, 17, 28, 190, 137, 90, 168, 189, 199, 162, 159, 190, 19, 11, 143, 62, 110, 19, 19, 61, 120, 47, 40, 190, 200, 12, 186, 62, 114, 98, 192, 62, 229, 176, 1, 62, 107, 56, 133, 190, 59, 193, 148, 62, 79, 135, 74, 60, 236, 235, 159, 62, 85, 228, 146, 190, 133, 43, 128, 190, 214, 126, 135, 191, 152, 120, 157, 61, 56, 22, 150, 62, 191, 23, 172, 62, 163, 9, 171, 61, 168, 56, 116, 191, 172, 143, 208, 62, 119, 226, 71, 62, 23, 11, 50, 191, 1, 21, 200, 62, 204, 15, 174, 62, 238, 41, 169, 60, 150, 230, 29, 58, 189, 219, 79, 62, 196, 115, 189, 61, 255, 242, 188, 62, 216, 87, 174, 60, 230, 148, 51, 189, 91, 52, 19, 60, 25, 201, 134, 190, 93, 225, 173, 62, 144, 183, 145, 62, 176, 104, 61, 188, 254, 91, 62, 62, 225, 113, 111, 62, 175, 51, 6, 62, 25, 199, 213, 188, 83, 184, 197, 60, 239, 195, 251, 62, 61, 243, 150, 62, 8, 222, 149, 62, 134, 10, 216, 61, 234, 174, 95, 62, 215, 244, 163, 190, 224, 123, 124, 62, 175, 7, 203, 61, 152, 34, 180, 190, 223, 192, 123, 190, 254, 128, 164, 62, 232, 173, 78, 62, 68, 171, 190, 188, 249, 129, 212, 61, 133, 83, 117, 62, 109, 184, 17, 189, 52, 243, 120, 61, 115, 47, 87, 62, 90, 57, 11, 190, 224, 129, 135, 191, 15, 180, 247, 190, 156, 253, 219, 61, 19, 163, 240, 188, 147, 0, 127, 62, 81, 81, 76, 61, 66, 154, 12, 191, 187, 116, 11, 63, 184, 204, 152, 189, 120, 250, 185, 62, 16, 34, 131, 191, 45, 87, 63, 62, 205, 75, 209, 62, 17, 32, 138, 190, 123, 242, 174, 190, 89, 159, 21, 62, 111, 1, 16, 62, 202, 212, 72, 190, 143, 171, 151, 190, 21, 79, 152, 191, 229, 119, 131, 59, 255, 68, 11, 63, 195, 185, 89, 61, 167, 181, 218, 61, 203, 215, 67, 62, 104, 208, 229, 187, 57, 86, 182, 190, 99, 228, 81, 190, 45, 181, 198, 188, 198, 15, 226, 189, 118, 20, 6, 190, 187, 144, 225, 190, 165, 239, 31, 190, 183, 202, 215, 190, 145, 209, 70, 60, 52, 19, 2, 188, 160, 159, 249, 189, 200, 41, 251, 61, 91, 13, 227, 190, 43, 50, 195, 190, 85, 14, 52, 61, 99, 135, 60, 189, 250, 102, 224, 61, 227, 186, 27, 190, 46, 233, 70, 189, 179, 192, 199, 62, 134, 148, 204, 61, 185, 27, 6, 191, 174, 185, 35, 190, 144, 36, 131, 190, 228, 43, 147, 62, 112, 80, 55, 62, 186, 183, 144, 60, 36, 148, 155, 190, 238, 49, 34, 190, 15, 31, 165, 189, 104, 237, 37, 190, 47, 194, 134, 190, 131, 204, 67, 190, 181, 252, 78, 62, 74, 97, 131, 62, 208, 94, 224, 60, 138, 225, 157, 62, 237, 222, 157, 60, 82, 30, 101, 62, 150, 143, 186, 61, 32, 26, 131, 190, 116, 250, 139, 61, 79, 40, 133, 190, 218, 223, 54, 62, 32, 251, 164, 62, 128, 173, 159, 189, 67, 125, 194, 62, 238, 135, 0, 63, 21, 63, 66, 61, 110, 43, 11, 190, 215, 59, 150, 62, 184, 99, 223, 62, 113, 237, 166, 62, 0, 60, 209, 62, 253, 1, 121, 190, 59, 211, 30, 190, 123, 181, 192, 190, 77, 49, 203, 60, 164, 38, 123, 62, 244, 102, 143, 190, 157, 39, 193, 190, 150, 93, 146, 62, 163, 244, 138, 62, 31, 81, 133, 190, 176, 244, 144, 61, 180, 62, 135, 62, 61, 24, 147, 60, 216, 90, 255, 61, 154, 213, 131, 190, 16, 115, 191, 189, 214, 37, 242, 187, 50, 189, 80, 191, 174, 230, 129, 62, 86, 77, 46, 60, 105, 228, 42, 62, 55, 134, 248, 60, 218, 109, 37, 191, 141, 29, 75, 190, 21, 189, 79, 189, 103, 121, 166, 190, 14, 19, 85, 189, 249, 131, 118, 62, 219, 120, 231, 189, 113, 203, 154, 62, 32, 243, 56, 61, 111, 247, 60, 189, 220, 240, 38, 191, 89, 69, 2, 189, 15, 87, 177, 190, 244, 77, 138, 189, 176, 174, 26, 62, 230, 18, 15, 191, 209, 104, 62, 190, 213, 174, 213, 60, 204, 240, 88, 189, 192, 247, 28, 190, 1, 4, 177, 187, 20, 28, 66, 190, 128, 235, 218, 61, 1, 207, 110, 60, 8, 161, 201, 61, 25, 37, 173, 190, 94, 109, 154, 62, 121, 158, 136, 190, 39, 186, 5, 191, 72, 62, 163, 188, 17, 190, 134, 190, 131, 175, 48, 62, 187, 93, 171, 62, 167, 34, 124, 60, 122, 36, 53, 190, 248, 76, 217, 61, 81, 194, 14, 62, 89, 158, 60, 190, 63, 169, 65, 190, 243, 170, 232, 62, 116, 223, 96, 62, 231, 99, 98, 61, 8, 1, 102, 61, 13, 212, 42, 190, 20, 29, 183, 61, 213, 147, 14, 61, 10, 163, 105, 190, 196, 75, 247, 190, 77, 38, 159, 189, 2, 106, 136, 60, 123, 241, 56, 188, 122, 228, 163, 190, 168, 37, 211, 61, 168, 173, 210, 62, 255, 32, 59, 62, 31, 78, 47, 62, 18, 124, 144, 61, 128, 131, 149, 60, 111, 249, 237, 61, 88, 96, 32, 62, 129, 77, 88, 61, 236, 29, 19, 189, 30, 69, 20, 190, 185, 125, 148, 189, 167, 233, 234, 188, 122, 198, 23, 190, 132, 84, 208, 61, 248, 164, 40, 190, 28, 112, 196, 188, 248, 22, 34, 62, 234, 232, 141, 61, 184, 116, 170, 188, 232, 93, 54, 189, 30, 129, 8, 190, 244, 125, 6, 190, 138, 7, 93, 189, 197, 255, 9, 62, 164, 124, 42, 190, 143, 74, 0, 190, 40, 211, 137, 59, 248, 104, 121, 189, 188, 107, 17, 190, 116, 191, 218, 60, 233, 42, 202, 189, 208, 50, 45, 190, 40, 120, 153, 61, 197, 196, 17, 190, 155, 198, 187, 189, 211, 217, 140, 62, 251, 58, 102, 189, 144, 67, 72, 190, 222, 133, 30, 61, 224, 79, 145, 61, 158, 35, 1, 62, 210, 169, 7, 62, 96, 9, 104, 190, 21, 20, 66, 62, 86, 66, 93, 62, 91, 87, 184, 191, 254, 5, 34, 60, 105, 148, 9, 191, 45, 64, 39, 62, 29, 108, 25, 62, 145, 199, 193, 190, 210, 31, 141, 61, 224, 132, 64, 62, 73, 196, 52, 62, 175, 41, 134, 62, 196, 92, 210, 62, 72, 192, 15, 191, 169, 231, 245, 61, 152, 14, 212, 189, 214, 226, 142, 190, 127, 84, 140, 62, 156, 109, 88, 62, 202, 226, 124, 190, 149, 125, 22, 61, 45, 248, 19, 190, 236, 82, 153, 187, 249, 166, 184, 59, 103, 14, 149, 190, 91, 89, 156, 189, 3, 186, 175, 189, 76, 40, 254, 61, 3, 199, 74, 62, 75, 166, 22, 62, 138, 170, 75, 62, 103, 158, 44, 190, 38, 159, 41, 189, 186, 165, 169, 190, 184, 215, 35, 63, 78, 207, 139, 188, 76, 188, 189, 189, 183, 91, 3, 190, 139, 241, 73, 189, 209, 170, 209, 61, 192, 200, 141, 61, 149, 178, 64, 62, 187, 208, 37, 191, 116, 28, 21, 190, 31, 152, 236, 189, 174, 135, 218, 190, 18, 80, 53, 62, 26, 143, 153, 189, 183, 249, 125, 191, 137, 74, 234, 61, 241, 4, 163, 189, 88, 65, 215, 190, 20, 102, 164, 61, 101, 157, 156, 190, 76, 89, 254, 188, 229, 211, 194, 189, 211, 208, 42, 190, 26, 143, 196, 189, 172, 21, 139, 190, 208, 154, 153, 189, 176, 138, 54, 59, 159, 34, 194, 189, 42, 202, 150, 189, 176, 27, 167, 189, 160, 42, 190, 60, 163, 237, 10, 61, 142, 120, 73, 190, 138, 52, 141, 61, 239, 85, 151, 61, 246, 230, 101, 189, 113, 101, 29, 189, 184, 153, 83, 190, 211, 168, 55, 190, 32, 96, 141, 61, 164, 53, 95, 190, 213, 216, 89, 61, 40, 141, 243, 189, 103, 77, 100, 189, 65, 68, 132, 60, 91, 120, 60, 190, 89, 96, 35, 190, 202, 230, 132, 189, 66, 90, 97, 189, 21, 91, 219, 188, 70, 83, 19, 188, 42, 150, 53, 61, 40, 254, 101, 189, 105, 183, 145, 189, 16, 242, 252, 189, 11, 173, 187, 189, 23, 125, 103, 188, 46, 134, 1, 61, 64, 191, 29, 190, 181, 192, 55, 189, 58, 60, 17, 62, 231, 230, 158, 61, 254, 27, 86, 61, 217, 242, 190, 61, 213, 217, 122, 189, 90, 146, 150, 60, 82, 106, 50, 61, 100, 103, 185, 189, 219, 134, 175, 189, 140, 204, 58, 61, 102, 209, 96, 189, 207, 175, 194, 60, 134, 249, 175, 189, 159, 162, 5, 190, 133, 85, 109, 61, 180, 72, 157, 189, 160, 242, 130, 189, 84, 2, 10, 190, 109, 196, 23, 61, 234, 185, 37, 189, 167, 53, 134, 61, 52, 193, 225, 60, 31, 110, 10, 190, 77, 193, 204, 61, 62, 131, 49, 190, 72, 66, 246, 59, 46, 25, 30, 189, 198, 169, 80, 62, 192, 93, 232, 189, 246, 108, 79, 62, 160, 100, 68, 62, 250, 15, 59, 189, 83, 194, 145, 62, 82, 242, 51, 60, 207, 224, 101, 61, 25, 126, 153, 62, 64, 118, 135, 63, 136, 100, 45, 190, 133, 174, 221, 189, 158, 140, 225, 61, 108, 228, 55, 190, 223, 153, 177, 62, 227, 107, 136, 189, 220, 21, 131, 60, 66, 144, 143, 190, 47, 217, 9, 62, 64, 199, 74, 190, 112, 35, 220, 190, 40, 189, 171, 61, 182, 67, 253, 62, 83, 86, 79, 190, 243, 148, 212, 59, 242, 245, 80, 189, 221, 34, 227, 61, 158, 59, 202, 189, 89, 255, 141, 61, 184, 174, 233, 61, 59, 16, 225, 61, 120, 149, 150, 188, 75, 135, 239, 187, 237, 84, 248, 189, 206, 218, 39, 190, 26, 32, 211, 189, 230, 231, 142, 189, 47, 119, 152, 189, 36, 67, 0, 190, 198, 131, 31, 190, 198, 236, 178, 189, 4, 12, 96, 61, 14, 170, 39, 61, 210, 190, 204, 189, 28, 86, 146, 189, 129, 2, 170, 61, 70, 121, 41, 61, 89, 107, 39, 190, 172, 63, 139, 61, 224, 208, 55, 190, 228, 93, 230, 61, 179, 178, 62, 189, 96, 54, 20, 190, 122, 6, 147, 61, 96, 71, 217, 61, 171, 236, 170, 60, 10, 191, 134, 61, 65, 225, 245, 61, 245, 237, 32, 190, 161, 220, 249, 61, 232, 103, 88, 61, 29, 67, 158, 189, 66, 169, 79, 61, 66, 185, 215, 60, 169, 10, 127, 189, 197, 138, 22, 188, 103, 103, 43, 189, 119, 253, 147, 189, 40, 183, 71, 61, 207, 67, 116, 189, 26, 222, 33, 190, 45, 250, 23, 190, 176, 251, 44, 190, 13, 87, 29, 190, 150, 25, 167, 189, 202, 250, 200, 61, 144, 108, 90, 189, 84, 85, 34, 62, 142, 248, 34, 58, 55, 163, 37, 62, 183, 46, 27, 62, 253, 205, 202, 60, 113, 214, 80, 189, 122, 207, 185, 61, 221, 209, 220, 189, 221, 59, 92, 187, 88, 107, 135, 61, 57, 137, 217, 61, 190, 24, 222, 61, 52, 225, 88, 189, 148, 97, 211, 189, 249, 115, 52, 190, 68, 202, 52, 190, 189, 224, 76, 61, 79, 225, 210, 61, 161, 232, 76, 190, 90, 10, 81, 62, 176, 98, 127, 61, 187, 22, 241, 59, 245, 178, 140, 62, 251, 107, 26, 62, 205, 248, 26, 189, 215, 226, 241, 62, 87, 205, 40, 62, 101, 216, 3, 191, 90, 141, 215, 62, 61, 31, 52, 61, 232, 201, 165, 61, 14, 14, 4, 189, 253, 207, 29, 62, 239, 72, 167, 190, 198, 41, 43, 190, 23, 211, 211, 60, 254, 247, 246, 189, 77, 42, 191, 58, 143, 140, 99, 190, 149, 63, 214, 60, 41, 15, 67, 62, 225, 129, 168, 191, 210, 146, 18, 189, 234, 105, 234, 62, 69, 33, 41, 190, 90, 35, 155, 61, 56, 201, 8, 61, 239, 65, 13, 63, 26, 159, 230, 190, 135, 20, 185, 188, 132, 4, 105, 62, 89, 241, 146, 190, 181, 166, 17, 191, 169, 95, 144, 191, 144, 165, 88, 190, 162, 155, 218, 61, 7, 60, 16, 190, 91, 165, 186, 61, 73, 55, 84, 191, 84, 56, 32, 61, 156, 202, 198, 190, 235, 50, 91, 62, 85, 237, 80, 191, 138, 230, 94, 190, 50, 134, 63, 63, 149, 182, 166, 190, 116, 143, 81, 62, 175, 28, 52, 191, 146, 166, 62, 63, 117, 22, 61, 190, 192, 64, 199, 62, 215, 124, 249, 60, 1, 101, 196, 189, 215, 47, 52, 189, 187, 75, 208, 62, 94, 243, 153, 190, 55, 121, 137, 188, 2, 24, 218, 61, 59, 197, 76, 189, 25, 56, 217, 62, 92, 195, 67, 61, 145, 178, 140, 189, 117, 252, 57, 191, 143, 0, 222, 61, 235, 212, 148, 188, 157, 66, 158, 190, 153, 194, 73, 188, 61, 159, 4, 62, 103, 61, 239, 61, 176, 47, 86, 191, 15, 22, 40, 191, 26, 90, 31, 191, 243, 7, 21, 191, 32, 163, 102, 191, 40, 226, 218, 61, 17, 11, 15, 60, 26, 13, 102, 191, 211, 172, 2, 62, 98, 72, 26, 191, 252, 8, 116, 191, 82, 96, 144, 190, 182, 52, 89, 61, 221, 115, 25, 190, 198, 31, 133, 62, 131, 178, 246, 187, 111, 78, 178, 190, 239, 74, 12, 61, 79, 103, 35, 60, 190, 163, 51, 61, 235, 65, 58, 190, 47, 53, 5, 190, 24, 69, 18, 191, 182, 220, 103, 190, 101, 30, 19, 62, 22, 24, 119, 189, 168, 114, 2, 62, 13, 197, 95, 191, 252, 37, 148, 190, 61, 126, 171, 189, 92, 42, 77, 190, 220, 254, 18, 62, 14, 19, 131, 62, 133, 43, 231, 188, 156, 247, 253, 61, 78, 86, 106, 62, 230, 134, 8, 190, 64, 22, 92, 191, 26, 126, 218, 189, 162, 204, 189, 61, 238, 170, 9, 191, 100, 11, 13, 62, 51, 179, 81, 190, 48, 190, 7, 62, 249, 215, 126, 62, 55, 152, 46, 62, 195, 235, 228, 190, 99, 100, 193, 61, 216, 145, 101, 190, 237, 59, 87, 190, 158, 0, 89, 61, 202, 106, 255, 188, 223, 227, 149, 62, 50, 166, 125, 62, 34, 114, 204, 62, 25, 159, 58, 62, 84, 128, 127, 189, 165, 135, 7, 190, 230, 178, 153, 189, 152, 14, 115, 61, 115, 44, 238, 60, 227, 64, 199, 61, 107, 4, 164, 61, 125, 119, 210, 188, 102, 69, 38, 190, 39, 35, 222, 61, 9, 237, 64, 190, 138, 13, 92, 190, 64, 162, 176, 61, 191, 165, 135, 61, 158, 249, 121, 190, 54, 83, 215, 61, 38, 77, 154, 61, 83, 178, 230, 189, 41, 174, 61, 189, 175, 227, 163, 61, 19, 15, 28, 190, 228, 72, 37, 190, 218, 49, 141, 61, 124, 101, 165, 189, 49, 148, 32, 61, 70, 105, 212, 189, 187, 88, 59, 190, 189, 30, 200, 61, 159, 72, 26, 189, 24, 215, 117, 189, 213, 192, 7, 61, 177, 31, 246, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 21, 135, 62, 164, 26, 183, 61, 186, 197, 228, 61, 69, 9, 219, 61, 69, 247, 160, 61, 152, 130, 192, 189, 21, 202, 26, 62, 50, 173, 30, 190, 174, 51, 155, 62, 134, 40, 48, 62, 68, 177, 66, 187, 106, 241, 36, 60, 173, 162, 85, 61, 119, 25, 40, 62, 98, 90, 190, 190, 46, 94, 178, 61, 216, 17, 90, 62, 129, 71, 140, 189, 173, 66, 130, 62, 222, 23, 162, 60, 185, 140, 12, 61, 220, 145, 175, 190, 154, 223, 12, 190, 163, 51, 12, 188, 237, 86, 124, 190, 2, 86, 98, 190, 28, 222, 5, 190, 103, 26, 172, 190, 145, 169, 236, 61, 22, 157, 67, 189, 104, 220, 194, 60, 217, 159, 106, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {211, 142, 172, 191, 167, 59, 30, 190, 171, 154, 11, 63, 60, 222, 128, 62, 173, 150, 100, 63, 226, 104, 44, 190, 219, 45, 93, 63, 143, 71, 248, 61, 181, 221, 67, 63, 189, 22, 187, 62, 86, 246, 102, 62, 56, 62, 24, 190, 105, 209, 19, 191, 214, 150, 149, 190, 172, 8, 159, 191, 14, 178, 15, 63, 70, 136, 241, 190, 122, 35, 151, 62, 246, 93, 189, 190, 45, 162, 95, 189, 126, 239, 62, 62, 222, 23, 119, 62, 129, 95, 157, 61, 193, 199, 23, 190, 16, 114, 89, 62, 197, 199, 156, 187, 41, 233, 172, 189, 140, 255, 137, 190, 73, 216, 38, 191, 255, 60, 74, 63, 118, 245, 21, 61, 57, 163, 83, 189, 168, 231, 133, 61, 186, 198, 252, 61, 54, 194, 247, 62, 181, 171, 222, 190, 132, 78, 16, 61, 168, 116, 213, 61, 5, 213, 161, 190, 223, 104, 179, 189, 146, 157, 185, 62, 197, 109, 24, 190, 154, 100, 142, 62, 183, 181, 177, 190, 84, 104, 239, 58, 219, 200, 82, 190, 233, 245, 96, 62, 140, 16, 91, 62, 176, 54, 38, 190, 144, 125, 197, 61, 84, 132, 180, 188, 92, 147, 242, 61, 132, 90, 30, 191, 30, 136, 135, 62, 194, 44, 110, 61, 166, 139, 179, 61, 162, 129, 149, 62, 94, 240, 166, 187, 236, 248, 11, 62, 229, 136, 25, 62, 40, 122, 184, 190, 190, 160, 9, 62, 69, 235, 183, 190, 144, 120, 10, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 238, 47, 190, 7, 71, 187, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {45, 207, 50, 191, 145, 55, 192, 190, 215, 255, 152, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {166, 244, 233, 191, 227, 86, 152, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0070/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}