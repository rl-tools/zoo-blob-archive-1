// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 134, 58, 190, 40, 157, 44, 62, 166, 101, 42, 61, 206, 192, 214, 62, 214, 117, 47, 191, 26, 8, 98, 190, 16, 45, 132, 190, 34, 167, 3, 63, 66, 186, 56, 63, 12, 72, 146, 189, 215, 79, 128, 63, 76, 77, 172, 61, 42, 22, 4, 62, 177, 150, 16, 63, 5, 22, 193, 62, 11, 46, 88, 62, 185, 112, 116, 62, 12, 252, 44, 191, 231, 241, 77, 189, 22, 203, 155, 60, 69, 68, 96, 189, 134, 54, 211, 61, 147, 231, 164, 187, 166, 2, 22, 191, 84, 51, 106, 190, 247, 64, 161, 191, 45, 26, 168, 190, 125, 85, 72, 63, 72, 216, 219, 62, 111, 239, 153, 62, 115, 109, 249, 62, 245, 130, 99, 191, 43, 253, 161, 190, 13, 107, 229, 62, 59, 144, 153, 63, 182, 72, 213, 62, 110, 168, 202, 62, 94, 45, 56, 190, 203, 174, 73, 63, 179, 47, 41, 190, 194, 95, 131, 63, 138, 5, 201, 61, 47, 82, 113, 62, 120, 139, 22, 190, 187, 184, 186, 190, 28, 68, 135, 188, 107, 24, 207, 190, 51, 199, 243, 62, 79, 166, 123, 191, 162, 27, 159, 62, 252, 56, 173, 189, 13, 9, 239, 190, 167, 76, 140, 191, 90, 154, 142, 190, 227, 184, 28, 63, 167, 246, 218, 62, 91, 65, 25, 63, 167, 127, 209, 60, 82, 250, 129, 191, 63, 146, 160, 62, 186, 8, 189, 62, 1, 175, 39, 191, 83, 110, 27, 63, 123, 168, 179, 190, 243, 188, 34, 191, 165, 187, 136, 189, 207, 191, 239, 190, 53, 162, 71, 63, 245, 194, 164, 62, 121, 79, 163, 62, 230, 225, 74, 63, 94, 161, 52, 191, 212, 46, 163, 62, 169, 21, 150, 191, 111, 40, 14, 190, 167, 206, 20, 191, 237, 216, 50, 61, 147, 157, 3, 63, 39, 103, 234, 62, 29, 102, 120, 63, 219, 241, 253, 190, 178, 255, 200, 62, 129, 227, 49, 186, 251, 35, 45, 191, 122, 221, 146, 190, 227, 184, 165, 62, 37, 129, 9, 63, 240, 62, 162, 190, 230, 225, 248, 190, 39, 199, 0, 191, 62, 33, 201, 190, 62, 214, 188, 191, 8, 229, 170, 190, 227, 119, 24, 190, 62, 42, 160, 191, 172, 76, 248, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 249, 20, 191, 162, 20, 18, 63, 74, 190, 159, 190, 49, 182, 43, 63, 134, 199, 121, 61, 54, 214, 121, 62, 129, 193, 11, 191, 126, 224, 196, 61, 59, 246, 143, 61, 94, 247, 38, 63, 214, 109, 78, 62, 156, 117, 216, 190, 198, 67, 71, 62, 71, 181, 31, 63, 46, 154, 152, 62, 73, 18, 205, 61, 10, 129, 125, 190, 13, 203, 55, 190, 190, 95, 203, 62, 217, 231, 199, 62, 30, 153, 206, 62, 2, 56, 1, 63, 158, 110, 51, 63, 253, 15, 122, 61, 219, 97, 43, 190, 166, 123, 223, 190, 56, 138, 110, 62, 190, 16, 85, 62, 4, 221, 178, 190, 184, 187, 180, 190, 94, 250, 154, 188, 114, 224, 152, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 57, 131, 60, 172, 206, 72, 61, 149, 103, 37, 189, 252, 242, 81, 62, 143, 92, 17, 189, 157, 232, 177, 190, 99, 21, 37, 60, 144, 72, 17, 191, 124, 8, 78, 60, 204, 126, 129, 190, 70, 40, 28, 191, 197, 44, 113, 60, 185, 190, 128, 190, 75, 154, 53, 62, 23, 197, 33, 191, 135, 181, 137, 189, 232, 181, 42, 60, 88, 41, 121, 190, 28, 96, 253, 190, 203, 240, 13, 62, 27, 153, 215, 188, 8, 135, 170, 62, 16, 118, 239, 61, 180, 219, 38, 62, 235, 165, 235, 190, 49, 64, 46, 62, 62, 136, 161, 62, 48, 85, 148, 190, 165, 50, 108, 189, 177, 162, 164, 190, 134, 99, 140, 62, 148, 234, 110, 190, 13, 162, 76, 61, 170, 208, 193, 188, 164, 92, 57, 190, 7, 74, 74, 190, 36, 81, 211, 189, 229, 14, 22, 190, 64, 104, 165, 189, 172, 207, 4, 190, 167, 3, 135, 189, 217, 157, 218, 61, 137, 103, 23, 60, 192, 205, 54, 188, 155, 192, 58, 190, 76, 34, 3, 62, 63, 187, 41, 62, 210, 175, 134, 60, 192, 140, 16, 61, 166, 203, 122, 189, 202, 172, 165, 61, 239, 208, 33, 190, 225, 249, 78, 189, 133, 40, 6, 190, 238, 61, 212, 189, 181, 58, 169, 189, 209, 64, 180, 189, 46, 211, 217, 59, 85, 29, 119, 61, 212, 122, 22, 190, 166, 43, 217, 188, 139, 182, 21, 62, 156, 76, 57, 61, 0, 75, 37, 190, 255, 67, 231, 61, 61, 8, 131, 62, 19, 67, 223, 189, 99, 58, 34, 191, 185, 182, 39, 190, 48, 176, 131, 62, 95, 189, 197, 61, 102, 14, 128, 61, 58, 113, 19, 62, 239, 252, 60, 61, 12, 126, 251, 62, 186, 93, 99, 191, 22, 89, 236, 188, 253, 8, 36, 191, 125, 252, 27, 62, 91, 82, 88, 62, 27, 41, 12, 191, 64, 155, 64, 190, 236, 204, 145, 61, 11, 146, 172, 62, 121, 237, 87, 62, 213, 12, 37, 63, 202, 9, 13, 191, 252, 206, 229, 187, 7, 210, 253, 62, 7, 55, 135, 61, 218, 67, 72, 190, 84, 29, 253, 61, 43, 30, 57, 190, 247, 21, 48, 189, 4, 135, 146, 62, 104, 242, 8, 60, 81, 35, 240, 189, 2, 47, 163, 188, 178, 0, 246, 61, 33, 3, 161, 190, 102, 24, 29, 62, 111, 105, 159, 62, 224, 189, 1, 62, 248, 56, 253, 60, 207, 217, 157, 189, 64, 2, 250, 61, 219, 83, 173, 62, 128, 201, 185, 190, 10, 233, 114, 190, 187, 235, 195, 190, 199, 186, 209, 61, 15, 12, 1, 191, 156, 147, 120, 190, 98, 95, 78, 190, 97, 200, 220, 61, 19, 44, 226, 62, 124, 115, 166, 62, 232, 32, 11, 63, 38, 138, 154, 190, 76, 4, 78, 190, 245, 191, 254, 61, 26, 200, 107, 62, 135, 151, 150, 187, 20, 244, 157, 61, 117, 83, 210, 61, 25, 131, 3, 190, 118, 36, 134, 61, 177, 35, 140, 188, 137, 60, 237, 61, 243, 22, 54, 191, 254, 124, 205, 62, 244, 120, 177, 61, 79, 197, 139, 62, 19, 69, 121, 62, 93, 75, 8, 190, 201, 222, 134, 62, 188, 120, 182, 191, 60, 61, 243, 189, 194, 207, 20, 191, 0, 197, 220, 189, 245, 28, 29, 191, 245, 42, 6, 60, 193, 195, 31, 62, 112, 228, 29, 191, 242, 107, 17, 62, 8, 212, 96, 191, 201, 52, 184, 190, 38, 163, 137, 62, 27, 78, 161, 62, 251, 45, 24, 188, 46, 195, 179, 62, 199, 138, 239, 187, 222, 192, 76, 191, 76, 180, 178, 62, 56, 186, 171, 189, 44, 117, 55, 190, 179, 209, 181, 62, 59, 139, 172, 190, 74, 118, 146, 191, 80, 24, 97, 191, 16, 194, 247, 60, 36, 214, 213, 189, 9, 93, 226, 60, 165, 129, 40, 190, 178, 201, 241, 188, 170, 225, 45, 189, 209, 91, 193, 188, 173, 204, 214, 188, 180, 85, 80, 60, 118, 201, 36, 62, 25, 3, 52, 190, 172, 84, 31, 188, 91, 118, 10, 190, 25, 148, 23, 61, 60, 212, 104, 61, 144, 145, 106, 189, 207, 107, 1, 190, 53, 87, 82, 189, 77, 130, 121, 189, 79, 0, 179, 61, 37, 172, 7, 189, 243, 63, 21, 62, 28, 72, 252, 189, 162, 73, 221, 188, 133, 200, 114, 188, 221, 126, 25, 190, 138, 33, 136, 61, 122, 98, 59, 187, 64, 247, 52, 188, 13, 140, 201, 188, 81, 64, 29, 61, 97, 36, 107, 59, 248, 177, 185, 61, 209, 181, 226, 190, 0, 146, 73, 62, 227, 18, 145, 62, 24, 223, 236, 61, 154, 59, 14, 63, 138, 244, 145, 61, 131, 222, 162, 62, 94, 28, 227, 191, 18, 168, 62, 62, 112, 72, 92, 188, 86, 144, 179, 188, 60, 97, 211, 190, 128, 2, 188, 62, 164, 27, 61, 62, 48, 105, 13, 191, 90, 200, 177, 61, 15, 236, 2, 192, 170, 131, 18, 190, 202, 221, 31, 62, 231, 24, 93, 62, 33, 253, 167, 62, 216, 9, 178, 62, 70, 43, 79, 190, 71, 246, 104, 62, 15, 14, 103, 62, 146, 116, 249, 190, 248, 53, 9, 191, 62, 149, 148, 62, 165, 60, 69, 191, 27, 11, 154, 191, 218, 199, 161, 191, 152, 27, 8, 62, 7, 178, 85, 190, 167, 179, 171, 189, 226, 167, 18, 61, 248, 215, 83, 61, 91, 119, 46, 190, 31, 131, 27, 62, 150, 138, 131, 61, 94, 63, 78, 59, 125, 63, 204, 61, 19, 62, 140, 189, 87, 183, 140, 189, 142, 76, 161, 190, 120, 138, 76, 188, 61, 72, 186, 189, 49, 14, 230, 189, 53, 204, 3, 188, 72, 94, 55, 190, 177, 198, 5, 190, 46, 8, 216, 189, 119, 64, 223, 189, 38, 94, 31, 190, 36, 229, 215, 61, 163, 12, 85, 61, 193, 190, 250, 189, 65, 114, 41, 190, 128, 61, 144, 189, 248, 120, 201, 61, 27, 173, 56, 188, 206, 5, 113, 189, 131, 158, 177, 189, 179, 150, 35, 190, 75, 178, 147, 188, 188, 221, 247, 187, 53, 176, 253, 61, 175, 49, 96, 61, 46, 239, 2, 62, 185, 60, 19, 63, 211, 98, 133, 189, 134, 246, 11, 63, 243, 63, 47, 191, 148, 203, 105, 60, 117, 47, 51, 63, 66, 35, 227, 190, 29, 205, 123, 190, 189, 21, 213, 61, 44, 146, 29, 63, 14, 24, 172, 190, 154, 111, 13, 191, 151, 163, 195, 191, 190, 65, 125, 190, 164, 164, 215, 62, 104, 241, 59, 188, 100, 56, 7, 63, 211, 140, 30, 62, 34, 186, 21, 191, 197, 208, 156, 62, 69, 130, 43, 62, 172, 248, 52, 191, 155, 177, 44, 190, 49, 5, 127, 62, 142, 208, 130, 191, 64, 204, 50, 191, 69, 233, 172, 190, 3, 179, 143, 189, 224, 218, 242, 61, 55, 38, 4, 190, 175, 191, 14, 191, 194, 167, 17, 190, 151, 120, 1, 62, 205, 44, 62, 190, 101, 7, 58, 189, 175, 83, 173, 61, 86, 213, 230, 189, 172, 84, 9, 63, 150, 95, 71, 191, 188, 113, 59, 62, 172, 174, 221, 190, 166, 248, 158, 62, 37, 211, 198, 61, 71, 54, 221, 190, 161, 125, 58, 189, 198, 136, 128, 61, 146, 177, 129, 62, 0, 155, 93, 61, 186, 164, 169, 62, 88, 115, 5, 190, 112, 91, 89, 61, 27, 23, 16, 188, 237, 13, 61, 188, 10, 160, 89, 189, 215, 250, 8, 62, 123, 192, 33, 190, 139, 251, 195, 61, 57, 77, 1, 60, 36, 171, 7, 61, 214, 187, 6, 190, 3, 164, 140, 61, 64, 88, 84, 62, 99, 240, 43, 190, 208, 157, 234, 190, 108, 182, 126, 61, 69, 163, 31, 190, 122, 41, 125, 62, 103, 130, 115, 60, 128, 89, 171, 190, 68, 11, 97, 62, 112, 205, 78, 189, 79, 104, 13, 60, 186, 135, 23, 190, 179, 198, 228, 61, 201, 51, 158, 62, 212, 55, 226, 62, 117, 23, 169, 61, 173, 226, 62, 190, 60, 70, 112, 62, 243, 103, 53, 62, 92, 146, 115, 61, 133, 153, 114, 190, 41, 138, 166, 189, 146, 156, 32, 63, 211, 125, 168, 190, 76, 36, 234, 61, 165, 155, 175, 188, 204, 50, 107, 61, 218, 59, 62, 61, 114, 163, 105, 60, 207, 85, 174, 61, 77, 195, 131, 61, 24, 159, 57, 62, 23, 152, 140, 190, 13, 3, 239, 61, 49, 105, 172, 190, 113, 152, 240, 61, 1, 54, 34, 62, 45, 116, 26, 190, 89, 74, 34, 62, 195, 204, 181, 61, 62, 188, 214, 62, 9, 30, 26, 190, 226, 177, 81, 190, 197, 157, 14, 62, 32, 237, 11, 62, 68, 151, 167, 190, 133, 6, 4, 189, 164, 205, 250, 189, 109, 40, 64, 62, 229, 159, 252, 60, 130, 106, 66, 190, 5, 208, 35, 62, 238, 121, 245, 61, 239, 164, 245, 60, 5, 73, 21, 191, 145, 14, 173, 188, 235, 161, 40, 62, 232, 87, 97, 62, 11, 232, 180, 189, 179, 216, 37, 62, 80, 3, 213, 62, 95, 193, 228, 61, 7, 165, 71, 189, 84, 148, 181, 187, 228, 131, 13, 191, 248, 188, 57, 62, 223, 179, 253, 189, 78, 179, 62, 190, 137, 90, 168, 189, 30, 38, 174, 190, 39, 192, 11, 62, 236, 58, 178, 61, 74, 238, 26, 190, 242, 14, 152, 62, 230, 230, 139, 62, 86, 67, 75, 61, 132, 236, 149, 190, 166, 36, 199, 61, 30, 40, 171, 61, 80, 33, 31, 62, 55, 99, 51, 61, 155, 148, 9, 191, 81, 18, 15, 191, 227, 84, 246, 187, 117, 76, 23, 62, 196, 188, 164, 62, 46, 162, 153, 61, 6, 102, 202, 190, 191, 169, 207, 62, 86, 186, 73, 62, 2, 249, 181, 190, 120, 49, 140, 62, 147, 188, 49, 62, 252, 108, 95, 186, 150, 230, 29, 58, 215, 237, 52, 62, 169, 168, 137, 61, 243, 137, 180, 62, 66, 49, 160, 188, 82, 133, 30, 189, 91, 52, 19, 60, 146, 12, 133, 190, 90, 177, 147, 62, 127, 15, 119, 62, 89, 232, 240, 188, 134, 56, 83, 61, 187, 172, 49, 62, 223, 94, 22, 62, 136, 90, 227, 188, 168, 162, 178, 188, 205, 184, 244, 62, 178, 100, 68, 62, 4, 105, 132, 62, 236, 188, 52, 61, 209, 254, 50, 62, 75, 17, 141, 190, 251, 131, 120, 62, 137, 86, 22, 62, 58, 147, 165, 190, 196, 213, 113, 190, 57, 107, 194, 62, 217, 148, 115, 62, 163, 140, 48, 189, 242, 244, 69, 61, 21, 104, 13, 62, 2, 144, 39, 59, 52, 243, 120, 61, 141, 169, 103, 62, 2, 234, 167, 188, 127, 235, 73, 191, 160, 96, 211, 189, 18, 165, 42, 61, 19, 163, 240, 188, 95, 155, 64, 62, 173, 2, 30, 61, 106, 105, 3, 191, 147, 129, 6, 63, 173, 2, 243, 61, 242, 145, 249, 61, 249, 158, 13, 191, 0, 243, 26, 62, 0, 55, 149, 62, 213, 33, 111, 190, 107, 184, 155, 190, 187, 236, 55, 190, 128, 32, 42, 62, 221, 186, 190, 190, 154, 166, 129, 190, 200, 37, 47, 191, 38, 196, 133, 189, 204, 131, 7, 63, 131, 48, 219, 61, 121, 164, 12, 61, 91, 223, 23, 62, 147, 138, 204, 61, 70, 114, 213, 190, 115, 186, 75, 190, 66, 253, 20, 189, 198, 15, 226, 189, 224, 169, 208, 189, 180, 178, 71, 188, 129, 126, 61, 190, 95, 200, 225, 188, 27, 192, 46, 189, 52, 19, 2, 188, 184, 41, 26, 190, 54, 61, 36, 60, 100, 99, 95, 61, 244, 228, 23, 190, 37, 18, 90, 61, 79, 171, 34, 189, 41, 79, 202, 60, 13, 200, 13, 190, 64, 64, 95, 60, 104, 225, 221, 61, 33, 172, 55, 189, 128, 27, 193, 189, 159, 238, 255, 189, 60, 16, 36, 190, 210, 110, 247, 61, 51, 216, 21, 189, 41, 220, 98, 61, 217, 229, 145, 189, 170, 85, 12, 190, 254, 47, 135, 189, 225, 35, 55, 190, 177, 88, 20, 62, 201, 197, 69, 189, 146, 178, 183, 61, 117, 146, 208, 61, 208, 94, 224, 60, 168, 109, 142, 62, 56, 143, 35, 188, 239, 248, 87, 62, 197, 192, 39, 61, 191, 204, 124, 190, 116, 250, 139, 61, 44, 122, 128, 190, 58, 198, 249, 61, 242, 86, 138, 62, 141, 69, 209, 189, 252, 144, 93, 62, 96, 114, 224, 62, 12, 68, 142, 61, 149, 182, 20, 190, 80, 201, 125, 62, 161, 95, 208, 62, 240, 239, 104, 62, 113, 25, 187, 62, 71, 220, 156, 190, 65, 160, 81, 190, 0, 208, 172, 190, 8, 102, 189, 60, 59, 249, 155, 62, 252, 144, 129, 190, 232, 250, 191, 190, 103, 226, 177, 62, 174, 73, 156, 62, 9, 70, 146, 190, 20, 209, 169, 60, 152, 240, 37, 62, 14, 29, 83, 61, 216, 90, 255, 61, 139, 216, 86, 190, 186, 56, 223, 189, 244, 97, 80, 189, 169, 112, 199, 189, 25, 78, 76, 62, 86, 77, 46, 60, 215, 114, 247, 61, 109, 201, 4, 62, 251, 10, 177, 190, 179, 32, 0, 190, 76, 165, 109, 60, 103, 121, 166, 190, 102, 100, 247, 189, 194, 134, 109, 62, 219, 120, 231, 189, 82, 247, 117, 62, 238, 86, 10, 62, 169, 49, 213, 188, 178, 91, 245, 190, 89, 69, 2, 189, 82, 43, 140, 190, 44, 33, 139, 61, 38, 229, 82, 61, 255, 149, 153, 190, 237, 15, 92, 190, 74, 117, 156, 189, 220, 85, 236, 189, 82, 42, 31, 190, 124, 132, 117, 61, 183, 207, 168, 189, 146, 6, 226, 61, 1, 207, 110, 60, 55, 17, 234, 60, 184, 62, 124, 190, 151, 203, 150, 62, 235, 88, 42, 190, 206, 121, 228, 190, 72, 62, 163, 188, 208, 84, 74, 190, 170, 73, 0, 62, 126, 142, 158, 62, 105, 52, 75, 189, 119, 16, 238, 61, 50, 98, 11, 62, 36, 180, 26, 62, 43, 2, 108, 190, 74, 15, 26, 190, 124, 253, 195, 62, 104, 247, 255, 61, 35, 203, 83, 61, 122, 148, 135, 189, 147, 229, 55, 190, 239, 12, 245, 189, 153, 51, 52, 60, 197, 181, 85, 58, 175, 203, 10, 191, 54, 59, 85, 190, 241, 132, 19, 62, 163, 93, 216, 60, 164, 92, 123, 190, 96, 56, 159, 61, 138, 198, 167, 62, 160, 21, 26, 62, 31, 78, 47, 62, 18, 124, 144, 61, 128, 131, 149, 60, 111, 249, 237, 61, 88, 96, 32, 62, 129, 77, 88, 61, 236, 29, 19, 189, 30, 69, 20, 190, 185, 125, 148, 189, 167, 233, 234, 188, 122, 198, 23, 190, 132, 84, 208, 61, 248, 164, 40, 190, 28, 112, 196, 188, 248, 22, 34, 62, 234, 232, 141, 61, 184, 116, 170, 188, 232, 93, 54, 189, 30, 129, 8, 190, 244, 125, 6, 190, 138, 7, 93, 189, 197, 255, 9, 62, 164, 124, 42, 190, 143, 74, 0, 190, 40, 211, 137, 59, 248, 104, 121, 189, 188, 107, 17, 190, 116, 191, 218, 60, 233, 42, 202, 189, 208, 50, 45, 190, 40, 120, 153, 61, 197, 196, 17, 190, 155, 198, 187, 189, 2, 180, 169, 62, 104, 17, 189, 189, 113, 20, 226, 188, 77, 136, 170, 61, 180, 180, 54, 61, 158, 35, 1, 62, 166, 56, 206, 61, 221, 112, 13, 190, 233, 153, 134, 62, 125, 34, 140, 62, 180, 101, 131, 191, 212, 170, 18, 59, 8, 142, 195, 190, 4, 129, 100, 62, 44, 201, 195, 61, 49, 46, 139, 190, 157, 164, 7, 62, 7, 76, 113, 62, 23, 231, 64, 62, 17, 65, 141, 62, 194, 12, 253, 62, 160, 126, 212, 190, 219, 68, 226, 187, 103, 183, 205, 189, 127, 158, 158, 190, 42, 171, 101, 62, 40, 240, 82, 62, 208, 160, 143, 190, 213, 25, 59, 61, 171, 64, 129, 189, 130, 204, 189, 60, 249, 166, 184, 59, 251, 163, 28, 190, 42, 166, 166, 188, 190, 121, 136, 188, 40, 217, 138, 61, 48, 57, 115, 62, 75, 166, 22, 62, 135, 44, 106, 62, 254, 219, 150, 189, 56, 237, 65, 62, 74, 228, 81, 190, 254, 44, 20, 63, 230, 195, 49, 60, 241, 34, 3, 189, 105, 197, 54, 189, 1, 121, 120, 61, 158, 115, 20, 62, 222, 90, 38, 62, 16, 237, 27, 62, 154, 94, 9, 191, 67, 105, 181, 189, 66, 232, 245, 188, 59, 72, 149, 190, 140, 28, 71, 62, 133, 102, 202, 61, 220, 211, 110, 191, 160, 75, 10, 62, 246, 84, 68, 189, 233, 240, 177, 190, 87, 152, 31, 62, 26, 188, 80, 190, 113, 179, 168, 188, 229, 211, 194, 189, 248, 4, 11, 190, 121, 126, 134, 189, 207, 234, 128, 190, 49, 138, 55, 189, 176, 138, 54, 59, 159, 34, 194, 189, 42, 202, 150, 189, 176, 27, 167, 189, 41, 238, 89, 61, 8, 102, 133, 61, 133, 131, 65, 190, 160, 87, 202, 61, 11, 44, 182, 61, 246, 230, 101, 189, 4, 98, 3, 188, 184, 153, 83, 190, 211, 168, 55, 190, 120, 134, 202, 61, 33, 229, 63, 190, 128, 110, 170, 61, 41, 156, 190, 189, 145, 158, 208, 188, 65, 68, 132, 60, 80, 190, 28, 190, 189, 154, 30, 190, 202, 230, 132, 189, 66, 90, 97, 189, 84, 238, 147, 187, 70, 83, 19, 188, 42, 150, 53, 61, 40, 254, 101, 189, 105, 183, 145, 189, 16, 242, 252, 189, 11, 173, 187, 189, 23, 125, 103, 188, 46, 134, 1, 61, 64, 191, 29, 190, 181, 192, 55, 189, 58, 60, 17, 62, 231, 230, 158, 61, 254, 27, 86, 61, 217, 242, 190, 61, 213, 217, 122, 189, 90, 146, 150, 60, 82, 106, 50, 61, 100, 103, 185, 189, 219, 134, 175, 189, 140, 204, 58, 61, 102, 209, 96, 189, 207, 175, 194, 60, 134, 249, 175, 189, 159, 162, 5, 190, 133, 85, 109, 61, 180, 72, 157, 189, 160, 242, 130, 189, 84, 2, 10, 190, 109, 196, 23, 61, 234, 185, 37, 189, 167, 53, 134, 61, 52, 193, 225, 60, 31, 110, 10, 190, 77, 193, 204, 61, 62, 131, 49, 190, 72, 66, 246, 59, 2, 172, 83, 61, 124, 192, 170, 61, 113, 85, 102, 189, 31, 165, 195, 61, 35, 159, 128, 62, 250, 15, 59, 189, 175, 136, 176, 62, 241, 18, 171, 61, 65, 105, 144, 61, 181, 226, 168, 62, 131, 77, 79, 63, 243, 176, 189, 189, 123, 82, 141, 189, 7, 224, 38, 62, 115, 17, 71, 189, 217, 81, 150, 62, 249, 96, 160, 61, 4, 228, 4, 189, 80, 135, 36, 189, 34, 187, 238, 61, 206, 41, 112, 189, 173, 214, 181, 190, 22, 128, 238, 61, 169, 10, 25, 63, 194, 145, 204, 190, 158, 147, 208, 60, 220, 129, 194, 188, 115, 36, 43, 189, 95, 176, 78, 188, 23, 162, 85, 62, 81, 137, 236, 61, 59, 16, 225, 61, 120, 149, 150, 188, 75, 135, 239, 187, 237, 84, 248, 189, 206, 218, 39, 190, 26, 32, 211, 189, 230, 231, 142, 189, 47, 119, 152, 189, 36, 67, 0, 190, 198, 131, 31, 190, 198, 236, 178, 189, 4, 12, 96, 61, 14, 170, 39, 61, 210, 190, 204, 189, 28, 86, 146, 189, 129, 2, 170, 61, 70, 121, 41, 61, 89, 107, 39, 190, 172, 63, 139, 61, 224, 208, 55, 190, 228, 93, 230, 61, 179, 178, 62, 189, 96, 54, 20, 190, 122, 6, 147, 61, 96, 71, 217, 61, 171, 236, 170, 60, 10, 191, 134, 61, 65, 225, 245, 61, 245, 237, 32, 190, 161, 220, 249, 61, 232, 103, 88, 61, 29, 67, 158, 189, 66, 169, 79, 61, 66, 185, 215, 60, 169, 10, 127, 189, 197, 138, 22, 188, 103, 103, 43, 189, 119, 253, 147, 189, 40, 183, 71, 61, 207, 67, 116, 189, 26, 222, 33, 190, 45, 250, 23, 190, 176, 251, 44, 190, 13, 87, 29, 190, 150, 25, 167, 189, 202, 250, 200, 61, 144, 108, 90, 189, 84, 85, 34, 62, 142, 248, 34, 58, 55, 163, 37, 62, 183, 46, 27, 62, 253, 205, 202, 60, 113, 214, 80, 189, 122, 207, 185, 61, 221, 209, 220, 189, 221, 59, 92, 187, 88, 107, 135, 61, 57, 137, 217, 61, 190, 24, 222, 61, 52, 225, 88, 189, 148, 97, 211, 189, 249, 115, 52, 190, 68, 202, 52, 190, 189, 224, 76, 61, 79, 225, 210, 61, 9, 189, 191, 189, 106, 32, 65, 62, 105, 25, 167, 61, 235, 6, 135, 188, 48, 6, 113, 62, 251, 107, 26, 62, 189, 186, 89, 189, 112, 68, 71, 62, 167, 97, 57, 62, 68, 164, 189, 190, 164, 22, 41, 62, 58, 220, 80, 61, 8, 238, 221, 61, 91, 87, 22, 189, 93, 139, 53, 62, 211, 16, 8, 191, 189, 251, 196, 190, 95, 40, 68, 61, 127, 178, 171, 189, 149, 96, 232, 60, 232, 228, 1, 61, 239, 227, 123, 61, 68, 27, 213, 61, 50, 253, 2, 191, 186, 207, 127, 189, 123, 1, 194, 62, 106, 201, 82, 190, 224, 17, 56, 61, 6, 27, 82, 189, 93, 112, 84, 62, 215, 23, 125, 190, 135, 20, 185, 188, 73, 208, 129, 62, 50, 245, 7, 191, 210, 15, 37, 190, 142, 155, 156, 191, 200, 43, 4, 190, 162, 155, 218, 61, 201, 222, 140, 189, 123, 5, 69, 61, 76, 212, 78, 191, 81, 66, 115, 61, 81, 28, 9, 191, 138, 31, 13, 62, 100, 53, 102, 190, 91, 87, 40, 190, 161, 205, 45, 63, 238, 81, 220, 189, 114, 114, 30, 62, 74, 75, 75, 191, 100, 138, 39, 63, 127, 90, 128, 190, 252, 59, 175, 62, 229, 44, 230, 61, 231, 138, 95, 61, 231, 95, 240, 189, 245, 166, 77, 62, 99, 1, 1, 190, 117, 165, 146, 61, 129, 171, 38, 190, 185, 111, 44, 189, 85, 73, 189, 62, 51, 0, 78, 61, 145, 178, 140, 189, 54, 3, 38, 191, 239, 196, 90, 62, 85, 85, 212, 60, 28, 77, 29, 190, 201, 252, 137, 59, 61, 159, 4, 62, 183, 216, 16, 62, 152, 154, 73, 191, 197, 232, 48, 191, 6, 70, 49, 190, 26, 89, 75, 191, 188, 75, 90, 191, 250, 154, 28, 62, 85, 77, 243, 60, 123, 208, 84, 191, 23, 41, 59, 62, 164, 138, 48, 191, 191, 189, 85, 191, 209, 92, 103, 190, 92, 85, 50, 62, 227, 25, 203, 189, 131, 110, 158, 62, 173, 255, 101, 187, 111, 78, 178, 190, 170, 10, 250, 61, 2, 181, 1, 60, 4, 157, 77, 61, 231, 20, 81, 189, 140, 73, 142, 189, 218, 235, 8, 191, 142, 35, 85, 190, 101, 30, 19, 62, 170, 251, 193, 189, 165, 233, 33, 61, 31, 41, 11, 191, 133, 190, 248, 189, 211, 152, 186, 189, 92, 42, 77, 190, 44, 38, 10, 62, 167, 74, 117, 62, 230, 4, 177, 189, 158, 245, 143, 61, 241, 204, 69, 62, 33, 0, 98, 190, 193, 132, 36, 191, 170, 65, 248, 189, 148, 110, 33, 189, 115, 1, 4, 191, 216, 51, 1, 62, 67, 92, 196, 189, 208, 143, 161, 60, 36, 245, 192, 61, 27, 210, 43, 62, 222, 222, 113, 190, 131, 247, 131, 61, 199, 92, 157, 190, 242, 144, 189, 190, 19, 142, 156, 59, 141, 42, 114, 189, 123, 192, 56, 62, 105, 154, 81, 62, 174, 103, 196, 62, 193, 63, 41, 62, 84, 128, 127, 189, 165, 135, 7, 190, 230, 178, 153, 189, 152, 14, 115, 61, 115, 44, 238, 60, 227, 64, 199, 61, 107, 4, 164, 61, 125, 119, 210, 188, 102, 69, 38, 190, 39, 35, 222, 61, 9, 237, 64, 190, 138, 13, 92, 190, 64, 162, 176, 61, 191, 165, 135, 61, 158, 249, 121, 190, 54, 83, 215, 61, 38, 77, 154, 61, 83, 178, 230, 189, 41, 174, 61, 189, 175, 227, 163, 61, 19, 15, 28, 190, 228, 72, 37, 190, 218, 49, 141, 61, 124, 101, 165, 189, 49, 148, 32, 61, 70, 105, 212, 189, 187, 88, 59, 190, 189, 30, 200, 61, 159, 72, 26, 189, 24, 215, 117, 189, 213, 192, 7, 61, 177, 31, 246, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 27, 79, 62, 164, 26, 183, 61, 108, 201, 130, 61, 45, 183, 242, 61, 47, 134, 155, 61, 152, 130, 192, 189, 176, 40, 254, 60, 187, 61, 24, 190, 114, 49, 150, 62, 149, 53, 35, 62, 102, 36, 13, 60, 120, 20, 199, 60, 47, 226, 104, 60, 158, 20, 33, 62, 150, 102, 136, 190, 241, 135, 70, 189, 204, 234, 79, 62, 232, 94, 192, 188, 139, 133, 19, 62, 222, 23, 162, 60, 19, 160, 8, 62, 210, 38, 73, 190, 97, 63, 219, 189, 163, 51, 12, 188, 36, 27, 18, 190, 2, 86, 98, 190, 28, 222, 5, 190, 155, 48, 79, 190, 34, 111, 58, 62, 178, 191, 75, 59, 13, 150, 117, 59, 217, 159, 106, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 117, 44, 191, 167, 59, 30, 190, 142, 29, 250, 62, 0, 61, 154, 62, 48, 73, 131, 63, 226, 104, 44, 190, 85, 5, 97, 63, 254, 106, 248, 61, 7, 103, 43, 63, 114, 164, 160, 62, 124, 134, 156, 61, 152, 36, 27, 190, 30, 113, 232, 190, 105, 171, 148, 190, 22, 143, 131, 191, 27, 152, 22, 62, 168, 205, 243, 190, 212, 126, 57, 62, 81, 254, 188, 190, 45, 162, 95, 189, 174, 21, 44, 62, 20, 13, 15, 62, 89, 70, 174, 61, 193, 199, 23, 190, 149, 196, 82, 62, 197, 199, 156, 187, 41, 233, 172, 189, 41, 201, 201, 189, 247, 229, 16, 191, 147, 127, 87, 63, 128, 144, 39, 62, 57, 163, 83, 189, 97, 30, 30, 62, 186, 198, 252, 61, 219, 190, 249, 62, 222, 120, 253, 190, 59, 235, 3, 62, 168, 116, 213, 61, 138, 108, 60, 190, 98, 245, 179, 189, 136, 80, 86, 61, 90, 117, 22, 190, 178, 91, 158, 62, 206, 131, 146, 190, 71, 37, 13, 61, 218, 114, 51, 190, 0, 11, 161, 62, 202, 48, 130, 189, 232, 237, 6, 190, 247, 195, 175, 61, 50, 134, 233, 188, 92, 147, 242, 61, 93, 91, 36, 191, 97, 210, 160, 62, 102, 95, 110, 61, 166, 139, 179, 61, 32, 249, 151, 62, 94, 240, 166, 187, 236, 248, 11, 62, 239, 80, 99, 62, 89, 179, 23, 190, 0, 182, 136, 61, 81, 221, 74, 190, 144, 120, 10, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 65, 27, 190, 221, 12, 73, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {95, 185, 225, 190, 26, 143, 123, 191, 58, 5, 155, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {222, 137, 205, 63, 240, 160, 83, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0070/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}