// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 134, 58, 190, 40, 157, 44, 62, 166, 101, 42, 61, 234, 104, 7, 63, 159, 229, 56, 191, 35, 245, 116, 190, 43, 223, 94, 190, 184, 175, 23, 63, 90, 65, 55, 63, 83, 254, 94, 189, 149, 2, 129, 63, 82, 143, 138, 61, 200, 178, 122, 62, 213, 115, 34, 63, 34, 206, 187, 62, 36, 181, 83, 62, 90, 243, 109, 62, 167, 228, 51, 191, 231, 241, 77, 189, 22, 203, 155, 60, 69, 68, 96, 189, 193, 221, 35, 62, 199, 14, 53, 188, 204, 211, 21, 191, 182, 197, 160, 190, 110, 56, 160, 191, 232, 165, 149, 190, 14, 84, 76, 63, 141, 41, 245, 62, 106, 78, 123, 62, 241, 79, 10, 63, 109, 106, 109, 191, 198, 29, 153, 190, 23, 81, 40, 63, 146, 85, 165, 63, 107, 149, 197, 62, 203, 113, 5, 63, 167, 88, 112, 190, 209, 40, 70, 63, 162, 229, 27, 190, 163, 48, 130, 63, 224, 128, 162, 61, 55, 117, 140, 62, 37, 236, 88, 190, 141, 191, 160, 190, 30, 201, 211, 61, 160, 168, 244, 190, 108, 194, 233, 62, 103, 139, 143, 191, 239, 58, 96, 62, 97, 52, 44, 190, 216, 46, 20, 191, 3, 166, 160, 191, 62, 79, 140, 190, 146, 234, 45, 63, 119, 105, 243, 62, 232, 204, 23, 63, 251, 223, 78, 60, 58, 115, 136, 191, 182, 116, 147, 62, 207, 233, 189, 62, 161, 204, 34, 191, 81, 232, 16, 63, 33, 215, 199, 190, 100, 152, 36, 191, 161, 38, 157, 189, 158, 152, 0, 191, 64, 21, 54, 63, 138, 109, 55, 62, 227, 230, 141, 62, 115, 23, 78, 63, 140, 32, 44, 191, 203, 98, 194, 62, 70, 39, 147, 191, 200, 20, 61, 190, 45, 87, 62, 191, 52, 162, 179, 61, 71, 182, 253, 62, 210, 65, 246, 62, 145, 189, 80, 63, 151, 128, 1, 191, 122, 250, 228, 62, 79, 99, 168, 61, 185, 117, 31, 191, 249, 161, 152, 190, 45, 176, 197, 62, 239, 83, 8, 63, 156, 117, 154, 190, 17, 232, 75, 191, 61, 84, 205, 190, 188, 10, 245, 190, 106, 83, 188, 191, 217, 73, 170, 190, 42, 233, 133, 190, 208, 27, 143, 191, 178, 247, 241, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {225, 249, 20, 191, 215, 66, 4, 63, 107, 42, 136, 190, 204, 200, 51, 63, 143, 7, 200, 187, 209, 255, 29, 62, 129, 193, 11, 191, 61, 2, 94, 61, 67, 24, 142, 61, 85, 6, 38, 63, 194, 82, 75, 62, 208, 201, 9, 191, 197, 181, 26, 62, 186, 39, 47, 63, 87, 103, 137, 62, 128, 69, 159, 61, 17, 91, 65, 190, 34, 75, 180, 189, 67, 186, 166, 62, 255, 171, 205, 62, 140, 80, 234, 62, 240, 247, 5, 63, 114, 206, 78, 63, 41, 136, 132, 61, 155, 71, 82, 190, 83, 70, 202, 190, 36, 50, 130, 62, 2, 98, 153, 62, 36, 118, 159, 190, 68, 193, 161, 190, 239, 110, 48, 189, 214, 58, 193, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 57, 131, 60, 57, 218, 165, 189, 149, 78, 145, 61, 137, 146, 147, 62, 179, 200, 94, 187, 31, 171, 185, 190, 99, 21, 37, 60, 44, 187, 19, 191, 172, 240, 79, 190, 58, 180, 183, 190, 56, 108, 28, 191, 233, 45, 47, 190, 255, 103, 171, 190, 87, 145, 137, 62, 67, 88, 56, 191, 224, 106, 69, 189, 213, 8, 91, 62, 227, 33, 6, 191, 3, 221, 9, 191, 20, 154, 187, 61, 64, 45, 141, 189, 69, 143, 180, 62, 251, 123, 91, 62, 105, 27, 46, 62, 84, 181, 243, 190, 85, 114, 153, 62, 136, 144, 135, 62, 37, 154, 178, 190, 71, 246, 127, 61, 108, 162, 183, 190, 208, 82, 65, 61, 64, 211, 219, 190, 13, 162, 76, 61, 170, 208, 193, 188, 164, 92, 57, 190, 7, 74, 74, 190, 36, 81, 211, 189, 229, 14, 22, 190, 64, 104, 165, 189, 172, 207, 4, 190, 167, 3, 135, 189, 217, 157, 218, 61, 137, 103, 23, 60, 192, 205, 54, 188, 155, 192, 58, 190, 76, 34, 3, 62, 63, 187, 41, 62, 210, 175, 134, 60, 192, 140, 16, 61, 166, 203, 122, 189, 202, 172, 165, 61, 239, 208, 33, 190, 225, 249, 78, 189, 133, 40, 6, 190, 238, 61, 212, 189, 181, 58, 169, 189, 209, 64, 180, 189, 46, 211, 217, 59, 85, 29, 119, 61, 212, 122, 22, 190, 166, 43, 217, 188, 139, 182, 21, 62, 156, 76, 57, 61, 0, 75, 37, 190, 255, 67, 231, 61, 45, 131, 147, 62, 167, 250, 29, 190, 126, 27, 28, 191, 10, 150, 139, 190, 78, 91, 141, 62, 95, 189, 197, 61, 7, 21, 135, 61, 55, 119, 140, 61, 222, 239, 30, 61, 127, 143, 6, 63, 253, 182, 176, 191, 133, 71, 142, 189, 254, 247, 25, 191, 240, 17, 47, 62, 99, 171, 71, 62, 103, 214, 27, 191, 61, 38, 162, 190, 28, 233, 223, 60, 205, 215, 175, 62, 154, 172, 71, 62, 184, 197, 43, 63, 240, 190, 5, 191, 184, 147, 74, 61, 227, 92, 9, 63, 171, 110, 204, 61, 253, 9, 4, 190, 236, 186, 30, 62, 155, 174, 95, 190, 214, 45, 223, 189, 180, 63, 37, 62, 69, 104, 223, 188, 81, 35, 240, 189, 135, 226, 181, 188, 93, 253, 0, 62, 215, 49, 175, 190, 227, 10, 6, 62, 170, 237, 166, 62, 224, 189, 1, 62, 238, 94, 70, 61, 45, 126, 8, 190, 18, 52, 214, 61, 80, 254, 175, 62, 75, 200, 24, 191, 147, 209, 120, 190, 77, 90, 203, 190, 52, 47, 170, 61, 66, 183, 251, 190, 57, 250, 157, 190, 131, 101, 126, 190, 138, 55, 187, 61, 224, 232, 223, 62, 214, 135, 160, 62, 72, 119, 3, 63, 67, 0, 157, 190, 227, 243, 16, 190, 230, 1, 30, 62, 15, 182, 129, 62, 101, 247, 194, 60, 4, 33, 175, 61, 88, 249, 216, 61, 87, 34, 17, 190, 123, 161, 180, 186, 175, 154, 46, 189, 137, 60, 237, 61, 44, 227, 75, 191, 6, 17, 202, 62, 126, 205, 148, 61, 216, 171, 133, 62, 169, 22, 119, 62, 93, 75, 8, 190, 114, 105, 142, 62, 221, 151, 200, 191, 66, 17, 13, 190, 133, 96, 86, 191, 66, 116, 59, 190, 247, 149, 29, 191, 148, 238, 184, 187, 182, 255, 30, 62, 159, 8, 30, 191, 175, 185, 237, 189, 195, 81, 128, 191, 246, 21, 187, 190, 105, 199, 138, 62, 177, 145, 157, 62, 75, 230, 136, 189, 34, 39, 174, 62, 94, 132, 190, 188, 25, 97, 80, 191, 174, 34, 178, 62, 11, 240, 28, 189, 184, 203, 43, 190, 248, 73, 178, 62, 174, 111, 136, 190, 207, 153, 160, 191, 31, 11, 92, 191, 16, 194, 247, 60, 36, 214, 213, 189, 9, 93, 226, 60, 165, 129, 40, 190, 178, 201, 241, 188, 170, 225, 45, 189, 209, 91, 193, 188, 173, 204, 214, 188, 180, 85, 80, 60, 118, 201, 36, 62, 25, 3, 52, 190, 172, 84, 31, 188, 91, 118, 10, 190, 25, 148, 23, 61, 60, 212, 104, 61, 144, 145, 106, 189, 207, 107, 1, 190, 53, 87, 82, 189, 77, 130, 121, 189, 79, 0, 179, 61, 37, 172, 7, 189, 243, 63, 21, 62, 28, 72, 252, 189, 162, 73, 221, 188, 133, 200, 114, 188, 221, 126, 25, 190, 138, 33, 136, 61, 122, 98, 59, 187, 64, 247, 52, 188, 13, 140, 201, 188, 81, 64, 29, 61, 97, 36, 107, 59, 248, 177, 185, 61, 236, 122, 21, 191, 75, 127, 77, 62, 162, 203, 177, 62, 34, 242, 12, 62, 53, 15, 9, 63, 138, 244, 145, 61, 6, 192, 162, 62, 2, 63, 253, 191, 236, 149, 92, 62, 182, 200, 34, 191, 183, 48, 96, 188, 21, 205, 206, 190, 62, 76, 218, 62, 32, 175, 183, 61, 241, 197, 12, 191, 92, 211, 79, 190, 132, 157, 17, 192, 12, 159, 249, 189, 64, 46, 22, 62, 147, 224, 90, 62, 41, 26, 151, 62, 248, 56, 190, 62, 58, 140, 97, 190, 253, 6, 136, 62, 239, 250, 91, 62, 110, 159, 204, 190, 248, 31, 17, 191, 51, 235, 146, 62, 96, 166, 231, 190, 59, 208, 174, 191, 19, 12, 161, 191, 152, 27, 8, 62, 7, 178, 85, 190, 167, 179, 171, 189, 226, 167, 18, 61, 248, 215, 83, 61, 91, 119, 46, 190, 31, 131, 27, 62, 150, 138, 131, 61, 94, 63, 78, 59, 125, 63, 204, 61, 19, 62, 140, 189, 87, 183, 140, 189, 142, 76, 161, 190, 120, 138, 76, 188, 61, 72, 186, 189, 49, 14, 230, 189, 53, 204, 3, 188, 72, 94, 55, 190, 177, 198, 5, 190, 46, 8, 216, 189, 119, 64, 223, 189, 38, 94, 31, 190, 36, 229, 215, 61, 163, 12, 85, 61, 193, 190, 250, 189, 65, 114, 41, 190, 128, 61, 144, 189, 248, 120, 201, 61, 27, 173, 56, 188, 206, 5, 113, 189, 131, 158, 177, 189, 179, 150, 35, 190, 75, 178, 147, 188, 248, 156, 49, 61, 87, 248, 14, 62, 233, 201, 50, 61, 178, 225, 215, 61, 164, 180, 18, 63, 211, 98, 133, 189, 173, 200, 15, 63, 141, 105, 6, 191, 106, 248, 172, 58, 25, 229, 62, 63, 100, 95, 35, 191, 151, 221, 120, 190, 191, 237, 208, 61, 147, 116, 27, 63, 68, 173, 161, 190, 131, 238, 90, 191, 105, 167, 235, 191, 49, 191, 129, 190, 119, 113, 225, 62, 187, 142, 3, 188, 115, 13, 32, 63, 178, 184, 52, 62, 110, 44, 17, 191, 7, 178, 252, 62, 230, 88, 81, 62, 179, 134, 56, 191, 110, 137, 43, 190, 235, 130, 134, 62, 112, 247, 159, 191, 71, 60, 92, 191, 24, 147, 106, 190, 3, 179, 143, 189, 65, 21, 11, 62, 143, 193, 16, 190, 20, 42, 19, 191, 67, 148, 78, 190, 169, 44, 31, 62, 205, 44, 62, 190, 184, 236, 171, 188, 216, 26, 193, 60, 209, 243, 255, 189, 100, 100, 14, 63, 32, 134, 155, 191, 1, 118, 47, 62, 15, 125, 224, 190, 227, 120, 159, 62, 246, 3, 224, 61, 179, 252, 231, 190, 19, 225, 252, 189, 29, 66, 32, 61, 161, 190, 136, 62, 165, 63, 82, 61, 146, 35, 175, 62, 130, 76, 250, 189, 37, 40, 4, 62, 44, 38, 247, 60, 127, 136, 163, 60, 31, 126, 78, 59, 32, 160, 37, 62, 246, 108, 46, 190, 191, 139, 145, 61, 168, 78, 174, 189, 33, 150, 85, 60, 214, 187, 6, 190, 141, 236, 138, 61, 217, 104, 79, 62, 233, 23, 35, 190, 141, 56, 24, 191, 58, 41, 118, 61, 69, 163, 31, 190, 89, 225, 118, 62, 201, 153, 66, 60, 199, 250, 214, 190, 79, 46, 92, 62, 29, 0, 49, 191, 19, 93, 216, 188, 105, 162, 238, 189, 101, 18, 221, 61, 1, 149, 166, 62, 130, 161, 230, 62, 183, 195, 169, 60, 234, 114, 136, 190, 159, 6, 152, 62, 55, 97, 62, 62, 85, 193, 65, 62, 126, 254, 244, 189, 13, 81, 147, 189, 41, 98, 36, 63, 58, 153, 77, 190, 65, 220, 255, 61, 199, 53, 161, 188, 18, 210, 157, 61, 178, 38, 20, 59, 178, 155, 198, 188, 114, 103, 175, 61, 77, 195, 131, 61, 108, 225, 54, 62, 135, 209, 158, 190, 132, 72, 23, 62, 20, 225, 158, 190, 123, 109, 250, 61, 1, 54, 34, 62, 145, 186, 23, 190, 40, 252, 15, 62, 177, 83, 176, 61, 42, 142, 207, 62, 43, 62, 137, 190, 101, 191, 92, 190, 217, 181, 50, 62, 235, 248, 25, 62, 60, 88, 132, 190, 186, 81, 187, 59, 0, 107, 204, 189, 115, 47, 52, 62, 231, 62, 56, 61, 249, 199, 69, 190, 255, 103, 49, 62, 90, 182, 41, 62, 163, 26, 217, 60, 187, 135, 35, 191, 14, 0, 176, 61, 145, 173, 33, 62, 118, 2, 88, 62, 136, 44, 132, 189, 104, 246, 45, 62, 117, 33, 226, 62, 243, 30, 137, 61, 7, 165, 71, 189, 216, 36, 176, 60, 68, 225, 40, 191, 65, 95, 85, 62, 141, 245, 14, 190, 225, 148, 53, 190, 137, 90, 168, 189, 9, 145, 172, 190, 116, 199, 55, 62, 4, 144, 155, 61, 186, 173, 13, 190, 120, 120, 152, 62, 167, 101, 34, 62, 42, 94, 152, 61, 151, 23, 139, 190, 37, 215, 108, 189, 182, 246, 212, 60, 237, 96, 79, 62, 239, 247, 180, 59, 188, 203, 5, 191, 135, 136, 44, 191, 98, 27, 210, 60, 81, 250, 45, 62, 7, 42, 164, 62, 179, 107, 80, 61, 244, 33, 17, 191, 195, 234, 208, 62, 190, 68, 71, 62, 177, 95, 215, 190, 96, 42, 145, 62, 148, 131, 110, 62, 113, 186, 103, 187, 150, 230, 29, 58, 233, 59, 72, 62, 177, 184, 156, 61, 30, 68, 170, 62, 166, 189, 133, 60, 145, 140, 23, 189, 91, 52, 19, 60, 101, 137, 134, 190, 116, 253, 148, 62, 107, 13, 140, 62, 156, 162, 239, 188, 105, 119, 11, 62, 141, 58, 77, 62, 160, 209, 224, 61, 156, 159, 6, 188, 129, 36, 100, 187, 184, 47, 253, 62, 100, 162, 106, 62, 106, 80, 147, 62, 55, 128, 117, 61, 190, 85, 79, 62, 107, 80, 163, 190, 46, 107, 79, 62, 159, 152, 5, 62, 206, 111, 191, 190, 223, 47, 128, 190, 6, 87, 184, 62, 236, 212, 111, 62, 239, 46, 255, 188, 65, 102, 94, 61, 180, 202, 54, 62, 171, 27, 249, 188, 52, 243, 120, 61, 49, 161, 97, 62, 2, 234, 167, 188, 15, 107, 87, 191, 33, 43, 17, 190, 245, 235, 167, 61, 19, 163, 240, 188, 49, 128, 96, 62, 56, 207, 43, 188, 108, 19, 248, 190, 20, 63, 9, 63, 173, 2, 243, 61, 125, 132, 73, 62, 72, 70, 42, 191, 168, 244, 52, 62, 247, 119, 145, 62, 217, 43, 211, 190, 144, 201, 204, 190, 223, 45, 171, 189, 150, 165, 252, 61, 89, 173, 150, 190, 83, 253, 174, 190, 212, 73, 76, 191, 201, 52, 80, 187, 42, 54, 5, 63, 131, 48, 219, 61, 172, 112, 2, 62, 148, 186, 64, 62, 147, 138, 204, 61, 98, 28, 222, 190, 149, 11, 136, 190, 37, 227, 135, 189, 198, 15, 226, 189, 199, 25, 8, 190, 170, 102, 150, 190, 35, 36, 241, 189, 177, 190, 128, 190, 115, 210, 245, 189, 52, 19, 2, 188, 125, 150, 131, 190, 218, 76, 50, 61, 230, 179, 40, 190, 26, 246, 165, 190, 28, 182, 53, 61, 15, 107, 230, 189, 124, 235, 195, 61, 215, 242, 119, 190, 212, 252, 139, 189, 90, 62, 97, 62, 150, 62, 206, 59, 241, 135, 190, 190, 53, 105, 214, 189, 234, 205, 132, 190, 102, 79, 78, 62, 236, 221, 103, 61, 128, 127, 182, 189, 247, 49, 82, 190, 105, 72, 36, 190, 62, 254, 30, 190, 244, 185, 151, 190, 76, 190, 12, 190, 171, 209, 109, 190, 60, 186, 3, 62, 249, 227, 43, 62, 208, 94, 224, 60, 251, 169, 152, 62, 207, 2, 94, 59, 45, 134, 67, 62, 235, 124, 161, 61, 96, 135, 126, 190, 116, 250, 139, 61, 68, 88, 132, 190, 222, 183, 4, 62, 104, 192, 155, 62, 54, 149, 201, 189, 37, 203, 164, 62, 106, 192, 238, 62, 110, 91, 0, 61, 245, 162, 251, 189, 62, 218, 135, 62, 252, 228, 217, 62, 107, 79, 134, 62, 79, 16, 203, 62, 120, 155, 148, 190, 12, 254, 51, 190, 53, 18, 192, 190, 45, 81, 106, 188, 31, 82, 144, 62, 159, 168, 155, 190, 246, 154, 195, 190, 190, 252, 166, 62, 104, 154, 154, 62, 92, 126, 137, 190, 18, 8, 190, 60, 196, 204, 81, 62, 8, 170, 174, 60, 216, 90, 255, 61, 60, 115, 121, 190, 186, 56, 223, 189, 133, 174, 78, 189, 129, 202, 21, 190, 230, 85, 99, 62, 86, 77, 46, 60, 154, 87, 17, 62, 30, 152, 223, 61, 106, 54, 248, 190, 56, 238, 28, 190, 244, 130, 200, 60, 103, 121, 166, 190, 177, 188, 234, 189, 247, 198, 111, 62, 219, 120, 231, 189, 6, 77, 137, 62, 185, 53, 250, 61, 169, 49, 213, 188, 61, 29, 36, 191, 89, 69, 2, 189, 31, 233, 171, 190, 72, 216, 150, 61, 51, 134, 188, 61, 111, 93, 175, 190, 43, 238, 87, 190, 143, 94, 11, 189, 169, 22, 182, 189, 82, 42, 31, 190, 50, 162, 169, 61, 139, 243, 217, 189, 175, 118, 217, 61, 1, 207, 110, 60, 116, 72, 156, 61, 60, 20, 218, 190, 169, 133, 147, 62, 100, 27, 143, 190, 140, 32, 243, 190, 72, 62, 163, 188, 113, 84, 121, 190, 132, 239, 10, 62, 66, 138, 165, 62, 138, 135, 183, 188, 251, 142, 189, 189, 3, 246, 161, 61, 95, 85, 10, 62, 242, 249, 67, 190, 161, 100, 60, 190, 139, 138, 234, 62, 15, 182, 41, 62, 174, 44, 168, 60, 117, 223, 164, 188, 156, 157, 66, 190, 171, 95, 123, 188, 220, 80, 8, 188, 240, 185, 132, 189, 163, 87, 23, 191, 247, 179, 116, 190, 63, 216, 213, 61, 151, 16, 113, 60, 161, 237, 194, 190, 248, 39, 44, 61, 15, 217, 188, 62, 133, 193, 1, 62, 31, 78, 47, 62, 18, 124, 144, 61, 128, 131, 149, 60, 111, 249, 237, 61, 88, 96, 32, 62, 129, 77, 88, 61, 236, 29, 19, 189, 30, 69, 20, 190, 185, 125, 148, 189, 167, 233, 234, 188, 122, 198, 23, 190, 132, 84, 208, 61, 248, 164, 40, 190, 28, 112, 196, 188, 248, 22, 34, 62, 234, 232, 141, 61, 184, 116, 170, 188, 232, 93, 54, 189, 30, 129, 8, 190, 244, 125, 6, 190, 138, 7, 93, 189, 197, 255, 9, 62, 164, 124, 42, 190, 143, 74, 0, 190, 40, 211, 137, 59, 248, 104, 121, 189, 188, 107, 17, 190, 116, 191, 218, 60, 233, 42, 202, 189, 208, 50, 45, 190, 40, 120, 153, 61, 197, 196, 17, 190, 155, 198, 187, 189, 189, 170, 149, 62, 128, 219, 187, 189, 180, 126, 28, 190, 247, 231, 130, 61, 165, 31, 64, 61, 158, 35, 1, 62, 68, 167, 233, 61, 35, 47, 68, 190, 231, 202, 95, 62, 153, 62, 120, 62, 242, 65, 172, 191, 177, 53, 27, 60, 210, 55, 3, 191, 98, 111, 51, 62, 116, 184, 241, 61, 179, 241, 118, 190, 220, 150, 210, 61, 229, 107, 94, 62, 113, 133, 61, 62, 88, 135, 137, 62, 52, 184, 222, 62, 16, 15, 3, 191, 165, 129, 229, 60, 164, 177, 158, 189, 200, 229, 166, 190, 112, 224, 90, 62, 204, 86, 65, 62, 157, 79, 149, 190, 132, 118, 92, 61, 145, 246, 240, 189, 157, 39, 130, 58, 249, 166, 184, 59, 119, 111, 134, 190, 220, 66, 5, 61, 82, 115, 51, 189, 76, 152, 233, 61, 181, 192, 61, 62, 75, 166, 22, 62, 1, 6, 68, 62, 253, 27, 144, 189, 193, 76, 215, 61, 18, 121, 143, 190, 213, 48, 30, 63, 255, 188, 75, 60, 255, 171, 63, 189, 216, 123, 243, 189, 180, 235, 188, 188, 230, 77, 8, 62, 241, 4, 53, 62, 228, 71, 26, 62, 209, 157, 51, 191, 148, 180, 15, 190, 226, 160, 122, 189, 247, 165, 142, 190, 176, 123, 18, 62, 42, 127, 232, 61, 27, 197, 111, 191, 218, 193, 178, 61, 248, 110, 200, 189, 176, 179, 162, 190, 1, 215, 50, 62, 251, 223, 74, 190, 150, 7, 177, 188, 229, 211, 194, 189, 248, 4, 11, 190, 121, 126, 134, 189, 207, 234, 128, 190, 49, 138, 55, 189, 176, 138, 54, 59, 159, 34, 194, 189, 42, 202, 150, 189, 176, 27, 167, 189, 41, 238, 89, 61, 8, 102, 133, 61, 133, 131, 65, 190, 160, 87, 202, 61, 11, 44, 182, 61, 246, 230, 101, 189, 4, 98, 3, 188, 184, 153, 83, 190, 211, 168, 55, 190, 120, 134, 202, 61, 33, 229, 63, 190, 128, 110, 170, 61, 41, 156, 190, 189, 145, 158, 208, 188, 65, 68, 132, 60, 80, 190, 28, 190, 189, 154, 30, 190, 202, 230, 132, 189, 66, 90, 97, 189, 84, 238, 147, 187, 70, 83, 19, 188, 42, 150, 53, 61, 40, 254, 101, 189, 105, 183, 145, 189, 16, 242, 252, 189, 11, 173, 187, 189, 23, 125, 103, 188, 46, 134, 1, 61, 64, 191, 29, 190, 181, 192, 55, 189, 58, 60, 17, 62, 231, 230, 158, 61, 254, 27, 86, 61, 217, 242, 190, 61, 213, 217, 122, 189, 90, 146, 150, 60, 82, 106, 50, 61, 100, 103, 185, 189, 219, 134, 175, 189, 140, 204, 58, 61, 102, 209, 96, 189, 207, 175, 194, 60, 134, 249, 175, 189, 159, 162, 5, 190, 133, 85, 109, 61, 180, 72, 157, 189, 160, 242, 130, 189, 84, 2, 10, 190, 109, 196, 23, 61, 234, 185, 37, 189, 167, 53, 134, 61, 52, 193, 225, 60, 31, 110, 10, 190, 77, 193, 204, 61, 62, 131, 49, 190, 72, 66, 246, 59, 35, 21, 226, 188, 248, 235, 59, 62, 246, 26, 134, 189, 31, 151, 249, 61, 176, 246, 111, 62, 250, 15, 59, 189, 190, 75, 168, 62, 74, 160, 60, 61, 154, 30, 72, 61, 200, 136, 157, 62, 118, 57, 111, 63, 194, 10, 216, 189, 216, 100, 143, 189, 105, 71, 11, 62, 72, 108, 179, 189, 129, 20, 150, 62, 0, 85, 67, 188, 97, 32, 23, 189, 195, 206, 231, 189, 214, 208, 165, 61, 196, 41, 47, 190, 10, 33, 186, 190, 56, 226, 243, 61, 255, 17, 9, 63, 97, 151, 122, 190, 155, 60, 53, 61, 219, 45, 4, 189, 188, 226, 153, 61, 146, 33, 42, 189, 135, 43, 237, 61, 10, 148, 225, 61, 59, 16, 225, 61, 120, 149, 150, 188, 75, 135, 239, 187, 237, 84, 248, 189, 206, 218, 39, 190, 26, 32, 211, 189, 230, 231, 142, 189, 47, 119, 152, 189, 36, 67, 0, 190, 198, 131, 31, 190, 198, 236, 178, 189, 4, 12, 96, 61, 14, 170, 39, 61, 210, 190, 204, 189, 28, 86, 146, 189, 129, 2, 170, 61, 70, 121, 41, 61, 89, 107, 39, 190, 172, 63, 139, 61, 224, 208, 55, 190, 228, 93, 230, 61, 179, 178, 62, 189, 96, 54, 20, 190, 122, 6, 147, 61, 96, 71, 217, 61, 171, 236, 170, 60, 10, 191, 134, 61, 65, 225, 245, 61, 245, 237, 32, 190, 161, 220, 249, 61, 232, 103, 88, 61, 29, 67, 158, 189, 66, 169, 79, 61, 66, 185, 215, 60, 169, 10, 127, 189, 197, 138, 22, 188, 103, 103, 43, 189, 119, 253, 147, 189, 40, 183, 71, 61, 207, 67, 116, 189, 26, 222, 33, 190, 45, 250, 23, 190, 176, 251, 44, 190, 13, 87, 29, 190, 150, 25, 167, 189, 202, 250, 200, 61, 144, 108, 90, 189, 84, 85, 34, 62, 142, 248, 34, 58, 55, 163, 37, 62, 183, 46, 27, 62, 253, 205, 202, 60, 113, 214, 80, 189, 122, 207, 185, 61, 221, 209, 220, 189, 221, 59, 92, 187, 88, 107, 135, 61, 57, 137, 217, 61, 190, 24, 222, 61, 52, 225, 88, 189, 148, 97, 211, 189, 249, 115, 52, 190, 68, 202, 52, 190, 189, 224, 76, 61, 79, 225, 210, 61, 186, 91, 210, 189, 140, 247, 72, 62, 143, 16, 195, 60, 44, 179, 186, 187, 107, 174, 156, 62, 251, 107, 26, 62, 107, 161, 24, 60, 109, 214, 174, 62, 113, 76, 56, 62, 94, 234, 187, 190, 219, 151, 163, 62, 86, 61, 79, 61, 205, 147, 37, 61, 174, 70, 204, 60, 105, 69, 43, 62, 205, 182, 12, 191, 22, 37, 155, 190, 59, 209, 71, 61, 2, 101, 209, 189, 160, 199, 204, 60, 63, 157, 201, 189, 149, 126, 9, 187, 20, 245, 75, 62, 80, 233, 67, 191, 221, 74, 94, 189, 197, 218, 234, 62, 231, 113, 246, 189, 186, 162, 120, 61, 135, 170, 102, 188, 229, 123, 217, 62, 166, 186, 169, 190, 135, 20, 185, 188, 174, 18, 168, 62, 20, 17, 214, 190, 132, 243, 167, 190, 204, 73, 147, 191, 36, 40, 17, 190, 162, 155, 218, 61, 154, 119, 161, 189, 191, 18, 187, 61, 229, 179, 41, 191, 146, 44, 249, 61, 81, 28, 9, 191, 31, 69, 28, 62, 75, 91, 221, 190, 115, 156, 11, 190, 36, 164, 46, 63, 191, 224, 40, 190, 252, 54, 62, 62, 138, 154, 65, 191, 196, 25, 49, 63, 118, 29, 96, 190, 0, 83, 197, 62, 206, 200, 2, 188, 137, 98, 39, 59, 158, 136, 105, 60, 182, 166, 104, 62, 32, 142, 54, 190, 138, 85, 142, 61, 206, 141, 52, 189, 68, 131, 87, 189, 170, 228, 211, 62, 72, 222, 163, 61, 145, 178, 140, 189, 17, 179, 37, 191, 4, 101, 230, 61, 44, 182, 235, 188, 211, 226, 40, 190, 113, 101, 7, 60, 61, 159, 4, 62, 149, 39, 19, 62, 54, 136, 100, 191, 104, 226, 24, 191, 228, 201, 203, 190, 130, 66, 16, 191, 83, 43, 97, 191, 32, 213, 191, 61, 159, 197, 30, 61, 110, 24, 102, 191, 229, 100, 149, 61, 117, 248, 47, 191, 151, 56, 103, 191, 66, 59, 136, 190, 84, 241, 210, 61, 222, 202, 92, 190, 25, 69, 101, 62, 54, 54, 35, 60, 111, 78, 178, 190, 171, 50, 138, 60, 134, 16, 228, 60, 230, 224, 141, 61, 96, 66, 41, 190, 16, 3, 230, 189, 17, 181, 16, 191, 20, 244, 94, 190, 101, 30, 19, 62, 161, 13, 239, 189, 15, 224, 59, 62, 193, 86, 56, 191, 121, 216, 1, 190, 31, 165, 61, 189, 92, 42, 77, 190, 74, 55, 54, 62, 25, 186, 96, 62, 112, 192, 60, 190, 54, 193, 143, 61, 241, 204, 69, 62, 123, 123, 129, 190, 74, 12, 86, 191, 145, 75, 211, 189, 62, 142, 86, 189, 21, 162, 5, 191, 117, 27, 216, 61, 251, 207, 69, 190, 136, 169, 22, 187, 221, 242, 148, 61, 155, 245, 202, 61, 156, 221, 1, 191, 29, 74, 13, 62, 254, 160, 161, 190, 178, 212, 68, 190, 158, 214, 177, 61, 150, 241, 50, 188, 148, 183, 177, 62, 88, 117, 105, 62, 173, 46, 184, 62, 235, 53, 27, 62, 84, 128, 127, 189, 165, 135, 7, 190, 230, 178, 153, 189, 152, 14, 115, 61, 115, 44, 238, 60, 227, 64, 199, 61, 107, 4, 164, 61, 125, 119, 210, 188, 102, 69, 38, 190, 39, 35, 222, 61, 9, 237, 64, 190, 138, 13, 92, 190, 64, 162, 176, 61, 191, 165, 135, 61, 158, 249, 121, 190, 54, 83, 215, 61, 38, 77, 154, 61, 83, 178, 230, 189, 41, 174, 61, 189, 175, 227, 163, 61, 19, 15, 28, 190, 228, 72, 37, 190, 218, 49, 141, 61, 124, 101, 165, 189, 49, 148, 32, 61, 70, 105, 212, 189, 187, 88, 59, 190, 189, 30, 200, 61, 159, 72, 26, 189, 24, 215, 117, 189, 213, 192, 7, 61, 177, 31, 246, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 116, 115, 62, 164, 26, 183, 61, 6, 11, 175, 61, 9, 147, 189, 61, 186, 199, 126, 61, 152, 130, 192, 189, 155, 21, 74, 61, 187, 61, 24, 190, 112, 207, 160, 62, 21, 99, 35, 62, 251, 204, 108, 61, 143, 9, 91, 61, 80, 14, 117, 61, 33, 132, 34, 62, 163, 112, 163, 190, 212, 158, 204, 60, 125, 166, 82, 62, 149, 197, 190, 189, 1, 233, 84, 62, 222, 23, 162, 60, 215, 62, 103, 61, 226, 146, 149, 190, 97, 63, 219, 189, 163, 51, 12, 188, 243, 181, 92, 190, 2, 86, 98, 190, 28, 222, 5, 190, 60, 253, 145, 190, 241, 180, 89, 62, 143, 92, 138, 189, 229, 145, 161, 189, 217, 159, 106, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {214, 187, 96, 191, 167, 59, 30, 190, 14, 153, 16, 63, 76, 144, 141, 62, 226, 204, 118, 63, 226, 104, 44, 190, 118, 193, 97, 63, 254, 106, 248, 61, 120, 224, 78, 63, 16, 135, 200, 62, 239, 104, 17, 62, 104, 104, 37, 190, 179, 2, 238, 190, 68, 64, 150, 190, 56, 105, 158, 191, 9, 41, 195, 62, 21, 59, 248, 190, 82, 50, 87, 62, 230, 209, 222, 190, 45, 162, 95, 189, 173, 203, 68, 62, 76, 202, 43, 62, 89, 70, 174, 61, 193, 199, 23, 190, 248, 253, 69, 62, 197, 199, 156, 187, 41, 233, 172, 189, 123, 3, 44, 190, 140, 16, 21, 191, 42, 131, 55, 63, 249, 95, 195, 61, 57, 163, 83, 189, 121, 190, 54, 62, 186, 198, 252, 61, 90, 96, 246, 62, 115, 190, 246, 190, 179, 115, 201, 61, 168, 116, 213, 61, 198, 150, 102, 190, 98, 245, 179, 189, 108, 188, 59, 62, 104, 39, 7, 190, 94, 161, 168, 62, 231, 100, 136, 190, 204, 62, 33, 60, 20, 108, 64, 190, 93, 159, 131, 62, 37, 94, 229, 188, 162, 214, 31, 190, 12, 133, 155, 59, 185, 23, 102, 61, 92, 147, 242, 61, 218, 110, 33, 191, 117, 160, 115, 62, 102, 95, 110, 61, 166, 139, 179, 61, 21, 219, 157, 62, 94, 240, 166, 187, 236, 248, 11, 62, 161, 12, 113, 62, 245, 162, 65, 190, 246, 159, 130, 61, 165, 226, 146, 190, 144, 120, 10, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 180, 34, 190, 186, 81, 122, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {90, 59, 48, 189, 186, 112, 78, 190, 65, 72, 12, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {231, 35, 27, 190, 18, 194, 56, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0070/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}