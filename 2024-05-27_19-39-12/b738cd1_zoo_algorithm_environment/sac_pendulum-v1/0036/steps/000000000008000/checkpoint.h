// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {13, 56, 94, 63, 121, 68, 157, 63, 153, 59, 222, 62, 22, 244, 237, 190, 73, 39, 148, 191, 32, 232, 31, 191, 217, 157, 11, 62, 40, 205, 130, 191, 60, 35, 58, 61, 43, 206, 90, 190, 125, 142, 100, 63, 202, 8, 47, 190, 168, 227, 92, 190, 79, 4, 236, 190, 11, 49, 68, 62, 253, 95, 9, 62, 39, 229, 165, 62, 162, 181, 187, 190, 143, 111, 210, 61, 175, 20, 67, 191, 194, 30, 212, 190, 156, 86, 206, 62, 217, 47, 178, 62, 46, 212, 248, 190, 232, 170, 40, 63, 43, 169, 112, 191, 247, 15, 179, 190, 29, 195, 112, 63, 89, 35, 55, 62, 69, 142, 138, 61, 226, 233, 109, 190, 46, 126, 80, 63, 195, 195, 226, 62, 84, 86, 223, 62, 55, 33, 173, 60, 114, 38, 174, 62, 56, 85, 21, 191, 159, 227, 75, 63, 94, 114, 212, 62, 47, 215, 33, 191, 147, 183, 9, 191, 4, 38, 87, 189, 87, 246, 171, 190, 163, 19, 101, 189, 206, 180, 141, 190, 14, 197, 26, 187, 233, 106, 142, 190, 49, 207, 3, 63, 148, 250, 8, 59, 197, 251, 90, 61, 5, 227, 36, 191, 135, 174, 61, 63, 44, 19, 233, 190, 232, 141, 175, 190, 209, 50, 33, 62, 147, 247, 195, 62, 22, 150, 10, 191, 205, 146, 96, 62, 231, 146, 50, 191, 45, 31, 178, 189, 132, 205, 134, 62, 173, 59, 30, 63, 157, 205, 26, 62, 214, 149, 247, 189, 227, 224, 238, 61, 94, 166, 194, 62, 139, 148, 176, 62, 54, 59, 223, 189, 199, 168, 132, 190, 208, 40, 222, 62, 89, 205, 65, 62, 203, 117, 197, 190, 69, 85, 199, 190, 122, 163, 69, 62, 170, 86, 241, 190, 245, 1, 140, 190, 63, 97, 103, 189, 92, 82, 74, 61, 58, 136, 129, 190, 195, 135, 227, 190, 134, 89, 75, 191, 41, 167, 27, 62, 127, 34, 52, 63, 129, 154, 240, 60, 168, 124, 98, 63, 107, 190, 144, 191, 117, 85, 153, 190, 16, 100, 30, 63, 173, 95, 43, 63, 40, 93, 213, 62, 174, 221, 229, 190, 140, 21, 103, 191, 181, 86, 207, 61, 33, 87, 15, 191, 42, 222, 95, 63, 77, 94, 26, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 92, 4, 191, 178, 118, 106, 189, 231, 121, 21, 191, 250, 189, 142, 62, 151, 105, 219, 62, 114, 192, 140, 190, 120, 228, 5, 190, 159, 65, 186, 61, 57, 16, 72, 60, 52, 172, 231, 62, 202, 204, 218, 190, 251, 195, 227, 190, 144, 128, 221, 190, 150, 223, 47, 63, 22, 94, 97, 191, 226, 175, 208, 61, 179, 218, 132, 190, 206, 31, 67, 191, 202, 155, 149, 190, 113, 243, 35, 63, 117, 49, 188, 61, 60, 230, 8, 191, 218, 109, 28, 63, 34, 138, 61, 63, 131, 180, 27, 191, 101, 84, 14, 63, 149, 106, 174, 59, 48, 147, 198, 62, 67, 21, 112, 189, 248, 22, 129, 62, 35, 61, 129, 62, 124, 48, 64, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 143, 190, 190, 142, 125, 59, 61, 115, 60, 171, 189, 112, 185, 172, 189, 134, 231, 147, 61, 154, 54, 172, 190, 185, 239, 130, 62, 82, 245, 45, 62, 232, 253, 55, 62, 230, 172, 228, 61, 95, 194, 180, 190, 252, 123, 72, 60, 127, 11, 242, 62, 186, 191, 33, 62, 161, 65, 212, 61, 116, 97, 200, 62, 2, 147, 141, 190, 229, 117, 178, 188, 208, 115, 158, 62, 144, 38, 113, 62, 21, 15, 245, 190, 17, 69, 38, 189, 184, 232, 44, 61, 209, 38, 166, 59, 67, 147, 135, 190, 188, 191, 61, 62, 1, 8, 16, 190, 122, 25, 111, 62, 7, 119, 17, 62, 156, 126, 140, 190, 119, 178, 59, 62, 10, 251, 117, 190, 186, 243, 205, 189, 83, 1, 55, 187, 108, 175, 88, 190, 87, 79, 219, 189, 133, 220, 11, 60, 250, 123, 254, 189, 9, 24, 32, 190, 163, 122, 13, 190, 29, 232, 4, 62, 86, 221, 148, 60, 224, 214, 100, 189, 143, 29, 110, 190, 165, 160, 206, 58, 66, 181, 67, 189, 21, 171, 195, 189, 181, 123, 201, 61, 230, 113, 17, 62, 136, 102, 198, 61, 179, 55, 23, 62, 199, 191, 245, 186, 133, 78, 41, 61, 41, 184, 105, 189, 123, 194, 74, 190, 82, 148, 226, 61, 253, 8, 29, 190, 42, 220, 18, 189, 22, 223, 224, 189, 25, 223, 16, 61, 76, 201, 233, 187, 111, 209, 142, 188, 142, 194, 79, 190, 14, 225, 47, 190, 219, 29, 156, 190, 215, 152, 60, 191, 138, 117, 75, 190, 233, 30, 151, 61, 22, 235, 194, 61, 31, 0, 212, 189, 89, 251, 222, 62, 76, 16, 187, 62, 171, 156, 29, 62, 48, 67, 38, 62, 182, 149, 157, 189, 108, 143, 162, 60, 218, 229, 133, 61, 162, 74, 141, 59, 50, 221, 42, 190, 56, 174, 133, 61, 214, 10, 115, 190, 154, 61, 22, 62, 235, 199, 21, 62, 47, 80, 172, 188, 136, 136, 145, 190, 107, 37, 145, 61, 83, 130, 66, 189, 83, 9, 167, 61, 225, 251, 84, 61, 173, 204, 14, 62, 185, 25, 194, 190, 121, 68, 242, 61, 149, 99, 125, 62, 218, 7, 155, 189, 246, 48, 113, 190, 36, 230, 46, 62, 205, 42, 90, 189, 101, 25, 201, 61, 251, 194, 56, 187, 129, 104, 58, 190, 206, 2, 180, 60, 45, 130, 247, 190, 190, 27, 47, 62, 134, 17, 140, 60, 154, 118, 114, 62, 145, 62, 18, 191, 31, 116, 150, 61, 122, 32, 119, 190, 147, 78, 144, 62, 74, 38, 135, 61, 130, 211, 131, 189, 24, 215, 58, 62, 140, 11, 81, 190, 20, 158, 253, 60, 177, 55, 239, 61, 158, 186, 40, 62, 219, 206, 64, 190, 27, 124, 37, 62, 15, 11, 122, 190, 28, 71, 141, 190, 132, 91, 144, 190, 86, 175, 102, 62, 81, 11, 220, 58, 100, 81, 97, 188, 26, 194, 125, 188, 243, 78, 73, 190, 5, 60, 62, 62, 236, 136, 63, 62, 61, 197, 3, 61, 110, 165, 46, 188, 162, 21, 54, 190, 67, 208, 177, 189, 84, 60, 219, 189, 219, 113, 12, 62, 179, 109, 6, 62, 215, 182, 41, 62, 221, 238, 78, 189, 135, 178, 199, 189, 88, 254, 58, 190, 251, 222, 81, 189, 229, 155, 6, 62, 164, 67, 174, 60, 204, 177, 229, 187, 77, 79, 96, 61, 63, 217, 61, 190, 17, 30, 18, 61, 4, 129, 2, 189, 184, 143, 5, 190, 147, 71, 9, 189, 47, 255, 49, 190, 110, 254, 88, 189, 104, 7, 53, 190, 11, 3, 141, 189, 136, 224, 50, 190, 23, 248, 146, 61, 94, 238, 202, 189, 238, 169, 180, 59, 140, 135, 201, 60, 248, 3, 187, 61, 149, 107, 24, 57, 12, 179, 100, 191, 54, 136, 147, 61, 138, 35, 212, 190, 226, 235, 244, 190, 24, 55, 100, 62, 201, 55, 139, 190, 210, 96, 95, 190, 223, 137, 31, 62, 50, 130, 51, 190, 71, 242, 39, 191, 213, 236, 75, 190, 153, 149, 3, 191, 60, 80, 175, 60, 104, 110, 122, 62, 63, 5, 57, 62, 83, 168, 253, 61, 128, 19, 153, 190, 99, 65, 25, 62, 206, 151, 52, 61, 94, 26, 79, 62, 240, 42, 35, 63, 136, 147, 92, 190, 24, 94, 156, 190, 170, 130, 239, 189, 165, 235, 116, 190, 219, 160, 53, 62, 80, 45, 158, 190, 179, 205, 251, 61, 94, 218, 93, 190, 23, 188, 144, 189, 35, 76, 62, 61, 224, 5, 54, 62, 28, 48, 172, 61, 197, 37, 193, 188, 42, 105, 201, 190, 65, 157, 197, 61, 49, 19, 65, 62, 196, 100, 69, 62, 34, 195, 98, 190, 81, 33, 20, 190, 226, 53, 194, 189, 18, 142, 231, 61, 97, 3, 107, 62, 102, 89, 57, 61, 31, 133, 11, 190, 22, 56, 84, 62, 44, 0, 182, 190, 72, 221, 72, 190, 252, 24, 102, 62, 147, 48, 142, 190, 251, 83, 75, 189, 70, 124, 165, 61, 105, 2, 117, 62, 190, 221, 7, 62, 148, 64, 197, 189, 30, 85, 0, 189, 243, 45, 19, 62, 214, 11, 152, 62, 97, 31, 233, 60, 46, 61, 206, 186, 241, 96, 128, 190, 69, 40, 57, 62, 118, 10, 48, 188, 42, 17, 7, 189, 98, 28, 33, 62, 89, 100, 123, 62, 230, 208, 149, 191, 142, 160, 95, 62, 153, 235, 254, 189, 33, 68, 205, 62, 35, 1, 128, 190, 245, 123, 116, 190, 56, 204, 183, 190, 141, 62, 111, 62, 201, 71, 91, 62, 197, 20, 110, 62, 225, 229, 204, 190, 47, 128, 166, 62, 109, 22, 53, 190, 135, 94, 160, 190, 21, 84, 191, 60, 40, 96, 57, 191, 38, 202, 206, 190, 62, 203, 141, 62, 9, 13, 137, 62, 76, 67, 194, 58, 224, 34, 0, 62, 76, 117, 154, 62, 188, 55, 71, 62, 3, 125, 128, 61, 217, 109, 31, 62, 47, 99, 71, 60, 35, 109, 62, 191, 249, 52, 176, 60, 133, 227, 174, 188, 127, 88, 56, 62, 219, 153, 96, 62, 26, 107, 110, 61, 186, 75, 165, 189, 255, 78, 74, 62, 55, 109, 116, 190, 30, 73, 118, 62, 71, 192, 4, 62, 58, 1, 59, 189, 81, 144, 133, 190, 145, 65, 15, 191, 80, 126, 199, 189, 78, 221, 135, 62, 186, 50, 109, 190, 0, 218, 162, 190, 58, 127, 22, 62, 100, 58, 140, 190, 185, 110, 45, 62, 1, 62, 229, 59, 38, 86, 22, 62, 255, 37, 10, 191, 26, 11, 157, 62, 112, 210, 210, 189, 19, 73, 137, 189, 190, 173, 43, 62, 217, 193, 208, 62, 226, 177, 123, 186, 132, 199, 121, 62, 140, 33, 197, 62, 182, 150, 174, 188, 7, 171, 171, 62, 129, 222, 19, 62, 12, 27, 30, 58, 41, 92, 136, 60, 37, 27, 226, 61, 205, 192, 172, 61, 10, 104, 103, 189, 128, 233, 240, 189, 158, 110, 204, 189, 207, 48, 7, 190, 229, 181, 45, 59, 8, 212, 33, 190, 74, 209, 30, 190, 213, 168, 83, 61, 113, 113, 33, 190, 34, 25, 30, 62, 244, 249, 22, 190, 38, 126, 131, 189, 168, 82, 138, 189, 92, 7, 17, 190, 103, 138, 247, 61, 217, 176, 132, 189, 147, 202, 224, 59, 110, 190, 60, 190, 229, 244, 28, 62, 255, 14, 39, 62, 57, 204, 133, 61, 163, 117, 155, 188, 32, 240, 49, 61, 180, 123, 228, 188, 137, 251, 169, 189, 103, 183, 212, 189, 240, 189, 61, 190, 184, 225, 35, 190, 109, 38, 140, 60, 250, 31, 145, 61, 20, 13, 23, 190, 225, 177, 200, 189, 146, 7, 35, 190, 72, 78, 1, 190, 122, 212, 151, 61, 39, 53, 158, 61, 251, 224, 183, 61, 65, 8, 51, 61, 45, 79, 135, 189, 82, 198, 183, 61, 0, 225, 212, 189, 137, 168, 189, 189, 199, 42, 199, 189, 15, 250, 127, 59, 75, 99, 234, 189, 132, 255, 45, 62, 185, 236, 33, 190, 221, 46, 190, 188, 252, 234, 11, 62, 235, 42, 31, 62, 209, 3, 216, 60, 15, 5, 48, 190, 156, 20, 18, 190, 120, 68, 43, 62, 1, 49, 154, 189, 207, 130, 50, 188, 102, 64, 171, 60, 6, 220, 176, 189, 66, 128, 139, 189, 191, 206, 119, 188, 5, 46, 25, 186, 161, 156, 206, 62, 115, 3, 183, 188, 83, 214, 14, 187, 65, 94, 1, 62, 69, 174, 233, 61, 96, 168, 41, 62, 143, 190, 42, 62, 39, 100, 162, 60, 238, 172, 175, 61, 180, 151, 234, 190, 178, 147, 193, 190, 95, 152, 132, 190, 103, 179, 137, 190, 249, 185, 35, 190, 246, 105, 151, 61, 210, 226, 242, 189, 157, 79, 149, 62, 110, 134, 192, 61, 155, 40, 33, 62, 19, 242, 162, 190, 140, 9, 153, 62, 110, 242, 118, 190, 54, 117, 84, 62, 245, 141, 60, 62, 251, 4, 226, 62, 200, 140, 194, 61, 92, 169, 129, 61, 42, 182, 196, 62, 209, 205, 120, 187, 247, 118, 171, 189, 181, 29, 222, 62, 83, 242, 98, 189, 162, 67, 173, 190, 24, 156, 119, 190, 116, 194, 232, 61, 246, 183, 92, 190, 217, 14, 54, 62, 62, 211, 201, 190, 87, 86, 29, 62, 38, 254, 114, 62, 240, 196, 138, 62, 26, 14, 182, 61, 120, 199, 10, 190, 63, 239, 62, 189, 54, 59, 180, 62, 62, 164, 34, 61, 59, 177, 71, 62, 221, 230, 78, 61, 18, 45, 211, 189, 163, 236, 74, 189, 189, 7, 32, 62, 86, 205, 112, 62, 219, 160, 17, 191, 60, 178, 164, 59, 158, 187, 185, 189, 117, 110, 60, 190, 190, 96, 15, 191, 231, 128, 59, 62, 22, 228, 31, 189, 20, 224, 226, 61, 34, 113, 167, 62, 48, 67, 218, 189, 199, 75, 140, 61, 248, 28, 185, 61, 30, 167, 215, 190, 248, 241, 40, 62, 89, 176, 199, 189, 209, 165, 8, 190, 45, 160, 176, 62, 127, 153, 41, 187, 177, 152, 108, 62, 223, 73, 183, 189, 129, 195, 82, 62, 67, 224, 121, 190, 31, 197, 52, 61, 184, 81, 15, 190, 183, 108, 152, 190, 217, 129, 15, 189, 189, 196, 15, 62, 247, 221, 164, 190, 149, 63, 42, 62, 10, 239, 219, 189, 14, 178, 203, 61, 139, 196, 74, 62, 23, 165, 192, 190, 185, 4, 29, 190, 160, 199, 63, 62, 156, 229, 142, 61, 218, 25, 19, 61, 190, 188, 153, 189, 36, 232, 72, 61, 221, 52, 22, 62, 28, 104, 138, 62, 25, 205, 135, 190, 58, 127, 172, 62, 1, 221, 51, 191, 62, 200, 77, 62, 222, 255, 171, 62, 29, 238, 152, 190, 147, 137, 3, 62, 175, 29, 84, 62, 155, 5, 207, 62, 225, 184, 172, 190, 81, 196, 16, 190, 195, 6, 161, 189, 90, 50, 180, 62, 97, 6, 31, 62, 83, 194, 196, 61, 110, 153, 45, 190, 124, 13, 130, 188, 245, 233, 161, 190, 230, 99, 254, 189, 240, 84, 79, 61, 19, 31, 169, 190, 60, 244, 175, 190, 166, 11, 164, 62, 209, 222, 27, 62, 227, 44, 76, 189, 219, 229, 134, 62, 97, 202, 43, 62, 27, 84, 236, 62, 128, 24, 32, 62, 188, 21, 102, 62, 97, 2, 78, 190, 68, 78, 186, 190, 163, 240, 108, 62, 239, 60, 197, 190, 148, 64, 22, 62, 69, 245, 204, 188, 157, 210, 15, 190, 237, 254, 140, 189, 213, 37, 238, 60, 222, 46, 210, 61, 27, 120, 37, 189, 41, 224, 54, 189, 95, 172, 74, 62, 111, 190, 145, 62, 34, 153, 217, 62, 13, 78, 112, 187, 212, 250, 252, 187, 187, 6, 146, 61, 183, 70, 149, 190, 49, 50, 9, 62, 239, 184, 225, 59, 247, 136, 35, 62, 126, 7, 115, 189, 216, 29, 150, 189, 129, 125, 42, 62, 104, 192, 124, 62, 7, 69, 190, 59, 41, 75, 69, 186, 22, 210, 44, 61, 128, 242, 118, 62, 6, 3, 139, 61, 117, 240, 137, 189, 137, 127, 128, 62, 118, 7, 168, 61, 204, 112, 160, 62, 122, 152, 91, 190, 186, 4, 45, 190, 39, 35, 29, 189, 102, 102, 82, 62, 202, 149, 127, 190, 219, 84, 70, 190, 2, 166, 146, 62, 142, 47, 153, 60, 14, 95, 96, 189, 80, 165, 195, 188, 87, 59, 82, 190, 232, 190, 214, 62, 19, 221, 211, 189, 61, 106, 114, 190, 155, 217, 167, 191, 73, 250, 151, 187, 101, 119, 106, 190, 225, 2, 65, 190, 184, 123, 193, 61, 20, 175, 166, 190, 221, 86, 101, 187, 73, 3, 134, 62, 248, 83, 18, 61, 59, 47, 42, 190, 238, 142, 53, 62, 99, 166, 44, 62, 117, 5, 233, 57, 166, 5, 131, 61, 108, 44, 87, 62, 143, 8, 53, 190, 55, 46, 41, 190, 118, 204, 208, 189, 162, 158, 146, 188, 142, 248, 141, 61, 52, 5, 246, 189, 135, 85, 39, 62, 68, 236, 10, 190, 94, 98, 191, 189, 246, 22, 13, 190, 129, 200, 100, 61, 189, 0, 251, 61, 36, 234, 123, 61, 247, 116, 19, 61, 165, 141, 146, 189, 115, 229, 12, 61, 138, 121, 155, 61, 170, 152, 130, 189, 219, 41, 0, 190, 186, 39, 209, 61, 202, 58, 120, 189, 223, 164, 250, 60, 143, 196, 243, 60, 75, 33, 31, 190, 36, 43, 240, 189, 141, 135, 18, 62, 103, 250, 132, 189, 12, 187, 249, 61, 181, 221, 165, 189, 91, 168, 28, 190, 92, 46, 36, 62, 99, 73, 246, 189, 215, 73, 243, 188, 104, 138, 18, 190, 50, 159, 18, 61, 249, 12, 23, 61, 243, 169, 143, 60, 101, 105, 50, 190, 202, 52, 33, 190, 250, 36, 209, 61, 172, 116, 24, 190, 11, 40, 48, 190, 79, 113, 182, 61, 241, 122, 154, 189, 69, 34, 192, 61, 151, 51, 191, 189, 146, 179, 9, 189, 7, 47, 69, 189, 125, 22, 44, 190, 122, 135, 57, 61, 41, 247, 155, 61, 250, 251, 151, 61, 9, 85, 145, 189, 40, 107, 14, 190, 46, 141, 42, 62, 66, 40, 35, 190, 239, 60, 206, 189, 12, 159, 40, 189, 208, 114, 165, 59, 66, 123, 231, 59, 209, 0, 133, 189, 40, 165, 157, 189, 107, 235, 142, 189, 41, 161, 14, 190, 61, 6, 233, 189, 87, 185, 59, 61, 213, 221, 225, 189, 145, 164, 198, 61, 79, 19, 130, 189, 86, 1, 5, 61, 160, 208, 27, 59, 55, 237, 2, 189, 240, 148, 195, 61, 49, 78, 54, 190, 212, 30, 177, 61, 216, 142, 37, 189, 252, 124, 103, 61, 198, 190, 54, 189, 210, 254, 241, 60, 21, 246, 1, 62, 64, 233, 60, 190, 65, 235, 66, 188, 178, 189, 210, 189, 171, 94, 29, 190, 122, 25, 8, 190, 55, 121, 173, 61, 0, 159, 71, 186, 5, 220, 151, 189, 104, 213, 69, 190, 149, 130, 186, 61, 114, 47, 5, 190, 255, 180, 59, 189, 115, 123, 114, 60, 111, 191, 130, 190, 105, 152, 146, 61, 20, 147, 50, 190, 224, 0, 119, 189, 137, 13, 52, 189, 117, 153, 96, 190, 13, 178, 142, 61, 76, 31, 16, 187, 96, 147, 17, 190, 128, 15, 5, 189, 197, 236, 198, 189, 78, 184, 4, 190, 213, 150, 207, 189, 228, 87, 45, 190, 6, 95, 96, 189, 150, 224, 63, 187, 103, 185, 130, 189, 83, 115, 231, 189, 35, 200, 244, 189, 147, 244, 159, 61, 127, 237, 128, 189, 167, 147, 9, 62, 60, 111, 176, 189, 171, 4, 238, 189, 5, 224, 154, 61, 26, 190, 17, 189, 181, 125, 38, 190, 163, 101, 145, 188, 115, 76, 199, 61, 84, 221, 111, 60, 50, 150, 130, 188, 71, 29, 158, 61, 220, 230, 0, 61, 224, 162, 83, 59, 125, 52, 48, 190, 222, 0, 201, 186, 4, 216, 16, 61, 43, 234, 39, 60, 1, 8, 142, 61, 163, 126, 163, 189, 133, 1, 165, 189, 235, 125, 62, 61, 155, 115, 8, 190, 172, 141, 22, 191, 102, 19, 47, 62, 26, 191, 211, 188, 24, 170, 213, 190, 138, 233, 255, 190, 54, 158, 180, 190, 190, 41, 148, 190, 14, 41, 182, 59, 177, 8, 219, 189, 206, 235, 106, 60, 44, 36, 142, 62, 116, 103, 150, 190, 145, 193, 193, 62, 190, 98, 54, 190, 46, 73, 76, 190, 114, 127, 130, 190, 222, 107, 110, 62, 82, 250, 91, 190, 132, 46, 11, 62, 219, 53, 205, 190, 31, 233, 211, 190, 204, 118, 152, 190, 243, 32, 227, 189, 39, 243, 17, 190, 253, 14, 147, 190, 62, 91, 129, 190, 194, 241, 114, 188, 165, 187, 170, 62, 7, 255, 170, 189, 169, 61, 80, 61, 181, 92, 108, 191, 227, 62, 6, 62, 191, 48, 231, 62, 166, 207, 134, 60, 104, 110, 107, 189, 185, 84, 136, 189, 33, 60, 179, 60, 20, 142, 138, 189, 241, 111, 126, 60, 52, 12, 118, 187, 227, 153, 168, 61, 164, 205, 5, 189, 150, 78, 180, 61, 123, 141, 33, 61, 251, 238, 212, 61, 255, 42, 243, 190, 169, 185, 87, 189, 146, 172, 135, 62, 61, 155, 108, 190, 15, 247, 41, 190, 183, 149, 9, 190, 190, 197, 115, 188, 135, 197, 157, 190, 211, 91, 108, 62, 1, 122, 130, 189, 217, 100, 38, 191, 175, 164, 199, 62, 196, 112, 176, 61, 62, 213, 29, 61, 236, 156, 154, 61, 244, 86, 162, 62, 27, 163, 55, 62, 88, 109, 205, 189, 225, 122, 9, 190, 20, 17, 65, 189, 124, 54, 4, 190, 19, 183, 130, 60, 235, 157, 58, 62, 136, 114, 140, 62, 165, 14, 145, 62, 21, 171, 184, 61, 32, 73, 236, 62, 70, 213, 105, 62, 35, 10, 8, 60, 170, 215, 217, 190, 206, 29, 129, 61, 40, 79, 53, 61, 90, 16, 168, 61, 89, 116, 203, 62, 222, 38, 62, 62, 176, 67, 43, 189, 241, 57, 134, 190, 18, 187, 52, 61, 63, 13, 230, 189, 86, 13, 46, 190, 182, 203, 152, 190, 21, 7, 62, 191, 34, 168, 160, 61, 166, 17, 39, 62, 128, 170, 153, 62, 166, 99, 30, 61, 171, 245, 216, 189, 162, 235, 243, 190, 114, 119, 147, 188, 147, 189, 153, 62, 56, 229, 79, 188, 94, 154, 129, 189, 207, 221, 243, 61, 28, 91, 136, 189, 235, 71, 110, 189, 87, 251, 137, 189, 135, 66, 174, 61, 46, 52, 47, 62, 138, 245, 255, 61, 239, 195, 143, 190, 222, 251, 9, 191, 47, 242, 31, 62, 12, 184, 241, 188, 183, 141, 93, 190, 99, 188, 225, 61, 212, 100, 35, 62, 224, 98, 117, 189, 95, 182, 106, 62, 11, 5, 125, 190, 59, 202, 230, 189, 44, 167, 252, 60, 207, 226, 127, 190, 254, 248, 204, 61, 184, 65, 245, 61, 29, 174, 75, 188, 191, 230, 55, 191, 41, 19, 6, 62, 36, 41, 92, 190, 73, 166, 158, 61, 205, 180, 73, 190, 51, 131, 51, 190, 112, 78, 73, 62, 90, 247, 100, 190, 182, 151, 51, 190, 240, 71, 71, 62, 75, 240, 128, 62, 133, 172, 152, 189, 210, 38, 176, 188, 108, 61, 149, 60, 243, 144, 213, 62, 20, 172, 130, 61, 64, 201, 184, 189, 27, 222, 20, 190, 198, 20, 242, 61, 246, 200, 63, 190, 198, 139, 233, 189, 233, 10, 237, 61, 221, 254, 141, 190, 180, 163, 116, 190, 145, 44, 166, 62, 162, 196, 157, 62, 210, 4, 61, 62, 26, 42, 74, 62, 209, 31, 27, 61, 41, 56, 141, 189, 82, 107, 113, 62, 27, 142, 44, 62, 57, 84, 214, 61, 109, 18, 44, 190, 46, 75, 154, 62, 126, 43, 50, 190, 123, 0, 17, 61, 79, 166, 190, 189, 243, 202, 249, 189, 227, 29, 156, 189, 203, 41, 76, 189, 34, 104, 202, 61, 45, 125, 29, 61, 213, 65, 173, 189, 185, 44, 53, 188, 110, 46, 198, 61, 3, 143, 166, 189, 174, 187, 237, 188, 45, 226, 52, 60, 56, 223, 34, 62, 37, 26, 111, 61, 162, 129, 24, 190, 148, 171, 28, 60, 0, 28, 4, 190, 177, 160, 223, 61, 178, 205, 174, 189, 9, 49, 84, 190, 212, 163, 24, 62, 115, 230, 170, 189, 97, 58, 56, 190, 210, 94, 58, 190, 142, 233, 248, 61, 253, 153, 131, 189, 92, 85, 234, 189, 254, 10, 16, 61, 189, 35, 198, 189, 209, 174, 79, 190, 179, 151, 112, 190, 160, 113, 12, 190, 118, 79, 172, 190, 156, 191, 132, 191, 52, 160, 168, 190, 239, 97, 164, 62, 65, 75, 102, 62, 66, 234, 153, 190, 102, 254, 73, 62, 100, 27, 195, 61, 74, 35, 228, 61, 38, 22, 44, 61, 179, 249, 140, 190, 147, 24, 118, 190, 85, 155, 29, 62, 37, 156, 161, 189, 98, 157, 121, 61, 84, 74, 111, 62, 107, 141, 41, 191, 164, 11, 57, 60, 252, 57, 14, 189, 169, 251, 51, 190, 245, 177, 171, 190, 35, 65, 88, 190, 235, 105, 122, 60, 66, 43, 130, 188, 198, 202, 189, 61, 67, 176, 11, 60, 223, 27, 69, 191, 178, 87, 51, 62, 180, 142, 37, 61, 47, 213, 41, 60, 175, 126, 217, 61, 109, 108, 135, 62, 7, 46, 30, 189, 136, 174, 36, 62, 7, 89, 134, 190, 186, 193, 110, 62, 192, 50, 114, 189, 200, 164, 193, 62, 221, 92, 185, 190, 109, 201, 214, 190, 205, 241, 217, 188, 170, 73, 159, 62, 91, 129, 83, 62, 236, 227, 72, 61, 59, 156, 59, 189, 118, 162, 54, 61, 122, 116, 167, 190, 50, 236, 254, 189, 181, 13, 145, 62, 12, 137, 245, 190, 217, 218, 195, 190, 190, 140, 156, 187, 170, 180, 149, 62, 64, 244, 125, 62, 102, 167, 45, 62, 133, 198, 177, 62, 79, 20, 248, 62, 80, 80, 189, 61, 38, 36, 86, 62, 50, 32, 84, 189, 197, 227, 136, 190, 34, 250, 109, 62, 149, 95, 207, 190, 40, 172, 130, 62, 170, 54, 24, 190, 167, 88, 181, 61, 244, 109, 10, 190, 113, 149, 15, 61, 143, 232, 63, 62, 247, 131, 71, 60, 210, 108, 125, 190, 82, 61, 115, 59, 226, 58, 46, 62, 225, 50, 2, 63, 69, 210, 10, 191, 176, 15, 221, 190, 136, 122, 209, 191, 102, 221, 118, 62, 154, 176, 208, 61, 173, 205, 93, 190, 216, 176, 145, 187, 102, 40, 95, 190, 215, 53, 33, 189, 14, 13, 99, 62, 237, 179, 133, 62, 186, 81, 124, 190, 133, 68, 128, 62, 61, 176, 51, 62, 232, 238, 216, 61, 142, 51, 195, 189, 40, 88, 248, 61, 25, 238, 182, 189, 222, 37, 158, 188, 61, 14, 0, 188, 255, 15, 162, 189, 123, 227, 219, 189, 189, 200, 214, 190, 255, 13, 61, 190, 168, 159, 204, 61, 43, 125, 49, 187, 43, 174, 137, 62, 107, 14, 105, 190, 248, 71, 98, 62, 127, 121, 142, 62, 234, 107, 1, 62, 186, 115, 121, 59, 211, 151, 81, 190, 68, 116, 50, 190, 110, 163, 197, 62, 142, 100, 56, 60, 238, 224, 112, 190, 156, 200, 165, 62, 5, 147, 175, 190, 147, 34, 134, 62, 77, 45, 127, 62, 57, 78, 113, 62, 188, 105, 198, 190, 41, 247, 37, 189, 50, 10, 195, 189, 220, 184, 151, 61, 79, 96, 246, 190, 117, 62, 74, 62, 120, 190, 157, 190, 50, 91, 128, 62, 49, 0, 201, 62, 31, 213, 138, 190, 66, 1, 17, 61, 59, 138, 120, 190, 239, 155, 165, 190, 1, 198, 2, 190, 170, 116, 6, 60, 169, 2, 193, 62, 146, 23, 208, 61, 110, 12, 2, 191, 221, 230, 253, 62, 28, 162, 37, 62, 36, 175, 110, 62, 155, 135, 211, 189, 107, 213, 176, 190, 50, 187, 149, 190, 5, 154, 143, 62, 71, 114, 32, 61, 77, 57, 193, 190, 137, 37, 41, 62, 14, 253, 177, 190, 205, 67, 21, 190, 55, 135, 2, 62, 114, 81, 131, 60, 166, 204, 151, 190, 167, 34, 149, 188, 161, 27, 226, 188, 141, 37, 97, 61, 127, 102, 160, 190, 242, 125, 69, 62, 185, 191, 44, 190, 41, 189, 84, 62, 57, 214, 179, 62, 203, 209, 158, 189, 243, 35, 102, 62, 82, 119, 68, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 212, 72, 62, 29, 204, 64, 189, 213, 205, 152, 62, 72, 57, 212, 188, 149, 149, 239, 189, 122, 134, 218, 59, 245, 194, 55, 62, 17, 47, 215, 61, 17, 26, 79, 190, 6, 146, 4, 60, 251, 23, 140, 189, 254, 159, 146, 61, 5, 254, 242, 60, 216, 5, 73, 61, 245, 191, 11, 62, 169, 233, 105, 188, 37, 249, 128, 60, 25, 177, 222, 189, 51, 33, 48, 62, 87, 12, 51, 190, 147, 184, 178, 189, 3, 246, 234, 188, 50, 9, 96, 62, 140, 69, 36, 190, 117, 56, 2, 62, 30, 227, 162, 62, 126, 104, 225, 61, 223, 29, 165, 62, 170, 236, 17, 62, 225, 239, 30, 62, 242, 32, 130, 62, 76, 13, 132, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 97, 240, 62, 160, 129, 251, 59, 146, 50, 17, 63, 170, 108, 76, 62, 105, 133, 150, 61, 253, 247, 35, 191, 127, 209, 83, 190, 150, 136, 54, 191, 226, 56, 190, 62, 65, 191, 116, 61, 217, 216, 154, 188, 198, 244, 187, 62, 7, 157, 250, 62, 123, 232, 74, 62, 250, 141, 194, 190, 46, 34, 50, 60, 118, 71, 135, 190, 204, 94, 73, 61, 139, 45, 240, 188, 171, 246, 189, 61, 99, 208, 238, 189, 115, 193, 33, 191, 152, 225, 11, 63, 254, 156, 193, 62, 217, 160, 192, 190, 40, 232, 24, 190, 235, 243, 219, 189, 206, 151, 88, 63, 146, 36, 199, 190, 129, 178, 89, 190, 124, 10, 9, 63, 60, 211, 3, 63, 125, 215, 235, 58, 89, 76, 84, 61, 125, 157, 149, 190, 126, 57, 70, 190, 108, 136, 15, 190, 112, 194, 169, 189, 242, 169, 208, 188, 48, 37, 101, 62, 65, 55, 182, 61, 44, 241, 41, 62, 116, 224, 27, 62, 179, 36, 156, 61, 5, 72, 42, 61, 115, 37, 208, 60, 96, 207, 63, 190, 87, 247, 159, 190, 182, 138, 241, 189, 115, 112, 246, 61, 148, 58, 253, 60, 103, 91, 5, 62, 212, 240, 237, 59, 96, 13, 19, 189, 48, 46, 162, 62, 71, 147, 178, 62, 100, 15, 45, 62, 223, 118, 66, 190, 15, 252, 142, 59, 35, 14, 136, 190, 74, 204, 53, 189, 18, 161, 147, 190, 125, 60, 0, 189, 56, 48, 178, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {102, 231, 130, 189, 47, 176, 236, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {66, 177, 201, 191, 48, 235, 221, 190, 101, 117, 180, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {214, 54, 165, 191, 195, 214, 223, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0036/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}