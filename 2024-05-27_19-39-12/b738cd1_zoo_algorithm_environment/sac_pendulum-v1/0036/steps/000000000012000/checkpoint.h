// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {201, 217, 96, 63, 119, 183, 171, 63, 71, 120, 195, 62, 59, 67, 149, 190, 189, 89, 191, 191, 107, 239, 18, 191, 243, 206, 128, 62, 66, 110, 134, 191, 16, 102, 38, 60, 30, 147, 91, 190, 50, 178, 80, 63, 51, 189, 22, 190, 1, 221, 129, 190, 74, 245, 155, 190, 83, 234, 29, 62, 69, 219, 28, 62, 157, 228, 241, 62, 39, 134, 170, 190, 23, 86, 8, 62, 221, 54, 105, 191, 155, 246, 183, 190, 24, 152, 205, 62, 127, 108, 183, 62, 86, 141, 251, 190, 114, 96, 43, 63, 77, 155, 140, 191, 45, 167, 114, 190, 134, 77, 102, 63, 47, 134, 60, 62, 136, 233, 141, 61, 244, 16, 166, 190, 110, 147, 134, 63, 234, 107, 179, 62, 121, 175, 245, 62, 238, 118, 38, 190, 120, 241, 184, 62, 45, 245, 48, 191, 213, 139, 129, 63, 58, 198, 206, 62, 76, 194, 42, 191, 172, 177, 32, 191, 121, 171, 217, 188, 80, 122, 112, 190, 99, 14, 96, 61, 82, 243, 154, 190, 113, 47, 200, 188, 93, 182, 57, 190, 220, 212, 246, 62, 160, 187, 196, 61, 126, 224, 0, 62, 167, 231, 26, 191, 62, 213, 82, 63, 188, 46, 246, 190, 104, 30, 163, 190, 47, 138, 139, 62, 221, 41, 221, 62, 20, 58, 8, 191, 139, 226, 116, 62, 57, 223, 99, 191, 1, 142, 78, 189, 42, 214, 123, 62, 44, 249, 79, 63, 102, 34, 32, 62, 180, 57, 29, 189, 61, 198, 37, 62, 154, 252, 177, 62, 0, 37, 159, 62, 188, 207, 181, 190, 253, 33, 42, 190, 228, 58, 222, 62, 128, 177, 3, 62, 173, 196, 136, 190, 155, 114, 230, 190, 243, 107, 6, 190, 193, 181, 2, 191, 230, 164, 174, 190, 214, 147, 233, 189, 232, 191, 115, 61, 48, 30, 175, 190, 169, 55, 48, 191, 40, 220, 59, 191, 143, 208, 31, 62, 35, 183, 34, 63, 187, 120, 28, 61, 147, 117, 102, 63, 226, 206, 149, 191, 199, 42, 135, 190, 177, 61, 16, 63, 39, 191, 62, 63, 53, 126, 217, 62, 59, 198, 7, 191, 8, 177, 61, 191, 55, 115, 61, 61, 85, 249, 42, 191, 114, 37, 91, 63, 215, 156, 9, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 11, 15, 191, 69, 47, 85, 190, 123, 100, 18, 191, 147, 123, 92, 62, 19, 148, 217, 62, 183, 253, 115, 190, 217, 28, 230, 189, 198, 228, 157, 61, 172, 246, 10, 61, 75, 35, 235, 62, 175, 186, 176, 190, 91, 128, 223, 190, 5, 219, 192, 190, 222, 251, 48, 63, 117, 129, 81, 191, 242, 237, 200, 61, 69, 247, 175, 190, 123, 138, 82, 191, 123, 20, 143, 190, 65, 50, 25, 63, 41, 80, 189, 61, 187, 144, 30, 191, 212, 240, 25, 63, 207, 97, 66, 63, 177, 91, 246, 190, 157, 199, 11, 63, 83, 144, 171, 189, 162, 17, 205, 62, 144, 79, 96, 189, 217, 0, 147, 62, 195, 102, 6, 63, 88, 229, 79, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 107, 206, 190, 104, 93, 17, 188, 47, 243, 126, 189, 87, 207, 3, 189, 30, 32, 34, 61, 82, 197, 189, 190, 156, 184, 98, 62, 173, 46, 29, 62, 81, 152, 44, 62, 12, 141, 4, 62, 74, 188, 205, 190, 192, 115, 226, 188, 203, 29, 244, 62, 79, 151, 62, 62, 79, 162, 53, 60, 215, 29, 173, 62, 65, 168, 162, 190, 59, 40, 59, 189, 41, 70, 132, 62, 187, 138, 127, 62, 253, 18, 4, 191, 190, 84, 62, 189, 207, 84, 125, 61, 121, 194, 140, 60, 207, 200, 151, 190, 136, 186, 72, 62, 177, 195, 62, 190, 157, 169, 107, 62, 164, 83, 13, 62, 146, 102, 142, 190, 169, 32, 102, 62, 255, 32, 81, 190, 186, 243, 205, 189, 83, 1, 55, 187, 108, 175, 88, 190, 87, 79, 219, 189, 133, 220, 11, 60, 250, 123, 254, 189, 9, 24, 32, 190, 163, 122, 13, 190, 29, 232, 4, 62, 86, 221, 148, 60, 224, 214, 100, 189, 143, 29, 110, 190, 165, 160, 206, 58, 66, 181, 67, 189, 21, 171, 195, 189, 181, 123, 201, 61, 230, 113, 17, 62, 136, 102, 198, 61, 179, 55, 23, 62, 199, 191, 245, 186, 133, 78, 41, 61, 41, 184, 105, 189, 123, 194, 74, 190, 82, 148, 226, 61, 253, 8, 29, 190, 42, 220, 18, 189, 22, 223, 224, 189, 25, 223, 16, 61, 76, 201, 233, 187, 111, 209, 142, 188, 142, 194, 79, 190, 14, 225, 47, 190, 104, 33, 167, 190, 42, 90, 77, 191, 225, 96, 151, 190, 191, 159, 214, 61, 236, 189, 146, 61, 20, 198, 10, 190, 113, 162, 212, 62, 242, 142, 171, 62, 24, 26, 12, 62, 234, 3, 27, 62, 178, 122, 76, 189, 18, 32, 107, 60, 25, 223, 229, 61, 79, 118, 99, 59, 34, 115, 126, 189, 4, 197, 13, 61, 163, 138, 91, 190, 142, 101, 24, 62, 19, 110, 220, 61, 222, 135, 69, 189, 236, 13, 171, 190, 192, 75, 184, 61, 153, 236, 130, 189, 117, 217, 110, 61, 116, 58, 86, 62, 184, 216, 251, 61, 251, 15, 167, 190, 125, 69, 194, 61, 145, 60, 110, 62, 75, 155, 145, 189, 168, 246, 114, 190, 234, 236, 53, 62, 234, 66, 64, 61, 158, 123, 41, 189, 68, 148, 123, 189, 185, 173, 30, 62, 55, 230, 80, 188, 141, 203, 30, 191, 231, 116, 47, 61, 128, 48, 11, 190, 234, 118, 168, 61, 55, 39, 48, 191, 54, 251, 158, 61, 150, 205, 189, 190, 116, 70, 168, 62, 122, 34, 226, 61, 96, 247, 184, 189, 13, 159, 195, 61, 115, 19, 163, 190, 104, 124, 243, 60, 243, 208, 250, 188, 30, 73, 86, 61, 119, 42, 244, 189, 224, 23, 195, 61, 103, 170, 139, 190, 93, 106, 164, 190, 196, 130, 183, 190, 204, 5, 149, 62, 157, 90, 171, 189, 192, 14, 105, 62, 12, 218, 34, 190, 86, 32, 104, 190, 243, 40, 10, 62, 3, 105, 180, 62, 61, 197, 3, 61, 110, 165, 46, 188, 162, 21, 54, 190, 67, 208, 177, 189, 84, 60, 219, 189, 219, 113, 12, 62, 179, 109, 6, 62, 215, 182, 41, 62, 221, 238, 78, 189, 135, 178, 199, 189, 88, 254, 58, 190, 251, 222, 81, 189, 229, 155, 6, 62, 164, 67, 174, 60, 204, 177, 229, 187, 77, 79, 96, 61, 63, 217, 61, 190, 17, 30, 18, 61, 4, 129, 2, 189, 184, 143, 5, 190, 147, 71, 9, 189, 47, 255, 49, 190, 110, 254, 88, 189, 104, 7, 53, 190, 11, 3, 141, 189, 136, 224, 50, 190, 23, 248, 146, 61, 94, 238, 202, 189, 238, 169, 180, 59, 140, 135, 201, 60, 248, 3, 187, 61, 149, 107, 24, 57, 85, 51, 162, 191, 161, 82, 150, 189, 94, 175, 198, 190, 215, 156, 48, 190, 113, 59, 43, 62, 217, 14, 205, 61, 183, 244, 221, 190, 186, 219, 5, 63, 22, 22, 234, 190, 13, 79, 154, 190, 15, 79, 132, 190, 84, 86, 233, 190, 27, 218, 205, 189, 152, 229, 94, 62, 198, 25, 239, 61, 133, 109, 92, 61, 227, 208, 130, 190, 21, 21, 6, 62, 144, 230, 177, 62, 42, 117, 22, 62, 41, 95, 113, 63, 211, 193, 165, 190, 233, 158, 130, 190, 87, 168, 53, 62, 146, 19, 222, 190, 168, 192, 83, 62, 81, 82, 189, 190, 10, 67, 225, 62, 172, 200, 4, 191, 86, 41, 4, 189, 96, 68, 26, 189, 99, 52, 154, 62, 228, 177, 159, 61, 124, 153, 107, 60, 153, 239, 197, 190, 117, 35, 160, 61, 34, 162, 73, 62, 169, 116, 58, 62, 175, 36, 92, 190, 182, 188, 13, 190, 179, 139, 202, 189, 145, 53, 225, 61, 177, 131, 40, 62, 249, 59, 173, 61, 203, 91, 86, 190, 114, 246, 112, 62, 56, 252, 190, 190, 219, 4, 85, 190, 232, 32, 89, 62, 206, 112, 252, 190, 21, 103, 92, 189, 42, 195, 188, 61, 6, 108, 136, 62, 144, 95, 228, 61, 38, 119, 193, 189, 206, 29, 149, 188, 10, 229, 230, 61, 87, 8, 162, 62, 116, 136, 37, 61, 120, 253, 158, 60, 0, 93, 137, 190, 202, 11, 43, 62, 159, 86, 28, 189, 72, 155, 29, 189, 79, 87, 7, 62, 255, 198, 147, 62, 174, 177, 157, 191, 91, 33, 42, 62, 228, 208, 233, 189, 242, 82, 189, 62, 101, 130, 112, 190, 103, 15, 119, 190, 211, 81, 181, 190, 241, 192, 130, 62, 197, 0, 206, 61, 30, 135, 169, 62, 215, 200, 11, 191, 133, 202, 190, 62, 117, 104, 91, 190, 58, 71, 148, 190, 124, 104, 176, 186, 71, 88, 111, 191, 142, 169, 217, 190, 60, 158, 159, 62, 122, 48, 162, 62, 93, 21, 144, 189, 141, 32, 9, 62, 169, 168, 160, 62, 117, 63, 24, 62, 76, 206, 190, 61, 231, 66, 34, 62, 142, 37, 230, 60, 49, 98, 63, 191, 149, 162, 235, 60, 25, 89, 198, 188, 170, 167, 20, 62, 223, 148, 127, 62, 71, 184, 119, 61, 23, 55, 143, 190, 10, 129, 17, 62, 65, 14, 127, 190, 225, 45, 110, 62, 155, 13, 229, 61, 78, 194, 153, 189, 19, 89, 158, 190, 38, 255, 24, 191, 243, 185, 62, 190, 22, 177, 163, 62, 18, 57, 206, 190, 39, 94, 175, 190, 188, 95, 253, 61, 51, 153, 123, 190, 92, 221, 44, 62, 97, 216, 95, 61, 227, 234, 4, 62, 223, 225, 20, 191, 152, 84, 211, 61, 92, 28, 219, 189, 35, 117, 207, 189, 81, 64, 4, 62, 111, 33, 217, 62, 196, 248, 176, 189, 252, 153, 126, 62, 136, 141, 126, 62, 144, 32, 125, 189, 110, 200, 150, 62, 77, 211, 162, 62, 198, 167, 4, 190, 41, 92, 136, 60, 37, 27, 226, 61, 205, 192, 172, 61, 10, 104, 103, 189, 128, 233, 240, 189, 158, 110, 204, 189, 207, 48, 7, 190, 229, 181, 45, 59, 8, 212, 33, 190, 74, 209, 30, 190, 213, 168, 83, 61, 113, 113, 33, 190, 34, 25, 30, 62, 244, 249, 22, 190, 38, 126, 131, 189, 168, 82, 138, 189, 92, 7, 17, 190, 103, 138, 247, 61, 217, 176, 132, 189, 147, 202, 224, 59, 110, 190, 60, 190, 229, 244, 28, 62, 255, 14, 39, 62, 57, 204, 133, 61, 163, 117, 155, 188, 32, 240, 49, 61, 180, 123, 228, 188, 137, 251, 169, 189, 103, 183, 212, 189, 240, 189, 61, 190, 184, 225, 35, 190, 109, 38, 140, 60, 250, 31, 145, 61, 182, 19, 33, 190, 138, 163, 204, 189, 226, 50, 67, 190, 151, 114, 0, 190, 43, 208, 40, 61, 249, 106, 108, 61, 71, 228, 106, 61, 18, 177, 180, 60, 239, 251, 0, 190, 82, 198, 183, 61, 0, 225, 212, 189, 137, 168, 189, 189, 247, 169, 186, 189, 81, 74, 31, 187, 75, 99, 234, 189, 178, 75, 20, 62, 61, 111, 57, 190, 48, 15, 87, 189, 8, 48, 236, 61, 196, 7, 28, 62, 209, 3, 216, 60, 71, 211, 86, 190, 243, 183, 53, 190, 97, 20, 24, 62, 110, 212, 167, 189, 119, 29, 249, 188, 2, 230, 195, 188, 233, 220, 189, 189, 66, 128, 139, 189, 14, 152, 6, 187, 16, 80, 163, 188, 43, 112, 253, 62, 138, 104, 106, 189, 53, 85, 31, 61, 213, 199, 228, 61, 126, 154, 108, 61, 44, 222, 45, 62, 137, 103, 9, 62, 52, 238, 132, 60, 94, 149, 95, 61, 27, 190, 228, 190, 132, 10, 54, 191, 8, 195, 129, 190, 190, 36, 252, 190, 78, 50, 101, 190, 148, 73, 71, 61, 225, 83, 22, 190, 173, 173, 149, 62, 209, 46, 35, 62, 195, 120, 24, 62, 235, 75, 171, 190, 206, 254, 129, 62, 215, 216, 205, 190, 137, 45, 78, 62, 76, 205, 52, 62, 223, 132, 227, 62, 252, 63, 18, 61, 247, 181, 67, 61, 64, 101, 183, 62, 234, 209, 182, 188, 104, 50, 178, 189, 47, 80, 246, 62, 183, 127, 248, 189, 38, 75, 192, 190, 60, 102, 178, 190, 242, 82, 55, 62, 155, 18, 111, 189, 179, 221, 24, 62, 30, 39, 211, 190, 153, 109, 64, 62, 78, 67, 131, 62, 227, 108, 152, 62, 130, 141, 208, 61, 29, 203, 10, 190, 61, 146, 251, 189, 102, 29, 203, 62, 233, 75, 34, 61, 156, 174, 103, 61, 123, 13, 66, 60, 180, 164, 21, 190, 122, 241, 119, 61, 241, 79, 1, 62, 188, 230, 124, 62, 0, 67, 19, 191, 135, 81, 142, 188, 109, 163, 134, 189, 63, 202, 44, 190, 127, 147, 43, 191, 102, 186, 51, 62, 77, 88, 251, 189, 199, 105, 3, 62, 5, 27, 182, 62, 63, 200, 227, 189, 69, 108, 181, 61, 57, 88, 235, 61, 125, 100, 68, 191, 9, 103, 8, 62, 213, 93, 92, 189, 89, 165, 213, 189, 36, 98, 220, 62, 219, 67, 196, 60, 29, 10, 93, 62, 92, 250, 211, 189, 167, 157, 106, 62, 147, 115, 66, 190, 52, 63, 147, 61, 199, 103, 137, 62, 5, 18, 55, 190, 205, 29, 40, 189, 44, 87, 217, 61, 199, 10, 132, 189, 73, 80, 43, 62, 90, 223, 22, 188, 204, 222, 224, 61, 88, 101, 131, 62, 71, 204, 16, 191, 13, 138, 22, 189, 222, 238, 82, 62, 43, 116, 148, 61, 248, 30, 174, 60, 60, 234, 138, 189, 96, 81, 234, 60, 128, 160, 207, 61, 207, 140, 161, 62, 57, 173, 136, 190, 133, 43, 212, 62, 64, 95, 69, 191, 101, 24, 77, 62, 2, 49, 189, 62, 234, 204, 113, 190, 27, 247, 193, 61, 204, 65, 106, 62, 225, 5, 201, 62, 37, 225, 168, 190, 103, 97, 17, 190, 39, 105, 167, 189, 191, 16, 173, 62, 99, 192, 168, 61, 152, 52, 28, 62, 19, 242, 121, 190, 153, 103, 14, 188, 149, 163, 153, 190, 218, 158, 4, 190, 206, 10, 46, 61, 112, 104, 209, 190, 227, 8, 176, 190, 111, 147, 165, 62, 171, 235, 45, 62, 149, 80, 148, 189, 131, 16, 129, 62, 40, 193, 42, 62, 27, 213, 230, 62, 52, 59, 38, 62, 5, 63, 113, 62, 63, 171, 69, 190, 21, 95, 192, 190, 38, 53, 99, 62, 166, 104, 223, 190, 109, 17, 15, 62, 129, 126, 13, 189, 131, 229, 242, 189, 66, 119, 244, 61, 122, 205, 116, 189, 5, 90, 35, 62, 239, 52, 116, 188, 13, 38, 244, 188, 249, 3, 85, 62, 194, 18, 161, 62, 52, 216, 181, 62, 197, 195, 173, 59, 20, 100, 232, 61, 44, 97, 138, 61, 16, 81, 208, 190, 73, 50, 39, 62, 170, 176, 190, 61, 246, 40, 69, 62, 17, 105, 30, 61, 171, 108, 82, 189, 245, 172, 67, 62, 236, 15, 55, 62, 81, 127, 76, 61, 114, 74, 239, 188, 46, 82, 23, 60, 182, 255, 143, 62, 150, 35, 135, 189, 230, 192, 56, 189, 0, 192, 56, 62, 221, 16, 1, 62, 222, 222, 196, 62, 82, 43, 162, 190, 114, 36, 116, 190, 209, 98, 190, 60, 124, 40, 116, 62, 166, 255, 180, 190, 130, 123, 147, 190, 87, 26, 181, 62, 88, 147, 211, 188, 38, 129, 81, 189, 138, 190, 90, 189, 199, 103, 87, 190, 111, 93, 210, 62, 167, 211, 232, 190, 53, 56, 102, 190, 4, 176, 228, 191, 18, 122, 251, 60, 203, 205, 88, 190, 3, 109, 35, 190, 169, 223, 148, 61, 11, 198, 213, 190, 33, 166, 240, 188, 238, 159, 134, 62, 237, 249, 133, 61, 96, 246, 111, 190, 138, 153, 37, 62, 37, 18, 19, 62, 137, 92, 69, 188, 105, 131, 174, 61, 147, 195, 99, 62, 205, 28, 58, 190, 10, 191, 54, 190, 243, 123, 172, 189, 132, 14, 0, 189, 206, 66, 125, 61, 52, 5, 246, 189, 135, 85, 39, 62, 68, 236, 10, 190, 94, 98, 191, 189, 246, 22, 13, 190, 129, 200, 100, 61, 189, 0, 251, 61, 36, 234, 123, 61, 247, 116, 19, 61, 165, 141, 146, 189, 115, 229, 12, 61, 138, 121, 155, 61, 170, 152, 130, 189, 219, 41, 0, 190, 186, 39, 209, 61, 202, 58, 120, 189, 223, 164, 250, 60, 143, 196, 243, 60, 75, 33, 31, 190, 36, 43, 240, 189, 141, 135, 18, 62, 103, 250, 132, 189, 12, 187, 249, 61, 181, 221, 165, 189, 91, 168, 28, 190, 92, 46, 36, 62, 99, 73, 246, 189, 215, 73, 243, 188, 104, 138, 18, 190, 50, 159, 18, 61, 249, 12, 23, 61, 243, 169, 143, 60, 101, 105, 50, 190, 244, 218, 33, 190, 250, 36, 209, 61, 92, 98, 29, 190, 106, 116, 57, 190, 79, 113, 182, 61, 241, 122, 154, 189, 69, 34, 192, 61, 151, 51, 191, 189, 146, 179, 9, 189, 7, 47, 69, 189, 125, 22, 44, 190, 119, 245, 42, 61, 76, 192, 111, 61, 250, 251, 151, 61, 65, 185, 150, 189, 40, 107, 14, 190, 46, 141, 42, 62, 66, 40, 35, 190, 243, 246, 216, 189, 12, 159, 40, 189, 208, 114, 165, 59, 248, 127, 127, 59, 174, 38, 139, 189, 40, 165, 157, 189, 73, 73, 166, 189, 21, 163, 14, 190, 146, 106, 237, 189, 87, 185, 59, 61, 213, 221, 225, 189, 137, 106, 169, 61, 194, 162, 167, 189, 86, 1, 5, 61, 160, 208, 27, 59, 55, 237, 2, 189, 240, 148, 195, 61, 49, 78, 54, 190, 212, 30, 177, 61, 216, 142, 37, 189, 252, 124, 103, 61, 198, 190, 54, 189, 210, 254, 241, 60, 21, 246, 1, 62, 64, 233, 60, 190, 65, 235, 66, 188, 178, 189, 210, 189, 171, 94, 29, 190, 122, 25, 8, 190, 55, 121, 173, 61, 0, 159, 71, 186, 5, 220, 151, 189, 104, 213, 69, 190, 149, 130, 186, 61, 114, 47, 5, 190, 255, 180, 59, 189, 115, 123, 114, 60, 111, 191, 130, 190, 105, 152, 146, 61, 20, 147, 50, 190, 224, 0, 119, 189, 137, 13, 52, 189, 117, 153, 96, 190, 13, 178, 142, 61, 76, 31, 16, 187, 96, 147, 17, 190, 128, 15, 5, 189, 197, 236, 198, 189, 78, 184, 4, 190, 213, 150, 207, 189, 228, 87, 45, 190, 6, 95, 96, 189, 150, 224, 63, 187, 103, 185, 130, 189, 83, 115, 231, 189, 35, 200, 244, 189, 147, 244, 159, 61, 127, 237, 128, 189, 167, 147, 9, 62, 60, 111, 176, 189, 171, 4, 238, 189, 5, 224, 154, 61, 26, 190, 17, 189, 181, 125, 38, 190, 163, 101, 145, 188, 115, 76, 199, 61, 84, 221, 111, 60, 50, 150, 130, 188, 71, 29, 158, 61, 220, 230, 0, 61, 224, 162, 83, 59, 125, 52, 48, 190, 222, 0, 201, 186, 4, 216, 16, 61, 43, 234, 39, 60, 1, 8, 142, 61, 163, 126, 163, 189, 207, 134, 66, 61, 202, 200, 120, 59, 157, 234, 136, 190, 108, 225, 249, 190, 247, 134, 37, 62, 26, 191, 211, 188, 170, 23, 42, 191, 0, 107, 255, 190, 160, 81, 55, 191, 123, 253, 187, 190, 159, 112, 174, 61, 196, 175, 227, 189, 73, 110, 169, 61, 218, 172, 138, 62, 116, 103, 150, 190, 161, 230, 190, 62, 75, 14, 64, 190, 46, 73, 76, 190, 114, 127, 130, 190, 153, 246, 225, 61, 252, 100, 90, 190, 185, 18, 61, 62, 64, 70, 14, 191, 17, 178, 121, 190, 83, 35, 7, 190, 12, 175, 206, 189, 164, 83, 197, 61, 247, 252, 142, 190, 255, 153, 21, 191, 237, 132, 94, 188, 227, 76, 165, 62, 138, 144, 242, 187, 41, 81, 232, 61, 227, 30, 139, 191, 189, 136, 255, 188, 79, 150, 224, 62, 30, 72, 163, 188, 80, 50, 50, 190, 12, 66, 46, 190, 227, 148, 29, 60, 104, 199, 192, 189, 83, 168, 72, 60, 123, 76, 142, 61, 13, 188, 87, 188, 65, 232, 33, 61, 148, 94, 83, 61, 243, 14, 95, 61, 196, 211, 154, 61, 71, 120, 230, 190, 238, 240, 105, 190, 56, 210, 42, 62, 156, 110, 148, 190, 223, 76, 8, 190, 8, 73, 233, 189, 71, 54, 246, 188, 235, 235, 168, 190, 166, 29, 149, 62, 207, 140, 181, 189, 80, 168, 29, 191, 179, 235, 206, 62, 113, 102, 126, 61, 112, 22, 101, 61, 215, 157, 147, 61, 55, 81, 183, 62, 70, 172, 140, 61, 66, 52, 8, 190, 64, 161, 250, 190, 91, 237, 253, 59, 1, 191, 144, 189, 24, 211, 156, 61, 29, 184, 61, 62, 177, 38, 155, 62, 9, 153, 142, 62, 223, 98, 215, 61, 3, 12, 12, 63, 149, 0, 194, 62, 60, 96, 81, 61, 145, 3, 6, 191, 36, 51, 48, 61, 14, 248, 12, 62, 176, 23, 233, 61, 174, 207, 242, 62, 143, 209, 107, 62, 108, 68, 163, 189, 228, 175, 202, 190, 138, 97, 169, 61, 94, 0, 223, 189, 246, 188, 32, 190, 226, 110, 146, 190, 119, 174, 84, 191, 123, 170, 176, 61, 68, 108, 65, 62, 161, 15, 152, 62, 44, 126, 36, 188, 112, 169, 104, 189, 137, 218, 22, 191, 31, 30, 77, 190, 98, 42, 189, 62, 168, 168, 53, 61, 118, 132, 33, 189, 85, 78, 59, 62, 31, 157, 79, 189, 20, 190, 203, 186, 61, 213, 49, 189, 12, 130, 234, 61, 43, 236, 156, 61, 16, 248, 46, 189, 203, 94, 50, 190, 19, 98, 115, 191, 82, 116, 136, 62, 23, 94, 165, 60, 193, 151, 124, 190, 208, 3, 23, 62, 185, 213, 45, 62, 14, 103, 217, 188, 239, 137, 128, 62, 223, 24, 82, 191, 4, 161, 241, 189, 193, 58, 59, 61, 53, 213, 113, 190, 199, 200, 17, 62, 63, 217, 82, 62, 53, 17, 96, 61, 68, 168, 83, 191, 195, 51, 25, 62, 0, 222, 230, 190, 109, 200, 80, 62, 114, 248, 75, 190, 147, 149, 56, 190, 23, 231, 119, 62, 29, 60, 207, 188, 16, 73, 84, 190, 204, 224, 118, 62, 140, 223, 120, 62, 129, 74, 112, 189, 199, 36, 217, 188, 19, 44, 253, 60, 208, 182, 200, 62, 135, 101, 29, 189, 183, 86, 86, 188, 183, 134, 115, 190, 206, 74, 11, 62, 197, 156, 48, 190, 151, 121, 12, 190, 66, 202, 229, 61, 107, 127, 147, 190, 139, 6, 116, 190, 30, 252, 174, 62, 109, 135, 157, 62, 140, 243, 12, 62, 243, 24, 62, 62, 214, 153, 8, 61, 52, 95, 154, 189, 241, 159, 121, 62, 3, 176, 65, 62, 87, 205, 225, 61, 5, 69, 36, 190, 188, 215, 147, 62, 194, 180, 92, 190, 236, 171, 60, 61, 79, 166, 190, 189, 243, 202, 249, 189, 227, 29, 156, 189, 203, 41, 76, 189, 34, 104, 202, 61, 45, 125, 29, 61, 213, 65, 173, 189, 185, 44, 53, 188, 110, 46, 198, 61, 3, 143, 166, 189, 174, 187, 237, 188, 45, 226, 52, 60, 56, 223, 34, 62, 37, 26, 111, 61, 162, 129, 24, 190, 148, 171, 28, 60, 0, 28, 4, 190, 177, 160, 223, 61, 178, 205, 174, 189, 9, 49, 84, 190, 212, 163, 24, 62, 115, 230, 170, 189, 97, 58, 56, 190, 210, 94, 58, 190, 142, 233, 248, 61, 253, 153, 131, 189, 92, 85, 234, 189, 254, 10, 16, 61, 189, 35, 198, 189, 209, 174, 79, 190, 179, 151, 112, 190, 160, 113, 12, 190, 83, 111, 182, 190, 109, 113, 159, 191, 227, 186, 176, 190, 113, 1, 172, 62, 35, 47, 97, 62, 14, 34, 46, 191, 131, 200, 19, 63, 53, 151, 60, 61, 171, 187, 242, 61, 21, 242, 22, 61, 187, 100, 128, 190, 251, 254, 135, 190, 237, 204, 71, 62, 150, 180, 16, 189, 98, 157, 121, 61, 235, 74, 90, 62, 22, 49, 58, 191, 157, 184, 34, 61, 95, 49, 189, 190, 63, 114, 52, 190, 195, 94, 184, 190, 190, 140, 88, 190, 87, 145, 33, 60, 88, 217, 28, 189, 183, 18, 179, 62, 77, 115, 30, 60, 203, 94, 39, 191, 86, 20, 27, 62, 105, 221, 64, 61, 158, 216, 36, 60, 234, 73, 29, 62, 42, 147, 141, 62, 177, 142, 40, 189, 45, 191, 93, 62, 85, 21, 169, 190, 50, 10, 78, 62, 243, 9, 8, 189, 158, 173, 184, 62, 240, 247, 174, 190, 193, 210, 216, 190, 193, 141, 25, 189, 64, 152, 149, 62, 254, 11, 17, 62, 54, 39, 84, 61, 164, 203, 240, 189, 246, 170, 229, 61, 62, 23, 160, 190, 185, 136, 37, 190, 24, 181, 136, 62, 161, 152, 22, 191, 239, 139, 199, 190, 101, 130, 155, 185, 128, 40, 162, 62, 193, 182, 93, 62, 172, 32, 39, 62, 184, 135, 177, 62, 136, 87, 238, 62, 37, 212, 2, 62, 98, 13, 96, 62, 11, 164, 64, 189, 215, 203, 150, 190, 103, 69, 82, 62, 162, 193, 199, 190, 171, 17, 132, 62, 33, 141, 229, 189, 163, 127, 14, 62, 19, 51, 60, 190, 41, 155, 184, 189, 102, 114, 142, 62, 32, 105, 205, 188, 141, 103, 108, 190, 101, 86, 196, 188, 193, 192, 65, 62, 26, 171, 248, 62, 190, 58, 125, 191, 97, 97, 214, 190, 154, 239, 4, 192, 243, 95, 133, 62, 115, 53, 246, 61, 164, 118, 82, 190, 53, 72, 138, 188, 11, 168, 111, 190, 168, 52, 116, 189, 164, 2, 113, 62, 134, 134, 133, 62, 136, 249, 122, 190, 58, 90, 114, 62, 211, 16, 23, 62, 20, 55, 208, 61, 30, 100, 201, 189, 211, 43, 21, 62, 161, 196, 229, 189, 62, 55, 171, 187, 30, 135, 163, 59, 235, 101, 202, 189, 187, 96, 16, 190, 113, 238, 226, 190, 19, 119, 125, 190, 1, 78, 28, 62, 50, 170, 180, 188, 188, 9, 128, 62, 90, 183, 141, 190, 234, 126, 134, 62, 47, 12, 143, 62, 89, 145, 37, 62, 128, 6, 169, 60, 161, 85, 85, 190, 62, 216, 60, 190, 213, 255, 219, 62, 242, 0, 29, 186, 229, 45, 214, 190, 72, 188, 152, 62, 59, 107, 207, 190, 163, 197, 172, 62, 26, 78, 64, 62, 11, 252, 132, 62, 242, 242, 207, 190, 54, 251, 222, 185, 176, 77, 143, 189, 72, 11, 178, 61, 150, 64, 19, 191, 149, 64, 46, 62, 178, 225, 201, 190, 202, 219, 116, 62, 113, 207, 219, 62, 198, 197, 137, 190, 40, 156, 136, 61, 181, 183, 156, 190, 33, 66, 196, 190, 247, 145, 245, 189, 74, 178, 55, 61, 85, 176, 222, 62, 199, 216, 176, 61, 11, 80, 239, 190, 141, 247, 7, 63, 187, 182, 42, 62, 60, 198, 110, 62, 245, 82, 231, 189, 160, 29, 175, 190, 153, 255, 176, 190, 12, 214, 154, 62, 27, 54, 210, 61, 245, 109, 144, 190, 184, 4, 25, 62, 74, 213, 145, 190, 88, 135, 186, 189, 112, 12, 29, 62, 215, 41, 154, 60, 84, 121, 188, 190, 84, 107, 168, 188, 157, 131, 173, 188, 178, 66, 64, 61, 234, 107, 50, 190, 206, 238, 73, 62, 159, 137, 251, 189, 200, 95, 38, 62, 141, 220, 182, 62, 3, 149, 198, 189, 132, 42, 139, 62, 204, 242, 72, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 212, 88, 62, 29, 204, 64, 189, 143, 56, 144, 62, 198, 227, 84, 61, 149, 149, 239, 189, 56, 229, 198, 61, 170, 50, 65, 62, 46, 167, 3, 62, 238, 186, 146, 190, 6, 146, 4, 60, 106, 172, 228, 189, 152, 50, 86, 61, 122, 132, 46, 61, 30, 84, 142, 61, 120, 207, 8, 62, 203, 113, 169, 189, 46, 233, 46, 60, 25, 177, 222, 189, 174, 79, 35, 62, 87, 12, 51, 190, 147, 184, 178, 189, 157, 247, 136, 189, 43, 41, 78, 62, 126, 195, 54, 190, 78, 235, 23, 62, 190, 65, 163, 62, 126, 104, 225, 61, 184, 232, 162, 62, 17, 228, 20, 62, 188, 118, 16, 62, 220, 231, 131, 62, 66, 188, 130, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {82, 60, 233, 62, 160, 129, 251, 59, 200, 156, 9, 63, 20, 159, 150, 62, 105, 133, 150, 61, 7, 86, 108, 191, 42, 114, 65, 190, 195, 181, 78, 191, 104, 238, 192, 62, 65, 191, 116, 61, 152, 192, 160, 189, 23, 59, 186, 62, 179, 170, 4, 63, 190, 133, 115, 62, 253, 251, 186, 190, 7, 245, 139, 60, 82, 5, 140, 190, 204, 94, 73, 61, 100, 27, 211, 188, 171, 246, 189, 61, 99, 208, 238, 189, 165, 131, 44, 191, 117, 239, 13, 63, 12, 108, 11, 63, 105, 224, 0, 191, 186, 44, 14, 190, 235, 243, 219, 189, 156, 203, 88, 63, 130, 189, 188, 190, 0, 64, 90, 190, 51, 66, 19, 63, 34, 141, 253, 62, 72, 111, 165, 188, 89, 76, 84, 61, 217, 63, 41, 190, 41, 62, 89, 190, 108, 136, 15, 190, 132, 7, 7, 190, 82, 141, 151, 189, 208, 3, 94, 62, 51, 11, 194, 61, 44, 241, 41, 62, 227, 63, 196, 61, 76, 31, 129, 61, 55, 85, 33, 62, 135, 180, 255, 60, 66, 189, 82, 190, 252, 52, 186, 190, 141, 118, 196, 189, 115, 112, 246, 61, 164, 229, 4, 61, 103, 91, 5, 62, 212, 240, 237, 59, 173, 139, 161, 61, 177, 249, 178, 62, 3, 160, 142, 62, 216, 179, 14, 62, 81, 113, 94, 190, 15, 252, 142, 59, 237, 7, 135, 190, 15, 165, 199, 188, 194, 78, 142, 190, 187, 250, 237, 61, 50, 78, 12, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 8, 111, 189, 16, 168, 49, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {81, 80, 233, 62, 118, 132, 55, 62, 128, 244, 18, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {218, 193, 1, 192, 93, 121, 158, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0036/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}