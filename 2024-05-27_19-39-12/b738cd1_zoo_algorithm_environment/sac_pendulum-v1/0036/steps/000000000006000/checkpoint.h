// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 155, 87, 63, 121, 140, 157, 63, 201, 48, 246, 62, 218, 217, 250, 190, 63, 137, 102, 191, 36, 73, 44, 191, 254, 211, 134, 62, 209, 96, 64, 191, 61, 201, 135, 188, 6, 78, 30, 190, 168, 182, 95, 63, 179, 214, 105, 190, 147, 189, 125, 190, 20, 40, 222, 190, 157, 140, 84, 62, 96, 16, 50, 62, 160, 94, 214, 62, 160, 17, 197, 190, 88, 18, 52, 62, 58, 178, 14, 191, 182, 124, 209, 190, 26, 134, 193, 62, 242, 104, 140, 62, 183, 51, 252, 190, 141, 231, 43, 63, 251, 15, 59, 191, 63, 157, 195, 190, 246, 245, 110, 63, 164, 45, 66, 62, 81, 101, 204, 61, 74, 29, 89, 190, 60, 3, 67, 63, 113, 155, 217, 62, 203, 226, 179, 61, 216, 168, 184, 61, 87, 98, 167, 62, 26, 139, 14, 191, 3, 92, 16, 63, 246, 100, 223, 62, 71, 81, 20, 191, 116, 220, 19, 191, 231, 154, 135, 189, 116, 115, 162, 190, 86, 30, 136, 188, 198, 113, 154, 190, 227, 57, 235, 60, 104, 9, 175, 190, 68, 25, 8, 63, 42, 206, 116, 189, 75, 116, 166, 60, 118, 136, 41, 191, 127, 174, 20, 63, 46, 234, 177, 190, 204, 225, 187, 190, 147, 107, 3, 62, 236, 145, 168, 62, 93, 231, 11, 191, 141, 227, 86, 62, 142, 8, 46, 191, 207, 21, 148, 189, 218, 163, 156, 62, 52, 100, 12, 63, 34, 18, 191, 61, 41, 73, 116, 190, 126, 91, 82, 61, 223, 186, 196, 62, 172, 170, 196, 62, 94, 15, 145, 189, 199, 129, 136, 190, 28, 47, 238, 62, 20, 75, 41, 62, 159, 225, 206, 190, 131, 53, 145, 190, 155, 101, 157, 62, 73, 63, 250, 190, 153, 142, 115, 190, 136, 96, 15, 188, 134, 105, 106, 61, 49, 96, 162, 190, 205, 188, 239, 190, 203, 232, 75, 191, 6, 209, 23, 62, 23, 17, 49, 63, 212, 216, 53, 188, 236, 232, 104, 63, 57, 84, 131, 191, 83, 244, 130, 190, 177, 176, 33, 63, 182, 75, 32, 63, 152, 51, 195, 62, 233, 214, 237, 190, 25, 71, 79, 191, 250, 171, 175, 61, 37, 118, 223, 190, 164, 123, 67, 63, 157, 169, 226, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {118, 87, 1, 191, 157, 186, 55, 61, 180, 14, 74, 191, 41, 50, 134, 62, 202, 59, 230, 62, 32, 133, 85, 190, 13, 12, 105, 190, 218, 159, 180, 61, 72, 233, 77, 188, 248, 225, 211, 62, 248, 115, 254, 190, 106, 182, 233, 190, 139, 227, 201, 190, 203, 45, 42, 63, 194, 108, 79, 191, 226, 96, 188, 61, 20, 137, 150, 190, 138, 6, 51, 191, 45, 209, 124, 190, 40, 235, 30, 63, 115, 233, 146, 61, 30, 94, 5, 191, 73, 34, 26, 63, 209, 173, 58, 63, 88, 22, 22, 191, 170, 137, 11, 63, 241, 209, 121, 189, 226, 141, 191, 62, 199, 154, 82, 189, 237, 216, 135, 62, 175, 248, 81, 62, 209, 154, 57, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 173, 184, 190, 40, 138, 192, 60, 69, 163, 96, 189, 148, 75, 221, 189, 152, 53, 135, 61, 177, 190, 190, 190, 239, 181, 69, 62, 30, 137, 8, 62, 117, 135, 39, 62, 49, 89, 201, 61, 102, 0, 170, 190, 21, 147, 100, 61, 94, 50, 218, 62, 139, 200, 235, 61, 187, 254, 229, 61, 145, 112, 210, 62, 26, 33, 161, 190, 106, 11, 248, 60, 220, 242, 142, 62, 91, 86, 80, 62, 227, 243, 0, 191, 101, 101, 56, 189, 248, 5, 150, 59, 25, 76, 242, 188, 221, 39, 147, 190, 57, 45, 41, 62, 73, 110, 56, 190, 71, 38, 90, 62, 64, 0, 6, 62, 37, 63, 139, 190, 229, 167, 235, 61, 141, 27, 80, 190, 100, 178, 178, 189, 107, 154, 11, 187, 108, 175, 88, 190, 200, 25, 212, 189, 144, 157, 24, 60, 79, 73, 254, 189, 144, 97, 31, 190, 194, 227, 3, 190, 220, 9, 16, 62, 107, 49, 252, 60, 224, 214, 100, 189, 149, 31, 110, 190, 165, 160, 206, 58, 60, 190, 66, 189, 21, 171, 195, 189, 133, 7, 190, 61, 107, 220, 17, 62, 88, 0, 200, 61, 147, 90, 23, 62, 53, 17, 33, 60, 117, 113, 102, 61, 41, 184, 105, 189, 205, 250, 60, 190, 107, 40, 254, 61, 83, 17, 29, 190, 205, 187, 221, 188, 122, 177, 223, 189, 34, 240, 92, 61, 244, 68, 167, 59, 50, 90, 155, 187, 91, 115, 82, 190, 56, 221, 38, 190, 176, 185, 158, 190, 33, 159, 21, 191, 196, 129, 0, 189, 155, 164, 133, 61, 157, 244, 251, 61, 158, 7, 60, 190, 144, 210, 225, 62, 49, 242, 159, 62, 235, 215, 39, 62, 11, 147, 35, 62, 66, 34, 141, 189, 98, 242, 86, 61, 3, 96, 35, 61, 136, 236, 144, 61, 91, 172, 229, 189, 254, 160, 149, 61, 61, 82, 143, 190, 2, 128, 209, 61, 157, 30, 195, 61, 89, 37, 133, 59, 128, 252, 159, 190, 134, 243, 4, 61, 237, 212, 138, 189, 69, 72, 99, 61, 0, 239, 152, 189, 92, 198, 30, 62, 13, 161, 180, 190, 134, 169, 193, 61, 177, 9, 116, 62, 194, 171, 152, 189, 42, 21, 107, 190, 248, 112, 46, 62, 254, 172, 222, 189, 117, 134, 139, 61, 132, 68, 217, 189, 211, 163, 34, 189, 169, 136, 47, 189, 33, 12, 212, 190, 120, 32, 10, 62, 240, 116, 183, 61, 20, 111, 130, 62, 241, 142, 208, 189, 41, 41, 39, 187, 189, 228, 131, 190, 21, 226, 34, 62, 64, 152, 59, 189, 230, 167, 15, 187, 0, 255, 44, 62, 48, 42, 29, 190, 39, 181, 179, 61, 217, 116, 71, 62, 97, 149, 36, 62, 244, 208, 98, 190, 42, 122, 174, 61, 78, 12, 81, 190, 109, 16, 103, 190, 234, 118, 69, 190, 14, 245, 22, 62, 133, 67, 18, 187, 186, 226, 139, 60, 90, 122, 187, 60, 161, 154, 44, 190, 144, 220, 157, 61, 251, 36, 244, 61, 61, 197, 3, 61, 110, 165, 46, 188, 162, 21, 54, 190, 67, 208, 177, 189, 84, 60, 219, 189, 219, 113, 12, 62, 179, 109, 6, 62, 215, 182, 41, 62, 221, 238, 78, 189, 135, 178, 199, 189, 88, 254, 58, 190, 251, 222, 81, 189, 229, 155, 6, 62, 164, 67, 174, 60, 204, 177, 229, 187, 77, 79, 96, 61, 63, 217, 61, 190, 17, 30, 18, 61, 4, 129, 2, 189, 184, 143, 5, 190, 147, 71, 9, 189, 47, 255, 49, 190, 110, 254, 88, 189, 104, 7, 53, 190, 11, 3, 141, 189, 136, 224, 50, 190, 23, 248, 146, 61, 94, 238, 202, 189, 238, 169, 180, 59, 140, 135, 201, 60, 248, 3, 187, 61, 149, 107, 24, 57, 255, 226, 54, 191, 177, 49, 68, 61, 213, 72, 7, 61, 23, 45, 32, 191, 77, 206, 140, 62, 254, 126, 140, 190, 95, 88, 49, 189, 4, 220, 8, 62, 125, 55, 232, 188, 166, 113, 20, 191, 97, 122, 159, 190, 1, 100, 190, 190, 30, 177, 100, 61, 13, 11, 126, 62, 63, 5, 57, 62, 83, 252, 79, 62, 121, 178, 152, 190, 141, 249, 25, 62, 223, 121, 6, 61, 7, 90, 154, 62, 52, 213, 51, 61, 141, 92, 254, 189, 244, 195, 141, 190, 184, 225, 220, 189, 15, 245, 112, 190, 21, 35, 38, 62, 37, 67, 163, 190, 160, 198, 166, 189, 255, 2, 143, 189, 69, 196, 165, 189, 102, 243, 243, 61, 229, 30, 131, 61, 174, 92, 203, 61, 221, 76, 78, 60, 156, 116, 100, 190, 186, 184, 143, 61, 119, 255, 61, 62, 69, 33, 82, 62, 225, 210, 19, 190, 201, 255, 18, 190, 139, 96, 109, 189, 99, 66, 153, 61, 197, 200, 104, 62, 121, 145, 183, 60, 90, 156, 243, 189, 134, 42, 98, 62, 103, 7, 168, 190, 210, 53, 77, 190, 219, 251, 121, 62, 211, 201, 67, 190, 224, 238, 45, 189, 70, 243, 191, 61, 97, 247, 93, 62, 211, 193, 23, 62, 176, 185, 186, 189, 158, 174, 1, 189, 176, 54, 42, 62, 31, 149, 137, 62, 14, 139, 97, 61, 201, 59, 70, 189, 47, 137, 65, 190, 33, 249, 45, 62, 82, 187, 141, 61, 93, 166, 217, 189, 11, 226, 69, 62, 134, 249, 145, 62, 147, 32, 80, 191, 171, 29, 65, 62, 158, 253, 229, 189, 217, 200, 218, 62, 231, 51, 47, 190, 226, 7, 104, 190, 196, 0, 158, 190, 30, 151, 80, 62, 87, 204, 106, 62, 85, 6, 83, 62, 239, 160, 176, 190, 239, 74, 159, 62, 226, 67, 244, 189, 83, 77, 156, 190, 172, 32, 85, 61, 238, 242, 29, 191, 127, 38, 197, 190, 72, 250, 149, 62, 201, 207, 109, 62, 115, 22, 145, 61, 142, 224, 12, 62, 181, 21, 158, 62, 100, 158, 114, 62, 27, 87, 71, 60, 139, 28, 65, 62, 36, 60, 37, 189, 238, 1, 44, 191, 182, 183, 135, 60, 219, 174, 153, 61, 209, 44, 162, 61, 18, 235, 37, 62, 140, 237, 149, 61, 239, 247, 205, 61, 68, 78, 99, 62, 23, 198, 252, 189, 104, 172, 114, 62, 12, 158, 14, 62, 227, 249, 13, 189, 176, 163, 111, 190, 62, 253, 4, 191, 215, 15, 232, 189, 126, 9, 111, 62, 241, 194, 46, 190, 207, 80, 77, 190, 226, 45, 18, 62, 115, 67, 148, 190, 219, 53, 50, 62, 11, 165, 12, 188, 238, 89, 28, 62, 249, 171, 231, 190, 34, 49, 174, 62, 35, 158, 17, 190, 238, 248, 35, 189, 222, 96, 67, 62, 15, 25, 205, 62, 62, 69, 12, 62, 120, 168, 130, 62, 160, 171, 219, 62, 141, 212, 170, 59, 49, 84, 175, 62, 184, 185, 230, 61, 196, 56, 29, 62, 41, 92, 136, 60, 37, 27, 226, 61, 205, 192, 172, 61, 10, 104, 103, 189, 128, 233, 240, 189, 158, 110, 204, 189, 207, 48, 7, 190, 229, 181, 45, 59, 8, 212, 33, 190, 74, 209, 30, 190, 213, 168, 83, 61, 113, 113, 33, 190, 34, 25, 30, 62, 244, 249, 22, 190, 38, 126, 131, 189, 168, 82, 138, 189, 92, 7, 17, 190, 103, 138, 247, 61, 217, 176, 132, 189, 147, 202, 224, 59, 110, 190, 60, 190, 229, 244, 28, 62, 255, 14, 39, 62, 57, 204, 133, 61, 163, 117, 155, 188, 32, 240, 49, 61, 180, 123, 228, 188, 137, 251, 169, 189, 103, 183, 212, 189, 240, 189, 61, 190, 184, 225, 35, 190, 109, 38, 140, 60, 250, 31, 145, 61, 20, 13, 23, 190, 225, 177, 200, 189, 146, 7, 35, 190, 72, 78, 1, 190, 122, 212, 151, 61, 39, 53, 158, 61, 251, 224, 183, 61, 65, 8, 51, 61, 45, 79, 135, 189, 82, 198, 183, 61, 0, 225, 212, 189, 137, 168, 189, 189, 199, 42, 199, 189, 15, 250, 127, 59, 75, 99, 234, 189, 132, 255, 45, 62, 185, 236, 33, 190, 221, 46, 190, 188, 252, 234, 11, 62, 235, 42, 31, 62, 209, 3, 216, 60, 15, 5, 48, 190, 156, 20, 18, 190, 120, 68, 43, 62, 1, 49, 154, 189, 207, 130, 50, 188, 102, 64, 171, 60, 6, 220, 176, 189, 66, 128, 139, 189, 191, 206, 119, 188, 5, 46, 25, 186, 31, 100, 133, 62, 13, 197, 176, 188, 0, 167, 110, 189, 126, 110, 0, 62, 219, 58, 142, 61, 41, 74, 33, 62, 111, 127, 28, 62, 126, 184, 102, 60, 77, 51, 154, 61, 35, 104, 255, 190, 250, 109, 139, 190, 234, 168, 200, 189, 88, 251, 37, 190, 205, 3, 8, 190, 157, 122, 134, 61, 180, 228, 30, 190, 227, 148, 148, 62, 72, 111, 142, 61, 83, 231, 34, 62, 244, 41, 178, 190, 210, 100, 142, 62, 62, 232, 177, 189, 61, 229, 69, 62, 17, 63, 49, 62, 221, 61, 222, 62, 100, 109, 214, 61, 238, 154, 132, 61, 134, 29, 190, 62, 36, 1, 52, 189, 100, 26, 244, 189, 180, 201, 113, 62, 226, 116, 46, 61, 193, 92, 165, 190, 175, 91, 54, 190, 36, 126, 198, 61, 252, 14, 87, 190, 32, 158, 44, 62, 248, 237, 192, 190, 118, 16, 27, 62, 84, 140, 122, 62, 241, 211, 139, 62, 144, 52, 176, 61, 190, 51, 236, 189, 189, 11, 64, 188, 208, 147, 156, 62, 72, 37, 43, 61, 240, 236, 128, 62, 199, 110, 126, 61, 241, 96, 149, 189, 36, 96, 204, 187, 252, 169, 59, 62, 251, 71, 102, 62, 231, 24, 22, 191, 89, 55, 234, 186, 114, 43, 206, 189, 222, 238, 65, 190, 162, 56, 249, 190, 228, 44, 55, 62, 146, 23, 19, 186, 50, 176, 195, 61, 25, 163, 162, 62, 40, 245, 210, 189, 143, 200, 191, 60, 13, 149, 223, 61, 25, 42, 189, 189, 12, 188, 23, 62, 154, 125, 86, 189, 119, 55, 20, 190, 16, 126, 125, 62, 125, 145, 28, 188, 119, 116, 87, 62, 174, 111, 188, 189, 180, 14, 60, 62, 25, 91, 133, 190, 223, 159, 60, 61, 149, 22, 252, 61, 245, 204, 92, 190, 77, 1, 180, 189, 240, 188, 255, 61, 118, 8, 33, 190, 190, 194, 37, 62, 6, 174, 12, 190, 23, 180, 203, 61, 235, 252, 17, 62, 207, 229, 138, 190, 3, 116, 32, 190, 192, 154, 36, 62, 5, 173, 67, 61, 198, 120, 34, 61, 175, 85, 6, 190, 161, 149, 7, 61, 61, 205, 31, 62, 178, 22, 110, 62, 192, 235, 113, 190, 124, 133, 86, 62, 114, 214, 10, 191, 48, 246, 86, 62, 234, 163, 169, 62, 14, 220, 183, 190, 41, 33, 12, 62, 108, 170, 56, 62, 245, 117, 214, 62, 98, 155, 156, 190, 80, 25, 15, 190, 32, 74, 167, 189, 213, 225, 170, 62, 107, 251, 24, 62, 214, 96, 149, 61, 5, 122, 36, 190, 147, 166, 65, 189, 120, 39, 164, 190, 178, 156, 11, 190, 111, 16, 113, 61, 135, 39, 151, 190, 33, 41, 173, 190, 48, 73, 154, 62, 239, 61, 18, 62, 17, 32, 69, 189, 67, 217, 134, 62, 90, 196, 43, 62, 228, 215, 239, 62, 51, 135, 1, 62, 214, 153, 107, 62, 250, 245, 82, 190, 216, 35, 180, 190, 56, 209, 92, 62, 100, 200, 172, 190, 210, 182, 168, 61, 16, 191, 55, 189, 50, 91, 19, 190, 70, 151, 3, 189, 142, 167, 22, 62, 73, 116, 248, 61, 180, 110, 41, 189, 59, 31, 210, 188, 206, 143, 65, 62, 66, 68, 143, 62, 96, 225, 225, 62, 175, 142, 125, 188, 152, 245, 115, 60, 204, 71, 57, 61, 48, 78, 62, 190, 65, 134, 8, 188, 7, 211, 143, 60, 133, 221, 31, 62, 56, 231, 70, 189, 217, 122, 142, 189, 185, 108, 74, 62, 91, 250, 101, 62, 96, 246, 167, 189, 207, 89, 61, 59, 21, 98, 69, 61, 232, 105, 51, 62, 245, 87, 82, 62, 140, 71, 127, 189, 71, 249, 177, 62, 40, 237, 198, 61, 47, 57, 92, 62, 117, 116, 39, 190, 151, 212, 96, 60, 53, 234, 147, 188, 183, 153, 78, 62, 103, 229, 67, 190, 216, 3, 20, 190, 44, 63, 152, 62, 205, 66, 15, 61, 78, 52, 175, 188, 185, 193, 188, 188, 202, 79, 83, 190, 54, 248, 208, 62, 147, 246, 83, 61, 79, 6, 205, 189, 154, 8, 99, 191, 152, 68, 47, 188, 69, 145, 106, 190, 25, 134, 18, 190, 10, 238, 212, 61, 74, 132, 147, 190, 207, 124, 116, 59, 52, 138, 128, 62, 242, 94, 26, 61, 177, 0, 49, 189, 80, 112, 54, 62, 205, 149, 47, 62, 105, 159, 33, 60, 196, 27, 161, 61, 29, 143, 94, 62, 31, 234, 25, 190, 6, 129, 24, 190, 50, 37, 200, 189, 123, 238, 114, 61, 67, 87, 126, 61, 52, 5, 246, 189, 135, 85, 39, 62, 68, 236, 10, 190, 94, 98, 191, 189, 246, 22, 13, 190, 129, 200, 100, 61, 189, 0, 251, 61, 36, 234, 123, 61, 247, 116, 19, 61, 165, 141, 146, 189, 115, 229, 12, 61, 138, 121, 155, 61, 170, 152, 130, 189, 219, 41, 0, 190, 186, 39, 209, 61, 202, 58, 120, 189, 223, 164, 250, 60, 143, 196, 243, 60, 75, 33, 31, 190, 36, 43, 240, 189, 141, 135, 18, 62, 103, 250, 132, 189, 12, 187, 249, 61, 181, 221, 165, 189, 91, 168, 28, 190, 92, 46, 36, 62, 99, 73, 246, 189, 215, 73, 243, 188, 104, 138, 18, 190, 50, 159, 18, 61, 249, 12, 23, 61, 243, 169, 143, 60, 101, 105, 50, 190, 202, 52, 33, 190, 250, 36, 209, 61, 172, 116, 24, 190, 11, 40, 48, 190, 79, 113, 182, 61, 241, 122, 154, 189, 69, 34, 192, 61, 151, 51, 191, 189, 146, 179, 9, 189, 7, 47, 69, 189, 125, 22, 44, 190, 122, 135, 57, 61, 41, 247, 155, 61, 250, 251, 151, 61, 9, 85, 145, 189, 40, 107, 14, 190, 46, 141, 42, 62, 66, 40, 35, 190, 239, 60, 206, 189, 12, 159, 40, 189, 208, 114, 165, 59, 66, 123, 231, 59, 209, 0, 133, 189, 40, 165, 157, 189, 107, 235, 142, 189, 41, 161, 14, 190, 61, 6, 233, 189, 87, 185, 59, 61, 213, 221, 225, 189, 145, 164, 198, 61, 79, 19, 130, 189, 86, 1, 5, 61, 160, 208, 27, 59, 55, 237, 2, 189, 240, 148, 195, 61, 49, 78, 54, 190, 212, 30, 177, 61, 216, 142, 37, 189, 252, 124, 103, 61, 198, 190, 54, 189, 210, 254, 241, 60, 21, 246, 1, 62, 64, 233, 60, 190, 65, 235, 66, 188, 178, 189, 210, 189, 171, 94, 29, 190, 122, 25, 8, 190, 55, 121, 173, 61, 0, 159, 71, 186, 5, 220, 151, 189, 104, 213, 69, 190, 149, 130, 186, 61, 114, 47, 5, 190, 255, 180, 59, 189, 115, 123, 114, 60, 111, 191, 130, 190, 105, 152, 146, 61, 20, 147, 50, 190, 224, 0, 119, 189, 137, 13, 52, 189, 117, 153, 96, 190, 13, 178, 142, 61, 76, 31, 16, 187, 96, 147, 17, 190, 128, 15, 5, 189, 197, 236, 198, 189, 78, 184, 4, 190, 213, 150, 207, 189, 228, 87, 45, 190, 6, 95, 96, 189, 150, 224, 63, 187, 103, 185, 130, 189, 83, 115, 231, 189, 35, 200, 244, 189, 147, 244, 159, 61, 127, 237, 128, 189, 167, 147, 9, 62, 60, 111, 176, 189, 171, 4, 238, 189, 5, 224, 154, 61, 26, 190, 17, 189, 181, 125, 38, 190, 163, 101, 145, 188, 115, 76, 199, 61, 84, 221, 111, 60, 50, 150, 130, 188, 71, 29, 158, 61, 220, 230, 0, 61, 224, 162, 83, 59, 125, 52, 48, 190, 222, 0, 201, 186, 4, 216, 16, 61, 43, 234, 39, 60, 1, 8, 142, 61, 163, 126, 163, 189, 113, 223, 13, 190, 77, 246, 86, 61, 242, 250, 149, 61, 115, 213, 250, 190, 186, 196, 88, 62, 26, 191, 211, 188, 60, 150, 85, 190, 108, 176, 0, 191, 69, 125, 65, 190, 137, 177, 218, 190, 81, 151, 6, 187, 226, 119, 29, 190, 132, 172, 152, 61, 218, 180, 192, 62, 116, 103, 150, 190, 51, 151, 191, 62, 138, 190, 46, 190, 57, 251, 75, 190, 129, 120, 133, 190, 229, 226, 140, 62, 229, 100, 109, 190, 13, 170, 9, 62, 182, 10, 148, 190, 83, 147, 153, 190, 143, 183, 145, 190, 254, 75, 249, 188, 150, 30, 212, 189, 20, 114, 54, 190, 139, 242, 184, 189, 72, 192, 84, 189, 195, 219, 192, 62, 109, 17, 11, 60, 220, 254, 166, 188, 254, 96, 58, 191, 10, 7, 81, 62, 84, 7, 205, 62, 127, 228, 89, 61, 40, 85, 189, 189, 45, 62, 67, 62, 118, 121, 44, 61, 189, 39, 53, 187, 124, 94, 222, 60, 239, 120, 168, 59, 219, 138, 225, 61, 22, 188, 37, 189, 57, 131, 23, 62, 244, 255, 78, 61, 100, 123, 242, 61, 89, 61, 246, 190, 23, 108, 76, 62, 239, 4, 131, 62, 191, 102, 45, 190, 83, 14, 92, 190, 185, 245, 11, 190, 100, 8, 127, 59, 235, 187, 151, 190, 126, 24, 203, 189, 111, 160, 129, 189, 54, 192, 11, 191, 33, 137, 177, 62, 197, 128, 228, 61, 230, 29, 132, 60, 62, 124, 207, 61, 170, 2, 127, 62, 198, 47, 89, 62, 180, 40, 105, 189, 151, 33, 53, 62, 94, 71, 180, 189, 229, 240, 42, 190, 19, 171, 6, 189, 111, 121, 58, 62, 130, 142, 117, 62, 152, 22, 136, 62, 106, 235, 162, 61, 46, 224, 171, 62, 131, 104, 10, 62, 149, 35, 137, 189, 41, 150, 150, 190, 188, 9, 214, 61, 228, 86, 157, 60, 79, 197, 129, 61, 51, 222, 166, 62, 21, 74, 27, 62, 82, 186, 52, 187, 135, 82, 54, 190, 123, 179, 31, 60, 6, 230, 3, 190, 94, 154, 68, 190, 171, 164, 147, 190, 95, 62, 34, 191, 228, 183, 164, 61, 195, 170, 174, 61, 67, 251, 139, 62, 230, 136, 228, 61, 225, 198, 128, 189, 228, 222, 184, 190, 76, 53, 70, 62, 36, 40, 146, 62, 199, 36, 139, 188, 189, 181, 174, 60, 37, 134, 249, 61, 62, 160, 64, 189, 241, 175, 187, 189, 33, 140, 142, 189, 255, 225, 148, 59, 52, 193, 20, 189, 177, 182, 25, 62, 24, 64, 71, 190, 99, 146, 180, 190, 118, 35, 249, 61, 15, 119, 27, 58, 254, 17, 86, 190, 186, 249, 230, 61, 48, 179, 158, 61, 86, 69, 79, 189, 214, 213, 19, 62, 151, 52, 214, 59, 184, 142, 76, 188, 215, 51, 27, 60, 199, 146, 131, 190, 206, 129, 15, 62, 28, 33, 249, 61, 254, 1, 95, 188, 44, 162, 5, 191, 153, 94, 145, 59, 0, 241, 215, 188, 46, 253, 157, 61, 55, 89, 48, 190, 199, 238, 44, 190, 162, 143, 65, 62, 177, 159, 157, 190, 162, 242, 18, 190, 109, 29, 17, 62, 220, 80, 138, 62, 247, 91, 0, 189, 56, 49, 140, 188, 196, 51, 104, 60, 10, 163, 205, 62, 251, 126, 130, 61, 4, 164, 207, 189, 55, 55, 18, 190, 139, 13, 185, 61, 19, 81, 113, 190, 102, 59, 252, 189, 181, 219, 3, 62, 52, 105, 114, 190, 203, 133, 104, 190, 236, 182, 154, 62, 14, 154, 152, 62, 177, 254, 40, 62, 102, 165, 74, 62, 161, 85, 37, 61, 154, 142, 156, 189, 170, 70, 88, 62, 235, 24, 54, 62, 96, 242, 226, 61, 159, 21, 28, 190, 81, 189, 139, 62, 26, 52, 28, 190, 3, 254, 126, 187, 79, 166, 190, 189, 243, 202, 249, 189, 227, 29, 156, 189, 203, 41, 76, 189, 34, 104, 202, 61, 45, 125, 29, 61, 213, 65, 173, 189, 185, 44, 53, 188, 110, 46, 198, 61, 3, 143, 166, 189, 174, 187, 237, 188, 45, 226, 52, 60, 56, 223, 34, 62, 37, 26, 111, 61, 162, 129, 24, 190, 148, 171, 28, 60, 0, 28, 4, 190, 177, 160, 223, 61, 178, 205, 174, 189, 9, 49, 84, 190, 212, 163, 24, 62, 115, 230, 170, 189, 97, 58, 56, 190, 210, 94, 58, 190, 142, 233, 248, 61, 253, 153, 131, 189, 92, 85, 234, 189, 254, 10, 16, 61, 189, 35, 198, 189, 209, 174, 79, 190, 179, 151, 112, 190, 160, 113, 12, 190, 152, 236, 171, 190, 84, 148, 85, 191, 139, 31, 73, 190, 216, 177, 173, 62, 247, 199, 126, 62, 75, 38, 138, 190, 78, 115, 69, 61, 2, 77, 204, 61, 178, 16, 14, 62, 159, 124, 128, 61, 219, 105, 134, 190, 244, 200, 73, 190, 76, 228, 6, 62, 69, 117, 88, 189, 98, 157, 121, 61, 185, 51, 132, 62, 5, 7, 25, 191, 30, 16, 160, 189, 71, 38, 4, 61, 110, 118, 12, 190, 11, 111, 171, 190, 106, 211, 116, 190, 177, 14, 163, 60, 216, 22, 110, 188, 63, 56, 244, 189, 164, 88, 162, 60, 228, 144, 40, 191, 2, 50, 58, 62, 118, 150, 67, 61, 56, 235, 187, 60, 95, 109, 230, 61, 24, 192, 122, 62, 61, 167, 223, 188, 164, 10, 32, 62, 97, 72, 194, 190, 230, 16, 108, 62, 232, 237, 183, 189, 121, 115, 200, 62, 79, 59, 175, 190, 34, 154, 213, 190, 238, 242, 249, 188, 97, 86, 152, 62, 38, 119, 64, 62, 156, 127, 57, 60, 70, 0, 93, 189, 170, 112, 194, 59, 161, 99, 158, 190, 56, 45, 30, 190, 59, 172, 148, 62, 238, 153, 228, 190, 106, 22, 194, 190, 232, 100, 207, 188, 51, 81, 146, 62, 146, 63, 109, 62, 195, 104, 46, 62, 222, 26, 177, 62, 17, 97, 255, 62, 210, 39, 103, 61, 58, 205, 86, 62, 233, 228, 120, 189, 27, 146, 133, 190, 131, 2, 99, 62, 174, 30, 185, 190, 96, 63, 62, 62, 100, 64, 200, 189, 112, 126, 161, 61, 25, 160, 129, 189, 246, 253, 203, 61, 172, 24, 57, 62, 92, 65, 249, 60, 202, 88, 82, 190, 30, 199, 197, 59, 161, 75, 39, 62, 50, 66, 0, 63, 73, 225, 53, 190, 65, 59, 228, 189, 192, 17, 147, 191, 71, 49, 107, 62, 167, 62, 75, 61, 159, 117, 184, 189, 210, 0, 5, 60, 204, 105, 54, 190, 177, 200, 224, 188, 50, 90, 83, 62, 213, 239, 134, 62, 159, 235, 13, 189, 195, 142, 126, 62, 104, 67, 53, 62, 102, 95, 198, 61, 11, 14, 163, 189, 234, 222, 4, 62, 177, 206, 126, 189, 132, 41, 156, 187, 245, 58, 32, 188, 173, 44, 115, 186, 95, 219, 195, 189, 245, 26, 213, 190, 246, 238, 45, 190, 70, 60, 207, 189, 248, 12, 251, 61, 99, 11, 133, 62, 94, 20, 109, 190, 181, 29, 202, 61, 92, 164, 138, 62, 20, 155, 189, 61, 82, 210, 164, 59, 83, 28, 63, 190, 3, 57, 43, 190, 68, 115, 177, 62, 115, 170, 183, 60, 105, 227, 178, 189, 87, 40, 164, 62, 179, 173, 185, 190, 246, 181, 115, 62, 143, 3, 128, 62, 44, 252, 88, 62, 119, 75, 192, 190, 48, 0, 154, 189, 40, 120, 224, 189, 253, 218, 141, 61, 198, 34, 226, 190, 128, 1, 106, 62, 104, 36, 168, 190, 96, 168, 147, 62, 36, 138, 180, 62, 38, 163, 132, 190, 68, 83, 155, 188, 146, 209, 13, 190, 176, 144, 158, 190, 65, 228, 214, 189, 137, 14, 130, 60, 151, 28, 163, 62, 77, 50, 1, 62, 181, 116, 4, 191, 235, 179, 249, 62, 128, 235, 36, 62, 79, 241, 139, 62, 233, 12, 176, 189, 122, 174, 164, 190, 226, 172, 110, 190, 169, 169, 140, 62, 56, 125, 228, 60, 191, 243, 122, 190, 179, 183, 71, 62, 39, 118, 177, 190, 109, 69, 75, 189, 118, 141, 3, 62, 32, 214, 249, 60, 164, 214, 159, 190, 244, 211, 98, 188, 239, 76, 10, 189, 117, 245, 65, 61, 97, 5, 165, 190, 47, 239, 58, 62, 234, 7, 48, 190, 176, 73, 63, 62, 199, 202, 190, 62, 183, 94, 94, 189, 117, 153, 34, 62, 143, 243, 67, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 176, 46, 62, 65, 102, 11, 189, 165, 161, 153, 62, 39, 49, 115, 189, 149, 149, 239, 189, 24, 64, 108, 186, 76, 81, 35, 62, 249, 31, 157, 61, 165, 134, 217, 189, 6, 146, 4, 60, 251, 23, 140, 189, 9, 237, 132, 61, 225, 86, 165, 60, 2, 12, 181, 60, 156, 149, 242, 61, 237, 80, 192, 61, 79, 63, 173, 60, 25, 177, 222, 189, 51, 33, 48, 62, 87, 12, 51, 190, 147, 184, 178, 189, 123, 93, 101, 61, 44, 188, 99, 62, 153, 53, 19, 190, 19, 208, 218, 61, 168, 114, 156, 62, 126, 104, 225, 61, 140, 107, 172, 62, 147, 208, 250, 61, 28, 71, 37, 62, 143, 120, 136, 62, 136, 20, 129, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 135, 230, 62, 101, 184, 131, 188, 123, 127, 14, 63, 65, 86, 42, 61, 105, 133, 150, 61, 252, 127, 34, 191, 168, 241, 50, 190, 112, 250, 27, 191, 254, 92, 186, 62, 65, 191, 116, 61, 217, 216, 154, 188, 183, 7, 185, 62, 80, 90, 234, 62, 107, 147, 22, 62, 9, 230, 190, 190, 175, 29, 185, 60, 74, 202, 121, 190, 204, 94, 73, 61, 139, 45, 240, 188, 171, 246, 189, 61, 99, 208, 238, 189, 16, 170, 39, 191, 105, 206, 247, 62, 134, 105, 154, 62, 114, 182, 139, 190, 118, 158, 15, 190, 235, 243, 219, 189, 75, 191, 84, 63, 84, 0, 196, 190, 6, 61, 80, 190, 243, 239, 0, 63, 75, 68, 5, 63, 62, 89, 220, 188, 171, 84, 84, 61, 65, 181, 111, 190, 251, 46, 147, 189, 108, 136, 15, 190, 37, 192, 115, 60, 83, 124, 54, 189, 216, 18, 14, 62, 40, 241, 224, 61, 44, 241, 41, 62, 116, 224, 27, 62, 186, 8, 147, 61, 228, 66, 15, 184, 2, 97, 168, 188, 212, 39, 41, 190, 28, 86, 151, 190, 16, 62, 199, 189, 115, 112, 246, 61, 148, 58, 253, 60, 103, 91, 5, 62, 212, 240, 237, 59, 82, 137, 150, 61, 148, 78, 171, 61, 99, 217, 127, 62, 57, 9, 58, 62, 67, 214, 48, 190, 15, 252, 142, 59, 206, 185, 138, 190, 171, 58, 35, 189, 186, 97, 116, 190, 90, 253, 248, 187, 88, 246, 59, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 125, 50, 189, 227, 161, 229, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {85, 238, 14, 63, 75, 16, 240, 62, 150, 138, 1, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {172, 201, 6, 190, 226, 198, 192, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0036/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}