// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {207, 152, 96, 63, 196, 106, 165, 63, 44, 188, 189, 62, 196, 180, 137, 190, 118, 238, 171, 191, 70, 144, 28, 191, 106, 93, 96, 62, 197, 202, 135, 191, 235, 186, 7, 61, 217, 215, 85, 190, 133, 12, 72, 63, 104, 250, 146, 189, 123, 6, 107, 190, 127, 152, 166, 190, 15, 237, 65, 62, 44, 91, 255, 61, 73, 5, 208, 62, 21, 23, 183, 190, 51, 235, 180, 61, 38, 215, 68, 191, 108, 123, 208, 190, 95, 125, 207, 62, 124, 176, 201, 62, 164, 141, 253, 190, 173, 17, 43, 63, 169, 246, 117, 191, 52, 236, 154, 190, 128, 33, 105, 63, 248, 144, 64, 62, 113, 226, 115, 61, 53, 59, 162, 190, 205, 132, 115, 63, 239, 255, 211, 62, 79, 210, 233, 62, 214, 25, 202, 189, 111, 128, 181, 62, 242, 203, 44, 191, 84, 104, 108, 63, 146, 181, 195, 62, 87, 142, 34, 191, 145, 106, 12, 191, 67, 8, 15, 189, 230, 23, 143, 190, 174, 84, 7, 60, 225, 57, 146, 190, 94, 157, 143, 188, 149, 147, 76, 190, 232, 100, 0, 63, 9, 240, 235, 60, 176, 63, 1, 62, 167, 2, 28, 191, 22, 223, 79, 63, 44, 193, 218, 190, 248, 233, 163, 190, 154, 254, 118, 62, 59, 172, 199, 62, 150, 70, 9, 191, 192, 168, 111, 62, 62, 176, 79, 191, 153, 66, 143, 189, 26, 12, 124, 62, 216, 228, 64, 63, 205, 122, 35, 62, 120, 130, 251, 189, 195, 154, 37, 62, 81, 249, 181, 62, 220, 138, 167, 62, 130, 66, 126, 190, 244, 206, 110, 190, 40, 221, 213, 62, 246, 22, 73, 62, 38, 52, 179, 190, 30, 152, 203, 190, 254, 45, 40, 60, 66, 75, 241, 190, 102, 77, 169, 190, 182, 175, 79, 189, 211, 153, 45, 61, 75, 10, 113, 190, 105, 236, 17, 191, 221, 167, 64, 191, 65, 195, 27, 62, 230, 80, 52, 63, 139, 92, 62, 61, 112, 3, 103, 63, 88, 14, 137, 191, 9, 219, 149, 190, 193, 140, 21, 63, 45, 144, 54, 63, 241, 217, 220, 62, 147, 235, 18, 191, 112, 73, 77, 191, 187, 99, 80, 61, 34, 96, 44, 191, 176, 131, 78, 63, 24, 69, 7, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 20, 11, 191, 130, 169, 111, 190, 145, 198, 13, 191, 191, 108, 135, 62, 193, 123, 219, 62, 56, 252, 100, 190, 94, 135, 14, 190, 211, 122, 177, 61, 133, 142, 178, 60, 192, 105, 243, 62, 109, 249, 172, 190, 36, 122, 231, 190, 73, 88, 205, 190, 162, 149, 54, 63, 220, 26, 88, 191, 156, 65, 185, 61, 196, 97, 169, 190, 242, 143, 81, 191, 215, 52, 150, 190, 97, 78, 25, 63, 32, 163, 198, 61, 19, 181, 28, 191, 217, 4, 27, 63, 100, 55, 64, 63, 13, 109, 27, 191, 207, 179, 16, 63, 184, 17, 229, 189, 20, 244, 201, 62, 71, 187, 139, 189, 179, 232, 145, 62, 224, 147, 250, 62, 195, 255, 77, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 48, 194, 190, 30, 196, 17, 61, 152, 70, 74, 189, 234, 29, 240, 188, 52, 218, 56, 61, 1, 59, 175, 190, 7, 135, 125, 62, 119, 96, 56, 62, 172, 7, 42, 62, 151, 89, 243, 61, 255, 12, 205, 190, 60, 251, 166, 188, 126, 8, 238, 62, 76, 46, 79, 62, 242, 242, 62, 61, 175, 219, 179, 62, 24, 171, 142, 190, 152, 70, 29, 189, 214, 168, 152, 62, 120, 251, 121, 62, 19, 248, 254, 190, 13, 236, 97, 189, 6, 244, 105, 61, 209, 243, 140, 60, 124, 31, 132, 190, 82, 93, 86, 62, 82, 104, 14, 190, 253, 62, 123, 62, 26, 164, 7, 62, 107, 248, 143, 190, 135, 220, 116, 62, 137, 229, 77, 190, 186, 243, 205, 189, 83, 1, 55, 187, 108, 175, 88, 190, 87, 79, 219, 189, 133, 220, 11, 60, 250, 123, 254, 189, 9, 24, 32, 190, 163, 122, 13, 190, 29, 232, 4, 62, 86, 221, 148, 60, 224, 214, 100, 189, 143, 29, 110, 190, 165, 160, 206, 58, 66, 181, 67, 189, 21, 171, 195, 189, 181, 123, 201, 61, 230, 113, 17, 62, 136, 102, 198, 61, 179, 55, 23, 62, 199, 191, 245, 186, 133, 78, 41, 61, 41, 184, 105, 189, 123, 194, 74, 190, 82, 148, 226, 61, 253, 8, 29, 190, 42, 220, 18, 189, 22, 223, 224, 189, 25, 223, 16, 61, 76, 201, 233, 187, 111, 209, 142, 188, 142, 194, 79, 190, 14, 225, 47, 190, 168, 80, 153, 190, 227, 118, 67, 191, 92, 190, 114, 190, 16, 129, 128, 61, 252, 227, 180, 61, 189, 56, 5, 190, 51, 27, 213, 62, 122, 0, 182, 62, 111, 185, 19, 62, 128, 34, 34, 62, 61, 171, 162, 189, 26, 183, 106, 60, 228, 81, 156, 61, 84, 61, 151, 60, 43, 219, 198, 189, 120, 157, 57, 61, 178, 60, 104, 190, 228, 238, 55, 62, 101, 101, 235, 61, 209, 96, 5, 189, 79, 249, 162, 190, 80, 26, 169, 61, 157, 234, 96, 189, 229, 231, 141, 61, 35, 85, 13, 62, 210, 107, 11, 62, 0, 185, 177, 190, 23, 172, 214, 61, 161, 81, 117, 62, 26, 243, 153, 189, 128, 60, 91, 190, 57, 117, 39, 62, 219, 84, 146, 188, 167, 224, 201, 60, 201, 170, 4, 61, 152, 142, 218, 60, 181, 190, 5, 61, 80, 23, 29, 191, 206, 100, 175, 61, 219, 35, 11, 190, 56, 148, 4, 62, 161, 144, 42, 191, 111, 171, 84, 61, 2, 212, 139, 190, 193, 14, 150, 62, 207, 135, 17, 62, 73, 22, 184, 189, 0, 7, 24, 62, 153, 171, 158, 190, 248, 49, 223, 60, 215, 204, 13, 189, 238, 211, 22, 62, 52, 247, 60, 190, 10, 55, 16, 62, 44, 199, 114, 190, 154, 143, 147, 190, 213, 180, 181, 190, 54, 226, 153, 62, 205, 2, 233, 188, 209, 2, 237, 61, 100, 119, 244, 189, 35, 47, 99, 190, 38, 147, 74, 62, 27, 226, 152, 62, 61, 197, 3, 61, 110, 165, 46, 188, 162, 21, 54, 190, 67, 208, 177, 189, 84, 60, 219, 189, 219, 113, 12, 62, 179, 109, 6, 62, 215, 182, 41, 62, 221, 238, 78, 189, 135, 178, 199, 189, 88, 254, 58, 190, 251, 222, 81, 189, 229, 155, 6, 62, 164, 67, 174, 60, 204, 177, 229, 187, 77, 79, 96, 61, 63, 217, 61, 190, 17, 30, 18, 61, 4, 129, 2, 189, 184, 143, 5, 190, 147, 71, 9, 189, 47, 255, 49, 190, 110, 254, 88, 189, 104, 7, 53, 190, 11, 3, 141, 189, 136, 224, 50, 190, 23, 248, 146, 61, 94, 238, 202, 189, 238, 169, 180, 59, 140, 135, 201, 60, 248, 3, 187, 61, 149, 107, 24, 57, 239, 53, 150, 191, 222, 130, 57, 60, 32, 50, 229, 190, 49, 50, 82, 190, 99, 99, 42, 62, 84, 239, 134, 61, 231, 103, 193, 190, 179, 242, 248, 62, 160, 46, 173, 190, 55, 243, 179, 190, 155, 101, 89, 190, 20, 89, 18, 191, 62, 21, 145, 188, 71, 241, 90, 62, 140, 167, 255, 61, 248, 52, 121, 61, 186, 57, 132, 190, 246, 213, 118, 62, 17, 131, 162, 62, 236, 196, 10, 62, 21, 58, 105, 63, 122, 13, 166, 190, 119, 204, 138, 190, 116, 31, 1, 62, 115, 129, 193, 190, 149, 76, 73, 62, 143, 197, 181, 190, 173, 10, 208, 62, 13, 212, 194, 190, 73, 9, 213, 188, 99, 195, 29, 189, 99, 253, 143, 62, 110, 35, 138, 61, 143, 26, 80, 59, 25, 111, 217, 190, 11, 49, 189, 61, 207, 187, 68, 62, 160, 185, 65, 62, 209, 60, 84, 190, 27, 188, 21, 190, 40, 234, 178, 189, 254, 208, 228, 61, 100, 167, 96, 62, 115, 233, 132, 61, 223, 69, 27, 190, 226, 180, 97, 62, 136, 251, 173, 190, 45, 121, 77, 190, 112, 64, 100, 62, 238, 215, 203, 190, 215, 30, 71, 189, 58, 31, 184, 61, 117, 231, 134, 62, 34, 31, 251, 61, 153, 75, 191, 189, 251, 217, 193, 188, 149, 255, 11, 62, 213, 129, 157, 62, 113, 206, 18, 61, 95, 238, 50, 60, 44, 35, 131, 190, 52, 18, 53, 62, 94, 51, 73, 189, 159, 10, 6, 189, 190, 226, 253, 61, 112, 222, 140, 62, 123, 16, 160, 191, 45, 92, 71, 62, 242, 156, 219, 189, 221, 80, 194, 62, 180, 27, 112, 190, 221, 9, 129, 190, 102, 255, 182, 190, 94, 55, 120, 62, 44, 18, 57, 62, 76, 177, 157, 62, 159, 24, 232, 190, 24, 242, 188, 62, 47, 218, 51, 190, 237, 68, 139, 190, 16, 199, 55, 60, 69, 164, 91, 191, 78, 197, 213, 190, 247, 233, 152, 62, 107, 222, 156, 62, 164, 5, 222, 188, 84, 149, 253, 61, 144, 44, 154, 62, 103, 13, 53, 62, 209, 189, 189, 61, 219, 12, 31, 62, 14, 133, 129, 60, 49, 10, 64, 191, 244, 70, 4, 61, 77, 212, 183, 188, 223, 79, 50, 62, 193, 200, 138, 62, 234, 30, 152, 61, 2, 159, 160, 188, 212, 223, 23, 62, 161, 2, 139, 190, 80, 124, 103, 62, 186, 90, 11, 62, 204, 95, 137, 189, 174, 34, 131, 190, 156, 219, 17, 191, 134, 109, 0, 190, 80, 103, 149, 62, 69, 100, 170, 190, 231, 18, 160, 190, 20, 89, 233, 61, 148, 164, 128, 190, 183, 112, 42, 62, 172, 84, 89, 61, 110, 200, 5, 62, 159, 238, 2, 191, 122, 123, 52, 62, 160, 105, 215, 189, 42, 254, 155, 189, 155, 240, 22, 62, 46, 118, 210, 62, 156, 96, 54, 189, 85, 177, 128, 62, 214, 143, 151, 62, 25, 82, 91, 59, 21, 155, 167, 62, 198, 161, 187, 62, 113, 6, 219, 189, 41, 92, 136, 60, 37, 27, 226, 61, 205, 192, 172, 61, 10, 104, 103, 189, 128, 233, 240, 189, 158, 110, 204, 189, 207, 48, 7, 190, 229, 181, 45, 59, 8, 212, 33, 190, 74, 209, 30, 190, 213, 168, 83, 61, 113, 113, 33, 190, 34, 25, 30, 62, 244, 249, 22, 190, 38, 126, 131, 189, 168, 82, 138, 189, 92, 7, 17, 190, 103, 138, 247, 61, 217, 176, 132, 189, 147, 202, 224, 59, 110, 190, 60, 190, 229, 244, 28, 62, 255, 14, 39, 62, 57, 204, 133, 61, 163, 117, 155, 188, 32, 240, 49, 61, 180, 123, 228, 188, 137, 251, 169, 189, 103, 183, 212, 189, 240, 189, 61, 190, 184, 225, 35, 190, 109, 38, 140, 60, 250, 31, 145, 61, 182, 19, 33, 190, 138, 163, 204, 189, 226, 50, 67, 190, 151, 114, 0, 190, 43, 208, 40, 61, 249, 106, 108, 61, 71, 228, 106, 61, 18, 177, 180, 60, 239, 251, 0, 190, 82, 198, 183, 61, 0, 225, 212, 189, 137, 168, 189, 189, 247, 169, 186, 189, 81, 74, 31, 187, 75, 99, 234, 189, 178, 75, 20, 62, 61, 111, 57, 190, 48, 15, 87, 189, 8, 48, 236, 61, 196, 7, 28, 62, 209, 3, 216, 60, 71, 211, 86, 190, 243, 183, 53, 190, 97, 20, 24, 62, 110, 212, 167, 189, 119, 29, 249, 188, 2, 230, 195, 188, 233, 220, 189, 189, 66, 128, 139, 189, 14, 152, 6, 187, 16, 80, 163, 188, 69, 17, 250, 62, 21, 242, 21, 189, 127, 142, 142, 61, 37, 132, 241, 61, 236, 61, 208, 61, 220, 184, 33, 62, 121, 186, 27, 62, 177, 154, 143, 60, 0, 221, 149, 61, 234, 232, 226, 190, 77, 59, 11, 191, 181, 71, 71, 190, 40, 127, 208, 190, 197, 29, 37, 190, 235, 185, 40, 61, 111, 186, 184, 189, 112, 254, 146, 62, 51, 148, 6, 62, 87, 209, 20, 62, 0, 73, 159, 190, 253, 208, 143, 62, 128, 48, 173, 190, 30, 231, 89, 62, 245, 235, 62, 62, 26, 233, 225, 62, 108, 84, 195, 61, 80, 161, 110, 61, 154, 238, 195, 62, 149, 98, 242, 187, 93, 200, 146, 189, 232, 217, 11, 63, 41, 155, 159, 189, 157, 52, 168, 190, 208, 26, 167, 190, 201, 98, 19, 62, 227, 18, 172, 189, 160, 243, 45, 62, 162, 225, 179, 190, 221, 71, 1, 62, 173, 100, 139, 62, 129, 148, 136, 62, 251, 114, 197, 61, 188, 218, 226, 189, 17, 110, 144, 189, 229, 243, 211, 62, 136, 14, 9, 61, 204, 153, 20, 62, 49, 213, 79, 61, 207, 250, 191, 189, 2, 77, 76, 188, 230, 4, 66, 62, 7, 229, 107, 62, 172, 80, 13, 191, 22, 161, 237, 60, 94, 197, 163, 189, 102, 127, 50, 190, 9, 212, 20, 191, 91, 63, 68, 62, 177, 9, 138, 189, 215, 88, 16, 62, 243, 94, 167, 62, 106, 2, 202, 189, 160, 150, 167, 61, 143, 86, 23, 62, 226, 209, 9, 191, 168, 36, 28, 62, 236, 188, 244, 189, 97, 247, 238, 189, 32, 219, 165, 62, 218, 172, 163, 59, 56, 117, 96, 62, 161, 217, 196, 189, 42, 36, 67, 62, 37, 143, 131, 190, 177, 125, 66, 61, 38, 202, 204, 189, 36, 7, 147, 190, 23, 165, 20, 189, 199, 158, 214, 61, 179, 229, 137, 190, 101, 232, 40, 62, 202, 137, 126, 189, 180, 100, 207, 61, 111, 63, 74, 62, 52, 56, 234, 190, 147, 168, 142, 190, 58, 4, 62, 62, 62, 17, 137, 61, 229, 231, 243, 60, 128, 33, 142, 189, 172, 19, 49, 61, 5, 61, 20, 62, 154, 130, 135, 62, 30, 38, 156, 190, 130, 130, 202, 62, 211, 167, 54, 191, 111, 191, 64, 62, 152, 165, 178, 62, 4, 192, 146, 190, 40, 24, 251, 61, 87, 123, 105, 62, 170, 113, 207, 62, 93, 166, 170, 190, 50, 109, 19, 190, 153, 228, 142, 189, 241, 85, 178, 62, 219, 60, 15, 62, 135, 0, 251, 61, 47, 181, 61, 190, 174, 110, 188, 188, 95, 85, 145, 190, 124, 61, 4, 190, 21, 203, 72, 61, 239, 137, 191, 190, 195, 152, 173, 190, 89, 171, 166, 62, 132, 239, 44, 62, 207, 199, 126, 189, 8, 70, 133, 62, 254, 141, 45, 62, 61, 154, 234, 62, 244, 194, 30, 62, 60, 28, 103, 62, 170, 145, 74, 190, 3, 223, 185, 190, 178, 130, 106, 62, 93, 127, 235, 190, 100, 186, 24, 62, 224, 158, 203, 188, 148, 177, 252, 189, 35, 218, 109, 60, 52, 151, 61, 189, 64, 135, 10, 62, 201, 11, 18, 189, 209, 6, 37, 189, 168, 180, 70, 62, 189, 212, 152, 62, 207, 100, 185, 62, 108, 5, 226, 60, 187, 133, 64, 61, 209, 242, 197, 61, 117, 15, 174, 190, 96, 227, 51, 62, 13, 144, 118, 61, 74, 117, 50, 62, 120, 136, 217, 188, 118, 109, 145, 189, 50, 132, 55, 62, 109, 69, 83, 62, 89, 68, 120, 61, 174, 3, 218, 188, 23, 45, 63, 60, 17, 44, 142, 62, 70, 133, 239, 186, 41, 155, 99, 189, 244, 224, 63, 62, 108, 186, 207, 61, 174, 129, 189, 62, 110, 8, 139, 190, 247, 211, 105, 190, 114, 19, 79, 188, 126, 54, 96, 62, 140, 32, 192, 190, 231, 186, 117, 190, 201, 193, 163, 62, 178, 181, 199, 59, 159, 58, 84, 189, 121, 126, 20, 189, 216, 50, 74, 190, 131, 225, 216, 62, 36, 145, 101, 190, 68, 116, 133, 190, 153, 114, 207, 191, 12, 129, 132, 188, 159, 156, 73, 190, 210, 40, 73, 190, 221, 110, 176, 61, 37, 85, 191, 190, 192, 254, 30, 188, 64, 165, 135, 62, 109, 176, 112, 61, 126, 17, 97, 190, 236, 98, 50, 62, 203, 141, 38, 62, 55, 94, 184, 187, 226, 229, 83, 61, 101, 177, 87, 62, 41, 211, 57, 190, 31, 134, 40, 190, 5, 249, 180, 189, 6, 138, 171, 189, 189, 217, 47, 61, 52, 5, 246, 189, 135, 85, 39, 62, 68, 236, 10, 190, 94, 98, 191, 189, 246, 22, 13, 190, 129, 200, 100, 61, 189, 0, 251, 61, 36, 234, 123, 61, 247, 116, 19, 61, 165, 141, 146, 189, 115, 229, 12, 61, 138, 121, 155, 61, 170, 152, 130, 189, 219, 41, 0, 190, 186, 39, 209, 61, 202, 58, 120, 189, 223, 164, 250, 60, 143, 196, 243, 60, 75, 33, 31, 190, 36, 43, 240, 189, 141, 135, 18, 62, 103, 250, 132, 189, 12, 187, 249, 61, 181, 221, 165, 189, 91, 168, 28, 190, 92, 46, 36, 62, 99, 73, 246, 189, 215, 73, 243, 188, 104, 138, 18, 190, 50, 159, 18, 61, 249, 12, 23, 61, 243, 169, 143, 60, 101, 105, 50, 190, 202, 52, 33, 190, 250, 36, 209, 61, 172, 116, 24, 190, 11, 40, 48, 190, 79, 113, 182, 61, 241, 122, 154, 189, 69, 34, 192, 61, 151, 51, 191, 189, 146, 179, 9, 189, 7, 47, 69, 189, 125, 22, 44, 190, 122, 135, 57, 61, 41, 247, 155, 61, 250, 251, 151, 61, 9, 85, 145, 189, 40, 107, 14, 190, 46, 141, 42, 62, 66, 40, 35, 190, 239, 60, 206, 189, 12, 159, 40, 189, 208, 114, 165, 59, 66, 123, 231, 59, 209, 0, 133, 189, 40, 165, 157, 189, 107, 235, 142, 189, 41, 161, 14, 190, 61, 6, 233, 189, 87, 185, 59, 61, 213, 221, 225, 189, 145, 164, 198, 61, 79, 19, 130, 189, 86, 1, 5, 61, 160, 208, 27, 59, 55, 237, 2, 189, 240, 148, 195, 61, 49, 78, 54, 190, 212, 30, 177, 61, 216, 142, 37, 189, 252, 124, 103, 61, 198, 190, 54, 189, 210, 254, 241, 60, 21, 246, 1, 62, 64, 233, 60, 190, 65, 235, 66, 188, 178, 189, 210, 189, 171, 94, 29, 190, 122, 25, 8, 190, 55, 121, 173, 61, 0, 159, 71, 186, 5, 220, 151, 189, 104, 213, 69, 190, 149, 130, 186, 61, 114, 47, 5, 190, 255, 180, 59, 189, 115, 123, 114, 60, 111, 191, 130, 190, 105, 152, 146, 61, 20, 147, 50, 190, 224, 0, 119, 189, 137, 13, 52, 189, 117, 153, 96, 190, 13, 178, 142, 61, 76, 31, 16, 187, 96, 147, 17, 190, 128, 15, 5, 189, 197, 236, 198, 189, 78, 184, 4, 190, 213, 150, 207, 189, 228, 87, 45, 190, 6, 95, 96, 189, 150, 224, 63, 187, 103, 185, 130, 189, 83, 115, 231, 189, 35, 200, 244, 189, 147, 244, 159, 61, 127, 237, 128, 189, 167, 147, 9, 62, 60, 111, 176, 189, 171, 4, 238, 189, 5, 224, 154, 61, 26, 190, 17, 189, 181, 125, 38, 190, 163, 101, 145, 188, 115, 76, 199, 61, 84, 221, 111, 60, 50, 150, 130, 188, 71, 29, 158, 61, 220, 230, 0, 61, 224, 162, 83, 59, 125, 52, 48, 190, 222, 0, 201, 186, 4, 216, 16, 61, 43, 234, 39, 60, 1, 8, 142, 61, 163, 126, 163, 189, 196, 19, 239, 187, 89, 222, 152, 60, 178, 166, 49, 190, 192, 114, 16, 191, 111, 244, 50, 62, 26, 191, 211, 188, 43, 44, 5, 191, 138, 233, 255, 190, 121, 44, 245, 190, 51, 183, 135, 190, 129, 160, 20, 61, 92, 173, 145, 189, 163, 160, 232, 60, 104, 215, 131, 62, 116, 103, 150, 190, 135, 33, 203, 62, 177, 187, 55, 190, 46, 73, 76, 190, 114, 127, 130, 190, 38, 45, 66, 62, 76, 128, 93, 190, 201, 174, 45, 62, 220, 41, 249, 190, 164, 134, 186, 190, 68, 133, 154, 190, 52, 225, 237, 189, 54, 119, 106, 189, 45, 26, 163, 190, 187, 169, 201, 190, 135, 248, 87, 60, 231, 170, 167, 62, 207, 116, 149, 189, 19, 38, 176, 61, 175, 143, 117, 191, 133, 207, 122, 61, 159, 165, 208, 62, 45, 194, 161, 60, 241, 119, 68, 190, 141, 42, 236, 189, 18, 48, 7, 59, 167, 187, 174, 189, 169, 73, 123, 60, 67, 208, 71, 60, 186, 152, 66, 61, 243, 127, 149, 188, 44, 227, 218, 61, 123, 141, 33, 61, 3, 72, 214, 61, 86, 250, 8, 191, 105, 79, 38, 190, 169, 31, 14, 62, 206, 135, 126, 190, 180, 1, 38, 190, 176, 233, 249, 189, 185, 140, 193, 188, 77, 230, 166, 190, 44, 227, 101, 62, 55, 176, 131, 189, 216, 150, 38, 191, 80, 243, 195, 62, 67, 184, 144, 61, 199, 57, 77, 61, 150, 244, 24, 62, 176, 255, 167, 62, 130, 205, 31, 62, 30, 192, 2, 190, 175, 119, 88, 190, 203, 65, 238, 188, 137, 148, 248, 189, 71, 174, 25, 61, 204, 113, 58, 62, 221, 24, 145, 62, 112, 144, 145, 62, 3, 110, 181, 61, 78, 77, 13, 63, 52, 170, 189, 62, 32, 169, 115, 61, 149, 147, 252, 190, 39, 165, 91, 59, 104, 40, 7, 62, 175, 97, 180, 61, 206, 221, 234, 62, 53, 189, 78, 62, 24, 213, 134, 189, 31, 65, 163, 190, 226, 143, 208, 61, 121, 141, 241, 189, 105, 55, 48, 190, 38, 107, 163, 190, 93, 101, 78, 191, 195, 45, 153, 61, 27, 113, 73, 62, 219, 115, 156, 62, 162, 159, 252, 187, 31, 228, 31, 61, 96, 48, 18, 191, 150, 23, 39, 190, 243, 138, 168, 62, 52, 81, 120, 60, 50, 141, 150, 189, 146, 116, 42, 62, 178, 216, 133, 189, 236, 114, 243, 188, 72, 161, 127, 189, 254, 200, 237, 61, 210, 63, 74, 62, 139, 98, 179, 61, 181, 32, 79, 190, 4, 43, 52, 191, 230, 24, 70, 62, 219, 32, 12, 188, 18, 223, 107, 190, 157, 46, 248, 61, 47, 177, 58, 62, 111, 129, 79, 189, 188, 108, 121, 62, 34, 180, 34, 191, 177, 238, 28, 189, 235, 37, 6, 61, 42, 118, 127, 190, 2, 137, 209, 61, 193, 41, 9, 62, 11, 123, 50, 60, 114, 7, 91, 191, 114, 33, 39, 62, 3, 235, 194, 190, 132, 96, 231, 61, 129, 64, 114, 190, 224, 142, 64, 190, 170, 200, 93, 62, 98, 43, 3, 190, 101, 56, 66, 190, 16, 61, 108, 62, 234, 197, 123, 62, 183, 14, 146, 189, 184, 165, 9, 189, 121, 196, 13, 61, 88, 9, 207, 62, 93, 207, 236, 60, 87, 18, 114, 189, 158, 40, 47, 190, 154, 135, 1, 62, 197, 187, 22, 190, 27, 185, 13, 190, 18, 132, 225, 61, 42, 21, 155, 190, 1, 136, 120, 190, 168, 206, 173, 62, 55, 91, 160, 62, 88, 109, 35, 62, 122, 88, 68, 62, 22, 224, 10, 61, 188, 11, 143, 189, 141, 166, 117, 62, 65, 85, 47, 62, 187, 129, 212, 61, 150, 135, 33, 190, 137, 29, 152, 62, 155, 4, 115, 190, 130, 53, 44, 61, 79, 166, 190, 189, 243, 202, 249, 189, 227, 29, 156, 189, 203, 41, 76, 189, 34, 104, 202, 61, 45, 125, 29, 61, 213, 65, 173, 189, 185, 44, 53, 188, 110, 46, 198, 61, 3, 143, 166, 189, 174, 187, 237, 188, 45, 226, 52, 60, 56, 223, 34, 62, 37, 26, 111, 61, 162, 129, 24, 190, 148, 171, 28, 60, 0, 28, 4, 190, 177, 160, 223, 61, 178, 205, 174, 189, 9, 49, 84, 190, 212, 163, 24, 62, 115, 230, 170, 189, 97, 58, 56, 190, 210, 94, 58, 190, 142, 233, 248, 61, 253, 153, 131, 189, 92, 85, 234, 189, 254, 10, 16, 61, 189, 35, 198, 189, 209, 174, 79, 190, 179, 151, 112, 190, 160, 113, 12, 190, 98, 83, 170, 190, 83, 146, 143, 191, 14, 176, 162, 190, 173, 70, 152, 62, 154, 129, 104, 62, 133, 240, 5, 191, 236, 181, 104, 62, 7, 61, 159, 61, 37, 130, 224, 61, 212, 123, 37, 61, 246, 12, 145, 190, 132, 147, 129, 190, 51, 255, 34, 62, 28, 238, 54, 189, 98, 157, 121, 61, 158, 120, 96, 62, 122, 184, 59, 191, 36, 105, 115, 188, 43, 208, 128, 190, 8, 204, 50, 190, 144, 254, 180, 190, 103, 77, 83, 190, 204, 204, 76, 60, 141, 229, 225, 188, 228, 147, 35, 62, 11, 162, 85, 60, 229, 254, 43, 191, 58, 171, 36, 62, 189, 121, 36, 61, 95, 97, 14, 60, 109, 6, 29, 62, 228, 228, 135, 62, 42, 189, 88, 189, 105, 255, 55, 62, 45, 200, 177, 190, 189, 83, 109, 62, 58, 87, 59, 189, 196, 154, 195, 62, 197, 97, 182, 190, 23, 184, 214, 190, 68, 31, 250, 188, 95, 210, 154, 62, 22, 253, 69, 62, 118, 243, 83, 61, 172, 12, 137, 189, 52, 143, 95, 61, 243, 188, 153, 190, 248, 248, 14, 190, 9, 201, 144, 62, 114, 37, 8, 191, 219, 216, 191, 190, 220, 109, 227, 187, 189, 236, 160, 62, 51, 36, 104, 62, 72, 73, 41, 62, 92, 25, 178, 62, 175, 36, 246, 62, 159, 16, 203, 61, 28, 198, 86, 62, 200, 209, 68, 189, 237, 56, 145, 190, 117, 38, 97, 62, 189, 37, 235, 190, 19, 48, 135, 62, 147, 13, 12, 190, 158, 153, 229, 61, 239, 185, 130, 190, 81, 59, 24, 189, 22, 205, 107, 62, 95, 215, 90, 187, 113, 153, 120, 190, 51, 151, 90, 188, 71, 255, 66, 62, 50, 103, 0, 63, 117, 130, 66, 191, 185, 139, 249, 190, 62, 128, 251, 191, 33, 15, 107, 62, 70, 149, 19, 62, 212, 91, 132, 190, 130, 230, 97, 188, 212, 232, 119, 190, 123, 242, 78, 189, 65, 38, 109, 62, 15, 89, 137, 62, 34, 20, 155, 190, 204, 60, 124, 62, 132, 44, 41, 62, 55, 145, 215, 61, 98, 214, 244, 189, 11, 84, 255, 61, 230, 159, 218, 189, 99, 32, 160, 187, 121, 197, 64, 59, 67, 90, 16, 190, 5, 244, 29, 190, 78, 71, 215, 190, 148, 24, 111, 190, 167, 64, 18, 62, 180, 127, 206, 60, 119, 189, 128, 62, 21, 136, 95, 190, 80, 200, 96, 62, 203, 232, 153, 62, 29, 72, 4, 62, 61, 185, 39, 60, 103, 179, 109, 190, 142, 109, 58, 190, 130, 165, 203, 62, 111, 59, 21, 59, 139, 103, 187, 190, 36, 96, 156, 62, 24, 5, 175, 190, 45, 234, 148, 62, 209, 97, 128, 62, 132, 177, 116, 62, 161, 103, 202, 190, 138, 125, 239, 188, 253, 147, 173, 189, 111, 143, 166, 61, 194, 173, 248, 190, 2, 213, 62, 62, 204, 137, 166, 190, 156, 162, 131, 62, 144, 230, 203, 62, 146, 83, 140, 190, 126, 224, 104, 61, 152, 190, 132, 190, 20, 176, 170, 190, 4, 205, 254, 189, 91, 6, 132, 61, 54, 164, 197, 62, 62, 11, 196, 61, 167, 192, 2, 191, 219, 186, 0, 63, 20, 101, 34, 62, 180, 170, 93, 62, 123, 51, 232, 189, 165, 4, 176, 190, 81, 213, 157, 190, 165, 174, 149, 62, 44, 243, 179, 61, 208, 30, 184, 190, 179, 83, 45, 62, 12, 193, 167, 190, 252, 138, 4, 190, 222, 147, 246, 61, 65, 166, 67, 60, 105, 180, 171, 190, 129, 146, 43, 58, 177, 71, 6, 189, 236, 231, 44, 61, 203, 158, 114, 190, 0, 233, 81, 62, 224, 108, 20, 190, 215, 54, 59, 62, 212, 229, 174, 62, 197, 238, 172, 189, 245, 220, 143, 62, 244, 194, 71, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 109, 88, 62, 29, 204, 64, 189, 222, 239, 148, 62, 199, 110, 68, 61, 149, 149, 239, 189, 102, 37, 135, 61, 70, 88, 61, 62, 178, 172, 243, 61, 199, 235, 121, 190, 6, 146, 4, 60, 106, 172, 228, 189, 4, 113, 156, 61, 201, 101, 37, 61, 64, 248, 63, 61, 101, 214, 11, 62, 79, 211, 138, 189, 64, 127, 62, 60, 25, 177, 222, 189, 51, 33, 48, 62, 87, 12, 51, 190, 147, 184, 178, 189, 144, 125, 69, 189, 53, 146, 89, 62, 212, 18, 57, 190, 1, 133, 249, 61, 253, 134, 163, 62, 126, 104, 225, 61, 204, 127, 164, 62, 105, 55, 17, 62, 148, 66, 19, 62, 104, 24, 131, 62, 98, 81, 130, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {195, 182, 235, 62, 160, 129, 251, 59, 162, 107, 12, 63, 23, 209, 134, 62, 105, 133, 150, 61, 36, 124, 77, 191, 135, 226, 78, 190, 78, 6, 70, 191, 140, 69, 184, 62, 65, 191, 116, 61, 152, 192, 160, 189, 7, 24, 189, 62, 96, 153, 248, 62, 235, 178, 75, 62, 127, 108, 193, 190, 103, 224, 19, 60, 150, 156, 141, 190, 204, 94, 73, 61, 139, 45, 240, 188, 171, 246, 189, 61, 99, 208, 238, 189, 237, 81, 36, 191, 36, 136, 7, 63, 223, 39, 246, 62, 212, 23, 236, 190, 53, 206, 22, 190, 235, 243, 219, 189, 217, 11, 86, 63, 216, 148, 198, 190, 164, 124, 99, 190, 89, 92, 10, 63, 44, 119, 255, 62, 173, 74, 213, 187, 89, 76, 84, 61, 148, 132, 107, 190, 249, 71, 97, 190, 108, 136, 15, 190, 161, 103, 241, 189, 191, 101, 28, 189, 23, 55, 117, 62, 250, 183, 187, 61, 44, 241, 41, 62, 227, 63, 196, 61, 213, 133, 162, 61, 217, 96, 239, 61, 89, 147, 4, 61, 134, 213, 71, 190, 229, 156, 170, 190, 201, 225, 232, 189, 115, 112, 246, 61, 148, 58, 253, 60, 103, 91, 5, 62, 212, 240, 237, 59, 254, 6, 58, 61, 194, 195, 180, 62, 124, 232, 185, 62, 205, 203, 19, 62, 47, 238, 77, 190, 15, 252, 142, 59, 214, 176, 136, 190, 171, 43, 244, 188, 134, 186, 149, 190, 145, 98, 44, 61, 83, 33, 107, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {243, 242, 128, 189, 212, 195, 15, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {164, 118, 204, 189, 162, 106, 90, 191, 26, 133, 173, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {222, 226, 199, 63, 94, 109, 227, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0036/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}