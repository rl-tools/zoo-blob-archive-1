// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 226, 59, 63, 116, 218, 126, 63, 41, 31, 9, 63, 251, 40, 154, 190, 41, 24, 56, 190, 226, 50, 54, 191, 69, 29, 36, 62, 23, 24, 47, 191, 211, 154, 62, 190, 53, 179, 41, 190, 106, 43, 89, 63, 199, 196, 80, 190, 1, 131, 166, 190, 166, 171, 6, 191, 69, 83, 18, 62, 170, 198, 92, 188, 192, 226, 43, 63, 61, 235, 198, 190, 33, 136, 70, 62, 125, 48, 68, 190, 23, 152, 209, 190, 170, 129, 171, 62, 73, 215, 217, 62, 250, 74, 246, 190, 128, 132, 31, 63, 88, 157, 11, 191, 241, 18, 190, 190, 55, 138, 60, 63, 190, 228, 47, 62, 172, 68, 246, 61, 31, 67, 111, 61, 243, 207, 16, 63, 231, 237, 214, 62, 222, 101, 207, 61, 50, 30, 187, 189, 14, 185, 180, 62, 147, 158, 34, 191, 36, 14, 20, 189, 35, 111, 199, 62, 136, 82, 190, 190, 124, 89, 25, 191, 142, 119, 128, 189, 2, 55, 177, 190, 230, 133, 120, 61, 164, 208, 185, 190, 206, 7, 20, 190, 216, 225, 13, 191, 143, 197, 252, 62, 36, 131, 73, 190, 81, 137, 4, 63, 146, 37, 52, 191, 142, 79, 121, 62, 108, 225, 84, 190, 210, 83, 202, 190, 149, 168, 53, 62, 90, 194, 229, 62, 183, 131, 11, 191, 213, 127, 171, 62, 113, 186, 9, 191, 61, 16, 6, 189, 195, 9, 138, 62, 146, 179, 248, 62, 7, 35, 43, 189, 46, 3, 117, 190, 160, 124, 136, 190, 166, 43, 212, 62, 46, 116, 199, 62, 154, 178, 64, 62, 210, 83, 141, 190, 209, 55, 8, 63, 35, 83, 5, 63, 27, 127, 207, 190, 7, 91, 198, 190, 119, 232, 42, 63, 69, 167, 252, 190, 93, 219, 60, 190, 34, 41, 133, 61, 15, 89, 135, 61, 233, 250, 144, 190, 32, 91, 132, 62, 111, 179, 82, 191, 92, 230, 16, 62, 183, 100, 198, 62, 5, 97, 127, 61, 165, 246, 59, 63, 249, 78, 131, 191, 165, 58, 125, 190, 207, 193, 40, 63, 78, 13, 200, 62, 252, 187, 192, 62, 14, 122, 212, 190, 227, 87, 93, 191, 110, 193, 213, 61, 33, 209, 192, 190, 210, 136, 9, 63, 55, 195, 230, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {174, 250, 36, 191, 171, 93, 149, 61, 222, 198, 45, 191, 133, 202, 132, 62, 193, 165, 255, 62, 38, 111, 193, 189, 63, 78, 74, 190, 60, 250, 39, 61, 175, 118, 220, 61, 176, 50, 158, 62, 164, 88, 247, 190, 2, 194, 213, 190, 111, 19, 196, 190, 18, 130, 25, 63, 128, 213, 31, 191, 139, 56, 229, 61, 49, 128, 117, 189, 183, 197, 19, 191, 37, 142, 32, 190, 136, 182, 18, 63, 181, 12, 148, 61, 13, 3, 228, 190, 41, 162, 27, 63, 123, 187, 44, 63, 247, 170, 181, 190, 227, 76, 236, 62, 69, 58, 33, 61, 210, 44, 166, 62, 132, 103, 62, 61, 113, 224, 161, 62, 201, 132, 215, 61, 244, 84, 34, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {54, 205, 159, 190, 14, 8, 212, 60, 137, 49, 184, 60, 54, 70, 213, 189, 196, 72, 239, 60, 142, 191, 162, 190, 35, 37, 2, 62, 243, 178, 42, 62, 222, 161, 252, 61, 138, 23, 183, 61, 8, 149, 146, 190, 232, 184, 5, 61, 233, 89, 184, 62, 85, 187, 126, 61, 100, 52, 13, 62, 146, 180, 198, 62, 134, 199, 169, 190, 249, 93, 93, 61, 7, 153, 158, 62, 8, 83, 58, 62, 97, 151, 180, 190, 150, 39, 177, 189, 114, 38, 87, 60, 80, 134, 24, 189, 94, 156, 121, 190, 120, 115, 16, 62, 178, 214, 80, 190, 29, 53, 123, 62, 15, 35, 139, 61, 122, 142, 73, 190, 235, 190, 216, 61, 84, 28, 58, 190, 153, 191, 160, 189, 95, 161, 51, 60, 84, 41, 78, 190, 21, 247, 203, 189, 211, 122, 145, 60, 32, 92, 243, 189, 71, 28, 28, 190, 68, 26, 4, 190, 183, 174, 10, 62, 61, 14, 4, 60, 224, 214, 100, 189, 114, 10, 110, 190, 165, 160, 206, 58, 79, 106, 227, 188, 123, 111, 143, 189, 80, 76, 184, 61, 7, 17, 27, 62, 46, 251, 208, 61, 148, 222, 26, 62, 193, 114, 226, 58, 71, 253, 64, 61, 41, 184, 105, 189, 114, 228, 64, 190, 3, 225, 247, 61, 214, 60, 12, 190, 136, 0, 198, 188, 97, 78, 201, 189, 196, 107, 71, 61, 184, 48, 193, 187, 201, 108, 113, 187, 136, 159, 70, 190, 1, 196, 30, 190, 189, 12, 168, 190, 9, 119, 160, 190, 119, 244, 11, 189, 183, 210, 57, 190, 176, 194, 38, 62, 126, 48, 253, 190, 156, 131, 148, 62, 246, 15, 56, 62, 75, 193, 166, 61, 116, 248, 187, 61, 204, 180, 69, 188, 234, 171, 253, 60, 176, 48, 30, 188, 226, 182, 25, 62, 62, 225, 196, 189, 35, 255, 112, 61, 78, 4, 228, 190, 183, 8, 63, 189, 112, 182, 111, 189, 184, 230, 135, 61, 156, 81, 124, 190, 24, 40, 1, 188, 10, 126, 209, 189, 33, 111, 115, 189, 43, 52, 170, 190, 136, 110, 27, 62, 242, 6, 151, 190, 164, 167, 228, 188, 120, 26, 35, 62, 233, 213, 140, 189, 60, 98, 242, 189, 63, 72, 237, 61, 182, 13, 8, 190, 101, 158, 152, 61, 102, 65, 44, 190, 244, 145, 4, 61, 228, 124, 4, 189, 169, 15, 186, 190, 192, 233, 239, 61, 234, 89, 201, 61, 42, 227, 117, 62, 2, 116, 222, 188, 219, 239, 16, 61, 157, 44, 130, 190, 101, 46, 21, 62, 78, 149, 129, 189, 191, 176, 35, 189, 143, 85, 61, 62, 36, 63, 23, 190, 79, 227, 202, 61, 182, 180, 90, 62, 186, 98, 47, 62, 232, 246, 56, 190, 111, 87, 140, 61, 88, 127, 68, 190, 161, 233, 109, 190, 131, 218, 40, 190, 28, 181, 28, 62, 152, 123, 220, 184, 13, 182, 4, 61, 41, 242, 175, 60, 166, 202, 251, 189, 159, 156, 112, 61, 255, 125, 11, 62, 227, 225, 106, 61, 110, 165, 46, 188, 162, 21, 54, 190, 67, 208, 177, 189, 178, 107, 167, 189, 219, 113, 12, 62, 179, 109, 6, 62, 215, 182, 41, 62, 221, 238, 78, 189, 85, 145, 195, 189, 55, 153, 31, 190, 148, 110, 218, 188, 76, 225, 38, 62, 224, 185, 238, 60, 204, 177, 229, 187, 85, 179, 176, 61, 63, 217, 61, 190, 17, 30, 18, 61, 4, 129, 2, 189, 206, 48, 4, 190, 147, 71, 9, 189, 34, 186, 17, 190, 110, 254, 88, 189, 104, 7, 53, 190, 11, 3, 141, 189, 173, 190, 37, 190, 23, 248, 146, 61, 91, 41, 190, 189, 238, 169, 180, 59, 151, 244, 87, 61, 85, 60, 223, 61, 47, 113, 155, 60, 90, 153, 1, 191, 189, 248, 99, 189, 6, 148, 172, 60, 152, 58, 34, 191, 204, 34, 79, 62, 99, 161, 148, 190, 182, 200, 180, 61, 53, 162, 109, 62, 120, 15, 233, 61, 44, 178, 217, 190, 226, 91, 166, 190, 92, 246, 153, 190, 141, 196, 92, 62, 202, 82, 19, 62, 211, 2, 82, 62, 221, 187, 92, 62, 59, 163, 132, 190, 52, 27, 21, 62, 127, 199, 130, 61, 55, 77, 126, 62, 138, 169, 253, 189, 192, 239, 114, 186, 98, 83, 120, 190, 179, 223, 217, 60, 171, 14, 69, 190, 97, 80, 158, 61, 174, 175, 172, 190, 25, 220, 171, 189, 7, 50, 135, 60, 19, 92, 185, 189, 202, 111, 205, 60, 194, 167, 149, 188, 125, 13, 24, 62, 86, 7, 1, 60, 226, 80, 23, 190, 74, 29, 231, 61, 139, 2, 124, 62, 193, 5, 97, 62, 70, 165, 200, 189, 219, 201, 30, 190, 43, 24, 37, 189, 174, 188, 166, 189, 71, 119, 76, 62, 252, 202, 49, 61, 110, 14, 145, 189, 147, 27, 76, 62, 84, 114, 146, 190, 173, 184, 60, 190, 162, 115, 130, 62, 30, 106, 216, 189, 183, 126, 37, 189, 203, 113, 13, 61, 46, 149, 27, 62, 41, 126, 48, 62, 198, 23, 219, 189, 215, 157, 24, 189, 167, 173, 52, 62, 249, 233, 132, 62, 113, 132, 127, 61, 41, 32, 25, 188, 27, 24, 231, 189, 158, 3, 48, 62, 94, 68, 8, 62, 101, 142, 184, 189, 92, 248, 121, 62, 45, 188, 85, 62, 175, 216, 64, 191, 138, 30, 121, 62, 172, 162, 193, 189, 59, 49, 233, 62, 132, 158, 14, 190, 100, 133, 93, 190, 166, 74, 138, 190, 25, 143, 37, 62, 179, 180, 49, 62, 131, 239, 109, 62, 200, 120, 144, 190, 135, 24, 4, 62, 232, 70, 9, 190, 48, 247, 142, 190, 203, 176, 29, 61, 7, 21, 4, 191, 213, 0, 193, 190, 75, 184, 82, 62, 235, 9, 122, 62, 238, 13, 246, 61, 24, 185, 16, 62, 236, 25, 171, 62, 250, 153, 101, 62, 174, 30, 91, 189, 219, 254, 25, 62, 96, 142, 149, 61, 155, 141, 9, 191, 34, 74, 121, 61, 83, 111, 18, 61, 172, 35, 132, 61, 120, 125, 2, 190, 177, 216, 196, 61, 30, 177, 136, 61, 64, 89, 56, 62, 92, 99, 199, 190, 68, 239, 113, 62, 59, 108, 19, 62, 179, 165, 136, 188, 124, 236, 103, 190, 145, 212, 196, 190, 34, 19, 26, 190, 78, 52, 12, 62, 116, 124, 250, 190, 7, 47, 58, 190, 128, 137, 244, 61, 100, 26, 162, 190, 137, 166, 65, 62, 228, 243, 117, 189, 96, 208, 46, 62, 115, 35, 215, 190, 128, 90, 166, 62, 37, 144, 39, 190, 157, 164, 59, 189, 140, 226, 60, 62, 86, 151, 209, 62, 139, 248, 101, 61, 94, 103, 140, 62, 113, 81, 135, 62, 68, 133, 5, 189, 56, 5, 29, 62, 38, 100, 44, 190, 71, 233, 107, 61, 41, 92, 136, 60, 37, 27, 226, 61, 205, 192, 172, 61, 10, 104, 103, 189, 128, 233, 240, 189, 158, 110, 204, 189, 207, 48, 7, 190, 229, 181, 45, 59, 8, 212, 33, 190, 74, 209, 30, 190, 213, 168, 83, 61, 113, 113, 33, 190, 34, 25, 30, 62, 244, 249, 22, 190, 38, 126, 131, 189, 168, 82, 138, 189, 92, 7, 17, 190, 103, 138, 247, 61, 217, 176, 132, 189, 147, 202, 224, 59, 110, 190, 60, 190, 229, 244, 28, 62, 255, 14, 39, 62, 57, 204, 133, 61, 163, 117, 155, 188, 32, 240, 49, 61, 180, 123, 228, 188, 137, 251, 169, 189, 103, 183, 212, 189, 240, 189, 61, 190, 184, 225, 35, 190, 109, 38, 140, 60, 250, 31, 145, 61, 20, 13, 23, 190, 225, 177, 200, 189, 146, 7, 35, 190, 72, 78, 1, 190, 122, 212, 151, 61, 39, 53, 158, 61, 251, 224, 183, 61, 65, 8, 51, 61, 45, 79, 135, 189, 82, 198, 183, 61, 0, 225, 212, 189, 137, 168, 189, 189, 199, 42, 199, 189, 15, 250, 127, 59, 75, 99, 234, 189, 132, 255, 45, 62, 185, 236, 33, 190, 221, 46, 190, 188, 252, 234, 11, 62, 235, 42, 31, 62, 209, 3, 216, 60, 15, 5, 48, 190, 156, 20, 18, 190, 120, 68, 43, 62, 1, 49, 154, 189, 207, 130, 50, 188, 102, 64, 171, 60, 6, 220, 176, 189, 66, 128, 139, 189, 191, 206, 119, 188, 5, 46, 25, 186, 218, 172, 103, 61, 168, 187, 138, 188, 98, 217, 204, 189, 40, 224, 169, 61, 126, 134, 71, 190, 185, 65, 27, 62, 116, 160, 7, 62, 155, 225, 174, 60, 49, 230, 84, 61, 86, 134, 171, 190, 126, 252, 8, 190, 101, 120, 38, 186, 113, 137, 178, 190, 34, 121, 31, 190, 184, 34, 36, 61, 210, 76, 17, 60, 227, 165, 149, 62, 32, 185, 159, 59, 246, 82, 43, 62, 154, 31, 186, 190, 188, 62, 147, 62, 194, 43, 239, 61, 156, 92, 47, 62, 144, 1, 29, 62, 244, 132, 225, 62, 236, 211, 194, 60, 61, 158, 138, 61, 207, 42, 104, 62, 244, 173, 0, 190, 67, 188, 61, 190, 71, 50, 126, 189, 169, 6, 253, 188, 123, 138, 150, 190, 126, 30, 21, 190, 220, 151, 181, 60, 201, 17, 18, 190, 250, 140, 241, 61, 128, 147, 153, 190, 171, 68, 7, 62, 138, 64, 153, 62, 221, 245, 128, 62, 46, 92, 186, 61, 247, 178, 158, 189, 52, 127, 119, 189, 16, 227, 103, 62, 208, 26, 138, 59, 197, 152, 156, 62, 42, 2, 190, 60, 198, 0, 65, 189, 147, 151, 152, 60, 252, 236, 116, 62, 228, 144, 75, 62, 152, 195, 220, 190, 155, 111, 136, 189, 17, 28, 171, 189, 235, 237, 50, 190, 24, 170, 212, 190, 151, 196, 33, 62, 251, 147, 145, 60, 58, 91, 157, 61, 214, 16, 124, 62, 221, 51, 48, 189, 181, 12, 70, 188, 85, 240, 7, 62, 46, 158, 140, 61, 150, 72, 28, 62, 5, 80, 208, 189, 99, 136, 132, 189, 233, 235, 136, 189, 146, 31, 7, 60, 215, 132, 61, 62, 4, 70, 170, 189, 17, 52, 255, 61, 208, 172, 245, 189, 223, 159, 60, 61, 118, 51, 249, 61, 82, 209, 84, 190, 52, 150, 142, 189, 176, 38, 209, 61, 126, 81, 46, 190, 88, 239, 55, 62, 189, 192, 80, 190, 190, 144, 231, 61, 70, 183, 104, 61, 210, 13, 239, 189, 36, 110, 28, 190, 78, 129, 22, 62, 109, 104, 67, 61, 112, 33, 141, 61, 198, 121, 111, 60, 14, 242, 59, 61, 63, 175, 86, 62, 100, 118, 202, 61, 74, 60, 93, 190, 7, 157, 178, 189, 103, 41, 71, 190, 100, 85, 123, 62, 234, 212, 162, 62, 254, 34, 154, 190, 158, 34, 59, 62, 5, 163, 38, 62, 146, 166, 221, 62, 68, 117, 132, 190, 124, 160, 21, 190, 69, 32, 89, 189, 253, 58, 103, 62, 135, 35, 226, 61, 32, 74, 180, 61, 86, 188, 24, 190, 239, 63, 7, 190, 88, 232, 144, 190, 212, 119, 40, 190, 249, 219, 136, 61, 102, 242, 88, 190, 153, 197, 171, 190, 49, 160, 109, 62, 89, 122, 178, 61, 106, 49, 47, 189, 69, 65, 132, 62, 129, 134, 49, 62, 9, 21, 242, 62, 67, 230, 128, 61, 149, 106, 110, 62, 141, 79, 17, 190, 221, 115, 132, 190, 57, 102, 99, 62, 161, 180, 188, 190, 245, 50, 87, 61, 56, 16, 90, 189, 240, 238, 161, 189, 18, 163, 47, 189, 52, 132, 37, 62, 225, 141, 41, 62, 169, 212, 163, 189, 109, 155, 224, 59, 88, 127, 250, 61, 16, 95, 94, 62, 211, 174, 36, 62, 109, 25, 77, 61, 174, 238, 68, 61, 177, 24, 131, 61, 146, 154, 100, 189, 137, 145, 86, 187, 160, 170, 75, 61, 78, 97, 43, 62, 47, 95, 40, 189, 38, 157, 192, 189, 143, 86, 19, 62, 82, 20, 130, 61, 145, 45, 199, 189, 105, 78, 188, 189, 79, 235, 69, 189, 221, 251, 40, 62, 218, 203, 143, 62, 143, 109, 176, 188, 78, 47, 38, 62, 54, 108, 241, 60, 89, 205, 5, 62, 32, 115, 223, 189, 116, 223, 182, 61, 201, 79, 245, 61, 178, 129, 68, 62, 181, 12, 6, 190, 186, 38, 90, 189, 249, 116, 131, 62, 250, 229, 93, 61, 163, 188, 252, 60, 224, 5, 200, 188, 254, 183, 46, 190, 63, 208, 108, 62, 196, 80, 23, 62, 183, 93, 181, 189, 158, 102, 213, 190, 164, 83, 236, 189, 202, 81, 63, 190, 183, 55, 174, 190, 53, 247, 237, 61, 106, 159, 74, 190, 29, 148, 51, 60, 104, 240, 255, 61, 245, 180, 201, 59, 203, 103, 102, 189, 184, 144, 58, 62, 95, 130, 63, 62, 48, 124, 152, 60, 16, 204, 105, 61, 90, 39, 101, 62, 152, 91, 140, 60, 53, 177, 88, 189, 254, 84, 160, 189, 205, 57, 164, 189, 140, 51, 21, 62, 52, 5, 246, 189, 135, 85, 39, 62, 68, 236, 10, 190, 94, 98, 191, 189, 246, 22, 13, 190, 129, 200, 100, 61, 189, 0, 251, 61, 36, 234, 123, 61, 247, 116, 19, 61, 165, 141, 146, 189, 115, 229, 12, 61, 138, 121, 155, 61, 170, 152, 130, 189, 219, 41, 0, 190, 186, 39, 209, 61, 202, 58, 120, 189, 223, 164, 250, 60, 143, 196, 243, 60, 75, 33, 31, 190, 36, 43, 240, 189, 141, 135, 18, 62, 103, 250, 132, 189, 12, 187, 249, 61, 181, 221, 165, 189, 91, 168, 28, 190, 92, 46, 36, 62, 99, 73, 246, 189, 215, 73, 243, 188, 104, 138, 18, 190, 50, 159, 18, 61, 249, 12, 23, 61, 243, 169, 143, 60, 101, 105, 50, 190, 202, 52, 33, 190, 250, 36, 209, 61, 172, 116, 24, 190, 11, 40, 48, 190, 79, 113, 182, 61, 241, 122, 154, 189, 69, 34, 192, 61, 151, 51, 191, 189, 146, 179, 9, 189, 7, 47, 69, 189, 125, 22, 44, 190, 122, 135, 57, 61, 41, 247, 155, 61, 250, 251, 151, 61, 9, 85, 145, 189, 40, 107, 14, 190, 46, 141, 42, 62, 66, 40, 35, 190, 239, 60, 206, 189, 12, 159, 40, 189, 208, 114, 165, 59, 66, 123, 231, 59, 209, 0, 133, 189, 40, 165, 157, 189, 107, 235, 142, 189, 41, 161, 14, 190, 61, 6, 233, 189, 87, 185, 59, 61, 213, 221, 225, 189, 145, 164, 198, 61, 79, 19, 130, 189, 92, 1, 5, 61, 160, 208, 27, 59, 55, 237, 2, 189, 247, 148, 195, 61, 49, 78, 54, 190, 221, 30, 177, 61, 216, 142, 37, 189, 16, 125, 103, 61, 198, 190, 54, 189, 1, 255, 241, 60, 21, 246, 1, 62, 64, 233, 60, 190, 65, 235, 66, 188, 178, 189, 210, 189, 171, 94, 29, 190, 122, 25, 8, 190, 64, 121, 173, 61, 0, 159, 71, 186, 4, 220, 151, 189, 104, 213, 69, 190, 158, 130, 186, 61, 114, 47, 5, 190, 235, 180, 59, 189, 209, 123, 114, 60, 111, 191, 130, 190, 109, 152, 146, 61, 20, 147, 50, 190, 208, 0, 119, 189, 137, 13, 52, 189, 117, 153, 96, 190, 13, 178, 142, 61, 88, 30, 16, 187, 96, 147, 17, 190, 128, 15, 5, 189, 197, 236, 198, 189, 78, 184, 4, 190, 213, 150, 207, 189, 228, 87, 45, 190, 6, 95, 96, 189, 150, 224, 63, 187, 103, 185, 130, 189, 83, 115, 231, 189, 35, 200, 244, 189, 147, 244, 159, 61, 127, 237, 128, 189, 167, 147, 9, 62, 60, 111, 176, 189, 171, 4, 238, 189, 5, 224, 154, 61, 26, 190, 17, 189, 181, 125, 38, 190, 163, 101, 145, 188, 115, 76, 199, 61, 84, 221, 111, 60, 50, 150, 130, 188, 71, 29, 158, 61, 220, 230, 0, 61, 224, 162, 83, 59, 125, 52, 48, 190, 222, 0, 201, 186, 4, 216, 16, 61, 43, 234, 39, 60, 1, 8, 142, 61, 163, 126, 163, 189, 233, 118, 41, 190, 98, 52, 35, 187, 66, 104, 1, 62, 170, 74, 9, 191, 83, 139, 47, 62, 64, 159, 203, 60, 122, 166, 21, 61, 245, 227, 147, 190, 43, 27, 129, 60, 183, 144, 165, 190, 133, 72, 131, 189, 121, 173, 31, 190, 40, 0, 207, 61, 52, 146, 167, 62, 141, 80, 51, 190, 117, 67, 191, 62, 127, 102, 57, 189, 60, 60, 3, 190, 113, 242, 225, 189, 231, 21, 150, 62, 140, 33, 164, 190, 165, 29, 33, 62, 212, 138, 95, 190, 59, 204, 228, 189, 233, 47, 76, 190, 24, 168, 172, 189, 59, 252, 76, 189, 208, 114, 70, 190, 139, 94, 138, 61, 182, 152, 136, 189, 146, 199, 169, 62, 77, 82, 121, 189, 193, 4, 106, 189, 23, 245, 149, 190, 229, 248, 79, 62, 92, 74, 189, 188, 198, 222, 1, 62, 128, 244, 16, 191, 144, 149, 76, 62, 96, 91, 183, 61, 49, 86, 223, 61, 170, 9, 157, 187, 36, 190, 108, 61, 41, 59, 210, 61, 19, 33, 150, 189, 176, 181, 134, 62, 98, 15, 80, 61, 47, 199, 252, 61, 11, 199, 48, 191, 120, 226, 82, 62, 153, 223, 227, 61, 232, 189, 46, 61, 152, 253, 132, 190, 158, 100, 32, 190, 145, 205, 167, 61, 193, 237, 168, 190, 246, 54, 232, 190, 202, 125, 156, 189, 71, 187, 210, 190, 40, 208, 50, 62, 219, 36, 93, 62, 211, 224, 86, 60, 36, 169, 129, 62, 78, 108, 8, 62, 77, 161, 246, 61, 173, 141, 104, 189, 202, 91, 8, 62, 153, 248, 2, 190, 249, 90, 56, 190, 205, 106, 255, 189, 13, 184, 6, 62, 224, 126, 73, 62, 242, 183, 110, 62, 176, 89, 142, 62, 164, 169, 105, 62, 175, 19, 105, 61, 73, 222, 216, 189, 147, 188, 152, 189, 135, 217, 106, 61, 71, 206, 40, 189, 181, 236, 187, 60, 17, 161, 80, 62, 85, 68, 186, 61, 77, 135, 225, 61, 60, 201, 235, 189, 110, 6, 241, 188, 98, 198, 239, 189, 206, 233, 65, 190, 122, 34, 178, 190, 90, 70, 163, 190, 36, 51, 125, 61, 208, 55, 89, 61, 172, 140, 104, 62, 88, 198, 13, 62, 209, 40, 196, 59, 100, 95, 16, 190, 39, 15, 136, 62, 107, 160, 102, 62, 52, 96, 52, 61, 217, 74, 25, 62, 127, 216, 220, 61, 59, 236, 79, 59, 219, 167, 158, 189, 35, 17, 231, 188, 53, 249, 63, 61, 88, 175, 57, 60, 148, 43, 54, 62, 226, 217, 251, 189, 113, 77, 252, 189, 156, 16, 75, 189, 239, 146, 185, 188, 133, 116, 95, 190, 29, 182, 241, 61, 187, 242, 242, 61, 119, 235, 188, 188, 126, 33, 123, 61, 139, 26, 217, 61, 120, 221, 166, 61, 150, 189, 111, 61, 185, 11, 64, 190, 124, 153, 22, 62, 142, 140, 178, 61, 46, 250, 18, 189, 82, 11, 203, 189, 243, 255, 70, 61, 201, 234, 76, 61, 128, 123, 23, 188, 220, 45, 205, 189, 140, 97, 0, 190, 122, 99, 73, 62, 188, 82, 133, 190, 198, 244, 200, 189, 32, 32, 97, 62, 61, 103, 140, 62, 94, 123, 147, 60, 128, 249, 36, 189, 23, 27, 164, 60, 176, 238, 96, 62, 214, 235, 82, 61, 40, 146, 148, 189, 224, 230, 184, 189, 50, 233, 228, 61, 216, 133, 81, 190, 188, 189, 202, 189, 211, 255, 13, 62, 26, 130, 36, 190, 47, 147, 108, 190, 194, 97, 120, 62, 254, 201, 84, 62, 152, 30, 58, 62, 194, 97, 46, 62, 237, 228, 174, 60, 227, 231, 152, 189, 106, 118, 110, 62, 243, 49, 68, 62, 184, 145, 240, 61, 180, 223, 182, 189, 31, 101, 130, 62, 158, 149, 139, 189, 51, 41, 12, 61, 79, 166, 190, 189, 201, 12, 242, 189, 227, 29, 156, 189, 167, 186, 89, 189, 214, 172, 220, 61, 45, 125, 29, 61, 213, 65, 173, 189, 185, 44, 53, 188, 110, 46, 198, 61, 3, 143, 166, 189, 231, 157, 247, 188, 84, 14, 61, 60, 160, 46, 34, 62, 58, 168, 143, 61, 162, 129, 24, 190, 66, 40, 86, 60, 0, 28, 4, 190, 177, 160, 223, 61, 178, 205, 174, 189, 1, 242, 75, 190, 212, 163, 24, 62, 161, 134, 174, 189, 250, 82, 54, 190, 203, 223, 58, 190, 142, 233, 248, 61, 174, 226, 115, 189, 26, 97, 234, 189, 217, 118, 1, 61, 189, 35, 198, 189, 95, 176, 82, 190, 210, 167, 98, 190, 199, 230, 12, 190, 128, 45, 179, 190, 145, 142, 175, 190, 252, 189, 74, 190, 108, 156, 108, 58, 29, 208, 155, 62, 250, 37, 55, 191, 187, 247, 137, 61, 218, 242, 15, 189, 199, 41, 23, 62, 74, 44, 60, 189, 76, 21, 54, 190, 0, 99, 68, 190, 236, 85, 216, 61, 176, 80, 31, 61, 98, 157, 121, 61, 147, 112, 137, 62, 219, 13, 75, 191, 229, 58, 240, 188, 62, 222, 247, 189, 205, 139, 153, 188, 101, 242, 204, 190, 161, 72, 132, 190, 71, 0, 192, 187, 108, 39, 67, 190, 132, 6, 230, 190, 225, 199, 152, 59, 87, 99, 237, 190, 78, 42, 89, 187, 14, 197, 160, 61, 241, 191, 52, 60, 93, 88, 108, 62, 54, 93, 34, 62, 90, 0, 147, 187, 53, 195, 32, 62, 12, 195, 159, 190, 197, 7, 141, 62, 0, 109, 68, 189, 180, 213, 212, 62, 242, 170, 148, 190, 228, 225, 207, 190, 155, 173, 151, 60, 1, 245, 99, 62, 195, 169, 239, 61, 118, 126, 140, 58, 93, 215, 232, 189, 10, 220, 178, 188, 35, 161, 135, 190, 36, 252, 67, 190, 74, 163, 155, 62, 82, 85, 181, 190, 21, 15, 187, 190, 140, 55, 196, 59, 135, 119, 131, 62, 143, 50, 70, 62, 87, 200, 75, 62, 192, 18, 192, 62, 144, 62, 2, 63, 106, 190, 107, 60, 154, 137, 94, 62, 19, 232, 200, 60, 180, 5, 11, 190, 254, 191, 99, 62, 96, 248, 136, 190, 214, 219, 11, 62, 253, 148, 113, 61, 199, 144, 166, 61, 44, 172, 90, 188, 121, 105, 43, 62, 93, 73, 51, 62, 171, 28, 17, 61, 112, 180, 31, 190, 20, 206, 119, 188, 27, 73, 49, 62, 87, 126, 139, 62, 50, 115, 252, 188, 230, 173, 246, 188, 11, 162, 36, 191, 153, 230, 49, 62, 100, 176, 166, 61, 228, 104, 81, 190, 155, 99, 139, 60, 159, 237, 205, 189, 119, 9, 253, 188, 82, 152, 154, 61, 27, 79, 66, 62, 25, 210, 237, 187, 244, 185, 102, 62, 66, 213, 39, 62, 64, 169, 200, 61, 87, 1, 176, 189, 179, 64, 16, 62, 111, 44, 82, 60, 70, 4, 116, 61, 246, 232, 199, 188, 115, 168, 160, 189, 64, 151, 204, 188, 113, 219, 181, 190, 97, 43, 173, 189, 6, 126, 232, 60, 61, 75, 9, 189, 120, 226, 130, 62, 103, 109, 135, 190, 232, 42, 1, 61, 177, 49, 145, 62, 62, 184, 144, 61, 79, 31, 119, 188, 244, 68, 233, 189, 99, 197, 76, 190, 77, 22, 150, 62, 176, 182, 207, 60, 52, 164, 160, 60, 197, 66, 152, 62, 109, 54, 197, 190, 50, 73, 133, 62, 113, 183, 132, 62, 73, 99, 122, 62, 217, 209, 132, 190, 99, 107, 248, 189, 116, 39, 224, 189, 194, 134, 10, 61, 121, 50, 205, 190, 72, 246, 83, 62, 251, 57, 164, 190, 116, 88, 125, 62, 85, 70, 156, 62, 50, 101, 53, 190, 81, 181, 21, 61, 197, 121, 43, 190, 67, 113, 145, 190, 127, 79, 191, 189, 121, 191, 33, 62, 156, 209, 175, 61, 14, 207, 202, 61, 171, 122, 12, 191, 65, 18, 197, 62, 222, 163, 26, 62, 231, 242, 113, 62, 26, 34, 200, 189, 241, 92, 132, 190, 88, 186, 128, 190, 129, 160, 88, 62, 2, 59, 72, 189, 28, 89, 234, 189, 202, 46, 60, 62, 14, 59, 211, 190, 72, 41, 53, 188, 100, 203, 249, 61, 205, 251, 32, 61, 86, 57, 109, 190, 85, 72, 84, 189, 187, 134, 146, 189, 42, 150, 3, 189, 204, 246, 146, 190, 189, 129, 196, 61, 89, 3, 103, 190, 251, 184, 202, 61, 233, 10, 162, 62, 118, 184, 51, 60, 137, 218, 33, 62, 46, 130, 181, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 143, 24, 62, 10, 40, 20, 189, 40, 57, 139, 62, 250, 96, 65, 189, 191, 201, 215, 189, 195, 29, 147, 189, 95, 219, 14, 62, 210, 136, 22, 61, 40, 181, 19, 190, 6, 146, 4, 60, 251, 23, 140, 189, 244, 28, 68, 60, 154, 120, 229, 186, 183, 138, 88, 61, 84, 165, 147, 61, 78, 37, 130, 61, 216, 83, 162, 187, 25, 177, 222, 189, 51, 33, 48, 62, 87, 12, 51, 190, 147, 184, 178, 189, 244, 174, 234, 60, 140, 163, 101, 62, 230, 148, 66, 59, 246, 183, 247, 61, 129, 222, 147, 62, 108, 135, 234, 61, 10, 69, 156, 62, 243, 166, 0, 62, 208, 233, 248, 61, 58, 247, 118, 62, 69, 117, 48, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 241, 187, 62, 101, 76, 128, 60, 61, 34, 249, 62, 186, 144, 56, 61, 216, 180, 151, 61, 139, 12, 0, 191, 231, 149, 51, 190, 69, 59, 247, 190, 255, 121, 184, 62, 65, 191, 116, 61, 217, 216, 154, 188, 239, 30, 180, 62, 231, 57, 182, 62, 253, 156, 209, 61, 3, 44, 180, 190, 3, 211, 71, 59, 233, 102, 76, 190, 204, 94, 73, 61, 139, 45, 240, 188, 171, 246, 189, 61, 99, 208, 238, 189, 242, 37, 23, 191, 203, 43, 220, 62, 240, 107, 253, 61, 84, 18, 59, 190, 200, 15, 255, 189, 75, 199, 223, 189, 124, 168, 58, 63, 33, 156, 190, 190, 55, 63, 55, 190, 13, 110, 227, 62, 228, 97, 212, 62, 245, 216, 180, 187, 46, 234, 173, 60, 32, 216, 17, 190, 250, 214, 183, 189, 124, 211, 15, 190, 6, 78, 200, 61, 114, 225, 246, 189, 79, 229, 162, 61, 30, 163, 18, 62, 44, 241, 41, 62, 116, 224, 27, 62, 246, 110, 205, 61, 59, 72, 252, 188, 7, 58, 21, 189, 179, 207, 10, 190, 8, 144, 93, 190, 108, 239, 149, 189, 115, 112, 246, 61, 148, 58, 253, 60, 103, 91, 5, 62, 212, 240, 237, 59, 137, 99, 8, 62, 217, 57, 134, 60, 177, 170, 137, 62, 179, 246, 134, 61, 6, 43, 14, 190, 185, 253, 218, 59, 203, 34, 147, 190, 232, 172, 31, 60, 111, 89, 40, 190, 240, 249, 172, 61, 91, 160, 166, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 46, 29, 189, 242, 26, 136, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {219, 58, 116, 191, 242, 118, 55, 191, 89, 113, 167, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {187, 47, 98, 63, 102, 81, 223, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0036/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}