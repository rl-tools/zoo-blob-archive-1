// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 120, 96, 63, 72, 137, 175, 63, 66, 155, 201, 62, 7, 203, 101, 190, 168, 194, 196, 191, 22, 180, 18, 191, 67, 81, 81, 62, 90, 245, 127, 191, 153, 161, 54, 189, 85, 67, 74, 190, 62, 183, 84, 63, 229, 48, 17, 190, 133, 161, 136, 190, 71, 164, 188, 190, 5, 38, 163, 61, 135, 185, 12, 62, 28, 231, 9, 63, 138, 143, 157, 190, 46, 34, 166, 61, 247, 207, 128, 191, 148, 210, 166, 190, 130, 140, 200, 62, 140, 52, 149, 62, 41, 60, 0, 191, 222, 122, 41, 63, 53, 112, 144, 191, 81, 99, 119, 190, 93, 57, 96, 63, 162, 124, 87, 62, 46, 139, 144, 60, 239, 233, 152, 190, 139, 166, 130, 63, 233, 206, 190, 62, 156, 205, 245, 62, 24, 90, 128, 190, 12, 139, 177, 62, 59, 137, 68, 191, 218, 233, 134, 63, 51, 230, 183, 62, 236, 31, 39, 191, 254, 209, 37, 191, 112, 175, 217, 188, 43, 143, 126, 190, 91, 3, 248, 61, 232, 181, 168, 190, 0, 35, 102, 189, 235, 119, 102, 190, 116, 138, 0, 63, 35, 249, 161, 60, 202, 106, 190, 61, 5, 132, 28, 191, 244, 196, 79, 63, 52, 139, 4, 191, 71, 89, 166, 190, 207, 100, 154, 62, 138, 135, 227, 62, 38, 15, 9, 191, 109, 243, 128, 62, 74, 104, 101, 191, 202, 53, 86, 189, 184, 197, 121, 62, 80, 29, 96, 63, 83, 163, 42, 62, 192, 188, 140, 188, 143, 148, 225, 61, 217, 201, 189, 62, 15, 94, 146, 62, 24, 6, 168, 190, 122, 200, 31, 190, 57, 160, 218, 62, 24, 89, 39, 62, 16, 168, 124, 190, 213, 173, 40, 191, 44, 228, 146, 190, 226, 17, 6, 191, 5, 244, 172, 190, 114, 140, 195, 189, 229, 132, 82, 61, 130, 150, 161, 190, 214, 50, 64, 191, 227, 140, 65, 191, 75, 245, 17, 62, 145, 119, 27, 63, 156, 39, 118, 61, 253, 55, 101, 63, 159, 240, 153, 191, 82, 114, 130, 190, 55, 72, 14, 63, 67, 29, 77, 63, 13, 254, 215, 62, 174, 231, 13, 191, 92, 133, 47, 191, 240, 180, 9, 61, 225, 98, 38, 191, 37, 44, 108, 63, 71, 41, 15, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 242, 16, 191, 208, 183, 85, 190, 183, 127, 37, 191, 239, 42, 114, 62, 28, 85, 209, 62, 230, 170, 117, 190, 95, 3, 12, 190, 59, 176, 126, 61, 126, 157, 8, 61, 32, 235, 230, 62, 248, 78, 162, 190, 83, 223, 231, 190, 197, 227, 220, 190, 181, 14, 46, 63, 172, 50, 74, 191, 243, 64, 149, 61, 22, 121, 187, 190, 246, 233, 86, 191, 191, 146, 129, 190, 130, 138, 17, 63, 179, 144, 199, 61, 220, 245, 31, 191, 230, 34, 22, 63, 222, 157, 65, 63, 47, 140, 183, 190, 79, 48, 7, 63, 112, 37, 139, 188, 171, 110, 195, 62, 161, 213, 70, 189, 163, 19, 143, 62, 61, 143, 3, 63, 77, 248, 82, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {133, 55, 212, 190, 90, 224, 115, 189, 16, 243, 48, 190, 153, 235, 56, 189, 110, 94, 131, 60, 104, 28, 182, 190, 247, 200, 85, 62, 201, 100, 32, 62, 52, 243, 49, 62, 40, 14, 17, 62, 64, 174, 206, 190, 220, 246, 223, 188, 183, 251, 240, 62, 16, 200, 21, 62, 184, 139, 0, 60, 249, 158, 172, 62, 42, 98, 166, 190, 210, 37, 122, 61, 116, 120, 139, 62, 24, 77, 129, 62, 169, 25, 6, 191, 159, 180, 43, 189, 232, 45, 142, 61, 11, 131, 167, 60, 30, 247, 173, 190, 236, 13, 48, 62, 249, 102, 107, 190, 212, 57, 91, 62, 84, 202, 22, 62, 204, 71, 142, 190, 238, 197, 62, 62, 104, 43, 78, 190, 186, 243, 205, 189, 83, 1, 55, 187, 108, 175, 88, 190, 87, 79, 219, 189, 133, 220, 11, 60, 250, 123, 254, 189, 9, 24, 32, 190, 163, 122, 13, 190, 29, 232, 4, 62, 86, 221, 148, 60, 224, 214, 100, 189, 143, 29, 110, 190, 165, 160, 206, 58, 66, 181, 67, 189, 21, 171, 195, 189, 181, 123, 201, 61, 230, 113, 17, 62, 136, 102, 198, 61, 179, 55, 23, 62, 199, 191, 245, 186, 133, 78, 41, 61, 41, 184, 105, 189, 123, 194, 74, 190, 82, 148, 226, 61, 253, 8, 29, 190, 42, 220, 18, 189, 22, 223, 224, 189, 25, 223, 16, 61, 76, 201, 233, 187, 111, 209, 142, 188, 142, 194, 79, 190, 14, 225, 47, 190, 0, 77, 173, 190, 75, 53, 79, 191, 136, 242, 183, 190, 83, 171, 235, 61, 89, 182, 130, 61, 196, 204, 1, 190, 252, 33, 219, 62, 57, 246, 166, 62, 221, 225, 3, 62, 15, 244, 19, 62, 5, 176, 23, 189, 207, 169, 62, 60, 96, 125, 251, 61, 91, 115, 124, 60, 179, 7, 225, 59, 31, 92, 255, 60, 93, 1, 86, 190, 158, 198, 238, 61, 114, 1, 233, 61, 127, 117, 65, 189, 39, 219, 175, 190, 16, 122, 190, 61, 118, 107, 132, 189, 106, 243, 63, 61, 190, 215, 129, 62, 151, 78, 243, 61, 30, 157, 161, 190, 25, 140, 162, 61, 177, 45, 101, 62, 185, 151, 149, 189, 197, 57, 102, 190, 34, 174, 53, 62, 253, 211, 218, 61, 197, 143, 120, 188, 241, 67, 42, 190, 214, 32, 59, 62, 192, 96, 184, 187, 28, 126, 38, 191, 190, 247, 115, 61, 126, 24, 28, 190, 119, 202, 188, 61, 228, 177, 62, 191, 195, 164, 240, 61, 67, 248, 222, 190, 179, 129, 183, 62, 142, 123, 253, 61, 96, 247, 184, 189, 125, 48, 186, 61, 48, 133, 165, 190, 104, 124, 243, 60, 27, 59, 92, 189, 153, 160, 71, 61, 245, 77, 143, 189, 117, 236, 172, 61, 128, 43, 139, 190, 202, 129, 237, 190, 232, 72, 168, 190, 27, 163, 158, 62, 198, 26, 194, 189, 117, 204, 130, 62, 11, 32, 37, 190, 211, 18, 104, 190, 219, 184, 8, 62, 122, 253, 197, 62, 61, 197, 3, 61, 110, 165, 46, 188, 162, 21, 54, 190, 67, 208, 177, 189, 84, 60, 219, 189, 219, 113, 12, 62, 179, 109, 6, 62, 215, 182, 41, 62, 221, 238, 78, 189, 135, 178, 199, 189, 88, 254, 58, 190, 251, 222, 81, 189, 229, 155, 6, 62, 164, 67, 174, 60, 204, 177, 229, 187, 77, 79, 96, 61, 63, 217, 61, 190, 17, 30, 18, 61, 4, 129, 2, 189, 184, 143, 5, 190, 147, 71, 9, 189, 47, 255, 49, 190, 110, 254, 88, 189, 104, 7, 53, 190, 11, 3, 141, 189, 136, 224, 50, 190, 23, 248, 146, 61, 94, 238, 202, 189, 238, 169, 180, 59, 140, 135, 201, 60, 248, 3, 187, 61, 149, 107, 24, 57, 86, 40, 161, 191, 193, 211, 48, 190, 87, 120, 216, 190, 187, 110, 15, 190, 6, 150, 215, 61, 212, 18, 210, 61, 217, 166, 241, 190, 73, 241, 6, 63, 228, 71, 243, 190, 85, 100, 136, 190, 245, 216, 108, 190, 95, 158, 222, 190, 137, 224, 170, 189, 214, 237, 46, 62, 85, 13, 179, 60, 85, 93, 184, 188, 142, 70, 132, 190, 255, 43, 9, 62, 20, 236, 178, 62, 71, 99, 112, 61, 40, 191, 129, 63, 77, 89, 185, 190, 208, 174, 135, 190, 184, 52, 73, 62, 127, 28, 248, 190, 209, 61, 43, 62, 178, 117, 201, 190, 164, 125, 249, 62, 60, 58, 6, 191, 19, 78, 198, 188, 139, 144, 205, 189, 19, 155, 168, 62, 120, 87, 179, 61, 111, 248, 101, 60, 113, 11, 153, 190, 171, 253, 195, 61, 175, 166, 76, 62, 157, 249, 72, 62, 228, 209, 106, 190, 219, 122, 0, 190, 21, 156, 203, 189, 13, 218, 234, 61, 133, 91, 19, 62, 18, 228, 203, 61, 82, 31, 108, 190, 152, 9, 87, 62, 76, 191, 205, 190, 128, 240, 84, 190, 149, 146, 96, 62, 110, 158, 10, 191, 125, 179, 48, 189, 235, 208, 177, 61, 0, 82, 141, 62, 201, 150, 223, 61, 161, 103, 196, 189, 40, 61, 208, 187, 87, 234, 191, 61, 131, 178, 157, 62, 37, 7, 73, 61, 9, 30, 31, 61, 143, 111, 137, 190, 88, 97, 43, 62, 174, 62, 115, 189, 5, 56, 55, 189, 187, 111, 14, 62, 33, 109, 149, 62, 23, 253, 147, 191, 68, 11, 52, 62, 218, 191, 7, 190, 110, 24, 186, 62, 250, 205, 116, 190, 187, 55, 114, 190, 35, 14, 177, 190, 72, 214, 134, 62, 183, 143, 121, 61, 176, 220, 153, 62, 116, 112, 27, 191, 124, 17, 179, 62, 138, 69, 141, 190, 179, 244, 171, 190, 68, 66, 72, 188, 245, 160, 123, 191, 18, 88, 221, 190, 134, 155, 156, 62, 145, 71, 171, 62, 11, 194, 22, 190, 129, 131, 10, 62, 77, 155, 166, 62, 67, 217, 221, 61, 194, 58, 163, 61, 210, 84, 31, 62, 13, 201, 73, 61, 147, 151, 61, 191, 212, 94, 184, 60, 119, 237, 104, 189, 139, 99, 11, 62, 11, 26, 124, 62, 180, 33, 146, 61, 158, 1, 26, 191, 21, 142, 48, 62, 8, 41, 74, 190, 245, 213, 132, 62, 39, 26, 214, 61, 176, 48, 113, 189, 201, 243, 175, 190, 120, 187, 15, 191, 111, 169, 81, 190, 22, 177, 163, 62, 9, 186, 210, 190, 22, 113, 166, 190, 182, 45, 24, 62, 103, 153, 123, 190, 12, 178, 65, 62, 145, 245, 6, 61, 120, 75, 24, 62, 238, 5, 27, 191, 179, 17, 202, 61, 92, 28, 219, 189, 220, 230, 190, 189, 184, 91, 19, 62, 205, 251, 230, 62, 77, 253, 60, 189, 141, 147, 137, 62, 220, 156, 124, 62, 2, 4, 210, 189, 239, 20, 152, 62, 221, 129, 157, 62, 254, 128, 241, 189, 41, 92, 136, 60, 37, 27, 226, 61, 205, 192, 172, 61, 10, 104, 103, 189, 128, 233, 240, 189, 158, 110, 204, 189, 207, 48, 7, 190, 229, 181, 45, 59, 8, 212, 33, 190, 74, 209, 30, 190, 213, 168, 83, 61, 113, 113, 33, 190, 34, 25, 30, 62, 244, 249, 22, 190, 38, 126, 131, 189, 168, 82, 138, 189, 92, 7, 17, 190, 103, 138, 247, 61, 217, 176, 132, 189, 147, 202, 224, 59, 110, 190, 60, 190, 229, 244, 28, 62, 255, 14, 39, 62, 57, 204, 133, 61, 163, 117, 155, 188, 32, 240, 49, 61, 180, 123, 228, 188, 137, 251, 169, 189, 103, 183, 212, 189, 240, 189, 61, 190, 184, 225, 35, 190, 109, 38, 140, 60, 250, 31, 145, 61, 182, 19, 33, 190, 138, 163, 204, 189, 226, 50, 67, 190, 151, 114, 0, 190, 43, 208, 40, 61, 249, 106, 108, 61, 71, 228, 106, 61, 18, 177, 180, 60, 239, 251, 0, 190, 82, 198, 183, 61, 0, 225, 212, 189, 137, 168, 189, 189, 247, 169, 186, 189, 81, 74, 31, 187, 75, 99, 234, 189, 178, 75, 20, 62, 61, 111, 57, 190, 48, 15, 87, 189, 8, 48, 236, 61, 196, 7, 28, 62, 209, 3, 216, 60, 71, 211, 86, 190, 243, 183, 53, 190, 97, 20, 24, 62, 110, 212, 167, 189, 119, 29, 249, 188, 2, 230, 195, 188, 233, 220, 189, 189, 66, 128, 139, 189, 14, 152, 6, 187, 16, 80, 163, 188, 224, 49, 240, 62, 56, 34, 167, 189, 123, 163, 70, 190, 43, 32, 236, 61, 100, 151, 197, 188, 135, 188, 55, 62, 83, 51, 201, 61, 191, 91, 255, 59, 178, 240, 132, 59, 67, 59, 232, 190, 96, 177, 66, 191, 95, 176, 136, 190, 53, 177, 6, 191, 253, 57, 146, 190, 244, 12, 146, 61, 110, 108, 43, 190, 166, 20, 151, 62, 115, 98, 28, 62, 56, 29, 25, 62, 103, 208, 196, 190, 246, 0, 90, 62, 215, 216, 205, 190, 65, 117, 47, 62, 37, 44, 31, 62, 215, 185, 231, 62, 162, 96, 140, 188, 59, 164, 28, 61, 13, 164, 165, 62, 184, 201, 140, 189, 121, 129, 221, 189, 213, 146, 196, 62, 37, 195, 21, 190, 105, 219, 210, 190, 109, 32, 211, 190, 53, 233, 1, 62, 126, 116, 185, 189, 239, 135, 244, 61, 165, 49, 225, 190, 158, 194, 92, 62, 247, 253, 127, 62, 29, 63, 154, 62, 177, 85, 201, 61, 192, 15, 34, 190, 188, 135, 24, 190, 149, 162, 190, 62, 9, 20, 37, 61, 59, 74, 117, 61, 213, 24, 61, 188, 31, 212, 62, 190, 107, 84, 112, 62, 139, 227, 4, 62, 32, 118, 125, 62, 18, 87, 24, 191, 106, 126, 28, 189, 182, 98, 129, 189, 48, 18, 50, 190, 59, 68, 71, 191, 7, 26, 29, 62, 157, 222, 85, 190, 64, 164, 214, 61, 13, 82, 184, 62, 166, 216, 3, 190, 125, 193, 181, 61, 134, 55, 199, 61, 176, 18, 112, 191, 11, 223, 202, 61, 40, 251, 79, 190, 48, 52, 213, 189, 117, 75, 221, 62, 151, 112, 196, 60, 149, 97, 72, 62, 6, 59, 248, 189, 36, 182, 98, 62, 126, 58, 67, 190, 93, 95, 234, 189, 61, 47, 124, 62, 153, 254, 175, 190, 129, 249, 197, 188, 228, 183, 214, 61, 66, 100, 133, 189, 200, 51, 34, 62, 239, 162, 162, 60, 199, 110, 207, 61, 18, 44, 130, 62, 111, 248, 44, 191, 122, 59, 29, 188, 25, 183, 72, 62, 125, 46, 76, 61, 24, 24, 167, 59, 46, 127, 143, 189, 199, 204, 116, 59, 159, 10, 23, 61, 3, 204, 157, 62, 200, 66, 161, 190, 191, 44, 210, 62, 207, 19, 82, 191, 229, 252, 92, 62, 13, 39, 198, 62, 165, 217, 17, 189, 0, 200, 164, 61, 226, 18, 119, 62, 244, 234, 193, 62, 11, 63, 164, 190, 254, 8, 19, 190, 96, 122, 150, 189, 21, 244, 170, 62, 145, 11, 125, 61, 157, 241, 50, 62, 202, 163, 136, 190, 198, 142, 113, 188, 52, 162, 169, 190, 17, 16, 0, 190, 130, 68, 19, 61, 150, 44, 219, 190, 109, 217, 180, 190, 26, 127, 166, 62, 150, 237, 56, 62, 30, 17, 148, 189, 150, 146, 127, 62, 10, 214, 48, 62, 63, 160, 224, 62, 198, 4, 36, 62, 99, 91, 119, 62, 76, 121, 50, 190, 150, 182, 188, 190, 156, 68, 104, 62, 164, 11, 216, 190, 74, 116, 5, 62, 151, 98, 43, 188, 52, 239, 233, 189, 35, 91, 11, 62, 206, 46, 226, 188, 205, 23, 53, 62, 167, 173, 150, 59, 19, 210, 6, 189, 101, 25, 102, 62, 138, 130, 171, 62, 192, 130, 195, 62, 153, 32, 130, 60, 196, 149, 48, 62, 32, 243, 156, 61, 176, 190, 208, 190, 59, 243, 31, 62, 237, 26, 5, 62, 172, 200, 89, 62, 194, 16, 83, 61, 173, 211, 8, 189, 233, 196, 101, 62, 14, 8, 84, 62, 236, 60, 154, 61, 202, 62, 180, 187, 183, 19, 6, 61, 18, 53, 149, 62, 150, 7, 87, 189, 232, 46, 230, 188, 79, 255, 90, 62, 178, 204, 26, 62, 46, 213, 217, 62, 72, 92, 164, 190, 128, 17, 65, 190, 221, 158, 23, 61, 83, 123, 122, 62, 227, 8, 54, 190, 70, 52, 168, 190, 223, 150, 180, 62, 90, 109, 120, 189, 121, 76, 98, 189, 242, 40, 151, 189, 230, 154, 84, 190, 13, 5, 203, 62, 149, 178, 8, 191, 97, 229, 124, 190, 61, 37, 231, 191, 78, 80, 66, 60, 146, 161, 130, 190, 214, 115, 57, 190, 75, 27, 70, 61, 94, 226, 237, 190, 196, 222, 113, 189, 26, 245, 129, 62, 246, 7, 147, 61, 105, 127, 148, 190, 36, 184, 24, 62, 243, 136, 5, 62, 163, 216, 17, 189, 158, 212, 149, 61, 174, 23, 92, 62, 149, 69, 50, 190, 241, 17, 54, 190, 82, 37, 182, 189, 239, 1, 42, 189, 190, 206, 36, 61, 52, 5, 246, 189, 135, 85, 39, 62, 68, 236, 10, 190, 94, 98, 191, 189, 246, 22, 13, 190, 129, 200, 100, 61, 189, 0, 251, 61, 36, 234, 123, 61, 247, 116, 19, 61, 165, 141, 146, 189, 115, 229, 12, 61, 138, 121, 155, 61, 170, 152, 130, 189, 219, 41, 0, 190, 186, 39, 209, 61, 202, 58, 120, 189, 223, 164, 250, 60, 143, 196, 243, 60, 75, 33, 31, 190, 36, 43, 240, 189, 141, 135, 18, 62, 103, 250, 132, 189, 12, 187, 249, 61, 181, 221, 165, 189, 91, 168, 28, 190, 92, 46, 36, 62, 99, 73, 246, 189, 215, 73, 243, 188, 104, 138, 18, 190, 50, 159, 18, 61, 249, 12, 23, 61, 243, 169, 143, 60, 101, 105, 50, 190, 244, 218, 33, 190, 250, 36, 209, 61, 92, 98, 29, 190, 106, 116, 57, 190, 79, 113, 182, 61, 241, 122, 154, 189, 69, 34, 192, 61, 151, 51, 191, 189, 146, 179, 9, 189, 7, 47, 69, 189, 125, 22, 44, 190, 119, 245, 42, 61, 76, 192, 111, 61, 250, 251, 151, 61, 65, 185, 150, 189, 40, 107, 14, 190, 46, 141, 42, 62, 66, 40, 35, 190, 243, 246, 216, 189, 12, 159, 40, 189, 208, 114, 165, 59, 248, 127, 127, 59, 174, 38, 139, 189, 40, 165, 157, 189, 73, 73, 166, 189, 21, 163, 14, 190, 146, 106, 237, 189, 87, 185, 59, 61, 213, 221, 225, 189, 137, 106, 169, 61, 194, 162, 167, 189, 86, 1, 5, 61, 160, 208, 27, 59, 55, 237, 2, 189, 240, 148, 195, 61, 49, 78, 54, 190, 212, 30, 177, 61, 216, 142, 37, 189, 252, 124, 103, 61, 198, 190, 54, 189, 210, 254, 241, 60, 21, 246, 1, 62, 64, 233, 60, 190, 65, 235, 66, 188, 178, 189, 210, 189, 171, 94, 29, 190, 122, 25, 8, 190, 55, 121, 173, 61, 0, 159, 71, 186, 5, 220, 151, 189, 104, 213, 69, 190, 149, 130, 186, 61, 114, 47, 5, 190, 255, 180, 59, 189, 115, 123, 114, 60, 111, 191, 130, 190, 105, 152, 146, 61, 20, 147, 50, 190, 224, 0, 119, 189, 137, 13, 52, 189, 117, 153, 96, 190, 13, 178, 142, 61, 76, 31, 16, 187, 96, 147, 17, 190, 128, 15, 5, 189, 197, 236, 198, 189, 78, 184, 4, 190, 213, 150, 207, 189, 228, 87, 45, 190, 6, 95, 96, 189, 150, 224, 63, 187, 103, 185, 130, 189, 83, 115, 231, 189, 35, 200, 244, 189, 147, 244, 159, 61, 127, 237, 128, 189, 167, 147, 9, 62, 60, 111, 176, 189, 171, 4, 238, 189, 5, 224, 154, 61, 26, 190, 17, 189, 181, 125, 38, 190, 163, 101, 145, 188, 115, 76, 199, 61, 84, 221, 111, 60, 50, 150, 130, 188, 71, 29, 158, 61, 220, 230, 0, 61, 224, 162, 83, 59, 125, 52, 48, 190, 222, 0, 201, 186, 4, 216, 16, 61, 43, 234, 39, 60, 1, 8, 142, 61, 163, 126, 163, 189, 3, 206, 122, 61, 85, 88, 142, 189, 33, 161, 95, 190, 191, 250, 30, 191, 141, 194, 40, 62, 26, 191, 211, 188, 19, 175, 64, 191, 0, 107, 255, 190, 170, 254, 99, 191, 16, 188, 190, 190, 229, 199, 225, 61, 95, 11, 71, 189, 245, 47, 244, 61, 210, 103, 120, 62, 116, 103, 150, 190, 119, 202, 207, 62, 12, 248, 63, 190, 46, 73, 76, 190, 114, 127, 130, 190, 47, 205, 177, 61, 219, 135, 104, 190, 3, 34, 124, 62, 6, 176, 41, 191, 124, 45, 136, 190, 119, 128, 54, 190, 31, 78, 232, 189, 90, 188, 176, 61, 143, 192, 153, 190, 252, 196, 65, 191, 109, 75, 111, 60, 144, 90, 159, 62, 27, 70, 173, 188, 0, 140, 7, 62, 8, 140, 138, 191, 197, 54, 226, 189, 215, 223, 206, 62, 77, 82, 74, 189, 249, 36, 86, 190, 98, 227, 58, 190, 252, 95, 148, 187, 233, 11, 204, 189, 129, 42, 113, 187, 55, 96, 199, 61, 187, 22, 144, 189, 196, 184, 134, 61, 184, 222, 200, 59, 36, 30, 24, 189, 38, 201, 62, 61, 233, 8, 249, 190, 97, 72, 145, 190, 15, 157, 8, 62, 49, 197, 162, 190, 210, 227, 249, 189, 194, 157, 251, 189, 73, 184, 51, 189, 4, 17, 185, 190, 74, 2, 130, 62, 188, 76, 231, 189, 136, 71, 34, 191, 229, 115, 203, 62, 246, 43, 108, 61, 209, 237, 51, 61, 57, 2, 121, 60, 255, 155, 183, 62, 83, 192, 137, 189, 167, 176, 1, 190, 151, 112, 54, 191, 104, 80, 15, 60, 94, 104, 133, 188, 121, 234, 182, 61, 109, 33, 87, 62, 55, 126, 152, 62, 181, 180, 157, 62, 103, 80, 240, 61, 3, 12, 12, 63, 144, 156, 213, 62, 60, 96, 81, 61, 78, 179, 1, 191, 67, 159, 154, 61, 172, 146, 26, 62, 245, 69, 249, 61, 142, 116, 0, 63, 154, 86, 112, 62, 2, 91, 83, 189, 24, 127, 247, 190, 190, 229, 146, 61, 39, 139, 195, 189, 67, 6, 29, 190, 170, 111, 136, 190, 29, 162, 81, 191, 54, 181, 193, 61, 219, 145, 21, 62, 116, 177, 166, 62, 210, 74, 2, 189, 121, 97, 138, 189, 205, 231, 44, 191, 58, 9, 92, 190, 114, 222, 207, 62, 149, 239, 128, 62, 32, 226, 74, 189, 172, 240, 65, 62, 120, 126, 60, 189, 145, 235, 30, 61, 155, 166, 12, 189, 207, 48, 31, 62, 223, 97, 101, 189, 211, 74, 164, 189, 236, 147, 201, 189, 153, 63, 134, 191, 37, 185, 140, 62, 178, 156, 45, 61, 67, 194, 160, 190, 121, 181, 35, 62, 191, 222, 48, 62, 139, 102, 121, 188, 59, 250, 141, 62, 184, 184, 139, 191, 251, 230, 234, 189, 18, 28, 129, 61, 227, 236, 101, 190, 46, 6, 43, 62, 145, 132, 72, 62, 159, 56, 167, 61, 179, 204, 77, 191, 103, 75, 62, 62, 43, 214, 217, 190, 56, 130, 120, 62, 234, 206, 137, 190, 170, 252, 38, 190, 27, 7, 132, 62, 228, 179, 67, 62, 205, 19, 93, 190, 217, 167, 130, 62, 55, 187, 113, 62, 66, 182, 84, 189, 196, 204, 216, 188, 5, 59, 52, 61, 88, 131, 199, 62, 220, 139, 113, 189, 134, 170, 246, 60, 61, 78, 134, 190, 25, 225, 248, 61, 182, 10, 84, 190, 60, 48, 243, 189, 197, 209, 226, 61, 16, 95, 152, 190, 110, 77, 120, 190, 41, 161, 178, 62, 224, 181, 163, 62, 82, 43, 25, 62, 104, 189, 61, 62, 93, 66, 38, 61, 35, 186, 180, 189, 219, 67, 113, 62, 149, 50, 74, 62, 2, 203, 4, 62, 114, 50, 23, 190, 75, 189, 152, 62, 106, 41, 86, 190, 77, 68, 29, 61, 79, 166, 190, 189, 243, 202, 249, 189, 227, 29, 156, 189, 203, 41, 76, 189, 34, 104, 202, 61, 45, 125, 29, 61, 213, 65, 173, 189, 185, 44, 53, 188, 110, 46, 198, 61, 3, 143, 166, 189, 174, 187, 237, 188, 45, 226, 52, 60, 56, 223, 34, 62, 37, 26, 111, 61, 162, 129, 24, 190, 148, 171, 28, 60, 0, 28, 4, 190, 177, 160, 223, 61, 178, 205, 174, 189, 9, 49, 84, 190, 212, 163, 24, 62, 115, 230, 170, 189, 97, 58, 56, 190, 210, 94, 58, 190, 142, 233, 248, 61, 253, 153, 131, 189, 92, 85, 234, 189, 254, 10, 16, 61, 189, 35, 198, 189, 209, 174, 79, 190, 179, 151, 112, 190, 160, 113, 12, 190, 123, 164, 187, 190, 130, 5, 153, 191, 48, 221, 202, 190, 211, 178, 178, 62, 103, 64, 104, 62, 167, 160, 33, 191, 244, 146, 107, 63, 178, 35, 42, 61, 124, 165, 4, 62, 102, 179, 24, 61, 116, 63, 116, 190, 103, 115, 137, 190, 18, 150, 81, 62, 25, 167, 156, 60, 98, 157, 121, 61, 136, 60, 91, 62, 107, 62, 60, 191, 20, 38, 123, 62, 204, 152, 160, 190, 77, 20, 36, 190, 200, 90, 184, 190, 86, 150, 84, 190, 183, 173, 168, 60, 101, 38, 46, 189, 57, 228, 203, 62, 198, 10, 180, 60, 96, 101, 26, 191, 108, 236, 14, 62, 124, 81, 101, 61, 220, 216, 29, 60, 117, 222, 71, 62, 83, 133, 144, 62, 143, 186, 251, 188, 134, 239, 120, 62, 214, 124, 8, 190, 122, 180, 58, 62, 97, 122, 12, 188, 35, 157, 174, 62, 24, 191, 165, 190, 145, 75, 219, 190, 31, 10, 250, 188, 219, 239, 144, 62, 160, 176, 0, 62, 79, 51, 104, 61, 156, 190, 6, 190, 247, 189, 15, 62, 157, 215, 175, 190, 81, 153, 35, 190, 208, 173, 131, 62, 242, 196, 27, 191, 185, 174, 206, 190, 71, 177, 22, 59, 164, 89, 165, 62, 204, 77, 89, 62, 233, 144, 35, 62, 56, 23, 179, 62, 214, 232, 231, 62, 33, 0, 18, 62, 44, 192, 103, 62, 240, 164, 6, 189, 176, 131, 148, 190, 138, 204, 80, 62, 112, 128, 174, 190, 1, 38, 131, 62, 0, 44, 194, 189, 169, 17, 32, 62, 206, 113, 247, 58, 22, 190, 230, 189, 32, 198, 133, 62, 215, 10, 25, 189, 189, 243, 99, 190, 24, 11, 221, 188, 231, 200, 80, 62, 109, 150, 243, 62, 93, 27, 136, 191, 223, 127, 229, 190, 105, 188, 4, 192, 110, 235, 96, 62, 65, 215, 178, 61, 187, 239, 123, 190, 47, 127, 169, 188, 198, 29, 124, 190, 85, 223, 137, 189, 128, 145, 106, 62, 9, 197, 138, 62, 162, 79, 173, 190, 235, 234, 109, 62, 195, 93, 21, 62, 2, 202, 183, 61, 246, 193, 1, 190, 118, 255, 29, 62, 114, 141, 198, 189, 222, 108, 13, 60, 122, 144, 135, 185, 109, 139, 13, 190, 164, 206, 31, 190, 30, 33, 238, 190, 141, 103, 147, 190, 222, 14, 192, 61, 43, 193, 173, 189, 41, 133, 97, 62, 245, 155, 163, 190, 227, 164, 152, 62, 209, 173, 137, 62, 199, 229, 47, 62, 214, 100, 189, 60, 73, 53, 118, 190, 246, 107, 79, 190, 79, 2, 203, 62, 187, 9, 52, 188, 114, 169, 180, 190, 34, 133, 142, 62, 128, 208, 228, 190, 106, 10, 249, 62, 73, 248, 42, 62, 56, 87, 136, 62, 27, 12, 215, 190, 93, 241, 217, 188, 7, 7, 130, 189, 229, 210, 173, 61, 193, 231, 37, 191, 62, 167, 23, 62, 51, 224, 239, 190, 117, 48, 96, 62, 234, 100, 225, 62, 157, 190, 141, 190, 26, 0, 105, 61, 81, 55, 170, 190, 218, 211, 206, 190, 161, 234, 233, 189, 140, 202, 0, 190, 173, 201, 221, 62, 183, 250, 128, 61, 163, 73, 242, 190, 170, 134, 10, 63, 132, 132, 29, 62, 172, 205, 104, 62, 83, 155, 231, 189, 104, 89, 181, 190, 48, 32, 187, 190, 48, 24, 146, 62, 27, 45, 9, 62, 177, 221, 95, 190, 12, 44, 10, 62, 90, 202, 145, 190, 21, 68, 169, 189, 213, 66, 22, 62, 206, 141, 168, 60, 35, 71, 200, 190, 10, 219, 39, 189, 238, 77, 168, 188, 37, 222, 26, 61, 146, 22, 21, 190, 236, 122, 73, 62, 238, 26, 246, 189, 171, 216, 4, 62, 193, 201, 179, 62, 11, 109, 214, 189, 104, 157, 141, 62, 157, 208, 60, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {216, 21, 87, 62, 29, 204, 64, 189, 161, 67, 141, 62, 108, 166, 134, 61, 149, 149, 239, 189, 161, 195, 208, 61, 48, 112, 69, 62, 123, 15, 9, 62, 167, 139, 139, 190, 6, 146, 4, 60, 106, 172, 228, 189, 247, 157, 139, 60, 34, 206, 9, 61, 70, 39, 90, 61, 242, 83, 11, 62, 76, 116, 59, 189, 160, 252, 150, 58, 25, 177, 222, 189, 174, 79, 35, 62, 87, 12, 51, 190, 147, 184, 178, 189, 98, 201, 207, 189, 153, 225, 54, 62, 245, 116, 55, 190, 62, 185, 19, 62, 132, 65, 165, 62, 126, 104, 225, 61, 123, 86, 165, 62, 255, 0, 24, 62, 16, 69, 10, 62, 147, 29, 129, 62, 178, 164, 126, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {207, 44, 227, 62, 160, 129, 251, 59, 8, 105, 1, 63, 24, 225, 191, 62, 105, 133, 150, 61, 161, 22, 127, 191, 246, 249, 26, 190, 241, 161, 74, 191, 226, 254, 205, 62, 65, 191, 116, 61, 152, 192, 160, 189, 27, 105, 181, 62, 212, 110, 5, 63, 90, 242, 138, 62, 185, 127, 176, 190, 193, 40, 139, 60, 253, 25, 118, 190, 204, 94, 73, 61, 100, 27, 211, 188, 171, 246, 189, 61, 99, 208, 238, 189, 207, 137, 62, 191, 127, 249, 11, 63, 216, 2, 19, 63, 220, 135, 9, 191, 166, 179, 5, 190, 235, 243, 219, 189, 84, 150, 78, 63, 155, 86, 175, 190, 141, 142, 74, 190, 86, 55, 21, 63, 87, 174, 230, 62, 4, 198, 39, 189, 89, 76, 84, 61, 166, 100, 54, 190, 128, 39, 47, 190, 108, 136, 15, 190, 116, 98, 170, 189, 77, 102, 227, 189, 195, 52, 90, 62, 20, 109, 204, 61, 44, 241, 41, 62, 227, 63, 196, 61, 74, 10, 123, 61, 6, 190, 72, 62, 52, 204, 124, 61, 6, 121, 129, 190, 232, 29, 212, 190, 122, 172, 233, 189, 115, 112, 246, 61, 164, 229, 4, 61, 103, 91, 5, 62, 212, 240, 237, 59, 170, 13, 157, 61, 56, 242, 195, 62, 192, 108, 144, 62, 179, 19, 23, 62, 129, 170, 135, 190, 15, 252, 142, 59, 234, 202, 106, 190, 59, 99, 122, 189, 227, 172, 158, 190, 130, 46, 236, 61, 191, 179, 31, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 22, 123, 189, 6, 95, 93, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {109, 44, 155, 189, 82, 241, 193, 63, 184, 171, 108, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {105, 144, 228, 191, 20, 131, 83, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0036/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}