// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 233, 216, 62, 67, 53, 7, 63, 37, 243, 10, 63, 18, 154, 235, 190, 59, 70, 142, 62, 28, 216, 225, 190, 149, 201, 197, 61, 52, 134, 183, 190, 251, 122, 166, 190, 171, 142, 130, 190, 123, 82, 13, 63, 248, 229, 233, 61, 157, 106, 126, 190, 47, 106, 185, 190, 126, 220, 253, 188, 54, 112, 211, 189, 110, 182, 172, 62, 74, 164, 174, 189, 4, 140, 137, 187, 106, 24, 230, 189, 45, 81, 180, 190, 100, 67, 3, 63, 221, 11, 87, 62, 195, 147, 176, 190, 160, 117, 151, 62, 246, 166, 156, 190, 91, 19, 210, 190, 175, 3, 16, 63, 61, 25, 71, 62, 71, 212, 165, 60, 188, 52, 44, 190, 219, 246, 140, 62, 153, 53, 221, 62, 53, 236, 95, 62, 10, 36, 25, 190, 110, 112, 138, 62, 144, 144, 208, 190, 214, 44, 37, 190, 154, 49, 80, 62, 21, 46, 194, 190, 180, 253, 116, 190, 162, 142, 200, 190, 93, 130, 169, 190, 129, 93, 38, 62, 131, 49, 153, 190, 156, 223, 69, 62, 98, 211, 234, 190, 48, 219, 179, 62, 5, 194, 131, 190, 142, 90, 205, 62, 86, 242, 40, 190, 226, 55, 135, 62, 170, 122, 247, 60, 221, 133, 169, 190, 166, 2, 184, 62, 62, 7, 238, 61, 66, 135, 186, 190, 107, 194, 208, 62, 218, 136, 191, 190, 13, 6, 56, 187, 92, 201, 35, 62, 239, 252, 205, 61, 165, 109, 0, 189, 56, 162, 116, 190, 63, 136, 153, 190, 140, 39, 201, 62, 143, 252, 222, 62, 9, 153, 23, 62, 195, 99, 68, 190, 196, 45, 17, 63, 25, 117, 219, 62, 177, 236, 106, 190, 25, 67, 215, 190, 224, 96, 9, 63, 144, 47, 26, 190, 220, 45, 93, 190, 145, 255, 21, 62, 120, 12, 232, 61, 67, 50, 206, 190, 123, 125, 95, 62, 83, 197, 163, 190, 198, 252, 132, 189, 178, 80, 51, 190, 115, 232, 92, 62, 238, 44, 7, 63, 204, 255, 224, 190, 229, 176, 203, 190, 111, 208, 219, 62, 110, 203, 131, 189, 202, 158, 192, 62, 187, 38, 201, 190, 246, 252, 229, 190, 129, 94, 74, 190, 131, 236, 139, 190, 132, 21, 111, 62, 26, 181, 222, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 183, 19, 191, 83, 33, 123, 62, 177, 102, 216, 190, 32, 69, 145, 62, 162, 151, 196, 62, 228, 194, 122, 189, 7, 209, 98, 190, 34, 117, 255, 189, 211, 52, 121, 62, 51, 114, 218, 189, 51, 147, 212, 190, 32, 211, 232, 190, 96, 60, 242, 190, 157, 249, 175, 62, 184, 118, 19, 191, 19, 167, 3, 189, 128, 223, 217, 59, 30, 212, 255, 190, 128, 154, 146, 190, 89, 249, 186, 62, 178, 208, 24, 62, 17, 158, 221, 190, 80, 223, 13, 63, 40, 32, 16, 63, 3, 149, 149, 190, 252, 205, 224, 62, 248, 221, 93, 62, 23, 95, 162, 62, 186, 108, 185, 60, 177, 56, 243, 62, 10, 175, 29, 190, 44, 39, 18, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 68, 180, 61, 1, 187, 230, 61, 37, 87, 7, 190, 183, 184, 180, 60, 188, 30, 210, 189, 40, 208, 162, 189, 77, 64, 95, 189, 212, 3, 94, 187, 221, 28, 111, 188, 159, 146, 163, 61, 90, 188, 154, 189, 244, 218, 241, 61, 56, 10, 89, 189, 233, 49, 224, 60, 252, 19, 213, 187, 221, 118, 42, 189, 81, 254, 7, 190, 150, 243, 182, 189, 185, 68, 17, 62, 39, 26, 120, 189, 65, 218, 25, 190, 102, 147, 239, 189, 10, 73, 175, 60, 111, 64, 108, 61, 62, 211, 29, 189, 155, 21, 226, 61, 150, 39, 157, 189, 65, 97, 136, 61, 124, 31, 18, 190, 106, 218, 52, 190, 102, 188, 154, 61, 42, 215, 238, 189, 105, 30, 10, 189, 136, 190, 234, 59, 209, 245, 34, 190, 68, 246, 71, 189, 205, 8, 203, 61, 64, 143, 177, 189, 19, 97, 32, 190, 28, 143, 230, 189, 35, 39, 0, 62, 246, 196, 194, 61, 45, 184, 1, 189, 41, 136, 52, 190, 83, 82, 59, 61, 161, 64, 203, 59, 72, 56, 70, 189, 151, 172, 52, 62, 108, 146, 44, 62, 94, 204, 250, 61, 10, 139, 28, 62, 50, 60, 170, 61, 62, 5, 28, 62, 125, 119, 34, 188, 39, 222, 12, 190, 7, 14, 40, 62, 182, 141, 0, 190, 68, 107, 60, 61, 145, 167, 177, 189, 144, 189, 254, 61, 141, 81, 183, 188, 34, 144, 159, 61, 179, 172, 206, 189, 174, 46, 181, 189, 195, 180, 15, 190, 186, 202, 216, 189, 183, 103, 0, 189, 1, 61, 177, 189, 32, 234, 159, 59, 144, 142, 50, 187, 222, 95, 46, 62, 134, 62, 13, 60, 229, 37, 135, 189, 52, 14, 140, 186, 225, 55, 148, 61, 150, 75, 11, 62, 27, 174, 40, 190, 56, 208, 236, 61, 220, 4, 131, 189, 179, 218, 105, 189, 54, 64, 194, 188, 228, 66, 158, 189, 100, 199, 52, 190, 103, 48, 244, 189, 27, 255, 245, 187, 112, 105, 55, 61, 126, 173, 1, 190, 246, 172, 163, 188, 153, 118, 149, 61, 1, 6, 205, 61, 170, 146, 218, 188, 228, 68, 1, 190, 144, 95, 254, 188, 164, 179, 21, 189, 116, 28, 20, 190, 118, 205, 147, 61, 66, 172, 40, 189, 20, 105, 22, 62, 170, 98, 39, 190, 69, 237, 27, 62, 239, 94, 7, 190, 124, 69, 253, 189, 230, 214, 107, 61, 10, 26, 26, 61, 142, 218, 43, 62, 183, 217, 132, 58, 157, 218, 131, 61, 62, 171, 37, 190, 136, 123, 39, 61, 65, 166, 166, 189, 50, 198, 145, 189, 146, 144, 250, 61, 199, 91, 123, 59, 240, 49, 236, 61, 193, 47, 41, 62, 96, 197, 132, 61, 174, 252, 120, 189, 51, 209, 220, 61, 105, 12, 45, 190, 168, 62, 41, 190, 15, 32, 37, 61, 214, 240, 20, 62, 56, 39, 224, 61, 1, 21, 128, 188, 25, 93, 179, 189, 89, 33, 231, 189, 7, 32, 9, 61, 114, 6, 34, 62, 227, 225, 106, 61, 186, 7, 29, 186, 144, 57, 44, 190, 30, 219, 167, 189, 170, 11, 149, 189, 29, 90, 21, 62, 232, 66, 17, 62, 101, 191, 52, 62, 124, 108, 36, 189, 85, 145, 195, 189, 55, 153, 31, 190, 148, 110, 218, 188, 76, 225, 38, 62, 142, 169, 31, 61, 169, 102, 87, 59, 85, 179, 176, 61, 191, 237, 51, 190, 60, 186, 61, 61, 132, 115, 174, 188, 59, 6, 234, 189, 3, 120, 235, 188, 34, 186, 17, 190, 111, 45, 46, 189, 213, 39, 42, 190, 146, 97, 118, 189, 11, 87, 35, 190, 184, 125, 167, 61, 91, 41, 190, 189, 96, 25, 129, 60, 151, 244, 87, 61, 47, 84, 243, 61, 47, 113, 155, 60, 29, 85, 79, 61, 167, 174, 188, 61, 132, 58, 10, 190, 253, 11, 179, 187, 199, 169, 182, 61, 77, 109, 7, 189, 255, 248, 188, 61, 212, 229, 1, 62, 216, 35, 197, 61, 248, 188, 182, 188, 184, 12, 21, 190, 34, 128, 4, 190, 146, 217, 17, 189, 213, 113, 213, 61, 4, 153, 14, 62, 4, 57, 96, 189, 12, 71, 206, 189, 180, 178, 65, 188, 120, 176, 244, 186, 24, 17, 185, 61, 145, 235, 218, 189, 194, 45, 49, 190, 158, 30, 150, 189, 241, 169, 46, 62, 140, 118, 37, 62, 86, 192, 237, 61, 134, 34, 20, 190, 190, 12, 21, 61, 192, 138, 99, 189, 46, 56, 139, 61, 29, 97, 50, 190, 124, 5, 163, 60, 32, 142, 188, 61, 59, 154, 239, 189, 218, 202, 31, 62, 9, 139, 223, 60, 5, 163, 143, 61, 40, 69, 113, 60, 14, 46, 69, 60, 254, 161, 28, 61, 240, 147, 89, 189, 17, 159, 112, 189, 209, 69, 15, 62, 176, 169, 130, 61, 71, 224, 23, 189, 4, 228, 0, 62, 79, 128, 45, 190, 223, 90, 47, 190, 135, 255, 37, 62, 254, 225, 115, 61, 117, 9, 37, 62, 250, 111, 36, 190, 156, 28, 207, 61, 193, 253, 15, 62, 111, 246, 39, 190, 168, 94, 4, 190, 216, 227, 44, 188, 7, 42, 5, 62, 231, 66, 4, 189, 106, 2, 94, 57, 164, 6, 187, 60, 95, 158, 212, 61, 175, 51, 160, 61, 6, 90, 37, 190, 24, 169, 131, 61, 241, 255, 153, 60, 160, 63, 0, 190, 14, 36, 210, 61, 138, 29, 212, 189, 143, 171, 38, 62, 109, 8, 4, 62, 43, 91, 14, 62, 69, 69, 6, 190, 227, 155, 197, 189, 17, 133, 129, 61, 215, 89, 3, 62, 156, 130, 193, 189, 73, 154, 229, 61, 151, 22, 34, 62, 81, 64, 248, 189, 232, 197, 224, 189, 25, 91, 249, 189, 89, 154, 143, 60, 141, 213, 226, 61, 138, 51, 135, 61, 40, 223, 173, 61, 65, 231, 100, 189, 185, 64, 14, 62, 133, 241, 112, 189, 136, 18, 248, 189, 42, 225, 102, 189, 167, 108, 37, 62, 218, 181, 40, 190, 229, 126, 225, 188, 197, 105, 42, 62, 4, 26, 56, 61, 171, 35, 192, 189, 143, 148, 70, 61, 68, 6, 229, 189, 20, 216, 25, 188, 199, 95, 6, 190, 73, 134, 231, 188, 113, 202, 47, 62, 164, 6, 164, 189, 74, 169, 221, 189, 153, 147, 38, 189, 123, 194, 184, 189, 145, 216, 27, 62, 185, 66, 59, 189, 73, 213, 224, 189, 161, 188, 188, 61, 189, 111, 37, 189, 18, 146, 9, 188, 148, 56, 95, 189, 73, 140, 246, 61, 254, 137, 162, 189, 93, 76, 150, 61, 232, 79, 242, 189, 12, 157, 36, 190, 245, 89, 36, 61, 187, 185, 27, 62, 83, 52, 202, 61, 69, 85, 49, 62, 25, 201, 6, 62, 150, 111, 129, 61, 19, 62, 22, 62, 141, 145, 188, 189, 107, 7, 233, 59, 188, 82, 231, 60, 44, 180, 250, 61, 205, 192, 172, 61, 150, 23, 49, 189, 64, 253, 214, 189, 30, 129, 178, 189, 207, 48, 7, 190, 103, 246, 169, 59, 238, 51, 28, 190, 74, 209, 30, 190, 165, 179, 129, 61, 38, 212, 21, 190, 164, 237, 41, 62, 177, 158, 10, 190, 38, 126, 131, 189, 93, 146, 101, 189, 228, 9, 4, 190, 103, 138, 247, 61, 217, 176, 132, 189, 216, 188, 61, 60, 176, 228, 47, 190, 183, 200, 40, 62, 34, 149, 52, 62, 45, 54, 161, 61, 4, 227, 212, 187, 85, 0, 103, 61, 111, 117, 127, 188, 14, 128, 145, 189, 103, 183, 212, 189, 80, 124, 49, 190, 184, 225, 35, 190, 34, 234, 241, 60, 250, 31, 145, 61, 20, 13, 23, 190, 225, 177, 200, 189, 146, 7, 35, 190, 72, 78, 1, 190, 122, 212, 151, 61, 39, 53, 158, 61, 251, 224, 183, 61, 65, 8, 51, 61, 45, 79, 135, 189, 82, 198, 183, 61, 0, 225, 212, 189, 137, 168, 189, 189, 199, 42, 199, 189, 15, 250, 127, 59, 75, 99, 234, 189, 132, 255, 45, 62, 185, 236, 33, 190, 221, 46, 190, 188, 252, 234, 11, 62, 235, 42, 31, 62, 209, 3, 216, 60, 15, 5, 48, 190, 156, 20, 18, 190, 120, 68, 43, 62, 1, 49, 154, 189, 207, 130, 50, 188, 102, 64, 171, 60, 6, 220, 176, 189, 66, 128, 139, 189, 191, 206, 119, 188, 5, 46, 25, 186, 51, 125, 2, 62, 1, 143, 201, 189, 237, 214, 52, 190, 164, 151, 95, 189, 33, 127, 52, 60, 189, 255, 215, 189, 20, 2, 229, 61, 96, 151, 255, 189, 213, 200, 227, 61, 226, 215, 176, 61, 40, 10, 132, 189, 71, 71, 84, 61, 201, 38, 245, 189, 157, 148, 2, 190, 54, 136, 56, 60, 125, 207, 20, 62, 200, 41, 190, 61, 219, 149, 16, 187, 87, 17, 50, 61, 0, 1, 10, 190, 17, 33, 22, 62, 197, 77, 45, 62, 14, 237, 230, 61, 195, 107, 109, 61, 231, 247, 38, 62, 120, 131, 151, 61, 106, 36, 55, 189, 149, 51, 48, 62, 196, 29, 103, 189, 192, 93, 210, 189, 4, 97, 179, 60, 117, 248, 236, 188, 192, 82, 249, 189, 205, 40, 140, 189, 46, 69, 235, 189, 16, 141, 92, 185, 34, 161, 210, 57, 140, 97, 13, 61, 136, 52, 102, 189, 216, 20, 205, 61, 142, 98, 195, 61, 99, 115, 144, 61, 35, 209, 192, 188, 128, 75, 20, 61, 84, 171, 238, 60, 21, 182, 19, 188, 148, 43, 25, 62, 142, 175, 249, 189, 99, 220, 13, 62, 200, 241, 2, 190, 63, 27, 70, 61, 59, 49, 133, 61, 25, 33, 14, 190, 174, 11, 15, 189, 96, 174, 102, 189, 222, 251, 173, 189, 203, 18, 33, 190, 177, 104, 36, 62, 103, 4, 14, 62, 184, 185, 23, 189, 42, 133, 22, 61, 135, 64, 6, 189, 9, 6, 21, 189, 186, 36, 39, 62, 112, 71, 3, 62, 158, 121, 15, 62, 155, 42, 26, 190, 84, 131, 14, 61, 235, 51, 254, 187, 251, 71, 160, 61, 182, 248, 10, 62, 53, 190, 50, 190, 104, 250, 124, 61, 16, 162, 176, 59, 236, 96, 178, 61, 13, 166, 36, 62, 20, 58, 46, 190, 242, 63, 121, 189, 180, 5, 185, 61, 231, 0, 243, 189, 212, 1, 52, 62, 212, 244, 48, 190, 111, 25, 40, 61, 54, 102, 208, 188, 28, 237, 231, 189, 183, 196, 9, 190, 169, 211, 250, 61, 34, 98, 7, 61, 132, 9, 168, 61, 185, 88, 21, 62, 202, 48, 87, 61, 136, 86, 38, 62, 178, 125, 154, 188, 187, 178, 51, 190, 143, 54, 114, 189, 234, 197, 225, 188, 53, 81, 1, 62, 88, 168, 232, 61, 73, 96, 1, 62, 63, 13, 162, 60, 196, 36, 6, 62, 100, 254, 8, 62, 105, 35, 225, 189, 218, 63, 128, 61, 142, 171, 52, 189, 210, 153, 128, 61, 251, 149, 60, 60, 126, 9, 122, 61, 53, 190, 43, 189, 68, 91, 156, 189, 116, 237, 206, 189, 193, 227, 47, 189, 52, 219, 246, 189, 233, 88, 199, 60, 160, 20, 150, 189, 23, 173, 12, 62, 242, 171, 2, 190, 170, 215, 143, 189, 143, 137, 134, 61, 85, 226, 120, 189, 43, 219, 52, 62, 154, 143, 220, 188, 166, 51, 26, 61, 233, 240, 3, 190, 39, 43, 58, 189, 50, 194, 3, 62, 39, 196, 247, 189, 9, 229, 152, 188, 131, 108, 46, 189, 75, 124, 238, 189, 18, 6, 5, 62, 85, 191, 12, 62, 180, 152, 153, 188, 205, 67, 221, 189, 173, 168, 251, 60, 227, 139, 254, 61, 62, 184, 28, 62, 240, 148, 28, 62, 13, 169, 51, 60, 218, 152, 199, 61, 164, 233, 47, 188, 174, 135, 17, 190, 159, 65, 42, 60, 51, 100, 93, 187, 248, 217, 20, 62, 23, 32, 107, 61, 112, 58, 131, 189, 231, 234, 221, 187, 143, 175, 169, 60, 183, 232, 238, 189, 238, 179, 39, 190, 189, 174, 221, 189, 71, 142, 13, 62, 83, 179, 43, 62, 58, 62, 32, 189, 17, 63, 181, 61, 146, 255, 228, 59, 78, 187, 154, 61, 151, 106, 27, 190, 157, 74, 208, 60, 43, 54, 238, 61, 18, 12, 199, 61, 99, 3, 148, 61, 29, 140, 7, 190, 26, 154, 37, 62, 135, 147, 162, 189, 197, 97, 248, 61, 228, 199, 248, 61, 188, 149, 15, 190, 75, 136, 236, 61, 46, 60, 215, 61, 241, 224, 136, 188, 149, 171, 212, 189, 139, 145, 23, 190, 53, 74, 216, 189, 15, 195, 29, 190, 121, 52, 132, 61, 104, 12, 224, 189, 231, 207, 43, 62, 173, 154, 207, 60, 202, 90, 212, 189, 222, 18, 7, 189, 37, 178, 2, 62, 99, 214, 233, 61, 236, 164, 185, 189, 33, 135, 18, 189, 6, 105, 26, 62, 88, 238, 159, 61, 122, 180, 185, 61, 41, 197, 48, 190, 113, 89, 173, 189, 32, 39, 204, 61, 52, 5, 246, 189, 231, 17, 43, 62, 68, 236, 10, 190, 87, 14, 180, 189, 246, 22, 13, 190, 38, 198, 107, 61, 189, 0, 251, 61, 45, 238, 130, 61, 232, 15, 24, 61, 182, 119, 142, 189, 115, 229, 12, 61, 138, 121, 155, 61, 170, 152, 130, 189, 231, 120, 254, 189, 186, 39, 209, 61, 202, 58, 120, 189, 94, 156, 9, 61, 143, 196, 243, 60, 75, 33, 31, 190, 130, 2, 238, 189, 189, 94, 20, 62, 103, 250, 132, 189, 109, 178, 3, 62, 115, 215, 146, 189, 137, 148, 27, 190, 8, 152, 40, 62, 161, 16, 239, 189, 19, 102, 238, 188, 104, 138, 18, 190, 118, 224, 32, 61, 249, 12, 23, 61, 54, 156, 188, 60, 101, 105, 50, 190, 202, 52, 33, 190, 250, 36, 209, 61, 172, 116, 24, 190, 11, 40, 48, 190, 79, 113, 182, 61, 241, 122, 154, 189, 69, 34, 192, 61, 151, 51, 191, 189, 146, 179, 9, 189, 7, 47, 69, 189, 125, 22, 44, 190, 122, 135, 57, 61, 41, 247, 155, 61, 250, 251, 151, 61, 9, 85, 145, 189, 40, 107, 14, 190, 46, 141, 42, 62, 66, 40, 35, 190, 239, 60, 206, 189, 12, 159, 40, 189, 208, 114, 165, 59, 66, 123, 231, 59, 209, 0, 133, 189, 40, 165, 157, 189, 107, 235, 142, 189, 41, 161, 14, 190, 61, 6, 233, 189, 87, 185, 59, 61, 213, 221, 225, 189, 145, 164, 198, 61, 79, 19, 130, 189, 95, 182, 182, 61, 182, 83, 142, 60, 55, 237, 2, 189, 177, 235, 49, 62, 242, 76, 253, 189, 138, 18, 48, 62, 60, 113, 91, 189, 8, 55, 141, 61, 33, 205, 122, 189, 198, 136, 180, 61, 135, 229, 49, 62, 199, 112, 41, 190, 195, 249, 15, 60, 98, 170, 189, 189, 84, 58, 32, 190, 63, 153, 211, 189, 88, 240, 36, 62, 61, 60, 61, 187, 171, 121, 191, 189, 31, 154, 34, 190, 62, 153, 49, 62, 238, 151, 218, 189, 88, 143, 7, 61, 174, 3, 204, 61, 26, 118, 52, 190, 113, 109, 18, 62, 137, 223, 3, 190, 8, 47, 1, 60, 86, 131, 130, 189, 9, 38, 23, 190, 13, 178, 142, 61, 54, 180, 139, 61, 96, 147, 17, 190, 128, 15, 5, 189, 197, 236, 198, 189, 78, 184, 4, 190, 213, 150, 207, 189, 228, 87, 45, 190, 6, 95, 96, 189, 150, 224, 63, 187, 103, 185, 130, 189, 83, 115, 231, 189, 35, 200, 244, 189, 147, 244, 159, 61, 127, 237, 128, 189, 167, 147, 9, 62, 60, 111, 176, 189, 171, 4, 238, 189, 5, 224, 154, 61, 26, 190, 17, 189, 181, 125, 38, 190, 163, 101, 145, 188, 115, 76, 199, 61, 84, 221, 111, 60, 50, 150, 130, 188, 71, 29, 158, 61, 220, 230, 0, 61, 224, 162, 83, 59, 125, 52, 48, 190, 222, 0, 201, 186, 4, 216, 16, 61, 43, 234, 39, 60, 1, 8, 142, 61, 163, 126, 163, 189, 187, 245, 146, 189, 187, 14, 126, 189, 144, 215, 37, 62, 239, 117, 227, 188, 140, 136, 196, 60, 151, 218, 39, 62, 139, 67, 229, 61, 26, 17, 23, 190, 98, 247, 31, 187, 238, 18, 67, 188, 58, 211, 112, 58, 244, 240, 237, 189, 224, 28, 237, 57, 209, 206, 52, 62, 225, 22, 229, 189, 195, 11, 41, 62, 170, 105, 248, 189, 229, 171, 172, 188, 179, 56, 202, 58, 129, 237, 247, 61, 103, 61, 143, 189, 242, 27, 122, 61, 6, 94, 204, 189, 240, 21, 222, 61, 225, 79, 70, 188, 79, 17, 14, 190, 245, 157, 170, 189, 149, 17, 214, 189, 88, 6, 48, 61, 99, 16, 4, 189, 97, 159, 210, 61, 171, 200, 33, 189, 127, 58, 159, 61, 234, 192, 146, 188, 34, 2, 18, 62, 29, 76, 128, 61, 247, 226, 146, 187, 42, 31, 5, 189, 237, 48, 176, 59, 67, 47, 15, 190, 207, 111, 3, 189, 230, 109, 27, 190, 3, 218, 42, 62, 138, 93, 46, 62, 248, 226, 15, 190, 220, 143, 232, 61, 193, 74, 70, 61, 235, 32, 245, 61, 34, 178, 119, 189, 248, 146, 210, 61, 171, 85, 171, 189, 132, 79, 137, 60, 155, 184, 144, 189, 102, 29, 152, 189, 211, 32, 118, 61, 132, 15, 47, 190, 111, 216, 50, 61, 219, 66, 0, 190, 91, 171, 213, 189, 147, 95, 13, 62, 1, 241, 237, 58, 88, 64, 215, 61, 43, 209, 238, 61, 80, 212, 237, 61, 44, 41, 222, 188, 0, 133, 128, 189, 102, 199, 81, 189, 114, 107, 251, 61, 38, 69, 81, 189, 44, 84, 182, 61, 141, 48, 82, 61, 74, 44, 24, 62, 199, 198, 2, 62, 137, 49, 186, 60, 154, 110, 39, 62, 136, 181, 192, 189, 7, 35, 0, 189, 159, 51, 61, 189, 110, 187, 107, 61, 211, 254, 72, 189, 88, 103, 207, 61, 138, 133, 123, 61, 189, 123, 33, 61, 103, 84, 80, 61, 25, 115, 113, 189, 192, 245, 156, 189, 120, 83, 212, 189, 4, 109, 27, 190, 32, 28, 5, 190, 172, 151, 12, 190, 50, 75, 177, 61, 206, 160, 197, 61, 196, 82, 193, 61, 17, 203, 249, 61, 83, 95, 20, 61, 134, 15, 221, 187, 103, 21, 34, 62, 26, 25, 32, 62, 63, 139, 193, 61, 220, 242, 40, 62, 173, 51, 76, 61, 201, 126, 212, 188, 119, 123, 1, 189, 140, 203, 183, 61, 92, 125, 130, 61, 3, 247, 51, 189, 59, 72, 3, 62, 103, 152, 38, 190, 77, 122, 29, 61, 194, 90, 249, 189, 17, 19, 232, 60, 6, 106, 213, 189, 223, 146, 227, 61, 183, 148, 254, 61, 15, 82, 168, 61, 12, 52, 89, 187, 178, 119, 34, 62, 38, 226, 192, 61, 72, 177, 66, 61, 105, 26, 30, 190, 7, 19, 248, 61, 111, 227, 147, 61, 129, 159, 196, 189, 119, 202, 179, 60, 226, 98, 223, 61, 91, 188, 95, 61, 70, 206, 4, 190, 173, 179, 195, 189, 191, 234, 47, 190, 77, 42, 5, 62, 142, 221, 106, 188, 43, 43, 35, 190, 128, 197, 135, 61, 94, 187, 43, 62, 102, 223, 251, 61, 15, 192, 5, 62, 177, 144, 40, 61, 37, 141, 242, 61, 16, 231, 46, 59, 44, 54, 63, 189, 12, 168, 110, 189, 217, 188, 144, 61, 213, 206, 18, 190, 41, 247, 214, 189, 59, 100, 221, 61, 131, 228, 83, 189, 98, 162, 133, 189, 137, 190, 63, 61, 24, 59, 251, 61, 129, 228, 42, 62, 102, 223, 10, 62, 183, 192, 243, 188, 31, 101, 43, 190, 230, 107, 211, 61, 227, 155, 28, 62, 48, 73, 210, 61, 141, 187, 212, 60, 68, 6, 41, 62, 253, 55, 246, 189, 149, 150, 63, 189, 79, 166, 190, 189, 150, 116, 206, 189, 75, 228, 106, 189, 18, 1, 28, 189, 39, 110, 33, 62, 209, 208, 36, 61, 198, 135, 131, 189, 185, 44, 53, 188, 77, 57, 239, 61, 3, 143, 166, 189, 254, 56, 8, 189, 67, 165, 28, 60, 102, 210, 52, 62, 103, 6, 241, 61, 162, 129, 24, 190, 248, 102, 108, 61, 104, 12, 3, 190, 177, 160, 223, 61, 178, 205, 174, 189, 168, 91, 42, 190, 119, 92, 28, 62, 144, 201, 152, 189, 46, 78, 31, 190, 178, 193, 41, 190, 185, 35, 254, 61, 38, 63, 144, 187, 173, 17, 190, 189, 245, 237, 138, 61, 211, 37, 161, 189, 2, 123, 52, 190, 253, 204, 47, 190, 115, 250, 170, 189, 174, 112, 180, 189, 117, 151, 221, 189, 146, 119, 52, 190, 67, 235, 71, 61, 69, 1, 160, 61, 75, 233, 29, 188, 188, 53, 121, 189, 135, 209, 203, 189, 69, 73, 131, 60, 66, 229, 101, 189, 19, 3, 50, 189, 34, 138, 31, 60, 71, 177, 21, 189, 147, 161, 218, 189, 48, 243, 158, 61, 190, 47, 47, 62, 11, 236, 201, 189, 186, 184, 186, 60, 142, 77, 43, 190, 53, 71, 29, 190, 132, 175, 1, 190, 45, 73, 25, 190, 126, 8, 255, 187, 86, 76, 195, 59, 240, 88, 234, 61, 165, 234, 23, 190, 41, 75, 37, 190, 113, 220, 38, 190, 1, 8, 166, 189, 200, 47, 85, 61, 66, 112, 146, 61, 215, 211, 211, 60, 198, 7, 37, 190, 54, 74, 174, 189, 106, 123, 35, 62, 90, 251, 3, 62, 63, 52, 255, 59, 62, 37, 167, 61, 12, 199, 205, 189, 142, 201, 26, 190, 203, 210, 198, 61, 44, 163, 129, 59, 87, 167, 198, 60, 244, 24, 168, 189, 228, 136, 135, 61, 254, 121, 245, 187, 15, 196, 44, 189, 68, 186, 251, 188, 236, 161, 180, 61, 191, 11, 166, 189, 139, 229, 138, 189, 187, 198, 170, 187, 99, 112, 181, 61, 100, 199, 49, 62, 3, 83, 195, 60, 132, 244, 33, 62, 188, 86, 45, 62, 97, 63, 159, 188, 81, 80, 14, 189, 86, 68, 242, 61, 72, 235, 18, 62, 130, 206, 36, 62, 193, 212, 80, 189, 80, 132, 251, 61, 68, 37, 97, 61, 139, 165, 191, 186, 210, 159, 50, 62, 148, 223, 227, 61, 244, 140, 222, 61, 185, 233, 175, 189, 236, 160, 161, 189, 194, 48, 246, 61, 23, 113, 44, 62, 197, 220, 217, 61, 78, 49, 184, 188, 95, 221, 86, 61, 140, 58, 233, 189, 35, 251, 11, 62, 26, 102, 5, 62, 168, 99, 142, 189, 19, 183, 244, 188, 214, 159, 167, 188, 13, 200, 211, 61, 72, 26, 153, 189, 115, 70, 174, 61, 35, 118, 150, 61, 58, 21, 36, 62, 6, 153, 185, 61, 71, 106, 0, 60, 125, 94, 20, 190, 166, 200, 165, 61, 122, 28, 29, 61, 231, 138, 17, 62, 63, 251, 32, 190, 177, 242, 199, 189, 191, 176, 38, 189, 89, 81, 255, 61, 160, 37, 243, 61, 25, 8, 114, 189, 37, 139, 36, 60, 54, 52, 22, 62, 100, 97, 141, 188, 215, 227, 22, 190, 11, 57, 145, 61, 183, 57, 81, 189, 90, 72, 166, 189, 40, 132, 226, 61, 165, 18, 140, 189, 168, 139, 228, 189, 20, 222, 2, 61, 142, 167, 128, 189, 220, 84, 201, 189, 61, 242, 164, 189, 143, 103, 240, 61, 132, 218, 125, 61, 119, 54, 125, 61, 254, 1, 190, 189, 18, 223, 11, 190, 105, 211, 201, 189, 47, 189, 215, 61, 180, 242, 253, 189, 220, 98, 37, 62, 43, 97, 175, 189, 42, 225, 100, 61, 157, 30, 240, 61, 178, 110, 30, 190, 185, 18, 167, 60, 242, 158, 49, 190, 156, 83, 249, 187, 36, 255, 213, 61, 143, 174, 149, 61, 191, 23, 1, 62, 185, 62, 15, 189, 38, 133, 43, 190, 126, 80, 47, 62, 8, 52, 246, 189, 97, 11, 164, 61, 130, 141, 191, 189, 157, 158, 179, 189, 32, 189, 187, 189, 147, 150, 203, 61, 64, 153, 13, 190, 57, 30, 40, 190, 251, 159, 23, 62, 1, 247, 239, 188, 59, 88, 50, 190, 63, 167, 240, 189, 205, 66, 143, 60, 166, 53, 238, 61, 197, 177, 164, 61, 224, 162, 128, 189, 238, 160, 83, 61, 59, 60, 46, 61, 8, 111, 75, 61, 218, 44, 144, 59, 19, 110, 102, 61, 51, 173, 235, 61, 40, 89, 28, 62, 193, 202, 136, 61, 238, 66, 108, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {195, 218, 139, 61, 128, 84, 57, 61, 74, 201, 40, 62, 226, 73, 191, 189, 159, 116, 195, 189, 219, 143, 176, 59, 124, 183, 118, 186, 254, 19, 98, 189, 101, 14, 255, 189, 77, 51, 178, 60, 251, 23, 140, 189, 47, 248, 160, 61, 65, 21, 41, 189, 94, 129, 244, 61, 187, 173, 73, 189, 192, 182, 168, 189, 11, 32, 221, 189, 65, 8, 206, 189, 51, 33, 48, 62, 210, 76, 188, 189, 147, 184, 178, 189, 86, 16, 18, 60, 219, 87, 5, 62, 70, 80, 17, 62, 217, 135, 218, 61, 18, 2, 33, 62, 174, 69, 40, 62, 45, 111, 230, 61, 137, 129, 155, 61, 17, 27, 32, 61, 138, 91, 25, 62, 238, 155, 193, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {136, 20, 195, 61, 103, 62, 53, 61, 141, 181, 45, 62, 88, 194, 74, 61, 249, 130, 132, 61, 133, 231, 138, 189, 214, 119, 140, 189, 103, 187, 49, 190, 28, 151, 26, 61, 208, 183, 81, 61, 217, 216, 154, 188, 230, 107, 30, 62, 108, 136, 29, 62, 185, 105, 133, 61, 98, 182, 195, 189, 47, 157, 144, 61, 245, 27, 200, 189, 156, 99, 79, 61, 139, 45, 240, 188, 69, 46, 196, 61, 99, 208, 238, 189, 235, 89, 186, 189, 186, 162, 48, 62, 156, 198, 210, 186, 84, 0, 33, 190, 182, 11, 143, 189, 68, 35, 233, 189, 56, 57, 52, 62, 137, 1, 33, 190, 149, 210, 22, 190, 181, 231, 238, 61, 48, 141, 6, 62, 53, 220, 26, 60, 117, 31, 231, 61, 77, 159, 192, 189, 44, 213, 210, 188, 166, 240, 31, 190, 178, 47, 200, 60, 161, 56, 245, 189, 120, 159, 245, 59, 169, 186, 239, 61, 240, 210, 52, 62, 116, 224, 27, 62, 145, 151, 218, 61, 70, 134, 55, 189, 43, 192, 145, 60, 55, 169, 161, 189, 108, 23, 21, 190, 137, 18, 222, 189, 168, 240, 247, 61, 148, 58, 253, 60, 17, 68, 39, 62, 212, 240, 237, 59, 212, 51, 135, 61, 13, 161, 192, 61, 218, 254, 167, 61, 255, 169, 33, 62, 211, 131, 71, 188, 245, 92, 41, 61, 0, 116, 18, 190, 173, 218, 124, 61, 125, 109, 25, 190, 228, 94, 14, 62, 202, 65, 220, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {178, 129, 196, 58, 41, 99, 227, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {216, 157, 57, 62, 234, 16, 132, 187, 210, 34, 244, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {63, 76, 141, 61, 90, 71, 180, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0036/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}