// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 156, 96, 63, 182, 146, 198, 63, 184, 166, 197, 62, 55, 108, 31, 61, 167, 89, 206, 191, 143, 235, 18, 191, 142, 77, 140, 62, 205, 24, 152, 191, 170, 162, 160, 189, 97, 240, 152, 189, 9, 220, 45, 63, 254, 16, 6, 190, 42, 12, 153, 190, 0, 179, 166, 190, 189, 202, 172, 60, 191, 87, 140, 189, 118, 106, 60, 63, 127, 66, 62, 190, 30, 17, 10, 190, 66, 5, 136, 191, 216, 40, 140, 190, 226, 229, 211, 62, 117, 127, 216, 186, 204, 94, 212, 190, 244, 162, 37, 63, 55, 95, 146, 191, 231, 131, 136, 190, 101, 213, 79, 63, 43, 7, 74, 189, 183, 76, 90, 61, 109, 18, 206, 190, 160, 64, 140, 63, 12, 234, 184, 62, 158, 61, 0, 63, 69, 25, 136, 190, 119, 162, 182, 62, 85, 197, 71, 191, 22, 42, 130, 63, 67, 241, 168, 62, 125, 138, 59, 191, 96, 117, 38, 191, 158, 49, 149, 188, 69, 88, 69, 190, 205, 1, 192, 61, 177, 230, 173, 190, 150, 101, 133, 189, 190, 83, 94, 190, 181, 42, 1, 63, 78, 130, 254, 189, 115, 168, 206, 61, 115, 59, 234, 190, 150, 66, 63, 63, 219, 97, 26, 191, 210, 81, 169, 190, 249, 82, 136, 62, 215, 6, 214, 62, 107, 223, 19, 191, 181, 232, 22, 62, 120, 223, 82, 191, 162, 107, 136, 189, 124, 65, 95, 62, 91, 139, 120, 63, 195, 78, 63, 62, 74, 244, 159, 61, 53, 165, 146, 62, 73, 2, 154, 62, 40, 217, 92, 62, 229, 49, 216, 190, 140, 127, 53, 190, 102, 208, 196, 62, 196, 7, 131, 62, 215, 168, 58, 190, 125, 37, 25, 191, 30, 74, 237, 190, 138, 113, 6, 191, 36, 76, 236, 190, 235, 232, 78, 189, 155, 78, 17, 59, 220, 17, 145, 190, 77, 49, 97, 191, 12, 4, 54, 191, 67, 192, 246, 61, 91, 166, 27, 63, 8, 31, 194, 61, 168, 90, 101, 63, 89, 165, 154, 191, 157, 208, 139, 190, 55, 212, 8, 63, 27, 79, 73, 63, 169, 253, 238, 62, 13, 107, 8, 191, 25, 108, 58, 191, 145, 253, 168, 61, 228, 152, 44, 191, 5, 110, 127, 63, 126, 25, 30, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {39, 255, 17, 191, 184, 249, 147, 190, 81, 16, 8, 191, 235, 141, 213, 61, 120, 227, 181, 62, 197, 120, 136, 190, 97, 119, 1, 190, 83, 150, 171, 61, 202, 86, 116, 60, 201, 21, 236, 62, 92, 42, 133, 190, 122, 97, 212, 190, 205, 61, 27, 191, 251, 140, 32, 63, 244, 164, 68, 191, 243, 248, 82, 61, 163, 80, 6, 191, 125, 25, 98, 191, 130, 209, 145, 190, 169, 70, 234, 62, 243, 190, 230, 61, 73, 90, 39, 191, 36, 49, 6, 63, 146, 190, 62, 63, 59, 208, 160, 190, 118, 76, 233, 62, 104, 117, 1, 190, 57, 86, 178, 62, 150, 80, 114, 189, 66, 197, 145, 62, 188, 16, 12, 63, 119, 145, 81, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {118, 145, 251, 190, 63, 8, 164, 190, 45, 227, 0, 191, 157, 218, 137, 190, 53, 7, 94, 189, 114, 151, 170, 190, 210, 228, 146, 188, 67, 195, 142, 61, 158, 155, 221, 61, 255, 158, 209, 61, 255, 96, 201, 190, 110, 91, 27, 60, 217, 148, 10, 63, 241, 96, 141, 61, 243, 153, 42, 189, 8, 207, 179, 62, 153, 187, 205, 190, 122, 135, 192, 189, 41, 103, 59, 62, 109, 170, 84, 62, 224, 232, 21, 191, 48, 204, 134, 61, 34, 17, 217, 60, 27, 241, 3, 189, 40, 20, 9, 191, 6, 130, 229, 61, 23, 21, 229, 190, 44, 64, 18, 62, 216, 245, 183, 61, 3, 210, 157, 190, 18, 146, 240, 61, 114, 111, 129, 190, 79, 22, 251, 189, 29, 124, 141, 187, 165, 178, 127, 190, 136, 51, 38, 190, 110, 70, 226, 187, 108, 76, 64, 190, 186, 185, 61, 190, 125, 243, 4, 190, 220, 193, 13, 62, 201, 188, 138, 60, 176, 45, 100, 189, 185, 115, 121, 190, 165, 160, 206, 58, 55, 65, 205, 189, 50, 8, 21, 190, 152, 73, 186, 61, 43, 251, 218, 61, 133, 212, 191, 61, 163, 71, 15, 62, 135, 62, 190, 187, 152, 66, 168, 60, 41, 184, 105, 189, 27, 160, 71, 190, 98, 163, 248, 61, 87, 233, 65, 190, 103, 88, 139, 189, 35, 123, 236, 189, 95, 223, 153, 60, 239, 6, 143, 59, 80, 26, 48, 189, 133, 87, 104, 190, 69, 46, 77, 190, 202, 211, 198, 190, 3, 164, 85, 191, 91, 240, 224, 190, 83, 210, 197, 61, 165, 13, 86, 189, 248, 251, 17, 190, 115, 112, 214, 62, 227, 65, 165, 62, 135, 55, 7, 62, 244, 49, 12, 62, 26, 64, 186, 189, 230, 116, 86, 189, 6, 21, 75, 61, 17, 36, 245, 189, 83, 123, 235, 187, 73, 68, 196, 189, 113, 50, 89, 190, 95, 119, 148, 61, 28, 183, 21, 62, 167, 31, 76, 189, 194, 244, 192, 190, 242, 236, 186, 61, 228, 133, 114, 189, 92, 120, 72, 61, 4, 61, 138, 62, 166, 162, 22, 61, 108, 113, 153, 190, 136, 240, 21, 61, 210, 82, 103, 62, 54, 120, 223, 189, 136, 135, 178, 190, 73, 211, 224, 61, 29, 126, 55, 62, 179, 214, 94, 60, 54, 135, 50, 191, 179, 199, 167, 61, 7, 107, 20, 61, 128, 176, 99, 191, 208, 116, 250, 61, 94, 116, 111, 190, 242, 213, 197, 187, 214, 230, 103, 191, 89, 191, 47, 62, 179, 91, 221, 190, 186, 148, 197, 62, 167, 2, 51, 62, 255, 191, 201, 189, 111, 21, 22, 62, 170, 28, 214, 190, 104, 124, 243, 60, 162, 220, 74, 190, 24, 186, 129, 61, 98, 35, 80, 189, 154, 104, 85, 62, 247, 63, 96, 190, 159, 80, 26, 191, 159, 168, 225, 190, 3, 207, 168, 62, 47, 81, 86, 190, 168, 222, 74, 62, 164, 96, 189, 190, 182, 178, 92, 190, 127, 75, 63, 62, 67, 16, 196, 62, 61, 197, 3, 61, 110, 165, 46, 188, 162, 21, 54, 190, 67, 208, 177, 189, 84, 60, 219, 189, 219, 113, 12, 62, 179, 109, 6, 62, 215, 182, 41, 62, 221, 238, 78, 189, 135, 178, 199, 189, 88, 254, 58, 190, 251, 222, 81, 189, 229, 155, 6, 62, 164, 67, 174, 60, 204, 177, 229, 187, 77, 79, 96, 61, 63, 217, 61, 190, 17, 30, 18, 61, 4, 129, 2, 189, 184, 143, 5, 190, 147, 71, 9, 189, 47, 255, 49, 190, 110, 254, 88, 189, 104, 7, 53, 190, 11, 3, 141, 189, 136, 224, 50, 190, 23, 248, 146, 61, 94, 238, 202, 189, 238, 169, 180, 59, 140, 135, 201, 60, 248, 3, 187, 61, 149, 107, 24, 57, 76, 94, 187, 191, 100, 82, 76, 190, 156, 252, 185, 190, 10, 182, 104, 189, 202, 204, 243, 61, 185, 76, 252, 61, 26, 165, 27, 191, 239, 69, 12, 63, 75, 88, 12, 191, 250, 188, 143, 190, 73, 178, 56, 190, 86, 28, 70, 190, 231, 140, 121, 61, 221, 171, 101, 62, 123, 178, 133, 60, 141, 229, 160, 189, 9, 85, 116, 190, 210, 180, 80, 62, 79, 63, 192, 62, 44, 253, 53, 190, 145, 20, 129, 63, 123, 66, 185, 190, 1, 178, 146, 190, 115, 100, 114, 62, 203, 108, 239, 190, 167, 189, 83, 62, 202, 164, 191, 190, 75, 207, 16, 63, 187, 242, 17, 191, 150, 193, 58, 189, 208, 254, 193, 189, 189, 32, 225, 62, 227, 186, 129, 61, 244, 48, 42, 60, 161, 147, 14, 190, 174, 230, 29, 62, 229, 164, 105, 62, 36, 157, 82, 62, 170, 139, 118, 190, 131, 46, 11, 190, 24, 29, 216, 189, 90, 117, 213, 61, 52, 218, 221, 61, 58, 157, 130, 61, 126, 134, 151, 190, 20, 236, 116, 62, 74, 178, 193, 190, 125, 83, 121, 190, 197, 51, 99, 62, 169, 63, 47, 191, 138, 55, 91, 189, 99, 126, 146, 61, 189, 59, 128, 62, 245, 190, 71, 189, 242, 199, 242, 189, 168, 16, 83, 188, 58, 245, 185, 61, 183, 175, 173, 62, 205, 72, 81, 61, 98, 105, 62, 61, 2, 79, 142, 190, 109, 59, 20, 62, 148, 207, 55, 189, 254, 116, 230, 188, 52, 98, 35, 62, 65, 160, 140, 62, 142, 215, 120, 191, 139, 171, 104, 62, 230, 213, 179, 189, 94, 64, 190, 62, 185, 73, 140, 190, 227, 245, 109, 190, 232, 54, 186, 190, 65, 65, 132, 62, 90, 146, 14, 62, 52, 65, 174, 62, 160, 174, 23, 191, 244, 136, 192, 62, 149, 16, 148, 190, 64, 69, 153, 190, 186, 153, 136, 188, 0, 129, 144, 191, 117, 200, 227, 190, 114, 247, 142, 62, 155, 190, 177, 62, 223, 146, 39, 190, 140, 173, 224, 61, 130, 205, 164, 62, 80, 146, 187, 61, 36, 186, 218, 61, 3, 175, 31, 62, 148, 190, 149, 61, 155, 17, 67, 191, 198, 2, 6, 61, 168, 129, 235, 188, 39, 114, 51, 62, 181, 81, 55, 62, 242, 224, 210, 61, 135, 248, 78, 191, 71, 14, 42, 62, 115, 160, 207, 189, 125, 252, 137, 62, 45, 210, 240, 61, 54, 18, 14, 189, 96, 186, 152, 190, 27, 220, 249, 190, 240, 47, 112, 190, 243, 61, 115, 62, 23, 149, 15, 191, 35, 244, 178, 190, 10, 45, 212, 61, 200, 212, 177, 190, 3, 156, 68, 62, 131, 249, 90, 61, 226, 157, 36, 62, 93, 99, 8, 191, 157, 51, 160, 61, 16, 211, 236, 189, 227, 97, 70, 189, 67, 219, 55, 62, 219, 29, 228, 62, 5, 133, 92, 188, 50, 57, 145, 62, 138, 123, 123, 62, 145, 187, 45, 189, 102, 141, 57, 62, 198, 86, 150, 62, 174, 194, 39, 190, 41, 92, 136, 60, 37, 27, 226, 61, 205, 192, 172, 61, 10, 104, 103, 189, 128, 233, 240, 189, 158, 110, 204, 189, 207, 48, 7, 190, 229, 181, 45, 59, 8, 212, 33, 190, 74, 209, 30, 190, 213, 168, 83, 61, 113, 113, 33, 190, 34, 25, 30, 62, 244, 249, 22, 190, 38, 126, 131, 189, 168, 82, 138, 189, 92, 7, 17, 190, 103, 138, 247, 61, 217, 176, 132, 189, 147, 202, 224, 59, 110, 190, 60, 190, 229, 244, 28, 62, 255, 14, 39, 62, 57, 204, 133, 61, 163, 117, 155, 188, 32, 240, 49, 61, 180, 123, 228, 188, 137, 251, 169, 189, 103, 183, 212, 189, 240, 189, 61, 190, 184, 225, 35, 190, 109, 38, 140, 60, 250, 31, 145, 61, 182, 19, 33, 190, 138, 163, 204, 189, 226, 50, 67, 190, 151, 114, 0, 190, 43, 208, 40, 61, 249, 106, 108, 61, 71, 228, 106, 61, 18, 177, 180, 60, 239, 251, 0, 190, 82, 198, 183, 61, 0, 225, 212, 189, 137, 168, 189, 189, 247, 169, 186, 189, 81, 74, 31, 187, 75, 99, 234, 189, 178, 75, 20, 62, 61, 111, 57, 190, 48, 15, 87, 189, 8, 48, 236, 61, 196, 7, 28, 62, 209, 3, 216, 60, 71, 211, 86, 190, 243, 183, 53, 190, 97, 20, 24, 62, 110, 212, 167, 189, 119, 29, 249, 188, 2, 230, 195, 188, 233, 220, 189, 189, 66, 128, 139, 189, 14, 152, 6, 187, 16, 80, 163, 188, 171, 210, 78, 62, 62, 107, 13, 189, 25, 215, 209, 190, 169, 141, 145, 61, 47, 46, 91, 62, 28, 51, 39, 62, 183, 207, 16, 62, 119, 130, 240, 59, 188, 147, 29, 61, 155, 33, 248, 190, 241, 130, 54, 191, 106, 61, 237, 190, 200, 50, 15, 191, 82, 67, 8, 190, 189, 23, 237, 60, 139, 186, 131, 62, 233, 115, 150, 62, 202, 174, 63, 62, 227, 225, 15, 62, 166, 118, 129, 190, 9, 4, 100, 61, 137, 48, 215, 190, 140, 242, 82, 62, 100, 130, 17, 62, 51, 57, 233, 62, 72, 160, 20, 62, 193, 164, 90, 61, 218, 63, 113, 62, 186, 255, 17, 189, 216, 212, 171, 190, 47, 172, 18, 63, 205, 123, 21, 190, 110, 194, 2, 191, 216, 34, 30, 191, 41, 95, 127, 190, 113, 227, 216, 189, 86, 225, 123, 61, 29, 8, 64, 190, 34, 144, 248, 60, 104, 45, 133, 62, 176, 211, 151, 62, 73, 91, 200, 61, 79, 211, 162, 190, 226, 60, 7, 190, 228, 14, 72, 62, 2, 250, 166, 59, 236, 93, 90, 61, 70, 3, 42, 188, 212, 69, 193, 189, 224, 58, 150, 62, 109, 192, 163, 62, 223, 231, 125, 62, 80, 244, 34, 191, 123, 207, 31, 189, 181, 139, 99, 189, 82, 133, 40, 190, 171, 231, 120, 191, 100, 249, 248, 61, 191, 180, 164, 190, 168, 248, 149, 61, 242, 157, 182, 62, 0, 125, 38, 190, 183, 91, 184, 61, 188, 75, 156, 61, 186, 103, 136, 191, 108, 136, 156, 61, 169, 243, 12, 191, 254, 235, 174, 189, 214, 154, 196, 62, 164, 134, 44, 61, 221, 164, 22, 62, 76, 1, 189, 189, 225, 15, 39, 62, 132, 121, 117, 190, 183, 194, 203, 189, 228, 136, 190, 61, 27, 51, 151, 190, 221, 122, 66, 189, 128, 0, 6, 61, 6, 29, 27, 190, 235, 136, 39, 62, 195, 85, 183, 61, 204, 9, 1, 62, 96, 226, 55, 62, 34, 23, 61, 191, 222, 142, 40, 61, 200, 131, 55, 62, 19, 229, 137, 61, 98, 140, 201, 188, 135, 207, 152, 189, 220, 48, 0, 188, 49, 77, 128, 61, 236, 27, 131, 62, 96, 127, 224, 190, 76, 67, 186, 62, 63, 227, 73, 191, 239, 182, 93, 62, 216, 124, 200, 62, 247, 203, 79, 62, 92, 72, 233, 61, 26, 78, 140, 62, 222, 157, 186, 62, 236, 206, 153, 190, 17, 41, 46, 190, 147, 108, 161, 189, 128, 81, 164, 62, 19, 150, 7, 61, 187, 135, 35, 62, 251, 175, 177, 190, 60, 115, 69, 60, 61, 236, 142, 190, 53, 121, 29, 190, 95, 197, 3, 61, 83, 146, 225, 190, 145, 168, 200, 190, 5, 12, 159, 62, 101, 29, 45, 62, 3, 50, 103, 190, 96, 176, 97, 62, 96, 247, 32, 62, 255, 236, 232, 62, 116, 37, 58, 62, 232, 117, 115, 62, 213, 162, 36, 190, 219, 131, 193, 190, 118, 47, 94, 62, 126, 162, 210, 190, 65, 125, 18, 62, 46, 139, 194, 189, 233, 20, 36, 190, 132, 122, 162, 56, 10, 25, 198, 189, 113, 187, 211, 61, 117, 149, 168, 189, 27, 251, 212, 189, 83, 123, 39, 62, 183, 116, 172, 62, 56, 140, 175, 62, 214, 56, 0, 61, 192, 93, 118, 62, 127, 61, 156, 61, 69, 254, 254, 190, 19, 19, 80, 62, 250, 236, 25, 62, 33, 120, 70, 62, 198, 107, 135, 61, 41, 246, 166, 189, 8, 235, 90, 62, 28, 138, 205, 61, 153, 50, 64, 61, 124, 25, 157, 189, 249, 225, 159, 188, 190, 150, 155, 62, 98, 151, 243, 189, 177, 162, 111, 189, 46, 147, 47, 62, 129, 28, 48, 62, 251, 63, 238, 62, 35, 142, 220, 190, 8, 22, 130, 190, 189, 98, 58, 61, 105, 173, 102, 62, 159, 46, 36, 62, 119, 88, 201, 190, 92, 242, 176, 62, 125, 102, 189, 189, 207, 116, 144, 189, 133, 224, 226, 189, 123, 47, 77, 190, 203, 208, 200, 62, 132, 34, 60, 191, 1, 6, 57, 190, 42, 32, 238, 191, 179, 87, 183, 189, 110, 140, 165, 190, 210, 107, 244, 189, 42, 91, 33, 189, 190, 197, 212, 190, 36, 69, 13, 190, 66, 67, 119, 62, 38, 65, 95, 61, 212, 243, 209, 190, 116, 180, 251, 61, 67, 63, 212, 61, 198, 25, 14, 190, 103, 41, 56, 59, 161, 133, 17, 62, 213, 5, 53, 190, 56, 128, 45, 190, 195, 145, 164, 189, 51, 34, 196, 189, 51, 238, 89, 189, 52, 5, 246, 189, 135, 85, 39, 62, 68, 236, 10, 190, 94, 98, 191, 189, 246, 22, 13, 190, 129, 200, 100, 61, 189, 0, 251, 61, 36, 234, 123, 61, 247, 116, 19, 61, 165, 141, 146, 189, 115, 229, 12, 61, 138, 121, 155, 61, 170, 152, 130, 189, 219, 41, 0, 190, 186, 39, 209, 61, 202, 58, 120, 189, 223, 164, 250, 60, 143, 196, 243, 60, 75, 33, 31, 190, 36, 43, 240, 189, 141, 135, 18, 62, 103, 250, 132, 189, 12, 187, 249, 61, 181, 221, 165, 189, 91, 168, 28, 190, 92, 46, 36, 62, 99, 73, 246, 189, 215, 73, 243, 188, 104, 138, 18, 190, 50, 159, 18, 61, 249, 12, 23, 61, 243, 169, 143, 60, 101, 105, 50, 190, 244, 218, 33, 190, 250, 36, 209, 61, 92, 98, 29, 190, 106, 116, 57, 190, 79, 113, 182, 61, 241, 122, 154, 189, 69, 34, 192, 61, 151, 51, 191, 189, 146, 179, 9, 189, 7, 47, 69, 189, 125, 22, 44, 190, 119, 245, 42, 61, 76, 192, 111, 61, 250, 251, 151, 61, 65, 185, 150, 189, 40, 107, 14, 190, 46, 141, 42, 62, 66, 40, 35, 190, 243, 246, 216, 189, 12, 159, 40, 189, 208, 114, 165, 59, 248, 127, 127, 59, 174, 38, 139, 189, 40, 165, 157, 189, 73, 73, 166, 189, 21, 163, 14, 190, 146, 106, 237, 189, 87, 185, 59, 61, 213, 221, 225, 189, 137, 106, 169, 61, 194, 162, 167, 189, 86, 1, 5, 61, 160, 208, 27, 59, 55, 237, 2, 189, 240, 148, 195, 61, 49, 78, 54, 190, 212, 30, 177, 61, 216, 142, 37, 189, 252, 124, 103, 61, 198, 190, 54, 189, 210, 254, 241, 60, 21, 246, 1, 62, 64, 233, 60, 190, 65, 235, 66, 188, 178, 189, 210, 189, 171, 94, 29, 190, 122, 25, 8, 190, 55, 121, 173, 61, 0, 159, 71, 186, 5, 220, 151, 189, 104, 213, 69, 190, 149, 130, 186, 61, 114, 47, 5, 190, 255, 180, 59, 189, 115, 123, 114, 60, 111, 191, 130, 190, 105, 152, 146, 61, 20, 147, 50, 190, 224, 0, 119, 189, 137, 13, 52, 189, 117, 153, 96, 190, 13, 178, 142, 61, 76, 31, 16, 187, 96, 147, 17, 190, 128, 15, 5, 189, 197, 236, 198, 189, 78, 184, 4, 190, 213, 150, 207, 189, 228, 87, 45, 190, 6, 95, 96, 189, 150, 224, 63, 187, 103, 185, 130, 189, 83, 115, 231, 189, 35, 200, 244, 189, 147, 244, 159, 61, 127, 237, 128, 189, 167, 147, 9, 62, 60, 111, 176, 189, 171, 4, 238, 189, 5, 224, 154, 61, 26, 190, 17, 189, 181, 125, 38, 190, 163, 101, 145, 188, 115, 76, 199, 61, 84, 221, 111, 60, 50, 150, 130, 188, 71, 29, 158, 61, 220, 230, 0, 61, 224, 162, 83, 59, 125, 52, 48, 190, 222, 0, 201, 186, 4, 216, 16, 61, 43, 234, 39, 60, 1, 8, 142, 61, 163, 126, 163, 189, 121, 65, 169, 60, 190, 23, 171, 190, 31, 9, 155, 189, 28, 106, 11, 191, 188, 137, 25, 62, 26, 191, 211, 188, 108, 19, 141, 191, 0, 107, 255, 190, 86, 95, 147, 191, 160, 94, 128, 190, 83, 79, 248, 60, 41, 178, 71, 188, 244, 154, 67, 188, 36, 120, 57, 62, 116, 103, 150, 190, 54, 102, 218, 62, 12, 248, 63, 190, 46, 73, 76, 190, 114, 127, 130, 190, 120, 83, 251, 61, 88, 229, 147, 190, 8, 35, 65, 62, 255, 144, 93, 191, 50, 41, 23, 191, 196, 239, 168, 190, 105, 100, 42, 190, 251, 130, 130, 188, 165, 105, 145, 190, 40, 146, 133, 191, 215, 75, 231, 60, 93, 217, 145, 62, 69, 222, 235, 189, 83, 80, 81, 62, 120, 112, 132, 191, 156, 31, 7, 190, 229, 54, 151, 62, 94, 154, 174, 189, 56, 195, 140, 190, 100, 92, 58, 189, 214, 154, 43, 61, 129, 14, 248, 189, 124, 46, 105, 186, 150, 114, 224, 61, 134, 165, 138, 189, 75, 225, 217, 61, 166, 117, 136, 189, 83, 180, 142, 62, 51, 107, 150, 61, 44, 136, 186, 190, 69, 33, 14, 190, 123, 14, 28, 62, 0, 131, 179, 190, 61, 213, 187, 189, 220, 78, 131, 60, 45, 200, 198, 188, 226, 238, 193, 190, 231, 143, 162, 62, 160, 76, 52, 190, 208, 20, 237, 190, 73, 52, 190, 62, 119, 16, 74, 61, 114, 197, 171, 61, 150, 33, 4, 189, 194, 245, 153, 62, 131, 248, 19, 190, 122, 157, 3, 190, 70, 205, 120, 191, 95, 93, 75, 189, 4, 138, 144, 189, 235, 235, 235, 60, 55, 203, 70, 62, 248, 74, 132, 62, 177, 168, 166, 62, 146, 43, 40, 62, 189, 247, 8, 63, 248, 216, 152, 62, 60, 96, 81, 61, 36, 58, 13, 191, 107, 149, 243, 60, 110, 166, 18, 189, 78, 170, 134, 61, 181, 137, 242, 62, 82, 163, 55, 62, 73, 221, 82, 189, 51, 237, 25, 191, 76, 125, 35, 189, 35, 171, 229, 189, 110, 247, 33, 190, 203, 128, 152, 190, 91, 249, 104, 191, 209, 31, 108, 61, 49, 93, 186, 61, 35, 74, 175, 62, 155, 127, 3, 189, 205, 238, 225, 189, 79, 189, 86, 191, 201, 187, 160, 190, 36, 222, 214, 62, 148, 192, 25, 63, 101, 242, 150, 189, 40, 68, 36, 62, 20, 68, 134, 189, 189, 188, 168, 61, 249, 1, 165, 189, 26, 163, 112, 62, 94, 83, 114, 60, 231, 246, 13, 190, 231, 82, 47, 62, 156, 176, 164, 191, 37, 130, 121, 62, 230, 45, 128, 61, 97, 67, 177, 190, 240, 67, 254, 61, 14, 221, 222, 61, 170, 198, 131, 189, 184, 239, 158, 62, 253, 209, 164, 191, 200, 236, 120, 189, 195, 161, 130, 61, 108, 201, 118, 190, 86, 18, 31, 62, 146, 180, 221, 61, 157, 250, 135, 61, 55, 30, 133, 191, 16, 14, 131, 62, 135, 207, 147, 190, 23, 87, 114, 62, 109, 82, 214, 190, 8, 189, 73, 190, 47, 25, 130, 62, 225, 5, 177, 62, 188, 229, 51, 190, 72, 44, 142, 62, 6, 99, 100, 62, 168, 130, 105, 189, 8, 85, 116, 189, 138, 88, 242, 60, 177, 137, 184, 62, 18, 84, 185, 189, 228, 135, 154, 60, 65, 56, 175, 190, 184, 21, 23, 62, 64, 85, 1, 190, 251, 206, 16, 190, 89, 167, 252, 61, 7, 58, 152, 190, 85, 81, 137, 190, 148, 91, 168, 62, 104, 2, 144, 62, 31, 32, 201, 188, 106, 24, 18, 62, 253, 24, 121, 60, 122, 63, 78, 189, 8, 123, 138, 62, 206, 89, 78, 62, 149, 74, 10, 62, 220, 3, 40, 190, 124, 155, 145, 62, 66, 202, 84, 190, 137, 87, 129, 61, 79, 166, 190, 189, 243, 202, 249, 189, 227, 29, 156, 189, 203, 41, 76, 189, 34, 104, 202, 61, 45, 125, 29, 61, 213, 65, 173, 189, 185, 44, 53, 188, 110, 46, 198, 61, 3, 143, 166, 189, 174, 187, 237, 188, 45, 226, 52, 60, 56, 223, 34, 62, 37, 26, 111, 61, 162, 129, 24, 190, 148, 171, 28, 60, 0, 28, 4, 190, 177, 160, 223, 61, 178, 205, 174, 189, 9, 49, 84, 190, 212, 163, 24, 62, 115, 230, 170, 189, 97, 58, 56, 190, 210, 94, 58, 190, 142, 233, 248, 61, 253, 153, 131, 189, 92, 85, 234, 189, 254, 10, 16, 61, 189, 35, 198, 189, 209, 174, 79, 190, 179, 151, 112, 190, 160, 113, 12, 190, 104, 40, 186, 190, 197, 40, 165, 191, 94, 166, 21, 191, 112, 194, 131, 62, 63, 230, 92, 62, 148, 251, 42, 191, 190, 216, 92, 63, 232, 10, 105, 61, 199, 123, 21, 62, 39, 77, 75, 61, 215, 185, 112, 190, 141, 32, 109, 190, 204, 67, 109, 62, 96, 53, 0, 61, 40, 169, 49, 61, 123, 251, 122, 62, 101, 233, 79, 191, 140, 145, 222, 62, 62, 4, 20, 190, 15, 230, 8, 190, 69, 85, 180, 190, 152, 144, 180, 189, 142, 209, 72, 61, 213, 66, 247, 188, 93, 181, 135, 62, 22, 39, 209, 59, 92, 92, 47, 191, 59, 59, 250, 61, 158, 49, 149, 61, 209, 231, 228, 60, 131, 135, 95, 62, 229, 64, 135, 62, 117, 103, 242, 188, 216, 165, 255, 61, 88, 225, 152, 189, 103, 50, 87, 62, 180, 43, 141, 186, 17, 246, 160, 62, 50, 194, 232, 190, 39, 46, 242, 190, 193, 133, 145, 189, 96, 118, 139, 62, 39, 104, 240, 61, 99, 62, 167, 60, 2, 228, 38, 190, 101, 206, 255, 61, 50, 11, 196, 190, 34, 185, 67, 190, 251, 106, 83, 62, 37, 116, 84, 191, 87, 228, 239, 190, 198, 114, 29, 189, 143, 105, 163, 62, 253, 226, 149, 61, 66, 166, 240, 61, 106, 144, 167, 62, 254, 22, 199, 62, 236, 98, 29, 62, 72, 149, 28, 62, 192, 59, 65, 188, 213, 123, 167, 190, 237, 81, 69, 62, 223, 134, 185, 190, 227, 137, 155, 62, 56, 54, 12, 190, 186, 16, 33, 62, 34, 75, 134, 62, 215, 55, 18, 190, 71, 177, 161, 62, 117, 49, 126, 189, 23, 130, 94, 190, 151, 219, 127, 189, 106, 230, 88, 62, 244, 179, 231, 62, 147, 52, 188, 191, 218, 207, 203, 190, 223, 240, 3, 192, 134, 188, 105, 62, 149, 27, 36, 62, 115, 73, 55, 190, 208, 9, 161, 188, 204, 161, 127, 190, 211, 147, 212, 189, 143, 41, 99, 62, 44, 79, 78, 62, 132, 191, 212, 190, 54, 154, 78, 62, 4, 199, 213, 61, 215, 211, 233, 61, 237, 210, 6, 190, 255, 69, 28, 62, 118, 171, 238, 189, 250, 231, 112, 60, 161, 11, 191, 58, 148, 37, 2, 190, 255, 48, 104, 190, 177, 135, 241, 190, 171, 31, 9, 191, 157, 193, 63, 190, 194, 14, 158, 189, 45, 72, 27, 62, 167, 88, 157, 190, 153, 232, 145, 61, 50, 74, 134, 62, 133, 175, 22, 62, 217, 80, 11, 61, 89, 81, 239, 190, 104, 209, 88, 190, 18, 21, 147, 62, 179, 154, 87, 189, 128, 184, 148, 190, 142, 10, 123, 62, 106, 133, 243, 190, 173, 149, 245, 62, 210, 20, 132, 62, 128, 77, 135, 62, 196, 74, 211, 190, 151, 99, 12, 189, 130, 124, 90, 189, 111, 3, 189, 61, 211, 241, 86, 191, 92, 231, 12, 62, 104, 9, 43, 191, 85, 0, 85, 62, 220, 75, 217, 62, 44, 91, 141, 190, 174, 132, 39, 60, 26, 175, 139, 190, 109, 2, 8, 191, 233, 147, 221, 189, 121, 16, 1, 191, 7, 214, 145, 62, 255, 200, 24, 189, 91, 198, 255, 190, 202, 57, 6, 63, 116, 252, 1, 62, 170, 64, 86, 62, 221, 149, 29, 190, 81, 15, 252, 190, 92, 71, 219, 190, 148, 63, 249, 61, 138, 64, 111, 61, 10, 193, 124, 190, 190, 49, 104, 61, 89, 239, 140, 190, 179, 69, 78, 189, 218, 182, 48, 62, 194, 75, 250, 185, 139, 213, 255, 190, 17, 180, 113, 188, 71, 52, 41, 189, 206, 198, 161, 59, 198, 64, 16, 190, 62, 141, 176, 61, 25, 103, 228, 189, 142, 109, 35, 61, 184, 62, 170, 62, 68, 144, 52, 190, 230, 9, 81, 62, 194, 203, 223, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {161, 127, 33, 62, 29, 195, 82, 189, 106, 244, 128, 62, 87, 28, 58, 61, 149, 149, 239, 189, 158, 124, 15, 62, 52, 91, 71, 62, 244, 159, 10, 62, 47, 116, 129, 190, 6, 146, 4, 60, 106, 172, 228, 189, 104, 139, 138, 61, 34, 21, 220, 60, 9, 214, 155, 60, 140, 231, 7, 62, 112, 238, 179, 189, 17, 161, 133, 188, 25, 177, 222, 189, 174, 79, 35, 62, 87, 12, 51, 190, 147, 184, 178, 189, 37, 54, 251, 189, 208, 115, 19, 62, 100, 7, 74, 190, 89, 176, 190, 61, 131, 80, 161, 62, 126, 104, 225, 61, 30, 184, 170, 62, 126, 168, 14, 62, 132, 197, 234, 61, 121, 216, 130, 62, 206, 158, 70, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 30, 205, 62, 108, 91, 76, 60, 156, 149, 235, 62, 170, 61, 241, 62, 105, 133, 150, 61, 79, 65, 151, 191, 74, 237, 163, 189, 237, 53, 62, 191, 115, 220, 190, 62, 65, 191, 116, 61, 152, 192, 160, 189, 69, 70, 176, 62, 170, 113, 10, 63, 169, 202, 102, 62, 185, 228, 157, 190, 171, 4, 4, 61, 130, 196, 44, 190, 204, 94, 73, 61, 100, 27, 211, 188, 171, 246, 189, 61, 99, 208, 238, 189, 179, 243, 78, 191, 140, 121, 235, 62, 145, 216, 49, 63, 252, 108, 15, 191, 205, 195, 221, 189, 235, 243, 219, 189, 152, 101, 59, 63, 94, 219, 158, 190, 111, 7, 46, 190, 56, 151, 15, 63, 199, 238, 189, 62, 84, 10, 7, 190, 115, 36, 4, 62, 10, 227, 144, 190, 164, 201, 245, 189, 108, 136, 15, 190, 211, 141, 195, 61, 60, 108, 18, 190, 235, 18, 110, 62, 139, 162, 209, 60, 44, 241, 41, 62, 227, 63, 196, 61, 210, 148, 115, 188, 120, 83, 252, 61, 133, 183, 31, 62, 193, 44, 147, 190, 66, 160, 237, 190, 15, 172, 202, 188, 115, 112, 246, 61, 164, 229, 4, 61, 103, 91, 5, 62, 212, 240, 237, 59, 252, 65, 204, 61, 173, 97, 189, 62, 11, 27, 89, 62, 232, 68, 130, 62, 102, 72, 139, 190, 15, 252, 142, 59, 197, 106, 172, 190, 71, 104, 227, 189, 102, 48, 146, 190, 191, 217, 192, 188, 20, 203, 84, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 239, 131, 189, 15, 161, 136, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {64, 76, 12, 192, 252, 159, 60, 191, 31, 47, 180, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {136, 223, 12, 63, 46, 202, 151, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0036/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}