// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 213, 97, 63, 180, 31, 184, 63, 204, 104, 207, 62, 178, 137, 252, 189, 183, 187, 198, 191, 1, 222, 19, 191, 204, 191, 114, 62, 40, 146, 110, 191, 113, 87, 45, 189, 246, 32, 76, 190, 158, 91, 80, 63, 194, 200, 5, 190, 218, 170, 140, 190, 161, 56, 192, 190, 237, 156, 132, 61, 173, 93, 135, 61, 64, 5, 29, 63, 56, 158, 144, 190, 70, 46, 20, 61, 41, 165, 132, 191, 241, 111, 156, 190, 158, 57, 200, 62, 136, 27, 184, 61, 126, 150, 1, 191, 244, 122, 39, 63, 253, 20, 147, 191, 113, 242, 135, 190, 161, 133, 92, 63, 225, 180, 169, 61, 208, 233, 192, 60, 2, 210, 162, 190, 177, 11, 133, 63, 242, 149, 189, 62, 98, 112, 245, 62, 246, 173, 131, 190, 66, 85, 187, 62, 21, 27, 75, 191, 45, 186, 137, 63, 37, 146, 171, 62, 136, 13, 41, 191, 44, 145, 35, 191, 28, 216, 9, 189, 226, 208, 137, 190, 204, 49, 224, 61, 84, 84, 168, 190, 73, 70, 87, 189, 46, 244, 64, 190, 166, 97, 251, 62, 249, 255, 78, 189, 198, 232, 62, 62, 183, 131, 14, 191, 61, 172, 77, 63, 103, 44, 25, 191, 187, 36, 147, 190, 9, 198, 161, 62, 132, 64, 167, 62, 70, 219, 8, 191, 10, 254, 132, 62, 144, 153, 96, 191, 31, 237, 117, 189, 48, 23, 117, 62, 53, 233, 111, 63, 122, 40, 47, 62, 24, 229, 238, 59, 119, 239, 14, 62, 248, 88, 181, 62, 165, 56, 138, 62, 180, 70, 180, 190, 169, 200, 25, 190, 204, 174, 216, 62, 153, 166, 62, 62, 179, 8, 107, 190, 147, 87, 66, 191, 70, 200, 183, 190, 62, 219, 5, 191, 45, 93, 176, 190, 93, 45, 58, 189, 27, 50, 248, 60, 232, 64, 168, 190, 109, 131, 75, 191, 25, 3, 69, 191, 177, 124, 3, 62, 138, 30, 34, 63, 136, 15, 136, 61, 107, 239, 100, 63, 148, 184, 155, 191, 92, 22, 137, 190, 98, 121, 13, 63, 93, 6, 86, 63, 122, 8, 223, 62, 94, 227, 7, 191, 179, 3, 41, 191, 255, 183, 136, 60, 42, 164, 34, 191, 82, 163, 120, 63, 1, 171, 248, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 50, 17, 191, 178, 15, 109, 190, 134, 87, 56, 191, 150, 214, 104, 62, 116, 51, 196, 62, 207, 95, 147, 190, 164, 105, 6, 190, 35, 205, 128, 61, 196, 213, 181, 60, 246, 218, 238, 62, 108, 237, 159, 190, 196, 72, 233, 190, 116, 71, 241, 190, 187, 139, 36, 63, 223, 38, 67, 191, 26, 153, 156, 61, 35, 176, 232, 190, 121, 137, 92, 191, 234, 195, 105, 190, 138, 144, 7, 63, 210, 75, 218, 61, 160, 99, 31, 191, 157, 113, 19, 63, 128, 36, 66, 63, 93, 31, 160, 190, 102, 139, 255, 62, 97, 211, 94, 189, 38, 43, 187, 62, 176, 58, 120, 189, 225, 85, 145, 62, 118, 175, 17, 63, 230, 194, 89, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 248, 231, 190, 28, 120, 187, 189, 246, 24, 114, 190, 249, 40, 31, 190, 90, 98, 250, 187, 64, 105, 204, 190, 121, 225, 55, 62, 66, 179, 30, 62, 203, 175, 53, 62, 100, 186, 17, 62, 196, 104, 219, 190, 166, 54, 61, 189, 210, 37, 235, 62, 77, 8, 5, 62, 190, 168, 6, 187, 111, 78, 160, 62, 198, 134, 183, 190, 72, 82, 180, 61, 92, 219, 132, 62, 85, 209, 129, 62, 145, 127, 13, 191, 159, 117, 14, 189, 20, 100, 144, 61, 162, 12, 145, 60, 18, 116, 188, 190, 0, 112, 27, 62, 15, 88, 139, 190, 90, 12, 69, 62, 106, 134, 28, 62, 3, 112, 149, 190, 69, 113, 36, 62, 247, 71, 108, 190, 186, 243, 205, 189, 83, 1, 55, 187, 108, 175, 88, 190, 87, 79, 219, 189, 133, 220, 11, 60, 250, 123, 254, 189, 9, 24, 32, 190, 163, 122, 13, 190, 29, 232, 4, 62, 86, 221, 148, 60, 224, 214, 100, 189, 143, 29, 110, 190, 165, 160, 206, 58, 66, 181, 67, 189, 21, 171, 195, 189, 181, 123, 201, 61, 230, 113, 17, 62, 136, 102, 198, 61, 179, 55, 23, 62, 199, 191, 245, 186, 133, 78, 41, 61, 41, 184, 105, 189, 123, 194, 74, 190, 82, 148, 226, 61, 253, 8, 29, 190, 42, 220, 18, 189, 22, 223, 224, 189, 25, 223, 16, 61, 76, 201, 233, 187, 111, 209, 142, 188, 142, 194, 79, 190, 14, 225, 47, 190, 237, 37, 193, 190, 104, 17, 79, 191, 48, 144, 200, 190, 122, 90, 116, 61, 199, 21, 49, 61, 238, 35, 9, 190, 152, 255, 207, 62, 125, 182, 164, 62, 245, 147, 11, 62, 105, 159, 14, 62, 149, 53, 140, 189, 70, 52, 190, 59, 175, 50, 181, 61, 173, 247, 23, 188, 81, 241, 219, 60, 18, 181, 48, 60, 29, 168, 92, 190, 67, 85, 200, 61, 68, 120, 228, 61, 201, 135, 46, 189, 187, 64, 195, 190, 182, 67, 220, 61, 86, 229, 133, 189, 197, 124, 33, 61, 94, 39, 138, 62, 106, 72, 178, 61, 9, 17, 164, 190, 204, 126, 80, 61, 227, 166, 107, 62, 152, 162, 181, 189, 138, 87, 124, 190, 93, 115, 220, 61, 180, 85, 65, 62, 15, 85, 212, 188, 115, 31, 140, 190, 116, 107, 74, 62, 185, 224, 126, 60, 110, 121, 82, 191, 180, 192, 249, 60, 249, 164, 115, 190, 195, 169, 81, 60, 143, 100, 67, 191, 104, 112, 37, 62, 175, 41, 233, 190, 71, 204, 199, 62, 224, 116, 23, 62, 96, 247, 184, 189, 131, 67, 227, 61, 145, 96, 188, 190, 104, 124, 243, 60, 37, 33, 66, 190, 85, 19, 64, 61, 55, 169, 153, 188, 6, 221, 197, 61, 60, 72, 145, 190, 231, 139, 6, 191, 9, 227, 160, 190, 164, 128, 175, 62, 20, 217, 10, 190, 43, 2, 145, 62, 166, 0, 141, 190, 43, 60, 75, 190, 8, 155, 28, 62, 7, 29, 222, 62, 61, 197, 3, 61, 110, 165, 46, 188, 162, 21, 54, 190, 67, 208, 177, 189, 84, 60, 219, 189, 219, 113, 12, 62, 179, 109, 6, 62, 215, 182, 41, 62, 221, 238, 78, 189, 135, 178, 199, 189, 88, 254, 58, 190, 251, 222, 81, 189, 229, 155, 6, 62, 164, 67, 174, 60, 204, 177, 229, 187, 77, 79, 96, 61, 63, 217, 61, 190, 17, 30, 18, 61, 4, 129, 2, 189, 184, 143, 5, 190, 147, 71, 9, 189, 47, 255, 49, 190, 110, 254, 88, 189, 104, 7, 53, 190, 11, 3, 141, 189, 136, 224, 50, 190, 23, 248, 146, 61, 94, 238, 202, 189, 238, 169, 180, 59, 140, 135, 201, 60, 248, 3, 187, 61, 149, 107, 24, 57, 137, 4, 173, 191, 221, 147, 118, 190, 12, 225, 215, 190, 230, 173, 249, 189, 48, 231, 71, 61, 158, 16, 209, 61, 81, 130, 2, 191, 217, 177, 5, 63, 41, 7, 3, 191, 47, 69, 144, 190, 41, 11, 89, 190, 98, 178, 208, 190, 192, 229, 37, 189, 32, 239, 14, 62, 207, 137, 204, 188, 74, 246, 199, 189, 86, 164, 134, 190, 129, 250, 40, 62, 40, 150, 177, 62, 103, 139, 44, 189, 244, 158, 131, 63, 40, 156, 184, 190, 62, 72, 147, 190, 23, 110, 71, 62, 84, 167, 5, 191, 197, 39, 8, 62, 91, 36, 208, 190, 41, 87, 0, 63, 62, 91, 12, 191, 212, 183, 138, 189, 214, 12, 28, 190, 157, 94, 177, 62, 99, 244, 172, 61, 53, 131, 54, 61, 246, 48, 80, 190, 171, 10, 251, 61, 233, 17, 79, 62, 32, 116, 89, 62, 176, 18, 54, 190, 249, 179, 253, 189, 161, 103, 192, 189, 131, 167, 231, 61, 132, 219, 240, 61, 139, 244, 207, 61, 250, 63, 131, 190, 219, 215, 90, 62, 40, 66, 197, 190, 110, 7, 94, 190, 54, 215, 106, 62, 200, 87, 10, 191, 167, 31, 22, 189, 156, 107, 178, 61, 10, 11, 142, 62, 147, 151, 155, 61, 217, 111, 199, 189, 159, 248, 75, 187, 80, 236, 184, 61, 75, 39, 156, 62, 179, 177, 135, 61, 14, 145, 42, 61, 167, 21, 137, 190, 243, 228, 37, 62, 62, 232, 88, 189, 220, 55, 108, 189, 231, 18, 40, 62, 134, 26, 172, 62, 235, 49, 134, 191, 52, 28, 94, 62, 15, 47, 5, 190, 222, 152, 197, 62, 69, 251, 48, 190, 41, 98, 100, 190, 17, 242, 175, 190, 96, 246, 136, 62, 199, 5, 49, 61, 123, 129, 168, 62, 36, 83, 35, 191, 112, 230, 177, 62, 119, 79, 134, 190, 33, 112, 166, 190, 48, 162, 6, 60, 30, 127, 118, 191, 186, 179, 211, 190, 180, 238, 155, 62, 168, 231, 182, 62, 134, 158, 34, 190, 89, 36, 12, 62, 57, 155, 170, 62, 138, 94, 236, 61, 163, 129, 159, 61, 71, 108, 63, 62, 7, 73, 125, 61, 111, 61, 62, 191, 139, 244, 2, 61, 183, 187, 74, 189, 25, 110, 10, 62, 146, 181, 129, 62, 2, 117, 172, 61, 56, 60, 48, 191, 168, 160, 55, 62, 63, 174, 130, 60, 117, 151, 132, 62, 48, 237, 217, 61, 182, 7, 105, 189, 38, 51, 179, 190, 146, 145, 13, 191, 139, 125, 144, 190, 167, 106, 146, 62, 164, 100, 0, 191, 220, 166, 136, 190, 101, 145, 3, 62, 183, 154, 147, 190, 71, 186, 65, 62, 48, 167, 34, 60, 255, 230, 21, 62, 66, 40, 19, 191, 176, 214, 197, 61, 140, 107, 227, 189, 210, 155, 145, 189, 29, 133, 33, 62, 131, 249, 235, 62, 128, 200, 90, 61, 97, 87, 143, 62, 213, 178, 139, 62, 204, 246, 209, 189, 185, 38, 145, 62, 235, 94, 198, 62, 84, 188, 208, 189, 41, 92, 136, 60, 37, 27, 226, 61, 205, 192, 172, 61, 10, 104, 103, 189, 128, 233, 240, 189, 158, 110, 204, 189, 207, 48, 7, 190, 229, 181, 45, 59, 8, 212, 33, 190, 74, 209, 30, 190, 213, 168, 83, 61, 113, 113, 33, 190, 34, 25, 30, 62, 244, 249, 22, 190, 38, 126, 131, 189, 168, 82, 138, 189, 92, 7, 17, 190, 103, 138, 247, 61, 217, 176, 132, 189, 147, 202, 224, 59, 110, 190, 60, 190, 229, 244, 28, 62, 255, 14, 39, 62, 57, 204, 133, 61, 163, 117, 155, 188, 32, 240, 49, 61, 180, 123, 228, 188, 137, 251, 169, 189, 103, 183, 212, 189, 240, 189, 61, 190, 184, 225, 35, 190, 109, 38, 140, 60, 250, 31, 145, 61, 182, 19, 33, 190, 138, 163, 204, 189, 226, 50, 67, 190, 151, 114, 0, 190, 43, 208, 40, 61, 249, 106, 108, 61, 71, 228, 106, 61, 18, 177, 180, 60, 239, 251, 0, 190, 82, 198, 183, 61, 0, 225, 212, 189, 137, 168, 189, 189, 247, 169, 186, 189, 81, 74, 31, 187, 75, 99, 234, 189, 178, 75, 20, 62, 61, 111, 57, 190, 48, 15, 87, 189, 8, 48, 236, 61, 196, 7, 28, 62, 209, 3, 216, 60, 71, 211, 86, 190, 243, 183, 53, 190, 97, 20, 24, 62, 110, 212, 167, 189, 119, 29, 249, 188, 2, 230, 195, 188, 233, 220, 189, 189, 66, 128, 139, 189, 14, 152, 6, 187, 16, 80, 163, 188, 21, 9, 216, 62, 99, 150, 153, 189, 43, 207, 141, 190, 128, 232, 195, 61, 78, 61, 131, 61, 237, 143, 34, 62, 158, 209, 191, 61, 98, 49, 128, 188, 232, 130, 205, 188, 42, 69, 255, 190, 17, 217, 64, 191, 143, 206, 136, 190, 78, 188, 4, 191, 5, 50, 116, 190, 6, 225, 90, 61, 49, 161, 225, 189, 80, 137, 146, 62, 104, 148, 13, 62, 183, 74, 1, 62, 218, 199, 201, 190, 139, 92, 26, 62, 215, 216, 205, 190, 139, 198, 27, 62, 169, 14, 4, 62, 248, 154, 236, 62, 152, 229, 44, 61, 66, 199, 30, 61, 209, 180, 152, 62, 3, 193, 192, 189, 97, 235, 24, 190, 46, 100, 225, 62, 57, 188, 19, 190, 52, 133, 251, 190, 212, 158, 228, 190, 123, 83, 231, 61, 36, 233, 14, 190, 172, 164, 113, 61, 176, 111, 196, 190, 65, 38, 68, 62, 26, 186, 146, 62, 100, 157, 154, 62, 189, 187, 177, 61, 106, 173, 63, 190, 93, 133, 113, 190, 19, 251, 174, 62, 75, 184, 187, 59, 95, 47, 148, 61, 158, 210, 206, 189, 81, 116, 46, 190, 226, 199, 193, 62, 151, 82, 117, 62, 199, 124, 110, 62, 58, 214, 34, 191, 192, 207, 5, 189, 231, 79, 142, 189, 5, 105, 51, 190, 169, 61, 87, 191, 81, 217, 216, 61, 13, 176, 112, 190, 162, 163, 155, 61, 254, 26, 184, 62, 161, 152, 49, 190, 77, 48, 46, 61, 158, 175, 81, 61, 196, 223, 131, 191, 241, 209, 153, 61, 220, 2, 145, 190, 116, 196, 6, 190, 55, 87, 227, 62, 143, 197, 50, 188, 4, 184, 48, 62, 214, 173, 12, 190, 153, 232, 65, 62, 82, 169, 90, 190, 36, 158, 221, 189, 8, 68, 95, 62, 134, 129, 162, 190, 202, 147, 70, 188, 93, 157, 31, 61, 51, 4, 150, 189, 231, 243, 7, 62, 42, 222, 92, 61, 186, 88, 150, 61, 155, 66, 111, 62, 19, 225, 59, 191, 197, 133, 127, 61, 10, 144, 48, 62, 92, 189, 160, 60, 180, 178, 245, 188, 228, 189, 126, 189, 30, 136, 173, 188, 206, 70, 136, 60, 249, 183, 145, 62, 148, 128, 182, 190, 156, 74, 214, 62, 130, 24, 77, 191, 23, 23, 96, 62, 105, 40, 198, 62, 164, 195, 50, 61, 207, 157, 206, 61, 7, 51, 114, 62, 191, 127, 199, 62, 9, 254, 159, 190, 40, 9, 27, 190, 78, 68, 161, 189, 155, 79, 168, 62, 196, 35, 50, 61, 120, 238, 64, 62, 10, 122, 146, 190, 118, 52, 0, 189, 126, 179, 159, 190, 217, 25, 255, 189, 218, 59, 34, 61, 136, 180, 224, 190, 205, 176, 181, 190, 134, 137, 162, 62, 221, 92, 62, 62, 25, 145, 190, 189, 61, 227, 117, 62, 200, 197, 45, 62, 165, 221, 221, 62, 19, 93, 24, 62, 129, 94, 118, 62, 201, 61, 46, 190, 251, 252, 192, 190, 198, 75, 104, 62, 202, 60, 221, 190, 100, 139, 243, 61, 9, 41, 103, 189, 30, 241, 234, 189, 82, 187, 4, 62, 104, 100, 17, 189, 30, 174, 13, 62, 210, 200, 84, 59, 239, 16, 24, 189, 142, 189, 93, 62, 66, 252, 176, 62, 77, 20, 175, 62, 245, 204, 88, 61, 73, 8, 23, 62, 49, 119, 220, 61, 83, 253, 224, 190, 220, 200, 57, 62, 159, 189, 204, 61, 113, 241, 94, 62, 196, 155, 114, 61, 203, 233, 28, 189, 107, 125, 81, 62, 25, 153, 35, 62, 196, 28, 155, 61, 14, 38, 5, 189, 151, 22, 150, 60, 250, 85, 154, 62, 7, 161, 169, 189, 206, 5, 205, 188, 215, 29, 66, 62, 235, 33, 38, 62, 19, 106, 204, 62, 42, 182, 191, 190, 247, 214, 78, 190, 74, 212, 127, 61, 110, 34, 126, 62, 34, 196, 177, 189, 211, 35, 159, 190, 22, 102, 182, 62, 172, 201, 83, 189, 112, 229, 68, 189, 154, 116, 175, 189, 135, 201, 88, 190, 236, 116, 200, 62, 200, 96, 41, 191, 28, 136, 90, 190, 151, 54, 235, 191, 17, 244, 59, 58, 124, 164, 108, 190, 76, 219, 15, 190, 113, 179, 87, 61, 197, 154, 246, 190, 3, 128, 129, 189, 209, 14, 127, 62, 170, 68, 166, 61, 201, 48, 162, 190, 207, 35, 16, 62, 166, 65, 248, 61, 252, 109, 17, 189, 139, 82, 143, 61, 144, 155, 94, 62, 216, 119, 47, 190, 8, 103, 60, 190, 229, 134, 159, 189, 11, 246, 45, 189, 4, 164, 1, 61, 52, 5, 246, 189, 135, 85, 39, 62, 68, 236, 10, 190, 94, 98, 191, 189, 246, 22, 13, 190, 129, 200, 100, 61, 189, 0, 251, 61, 36, 234, 123, 61, 247, 116, 19, 61, 165, 141, 146, 189, 115, 229, 12, 61, 138, 121, 155, 61, 170, 152, 130, 189, 219, 41, 0, 190, 186, 39, 209, 61, 202, 58, 120, 189, 223, 164, 250, 60, 143, 196, 243, 60, 75, 33, 31, 190, 36, 43, 240, 189, 141, 135, 18, 62, 103, 250, 132, 189, 12, 187, 249, 61, 181, 221, 165, 189, 91, 168, 28, 190, 92, 46, 36, 62, 99, 73, 246, 189, 215, 73, 243, 188, 104, 138, 18, 190, 50, 159, 18, 61, 249, 12, 23, 61, 243, 169, 143, 60, 101, 105, 50, 190, 244, 218, 33, 190, 250, 36, 209, 61, 92, 98, 29, 190, 106, 116, 57, 190, 79, 113, 182, 61, 241, 122, 154, 189, 69, 34, 192, 61, 151, 51, 191, 189, 146, 179, 9, 189, 7, 47, 69, 189, 125, 22, 44, 190, 119, 245, 42, 61, 76, 192, 111, 61, 250, 251, 151, 61, 65, 185, 150, 189, 40, 107, 14, 190, 46, 141, 42, 62, 66, 40, 35, 190, 243, 246, 216, 189, 12, 159, 40, 189, 208, 114, 165, 59, 248, 127, 127, 59, 174, 38, 139, 189, 40, 165, 157, 189, 73, 73, 166, 189, 21, 163, 14, 190, 146, 106, 237, 189, 87, 185, 59, 61, 213, 221, 225, 189, 137, 106, 169, 61, 194, 162, 167, 189, 86, 1, 5, 61, 160, 208, 27, 59, 55, 237, 2, 189, 240, 148, 195, 61, 49, 78, 54, 190, 212, 30, 177, 61, 216, 142, 37, 189, 252, 124, 103, 61, 198, 190, 54, 189, 210, 254, 241, 60, 21, 246, 1, 62, 64, 233, 60, 190, 65, 235, 66, 188, 178, 189, 210, 189, 171, 94, 29, 190, 122, 25, 8, 190, 55, 121, 173, 61, 0, 159, 71, 186, 5, 220, 151, 189, 104, 213, 69, 190, 149, 130, 186, 61, 114, 47, 5, 190, 255, 180, 59, 189, 115, 123, 114, 60, 111, 191, 130, 190, 105, 152, 146, 61, 20, 147, 50, 190, 224, 0, 119, 189, 137, 13, 52, 189, 117, 153, 96, 190, 13, 178, 142, 61, 76, 31, 16, 187, 96, 147, 17, 190, 128, 15, 5, 189, 197, 236, 198, 189, 78, 184, 4, 190, 213, 150, 207, 189, 228, 87, 45, 190, 6, 95, 96, 189, 150, 224, 63, 187, 103, 185, 130, 189, 83, 115, 231, 189, 35, 200, 244, 189, 147, 244, 159, 61, 127, 237, 128, 189, 167, 147, 9, 62, 60, 111, 176, 189, 171, 4, 238, 189, 5, 224, 154, 61, 26, 190, 17, 189, 181, 125, 38, 190, 163, 101, 145, 188, 115, 76, 199, 61, 84, 221, 111, 60, 50, 150, 130, 188, 71, 29, 158, 61, 220, 230, 0, 61, 224, 162, 83, 59, 125, 52, 48, 190, 222, 0, 201, 186, 4, 216, 16, 61, 43, 234, 39, 60, 1, 8, 142, 61, 163, 126, 163, 189, 70, 58, 47, 61, 146, 212, 26, 190, 112, 202, 76, 190, 36, 14, 47, 191, 192, 11, 33, 62, 26, 191, 211, 188, 6, 227, 87, 191, 0, 107, 255, 190, 94, 137, 111, 191, 35, 253, 166, 190, 93, 212, 191, 61, 114, 229, 213, 188, 37, 97, 204, 61, 72, 70, 92, 62, 116, 103, 150, 190, 110, 31, 212, 62, 12, 248, 63, 190, 46, 73, 76, 190, 114, 127, 130, 190, 116, 238, 172, 61, 237, 237, 124, 190, 227, 161, 128, 62, 206, 204, 50, 191, 3, 50, 172, 190, 196, 192, 132, 190, 159, 106, 8, 190, 66, 140, 69, 61, 154, 106, 154, 190, 1, 133, 78, 191, 105, 38, 174, 60, 161, 235, 150, 62, 169, 158, 84, 189, 28, 114, 48, 62, 117, 93, 137, 191, 61, 66, 8, 190, 77, 239, 191, 62, 137, 67, 114, 189, 48, 163, 133, 190, 230, 228, 51, 190, 124, 243, 211, 59, 218, 254, 198, 189, 48, 106, 166, 188, 94, 45, 5, 62, 203, 77, 227, 189, 100, 184, 188, 61, 132, 232, 62, 188, 181, 163, 211, 59, 175, 68, 55, 61, 203, 56, 238, 190, 100, 36, 136, 190, 143, 133, 16, 62, 15, 36, 176, 190, 58, 123, 210, 189, 190, 242, 237, 189, 244, 74, 88, 189, 114, 118, 192, 190, 228, 214, 140, 62, 150, 206, 244, 189, 19, 58, 22, 191, 135, 53, 202, 62, 139, 194, 100, 61, 132, 173, 65, 61, 102, 253, 185, 185, 134, 47, 187, 62, 128, 80, 32, 190, 11, 210, 181, 189, 47, 134, 55, 191, 39, 196, 25, 189, 115, 123, 129, 61, 109, 19, 83, 61, 230, 232, 129, 62, 78, 131, 138, 62, 244, 94, 178, 62, 236, 213, 185, 61, 189, 247, 8, 63, 163, 51, 175, 62, 60, 96, 81, 61, 34, 206, 226, 190, 24, 204, 98, 61, 243, 151, 140, 61, 83, 163, 201, 61, 200, 229, 3, 63, 119, 252, 76, 62, 55, 160, 105, 188, 215, 54, 15, 191, 34, 222, 115, 188, 163, 143, 192, 189, 39, 202, 49, 190, 234, 254, 135, 190, 98, 187, 73, 191, 152, 28, 199, 61, 163, 143, 189, 61, 239, 159, 185, 62, 5, 169, 172, 189, 121, 7, 60, 60, 162, 49, 66, 191, 39, 245, 104, 190, 44, 125, 206, 62, 130, 26, 178, 62, 75, 63, 169, 189, 81, 207, 20, 62, 184, 51, 108, 189, 67, 199, 57, 61, 49, 1, 134, 189, 68, 109, 48, 62, 0, 13, 225, 189, 113, 37, 224, 189, 18, 5, 176, 59, 28, 183, 142, 191, 38, 74, 109, 62, 151, 149, 84, 61, 84, 182, 178, 190, 213, 133, 17, 62, 41, 246, 24, 62, 86, 178, 16, 189, 111, 234, 138, 62, 98, 131, 147, 191, 97, 108, 71, 189, 142, 207, 22, 61, 159, 157, 132, 190, 110, 194, 28, 62, 9, 216, 251, 61, 34, 150, 134, 61, 136, 57, 110, 191, 127, 131, 68, 62, 50, 40, 193, 190, 206, 55, 89, 62, 6, 27, 203, 190, 125, 39, 49, 190, 133, 175, 132, 62, 63, 194, 135, 62, 88, 157, 74, 190, 69, 178, 126, 62, 237, 68, 125, 62, 92, 23, 54, 189, 116, 82, 22, 189, 116, 78, 40, 61, 49, 26, 193, 62, 171, 83, 147, 189, 158, 112, 5, 61, 160, 142, 142, 190, 156, 63, 227, 61, 113, 122, 55, 190, 233, 192, 1, 190, 137, 112, 237, 61, 16, 117, 155, 190, 83, 225, 122, 190, 153, 132, 174, 62, 237, 44, 161, 62, 146, 59, 247, 61, 39, 24, 48, 62, 111, 175, 13, 61, 195, 221, 182, 189, 122, 114, 103, 62, 91, 168, 74, 62, 26, 173, 4, 62, 105, 55, 30, 190, 206, 194, 148, 62, 247, 185, 97, 190, 253, 242, 235, 60, 79, 166, 190, 189, 243, 202, 249, 189, 227, 29, 156, 189, 203, 41, 76, 189, 34, 104, 202, 61, 45, 125, 29, 61, 213, 65, 173, 189, 185, 44, 53, 188, 110, 46, 198, 61, 3, 143, 166, 189, 174, 187, 237, 188, 45, 226, 52, 60, 56, 223, 34, 62, 37, 26, 111, 61, 162, 129, 24, 190, 148, 171, 28, 60, 0, 28, 4, 190, 177, 160, 223, 61, 178, 205, 174, 189, 9, 49, 84, 190, 212, 163, 24, 62, 115, 230, 170, 189, 97, 58, 56, 190, 210, 94, 58, 190, 142, 233, 248, 61, 253, 153, 131, 189, 92, 85, 234, 189, 254, 10, 16, 61, 189, 35, 198, 189, 209, 174, 79, 190, 179, 151, 112, 190, 160, 113, 12, 190, 217, 104, 190, 190, 136, 239, 152, 191, 138, 16, 224, 190, 8, 222, 160, 62, 119, 161, 118, 62, 11, 81, 13, 191, 152, 30, 108, 63, 198, 119, 128, 61, 199, 195, 21, 62, 66, 210, 44, 61, 129, 255, 84, 190, 214, 139, 142, 190, 136, 200, 109, 62, 153, 34, 128, 61, 47, 245, 118, 61, 198, 60, 95, 62, 228, 177, 65, 191, 45, 255, 139, 62, 99, 209, 78, 190, 205, 177, 19, 190, 16, 41, 184, 190, 200, 89, 53, 190, 237, 138, 12, 61, 1, 220, 14, 189, 225, 19, 228, 62, 47, 81, 31, 61, 14, 232, 19, 191, 70, 56, 12, 62, 166, 226, 144, 61, 115, 18, 55, 60, 142, 29, 103, 62, 30, 136, 150, 62, 99, 118, 220, 188, 107, 15, 126, 62, 194, 253, 68, 189, 196, 165, 80, 62, 106, 105, 98, 188, 255, 157, 179, 62, 170, 254, 157, 190, 97, 16, 222, 190, 225, 254, 10, 189, 253, 224, 143, 62, 8, 80, 196, 61, 121, 25, 130, 61, 114, 111, 35, 190, 19, 3, 1, 62, 83, 62, 170, 190, 148, 223, 39, 190, 230, 173, 132, 62, 185, 210, 28, 191, 115, 16, 207, 190, 212, 49, 119, 187, 66, 186, 168, 62, 255, 229, 55, 62, 92, 203, 28, 62, 167, 105, 178, 62, 19, 166, 227, 62, 252, 156, 6, 62, 62, 224, 104, 62, 154, 179, 232, 188, 243, 208, 151, 190, 96, 119, 79, 62, 218, 203, 177, 190, 96, 103, 123, 62, 173, 196, 174, 189, 42, 97, 33, 62, 189, 76, 196, 61, 77, 135, 236, 189, 43, 47, 140, 62, 244, 226, 8, 189, 144, 138, 91, 190, 33, 120, 30, 189, 226, 180, 84, 62, 35, 36, 240, 62, 158, 185, 155, 191, 42, 150, 214, 190, 245, 2, 4, 192, 24, 76, 86, 62, 229, 255, 232, 61, 187, 109, 82, 190, 135, 158, 138, 188, 141, 243, 129, 190, 200, 224, 147, 189, 76, 222, 106, 62, 22, 146, 136, 62, 155, 46, 186, 190, 199, 47, 102, 62, 76, 11, 10, 62, 182, 71, 177, 61, 171, 253, 9, 190, 87, 216, 29, 62, 31, 87, 203, 189, 184, 158, 23, 60, 251, 11, 190, 59, 251, 141, 16, 190, 191, 55, 61, 190, 213, 145, 1, 191, 37, 145, 163, 190, 198, 138, 118, 61, 16, 171, 60, 190, 115, 104, 73, 62, 95, 18, 179, 190, 41, 179, 140, 62, 214, 17, 145, 62, 59, 97, 57, 62, 194, 59, 216, 60, 125, 43, 150, 190, 203, 242, 102, 190, 217, 1, 186, 62, 102, 169, 142, 188, 104, 89, 142, 190, 94, 5, 128, 62, 96, 185, 239, 190, 165, 85, 27, 63, 249, 49, 75, 62, 93, 235, 138, 62, 136, 74, 227, 190, 43, 202, 254, 188, 27, 181, 107, 189, 193, 59, 179, 61, 85, 213, 46, 191, 197, 164, 6, 62, 248, 240, 3, 191, 245, 2, 79, 62, 109, 179, 230, 62, 169, 59, 149, 190, 253, 34, 32, 61, 43, 212, 178, 190, 235, 236, 236, 190, 167, 110, 203, 189, 224, 82, 74, 190, 61, 98, 195, 62, 252, 239, 57, 61, 210, 77, 254, 190, 27, 45, 12, 63, 6, 167, 30, 62, 22, 35, 100, 62, 58, 29, 4, 190, 82, 116, 204, 190, 169, 215, 205, 190, 66, 252, 113, 62, 212, 209, 36, 62, 215, 154, 95, 190, 69, 165, 197, 61, 41, 42, 147, 190, 211, 14, 153, 189, 148, 64, 17, 62, 149, 16, 143, 60, 233, 39, 229, 190, 158, 107, 197, 188, 128, 118, 211, 188, 62, 61, 207, 60, 50, 253, 247, 189, 229, 173, 58, 62, 250, 208, 228, 189, 63, 60, 186, 61, 255, 248, 177, 62, 174, 131, 13, 190, 156, 132, 146, 62, 62, 137, 6, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {243, 95, 80, 62, 29, 204, 64, 189, 78, 112, 134, 62, 176, 2, 190, 61, 149, 149, 239, 189, 126, 6, 178, 61, 50, 61, 70, 62, 2, 222, 13, 62, 114, 149, 116, 190, 6, 146, 4, 60, 106, 172, 228, 189, 185, 76, 56, 59, 149, 52, 106, 60, 74, 194, 7, 61, 185, 87, 6, 62, 25, 127, 157, 189, 47, 49, 62, 187, 25, 177, 222, 189, 174, 79, 35, 62, 87, 12, 51, 190, 147, 184, 178, 189, 78, 170, 247, 189, 226, 78, 38, 62, 139, 17, 73, 190, 209, 231, 173, 61, 153, 78, 161, 62, 126, 104, 225, 61, 212, 164, 170, 62, 74, 181, 20, 62, 240, 134, 4, 62, 243, 20, 128, 62, 162, 108, 109, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 54, 234, 62, 160, 129, 251, 59, 20, 45, 252, 62, 181, 64, 225, 62, 105, 133, 150, 61, 180, 103, 139, 191, 83, 46, 4, 190, 170, 13, 74, 191, 63, 109, 206, 62, 65, 191, 116, 61, 152, 192, 160, 189, 253, 40, 177, 62, 14, 202, 21, 63, 165, 149, 137, 62, 20, 169, 171, 190, 166, 37, 162, 60, 161, 30, 90, 190, 204, 94, 73, 61, 100, 27, 211, 188, 171, 246, 189, 61, 99, 208, 238, 189, 209, 107, 64, 191, 107, 85, 14, 63, 169, 16, 19, 63, 22, 188, 10, 191, 76, 245, 249, 189, 235, 243, 219, 189, 179, 216, 74, 63, 5, 3, 169, 190, 199, 253, 60, 190, 126, 215, 27, 63, 219, 84, 231, 62, 214, 71, 180, 189, 89, 76, 84, 61, 105, 241, 77, 190, 169, 54, 60, 190, 108, 136, 15, 190, 204, 55, 38, 189, 11, 69, 186, 189, 225, 31, 138, 62, 255, 171, 171, 61, 44, 241, 41, 62, 227, 63, 196, 61, 8, 3, 103, 61, 235, 166, 17, 62, 67, 62, 147, 61, 212, 13, 117, 190, 47, 174, 210, 190, 2, 168, 210, 189, 115, 112, 246, 61, 164, 229, 4, 61, 103, 91, 5, 62, 212, 240, 237, 59, 15, 42, 61, 61, 186, 66, 188, 62, 169, 111, 142, 62, 239, 239, 24, 62, 255, 106, 130, 190, 15, 252, 142, 59, 71, 108, 134, 190, 228, 17, 104, 189, 195, 115, 161, 190, 79, 134, 122, 61, 146, 225, 223, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {105, 228, 111, 189, 237, 71, 98, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {191, 179, 33, 190, 96, 218, 116, 62, 204, 136, 215, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {189, 104, 162, 191, 197, 91, 90, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0036/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}