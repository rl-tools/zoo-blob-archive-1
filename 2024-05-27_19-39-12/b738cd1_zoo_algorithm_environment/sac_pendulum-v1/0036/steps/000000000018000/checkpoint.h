// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {124, 137, 98, 63, 120, 131, 194, 63, 168, 52, 193, 62, 92, 198, 150, 188, 65, 80, 197, 191, 235, 101, 23, 191, 10, 154, 169, 62, 81, 85, 130, 191, 100, 130, 228, 188, 222, 100, 74, 190, 209, 226, 64, 63, 0, 115, 61, 190, 14, 80, 144, 190, 210, 83, 188, 190, 68, 146, 96, 61, 65, 235, 128, 59, 35, 8, 34, 63, 185, 94, 132, 190, 208, 190, 2, 189, 241, 178, 136, 191, 183, 102, 139, 190, 228, 70, 201, 62, 60, 17, 146, 189, 140, 155, 245, 190, 83, 113, 38, 63, 99, 192, 149, 191, 27, 227, 140, 190, 37, 145, 85, 63, 56, 98, 97, 186, 151, 245, 99, 187, 207, 247, 156, 190, 57, 101, 136, 63, 115, 48, 180, 62, 220, 56, 232, 62, 53, 218, 115, 190, 36, 255, 190, 62, 6, 214, 80, 191, 232, 166, 139, 63, 76, 12, 168, 62, 223, 177, 51, 191, 50, 98, 31, 191, 15, 254, 249, 188, 103, 142, 129, 190, 57, 177, 215, 61, 181, 86, 171, 190, 77, 19, 202, 189, 247, 235, 55, 190, 150, 118, 1, 63, 110, 65, 249, 189, 212, 114, 52, 62, 91, 199, 5, 191, 69, 48, 76, 63, 69, 160, 39, 191, 52, 48, 140, 190, 163, 114, 157, 62, 130, 146, 140, 62, 78, 205, 13, 191, 112, 53, 110, 62, 9, 165, 91, 191, 226, 183, 178, 189, 9, 252, 112, 62, 53, 19, 119, 63, 194, 51, 39, 62, 125, 94, 141, 61, 7, 234, 120, 62, 37, 241, 152, 62, 67, 166, 130, 62, 6, 248, 176, 190, 191, 108, 66, 190, 52, 229, 210, 62, 186, 184, 89, 62, 162, 104, 96, 190, 12, 46, 44, 191, 155, 4, 147, 190, 49, 99, 7, 191, 51, 47, 187, 190, 106, 66, 143, 188, 203, 44, 0, 61, 198, 117, 162, 190, 17, 149, 75, 191, 23, 218, 62, 191, 215, 225, 0, 62, 64, 122, 30, 63, 90, 159, 199, 61, 95, 167, 100, 63, 87, 132, 159, 191, 59, 199, 135, 190, 145, 252, 11, 63, 18, 215, 85, 63, 146, 103, 229, 62, 226, 70, 8, 191, 7, 131, 47, 191, 179, 115, 152, 60, 205, 213, 36, 191, 173, 32, 125, 63, 77, 139, 250, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 176, 16, 191, 22, 98, 131, 190, 32, 145, 36, 191, 226, 64, 51, 62, 245, 112, 191, 62, 73, 105, 160, 190, 236, 189, 44, 190, 55, 0, 136, 61, 184, 72, 140, 60, 248, 123, 251, 62, 107, 69, 156, 190, 48, 92, 239, 190, 15, 70, 250, 190, 45, 198, 25, 63, 118, 134, 64, 191, 9, 195, 34, 61, 203, 127, 1, 191, 11, 125, 92, 191, 189, 119, 114, 190, 223, 234, 0, 63, 130, 174, 219, 61, 39, 161, 38, 191, 63, 160, 10, 63, 173, 35, 60, 63, 59, 134, 203, 190, 107, 118, 239, 62, 25, 255, 51, 190, 200, 43, 178, 62, 189, 216, 120, 189, 85, 21, 146, 62, 95, 226, 20, 63, 161, 140, 87, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {125, 24, 242, 190, 101, 34, 38, 190, 186, 27, 177, 190, 36, 116, 130, 190, 48, 89, 77, 188, 109, 124, 199, 190, 111, 30, 224, 61, 177, 221, 227, 61, 42, 135, 32, 62, 86, 23, 4, 62, 159, 5, 189, 190, 89, 55, 31, 188, 11, 133, 12, 63, 72, 104, 212, 61, 243, 153, 42, 189, 130, 152, 176, 62, 168, 141, 211, 190, 207, 247, 70, 61, 180, 240, 96, 62, 10, 125, 116, 62, 125, 129, 17, 191, 235, 65, 162, 60, 94, 7, 96, 61, 123, 197, 35, 187, 248, 189, 235, 190, 25, 46, 18, 62, 93, 148, 175, 190, 166, 223, 47, 62, 178, 163, 9, 62, 61, 201, 150, 190, 210, 243, 28, 62, 244, 141, 108, 190, 186, 243, 205, 189, 83, 1, 55, 187, 108, 175, 88, 190, 87, 79, 219, 189, 133, 220, 11, 60, 250, 123, 254, 189, 9, 24, 32, 190, 163, 122, 13, 190, 29, 232, 4, 62, 86, 221, 148, 60, 224, 214, 100, 189, 143, 29, 110, 190, 165, 160, 206, 58, 66, 181, 67, 189, 21, 171, 195, 189, 181, 123, 201, 61, 230, 113, 17, 62, 136, 102, 198, 61, 179, 55, 23, 62, 199, 191, 245, 186, 133, 78, 41, 61, 41, 184, 105, 189, 123, 194, 74, 190, 82, 148, 226, 61, 253, 8, 29, 190, 42, 220, 18, 189, 22, 223, 224, 189, 25, 223, 16, 61, 76, 201, 233, 187, 111, 209, 142, 188, 142, 194, 79, 190, 14, 225, 47, 190, 84, 160, 208, 190, 141, 97, 95, 191, 124, 240, 240, 190, 124, 96, 139, 61, 200, 210, 85, 188, 216, 219, 243, 189, 167, 116, 175, 62, 199, 192, 161, 62, 54, 202, 2, 62, 99, 220, 2, 62, 76, 240, 184, 189, 201, 230, 11, 189, 207, 12, 142, 61, 181, 149, 179, 189, 186, 103, 17, 61, 126, 222, 28, 189, 197, 188, 84, 190, 236, 137, 235, 60, 211, 128, 9, 62, 226, 100, 107, 189, 24, 102, 202, 190, 242, 236, 186, 61, 32, 17, 146, 189, 72, 107, 19, 61, 218, 251, 144, 62, 149, 115, 57, 61, 21, 252, 161, 190, 60, 42, 9, 61, 98, 85, 98, 62, 96, 139, 233, 189, 155, 140, 159, 190, 175, 13, 185, 61, 95, 128, 60, 62, 0, 76, 196, 60, 70, 58, 228, 190, 34, 82, 106, 62, 65, 201, 58, 61, 94, 228, 90, 191, 82, 143, 176, 61, 60, 142, 133, 190, 87, 201, 173, 60, 239, 108, 74, 191, 171, 40, 58, 62, 187, 229, 231, 190, 238, 161, 206, 62, 88, 167, 71, 62, 51, 77, 205, 189, 210, 196, 242, 61, 28, 91, 225, 190, 104, 124, 243, 60, 155, 179, 126, 190, 86, 223, 72, 61, 229, 71, 91, 188, 178, 220, 248, 61, 114, 149, 114, 190, 49, 100, 222, 190, 243, 166, 162, 190, 157, 146, 192, 62, 81, 234, 246, 189, 145, 61, 144, 62, 216, 2, 159, 190, 224, 83, 70, 190, 243, 179, 70, 62, 118, 79, 234, 62, 61, 197, 3, 61, 110, 165, 46, 188, 162, 21, 54, 190, 67, 208, 177, 189, 84, 60, 219, 189, 219, 113, 12, 62, 179, 109, 6, 62, 215, 182, 41, 62, 221, 238, 78, 189, 135, 178, 199, 189, 88, 254, 58, 190, 251, 222, 81, 189, 229, 155, 6, 62, 164, 67, 174, 60, 204, 177, 229, 187, 77, 79, 96, 61, 63, 217, 61, 190, 17, 30, 18, 61, 4, 129, 2, 189, 184, 143, 5, 190, 147, 71, 9, 189, 47, 255, 49, 190, 110, 254, 88, 189, 104, 7, 53, 190, 11, 3, 141, 189, 136, 224, 50, 190, 23, 248, 146, 61, 94, 238, 202, 189, 238, 169, 180, 59, 140, 135, 201, 60, 248, 3, 187, 61, 149, 107, 24, 57, 196, 160, 179, 191, 143, 66, 74, 190, 73, 236, 200, 190, 38, 180, 227, 189, 144, 3, 223, 61, 172, 206, 230, 61, 5, 114, 0, 191, 204, 65, 8, 63, 155, 238, 3, 191, 248, 170, 153, 190, 140, 159, 92, 190, 238, 67, 123, 190, 62, 183, 136, 188, 245, 10, 61, 62, 28, 145, 26, 59, 217, 235, 2, 189, 33, 252, 123, 190, 178, 86, 104, 62, 95, 237, 183, 62, 99, 129, 85, 189, 59, 221, 125, 63, 164, 247, 161, 190, 240, 237, 147, 190, 237, 48, 73, 62, 184, 215, 252, 190, 116, 228, 30, 62, 149, 80, 197, 190, 71, 228, 253, 62, 192, 136, 12, 191, 60, 237, 167, 189, 244, 99, 225, 189, 94, 142, 182, 62, 19, 50, 174, 61, 166, 113, 19, 61, 120, 19, 9, 190, 18, 100, 15, 62, 246, 199, 59, 62, 124, 126, 90, 62, 26, 28, 80, 190, 137, 169, 247, 189, 241, 188, 209, 189, 20, 192, 220, 61, 208, 105, 232, 61, 249, 200, 166, 61, 185, 254, 144, 190, 17, 59, 67, 62, 210, 151, 188, 190, 183, 29, 117, 190, 16, 50, 110, 62, 88, 5, 11, 191, 103, 224, 42, 189, 156, 251, 153, 61, 230, 56, 138, 62, 105, 147, 77, 61, 202, 241, 223, 189, 14, 193, 19, 188, 70, 92, 202, 61, 29, 130, 149, 62, 44, 166, 133, 61, 165, 201, 44, 61, 9, 153, 140, 190, 10, 23, 30, 62, 12, 139, 183, 189, 67, 130, 122, 189, 138, 156, 38, 62, 245, 236, 172, 62, 242, 132, 121, 191, 234, 218, 90, 62, 60, 224, 247, 189, 49, 107, 196, 62, 146, 242, 55, 190, 5, 49, 94, 190, 197, 91, 181, 190, 235, 116, 133, 62, 5, 187, 145, 61, 148, 153, 172, 62, 217, 23, 33, 191, 121, 19, 184, 62, 74, 146, 127, 190, 191, 199, 160, 190, 77, 197, 60, 60, 162, 240, 118, 191, 248, 91, 215, 190, 87, 197, 149, 62, 85, 93, 178, 62, 180, 185, 241, 189, 59, 15, 0, 62, 245, 115, 166, 62, 95, 99, 253, 61, 172, 124, 155, 61, 219, 119, 67, 62, 11, 45, 103, 61, 39, 247, 64, 191, 188, 35, 249, 60, 47, 34, 88, 189, 104, 217, 249, 61, 13, 31, 102, 62, 76, 170, 181, 61, 254, 185, 64, 191, 77, 96, 49, 62, 234, 159, 241, 188, 49, 51, 136, 62, 181, 76, 234, 61, 121, 255, 91, 189, 228, 192, 180, 190, 124, 186, 21, 191, 25, 147, 174, 190, 216, 70, 121, 62, 192, 171, 19, 191, 232, 115, 143, 190, 171, 156, 4, 62, 95, 47, 168, 190, 28, 29, 70, 62, 3, 251, 62, 187, 34, 90, 24, 62, 30, 41, 20, 191, 90, 253, 213, 61, 16, 211, 236, 189, 222, 2, 151, 189, 212, 44, 31, 62, 108, 244, 235, 62, 151, 152, 1, 61, 167, 48, 145, 62, 246, 198, 143, 62, 186, 93, 223, 189, 57, 200, 127, 62, 56, 27, 187, 62, 225, 115, 4, 190, 41, 92, 136, 60, 37, 27, 226, 61, 205, 192, 172, 61, 10, 104, 103, 189, 128, 233, 240, 189, 158, 110, 204, 189, 207, 48, 7, 190, 229, 181, 45, 59, 8, 212, 33, 190, 74, 209, 30, 190, 213, 168, 83, 61, 113, 113, 33, 190, 34, 25, 30, 62, 244, 249, 22, 190, 38, 126, 131, 189, 168, 82, 138, 189, 92, 7, 17, 190, 103, 138, 247, 61, 217, 176, 132, 189, 147, 202, 224, 59, 110, 190, 60, 190, 229, 244, 28, 62, 255, 14, 39, 62, 57, 204, 133, 61, 163, 117, 155, 188, 32, 240, 49, 61, 180, 123, 228, 188, 137, 251, 169, 189, 103, 183, 212, 189, 240, 189, 61, 190, 184, 225, 35, 190, 109, 38, 140, 60, 250, 31, 145, 61, 182, 19, 33, 190, 138, 163, 204, 189, 226, 50, 67, 190, 151, 114, 0, 190, 43, 208, 40, 61, 249, 106, 108, 61, 71, 228, 106, 61, 18, 177, 180, 60, 239, 251, 0, 190, 82, 198, 183, 61, 0, 225, 212, 189, 137, 168, 189, 189, 247, 169, 186, 189, 81, 74, 31, 187, 75, 99, 234, 189, 178, 75, 20, 62, 61, 111, 57, 190, 48, 15, 87, 189, 8, 48, 236, 61, 196, 7, 28, 62, 209, 3, 216, 60, 71, 211, 86, 190, 243, 183, 53, 190, 97, 20, 24, 62, 110, 212, 167, 189, 119, 29, 249, 188, 2, 230, 195, 188, 233, 220, 189, 189, 66, 128, 139, 189, 14, 152, 6, 187, 16, 80, 163, 188, 91, 40, 186, 62, 103, 185, 172, 189, 93, 91, 201, 190, 101, 184, 174, 61, 237, 229, 6, 62, 174, 225, 36, 62, 242, 233, 185, 61, 82, 170, 254, 188, 193, 247, 126, 189, 146, 184, 15, 191, 30, 214, 76, 191, 0, 67, 145, 190, 33, 59, 10, 191, 239, 184, 62, 190, 51, 255, 91, 61, 25, 158, 180, 61, 15, 147, 144, 62, 89, 29, 194, 61, 49, 7, 236, 61, 163, 91, 197, 190, 164, 51, 5, 62, 215, 216, 205, 190, 83, 129, 14, 62, 135, 136, 222, 61, 76, 32, 233, 62, 80, 24, 194, 61, 103, 57, 249, 60, 195, 119, 149, 62, 83, 45, 21, 190, 57, 102, 64, 190, 18, 222, 254, 62, 39, 218, 14, 190, 46, 102, 9, 191, 75, 70, 232, 190, 63, 95, 231, 60, 187, 63, 82, 190, 92, 23, 123, 61, 151, 21, 156, 190, 100, 186, 58, 62, 229, 160, 143, 62, 168, 119, 162, 62, 85, 90, 183, 61, 142, 148, 97, 190, 15, 138, 121, 190, 34, 235, 150, 62, 40, 165, 81, 59, 131, 64, 23, 61, 253, 222, 2, 190, 25, 211, 75, 190, 176, 57, 216, 62, 73, 195, 147, 62, 183, 176, 123, 62, 195, 169, 40, 191, 75, 144, 131, 189, 127, 57, 111, 189, 189, 172, 45, 190, 137, 198, 99, 191, 171, 75, 206, 61, 29, 129, 114, 190, 128, 56, 123, 61, 3, 178, 190, 62, 195, 49, 63, 190, 123, 253, 137, 61, 201, 23, 215, 60, 106, 143, 136, 191, 36, 186, 149, 61, 78, 234, 198, 190, 96, 131, 35, 190, 113, 228, 218, 62, 244, 251, 214, 188, 37, 237, 45, 62, 89, 64, 29, 190, 140, 177, 35, 62, 100, 33, 134, 190, 70, 78, 195, 189, 176, 11, 45, 62, 170, 169, 154, 190, 245, 191, 39, 188, 37, 48, 22, 61, 183, 229, 236, 189, 116, 212, 244, 61, 62, 179, 88, 61, 81, 121, 99, 61, 121, 211, 80, 62, 163, 204, 62, 191, 144, 169, 121, 61, 185, 117, 25, 62, 134, 193, 43, 186, 109, 125, 32, 189, 31, 68, 136, 189, 34, 196, 243, 188, 41, 208, 164, 59, 206, 243, 123, 62, 180, 250, 201, 190, 251, 246, 208, 62, 76, 204, 77, 191, 145, 154, 103, 62, 92, 6, 201, 62, 225, 167, 22, 62, 171, 225, 236, 61, 42, 119, 108, 62, 21, 247, 195, 62, 118, 217, 159, 190, 39, 115, 19, 190, 161, 209, 157, 189, 227, 147, 167, 62, 192, 169, 103, 61, 226, 121, 51, 62, 141, 144, 153, 190, 254, 114, 36, 189, 42, 18, 158, 190, 238, 24, 14, 190, 225, 148, 44, 61, 96, 203, 213, 190, 73, 229, 183, 190, 89, 61, 160, 62, 7, 91, 60, 62, 69, 58, 221, 189, 227, 35, 111, 62, 117, 206, 43, 62, 225, 123, 226, 62, 107, 220, 19, 62, 252, 85, 121, 62, 168, 114, 41, 190, 245, 208, 191, 190, 6, 47, 102, 62, 221, 39, 231, 190, 238, 19, 253, 61, 103, 118, 132, 189, 152, 130, 220, 189, 201, 224, 12, 62, 126, 0, 23, 189, 132, 42, 32, 62, 145, 119, 75, 188, 230, 39, 57, 189, 210, 62, 87, 62, 63, 119, 186, 62, 106, 126, 176, 62, 84, 85, 155, 61, 191, 56, 85, 62, 203, 0, 215, 61, 142, 93, 226, 190, 64, 252, 82, 62, 5, 17, 19, 62, 130, 129, 93, 62, 27, 20, 174, 61, 208, 204, 32, 189, 138, 49, 105, 62, 95, 54, 12, 62, 255, 167, 205, 61, 255, 123, 45, 189, 212, 72, 138, 60, 140, 169, 159, 62, 233, 103, 150, 189, 193, 189, 193, 188, 108, 26, 66, 62, 124, 71, 62, 62, 91, 249, 222, 62, 14, 20, 187, 190, 105, 26, 84, 190, 158, 99, 108, 61, 66, 48, 112, 62, 68, 169, 92, 60, 23, 242, 171, 190, 36, 169, 170, 62, 101, 66, 198, 189, 238, 23, 111, 189, 87, 239, 203, 189, 57, 190, 94, 190, 229, 5, 197, 62, 207, 177, 70, 191, 122, 254, 127, 190, 165, 64, 236, 191, 83, 176, 152, 188, 233, 131, 140, 190, 7, 32, 56, 190, 250, 248, 167, 60, 53, 100, 241, 190, 233, 79, 218, 189, 147, 177, 112, 62, 165, 179, 145, 61, 58, 243, 199, 190, 187, 58, 2, 62, 26, 255, 225, 61, 182, 17, 106, 189, 125, 180, 79, 61, 148, 244, 68, 62, 226, 209, 52, 190, 180, 233, 63, 190, 0, 25, 177, 189, 61, 133, 159, 189, 145, 186, 74, 60, 52, 5, 246, 189, 135, 85, 39, 62, 68, 236, 10, 190, 94, 98, 191, 189, 246, 22, 13, 190, 129, 200, 100, 61, 189, 0, 251, 61, 36, 234, 123, 61, 247, 116, 19, 61, 165, 141, 146, 189, 115, 229, 12, 61, 138, 121, 155, 61, 170, 152, 130, 189, 219, 41, 0, 190, 186, 39, 209, 61, 202, 58, 120, 189, 223, 164, 250, 60, 143, 196, 243, 60, 75, 33, 31, 190, 36, 43, 240, 189, 141, 135, 18, 62, 103, 250, 132, 189, 12, 187, 249, 61, 181, 221, 165, 189, 91, 168, 28, 190, 92, 46, 36, 62, 99, 73, 246, 189, 215, 73, 243, 188, 104, 138, 18, 190, 50, 159, 18, 61, 249, 12, 23, 61, 243, 169, 143, 60, 101, 105, 50, 190, 244, 218, 33, 190, 250, 36, 209, 61, 92, 98, 29, 190, 106, 116, 57, 190, 79, 113, 182, 61, 241, 122, 154, 189, 69, 34, 192, 61, 151, 51, 191, 189, 146, 179, 9, 189, 7, 47, 69, 189, 125, 22, 44, 190, 119, 245, 42, 61, 76, 192, 111, 61, 250, 251, 151, 61, 65, 185, 150, 189, 40, 107, 14, 190, 46, 141, 42, 62, 66, 40, 35, 190, 243, 246, 216, 189, 12, 159, 40, 189, 208, 114, 165, 59, 248, 127, 127, 59, 174, 38, 139, 189, 40, 165, 157, 189, 73, 73, 166, 189, 21, 163, 14, 190, 146, 106, 237, 189, 87, 185, 59, 61, 213, 221, 225, 189, 137, 106, 169, 61, 194, 162, 167, 189, 86, 1, 5, 61, 160, 208, 27, 59, 55, 237, 2, 189, 240, 148, 195, 61, 49, 78, 54, 190, 212, 30, 177, 61, 216, 142, 37, 189, 252, 124, 103, 61, 198, 190, 54, 189, 210, 254, 241, 60, 21, 246, 1, 62, 64, 233, 60, 190, 65, 235, 66, 188, 178, 189, 210, 189, 171, 94, 29, 190, 122, 25, 8, 190, 55, 121, 173, 61, 0, 159, 71, 186, 5, 220, 151, 189, 104, 213, 69, 190, 149, 130, 186, 61, 114, 47, 5, 190, 255, 180, 59, 189, 115, 123, 114, 60, 111, 191, 130, 190, 105, 152, 146, 61, 20, 147, 50, 190, 224, 0, 119, 189, 137, 13, 52, 189, 117, 153, 96, 190, 13, 178, 142, 61, 76, 31, 16, 187, 96, 147, 17, 190, 128, 15, 5, 189, 197, 236, 198, 189, 78, 184, 4, 190, 213, 150, 207, 189, 228, 87, 45, 190, 6, 95, 96, 189, 150, 224, 63, 187, 103, 185, 130, 189, 83, 115, 231, 189, 35, 200, 244, 189, 147, 244, 159, 61, 127, 237, 128, 189, 167, 147, 9, 62, 60, 111, 176, 189, 171, 4, 238, 189, 5, 224, 154, 61, 26, 190, 17, 189, 181, 125, 38, 190, 163, 101, 145, 188, 115, 76, 199, 61, 84, 221, 111, 60, 50, 150, 130, 188, 71, 29, 158, 61, 220, 230, 0, 61, 224, 162, 83, 59, 125, 52, 48, 190, 222, 0, 201, 186, 4, 216, 16, 61, 43, 234, 39, 60, 1, 8, 142, 61, 163, 126, 163, 189, 202, 0, 189, 61, 235, 136, 83, 190, 29, 208, 30, 190, 246, 108, 20, 191, 104, 200, 32, 62, 26, 191, 211, 188, 22, 37, 106, 191, 0, 107, 255, 190, 81, 202, 133, 191, 154, 146, 144, 190, 19, 216, 119, 61, 61, 187, 244, 188, 167, 140, 48, 61, 82, 135, 80, 62, 116, 103, 150, 190, 8, 208, 211, 62, 12, 248, 63, 190, 46, 73, 76, 190, 114, 127, 130, 190, 111, 252, 235, 61, 28, 152, 111, 190, 2, 174, 100, 62, 37, 203, 58, 191, 47, 251, 218, 190, 185, 15, 158, 190, 188, 111, 15, 190, 167, 88, 147, 60, 246, 50, 140, 190, 36, 135, 108, 191, 145, 193, 182, 60, 120, 214, 148, 62, 34, 60, 145, 189, 212, 127, 84, 62, 156, 153, 123, 191, 117, 100, 5, 190, 228, 116, 202, 62, 207, 129, 202, 188, 60, 108, 93, 190, 18, 95, 5, 190, 187, 168, 65, 60, 57, 73, 225, 189, 60, 149, 149, 60, 109, 176, 5, 62, 138, 200, 72, 189, 116, 105, 229, 61, 166, 176, 124, 60, 254, 34, 158, 62, 9, 81, 201, 61, 178, 21, 168, 190, 107, 68, 121, 190, 44, 62, 77, 62, 40, 110, 170, 190, 109, 175, 152, 189, 44, 42, 144, 189, 233, 60, 180, 188, 34, 203, 179, 190, 142, 62, 181, 62, 213, 13, 182, 189, 255, 149, 211, 190, 234, 41, 214, 62, 124, 133, 115, 61, 88, 0, 206, 61, 135, 216, 35, 61, 128, 91, 196, 62, 96, 212, 41, 190, 115, 140, 92, 189, 248, 157, 71, 191, 114, 245, 89, 189, 219, 87, 178, 61, 69, 66, 54, 61, 51, 28, 147, 62, 156, 138, 134, 62, 129, 54, 182, 62, 244, 224, 66, 61, 189, 247, 8, 63, 139, 247, 161, 62, 60, 96, 81, 61, 196, 4, 201, 190, 153, 220, 242, 61, 0, 229, 3, 61, 46, 212, 220, 61, 35, 154, 254, 62, 140, 221, 67, 62, 81, 6, 176, 187, 61, 105, 27, 191, 76, 125, 35, 189, 4, 92, 199, 189, 48, 179, 66, 190, 162, 107, 99, 190, 210, 87, 62, 191, 106, 146, 249, 61, 62, 136, 95, 61, 165, 47, 185, 62, 197, 60, 161, 189, 147, 161, 75, 61, 75, 208, 76, 191, 6, 242, 147, 190, 176, 16, 209, 62, 39, 93, 230, 62, 128, 212, 115, 189, 65, 245, 34, 62, 192, 227, 81, 189, 162, 202, 93, 61, 171, 10, 98, 189, 125, 184, 76, 62, 210, 156, 142, 58, 205, 246, 223, 189, 8, 116, 64, 62, 73, 226, 144, 191, 82, 2, 117, 62, 77, 116, 107, 61, 70, 72, 145, 190, 174, 106, 27, 62, 41, 29, 13, 62, 240, 140, 207, 188, 15, 250, 149, 62, 5, 127, 162, 191, 19, 119, 47, 188, 200, 7, 98, 61, 249, 252, 117, 190, 188, 165, 43, 62, 1, 194, 6, 62, 202, 88, 154, 61, 9, 40, 119, 191, 27, 200, 100, 62, 0, 35, 119, 190, 255, 198, 106, 62, 55, 86, 198, 190, 29, 101, 47, 190, 138, 129, 136, 62, 203, 109, 183, 62, 11, 113, 44, 190, 36, 177, 108, 62, 16, 6, 126, 62, 145, 106, 78, 189, 251, 125, 216, 188, 166, 45, 51, 61, 46, 157, 191, 62, 142, 84, 139, 189, 35, 179, 210, 60, 230, 173, 159, 190, 138, 42, 191, 61, 11, 119, 39, 190, 197, 206, 20, 190, 248, 118, 0, 62, 13, 143, 139, 190, 246, 169, 118, 190, 190, 155, 171, 62, 103, 234, 157, 62, 110, 246, 207, 61, 135, 3, 40, 62, 3, 72, 19, 61, 137, 230, 143, 189, 0, 209, 96, 62, 33, 219, 83, 62, 196, 84, 12, 62, 177, 78, 25, 190, 221, 246, 147, 62, 105, 60, 128, 190, 107, 181, 29, 61, 79, 166, 190, 189, 243, 202, 249, 189, 227, 29, 156, 189, 203, 41, 76, 189, 34, 104, 202, 61, 45, 125, 29, 61, 213, 65, 173, 189, 185, 44, 53, 188, 110, 46, 198, 61, 3, 143, 166, 189, 174, 187, 237, 188, 45, 226, 52, 60, 56, 223, 34, 62, 37, 26, 111, 61, 162, 129, 24, 190, 148, 171, 28, 60, 0, 28, 4, 190, 177, 160, 223, 61, 178, 205, 174, 189, 9, 49, 84, 190, 212, 163, 24, 62, 115, 230, 170, 189, 97, 58, 56, 190, 210, 94, 58, 190, 142, 233, 248, 61, 253, 153, 131, 189, 92, 85, 234, 189, 254, 10, 16, 61, 189, 35, 198, 189, 209, 174, 79, 190, 179, 151, 112, 190, 160, 113, 12, 190, 24, 137, 189, 190, 56, 249, 155, 191, 141, 96, 11, 191, 115, 26, 160, 62, 164, 215, 121, 62, 255, 254, 13, 191, 47, 147, 100, 63, 10, 111, 94, 61, 92, 111, 26, 62, 206, 193, 63, 61, 250, 235, 71, 190, 211, 174, 125, 190, 141, 94, 129, 62, 58, 52, 116, 61, 188, 42, 74, 61, 209, 77, 118, 62, 138, 248, 77, 191, 115, 160, 114, 62, 151, 252, 30, 190, 248, 110, 14, 190, 132, 155, 181, 190, 64, 225, 21, 190, 22, 207, 38, 61, 43, 193, 244, 188, 246, 143, 206, 62, 114, 90, 44, 61, 17, 141, 28, 191, 128, 241, 9, 62, 85, 121, 154, 61, 236, 248, 184, 60, 145, 10, 117, 62, 3, 110, 155, 62, 67, 20, 179, 188, 137, 66, 75, 62, 197, 111, 45, 189, 132, 44, 86, 62, 178, 56, 78, 189, 16, 124, 174, 62, 1, 215, 188, 190, 174, 6, 228, 190, 237, 180, 105, 189, 167, 248, 140, 62, 128, 25, 203, 61, 220, 222, 244, 60, 27, 150, 51, 190, 179, 200, 145, 61, 110, 95, 175, 190, 207, 10, 75, 190, 70, 211, 119, 62, 38, 190, 37, 191, 46, 141, 219, 190, 239, 81, 227, 188, 149, 133, 166, 62, 95, 187, 30, 62, 152, 165, 8, 62, 223, 121, 172, 62, 73, 61, 215, 62, 48, 87, 212, 61, 149, 89, 72, 62, 49, 69, 225, 188, 226, 143, 161, 190, 17, 92, 69, 62, 69, 95, 211, 190, 48, 129, 121, 62, 193, 106, 237, 189, 159, 55, 41, 62, 187, 24, 107, 62, 11, 224, 250, 189, 30, 221, 143, 62, 5, 147, 75, 189, 208, 33, 95, 190, 180, 46, 15, 189, 229, 85, 93, 62, 129, 37, 237, 62, 38, 75, 181, 191, 121, 32, 217, 190, 195, 96, 3, 192, 116, 15, 86, 62, 86, 82, 0, 62, 90, 228, 81, 190, 19, 14, 126, 188, 240, 26, 102, 190, 234, 250, 160, 189, 53, 47, 104, 62, 144, 16, 107, 62, 173, 88, 186, 190, 102, 24, 95, 62, 129, 19, 0, 62, 68, 6, 201, 61, 20, 212, 19, 190, 148, 252, 33, 62, 116, 138, 229, 189, 230, 24, 158, 60, 76, 92, 161, 183, 124, 217, 23, 190, 92, 249, 87, 190, 17, 53, 254, 190, 163, 232, 172, 190, 174, 249, 70, 188, 220, 11, 82, 190, 141, 164, 74, 62, 85, 19, 163, 190, 168, 134, 130, 62, 93, 218, 139, 62, 84, 182, 58, 62, 221, 144, 7, 61, 84, 59, 161, 190, 134, 240, 73, 190, 86, 23, 196, 62, 157, 164, 208, 188, 72, 176, 157, 190, 31, 235, 135, 62, 143, 110, 3, 191, 229, 86, 31, 63, 136, 196, 113, 62, 125, 55, 143, 62, 135, 152, 223, 190, 25, 0, 47, 188, 140, 221, 73, 189, 129, 17, 187, 61, 152, 177, 60, 191, 94, 178, 10, 62, 249, 82, 9, 191, 198, 241, 77, 62, 10, 253, 231, 62, 89, 98, 144, 190, 58, 215, 72, 61, 214, 50, 168, 190, 53, 5, 7, 191, 30, 249, 200, 189, 219, 1, 151, 190, 18, 186, 152, 62, 244, 59, 251, 60, 143, 110, 4, 191, 160, 111, 13, 63, 206, 197, 0, 62, 154, 236, 92, 62, 16, 244, 27, 190, 99, 194, 193, 190, 219, 18, 211, 190, 136, 166, 119, 62, 126, 110, 24, 62, 126, 61, 78, 190, 110, 9, 172, 61, 156, 245, 154, 190, 1, 140, 165, 189, 50, 238, 242, 61, 49, 66, 0, 60, 20, 50, 252, 190, 13, 24, 160, 60, 102, 81, 40, 189, 66, 159, 163, 59, 247, 1, 6, 190, 177, 97, 27, 62, 26, 10, 249, 189, 90, 158, 90, 61, 52, 158, 172, 62, 232, 69, 41, 190, 183, 27, 145, 62, 102, 242, 125, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 213, 64, 62, 29, 204, 64, 189, 249, 169, 123, 62, 6, 31, 237, 61, 149, 149, 239, 189, 98, 233, 188, 61, 95, 3, 63, 62, 233, 52, 5, 62, 126, 245, 131, 190, 6, 146, 4, 60, 106, 172, 228, 189, 247, 44, 204, 59, 29, 124, 139, 60, 215, 135, 137, 59, 181, 9, 5, 62, 219, 104, 133, 189, 132, 13, 117, 188, 25, 177, 222, 189, 174, 79, 35, 62, 87, 12, 51, 190, 147, 184, 178, 189, 224, 225, 227, 189, 9, 148, 72, 62, 94, 75, 86, 190, 55, 18, 222, 61, 190, 74, 161, 62, 126, 104, 225, 61, 14, 27, 173, 62, 74, 197, 6, 62, 125, 71, 250, 61, 59, 137, 131, 62, 167, 169, 83, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {153, 209, 229, 62, 160, 129, 251, 59, 78, 83, 248, 62, 168, 107, 244, 62, 105, 133, 150, 61, 204, 208, 133, 191, 60, 181, 200, 189, 249, 19, 66, 191, 63, 59, 210, 62, 65, 191, 116, 61, 152, 192, 160, 189, 139, 129, 178, 62, 148, 147, 33, 63, 69, 162, 132, 62, 35, 13, 165, 190, 158, 132, 194, 60, 169, 69, 72, 190, 204, 94, 73, 61, 100, 27, 211, 188, 171, 246, 189, 61, 99, 208, 238, 189, 228, 9, 65, 191, 225, 97, 14, 63, 209, 39, 17, 63, 96, 14, 11, 191, 175, 35, 231, 189, 235, 243, 219, 189, 1, 134, 71, 63, 181, 140, 161, 190, 169, 59, 56, 190, 164, 6, 26, 63, 11, 188, 223, 62, 25, 111, 0, 190, 89, 76, 84, 61, 191, 154, 110, 190, 185, 193, 233, 189, 108, 136, 15, 190, 155, 75, 163, 59, 251, 96, 223, 189, 217, 7, 134, 62, 214, 218, 57, 61, 44, 241, 41, 62, 227, 63, 196, 61, 229, 50, 222, 60, 130, 223, 150, 61, 162, 110, 195, 61, 24, 58, 139, 190, 102, 161, 226, 190, 1, 65, 149, 189, 115, 112, 246, 61, 164, 229, 4, 61, 103, 91, 5, 62, 212, 240, 237, 59, 61, 57, 119, 61, 88, 5, 174, 62, 74, 110, 122, 62, 89, 179, 61, 62, 170, 203, 137, 190, 15, 252, 142, 59, 59, 41, 137, 190, 155, 136, 192, 189, 164, 46, 157, 190, 188, 157, 16, 58, 57, 34, 133, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 61, 101, 189, 197, 239, 128, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {103, 119, 195, 190, 190, 197, 173, 190, 87, 141, 190, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {94, 120, 244, 191, 188, 106, 61, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0036/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}