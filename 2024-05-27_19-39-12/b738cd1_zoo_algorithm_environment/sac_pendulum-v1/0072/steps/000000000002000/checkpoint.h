// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 210, 241, 61, 114, 125, 201, 190, 17, 97, 175, 188, 169, 122, 13, 63, 31, 26, 64, 190, 66, 40, 26, 62, 164, 97, 171, 190, 239, 98, 156, 63, 34, 87, 90, 62, 207, 43, 1, 190, 235, 177, 23, 63, 187, 162, 121, 61, 97, 44, 231, 189, 11, 173, 9, 63, 140, 196, 159, 62, 235, 31, 21, 191, 236, 57, 113, 63, 140, 59, 129, 62, 143, 192, 113, 190, 98, 80, 235, 62, 66, 2, 31, 62, 75, 148, 177, 190, 19, 71, 35, 191, 227, 177, 51, 62, 41, 211, 63, 62, 230, 162, 145, 62, 254, 158, 215, 62, 250, 3, 242, 190, 219, 199, 56, 191, 9, 9, 107, 62, 51, 18, 35, 62, 251, 44, 68, 61, 235, 125, 57, 63, 2, 48, 62, 190, 220, 218, 47, 191, 133, 69, 115, 62, 64, 207, 190, 62, 24, 242, 71, 63, 206, 44, 194, 62, 88, 24, 34, 191, 59, 85, 49, 191, 50, 123, 68, 190, 90, 255, 63, 189, 61, 163, 52, 191, 143, 158, 26, 60, 122, 134, 150, 62, 40, 252, 199, 62, 59, 227, 204, 190, 70, 156, 221, 190, 108, 85, 28, 188, 200, 142, 168, 61, 12, 224, 163, 190, 82, 58, 186, 62, 131, 154, 71, 191, 202, 46, 111, 62, 165, 63, 37, 62, 117, 121, 237, 62, 16, 18, 167, 62, 206, 114, 254, 61, 74, 26, 163, 190, 80, 251, 234, 190, 175, 83, 49, 191, 127, 151, 29, 190, 142, 23, 13, 63, 157, 21, 153, 62, 169, 227, 0, 63, 42, 50, 203, 62, 159, 138, 156, 191, 76, 203, 33, 62, 50, 30, 201, 189, 93, 237, 20, 191, 146, 95, 202, 62, 79, 131, 61, 188, 158, 91, 106, 62, 43, 137, 174, 190, 84, 110, 235, 190, 125, 145, 95, 63, 3, 213, 37, 191, 134, 71, 142, 62, 40, 100, 162, 61, 97, 74, 118, 189, 207, 188, 160, 189, 83, 73, 106, 62, 56, 213, 190, 61, 236, 47, 45, 191, 31, 252, 143, 62, 82, 137, 187, 189, 23, 165, 53, 60, 152, 127, 121, 191, 152, 115, 70, 62, 159, 101, 24, 191, 96, 55, 211, 190, 95, 149, 139, 190, 180, 15, 221, 62, 52, 56, 200, 190, 82, 139, 7, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 161, 19, 191, 16, 190, 248, 62, 145, 159, 221, 61, 202, 107, 178, 62, 199, 78, 62, 63, 19, 219, 170, 61, 192, 186, 212, 62, 23, 51, 44, 190, 229, 7, 27, 191, 95, 217, 131, 190, 161, 50, 203, 190, 109, 250, 186, 60, 39, 71, 239, 62, 179, 167, 94, 189, 230, 68, 249, 61, 118, 94, 210, 190, 161, 170, 30, 191, 178, 4, 19, 190, 130, 154, 174, 190, 130, 225, 28, 62, 104, 108, 203, 188, 135, 154, 32, 190, 247, 102, 28, 63, 153, 198, 102, 62, 139, 26, 219, 190, 56, 166, 85, 190, 160, 21, 172, 190, 152, 96, 28, 191, 192, 158, 57, 61, 123, 125, 113, 62, 4, 142, 109, 62, 237, 74, 14, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 108, 231, 189, 184, 61, 203, 62, 12, 47, 164, 61, 108, 34, 129, 62, 182, 237, 214, 61, 20, 248, 246, 189, 137, 49, 147, 189, 178, 117, 72, 190, 13, 164, 31, 61, 65, 223, 46, 60, 149, 54, 71, 61, 64, 212, 139, 190, 60, 92, 104, 62, 94, 254, 93, 59, 46, 202, 244, 61, 75, 176, 159, 62, 52, 139, 253, 61, 218, 204, 160, 60, 181, 34, 213, 189, 141, 214, 34, 62, 156, 241, 8, 61, 103, 157, 51, 62, 62, 188, 29, 189, 81, 154, 111, 190, 49, 86, 110, 62, 164, 37, 0, 61, 104, 21, 30, 62, 68, 212, 180, 189, 139, 125, 33, 190, 9, 118, 138, 189, 140, 254, 107, 60, 111, 10, 29, 62, 15, 229, 231, 188, 247, 45, 156, 62, 53, 149, 237, 189, 104, 62, 203, 61, 192, 163, 27, 190, 17, 79, 26, 189, 68, 243, 12, 190, 157, 229, 44, 62, 77, 68, 80, 61, 190, 41, 2, 62, 101, 209, 83, 62, 161, 209, 110, 62, 202, 92, 251, 187, 69, 58, 136, 60, 126, 199, 199, 60, 92, 71, 61, 61, 198, 128, 199, 189, 105, 36, 128, 189, 210, 55, 218, 61, 67, 95, 43, 190, 133, 126, 62, 190, 6, 57, 155, 189, 248, 88, 8, 62, 159, 42, 43, 62, 225, 245, 33, 59, 192, 245, 165, 189, 120, 97, 174, 189, 170, 45, 231, 61, 35, 114, 209, 189, 219, 202, 127, 62, 90, 93, 191, 61, 248, 102, 79, 62, 43, 151, 176, 61, 87, 83, 145, 188, 169, 132, 224, 189, 6, 70, 27, 190, 223, 29, 215, 189, 33, 255, 147, 189, 32, 254, 172, 189, 193, 181, 30, 190, 223, 127, 121, 61, 143, 92, 1, 190, 114, 139, 9, 190, 213, 254, 193, 189, 214, 158, 155, 60, 141, 198, 146, 60, 183, 201, 199, 189, 151, 179, 16, 190, 6, 37, 49, 62, 143, 141, 8, 190, 173, 100, 165, 189, 18, 105, 125, 188, 43, 228, 186, 189, 238, 84, 137, 188, 125, 70, 223, 60, 238, 109, 0, 190, 123, 223, 25, 189, 210, 135, 130, 61, 46, 194, 126, 189, 223, 142, 233, 61, 136, 165, 187, 61, 53, 30, 24, 190, 135, 163, 139, 61, 74, 49, 174, 61, 169, 125, 195, 60, 36, 150, 86, 188, 17, 128, 58, 61, 4, 52, 188, 62, 216, 230, 61, 62, 105, 146, 56, 61, 89, 224, 141, 62, 212, 253, 113, 190, 131, 112, 137, 61, 246, 0, 142, 190, 89, 166, 112, 190, 157, 35, 76, 190, 90, 7, 235, 188, 3, 161, 81, 190, 228, 43, 44, 191, 4, 249, 160, 188, 241, 156, 111, 60, 14, 71, 68, 62, 216, 152, 192, 61, 232, 200, 19, 190, 52, 50, 143, 190, 68, 251, 244, 61, 80, 70, 31, 191, 157, 80, 136, 190, 115, 166, 77, 190, 132, 123, 42, 189, 114, 215, 144, 189, 189, 172, 80, 187, 4, 128, 182, 62, 204, 161, 85, 190, 47, 65, 59, 62, 13, 71, 250, 190, 173, 43, 200, 186, 137, 236, 139, 62, 214, 113, 63, 62, 225, 95, 8, 62, 159, 105, 236, 61, 77, 77, 240, 60, 204, 25, 94, 188, 246, 148, 192, 60, 165, 200, 173, 189, 77, 86, 248, 189, 15, 114, 207, 189, 74, 233, 48, 188, 165, 213, 242, 61, 183, 130, 226, 189, 37, 147, 175, 189, 194, 38, 251, 189, 147, 164, 244, 189, 29, 21, 163, 62, 186, 109, 238, 60, 223, 5, 49, 60, 220, 158, 134, 188, 128, 202, 49, 190, 38, 248, 2, 61, 86, 167, 214, 61, 146, 24, 4, 190, 144, 42, 164, 62, 10, 34, 32, 190, 32, 165, 237, 61, 94, 196, 207, 61, 119, 63, 215, 189, 137, 214, 206, 189, 71, 166, 212, 189, 206, 236, 33, 190, 61, 52, 16, 189, 254, 160, 79, 190, 209, 69, 239, 189, 188, 98, 130, 61, 81, 51, 77, 190, 51, 2, 149, 61, 89, 172, 7, 62, 34, 235, 7, 62, 53, 78, 201, 189, 253, 12, 11, 190, 117, 204, 212, 60, 135, 243, 170, 58, 200, 19, 10, 190, 224, 137, 70, 190, 169, 26, 61, 59, 49, 116, 95, 61, 140, 91, 194, 189, 187, 173, 223, 188, 110, 105, 150, 61, 41, 138, 83, 190, 113, 179, 137, 189, 234, 126, 131, 189, 138, 81, 178, 61, 55, 69, 208, 188, 212, 211, 18, 61, 218, 148, 62, 189, 234, 202, 87, 61, 60, 47, 206, 61, 171, 32, 69, 190, 222, 42, 167, 61, 60, 122, 242, 188, 20, 167, 28, 62, 76, 211, 231, 60, 52, 45, 61, 189, 234, 180, 235, 61, 209, 208, 90, 190, 253, 240, 15, 61, 75, 107, 223, 187, 30, 73, 193, 60, 220, 206, 37, 189, 21, 8, 182, 189, 205, 20, 149, 61, 65, 116, 214, 61, 146, 213, 38, 187, 65, 239, 43, 190, 5, 9, 10, 190, 137, 138, 121, 188, 233, 32, 207, 189, 107, 201, 235, 60, 22, 249, 55, 62, 218, 48, 1, 61, 69, 157, 6, 61, 40, 51, 51, 188, 97, 5, 124, 189, 163, 121, 221, 60, 105, 164, 194, 189, 165, 7, 77, 189, 175, 192, 208, 189, 150, 24, 31, 190, 91, 29, 231, 61, 123, 60, 106, 61, 52, 239, 50, 190, 98, 33, 115, 189, 27, 106, 71, 60, 1, 187, 134, 189, 118, 235, 154, 190, 126, 54, 146, 61, 88, 161, 66, 62, 12, 84, 131, 190, 91, 9, 60, 61, 114, 57, 167, 62, 99, 178, 228, 190, 168, 218, 130, 62, 228, 200, 10, 190, 254, 31, 240, 61, 146, 249, 143, 189, 138, 114, 34, 62, 41, 195, 152, 62, 178, 95, 68, 62, 152, 222, 22, 189, 102, 134, 252, 61, 112, 72, 32, 190, 122, 80, 57, 62, 22, 250, 195, 61, 55, 22, 50, 189, 85, 95, 104, 62, 255, 115, 97, 189, 151, 237, 153, 62, 3, 141, 221, 189, 162, 159, 218, 189, 3, 203, 241, 61, 193, 35, 55, 62, 249, 32, 218, 62, 156, 38, 89, 60, 157, 10, 112, 62, 167, 167, 86, 188, 43, 71, 14, 190, 189, 223, 142, 62, 49, 83, 193, 62, 121, 150, 54, 62, 45, 90, 22, 62, 168, 188, 107, 62, 217, 69, 23, 191, 174, 39, 207, 60, 9, 105, 22, 191, 246, 56, 18, 189, 182, 73, 4, 191, 50, 204, 81, 188, 202, 105, 68, 61, 195, 54, 28, 191, 213, 94, 221, 190, 81, 126, 110, 59, 5, 129, 178, 62, 180, 203, 150, 189, 70, 58, 231, 60, 192, 84, 175, 60, 75, 236, 134, 190, 0, 77, 86, 191, 226, 107, 186, 190, 39, 61, 123, 190, 57, 137, 215, 62, 127, 226, 131, 61, 236, 146, 137, 61, 144, 199, 195, 62, 229, 4, 38, 191, 170, 56, 90, 62, 92, 236, 10, 191, 245, 83, 7, 62, 56, 235, 48, 62, 52, 244, 42, 62, 190, 119, 103, 189, 86, 10, 13, 62, 70, 15, 67, 189, 184, 177, 87, 189, 255, 221, 224, 189, 247, 161, 228, 60, 28, 216, 178, 189, 102, 128, 140, 60, 62, 67, 155, 189, 217, 80, 193, 61, 238, 180, 225, 189, 124, 201, 93, 190, 231, 201, 222, 61, 214, 47, 253, 60, 122, 88, 244, 189, 230, 117, 24, 61, 168, 242, 217, 61, 186, 248, 164, 190, 129, 244, 166, 61, 5, 124, 164, 61, 228, 199, 58, 62, 81, 122, 171, 189, 118, 78, 142, 190, 43, 72, 76, 189, 170, 164, 21, 61, 226, 220, 14, 190, 47, 206, 153, 189, 119, 44, 126, 190, 103, 82, 50, 62, 172, 132, 44, 62, 16, 101, 22, 189, 78, 224, 187, 60, 137, 58, 34, 62, 53, 207, 26, 60, 13, 77, 152, 61, 140, 243, 47, 62, 157, 15, 1, 190, 139, 255, 173, 60, 90, 71, 16, 189, 100, 224, 151, 189, 43, 195, 235, 189, 30, 227, 49, 62, 63, 22, 236, 60, 194, 216, 8, 62, 144, 252, 241, 61, 82, 20, 119, 188, 170, 246, 243, 189, 120, 207, 225, 189, 232, 192, 15, 62, 195, 189, 255, 189, 134, 2, 37, 190, 72, 172, 87, 190, 114, 114, 58, 190, 243, 255, 4, 62, 237, 102, 75, 61, 164, 184, 239, 189, 230, 32, 204, 189, 35, 110, 211, 189, 238, 39, 9, 190, 173, 67, 16, 190, 13, 183, 0, 61, 216, 75, 35, 190, 51, 176, 92, 62, 120, 7, 180, 190, 69, 157, 178, 190, 16, 138, 142, 189, 75, 38, 245, 190, 237, 0, 185, 190, 183, 204, 28, 62, 115, 90, 94, 190, 240, 245, 89, 188, 126, 100, 35, 61, 86, 171, 8, 188, 245, 20, 87, 60, 80, 240, 19, 60, 242, 161, 49, 62, 206, 241, 193, 189, 64, 229, 234, 187, 16, 90, 130, 189, 10, 161, 30, 190, 154, 177, 106, 189, 215, 228, 220, 61, 30, 186, 111, 189, 186, 177, 142, 62, 213, 20, 247, 60, 191, 250, 70, 60, 142, 203, 153, 60, 217, 170, 180, 189, 184, 241, 23, 62, 134, 104, 126, 190, 47, 80, 175, 62, 178, 217, 153, 61, 79, 86, 136, 62, 71, 43, 112, 189, 3, 123, 0, 190, 198, 97, 45, 190, 93, 40, 153, 60, 238, 128, 174, 189, 78, 94, 49, 62, 163, 186, 119, 59, 228, 155, 221, 189, 221, 191, 16, 61, 80, 191, 190, 188, 232, 10, 34, 61, 254, 85, 4, 190, 168, 48, 38, 190, 103, 254, 223, 188, 205, 186, 134, 61, 106, 226, 211, 61, 45, 62, 129, 61, 165, 28, 188, 188, 134, 163, 18, 62, 51, 191, 32, 62, 149, 84, 12, 62, 188, 213, 20, 190, 235, 34, 15, 190, 99, 172, 85, 61, 146, 105, 86, 189, 12, 21, 27, 190, 29, 86, 22, 190, 0, 203, 14, 189, 225, 160, 164, 189, 105, 183, 210, 189, 81, 165, 196, 188, 63, 55, 40, 189, 171, 142, 127, 189, 20, 30, 1, 61, 160, 25, 147, 188, 136, 95, 75, 62, 55, 60, 32, 59, 113, 50, 148, 187, 138, 94, 208, 61, 2, 165, 224, 189, 141, 80, 18, 189, 12, 48, 208, 190, 128, 70, 4, 189, 175, 25, 128, 190, 138, 104, 125, 189, 126, 67, 120, 62, 228, 142, 180, 189, 239, 245, 138, 60, 171, 246, 17, 62, 71, 242, 44, 62, 13, 167, 172, 61, 239, 67, 48, 189, 50, 237, 78, 62, 119, 188, 96, 190, 79, 161, 136, 189, 204, 169, 11, 190, 80, 196, 228, 190, 95, 184, 71, 62, 53, 175, 124, 189, 61, 66, 206, 61, 204, 212, 169, 187, 71, 65, 127, 190, 200, 185, 181, 61, 12, 56, 85, 190, 229, 194, 64, 189, 19, 33, 192, 189, 219, 113, 149, 190, 159, 72, 55, 190, 132, 250, 88, 62, 253, 191, 75, 190, 134, 33, 140, 189, 103, 219, 155, 62, 115, 199, 145, 190, 121, 69, 52, 62, 222, 17, 196, 190, 136, 210, 74, 61, 136, 26, 61, 61, 234, 226, 174, 61, 248, 178, 158, 62, 175, 116, 162, 62, 208, 190, 60, 190, 29, 61, 168, 61, 188, 45, 43, 190, 170, 121, 47, 190, 117, 83, 250, 61, 191, 46, 170, 190, 213, 200, 120, 60, 239, 145, 169, 62, 99, 195, 104, 62, 168, 157, 132, 189, 107, 33, 45, 62, 153, 149, 242, 61, 247, 234, 92, 60, 99, 39, 177, 62, 11, 157, 80, 61, 253, 23, 191, 61, 239, 162, 191, 189, 96, 215, 137, 189, 131, 99, 46, 62, 154, 103, 227, 189, 85, 76, 27, 190, 217, 144, 31, 190, 173, 233, 31, 62, 7, 111, 241, 189, 253, 215, 187, 188, 168, 123, 95, 188, 13, 249, 25, 190, 67, 118, 244, 60, 11, 229, 20, 190, 127, 77, 120, 189, 253, 249, 178, 61, 112, 193, 240, 61, 24, 27, 235, 61, 132, 25, 134, 61, 21, 87, 239, 189, 91, 61, 42, 190, 55, 42, 213, 188, 7, 11, 15, 60, 115, 136, 57, 60, 160, 254, 227, 61, 152, 204, 49, 61, 227, 213, 51, 190, 248, 148, 37, 62, 188, 39, 96, 189, 9, 118, 52, 62, 99, 176, 22, 190, 11, 165, 41, 190, 167, 229, 35, 190, 190, 82, 68, 61, 79, 228, 28, 62, 0, 101, 73, 189, 116, 79, 213, 187, 120, 209, 44, 190, 64, 67, 50, 61, 9, 189, 195, 61, 200, 56, 29, 188, 236, 80, 46, 190, 248, 105, 39, 62, 106, 198, 166, 189, 115, 66, 132, 61, 75, 108, 243, 189, 252, 44, 24, 190, 195, 242, 44, 190, 190, 169, 50, 61, 198, 58, 199, 61, 147, 213, 236, 189, 176, 32, 32, 62, 253, 93, 141, 189, 16, 239, 242, 187, 107, 45, 9, 190, 198, 93, 134, 188, 78, 147, 80, 190, 41, 93, 34, 60, 105, 168, 165, 61, 156, 75, 224, 188, 17, 197, 29, 62, 42, 117, 100, 188, 177, 54, 91, 190, 109, 15, 168, 61, 139, 106, 27, 61, 152, 175, 238, 61, 124, 164, 151, 62, 192, 62, 173, 189, 179, 141, 62, 62, 171, 51, 61, 62, 200, 60, 202, 61, 169, 221, 82, 62, 197, 93, 5, 62, 123, 167, 92, 190, 142, 172, 185, 189, 36, 22, 1, 60, 206, 170, 134, 62, 173, 99, 11, 189, 156, 56, 219, 61, 78, 213, 130, 62, 142, 99, 150, 189, 197, 228, 84, 190, 164, 10, 205, 61, 98, 81, 104, 189, 157, 133, 166, 60, 89, 134, 10, 62, 55, 47, 27, 190, 193, 219, 23, 62, 0, 183, 3, 62, 107, 19, 121, 62, 37, 212, 24, 62, 131, 198, 37, 62, 66, 9, 170, 189, 234, 131, 78, 61, 147, 204, 70, 62, 28, 172, 1, 189, 195, 27, 111, 62, 109, 152, 32, 60, 201, 248, 188, 61, 10, 34, 50, 62, 202, 166, 30, 62, 126, 23, 163, 60, 255, 53, 35, 190, 24, 47, 6, 62, 1, 135, 228, 60, 24, 201, 242, 58, 176, 35, 86, 190, 46, 88, 156, 61, 186, 158, 42, 190, 102, 71, 45, 62, 226, 35, 244, 189, 19, 124, 112, 190, 234, 122, 225, 189, 242, 208, 163, 61, 102, 220, 15, 189, 93, 224, 13, 59, 74, 24, 33, 62, 102, 239, 35, 61, 193, 227, 33, 62, 103, 120, 54, 189, 53, 139, 193, 189, 53, 29, 32, 61, 192, 243, 53, 61, 103, 103, 175, 60, 110, 254, 86, 189, 98, 23, 249, 189, 8, 136, 154, 190, 222, 246, 130, 187, 91, 187, 122, 189, 74, 62, 52, 62, 195, 117, 152, 61, 190, 224, 37, 61, 28, 116, 140, 60, 61, 40, 61, 62, 205, 34, 95, 62, 193, 157, 104, 62, 66, 202, 205, 189, 13, 203, 171, 189, 168, 245, 75, 190, 128, 222, 126, 61, 126, 189, 52, 190, 173, 201, 161, 61, 35, 179, 66, 190, 172, 145, 204, 190, 65, 67, 227, 187, 63, 106, 197, 188, 81, 108, 78, 62, 187, 45, 116, 189, 98, 213, 158, 190, 147, 148, 105, 190, 63, 19, 1, 62, 206, 251, 147, 189, 211, 164, 49, 61, 46, 32, 208, 187, 166, 40, 54, 61, 252, 63, 207, 189, 236, 123, 8, 62, 129, 252, 43, 61, 195, 51, 33, 188, 241, 69, 149, 60, 245, 237, 144, 188, 254, 230, 128, 60, 160, 52, 55, 59, 194, 183, 30, 189, 105, 219, 137, 188, 157, 183, 39, 60, 49, 133, 8, 190, 124, 49, 209, 61, 223, 134, 207, 189, 198, 162, 56, 188, 11, 185, 208, 61, 127, 67, 150, 189, 145, 164, 72, 61, 101, 248, 8, 190, 152, 158, 2, 62, 90, 61, 197, 189, 225, 161, 31, 188, 246, 218, 246, 61, 173, 39, 56, 189, 38, 185, 167, 189, 177, 124, 87, 189, 96, 180, 234, 60, 191, 186, 107, 61, 229, 29, 130, 189, 22, 212, 135, 61, 120, 63, 149, 189, 250, 92, 75, 61, 79, 12, 244, 61, 201, 82, 182, 189, 10, 138, 77, 188, 86, 144, 232, 189, 4, 139, 155, 189, 17, 243, 244, 61, 127, 25, 192, 189, 131, 22, 54, 188, 97, 187, 184, 61, 24, 240, 213, 188, 0, 204, 38, 190, 42, 39, 179, 189, 205, 123, 27, 190, 214, 168, 87, 189, 68, 235, 13, 190, 87, 206, 243, 189, 194, 69, 60, 189, 218, 124, 8, 189, 234, 18, 8, 190, 63, 122, 162, 188, 45, 133, 213, 189, 186, 68, 163, 60, 69, 31, 28, 62, 11, 96, 233, 189, 201, 26, 12, 62, 44, 232, 117, 60, 201, 188, 29, 189, 68, 38, 5, 62, 140, 143, 32, 61, 149, 167, 127, 189, 2, 247, 106, 60, 130, 196, 188, 189, 154, 205, 16, 62, 238, 188, 164, 61, 167, 107, 118, 189, 100, 93, 59, 189, 113, 55, 64, 61, 207, 180, 12, 62, 95, 158, 65, 189, 46, 105, 166, 61, 215, 106, 118, 189, 165, 198, 234, 61, 126, 240, 94, 189, 97, 109, 31, 190, 233, 202, 48, 190, 113, 7, 4, 189, 175, 91, 68, 61, 167, 165, 181, 190, 20, 231, 224, 61, 169, 108, 144, 61, 236, 134, 89, 62, 173, 141, 74, 189, 106, 207, 23, 190, 68, 226, 222, 62, 165, 160, 136, 188, 14, 9, 187, 61, 55, 242, 167, 189, 154, 32, 44, 62, 130, 91, 66, 190, 224, 135, 34, 190, 198, 97, 128, 61, 38, 254, 162, 188, 13, 232, 251, 62, 110, 39, 92, 62, 174, 249, 226, 61, 158, 8, 87, 189, 227, 104, 219, 61, 124, 114, 136, 61, 238, 58, 95, 61, 163, 204, 89, 62, 214, 11, 52, 62, 147, 38, 168, 61, 233, 100, 4, 62, 251, 215, 218, 189, 49, 16, 51, 61, 174, 225, 61, 190, 225, 195, 199, 60, 45, 106, 238, 189, 181, 18, 33, 190, 235, 218, 118, 189, 58, 185, 192, 59, 200, 121, 15, 190, 219, 133, 93, 189, 169, 65, 151, 189, 171, 66, 143, 60, 206, 8, 115, 187, 77, 221, 159, 189, 32, 162, 128, 60, 152, 27, 98, 189, 242, 103, 225, 61, 221, 30, 3, 189, 161, 119, 25, 62, 97, 17, 119, 189, 214, 68, 223, 189, 231, 113, 0, 62, 68, 242, 138, 60, 140, 110, 0, 190, 19, 9, 158, 189, 99, 158, 21, 190, 44, 27, 254, 61, 157, 55, 63, 190, 146, 60, 225, 189, 171, 117, 181, 188, 186, 166, 28, 62, 112, 57, 27, 189, 80, 227, 77, 190, 75, 242, 30, 189, 134, 165, 157, 61, 129, 213, 138, 190, 240, 156, 60, 62, 115, 144, 160, 189, 45, 83, 92, 61, 66, 197, 250, 61, 11, 219, 233, 61, 219, 196, 206, 61, 45, 163, 242, 188, 208, 187, 126, 62, 198, 196, 30, 62, 39, 154, 210, 189, 120, 0, 29, 62, 253, 12, 177, 61, 22, 20, 44, 62, 203, 104, 120, 189, 230, 208, 56, 62, 204, 45, 116, 62, 120, 76, 238, 187, 129, 206, 111, 60, 138, 183, 74, 189, 183, 10, 17, 190, 21, 111, 224, 189, 161, 105, 163, 190, 234, 47, 129, 62, 8, 50, 153, 61, 124, 86, 127, 62, 64, 65, 49, 61, 40, 134, 122, 62, 77, 132, 128, 189, 102, 35, 43, 190, 141, 167, 73, 189, 145, 97, 136, 190, 53, 156, 223, 189, 204, 201, 16, 62, 198, 62, 1, 62, 91, 254, 143, 62, 133, 7, 58, 62, 201, 188, 170, 60, 95, 243, 0, 62, 103, 117, 4, 189, 233, 203, 245, 61, 200, 11, 130, 190, 72, 189, 73, 61, 71, 76, 242, 189, 12, 239, 174, 61, 45, 179, 77, 189, 231, 104, 213, 189, 31, 225, 255, 59, 247, 126, 178, 62, 59, 177, 184, 60, 44, 65, 14, 190, 142, 232, 228, 61, 208, 249, 180, 59, 27, 97, 36, 190, 66, 168, 123, 190, 45, 245, 101, 62, 19, 243, 51, 189, 176, 42, 152, 61, 223, 150, 219, 189, 40, 1, 255, 187, 215, 7, 169, 60, 105, 95, 83, 189, 129, 245, 32, 190, 131, 24, 170, 189, 128, 22, 142, 189, 167, 128, 0, 189, 26, 213, 7, 190, 49, 160, 160, 61, 95, 74, 10, 62, 79, 146, 29, 189, 238, 33, 185, 61, 82, 222, 103, 61, 153, 203, 137, 60, 100, 26, 246, 189, 218, 125, 42, 190, 139, 118, 96, 61, 201, 157, 129, 189, 88, 225, 233, 61, 21, 165, 60, 190, 60, 45, 44, 62, 54, 167, 122, 187, 191, 45, 200, 189, 137, 160, 45, 190, 53, 109, 238, 58, 189, 51, 22, 61, 172, 175, 156, 61, 162, 202, 2, 189, 203, 244, 51, 190, 61, 66, 138, 189, 102, 111, 13, 62, 178, 174, 26, 62, 48, 5, 81, 189, 234, 159, 91, 61, 52, 14, 73, 189, 110, 105, 36, 190, 192, 92, 156, 189, 75, 72, 31, 190, 68, 88, 51, 189, 227, 189, 94, 189, 148, 118, 12, 189, 149, 119, 136, 189, 70, 23, 9, 62, 14, 224, 145, 61, 29, 168, 239, 187, 87, 66, 233, 188, 219, 118, 247, 188, 182, 103, 3, 189, 12, 227, 200, 188, 32, 128, 192, 60, 234, 23, 117, 60, 246, 167, 64, 189, 231, 91, 158, 61, 116, 11, 174, 189, 59, 89, 239, 61, 42, 19, 216, 189, 103, 135, 3, 62, 251, 103, 1, 190, 133, 199, 241, 61, 84, 244, 157, 59, 91, 14, 229, 61, 100, 146, 181, 189, 73, 140, 231, 189, 88, 73, 6, 62, 173, 151, 140, 188, 12, 0, 39, 190, 168, 249, 152, 60, 30, 72, 57, 190, 45, 224, 173, 61, 250, 128, 194, 61, 190, 11, 65, 190, 240, 24, 37, 189, 187, 131, 228, 189, 138, 12, 42, 61, 66, 121, 0, 62, 142, 167, 193, 61, 62, 144, 65, 189, 128, 234, 197, 60, 64, 59, 239, 61, 98, 202, 229, 61, 78, 124, 240, 189, 200, 183, 226, 189, 75, 223, 11, 188, 32, 109, 27, 61, 215, 130, 119, 61, 156, 158, 59, 190, 40, 181, 0, 190, 194, 96, 156, 189, 135, 209, 4, 61, 16, 117, 34, 62, 70, 83, 84, 61, 246, 119, 67, 61, 112, 104, 145, 61, 110, 121, 151, 189, 253, 179, 240, 61, 206, 94, 81, 61, 95, 71, 30, 61, 199, 24, 250, 61, 180, 57, 143, 61, 22, 161, 18, 189, 247, 149, 17, 60, 148, 2, 29, 189, 93, 240, 69, 190, 120, 39, 89, 189, 13, 175, 62, 61, 104, 253, 187, 189, 56, 24, 43, 62, 78, 204, 122, 62, 18, 136, 198, 190, 113, 35, 218, 60, 24, 248, 132, 61, 24, 105, 7, 62, 222, 234, 164, 60, 55, 126, 195, 189, 64, 81, 170, 188, 150, 165, 84, 189, 205, 20, 214, 189, 232, 181, 9, 62, 216, 157, 227, 61, 181, 193, 10, 62, 238, 159, 141, 190, 6, 36, 41, 190, 62, 124, 199, 188, 247, 78, 1, 187, 114, 172, 57, 61, 27, 80, 55, 190, 17, 123, 37, 62, 142, 220, 176, 188, 232, 242, 199, 189, 218, 149, 224, 61, 127, 30, 214, 61, 244, 81, 204, 61, 246, 60, 47, 61, 26, 174, 38, 62, 82, 119, 243, 60, 188, 40, 35, 61, 227, 235, 92, 62, 227, 193, 110, 190, 162, 231, 16, 189, 143, 10, 59, 190, 40, 107, 152, 60, 91, 184, 23, 62, 160, 168, 166, 61, 25, 234, 15, 61, 107, 21, 162, 61, 194, 40, 195, 189, 250, 140, 21, 61, 56, 91, 137, 61, 132, 10, 198, 189, 10, 17, 146, 62, 12, 13, 160, 187, 242, 1, 211, 62, 216, 117, 68, 60, 104, 239, 219, 189, 231, 166, 111, 189, 185, 20, 2, 62, 102, 198, 6, 62, 69, 166, 63, 62, 119, 169, 229, 61, 37, 92, 24, 190, 100, 104, 195, 189, 74, 251, 67, 190, 35, 208, 170, 61, 141, 148, 86, 61, 251, 36, 161, 61, 1, 3, 95, 62, 134, 173, 130, 62, 158, 8, 67, 61, 233, 178, 49, 62, 132, 158, 105, 190, 216, 216, 5, 62, 233, 160, 188, 61, 18, 2, 133, 62, 131, 239, 147, 62, 124, 182, 137, 189, 233, 30, 196, 59, 126, 75, 35, 191, 137, 69, 68, 61, 18, 253, 133, 190, 35, 142, 51, 62, 99, 213, 14, 61, 57, 105, 208, 61, 220, 152, 2, 62, 163, 80, 130, 189, 23, 126, 43, 190, 59, 0, 242, 188, 198, 36, 191, 189, 45, 17, 25, 60, 77, 135, 131, 62, 223, 129, 155, 60, 122, 88, 30, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 202, 168, 189, 107, 128, 195, 61, 194, 46, 234, 189, 245, 27, 82, 62, 15, 216, 113, 61, 109, 235, 24, 61, 68, 86, 10, 186, 36, 20, 214, 188, 236, 1, 137, 62, 19, 50, 70, 62, 114, 179, 68, 189, 246, 234, 235, 61, 78, 81, 127, 189, 43, 165, 46, 187, 186, 171, 43, 62, 117, 34, 188, 184, 26, 150, 85, 61, 134, 151, 104, 62, 218, 153, 7, 189, 120, 135, 96, 61, 238, 169, 26, 190, 58, 130, 31, 190, 3, 136, 168, 189, 20, 130, 194, 189, 43, 87, 219, 188, 60, 77, 216, 61, 157, 4, 68, 190, 113, 176, 15, 190, 20, 89, 247, 185, 130, 178, 210, 187, 158, 44, 43, 62, 145, 173, 41, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 87, 153, 62, 182, 155, 244, 189, 32, 84, 130, 57, 115, 53, 197, 190, 245, 5, 197, 189, 181, 206, 149, 188, 247, 137, 150, 61, 225, 150, 180, 62, 175, 220, 250, 190, 244, 66, 10, 190, 33, 39, 9, 62, 22, 83, 239, 190, 58, 64, 26, 62, 223, 108, 81, 190, 12, 225, 152, 62, 64, 239, 201, 60, 134, 33, 40, 189, 104, 159, 167, 61, 47, 20, 88, 62, 79, 66, 89, 190, 92, 77, 174, 61, 237, 169, 191, 61, 201, 131, 217, 62, 56, 40, 20, 190, 106, 92, 61, 190, 232, 94, 181, 190, 159, 88, 117, 189, 213, 201, 230, 61, 112, 170, 245, 189, 68, 254, 145, 189, 118, 170, 116, 62, 175, 155, 183, 62, 66, 247, 46, 189, 155, 134, 152, 190, 138, 87, 184, 189, 218, 141, 226, 60, 248, 237, 110, 190, 27, 200, 201, 60, 120, 20, 16, 62, 199, 149, 249, 189, 45, 55, 247, 188, 97, 161, 91, 190, 209, 116, 176, 188, 27, 141, 173, 189, 33, 226, 35, 62, 82, 155, 69, 189, 162, 73, 254, 187, 58, 176, 151, 60, 59, 193, 214, 60, 90, 20, 113, 190, 65, 213, 48, 62, 71, 214, 184, 188, 73, 10, 33, 190, 23, 251, 239, 189, 241, 19, 102, 189, 87, 57, 9, 62, 46, 1, 30, 190, 205, 212, 159, 61, 255, 141, 204, 61, 22, 102, 26, 190, 254, 91, 145, 61, 76, 3, 141, 190, 15, 7, 196, 189, 222, 23, 80, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 83, 59, 62, 149, 235, 218, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {229, 197, 145, 62, 235, 241, 157, 63, 40, 2, 203, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {158, 11, 50, 191, 166, 213, 80, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0072/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}