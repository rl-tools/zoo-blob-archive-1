// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 210, 241, 61, 114, 125, 201, 190, 17, 97, 175, 188, 8, 9, 81, 63, 54, 114, 248, 189, 40, 253, 83, 62, 219, 7, 54, 191, 64, 242, 141, 63, 216, 1, 231, 188, 45, 197, 79, 190, 47, 102, 52, 63, 1, 104, 142, 61, 122, 12, 200, 61, 113, 82, 169, 63, 100, 103, 142, 61, 80, 14, 132, 191, 106, 165, 95, 63, 79, 92, 106, 189, 169, 40, 3, 191, 243, 241, 43, 63, 177, 186, 9, 62, 114, 101, 10, 190, 29, 53, 88, 63, 119, 138, 196, 62, 89, 149, 70, 63, 46, 24, 12, 63, 245, 113, 196, 62, 123, 162, 126, 190, 219, 129, 26, 63, 129, 19, 18, 63, 118, 114, 199, 62, 129, 191, 152, 61, 195, 164, 59, 63, 123, 67, 133, 188, 202, 109, 54, 63, 145, 80, 21, 63, 19, 111, 232, 186, 183, 19, 211, 63, 214, 61, 233, 62, 20, 44, 146, 191, 217, 4, 37, 191, 183, 135, 239, 189, 155, 200, 16, 63, 250, 245, 38, 191, 7, 201, 95, 190, 248, 26, 208, 62, 52, 32, 133, 62, 42, 1, 240, 190, 129, 248, 173, 189, 104, 208, 160, 190, 32, 97, 30, 62, 20, 120, 15, 191, 85, 19, 54, 191, 207, 1, 67, 191, 222, 161, 215, 62, 174, 231, 125, 63, 65, 106, 3, 63, 30, 17, 183, 62, 110, 67, 138, 190, 252, 93, 146, 190, 117, 76, 28, 191, 27, 223, 111, 191, 253, 129, 129, 189, 16, 34, 46, 63, 249, 171, 178, 63, 244, 36, 233, 62, 15, 52, 59, 63, 76, 255, 115, 191, 98, 11, 186, 62, 159, 140, 93, 61, 91, 232, 112, 63, 247, 77, 43, 63, 246, 213, 255, 189, 137, 95, 148, 61, 27, 237, 213, 190, 149, 34, 196, 190, 169, 133, 177, 189, 98, 15, 39, 191, 165, 241, 104, 62, 178, 196, 33, 61, 111, 229, 237, 187, 18, 194, 140, 189, 180, 165, 82, 62, 235, 163, 84, 61, 93, 55, 141, 191, 192, 133, 22, 189, 249, 99, 158, 189, 61, 53, 124, 62, 17, 79, 44, 191, 229, 9, 202, 62, 252, 203, 45, 191, 204, 3, 208, 191, 179, 77, 189, 190, 19, 78, 252, 62, 239, 101, 168, 190, 242, 85, 210, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 161, 19, 191, 123, 110, 230, 62, 75, 95, 92, 62, 103, 223, 29, 63, 136, 166, 58, 63, 156, 203, 33, 63, 157, 243, 26, 63, 233, 171, 194, 190, 227, 177, 108, 191, 246, 139, 244, 190, 177, 159, 194, 190, 209, 31, 128, 190, 127, 115, 59, 189, 251, 142, 56, 62, 224, 91, 152, 190, 40, 103, 152, 190, 49, 205, 118, 191, 121, 93, 219, 189, 106, 207, 130, 61, 46, 173, 115, 62, 216, 112, 140, 62, 113, 39, 1, 62, 193, 80, 3, 63, 171, 149, 198, 189, 67, 44, 149, 190, 93, 83, 112, 190, 24, 196, 205, 190, 224, 130, 35, 191, 250, 227, 142, 189, 28, 185, 245, 60, 183, 151, 34, 63, 29, 227, 183, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 108, 231, 189, 145, 186, 54, 63, 250, 24, 127, 189, 252, 241, 28, 62, 160, 30, 59, 190, 113, 113, 148, 190, 5, 216, 41, 191, 163, 104, 168, 190, 244, 185, 220, 190, 215, 197, 60, 60, 226, 28, 63, 62, 194, 255, 168, 190, 252, 92, 11, 191, 129, 165, 76, 189, 71, 164, 67, 62, 2, 107, 156, 62, 176, 118, 163, 61, 124, 132, 217, 60, 32, 165, 200, 190, 228, 235, 42, 62, 135, 117, 207, 60, 200, 144, 155, 190, 70, 181, 90, 62, 191, 128, 164, 190, 202, 12, 112, 62, 110, 51, 221, 61, 108, 206, 9, 62, 40, 106, 177, 189, 208, 105, 20, 190, 166, 0, 77, 62, 76, 194, 50, 59, 177, 27, 152, 62, 15, 229, 231, 188, 46, 13, 63, 61, 78, 103, 172, 189, 133, 28, 12, 61, 88, 123, 35, 190, 202, 53, 141, 189, 172, 95, 86, 190, 142, 176, 0, 62, 233, 150, 55, 61, 45, 143, 118, 61, 181, 122, 35, 62, 47, 125, 40, 62, 170, 222, 128, 188, 65, 67, 59, 191, 126, 115, 157, 189, 100, 50, 29, 190, 144, 90, 32, 62, 30, 184, 181, 61, 250, 118, 214, 61, 235, 52, 151, 62, 19, 148, 174, 190, 116, 41, 178, 189, 234, 43, 139, 61, 168, 194, 179, 61, 17, 58, 127, 62, 239, 57, 135, 61, 136, 162, 155, 189, 26, 161, 229, 61, 141, 194, 23, 191, 38, 181, 86, 62, 164, 252, 96, 191, 202, 37, 186, 61, 43, 151, 176, 61, 87, 83, 145, 188, 169, 132, 224, 189, 6, 70, 27, 190, 223, 29, 215, 189, 33, 255, 147, 189, 32, 254, 172, 189, 193, 181, 30, 190, 223, 127, 121, 61, 143, 92, 1, 190, 114, 139, 9, 190, 213, 254, 193, 189, 214, 158, 155, 60, 141, 198, 146, 60, 183, 201, 199, 189, 151, 179, 16, 190, 6, 37, 49, 62, 143, 141, 8, 190, 173, 100, 165, 189, 18, 105, 125, 188, 43, 228, 186, 189, 238, 84, 137, 188, 125, 70, 223, 60, 238, 109, 0, 190, 123, 223, 25, 189, 210, 135, 130, 61, 46, 194, 126, 189, 223, 142, 233, 61, 136, 165, 187, 61, 53, 30, 24, 190, 135, 163, 139, 61, 74, 49, 174, 61, 169, 125, 195, 60, 115, 39, 249, 62, 32, 139, 129, 61, 126, 132, 255, 62, 245, 55, 148, 62, 74, 64, 200, 61, 84, 31, 247, 62, 249, 25, 87, 191, 175, 74, 239, 62, 146, 68, 67, 191, 135, 238, 37, 61, 196, 155, 17, 191, 209, 192, 12, 191, 237, 156, 149, 61, 63, 198, 155, 191, 76, 229, 58, 190, 235, 6, 6, 61, 17, 88, 63, 62, 138, 150, 3, 63, 221, 67, 138, 190, 161, 186, 246, 61, 63, 61, 37, 63, 156, 211, 189, 190, 84, 21, 19, 191, 48, 207, 184, 190, 105, 154, 74, 189, 61, 193, 41, 189, 189, 172, 80, 187, 93, 124, 3, 63, 21, 26, 112, 61, 26, 71, 93, 62, 57, 224, 180, 190, 173, 43, 200, 186, 51, 26, 184, 62, 149, 20, 144, 62, 191, 252, 129, 62, 194, 89, 195, 62, 154, 224, 82, 189, 178, 238, 9, 62, 83, 199, 198, 189, 104, 252, 18, 190, 132, 189, 158, 190, 243, 156, 161, 189, 215, 204, 14, 190, 169, 20, 33, 62, 56, 176, 132, 189, 76, 131, 232, 189, 243, 40, 142, 190, 40, 161, 9, 191, 194, 31, 134, 62, 60, 113, 105, 62, 146, 117, 98, 189, 252, 228, 99, 189, 214, 13, 49, 62, 241, 144, 79, 61, 113, 219, 31, 61, 147, 83, 142, 190, 190, 196, 104, 62, 226, 60, 22, 190, 59, 252, 236, 61, 148, 251, 249, 189, 201, 14, 20, 190, 66, 221, 116, 190, 139, 116, 55, 190, 206, 236, 33, 190, 61, 52, 16, 189, 254, 160, 79, 190, 209, 69, 239, 189, 188, 98, 130, 61, 81, 51, 77, 190, 51, 2, 149, 61, 89, 172, 7, 62, 34, 235, 7, 62, 53, 78, 201, 189, 253, 12, 11, 190, 117, 204, 212, 60, 135, 243, 170, 58, 200, 19, 10, 190, 224, 137, 70, 190, 169, 26, 61, 59, 49, 116, 95, 61, 140, 91, 194, 189, 187, 173, 223, 188, 110, 105, 150, 61, 41, 138, 83, 190, 113, 179, 137, 189, 234, 126, 131, 189, 138, 81, 178, 61, 55, 69, 208, 188, 212, 211, 18, 61, 218, 148, 62, 189, 234, 202, 87, 61, 60, 47, 206, 61, 171, 32, 69, 190, 222, 42, 167, 61, 60, 122, 242, 188, 20, 167, 28, 62, 225, 7, 97, 61, 103, 177, 84, 189, 76, 172, 13, 61, 40, 177, 145, 190, 101, 252, 195, 188, 163, 218, 194, 189, 91, 60, 173, 189, 135, 118, 128, 61, 189, 14, 75, 190, 190, 242, 208, 61, 119, 116, 110, 60, 89, 192, 11, 60, 235, 183, 95, 190, 212, 100, 136, 190, 137, 138, 121, 188, 116, 118, 98, 189, 107, 201, 235, 60, 112, 75, 109, 62, 99, 21, 5, 61, 20, 4, 38, 190, 205, 2, 160, 61, 250, 94, 43, 190, 11, 33, 41, 189, 105, 164, 194, 189, 165, 7, 77, 189, 175, 192, 208, 189, 174, 125, 30, 190, 216, 229, 16, 190, 241, 61, 80, 189, 242, 27, 56, 190, 84, 218, 220, 189, 27, 106, 71, 60, 119, 187, 160, 60, 130, 21, 162, 190, 138, 242, 13, 62, 74, 196, 151, 62, 85, 19, 173, 190, 17, 150, 149, 189, 70, 239, 181, 62, 54, 203, 34, 191, 156, 72, 153, 62, 121, 3, 59, 190, 137, 243, 21, 62, 236, 241, 7, 61, 82, 11, 182, 61, 60, 68, 153, 62, 25, 201, 56, 62, 162, 69, 224, 190, 142, 253, 170, 60, 131, 88, 131, 190, 141, 165, 71, 62, 11, 184, 117, 189, 218, 146, 55, 190, 165, 79, 105, 62, 205, 135, 3, 59, 82, 194, 158, 62, 113, 58, 57, 190, 50, 106, 4, 190, 3, 203, 241, 61, 142, 49, 57, 62, 168, 223, 215, 62, 96, 98, 166, 189, 141, 80, 156, 62, 167, 167, 86, 188, 184, 248, 160, 62, 164, 36, 211, 61, 61, 109, 71, 62, 141, 41, 142, 189, 151, 228, 145, 188, 142, 75, 100, 62, 46, 138, 209, 191, 224, 3, 93, 62, 48, 190, 200, 191, 148, 248, 7, 62, 10, 115, 170, 191, 76, 161, 134, 191, 68, 81, 176, 61, 163, 77, 12, 191, 254, 191, 240, 190, 253, 117, 8, 60, 193, 237, 185, 62, 215, 176, 238, 189, 100, 124, 8, 61, 209, 20, 25, 62, 154, 57, 45, 62, 54, 164, 74, 191, 84, 96, 128, 191, 155, 48, 158, 190, 71, 92, 193, 62, 41, 176, 209, 61, 236, 146, 137, 61, 234, 240, 123, 62, 165, 70, 129, 191, 196, 18, 173, 62, 99, 17, 130, 191, 245, 83, 7, 62, 15, 45, 134, 62, 147, 216, 154, 62, 138, 102, 218, 188, 73, 192, 63, 62, 2, 155, 12, 189, 253, 147, 61, 189, 200, 116, 0, 190, 21, 206, 151, 61, 153, 62, 178, 189, 189, 207, 144, 61, 113, 136, 177, 189, 181, 111, 29, 61, 174, 188, 194, 191, 211, 190, 97, 191, 63, 210, 206, 62, 107, 242, 221, 62, 211, 192, 64, 189, 37, 121, 88, 61, 52, 245, 170, 62, 39, 97, 35, 191, 73, 37, 1, 62, 36, 173, 132, 62, 92, 220, 40, 62, 249, 9, 85, 62, 49, 46, 18, 190, 219, 165, 21, 189, 33, 50, 18, 61, 32, 164, 201, 190, 146, 16, 62, 61, 95, 185, 29, 192, 156, 234, 130, 62, 172, 132, 44, 62, 132, 25, 142, 191, 0, 234, 199, 60, 202, 145, 115, 62, 13, 132, 53, 190, 210, 219, 144, 62, 42, 193, 165, 62, 196, 108, 27, 190, 70, 226, 196, 190, 80, 111, 87, 189, 77, 69, 253, 190, 85, 227, 121, 190, 223, 146, 175, 62, 202, 156, 166, 62, 220, 255, 124, 190, 209, 91, 225, 190, 159, 167, 56, 189, 10, 17, 150, 190, 203, 218, 177, 191, 193, 55, 143, 190, 97, 168, 237, 61, 194, 45, 162, 191, 7, 169, 89, 62, 236, 87, 194, 190, 141, 68, 253, 60, 1, 1, 238, 188, 164, 184, 239, 189, 230, 32, 204, 189, 36, 37, 185, 62, 20, 154, 57, 62, 56, 248, 149, 62, 245, 42, 182, 189, 216, 75, 35, 190, 68, 98, 3, 190, 230, 46, 59, 191, 106, 94, 105, 191, 236, 9, 95, 191, 78, 7, 122, 191, 156, 104, 155, 190, 58, 23, 150, 62, 169, 165, 80, 191, 124, 150, 242, 61, 132, 77, 122, 190, 240, 30, 1, 59, 158, 91, 1, 191, 18, 164, 65, 62, 192, 43, 112, 62, 39, 46, 36, 189, 22, 127, 132, 190, 73, 251, 44, 190, 155, 122, 109, 191, 219, 56, 61, 190, 207, 191, 196, 62, 177, 232, 217, 191, 136, 250, 147, 62, 110, 106, 3, 58, 103, 82, 213, 189, 129, 17, 55, 190, 149, 167, 180, 189, 184, 241, 23, 62, 191, 193, 71, 191, 159, 29, 188, 62, 39, 88, 137, 62, 57, 247, 194, 61, 71, 43, 112, 189, 205, 145, 253, 189, 227, 199, 59, 190, 186, 125, 139, 59, 227, 234, 188, 189, 150, 172, 51, 62, 24, 110, 166, 59, 228, 155, 221, 189, 221, 191, 16, 61, 80, 191, 190, 188, 232, 10, 34, 61, 254, 85, 4, 190, 168, 48, 38, 190, 216, 115, 71, 189, 214, 157, 100, 61, 232, 110, 180, 61, 45, 62, 129, 61, 188, 127, 30, 189, 134, 163, 18, 62, 19, 80, 17, 62, 59, 41, 241, 61, 188, 213, 20, 190, 32, 246, 15, 190, 99, 172, 85, 61, 246, 217, 150, 189, 83, 39, 43, 190, 29, 86, 22, 190, 0, 203, 14, 189, 133, 117, 168, 189, 105, 183, 210, 189, 89, 246, 240, 188, 63, 55, 40, 189, 171, 142, 127, 189, 174, 107, 151, 62, 51, 9, 166, 189, 245, 254, 228, 61, 130, 35, 62, 189, 0, 166, 239, 189, 123, 252, 131, 62, 56, 215, 151, 191, 249, 98, 226, 60, 108, 218, 190, 191, 104, 180, 12, 63, 2, 209, 117, 191, 214, 64, 155, 191, 152, 59, 171, 62, 158, 222, 119, 189, 22, 121, 209, 188, 171, 246, 17, 62, 97, 193, 78, 62, 224, 16, 63, 63, 14, 233, 2, 189, 29, 104, 246, 62, 184, 9, 27, 63, 158, 67, 2, 190, 100, 39, 134, 191, 40, 34, 5, 191, 108, 0, 30, 62, 118, 224, 22, 189, 61, 66, 206, 61, 221, 29, 40, 190, 112, 38, 197, 190, 237, 95, 134, 62, 136, 158, 150, 190, 229, 194, 64, 189, 44, 174, 133, 61, 160, 115, 192, 190, 107, 11, 173, 189, 181, 9, 174, 62, 233, 184, 196, 190, 96, 216, 65, 190, 84, 149, 157, 62, 246, 71, 33, 191, 217, 80, 103, 62, 164, 18, 231, 190, 100, 54, 176, 61, 1, 109, 178, 61, 127, 135, 245, 189, 199, 80, 200, 62, 249, 90, 194, 62, 252, 197, 43, 191, 30, 151, 180, 190, 0, 233, 180, 190, 193, 158, 126, 189, 159, 242, 255, 189, 51, 155, 16, 191, 90, 194, 189, 60, 48, 29, 201, 62, 185, 215, 174, 61, 165, 208, 166, 190, 253, 216, 20, 62, 153, 149, 242, 61, 254, 94, 76, 190, 254, 239, 180, 62, 198, 177, 254, 189, 43, 105, 59, 62, 239, 162, 191, 189, 96, 215, 137, 189, 131, 99, 46, 62, 154, 103, 227, 189, 85, 76, 27, 190, 217, 144, 31, 190, 173, 233, 31, 62, 7, 111, 241, 189, 253, 215, 187, 188, 168, 123, 95, 188, 13, 249, 25, 190, 67, 118, 244, 60, 11, 229, 20, 190, 127, 77, 120, 189, 253, 249, 178, 61, 112, 193, 240, 61, 24, 27, 235, 61, 132, 25, 134, 61, 21, 87, 239, 189, 91, 61, 42, 190, 55, 42, 213, 188, 7, 11, 15, 60, 115, 136, 57, 60, 160, 254, 227, 61, 152, 204, 49, 61, 227, 213, 51, 190, 248, 148, 37, 62, 188, 39, 96, 189, 9, 118, 52, 62, 99, 176, 22, 190, 11, 165, 41, 190, 167, 229, 35, 190, 190, 82, 68, 61, 97, 45, 170, 61, 208, 170, 158, 62, 54, 96, 183, 62, 145, 127, 9, 62, 88, 157, 178, 62, 25, 157, 205, 62, 252, 55, 102, 61, 70, 197, 192, 189, 142, 136, 89, 62, 221, 138, 152, 189, 53, 37, 151, 61, 40, 48, 40, 189, 238, 132, 93, 191, 56, 134, 201, 191, 92, 163, 244, 61, 94, 136, 209, 61, 5, 23, 35, 190, 107, 207, 18, 62, 254, 220, 20, 61, 182, 180, 186, 190, 208, 92, 31, 190, 196, 236, 231, 190, 249, 210, 61, 190, 246, 74, 27, 188, 102, 121, 215, 61, 182, 150, 206, 188, 17, 197, 29, 62, 28, 63, 69, 61, 253, 243, 174, 190, 86, 242, 62, 191, 35, 180, 198, 189, 152, 175, 238, 61, 250, 113, 153, 62, 147, 120, 161, 61, 228, 189, 216, 62, 1, 89, 248, 62, 96, 51, 72, 61, 60, 2, 102, 62, 151, 182, 231, 61, 133, 38, 169, 190, 61, 31, 220, 189, 171, 237, 15, 188, 153, 76, 105, 62, 82, 193, 20, 62, 87, 128, 36, 61, 173, 198, 108, 62, 77, 199, 87, 190, 107, 100, 211, 190, 162, 64, 27, 59, 91, 68, 121, 189, 28, 110, 164, 61, 8, 107, 143, 61, 99, 98, 32, 190, 147, 205, 253, 61, 6, 95, 250, 61, 108, 218, 26, 62, 66, 235, 96, 61, 60, 94, 35, 62, 81, 93, 169, 189, 194, 191, 224, 189, 26, 4, 36, 62, 115, 199, 3, 190, 159, 217, 100, 62, 109, 152, 32, 60, 84, 61, 98, 190, 71, 38, 220, 62, 191, 19, 188, 62, 46, 25, 138, 62, 148, 159, 198, 61, 54, 66, 184, 62, 131, 79, 101, 190, 61, 149, 21, 190, 76, 236, 251, 190, 205, 177, 163, 189, 74, 241, 187, 190, 47, 205, 234, 62, 21, 102, 166, 190, 131, 56, 144, 191, 19, 10, 176, 190, 199, 66, 108, 62, 229, 79, 139, 190, 39, 45, 27, 189, 28, 65, 22, 190, 53, 8, 188, 190, 121, 235, 41, 62, 134, 28, 255, 189, 215, 101, 31, 190, 16, 77, 219, 189, 58, 254, 16, 62, 17, 90, 149, 60, 110, 89, 83, 189, 99, 40, 200, 189, 122, 160, 22, 191, 191, 148, 159, 190, 87, 245, 0, 190, 74, 62, 52, 62, 164, 193, 194, 62, 237, 56, 105, 189, 112, 191, 203, 61, 126, 50, 189, 62, 204, 49, 10, 62, 134, 69, 187, 62, 57, 160, 204, 190, 81, 203, 17, 62, 159, 94, 248, 190, 65, 105, 226, 61, 39, 216, 182, 190, 221, 239, 102, 190, 193, 244, 156, 189, 216, 44, 76, 191, 78, 157, 221, 189, 189, 118, 112, 189, 9, 106, 65, 62, 2, 106, 254, 61, 160, 183, 192, 190, 220, 53, 56, 190, 31, 168, 239, 62, 8, 78, 65, 189, 16, 110, 251, 189, 194, 120, 0, 190, 30, 25, 182, 60, 43, 193, 173, 189, 249, 115, 7, 62, 86, 203, 185, 58, 213, 94, 240, 189, 134, 117, 59, 190, 57, 57, 204, 188, 254, 230, 128, 60, 160, 52, 55, 59, 194, 183, 30, 189, 105, 219, 137, 188, 157, 183, 39, 60, 49, 133, 8, 190, 124, 49, 209, 61, 223, 134, 207, 189, 198, 162, 56, 188, 11, 185, 208, 61, 127, 67, 150, 189, 145, 164, 72, 61, 101, 248, 8, 190, 152, 158, 2, 62, 90, 61, 197, 189, 225, 161, 31, 188, 246, 218, 246, 61, 173, 39, 56, 189, 38, 185, 167, 189, 177, 124, 87, 189, 96, 180, 234, 60, 191, 186, 107, 61, 229, 29, 130, 189, 22, 212, 135, 61, 120, 63, 149, 189, 250, 92, 75, 61, 79, 12, 244, 61, 201, 82, 182, 189, 10, 138, 77, 188, 86, 144, 232, 189, 4, 139, 155, 189, 17, 243, 244, 61, 127, 25, 192, 189, 2, 144, 47, 189, 97, 187, 184, 61, 24, 240, 213, 188, 4, 241, 53, 190, 42, 39, 179, 189, 205, 123, 27, 190, 214, 168, 87, 189, 68, 235, 13, 190, 87, 206, 243, 189, 90, 102, 136, 189, 84, 121, 27, 189, 250, 56, 10, 190, 63, 122, 162, 188, 240, 84, 2, 190, 186, 68, 163, 60, 69, 31, 28, 62, 11, 96, 233, 189, 18, 201, 251, 61, 71, 155, 76, 55, 3, 206, 64, 189, 139, 177, 213, 61, 198, 73, 244, 59, 213, 252, 160, 189, 2, 247, 106, 60, 130, 196, 188, 189, 154, 205, 16, 62, 238, 188, 164, 61, 167, 107, 118, 189, 58, 176, 158, 189, 125, 115, 200, 60, 48, 102, 216, 61, 95, 158, 65, 189, 4, 103, 209, 62, 139, 93, 174, 190, 252, 219, 178, 61, 17, 180, 44, 190, 209, 147, 188, 190, 136, 94, 236, 190, 32, 153, 2, 190, 198, 172, 100, 62, 162, 248, 211, 190, 139, 249, 134, 62, 166, 93, 46, 61, 88, 211, 113, 62, 26, 243, 251, 61, 198, 210, 128, 189, 134, 81, 215, 62, 209, 215, 32, 190, 51, 175, 24, 62, 240, 135, 4, 61, 139, 214, 71, 62, 202, 122, 167, 189, 27, 232, 251, 189, 5, 107, 107, 62, 42, 47, 182, 187, 192, 58, 1, 63, 170, 38, 150, 62, 86, 153, 166, 61, 38, 217, 79, 189, 195, 141, 95, 62, 44, 199, 3, 62, 235, 89, 98, 62, 28, 133, 192, 62, 214, 11, 52, 62, 227, 12, 247, 61, 95, 174, 233, 61, 60, 219, 243, 190, 178, 195, 101, 189, 114, 89, 185, 190, 46, 219, 134, 61, 162, 80, 224, 189, 60, 146, 109, 62, 124, 1, 45, 189, 21, 30, 104, 62, 23, 208, 251, 188, 251, 131, 142, 61, 244, 57, 4, 191, 222, 55, 30, 62, 188, 202, 37, 62, 56, 181, 237, 61, 168, 102, 3, 62, 152, 168, 108, 62, 0, 176, 113, 62, 248, 212, 85, 190, 161, 61, 8, 63, 175, 102, 101, 60, 245, 93, 21, 189, 38, 169, 131, 62, 240, 52, 14, 60, 216, 18, 234, 189, 19, 9, 158, 189, 247, 58, 65, 191, 190, 114, 180, 189, 155, 143, 91, 190, 211, 218, 58, 190, 171, 117, 181, 188, 174, 165, 141, 187, 61, 44, 208, 62, 82, 2, 179, 60, 192, 15, 16, 62, 81, 246, 201, 62, 119, 253, 187, 189, 236, 65, 46, 62, 226, 216, 174, 189, 5, 146, 190, 60, 189, 50, 21, 61, 134, 91, 150, 61, 230, 181, 229, 61, 74, 10, 19, 191, 154, 150, 178, 190, 47, 171, 81, 62, 245, 163, 44, 62, 4, 87, 98, 61, 194, 240, 173, 60, 36, 23, 71, 62, 203, 58, 16, 191, 87, 194, 41, 62, 151, 51, 79, 62, 145, 124, 148, 189, 219, 141, 197, 60, 5, 123, 0, 189, 142, 159, 2, 190, 83, 167, 226, 189, 43, 17, 25, 190, 99, 203, 105, 62, 195, 7, 172, 191, 193, 191, 68, 62, 64, 65, 49, 61, 55, 199, 181, 61, 116, 243, 28, 190, 232, 201, 197, 190, 46, 83, 120, 190, 37, 138, 154, 190, 129, 100, 239, 189, 28, 152, 64, 62, 252, 238, 22, 62, 83, 66, 163, 62, 17, 69, 20, 62, 215, 53, 129, 61, 102, 88, 25, 62, 104, 172, 135, 190, 92, 214, 171, 62, 8, 88, 93, 60, 220, 102, 137, 62, 169, 37, 177, 187, 242, 239, 56, 61, 92, 129, 136, 189, 9, 106, 46, 190, 10, 55, 101, 189, 166, 84, 189, 62, 230, 58, 51, 61, 64, 245, 38, 62, 243, 5, 143, 62, 36, 117, 181, 59, 208, 49, 38, 190, 176, 59, 8, 191, 101, 133, 135, 62, 2, 108, 72, 189, 56, 155, 98, 61, 223, 150, 219, 189, 192, 67, 38, 188, 215, 7, 169, 60, 30, 41, 84, 189, 180, 255, 33, 190, 131, 24, 170, 189, 97, 13, 143, 189, 160, 188, 6, 189, 42, 158, 9, 190, 144, 140, 156, 61, 129, 55, 7, 62, 115, 247, 39, 189, 96, 103, 180, 61, 82, 222, 103, 61, 153, 203, 137, 60, 100, 26, 246, 189, 94, 137, 42, 190, 139, 118, 96, 61, 59, 170, 134, 189, 88, 225, 233, 61, 21, 165, 60, 190, 235, 79, 41, 62, 167, 130, 185, 187, 177, 248, 206, 189, 137, 160, 45, 190, 53, 109, 238, 58, 189, 51, 22, 61, 172, 175, 156, 61, 162, 202, 2, 189, 147, 206, 53, 190, 61, 66, 138, 189, 59, 32, 11, 62, 178, 174, 26, 62, 216, 74, 153, 189, 148, 149, 65, 188, 254, 162, 196, 189, 166, 139, 78, 190, 128, 138, 2, 190, 98, 31, 82, 190, 118, 221, 155, 189, 216, 172, 177, 189, 7, 226, 136, 189, 138, 46, 203, 189, 105, 180, 208, 61, 238, 177, 6, 61, 142, 190, 153, 188, 196, 37, 201, 188, 136, 222, 122, 189, 133, 234, 78, 189, 170, 95, 97, 189, 135, 22, 34, 188, 33, 113, 109, 188, 124, 54, 120, 189, 72, 117, 54, 61, 56, 152, 216, 189, 179, 184, 172, 61, 243, 26, 12, 190, 251, 113, 201, 61, 251, 103, 1, 190, 133, 199, 241, 61, 218, 18, 250, 188, 47, 131, 175, 61, 38, 59, 224, 189, 97, 208, 17, 190, 88, 73, 6, 62, 173, 151, 140, 188, 12, 0, 39, 190, 168, 249, 152, 60, 30, 72, 57, 190, 45, 224, 173, 61, 250, 128, 194, 61, 190, 11, 65, 190, 240, 24, 37, 189, 187, 131, 228, 189, 138, 12, 42, 61, 66, 121, 0, 62, 142, 167, 193, 61, 62, 144, 65, 189, 128, 234, 197, 60, 64, 59, 239, 61, 98, 202, 229, 61, 78, 124, 240, 189, 200, 183, 226, 189, 75, 223, 11, 188, 32, 109, 27, 61, 215, 130, 119, 61, 156, 158, 59, 190, 40, 181, 0, 190, 194, 96, 156, 189, 135, 209, 4, 61, 16, 117, 34, 62, 70, 83, 84, 61, 246, 119, 67, 61, 112, 104, 145, 61, 110, 121, 151, 189, 253, 179, 240, 61, 206, 94, 81, 61, 112, 169, 147, 61, 169, 108, 186, 62, 144, 152, 119, 62, 107, 109, 169, 61, 117, 186, 86, 62, 144, 164, 27, 62, 48, 48, 76, 190, 241, 102, 236, 189, 139, 154, 31, 61, 144, 168, 214, 189, 3, 213, 246, 61, 78, 194, 84, 62, 125, 7, 39, 191, 99, 180, 94, 191, 16, 136, 64, 62, 216, 60, 212, 62, 37, 173, 28, 61, 173, 23, 241, 189, 245, 27, 11, 62, 255, 53, 182, 189, 218, 146, 238, 189, 158, 33, 45, 62, 225, 170, 153, 61, 115, 209, 144, 62, 123, 183, 127, 190, 198, 196, 27, 190, 133, 42, 204, 188, 235, 160, 89, 62, 76, 130, 126, 61, 217, 79, 77, 191, 86, 189, 23, 62, 142, 220, 176, 188, 60, 52, 174, 59, 203, 28, 126, 62, 14, 23, 172, 62, 75, 117, 181, 62, 9, 39, 158, 61, 222, 218, 70, 62, 68, 91, 109, 61, 195, 204, 5, 189, 211, 200, 131, 62, 8, 57, 110, 190, 202, 180, 20, 185, 182, 41, 206, 60, 206, 37, 41, 189, 174, 58, 16, 62, 188, 122, 71, 61, 7, 84, 94, 190, 5, 242, 108, 188, 144, 222, 193, 189, 196, 77, 112, 61, 124, 95, 175, 189, 75, 22, 199, 189, 133, 80, 150, 62, 0, 157, 111, 61, 108, 128, 202, 62, 95, 8, 139, 188, 57, 61, 249, 189, 100, 238, 106, 189, 78, 149, 39, 62, 130, 221, 4, 62, 35, 102, 225, 61, 16, 222, 62, 62, 37, 92, 24, 190, 167, 181, 124, 190, 70, 45, 31, 62, 45, 147, 203, 62, 216, 208, 155, 62, 117, 62, 143, 62, 62, 179, 225, 62, 52, 84, 151, 62, 151, 203, 119, 60, 112, 7, 93, 62, 125, 252, 147, 190, 119, 76, 37, 62, 114, 70, 150, 62, 113, 84, 168, 189, 9, 65, 45, 191, 233, 88, 78, 62, 215, 179, 151, 190, 104, 126, 149, 191, 156, 107, 91, 61, 92, 141, 9, 191, 153, 185, 3, 191, 66, 46, 72, 61, 218, 149, 9, 190, 117, 28, 64, 62, 243, 129, 44, 63, 33, 156, 22, 62, 59, 0, 242, 188, 118, 188, 186, 189, 36, 186, 247, 61, 126, 255, 3, 62, 8, 15, 241, 190, 211, 170, 163, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 49, 161, 189, 16, 39, 132, 60, 194, 46, 234, 189, 211, 238, 181, 62, 35, 28, 74, 62, 109, 235, 24, 61, 19, 21, 23, 190, 133, 152, 194, 188, 187, 48, 136, 62, 49, 253, 110, 62, 69, 154, 3, 61, 163, 250, 202, 61, 40, 195, 174, 189, 187, 245, 145, 61, 112, 71, 89, 62, 117, 34, 188, 184, 189, 212, 36, 62, 38, 150, 193, 62, 159, 211, 170, 59, 170, 88, 214, 61, 238, 169, 26, 190, 47, 1, 64, 190, 172, 116, 8, 185, 224, 190, 190, 190, 255, 5, 147, 189, 224, 161, 16, 61, 60, 196, 68, 190, 88, 17, 71, 190, 20, 89, 247, 185, 173, 101, 6, 62, 67, 12, 135, 62, 156, 120, 141, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {235, 119, 243, 62, 200, 208, 9, 190, 32, 84, 130, 57, 89, 1, 106, 191, 9, 177, 7, 61, 181, 206, 149, 188, 218, 44, 55, 61, 105, 165, 177, 62, 207, 125, 28, 191, 174, 197, 70, 191, 178, 11, 135, 63, 120, 220, 142, 191, 179, 192, 241, 61, 65, 12, 246, 190, 210, 254, 41, 63, 64, 239, 201, 60, 196, 129, 29, 191, 228, 40, 31, 62, 106, 53, 131, 63, 176, 8, 6, 191, 92, 77, 174, 61, 72, 16, 191, 61, 248, 51, 0, 63, 169, 222, 202, 190, 211, 57, 171, 190, 7, 162, 182, 190, 229, 179, 116, 189, 95, 243, 190, 61, 112, 170, 245, 189, 56, 134, 154, 190, 122, 170, 93, 62, 220, 115, 22, 63, 223, 173, 207, 189, 166, 90, 86, 190, 138, 87, 184, 189, 195, 90, 44, 62, 238, 34, 126, 190, 27, 200, 201, 60, 189, 125, 213, 62, 117, 132, 129, 189, 172, 203, 153, 61, 155, 30, 157, 189, 148, 37, 205, 189, 252, 254, 23, 187, 189, 187, 45, 62, 53, 135, 69, 190, 56, 136, 140, 62, 58, 176, 151, 60, 48, 218, 170, 61, 147, 40, 108, 190, 163, 155, 181, 62, 188, 15, 117, 61, 73, 10, 33, 190, 146, 226, 239, 189, 1, 238, 27, 61, 26, 109, 8, 63, 85, 187, 131, 60, 194, 59, 38, 62, 138, 177, 204, 61, 125, 5, 21, 190, 254, 91, 145, 61, 162, 95, 166, 190, 199, 138, 212, 189, 167, 21, 108, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 181, 145, 62, 244, 176, 149, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {203, 112, 123, 191, 171, 85, 118, 191, 255, 191, 44, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {212, 210, 178, 191, 234, 96, 16, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0072/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}