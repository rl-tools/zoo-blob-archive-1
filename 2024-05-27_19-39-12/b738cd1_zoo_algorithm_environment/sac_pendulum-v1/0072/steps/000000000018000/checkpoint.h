// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 210, 241, 61, 114, 125, 201, 190, 17, 97, 175, 188, 249, 99, 86, 63, 114, 196, 34, 190, 179, 185, 252, 61, 12, 104, 36, 191, 60, 124, 151, 63, 5, 55, 119, 189, 180, 90, 121, 190, 196, 10, 58, 63, 115, 185, 203, 61, 19, 47, 202, 61, 28, 240, 171, 63, 3, 216, 188, 61, 80, 55, 131, 191, 122, 242, 99, 63, 7, 161, 226, 189, 214, 132, 29, 191, 113, 202, 40, 63, 215, 243, 213, 61, 8, 138, 182, 60, 147, 141, 148, 63, 64, 94, 174, 62, 1, 28, 102, 63, 157, 40, 14, 63, 255, 210, 191, 62, 140, 88, 97, 189, 86, 112, 38, 63, 217, 164, 40, 63, 217, 226, 250, 62, 18, 189, 53, 61, 242, 156, 68, 63, 214, 142, 115, 60, 180, 86, 106, 63, 249, 93, 11, 63, 149, 242, 3, 190, 23, 205, 227, 63, 73, 251, 239, 62, 133, 215, 131, 191, 28, 39, 78, 191, 210, 40, 185, 189, 152, 172, 14, 63, 155, 230, 46, 191, 81, 70, 101, 190, 132, 184, 235, 62, 42, 187, 55, 62, 147, 170, 246, 190, 252, 98, 242, 189, 149, 112, 139, 190, 33, 31, 34, 62, 151, 17, 26, 191, 236, 65, 48, 191, 213, 128, 66, 191, 232, 192, 231, 62, 133, 71, 111, 63, 255, 80, 8, 63, 120, 232, 171, 62, 81, 19, 182, 190, 179, 204, 146, 190, 134, 146, 33, 191, 148, 119, 134, 191, 143, 65, 244, 188, 36, 201, 54, 63, 87, 180, 178, 63, 134, 0, 189, 62, 236, 251, 86, 63, 69, 167, 59, 191, 57, 112, 134, 62, 120, 93, 183, 61, 91, 238, 153, 63, 60, 83, 17, 63, 71, 162, 138, 189, 65, 205, 233, 58, 237, 235, 212, 190, 43, 247, 228, 190, 118, 117, 72, 190, 119, 30, 16, 191, 165, 241, 104, 62, 178, 196, 33, 61, 111, 229, 237, 187, 18, 194, 140, 189, 180, 165, 82, 62, 235, 163, 84, 61, 245, 232, 160, 191, 10, 69, 60, 189, 17, 241, 88, 189, 20, 97, 142, 62, 4, 111, 11, 191, 255, 4, 198, 62, 95, 90, 29, 191, 68, 242, 208, 191, 194, 96, 195, 190, 179, 169, 15, 63, 40, 221, 146, 190, 52, 156, 132, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 161, 19, 191, 163, 14, 211, 62, 167, 82, 156, 62, 27, 192, 28, 63, 127, 155, 75, 63, 99, 44, 45, 63, 193, 147, 33, 63, 209, 39, 102, 190, 245, 225, 110, 191, 97, 84, 163, 190, 189, 51, 148, 190, 134, 96, 140, 190, 236, 124, 36, 190, 65, 171, 7, 62, 60, 12, 178, 190, 12, 186, 150, 190, 124, 84, 125, 191, 57, 216, 240, 189, 55, 144, 192, 61, 36, 185, 35, 62, 136, 181, 140, 62, 5, 131, 66, 62, 209, 210, 16, 63, 5, 214, 182, 189, 147, 42, 143, 190, 213, 195, 180, 190, 24, 196, 205, 190, 224, 130, 35, 191, 185, 250, 140, 189, 125, 73, 101, 61, 201, 151, 45, 63, 85, 116, 214, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 108, 231, 189, 108, 242, 54, 63, 210, 227, 184, 189, 30, 182, 34, 62, 95, 153, 32, 190, 68, 200, 165, 190, 66, 174, 64, 191, 137, 21, 172, 190, 199, 23, 6, 191, 119, 162, 148, 61, 196, 188, 108, 62, 180, 254, 148, 190, 22, 253, 36, 191, 94, 47, 232, 189, 70, 35, 81, 62, 42, 68, 159, 62, 169, 194, 54, 62, 77, 49, 205, 60, 150, 94, 203, 190, 51, 41, 39, 62, 226, 96, 61, 61, 217, 2, 159, 190, 173, 162, 88, 62, 215, 109, 152, 190, 125, 254, 99, 62, 29, 145, 214, 61, 108, 206, 9, 62, 40, 106, 177, 189, 184, 7, 109, 190, 234, 181, 52, 62, 60, 120, 94, 188, 226, 49, 150, 62, 15, 229, 231, 188, 42, 129, 136, 59, 152, 216, 186, 188, 114, 233, 192, 60, 97, 212, 52, 190, 104, 197, 159, 189, 54, 103, 81, 190, 151, 181, 39, 62, 209, 145, 8, 62, 108, 9, 130, 61, 176, 124, 65, 62, 198, 99, 56, 62, 147, 108, 181, 60, 68, 190, 108, 191, 74, 16, 106, 190, 229, 36, 117, 190, 231, 254, 4, 62, 38, 157, 237, 61, 41, 110, 14, 62, 54, 161, 31, 62, 255, 169, 213, 190, 220, 51, 135, 189, 244, 181, 32, 61, 54, 193, 241, 61, 68, 214, 141, 62, 4, 97, 193, 61, 136, 162, 155, 189, 26, 161, 229, 61, 33, 11, 74, 191, 33, 110, 97, 62, 148, 37, 142, 191, 211, 43, 154, 61, 43, 151, 176, 61, 87, 83, 145, 188, 169, 132, 224, 189, 6, 70, 27, 190, 223, 29, 215, 189, 33, 255, 147, 189, 32, 254, 172, 189, 193, 181, 30, 190, 223, 127, 121, 61, 143, 92, 1, 190, 114, 139, 9, 190, 213, 254, 193, 189, 214, 158, 155, 60, 141, 198, 146, 60, 183, 201, 199, 189, 151, 179, 16, 190, 6, 37, 49, 62, 143, 141, 8, 190, 173, 100, 165, 189, 18, 105, 125, 188, 43, 228, 186, 189, 238, 84, 137, 188, 125, 70, 223, 60, 238, 109, 0, 190, 123, 223, 25, 189, 210, 135, 130, 61, 46, 194, 126, 189, 223, 142, 233, 61, 136, 165, 187, 61, 53, 30, 24, 190, 135, 163, 139, 61, 74, 49, 174, 61, 169, 125, 195, 60, 232, 231, 248, 62, 40, 54, 77, 61, 237, 88, 216, 62, 177, 82, 66, 62, 117, 244, 203, 61, 205, 65, 233, 62, 24, 202, 162, 191, 123, 89, 201, 62, 63, 166, 91, 191, 132, 171, 182, 60, 34, 138, 65, 191, 165, 170, 116, 191, 217, 39, 21, 62, 104, 1, 156, 191, 248, 210, 87, 190, 235, 6, 6, 61, 82, 107, 64, 62, 199, 197, 204, 62, 219, 9, 132, 190, 50, 87, 28, 62, 75, 108, 4, 63, 58, 168, 166, 190, 29, 151, 82, 191, 188, 45, 184, 190, 90, 40, 77, 189, 61, 193, 41, 189, 189, 172, 80, 187, 159, 35, 22, 63, 34, 39, 34, 62, 189, 238, 131, 62, 64, 196, 160, 190, 173, 43, 200, 186, 74, 86, 160, 62, 40, 123, 195, 62, 212, 36, 154, 62, 149, 17, 230, 62, 219, 89, 70, 60, 184, 63, 27, 62, 61, 121, 177, 189, 53, 3, 250, 189, 246, 73, 186, 190, 58, 112, 251, 189, 86, 113, 51, 190, 40, 124, 36, 62, 22, 55, 39, 190, 105, 92, 102, 190, 89, 152, 99, 190, 104, 78, 53, 191, 141, 30, 148, 62, 11, 109, 65, 62, 113, 218, 170, 189, 244, 48, 173, 190, 52, 188, 46, 62, 18, 52, 5, 189, 162, 159, 76, 60, 232, 191, 106, 190, 66, 249, 138, 62, 226, 60, 22, 190, 59, 252, 236, 61, 28, 6, 254, 189, 42, 129, 142, 190, 109, 103, 166, 190, 60, 213, 132, 190, 206, 236, 33, 190, 61, 52, 16, 189, 254, 160, 79, 190, 209, 69, 239, 189, 188, 98, 130, 61, 81, 51, 77, 190, 51, 2, 149, 61, 89, 172, 7, 62, 34, 235, 7, 62, 53, 78, 201, 189, 253, 12, 11, 190, 117, 204, 212, 60, 135, 243, 170, 58, 200, 19, 10, 190, 224, 137, 70, 190, 169, 26, 61, 59, 49, 116, 95, 61, 140, 91, 194, 189, 187, 173, 223, 188, 110, 105, 150, 61, 41, 138, 83, 190, 113, 179, 137, 189, 234, 126, 131, 189, 138, 81, 178, 61, 55, 69, 208, 188, 212, 211, 18, 61, 218, 148, 62, 189, 234, 202, 87, 61, 60, 47, 206, 61, 171, 32, 69, 190, 222, 42, 167, 61, 60, 122, 242, 188, 20, 167, 28, 62, 225, 7, 97, 61, 103, 177, 84, 189, 76, 172, 13, 61, 40, 177, 145, 190, 101, 252, 195, 188, 163, 218, 194, 189, 91, 60, 173, 189, 135, 118, 128, 61, 189, 14, 75, 190, 190, 242, 208, 61, 119, 116, 110, 60, 89, 192, 11, 60, 235, 183, 95, 190, 212, 100, 136, 190, 137, 138, 121, 188, 116, 118, 98, 189, 107, 201, 235, 60, 112, 75, 109, 62, 99, 21, 5, 61, 20, 4, 38, 190, 205, 2, 160, 61, 250, 94, 43, 190, 11, 33, 41, 189, 105, 164, 194, 189, 165, 7, 77, 189, 175, 192, 208, 189, 174, 125, 30, 190, 216, 229, 16, 190, 241, 61, 80, 189, 242, 27, 56, 190, 84, 218, 220, 189, 27, 106, 71, 60, 59, 51, 1, 61, 88, 71, 172, 190, 235, 3, 44, 62, 222, 188, 176, 62, 117, 179, 179, 190, 95, 52, 205, 189, 237, 216, 182, 62, 119, 121, 53, 191, 229, 61, 154, 62, 137, 86, 41, 190, 181, 229, 19, 62, 248, 191, 8, 61, 169, 251, 109, 61, 221, 137, 160, 62, 126, 13, 70, 62, 232, 251, 229, 190, 111, 151, 195, 60, 199, 255, 124, 190, 78, 229, 73, 62, 153, 92, 171, 188, 186, 199, 30, 190, 213, 131, 109, 62, 10, 67, 237, 59, 144, 52, 154, 62, 26, 127, 57, 190, 50, 106, 4, 190, 3, 203, 241, 61, 108, 2, 242, 61, 59, 174, 207, 62, 149, 6, 156, 189, 154, 236, 157, 62, 167, 167, 86, 188, 163, 168, 150, 62, 29, 192, 234, 61, 86, 16, 81, 62, 220, 9, 164, 189, 8, 29, 172, 187, 111, 40, 132, 62, 74, 112, 185, 191, 224, 3, 93, 62, 160, 76, 194, 191, 148, 248, 7, 62, 163, 50, 160, 191, 161, 29, 124, 191, 136, 240, 35, 62, 164, 171, 20, 191, 253, 232, 234, 190, 253, 117, 8, 60, 114, 19, 186, 62, 200, 158, 129, 59, 170, 140, 41, 61, 200, 84, 64, 62, 30, 88, 154, 62, 189, 187, 92, 191, 104, 147, 90, 191, 33, 11, 153, 190, 76, 173, 194, 62, 41, 176, 209, 61, 236, 146, 137, 61, 169, 33, 152, 62, 182, 56, 112, 191, 35, 150, 172, 62, 235, 169, 171, 191, 245, 83, 7, 62, 15, 252, 148, 62, 19, 203, 199, 62, 71, 87, 134, 188, 209, 152, 61, 62, 160, 124, 26, 61, 134, 252, 75, 188, 7, 200, 5, 190, 62, 16, 21, 62, 144, 201, 137, 189, 61, 102, 192, 61, 157, 194, 137, 189, 108, 183, 192, 59, 61, 163, 194, 191, 111, 22, 85, 191, 20, 238, 220, 62, 93, 107, 239, 62, 81, 29, 113, 61, 118, 205, 117, 61, 176, 120, 200, 62, 229, 84, 54, 191, 252, 254, 208, 61, 121, 157, 163, 62, 207, 212, 49, 62, 185, 164, 164, 62, 65, 88, 19, 189, 219, 165, 21, 189, 33, 50, 18, 61, 68, 132, 146, 190, 33, 204, 240, 61, 120, 230, 22, 192, 109, 140, 160, 62, 172, 132, 44, 62, 134, 53, 143, 191, 10, 128, 153, 189, 33, 148, 76, 62, 26, 137, 57, 190, 204, 21, 112, 62, 182, 22, 144, 62, 248, 215, 24, 190, 70, 226, 196, 190, 245, 67, 117, 190, 37, 182, 17, 191, 64, 118, 170, 190, 44, 46, 177, 62, 192, 219, 175, 62, 220, 75, 17, 190, 26, 46, 245, 190, 159, 167, 56, 189, 117, 5, 156, 190, 34, 53, 184, 191, 176, 7, 149, 190, 204, 109, 22, 62, 39, 219, 166, 191, 114, 145, 68, 62, 92, 186, 231, 190, 209, 81, 164, 60, 228, 219, 57, 189, 164, 184, 239, 189, 230, 32, 204, 189, 201, 173, 166, 62, 132, 23, 58, 62, 187, 71, 161, 62, 251, 101, 198, 189, 216, 75, 35, 190, 4, 230, 225, 189, 29, 17, 60, 191, 78, 52, 140, 191, 70, 62, 137, 191, 146, 221, 148, 191, 225, 50, 89, 190, 236, 22, 155, 62, 102, 128, 80, 191, 235, 186, 51, 62, 115, 209, 130, 190, 203, 207, 4, 60, 39, 191, 1, 191, 160, 174, 69, 62, 99, 161, 129, 62, 37, 240, 134, 188, 223, 44, 136, 190, 241, 3, 71, 190, 49, 194, 151, 191, 174, 252, 39, 190, 115, 160, 207, 62, 55, 82, 31, 192, 228, 102, 173, 62, 82, 185, 197, 188, 97, 25, 248, 189, 134, 97, 82, 190, 149, 167, 180, 189, 184, 241, 23, 62, 254, 182, 93, 191, 112, 20, 232, 62, 248, 33, 147, 62, 146, 30, 242, 61, 71, 43, 112, 189, 205, 145, 253, 189, 227, 199, 59, 190, 186, 125, 139, 59, 227, 234, 188, 189, 150, 172, 51, 62, 24, 110, 166, 59, 228, 155, 221, 189, 221, 191, 16, 61, 80, 191, 190, 188, 232, 10, 34, 61, 254, 85, 4, 190, 168, 48, 38, 190, 216, 115, 71, 189, 214, 157, 100, 61, 232, 110, 180, 61, 45, 62, 129, 61, 188, 127, 30, 189, 134, 163, 18, 62, 19, 80, 17, 62, 59, 41, 241, 61, 188, 213, 20, 190, 32, 246, 15, 190, 99, 172, 85, 61, 246, 217, 150, 189, 83, 39, 43, 190, 29, 86, 22, 190, 0, 203, 14, 189, 133, 117, 168, 189, 105, 183, 210, 189, 89, 246, 240, 188, 63, 55, 40, 189, 171, 142, 127, 189, 81, 57, 151, 62, 255, 236, 43, 189, 79, 78, 8, 62, 20, 32, 64, 189, 251, 158, 199, 189, 187, 126, 196, 62, 112, 60, 144, 191, 3, 206, 69, 62, 73, 190, 190, 191, 223, 184, 52, 63, 142, 128, 98, 191, 49, 33, 141, 191, 84, 221, 188, 62, 102, 79, 169, 189, 126, 15, 146, 188, 171, 246, 17, 62, 238, 42, 84, 62, 37, 61, 81, 63, 228, 48, 185, 188, 223, 233, 250, 62, 7, 231, 31, 63, 9, 10, 226, 189, 215, 77, 91, 191, 50, 89, 0, 191, 226, 196, 36, 62, 118, 224, 22, 189, 61, 66, 206, 61, 134, 185, 23, 190, 250, 168, 132, 190, 38, 159, 146, 62, 144, 197, 141, 190, 229, 194, 64, 189, 29, 69, 146, 61, 60, 110, 249, 190, 243, 80, 160, 187, 70, 81, 217, 62, 221, 39, 210, 190, 73, 86, 142, 190, 89, 215, 147, 62, 33, 156, 61, 191, 174, 179, 126, 62, 44, 65, 243, 190, 198, 57, 209, 61, 105, 173, 201, 60, 189, 50, 55, 190, 190, 69, 202, 62, 137, 197, 15, 63, 104, 252, 53, 191, 240, 9, 212, 190, 133, 207, 203, 190, 185, 233, 180, 188, 49, 192, 33, 190, 193, 144, 12, 191, 249, 31, 78, 188, 243, 18, 203, 62, 70, 245, 219, 61, 132, 154, 158, 190, 253, 216, 20, 62, 153, 149, 242, 61, 185, 57, 137, 189, 73, 25, 141, 62, 157, 243, 187, 190, 43, 23, 21, 62, 239, 162, 191, 189, 96, 215, 137, 189, 131, 99, 46, 62, 154, 103, 227, 189, 85, 76, 27, 190, 217, 144, 31, 190, 173, 233, 31, 62, 7, 111, 241, 189, 253, 215, 187, 188, 168, 123, 95, 188, 13, 249, 25, 190, 67, 118, 244, 60, 11, 229, 20, 190, 127, 77, 120, 189, 253, 249, 178, 61, 112, 193, 240, 61, 24, 27, 235, 61, 132, 25, 134, 61, 21, 87, 239, 189, 91, 61, 42, 190, 55, 42, 213, 188, 7, 11, 15, 60, 115, 136, 57, 60, 160, 254, 227, 61, 152, 204, 49, 61, 227, 213, 51, 190, 248, 148, 37, 62, 188, 39, 96, 189, 9, 118, 52, 62, 99, 176, 22, 190, 11, 165, 41, 190, 167, 229, 35, 190, 190, 82, 68, 61, 79, 44, 115, 62, 215, 49, 167, 62, 132, 4, 222, 62, 164, 105, 79, 62, 124, 176, 192, 62, 176, 189, 240, 62, 42, 135, 230, 60, 39, 33, 49, 189, 132, 27, 133, 62, 101, 59, 34, 189, 73, 45, 214, 61, 81, 215, 192, 189, 34, 97, 62, 191, 9, 117, 218, 191, 183, 20, 10, 62, 176, 108, 169, 61, 35, 38, 48, 190, 88, 185, 28, 62, 201, 210, 140, 61, 135, 111, 142, 190, 205, 110, 9, 190, 139, 91, 139, 190, 161, 99, 61, 190, 221, 97, 210, 187, 86, 139, 202, 61, 182, 150, 206, 188, 17, 197, 29, 62, 143, 3, 43, 62, 54, 148, 153, 190, 228, 187, 70, 191, 93, 111, 29, 60, 152, 175, 238, 61, 68, 43, 161, 62, 101, 239, 192, 61, 159, 121, 249, 62, 218, 230, 18, 63, 103, 230, 123, 60, 40, 226, 106, 62, 21, 71, 230, 61, 55, 192, 179, 190, 60, 143, 222, 189, 159, 99, 55, 61, 10, 204, 105, 62, 84, 77, 24, 62, 99, 110, 72, 189, 200, 83, 114, 62, 209, 70, 60, 190, 5, 253, 226, 190, 178, 3, 254, 59, 221, 131, 190, 188, 26, 105, 167, 61, 114, 147, 161, 61, 250, 151, 213, 189, 17, 46, 3, 62, 228, 237, 9, 62, 18, 167, 27, 62, 71, 4, 113, 61, 60, 94, 35, 62, 81, 93, 169, 189, 99, 96, 147, 190, 66, 76, 39, 62, 180, 155, 5, 190, 240, 241, 101, 62, 109, 152, 32, 60, 46, 42, 113, 190, 3, 67, 6, 63, 96, 250, 214, 62, 254, 168, 171, 62, 166, 87, 41, 62, 251, 193, 206, 62, 64, 189, 111, 190, 93, 8, 208, 190, 125, 128, 48, 191, 228, 203, 126, 190, 46, 163, 1, 191, 17, 202, 2, 63, 109, 59, 185, 190, 31, 35, 200, 191, 24, 157, 201, 190, 199, 66, 108, 62, 21, 138, 146, 190, 177, 113, 165, 188, 148, 113, 124, 190, 126, 185, 183, 190, 77, 67, 99, 62, 251, 165, 165, 190, 144, 219, 84, 190, 134, 93, 54, 190, 131, 241, 244, 61, 17, 90, 149, 60, 110, 89, 83, 189, 249, 157, 103, 190, 0, 209, 62, 191, 130, 207, 154, 190, 214, 96, 90, 190, 74, 62, 52, 62, 96, 65, 188, 62, 241, 43, 199, 188, 165, 253, 239, 61, 116, 254, 194, 62, 143, 12, 44, 62, 20, 219, 227, 62, 200, 157, 228, 190, 169, 249, 131, 62, 189, 44, 212, 190, 61, 209, 8, 62, 94, 121, 152, 190, 167, 71, 152, 190, 107, 222, 144, 189, 167, 14, 84, 191, 43, 59, 234, 189, 231, 177, 154, 189, 188, 62, 63, 62, 167, 4, 249, 61, 39, 222, 188, 190, 194, 73, 236, 190, 224, 100, 216, 62, 214, 241, 243, 188, 154, 53, 190, 189, 11, 242, 220, 189, 69, 173, 241, 60, 43, 193, 173, 189, 249, 115, 7, 62, 224, 235, 137, 60, 78, 46, 101, 189, 79, 103, 92, 190, 164, 212, 250, 186, 254, 230, 128, 60, 160, 52, 55, 59, 194, 183, 30, 189, 105, 219, 137, 188, 157, 183, 39, 60, 49, 133, 8, 190, 124, 49, 209, 61, 223, 134, 207, 189, 198, 162, 56, 188, 11, 185, 208, 61, 127, 67, 150, 189, 145, 164, 72, 61, 101, 248, 8, 190, 152, 158, 2, 62, 90, 61, 197, 189, 225, 161, 31, 188, 246, 218, 246, 61, 173, 39, 56, 189, 38, 185, 167, 189, 177, 124, 87, 189, 96, 180, 234, 60, 191, 186, 107, 61, 229, 29, 130, 189, 22, 212, 135, 61, 120, 63, 149, 189, 250, 92, 75, 61, 79, 12, 244, 61, 201, 82, 182, 189, 10, 138, 77, 188, 86, 144, 232, 189, 4, 139, 155, 189, 17, 243, 244, 61, 127, 25, 192, 189, 2, 144, 47, 189, 97, 187, 184, 61, 24, 240, 213, 188, 4, 241, 53, 190, 42, 39, 179, 189, 205, 123, 27, 190, 214, 168, 87, 189, 68, 235, 13, 190, 87, 206, 243, 189, 90, 102, 136, 189, 84, 121, 27, 189, 250, 56, 10, 190, 63, 122, 162, 188, 240, 84, 2, 190, 186, 68, 163, 60, 69, 31, 28, 62, 11, 96, 233, 189, 18, 201, 251, 61, 71, 155, 76, 55, 3, 206, 64, 189, 139, 177, 213, 61, 198, 73, 244, 59, 213, 252, 160, 189, 2, 247, 106, 60, 130, 196, 188, 189, 154, 205, 16, 62, 238, 188, 164, 61, 167, 107, 118, 189, 58, 176, 158, 189, 125, 115, 200, 60, 48, 102, 216, 61, 95, 158, 65, 189, 56, 51, 216, 62, 219, 180, 192, 190, 41, 126, 215, 61, 72, 83, 11, 190, 85, 178, 198, 190, 146, 229, 0, 191, 57, 109, 233, 189, 12, 9, 64, 62, 248, 125, 197, 190, 114, 136, 148, 62, 73, 165, 137, 61, 146, 243, 126, 62, 132, 146, 190, 61, 168, 177, 74, 189, 32, 196, 215, 62, 139, 61, 45, 190, 171, 12, 19, 62, 218, 162, 67, 61, 107, 173, 63, 62, 49, 71, 82, 189, 126, 108, 225, 189, 18, 16, 118, 62, 55, 40, 145, 60, 77, 76, 251, 62, 94, 99, 147, 62, 86, 153, 166, 61, 38, 217, 79, 189, 96, 21, 54, 62, 196, 129, 234, 61, 102, 198, 86, 62, 72, 74, 198, 62, 214, 11, 52, 62, 133, 200, 148, 61, 58, 202, 6, 62, 39, 50, 249, 190, 9, 49, 163, 189, 143, 129, 188, 190, 52, 27, 205, 61, 193, 9, 192, 189, 210, 27, 151, 62, 169, 108, 167, 188, 139, 254, 135, 62, 48, 166, 82, 188, 72, 137, 163, 61, 160, 178, 15, 191, 1, 55, 238, 61, 251, 240, 46, 62, 181, 229, 39, 62, 60, 79, 21, 62, 179, 13, 141, 62, 71, 75, 84, 62, 141, 143, 113, 190, 226, 76, 10, 63, 247, 97, 24, 188, 0, 30, 129, 188, 227, 111, 140, 62, 226, 41, 165, 60, 216, 18, 234, 189, 19, 9, 158, 189, 186, 17, 92, 191, 236, 139, 141, 189, 223, 254, 129, 190, 231, 161, 74, 190, 171, 117, 181, 188, 201, 231, 244, 60, 172, 119, 211, 62, 195, 27, 108, 60, 155, 253, 239, 61, 119, 99, 203, 62, 214, 211, 129, 189, 255, 61, 40, 62, 35, 11, 183, 188, 110, 204, 10, 61, 119, 30, 23, 61, 213, 16, 173, 61, 99, 198, 174, 61, 236, 123, 14, 191, 55, 201, 171, 190, 115, 209, 13, 62, 141, 132, 65, 62, 31, 48, 160, 60, 4, 231, 145, 60, 57, 136, 75, 62, 10, 159, 42, 191, 212, 120, 17, 62, 50, 11, 133, 62, 89, 21, 148, 189, 248, 23, 9, 187, 85, 72, 119, 189, 142, 159, 2, 190, 83, 167, 226, 189, 89, 204, 88, 189, 192, 224, 144, 62, 151, 30, 171, 191, 233, 96, 124, 62, 64, 65, 49, 61, 166, 185, 92, 61, 179, 5, 158, 189, 0, 156, 235, 190, 102, 138, 160, 190, 147, 105, 147, 190, 183, 223, 242, 189, 255, 113, 103, 62, 190, 28, 94, 62, 37, 146, 154, 62, 9, 57, 230, 61, 13, 13, 121, 61, 127, 97, 75, 62, 23, 214, 170, 190, 143, 150, 185, 62, 184, 240, 185, 188, 84, 51, 141, 62, 161, 162, 90, 60, 60, 14, 187, 60, 153, 223, 164, 189, 13, 176, 139, 190, 218, 103, 203, 189, 168, 135, 176, 62, 31, 174, 72, 61, 32, 110, 92, 62, 155, 120, 160, 62, 36, 117, 181, 59, 208, 49, 38, 190, 109, 98, 28, 191, 138, 150, 136, 62, 49, 5, 31, 189, 119, 99, 9, 61, 223, 150, 219, 189, 192, 67, 38, 188, 215, 7, 169, 60, 30, 41, 84, 189, 180, 255, 33, 190, 131, 24, 170, 189, 97, 13, 143, 189, 160, 188, 6, 189, 42, 158, 9, 190, 144, 140, 156, 61, 129, 55, 7, 62, 115, 247, 39, 189, 96, 103, 180, 61, 82, 222, 103, 61, 153, 203, 137, 60, 100, 26, 246, 189, 94, 137, 42, 190, 139, 118, 96, 61, 59, 170, 134, 189, 88, 225, 233, 61, 21, 165, 60, 190, 235, 79, 41, 62, 167, 130, 185, 187, 177, 248, 206, 189, 137, 160, 45, 190, 53, 109, 238, 58, 189, 51, 22, 61, 172, 175, 156, 61, 162, 202, 2, 189, 147, 206, 53, 190, 61, 66, 138, 189, 59, 32, 11, 62, 178, 174, 26, 62, 216, 74, 153, 189, 148, 149, 65, 188, 254, 162, 196, 189, 166, 139, 78, 190, 128, 138, 2, 190, 98, 31, 82, 190, 118, 221, 155, 189, 216, 172, 177, 189, 7, 226, 136, 189, 138, 46, 203, 189, 105, 180, 208, 61, 238, 177, 6, 61, 142, 190, 153, 188, 196, 37, 201, 188, 136, 222, 122, 189, 133, 234, 78, 189, 170, 95, 97, 189, 135, 22, 34, 188, 33, 113, 109, 188, 124, 54, 120, 189, 72, 117, 54, 61, 56, 152, 216, 189, 179, 184, 172, 61, 243, 26, 12, 190, 251, 113, 201, 61, 251, 103, 1, 190, 133, 199, 241, 61, 218, 18, 250, 188, 47, 131, 175, 61, 38, 59, 224, 189, 97, 208, 17, 190, 88, 73, 6, 62, 173, 151, 140, 188, 12, 0, 39, 190, 168, 249, 152, 60, 30, 72, 57, 190, 45, 224, 173, 61, 250, 128, 194, 61, 190, 11, 65, 190, 240, 24, 37, 189, 187, 131, 228, 189, 138, 12, 42, 61, 66, 121, 0, 62, 142, 167, 193, 61, 62, 144, 65, 189, 128, 234, 197, 60, 64, 59, 239, 61, 98, 202, 229, 61, 78, 124, 240, 189, 200, 183, 226, 189, 75, 223, 11, 188, 32, 109, 27, 61, 215, 130, 119, 61, 156, 158, 59, 190, 40, 181, 0, 190, 194, 96, 156, 189, 135, 209, 4, 61, 16, 117, 34, 62, 70, 83, 84, 61, 246, 119, 67, 61, 112, 104, 145, 61, 110, 121, 151, 189, 253, 179, 240, 61, 206, 94, 81, 61, 29, 190, 162, 59, 127, 239, 202, 62, 215, 11, 103, 62, 210, 0, 57, 61, 84, 104, 114, 62, 35, 255, 49, 62, 206, 16, 89, 190, 106, 210, 9, 189, 99, 91, 68, 61, 173, 108, 158, 189, 100, 129, 4, 62, 122, 107, 45, 62, 107, 168, 25, 191, 218, 121, 138, 191, 244, 53, 46, 62, 80, 229, 208, 62, 38, 174, 58, 61, 224, 152, 3, 190, 98, 20, 156, 61, 179, 63, 38, 190, 48, 201, 38, 190, 236, 236, 4, 62, 66, 48, 156, 61, 55, 45, 154, 62, 140, 14, 117, 190, 198, 196, 27, 190, 133, 42, 204, 188, 106, 123, 157, 62, 41, 28, 149, 61, 131, 143, 89, 191, 187, 75, 237, 61, 142, 220, 176, 188, 59, 244, 232, 60, 223, 163, 128, 62, 182, 229, 203, 62, 66, 125, 227, 62, 41, 201, 130, 61, 241, 24, 67, 62, 97, 20, 128, 61, 41, 95, 190, 189, 214, 133, 131, 62, 185, 236, 79, 190, 101, 241, 165, 186, 147, 211, 62, 61, 59, 20, 217, 189, 92, 84, 24, 62, 101, 161, 140, 61, 224, 169, 111, 190, 222, 156, 132, 188, 102, 122, 129, 189, 119, 108, 120, 61, 6, 13, 146, 189, 220, 208, 20, 189, 10, 7, 153, 62, 92, 227, 139, 61, 155, 104, 198, 62, 42, 78, 154, 188, 57, 61, 249, 189, 100, 238, 106, 189, 125, 94, 68, 61, 55, 120, 242, 61, 88, 166, 205, 61, 16, 64, 69, 62, 37, 92, 24, 190, 40, 230, 147, 190, 240, 73, 100, 62, 242, 90, 207, 62, 194, 18, 167, 62, 136, 113, 179, 62, 127, 12, 230, 62, 63, 26, 151, 62, 114, 215, 216, 188, 51, 150, 55, 62, 216, 245, 159, 190, 146, 75, 7, 62, 168, 100, 164, 62, 238, 151, 14, 190, 171, 226, 143, 191, 193, 210, 201, 61, 193, 127, 180, 190, 210, 66, 150, 191, 250, 14, 117, 61, 176, 33, 55, 191, 208, 126, 21, 191, 212, 48, 132, 61, 136, 79, 57, 190, 73, 240, 52, 62, 253, 206, 26, 63, 238, 105, 10, 62, 59, 0, 242, 188, 118, 188, 186, 189, 66, 194, 88, 61, 151, 182, 222, 61, 221, 66, 231, 190, 163, 132, 226, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 80, 177, 189, 175, 98, 95, 189, 194, 46, 234, 189, 208, 246, 180, 62, 197, 79, 26, 62, 109, 235, 24, 61, 19, 21, 23, 190, 199, 135, 52, 188, 246, 6, 147, 62, 201, 55, 138, 62, 197, 134, 16, 61, 188, 239, 15, 62, 40, 195, 174, 189, 24, 155, 199, 61, 237, 251, 102, 62, 117, 34, 188, 184, 1, 114, 130, 62, 4, 174, 204, 62, 190, 138, 225, 60, 7, 204, 229, 61, 238, 169, 26, 190, 47, 1, 64, 190, 156, 79, 170, 58, 242, 239, 208, 190, 152, 164, 64, 189, 18, 165, 206, 187, 60, 196, 68, 190, 88, 17, 71, 190, 20, 89, 247, 185, 233, 125, 148, 61, 44, 150, 146, 62, 6, 77, 241, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 172, 247, 62, 9, 201, 46, 190, 32, 84, 130, 57, 119, 245, 96, 191, 84, 179, 13, 62, 181, 206, 149, 188, 218, 44, 55, 61, 33, 19, 173, 62, 166, 68, 32, 191, 111, 152, 71, 191, 114, 219, 134, 63, 94, 54, 170, 191, 179, 192, 241, 61, 247, 6, 226, 190, 118, 135, 61, 63, 64, 239, 201, 60, 246, 209, 59, 191, 118, 82, 62, 62, 198, 230, 168, 63, 127, 222, 252, 190, 92, 77, 174, 61, 72, 16, 191, 61, 62, 244, 251, 62, 242, 48, 18, 191, 27, 130, 172, 190, 125, 188, 193, 190, 229, 179, 116, 189, 95, 243, 190, 61, 112, 170, 245, 189, 84, 7, 178, 190, 189, 187, 101, 62, 222, 122, 29, 63, 217, 73, 195, 189, 166, 168, 154, 190, 138, 87, 184, 189, 145, 59, 179, 61, 181, 26, 139, 190, 27, 200, 201, 60, 189, 125, 213, 62, 34, 99, 112, 189, 111, 59, 164, 61, 219, 16, 189, 189, 77, 241, 63, 190, 42, 202, 34, 190, 189, 187, 45, 62, 229, 247, 139, 190, 25, 59, 204, 62, 58, 176, 151, 60, 30, 154, 16, 62, 135, 238, 121, 190, 234, 124, 217, 62, 193, 204, 222, 60, 73, 10, 33, 190, 146, 226, 239, 189, 250, 23, 160, 60, 241, 97, 235, 62, 114, 201, 186, 60, 113, 139, 149, 61, 138, 177, 204, 61, 125, 5, 21, 190, 254, 91, 145, 61, 28, 99, 159, 190, 27, 160, 230, 189, 46, 98, 137, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 17, 162, 62, 54, 39, 160, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {92, 121, 228, 190, 90, 215, 115, 63, 83, 235, 80, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {251, 30, 59, 64, 128, 240, 240, 59};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0072/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}