// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 210, 241, 61, 114, 125, 201, 190, 17, 97, 175, 188, 145, 78, 82, 63, 246, 185, 223, 189, 84, 29, 31, 62, 20, 106, 60, 191, 68, 201, 146, 63, 244, 19, 245, 188, 142, 222, 116, 190, 111, 138, 52, 63, 233, 43, 173, 61, 237, 176, 119, 61, 86, 50, 172, 63, 195, 106, 197, 61, 38, 136, 138, 191, 127, 103, 98, 63, 1, 218, 155, 189, 77, 102, 14, 191, 29, 224, 40, 63, 213, 5, 4, 62, 147, 81, 216, 188, 10, 38, 121, 63, 1, 245, 183, 62, 23, 235, 75, 63, 165, 210, 15, 63, 149, 72, 189, 62, 30, 103, 6, 190, 159, 167, 46, 63, 225, 75, 20, 63, 181, 111, 195, 62, 196, 148, 194, 61, 124, 5, 60, 63, 113, 252, 138, 188, 198, 121, 80, 63, 125, 35, 13, 63, 231, 204, 107, 189, 139, 105, 218, 63, 217, 65, 232, 62, 108, 179, 138, 191, 200, 180, 56, 191, 181, 75, 220, 189, 230, 108, 18, 63, 251, 201, 45, 191, 103, 11, 106, 190, 204, 117, 217, 62, 48, 151, 88, 62, 87, 30, 242, 190, 168, 157, 244, 189, 70, 193, 155, 190, 63, 107, 36, 62, 227, 233, 30, 191, 155, 150, 53, 191, 18, 49, 61, 191, 252, 103, 222, 62, 29, 180, 124, 63, 123, 164, 1, 63, 9, 122, 172, 62, 127, 121, 156, 190, 166, 123, 146, 190, 160, 233, 32, 191, 151, 241, 122, 191, 186, 87, 89, 189, 85, 85, 50, 63, 233, 130, 181, 63, 100, 103, 203, 62, 103, 82, 74, 63, 129, 240, 78, 191, 66, 95, 171, 62, 78, 155, 126, 61, 185, 70, 135, 63, 175, 59, 33, 63, 137, 46, 194, 189, 252, 130, 225, 60, 36, 184, 215, 190, 31, 8, 205, 190, 125, 242, 200, 189, 8, 205, 27, 191, 165, 241, 104, 62, 178, 196, 33, 61, 111, 229, 237, 187, 18, 194, 140, 189, 180, 165, 82, 62, 235, 163, 84, 61, 207, 100, 150, 191, 196, 173, 152, 188, 53, 147, 140, 189, 76, 32, 138, 62, 110, 154, 36, 191, 206, 168, 195, 62, 23, 198, 43, 191, 124, 173, 210, 191, 64, 188, 194, 190, 42, 222, 6, 63, 133, 191, 187, 190, 190, 203, 150, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 161, 19, 191, 104, 243, 224, 62, 146, 162, 97, 62, 66, 165, 34, 63, 14, 150, 64, 63, 198, 108, 35, 63, 97, 220, 32, 63, 182, 211, 158, 190, 232, 3, 117, 191, 189, 8, 205, 190, 116, 180, 202, 190, 158, 83, 143, 190, 116, 175, 221, 189, 82, 226, 9, 62, 189, 159, 161, 190, 74, 56, 144, 190, 168, 233, 122, 191, 131, 51, 19, 190, 178, 57, 129, 61, 16, 229, 77, 62, 44, 218, 120, 62, 151, 150, 27, 62, 170, 144, 7, 63, 189, 180, 241, 189, 31, 229, 146, 190, 167, 104, 158, 190, 24, 196, 205, 190, 224, 130, 35, 191, 27, 172, 146, 189, 218, 69, 27, 61, 94, 197, 34, 63, 168, 73, 202, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 108, 231, 189, 252, 250, 54, 63, 95, 69, 158, 189, 185, 161, 24, 62, 33, 30, 44, 190, 220, 128, 155, 190, 101, 21, 56, 191, 58, 36, 173, 190, 183, 169, 255, 190, 99, 155, 179, 60, 138, 78, 62, 62, 231, 115, 166, 190, 57, 28, 31, 191, 125, 202, 139, 189, 183, 210, 79, 62, 52, 32, 154, 62, 246, 131, 1, 62, 168, 12, 249, 60, 68, 181, 208, 190, 90, 190, 44, 62, 69, 91, 61, 61, 182, 62, 159, 190, 226, 172, 91, 62, 152, 226, 165, 190, 58, 158, 109, 62, 138, 190, 226, 61, 108, 206, 9, 62, 40, 106, 177, 189, 241, 234, 56, 190, 55, 58, 69, 62, 34, 128, 0, 60, 251, 90, 150, 62, 15, 229, 231, 188, 133, 11, 225, 60, 108, 61, 137, 189, 48, 246, 229, 60, 192, 23, 45, 190, 144, 77, 195, 189, 62, 209, 86, 190, 212, 29, 12, 62, 88, 10, 143, 61, 210, 30, 128, 61, 63, 133, 43, 62, 15, 242, 45, 62, 249, 48, 128, 187, 29, 31, 77, 191, 196, 248, 11, 190, 10, 200, 63, 190, 251, 153, 50, 62, 38, 157, 237, 61, 82, 108, 244, 61, 6, 244, 123, 62, 165, 58, 182, 190, 99, 87, 167, 189, 148, 156, 113, 61, 135, 128, 197, 61, 68, 214, 141, 62, 4, 97, 193, 61, 136, 162, 155, 189, 26, 161, 229, 61, 218, 73, 52, 191, 91, 221, 93, 62, 29, 247, 129, 191, 178, 28, 182, 61, 43, 151, 176, 61, 87, 83, 145, 188, 169, 132, 224, 189, 6, 70, 27, 190, 223, 29, 215, 189, 33, 255, 147, 189, 32, 254, 172, 189, 193, 181, 30, 190, 223, 127, 121, 61, 143, 92, 1, 190, 114, 139, 9, 190, 213, 254, 193, 189, 214, 158, 155, 60, 141, 198, 146, 60, 183, 201, 199, 189, 151, 179, 16, 190, 6, 37, 49, 62, 143, 141, 8, 190, 173, 100, 165, 189, 18, 105, 125, 188, 43, 228, 186, 189, 238, 84, 137, 188, 125, 70, 223, 60, 238, 109, 0, 190, 123, 223, 25, 189, 210, 135, 130, 61, 46, 194, 126, 189, 223, 142, 233, 61, 136, 165, 187, 61, 53, 30, 24, 190, 135, 163, 139, 61, 74, 49, 174, 61, 169, 125, 195, 60, 100, 202, 249, 62, 61, 95, 140, 61, 218, 5, 250, 62, 165, 81, 134, 62, 239, 99, 205, 61, 55, 2, 252, 62, 20, 69, 124, 191, 86, 191, 205, 62, 187, 124, 87, 191, 122, 71, 14, 61, 242, 64, 47, 191, 199, 23, 56, 191, 124, 172, 171, 61, 187, 24, 160, 191, 81, 114, 77, 190, 235, 6, 6, 61, 29, 99, 45, 62, 163, 255, 240, 62, 191, 39, 141, 190, 173, 107, 236, 61, 97, 72, 26, 63, 211, 238, 179, 190, 189, 80, 47, 191, 73, 159, 192, 190, 100, 208, 131, 189, 61, 193, 41, 189, 189, 172, 80, 187, 90, 189, 8, 63, 24, 246, 189, 61, 236, 244, 81, 62, 2, 130, 171, 190, 173, 43, 200, 186, 244, 1, 172, 62, 246, 254, 168, 62, 238, 91, 136, 62, 73, 52, 203, 62, 50, 92, 159, 188, 233, 122, 19, 62, 175, 33, 194, 189, 178, 175, 245, 189, 38, 95, 168, 190, 167, 12, 199, 189, 7, 51, 29, 190, 133, 187, 31, 62, 9, 224, 193, 189, 1, 170, 54, 190, 123, 241, 144, 190, 33, 81, 48, 191, 16, 106, 137, 62, 85, 23, 91, 62, 250, 45, 174, 189, 222, 195, 38, 190, 52, 97, 31, 62, 181, 93, 172, 60, 90, 95, 205, 60, 212, 143, 132, 190, 154, 255, 122, 62, 226, 60, 22, 190, 59, 252, 236, 61, 60, 19, 206, 189, 3, 71, 42, 190, 193, 143, 140, 190, 219, 160, 83, 190, 206, 236, 33, 190, 61, 52, 16, 189, 254, 160, 79, 190, 209, 69, 239, 189, 188, 98, 130, 61, 81, 51, 77, 190, 51, 2, 149, 61, 89, 172, 7, 62, 34, 235, 7, 62, 53, 78, 201, 189, 253, 12, 11, 190, 117, 204, 212, 60, 135, 243, 170, 58, 200, 19, 10, 190, 224, 137, 70, 190, 169, 26, 61, 59, 49, 116, 95, 61, 140, 91, 194, 189, 187, 173, 223, 188, 110, 105, 150, 61, 41, 138, 83, 190, 113, 179, 137, 189, 234, 126, 131, 189, 138, 81, 178, 61, 55, 69, 208, 188, 212, 211, 18, 61, 218, 148, 62, 189, 234, 202, 87, 61, 60, 47, 206, 61, 171, 32, 69, 190, 222, 42, 167, 61, 60, 122, 242, 188, 20, 167, 28, 62, 225, 7, 97, 61, 103, 177, 84, 189, 76, 172, 13, 61, 40, 177, 145, 190, 101, 252, 195, 188, 163, 218, 194, 189, 91, 60, 173, 189, 135, 118, 128, 61, 189, 14, 75, 190, 190, 242, 208, 61, 119, 116, 110, 60, 89, 192, 11, 60, 235, 183, 95, 190, 212, 100, 136, 190, 137, 138, 121, 188, 116, 118, 98, 189, 107, 201, 235, 60, 112, 75, 109, 62, 99, 21, 5, 61, 20, 4, 38, 190, 205, 2, 160, 61, 250, 94, 43, 190, 11, 33, 41, 189, 105, 164, 194, 189, 165, 7, 77, 189, 175, 192, 208, 189, 174, 125, 30, 190, 216, 229, 16, 190, 241, 61, 80, 189, 242, 27, 56, 190, 84, 218, 220, 189, 27, 106, 71, 60, 135, 105, 176, 60, 9, 146, 174, 190, 183, 156, 3, 62, 160, 67, 154, 62, 127, 13, 177, 190, 147, 145, 212, 189, 131, 112, 175, 62, 49, 217, 40, 191, 236, 214, 153, 62, 40, 225, 55, 190, 194, 105, 20, 62, 108, 187, 50, 60, 52, 12, 195, 61, 151, 128, 159, 62, 90, 95, 53, 62, 159, 174, 237, 190, 242, 85, 224, 60, 97, 149, 136, 190, 126, 109, 74, 62, 29, 118, 219, 188, 41, 58, 66, 190, 187, 102, 111, 62, 55, 223, 251, 186, 70, 129, 158, 62, 82, 203, 52, 190, 50, 106, 4, 190, 3, 203, 241, 61, 117, 185, 42, 62, 127, 122, 216, 62, 242, 239, 123, 189, 106, 167, 156, 62, 167, 167, 86, 188, 24, 222, 165, 62, 13, 119, 237, 61, 27, 226, 93, 62, 72, 120, 135, 189, 51, 219, 15, 188, 166, 129, 137, 62, 174, 252, 196, 191, 224, 3, 93, 62, 15, 170, 195, 191, 148, 248, 7, 62, 95, 80, 164, 191, 85, 5, 126, 191, 109, 137, 217, 61, 248, 232, 18, 191, 95, 185, 238, 190, 253, 117, 8, 60, 10, 247, 181, 62, 92, 228, 122, 188, 120, 194, 9, 61, 170, 191, 15, 62, 68, 253, 121, 62, 6, 58, 88, 191, 67, 82, 104, 191, 154, 40, 158, 190, 203, 37, 191, 62, 41, 176, 209, 61, 236, 146, 137, 61, 135, 53, 139, 62, 53, 218, 117, 191, 158, 111, 166, 62, 40, 48, 149, 191, 245, 83, 7, 62, 17, 14, 138, 62, 157, 117, 182, 62, 207, 203, 36, 188, 24, 46, 68, 62, 6, 210, 125, 187, 139, 9, 201, 188, 218, 85, 233, 189, 232, 60, 196, 61, 244, 242, 155, 189, 23, 110, 170, 61, 213, 240, 157, 189, 198, 13, 26, 61, 63, 134, 194, 191, 225, 231, 96, 191, 91, 29, 214, 62, 197, 243, 242, 62, 233, 239, 134, 188, 89, 252, 125, 61, 1, 106, 177, 62, 206, 91, 38, 191, 103, 174, 0, 62, 214, 208, 142, 62, 133, 118, 50, 62, 149, 228, 121, 62, 203, 74, 221, 189, 219, 165, 21, 189, 33, 50, 18, 61, 177, 200, 186, 190, 169, 28, 145, 61, 165, 207, 31, 192, 223, 16, 142, 62, 172, 132, 44, 62, 222, 183, 141, 191, 185, 248, 12, 189, 186, 118, 100, 62, 158, 49, 51, 190, 157, 107, 134, 62, 115, 15, 161, 62, 238, 200, 138, 189, 70, 226, 196, 190, 63, 241, 45, 189, 224, 183, 7, 191, 174, 236, 84, 190, 53, 19, 199, 62, 76, 186, 173, 62, 68, 112, 20, 190, 78, 212, 233, 190, 159, 167, 56, 189, 204, 61, 151, 190, 210, 217, 168, 191, 71, 88, 138, 190, 243, 52, 15, 62, 131, 119, 158, 191, 178, 92, 79, 62, 211, 59, 179, 190, 223, 50, 229, 60, 191, 68, 35, 189, 164, 184, 239, 189, 230, 32, 204, 189, 23, 53, 178, 62, 167, 252, 60, 62, 44, 87, 159, 62, 93, 206, 177, 189, 216, 75, 35, 190, 72, 132, 10, 190, 29, 17, 60, 191, 22, 233, 133, 191, 104, 191, 129, 191, 175, 156, 135, 191, 117, 174, 129, 190, 120, 160, 155, 62, 18, 110, 80, 191, 192, 114, 0, 62, 235, 3, 114, 190, 231, 67, 115, 188, 250, 200, 1, 191, 183, 222, 75, 62, 239, 208, 131, 62, 245, 153, 242, 59, 223, 44, 136, 190, 228, 101, 39, 190, 168, 130, 135, 191, 94, 74, 35, 190, 41, 144, 203, 62, 75, 141, 8, 192, 23, 120, 153, 62, 26, 113, 208, 188, 120, 143, 178, 189, 186, 75, 48, 190, 149, 167, 180, 189, 184, 241, 23, 62, 214, 114, 82, 191, 224, 157, 206, 62, 162, 203, 146, 62, 28, 67, 205, 61, 71, 43, 112, 189, 205, 145, 253, 189, 227, 199, 59, 190, 186, 125, 139, 59, 227, 234, 188, 189, 150, 172, 51, 62, 24, 110, 166, 59, 228, 155, 221, 189, 221, 191, 16, 61, 80, 191, 190, 188, 232, 10, 34, 61, 254, 85, 4, 190, 168, 48, 38, 190, 216, 115, 71, 189, 214, 157, 100, 61, 232, 110, 180, 61, 45, 62, 129, 61, 188, 127, 30, 189, 134, 163, 18, 62, 19, 80, 17, 62, 59, 41, 241, 61, 188, 213, 20, 190, 32, 246, 15, 190, 99, 172, 85, 61, 246, 217, 150, 189, 83, 39, 43, 190, 29, 86, 22, 190, 0, 203, 14, 189, 133, 117, 168, 189, 105, 183, 210, 189, 89, 246, 240, 188, 63, 55, 40, 189, 171, 142, 127, 189, 6, 203, 142, 62, 142, 75, 129, 189, 199, 34, 228, 61, 253, 199, 129, 189, 27, 69, 234, 189, 171, 150, 162, 62, 118, 67, 158, 191, 212, 126, 127, 60, 80, 55, 190, 191, 192, 240, 35, 63, 223, 238, 115, 191, 0, 78, 157, 191, 142, 64, 171, 62, 116, 81, 158, 189, 109, 152, 171, 188, 171, 246, 17, 62, 91, 168, 77, 62, 164, 38, 68, 63, 170, 115, 16, 189, 157, 35, 241, 62, 153, 227, 21, 63, 121, 109, 9, 190, 52, 237, 120, 191, 218, 3, 4, 191, 245, 191, 29, 62, 118, 224, 22, 189, 61, 66, 206, 61, 27, 232, 43, 190, 182, 140, 177, 190, 134, 33, 135, 62, 45, 12, 152, 190, 229, 194, 64, 189, 207, 157, 195, 61, 25, 177, 247, 190, 62, 106, 221, 188, 141, 124, 204, 62, 106, 195, 216, 190, 249, 19, 80, 190, 36, 88, 141, 62, 219, 172, 48, 191, 131, 122, 104, 62, 21, 232, 227, 190, 116, 238, 183, 61, 19, 179, 204, 60, 232, 113, 15, 190, 175, 102, 205, 62, 214, 4, 229, 62, 81, 89, 57, 191, 63, 47, 220, 190, 28, 37, 185, 190, 24, 138, 6, 189, 65, 135, 247, 189, 0, 132, 11, 191, 87, 192, 19, 61, 123, 228, 200, 62, 214, 146, 170, 61, 142, 88, 174, 190, 253, 216, 20, 62, 153, 149, 242, 61, 122, 16, 18, 190, 38, 159, 182, 62, 79, 20, 57, 190, 45, 237, 69, 62, 239, 162, 191, 189, 96, 215, 137, 189, 131, 99, 46, 62, 154, 103, 227, 189, 85, 76, 27, 190, 217, 144, 31, 190, 173, 233, 31, 62, 7, 111, 241, 189, 253, 215, 187, 188, 168, 123, 95, 188, 13, 249, 25, 190, 67, 118, 244, 60, 11, 229, 20, 190, 127, 77, 120, 189, 253, 249, 178, 61, 112, 193, 240, 61, 24, 27, 235, 61, 132, 25, 134, 61, 21, 87, 239, 189, 91, 61, 42, 190, 55, 42, 213, 188, 7, 11, 15, 60, 115, 136, 57, 60, 160, 254, 227, 61, 152, 204, 49, 61, 227, 213, 51, 190, 248, 148, 37, 62, 188, 39, 96, 189, 9, 118, 52, 62, 99, 176, 22, 190, 11, 165, 41, 190, 167, 229, 35, 190, 190, 82, 68, 61, 96, 12, 16, 62, 40, 230, 170, 62, 179, 117, 201, 62, 91, 137, 41, 62, 135, 35, 193, 62, 30, 134, 224, 62, 106, 98, 36, 61, 89, 18, 188, 189, 212, 148, 81, 62, 127, 99, 162, 189, 88, 253, 122, 61, 162, 252, 149, 189, 203, 133, 72, 191, 148, 66, 217, 191, 215, 107, 254, 61, 137, 64, 109, 61, 64, 241, 34, 190, 17, 180, 255, 61, 163, 76, 60, 61, 142, 156, 207, 190, 225, 210, 42, 190, 71, 212, 212, 190, 37, 81, 80, 190, 176, 200, 141, 187, 47, 85, 222, 61, 182, 150, 206, 188, 17, 197, 29, 62, 22, 87, 8, 62, 217, 39, 174, 190, 27, 68, 63, 191, 247, 31, 168, 189, 152, 175, 238, 61, 215, 117, 152, 62, 4, 12, 161, 61, 146, 7, 227, 62, 92, 97, 4, 63, 139, 3, 254, 60, 121, 174, 114, 62, 135, 94, 241, 61, 190, 118, 170, 190, 200, 69, 199, 189, 11, 152, 227, 59, 241, 104, 117, 62, 222, 183, 26, 62, 222, 26, 183, 60, 47, 63, 113, 62, 5, 48, 96, 190, 246, 252, 224, 190, 148, 90, 157, 59, 118, 4, 69, 189, 161, 71, 156, 61, 7, 105, 193, 61, 221, 17, 24, 190, 178, 19, 1, 62, 133, 154, 10, 62, 100, 72, 23, 62, 172, 68, 99, 61, 60, 94, 35, 62, 81, 93, 169, 189, 230, 149, 60, 190, 222, 39, 46, 62, 100, 158, 234, 189, 131, 126, 98, 62, 109, 152, 32, 60, 211, 88, 119, 190, 130, 232, 239, 62, 42, 149, 199, 62, 229, 231, 149, 62, 78, 153, 6, 62, 63, 149, 195, 62, 91, 157, 132, 190, 182, 63, 144, 190, 65, 95, 13, 191, 53, 80, 19, 190, 88, 112, 207, 190, 205, 66, 240, 62, 191, 150, 149, 190, 37, 219, 165, 191, 252, 183, 186, 190, 199, 66, 108, 62, 244, 221, 137, 190, 142, 6, 32, 189, 17, 140, 61, 190, 131, 142, 155, 190, 68, 62, 50, 62, 128, 61, 107, 190, 116, 11, 53, 190, 237, 230, 240, 189, 160, 23, 13, 62, 17, 90, 149, 60, 110, 89, 83, 189, 212, 156, 212, 189, 32, 131, 39, 191, 81, 171, 157, 190, 28, 158, 46, 190, 74, 62, 52, 62, 60, 203, 193, 62, 249, 18, 231, 188, 189, 158, 4, 62, 190, 211, 200, 62, 87, 142, 38, 62, 219, 101, 220, 62, 110, 184, 206, 190, 243, 63, 56, 62, 206, 10, 237, 190, 92, 215, 13, 62, 40, 189, 174, 190, 12, 24, 123, 190, 201, 172, 132, 189, 1, 19, 88, 191, 13, 90, 223, 189, 230, 176, 154, 189, 187, 192, 58, 62, 20, 106, 13, 62, 162, 151, 194, 190, 67, 141, 130, 190, 185, 53, 238, 62, 173, 150, 19, 189, 114, 248, 212, 189, 74, 124, 252, 189, 144, 164, 176, 60, 43, 193, 173, 189, 249, 115, 7, 62, 242, 93, 147, 60, 23, 12, 182, 189, 143, 192, 88, 190, 207, 60, 226, 187, 254, 230, 128, 60, 160, 52, 55, 59, 194, 183, 30, 189, 105, 219, 137, 188, 157, 183, 39, 60, 49, 133, 8, 190, 124, 49, 209, 61, 223, 134, 207, 189, 198, 162, 56, 188, 11, 185, 208, 61, 127, 67, 150, 189, 145, 164, 72, 61, 101, 248, 8, 190, 152, 158, 2, 62, 90, 61, 197, 189, 225, 161, 31, 188, 246, 218, 246, 61, 173, 39, 56, 189, 38, 185, 167, 189, 177, 124, 87, 189, 96, 180, 234, 60, 191, 186, 107, 61, 229, 29, 130, 189, 22, 212, 135, 61, 120, 63, 149, 189, 250, 92, 75, 61, 79, 12, 244, 61, 201, 82, 182, 189, 10, 138, 77, 188, 86, 144, 232, 189, 4, 139, 155, 189, 17, 243, 244, 61, 127, 25, 192, 189, 2, 144, 47, 189, 97, 187, 184, 61, 24, 240, 213, 188, 4, 241, 53, 190, 42, 39, 179, 189, 205, 123, 27, 190, 214, 168, 87, 189, 68, 235, 13, 190, 87, 206, 243, 189, 90, 102, 136, 189, 84, 121, 27, 189, 250, 56, 10, 190, 63, 122, 162, 188, 240, 84, 2, 190, 186, 68, 163, 60, 69, 31, 28, 62, 11, 96, 233, 189, 18, 201, 251, 61, 71, 155, 76, 55, 3, 206, 64, 189, 139, 177, 213, 61, 198, 73, 244, 59, 213, 252, 160, 189, 2, 247, 106, 60, 130, 196, 188, 189, 154, 205, 16, 62, 238, 188, 164, 61, 167, 107, 118, 189, 58, 176, 158, 189, 125, 115, 200, 60, 48, 102, 216, 61, 95, 158, 65, 189, 222, 159, 213, 62, 128, 64, 187, 190, 31, 67, 164, 61, 212, 99, 33, 190, 202, 109, 191, 190, 13, 170, 255, 190, 218, 197, 16, 190, 78, 92, 76, 62, 143, 181, 212, 190, 97, 141, 134, 62, 189, 188, 35, 61, 144, 209, 92, 62, 127, 134, 252, 61, 136, 11, 73, 189, 226, 179, 213, 62, 90, 134, 65, 190, 148, 5, 27, 62, 150, 35, 185, 60, 66, 27, 74, 62, 179, 67, 109, 189, 64, 69, 2, 190, 150, 125, 116, 62, 131, 216, 34, 188, 95, 176, 0, 63, 201, 34, 151, 62, 86, 153, 166, 61, 38, 217, 79, 189, 147, 198, 86, 62, 211, 166, 1, 62, 172, 246, 108, 62, 12, 176, 194, 62, 214, 11, 52, 62, 19, 169, 227, 61, 108, 124, 176, 61, 20, 60, 0, 191, 21, 240, 180, 189, 118, 140, 209, 190, 250, 26, 131, 61, 77, 84, 210, 189, 226, 216, 119, 62, 71, 52, 15, 189, 8, 33, 116, 62, 53, 22, 190, 188, 10, 177, 154, 61, 50, 32, 5, 191, 152, 65, 54, 62, 226, 199, 36, 62, 115, 166, 38, 62, 28, 9, 8, 62, 0, 93, 125, 62, 3, 96, 112, 62, 41, 180, 88, 190, 97, 189, 9, 63, 137, 66, 4, 60, 168, 254, 225, 188, 78, 47, 128, 62, 146, 92, 153, 58, 216, 18, 234, 189, 19, 9, 158, 189, 70, 252, 82, 191, 158, 188, 181, 189, 28, 60, 92, 190, 210, 69, 63, 190, 171, 117, 181, 188, 94, 251, 0, 60, 45, 161, 204, 62, 8, 211, 64, 60, 97, 58, 249, 61, 215, 142, 192, 62, 82, 254, 186, 189, 200, 228, 45, 62, 122, 228, 140, 189, 215, 126, 159, 60, 72, 126, 9, 61, 30, 192, 140, 61, 24, 200, 203, 61, 8, 66, 21, 191, 2, 103, 193, 190, 65, 61, 35, 62, 121, 65, 74, 62, 94, 18, 137, 60, 51, 250, 151, 60, 249, 211, 51, 62, 83, 100, 27, 191, 52, 224, 37, 62, 92, 11, 98, 62, 1, 87, 160, 189, 15, 240, 82, 188, 120, 141, 135, 189, 142, 159, 2, 190, 83, 167, 226, 189, 53, 202, 7, 190, 39, 250, 118, 62, 45, 94, 178, 191, 148, 6, 88, 62, 64, 65, 49, 61, 9, 136, 140, 61, 4, 232, 245, 189, 154, 240, 211, 190, 45, 176, 139, 190, 212, 43, 159, 190, 236, 233, 239, 189, 21, 196, 75, 62, 153, 155, 42, 62, 135, 148, 159, 62, 117, 178, 9, 62, 93, 159, 117, 61, 241, 158, 46, 62, 54, 121, 171, 190, 178, 199, 173, 62, 11, 190, 251, 60, 254, 47, 149, 62, 96, 228, 156, 57, 66, 218, 47, 61, 47, 83, 161, 189, 224, 15, 116, 190, 45, 185, 133, 189, 52, 187, 178, 62, 26, 60, 51, 61, 186, 11, 65, 62, 79, 211, 149, 62, 36, 117, 181, 59, 208, 49, 38, 190, 141, 63, 23, 191, 36, 133, 129, 62, 71, 239, 154, 189, 25, 151, 42, 61, 223, 150, 219, 189, 192, 67, 38, 188, 215, 7, 169, 60, 30, 41, 84, 189, 180, 255, 33, 190, 131, 24, 170, 189, 97, 13, 143, 189, 160, 188, 6, 189, 42, 158, 9, 190, 144, 140, 156, 61, 129, 55, 7, 62, 115, 247, 39, 189, 96, 103, 180, 61, 82, 222, 103, 61, 153, 203, 137, 60, 100, 26, 246, 189, 94, 137, 42, 190, 139, 118, 96, 61, 59, 170, 134, 189, 88, 225, 233, 61, 21, 165, 60, 190, 235, 79, 41, 62, 167, 130, 185, 187, 177, 248, 206, 189, 137, 160, 45, 190, 53, 109, 238, 58, 189, 51, 22, 61, 172, 175, 156, 61, 162, 202, 2, 189, 147, 206, 53, 190, 61, 66, 138, 189, 59, 32, 11, 62, 178, 174, 26, 62, 216, 74, 153, 189, 148, 149, 65, 188, 254, 162, 196, 189, 166, 139, 78, 190, 128, 138, 2, 190, 98, 31, 82, 190, 118, 221, 155, 189, 216, 172, 177, 189, 7, 226, 136, 189, 138, 46, 203, 189, 105, 180, 208, 61, 238, 177, 6, 61, 142, 190, 153, 188, 196, 37, 201, 188, 136, 222, 122, 189, 133, 234, 78, 189, 170, 95, 97, 189, 135, 22, 34, 188, 33, 113, 109, 188, 124, 54, 120, 189, 72, 117, 54, 61, 56, 152, 216, 189, 179, 184, 172, 61, 243, 26, 12, 190, 251, 113, 201, 61, 251, 103, 1, 190, 133, 199, 241, 61, 218, 18, 250, 188, 47, 131, 175, 61, 38, 59, 224, 189, 97, 208, 17, 190, 88, 73, 6, 62, 173, 151, 140, 188, 12, 0, 39, 190, 168, 249, 152, 60, 30, 72, 57, 190, 45, 224, 173, 61, 250, 128, 194, 61, 190, 11, 65, 190, 240, 24, 37, 189, 187, 131, 228, 189, 138, 12, 42, 61, 66, 121, 0, 62, 142, 167, 193, 61, 62, 144, 65, 189, 128, 234, 197, 60, 64, 59, 239, 61, 98, 202, 229, 61, 78, 124, 240, 189, 200, 183, 226, 189, 75, 223, 11, 188, 32, 109, 27, 61, 215, 130, 119, 61, 156, 158, 59, 190, 40, 181, 0, 190, 194, 96, 156, 189, 135, 209, 4, 61, 16, 117, 34, 62, 70, 83, 84, 61, 246, 119, 67, 61, 112, 104, 145, 61, 110, 121, 151, 189, 253, 179, 240, 61, 206, 94, 81, 61, 195, 85, 89, 61, 187, 56, 205, 62, 49, 94, 122, 62, 102, 246, 144, 61, 165, 110, 116, 62, 164, 236, 50, 62, 229, 227, 73, 190, 226, 33, 188, 189, 234, 140, 18, 61, 59, 125, 215, 189, 127, 33, 240, 61, 184, 70, 73, 62, 117, 5, 26, 191, 166, 100, 122, 191, 91, 251, 45, 62, 71, 88, 224, 62, 133, 162, 60, 61, 247, 68, 248, 189, 188, 109, 222, 61, 156, 154, 10, 190, 13, 155, 8, 190, 199, 163, 39, 62, 56, 39, 146, 61, 171, 26, 149, 62, 79, 182, 118, 190, 198, 196, 27, 190, 133, 42, 204, 188, 103, 22, 149, 62, 200, 38, 139, 61, 141, 148, 81, 191, 141, 189, 20, 62, 142, 220, 176, 188, 27, 62, 72, 60, 26, 145, 119, 62, 107, 255, 180, 62, 204, 185, 198, 62, 33, 136, 150, 61, 243, 38, 69, 62, 93, 62, 112, 61, 28, 185, 78, 189, 187, 3, 135, 62, 143, 217, 101, 190, 146, 198, 242, 59, 73, 31, 11, 61, 111, 149, 77, 189, 112, 209, 24, 62, 140, 61, 53, 61, 112, 190, 121, 190, 0, 222, 81, 188, 173, 22, 174, 189, 60, 217, 111, 61, 146, 185, 129, 189, 199, 169, 167, 189, 139, 10, 153, 62, 75, 92, 137, 61, 208, 210, 200, 62, 57, 146, 132, 188, 57, 61, 249, 189, 100, 238, 106, 189, 249, 29, 0, 62, 32, 217, 7, 62, 61, 197, 246, 61, 28, 53, 65, 62, 37, 92, 24, 190, 149, 57, 134, 190, 146, 157, 57, 62, 101, 110, 203, 62, 50, 178, 160, 62, 229, 174, 166, 62, 247, 35, 225, 62, 149, 23, 146, 62, 125, 10, 8, 60, 50, 253, 76, 62, 126, 140, 154, 190, 52, 189, 25, 62, 147, 79, 154, 62, 212, 163, 211, 189, 97, 40, 97, 191, 11, 94, 24, 62, 63, 141, 183, 190, 45, 4, 149, 191, 193, 140, 94, 61, 50, 209, 29, 191, 141, 126, 20, 191, 18, 33, 95, 61, 131, 106, 32, 190, 23, 159, 56, 62, 61, 213, 39, 63, 112, 55, 15, 62, 59, 0, 242, 188, 118, 188, 186, 189, 44, 238, 10, 62, 230, 152, 225, 61, 16, 242, 239, 190, 221, 18, 196, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 86, 166, 189, 153, 71, 100, 188, 194, 46, 234, 189, 36, 126, 183, 62, 120, 220, 42, 62, 109, 235, 24, 61, 19, 21, 23, 190, 43, 248, 191, 188, 30, 131, 143, 62, 198, 117, 124, 62, 217, 4, 48, 61, 100, 77, 255, 61, 40, 195, 174, 189, 134, 244, 143, 61, 148, 202, 122, 62, 117, 34, 188, 184, 71, 219, 77, 62, 171, 183, 196, 62, 220, 161, 120, 60, 200, 14, 239, 61, 238, 169, 26, 190, 47, 1, 64, 190, 22, 63, 143, 58, 102, 69, 196, 190, 244, 74, 145, 189, 180, 89, 34, 60, 60, 196, 68, 190, 88, 17, 71, 190, 20, 89, 247, 185, 12, 231, 232, 61, 157, 252, 138, 62, 122, 189, 59, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {74, 144, 247, 62, 70, 184, 22, 190, 32, 84, 130, 57, 199, 74, 107, 191, 37, 60, 140, 61, 181, 206, 149, 188, 218, 44, 55, 61, 117, 168, 175, 62, 215, 40, 28, 191, 126, 80, 79, 191, 217, 207, 130, 63, 103, 25, 157, 191, 179, 192, 241, 61, 67, 72, 230, 190, 109, 122, 53, 63, 64, 239, 201, 60, 239, 214, 50, 191, 238, 228, 41, 62, 95, 33, 146, 63, 72, 104, 13, 191, 92, 77, 174, 61, 72, 16, 191, 61, 43, 120, 0, 63, 152, 189, 246, 190, 36, 94, 178, 190, 102, 83, 184, 190, 229, 179, 116, 189, 95, 243, 190, 61, 112, 170, 245, 189, 101, 58, 164, 190, 190, 115, 95, 62, 81, 15, 25, 63, 75, 38, 166, 189, 235, 0, 119, 190, 138, 87, 184, 189, 218, 194, 254, 61, 216, 152, 130, 190, 27, 200, 201, 60, 189, 125, 213, 62, 132, 97, 108, 189, 191, 53, 159, 61, 195, 193, 218, 188, 121, 174, 43, 190, 183, 240, 244, 189, 189, 187, 45, 62, 205, 94, 90, 190, 131, 91, 184, 62, 58, 176, 151, 60, 236, 250, 235, 61, 144, 162, 109, 190, 163, 57, 194, 62, 23, 3, 134, 61, 73, 10, 33, 190, 146, 226, 239, 189, 23, 106, 66, 61, 95, 154, 1, 63, 4, 76, 80, 61, 180, 225, 244, 61, 138, 177, 204, 61, 125, 5, 21, 190, 254, 91, 145, 61, 232, 16, 170, 190, 122, 69, 208, 189, 66, 29, 112, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {187, 223, 152, 62, 30, 1, 152, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {151, 149, 221, 191, 135, 90, 245, 190, 46, 25, 132, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {33, 101, 61, 192, 101, 133, 111, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0072/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}