// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 210, 241, 61, 114, 125, 201, 190, 17, 97, 175, 188, 43, 64, 68, 63, 247, 36, 43, 190, 54, 86, 151, 62, 211, 45, 39, 191, 84, 146, 126, 63, 140, 42, 106, 189, 4, 173, 93, 190, 205, 237, 25, 63, 130, 13, 7, 60, 177, 231, 185, 61, 116, 186, 148, 63, 16, 212, 128, 61, 116, 121, 104, 191, 35, 187, 84, 63, 204, 119, 7, 189, 125, 37, 200, 190, 39, 129, 41, 63, 35, 208, 191, 61, 206, 233, 142, 190, 110, 115, 52, 63, 208, 51, 231, 62, 213, 33, 64, 63, 204, 1, 226, 62, 40, 45, 226, 62, 176, 234, 200, 190, 251, 122, 28, 63, 174, 251, 27, 63, 193, 18, 138, 62, 247, 158, 67, 61, 40, 247, 63, 63, 150, 8, 231, 189, 252, 219, 26, 63, 143, 203, 34, 63, 96, 253, 145, 61, 201, 28, 182, 63, 7, 88, 6, 63, 11, 39, 139, 191, 219, 26, 242, 190, 222, 178, 248, 189, 56, 168, 8, 63, 161, 173, 23, 191, 10, 226, 63, 190, 168, 48, 210, 62, 220, 13, 85, 62, 37, 226, 243, 190, 116, 120, 7, 190, 158, 94, 146, 190, 43, 201, 51, 62, 7, 37, 1, 191, 228, 215, 31, 191, 239, 85, 81, 191, 141, 68, 200, 62, 153, 220, 104, 63, 34, 249, 254, 62, 130, 141, 199, 62, 224, 209, 109, 190, 203, 153, 154, 190, 150, 112, 13, 191, 156, 162, 97, 191, 170, 203, 146, 189, 53, 13, 47, 63, 24, 169, 159, 63, 206, 89, 245, 62, 245, 134, 69, 63, 28, 27, 118, 191, 147, 222, 177, 62, 76, 175, 224, 60, 130, 138, 82, 63, 103, 224, 65, 63, 252, 14, 246, 189, 54, 46, 87, 61, 58, 165, 210, 190, 234, 75, 16, 191, 86, 26, 138, 61, 141, 89, 56, 191, 165, 241, 104, 62, 178, 196, 33, 61, 111, 229, 237, 187, 18, 194, 140, 189, 180, 165, 82, 62, 235, 163, 84, 61, 167, 176, 119, 191, 115, 59, 43, 62, 75, 132, 152, 189, 154, 179, 120, 62, 115, 244, 38, 191, 216, 129, 207, 62, 224, 52, 48, 191, 160, 160, 186, 191, 33, 5, 168, 190, 93, 186, 207, 62, 71, 225, 169, 190, 18, 15, 221, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 161, 19, 191, 166, 105, 229, 62, 114, 242, 231, 61, 171, 203, 15, 63, 9, 73, 46, 63, 95, 180, 6, 63, 52, 17, 21, 63, 103, 102, 182, 190, 216, 14, 86, 191, 17, 230, 6, 191, 85, 245, 206, 190, 205, 83, 135, 190, 115, 95, 255, 60, 22, 146, 99, 62, 1, 83, 81, 190, 177, 211, 128, 190, 101, 39, 109, 191, 163, 146, 206, 188, 174, 39, 137, 61, 92, 162, 171, 62, 109, 45, 81, 62, 126, 97, 10, 62, 160, 125, 229, 62, 187, 119, 188, 188, 158, 216, 140, 190, 72, 126, 113, 190, 24, 196, 205, 190, 224, 130, 35, 191, 29, 177, 132, 60, 49, 104, 56, 61, 0, 135, 33, 63, 25, 252, 180, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 108, 231, 189, 143, 162, 48, 63, 145, 239, 38, 189, 83, 139, 47, 62, 118, 142, 102, 190, 130, 136, 103, 190, 47, 15, 0, 191, 145, 100, 137, 190, 96, 125, 134, 190, 45, 53, 180, 59, 41, 248, 0, 62, 58, 170, 183, 190, 136, 226, 152, 190, 44, 51, 220, 188, 55, 78, 81, 62, 35, 44, 152, 62, 151, 188, 248, 60, 207, 220, 50, 61, 218, 151, 138, 190, 240, 180, 67, 62, 71, 96, 146, 61, 188, 49, 32, 190, 53, 171, 73, 62, 131, 84, 175, 190, 24, 57, 104, 62, 8, 4, 197, 61, 108, 206, 9, 62, 40, 106, 177, 189, 93, 68, 184, 189, 11, 176, 10, 62, 152, 50, 19, 61, 118, 206, 132, 62, 15, 229, 231, 188, 212, 52, 180, 60, 14, 82, 36, 190, 107, 151, 8, 188, 107, 43, 96, 190, 240, 19, 187, 189, 152, 25, 90, 190, 204, 234, 10, 62, 2, 188, 59, 61, 193, 197, 156, 61, 192, 128, 52, 62, 193, 124, 58, 62, 253, 17, 144, 187, 199, 151, 159, 190, 120, 247, 205, 189, 76, 240, 9, 190, 110, 251, 117, 62, 33, 0, 244, 60, 248, 244, 175, 61, 160, 197, 93, 62, 121, 43, 132, 190, 147, 1, 234, 189, 108, 248, 67, 61, 63, 235, 209, 61, 231, 84, 205, 61, 208, 165, 152, 189, 136, 162, 155, 189, 26, 161, 229, 61, 47, 245, 239, 190, 107, 73, 73, 62, 228, 141, 248, 190, 39, 80, 147, 61, 43, 151, 176, 61, 87, 83, 145, 188, 169, 132, 224, 189, 6, 70, 27, 190, 223, 29, 215, 189, 33, 255, 147, 189, 32, 254, 172, 189, 193, 181, 30, 190, 223, 127, 121, 61, 143, 92, 1, 190, 114, 139, 9, 190, 213, 254, 193, 189, 214, 158, 155, 60, 141, 198, 146, 60, 183, 201, 199, 189, 151, 179, 16, 190, 6, 37, 49, 62, 143, 141, 8, 190, 173, 100, 165, 189, 18, 105, 125, 188, 43, 228, 186, 189, 238, 84, 137, 188, 125, 70, 223, 60, 238, 109, 0, 190, 123, 223, 25, 189, 210, 135, 130, 61, 46, 194, 126, 189, 223, 142, 233, 61, 136, 165, 187, 61, 53, 30, 24, 190, 135, 163, 139, 61, 74, 49, 174, 61, 169, 125, 195, 60, 206, 90, 5, 63, 237, 7, 64, 61, 137, 233, 242, 62, 45, 142, 152, 62, 95, 8, 117, 61, 72, 189, 216, 62, 218, 84, 100, 191, 56, 92, 253, 62, 208, 40, 94, 191, 78, 140, 233, 61, 18, 69, 0, 191, 37, 249, 190, 190, 125, 201, 175, 188, 59, 238, 138, 191, 165, 191, 25, 190, 235, 6, 6, 61, 87, 126, 63, 62, 52, 136, 252, 62, 15, 129, 133, 190, 88, 176, 45, 60, 15, 252, 36, 63, 23, 152, 166, 190, 192, 248, 249, 190, 60, 200, 184, 190, 169, 199, 69, 189, 61, 193, 41, 189, 189, 172, 80, 187, 182, 7, 222, 62, 193, 151, 216, 61, 206, 33, 110, 62, 89, 199, 173, 190, 173, 43, 200, 186, 12, 238, 241, 62, 114, 106, 68, 62, 102, 237, 62, 62, 56, 5, 162, 62, 250, 154, 118, 189, 64, 31, 73, 61, 97, 176, 26, 190, 127, 238, 29, 190, 0, 205, 187, 190, 183, 251, 16, 190, 139, 195, 60, 190, 109, 33, 33, 62, 234, 226, 13, 188, 14, 226, 81, 189, 207, 61, 137, 190, 141, 153, 191, 190, 254, 190, 132, 62, 35, 235, 63, 62, 119, 226, 146, 188, 61, 220, 9, 188, 139, 232, 33, 62, 218, 108, 247, 61, 133, 211, 16, 187, 28, 117, 145, 190, 161, 17, 95, 62, 226, 60, 22, 190, 59, 252, 236, 61, 74, 30, 94, 60, 195, 136, 84, 190, 174, 248, 70, 190, 234, 63, 46, 190, 206, 236, 33, 190, 61, 52, 16, 189, 254, 160, 79, 190, 209, 69, 239, 189, 188, 98, 130, 61, 81, 51, 77, 190, 51, 2, 149, 61, 89, 172, 7, 62, 34, 235, 7, 62, 53, 78, 201, 189, 253, 12, 11, 190, 117, 204, 212, 60, 135, 243, 170, 58, 200, 19, 10, 190, 224, 137, 70, 190, 169, 26, 61, 59, 49, 116, 95, 61, 140, 91, 194, 189, 187, 173, 223, 188, 110, 105, 150, 61, 41, 138, 83, 190, 113, 179, 137, 189, 234, 126, 131, 189, 138, 81, 178, 61, 55, 69, 208, 188, 212, 211, 18, 61, 218, 148, 62, 189, 234, 202, 87, 61, 60, 47, 206, 61, 171, 32, 69, 190, 222, 42, 167, 61, 60, 122, 242, 188, 20, 167, 28, 62, 225, 7, 97, 61, 103, 177, 84, 189, 76, 172, 13, 61, 40, 177, 145, 190, 101, 252, 195, 188, 163, 218, 194, 189, 91, 60, 173, 189, 135, 118, 128, 61, 189, 14, 75, 190, 190, 242, 208, 61, 119, 116, 110, 60, 89, 192, 11, 60, 235, 183, 95, 190, 212, 100, 136, 190, 137, 138, 121, 188, 116, 118, 98, 189, 107, 201, 235, 60, 112, 75, 109, 62, 99, 21, 5, 61, 20, 4, 38, 190, 205, 2, 160, 61, 250, 94, 43, 190, 11, 33, 41, 189, 105, 164, 194, 189, 165, 7, 77, 189, 175, 192, 208, 189, 174, 125, 30, 190, 216, 229, 16, 190, 241, 61, 80, 189, 242, 27, 56, 190, 84, 218, 220, 189, 27, 106, 71, 60, 32, 208, 171, 188, 0, 6, 151, 190, 42, 185, 250, 61, 216, 188, 71, 62, 47, 6, 138, 190, 3, 129, 141, 188, 66, 80, 185, 62, 21, 33, 44, 191, 135, 103, 156, 62, 28, 4, 82, 190, 84, 116, 16, 62, 146, 47, 204, 60, 9, 134, 179, 61, 246, 186, 157, 62, 88, 197, 38, 62, 6, 71, 206, 190, 82, 170, 16, 61, 14, 48, 132, 190, 49, 0, 84, 62, 78, 112, 156, 59, 236, 171, 66, 190, 179, 5, 93, 62, 238, 253, 16, 188, 187, 255, 153, 62, 231, 108, 68, 190, 50, 106, 4, 190, 3, 203, 241, 61, 23, 231, 125, 62, 224, 22, 208, 62, 123, 152, 146, 189, 97, 92, 145, 62, 167, 167, 86, 188, 204, 238, 78, 62, 97, 61, 220, 61, 197, 39, 99, 62, 171, 77, 61, 60, 126, 35, 197, 188, 66, 242, 85, 62, 212, 121, 209, 191, 224, 3, 93, 62, 183, 137, 202, 191, 148, 248, 7, 62, 168, 67, 171, 191, 207, 183, 66, 191, 66, 66, 236, 61, 95, 161, 16, 191, 146, 98, 237, 190, 253, 117, 8, 60, 93, 251, 195, 62, 215, 139, 157, 61, 240, 8, 154, 60, 148, 183, 42, 62, 149, 139, 106, 62, 110, 82, 107, 191, 232, 47, 133, 191, 53, 226, 149, 190, 152, 250, 206, 62, 41, 176, 209, 61, 236, 146, 137, 61, 131, 167, 124, 62, 63, 244, 129, 191, 17, 222, 173, 62, 1, 98, 116, 191, 245, 83, 7, 62, 148, 100, 95, 62, 99, 224, 141, 62, 94, 81, 216, 60, 168, 43, 122, 62, 112, 146, 85, 188, 116, 126, 22, 59, 41, 87, 205, 189, 230, 2, 145, 61, 4, 32, 143, 189, 69, 253, 140, 61, 151, 192, 138, 189, 115, 195, 247, 61, 170, 239, 159, 191, 57, 166, 69, 191, 156, 0, 226, 62, 40, 169, 205, 62, 76, 34, 180, 189, 207, 245, 120, 61, 158, 108, 177, 62, 92, 240, 31, 191, 211, 249, 16, 62, 71, 66, 60, 62, 176, 219, 65, 62, 76, 220, 1, 62, 151, 66, 98, 190, 219, 165, 21, 189, 33, 50, 18, 61, 18, 102, 189, 190, 243, 188, 83, 188, 123, 76, 7, 192, 105, 178, 71, 62, 172, 132, 44, 62, 247, 246, 138, 191, 28, 46, 196, 61, 148, 118, 129, 62, 150, 219, 188, 189, 14, 159, 146, 62, 1, 163, 150, 62, 35, 243, 182, 189, 70, 226, 196, 190, 237, 211, 63, 188, 253, 116, 48, 191, 130, 72, 120, 190, 197, 56, 172, 62, 182, 4, 128, 62, 85, 170, 71, 190, 98, 32, 176, 190, 159, 167, 56, 189, 253, 66, 158, 190, 85, 211, 169, 191, 205, 87, 122, 190, 85, 251, 141, 60, 167, 61, 164, 191, 187, 159, 64, 62, 127, 82, 182, 190, 74, 179, 78, 61, 97, 58, 32, 189, 164, 184, 239, 189, 230, 32, 204, 189, 189, 126, 160, 62, 34, 33, 20, 62, 222, 189, 101, 62, 143, 154, 7, 190, 216, 75, 35, 190, 151, 248, 227, 189, 32, 133, 56, 191, 188, 119, 29, 191, 140, 60, 161, 190, 113, 1, 82, 191, 55, 48, 159, 190, 95, 20, 10, 62, 4, 1, 28, 191, 204, 218, 140, 188, 21, 18, 92, 190, 234, 34, 127, 189, 181, 175, 0, 191, 202, 33, 105, 62, 178, 190, 11, 62, 129, 130, 153, 189, 79, 30, 107, 190, 4, 43, 45, 190, 229, 115, 61, 191, 40, 178, 132, 190, 10, 53, 172, 62, 238, 105, 119, 191, 176, 62, 60, 62, 238, 28, 207, 188, 138, 166, 174, 60, 0, 82, 137, 189, 149, 167, 180, 189, 184, 241, 23, 62, 133, 173, 23, 191, 119, 140, 187, 62, 240, 192, 90, 62, 224, 123, 5, 62, 71, 43, 112, 189, 205, 145, 253, 189, 227, 199, 59, 190, 186, 125, 139, 59, 227, 234, 188, 189, 150, 172, 51, 62, 24, 110, 166, 59, 228, 155, 221, 189, 221, 191, 16, 61, 80, 191, 190, 188, 232, 10, 34, 61, 254, 85, 4, 190, 168, 48, 38, 190, 216, 115, 71, 189, 214, 157, 100, 61, 232, 110, 180, 61, 45, 62, 129, 61, 188, 127, 30, 189, 134, 163, 18, 62, 19, 80, 17, 62, 59, 41, 241, 61, 188, 213, 20, 190, 32, 246, 15, 190, 99, 172, 85, 61, 246, 217, 150, 189, 83, 39, 43, 190, 29, 86, 22, 190, 0, 203, 14, 189, 133, 117, 168, 189, 105, 183, 210, 189, 89, 246, 240, 188, 63, 55, 40, 189, 171, 142, 127, 189, 59, 119, 164, 62, 191, 168, 193, 189, 245, 172, 22, 62, 183, 137, 239, 60, 61, 10, 229, 189, 49, 121, 70, 62, 162, 154, 138, 191, 80, 70, 214, 61, 20, 152, 178, 191, 192, 207, 4, 63, 165, 145, 79, 191, 146, 253, 60, 191, 47, 85, 194, 62, 119, 134, 176, 189, 131, 126, 65, 188, 171, 246, 17, 62, 133, 146, 68, 62, 140, 202, 15, 63, 178, 210, 78, 189, 115, 239, 228, 62, 242, 62, 11, 63, 91, 115, 38, 190, 35, 131, 115, 191, 60, 92, 3, 191, 145, 40, 44, 62, 118, 224, 22, 189, 61, 66, 206, 61, 234, 95, 238, 189, 242, 155, 207, 190, 78, 109, 114, 62, 147, 211, 154, 190, 229, 194, 64, 189, 60, 223, 121, 60, 245, 60, 139, 190, 136, 167, 34, 190, 150, 160, 113, 62, 37, 155, 110, 190, 62, 151, 0, 190, 88, 150, 187, 62, 157, 186, 3, 191, 197, 184, 132, 62, 157, 123, 224, 190, 170, 155, 233, 61, 12, 251, 50, 62, 191, 64, 47, 190, 5, 43, 182, 62, 199, 135, 143, 62, 57, 248, 36, 191, 177, 233, 247, 189, 165, 13, 138, 190, 147, 70, 9, 190, 132, 160, 4, 190, 108, 29, 252, 190, 17, 222, 69, 188, 221, 50, 217, 62, 42, 6, 30, 62, 85, 103, 117, 190, 253, 216, 20, 62, 153, 149, 242, 61, 9, 219, 169, 58, 54, 92, 179, 62, 125, 144, 7, 190, 14, 89, 54, 62, 239, 162, 191, 189, 96, 215, 137, 189, 131, 99, 46, 62, 154, 103, 227, 189, 85, 76, 27, 190, 217, 144, 31, 190, 173, 233, 31, 62, 7, 111, 241, 189, 253, 215, 187, 188, 168, 123, 95, 188, 13, 249, 25, 190, 67, 118, 244, 60, 11, 229, 20, 190, 127, 77, 120, 189, 253, 249, 178, 61, 112, 193, 240, 61, 24, 27, 235, 61, 132, 25, 134, 61, 21, 87, 239, 189, 91, 61, 42, 190, 55, 42, 213, 188, 7, 11, 15, 60, 115, 136, 57, 60, 160, 254, 227, 61, 152, 204, 49, 61, 227, 213, 51, 190, 248, 148, 37, 62, 188, 39, 96, 189, 9, 118, 52, 62, 99, 176, 22, 190, 11, 165, 41, 190, 167, 229, 35, 190, 190, 82, 68, 61, 227, 102, 28, 60, 167, 17, 128, 62, 178, 146, 96, 62, 212, 132, 246, 188, 189, 14, 148, 62, 35, 224, 156, 62, 113, 117, 206, 61, 250, 4, 25, 190, 58, 83, 137, 62, 24, 222, 42, 189, 241, 44, 241, 61, 250, 254, 21, 61, 201, 141, 93, 191, 65, 183, 143, 191, 130, 202, 230, 61, 34, 86, 154, 62, 157, 174, 236, 189, 234, 120, 72, 62, 191, 152, 45, 187, 153, 122, 166, 190, 94, 217, 247, 189, 163, 194, 236, 190, 216, 233, 14, 190, 39, 242, 52, 60, 76, 242, 249, 61, 182, 150, 206, 188, 17, 197, 29, 62, 169, 100, 26, 59, 67, 80, 156, 190, 210, 145, 19, 191, 208, 50, 148, 189, 152, 175, 238, 61, 243, 61, 154, 62, 53, 21, 142, 58, 122, 217, 172, 62, 3, 87, 155, 62, 206, 70, 186, 61, 113, 242, 88, 62, 151, 171, 245, 61, 149, 1, 184, 190, 147, 240, 194, 189, 186, 90, 232, 188, 252, 88, 105, 62, 231, 179, 252, 61, 135, 31, 184, 61, 237, 125, 130, 62, 38, 58, 107, 190, 175, 116, 153, 190, 181, 58, 183, 187, 228, 71, 183, 189, 34, 106, 172, 61, 3, 115, 242, 61, 235, 110, 80, 190, 222, 106, 17, 62, 125, 208, 231, 61, 161, 177, 4, 62, 22, 85, 194, 60, 60, 94, 35, 62, 81, 93, 169, 189, 187, 37, 118, 61, 93, 80, 21, 62, 125, 50, 9, 190, 168, 197, 97, 62, 109, 152, 32, 60, 16, 255, 226, 189, 52, 251, 157, 62, 132, 28, 140, 62, 6, 97, 53, 62, 166, 34, 56, 188, 71, 52, 133, 62, 240, 255, 17, 190, 187, 236, 1, 62, 189, 13, 211, 190, 153, 27, 17, 61, 200, 127, 158, 190, 84, 250, 203, 62, 22, 153, 92, 190, 147, 217, 4, 191, 6, 82, 188, 190, 199, 66, 108, 62, 247, 254, 117, 190, 17, 17, 46, 189, 117, 24, 232, 189, 165, 219, 198, 190, 130, 95, 20, 62, 26, 87, 1, 62, 221, 87, 2, 190, 129, 229, 237, 189, 71, 170, 10, 62, 17, 90, 149, 60, 110, 89, 83, 189, 20, 219, 60, 189, 246, 140, 236, 190, 193, 65, 48, 190, 66, 190, 67, 189, 74, 62, 52, 62, 250, 157, 186, 62, 69, 140, 41, 189, 24, 228, 76, 61, 37, 195, 157, 62, 180, 80, 24, 62, 82, 237, 155, 62, 149, 76, 201, 190, 47, 204, 148, 61, 176, 218, 249, 190, 65, 238, 252, 61, 152, 185, 173, 190, 35, 140, 17, 190, 125, 236, 3, 189, 162, 52, 44, 191, 79, 226, 143, 189, 63, 82, 130, 188, 55, 191, 115, 62, 60, 60, 136, 61, 39, 132, 186, 190, 143, 236, 41, 190, 145, 114, 210, 62, 255, 173, 26, 189, 73, 85, 197, 189, 122, 54, 191, 189, 178, 169, 117, 61, 43, 193, 173, 189, 249, 115, 7, 62, 61, 231, 117, 61, 185, 228, 189, 189, 96, 29, 38, 189, 24, 154, 40, 189, 254, 230, 128, 60, 160, 52, 55, 59, 194, 183, 30, 189, 105, 219, 137, 188, 157, 183, 39, 60, 49, 133, 8, 190, 124, 49, 209, 61, 223, 134, 207, 189, 198, 162, 56, 188, 11, 185, 208, 61, 127, 67, 150, 189, 145, 164, 72, 61, 101, 248, 8, 190, 152, 158, 2, 62, 90, 61, 197, 189, 225, 161, 31, 188, 246, 218, 246, 61, 173, 39, 56, 189, 38, 185, 167, 189, 177, 124, 87, 189, 96, 180, 234, 60, 191, 186, 107, 61, 229, 29, 130, 189, 22, 212, 135, 61, 120, 63, 149, 189, 250, 92, 75, 61, 79, 12, 244, 61, 201, 82, 182, 189, 10, 138, 77, 188, 86, 144, 232, 189, 4, 139, 155, 189, 17, 243, 244, 61, 127, 25, 192, 189, 2, 144, 47, 189, 97, 187, 184, 61, 24, 240, 213, 188, 4, 241, 53, 190, 42, 39, 179, 189, 205, 123, 27, 190, 214, 168, 87, 189, 68, 235, 13, 190, 87, 206, 243, 189, 90, 102, 136, 189, 84, 121, 27, 189, 250, 56, 10, 190, 63, 122, 162, 188, 240, 84, 2, 190, 186, 68, 163, 60, 69, 31, 28, 62, 11, 96, 233, 189, 18, 201, 251, 61, 71, 155, 76, 55, 3, 206, 64, 189, 139, 177, 213, 61, 198, 73, 244, 59, 213, 252, 160, 189, 2, 247, 106, 60, 130, 196, 188, 189, 154, 205, 16, 62, 238, 188, 164, 61, 167, 107, 118, 189, 58, 176, 158, 189, 125, 115, 200, 60, 48, 102, 216, 61, 95, 158, 65, 189, 205, 244, 178, 62, 78, 178, 138, 190, 219, 134, 218, 61, 54, 244, 95, 190, 191, 225, 142, 190, 46, 202, 184, 190, 110, 69, 0, 190, 186, 91, 19, 62, 82, 188, 211, 190, 151, 141, 110, 62, 156, 165, 255, 60, 15, 235, 100, 62, 99, 132, 189, 61, 76, 46, 94, 189, 133, 74, 214, 62, 33, 45, 19, 190, 16, 86, 40, 62, 66, 153, 237, 60, 129, 222, 87, 62, 50, 140, 119, 189, 188, 215, 12, 190, 231, 114, 80, 62, 83, 230, 176, 188, 94, 128, 1, 63, 2, 173, 147, 62, 86, 153, 166, 61, 38, 217, 79, 189, 87, 224, 129, 62, 54, 166, 218, 61, 187, 252, 83, 62, 244, 182, 176, 62, 214, 11, 52, 62, 210, 163, 19, 62, 106, 60, 13, 62, 250, 55, 232, 190, 120, 150, 8, 188, 16, 172, 170, 190, 251, 48, 2, 59, 60, 94, 10, 190, 161, 93, 116, 62, 23, 225, 124, 189, 71, 38, 101, 62, 221, 140, 76, 189, 87, 154, 190, 60, 98, 84, 192, 190, 201, 134, 181, 61, 36, 134, 53, 62, 220, 218, 104, 187, 28, 68, 219, 61, 248, 93, 45, 62, 39, 129, 116, 62, 201, 172, 62, 190, 167, 151, 235, 62, 207, 37, 33, 61, 46, 9, 101, 189, 196, 163, 134, 62, 162, 26, 135, 60, 216, 18, 234, 189, 19, 9, 158, 189, 204, 4, 26, 191, 23, 185, 147, 189, 212, 164, 84, 190, 138, 236, 56, 190, 171, 117, 181, 188, 41, 176, 22, 189, 90, 106, 138, 62, 106, 223, 84, 189, 93, 147, 197, 61, 231, 142, 131, 62, 215, 120, 33, 190, 196, 60, 66, 62, 34, 47, 125, 189, 51, 198, 49, 61, 218, 50, 134, 61, 127, 189, 212, 61, 187, 3, 55, 62, 121, 234, 11, 191, 9, 72, 61, 190, 207, 27, 90, 62, 97, 209, 30, 62, 15, 144, 242, 60, 6, 116, 38, 61, 237, 246, 45, 62, 102, 159, 250, 190, 187, 179, 56, 62, 118, 163, 38, 62, 22, 185, 21, 189, 143, 252, 222, 188, 94, 223, 178, 189, 142, 159, 2, 190, 83, 167, 226, 189, 134, 83, 217, 190, 121, 101, 92, 62, 145, 78, 128, 191, 94, 252, 38, 62, 64, 65, 49, 61, 176, 199, 19, 62, 21, 168, 77, 190, 87, 54, 179, 190, 52, 248, 8, 190, 8, 185, 195, 190, 24, 13, 31, 190, 248, 215, 52, 62, 29, 9, 61, 62, 188, 198, 160, 62, 4, 96, 50, 62, 30, 70, 137, 61, 29, 24, 13, 62, 52, 205, 152, 189, 255, 53, 129, 62, 105, 90, 123, 189, 137, 101, 102, 62, 124, 128, 77, 189, 160, 166, 67, 61, 176, 21, 198, 189, 44, 9, 171, 189, 65, 83, 231, 188, 202, 125, 197, 62, 43, 58, 79, 61, 237, 11, 242, 61, 70, 69, 136, 62, 36, 117, 181, 59, 208, 49, 38, 190, 12, 14, 234, 190, 161, 210, 147, 62, 107, 60, 227, 187, 236, 242, 164, 61, 223, 150, 219, 189, 192, 67, 38, 188, 215, 7, 169, 60, 30, 41, 84, 189, 180, 255, 33, 190, 131, 24, 170, 189, 97, 13, 143, 189, 160, 188, 6, 189, 42, 158, 9, 190, 144, 140, 156, 61, 129, 55, 7, 62, 115, 247, 39, 189, 96, 103, 180, 61, 82, 222, 103, 61, 153, 203, 137, 60, 100, 26, 246, 189, 94, 137, 42, 190, 139, 118, 96, 61, 59, 170, 134, 189, 88, 225, 233, 61, 21, 165, 60, 190, 235, 79, 41, 62, 167, 130, 185, 187, 177, 248, 206, 189, 137, 160, 45, 190, 53, 109, 238, 58, 189, 51, 22, 61, 172, 175, 156, 61, 162, 202, 2, 189, 147, 206, 53, 190, 61, 66, 138, 189, 59, 32, 11, 62, 178, 174, 26, 62, 216, 74, 153, 189, 148, 149, 65, 188, 254, 162, 196, 189, 166, 139, 78, 190, 128, 138, 2, 190, 98, 31, 82, 190, 118, 221, 155, 189, 216, 172, 177, 189, 7, 226, 136, 189, 138, 46, 203, 189, 105, 180, 208, 61, 238, 177, 6, 61, 142, 190, 153, 188, 196, 37, 201, 188, 136, 222, 122, 189, 133, 234, 78, 189, 170, 95, 97, 189, 135, 22, 34, 188, 33, 113, 109, 188, 124, 54, 120, 189, 72, 117, 54, 61, 56, 152, 216, 189, 179, 184, 172, 61, 243, 26, 12, 190, 251, 113, 201, 61, 251, 103, 1, 190, 133, 199, 241, 61, 218, 18, 250, 188, 47, 131, 175, 61, 38, 59, 224, 189, 97, 208, 17, 190, 88, 73, 6, 62, 173, 151, 140, 188, 12, 0, 39, 190, 168, 249, 152, 60, 30, 72, 57, 190, 45, 224, 173, 61, 250, 128, 194, 61, 190, 11, 65, 190, 240, 24, 37, 189, 187, 131, 228, 189, 138, 12, 42, 61, 66, 121, 0, 62, 142, 167, 193, 61, 62, 144, 65, 189, 128, 234, 197, 60, 64, 59, 239, 61, 98, 202, 229, 61, 78, 124, 240, 189, 200, 183, 226, 189, 75, 223, 11, 188, 32, 109, 27, 61, 215, 130, 119, 61, 156, 158, 59, 190, 40, 181, 0, 190, 194, 96, 156, 189, 135, 209, 4, 61, 16, 117, 34, 62, 70, 83, 84, 61, 246, 119, 67, 61, 112, 104, 145, 61, 110, 121, 151, 189, 253, 179, 240, 61, 206, 94, 81, 61, 209, 60, 159, 61, 46, 116, 67, 62, 123, 226, 59, 62, 247, 84, 108, 61, 249, 178, 31, 61, 81, 125, 132, 61, 22, 27, 73, 190, 182, 221, 242, 189, 239, 196, 61, 61, 116, 165, 206, 189, 78, 33, 8, 62, 84, 51, 124, 62, 212, 204, 39, 191, 134, 146, 8, 191, 32, 123, 124, 62, 100, 115, 251, 62, 136, 109, 141, 60, 116, 20, 241, 189, 71, 236, 84, 62, 196, 108, 156, 189, 86, 46, 210, 189, 83, 173, 16, 62, 160, 47, 181, 61, 218, 244, 126, 62, 3, 118, 149, 190, 198, 196, 27, 190, 133, 42, 204, 188, 100, 250, 247, 188, 253, 140, 205, 60, 155, 223, 49, 191, 141, 199, 255, 61, 142, 220, 176, 188, 207, 123, 14, 189, 91, 146, 99, 62, 74, 236, 136, 62, 18, 112, 79, 62, 46, 47, 220, 61, 112, 10, 76, 62, 251, 91, 126, 61, 140, 72, 93, 189, 182, 154, 134, 62, 154, 144, 129, 190, 212, 13, 251, 187, 67, 102, 136, 188, 32, 249, 24, 189, 128, 0, 35, 62, 150, 49, 9, 61, 144, 118, 48, 190, 211, 65, 166, 187, 44, 192, 238, 189, 124, 183, 130, 61, 117, 177, 21, 189, 191, 151, 19, 190, 56, 173, 147, 62, 86, 151, 48, 61, 34, 227, 197, 62, 160, 5, 10, 189, 57, 61, 249, 189, 100, 238, 106, 189, 55, 40, 116, 62, 146, 219, 238, 61, 12, 249, 229, 61, 241, 132, 43, 62, 37, 92, 24, 190, 43, 155, 106, 190, 100, 226, 79, 61, 189, 136, 174, 62, 7, 66, 106, 62, 24, 73, 105, 62, 92, 216, 202, 62, 67, 51, 151, 62, 193, 160, 224, 188, 179, 53, 100, 62, 245, 212, 144, 190, 81, 131, 38, 62, 12, 145, 112, 62, 75, 63, 217, 189, 202, 191, 117, 189, 94, 100, 120, 62, 31, 100, 150, 190, 17, 242, 159, 191, 156, 66, 136, 60, 193, 63, 203, 190, 160, 4, 190, 190, 251, 119, 160, 187, 90, 166, 171, 189, 180, 130, 55, 62, 37, 97, 13, 63, 191, 155, 8, 61, 59, 0, 242, 188, 118, 188, 186, 189, 188, 29, 59, 62, 1, 175, 38, 62, 160, 10, 223, 190, 8, 50, 119, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 150, 94, 189, 142, 244, 184, 188, 194, 46, 234, 189, 152, 157, 181, 62, 169, 180, 91, 62, 109, 235, 24, 61, 19, 21, 23, 190, 3, 4, 147, 188, 75, 16, 117, 62, 41, 219, 118, 62, 128, 211, 246, 185, 203, 237, 50, 61, 40, 195, 174, 189, 176, 40, 97, 61, 133, 180, 13, 62, 117, 34, 188, 184, 95, 249, 197, 187, 222, 207, 183, 62, 69, 12, 51, 189, 24, 149, 172, 61, 238, 169, 26, 190, 47, 1, 64, 190, 26, 227, 76, 60, 224, 16, 183, 190, 59, 67, 238, 189, 3, 112, 123, 61, 60, 196, 68, 190, 88, 17, 71, 190, 20, 89, 247, 185, 74, 251, 247, 61, 84, 242, 121, 62, 9, 247, 210, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 115, 209, 62, 18, 226, 2, 190, 32, 84, 130, 57, 239, 98, 81, 191, 167, 52, 117, 189, 181, 206, 149, 188, 218, 44, 55, 61, 57, 243, 184, 62, 108, 91, 37, 191, 19, 93, 24, 191, 129, 228, 120, 63, 37, 79, 81, 191, 179, 192, 241, 61, 98, 254, 240, 190, 237, 250, 235, 62, 64, 239, 201, 60, 31, 134, 168, 190, 190, 28, 254, 61, 112, 123, 49, 63, 189, 80, 221, 190, 92, 77, 174, 61, 72, 16, 191, 61, 71, 225, 242, 62, 24, 204, 157, 190, 73, 180, 127, 190, 237, 19, 186, 190, 229, 179, 116, 189, 95, 243, 190, 61, 112, 170, 245, 189, 48, 250, 44, 190, 217, 235, 92, 62, 94, 100, 9, 63, 157, 122, 244, 189, 160, 27, 55, 190, 138, 87, 184, 189, 63, 38, 22, 62, 236, 179, 144, 190, 27, 200, 201, 60, 189, 125, 213, 62, 177, 158, 225, 189, 112, 253, 212, 61, 172, 234, 79, 190, 2, 77, 247, 188, 205, 173, 40, 190, 189, 187, 45, 62, 66, 145, 11, 190, 127, 126, 104, 61, 58, 176, 151, 60, 225, 6, 237, 61, 95, 27, 113, 190, 222, 37, 150, 62, 64, 235, 157, 60, 73, 10, 33, 190, 146, 226, 239, 189, 130, 122, 31, 61, 192, 95, 2, 63, 104, 252, 247, 188, 39, 202, 65, 62, 138, 177, 204, 61, 125, 5, 21, 190, 254, 91, 145, 61, 225, 164, 188, 190, 38, 214, 180, 189, 120, 247, 123, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 160, 129, 62, 56, 187, 138, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {133, 94, 205, 63, 186, 223, 74, 63, 208, 138, 189, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {134, 178, 113, 192, 56, 180, 58, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0072/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}