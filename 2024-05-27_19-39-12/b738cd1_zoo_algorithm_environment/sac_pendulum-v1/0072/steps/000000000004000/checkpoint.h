// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 210, 241, 61, 114, 125, 201, 190, 17, 97, 175, 188, 84, 87, 33, 63, 136, 243, 79, 190, 157, 248, 19, 62, 194, 192, 194, 190, 241, 193, 149, 63, 237, 167, 178, 59, 231, 107, 57, 190, 49, 170, 15, 63, 135, 52, 17, 189, 66, 126, 16, 189, 78, 204, 36, 63, 94, 92, 129, 62, 98, 237, 51, 191, 68, 224, 82, 63, 140, 194, 227, 61, 31, 40, 134, 190, 173, 211, 20, 63, 232, 173, 202, 61, 26, 99, 146, 190, 132, 221, 165, 190, 215, 100, 0, 63, 30, 198, 110, 62, 177, 3, 174, 62, 217, 79, 5, 63, 120, 104, 216, 190, 188, 205, 200, 190, 51, 95, 54, 63, 100, 76, 6, 62, 149, 120, 0, 62, 133, 69, 66, 63, 20, 22, 16, 190, 133, 76, 207, 190, 26, 1, 59, 63, 45, 26, 41, 62, 42, 240, 89, 63, 181, 132, 198, 62, 121, 160, 54, 191, 35, 252, 255, 190, 4, 64, 60, 190, 124, 103, 16, 62, 150, 209, 62, 191, 119, 227, 71, 189, 75, 115, 185, 61, 11, 3, 179, 61, 5, 189, 249, 190, 46, 13, 159, 190, 223, 200, 16, 190, 66, 52, 59, 62, 118, 125, 194, 190, 61, 152, 143, 188, 22, 58, 110, 191, 24, 138, 110, 62, 127, 192, 162, 62, 153, 103, 20, 63, 93, 219, 161, 62, 219, 95, 11, 61, 36, 14, 190, 190, 40, 83, 14, 191, 64, 215, 12, 191, 204, 148, 32, 189, 145, 221, 26, 63, 34, 119, 255, 62, 61, 115, 22, 63, 159, 75, 8, 63, 72, 128, 145, 191, 12, 197, 236, 62, 70, 76, 28, 189, 63, 125, 143, 190, 181, 8, 87, 63, 183, 93, 88, 190, 141, 180, 135, 61, 102, 160, 211, 190, 233, 194, 213, 190, 115, 206, 33, 63, 227, 107, 75, 191, 165, 241, 104, 62, 178, 196, 33, 61, 111, 229, 237, 187, 18, 194, 140, 189, 180, 165, 82, 62, 235, 163, 84, 61, 231, 24, 59, 191, 229, 175, 199, 62, 49, 87, 205, 189, 145, 251, 24, 62, 222, 39, 73, 191, 154, 44, 231, 62, 59, 99, 45, 191, 18, 25, 38, 191, 139, 115, 120, 190, 104, 78, 215, 62, 120, 198, 174, 190, 207, 244, 245, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 161, 19, 191, 236, 157, 15, 63, 208, 10, 142, 62, 95, 94, 223, 62, 78, 182, 79, 63, 127, 199, 153, 62, 46, 163, 8, 63, 215, 123, 124, 190, 169, 46, 32, 191, 47, 218, 169, 190, 218, 176, 216, 190, 52, 24, 119, 189, 162, 69, 13, 63, 51, 227, 172, 60, 175, 115, 76, 189, 40, 67, 125, 190, 200, 118, 53, 191, 76, 238, 99, 188, 117, 231, 131, 190, 236, 16, 48, 62, 220, 84, 238, 61, 203, 5, 227, 189, 27, 148, 202, 62, 176, 94, 247, 61, 14, 139, 165, 190, 117, 217, 39, 190, 24, 196, 205, 190, 224, 130, 35, 191, 16, 110, 25, 61, 226, 28, 255, 61, 71, 92, 199, 62, 116, 39, 226, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 108, 231, 189, 230, 122, 4, 63, 236, 102, 107, 60, 193, 104, 65, 62, 186, 39, 176, 59, 147, 154, 53, 190, 80, 193, 54, 190, 46, 80, 138, 190, 255, 41, 6, 62, 245, 240, 51, 189, 170, 43, 155, 61, 118, 249, 167, 190, 76, 112, 78, 62, 31, 45, 162, 60, 99, 2, 39, 62, 74, 151, 145, 62, 192, 75, 132, 62, 89, 198, 145, 61, 237, 117, 142, 189, 49, 236, 59, 62, 138, 145, 80, 61, 152, 64, 76, 62, 60, 12, 96, 61, 72, 23, 142, 190, 184, 95, 132, 62, 142, 82, 186, 61, 108, 206, 9, 62, 40, 106, 177, 189, 198, 56, 211, 189, 115, 72, 95, 189, 116, 71, 137, 61, 228, 185, 94, 62, 15, 229, 231, 188, 53, 17, 26, 62, 118, 192, 155, 189, 187, 124, 197, 61, 117, 53, 51, 190, 112, 189, 19, 188, 178, 185, 22, 190, 59, 139, 23, 62, 64, 108, 93, 61, 24, 234, 192, 61, 108, 151, 85, 62, 192, 136, 82, 62, 123, 224, 91, 61, 236, 146, 59, 60, 160, 87, 239, 187, 166, 139, 6, 190, 233, 30, 62, 189, 84, 187, 88, 61, 12, 188, 238, 61, 246, 0, 5, 190, 30, 114, 42, 190, 165, 72, 168, 189, 224, 233, 145, 61, 116, 81, 7, 62, 190, 212, 210, 61, 85, 29, 151, 189, 136, 162, 155, 189, 26, 161, 229, 61, 149, 144, 7, 190, 38, 133, 92, 62, 97, 150, 42, 61, 229, 230, 246, 61, 43, 151, 176, 61, 87, 83, 145, 188, 169, 132, 224, 189, 6, 70, 27, 190, 223, 29, 215, 189, 33, 255, 147, 189, 32, 254, 172, 189, 193, 181, 30, 190, 223, 127, 121, 61, 143, 92, 1, 190, 114, 139, 9, 190, 213, 254, 193, 189, 214, 158, 155, 60, 141, 198, 146, 60, 183, 201, 199, 189, 151, 179, 16, 190, 6, 37, 49, 62, 143, 141, 8, 190, 173, 100, 165, 189, 18, 105, 125, 188, 43, 228, 186, 189, 238, 84, 137, 188, 125, 70, 223, 60, 238, 109, 0, 190, 123, 223, 25, 189, 210, 135, 130, 61, 46, 194, 126, 189, 223, 142, 233, 61, 136, 165, 187, 61, 53, 30, 24, 190, 135, 163, 139, 61, 74, 49, 174, 61, 169, 125, 195, 60, 164, 120, 197, 62, 51, 188, 134, 61, 96, 95, 235, 62, 70, 203, 134, 62, 28, 159, 111, 61, 233, 35, 195, 62, 19, 168, 25, 191, 111, 158, 171, 62, 63, 0, 42, 191, 32, 147, 29, 59, 193, 116, 251, 190, 97, 78, 231, 189, 1, 40, 34, 190, 152, 171, 59, 191, 177, 216, 4, 190, 235, 6, 6, 61, 16, 68, 62, 62, 232, 1, 206, 62, 50, 17, 118, 190, 152, 28, 99, 190, 222, 173, 243, 62, 174, 24, 46, 191, 73, 49, 232, 190, 235, 73, 181, 190, 41, 19, 90, 189, 61, 193, 41, 189, 189, 172, 80, 187, 184, 91, 189, 62, 6, 29, 178, 190, 132, 196, 84, 62, 208, 31, 14, 191, 173, 43, 200, 186, 112, 37, 178, 62, 82, 62, 16, 62, 168, 150, 208, 61, 54, 38, 214, 61, 200, 132, 18, 189, 241, 234, 11, 189, 58, 208, 111, 189, 135, 94, 148, 189, 152, 158, 109, 190, 15, 144, 100, 189, 131, 109, 195, 189, 225, 19, 20, 62, 232, 58, 157, 59, 128, 84, 247, 61, 37, 41, 56, 190, 236, 152, 255, 189, 116, 19, 183, 62, 93, 182, 194, 61, 115, 41, 250, 60, 88, 127, 9, 62, 54, 161, 181, 189, 187, 180, 224, 187, 185, 185, 25, 61, 145, 72, 74, 190, 212, 116, 148, 62, 226, 60, 22, 190, 59, 252, 236, 61, 153, 73, 88, 61, 35, 205, 23, 190, 28, 46, 70, 189, 40, 59, 58, 190, 206, 236, 33, 190, 61, 52, 16, 189, 254, 160, 79, 190, 209, 69, 239, 189, 188, 98, 130, 61, 81, 51, 77, 190, 51, 2, 149, 61, 89, 172, 7, 62, 34, 235, 7, 62, 53, 78, 201, 189, 253, 12, 11, 190, 117, 204, 212, 60, 135, 243, 170, 58, 200, 19, 10, 190, 224, 137, 70, 190, 169, 26, 61, 59, 49, 116, 95, 61, 140, 91, 194, 189, 187, 173, 223, 188, 110, 105, 150, 61, 41, 138, 83, 190, 113, 179, 137, 189, 234, 126, 131, 189, 138, 81, 178, 61, 55, 69, 208, 188, 212, 211, 18, 61, 218, 148, 62, 189, 234, 202, 87, 61, 60, 47, 206, 61, 171, 32, 69, 190, 222, 42, 167, 61, 60, 122, 242, 188, 20, 167, 28, 62, 95, 179, 185, 61, 42, 2, 90, 189, 11, 2, 96, 61, 40, 90, 128, 190, 206, 40, 171, 187, 225, 204, 130, 189, 71, 95, 38, 189, 177, 236, 189, 61, 100, 118, 31, 190, 232, 98, 13, 62, 23, 97, 113, 61, 60, 231, 31, 61, 69, 21, 95, 190, 182, 18, 138, 190, 137, 138, 121, 188, 237, 25, 246, 188, 107, 201, 235, 60, 10, 181, 137, 62, 107, 164, 255, 60, 210, 125, 234, 189, 156, 202, 227, 61, 215, 12, 249, 189, 98, 185, 187, 58, 105, 164, 194, 189, 165, 7, 77, 189, 175, 192, 208, 189, 174, 125, 30, 190, 22, 39, 193, 189, 126, 104, 22, 188, 147, 156, 55, 190, 2, 3, 136, 189, 27, 106, 71, 60, 95, 197, 224, 188, 212, 24, 132, 190, 197, 232, 171, 61, 175, 118, 88, 62, 82, 85, 104, 190, 56, 241, 76, 61, 150, 202, 168, 62, 46, 202, 21, 191, 178, 54, 142, 62, 128, 2, 81, 190, 131, 36, 13, 62, 127, 138, 162, 60, 126, 22, 12, 62, 120, 115, 163, 62, 115, 80, 25, 62, 222, 132, 107, 190, 42, 60, 96, 61, 176, 14, 121, 190, 26, 240, 55, 62, 24, 220, 124, 61, 9, 157, 5, 190, 196, 246, 128, 62, 171, 252, 63, 188, 165, 85, 163, 62, 75, 75, 78, 190, 50, 106, 4, 190, 3, 203, 241, 61, 97, 232, 134, 62, 76, 204, 220, 62, 227, 247, 113, 60, 117, 26, 160, 62, 167, 167, 86, 188, 230, 194, 194, 62, 154, 250, 92, 62, 62, 157, 189, 62, 140, 69, 30, 62, 44, 114, 155, 61, 158, 82, 112, 62, 180, 117, 155, 191, 62, 49, 89, 62, 86, 172, 163, 191, 199, 235, 161, 61, 180, 31, 151, 191, 211, 78, 112, 190, 110, 33, 171, 61, 202, 75, 27, 191, 143, 199, 208, 190, 253, 117, 8, 60, 229, 24, 200, 62, 149, 204, 201, 61, 235, 0, 126, 61, 53, 146, 128, 61, 139, 156, 139, 188, 103, 196, 110, 191, 22, 132, 77, 191, 207, 214, 147, 190, 93, 187, 227, 62, 41, 176, 209, 61, 236, 146, 137, 61, 23, 111, 168, 62, 203, 132, 91, 191, 130, 86, 116, 62, 23, 63, 80, 191, 245, 83, 7, 62, 147, 176, 42, 62, 111, 236, 40, 62, 207, 245, 176, 188, 131, 61, 44, 62, 252, 138, 36, 189, 155, 6, 218, 188, 114, 144, 173, 189, 197, 149, 57, 61, 138, 133, 114, 189, 110, 182, 97, 61, 192, 15, 112, 189, 40, 132, 28, 62, 109, 89, 197, 190, 33, 20, 201, 190, 236, 192, 171, 62, 87, 53, 175, 61, 94, 173, 151, 189, 190, 182, 163, 61, 107, 140, 140, 62, 172, 234, 233, 190, 193, 33, 255, 61, 107, 235, 95, 59, 58, 254, 83, 62, 52, 226, 204, 61, 63, 207, 161, 190, 219, 165, 21, 189, 33, 50, 18, 61, 237, 180, 123, 190, 81, 94, 214, 189, 241, 55, 51, 191, 39, 135, 28, 62, 172, 132, 44, 62, 97, 111, 46, 191, 153, 59, 64, 62, 77, 167, 146, 62, 168, 221, 200, 61, 158, 81, 128, 62, 108, 207, 154, 62, 169, 66, 39, 189, 165, 253, 183, 190, 37, 112, 127, 61, 31, 82, 12, 191, 92, 89, 131, 189, 108, 240, 51, 62, 25, 152, 115, 189, 14, 226, 230, 60, 234, 97, 164, 60, 159, 167, 56, 189, 90, 71, 146, 190, 247, 119, 28, 191, 86, 180, 234, 60, 179, 252, 130, 190, 125, 255, 50, 191, 206, 244, 20, 189, 243, 123, 65, 190, 186, 233, 23, 62, 104, 61, 6, 61, 164, 184, 239, 189, 230, 32, 204, 189, 77, 108, 241, 61, 234, 130, 49, 189, 186, 229, 205, 189, 188, 232, 52, 190, 216, 75, 35, 190, 230, 144, 115, 189, 253, 58, 207, 190, 229, 156, 19, 191, 106, 125, 29, 190, 83, 6, 223, 190, 103, 99, 204, 190, 45, 190, 5, 62, 111, 133, 174, 190, 66, 10, 118, 189, 163, 83, 223, 189, 24, 65, 96, 189, 0, 188, 248, 189, 152, 239, 183, 61, 77, 35, 39, 62, 245, 109, 141, 189, 44, 81, 64, 189, 236, 126, 198, 189, 236, 161, 165, 190, 123, 113, 26, 190, 121, 86, 54, 62, 64, 105, 123, 190, 229, 98, 64, 62, 54, 22, 52, 189, 75, 148, 38, 61, 191, 130, 36, 189, 149, 167, 180, 189, 184, 241, 23, 62, 90, 39, 186, 190, 38, 214, 150, 62, 168, 85, 231, 61, 148, 48, 213, 61, 71, 43, 112, 189, 3, 123, 0, 190, 198, 97, 45, 190, 93, 40, 153, 60, 238, 128, 174, 189, 78, 94, 49, 62, 163, 186, 119, 59, 228, 155, 221, 189, 221, 191, 16, 61, 80, 191, 190, 188, 232, 10, 34, 61, 254, 85, 4, 190, 168, 48, 38, 190, 103, 254, 223, 188, 205, 186, 134, 61, 106, 226, 211, 61, 45, 62, 129, 61, 165, 28, 188, 188, 134, 163, 18, 62, 51, 191, 32, 62, 149, 84, 12, 62, 188, 213, 20, 190, 235, 34, 15, 190, 99, 172, 85, 61, 146, 105, 86, 189, 12, 21, 27, 190, 29, 86, 22, 190, 0, 203, 14, 189, 225, 160, 164, 189, 105, 183, 210, 189, 81, 165, 196, 188, 63, 55, 40, 189, 171, 142, 127, 189, 195, 184, 189, 62, 0, 186, 60, 60, 169, 181, 130, 62, 134, 177, 174, 61, 204, 113, 139, 60, 50, 235, 70, 62, 198, 208, 17, 191, 239, 32, 150, 62, 253, 110, 151, 191, 84, 7, 70, 62, 250, 170, 88, 191, 220, 194, 58, 190, 244, 208, 166, 62, 252, 130, 135, 189, 247, 135, 235, 60, 171, 246, 17, 62, 108, 243, 86, 62, 69, 30, 193, 62, 180, 229, 128, 188, 64, 66, 149, 62, 179, 159, 48, 62, 38, 53, 45, 190, 33, 243, 48, 191, 188, 234, 255, 190, 105, 77, 89, 62, 118, 224, 22, 189, 61, 66, 206, 61, 85, 243, 93, 188, 188, 243, 209, 190, 10, 158, 23, 62, 61, 233, 203, 190, 229, 194, 64, 189, 28, 170, 205, 188, 127, 33, 123, 190, 200, 226, 45, 190, 195, 101, 123, 62, 125, 213, 46, 190, 73, 6, 132, 189, 108, 80, 168, 62, 205, 233, 234, 190, 117, 135, 101, 62, 221, 17, 233, 190, 149, 161, 193, 61, 250, 253, 44, 62, 91, 122, 192, 60, 247, 149, 159, 62, 77, 225, 162, 62, 150, 193, 222, 190, 91, 228, 185, 57, 217, 238, 136, 190, 150, 147, 31, 190, 17, 58, 49, 61, 6, 204, 222, 190, 241, 212, 85, 61, 137, 121, 207, 62, 237, 245, 136, 62, 156, 91, 36, 190, 253, 216, 20, 62, 153, 149, 242, 61, 246, 30, 152, 61, 238, 142, 187, 62, 209, 8, 146, 60, 114, 135, 76, 62, 239, 162, 191, 189, 96, 215, 137, 189, 131, 99, 46, 62, 154, 103, 227, 189, 85, 76, 27, 190, 217, 144, 31, 190, 173, 233, 31, 62, 7, 111, 241, 189, 253, 215, 187, 188, 168, 123, 95, 188, 13, 249, 25, 190, 67, 118, 244, 60, 11, 229, 20, 190, 127, 77, 120, 189, 253, 249, 178, 61, 112, 193, 240, 61, 24, 27, 235, 61, 132, 25, 134, 61, 21, 87, 239, 189, 91, 61, 42, 190, 55, 42, 213, 188, 7, 11, 15, 60, 115, 136, 57, 60, 160, 254, 227, 61, 152, 204, 49, 61, 227, 213, 51, 190, 248, 148, 37, 62, 188, 39, 96, 189, 9, 118, 52, 62, 99, 176, 22, 190, 11, 165, 41, 190, 167, 229, 35, 190, 190, 82, 68, 61, 140, 225, 74, 62, 62, 215, 154, 189, 174, 16, 20, 188, 104, 172, 16, 190, 65, 213, 199, 60, 37, 106, 176, 61, 200, 56, 29, 188, 236, 80, 46, 190, 248, 105, 39, 62, 106, 198, 166, 189, 157, 73, 120, 61, 25, 54, 139, 189, 193, 165, 76, 190, 139, 102, 104, 190, 38, 162, 85, 61, 198, 58, 199, 61, 183, 137, 229, 189, 176, 32, 32, 62, 124, 49, 29, 189, 52, 123, 118, 189, 12, 55, 9, 190, 65, 56, 54, 189, 20, 123, 90, 190, 147, 79, 12, 189, 178, 249, 71, 61, 182, 150, 206, 188, 17, 197, 29, 62, 1, 44, 140, 189, 2, 242, 166, 190, 252, 40, 158, 60, 215, 70, 147, 60, 152, 175, 238, 61, 183, 227, 139, 62, 224, 42, 103, 189, 198, 115, 85, 62, 137, 189, 63, 62, 253, 4, 252, 61, 85, 72, 82, 62, 92, 240, 194, 61, 30, 243, 125, 190, 184, 91, 237, 189, 17, 209, 176, 188, 244, 213, 111, 62, 13, 74, 161, 61, 149, 189, 31, 62, 70, 19, 174, 62, 120, 106, 56, 190, 81, 133, 99, 190, 1, 189, 169, 61, 221, 77, 163, 189, 124, 48, 131, 61, 48, 179, 69, 62, 227, 183, 55, 190, 100, 41, 26, 62, 118, 121, 245, 61, 93, 127, 96, 62, 32, 159, 107, 61, 60, 94, 35, 62, 81, 93, 169, 189, 248, 172, 29, 62, 12, 71, 50, 62, 166, 12, 2, 61, 51, 101, 123, 62, 109, 152, 32, 60, 128, 92, 227, 189, 81, 174, 66, 62, 23, 239, 22, 62, 82, 149, 21, 188, 138, 177, 7, 190, 50, 242, 250, 61, 61, 83, 20, 189, 33, 133, 174, 61, 233, 245, 145, 190, 3, 255, 143, 61, 211, 249, 111, 190, 24, 104, 4, 62, 243, 128, 71, 190, 162, 145, 122, 190, 83, 68, 89, 190, 199, 66, 108, 62, 159, 216, 39, 189, 105, 159, 85, 187, 206, 164, 54, 61, 118, 93, 175, 189, 192, 81, 255, 61, 97, 113, 191, 59, 227, 103, 58, 190, 39, 20, 9, 189, 56, 222, 187, 61, 17, 90, 149, 60, 110, 89, 83, 189, 97, 208, 169, 189, 20, 218, 160, 190, 189, 6, 4, 61, 46, 181, 83, 190, 74, 62, 52, 62, 152, 111, 166, 62, 226, 149, 145, 60, 146, 248, 66, 61, 9, 137, 78, 62, 209, 103, 50, 62, 132, 244, 127, 62, 76, 123, 108, 190, 112, 230, 89, 188, 37, 173, 173, 190, 96, 100, 26, 62, 186, 189, 148, 190, 249, 54, 33, 61, 106, 181, 22, 190, 238, 108, 189, 190, 154, 240, 175, 188, 89, 125, 2, 189, 49, 26, 142, 62, 57, 91, 94, 61, 167, 214, 151, 190, 238, 165, 60, 190, 202, 36, 139, 62, 1, 201, 14, 190, 205, 222, 58, 189, 22, 196, 147, 189, 67, 23, 201, 61, 43, 193, 173, 189, 249, 115, 7, 62, 140, 191, 173, 60, 68, 138, 216, 189, 179, 167, 241, 60, 57, 101, 100, 189, 254, 230, 128, 60, 160, 52, 55, 59, 194, 183, 30, 189, 105, 219, 137, 188, 157, 183, 39, 60, 49, 133, 8, 190, 124, 49, 209, 61, 223, 134, 207, 189, 198, 162, 56, 188, 11, 185, 208, 61, 127, 67, 150, 189, 145, 164, 72, 61, 101, 248, 8, 190, 152, 158, 2, 62, 90, 61, 197, 189, 225, 161, 31, 188, 246, 218, 246, 61, 173, 39, 56, 189, 38, 185, 167, 189, 177, 124, 87, 189, 96, 180, 234, 60, 191, 186, 107, 61, 229, 29, 130, 189, 22, 212, 135, 61, 120, 63, 149, 189, 250, 92, 75, 61, 79, 12, 244, 61, 201, 82, 182, 189, 10, 138, 77, 188, 86, 144, 232, 189, 4, 139, 155, 189, 17, 243, 244, 61, 127, 25, 192, 189, 131, 22, 54, 188, 97, 187, 184, 61, 24, 240, 213, 188, 0, 204, 38, 190, 42, 39, 179, 189, 205, 123, 27, 190, 214, 168, 87, 189, 68, 235, 13, 190, 87, 206, 243, 189, 194, 69, 60, 189, 218, 124, 8, 189, 234, 18, 8, 190, 63, 122, 162, 188, 45, 133, 213, 189, 186, 68, 163, 60, 69, 31, 28, 62, 11, 96, 233, 189, 201, 26, 12, 62, 44, 232, 117, 60, 201, 188, 29, 189, 68, 38, 5, 62, 140, 143, 32, 61, 149, 167, 127, 189, 2, 247, 106, 60, 130, 196, 188, 189, 154, 205, 16, 62, 238, 188, 164, 61, 167, 107, 118, 189, 100, 93, 59, 189, 113, 55, 64, 61, 207, 180, 12, 62, 95, 158, 65, 189, 228, 230, 132, 62, 225, 180, 52, 190, 229, 133, 233, 60, 215, 9, 55, 190, 198, 39, 137, 190, 149, 170, 156, 190, 9, 162, 46, 190, 250, 25, 56, 62, 203, 242, 233, 190, 0, 43, 80, 62, 135, 131, 29, 60, 81, 63, 138, 62, 179, 222, 0, 188, 247, 226, 149, 189, 42, 168, 208, 62, 44, 91, 63, 61, 21, 64, 24, 62, 140, 77, 219, 59, 27, 208, 66, 62, 119, 166, 18, 190, 127, 135, 212, 189, 95, 193, 56, 62, 163, 216, 33, 189, 54, 98, 5, 63, 27, 31, 137, 62, 86, 153, 166, 61, 38, 217, 79, 189, 215, 218, 44, 62, 118, 242, 200, 61, 24, 15, 5, 62, 233, 38, 171, 62, 214, 11, 52, 62, 55, 222, 60, 62, 118, 176, 163, 62, 114, 202, 172, 189, 180, 29, 38, 62, 143, 114, 185, 189, 27, 230, 252, 61, 128, 250, 247, 189, 24, 82, 124, 61, 87, 75, 119, 189, 129, 34, 24, 62, 253, 228, 169, 189, 107, 136, 223, 188, 246, 27, 3, 190, 117, 51, 169, 60, 54, 111, 114, 62, 165, 238, 11, 190, 24, 222, 240, 61, 27, 62, 201, 61, 241, 33, 154, 62, 247, 84, 249, 189, 110, 246, 182, 62, 149, 208, 129, 189, 198, 15, 190, 189, 124, 108, 146, 62, 155, 160, 222, 61, 216, 18, 234, 189, 19, 9, 158, 189, 227, 24, 153, 190, 225, 108, 9, 190, 220, 0, 94, 190, 27, 127, 118, 190, 171, 117, 181, 188, 183, 113, 200, 61, 143, 23, 183, 61, 89, 18, 4, 190, 251, 51, 4, 61, 158, 63, 32, 62, 201, 129, 77, 190, 194, 118, 120, 62, 194, 193, 152, 189, 21, 247, 207, 61, 137, 79, 11, 62, 241, 244, 39, 62, 204, 244, 85, 62, 161, 175, 207, 189, 71, 160, 116, 62, 74, 53, 80, 62, 34, 31, 120, 189, 233, 209, 224, 61, 196, 125, 204, 61, 124, 81, 82, 62, 227, 167, 209, 189, 57, 227, 64, 62, 101, 156, 112, 62, 34, 100, 255, 60, 124, 202, 189, 186, 88, 97, 187, 189, 142, 159, 2, 190, 83, 167, 226, 189, 244, 147, 233, 190, 43, 229, 145, 62, 51, 127, 56, 189, 93, 149, 119, 62, 64, 65, 49, 61, 237, 57, 71, 62, 165, 82, 23, 188, 221, 43, 221, 189, 240, 54, 114, 60, 203, 32, 91, 190, 47, 14, 84, 189, 50, 119, 99, 62, 110, 67, 8, 62, 215, 155, 180, 62, 237, 225, 80, 62, 89, 36, 194, 61, 133, 179, 88, 62, 11, 12, 232, 60, 45, 121, 11, 62, 192, 14, 138, 190, 245, 242, 159, 61, 100, 138, 1, 190, 201, 240, 209, 61, 99, 19, 18, 190, 164, 203, 237, 188, 4, 103, 168, 60, 102, 241, 183, 62, 185, 62, 176, 61, 211, 75, 65, 189, 5, 99, 52, 62, 36, 117, 181, 59, 208, 49, 38, 190, 183, 12, 152, 190, 97, 248, 139, 62, 253, 80, 104, 189, 49, 86, 180, 61, 223, 150, 219, 189, 40, 1, 255, 187, 215, 7, 169, 60, 105, 95, 83, 189, 129, 245, 32, 190, 131, 24, 170, 189, 128, 22, 142, 189, 167, 128, 0, 189, 26, 213, 7, 190, 49, 160, 160, 61, 95, 74, 10, 62, 79, 146, 29, 189, 238, 33, 185, 61, 82, 222, 103, 61, 153, 203, 137, 60, 100, 26, 246, 189, 218, 125, 42, 190, 139, 118, 96, 61, 201, 157, 129, 189, 88, 225, 233, 61, 21, 165, 60, 190, 60, 45, 44, 62, 54, 167, 122, 187, 191, 45, 200, 189, 137, 160, 45, 190, 53, 109, 238, 58, 189, 51, 22, 61, 172, 175, 156, 61, 162, 202, 2, 189, 203, 244, 51, 190, 61, 66, 138, 189, 102, 111, 13, 62, 178, 174, 26, 62, 48, 5, 81, 189, 244, 139, 182, 60, 87, 88, 157, 189, 110, 105, 36, 190, 192, 92, 156, 189, 229, 90, 33, 190, 68, 88, 51, 189, 227, 189, 94, 189, 148, 118, 12, 189, 149, 119, 136, 189, 70, 23, 9, 62, 14, 224, 145, 61, 89, 176, 118, 188, 87, 66, 233, 188, 136, 222, 122, 189, 182, 103, 3, 189, 170, 95, 97, 189, 32, 128, 192, 60, 33, 113, 109, 188, 246, 167, 64, 189, 231, 91, 158, 61, 116, 11, 174, 189, 59, 89, 239, 61, 243, 26, 12, 190, 251, 113, 201, 61, 251, 103, 1, 190, 133, 199, 241, 61, 246, 160, 143, 188, 91, 14, 229, 61, 75, 185, 224, 189, 73, 140, 231, 189, 88, 73, 6, 62, 173, 151, 140, 188, 12, 0, 39, 190, 168, 249, 152, 60, 30, 72, 57, 190, 45, 224, 173, 61, 250, 128, 194, 61, 190, 11, 65, 190, 240, 24, 37, 189, 187, 131, 228, 189, 138, 12, 42, 61, 66, 121, 0, 62, 142, 167, 193, 61, 62, 144, 65, 189, 128, 234, 197, 60, 64, 59, 239, 61, 98, 202, 229, 61, 78, 124, 240, 189, 200, 183, 226, 189, 75, 223, 11, 188, 32, 109, 27, 61, 215, 130, 119, 61, 156, 158, 59, 190, 40, 181, 0, 190, 194, 96, 156, 189, 135, 209, 4, 61, 16, 117, 34, 62, 70, 83, 84, 61, 246, 119, 67, 61, 112, 104, 145, 61, 110, 121, 151, 189, 253, 179, 240, 61, 206, 94, 81, 61, 176, 50, 32, 61, 135, 100, 42, 62, 209, 67, 24, 62, 203, 40, 193, 59, 202, 186, 3, 61, 193, 252, 160, 59, 199, 228, 56, 190, 32, 15, 28, 189, 96, 65, 133, 61, 176, 123, 102, 189, 54, 8, 49, 62, 144, 9, 166, 62, 199, 22, 37, 191, 152, 142, 50, 190, 128, 21, 171, 62, 128, 201, 76, 62, 198, 130, 6, 62, 203, 142, 89, 189, 154, 137, 105, 62, 44, 232, 95, 190, 182, 6, 135, 189, 40, 150, 32, 61, 194, 142, 10, 62, 193, 240, 183, 62, 115, 107, 82, 190, 198, 196, 27, 190, 133, 42, 204, 188, 26, 213, 249, 188, 94, 138, 132, 186, 50, 174, 249, 190, 160, 121, 12, 62, 142, 220, 176, 188, 117, 26, 179, 189, 91, 97, 52, 62, 240, 171, 17, 62, 81, 129, 243, 61, 53, 156, 183, 61, 191, 249, 53, 62, 234, 226, 14, 61, 182, 87, 243, 59, 30, 143, 115, 62, 221, 218, 135, 190, 42, 255, 155, 188, 152, 250, 221, 189, 234, 145, 27, 59, 217, 80, 51, 62, 99, 158, 42, 61, 165, 161, 9, 187, 133, 181, 26, 61, 214, 124, 6, 190, 112, 182, 60, 61, 154, 159, 27, 61, 60, 63, 12, 190, 186, 177, 161, 62, 4, 181, 203, 60, 26, 235, 221, 62, 59, 126, 0, 189, 57, 61, 249, 189, 100, 238, 106, 189, 86, 248, 113, 62, 83, 0, 17, 62, 40, 250, 85, 62, 254, 250, 41, 62, 37, 92, 24, 190, 167, 104, 141, 189, 145, 127, 16, 190, 58, 211, 5, 62, 19, 174, 200, 61, 98, 246, 249, 61, 8, 200, 135, 62, 100, 83, 147, 62, 2, 149, 39, 60, 112, 195, 97, 62, 44, 235, 135, 190, 107, 105, 48, 62, 13, 64, 207, 61, 228, 238, 11, 62, 216, 175, 139, 62, 185, 129, 170, 61, 108, 0, 72, 189, 6, 10, 145, 191, 49, 115, 145, 58, 248, 224, 147, 190, 174, 226, 235, 60, 157, 68, 113, 188, 110, 187, 16, 62, 20, 245, 52, 62, 199, 91, 217, 189, 78, 235, 249, 190, 59, 0, 242, 188, 118, 188, 186, 189, 83, 138, 252, 61, 88, 42, 146, 62, 93, 159, 7, 189, 64, 157, 102, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {189, 204, 192, 189, 248, 185, 155, 61, 194, 46, 234, 189, 63, 227, 158, 62, 128, 148, 253, 61, 109, 235, 24, 61, 200, 138, 212, 189, 248, 115, 167, 187, 15, 161, 160, 62, 129, 97, 60, 62, 124, 179, 152, 59, 133, 4, 149, 60, 78, 81, 127, 189, 55, 11, 198, 61, 121, 210, 45, 62, 117, 34, 188, 184, 82, 139, 78, 61, 131, 214, 152, 62, 24, 119, 187, 189, 233, 133, 253, 61, 238, 169, 26, 190, 58, 130, 31, 190, 80, 166, 151, 189, 69, 173, 33, 190, 39, 137, 127, 188, 190, 195, 5, 62, 157, 4, 68, 190, 8, 101, 42, 190, 20, 89, 247, 185, 239, 215, 250, 60, 104, 91, 69, 62, 181, 35, 61, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 84, 165, 62, 121, 32, 229, 189, 32, 84, 130, 57, 169, 161, 35, 191, 188, 234, 212, 189, 181, 206, 149, 188, 29, 37, 254, 61, 65, 153, 198, 62, 123, 254, 32, 191, 16, 31, 78, 190, 128, 57, 33, 63, 169, 162, 231, 190, 58, 64, 26, 62, 51, 65, 202, 190, 36, 37, 199, 62, 64, 239, 201, 60, 97, 111, 103, 189, 26, 83, 195, 61, 49, 7, 101, 62, 23, 175, 157, 190, 92, 77, 174, 61, 237, 169, 191, 61, 80, 6, 250, 62, 208, 206, 163, 190, 175, 90, 92, 190, 80, 157, 190, 190, 159, 88, 117, 189, 27, 15, 216, 61, 112, 170, 245, 189, 32, 73, 5, 190, 86, 230, 132, 62, 144, 200, 240, 62, 43, 112, 86, 189, 195, 124, 79, 190, 138, 87, 184, 189, 239, 140, 70, 62, 228, 49, 99, 190, 27, 200, 201, 60, 114, 162, 206, 62, 28, 125, 250, 189, 127, 74, 178, 61, 142, 15, 170, 190, 118, 33, 63, 189, 147, 141, 222, 189, 33, 226, 35, 62, 249, 210, 200, 189, 10, 225, 247, 60, 58, 176, 151, 60, 58, 49, 136, 60, 43, 118, 130, 190, 79, 187, 25, 62, 42, 188, 162, 61, 73, 10, 33, 190, 23, 251, 239, 189, 224, 215, 12, 189, 49, 252, 216, 62, 29, 128, 144, 189, 154, 70, 98, 62, 255, 141, 204, 61, 230, 228, 26, 190, 254, 91, 145, 61, 28, 32, 234, 190, 158, 148, 236, 189, 219, 223, 125, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 247, 73, 62, 236, 238, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {248, 58, 32, 191, 200, 12, 221, 63, 140, 136, 40, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {6, 224, 48, 192, 213, 37, 63, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0072/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}