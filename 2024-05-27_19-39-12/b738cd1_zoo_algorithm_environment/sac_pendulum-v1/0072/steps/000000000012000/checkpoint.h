// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 210, 241, 61, 114, 125, 201, 190, 17, 97, 175, 188, 86, 68, 74, 63, 122, 241, 35, 190, 210, 217, 145, 62, 230, 162, 46, 191, 142, 143, 133, 63, 153, 91, 135, 189, 84, 69, 50, 190, 230, 185, 39, 63, 16, 47, 19, 61, 83, 220, 0, 62, 143, 181, 157, 63, 210, 174, 67, 61, 56, 224, 121, 191, 130, 68, 87, 63, 182, 121, 5, 189, 110, 67, 235, 190, 190, 120, 50, 63, 178, 47, 238, 61, 63, 218, 89, 190, 73, 75, 78, 63, 98, 81, 217, 62, 168, 16, 62, 63, 160, 38, 0, 63, 65, 83, 208, 62, 10, 249, 192, 190, 249, 244, 41, 63, 96, 118, 24, 63, 23, 136, 160, 62, 255, 16, 95, 61, 228, 139, 62, 63, 174, 145, 83, 189, 121, 78, 37, 63, 229, 45, 37, 63, 84, 203, 97, 61, 191, 90, 201, 63, 57, 166, 252, 62, 138, 242, 146, 191, 238, 65, 22, 191, 216, 21, 223, 189, 226, 1, 14, 63, 79, 147, 29, 191, 175, 219, 76, 190, 37, 245, 215, 62, 29, 252, 129, 62, 93, 80, 241, 190, 66, 195, 84, 189, 48, 253, 160, 190, 145, 247, 40, 62, 239, 23, 13, 191, 25, 24, 52, 191, 128, 85, 74, 191, 128, 158, 210, 62, 147, 62, 123, 63, 157, 13, 3, 63, 102, 46, 197, 62, 62, 48, 121, 190, 234, 58, 149, 190, 185, 137, 24, 191, 198, 223, 99, 191, 248, 171, 151, 189, 148, 127, 43, 63, 81, 149, 171, 63, 223, 149, 0, 63, 202, 139, 50, 63, 36, 242, 129, 191, 34, 131, 179, 62, 136, 73, 50, 61, 74, 76, 100, 63, 112, 147, 53, 63, 107, 34, 18, 190, 127, 191, 194, 61, 172, 206, 209, 190, 150, 165, 0, 191, 79, 27, 212, 188, 4, 155, 47, 191, 165, 241, 104, 62, 178, 196, 33, 61, 111, 229, 237, 187, 18, 194, 140, 189, 180, 165, 82, 62, 235, 163, 84, 61, 231, 200, 129, 191, 198, 10, 125, 59, 140, 249, 181, 189, 191, 8, 133, 62, 134, 124, 35, 191, 255, 65, 205, 62, 163, 81, 47, 191, 80, 156, 203, 191, 136, 79, 183, 190, 104, 136, 234, 62, 56, 134, 170, 190, 98, 243, 228, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 161, 19, 191, 245, 196, 216, 62, 119, 242, 21, 62, 128, 21, 16, 63, 242, 136, 49, 63, 172, 25, 13, 63, 47, 161, 15, 63, 21, 226, 181, 190, 82, 110, 101, 191, 195, 227, 255, 190, 158, 169, 207, 190, 205, 215, 57, 190, 197, 215, 72, 189, 83, 119, 99, 62, 185, 115, 138, 190, 149, 121, 141, 190, 97, 11, 110, 191, 21, 213, 113, 189, 42, 90, 128, 61, 100, 175, 148, 62, 238, 89, 138, 62, 87, 251, 228, 61, 116, 90, 240, 62, 164, 165, 131, 189, 226, 91, 148, 190, 200, 109, 84, 190, 24, 196, 205, 190, 224, 130, 35, 191, 243, 211, 197, 188, 177, 186, 24, 61, 65, 249, 34, 63, 71, 14, 171, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 108, 231, 189, 46, 224, 50, 63, 163, 143, 59, 189, 117, 226, 23, 62, 159, 218, 93, 190, 181, 138, 132, 190, 146, 217, 22, 191, 40, 173, 171, 190, 169, 93, 179, 190, 198, 73, 207, 188, 24, 62, 13, 62, 247, 120, 188, 190, 127, 134, 228, 190, 235, 127, 252, 188, 174, 211, 80, 62, 114, 9, 153, 62, 125, 56, 224, 60, 60, 90, 247, 60, 128, 228, 198, 190, 50, 48, 54, 62, 226, 136, 15, 61, 120, 179, 150, 190, 219, 64, 79, 62, 156, 247, 180, 190, 185, 255, 108, 62, 120, 63, 207, 61, 108, 206, 9, 62, 40, 106, 177, 189, 159, 62, 225, 189, 129, 18, 50, 62, 100, 1, 224, 60, 50, 197, 143, 62, 15, 229, 231, 188, 249, 189, 102, 61, 177, 91, 226, 189, 120, 97, 32, 61, 127, 247, 32, 190, 179, 193, 147, 189, 204, 103, 85, 190, 196, 35, 0, 62, 163, 159, 27, 61, 164, 111, 123, 61, 138, 126, 34, 62, 155, 1, 42, 62, 129, 236, 119, 188, 227, 97, 18, 191, 44, 17, 38, 189, 93, 119, 219, 189, 182, 228, 28, 62, 34, 165, 41, 61, 214, 154, 204, 61, 177, 124, 167, 62, 61, 86, 167, 190, 236, 99, 175, 189, 222, 128, 139, 61, 7, 110, 180, 61, 207, 200, 40, 62, 255, 9, 63, 188, 136, 162, 155, 189, 26, 161, 229, 61, 245, 74, 255, 190, 9, 196, 71, 62, 177, 38, 71, 191, 216, 4, 171, 61, 43, 151, 176, 61, 87, 83, 145, 188, 169, 132, 224, 189, 6, 70, 27, 190, 223, 29, 215, 189, 33, 255, 147, 189, 32, 254, 172, 189, 193, 181, 30, 190, 223, 127, 121, 61, 143, 92, 1, 190, 114, 139, 9, 190, 213, 254, 193, 189, 214, 158, 155, 60, 141, 198, 146, 60, 183, 201, 199, 189, 151, 179, 16, 190, 6, 37, 49, 62, 143, 141, 8, 190, 173, 100, 165, 189, 18, 105, 125, 188, 43, 228, 186, 189, 238, 84, 137, 188, 125, 70, 223, 60, 238, 109, 0, 190, 123, 223, 25, 189, 210, 135, 130, 61, 46, 194, 126, 189, 223, 142, 233, 61, 136, 165, 187, 61, 53, 30, 24, 190, 135, 163, 139, 61, 74, 49, 174, 61, 169, 125, 195, 60, 116, 51, 252, 62, 78, 32, 253, 60, 143, 83, 243, 62, 92, 155, 148, 62, 254, 1, 122, 61, 41, 213, 216, 62, 135, 193, 105, 191, 79, 99, 243, 62, 178, 17, 90, 191, 13, 68, 157, 61, 25, 40, 15, 191, 120, 249, 4, 191, 149, 207, 27, 61, 254, 194, 147, 191, 239, 152, 34, 190, 235, 6, 6, 61, 194, 169, 78, 62, 202, 21, 5, 63, 87, 61, 134, 190, 4, 74, 174, 61, 128, 133, 42, 63, 160, 178, 192, 190, 57, 224, 14, 191, 250, 190, 180, 190, 172, 144, 32, 189, 61, 193, 41, 189, 189, 172, 80, 187, 26, 171, 242, 62, 130, 36, 64, 61, 247, 26, 103, 62, 104, 218, 189, 190, 173, 43, 200, 186, 27, 182, 216, 62, 202, 231, 79, 62, 251, 52, 72, 62, 196, 105, 165, 62, 219, 201, 100, 189, 132, 115, 164, 61, 221, 54, 2, 190, 204, 22, 51, 190, 2, 111, 173, 190, 205, 19, 240, 189, 239, 200, 40, 190, 139, 207, 9, 62, 230, 230, 185, 187, 76, 200, 118, 189, 61, 248, 141, 190, 57, 71, 224, 190, 240, 51, 135, 62, 168, 94, 82, 62, 0, 182, 201, 188, 38, 41, 25, 59, 23, 4, 36, 62, 63, 24, 179, 61, 82, 100, 104, 60, 121, 42, 147, 190, 200, 37, 94, 62, 226, 60, 22, 190, 59, 252, 236, 61, 28, 232, 88, 188, 127, 63, 46, 190, 8, 10, 79, 190, 35, 212, 42, 190, 206, 236, 33, 190, 61, 52, 16, 189, 254, 160, 79, 190, 209, 69, 239, 189, 188, 98, 130, 61, 81, 51, 77, 190, 51, 2, 149, 61, 89, 172, 7, 62, 34, 235, 7, 62, 53, 78, 201, 189, 253, 12, 11, 190, 117, 204, 212, 60, 135, 243, 170, 58, 200, 19, 10, 190, 224, 137, 70, 190, 169, 26, 61, 59, 49, 116, 95, 61, 140, 91, 194, 189, 187, 173, 223, 188, 110, 105, 150, 61, 41, 138, 83, 190, 113, 179, 137, 189, 234, 126, 131, 189, 138, 81, 178, 61, 55, 69, 208, 188, 212, 211, 18, 61, 218, 148, 62, 189, 234, 202, 87, 61, 60, 47, 206, 61, 171, 32, 69, 190, 222, 42, 167, 61, 60, 122, 242, 188, 20, 167, 28, 62, 225, 7, 97, 61, 103, 177, 84, 189, 76, 172, 13, 61, 40, 177, 145, 190, 101, 252, 195, 188, 163, 218, 194, 189, 91, 60, 173, 189, 135, 118, 128, 61, 189, 14, 75, 190, 190, 242, 208, 61, 119, 116, 110, 60, 89, 192, 11, 60, 235, 183, 95, 190, 212, 100, 136, 190, 137, 138, 121, 188, 116, 118, 98, 189, 107, 201, 235, 60, 112, 75, 109, 62, 99, 21, 5, 61, 20, 4, 38, 190, 205, 2, 160, 61, 250, 94, 43, 190, 11, 33, 41, 189, 105, 164, 194, 189, 165, 7, 77, 189, 175, 192, 208, 189, 174, 125, 30, 190, 216, 229, 16, 190, 241, 61, 80, 189, 242, 27, 56, 190, 84, 218, 220, 189, 27, 106, 71, 60, 5, 10, 73, 58, 235, 240, 161, 190, 38, 49, 239, 61, 16, 214, 120, 62, 167, 183, 165, 190, 106, 191, 55, 189, 211, 67, 184, 62, 75, 243, 35, 191, 31, 94, 154, 62, 155, 4, 73, 190, 3, 64, 17, 62, 198, 216, 11, 61, 56, 105, 164, 61, 243, 14, 158, 62, 150, 3, 40, 62, 78, 89, 193, 190, 76, 90, 96, 60, 98, 213, 135, 190, 218, 126, 72, 62, 123, 62, 62, 189, 77, 153, 73, 190, 63, 86, 99, 62, 203, 146, 149, 187, 82, 53, 152, 62, 186, 194, 73, 190, 50, 106, 4, 190, 3, 203, 241, 61, 100, 118, 71, 62, 159, 175, 214, 62, 244, 198, 157, 189, 201, 241, 152, 62, 167, 167, 86, 188, 197, 6, 161, 62, 107, 75, 213, 61, 37, 161, 79, 62, 144, 46, 39, 189, 125, 51, 127, 188, 242, 215, 71, 62, 187, 253, 210, 191, 224, 3, 93, 62, 167, 48, 206, 191, 148, 248, 7, 62, 104, 237, 175, 191, 158, 68, 122, 191, 185, 25, 225, 61, 61, 157, 11, 191, 180, 21, 240, 190, 253, 117, 8, 60, 80, 254, 192, 62, 25, 7, 3, 190, 199, 204, 231, 60, 24, 153, 55, 62, 239, 111, 67, 62, 61, 62, 63, 191, 9, 188, 131, 191, 45, 141, 154, 190, 202, 217, 199, 62, 41, 176, 209, 61, 236, 146, 137, 61, 228, 70, 127, 62, 63, 88, 120, 191, 74, 165, 180, 62, 210, 132, 110, 191, 245, 83, 7, 62, 127, 191, 124, 62, 5, 171, 144, 62, 181, 214, 123, 188, 44, 108, 88, 62, 161, 131, 82, 189, 150, 124, 69, 189, 105, 177, 2, 190, 41, 247, 133, 61, 157, 246, 185, 189, 232, 188, 136, 61, 251, 18, 178, 189, 55, 44, 98, 61, 145, 69, 188, 191, 210, 58, 91, 191, 189, 19, 233, 62, 189, 159, 187, 62, 164, 206, 8, 189, 159, 48, 94, 61, 73, 22, 176, 62, 254, 165, 32, 191, 9, 7, 12, 62, 209, 186, 102, 62, 55, 191, 42, 62, 231, 12, 81, 62, 248, 171, 20, 190, 219, 165, 21, 189, 33, 50, 18, 61, 91, 15, 216, 190, 145, 107, 137, 60, 94, 207, 25, 192, 67, 143, 102, 62, 172, 132, 44, 62, 54, 107, 139, 191, 188, 187, 123, 61, 49, 59, 115, 62, 113, 163, 46, 190, 50, 166, 146, 62, 162, 233, 153, 62, 3, 150, 0, 190, 70, 226, 196, 190, 92, 207, 130, 188, 19, 191, 6, 191, 83, 124, 92, 190, 118, 233, 176, 62, 151, 62, 151, 62, 9, 58, 148, 190, 63, 34, 206, 190, 159, 167, 56, 189, 70, 39, 151, 190, 44, 240, 171, 191, 49, 157, 141, 190, 197, 249, 151, 61, 44, 254, 157, 191, 12, 103, 74, 62, 90, 154, 179, 190, 182, 75, 96, 61, 208, 30, 162, 188, 164, 184, 239, 189, 230, 32, 204, 189, 214, 196, 178, 62, 151, 255, 51, 62, 102, 169, 134, 62, 193, 213, 188, 189, 216, 75, 35, 190, 133, 239, 223, 189, 175, 82, 57, 191, 41, 110, 46, 191, 102, 169, 34, 191, 138, 140, 92, 191, 83, 247, 143, 190, 254, 142, 154, 62, 207, 43, 64, 191, 236, 222, 243, 61, 213, 54, 74, 190, 201, 11, 168, 60, 208, 158, 223, 190, 66, 143, 77, 62, 78, 131, 72, 62, 103, 115, 132, 189, 72, 49, 118, 190, 71, 195, 46, 190, 150, 29, 69, 191, 250, 136, 90, 190, 7, 249, 183, 62, 54, 198, 162, 191, 219, 159, 131, 62, 204, 233, 11, 61, 62, 165, 171, 189, 189, 158, 28, 190, 149, 167, 180, 189, 184, 241, 23, 62, 7, 189, 44, 191, 187, 178, 182, 62, 188, 230, 117, 62, 42, 130, 209, 61, 71, 43, 112, 189, 205, 145, 253, 189, 227, 199, 59, 190, 186, 125, 139, 59, 227, 234, 188, 189, 150, 172, 51, 62, 24, 110, 166, 59, 228, 155, 221, 189, 221, 191, 16, 61, 80, 191, 190, 188, 232, 10, 34, 61, 254, 85, 4, 190, 168, 48, 38, 190, 216, 115, 71, 189, 214, 157, 100, 61, 232, 110, 180, 61, 45, 62, 129, 61, 188, 127, 30, 189, 134, 163, 18, 62, 19, 80, 17, 62, 59, 41, 241, 61, 188, 213, 20, 190, 32, 246, 15, 190, 99, 172, 85, 61, 246, 217, 150, 189, 83, 39, 43, 190, 29, 86, 22, 190, 0, 203, 14, 189, 133, 117, 168, 189, 105, 183, 210, 189, 89, 246, 240, 188, 63, 55, 40, 189, 171, 142, 127, 189, 164, 197, 165, 62, 146, 29, 208, 189, 109, 101, 6, 62, 165, 117, 206, 186, 228, 182, 246, 189, 22, 156, 78, 62, 106, 87, 150, 191, 231, 145, 202, 59, 123, 86, 190, 191, 68, 167, 231, 62, 194, 47, 133, 191, 182, 124, 135, 191, 133, 41, 180, 62, 113, 209, 122, 189, 30, 238, 113, 188, 171, 246, 17, 62, 6, 53, 79, 62, 109, 16, 60, 63, 22, 16, 255, 188, 70, 238, 237, 62, 23, 175, 34, 63, 63, 233, 13, 190, 55, 67, 139, 191, 32, 96, 4, 191, 223, 73, 37, 62, 118, 224, 22, 189, 61, 66, 206, 61, 245, 208, 12, 190, 101, 253, 225, 190, 220, 86, 120, 62, 232, 178, 156, 190, 229, 194, 64, 189, 237, 15, 244, 60, 186, 53, 145, 190, 221, 126, 43, 190, 104, 146, 133, 62, 82, 249, 166, 190, 189, 189, 76, 190, 54, 170, 166, 62, 179, 196, 16, 191, 107, 112, 100, 62, 176, 158, 238, 190, 84, 226, 159, 61, 25, 51, 2, 62, 90, 46, 26, 190, 253, 106, 206, 62, 152, 103, 159, 62, 156, 130, 32, 191, 21, 213, 82, 190, 141, 243, 173, 190, 42, 248, 174, 189, 229, 185, 7, 190, 194, 138, 17, 191, 19, 206, 200, 59, 228, 176, 198, 62, 117, 230, 3, 62, 255, 112, 140, 190, 253, 216, 20, 62, 153, 149, 242, 61, 183, 73, 39, 190, 153, 147, 175, 62, 73, 22, 43, 189, 236, 96, 45, 62, 239, 162, 191, 189, 96, 215, 137, 189, 131, 99, 46, 62, 154, 103, 227, 189, 85, 76, 27, 190, 217, 144, 31, 190, 173, 233, 31, 62, 7, 111, 241, 189, 253, 215, 187, 188, 168, 123, 95, 188, 13, 249, 25, 190, 67, 118, 244, 60, 11, 229, 20, 190, 127, 77, 120, 189, 253, 249, 178, 61, 112, 193, 240, 61, 24, 27, 235, 61, 132, 25, 134, 61, 21, 87, 239, 189, 91, 61, 42, 190, 55, 42, 213, 188, 7, 11, 15, 60, 115, 136, 57, 60, 160, 254, 227, 61, 152, 204, 49, 61, 227, 213, 51, 190, 248, 148, 37, 62, 188, 39, 96, 189, 9, 118, 52, 62, 99, 176, 22, 190, 11, 165, 41, 190, 167, 229, 35, 190, 190, 82, 68, 61, 230, 107, 8, 61, 41, 72, 148, 62, 252, 244, 149, 62, 63, 176, 86, 61, 250, 76, 170, 62, 114, 125, 186, 62, 59, 210, 205, 61, 101, 56, 222, 189, 73, 7, 136, 62, 176, 33, 4, 189, 0, 207, 242, 61, 86, 28, 33, 60, 117, 115, 88, 191, 196, 87, 174, 191, 1, 95, 240, 61, 26, 96, 63, 62, 166, 44, 6, 190, 53, 228, 57, 62, 25, 112, 148, 60, 93, 221, 171, 190, 183, 40, 13, 190, 238, 12, 230, 190, 2, 165, 16, 190, 214, 251, 172, 59, 104, 226, 247, 61, 182, 150, 206, 188, 17, 197, 29, 62, 235, 118, 31, 61, 176, 156, 152, 190, 228, 226, 42, 191, 63, 27, 137, 189, 152, 175, 238, 61, 78, 40, 156, 62, 63, 40, 227, 60, 6, 75, 188, 62, 147, 133, 203, 62, 50, 28, 114, 61, 185, 72, 93, 62, 153, 28, 251, 61, 35, 184, 171, 190, 15, 81, 209, 189, 108, 49, 234, 188, 191, 224, 102, 62, 175, 56, 21, 62, 164, 211, 144, 61, 32, 122, 129, 62, 141, 101, 105, 190, 141, 77, 164, 190, 126, 224, 198, 187, 86, 54, 150, 189, 194, 203, 177, 61, 11, 79, 179, 61, 107, 66, 52, 190, 0, 210, 2, 62, 80, 5, 240, 61, 6, 102, 10, 62, 100, 1, 12, 61, 60, 94, 35, 62, 81, 93, 169, 189, 214, 197, 96, 188, 109, 104, 26, 62, 37, 60, 250, 189, 214, 175, 100, 62, 109, 152, 32, 60, 225, 137, 39, 190, 80, 5, 186, 62, 229, 77, 170, 62, 22, 127, 123, 62, 212, 12, 251, 60, 46, 217, 157, 62, 93, 195, 88, 190, 141, 122, 217, 58, 75, 156, 250, 190, 201, 13, 87, 189, 9, 60, 186, 190, 139, 252, 220, 62, 111, 243, 154, 190, 190, 252, 81, 191, 207, 4, 167, 190, 199, 66, 108, 62, 251, 191, 141, 190, 255, 41, 57, 189, 4, 225, 212, 189, 71, 71, 199, 190, 117, 115, 40, 62, 146, 215, 51, 187, 110, 128, 35, 190, 35, 190, 233, 189, 106, 14, 7, 62, 17, 90, 149, 60, 110, 89, 83, 189, 52, 165, 196, 189, 119, 164, 15, 191, 81, 111, 141, 190, 114, 249, 216, 189, 74, 62, 52, 62, 103, 21, 197, 62, 54, 235, 153, 189, 245, 199, 98, 61, 19, 241, 164, 62, 251, 220, 249, 61, 252, 69, 155, 62, 90, 6, 192, 190, 55, 119, 11, 62, 118, 132, 241, 190, 10, 14, 244, 61, 7, 37, 179, 190, 35, 136, 70, 190, 2, 161, 5, 187, 59, 109, 59, 191, 66, 64, 187, 189, 112, 68, 174, 188, 216, 91, 103, 62, 188, 134, 246, 61, 117, 245, 188, 190, 105, 225, 251, 189, 246, 53, 244, 62, 121, 29, 108, 189, 230, 79, 239, 189, 247, 70, 216, 189, 173, 23, 65, 61, 43, 193, 173, 189, 249, 115, 7, 62, 188, 161, 145, 61, 170, 8, 8, 190, 209, 161, 190, 189, 130, 172, 53, 189, 254, 230, 128, 60, 160, 52, 55, 59, 194, 183, 30, 189, 105, 219, 137, 188, 157, 183, 39, 60, 49, 133, 8, 190, 124, 49, 209, 61, 223, 134, 207, 189, 198, 162, 56, 188, 11, 185, 208, 61, 127, 67, 150, 189, 145, 164, 72, 61, 101, 248, 8, 190, 152, 158, 2, 62, 90, 61, 197, 189, 225, 161, 31, 188, 246, 218, 246, 61, 173, 39, 56, 189, 38, 185, 167, 189, 177, 124, 87, 189, 96, 180, 234, 60, 191, 186, 107, 61, 229, 29, 130, 189, 22, 212, 135, 61, 120, 63, 149, 189, 250, 92, 75, 61, 79, 12, 244, 61, 201, 82, 182, 189, 10, 138, 77, 188, 86, 144, 232, 189, 4, 139, 155, 189, 17, 243, 244, 61, 127, 25, 192, 189, 2, 144, 47, 189, 97, 187, 184, 61, 24, 240, 213, 188, 4, 241, 53, 190, 42, 39, 179, 189, 205, 123, 27, 190, 214, 168, 87, 189, 68, 235, 13, 190, 87, 206, 243, 189, 90, 102, 136, 189, 84, 121, 27, 189, 250, 56, 10, 190, 63, 122, 162, 188, 240, 84, 2, 190, 186, 68, 163, 60, 69, 31, 28, 62, 11, 96, 233, 189, 18, 201, 251, 61, 71, 155, 76, 55, 3, 206, 64, 189, 139, 177, 213, 61, 198, 73, 244, 59, 213, 252, 160, 189, 2, 247, 106, 60, 130, 196, 188, 189, 154, 205, 16, 62, 238, 188, 164, 61, 167, 107, 118, 189, 58, 176, 158, 189, 125, 115, 200, 60, 48, 102, 216, 61, 95, 158, 65, 189, 72, 19, 195, 62, 86, 136, 159, 190, 17, 193, 178, 61, 155, 116, 80, 190, 190, 199, 170, 190, 69, 145, 206, 190, 42, 189, 252, 189, 75, 47, 68, 62, 77, 97, 211, 190, 149, 80, 125, 62, 15, 39, 25, 61, 89, 60, 117, 62, 137, 118, 247, 61, 187, 159, 93, 189, 70, 180, 211, 62, 153, 95, 212, 189, 105, 114, 26, 62, 86, 101, 195, 60, 234, 97, 77, 62, 146, 184, 137, 189, 111, 102, 17, 190, 209, 178, 95, 62, 50, 12, 68, 188, 207, 161, 0, 63, 106, 1, 147, 62, 86, 153, 166, 61, 38, 217, 79, 189, 34, 113, 111, 62, 234, 70, 254, 61, 96, 174, 107, 62, 12, 70, 187, 62, 214, 11, 52, 62, 13, 246, 6, 62, 200, 116, 54, 62, 168, 209, 223, 190, 245, 141, 201, 187, 12, 234, 154, 190, 114, 242, 77, 61, 116, 128, 254, 189, 133, 146, 110, 62, 109, 161, 84, 189, 233, 46, 103, 62, 139, 15, 26, 189, 161, 100, 68, 61, 103, 47, 221, 190, 12, 36, 148, 61, 82, 185, 45, 62, 62, 63, 179, 60, 101, 133, 225, 61, 161, 135, 80, 62, 150, 234, 97, 62, 94, 81, 79, 190, 238, 98, 2, 63, 68, 148, 186, 60, 114, 197, 56, 189, 118, 237, 133, 62, 100, 23, 83, 60, 216, 18, 234, 189, 19, 9, 158, 189, 216, 219, 33, 191, 24, 119, 173, 189, 81, 52, 126, 190, 193, 0, 60, 190, 171, 117, 181, 188, 62, 10, 104, 188, 116, 192, 164, 62, 72, 120, 124, 188, 26, 194, 2, 62, 230, 9, 154, 62, 94, 233, 28, 190, 32, 201, 43, 62, 97, 35, 176, 189, 40, 172, 187, 60, 161, 174, 53, 61, 109, 123, 161, 61, 112, 191, 0, 62, 61, 7, 33, 191, 183, 115, 128, 190, 115, 218, 115, 62, 30, 202, 223, 61, 100, 22, 102, 61, 232, 100, 226, 60, 203, 164, 82, 62, 34, 151, 8, 191, 78, 243, 53, 62, 134, 156, 54, 62, 107, 155, 133, 189, 91, 20, 105, 60, 6, 174, 47, 189, 142, 159, 2, 190, 83, 167, 226, 189, 22, 123, 151, 190, 110, 227, 89, 62, 231, 4, 166, 191, 40, 218, 46, 62, 64, 65, 49, 61, 193, 245, 223, 61, 25, 88, 209, 189, 235, 108, 165, 190, 62, 42, 43, 190, 182, 62, 144, 190, 240, 136, 225, 189, 232, 138, 59, 62, 105, 111, 27, 62, 57, 43, 164, 62, 212, 3, 41, 62, 77, 245, 142, 61, 21, 101, 16, 62, 170, 125, 50, 190, 208, 183, 135, 62, 115, 31, 3, 189, 190, 82, 81, 62, 65, 129, 38, 189, 96, 95, 104, 61, 230, 244, 196, 189, 250, 116, 247, 189, 30, 38, 11, 189, 38, 145, 194, 62, 181, 11, 81, 61, 122, 80, 250, 61, 112, 175, 131, 62, 36, 117, 181, 59, 208, 49, 38, 190, 211, 107, 236, 190, 61, 146, 141, 62, 173, 189, 111, 189, 15, 87, 139, 61, 223, 150, 219, 189, 192, 67, 38, 188, 215, 7, 169, 60, 30, 41, 84, 189, 180, 255, 33, 190, 131, 24, 170, 189, 97, 13, 143, 189, 160, 188, 6, 189, 42, 158, 9, 190, 144, 140, 156, 61, 129, 55, 7, 62, 115, 247, 39, 189, 96, 103, 180, 61, 82, 222, 103, 61, 153, 203, 137, 60, 100, 26, 246, 189, 94, 137, 42, 190, 139, 118, 96, 61, 59, 170, 134, 189, 88, 225, 233, 61, 21, 165, 60, 190, 235, 79, 41, 62, 167, 130, 185, 187, 177, 248, 206, 189, 137, 160, 45, 190, 53, 109, 238, 58, 189, 51, 22, 61, 172, 175, 156, 61, 162, 202, 2, 189, 147, 206, 53, 190, 61, 66, 138, 189, 59, 32, 11, 62, 178, 174, 26, 62, 216, 74, 153, 189, 148, 149, 65, 188, 254, 162, 196, 189, 166, 139, 78, 190, 128, 138, 2, 190, 98, 31, 82, 190, 118, 221, 155, 189, 216, 172, 177, 189, 7, 226, 136, 189, 138, 46, 203, 189, 105, 180, 208, 61, 238, 177, 6, 61, 142, 190, 153, 188, 196, 37, 201, 188, 136, 222, 122, 189, 133, 234, 78, 189, 170, 95, 97, 189, 135, 22, 34, 188, 33, 113, 109, 188, 124, 54, 120, 189, 72, 117, 54, 61, 56, 152, 216, 189, 179, 184, 172, 61, 243, 26, 12, 190, 251, 113, 201, 61, 251, 103, 1, 190, 133, 199, 241, 61, 218, 18, 250, 188, 47, 131, 175, 61, 38, 59, 224, 189, 97, 208, 17, 190, 88, 73, 6, 62, 173, 151, 140, 188, 12, 0, 39, 190, 168, 249, 152, 60, 30, 72, 57, 190, 45, 224, 173, 61, 250, 128, 194, 61, 190, 11, 65, 190, 240, 24, 37, 189, 187, 131, 228, 189, 138, 12, 42, 61, 66, 121, 0, 62, 142, 167, 193, 61, 62, 144, 65, 189, 128, 234, 197, 60, 64, 59, 239, 61, 98, 202, 229, 61, 78, 124, 240, 189, 200, 183, 226, 189, 75, 223, 11, 188, 32, 109, 27, 61, 215, 130, 119, 61, 156, 158, 59, 190, 40, 181, 0, 190, 194, 96, 156, 189, 135, 209, 4, 61, 16, 117, 34, 62, 70, 83, 84, 61, 246, 119, 67, 61, 112, 104, 145, 61, 110, 121, 151, 189, 253, 179, 240, 61, 206, 94, 81, 61, 241, 74, 184, 61, 143, 78, 148, 62, 12, 187, 96, 62, 177, 165, 159, 61, 183, 200, 6, 62, 14, 2, 210, 61, 41, 233, 75, 190, 10, 118, 253, 189, 164, 98, 38, 61, 200, 145, 213, 189, 255, 39, 0, 62, 232, 222, 97, 62, 141, 33, 45, 191, 19, 94, 51, 191, 198, 217, 92, 62, 161, 118, 202, 62, 171, 152, 239, 60, 69, 141, 227, 189, 122, 181, 49, 62, 222, 152, 150, 189, 207, 8, 201, 189, 5, 28, 42, 62, 50, 51, 165, 61, 250, 42, 136, 62, 58, 104, 137, 190, 198, 196, 27, 190, 133, 42, 204, 188, 71, 232, 219, 61, 132, 58, 57, 61, 66, 102, 70, 191, 18, 113, 17, 62, 142, 220, 176, 188, 116, 46, 49, 188, 223, 164, 110, 62, 108, 194, 151, 62, 223, 82, 144, 62, 28, 14, 175, 61, 142, 6, 80, 62, 67, 48, 134, 61, 51, 123, 244, 188, 91, 218, 133, 62, 73, 136, 124, 190, 239, 102, 84, 187, 7, 125, 155, 60, 237, 209, 13, 189, 47, 194, 32, 62, 223, 164, 17, 61, 125, 244, 25, 190, 31, 151, 124, 188, 30, 12, 219, 189, 245, 211, 128, 61, 209, 209, 140, 189, 213, 108, 252, 189, 109, 51, 149, 62, 88, 220, 88, 61, 19, 242, 198, 62, 112, 165, 231, 188, 57, 61, 249, 189, 100, 238, 106, 189, 213, 76, 78, 62, 106, 28, 2, 62, 29, 151, 247, 61, 56, 214, 57, 62, 37, 92, 24, 190, 152, 218, 120, 190, 103, 227, 176, 61, 78, 209, 196, 62, 169, 205, 147, 62, 21, 106, 116, 62, 78, 68, 219, 62, 23, 161, 152, 62, 133, 127, 53, 187, 152, 23, 98, 62, 103, 115, 147, 190, 162, 206, 38, 62, 15, 0, 141, 62, 29, 12, 207, 189, 189, 30, 186, 190, 177, 7, 112, 62, 230, 107, 127, 190, 227, 203, 159, 191, 227, 84, 37, 61, 103, 199, 233, 190, 75, 124, 228, 190, 145, 4, 4, 61, 112, 86, 247, 189, 224, 110, 61, 62, 0, 62, 28, 63, 252, 187, 163, 61, 59, 0, 242, 188, 118, 188, 186, 189, 218, 242, 254, 61, 33, 77, 15, 62, 12, 0, 250, 190, 159, 177, 154, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 133, 138, 189, 133, 241, 1, 61, 194, 46, 234, 189, 103, 167, 175, 62, 150, 253, 100, 62, 109, 235, 24, 61, 19, 21, 23, 190, 169, 77, 203, 188, 30, 43, 132, 62, 190, 61, 107, 62, 156, 34, 190, 59, 232, 33, 163, 61, 40, 195, 174, 189, 224, 117, 139, 61, 61, 165, 46, 62, 117, 34, 188, 184, 16, 132, 160, 61, 97, 87, 191, 62, 33, 24, 70, 187, 107, 7, 165, 61, 238, 169, 26, 190, 47, 1, 64, 190, 149, 203, 244, 59, 37, 48, 190, 190, 226, 221, 181, 189, 50, 0, 86, 61, 60, 196, 68, 190, 88, 17, 71, 190, 20, 89, 247, 185, 85, 43, 13, 62, 73, 249, 131, 62, 75, 68, 176, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {217, 118, 232, 62, 134, 210, 255, 189, 32, 84, 130, 57, 255, 202, 99, 191, 35, 94, 104, 188, 181, 206, 149, 188, 218, 44, 55, 61, 191, 7, 181, 62, 21, 248, 32, 191, 14, 23, 59, 191, 187, 17, 128, 63, 224, 135, 108, 191, 179, 192, 241, 61, 180, 122, 1, 191, 57, 21, 18, 63, 64, 239, 201, 60, 199, 229, 230, 190, 115, 6, 16, 62, 188, 215, 104, 63, 178, 94, 241, 190, 92, 77, 174, 61, 72, 16, 191, 61, 86, 65, 250, 62, 229, 11, 183, 190, 238, 216, 152, 190, 174, 18, 176, 190, 229, 179, 116, 189, 95, 243, 190, 61, 112, 170, 245, 189, 237, 34, 114, 190, 237, 113, 93, 62, 29, 136, 19, 63, 233, 50, 5, 190, 25, 89, 72, 190, 138, 87, 184, 189, 226, 239, 19, 62, 202, 183, 120, 190, 27, 200, 201, 60, 189, 125, 213, 62, 206, 52, 172, 189, 158, 84, 180, 61, 146, 169, 18, 190, 151, 107, 35, 189, 194, 83, 102, 189, 189, 187, 45, 62, 246, 167, 75, 190, 240, 35, 26, 62, 58, 176, 151, 60, 40, 225, 123, 61, 149, 84, 99, 190, 72, 253, 179, 62, 78, 116, 1, 61, 73, 10, 33, 190, 146, 226, 239, 189, 197, 95, 4, 61, 119, 176, 254, 62, 64, 62, 222, 187, 198, 183, 54, 62, 138, 177, 204, 61, 125, 5, 21, 190, 254, 91, 145, 61, 194, 47, 174, 190, 73, 131, 173, 189, 240, 41, 106, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 59, 139, 62, 161, 254, 146, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {132, 185, 210, 62, 12, 130, 175, 61, 254, 99, 108, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {226, 195, 141, 191, 32, 2, 117, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0072/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}