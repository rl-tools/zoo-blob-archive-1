// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 210, 241, 61, 114, 125, 201, 190, 17, 97, 175, 188, 254, 19, 15, 63, 139, 120, 155, 189, 208, 22, 135, 61, 131, 25, 158, 190, 43, 132, 18, 63, 78, 196, 246, 62, 170, 202, 224, 60, 27, 20, 238, 62, 199, 199, 70, 62, 236, 138, 146, 61, 186, 166, 16, 63, 100, 90, 224, 62, 243, 35, 216, 190, 44, 105, 18, 63, 171, 104, 249, 62, 35, 192, 33, 189, 235, 94, 124, 62, 23, 147, 139, 62, 80, 25, 185, 190, 226, 77, 92, 189, 0, 20, 38, 62, 71, 247, 37, 189, 63, 84, 138, 62, 96, 77, 8, 63, 158, 189, 166, 190, 115, 105, 54, 190, 198, 174, 72, 62, 184, 182, 133, 62, 76, 74, 150, 62, 8, 81, 18, 63, 89, 78, 101, 190, 207, 246, 230, 190, 104, 191, 197, 61, 215, 171, 211, 62, 49, 61, 6, 63, 226, 91, 221, 62, 143, 72, 255, 190, 157, 201, 161, 190, 126, 243, 203, 190, 167, 186, 8, 61, 96, 31, 23, 190, 165, 91, 186, 189, 16, 51, 195, 62, 189, 216, 95, 62, 189, 2, 121, 190, 53, 250, 1, 191, 28, 248, 168, 189, 147, 7, 18, 62, 14, 137, 9, 190, 135, 34, 116, 61, 99, 70, 7, 191, 239, 188, 118, 62, 195, 218, 74, 62, 123, 43, 239, 62, 115, 156, 56, 62, 51, 29, 214, 61, 65, 159, 162, 190, 255, 238, 205, 190, 137, 253, 201, 190, 235, 133, 143, 190, 55, 254, 6, 63, 23, 124, 144, 62, 158, 133, 6, 63, 33, 63, 216, 62, 154, 239, 12, 191, 144, 197, 35, 190, 112, 182, 18, 189, 166, 40, 206, 190, 74, 188, 151, 62, 48, 226, 164, 189, 91, 96, 61, 62, 65, 85, 80, 190, 47, 54, 202, 190, 95, 230, 9, 63, 246, 128, 14, 191, 129, 115, 136, 62, 220, 210, 178, 61, 97, 235, 205, 189, 184, 48, 3, 190, 219, 173, 142, 62, 68, 59, 20, 62, 113, 193, 12, 191, 9, 203, 6, 62, 165, 33, 19, 189, 191, 245, 17, 61, 212, 213, 192, 190, 152, 113, 200, 60, 208, 132, 6, 191, 116, 37, 166, 190, 227, 178, 151, 190, 234, 79, 187, 62, 16, 110, 30, 189, 86, 48, 127, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 161, 19, 191, 7, 194, 231, 62, 216, 156, 209, 61, 254, 189, 61, 62, 254, 255, 17, 63, 252, 132, 222, 188, 232, 187, 159, 62, 82, 34, 28, 190, 155, 143, 201, 190, 206, 163, 187, 190, 129, 204, 9, 191, 242, 233, 143, 61, 65, 28, 241, 62, 64, 116, 40, 190, 205, 41, 149, 60, 201, 18, 8, 191, 227, 114, 12, 191, 244, 43, 185, 190, 148, 106, 161, 190, 182, 121, 98, 62, 92, 248, 163, 189, 12, 122, 11, 190, 108, 26, 8, 63, 194, 192, 18, 62, 139, 47, 247, 190, 220, 166, 163, 190, 216, 157, 164, 190, 87, 106, 15, 191, 177, 121, 145, 188, 144, 196, 64, 62, 67, 64, 40, 62, 69, 143, 8, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 108, 231, 189, 246, 63, 181, 61, 21, 58, 17, 61, 203, 197, 43, 62, 78, 135, 172, 61, 125, 242, 242, 189, 166, 244, 141, 189, 188, 3, 219, 187, 104, 111, 195, 61, 255, 1, 4, 62, 222, 97, 164, 61, 99, 206, 24, 190, 70, 73, 177, 61, 253, 226, 14, 61, 118, 33, 228, 61, 171, 169, 203, 61, 224, 41, 246, 61, 11, 27, 85, 189, 199, 254, 189, 189, 185, 62, 9, 189, 134, 247, 105, 61, 55, 124, 7, 62, 214, 57, 246, 189, 3, 11, 217, 189, 166, 75, 238, 60, 3, 8, 141, 189, 104, 21, 30, 62, 63, 7, 181, 189, 31, 135, 112, 60, 204, 208, 46, 189, 18, 12, 52, 61, 169, 140, 19, 190, 15, 229, 231, 188, 120, 54, 244, 61, 141, 44, 27, 190, 207, 69, 233, 61, 189, 100, 4, 190, 77, 212, 63, 189, 89, 116, 241, 189, 37, 243, 35, 62, 44, 84, 222, 60, 89, 153, 92, 61, 17, 148, 165, 61, 80, 139, 246, 61, 48, 44, 226, 189, 171, 210, 117, 61, 123, 80, 27, 188, 9, 106, 3, 62, 113, 208, 238, 189, 167, 30, 190, 189, 248, 209, 176, 59, 204, 136, 46, 190, 254, 216, 33, 190, 86, 151, 48, 190, 250, 53, 203, 60, 246, 82, 154, 61, 16, 166, 31, 61, 20, 88, 87, 189, 120, 97, 174, 189, 200, 48, 248, 61, 180, 179, 13, 189, 34, 104, 29, 62, 9, 9, 238, 61, 8, 198, 131, 61, 43, 151, 176, 61, 87, 83, 145, 188, 169, 132, 224, 189, 6, 70, 27, 190, 223, 29, 215, 189, 33, 255, 147, 189, 32, 254, 172, 189, 193, 181, 30, 190, 223, 127, 121, 61, 143, 92, 1, 190, 114, 139, 9, 190, 213, 254, 193, 189, 214, 158, 155, 60, 141, 198, 146, 60, 183, 201, 199, 189, 151, 179, 16, 190, 6, 37, 49, 62, 143, 141, 8, 190, 173, 100, 165, 189, 18, 105, 125, 188, 43, 228, 186, 189, 238, 84, 137, 188, 125, 70, 223, 60, 238, 109, 0, 190, 123, 223, 25, 189, 210, 135, 130, 61, 46, 194, 126, 189, 223, 142, 233, 61, 136, 165, 187, 61, 53, 30, 24, 190, 135, 163, 139, 61, 74, 49, 174, 61, 169, 125, 195, 60, 189, 251, 21, 62, 67, 100, 210, 189, 224, 166, 42, 62, 162, 197, 150, 61, 200, 74, 245, 189, 88, 229, 7, 62, 12, 60, 200, 189, 124, 80, 169, 61, 102, 240, 172, 60, 4, 121, 35, 190, 251, 37, 203, 60, 9, 131, 89, 189, 231, 211, 16, 190, 251, 4, 6, 190, 173, 139, 11, 62, 29, 177, 98, 61, 245, 55, 171, 188, 109, 172, 29, 62, 222, 183, 207, 189, 62, 188, 43, 190, 160, 177, 50, 62, 6, 75, 37, 190, 213, 201, 29, 190, 6, 54, 131, 188, 17, 118, 18, 190, 114, 215, 144, 189, 167, 238, 14, 187, 199, 53, 233, 61, 113, 19, 131, 61, 232, 68, 47, 62, 11, 201, 31, 190, 173, 43, 200, 186, 238, 143, 17, 62, 33, 4, 41, 62, 161, 52, 197, 61, 69, 21, 38, 62, 60, 12, 33, 61, 192, 195, 0, 61, 247, 32, 23, 62, 174, 216, 39, 189, 117, 99, 49, 59, 181, 95, 238, 189, 6, 177, 107, 188, 68, 25, 93, 61, 6, 35, 36, 60, 129, 214, 169, 61, 195, 237, 152, 61, 132, 45, 201, 189, 96, 223, 245, 61, 80, 5, 13, 61, 27, 117, 246, 189, 69, 28, 236, 61, 234, 225, 51, 190, 239, 255, 199, 61, 139, 199, 228, 61, 149, 48, 246, 61, 221, 249, 38, 62, 242, 171, 29, 190, 188, 78, 7, 62, 174, 65, 21, 62, 251, 99, 46, 188, 242, 140, 166, 59, 162, 202, 9, 190, 206, 236, 33, 190, 245, 17, 233, 188, 122, 223, 46, 190, 120, 218, 111, 189, 229, 102, 223, 61, 123, 110, 46, 190, 172, 217, 235, 61, 169, 56, 40, 62, 89, 196, 7, 62, 143, 251, 187, 189, 132, 131, 9, 190, 233, 234, 117, 61, 63, 69, 207, 60, 29, 248, 165, 189, 230, 48, 21, 190, 87, 33, 211, 60, 47, 205, 114, 61, 246, 173, 6, 189, 234, 186, 186, 188, 29, 54, 25, 62, 185, 64, 29, 190, 32, 158, 131, 189, 2, 27, 167, 188, 208, 138, 219, 61, 183, 101, 206, 188, 224, 171, 214, 61, 218, 148, 62, 189, 234, 202, 87, 61, 221, 189, 33, 62, 239, 52, 28, 190, 197, 77, 9, 62, 176, 91, 243, 60, 20, 167, 28, 62, 76, 199, 231, 61, 71, 88, 139, 188, 170, 49, 15, 62, 51, 107, 43, 190, 247, 199, 137, 61, 76, 137, 47, 61, 248, 21, 174, 61, 230, 91, 136, 189, 247, 159, 33, 189, 50, 98, 154, 61, 63, 210, 49, 62, 252, 108, 82, 60, 37, 115, 38, 190, 196, 18, 67, 189, 63, 16, 201, 59, 103, 157, 225, 189, 64, 15, 40, 61, 96, 14, 41, 62, 90, 146, 61, 61, 217, 5, 63, 61, 221, 67, 23, 188, 72, 192, 33, 61, 13, 47, 182, 61, 111, 14, 160, 189, 40, 174, 112, 189, 175, 192, 208, 189, 253, 178, 47, 190, 211, 83, 45, 62, 85, 9, 23, 62, 239, 74, 17, 190, 143, 224, 129, 60, 27, 106, 71, 60, 156, 238, 19, 190, 148, 192, 46, 190, 129, 96, 30, 62, 84, 56, 5, 62, 180, 249, 51, 190, 39, 165, 87, 188, 157, 11, 229, 61, 74, 217, 48, 190, 226, 150, 31, 61, 85, 26, 109, 61, 102, 162, 166, 189, 241, 230, 86, 61, 82, 90, 34, 61, 107, 235, 169, 61, 71, 116, 27, 61, 9, 25, 120, 61, 69, 159, 7, 62, 85, 244, 193, 59, 150, 180, 7, 62, 183, 2, 43, 189, 121, 14, 206, 61, 106, 129, 10, 189, 240, 112, 41, 190, 245, 127, 182, 186, 177, 47, 137, 189, 115, 194, 227, 189, 3, 203, 241, 61, 123, 152, 18, 62, 117, 167, 31, 62, 51, 85, 247, 189, 77, 148, 47, 59, 167, 167, 86, 188, 18, 48, 137, 61, 10, 166, 252, 61, 45, 150, 9, 62, 119, 180, 154, 61, 90, 173, 143, 188, 141, 217, 184, 61, 19, 87, 245, 189, 184, 229, 188, 61, 43, 223, 12, 190, 132, 254, 202, 61, 242, 175, 128, 189, 248, 97, 97, 188, 92, 155, 182, 60, 58, 219, 253, 189, 32, 24, 22, 190, 149, 30, 78, 61, 162, 12, 132, 61, 170, 153, 223, 60, 156, 32, 42, 190, 1, 173, 73, 61, 122, 48, 13, 190, 124, 56, 40, 190, 23, 213, 248, 189, 10, 208, 144, 61, 246, 98, 242, 61, 8, 58, 132, 61, 156, 118, 140, 61, 184, 120, 9, 62, 186, 45, 56, 189, 198, 59, 38, 62, 171, 191, 7, 61, 245, 83, 7, 62, 225, 229, 1, 62, 130, 217, 203, 61, 114, 104, 233, 189, 247, 235, 162, 61, 46, 196, 234, 189, 43, 87, 220, 189, 216, 165, 37, 190, 218, 35, 9, 61, 61, 55, 9, 190, 85, 10, 63, 58, 18, 68, 1, 190, 223, 49, 177, 60, 57, 23, 177, 61, 0, 18, 31, 190, 146, 189, 32, 62, 24, 37, 4, 61, 136, 65, 255, 189, 16, 199, 13, 61, 98, 98, 32, 62, 251, 30, 33, 190, 116, 197, 176, 61, 179, 209, 83, 61, 158, 201, 239, 61, 76, 15, 81, 189, 244, 56, 222, 189, 43, 72, 76, 189, 126, 166, 80, 61, 240, 234, 32, 190, 66, 173, 230, 189, 37, 108, 9, 190, 142, 185, 19, 62, 172, 132, 44, 62, 142, 152, 85, 189, 146, 68, 138, 60, 255, 114, 0, 62, 91, 45, 17, 60, 161, 145, 162, 61, 173, 163, 47, 62, 150, 41, 185, 189, 159, 199, 236, 60, 246, 111, 96, 59, 136, 58, 146, 189, 116, 7, 146, 189, 167, 95, 27, 62, 57, 202, 162, 188, 70, 158, 250, 61, 152, 91, 183, 61, 33, 192, 41, 60, 92, 179, 44, 190, 74, 203, 230, 189, 183, 61, 20, 189, 83, 108, 37, 190, 240, 198, 43, 190, 215, 94, 33, 190, 216, 189, 243, 189, 184, 108, 4, 62, 149, 27, 24, 190, 164, 184, 239, 189, 88, 165, 228, 189, 224, 207, 172, 189, 39, 98, 177, 189, 216, 103, 0, 190, 11, 28, 151, 186, 216, 75, 35, 190, 138, 107, 189, 61, 207, 51, 185, 189, 11, 58, 96, 61, 254, 53, 240, 61, 172, 118, 230, 189, 229, 177, 27, 190, 241, 196, 76, 61, 192, 120, 48, 190, 55, 169, 10, 190, 215, 160, 1, 189, 74, 124, 31, 190, 215, 246, 117, 61, 194, 54, 12, 190, 8, 158, 130, 189, 135, 13, 107, 61, 136, 166, 1, 188, 52, 170, 124, 189, 107, 56, 9, 190, 172, 41, 153, 189, 88, 54, 96, 189, 108, 4, 109, 189, 223, 16, 162, 61, 101, 156, 137, 189, 83, 224, 119, 189, 249, 95, 142, 61, 217, 170, 180, 189, 184, 241, 23, 62, 146, 218, 188, 189, 252, 186, 16, 62, 51, 112, 86, 189, 252, 58, 196, 61, 71, 43, 112, 189, 3, 123, 0, 190, 198, 97, 45, 190, 93, 40, 153, 60, 238, 128, 174, 189, 78, 94, 49, 62, 163, 186, 119, 59, 228, 155, 221, 189, 221, 191, 16, 61, 80, 191, 190, 188, 232, 10, 34, 61, 254, 85, 4, 190, 168, 48, 38, 190, 103, 254, 223, 188, 205, 186, 134, 61, 106, 226, 211, 61, 45, 62, 129, 61, 165, 28, 188, 188, 134, 163, 18, 62, 51, 191, 32, 62, 149, 84, 12, 62, 188, 213, 20, 190, 235, 34, 15, 190, 99, 172, 85, 61, 146, 105, 86, 189, 12, 21, 27, 190, 29, 86, 22, 190, 0, 203, 14, 189, 225, 160, 164, 189, 105, 183, 210, 189, 81, 165, 196, 188, 63, 55, 40, 189, 171, 142, 127, 189, 111, 14, 151, 60, 205, 100, 29, 190, 207, 75, 199, 61, 187, 107, 188, 187, 39, 74, 251, 189, 248, 174, 107, 61, 181, 118, 214, 61, 86, 44, 137, 60, 51, 131, 141, 58, 171, 132, 234, 61, 232, 100, 36, 190, 228, 182, 212, 61, 186, 209, 32, 62, 16, 232, 182, 189, 83, 117, 33, 62, 248, 170, 21, 62, 2, 140, 181, 60, 28, 195, 52, 62, 100, 7, 31, 190, 33, 63, 5, 62, 120, 95, 191, 189, 192, 77, 212, 188, 49, 22, 1, 60, 245, 234, 38, 190, 228, 36, 72, 61, 160, 205, 112, 189, 61, 66, 206, 61, 228, 187, 17, 190, 210, 215, 30, 190, 116, 84, 3, 187, 195, 163, 189, 189, 229, 194, 64, 189, 93, 252, 88, 189, 239, 144, 213, 189, 171, 231, 154, 189, 105, 62, 19, 62, 76, 8, 42, 190, 15, 99, 35, 190, 198, 16, 151, 60, 217, 9, 10, 190, 203, 170, 137, 189, 32, 113, 44, 190, 123, 3, 223, 189, 179, 122, 51, 62, 164, 19, 20, 59, 99, 31, 20, 62, 53, 115, 237, 61, 14, 172, 17, 190, 229, 203, 28, 62, 206, 215, 163, 186, 117, 251, 24, 190, 77, 150, 207, 60, 11, 230, 13, 190, 133, 65, 13, 190, 232, 255, 32, 62, 199, 214, 46, 61, 191, 243, 84, 61, 67, 232, 45, 62, 153, 149, 242, 61, 72, 21, 164, 189, 220, 192, 4, 62, 112, 6, 106, 189, 142, 25, 145, 188, 239, 162, 191, 189, 96, 215, 137, 189, 131, 99, 46, 62, 154, 103, 227, 189, 85, 76, 27, 190, 217, 144, 31, 190, 173, 233, 31, 62, 7, 111, 241, 189, 253, 215, 187, 188, 168, 123, 95, 188, 13, 249, 25, 190, 67, 118, 244, 60, 11, 229, 20, 190, 127, 77, 120, 189, 253, 249, 178, 61, 112, 193, 240, 61, 24, 27, 235, 61, 132, 25, 134, 61, 21, 87, 239, 189, 91, 61, 42, 190, 55, 42, 213, 188, 7, 11, 15, 60, 115, 136, 57, 60, 160, 254, 227, 61, 152, 204, 49, 61, 227, 213, 51, 190, 248, 148, 37, 62, 188, 39, 96, 189, 9, 118, 52, 62, 99, 176, 22, 190, 11, 165, 41, 190, 167, 229, 35, 190, 190, 82, 68, 61, 164, 201, 48, 62, 124, 123, 150, 60, 50, 165, 169, 61, 248, 9, 188, 189, 26, 49, 227, 61, 23, 136, 48, 62, 88, 7, 110, 61, 241, 167, 47, 190, 132, 160, 46, 62, 162, 1, 182, 189, 154, 153, 245, 61, 229, 47, 165, 189, 79, 30, 187, 189, 152, 9, 231, 189, 250, 213, 179, 61, 191, 32, 202, 61, 167, 52, 207, 189, 166, 17, 25, 62, 92, 90, 138, 188, 77, 210, 90, 61, 31, 231, 16, 190, 22, 131, 81, 61, 54, 183, 32, 190, 100, 196, 178, 60, 33, 53, 5, 62, 156, 75, 224, 188, 17, 197, 29, 62, 24, 142, 131, 61, 5, 72, 15, 190, 124, 228, 23, 62, 17, 59, 246, 61, 152, 175, 238, 61, 98, 92, 205, 61, 219, 91, 176, 189, 181, 15, 27, 62, 128, 243, 33, 62, 166, 4, 213, 61, 253, 29, 51, 62, 121, 231, 140, 61, 59, 67, 12, 190, 175, 28, 32, 190, 198, 218, 242, 60, 94, 84, 189, 61, 223, 212, 0, 190, 43, 77, 163, 61, 107, 249, 48, 62, 100, 188, 205, 189, 214, 245, 38, 190, 63, 121, 112, 61, 174, 239, 31, 189, 23, 231, 136, 189, 48, 17, 194, 61, 73, 247, 12, 190, 90, 215, 6, 189, 245, 224, 171, 60, 133, 37, 15, 62, 212, 186, 234, 61, 248, 87, 37, 62, 88, 186, 156, 189, 71, 29, 7, 61, 38, 217, 32, 61, 227, 26, 164, 189, 237, 84, 77, 189, 109, 152, 32, 60, 234, 156, 107, 188, 9, 211, 9, 62, 66, 52, 181, 61, 237, 201, 103, 60, 211, 70, 44, 190, 12, 94, 3, 62, 171, 192, 51, 62, 158, 173, 220, 189, 136, 30, 214, 189, 221, 216, 151, 188, 254, 14, 95, 189, 206, 115, 163, 61, 59, 195, 44, 187, 25, 133, 228, 189, 7, 7, 228, 189, 52, 165, 39, 61, 116, 201, 246, 189, 206, 216, 232, 189, 11, 48, 180, 61, 12, 115, 33, 62, 239, 245, 212, 57, 162, 61, 224, 61, 12, 25, 128, 187, 118, 1, 111, 61, 254, 178, 83, 189, 103, 103, 175, 60, 110, 254, 86, 189, 203, 218, 127, 189, 32, 137, 16, 190, 236, 130, 137, 61, 246, 39, 72, 189, 74, 62, 52, 62, 168, 22, 44, 62, 143, 229, 12, 189, 229, 255, 158, 189, 18, 187, 3, 62, 178, 30, 4, 62, 177, 243, 27, 62, 76, 235, 151, 189, 212, 69, 208, 189, 89, 120, 250, 189, 67, 115, 134, 61, 243, 56, 140, 189, 233, 236, 152, 61, 190, 100, 0, 190, 101, 145, 31, 190, 215, 227, 247, 61, 246, 171, 214, 188, 78, 153, 203, 61, 197, 153, 79, 189, 205, 229, 6, 190, 31, 216, 10, 190, 47, 102, 18, 62, 137, 147, 231, 61, 164, 63, 187, 61, 150, 210, 246, 61, 20, 63, 88, 61, 252, 63, 207, 189, 235, 33, 15, 62, 213, 237, 237, 189, 145, 238, 205, 61, 59, 229, 113, 59, 167, 43, 39, 62, 254, 230, 128, 60, 160, 52, 55, 59, 194, 183, 30, 189, 105, 219, 137, 188, 157, 183, 39, 60, 49, 133, 8, 190, 124, 49, 209, 61, 223, 134, 207, 189, 198, 162, 56, 188, 11, 185, 208, 61, 127, 67, 150, 189, 145, 164, 72, 61, 101, 248, 8, 190, 131, 59, 16, 62, 18, 139, 191, 189, 229, 2, 28, 188, 246, 218, 246, 61, 40, 253, 2, 189, 38, 185, 167, 189, 79, 146, 54, 189, 71, 49, 32, 61, 191, 186, 107, 61, 107, 61, 118, 189, 22, 212, 135, 61, 185, 208, 146, 189, 106, 119, 130, 61, 79, 12, 244, 61, 201, 82, 182, 189, 156, 187, 218, 187, 86, 144, 232, 189, 45, 189, 130, 189, 17, 243, 244, 61, 127, 25, 192, 189, 170, 174, 171, 60, 97, 187, 184, 61, 24, 240, 213, 188, 0, 204, 38, 190, 42, 39, 179, 189, 81, 113, 27, 190, 79, 184, 85, 189, 68, 235, 13, 190, 87, 206, 243, 189, 194, 69, 60, 189, 51, 173, 155, 188, 234, 18, 8, 190, 3, 53, 143, 59, 15, 3, 178, 189, 186, 68, 163, 60, 69, 31, 28, 62, 26, 40, 222, 189, 201, 26, 12, 62, 73, 98, 28, 61, 79, 159, 97, 188, 68, 38, 5, 62, 25, 79, 164, 61, 103, 108, 52, 189, 2, 247, 106, 60, 130, 196, 188, 189, 154, 205, 16, 62, 238, 188, 164, 61, 52, 204, 111, 189, 109, 185, 129, 188, 166, 37, 161, 61, 84, 155, 46, 62, 95, 158, 65, 189, 60, 197, 16, 189, 220, 93, 128, 189, 28, 34, 18, 62, 199, 230, 16, 188, 144, 185, 25, 190, 180, 177, 17, 190, 120, 8, 20, 62, 107, 125, 121, 61, 146, 171, 41, 190, 173, 154, 3, 62, 22, 173, 49, 62, 127, 4, 215, 61, 173, 21, 11, 189, 95, 18, 137, 189, 211, 203, 248, 61, 159, 168, 104, 188, 161, 148, 138, 188, 115, 139, 117, 189, 63, 37, 185, 61, 179, 30, 44, 190, 84, 125, 2, 190, 223, 23, 184, 61, 186, 223, 16, 61, 115, 35, 9, 62, 73, 31, 20, 62, 31, 60, 224, 61, 158, 8, 87, 189, 209, 222, 2, 62, 49, 162, 25, 62, 1, 218, 109, 61, 35, 31, 38, 62, 214, 11, 52, 62, 9, 173, 235, 61, 251, 238, 22, 62, 78, 47, 130, 189, 202, 207, 145, 61, 145, 99, 44, 190, 130, 0, 91, 61, 137, 117, 221, 189, 195, 241, 24, 190, 235, 218, 118, 189, 123, 203, 137, 60, 72, 46, 13, 190, 161, 129, 192, 188, 46, 116, 10, 189, 51, 30, 63, 61, 84, 129, 224, 60, 116, 81, 158, 189, 109, 180, 130, 61, 121, 53, 62, 189, 65, 64, 43, 62, 19, 192, 1, 60, 123, 15, 40, 62, 199, 81, 5, 189, 210, 86, 202, 189, 74, 142, 10, 62, 196, 188, 149, 61, 140, 110, 0, 190, 19, 9, 158, 189, 50, 25, 186, 189, 235, 255, 0, 62, 13, 222, 23, 190, 3, 55, 122, 189, 171, 117, 181, 188, 204, 75, 48, 59, 45, 161, 47, 189, 188, 138, 233, 189, 124, 12, 40, 61, 37, 113, 247, 61, 216, 127, 43, 190, 227, 189, 33, 62, 162, 8, 27, 190, 221, 165, 109, 189, 109, 29, 10, 189, 176, 134, 188, 60, 28, 147, 26, 186, 61, 98, 50, 188, 54, 21, 27, 62, 23, 75, 33, 62, 120, 59, 177, 189, 181, 198, 93, 61, 235, 189, 29, 189, 220, 223, 201, 61, 200, 65, 116, 189, 197, 183, 145, 61, 64, 197, 250, 61, 217, 49, 154, 189, 250, 38, 28, 189, 41, 118, 197, 189, 183, 10, 17, 190, 21, 111, 224, 189, 144, 6, 43, 190, 193, 71, 31, 62, 75, 154, 219, 61, 82, 29, 240, 61, 64, 65, 49, 61, 217, 17, 134, 61, 198, 68, 22, 188, 20, 218, 120, 58, 59, 126, 55, 61, 69, 107, 22, 190, 223, 87, 187, 60, 61, 122, 66, 61, 54, 122, 195, 60, 30, 182, 243, 61, 124, 179, 191, 188, 215, 5, 25, 190, 100, 100, 136, 61, 27, 133, 44, 189, 89, 85, 168, 189, 213, 218, 208, 189, 14, 59, 80, 61, 80, 153, 228, 189, 4, 51, 86, 189, 57, 98, 130, 60, 173, 142, 15, 190, 72, 74, 14, 190, 246, 146, 28, 62, 185, 165, 237, 189, 115, 93, 128, 189, 233, 163, 31, 62, 208, 249, 180, 59, 27, 97, 36, 190, 239, 210, 199, 187, 78, 190, 31, 61, 18, 185, 142, 188, 31, 220, 149, 189, 223, 150, 219, 189, 40, 1, 255, 187, 215, 7, 169, 60, 196, 95, 62, 189, 129, 245, 32, 190, 131, 24, 170, 189, 128, 22, 142, 189, 167, 128, 0, 189, 26, 213, 7, 190, 49, 160, 160, 61, 95, 74, 10, 62, 79, 146, 29, 189, 238, 33, 185, 61, 222, 107, 162, 61, 50, 17, 176, 60, 0, 229, 216, 189, 218, 125, 42, 190, 119, 60, 167, 61, 201, 157, 129, 189, 70, 88, 15, 62, 210, 245, 42, 190, 60, 45, 44, 62, 23, 105, 152, 186, 191, 45, 200, 189, 220, 10, 42, 190, 55, 247, 241, 60, 189, 51, 22, 61, 172, 175, 156, 61, 25, 220, 175, 188, 203, 244, 51, 190, 145, 56, 85, 189, 93, 114, 16, 62, 178, 174, 26, 62, 48, 5, 81, 189, 234, 159, 91, 61, 169, 192, 228, 188, 148, 69, 27, 190, 192, 92, 156, 189, 141, 70, 24, 190, 19, 7, 50, 189, 227, 189, 94, 189, 148, 118, 12, 189, 149, 119, 136, 189, 70, 23, 9, 62, 14, 224, 145, 61, 69, 35, 210, 185, 127, 153, 154, 188, 10, 5, 55, 189, 182, 103, 3, 189, 201, 141, 179, 188, 32, 128, 192, 60, 111, 7, 179, 60, 93, 102, 34, 189, 231, 91, 158, 61, 154, 111, 168, 189, 59, 89, 239, 61, 134, 37, 242, 189, 10, 151, 12, 62, 89, 108, 2, 190, 133, 199, 241, 61, 146, 69, 255, 60, 25, 224, 229, 61, 212, 46, 161, 189, 159, 51, 228, 189, 88, 73, 6, 62, 120, 39, 134, 59, 90, 87, 9, 190, 107, 102, 129, 61, 126, 155, 22, 190, 220, 236, 231, 61, 252, 175, 1, 62, 60, 48, 50, 190, 208, 80, 231, 188, 165, 217, 218, 189, 25, 248, 67, 61, 249, 128, 9, 62, 3, 180, 5, 62, 190, 91, 199, 188, 137, 22, 79, 61, 77, 47, 25, 62, 14, 247, 238, 61, 248, 11, 171, 189, 189, 194, 195, 189, 87, 225, 228, 60, 213, 70, 118, 61, 4, 32, 173, 61, 64, 225, 48, 190, 129, 145, 241, 189, 168, 240, 137, 189, 235, 183, 136, 61, 254, 163, 36, 62, 70, 83, 84, 61, 193, 51, 149, 61, 166, 19, 161, 61, 78, 82, 88, 189, 10, 69, 22, 62, 206, 94, 81, 61, 231, 59, 1, 189, 106, 93, 68, 61, 166, 171, 32, 188, 13, 111, 128, 189, 168, 120, 96, 189, 116, 98, 118, 189, 84, 226, 49, 190, 164, 150, 138, 60, 131, 220, 155, 61, 139, 143, 149, 189, 134, 176, 36, 62, 8, 136, 23, 62, 143, 90, 26, 190, 60, 198, 17, 62, 128, 225, 227, 61, 222, 123, 46, 62, 95, 193, 19, 61, 127, 28, 130, 189, 139, 118, 6, 189, 163, 34, 34, 62, 116, 54, 100, 189, 173, 154, 19, 62, 108, 13, 190, 61, 148, 210, 24, 62, 110, 79, 47, 190, 6, 36, 41, 190, 126, 213, 162, 188, 244, 251, 2, 61, 58, 252, 127, 61, 58, 59, 247, 188, 101, 134, 246, 61, 142, 220, 176, 188, 5, 201, 224, 189, 108, 6, 7, 62, 248, 180, 216, 61, 108, 197, 39, 61, 5, 165, 45, 61, 193, 243, 206, 61, 86, 74, 222, 189, 146, 144, 204, 61, 70, 79, 200, 61, 7, 185, 49, 190, 209, 136, 39, 190, 111, 136, 48, 190, 37, 114, 164, 189, 53, 67, 154, 188, 36, 126, 118, 189, 105, 96, 183, 61, 120, 169, 40, 62, 255, 204, 114, 189, 254, 83, 19, 61, 93, 207, 73, 189, 229, 200, 114, 189, 102, 118, 208, 61, 29, 3, 181, 189, 98, 169, 22, 62, 52, 203, 143, 61, 232, 153, 228, 189, 113, 9, 146, 189, 99, 52, 180, 61, 146, 181, 104, 189, 180, 175, 160, 61, 148, 238, 152, 189, 37, 92, 24, 190, 215, 35, 95, 188, 171, 171, 27, 190, 75, 71, 196, 61, 16, 216, 173, 188, 213, 29, 145, 61, 195, 104, 12, 62, 178, 157, 179, 61, 214, 234, 127, 61, 152, 124, 55, 61, 57, 49, 49, 190, 3, 173, 109, 61, 175, 233, 23, 62, 224, 121, 204, 61, 118, 138, 158, 61, 150, 176, 133, 187, 231, 200, 152, 60, 68, 99, 18, 190, 53, 109, 151, 61, 205, 237, 82, 189, 4, 89, 30, 57, 183, 61, 129, 61, 120, 86, 27, 189, 120, 125, 130, 61, 179, 12, 37, 189, 13, 214, 40, 62, 59, 0, 242, 188, 59, 201, 222, 189, 223, 62, 161, 189, 240, 214, 166, 61, 31, 8, 11, 190, 141, 8, 217, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 79, 213, 189, 49, 101, 202, 61, 194, 46, 234, 189, 181, 174, 209, 61, 62, 228, 181, 61, 31, 230, 197, 61, 76, 47, 133, 61, 183, 151, 242, 189, 177, 255, 1, 62, 159, 38, 43, 62, 89, 140, 72, 189, 36, 118, 141, 61, 78, 81, 127, 189, 27, 137, 202, 189, 147, 82, 100, 61, 117, 34, 188, 184, 233, 29, 6, 62, 125, 1, 21, 62, 242, 161, 104, 188, 190, 14, 31, 60, 141, 243, 18, 190, 229, 243, 237, 189, 15, 52, 139, 189, 103, 204, 16, 189, 46, 12, 159, 60, 124, 27, 33, 62, 138, 208, 48, 190, 33, 76, 230, 189, 58, 157, 209, 60, 73, 67, 49, 58, 185, 155, 174, 61, 76, 38, 147, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {210, 194, 208, 61, 20, 43, 232, 189, 32, 84, 130, 57, 63, 170, 132, 189, 46, 120, 5, 190, 69, 39, 235, 188, 151, 249, 26, 62, 141, 38, 30, 62, 0, 207, 75, 189, 214, 100, 3, 190, 18, 153, 197, 61, 72, 28, 29, 190, 58, 64, 26, 62, 71, 44, 128, 189, 165, 10, 18, 189, 64, 239, 201, 60, 143, 103, 140, 189, 25, 224, 170, 187, 252, 117, 26, 61, 166, 94, 1, 190, 8, 160, 174, 61, 80, 254, 238, 61, 1, 205, 24, 62, 52, 96, 51, 190, 151, 15, 146, 189, 52, 132, 223, 189, 161, 148, 126, 189, 84, 79, 12, 62, 173, 191, 3, 190, 34, 9, 145, 189, 185, 247, 48, 62, 109, 12, 20, 62, 21, 187, 108, 189, 192, 100, 35, 190, 138, 87, 184, 189, 215, 104, 55, 61, 49, 110, 11, 190, 60, 225, 137, 61, 90, 124, 21, 62, 206, 105, 13, 190, 175, 79, 74, 61, 56, 228, 168, 187, 228, 92, 178, 187, 227, 222, 176, 61, 33, 226, 35, 62, 98, 107, 76, 187, 234, 136, 201, 189, 58, 176, 151, 60, 62, 132, 168, 61, 145, 95, 38, 190, 226, 131, 22, 62, 108, 25, 16, 62, 227, 116, 33, 190, 115, 15, 242, 189, 22, 26, 13, 62, 217, 39, 18, 62, 110, 4, 187, 59, 63, 197, 224, 61, 185, 54, 206, 61, 203, 190, 33, 190, 110, 186, 190, 61, 151, 10, 31, 61, 131, 184, 142, 189, 252, 149, 160, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {246, 82, 221, 61, 213, 128, 31, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {97, 63, 127, 61, 242, 242, 53, 64, 69, 188, 32, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {122, 162, 229, 189, 181, 110, 81, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0072/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}