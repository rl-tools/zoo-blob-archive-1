// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 210, 241, 61, 114, 125, 201, 190, 17, 97, 175, 188, 148, 0, 84, 63, 53, 226, 65, 190, 156, 105, 157, 61, 73, 49, 27, 191, 39, 110, 154, 63, 170, 54, 151, 189, 204, 154, 133, 190, 118, 235, 56, 63, 95, 184, 221, 61, 46, 12, 225, 61, 219, 216, 172, 63, 8, 198, 133, 61, 250, 107, 130, 191, 204, 139, 112, 63, 202, 201, 217, 189, 145, 144, 26, 191, 171, 176, 44, 63, 230, 220, 202, 61, 193, 225, 239, 188, 180, 211, 155, 63, 163, 112, 166, 62, 183, 249, 103, 63, 225, 20, 13, 63, 203, 227, 206, 62, 42, 73, 80, 190, 154, 172, 42, 63, 152, 221, 34, 63, 81, 75, 236, 62, 141, 86, 51, 61, 39, 244, 66, 63, 224, 137, 183, 189, 109, 176, 117, 63, 180, 96, 4, 63, 81, 24, 40, 190, 27, 79, 231, 63, 247, 43, 239, 62, 246, 55, 136, 191, 207, 49, 81, 191, 248, 90, 174, 189, 97, 217, 16, 63, 73, 221, 43, 191, 120, 86, 102, 190, 238, 80, 254, 62, 75, 81, 16, 62, 88, 143, 244, 190, 204, 92, 9, 190, 124, 160, 127, 190, 69, 8, 16, 62, 42, 87, 15, 191, 36, 154, 50, 191, 195, 2, 69, 191, 72, 196, 234, 62, 216, 72, 107, 63, 215, 35, 254, 62, 55, 64, 169, 62, 233, 182, 211, 190, 124, 148, 149, 190, 254, 245, 31, 191, 81, 186, 136, 191, 233, 38, 254, 188, 25, 62, 54, 63, 139, 252, 173, 63, 249, 15, 189, 62, 96, 139, 76, 63, 64, 132, 56, 191, 80, 7, 142, 62, 149, 47, 131, 188, 40, 98, 163, 63, 54, 123, 1, 63, 68, 137, 190, 188, 241, 94, 29, 188, 151, 185, 213, 190, 132, 225, 210, 190, 202, 190, 128, 190, 236, 8, 21, 191, 165, 241, 104, 62, 178, 196, 33, 61, 111, 229, 237, 187, 18, 194, 140, 189, 180, 165, 82, 62, 235, 163, 84, 61, 129, 160, 162, 191, 14, 157, 190, 189, 161, 189, 130, 188, 121, 213, 123, 62, 185, 6, 248, 190, 158, 42, 245, 62, 172, 66, 21, 191, 19, 8, 206, 191, 146, 106, 195, 190, 229, 165, 11, 63, 209, 80, 115, 190, 187, 142, 162, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 161, 19, 191, 131, 226, 196, 62, 27, 210, 158, 62, 236, 193, 30, 63, 24, 36, 74, 63, 131, 228, 35, 63, 5, 197, 33, 63, 5, 137, 99, 190, 139, 168, 112, 191, 218, 63, 189, 190, 251, 226, 168, 190, 56, 155, 150, 190, 98, 113, 39, 190, 252, 215, 221, 61, 72, 198, 182, 190, 60, 83, 145, 190, 56, 208, 129, 191, 156, 239, 167, 189, 192, 6, 178, 61, 72, 63, 4, 62, 204, 10, 157, 62, 232, 96, 63, 62, 4, 182, 15, 63, 150, 87, 7, 190, 178, 245, 134, 190, 128, 153, 159, 190, 24, 196, 205, 190, 224, 130, 35, 191, 53, 39, 23, 189, 194, 122, 179, 61, 220, 203, 51, 63, 203, 113, 210, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 108, 231, 189, 226, 5, 55, 63, 45, 93, 148, 189, 68, 100, 36, 62, 140, 231, 27, 190, 149, 217, 159, 190, 25, 49, 66, 191, 214, 137, 197, 190, 25, 59, 32, 191, 53, 96, 96, 60, 226, 172, 91, 62, 64, 44, 178, 190, 94, 192, 52, 191, 117, 194, 9, 190, 188, 55, 78, 62, 27, 167, 167, 62, 2, 78, 62, 62, 197, 204, 46, 61, 110, 65, 211, 190, 186, 174, 45, 62, 239, 247, 79, 61, 33, 28, 162, 190, 28, 34, 82, 62, 93, 174, 184, 190, 163, 87, 120, 62, 49, 92, 244, 61, 108, 206, 9, 62, 40, 106, 177, 189, 87, 102, 112, 190, 165, 231, 28, 62, 108, 51, 85, 188, 240, 239, 143, 62, 15, 229, 231, 188, 170, 41, 210, 60, 95, 27, 231, 188, 161, 145, 192, 60, 28, 62, 63, 190, 235, 200, 196, 189, 128, 25, 84, 190, 13, 25, 37, 62, 65, 253, 64, 62, 74, 142, 159, 61, 120, 19, 110, 62, 42, 229, 63, 62, 183, 129, 141, 60, 37, 197, 125, 191, 12, 177, 133, 190, 196, 207, 151, 190, 73, 136, 231, 61, 38, 157, 237, 61, 252, 1, 36, 62, 31, 29, 253, 61, 44, 142, 208, 190, 132, 61, 109, 189, 245, 40, 150, 61, 132, 119, 7, 62, 68, 214, 141, 62, 4, 97, 193, 61, 136, 162, 155, 189, 26, 161, 229, 61, 93, 127, 64, 191, 235, 115, 137, 62, 118, 252, 138, 191, 82, 182, 227, 61, 43, 151, 176, 61, 87, 83, 145, 188, 169, 132, 224, 189, 6, 70, 27, 190, 223, 29, 215, 189, 33, 255, 147, 189, 32, 254, 172, 189, 193, 181, 30, 190, 223, 127, 121, 61, 143, 92, 1, 190, 114, 139, 9, 190, 213, 254, 193, 189, 214, 158, 155, 60, 141, 198, 146, 60, 183, 201, 199, 189, 151, 179, 16, 190, 6, 37, 49, 62, 143, 141, 8, 190, 173, 100, 165, 189, 18, 105, 125, 188, 43, 228, 186, 189, 238, 84, 137, 188, 125, 70, 223, 60, 238, 109, 0, 190, 123, 223, 25, 189, 210, 135, 130, 61, 46, 194, 126, 189, 223, 142, 233, 61, 136, 165, 187, 61, 53, 30, 24, 190, 135, 163, 139, 61, 74, 49, 174, 61, 169, 125, 195, 60, 222, 222, 248, 62, 167, 74, 205, 60, 145, 36, 194, 62, 130, 230, 39, 62, 77, 7, 164, 61, 50, 119, 208, 62, 234, 138, 177, 191, 96, 204, 24, 63, 45, 209, 82, 191, 145, 64, 42, 188, 160, 255, 55, 191, 214, 36, 136, 191, 140, 43, 11, 62, 4, 155, 153, 191, 108, 104, 94, 190, 235, 6, 6, 61, 13, 207, 60, 62, 114, 9, 185, 62, 11, 188, 123, 190, 170, 188, 229, 61, 197, 90, 247, 62, 98, 73, 163, 190, 41, 147, 89, 191, 167, 96, 187, 190, 27, 208, 91, 189, 61, 193, 41, 189, 189, 172, 80, 187, 160, 155, 19, 63, 63, 177, 36, 62, 36, 205, 138, 62, 199, 109, 157, 190, 173, 43, 200, 186, 111, 19, 141, 62, 45, 63, 199, 62, 35, 251, 151, 62, 48, 29, 234, 62, 19, 33, 12, 60, 105, 173, 239, 61, 29, 239, 171, 189, 29, 22, 1, 190, 3, 124, 224, 190, 23, 240, 15, 190, 178, 137, 113, 190, 133, 85, 37, 62, 215, 230, 59, 190, 116, 67, 157, 190, 45, 111, 84, 190, 104, 78, 53, 191, 80, 238, 164, 62, 52, 165, 83, 62, 71, 199, 253, 189, 178, 159, 217, 190, 100, 4, 80, 62, 238, 19, 191, 189, 165, 211, 36, 188, 43, 139, 76, 190, 50, 251, 152, 62, 226, 60, 22, 190, 59, 252, 236, 61, 143, 177, 73, 190, 115, 221, 192, 190, 70, 201, 206, 190, 202, 95, 163, 190, 206, 236, 33, 190, 61, 52, 16, 189, 254, 160, 79, 190, 209, 69, 239, 189, 188, 98, 130, 61, 81, 51, 77, 190, 51, 2, 149, 61, 89, 172, 7, 62, 34, 235, 7, 62, 53, 78, 201, 189, 253, 12, 11, 190, 117, 204, 212, 60, 135, 243, 170, 58, 200, 19, 10, 190, 224, 137, 70, 190, 169, 26, 61, 59, 49, 116, 95, 61, 140, 91, 194, 189, 187, 173, 223, 188, 110, 105, 150, 61, 41, 138, 83, 190, 113, 179, 137, 189, 234, 126, 131, 189, 138, 81, 178, 61, 55, 69, 208, 188, 212, 211, 18, 61, 218, 148, 62, 189, 234, 202, 87, 61, 60, 47, 206, 61, 171, 32, 69, 190, 222, 42, 167, 61, 60, 122, 242, 188, 20, 167, 28, 62, 225, 7, 97, 61, 103, 177, 84, 189, 76, 172, 13, 61, 40, 177, 145, 190, 101, 252, 195, 188, 163, 218, 194, 189, 91, 60, 173, 189, 135, 118, 128, 61, 189, 14, 75, 190, 190, 242, 208, 61, 119, 116, 110, 60, 89, 192, 11, 60, 235, 183, 95, 190, 212, 100, 136, 190, 137, 138, 121, 188, 116, 118, 98, 189, 107, 201, 235, 60, 112, 75, 109, 62, 99, 21, 5, 61, 20, 4, 38, 190, 205, 2, 160, 61, 250, 94, 43, 190, 11, 33, 41, 189, 105, 164, 194, 189, 165, 7, 77, 189, 175, 192, 208, 189, 174, 125, 30, 190, 216, 229, 16, 190, 241, 61, 80, 189, 242, 27, 56, 190, 84, 218, 220, 189, 27, 106, 71, 60, 174, 77, 38, 61, 61, 61, 162, 190, 248, 109, 73, 62, 98, 146, 187, 62, 136, 4, 171, 190, 26, 43, 145, 189, 17, 127, 193, 62, 45, 83, 68, 191, 118, 39, 148, 62, 106, 39, 33, 190, 172, 1, 7, 62, 233, 65, 126, 61, 245, 24, 133, 61, 226, 37, 157, 62, 133, 112, 76, 62, 246, 167, 229, 190, 85, 241, 199, 60, 196, 71, 108, 190, 191, 198, 68, 62, 186, 60, 141, 60, 235, 76, 7, 190, 225, 111, 115, 62, 163, 9, 159, 59, 80, 149, 155, 62, 73, 192, 58, 190, 50, 106, 4, 190, 3, 203, 241, 61, 100, 95, 212, 61, 30, 5, 208, 62, 127, 43, 154, 189, 30, 169, 159, 62, 167, 167, 86, 188, 95, 81, 191, 62, 203, 138, 244, 61, 120, 36, 98, 62, 57, 28, 81, 189, 249, 31, 168, 186, 231, 180, 135, 62, 182, 127, 181, 191, 224, 3, 93, 62, 239, 81, 193, 191, 148, 248, 7, 62, 157, 160, 157, 191, 107, 55, 118, 191, 56, 30, 80, 62, 12, 240, 12, 191, 69, 200, 225, 190, 253, 117, 8, 60, 57, 108, 194, 62, 227, 171, 20, 62, 231, 234, 151, 61, 102, 177, 133, 62, 62, 158, 202, 62, 46, 14, 76, 191, 4, 210, 78, 191, 109, 118, 146, 190, 130, 38, 199, 62, 41, 176, 209, 61, 236, 146, 137, 61, 230, 123, 151, 62, 93, 28, 82, 191, 131, 25, 192, 62, 188, 51, 163, 191, 245, 83, 7, 62, 51, 60, 155, 62, 249, 37, 197, 62, 171, 173, 253, 188, 106, 177, 44, 62, 250, 231, 13, 61, 208, 164, 127, 188, 161, 45, 29, 190, 229, 33, 78, 62, 60, 84, 51, 189, 224, 129, 239, 61, 196, 166, 77, 189, 229, 71, 189, 188, 111, 102, 196, 191, 231, 5, 75, 191, 120, 217, 228, 62, 106, 74, 238, 62, 15, 158, 163, 61, 173, 46, 89, 61, 247, 235, 213, 62, 61, 136, 58, 191, 245, 90, 161, 61, 109, 190, 177, 62, 32, 156, 56, 62, 3, 140, 175, 62, 135, 144, 29, 188, 219, 165, 21, 189, 33, 50, 18, 61, 134, 17, 86, 190, 251, 8, 34, 62, 125, 37, 17, 192, 172, 5, 175, 62, 172, 132, 44, 62, 87, 143, 141, 191, 160, 160, 85, 189, 234, 9, 143, 62, 219, 246, 44, 190, 231, 20, 133, 62, 240, 156, 183, 62, 148, 253, 119, 190, 70, 226, 196, 190, 125, 235, 77, 190, 183, 121, 225, 190, 77, 236, 160, 190, 129, 120, 162, 62, 25, 108, 184, 62, 223, 142, 74, 190, 132, 132, 240, 190, 159, 167, 56, 189, 213, 10, 176, 190, 199, 77, 180, 191, 181, 60, 190, 190, 168, 199, 38, 62, 111, 66, 175, 191, 171, 26, 103, 62, 105, 76, 231, 190, 64, 51, 229, 60, 35, 71, 85, 189, 164, 184, 239, 189, 230, 32, 204, 189, 8, 249, 182, 62, 140, 219, 130, 62, 21, 69, 156, 62, 114, 78, 50, 189, 216, 75, 35, 190, 68, 27, 64, 190, 29, 17, 60, 191, 239, 249, 145, 191, 254, 184, 145, 191, 129, 194, 142, 191, 117, 24, 97, 190, 236, 22, 155, 62, 34, 87, 83, 191, 83, 186, 57, 62, 221, 138, 159, 190, 203, 174, 3, 61, 39, 191, 1, 191, 100, 22, 77, 62, 71, 157, 110, 62, 55, 189, 134, 188, 223, 44, 136, 190, 89, 196, 63, 190, 144, 146, 154, 191, 23, 45, 52, 190, 201, 165, 201, 62, 211, 154, 36, 192, 69, 4, 144, 62, 209, 91, 31, 188, 248, 128, 229, 189, 133, 43, 73, 190, 149, 167, 180, 189, 184, 241, 23, 62, 217, 1, 89, 191, 13, 133, 213, 62, 79, 86, 141, 62, 64, 222, 82, 61, 71, 43, 112, 189, 205, 145, 253, 189, 227, 199, 59, 190, 186, 125, 139, 59, 227, 234, 188, 189, 150, 172, 51, 62, 24, 110, 166, 59, 228, 155, 221, 189, 221, 191, 16, 61, 80, 191, 190, 188, 232, 10, 34, 61, 254, 85, 4, 190, 168, 48, 38, 190, 216, 115, 71, 189, 214, 157, 100, 61, 232, 110, 180, 61, 45, 62, 129, 61, 188, 127, 30, 189, 134, 163, 18, 62, 19, 80, 17, 62, 59, 41, 241, 61, 188, 213, 20, 190, 32, 246, 15, 190, 99, 172, 85, 61, 246, 217, 150, 189, 83, 39, 43, 190, 29, 86, 22, 190, 0, 203, 14, 189, 133, 117, 168, 189, 105, 183, 210, 189, 89, 246, 240, 188, 63, 55, 40, 189, 171, 142, 127, 189, 137, 233, 137, 62, 123, 166, 53, 189, 254, 73, 238, 61, 176, 88, 84, 189, 130, 145, 206, 189, 245, 44, 193, 62, 14, 181, 147, 191, 128, 111, 185, 62, 157, 131, 187, 191, 243, 58, 48, 63, 54, 233, 82, 191, 71, 55, 144, 191, 242, 231, 195, 62, 24, 234, 176, 189, 97, 43, 79, 188, 171, 246, 17, 62, 181, 219, 94, 62, 76, 169, 75, 63, 198, 152, 151, 188, 177, 157, 241, 62, 45, 145, 28, 63, 164, 195, 12, 190, 69, 115, 75, 191, 20, 211, 251, 190, 217, 183, 46, 62, 118, 224, 22, 189, 61, 66, 206, 61, 92, 72, 36, 190, 10, 103, 147, 190, 75, 60, 150, 62, 119, 120, 155, 190, 229, 194, 64, 189, 136, 147, 175, 61, 156, 140, 15, 191, 104, 137, 40, 59, 87, 221, 222, 62, 123, 47, 240, 190, 97, 216, 202, 190, 213, 146, 143, 62, 64, 223, 59, 191, 174, 179, 126, 62, 214, 223, 239, 190, 198, 57, 209, 61, 100, 248, 164, 59, 228, 247, 50, 190, 152, 144, 209, 62, 128, 88, 20, 63, 104, 252, 53, 191, 114, 93, 185, 190, 138, 235, 193, 190, 174, 125, 172, 187, 91, 29, 147, 189, 16, 26, 7, 191, 173, 195, 170, 187, 248, 175, 199, 62, 231, 223, 3, 62, 10, 72, 163, 190, 253, 216, 20, 62, 153, 149, 242, 61, 185, 57, 137, 189, 74, 66, 137, 62, 237, 51, 197, 190, 187, 82, 24, 62, 239, 162, 191, 189, 96, 215, 137, 189, 131, 99, 46, 62, 154, 103, 227, 189, 85, 76, 27, 190, 217, 144, 31, 190, 173, 233, 31, 62, 7, 111, 241, 189, 253, 215, 187, 188, 168, 123, 95, 188, 13, 249, 25, 190, 67, 118, 244, 60, 11, 229, 20, 190, 127, 77, 120, 189, 253, 249, 178, 61, 112, 193, 240, 61, 24, 27, 235, 61, 132, 25, 134, 61, 21, 87, 239, 189, 91, 61, 42, 190, 55, 42, 213, 188, 7, 11, 15, 60, 115, 136, 57, 60, 160, 254, 227, 61, 152, 204, 49, 61, 227, 213, 51, 190, 248, 148, 37, 62, 188, 39, 96, 189, 9, 118, 52, 62, 99, 176, 22, 190, 11, 165, 41, 190, 167, 229, 35, 190, 190, 82, 68, 61, 253, 27, 90, 62, 28, 227, 167, 62, 147, 20, 221, 62, 47, 89, 76, 62, 183, 125, 194, 62, 197, 26, 241, 62, 77, 224, 16, 188, 224, 10, 91, 189, 26, 3, 128, 62, 181, 84, 122, 189, 213, 123, 197, 61, 173, 245, 7, 190, 20, 147, 66, 191, 192, 202, 227, 191, 145, 40, 7, 62, 230, 213, 137, 61, 248, 120, 49, 190, 24, 211, 10, 62, 227, 42, 133, 61, 28, 61, 168, 190, 80, 229, 32, 190, 36, 123, 156, 190, 119, 74, 86, 190, 242, 84, 119, 187, 202, 153, 204, 61, 182, 150, 206, 188, 17, 197, 29, 62, 10, 253, 74, 62, 193, 105, 164, 190, 40, 216, 75, 191, 136, 57, 44, 188, 152, 175, 238, 61, 97, 173, 161, 62, 77, 112, 210, 61, 27, 139, 0, 63, 163, 51, 21, 63, 98, 174, 151, 60, 81, 225, 117, 62, 250, 166, 255, 61, 248, 215, 205, 190, 149, 146, 4, 190, 20, 134, 135, 61, 202, 142, 79, 62, 91, 165, 42, 62, 114, 142, 232, 188, 6, 217, 106, 62, 62, 37, 53, 190, 235, 15, 231, 190, 128, 200, 135, 60, 136, 71, 142, 187, 173, 76, 147, 61, 183, 40, 24, 62, 192, 50, 168, 189, 205, 164, 2, 62, 61, 224, 0, 62, 25, 81, 36, 62, 69, 15, 125, 61, 60, 94, 35, 62, 81, 93, 169, 189, 142, 74, 165, 190, 36, 94, 41, 62, 69, 158, 236, 189, 96, 159, 97, 62, 109, 152, 32, 60, 83, 61, 131, 190, 172, 188, 12, 63, 99, 218, 214, 62, 140, 16, 174, 62, 45, 84, 58, 62, 117, 99, 207, 62, 131, 37, 100, 190, 220, 4, 234, 190, 197, 141, 72, 191, 22, 83, 163, 190, 250, 117, 20, 191, 182, 21, 6, 63, 61, 40, 227, 190, 100, 101, 215, 191, 33, 201, 211, 190, 199, 66, 108, 62, 125, 124, 147, 190, 94, 78, 194, 188, 46, 155, 154, 190, 91, 172, 238, 190, 20, 113, 103, 62, 27, 100, 186, 190, 192, 194, 99, 190, 249, 107, 80, 190, 213, 83, 3, 62, 17, 90, 149, 60, 110, 89, 83, 189, 25, 61, 166, 190, 16, 103, 84, 191, 120, 178, 154, 190, 48, 33, 122, 190, 74, 62, 52, 62, 29, 207, 184, 62, 142, 143, 249, 188, 140, 2, 207, 61, 47, 32, 188, 62, 219, 2, 38, 62, 146, 137, 228, 62, 44, 189, 246, 190, 123, 93, 154, 62, 77, 43, 207, 190, 253, 19, 215, 61, 76, 176, 143, 190, 165, 77, 170, 190, 149, 215, 167, 189, 149, 212, 79, 191, 49, 103, 244, 189, 231, 177, 154, 189, 131, 47, 51, 62, 62, 175, 172, 61, 206, 139, 186, 190, 110, 134, 15, 191, 31, 176, 198, 62, 184, 154, 253, 188, 20, 220, 185, 189, 7, 111, 235, 189, 150, 228, 179, 60, 43, 193, 173, 189, 249, 115, 7, 62, 198, 109, 179, 60, 32, 238, 128, 189, 126, 78, 88, 190, 98, 108, 99, 187, 254, 230, 128, 60, 160, 52, 55, 59, 194, 183, 30, 189, 105, 219, 137, 188, 157, 183, 39, 60, 49, 133, 8, 190, 124, 49, 209, 61, 223, 134, 207, 189, 198, 162, 56, 188, 11, 185, 208, 61, 127, 67, 150, 189, 145, 164, 72, 61, 101, 248, 8, 190, 152, 158, 2, 62, 90, 61, 197, 189, 225, 161, 31, 188, 246, 218, 246, 61, 173, 39, 56, 189, 38, 185, 167, 189, 177, 124, 87, 189, 96, 180, 234, 60, 191, 186, 107, 61, 229, 29, 130, 189, 22, 212, 135, 61, 120, 63, 149, 189, 250, 92, 75, 61, 79, 12, 244, 61, 201, 82, 182, 189, 10, 138, 77, 188, 86, 144, 232, 189, 4, 139, 155, 189, 17, 243, 244, 61, 127, 25, 192, 189, 2, 144, 47, 189, 97, 187, 184, 61, 24, 240, 213, 188, 4, 241, 53, 190, 42, 39, 179, 189, 205, 123, 27, 190, 214, 168, 87, 189, 68, 235, 13, 190, 87, 206, 243, 189, 90, 102, 136, 189, 84, 121, 27, 189, 250, 56, 10, 190, 63, 122, 162, 188, 240, 84, 2, 190, 186, 68, 163, 60, 69, 31, 28, 62, 11, 96, 233, 189, 18, 201, 251, 61, 71, 155, 76, 55, 3, 206, 64, 189, 139, 177, 213, 61, 198, 73, 244, 59, 213, 252, 160, 189, 2, 247, 106, 60, 130, 196, 188, 189, 154, 205, 16, 62, 238, 188, 164, 61, 167, 107, 118, 189, 58, 176, 158, 189, 125, 115, 200, 60, 48, 102, 216, 61, 95, 158, 65, 189, 55, 20, 220, 62, 137, 251, 196, 190, 175, 157, 217, 61, 7, 117, 18, 190, 48, 84, 200, 190, 181, 45, 1, 191, 138, 43, 14, 190, 133, 148, 205, 61, 169, 159, 212, 190, 170, 80, 147, 62, 190, 16, 15, 61, 109, 184, 109, 62, 42, 130, 195, 61, 158, 20, 90, 189, 188, 97, 213, 62, 242, 101, 43, 190, 197, 183, 13, 62, 52, 229, 57, 61, 11, 38, 54, 62, 80, 190, 164, 188, 247, 138, 234, 189, 29, 63, 124, 62, 102, 123, 92, 188, 75, 119, 249, 62, 126, 34, 144, 62, 86, 153, 166, 61, 38, 217, 79, 189, 177, 26, 65, 62, 75, 26, 230, 61, 219, 89, 83, 62, 235, 11, 199, 62, 214, 11, 52, 62, 18, 36, 162, 61, 133, 217, 146, 61, 160, 59, 10, 191, 211, 176, 5, 190, 186, 124, 220, 190, 86, 151, 229, 60, 155, 172, 56, 190, 56, 253, 157, 62, 96, 22, 96, 189, 189, 254, 138, 62, 38, 94, 129, 189, 99, 80, 64, 188, 120, 204, 23, 191, 186, 131, 102, 61, 53, 184, 20, 62, 220, 37, 252, 61, 247, 217, 254, 61, 81, 239, 131, 62, 215, 164, 39, 62, 141, 230, 100, 190, 180, 215, 1, 63, 233, 236, 38, 60, 144, 163, 121, 189, 41, 168, 129, 62, 188, 228, 215, 59, 216, 18, 234, 189, 19, 9, 158, 189, 240, 49, 99, 191, 215, 43, 83, 189, 221, 184, 144, 190, 134, 0, 59, 190, 171, 117, 181, 188, 220, 191, 36, 61, 184, 122, 215, 62, 73, 236, 33, 60, 112, 41, 219, 61, 80, 186, 209, 62, 165, 159, 74, 189, 178, 106, 22, 62, 12, 216, 237, 60, 73, 43, 114, 61, 127, 252, 85, 61, 43, 61, 215, 61, 243, 226, 129, 61, 44, 158, 10, 191, 234, 226, 151, 190, 242, 181, 27, 62, 136, 253, 63, 62, 237, 116, 3, 61, 134, 210, 10, 60, 152, 203, 101, 62, 63, 144, 46, 191, 200, 89, 240, 61, 65, 72, 145, 62, 73, 117, 125, 189, 154, 146, 71, 60, 245, 186, 56, 189, 142, 159, 2, 190, 83, 167, 226, 189, 239, 212, 28, 61, 52, 84, 162, 62, 250, 156, 162, 191, 72, 236, 138, 62, 64, 65, 49, 61, 6, 78, 173, 60, 58, 174, 213, 189, 173, 51, 2, 191, 145, 181, 190, 190, 134, 183, 158, 190, 15, 175, 5, 190, 240, 209, 97, 62, 25, 120, 129, 62, 70, 107, 162, 62, 40, 166, 230, 61, 25, 22, 148, 61, 110, 56, 66, 62, 172, 227, 177, 190, 233, 200, 188, 62, 25, 161, 14, 189, 118, 245, 140, 62, 245, 194, 19, 60, 88, 227, 98, 188, 175, 227, 204, 189, 44, 108, 166, 190, 74, 249, 31, 190, 45, 171, 165, 62, 119, 141, 120, 61, 176, 25, 109, 62, 180, 153, 168, 62, 36, 117, 181, 59, 208, 49, 38, 190, 149, 197, 13, 191, 12, 110, 140, 62, 173, 54, 31, 189, 4, 213, 103, 60, 223, 150, 219, 189, 192, 67, 38, 188, 215, 7, 169, 60, 30, 41, 84, 189, 180, 255, 33, 190, 131, 24, 170, 189, 97, 13, 143, 189, 160, 188, 6, 189, 42, 158, 9, 190, 144, 140, 156, 61, 129, 55, 7, 62, 115, 247, 39, 189, 96, 103, 180, 61, 82, 222, 103, 61, 153, 203, 137, 60, 100, 26, 246, 189, 94, 137, 42, 190, 139, 118, 96, 61, 59, 170, 134, 189, 88, 225, 233, 61, 21, 165, 60, 190, 235, 79, 41, 62, 167, 130, 185, 187, 177, 248, 206, 189, 137, 160, 45, 190, 53, 109, 238, 58, 189, 51, 22, 61, 172, 175, 156, 61, 162, 202, 2, 189, 147, 206, 53, 190, 61, 66, 138, 189, 59, 32, 11, 62, 178, 174, 26, 62, 216, 74, 153, 189, 148, 149, 65, 188, 254, 162, 196, 189, 166, 139, 78, 190, 128, 138, 2, 190, 98, 31, 82, 190, 118, 221, 155, 189, 216, 172, 177, 189, 7, 226, 136, 189, 138, 46, 203, 189, 105, 180, 208, 61, 238, 177, 6, 61, 142, 190, 153, 188, 196, 37, 201, 188, 136, 222, 122, 189, 133, 234, 78, 189, 170, 95, 97, 189, 135, 22, 34, 188, 33, 113, 109, 188, 124, 54, 120, 189, 72, 117, 54, 61, 56, 152, 216, 189, 179, 184, 172, 61, 243, 26, 12, 190, 251, 113, 201, 61, 251, 103, 1, 190, 133, 199, 241, 61, 218, 18, 250, 188, 47, 131, 175, 61, 38, 59, 224, 189, 97, 208, 17, 190, 88, 73, 6, 62, 173, 151, 140, 188, 12, 0, 39, 190, 168, 249, 152, 60, 30, 72, 57, 190, 45, 224, 173, 61, 250, 128, 194, 61, 190, 11, 65, 190, 240, 24, 37, 189, 187, 131, 228, 189, 138, 12, 42, 61, 66, 121, 0, 62, 142, 167, 193, 61, 62, 144, 65, 189, 128, 234, 197, 60, 64, 59, 239, 61, 98, 202, 229, 61, 78, 124, 240, 189, 200, 183, 226, 189, 75, 223, 11, 188, 32, 109, 27, 61, 215, 130, 119, 61, 156, 158, 59, 190, 40, 181, 0, 190, 194, 96, 156, 189, 135, 209, 4, 61, 16, 117, 34, 62, 70, 83, 84, 61, 246, 119, 67, 61, 112, 104, 145, 61, 110, 121, 151, 189, 253, 179, 240, 61, 206, 94, 81, 61, 25, 19, 247, 58, 162, 25, 203, 62, 164, 184, 105, 62, 238, 177, 26, 61, 131, 236, 111, 62, 50, 172, 52, 62, 187, 47, 106, 190, 69, 62, 1, 61, 171, 229, 146, 61, 16, 36, 20, 189, 234, 214, 18, 62, 238, 213, 23, 62, 23, 90, 30, 191, 190, 108, 149, 191, 168, 228, 46, 62, 50, 227, 204, 62, 44, 252, 51, 61, 3, 144, 223, 189, 192, 166, 106, 61, 154, 12, 6, 190, 169, 152, 38, 190, 223, 206, 20, 62, 31, 71, 175, 61, 154, 140, 155, 62, 179, 219, 116, 190, 198, 196, 27, 190, 133, 42, 204, 188, 73, 210, 169, 62, 140, 63, 231, 61, 82, 34, 94, 191, 207, 237, 13, 62, 142, 220, 176, 188, 177, 44, 17, 61, 247, 229, 133, 62, 51, 139, 214, 62, 27, 163, 234, 62, 9, 31, 145, 61, 251, 229, 84, 62, 111, 121, 158, 61, 244, 66, 26, 190, 37, 52, 118, 62, 161, 80, 67, 190, 203, 36, 168, 188, 139, 144, 139, 61, 66, 227, 192, 189, 198, 185, 17, 62, 197, 113, 147, 61, 100, 163, 113, 190, 192, 103, 130, 188, 8, 44, 63, 189, 43, 22, 86, 61, 229, 212, 173, 188, 60, 180, 96, 188, 40, 29, 155, 62, 179, 197, 121, 61, 168, 14, 199, 62, 6, 135, 177, 188, 57, 61, 249, 189, 100, 238, 106, 189, 205, 230, 202, 60, 164, 152, 245, 61, 255, 87, 215, 61, 29, 136, 70, 62, 37, 92, 24, 190, 62, 193, 166, 190, 198, 245, 126, 62, 182, 120, 207, 62, 230, 173, 170, 62, 142, 164, 192, 62, 88, 202, 231, 62, 137, 42, 155, 62, 164, 76, 99, 189, 217, 193, 30, 62, 125, 22, 175, 190, 154, 108, 231, 61, 68, 45, 170, 62, 26, 128, 40, 190, 141, 55, 155, 191, 208, 76, 148, 61, 11, 44, 204, 190, 236, 142, 151, 191, 185, 12, 86, 61, 101, 159, 70, 191, 93, 89, 32, 191, 135, 99, 135, 61, 52, 65, 114, 190, 151, 109, 46, 62, 159, 227, 18, 63, 38, 205, 11, 62, 59, 0, 242, 188, 118, 188, 186, 189, 65, 215, 197, 188, 252, 79, 140, 61, 78, 39, 219, 190, 98, 147, 24, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {82, 110, 173, 189, 229, 111, 45, 189, 194, 46, 234, 189, 229, 91, 176, 62, 123, 35, 222, 61, 109, 235, 24, 61, 19, 21, 23, 190, 75, 11, 168, 59, 77, 83, 172, 62, 65, 205, 143, 62, 228, 7, 103, 61, 65, 81, 213, 61, 40, 195, 174, 189, 244, 165, 161, 61, 92, 232, 115, 62, 117, 34, 188, 184, 228, 108, 126, 62, 134, 203, 208, 62, 10, 154, 76, 60, 193, 150, 214, 61, 238, 169, 26, 190, 47, 1, 64, 190, 92, 102, 2, 60, 183, 211, 219, 190, 71, 232, 8, 189, 152, 37, 52, 189, 60, 196, 68, 190, 88, 17, 71, 190, 20, 89, 247, 185, 44, 76, 142, 61, 154, 230, 152, 62, 153, 111, 244, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 160, 250, 62, 246, 74, 48, 190, 32, 84, 130, 57, 215, 5, 83, 191, 200, 140, 65, 62, 181, 206, 149, 188, 218, 44, 55, 61, 88, 241, 168, 62, 28, 130, 36, 191, 166, 48, 63, 191, 231, 232, 136, 63, 109, 246, 165, 191, 179, 192, 241, 61, 175, 94, 202, 190, 165, 106, 47, 63, 64, 239, 201, 60, 161, 52, 67, 191, 18, 98, 76, 62, 177, 126, 180, 63, 161, 123, 227, 190, 92, 77, 174, 61, 72, 16, 191, 61, 44, 80, 249, 62, 82, 139, 19, 191, 193, 208, 158, 190, 202, 62, 200, 190, 229, 179, 116, 189, 95, 243, 190, 61, 112, 170, 245, 189, 158, 82, 193, 190, 25, 22, 107, 62, 39, 19, 35, 63, 51, 29, 159, 189, 154, 107, 190, 190, 138, 87, 184, 189, 160, 43, 119, 61, 64, 82, 148, 190, 27, 200, 201, 60, 189, 125, 213, 62, 170, 226, 234, 188, 135, 209, 152, 61, 26, 216, 11, 190, 44, 24, 59, 190, 32, 212, 131, 190, 189, 187, 45, 62, 202, 191, 178, 190, 180, 210, 0, 63, 58, 176, 151, 60, 43, 103, 36, 62, 125, 243, 107, 190, 12, 4, 207, 62, 181, 144, 200, 188, 73, 10, 33, 190, 146, 226, 239, 189, 220, 212, 196, 58, 142, 5, 222, 62, 2, 64, 182, 187, 41, 222, 28, 61, 138, 177, 204, 61, 125, 5, 21, 190, 254, 91, 145, 61, 230, 109, 148, 190, 77, 197, 201, 189, 118, 25, 141, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 94, 173, 62, 154, 27, 159, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {46, 91, 66, 191, 123, 106, 28, 191, 195, 249, 167, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {129, 240, 22, 192, 150, 121, 160, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0072/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}