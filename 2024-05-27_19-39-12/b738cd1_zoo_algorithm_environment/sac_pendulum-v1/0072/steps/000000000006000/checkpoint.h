// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 210, 241, 61, 114, 125, 201, 190, 17, 97, 175, 188, 130, 44, 16, 63, 207, 200, 150, 190, 238, 250, 137, 62, 215, 13, 36, 191, 1, 132, 119, 63, 9, 196, 88, 189, 86, 84, 163, 190, 1, 105, 221, 62, 217, 143, 3, 59, 249, 131, 121, 61, 45, 126, 71, 63, 220, 201, 128, 62, 1, 218, 87, 191, 22, 198, 89, 63, 236, 92, 221, 188, 20, 59, 196, 190, 247, 87, 18, 63, 216, 4, 206, 61, 154, 175, 86, 190, 70, 102, 198, 62, 200, 164, 4, 63, 29, 8, 206, 62, 205, 171, 218, 62, 18, 234, 251, 62, 70, 183, 144, 190, 212, 254, 195, 62, 146, 252, 49, 63, 70, 114, 33, 62, 67, 161, 131, 62, 248, 213, 64, 63, 105, 44, 194, 60, 117, 196, 164, 62, 33, 152, 58, 63, 198, 100, 79, 62, 167, 31, 155, 63, 207, 219, 4, 63, 203, 27, 111, 191, 152, 187, 6, 191, 51, 2, 45, 189, 10, 240, 216, 62, 202, 49, 49, 191, 148, 125, 172, 189, 194, 91, 46, 62, 230, 254, 211, 59, 69, 210, 0, 191, 73, 181, 85, 190, 90, 152, 137, 60, 233, 177, 47, 62, 178, 225, 221, 190, 99, 4, 3, 191, 201, 175, 102, 191, 136, 220, 162, 62, 241, 123, 44, 63, 170, 25, 15, 63, 126, 76, 193, 62, 214, 169, 57, 190, 15, 12, 194, 190, 195, 231, 15, 191, 48, 32, 89, 191, 121, 224, 42, 61, 199, 233, 53, 63, 43, 152, 86, 63, 97, 54, 13, 63, 31, 57, 73, 63, 147, 209, 133, 191, 34, 99, 143, 62, 86, 27, 114, 61, 124, 254, 13, 63, 152, 51, 83, 63, 157, 2, 86, 190, 188, 240, 176, 189, 18, 60, 214, 190, 11, 228, 203, 190, 250, 185, 169, 62, 217, 130, 70, 191, 165, 241, 104, 62, 178, 196, 33, 61, 111, 229, 237, 187, 18, 194, 140, 189, 180, 165, 82, 62, 235, 163, 84, 61, 28, 22, 85, 191, 211, 177, 148, 62, 6, 72, 201, 189, 48, 97, 184, 62, 13, 186, 13, 191, 215, 37, 224, 62, 234, 209, 41, 191, 95, 245, 155, 191, 53, 112, 47, 190, 213, 164, 15, 63, 76, 71, 70, 190, 18, 101, 216, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 161, 19, 191, 255, 84, 46, 63, 247, 242, 190, 62, 230, 86, 240, 62, 255, 148, 75, 63, 42, 251, 236, 62, 99, 253, 19, 63, 24, 9, 187, 190, 1, 190, 48, 191, 201, 42, 7, 191, 156, 63, 188, 190, 169, 76, 158, 190, 91, 60, 140, 62, 82, 166, 12, 62, 219, 235, 196, 189, 227, 18, 32, 190, 158, 148, 76, 191, 133, 227, 3, 61, 7, 68, 133, 189, 34, 179, 158, 62, 226, 185, 86, 61, 87, 62, 195, 61, 51, 98, 100, 62, 106, 173, 82, 189, 147, 3, 121, 190, 54, 132, 137, 190, 24, 196, 205, 190, 224, 130, 35, 191, 152, 115, 132, 61, 62, 132, 211, 189, 171, 70, 244, 62, 201, 95, 141, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 108, 231, 189, 19, 224, 12, 63, 184, 237, 117, 189, 190, 125, 245, 61, 194, 98, 51, 190, 102, 15, 137, 190, 43, 109, 162, 190, 71, 45, 156, 190, 113, 103, 193, 61, 138, 74, 166, 189, 47, 162, 37, 61, 146, 104, 211, 190, 164, 169, 128, 61, 45, 147, 48, 187, 177, 192, 123, 62, 64, 65, 145, 62, 192, 75, 132, 62, 98, 34, 153, 61, 92, 10, 24, 190, 203, 239, 96, 62, 119, 136, 83, 61, 194, 127, 136, 61, 149, 2, 111, 61, 92, 248, 188, 190, 100, 18, 111, 62, 89, 43, 150, 61, 108, 206, 9, 62, 40, 106, 177, 189, 93, 5, 49, 190, 17, 219, 163, 189, 8, 129, 144, 61, 113, 83, 3, 62, 15, 229, 231, 188, 84, 212, 8, 60, 179, 63, 249, 189, 221, 35, 39, 61, 155, 240, 98, 190, 237, 141, 14, 188, 249, 2, 52, 190, 84, 42, 37, 62, 81, 66, 65, 61, 146, 154, 215, 61, 181, 67, 77, 62, 135, 38, 81, 62, 51, 198, 75, 60, 83, 210, 22, 189, 62, 242, 245, 189, 47, 255, 33, 190, 12, 137, 12, 60, 33, 0, 244, 60, 185, 174, 198, 61, 114, 218, 78, 190, 254, 163, 78, 190, 114, 185, 239, 189, 13, 233, 48, 60, 24, 202, 252, 61, 231, 84, 205, 61, 208, 165, 152, 189, 136, 162, 155, 189, 26, 161, 229, 61, 9, 95, 84, 190, 70, 247, 75, 62, 159, 208, 90, 60, 222, 120, 145, 61, 43, 151, 176, 61, 87, 83, 145, 188, 169, 132, 224, 189, 6, 70, 27, 190, 223, 29, 215, 189, 33, 255, 147, 189, 32, 254, 172, 189, 193, 181, 30, 190, 223, 127, 121, 61, 143, 92, 1, 190, 114, 139, 9, 190, 213, 254, 193, 189, 214, 158, 155, 60, 141, 198, 146, 60, 183, 201, 199, 189, 151, 179, 16, 190, 6, 37, 49, 62, 143, 141, 8, 190, 173, 100, 165, 189, 18, 105, 125, 188, 43, 228, 186, 189, 238, 84, 137, 188, 125, 70, 223, 60, 238, 109, 0, 190, 123, 223, 25, 189, 210, 135, 130, 61, 46, 194, 126, 189, 223, 142, 233, 61, 136, 165, 187, 61, 53, 30, 24, 190, 135, 163, 139, 61, 74, 49, 174, 61, 169, 125, 195, 60, 22, 98, 18, 63, 46, 56, 198, 187, 46, 53, 235, 62, 35, 110, 144, 62, 7, 177, 29, 60, 242, 41, 195, 62, 87, 136, 81, 191, 87, 124, 32, 62, 115, 103, 87, 191, 185, 176, 57, 189, 208, 94, 14, 191, 54, 194, 142, 190, 201, 67, 169, 189, 105, 10, 102, 191, 198, 154, 206, 189, 235, 6, 6, 61, 83, 225, 77, 62, 63, 125, 237, 62, 59, 71, 100, 190, 48, 105, 156, 189, 134, 153, 20, 63, 20, 91, 168, 190, 57, 206, 0, 191, 222, 110, 170, 190, 204, 71, 34, 189, 61, 193, 41, 189, 189, 172, 80, 187, 66, 97, 188, 62, 84, 200, 139, 59, 247, 158, 138, 62, 43, 105, 173, 190, 173, 43, 200, 186, 98, 59, 208, 62, 255, 96, 190, 61, 9, 73, 212, 61, 87, 52, 16, 62, 74, 232, 212, 189, 50, 249, 88, 189, 91, 4, 203, 189, 199, 89, 228, 189, 54, 141, 143, 190, 176, 9, 110, 189, 25, 32, 239, 189, 60, 122, 45, 62, 247, 187, 75, 61, 212, 224, 187, 60, 86, 74, 86, 190, 203, 251, 0, 190, 187, 98, 172, 62, 178, 197, 47, 62, 79, 229, 199, 186, 36, 98, 91, 62, 133, 28, 174, 60, 166, 192, 80, 59, 187, 85, 84, 61, 72, 109, 95, 190, 62, 159, 136, 62, 226, 60, 22, 190, 59, 252, 236, 61, 21, 113, 232, 60, 191, 89, 39, 190, 251, 245, 238, 188, 156, 219, 82, 190, 206, 236, 33, 190, 61, 52, 16, 189, 254, 160, 79, 190, 209, 69, 239, 189, 188, 98, 130, 61, 81, 51, 77, 190, 51, 2, 149, 61, 89, 172, 7, 62, 34, 235, 7, 62, 53, 78, 201, 189, 253, 12, 11, 190, 117, 204, 212, 60, 135, 243, 170, 58, 200, 19, 10, 190, 224, 137, 70, 190, 169, 26, 61, 59, 49, 116, 95, 61, 140, 91, 194, 189, 187, 173, 223, 188, 110, 105, 150, 61, 41, 138, 83, 190, 113, 179, 137, 189, 234, 126, 131, 189, 138, 81, 178, 61, 55, 69, 208, 188, 212, 211, 18, 61, 218, 148, 62, 189, 234, 202, 87, 61, 60, 47, 206, 61, 171, 32, 69, 190, 222, 42, 167, 61, 60, 122, 242, 188, 20, 167, 28, 62, 87, 202, 129, 61, 8, 61, 87, 189, 114, 158, 78, 61, 23, 92, 137, 190, 46, 235, 165, 188, 57, 216, 165, 189, 42, 24, 157, 189, 206, 16, 151, 61, 174, 211, 67, 190, 154, 169, 228, 61, 203, 203, 198, 60, 97, 124, 179, 60, 235, 183, 95, 190, 223, 30, 136, 190, 137, 138, 121, 188, 255, 134, 124, 189, 107, 201, 235, 60, 221, 251, 121, 62, 14, 54, 5, 61, 20, 4, 38, 190, 91, 178, 187, 61, 163, 234, 27, 190, 37, 186, 247, 188, 105, 164, 194, 189, 165, 7, 77, 189, 175, 192, 208, 189, 174, 125, 30, 190, 133, 14, 19, 190, 116, 174, 46, 189, 242, 27, 56, 190, 75, 207, 194, 189, 27, 106, 71, 60, 56, 229, 5, 189, 64, 12, 121, 190, 208, 178, 181, 61, 240, 87, 59, 62, 151, 251, 110, 190, 150, 197, 21, 61, 134, 41, 184, 62, 95, 248, 29, 191, 35, 35, 157, 62, 140, 135, 71, 190, 180, 154, 26, 62, 235, 90, 26, 61, 172, 28, 236, 61, 28, 2, 180, 62, 99, 92, 30, 62, 56, 34, 137, 190, 164, 228, 144, 61, 163, 27, 124, 190, 3, 42, 109, 62, 237, 76, 63, 61, 23, 161, 39, 190, 201, 184, 105, 62, 179, 148, 171, 186, 114, 137, 161, 62, 73, 220, 74, 190, 50, 106, 4, 190, 3, 203, 241, 61, 206, 102, 137, 62, 52, 160, 212, 62, 8, 251, 220, 188, 231, 242, 150, 62, 167, 167, 86, 188, 210, 59, 253, 62, 235, 126, 176, 61, 124, 68, 158, 62, 178, 97, 2, 62, 153, 225, 31, 188, 238, 132, 64, 62, 102, 235, 186, 191, 231, 3, 93, 62, 16, 85, 186, 191, 41, 207, 198, 61, 178, 47, 158, 191, 44, 19, 254, 190, 36, 39, 36, 62, 149, 230, 34, 191, 109, 12, 206, 190, 253, 117, 8, 60, 170, 199, 202, 62, 123, 56, 110, 62, 125, 157, 90, 61, 21, 127, 64, 62, 171, 226, 32, 62, 143, 118, 64, 191, 178, 185, 104, 191, 80, 134, 142, 190, 90, 175, 223, 62, 41, 176, 209, 61, 236, 146, 137, 61, 4, 20, 158, 62, 0, 99, 26, 191, 122, 168, 161, 62, 27, 137, 23, 191, 245, 83, 7, 62, 22, 189, 243, 61, 66, 124, 142, 62, 116, 3, 158, 61, 148, 218, 96, 62, 219, 118, 86, 61, 128, 250, 70, 61, 124, 221, 207, 189, 70, 124, 199, 60, 74, 203, 161, 189, 171, 128, 205, 60, 213, 55, 178, 189, 233, 248, 33, 62, 220, 187, 87, 191, 233, 154, 12, 191, 153, 79, 162, 62, 165, 246, 9, 62, 79, 169, 210, 189, 91, 130, 103, 61, 163, 8, 147, 62, 85, 238, 34, 191, 167, 64, 223, 61, 25, 231, 8, 189, 184, 216, 55, 62, 196, 188, 95, 61, 21, 203, 144, 190, 219, 165, 21, 189, 33, 50, 18, 61, 61, 99, 75, 190, 78, 254, 7, 190, 248, 127, 136, 191, 249, 5, 225, 61, 172, 132, 44, 62, 141, 25, 152, 191, 203, 34, 114, 62, 86, 108, 162, 62, 13, 95, 160, 61, 189, 0, 180, 62, 180, 96, 181, 62, 19, 7, 55, 187, 70, 226, 196, 190, 58, 170, 154, 61, 189, 176, 59, 191, 164, 75, 4, 190, 92, 132, 156, 62, 205, 137, 239, 61, 60, 108, 32, 61, 159, 226, 104, 190, 159, 167, 56, 189, 56, 200, 178, 190, 100, 208, 135, 191, 166, 218, 103, 190, 15, 32, 123, 190, 91, 125, 138, 191, 201, 36, 78, 190, 160, 91, 125, 190, 204, 128, 185, 61, 216, 150, 243, 186, 164, 184, 239, 189, 230, 32, 204, 189, 102, 109, 152, 62, 172, 178, 39, 190, 102, 210, 229, 60, 66, 210, 185, 190, 216, 75, 35, 190, 226, 201, 30, 190, 13, 216, 151, 190, 106, 186, 220, 190, 3, 253, 232, 189, 154, 5, 162, 190, 118, 239, 143, 190, 195, 101, 4, 62, 171, 46, 176, 190, 13, 11, 116, 189, 151, 148, 10, 190, 176, 222, 9, 189, 127, 210, 61, 190, 175, 92, 21, 62, 205, 170, 184, 61, 39, 142, 3, 190, 0, 92, 67, 189, 209, 118, 27, 190, 248, 148, 187, 190, 43, 5, 154, 190, 148, 192, 110, 62, 94, 169, 150, 190, 59, 221, 17, 62, 218, 30, 160, 188, 123, 166, 131, 60, 108, 170, 114, 189, 149, 167, 180, 189, 184, 241, 23, 62, 228, 79, 153, 190, 200, 91, 148, 62, 200, 86, 13, 62, 151, 215, 133, 61, 71, 43, 112, 189, 81, 143, 253, 189, 72, 195, 59, 190, 80, 44, 140, 59, 18, 230, 188, 189, 122, 171, 51, 62, 195, 87, 166, 59, 228, 155, 221, 189, 221, 191, 16, 61, 80, 191, 190, 188, 232, 10, 34, 61, 254, 85, 4, 190, 168, 48, 38, 190, 104, 64, 71, 189, 173, 193, 100, 61, 104, 133, 180, 61, 45, 62, 129, 61, 115, 74, 30, 189, 134, 163, 18, 62, 237, 91, 17, 62, 242, 64, 241, 61, 188, 213, 20, 190, 151, 242, 15, 190, 99, 172, 85, 61, 182, 192, 150, 189, 179, 27, 43, 190, 29, 86, 22, 190, 0, 203, 14, 189, 255, 114, 168, 189, 105, 183, 210, 189, 126, 148, 240, 188, 63, 55, 40, 189, 171, 142, 127, 189, 124, 124, 195, 62, 223, 181, 175, 189, 183, 141, 112, 62, 43, 0, 251, 61, 244, 84, 58, 189, 183, 227, 71, 62, 30, 185, 73, 191, 30, 140, 206, 62, 148, 170, 168, 191, 171, 125, 184, 62, 222, 136, 68, 191, 37, 235, 177, 190, 104, 31, 210, 62, 104, 40, 81, 190, 225, 49, 167, 60, 171, 246, 17, 62, 83, 53, 76, 62, 92, 183, 46, 63, 114, 252, 93, 189, 229, 103, 214, 62, 165, 50, 2, 63, 77, 8, 104, 190, 153, 6, 41, 191, 188, 228, 253, 190, 15, 38, 77, 62, 118, 224, 22, 189, 61, 66, 206, 61, 83, 51, 177, 188, 168, 137, 199, 190, 55, 21, 83, 62, 175, 211, 164, 190, 229, 194, 64, 189, 130, 14, 14, 61, 255, 189, 129, 190, 58, 39, 67, 190, 8, 145, 113, 62, 95, 26, 105, 190, 239, 83, 200, 189, 51, 252, 179, 62, 1, 86, 244, 190, 110, 55, 125, 62, 53, 170, 226, 190, 159, 89, 222, 61, 17, 87, 61, 62, 33, 108, 169, 189, 74, 48, 188, 62, 212, 187, 185, 62, 171, 18, 242, 190, 94, 223, 17, 188, 4, 67, 135, 190, 229, 211, 133, 189, 103, 35, 144, 188, 197, 70, 232, 190, 73, 225, 93, 61, 87, 96, 214, 62, 248, 239, 126, 62, 226, 209, 43, 190, 253, 216, 20, 62, 153, 149, 242, 61, 138, 226, 178, 188, 249, 168, 187, 62, 25, 81, 193, 189, 179, 191, 79, 62, 239, 162, 191, 189, 96, 215, 137, 189, 131, 99, 46, 62, 154, 103, 227, 189, 85, 76, 27, 190, 217, 144, 31, 190, 173, 233, 31, 62, 7, 111, 241, 189, 253, 215, 187, 188, 168, 123, 95, 188, 13, 249, 25, 190, 67, 118, 244, 60, 11, 229, 20, 190, 127, 77, 120, 189, 253, 249, 178, 61, 112, 193, 240, 61, 24, 27, 235, 61, 132, 25, 134, 61, 21, 87, 239, 189, 91, 61, 42, 190, 55, 42, 213, 188, 7, 11, 15, 60, 115, 136, 57, 60, 160, 254, 227, 61, 152, 204, 49, 61, 227, 213, 51, 190, 248, 148, 37, 62, 188, 39, 96, 189, 9, 118, 52, 62, 99, 176, 22, 190, 11, 165, 41, 190, 167, 229, 35, 190, 190, 82, 68, 61, 22, 70, 232, 61, 82, 169, 223, 61, 228, 246, 11, 62, 77, 248, 238, 188, 59, 229, 13, 62, 190, 73, 105, 62, 199, 191, 100, 61, 128, 228, 24, 190, 198, 56, 101, 62, 159, 149, 85, 189, 28, 93, 211, 61, 173, 186, 138, 61, 57, 254, 57, 191, 180, 235, 204, 190, 141, 146, 210, 61, 132, 119, 95, 62, 183, 5, 205, 189, 254, 171, 116, 62, 52, 23, 136, 60, 28, 51, 176, 190, 142, 72, 90, 189, 214, 114, 111, 190, 202, 224, 17, 190, 96, 177, 4, 59, 2, 140, 201, 61, 182, 150, 206, 188, 17, 197, 29, 62, 218, 251, 251, 189, 58, 210, 182, 190, 203, 231, 150, 190, 64, 171, 189, 188, 152, 175, 238, 61, 228, 101, 122, 62, 74, 15, 4, 188, 44, 184, 141, 62, 9, 159, 82, 62, 255, 7, 24, 62, 102, 238, 117, 62, 71, 54, 12, 62, 148, 179, 148, 190, 30, 228, 151, 189, 23, 151, 8, 188, 251, 151, 128, 62, 227, 139, 21, 62, 85, 88, 54, 62, 202, 134, 160, 62, 66, 5, 86, 190, 66, 140, 115, 190, 210, 83, 145, 61, 120, 46, 169, 189, 39, 87, 196, 61, 243, 23, 97, 62, 215, 173, 101, 190, 244, 157, 210, 61, 182, 116, 11, 62, 169, 171, 55, 62, 229, 61, 27, 61, 60, 94, 35, 62, 81, 93, 169, 189, 93, 39, 57, 62, 233, 39, 25, 62, 184, 188, 132, 59, 209, 11, 86, 62, 109, 152, 32, 60, 177, 169, 149, 190, 203, 15, 123, 62, 172, 155, 58, 62, 139, 79, 36, 61, 79, 101, 108, 189, 24, 228, 50, 62, 132, 11, 192, 186, 17, 205, 172, 61, 145, 160, 132, 190, 91, 148, 67, 61, 105, 127, 130, 190, 59, 205, 129, 62, 97, 123, 26, 190, 110, 79, 122, 190, 202, 223, 182, 190, 199, 66, 108, 62, 207, 75, 61, 190, 130, 176, 236, 189, 153, 168, 214, 189, 205, 98, 76, 190, 78, 53, 214, 60, 125, 84, 158, 186, 212, 234, 29, 190, 126, 254, 28, 190, 246, 133, 113, 61, 17, 90, 149, 60, 110, 89, 83, 189, 28, 5, 65, 60, 225, 203, 160, 190, 37, 232, 163, 188, 199, 219, 94, 190, 74, 62, 52, 62, 254, 183, 211, 62, 241, 198, 240, 189, 180, 60, 168, 188, 181, 54, 65, 62, 137, 225, 159, 61, 96, 53, 79, 62, 38, 134, 166, 190, 199, 48, 128, 189, 104, 28, 214, 190, 149, 190, 13, 62, 172, 224, 156, 190, 6, 120, 209, 189, 191, 100, 167, 189, 212, 105, 7, 191, 158, 214, 9, 189, 64, 182, 102, 188, 146, 27, 134, 62, 160, 37, 119, 61, 181, 12, 175, 190, 213, 165, 174, 189, 15, 10, 166, 62, 113, 27, 147, 60, 3, 229, 128, 189, 105, 148, 146, 189, 65, 196, 170, 61, 43, 193, 173, 189, 249, 115, 7, 62, 3, 5, 246, 59, 103, 142, 58, 61, 174, 208, 125, 61, 45, 62, 80, 61, 254, 230, 128, 60, 160, 52, 55, 59, 194, 183, 30, 189, 105, 219, 137, 188, 157, 183, 39, 60, 49, 133, 8, 190, 124, 49, 209, 61, 223, 134, 207, 189, 198, 162, 56, 188, 11, 185, 208, 61, 127, 67, 150, 189, 145, 164, 72, 61, 101, 248, 8, 190, 152, 158, 2, 62, 90, 61, 197, 189, 225, 161, 31, 188, 246, 218, 246, 61, 173, 39, 56, 189, 38, 185, 167, 189, 177, 124, 87, 189, 96, 180, 234, 60, 191, 186, 107, 61, 229, 29, 130, 189, 22, 212, 135, 61, 120, 63, 149, 189, 250, 92, 75, 61, 79, 12, 244, 61, 201, 82, 182, 189, 10, 138, 77, 188, 86, 144, 232, 189, 4, 139, 155, 189, 17, 243, 244, 61, 127, 25, 192, 189, 131, 22, 54, 188, 97, 187, 184, 61, 24, 240, 213, 188, 0, 204, 38, 190, 42, 39, 179, 189, 205, 123, 27, 190, 214, 168, 87, 189, 68, 235, 13, 190, 87, 206, 243, 189, 194, 69, 60, 189, 218, 124, 8, 189, 234, 18, 8, 190, 63, 122, 162, 188, 45, 133, 213, 189, 186, 68, 163, 60, 69, 31, 28, 62, 11, 96, 233, 189, 201, 26, 12, 62, 44, 232, 117, 60, 201, 188, 29, 189, 68, 38, 5, 62, 140, 143, 32, 61, 149, 167, 127, 189, 2, 247, 106, 60, 130, 196, 188, 189, 154, 205, 16, 62, 238, 188, 164, 61, 167, 107, 118, 189, 100, 93, 59, 189, 113, 55, 64, 61, 207, 180, 12, 62, 95, 158, 65, 189, 221, 102, 170, 62, 42, 134, 132, 190, 13, 165, 178, 187, 199, 164, 125, 190, 71, 41, 172, 190, 175, 28, 188, 190, 100, 228, 230, 189, 136, 175, 64, 62, 157, 181, 204, 190, 54, 188, 122, 62, 52, 172, 61, 61, 79, 209, 108, 62, 146, 164, 189, 60, 180, 223, 138, 188, 147, 181, 210, 62, 38, 24, 190, 60, 11, 159, 47, 62, 188, 78, 19, 61, 219, 151, 110, 62, 128, 153, 183, 189, 18, 155, 234, 189, 45, 10, 98, 62, 145, 68, 95, 188, 111, 115, 2, 63, 103, 222, 134, 62, 86, 153, 166, 61, 38, 217, 79, 189, 230, 77, 27, 62, 178, 19, 250, 61, 74, 188, 45, 62, 75, 50, 181, 62, 214, 11, 52, 62, 7, 22, 35, 62, 242, 51, 186, 62, 130, 53, 209, 189, 43, 168, 67, 62, 115, 94, 151, 189, 76, 227, 22, 62, 157, 129, 6, 190, 40, 5, 224, 61, 164, 138, 145, 189, 202, 46, 46, 62, 197, 37, 161, 189, 157, 3, 164, 60, 143, 7, 54, 190, 206, 178, 78, 61, 21, 208, 142, 62, 125, 68, 43, 190, 206, 176, 20, 62, 50, 70, 19, 62, 28, 126, 163, 62, 233, 126, 83, 190, 25, 20, 225, 62, 143, 28, 60, 189, 102, 9, 153, 189, 127, 17, 176, 62, 69, 116, 9, 62, 216, 18, 234, 189, 19, 9, 158, 189, 21, 85, 168, 190, 190, 7, 23, 190, 72, 233, 81, 190, 179, 71, 92, 190, 171, 117, 181, 188, 65, 182, 250, 60, 118, 54, 88, 62, 185, 64, 78, 189, 92, 162, 184, 61, 239, 250, 117, 62, 254, 21, 253, 189, 46, 46, 109, 62, 97, 43, 144, 189, 114, 25, 180, 61, 181, 134, 241, 61, 227, 119, 29, 62, 151, 5, 108, 62, 93, 227, 131, 190, 179, 25, 16, 62, 152, 251, 244, 61, 144, 224, 165, 188, 45, 35, 181, 60, 86, 12, 188, 61, 173, 238, 222, 61, 47, 212, 104, 190, 30, 115, 72, 62, 145, 232, 90, 62, 43, 172, 198, 60, 37, 167, 155, 189, 229, 170, 11, 190, 142, 159, 2, 190, 83, 167, 226, 189, 31, 46, 219, 190, 228, 100, 140, 62, 103, 191, 35, 190, 208, 38, 100, 62, 64, 65, 49, 61, 207, 252, 64, 62, 195, 155, 36, 189, 246, 240, 13, 190, 88, 130, 136, 59, 164, 212, 120, 190, 198, 43, 171, 189, 1, 203, 66, 62, 41, 225, 24, 62, 69, 214, 163, 62, 61, 78, 57, 62, 97, 253, 152, 61, 255, 255, 61, 62, 211, 109, 21, 188, 58, 50, 28, 62, 153, 66, 131, 190, 77, 180, 218, 61, 211, 243, 49, 190, 161, 70, 173, 61, 206, 70, 102, 190, 148, 77, 110, 189, 252, 182, 254, 60, 206, 187, 194, 62, 151, 208, 138, 61, 116, 45, 242, 58, 46, 8, 110, 62, 36, 117, 181, 59, 208, 49, 38, 190, 182, 79, 194, 190, 37, 158, 143, 62, 28, 8, 170, 188, 91, 79, 189, 61, 223, 150, 219, 189, 40, 1, 255, 187, 215, 7, 169, 60, 105, 95, 83, 189, 129, 245, 32, 190, 131, 24, 170, 189, 128, 22, 142, 189, 167, 128, 0, 189, 26, 213, 7, 190, 49, 160, 160, 61, 95, 74, 10, 62, 79, 146, 29, 189, 238, 33, 185, 61, 82, 222, 103, 61, 153, 203, 137, 60, 100, 26, 246, 189, 218, 125, 42, 190, 139, 118, 96, 61, 201, 157, 129, 189, 88, 225, 233, 61, 21, 165, 60, 190, 60, 45, 44, 62, 54, 167, 122, 187, 191, 45, 200, 189, 137, 160, 45, 190, 53, 109, 238, 58, 189, 51, 22, 61, 172, 175, 156, 61, 162, 202, 2, 189, 203, 244, 51, 190, 61, 66, 138, 189, 102, 111, 13, 62, 178, 174, 26, 62, 216, 74, 153, 189, 148, 149, 65, 188, 254, 162, 196, 189, 166, 139, 78, 190, 128, 138, 2, 190, 98, 31, 82, 190, 118, 221, 155, 189, 216, 172, 177, 189, 7, 226, 136, 189, 138, 46, 203, 189, 105, 180, 208, 61, 238, 177, 6, 61, 142, 190, 153, 188, 196, 37, 201, 188, 136, 222, 122, 189, 133, 234, 78, 189, 170, 95, 97, 189, 135, 22, 34, 188, 33, 113, 109, 188, 124, 54, 120, 189, 72, 117, 54, 61, 56, 152, 216, 189, 179, 184, 172, 61, 243, 26, 12, 190, 251, 113, 201, 61, 251, 103, 1, 190, 133, 199, 241, 61, 218, 18, 250, 188, 47, 131, 175, 61, 38, 59, 224, 189, 97, 208, 17, 190, 88, 73, 6, 62, 173, 151, 140, 188, 12, 0, 39, 190, 168, 249, 152, 60, 30, 72, 57, 190, 45, 224, 173, 61, 250, 128, 194, 61, 190, 11, 65, 190, 240, 24, 37, 189, 187, 131, 228, 189, 138, 12, 42, 61, 66, 121, 0, 62, 142, 167, 193, 61, 62, 144, 65, 189, 128, 234, 197, 60, 64, 59, 239, 61, 98, 202, 229, 61, 78, 124, 240, 189, 200, 183, 226, 189, 75, 223, 11, 188, 32, 109, 27, 61, 215, 130, 119, 61, 156, 158, 59, 190, 40, 181, 0, 190, 194, 96, 156, 189, 135, 209, 4, 61, 16, 117, 34, 62, 70, 83, 84, 61, 246, 119, 67, 61, 112, 104, 145, 61, 110, 121, 151, 189, 253, 179, 240, 61, 206, 94, 81, 61, 170, 213, 150, 187, 178, 96, 103, 62, 127, 84, 90, 62, 173, 25, 66, 61, 101, 218, 184, 61, 221, 133, 153, 61, 25, 57, 51, 190, 22, 188, 163, 189, 225, 124, 140, 61, 80, 37, 172, 189, 88, 154, 34, 62, 30, 214, 163, 62, 131, 21, 41, 191, 156, 238, 235, 190, 77, 64, 174, 62, 93, 66, 131, 62, 81, 29, 1, 62, 110, 35, 170, 189, 78, 218, 128, 62, 55, 81, 98, 190, 19, 108, 218, 189, 221, 216, 211, 187, 178, 76, 245, 61, 22, 244, 182, 62, 19, 144, 66, 190, 198, 196, 27, 190, 133, 42, 204, 188, 114, 19, 152, 185, 4, 127, 150, 188, 147, 225, 9, 191, 59, 99, 181, 61, 142, 220, 176, 188, 240, 5, 173, 189, 165, 172, 135, 62, 164, 89, 84, 62, 70, 34, 14, 62, 69, 116, 15, 62, 211, 11, 96, 62, 19, 22, 115, 61, 15, 159, 124, 188, 47, 180, 134, 62, 193, 72, 130, 190, 177, 124, 244, 187, 63, 42, 49, 189, 185, 50, 120, 188, 73, 25, 82, 62, 79, 21, 4, 61, 99, 146, 40, 189, 237, 9, 18, 61, 198, 201, 7, 190, 70, 202, 170, 61, 3, 132, 45, 60, 127, 219, 38, 190, 157, 245, 146, 62, 31, 159, 25, 61, 134, 0, 210, 62, 149, 182, 14, 189, 57, 61, 249, 189, 100, 238, 106, 189, 162, 75, 145, 62, 37, 96, 252, 61, 89, 241, 34, 62, 69, 154, 30, 62, 37, 92, 24, 190, 224, 135, 52, 190, 247, 197, 220, 60, 189, 90, 129, 62, 116, 96, 25, 62, 204, 53, 101, 62, 127, 168, 176, 62, 190, 120, 150, 62, 204, 154, 135, 187, 200, 80, 105, 62, 205, 6, 134, 190, 4, 135, 50, 62, 112, 61, 50, 62, 134, 218, 40, 189, 190, 84, 185, 61, 96, 147, 36, 62, 39, 218, 211, 189, 18, 55, 158, 191, 182, 152, 136, 187, 181, 248, 217, 190, 180, 174, 104, 190, 227, 9, 11, 189, 72, 72, 138, 61, 76, 77, 57, 62, 97, 135, 110, 62, 75, 56, 30, 190, 59, 0, 242, 188, 118, 188, 186, 189, 175, 95, 151, 62, 20, 165, 127, 62, 19, 191, 207, 190, 250, 100, 47, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {211, 109, 186, 189, 168, 69, 160, 188, 194, 46, 234, 189, 58, 52, 186, 62, 90, 110, 15, 62, 109, 235, 24, 61, 178, 112, 3, 190, 75, 154, 32, 59, 120, 26, 163, 62, 43, 146, 89, 62, 242, 244, 29, 188, 118, 125, 161, 59, 196, 167, 174, 189, 227, 7, 187, 61, 4, 92, 52, 62, 117, 34, 188, 184, 210, 20, 188, 60, 26, 174, 172, 62, 195, 222, 202, 189, 34, 188, 201, 61, 238, 169, 26, 190, 58, 130, 31, 190, 211, 179, 178, 188, 96, 4, 98, 190, 213, 35, 22, 189, 199, 177, 237, 61, 157, 4, 68, 190, 88, 17, 71, 190, 20, 89, 247, 185, 61, 159, 121, 61, 224, 216, 106, 62, 126, 195, 22, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 96, 183, 62, 118, 48, 211, 189, 32, 84, 130, 57, 201, 241, 50, 191, 50, 104, 177, 189, 181, 206, 149, 188, 251, 65, 103, 61, 86, 114, 195, 62, 187, 50, 37, 191, 22, 71, 146, 190, 213, 197, 117, 63, 85, 147, 234, 190, 85, 217, 241, 61, 103, 185, 233, 190, 192, 33, 216, 62, 64, 239, 201, 60, 144, 49, 59, 190, 99, 140, 230, 61, 29, 211, 221, 62, 15, 227, 162, 190, 92, 77, 174, 61, 237, 169, 191, 61, 42, 3, 0, 63, 183, 242, 182, 190, 122, 245, 81, 190, 12, 34, 185, 190, 159, 88, 117, 189, 95, 243, 190, 61, 112, 170, 245, 189, 70, 161, 22, 190, 50, 252, 132, 62, 150, 191, 5, 63, 72, 116, 154, 189, 222, 10, 88, 190, 138, 87, 184, 189, 250, 92, 111, 62, 100, 242, 112, 190, 27, 200, 201, 60, 33, 245, 226, 62, 155, 189, 9, 190, 218, 4, 159, 61, 84, 214, 146, 190, 34, 102, 85, 189, 71, 162, 171, 189, 64, 184, 45, 62, 57, 25, 15, 190, 58, 116, 118, 61, 58, 176, 151, 60, 201, 158, 42, 189, 24, 219, 129, 190, 167, 111, 30, 61, 13, 223, 251, 61, 73, 10, 33, 190, 23, 251, 239, 189, 90, 183, 51, 59, 179, 89, 242, 62, 24, 16, 72, 189, 37, 253, 91, 62, 255, 141, 204, 61, 125, 5, 21, 190, 254, 91, 145, 61, 106, 73, 223, 190, 134, 5, 220, 189, 126, 185, 62, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 20, 111, 62, 251, 145, 111, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {165, 41, 117, 63, 59, 102, 200, 61, 73, 165, 42, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {48, 49, 67, 191, 23, 47, 10, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0072/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}