// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {125, 107, 40, 63, 175, 63, 74, 190, 101, 145, 119, 62, 28, 87, 23, 62, 118, 58, 18, 191, 30, 227, 240, 190, 122, 4, 83, 63, 189, 212, 85, 191, 167, 135, 164, 190, 26, 149, 57, 191, 83, 69, 32, 191, 74, 253, 144, 188, 248, 237, 175, 190, 76, 230, 168, 190, 2, 176, 243, 188, 192, 99, 58, 190, 96, 194, 147, 63, 219, 151, 203, 61, 31, 40, 32, 63, 96, 67, 21, 63, 102, 219, 1, 63, 114, 7, 142, 191, 15, 165, 250, 188, 60, 52, 21, 61, 20, 23, 96, 63, 150, 247, 250, 60, 61, 154, 195, 62, 47, 1, 103, 62, 7, 156, 195, 62, 15, 223, 39, 191, 38, 121, 162, 62, 136, 122, 144, 191, 28, 88, 91, 190, 58, 99, 172, 62, 242, 255, 54, 63, 64, 18, 208, 190, 115, 248, 123, 63, 204, 46, 247, 62, 39, 210, 216, 62, 192, 143, 45, 191, 223, 77, 83, 63, 91, 251, 239, 62, 171, 54, 212, 190, 91, 146, 167, 190, 9, 36, 39, 190, 131, 23, 129, 191, 228, 12, 135, 190, 255, 177, 7, 63, 167, 150, 124, 63, 125, 170, 45, 190, 196, 47, 26, 61, 202, 208, 117, 61, 109, 170, 173, 191, 64, 105, 137, 190, 37, 210, 14, 190, 107, 188, 207, 61, 164, 66, 156, 62, 110, 199, 196, 60, 248, 246, 124, 63, 202, 72, 245, 61, 87, 253, 33, 63, 110, 154, 146, 191, 143, 122, 251, 189, 89, 240, 88, 63, 16, 215, 49, 191, 133, 84, 139, 190, 31, 109, 165, 188, 154, 125, 205, 62, 235, 151, 188, 61, 59, 163, 149, 190, 60, 237, 123, 191, 94, 30, 204, 190, 19, 59, 84, 191, 93, 229, 126, 189, 113, 248, 59, 190, 7, 2, 74, 63, 120, 73, 81, 62, 105, 123, 218, 190, 154, 81, 184, 62, 188, 79, 40, 63, 124, 106, 112, 190, 71, 212, 109, 63, 90, 80, 132, 63, 75, 204, 54, 188, 97, 59, 60, 62, 98, 196, 177, 190, 75, 64, 42, 191, 82, 22, 253, 190, 15, 24, 124, 63, 132, 109, 163, 62, 199, 61, 11, 62, 134, 181, 59, 191, 124, 179, 38, 62, 240, 241, 100, 189, 41, 50, 141, 191, 208, 250, 71, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 71, 154, 191, 160, 55, 38, 191, 68, 94, 43, 191, 134, 24, 97, 63, 129, 31, 56, 191, 158, 146, 167, 62, 79, 126, 142, 191, 167, 194, 179, 62, 176, 179, 225, 190, 235, 67, 130, 189, 120, 98, 230, 60, 71, 79, 170, 61, 155, 90, 174, 189, 91, 34, 82, 61, 166, 6, 20, 63, 226, 99, 24, 190, 44, 127, 26, 63, 241, 160, 107, 62, 166, 180, 189, 62, 225, 154, 5, 62, 222, 122, 172, 62, 44, 228, 9, 191, 200, 21, 149, 62, 167, 237, 69, 191, 83, 255, 218, 62, 174, 214, 165, 190, 147, 16, 20, 63, 195, 162, 39, 190, 109, 58, 241, 190, 84, 90, 20, 63, 73, 131, 58, 62, 209, 241, 171, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {6, 26, 193, 189, 158, 248, 240, 189, 253, 51, 95, 188, 159, 236, 205, 62, 165, 234, 206, 189, 170, 219, 15, 190, 238, 28, 155, 190, 172, 61, 58, 62, 168, 138, 172, 60, 11, 248, 200, 189, 251, 139, 239, 189, 155, 229, 240, 189, 185, 179, 245, 188, 232, 48, 255, 189, 82, 243, 141, 62, 119, 24, 206, 61, 70, 180, 238, 61, 102, 71, 58, 189, 27, 178, 73, 60, 123, 85, 78, 188, 58, 227, 42, 62, 200, 155, 102, 61, 64, 220, 32, 62, 174, 251, 151, 61, 104, 115, 130, 61, 106, 29, 78, 186, 169, 46, 244, 61, 190, 37, 224, 61, 105, 196, 125, 61, 38, 42, 199, 61, 221, 51, 60, 62, 203, 110, 66, 188, 141, 153, 149, 62, 165, 158, 164, 190, 15, 158, 21, 191, 201, 152, 8, 190, 109, 35, 166, 188, 38, 208, 186, 190, 182, 238, 26, 62, 30, 168, 162, 190, 227, 158, 32, 62, 14, 88, 0, 62, 161, 55, 95, 190, 0, 92, 188, 62, 98, 248, 154, 188, 218, 81, 134, 190, 39, 160, 134, 61, 76, 96, 230, 61, 221, 219, 161, 62, 227, 223, 13, 191, 147, 187, 107, 190, 6, 49, 50, 190, 167, 161, 11, 62, 60, 7, 24, 191, 38, 178, 133, 188, 57, 165, 201, 190, 132, 0, 20, 190, 181, 20, 122, 189, 143, 177, 62, 61, 128, 171, 128, 62, 244, 249, 23, 62, 105, 220, 141, 191, 202, 158, 45, 62, 187, 46, 121, 61, 0, 239, 26, 191, 55, 164, 26, 191, 212, 167, 135, 188, 203, 61, 140, 61, 165, 84, 105, 61, 16, 51, 172, 62, 138, 176, 117, 190, 182, 137, 104, 62, 166, 50, 87, 61, 215, 5, 126, 190, 48, 175, 229, 62, 129, 193, 42, 190, 164, 157, 52, 190, 54, 159, 55, 61, 240, 166, 161, 62, 82, 14, 237, 61, 150, 210, 219, 61, 159, 30, 219, 62, 130, 168, 13, 61, 70, 57, 63, 62, 89, 235, 82, 62, 31, 39, 2, 63, 181, 41, 204, 61, 65, 151, 144, 190, 231, 123, 154, 61, 73, 9, 62, 61, 166, 238, 91, 190, 76, 217, 150, 62, 74, 173, 112, 191, 47, 97, 49, 62, 166, 61, 41, 62, 32, 221, 221, 191, 17, 64, 247, 189, 151, 8, 241, 187, 198, 204, 237, 189, 185, 95, 168, 189, 89, 27, 171, 189, 5, 171, 179, 61, 221, 51, 17, 61, 196, 60, 1, 62, 173, 150, 219, 189, 234, 220, 174, 60, 40, 218, 206, 61, 118, 212, 49, 190, 169, 85, 223, 189, 182, 82, 81, 60, 75, 160, 154, 61, 60, 105, 182, 61, 39, 19, 23, 190, 251, 192, 22, 190, 133, 1, 18, 62, 13, 98, 224, 61, 71, 54, 12, 61, 104, 188, 126, 61, 172, 98, 83, 190, 2, 108, 74, 190, 196, 51, 188, 60, 141, 58, 88, 189, 241, 124, 224, 61, 1, 53, 176, 58, 116, 177, 62, 190, 110, 24, 61, 190, 201, 38, 7, 190, 215, 84, 66, 190, 121, 59, 189, 62, 65, 228, 135, 189, 185, 234, 177, 190, 169, 251, 141, 62, 57, 217, 192, 61, 157, 176, 70, 190, 42, 181, 138, 189, 95, 57, 195, 61, 184, 61, 148, 187, 71, 86, 49, 62, 212, 161, 33, 190, 67, 124, 37, 61, 40, 36, 230, 61, 15, 170, 7, 190, 27, 147, 100, 62, 90, 231, 221, 60, 34, 238, 182, 62, 127, 6, 216, 190, 232, 14, 13, 62, 175, 195, 111, 189, 250, 68, 128, 190, 232, 90, 28, 191, 37, 125, 104, 62, 11, 252, 4, 190, 2, 176, 220, 62, 185, 118, 89, 61, 232, 184, 40, 62, 0, 234, 103, 62, 222, 88, 50, 190, 93, 214, 24, 62, 61, 152, 130, 62, 189, 89, 52, 62, 86, 148, 9, 63, 193, 104, 160, 189, 232, 148, 136, 190, 131, 12, 88, 62, 170, 0, 114, 190, 158, 111, 247, 189, 246, 105, 166, 61, 107, 145, 137, 62, 54, 59, 90, 189, 83, 197, 7, 62, 120, 28, 156, 190, 212, 21, 217, 61, 63, 205, 200, 61, 198, 231, 13, 62, 76, 135, 174, 189, 33, 47, 253, 60, 49, 62, 109, 62, 40, 127, 192, 190, 205, 255, 181, 189, 191, 66, 130, 189, 19, 13, 158, 60, 48, 115, 52, 191, 217, 126, 244, 61, 252, 2, 176, 61, 55, 9, 168, 62, 117, 44, 10, 190, 109, 162, 109, 62, 15, 4, 203, 188, 87, 252, 77, 188, 64, 69, 225, 186, 133, 135, 101, 61, 255, 22, 229, 189, 215, 48, 254, 190, 150, 197, 210, 190, 8, 129, 236, 190, 100, 28, 26, 61, 212, 244, 58, 189, 26, 12, 240, 189, 188, 218, 56, 62, 174, 187, 133, 189, 186, 227, 140, 62, 219, 245, 12, 62, 130, 139, 224, 190, 108, 67, 3, 61, 10, 132, 226, 62, 128, 139, 158, 190, 178, 137, 130, 189, 169, 25, 86, 191, 120, 4, 106, 62, 41, 231, 172, 190, 233, 112, 160, 188, 182, 174, 66, 62, 19, 73, 84, 189, 72, 90, 43, 191, 237, 106, 155, 61, 227, 23, 255, 190, 124, 250, 45, 62, 61, 46, 214, 189, 61, 237, 243, 61, 230, 165, 144, 62, 13, 173, 2, 62, 5, 158, 240, 190, 109, 40, 168, 190, 55, 53, 12, 190, 166, 138, 105, 191, 125, 191, 14, 191, 190, 33, 40, 191, 205, 104, 225, 62, 229, 33, 241, 189, 175, 6, 136, 62, 9, 175, 16, 191, 226, 94, 182, 62, 231, 114, 151, 190, 41, 136, 144, 191, 29, 3, 145, 62, 196, 114, 177, 190, 187, 54, 78, 190, 115, 198, 42, 190, 125, 159, 10, 63, 117, 204, 72, 61, 212, 135, 23, 190, 157, 194, 6, 63, 115, 66, 19, 62, 73, 88, 29, 189, 152, 135, 11, 63, 190, 129, 133, 190, 196, 51, 255, 61, 102, 111, 132, 191, 121, 173, 238, 189, 82, 210, 76, 190, 72, 212, 233, 190, 171, 132, 26, 191, 106, 40, 59, 191, 163, 253, 198, 61, 145, 40, 166, 62, 141, 42, 205, 191, 142, 255, 169, 62, 113, 78, 23, 190, 230, 239, 218, 190, 142, 93, 72, 62, 10, 129, 8, 190, 253, 39, 251, 190, 106, 239, 140, 187, 197, 144, 19, 61, 146, 103, 64, 62, 192, 169, 85, 62, 77, 93, 134, 190, 142, 208, 153, 187, 237, 179, 84, 62, 226, 60, 36, 62, 226, 104, 144, 188, 107, 64, 129, 190, 254, 191, 203, 62, 85, 205, 188, 190, 114, 78, 157, 61, 201, 134, 146, 190, 222, 57, 4, 188, 100, 196, 67, 191, 49, 127, 116, 189, 171, 41, 38, 190, 196, 138, 77, 62, 73, 115, 5, 190, 176, 62, 136, 62, 110, 123, 91, 61, 242, 13, 230, 61, 190, 84, 240, 189, 134, 120, 246, 60, 194, 158, 174, 61, 26, 168, 114, 189, 250, 89, 132, 190, 177, 4, 166, 190, 40, 75, 127, 61, 217, 134, 21, 190, 34, 246, 212, 62, 133, 26, 211, 190, 253, 113, 156, 62, 159, 99, 151, 190, 50, 0, 8, 191, 198, 123, 98, 191, 103, 71, 2, 190, 173, 113, 28, 190, 94, 78, 183, 189, 31, 91, 180, 186, 81, 164, 6, 190, 4, 101, 227, 189, 110, 108, 97, 191, 12, 20, 100, 190, 83, 31, 6, 63, 135, 192, 70, 190, 163, 138, 61, 191, 141, 246, 177, 187, 218, 20, 61, 191, 132, 55, 220, 62, 222, 77, 134, 190, 77, 28, 67, 62, 62, 184, 72, 61, 193, 75, 11, 191, 246, 36, 200, 189, 158, 174, 91, 190, 26, 145, 7, 191, 10, 115, 84, 61, 233, 46, 54, 62, 33, 70, 155, 59, 123, 164, 198, 189, 128, 164, 231, 61, 181, 142, 107, 191, 122, 75, 141, 190, 225, 151, 215, 190, 212, 249, 43, 62, 226, 122, 53, 62, 105, 247, 74, 62, 64, 108, 219, 61, 228, 217, 225, 188, 177, 57, 98, 190, 236, 122, 138, 190, 163, 8, 69, 189, 98, 20, 140, 62, 237, 158, 128, 189, 125, 232, 213, 190, 249, 99, 202, 190, 13, 181, 108, 189, 67, 145, 212, 62, 24, 143, 21, 61, 131, 171, 7, 61, 102, 58, 101, 189, 111, 82, 117, 62, 185, 60, 153, 61, 37, 69, 144, 62, 18, 85, 28, 61, 167, 139, 138, 191, 133, 101, 51, 62, 163, 99, 149, 62, 218, 75, 72, 191, 131, 49, 77, 190, 255, 216, 53, 190, 209, 131, 206, 61, 179, 207, 71, 61, 216, 148, 194, 188, 205, 115, 206, 190, 118, 203, 162, 61, 197, 82, 226, 189, 138, 6, 215, 189, 233, 141, 203, 61, 171, 91, 178, 189, 181, 113, 162, 187, 229, 196, 0, 62, 77, 106, 2, 62, 73, 8, 40, 62, 230, 25, 195, 61, 53, 129, 174, 61, 49, 66, 0, 62, 43, 113, 97, 62, 72, 182, 136, 62, 85, 134, 10, 62, 139, 65, 9, 61, 202, 49, 111, 189, 211, 246, 195, 61, 25, 54, 3, 190, 141, 188, 82, 62, 92, 101, 44, 62, 175, 7, 154, 189, 134, 117, 189, 189, 156, 214, 248, 61, 73, 73, 150, 188, 104, 118, 3, 62, 143, 163, 141, 61, 117, 199, 19, 62, 80, 119, 230, 60, 92, 70, 83, 189, 77, 115, 235, 189, 129, 58, 41, 190, 82, 102, 238, 189, 106, 72, 82, 61, 228, 139, 132, 61, 229, 159, 136, 187, 3, 159, 133, 189, 49, 159, 173, 61, 207, 184, 5, 190, 179, 189, 2, 62, 48, 113, 27, 190, 254, 192, 225, 186, 178, 79, 76, 190, 106, 93, 246, 189, 161, 80, 39, 188, 154, 204, 247, 61, 151, 111, 162, 189, 134, 118, 34, 189, 132, 199, 4, 190, 136, 153, 1, 188, 52, 71, 77, 190, 102, 177, 18, 190, 99, 65, 165, 189, 69, 198, 158, 59, 116, 11, 180, 60, 188, 220, 25, 190, 36, 6, 241, 189, 107, 211, 8, 189, 112, 127, 101, 61, 223, 5, 100, 189, 204, 243, 142, 62, 179, 202, 85, 190, 210, 223, 18, 62, 25, 48, 255, 188, 108, 200, 179, 62, 91, 94, 94, 60, 229, 118, 87, 189, 158, 22, 193, 190, 181, 212, 165, 189, 14, 140, 86, 190, 165, 230, 21, 191, 77, 33, 153, 62, 174, 71, 152, 190, 50, 122, 243, 190, 251, 172, 181, 62, 10, 233, 50, 190, 249, 233, 244, 188, 139, 178, 4, 62, 14, 1, 132, 191, 108, 152, 13, 190, 58, 218, 199, 62, 67, 5, 160, 62, 212, 123, 53, 190, 154, 38, 228, 61, 242, 81, 163, 190, 85, 105, 113, 62, 230, 105, 157, 189, 242, 153, 67, 190, 254, 196, 189, 62, 213, 105, 81, 63, 176, 222, 3, 190, 67, 28, 127, 191, 89, 187, 140, 61, 161, 128, 47, 190, 61, 110, 176, 190, 129, 16, 201, 62, 98, 155, 1, 62, 53, 247, 156, 62, 201, 25, 131, 61, 224, 130, 65, 191, 72, 128, 219, 62, 247, 53, 155, 62, 68, 216, 182, 189, 64, 136, 16, 191, 182, 128, 8, 190, 165, 66, 163, 62, 228, 132, 114, 191, 79, 160, 224, 188, 106, 191, 83, 190, 230, 70, 219, 190, 162, 159, 77, 191, 210, 227, 73, 187, 175, 138, 18, 190, 213, 193, 43, 62, 248, 139, 155, 190, 210, 29, 87, 62, 24, 230, 143, 62, 45, 103, 60, 62, 98, 59, 132, 190, 169, 23, 166, 61, 164, 247, 136, 62, 127, 163, 94, 191, 24, 18, 245, 189, 194, 124, 13, 61, 228, 221, 14, 62, 16, 31, 71, 62, 220, 145, 158, 62, 212, 179, 30, 191, 148, 180, 99, 190, 25, 42, 69, 190, 199, 117, 17, 61, 100, 41, 218, 62, 29, 24, 62, 62, 157, 2, 243, 190, 12, 23, 34, 190, 22, 251, 51, 62, 9, 103, 157, 62, 195, 47, 145, 62, 129, 160, 72, 62, 117, 70, 77, 62, 204, 182, 7, 62, 130, 35, 155, 60, 200, 247, 237, 62, 120, 169, 20, 59, 2, 161, 153, 60, 249, 254, 215, 61, 179, 139, 243, 61, 82, 147, 50, 62, 169, 22, 202, 62, 139, 101, 46, 190, 66, 79, 36, 189, 176, 106, 206, 62, 71, 101, 83, 190, 179, 89, 4, 190, 134, 217, 61, 189, 2, 225, 1, 190, 127, 74, 16, 190, 38, 243, 35, 190, 115, 223, 222, 188, 136, 233, 223, 189, 81, 126, 3, 190, 171, 12, 252, 189, 56, 160, 43, 190, 115, 200, 25, 190, 252, 21, 20, 189, 225, 69, 249, 61, 19, 177, 26, 60, 100, 70, 118, 189, 150, 204, 158, 189, 243, 117, 186, 59, 163, 157, 51, 190, 90, 155, 247, 189, 36, 198, 255, 189, 158, 130, 214, 60, 112, 185, 157, 189, 1, 217, 80, 188, 2, 20, 97, 60, 172, 142, 153, 60, 226, 115, 226, 60, 139, 116, 239, 60, 77, 13, 40, 190, 193, 129, 48, 62, 120, 155, 178, 59, 121, 11, 31, 61, 73, 85, 99, 189, 167, 24, 3, 62, 255, 158, 41, 62, 5, 35, 1, 62, 40, 181, 255, 188, 246, 6, 74, 61, 68, 7, 8, 190, 246, 70, 24, 190, 239, 65, 76, 190, 80, 228, 238, 188, 232, 112, 150, 189, 98, 17, 145, 188, 64, 54, 69, 190, 11, 26, 204, 61, 84, 15, 178, 189, 196, 63, 201, 188, 32, 224, 37, 60, 129, 107, 91, 61, 230, 68, 83, 190, 63, 88, 209, 189, 74, 197, 28, 190, 159, 15, 240, 189, 166, 23, 5, 190, 242, 56, 173, 61, 82, 185, 209, 189, 68, 202, 230, 188, 218, 52, 79, 61, 112, 107, 151, 189, 88, 142, 198, 189, 246, 108, 240, 60, 11, 95, 164, 187, 239, 97, 26, 189, 109, 107, 63, 61, 34, 46, 13, 191, 204, 191, 57, 62, 127, 220, 157, 60, 199, 239, 173, 62, 168, 243, 129, 60, 190, 217, 229, 62, 134, 11, 25, 191, 15, 154, 162, 62, 34, 46, 69, 191, 18, 93, 186, 189, 77, 154, 250, 62, 31, 6, 144, 190, 203, 250, 135, 191, 63, 80, 235, 61, 1, 24, 133, 62, 159, 185, 139, 61, 128, 139, 222, 189, 244, 110, 18, 63, 142, 206, 99, 62, 149, 237, 137, 190, 57, 79, 190, 62, 121, 72, 200, 57, 193, 101, 201, 188, 96, 53, 0, 62, 6, 246, 171, 61, 59, 101, 75, 190, 124, 246, 85, 189, 246, 179, 167, 191, 181, 32, 207, 61, 68, 124, 151, 62, 101, 189, 141, 62, 177, 180, 218, 61, 164, 181, 42, 190, 133, 191, 45, 61, 168, 182, 248, 188, 235, 76, 33, 190, 162, 169, 38, 61, 183, 197, 140, 60, 182, 3, 105, 60, 30, 53, 185, 59, 11, 6, 4, 61, 163, 126, 82, 190, 233, 104, 133, 61, 100, 214, 18, 189, 107, 97, 66, 190, 138, 193, 9, 62, 184, 252, 214, 189, 241, 144, 83, 189, 209, 147, 205, 61, 58, 189, 27, 190, 150, 8, 14, 61, 156, 105, 204, 61, 234, 211, 39, 190, 93, 141, 17, 62, 88, 26, 11, 190, 106, 237, 158, 61, 87, 241, 18, 62, 35, 4, 228, 61, 81, 150, 252, 189, 217, 106, 248, 61, 175, 31, 122, 61, 207, 75, 218, 189, 39, 159, 163, 189, 45, 56, 140, 59, 173, 160, 19, 62, 43, 180, 215, 61, 19, 38, 123, 189, 58, 219, 239, 61, 204, 35, 105, 189, 74, 4, 30, 188, 153, 59, 6, 189, 5, 128, 217, 60, 42, 230, 45, 190, 138, 169, 27, 189, 84, 240, 240, 189, 228, 94, 197, 61, 147, 195, 4, 190, 250, 35, 239, 189, 232, 35, 29, 61, 236, 135, 223, 189, 94, 137, 37, 188, 31, 139, 166, 189, 3, 195, 231, 61, 161, 250, 12, 190, 154, 214, 212, 60, 242, 89, 234, 59, 246, 93, 207, 188, 68, 174, 133, 188, 110, 244, 187, 189, 14, 112, 49, 190, 98, 174, 20, 190, 6, 233, 110, 188, 204, 158, 162, 189, 103, 83, 203, 189, 133, 51, 84, 189, 20, 189, 183, 189, 126, 154, 73, 191, 181, 106, 89, 189, 171, 82, 245, 62, 47, 165, 75, 190, 40, 17, 28, 62, 93, 195, 57, 62, 203, 98, 63, 189, 125, 158, 242, 61, 236, 90, 100, 190, 16, 95, 109, 61, 208, 169, 194, 62, 192, 87, 161, 189, 147, 88, 73, 190, 37, 74, 136, 62, 116, 221, 135, 61, 19, 87, 60, 61, 156, 148, 151, 190, 142, 187, 15, 60, 201, 231, 11, 62, 210, 6, 24, 61, 238, 120, 139, 62, 19, 94, 11, 63, 142, 36, 189, 188, 78, 195, 151, 190, 13, 146, 97, 190, 37, 24, 46, 62, 162, 233, 147, 189, 109, 209, 141, 189, 255, 153, 41, 190, 253, 152, 14, 62, 15, 7, 74, 190, 140, 94, 26, 191, 134, 212, 70, 190, 31, 21, 184, 61, 101, 175, 182, 62, 162, 223, 241, 189, 172, 87, 126, 61, 176, 192, 136, 190, 197, 175, 38, 190, 181, 129, 83, 191, 216, 55, 129, 190, 212, 200, 151, 190, 197, 236, 68, 62, 228, 65, 112, 190, 151, 132, 108, 191, 163, 235, 150, 62, 18, 225, 73, 190, 194, 32, 158, 62, 169, 156, 103, 189, 187, 173, 35, 62, 87, 89, 6, 63, 254, 28, 11, 191, 144, 128, 124, 61, 126, 127, 1, 63, 107, 237, 11, 191, 213, 175, 2, 191, 99, 94, 149, 191, 202, 213, 62, 190, 103, 116, 214, 190, 210, 212, 23, 190, 156, 88, 234, 188, 160, 158, 14, 190, 157, 152, 13, 63, 24, 33, 243, 190, 124, 39, 224, 190, 249, 58, 126, 62, 56, 204, 149, 62, 36, 242, 173, 61, 254, 145, 55, 61, 225, 194, 35, 190, 175, 190, 60, 190, 65, 192, 171, 190, 254, 30, 26, 61, 198, 222, 60, 62, 56, 23, 197, 61, 169, 194, 110, 189, 224, 54, 137, 189, 129, 34, 97, 189, 20, 252, 141, 189, 172, 106, 69, 62, 242, 58, 254, 61, 165, 224, 144, 61, 76, 217, 64, 190, 68, 178, 175, 189, 146, 54, 120, 62, 12, 7, 177, 62, 33, 71, 119, 61, 188, 94, 84, 62, 81, 200, 57, 190, 159, 198, 3, 60, 213, 142, 51, 190, 251, 67, 210, 61, 179, 132, 35, 62, 24, 115, 193, 190, 176, 254, 174, 62, 139, 192, 27, 62, 58, 197, 179, 61, 160, 95, 172, 189, 54, 169, 24, 62, 160, 105, 68, 188, 81, 131, 51, 62, 225, 248, 27, 190, 155, 251, 194, 61, 186, 189, 93, 189, 213, 238, 167, 61, 63, 210, 25, 187, 37, 94, 8, 62, 247, 92, 21, 190, 4, 1, 134, 189, 200, 61, 34, 190, 190, 102, 87, 189, 106, 45, 202, 61, 107, 78, 216, 189, 193, 58, 191, 189, 179, 56, 198, 188, 5, 149, 206, 189, 184, 162, 109, 189, 249, 122, 43, 62, 255, 188, 4, 60, 46, 75, 40, 190, 253, 57, 175, 61, 9, 11, 22, 190, 151, 5, 3, 190, 178, 144, 23, 61, 93, 185, 34, 60, 15, 124, 209, 189, 52, 177, 170, 61, 60, 218, 183, 61, 244, 52, 26, 62, 16, 143, 5, 61, 183, 22, 128, 62, 15, 169, 132, 190, 9, 197, 208, 58, 119, 50, 115, 62, 95, 107, 153, 62, 152, 207, 156, 191, 79, 47, 194, 62, 31, 29, 26, 190, 132, 165, 67, 61, 67, 137, 41, 62, 20, 147, 219, 62, 11, 121, 54, 190, 213, 5, 192, 189, 116, 141, 127, 190, 98, 56, 137, 62, 101, 91, 53, 61, 67, 229, 20, 188, 141, 133, 130, 62, 243, 196, 136, 61, 169, 172, 28, 62, 137, 35, 137, 60, 47, 222, 143, 62, 116, 238, 215, 190, 35, 2, 123, 62, 15, 85, 245, 189, 203, 251, 60, 61, 212, 228, 46, 62, 10, 200, 136, 62, 69, 87, 1, 191, 133, 102, 201, 189, 164, 221, 112, 61, 5, 56, 154, 61, 251, 75, 147, 61, 205, 26, 236, 188, 62, 105, 46, 190, 149, 49, 135, 61, 195, 181, 41, 62, 80, 18, 20, 190, 233, 100, 243, 189, 22, 171, 182, 61, 223, 49, 223, 60, 155, 231, 233, 61, 192, 244, 31, 189, 80, 126, 87, 61, 78, 173, 1, 188, 151, 148, 173, 61, 31, 57, 136, 189, 194, 138, 144, 189, 94, 0, 235, 189, 122, 58, 0, 62, 100, 204, 100, 190, 172, 182, 37, 61, 134, 227, 99, 61, 130, 39, 49, 190, 124, 59, 75, 190, 230, 93, 213, 189, 145, 198, 24, 190, 247, 136, 82, 190, 28, 225, 223, 60, 195, 128, 72, 190, 22, 148, 26, 190, 144, 28, 203, 61, 134, 83, 189, 190, 92, 75, 135, 190, 102, 230, 193, 190, 182, 1, 72, 189, 228, 31, 254, 189, 132, 181, 65, 62, 61, 252, 119, 190, 181, 181, 161, 61, 147, 94, 42, 190, 180, 194, 58, 190, 248, 102, 48, 191, 119, 11, 53, 190, 214, 95, 121, 190, 216, 202, 71, 191, 122, 232, 54, 62, 159, 164, 130, 190, 218, 137, 31, 191, 192, 219, 2, 191, 87, 160, 67, 190, 246, 214, 16, 62, 68, 65, 214, 190, 132, 164, 29, 190, 26, 84, 162, 190, 73, 88, 98, 191, 87, 228, 146, 62, 129, 105, 118, 189, 42, 226, 205, 61, 219, 168, 144, 61, 67, 197, 22, 191, 62, 44, 126, 189, 232, 179, 12, 190, 13, 104, 38, 191, 58, 150, 141, 189, 254, 195, 238, 190, 141, 142, 249, 190, 207, 163, 8, 62, 118, 36, 56, 61, 74, 227, 55, 61, 91, 74, 191, 189, 16, 147, 195, 62, 192, 92, 140, 190, 244, 70, 47, 61, 222, 47, 55, 62, 225, 141, 103, 61, 96, 185, 178, 190, 151, 102, 76, 191, 138, 58, 99, 62, 128, 114, 115, 188, 196, 230, 93, 190, 39, 194, 73, 62, 121, 229, 19, 191, 121, 117, 71, 190, 53, 82, 179, 188, 53, 176, 149, 190, 161, 62, 132, 190, 53, 125, 79, 189, 121, 132, 159, 62, 68, 1, 179, 190, 84, 143, 143, 190, 9, 191, 48, 191, 227, 60, 131, 61, 78, 119, 129, 190, 67, 145, 105, 190, 156, 143, 182, 61, 168, 90, 44, 62, 163, 83, 164, 187, 182, 68, 14, 190, 237, 196, 26, 62, 154, 220, 182, 61, 110, 5, 59, 190, 224, 136, 159, 189, 198, 53, 50, 190, 93, 102, 79, 189, 73, 38, 131, 189, 0, 71, 31, 188, 74, 45, 41, 190, 171, 48, 159, 60, 216, 172, 13, 190, 18, 32, 57, 190, 130, 130, 124, 61, 53, 253, 21, 190, 27, 252, 125, 61, 176, 107, 12, 60, 247, 244, 50, 190, 235, 74, 226, 189, 236, 96, 176, 188, 217, 177, 25, 62, 110, 17, 190, 57, 178, 192, 157, 61, 117, 135, 48, 62, 43, 243, 36, 60, 187, 154, 73, 61, 70, 71, 158, 189, 10, 231, 47, 60, 155, 55, 245, 189, 218, 233, 219, 60, 98, 227, 193, 190, 107, 175, 17, 59, 193, 148, 251, 190, 238, 165, 30, 191, 13, 43, 195, 189, 127, 208, 160, 62, 207, 246, 72, 190, 150, 11, 104, 191, 115, 55, 55, 189, 155, 1, 247, 61, 194, 151, 138, 190, 230, 90, 146, 61, 194, 213, 12, 190, 19, 162, 72, 190, 146, 110, 150, 190, 163, 9, 222, 190, 233, 23, 26, 62, 110, 254, 78, 191, 86, 15, 134, 190, 117, 68, 172, 62, 28, 12, 44, 59, 213, 230, 103, 190, 103, 167, 58, 62, 242, 163, 181, 190, 109, 83, 117, 190, 164, 191, 197, 189, 215, 1, 232, 62, 233, 188, 66, 190, 228, 42, 21, 190, 87, 65, 213, 61, 33, 95, 243, 190, 117, 115, 1, 191, 29, 17, 152, 62, 147, 11, 162, 61, 156, 85, 128, 190, 77, 42, 155, 62, 136, 197, 52, 190, 238, 56, 140, 190, 106, 159, 174, 61, 76, 164, 21, 62, 204, 209, 13, 62, 85, 19, 59, 190, 193, 32, 195, 61, 154, 196, 1, 62, 210, 48, 93, 62, 175, 144, 84, 61, 67, 30, 1, 189, 102, 218, 32, 190, 44, 49, 78, 62, 69, 69, 186, 189, 217, 132, 30, 62, 138, 34, 60, 189, 21, 217, 189, 61, 166, 185, 131, 190, 90, 175, 214, 60, 25, 120, 192, 60, 179, 68, 189, 61, 115, 119, 132, 61, 135, 210, 190, 61, 117, 231, 25, 61, 49, 168, 110, 189, 236, 193, 101, 61, 231, 35, 171, 61, 158, 207, 137, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 195, 161, 61, 186, 22, 69, 62, 69, 120, 114, 62, 233, 182, 52, 190, 65, 102, 87, 62, 136, 180, 10, 62, 99, 105, 173, 62, 155, 215, 239, 61, 139, 92, 128, 62, 52, 150, 144, 62, 105, 25, 236, 188, 132, 45, 6, 62, 82, 182, 154, 60, 255, 90, 135, 62, 131, 62, 16, 189, 217, 65, 35, 189, 75, 61, 12, 190, 215, 70, 89, 190, 129, 27, 174, 60, 109, 133, 170, 60, 224, 101, 242, 188, 150, 233, 38, 190, 45, 14, 194, 190, 201, 101, 0, 190, 79, 129, 187, 189, 252, 235, 150, 189, 39, 97, 44, 189, 33, 253, 226, 60, 21, 159, 106, 189, 157, 224, 156, 189, 133, 62, 169, 61, 212, 94, 168, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 241, 246, 186, 112, 192, 185, 190, 158, 17, 5, 63, 88, 179, 100, 61, 231, 36, 51, 190, 236, 127, 250, 189, 211, 113, 79, 191, 7, 111, 189, 63, 151, 10, 225, 190, 25, 246, 74, 63, 140, 234, 22, 62, 43, 147, 181, 61, 49, 101, 145, 61, 28, 236, 21, 191, 91, 166, 137, 191, 9, 214, 5, 63, 86, 79, 251, 61, 114, 23, 93, 61, 36, 11, 38, 191, 135, 10, 76, 187, 93, 105, 63, 61, 198, 138, 14, 63, 212, 207, 132, 191, 64, 43, 131, 62, 238, 162, 6, 62, 192, 70, 0, 63, 158, 23, 63, 189, 79, 62, 61, 63, 68, 70, 79, 63, 72, 11, 203, 189, 245, 124, 146, 191, 177, 73, 233, 189, 27, 141, 31, 190, 42, 21, 172, 190, 194, 44, 143, 61, 91, 42, 28, 189, 202, 230, 171, 190, 175, 36, 39, 59, 16, 28, 240, 61, 165, 51, 134, 62, 78, 101, 75, 190, 137, 156, 244, 189, 198, 174, 222, 190, 197, 19, 91, 190, 23, 251, 125, 61, 96, 95, 81, 62, 38, 166, 22, 63, 87, 75, 136, 61, 136, 58, 25, 62, 28, 161, 29, 62, 15, 175, 99, 60, 85, 208, 116, 189, 116, 13, 8, 62, 164, 175, 201, 62, 142, 217, 142, 62, 240, 38, 237, 186, 131, 99, 171, 189, 202, 134, 129, 189, 230, 251, 168, 61, 6, 111, 19, 62, 183, 214, 8, 190, 118, 21, 175, 189, 8, 74, 91, 62, 182, 110, 99, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {178, 57, 44, 190, 63, 85, 206, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {106, 157, 31, 63, 79, 7, 25, 191, 86, 75, 1, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {81, 227, 45, 64, 12, 72, 77, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0005/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}