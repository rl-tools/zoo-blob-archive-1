// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 69, 50, 63, 136, 70, 82, 190, 98, 136, 119, 62, 70, 102, 28, 62, 241, 196, 37, 191, 238, 11, 242, 190, 46, 132, 84, 63, 66, 181, 90, 191, 218, 165, 182, 190, 122, 38, 58, 191, 152, 238, 35, 191, 56, 104, 195, 187, 248, 237, 175, 190, 76, 230, 168, 190, 2, 176, 243, 188, 112, 235, 47, 190, 15, 107, 150, 63, 226, 74, 205, 61, 245, 211, 20, 63, 76, 131, 29, 63, 62, 72, 251, 62, 248, 140, 141, 191, 128, 21, 148, 188, 21, 193, 57, 61, 179, 248, 96, 63, 77, 198, 97, 61, 221, 234, 193, 62, 179, 248, 67, 62, 56, 111, 153, 62, 5, 219, 51, 191, 117, 88, 160, 62, 16, 1, 143, 191, 104, 142, 122, 190, 171, 220, 159, 62, 59, 28, 58, 63, 57, 87, 177, 190, 167, 66, 123, 63, 107, 7, 252, 62, 8, 36, 216, 62, 189, 107, 47, 191, 187, 159, 84, 63, 57, 78, 238, 62, 209, 236, 217, 190, 130, 249, 182, 190, 236, 159, 32, 190, 213, 136, 124, 191, 50, 241, 178, 190, 187, 222, 9, 63, 205, 23, 122, 63, 91, 162, 56, 190, 21, 221, 65, 61, 78, 100, 133, 61, 249, 18, 176, 191, 23, 71, 136, 190, 151, 98, 253, 189, 148, 254, 124, 61, 33, 121, 138, 62, 229, 153, 246, 59, 175, 33, 131, 63, 28, 70, 12, 62, 116, 160, 29, 63, 153, 98, 145, 191, 61, 4, 30, 190, 7, 162, 86, 63, 65, 213, 43, 191, 42, 95, 156, 190, 182, 45, 154, 189, 117, 55, 200, 62, 147, 254, 179, 61, 248, 120, 157, 190, 140, 237, 137, 191, 120, 64, 187, 190, 71, 127, 108, 191, 213, 192, 108, 189, 166, 238, 93, 190, 47, 185, 72, 63, 33, 75, 79, 62, 39, 88, 214, 190, 201, 182, 173, 62, 206, 45, 43, 63, 242, 215, 108, 190, 181, 0, 105, 63, 173, 210, 134, 63, 236, 236, 19, 61, 88, 102, 85, 62, 124, 74, 154, 190, 76, 206, 57, 191, 180, 237, 250, 190, 196, 135, 130, 63, 192, 139, 145, 62, 63, 215, 25, 62, 162, 168, 56, 191, 179, 95, 34, 62, 17, 156, 59, 190, 226, 188, 147, 191, 88, 175, 128, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 117, 155, 191, 124, 34, 23, 191, 235, 242, 41, 191, 148, 89, 97, 63, 129, 31, 56, 191, 38, 124, 163, 62, 76, 168, 148, 191, 236, 173, 197, 62, 91, 112, 233, 190, 224, 131, 161, 189, 197, 74, 188, 60, 210, 90, 149, 61, 4, 115, 210, 189, 171, 142, 232, 61, 49, 16, 15, 63, 229, 113, 21, 190, 181, 217, 21, 63, 83, 176, 115, 62, 164, 15, 203, 62, 60, 252, 166, 61, 10, 229, 156, 62, 163, 5, 13, 191, 42, 248, 128, 62, 255, 223, 71, 191, 10, 89, 221, 62, 92, 1, 172, 190, 178, 117, 18, 63, 215, 103, 98, 190, 41, 209, 224, 190, 30, 231, 20, 63, 201, 197, 72, 62, 210, 188, 142, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 155, 74, 189, 215, 220, 29, 190, 64, 40, 22, 189, 8, 38, 212, 62, 165, 234, 206, 189, 125, 144, 10, 190, 133, 247, 150, 190, 127, 128, 35, 62, 128, 194, 185, 60, 150, 191, 9, 190, 234, 249, 249, 189, 109, 112, 37, 190, 79, 173, 34, 189, 65, 102, 252, 189, 3, 241, 134, 62, 178, 75, 211, 61, 7, 236, 209, 61, 27, 110, 53, 189, 12, 169, 171, 60, 209, 150, 0, 188, 196, 168, 44, 62, 119, 74, 226, 60, 163, 134, 22, 62, 46, 143, 134, 60, 156, 21, 25, 61, 56, 229, 43, 189, 196, 49, 174, 61, 165, 136, 163, 61, 38, 6, 230, 60, 203, 136, 219, 61, 191, 72, 91, 62, 98, 152, 167, 188, 231, 180, 144, 62, 176, 71, 170, 190, 170, 212, 16, 191, 120, 130, 35, 190, 109, 35, 166, 188, 139, 173, 180, 190, 106, 20, 0, 62, 132, 153, 178, 190, 164, 150, 16, 62, 180, 142, 222, 61, 27, 26, 88, 190, 157, 167, 182, 62, 162, 229, 201, 188, 122, 169, 147, 190, 209, 139, 146, 61, 196, 149, 118, 61, 161, 11, 161, 62, 73, 127, 11, 191, 120, 66, 115, 190, 39, 100, 34, 190, 159, 133, 10, 62, 51, 64, 22, 191, 150, 246, 83, 188, 188, 176, 222, 190, 175, 55, 33, 190, 179, 211, 130, 189, 6, 71, 70, 61, 121, 247, 132, 62, 175, 129, 33, 62, 119, 161, 138, 191, 228, 147, 39, 62, 143, 224, 155, 60, 108, 116, 42, 191, 38, 128, 32, 191, 102, 229, 34, 189, 215, 207, 39, 61, 165, 84, 105, 61, 81, 48, 158, 62, 164, 253, 151, 190, 114, 239, 55, 62, 43, 198, 34, 61, 60, 243, 103, 190, 170, 54, 221, 62, 24, 154, 14, 190, 8, 183, 59, 190, 111, 181, 125, 58, 216, 97, 133, 62, 219, 191, 198, 61, 248, 194, 232, 61, 67, 83, 205, 62, 34, 37, 253, 59, 190, 47, 39, 62, 22, 251, 75, 62, 228, 92, 255, 62, 159, 171, 163, 61, 177, 175, 149, 190, 175, 144, 39, 189, 164, 8, 80, 61, 249, 45, 79, 190, 27, 227, 157, 62, 213, 181, 140, 191, 191, 190, 252, 61, 206, 49, 28, 62, 225, 44, 223, 191, 17, 64, 247, 189, 151, 8, 241, 187, 198, 204, 237, 189, 185, 95, 168, 189, 89, 27, 171, 189, 5, 171, 179, 61, 221, 51, 17, 61, 196, 60, 1, 62, 173, 150, 219, 189, 234, 220, 174, 60, 40, 218, 206, 61, 118, 212, 49, 190, 169, 85, 223, 189, 182, 82, 81, 60, 75, 160, 154, 61, 60, 105, 182, 61, 39, 19, 23, 190, 251, 192, 22, 190, 133, 1, 18, 62, 13, 98, 224, 61, 71, 54, 12, 61, 104, 188, 126, 61, 172, 98, 83, 190, 2, 108, 74, 190, 196, 51, 188, 60, 141, 58, 88, 189, 241, 124, 224, 61, 1, 53, 176, 58, 116, 177, 62, 190, 110, 24, 61, 190, 201, 38, 7, 190, 215, 84, 66, 190, 20, 156, 220, 62, 118, 89, 121, 189, 140, 30, 175, 190, 72, 114, 155, 62, 57, 217, 192, 61, 91, 121, 35, 190, 7, 103, 205, 188, 82, 0, 243, 61, 224, 110, 21, 60, 242, 162, 52, 62, 147, 243, 30, 190, 151, 51, 5, 61, 65, 53, 242, 61, 225, 253, 207, 189, 25, 47, 130, 62, 225, 93, 45, 61, 243, 238, 177, 62, 138, 82, 208, 190, 4, 17, 40, 62, 240, 181, 17, 189, 218, 49, 126, 190, 54, 68, 28, 191, 204, 126, 119, 62, 247, 197, 39, 190, 179, 177, 239, 62, 163, 40, 97, 61, 69, 5, 34, 62, 154, 42, 91, 62, 249, 0, 28, 190, 16, 143, 67, 62, 66, 72, 141, 62, 226, 31, 26, 62, 15, 82, 20, 63, 168, 171, 129, 189, 192, 49, 109, 190, 174, 136, 97, 62, 170, 0, 114, 190, 101, 213, 198, 189, 238, 240, 239, 61, 10, 104, 150, 62, 43, 226, 80, 189, 19, 70, 13, 62, 78, 55, 152, 190, 182, 72, 200, 61, 42, 187, 198, 61, 165, 48, 41, 62, 191, 138, 86, 189, 159, 244, 35, 61, 203, 93, 98, 62, 108, 112, 184, 190, 203, 70, 155, 189, 252, 250, 75, 189, 28, 14, 148, 60, 29, 170, 48, 191, 198, 192, 3, 62, 18, 45, 144, 61, 190, 183, 188, 62, 48, 127, 4, 190, 5, 96, 101, 62, 153, 195, 36, 189, 128, 243, 165, 60, 227, 108, 245, 60, 115, 145, 108, 61, 202, 188, 18, 190, 175, 13, 244, 190, 177, 53, 216, 190, 26, 26, 221, 190, 163, 54, 77, 61, 212, 244, 58, 189, 173, 253, 248, 189, 137, 119, 119, 62, 211, 139, 204, 187, 115, 205, 136, 62, 27, 247, 0, 62, 211, 210, 215, 190, 38, 128, 70, 60, 112, 127, 221, 62, 100, 165, 131, 190, 217, 246, 22, 189, 76, 90, 93, 191, 113, 59, 98, 62, 213, 198, 160, 190, 76, 234, 144, 188, 68, 119, 60, 62, 52, 115, 62, 189, 220, 209, 39, 191, 148, 54, 148, 61, 99, 58, 11, 191, 6, 172, 61, 62, 165, 147, 218, 189, 138, 242, 228, 61, 6, 20, 140, 62, 97, 103, 23, 62, 54, 38, 233, 190, 56, 131, 164, 190, 165, 130, 28, 190, 139, 147, 124, 191, 20, 14, 57, 191, 120, 41, 44, 191, 193, 245, 218, 62, 229, 33, 241, 189, 79, 61, 110, 62, 30, 92, 19, 191, 171, 117, 180, 62, 10, 251, 150, 190, 127, 5, 149, 191, 0, 247, 139, 62, 7, 79, 146, 190, 2, 223, 79, 190, 19, 68, 39, 190, 67, 180, 240, 62, 114, 240, 97, 61, 89, 183, 19, 190, 86, 200, 0, 63, 104, 187, 21, 62, 23, 118, 133, 189, 24, 236, 11, 63, 245, 19, 139, 190, 152, 43, 202, 61, 28, 220, 141, 191, 223, 171, 106, 190, 46, 177, 18, 190, 244, 229, 246, 190, 117, 64, 37, 191, 192, 52, 87, 191, 25, 55, 171, 61, 207, 145, 168, 62, 136, 21, 217, 191, 233, 75, 202, 62, 69, 74, 0, 190, 94, 52, 202, 190, 59, 1, 86, 62, 10, 129, 8, 190, 226, 87, 248, 190, 192, 168, 91, 60, 3, 7, 43, 61, 37, 18, 65, 62, 107, 98, 101, 62, 168, 98, 132, 190, 106, 119, 53, 187, 253, 172, 77, 62, 253, 211, 39, 62, 30, 87, 210, 60, 179, 187, 130, 190, 78, 254, 198, 62, 203, 69, 182, 190, 81, 201, 170, 61, 94, 204, 151, 190, 29, 43, 33, 188, 45, 13, 64, 191, 238, 219, 107, 189, 49, 89, 56, 190, 11, 226, 131, 62, 195, 155, 243, 189, 191, 73, 137, 62, 252, 116, 57, 61, 104, 195, 29, 62, 190, 45, 212, 189, 24, 245, 38, 61, 224, 98, 42, 61, 26, 168, 114, 189, 106, 245, 131, 190, 177, 4, 166, 190, 2, 230, 169, 189, 217, 134, 21, 190, 252, 183, 213, 62, 188, 163, 243, 190, 117, 211, 43, 62, 246, 160, 140, 190, 136, 152, 46, 191, 107, 42, 100, 191, 91, 19, 233, 189, 98, 50, 246, 189, 45, 243, 253, 189, 4, 117, 27, 190, 156, 147, 51, 190, 137, 250, 79, 189, 92, 146, 101, 191, 107, 4, 95, 190, 108, 224, 8, 63, 44, 136, 194, 190, 201, 155, 62, 191, 50, 47, 214, 58, 218, 20, 61, 191, 192, 87, 144, 62, 145, 86, 195, 190, 221, 108, 88, 62, 250, 69, 206, 61, 174, 247, 47, 191, 250, 16, 213, 189, 255, 182, 95, 190, 241, 80, 8, 191, 10, 115, 84, 61, 111, 39, 48, 62, 107, 50, 196, 187, 49, 116, 212, 189, 128, 164, 231, 61, 37, 247, 97, 191, 44, 214, 139, 190, 173, 228, 233, 190, 208, 163, 29, 62, 58, 149, 60, 62, 114, 102, 63, 62, 167, 123, 209, 61, 165, 208, 32, 189, 47, 211, 97, 190, 157, 229, 142, 190, 77, 222, 75, 189, 254, 234, 136, 62, 176, 178, 151, 189, 118, 78, 226, 190, 94, 139, 186, 190, 179, 234, 130, 189, 28, 246, 208, 62, 89, 48, 11, 61, 198, 78, 241, 187, 156, 249, 158, 189, 93, 246, 111, 62, 209, 107, 150, 61, 42, 211, 140, 62, 213, 192, 157, 60, 59, 29, 133, 191, 252, 181, 42, 62, 160, 58, 142, 62, 215, 242, 76, 191, 40, 204, 67, 190, 208, 26, 52, 190, 113, 33, 208, 61, 179, 207, 71, 61, 249, 24, 49, 189, 237, 225, 224, 190, 50, 237, 44, 61, 193, 183, 237, 189, 230, 215, 186, 189, 115, 247, 208, 61, 170, 152, 173, 189, 219, 0, 108, 188, 191, 70, 198, 61, 89, 68, 217, 61, 234, 102, 28, 62, 54, 158, 208, 61, 114, 227, 181, 61, 13, 100, 230, 61, 102, 75, 83, 62, 186, 253, 138, 62, 75, 111, 7, 62, 81, 105, 72, 60, 132, 206, 203, 189, 68, 183, 15, 61, 246, 83, 9, 190, 143, 141, 85, 62, 141, 179, 46, 62, 43, 11, 210, 189, 128, 70, 241, 189, 63, 41, 9, 62, 154, 181, 76, 60, 104, 118, 3, 62, 143, 163, 141, 61, 117, 199, 19, 62, 80, 119, 230, 60, 92, 70, 83, 189, 77, 115, 235, 189, 129, 58, 41, 190, 82, 102, 238, 189, 106, 72, 82, 61, 228, 139, 132, 61, 229, 159, 136, 187, 3, 159, 133, 189, 49, 159, 173, 61, 207, 184, 5, 190, 179, 189, 2, 62, 48, 113, 27, 190, 254, 192, 225, 186, 178, 79, 76, 190, 106, 93, 246, 189, 161, 80, 39, 188, 154, 204, 247, 61, 151, 111, 162, 189, 134, 118, 34, 189, 132, 199, 4, 190, 136, 153, 1, 188, 52, 71, 77, 190, 102, 177, 18, 190, 99, 65, 165, 189, 69, 198, 158, 59, 116, 11, 180, 60, 188, 220, 25, 190, 36, 6, 241, 189, 107, 211, 8, 189, 144, 105, 98, 61, 37, 64, 73, 189, 110, 48, 171, 62, 179, 202, 85, 190, 10, 145, 57, 62, 25, 48, 255, 188, 127, 25, 218, 62, 67, 26, 160, 60, 215, 197, 101, 189, 244, 218, 192, 190, 116, 47, 166, 189, 116, 150, 41, 190, 160, 52, 240, 190, 201, 236, 170, 62, 81, 13, 132, 190, 12, 117, 2, 191, 65, 53, 188, 62, 73, 127, 22, 190, 24, 129, 15, 188, 188, 112, 253, 61, 3, 75, 131, 191, 174, 131, 103, 189, 116, 166, 204, 62, 211, 134, 181, 62, 177, 200, 64, 190, 123, 86, 228, 61, 49, 187, 172, 190, 161, 189, 106, 62, 167, 40, 155, 61, 80, 50, 58, 190, 12, 151, 199, 62, 68, 55, 100, 63, 188, 216, 185, 189, 37, 19, 162, 191, 163, 78, 135, 61, 161, 128, 47, 190, 167, 149, 178, 190, 210, 189, 195, 62, 57, 177, 165, 61, 80, 188, 174, 62, 227, 168, 2, 61, 255, 144, 80, 191, 156, 11, 209, 62, 33, 108, 168, 62, 244, 5, 3, 190, 125, 207, 15, 191, 224, 129, 25, 190, 152, 59, 167, 62, 172, 90, 131, 191, 197, 184, 126, 188, 23, 124, 86, 190, 63, 219, 215, 190, 62, 44, 102, 191, 85, 104, 53, 187, 35, 30, 15, 190, 54, 7, 127, 62, 133, 207, 163, 190, 96, 149, 86, 62, 21, 10, 144, 62, 254, 96, 62, 62, 135, 147, 133, 190, 26, 108, 217, 61, 243, 55, 131, 62, 153, 94, 105, 191, 163, 66, 5, 190, 197, 74, 62, 60, 138, 111, 4, 62, 16, 31, 71, 62, 131, 186, 162, 62, 220, 66, 35, 191, 26, 79, 103, 190, 108, 27, 63, 190, 226, 20, 254, 60, 105, 202, 210, 62, 129, 1, 67, 62, 216, 19, 238, 190, 168, 254, 26, 190, 67, 196, 6, 62, 11, 59, 164, 62, 94, 70, 149, 62, 247, 11, 50, 62, 113, 245, 82, 62, 132, 25, 32, 62, 240, 7, 122, 60, 179, 135, 230, 62, 28, 41, 230, 59, 172, 148, 252, 60, 210, 1, 84, 61, 245, 145, 225, 61, 173, 99, 52, 62, 175, 151, 206, 62, 91, 23, 79, 190, 81, 181, 9, 189, 128, 98, 204, 62, 252, 55, 78, 190, 179, 89, 4, 190, 134, 217, 61, 189, 2, 225, 1, 190, 127, 74, 16, 190, 38, 243, 35, 190, 115, 223, 222, 188, 136, 233, 223, 189, 81, 126, 3, 190, 171, 12, 252, 189, 56, 160, 43, 190, 115, 200, 25, 190, 252, 21, 20, 189, 225, 69, 249, 61, 19, 177, 26, 60, 100, 70, 118, 189, 150, 204, 158, 189, 243, 117, 186, 59, 163, 157, 51, 190, 90, 155, 247, 189, 36, 198, 255, 189, 158, 130, 214, 60, 112, 185, 157, 189, 1, 217, 80, 188, 2, 20, 97, 60, 172, 142, 153, 60, 226, 115, 226, 60, 139, 116, 239, 60, 77, 13, 40, 190, 193, 129, 48, 62, 120, 155, 178, 59, 121, 11, 31, 61, 73, 85, 99, 189, 167, 24, 3, 62, 255, 158, 41, 62, 5, 35, 1, 62, 40, 181, 255, 188, 246, 6, 74, 61, 68, 7, 8, 190, 246, 70, 24, 190, 239, 65, 76, 190, 80, 228, 238, 188, 232, 112, 150, 189, 98, 17, 145, 188, 64, 54, 69, 190, 11, 26, 204, 61, 84, 15, 178, 189, 196, 63, 201, 188, 32, 224, 37, 60, 129, 107, 91, 61, 230, 68, 83, 190, 63, 88, 209, 189, 74, 197, 28, 190, 159, 15, 240, 189, 166, 23, 5, 190, 242, 56, 173, 61, 82, 185, 209, 189, 68, 202, 230, 188, 218, 52, 79, 61, 112, 107, 151, 189, 88, 142, 198, 189, 246, 108, 240, 60, 11, 95, 164, 187, 239, 97, 26, 189, 109, 107, 63, 61, 200, 64, 13, 191, 6, 185, 76, 62, 23, 165, 158, 59, 151, 148, 191, 62, 168, 243, 129, 60, 166, 57, 5, 63, 145, 146, 53, 191, 77, 129, 186, 62, 192, 93, 98, 191, 50, 25, 110, 189, 53, 87, 240, 62, 246, 102, 113, 190, 75, 44, 150, 191, 139, 44, 143, 61, 106, 65, 159, 62, 132, 242, 130, 60, 86, 2, 34, 190, 226, 233, 17, 63, 221, 123, 58, 62, 201, 96, 126, 190, 168, 133, 174, 62, 169, 44, 139, 188, 171, 141, 54, 60, 194, 150, 4, 62, 80, 53, 38, 62, 150, 247, 59, 190, 97, 148, 147, 188, 51, 7, 167, 191, 194, 196, 252, 61, 252, 165, 168, 62, 23, 96, 130, 62, 150, 30, 201, 61, 164, 181, 42, 190, 133, 191, 45, 61, 168, 182, 248, 188, 235, 76, 33, 190, 162, 169, 38, 61, 183, 197, 140, 60, 182, 3, 105, 60, 30, 53, 185, 59, 11, 6, 4, 61, 163, 126, 82, 190, 233, 104, 133, 61, 100, 214, 18, 189, 107, 97, 66, 190, 138, 193, 9, 62, 184, 252, 214, 189, 241, 144, 83, 189, 209, 147, 205, 61, 58, 189, 27, 190, 150, 8, 14, 61, 156, 105, 204, 61, 234, 211, 39, 190, 93, 141, 17, 62, 88, 26, 11, 190, 106, 237, 158, 61, 87, 241, 18, 62, 35, 4, 228, 61, 81, 150, 252, 189, 217, 106, 248, 61, 175, 31, 122, 61, 207, 75, 218, 189, 39, 159, 163, 189, 45, 56, 140, 59, 173, 160, 19, 62, 43, 180, 215, 61, 19, 38, 123, 189, 58, 219, 239, 61, 204, 35, 105, 189, 74, 4, 30, 188, 153, 59, 6, 189, 5, 128, 217, 60, 42, 230, 45, 190, 138, 169, 27, 189, 84, 240, 240, 189, 228, 94, 197, 61, 147, 195, 4, 190, 250, 35, 239, 189, 232, 35, 29, 61, 236, 135, 223, 189, 94, 137, 37, 188, 31, 139, 166, 189, 3, 195, 231, 61, 161, 250, 12, 190, 154, 214, 212, 60, 242, 89, 234, 59, 246, 93, 207, 188, 68, 174, 133, 188, 110, 244, 187, 189, 14, 112, 49, 190, 98, 174, 20, 190, 6, 233, 110, 188, 204, 158, 162, 189, 103, 83, 203, 189, 133, 51, 84, 189, 20, 189, 183, 189, 197, 235, 70, 191, 71, 46, 96, 189, 208, 22, 235, 62, 167, 115, 48, 190, 40, 17, 28, 62, 217, 47, 253, 61, 44, 125, 130, 189, 55, 236, 247, 61, 153, 68, 95, 190, 29, 38, 25, 61, 4, 150, 186, 62, 117, 61, 198, 189, 26, 27, 101, 190, 208, 91, 131, 62, 228, 182, 104, 61, 50, 251, 104, 61, 233, 110, 163, 190, 119, 223, 66, 187, 134, 3, 15, 62, 124, 247, 217, 188, 114, 136, 125, 62, 101, 245, 4, 63, 57, 236, 121, 189, 17, 3, 171, 190, 199, 145, 92, 190, 93, 38, 21, 62, 118, 6, 173, 189, 67, 93, 166, 189, 184, 58, 55, 190, 231, 15, 247, 61, 8, 94, 21, 190, 38, 161, 30, 191, 209, 232, 86, 190, 144, 208, 93, 61, 64, 75, 183, 62, 172, 223, 239, 189, 172, 87, 126, 61, 176, 192, 136, 190, 77, 236, 84, 190, 189, 169, 87, 191, 59, 121, 143, 190, 43, 253, 169, 190, 123, 128, 81, 62, 248, 198, 123, 190, 34, 246, 111, 191, 203, 46, 132, 62, 126, 24, 66, 190, 6, 109, 144, 62, 253, 86, 12, 189, 121, 231, 47, 62, 212, 8, 3, 63, 254, 28, 11, 191, 210, 19, 159, 61, 106, 122, 2, 63, 212, 102, 17, 191, 166, 2, 13, 191, 155, 159, 151, 191, 222, 240, 74, 190, 82, 187, 206, 190, 125, 54, 13, 190, 167, 204, 106, 189, 90, 160, 48, 190, 64, 200, 14, 63, 229, 27, 248, 190, 22, 192, 245, 190, 62, 147, 116, 62, 121, 13, 138, 62, 221, 36, 221, 61, 254, 145, 55, 61, 242, 91, 17, 190, 97, 31, 56, 190, 151, 209, 130, 190, 148, 250, 56, 61, 81, 37, 71, 62, 52, 34, 168, 61, 29, 89, 78, 189, 10, 205, 118, 189, 154, 196, 207, 188, 116, 32, 158, 189, 115, 176, 102, 62, 92, 251, 3, 62, 145, 176, 107, 61, 7, 146, 49, 190, 232, 179, 120, 189, 82, 177, 118, 62, 70, 123, 169, 62, 252, 51, 140, 61, 53, 120, 87, 62, 138, 90, 66, 190, 226, 155, 3, 60, 131, 130, 48, 190, 227, 144, 218, 61, 156, 160, 9, 62, 101, 15, 173, 190, 204, 88, 176, 62, 102, 147, 33, 62, 58, 197, 179, 61, 160, 95, 172, 189, 54, 169, 24, 62, 160, 105, 68, 188, 81, 131, 51, 62, 225, 248, 27, 190, 155, 251, 194, 61, 186, 189, 93, 189, 213, 238, 167, 61, 63, 210, 25, 187, 37, 94, 8, 62, 247, 92, 21, 190, 4, 1, 134, 189, 200, 61, 34, 190, 190, 102, 87, 189, 106, 45, 202, 61, 107, 78, 216, 189, 193, 58, 191, 189, 179, 56, 198, 188, 5, 149, 206, 189, 184, 162, 109, 189, 249, 122, 43, 62, 255, 188, 4, 60, 46, 75, 40, 190, 253, 57, 175, 61, 9, 11, 22, 190, 151, 5, 3, 190, 178, 144, 23, 61, 93, 185, 34, 60, 15, 124, 209, 189, 52, 177, 170, 61, 60, 218, 183, 61, 73, 206, 201, 61, 86, 80, 51, 60, 80, 16, 112, 62, 60, 156, 135, 190, 9, 197, 208, 58, 108, 36, 135, 62, 50, 169, 98, 62, 10, 160, 174, 191, 138, 34, 192, 62, 35, 160, 20, 190, 99, 129, 65, 61, 9, 121, 60, 62, 14, 166, 220, 62, 106, 200, 128, 190, 59, 235, 210, 189, 117, 101, 166, 190, 14, 64, 144, 62, 177, 88, 35, 61, 187, 85, 28, 189, 39, 0, 144, 62, 60, 78, 142, 61, 161, 84, 20, 62, 239, 16, 212, 60, 163, 66, 129, 62, 253, 14, 224, 190, 231, 177, 116, 62, 59, 138, 213, 189, 146, 98, 122, 61, 92, 166, 252, 61, 100, 174, 129, 62, 130, 19, 3, 191, 3, 95, 171, 189, 164, 221, 112, 61, 5, 56, 154, 61, 251, 75, 147, 61, 205, 26, 236, 188, 62, 105, 46, 190, 149, 49, 135, 61, 195, 181, 41, 62, 80, 18, 20, 190, 233, 100, 243, 189, 22, 171, 182, 61, 223, 49, 223, 60, 155, 231, 233, 61, 192, 244, 31, 189, 80, 126, 87, 61, 78, 173, 1, 188, 151, 148, 173, 61, 31, 57, 136, 189, 194, 138, 144, 189, 94, 0, 235, 189, 122, 58, 0, 62, 100, 204, 100, 190, 172, 182, 37, 61, 134, 227, 99, 61, 130, 39, 49, 190, 124, 59, 75, 190, 230, 93, 213, 189, 145, 198, 24, 190, 247, 136, 82, 190, 28, 225, 223, 60, 195, 128, 72, 190, 22, 148, 26, 190, 144, 28, 203, 61, 134, 83, 189, 190, 92, 75, 135, 190, 102, 230, 193, 190, 182, 1, 72, 189, 228, 31, 254, 189, 132, 181, 65, 62, 61, 252, 119, 190, 181, 181, 161, 61, 147, 94, 42, 190, 180, 194, 58, 190, 248, 102, 48, 191, 119, 11, 53, 190, 214, 95, 121, 190, 216, 202, 71, 191, 122, 232, 54, 62, 159, 164, 130, 190, 218, 137, 31, 191, 192, 219, 2, 191, 87, 160, 67, 190, 246, 214, 16, 62, 68, 65, 214, 190, 132, 164, 29, 190, 26, 84, 162, 190, 73, 88, 98, 191, 87, 228, 146, 62, 129, 105, 118, 189, 42, 226, 205, 61, 219, 168, 144, 61, 67, 197, 22, 191, 62, 44, 126, 189, 232, 179, 12, 190, 13, 104, 38, 191, 58, 150, 141, 189, 203, 5, 186, 190, 66, 127, 232, 190, 144, 76, 197, 61, 118, 36, 56, 61, 152, 236, 0, 189, 91, 74, 191, 189, 115, 19, 181, 62, 49, 250, 142, 190, 0, 39, 46, 62, 97, 184, 47, 62, 227, 19, 24, 62, 55, 34, 180, 190, 151, 246, 130, 191, 221, 78, 81, 62, 26, 129, 115, 189, 81, 142, 143, 190, 254, 244, 59, 62, 20, 131, 29, 191, 104, 101, 89, 190, 52, 114, 81, 189, 32, 51, 136, 190, 111, 156, 202, 190, 216, 163, 205, 60, 252, 112, 159, 62, 6, 1, 107, 190, 46, 157, 82, 190, 56, 231, 50, 191, 229, 234, 52, 62, 83, 157, 190, 190, 94, 66, 153, 190, 49, 107, 222, 61, 168, 90, 44, 62, 163, 83, 164, 187, 182, 68, 14, 190, 237, 196, 26, 62, 154, 220, 182, 61, 110, 5, 59, 190, 224, 136, 159, 189, 198, 53, 50, 190, 93, 102, 79, 189, 73, 38, 131, 189, 0, 71, 31, 188, 74, 45, 41, 190, 171, 48, 159, 60, 216, 172, 13, 190, 18, 32, 57, 190, 130, 130, 124, 61, 53, 253, 21, 190, 27, 252, 125, 61, 176, 107, 12, 60, 247, 244, 50, 190, 235, 74, 226, 189, 236, 96, 176, 188, 217, 177, 25, 62, 110, 17, 190, 57, 178, 192, 157, 61, 117, 135, 48, 62, 43, 243, 36, 60, 187, 154, 73, 61, 70, 71, 158, 189, 10, 231, 47, 60, 155, 55, 245, 189, 218, 233, 219, 60, 98, 227, 193, 190, 92, 243, 252, 60, 139, 196, 32, 191, 147, 65, 43, 191, 13, 43, 195, 189, 62, 47, 171, 62, 183, 237, 47, 190, 43, 124, 109, 191, 120, 20, 151, 188, 241, 168, 2, 62, 139, 163, 178, 190, 72, 175, 151, 61, 26, 62, 253, 189, 187, 126, 102, 190, 225, 233, 144, 190, 17, 211, 247, 190, 162, 246, 23, 62, 50, 98, 108, 191, 164, 200, 112, 190, 182, 123, 182, 62, 255, 15, 153, 187, 194, 67, 146, 190, 108, 191, 59, 62, 92, 47, 187, 190, 96, 132, 77, 190, 220, 84, 171, 189, 58, 48, 233, 62, 234, 78, 59, 190, 103, 119, 160, 189, 122, 12, 1, 62, 17, 72, 244, 190, 175, 111, 6, 191, 30, 116, 184, 62, 241, 63, 189, 60, 214, 138, 131, 190, 142, 126, 167, 62, 136, 197, 52, 190, 4, 127, 130, 190, 56, 121, 4, 62, 207, 119, 34, 62, 200, 178, 24, 62, 195, 177, 109, 190, 118, 96, 212, 61, 56, 255, 161, 61, 86, 154, 95, 62, 180, 226, 170, 61, 51, 249, 229, 188, 82, 103, 17, 190, 146, 210, 71, 62, 128, 43, 161, 189, 186, 27, 56, 62, 188, 130, 243, 188, 60, 170, 210, 61, 178, 237, 134, 190, 100, 65, 23, 61, 255, 255, 21, 189, 18, 253, 170, 61, 205, 29, 7, 61, 102, 183, 132, 61, 8, 208, 128, 60, 87, 236, 178, 189, 251, 113, 203, 61, 175, 185, 224, 61, 223, 39, 133, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 5, 142, 61, 155, 54, 70, 62, 142, 241, 108, 62, 233, 182, 52, 190, 195, 183, 93, 62, 29, 38, 10, 62, 26, 115, 172, 62, 217, 133, 217, 61, 215, 249, 128, 62, 126, 248, 148, 62, 41, 29, 13, 189, 177, 134, 3, 62, 82, 182, 154, 60, 97, 246, 152, 62, 93, 215, 239, 188, 182, 62, 37, 189, 75, 61, 12, 190, 215, 70, 89, 190, 195, 3, 70, 61, 109, 133, 170, 60, 224, 101, 242, 188, 48, 190, 60, 190, 60, 72, 186, 190, 134, 139, 245, 189, 79, 129, 187, 189, 161, 24, 131, 189, 39, 97, 44, 189, 33, 253, 226, 60, 11, 200, 215, 189, 157, 224, 156, 189, 120, 241, 172, 61, 99, 218, 168, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 21, 211, 187, 103, 133, 167, 190, 49, 103, 0, 63, 88, 179, 100, 61, 68, 49, 37, 190, 72, 190, 200, 189, 65, 167, 68, 191, 198, 125, 196, 63, 56, 44, 213, 190, 148, 234, 94, 63, 238, 179, 254, 61, 158, 148, 156, 61, 49, 101, 145, 61, 7, 76, 31, 191, 124, 160, 167, 191, 153, 204, 3, 63, 86, 79, 251, 61, 114, 23, 93, 61, 8, 134, 43, 191, 135, 10, 76, 187, 93, 105, 63, 61, 117, 32, 248, 62, 203, 102, 136, 191, 172, 50, 89, 62, 238, 162, 6, 62, 73, 213, 1, 63, 158, 23, 63, 189, 79, 62, 61, 63, 135, 145, 79, 63, 72, 11, 203, 189, 123, 66, 155, 191, 72, 121, 225, 189, 9, 135, 46, 190, 65, 65, 155, 190, 13, 209, 111, 61, 91, 42, 28, 189, 254, 209, 181, 190, 27, 32, 132, 188, 247, 208, 237, 61, 192, 170, 133, 62, 143, 59, 91, 190, 99, 245, 250, 189, 122, 184, 210, 190, 34, 77, 123, 190, 23, 251, 125, 61, 170, 147, 119, 62, 30, 31, 232, 62, 29, 246, 10, 61, 136, 58, 25, 62, 28, 161, 29, 62, 127, 158, 111, 187, 85, 208, 116, 189, 116, 13, 8, 62, 171, 123, 196, 62, 180, 248, 128, 62, 64, 179, 25, 189, 131, 99, 171, 189, 144, 132, 160, 189, 230, 251, 168, 61, 6, 111, 19, 62, 43, 199, 216, 189, 118, 21, 175, 189, 91, 112, 28, 62, 55, 133, 124, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 39, 50, 190, 135, 60, 222, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {90, 26, 30, 191, 107, 174, 111, 191, 202, 243, 213, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {252, 116, 151, 63, 157, 253, 130, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0005/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}