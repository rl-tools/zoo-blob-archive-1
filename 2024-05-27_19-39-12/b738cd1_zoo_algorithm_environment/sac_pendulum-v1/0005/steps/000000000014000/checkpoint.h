// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {188, 193, 36, 63, 153, 108, 63, 190, 96, 99, 121, 62, 41, 20, 101, 62, 161, 120, 8, 191, 126, 98, 236, 190, 127, 167, 81, 63, 198, 42, 84, 191, 201, 123, 164, 190, 151, 221, 50, 191, 226, 251, 32, 191, 123, 11, 222, 188, 248, 237, 175, 190, 76, 230, 168, 190, 2, 176, 243, 188, 12, 15, 53, 190, 165, 249, 140, 63, 42, 107, 144, 61, 5, 249, 30, 63, 239, 147, 13, 63, 209, 27, 3, 63, 129, 125, 137, 191, 122, 199, 22, 190, 154, 44, 77, 61, 115, 184, 99, 63, 242, 111, 137, 188, 77, 5, 198, 62, 109, 250, 130, 62, 196, 174, 0, 63, 199, 33, 21, 191, 227, 45, 164, 62, 35, 110, 143, 191, 120, 60, 92, 190, 215, 166, 177, 62, 177, 233, 57, 63, 110, 203, 221, 190, 179, 88, 125, 63, 177, 62, 230, 62, 209, 230, 221, 62, 110, 61, 32, 191, 158, 80, 65, 63, 251, 81, 254, 62, 103, 19, 219, 190, 126, 94, 150, 190, 117, 98, 27, 190, 107, 194, 114, 191, 94, 86, 16, 190, 145, 136, 16, 63, 80, 251, 122, 63, 66, 112, 57, 190, 43, 224, 91, 61, 224, 177, 70, 61, 106, 227, 173, 191, 39, 150, 134, 190, 247, 229, 99, 190, 108, 194, 214, 61, 214, 63, 172, 62, 228, 213, 78, 61, 195, 194, 102, 63, 52, 157, 167, 61, 116, 24, 36, 63, 217, 221, 143, 191, 12, 102, 3, 190, 125, 207, 89, 63, 209, 178, 59, 191, 49, 58, 138, 190, 214, 108, 40, 61, 108, 24, 191, 62, 0, 97, 231, 61, 168, 123, 171, 190, 70, 255, 105, 191, 78, 239, 202, 190, 198, 143, 86, 191, 86, 179, 56, 189, 28, 57, 40, 190, 251, 207, 76, 63, 200, 75, 125, 62, 62, 4, 228, 190, 179, 239, 185, 62, 254, 14, 45, 63, 249, 185, 83, 190, 229, 98, 122, 63, 241, 30, 106, 63, 197, 159, 145, 189, 228, 92, 160, 61, 75, 181, 220, 190, 62, 242, 35, 191, 79, 98, 2, 191, 107, 17, 119, 63, 180, 196, 153, 62, 131, 87, 3, 62, 145, 82, 62, 191, 166, 49, 43, 62, 217, 110, 77, 189, 204, 196, 135, 191, 166, 236, 53, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 218, 151, 191, 237, 164, 48, 191, 107, 215, 45, 191, 71, 148, 95, 63, 129, 31, 56, 191, 130, 229, 169, 62, 206, 209, 139, 191, 92, 198, 128, 62, 240, 101, 213, 190, 249, 10, 18, 189, 14, 242, 14, 60, 46, 192, 175, 61, 15, 36, 144, 189, 195, 15, 17, 61, 100, 59, 20, 63, 30, 24, 242, 189, 229, 115, 27, 63, 174, 0, 83, 62, 179, 128, 152, 62, 111, 172, 62, 62, 199, 14, 173, 62, 174, 202, 8, 191, 156, 212, 180, 62, 82, 193, 70, 191, 63, 191, 212, 62, 22, 3, 158, 190, 19, 144, 19, 63, 35, 142, 6, 190, 194, 130, 255, 190, 95, 249, 17, 63, 182, 228, 52, 62, 62, 36, 169, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {134, 48, 45, 190, 131, 124, 206, 189, 183, 43, 156, 189, 197, 31, 196, 62, 165, 234, 206, 189, 248, 200, 253, 189, 244, 200, 167, 190, 37, 124, 114, 62, 192, 228, 60, 60, 35, 106, 212, 189, 245, 73, 27, 190, 30, 226, 202, 189, 238, 57, 212, 188, 23, 243, 3, 190, 73, 2, 147, 62, 147, 89, 188, 61, 70, 69, 245, 61, 56, 255, 176, 189, 78, 63, 48, 58, 53, 121, 47, 60, 134, 174, 19, 62, 212, 35, 2, 61, 93, 51, 48, 62, 204, 35, 231, 61, 114, 49, 193, 61, 196, 76, 105, 60, 241, 96, 10, 62, 91, 189, 9, 62, 64, 109, 154, 61, 65, 249, 223, 61, 210, 157, 12, 62, 87, 230, 175, 188, 219, 165, 135, 62, 196, 37, 159, 190, 24, 45, 54, 191, 197, 194, 6, 190, 109, 35, 166, 188, 39, 36, 157, 190, 45, 11, 22, 62, 38, 77, 93, 190, 2, 105, 59, 62, 29, 33, 242, 61, 42, 133, 133, 190, 25, 225, 190, 62, 113, 88, 34, 59, 228, 37, 132, 190, 242, 192, 51, 61, 239, 72, 8, 62, 249, 134, 163, 62, 70, 67, 28, 191, 185, 205, 75, 190, 215, 243, 251, 189, 186, 224, 252, 61, 61, 151, 37, 191, 103, 139, 23, 59, 133, 119, 170, 190, 104, 52, 5, 190, 57, 69, 149, 189, 84, 221, 60, 61, 157, 139, 132, 62, 229, 100, 25, 62, 155, 199, 123, 191, 112, 38, 33, 62, 18, 101, 165, 61, 35, 122, 13, 191, 15, 55, 51, 191, 133, 129, 101, 61, 248, 186, 79, 61, 165, 84, 105, 61, 35, 23, 143, 62, 100, 94, 104, 190, 246, 111, 95, 62, 104, 137, 38, 61, 162, 24, 115, 190, 66, 116, 235, 62, 160, 228, 50, 190, 36, 104, 64, 190, 107, 111, 71, 61, 206, 145, 151, 62, 78, 85, 248, 61, 252, 228, 217, 61, 58, 241, 218, 62, 76, 255, 0, 61, 133, 169, 13, 62, 24, 31, 88, 62, 138, 98, 11, 63, 252, 127, 179, 61, 14, 25, 226, 190, 12, 138, 57, 189, 204, 79, 140, 61, 148, 21, 100, 190, 108, 134, 144, 62, 159, 231, 110, 191, 112, 73, 21, 62, 139, 199, 46, 62, 237, 175, 233, 191, 17, 64, 247, 189, 151, 8, 241, 187, 198, 204, 237, 189, 245, 252, 163, 189, 89, 27, 171, 189, 14, 29, 184, 61, 221, 51, 17, 61, 109, 169, 3, 62, 173, 150, 219, 189, 234, 220, 174, 60, 40, 218, 206, 61, 118, 212, 49, 190, 169, 85, 223, 189, 215, 126, 131, 60, 166, 150, 156, 61, 33, 39, 188, 61, 39, 19, 23, 190, 251, 192, 22, 190, 45, 5, 20, 62, 112, 72, 227, 61, 71, 54, 12, 61, 104, 188, 126, 61, 201, 33, 82, 190, 2, 108, 74, 190, 168, 63, 200, 60, 141, 58, 88, 189, 91, 85, 225, 61, 1, 53, 176, 58, 116, 177, 62, 190, 233, 92, 57, 190, 201, 38, 7, 190, 215, 84, 66, 190, 35, 179, 156, 62, 152, 108, 200, 189, 82, 114, 252, 190, 95, 93, 129, 62, 57, 217, 192, 61, 112, 208, 34, 190, 206, 238, 180, 189, 115, 59, 237, 61, 130, 44, 23, 187, 57, 179, 14, 62, 9, 226, 93, 190, 94, 215, 7, 61, 97, 152, 242, 61, 194, 128, 13, 190, 160, 61, 68, 62, 2, 24, 150, 60, 51, 151, 183, 62, 16, 43, 0, 191, 245, 13, 9, 62, 132, 105, 144, 188, 152, 95, 139, 190, 4, 69, 43, 191, 211, 193, 117, 62, 132, 216, 22, 190, 85, 161, 213, 62, 132, 233, 241, 60, 116, 68, 40, 62, 222, 247, 120, 62, 70, 125, 84, 190, 62, 226, 49, 62, 19, 185, 104, 62, 110, 179, 6, 62, 157, 140, 254, 62, 43, 91, 240, 189, 186, 93, 197, 190, 199, 132, 96, 62, 170, 0, 114, 190, 192, 77, 163, 189, 207, 3, 156, 61, 212, 70, 139, 62, 13, 222, 14, 189, 244, 217, 204, 61, 157, 135, 170, 190, 30, 105, 191, 61, 38, 43, 233, 61, 64, 147, 16, 62, 194, 80, 231, 189, 42, 255, 4, 61, 66, 144, 112, 62, 129, 77, 207, 190, 85, 1, 155, 189, 162, 229, 170, 188, 39, 99, 79, 60, 87, 38, 66, 191, 253, 227, 8, 62, 137, 240, 144, 61, 79, 17, 161, 62, 138, 176, 46, 190, 70, 233, 105, 62, 81, 96, 90, 188, 35, 165, 98, 189, 233, 140, 203, 60, 90, 219, 110, 61, 87, 165, 198, 189, 48, 24, 227, 190, 93, 120, 200, 190, 219, 189, 14, 191, 196, 48, 41, 61, 212, 244, 58, 189, 241, 111, 176, 189, 109, 218, 35, 62, 65, 115, 144, 60, 160, 7, 152, 62, 5, 217, 19, 62, 107, 101, 243, 190, 77, 96, 59, 61, 0, 136, 232, 62, 162, 34, 166, 190, 57, 105, 175, 189, 6, 119, 79, 191, 206, 151, 106, 62, 182, 63, 198, 190, 159, 53, 195, 59, 198, 21, 89, 62, 82, 28, 129, 189, 49, 21, 54, 191, 89, 104, 178, 61, 174, 137, 222, 190, 149, 228, 74, 62, 9, 153, 244, 189, 216, 200, 240, 61, 143, 246, 143, 62, 38, 34, 9, 62, 129, 58, 218, 190, 211, 121, 170, 190, 79, 251, 9, 190, 192, 61, 84, 191, 57, 17, 200, 190, 21, 121, 26, 191, 254, 8, 222, 62, 229, 33, 241, 189, 15, 127, 156, 62, 224, 175, 11, 191, 178, 31, 180, 62, 160, 59, 154, 190, 123, 118, 144, 191, 131, 61, 137, 62, 250, 206, 9, 191, 139, 121, 77, 190, 121, 143, 32, 190, 83, 239, 12, 63, 43, 48, 61, 61, 234, 210, 28, 190, 55, 30, 1, 63, 168, 128, 19, 62, 28, 91, 225, 59, 63, 248, 7, 63, 117, 146, 106, 190, 195, 68, 20, 62, 119, 220, 113, 191, 191, 0, 131, 189, 118, 73, 165, 190, 195, 77, 225, 190, 15, 64, 22, 191, 254, 187, 30, 191, 61, 250, 242, 61, 251, 166, 161, 62, 2, 160, 186, 191, 115, 163, 136, 62, 100, 23, 45, 190, 124, 218, 13, 191, 236, 92, 59, 62, 10, 129, 8, 190, 255, 70, 236, 190, 88, 99, 169, 188, 203, 198, 81, 61, 170, 34, 71, 62, 90, 93, 55, 62, 30, 219, 152, 190, 126, 127, 154, 188, 109, 95, 92, 62, 169, 88, 27, 62, 3, 93, 56, 189, 51, 251, 131, 190, 108, 89, 202, 62, 90, 223, 209, 190, 13, 236, 152, 61, 95, 79, 129, 190, 112, 151, 166, 188, 190, 246, 81, 191, 245, 54, 98, 189, 241, 86, 22, 190, 206, 69, 71, 62, 170, 182, 33, 190, 82, 60, 128, 62, 50, 16, 88, 61, 174, 8, 174, 61, 219, 181, 207, 189, 216, 89, 176, 59, 128, 127, 201, 61, 26, 168, 114, 189, 24, 182, 115, 190, 177, 4, 166, 190, 103, 38, 225, 61, 217, 134, 21, 190, 207, 15, 191, 62, 99, 186, 183, 190, 89, 155, 189, 62, 34, 71, 146, 190, 55, 240, 238, 190, 173, 63, 97, 191, 9, 126, 29, 190, 104, 140, 34, 190, 97, 148, 196, 189, 231, 72, 52, 61, 125, 190, 89, 189, 124, 93, 215, 189, 205, 200, 94, 191, 38, 139, 110, 190, 110, 211, 246, 62, 252, 11, 233, 189, 0, 76, 59, 191, 17, 250, 21, 189, 103, 44, 59, 191, 227, 77, 219, 62, 140, 95, 251, 189, 198, 84, 32, 62, 209, 49, 3, 61, 169, 16, 3, 191, 155, 119, 6, 190, 210, 168, 241, 189, 238, 150, 6, 191, 102, 64, 81, 61, 138, 66, 72, 62, 105, 250, 158, 188, 23, 2, 157, 189, 128, 164, 231, 61, 89, 146, 100, 191, 104, 227, 138, 190, 167, 233, 183, 190, 49, 65, 66, 62, 173, 92, 61, 62, 243, 40, 76, 62, 160, 130, 8, 62, 210, 107, 232, 187, 18, 127, 101, 190, 243, 184, 118, 190, 79, 101, 12, 189, 63, 217, 144, 62, 191, 251, 113, 189, 27, 58, 187, 190, 196, 155, 193, 190, 117, 211, 85, 189, 16, 150, 208, 62, 169, 54, 82, 61, 89, 119, 153, 61, 30, 14, 135, 58, 166, 241, 130, 62, 3, 146, 186, 61, 249, 188, 151, 62, 1, 154, 134, 61, 254, 102, 135, 191, 223, 88, 76, 62, 124, 192, 138, 62, 58, 63, 79, 191, 70, 166, 73, 190, 10, 52, 77, 190, 3, 94, 146, 61, 179, 207, 71, 61, 105, 240, 55, 189, 133, 137, 214, 190, 192, 31, 239, 61, 202, 118, 13, 190, 165, 208, 242, 189, 96, 12, 148, 61, 232, 186, 164, 189, 98, 92, 182, 188, 30, 234, 243, 61, 216, 241, 4, 62, 220, 3, 32, 62, 43, 140, 169, 61, 119, 202, 46, 61, 62, 121, 218, 61, 138, 92, 78, 62, 246, 191, 125, 62, 145, 21, 9, 62, 112, 169, 212, 60, 215, 43, 39, 189, 85, 118, 1, 62, 161, 112, 220, 189, 95, 249, 77, 62, 151, 69, 42, 62, 196, 114, 108, 189, 30, 13, 220, 189, 61, 42, 177, 61, 123, 77, 124, 189, 104, 118, 3, 62, 143, 163, 141, 61, 117, 199, 19, 62, 80, 119, 230, 60, 92, 70, 83, 189, 77, 115, 235, 189, 129, 58, 41, 190, 82, 102, 238, 189, 106, 72, 82, 61, 228, 139, 132, 61, 229, 159, 136, 187, 3, 159, 133, 189, 49, 159, 173, 61, 207, 184, 5, 190, 179, 189, 2, 62, 48, 113, 27, 190, 254, 192, 225, 186, 178, 79, 76, 190, 106, 93, 246, 189, 161, 80, 39, 188, 154, 204, 247, 61, 151, 111, 162, 189, 134, 118, 34, 189, 132, 199, 4, 190, 136, 153, 1, 188, 52, 71, 77, 190, 102, 177, 18, 190, 99, 65, 165, 189, 69, 198, 158, 59, 116, 11, 180, 60, 188, 220, 25, 190, 36, 6, 241, 189, 107, 211, 8, 189, 33, 108, 32, 61, 132, 25, 107, 189, 117, 46, 129, 62, 179, 202, 85, 190, 146, 13, 13, 62, 25, 48, 255, 188, 92, 115, 178, 62, 70, 40, 163, 188, 152, 128, 107, 189, 243, 110, 204, 190, 150, 191, 162, 189, 38, 94, 112, 190, 90, 156, 26, 191, 79, 176, 143, 62, 146, 149, 155, 190, 70, 27, 232, 190, 172, 194, 170, 62, 7, 154, 57, 190, 114, 217, 122, 188, 106, 109, 224, 61, 55, 11, 132, 191, 156, 221, 16, 190, 190, 12, 185, 62, 92, 149, 151, 62, 154, 221, 45, 190, 162, 205, 240, 61, 29, 141, 147, 190, 128, 236, 100, 62, 14, 26, 148, 189, 204, 196, 108, 190, 217, 26, 174, 62, 189, 182, 63, 63, 19, 182, 6, 190, 249, 110, 78, 191, 206, 18, 171, 61, 161, 128, 47, 190, 136, 74, 196, 190, 236, 71, 197, 62, 129, 29, 32, 62, 251, 33, 150, 62, 97, 134, 140, 61, 170, 63, 41, 191, 81, 86, 220, 62, 160, 253, 146, 62, 43, 152, 167, 189, 216, 226, 5, 191, 232, 10, 0, 190, 152, 173, 164, 62, 19, 239, 81, 191, 161, 161, 23, 189, 240, 184, 116, 190, 219, 185, 204, 190, 85, 244, 56, 191, 105, 87, 176, 188, 12, 175, 212, 189, 64, 206, 25, 62, 124, 72, 151, 190, 245, 159, 76, 62, 151, 141, 135, 62, 157, 254, 62, 62, 149, 200, 144, 190, 197, 243, 154, 61, 112, 135, 136, 62, 20, 136, 76, 191, 7, 149, 232, 189, 26, 118, 157, 61, 11, 166, 18, 62, 16, 31, 71, 62, 166, 57, 114, 62, 60, 104, 17, 191, 233, 143, 66, 190, 82, 219, 72, 190, 235, 176, 84, 61, 125, 177, 221, 62, 3, 140, 62, 62, 196, 81, 247, 190, 30, 246, 10, 190, 206, 74, 67, 62, 182, 60, 171, 62, 135, 14, 140, 62, 122, 247, 77, 62, 146, 251, 83, 62, 43, 170, 133, 61, 80, 1, 117, 60, 215, 23, 250, 62, 117, 100, 83, 188, 142, 33, 76, 60, 255, 229, 237, 61, 59, 5, 12, 62, 173, 121, 45, 62, 152, 60, 196, 62, 183, 27, 29, 190, 52, 65, 148, 189, 154, 177, 214, 62, 32, 109, 106, 190, 179, 89, 4, 190, 134, 217, 61, 189, 2, 225, 1, 190, 127, 74, 16, 190, 38, 243, 35, 190, 115, 223, 222, 188, 136, 233, 223, 189, 81, 126, 3, 190, 171, 12, 252, 189, 56, 160, 43, 190, 115, 200, 25, 190, 252, 21, 20, 189, 225, 69, 249, 61, 19, 177, 26, 60, 100, 70, 118, 189, 150, 204, 158, 189, 243, 117, 186, 59, 163, 157, 51, 190, 90, 155, 247, 189, 36, 198, 255, 189, 158, 130, 214, 60, 112, 185, 157, 189, 1, 217, 80, 188, 2, 20, 97, 60, 172, 142, 153, 60, 226, 115, 226, 60, 139, 116, 239, 60, 77, 13, 40, 190, 193, 129, 48, 62, 120, 155, 178, 59, 121, 11, 31, 61, 73, 85, 99, 189, 167, 24, 3, 62, 255, 158, 41, 62, 5, 35, 1, 62, 40, 181, 255, 188, 246, 6, 74, 61, 68, 7, 8, 190, 246, 70, 24, 190, 239, 65, 76, 190, 80, 228, 238, 188, 232, 112, 150, 189, 98, 17, 145, 188, 64, 54, 69, 190, 11, 26, 204, 61, 84, 15, 178, 189, 196, 63, 201, 188, 32, 224, 37, 60, 129, 107, 91, 61, 230, 68, 83, 190, 63, 88, 209, 189, 74, 197, 28, 190, 159, 15, 240, 189, 166, 23, 5, 190, 242, 56, 173, 61, 82, 185, 209, 189, 68, 202, 230, 188, 218, 52, 79, 61, 112, 107, 151, 189, 88, 142, 198, 189, 246, 108, 240, 60, 11, 95, 164, 187, 239, 97, 26, 189, 109, 107, 63, 61, 63, 119, 10, 191, 52, 243, 59, 62, 89, 245, 164, 61, 70, 5, 173, 62, 168, 243, 129, 60, 44, 242, 185, 62, 16, 150, 7, 191, 90, 6, 151, 62, 224, 83, 63, 191, 208, 39, 218, 189, 59, 7, 5, 63, 166, 155, 152, 190, 128, 237, 134, 191, 174, 136, 237, 61, 45, 225, 129, 62, 221, 199, 184, 61, 72, 87, 102, 189, 82, 172, 24, 63, 176, 178, 86, 62, 50, 254, 166, 190, 80, 240, 208, 62, 97, 251, 124, 61, 10, 149, 104, 189, 42, 51, 239, 61, 108, 18, 60, 61, 202, 151, 42, 190, 104, 171, 55, 189, 207, 5, 158, 191, 85, 45, 196, 61, 133, 217, 139, 62, 154, 174, 151, 62, 76, 209, 9, 62, 164, 181, 42, 190, 133, 191, 45, 61, 168, 182, 248, 188, 235, 76, 33, 190, 162, 169, 38, 61, 183, 197, 140, 60, 182, 3, 105, 60, 30, 53, 185, 59, 11, 6, 4, 61, 163, 126, 82, 190, 233, 104, 133, 61, 100, 214, 18, 189, 107, 97, 66, 190, 138, 193, 9, 62, 184, 252, 214, 189, 241, 144, 83, 189, 209, 147, 205, 61, 58, 189, 27, 190, 150, 8, 14, 61, 156, 105, 204, 61, 234, 211, 39, 190, 93, 141, 17, 62, 88, 26, 11, 190, 106, 237, 158, 61, 87, 241, 18, 62, 35, 4, 228, 61, 81, 150, 252, 189, 217, 106, 248, 61, 175, 31, 122, 61, 207, 75, 218, 189, 39, 159, 163, 189, 45, 56, 140, 59, 173, 160, 19, 62, 43, 180, 215, 61, 19, 38, 123, 189, 58, 219, 239, 61, 204, 35, 105, 189, 74, 4, 30, 188, 153, 59, 6, 189, 5, 128, 217, 60, 42, 230, 45, 190, 138, 169, 27, 189, 84, 240, 240, 189, 228, 94, 197, 61, 147, 195, 4, 190, 250, 35, 239, 189, 232, 35, 29, 61, 236, 135, 223, 189, 94, 137, 37, 188, 31, 139, 166, 189, 3, 195, 231, 61, 161, 250, 12, 190, 154, 214, 212, 60, 242, 89, 234, 59, 246, 93, 207, 188, 68, 174, 133, 188, 110, 244, 187, 189, 14, 112, 49, 190, 98, 174, 20, 190, 6, 233, 110, 188, 204, 158, 162, 189, 103, 83, 203, 189, 133, 51, 84, 189, 20, 189, 183, 189, 220, 13, 69, 191, 203, 47, 143, 189, 57, 32, 224, 62, 173, 138, 106, 190, 40, 17, 28, 62, 2, 118, 60, 62, 207, 216, 53, 189, 70, 24, 229, 61, 194, 7, 77, 190, 245, 7, 142, 61, 221, 237, 169, 62, 97, 129, 136, 189, 79, 237, 20, 190, 200, 231, 132, 62, 152, 30, 21, 61, 227, 99, 25, 61, 104, 20, 128, 190, 46, 17, 52, 189, 76, 0, 17, 62, 147, 41, 86, 61, 173, 204, 130, 62, 76, 109, 5, 63, 90, 205, 95, 187, 176, 60, 151, 190, 135, 158, 133, 190, 155, 112, 74, 62, 206, 109, 118, 189, 103, 96, 240, 188, 175, 142, 55, 190, 255, 79, 4, 62, 56, 116, 107, 190, 128, 79, 36, 191, 118, 25, 55, 190, 152, 168, 36, 62, 101, 5, 198, 62, 77, 98, 201, 189, 172, 87, 126, 61, 61, 188, 148, 190, 149, 64, 25, 190, 39, 146, 87, 191, 9, 52, 142, 190, 138, 70, 107, 190, 150, 45, 88, 62, 210, 21, 84, 190, 23, 169, 121, 191, 134, 139, 153, 62, 122, 107, 47, 190, 60, 22, 161, 62, 151, 37, 116, 189, 9, 241, 58, 62, 10, 240, 4, 63, 109, 116, 17, 191, 68, 115, 153, 61, 154, 8, 7, 63, 59, 66, 16, 191, 221, 200, 233, 190, 84, 34, 140, 191, 254, 173, 21, 190, 60, 128, 210, 190, 159, 186, 53, 190, 63, 131, 20, 61, 225, 173, 10, 190, 26, 173, 13, 63, 178, 35, 222, 190, 93, 59, 206, 190, 129, 210, 130, 62, 69, 251, 169, 62, 49, 96, 151, 61, 254, 145, 55, 61, 174, 155, 95, 190, 60, 170, 48, 190, 251, 113, 175, 190, 32, 61, 179, 60, 57, 102, 57, 62, 205, 34, 224, 61, 95, 219, 141, 189, 201, 32, 171, 189, 32, 53, 139, 189, 59, 68, 81, 189, 87, 35, 33, 62, 192, 230, 227, 61, 215, 138, 181, 61, 201, 179, 87, 190, 163, 26, 12, 190, 42, 135, 115, 62, 90, 2, 187, 62, 226, 160, 41, 61, 188, 115, 82, 62, 14, 164, 29, 190, 202, 89, 119, 59, 242, 187, 58, 190, 189, 150, 182, 61, 106, 155, 52, 62, 25, 178, 243, 190, 125, 181, 173, 62, 32, 173, 13, 62, 58, 197, 179, 61, 160, 95, 172, 189, 54, 169, 24, 62, 160, 105, 68, 188, 81, 131, 51, 62, 225, 248, 27, 190, 155, 251, 194, 61, 186, 189, 93, 189, 213, 238, 167, 61, 63, 210, 25, 187, 37, 94, 8, 62, 247, 92, 21, 190, 4, 1, 134, 189, 200, 61, 34, 190, 190, 102, 87, 189, 106, 45, 202, 61, 107, 78, 216, 189, 193, 58, 191, 189, 179, 56, 198, 188, 5, 149, 206, 189, 184, 162, 109, 189, 249, 122, 43, 62, 255, 188, 4, 60, 46, 75, 40, 190, 253, 57, 175, 61, 9, 11, 22, 190, 151, 5, 3, 190, 178, 144, 23, 61, 93, 185, 34, 60, 15, 124, 209, 189, 52, 177, 170, 61, 60, 218, 183, 61, 74, 112, 44, 62, 250, 42, 62, 61, 69, 245, 145, 62, 66, 19, 139, 190, 9, 197, 208, 58, 110, 27, 53, 62, 5, 233, 161, 62, 78, 88, 147, 191, 169, 82, 186, 62, 75, 103, 8, 190, 140, 125, 79, 61, 179, 31, 45, 62, 135, 184, 211, 62, 151, 167, 51, 190, 36, 227, 170, 189, 178, 4, 111, 190, 224, 146, 130, 62, 101, 18, 72, 61, 196, 222, 194, 188, 95, 137, 77, 62, 151, 211, 129, 61, 222, 81, 47, 62, 241, 34, 221, 187, 70, 132, 150, 62, 144, 174, 212, 190, 46, 115, 136, 62, 247, 182, 3, 190, 108, 81, 255, 60, 47, 104, 70, 62, 26, 188, 88, 62, 237, 223, 1, 191, 149, 129, 19, 190, 164, 221, 112, 61, 5, 56, 154, 61, 251, 75, 147, 61, 205, 26, 236, 188, 62, 105, 46, 190, 149, 49, 135, 61, 195, 181, 41, 62, 80, 18, 20, 190, 233, 100, 243, 189, 22, 171, 182, 61, 223, 49, 223, 60, 155, 231, 233, 61, 192, 244, 31, 189, 80, 126, 87, 61, 78, 173, 1, 188, 151, 148, 173, 61, 31, 57, 136, 189, 194, 138, 144, 189, 94, 0, 235, 189, 122, 58, 0, 62, 100, 204, 100, 190, 172, 182, 37, 61, 134, 227, 99, 61, 130, 39, 49, 190, 124, 59, 75, 190, 230, 93, 213, 189, 145, 198, 24, 190, 247, 136, 82, 190, 28, 225, 223, 60, 195, 128, 72, 190, 22, 148, 26, 190, 144, 28, 203, 61, 134, 83, 189, 190, 254, 132, 134, 190, 102, 230, 193, 190, 116, 153, 37, 188, 228, 31, 254, 189, 52, 71, 108, 62, 61, 252, 119, 190, 176, 69, 0, 62, 147, 94, 42, 190, 243, 46, 11, 190, 248, 102, 48, 191, 2, 61, 7, 190, 179, 156, 99, 190, 141, 255, 69, 191, 10, 221, 99, 62, 17, 187, 130, 190, 33, 104, 26, 191, 181, 147, 2, 191, 187, 187, 66, 190, 36, 206, 55, 62, 68, 65, 214, 190, 132, 164, 29, 190, 155, 221, 142, 190, 61, 194, 97, 191, 192, 129, 169, 62, 31, 177, 6, 189, 55, 11, 19, 62, 80, 194, 192, 61, 158, 183, 14, 191, 106, 116, 209, 188, 232, 179, 12, 190, 13, 104, 38, 191, 58, 150, 141, 189, 95, 124, 0, 191, 4, 136, 253, 190, 236, 44, 38, 62, 118, 36, 56, 61, 114, 194, 22, 62, 91, 74, 191, 189, 107, 128, 191, 62, 74, 164, 103, 190, 69, 43, 34, 61, 143, 28, 102, 62, 112, 74, 92, 61, 68, 193, 147, 190, 212, 31, 68, 191, 120, 141, 124, 62, 30, 202, 143, 189, 71, 177, 175, 189, 138, 237, 107, 62, 130, 0, 26, 191, 82, 26, 236, 189, 89, 108, 73, 61, 120, 139, 145, 190, 133, 155, 67, 190, 28, 31, 170, 189, 155, 45, 160, 62, 37, 15, 202, 190, 121, 5, 115, 190, 125, 182, 27, 191, 102, 77, 81, 61, 25, 72, 98, 190, 88, 84, 250, 189, 187, 18, 225, 61, 168, 90, 44, 62, 163, 83, 164, 187, 182, 68, 14, 190, 237, 196, 26, 62, 154, 220, 182, 61, 110, 5, 59, 190, 224, 136, 159, 189, 198, 53, 50, 190, 93, 102, 79, 189, 73, 38, 131, 189, 0, 71, 31, 188, 74, 45, 41, 190, 171, 48, 159, 60, 216, 172, 13, 190, 18, 32, 57, 190, 130, 130, 124, 61, 53, 253, 21, 190, 27, 252, 125, 61, 176, 107, 12, 60, 247, 244, 50, 190, 235, 74, 226, 189, 236, 96, 176, 188, 217, 177, 25, 62, 110, 17, 190, 57, 178, 192, 157, 61, 117, 135, 48, 62, 43, 243, 36, 60, 187, 154, 73, 61, 70, 71, 158, 189, 10, 231, 47, 60, 155, 55, 245, 189, 218, 233, 219, 60, 98, 227, 193, 190, 136, 166, 31, 189, 105, 117, 187, 190, 1, 86, 1, 191, 13, 43, 195, 189, 66, 80, 160, 62, 229, 78, 124, 190, 208, 16, 53, 191, 236, 252, 150, 189, 186, 70, 176, 61, 112, 226, 67, 190, 93, 25, 81, 61, 164, 35, 38, 190, 137, 47, 27, 190, 147, 20, 149, 190, 141, 98, 210, 190, 110, 175, 16, 62, 52, 110, 49, 191, 72, 85, 141, 190, 166, 114, 169, 62, 219, 33, 158, 60, 214, 130, 50, 190, 254, 51, 68, 62, 30, 251, 185, 190, 88, 141, 94, 190, 221, 188, 10, 190, 87, 9, 226, 62, 175, 23, 93, 190, 73, 30, 73, 190, 129, 67, 1, 62, 202, 154, 235, 190, 117, 115, 1, 191, 255, 200, 110, 62, 86, 233, 157, 61, 205, 203, 162, 190, 124, 122, 148, 62, 136, 197, 52, 190, 4, 216, 117, 190, 128, 122, 132, 61, 205, 218, 48, 62, 148, 191, 19, 62, 165, 36, 79, 190, 90, 189, 140, 61, 9, 164, 4, 62, 0, 57, 104, 62, 173, 120, 62, 61, 199, 129, 43, 189, 22, 109, 41, 190, 193, 187, 85, 62, 211, 200, 251, 189, 65, 153, 27, 62, 74, 56, 147, 187, 248, 84, 167, 61, 30, 102, 148, 190, 61, 144, 46, 61, 252, 114, 51, 61, 14, 169, 197, 61, 49, 94, 92, 61, 48, 207, 205, 61, 73, 109, 110, 61, 150, 47, 140, 189, 113, 226, 166, 61, 133, 126, 107, 61, 82, 237, 140, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 209, 166, 61, 207, 58, 71, 62, 30, 168, 106, 62, 69, 214, 50, 190, 84, 133, 84, 62, 131, 40, 15, 62, 226, 112, 173, 62, 28, 124, 239, 61, 16, 8, 122, 62, 146, 163, 135, 62, 52, 247, 86, 188, 245, 100, 241, 61, 82, 182, 154, 60, 114, 167, 131, 62, 240, 106, 19, 189, 52, 65, 69, 189, 75, 61, 12, 190, 215, 70, 89, 190, 222, 130, 232, 60, 109, 133, 170, 60, 224, 101, 242, 188, 174, 251, 18, 190, 167, 25, 192, 190, 199, 184, 10, 190, 79, 129, 187, 189, 190, 175, 178, 189, 39, 97, 44, 189, 30, 213, 141, 61, 108, 52, 18, 59, 157, 224, 156, 189, 139, 179, 173, 61, 165, 81, 170, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {214, 212, 124, 188, 162, 198, 198, 190, 177, 133, 8, 63, 178, 224, 100, 61, 211, 199, 96, 190, 57, 43, 58, 190, 46, 6, 92, 191, 235, 98, 177, 63, 122, 109, 242, 190, 240, 229, 49, 63, 71, 17, 60, 62, 130, 118, 172, 61, 49, 101, 145, 61, 26, 97, 17, 191, 206, 157, 93, 191, 245, 150, 6, 63, 86, 79, 251, 61, 114, 23, 93, 61, 121, 43, 40, 191, 135, 10, 76, 187, 93, 105, 63, 61, 34, 169, 4, 63, 65, 98, 134, 191, 49, 49, 156, 62, 238, 162, 6, 62, 188, 24, 250, 62, 158, 23, 63, 189, 191, 209, 66, 63, 150, 49, 90, 63, 72, 11, 203, 189, 163, 214, 135, 191, 85, 90, 13, 190, 202, 13, 34, 190, 42, 1, 177, 190, 54, 114, 155, 61, 237, 60, 28, 189, 53, 163, 173, 190, 227, 140, 85, 187, 153, 148, 161, 61, 61, 97, 23, 62, 16, 148, 71, 190, 61, 15, 165, 189, 110, 247, 203, 190, 195, 85, 84, 190, 23, 251, 125, 61, 170, 121, 40, 62, 40, 210, 25, 63, 195, 194, 183, 61, 136, 58, 25, 62, 28, 161, 29, 62, 202, 170, 73, 60, 85, 208, 116, 189, 116, 13, 8, 62, 233, 59, 198, 62, 149, 120, 155, 62, 54, 189, 122, 61, 131, 99, 171, 189, 40, 189, 140, 189, 230, 251, 168, 61, 220, 58, 36, 62, 82, 169, 203, 189, 118, 21, 175, 189, 54, 18, 147, 62, 200, 166, 83, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 153, 53, 190, 20, 234, 192, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {193, 218, 134, 191, 164, 129, 174, 62, 52, 61, 23, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {89, 83, 41, 64, 179, 149, 130, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0005/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}