// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 183, 57, 63, 242, 112, 89, 190, 221, 65, 120, 62, 92, 208, 166, 61, 86, 59, 42, 191, 179, 235, 242, 190, 29, 89, 86, 63, 172, 124, 102, 191, 154, 73, 178, 190, 8, 216, 49, 191, 93, 145, 44, 191, 42, 240, 138, 60, 248, 237, 175, 190, 76, 230, 168, 190, 2, 176, 243, 188, 131, 178, 57, 190, 156, 116, 153, 63, 240, 171, 139, 61, 229, 121, 33, 63, 132, 196, 36, 63, 98, 40, 252, 62, 206, 69, 149, 191, 93, 197, 223, 189, 162, 84, 89, 61, 7, 60, 92, 63, 22, 202, 168, 61, 98, 41, 198, 62, 16, 159, 208, 61, 142, 174, 129, 62, 136, 64, 56, 191, 226, 35, 158, 62, 129, 144, 142, 191, 36, 157, 148, 190, 128, 195, 113, 62, 156, 158, 72, 63, 117, 64, 207, 190, 43, 251, 125, 63, 75, 241, 2, 63, 191, 2, 217, 62, 238, 70, 31, 191, 183, 75, 104, 63, 73, 104, 215, 62, 30, 127, 220, 190, 149, 68, 170, 190, 82, 184, 39, 190, 203, 16, 118, 191, 12, 45, 207, 190, 72, 123, 15, 63, 220, 125, 119, 63, 11, 11, 59, 190, 217, 170, 40, 61, 222, 119, 137, 61, 104, 60, 177, 191, 243, 75, 132, 190, 86, 2, 247, 189, 249, 11, 218, 61, 224, 216, 130, 62, 15, 117, 165, 58, 180, 156, 137, 63, 206, 211, 217, 61, 132, 137, 25, 63, 6, 22, 146, 191, 120, 213, 35, 190, 242, 133, 84, 63, 196, 73, 54, 191, 194, 251, 164, 190, 51, 62, 221, 189, 116, 39, 192, 62, 157, 104, 210, 61, 112, 1, 109, 190, 10, 216, 130, 191, 91, 189, 187, 190, 75, 249, 132, 191, 119, 138, 144, 189, 233, 10, 133, 190, 177, 47, 70, 63, 53, 242, 88, 62, 13, 208, 222, 190, 104, 242, 175, 62, 194, 36, 49, 63, 223, 105, 106, 190, 247, 211, 92, 63, 173, 176, 140, 63, 16, 0, 36, 59, 48, 235, 37, 62, 182, 161, 120, 190, 10, 242, 80, 191, 214, 27, 255, 190, 161, 212, 130, 63, 73, 249, 135, 62, 163, 125, 67, 62, 35, 87, 64, 191, 16, 58, 36, 62, 132, 211, 185, 190, 1, 9, 144, 191, 92, 151, 131, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {134, 165, 155, 191, 14, 204, 28, 191, 186, 101, 41, 191, 210, 101, 102, 63, 129, 31, 56, 191, 131, 107, 149, 62, 213, 149, 146, 191, 14, 105, 174, 62, 38, 197, 247, 190, 146, 19, 207, 189, 177, 5, 7, 60, 208, 251, 36, 61, 46, 178, 222, 189, 232, 119, 18, 62, 191, 100, 11, 63, 53, 167, 48, 190, 88, 91, 15, 63, 147, 225, 119, 62, 111, 184, 194, 62, 1, 113, 149, 61, 250, 156, 145, 62, 89, 183, 15, 191, 134, 195, 58, 62, 48, 81, 92, 191, 47, 74, 224, 62, 57, 27, 174, 190, 203, 98, 16, 63, 205, 228, 141, 190, 2, 137, 205, 190, 203, 1, 17, 63, 223, 255, 103, 62, 198, 132, 64, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 197, 99, 188, 238, 206, 55, 190, 146, 127, 124, 189, 55, 191, 187, 62, 165, 234, 206, 189, 49, 155, 61, 190, 140, 21, 184, 190, 186, 243, 163, 61, 60, 15, 217, 59, 24, 185, 87, 190, 163, 92, 247, 189, 209, 215, 136, 190, 128, 114, 168, 189, 97, 254, 57, 190, 33, 137, 105, 62, 24, 180, 104, 60, 148, 253, 163, 61, 239, 21, 25, 189, 133, 217, 201, 188, 78, 177, 92, 189, 238, 189, 45, 62, 76, 115, 143, 187, 78, 153, 198, 61, 77, 145, 25, 188, 196, 181, 28, 60, 169, 54, 19, 190, 36, 245, 42, 60, 133, 79, 42, 60, 46, 148, 101, 188, 96, 251, 92, 61, 80, 143, 79, 62, 70, 184, 57, 189, 250, 214, 179, 62, 92, 233, 182, 190, 114, 11, 29, 191, 74, 196, 4, 190, 109, 35, 166, 188, 245, 164, 150, 190, 255, 35, 53, 62, 222, 70, 154, 190, 57, 155, 59, 62, 163, 109, 160, 61, 126, 73, 99, 190, 63, 124, 183, 62, 147, 70, 34, 60, 46, 106, 84, 190, 233, 223, 140, 61, 183, 196, 22, 62, 133, 137, 172, 62, 215, 76, 12, 191, 56, 99, 54, 190, 6, 176, 168, 189, 94, 253, 26, 62, 184, 232, 24, 191, 58, 15, 232, 60, 217, 227, 230, 190, 206, 70, 51, 190, 182, 51, 120, 189, 241, 209, 139, 61, 99, 168, 148, 62, 223, 159, 74, 62, 5, 243, 103, 191, 216, 244, 81, 62, 78, 219, 228, 60, 48, 85, 48, 191, 140, 84, 37, 191, 170, 172, 187, 60, 174, 127, 18, 61, 165, 84, 105, 61, 154, 148, 129, 62, 100, 251, 175, 190, 22, 64, 18, 62, 136, 44, 101, 186, 131, 230, 142, 189, 134, 76, 244, 62, 97, 65, 193, 189, 136, 95, 93, 190, 50, 5, 151, 188, 178, 239, 112, 62, 205, 186, 208, 61, 93, 199, 226, 61, 233, 42, 214, 62, 96, 78, 168, 188, 225, 8, 207, 61, 165, 99, 75, 62, 244, 153, 5, 63, 201, 34, 36, 61, 197, 203, 137, 190, 225, 179, 40, 190, 254, 49, 167, 61, 69, 122, 69, 190, 173, 230, 158, 62, 220, 162, 168, 191, 25, 142, 112, 61, 41, 174, 25, 62, 246, 246, 218, 191, 17, 64, 247, 189, 151, 8, 241, 187, 198, 204, 237, 189, 185, 95, 168, 189, 89, 27, 171, 189, 5, 171, 179, 61, 221, 51, 17, 61, 196, 60, 1, 62, 173, 150, 219, 189, 234, 220, 174, 60, 40, 218, 206, 61, 118, 212, 49, 190, 169, 85, 223, 189, 182, 82, 81, 60, 75, 160, 154, 61, 60, 105, 182, 61, 39, 19, 23, 190, 251, 192, 22, 190, 133, 1, 18, 62, 13, 98, 224, 61, 71, 54, 12, 61, 104, 188, 126, 61, 172, 98, 83, 190, 2, 108, 74, 190, 196, 51, 188, 60, 141, 58, 88, 189, 241, 124, 224, 61, 1, 53, 176, 58, 116, 177, 62, 190, 110, 24, 61, 190, 201, 38, 7, 190, 215, 84, 66, 190, 177, 91, 237, 62, 216, 44, 199, 189, 246, 64, 198, 190, 163, 20, 147, 62, 57, 217, 192, 61, 55, 74, 1, 190, 0, 206, 137, 58, 2, 173, 210, 61, 232, 108, 67, 61, 227, 53, 6, 62, 172, 87, 60, 190, 141, 134, 96, 59, 183, 2, 25, 62, 21, 188, 213, 189, 87, 112, 128, 62, 192, 118, 109, 60, 119, 31, 185, 62, 206, 187, 211, 190, 55, 89, 57, 62, 253, 27, 214, 59, 51, 203, 108, 190, 167, 44, 31, 191, 64, 190, 136, 62, 238, 101, 85, 190, 18, 48, 242, 62, 98, 113, 32, 61, 166, 21, 28, 62, 210, 1, 93, 62, 108, 50, 19, 190, 137, 86, 107, 62, 232, 154, 143, 62, 156, 100, 171, 61, 125, 1, 24, 63, 224, 151, 251, 189, 133, 7, 159, 190, 222, 117, 88, 62, 170, 0, 114, 190, 17, 37, 134, 189, 228, 124, 29, 62, 121, 168, 157, 62, 173, 97, 216, 188, 31, 36, 67, 61, 95, 16, 182, 190, 238, 117, 50, 61, 142, 127, 242, 61, 135, 14, 52, 62, 190, 213, 135, 189, 223, 100, 238, 60, 195, 125, 93, 62, 58, 211, 197, 190, 89, 51, 116, 189, 71, 41, 106, 187, 156, 101, 77, 60, 109, 9, 58, 191, 98, 178, 31, 62, 167, 27, 113, 60, 62, 105, 195, 62, 41, 97, 47, 190, 222, 12, 75, 62, 243, 213, 71, 189, 103, 68, 173, 59, 184, 176, 169, 61, 197, 111, 78, 61, 153, 245, 86, 190, 19, 38, 18, 191, 216, 254, 239, 190, 66, 200, 248, 190, 146, 49, 21, 185, 212, 244, 58, 189, 54, 85, 0, 190, 3, 199, 92, 62, 176, 111, 238, 188, 142, 100, 141, 62, 221, 255, 93, 61, 117, 8, 226, 190, 146, 7, 178, 188, 197, 218, 226, 62, 6, 237, 138, 190, 36, 34, 156, 189, 240, 208, 108, 191, 155, 122, 102, 62, 1, 75, 177, 190, 208, 45, 3, 188, 200, 168, 68, 62, 70, 15, 61, 189, 180, 73, 43, 191, 239, 17, 154, 61, 189, 49, 11, 191, 246, 53, 243, 61, 45, 101, 243, 189, 84, 232, 221, 61, 171, 12, 147, 62, 30, 181, 54, 62, 49, 171, 213, 190, 229, 66, 169, 190, 110, 86, 107, 190, 126, 144, 129, 191, 117, 133, 66, 191, 52, 87, 45, 191, 94, 180, 221, 62, 229, 33, 241, 189, 249, 112, 55, 62, 67, 18, 22, 191, 214, 47, 179, 62, 0, 221, 153, 190, 212, 202, 167, 191, 112, 43, 165, 62, 41, 90, 248, 190, 124, 76, 95, 190, 199, 240, 17, 190, 247, 186, 199, 62, 21, 194, 173, 61, 205, 162, 28, 190, 63, 67, 249, 62, 110, 187, 34, 62, 158, 200, 214, 189, 110, 19, 11, 63, 85, 48, 154, 190, 16, 153, 149, 61, 186, 88, 143, 191, 119, 237, 186, 190, 154, 193, 53, 190, 60, 99, 14, 191, 20, 195, 49, 191, 49, 169, 101, 191, 125, 114, 148, 61, 26, 222, 179, 62, 245, 211, 215, 191, 212, 240, 215, 62, 166, 69, 55, 190, 184, 208, 230, 190, 95, 55, 86, 62, 10, 129, 8, 190, 228, 76, 242, 190, 46, 36, 160, 188, 77, 103, 51, 61, 141, 147, 85, 62, 130, 191, 35, 62, 239, 117, 155, 190, 48, 14, 6, 189, 120, 122, 94, 62, 23, 155, 2, 62, 100, 169, 33, 61, 181, 243, 149, 190, 145, 143, 205, 62, 83, 39, 192, 190, 88, 142, 179, 61, 186, 160, 146, 190, 184, 152, 176, 185, 211, 37, 68, 191, 180, 13, 54, 189, 118, 166, 115, 190, 61, 26, 151, 62, 16, 98, 12, 190, 25, 177, 136, 62, 86, 194, 94, 61, 184, 255, 33, 62, 218, 177, 154, 189, 156, 33, 42, 61, 220, 140, 106, 189, 26, 168, 114, 189, 106, 245, 131, 190, 177, 4, 166, 190, 111, 224, 119, 189, 217, 134, 21, 190, 80, 248, 238, 62, 34, 181, 1, 191, 178, 54, 60, 62, 176, 79, 166, 190, 252, 106, 48, 191, 210, 25, 104, 191, 32, 221, 128, 189, 145, 136, 14, 190, 53, 69, 90, 189, 114, 81, 64, 190, 214, 202, 198, 187, 136, 157, 240, 188, 232, 165, 115, 191, 61, 157, 13, 190, 208, 152, 22, 63, 203, 239, 64, 191, 69, 154, 71, 191, 50, 179, 116, 61, 218, 20, 61, 191, 222, 101, 110, 62, 155, 127, 162, 190, 103, 223, 119, 62, 194, 67, 42, 62, 99, 208, 82, 191, 166, 90, 44, 189, 178, 101, 178, 188, 6, 50, 50, 191, 175, 135, 207, 61, 58, 3, 78, 62, 56, 41, 33, 61, 134, 98, 127, 189, 128, 164, 231, 61, 168, 210, 107, 191, 138, 184, 75, 190, 52, 186, 238, 190, 22, 138, 28, 62, 236, 27, 123, 62, 223, 175, 92, 62, 29, 36, 240, 61, 89, 220, 97, 189, 242, 213, 56, 190, 112, 58, 119, 190, 102, 172, 41, 189, 27, 96, 134, 62, 93, 214, 44, 189, 167, 241, 228, 190, 255, 212, 212, 190, 210, 63, 112, 189, 179, 51, 219, 62, 222, 5, 251, 59, 160, 38, 66, 189, 149, 76, 22, 189, 195, 133, 124, 62, 175, 105, 152, 61, 142, 105, 128, 62, 187, 205, 228, 60, 67, 98, 155, 191, 67, 208, 67, 62, 61, 145, 128, 62, 59, 62, 75, 191, 120, 89, 18, 190, 14, 216, 8, 190, 62, 6, 170, 61, 179, 207, 71, 61, 179, 15, 178, 189, 148, 49, 247, 190, 126, 40, 79, 188, 120, 57, 19, 190, 217, 213, 14, 188, 144, 121, 13, 62, 48, 7, 142, 189, 113, 41, 109, 189, 140, 106, 136, 61, 106, 35, 190, 61, 20, 250, 5, 62, 10, 27, 184, 61, 197, 47, 204, 61, 52, 172, 167, 61, 10, 224, 26, 62, 22, 72, 138, 62, 35, 21, 20, 62, 106, 156, 25, 189, 192, 24, 38, 190, 0, 140, 196, 186, 230, 230, 254, 189, 16, 137, 79, 62, 2, 90, 16, 62, 26, 227, 186, 189, 10, 79, 57, 190, 106, 246, 13, 62, 139, 200, 89, 188, 104, 118, 3, 62, 143, 163, 141, 61, 117, 199, 19, 62, 80, 119, 230, 60, 92, 70, 83, 189, 77, 115, 235, 189, 129, 58, 41, 190, 82, 102, 238, 189, 106, 72, 82, 61, 228, 139, 132, 61, 229, 159, 136, 187, 3, 159, 133, 189, 49, 159, 173, 61, 207, 184, 5, 190, 179, 189, 2, 62, 48, 113, 27, 190, 254, 192, 225, 186, 178, 79, 76, 190, 106, 93, 246, 189, 161, 80, 39, 188, 154, 204, 247, 61, 151, 111, 162, 189, 134, 118, 34, 189, 132, 199, 4, 190, 136, 153, 1, 188, 52, 71, 77, 190, 102, 177, 18, 190, 99, 65, 165, 189, 69, 198, 158, 59, 116, 11, 180, 60, 188, 220, 25, 190, 36, 6, 241, 189, 107, 211, 8, 189, 223, 175, 149, 61, 76, 108, 32, 189, 192, 248, 183, 62, 179, 202, 85, 190, 200, 110, 53, 62, 126, 14, 251, 188, 109, 210, 246, 62, 233, 79, 137, 189, 14, 6, 233, 188, 114, 189, 230, 190, 48, 162, 55, 189, 68, 23, 163, 190, 146, 143, 3, 191, 31, 93, 202, 62, 153, 96, 163, 190, 120, 73, 28, 191, 254, 94, 174, 62, 47, 91, 93, 190, 96, 140, 60, 189, 228, 59, 32, 61, 213, 137, 129, 191, 33, 145, 114, 189, 20, 116, 204, 62, 162, 124, 227, 62, 173, 231, 33, 190, 177, 4, 17, 62, 217, 109, 160, 190, 159, 196, 125, 62, 108, 126, 182, 61, 106, 225, 139, 190, 248, 252, 180, 62, 172, 197, 106, 63, 56, 160, 76, 189, 69, 25, 169, 191, 230, 195, 145, 61, 161, 128, 47, 190, 5, 228, 180, 190, 15, 79, 198, 62, 218, 97, 28, 61, 180, 170, 173, 62, 188, 66, 214, 61, 251, 39, 88, 191, 205, 174, 211, 62, 247, 48, 161, 62, 154, 147, 9, 190, 170, 35, 12, 191, 199, 253, 14, 190, 151, 6, 157, 62, 89, 124, 128, 191, 221, 44, 89, 188, 250, 157, 88, 190, 235, 180, 217, 190, 255, 46, 112, 191, 143, 167, 140, 188, 139, 25, 253, 189, 47, 225, 135, 62, 217, 70, 157, 190, 30, 111, 61, 62, 25, 253, 128, 62, 21, 23, 149, 62, 140, 165, 139, 190, 160, 84, 230, 61, 177, 75, 138, 62, 223, 112, 111, 191, 64, 0, 188, 189, 231, 186, 46, 61, 79, 110, 13, 62, 16, 31, 71, 62, 97, 172, 166, 62, 8, 219, 32, 191, 8, 3, 79, 190, 245, 166, 91, 190, 248, 152, 192, 61, 147, 167, 224, 62, 122, 3, 96, 62, 129, 168, 251, 190, 162, 133, 207, 189, 166, 203, 247, 61, 63, 70, 185, 62, 116, 211, 139, 62, 117, 36, 51, 62, 56, 159, 81, 62, 200, 86, 34, 62, 242, 49, 132, 186, 111, 54, 232, 62, 69, 50, 6, 59, 238, 49, 18, 61, 64, 141, 246, 60, 93, 244, 247, 61, 197, 14, 50, 62, 108, 157, 198, 62, 238, 50, 91, 190, 18, 143, 42, 189, 155, 244, 202, 62, 29, 218, 62, 190, 179, 89, 4, 190, 134, 217, 61, 189, 2, 225, 1, 190, 127, 74, 16, 190, 38, 243, 35, 190, 115, 223, 222, 188, 136, 233, 223, 189, 81, 126, 3, 190, 171, 12, 252, 189, 56, 160, 43, 190, 115, 200, 25, 190, 252, 21, 20, 189, 225, 69, 249, 61, 19, 177, 26, 60, 100, 70, 118, 189, 150, 204, 158, 189, 243, 117, 186, 59, 163, 157, 51, 190, 90, 155, 247, 189, 36, 198, 255, 189, 158, 130, 214, 60, 112, 185, 157, 189, 1, 217, 80, 188, 2, 20, 97, 60, 172, 142, 153, 60, 226, 115, 226, 60, 139, 116, 239, 60, 77, 13, 40, 190, 193, 129, 48, 62, 120, 155, 178, 59, 121, 11, 31, 61, 73, 85, 99, 189, 167, 24, 3, 62, 255, 158, 41, 62, 5, 35, 1, 62, 40, 181, 255, 188, 246, 6, 74, 61, 68, 7, 8, 190, 246, 70, 24, 190, 239, 65, 76, 190, 80, 228, 238, 188, 232, 112, 150, 189, 98, 17, 145, 188, 64, 54, 69, 190, 11, 26, 204, 61, 84, 15, 178, 189, 196, 63, 201, 188, 32, 224, 37, 60, 129, 107, 91, 61, 230, 68, 83, 190, 63, 88, 209, 189, 74, 197, 28, 190, 159, 15, 240, 189, 166, 23, 5, 190, 242, 56, 173, 61, 82, 185, 209, 189, 68, 202, 230, 188, 218, 52, 79, 61, 112, 107, 151, 189, 88, 142, 198, 189, 246, 108, 240, 60, 11, 95, 164, 187, 239, 97, 26, 189, 109, 107, 63, 61, 200, 64, 13, 191, 226, 8, 45, 62, 200, 37, 198, 59, 90, 198, 202, 62, 168, 243, 129, 60, 94, 104, 251, 62, 166, 159, 54, 191, 53, 18, 211, 62, 178, 163, 114, 191, 9, 169, 184, 189, 21, 64, 212, 62, 27, 251, 131, 190, 158, 109, 154, 191, 119, 245, 11, 61, 121, 36, 173, 62, 115, 117, 122, 189, 64, 74, 87, 190, 0, 238, 13, 63, 186, 1, 228, 61, 136, 2, 151, 190, 14, 56, 154, 62, 212, 3, 156, 188, 225, 199, 100, 60, 212, 239, 237, 61, 215, 33, 84, 62, 191, 186, 88, 190, 243, 176, 20, 189, 50, 242, 172, 191, 5, 182, 163, 61, 145, 110, 176, 62, 140, 237, 54, 62, 45, 28, 162, 61, 164, 181, 42, 190, 133, 191, 45, 61, 168, 182, 248, 188, 235, 76, 33, 190, 162, 169, 38, 61, 183, 197, 140, 60, 182, 3, 105, 60, 30, 53, 185, 59, 11, 6, 4, 61, 163, 126, 82, 190, 233, 104, 133, 61, 100, 214, 18, 189, 107, 97, 66, 190, 138, 193, 9, 62, 184, 252, 214, 189, 241, 144, 83, 189, 209, 147, 205, 61, 58, 189, 27, 190, 150, 8, 14, 61, 156, 105, 204, 61, 234, 211, 39, 190, 93, 141, 17, 62, 88, 26, 11, 190, 106, 237, 158, 61, 87, 241, 18, 62, 35, 4, 228, 61, 81, 150, 252, 189, 217, 106, 248, 61, 175, 31, 122, 61, 207, 75, 218, 189, 39, 159, 163, 189, 45, 56, 140, 59, 173, 160, 19, 62, 43, 180, 215, 61, 19, 38, 123, 189, 58, 219, 239, 61, 204, 35, 105, 189, 74, 4, 30, 188, 153, 59, 6, 189, 5, 128, 217, 60, 42, 230, 45, 190, 138, 169, 27, 189, 84, 240, 240, 189, 228, 94, 197, 61, 147, 195, 4, 190, 250, 35, 239, 189, 232, 35, 29, 61, 236, 135, 223, 189, 94, 137, 37, 188, 31, 139, 166, 189, 3, 195, 231, 61, 161, 250, 12, 190, 154, 214, 212, 60, 242, 89, 234, 59, 246, 93, 207, 188, 68, 174, 133, 188, 110, 244, 187, 189, 14, 112, 49, 190, 98, 174, 20, 190, 6, 233, 110, 188, 204, 158, 162, 189, 103, 83, 203, 189, 133, 51, 84, 189, 20, 189, 183, 189, 199, 142, 77, 191, 231, 240, 13, 189, 167, 223, 230, 62, 213, 130, 12, 190, 40, 17, 28, 62, 102, 129, 116, 61, 201, 71, 19, 190, 139, 134, 13, 62, 218, 62, 137, 190, 18, 47, 79, 61, 187, 210, 175, 62, 39, 122, 181, 189, 233, 187, 147, 190, 194, 211, 116, 62, 159, 79, 95, 61, 223, 55, 141, 61, 116, 145, 168, 190, 38, 54, 219, 188, 56, 45, 13, 62, 198, 116, 211, 189, 36, 74, 98, 62, 178, 245, 2, 63, 255, 144, 189, 189, 219, 93, 168, 190, 255, 156, 64, 190, 207, 10, 48, 62, 112, 232, 167, 189, 117, 208, 114, 189, 137, 173, 22, 190, 36, 146, 192, 61, 222, 113, 244, 189, 116, 5, 38, 191, 221, 80, 89, 190, 72, 229, 105, 61, 227, 198, 185, 62, 81, 190, 19, 190, 172, 87, 126, 61, 176, 192, 136, 190, 143, 206, 86, 190, 133, 220, 90, 191, 232, 178, 157, 190, 7, 33, 165, 190, 169, 240, 71, 62, 70, 74, 116, 190, 111, 55, 122, 191, 222, 183, 128, 62, 162, 203, 81, 190, 46, 16, 135, 62, 41, 43, 43, 189, 246, 118, 34, 62, 218, 130, 238, 62, 254, 28, 11, 191, 31, 252, 136, 61, 3, 33, 4, 63, 188, 100, 19, 191, 39, 16, 17, 191, 159, 20, 156, 191, 218, 57, 63, 190, 236, 122, 199, 190, 121, 51, 36, 190, 244, 116, 75, 189, 158, 99, 54, 190, 81, 191, 7, 63, 201, 214, 255, 190, 43, 164, 253, 190, 41, 16, 141, 62, 37, 204, 153, 62, 101, 45, 30, 62, 254, 145, 55, 61, 171, 42, 46, 190, 77, 192, 43, 190, 4, 215, 23, 190, 183, 232, 172, 60, 202, 240, 132, 62, 241, 100, 216, 61, 250, 184, 217, 188, 71, 12, 176, 189, 142, 124, 7, 59, 121, 28, 213, 188, 169, 43, 129, 62, 59, 154, 230, 61, 154, 240, 157, 61, 207, 161, 56, 190, 169, 4, 217, 189, 32, 41, 107, 62, 12, 23, 172, 62, 183, 3, 61, 61, 63, 166, 74, 62, 108, 210, 2, 190, 94, 95, 173, 60, 36, 234, 52, 190, 203, 54, 177, 61, 51, 122, 2, 62, 229, 44, 196, 190, 243, 164, 176, 62, 233, 59, 74, 62, 58, 197, 179, 61, 160, 95, 172, 189, 54, 169, 24, 62, 160, 105, 68, 188, 81, 131, 51, 62, 225, 248, 27, 190, 155, 251, 194, 61, 186, 189, 93, 189, 213, 238, 167, 61, 63, 210, 25, 187, 37, 94, 8, 62, 247, 92, 21, 190, 4, 1, 134, 189, 200, 61, 34, 190, 190, 102, 87, 189, 106, 45, 202, 61, 107, 78, 216, 189, 193, 58, 191, 189, 179, 56, 198, 188, 5, 149, 206, 189, 184, 162, 109, 189, 249, 122, 43, 62, 255, 188, 4, 60, 46, 75, 40, 190, 253, 57, 175, 61, 9, 11, 22, 190, 151, 5, 3, 190, 178, 144, 23, 61, 93, 185, 34, 60, 15, 124, 209, 189, 52, 177, 170, 61, 60, 218, 183, 61, 153, 205, 1, 62, 237, 238, 102, 61, 205, 83, 139, 62, 81, 71, 120, 190, 9, 197, 208, 58, 77, 18, 148, 62, 183, 23, 117, 62, 34, 222, 173, 191, 134, 113, 183, 62, 179, 108, 131, 189, 181, 182, 121, 61, 227, 227, 103, 62, 100, 194, 211, 62, 19, 74, 111, 190, 218, 120, 119, 189, 100, 73, 162, 190, 171, 149, 138, 62, 27, 66, 105, 61, 43, 197, 100, 189, 116, 116, 150, 62, 191, 50, 115, 61, 32, 159, 28, 62, 202, 102, 187, 60, 181, 183, 125, 62, 137, 217, 183, 190, 236, 254, 129, 62, 253, 238, 200, 189, 167, 241, 76, 61, 161, 167, 219, 61, 222, 170, 103, 62, 26, 121, 4, 191, 64, 89, 185, 189, 164, 221, 112, 61, 5, 56, 154, 61, 251, 75, 147, 61, 205, 26, 236, 188, 62, 105, 46, 190, 149, 49, 135, 61, 195, 181, 41, 62, 80, 18, 20, 190, 233, 100, 243, 189, 22, 171, 182, 61, 223, 49, 223, 60, 155, 231, 233, 61, 192, 244, 31, 189, 80, 126, 87, 61, 78, 173, 1, 188, 151, 148, 173, 61, 31, 57, 136, 189, 194, 138, 144, 189, 94, 0, 235, 189, 122, 58, 0, 62, 100, 204, 100, 190, 172, 182, 37, 61, 134, 227, 99, 61, 130, 39, 49, 190, 124, 59, 75, 190, 230, 93, 213, 189, 145, 198, 24, 190, 247, 136, 82, 190, 28, 225, 223, 60, 195, 128, 72, 190, 22, 148, 26, 190, 144, 28, 203, 61, 134, 83, 189, 190, 92, 75, 135, 190, 102, 230, 193, 190, 76, 177, 144, 189, 228, 31, 254, 189, 140, 30, 54, 62, 61, 252, 119, 190, 242, 227, 92, 61, 147, 94, 42, 190, 224, 86, 63, 190, 248, 102, 48, 191, 245, 160, 56, 190, 214, 95, 121, 190, 199, 51, 77, 191, 69, 164, 36, 62, 102, 220, 139, 190, 218, 137, 31, 191, 192, 219, 2, 191, 253, 92, 88, 190, 95, 54, 9, 62, 68, 65, 214, 190, 132, 164, 29, 190, 10, 77, 168, 190, 73, 88, 98, 191, 47, 216, 136, 62, 129, 105, 118, 189, 203, 103, 189, 61, 219, 168, 144, 61, 67, 197, 22, 191, 176, 45, 159, 189, 232, 179, 12, 190, 13, 104, 38, 191, 58, 150, 141, 189, 150, 241, 185, 190, 95, 202, 0, 191, 66, 41, 4, 62, 118, 36, 56, 61, 93, 97, 170, 188, 91, 74, 191, 189, 114, 152, 201, 62, 199, 82, 142, 190, 95, 75, 75, 62, 44, 120, 94, 62, 166, 8, 42, 62, 2, 219, 179, 190, 234, 208, 153, 191, 170, 21, 128, 62, 180, 80, 156, 189, 159, 118, 110, 190, 253, 8, 100, 62, 63, 8, 29, 191, 103, 212, 39, 190, 77, 104, 157, 188, 26, 92, 163, 190, 232, 242, 239, 190, 124, 55, 202, 60, 172, 178, 187, 62, 62, 45, 130, 190, 116, 151, 40, 190, 109, 15, 71, 191, 216, 163, 71, 62, 61, 137, 218, 190, 210, 133, 137, 190, 87, 223, 47, 62, 168, 90, 44, 62, 163, 83, 164, 187, 182, 68, 14, 190, 237, 196, 26, 62, 154, 220, 182, 61, 110, 5, 59, 190, 224, 136, 159, 189, 198, 53, 50, 190, 93, 102, 79, 189, 73, 38, 131, 189, 0, 71, 31, 188, 74, 45, 41, 190, 171, 48, 159, 60, 216, 172, 13, 190, 18, 32, 57, 190, 130, 130, 124, 61, 53, 253, 21, 190, 27, 252, 125, 61, 176, 107, 12, 60, 247, 244, 50, 190, 235, 74, 226, 189, 236, 96, 176, 188, 217, 177, 25, 62, 110, 17, 190, 57, 178, 192, 157, 61, 117, 135, 48, 62, 43, 243, 36, 60, 187, 154, 73, 61, 70, 71, 158, 189, 10, 231, 47, 60, 155, 55, 245, 189, 218, 233, 219, 60, 98, 227, 193, 190, 73, 44, 203, 187, 47, 140, 20, 191, 25, 184, 70, 191, 13, 43, 195, 189, 160, 23, 165, 62, 2, 59, 5, 190, 199, 27, 116, 191, 156, 220, 148, 189, 18, 28, 41, 62, 100, 232, 168, 190, 92, 169, 194, 61, 184, 79, 5, 190, 100, 110, 117, 190, 182, 223, 134, 190, 29, 127, 254, 190, 137, 140, 39, 62, 196, 50, 108, 191, 243, 121, 152, 190, 41, 156, 174, 62, 221, 176, 76, 60, 9, 83, 122, 190, 118, 117, 32, 62, 134, 35, 192, 190, 132, 176, 135, 190, 78, 11, 17, 189, 228, 140, 240, 62, 189, 1, 40, 190, 146, 236, 234, 188, 253, 57, 178, 61, 77, 235, 27, 191, 38, 52, 253, 190, 168, 252, 201, 62, 200, 128, 189, 60, 56, 94, 122, 190, 49, 253, 160, 62, 136, 197, 52, 190, 26, 201, 78, 190, 165, 227, 27, 62, 135, 71, 20, 62, 31, 128, 61, 62, 28, 139, 113, 190, 173, 65, 218, 61, 73, 210, 166, 61, 228, 122, 123, 62, 211, 24, 157, 61, 190, 174, 175, 59, 218, 184, 50, 190, 107, 197, 95, 62, 234, 1, 128, 189, 127, 87, 69, 62, 228, 133, 183, 60, 81, 121, 6, 62, 200, 196, 115, 190, 18, 37, 121, 61, 242, 139, 90, 189, 135, 81, 238, 61, 16, 191, 84, 61, 117, 160, 163, 61, 62, 122, 235, 60, 61, 66, 200, 60, 137, 113, 4, 62, 231, 11, 237, 61, 248, 85, 119, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 184, 176, 60, 127, 76, 98, 62, 194, 54, 99, 62, 233, 182, 52, 190, 166, 185, 107, 62, 216, 220, 7, 62, 241, 189, 172, 62, 130, 153, 180, 61, 46, 137, 136, 62, 142, 195, 169, 62, 96, 209, 18, 189, 120, 114, 219, 61, 82, 182, 154, 60, 116, 123, 163, 62, 157, 11, 76, 189, 133, 168, 98, 189, 75, 61, 12, 190, 215, 70, 89, 190, 242, 154, 78, 61, 109, 133, 170, 60, 224, 101, 242, 188, 193, 105, 64, 190, 198, 166, 193, 190, 12, 136, 2, 190, 79, 129, 187, 189, 74, 182, 141, 189, 39, 97, 44, 189, 226, 115, 81, 60, 124, 223, 137, 189, 157, 224, 156, 189, 100, 88, 188, 61, 5, 31, 181, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 239, 145, 188, 3, 0, 163, 190, 201, 249, 0, 63, 88, 179, 100, 61, 38, 72, 48, 190, 248, 120, 218, 189, 176, 179, 71, 191, 177, 254, 200, 63, 206, 193, 220, 190, 55, 43, 111, 63, 16, 40, 20, 62, 144, 202, 97, 61, 49, 101, 145, 61, 20, 130, 51, 191, 108, 254, 160, 191, 53, 84, 4, 63, 86, 79, 251, 61, 114, 23, 93, 61, 113, 10, 45, 191, 135, 10, 76, 187, 93, 105, 63, 61, 159, 184, 229, 62, 72, 28, 132, 191, 43, 25, 84, 62, 238, 162, 6, 62, 16, 216, 242, 62, 158, 23, 63, 189, 254, 38, 61, 63, 161, 8, 114, 63, 72, 11, 203, 189, 122, 120, 157, 191, 92, 198, 1, 190, 120, 19, 64, 190, 113, 185, 157, 190, 86, 69, 29, 61, 91, 42, 28, 189, 241, 204, 175, 190, 172, 172, 93, 60, 77, 194, 240, 61, 100, 88, 150, 62, 178, 104, 121, 190, 85, 248, 14, 190, 242, 199, 224, 190, 61, 167, 133, 190, 23, 251, 125, 61, 118, 228, 141, 62, 138, 130, 247, 62, 254, 119, 77, 57, 136, 58, 25, 62, 28, 161, 29, 62, 128, 239, 75, 59, 85, 208, 116, 189, 116, 13, 8, 62, 54, 74, 201, 62, 243, 177, 115, 62, 141, 81, 210, 189, 131, 99, 171, 189, 207, 232, 177, 189, 230, 251, 168, 61, 224, 80, 19, 62, 171, 139, 121, 189, 118, 21, 175, 189, 227, 197, 249, 61, 97, 185, 131, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 80, 69, 190, 164, 222, 235, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {145, 127, 251, 190, 104, 171, 211, 191, 78, 178, 155, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {246, 154, 81, 192, 114, 3, 154, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0005/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}