// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 254, 170, 62, 60, 17, 31, 61, 233, 236, 148, 62, 235, 55, 92, 190, 140, 185, 128, 190, 124, 85, 252, 190, 4, 198, 255, 61, 24, 73, 107, 190, 147, 186, 226, 190, 191, 247, 172, 190, 150, 236, 83, 190, 231, 63, 190, 190, 228, 37, 6, 191, 16, 230, 107, 190, 210, 253, 233, 189, 73, 72, 224, 190, 53, 37, 32, 61, 39, 97, 195, 61, 155, 20, 200, 190, 21, 242, 116, 61, 89, 98, 250, 62, 128, 35, 173, 190, 234, 20, 52, 189, 216, 19, 173, 61, 122, 120, 126, 190, 205, 123, 197, 189, 254, 193, 10, 63, 150, 234, 53, 61, 200, 231, 3, 63, 158, 18, 182, 190, 123, 180, 233, 62, 209, 245, 65, 190, 135, 118, 190, 60, 133, 19, 151, 189, 45, 86, 171, 62, 127, 188, 98, 190, 32, 20, 12, 62, 53, 11, 234, 61, 208, 156, 216, 62, 124, 179, 48, 62, 24, 158, 203, 190, 211, 132, 19, 63, 103, 222, 6, 190, 156, 168, 83, 189, 196, 136, 33, 190, 159, 199, 11, 191, 212, 207, 237, 190, 91, 224, 244, 62, 92, 30, 9, 63, 224, 18, 229, 61, 238, 251, 81, 61, 155, 253, 135, 189, 44, 140, 18, 191, 156, 190, 102, 190, 209, 181, 161, 188, 10, 21, 190, 190, 242, 123, 169, 62, 8, 227, 107, 190, 30, 96, 163, 61, 58, 87, 15, 62, 6, 25, 149, 62, 25, 81, 239, 190, 86, 80, 218, 190, 18, 235, 163, 62, 184, 117, 195, 189, 105, 112, 46, 190, 198, 80, 71, 190, 124, 114, 238, 189, 124, 201, 199, 62, 177, 132, 248, 190, 148, 201, 92, 61, 174, 188, 250, 190, 89, 76, 5, 191, 197, 11, 9, 62, 144, 100, 16, 188, 110, 204, 181, 62, 80, 0, 132, 62, 36, 61, 254, 190, 194, 180, 165, 189, 75, 229, 185, 62, 143, 90, 178, 190, 33, 27, 17, 63, 218, 65, 137, 62, 223, 205, 65, 188, 64, 244, 55, 190, 94, 68, 147, 62, 43, 92, 4, 191, 27, 33, 132, 190, 75, 93, 122, 190, 176, 13, 167, 62, 172, 112, 46, 62, 69, 123, 14, 191, 86, 180, 134, 188, 144, 135, 142, 190, 202, 158, 22, 62, 185, 39, 143, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {172, 201, 19, 191, 190, 94, 179, 190, 120, 205, 250, 190, 13, 154, 15, 63, 221, 217, 11, 191, 99, 0, 186, 59, 98, 20, 250, 190, 163, 126, 151, 187, 234, 177, 176, 61, 194, 229, 174, 62, 126, 15, 168, 188, 146, 222, 241, 62, 139, 29, 33, 62, 213, 119, 173, 189, 249, 198, 247, 62, 203, 117, 170, 189, 62, 56, 248, 62, 5, 159, 92, 62, 155, 33, 64, 62, 123, 125, 44, 62, 177, 4, 10, 63, 118, 193, 171, 190, 20, 215, 18, 63, 159, 225, 232, 190, 98, 35, 2, 189, 245, 70, 163, 190, 167, 173, 249, 62, 199, 102, 173, 190, 112, 246, 75, 190, 177, 144, 7, 63, 47, 74, 89, 61, 69, 68, 200, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {39, 182, 18, 62, 36, 237, 128, 189, 147, 73, 21, 62, 22, 139, 17, 62, 199, 33, 21, 190, 6, 9, 134, 189, 24, 120, 123, 189, 240, 116, 52, 62, 226, 116, 11, 62, 131, 236, 5, 60, 25, 109, 26, 190, 204, 122, 107, 60, 92, 80, 168, 61, 66, 58, 108, 189, 221, 204, 12, 62, 15, 193, 16, 62, 221, 72, 137, 188, 157, 23, 254, 61, 105, 45, 32, 189, 58, 207, 147, 59, 254, 17, 28, 62, 68, 197, 205, 61, 150, 4, 193, 61, 100, 127, 185, 61, 46, 71, 218, 189, 37, 109, 22, 62, 7, 145, 199, 61, 48, 117, 188, 61, 244, 137, 19, 62, 95, 101, 166, 61, 224, 146, 230, 61, 181, 5, 150, 187, 244, 169, 109, 189, 45, 26, 203, 189, 131, 195, 238, 189, 72, 70, 2, 189, 85, 214, 170, 60, 114, 247, 254, 61, 153, 229, 133, 61, 51, 211, 92, 188, 186, 231, 207, 61, 4, 194, 134, 189, 22, 160, 153, 60, 69, 80, 43, 62, 232, 56, 213, 188, 183, 253, 222, 189, 128, 133, 212, 59, 105, 240, 224, 61, 97, 8, 144, 61, 110, 223, 167, 61, 97, 217, 17, 190, 248, 206, 154, 61, 147, 10, 0, 62, 176, 102, 2, 61, 30, 100, 20, 62, 38, 250, 150, 189, 20, 241, 24, 190, 113, 150, 134, 188, 206, 175, 139, 57, 101, 115, 242, 189, 90, 48, 237, 61, 240, 20, 40, 190, 150, 60, 20, 61, 93, 194, 18, 62, 106, 3, 198, 61, 156, 193, 150, 61, 204, 163, 214, 61, 64, 236, 68, 61, 147, 66, 34, 62, 48, 140, 4, 190, 241, 162, 207, 189, 173, 24, 25, 62, 241, 254, 163, 61, 181, 14, 14, 190, 207, 206, 170, 61, 162, 113, 199, 189, 245, 169, 21, 190, 17, 167, 46, 61, 82, 98, 183, 187, 196, 247, 101, 188, 149, 55, 174, 189, 220, 19, 75, 61, 145, 248, 47, 189, 184, 240, 205, 189, 1, 68, 149, 189, 69, 90, 220, 61, 127, 212, 188, 189, 190, 245, 143, 188, 212, 139, 11, 190, 85, 24, 133, 189, 86, 123, 253, 189, 20, 178, 202, 61, 203, 156, 29, 189, 17, 233, 158, 189, 86, 0, 29, 62, 247, 209, 50, 190, 88, 40, 219, 189, 236, 203, 145, 184, 22, 161, 220, 189, 220, 138, 103, 189, 89, 27, 171, 189, 97, 176, 242, 61, 43, 83, 146, 61, 135, 233, 29, 62, 189, 190, 149, 189, 41, 20, 127, 61, 58, 201, 14, 62, 244, 44, 21, 190, 46, 195, 152, 189, 103, 91, 72, 61, 78, 251, 220, 61, 15, 29, 246, 61, 252, 198, 223, 189, 244, 45, 167, 189, 186, 25, 51, 62, 46, 165, 24, 62, 232, 220, 204, 61, 249, 112, 143, 61, 13, 186, 51, 190, 37, 28, 51, 190, 108, 231, 74, 61, 68, 239, 68, 189, 16, 69, 22, 62, 52, 244, 18, 59, 96, 163, 18, 190, 226, 213, 22, 190, 247, 92, 194, 189, 140, 80, 46, 190, 209, 248, 42, 62, 154, 230, 194, 60, 162, 215, 93, 187, 215, 95, 243, 60, 170, 225, 200, 61, 252, 10, 157, 189, 160, 94, 158, 189, 157, 247, 157, 187, 248, 237, 113, 189, 182, 50, 154, 61, 107, 38, 134, 61, 23, 250, 104, 189, 155, 244, 38, 61, 171, 62, 251, 189, 47, 221, 147, 61, 104, 111, 105, 61, 76, 32, 147, 61, 95, 88, 73, 60, 56, 179, 139, 61, 106, 110, 243, 189, 24, 112, 28, 190, 135, 190, 252, 189, 133, 154, 16, 62, 27, 166, 78, 188, 20, 118, 23, 62, 240, 200, 230, 61, 224, 241, 32, 189, 154, 151, 25, 61, 51, 213, 30, 190, 98, 52, 42, 62, 0, 156, 33, 62, 210, 208, 26, 62, 101, 129, 14, 189, 224, 10, 31, 61, 245, 228, 132, 189, 131, 60, 223, 61, 191, 145, 234, 189, 55, 128, 194, 61, 210, 139, 233, 189, 125, 100, 204, 59, 225, 209, 46, 190, 139, 164, 217, 61, 34, 171, 105, 189, 230, 81, 1, 61, 59, 199, 71, 189, 201, 102, 21, 62, 69, 241, 217, 189, 112, 41, 148, 61, 192, 115, 218, 60, 11, 140, 248, 189, 64, 165, 127, 189, 216, 206, 33, 60, 203, 13, 45, 62, 94, 60, 204, 189, 73, 181, 1, 62, 50, 52, 42, 62, 104, 36, 21, 62, 173, 52, 245, 189, 132, 109, 9, 62, 62, 60, 102, 189, 32, 55, 191, 188, 28, 98, 15, 62, 67, 232, 225, 61, 2, 3, 238, 189, 90, 85, 38, 60, 210, 188, 13, 190, 6, 112, 246, 60, 12, 171, 153, 60, 52, 194, 201, 189, 41, 124, 77, 189, 30, 51, 131, 61, 11, 169, 0, 62, 147, 140, 122, 189, 116, 134, 126, 61, 63, 55, 48, 188, 204, 220, 203, 189, 95, 82, 8, 60, 41, 231, 41, 190, 3, 59, 32, 190, 14, 191, 22, 190, 209, 222, 57, 189, 13, 255, 125, 189, 225, 9, 116, 61, 41, 74, 191, 61, 177, 40, 76, 61, 244, 113, 27, 62, 118, 37, 190, 61, 150, 198, 15, 190, 116, 123, 41, 62, 182, 227, 0, 189, 135, 209, 65, 61, 51, 179, 23, 62, 205, 171, 17, 62, 151, 144, 45, 190, 195, 62, 30, 190, 145, 212, 180, 189, 246, 31, 44, 62, 17, 139, 20, 190, 73, 91, 82, 61, 97, 144, 1, 62, 144, 153, 161, 189, 156, 49, 36, 59, 27, 90, 16, 61, 208, 20, 232, 61, 117, 21, 227, 187, 1, 231, 29, 190, 234, 47, 243, 189, 150, 205, 169, 61, 121, 194, 17, 62, 101, 12, 5, 190, 35, 42, 40, 62, 134, 7, 187, 189, 221, 56, 183, 189, 137, 136, 45, 61, 36, 163, 253, 186, 24, 190, 109, 59, 138, 160, 34, 62, 182, 254, 235, 189, 115, 54, 128, 61, 169, 64, 6, 60, 184, 55, 43, 190, 97, 199, 43, 190, 204, 168, 43, 62, 115, 123, 237, 187, 6, 59, 45, 62, 112, 67, 232, 188, 36, 85, 143, 61, 84, 214, 230, 187, 100, 62, 39, 190, 228, 30, 74, 59, 66, 225, 12, 190, 122, 57, 15, 189, 152, 200, 170, 189, 218, 9, 106, 189, 219, 119, 148, 189, 95, 59, 134, 189, 35, 27, 189, 61, 60, 123, 36, 62, 197, 187, 176, 189, 123, 19, 194, 189, 210, 150, 131, 61, 79, 56, 15, 62, 242, 113, 194, 189, 85, 205, 10, 190, 110, 179, 2, 62, 224, 182, 32, 190, 80, 207, 49, 61, 60, 125, 7, 190, 79, 223, 96, 61, 242, 182, 126, 189, 142, 195, 115, 189, 11, 172, 220, 188, 255, 33, 39, 62, 15, 247, 99, 189, 48, 73, 204, 61, 144, 50, 142, 189, 30, 206, 4, 62, 24, 238, 175, 61, 134, 153, 9, 190, 134, 144, 129, 61, 129, 38, 156, 61, 252, 66, 52, 190, 38, 45, 236, 189, 53, 38, 65, 188, 217, 134, 21, 190, 178, 84, 48, 62, 202, 173, 96, 189, 177, 134, 24, 62, 248, 220, 177, 189, 70, 107, 49, 190, 25, 93, 3, 190, 62, 129, 234, 189, 111, 240, 169, 189, 89, 138, 30, 62, 32, 221, 120, 188, 168, 223, 191, 188, 193, 129, 25, 190, 159, 122, 204, 189, 223, 109, 207, 189, 42, 48, 170, 61, 128, 72, 246, 61, 76, 20, 6, 190, 107, 243, 13, 190, 138, 198, 133, 61, 114, 243, 82, 61, 104, 18, 185, 61, 137, 97, 132, 189, 47, 81, 162, 61, 215, 197, 1, 190, 86, 169, 42, 190, 201, 45, 250, 61, 180, 165, 156, 60, 65, 70, 133, 60, 117, 244, 8, 62, 67, 240, 34, 189, 233, 40, 60, 188, 127, 129, 184, 60, 189, 145, 239, 189, 170, 219, 152, 61, 210, 176, 236, 60, 24, 126, 50, 62, 106, 102, 144, 61, 27, 174, 175, 189, 59, 210, 131, 61, 75, 245, 157, 189, 68, 208, 39, 190, 20, 205, 32, 190, 164, 63, 11, 61, 235, 110, 4, 61, 21, 227, 229, 186, 68, 243, 7, 190, 26, 172, 179, 189, 44, 199, 46, 190, 119, 25, 175, 61, 1, 62, 246, 61, 9, 74, 233, 189, 92, 41, 207, 187, 111, 132, 40, 62, 216, 227, 40, 61, 116, 223, 22, 61, 81, 176, 172, 57, 63, 172, 247, 189, 167, 20, 38, 61, 27, 236, 52, 62, 206, 164, 41, 190, 18, 112, 20, 190, 93, 77, 107, 60, 117, 10, 204, 189, 58, 207, 40, 189, 61, 46, 118, 189, 245, 33, 52, 189, 202, 130, 22, 62, 54, 146, 144, 61, 175, 95, 196, 189, 89, 243, 90, 189, 18, 180, 13, 189, 124, 91, 23, 62, 237, 105, 51, 62, 108, 233, 76, 188, 238, 2, 38, 62, 17, 19, 155, 189, 64, 222, 42, 62, 175, 199, 180, 61, 91, 39, 141, 61, 215, 167, 18, 62, 250, 214, 163, 61, 140, 160, 183, 187, 40, 10, 14, 190, 224, 119, 177, 60, 197, 103, 116, 189, 59, 152, 45, 62, 236, 195, 128, 189, 98, 237, 88, 61, 249, 93, 11, 190, 211, 171, 62, 61, 144, 51, 28, 189, 14, 115, 3, 62, 101, 228, 221, 61, 107, 186, 43, 62, 13, 68, 126, 61, 190, 196, 105, 188, 160, 4, 194, 189, 70, 200, 42, 190, 108, 203, 191, 189, 13, 91, 72, 61, 16, 86, 209, 61, 247, 76, 44, 60, 41, 225, 225, 188, 148, 4, 176, 61, 104, 157, 247, 189, 236, 183, 38, 62, 30, 142, 14, 190, 185, 221, 61, 61, 64, 29, 35, 190, 7, 253, 208, 189, 136, 17, 123, 60, 148, 193, 39, 62, 232, 94, 158, 189, 226, 232, 99, 188, 65, 142, 194, 189, 50, 75, 143, 60, 151, 237, 45, 190, 120, 33, 218, 189, 207, 222, 111, 189, 113, 101, 33, 61, 226, 126, 65, 61, 81, 34, 237, 189, 123, 105, 190, 189, 189, 28, 2, 189, 190, 31, 166, 188, 101, 179, 9, 186, 38, 184, 42, 60, 89, 11, 242, 61, 147, 195, 172, 61, 244, 253, 59, 61, 191, 8, 146, 189, 64, 254, 225, 61, 157, 212, 242, 189, 78, 87, 48, 190, 73, 92, 230, 189, 89, 54, 89, 188, 92, 251, 166, 189, 173, 110, 237, 60, 1, 10, 147, 189, 73, 207, 161, 187, 191, 58, 187, 61, 24, 222, 20, 189, 100, 8, 197, 61, 233, 54, 34, 62, 116, 1, 46, 190, 233, 14, 12, 61, 24, 185, 48, 62, 238, 34, 148, 60, 55, 59, 9, 190, 16, 92, 203, 61, 33, 74, 220, 61, 224, 55, 199, 61, 53, 67, 127, 61, 229, 68, 43, 190, 215, 245, 68, 61, 159, 67, 22, 190, 46, 128, 184, 61, 23, 10, 32, 190, 9, 188, 36, 62, 2, 214, 50, 190, 31, 175, 76, 189, 185, 140, 44, 62, 83, 71, 226, 61, 241, 102, 210, 61, 188, 14, 165, 189, 204, 22, 182, 189, 67, 4, 24, 62, 215, 70, 20, 61, 165, 178, 59, 189, 153, 22, 11, 190, 11, 238, 216, 60, 29, 24, 128, 189, 87, 102, 197, 189, 177, 177, 68, 60, 209, 144, 218, 189, 6, 39, 189, 189, 63, 91, 41, 62, 124, 175, 204, 60, 197, 243, 166, 189, 31, 101, 166, 189, 78, 108, 214, 189, 10, 31, 23, 189, 122, 210, 40, 61, 166, 134, 229, 61, 12, 7, 241, 189, 97, 147, 3, 62, 56, 2, 114, 61, 176, 97, 1, 190, 200, 149, 224, 189, 249, 156, 220, 59, 174, 115, 143, 60, 20, 86, 30, 62, 31, 221, 44, 62, 222, 184, 27, 189, 201, 87, 203, 189, 137, 115, 242, 60, 57, 102, 227, 188, 89, 124, 25, 62, 99, 71, 218, 61, 181, 169, 15, 190, 128, 138, 213, 189, 29, 210, 5, 62, 174, 81, 13, 62, 140, 205, 47, 62, 131, 29, 244, 61, 41, 87, 223, 61, 67, 125, 4, 61, 214, 167, 0, 190, 36, 20, 14, 62, 199, 151, 181, 189, 244, 238, 182, 188, 195, 213, 36, 62, 100, 92, 120, 61, 14, 244, 26, 62, 95, 147, 28, 62, 64, 151, 183, 189, 78, 176, 30, 190, 160, 223, 103, 61, 61, 121, 229, 60, 179, 89, 4, 190, 134, 217, 61, 189, 2, 225, 1, 190, 127, 74, 16, 190, 38, 243, 35, 190, 115, 223, 222, 188, 136, 233, 223, 189, 81, 126, 3, 190, 171, 12, 252, 189, 56, 160, 43, 190, 115, 200, 25, 190, 252, 21, 20, 189, 225, 69, 249, 61, 19, 177, 26, 60, 100, 70, 118, 189, 150, 204, 158, 189, 243, 117, 186, 59, 163, 157, 51, 190, 90, 155, 247, 189, 36, 198, 255, 189, 158, 130, 214, 60, 112, 185, 157, 189, 1, 217, 80, 188, 2, 20, 97, 60, 172, 142, 153, 60, 226, 115, 226, 60, 139, 116, 239, 60, 77, 13, 40, 190, 193, 129, 48, 62, 120, 155, 178, 59, 121, 11, 31, 61, 73, 85, 99, 189, 94, 18, 33, 62, 255, 158, 41, 62, 5, 35, 1, 62, 178, 238, 155, 188, 246, 6, 74, 61, 0, 129, 225, 189, 185, 124, 223, 189, 45, 48, 52, 190, 153, 3, 245, 60, 62, 78, 150, 189, 68, 29, 110, 61, 183, 50, 50, 190, 50, 110, 42, 62, 212, 51, 204, 188, 201, 14, 65, 60, 240, 38, 86, 61, 119, 117, 19, 62, 254, 19, 48, 190, 174, 237, 33, 189, 8, 130, 224, 189, 174, 202, 137, 189, 166, 23, 5, 190, 146, 115, 25, 62, 82, 185, 209, 189, 238, 212, 40, 188, 218, 52, 79, 61, 129, 102, 146, 189, 26, 222, 136, 189, 246, 108, 240, 60, 185, 90, 113, 61, 121, 123, 33, 61, 109, 107, 63, 61, 116, 22, 24, 62, 205, 23, 17, 62, 107, 70, 230, 189, 32, 164, 158, 188, 20, 116, 24, 62, 95, 26, 9, 62, 194, 210, 171, 189, 193, 118, 213, 189, 150, 136, 103, 61, 178, 239, 64, 61, 219, 200, 130, 61, 175, 149, 202, 189, 235, 147, 229, 189, 47, 146, 59, 61, 98, 171, 253, 188, 72, 133, 220, 187, 246, 197, 245, 60, 161, 96, 143, 61, 50, 63, 249, 59, 51, 209, 20, 190, 26, 157, 26, 62, 162, 241, 242, 189, 74, 111, 43, 189, 146, 24, 3, 62, 248, 249, 20, 189, 239, 180, 69, 59, 251, 26, 20, 62, 8, 143, 42, 190, 235, 109, 39, 61, 118, 74, 92, 61, 53, 140, 251, 189, 182, 91, 123, 61, 111, 52, 38, 190, 178, 28, 172, 61, 13, 178, 212, 185, 131, 124, 206, 189, 9, 65, 44, 61, 181, 14, 84, 61, 173, 138, 12, 61, 209, 165, 15, 61, 48, 188, 85, 61, 186, 152, 28, 190, 247, 119, 204, 61, 102, 112, 132, 60, 122, 198, 41, 190, 6, 109, 47, 62, 80, 235, 112, 189, 123, 100, 176, 188, 164, 14, 21, 62, 188, 112, 206, 189, 195, 74, 135, 61, 10, 152, 250, 61, 22, 41, 226, 189, 168, 75, 35, 62, 74, 15, 214, 189, 151, 144, 238, 61, 51, 83, 43, 62, 1, 160, 37, 62, 232, 134, 94, 189, 119, 48, 15, 62, 217, 116, 223, 61, 126, 167, 156, 189, 201, 51, 143, 189, 16, 194, 129, 60, 173, 160, 19, 62, 211, 102, 253, 61, 247, 128, 73, 189, 113, 237, 11, 62, 173, 44, 37, 189, 165, 99, 196, 59, 153, 59, 6, 189, 164, 46, 46, 61, 135, 12, 44, 190, 242, 68, 189, 188, 41, 155, 225, 189, 140, 107, 231, 61, 147, 195, 4, 190, 250, 35, 239, 189, 170, 82, 108, 61, 141, 240, 204, 189, 202, 71, 245, 59, 112, 230, 110, 189, 125, 115, 6, 62, 228, 131, 250, 189, 253, 159, 73, 61, 242, 89, 234, 59, 32, 67, 241, 187, 96, 183, 237, 186, 253, 227, 155, 189, 193, 178, 42, 190, 130, 80, 3, 190, 6, 233, 110, 188, 66, 7, 135, 189, 60, 240, 162, 189, 203, 216, 181, 188, 252, 72, 173, 189, 229, 225, 248, 189, 92, 153, 98, 60, 248, 197, 40, 62, 30, 61, 144, 57, 29, 145, 227, 60, 169, 149, 35, 190, 185, 12, 52, 189, 205, 243, 8, 62, 25, 39, 167, 189, 238, 55, 40, 61, 44, 91, 225, 61, 183, 4, 47, 189, 31, 49, 166, 189, 108, 161, 23, 62, 70, 49, 129, 61, 177, 57, 170, 189, 144, 234, 147, 189, 101, 152, 7, 190, 192, 218, 166, 61, 124, 80, 98, 188, 23, 68, 2, 62, 46, 115, 4, 62, 191, 233, 179, 189, 191, 50, 208, 188, 80, 78, 95, 189, 122, 160, 0, 62, 41, 98, 197, 61, 189, 115, 21, 190, 128, 155, 138, 188, 75, 194, 235, 189, 227, 154, 249, 189, 35, 93, 192, 61, 31, 177, 170, 188, 107, 11, 50, 62, 197, 252, 17, 62, 252, 1, 148, 61, 101, 70, 52, 62, 178, 151, 160, 188, 30, 143, 12, 61, 139, 192, 217, 61, 47, 141, 8, 62, 123, 221, 103, 61, 202, 81, 209, 187, 115, 118, 242, 61, 62, 134, 147, 188, 34, 103, 201, 188, 78, 253, 201, 61, 181, 182, 52, 190, 154, 144, 225, 189, 63, 125, 200, 61, 241, 67, 233, 189, 129, 115, 40, 190, 49, 3, 133, 188, 43, 18, 77, 61, 142, 190, 162, 59, 74, 218, 12, 61, 210, 140, 210, 189, 57, 59, 149, 189, 213, 247, 17, 61, 227, 138, 222, 60, 116, 46, 14, 62, 242, 89, 45, 190, 68, 7, 43, 62, 155, 159, 225, 189, 30, 98, 18, 190, 119, 7, 23, 62, 233, 120, 188, 61, 194, 71, 184, 189, 22, 38, 32, 190, 2, 24, 9, 62, 238, 23, 242, 61, 198, 51, 9, 62, 134, 187, 5, 62, 159, 7, 213, 61, 176, 191, 170, 189, 142, 38, 0, 190, 145, 11, 108, 189, 164, 231, 50, 190, 180, 19, 245, 189, 71, 187, 5, 62, 203, 103, 180, 61, 122, 155, 52, 190, 89, 85, 7, 190, 126, 138, 12, 62, 110, 23, 4, 62, 60, 92, 36, 61, 103, 225, 40, 190, 246, 174, 16, 60, 203, 205, 150, 189, 241, 27, 17, 190, 253, 219, 28, 190, 239, 155, 245, 60, 70, 31, 178, 61, 226, 85, 52, 190, 79, 95, 178, 61, 130, 207, 222, 61, 58, 197, 179, 61, 155, 32, 173, 189, 161, 146, 29, 62, 108, 132, 75, 60, 81, 131, 51, 62, 225, 248, 27, 190, 155, 251, 194, 61, 219, 203, 66, 189, 213, 238, 167, 61, 63, 210, 25, 187, 90, 98, 25, 62, 105, 83, 21, 190, 4, 1, 134, 189, 19, 25, 34, 190, 96, 79, 29, 189, 87, 3, 210, 61, 176, 37, 188, 189, 221, 160, 144, 189, 86, 203, 164, 188, 5, 149, 206, 189, 109, 5, 21, 189, 193, 22, 49, 62, 197, 144, 76, 60, 180, 132, 39, 190, 46, 0, 187, 61, 111, 117, 21, 190, 203, 119, 0, 190, 178, 144, 23, 61, 22, 133, 83, 60, 11, 233, 206, 189, 113, 140, 201, 61, 205, 80, 193, 61, 205, 19, 189, 188, 23, 185, 142, 189, 76, 226, 116, 61, 173, 218, 218, 60, 172, 204, 106, 187, 46, 16, 228, 189, 177, 47, 207, 61, 238, 154, 56, 61, 119, 17, 50, 62, 52, 236, 52, 190, 67, 96, 142, 187, 145, 123, 35, 62, 85, 253, 13, 62, 234, 237, 11, 190, 20, 11, 39, 60, 54, 87, 240, 189, 37, 208, 221, 61, 142, 230, 2, 190, 58, 52, 122, 61, 193, 57, 131, 189, 116, 164, 119, 60, 110, 224, 44, 190, 177, 17, 50, 190, 39, 75, 38, 62, 86, 226, 41, 189, 246, 170, 1, 62, 165, 214, 17, 190, 51, 133, 210, 189, 242, 139, 47, 62, 43, 129, 31, 62, 251, 68, 206, 189, 80, 86, 95, 61, 106, 182, 103, 61, 183, 110, 152, 61, 251, 75, 147, 61, 111, 78, 183, 186, 62, 105, 46, 190, 115, 70, 199, 61, 184, 35, 52, 62, 14, 75, 248, 189, 226, 211, 205, 189, 230, 241, 19, 62, 124, 203, 229, 60, 119, 210, 44, 62, 42, 89, 107, 188, 106, 40, 87, 61, 177, 175, 232, 60, 132, 130, 185, 61, 19, 93, 210, 187, 1, 20, 130, 189, 242, 211, 233, 189, 159, 246, 44, 62, 174, 59, 47, 190, 172, 182, 37, 61, 107, 98, 173, 61, 123, 104, 41, 190, 193, 50, 42, 190, 175, 48, 90, 189, 2, 42, 197, 189, 36, 138, 51, 190, 196, 53, 140, 61, 149, 238, 52, 190, 122, 154, 32, 190, 43, 83, 197, 61, 126, 46, 156, 188, 116, 216, 221, 189, 92, 202, 13, 190, 115, 198, 5, 190, 180, 26, 199, 189, 81, 162, 41, 62, 163, 237, 111, 188, 70, 23, 75, 189, 174, 65, 64, 188, 219, 33, 128, 61, 235, 137, 97, 61, 45, 213, 31, 190, 202, 37, 147, 60, 115, 193, 40, 189, 125, 141, 36, 62, 45, 33, 188, 60, 231, 167, 218, 189, 111, 79, 0, 190, 143, 61, 25, 62, 4, 45, 243, 188, 252, 247, 53, 189, 21, 250, 26, 61, 57, 99, 5, 190, 134, 128, 203, 189, 190, 79, 13, 62, 31, 1, 67, 61, 147, 77, 132, 61, 224, 25, 70, 188, 222, 252, 158, 61, 251, 243, 2, 62, 194, 22, 190, 61, 212, 127, 194, 61, 58, 150, 141, 189, 229, 203, 37, 190, 173, 21, 141, 61, 88, 27, 143, 189, 144, 127, 188, 61, 222, 39, 252, 61, 221, 157, 172, 188, 9, 143, 233, 61, 110, 149, 198, 61, 76, 27, 34, 62, 25, 254, 48, 190, 224, 154, 29, 62, 176, 7, 42, 190, 209, 27, 247, 189, 131, 85, 152, 61, 109, 132, 236, 188, 133, 40, 48, 190, 51, 177, 111, 61, 42, 40, 130, 189, 89, 186, 90, 189, 52, 41, 48, 62, 87, 62, 115, 188, 186, 66, 174, 61, 46, 126, 60, 189, 113, 162, 12, 62, 249, 239, 211, 189, 69, 166, 19, 190, 134, 5, 4, 190, 168, 37, 65, 61, 106, 185, 6, 190, 187, 251, 241, 189, 151, 217, 128, 61, 174, 92, 52, 62, 163, 83, 164, 187, 182, 68, 14, 190, 50, 91, 32, 62, 154, 220, 182, 61, 128, 182, 47, 190, 9, 140, 100, 189, 192, 215, 42, 190, 1, 211, 206, 188, 88, 3, 131, 189, 80, 4, 10, 188, 22, 134, 34, 190, 136, 195, 50, 61, 136, 202, 218, 189, 237, 244, 50, 190, 41, 100, 182, 61, 40, 215, 18, 190, 18, 250, 139, 61, 46, 202, 254, 60, 8, 221, 45, 190, 33, 92, 216, 189, 236, 96, 176, 188, 220, 69, 50, 62, 110, 17, 190, 57, 241, 241, 168, 61, 117, 135, 48, 62, 189, 172, 146, 60, 187, 154, 73, 61, 70, 71, 158, 189, 53, 252, 21, 61, 243, 85, 218, 189, 218, 233, 219, 60, 199, 131, 13, 61, 102, 6, 14, 62, 114, 219, 185, 61, 100, 194, 130, 60, 65, 196, 156, 189, 113, 10, 141, 61, 7, 146, 156, 189, 135, 238, 181, 189, 76, 30, 206, 60, 18, 101, 244, 60, 145, 93, 144, 61, 81, 255, 129, 188, 102, 14, 3, 190, 200, 64, 153, 188, 36, 88, 226, 189, 154, 177, 133, 61, 190, 187, 178, 61, 180, 52, 225, 189, 157, 95, 13, 190, 255, 45, 141, 187, 175, 135, 135, 61, 95, 147, 60, 189, 201, 222, 26, 62, 254, 189, 25, 190, 91, 208, 148, 189, 184, 215, 151, 189, 143, 149, 48, 62, 205, 98, 14, 190, 249, 197, 159, 187, 17, 25, 154, 61, 67, 184, 73, 189, 41, 236, 45, 189, 122, 222, 168, 189, 84, 11, 201, 61, 32, 25, 31, 190, 54, 185, 92, 61, 96, 170, 236, 189, 240, 86, 12, 190, 58, 41, 186, 187, 183, 214, 198, 188, 159, 84, 101, 61, 76, 105, 29, 190, 161, 116, 38, 62, 69, 58, 18, 62, 94, 8, 1, 62, 205, 142, 34, 61, 181, 201, 11, 190, 141, 165, 18, 190, 77, 11, 137, 61, 217, 111, 170, 59, 182, 6, 186, 61, 114, 95, 60, 188, 189, 49, 33, 62, 149, 138, 101, 61, 184, 233, 135, 59, 152, 149, 121, 61, 1, 209, 6, 190, 174, 87, 12, 62, 79, 48, 90, 61, 141, 6, 185, 61, 79, 213, 186, 189, 180, 12, 217, 61, 218, 37, 206, 60, 154, 127, 185, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 28, 22, 190, 225, 210, 1, 62, 151, 24, 75, 60, 230, 154, 19, 190, 201, 119, 178, 189, 227, 38, 121, 60, 92, 240, 3, 62, 199, 121, 3, 190, 67, 175, 43, 61, 0, 126, 17, 62, 247, 94, 84, 59, 227, 21, 208, 186, 153, 252, 98, 61, 48, 218, 166, 61, 55, 177, 41, 189, 80, 69, 213, 189, 75, 61, 12, 190, 3, 4, 11, 190, 48, 117, 24, 190, 106, 96, 155, 61, 91, 147, 25, 188, 159, 97, 163, 189, 8, 32, 212, 60, 127, 4, 242, 188, 110, 121, 150, 189, 222, 108, 113, 61, 10, 210, 52, 59, 13, 146, 164, 61, 124, 69, 1, 190, 120, 202, 133, 189, 205, 82, 69, 61, 208, 37, 49, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 237, 145, 58, 132, 49, 215, 188, 121, 138, 183, 61, 9, 90, 202, 61, 114, 38, 5, 189, 166, 1, 228, 189, 8, 124, 15, 190, 184, 127, 139, 187, 227, 156, 7, 190, 209, 97, 22, 62, 132, 16, 160, 61, 64, 110, 0, 62, 205, 43, 111, 61, 247, 70, 164, 189, 64, 118, 72, 189, 213, 44, 45, 62, 86, 79, 251, 61, 247, 75, 222, 61, 207, 153, 67, 189, 218, 163, 23, 189, 36, 208, 9, 61, 252, 31, 28, 62, 224, 159, 128, 189, 216, 101, 23, 62, 99, 87, 7, 62, 175, 150, 214, 187, 198, 183, 223, 189, 1, 192, 86, 61, 143, 28, 251, 61, 237, 65, 215, 189, 248, 110, 43, 190, 19, 197, 50, 190, 37, 162, 143, 189, 115, 142, 93, 60, 87, 153, 110, 189, 177, 56, 65, 189, 224, 153, 49, 190, 132, 81, 135, 61, 165, 216, 111, 188, 105, 247, 13, 61, 51, 58, 4, 190, 80, 178, 23, 190, 23, 127, 174, 189, 12, 80, 248, 189, 223, 153, 190, 61, 117, 21, 99, 61, 78, 178, 49, 62, 115, 178, 176, 61, 136, 58, 25, 62, 248, 160, 4, 62, 102, 123, 158, 60, 208, 20, 249, 189, 225, 222, 24, 62, 131, 142, 183, 189, 229, 36, 0, 62, 166, 235, 71, 189, 150, 158, 172, 189, 66, 76, 162, 61, 87, 239, 140, 61, 255, 66, 236, 61, 78, 120, 171, 59, 141, 246, 176, 189, 194, 101, 17, 62, 239, 159, 130, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 251, 204, 189, 102, 194, 204, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {80, 40, 239, 61, 164, 59, 154, 63, 106, 194, 30, 64};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {76, 153, 131, 190, 217, 138, 118, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0005/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}