// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {6, 25, 37, 63, 84, 195, 93, 190, 180, 12, 122, 62, 190, 43, 121, 62, 2, 216, 13, 191, 185, 78, 239, 190, 123, 231, 78, 63, 199, 135, 74, 191, 241, 4, 172, 190, 73, 111, 40, 191, 35, 9, 24, 191, 209, 226, 63, 189, 248, 237, 175, 190, 76, 230, 168, 190, 2, 176, 243, 188, 229, 0, 89, 190, 4, 132, 131, 63, 154, 85, 160, 61, 234, 220, 28, 63, 180, 57, 253, 62, 95, 85, 2, 63, 136, 214, 129, 191, 252, 62, 51, 190, 1, 63, 33, 61, 145, 52, 103, 63, 196, 208, 73, 189, 129, 80, 191, 62, 38, 15, 153, 62, 154, 117, 25, 63, 151, 234, 8, 191, 156, 142, 176, 62, 226, 63, 134, 191, 190, 218, 84, 190, 228, 83, 199, 62, 198, 102, 40, 63, 173, 229, 228, 190, 202, 199, 124, 63, 73, 99, 203, 62, 97, 106, 218, 62, 178, 103, 243, 190, 87, 154, 33, 63, 245, 155, 9, 63, 145, 7, 225, 190, 16, 129, 137, 190, 140, 158, 240, 189, 142, 48, 117, 191, 47, 17, 2, 190, 162, 20, 16, 63, 127, 5, 125, 63, 185, 189, 70, 190, 170, 119, 14, 61, 226, 249, 131, 61, 157, 130, 163, 191, 52, 103, 133, 190, 177, 196, 83, 190, 44, 87, 236, 61, 17, 194, 189, 62, 137, 255, 113, 60, 100, 228, 77, 63, 88, 14, 151, 61, 122, 253, 32, 63, 220, 161, 135, 191, 10, 203, 9, 190, 142, 84, 93, 63, 9, 16, 56, 191, 72, 142, 134, 190, 117, 84, 153, 61, 103, 78, 177, 62, 89, 85, 38, 62, 102, 142, 185, 190, 111, 30, 105, 191, 115, 215, 200, 190, 95, 191, 99, 191, 108, 61, 69, 60, 250, 78, 28, 190, 161, 36, 77, 63, 43, 61, 142, 62, 140, 144, 231, 190, 8, 90, 176, 62, 229, 240, 50, 63, 141, 238, 81, 190, 66, 147, 129, 63, 222, 148, 93, 63, 14, 248, 165, 189, 222, 244, 232, 60, 24, 158, 1, 191, 167, 36, 40, 191, 190, 254, 1, 191, 137, 24, 118, 63, 17, 60, 157, 62, 226, 21, 36, 62, 76, 65, 55, 191, 185, 6, 62, 62, 177, 238, 215, 189, 15, 55, 125, 191, 186, 53, 100, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 210, 145, 191, 148, 127, 41, 191, 201, 189, 45, 191, 178, 236, 85, 63, 129, 31, 56, 191, 180, 191, 168, 62, 215, 21, 135, 191, 3, 253, 43, 62, 190, 8, 200, 190, 155, 209, 14, 189, 196, 134, 251, 59, 103, 99, 224, 61, 169, 227, 110, 189, 247, 68, 168, 61, 241, 160, 16, 63, 104, 91, 51, 190, 30, 228, 33, 63, 131, 211, 78, 62, 32, 217, 137, 62, 254, 109, 98, 62, 76, 9, 159, 62, 14, 212, 3, 191, 219, 64, 202, 62, 56, 54, 64, 191, 200, 105, 195, 62, 55, 62, 152, 190, 161, 122, 16, 63, 31, 150, 10, 190, 155, 3, 244, 190, 109, 49, 21, 63, 217, 157, 65, 62, 134, 236, 195, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {82, 124, 10, 190, 209, 144, 7, 190, 91, 223, 219, 189, 42, 157, 172, 62, 165, 234, 206, 189, 186, 164, 25, 190, 153, 195, 156, 190, 216, 140, 128, 62, 95, 163, 156, 60, 155, 43, 9, 190, 75, 208, 32, 190, 71, 181, 226, 189, 192, 100, 133, 188, 144, 234, 14, 190, 78, 31, 140, 62, 166, 170, 177, 61, 176, 233, 10, 62, 60, 0, 213, 189, 166, 241, 224, 188, 183, 119, 80, 58, 86, 77, 25, 62, 247, 101, 80, 61, 55, 137, 52, 62, 200, 122, 203, 61, 17, 195, 172, 61, 83, 243, 20, 60, 238, 16, 9, 62, 11, 167, 17, 62, 181, 191, 67, 61, 66, 84, 206, 61, 220, 7, 223, 61, 122, 91, 97, 189, 190, 32, 129, 62, 79, 249, 157, 190, 156, 16, 49, 191, 1, 67, 248, 189, 109, 35, 166, 188, 22, 160, 145, 190, 60, 45, 21, 62, 196, 115, 229, 189, 85, 52, 57, 62, 157, 245, 228, 61, 171, 254, 117, 190, 251, 76, 191, 62, 126, 55, 185, 59, 110, 82, 117, 190, 172, 250, 110, 61, 92, 10, 7, 62, 23, 151, 164, 62, 20, 15, 15, 191, 73, 26, 93, 190, 70, 175, 213, 189, 180, 67, 240, 61, 80, 51, 36, 191, 122, 63, 15, 60, 10, 241, 142, 190, 123, 122, 6, 190, 43, 197, 157, 189, 15, 254, 68, 61, 146, 132, 133, 62, 184, 136, 26, 62, 103, 101, 109, 191, 124, 117, 2, 62, 115, 91, 196, 61, 16, 62, 8, 191, 104, 116, 75, 191, 237, 122, 221, 60, 233, 56, 15, 61, 165, 84, 105, 61, 125, 76, 129, 62, 99, 143, 86, 190, 135, 80, 137, 62, 223, 1, 63, 61, 234, 90, 107, 190, 182, 250, 217, 62, 252, 125, 40, 190, 92, 210, 58, 190, 163, 217, 96, 61, 183, 0, 105, 62, 133, 144, 13, 62, 179, 172, 220, 61, 48, 240, 174, 62, 97, 144, 47, 61, 186, 98, 251, 61, 138, 199, 65, 62, 33, 55, 12, 63, 101, 249, 194, 61, 254, 11, 48, 191, 231, 18, 226, 189, 123, 146, 161, 61, 250, 172, 95, 190, 90, 10, 152, 62, 82, 211, 127, 191, 179, 68, 24, 62, 197, 244, 53, 62, 170, 26, 245, 191, 17, 64, 247, 189, 151, 8, 241, 187, 198, 204, 237, 189, 245, 252, 163, 189, 89, 27, 171, 189, 14, 29, 184, 61, 221, 51, 17, 61, 109, 169, 3, 62, 173, 150, 219, 189, 234, 220, 174, 60, 40, 218, 206, 61, 118, 212, 49, 190, 169, 85, 223, 189, 215, 126, 131, 60, 166, 150, 156, 61, 33, 39, 188, 61, 39, 19, 23, 190, 251, 192, 22, 190, 45, 5, 20, 62, 112, 72, 227, 61, 71, 54, 12, 61, 104, 188, 126, 61, 201, 33, 82, 190, 2, 108, 74, 190, 168, 63, 200, 60, 141, 58, 88, 189, 91, 85, 225, 61, 1, 53, 176, 58, 116, 177, 62, 190, 233, 92, 57, 190, 201, 38, 7, 190, 215, 84, 66, 190, 58, 66, 160, 62, 246, 60, 221, 189, 90, 100, 253, 190, 97, 76, 104, 62, 57, 217, 192, 61, 26, 161, 38, 190, 43, 115, 194, 189, 70, 36, 186, 61, 219, 30, 1, 188, 47, 126, 4, 62, 109, 238, 72, 190, 191, 177, 230, 60, 97, 171, 227, 61, 31, 28, 23, 190, 255, 142, 78, 62, 232, 79, 13, 60, 40, 40, 183, 62, 176, 155, 234, 190, 254, 21, 235, 61, 76, 182, 138, 188, 99, 161, 128, 190, 167, 123, 42, 191, 91, 65, 111, 62, 86, 190, 6, 190, 1, 83, 212, 62, 132, 112, 195, 60, 151, 227, 35, 62, 29, 1, 105, 62, 241, 45, 91, 190, 230, 140, 41, 62, 85, 42, 86, 62, 250, 212, 247, 61, 41, 168, 244, 62, 71, 215, 228, 189, 187, 62, 203, 190, 222, 238, 101, 62, 170, 0, 114, 190, 51, 172, 41, 189, 82, 173, 133, 61, 58, 137, 93, 62, 47, 163, 9, 189, 174, 161, 207, 61, 166, 179, 164, 190, 158, 166, 179, 61, 64, 124, 229, 61, 160, 154, 19, 62, 255, 138, 201, 189, 3, 69, 198, 60, 6, 153, 108, 62, 245, 121, 182, 190, 102, 26, 146, 189, 147, 235, 244, 59, 183, 47, 200, 60, 254, 50, 72, 191, 187, 86, 8, 62, 144, 125, 188, 61, 150, 70, 159, 62, 0, 11, 62, 190, 192, 179, 97, 62, 136, 117, 224, 188, 85, 213, 77, 189, 123, 141, 6, 61, 42, 104, 113, 61, 187, 165, 175, 189, 10, 112, 196, 190, 254, 236, 184, 190, 232, 205, 5, 191, 108, 232, 64, 61, 212, 244, 58, 189, 33, 38, 170, 189, 83, 228, 71, 62, 220, 15, 122, 61, 58, 193, 142, 62, 74, 139, 45, 62, 28, 115, 242, 190, 134, 12, 118, 61, 14, 184, 221, 62, 127, 226, 146, 190, 119, 86, 150, 189, 99, 135, 53, 191, 142, 121, 88, 62, 204, 23, 187, 190, 167, 62, 18, 186, 239, 16, 76, 62, 231, 161, 156, 189, 208, 102, 53, 191, 193, 24, 150, 61, 149, 120, 187, 190, 104, 34, 97, 62, 192, 45, 229, 189, 70, 220, 218, 61, 210, 241, 132, 62, 109, 113, 40, 62, 241, 39, 213, 190, 183, 170, 183, 190, 179, 91, 231, 189, 53, 174, 45, 191, 174, 45, 170, 190, 37, 230, 14, 191, 254, 255, 210, 62, 229, 33, 241, 189, 46, 138, 130, 62, 88, 121, 246, 190, 216, 111, 189, 62, 27, 78, 142, 190, 149, 40, 131, 191, 113, 164, 77, 62, 22, 158, 28, 191, 179, 226, 48, 190, 61, 100, 11, 190, 3, 38, 3, 63, 203, 17, 123, 61, 206, 247, 26, 190, 56, 48, 213, 62, 243, 17, 35, 62, 158, 28, 125, 188, 152, 87, 238, 62, 218, 254, 63, 190, 87, 222, 46, 62, 92, 208, 108, 191, 210, 48, 137, 188, 3, 214, 210, 190, 87, 234, 200, 190, 195, 188, 9, 191, 109, 129, 16, 191, 120, 240, 28, 62, 167, 185, 159, 62, 157, 41, 181, 191, 82, 12, 114, 62, 79, 86, 26, 190, 178, 173, 11, 191, 243, 30, 12, 62, 10, 129, 8, 190, 6, 201, 210, 190, 147, 143, 229, 188, 69, 219, 21, 189, 155, 79, 62, 62, 19, 61, 66, 62, 73, 128, 146, 190, 236, 77, 106, 188, 224, 8, 88, 62, 165, 168, 18, 62, 59, 42, 13, 189, 13, 111, 145, 190, 124, 122, 200, 62, 223, 24, 187, 190, 31, 250, 100, 61, 155, 186, 88, 190, 205, 120, 245, 187, 216, 95, 84, 191, 101, 5, 109, 189, 205, 67, 217, 189, 211, 94, 73, 62, 177, 76, 32, 190, 137, 157, 118, 62, 149, 60, 8, 61, 13, 175, 205, 61, 180, 207, 206, 189, 253, 207, 248, 188, 235, 93, 177, 61, 26, 168, 114, 189, 16, 250, 124, 190, 188, 162, 165, 190, 24, 239, 227, 61, 217, 134, 21, 190, 43, 197, 172, 62, 94, 42, 159, 190, 87, 228, 200, 62, 196, 104, 114, 190, 148, 172, 222, 190, 81, 91, 103, 191, 21, 166, 12, 190, 110, 110, 29, 190, 92, 64, 247, 189, 10, 95, 104, 61, 8, 105, 136, 189, 79, 170, 102, 189, 240, 139, 99, 191, 119, 192, 128, 190, 84, 243, 230, 62, 79, 19, 35, 190, 215, 78, 45, 191, 146, 163, 107, 189, 203, 132, 64, 191, 128, 149, 211, 62, 159, 224, 138, 189, 56, 191, 27, 62, 148, 21, 133, 61, 212, 168, 13, 191, 119, 218, 44, 190, 143, 50, 117, 189, 237, 88, 11, 191, 28, 14, 129, 188, 193, 89, 49, 62, 103, 65, 116, 189, 152, 134, 109, 189, 128, 164, 231, 61, 30, 158, 89, 191, 203, 160, 174, 190, 154, 18, 174, 190, 52, 39, 99, 62, 156, 39, 24, 62, 54, 191, 88, 62, 2, 172, 245, 61, 5, 127, 251, 60, 228, 174, 145, 190, 143, 219, 102, 190, 16, 19, 183, 189, 236, 8, 159, 62, 192, 30, 83, 189, 242, 213, 178, 190, 163, 88, 168, 190, 245, 1, 204, 188, 185, 181, 209, 62, 102, 60, 181, 61, 212, 243, 155, 61, 112, 220, 15, 60, 232, 139, 123, 62, 183, 221, 224, 61, 186, 167, 165, 62, 201, 146, 40, 61, 22, 186, 115, 191, 72, 14, 105, 62, 181, 115, 141, 62, 128, 212, 61, 191, 120, 112, 75, 190, 227, 197, 92, 190, 63, 99, 234, 60, 179, 207, 71, 61, 144, 89, 149, 189, 34, 244, 188, 190, 4, 168, 52, 62, 137, 110, 5, 190, 222, 87, 24, 190, 134, 100, 116, 61, 68, 217, 167, 189, 107, 117, 65, 188, 13, 44, 4, 62, 86, 116, 225, 61, 10, 175, 52, 62, 151, 195, 162, 61, 6, 41, 160, 59, 62, 100, 204, 61, 69, 117, 65, 62, 197, 103, 108, 62, 178, 93, 30, 62, 36, 156, 10, 61, 53, 144, 247, 188, 57, 78, 12, 62, 53, 159, 198, 189, 120, 75, 74, 62, 181, 206, 43, 62, 242, 82, 137, 189, 107, 35, 201, 189, 221, 133, 123, 61, 130, 247, 156, 189, 104, 118, 3, 62, 143, 163, 141, 61, 117, 199, 19, 62, 80, 119, 230, 60, 92, 70, 83, 189, 77, 115, 235, 189, 129, 58, 41, 190, 82, 102, 238, 189, 106, 72, 82, 61, 228, 139, 132, 61, 229, 159, 136, 187, 3, 159, 133, 189, 49, 159, 173, 61, 207, 184, 5, 190, 179, 189, 2, 62, 48, 113, 27, 190, 254, 192, 225, 186, 178, 79, 76, 190, 106, 93, 246, 189, 161, 80, 39, 188, 154, 204, 247, 61, 151, 111, 162, 189, 134, 118, 34, 189, 132, 199, 4, 190, 136, 153, 1, 188, 52, 71, 77, 190, 102, 177, 18, 190, 99, 65, 165, 189, 69, 198, 158, 59, 116, 11, 180, 60, 188, 220, 25, 190, 36, 6, 241, 189, 107, 211, 8, 189, 15, 154, 137, 59, 58, 166, 246, 189, 95, 188, 91, 62, 179, 202, 85, 190, 44, 177, 250, 61, 25, 48, 255, 188, 138, 234, 175, 62, 42, 62, 49, 189, 84, 250, 154, 189, 149, 200, 234, 190, 171, 90, 190, 189, 222, 254, 126, 190, 249, 230, 29, 191, 199, 208, 121, 62, 209, 134, 160, 190, 123, 154, 6, 191, 171, 197, 143, 62, 109, 241, 65, 190, 37, 13, 179, 188, 94, 53, 43, 61, 40, 86, 142, 191, 114, 144, 29, 190, 51, 58, 167, 62, 144, 13, 141, 62, 192, 5, 66, 190, 133, 3, 203, 61, 226, 145, 146, 190, 166, 80, 71, 62, 141, 147, 144, 189, 167, 153, 124, 190, 25, 198, 147, 62, 68, 173, 50, 63, 205, 205, 26, 190, 54, 171, 49, 191, 126, 205, 163, 61, 161, 128, 47, 190, 74, 155, 201, 190, 84, 131, 188, 62, 107, 37, 197, 61, 243, 171, 150, 62, 123, 213, 144, 61, 38, 2, 24, 191, 201, 40, 225, 62, 40, 62, 147, 62, 243, 188, 203, 189, 99, 194, 243, 190, 2, 108, 14, 190, 17, 57, 177, 62, 206, 174, 53, 191, 93, 80, 129, 189, 77, 90, 101, 190, 162, 162, 175, 190, 215, 171, 42, 191, 219, 165, 200, 188, 193, 117, 245, 189, 186, 253, 216, 61, 236, 190, 139, 190, 219, 250, 75, 62, 179, 218, 136, 62, 83, 224, 44, 62, 108, 119, 167, 190, 8, 110, 150, 61, 116, 152, 141, 62, 48, 245, 48, 191, 138, 150, 195, 189, 44, 180, 138, 61, 175, 168, 6, 62, 16, 31, 71, 62, 45, 228, 71, 62, 96, 152, 254, 190, 220, 177, 13, 190, 188, 218, 52, 190, 227, 253, 75, 61, 70, 124, 211, 62, 34, 169, 57, 62, 255, 18, 238, 190, 140, 118, 239, 189, 6, 178, 62, 62, 221, 92, 181, 62, 0, 161, 137, 62, 145, 15, 44, 62, 3, 84, 100, 62, 157, 138, 65, 61, 236, 49, 12, 188, 12, 157, 251, 62, 89, 57, 164, 187, 237, 97, 22, 61, 190, 176, 13, 62, 136, 155, 10, 62, 71, 144, 48, 62, 155, 144, 201, 62, 2, 181, 16, 190, 54, 206, 116, 189, 60, 149, 214, 62, 101, 228, 68, 190, 179, 89, 4, 190, 134, 217, 61, 189, 2, 225, 1, 190, 127, 74, 16, 190, 38, 243, 35, 190, 115, 223, 222, 188, 136, 233, 223, 189, 81, 126, 3, 190, 171, 12, 252, 189, 56, 160, 43, 190, 115, 200, 25, 190, 252, 21, 20, 189, 225, 69, 249, 61, 19, 177, 26, 60, 100, 70, 118, 189, 150, 204, 158, 189, 243, 117, 186, 59, 163, 157, 51, 190, 90, 155, 247, 189, 36, 198, 255, 189, 158, 130, 214, 60, 112, 185, 157, 189, 1, 217, 80, 188, 2, 20, 97, 60, 172, 142, 153, 60, 226, 115, 226, 60, 139, 116, 239, 60, 77, 13, 40, 190, 193, 129, 48, 62, 120, 155, 178, 59, 121, 11, 31, 61, 73, 85, 99, 189, 167, 24, 3, 62, 255, 158, 41, 62, 5, 35, 1, 62, 40, 181, 255, 188, 246, 6, 74, 61, 68, 7, 8, 190, 246, 70, 24, 190, 239, 65, 76, 190, 80, 228, 238, 188, 232, 112, 150, 189, 98, 17, 145, 188, 64, 54, 69, 190, 11, 26, 204, 61, 84, 15, 178, 189, 196, 63, 201, 188, 32, 224, 37, 60, 129, 107, 91, 61, 230, 68, 83, 190, 63, 88, 209, 189, 74, 197, 28, 190, 159, 15, 240, 189, 166, 23, 5, 190, 242, 56, 173, 61, 82, 185, 209, 189, 68, 202, 230, 188, 218, 52, 79, 61, 112, 107, 151, 189, 88, 142, 198, 189, 246, 108, 240, 60, 11, 95, 164, 187, 239, 97, 26, 189, 109, 107, 63, 61, 119, 254, 232, 190, 94, 113, 10, 62, 55, 166, 135, 61, 53, 196, 149, 62, 168, 243, 129, 60, 170, 224, 188, 62, 72, 235, 227, 190, 18, 165, 138, 62, 171, 28, 56, 191, 191, 172, 15, 190, 226, 160, 248, 62, 8, 52, 160, 190, 191, 220, 129, 191, 231, 238, 34, 62, 138, 248, 77, 62, 170, 135, 251, 61, 171, 90, 80, 189, 161, 75, 14, 63, 57, 51, 101, 62, 83, 251, 149, 190, 193, 86, 196, 62, 103, 21, 74, 61, 171, 99, 52, 189, 61, 118, 111, 61, 251, 101, 130, 188, 105, 28, 39, 190, 143, 20, 52, 189, 68, 217, 135, 191, 227, 155, 77, 61, 86, 61, 153, 62, 186, 98, 150, 62, 133, 174, 196, 61, 164, 181, 42, 190, 133, 191, 45, 61, 168, 182, 248, 188, 235, 76, 33, 190, 162, 169, 38, 61, 183, 197, 140, 60, 182, 3, 105, 60, 30, 53, 185, 59, 11, 6, 4, 61, 163, 126, 82, 190, 233, 104, 133, 61, 100, 214, 18, 189, 107, 97, 66, 190, 138, 193, 9, 62, 184, 252, 214, 189, 241, 144, 83, 189, 209, 147, 205, 61, 58, 189, 27, 190, 150, 8, 14, 61, 156, 105, 204, 61, 234, 211, 39, 190, 93, 141, 17, 62, 88, 26, 11, 190, 106, 237, 158, 61, 87, 241, 18, 62, 35, 4, 228, 61, 81, 150, 252, 189, 217, 106, 248, 61, 175, 31, 122, 61, 207, 75, 218, 189, 39, 159, 163, 189, 45, 56, 140, 59, 173, 160, 19, 62, 43, 180, 215, 61, 19, 38, 123, 189, 58, 219, 239, 61, 204, 35, 105, 189, 74, 4, 30, 188, 153, 59, 6, 189, 5, 128, 217, 60, 42, 230, 45, 190, 138, 169, 27, 189, 84, 240, 240, 189, 228, 94, 197, 61, 147, 195, 4, 190, 250, 35, 239, 189, 232, 35, 29, 61, 236, 135, 223, 189, 94, 137, 37, 188, 31, 139, 166, 189, 3, 195, 231, 61, 161, 250, 12, 190, 154, 214, 212, 60, 242, 89, 234, 59, 246, 93, 207, 188, 68, 174, 133, 188, 110, 244, 187, 189, 14, 112, 49, 190, 98, 174, 20, 190, 6, 233, 110, 188, 204, 158, 162, 189, 103, 83, 203, 189, 133, 51, 84, 189, 20, 189, 183, 189, 155, 74, 45, 191, 117, 40, 208, 189, 93, 47, 175, 62, 157, 216, 74, 190, 40, 17, 28, 62, 160, 97, 228, 61, 233, 84, 226, 188, 140, 91, 35, 62, 188, 236, 13, 190, 64, 252, 148, 61, 242, 14, 141, 62, 166, 2, 80, 189, 176, 0, 188, 189, 67, 78, 130, 62, 140, 98, 156, 60, 149, 132, 112, 61, 0, 154, 58, 190, 75, 253, 7, 190, 84, 40, 34, 62, 180, 58, 42, 60, 188, 33, 129, 62, 201, 185, 248, 62, 164, 48, 54, 60, 39, 127, 186, 190, 4, 153, 131, 190, 79, 224, 93, 62, 108, 239, 123, 189, 130, 251, 226, 184, 46, 122, 87, 190, 196, 3, 207, 61, 104, 202, 48, 190, 43, 164, 50, 191, 193, 193, 46, 190, 36, 175, 77, 62, 251, 168, 228, 62, 255, 127, 151, 189, 172, 87, 126, 61, 61, 188, 148, 190, 238, 213, 0, 190, 106, 45, 94, 191, 186, 205, 145, 190, 233, 232, 61, 190, 161, 146, 133, 62, 67, 216, 36, 190, 138, 194, 121, 191, 160, 240, 147, 62, 7, 150, 9, 190, 116, 16, 151, 62, 40, 17, 130, 188, 51, 65, 105, 62, 52, 19, 251, 62, 109, 116, 17, 191, 162, 237, 246, 61, 104, 150, 22, 63, 59, 152, 22, 191, 198, 150, 218, 190, 172, 94, 140, 191, 8, 189, 176, 189, 181, 77, 178, 190, 229, 85, 26, 190, 140, 214, 155, 61, 30, 196, 24, 190, 117, 162, 17, 63, 16, 132, 201, 190, 24, 96, 141, 190, 20, 96, 146, 62, 28, 17, 163, 62, 89, 164, 73, 61, 254, 145, 55, 61, 30, 46, 98, 190, 44, 25, 152, 189, 167, 234, 204, 190, 231, 46, 136, 61, 227, 232, 46, 62, 27, 33, 194, 61, 241, 118, 174, 189, 122, 66, 76, 189, 252, 248, 103, 189, 55, 145, 124, 189, 254, 90, 7, 62, 203, 154, 232, 61, 237, 250, 132, 61, 18, 127, 53, 190, 216, 116, 5, 190, 253, 252, 112, 62, 224, 227, 181, 62, 217, 136, 113, 61, 0, 100, 106, 62, 163, 107, 247, 189, 220, 203, 98, 188, 66, 63, 64, 190, 170, 91, 169, 61, 23, 137, 77, 62, 161, 86, 219, 190, 95, 240, 180, 62, 99, 171, 44, 62, 58, 197, 179, 61, 23, 45, 173, 189, 120, 162, 24, 62, 48, 100, 198, 58, 81, 131, 51, 62, 225, 248, 27, 190, 155, 251, 194, 61, 219, 203, 66, 189, 213, 238, 167, 61, 63, 210, 25, 187, 55, 141, 14, 62, 247, 92, 21, 190, 4, 1, 134, 189, 208, 47, 34, 190, 49, 40, 55, 189, 87, 3, 210, 61, 252, 186, 210, 189, 93, 147, 170, 189, 18, 70, 174, 188, 5, 149, 206, 189, 181, 233, 76, 189, 9, 171, 43, 62, 52, 106, 14, 60, 43, 225, 39, 190, 46, 0, 187, 61, 130, 23, 22, 190, 180, 137, 3, 190, 178, 144, 23, 61, 179, 235, 26, 60, 198, 36, 207, 189, 196, 61, 184, 61, 115, 66, 192, 61, 83, 72, 224, 61, 243, 114, 127, 61, 172, 85, 141, 62, 135, 195, 105, 190, 9, 197, 208, 58, 163, 229, 53, 62, 92, 61, 176, 62, 130, 70, 94, 191, 19, 52, 193, 62, 204, 31, 19, 190, 176, 78, 108, 61, 16, 115, 37, 62, 211, 176, 218, 62, 208, 45, 26, 190, 50, 86, 158, 189, 55, 46, 61, 190, 180, 198, 129, 62, 111, 224, 70, 61, 145, 195, 94, 59, 141, 212, 81, 62, 144, 103, 153, 61, 22, 242, 53, 62, 78, 67, 118, 59, 127, 163, 168, 62, 65, 219, 203, 190, 182, 91, 134, 62, 140, 232, 12, 190, 63, 237, 5, 61, 248, 38, 79, 62, 24, 59, 106, 62, 187, 80, 252, 190, 223, 47, 163, 189, 164, 221, 112, 61, 5, 56, 154, 61, 251, 75, 147, 61, 205, 26, 236, 188, 62, 105, 46, 190, 149, 49, 135, 61, 195, 181, 41, 62, 80, 18, 20, 190, 233, 100, 243, 189, 22, 171, 182, 61, 223, 49, 223, 60, 155, 231, 233, 61, 192, 244, 31, 189, 80, 126, 87, 61, 78, 173, 1, 188, 151, 148, 173, 61, 31, 57, 136, 189, 194, 138, 144, 189, 94, 0, 235, 189, 122, 58, 0, 62, 100, 204, 100, 190, 172, 182, 37, 61, 134, 227, 99, 61, 130, 39, 49, 190, 124, 59, 75, 190, 230, 93, 213, 189, 145, 198, 24, 190, 247, 136, 82, 190, 28, 225, 223, 60, 195, 128, 72, 190, 22, 148, 26, 190, 144, 28, 203, 61, 134, 83, 189, 190, 42, 12, 136, 190, 102, 230, 193, 190, 61, 41, 114, 60, 228, 31, 254, 189, 7, 76, 132, 62, 61, 252, 119, 190, 13, 136, 35, 62, 147, 94, 42, 190, 121, 54, 8, 190, 248, 102, 48, 191, 243, 112, 0, 190, 145, 192, 109, 190, 169, 215, 60, 191, 144, 187, 121, 62, 251, 18, 111, 190, 104, 140, 22, 191, 125, 165, 2, 191, 73, 103, 44, 190, 77, 149, 82, 62, 68, 65, 214, 190, 132, 164, 29, 190, 248, 157, 123, 190, 141, 128, 98, 191, 186, 217, 181, 62, 86, 105, 61, 189, 175, 130, 35, 62, 57, 54, 201, 61, 95, 121, 21, 191, 18, 95, 34, 60, 232, 179, 12, 190, 13, 104, 38, 191, 58, 150, 141, 189, 54, 205, 19, 191, 156, 40, 5, 191, 35, 211, 23, 62, 118, 36, 56, 61, 11, 222, 60, 62, 91, 74, 191, 189, 154, 0, 185, 62, 182, 11, 6, 190, 133, 189, 40, 188, 141, 242, 78, 62, 230, 101, 85, 57, 0, 132, 87, 190, 31, 42, 60, 191, 240, 162, 105, 62, 105, 9, 144, 189, 195, 195, 152, 189, 49, 154, 82, 62, 89, 241, 18, 191, 213, 86, 160, 189, 131, 193, 22, 61, 54, 105, 150, 190, 86, 45, 13, 190, 57, 93, 14, 190, 58, 145, 149, 62, 207, 113, 7, 191, 83, 87, 114, 190, 150, 42, 20, 191, 142, 159, 147, 59, 17, 27, 66, 190, 187, 40, 253, 189, 89, 53, 158, 61, 168, 90, 44, 62, 163, 83, 164, 187, 182, 68, 14, 190, 237, 196, 26, 62, 154, 220, 182, 61, 110, 5, 59, 190, 224, 136, 159, 189, 198, 53, 50, 190, 93, 102, 79, 189, 73, 38, 131, 189, 0, 71, 31, 188, 74, 45, 41, 190, 171, 48, 159, 60, 216, 172, 13, 190, 18, 32, 57, 190, 130, 130, 124, 61, 53, 253, 21, 190, 27, 252, 125, 61, 176, 107, 12, 60, 247, 244, 50, 190, 235, 74, 226, 189, 236, 96, 176, 188, 217, 177, 25, 62, 110, 17, 190, 57, 178, 192, 157, 61, 117, 135, 48, 62, 43, 243, 36, 60, 187, 154, 73, 61, 70, 71, 158, 189, 10, 231, 47, 60, 155, 55, 245, 189, 218, 233, 219, 60, 98, 227, 193, 190, 167, 226, 34, 190, 122, 2, 116, 190, 15, 27, 229, 190, 13, 43, 195, 189, 138, 169, 159, 62, 48, 227, 143, 190, 169, 8, 27, 191, 94, 239, 9, 190, 59, 62, 35, 61, 154, 234, 0, 190, 151, 164, 19, 60, 231, 77, 78, 190, 199, 130, 196, 189, 170, 190, 157, 190, 138, 68, 149, 190, 28, 18, 236, 61, 119, 86, 25, 191, 178, 186, 137, 190, 141, 108, 166, 62, 232, 97, 22, 61, 36, 183, 254, 189, 68, 96, 79, 62, 211, 66, 6, 191, 195, 160, 126, 190, 177, 209, 48, 190, 59, 223, 211, 62, 140, 113, 133, 190, 128, 60, 147, 190, 124, 35, 32, 62, 41, 88, 5, 191, 117, 115, 1, 191, 238, 172, 116, 62, 124, 214, 69, 61, 63, 153, 167, 190, 180, 19, 131, 62, 136, 197, 52, 190, 18, 44, 120, 190, 147, 249, 110, 61, 40, 144, 15, 62, 125, 138, 18, 62, 99, 234, 93, 190, 181, 103, 148, 61, 89, 26, 255, 61, 233, 132, 102, 62, 73, 180, 29, 61, 19, 226, 80, 189, 178, 127, 50, 190, 71, 55, 96, 62, 173, 170, 238, 189, 13, 4, 10, 62, 133, 208, 243, 186, 27, 76, 211, 61, 168, 93, 146, 190, 0, 15, 41, 61, 166, 119, 168, 60, 8, 127, 151, 61, 136, 159, 79, 61, 114, 150, 207, 61, 17, 42, 80, 61, 131, 121, 187, 189, 14, 89, 153, 61, 240, 126, 62, 61, 107, 248, 112, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 76, 149, 61, 36, 222, 70, 62, 189, 192, 103, 62, 69, 214, 50, 190, 227, 132, 77, 62, 8, 171, 13, 62, 238, 104, 165, 62, 199, 220, 228, 61, 219, 218, 112, 62, 21, 230, 132, 62, 203, 245, 139, 60, 114, 168, 221, 61, 82, 182, 154, 60, 112, 169, 95, 62, 197, 91, 195, 188, 95, 244, 85, 189, 75, 61, 12, 190, 215, 70, 89, 190, 101, 123, 9, 60, 109, 133, 170, 60, 224, 101, 242, 188, 138, 195, 239, 189, 127, 175, 173, 190, 11, 46, 9, 190, 144, 149, 171, 189, 169, 75, 165, 189, 39, 97, 44, 189, 167, 131, 194, 61, 105, 89, 223, 186, 157, 224, 156, 189, 158, 33, 156, 61, 62, 37, 169, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {214, 45, 80, 188, 108, 135, 188, 190, 156, 23, 10, 63, 178, 224, 100, 61, 212, 226, 94, 190, 2, 54, 64, 190, 249, 14, 82, 191, 75, 134, 151, 63, 10, 242, 236, 190, 124, 129, 42, 63, 212, 84, 68, 62, 203, 135, 144, 61, 49, 101, 145, 61, 202, 107, 17, 191, 93, 113, 62, 191, 49, 2, 1, 63, 86, 79, 251, 61, 114, 23, 93, 61, 220, 225, 24, 191, 135, 10, 76, 187, 93, 105, 63, 61, 223, 66, 208, 62, 126, 48, 140, 191, 247, 141, 160, 62, 21, 23, 7, 62, 99, 144, 247, 62, 158, 23, 63, 189, 121, 148, 74, 63, 231, 209, 92, 63, 72, 11, 203, 189, 163, 227, 132, 191, 100, 6, 22, 190, 230, 207, 30, 190, 219, 22, 177, 190, 149, 26, 186, 61, 237, 60, 28, 189, 42, 183, 163, 190, 181, 183, 171, 59, 79, 225, 122, 61, 6, 162, 24, 62, 57, 51, 61, 190, 202, 161, 136, 189, 144, 14, 204, 190, 63, 161, 88, 190, 23, 251, 125, 61, 48, 251, 25, 62, 169, 221, 13, 63, 73, 209, 208, 61, 136, 58, 25, 62, 28, 161, 29, 62, 113, 37, 198, 60, 85, 208, 116, 189, 116, 13, 8, 62, 65, 119, 170, 62, 164, 25, 156, 62, 154, 173, 216, 61, 149, 131, 172, 189, 79, 142, 107, 189, 230, 251, 168, 61, 70, 147, 50, 62, 51, 250, 37, 189, 118, 21, 175, 189, 11, 214, 191, 62, 92, 218, 72, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 89, 59, 190, 114, 115, 175, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {215, 192, 21, 63, 193, 153, 60, 190, 216, 87, 69, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {130, 65, 0, 62, 88, 0, 147, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0005/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}