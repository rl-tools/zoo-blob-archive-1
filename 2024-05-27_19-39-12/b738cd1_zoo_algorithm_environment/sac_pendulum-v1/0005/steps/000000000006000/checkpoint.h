// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {229, 18, 2, 63, 21, 234, 97, 190, 84, 14, 154, 62, 88, 247, 8, 60, 168, 65, 143, 190, 133, 187, 242, 190, 183, 40, 66, 63, 75, 74, 22, 191, 51, 18, 210, 190, 185, 122, 11, 191, 65, 72, 18, 191, 171, 59, 199, 188, 248, 237, 175, 190, 76, 230, 168, 190, 2, 176, 243, 188, 194, 31, 178, 190, 231, 189, 100, 63, 64, 72, 73, 61, 32, 93, 246, 62, 216, 135, 144, 62, 193, 28, 8, 63, 247, 89, 39, 191, 175, 104, 70, 189, 104, 45, 199, 60, 169, 36, 50, 63, 196, 23, 195, 61, 87, 7, 223, 62, 219, 140, 217, 62, 132, 159, 30, 63, 33, 222, 245, 190, 90, 147, 226, 62, 24, 90, 58, 191, 255, 232, 74, 190, 249, 186, 212, 62, 250, 168, 32, 63, 140, 246, 234, 190, 32, 108, 103, 63, 7, 240, 168, 62, 253, 248, 239, 62, 60, 152, 179, 190, 224, 101, 255, 188, 38, 79, 44, 63, 168, 255, 181, 190, 43, 229, 49, 190, 89, 235, 157, 189, 185, 32, 63, 191, 17, 17, 10, 190, 194, 25, 31, 63, 167, 34, 119, 63, 55, 147, 96, 190, 235, 253, 140, 61, 32, 82, 45, 62, 202, 168, 108, 191, 36, 204, 89, 190, 129, 22, 152, 190, 170, 204, 6, 190, 191, 133, 185, 62, 20, 51, 75, 61, 1, 55, 87, 63, 241, 65, 135, 189, 214, 185, 41, 63, 51, 200, 71, 191, 72, 140, 141, 190, 165, 187, 103, 63, 240, 151, 4, 191, 51, 37, 128, 190, 65, 238, 137, 61, 207, 188, 12, 60, 36, 181, 106, 62, 58, 8, 51, 191, 134, 69, 252, 190, 230, 2, 206, 190, 149, 17, 75, 191, 42, 38, 187, 62, 174, 150, 118, 189, 178, 251, 56, 63, 64, 99, 83, 62, 200, 176, 252, 190, 187, 169, 144, 62, 204, 186, 245, 62, 62, 216, 84, 190, 189, 184, 99, 63, 235, 162, 249, 62, 28, 230, 44, 190, 141, 65, 173, 190, 22, 80, 198, 190, 70, 228, 46, 191, 236, 197, 254, 190, 109, 232, 251, 62, 138, 133, 151, 62, 4, 191, 25, 62, 214, 154, 83, 191, 91, 245, 65, 62, 47, 205, 14, 191, 167, 130, 170, 190, 229, 222, 176, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {76, 140, 73, 191, 62, 118, 27, 191, 218, 202, 32, 191, 95, 119, 70, 63, 129, 31, 56, 191, 33, 178, 114, 62, 2, 199, 78, 191, 207, 90, 206, 61, 194, 227, 183, 190, 207, 148, 63, 61, 183, 211, 115, 61, 252, 170, 227, 61, 172, 248, 116, 189, 138, 211, 154, 60, 227, 105, 8, 63, 174, 94, 121, 190, 227, 88, 15, 63, 152, 10, 76, 62, 180, 208, 135, 62, 25, 93, 115, 62, 246, 211, 106, 62, 198, 200, 233, 190, 89, 131, 9, 63, 160, 59, 246, 190, 138, 69, 204, 61, 113, 140, 164, 190, 253, 48, 11, 63, 11, 88, 23, 190, 54, 69, 51, 190, 76, 230, 10, 63, 94, 220, 250, 61, 156, 193, 155, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 56, 80, 190, 229, 204, 42, 190, 167, 156, 122, 186, 139, 206, 83, 62, 165, 234, 206, 189, 109, 13, 203, 188, 82, 53, 66, 190, 163, 111, 93, 62, 241, 160, 178, 61, 42, 47, 39, 187, 117, 207, 206, 189, 109, 226, 148, 185, 241, 20, 128, 60, 117, 36, 30, 190, 224, 201, 117, 62, 124, 156, 152, 61, 68, 158, 42, 62, 194, 139, 122, 61, 206, 5, 96, 189, 25, 153, 148, 189, 107, 133, 102, 62, 103, 53, 218, 59, 123, 72, 16, 62, 205, 64, 247, 60, 127, 228, 70, 189, 180, 1, 145, 61, 217, 220, 9, 62, 2, 43, 138, 62, 237, 74, 174, 61, 156, 58, 206, 61, 176, 45, 236, 61, 129, 171, 38, 190, 203, 103, 191, 189, 233, 149, 142, 190, 197, 119, 222, 190, 135, 76, 1, 190, 109, 35, 166, 188, 23, 129, 184, 188, 161, 160, 183, 188, 63, 192, 174, 188, 201, 213, 150, 61, 61, 201, 212, 61, 190, 142, 54, 190, 6, 185, 194, 62, 134, 125, 41, 60, 88, 16, 17, 190, 72, 82, 155, 60, 211, 159, 61, 189, 4, 96, 166, 62, 59, 33, 149, 190, 131, 74, 45, 190, 42, 96, 2, 188, 64, 23, 158, 61, 69, 143, 20, 191, 229, 188, 171, 61, 107, 97, 223, 189, 194, 254, 124, 190, 254, 140, 225, 189, 88, 246, 173, 61, 4, 4, 154, 62, 245, 54, 29, 62, 111, 200, 139, 190, 110, 240, 149, 189, 144, 33, 78, 62, 230, 35, 130, 190, 100, 188, 139, 188, 33, 165, 130, 62, 165, 202, 17, 62, 165, 84, 105, 61, 18, 122, 161, 61, 3, 165, 31, 190, 62, 167, 155, 62, 108, 148, 136, 61, 45, 132, 150, 190, 39, 197, 238, 62, 138, 12, 99, 190, 152, 55, 93, 190, 109, 169, 154, 61, 190, 161, 68, 62, 229, 120, 59, 62, 91, 137, 236, 61, 236, 121, 165, 62, 182, 177, 175, 61, 22, 78, 14, 62, 90, 62, 77, 62, 241, 182, 39, 63, 240, 238, 171, 61, 167, 192, 29, 191, 198, 128, 41, 190, 91, 166, 63, 61, 23, 159, 255, 189, 8, 243, 51, 62, 76, 2, 10, 191, 113, 239, 8, 62, 103, 130, 161, 62, 191, 240, 179, 191, 17, 64, 247, 189, 151, 8, 241, 187, 198, 204, 237, 189, 15, 30, 150, 189, 89, 27, 171, 189, 4, 230, 197, 61, 221, 51, 17, 61, 61, 147, 9, 62, 173, 150, 219, 189, 234, 220, 174, 60, 40, 218, 206, 61, 118, 212, 49, 190, 169, 85, 223, 189, 93, 83, 200, 60, 213, 176, 165, 61, 146, 98, 205, 61, 39, 19, 23, 190, 251, 192, 22, 190, 164, 131, 26, 62, 203, 142, 234, 61, 71, 54, 12, 61, 104, 188, 126, 61, 207, 158, 77, 190, 2, 108, 74, 190, 108, 77, 251, 60, 141, 58, 88, 189, 239, 161, 229, 61, 1, 53, 176, 58, 116, 177, 62, 190, 201, 178, 45, 190, 29, 244, 6, 190, 215, 84, 66, 190, 106, 182, 208, 61, 167, 79, 190, 189, 172, 250, 113, 190, 23, 24, 41, 62, 57, 217, 192, 61, 125, 57, 48, 187, 213, 175, 49, 189, 241, 219, 9, 62, 91, 114, 162, 60, 111, 19, 16, 62, 228, 231, 0, 61, 243, 105, 251, 60, 177, 149, 29, 62, 104, 138, 236, 189, 35, 52, 105, 62, 234, 155, 232, 60, 32, 156, 169, 62, 252, 89, 39, 189, 193, 219, 244, 61, 101, 29, 17, 190, 171, 202, 203, 189, 56, 63, 20, 191, 199, 147, 120, 62, 122, 87, 210, 188, 15, 211, 158, 62, 93, 205, 74, 58, 155, 8, 86, 61, 183, 184, 104, 62, 184, 37, 36, 190, 99, 42, 118, 62, 16, 64, 5, 62, 94, 229, 36, 62, 216, 196, 79, 62, 52, 177, 109, 189, 151, 61, 93, 190, 254, 44, 54, 62, 170, 0, 114, 190, 35, 77, 213, 61, 12, 98, 21, 61, 189, 74, 24, 62, 127, 177, 7, 189, 129, 41, 201, 61, 227, 1, 45, 190, 62, 222, 164, 61, 89, 204, 27, 62, 168, 131, 30, 62, 152, 163, 106, 189, 146, 71, 21, 60, 221, 191, 99, 62, 34, 34, 254, 189, 61, 46, 171, 189, 202, 133, 94, 188, 199, 91, 229, 61, 62, 250, 38, 191, 39, 179, 34, 62, 126, 138, 45, 62, 236, 33, 154, 62, 120, 20, 64, 190, 151, 129, 3, 62, 223, 5, 238, 60, 24, 188, 157, 188, 254, 138, 191, 61, 115, 251, 6, 189, 25, 246, 141, 188, 126, 27, 82, 190, 189, 212, 155, 190, 253, 220, 156, 190, 107, 86, 211, 61, 212, 244, 58, 189, 151, 50, 88, 190, 164, 73, 60, 62, 85, 17, 145, 62, 7, 76, 134, 62, 89, 203, 254, 61, 238, 139, 212, 190, 49, 221, 199, 60, 64, 246, 235, 62, 137, 126, 225, 190, 172, 204, 95, 189, 77, 138, 46, 191, 34, 254, 73, 62, 38, 151, 63, 190, 244, 43, 176, 189, 15, 62, 210, 61, 31, 182, 222, 189, 86, 51, 34, 191, 198, 21, 200, 61, 243, 248, 17, 190, 65, 127, 106, 62, 153, 220, 40, 190, 158, 154, 86, 61, 98, 245, 89, 62, 155, 22, 53, 62, 159, 112, 183, 190, 152, 210, 239, 190, 103, 163, 145, 61, 168, 215, 110, 190, 75, 231, 231, 188, 32, 168, 33, 189, 194, 105, 174, 62, 229, 33, 241, 189, 219, 224, 8, 61, 238, 27, 165, 190, 223, 86, 167, 62, 89, 149, 113, 190, 189, 42, 31, 191, 110, 210, 139, 60, 206, 48, 121, 190, 178, 5, 42, 190, 168, 81, 222, 189, 187, 191, 182, 62, 16, 91, 246, 61, 25, 138, 88, 190, 255, 121, 54, 62, 227, 225, 49, 62, 3, 108, 230, 187, 250, 185, 64, 62, 6, 206, 42, 60, 95, 121, 55, 62, 255, 227, 76, 191, 168, 39, 179, 189, 30, 61, 68, 190, 128, 27, 39, 61, 148, 102, 233, 189, 216, 5, 6, 191, 163, 99, 40, 62, 70, 237, 188, 62, 122, 52, 175, 191, 176, 170, 231, 189, 163, 227, 208, 189, 253, 55, 187, 190, 72, 114, 153, 61, 10, 129, 8, 190, 91, 88, 115, 190, 57, 164, 89, 189, 245, 112, 79, 188, 186, 221, 26, 62, 89, 132, 82, 62, 23, 174, 38, 190, 181, 118, 30, 188, 94, 59, 90, 62, 226, 55, 33, 62, 123, 54, 136, 60, 24, 15, 144, 190, 104, 158, 178, 62, 120, 196, 12, 190, 52, 78, 27, 61, 228, 41, 133, 190, 18, 180, 101, 61, 35, 64, 61, 191, 45, 124, 133, 189, 153, 188, 194, 188, 23, 194, 49, 62, 0, 244, 32, 190, 51, 9, 11, 62, 214, 188, 161, 61, 85, 80, 16, 62, 97, 152, 133, 188, 194, 169, 39, 190, 166, 43, 21, 62, 212, 141, 146, 189, 232, 82, 67, 58, 219, 59, 125, 190, 169, 55, 40, 61, 217, 134, 21, 190, 252, 36, 247, 62, 37, 225, 27, 190, 60, 73, 131, 62, 63, 227, 232, 189, 84, 165, 207, 190, 103, 120, 5, 191, 15, 181, 252, 189, 248, 26, 168, 189, 92, 105, 96, 61, 123, 227, 36, 61, 57, 31, 191, 189, 219, 221, 209, 189, 23, 235, 55, 191, 8, 151, 21, 190, 161, 28, 26, 63, 218, 127, 52, 189, 209, 183, 119, 190, 45, 88, 6, 59, 26, 116, 10, 191, 117, 153, 200, 62, 129, 65, 59, 188, 183, 13, 129, 62, 230, 54, 195, 189, 151, 44, 215, 190, 205, 105, 164, 189, 5, 121, 18, 190, 228, 206, 7, 191, 120, 212, 58, 188, 194, 169, 199, 61, 80, 39, 75, 189, 229, 96, 229, 60, 128, 164, 231, 61, 242, 39, 198, 190, 111, 254, 15, 190, 175, 40, 196, 189, 175, 30, 10, 62, 163, 33, 44, 62, 197, 155, 91, 62, 81, 91, 5, 62, 158, 48, 230, 189, 211, 170, 147, 190, 100, 230, 205, 189, 72, 150, 35, 190, 100, 7, 178, 62, 213, 1, 228, 60, 92, 47, 122, 190, 23, 47, 39, 190, 248, 178, 52, 188, 14, 233, 178, 62, 210, 54, 160, 61, 122, 152, 10, 190, 141, 1, 173, 188, 100, 24, 107, 62, 127, 59, 50, 62, 86, 57, 155, 62, 72, 148, 59, 60, 122, 64, 153, 190, 126, 96, 194, 62, 93, 235, 33, 62, 87, 193, 12, 191, 172, 228, 70, 190, 39, 76, 180, 189, 125, 254, 208, 189, 179, 207, 71, 61, 127, 239, 131, 60, 175, 81, 66, 190, 95, 52, 178, 61, 31, 134, 8, 189, 4, 141, 212, 188, 248, 65, 199, 61, 59, 160, 59, 186, 199, 209, 247, 59, 8, 3, 2, 62, 68, 142, 89, 61, 250, 88, 37, 62, 254, 58, 205, 61, 98, 161, 205, 61, 122, 163, 168, 61, 187, 151, 58, 62, 135, 121, 128, 62, 105, 9, 27, 62, 40, 76, 32, 57, 159, 205, 80, 190, 19, 27, 100, 188, 127, 56, 64, 189, 84, 239, 135, 62, 195, 248, 27, 62, 135, 219, 162, 186, 3, 148, 222, 189, 90, 194, 254, 61, 198, 246, 73, 190, 104, 118, 3, 62, 143, 163, 141, 61, 117, 199, 19, 62, 80, 119, 230, 60, 92, 70, 83, 189, 77, 115, 235, 189, 129, 58, 41, 190, 82, 102, 238, 189, 106, 72, 82, 61, 228, 139, 132, 61, 229, 159, 136, 187, 3, 159, 133, 189, 49, 159, 173, 61, 207, 184, 5, 190, 179, 189, 2, 62, 48, 113, 27, 190, 254, 192, 225, 186, 178, 79, 76, 190, 106, 93, 246, 189, 161, 80, 39, 188, 154, 204, 247, 61, 151, 111, 162, 189, 134, 118, 34, 189, 132, 199, 4, 190, 136, 153, 1, 188, 52, 71, 77, 190, 102, 177, 18, 190, 99, 65, 165, 189, 69, 198, 158, 59, 116, 11, 180, 60, 188, 220, 25, 190, 36, 6, 241, 189, 107, 211, 8, 189, 211, 200, 238, 189, 202, 39, 25, 190, 240, 238, 116, 62, 179, 202, 85, 190, 92, 150, 175, 61, 25, 48, 255, 188, 135, 29, 164, 62, 156, 179, 122, 189, 189, 10, 52, 190, 186, 27, 213, 190, 109, 45, 80, 190, 85, 50, 187, 190, 121, 201, 70, 191, 95, 70, 108, 62, 119, 45, 159, 190, 183, 173, 155, 190, 30, 255, 133, 62, 5, 176, 83, 190, 63, 46, 222, 189, 179, 39, 130, 61, 177, 191, 111, 191, 207, 217, 53, 190, 227, 29, 83, 62, 224, 29, 79, 62, 173, 240, 127, 190, 243, 234, 127, 61, 110, 215, 46, 190, 222, 212, 5, 62, 125, 86, 151, 189, 86, 6, 248, 189, 44, 179, 80, 62, 29, 142, 206, 62, 23, 7, 37, 189, 133, 35, 235, 190, 229, 181, 232, 61, 161, 128, 47, 190, 60, 81, 99, 190, 252, 134, 173, 62, 49, 111, 159, 61, 110, 64, 126, 62, 123, 148, 89, 61, 96, 228, 209, 190, 230, 211, 224, 62, 62, 135, 145, 62, 102, 172, 94, 189, 4, 19, 154, 190, 158, 114, 206, 189, 29, 141, 154, 62, 121, 188, 182, 190, 204, 40, 60, 189, 194, 139, 71, 190, 49, 157, 143, 190, 31, 53, 9, 191, 151, 153, 148, 60, 115, 37, 154, 59, 212, 72, 128, 61, 203, 52, 144, 190, 152, 230, 194, 61, 36, 98, 126, 62, 198, 159, 76, 62, 58, 101, 95, 190, 134, 22, 216, 60, 55, 129, 211, 62, 147, 125, 182, 190, 40, 86, 63, 190, 178, 213, 165, 188, 66, 210, 174, 60, 16, 31, 71, 62, 178, 108, 111, 62, 177, 94, 163, 190, 21, 255, 5, 190, 218, 243, 23, 190, 108, 167, 52, 189, 87, 172, 151, 62, 176, 36, 194, 61, 171, 255, 246, 190, 6, 218, 124, 189, 143, 41, 207, 61, 94, 172, 197, 62, 165, 145, 96, 62, 90, 75, 57, 188, 224, 245, 121, 62, 172, 161, 225, 61, 54, 35, 245, 189, 241, 22, 242, 62, 112, 209, 147, 188, 162, 54, 53, 190, 148, 210, 160, 61, 251, 187, 120, 61, 236, 12, 63, 62, 75, 241, 169, 62, 41, 120, 107, 190, 89, 55, 74, 188, 60, 151, 215, 62, 242, 205, 139, 190, 179, 89, 4, 190, 134, 217, 61, 189, 2, 225, 1, 190, 127, 74, 16, 190, 38, 243, 35, 190, 115, 223, 222, 188, 136, 233, 223, 189, 81, 126, 3, 190, 171, 12, 252, 189, 56, 160, 43, 190, 115, 200, 25, 190, 252, 21, 20, 189, 225, 69, 249, 61, 19, 177, 26, 60, 100, 70, 118, 189, 150, 204, 158, 189, 243, 117, 186, 59, 163, 157, 51, 190, 90, 155, 247, 189, 36, 198, 255, 189, 158, 130, 214, 60, 112, 185, 157, 189, 1, 217, 80, 188, 2, 20, 97, 60, 172, 142, 153, 60, 226, 115, 226, 60, 139, 116, 239, 60, 77, 13, 40, 190, 193, 129, 48, 62, 120, 155, 178, 59, 121, 11, 31, 61, 73, 85, 99, 189, 167, 24, 3, 62, 255, 158, 41, 62, 5, 35, 1, 62, 40, 181, 255, 188, 246, 6, 74, 61, 68, 7, 8, 190, 246, 70, 24, 190, 239, 65, 76, 190, 80, 228, 238, 188, 232, 112, 150, 189, 98, 17, 145, 188, 64, 54, 69, 190, 11, 26, 204, 61, 84, 15, 178, 189, 196, 63, 201, 188, 32, 224, 37, 60, 129, 107, 91, 61, 230, 68, 83, 190, 63, 88, 209, 189, 74, 197, 28, 190, 159, 15, 240, 189, 166, 23, 5, 190, 242, 56, 173, 61, 82, 185, 209, 189, 68, 202, 230, 188, 218, 52, 79, 61, 112, 107, 151, 189, 88, 142, 198, 189, 246, 108, 240, 60, 11, 95, 164, 187, 239, 97, 26, 189, 109, 107, 63, 61, 141, 32, 162, 60, 71, 146, 28, 62, 79, 191, 46, 189, 224, 44, 14, 62, 168, 243, 129, 60, 39, 46, 131, 62, 228, 83, 149, 190, 25, 188, 20, 62, 63, 228, 92, 190, 60, 61, 45, 60, 53, 243, 118, 62, 239, 190, 39, 190, 133, 60, 212, 190, 68, 85, 171, 61, 231, 83, 216, 61, 35, 105, 74, 188, 2, 45, 148, 188, 12, 59, 135, 62, 114, 190, 236, 61, 33, 84, 153, 190, 143, 55, 68, 62, 241, 64, 104, 189, 42, 129, 15, 60, 6, 240, 15, 62, 86, 100, 42, 61, 138, 201, 230, 60, 142, 212, 237, 61, 239, 186, 155, 190, 102, 83, 144, 61, 94, 190, 51, 62, 4, 6, 252, 188, 12, 150, 112, 61, 164, 181, 42, 190, 47, 44, 55, 61, 131, 35, 232, 188, 48, 47, 33, 190, 162, 169, 38, 61, 32, 118, 145, 60, 182, 3, 105, 60, 30, 53, 185, 59, 11, 6, 4, 61, 244, 196, 77, 190, 216, 87, 135, 61, 5, 48, 1, 189, 107, 97, 66, 190, 138, 193, 9, 62, 237, 38, 213, 189, 241, 144, 83, 189, 193, 194, 208, 61, 62, 15, 27, 190, 150, 8, 14, 61, 227, 30, 207, 61, 59, 183, 38, 190, 82, 14, 19, 62, 88, 26, 11, 190, 122, 231, 159, 61, 184, 119, 19, 62, 198, 11, 236, 61, 24, 169, 246, 189, 201, 19, 254, 61, 171, 104, 132, 61, 207, 75, 218, 189, 39, 159, 163, 189, 202, 165, 166, 59, 173, 160, 19, 62, 43, 180, 215, 61, 19, 38, 123, 189, 58, 219, 239, 61, 204, 35, 105, 189, 74, 4, 30, 188, 153, 59, 6, 189, 5, 128, 217, 60, 42, 230, 45, 190, 138, 169, 27, 189, 84, 240, 240, 189, 228, 94, 197, 61, 147, 195, 4, 190, 250, 35, 239, 189, 232, 35, 29, 61, 236, 135, 223, 189, 94, 137, 37, 188, 31, 139, 166, 189, 3, 195, 231, 61, 161, 250, 12, 190, 154, 214, 212, 60, 242, 89, 234, 59, 246, 93, 207, 188, 68, 174, 133, 188, 110, 244, 187, 189, 14, 112, 49, 190, 98, 174, 20, 190, 6, 233, 110, 188, 204, 158, 162, 189, 103, 83, 203, 189, 133, 51, 84, 189, 20, 189, 183, 189, 242, 96, 181, 190, 21, 189, 162, 189, 164, 126, 192, 61, 13, 121, 129, 188, 40, 17, 28, 62, 106, 40, 49, 189, 205, 12, 151, 189, 189, 140, 250, 61, 255, 90, 185, 189, 129, 139, 208, 188, 197, 9, 104, 62, 87, 131, 0, 190, 82, 105, 197, 189, 227, 178, 82, 62, 119, 51, 207, 61, 229, 102, 240, 60, 64, 115, 146, 189, 209, 231, 48, 190, 143, 34, 40, 62, 248, 145, 240, 61, 158, 214, 53, 62, 218, 31, 148, 62, 130, 156, 169, 60, 95, 118, 18, 190, 18, 55, 1, 190, 194, 111, 149, 61, 84, 181, 167, 61, 213, 244, 22, 190, 55, 211, 34, 190, 146, 102, 20, 61, 93, 133, 64, 187, 122, 47, 10, 190, 31, 177, 170, 188, 17, 69, 100, 62, 51, 195, 195, 62, 81, 232, 98, 190, 172, 87, 126, 61, 35, 86, 219, 190, 30, 143, 12, 61, 205, 51, 38, 191, 86, 215, 141, 61, 53, 108, 233, 60, 165, 250, 0, 62, 119, 110, 151, 61, 250, 11, 146, 189, 50, 239, 181, 188, 65, 134, 51, 190, 199, 167, 113, 190, 171, 163, 76, 189, 253, 12, 144, 61, 67, 233, 50, 190, 132, 67, 13, 191, 133, 56, 32, 60, 179, 82, 1, 63, 50, 203, 139, 190, 18, 124, 131, 189, 88, 7, 56, 191, 218, 133, 155, 61, 180, 180, 135, 189, 137, 167, 150, 62, 75, 139, 189, 61, 52, 16, 132, 190, 33, 88, 7, 190, 76, 136, 150, 190, 80, 1, 81, 190, 9, 185, 101, 62, 204, 147, 114, 62, 177, 40, 35, 189, 254, 145, 55, 61, 183, 168, 46, 190, 158, 91, 54, 61, 24, 185, 38, 190, 111, 62, 167, 61, 28, 106, 194, 61, 22, 0, 185, 60, 89, 102, 25, 190, 255, 197, 138, 188, 253, 127, 18, 190, 106, 41, 217, 189, 62, 215, 136, 58, 134, 68, 50, 62, 171, 100, 136, 189, 191, 78, 136, 190, 106, 223, 106, 189, 157, 250, 93, 62, 186, 255, 170, 62, 172, 91, 172, 61, 7, 29, 189, 61, 187, 247, 12, 190, 212, 239, 159, 189, 193, 225, 28, 190, 122, 33, 202, 61, 14, 106, 17, 62, 213, 164, 156, 190, 138, 123, 136, 62, 134, 24, 27, 62, 58, 197, 179, 61, 155, 32, 173, 189, 158, 200, 27, 62, 214, 231, 9, 60, 81, 131, 51, 62, 225, 248, 27, 190, 155, 251, 194, 61, 219, 203, 66, 189, 213, 238, 167, 61, 63, 210, 25, 187, 129, 112, 21, 62, 247, 92, 21, 190, 4, 1, 134, 189, 208, 47, 34, 190, 160, 145, 39, 189, 87, 3, 210, 61, 149, 73, 196, 189, 29, 173, 153, 189, 70, 77, 172, 188, 5, 149, 206, 189, 83, 118, 41, 189, 196, 72, 47, 62, 239, 5, 52, 60, 180, 132, 39, 190, 46, 0, 187, 61, 245, 236, 21, 190, 17, 10, 2, 190, 178, 144, 23, 61, 22, 133, 83, 60, 198, 36, 207, 189, 160, 95, 194, 61, 205, 80, 193, 61, 107, 108, 119, 61, 165, 202, 245, 59, 116, 160, 87, 62, 220, 2, 211, 189, 9, 197, 208, 58, 104, 215, 45, 61, 89, 241, 145, 62, 182, 233, 157, 190, 74, 232, 148, 62, 252, 60, 130, 190, 62, 154, 41, 61, 215, 195, 81, 61, 176, 142, 158, 62, 119, 73, 118, 190, 9, 134, 68, 189, 107, 178, 134, 190, 225, 43, 87, 62, 119, 194, 224, 59, 111, 201, 178, 189, 7, 223, 17, 62, 221, 59, 145, 61, 40, 181, 29, 62, 159, 179, 225, 189, 34, 74, 107, 62, 139, 158, 183, 190, 140, 17, 48, 62, 224, 35, 70, 190, 97, 44, 250, 189, 251, 224, 73, 62, 100, 231, 241, 61, 46, 103, 12, 191, 103, 41, 248, 188, 164, 221, 112, 61, 5, 56, 154, 61, 251, 75, 147, 61, 205, 26, 236, 188, 62, 105, 46, 190, 149, 49, 135, 61, 195, 181, 41, 62, 80, 18, 20, 190, 233, 100, 243, 189, 22, 171, 182, 61, 223, 49, 223, 60, 155, 231, 233, 61, 192, 244, 31, 189, 80, 126, 87, 61, 78, 173, 1, 188, 151, 148, 173, 61, 31, 57, 136, 189, 194, 138, 144, 189, 94, 0, 235, 189, 122, 58, 0, 62, 100, 204, 100, 190, 172, 182, 37, 61, 134, 227, 99, 61, 130, 39, 49, 190, 124, 59, 75, 190, 230, 93, 213, 189, 145, 198, 24, 190, 247, 136, 82, 190, 28, 225, 223, 60, 195, 128, 72, 190, 22, 148, 26, 190, 144, 28, 203, 61, 134, 83, 189, 190, 230, 125, 67, 61, 163, 72, 171, 190, 84, 36, 223, 188, 228, 31, 254, 189, 15, 128, 209, 62, 240, 83, 114, 190, 166, 30, 211, 61, 171, 215, 35, 190, 112, 115, 148, 183, 208, 229, 253, 190, 199, 78, 99, 188, 219, 226, 89, 190, 123, 29, 191, 190, 181, 241, 122, 62, 28, 215, 247, 189, 182, 187, 30, 191, 115, 19, 219, 190, 184, 21, 115, 188, 186, 140, 179, 62, 158, 229, 136, 190, 172, 112, 26, 190, 200, 117, 5, 190, 120, 246, 59, 191, 117, 118, 198, 62, 7, 9, 50, 188, 43, 243, 139, 62, 37, 197, 176, 188, 151, 138, 219, 190, 23, 101, 8, 62, 229, 62, 4, 189, 82, 209, 44, 191, 58, 150, 141, 189, 11, 71, 192, 190, 70, 87, 180, 190, 11, 38, 107, 189, 118, 36, 56, 61, 94, 55, 141, 62, 204, 80, 191, 189, 2, 65, 34, 62, 150, 90, 36, 62, 141, 94, 82, 62, 48, 5, 181, 189, 250, 15, 102, 62, 41, 107, 38, 61, 12, 147, 170, 190, 55, 176, 165, 61, 104, 253, 108, 190, 152, 211, 226, 59, 183, 30, 111, 61, 211, 122, 219, 190, 164, 100, 5, 62, 225, 46, 120, 188, 74, 27, 148, 190, 249, 114, 253, 61, 55, 65, 3, 190, 254, 104, 115, 62, 122, 84, 197, 190, 62, 193, 172, 189, 35, 249, 245, 190, 158, 214, 128, 188, 50, 120, 66, 190, 0, 42, 131, 190, 142, 203, 75, 61, 168, 90, 44, 62, 163, 83, 164, 187, 182, 68, 14, 190, 237, 196, 26, 62, 154, 220, 182, 61, 110, 5, 59, 190, 224, 136, 159, 189, 198, 53, 50, 190, 93, 102, 79, 189, 73, 38, 131, 189, 0, 71, 31, 188, 74, 45, 41, 190, 171, 48, 159, 60, 216, 172, 13, 190, 18, 32, 57, 190, 130, 130, 124, 61, 53, 253, 21, 190, 27, 252, 125, 61, 176, 107, 12, 60, 247, 244, 50, 190, 235, 74, 226, 189, 236, 96, 176, 188, 217, 177, 25, 62, 110, 17, 190, 57, 178, 192, 157, 61, 117, 135, 48, 62, 43, 243, 36, 60, 187, 154, 73, 61, 70, 71, 158, 189, 10, 231, 47, 60, 155, 55, 245, 189, 218, 233, 219, 60, 35, 119, 71, 61, 173, 200, 71, 61, 85, 127, 68, 61, 32, 112, 91, 189, 13, 43, 195, 189, 134, 4, 54, 62, 204, 19, 56, 190, 142, 245, 212, 189, 253, 246, 158, 189, 192, 150, 223, 59, 159, 215, 229, 60, 36, 99, 171, 188, 37, 49, 37, 190, 142, 133, 213, 187, 123, 245, 30, 190, 43, 191, 72, 61, 78, 247, 131, 59, 230, 176, 63, 190, 200, 248, 15, 190, 46, 70, 179, 61, 164, 10, 67, 187, 50, 69, 144, 189, 223, 245, 79, 62, 226, 115, 160, 190, 139, 194, 194, 188, 216, 102, 131, 190, 108, 168, 76, 62, 14, 20, 119, 190, 7, 238, 47, 190, 195, 110, 46, 62, 202, 80, 152, 189, 192, 146, 91, 190, 134, 87, 11, 61, 170, 108, 109, 61, 59, 35, 110, 190, 223, 115, 29, 62, 136, 197, 52, 190, 77, 95, 155, 189, 212, 122, 185, 61, 92, 34, 254, 61, 56, 207, 54, 62, 104, 110, 8, 190, 152, 173, 20, 62, 114, 142, 73, 62, 179, 62, 147, 62, 23, 64, 119, 61, 119, 231, 84, 189, 144, 129, 39, 190, 142, 151, 83, 62, 205, 13, 28, 61, 122, 58, 11, 62, 64, 0, 44, 189, 120, 110, 46, 62, 9, 19, 141, 190, 122, 188, 150, 61, 144, 231, 177, 61, 248, 105, 156, 60, 253, 17, 207, 61, 119, 207, 148, 61, 1, 205, 29, 62, 199, 73, 125, 189, 247, 167, 11, 62, 231, 110, 9, 189, 167, 186, 76, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 232, 32, 61, 81, 89, 88, 62, 47, 238, 116, 62, 217, 32, 44, 190, 99, 206, 55, 62, 79, 223, 3, 62, 252, 81, 152, 62, 178, 11, 194, 60, 135, 116, 73, 62, 170, 127, 147, 62, 122, 12, 204, 61, 11, 80, 173, 61, 82, 182, 154, 60, 32, 56, 116, 62, 35, 26, 189, 188, 19, 125, 218, 189, 75, 61, 12, 190, 215, 70, 89, 190, 71, 86, 9, 189, 169, 9, 181, 60, 224, 101, 242, 188, 154, 99, 6, 189, 125, 80, 167, 190, 121, 58, 224, 189, 124, 108, 158, 189, 203, 32, 210, 189, 39, 97, 44, 189, 247, 8, 50, 62, 209, 72, 95, 189, 157, 224, 156, 189, 103, 114, 123, 61, 196, 43, 167, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 128, 90, 188, 200, 93, 96, 190, 157, 218, 5, 63, 168, 74, 101, 61, 184, 171, 45, 190, 156, 173, 24, 190, 35, 234, 58, 191, 20, 249, 63, 63, 7, 119, 187, 190, 137, 47, 54, 63, 239, 223, 52, 62, 47, 219, 131, 61, 49, 101, 145, 61, 157, 29, 17, 191, 34, 190, 220, 190, 83, 204, 248, 62, 86, 79, 251, 61, 114, 23, 93, 61, 135, 117, 243, 189, 228, 37, 64, 187, 93, 105, 63, 61, 229, 52, 27, 62, 152, 35, 238, 190, 198, 249, 137, 62, 156, 59, 7, 62, 249, 218, 206, 62, 158, 23, 63, 189, 242, 152, 56, 63, 221, 193, 10, 63, 72, 11, 203, 189, 48, 251, 212, 190, 54, 151, 57, 190, 170, 203, 12, 190, 201, 226, 45, 190, 4, 42, 70, 60, 12, 79, 28, 189, 104, 38, 142, 190, 168, 150, 199, 188, 150, 107, 172, 61, 19, 187, 53, 62, 58, 4, 16, 190, 113, 76, 135, 59, 36, 227, 146, 190, 238, 238, 67, 190, 23, 251, 125, 61, 45, 34, 157, 61, 60, 245, 209, 62, 57, 106, 139, 61, 136, 58, 25, 62, 28, 161, 29, 62, 148, 100, 23, 62, 149, 10, 117, 189, 116, 13, 8, 62, 250, 33, 127, 189, 76, 190, 182, 62, 158, 161, 235, 61, 210, 147, 172, 189, 96, 28, 212, 61, 230, 251, 168, 61, 182, 24, 105, 62, 81, 53, 163, 61, 118, 21, 175, 189, 242, 32, 157, 62, 225, 164, 82, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {246, 58, 56, 190, 115, 68, 150, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {108, 207, 213, 63, 210, 63, 11, 190, 197, 57, 170, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {160, 67, 8, 191, 33, 48, 177, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0005/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}