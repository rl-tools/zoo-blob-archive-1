// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {161, 208, 252, 62, 120, 135, 129, 190, 128, 193, 126, 62, 45, 116, 81, 62, 125, 139, 6, 191, 219, 172, 244, 190, 201, 89, 75, 63, 126, 161, 69, 191, 192, 150, 186, 190, 88, 219, 27, 191, 164, 8, 30, 191, 64, 108, 190, 188, 248, 237, 175, 190, 76, 230, 168, 190, 2, 176, 243, 188, 92, 22, 107, 190, 155, 4, 120, 63, 69, 7, 163, 61, 105, 2, 19, 63, 124, 163, 224, 62, 56, 121, 6, 63, 218, 185, 117, 191, 129, 37, 73, 190, 245, 146, 175, 61, 128, 208, 85, 63, 49, 235, 56, 189, 197, 195, 203, 62, 205, 123, 157, 62, 220, 4, 29, 63, 146, 150, 6, 191, 152, 152, 191, 62, 138, 190, 119, 191, 224, 171, 81, 190, 154, 58, 203, 62, 40, 6, 41, 63, 165, 4, 226, 190, 150, 30, 115, 63, 68, 224, 175, 62, 10, 42, 229, 62, 63, 233, 201, 190, 14, 12, 6, 63, 92, 162, 18, 63, 7, 79, 219, 190, 98, 14, 120, 190, 16, 66, 226, 189, 252, 178, 115, 191, 157, 60, 255, 189, 69, 124, 16, 63, 219, 134, 124, 63, 226, 5, 33, 190, 86, 127, 7, 61, 208, 177, 162, 61, 227, 80, 159, 191, 59, 112, 106, 190, 212, 167, 99, 190, 82, 106, 141, 60, 100, 159, 191, 62, 11, 6, 35, 61, 34, 224, 64, 63, 36, 68, 25, 61, 45, 229, 34, 63, 82, 241, 132, 191, 58, 211, 15, 190, 13, 92, 98, 63, 73, 59, 39, 191, 235, 30, 139, 190, 93, 101, 33, 62, 178, 169, 146, 62, 182, 83, 47, 62, 225, 23, 233, 190, 152, 63, 109, 191, 16, 38, 182, 190, 117, 66, 110, 191, 65, 85, 253, 61, 45, 160, 211, 189, 231, 142, 78, 63, 192, 207, 113, 62, 226, 120, 234, 190, 3, 42, 169, 62, 4, 138, 55, 63, 134, 53, 80, 190, 12, 4, 128, 63, 88, 74, 94, 63, 249, 232, 228, 189, 140, 155, 157, 189, 63, 212, 19, 191, 102, 111, 35, 191, 166, 174, 252, 190, 217, 255, 95, 63, 117, 215, 168, 62, 188, 175, 40, 62, 13, 244, 47, 191, 191, 83, 65, 62, 69, 61, 50, 190, 27, 196, 102, 191, 27, 219, 140, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 100, 139, 191, 49, 161, 30, 191, 232, 40, 40, 191, 132, 58, 80, 63, 129, 31, 56, 191, 215, 110, 156, 62, 3, 202, 123, 191, 67, 54, 141, 61, 103, 252, 213, 190, 60, 130, 137, 188, 55, 173, 42, 61, 199, 121, 239, 61, 129, 52, 126, 189, 243, 233, 93, 61, 6, 12, 13, 63, 115, 220, 114, 190, 221, 99, 45, 63, 248, 62, 70, 62, 97, 25, 156, 62, 149, 200, 124, 62, 102, 6, 148, 62, 39, 178, 245, 190, 209, 95, 213, 62, 254, 155, 46, 191, 125, 35, 129, 62, 249, 170, 146, 190, 222, 90, 19, 63, 242, 246, 150, 189, 164, 149, 184, 190, 37, 120, 17, 63, 168, 119, 63, 62, 137, 7, 173, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 17, 224, 189, 145, 159, 28, 190, 70, 199, 176, 189, 69, 177, 168, 62, 165, 234, 206, 189, 120, 106, 88, 190, 164, 95, 148, 190, 137, 115, 94, 62, 111, 126, 91, 61, 37, 22, 1, 190, 31, 187, 248, 189, 183, 59, 214, 189, 36, 218, 78, 187, 164, 126, 51, 190, 200, 170, 145, 62, 253, 59, 134, 61, 69, 52, 57, 62, 90, 42, 140, 189, 179, 89, 115, 189, 241, 190, 106, 189, 116, 0, 73, 62, 120, 236, 218, 61, 126, 58, 37, 62, 57, 209, 156, 61, 229, 61, 152, 61, 100, 249, 250, 59, 118, 61, 13, 62, 84, 32, 25, 62, 60, 185, 27, 61, 198, 231, 72, 61, 42, 153, 13, 62, 119, 174, 179, 189, 21, 82, 17, 62, 169, 40, 144, 190, 243, 141, 31, 191, 141, 79, 204, 189, 109, 35, 166, 188, 42, 247, 121, 190, 124, 49, 60, 61, 147, 152, 122, 189, 178, 239, 18, 62, 172, 168, 0, 62, 204, 142, 102, 190, 38, 116, 198, 62, 154, 223, 128, 188, 239, 42, 130, 190, 44, 215, 149, 61, 110, 15, 119, 61, 39, 29, 157, 62, 227, 147, 1, 191, 235, 70, 132, 190, 41, 189, 192, 189, 102, 101, 204, 61, 141, 57, 31, 191, 233, 26, 120, 187, 51, 72, 142, 190, 118, 24, 246, 189, 65, 176, 152, 189, 43, 247, 80, 61, 34, 144, 132, 62, 115, 121, 47, 62, 197, 15, 93, 191, 33, 132, 187, 61, 147, 210, 220, 61, 95, 118, 213, 190, 233, 45, 9, 191, 70, 73, 104, 61, 244, 123, 195, 60, 165, 84, 105, 61, 125, 25, 96, 62, 114, 201, 56, 190, 26, 16, 146, 62, 187, 25, 93, 61, 245, 14, 97, 190, 131, 112, 213, 62, 132, 233, 27, 190, 183, 17, 65, 190, 177, 160, 121, 61, 227, 154, 67, 62, 79, 151, 38, 62, 153, 35, 210, 61, 207, 112, 155, 62, 21, 242, 80, 61, 62, 37, 216, 61, 14, 28, 60, 62, 105, 221, 17, 63, 172, 83, 182, 61, 12, 91, 66, 191, 225, 8, 19, 190, 232, 245, 188, 61, 188, 178, 109, 190, 248, 210, 148, 62, 175, 30, 93, 191, 70, 188, 17, 62, 237, 207, 67, 62, 176, 226, 229, 191, 17, 64, 247, 189, 151, 8, 241, 187, 198, 204, 237, 189, 245, 252, 163, 189, 89, 27, 171, 189, 14, 29, 184, 61, 221, 51, 17, 61, 109, 169, 3, 62, 173, 150, 219, 189, 234, 220, 174, 60, 40, 218, 206, 61, 118, 212, 49, 190, 169, 85, 223, 189, 215, 126, 131, 60, 166, 150, 156, 61, 33, 39, 188, 61, 39, 19, 23, 190, 251, 192, 22, 190, 45, 5, 20, 62, 112, 72, 227, 61, 71, 54, 12, 61, 104, 188, 126, 61, 201, 33, 82, 190, 2, 108, 74, 190, 168, 63, 200, 60, 141, 58, 88, 189, 91, 85, 225, 61, 1, 53, 176, 58, 116, 177, 62, 190, 233, 92, 57, 190, 201, 38, 7, 190, 215, 84, 66, 190, 116, 226, 118, 62, 187, 250, 192, 189, 180, 211, 232, 190, 209, 84, 95, 62, 57, 217, 192, 61, 232, 188, 43, 190, 56, 124, 218, 189, 226, 138, 155, 61, 43, 141, 242, 187, 196, 212, 14, 62, 138, 121, 55, 190, 34, 25, 238, 60, 19, 252, 225, 61, 43, 202, 30, 190, 159, 216, 87, 62, 3, 102, 141, 187, 25, 1, 184, 62, 78, 192, 209, 190, 172, 254, 216, 61, 56, 156, 240, 188, 206, 60, 119, 190, 221, 239, 37, 191, 86, 236, 106, 62, 212, 178, 13, 190, 96, 101, 209, 62, 32, 94, 149, 60, 9, 23, 49, 62, 248, 57, 96, 62, 136, 248, 78, 190, 99, 163, 39, 62, 62, 121, 79, 62, 117, 71, 207, 61, 174, 84, 186, 62, 94, 17, 195, 189, 117, 170, 177, 190, 179, 111, 113, 62, 170, 0, 114, 190, 179, 90, 77, 188, 24, 245, 44, 61, 86, 214, 78, 62, 217, 101, 11, 189, 188, 174, 194, 61, 90, 166, 149, 190, 151, 88, 155, 61, 126, 244, 249, 61, 191, 60, 23, 62, 130, 129, 173, 189, 157, 89, 0, 60, 131, 134, 117, 62, 21, 156, 152, 190, 28, 200, 141, 189, 76, 209, 214, 60, 173, 194, 24, 61, 81, 176, 67, 191, 243, 216, 20, 62, 131, 106, 211, 61, 3, 181, 159, 62, 221, 45, 74, 190, 131, 61, 106, 62, 149, 25, 172, 188, 237, 197, 52, 189, 50, 74, 87, 61, 124, 59, 59, 61, 67, 46, 147, 189, 208, 144, 176, 190, 98, 101, 177, 190, 99, 175, 228, 190, 106, 190, 47, 61, 212, 244, 58, 189, 197, 163, 230, 189, 238, 67, 142, 62, 168, 123, 170, 61, 141, 117, 154, 62, 156, 0, 48, 62, 65, 52, 233, 190, 101, 168, 113, 61, 101, 141, 226, 62, 176, 169, 141, 190, 186, 59, 163, 189, 210, 246, 44, 191, 242, 135, 90, 62, 40, 66, 166, 190, 199, 226, 45, 60, 170, 177, 55, 62, 130, 223, 170, 189, 32, 119, 45, 191, 70, 100, 144, 61, 196, 233, 199, 190, 25, 145, 72, 62, 108, 237, 223, 189, 23, 202, 189, 61, 91, 85, 134, 62, 121, 223, 41, 62, 117, 196, 215, 190, 255, 33, 180, 190, 26, 242, 231, 189, 244, 206, 15, 191, 128, 139, 10, 190, 82, 178, 247, 190, 196, 75, 193, 62, 229, 33, 241, 189, 246, 240, 59, 62, 121, 56, 227, 190, 136, 0, 184, 62, 229, 226, 133, 190, 14, 172, 127, 191, 250, 142, 28, 62, 228, 238, 27, 191, 155, 213, 35, 190, 170, 111, 14, 190, 57, 164, 236, 62, 71, 110, 129, 61, 105, 212, 17, 190, 190, 111, 182, 62, 34, 156, 31, 62, 75, 38, 85, 189, 212, 226, 219, 62, 90, 196, 26, 190, 243, 53, 53, 62, 168, 21, 92, 191, 169, 139, 240, 188, 45, 91, 234, 190, 98, 193, 168, 190, 109, 179, 211, 190, 79, 135, 252, 190, 157, 81, 20, 62, 176, 52, 159, 62, 174, 172, 174, 191, 82, 142, 245, 61, 100, 115, 2, 190, 238, 130, 2, 191, 139, 244, 23, 62, 10, 129, 8, 190, 71, 194, 190, 190, 126, 134, 48, 189, 32, 103, 238, 188, 31, 148, 56, 62, 58, 144, 71, 62, 161, 83, 139, 190, 224, 152, 145, 188, 104, 161, 92, 62, 147, 188, 32, 62, 70, 203, 22, 188, 195, 123, 146, 190, 5, 71, 199, 62, 140, 162, 163, 190, 139, 55, 134, 61, 127, 138, 63, 190, 137, 21, 243, 187, 158, 5, 83, 191, 88, 177, 61, 189, 46, 150, 183, 189, 204, 52, 92, 62, 125, 64, 39, 190, 98, 173, 122, 62, 108, 229, 0, 61, 215, 235, 239, 61, 136, 171, 140, 189, 57, 52, 73, 189, 23, 77, 210, 61, 26, 168, 114, 189, 102, 239, 27, 190, 80, 162, 165, 190, 39, 88, 196, 61, 217, 134, 21, 190, 26, 157, 177, 62, 17, 147, 138, 190, 16, 255, 197, 62, 104, 212, 75, 190, 168, 155, 217, 190, 196, 3, 94, 191, 157, 45, 0, 190, 165, 164, 14, 190, 23, 99, 162, 189, 11, 79, 78, 61, 195, 105, 221, 189, 160, 158, 10, 189, 161, 239, 123, 191, 63, 230, 107, 190, 145, 3, 237, 62, 161, 108, 233, 189, 24, 4, 20, 191, 139, 51, 98, 189, 90, 95, 54, 191, 159, 41, 211, 62, 130, 218, 101, 189, 53, 161, 36, 62, 174, 26, 149, 61, 243, 188, 255, 190, 143, 104, 44, 190, 27, 51, 186, 189, 91, 151, 18, 191, 231, 169, 111, 188, 36, 3, 253, 61, 70, 133, 158, 189, 223, 208, 17, 189, 128, 164, 231, 61, 199, 57, 63, 191, 246, 218, 172, 190, 93, 51, 174, 190, 36, 76, 112, 62, 222, 171, 245, 61, 67, 190, 107, 62, 71, 159, 210, 61, 102, 53, 79, 61, 170, 165, 184, 190, 186, 67, 80, 190, 185, 33, 33, 190, 160, 36, 177, 62, 20, 64, 239, 188, 38, 40, 193, 190, 98, 7, 141, 190, 11, 242, 35, 60, 100, 35, 217, 62, 39, 101, 242, 61, 22, 213, 230, 59, 59, 242, 184, 187, 125, 105, 102, 62, 167, 233, 9, 62, 135, 170, 175, 62, 5, 34, 167, 59, 64, 70, 79, 191, 140, 20, 140, 62, 192, 255, 124, 62, 35, 254, 37, 191, 156, 92, 47, 190, 236, 215, 32, 190, 65, 161, 175, 60, 179, 207, 71, 61, 45, 105, 13, 190, 6, 3, 176, 190, 249, 118, 37, 62, 172, 68, 226, 189, 29, 222, 254, 189, 96, 162, 211, 61, 48, 118, 129, 189, 218, 4, 142, 188, 116, 10, 207, 61, 164, 91, 254, 61, 86, 142, 47, 62, 206, 237, 200, 61, 88, 66, 72, 61, 217, 3, 149, 61, 213, 198, 6, 62, 255, 38, 136, 62, 144, 69, 85, 62, 139, 112, 125, 60, 146, 234, 3, 189, 250, 59, 249, 61, 219, 192, 165, 189, 148, 152, 82, 62, 211, 201, 32, 62, 203, 178, 1, 189, 192, 140, 14, 190, 88, 121, 203, 61, 156, 18, 140, 189, 104, 118, 3, 62, 143, 163, 141, 61, 117, 199, 19, 62, 80, 119, 230, 60, 92, 70, 83, 189, 77, 115, 235, 189, 129, 58, 41, 190, 82, 102, 238, 189, 106, 72, 82, 61, 228, 139, 132, 61, 229, 159, 136, 187, 3, 159, 133, 189, 49, 159, 173, 61, 207, 184, 5, 190, 179, 189, 2, 62, 48, 113, 27, 190, 254, 192, 225, 186, 178, 79, 76, 190, 106, 93, 246, 189, 161, 80, 39, 188, 154, 204, 247, 61, 151, 111, 162, 189, 134, 118, 34, 189, 132, 199, 4, 190, 136, 153, 1, 188, 52, 71, 77, 190, 102, 177, 18, 190, 99, 65, 165, 189, 69, 198, 158, 59, 116, 11, 180, 60, 188, 220, 25, 190, 36, 6, 241, 189, 107, 211, 8, 189, 41, 5, 1, 189, 139, 242, 20, 190, 48, 165, 107, 62, 179, 202, 85, 190, 199, 106, 162, 61, 25, 48, 255, 188, 27, 87, 199, 62, 141, 199, 116, 189, 31, 22, 231, 189, 101, 109, 247, 190, 250, 64, 8, 190, 138, 163, 134, 190, 222, 208, 21, 191, 90, 238, 114, 62, 130, 117, 129, 190, 43, 138, 2, 191, 255, 126, 141, 62, 95, 193, 234, 189, 221, 160, 132, 189, 227, 182, 193, 60, 178, 234, 142, 191, 92, 145, 172, 189, 136, 147, 154, 62, 47, 56, 138, 62, 130, 229, 105, 190, 55, 14, 128, 61, 84, 12, 156, 190, 60, 86, 33, 62, 149, 87, 157, 188, 152, 243, 115, 190, 82, 218, 143, 62, 172, 99, 12, 63, 13, 34, 10, 190, 50, 135, 28, 191, 193, 115, 160, 61, 161, 128, 47, 190, 215, 218, 161, 190, 23, 232, 172, 62, 146, 77, 142, 61, 134, 228, 138, 62, 102, 208, 146, 61, 108, 169, 17, 191, 214, 54, 227, 62, 141, 87, 144, 62, 28, 102, 186, 189, 190, 137, 234, 190, 50, 140, 27, 190, 238, 111, 178, 62, 50, 215, 40, 191, 222, 242, 133, 189, 15, 245, 43, 190, 119, 249, 172, 190, 152, 127, 36, 191, 59, 44, 108, 188, 105, 88, 14, 190, 118, 26, 88, 61, 154, 242, 138, 190, 181, 37, 87, 62, 109, 28, 143, 62, 106, 222, 39, 62, 250, 85, 150, 190, 93, 196, 66, 61, 20, 251, 141, 62, 219, 204, 26, 191, 53, 62, 251, 189, 22, 73, 2, 61, 182, 173, 221, 61, 16, 31, 71, 62, 85, 215, 108, 62, 196, 170, 229, 190, 95, 249, 1, 190, 126, 201, 44, 190, 244, 131, 162, 60, 92, 2, 202, 62, 227, 206, 35, 62, 195, 200, 232, 190, 47, 168, 196, 189, 159, 121, 45, 62, 32, 37, 186, 62, 186, 175, 141, 62, 146, 202, 9, 62, 163, 237, 113, 62, 55, 229, 185, 61, 200, 158, 124, 188, 139, 78, 245, 62, 178, 184, 76, 60, 234, 88, 145, 187, 35, 108, 245, 61, 186, 196, 235, 61, 114, 5, 58, 62, 213, 118, 206, 62, 163, 240, 37, 190, 194, 27, 232, 188, 42, 55, 219, 62, 199, 155, 64, 190, 179, 89, 4, 190, 134, 217, 61, 189, 2, 225, 1, 190, 127, 74, 16, 190, 38, 243, 35, 190, 115, 223, 222, 188, 136, 233, 223, 189, 81, 126, 3, 190, 171, 12, 252, 189, 56, 160, 43, 190, 115, 200, 25, 190, 252, 21, 20, 189, 225, 69, 249, 61, 19, 177, 26, 60, 100, 70, 118, 189, 150, 204, 158, 189, 243, 117, 186, 59, 163, 157, 51, 190, 90, 155, 247, 189, 36, 198, 255, 189, 158, 130, 214, 60, 112, 185, 157, 189, 1, 217, 80, 188, 2, 20, 97, 60, 172, 142, 153, 60, 226, 115, 226, 60, 139, 116, 239, 60, 77, 13, 40, 190, 193, 129, 48, 62, 120, 155, 178, 59, 121, 11, 31, 61, 73, 85, 99, 189, 167, 24, 3, 62, 255, 158, 41, 62, 5, 35, 1, 62, 40, 181, 255, 188, 246, 6, 74, 61, 68, 7, 8, 190, 246, 70, 24, 190, 239, 65, 76, 190, 80, 228, 238, 188, 232, 112, 150, 189, 98, 17, 145, 188, 64, 54, 69, 190, 11, 26, 204, 61, 84, 15, 178, 189, 196, 63, 201, 188, 32, 224, 37, 60, 129, 107, 91, 61, 230, 68, 83, 190, 63, 88, 209, 189, 74, 197, 28, 190, 159, 15, 240, 189, 166, 23, 5, 190, 242, 56, 173, 61, 82, 185, 209, 189, 68, 202, 230, 188, 218, 52, 79, 61, 112, 107, 151, 189, 88, 142, 198, 189, 246, 108, 240, 60, 11, 95, 164, 187, 239, 97, 26, 189, 109, 107, 63, 61, 23, 215, 149, 190, 118, 98, 19, 62, 60, 232, 135, 61, 39, 202, 123, 62, 168, 243, 129, 60, 13, 94, 149, 62, 165, 181, 214, 190, 81, 115, 100, 62, 113, 213, 29, 191, 247, 188, 0, 190, 238, 78, 237, 62, 29, 22, 153, 190, 92, 140, 90, 191, 158, 112, 242, 61, 165, 156, 45, 62, 147, 219, 105, 61, 147, 109, 59, 189, 102, 132, 8, 63, 206, 47, 53, 62, 68, 241, 193, 190, 38, 112, 180, 62, 210, 253, 76, 61, 180, 68, 16, 189, 90, 255, 217, 61, 129, 77, 159, 188, 183, 213, 245, 189, 70, 253, 32, 189, 176, 84, 94, 191, 179, 199, 96, 61, 20, 248, 129, 62, 108, 208, 48, 62, 176, 84, 178, 61, 164, 181, 42, 190, 133, 191, 45, 61, 168, 182, 248, 188, 235, 76, 33, 190, 162, 169, 38, 61, 183, 197, 140, 60, 182, 3, 105, 60, 30, 53, 185, 59, 11, 6, 4, 61, 163, 126, 82, 190, 233, 104, 133, 61, 100, 214, 18, 189, 107, 97, 66, 190, 138, 193, 9, 62, 184, 252, 214, 189, 241, 144, 83, 189, 209, 147, 205, 61, 58, 189, 27, 190, 150, 8, 14, 61, 156, 105, 204, 61, 234, 211, 39, 190, 93, 141, 17, 62, 88, 26, 11, 190, 106, 237, 158, 61, 87, 241, 18, 62, 35, 4, 228, 61, 81, 150, 252, 189, 217, 106, 248, 61, 175, 31, 122, 61, 207, 75, 218, 189, 39, 159, 163, 189, 45, 56, 140, 59, 173, 160, 19, 62, 43, 180, 215, 61, 19, 38, 123, 189, 58, 219, 239, 61, 204, 35, 105, 189, 74, 4, 30, 188, 153, 59, 6, 189, 5, 128, 217, 60, 42, 230, 45, 190, 138, 169, 27, 189, 84, 240, 240, 189, 228, 94, 197, 61, 147, 195, 4, 190, 250, 35, 239, 189, 232, 35, 29, 61, 236, 135, 223, 189, 94, 137, 37, 188, 31, 139, 166, 189, 3, 195, 231, 61, 161, 250, 12, 190, 154, 214, 212, 60, 242, 89, 234, 59, 246, 93, 207, 188, 68, 174, 133, 188, 110, 244, 187, 189, 14, 112, 49, 190, 98, 174, 20, 190, 6, 233, 110, 188, 204, 158, 162, 189, 103, 83, 203, 189, 133, 51, 84, 189, 20, 189, 183, 189, 161, 209, 6, 191, 89, 115, 207, 189, 174, 233, 130, 62, 66, 75, 48, 190, 40, 17, 28, 62, 120, 20, 80, 61, 64, 249, 40, 189, 103, 24, 45, 62, 86, 124, 11, 190, 16, 188, 190, 61, 204, 15, 99, 62, 75, 127, 140, 188, 175, 114, 235, 189, 84, 50, 105, 62, 170, 111, 40, 61, 152, 109, 94, 61, 175, 42, 47, 190, 229, 48, 63, 190, 231, 139, 23, 62, 213, 20, 218, 188, 92, 46, 84, 62, 28, 52, 214, 62, 96, 69, 30, 188, 115, 140, 180, 190, 18, 187, 97, 190, 75, 23, 97, 62, 203, 185, 167, 189, 12, 75, 13, 188, 217, 145, 86, 190, 224, 34, 130, 61, 239, 14, 13, 190, 237, 170, 3, 191, 250, 31, 166, 189, 179, 101, 123, 62, 238, 66, 247, 62, 171, 4, 156, 189, 172, 87, 126, 61, 88, 202, 182, 190, 13, 136, 250, 188, 223, 163, 106, 191, 135, 146, 60, 190, 193, 98, 176, 189, 219, 239, 143, 62, 58, 227, 95, 189, 186, 128, 72, 191, 17, 54, 131, 62, 125, 213, 230, 189, 161, 245, 96, 62, 230, 112, 115, 188, 239, 90, 119, 62, 91, 179, 219, 62, 50, 59, 31, 191, 16, 184, 1, 62, 79, 161, 30, 63, 170, 142, 2, 191, 172, 132, 145, 190, 132, 43, 115, 191, 63, 122, 197, 59, 170, 106, 136, 190, 92, 249, 128, 187, 200, 90, 253, 61, 70, 122, 59, 190, 14, 29, 1, 63, 246, 250, 182, 190, 9, 156, 90, 190, 223, 27, 141, 62, 245, 60, 143, 62, 158, 85, 44, 61, 254, 145, 55, 61, 145, 46, 49, 190, 229, 136, 51, 188, 138, 38, 189, 190, 80, 224, 173, 61, 226, 27, 18, 62, 157, 103, 160, 61, 98, 228, 224, 189, 225, 240, 6, 189, 190, 151, 141, 189, 13, 170, 105, 189, 250, 194, 197, 61, 27, 75, 253, 61, 51, 222, 48, 61, 28, 218, 57, 190, 54, 154, 190, 189, 44, 71, 115, 62, 35, 245, 169, 62, 236, 68, 149, 61, 162, 241, 81, 62, 64, 219, 213, 189, 74, 52, 33, 189, 128, 52, 60, 190, 132, 43, 164, 61, 171, 64, 72, 62, 122, 180, 186, 190, 18, 219, 187, 62, 219, 24, 61, 62, 58, 197, 179, 61, 23, 45, 173, 189, 120, 162, 24, 62, 48, 100, 198, 58, 81, 131, 51, 62, 225, 248, 27, 190, 155, 251, 194, 61, 219, 203, 66, 189, 213, 238, 167, 61, 63, 210, 25, 187, 55, 141, 14, 62, 247, 92, 21, 190, 4, 1, 134, 189, 208, 47, 34, 190, 49, 40, 55, 189, 87, 3, 210, 61, 252, 186, 210, 189, 93, 147, 170, 189, 18, 70, 174, 188, 5, 149, 206, 189, 181, 233, 76, 189, 9, 171, 43, 62, 52, 106, 14, 60, 43, 225, 39, 190, 46, 0, 187, 61, 130, 23, 22, 190, 180, 137, 3, 190, 178, 144, 23, 61, 179, 235, 26, 60, 198, 36, 207, 189, 196, 61, 184, 61, 115, 66, 192, 61, 156, 217, 38, 62, 211, 1, 0, 61, 62, 53, 109, 62, 248, 31, 77, 190, 9, 197, 208, 58, 143, 183, 36, 62, 154, 115, 179, 62, 130, 37, 59, 191, 22, 232, 180, 62, 141, 176, 47, 190, 12, 210, 109, 61, 63, 111, 15, 62, 50, 194, 204, 62, 251, 5, 53, 190, 96, 38, 100, 189, 123, 10, 70, 190, 233, 250, 123, 62, 177, 50, 80, 61, 140, 68, 249, 188, 32, 105, 70, 62, 115, 160, 176, 61, 194, 255, 43, 62, 80, 247, 187, 188, 32, 149, 151, 62, 200, 143, 196, 190, 48, 245, 116, 62, 11, 92, 37, 190, 225, 66, 100, 60, 108, 61, 63, 62, 103, 125, 76, 62, 10, 61, 254, 190, 171, 42, 89, 189, 164, 221, 112, 61, 5, 56, 154, 61, 251, 75, 147, 61, 205, 26, 236, 188, 62, 105, 46, 190, 149, 49, 135, 61, 195, 181, 41, 62, 80, 18, 20, 190, 233, 100, 243, 189, 22, 171, 182, 61, 223, 49, 223, 60, 155, 231, 233, 61, 192, 244, 31, 189, 80, 126, 87, 61, 78, 173, 1, 188, 151, 148, 173, 61, 31, 57, 136, 189, 194, 138, 144, 189, 94, 0, 235, 189, 122, 58, 0, 62, 100, 204, 100, 190, 172, 182, 37, 61, 134, 227, 99, 61, 130, 39, 49, 190, 124, 59, 75, 190, 230, 93, 213, 189, 145, 198, 24, 190, 247, 136, 82, 190, 28, 225, 223, 60, 195, 128, 72, 190, 22, 148, 26, 190, 144, 28, 203, 61, 134, 83, 189, 190, 6, 237, 53, 190, 74, 8, 196, 190, 205, 122, 53, 61, 228, 31, 254, 189, 28, 125, 145, 62, 61, 252, 119, 190, 42, 232, 70, 62, 147, 94, 42, 190, 162, 54, 192, 189, 167, 71, 35, 191, 80, 237, 190, 189, 13, 108, 164, 190, 92, 197, 34, 191, 249, 228, 143, 62, 219, 30, 78, 190, 252, 184, 32, 191, 189, 215, 15, 191, 126, 86, 231, 189, 111, 193, 100, 62, 139, 153, 199, 190, 60, 249, 32, 190, 16, 31, 130, 190, 14, 140, 86, 191, 62, 88, 204, 62, 108, 42, 159, 188, 80, 84, 54, 62, 177, 39, 88, 61, 23, 36, 250, 190, 146, 131, 246, 60, 214, 217, 0, 190, 13, 101, 40, 191, 58, 150, 141, 189, 186, 165, 37, 191, 167, 207, 5, 191, 145, 255, 188, 61, 118, 36, 56, 61, 255, 24, 120, 62, 91, 74, 191, 189, 130, 10, 160, 62, 199, 8, 17, 190, 99, 22, 13, 189, 145, 118, 41, 62, 61, 161, 151, 187, 34, 216, 83, 190, 26, 140, 27, 191, 140, 155, 52, 62, 62, 177, 168, 189, 250, 203, 28, 190, 55, 42, 25, 62, 214, 118, 28, 191, 229, 250, 199, 60, 52, 123, 135, 59, 19, 192, 166, 190, 28, 217, 6, 190, 119, 198, 49, 190, 119, 253, 128, 62, 223, 38, 33, 191, 110, 55, 100, 190, 135, 148, 13, 191, 14, 24, 2, 189, 155, 207, 49, 190, 26, 162, 29, 190, 185, 232, 26, 61, 168, 90, 44, 62, 163, 83, 164, 187, 182, 68, 14, 190, 237, 196, 26, 62, 154, 220, 182, 61, 110, 5, 59, 190, 224, 136, 159, 189, 198, 53, 50, 190, 93, 102, 79, 189, 73, 38, 131, 189, 0, 71, 31, 188, 74, 45, 41, 190, 171, 48, 159, 60, 216, 172, 13, 190, 18, 32, 57, 190, 130, 130, 124, 61, 53, 253, 21, 190, 27, 252, 125, 61, 176, 107, 12, 60, 247, 244, 50, 190, 235, 74, 226, 189, 236, 96, 176, 188, 217, 177, 25, 62, 110, 17, 190, 57, 178, 192, 157, 61, 117, 135, 48, 62, 43, 243, 36, 60, 187, 154, 73, 61, 70, 71, 158, 189, 10, 231, 47, 60, 155, 55, 245, 189, 218, 233, 219, 60, 98, 227, 193, 190, 36, 240, 35, 190, 100, 241, 197, 189, 130, 52, 208, 190, 13, 43, 195, 189, 81, 59, 153, 62, 233, 223, 142, 190, 166, 40, 23, 191, 26, 30, 21, 190, 238, 144, 237, 60, 236, 154, 22, 189, 63, 19, 221, 187, 170, 105, 76, 190, 22, 69, 199, 189, 120, 164, 156, 190, 164, 117, 103, 190, 18, 223, 214, 61, 45, 127, 200, 190, 186, 104, 136, 190, 137, 31, 159, 62, 41, 50, 96, 61, 5, 18, 146, 189, 133, 6, 78, 62, 211, 66, 6, 191, 138, 199, 118, 190, 148, 235, 68, 190, 167, 60, 203, 62, 193, 134, 147, 190, 16, 81, 153, 190, 82, 116, 33, 62, 74, 161, 250, 190, 117, 115, 1, 191, 94, 180, 44, 62, 54, 93, 74, 61, 89, 21, 152, 190, 124, 191, 128, 62, 136, 197, 52, 190, 143, 194, 125, 190, 116, 65, 63, 61, 87, 7, 251, 61, 194, 166, 28, 62, 217, 209, 79, 190, 236, 67, 193, 61, 121, 173, 7, 62, 255, 1, 116, 62, 0, 121, 3, 61, 217, 163, 49, 189, 107, 45, 63, 190, 246, 47, 112, 62, 50, 78, 174, 189, 42, 160, 3, 62, 208, 201, 87, 188, 57, 10, 0, 62, 233, 211, 131, 190, 220, 35, 77, 61, 66, 181, 11, 61, 177, 235, 143, 61, 122, 205, 101, 61, 126, 191, 250, 61, 213, 107, 109, 61, 63, 11, 187, 189, 78, 95, 152, 61, 177, 216, 50, 61, 32, 134, 93, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 168, 161, 61, 7, 80, 62, 62, 193, 101, 88, 62, 69, 214, 50, 190, 36, 17, 81, 62, 201, 237, 28, 62, 110, 54, 161, 62, 195, 245, 185, 61, 207, 53, 124, 62, 182, 225, 131, 62, 79, 220, 107, 61, 10, 76, 220, 61, 82, 182, 154, 60, 210, 228, 97, 62, 89, 164, 117, 188, 113, 247, 58, 189, 75, 61, 12, 190, 215, 70, 89, 190, 220, 116, 204, 188, 109, 133, 170, 60, 224, 101, 242, 188, 107, 158, 1, 190, 159, 244, 169, 190, 248, 175, 244, 189, 144, 149, 171, 189, 185, 213, 174, 189, 39, 97, 44, 189, 144, 133, 241, 61, 238, 161, 63, 189, 157, 224, 156, 189, 132, 128, 145, 61, 30, 109, 176, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {17, 209, 176, 187, 55, 254, 169, 190, 175, 115, 3, 63, 178, 224, 100, 61, 226, 77, 90, 190, 145, 254, 58, 190, 9, 40, 79, 191, 37, 121, 130, 63, 114, 53, 235, 190, 191, 225, 43, 63, 194, 2, 67, 62, 124, 148, 155, 61, 49, 101, 145, 61, 194, 157, 21, 191, 202, 146, 32, 191, 233, 65, 255, 62, 86, 79, 251, 61, 114, 23, 93, 61, 130, 159, 1, 191, 135, 10, 76, 187, 93, 105, 63, 61, 226, 99, 142, 62, 25, 91, 117, 191, 57, 34, 152, 62, 21, 23, 7, 62, 198, 12, 234, 62, 158, 23, 63, 189, 107, 212, 73, 63, 45, 15, 84, 63, 72, 11, 203, 189, 31, 205, 125, 191, 51, 205, 30, 190, 125, 164, 64, 190, 168, 233, 159, 190, 53, 145, 66, 61, 237, 60, 28, 189, 18, 100, 160, 190, 74, 218, 251, 59, 141, 24, 107, 61, 104, 236, 58, 62, 46, 60, 65, 190, 30, 13, 120, 189, 110, 255, 210, 190, 154, 193, 91, 190, 23, 251, 125, 61, 137, 75, 19, 62, 207, 168, 10, 63, 159, 123, 182, 61, 136, 58, 25, 62, 28, 161, 29, 62, 214, 188, 120, 61, 85, 208, 116, 189, 116, 13, 8, 62, 254, 111, 139, 62, 44, 185, 162, 62, 63, 29, 197, 61, 149, 131, 172, 189, 54, 228, 34, 189, 230, 251, 168, 61, 83, 223, 36, 62, 181, 197, 149, 61, 118, 21, 175, 189, 30, 124, 203, 62, 152, 215, 87, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 19, 70, 190, 116, 79, 176, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {52, 247, 195, 189, 17, 206, 225, 63, 131, 33, 39, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {58, 208, 68, 190, 108, 73, 215, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0005/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}