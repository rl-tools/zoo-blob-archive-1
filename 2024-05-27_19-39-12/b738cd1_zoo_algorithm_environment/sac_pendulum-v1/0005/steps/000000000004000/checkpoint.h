// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 70, 66, 62, 37, 52, 66, 190, 63, 157, 141, 62, 212, 139, 159, 61, 43, 157, 61, 190, 91, 13, 248, 190, 55, 243, 59, 63, 94, 196, 217, 190, 103, 130, 240, 190, 65, 103, 213, 190, 252, 36, 206, 190, 191, 142, 245, 189, 224, 113, 177, 190, 184, 109, 176, 190, 23, 213, 37, 189, 45, 189, 215, 190, 6, 202, 28, 63, 195, 53, 210, 59, 13, 133, 88, 61, 139, 35, 156, 62, 80, 105, 11, 63, 175, 222, 12, 191, 135, 248, 74, 60, 189, 8, 0, 189, 172, 255, 205, 62, 188, 223, 231, 61, 200, 216, 251, 62, 201, 192, 157, 62, 205, 24, 81, 63, 2, 133, 219, 190, 15, 149, 214, 62, 100, 113, 38, 191, 214, 157, 30, 190, 191, 167, 190, 62, 95, 126, 74, 63, 149, 185, 181, 190, 190, 35, 46, 63, 0, 35, 161, 62, 67, 136, 255, 62, 160, 244, 198, 190, 126, 30, 36, 191, 22, 82, 40, 63, 191, 48, 71, 190, 205, 198, 48, 190, 93, 132, 189, 189, 133, 208, 25, 191, 43, 80, 12, 191, 229, 20, 30, 63, 75, 119, 64, 63, 130, 79, 180, 189, 30, 9, 146, 61, 64, 161, 56, 62, 164, 121, 84, 191, 9, 61, 38, 190, 242, 54, 85, 190, 74, 101, 157, 190, 55, 86, 188, 62, 166, 71, 44, 189, 231, 66, 35, 63, 228, 181, 100, 188, 125, 176, 13, 63, 59, 254, 22, 191, 227, 176, 144, 190, 248, 18, 98, 63, 176, 182, 193, 190, 104, 190, 132, 190, 124, 82, 224, 61, 232, 148, 25, 62, 84, 159, 133, 62, 227, 24, 38, 191, 199, 119, 0, 62, 46, 12, 11, 191, 224, 84, 50, 191, 126, 6, 183, 62, 200, 239, 192, 189, 240, 36, 39, 63, 108, 122, 135, 62, 65, 126, 14, 191, 45, 177, 16, 62, 186, 61, 221, 62, 231, 38, 120, 190, 164, 106, 81, 63, 62, 142, 25, 63, 7, 2, 183, 189, 239, 43, 202, 190, 180, 101, 24, 62, 62, 240, 35, 191, 180, 10, 209, 190, 114, 36, 171, 61, 129, 23, 169, 62, 212, 138, 208, 61, 152, 161, 87, 191, 200, 83, 87, 62, 114, 194, 228, 190, 186, 92, 56, 62, 246, 66, 223, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 40, 51, 191, 102, 27, 8, 191, 25, 224, 16, 191, 71, 40, 73, 63, 111, 43, 54, 191, 29, 114, 72, 62, 174, 154, 51, 191, 68, 64, 138, 61, 76, 174, 39, 190, 201, 164, 131, 62, 232, 205, 229, 61, 84, 111, 164, 62, 219, 143, 92, 61, 179, 16, 252, 60, 151, 206, 5, 63, 237, 108, 19, 190, 3, 45, 40, 63, 94, 62, 88, 62, 26, 83, 145, 62, 51, 184, 92, 62, 199, 48, 166, 62, 239, 77, 241, 190, 191, 237, 38, 63, 202, 244, 231, 190, 196, 81, 67, 60, 254, 228, 156, 190, 75, 69, 15, 63, 77, 136, 201, 189, 2, 68, 62, 190, 24, 146, 245, 62, 21, 242, 109, 62, 211, 92, 163, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 105, 43, 190, 1, 32, 24, 190, 115, 77, 242, 59, 242, 9, 84, 62, 73, 230, 208, 189, 181, 248, 146, 189, 52, 194, 101, 190, 202, 83, 129, 62, 185, 198, 115, 61, 147, 120, 131, 187, 79, 124, 187, 189, 92, 250, 87, 59, 129, 176, 188, 188, 53, 145, 0, 190, 88, 238, 104, 62, 4, 160, 220, 61, 172, 68, 200, 61, 30, 237, 242, 61, 69, 90, 61, 189, 57, 48, 192, 189, 159, 208, 72, 62, 93, 218, 136, 189, 101, 149, 251, 61, 249, 199, 210, 60, 138, 179, 117, 189, 50, 213, 50, 61, 226, 7, 3, 62, 136, 5, 112, 62, 160, 248, 182, 61, 185, 224, 229, 61, 164, 89, 46, 62, 220, 27, 41, 190, 111, 219, 199, 188, 15, 203, 164, 190, 155, 222, 233, 190, 18, 224, 240, 189, 109, 35, 166, 188, 242, 116, 14, 61, 129, 170, 21, 60, 157, 39, 29, 189, 238, 234, 217, 61, 167, 131, 142, 61, 162, 249, 56, 190, 255, 46, 183, 62, 30, 61, 129, 61, 176, 248, 240, 189, 34, 58, 96, 60, 134, 126, 87, 188, 112, 6, 171, 62, 75, 90, 95, 190, 111, 213, 28, 190, 38, 168, 172, 60, 91, 204, 1, 61, 120, 146, 16, 191, 16, 203, 19, 62, 172, 103, 22, 190, 118, 16, 105, 190, 197, 49, 51, 190, 201, 125, 172, 61, 154, 40, 140, 62, 253, 15, 210, 61, 0, 93, 61, 190, 96, 69, 160, 189, 102, 9, 45, 62, 126, 94, 189, 189, 209, 241, 17, 189, 78, 20, 16, 62, 25, 254, 57, 62, 165, 84, 105, 61, 29, 154, 79, 61, 150, 142, 196, 189, 64, 237, 154, 62, 143, 6, 1, 62, 73, 43, 142, 190, 172, 50, 165, 62, 161, 95, 124, 190, 245, 75, 41, 190, 222, 105, 218, 61, 33, 158, 21, 62, 24, 139, 86, 62, 208, 188, 60, 62, 21, 84, 134, 62, 113, 199, 253, 61, 193, 101, 177, 61, 196, 68, 229, 61, 66, 41, 250, 62, 213, 22, 207, 61, 22, 251, 219, 190, 104, 107, 138, 189, 30, 165, 226, 61, 88, 22, 18, 190, 185, 119, 80, 62, 24, 80, 206, 190, 39, 158, 6, 62, 44, 164, 211, 62, 94, 226, 157, 191, 17, 64, 247, 189, 151, 8, 241, 187, 198, 204, 237, 189, 29, 31, 145, 189, 89, 27, 171, 189, 52, 11, 205, 61, 221, 51, 17, 61, 240, 122, 11, 62, 173, 150, 219, 189, 234, 220, 174, 60, 40, 218, 206, 61, 118, 212, 49, 190, 169, 85, 223, 189, 106, 81, 222, 60, 31, 145, 169, 61, 60, 118, 210, 61, 39, 19, 23, 190, 251, 192, 22, 190, 193, 221, 28, 62, 60, 211, 238, 61, 71, 54, 12, 61, 104, 188, 126, 61, 103, 88, 75, 190, 2, 108, 74, 190, 24, 81, 9, 61, 141, 58, 88, 189, 233, 88, 232, 61, 1, 53, 176, 58, 116, 177, 62, 190, 70, 236, 40, 190, 29, 244, 6, 190, 215, 84, 66, 190, 197, 121, 229, 60, 7, 238, 57, 189, 153, 104, 59, 190, 146, 93, 11, 62, 146, 235, 190, 61, 8, 164, 130, 189, 201, 13, 6, 190, 110, 222, 15, 62, 242, 81, 71, 189, 143, 58, 24, 62, 117, 177, 219, 61, 255, 26, 59, 61, 98, 81, 171, 61, 12, 69, 15, 190, 215, 225, 97, 62, 220, 57, 153, 59, 220, 160, 113, 62, 232, 158, 20, 61, 237, 40, 152, 61, 80, 116, 34, 190, 65, 152, 186, 189, 254, 64, 18, 191, 151, 118, 72, 62, 152, 142, 163, 188, 163, 222, 133, 62, 30, 246, 105, 188, 200, 152, 82, 61, 1, 214, 72, 62, 209, 189, 21, 190, 127, 20, 85, 62, 167, 9, 0, 62, 106, 133, 50, 62, 121, 4, 128, 61, 20, 5, 37, 189, 252, 72, 66, 190, 99, 156, 188, 61, 195, 46, 114, 190, 34, 179, 4, 62, 117, 174, 18, 188, 68, 243, 3, 62, 45, 127, 161, 189, 63, 252, 217, 61, 231, 90, 17, 190, 137, 159, 206, 61, 97, 103, 229, 61, 236, 165, 17, 62, 31, 80, 193, 189, 80, 251, 97, 58, 55, 198, 241, 61, 18, 53, 51, 190, 172, 9, 223, 189, 120, 154, 57, 61, 1, 87, 218, 61, 136, 149, 21, 191, 36, 192, 21, 62, 219, 12, 8, 62, 24, 214, 111, 62, 78, 162, 77, 190, 110, 114, 2, 62, 179, 188, 168, 60, 0, 243, 72, 189, 40, 218, 212, 61, 186, 82, 0, 190, 242, 155, 57, 189, 116, 113, 138, 190, 221, 233, 155, 190, 185, 31, 144, 190, 7, 100, 233, 61, 70, 236, 58, 189, 219, 228, 117, 59, 157, 206, 85, 62, 75, 210, 142, 62, 4, 102, 141, 62, 81, 126, 248, 61, 9, 91, 140, 190, 127, 86, 21, 61, 161, 130, 3, 63, 95, 49, 221, 190, 40, 155, 9, 189, 187, 57, 41, 191, 63, 118, 95, 62, 208, 164, 176, 189, 101, 116, 143, 189, 241, 126, 138, 62, 87, 20, 55, 189, 63, 238, 2, 191, 84, 244, 82, 62, 238, 93, 54, 190, 249, 97, 160, 62, 206, 219, 71, 190, 90, 182, 234, 61, 61, 83, 78, 62, 233, 22, 21, 62, 64, 114, 74, 190, 68, 30, 28, 191, 183, 120, 74, 61, 71, 7, 124, 189, 15, 148, 46, 190, 130, 111, 134, 190, 37, 238, 146, 62, 229, 33, 241, 189, 136, 143, 88, 61, 69, 16, 109, 190, 70, 63, 147, 62, 198, 148, 34, 190, 111, 180, 78, 191, 209, 212, 188, 189, 117, 157, 231, 190, 42, 242, 125, 189, 176, 252, 31, 190, 80, 177, 164, 62, 175, 40, 138, 61, 209, 199, 169, 189, 4, 254, 85, 62, 155, 129, 18, 62, 159, 102, 74, 188, 16, 224, 255, 61, 171, 251, 228, 189, 196, 94, 51, 62, 182, 34, 251, 190, 54, 159, 162, 188, 83, 237, 176, 190, 28, 200, 4, 187, 159, 129, 80, 189, 18, 108, 204, 190, 248, 166, 9, 62, 183, 14, 149, 62, 215, 45, 139, 191, 23, 206, 10, 190, 116, 240, 132, 189, 94, 62, 167, 190, 139, 161, 5, 188, 244, 110, 8, 190, 238, 145, 32, 190, 111, 171, 189, 189, 11, 163, 140, 188, 225, 162, 234, 61, 235, 14, 95, 62, 48, 223, 6, 190, 111, 6, 57, 60, 136, 69, 72, 62, 57, 167, 235, 61, 129, 180, 16, 189, 249, 222, 157, 190, 136, 76, 155, 62, 22, 145, 51, 190, 5, 190, 244, 188, 247, 60, 85, 190, 130, 147, 113, 61, 167, 123, 44, 191, 179, 109, 139, 189, 111, 220, 203, 188, 179, 141, 100, 62, 133, 88, 41, 190, 32, 43, 33, 62, 137, 193, 31, 61, 166, 195, 14, 62, 109, 82, 128, 60, 89, 232, 142, 190, 87, 211, 30, 62, 176, 182, 89, 189, 78, 152, 75, 190, 103, 50, 237, 189, 228, 125, 251, 60, 217, 134, 21, 190, 45, 119, 183, 62, 109, 245, 55, 190, 204, 56, 104, 62, 140, 111, 23, 190, 254, 148, 46, 191, 45, 209, 223, 190, 83, 235, 217, 190, 50, 246, 242, 189, 103, 79, 170, 61, 43, 174, 190, 59, 117, 78, 128, 189, 146, 248, 13, 190, 193, 161, 225, 190, 121, 107, 5, 190, 47, 204, 217, 62, 58, 115, 242, 60, 23, 151, 6, 190, 64, 137, 11, 189, 45, 147, 31, 191, 30, 197, 139, 62, 202, 35, 184, 61, 39, 125, 84, 60, 141, 49, 214, 188, 88, 114, 32, 191, 241, 71, 240, 189, 163, 229, 12, 190, 212, 138, 57, 191, 254, 231, 38, 62, 251, 199, 232, 61, 159, 39, 178, 188, 144, 86, 91, 187, 247, 27, 239, 61, 151, 184, 192, 190, 7, 133, 73, 61, 117, 101, 93, 189, 33, 32, 99, 61, 130, 137, 22, 62, 82, 110, 55, 62, 157, 124, 195, 61, 8, 59, 135, 190, 60, 12, 37, 190, 212, 101, 10, 190, 228, 217, 236, 186, 209, 68, 94, 62, 74, 17, 113, 60, 125, 148, 29, 190, 138, 57, 118, 190, 57, 204, 108, 189, 227, 156, 166, 62, 168, 19, 132, 188, 70, 24, 16, 190, 25, 42, 158, 189, 126, 128, 108, 62, 111, 140, 245, 61, 147, 182, 79, 62, 242, 197, 101, 60, 7, 47, 87, 190, 210, 115, 164, 62, 26, 121, 25, 62, 249, 136, 202, 190, 208, 101, 24, 190, 184, 6, 190, 188, 190, 39, 121, 189, 254, 205, 71, 61, 220, 242, 217, 189, 81, 252, 45, 190, 176, 107, 188, 61, 188, 150, 2, 188, 226, 156, 41, 189, 67, 211, 7, 62, 250, 1, 255, 188, 199, 83, 131, 60, 143, 64, 36, 62, 32, 237, 12, 61, 160, 168, 68, 62, 174, 22, 222, 61, 156, 202, 68, 62, 116, 129, 230, 61, 223, 150, 144, 59, 109, 138, 126, 62, 85, 84, 43, 62, 23, 227, 125, 187, 64, 150, 31, 190, 77, 77, 69, 188, 67, 242, 54, 189, 114, 239, 112, 62, 140, 124, 195, 61, 37, 5, 77, 61, 228, 16, 231, 189, 80, 116, 111, 62, 103, 214, 25, 190, 104, 118, 3, 62, 143, 163, 141, 61, 117, 199, 19, 62, 80, 119, 230, 60, 92, 70, 83, 189, 77, 115, 235, 189, 129, 58, 41, 190, 82, 102, 238, 189, 106, 72, 82, 61, 228, 139, 132, 61, 229, 159, 136, 187, 3, 159, 133, 189, 49, 159, 173, 61, 207, 184, 5, 190, 179, 189, 2, 62, 48, 113, 27, 190, 254, 192, 225, 186, 178, 79, 76, 190, 106, 93, 246, 189, 161, 80, 39, 188, 154, 204, 247, 61, 151, 111, 162, 189, 134, 118, 34, 189, 132, 199, 4, 190, 136, 153, 1, 188, 52, 71, 77, 190, 102, 177, 18, 190, 99, 65, 165, 189, 69, 198, 158, 59, 116, 11, 180, 60, 188, 220, 25, 190, 36, 6, 241, 189, 107, 211, 8, 189, 100, 29, 159, 189, 254, 176, 182, 189, 137, 209, 8, 62, 98, 9, 84, 190, 168, 117, 79, 62, 25, 48, 255, 188, 165, 184, 130, 62, 156, 179, 122, 189, 129, 212, 34, 190, 172, 44, 199, 190, 192, 16, 62, 190, 24, 201, 181, 190, 31, 244, 106, 191, 206, 30, 19, 62, 76, 33, 251, 190, 206, 67, 174, 190, 251, 216, 29, 62, 107, 250, 159, 190, 112, 194, 251, 59, 249, 104, 210, 61, 135, 111, 59, 191, 165, 34, 31, 190, 8, 213, 60, 62, 182, 195, 88, 62, 65, 122, 102, 190, 133, 156, 187, 61, 45, 48, 117, 190, 233, 107, 236, 61, 103, 113, 55, 189, 189, 31, 229, 190, 37, 227, 63, 62, 61, 137, 99, 62, 42, 161, 245, 189, 101, 1, 238, 190, 183, 25, 64, 62, 161, 128, 47, 190, 233, 252, 173, 189, 92, 151, 148, 62, 144, 255, 43, 62, 7, 237, 65, 62, 13, 130, 223, 185, 17, 240, 46, 190, 168, 63, 203, 62, 229, 103, 114, 62, 195, 52, 151, 189, 153, 109, 185, 189, 236, 20, 236, 189, 244, 221, 87, 62, 153, 151, 156, 189, 72, 75, 111, 189, 136, 67, 133, 189, 246, 154, 47, 190, 248, 76, 150, 190, 239, 57, 251, 60, 218, 153, 19, 190, 235, 96, 20, 61, 218, 98, 179, 190, 218, 136, 171, 61, 12, 189, 72, 62, 117, 121, 165, 61, 51, 24, 48, 190, 71, 124, 169, 189, 40, 47, 143, 62, 194, 3, 26, 190, 13, 182, 166, 189, 8, 84, 207, 61, 97, 93, 31, 60, 131, 0, 77, 62, 4, 47, 118, 62, 5, 101, 102, 190, 33, 76, 26, 190, 158, 201, 159, 189, 77, 173, 58, 188, 212, 246, 188, 62, 230, 211, 217, 61, 188, 226, 203, 190, 61, 245, 185, 189, 78, 188, 231, 61, 81, 69, 177, 62, 143, 186, 136, 62, 63, 216, 3, 62, 152, 27, 104, 62, 240, 97, 54, 61, 224, 64, 110, 189, 234, 54, 20, 63, 218, 159, 41, 189, 247, 92, 91, 189, 147, 64, 237, 61, 133, 22, 18, 62, 12, 186, 50, 62, 116, 41, 151, 62, 181, 241, 219, 189, 41, 191, 67, 189, 52, 63, 190, 62, 42, 2, 31, 190, 179, 89, 4, 190, 134, 217, 61, 189, 2, 225, 1, 190, 127, 74, 16, 190, 38, 243, 35, 190, 115, 223, 222, 188, 136, 233, 223, 189, 81, 126, 3, 190, 171, 12, 252, 189, 56, 160, 43, 190, 115, 200, 25, 190, 252, 21, 20, 189, 225, 69, 249, 61, 19, 177, 26, 60, 100, 70, 118, 189, 150, 204, 158, 189, 243, 117, 186, 59, 163, 157, 51, 190, 90, 155, 247, 189, 36, 198, 255, 189, 158, 130, 214, 60, 112, 185, 157, 189, 1, 217, 80, 188, 2, 20, 97, 60, 172, 142, 153, 60, 226, 115, 226, 60, 139, 116, 239, 60, 77, 13, 40, 190, 193, 129, 48, 62, 120, 155, 178, 59, 121, 11, 31, 61, 73, 85, 99, 189, 167, 24, 3, 62, 255, 158, 41, 62, 5, 35, 1, 62, 40, 181, 255, 188, 246, 6, 74, 61, 68, 7, 8, 190, 246, 70, 24, 190, 239, 65, 76, 190, 80, 228, 238, 188, 232, 112, 150, 189, 98, 17, 145, 188, 64, 54, 69, 190, 11, 26, 204, 61, 84, 15, 178, 189, 196, 63, 201, 188, 32, 224, 37, 60, 129, 107, 91, 61, 230, 68, 83, 190, 63, 88, 209, 189, 74, 197, 28, 190, 159, 15, 240, 189, 166, 23, 5, 190, 242, 56, 173, 61, 82, 185, 209, 189, 68, 202, 230, 188, 218, 52, 79, 61, 112, 107, 151, 189, 88, 142, 198, 189, 246, 108, 240, 60, 11, 95, 164, 187, 239, 97, 26, 189, 109, 107, 63, 61, 66, 210, 17, 62, 18, 175, 8, 62, 95, 24, 234, 189, 34, 105, 238, 188, 52, 180, 113, 60, 64, 16, 48, 62, 62, 147, 226, 189, 175, 30, 118, 189, 184, 166, 95, 61, 167, 52, 174, 60, 216, 210, 189, 61, 236, 228, 16, 190, 200, 236, 245, 189, 60, 79, 113, 61, 202, 107, 35, 189, 5, 236, 19, 189, 70, 185, 192, 59, 199, 73, 150, 61, 240, 134, 23, 187, 235, 185, 80, 190, 202, 210, 11, 62, 191, 186, 70, 190, 80, 85, 197, 189, 12, 91, 246, 61, 115, 125, 84, 189, 220, 32, 183, 58, 226, 33, 241, 61, 35, 248, 131, 190, 169, 36, 31, 61, 254, 144, 224, 58, 245, 104, 188, 189, 176, 111, 211, 60, 164, 181, 42, 190, 219, 210, 54, 61, 76, 173, 6, 189, 93, 91, 8, 190, 162, 169, 38, 61, 135, 153, 16, 61, 182, 3, 105, 60, 175, 211, 156, 60, 41, 39, 4, 61, 40, 226, 78, 190, 241, 219, 180, 61, 77, 120, 253, 188, 93, 122, 65, 190, 98, 173, 23, 62, 63, 102, 172, 189, 203, 110, 33, 189, 108, 76, 231, 61, 42, 56, 252, 189, 2, 152, 62, 61, 240, 239, 208, 61, 107, 168, 28, 190, 29, 146, 23, 62, 226, 167, 253, 189, 117, 81, 157, 61, 148, 209, 25, 62, 85, 37, 230, 61, 76, 41, 228, 189, 64, 90, 0, 62, 47, 123, 126, 61, 109, 26, 195, 189, 1, 25, 163, 189, 176, 166, 204, 59, 173, 160, 19, 62, 43, 180, 215, 61, 19, 38, 123, 189, 58, 219, 239, 61, 204, 35, 105, 189, 74, 4, 30, 188, 153, 59, 6, 189, 5, 128, 217, 60, 42, 230, 45, 190, 138, 169, 27, 189, 84, 240, 240, 189, 228, 94, 197, 61, 147, 195, 4, 190, 250, 35, 239, 189, 232, 35, 29, 61, 236, 135, 223, 189, 94, 137, 37, 188, 31, 139, 166, 189, 3, 195, 231, 61, 161, 250, 12, 190, 154, 214, 212, 60, 242, 89, 234, 59, 246, 93, 207, 188, 68, 174, 133, 188, 110, 244, 187, 189, 14, 112, 49, 190, 98, 174, 20, 190, 6, 233, 110, 188, 204, 158, 162, 189, 103, 83, 203, 189, 133, 51, 84, 189, 20, 189, 183, 189, 235, 120, 64, 190, 172, 138, 167, 58, 252, 11, 44, 62, 253, 87, 109, 187, 99, 84, 31, 62, 99, 184, 240, 189, 216, 21, 237, 188, 101, 66, 171, 61, 38, 151, 24, 189, 180, 105, 136, 60, 4, 29, 113, 62, 128, 9, 199, 189, 131, 146, 92, 189, 228, 225, 109, 62, 165, 60, 97, 61, 155, 75, 78, 61, 203, 98, 96, 188, 219, 171, 254, 189, 5, 28, 70, 62, 40, 161, 177, 60, 152, 93, 55, 62, 241, 32, 158, 62, 10, 132, 235, 60, 26, 229, 146, 189, 62, 101, 214, 189, 23, 139, 8, 62, 60, 78, 180, 61, 15, 107, 31, 190, 241, 166, 142, 189, 104, 154, 195, 60, 22, 92, 199, 61, 248, 182, 114, 189, 31, 177, 170, 188, 31, 123, 52, 62, 141, 16, 119, 62, 254, 138, 136, 189, 161, 93, 117, 61, 76, 254, 87, 190, 30, 143, 12, 61, 113, 82, 138, 190, 77, 182, 214, 61, 194, 199, 124, 59, 231, 153, 204, 60, 90, 56, 96, 61, 157, 91, 165, 189, 50, 239, 181, 188, 91, 147, 39, 189, 199, 167, 113, 190, 215, 28, 206, 189, 228, 251, 244, 60, 186, 167, 25, 190, 150, 228, 165, 190, 72, 9, 93, 189, 170, 207, 132, 62, 157, 35, 101, 190, 121, 44, 137, 188, 228, 167, 211, 190, 209, 143, 34, 187, 132, 205, 68, 189, 4, 219, 66, 62, 185, 156, 202, 61, 104, 75, 129, 190, 53, 129, 255, 61, 8, 2, 132, 190, 30, 98, 18, 190, 89, 211, 89, 62, 229, 147, 114, 62, 103, 210, 250, 189, 149, 87, 79, 61, 133, 162, 216, 189, 238, 23, 242, 61, 115, 209, 96, 190, 74, 9, 194, 61, 206, 165, 216, 61, 136, 3, 44, 189, 245, 111, 11, 190, 78, 150, 229, 187, 122, 156, 69, 190, 26, 216, 37, 190, 110, 207, 7, 62, 149, 116, 25, 62, 235, 4, 34, 190, 230, 73, 138, 190, 22, 217, 7, 189, 137, 131, 52, 62, 72, 59, 182, 62, 253, 44, 94, 61, 136, 198, 91, 61, 101, 133, 71, 190, 182, 234, 130, 189, 208, 88, 28, 190, 104, 37, 22, 62, 162, 250, 239, 61, 192, 12, 137, 190, 11, 39, 163, 61, 121, 56, 226, 61, 58, 197, 179, 61, 155, 32, 173, 189, 109, 201, 27, 62, 253, 5, 10, 60, 81, 131, 51, 62, 225, 248, 27, 190, 155, 251, 194, 61, 219, 203, 66, 189, 213, 238, 167, 61, 63, 210, 25, 187, 80, 114, 21, 62, 247, 92, 21, 190, 4, 1, 134, 189, 200, 47, 34, 190, 234, 140, 39, 189, 87, 3, 210, 61, 218, 69, 196, 189, 247, 168, 153, 189, 214, 73, 172, 188, 5, 149, 206, 189, 239, 108, 41, 189, 148, 73, 47, 62, 56, 17, 52, 60, 180, 132, 39, 190, 46, 0, 187, 61, 194, 236, 21, 190, 92, 9, 2, 190, 178, 144, 23, 61, 22, 133, 83, 60, 174, 36, 207, 189, 231, 98, 194, 61, 205, 80, 193, 61, 208, 109, 24, 188, 135, 134, 67, 60, 236, 136, 131, 62, 205, 198, 30, 189, 212, 240, 3, 60, 240, 24, 240, 60, 211, 225, 130, 62, 1, 94, 44, 190, 239, 156, 116, 62, 4, 201, 96, 190, 147, 56, 17, 187, 178, 122, 150, 61, 118, 35, 89, 62, 143, 144, 48, 190, 18, 244, 198, 189, 13, 208, 53, 190, 194, 139, 149, 61, 243, 239, 175, 189, 58, 21, 1, 189, 14, 131, 23, 61, 166, 223, 86, 61, 193, 236, 132, 62, 251, 94, 24, 190, 171, 117, 67, 62, 55, 217, 133, 190, 117, 33, 113, 62, 45, 213, 77, 190, 28, 161, 175, 189, 0, 101, 73, 62, 44, 116, 8, 62, 152, 18, 220, 190, 178, 191, 130, 189, 164, 221, 112, 61, 5, 56, 154, 61, 251, 75, 147, 61, 205, 26, 236, 188, 62, 105, 46, 190, 149, 49, 135, 61, 195, 181, 41, 62, 80, 18, 20, 190, 233, 100, 243, 189, 22, 171, 182, 61, 223, 49, 223, 60, 155, 231, 233, 61, 192, 244, 31, 189, 80, 126, 87, 61, 78, 173, 1, 188, 151, 148, 173, 61, 31, 57, 136, 189, 194, 138, 144, 189, 94, 0, 235, 189, 122, 58, 0, 62, 100, 204, 100, 190, 172, 182, 37, 61, 134, 227, 99, 61, 130, 39, 49, 190, 124, 59, 75, 190, 230, 93, 213, 189, 145, 198, 24, 190, 247, 136, 82, 190, 28, 225, 223, 60, 195, 128, 72, 190, 22, 148, 26, 190, 144, 28, 203, 61, 63, 83, 189, 190, 64, 17, 42, 190, 215, 196, 151, 190, 190, 52, 168, 185, 228, 31, 254, 189, 75, 218, 163, 62, 208, 197, 70, 190, 167, 81, 246, 61, 129, 250, 16, 190, 7, 137, 165, 190, 54, 103, 199, 190, 24, 85, 183, 190, 42, 153, 50, 190, 255, 224, 102, 190, 75, 139, 111, 62, 124, 16, 133, 60, 224, 173, 41, 191, 0, 68, 75, 190, 97, 125, 207, 61, 56, 72, 39, 62, 242, 202, 250, 189, 235, 49, 3, 189, 8, 76, 186, 189, 169, 131, 77, 191, 159, 236, 162, 62, 47, 113, 236, 189, 138, 151, 34, 61, 52, 180, 201, 189, 14, 174, 30, 191, 146, 60, 42, 62, 32, 108, 165, 60, 25, 155, 92, 191, 58, 150, 141, 189, 32, 208, 137, 190, 195, 155, 116, 190, 174, 103, 196, 189, 118, 36, 56, 61, 242, 200, 63, 62, 34, 77, 80, 189, 200, 151, 5, 62, 56, 185, 219, 61, 179, 158, 93, 62, 98, 137, 157, 189, 39, 154, 100, 62, 25, 149, 54, 59, 1, 100, 156, 190, 131, 160, 67, 61, 12, 62, 98, 190, 143, 16, 30, 190, 82, 14, 49, 60, 242, 154, 233, 190, 150, 225, 55, 61, 0, 35, 150, 61, 212, 160, 63, 190, 130, 78, 136, 60, 177, 235, 50, 189, 104, 231, 77, 62, 36, 33, 156, 190, 209, 13, 241, 189, 196, 109, 20, 191, 195, 109, 91, 61, 249, 229, 169, 190, 16, 205, 142, 190, 68, 143, 254, 61, 168, 90, 44, 62, 163, 83, 164, 187, 182, 68, 14, 190, 237, 196, 26, 62, 154, 220, 182, 61, 110, 5, 59, 190, 224, 136, 159, 189, 198, 53, 50, 190, 93, 102, 79, 189, 73, 38, 131, 189, 0, 71, 31, 188, 74, 45, 41, 190, 171, 48, 159, 60, 216, 172, 13, 190, 18, 32, 57, 190, 130, 130, 124, 61, 53, 253, 21, 190, 27, 252, 125, 61, 176, 107, 12, 60, 247, 244, 50, 190, 235, 74, 226, 189, 236, 96, 176, 188, 217, 177, 25, 62, 110, 17, 190, 57, 178, 192, 157, 61, 117, 135, 48, 62, 43, 243, 36, 60, 187, 154, 73, 61, 70, 71, 158, 189, 10, 231, 47, 60, 155, 55, 245, 189, 218, 233, 219, 60, 199, 131, 13, 61, 157, 165, 245, 61, 5, 83, 152, 61, 113, 160, 99, 188, 13, 43, 195, 189, 151, 199, 37, 61, 91, 201, 180, 189, 233, 61, 244, 189, 217, 99, 9, 59, 171, 67, 94, 188, 253, 38, 94, 61, 22, 183, 106, 189, 125, 193, 31, 190, 65, 102, 228, 188, 165, 119, 22, 190, 158, 110, 53, 61, 2, 112, 178, 60, 172, 213, 8, 190, 75, 251, 33, 190, 83, 132, 36, 189, 224, 68, 23, 61, 163, 57, 93, 189, 206, 216, 243, 61, 83, 21, 44, 190, 199, 151, 212, 189, 211, 239, 208, 189, 72, 209, 7, 62, 118, 155, 42, 190, 202, 134, 232, 188, 221, 190, 64, 61, 144, 71, 144, 189, 247, 149, 86, 189, 242, 115, 168, 189, 234, 173, 127, 61, 225, 193, 126, 190, 59, 247, 216, 61, 225, 244, 55, 190, 91, 239, 173, 189, 96, 241, 212, 60, 43, 115, 0, 62, 208, 113, 247, 61, 71, 214, 3, 190, 151, 73, 40, 62, 157, 158, 91, 62, 201, 50, 110, 62, 107, 163, 42, 61, 201, 230, 109, 189, 162, 42, 55, 190, 171, 191, 239, 61, 93, 178, 37, 61, 234, 165, 202, 61, 173, 24, 177, 59, 39, 126, 35, 62, 223, 58, 174, 190, 183, 111, 60, 61, 213, 66, 129, 61, 57, 8, 212, 188, 102, 227, 138, 61, 196, 94, 161, 61, 172, 219, 12, 62, 225, 60, 162, 189, 30, 52, 3, 62, 220, 171, 171, 189, 171, 232, 58, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 225, 233, 187, 189, 40, 113, 62, 145, 199, 132, 62, 77, 243, 40, 190, 168, 218, 224, 61, 254, 65, 144, 61, 110, 29, 188, 62, 52, 49, 191, 60, 255, 173, 29, 62, 168, 8, 111, 62, 64, 80, 131, 60, 155, 31, 113, 61, 82, 182, 154, 60, 170, 17, 47, 62, 173, 55, 53, 61, 229, 250, 236, 189, 75, 61, 12, 190, 215, 70, 89, 190, 248, 201, 49, 190, 87, 95, 79, 61, 224, 101, 242, 188, 219, 123, 59, 189, 164, 129, 47, 190, 178, 83, 23, 190, 218, 104, 158, 189, 158, 138, 6, 190, 39, 97, 44, 189, 100, 12, 29, 62, 222, 28, 8, 190, 157, 224, 156, 189, 198, 207, 17, 60, 202, 132, 141, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 23, 173, 188, 165, 22, 91, 190, 244, 237, 3, 63, 204, 132, 101, 61, 16, 239, 1, 190, 93, 244, 5, 190, 181, 4, 81, 191, 246, 2, 9, 63, 149, 100, 174, 190, 12, 123, 33, 63, 167, 87, 54, 62, 166, 125, 129, 61, 49, 101, 145, 61, 208, 60, 255, 190, 219, 239, 137, 190, 130, 152, 183, 62, 86, 79, 251, 61, 114, 23, 93, 61, 123, 113, 22, 189, 52, 179, 247, 188, 93, 105, 63, 61, 186, 226, 32, 62, 116, 206, 164, 189, 210, 174, 157, 62, 165, 59, 7, 62, 73, 186, 38, 62, 158, 23, 63, 189, 96, 143, 41, 63, 222, 246, 254, 62, 72, 11, 203, 189, 157, 139, 23, 190, 87, 94, 51, 190, 181, 177, 246, 189, 226, 244, 44, 190, 83, 144, 13, 61, 234, 140, 28, 189, 135, 231, 137, 190, 228, 167, 225, 187, 39, 117, 115, 60, 231, 14, 182, 61, 83, 128, 62, 190, 26, 238, 9, 190, 244, 189, 43, 190, 6, 131, 67, 190, 23, 251, 125, 61, 89, 1, 124, 61, 151, 202, 172, 62, 66, 115, 113, 61, 136, 58, 25, 62, 28, 161, 29, 62, 62, 135, 2, 61, 195, 220, 216, 189, 116, 13, 8, 62, 52, 68, 177, 189, 190, 113, 86, 62, 237, 56, 253, 61, 210, 147, 172, 189, 145, 227, 87, 62, 230, 251, 168, 61, 69, 187, 167, 61, 0, 60, 6, 61, 118, 21, 175, 189, 149, 115, 251, 61, 4, 148, 13, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {64, 194, 27, 190, 115, 21, 91, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {115, 158, 175, 190, 79, 115, 36, 190, 95, 27, 139, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {44, 202, 193, 191, 128, 160, 35, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0005/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}