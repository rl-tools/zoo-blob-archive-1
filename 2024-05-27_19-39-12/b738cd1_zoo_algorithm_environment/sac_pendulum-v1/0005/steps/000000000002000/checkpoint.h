// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {91, 214, 161, 62, 223, 230, 96, 190, 20, 255, 131, 62, 201, 60, 3, 190, 212, 31, 132, 190, 199, 78, 228, 190, 133, 199, 241, 62, 163, 167, 236, 190, 95, 218, 218, 190, 137, 83, 231, 190, 250, 202, 157, 190, 239, 197, 74, 190, 222, 41, 228, 190, 47, 68, 16, 190, 34, 176, 9, 189, 142, 223, 195, 190, 178, 55, 210, 62, 36, 116, 5, 62, 125, 38, 160, 189, 16, 54, 65, 62, 59, 123, 5, 63, 221, 194, 248, 190, 187, 108, 231, 60, 56, 9, 232, 59, 35, 187, 160, 61, 208, 184, 52, 62, 111, 194, 251, 62, 220, 32, 244, 60, 162, 172, 82, 63, 238, 144, 164, 190, 242, 5, 248, 62, 33, 226, 1, 191, 210, 47, 250, 188, 40, 235, 3, 62, 39, 178, 109, 63, 120, 28, 54, 190, 25, 76, 216, 62, 126, 1, 152, 62, 56, 124, 251, 62, 4, 182, 147, 61, 38, 149, 30, 191, 1, 182, 28, 63, 107, 139, 10, 190, 39, 62, 133, 190, 39, 135, 203, 189, 181, 0, 26, 191, 45, 14, 51, 191, 228, 18, 225, 62, 243, 209, 46, 63, 168, 148, 152, 61, 246, 61, 185, 60, 99, 44, 142, 60, 28, 169, 79, 191, 47, 176, 228, 189, 249, 140, 31, 190, 145, 199, 226, 190, 79, 104, 156, 62, 232, 142, 191, 189, 12, 54, 28, 63, 194, 67, 172, 57, 51, 113, 210, 62, 34, 59, 235, 190, 68, 95, 158, 190, 151, 89, 65, 63, 160, 196, 190, 190, 211, 237, 80, 190, 228, 87, 125, 61, 203, 51, 73, 62, 168, 79, 188, 62, 225, 44, 237, 190, 210, 153, 88, 61, 182, 30, 237, 190, 61, 81, 37, 191, 12, 41, 252, 62, 134, 172, 156, 189, 224, 132, 20, 63, 115, 244, 135, 62, 188, 52, 255, 190, 249, 152, 57, 188, 233, 43, 219, 62, 252, 173, 164, 190, 187, 172, 81, 63, 0, 89, 234, 62, 48, 92, 181, 189, 152, 153, 141, 190, 97, 135, 57, 62, 96, 44, 209, 190, 230, 190, 53, 190, 6, 79, 15, 190, 137, 28, 205, 62, 42, 110, 53, 59, 46, 130, 115, 191, 122, 207, 203, 61, 82, 70, 230, 190, 23, 225, 219, 62, 52, 43, 19, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {141, 99, 28, 191, 139, 228, 251, 190, 195, 86, 27, 191, 20, 42, 42, 63, 156, 18, 34, 191, 101, 123, 139, 61, 101, 55, 37, 191, 48, 83, 139, 61, 205, 114, 3, 189, 36, 53, 192, 62, 175, 72, 9, 62, 137, 190, 232, 62, 220, 91, 69, 62, 117, 94, 253, 60, 36, 165, 6, 63, 141, 201, 223, 188, 212, 58, 45, 63, 253, 238, 164, 62, 150, 242, 163, 62, 25, 168, 57, 62, 202, 119, 0, 63, 69, 22, 169, 190, 249, 204, 34, 63, 14, 13, 16, 191, 52, 94, 196, 57, 36, 149, 142, 190, 33, 123, 11, 63, 36, 120, 36, 190, 160, 110, 91, 190, 193, 122, 7, 63, 197, 55, 151, 62, 91, 221, 145, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 241, 244, 188, 202, 169, 217, 189, 92, 129, 176, 60, 227, 144, 56, 62, 29, 119, 1, 190, 104, 254, 212, 189, 48, 12, 45, 190, 185, 39, 77, 62, 146, 46, 223, 61, 224, 136, 71, 61, 47, 188, 4, 190, 214, 26, 128, 61, 79, 252, 48, 61, 232, 0, 124, 189, 168, 121, 76, 62, 252, 116, 34, 62, 165, 46, 217, 61, 151, 237, 7, 62, 162, 206, 107, 186, 147, 53, 70, 189, 190, 27, 47, 62, 28, 33, 148, 189, 237, 135, 1, 62, 44, 56, 138, 61, 221, 220, 149, 189, 137, 149, 141, 61, 47, 107, 14, 62, 42, 85, 35, 62, 214, 152, 3, 62, 96, 175, 4, 62, 38, 114, 98, 62, 78, 198, 129, 189, 36, 233, 21, 61, 99, 181, 90, 190, 120, 251, 169, 190, 15, 110, 214, 189, 238, 26, 171, 188, 5, 235, 238, 61, 131, 79, 85, 61, 201, 171, 106, 189, 203, 166, 30, 62, 9, 41, 68, 61, 53, 57, 174, 61, 219, 64, 167, 62, 76, 209, 222, 61, 127, 151, 34, 189, 226, 43, 28, 60, 48, 229, 144, 61, 15, 173, 178, 62, 0, 182, 81, 189, 253, 190, 186, 189, 197, 235, 6, 62, 37, 173, 146, 61, 176, 214, 130, 190, 71, 169, 99, 62, 136, 231, 247, 189, 147, 203, 31, 190, 131, 155, 209, 189, 54, 201, 135, 61, 232, 124, 79, 61, 67, 112, 186, 61, 236, 167, 243, 189, 139, 148, 160, 189, 35, 140, 59, 62, 107, 247, 181, 189, 30, 195, 84, 59, 136, 35, 143, 61, 224, 244, 49, 62, 56, 102, 104, 61, 41, 231, 58, 189, 110, 111, 176, 189, 158, 124, 169, 62, 201, 103, 228, 61, 170, 210, 146, 190, 187, 106, 58, 62, 254, 89, 140, 190, 194, 204, 70, 190, 202, 117, 184, 61, 219, 77, 2, 62, 192, 150, 58, 62, 161, 158, 205, 188, 38, 159, 112, 62, 226, 61, 205, 61, 160, 126, 14, 190, 61, 78, 24, 61, 148, 242, 84, 62, 55, 46, 77, 60, 154, 11, 42, 190, 233, 212, 0, 190, 130, 198, 168, 189, 178, 250, 56, 190, 109, 107, 188, 61, 208, 218, 26, 190, 110, 125, 166, 61, 7, 43, 238, 62, 197, 111, 33, 191, 76, 44, 221, 189, 236, 203, 145, 184, 22, 161, 220, 189, 220, 138, 103, 189, 89, 27, 171, 189, 41, 95, 234, 61, 255, 55, 120, 61, 105, 174, 26, 62, 191, 228, 171, 189, 41, 20, 127, 61, 58, 201, 14, 62, 244, 44, 21, 190, 250, 141, 172, 189, 98, 181, 28, 61, 78, 251, 220, 61, 67, 70, 225, 61, 104, 119, 224, 189, 244, 45, 167, 189, 38, 15, 44, 62, 43, 235, 19, 62, 232, 220, 204, 61, 249, 112, 143, 61, 15, 176, 62, 190, 37, 28, 51, 190, 19, 85, 65, 61, 68, 239, 68, 189, 16, 69, 22, 62, 52, 244, 18, 59, 96, 163, 18, 190, 227, 61, 32, 190, 247, 92, 194, 189, 140, 80, 46, 190, 219, 129, 233, 61, 221, 39, 26, 60, 171, 212, 16, 190, 24, 210, 174, 61, 100, 232, 232, 61, 117, 113, 104, 189, 144, 163, 244, 189, 185, 235, 71, 61, 63, 27, 208, 188, 49, 197, 49, 62, 233, 61, 184, 61, 174, 243, 138, 61, 253, 75, 230, 61, 7, 178, 187, 189, 212, 108, 32, 62, 32, 208, 71, 61, 134, 41, 98, 62, 250, 253, 15, 60, 78, 254, 214, 61, 238, 0, 154, 189, 82, 237, 8, 190, 33, 109, 217, 190, 12, 194, 93, 62, 222, 170, 69, 60, 125, 132, 143, 62, 178, 127, 26, 61, 10, 232, 59, 61, 159, 160, 28, 61, 9, 193, 5, 190, 223, 217, 103, 62, 64, 72, 3, 62, 81, 236, 108, 62, 140, 180, 168, 61, 26, 241, 171, 59, 44, 128, 253, 189, 125, 78, 155, 61, 48, 202, 62, 190, 97, 209, 87, 62, 224, 211, 93, 184, 149, 78, 132, 61, 152, 113, 100, 189, 208, 181, 216, 61, 89, 164, 83, 189, 147, 160, 187, 61, 28, 136, 253, 61, 179, 215, 60, 62, 69, 198, 2, 190, 223, 248, 77, 61, 254, 7, 149, 61, 253, 221, 75, 190, 155, 252, 136, 189, 224, 19, 45, 62, 164, 131, 222, 61, 210, 134, 168, 190, 109, 244, 70, 62, 70, 154, 18, 62, 95, 63, 139, 62, 69, 155, 26, 190, 251, 139, 247, 61, 176, 151, 209, 189, 110, 36, 84, 189, 244, 26, 27, 62, 83, 26, 0, 190, 141, 199, 29, 189, 235, 152, 81, 189, 187, 157, 131, 190, 146, 147, 22, 190, 62, 153, 184, 61, 0, 120, 217, 189, 22, 142, 152, 61, 211, 51, 144, 61, 103, 27, 141, 62, 33, 117, 200, 188, 166, 75, 251, 61, 161, 27, 15, 185, 149, 88, 210, 60, 10, 245, 210, 61, 136, 73, 89, 190, 7, 29, 161, 189, 74, 125, 166, 190, 95, 226, 185, 59, 210, 129, 231, 189, 1, 230, 155, 187, 9, 5, 139, 62, 232, 106, 183, 60, 59, 170, 145, 188, 163, 59, 13, 62, 77, 249, 87, 190, 4, 86, 178, 62, 196, 185, 212, 189, 241, 123, 216, 61, 161, 216, 219, 61, 122, 201, 193, 61, 7, 213, 43, 190, 221, 64, 28, 191, 84, 141, 232, 59, 147, 158, 44, 189, 189, 76, 67, 190, 214, 137, 11, 190, 139, 228, 77, 62, 229, 33, 241, 189, 178, 241, 161, 188, 2, 192, 224, 189, 121, 168, 106, 62, 111, 109, 175, 189, 113, 88, 9, 191, 200, 101, 86, 190, 77, 174, 123, 190, 247, 251, 229, 60, 82, 11, 48, 190, 20, 8, 125, 62, 110, 219, 218, 60, 118, 225, 207, 189, 161, 12, 37, 62, 252, 185, 219, 61, 156, 197, 21, 190, 183, 155, 65, 62, 204, 248, 181, 189, 161, 140, 12, 62, 205, 99, 6, 190, 142, 84, 31, 190, 213, 67, 159, 190, 4, 52, 152, 186, 70, 134, 135, 61, 234, 83, 69, 189, 202, 3, 185, 61, 26, 252, 123, 62, 192, 27, 214, 190, 62, 128, 194, 189, 90, 105, 220, 58, 99, 137, 122, 190, 195, 25, 38, 188, 102, 94, 184, 189, 158, 135, 101, 189, 20, 22, 155, 189, 128, 22, 91, 189, 78, 253, 4, 62, 246, 173, 106, 62, 78, 246, 91, 189, 132, 142, 76, 60, 1, 101, 75, 62, 56, 247, 67, 62, 120, 0, 101, 189, 134, 73, 97, 190, 140, 61, 106, 62, 139, 52, 55, 190, 208, 166, 48, 61, 75, 191, 157, 189, 7, 107, 81, 61, 119, 153, 208, 190, 133, 56, 78, 188, 78, 243, 177, 58, 135, 81, 147, 62, 195, 90, 210, 189, 45, 233, 27, 62, 169, 106, 16, 190, 1, 244, 23, 62, 83, 44, 184, 61, 235, 200, 123, 190, 162, 238, 63, 62, 129, 38, 156, 61, 252, 66, 52, 190, 38, 45, 236, 189, 17, 113, 154, 188, 217, 134, 21, 190, 113, 85, 47, 62, 202, 173, 96, 189, 247, 218, 21, 62, 248, 220, 177, 189, 220, 119, 49, 190, 137, 99, 3, 190, 245, 156, 234, 189, 111, 240, 169, 189, 136, 18, 29, 62, 148, 136, 162, 188, 0, 68, 235, 188, 34, 227, 25, 190, 251, 223, 213, 189, 86, 24, 216, 189, 225, 2, 170, 61, 91, 211, 240, 61, 76, 20, 6, 190, 234, 86, 17, 190, 138, 198, 133, 61, 174, 246, 74, 61, 104, 18, 185, 61, 97, 142, 136, 189, 47, 81, 162, 61, 215, 197, 1, 190, 63, 184, 47, 190, 156, 136, 240, 61, 180, 165, 156, 60, 231, 16, 138, 61, 110, 182, 250, 61, 116, 201, 230, 188, 49, 156, 91, 187, 220, 251, 92, 186, 225, 20, 145, 190, 168, 159, 25, 61, 31, 13, 138, 189, 60, 94, 240, 61, 35, 84, 29, 62, 17, 24, 55, 62, 54, 42, 238, 61, 74, 144, 3, 190, 167, 183, 28, 190, 68, 187, 2, 190, 157, 200, 17, 59, 5, 15, 142, 62, 163, 35, 255, 60, 9, 97, 16, 190, 188, 219, 54, 190, 119, 21, 113, 189, 175, 156, 104, 62, 4, 84, 135, 61, 234, 46, 24, 190, 41, 194, 216, 189, 101, 39, 99, 62, 167, 18, 244, 61, 111, 129, 120, 62, 48, 129, 103, 60, 158, 61, 34, 190, 46, 95, 153, 62, 182, 111, 6, 62, 233, 217, 173, 190, 70, 48, 41, 190, 252, 9, 65, 189, 194, 157, 119, 189, 98, 183, 23, 189, 4, 143, 53, 190, 236, 12, 33, 190, 233, 203, 214, 61, 128, 181, 236, 187, 227, 182, 222, 188, 78, 178, 219, 61, 240, 133, 253, 187, 83, 162, 237, 60, 161, 252, 41, 62, 151, 198, 42, 61, 114, 59, 62, 62, 26, 0, 4, 62, 139, 116, 99, 62, 113, 84, 232, 61, 191, 179, 166, 189, 150, 50, 108, 62, 72, 164, 247, 61, 9, 124, 23, 189, 34, 213, 33, 190, 168, 122, 125, 189, 213, 20, 154, 189, 140, 174, 113, 62, 168, 39, 33, 62, 61, 246, 132, 61, 51, 29, 3, 190, 73, 47, 147, 62, 20, 72, 1, 190, 104, 118, 3, 62, 143, 163, 141, 61, 117, 199, 19, 62, 56, 157, 229, 60, 92, 70, 83, 189, 103, 106, 232, 189, 77, 55, 41, 190, 82, 102, 238, 189, 54, 192, 104, 61, 213, 1, 136, 61, 90, 36, 139, 187, 36, 73, 128, 189, 141, 38, 193, 61, 215, 194, 3, 190, 231, 28, 3, 62, 48, 113, 27, 190, 241, 252, 237, 59, 178, 79, 76, 190, 238, 88, 242, 189, 141, 139, 213, 187, 237, 234, 247, 61, 225, 235, 162, 189, 169, 154, 8, 189, 132, 199, 4, 190, 136, 153, 1, 188, 84, 211, 77, 190, 207, 150, 17, 190, 192, 161, 155, 189, 69, 198, 158, 59, 26, 200, 216, 60, 149, 226, 25, 190, 36, 6, 241, 189, 107, 211, 8, 189, 162, 23, 13, 189, 236, 163, 213, 188, 245, 79, 142, 60, 213, 55, 5, 61, 43, 101, 37, 62, 68, 247, 149, 188, 228, 177, 77, 61, 176, 81, 110, 61, 49, 118, 3, 190, 72, 174, 92, 190, 128, 225, 5, 190, 71, 79, 161, 189, 172, 4, 72, 190, 233, 85, 219, 60, 74, 70, 43, 190, 12, 27, 34, 190, 3, 34, 106, 61, 153, 189, 226, 189, 167, 115, 6, 62, 246, 107, 235, 61, 145, 3, 152, 190, 145, 222, 68, 60, 77, 188, 46, 62, 178, 108, 6, 62, 188, 63, 25, 190, 213, 70, 173, 61, 214, 108, 230, 189, 175, 120, 176, 61, 169, 43, 12, 61, 141, 170, 165, 190, 102, 50, 28, 62, 99, 231, 179, 61, 72, 10, 59, 189, 186, 119, 151, 190, 44, 232, 42, 62, 231, 161, 52, 190, 166, 142, 175, 61, 240, 199, 141, 62, 15, 109, 48, 62, 97, 185, 47, 62, 198, 117, 173, 59, 133, 113, 5, 190, 117, 80, 202, 62, 74, 36, 56, 62, 230, 4, 215, 188, 19, 168, 2, 190, 242, 200, 40, 189, 237, 83, 148, 61, 162, 118, 85, 190, 51, 155, 177, 188, 230, 42, 203, 61, 196, 108, 12, 190, 241, 74, 194, 61, 54, 224, 177, 61, 200, 249, 30, 190, 244, 9, 196, 61, 10, 20, 120, 190, 122, 203, 94, 61, 58, 131, 44, 62, 198, 12, 66, 61, 235, 34, 211, 189, 80, 147, 45, 190, 182, 172, 128, 62, 133, 39, 108, 190, 220, 232, 190, 189, 142, 157, 175, 61, 39, 218, 65, 61, 174, 18, 198, 61, 136, 44, 54, 62, 100, 218, 20, 190, 225, 203, 239, 189, 236, 50, 27, 189, 152, 108, 49, 188, 171, 17, 184, 62, 132, 23, 220, 61, 172, 111, 162, 190, 123, 246, 52, 190, 237, 31, 37, 62, 58, 183, 125, 62, 214, 210, 182, 62, 166, 24, 82, 62, 83, 232, 40, 62, 174, 112, 178, 188, 1, 168, 203, 188, 183, 150, 230, 62, 249, 18, 163, 189, 93, 173, 64, 189, 228, 56, 145, 61, 67, 143, 240, 61, 100, 13, 55, 62, 122, 169, 196, 62, 137, 120, 164, 189, 42, 235, 200, 189, 132, 47, 178, 62, 185, 211, 19, 190, 179, 89, 4, 190, 134, 217, 61, 189, 2, 225, 1, 190, 127, 74, 16, 190, 38, 243, 35, 190, 115, 223, 222, 188, 136, 233, 223, 189, 81, 126, 3, 190, 171, 12, 252, 189, 56, 160, 43, 190, 115, 200, 25, 190, 252, 21, 20, 189, 225, 69, 249, 61, 19, 177, 26, 60, 100, 70, 118, 189, 150, 204, 158, 189, 243, 117, 186, 59, 163, 157, 51, 190, 90, 155, 247, 189, 36, 198, 255, 189, 158, 130, 214, 60, 112, 185, 157, 189, 1, 217, 80, 188, 2, 20, 97, 60, 172, 142, 153, 60, 226, 115, 226, 60, 139, 116, 239, 60, 77, 13, 40, 190, 193, 129, 48, 62, 120, 155, 178, 59, 121, 11, 31, 61, 73, 85, 99, 189, 172, 79, 9, 62, 255, 158, 41, 62, 5, 35, 1, 62, 40, 181, 255, 188, 246, 6, 74, 61, 204, 86, 8, 190, 158, 173, 11, 190, 239, 65, 76, 190, 21, 194, 184, 187, 232, 112, 150, 189, 108, 148, 86, 59, 57, 195, 58, 190, 127, 163, 1, 62, 3, 2, 133, 189, 167, 149, 112, 188, 24, 227, 160, 60, 207, 73, 169, 61, 10, 228, 79, 190, 150, 163, 162, 189, 145, 121, 15, 190, 106, 147, 200, 189, 166, 23, 5, 190, 162, 94, 225, 61, 82, 185, 209, 189, 68, 202, 230, 188, 218, 52, 79, 61, 27, 139, 146, 189, 26, 222, 136, 189, 246, 108, 240, 60, 67, 193, 155, 60, 108, 32, 26, 188, 109, 107, 63, 61, 66, 210, 17, 62, 101, 164, 7, 62, 210, 254, 204, 189, 18, 222, 88, 189, 190, 35, 124, 61, 254, 1, 136, 61, 62, 147, 226, 189, 20, 54, 63, 190, 184, 166, 95, 61, 216, 79, 112, 60, 43, 105, 184, 61, 2, 174, 22, 190, 200, 236, 245, 189, 60, 79, 113, 61, 75, 41, 132, 189, 85, 41, 20, 189, 91, 133, 254, 59, 227, 8, 119, 61, 167, 160, 133, 60, 130, 29, 101, 190, 242, 54, 8, 62, 55, 95, 10, 190, 168, 204, 195, 189, 29, 220, 222, 61, 111, 234, 208, 189, 171, 120, 229, 59, 41, 208, 221, 61, 190, 24, 114, 190, 233, 186, 188, 60, 130, 250, 11, 60, 122, 212, 187, 189, 39, 203, 38, 59, 164, 181, 42, 190, 235, 38, 82, 61, 9, 177, 219, 188, 252, 239, 4, 190, 162, 169, 38, 61, 193, 98, 22, 61, 182, 3, 105, 60, 214, 154, 160, 60, 41, 39, 4, 61, 38, 227, 67, 190, 86, 238, 182, 61, 126, 120, 173, 188, 93, 122, 65, 190, 98, 173, 23, 62, 73, 60, 167, 189, 203, 110, 33, 189, 123, 210, 232, 61, 195, 253, 249, 189, 2, 152, 62, 61, 23, 121, 213, 61, 79, 244, 23, 190, 197, 61, 26, 62, 226, 167, 253, 189, 192, 211, 173, 61, 126, 56, 28, 62, 32, 161, 250, 61, 147, 193, 212, 189, 227, 152, 3, 62, 214, 117, 148, 61, 109, 26, 195, 189, 1, 25, 163, 189, 205, 35, 84, 60, 173, 160, 19, 62, 43, 180, 215, 61, 19, 38, 123, 189, 58, 219, 239, 61, 204, 35, 105, 189, 74, 4, 30, 188, 153, 59, 6, 189, 5, 128, 217, 60, 42, 230, 45, 190, 138, 169, 27, 189, 84, 240, 240, 189, 228, 94, 197, 61, 147, 195, 4, 190, 250, 35, 239, 189, 232, 35, 29, 61, 236, 135, 223, 189, 94, 137, 37, 188, 31, 139, 166, 189, 3, 195, 231, 61, 161, 250, 12, 190, 154, 214, 212, 60, 242, 89, 234, 59, 246, 93, 207, 188, 68, 174, 133, 188, 110, 244, 187, 189, 14, 112, 49, 190, 98, 174, 20, 190, 6, 233, 110, 188, 204, 158, 162, 189, 103, 83, 203, 189, 133, 51, 84, 189, 20, 189, 183, 189, 140, 14, 42, 190, 199, 38, 242, 59, 234, 242, 30, 62, 221, 61, 30, 61, 161, 106, 167, 61, 147, 11, 45, 190, 30, 90, 176, 188, 197, 94, 27, 62, 80, 19, 26, 189, 143, 129, 111, 61, 225, 178, 111, 62, 25, 183, 52, 189, 63, 217, 43, 189, 140, 228, 102, 62, 141, 165, 219, 61, 99, 16, 5, 61, 122, 99, 252, 60, 132, 254, 111, 189, 84, 106, 61, 62, 40, 65, 97, 189, 108, 205, 73, 62, 235, 86, 89, 62, 19, 196, 1, 188, 94, 230, 26, 189, 6, 205, 246, 189, 152, 17, 236, 61, 147, 193, 252, 61, 185, 64, 135, 189, 138, 146, 140, 188, 4, 36, 235, 186, 2, 217, 34, 62, 244, 4, 245, 59, 31, 177, 170, 188, 213, 186, 47, 62, 114, 133, 85, 62, 175, 118, 155, 187, 54, 82, 172, 61, 165, 124, 209, 189, 30, 143, 12, 61, 239, 74, 151, 189, 77, 182, 214, 61, 187, 23, 164, 188, 164, 87, 215, 60, 16, 214, 58, 60, 48, 63, 15, 189, 102, 161, 197, 188, 81, 48, 130, 60, 209, 83, 117, 190, 164, 132, 23, 190, 70, 252, 148, 61, 168, 3, 23, 190, 191, 68, 180, 190, 176, 130, 80, 189, 71, 96, 31, 62, 35, 166, 180, 189, 249, 57, 167, 59, 91, 120, 156, 190, 189, 76, 44, 189, 26, 241, 48, 189, 244, 53, 139, 60, 37, 175, 223, 61, 153, 54, 129, 190, 128, 213, 79, 62, 52, 144, 106, 190, 30, 98, 18, 190, 18, 157, 65, 62, 154, 33, 55, 62, 42, 123, 211, 189, 164, 0, 106, 189, 66, 190, 9, 62, 238, 23, 242, 61, 26, 233, 8, 190, 134, 187, 5, 62, 11, 27, 201, 61, 12, 19, 49, 189, 126, 143, 15, 190, 83, 36, 147, 189, 164, 231, 50, 190, 24, 224, 17, 190, 110, 207, 7, 62, 225, 51, 4, 62, 163, 79, 32, 190, 94, 109, 41, 190, 21, 22, 95, 60, 208, 67, 31, 62, 47, 1, 91, 62, 65, 145, 124, 190, 162, 104, 23, 61, 8, 17, 47, 190, 220, 155, 193, 189, 33, 190, 33, 190, 43, 45, 182, 61, 93, 13, 230, 61, 158, 62, 104, 190, 133, 79, 31, 62, 242, 0, 194, 61, 58, 197, 179, 61, 155, 32, 173, 189, 161, 146, 29, 62, 108, 132, 75, 60, 81, 131, 51, 62, 225, 248, 27, 190, 155, 251, 194, 61, 219, 203, 66, 189, 213, 238, 167, 61, 63, 210, 25, 187, 90, 98, 25, 62, 105, 83, 21, 190, 4, 1, 134, 189, 19, 25, 34, 190, 96, 79, 29, 189, 87, 3, 210, 61, 176, 37, 188, 189, 221, 160, 144, 189, 86, 203, 164, 188, 5, 149, 206, 189, 109, 5, 21, 189, 193, 22, 49, 62, 197, 144, 76, 60, 180, 132, 39, 190, 46, 0, 187, 61, 111, 117, 21, 190, 203, 119, 0, 190, 178, 144, 23, 61, 22, 133, 83, 60, 11, 233, 206, 189, 113, 140, 201, 61, 205, 80, 193, 61, 137, 227, 104, 59, 190, 100, 198, 188, 52, 226, 54, 62, 239, 174, 220, 188, 27, 250, 200, 188, 175, 130, 215, 189, 33, 242, 22, 62, 255, 65, 132, 189, 46, 13, 59, 62, 5, 211, 104, 190, 209, 0, 155, 61, 229, 200, 151, 61, 229, 92, 26, 62, 227, 224, 4, 190, 27, 59, 116, 189, 195, 118, 13, 190, 208, 50, 222, 61, 148, 219, 211, 189, 166, 27, 215, 60, 62, 107, 227, 189, 150, 242, 9, 61, 24, 59, 159, 61, 229, 102, 80, 190, 80, 25, 52, 62, 67, 129, 142, 190, 194, 18, 62, 62, 68, 87, 70, 190, 125, 194, 92, 189, 75, 114, 59, 62, 40, 63, 237, 61, 103, 31, 160, 189, 236, 100, 138, 189, 164, 221, 112, 61, 196, 14, 155, 61, 251, 75, 147, 61, 4, 46, 39, 188, 62, 105, 46, 190, 233, 130, 163, 61, 170, 182, 41, 62, 179, 32, 15, 190, 119, 142, 243, 189, 166, 71, 252, 61, 223, 49, 223, 60, 113, 104, 22, 62, 239, 206, 16, 189, 80, 126, 87, 61, 146, 150, 221, 59, 151, 148, 173, 61, 229, 165, 248, 188, 194, 138, 144, 189, 123, 159, 234, 189, 212, 142, 19, 62, 129, 61, 84, 190, 172, 182, 37, 61, 155, 252, 132, 61, 129, 207, 47, 190, 167, 216, 59, 190, 89, 36, 173, 189, 206, 208, 243, 189, 82, 58, 56, 190, 61, 37, 48, 61, 37, 178, 68, 190, 22, 148, 26, 190, 149, 46, 218, 61, 176, 96, 122, 190, 11, 56, 68, 190, 2, 180, 145, 190, 159, 247, 106, 188, 228, 31, 254, 189, 10, 121, 67, 62, 39, 129, 137, 189, 20, 106, 156, 61, 192, 205, 90, 189, 86, 221, 45, 190, 188, 135, 131, 190, 122, 123, 180, 190, 200, 58, 193, 189, 12, 54, 231, 189, 146, 144, 107, 62, 201, 228, 190, 61, 42, 176, 26, 191, 178, 63, 5, 188, 153, 253, 40, 62, 192, 218, 179, 189, 17, 26, 157, 189, 75, 178, 168, 188, 136, 143, 0, 190, 100, 247, 134, 190, 2, 170, 43, 62, 36, 113, 236, 189, 82, 63, 60, 189, 211, 240, 211, 189, 131, 154, 1, 190, 117, 152, 48, 62, 202, 96, 93, 62, 177, 45, 132, 190, 58, 150, 141, 189, 190, 105, 95, 190, 170, 137, 28, 189, 68, 75, 196, 189, 242, 86, 56, 61, 217, 248, 224, 61, 196, 107, 85, 189, 62, 52, 199, 61, 132, 79, 127, 61, 129, 253, 52, 62, 239, 89, 82, 190, 161, 125, 52, 62, 233, 190, 74, 190, 226, 243, 60, 190, 182, 176, 114, 61, 89, 176, 178, 189, 209, 134, 10, 190, 102, 18, 220, 59, 179, 68, 10, 190, 184, 178, 23, 189, 106, 8, 8, 62, 210, 4, 3, 190, 45, 29, 142, 61, 227, 2, 172, 189, 73, 128, 8, 62, 236, 105, 70, 190, 25, 192, 11, 190, 0, 76, 86, 190, 173, 207, 124, 60, 227, 93, 32, 190, 26, 79, 26, 190, 207, 158, 184, 59, 168, 90, 44, 62, 163, 83, 164, 187, 182, 68, 14, 190, 237, 196, 26, 62, 154, 220, 182, 61, 110, 5, 59, 190, 205, 136, 159, 189, 198, 53, 50, 190, 45, 102, 79, 189, 73, 38, 131, 189, 247, 70, 31, 188, 74, 45, 41, 190, 11, 49, 159, 60, 200, 172, 13, 190, 18, 32, 57, 190, 186, 130, 124, 61, 53, 253, 21, 190, 27, 252, 125, 61, 98, 108, 12, 60, 247, 244, 50, 190, 235, 74, 226, 189, 236, 96, 176, 188, 226, 177, 25, 62, 110, 17, 190, 57, 178, 192, 157, 61, 117, 135, 48, 62, 43, 243, 36, 60, 187, 154, 73, 61, 70, 71, 158, 189, 225, 231, 47, 60, 145, 55, 245, 189, 218, 233, 219, 60, 199, 131, 13, 61, 157, 165, 245, 61, 5, 83, 152, 61, 113, 160, 99, 188, 13, 43, 195, 189, 151, 199, 37, 61, 91, 201, 180, 189, 233, 61, 244, 189, 217, 99, 9, 59, 171, 67, 94, 188, 253, 38, 94, 61, 22, 183, 106, 189, 125, 193, 31, 190, 65, 102, 228, 188, 165, 119, 22, 190, 158, 110, 53, 61, 2, 112, 178, 60, 172, 213, 8, 190, 75, 251, 33, 190, 83, 132, 36, 189, 224, 68, 23, 61, 163, 57, 93, 189, 206, 216, 243, 61, 83, 21, 44, 190, 199, 151, 212, 189, 211, 239, 208, 189, 72, 209, 7, 62, 118, 155, 42, 190, 202, 134, 232, 188, 221, 190, 64, 61, 144, 71, 144, 189, 247, 149, 86, 189, 125, 201, 45, 189, 60, 120, 181, 61, 37, 91, 100, 190, 9, 80, 134, 61, 213, 207, 7, 190, 77, 15, 10, 189, 83, 14, 12, 61, 129, 112, 97, 61, 63, 11, 16, 62, 99, 86, 254, 189, 182, 145, 20, 62, 114, 67, 91, 62, 31, 128, 128, 62, 246, 97, 156, 61, 119, 10, 231, 189, 207, 112, 15, 190, 28, 171, 192, 61, 184, 137, 214, 188, 55, 130, 252, 61, 204, 145, 235, 61, 17, 201, 3, 62, 242, 235, 78, 190, 50, 142, 182, 61, 232, 86, 147, 61, 204, 70, 126, 60, 94, 219, 211, 61, 137, 221, 144, 61, 177, 190, 87, 60, 134, 232, 182, 189, 78, 117, 33, 62, 213, 39, 252, 189, 79, 95, 72, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 232, 42, 189, 156, 0, 131, 62, 244, 52, 49, 62, 71, 33, 24, 190, 18, 67, 108, 61, 64, 132, 78, 61, 77, 249, 138, 62, 118, 96, 53, 189, 122, 161, 14, 62, 213, 29, 11, 62, 162, 190, 93, 61, 24, 105, 101, 61, 127, 94, 173, 60, 143, 76, 163, 61, 106, 250, 217, 60, 35, 116, 147, 189, 75, 61, 12, 190, 81, 23, 61, 190, 43, 182, 86, 190, 41, 246, 89, 61, 224, 101, 242, 188, 44, 202, 165, 187, 35, 178, 218, 189, 96, 14, 209, 189, 110, 121, 150, 189, 117, 216, 163, 189, 62, 67, 196, 188, 1, 6, 222, 61, 31, 165, 8, 190, 152, 224, 156, 189, 198, 207, 17, 60, 52, 221, 119, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 216, 176, 60, 216, 118, 43, 190, 186, 50, 214, 62, 187, 90, 201, 61, 38, 96, 205, 189, 51, 214, 24, 190, 94, 167, 220, 190, 31, 169, 142, 62, 171, 153, 132, 190, 240, 76, 22, 62, 8, 68, 56, 62, 213, 234, 44, 62, 16, 148, 146, 61, 251, 20, 6, 190, 223, 207, 42, 190, 61, 238, 175, 62, 86, 79, 251, 61, 81, 160, 100, 61, 43, 186, 37, 189, 88, 51, 247, 188, 93, 105, 63, 61, 59, 222, 55, 62, 218, 90, 146, 188, 161, 107, 108, 62, 99, 87, 7, 62, 224, 17, 77, 61, 58, 231, 46, 189, 8, 238, 177, 62, 42, 163, 37, 62, 72, 11, 203, 189, 157, 139, 23, 190, 165, 193, 69, 190, 175, 94, 226, 189, 247, 44, 7, 190, 94, 198, 236, 59, 18, 190, 63, 189, 238, 157, 142, 190, 25, 31, 204, 186, 3, 200, 191, 59, 123, 150, 237, 60, 221, 159, 117, 190, 84, 173, 23, 190, 110, 75, 21, 190, 68, 105, 72, 190, 200, 84, 125, 61, 129, 83, 215, 59, 35, 52, 159, 62, 171, 196, 114, 61, 136, 58, 25, 62, 147, 58, 31, 62, 174, 140, 79, 61, 131, 5, 217, 189, 116, 13, 8, 62, 75, 150, 208, 189, 16, 137, 40, 62, 240, 22, 133, 61, 150, 158, 172, 189, 42, 220, 32, 62, 22, 174, 186, 61, 31, 113, 157, 61, 241, 81, 101, 189, 118, 21, 175, 189, 149, 115, 251, 61, 115, 68, 245, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {66, 45, 2, 190, 143, 101, 25, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {251, 100, 50, 63, 207, 129, 27, 189, 28, 27, 113, 59};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {128, 161, 192, 187, 180, 163, 114, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0005/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}