// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {36, 187, 19, 62, 113, 55, 71, 63, 200, 138, 194, 190, 49, 255, 134, 63, 42, 50, 22, 191, 135, 79, 231, 190, 171, 2, 57, 190, 132, 209, 164, 188, 197, 235, 142, 62, 229, 121, 122, 190, 240, 200, 167, 63, 255, 203, 216, 62, 60, 66, 54, 191, 51, 182, 58, 63, 9, 204, 158, 62, 122, 249, 43, 191, 148, 12, 88, 191, 105, 125, 32, 190, 137, 40, 50, 63, 17, 6, 167, 63, 35, 76, 174, 62, 206, 130, 19, 190, 57, 145, 32, 62, 130, 11, 8, 63, 215, 49, 251, 62, 205, 92, 114, 63, 185, 125, 166, 62, 39, 127, 166, 62, 188, 98, 50, 63, 169, 252, 149, 190, 68, 35, 23, 63, 25, 114, 45, 63, 103, 112, 234, 62, 230, 218, 65, 63, 68, 99, 83, 63, 119, 137, 181, 62, 193, 101, 132, 62, 199, 17, 152, 62, 235, 249, 182, 190, 231, 105, 244, 188, 235, 159, 157, 190, 234, 54, 217, 186, 130, 209, 172, 190, 216, 186, 135, 190, 160, 41, 171, 62, 182, 33, 211, 189, 14, 160, 48, 63, 197, 141, 216, 62, 55, 51, 207, 190, 89, 134, 202, 62, 203, 133, 129, 62, 65, 236, 54, 62, 209, 235, 42, 63, 57, 108, 19, 62, 147, 188, 193, 190, 129, 174, 112, 62, 212, 93, 17, 191, 150, 27, 14, 63, 37, 133, 143, 63, 177, 176, 201, 62, 247, 225, 136, 188, 104, 49, 173, 191, 10, 223, 193, 190, 250, 245, 161, 189, 89, 241, 174, 62, 223, 93, 130, 189, 7, 226, 229, 62, 16, 93, 225, 189, 151, 32, 219, 62, 164, 172, 245, 190, 113, 105, 180, 190, 173, 23, 113, 62, 96, 48, 142, 190, 204, 94, 147, 63, 169, 58, 133, 62, 196, 240, 186, 190, 128, 224, 42, 63, 255, 57, 7, 62, 227, 112, 162, 189, 191, 141, 119, 191, 38, 13, 133, 190, 147, 177, 229, 190, 12, 54, 43, 63, 218, 132, 229, 61, 150, 154, 170, 191, 47, 215, 144, 190, 207, 159, 145, 189, 151, 155, 54, 63, 12, 237, 85, 191, 164, 148, 228, 190, 3, 102, 166, 62, 57, 127, 113, 191, 166, 67, 219, 62, 246, 12, 254, 62, 136, 197, 171, 190, 135, 166, 147, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {118, 204, 15, 191, 123, 215, 15, 62, 3, 42, 10, 191, 178, 247, 142, 61, 90, 249, 240, 190, 151, 59, 69, 62, 72, 208, 17, 190, 84, 168, 19, 190, 8, 224, 171, 190, 243, 189, 6, 63, 43, 21, 168, 190, 153, 50, 136, 61, 176, 221, 216, 62, 41, 218, 212, 190, 164, 197, 219, 190, 36, 187, 11, 191, 197, 221, 180, 62, 142, 211, 186, 62, 222, 242, 137, 61, 127, 143, 132, 190, 36, 98, 172, 61, 238, 148, 128, 62, 126, 98, 67, 63, 26, 236, 206, 190, 248, 96, 210, 188, 207, 167, 218, 62, 170, 78, 223, 189, 252, 127, 172, 62, 141, 3, 131, 62, 2, 91, 111, 190, 168, 7, 152, 188, 150, 254, 14, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 78, 198, 60, 195, 182, 161, 62, 251, 254, 22, 190, 85, 168, 12, 60, 127, 87, 133, 62, 234, 241, 121, 189, 221, 89, 223, 190, 86, 184, 228, 61, 182, 156, 163, 190, 177, 199, 108, 190, 168, 136, 135, 190, 111, 42, 42, 190, 204, 183, 213, 61, 82, 24, 51, 190, 106, 12, 171, 61, 20, 184, 155, 189, 178, 16, 7, 62, 163, 53, 167, 62, 138, 159, 236, 190, 53, 74, 215, 190, 63, 237, 250, 190, 236, 90, 219, 186, 120, 248, 129, 62, 109, 64, 248, 190, 41, 221, 144, 62, 205, 67, 74, 62, 189, 230, 67, 191, 229, 112, 21, 190, 139, 113, 131, 62, 225, 5, 62, 62, 8, 13, 254, 59, 22, 90, 92, 189, 108, 96, 18, 62, 99, 161, 193, 62, 56, 189, 226, 190, 118, 59, 48, 190, 195, 208, 59, 62, 42, 104, 221, 60, 227, 89, 249, 190, 110, 173, 137, 62, 161, 19, 240, 190, 105, 197, 42, 189, 41, 26, 118, 190, 204, 54, 203, 189, 39, 32, 200, 61, 160, 119, 153, 189, 3, 226, 36, 62, 53, 7, 236, 190, 27, 40, 155, 59, 196, 186, 154, 189, 177, 144, 156, 190, 188, 164, 4, 191, 63, 105, 5, 190, 187, 186, 209, 188, 208, 233, 168, 62, 81, 61, 221, 189, 187, 117, 121, 190, 72, 126, 159, 190, 252, 137, 81, 190, 0, 40, 93, 190, 112, 202, 155, 189, 230, 153, 174, 62, 177, 177, 170, 62, 2, 195, 46, 62, 14, 240, 84, 190, 50, 245, 61, 62, 78, 162, 31, 62, 217, 83, 15, 61, 210, 150, 168, 190, 11, 49, 245, 189, 237, 40, 35, 61, 17, 228, 2, 60, 100, 10, 4, 61, 68, 159, 165, 62, 236, 174, 12, 62, 12, 188, 68, 62, 190, 60, 37, 62, 32, 1, 28, 62, 108, 127, 244, 189, 70, 185, 129, 189, 90, 193, 217, 61, 0, 177, 155, 62, 89, 144, 33, 62, 188, 215, 30, 62, 215, 102, 162, 189, 146, 68, 83, 60, 6, 194, 70, 187, 229, 18, 30, 62, 226, 254, 125, 190, 8, 78, 113, 62, 29, 213, 63, 62, 169, 142, 162, 189, 225, 205, 170, 189, 65, 43, 125, 189, 10, 158, 250, 189, 182, 195, 152, 190, 156, 237, 135, 61, 135, 49, 0, 190, 127, 108, 187, 61, 206, 164, 61, 190, 92, 198, 2, 62, 198, 89, 225, 189, 68, 223, 47, 190, 204, 8, 6, 62, 214, 238, 18, 62, 42, 10, 87, 190, 6, 183, 222, 61, 218, 11, 14, 61, 230, 163, 237, 61, 194, 164, 37, 62, 249, 235, 236, 189, 74, 132, 198, 189, 115, 17, 180, 189, 90, 20, 2, 62, 57, 248, 5, 62, 212, 67, 91, 189, 131, 30, 30, 61, 203, 81, 196, 187, 37, 100, 63, 190, 92, 178, 62, 190, 103, 96, 29, 62, 218, 194, 3, 186, 33, 87, 234, 61, 195, 191, 156, 61, 156, 17, 20, 190, 183, 236, 40, 190, 8, 198, 226, 61, 59, 247, 154, 188, 184, 240, 220, 189, 126, 215, 19, 62, 68, 215, 241, 59, 153, 9, 148, 190, 104, 44, 94, 191, 117, 32, 147, 62, 168, 98, 82, 62, 141, 76, 195, 60, 230, 79, 226, 188, 201, 143, 5, 62, 19, 109, 3, 62, 135, 21, 215, 60, 163, 44, 142, 189, 13, 217, 195, 189, 68, 220, 164, 190, 6, 72, 71, 62, 40, 8, 99, 190, 192, 240, 179, 61, 215, 143, 211, 61, 190, 131, 176, 61, 86, 16, 162, 189, 101, 15, 41, 61, 3, 70, 45, 62, 214, 169, 4, 190, 122, 75, 44, 191, 154, 148, 131, 189, 59, 32, 233, 61, 15, 16, 134, 189, 163, 33, 82, 61, 13, 52, 37, 190, 234, 15, 65, 189, 228, 33, 57, 61, 203, 139, 73, 190, 54, 252, 148, 62, 216, 118, 38, 61, 150, 13, 215, 188, 140, 50, 7, 62, 252, 62, 118, 60, 63, 177, 3, 191, 37, 189, 88, 62, 240, 200, 243, 190, 54, 100, 191, 188, 197, 160, 139, 190, 75, 39, 228, 189, 153, 122, 25, 190, 180, 151, 5, 62, 143, 150, 10, 62, 79, 202, 178, 190, 51, 168, 32, 62, 91, 164, 99, 62, 71, 91, 41, 61, 211, 30, 208, 190, 191, 185, 162, 61, 196, 187, 175, 61, 239, 21, 26, 62, 138, 143, 71, 190, 5, 78, 249, 189, 102, 51, 22, 62, 178, 22, 91, 190, 14, 49, 132, 190, 169, 35, 119, 62, 76, 43, 133, 62, 152, 23, 56, 62, 125, 57, 245, 61, 228, 153, 141, 189, 251, 237, 153, 189, 61, 142, 242, 61, 95, 6, 200, 191, 43, 195, 255, 191, 13, 100, 206, 62, 230, 212, 66, 191, 215, 110, 26, 191, 212, 170, 172, 189, 79, 165, 176, 188, 241, 248, 67, 60, 202, 67, 173, 190, 15, 146, 254, 190, 68, 88, 36, 190, 208, 148, 30, 191, 49, 181, 166, 188, 31, 63, 219, 60, 165, 120, 190, 191, 253, 35, 116, 62, 162, 10, 205, 190, 242, 47, 77, 62, 49, 114, 210, 61, 170, 123, 110, 191, 160, 86, 250, 62, 11, 96, 76, 191, 84, 227, 17, 62, 122, 139, 48, 61, 100, 253, 80, 62, 169, 70, 140, 62, 1, 97, 153, 190, 1, 177, 91, 191, 135, 59, 6, 62, 222, 16, 135, 188, 32, 78, 4, 190, 31, 154, 225, 188, 241, 31, 60, 61, 227, 107, 239, 61, 208, 33, 196, 189, 4, 97, 139, 189, 172, 151, 21, 61, 191, 195, 7, 190, 122, 20, 18, 60, 199, 70, 251, 189, 250, 60, 57, 190, 171, 54, 160, 189, 60, 32, 218, 189, 249, 116, 235, 188, 86, 108, 155, 189, 84, 228, 190, 189, 36, 139, 1, 62, 28, 142, 241, 189, 241, 181, 100, 61, 80, 200, 18, 62, 223, 214, 211, 189, 130, 203, 59, 189, 105, 71, 181, 61, 47, 19, 243, 188, 187, 102, 69, 190, 139, 74, 129, 188, 190, 55, 55, 61, 113, 73, 252, 188, 159, 45, 6, 190, 183, 66, 87, 190, 219, 96, 159, 61, 102, 247, 9, 191, 80, 78, 22, 62, 200, 168, 3, 62, 144, 63, 60, 190, 35, 181, 210, 61, 98, 141, 230, 61, 182, 206, 182, 189, 171, 64, 191, 189, 93, 89, 77, 190, 48, 80, 228, 188, 47, 252, 221, 189, 244, 208, 135, 61, 6, 197, 222, 189, 215, 203, 98, 189, 171, 66, 137, 61, 105, 125, 35, 190, 218, 221, 4, 62, 100, 147, 144, 190, 204, 61, 146, 188, 66, 155, 20, 190, 133, 20, 228, 61, 50, 56, 89, 188, 103, 64, 6, 62, 102, 234, 40, 62, 224, 83, 152, 190, 155, 10, 170, 60, 65, 197, 139, 61, 179, 114, 56, 189, 34, 231, 81, 189, 35, 83, 133, 189, 176, 30, 228, 61, 125, 213, 1, 190, 27, 225, 65, 62, 201, 203, 151, 62, 147, 204, 45, 62, 206, 88, 59, 190, 249, 63, 40, 190, 0, 163, 93, 188, 77, 69, 164, 190, 9, 93, 4, 62, 82, 197, 250, 189, 3, 255, 136, 189, 254, 239, 171, 61, 130, 22, 220, 188, 3, 200, 7, 62, 152, 223, 6, 189, 168, 132, 30, 62, 48, 168, 105, 61, 139, 99, 126, 190, 220, 220, 182, 62, 23, 50, 230, 188, 101, 51, 184, 190, 193, 8, 66, 62, 0, 207, 1, 190, 227, 114, 152, 61, 94, 64, 60, 62, 137, 135, 142, 190, 154, 58, 133, 191, 227, 101, 209, 61, 85, 231, 173, 191, 222, 90, 4, 191, 204, 63, 171, 62, 152, 179, 44, 62, 226, 125, 18, 62, 178, 223, 156, 61, 43, 121, 121, 62, 8, 103, 20, 190, 44, 212, 241, 189, 96, 141, 153, 62, 13, 138, 6, 61, 165, 162, 149, 190, 228, 49, 69, 61, 17, 205, 146, 61, 205, 67, 231, 190, 179, 251, 117, 60, 66, 254, 132, 190, 64, 237, 60, 62, 236, 53, 33, 190, 179, 166, 131, 62, 155, 176, 12, 190, 216, 161, 106, 62, 81, 121, 82, 190, 252, 116, 200, 190, 70, 157, 38, 190, 195, 157, 219, 62, 190, 15, 207, 190, 172, 167, 32, 62, 124, 207, 215, 60, 251, 181, 0, 190, 65, 240, 231, 189, 222, 98, 25, 63, 148, 92, 225, 189, 224, 165, 243, 186, 40, 236, 90, 62, 157, 233, 170, 62, 254, 230, 74, 62, 121, 32, 147, 190, 112, 182, 74, 190, 119, 39, 5, 190, 81, 119, 147, 191, 147, 179, 142, 191, 65, 22, 151, 62, 208, 98, 196, 61, 30, 129, 88, 61, 187, 64, 91, 62, 12, 216, 73, 62, 75, 85, 173, 190, 205, 17, 148, 189, 158, 6, 113, 62, 83, 34, 26, 187, 201, 248, 48, 191, 24, 88, 66, 190, 120, 205, 49, 190, 208, 167, 12, 62, 135, 4, 131, 61, 210, 252, 23, 62, 202, 253, 214, 188, 90, 61, 28, 189, 157, 51, 139, 190, 93, 173, 145, 62, 155, 81, 133, 191, 239, 95, 215, 60, 142, 102, 41, 61, 148, 61, 5, 189, 222, 229, 63, 62, 44, 143, 111, 190, 123, 54, 115, 190, 167, 129, 102, 190, 212, 145, 143, 188, 209, 75, 175, 189, 22, 207, 5, 190, 253, 118, 160, 191, 85, 101, 0, 192, 19, 75, 163, 62, 170, 146, 58, 62, 145, 120, 155, 190, 210, 141, 82, 188, 21, 157, 87, 62, 179, 89, 96, 62, 200, 0, 48, 62, 36, 194, 78, 190, 190, 162, 171, 61, 238, 238, 106, 191, 86, 246, 148, 189, 189, 241, 13, 60, 51, 245, 218, 61, 250, 150, 161, 187, 79, 51, 69, 62, 253, 206, 98, 62, 142, 122, 29, 189, 199, 82, 179, 60, 148, 49, 205, 62, 197, 212, 75, 191, 92, 204, 186, 61, 189, 235, 115, 187, 149, 57, 140, 189, 72, 69, 159, 188, 195, 115, 69, 190, 128, 215, 56, 190, 221, 71, 164, 188, 250, 153, 226, 61, 252, 94, 156, 61, 123, 75, 47, 62, 158, 2, 88, 62, 85, 204, 224, 188, 124, 203, 204, 61, 230, 181, 186, 61, 148, 198, 109, 62, 46, 236, 12, 190, 71, 215, 172, 61, 31, 75, 137, 190, 234, 125, 4, 189, 75, 116, 17, 189, 46, 232, 10, 189, 198, 215, 90, 62, 65, 78, 249, 188, 253, 188, 94, 62, 76, 95, 137, 190, 115, 178, 175, 190, 93, 182, 77, 190, 83, 240, 24, 63, 187, 149, 93, 190, 187, 228, 1, 188, 138, 208, 133, 62, 58, 43, 132, 62, 206, 252, 161, 61, 52, 119, 213, 62, 223, 80, 179, 60, 222, 67, 34, 189, 20, 214, 69, 62, 145, 125, 249, 61, 244, 178, 1, 61, 163, 33, 116, 190, 233, 199, 19, 191, 128, 215, 105, 190, 70, 107, 204, 190, 101, 58, 182, 189, 36, 186, 143, 62, 32, 64, 106, 190, 222, 213, 177, 190, 9, 5, 197, 190, 117, 171, 34, 189, 86, 223, 183, 190, 74, 211, 244, 190, 185, 221, 155, 61, 221, 251, 160, 60, 3, 255, 229, 62, 27, 222, 1, 191, 70, 197, 141, 189, 186, 68, 112, 190, 3, 25, 150, 62, 7, 78, 7, 191, 112, 191, 7, 62, 234, 167, 161, 61, 112, 255, 186, 190, 93, 6, 88, 190, 43, 68, 51, 190, 235, 104, 108, 62, 181, 13, 80, 62, 35, 127, 159, 62, 155, 237, 129, 62, 111, 197, 218, 190, 38, 135, 146, 62, 234, 154, 15, 191, 179, 144, 218, 189, 171, 110, 133, 190, 235, 172, 111, 190, 6, 33, 138, 190, 43, 234, 204, 190, 24, 157, 190, 62, 168, 109, 111, 62, 185, 192, 133, 190, 130, 174, 20, 62, 241, 45, 123, 62, 20, 96, 64, 189, 242, 25, 106, 61, 228, 48, 149, 61, 26, 191, 222, 61, 68, 164, 215, 190, 12, 249, 230, 190, 184, 29, 109, 61, 90, 169, 201, 62, 8, 112, 241, 61, 232, 237, 163, 61, 243, 186, 233, 61, 59, 221, 244, 188, 127, 97, 214, 189, 37, 186, 198, 190, 182, 232, 38, 190, 99, 154, 34, 62, 219, 155, 144, 62, 145, 218, 96, 61, 247, 63, 249, 188, 53, 216, 251, 190, 111, 236, 135, 190, 129, 24, 3, 190, 59, 16, 138, 190, 185, 69, 49, 190, 19, 147, 81, 62, 211, 50, 87, 60, 19, 244, 98, 62, 30, 71, 54, 61, 153, 152, 47, 189, 202, 219, 49, 189, 237, 175, 253, 190, 125, 182, 200, 190, 124, 29, 66, 191, 102, 171, 2, 191, 54, 32, 204, 190, 193, 3, 152, 189, 68, 172, 33, 60, 243, 97, 65, 62, 48, 163, 53, 62, 38, 86, 23, 62, 7, 251, 5, 191, 38, 157, 219, 190, 48, 9, 21, 62, 144, 186, 193, 189, 75, 247, 43, 62, 142, 11, 22, 187, 241, 48, 134, 62, 108, 233, 32, 62, 253, 87, 145, 60, 131, 74, 138, 62, 125, 21, 236, 61, 99, 225, 58, 190, 113, 107, 148, 189, 85, 211, 21, 190, 176, 108, 242, 189, 18, 104, 251, 189, 109, 178, 12, 62, 18, 209, 64, 191, 167, 176, 154, 191, 14, 2, 154, 62, 35, 122, 87, 62, 191, 224, 82, 190, 144, 198, 151, 62, 136, 104, 101, 62, 80, 218, 145, 62, 78, 119, 30, 189, 254, 53, 207, 189, 49, 204, 0, 190, 180, 57, 61, 191, 36, 144, 146, 62, 161, 188, 23, 190, 147, 211, 5, 188, 7, 156, 153, 61, 99, 6, 193, 61, 121, 152, 25, 61, 192, 26, 89, 60, 231, 64, 69, 60, 50, 235, 231, 62, 80, 113, 75, 191, 87, 10, 131, 62, 97, 136, 128, 61, 91, 229, 51, 62, 64, 100, 149, 189, 124, 38, 103, 190, 117, 156, 166, 190, 139, 232, 31, 188, 251, 158, 31, 62, 217, 116, 136, 62, 99, 103, 163, 190, 143, 247, 173, 190, 14, 249, 31, 190, 12, 232, 207, 190, 236, 217, 150, 190, 142, 190, 12, 189, 49, 13, 19, 190, 135, 72, 186, 189, 131, 136, 132, 190, 66, 113, 133, 190, 179, 61, 137, 61, 68, 93, 161, 188, 114, 152, 253, 190, 197, 180, 41, 190, 32, 158, 106, 189, 236, 58, 179, 190, 117, 52, 31, 190, 172, 167, 162, 190, 217, 250, 137, 59, 166, 96, 87, 190, 127, 254, 201, 61, 70, 56, 60, 190, 111, 157, 27, 190, 203, 241, 58, 191, 211, 45, 81, 61, 118, 241, 124, 191, 231, 129, 215, 190, 251, 217, 18, 62, 152, 186, 169, 62, 220, 107, 29, 62, 213, 220, 13, 190, 7, 184, 129, 190, 112, 158, 200, 189, 4, 108, 153, 61, 220, 17, 244, 62, 24, 240, 252, 62, 75, 192, 7, 61, 235, 99, 97, 62, 224, 52, 212, 61, 205, 107, 66, 191, 253, 167, 15, 189, 39, 139, 221, 61, 159, 44, 169, 190, 16, 161, 44, 62, 242, 89, 219, 61, 226, 244, 98, 190, 73, 60, 116, 61, 117, 66, 129, 62, 169, 21, 11, 191, 108, 249, 100, 61, 6, 81, 188, 61, 100, 71, 245, 189, 25, 78, 127, 60, 209, 4, 154, 190, 161, 225, 36, 62, 141, 7, 18, 62, 83, 128, 29, 61, 140, 186, 163, 61, 85, 232, 73, 62, 159, 103, 117, 189, 203, 139, 123, 62, 245, 78, 217, 189, 17, 220, 25, 62, 85, 205, 138, 62, 171, 113, 163, 61, 228, 207, 96, 189, 95, 68, 165, 190, 184, 197, 105, 189, 43, 37, 227, 190, 222, 146, 175, 62, 3, 163, 219, 190, 201, 83, 29, 190, 45, 132, 126, 190, 133, 220, 156, 189, 175, 156, 194, 61, 225, 88, 184, 61, 207, 64, 141, 61, 234, 113, 244, 187, 97, 152, 94, 188, 200, 216, 207, 189, 98, 17, 9, 190, 91, 163, 159, 190, 146, 71, 241, 61, 118, 194, 62, 189, 251, 51, 160, 61, 106, 64, 174, 62, 214, 230, 9, 190, 249, 95, 45, 191, 178, 253, 216, 61, 201, 242, 239, 190, 169, 98, 12, 190, 142, 5, 172, 62, 64, 55, 196, 62, 184, 64, 186, 60, 245, 215, 207, 61, 98, 70, 179, 62, 45, 21, 192, 190, 241, 3, 116, 62, 77, 34, 46, 63, 91, 255, 68, 189, 103, 132, 19, 191, 60, 69, 11, 62, 229, 10, 156, 189, 168, 75, 7, 190, 135, 225, 79, 190, 91, 89, 134, 190, 42, 99, 75, 62, 42, 85, 48, 189, 234, 70, 242, 188, 139, 191, 137, 190, 219, 23, 52, 62, 24, 91, 10, 189, 98, 132, 179, 190, 204, 21, 57, 190, 253, 205, 31, 190, 31, 133, 230, 189, 6, 177, 162, 61, 67, 175, 8, 191, 175, 39, 142, 62, 18, 22, 154, 61, 197, 73, 23, 190, 236, 244, 3, 190, 146, 208, 195, 59, 225, 178, 138, 62, 6, 200, 123, 62, 106, 238, 30, 62, 132, 106, 203, 61, 160, 186, 54, 190, 85, 122, 213, 61, 98, 32, 170, 190, 238, 158, 60, 190, 148, 240, 75, 61, 173, 28, 182, 61, 198, 100, 179, 61, 190, 130, 11, 61, 167, 236, 175, 62, 121, 61, 110, 62, 110, 229, 204, 61, 251, 201, 117, 187, 208, 69, 0, 190, 174, 63, 38, 62, 10, 145, 250, 61, 144, 185, 75, 61, 35, 69, 33, 190, 103, 149, 108, 62, 98, 139, 181, 189, 73, 42, 108, 190, 213, 26, 0, 62, 95, 29, 191, 189, 111, 16, 210, 62, 49, 2, 14, 191, 142, 165, 24, 189, 45, 69, 9, 190, 116, 158, 165, 61, 134, 204, 179, 189, 88, 228, 20, 191, 233, 86, 79, 62, 230, 46, 133, 190, 6, 31, 75, 61, 25, 136, 54, 189, 194, 67, 13, 190, 249, 41, 117, 189, 119, 30, 30, 190, 109, 5, 167, 189, 106, 248, 154, 61, 87, 5, 203, 61, 231, 97, 194, 61, 213, 231, 255, 189, 67, 178, 67, 189, 196, 246, 231, 189, 214, 99, 253, 58, 252, 216, 49, 190, 165, 223, 204, 189, 25, 115, 165, 189, 54, 4, 239, 60, 190, 102, 52, 190, 16, 25, 107, 61, 121, 172, 212, 61, 31, 233, 148, 189, 221, 151, 63, 189, 196, 225, 46, 190, 174, 109, 175, 189, 104, 104, 18, 189, 123, 20, 8, 61, 131, 199, 16, 190, 42, 56, 113, 189, 6, 164, 167, 60, 82, 76, 131, 58, 194, 64, 23, 190, 81, 50, 153, 61, 183, 52, 45, 190, 122, 52, 221, 188, 161, 171, 58, 60, 76, 161, 179, 190, 71, 116, 84, 191, 40, 238, 111, 61, 166, 163, 210, 188, 133, 73, 166, 190, 84, 157, 3, 189, 172, 98, 172, 62, 223, 95, 146, 62, 101, 56, 180, 61, 240, 173, 56, 60, 121, 14, 227, 60, 75, 117, 178, 190, 197, 244, 110, 190, 254, 250, 0, 190, 233, 6, 214, 188, 207, 10, 183, 62, 126, 154, 0, 62, 99, 45, 101, 189, 133, 55, 4, 61, 110, 164, 48, 61, 57, 44, 103, 62, 194, 225, 174, 190, 13, 56, 17, 62, 251, 181, 95, 62, 15, 111, 221, 59, 203, 224, 161, 187, 209, 230, 134, 190, 83, 243, 46, 190, 245, 229, 93, 189, 226, 254, 237, 187, 72, 246, 3, 62, 175, 36, 103, 190, 90, 254, 15, 189, 112, 163, 148, 62, 49, 103, 72, 62, 251, 17, 157, 190, 178, 246, 44, 62, 20, 202, 184, 61, 82, 11, 90, 189, 132, 101, 60, 190, 180, 183, 14, 62, 124, 96, 33, 62, 204, 196, 238, 189, 159, 123, 186, 60, 28, 18, 111, 61, 78, 77, 179, 61, 80, 82, 80, 62, 90, 156, 222, 189, 159, 91, 225, 189, 90, 255, 63, 190, 250, 77, 196, 61, 3, 84, 152, 61, 242, 70, 138, 61, 179, 153, 74, 61, 56, 213, 22, 62, 2, 6, 148, 190, 114, 153, 212, 61, 77, 83, 178, 62, 222, 201, 134, 62, 136, 125, 45, 62, 72, 53, 63, 62, 191, 21, 106, 188, 254, 70, 133, 60, 6, 17, 44, 190, 2, 3, 63, 61, 165, 106, 217, 59, 47, 101, 68, 61, 51, 60, 6, 62, 226, 106, 69, 61, 125, 62, 163, 61, 82, 126, 157, 189, 84, 67, 186, 189, 253, 35, 249, 61, 26, 237, 251, 189, 18, 53, 29, 188, 168, 36, 77, 189, 192, 148, 33, 190, 122, 94, 5, 190, 139, 220, 11, 62, 45, 3, 171, 61, 41, 229, 101, 189, 241, 88, 117, 186, 59, 201, 115, 189, 63, 189, 212, 187, 20, 193, 73, 60, 185, 15, 71, 190, 223, 177, 228, 188, 30, 137, 227, 61, 6, 139, 80, 190, 40, 13, 57, 190, 139, 67, 62, 190, 35, 223, 46, 190, 54, 217, 60, 61, 67, 210, 245, 189, 188, 191, 151, 189, 32, 90, 244, 189, 129, 187, 141, 61, 55, 70, 107, 189, 183, 65, 35, 62, 130, 1, 226, 189, 5, 156, 101, 60, 162, 248, 144, 61, 134, 80, 210, 185, 50, 22, 47, 62, 74, 61, 254, 60, 141, 110, 225, 61, 5, 203, 25, 190, 192, 81, 28, 62, 2, 241, 92, 189, 142, 222, 147, 189, 91, 233, 203, 189, 197, 201, 68, 189, 234, 26, 8, 190, 94, 159, 29, 190, 68, 176, 17, 62, 184, 36, 219, 189, 18, 206, 237, 61, 59, 63, 110, 189, 22, 205, 160, 188, 158, 188, 23, 60, 195, 126, 224, 189, 42, 106, 202, 60, 230, 50, 150, 189, 92, 246, 0, 190, 156, 117, 93, 61, 129, 123, 21, 62, 208, 235, 91, 190, 187, 142, 104, 190, 84, 251, 151, 191, 132, 49, 102, 191, 225, 206, 139, 62, 17, 100, 73, 190, 46, 176, 201, 190, 2, 120, 16, 190, 131, 129, 242, 188, 1, 146, 227, 60, 49, 134, 92, 189, 194, 183, 118, 189, 30, 101, 172, 61, 242, 100, 37, 62, 29, 107, 19, 190, 143, 228, 118, 191, 180, 43, 18, 191, 116, 121, 36, 61, 26, 253, 96, 189, 148, 113, 41, 62, 16, 49, 95, 190, 62, 246, 236, 189, 82, 28, 220, 62, 86, 105, 50, 191, 78, 241, 221, 188, 162, 20, 135, 62, 48, 78, 226, 190, 206, 152, 130, 62, 38, 145, 133, 188, 227, 202, 68, 62, 71, 78, 113, 190, 157, 151, 25, 62, 220, 76, 232, 60, 222, 202, 196, 190, 80, 130, 165, 61, 56, 169, 27, 63, 212, 55, 255, 61, 82, 198, 31, 191, 110, 252, 16, 61, 235, 35, 65, 190, 29, 101, 148, 189, 16, 74, 224, 190, 52, 164, 127, 190, 16, 163, 42, 62, 217, 42, 147, 189, 249, 43, 45, 62, 52, 146, 181, 190, 20, 176, 250, 61, 192, 200, 43, 61, 152, 159, 129, 190, 90, 166, 164, 190, 157, 11, 201, 61, 197, 55, 87, 189, 99, 76, 161, 62, 131, 63, 113, 190, 128, 140, 61, 189, 95, 223, 39, 190, 27, 200, 229, 60, 161, 53, 163, 61, 92, 97, 146, 62, 149, 202, 176, 62, 145, 130, 106, 62, 216, 184, 82, 60, 233, 98, 159, 60, 227, 134, 18, 189, 217, 252, 35, 189, 59, 175, 191, 189, 54, 188, 148, 190, 241, 46, 212, 190, 200, 61, 80, 62, 215, 79, 218, 61, 237, 157, 78, 61, 13, 72, 221, 62, 199, 218, 121, 62, 233, 244, 61, 61, 30, 225, 29, 61, 63, 125, 238, 189, 185, 134, 177, 189, 88, 165, 155, 189, 58, 61, 9, 190, 254, 93, 7, 62, 8, 219, 134, 61, 206, 1, 113, 62, 45, 119, 171, 191, 157, 21, 230, 60, 146, 56, 89, 62, 124, 187, 54, 189, 41, 55, 231, 189, 140, 132, 53, 62, 244, 127, 144, 190, 129, 13, 181, 189, 94, 108, 6, 191, 70, 24, 225, 190, 124, 198, 172, 188, 31, 141, 114, 190, 21, 79, 2, 62, 208, 48, 165, 190, 129, 17, 6, 61, 48, 143, 20, 190, 144, 49, 67, 191, 13, 183, 232, 189, 236, 94, 187, 62, 160, 114, 159, 189, 122, 134, 224, 62, 55, 223, 133, 62, 143, 219, 193, 62, 7, 189, 194, 61, 176, 112, 18, 188, 6, 120, 23, 62, 145, 255, 65, 190, 159, 101, 151, 61, 205, 132, 222, 60, 45, 93, 177, 61, 238, 13, 50, 62, 174, 167, 162, 62, 125, 92, 50, 190, 20, 252, 151, 62, 155, 98, 225, 188, 171, 133, 144, 62, 60, 117, 74, 190, 143, 157, 87, 62, 226, 193, 31, 190, 92, 89, 19, 190, 201, 255, 116, 190, 207, 174, 7, 191, 220, 27, 89, 61, 192, 203, 204, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 200, 52, 62, 122, 151, 166, 61, 54, 224, 125, 62, 23, 60, 28, 190, 182, 26, 204, 61, 94, 13, 24, 62, 97, 40, 137, 62, 38, 90, 46, 61, 31, 105, 154, 62, 231, 204, 127, 189, 36, 144, 37, 184, 111, 7, 12, 62, 59, 169, 187, 62, 123, 82, 190, 189, 215, 235, 165, 61, 245, 26, 147, 60, 16, 252, 24, 62, 26, 194, 149, 61, 59, 100, 132, 189, 125, 144, 76, 62, 105, 20, 90, 61, 242, 116, 101, 62, 46, 52, 187, 61, 20, 249, 171, 60, 248, 43, 196, 61, 73, 200, 29, 62, 16, 242, 235, 189, 33, 142, 22, 190, 231, 117, 11, 62, 85, 153, 114, 61, 178, 42, 27, 62, 35, 224, 169, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {19, 89, 32, 63, 110, 185, 21, 63, 2, 251, 33, 190, 220, 96, 81, 61, 253, 222, 129, 190, 179, 224, 191, 62, 51, 189, 181, 191, 89, 96, 140, 61, 29, 239, 201, 60, 47, 164, 34, 63, 182, 20, 14, 191, 101, 118, 15, 191, 181, 23, 37, 191, 184, 59, 106, 190, 186, 177, 54, 63, 208, 20, 138, 190, 57, 132, 42, 191, 140, 198, 15, 191, 110, 174, 92, 191, 220, 225, 166, 62, 51, 172, 208, 62, 40, 77, 53, 63, 194, 238, 13, 191, 10, 142, 247, 61, 215, 162, 139, 190, 40, 3, 18, 62, 89, 196, 136, 189, 124, 240, 37, 62, 195, 125, 12, 63, 129, 133, 205, 62, 108, 170, 235, 190, 243, 221, 35, 191, 130, 48, 7, 190, 168, 130, 140, 190, 43, 180, 128, 190, 237, 214, 18, 190, 178, 137, 76, 190, 157, 43, 52, 190, 96, 72, 140, 59, 162, 196, 87, 60, 105, 189, 134, 190, 157, 67, 186, 60, 244, 102, 162, 189, 219, 38, 42, 62, 220, 23, 142, 190, 30, 182, 209, 61, 30, 61, 220, 61, 4, 64, 93, 62, 233, 72, 32, 62, 83, 221, 16, 62, 77, 153, 208, 62, 1, 181, 12, 61, 16, 160, 188, 62, 54, 55, 52, 61, 94, 17, 231, 188, 90, 49, 23, 190, 200, 193, 222, 189, 124, 161, 94, 190, 109, 77, 25, 190, 95, 7, 197, 189, 178, 165, 232, 187, 144, 36, 87, 62, 195, 248, 120, 190, 75, 59, 172, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {70, 169, 14, 62, 10, 25, 204, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {31, 232, 78, 191, 237, 238, 20, 63, 72, 124, 71, 188};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {93, 133, 227, 63, 81, 9, 35, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0008/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}