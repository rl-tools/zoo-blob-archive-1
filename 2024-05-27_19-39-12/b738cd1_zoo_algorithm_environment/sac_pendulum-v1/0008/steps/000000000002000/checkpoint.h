// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 136, 204, 189, 134, 74, 209, 62, 209, 204, 202, 190, 83, 136, 60, 63, 254, 168, 207, 190, 83, 178, 230, 190, 62, 177, 247, 189, 79, 205, 18, 190, 132, 46, 90, 62, 167, 66, 121, 190, 217, 34, 219, 188, 132, 232, 140, 62, 6, 81, 33, 191, 215, 244, 82, 190, 228, 226, 118, 61, 91, 147, 249, 190, 66, 149, 164, 190, 167, 64, 194, 189, 63, 248, 163, 62, 165, 86, 76, 63, 224, 178, 171, 62, 159, 121, 66, 190, 132, 252, 13, 191, 30, 143, 199, 62, 151, 234, 109, 188, 76, 103, 167, 62, 30, 7, 203, 62, 238, 49, 127, 62, 187, 156, 97, 63, 135, 120, 108, 190, 150, 148, 16, 63, 92, 188, 140, 61, 56, 144, 198, 62, 43, 106, 167, 62, 2, 179, 234, 62, 108, 218, 230, 62, 10, 24, 16, 63, 45, 232, 155, 62, 161, 42, 136, 190, 231, 105, 244, 188, 235, 159, 157, 190, 234, 54, 217, 186, 10, 199, 238, 190, 105, 106, 38, 191, 92, 224, 87, 61, 190, 126, 226, 59, 185, 64, 156, 61, 227, 96, 206, 62, 35, 29, 88, 190, 25, 31, 159, 190, 34, 234, 170, 62, 166, 38, 87, 62, 35, 3, 38, 62, 254, 238, 36, 61, 28, 16, 178, 190, 13, 73, 46, 63, 126, 142, 192, 190, 215, 147, 29, 62, 255, 140, 56, 63, 230, 196, 225, 62, 168, 128, 119, 190, 153, 212, 92, 191, 80, 56, 120, 190, 152, 155, 192, 60, 42, 101, 254, 62, 2, 135, 45, 188, 91, 197, 236, 62, 185, 205, 17, 191, 205, 93, 144, 62, 141, 28, 121, 189, 251, 107, 130, 190, 205, 248, 92, 62, 52, 78, 247, 60, 28, 145, 63, 62, 180, 69, 81, 62, 131, 248, 61, 190, 204, 200, 188, 62, 150, 89, 173, 61, 68, 182, 147, 190, 103, 93, 246, 190, 91, 234, 30, 190, 41, 159, 122, 190, 223, 247, 170, 62, 148, 156, 33, 62, 226, 78, 8, 191, 46, 11, 187, 188, 36, 127, 176, 60, 217, 222, 14, 63, 177, 78, 167, 190, 24, 173, 237, 190, 152, 2, 234, 189, 84, 159, 95, 191, 158, 215, 146, 62, 22, 220, 62, 189, 30, 60, 104, 61, 59, 121, 184, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {235, 49, 52, 191, 176, 212, 181, 62, 191, 17, 233, 190, 214, 253, 89, 60, 174, 206, 11, 191, 99, 79, 73, 62, 38, 117, 28, 62, 173, 42, 162, 62, 57, 248, 127, 190, 139, 5, 16, 63, 107, 42, 91, 190, 138, 225, 179, 62, 231, 173, 251, 187, 41, 218, 212, 190, 177, 45, 134, 190, 141, 94, 21, 191, 253, 17, 202, 62, 86, 50, 86, 62, 234, 233, 170, 61, 10, 82, 94, 61, 101, 121, 5, 62, 198, 42, 197, 62, 119, 39, 81, 63, 181, 206, 216, 190, 232, 149, 233, 61, 37, 116, 1, 63, 234, 105, 141, 190, 66, 191, 180, 62, 155, 3, 4, 63, 208, 215, 202, 189, 54, 26, 172, 62, 156, 161, 192, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {86, 172, 245, 61, 189, 8, 138, 62, 107, 115, 167, 60, 180, 18, 3, 189, 27, 198, 32, 62, 26, 205, 157, 61, 119, 244, 18, 190, 184, 56, 201, 61, 105, 134, 107, 189, 183, 31, 117, 190, 20, 172, 0, 190, 204, 250, 219, 189, 18, 180, 220, 60, 82, 24, 51, 190, 2, 232, 19, 62, 244, 156, 146, 61, 99, 113, 225, 61, 11, 178, 154, 188, 61, 113, 116, 190, 63, 30, 66, 190, 160, 210, 6, 61, 41, 66, 60, 190, 45, 151, 110, 62, 194, 108, 167, 190, 98, 208, 2, 62, 79, 15, 2, 62, 23, 163, 182, 61, 168, 67, 90, 190, 243, 164, 38, 62, 96, 203, 12, 62, 229, 127, 209, 61, 206, 11, 128, 189, 161, 99, 139, 60, 212, 154, 109, 62, 218, 188, 124, 190, 185, 85, 89, 189, 5, 92, 152, 62, 132, 234, 73, 61, 98, 143, 20, 190, 180, 250, 148, 62, 172, 18, 1, 190, 110, 55, 207, 60, 33, 164, 59, 189, 105, 194, 224, 188, 43, 178, 79, 61, 160, 119, 153, 189, 32, 173, 36, 62, 174, 106, 45, 190, 232, 222, 233, 186, 16, 153, 230, 189, 249, 165, 45, 190, 56, 255, 145, 190, 150, 58, 0, 60, 238, 219, 175, 189, 29, 46, 161, 62, 109, 124, 62, 189, 230, 119, 100, 189, 155, 197, 211, 189, 74, 227, 57, 189, 146, 111, 164, 61, 183, 26, 151, 187, 15, 50, 22, 62, 78, 181, 138, 62, 252, 98, 227, 57, 178, 14, 85, 190, 249, 180, 4, 61, 101, 152, 189, 61, 253, 132, 244, 61, 214, 25, 127, 190, 173, 224, 108, 190, 103, 167, 252, 188, 247, 203, 165, 61, 237, 95, 153, 60, 203, 183, 149, 62, 42, 130, 110, 61, 131, 84, 10, 62, 219, 206, 236, 61, 32, 1, 28, 62, 89, 15, 229, 189, 225, 180, 217, 189, 161, 76, 214, 61, 191, 155, 145, 62, 217, 138, 7, 62, 233, 88, 255, 61, 85, 204, 59, 190, 188, 92, 11, 188, 68, 255, 129, 189, 65, 89, 11, 62, 79, 243, 243, 189, 55, 251, 71, 62, 80, 5, 64, 188, 177, 65, 232, 189, 17, 250, 141, 60, 223, 136, 240, 189, 118, 93, 228, 189, 21, 2, 155, 190, 43, 179, 179, 61, 95, 221, 213, 189, 127, 108, 187, 61, 206, 164, 61, 190, 92, 198, 2, 62, 35, 99, 213, 189, 191, 2, 46, 190, 204, 8, 6, 62, 214, 238, 18, 62, 58, 106, 62, 190, 6, 183, 222, 61, 218, 11, 14, 61, 135, 201, 13, 62, 194, 164, 37, 62, 249, 235, 236, 189, 74, 132, 198, 189, 53, 69, 179, 189, 56, 73, 7, 62, 188, 44, 33, 62, 212, 67, 91, 189, 99, 93, 52, 61, 44, 96, 159, 59, 37, 100, 63, 190, 92, 178, 62, 190, 112, 74, 26, 62, 124, 50, 141, 59, 33, 87, 234, 61, 152, 87, 163, 61, 0, 22, 15, 190, 253, 170, 24, 190, 8, 198, 226, 61, 159, 41, 224, 187, 13, 146, 130, 189, 144, 178, 226, 61, 230, 149, 208, 61, 55, 185, 198, 61, 37, 83, 22, 190, 49, 177, 191, 61, 73, 129, 54, 62, 153, 0, 22, 61, 242, 12, 108, 188, 154, 240, 90, 62, 85, 102, 232, 60, 237, 108, 148, 60, 63, 99, 119, 188, 13, 217, 195, 189, 203, 86, 4, 190, 206, 8, 50, 62, 151, 33, 57, 190, 63, 150, 86, 62, 143, 237, 207, 61, 85, 82, 191, 61, 78, 42, 59, 190, 186, 23, 62, 62, 56, 148, 242, 61, 43, 194, 42, 189, 228, 118, 49, 189, 235, 43, 50, 189, 96, 236, 235, 60, 197, 65, 200, 188, 223, 112, 123, 61, 162, 76, 202, 189, 219, 205, 180, 189, 222, 210, 167, 61, 119, 14, 9, 190, 202, 209, 109, 62, 172, 41, 188, 61, 88, 194, 179, 61, 23, 196, 184, 61, 45, 169, 109, 189, 156, 93, 64, 190, 182, 224, 112, 62, 83, 138, 55, 190, 155, 245, 46, 188, 111, 172, 243, 189, 203, 15, 51, 189, 60, 144, 31, 190, 180, 151, 5, 62, 24, 201, 205, 61, 253, 58, 73, 190, 162, 253, 86, 62, 168, 212, 37, 62, 80, 250, 18, 62, 216, 134, 34, 190, 111, 109, 90, 62, 105, 11, 100, 189, 176, 233, 11, 62, 43, 102, 58, 190, 124, 33, 199, 59, 153, 156, 48, 62, 223, 129, 54, 189, 121, 108, 75, 190, 141, 195, 206, 61, 89, 62, 80, 62, 15, 58, 249, 61, 128, 101, 248, 61, 65, 204, 6, 190, 49, 28, 167, 188, 171, 84, 201, 61, 148, 43, 222, 189, 187, 122, 166, 190, 0, 93, 29, 62, 73, 48, 172, 190, 4, 87, 134, 190, 23, 58, 153, 189, 178, 115, 151, 61, 139, 53, 68, 60, 171, 105, 31, 190, 250, 219, 131, 190, 68, 88, 36, 190, 32, 36, 114, 190, 49, 181, 166, 188, 144, 126, 42, 60, 57, 167, 96, 190, 80, 224, 247, 61, 181, 58, 102, 190, 143, 206, 116, 60, 159, 185, 117, 62, 156, 215, 240, 190, 46, 198, 35, 61, 183, 74, 180, 61, 173, 104, 51, 62, 105, 178, 41, 60, 255, 70, 100, 62, 246, 84, 221, 61, 186, 126, 143, 190, 102, 120, 167, 190, 112, 12, 182, 61, 176, 119, 85, 188, 32, 78, 4, 190, 215, 3, 58, 188, 48, 172, 207, 61, 63, 84, 22, 62, 161, 82, 173, 189, 192, 130, 17, 189, 69, 26, 167, 61, 245, 78, 202, 189, 173, 179, 10, 61, 237, 194, 183, 189, 60, 45, 16, 190, 219, 142, 83, 189, 60, 32, 218, 189, 191, 65, 154, 188, 173, 12, 71, 189, 177, 160, 59, 189, 174, 149, 27, 62, 199, 246, 186, 189, 217, 41, 192, 61, 87, 110, 25, 62, 31, 249, 172, 189, 172, 203, 180, 59, 17, 49, 206, 61, 139, 61, 107, 60, 152, 40, 39, 190, 182, 163, 96, 188, 98, 193, 158, 61, 63, 238, 58, 188, 31, 15, 6, 190, 145, 7, 36, 190, 219, 96, 159, 61, 94, 82, 42, 190, 29, 200, 245, 187, 46, 29, 112, 61, 23, 162, 162, 59, 199, 33, 177, 61, 218, 237, 140, 61, 244, 34, 225, 61, 108, 150, 12, 189, 237, 198, 166, 60, 113, 183, 53, 62, 194, 130, 194, 189, 148, 11, 177, 61, 12, 181, 171, 59, 215, 203, 98, 189, 82, 49, 46, 189, 209, 80, 16, 190, 226, 89, 152, 61, 106, 156, 46, 190, 65, 209, 63, 62, 62, 97, 195, 60, 77, 71, 98, 62, 96, 124, 13, 62, 236, 103, 47, 188, 255, 161, 78, 61, 102, 87, 63, 189, 39, 145, 162, 188, 60, 198, 173, 61, 133, 87, 109, 189, 146, 14, 118, 189, 32, 150, 177, 189, 117, 25, 96, 61, 33, 249, 37, 190, 53, 17, 161, 61, 131, 169, 62, 61, 198, 62, 173, 189, 43, 217, 219, 189, 234, 205, 7, 190, 71, 89, 50, 62, 211, 197, 149, 59, 186, 146, 6, 62, 178, 33, 10, 62, 150, 127, 7, 190, 230, 32, 145, 61, 162, 59, 173, 189, 135, 74, 32, 61, 152, 223, 6, 189, 255, 22, 68, 190, 43, 34, 90, 61, 7, 176, 27, 190, 117, 128, 237, 61, 73, 193, 242, 188, 107, 232, 15, 190, 80, 65, 250, 61, 247, 223, 163, 59, 46, 208, 8, 189, 153, 59, 29, 60, 109, 15, 129, 188, 205, 154, 155, 190, 158, 248, 66, 62, 254, 121, 144, 60, 152, 222, 249, 189, 108, 187, 147, 61, 102, 197, 5, 62, 39, 114, 125, 188, 75, 255, 230, 61, 248, 109, 106, 189, 53, 220, 60, 190, 66, 186, 14, 190, 198, 106, 145, 61, 34, 222, 28, 190, 226, 227, 54, 190, 105, 83, 129, 189, 187, 97, 16, 62, 57, 229, 134, 190, 89, 77, 242, 61, 37, 105, 63, 190, 128, 63, 23, 62, 236, 53, 33, 190, 205, 205, 252, 188, 213, 238, 155, 189, 53, 223, 243, 61, 15, 147, 223, 61, 47, 50, 229, 189, 109, 81, 169, 189, 122, 85, 141, 189, 242, 244, 11, 190, 251, 185, 192, 61, 121, 240, 208, 189, 230, 106, 138, 61, 68, 175, 101, 189, 181, 137, 215, 61, 9, 26, 88, 189, 112, 109, 13, 190, 143, 174, 19, 190, 86, 115, 16, 62, 179, 135, 150, 186, 142, 27, 116, 190, 10, 247, 43, 190, 42, 91, 63, 62, 73, 234, 113, 189, 72, 243, 184, 190, 209, 168, 228, 61, 175, 230, 134, 189, 242, 39, 253, 61, 245, 212, 37, 61, 160, 77, 114, 62, 196, 52, 153, 189, 115, 81, 138, 189, 128, 139, 107, 62, 83, 34, 26, 187, 129, 227, 28, 189, 38, 216, 137, 60, 45, 236, 34, 188, 125, 183, 97, 62, 93, 244, 125, 61, 75, 222, 127, 61, 81, 0, 219, 189, 254, 18, 10, 62, 200, 154, 6, 190, 78, 126, 41, 60, 67, 104, 127, 188, 243, 49, 175, 61, 62, 77, 127, 60, 117, 102, 92, 61, 149, 89, 94, 62, 154, 28, 86, 189, 167, 145, 196, 61, 174, 164, 148, 189, 185, 65, 27, 61, 181, 47, 241, 189, 4, 36, 191, 61, 222, 210, 133, 190, 89, 54, 150, 190, 22, 16, 4, 62, 188, 173, 105, 61, 239, 25, 81, 190, 240, 86, 133, 189, 163, 71, 149, 62, 130, 228, 206, 189, 81, 40, 135, 61, 208, 183, 21, 190, 190, 162, 171, 61, 109, 57, 155, 190, 245, 169, 128, 188, 249, 130, 145, 61, 85, 37, 46, 62, 77, 200, 237, 59, 56, 96, 249, 61, 38, 34, 211, 61, 141, 31, 11, 62, 56, 158, 35, 190, 114, 40, 157, 60, 227, 149, 189, 61, 141, 202, 6, 62, 188, 98, 222, 189, 2, 12, 251, 59, 184, 128, 44, 61, 120, 62, 229, 189, 7, 38, 165, 190, 155, 14, 78, 61, 203, 222, 38, 61, 116, 150, 195, 189, 102, 247, 47, 62, 74, 134, 9, 62, 40, 215, 218, 189, 130, 236, 122, 61, 4, 130, 17, 62, 227, 143, 85, 62, 129, 191, 166, 189, 162, 225, 3, 61, 106, 10, 13, 190, 184, 121, 199, 61, 211, 112, 213, 189, 46, 232, 10, 189, 19, 238, 91, 61, 56, 10, 243, 60, 196, 161, 249, 61, 162, 139, 83, 190, 158, 41, 43, 190, 96, 176, 255, 189, 245, 99, 44, 62, 104, 136, 153, 190, 155, 209, 20, 60, 225, 166, 136, 62, 181, 161, 250, 61, 253, 46, 78, 60, 147, 175, 212, 61, 142, 138, 236, 189, 227, 225, 237, 189, 2, 252, 113, 59, 205, 178, 168, 61, 55, 98, 161, 188, 240, 122, 26, 190, 235, 223, 124, 189, 45, 111, 49, 61, 124, 171, 64, 188, 204, 119, 72, 61, 41, 135, 2, 61, 155, 136, 59, 62, 201, 119, 197, 189, 164, 199, 166, 61, 166, 56, 113, 189, 18, 34, 245, 187, 6, 108, 10, 189, 69, 160, 175, 61, 221, 251, 160, 60, 182, 45, 212, 61, 140, 173, 229, 188, 139, 242, 49, 62, 253, 159, 154, 61, 44, 6, 250, 61, 181, 190, 85, 189, 137, 177, 112, 187, 190, 77, 154, 188, 161, 205, 150, 189, 53, 151, 220, 188, 194, 96, 0, 189, 53, 51, 5, 62, 192, 79, 63, 189, 102, 31, 35, 62, 162, 160, 160, 189, 66, 201, 174, 188, 86, 15, 187, 61, 77, 218, 109, 190, 17, 86, 85, 61, 23, 60, 32, 190, 41, 200, 197, 61, 219, 186, 141, 189, 198, 146, 126, 189, 182, 22, 34, 62, 176, 138, 243, 189, 248, 246, 193, 61, 77, 56, 11, 62, 178, 79, 61, 62, 154, 174, 49, 62, 56, 52, 168, 61, 115, 140, 173, 61, 26, 191, 222, 61, 38, 65, 198, 61, 198, 135, 72, 189, 94, 204, 33, 62, 225, 78, 251, 61, 36, 2, 181, 61, 75, 217, 175, 188, 144, 151, 193, 189, 55, 56, 149, 188, 25, 194, 201, 61, 217, 17, 237, 189, 204, 206, 230, 188, 169, 57, 42, 61, 182, 27, 207, 61, 61, 144, 228, 188, 9, 4, 56, 188, 185, 157, 142, 190, 20, 153, 6, 62, 178, 80, 223, 61, 214, 35, 4, 190, 168, 216, 48, 190, 209, 107, 153, 61, 138, 51, 89, 61, 63, 106, 27, 190, 27, 47, 19, 60, 106, 16, 155, 189, 122, 122, 246, 189, 209, 60, 163, 61, 161, 130, 44, 190, 52, 42, 12, 190, 41, 52, 0, 61, 6, 38, 169, 189, 193, 3, 152, 189, 136, 68, 16, 62, 182, 183, 228, 188, 93, 2, 201, 189, 172, 78, 9, 58, 148, 250, 13, 190, 221, 162, 203, 189, 241, 203, 191, 61, 41, 138, 18, 189, 193, 76, 125, 61, 52, 209, 138, 189, 12, 71, 133, 189, 232, 215, 165, 189, 89, 234, 188, 61, 249, 15, 61, 60, 102, 59, 72, 189, 76, 55, 185, 189, 127, 233, 92, 189, 67, 248, 244, 188, 246, 92, 87, 189, 240, 61, 98, 189, 223, 169, 23, 62, 135, 113, 11, 190, 227, 72, 107, 190, 193, 250, 95, 61, 4, 169, 237, 60, 6, 232, 106, 190, 188, 112, 28, 62, 10, 103, 156, 62, 71, 219, 170, 61, 161, 73, 219, 189, 183, 160, 131, 188, 49, 204, 0, 190, 234, 183, 142, 190, 95, 237, 80, 62, 187, 0, 136, 189, 92, 227, 127, 61, 87, 154, 156, 61, 66, 125, 4, 188, 175, 132, 43, 189, 168, 155, 76, 62, 247, 215, 175, 61, 80, 163, 106, 60, 6, 177, 150, 189, 242, 217, 134, 62, 15, 83, 60, 188, 90, 133, 102, 62, 147, 120, 150, 188, 119, 60, 131, 189, 192, 187, 21, 190, 159, 168, 5, 62, 203, 62, 104, 189, 135, 116, 195, 61, 173, 100, 164, 189, 207, 14, 115, 61, 60, 101, 43, 189, 228, 199, 172, 189, 87, 191, 135, 188, 155, 175, 179, 61, 46, 208, 107, 187, 67, 68, 35, 189, 54, 133, 242, 59, 203, 109, 45, 189, 3, 193, 151, 61, 68, 93, 161, 188, 177, 211, 37, 190, 116, 88, 160, 61, 146, 22, 120, 189, 201, 158, 59, 190, 147, 92, 195, 189, 217, 204, 2, 190, 96, 59, 117, 189, 131, 59, 140, 61, 11, 46, 39, 190, 35, 197, 149, 189, 49, 218, 24, 190, 14, 149, 201, 189, 194, 100, 229, 61, 244, 49, 25, 190, 199, 255, 42, 189, 206, 234, 19, 189, 188, 91, 135, 61, 144, 144, 116, 188, 23, 43, 156, 60, 2, 34, 217, 189, 41, 98, 74, 189, 146, 68, 158, 189, 81, 50, 134, 62, 90, 102, 196, 62, 79, 89, 194, 61, 200, 206, 21, 62, 94, 245, 233, 61, 62, 147, 225, 190, 50, 14, 216, 188, 220, 237, 173, 61, 179, 36, 148, 190, 16, 161, 44, 62, 147, 27, 238, 61, 165, 193, 93, 190, 85, 44, 39, 189, 109, 229, 230, 61, 6, 225, 83, 190, 69, 248, 67, 61, 203, 32, 119, 62, 6, 169, 22, 189, 145, 14, 66, 189, 67, 4, 133, 190, 107, 98, 255, 188, 47, 10, 146, 188, 181, 144, 239, 61, 250, 100, 116, 189, 54, 175, 83, 189, 165, 38, 161, 58, 199, 42, 76, 62, 154, 134, 17, 62, 172, 107, 21, 62, 81, 183, 166, 61, 177, 222, 216, 60, 171, 30, 93, 189, 222, 36, 232, 189, 76, 108, 226, 189, 9, 171, 1, 190, 207, 39, 18, 62, 176, 134, 175, 60, 161, 62, 26, 190, 142, 220, 153, 189, 163, 252, 191, 189, 31, 158, 162, 61, 225, 88, 184, 61, 67, 69, 59, 189, 109, 64, 2, 62, 165, 202, 173, 189, 27, 197, 170, 189, 221, 163, 143, 189, 52, 243, 191, 61, 221, 69, 128, 188, 168, 17, 147, 61, 31, 0, 7, 190, 22, 229, 161, 61, 130, 191, 23, 62, 37, 78, 54, 190, 134, 29, 151, 61, 116, 115, 141, 61, 44, 80, 15, 189, 228, 55, 22, 62, 163, 150, 252, 60, 69, 59, 197, 188, 221, 205, 121, 189, 167, 204, 90, 62, 44, 190, 84, 190, 232, 202, 1, 62, 37, 9, 240, 62, 6, 55, 248, 59, 249, 84, 144, 190, 226, 52, 213, 61, 152, 3, 178, 61, 101, 19, 88, 189, 52, 188, 76, 189, 151, 187, 53, 190, 219, 155, 10, 62, 42, 85, 48, 189, 105, 58, 140, 61, 16, 250, 43, 190, 253, 44, 189, 61, 15, 87, 222, 189, 255, 241, 112, 190, 19, 182, 10, 189, 168, 217, 117, 61, 17, 77, 46, 190, 75, 7, 186, 61, 37, 145, 195, 190, 129, 150, 53, 61, 247, 170, 144, 61, 157, 33, 6, 62, 204, 129, 17, 190, 44, 127, 138, 189, 152, 158, 119, 61, 193, 109, 157, 62, 201, 132, 52, 189, 194, 211, 166, 188, 242, 28, 61, 189, 210, 221, 158, 60, 158, 30, 33, 190, 102, 183, 161, 189, 6, 60, 95, 61, 194, 125, 92, 60, 60, 33, 86, 61, 54, 254, 44, 189, 84, 19, 145, 62, 164, 31, 30, 62, 125, 20, 239, 61, 2, 6, 141, 60, 208, 69, 0, 190, 123, 101, 64, 61, 131, 49, 69, 61, 152, 97, 191, 61, 235, 213, 201, 189, 7, 250, 24, 62, 243, 9, 243, 189, 0, 63, 146, 189, 114, 194, 76, 62, 45, 155, 212, 189, 249, 95, 112, 62, 47, 5, 118, 189, 102, 64, 196, 60, 39, 195, 62, 61, 1, 188, 17, 62, 105, 17, 212, 188, 157, 36, 133, 190, 212, 79, 243, 61, 210, 150, 8, 190, 6, 31, 75, 61, 25, 136, 54, 189, 194, 67, 13, 190, 249, 41, 117, 189, 119, 30, 30, 190, 109, 5, 167, 189, 106, 248, 154, 61, 87, 5, 203, 61, 231, 97, 194, 61, 213, 231, 255, 189, 67, 178, 67, 189, 196, 246, 231, 189, 214, 99, 253, 58, 252, 216, 49, 190, 165, 223, 204, 189, 25, 115, 165, 189, 54, 4, 239, 60, 190, 102, 52, 190, 16, 25, 107, 61, 121, 172, 212, 61, 31, 233, 148, 189, 221, 151, 63, 189, 196, 225, 46, 190, 174, 109, 175, 189, 104, 104, 18, 189, 123, 20, 8, 61, 131, 199, 16, 190, 42, 56, 113, 189, 6, 164, 167, 60, 82, 76, 131, 58, 194, 64, 23, 190, 81, 50, 153, 61, 194, 63, 33, 190, 114, 91, 51, 188, 36, 158, 36, 58, 34, 191, 188, 61, 86, 128, 186, 189, 126, 33, 49, 190, 33, 55, 157, 188, 119, 229, 57, 190, 53, 68, 106, 61, 124, 105, 204, 62, 81, 241, 100, 62, 53, 204, 251, 61, 14, 89, 133, 61, 121, 14, 227, 60, 104, 10, 153, 190, 8, 198, 147, 189, 215, 250, 8, 189, 16, 79, 19, 62, 154, 180, 148, 62, 71, 95, 53, 62, 101, 69, 77, 190, 235, 33, 61, 62, 70, 62, 18, 62, 19, 110, 4, 62, 160, 98, 198, 61, 249, 68, 50, 62, 100, 84, 35, 61, 17, 136, 12, 61, 254, 182, 8, 61, 9, 63, 52, 190, 28, 79, 35, 190, 169, 150, 134, 188, 164, 87, 120, 61, 1, 101, 95, 61, 101, 36, 123, 190, 91, 169, 146, 189, 57, 91, 13, 62, 161, 39, 35, 62, 246, 192, 59, 190, 226, 30, 23, 62, 107, 157, 7, 62, 17, 204, 139, 189, 181, 16, 64, 190, 0, 130, 204, 61, 20, 2, 247, 61, 204, 196, 238, 189, 30, 124, 75, 185, 60, 69, 251, 60, 38, 174, 94, 61, 133, 216, 16, 61, 123, 47, 63, 187, 174, 126, 137, 189, 249, 83, 225, 188, 28, 210, 55, 189, 58, 2, 126, 57, 155, 67, 111, 61, 56, 119, 59, 187, 51, 76, 104, 61, 123, 110, 222, 189, 229, 28, 142, 61, 143, 38, 53, 62, 232, 176, 89, 62, 99, 250, 14, 62, 187, 33, 72, 62, 191, 21, 106, 188, 250, 239, 83, 60, 143, 37, 43, 190, 49, 128, 124, 61, 165, 106, 217, 59, 47, 101, 68, 61, 186, 39, 27, 62, 120, 44, 116, 61, 125, 168, 187, 61, 61, 28, 140, 189, 77, 144, 151, 189, 43, 60, 16, 62, 133, 95, 246, 189, 18, 53, 29, 188, 168, 36, 77, 189, 60, 225, 26, 190, 253, 91, 245, 189, 77, 73, 23, 62, 45, 3, 171, 61, 84, 88, 26, 189, 241, 88, 117, 186, 109, 226, 93, 189, 41, 145, 84, 60, 253, 124, 76, 60, 104, 216, 59, 190, 122, 198, 166, 188, 30, 137, 227, 61, 231, 107, 74, 190, 5, 9, 57, 190, 139, 67, 62, 190, 77, 241, 43, 190, 54, 217, 60, 61, 97, 150, 239, 189, 188, 191, 151, 189, 32, 90, 244, 189, 129, 187, 141, 61, 55, 70, 107, 189, 1, 241, 35, 62, 130, 1, 226, 189, 5, 156, 101, 60, 162, 248, 144, 61, 104, 221, 178, 59, 50, 22, 47, 62, 74, 61, 254, 60, 31, 51, 236, 61, 5, 203, 25, 190, 192, 81, 28, 62, 2, 241, 92, 189, 231, 246, 146, 189, 91, 233, 203, 189, 83, 172, 38, 189, 234, 26, 8, 190, 120, 191, 30, 190, 65, 160, 20, 62, 184, 36, 219, 189, 18, 206, 237, 61, 59, 63, 110, 189, 112, 16, 139, 188, 77, 123, 11, 60, 204, 41, 218, 189, 103, 217, 229, 60, 230, 50, 150, 189, 92, 246, 0, 190, 156, 117, 93, 61, 220, 198, 29, 62, 152, 73, 42, 190, 73, 248, 41, 190, 211, 242, 188, 189, 141, 43, 70, 61, 75, 135, 130, 61, 193, 212, 56, 190, 115, 173, 51, 190, 2, 120, 16, 190, 93, 113, 114, 189, 248, 235, 101, 187, 4, 177, 90, 61, 121, 59, 37, 189, 30, 101, 172, 61, 28, 91, 36, 190, 101, 189, 13, 190, 99, 89, 149, 190, 22, 163, 139, 189, 172, 190, 101, 188, 177, 69, 89, 189, 101, 87, 224, 188, 9, 53, 61, 190, 162, 162, 68, 190, 78, 238, 105, 60, 178, 163, 52, 61, 20, 155, 222, 61, 228, 85, 193, 60, 49, 112, 131, 190, 157, 248, 23, 62, 63, 54, 229, 60, 200, 5, 29, 190, 24, 18, 68, 190, 159, 33, 78, 62, 245, 127, 194, 188, 234, 220, 117, 190, 5, 253, 128, 61, 87, 35, 230, 62, 27, 166, 193, 61, 16, 132, 168, 190, 107, 150, 244, 59, 231, 90, 152, 61, 145, 153, 129, 60, 131, 100, 140, 190, 253, 138, 76, 190, 49, 170, 59, 62, 217, 42, 147, 189, 33, 38, 129, 62, 63, 128, 58, 190, 182, 222, 17, 62, 135, 99, 27, 188, 220, 106, 1, 190, 19, 112, 245, 189, 6, 25, 40, 62, 72, 171, 34, 189, 245, 36, 138, 62, 57, 25, 252, 189, 129, 252, 213, 189, 159, 74, 151, 189, 113, 207, 21, 62, 67, 84, 10, 62, 212, 86, 40, 62, 243, 66, 120, 62, 161, 170, 25, 62, 66, 109, 143, 59, 110, 104, 225, 189, 107, 229, 143, 189, 1, 231, 219, 189, 125, 7, 153, 189, 23, 125, 6, 190, 46, 187, 23, 190, 39, 130, 172, 61, 96, 137, 226, 61, 216, 141, 181, 188, 119, 52, 215, 62, 9, 131, 215, 61, 73, 44, 225, 188, 33, 192, 220, 59, 63, 125, 238, 189, 119, 23, 227, 189, 39, 62, 3, 190, 100, 250, 245, 189, 141, 29, 153, 61, 20, 164, 52, 61, 250, 223, 30, 62, 105, 124, 194, 190, 16, 162, 202, 59, 65, 219, 41, 62, 224, 2, 47, 189, 227, 255, 254, 60, 84, 209, 123, 62, 193, 89, 139, 61, 254, 110, 93, 189, 98, 178, 128, 189, 121, 91, 142, 190, 86, 156, 28, 189, 48, 79, 225, 189, 63, 241, 114, 61, 141, 45, 223, 189, 185, 119, 138, 189, 68, 16, 140, 188, 200, 212, 64, 190, 108, 230, 84, 189, 101, 140, 18, 62, 75, 235, 44, 190, 64, 217, 69, 62, 126, 193, 109, 62, 117, 21, 90, 61, 92, 248, 132, 188, 44, 6, 163, 61, 6, 120, 23, 62, 36, 234, 65, 190, 201, 69, 166, 189, 93, 15, 1, 188, 58, 48, 129, 60, 111, 48, 6, 62, 91, 17, 243, 61, 163, 102, 251, 60, 59, 91, 149, 62, 26, 92, 233, 189, 24, 234, 196, 61, 146, 46, 163, 61, 52, 163, 98, 62, 158, 82, 114, 61, 35, 207, 194, 189, 138, 247, 10, 61, 61, 161, 52, 190, 169, 188, 2, 190, 67, 221, 81, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 133, 31, 62, 58, 56, 140, 61, 210, 155, 29, 62, 12, 173, 17, 190, 16, 221, 3, 61, 31, 226, 88, 61, 121, 224, 67, 62, 132, 161, 148, 61, 226, 17, 61, 62, 161, 133, 143, 189, 148, 80, 176, 189, 218, 89, 252, 61, 180, 49, 146, 62, 7, 119, 33, 190, 113, 166, 134, 186, 109, 200, 75, 189, 19, 207, 236, 60, 255, 248, 121, 61, 206, 245, 45, 60, 33, 219, 184, 61, 42, 135, 26, 60, 37, 37, 108, 62, 92, 62, 10, 62, 20, 249, 171, 60, 138, 200, 19, 62, 192, 121, 6, 61, 240, 221, 215, 189, 227, 25, 20, 190, 225, 89, 83, 61, 144, 228, 15, 61, 119, 88, 128, 62, 89, 172, 163, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 251, 142, 62, 201, 132, 135, 62, 168, 35, 101, 190, 123, 109, 81, 61, 184, 63, 77, 190, 238, 215, 86, 62, 40, 238, 233, 190, 250, 240, 167, 61, 6, 198, 202, 188, 74, 27, 181, 61, 54, 94, 80, 190, 11, 195, 182, 189, 35, 190, 161, 190, 7, 233, 209, 189, 182, 155, 76, 188, 154, 196, 157, 188, 195, 165, 173, 189, 172, 96, 106, 190, 99, 54, 14, 190, 31, 246, 38, 62, 240, 214, 245, 60, 213, 87, 206, 62, 212, 5, 188, 189, 10, 142, 247, 61, 119, 155, 147, 190, 118, 229, 202, 61, 83, 108, 136, 189, 122, 10, 43, 62, 33, 165, 16, 62, 138, 108, 106, 62, 172, 11, 160, 190, 203, 201, 109, 190, 193, 191, 115, 189, 176, 99, 19, 190, 180, 187, 35, 190, 188, 236, 23, 190, 206, 191, 21, 190, 160, 57, 59, 190, 60, 209, 113, 61, 201, 22, 21, 189, 150, 247, 215, 189, 177, 160, 76, 61, 132, 77, 174, 189, 75, 97, 140, 60, 21, 8, 16, 190, 8, 13, 60, 61, 202, 58, 49, 62, 36, 195, 78, 61, 59, 141, 189, 61, 189, 132, 108, 61, 250, 155, 104, 189, 183, 130, 159, 189, 217, 132, 17, 62, 33, 142, 155, 60, 152, 170, 178, 61, 90, 49, 23, 190, 241, 218, 140, 189, 145, 14, 20, 190, 233, 171, 25, 190, 88, 170, 188, 189, 248, 46, 52, 190, 175, 161, 2, 62, 44, 55, 235, 189, 164, 13, 20, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {217, 140, 188, 61, 214, 185, 67, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {134, 3, 173, 191, 45, 53, 152, 63, 83, 16, 99, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {186, 122, 38, 192, 6, 255, 0, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0008/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}