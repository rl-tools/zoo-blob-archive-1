// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 107, 9, 62, 101, 107, 48, 63, 182, 187, 214, 190, 217, 81, 134, 63, 245, 18, 36, 191, 138, 36, 212, 190, 117, 67, 144, 189, 232, 9, 172, 189, 0, 223, 155, 62, 188, 162, 62, 190, 220, 45, 170, 63, 192, 114, 254, 62, 255, 60, 59, 191, 108, 181, 44, 63, 177, 23, 173, 62, 183, 176, 63, 191, 153, 18, 92, 191, 67, 61, 30, 190, 117, 8, 48, 63, 35, 126, 178, 63, 214, 57, 174, 62, 65, 195, 48, 189, 89, 252, 75, 61, 168, 32, 10, 63, 224, 62, 0, 63, 211, 113, 135, 63, 240, 139, 165, 62, 158, 17, 151, 62, 61, 251, 55, 63, 194, 146, 169, 190, 234, 120, 17, 63, 23, 64, 73, 63, 210, 148, 227, 62, 32, 108, 60, 63, 173, 197, 94, 63, 46, 236, 209, 62, 84, 243, 91, 62, 93, 0, 124, 62, 2, 249, 169, 190, 231, 105, 244, 188, 235, 159, 157, 190, 234, 54, 217, 186, 197, 162, 45, 191, 100, 152, 166, 190, 63, 157, 142, 62, 68, 49, 160, 189, 160, 86, 67, 63, 111, 65, 224, 62, 75, 201, 183, 190, 44, 184, 171, 62, 51, 38, 88, 62, 15, 174, 30, 62, 50, 30, 44, 63, 94, 41, 42, 62, 227, 100, 142, 190, 221, 36, 141, 62, 163, 57, 12, 191, 178, 250, 11, 63, 6, 6, 162, 63, 137, 176, 196, 62, 253, 131, 80, 59, 244, 150, 206, 191, 203, 28, 160, 190, 56, 153, 194, 189, 244, 143, 164, 62, 211, 137, 27, 189, 56, 96, 157, 62, 18, 60, 30, 190, 225, 107, 30, 63, 53, 164, 182, 190, 205, 237, 169, 190, 10, 26, 114, 62, 223, 73, 183, 190, 19, 207, 164, 63, 16, 205, 114, 62, 184, 113, 188, 190, 248, 35, 61, 63, 167, 209, 16, 62, 130, 44, 188, 188, 78, 185, 146, 191, 10, 41, 142, 190, 195, 133, 20, 191, 7, 217, 49, 63, 255, 112, 233, 61, 233, 75, 189, 191, 122, 57, 155, 190, 221, 133, 37, 190, 139, 223, 51, 63, 82, 24, 100, 191, 196, 4, 220, 190, 105, 58, 165, 62, 46, 102, 124, 191, 136, 224, 24, 63, 43, 202, 5, 63, 85, 218, 168, 190, 225, 199, 146, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {201, 182, 17, 191, 237, 116, 199, 61, 178, 63, 29, 191, 138, 231, 158, 61, 91, 170, 0, 191, 0, 177, 55, 62, 253, 86, 19, 190, 193, 64, 28, 188, 83, 156, 169, 190, 22, 139, 4, 63, 58, 88, 189, 190, 100, 228, 153, 60, 145, 76, 172, 62, 41, 218, 212, 190, 175, 25, 126, 190, 181, 3, 26, 191, 221, 243, 175, 62, 222, 200, 190, 62, 140, 124, 123, 62, 136, 122, 142, 190, 144, 254, 176, 61, 188, 136, 113, 62, 21, 10, 45, 63, 3, 204, 6, 191, 168, 236, 144, 189, 172, 182, 225, 62, 5, 157, 226, 189, 151, 194, 187, 62, 19, 229, 115, 62, 187, 201, 139, 190, 114, 19, 165, 187, 139, 77, 41, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 252, 223, 189, 209, 135, 156, 62, 135, 144, 81, 190, 232, 34, 32, 189, 147, 240, 110, 62, 28, 69, 153, 60, 32, 231, 232, 190, 248, 61, 1, 62, 202, 123, 182, 190, 146, 54, 144, 190, 28, 37, 120, 190, 161, 76, 27, 190, 122, 25, 24, 61, 82, 24, 51, 190, 178, 21, 117, 61, 219, 225, 237, 189, 141, 213, 17, 62, 230, 233, 153, 62, 217, 59, 57, 191, 224, 201, 232, 190, 147, 11, 157, 190, 198, 208, 79, 189, 208, 2, 144, 62, 194, 35, 0, 191, 57, 39, 128, 62, 56, 19, 37, 62, 231, 208, 125, 191, 182, 92, 60, 190, 178, 12, 158, 62, 173, 20, 39, 62, 251, 201, 76, 61, 107, 224, 8, 190, 225, 226, 89, 62, 212, 141, 186, 62, 18, 52, 16, 191, 53, 51, 193, 190, 80, 50, 222, 189, 197, 2, 228, 189, 24, 190, 3, 191, 180, 192, 114, 62, 34, 178, 15, 191, 245, 107, 13, 189, 32, 1, 123, 190, 136, 165, 200, 189, 120, 24, 170, 61, 160, 119, 153, 189, 117, 8, 145, 61, 96, 55, 47, 191, 7, 8, 34, 188, 244, 58, 209, 189, 27, 12, 135, 190, 222, 98, 22, 191, 48, 146, 83, 190, 26, 238, 140, 186, 117, 217, 163, 62, 29, 184, 45, 190, 40, 147, 8, 191, 110, 53, 222, 190, 168, 37, 170, 190, 234, 3, 175, 190, 139, 96, 225, 189, 53, 142, 164, 62, 236, 134, 173, 62, 21, 104, 164, 62, 61, 223, 81, 190, 108, 172, 38, 62, 65, 246, 186, 61, 152, 228, 154, 61, 227, 0, 177, 190, 164, 165, 182, 189, 87, 128, 152, 60, 215, 140, 0, 189, 30, 252, 14, 61, 78, 200, 168, 62, 237, 212, 187, 61, 129, 232, 6, 62, 56, 212, 51, 62, 32, 1, 28, 62, 119, 14, 66, 190, 111, 6, 160, 189, 204, 73, 31, 62, 181, 109, 160, 62, 16, 177, 50, 62, 73, 44, 30, 62, 54, 34, 0, 190, 22, 229, 68, 61, 67, 47, 103, 189, 69, 202, 212, 61, 254, 91, 72, 190, 40, 173, 165, 62, 29, 103, 76, 62, 216, 103, 193, 60, 124, 92, 228, 189, 171, 194, 126, 189, 132, 145, 60, 190, 159, 212, 143, 190, 156, 237, 135, 61, 135, 49, 0, 190, 127, 108, 187, 61, 206, 164, 61, 190, 92, 198, 2, 62, 198, 89, 225, 189, 68, 223, 47, 190, 204, 8, 6, 62, 214, 238, 18, 62, 42, 10, 87, 190, 6, 183, 222, 61, 218, 11, 14, 61, 230, 163, 237, 61, 194, 164, 37, 62, 249, 235, 236, 189, 74, 132, 198, 189, 115, 17, 180, 189, 90, 20, 2, 62, 57, 248, 5, 62, 212, 67, 91, 189, 131, 30, 30, 61, 203, 81, 196, 187, 37, 100, 63, 190, 92, 178, 62, 190, 103, 96, 29, 62, 218, 194, 3, 186, 33, 87, 234, 61, 195, 191, 156, 61, 156, 17, 20, 190, 183, 236, 40, 190, 8, 198, 226, 61, 59, 247, 154, 188, 185, 130, 207, 189, 125, 163, 21, 62, 173, 152, 176, 188, 60, 134, 224, 190, 253, 155, 149, 191, 125, 64, 155, 62, 179, 98, 66, 62, 103, 157, 36, 189, 155, 183, 59, 189, 34, 235, 249, 61, 235, 99, 94, 61, 189, 158, 210, 188, 166, 223, 98, 189, 13, 217, 195, 189, 31, 47, 196, 190, 188, 180, 76, 62, 138, 84, 160, 190, 166, 168, 164, 61, 192, 68, 194, 61, 188, 209, 147, 61, 82, 24, 160, 189, 0, 218, 48, 60, 236, 190, 12, 62, 5, 106, 99, 190, 0, 198, 118, 191, 105, 233, 168, 189, 172, 160, 34, 62, 160, 5, 133, 189, 75, 113, 20, 189, 119, 5, 27, 190, 45, 163, 156, 189, 44, 135, 60, 60, 90, 215, 55, 190, 31, 74, 143, 62, 137, 178, 147, 188, 166, 69, 41, 190, 42, 208, 224, 60, 27, 219, 26, 59, 34, 120, 8, 191, 83, 95, 97, 62, 46, 109, 13, 191, 252, 67, 34, 189, 203, 254, 137, 190, 229, 174, 216, 189, 196, 80, 61, 190, 180, 151, 5, 62, 59, 47, 252, 61, 68, 147, 240, 190, 241, 209, 30, 62, 135, 29, 63, 62, 126, 47, 32, 61, 38, 82, 237, 190, 91, 87, 168, 61, 246, 34, 148, 61, 73, 163, 29, 62, 136, 128, 75, 190, 211, 3, 149, 190, 106, 7, 1, 61, 126, 219, 134, 190, 44, 97, 203, 190, 180, 101, 123, 62, 108, 4, 120, 62, 62, 119, 85, 62, 105, 190, 111, 62, 205, 57, 34, 189, 84, 48, 81, 189, 61, 142, 242, 61, 87, 54, 204, 191, 205, 74, 21, 192, 235, 198, 193, 62, 230, 212, 66, 191, 137, 70, 77, 191, 212, 170, 172, 189, 232, 29, 43, 60, 241, 248, 67, 60, 202, 67, 173, 190, 194, 67, 236, 190, 68, 88, 36, 190, 45, 161, 119, 191, 49, 181, 166, 188, 216, 215, 180, 60, 177, 115, 183, 191, 162, 182, 125, 62, 162, 10, 205, 190, 134, 253, 60, 62, 242, 10, 9, 62, 99, 195, 148, 191, 40, 143, 232, 62, 116, 79, 52, 191, 179, 16, 36, 62, 89, 161, 139, 60, 172, 60, 136, 62, 168, 113, 131, 62, 140, 116, 148, 190, 116, 139, 139, 191, 15, 250, 156, 61, 222, 16, 135, 188, 32, 78, 4, 190, 31, 154, 225, 188, 241, 31, 60, 61, 227, 107, 239, 61, 208, 33, 196, 189, 4, 97, 139, 189, 172, 151, 21, 61, 191, 195, 7, 190, 122, 20, 18, 60, 199, 70, 251, 189, 250, 60, 57, 190, 171, 54, 160, 189, 60, 32, 218, 189, 249, 116, 235, 188, 86, 108, 155, 189, 84, 228, 190, 189, 36, 139, 1, 62, 28, 142, 241, 189, 241, 181, 100, 61, 80, 200, 18, 62, 223, 214, 211, 189, 130, 203, 59, 189, 105, 71, 181, 61, 47, 19, 243, 188, 187, 102, 69, 190, 139, 74, 129, 188, 190, 55, 55, 61, 113, 73, 252, 188, 159, 45, 6, 190, 183, 66, 87, 190, 219, 96, 159, 61, 201, 22, 31, 191, 42, 96, 149, 61, 102, 253, 161, 61, 29, 132, 138, 190, 145, 86, 220, 188, 159, 20, 73, 62, 254, 159, 49, 190, 133, 203, 153, 189, 11, 112, 130, 190, 139, 184, 161, 189, 111, 197, 233, 189, 17, 154, 154, 60, 83, 160, 45, 190, 215, 203, 98, 189, 61, 251, 91, 61, 51, 137, 124, 190, 109, 21, 51, 62, 96, 101, 182, 190, 161, 109, 218, 187, 205, 79, 69, 190, 134, 153, 10, 62, 127, 179, 217, 187, 193, 122, 28, 62, 98, 222, 20, 62, 187, 6, 194, 190, 225, 38, 130, 61, 205, 108, 248, 61, 191, 114, 188, 60, 215, 113, 111, 188, 27, 110, 20, 190, 153, 47, 61, 62, 245, 247, 220, 189, 57, 27, 115, 62, 159, 55, 148, 62, 218, 165, 27, 62, 45, 96, 161, 190, 28, 188, 173, 190, 219, 198, 9, 190, 123, 83, 180, 190, 103, 127, 47, 62, 88, 173, 89, 190, 207, 38, 115, 189, 223, 196, 230, 61, 188, 74, 118, 188, 162, 87, 246, 61, 152, 223, 6, 189, 71, 185, 20, 62, 168, 40, 162, 189, 4, 42, 79, 190, 249, 167, 172, 62, 178, 121, 1, 60, 197, 206, 214, 190, 214, 87, 13, 62, 3, 251, 207, 189, 221, 193, 163, 61, 119, 230, 84, 62, 70, 88, 43, 191, 0, 203, 143, 191, 64, 210, 160, 187, 182, 132, 188, 191, 0, 254, 14, 191, 195, 107, 166, 62, 106, 157, 91, 62, 55, 220, 139, 62, 79, 234, 33, 62, 128, 123, 150, 62, 148, 208, 196, 189, 27, 43, 204, 189, 94, 47, 170, 62, 134, 147, 23, 61, 30, 206, 231, 190, 31, 237, 93, 61, 240, 100, 145, 61, 110, 5, 233, 190, 98, 239, 139, 187, 139, 135, 210, 190, 234, 103, 98, 62, 236, 53, 33, 190, 43, 71, 143, 62, 34, 101, 175, 189, 202, 88, 81, 62, 166, 48, 188, 190, 107, 255, 184, 190, 196, 21, 54, 190, 0, 238, 6, 63, 133, 197, 209, 190, 252, 216, 216, 61, 105, 180, 44, 61, 168, 187, 71, 190, 175, 163, 37, 190, 68, 253, 56, 63, 55, 112, 28, 190, 78, 214, 38, 190, 206, 2, 159, 62, 118, 229, 178, 62, 83, 203, 51, 62, 64, 203, 161, 190, 172, 130, 18, 190, 119, 39, 5, 190, 7, 55, 161, 191, 237, 217, 179, 191, 106, 15, 152, 62, 10, 207, 48, 62, 137, 104, 35, 190, 24, 72, 207, 62, 39, 142, 107, 62, 86, 81, 201, 190, 198, 9, 235, 60, 106, 253, 141, 62, 83, 34, 26, 187, 143, 143, 139, 191, 24, 88, 66, 190, 184, 182, 138, 190, 203, 7, 113, 62, 2, 40, 36, 61, 38, 50, 179, 62, 15, 91, 51, 189, 180, 94, 156, 188, 27, 212, 149, 190, 210, 99, 54, 62, 69, 151, 151, 191, 226, 135, 149, 61, 142, 45, 20, 59, 219, 181, 63, 60, 174, 135, 32, 62, 173, 207, 75, 190, 180, 1, 76, 191, 184, 67, 175, 190, 205, 30, 148, 188, 20, 146, 154, 189, 221, 73, 232, 189, 232, 107, 175, 191, 63, 248, 18, 192, 179, 45, 172, 62, 50, 55, 74, 62, 59, 245, 7, 191, 92, 7, 138, 60, 168, 129, 99, 62, 249, 49, 34, 62, 216, 115, 20, 62, 210, 127, 49, 190, 190, 162, 171, 61, 39, 172, 155, 191, 2, 252, 128, 188, 48, 195, 241, 189, 214, 82, 254, 61, 104, 136, 113, 188, 124, 153, 91, 62, 26, 178, 83, 62, 221, 234, 37, 189, 98, 185, 29, 59, 144, 38, 99, 62, 25, 55, 93, 191, 189, 189, 15, 62, 176, 248, 160, 60, 157, 172, 32, 59, 190, 32, 210, 189, 95, 77, 59, 190, 225, 255, 126, 190, 62, 4, 203, 189, 68, 204, 5, 62, 120, 102, 230, 61, 9, 150, 72, 62, 33, 228, 99, 62, 209, 32, 42, 59, 101, 179, 150, 61, 173, 117, 160, 188, 86, 205, 104, 62, 13, 204, 55, 190, 102, 41, 108, 61, 174, 219, 156, 190, 3, 1, 34, 190, 11, 155, 247, 188, 46, 232, 10, 189, 98, 169, 88, 62, 111, 96, 0, 189, 224, 153, 76, 62, 237, 227, 182, 190, 18, 45, 172, 190, 198, 240, 114, 190, 238, 99, 42, 63, 246, 99, 94, 190, 42, 207, 51, 189, 86, 138, 132, 62, 207, 246, 120, 62, 230, 41, 132, 61, 25, 185, 3, 63, 65, 216, 251, 60, 246, 95, 12, 190, 62, 74, 131, 62, 61, 24, 11, 62, 198, 160, 213, 188, 107, 26, 135, 190, 235, 26, 12, 191, 225, 206, 223, 189, 159, 106, 57, 191, 253, 232, 96, 190, 13, 191, 207, 62, 187, 189, 29, 190, 200, 126, 191, 190, 9, 5, 197, 190, 238, 198, 220, 189, 236, 239, 5, 190, 129, 118, 142, 190, 12, 32, 49, 61, 221, 251, 160, 60, 102, 40, 46, 63, 26, 170, 214, 190, 184, 69, 134, 190, 121, 198, 220, 190, 101, 203, 128, 62, 123, 2, 8, 191, 91, 175, 133, 62, 37, 226, 239, 188, 2, 123, 184, 190, 5, 141, 137, 189, 111, 201, 242, 190, 12, 189, 221, 61, 29, 147, 168, 62, 67, 74, 36, 62, 79, 247, 151, 62, 220, 184, 218, 190, 191, 232, 148, 62, 184, 191, 52, 191, 196, 158, 230, 189, 59, 43, 128, 190, 115, 138, 105, 190, 55, 189, 122, 190, 240, 20, 155, 190, 157, 115, 164, 62, 253, 176, 137, 62, 53, 130, 96, 190, 203, 36, 165, 62, 49, 222, 134, 62, 171, 242, 141, 61, 92, 24, 32, 62, 60, 198, 196, 61, 26, 191, 222, 61, 197, 57, 79, 191, 59, 38, 180, 190, 41, 206, 242, 60, 11, 42, 224, 62, 214, 231, 0, 62, 120, 145, 120, 62, 233, 190, 171, 60, 204, 190, 104, 188, 141, 205, 60, 189, 198, 136, 11, 191, 240, 124, 20, 190, 145, 31, 104, 62, 194, 105, 92, 62, 128, 181, 4, 62, 160, 57, 134, 187, 14, 31, 2, 191, 148, 210, 215, 190, 95, 122, 103, 190, 13, 153, 13, 191, 216, 208, 250, 61, 231, 122, 187, 61, 101, 236, 155, 61, 249, 158, 132, 62, 109, 12, 42, 190, 32, 77, 0, 61, 151, 255, 6, 190, 74, 155, 251, 190, 215, 225, 103, 190, 225, 56, 98, 191, 125, 4, 15, 191, 27, 192, 195, 190, 193, 3, 152, 189, 57, 2, 54, 190, 101, 196, 16, 62, 4, 207, 249, 61, 184, 176, 109, 62, 102, 13, 27, 191, 42, 30, 201, 190, 205, 138, 18, 62, 133, 96, 133, 188, 211, 29, 51, 62, 235, 130, 43, 190, 14, 116, 201, 62, 149, 118, 50, 62, 212, 78, 170, 60, 196, 37, 155, 62, 231, 42, 174, 189, 59, 129, 67, 61, 247, 96, 221, 189, 134, 27, 161, 189, 178, 119, 28, 190, 198, 122, 250, 189, 109, 178, 12, 62, 242, 65, 76, 191, 173, 68, 189, 191, 157, 148, 161, 62, 94, 34, 115, 62, 176, 189, 194, 190, 211, 222, 243, 62, 24, 132, 83, 62, 165, 97, 149, 62, 187, 178, 119, 60, 222, 95, 212, 189, 49, 204, 0, 190, 230, 144, 139, 191, 131, 181, 140, 62, 125, 22, 122, 190, 233, 0, 49, 187, 58, 151, 90, 61, 144, 241, 120, 62, 126, 133, 82, 61, 83, 25, 56, 188, 236, 20, 236, 60, 187, 1, 177, 62, 86, 33, 106, 191, 104, 34, 131, 62, 140, 231, 156, 61, 80, 108, 82, 62, 64, 16, 184, 189, 111, 13, 109, 190, 221, 80, 7, 191, 214, 57, 231, 189, 220, 37, 110, 62, 159, 24, 186, 62, 187, 110, 2, 191, 223, 254, 169, 190, 14, 249, 31, 190, 77, 72, 165, 190, 133, 154, 31, 191, 142, 189, 93, 190, 220, 149, 28, 190, 170, 215, 55, 190, 207, 160, 31, 191, 85, 151, 49, 191, 32, 80, 40, 61, 68, 93, 161, 188, 15, 76, 49, 191, 197, 180, 41, 190, 37, 109, 132, 190, 140, 198, 73, 191, 34, 8, 143, 190, 197, 170, 227, 190, 183, 96, 31, 62, 134, 147, 178, 190, 24, 55, 12, 62, 68, 241, 163, 190, 111, 157, 27, 190, 94, 153, 132, 191, 18, 112, 87, 62, 32, 70, 167, 191, 93, 175, 57, 191, 70, 165, 133, 62, 205, 48, 225, 62, 85, 146, 159, 61, 100, 140, 31, 190, 34, 6, 159, 190, 7, 249, 235, 189, 192, 254, 134, 61, 47, 166, 247, 62, 23, 58, 34, 63, 107, 64, 156, 61, 170, 245, 123, 62, 214, 183, 5, 62, 132, 236, 113, 191, 51, 154, 97, 60, 220, 97, 62, 62, 106, 105, 27, 191, 16, 161, 44, 62, 180, 186, 238, 61, 38, 25, 88, 190, 57, 13, 185, 61, 235, 1, 144, 62, 155, 247, 39, 191, 136, 27, 156, 61, 135, 109, 211, 61, 23, 21, 53, 190, 15, 81, 112, 61, 135, 13, 160, 190, 5, 222, 48, 62, 228, 185, 37, 62, 10, 104, 104, 189, 11, 156, 210, 61, 134, 183, 201, 62, 71, 191, 155, 190, 5, 112, 132, 62, 173, 84, 26, 190, 201, 56, 216, 61, 75, 254, 145, 62, 154, 201, 111, 189, 147, 88, 119, 190, 86, 53, 7, 191, 227, 117, 98, 189, 247, 166, 220, 190, 12, 178, 114, 62, 169, 221, 10, 191, 185, 14, 51, 190, 105, 185, 142, 190, 106, 246, 198, 186, 146, 40, 122, 61, 225, 88, 184, 61, 87, 76, 38, 189, 60, 90, 82, 190, 16, 180, 169, 189, 82, 40, 181, 189, 155, 231, 37, 190, 171, 6, 187, 190, 72, 210, 20, 62, 211, 252, 172, 189, 101, 201, 197, 61, 43, 171, 127, 62, 211, 228, 117, 190, 105, 47, 107, 191, 153, 7, 155, 61, 105, 186, 36, 191, 101, 242, 175, 188, 191, 227, 173, 62, 187, 198, 167, 62, 153, 84, 137, 61, 147, 167, 5, 62, 7, 231, 173, 62, 247, 110, 233, 190, 189, 253, 248, 61, 75, 141, 21, 63, 252, 132, 49, 187, 161, 220, 26, 191, 95, 98, 228, 61, 186, 249, 37, 190, 42, 254, 22, 190, 143, 188, 89, 190, 112, 82, 132, 190, 243, 72, 43, 62, 42, 85, 48, 189, 29, 182, 149, 189, 215, 162, 188, 190, 64, 1, 45, 62, 216, 135, 153, 189, 162, 235, 172, 190, 206, 214, 128, 190, 46, 14, 11, 190, 122, 153, 246, 189, 120, 5, 162, 61, 211, 70, 16, 191, 150, 186, 41, 62, 215, 5, 232, 188, 145, 252, 70, 190, 151, 80, 115, 190, 144, 127, 12, 62, 239, 214, 132, 62, 78, 170, 126, 62, 160, 67, 145, 62, 106, 148, 130, 61, 96, 22, 124, 190, 9, 208, 16, 62, 88, 159, 166, 190, 135, 253, 16, 190, 131, 83, 32, 60, 87, 244, 240, 60, 100, 84, 182, 61, 251, 28, 33, 61, 254, 90, 160, 62, 3, 41, 124, 62, 200, 69, 171, 61, 188, 20, 254, 188, 208, 69, 0, 190, 211, 134, 65, 62, 6, 168, 41, 62, 154, 53, 85, 61, 241, 100, 23, 190, 12, 80, 84, 62, 160, 17, 184, 189, 8, 141, 3, 191, 202, 100, 207, 61, 77, 153, 237, 189, 21, 124, 218, 62, 121, 100, 31, 191, 18, 229, 237, 187, 38, 171, 142, 190, 17, 190, 210, 61, 154, 85, 154, 189, 15, 52, 40, 191, 152, 240, 64, 62, 92, 158, 174, 190, 6, 31, 75, 61, 25, 136, 54, 189, 194, 67, 13, 190, 249, 41, 117, 189, 119, 30, 30, 190, 109, 5, 167, 189, 106, 248, 154, 61, 87, 5, 203, 61, 231, 97, 194, 61, 213, 231, 255, 189, 67, 178, 67, 189, 196, 246, 231, 189, 214, 99, 253, 58, 252, 216, 49, 190, 165, 223, 204, 189, 25, 115, 165, 189, 54, 4, 239, 60, 190, 102, 52, 190, 16, 25, 107, 61, 121, 172, 212, 61, 31, 233, 148, 189, 221, 151, 63, 189, 196, 225, 46, 190, 174, 109, 175, 189, 104, 104, 18, 189, 123, 20, 8, 61, 131, 199, 16, 190, 42, 56, 113, 189, 6, 164, 167, 60, 82, 76, 131, 58, 194, 64, 23, 190, 81, 50, 153, 61, 157, 244, 75, 190, 49, 99, 26, 189, 161, 171, 58, 60, 109, 39, 1, 191, 218, 88, 89, 191, 109, 162, 82, 61, 25, 79, 51, 189, 252, 43, 158, 190, 134, 246, 144, 189, 123, 113, 164, 62, 173, 204, 134, 62, 38, 216, 151, 61, 119, 144, 61, 60, 121, 14, 227, 60, 38, 70, 51, 191, 223, 115, 224, 190, 122, 248, 144, 189, 216, 4, 33, 188, 13, 239, 174, 62, 100, 204, 220, 61, 238, 125, 65, 190, 82, 180, 166, 59, 63, 100, 205, 60, 41, 41, 39, 62, 235, 61, 227, 190, 114, 147, 41, 62, 28, 72, 2, 62, 132, 62, 98, 61, 8, 9, 203, 60, 116, 117, 146, 190, 76, 188, 103, 190, 223, 195, 231, 189, 89, 50, 152, 61, 49, 73, 176, 61, 71, 91, 149, 190, 197, 146, 74, 61, 106, 39, 160, 62, 157, 135, 97, 62, 40, 110, 153, 190, 41, 236, 77, 62, 107, 133, 0, 62, 189, 112, 62, 189, 198, 243, 15, 190, 138, 181, 3, 62, 229, 176, 12, 62, 204, 196, 238, 189, 131, 136, 198, 187, 91, 106, 168, 61, 196, 67, 61, 62, 157, 253, 79, 62, 170, 227, 41, 189, 201, 213, 194, 189, 115, 83, 70, 190, 249, 70, 39, 62, 46, 184, 130, 61, 162, 142, 200, 60, 197, 3, 58, 62, 189, 192, 132, 62, 53, 111, 160, 190, 78, 232, 104, 62, 238, 147, 187, 62, 65, 35, 101, 62, 158, 47, 58, 62, 186, 102, 175, 62, 191, 21, 106, 188, 254, 70, 133, 60, 6, 17, 44, 190, 2, 3, 63, 61, 165, 106, 217, 59, 47, 101, 68, 61, 51, 60, 6, 62, 226, 106, 69, 61, 125, 62, 163, 61, 82, 126, 157, 189, 84, 67, 186, 189, 253, 35, 249, 61, 26, 237, 251, 189, 18, 53, 29, 188, 168, 36, 77, 189, 192, 148, 33, 190, 122, 94, 5, 190, 139, 220, 11, 62, 45, 3, 171, 61, 41, 229, 101, 189, 241, 88, 117, 186, 59, 201, 115, 189, 63, 189, 212, 187, 20, 193, 73, 60, 185, 15, 71, 190, 223, 177, 228, 188, 30, 137, 227, 61, 6, 139, 80, 190, 40, 13, 57, 190, 139, 67, 62, 190, 35, 223, 46, 190, 54, 217, 60, 61, 67, 210, 245, 189, 188, 191, 151, 189, 32, 90, 244, 189, 129, 187, 141, 61, 55, 70, 107, 189, 183, 65, 35, 62, 130, 1, 226, 189, 5, 156, 101, 60, 162, 248, 144, 61, 134, 80, 210, 185, 50, 22, 47, 62, 74, 61, 254, 60, 141, 110, 225, 61, 5, 203, 25, 190, 192, 81, 28, 62, 2, 241, 92, 189, 142, 222, 147, 189, 91, 233, 203, 189, 197, 201, 68, 189, 234, 26, 8, 190, 94, 159, 29, 190, 68, 176, 17, 62, 184, 36, 219, 189, 18, 206, 237, 61, 59, 63, 110, 189, 22, 205, 160, 188, 158, 188, 23, 60, 195, 126, 224, 189, 42, 106, 202, 60, 230, 50, 150, 189, 92, 246, 0, 190, 156, 117, 93, 61, 197, 3, 247, 61, 130, 154, 149, 190, 107, 7, 148, 190, 152, 137, 152, 191, 132, 8, 105, 191, 15, 109, 166, 62, 17, 100, 73, 190, 185, 196, 230, 190, 2, 120, 16, 190, 235, 228, 40, 189, 163, 176, 221, 60, 210, 242, 2, 189, 20, 204, 173, 189, 30, 101, 172, 61, 24, 239, 201, 62, 29, 107, 19, 190, 207, 23, 92, 191, 123, 210, 251, 190, 32, 113, 67, 61, 26, 253, 96, 189, 131, 50, 36, 62, 247, 50, 96, 190, 90, 143, 116, 190, 29, 43, 6, 63, 8, 147, 21, 191, 153, 111, 220, 61, 217, 84, 142, 62, 41, 221, 209, 190, 8, 221, 189, 62, 61, 90, 131, 189, 22, 85, 165, 61, 197, 133, 78, 190, 84, 3, 43, 62, 7, 75, 18, 60, 196, 105, 240, 190, 57, 190, 10, 189, 149, 233, 22, 63, 195, 67, 210, 61, 209, 160, 43, 191, 236, 227, 185, 188, 124, 68, 181, 190, 245, 176, 193, 189, 133, 19, 255, 190, 126, 23, 132, 190, 148, 255, 12, 62, 217, 42, 147, 189, 113, 145, 253, 61, 36, 70, 237, 190, 245, 128, 166, 61, 26, 113, 142, 187, 177, 181, 123, 190, 32, 61, 223, 190, 105, 119, 137, 61, 116, 92, 187, 189, 133, 128, 140, 62, 46, 102, 136, 190, 191, 103, 1, 190, 226, 143, 161, 190, 121, 195, 228, 188, 204, 134, 8, 189, 57, 146, 174, 62, 144, 173, 169, 62, 181, 213, 46, 62, 195, 229, 241, 61, 79, 176, 190, 60, 156, 90, 50, 189, 6, 97, 179, 186, 110, 129, 234, 189, 207, 17, 160, 190, 226, 30, 229, 190, 195, 80, 62, 62, 73, 181, 254, 61, 141, 75, 32, 61, 22, 105, 222, 62, 70, 94, 103, 62, 147, 1, 226, 60, 154, 145, 107, 61, 63, 125, 238, 189, 41, 210, 32, 189, 81, 79, 147, 189, 232, 58, 15, 190, 252, 181, 10, 62, 28, 156, 121, 61, 24, 175, 106, 62, 197, 211, 225, 191, 117, 39, 228, 59, 168, 30, 74, 62, 143, 10, 91, 60, 13, 154, 77, 190, 87, 25, 10, 62, 178, 100, 43, 191, 98, 155, 38, 190, 40, 86, 68, 191, 146, 123, 225, 190, 32, 18, 223, 188, 223, 249, 99, 190, 241, 111, 196, 61, 231, 149, 156, 190, 61, 246, 189, 61, 120, 108, 94, 190, 48, 53, 76, 191, 214, 71, 161, 186, 108, 236, 178, 62, 173, 73, 179, 189, 49, 50, 207, 62, 139, 28, 143, 62, 5, 29, 177, 62, 75, 134, 200, 61, 242, 89, 233, 60, 6, 120, 23, 62, 152, 71, 4, 190, 208, 190, 122, 61, 203, 216, 14, 188, 28, 195, 205, 61, 14, 232, 44, 62, 63, 64, 152, 62, 180, 23, 198, 190, 245, 30, 148, 62, 173, 70, 202, 188, 226, 83, 181, 62, 54, 198, 166, 190, 174, 233, 37, 62, 171, 183, 173, 190, 108, 69, 79, 190, 219, 238, 20, 190, 129, 11, 5, 191, 233, 239, 61, 61, 244, 169, 248, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 57, 63, 62, 197, 137, 82, 61, 241, 133, 128, 62, 23, 60, 28, 190, 55, 100, 202, 61, 103, 53, 254, 61, 72, 173, 168, 62, 38, 90, 46, 61, 120, 11, 167, 62, 135, 246, 172, 189, 253, 17, 49, 189, 91, 114, 105, 62, 12, 88, 195, 62, 38, 40, 228, 189, 166, 70, 154, 61, 252, 5, 17, 61, 250, 139, 30, 62, 204, 23, 170, 61, 165, 180, 126, 186, 244, 78, 140, 62, 239, 86, 118, 61, 173, 197, 85, 62, 147, 161, 52, 61, 20, 249, 171, 60, 16, 70, 201, 61, 204, 209, 21, 62, 16, 242, 235, 189, 33, 142, 22, 190, 210, 85, 114, 61, 226, 89, 208, 187, 121, 110, 5, 62, 109, 161, 188, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {72, 107, 33, 63, 21, 84, 25, 63, 26, 251, 13, 190, 220, 96, 81, 61, 152, 203, 101, 190, 60, 204, 172, 62, 34, 25, 186, 191, 89, 96, 140, 61, 84, 106, 103, 60, 192, 181, 39, 63, 179, 29, 45, 191, 60, 84, 86, 191, 103, 159, 32, 191, 152, 250, 153, 190, 59, 112, 99, 63, 231, 54, 148, 190, 162, 98, 80, 191, 167, 86, 36, 191, 180, 89, 200, 191, 10, 70, 209, 62, 244, 34, 225, 62, 54, 65, 22, 63, 116, 222, 24, 191, 10, 142, 247, 61, 222, 58, 100, 190, 4, 209, 213, 61, 89, 196, 136, 189, 124, 240, 37, 62, 187, 214, 28, 63, 151, 89, 212, 62, 106, 27, 248, 190, 29, 160, 16, 191, 65, 218, 75, 61, 16, 191, 170, 190, 138, 79, 142, 190, 237, 214, 18, 190, 47, 106, 59, 190, 95, 19, 74, 190, 105, 146, 85, 61, 162, 196, 87, 60, 81, 140, 182, 190, 32, 60, 94, 189, 210, 170, 29, 190, 16, 239, 136, 62, 167, 116, 75, 190, 240, 10, 129, 61, 6, 213, 159, 60, 126, 27, 98, 62, 81, 250, 197, 61, 180, 184, 154, 62, 30, 89, 190, 62, 152, 91, 137, 189, 227, 226, 184, 62, 198, 34, 199, 59, 104, 117, 199, 58, 90, 49, 23, 190, 134, 134, 248, 189, 113, 162, 146, 190, 109, 77, 25, 190, 95, 7, 197, 189, 96, 118, 156, 61, 153, 210, 71, 62, 241, 59, 168, 190, 175, 109, 135, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {82, 236, 4, 62, 219, 253, 239, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {16, 55, 193, 188, 235, 22, 240, 191, 94, 185, 218, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {88, 243, 36, 63, 39, 20, 50, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0008/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}