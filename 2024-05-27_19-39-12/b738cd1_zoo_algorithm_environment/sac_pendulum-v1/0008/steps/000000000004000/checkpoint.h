// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {248, 135, 14, 190, 127, 83, 24, 63, 88, 127, 213, 190, 183, 202, 111, 63, 64, 31, 241, 190, 90, 7, 240, 190, 184, 108, 129, 190, 127, 25, 4, 190, 77, 197, 156, 62, 201, 30, 132, 190, 218, 50, 164, 62, 214, 15, 13, 63, 21, 103, 45, 191, 184, 34, 42, 62, 235, 53, 157, 62, 2, 234, 51, 191, 82, 251, 189, 190, 31, 243, 229, 189, 133, 156, 46, 63, 239, 122, 132, 63, 40, 195, 148, 62, 173, 171, 108, 189, 212, 43, 169, 190, 118, 90, 36, 63, 254, 3, 170, 62, 132, 40, 186, 62, 199, 133, 204, 62, 228, 15, 143, 62, 149, 243, 70, 63, 177, 45, 170, 190, 145, 146, 33, 63, 189, 189, 128, 62, 92, 100, 246, 62, 227, 39, 54, 63, 247, 179, 235, 62, 66, 37, 204, 62, 108, 205, 201, 62, 161, 234, 209, 62, 241, 202, 197, 190, 231, 105, 244, 188, 235, 159, 157, 190, 234, 54, 217, 186, 64, 21, 149, 190, 186, 17, 1, 191, 12, 185, 128, 62, 48, 62, 152, 188, 218, 149, 93, 62, 83, 161, 235, 62, 109, 181, 76, 190, 118, 142, 128, 189, 217, 224, 215, 62, 40, 250, 113, 62, 189, 206, 223, 62, 20, 255, 192, 60, 198, 6, 199, 190, 245, 161, 227, 62, 141, 252, 12, 191, 138, 73, 14, 63, 108, 5, 45, 63, 21, 62, 220, 62, 142, 69, 16, 190, 164, 3, 131, 191, 59, 190, 50, 190, 46, 255, 23, 188, 156, 225, 243, 62, 201, 83, 114, 189, 8, 180, 30, 63, 179, 48, 162, 190, 109, 56, 245, 62, 64, 76, 126, 190, 204, 240, 169, 190, 145, 146, 154, 62, 25, 250, 52, 190, 35, 126, 9, 63, 204, 31, 46, 62, 181, 170, 129, 190, 14, 11, 193, 62, 2, 203, 146, 61, 54, 199, 117, 190, 221, 2, 39, 191, 156, 103, 19, 190, 97, 97, 180, 190, 100, 47, 211, 62, 76, 241, 160, 61, 73, 30, 64, 191, 243, 183, 97, 61, 24, 70, 45, 61, 98, 139, 40, 63, 0, 215, 25, 191, 85, 70, 245, 190, 145, 196, 170, 61, 219, 196, 87, 191, 141, 165, 239, 62, 154, 207, 51, 189, 147, 152, 146, 188, 68, 104, 162, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {181, 161, 3, 191, 153, 5, 113, 62, 29, 54, 225, 190, 119, 9, 5, 189, 184, 20, 10, 191, 249, 194, 86, 62, 175, 205, 6, 189, 151, 187, 170, 61, 203, 43, 205, 190, 173, 121, 6, 63, 242, 17, 107, 190, 20, 159, 50, 62, 154, 150, 181, 62, 41, 218, 212, 190, 7, 107, 227, 190, 24, 34, 31, 191, 17, 229, 170, 62, 138, 85, 190, 62, 71, 58, 185, 188, 191, 13, 17, 190, 232, 129, 35, 62, 182, 64, 167, 62, 34, 175, 41, 63, 192, 9, 210, 190, 208, 213, 201, 61, 86, 176, 246, 62, 4, 185, 168, 190, 35, 85, 201, 62, 101, 140, 237, 62, 162, 190, 75, 190, 181, 2, 143, 61, 218, 238, 215, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 194, 47, 61, 62, 201, 162, 62, 131, 149, 54, 190, 222, 158, 59, 187, 185, 180, 43, 62, 141, 6, 71, 60, 118, 80, 135, 190, 37, 88, 240, 61, 132, 229, 38, 190, 200, 238, 164, 190, 114, 231, 93, 190, 89, 3, 16, 190, 249, 92, 174, 61, 82, 24, 51, 190, 198, 166, 136, 61, 229, 177, 181, 189, 37, 151, 5, 62, 38, 104, 133, 62, 30, 90, 234, 190, 110, 2, 133, 190, 65, 232, 20, 190, 203, 224, 211, 189, 155, 217, 139, 62, 242, 60, 4, 191, 107, 38, 50, 62, 163, 207, 27, 62, 13, 91, 208, 188, 104, 82, 75, 190, 67, 47, 30, 62, 173, 223, 73, 62, 50, 97, 194, 61, 164, 78, 224, 189, 13, 125, 40, 61, 223, 103, 160, 62, 102, 144, 200, 190, 172, 12, 35, 187, 242, 57, 188, 62, 177, 14, 3, 61, 134, 165, 161, 190, 2, 72, 160, 62, 90, 7, 75, 190, 76, 80, 174, 189, 111, 142, 31, 190, 179, 157, 163, 189, 198, 12, 187, 61, 160, 119, 153, 189, 166, 29, 210, 61, 87, 242, 143, 190, 233, 190, 228, 60, 133, 205, 168, 188, 206, 41, 147, 190, 250, 135, 177, 190, 20, 36, 164, 189, 198, 66, 96, 189, 229, 182, 161, 62, 11, 213, 71, 190, 158, 3, 235, 186, 76, 123, 181, 189, 57, 199, 173, 189, 18, 173, 213, 61, 23, 156, 25, 61, 64, 206, 135, 62, 216, 1, 134, 62, 118, 157, 34, 61, 125, 60, 88, 190, 166, 44, 193, 61, 211, 135, 43, 62, 64, 174, 69, 61, 213, 160, 182, 190, 159, 9, 27, 190, 154, 165, 116, 188, 125, 213, 18, 61, 48, 153, 46, 61, 96, 94, 150, 62, 211, 223, 254, 61, 29, 253, 16, 62, 81, 2, 230, 61, 32, 1, 28, 62, 244, 16, 213, 189, 166, 187, 92, 189, 154, 124, 150, 61, 137, 177, 113, 62, 56, 245, 36, 62, 250, 20, 250, 61, 135, 73, 59, 189, 223, 254, 136, 189, 235, 99, 141, 189, 114, 121, 89, 62, 91, 198, 71, 190, 201, 109, 26, 62, 173, 126, 169, 61, 179, 89, 40, 190, 225, 87, 163, 187, 126, 205, 253, 189, 26, 146, 16, 190, 253, 122, 150, 190, 87, 43, 161, 61, 106, 178, 223, 189, 127, 108, 187, 61, 206, 164, 61, 190, 92, 198, 2, 62, 135, 192, 218, 189, 131, 36, 47, 190, 204, 8, 6, 62, 214, 238, 18, 62, 5, 31, 79, 190, 6, 183, 222, 61, 218, 11, 14, 61, 28, 172, 0, 62, 194, 164, 37, 62, 249, 235, 236, 189, 74, 132, 198, 189, 53, 69, 179, 189, 136, 160, 1, 62, 202, 250, 17, 62, 212, 67, 91, 189, 99, 93, 52, 61, 191, 26, 64, 187, 37, 100, 63, 190, 92, 178, 62, 190, 87, 182, 24, 62, 58, 195, 3, 187, 33, 87, 234, 61, 243, 186, 153, 61, 12, 169, 20, 190, 179, 60, 26, 190, 8, 198, 226, 61, 0, 210, 31, 188, 91, 17, 142, 189, 98, 232, 222, 61, 52, 80, 20, 62, 220, 95, 244, 188, 123, 13, 9, 191, 89, 34, 104, 62, 36, 22, 81, 62, 84, 25, 227, 188, 14, 197, 42, 60, 81, 96, 87, 62, 15, 79, 247, 61, 141, 235, 171, 60, 53, 7, 57, 189, 13, 217, 195, 189, 242, 91, 28, 190, 237, 122, 97, 62, 180, 31, 98, 190, 58, 128, 14, 62, 54, 41, 14, 62, 57, 175, 177, 61, 9, 204, 169, 189, 2, 186, 11, 62, 6, 19, 217, 61, 150, 91, 157, 187, 95, 144, 42, 190, 143, 134, 138, 189, 46, 85, 133, 61, 50, 219, 135, 189, 236, 138, 107, 61, 153, 162, 38, 190, 228, 178, 222, 189, 5, 22, 138, 61, 117, 4, 56, 190, 113, 68, 131, 62, 49, 232, 186, 59, 178, 192, 223, 61, 38, 34, 53, 62, 167, 20, 143, 189, 140, 33, 179, 190, 148, 145, 116, 62, 236, 5, 129, 190, 242, 178, 74, 189, 68, 60, 102, 190, 182, 33, 210, 189, 64, 134, 14, 190, 180, 151, 5, 62, 79, 94, 131, 61, 74, 62, 140, 190, 202, 74, 91, 62, 169, 235, 129, 62, 41, 84, 128, 61, 73, 196, 106, 190, 190, 251, 244, 61, 109, 59, 64, 61, 79, 202, 1, 62, 48, 13, 142, 190, 187, 182, 237, 60, 230, 194, 104, 62, 180, 90, 228, 189, 46, 27, 20, 190, 172, 239, 39, 62, 121, 41, 112, 62, 197, 216, 231, 61, 210, 170, 178, 61, 35, 154, 196, 189, 17, 21, 24, 190, 171, 84, 201, 61, 96, 117, 43, 191, 211, 5, 153, 191, 215, 64, 179, 62, 139, 247, 62, 191, 137, 197, 46, 191, 212, 170, 172, 189, 243, 211, 2, 59, 241, 248, 67, 60, 202, 67, 173, 190, 63, 176, 10, 191, 68, 88, 36, 190, 105, 77, 240, 190, 49, 181, 166, 188, 161, 250, 3, 61, 11, 233, 141, 191, 156, 93, 81, 62, 162, 10, 205, 190, 117, 254, 242, 61, 55, 241, 41, 62, 185, 10, 99, 191, 95, 216, 1, 61, 0, 199, 130, 190, 38, 3, 102, 62, 184, 106, 66, 188, 59, 111, 151, 62, 66, 143, 131, 62, 0, 214, 197, 190, 144, 144, 15, 191, 13, 203, 160, 61, 168, 237, 81, 188, 32, 78, 4, 190, 17, 168, 214, 188, 195, 190, 143, 61, 154, 98, 3, 62, 162, 78, 170, 189, 211, 122, 75, 189, 189, 251, 8, 61, 190, 209, 0, 190, 176, 145, 107, 61, 37, 231, 247, 189, 49, 225, 44, 190, 46, 141, 67, 189, 60, 32, 218, 189, 244, 70, 255, 188, 146, 112, 153, 189, 114, 182, 151, 189, 210, 165, 29, 62, 15, 224, 168, 189, 70, 240, 139, 61, 223, 1, 23, 62, 92, 213, 157, 189, 82, 193, 23, 189, 255, 105, 178, 61, 89, 187, 55, 59, 38, 199, 41, 190, 210, 16, 96, 188, 242, 224, 148, 61, 146, 169, 100, 188, 31, 15, 6, 190, 253, 250, 81, 190, 219, 96, 159, 61, 15, 130, 89, 190, 184, 144, 81, 186, 67, 151, 235, 61, 149, 67, 35, 189, 159, 117, 195, 60, 32, 63, 151, 61, 19, 51, 232, 61, 84, 173, 62, 189, 246, 190, 5, 61, 224, 248, 14, 62, 47, 9, 97, 189, 166, 204, 202, 61, 251, 122, 223, 188, 215, 203, 98, 189, 105, 78, 12, 189, 199, 124, 217, 189, 232, 100, 116, 61, 80, 247, 37, 190, 122, 204, 7, 62, 187, 89, 145, 60, 113, 135, 89, 62, 158, 209, 195, 61, 96, 59, 6, 61, 242, 58, 210, 61, 26, 160, 223, 189, 4, 76, 83, 189, 253, 17, 133, 61, 59, 103, 221, 189, 249, 205, 169, 189, 165, 122, 36, 190, 126, 197, 121, 61, 193, 67, 101, 190, 130, 53, 107, 61, 131, 102, 104, 62, 218, 136, 150, 189, 142, 105, 34, 190, 171, 97, 89, 190, 116, 39, 49, 62, 169, 75, 58, 190, 208, 49, 238, 61, 92, 10, 219, 61, 222, 176, 12, 190, 152, 115, 15, 62, 219, 210, 72, 188, 117, 4, 202, 61, 152, 223, 6, 189, 23, 254, 16, 190, 64, 211, 175, 60, 208, 133, 64, 190, 131, 155, 188, 62, 149, 119, 4, 189, 148, 142, 80, 190, 167, 164, 136, 62, 247, 182, 57, 190, 234, 11, 161, 61, 207, 110, 9, 61, 52, 98, 228, 189, 174, 92, 49, 191, 72, 2, 148, 62, 113, 94, 49, 191, 155, 86, 67, 190, 151, 81, 133, 62, 101, 253, 48, 62, 246, 11, 202, 60, 132, 199, 90, 62, 126, 117, 26, 62, 98, 9, 6, 190, 149, 232, 96, 189, 238, 1, 184, 62, 206, 216, 229, 187, 160, 5, 136, 190, 220, 184, 145, 60, 16, 56, 200, 61, 80, 81, 195, 190, 234, 204, 207, 187, 3, 16, 99, 190, 252, 54, 47, 62, 236, 53, 33, 190, 196, 83, 96, 62, 242, 12, 236, 189, 159, 238, 63, 62, 156, 18, 158, 189, 175, 13, 215, 190, 80, 6, 14, 190, 52, 48, 154, 62, 85, 45, 152, 190, 28, 62, 13, 62, 242, 129, 209, 185, 76, 116, 185, 61, 81, 155, 131, 189, 246, 214, 210, 62, 158, 67, 79, 189, 124, 127, 32, 189, 100, 78, 97, 61, 150, 49, 124, 62, 110, 188, 130, 61, 138, 93, 90, 190, 104, 148, 68, 190, 136, 64, 110, 62, 139, 64, 66, 190, 91, 143, 22, 191, 112, 76, 185, 61, 117, 130, 207, 189, 213, 49, 137, 61, 95, 236, 226, 60, 78, 77, 119, 62, 235, 20, 135, 189, 71, 116, 196, 189, 196, 107, 95, 62, 83, 34, 26, 187, 48, 48, 230, 188, 106, 141, 239, 60, 237, 122, 147, 189, 168, 223, 7, 62, 230, 144, 165, 61, 226, 200, 231, 59, 244, 35, 192, 189, 98, 211, 247, 60, 49, 107, 20, 190, 135, 13, 151, 61, 95, 136, 18, 190, 251, 78, 191, 188, 237, 14, 65, 189, 43, 35, 102, 189, 255, 193, 8, 62, 141, 49, 22, 190, 108, 105, 174, 61, 167, 151, 191, 189, 255, 23, 27, 61, 246, 200, 201, 189, 52, 36, 17, 62, 217, 237, 22, 191, 253, 226, 172, 191, 74, 241, 128, 62, 177, 232, 37, 62, 14, 30, 188, 190, 251, 151, 49, 61, 47, 56, 147, 62, 212, 233, 113, 62, 17, 85, 45, 62, 42, 33, 53, 190, 190, 162, 171, 61, 155, 215, 13, 191, 5, 194, 248, 61, 215, 150, 65, 60, 137, 38, 39, 62, 65, 237, 52, 61, 185, 229, 47, 62, 252, 70, 68, 62, 28, 30, 175, 61, 96, 70, 61, 189, 49, 88, 119, 61, 24, 179, 24, 190, 41, 177, 224, 61, 249, 235, 142, 189, 252, 52, 103, 189, 148, 56, 171, 60, 194, 89, 44, 190, 139, 198, 196, 190, 244, 235, 39, 61, 112, 174, 209, 61, 223, 0, 53, 61, 35, 42, 140, 62, 21, 83, 73, 62, 205, 170, 214, 60, 55, 92, 141, 61, 118, 147, 161, 61, 60, 164, 146, 62, 97, 83, 193, 189, 122, 219, 44, 188, 25, 77, 58, 190, 152, 202, 102, 61, 68, 235, 96, 189, 46, 232, 10, 189, 58, 159, 151, 62, 179, 69, 124, 61, 234, 182, 57, 62, 100, 162, 203, 190, 32, 28, 209, 190, 88, 106, 51, 190, 252, 128, 228, 62, 61, 73, 24, 191, 182, 2, 135, 61, 125, 214, 196, 62, 136, 103, 15, 62, 26, 153, 104, 189, 168, 247, 110, 62, 97, 240, 32, 190, 109, 190, 210, 189, 229, 105, 145, 61, 24, 32, 70, 62, 215, 138, 168, 189, 44, 43, 208, 189, 87, 207, 97, 190, 167, 2, 36, 189, 96, 116, 5, 189, 0, 190, 146, 60, 163, 219, 183, 60, 59, 13, 36, 62, 53, 202, 11, 190, 228, 17, 248, 60, 72, 5, 90, 188, 164, 56, 164, 189, 120, 74, 144, 189, 230, 19, 166, 61, 221, 251, 160, 60, 6, 82, 184, 61, 250, 250, 192, 189, 17, 26, 17, 62, 89, 212, 146, 61, 171, 46, 56, 62, 78, 71, 173, 189, 110, 170, 111, 189, 60, 160, 75, 60, 190, 48, 241, 189, 29, 8, 208, 189, 32, 144, 167, 188, 241, 23, 19, 62, 193, 138, 245, 189, 82, 72, 58, 62, 155, 126, 134, 189, 158, 42, 31, 190, 30, 187, 60, 61, 155, 79, 97, 190, 148, 106, 65, 61, 113, 129, 42, 190, 231, 255, 128, 61, 32, 180, 25, 190, 102, 80, 56, 190, 58, 221, 42, 62, 78, 183, 221, 189, 73, 20, 20, 61, 234, 240, 226, 61, 24, 6, 119, 62, 198, 78, 32, 62, 42, 161, 81, 61, 44, 65, 77, 61, 26, 191, 222, 61, 155, 237, 190, 61, 44, 77, 162, 189, 22, 104, 217, 61, 29, 165, 23, 62, 165, 88, 36, 62, 81, 158, 105, 189, 237, 146, 180, 188, 106, 170, 65, 189, 128, 212, 129, 61, 154, 158, 7, 190, 78, 240, 191, 189, 112, 152, 35, 188, 159, 86, 22, 61, 230, 99, 161, 189, 45, 193, 83, 189, 166, 98, 174, 190, 73, 107, 204, 61, 118, 219, 157, 61, 110, 198, 8, 190, 175, 102, 217, 189, 209, 4, 130, 61, 54, 41, 190, 59, 231, 216, 40, 190, 5, 224, 188, 61, 106, 16, 155, 189, 249, 159, 18, 190, 61, 242, 153, 61, 50, 53, 59, 190, 244, 82, 32, 190, 50, 60, 62, 60, 1, 184, 183, 189, 193, 3, 152, 189, 176, 130, 255, 61, 240, 144, 247, 188, 218, 204, 181, 189, 194, 186, 120, 58, 195, 160, 6, 190, 246, 0, 220, 189, 78, 168, 88, 62, 18, 226, 252, 188, 221, 220, 215, 61, 61, 49, 180, 189, 18, 123, 140, 189, 171, 252, 92, 189, 144, 227, 45, 62, 104, 165, 230, 60, 108, 190, 86, 60, 165, 28, 74, 189, 230, 215, 54, 59, 225, 125, 88, 189, 198, 144, 43, 189, 142, 245, 207, 189, 22, 162, 135, 62, 101, 171, 137, 190, 17, 92, 74, 191, 25, 250, 48, 62, 239, 57, 16, 62, 181, 207, 152, 190, 145, 192, 140, 62, 199, 241, 139, 62, 148, 184, 177, 62, 216, 69, 14, 189, 42, 67, 180, 189, 49, 204, 0, 190, 139, 153, 192, 190, 150, 237, 182, 62, 168, 30, 196, 189, 224, 195, 55, 189, 205, 197, 9, 62, 52, 202, 138, 61, 244, 183, 39, 61, 182, 18, 196, 61, 9, 230, 144, 61, 210, 108, 15, 62, 131, 228, 88, 190, 109, 91, 95, 62, 11, 73, 46, 61, 80, 57, 47, 62, 27, 108, 128, 189, 115, 65, 16, 190, 87, 5, 68, 190, 253, 178, 7, 62, 154, 56, 183, 189, 107, 238, 26, 62, 178, 178, 197, 189, 21, 19, 202, 60, 60, 101, 43, 189, 90, 3, 98, 189, 161, 0, 41, 189, 212, 78, 190, 61, 125, 96, 128, 188, 22, 131, 147, 189, 170, 53, 170, 188, 181, 74, 173, 189, 195, 215, 146, 61, 68, 93, 161, 188, 196, 191, 60, 190, 215, 152, 140, 61, 207, 101, 104, 189, 215, 94, 137, 190, 157, 90, 238, 189, 168, 72, 17, 190, 176, 75, 229, 60, 52, 76, 236, 188, 10, 79, 164, 189, 252, 103, 203, 189, 196, 96, 25, 190, 59, 181, 48, 190, 51, 105, 33, 62, 55, 160, 58, 190, 39, 87, 188, 189, 235, 58, 233, 60, 121, 238, 21, 62, 187, 132, 153, 188, 160, 111, 197, 61, 90, 179, 7, 188, 244, 16, 44, 190, 35, 130, 196, 188, 112, 6, 201, 62, 185, 44, 220, 62, 102, 75, 18, 61, 197, 122, 52, 62, 67, 233, 73, 61, 21, 151, 24, 191, 59, 244, 173, 189, 195, 199, 145, 61, 22, 143, 164, 189, 16, 161, 44, 62, 208, 249, 125, 61, 10, 225, 154, 190, 224, 66, 170, 187, 175, 211, 135, 62, 193, 232, 182, 190, 155, 182, 149, 60, 191, 97, 15, 62, 243, 218, 114, 61, 219, 116, 196, 188, 226, 10, 202, 190, 179, 233, 10, 61, 154, 0, 91, 61, 117, 250, 47, 62, 252, 96, 110, 187, 131, 172, 204, 59, 204, 45, 22, 62, 168, 243, 72, 62, 109, 253, 138, 62, 176, 172, 5, 62, 15, 168, 38, 62, 177, 222, 216, 60, 71, 85, 94, 189, 222, 36, 232, 189, 37, 161, 126, 189, 89, 208, 42, 190, 141, 184, 4, 62, 176, 134, 175, 60, 129, 90, 75, 190, 75, 125, 158, 189, 37, 116, 202, 189, 119, 92, 163, 61, 225, 88, 184, 61, 127, 177, 32, 189, 109, 64, 2, 62, 147, 166, 198, 189, 114, 103, 130, 190, 227, 62, 152, 189, 204, 101, 192, 61, 180, 231, 236, 61, 187, 94, 112, 189, 168, 206, 65, 190, 168, 107, 160, 61, 215, 215, 23, 62, 58, 89, 180, 190, 60, 24, 121, 62, 131, 125, 84, 189, 47, 86, 212, 189, 81, 102, 136, 62, 244, 249, 79, 187, 71, 159, 140, 60, 148, 73, 16, 188, 47, 201, 166, 62, 25, 18, 187, 190, 78, 228, 60, 62, 233, 45, 19, 63, 94, 103, 212, 186, 18, 83, 220, 190, 135, 7, 10, 62, 253, 181, 131, 59, 45, 87, 22, 190, 41, 191, 36, 190, 108, 167, 108, 190, 145, 27, 103, 62, 42, 85, 48, 189, 14, 228, 28, 60, 102, 45, 149, 190, 30, 119, 3, 62, 72, 78, 41, 60, 88, 151, 177, 190, 208, 140, 197, 189, 74, 91, 142, 188, 217, 126, 1, 190, 163, 205, 197, 61, 92, 227, 10, 191, 44, 127, 216, 61, 40, 135, 172, 61, 208, 48, 234, 61, 175, 159, 232, 189, 100, 177, 206, 188, 17, 206, 105, 62, 154, 128, 153, 62, 23, 117, 13, 61, 117, 1, 11, 189, 5, 95, 132, 189, 129, 20, 106, 61, 180, 242, 114, 190, 177, 44, 89, 190, 149, 67, 150, 61, 181, 103, 34, 61, 246, 251, 50, 60, 10, 121, 12, 189, 62, 174, 165, 62, 134, 16, 75, 62, 217, 157, 224, 61, 160, 201, 150, 188, 208, 69, 0, 190, 167, 93, 139, 61, 26, 26, 143, 61, 60, 93, 82, 61, 14, 34, 230, 189, 244, 209, 74, 62, 138, 133, 16, 190, 118, 107, 106, 188, 164, 42, 189, 61, 11, 186, 209, 189, 150, 111, 149, 62, 250, 168, 35, 190, 48, 186, 130, 189, 4, 58, 207, 188, 97, 173, 58, 61, 183, 61, 180, 189, 196, 99, 189, 190, 178, 255, 222, 61, 59, 153, 56, 190, 6, 31, 75, 61, 25, 136, 54, 189, 194, 67, 13, 190, 249, 41, 117, 189, 119, 30, 30, 190, 109, 5, 167, 189, 106, 248, 154, 61, 87, 5, 203, 61, 231, 97, 194, 61, 213, 231, 255, 189, 67, 178, 67, 189, 196, 246, 231, 189, 214, 99, 253, 58, 252, 216, 49, 190, 165, 223, 204, 189, 25, 115, 165, 189, 54, 4, 239, 60, 190, 102, 52, 190, 16, 25, 107, 61, 121, 172, 212, 61, 31, 233, 148, 189, 221, 151, 63, 189, 196, 225, 46, 190, 174, 109, 175, 189, 104, 104, 18, 189, 123, 20, 8, 61, 131, 199, 16, 190, 42, 56, 113, 189, 6, 164, 167, 60, 82, 76, 131, 58, 194, 64, 23, 190, 81, 50, 153, 61, 91, 216, 34, 190, 51, 120, 34, 189, 230, 27, 7, 61, 6, 109, 183, 189, 130, 18, 4, 191, 11, 160, 207, 188, 140, 172, 159, 187, 49, 150, 155, 190, 215, 103, 150, 61, 193, 30, 199, 62, 96, 142, 151, 62, 185, 49, 180, 61, 161, 157, 210, 59, 121, 14, 227, 60, 190, 46, 178, 190, 181, 19, 214, 188, 119, 240, 248, 189, 240, 98, 27, 60, 187, 192, 180, 62, 65, 240, 23, 62, 31, 102, 169, 189, 26, 106, 228, 61, 11, 242, 43, 61, 120, 72, 11, 62, 44, 58, 137, 189, 29, 79, 254, 61, 96, 159, 199, 61, 45, 49, 222, 188, 17, 249, 149, 60, 141, 113, 132, 190, 93, 1, 129, 190, 95, 2, 168, 188, 132, 178, 134, 59, 44, 219, 176, 61, 110, 181, 151, 190, 99, 234, 28, 189, 200, 77, 105, 62, 74, 209, 20, 62, 157, 21, 124, 190, 204, 161, 35, 62, 178, 211, 191, 61, 66, 190, 20, 189, 117, 177, 128, 190, 15, 157, 179, 61, 196, 116, 60, 62, 204, 196, 238, 189, 201, 57, 197, 188, 131, 156, 50, 188, 245, 255, 147, 61, 178, 9, 122, 62, 206, 128, 173, 189, 46, 89, 183, 189, 81, 36, 0, 190, 194, 129, 3, 62, 89, 186, 143, 60, 105, 3, 72, 188, 77, 193, 63, 61, 63, 232, 31, 62, 44, 108, 63, 190, 20, 239, 20, 62, 52, 190, 132, 62, 245, 59, 110, 62, 145, 137, 10, 62, 18, 117, 20, 62, 191, 21, 106, 188, 161, 63, 72, 60, 143, 37, 43, 190, 125, 86, 114, 61, 165, 106, 217, 59, 47, 101, 68, 61, 224, 238, 19, 62, 77, 108, 101, 61, 12, 50, 182, 61, 84, 228, 147, 189, 6, 98, 164, 189, 206, 156, 8, 62, 227, 109, 250, 189, 18, 53, 29, 188, 168, 36, 77, 189, 212, 227, 26, 190, 107, 27, 253, 189, 39, 38, 19, 62, 45, 3, 171, 61, 4, 53, 53, 189, 241, 88, 117, 186, 86, 115, 105, 189, 155, 7, 142, 59, 253, 124, 76, 60, 65, 15, 62, 190, 198, 180, 191, 188, 30, 137, 227, 61, 77, 116, 76, 190, 40, 13, 57, 190, 139, 67, 62, 190, 152, 22, 46, 190, 54, 217, 60, 61, 97, 150, 239, 189, 188, 191, 151, 189, 32, 90, 244, 189, 129, 187, 141, 61, 55, 70, 107, 189, 1, 241, 35, 62, 130, 1, 226, 189, 5, 156, 101, 60, 162, 248, 144, 61, 104, 221, 178, 59, 50, 22, 47, 62, 74, 61, 254, 60, 31, 51, 236, 61, 5, 203, 25, 190, 192, 81, 28, 62, 2, 241, 92, 189, 231, 246, 146, 189, 91, 233, 203, 189, 83, 172, 38, 189, 234, 26, 8, 190, 120, 191, 30, 190, 65, 160, 20, 62, 184, 36, 219, 189, 18, 206, 237, 61, 59, 63, 110, 189, 112, 16, 139, 188, 77, 123, 11, 60, 204, 41, 218, 189, 103, 217, 229, 60, 230, 50, 150, 189, 92, 246, 0, 190, 156, 117, 93, 61, 67, 219, 236, 61, 242, 105, 10, 190, 73, 248, 41, 190, 215, 157, 85, 190, 148, 152, 239, 188, 5, 92, 32, 62, 32, 44, 72, 190, 242, 10, 135, 190, 2, 120, 16, 190, 6, 106, 100, 188, 248, 235, 101, 187, 221, 32, 84, 61, 61, 162, 89, 187, 30, 101, 172, 61, 54, 216, 73, 190, 101, 189, 13, 190, 90, 169, 9, 191, 49, 57, 15, 190, 207, 232, 108, 61, 186, 238, 97, 189, 18, 158, 137, 61, 121, 207, 23, 190, 62, 149, 197, 190, 78, 238, 105, 60, 124, 226, 192, 60, 58, 22, 158, 61, 55, 117, 21, 62, 228, 188, 160, 190, 84, 71, 78, 62, 187, 121, 153, 61, 214, 123, 215, 190, 154, 59, 54, 190, 34, 122, 43, 62, 119, 189, 194, 58, 113, 162, 174, 190, 9, 140, 61, 62, 213, 240, 39, 63, 253, 221, 54, 61, 170, 171, 191, 190, 7, 121, 166, 61, 99, 177, 133, 61, 169, 41, 159, 189, 213, 237, 161, 190, 151, 141, 53, 190, 86, 237, 67, 62, 217, 42, 147, 189, 7, 107, 74, 62, 23, 206, 116, 190, 230, 229, 85, 62, 214, 63, 6, 62, 136, 254, 117, 190, 58, 197, 185, 189, 104, 244, 105, 61, 195, 57, 220, 188, 57, 208, 164, 62, 110, 186, 125, 190, 232, 227, 189, 60, 204, 64, 32, 189, 210, 72, 196, 61, 7, 158, 70, 62, 103, 5, 63, 62, 236, 183, 154, 62, 122, 131, 52, 62, 127, 190, 178, 187, 75, 61, 239, 189, 7, 233, 61, 58, 150, 186, 140, 189, 189, 51, 237, 189, 173, 98, 159, 190, 227, 98, 86, 190, 31, 20, 239, 61, 249, 133, 174, 61, 180, 121, 181, 59, 30, 111, 196, 62, 68, 57, 64, 62, 36, 128, 177, 188, 134, 132, 16, 60, 63, 125, 238, 189, 146, 81, 17, 190, 92, 132, 165, 189, 98, 117, 32, 190, 10, 114, 165, 61, 71, 190, 133, 59, 172, 69, 33, 62, 238, 101, 235, 190, 193, 248, 165, 189, 46, 62, 33, 62, 4, 174, 113, 188, 200, 42, 230, 188, 198, 76, 19, 62, 226, 45, 4, 62, 26, 43, 31, 190, 135, 216, 80, 190, 192, 56, 150, 190, 93, 3, 176, 189, 105, 2, 246, 189, 15, 246, 48, 61, 25, 15, 84, 190, 123, 229, 106, 60, 126, 180, 9, 190, 180, 98, 36, 191, 45, 73, 53, 61, 155, 34, 125, 62, 154, 188, 94, 190, 252, 21, 150, 62, 214, 26, 117, 62, 7, 126, 159, 62, 13, 176, 105, 61, 201, 47, 108, 187, 6, 120, 23, 62, 36, 8, 134, 190, 47, 29, 52, 61, 60, 92, 135, 188, 211, 163, 137, 61, 178, 36, 69, 62, 86, 13, 61, 62, 16, 251, 88, 61, 227, 118, 136, 62, 47, 178, 115, 189, 181, 0, 61, 62, 11, 226, 63, 189, 69, 35, 98, 62, 29, 223, 60, 189, 17, 154, 0, 190, 252, 169, 13, 61, 227, 116, 175, 190, 40, 219, 9, 190, 1, 244, 130, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {92, 77, 66, 62, 75, 12, 186, 61, 253, 169, 34, 62, 211, 81, 26, 190, 196, 118, 113, 61, 81, 19, 189, 61, 49, 170, 126, 62, 198, 18, 146, 61, 189, 67, 82, 62, 130, 72, 26, 189, 104, 190, 46, 189, 67, 71, 128, 61, 211, 86, 180, 62, 206, 152, 45, 190, 39, 108, 182, 188, 27, 180, 132, 189, 31, 132, 234, 61, 25, 112, 46, 61, 19, 104, 21, 61, 175, 198, 13, 62, 135, 42, 132, 189, 153, 116, 130, 62, 146, 103, 221, 61, 20, 249, 171, 60, 183, 173, 254, 61, 231, 160, 231, 61, 195, 68, 227, 189, 227, 25, 20, 190, 135, 103, 153, 61, 190, 17, 6, 61, 105, 33, 38, 62, 182, 229, 242, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 0, 0, 63, 15, 229, 215, 62, 17, 137, 25, 190, 237, 10, 87, 61, 139, 3, 122, 190, 11, 90, 136, 62, 201, 237, 144, 191, 138, 19, 216, 61, 5, 142, 2, 189, 16, 44, 204, 62, 151, 252, 193, 190, 14, 224, 191, 189, 193, 2, 11, 191, 176, 54, 151, 190, 134, 228, 160, 61, 51, 241, 46, 189, 111, 33, 106, 190, 125, 210, 190, 190, 205, 1, 129, 190, 182, 58, 120, 62, 100, 46, 202, 61, 181, 242, 33, 63, 51, 211, 33, 190, 10, 142, 247, 61, 60, 162, 165, 190, 181, 85, 33, 62, 69, 86, 136, 189, 122, 10, 43, 62, 21, 195, 153, 62, 110, 153, 160, 62, 20, 56, 153, 190, 141, 198, 209, 190, 167, 159, 28, 189, 58, 199, 1, 190, 95, 251, 76, 190, 234, 157, 22, 190, 24, 101, 36, 190, 238, 33, 70, 190, 255, 188, 102, 59, 104, 186, 94, 188, 218, 53, 194, 189, 162, 146, 10, 62, 141, 206, 20, 190, 40, 137, 212, 187, 63, 85, 37, 190, 197, 15, 33, 61, 113, 120, 52, 62, 207, 103, 196, 60, 78, 247, 240, 61, 59, 118, 176, 61, 53, 229, 8, 61, 187, 144, 223, 188, 228, 55, 159, 62, 235, 110, 25, 61, 6, 100, 48, 61, 90, 49, 23, 190, 110, 30, 171, 189, 154, 223, 39, 190, 39, 149, 25, 190, 88, 170, 188, 189, 232, 132, 98, 190, 96, 230, 216, 61, 245, 75, 15, 190, 70, 125, 81, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 9, 15, 62, 3, 251, 136, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {50, 98, 248, 63, 79, 254, 196, 63, 150, 172, 33, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {221, 52, 168, 192, 77, 224, 149, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0008/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}