// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {214, 166, 252, 61, 213, 177, 81, 63, 181, 75, 193, 190, 176, 96, 134, 63, 108, 211, 22, 191, 232, 166, 225, 190, 67, 14, 79, 190, 215, 20, 131, 61, 49, 152, 136, 62, 12, 175, 224, 189, 133, 75, 155, 63, 159, 160, 228, 62, 30, 230, 34, 191, 115, 82, 45, 63, 105, 169, 157, 62, 71, 198, 61, 191, 203, 73, 77, 191, 201, 43, 12, 190, 39, 234, 48, 63, 18, 250, 155, 63, 227, 186, 183, 62, 15, 49, 247, 189, 196, 45, 46, 62, 141, 113, 14, 63, 173, 168, 242, 62, 43, 54, 109, 63, 52, 33, 164, 62, 242, 142, 174, 62, 5, 45, 50, 63, 187, 251, 147, 190, 213, 202, 24, 63, 167, 150, 43, 63, 242, 251, 230, 62, 49, 250, 64, 63, 100, 188, 63, 63, 233, 155, 199, 62, 230, 147, 128, 62, 200, 135, 156, 62, 116, 123, 178, 190, 231, 105, 244, 188, 235, 159, 157, 190, 234, 54, 217, 186, 139, 185, 171, 190, 188, 249, 142, 190, 49, 149, 171, 62, 6, 249, 207, 189, 164, 221, 36, 63, 244, 122, 215, 62, 252, 177, 157, 190, 89, 140, 2, 63, 174, 101, 134, 62, 79, 173, 117, 62, 225, 96, 45, 63, 222, 84, 41, 62, 170, 182, 165, 190, 174, 143, 66, 62, 123, 185, 22, 191, 231, 153, 13, 63, 244, 1, 138, 63, 214, 131, 200, 62, 8, 108, 233, 189, 252, 33, 169, 191, 55, 180, 177, 190, 176, 98, 133, 189, 36, 252, 158, 62, 140, 163, 199, 189, 188, 230, 253, 62, 149, 156, 6, 190, 46, 72, 214, 62, 189, 172, 232, 190, 88, 0, 139, 190, 227, 135, 124, 62, 250, 232, 59, 190, 99, 19, 139, 63, 211, 88, 130, 62, 137, 250, 179, 190, 219, 241, 23, 63, 11, 190, 4, 62, 217, 48, 16, 190, 164, 38, 111, 191, 9, 193, 130, 190, 201, 195, 242, 190, 182, 207, 23, 63, 29, 210, 241, 61, 139, 146, 163, 191, 17, 59, 93, 190, 185, 221, 2, 189, 181, 206, 51, 63, 138, 176, 83, 191, 20, 57, 224, 190, 131, 5, 159, 62, 43, 96, 127, 191, 143, 137, 162, 62, 156, 207, 218, 62, 248, 154, 170, 190, 216, 163, 155, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 202, 5, 191, 4, 237, 42, 62, 2, 117, 5, 191, 195, 216, 121, 188, 246, 251, 13, 191, 186, 202, 78, 62, 44, 85, 22, 190, 120, 207, 13, 190, 185, 19, 173, 190, 165, 55, 6, 63, 127, 253, 155, 190, 231, 159, 159, 61, 30, 6, 236, 62, 41, 218, 212, 190, 230, 216, 201, 190, 31, 180, 16, 191, 244, 114, 150, 62, 124, 153, 152, 62, 163, 62, 25, 61, 61, 62, 124, 190, 247, 29, 160, 61, 73, 32, 124, 62, 223, 190, 66, 63, 75, 31, 200, 190, 142, 242, 152, 189, 198, 154, 219, 62, 247, 234, 71, 189, 67, 19, 163, 62, 165, 185, 172, 62, 17, 227, 96, 190, 249, 152, 206, 60, 129, 116, 248, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 198, 169, 61, 196, 52, 157, 62, 29, 23, 221, 189, 145, 47, 234, 60, 15, 194, 124, 62, 197, 200, 58, 190, 24, 91, 214, 190, 171, 129, 7, 62, 234, 165, 141, 190, 93, 86, 84, 190, 18, 6, 108, 190, 136, 42, 27, 190, 24, 136, 0, 62, 82, 24, 51, 190, 176, 144, 253, 61, 210, 165, 131, 189, 193, 173, 4, 62, 28, 93, 179, 62, 229, 40, 221, 190, 194, 160, 199, 190, 141, 116, 32, 191, 55, 132, 222, 60, 28, 113, 133, 62, 70, 220, 235, 190, 215, 92, 143, 62, 228, 126, 69, 62, 212, 134, 77, 191, 46, 135, 45, 190, 130, 103, 74, 62, 26, 20, 43, 62, 169, 224, 42, 61, 106, 34, 201, 189, 8, 10, 210, 61, 169, 149, 192, 62, 229, 172, 225, 190, 201, 69, 214, 189, 8, 108, 116, 62, 181, 126, 25, 61, 0, 148, 223, 190, 107, 149, 134, 62, 142, 102, 182, 190, 148, 237, 59, 189, 59, 228, 83, 190, 178, 178, 164, 189, 10, 175, 207, 61, 160, 119, 153, 189, 84, 104, 1, 62, 197, 121, 209, 190, 193, 106, 204, 188, 34, 46, 74, 189, 70, 211, 159, 190, 25, 86, 233, 190, 64, 69, 230, 189, 38, 114, 14, 189, 90, 149, 163, 62, 153, 218, 35, 190, 185, 51, 31, 190, 251, 187, 130, 190, 56, 194, 41, 190, 203, 58, 26, 190, 142, 201, 98, 189, 136, 106, 171, 62, 96, 126, 150, 62, 49, 10, 2, 62, 87, 222, 129, 190, 215, 73, 64, 62, 15, 66, 17, 62, 154, 34, 14, 61, 45, 34, 181, 190, 239, 160, 249, 189, 21, 214, 118, 61, 120, 47, 34, 59, 90, 168, 70, 61, 20, 213, 152, 62, 45, 46, 29, 62, 159, 197, 97, 62, 83, 0, 5, 62, 32, 1, 28, 62, 159, 119, 18, 190, 146, 21, 106, 189, 74, 72, 190, 61, 180, 160, 160, 62, 205, 90, 1, 62, 240, 241, 49, 62, 250, 164, 162, 189, 44, 6, 212, 188, 211, 12, 115, 60, 98, 165, 9, 62, 236, 3, 126, 190, 175, 149, 70, 62, 204, 181, 46, 62, 23, 95, 254, 189, 35, 70, 158, 189, 205, 163, 142, 189, 54, 52, 12, 190, 210, 105, 166, 190, 156, 237, 135, 61, 135, 49, 0, 190, 127, 108, 187, 61, 206, 164, 61, 190, 92, 198, 2, 62, 198, 89, 225, 189, 68, 223, 47, 190, 204, 8, 6, 62, 214, 238, 18, 62, 42, 10, 87, 190, 6, 183, 222, 61, 218, 11, 14, 61, 230, 163, 237, 61, 194, 164, 37, 62, 249, 235, 236, 189, 74, 132, 198, 189, 115, 17, 180, 189, 90, 20, 2, 62, 57, 248, 5, 62, 212, 67, 91, 189, 131, 30, 30, 61, 203, 81, 196, 187, 37, 100, 63, 190, 92, 178, 62, 190, 103, 96, 29, 62, 218, 194, 3, 186, 33, 87, 234, 61, 195, 191, 156, 61, 156, 17, 20, 190, 183, 236, 40, 190, 8, 198, 226, 61, 59, 247, 154, 188, 21, 69, 5, 190, 45, 164, 20, 62, 83, 80, 63, 61, 12, 247, 126, 190, 166, 254, 34, 191, 17, 208, 147, 62, 144, 31, 66, 62, 73, 255, 51, 189, 78, 171, 149, 189, 199, 98, 7, 62, 191, 91, 186, 61, 202, 137, 181, 60, 83, 213, 161, 189, 13, 217, 195, 189, 133, 246, 173, 190, 143, 106, 49, 62, 65, 230, 99, 190, 62, 52, 184, 61, 47, 226, 180, 61, 19, 173, 119, 61, 71, 225, 172, 189, 241, 88, 44, 61, 6, 173, 40, 62, 229, 15, 56, 189, 241, 76, 4, 191, 249, 163, 187, 189, 46, 104, 185, 61, 48, 92, 158, 189, 141, 129, 107, 61, 219, 15, 42, 190, 195, 180, 169, 189, 122, 231, 245, 60, 28, 205, 81, 190, 220, 208, 146, 62, 255, 200, 245, 60, 109, 173, 41, 61, 98, 239, 50, 62, 131, 118, 236, 59, 173, 191, 246, 190, 65, 15, 81, 62, 79, 1, 211, 190, 214, 203, 213, 188, 102, 2, 136, 190, 210, 104, 218, 189, 3, 77, 23, 190, 180, 151, 5, 62, 175, 193, 220, 61, 135, 105, 162, 190, 213, 126, 53, 62, 64, 10, 130, 62, 118, 198, 7, 61, 73, 95, 189, 190, 27, 101, 192, 61, 230, 3, 172, 61, 229, 15, 12, 62, 80, 117, 108, 190, 4, 216, 92, 188, 123, 183, 90, 62, 148, 24, 55, 190, 40, 80, 64, 190, 216, 108, 134, 62, 236, 232, 130, 62, 121, 145, 8, 62, 177, 153, 210, 61, 230, 132, 130, 189, 148, 198, 89, 189, 61, 142, 242, 61, 140, 115, 165, 191, 202, 40, 211, 191, 184, 62, 213, 62, 230, 212, 66, 191, 159, 228, 16, 191, 212, 170, 172, 189, 154, 214, 62, 59, 241, 248, 67, 60, 202, 67, 173, 190, 65, 252, 245, 190, 68, 88, 36, 190, 4, 128, 17, 191, 49, 181, 166, 188, 41, 203, 105, 61, 219, 7, 176, 191, 42, 113, 134, 62, 162, 10, 205, 190, 118, 167, 89, 62, 186, 67, 2, 62, 150, 89, 104, 191, 74, 2, 223, 62, 119, 195, 39, 191, 200, 156, 34, 62, 149, 110, 107, 61, 53, 131, 102, 62, 26, 88, 147, 62, 161, 131, 140, 190, 209, 153, 70, 191, 191, 174, 42, 62, 168, 237, 81, 188, 32, 78, 4, 190, 139, 17, 215, 188, 34, 198, 131, 61, 115, 199, 0, 62, 126, 214, 174, 189, 64, 102, 84, 189, 192, 176, 246, 60, 190, 209, 0, 190, 30, 179, 95, 61, 37, 231, 247, 189, 128, 131, 46, 190, 42, 176, 68, 189, 60, 32, 218, 189, 244, 70, 255, 188, 119, 188, 153, 189, 169, 103, 162, 189, 154, 84, 26, 62, 15, 224, 168, 189, 238, 33, 137, 61, 223, 1, 23, 62, 3, 99, 164, 189, 22, 59, 36, 189, 255, 105, 178, 61, 196, 188, 18, 187, 222, 207, 47, 190, 210, 16, 96, 188, 134, 22, 136, 61, 209, 5, 169, 188, 31, 15, 6, 190, 253, 250, 81, 190, 219, 96, 159, 61, 229, 236, 244, 190, 191, 10, 32, 62, 44, 214, 8, 62, 140, 253, 87, 190, 157, 116, 128, 61, 100, 222, 187, 61, 172, 193, 33, 188, 238, 239, 7, 190, 217, 244, 35, 190, 32, 81, 118, 60, 41, 10, 193, 189, 228, 125, 1, 62, 90, 141, 177, 189, 215, 203, 98, 189, 242, 47, 23, 61, 193, 103, 19, 190, 90, 59, 153, 61, 23, 208, 105, 190, 4, 66, 169, 188, 191, 55, 206, 189, 159, 67, 210, 61, 146, 55, 46, 188, 25, 64, 7, 62, 11, 255, 12, 62, 137, 136, 174, 190, 255, 55, 39, 189, 165, 16, 41, 61, 72, 185, 223, 189, 40, 150, 107, 189, 176, 167, 165, 189, 117, 115, 196, 61, 162, 91, 76, 190, 131, 140, 18, 62, 238, 87, 146, 62, 186, 234, 86, 61, 94, 234, 21, 190, 205, 251, 86, 190, 39, 114, 25, 61, 217, 151, 141, 190, 226, 191, 201, 61, 82, 112, 132, 188, 53, 229, 169, 189, 69, 47, 211, 61, 61, 14, 132, 188, 165, 108, 251, 61, 152, 223, 6, 189, 1, 219, 175, 61, 248, 52, 131, 60, 120, 140, 131, 190, 5, 147, 189, 62, 249, 56, 89, 189, 109, 14, 156, 190, 134, 166, 89, 62, 183, 102, 23, 190, 130, 6, 146, 61, 75, 77, 186, 61, 208, 161, 82, 190, 249, 201, 115, 191, 221, 206, 28, 62, 133, 107, 157, 191, 26, 15, 230, 190, 34, 204, 162, 62, 213, 21, 21, 62, 83, 27, 201, 61, 94, 199, 3, 62, 41, 109, 131, 62, 117, 164, 54, 190, 143, 38, 227, 189, 120, 215, 145, 62, 148, 66, 224, 60, 160, 29, 130, 190, 234, 175, 202, 60, 157, 28, 181, 61, 238, 237, 211, 190, 124, 43, 41, 60, 93, 173, 108, 190, 27, 115, 88, 62, 236, 53, 33, 190, 69, 56, 96, 62, 116, 205, 25, 190, 39, 137, 95, 62, 206, 141, 43, 190, 126, 147, 188, 190, 211, 104, 17, 190, 42, 157, 208, 62, 113, 16, 188, 190, 173, 59, 49, 62, 46, 138, 128, 187, 43, 166, 158, 189, 103, 16, 203, 189, 132, 170, 17, 63, 207, 58, 191, 189, 150, 182, 185, 59, 154, 147, 95, 62, 82, 79, 157, 62, 247, 179, 47, 62, 233, 181, 137, 190, 76, 193, 74, 190, 119, 39, 5, 190, 126, 55, 110, 191, 177, 193, 95, 191, 139, 180, 140, 62, 179, 206, 169, 188, 185, 156, 222, 61, 150, 47, 210, 187, 60, 56, 83, 62, 73, 63, 166, 190, 158, 154, 2, 190, 175, 167, 114, 62, 83, 34, 26, 187, 113, 252, 18, 191, 24, 88, 66, 190, 203, 147, 13, 190, 150, 34, 162, 61, 48, 63, 171, 61, 162, 165, 2, 61, 36, 40, 10, 189, 164, 192, 0, 189, 245, 150, 99, 190, 123, 112, 150, 62, 213, 55, 95, 191, 146, 69, 172, 188, 152, 139, 241, 60, 160, 181, 133, 189, 163, 220, 65, 62, 198, 27, 96, 190, 83, 229, 15, 190, 45, 232, 46, 190, 0, 104, 42, 188, 192, 175, 150, 189, 156, 208, 1, 190, 100, 194, 142, 191, 65, 113, 220, 191, 202, 43, 162, 62, 141, 56, 46, 62, 170, 173, 146, 190, 68, 28, 42, 189, 173, 13, 100, 62, 235, 24, 95, 62, 125, 167, 53, 62, 201, 34, 73, 190, 190, 162, 171, 61, 77, 55, 77, 191, 190, 193, 161, 189, 102, 113, 21, 61, 104, 94, 222, 61, 195, 123, 220, 59, 58, 77, 56, 62, 20, 119, 106, 62, 208, 23, 211, 188, 62, 211, 9, 61, 2, 81, 236, 62, 83, 160, 46, 191, 151, 211, 111, 61, 251, 186, 133, 188, 188, 182, 196, 189, 209, 62, 17, 188, 145, 142, 52, 190, 217, 58, 32, 190, 43, 94, 145, 59, 84, 161, 230, 61, 92, 218, 155, 61, 251, 39, 43, 62, 241, 236, 68, 62, 130, 209, 106, 189, 203, 165, 144, 61, 143, 78, 195, 61, 214, 122, 117, 62, 80, 160, 18, 190, 62, 228, 186, 61, 233, 27, 132, 190, 155, 216, 90, 188, 228, 88, 42, 189, 46, 232, 10, 189, 93, 210, 91, 62, 253, 188, 20, 189, 118, 183, 84, 62, 247, 47, 134, 190, 148, 61, 182, 190, 54, 243, 78, 190, 226, 63, 14, 63, 203, 253, 115, 190, 190, 137, 177, 60, 117, 226, 138, 62, 158, 254, 110, 62, 244, 170, 109, 61, 247, 3, 190, 62, 9, 12, 188, 187, 211, 127, 50, 189, 82, 10, 54, 62, 36, 227, 23, 62, 121, 159, 94, 60, 251, 99, 103, 190, 24, 14, 18, 191, 224, 115, 141, 190, 1, 34, 128, 190, 248, 67, 12, 190, 31, 135, 88, 62, 47, 218, 59, 190, 60, 166, 206, 190, 145, 25, 196, 190, 232, 174, 26, 189, 86, 254, 183, 190, 241, 98, 234, 190, 237, 66, 137, 61, 221, 251, 160, 60, 124, 67, 160, 62, 237, 168, 240, 190, 183, 144, 238, 188, 210, 145, 185, 189, 87, 35, 137, 62, 214, 129, 4, 191, 35, 131, 243, 61, 133, 65, 158, 61, 232, 152, 201, 190, 25, 82, 160, 190, 177, 76, 66, 188, 72, 94, 115, 62, 41, 35, 74, 62, 81, 103, 160, 62, 219, 99, 64, 62, 155, 5, 204, 190, 50, 184, 108, 62, 220, 231, 229, 190, 255, 122, 5, 189, 182, 157, 136, 190, 238, 178, 74, 190, 244, 67, 87, 190, 50, 192, 202, 190, 167, 50, 180, 62, 133, 209, 124, 62, 5, 158, 237, 189, 11, 85, 115, 62, 233, 243, 128, 62, 231, 34, 39, 61, 255, 148, 143, 61, 155, 58, 147, 61, 26, 191, 222, 61, 137, 61, 112, 190, 46, 90, 165, 190, 79, 114, 183, 61, 209, 225, 179, 62, 167, 202, 28, 62, 51, 214, 12, 62, 101, 84, 190, 61, 7, 182, 211, 188, 92, 178, 154, 189, 107, 242, 143, 190, 22, 230, 24, 190, 157, 179, 227, 61, 174, 212, 122, 62, 57, 81, 169, 60, 244, 248, 46, 189, 165, 168, 245, 190, 168, 108, 71, 190, 8, 156, 47, 189, 154, 115, 85, 190, 115, 180, 60, 190, 5, 22, 129, 62, 69, 147, 1, 189, 223, 192, 46, 62, 33, 155, 181, 60, 52, 175, 15, 61, 237, 184, 33, 189, 115, 171, 207, 190, 172, 76, 170, 190, 59, 101, 47, 191, 131, 185, 231, 190, 137, 201, 190, 190, 193, 3, 152, 189, 60, 84, 44, 61, 175, 106, 67, 62, 189, 165, 32, 62, 201, 78, 205, 61, 99, 238, 16, 191, 58, 148, 184, 190, 160, 203, 116, 61, 190, 236, 246, 189, 92, 138, 26, 62, 103, 240, 32, 61, 82, 190, 70, 62, 211, 171, 254, 61, 188, 153, 155, 189, 115, 94, 114, 62, 221, 153, 180, 61, 100, 154, 58, 190, 110, 199, 66, 189, 103, 84, 22, 190, 163, 195, 177, 189, 203, 23, 5, 190, 109, 178, 12, 62, 199, 115, 14, 191, 112, 12, 121, 191, 77, 55, 139, 62, 158, 149, 40, 62, 89, 215, 49, 190, 198, 252, 141, 62, 210, 103, 107, 62, 65, 98, 150, 62, 92, 24, 103, 189, 46, 112, 207, 189, 49, 204, 0, 190, 245, 252, 43, 191, 128, 203, 151, 62, 119, 84, 233, 189, 64, 213, 131, 189, 145, 118, 227, 61, 54, 38, 159, 61, 66, 137, 25, 61, 113, 237, 203, 60, 44, 227, 58, 60, 124, 136, 222, 62, 114, 135, 31, 191, 119, 90, 92, 62, 110, 61, 113, 61, 206, 33, 39, 62, 101, 232, 166, 189, 70, 130, 86, 190, 162, 0, 144, 190, 27, 226, 129, 61, 226, 14, 222, 60, 113, 186, 136, 62, 91, 2, 134, 190, 21, 30, 160, 190, 14, 249, 31, 190, 70, 147, 185, 190, 6, 40, 155, 190, 55, 47, 138, 61, 146, 30, 60, 190, 251, 82, 165, 189, 172, 248, 112, 190, 126, 238, 125, 190, 89, 211, 153, 61, 68, 93, 161, 188, 242, 213, 234, 190, 126, 3, 18, 190, 253, 162, 97, 60, 241, 176, 153, 190, 73, 24, 60, 190, 150, 215, 171, 190, 216, 38, 199, 59, 112, 250, 52, 190, 216, 50, 248, 61, 89, 228, 27, 190, 111, 157, 27, 190, 111, 174, 2, 191, 144, 118, 25, 61, 25, 185, 18, 191, 190, 34, 209, 190, 185, 233, 0, 62, 240, 97, 190, 62, 20, 111, 126, 61, 43, 57, 129, 189, 255, 163, 121, 190, 131, 58, 163, 189, 72, 21, 161, 61, 51, 191, 2, 63, 169, 204, 248, 62, 158, 21, 162, 60, 117, 177, 105, 62, 132, 209, 196, 61, 61, 76, 77, 191, 195, 24, 25, 189, 215, 134, 194, 61, 177, 60, 158, 190, 16, 161, 44, 62, 133, 35, 2, 62, 228, 201, 93, 190, 44, 117, 91, 61, 46, 87, 119, 62, 14, 68, 7, 191, 216, 63, 68, 61, 189, 238, 11, 62, 239, 175, 226, 189, 152, 25, 43, 60, 22, 249, 148, 190, 20, 177, 28, 62, 125, 28, 247, 61, 46, 55, 222, 61, 227, 57, 109, 61, 120, 39, 14, 62, 178, 203, 88, 189, 251, 230, 133, 62, 193, 170, 235, 188, 19, 2, 15, 62, 49, 129, 129, 62, 82, 182, 81, 61, 128, 199, 34, 189, 192, 236, 143, 190, 243, 45, 138, 189, 107, 148, 211, 190, 145, 155, 165, 62, 105, 195, 174, 190, 226, 61, 41, 190, 50, 85, 124, 190, 18, 134, 189, 189, 173, 35, 187, 61, 225, 88, 184, 61, 200, 124, 28, 61, 183, 205, 242, 187, 251, 42, 55, 189, 197, 126, 249, 189, 246, 19, 10, 190, 29, 57, 136, 190, 34, 118, 240, 61, 27, 17, 96, 189, 8, 178, 46, 61, 198, 138, 149, 62, 137, 137, 210, 189, 199, 33, 21, 191, 55, 33, 7, 62, 74, 47, 176, 190, 125, 67, 18, 190, 181, 181, 164, 62, 86, 73, 171, 62, 96, 199, 238, 59, 14, 34, 136, 61, 138, 114, 177, 62, 76, 116, 173, 190, 96, 99, 116, 62, 83, 254, 35, 63, 180, 110, 82, 189, 161, 33, 15, 191, 119, 26, 29, 62, 36, 85, 114, 189, 58, 49, 247, 189, 178, 36, 58, 190, 116, 174, 128, 190, 92, 63, 91, 62, 42, 85, 48, 189, 211, 22, 95, 60, 139, 32, 142, 190, 208, 77, 35, 62, 194, 79, 61, 188, 60, 195, 182, 190, 155, 179, 43, 190, 176, 31, 6, 190, 251, 205, 201, 189, 71, 63, 175, 61, 103, 22, 2, 191, 212, 22, 124, 62, 131, 90, 154, 61, 58, 154, 180, 189, 101, 53, 21, 190, 9, 219, 1, 189, 255, 172, 135, 62, 201, 192, 150, 62, 170, 248, 225, 61, 229, 19, 154, 61, 167, 123, 37, 190, 194, 26, 172, 61, 60, 217, 159, 190, 158, 144, 58, 190, 107, 70, 163, 61, 198, 168, 173, 61, 115, 97, 154, 61, 23, 43, 110, 61, 23, 241, 162, 62, 161, 206, 98, 62, 164, 127, 164, 61, 174, 189, 208, 188, 208, 69, 0, 190, 119, 187, 12, 62, 162, 144, 4, 62, 100, 206, 119, 61, 131, 101, 60, 190, 141, 29, 85, 62, 206, 141, 142, 189, 50, 75, 84, 190, 244, 241, 182, 61, 215, 237, 247, 189, 103, 2, 198, 62, 246, 79, 0, 191, 225, 84, 42, 189, 172, 116, 26, 190, 239, 22, 162, 61, 65, 255, 223, 189, 250, 150, 13, 191, 123, 222, 25, 62, 218, 78, 95, 190, 6, 31, 75, 61, 25, 136, 54, 189, 194, 67, 13, 190, 249, 41, 117, 189, 119, 30, 30, 190, 109, 5, 167, 189, 106, 248, 154, 61, 87, 5, 203, 61, 231, 97, 194, 61, 213, 231, 255, 189, 67, 178, 67, 189, 196, 246, 231, 189, 214, 99, 253, 58, 252, 216, 49, 190, 165, 223, 204, 189, 25, 115, 165, 189, 54, 4, 239, 60, 190, 102, 52, 190, 16, 25, 107, 61, 121, 172, 212, 61, 31, 233, 148, 189, 221, 151, 63, 189, 196, 225, 46, 190, 174, 109, 175, 189, 104, 104, 18, 189, 123, 20, 8, 61, 131, 199, 16, 190, 42, 56, 113, 189, 6, 164, 167, 60, 82, 76, 131, 58, 194, 64, 23, 190, 81, 50, 153, 61, 163, 173, 58, 190, 76, 103, 175, 188, 161, 171, 58, 60, 251, 76, 133, 190, 95, 112, 42, 191, 90, 178, 48, 61, 124, 249, 96, 188, 188, 254, 180, 190, 235, 244, 190, 59, 52, 219, 173, 62, 149, 143, 156, 62, 200, 196, 212, 61, 173, 183, 217, 59, 121, 14, 227, 60, 118, 86, 189, 190, 31, 52, 45, 190, 226, 219, 39, 190, 43, 254, 183, 188, 212, 214, 179, 62, 15, 61, 26, 62, 98, 46, 103, 189, 132, 107, 245, 60, 160, 27, 103, 61, 35, 140, 216, 61, 117, 173, 150, 190, 243, 234, 147, 61, 115, 10, 78, 62, 139, 238, 140, 189, 168, 210, 73, 189, 6, 195, 131, 190, 47, 200, 27, 190, 43, 130, 83, 189, 21, 240, 70, 189, 255, 43, 5, 62, 24, 158, 91, 190, 161, 117, 150, 188, 99, 130, 164, 62, 210, 52, 71, 62, 126, 153, 147, 190, 157, 99, 45, 62, 199, 162, 204, 61, 9, 114, 140, 189, 60, 82, 57, 190, 65, 254, 25, 62, 236, 250, 24, 62, 204, 196, 238, 189, 124, 173, 210, 60, 208, 217, 146, 61, 111, 28, 186, 61, 136, 60, 109, 62, 246, 112, 13, 190, 227, 193, 202, 189, 195, 248, 48, 190, 141, 147, 164, 61, 251, 99, 151, 61, 28, 45, 111, 61, 41, 165, 147, 61, 54, 157, 31, 62, 74, 212, 132, 190, 123, 118, 230, 61, 7, 48, 175, 62, 107, 184, 131, 62, 240, 43, 40, 62, 16, 236, 26, 62, 191, 21, 106, 188, 254, 70, 133, 60, 6, 17, 44, 190, 2, 3, 63, 61, 165, 106, 217, 59, 47, 101, 68, 61, 51, 60, 6, 62, 226, 106, 69, 61, 125, 62, 163, 61, 82, 126, 157, 189, 84, 67, 186, 189, 253, 35, 249, 61, 26, 237, 251, 189, 18, 53, 29, 188, 168, 36, 77, 189, 192, 148, 33, 190, 122, 94, 5, 190, 139, 220, 11, 62, 45, 3, 171, 61, 41, 229, 101, 189, 241, 88, 117, 186, 59, 201, 115, 189, 63, 189, 212, 187, 20, 193, 73, 60, 185, 15, 71, 190, 223, 177, 228, 188, 30, 137, 227, 61, 6, 139, 80, 190, 40, 13, 57, 190, 139, 67, 62, 190, 35, 223, 46, 190, 54, 217, 60, 61, 67, 210, 245, 189, 188, 191, 151, 189, 32, 90, 244, 189, 129, 187, 141, 61, 55, 70, 107, 189, 183, 65, 35, 62, 130, 1, 226, 189, 5, 156, 101, 60, 162, 248, 144, 61, 134, 80, 210, 185, 50, 22, 47, 62, 74, 61, 254, 60, 141, 110, 225, 61, 5, 203, 25, 190, 192, 81, 28, 62, 2, 241, 92, 189, 142, 222, 147, 189, 91, 233, 203, 189, 197, 201, 68, 189, 234, 26, 8, 190, 94, 159, 29, 190, 68, 176, 17, 62, 184, 36, 219, 189, 18, 206, 237, 61, 59, 63, 110, 189, 22, 205, 160, 188, 158, 188, 23, 60, 195, 126, 224, 189, 42, 106, 202, 60, 230, 50, 150, 189, 92, 246, 0, 190, 156, 117, 93, 61, 28, 105, 30, 62, 162, 155, 54, 190, 65, 164, 234, 189, 239, 86, 149, 191, 121, 111, 72, 191, 175, 7, 157, 62, 163, 96, 73, 190, 247, 213, 172, 190, 2, 120, 16, 190, 230, 89, 214, 188, 231, 2, 237, 60, 2, 164, 221, 189, 225, 148, 64, 189, 30, 101, 172, 61, 158, 19, 91, 62, 9, 113, 16, 190, 187, 10, 94, 191, 138, 71, 35, 191, 98, 44, 29, 61, 191, 214, 95, 189, 52, 80, 74, 62, 135, 48, 89, 190, 62, 114, 56, 189, 177, 160, 246, 62, 118, 214, 60, 191, 238, 75, 16, 61, 106, 64, 148, 62, 135, 208, 200, 190, 252, 44, 144, 62, 216, 26, 96, 60, 46, 18, 101, 62, 243, 56, 101, 190, 150, 7, 50, 62, 241, 71, 165, 60, 25, 79, 184, 190, 28, 195, 11, 62, 137, 206, 38, 63, 7, 143, 246, 61, 127, 218, 26, 191, 73, 230, 74, 61, 78, 185, 0, 190, 75, 5, 129, 189, 102, 128, 216, 190, 251, 127, 137, 190, 208, 140, 59, 62, 217, 42, 147, 189, 161, 41, 57, 62, 61, 229, 159, 190, 44, 58, 24, 62, 221, 177, 84, 61, 50, 224, 113, 190, 232, 216, 149, 190, 63, 57, 221, 61, 54, 41, 10, 189, 23, 146, 145, 62, 170, 164, 110, 190, 243, 115, 231, 60, 25, 55, 181, 189, 87, 95, 110, 61, 214, 42, 33, 62, 96, 217, 151, 62, 150, 124, 176, 62, 231, 166, 70, 62, 166, 220, 182, 60, 56, 134, 138, 61, 177, 58, 67, 60, 35, 215, 98, 189, 56, 240, 157, 189, 206, 107, 152, 190, 17, 185, 204, 190, 133, 49, 93, 62, 74, 31, 229, 61, 82, 87, 128, 61, 83, 234, 234, 62, 20, 94, 131, 62, 120, 141, 134, 61, 236, 173, 134, 61, 63, 125, 238, 189, 94, 161, 211, 189, 2, 212, 134, 189, 30, 210, 2, 190, 36, 198, 17, 62, 70, 174, 217, 61, 76, 65, 128, 62, 32, 142, 135, 191, 79, 59, 39, 61, 229, 12, 113, 62, 17, 204, 101, 189, 11, 65, 186, 189, 224, 20, 51, 62, 62, 193, 241, 189, 113, 108, 188, 189, 153, 194, 244, 190, 191, 91, 188, 190, 7, 147, 8, 189, 31, 5, 226, 189, 85, 202, 3, 62, 9, 67, 160, 190, 212, 222, 216, 59, 159, 170, 14, 190, 182, 57, 72, 191, 230, 76, 56, 189, 242, 77, 181, 62, 104, 110, 168, 189, 158, 199, 221, 62, 61, 92, 134, 62, 57, 250, 190, 62, 83, 64, 180, 61, 251, 76, 38, 188, 6, 120, 23, 62, 80, 249, 87, 190, 149, 76, 139, 61, 226, 224, 2, 61, 20, 254, 149, 61, 223, 159, 64, 62, 34, 63, 160, 62, 223, 163, 47, 189, 47, 252, 148, 62, 117, 102, 238, 188, 21, 193, 137, 62, 118, 78, 63, 190, 74, 230, 85, 62, 78, 51, 156, 189, 226, 87, 21, 190, 131, 187, 64, 190, 180, 157, 0, 191, 217, 43, 221, 60, 169, 168, 172, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 198, 42, 62, 94, 233, 169, 61, 0, 218, 116, 62, 23, 60, 28, 190, 213, 204, 188, 61, 16, 211, 26, 62, 175, 144, 137, 62, 242, 48, 134, 61, 190, 253, 149, 62, 195, 189, 95, 189, 166, 230, 120, 60, 206, 233, 198, 61, 250, 97, 189, 62, 158, 183, 183, 189, 241, 13, 128, 61, 41, 143, 90, 188, 224, 244, 230, 61, 124, 79, 231, 60, 236, 194, 221, 187, 252, 26, 46, 62, 154, 214, 15, 61, 196, 58, 108, 62, 123, 248, 149, 61, 20, 249, 171, 60, 121, 187, 182, 61, 111, 206, 29, 62, 16, 242, 235, 189, 33, 142, 22, 190, 202, 236, 84, 62, 162, 221, 103, 61, 249, 251, 54, 62, 86, 21, 188, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 225, 27, 63, 172, 155, 6, 63, 106, 31, 45, 190, 220, 96, 81, 61, 38, 177, 123, 190, 50, 71, 180, 62, 56, 250, 174, 191, 182, 228, 215, 61, 74, 249, 134, 59, 234, 81, 19, 63, 224, 107, 251, 190, 250, 191, 235, 190, 55, 6, 33, 191, 129, 102, 90, 190, 150, 30, 31, 63, 122, 88, 90, 190, 39, 35, 15, 191, 249, 158, 249, 190, 162, 87, 61, 191, 147, 243, 172, 62, 188, 74, 163, 62, 33, 61, 50, 63, 86, 208, 231, 190, 10, 142, 247, 61, 207, 98, 145, 190, 168, 187, 38, 62, 89, 196, 136, 189, 124, 240, 37, 62, 209, 212, 19, 63, 242, 2, 205, 62, 171, 198, 230, 190, 129, 145, 32, 191, 84, 157, 71, 190, 58, 183, 130, 190, 55, 121, 132, 190, 237, 214, 18, 190, 180, 85, 95, 190, 78, 42, 49, 190, 3, 233, 174, 188, 118, 233, 94, 188, 118, 85, 140, 190, 249, 154, 16, 61, 109, 88, 137, 189, 105, 209, 28, 62, 245, 27, 159, 190, 197, 200, 217, 61, 4, 145, 236, 61, 171, 45, 89, 62, 208, 78, 43, 62, 212, 195, 11, 62, 81, 104, 216, 62, 58, 103, 86, 61, 168, 132, 195, 62, 248, 138, 21, 61, 6, 214, 47, 61, 90, 49, 23, 190, 49, 146, 152, 189, 160, 41, 80, 190, 109, 77, 25, 190, 95, 7, 197, 189, 229, 13, 54, 189, 53, 253, 86, 62, 40, 235, 132, 190, 10, 153, 170, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 14, 19, 62, 145, 170, 191, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {121, 13, 48, 189, 138, 51, 253, 62, 178, 187, 240, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {77, 182, 48, 191, 2, 137, 50, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0008/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}