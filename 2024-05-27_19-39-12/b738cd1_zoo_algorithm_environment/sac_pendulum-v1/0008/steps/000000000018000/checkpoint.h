// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {108, 124, 77, 62, 141, 228, 66, 63, 90, 193, 220, 190, 25, 145, 131, 63, 165, 36, 42, 191, 204, 254, 227, 190, 156, 141, 227, 61, 253, 246, 180, 189, 192, 11, 155, 62, 193, 120, 1, 190, 236, 172, 163, 63, 204, 36, 18, 63, 74, 75, 59, 191, 241, 236, 30, 63, 77, 179, 198, 62, 247, 13, 74, 191, 125, 64, 81, 191, 151, 96, 47, 190, 109, 47, 50, 63, 213, 201, 188, 63, 4, 183, 173, 62, 54, 100, 16, 189, 212, 7, 58, 61, 165, 110, 13, 63, 223, 91, 1, 63, 125, 184, 147, 63, 58, 251, 197, 62, 130, 193, 138, 62, 192, 186, 73, 63, 182, 51, 181, 190, 177, 108, 24, 63, 252, 26, 91, 63, 166, 5, 224, 62, 147, 22, 62, 63, 227, 28, 99, 63, 100, 97, 230, 62, 51, 107, 36, 62, 230, 247, 66, 62, 52, 160, 159, 190, 231, 105, 244, 188, 235, 159, 157, 190, 234, 54, 217, 186, 229, 60, 63, 191, 190, 19, 188, 190, 165, 149, 164, 62, 191, 60, 195, 189, 28, 215, 84, 63, 219, 7, 201, 62, 237, 230, 181, 190, 78, 222, 173, 62, 254, 102, 135, 62, 164, 181, 40, 62, 32, 38, 50, 63, 88, 41, 31, 62, 89, 36, 144, 190, 251, 201, 181, 62, 226, 40, 12, 191, 34, 117, 11, 63, 87, 139, 171, 63, 180, 190, 233, 62, 170, 208, 41, 189, 32, 179, 225, 191, 219, 98, 144, 190, 251, 17, 206, 189, 157, 51, 185, 62, 25, 241, 210, 188, 13, 77, 113, 62, 60, 174, 128, 190, 218, 111, 30, 63, 80, 14, 153, 190, 128, 176, 147, 190, 207, 69, 66, 62, 204, 62, 214, 190, 78, 72, 169, 63, 8, 3, 83, 62, 18, 74, 183, 190, 239, 25, 84, 63, 29, 224, 250, 61, 46, 234, 0, 190, 138, 199, 152, 191, 14, 42, 144, 190, 108, 232, 38, 191, 189, 192, 64, 63, 27, 128, 163, 61, 204, 253, 197, 191, 114, 245, 125, 190, 28, 18, 52, 190, 146, 62, 50, 63, 92, 215, 109, 191, 83, 55, 222, 190, 82, 144, 156, 62, 98, 238, 154, 191, 106, 157, 27, 63, 85, 124, 23, 63, 180, 66, 177, 190, 57, 203, 164, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 50, 2, 191, 146, 209, 153, 61, 219, 161, 22, 191, 146, 85, 219, 61, 127, 192, 15, 191, 121, 112, 16, 62, 66, 165, 17, 190, 166, 8, 26, 189, 162, 159, 171, 190, 186, 24, 253, 62, 219, 225, 184, 190, 127, 193, 39, 60, 232, 175, 132, 62, 41, 218, 212, 190, 214, 61, 92, 190, 233, 237, 37, 191, 15, 80, 177, 62, 147, 192, 182, 62, 140, 22, 134, 62, 173, 174, 147, 190, 158, 63, 54, 61, 103, 213, 109, 62, 253, 237, 38, 63, 226, 198, 26, 191, 216, 127, 216, 189, 68, 230, 229, 62, 75, 174, 231, 189, 37, 121, 169, 62, 215, 98, 129, 62, 21, 15, 143, 190, 135, 235, 192, 187, 145, 52, 29, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 48, 17, 190, 125, 151, 161, 62, 100, 106, 47, 190, 35, 183, 186, 188, 204, 150, 139, 62, 146, 36, 62, 189, 163, 217, 253, 190, 65, 24, 15, 62, 243, 81, 219, 190, 120, 76, 150, 190, 178, 83, 136, 190, 125, 103, 35, 190, 97, 164, 239, 60, 82, 24, 51, 190, 229, 185, 230, 61, 35, 116, 133, 189, 35, 42, 31, 62, 208, 172, 146, 62, 238, 60, 83, 191, 127, 38, 2, 191, 99, 164, 91, 190, 211, 241, 182, 189, 15, 228, 146, 62, 87, 151, 228, 190, 97, 213, 133, 62, 153, 24, 255, 61, 252, 1, 143, 191, 214, 8, 49, 190, 219, 119, 162, 62, 211, 213, 65, 62, 6, 179, 135, 61, 223, 56, 34, 62, 24, 193, 98, 62, 30, 67, 188, 62, 191, 153, 16, 191, 93, 123, 210, 190, 205, 54, 43, 190, 149, 149, 56, 190, 68, 241, 13, 191, 94, 127, 79, 62, 229, 216, 45, 191, 159, 204, 25, 189, 86, 36, 161, 190, 131, 71, 5, 190, 172, 54, 161, 61, 160, 119, 153, 189, 133, 146, 90, 61, 119, 69, 48, 191, 243, 8, 89, 189, 23, 76, 243, 189, 148, 124, 131, 190, 46, 106, 46, 191, 88, 157, 0, 190, 183, 40, 203, 187, 226, 134, 145, 62, 160, 236, 42, 190, 54, 90, 7, 191, 20, 66, 251, 190, 65, 130, 192, 190, 18, 85, 214, 190, 96, 181, 46, 190, 94, 177, 173, 62, 164, 57, 163, 62, 23, 224, 179, 62, 255, 105, 104, 190, 180, 120, 251, 61, 178, 62, 190, 61, 8, 130, 200, 61, 222, 11, 217, 190, 135, 228, 158, 189, 151, 62, 220, 60, 47, 129, 105, 189, 158, 138, 153, 61, 38, 16, 168, 62, 137, 235, 192, 61, 105, 37, 237, 61, 35, 218, 44, 62, 32, 1, 28, 62, 53, 141, 144, 190, 61, 198, 202, 189, 139, 6, 53, 62, 209, 252, 157, 62, 58, 166, 61, 62, 192, 52, 61, 62, 4, 236, 63, 190, 224, 170, 139, 61, 28, 7, 185, 189, 28, 92, 150, 61, 87, 171, 34, 190, 65, 3, 191, 62, 85, 130, 63, 62, 72, 211, 112, 61, 170, 18, 155, 189, 251, 183, 190, 189, 235, 231, 123, 190, 184, 175, 149, 190, 156, 237, 135, 61, 135, 49, 0, 190, 127, 108, 187, 61, 206, 164, 61, 190, 92, 198, 2, 62, 198, 89, 225, 189, 68, 223, 47, 190, 204, 8, 6, 62, 214, 238, 18, 62, 42, 10, 87, 190, 6, 183, 222, 61, 218, 11, 14, 61, 230, 163, 237, 61, 194, 164, 37, 62, 249, 235, 236, 189, 74, 132, 198, 189, 115, 17, 180, 189, 90, 20, 2, 62, 57, 248, 5, 62, 212, 67, 91, 189, 131, 30, 30, 61, 203, 81, 196, 187, 37, 100, 63, 190, 92, 178, 62, 190, 103, 96, 29, 62, 218, 194, 3, 186, 33, 87, 234, 61, 195, 191, 156, 61, 156, 17, 20, 190, 183, 236, 40, 190, 8, 198, 226, 61, 59, 247, 154, 188, 239, 120, 245, 189, 206, 60, 251, 61, 199, 251, 73, 188, 91, 87, 4, 191, 253, 155, 149, 191, 48, 115, 149, 62, 210, 108, 60, 62, 179, 67, 230, 189, 242, 87, 94, 188, 177, 142, 221, 61, 117, 179, 52, 61, 205, 216, 66, 189, 14, 116, 132, 189, 13, 217, 195, 189, 186, 80, 227, 190, 23, 50, 69, 62, 40, 93, 200, 190, 150, 212, 113, 61, 38, 246, 165, 61, 146, 152, 186, 61, 200, 11, 13, 190, 36, 35, 135, 187, 131, 221, 224, 61, 211, 116, 92, 190, 30, 35, 125, 191, 63, 111, 185, 189, 35, 0, 49, 62, 184, 120, 202, 189, 26, 213, 146, 189, 198, 167, 50, 190, 134, 108, 28, 190, 223, 185, 37, 188, 220, 188, 36, 190, 75, 123, 141, 62, 0, 127, 48, 189, 142, 47, 97, 190, 186, 52, 231, 188, 40, 114, 15, 189, 113, 47, 24, 191, 167, 202, 39, 62, 221, 96, 57, 191, 8, 27, 54, 189, 161, 38, 197, 190, 83, 105, 42, 190, 48, 147, 64, 190, 180, 151, 5, 62, 221, 133, 205, 61, 85, 8, 252, 190, 171, 186, 189, 61, 63, 112, 24, 62, 48, 186, 117, 61, 60, 218, 25, 191, 64, 35, 23, 62, 59, 89, 134, 61, 122, 12, 179, 61, 204, 64, 91, 190, 150, 103, 178, 190, 65, 224, 29, 189, 234, 11, 155, 190, 137, 233, 230, 190, 92, 223, 109, 62, 23, 112, 131, 62, 252, 184, 20, 62, 203, 164, 140, 62, 226, 133, 11, 189, 16, 129, 219, 188, 61, 142, 242, 61, 131, 149, 195, 191, 211, 211, 16, 192, 117, 253, 194, 62, 85, 193, 65, 191, 137, 70, 77, 191, 212, 170, 172, 189, 113, 177, 240, 60, 241, 248, 67, 60, 202, 67, 173, 190, 9, 170, 225, 190, 68, 88, 36, 190, 44, 255, 154, 191, 49, 181, 166, 188, 68, 186, 103, 60, 101, 34, 184, 191, 33, 103, 137, 62, 162, 10, 205, 190, 208, 49, 65, 62, 180, 93, 21, 62, 181, 193, 162, 191, 40, 143, 232, 62, 168, 136, 33, 191, 245, 76, 27, 62, 14, 191, 3, 61, 186, 146, 131, 62, 6, 120, 138, 62, 236, 7, 129, 190, 95, 29, 136, 191, 174, 85, 233, 61, 222, 16, 135, 188, 32, 78, 4, 190, 31, 154, 225, 188, 241, 31, 60, 61, 227, 107, 239, 61, 208, 33, 196, 189, 4, 97, 139, 189, 172, 151, 21, 61, 191, 195, 7, 190, 122, 20, 18, 60, 199, 70, 251, 189, 250, 60, 57, 190, 171, 54, 160, 189, 60, 32, 218, 189, 249, 116, 235, 188, 86, 108, 155, 189, 84, 228, 190, 189, 36, 139, 1, 62, 28, 142, 241, 189, 241, 181, 100, 61, 80, 200, 18, 62, 223, 214, 211, 189, 130, 203, 59, 189, 105, 71, 181, 61, 47, 19, 243, 188, 187, 102, 69, 190, 139, 74, 129, 188, 190, 55, 55, 61, 113, 73, 252, 188, 159, 45, 6, 190, 183, 66, 87, 190, 219, 96, 159, 61, 182, 163, 28, 191, 90, 143, 163, 61, 92, 110, 3, 62, 207, 164, 89, 190, 103, 41, 167, 188, 204, 0, 91, 62, 46, 72, 76, 190, 151, 238, 55, 189, 117, 231, 137, 190, 53, 90, 189, 189, 69, 192, 214, 189, 201, 137, 139, 60, 21, 229, 44, 190, 215, 203, 98, 189, 249, 184, 109, 61, 132, 93, 78, 190, 7, 44, 63, 62, 225, 241, 190, 190, 118, 185, 162, 60, 168, 49, 77, 190, 48, 68, 67, 62, 43, 138, 28, 189, 51, 122, 45, 62, 185, 49, 44, 62, 48, 60, 188, 190, 30, 239, 186, 60, 164, 24, 36, 62, 140, 13, 255, 59, 65, 22, 230, 186, 97, 69, 220, 189, 126, 4, 100, 62, 11, 63, 140, 189, 130, 39, 101, 62, 77, 13, 149, 62, 248, 65, 72, 62, 67, 147, 153, 190, 14, 187, 175, 190, 250, 209, 71, 190, 234, 130, 197, 190, 146, 68, 54, 62, 84, 203, 158, 190, 136, 54, 148, 189, 14, 217, 147, 61, 41, 2, 252, 188, 137, 68, 216, 61, 152, 223, 6, 189, 4, 136, 55, 62, 188, 133, 52, 189, 46, 65, 77, 190, 244, 80, 166, 62, 26, 91, 32, 188, 203, 111, 252, 190, 196, 123, 75, 62, 78, 117, 249, 189, 50, 111, 134, 61, 68, 220, 132, 62, 125, 175, 79, 191, 145, 210, 151, 191, 196, 43, 75, 189, 50, 15, 200, 191, 137, 243, 33, 191, 133, 37, 173, 62, 94, 240, 104, 62, 209, 0, 149, 62, 198, 48, 32, 62, 162, 80, 133, 62, 96, 166, 163, 189, 192, 114, 167, 189, 72, 1, 176, 62, 249, 61, 117, 61, 93, 27, 216, 190, 131, 104, 174, 61, 142, 132, 237, 61, 25, 164, 1, 191, 73, 158, 8, 61, 108, 201, 198, 190, 117, 129, 76, 62, 236, 53, 33, 190, 20, 109, 138, 62, 225, 136, 137, 189, 143, 255, 84, 62, 102, 18, 188, 190, 38, 105, 176, 190, 206, 103, 13, 190, 185, 214, 19, 63, 216, 119, 220, 190, 114, 231, 8, 62, 240, 194, 41, 61, 225, 182, 106, 190, 146, 124, 70, 190, 28, 11, 70, 63, 36, 104, 77, 190, 87, 100, 89, 190, 76, 79, 147, 62, 116, 249, 199, 62, 103, 39, 14, 62, 245, 236, 184, 190, 123, 28, 34, 190, 119, 39, 5, 190, 19, 52, 169, 191, 210, 111, 177, 191, 146, 51, 147, 62, 164, 32, 89, 62, 110, 9, 64, 190, 65, 191, 14, 63, 6, 2, 87, 62, 228, 124, 153, 190, 97, 127, 126, 61, 242, 71, 133, 62, 83, 34, 26, 187, 112, 238, 169, 191, 24, 88, 66, 190, 158, 17, 160, 190, 214, 38, 116, 62, 65, 114, 200, 59, 139, 224, 239, 62, 143, 5, 54, 190, 70, 155, 73, 189, 161, 80, 140, 190, 210, 99, 54, 62, 121, 51, 156, 191, 85, 83, 107, 61, 93, 170, 157, 60, 88, 68, 206, 188, 253, 173, 15, 62, 130, 16, 100, 190, 21, 14, 99, 191, 171, 128, 194, 190, 213, 188, 55, 189, 1, 61, 182, 189, 221, 73, 232, 189, 103, 45, 179, 191, 6, 219, 18, 192, 87, 77, 162, 62, 89, 43, 96, 62, 147, 113, 37, 191, 89, 219, 220, 61, 228, 211, 91, 62, 120, 184, 77, 62, 232, 125, 27, 62, 74, 49, 55, 190, 190, 162, 171, 61, 254, 85, 179, 191, 2, 252, 128, 188, 125, 137, 34, 190, 0, 85, 254, 61, 176, 34, 2, 189, 231, 66, 143, 62, 147, 177, 202, 61, 247, 121, 77, 189, 251, 171, 124, 187, 27, 47, 99, 62, 133, 88, 94, 191, 181, 96, 37, 62, 55, 89, 138, 60, 209, 176, 79, 188, 207, 123, 255, 189, 75, 147, 80, 190, 192, 29, 163, 190, 101, 113, 255, 189, 50, 1, 33, 62, 194, 144, 171, 61, 176, 43, 93, 62, 179, 157, 118, 62, 61, 170, 155, 60, 225, 136, 40, 61, 110, 61, 159, 60, 18, 238, 131, 62, 67, 6, 5, 190, 81, 93, 191, 60, 154, 51, 136, 190, 182, 88, 4, 190, 227, 172, 124, 189, 46, 232, 10, 189, 242, 180, 73, 62, 151, 108, 135, 188, 52, 176, 75, 62, 209, 66, 178, 190, 136, 12, 169, 190, 206, 138, 69, 190, 129, 172, 48, 63, 155, 149, 130, 190, 162, 188, 105, 188, 11, 27, 134, 62, 24, 89, 116, 62, 55, 243, 237, 60, 56, 193, 10, 63, 18, 226, 162, 188, 81, 230, 115, 190, 20, 4, 106, 62, 132, 195, 56, 62, 249, 91, 9, 189, 41, 48, 73, 190, 178, 4, 12, 191, 57, 2, 245, 189, 2, 254, 84, 191, 44, 59, 163, 190, 145, 235, 192, 62, 85, 70, 28, 190, 145, 112, 233, 190, 9, 5, 197, 190, 119, 90, 35, 190, 250, 45, 6, 190, 209, 204, 159, 190, 84, 127, 205, 59, 221, 251, 160, 60, 229, 0, 58, 63, 82, 145, 201, 190, 160, 87, 183, 190, 112, 184, 16, 191, 65, 249, 86, 62, 123, 2, 8, 191, 12, 74, 122, 62, 189, 159, 188, 189, 7, 229, 200, 190, 241, 31, 245, 189, 116, 214, 32, 191, 172, 254, 203, 60, 54, 237, 160, 62, 173, 230, 195, 61, 51, 171, 130, 62, 217, 210, 225, 190, 169, 245, 121, 62, 209, 82, 55, 191, 207, 90, 25, 190, 30, 203, 128, 190, 139, 103, 101, 190, 165, 129, 140, 190, 117, 187, 202, 190, 39, 58, 200, 62, 168, 181, 158, 62, 100, 98, 163, 190, 97, 159, 208, 62, 117, 107, 140, 62, 34, 151, 226, 61, 159, 79, 63, 62, 124, 16, 219, 61, 26, 191, 222, 61, 25, 110, 138, 191, 209, 27, 204, 190, 189, 131, 162, 59, 102, 116, 230, 62, 26, 190, 243, 61, 246, 116, 162, 62, 131, 41, 203, 189, 85, 69, 92, 188, 34, 125, 28, 189, 112, 146, 13, 191, 207, 49, 27, 190, 210, 100, 121, 62, 19, 77, 154, 62, 175, 243, 8, 62, 54, 186, 205, 61, 163, 194, 1, 191, 97, 177, 1, 191, 210, 76, 128, 190, 118, 174, 79, 191, 129, 31, 212, 61, 247, 91, 22, 61, 193, 206, 230, 61, 108, 227, 144, 62, 22, 166, 1, 190, 121, 34, 166, 61, 49, 18, 31, 190, 125, 54, 228, 190, 12, 118, 69, 190, 160, 10, 112, 191, 66, 45, 26, 191, 2, 166, 245, 190, 193, 3, 152, 189, 92, 38, 70, 190, 127, 138, 253, 61, 244, 130, 38, 62, 217, 226, 131, 62, 151, 145, 34, 191, 39, 148, 177, 190, 157, 153, 54, 62, 26, 67, 105, 61, 147, 201, 70, 62, 23, 146, 100, 190, 205, 71, 233, 62, 44, 163, 105, 62, 220, 197, 107, 61, 95, 146, 183, 62, 217, 72, 25, 189, 246, 189, 1, 61, 208, 33, 217, 189, 120, 193, 22, 190, 60, 127, 139, 190, 54, 236, 9, 190, 248, 24, 148, 62, 60, 104, 57, 191, 237, 80, 173, 191, 21, 13, 161, 62, 163, 113, 165, 62, 101, 133, 158, 190, 178, 119, 51, 63, 152, 220, 66, 62, 188, 113, 233, 62, 93, 83, 165, 61, 135, 223, 253, 189, 49, 204, 0, 190, 247, 18, 159, 191, 49, 84, 202, 62, 70, 192, 26, 190, 114, 181, 31, 61, 164, 196, 16, 189, 237, 6, 218, 62, 227, 169, 227, 189, 85, 179, 217, 188, 202, 190, 165, 61, 187, 1, 177, 62, 57, 166, 77, 191, 122, 21, 199, 62, 211, 113, 162, 61, 216, 36, 90, 62, 108, 18, 195, 189, 188, 231, 140, 190, 74, 58, 11, 191, 162, 125, 164, 190, 152, 194, 45, 62, 89, 44, 162, 62, 222, 52, 226, 190, 254, 29, 100, 61, 84, 179, 31, 190, 47, 44, 156, 190, 241, 199, 47, 191, 23, 80, 8, 190, 222, 24, 12, 190, 234, 58, 163, 190, 162, 207, 38, 191, 72, 206, 76, 191, 131, 115, 134, 189, 68, 93, 161, 188, 252, 193, 16, 191, 197, 180, 41, 190, 0, 175, 50, 190, 219, 125, 110, 191, 197, 231, 202, 190, 195, 26, 205, 190, 19, 143, 54, 62, 254, 84, 197, 190, 204, 104, 66, 62, 25, 156, 59, 190, 111, 157, 27, 190, 75, 18, 131, 191, 142, 203, 95, 62, 199, 29, 167, 191, 80, 88, 69, 191, 199, 169, 83, 62, 23, 9, 2, 63, 183, 168, 147, 189, 16, 102, 59, 190, 181, 24, 233, 189, 72, 46, 18, 190, 28, 145, 139, 61, 116, 176, 254, 62, 108, 167, 31, 63, 68, 101, 237, 61, 59, 9, 129, 62, 5, 59, 21, 62, 48, 163, 120, 191, 167, 86, 11, 61, 173, 6, 116, 62, 249, 109, 25, 191, 16, 161, 44, 62, 235, 229, 10, 62, 212, 236, 97, 190, 125, 26, 214, 61, 101, 244, 167, 62, 143, 195, 73, 191, 181, 190, 193, 61, 137, 155, 123, 61, 107, 34, 71, 190, 153, 117, 180, 61, 47, 184, 164, 190, 69, 230, 49, 62, 232, 71, 45, 62, 181, 33, 221, 189, 22, 79, 233, 61, 66, 70, 203, 62, 26, 99, 143, 190, 49, 45, 133, 62, 170, 112, 108, 190, 213, 128, 87, 61, 54, 70, 147, 62, 190, 238, 64, 189, 227, 6, 142, 190, 165, 55, 18, 191, 145, 253, 196, 189, 103, 210, 1, 191, 57, 137, 78, 62, 14, 71, 57, 191, 107, 206, 76, 190, 238, 93, 190, 190, 224, 188, 253, 188, 151, 116, 34, 61, 225, 88, 184, 61, 25, 204, 254, 188, 197, 191, 78, 190, 144, 28, 243, 189, 195, 95, 250, 189, 116, 39, 76, 190, 26, 201, 0, 191, 49, 91, 72, 62, 56, 65, 9, 190, 49, 212, 151, 61, 220, 30, 140, 62, 155, 110, 120, 190, 196, 191, 139, 191, 182, 180, 243, 60, 216, 85, 38, 191, 87, 76, 37, 189, 1, 230, 184, 62, 108, 224, 147, 62, 59, 44, 130, 61, 250, 1, 249, 61, 152, 0, 164, 62, 31, 135, 199, 190, 235, 49, 37, 62, 71, 14, 35, 63, 48, 183, 160, 189, 79, 137, 42, 191, 26, 218, 25, 62, 243, 108, 135, 190, 121, 236, 50, 190, 177, 227, 128, 190, 23, 74, 148, 190, 161, 135, 18, 62, 42, 85, 48, 189, 209, 179, 132, 186, 6, 47, 152, 190, 19, 7, 75, 62, 210, 243, 220, 189, 241, 159, 180, 190, 221, 60, 168, 190, 22, 190, 220, 189, 40, 127, 35, 190, 3, 179, 140, 61, 149, 25, 249, 190, 63, 150, 40, 62, 111, 149, 118, 189, 165, 22, 141, 190, 166, 78, 128, 190, 25, 46, 135, 61, 187, 102, 129, 62, 243, 127, 139, 62, 248, 98, 153, 62, 30, 96, 138, 61, 217, 83, 132, 190, 223, 29, 37, 62, 161, 177, 159, 190, 201, 121, 241, 189, 246, 101, 64, 61, 254, 118, 149, 60, 67, 63, 205, 61, 150, 82, 44, 61, 229, 127, 164, 62, 169, 144, 132, 62, 37, 212, 167, 61, 30, 85, 179, 188, 208, 69, 0, 190, 213, 70, 61, 62, 87, 33, 72, 62, 229, 114, 142, 61, 183, 209, 15, 190, 66, 238, 102, 62, 79, 232, 177, 189, 194, 140, 2, 191, 237, 184, 0, 62, 244, 34, 238, 189, 220, 204, 218, 62, 227, 83, 21, 191, 163, 192, 187, 60, 34, 183, 169, 190, 23, 90, 27, 62, 9, 53, 122, 189, 179, 232, 38, 191, 80, 73, 73, 62, 184, 167, 161, 190, 6, 31, 75, 61, 25, 136, 54, 189, 194, 67, 13, 190, 249, 41, 117, 189, 119, 30, 30, 190, 109, 5, 167, 189, 106, 248, 154, 61, 87, 5, 203, 61, 231, 97, 194, 61, 213, 231, 255, 189, 67, 178, 67, 189, 196, 246, 231, 189, 214, 99, 253, 58, 252, 216, 49, 190, 165, 223, 204, 189, 25, 115, 165, 189, 54, 4, 239, 60, 190, 102, 52, 190, 16, 25, 107, 61, 121, 172, 212, 61, 31, 233, 148, 189, 221, 151, 63, 189, 196, 225, 46, 190, 174, 109, 175, 189, 104, 104, 18, 189, 123, 20, 8, 61, 131, 199, 16, 190, 42, 56, 113, 189, 6, 164, 167, 60, 82, 76, 131, 58, 194, 64, 23, 190, 81, 50, 153, 61, 201, 255, 105, 190, 173, 213, 45, 189, 161, 171, 58, 60, 222, 22, 250, 190, 206, 85, 91, 191, 53, 163, 212, 61, 45, 206, 128, 188, 44, 110, 162, 190, 3, 186, 178, 60, 14, 46, 164, 62, 99, 0, 163, 62, 180, 43, 190, 61, 69, 242, 85, 60, 121, 14, 227, 60, 38, 111, 87, 191, 237, 20, 230, 190, 168, 67, 224, 187, 212, 217, 59, 59, 104, 4, 174, 62, 124, 132, 53, 62, 60, 33, 138, 190, 34, 44, 231, 59, 64, 175, 16, 61, 41, 41, 39, 62, 116, 78, 206, 190, 245, 172, 90, 62, 204, 101, 32, 62, 12, 235, 192, 61, 137, 30, 153, 61, 96, 175, 151, 190, 246, 15, 132, 190, 16, 64, 1, 190, 133, 138, 227, 61, 124, 145, 188, 61, 27, 95, 177, 190, 173, 242, 100, 61, 238, 55, 142, 62, 225, 246, 60, 62, 145, 252, 165, 190, 148, 63, 66, 62, 213, 138, 135, 61, 151, 57, 43, 189, 114, 248, 55, 190, 157, 246, 208, 61, 205, 167, 13, 62, 204, 196, 238, 189, 220, 73, 41, 189, 131, 195, 58, 61, 96, 173, 55, 62, 155, 105, 79, 62, 205, 135, 4, 188, 63, 67, 23, 190, 35, 30, 10, 190, 244, 214, 60, 62, 17, 19, 44, 61, 64, 220, 143, 188, 158, 210, 72, 62, 246, 149, 137, 62, 7, 5, 174, 190, 147, 208, 112, 62, 50, 110, 168, 62, 175, 159, 114, 62, 126, 226, 49, 62, 122, 112, 204, 62, 176, 163, 110, 188, 100, 46, 191, 59, 6, 17, 44, 190, 148, 181, 25, 61, 165, 106, 217, 59, 47, 101, 68, 61, 221, 223, 239, 61, 230, 228, 22, 61, 240, 93, 146, 61, 114, 107, 167, 189, 67, 163, 209, 189, 238, 106, 210, 61, 19, 177, 254, 189, 18, 53, 29, 188, 168, 36, 77, 189, 192, 148, 33, 190, 223, 197, 10, 190, 186, 121, 0, 62, 149, 183, 169, 61, 7, 221, 136, 189, 241, 88, 117, 186, 65, 42, 120, 189, 109, 164, 185, 188, 20, 193, 73, 60, 93, 17, 72, 190, 5, 128, 255, 188, 30, 137, 227, 61, 211, 42, 81, 190, 40, 13, 57, 190, 192, 135, 62, 190, 154, 242, 68, 190, 54, 217, 60, 61, 67, 210, 245, 189, 188, 191, 151, 189, 32, 90, 244, 189, 129, 187, 141, 61, 55, 70, 107, 189, 183, 65, 35, 62, 130, 1, 226, 189, 5, 156, 101, 60, 162, 248, 144, 61, 134, 80, 210, 185, 50, 22, 47, 62, 74, 61, 254, 60, 141, 110, 225, 61, 5, 203, 25, 190, 192, 81, 28, 62, 2, 241, 92, 189, 142, 222, 147, 189, 91, 233, 203, 189, 197, 201, 68, 189, 234, 26, 8, 190, 94, 159, 29, 190, 68, 176, 17, 62, 184, 36, 219, 189, 18, 206, 237, 61, 59, 63, 110, 189, 22, 205, 160, 188, 158, 188, 23, 60, 195, 126, 224, 189, 42, 106, 202, 60, 230, 50, 150, 189, 92, 246, 0, 190, 156, 117, 93, 61, 170, 189, 10, 62, 90, 51, 144, 190, 25, 148, 150, 190, 99, 57, 156, 191, 55, 143, 117, 191, 14, 90, 178, 62, 17, 100, 73, 190, 217, 129, 6, 191, 2, 120, 16, 190, 43, 125, 48, 189, 163, 176, 221, 60, 210, 242, 2, 189, 193, 42, 174, 189, 30, 101, 172, 61, 80, 15, 1, 63, 29, 107, 19, 190, 43, 120, 82, 191, 240, 219, 37, 191, 3, 44, 70, 61, 26, 253, 96, 189, 107, 209, 47, 62, 14, 81, 96, 190, 58, 175, 133, 190, 180, 83, 249, 62, 226, 202, 73, 191, 164, 111, 31, 62, 247, 73, 149, 62, 40, 51, 179, 190, 137, 30, 203, 62, 225, 203, 115, 189, 76, 177, 38, 61, 28, 40, 70, 190, 63, 175, 25, 62, 24, 128, 253, 187, 71, 120, 236, 190, 198, 79, 247, 188, 182, 33, 26, 63, 47, 250, 200, 61, 216, 86, 43, 191, 30, 230, 5, 189, 89, 50, 178, 190, 1, 143, 232, 189, 64, 127, 0, 191, 66, 239, 117, 190, 230, 158, 247, 61, 217, 42, 147, 189, 59, 229, 29, 62, 195, 6, 232, 190, 253, 90, 181, 61, 9, 168, 224, 186, 150, 107, 138, 190, 19, 25, 222, 190, 151, 215, 248, 60, 167, 7, 244, 189, 156, 254, 129, 62, 226, 5, 130, 190, 100, 76, 66, 190, 128, 87, 163, 190, 183, 252, 128, 189, 145, 33, 189, 188, 60, 189, 178, 62, 113, 209, 157, 62, 235, 244, 9, 62, 169, 54, 214, 61, 244, 240, 221, 187, 207, 229, 137, 189, 157, 184, 53, 61, 244, 218, 233, 189, 227, 12, 173, 190, 253, 15, 237, 190, 174, 39, 77, 62, 249, 175, 1, 62, 55, 235, 183, 61, 6, 202, 219, 62, 221, 143, 129, 62, 95, 46, 4, 61, 184, 213, 95, 61, 63, 125, 238, 189, 184, 93, 10, 189, 51, 53, 98, 189, 163, 157, 24, 190, 194, 38, 2, 62, 244, 21, 64, 61, 7, 251, 137, 62, 138, 0, 252, 191, 253, 42, 131, 188, 203, 146, 66, 62, 176, 42, 58, 61, 155, 5, 122, 190, 157, 212, 239, 61, 239, 5, 51, 191, 79, 101, 84, 190, 210, 143, 102, 191, 118, 29, 237, 190, 29, 143, 34, 189, 145, 142, 131, 190, 23, 99, 73, 188, 111, 116, 155, 190, 198, 30, 140, 61, 247, 172, 148, 190, 70, 82, 105, 191, 150, 35, 252, 188, 75, 117, 193, 62, 121, 169, 50, 190, 79, 126, 231, 62, 217, 76, 135, 62, 173, 137, 182, 62, 155, 150, 0, 62, 90, 239, 121, 60, 6, 120, 23, 62, 8, 3, 87, 190, 26, 146, 180, 60, 239, 159, 193, 189, 10, 8, 210, 61, 100, 107, 146, 61, 211, 7, 173, 62, 210, 125, 240, 190, 43, 35, 120, 62, 203, 104, 141, 188, 15, 97, 158, 62, 141, 88, 198, 190, 126, 121, 171, 61, 166, 228, 181, 190, 71, 188, 149, 190, 193, 80, 70, 190, 115, 91, 6, 191, 14, 124, 131, 188, 183, 159, 29, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {120, 211, 59, 62, 78, 203, 34, 61, 229, 60, 108, 62, 23, 60, 28, 190, 238, 38, 145, 61, 201, 145, 199, 61, 57, 29, 166, 62, 38, 90, 46, 61, 208, 255, 171, 62, 246, 129, 191, 189, 165, 94, 35, 189, 230, 84, 90, 62, 198, 42, 188, 62, 107, 255, 3, 190, 70, 221, 215, 60, 253, 233, 28, 61, 9, 186, 76, 62, 41, 71, 189, 61, 124, 88, 146, 60, 236, 108, 175, 62, 98, 163, 52, 61, 59, 55, 55, 62, 3, 246, 35, 61, 20, 249, 171, 60, 230, 88, 211, 61, 128, 76, 31, 62, 98, 143, 7, 190, 33, 142, 22, 190, 8, 114, 150, 61, 143, 97, 251, 188, 55, 52, 217, 61, 247, 41, 188, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 2, 52, 63, 77, 136, 38, 63, 58, 19, 11, 190, 220, 96, 81, 61, 82, 181, 91, 190, 34, 16, 223, 62, 55, 140, 186, 191, 89, 96, 140, 61, 188, 223, 128, 61, 170, 117, 57, 63, 221, 37, 53, 191, 246, 192, 117, 191, 38, 189, 35, 191, 202, 75, 158, 190, 50, 251, 100, 63, 111, 64, 234, 190, 48, 255, 119, 191, 109, 241, 96, 191, 12, 177, 210, 191, 156, 220, 221, 62, 92, 30, 34, 63, 236, 118, 41, 63, 208, 89, 18, 191, 10, 142, 247, 61, 164, 121, 122, 190, 1, 79, 229, 61, 94, 34, 88, 189, 124, 240, 37, 62, 1, 223, 38, 63, 163, 138, 192, 62, 184, 103, 10, 191, 174, 31, 42, 191, 219, 77, 36, 62, 74, 92, 184, 190, 15, 111, 152, 190, 237, 214, 18, 190, 64, 99, 22, 190, 84, 178, 101, 190, 193, 17, 210, 61, 162, 196, 87, 60, 46, 251, 176, 190, 200, 233, 187, 189, 216, 140, 57, 190, 63, 100, 145, 62, 55, 193, 27, 190, 229, 102, 147, 61, 251, 234, 20, 188, 176, 219, 53, 62, 91, 226, 50, 60, 192, 106, 205, 62, 33, 123, 140, 62, 68, 31, 84, 189, 105, 28, 175, 62, 38, 126, 149, 188, 82, 194, 86, 189, 90, 49, 23, 190, 151, 132, 232, 189, 230, 59, 136, 190, 121, 124, 27, 190, 95, 7, 197, 189, 114, 145, 164, 61, 203, 42, 67, 62, 75, 53, 178, 190, 38, 190, 119, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 33, 21, 62, 242, 7, 242, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {12, 228, 193, 63, 94, 194, 174, 63, 204, 217, 53, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {165, 1, 9, 193, 52, 10, 149, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0008/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}