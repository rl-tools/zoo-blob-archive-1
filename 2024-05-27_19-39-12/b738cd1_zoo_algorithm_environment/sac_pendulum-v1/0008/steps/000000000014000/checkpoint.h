// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 179, 250, 61, 105, 37, 47, 63, 227, 213, 211, 190, 97, 158, 135, 63, 127, 43, 22, 191, 250, 136, 229, 190, 79, 158, 207, 189, 213, 131, 129, 189, 205, 113, 151, 62, 176, 169, 134, 190, 73, 158, 170, 63, 109, 83, 233, 62, 70, 120, 56, 191, 3, 56, 59, 63, 137, 189, 177, 62, 37, 89, 48, 191, 27, 175, 100, 191, 253, 240, 22, 190, 87, 20, 51, 63, 91, 225, 174, 63, 189, 112, 158, 62, 212, 241, 62, 190, 16, 245, 215, 61, 196, 119, 1, 63, 193, 211, 254, 62, 216, 85, 123, 63, 129, 24, 167, 62, 101, 243, 160, 62, 5, 226, 38, 63, 155, 71, 160, 190, 239, 101, 20, 63, 54, 101, 52, 63, 120, 11, 237, 62, 141, 208, 64, 63, 94, 164, 78, 63, 162, 66, 199, 62, 24, 232, 117, 62, 28, 83, 146, 62, 66, 222, 177, 190, 231, 105, 244, 188, 235, 159, 157, 190, 234, 54, 217, 186, 90, 210, 3, 191, 209, 223, 134, 190, 184, 43, 154, 62, 99, 8, 95, 188, 24, 232, 57, 63, 57, 180, 218, 62, 234, 110, 189, 190, 34, 24, 184, 62, 239, 97, 111, 62, 159, 116, 47, 62, 15, 31, 45, 63, 15, 218, 245, 61, 102, 241, 231, 190, 149, 156, 112, 62, 223, 244, 11, 191, 226, 168, 13, 63, 185, 130, 151, 63, 175, 166, 193, 62, 52, 212, 143, 189, 18, 24, 195, 191, 162, 15, 173, 190, 134, 73, 138, 189, 39, 66, 149, 62, 83, 250, 17, 189, 180, 110, 194, 62, 80, 179, 137, 189, 208, 222, 9, 63, 183, 130, 205, 190, 157, 89, 159, 190, 107, 218, 102, 62, 194, 146, 174, 190, 38, 176, 157, 63, 144, 3, 132, 62, 212, 126, 182, 190, 203, 21, 49, 63, 36, 133, 27, 62, 48, 138, 22, 189, 180, 222, 139, 191, 63, 59, 138, 190, 237, 151, 249, 190, 105, 103, 54, 63, 250, 57, 196, 61, 91, 102, 178, 191, 158, 198, 136, 190, 191, 42, 16, 190, 94, 133, 54, 63, 111, 159, 89, 191, 179, 32, 227, 190, 73, 250, 142, 62, 208, 8, 111, 191, 41, 179, 10, 63, 28, 2, 2, 63, 145, 101, 181, 190, 57, 252, 138, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 7, 22, 191, 167, 43, 227, 61, 209, 189, 18, 191, 182, 129, 40, 61, 8, 73, 233, 190, 114, 59, 66, 62, 23, 161, 15, 190, 68, 166, 214, 189, 93, 52, 175, 190, 187, 47, 7, 63, 39, 141, 183, 190, 160, 164, 12, 61, 31, 15, 187, 62, 41, 218, 212, 190, 100, 210, 188, 190, 124, 148, 21, 191, 68, 209, 159, 62, 173, 184, 214, 62, 58, 49, 239, 61, 15, 58, 141, 190, 158, 24, 3, 61, 200, 196, 132, 62, 221, 137, 57, 63, 114, 220, 247, 190, 3, 92, 119, 189, 163, 181, 228, 62, 185, 34, 178, 189, 107, 32, 196, 62, 151, 38, 92, 62, 104, 66, 134, 190, 200, 90, 127, 189, 4, 33, 41, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 77, 171, 189, 6, 183, 164, 62, 109, 218, 59, 190, 217, 64, 135, 59, 239, 29, 140, 62, 32, 87, 109, 59, 82, 254, 222, 190, 199, 136, 239, 61, 130, 41, 172, 190, 41, 115, 121, 190, 170, 108, 138, 190, 64, 136, 32, 190, 241, 214, 166, 61, 82, 24, 51, 190, 35, 241, 134, 61, 201, 211, 174, 189, 152, 31, 27, 62, 16, 222, 164, 62, 109, 254, 30, 191, 62, 135, 219, 190, 102, 253, 195, 190, 32, 224, 24, 188, 242, 89, 136, 62, 193, 137, 248, 190, 195, 94, 151, 62, 214, 190, 94, 62, 100, 57, 87, 191, 70, 203, 19, 190, 100, 130, 143, 62, 41, 39, 66, 62, 66, 25, 176, 57, 22, 55, 164, 189, 57, 192, 55, 62, 25, 35, 194, 62, 35, 196, 251, 190, 208, 236, 155, 190, 124, 95, 177, 60, 107, 112, 188, 189, 171, 93, 0, 191, 50, 111, 129, 62, 159, 41, 7, 191, 6, 19, 181, 188, 202, 48, 131, 190, 89, 175, 191, 189, 33, 140, 209, 61, 160, 119, 153, 189, 145, 200, 7, 62, 191, 199, 19, 191, 114, 180, 38, 60, 209, 30, 179, 189, 237, 139, 146, 190, 215, 53, 14, 191, 44, 219, 91, 190, 165, 251, 169, 58, 22, 222, 166, 62, 227, 138, 210, 189, 81, 142, 227, 190, 11, 148, 197, 190, 247, 148, 151, 190, 237, 129, 167, 190, 220, 118, 14, 190, 24, 32, 174, 62, 161, 112, 161, 62, 245, 161, 142, 62, 190, 132, 73, 190, 65, 255, 55, 62, 75, 207, 18, 62, 89, 38, 19, 61, 225, 206, 175, 190, 152, 246, 198, 189, 62, 81, 172, 60, 61, 108, 123, 59, 66, 238, 101, 60, 157, 4, 169, 62, 245, 155, 250, 61, 61, 140, 43, 62, 43, 185, 56, 62, 32, 1, 28, 62, 80, 75, 244, 189, 205, 184, 170, 189, 3, 132, 253, 61, 129, 63, 162, 62, 138, 17, 51, 62, 70, 91, 16, 62, 124, 241, 209, 189, 47, 170, 203, 60, 195, 46, 238, 188, 164, 101, 22, 62, 189, 52, 132, 190, 204, 105, 132, 62, 205, 166, 67, 62, 128, 83, 79, 189, 52, 24, 237, 189, 173, 43, 85, 189, 73, 145, 14, 190, 57, 177, 135, 190, 156, 237, 135, 61, 135, 49, 0, 190, 127, 108, 187, 61, 206, 164, 61, 190, 92, 198, 2, 62, 198, 89, 225, 189, 68, 223, 47, 190, 204, 8, 6, 62, 214, 238, 18, 62, 42, 10, 87, 190, 6, 183, 222, 61, 218, 11, 14, 61, 230, 163, 237, 61, 194, 164, 37, 62, 249, 235, 236, 189, 74, 132, 198, 189, 115, 17, 180, 189, 90, 20, 2, 62, 57, 248, 5, 62, 212, 67, 91, 189, 131, 30, 30, 61, 203, 81, 196, 187, 37, 100, 63, 190, 92, 178, 62, 190, 103, 96, 29, 62, 218, 194, 3, 186, 33, 87, 234, 61, 195, 191, 156, 61, 156, 17, 20, 190, 183, 236, 40, 190, 8, 198, 226, 61, 59, 247, 154, 188, 45, 176, 200, 189, 95, 99, 22, 62, 233, 216, 118, 60, 132, 39, 175, 190, 43, 192, 146, 191, 250, 208, 159, 62, 6, 101, 85, 62, 162, 72, 71, 61, 178, 185, 165, 188, 224, 63, 254, 61, 44, 171, 7, 62, 125, 210, 63, 60, 122, 38, 124, 189, 13, 217, 195, 189, 18, 6, 170, 190, 240, 10, 101, 62, 153, 48, 102, 190, 44, 171, 198, 61, 149, 231, 215, 61, 7, 230, 190, 61, 13, 194, 155, 189, 76, 248, 160, 60, 60, 176, 35, 62, 29, 36, 74, 190, 75, 143, 105, 191, 62, 67, 130, 189, 67, 21, 9, 62, 25, 132, 63, 189, 159, 67, 111, 60, 228, 252, 29, 190, 174, 55, 247, 188, 24, 38, 18, 61, 252, 31, 72, 190, 64, 108, 150, 62, 168, 14, 124, 60, 126, 67, 21, 190, 106, 126, 134, 61, 212, 39, 131, 188, 226, 156, 5, 191, 171, 51, 83, 62, 214, 126, 6, 191, 251, 10, 176, 188, 69, 98, 147, 190, 131, 80, 213, 189, 138, 58, 35, 190, 180, 151, 5, 62, 10, 75, 5, 62, 144, 172, 213, 190, 92, 72, 10, 62, 3, 226, 74, 62, 253, 92, 19, 61, 123, 168, 223, 190, 16, 17, 84, 61, 174, 5, 167, 61, 169, 191, 24, 62, 239, 82, 50, 190, 58, 128, 143, 190, 195, 66, 63, 61, 201, 98, 127, 190, 71, 12, 202, 190, 65, 55, 100, 62, 75, 79, 133, 62, 91, 3, 42, 62, 147, 79, 79, 62, 130, 116, 122, 189, 252, 243, 4, 189, 61, 142, 242, 61, 179, 252, 213, 191, 144, 130, 15, 192, 44, 0, 211, 62, 230, 212, 66, 191, 250, 1, 63, 191, 212, 170, 172, 189, 195, 93, 10, 188, 241, 248, 67, 60, 202, 67, 173, 190, 4, 24, 243, 190, 68, 88, 36, 190, 2, 125, 72, 191, 49, 181, 166, 188, 92, 185, 6, 60, 78, 5, 191, 191, 40, 246, 110, 62, 162, 10, 205, 190, 28, 131, 112, 62, 209, 131, 211, 61, 62, 59, 139, 191, 97, 209, 237, 62, 62, 77, 75, 191, 225, 153, 8, 62, 168, 103, 131, 61, 151, 22, 102, 62, 158, 156, 127, 62, 99, 135, 137, 190, 22, 122, 133, 191, 207, 237, 174, 61, 222, 16, 135, 188, 32, 78, 4, 190, 31, 154, 225, 188, 241, 31, 60, 61, 227, 107, 239, 61, 208, 33, 196, 189, 4, 97, 139, 189, 172, 151, 21, 61, 191, 195, 7, 190, 122, 20, 18, 60, 199, 70, 251, 189, 250, 60, 57, 190, 171, 54, 160, 189, 60, 32, 218, 189, 249, 116, 235, 188, 86, 108, 155, 189, 84, 228, 190, 189, 36, 139, 1, 62, 28, 142, 241, 189, 241, 181, 100, 61, 80, 200, 18, 62, 223, 214, 211, 189, 130, 203, 59, 189, 105, 71, 181, 61, 47, 19, 243, 188, 187, 102, 69, 190, 139, 74, 129, 188, 190, 55, 55, 61, 113, 73, 252, 188, 159, 45, 6, 190, 183, 66, 87, 190, 219, 96, 159, 61, 31, 64, 23, 191, 187, 164, 133, 61, 227, 165, 251, 61, 68, 55, 134, 190, 220, 59, 35, 188, 196, 196, 31, 62, 255, 202, 40, 190, 135, 252, 137, 189, 250, 55, 145, 190, 252, 190, 43, 189, 55, 98, 220, 189, 68, 151, 15, 61, 63, 238, 1, 190, 215, 203, 98, 189, 204, 7, 187, 61, 0, 153, 97, 190, 157, 68, 39, 62, 10, 247, 174, 190, 0, 32, 20, 61, 19, 211, 77, 190, 20, 42, 144, 61, 62, 164, 91, 187, 31, 44, 209, 61, 48, 79, 70, 62, 80, 79, 215, 190, 101, 135, 3, 61, 246, 185, 133, 61, 28, 35, 1, 189, 138, 25, 136, 188, 124, 116, 12, 190, 106, 178, 218, 61, 56, 166, 24, 189, 83, 35, 106, 62, 252, 188, 155, 62, 153, 158, 75, 62, 197, 177, 133, 190, 107, 12, 69, 190, 227, 183, 233, 189, 125, 78, 175, 190, 35, 84, 43, 62, 203, 136, 62, 190, 20, 56, 44, 189, 140, 161, 170, 61, 15, 70, 162, 188, 42, 81, 20, 62, 152, 223, 6, 189, 81, 164, 68, 62, 119, 3, 31, 59, 8, 25, 74, 190, 146, 226, 177, 62, 103, 135, 89, 59, 6, 178, 202, 190, 90, 45, 3, 62, 64, 247, 185, 189, 39, 116, 164, 61, 211, 225, 132, 62, 122, 1, 5, 191, 161, 96, 137, 191, 122, 100, 235, 60, 245, 168, 183, 191, 209, 244, 15, 191, 81, 228, 175, 62, 5, 203, 58, 62, 137, 220, 117, 62, 247, 205, 42, 62, 148, 159, 130, 62, 101, 73, 236, 189, 110, 211, 192, 189, 75, 102, 167, 62, 202, 177, 123, 61, 197, 252, 185, 190, 160, 157, 130, 61, 176, 133, 209, 61, 30, 181, 232, 190, 8, 26, 41, 60, 88, 252, 184, 190, 210, 137, 94, 62, 236, 53, 33, 190, 205, 130, 143, 62, 125, 17, 214, 189, 150, 246, 105, 62, 203, 87, 160, 190, 56, 134, 170, 190, 238, 123, 31, 190, 75, 131, 1, 63, 122, 236, 200, 190, 236, 45, 202, 61, 19, 84, 245, 60, 14, 30, 12, 190, 185, 129, 255, 189, 114, 12, 50, 63, 201, 74, 222, 189, 123, 88, 130, 189, 144, 101, 141, 62, 91, 235, 169, 62, 65, 202, 114, 62, 136, 76, 147, 190, 197, 183, 61, 190, 119, 39, 5, 190, 14, 231, 164, 191, 8, 109, 168, 191, 63, 211, 164, 62, 135, 213, 190, 61, 250, 226, 7, 190, 165, 84, 138, 62, 88, 133, 75, 62, 66, 70, 164, 190, 222, 144, 189, 189, 247, 107, 124, 62, 83, 34, 26, 187, 71, 81, 111, 191, 24, 88, 66, 190, 229, 32, 132, 190, 127, 217, 48, 62, 104, 123, 108, 61, 71, 16, 77, 62, 164, 0, 240, 59, 55, 104, 36, 189, 246, 32, 198, 190, 32, 215, 58, 62, 66, 70, 147, 191, 12, 10, 162, 61, 232, 168, 95, 61, 142, 13, 255, 60, 111, 202, 26, 62, 100, 254, 105, 190, 232, 250, 241, 190, 118, 25, 155, 190, 16, 196, 244, 58, 103, 34, 166, 189, 5, 129, 232, 189, 118, 235, 164, 191, 230, 159, 14, 192, 30, 13, 176, 62, 129, 97, 71, 62, 72, 14, 207, 190, 239, 236, 35, 59, 44, 225, 96, 62, 246, 5, 84, 62, 46, 128, 35, 62, 20, 176, 59, 190, 190, 162, 171, 61, 51, 35, 137, 191, 13, 235, 107, 188, 54, 13, 101, 189, 50, 137, 255, 61, 104, 59, 112, 59, 194, 160, 80, 62, 190, 255, 96, 62, 112, 70, 17, 189, 218, 19, 27, 60, 175, 4, 128, 62, 219, 210, 81, 191, 229, 211, 14, 62, 89, 255, 151, 58, 241, 9, 140, 60, 154, 124, 126, 189, 228, 70, 68, 190, 74, 145, 80, 190, 237, 112, 142, 189, 91, 54, 239, 61, 115, 231, 238, 61, 244, 234, 51, 62, 231, 121, 80, 62, 59, 64, 82, 188, 57, 89, 186, 61, 199, 194, 43, 61, 235, 117, 98, 62, 138, 14, 29, 190, 26, 46, 55, 61, 66, 81, 150, 190, 53, 120, 217, 189, 54, 35, 24, 189, 46, 232, 10, 189, 5, 183, 89, 62, 246, 249, 18, 189, 124, 31, 71, 62, 140, 249, 166, 190, 151, 36, 177, 190, 9, 104, 99, 190, 136, 57, 41, 63, 183, 147, 122, 190, 160, 245, 53, 189, 2, 8, 120, 62, 120, 11, 123, 62, 157, 116, 68, 61, 90, 81, 249, 62, 212, 235, 136, 59, 42, 143, 0, 190, 55, 0, 122, 62, 88, 136, 247, 61, 70, 87, 84, 60, 233, 22, 121, 190, 129, 22, 16, 191, 92, 89, 107, 190, 37, 234, 34, 191, 15, 133, 87, 190, 33, 168, 194, 62, 166, 78, 25, 190, 3, 111, 187, 190, 9, 5, 197, 190, 94, 81, 145, 189, 180, 40, 101, 190, 68, 179, 224, 190, 62, 208, 135, 61, 221, 251, 160, 60, 194, 220, 4, 63, 18, 112, 241, 190, 225, 20, 85, 190, 227, 84, 199, 190, 67, 115, 145, 62, 123, 2, 8, 191, 104, 142, 97, 62, 1, 36, 244, 60, 208, 246, 173, 190, 248, 94, 237, 189, 13, 18, 200, 190, 96, 157, 25, 62, 138, 1, 147, 62, 82, 209, 96, 62, 253, 155, 154, 62, 138, 27, 228, 190, 50, 162, 163, 62, 134, 130, 53, 191, 131, 13, 198, 189, 149, 73, 152, 190, 235, 172, 111, 190, 58, 16, 135, 190, 19, 229, 168, 190, 119, 149, 163, 62, 73, 117, 59, 62, 233, 24, 147, 190, 43, 193, 51, 62, 213, 66, 115, 62, 208, 54, 135, 188, 162, 217, 239, 60, 220, 122, 143, 61, 26, 191, 222, 61, 90, 68, 40, 191, 88, 35, 218, 190, 229, 171, 38, 61, 220, 214, 200, 62, 165, 236, 3, 62, 48, 15, 201, 61, 236, 89, 233, 60, 182, 108, 190, 188, 19, 55, 43, 190, 166, 97, 9, 191, 58, 105, 20, 190, 178, 191, 115, 62, 115, 122, 59, 62, 122, 216, 30, 62, 162, 167, 214, 188, 193, 194, 12, 191, 65, 0, 193, 190, 90, 11, 106, 190, 152, 118, 193, 190, 87, 3, 144, 189, 65, 138, 41, 62, 11, 56, 156, 61, 214, 105, 141, 62, 9, 163, 156, 189, 169, 43, 31, 188, 175, 13, 132, 189, 97, 129, 0, 191, 153, 139, 144, 190, 54, 230, 82, 191, 188, 218, 12, 191, 177, 43, 198, 190, 193, 3, 152, 189, 135, 80, 83, 189, 177, 117, 58, 62, 77, 199, 43, 62, 80, 156, 94, 62, 64, 43, 4, 191, 153, 42, 216, 190, 18, 198, 207, 61, 192, 38, 28, 189, 87, 232, 49, 62, 117, 88, 152, 189, 24, 64, 184, 62, 89, 38, 63, 62, 146, 117, 210, 188, 53, 144, 160, 62, 225, 176, 214, 60, 158, 46, 6, 190, 212, 224, 185, 189, 146, 189, 16, 190, 154, 101, 193, 189, 94, 47, 12, 190, 109, 178, 12, 62, 15, 184, 80, 191, 44, 135, 180, 191, 12, 1, 167, 62, 174, 5, 42, 62, 112, 201, 187, 190, 252, 249, 162, 62, 166, 233, 84, 62, 1, 145, 143, 62, 185, 64, 175, 189, 185, 141, 208, 189, 49, 204, 0, 190, 182, 101, 124, 191, 169, 154, 147, 62, 74, 142, 113, 190, 129, 214, 30, 189, 58, 208, 196, 61, 245, 215, 208, 61, 3, 112, 163, 61, 54, 210, 11, 187, 164, 222, 44, 189, 215, 16, 179, 62, 98, 22, 98, 191, 105, 56, 147, 62, 66, 214, 192, 61, 204, 148, 125, 62, 253, 6, 218, 189, 69, 165, 108, 190, 97, 211, 197, 190, 60, 207, 67, 189, 106, 173, 167, 62, 4, 134, 159, 62, 143, 10, 234, 190, 143, 247, 173, 190, 14, 249, 31, 190, 91, 72, 167, 190, 212, 49, 206, 190, 188, 248, 12, 190, 18, 92, 10, 190, 240, 166, 230, 189, 13, 248, 200, 190, 127, 156, 219, 190, 206, 11, 136, 61, 68, 93, 161, 188, 144, 211, 25, 191, 197, 180, 41, 190, 42, 117, 23, 190, 160, 107, 12, 191, 1, 43, 26, 190, 232, 134, 189, 190, 92, 187, 199, 61, 128, 197, 122, 190, 2, 85, 14, 62, 156, 114, 153, 190, 111, 157, 27, 190, 5, 220, 120, 191, 16, 103, 26, 62, 163, 241, 158, 191, 77, 154, 9, 191, 105, 157, 76, 62, 198, 167, 220, 62, 117, 110, 48, 62, 61, 239, 37, 190, 191, 46, 193, 190, 163, 52, 218, 189, 206, 67, 177, 61, 170, 83, 248, 62, 180, 210, 21, 63, 57, 198, 95, 61, 194, 24, 105, 62, 107, 66, 236, 61, 108, 92, 80, 191, 190, 82, 148, 188, 195, 181, 10, 62, 49, 165, 9, 191, 16, 161, 44, 62, 135, 156, 200, 61, 37, 236, 81, 190, 98, 12, 172, 61, 33, 187, 135, 62, 37, 48, 31, 191, 117, 195, 139, 61, 248, 206, 174, 61, 67, 40, 247, 189, 85, 19, 152, 60, 45, 46, 152, 190, 101, 59, 68, 62, 44, 13, 53, 62, 152, 11, 237, 188, 178, 135, 248, 61, 186, 239, 162, 62, 123, 28, 115, 190, 103, 113, 108, 62, 173, 84, 26, 190, 231, 188, 44, 62, 181, 62, 134, 62, 122, 91, 65, 189, 148, 222, 76, 190, 100, 158, 223, 190, 153, 47, 129, 189, 182, 30, 0, 191, 218, 185, 108, 62, 249, 214, 15, 191, 207, 219, 51, 190, 201, 146, 156, 190, 5, 10, 186, 189, 98, 25, 138, 61, 225, 88, 184, 61, 120, 176, 47, 189, 28, 181, 28, 190, 136, 22, 189, 189, 236, 245, 24, 190, 200, 116, 243, 189, 97, 244, 203, 190, 78, 93, 21, 62, 144, 19, 140, 189, 37, 97, 149, 61, 233, 197, 131, 62, 45, 10, 86, 190, 106, 2, 88, 191, 48, 175, 212, 61, 176, 229, 11, 191, 158, 49, 115, 189, 84, 204, 168, 62, 13, 149, 183, 62, 183, 136, 154, 61, 24, 216, 247, 61, 126, 137, 178, 62, 185, 79, 213, 190, 22, 87, 63, 62, 252, 87, 39, 63, 131, 210, 108, 189, 84, 108, 23, 191, 122, 240, 1, 62, 184, 165, 251, 189, 117, 161, 10, 190, 41, 234, 98, 190, 219, 155, 132, 190, 163, 155, 59, 62, 42, 85, 48, 189, 0, 230, 75, 189, 236, 209, 156, 190, 1, 15, 61, 62, 213, 32, 122, 189, 90, 221, 180, 190, 158, 13, 92, 190, 120, 149, 53, 190, 181, 201, 231, 189, 156, 117, 172, 61, 245, 66, 8, 191, 168, 68, 102, 62, 213, 93, 148, 60, 50, 128, 66, 190, 211, 53, 81, 190, 43, 177, 128, 61, 42, 96, 138, 62, 148, 126, 110, 62, 50, 87, 127, 62, 131, 55, 162, 61, 213, 162, 89, 190, 146, 249, 229, 61, 187, 250, 168, 190, 219, 92, 52, 190, 160, 160, 233, 183, 187, 126, 11, 62, 69, 164, 177, 61, 127, 11, 220, 61, 55, 176, 174, 62, 143, 190, 136, 62, 10, 227, 8, 62, 78, 79, 31, 188, 208, 69, 0, 190, 54, 229, 42, 62, 95, 28, 9, 62, 204, 162, 56, 61, 136, 67, 192, 189, 19, 60, 95, 62, 191, 254, 5, 189, 22, 113, 213, 190, 236, 68, 2, 62, 123, 113, 191, 189, 37, 162, 205, 62, 195, 120, 24, 191, 45, 15, 63, 60, 144, 41, 136, 190, 125, 90, 215, 61, 193, 4, 172, 189, 59, 73, 36, 191, 111, 228, 76, 62, 255, 15, 177, 190, 6, 31, 75, 61, 25, 136, 54, 189, 194, 67, 13, 190, 249, 41, 117, 189, 119, 30, 30, 190, 109, 5, 167, 189, 106, 248, 154, 61, 87, 5, 203, 61, 231, 97, 194, 61, 213, 231, 255, 189, 67, 178, 67, 189, 196, 246, 231, 189, 214, 99, 253, 58, 252, 216, 49, 190, 165, 223, 204, 189, 25, 115, 165, 189, 54, 4, 239, 60, 190, 102, 52, 190, 16, 25, 107, 61, 121, 172, 212, 61, 31, 233, 148, 189, 221, 151, 63, 189, 196, 225, 46, 190, 174, 109, 175, 189, 104, 104, 18, 189, 123, 20, 8, 61, 131, 199, 16, 190, 42, 56, 113, 189, 6, 164, 167, 60, 82, 76, 131, 58, 194, 64, 23, 190, 81, 50, 153, 61, 6, 149, 54, 190, 109, 181, 230, 188, 161, 171, 58, 60, 204, 33, 215, 190, 137, 36, 93, 191, 183, 109, 161, 61, 40, 152, 25, 189, 3, 46, 163, 190, 131, 238, 113, 189, 106, 107, 167, 62, 204, 147, 148, 62, 143, 102, 166, 61, 31, 177, 71, 60, 121, 14, 227, 60, 40, 32, 16, 191, 239, 84, 187, 190, 5, 254, 190, 189, 54, 78, 43, 188, 26, 119, 180, 62, 83, 252, 232, 61, 169, 83, 155, 189, 82, 75, 95, 60, 5, 186, 14, 61, 130, 204, 42, 62, 66, 31, 199, 190, 94, 160, 43, 62, 49, 79, 79, 62, 6, 112, 112, 61, 35, 66, 247, 59, 93, 220, 136, 190, 105, 130, 52, 190, 112, 41, 177, 189, 243, 201, 4, 61, 109, 38, 239, 61, 33, 81, 126, 190, 45, 157, 11, 60, 141, 65, 154, 62, 36, 63, 67, 62, 137, 87, 150, 190, 151, 177, 63, 62, 137, 98, 218, 61, 160, 145, 201, 188, 93, 77, 47, 190, 91, 211, 19, 62, 156, 185, 42, 62, 204, 196, 238, 189, 45, 4, 138, 60, 175, 172, 141, 61, 124, 12, 15, 62, 194, 77, 89, 62, 130, 99, 146, 189, 39, 219, 198, 189, 16, 19, 102, 190, 50, 62, 21, 62, 248, 107, 132, 61, 143, 57, 152, 61, 132, 183, 226, 61, 23, 163, 76, 62, 31, 51, 164, 190, 157, 178, 22, 62, 131, 208, 178, 62, 202, 149, 132, 62, 82, 64, 15, 62, 137, 19, 158, 62, 191, 21, 106, 188, 254, 70, 133, 60, 6, 17, 44, 190, 2, 3, 63, 61, 165, 106, 217, 59, 47, 101, 68, 61, 51, 60, 6, 62, 226, 106, 69, 61, 125, 62, 163, 61, 82, 126, 157, 189, 84, 67, 186, 189, 253, 35, 249, 61, 26, 237, 251, 189, 18, 53, 29, 188, 168, 36, 77, 189, 192, 148, 33, 190, 122, 94, 5, 190, 139, 220, 11, 62, 45, 3, 171, 61, 41, 229, 101, 189, 241, 88, 117, 186, 59, 201, 115, 189, 63, 189, 212, 187, 20, 193, 73, 60, 185, 15, 71, 190, 223, 177, 228, 188, 30, 137, 227, 61, 6, 139, 80, 190, 40, 13, 57, 190, 139, 67, 62, 190, 35, 223, 46, 190, 54, 217, 60, 61, 67, 210, 245, 189, 188, 191, 151, 189, 32, 90, 244, 189, 129, 187, 141, 61, 55, 70, 107, 189, 183, 65, 35, 62, 130, 1, 226, 189, 5, 156, 101, 60, 162, 248, 144, 61, 134, 80, 210, 185, 50, 22, 47, 62, 74, 61, 254, 60, 141, 110, 225, 61, 5, 203, 25, 190, 192, 81, 28, 62, 2, 241, 92, 189, 142, 222, 147, 189, 91, 233, 203, 189, 197, 201, 68, 189, 234, 26, 8, 190, 94, 159, 29, 190, 68, 176, 17, 62, 184, 36, 219, 189, 18, 206, 237, 61, 59, 63, 110, 189, 22, 205, 160, 188, 158, 188, 23, 60, 195, 126, 224, 189, 42, 106, 202, 60, 230, 50, 150, 189, 92, 246, 0, 190, 156, 117, 93, 61, 153, 15, 39, 62, 182, 211, 154, 190, 66, 106, 139, 190, 22, 161, 152, 191, 163, 38, 109, 191, 75, 196, 136, 62, 17, 100, 73, 190, 87, 157, 193, 190, 2, 120, 16, 190, 188, 109, 102, 188, 163, 176, 221, 60, 210, 242, 2, 189, 154, 87, 135, 189, 30, 101, 172, 61, 188, 157, 141, 62, 29, 107, 19, 190, 110, 152, 97, 191, 139, 118, 238, 190, 12, 176, 138, 61, 26, 253, 96, 189, 171, 232, 205, 61, 113, 39, 56, 190, 119, 190, 95, 190, 95, 98, 10, 63, 82, 224, 16, 191, 245, 168, 221, 61, 47, 112, 94, 62, 88, 226, 192, 190, 242, 37, 176, 62, 30, 40, 174, 189, 205, 28, 211, 61, 177, 244, 82, 190, 163, 226, 35, 62, 54, 74, 193, 60, 152, 221, 223, 190, 113, 177, 63, 58, 146, 169, 29, 63, 38, 114, 176, 61, 16, 1, 44, 191, 209, 41, 202, 187, 1, 44, 155, 190, 4, 240, 204, 189, 196, 57, 241, 190, 220, 121, 133, 190, 123, 8, 9, 62, 217, 42, 147, 189, 197, 22, 1, 62, 205, 70, 212, 190, 99, 199, 168, 61, 225, 190, 8, 188, 162, 233, 133, 190, 242, 33, 202, 190, 63, 7, 195, 61, 120, 107, 194, 189, 155, 97, 162, 62, 143, 100, 128, 190, 203, 86, 228, 189, 14, 125, 157, 190, 89, 120, 68, 187, 148, 58, 181, 188, 227, 199, 149, 62, 169, 56, 174, 62, 39, 87, 105, 62, 12, 229, 139, 61, 62, 223, 47, 61, 216, 42, 26, 189, 99, 109, 187, 188, 163, 192, 3, 190, 193, 4, 160, 190, 67, 238, 0, 191, 223, 65, 62, 62, 87, 118, 227, 61, 105, 217, 245, 60, 85, 79, 220, 62, 215, 199, 114, 62, 175, 124, 15, 61, 213, 91, 81, 61, 63, 125, 238, 189, 130, 65, 110, 189, 38, 84, 187, 189, 70, 42, 28, 190, 99, 236, 8, 62, 76, 35, 147, 61, 197, 213, 97, 62, 95, 228, 200, 191, 174, 102, 71, 60, 96, 125, 84, 62, 119, 116, 191, 188, 54, 118, 63, 190, 171, 35, 5, 62, 252, 108, 32, 191, 82, 88, 21, 190, 255, 11, 51, 191, 225, 100, 225, 190, 229, 182, 176, 186, 158, 60, 105, 190, 183, 34, 18, 62, 175, 125, 158, 190, 63, 182, 95, 61, 146, 46, 67, 190, 136, 32, 73, 191, 131, 214, 124, 189, 150, 252, 181, 62, 18, 171, 178, 189, 138, 190, 212, 62, 9, 138, 142, 62, 88, 87, 189, 62, 184, 5, 202, 61, 62, 194, 187, 60, 6, 120, 23, 62, 88, 190, 42, 190, 192, 148, 108, 61, 250, 174, 162, 58, 12, 192, 205, 61, 118, 39, 80, 62, 116, 207, 154, 62, 14, 95, 138, 190, 73, 157, 158, 62, 26, 88, 186, 188, 136, 119, 151, 62, 98, 110, 138, 190, 192, 151, 69, 62, 169, 182, 154, 190, 158, 25, 26, 190, 117, 167, 24, 190, 142, 59, 6, 191, 215, 209, 139, 61, 116, 34, 233, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 23, 68, 62, 144, 226, 123, 61, 196, 39, 130, 62, 23, 60, 28, 190, 223, 37, 220, 61, 99, 39, 3, 62, 158, 182, 174, 62, 38, 90, 46, 61, 76, 186, 137, 62, 86, 3, 153, 189, 168, 114, 64, 189, 126, 33, 57, 62, 55, 216, 194, 62, 91, 146, 218, 189, 231, 127, 188, 61, 81, 128, 38, 187, 142, 114, 8, 62, 36, 238, 111, 61, 244, 57, 175, 188, 56, 186, 100, 62, 79, 238, 5, 61, 234, 191, 88, 62, 49, 106, 192, 61, 20, 249, 171, 60, 139, 35, 218, 61, 2, 30, 23, 62, 16, 242, 235, 189, 33, 142, 22, 190, 211, 197, 43, 61, 74, 4, 179, 60, 140, 224, 16, 62, 224, 15, 196, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 255, 35, 63, 25, 50, 27, 63, 232, 148, 14, 190, 220, 96, 81, 61, 195, 145, 121, 190, 252, 119, 181, 62, 55, 146, 188, 191, 89, 96, 140, 61, 204, 145, 154, 59, 58, 16, 43, 63, 104, 226, 31, 191, 140, 72, 38, 191, 48, 132, 35, 191, 131, 34, 140, 190, 30, 63, 90, 63, 139, 218, 145, 190, 55, 160, 54, 191, 252, 34, 20, 191, 64, 227, 157, 191, 158, 204, 186, 62, 9, 15, 226, 62, 115, 107, 38, 63, 180, 150, 30, 191, 10, 142, 247, 61, 11, 22, 117, 190, 36, 133, 244, 61, 89, 196, 136, 189, 124, 240, 37, 62, 182, 85, 12, 63, 147, 45, 218, 62, 162, 246, 244, 190, 80, 184, 27, 191, 252, 66, 29, 189, 133, 207, 143, 190, 129, 99, 143, 190, 237, 214, 18, 190, 173, 172, 87, 190, 54, 142, 45, 190, 145, 41, 142, 187, 162, 196, 87, 60, 231, 9, 139, 190, 190, 215, 156, 188, 234, 182, 168, 189, 39, 220, 75, 62, 185, 141, 133, 190, 121, 132, 211, 61, 44, 209, 150, 61, 228, 113, 149, 62, 247, 108, 18, 62, 237, 201, 84, 62, 6, 67, 24, 63, 139, 88, 87, 188, 29, 35, 224, 62, 146, 144, 187, 61, 97, 181, 175, 188, 90, 49, 23, 190, 223, 62, 7, 190, 173, 79, 126, 190, 109, 77, 25, 190, 95, 7, 197, 189, 65, 252, 197, 59, 5, 246, 138, 62, 156, 85, 159, 190, 37, 208, 162, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 189, 5, 62, 13, 155, 221, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {48, 180, 101, 191, 86, 35, 134, 62, 254, 28, 195, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {140, 84, 9, 64, 158, 240, 243, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0008/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}