// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 135, 120, 189, 178, 164, 50, 63, 191, 236, 205, 190, 181, 165, 132, 63, 233, 142, 23, 191, 89, 79, 221, 190, 163, 204, 123, 190, 254, 62, 240, 61, 240, 150, 144, 62, 42, 124, 22, 190, 203, 194, 134, 63, 108, 165, 1, 63, 104, 49, 30, 191, 63, 232, 250, 62, 215, 135, 190, 62, 42, 14, 67, 191, 74, 52, 62, 191, 220, 68, 201, 189, 91, 135, 51, 63, 217, 167, 139, 63, 134, 135, 190, 62, 201, 100, 165, 189, 203, 160, 48, 62, 117, 92, 20, 63, 52, 65, 236, 62, 81, 63, 68, 63, 171, 211, 182, 62, 48, 72, 177, 62, 10, 108, 69, 63, 14, 160, 138, 190, 19, 72, 23, 63, 183, 89, 33, 63, 4, 154, 237, 62, 249, 183, 68, 63, 162, 66, 26, 63, 65, 20, 201, 62, 32, 50, 130, 62, 199, 6, 139, 62, 73, 159, 183, 190, 231, 105, 244, 188, 235, 159, 157, 190, 234, 54, 217, 186, 139, 239, 96, 190, 209, 188, 3, 190, 146, 23, 134, 62, 104, 66, 115, 189, 6, 231, 29, 63, 209, 1, 215, 62, 76, 192, 100, 190, 108, 22, 215, 62, 163, 123, 148, 62, 170, 2, 133, 62, 67, 38, 19, 63, 192, 52, 15, 62, 114, 157, 141, 190, 152, 109, 47, 62, 246, 25, 24, 191, 187, 36, 14, 63, 238, 37, 113, 63, 17, 119, 205, 62, 63, 162, 225, 189, 193, 17, 160, 191, 6, 116, 168, 190, 13, 175, 234, 188, 89, 149, 183, 62, 15, 179, 171, 189, 244, 117, 12, 63, 151, 183, 169, 188, 38, 33, 245, 62, 108, 138, 199, 190, 184, 14, 165, 190, 144, 173, 153, 62, 102, 184, 38, 190, 168, 93, 127, 63, 152, 155, 135, 62, 158, 131, 179, 190, 23, 173, 225, 62, 110, 195, 233, 61, 182, 19, 107, 190, 154, 88, 94, 191, 197, 90, 96, 190, 131, 182, 249, 190, 99, 92, 255, 62, 9, 212, 162, 61, 155, 12, 140, 191, 126, 51, 64, 189, 124, 44, 252, 186, 219, 14, 44, 63, 92, 39, 87, 191, 164, 255, 224, 190, 127, 91, 137, 62, 114, 117, 77, 191, 180, 44, 191, 62, 194, 137, 122, 62, 182, 137, 123, 190, 157, 155, 151, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 135, 243, 190, 116, 101, 77, 62, 222, 154, 216, 190, 144, 147, 154, 59, 38, 175, 16, 191, 84, 7, 128, 62, 75, 204, 26, 190, 252, 145, 186, 189, 64, 14, 184, 190, 21, 60, 2, 63, 212, 27, 149, 190, 212, 154, 170, 61, 214, 56, 255, 62, 41, 218, 212, 190, 36, 26, 25, 191, 143, 61, 19, 191, 177, 228, 211, 62, 255, 139, 167, 62, 85, 123, 91, 189, 254, 157, 130, 190, 167, 131, 22, 62, 29, 95, 137, 62, 219, 200, 49, 63, 13, 107, 154, 190, 145, 146, 127, 188, 18, 185, 239, 62, 159, 255, 207, 189, 182, 19, 203, 62, 116, 90, 228, 62, 26, 144, 79, 190, 159, 141, 0, 60, 22, 41, 9, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {214, 9, 16, 62, 112, 185, 158, 62, 172, 223, 1, 190, 209, 152, 227, 60, 218, 178, 45, 62, 202, 39, 68, 190, 253, 6, 203, 190, 237, 199, 221, 61, 61, 65, 138, 190, 152, 209, 55, 190, 121, 226, 112, 190, 127, 118, 18, 190, 130, 202, 26, 62, 82, 24, 51, 190, 24, 44, 32, 62, 19, 35, 253, 189, 77, 166, 12, 62, 187, 5, 191, 62, 89, 6, 221, 190, 172, 159, 191, 190, 141, 241, 6, 191, 218, 146, 63, 61, 175, 98, 144, 62, 211, 2, 231, 190, 61, 17, 132, 62, 151, 250, 85, 62, 100, 237, 14, 191, 13, 75, 34, 190, 3, 141, 47, 62, 59, 188, 40, 62, 138, 44, 218, 61, 145, 202, 31, 190, 155, 125, 37, 61, 218, 93, 185, 62, 170, 133, 203, 190, 4, 83, 174, 188, 112, 122, 183, 62, 94, 239, 162, 188, 20, 63, 213, 190, 5, 1, 134, 62, 24, 194, 139, 190, 250, 120, 137, 189, 95, 207, 55, 190, 203, 186, 153, 189, 14, 238, 191, 61, 160, 119, 153, 189, 14, 211, 232, 61, 223, 253, 168, 190, 179, 85, 60, 188, 63, 222, 224, 188, 226, 75, 158, 190, 85, 62, 212, 190, 38, 149, 18, 190, 221, 228, 84, 189, 243, 152, 154, 62, 228, 171, 88, 190, 149, 229, 14, 189, 152, 49, 45, 190, 55, 67, 59, 190, 242, 239, 119, 188, 43, 166, 177, 188, 107, 16, 161, 62, 49, 59, 99, 62, 158, 3, 155, 61, 103, 83, 130, 190, 101, 12, 69, 62, 57, 116, 9, 62, 87, 121, 123, 60, 189, 11, 185, 190, 225, 24, 39, 190, 87, 96, 16, 61, 234, 211, 214, 59, 19, 29, 244, 60, 228, 240, 154, 62, 103, 93, 8, 62, 175, 69, 80, 62, 241, 120, 252, 61, 32, 1, 28, 62, 254, 52, 35, 190, 237, 103, 138, 189, 44, 130, 151, 61, 76, 192, 152, 62, 120, 145, 254, 61, 238, 135, 23, 62, 204, 63, 13, 190, 238, 183, 7, 189, 254, 20, 50, 188, 161, 50, 15, 62, 198, 17, 142, 190, 17, 39, 31, 62, 87, 189, 182, 61, 212, 163, 58, 190, 150, 93, 88, 189, 28, 53, 157, 189, 40, 121, 75, 190, 155, 95, 154, 190, 236, 42, 142, 61, 37, 135, 253, 189, 127, 108, 187, 61, 206, 164, 61, 190, 92, 198, 2, 62, 198, 89, 225, 189, 68, 223, 47, 190, 204, 8, 6, 62, 214, 238, 18, 62, 151, 104, 82, 190, 6, 183, 222, 61, 218, 11, 14, 61, 31, 158, 245, 61, 194, 164, 37, 62, 249, 235, 236, 189, 74, 132, 198, 189, 53, 69, 179, 189, 207, 59, 3, 62, 52, 83, 10, 62, 212, 67, 91, 189, 131, 30, 30, 61, 222, 159, 131, 187, 37, 100, 63, 190, 92, 178, 62, 190, 35, 62, 30, 62, 22, 248, 138, 58, 33, 87, 234, 61, 104, 227, 159, 61, 104, 30, 19, 190, 203, 225, 40, 190, 8, 198, 226, 61, 59, 247, 154, 188, 202, 3, 193, 189, 89, 176, 31, 62, 160, 64, 88, 61, 33, 195, 67, 190, 176, 224, 37, 191, 136, 168, 151, 62, 223, 171, 86, 62, 21, 161, 19, 189, 219, 171, 33, 189, 89, 28, 62, 62, 144, 167, 160, 61, 90, 8, 219, 60, 32, 127, 81, 189, 13, 217, 195, 189, 42, 92, 140, 190, 196, 107, 37, 62, 172, 221, 76, 190, 234, 251, 235, 61, 78, 252, 214, 61, 74, 207, 155, 61, 107, 107, 182, 189, 90, 240, 187, 61, 37, 224, 37, 62, 131, 154, 208, 60, 215, 223, 206, 190, 153, 31, 162, 189, 163, 133, 139, 61, 218, 200, 197, 189, 18, 198, 98, 61, 221, 32, 36, 190, 38, 237, 181, 189, 190, 119, 116, 61, 49, 30, 113, 190, 35, 72, 144, 62, 54, 183, 189, 60, 49, 136, 211, 61, 3, 211, 51, 62, 41, 214, 238, 188, 9, 60, 224, 190, 200, 21, 65, 62, 180, 156, 181, 190, 165, 228, 86, 188, 55, 113, 131, 190, 97, 123, 190, 189, 134, 9, 7, 190, 180, 151, 5, 62, 109, 155, 213, 61, 77, 238, 163, 190, 123, 170, 87, 62, 159, 30, 156, 62, 10, 226, 2, 61, 45, 87, 165, 190, 196, 158, 199, 61, 45, 9, 211, 61, 167, 3, 7, 62, 30, 166, 132, 190, 237, 183, 146, 61, 5, 255, 147, 62, 202, 16, 37, 190, 112, 187, 221, 189, 172, 181, 138, 62, 207, 185, 125, 62, 26, 113, 197, 61, 205, 23, 142, 61, 38, 194, 68, 189, 127, 243, 201, 189, 195, 166, 223, 61, 203, 72, 143, 191, 194, 193, 206, 191, 40, 57, 191, 62, 230, 212, 66, 191, 26, 25, 30, 191, 212, 170, 172, 189, 241, 145, 104, 60, 241, 248, 67, 60, 202, 67, 173, 190, 255, 204, 1, 191, 68, 88, 36, 190, 11, 140, 223, 190, 49, 181, 166, 188, 7, 86, 188, 61, 251, 53, 157, 191, 248, 78, 116, 62, 162, 10, 205, 190, 111, 115, 32, 62, 110, 223, 8, 62, 209, 147, 82, 191, 74, 60, 157, 62, 103, 127, 240, 190, 44, 10, 73, 62, 1, 100, 128, 186, 79, 242, 134, 62, 67, 134, 132, 62, 142, 143, 163, 190, 34, 199, 244, 190, 180, 159, 26, 62, 168, 237, 81, 188, 32, 78, 4, 190, 139, 17, 215, 188, 34, 198, 131, 61, 115, 199, 0, 62, 126, 214, 174, 189, 64, 102, 84, 189, 192, 176, 246, 60, 190, 209, 0, 190, 30, 179, 95, 61, 37, 231, 247, 189, 128, 131, 46, 190, 42, 176, 68, 189, 60, 32, 218, 189, 244, 70, 255, 188, 119, 188, 153, 189, 169, 103, 162, 189, 154, 84, 26, 62, 15, 224, 168, 189, 238, 33, 137, 61, 223, 1, 23, 62, 3, 99, 164, 189, 22, 59, 36, 189, 255, 105, 178, 61, 196, 188, 18, 187, 222, 207, 47, 190, 210, 16, 96, 188, 134, 22, 136, 61, 209, 5, 169, 188, 31, 15, 6, 190, 253, 250, 81, 190, 219, 96, 159, 61, 237, 131, 180, 190, 208, 183, 230, 61, 109, 192, 4, 62, 10, 27, 48, 190, 32, 70, 152, 60, 30, 239, 152, 61, 119, 79, 144, 61, 67, 135, 240, 189, 160, 155, 158, 189, 132, 239, 6, 62, 241, 167, 179, 189, 131, 176, 27, 62, 114, 47, 3, 189, 215, 203, 98, 189, 141, 57, 182, 60, 135, 250, 22, 190, 242, 164, 173, 61, 98, 162, 5, 190, 75, 20, 210, 60, 222, 80, 37, 189, 28, 120, 140, 61, 215, 188, 196, 61, 83, 157, 241, 61, 142, 231, 15, 62, 109, 227, 148, 190, 136, 37, 138, 188, 224, 19, 228, 187, 77, 207, 254, 189, 196, 76, 69, 189, 202, 119, 28, 190, 144, 188, 108, 61, 132, 165, 139, 190, 6, 215, 179, 61, 142, 170, 142, 62, 202, 105, 183, 188, 82, 243, 253, 189, 182, 8, 87, 190, 9, 181, 191, 61, 62, 74, 137, 190, 63, 109, 115, 61, 99, 242, 216, 60, 177, 13, 217, 189, 132, 174, 253, 61, 123, 53, 4, 188, 171, 235, 241, 61, 152, 223, 6, 189, 180, 214, 146, 189, 111, 43, 129, 188, 155, 47, 116, 190, 179, 132, 192, 62, 95, 67, 52, 189, 64, 242, 145, 190, 149, 137, 129, 62, 151, 136, 41, 190, 132, 254, 170, 61, 84, 168, 5, 187, 121, 19, 51, 190, 158, 112, 90, 191, 38, 152, 87, 62, 16, 24, 130, 191, 217, 242, 163, 190, 220, 179, 158, 62, 29, 92, 21, 62, 109, 219, 107, 61, 53, 207, 80, 62, 84, 170, 118, 62, 113, 236, 52, 190, 111, 47, 186, 189, 230, 140, 151, 62, 13, 10, 15, 188, 36, 214, 83, 190, 109, 55, 199, 60, 170, 182, 11, 62, 226, 38, 194, 190, 81, 253, 72, 60, 83, 104, 92, 190, 149, 229, 89, 62, 236, 53, 33, 190, 212, 163, 80, 62, 39, 161, 1, 190, 87, 98, 85, 62, 71, 54, 12, 190, 43, 104, 209, 190, 92, 179, 206, 189, 133, 208, 187, 62, 29, 224, 175, 190, 123, 155, 52, 62, 174, 165, 151, 187, 186, 32, 22, 61, 189, 28, 186, 189, 225, 53, 6, 63, 39, 172, 217, 189, 169, 13, 141, 189, 21, 228, 50, 62, 32, 176, 146, 62, 255, 127, 0, 62, 49, 139, 102, 190, 156, 28, 69, 190, 141, 12, 151, 189, 31, 0, 77, 191, 14, 211, 116, 191, 46, 242, 135, 62, 68, 79, 117, 189, 152, 166, 51, 62, 85, 241, 55, 189, 209, 73, 101, 62, 38, 234, 145, 190, 96, 62, 0, 190, 239, 23, 109, 62, 83, 34, 26, 187, 54, 57, 138, 190, 180, 190, 37, 190, 102, 218, 148, 189, 163, 69, 159, 61, 212, 188, 169, 61, 85, 181, 206, 187, 76, 24, 225, 188, 192, 84, 214, 188, 77, 13, 170, 189, 215, 186, 169, 62, 102, 160, 46, 191, 119, 244, 16, 189, 249, 155, 127, 60, 114, 19, 178, 189, 179, 109, 62, 62, 121, 54, 81, 190, 182, 251, 9, 62, 230, 138, 0, 190, 141, 55, 2, 61, 175, 219, 131, 189, 49, 201, 84, 189, 191, 213, 122, 191, 214, 105, 221, 191, 225, 50, 172, 62, 108, 142, 58, 62, 9, 173, 88, 190, 48, 113, 41, 187, 233, 147, 137, 62, 49, 18, 95, 62, 123, 149, 60, 62, 14, 73, 47, 190, 190, 162, 171, 61, 129, 64, 0, 191, 174, 0, 154, 189, 107, 134, 180, 61, 88, 59, 0, 62, 37, 156, 220, 60, 142, 29, 67, 62, 33, 28, 101, 62, 117, 19, 197, 60, 200, 113, 46, 61, 18, 106, 17, 63, 245, 187, 12, 191, 20, 226, 166, 61, 236, 213, 28, 189, 25, 13, 215, 189, 216, 233, 13, 60, 86, 63, 45, 190, 130, 36, 229, 189, 7, 176, 30, 61, 250, 143, 20, 62, 121, 228, 175, 61, 202, 19, 46, 62, 175, 161, 71, 62, 63, 227, 182, 188, 222, 226, 139, 61, 70, 203, 4, 62, 216, 45, 134, 62, 81, 105, 244, 189, 144, 238, 189, 61, 221, 184, 112, 190, 1, 201, 141, 60, 71, 111, 99, 189, 46, 232, 10, 189, 98, 204, 62, 62, 174, 57, 224, 186, 4, 177, 85, 62, 186, 250, 121, 190, 234, 112, 200, 190, 51, 163, 49, 190, 33, 187, 6, 63, 203, 24, 124, 190, 172, 199, 94, 61, 157, 10, 144, 62, 69, 208, 127, 62, 121, 252, 125, 61, 252, 238, 172, 62, 176, 113, 120, 188, 69, 129, 15, 189, 54, 250, 36, 62, 129, 216, 19, 62, 138, 189, 47, 188, 202, 62, 63, 190, 45, 1, 3, 191, 229, 90, 147, 190, 255, 148, 213, 188, 1, 51, 178, 189, 139, 199, 249, 61, 218, 130, 164, 61, 107, 12, 218, 190, 8, 147, 66, 190, 147, 163, 72, 61, 187, 224, 160, 190, 180, 128, 130, 190, 11, 232, 238, 61, 221, 251, 160, 60, 54, 126, 145, 61, 156, 228, 202, 190, 15, 92, 155, 61, 210, 102, 22, 62, 33, 237, 126, 62, 129, 197, 148, 190, 123, 148, 178, 61, 21, 174, 17, 62, 25, 17, 202, 190, 123, 253, 168, 190, 30, 168, 65, 62, 162, 130, 154, 62, 223, 69, 42, 62, 245, 201, 182, 62, 192, 207, 3, 62, 90, 145, 188, 190, 90, 112, 220, 189, 47, 230, 202, 190, 211, 133, 176, 61, 57, 86, 107, 190, 59, 191, 198, 189, 180, 226, 135, 190, 135, 171, 162, 190, 41, 174, 184, 62, 97, 134, 171, 61, 239, 205, 216, 60, 68, 108, 85, 62, 126, 12, 99, 62, 194, 234, 2, 62, 33, 187, 23, 61, 167, 232, 79, 61, 26, 191, 222, 61, 59, 158, 110, 189, 205, 45, 28, 190, 227, 177, 155, 61, 155, 243, 30, 62, 78, 18, 87, 62, 51, 38, 85, 61, 160, 238, 232, 61, 78, 161, 138, 189, 17, 37, 130, 60, 60, 75, 60, 190, 199, 119, 136, 190, 49, 24, 80, 188, 246, 8, 118, 62, 157, 67, 152, 189, 217, 170, 20, 189, 22, 194, 213, 190, 166, 182, 197, 60, 229, 44, 162, 61, 122, 211, 124, 190, 77, 231, 198, 189, 215, 191, 242, 61, 66, 174, 213, 189, 71, 146, 153, 60, 5, 253, 6, 62, 164, 221, 62, 62, 41, 15, 228, 189, 213, 35, 130, 190, 13, 22, 117, 190, 234, 75, 38, 191, 125, 29, 203, 190, 213, 59, 139, 190, 193, 3, 152, 189, 181, 22, 224, 189, 188, 98, 189, 61, 8, 194, 240, 61, 3, 198, 225, 61, 112, 107, 228, 190, 197, 229, 130, 190, 57, 146, 117, 62, 129, 53, 233, 188, 93, 3, 64, 62, 86, 83, 76, 189, 54, 146, 73, 62, 91, 170, 209, 61, 72, 227, 236, 61, 236, 74, 80, 62, 160, 188, 250, 61, 219, 74, 177, 189, 164, 167, 92, 61, 218, 44, 22, 190, 248, 1, 222, 188, 205, 136, 23, 190, 131, 212, 30, 62, 114, 126, 235, 190, 181, 24, 129, 191, 170, 137, 136, 62, 13, 16, 2, 62, 116, 250, 16, 190, 25, 243, 142, 62, 44, 214, 106, 62, 239, 52, 151, 62, 60, 93, 162, 189, 68, 183, 231, 189, 49, 204, 0, 190, 131, 191, 242, 190, 186, 16, 156, 62, 215, 196, 138, 189, 57, 13, 252, 189, 218, 29, 11, 62, 177, 38, 132, 61, 22, 93, 100, 61, 162, 62, 217, 60, 32, 218, 30, 61, 132, 104, 231, 62, 248, 246, 0, 191, 208, 12, 68, 62, 52, 8, 131, 61, 61, 41, 34, 62, 55, 207, 162, 189, 140, 7, 75, 190, 158, 115, 244, 189, 215, 157, 8, 62, 254, 157, 156, 189, 153, 243, 133, 62, 40, 71, 34, 190, 230, 171, 89, 190, 129, 113, 223, 189, 186, 4, 140, 190, 242, 13, 145, 190, 57, 20, 60, 62, 218, 176, 82, 190, 36, 179, 97, 189, 128, 245, 101, 190, 10, 7, 120, 190, 173, 136, 194, 61, 68, 93, 161, 188, 52, 231, 114, 190, 125, 227, 147, 189, 123, 87, 15, 61, 111, 41, 142, 190, 47, 218, 85, 190, 3, 128, 166, 190, 152, 152, 106, 187, 175, 41, 237, 189, 17, 62, 209, 61, 40, 6, 153, 189, 111, 157, 27, 190, 96, 8, 201, 190, 99, 214, 245, 60, 222, 211, 194, 190, 131, 70, 190, 190, 60, 116, 221, 61, 228, 10, 182, 62, 229, 48, 248, 188, 202, 92, 175, 188, 236, 166, 117, 189, 24, 30, 140, 189, 88, 163, 215, 60, 132, 68, 245, 62, 60, 18, 244, 62, 180, 198, 90, 188, 179, 74, 90, 62, 121, 166, 159, 61, 14, 143, 68, 191, 9, 168, 31, 189, 17, 155, 164, 61, 100, 169, 239, 189, 16, 161, 44, 62, 188, 174, 43, 62, 106, 244, 112, 190, 224, 55, 137, 187, 100, 230, 38, 62, 21, 115, 189, 190, 159, 25, 177, 60, 18, 201, 14, 62, 255, 132, 26, 190, 75, 120, 237, 188, 206, 95, 153, 190, 28, 190, 18, 61, 184, 170, 227, 60, 98, 71, 21, 62, 95, 188, 3, 189, 169, 12, 142, 60, 71, 173, 233, 61, 220, 177, 124, 62, 125, 165, 63, 62, 141, 91, 247, 61, 243, 141, 115, 62, 76, 88, 123, 61, 34, 113, 140, 60, 217, 255, 41, 190, 46, 226, 248, 189, 130, 154, 149, 190, 162, 177, 121, 62, 149, 118, 201, 189, 199, 195, 61, 190, 147, 89, 23, 190, 35, 64, 98, 189, 90, 164, 194, 61, 225, 88, 184, 61, 130, 108, 22, 188, 176, 100, 206, 61, 51, 38, 230, 189, 204, 143, 6, 190, 136, 176, 229, 189, 206, 230, 148, 189, 200, 177, 222, 61, 22, 146, 109, 189, 9, 171, 114, 188, 88, 155, 29, 62, 154, 114, 165, 61, 207, 209, 0, 191, 80, 136, 34, 62, 162, 94, 86, 190, 105, 182, 57, 190, 7, 76, 161, 62, 7, 219, 81, 62, 102, 118, 21, 188, 227, 10, 64, 60, 172, 213, 175, 62, 135, 101, 173, 190, 18, 81, 111, 62, 53, 47, 28, 63, 44, 182, 55, 189, 106, 66, 11, 191, 37, 26, 2, 62, 77, 85, 20, 189, 31, 218, 7, 190, 56, 201, 41, 190, 219, 224, 118, 190, 147, 143, 97, 62, 42, 85, 48, 189, 30, 76, 244, 60, 87, 208, 153, 190, 155, 230, 14, 62, 250, 255, 187, 58, 96, 144, 179, 190, 41, 194, 23, 190, 68, 229, 184, 189, 190, 89, 228, 189, 89, 49, 175, 61, 105, 84, 8, 191, 169, 49, 76, 62, 152, 10, 157, 61, 85, 56, 97, 188, 15, 39, 5, 190, 17, 202, 183, 188, 188, 140, 135, 62, 110, 4, 145, 62, 160, 122, 153, 61, 235, 165, 47, 60, 54, 70, 10, 190, 105, 193, 96, 61, 95, 186, 154, 190, 209, 5, 93, 190, 92, 128, 46, 62, 123, 168, 199, 61, 55, 10, 119, 61, 255, 45, 129, 61, 56, 126, 152, 62, 3, 217, 88, 62, 141, 105, 191, 61, 12, 109, 33, 189, 208, 69, 0, 190, 105, 142, 189, 61, 0, 9, 244, 61, 179, 126, 129, 61, 139, 70, 63, 190, 62, 50, 74, 62, 32, 164, 132, 189, 241, 11, 74, 189, 132, 193, 103, 61, 82, 119, 221, 189, 120, 250, 179, 62, 136, 26, 201, 190, 5, 100, 145, 189, 146, 167, 164, 188, 225, 161, 34, 61, 151, 75, 161, 189, 217, 135, 251, 190, 221, 88, 24, 62, 136, 125, 72, 190, 6, 31, 75, 61, 25, 136, 54, 189, 194, 67, 13, 190, 249, 41, 117, 189, 119, 30, 30, 190, 109, 5, 167, 189, 106, 248, 154, 61, 87, 5, 203, 61, 231, 97, 194, 61, 213, 231, 255, 189, 67, 178, 67, 189, 196, 246, 231, 189, 214, 99, 253, 58, 252, 216, 49, 190, 165, 223, 204, 189, 25, 115, 165, 189, 54, 4, 239, 60, 190, 102, 52, 190, 16, 25, 107, 61, 121, 172, 212, 61, 31, 233, 148, 189, 221, 151, 63, 189, 196, 225, 46, 190, 174, 109, 175, 189, 104, 104, 18, 189, 123, 20, 8, 61, 131, 199, 16, 190, 42, 56, 113, 189, 6, 164, 167, 60, 82, 76, 131, 58, 194, 64, 23, 190, 81, 50, 153, 61, 193, 143, 35, 190, 121, 242, 23, 188, 121, 130, 154, 60, 100, 165, 130, 190, 155, 53, 29, 191, 34, 82, 236, 187, 31, 142, 43, 187, 121, 0, 151, 190, 83, 219, 153, 61, 8, 232, 183, 62, 221, 193, 167, 62, 94, 223, 226, 61, 161, 82, 55, 60, 121, 14, 227, 60, 135, 55, 178, 190, 4, 138, 68, 189, 112, 190, 63, 190, 17, 65, 245, 188, 223, 17, 180, 62, 47, 164, 45, 62, 14, 237, 236, 189, 6, 208, 43, 61, 1, 157, 79, 61, 100, 185, 241, 61, 29, 178, 176, 190, 230, 155, 147, 60, 248, 40, 1, 62, 48, 250, 17, 190, 85, 79, 208, 189, 107, 114, 123, 190, 190, 151, 89, 190, 147, 210, 120, 188, 76, 162, 154, 189, 177, 93, 3, 62, 126, 44, 86, 190, 88, 105, 203, 188, 0, 154, 144, 62, 184, 94, 50, 62, 238, 134, 147, 190, 155, 246, 30, 62, 67, 238, 161, 61, 241, 185, 41, 189, 151, 219, 81, 190, 120, 199, 20, 62, 85, 127, 54, 62, 204, 196, 238, 189, 110, 46, 148, 61, 95, 203, 249, 60, 129, 105, 173, 61, 39, 46, 133, 62, 130, 16, 11, 190, 135, 80, 230, 189, 27, 65, 45, 190, 139, 71, 207, 61, 190, 3, 130, 61, 189, 83, 139, 61, 2, 44, 69, 61, 177, 105, 40, 62, 118, 95, 125, 190, 26, 146, 231, 61, 250, 144, 163, 62, 198, 24, 127, 62, 41, 207, 47, 62, 140, 109, 248, 61, 191, 21, 106, 188, 175, 247, 143, 60, 6, 17, 44, 190, 173, 62, 68, 61, 165, 106, 217, 59, 47, 101, 68, 61, 4, 202, 8, 62, 143, 76, 75, 61, 250, 30, 166, 61, 92, 111, 155, 189, 140, 177, 181, 189, 185, 198, 255, 61, 107, 6, 251, 189, 18, 53, 29, 188, 168, 36, 77, 189, 192, 148, 33, 190, 240, 65, 4, 190, 29, 171, 13, 62, 45, 3, 171, 61, 59, 154, 93, 189, 241, 88, 117, 186, 40, 105, 115, 189, 207, 218, 11, 187, 20, 193, 73, 60, 38, 199, 70, 190, 97, 144, 223, 188, 30, 137, 227, 61, 6, 139, 80, 190, 40, 13, 57, 190, 139, 67, 62, 190, 213, 234, 44, 190, 54, 217, 60, 61, 97, 150, 239, 189, 188, 191, 151, 189, 32, 90, 244, 189, 129, 187, 141, 61, 55, 70, 107, 189, 1, 241, 35, 62, 130, 1, 226, 189, 5, 156, 101, 60, 162, 248, 144, 61, 104, 221, 178, 59, 50, 22, 47, 62, 74, 61, 254, 60, 31, 51, 236, 61, 5, 203, 25, 190, 192, 81, 28, 62, 2, 241, 92, 189, 231, 246, 146, 189, 91, 233, 203, 189, 83, 172, 38, 189, 234, 26, 8, 190, 120, 191, 30, 190, 65, 160, 20, 62, 184, 36, 219, 189, 18, 206, 237, 61, 59, 63, 110, 189, 112, 16, 139, 188, 77, 123, 11, 60, 204, 41, 218, 189, 103, 217, 229, 60, 230, 50, 150, 189, 92, 246, 0, 190, 156, 117, 93, 61, 87, 46, 159, 61, 39, 193, 40, 190, 129, 76, 42, 190, 23, 172, 62, 191, 6, 244, 194, 190, 7, 197, 158, 62, 222, 18, 73, 190, 30, 207, 19, 191, 2, 120, 16, 190, 98, 190, 134, 189, 248, 235, 101, 187, 41, 18, 82, 61, 163, 37, 52, 189, 30, 101, 172, 61, 22, 71, 74, 190, 101, 189, 13, 190, 55, 212, 76, 191, 203, 51, 6, 191, 58, 77, 31, 61, 186, 238, 97, 189, 248, 138, 68, 62, 10, 228, 88, 190, 73, 54, 149, 190, 84, 86, 105, 62, 28, 192, 15, 191, 214, 178, 162, 61, 43, 235, 146, 62, 35, 226, 173, 190, 0, 247, 167, 62, 252, 90, 24, 61, 219, 222, 17, 190, 139, 106, 108, 190, 237, 243, 45, 62, 200, 42, 192, 188, 37, 34, 162, 190, 73, 200, 84, 62, 34, 219, 47, 63, 24, 155, 183, 61, 226, 221, 11, 191, 99, 126, 56, 61, 80, 85, 90, 189, 0, 171, 92, 189, 108, 164, 206, 190, 239, 186, 141, 190, 119, 118, 75, 62, 217, 42, 147, 189, 2, 91, 122, 62, 72, 177, 142, 190, 220, 153, 58, 62, 98, 123, 181, 61, 32, 4, 102, 190, 59, 9, 106, 190, 44, 73, 210, 61, 151, 225, 219, 187, 212, 205, 114, 62, 67, 27, 101, 190, 242, 38, 245, 61, 96, 52, 5, 59, 194, 31, 173, 61, 252, 207, 131, 62, 224, 243, 153, 62, 176, 196, 160, 62, 99, 19, 25, 62, 38, 120, 236, 187, 67, 47, 109, 59, 36, 255, 60, 61, 61, 213, 128, 189, 40, 83, 187, 189, 250, 69, 138, 190, 174, 63, 188, 190, 32, 190, 68, 62, 87, 208, 254, 61, 99, 8, 58, 61, 46, 91, 221, 62, 220, 211, 117, 62, 173, 170, 85, 61, 194, 72, 60, 61, 63, 125, 238, 189, 137, 71, 22, 190, 52, 77, 102, 189, 238, 215, 13, 190, 167, 253, 246, 61, 24, 159, 131, 61, 110, 233, 104, 62, 137, 36, 110, 191, 224, 64, 48, 188, 148, 211, 103, 62, 27, 169, 61, 189, 82, 42, 234, 189, 33, 25, 255, 61, 139, 90, 154, 189, 247, 42, 51, 190, 58, 197, 194, 190, 130, 112, 158, 190, 74, 73, 210, 189, 112, 117, 232, 188, 55, 8, 169, 61, 26, 134, 146, 190, 111, 187, 8, 189, 252, 46, 20, 190, 194, 104, 64, 191, 89, 225, 148, 61, 64, 150, 166, 62, 156, 245, 178, 189, 72, 20, 207, 62, 5, 253, 107, 62, 139, 45, 182, 62, 227, 46, 157, 61, 154, 75, 238, 188, 6, 120, 23, 62, 57, 189, 164, 190, 188, 71, 159, 61, 132, 123, 26, 61, 177, 239, 63, 61, 224, 202, 72, 62, 91, 192, 145, 62, 0, 64, 186, 61, 146, 39, 132, 62, 146, 130, 1, 189, 138, 79, 101, 62, 80, 217, 43, 190, 94, 197, 80, 62, 52, 26, 246, 60, 251, 44, 16, 190, 251, 117, 47, 189, 19, 113, 226, 190, 234, 159, 46, 189, 11, 146, 139, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {205, 172, 63, 62, 120, 187, 132, 61, 74, 0, 87, 62, 123, 218, 25, 190, 142, 246, 212, 61, 182, 94, 35, 62, 53, 155, 125, 62, 242, 48, 134, 61, 161, 235, 148, 62, 23, 137, 50, 189, 49, 160, 7, 60, 21, 144, 229, 61, 215, 127, 198, 62, 192, 228, 150, 189, 117, 37, 173, 61, 114, 48, 104, 189, 227, 110, 91, 62, 4, 228, 129, 59, 193, 47, 196, 60, 215, 220, 179, 61, 87, 218, 161, 188, 203, 87, 105, 62, 71, 225, 196, 61, 20, 249, 171, 60, 115, 153, 149, 61, 223, 101, 31, 62, 16, 79, 231, 189, 227, 25, 20, 190, 111, 43, 69, 62, 160, 57, 4, 61, 155, 142, 48, 62, 27, 16, 213, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 173, 28, 63, 62, 165, 240, 62, 219, 25, 41, 190, 20, 16, 81, 61, 93, 47, 134, 190, 214, 246, 180, 62, 197, 174, 159, 191, 182, 228, 215, 61, 188, 158, 58, 188, 204, 240, 7, 63, 172, 100, 222, 190, 214, 11, 202, 190, 238, 149, 36, 191, 38, 202, 102, 190, 84, 235, 11, 63, 138, 132, 22, 190, 138, 215, 10, 191, 165, 243, 228, 190, 122, 152, 38, 191, 243, 71, 132, 62, 95, 119, 59, 62, 131, 213, 46, 63, 71, 17, 178, 190, 10, 142, 247, 61, 237, 249, 161, 190, 109, 163, 49, 62, 121, 176, 136, 189, 122, 10, 43, 62, 158, 150, 18, 63, 18, 61, 202, 62, 120, 245, 208, 190, 19, 63, 6, 191, 197, 190, 48, 190, 104, 46, 78, 190, 57, 55, 154, 190, 75, 251, 18, 190, 247, 142, 116, 190, 177, 250, 71, 190, 141, 167, 2, 189, 118, 233, 94, 188, 245, 17, 112, 190, 92, 12, 151, 61, 117, 134, 157, 189, 197, 93, 210, 61, 149, 7, 163, 190, 59, 137, 213, 61, 53, 6, 13, 62, 90, 80, 31, 62, 110, 105, 27, 62, 61, 191, 239, 61, 178, 32, 176, 62, 244, 43, 183, 61, 9, 59, 194, 62, 132, 165, 55, 61, 120, 1, 95, 61, 90, 49, 23, 190, 8, 157, 229, 189, 68, 127, 74, 190, 26, 99, 25, 190, 88, 170, 188, 189, 149, 24, 108, 189, 54, 16, 48, 62, 145, 249, 142, 190, 28, 244, 159, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 27, 23, 62, 138, 211, 179, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {0, 1, 33, 190, 175, 165, 201, 62, 12, 167, 178, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {82, 193, 224, 62, 146, 2, 55, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0008/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}