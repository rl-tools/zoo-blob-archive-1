// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 190, 6, 62, 148, 220, 53, 63, 173, 248, 205, 190, 204, 55, 136, 63, 166, 227, 23, 191, 121, 228, 233, 190, 50, 29, 31, 190, 131, 72, 178, 188, 28, 178, 145, 62, 108, 28, 144, 190, 150, 201, 171, 63, 221, 9, 219, 62, 121, 73, 55, 191, 238, 101, 59, 63, 153, 91, 171, 62, 113, 191, 47, 191, 52, 63, 95, 191, 101, 20, 23, 190, 20, 196, 50, 63, 15, 54, 170, 63, 235, 52, 170, 62, 90, 157, 84, 190, 216, 195, 12, 62, 10, 80, 0, 63, 154, 157, 249, 62, 89, 148, 119, 63, 184, 106, 171, 62, 109, 100, 163, 62, 153, 98, 42, 63, 3, 99, 149, 190, 53, 218, 20, 63, 3, 113, 53, 63, 251, 158, 237, 62, 100, 98, 66, 63, 207, 253, 85, 63, 165, 38, 181, 62, 153, 47, 129, 62, 125, 145, 137, 62, 74, 207, 183, 190, 231, 105, 244, 188, 235, 159, 157, 190, 234, 54, 217, 186, 93, 182, 200, 190, 221, 168, 85, 190, 142, 234, 156, 62, 176, 86, 113, 189, 3, 23, 55, 63, 123, 104, 212, 62, 82, 8, 195, 190, 3, 228, 181, 62, 43, 222, 134, 62, 141, 239, 38, 62, 91, 32, 32, 63, 218, 144, 52, 62, 46, 245, 209, 190, 160, 129, 120, 62, 181, 206, 14, 191, 111, 139, 12, 63, 78, 187, 145, 63, 196, 107, 210, 62, 202, 229, 247, 188, 76, 119, 183, 191, 42, 159, 179, 190, 21, 76, 162, 189, 220, 70, 172, 62, 196, 59, 89, 189, 101, 155, 217, 62, 165, 113, 197, 187, 186, 77, 0, 63, 84, 151, 250, 190, 156, 173, 158, 190, 199, 85, 96, 62, 253, 23, 163, 190, 32, 149, 150, 63, 195, 164, 136, 62, 253, 220, 191, 190, 142, 135, 47, 63, 242, 54, 20, 62, 34, 1, 178, 189, 9, 154, 129, 191, 198, 7, 131, 190, 177, 143, 237, 190, 226, 202, 47, 63, 35, 239, 202, 61, 5, 6, 175, 191, 199, 71, 146, 190, 138, 150, 167, 189, 11, 220, 55, 63, 148, 190, 88, 191, 39, 222, 231, 190, 124, 22, 159, 62, 66, 244, 95, 191, 163, 36, 0, 63, 213, 0, 4, 63, 10, 7, 176, 190, 253, 173, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 94, 18, 191, 107, 246, 2, 62, 151, 253, 13, 191, 63, 193, 146, 61, 206, 102, 237, 190, 195, 224, 66, 62, 98, 128, 25, 190, 168, 11, 29, 190, 246, 10, 179, 190, 68, 37, 8, 63, 154, 175, 178, 190, 162, 69, 77, 61, 9, 56, 205, 62, 41, 218, 212, 190, 164, 200, 229, 190, 34, 247, 19, 191, 20, 234, 163, 62, 9, 207, 203, 62, 226, 54, 214, 61, 10, 166, 141, 190, 134, 44, 139, 61, 145, 6, 128, 62, 25, 74, 59, 63, 225, 177, 216, 190, 65, 43, 164, 188, 98, 52, 218, 62, 182, 5, 221, 189, 34, 128, 186, 62, 53, 127, 122, 62, 24, 176, 127, 190, 147, 202, 84, 189, 37, 70, 29, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 233, 155, 189, 65, 9, 164, 62, 8, 138, 45, 190, 36, 58, 92, 60, 57, 123, 140, 62, 6, 121, 48, 189, 5, 192, 227, 190, 188, 217, 223, 61, 131, 139, 179, 190, 99, 228, 115, 190, 161, 181, 145, 190, 60, 72, 42, 190, 203, 117, 183, 61, 82, 24, 51, 190, 51, 229, 138, 61, 38, 45, 174, 189, 202, 134, 17, 62, 211, 115, 164, 62, 101, 240, 16, 191, 82, 19, 224, 190, 59, 126, 212, 190, 224, 251, 226, 187, 73, 3, 133, 62, 103, 89, 249, 190, 187, 61, 153, 62, 157, 142, 80, 62, 14, 60, 72, 191, 15, 175, 13, 190, 147, 36, 136, 62, 202, 37, 71, 62, 53, 5, 87, 186, 42, 91, 161, 189, 37, 178, 37, 62, 158, 170, 199, 62, 196, 53, 242, 190, 107, 130, 119, 190, 212, 220, 3, 62, 31, 143, 201, 188, 144, 186, 255, 190, 96, 89, 129, 62, 149, 55, 5, 191, 46, 127, 186, 188, 209, 224, 135, 190, 88, 130, 198, 189, 231, 192, 223, 61, 160, 119, 153, 189, 8, 227, 17, 62, 128, 72, 5, 191, 173, 122, 136, 59, 7, 36, 167, 189, 128, 204, 148, 190, 174, 103, 12, 191, 20, 43, 27, 190, 34, 69, 188, 187, 33, 54, 167, 62, 20, 162, 211, 189, 58, 84, 164, 190, 131, 52, 186, 190, 104, 33, 106, 190, 45, 126, 146, 190, 140, 100, 254, 189, 221, 98, 184, 62, 90, 239, 159, 62, 131, 195, 130, 62, 177, 135, 76, 190, 159, 211, 62, 62, 31, 107, 251, 61, 172, 13, 239, 60, 208, 245, 175, 190, 220, 217, 2, 190, 57, 240, 28, 61, 22, 99, 41, 188, 237, 65, 235, 60, 15, 148, 169, 62, 174, 182, 0, 62, 247, 77, 60, 62, 82, 33, 52, 62, 32, 1, 28, 62, 35, 12, 20, 190, 12, 24, 176, 189, 86, 9, 210, 61, 48, 170, 162, 62, 149, 226, 38, 62, 70, 131, 27, 62, 87, 12, 192, 189, 121, 152, 2, 61, 89, 165, 149, 188, 181, 203, 239, 61, 252, 255, 129, 190, 96, 19, 128, 62, 237, 97, 61, 62, 134, 219, 142, 189, 146, 173, 234, 189, 192, 198, 118, 189, 9, 22, 27, 190, 87, 83, 150, 190, 156, 237, 135, 61, 135, 49, 0, 190, 127, 108, 187, 61, 206, 164, 61, 190, 92, 198, 2, 62, 198, 89, 225, 189, 68, 223, 47, 190, 204, 8, 6, 62, 214, 238, 18, 62, 42, 10, 87, 190, 6, 183, 222, 61, 218, 11, 14, 61, 230, 163, 237, 61, 194, 164, 37, 62, 249, 235, 236, 189, 74, 132, 198, 189, 115, 17, 180, 189, 90, 20, 2, 62, 57, 248, 5, 62, 212, 67, 91, 189, 131, 30, 30, 61, 203, 81, 196, 187, 37, 100, 63, 190, 92, 178, 62, 190, 103, 96, 29, 62, 218, 194, 3, 186, 33, 87, 234, 61, 195, 191, 156, 61, 156, 17, 20, 190, 183, 236, 40, 190, 8, 198, 226, 61, 59, 247, 154, 188, 51, 65, 218, 189, 160, 67, 19, 62, 34, 11, 65, 188, 184, 153, 179, 190, 253, 164, 139, 191, 50, 41, 149, 62, 111, 229, 90, 62, 33, 17, 0, 61, 125, 97, 137, 187, 111, 194, 254, 61, 202, 136, 17, 62, 170, 250, 199, 60, 96, 36, 142, 189, 13, 217, 195, 189, 123, 92, 171, 190, 65, 238, 50, 62, 19, 50, 108, 190, 223, 241, 195, 61, 246, 84, 193, 61, 31, 122, 211, 61, 224, 197, 171, 189, 214, 215, 228, 60, 169, 128, 45, 62, 246, 25, 46, 190, 18, 155, 89, 191, 115, 66, 135, 189, 23, 152, 238, 61, 55, 243, 164, 189, 61, 128, 245, 60, 137, 249, 42, 190, 70, 172, 10, 189, 108, 186, 181, 60, 2, 60, 79, 190, 222, 184, 154, 62, 190, 183, 129, 61, 33, 126, 131, 189, 3, 126, 29, 62, 158, 73, 60, 188, 235, 246, 4, 191, 251, 61, 107, 62, 27, 93, 1, 191, 231, 8, 153, 188, 250, 246, 141, 190, 242, 2, 212, 189, 194, 251, 25, 190, 180, 151, 5, 62, 111, 105, 33, 62, 170, 120, 175, 190, 205, 74, 25, 62, 101, 170, 86, 62, 31, 212, 25, 61, 69, 163, 214, 190, 172, 88, 147, 61, 250, 164, 162, 61, 209, 245, 30, 62, 218, 222, 30, 190, 93, 15, 62, 190, 254, 199, 165, 61, 83, 227, 100, 190, 207, 24, 173, 190, 233, 238, 79, 62, 61, 77, 141, 62, 19, 249, 54, 62, 237, 202, 60, 62, 168, 16, 52, 189, 60, 70, 144, 189, 61, 142, 242, 61, 198, 15, 221, 191, 132, 107, 9, 192, 217, 190, 205, 62, 230, 212, 66, 191, 77, 18, 39, 191, 212, 170, 172, 189, 76, 136, 112, 188, 241, 248, 67, 60, 202, 67, 173, 190, 65, 35, 250, 190, 68, 88, 36, 190, 8, 236, 36, 191, 49, 181, 166, 188, 2, 253, 97, 60, 5, 12, 200, 191, 228, 30, 111, 62, 162, 10, 205, 190, 110, 33, 81, 62, 92, 52, 216, 61, 136, 139, 116, 191, 91, 15, 8, 63, 56, 62, 100, 191, 27, 192, 244, 61, 107, 141, 26, 61, 49, 136, 68, 62, 221, 172, 137, 62, 206, 14, 156, 190, 149, 100, 101, 191, 42, 51, 159, 61, 222, 16, 135, 188, 32, 78, 4, 190, 31, 154, 225, 188, 241, 31, 60, 61, 227, 107, 239, 61, 208, 33, 196, 189, 4, 97, 139, 189, 172, 151, 21, 61, 191, 195, 7, 190, 122, 20, 18, 60, 199, 70, 251, 189, 250, 60, 57, 190, 171, 54, 160, 189, 60, 32, 218, 189, 249, 116, 235, 188, 86, 108, 155, 189, 84, 228, 190, 189, 36, 139, 1, 62, 28, 142, 241, 189, 241, 181, 100, 61, 80, 200, 18, 62, 223, 214, 211, 189, 130, 203, 59, 189, 105, 71, 181, 61, 47, 19, 243, 188, 187, 102, 69, 190, 139, 74, 129, 188, 190, 55, 55, 61, 113, 73, 252, 188, 159, 45, 6, 190, 183, 66, 87, 190, 219, 96, 159, 61, 13, 234, 19, 191, 211, 79, 20, 62, 132, 238, 10, 62, 25, 178, 86, 190, 7, 15, 150, 61, 65, 244, 251, 61, 108, 181, 153, 189, 80, 159, 149, 189, 135, 26, 54, 190, 165, 198, 158, 60, 37, 77, 182, 189, 2, 78, 185, 61, 122, 209, 143, 189, 215, 203, 98, 189, 22, 250, 173, 61, 237, 157, 49, 190, 176, 254, 18, 62, 26, 252, 134, 190, 4, 94, 179, 60, 253, 206, 242, 189, 150, 148, 191, 61, 242, 18, 50, 61, 104, 99, 11, 62, 46, 20, 62, 62, 39, 171, 178, 190, 14, 142, 26, 61, 74, 65, 156, 61, 75, 143, 75, 189, 195, 122, 49, 189, 130, 249, 147, 189, 129, 90, 214, 61, 149, 73, 111, 189, 245, 132, 93, 62, 131, 122, 159, 62, 166, 109, 61, 62, 150, 191, 104, 190, 197, 204, 5, 190, 12, 212, 122, 189, 100, 85, 173, 190, 237, 117, 18, 62, 184, 51, 57, 190, 250, 35, 52, 189, 242, 19, 135, 61, 18, 75, 212, 188, 248, 97, 25, 62, 152, 223, 6, 189, 69, 26, 49, 62, 98, 58, 207, 60, 168, 173, 105, 190, 23, 17, 180, 62, 1, 251, 204, 186, 146, 8, 201, 190, 101, 23, 52, 62, 229, 8, 205, 189, 104, 212, 153, 61, 39, 118, 103, 62, 119, 188, 174, 190, 122, 80, 137, 191, 247, 247, 167, 61, 121, 30, 179, 191, 141, 61, 14, 191, 25, 122, 183, 62, 82, 133, 41, 62, 70, 208, 98, 62, 14, 88, 18, 62, 146, 238, 119, 62, 69, 198, 17, 190, 252, 137, 229, 189, 125, 227, 158, 62, 177, 79, 98, 61, 98, 10, 169, 190, 109, 125, 78, 61, 15, 194, 151, 61, 152, 219, 235, 190, 148, 84, 218, 59, 28, 182, 160, 190, 228, 158, 72, 62, 236, 53, 33, 190, 90, 228, 134, 62, 157, 145, 7, 190, 80, 223, 108, 62, 48, 232, 132, 190, 252, 125, 183, 190, 42, 131, 46, 190, 213, 44, 240, 62, 54, 133, 200, 190, 110, 3, 2, 62, 108, 104, 181, 60, 229, 13, 4, 190, 35, 37, 231, 189, 167, 130, 36, 63, 97, 39, 205, 189, 61, 70, 229, 187, 180, 50, 110, 62, 91, 216, 169, 62, 173, 95, 73, 62, 18, 22, 145, 190, 179, 3, 79, 190, 119, 39, 5, 190, 94, 107, 162, 191, 164, 45, 156, 191, 117, 137, 164, 62, 221, 85, 185, 61, 9, 108, 143, 187, 47, 134, 124, 62, 240, 0, 71, 62, 37, 127, 174, 190, 181, 128, 186, 189, 4, 11, 115, 62, 83, 34, 26, 187, 100, 254, 64, 191, 24, 88, 66, 190, 15, 114, 60, 190, 40, 33, 31, 62, 136, 135, 113, 61, 186, 14, 32, 62, 52, 73, 53, 188, 0, 181, 32, 189, 82, 73, 167, 190, 116, 93, 148, 62, 43, 183, 144, 191, 175, 51, 119, 61, 122, 110, 51, 61, 72, 52, 139, 59, 251, 16, 75, 62, 30, 36, 122, 190, 116, 66, 169, 190, 230, 162, 146, 190, 15, 153, 43, 188, 232, 160, 182, 189, 150, 188, 253, 189, 169, 32, 163, 191, 156, 172, 9, 192, 66, 121, 166, 62, 127, 31, 75, 62, 130, 158, 163, 190, 107, 128, 248, 60, 232, 213, 87, 62, 165, 107, 116, 62, 61, 45, 49, 62, 121, 52, 75, 190, 190, 162, 171, 61, 22, 165, 126, 191, 59, 95, 159, 188, 168, 112, 176, 58, 107, 232, 249, 61, 181, 140, 39, 188, 241, 194, 97, 62, 160, 18, 88, 62, 100, 3, 33, 189, 218, 76, 182, 60, 210, 123, 174, 62, 189, 58, 86, 191, 139, 33, 4, 62, 233, 168, 70, 188, 251, 135, 10, 189, 201, 93, 26, 189, 121, 5, 84, 190, 90, 254, 51, 190, 97, 76, 143, 189, 236, 137, 221, 61, 201, 32, 160, 61, 88, 12, 38, 62, 192, 39, 79, 62, 208, 49, 239, 188, 17, 151, 208, 61, 62, 63, 172, 61, 217, 15, 96, 62, 89, 31, 10, 190, 168, 79, 32, 61, 168, 223, 142, 190, 50, 81, 133, 189, 255, 178, 81, 189, 46, 232, 10, 189, 105, 123, 81, 62, 18, 61, 12, 189, 231, 241, 73, 62, 78, 140, 154, 190, 176, 168, 185, 190, 74, 92, 83, 190, 141, 112, 30, 63, 0, 63, 121, 190, 100, 134, 14, 189, 143, 68, 113, 62, 242, 47, 125, 62, 163, 175, 89, 61, 29, 135, 224, 62, 196, 226, 43, 187, 3, 181, 159, 189, 128, 247, 76, 62, 146, 17, 211, 61, 158, 240, 29, 188, 154, 125, 132, 190, 26, 180, 21, 191, 134, 52, 86, 190, 40, 197, 3, 191, 44, 221, 224, 189, 186, 21, 161, 62, 203, 71, 44, 190, 155, 45, 180, 190, 9, 5, 197, 190, 51, 29, 133, 189, 198, 43, 151, 190, 142, 91, 242, 190, 165, 184, 104, 61, 221, 251, 160, 60, 174, 107, 244, 62, 236, 128, 248, 190, 146, 96, 13, 190, 151, 108, 163, 190, 61, 38, 142, 62, 123, 2, 8, 191, 148, 34, 27, 62, 239, 19, 92, 61, 91, 61, 181, 190, 118, 109, 47, 190, 64, 87, 147, 190, 244, 92, 72, 62, 63, 137, 95, 62, 168, 101, 140, 62, 115, 206, 136, 62, 243, 45, 236, 190, 67, 78, 158, 62, 61, 158, 42, 191, 120, 89, 195, 189, 23, 169, 135, 190, 235, 172, 111, 190, 227, 93, 160, 190, 102, 181, 220, 190, 35, 124, 204, 62, 206, 14, 81, 62, 25, 85, 161, 190, 205, 60, 24, 62, 216, 186, 126, 62, 228, 242, 193, 188, 102, 137, 55, 61, 184, 158, 170, 61, 26, 191, 222, 61, 129, 48, 254, 190, 227, 13, 245, 190, 12, 232, 48, 61, 119, 123, 204, 62, 188, 52, 12, 62, 32, 54, 146, 61, 146, 39, 225, 61, 99, 230, 181, 188, 169, 80, 11, 190, 172, 248, 226, 190, 80, 203, 67, 190, 13, 195, 75, 62, 137, 244, 137, 62, 162, 59, 217, 61, 215, 105, 87, 60, 129, 78, 1, 191, 125, 41, 148, 190, 191, 196, 56, 190, 253, 52, 153, 190, 61, 236, 69, 190, 158, 60, 79, 62, 248, 144, 213, 60, 114, 141, 124, 62, 206, 237, 1, 60, 32, 221, 134, 189, 75, 64, 28, 189, 83, 27, 1, 191, 136, 161, 233, 190, 37, 193, 71, 191, 117, 73, 15, 191, 175, 13, 238, 190, 193, 3, 152, 189, 224, 83, 42, 60, 205, 243, 72, 62, 205, 178, 53, 62, 234, 220, 20, 62, 21, 156, 14, 191, 208, 3, 228, 190, 72, 68, 226, 61, 239, 47, 252, 189, 148, 24, 46, 62, 107, 249, 36, 188, 167, 121, 142, 62, 94, 6, 32, 62, 125, 104, 126, 188, 181, 192, 138, 62, 153, 119, 178, 61, 186, 126, 98, 190, 112, 137, 162, 189, 146, 189, 16, 190, 220, 63, 203, 189, 40, 144, 21, 190, 109, 178, 12, 62, 70, 25, 81, 191, 65, 206, 168, 191, 51, 229, 170, 62, 199, 13, 55, 62, 101, 214, 128, 190, 72, 25, 154, 62, 78, 58, 81, 62, 177, 123, 146, 62, 51, 22, 152, 189, 151, 54, 228, 189, 49, 204, 0, 190, 180, 72, 78, 191, 169, 154, 147, 62, 155, 196, 41, 190, 143, 1, 0, 189, 83, 121, 179, 61, 65, 12, 172, 61, 185, 114, 122, 61, 248, 76, 7, 187, 124, 48, 187, 188, 131, 98, 231, 62, 144, 81, 95, 191, 231, 133, 141, 62, 107, 247, 167, 61, 115, 53, 90, 62, 20, 125, 129, 189, 38, 244, 122, 190, 255, 77, 168, 190, 75, 170, 35, 189, 223, 121, 141, 62, 56, 213, 140, 62, 33, 186, 190, 190, 143, 247, 173, 190, 14, 249, 31, 190, 32, 185, 202, 190, 172, 185, 140, 190, 109, 171, 15, 190, 82, 75, 156, 189, 3, 76, 188, 189, 199, 156, 148, 190, 8, 59, 157, 190, 18, 135, 125, 61, 68, 93, 161, 188, 97, 122, 10, 191, 197, 180, 41, 190, 33, 113, 9, 190, 85, 38, 211, 190, 42, 14, 54, 190, 139, 94, 146, 190, 14, 200, 123, 60, 155, 189, 83, 190, 196, 78, 245, 61, 151, 217, 95, 190, 111, 157, 27, 190, 66, 50, 83, 191, 199, 184, 119, 61, 49, 126, 140, 191, 149, 68, 2, 191, 96, 63, 22, 62, 113, 74, 190, 62, 141, 47, 8, 62, 247, 38, 38, 190, 230, 137, 174, 190, 22, 6, 177, 189, 84, 51, 155, 61, 173, 71, 243, 62, 31, 102, 7, 63, 231, 38, 147, 60, 156, 216, 103, 62, 207, 125, 189, 61, 240, 32, 55, 191, 52, 183, 19, 189, 7, 167, 214, 61, 196, 219, 196, 190, 16, 161, 44, 62, 219, 80, 234, 61, 15, 87, 93, 190, 12, 63, 144, 61, 32, 209, 123, 62, 56, 79, 14, 191, 85, 67, 66, 61, 25, 74, 180, 61, 235, 233, 3, 190, 100, 171, 107, 60, 35, 81, 141, 190, 58, 138, 42, 62, 38, 219, 31, 62, 252, 8, 85, 60, 194, 162, 195, 61, 255, 117, 133, 62, 205, 138, 247, 189, 141, 74, 128, 62, 144, 64, 15, 190, 164, 166, 22, 62, 116, 167, 143, 62, 67, 144, 134, 60, 240, 10, 232, 189, 172, 35, 177, 190, 202, 218, 46, 189, 212, 175, 234, 190, 200, 150, 144, 62, 188, 81, 249, 190, 226, 116, 34, 190, 236, 5, 142, 190, 123, 185, 145, 189, 143, 99, 175, 61, 225, 88, 184, 61, 97, 170, 38, 60, 55, 228, 152, 189, 141, 48, 87, 189, 59, 178, 237, 189, 81, 163, 7, 190, 3, 0, 177, 190, 216, 141, 19, 62, 109, 244, 99, 189, 63, 243, 179, 61, 189, 98, 156, 62, 117, 142, 19, 190, 145, 108, 65, 191, 145, 27, 245, 61, 34, 208, 3, 191, 147, 129, 184, 189, 81, 152, 178, 62, 82, 60, 189, 62, 18, 113, 118, 61, 253, 26, 245, 61, 191, 6, 183, 62, 219, 58, 204, 190, 76, 66, 94, 62, 219, 20, 44, 63, 140, 146, 121, 189, 178, 53, 23, 191, 148, 84, 2, 62, 251, 253, 252, 189, 213, 255, 253, 189, 222, 240, 105, 190, 65, 4, 135, 190, 249, 103, 75, 62, 42, 85, 48, 189, 188, 130, 61, 189, 192, 142, 149, 190, 185, 12, 58, 62, 236, 80, 74, 189, 131, 192, 174, 190, 60, 75, 88, 190, 246, 89, 40, 190, 182, 141, 212, 189, 166, 229, 163, 61, 175, 187, 8, 191, 65, 18, 131, 62, 181, 125, 58, 61, 188, 213, 41, 190, 172, 244, 31, 190, 199, 73, 187, 60, 137, 131, 146, 62, 8, 218, 110, 62, 94, 75, 111, 62, 135, 62, 158, 61, 208, 145, 73, 190, 42, 214, 166, 61, 215, 35, 181, 190, 235, 68, 78, 190, 36, 119, 128, 60, 224, 119, 242, 61, 38, 13, 130, 61, 166, 109, 62, 61, 202, 69, 174, 62, 114, 221, 112, 62, 167, 69, 1, 62, 23, 150, 72, 188, 208, 69, 0, 190, 126, 159, 19, 62, 18, 56, 193, 61, 204, 124, 7, 61, 129, 39, 216, 189, 16, 210, 91, 62, 143, 149, 160, 189, 248, 151, 161, 190, 169, 236, 0, 62, 193, 54, 178, 189, 210, 101, 199, 62, 29, 45, 21, 191, 165, 95, 104, 188, 205, 4, 87, 190, 96, 195, 199, 61, 30, 195, 155, 189, 95, 245, 31, 191, 44, 29, 72, 62, 87, 176, 167, 190, 6, 31, 75, 61, 25, 136, 54, 189, 194, 67, 13, 190, 249, 41, 117, 189, 119, 30, 30, 190, 109, 5, 167, 189, 106, 248, 154, 61, 87, 5, 203, 61, 231, 97, 194, 61, 213, 231, 255, 189, 67, 178, 67, 189, 196, 246, 231, 189, 214, 99, 253, 58, 252, 216, 49, 190, 165, 223, 204, 189, 25, 115, 165, 189, 54, 4, 239, 60, 190, 102, 52, 190, 16, 25, 107, 61, 121, 172, 212, 61, 31, 233, 148, 189, 221, 151, 63, 189, 196, 225, 46, 190, 174, 109, 175, 189, 104, 104, 18, 189, 123, 20, 8, 61, 131, 199, 16, 190, 42, 56, 113, 189, 6, 164, 167, 60, 82, 76, 131, 58, 194, 64, 23, 190, 81, 50, 153, 61, 28, 111, 45, 190, 150, 100, 16, 189, 161, 171, 58, 60, 145, 18, 184, 190, 97, 54, 99, 191, 79, 106, 125, 61, 166, 255, 243, 188, 240, 22, 182, 190, 10, 225, 215, 188, 69, 254, 169, 62, 9, 196, 150, 62, 142, 204, 171, 61, 8, 37, 43, 60, 121, 14, 227, 60, 5, 115, 220, 190, 70, 29, 147, 190, 254, 253, 197, 189, 64, 45, 121, 188, 94, 195, 180, 62, 114, 135, 3, 62, 254, 153, 154, 189, 54, 43, 226, 60, 118, 184, 22, 61, 244, 202, 102, 62, 98, 66, 175, 190, 175, 195, 57, 62, 62, 193, 78, 62, 70, 121, 56, 61, 201, 119, 117, 60, 61, 190, 142, 190, 78, 158, 57, 190, 238, 53, 187, 189, 39, 43, 2, 60, 209, 10, 14, 62, 167, 177, 117, 190, 177, 234, 248, 188, 204, 101, 145, 62, 74, 111, 40, 62, 165, 149, 158, 190, 188, 248, 40, 62, 14, 102, 143, 61, 208, 0, 165, 188, 73, 11, 77, 190, 241, 75, 15, 62, 59, 183, 52, 62, 204, 196, 238, 189, 39, 134, 91, 60, 75, 79, 59, 61, 180, 15, 195, 61, 238, 160, 85, 62, 140, 81, 184, 189, 38, 142, 250, 189, 8, 54, 79, 190, 230, 242, 3, 62, 215, 67, 138, 61, 150, 80, 151, 61, 251, 229, 111, 61, 200, 174, 28, 62, 39, 147, 153, 190, 25, 253, 207, 61, 19, 7, 164, 62, 148, 6, 144, 62, 2, 136, 19, 62, 239, 219, 136, 62, 191, 21, 106, 188, 254, 70, 133, 60, 6, 17, 44, 190, 2, 3, 63, 61, 165, 106, 217, 59, 47, 101, 68, 61, 51, 60, 6, 62, 226, 106, 69, 61, 125, 62, 163, 61, 82, 126, 157, 189, 84, 67, 186, 189, 253, 35, 249, 61, 26, 237, 251, 189, 18, 53, 29, 188, 168, 36, 77, 189, 192, 148, 33, 190, 122, 94, 5, 190, 139, 220, 11, 62, 45, 3, 171, 61, 41, 229, 101, 189, 241, 88, 117, 186, 59, 201, 115, 189, 63, 189, 212, 187, 20, 193, 73, 60, 185, 15, 71, 190, 223, 177, 228, 188, 30, 137, 227, 61, 6, 139, 80, 190, 40, 13, 57, 190, 139, 67, 62, 190, 35, 223, 46, 190, 54, 217, 60, 61, 67, 210, 245, 189, 188, 191, 151, 189, 32, 90, 244, 189, 129, 187, 141, 61, 55, 70, 107, 189, 183, 65, 35, 62, 130, 1, 226, 189, 5, 156, 101, 60, 162, 248, 144, 61, 134, 80, 210, 185, 50, 22, 47, 62, 74, 61, 254, 60, 141, 110, 225, 61, 5, 203, 25, 190, 192, 81, 28, 62, 2, 241, 92, 189, 142, 222, 147, 189, 91, 233, 203, 189, 197, 201, 68, 189, 234, 26, 8, 190, 94, 159, 29, 190, 68, 176, 17, 62, 184, 36, 219, 189, 18, 206, 237, 61, 59, 63, 110, 189, 22, 205, 160, 188, 158, 188, 23, 60, 195, 126, 224, 189, 42, 106, 202, 60, 230, 50, 150, 189, 92, 246, 0, 190, 156, 117, 93, 61, 178, 95, 21, 62, 211, 12, 130, 190, 96, 218, 111, 190, 16, 250, 151, 191, 62, 173, 110, 191, 192, 128, 134, 62, 17, 100, 73, 190, 190, 195, 216, 190, 2, 120, 16, 190, 57, 126, 150, 188, 163, 176, 221, 60, 6, 25, 243, 188, 129, 157, 115, 189, 30, 101, 172, 61, 238, 107, 52, 62, 29, 107, 19, 190, 107, 122, 117, 191, 178, 116, 6, 191, 27, 251, 118, 61, 26, 253, 96, 189, 210, 151, 6, 62, 221, 49, 76, 190, 60, 148, 109, 190, 143, 61, 226, 62, 245, 2, 29, 191, 228, 136, 14, 61, 179, 173, 121, 62, 108, 20, 203, 190, 43, 216, 148, 62, 244, 249, 42, 189, 170, 30, 176, 61, 143, 3, 71, 190, 189, 241, 252, 61, 114, 244, 174, 60, 159, 124, 198, 190, 215, 23, 145, 61, 227, 242, 40, 63, 234, 70, 229, 61, 88, 67, 34, 191, 70, 205, 241, 60, 191, 18, 89, 190, 40, 245, 208, 189, 237, 10, 221, 190, 141, 46, 116, 190, 14, 226, 7, 62, 217, 42, 147, 189, 143, 127, 41, 62, 46, 240, 183, 190, 88, 75, 241, 61, 176, 88, 172, 60, 74, 134, 141, 190, 241, 76, 167, 190, 149, 138, 203, 61, 118, 241, 186, 189, 15, 213, 171, 62, 48, 51, 98, 190, 4, 30, 64, 189, 64, 196, 103, 190, 193, 228, 171, 60, 127, 132, 239, 60, 131, 127, 146, 62, 179, 185, 173, 62, 215, 14, 124, 62, 40, 208, 29, 61, 5, 13, 250, 60, 42, 3, 32, 189, 17, 82, 67, 189, 25, 214, 213, 189, 83, 13, 152, 190, 126, 154, 239, 190, 219, 189, 82, 62, 63, 222, 216, 61, 227, 105, 111, 61, 185, 63, 219, 62, 169, 161, 127, 62, 188, 55, 67, 61, 121, 111, 49, 61, 63, 125, 238, 189, 86, 65, 177, 189, 255, 102, 171, 189, 169, 204, 13, 190, 113, 236, 16, 62, 204, 59, 147, 61, 46, 194, 119, 62, 85, 232, 184, 191, 46, 104, 4, 61, 248, 19, 90, 62, 207, 196, 113, 189, 105, 145, 10, 190, 160, 24, 50, 62, 49, 220, 227, 190, 88, 71, 202, 189, 137, 8, 25, 191, 30, 171, 229, 190, 235, 222, 110, 188, 148, 169, 113, 190, 213, 190, 28, 62, 36, 231, 164, 190, 150, 233, 254, 60, 221, 250, 28, 190, 167, 51, 68, 191, 244, 57, 171, 189, 48, 127, 189, 62, 247, 34, 166, 189, 86, 74, 232, 62, 171, 167, 136, 62, 210, 231, 198, 62, 202, 13, 203, 61, 69, 208, 220, 59, 6, 120, 23, 62, 80, 227, 66, 190, 55, 117, 152, 61, 176, 230, 185, 60, 142, 31, 199, 61, 109, 244, 83, 62, 98, 211, 167, 62, 228, 158, 99, 190, 60, 187, 161, 62, 41, 22, 233, 188, 206, 154, 135, 62, 189, 36, 88, 190, 249, 231, 105, 62, 235, 177, 106, 190, 238, 250, 242, 189, 230, 116, 68, 190, 34, 111, 9, 191, 182, 239, 103, 61, 131, 218, 213, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {48, 208, 61, 62, 81, 250, 145, 61, 85, 16, 132, 62, 23, 60, 28, 190, 31, 89, 220, 61, 192, 154, 9, 62, 101, 89, 155, 62, 38, 90, 46, 61, 68, 187, 159, 62, 165, 222, 140, 189, 26, 184, 224, 187, 198, 179, 39, 62, 156, 92, 193, 62, 32, 54, 219, 189, 1, 46, 158, 61, 114, 243, 247, 60, 230, 132, 254, 61, 158, 18, 110, 61, 205, 229, 53, 189, 116, 98, 83, 62, 16, 254, 90, 61, 176, 6, 94, 62, 253, 222, 222, 61, 20, 249, 171, 60, 237, 207, 210, 61, 87, 97, 28, 62, 16, 242, 235, 189, 33, 142, 22, 190, 32, 205, 128, 61, 215, 72, 29, 61, 201, 95, 26, 62, 58, 38, 180, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {4, 135, 39, 63, 153, 81, 29, 63, 50, 232, 21, 190, 220, 96, 81, 61, 146, 185, 128, 190, 158, 94, 194, 62, 71, 24, 186, 191, 89, 96, 140, 61, 242, 209, 38, 60, 98, 231, 45, 63, 163, 62, 21, 191, 214, 22, 36, 191, 127, 35, 39, 191, 100, 32, 103, 190, 21, 98, 66, 63, 93, 169, 147, 190, 191, 76, 51, 191, 71, 9, 21, 191, 19, 29, 127, 191, 144, 232, 168, 62, 103, 97, 212, 62, 47, 179, 52, 63, 99, 166, 19, 191, 10, 142, 247, 61, 70, 158, 132, 190, 156, 251, 7, 62, 89, 196, 136, 189, 124, 240, 37, 62, 203, 127, 5, 63, 48, 33, 201, 62, 67, 9, 243, 190, 16, 30, 40, 191, 22, 158, 220, 189, 219, 190, 142, 190, 25, 51, 149, 190, 237, 214, 18, 190, 212, 203, 112, 190, 57, 11, 44, 190, 91, 247, 93, 59, 162, 196, 87, 60, 6, 196, 130, 190, 157, 78, 11, 187, 188, 93, 156, 189, 19, 107, 79, 62, 42, 209, 150, 190, 60, 75, 234, 61, 116, 85, 241, 61, 181, 241, 145, 62, 252, 38, 19, 62, 231, 160, 48, 62, 37, 178, 249, 62, 250, 241, 11, 61, 2, 208, 202, 62, 15, 173, 116, 61, 137, 169, 190, 188, 90, 49, 23, 190, 215, 246, 7, 190, 29, 109, 102, 190, 109, 77, 25, 190, 95, 7, 197, 189, 26, 249, 186, 59, 106, 134, 130, 62, 30, 54, 147, 190, 29, 90, 170, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {246, 83, 7, 62, 246, 7, 219, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {19, 95, 162, 63, 168, 39, 49, 63, 170, 133, 2, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {111, 36, 83, 192, 124, 27, 171, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0008/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}