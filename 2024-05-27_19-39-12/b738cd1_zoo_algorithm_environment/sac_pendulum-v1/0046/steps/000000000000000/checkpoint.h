// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 215, 187, 190, 70, 117, 126, 60, 228, 190, 133, 61, 24, 7, 119, 190, 41, 205, 170, 190, 200, 104, 240, 62, 183, 141, 254, 62, 208, 135, 12, 191, 12, 194, 206, 189, 176, 171, 19, 62, 0, 53, 112, 60, 104, 16, 234, 62, 96, 100, 35, 190, 53, 187, 13, 191, 178, 229, 211, 190, 104, 15, 131, 190, 104, 21, 87, 62, 59, 72, 136, 62, 57, 14, 157, 62, 78, 14, 82, 190, 150, 116, 138, 62, 94, 200, 6, 63, 101, 138, 168, 62, 75, 36, 191, 62, 67, 34, 159, 190, 77, 170, 226, 61, 168, 156, 172, 189, 235, 152, 114, 61, 53, 63, 186, 61, 70, 142, 194, 190, 81, 68, 189, 190, 143, 119, 9, 63, 89, 55, 218, 189, 16, 22, 198, 189, 146, 233, 92, 62, 88, 27, 192, 61, 140, 118, 86, 60, 26, 86, 12, 191, 104, 111, 92, 189, 155, 172, 248, 62, 11, 226, 227, 62, 75, 163, 192, 62, 140, 93, 183, 190, 29, 159, 137, 62, 240, 221, 204, 62, 77, 90, 123, 62, 172, 129, 138, 190, 171, 48, 18, 63, 62, 94, 167, 190, 115, 84, 38, 60, 213, 66, 139, 190, 217, 212, 31, 189, 202, 46, 29, 61, 70, 163, 3, 191, 153, 217, 4, 63, 41, 96, 235, 62, 202, 122, 194, 62, 219, 177, 44, 190, 78, 36, 172, 62, 36, 151, 177, 190, 230, 218, 231, 62, 213, 78, 145, 62, 246, 156, 40, 190, 26, 98, 209, 61, 163, 132, 242, 61, 147, 208, 239, 190, 185, 108, 155, 62, 78, 6, 8, 63, 113, 71, 243, 189, 198, 95, 222, 190, 155, 235, 166, 62, 62, 98, 154, 62, 109, 54, 113, 61, 141, 183, 58, 62, 216, 188, 222, 60, 162, 120, 17, 63, 51, 40, 154, 186, 85, 59, 12, 190, 131, 110, 217, 62, 144, 239, 123, 62, 95, 41, 125, 61, 20, 238, 168, 189, 143, 163, 237, 62, 72, 62, 195, 190, 36, 151, 215, 62, 83, 45, 28, 190, 105, 102, 179, 61, 220, 153, 19, 63, 23, 18, 216, 61, 202, 178, 218, 190, 157, 209, 239, 62, 25, 65, 212, 190, 115, 116, 5, 189, 85, 189, 35, 190, 255, 156, 247, 190, 61, 139, 132, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {100, 177, 19, 191, 178, 245, 7, 191, 141, 103, 252, 62, 9, 111, 3, 191, 84, 52, 80, 61, 240, 16, 16, 62, 147, 136, 159, 62, 138, 204, 117, 61, 37, 193, 66, 190, 144, 89, 138, 62, 72, 11, 3, 62, 87, 131, 15, 62, 94, 161, 187, 62, 26, 232, 191, 190, 172, 145, 216, 62, 88, 216, 176, 60, 14, 35, 23, 190, 106, 116, 84, 61, 121, 12, 13, 191, 217, 244, 161, 190, 136, 221, 240, 62, 58, 221, 181, 62, 17, 69, 12, 63, 68, 202, 44, 187, 204, 81, 28, 190, 196, 219, 145, 190, 84, 173, 162, 190, 92, 42, 225, 190, 6, 117, 0, 191, 186, 168, 43, 60, 140, 27, 132, 190, 151, 1, 140, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 162, 25, 62, 105, 136, 136, 61, 86, 135, 84, 61, 82, 55, 29, 190, 13, 152, 44, 190, 71, 195, 4, 190, 239, 128, 200, 189, 107, 2, 141, 187, 175, 36, 29, 62, 132, 150, 13, 61, 108, 68, 175, 61, 229, 59, 170, 61, 103, 87, 18, 62, 90, 190, 2, 190, 41, 171, 39, 62, 190, 29, 206, 189, 92, 130, 208, 189, 67, 182, 111, 61, 60, 129, 145, 60, 107, 98, 253, 61, 181, 154, 38, 62, 4, 14, 224, 61, 69, 225, 237, 189, 245, 77, 25, 62, 94, 87, 33, 189, 33, 78, 51, 190, 85, 27, 219, 60, 246, 229, 36, 62, 212, 189, 29, 61, 44, 15, 205, 189, 158, 252, 176, 61, 66, 36, 87, 61, 222, 110, 146, 189, 108, 211, 152, 60, 166, 236, 112, 189, 37, 186, 47, 189, 49, 151, 36, 190, 18, 105, 125, 61, 46, 169, 56, 60, 122, 226, 155, 189, 71, 241, 241, 189, 119, 180, 53, 61, 179, 14, 115, 189, 144, 154, 50, 61, 8, 185, 103, 189, 220, 68, 238, 189, 128, 136, 14, 62, 32, 5, 89, 189, 236, 40, 223, 61, 127, 159, 17, 189, 141, 151, 209, 188, 7, 38, 175, 189, 166, 162, 45, 190, 241, 9, 209, 61, 144, 113, 56, 61, 96, 199, 10, 190, 1, 154, 31, 62, 148, 207, 158, 61, 36, 75, 185, 61, 5, 81, 101, 188, 160, 233, 253, 189, 43, 176, 202, 61, 218, 210, 203, 189, 48, 24, 216, 188, 36, 74, 163, 61, 239, 37, 155, 61, 217, 217, 172, 61, 86, 22, 87, 61, 166, 210, 188, 61, 181, 187, 42, 189, 222, 172, 51, 190, 139, 215, 22, 189, 210, 109, 1, 62, 78, 132, 49, 190, 248, 183, 13, 61, 218, 126, 174, 189, 145, 215, 232, 189, 190, 214, 2, 62, 18, 137, 107, 188, 34, 194, 14, 190, 186, 62, 218, 189, 74, 166, 131, 61, 91, 41, 146, 189, 191, 170, 0, 62, 143, 198, 67, 61, 223, 215, 65, 61, 150, 8, 212, 189, 120, 145, 2, 62, 128, 218, 15, 62, 134, 193, 79, 61, 227, 145, 124, 61, 165, 247, 199, 61, 237, 206, 29, 190, 115, 178, 50, 60, 194, 229, 45, 62, 180, 115, 44, 189, 239, 30, 47, 189, 54, 104, 23, 190, 74, 69, 142, 61, 203, 148, 239, 61, 134, 233, 189, 60, 205, 62, 116, 60, 110, 154, 241, 189, 149, 98, 94, 55, 3, 244, 5, 190, 21, 169, 39, 62, 208, 196, 245, 61, 40, 49, 225, 189, 152, 187, 200, 188, 30, 253, 113, 61, 163, 154, 43, 62, 142, 91, 21, 62, 121, 109, 244, 189, 244, 204, 31, 62, 13, 253, 37, 62, 33, 43, 203, 189, 192, 135, 64, 61, 109, 154, 41, 62, 234, 228, 42, 190, 251, 15, 38, 190, 93, 199, 92, 189, 243, 68, 228, 189, 36, 136, 52, 190, 54, 160, 64, 61, 58, 15, 25, 190, 180, 25, 48, 62, 69, 83, 85, 61, 163, 81, 136, 189, 140, 167, 34, 62, 108, 202, 162, 188, 208, 100, 247, 61, 91, 203, 19, 62, 159, 39, 2, 61, 82, 137, 34, 190, 144, 187, 39, 190, 92, 92, 224, 61, 234, 35, 163, 189, 208, 27, 182, 61, 63, 135, 72, 60, 107, 19, 128, 189, 191, 179, 93, 61, 35, 7, 57, 60, 26, 188, 89, 189, 18, 15, 147, 59, 58, 100, 247, 61, 190, 190, 0, 62, 104, 209, 172, 189, 45, 218, 10, 190, 126, 145, 56, 60, 245, 83, 47, 190, 123, 121, 208, 189, 73, 152, 42, 188, 250, 33, 29, 60, 78, 223, 250, 188, 203, 12, 154, 61, 251, 216, 182, 189, 23, 33, 135, 189, 214, 164, 28, 62, 162, 235, 250, 188, 141, 240, 193, 188, 167, 121, 45, 62, 193, 137, 200, 61, 185, 232, 135, 189, 208, 48, 240, 61, 196, 192, 153, 61, 14, 43, 83, 189, 135, 196, 161, 61, 143, 231, 33, 189, 211, 110, 60, 188, 179, 95, 196, 61, 61, 38, 93, 61, 253, 244, 10, 190, 128, 67, 117, 61, 157, 180, 46, 62, 147, 255, 13, 62, 39, 84, 226, 59, 108, 200, 246, 61, 194, 240, 164, 61, 56, 197, 40, 190, 198, 49, 68, 61, 71, 154, 3, 187, 29, 91, 38, 190, 183, 143, 161, 61, 134, 213, 15, 61, 72, 171, 224, 61, 71, 251, 200, 188, 56, 55, 200, 189, 117, 4, 238, 189, 56, 152, 168, 61, 252, 31, 255, 61, 49, 218, 73, 189, 133, 119, 247, 61, 145, 14, 77, 61, 157, 83, 89, 189, 116, 33, 181, 189, 224, 31, 242, 189, 91, 229, 15, 189, 117, 49, 35, 188, 198, 10, 52, 190, 91, 109, 64, 189, 123, 230, 196, 189, 93, 31, 7, 190, 124, 39, 129, 61, 90, 219, 48, 189, 32, 64, 29, 62, 64, 232, 213, 60, 9, 3, 205, 61, 192, 204, 249, 189, 50, 239, 184, 189, 130, 40, 8, 62, 180, 234, 11, 189, 220, 61, 93, 61, 76, 39, 226, 189, 216, 253, 11, 190, 109, 84, 75, 61, 25, 152, 140, 189, 179, 182, 22, 190, 203, 204, 11, 62, 225, 91, 74, 188, 83, 152, 66, 189, 14, 55, 28, 190, 62, 23, 249, 186, 58, 154, 246, 189, 250, 131, 101, 188, 139, 175, 43, 62, 237, 192, 146, 61, 93, 107, 12, 62, 114, 188, 202, 189, 9, 230, 115, 61, 188, 192, 2, 190, 85, 144, 50, 60, 185, 59, 8, 61, 149, 175, 11, 61, 15, 157, 113, 61, 57, 126, 44, 61, 94, 195, 230, 188, 219, 93, 11, 189, 42, 73, 39, 190, 121, 223, 159, 60, 159, 237, 197, 189, 198, 26, 168, 189, 35, 245, 254, 59, 154, 196, 54, 189, 232, 164, 117, 189, 174, 201, 19, 61, 222, 149, 142, 61, 184, 102, 3, 190, 76, 65, 198, 188, 76, 148, 36, 190, 77, 69, 217, 189, 197, 163, 146, 189, 122, 110, 185, 61, 118, 171, 110, 61, 21, 226, 129, 188, 224, 172, 217, 61, 70, 4, 19, 190, 120, 56, 146, 189, 244, 203, 173, 187, 235, 115, 62, 189, 198, 161, 1, 190, 113, 10, 200, 60, 210, 59, 132, 189, 185, 243, 0, 190, 123, 136, 5, 190, 62, 80, 89, 188, 217, 38, 44, 62, 184, 141, 106, 189, 163, 114, 132, 189, 144, 90, 236, 189, 166, 241, 90, 189, 75, 138, 234, 187, 105, 90, 183, 189, 25, 189, 225, 60, 120, 181, 175, 188, 138, 5, 9, 62, 200, 89, 172, 187, 53, 198, 66, 188, 68, 18, 57, 189, 141, 17, 14, 61, 87, 115, 130, 189, 136, 109, 62, 60, 15, 231, 46, 190, 77, 141, 38, 62, 106, 53, 48, 189, 108, 57, 122, 188, 235, 34, 155, 187, 141, 88, 175, 188, 168, 151, 47, 62, 42, 212, 175, 188, 36, 125, 229, 189, 30, 42, 141, 61, 13, 119, 249, 189, 193, 175, 47, 190, 223, 231, 188, 60, 187, 200, 145, 61, 150, 181, 40, 189, 187, 73, 46, 187, 42, 209, 24, 190, 97, 127, 187, 189, 187, 51, 46, 189, 217, 77, 177, 61, 177, 21, 48, 190, 109, 2, 24, 190, 50, 78, 167, 61, 179, 44, 27, 62, 238, 239, 213, 189, 186, 251, 121, 61, 60, 175, 186, 61, 109, 93, 179, 61, 0, 173, 252, 61, 90, 205, 138, 59, 227, 190, 3, 62, 218, 58, 167, 60, 29, 163, 23, 62, 76, 106, 47, 62, 57, 181, 245, 61, 230, 118, 199, 61, 246, 43, 30, 189, 130, 225, 209, 61, 82, 74, 236, 189, 241, 170, 32, 62, 221, 159, 207, 189, 33, 204, 215, 189, 63, 27, 206, 186, 247, 77, 180, 61, 76, 44, 101, 61, 60, 109, 190, 189, 209, 19, 31, 189, 251, 67, 160, 189, 90, 39, 245, 187, 94, 3, 253, 61, 134, 182, 99, 189, 207, 121, 150, 61, 212, 37, 155, 189, 54, 247, 165, 189, 231, 6, 239, 189, 90, 10, 145, 189, 232, 199, 8, 62, 177, 172, 138, 189, 136, 31, 74, 61, 27, 148, 143, 189, 24, 40, 225, 61, 49, 11, 179, 61, 59, 40, 27, 189, 170, 70, 200, 61, 97, 221, 195, 189, 99, 156, 243, 189, 35, 156, 16, 62, 179, 77, 186, 61, 225, 59, 18, 62, 52, 157, 254, 189, 35, 148, 66, 186, 111, 38, 230, 60, 1, 40, 39, 190, 0, 134, 197, 60, 150, 136, 151, 61, 25, 237, 243, 61, 131, 113, 236, 188, 188, 32, 167, 188, 58, 221, 122, 61, 70, 7, 46, 62, 84, 34, 110, 188, 30, 41, 190, 60, 189, 11, 47, 62, 136, 177, 138, 61, 144, 52, 216, 61, 39, 53, 43, 62, 116, 138, 71, 59, 76, 249, 188, 189, 122, 219, 11, 190, 192, 211, 6, 62, 31, 219, 31, 61, 111, 182, 185, 61, 70, 21, 225, 189, 38, 61, 38, 62, 134, 164, 248, 61, 229, 153, 15, 62, 201, 240, 26, 62, 225, 163, 104, 189, 170, 234, 8, 60, 229, 228, 185, 61, 251, 12, 15, 189, 34, 77, 158, 189, 135, 11, 27, 190, 181, 194, 26, 62, 148, 43, 47, 62, 121, 13, 71, 188, 137, 17, 38, 62, 111, 20, 29, 62, 65, 187, 90, 61, 79, 43, 33, 190, 27, 78, 67, 59, 187, 12, 241, 189, 90, 27, 92, 189, 126, 221, 46, 62, 7, 166, 140, 189, 210, 89, 232, 61, 16, 62, 172, 61, 85, 126, 10, 60, 145, 241, 114, 189, 202, 161, 32, 62, 124, 157, 156, 60, 203, 148, 128, 189, 194, 22, 25, 62, 81, 56, 46, 189, 113, 132, 84, 60, 43, 192, 13, 190, 188, 65, 45, 62, 244, 49, 71, 61, 72, 67, 130, 189, 203, 66, 13, 62, 61, 19, 155, 189, 224, 55, 37, 62, 67, 121, 84, 188, 31, 135, 46, 190, 243, 125, 79, 189, 200, 103, 9, 62, 144, 78, 144, 189, 208, 162, 18, 62, 172, 128, 227, 61, 211, 224, 215, 189, 110, 93, 44, 61, 54, 246, 28, 62, 109, 214, 238, 189, 12, 27, 141, 61, 70, 184, 209, 61, 106, 139, 189, 188, 216, 21, 4, 61, 77, 87, 125, 188, 181, 142, 163, 188, 41, 44, 28, 189, 23, 88, 50, 62, 196, 122, 222, 61, 196, 161, 29, 61, 25, 4, 33, 62, 64, 128, 43, 189, 243, 77, 19, 190, 113, 40, 252, 189, 2, 27, 48, 59, 15, 253, 187, 189, 88, 56, 47, 62, 74, 75, 203, 61, 170, 222, 156, 189, 122, 238, 144, 189, 19, 67, 9, 189, 242, 251, 79, 188, 132, 251, 36, 190, 243, 211, 207, 187, 12, 34, 115, 189, 190, 30, 178, 61, 183, 87, 36, 62, 220, 150, 227, 61, 51, 39, 207, 189, 135, 79, 1, 190, 94, 46, 192, 187, 126, 87, 143, 61, 212, 167, 139, 61, 90, 150, 5, 190, 159, 190, 33, 62, 35, 4, 213, 189, 82, 44, 34, 190, 47, 80, 17, 62, 143, 80, 6, 189, 146, 62, 118, 61, 172, 157, 68, 189, 118, 192, 37, 61, 62, 200, 229, 189, 178, 142, 11, 62, 6, 143, 214, 189, 1, 184, 182, 189, 59, 55, 142, 189, 225, 160, 162, 188, 25, 17, 205, 61, 182, 228, 201, 188, 67, 154, 28, 62, 138, 29, 161, 186, 42, 248, 28, 190, 94, 32, 12, 188, 222, 191, 27, 62, 157, 16, 14, 62, 227, 211, 41, 61, 217, 86, 150, 187, 119, 5, 18, 189, 59, 150, 220, 61, 6, 179, 126, 61, 255, 232, 98, 187, 172, 151, 19, 62, 184, 9, 205, 189, 223, 239, 188, 189, 246, 139, 41, 62, 110, 164, 10, 189, 172, 2, 160, 188, 26, 242, 43, 62, 147, 203, 197, 61, 7, 160, 82, 61, 150, 187, 43, 62, 75, 40, 12, 62, 239, 42, 32, 190, 188, 215, 52, 62, 169, 55, 217, 61, 170, 34, 67, 188, 75, 180, 126, 189, 169, 166, 138, 188, 25, 191, 24, 62, 14, 32, 195, 187, 22, 30, 212, 188, 171, 179, 20, 61, 117, 151, 141, 189, 220, 220, 27, 62, 21, 141, 253, 189, 202, 72, 238, 189, 221, 14, 88, 60, 102, 209, 33, 190, 87, 174, 31, 189, 172, 60, 164, 189, 184, 170, 148, 189, 70, 190, 146, 61, 139, 50, 85, 61, 199, 59, 237, 61, 230, 26, 27, 190, 88, 155, 44, 190, 3, 225, 83, 60, 5, 178, 176, 189, 238, 38, 11, 190, 212, 53, 36, 61, 231, 58, 150, 189, 225, 235, 237, 188, 171, 72, 4, 62, 125, 150, 119, 60, 149, 172, 3, 62, 190, 187, 189, 189, 198, 154, 197, 187, 52, 16, 239, 61, 230, 5, 125, 60, 145, 103, 66, 61, 149, 12, 160, 61, 80, 130, 251, 185, 89, 197, 141, 61, 226, 205, 194, 189, 214, 39, 203, 61, 6, 7, 28, 190, 128, 65, 214, 189, 217, 125, 161, 189, 66, 170, 45, 190, 147, 65, 28, 190, 118, 37, 251, 60, 22, 165, 8, 62, 90, 47, 51, 62, 31, 55, 248, 61, 243, 184, 44, 62, 24, 144, 240, 61, 4, 81, 87, 189, 67, 195, 229, 60, 183, 107, 210, 61, 119, 50, 148, 61, 223, 245, 24, 189, 134, 228, 165, 189, 171, 235, 3, 62, 46, 178, 128, 61, 90, 6, 175, 61, 5, 54, 14, 190, 83, 211, 26, 61, 217, 82, 54, 189, 159, 171, 140, 187, 125, 94, 214, 188, 59, 58, 86, 60, 206, 155, 27, 190, 97, 8, 86, 61, 115, 71, 251, 59, 212, 114, 39, 190, 123, 216, 52, 62, 189, 215, 29, 62, 176, 202, 28, 190, 49, 227, 160, 61, 2, 99, 37, 62, 168, 94, 155, 189, 87, 104, 7, 62, 115, 52, 162, 60, 46, 100, 187, 61, 25, 85, 250, 189, 187, 69, 10, 62, 42, 56, 144, 60, 158, 160, 29, 189, 207, 40, 14, 190, 213, 37, 52, 190, 30, 0, 102, 188, 255, 167, 242, 189, 157, 227, 31, 190, 47, 196, 28, 62, 194, 143, 17, 190, 0, 224, 29, 190, 123, 126, 190, 188, 60, 142, 23, 190, 219, 6, 218, 61, 247, 171, 179, 189, 218, 32, 42, 190, 42, 15, 10, 61, 243, 212, 208, 61, 220, 164, 233, 61, 203, 77, 183, 61, 213, 28, 161, 189, 145, 106, 229, 61, 246, 125, 47, 61, 216, 39, 198, 189, 115, 8, 49, 62, 186, 223, 31, 62, 241, 216, 71, 189, 15, 83, 13, 190, 27, 24, 232, 61, 116, 193, 201, 61, 123, 83, 215, 60, 175, 43, 47, 190, 168, 200, 174, 59, 226, 242, 29, 190, 38, 82, 49, 190, 236, 61, 140, 61, 56, 100, 173, 61, 88, 198, 220, 189, 140, 68, 39, 62, 94, 174, 28, 61, 9, 107, 20, 62, 221, 49, 132, 60, 40, 90, 36, 61, 177, 38, 31, 62, 85, 86, 223, 61, 148, 236, 192, 59, 14, 86, 45, 189, 203, 33, 213, 61, 156, 226, 69, 61, 30, 214, 10, 190, 131, 78, 168, 189, 112, 149, 239, 61, 85, 246, 50, 61, 117, 225, 185, 56, 86, 54, 154, 61, 215, 167, 47, 190, 224, 189, 52, 190, 69, 175, 12, 62, 21, 163, 69, 60, 132, 57, 29, 62, 187, 133, 32, 61, 30, 115, 71, 187, 150, 141, 236, 61, 176, 13, 161, 189, 23, 142, 224, 189, 195, 140, 205, 189, 194, 187, 78, 189, 11, 226, 222, 189, 76, 23, 43, 190, 227, 138, 18, 62, 62, 39, 11, 188, 238, 157, 183, 61, 91, 99, 127, 60, 148, 1, 175, 186, 203, 196, 42, 190, 23, 150, 4, 62, 127, 251, 238, 60, 116, 70, 151, 189, 176, 217, 246, 189, 241, 133, 149, 61, 14, 20, 236, 189, 254, 18, 175, 61, 43, 117, 178, 189, 101, 29, 210, 189, 217, 95, 21, 189, 44, 48, 13, 62, 217, 254, 19, 62, 1, 144, 26, 62, 210, 105, 209, 61, 39, 229, 129, 189, 214, 171, 217, 188, 109, 135, 52, 189, 28, 127, 13, 62, 11, 128, 200, 189, 15, 5, 198, 60, 201, 129, 1, 61, 174, 47, 58, 60, 222, 118, 152, 61, 27, 212, 165, 188, 22, 170, 207, 189, 67, 232, 162, 189, 165, 61, 246, 189, 211, 101, 0, 62, 32, 142, 3, 190, 117, 97, 155, 189, 155, 211, 3, 62, 187, 114, 134, 189, 2, 16, 175, 61, 149, 232, 46, 62, 14, 29, 133, 189, 44, 146, 160, 61, 222, 50, 32, 61, 239, 76, 170, 61, 186, 95, 147, 188, 9, 47, 142, 189, 200, 179, 226, 189, 56, 101, 52, 189, 119, 166, 4, 62, 14, 180, 150, 60, 19, 26, 47, 190, 86, 240, 150, 61, 92, 36, 41, 190, 156, 105, 41, 189, 7, 166, 116, 189, 109, 74, 130, 188, 174, 106, 186, 188, 88, 62, 175, 61, 190, 107, 228, 189, 220, 149, 186, 187, 114, 144, 228, 61, 243, 210, 248, 61, 109, 190, 14, 190, 9, 99, 6, 62, 50, 81, 238, 189, 53, 56, 199, 61, 253, 111, 149, 61, 231, 143, 228, 189, 3, 101, 213, 189, 70, 154, 167, 189, 36, 146, 236, 189, 42, 192, 137, 189, 92, 4, 22, 190, 87, 18, 198, 189, 82, 202, 30, 62, 73, 105, 32, 190, 12, 117, 139, 61, 102, 178, 26, 60, 247, 32, 96, 189, 131, 208, 140, 189, 4, 194, 41, 62, 119, 181, 212, 189, 207, 236, 227, 189, 254, 124, 50, 62, 164, 62, 140, 185, 146, 131, 205, 61, 51, 212, 223, 61, 222, 162, 22, 62, 61, 245, 205, 59, 190, 206, 152, 189, 72, 238, 1, 61, 31, 68, 140, 188, 41, 164, 143, 60, 35, 22, 40, 190, 224, 35, 38, 189, 203, 109, 137, 189, 199, 60, 158, 60, 90, 246, 170, 61, 14, 225, 224, 61, 217, 23, 140, 189, 125, 206, 153, 61, 224, 226, 14, 61, 54, 152, 224, 61, 115, 10, 146, 61, 45, 115, 100, 189, 171, 176, 249, 189, 155, 152, 210, 61, 149, 230, 198, 61, 47, 172, 140, 189, 249, 220, 171, 189, 158, 7, 160, 189, 67, 153, 35, 62, 251, 123, 161, 189, 35, 228, 224, 189, 34, 75, 248, 188, 168, 39, 128, 61, 65, 165, 230, 189, 53, 203, 250, 61, 234, 218, 236, 61, 46, 24, 35, 60, 127, 84, 152, 61, 210, 240, 123, 189, 177, 16, 18, 60, 138, 71, 144, 189, 237, 238, 114, 60, 233, 157, 75, 189, 238, 109, 70, 189, 96, 91, 193, 60, 25, 124, 53, 60, 179, 34, 28, 190, 173, 139, 227, 189, 5, 112, 217, 61, 176, 77, 220, 60, 151, 123, 16, 62, 193, 164, 0, 62, 191, 178, 138, 60, 180, 74, 86, 189, 187, 47, 40, 188, 45, 41, 175, 59, 118, 36, 32, 61, 218, 119, 23, 190, 100, 82, 2, 62, 127, 192, 110, 188, 24, 180, 197, 61, 158, 179, 187, 59, 73, 232, 219, 61, 63, 247, 17, 62, 249, 197, 146, 61, 52, 155, 96, 189, 124, 251, 190, 61, 247, 245, 57, 59, 227, 247, 26, 190, 5, 113, 56, 189, 24, 178, 19, 62, 236, 233, 49, 190, 17, 127, 238, 189, 120, 19, 40, 61, 225, 146, 247, 189, 76, 84, 22, 62, 220, 233, 166, 189, 57, 216, 239, 189, 112, 11, 130, 189, 22, 84, 36, 62, 105, 109, 249, 189, 38, 218, 12, 62, 184, 34, 138, 189, 156, 126, 253, 189, 169, 21, 197, 187, 226, 118, 244, 60, 183, 149, 15, 190, 148, 51, 239, 61, 187, 36, 182, 61, 239, 148, 99, 189, 136, 35, 195, 189, 12, 177, 47, 190, 148, 164, 116, 189, 0, 28, 201, 189, 87, 236, 208, 188, 100, 161, 2, 190, 16, 107, 206, 189, 155, 98, 216, 189, 121, 193, 254, 61, 241, 255, 210, 61, 25, 204, 51, 190, 62, 71, 168, 61, 227, 208, 107, 59, 148, 157, 151, 60, 137, 212, 137, 189, 90, 221, 188, 189, 203, 202, 85, 61, 210, 237, 166, 61, 120, 128, 224, 189, 79, 202, 141, 188, 237, 80, 148, 61, 57, 26, 249, 189, 13, 180, 197, 188, 19, 19, 183, 189, 173, 94, 36, 190, 49, 90, 25, 62, 200, 14, 28, 61, 74, 5, 127, 61, 96, 122, 202, 189, 62, 76, 102, 61, 97, 181, 150, 189, 75, 95, 135, 189, 246, 80, 150, 189, 230, 204, 237, 188, 31, 103, 195, 60, 109, 82, 12, 189, 95, 10, 35, 62, 142, 254, 66, 189, 101, 147, 192, 188, 186, 85, 52, 190, 120, 43, 199, 61, 24, 222, 148, 60, 229, 240, 50, 62, 114, 4, 193, 59, 165, 1, 179, 59, 59, 71, 225, 189, 192, 159, 204, 188, 69, 134, 21, 190, 129, 162, 19, 190, 62, 86, 230, 61, 69, 103, 49, 62, 99, 183, 3, 190, 93, 159, 219, 61, 107, 203, 150, 189, 220, 54, 134, 189, 209, 148, 238, 189, 72, 31, 80, 61, 88, 10, 26, 62, 125, 50, 148, 60, 2, 219, 23, 188, 7, 112, 16, 62, 169, 132, 187, 61, 135, 42, 17, 190, 150, 250, 226, 188, 107, 13, 69, 189, 132, 76, 140, 60, 217, 249, 75, 61, 139, 181, 220, 61, 207, 142, 169, 59, 0, 70, 207, 187, 190, 160, 219, 61, 86, 45, 241, 188, 112, 73, 43, 62, 122, 70, 226, 189, 6, 0, 204, 189, 12, 24, 119, 189, 15, 17, 200, 61, 89, 116, 62, 189, 82, 164, 8, 190, 9, 173, 0, 190, 44, 217, 34, 62, 95, 245, 163, 188, 245, 122, 29, 190, 74, 107, 186, 61, 9, 88, 252, 60, 171, 146, 236, 61, 110, 42, 172, 61, 46, 53, 176, 61, 110, 79, 187, 60, 107, 52, 163, 188, 174, 23, 178, 188, 168, 43, 36, 190, 48, 37, 235, 189, 210, 136, 16, 189, 167, 188, 30, 190, 108, 160, 228, 188, 253, 149, 218, 61, 175, 52, 195, 189, 83, 97, 106, 188, 136, 4, 120, 188, 176, 183, 12, 62, 5, 62, 31, 190, 168, 14, 39, 62, 52, 146, 242, 61, 149, 132, 40, 62, 204, 116, 80, 61, 50, 250, 130, 189, 153, 202, 140, 189, 23, 207, 236, 58, 186, 185, 36, 189, 11, 72, 165, 61, 39, 63, 34, 62, 124, 68, 159, 59, 70, 3, 155, 60, 116, 88, 44, 190, 168, 95, 112, 61, 48, 123, 195, 189, 39, 209, 28, 190, 205, 174, 145, 60, 165, 172, 10, 62, 150, 11, 209, 189, 74, 113, 200, 189, 17, 14, 19, 62, 102, 166, 170, 189, 25, 97, 176, 188, 253, 187, 48, 62, 136, 128, 25, 190, 40, 214, 174, 188, 104, 129, 31, 62, 26, 52, 175, 189, 144, 242, 176, 61, 66, 3, 171, 61, 246, 201, 45, 62, 113, 245, 102, 189, 27, 96, 39, 190, 98, 151, 24, 189, 55, 58, 158, 60, 6, 247, 128, 61, 6, 84, 179, 59, 231, 84, 98, 61, 221, 74, 173, 189, 109, 126, 15, 190, 71, 116, 33, 190, 216, 80, 162, 189, 90, 3, 13, 62, 186, 10, 204, 61, 29, 230, 75, 61, 43, 203, 20, 62, 16, 57, 45, 62, 127, 117, 29, 190, 112, 91, 179, 61, 2, 132, 116, 61, 56, 219, 143, 189, 85, 96, 70, 189, 146, 24, 229, 189, 157, 25, 227, 61, 49, 138, 1, 62, 117, 35, 250, 189, 163, 155, 41, 189, 211, 26, 30, 190, 146, 186, 193, 61, 40, 14, 176, 189, 145, 100, 43, 62, 49, 43, 14, 190, 116, 200, 204, 60, 191, 55, 243, 61, 252, 19, 44, 62, 122, 0, 23, 62, 210, 220, 52, 187, 118, 35, 138, 189, 14, 90, 176, 189, 223, 215, 19, 190, 157, 251, 1, 190, 172, 70, 161, 189, 88, 177, 44, 190, 6, 172, 135, 60, 186, 142, 210, 61, 44, 44, 9, 62, 187, 85, 92, 187, 236, 127, 128, 61, 88, 42, 228, 189, 126, 104, 249, 188, 79, 15, 211, 189, 86, 108, 88, 188, 135, 62, 170, 60, 35, 201, 1, 189, 125, 159, 193, 189, 131, 65, 218, 189, 34, 40, 205, 188, 5, 78, 51, 62, 70, 119, 10, 189, 20, 234, 65, 187, 95, 143, 247, 61, 44, 31, 193, 61, 69, 151, 241, 189, 143, 124, 207, 61, 139, 79, 12, 61, 170, 116, 23, 62, 146, 222, 179, 60, 158, 79, 170, 189, 7, 90, 139, 189, 191, 78, 25, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {107, 89, 67, 58, 80, 249, 27, 189, 201, 195, 14, 60, 41, 162, 32, 190, 10, 221, 130, 189, 104, 140, 21, 190, 17, 169, 23, 61, 255, 108, 208, 60, 230, 25, 139, 59, 205, 157, 29, 190, 135, 1, 233, 61, 243, 124, 206, 189, 42, 75, 225, 61, 76, 156, 33, 189, 250, 146, 52, 62, 29, 119, 30, 61, 97, 98, 42, 189, 68, 10, 4, 189, 109, 78, 10, 190, 42, 87, 191, 61, 159, 18, 52, 189, 93, 93, 133, 189, 114, 83, 248, 189, 166, 59, 27, 62, 131, 240, 152, 189, 64, 99, 32, 189, 197, 183, 0, 190, 206, 91, 69, 189, 30, 184, 154, 189, 80, 27, 219, 61, 101, 60, 47, 62, 221, 1, 23, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 40, 163, 189, 118, 113, 111, 189, 61, 176, 199, 60, 242, 195, 164, 189, 37, 62, 42, 190, 94, 224, 156, 189, 5, 91, 0, 190, 13, 103, 233, 61, 111, 17, 254, 189, 204, 159, 238, 189, 7, 196, 86, 61, 220, 149, 42, 190, 161, 11, 50, 189, 238, 135, 2, 190, 63, 162, 240, 61, 179, 233, 51, 62, 65, 31, 68, 61, 6, 77, 96, 61, 88, 254, 138, 61, 89, 126, 190, 61, 61, 166, 244, 189, 189, 98, 213, 61, 155, 189, 17, 60, 67, 16, 76, 189, 66, 231, 232, 189, 105, 224, 178, 188, 203, 152, 166, 186, 254, 172, 24, 190, 209, 47, 217, 61, 99, 89, 184, 61, 157, 253, 107, 60, 234, 29, 206, 189, 218, 1, 142, 61, 215, 153, 156, 61, 44, 84, 107, 188, 5, 80, 148, 61, 48, 62, 26, 190, 6, 233, 35, 190, 117, 130, 174, 189, 27, 86, 254, 61, 167, 218, 32, 190, 230, 87, 4, 190, 17, 155, 141, 61, 107, 42, 21, 189, 238, 33, 136, 189, 67, 253, 81, 61, 128, 62, 9, 61, 32, 188, 120, 189, 153, 2, 168, 61, 141, 184, 154, 189, 128, 178, 232, 189, 134, 72, 201, 189, 91, 234, 29, 189, 52, 80, 191, 61, 17, 251, 224, 189, 164, 145, 110, 189, 252, 78, 156, 61, 71, 193, 121, 61, 143, 233, 13, 190, 187, 135, 30, 188, 42, 223, 60, 60, 107, 76, 77, 58, 122, 0, 166, 61, 15, 117, 118, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 194, 59, 60, 186, 247, 219, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {255, 98, 156, 62, 6, 135, 86, 191, 224, 96, 58, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {221, 97, 231, 61, 252, 111, 3, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0046/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}