// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 211, 176, 190, 66, 246, 149, 60, 64, 48, 200, 60, 123, 211, 219, 190, 76, 160, 244, 63, 74, 217, 26, 63, 93, 136, 4, 63, 36, 253, 130, 191, 47, 160, 232, 62, 161, 134, 245, 61, 97, 181, 62, 63, 121, 170, 53, 63, 77, 252, 170, 61, 52, 124, 199, 191, 87, 107, 185, 190, 126, 104, 193, 190, 236, 181, 187, 63, 159, 233, 155, 62, 97, 99, 3, 62, 83, 241, 159, 62, 88, 228, 182, 62, 153, 173, 1, 63, 168, 125, 134, 63, 246, 51, 102, 62, 54, 5, 233, 190, 74, 50, 156, 62, 183, 0, 227, 190, 105, 212, 175, 190, 58, 20, 246, 190, 220, 42, 132, 190, 135, 254, 136, 190, 8, 212, 28, 63, 2, 81, 238, 190, 138, 131, 0, 191, 140, 145, 225, 62, 11, 140, 249, 60, 57, 140, 51, 189, 232, 184, 108, 191, 103, 202, 131, 188, 5, 152, 214, 62, 125, 166, 170, 63, 163, 203, 148, 62, 189, 58, 42, 191, 142, 241, 1, 63, 204, 57, 140, 62, 104, 229, 137, 62, 139, 47, 129, 190, 121, 234, 10, 63, 128, 66, 54, 191, 111, 67, 16, 191, 168, 241, 40, 190, 137, 133, 148, 188, 18, 4, 174, 189, 229, 232, 235, 190, 87, 0, 125, 62, 180, 105, 134, 63, 191, 146, 33, 63, 143, 214, 7, 191, 98, 108, 147, 189, 171, 208, 62, 191, 15, 206, 192, 62, 150, 166, 206, 62, 56, 97, 251, 190, 129, 91, 139, 190, 79, 21, 210, 190, 219, 230, 205, 189, 154, 165, 133, 62, 104, 57, 23, 63, 243, 134, 62, 190, 36, 220, 213, 189, 168, 102, 168, 63, 148, 170, 198, 189, 57, 205, 141, 61, 224, 239, 34, 62, 245, 38, 40, 57, 132, 250, 191, 62, 100, 58, 75, 188, 82, 242, 244, 190, 129, 149, 67, 63, 50, 55, 70, 63, 3, 21, 179, 61, 150, 180, 187, 190, 67, 225, 20, 191, 109, 172, 68, 191, 210, 250, 73, 63, 212, 154, 153, 190, 32, 98, 103, 62, 229, 108, 238, 62, 172, 45, 9, 62, 105, 248, 11, 191, 203, 185, 94, 63, 173, 81, 129, 191, 203, 50, 157, 190, 24, 252, 151, 189, 160, 29, 219, 191, 67, 125, 164, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 88, 25, 191, 200, 36, 65, 190, 161, 80, 167, 62, 36, 167, 14, 190, 153, 163, 61, 189, 28, 100, 64, 190, 187, 238, 181, 62, 50, 93, 220, 61, 34, 118, 203, 190, 52, 137, 150, 62, 99, 62, 32, 190, 52, 10, 230, 62, 151, 6, 193, 62, 51, 80, 242, 189, 23, 249, 33, 63, 94, 178, 183, 61, 54, 68, 206, 190, 208, 156, 92, 190, 217, 32, 160, 190, 24, 69, 82, 60, 186, 58, 217, 62, 56, 91, 119, 62, 99, 38, 47, 63, 45, 71, 212, 189, 59, 137, 52, 190, 7, 116, 187, 189, 46, 161, 137, 61, 113, 33, 237, 189, 108, 241, 208, 190, 115, 240, 178, 62, 71, 179, 171, 190, 163, 236, 129, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 209, 25, 62, 235, 23, 205, 190, 230, 70, 220, 190, 79, 85, 137, 62, 211, 17, 178, 190, 12, 68, 113, 191, 189, 155, 150, 190, 23, 69, 180, 62, 94, 232, 191, 62, 180, 146, 157, 61, 69, 253, 106, 62, 240, 48, 194, 62, 108, 148, 202, 60, 2, 50, 84, 62, 126, 170, 8, 190, 179, 44, 212, 186, 19, 112, 4, 61, 194, 1, 222, 189, 119, 123, 250, 62, 174, 80, 45, 62, 205, 215, 86, 62, 238, 200, 12, 62, 11, 3, 253, 59, 71, 94, 53, 62, 140, 199, 34, 189, 31, 24, 18, 191, 34, 205, 19, 63, 192, 247, 132, 61, 40, 78, 81, 62, 185, 195, 216, 190, 180, 106, 155, 191, 153, 152, 253, 189, 222, 110, 146, 189, 241, 6, 206, 188, 143, 246, 82, 189, 11, 4, 184, 188, 124, 33, 26, 61, 150, 159, 20, 62, 107, 50, 134, 61, 121, 111, 36, 190, 249, 126, 7, 190, 6, 160, 123, 62, 113, 196, 187, 189, 6, 180, 129, 62, 24, 161, 190, 61, 114, 153, 91, 190, 66, 87, 128, 62, 220, 143, 202, 189, 209, 219, 185, 62, 179, 51, 230, 188, 230, 186, 57, 189, 148, 126, 162, 189, 32, 92, 162, 190, 211, 89, 144, 62, 247, 96, 4, 62, 254, 58, 163, 188, 1, 154, 31, 62, 152, 94, 171, 189, 134, 127, 179, 189, 131, 174, 192, 61, 227, 207, 30, 190, 148, 74, 140, 188, 242, 238, 8, 191, 138, 93, 168, 62, 36, 74, 163, 61, 48, 163, 143, 189, 243, 155, 153, 62, 239, 79, 27, 61, 140, 181, 50, 189, 207, 42, 158, 189, 11, 197, 4, 190, 219, 173, 151, 190, 169, 198, 132, 190, 190, 199, 74, 190, 173, 65, 41, 190, 141, 83, 164, 190, 125, 239, 66, 62, 250, 14, 135, 190, 148, 21, 1, 61, 20, 249, 222, 189, 36, 35, 185, 190, 135, 223, 13, 62, 112, 140, 120, 190, 167, 202, 15, 189, 243, 228, 203, 60, 94, 251, 128, 60, 117, 71, 232, 189, 22, 217, 152, 188, 128, 218, 15, 62, 127, 98, 149, 62, 78, 138, 15, 62, 208, 114, 22, 189, 41, 92, 228, 57, 13, 114, 95, 62, 62, 70, 224, 62, 175, 183, 146, 190, 122, 158, 46, 189, 249, 234, 22, 190, 193, 151, 201, 188, 126, 221, 247, 61, 57, 113, 28, 189, 229, 234, 241, 188, 60, 101, 101, 190, 79, 139, 247, 188, 187, 129, 192, 190, 190, 237, 98, 61, 153, 213, 174, 189, 64, 166, 152, 190, 15, 106, 228, 189, 54, 149, 148, 187, 146, 216, 150, 61, 20, 135, 237, 61, 224, 225, 116, 190, 94, 79, 10, 62, 193, 26, 13, 62, 248, 132, 105, 190, 148, 44, 45, 189, 228, 242, 162, 61, 2, 199, 175, 190, 99, 182, 112, 190, 41, 62, 92, 189, 162, 180, 164, 61, 163, 241, 50, 190, 251, 242, 142, 189, 70, 235, 110, 190, 74, 251, 59, 62, 149, 169, 163, 62, 153, 194, 164, 189, 140, 167, 34, 62, 81, 81, 97, 189, 107, 28, 125, 61, 42, 86, 218, 61, 72, 86, 174, 59, 148, 24, 46, 190, 82, 174, 67, 190, 21, 183, 140, 61, 155, 246, 192, 189, 32, 195, 133, 61, 119, 157, 118, 57, 225, 151, 128, 189, 241, 11, 101, 56, 33, 233, 145, 188, 215, 207, 78, 189, 134, 134, 41, 189, 92, 88, 198, 61, 143, 209, 209, 61, 242, 135, 253, 189, 196, 10, 29, 190, 136, 82, 72, 188, 195, 83, 72, 190, 190, 169, 251, 189, 73, 152, 42, 188, 250, 33, 29, 60, 243, 211, 1, 189, 148, 198, 13, 61, 204, 110, 206, 189, 57, 196, 207, 189, 15, 89, 5, 62, 197, 200, 10, 189, 109, 244, 87, 189, 159, 220, 39, 62, 3, 86, 123, 62, 94, 59, 181, 189, 227, 10, 90, 61, 196, 206, 134, 61, 39, 9, 81, 189, 202, 116, 73, 62, 110, 6, 120, 61, 80, 128, 52, 189, 154, 149, 17, 62, 214, 135, 78, 60, 96, 213, 225, 61, 230, 21, 104, 62, 193, 65, 98, 62, 193, 56, 170, 61, 38, 206, 210, 60, 114, 205, 115, 62, 253, 229, 82, 60, 30, 205, 119, 190, 82, 31, 130, 61, 18, 47, 94, 61, 73, 89, 228, 189, 113, 142, 43, 62, 106, 158, 28, 62, 172, 126, 220, 61, 84, 88, 111, 190, 162, 62, 183, 189, 114, 11, 178, 189, 191, 134, 141, 59, 150, 12, 17, 61, 99, 83, 255, 190, 38, 254, 62, 62, 22, 193, 75, 61, 25, 36, 163, 189, 47, 72, 88, 190, 254, 87, 23, 191, 191, 160, 135, 190, 0, 36, 137, 62, 225, 107, 12, 190, 119, 209, 163, 190, 114, 132, 28, 62, 128, 102, 140, 190, 11, 135, 88, 62, 238, 148, 204, 62, 30, 123, 138, 188, 94, 125, 175, 189, 121, 27, 193, 62, 23, 143, 132, 190, 89, 208, 92, 191, 217, 125, 116, 62, 224, 122, 2, 191, 74, 102, 28, 62, 148, 6, 201, 190, 47, 143, 142, 190, 151, 183, 31, 62, 191, 57, 210, 62, 224, 173, 23, 190, 110, 3, 131, 190, 11, 85, 21, 191, 190, 159, 147, 190, 141, 159, 239, 189, 182, 141, 183, 190, 62, 236, 133, 62, 212, 44, 129, 189, 139, 175, 43, 62, 145, 23, 126, 62, 207, 9, 132, 62, 254, 15, 252, 189, 41, 26, 72, 189, 209, 93, 225, 62, 110, 226, 32, 62, 39, 63, 95, 190, 29, 94, 26, 191, 121, 212, 221, 189, 35, 161, 9, 191, 171, 51, 179, 62, 208, 119, 106, 61, 178, 21, 224, 190, 182, 32, 191, 62, 30, 209, 16, 190, 129, 87, 219, 188, 66, 113, 219, 62, 88, 181, 44, 190, 72, 54, 229, 190, 177, 112, 221, 190, 57, 143, 145, 189, 245, 189, 53, 190, 228, 251, 167, 190, 76, 148, 36, 190, 42, 84, 100, 62, 67, 3, 162, 61, 181, 117, 233, 190, 235, 83, 143, 188, 6, 233, 183, 61, 138, 142, 58, 188, 249, 214, 31, 191, 120, 56, 146, 189, 122, 184, 208, 191, 83, 83, 46, 191, 139, 251, 40, 62, 227, 251, 224, 61, 7, 163, 159, 191, 66, 55, 204, 190, 114, 61, 43, 62, 231, 2, 30, 62, 166, 220, 151, 62, 127, 83, 4, 62, 63, 21, 188, 62, 137, 30, 166, 189, 98, 230, 157, 62, 85, 198, 41, 190, 61, 121, 2, 190, 130, 57, 77, 62, 67, 255, 253, 189, 185, 45, 68, 63, 167, 189, 136, 61, 113, 188, 18, 62, 72, 62, 138, 61, 20, 161, 123, 62, 236, 9, 28, 61, 8, 35, 44, 60, 29, 78, 30, 191, 91, 162, 38, 63, 244, 168, 152, 189, 211, 22, 220, 189, 242, 174, 124, 190, 137, 70, 131, 191, 4, 196, 75, 62, 42, 212, 175, 188, 141, 242, 68, 191, 250, 217, 159, 62, 15, 12, 46, 191, 73, 118, 140, 191, 99, 236, 163, 191, 139, 57, 84, 62, 228, 226, 129, 62, 44, 204, 203, 187, 197, 124, 71, 190, 112, 234, 173, 189, 151, 247, 29, 62, 176, 51, 221, 61, 52, 212, 179, 189, 21, 41, 134, 191, 23, 53, 27, 62, 95, 0, 36, 62, 169, 232, 26, 190, 18, 237, 164, 190, 212, 15, 245, 60, 81, 34, 60, 62, 96, 238, 225, 61, 63, 175, 51, 62, 63, 252, 87, 62, 218, 58, 167, 60, 1, 34, 63, 62, 220, 89, 22, 63, 79, 112, 45, 61, 60, 208, 148, 62, 45, 59, 111, 61, 9, 58, 29, 191, 38, 50, 120, 191, 241, 170, 32, 62, 151, 197, 97, 62, 181, 241, 203, 187, 144, 207, 4, 61, 33, 239, 130, 190, 63, 94, 221, 62, 106, 142, 222, 188, 135, 249, 205, 190, 5, 215, 25, 191, 127, 241, 169, 189, 20, 164, 14, 190, 153, 128, 0, 188, 171, 75, 156, 188, 67, 206, 19, 191, 155, 162, 216, 61, 180, 77, 2, 190, 42, 180, 89, 190, 221, 123, 129, 62, 157, 246, 74, 190, 206, 122, 33, 190, 34, 167, 190, 189, 37, 111, 77, 61, 144, 63, 246, 61, 154, 141, 1, 191, 35, 62, 200, 61, 96, 53, 142, 62, 120, 238, 151, 58, 167, 170, 68, 189, 131, 69, 77, 62, 132, 32, 244, 62, 107, 76, 134, 62, 48, 28, 129, 191, 88, 128, 192, 60, 207, 194, 150, 190, 2, 114, 190, 188, 209, 73, 211, 59, 253, 24, 136, 62, 115, 2, 67, 191, 142, 147, 232, 188, 7, 83, 104, 62, 167, 55, 6, 63, 65, 163, 88, 189, 195, 99, 236, 61, 74, 84, 207, 60, 188, 31, 18, 190, 72, 98, 96, 62, 238, 109, 252, 190, 247, 86, 191, 61, 225, 175, 203, 188, 192, 101, 108, 190, 21, 3, 253, 61, 95, 163, 96, 62, 187, 171, 121, 62, 206, 210, 7, 190, 176, 146, 77, 62, 91, 229, 42, 190, 52, 226, 13, 62, 75, 176, 19, 61, 189, 99, 151, 61, 34, 39, 212, 61, 84, 84, 119, 62, 83, 201, 127, 190, 93, 133, 1, 191, 69, 3, 180, 61, 179, 38, 24, 62, 145, 205, 164, 62, 7, 155, 30, 189, 90, 143, 205, 61, 38, 170, 228, 61, 130, 129, 156, 60, 161, 145, 104, 189, 64, 141, 187, 61, 219, 126, 2, 190, 96, 222, 223, 188, 207, 29, 21, 62, 251, 91, 19, 62, 144, 154, 68, 62, 34, 133, 244, 61, 85, 27, 185, 189, 110, 216, 88, 189, 87, 153, 144, 62, 118, 77, 42, 189, 25, 217, 13, 190, 41, 204, 43, 62, 45, 251, 207, 59, 7, 206, 38, 61, 178, 9, 154, 189, 255, 53, 136, 62, 202, 98, 67, 61, 253, 177, 73, 190, 128, 110, 77, 62, 143, 7, 54, 189, 251, 223, 26, 62, 134, 222, 197, 189, 23, 164, 25, 191, 249, 95, 171, 187, 244, 129, 7, 62, 167, 255, 177, 188, 68, 144, 12, 62, 49, 100, 42, 62, 14, 8, 163, 62, 103, 49, 22, 190, 65, 166, 20, 62, 115, 135, 241, 189, 82, 61, 7, 63, 134, 75, 76, 62, 227, 41, 69, 62, 168, 154, 169, 61, 138, 92, 50, 60, 34, 234, 103, 60, 75, 207, 184, 189, 195, 204, 125, 62, 40, 123, 36, 62, 108, 144, 215, 186, 62, 102, 53, 62, 16, 178, 73, 62, 243, 38, 15, 62, 72, 216, 101, 60, 237, 28, 197, 61, 237, 130, 182, 190, 89, 113, 46, 62, 243, 13, 4, 189, 233, 245, 30, 190, 251, 227, 127, 61, 220, 245, 151, 190, 47, 10, 86, 190, 76, 183, 215, 190, 251, 155, 255, 62, 198, 112, 101, 189, 113, 51, 152, 189, 75, 110, 48, 191, 49, 154, 1, 62, 19, 191, 153, 190, 40, 17, 161, 62, 177, 230, 223, 190, 123, 132, 24, 190, 114, 11, 100, 62, 60, 138, 89, 189, 60, 228, 166, 62, 164, 170, 6, 190, 69, 241, 176, 189, 98, 117, 147, 189, 72, 155, 102, 62, 148, 87, 153, 190, 113, 52, 96, 190, 141, 92, 155, 60, 139, 180, 30, 62, 211, 132, 143, 62, 71, 141, 18, 62, 239, 189, 81, 189, 142, 140, 51, 62, 6, 45, 154, 62, 92, 65, 207, 61, 134, 37, 191, 60, 125, 161, 65, 62, 191, 166, 214, 61, 110, 37, 16, 190, 41, 28, 152, 61, 121, 162, 222, 62, 97, 85, 248, 189, 49, 205, 49, 61, 47, 20, 120, 188, 195, 24, 207, 188, 154, 170, 59, 61, 19, 163, 177, 189, 43, 77, 88, 61, 237, 216, 30, 62, 200, 240, 101, 189, 25, 42, 8, 191, 136, 98, 232, 61, 14, 118, 104, 190, 2, 30, 190, 188, 37, 237, 29, 62, 80, 130, 39, 62, 227, 229, 29, 61, 103, 199, 30, 61, 81, 94, 86, 62, 99, 127, 132, 189, 0, 108, 75, 62, 38, 241, 190, 190, 38, 117, 100, 190, 112, 21, 34, 190, 30, 146, 114, 62, 147, 255, 16, 63, 172, 244, 186, 187, 106, 13, 179, 190, 86, 64, 88, 61, 49, 149, 41, 191, 118, 172, 252, 189, 116, 190, 72, 190, 159, 64, 126, 191, 19, 49, 112, 190, 179, 255, 30, 190, 254, 217, 160, 189, 172, 55, 46, 61, 55, 43, 67, 190, 31, 83, 29, 191, 53, 223, 141, 62, 173, 196, 130, 62, 199, 120, 161, 190, 217, 31, 225, 190, 105, 43, 80, 190, 158, 158, 66, 190, 50, 201, 81, 62, 101, 104, 24, 62, 57, 62, 164, 190, 131, 251, 147, 62, 90, 208, 170, 60, 128, 138, 68, 62, 17, 203, 139, 62, 225, 190, 75, 190, 190, 50, 22, 191, 182, 151, 18, 190, 0, 228, 151, 190, 241, 238, 208, 62, 55, 231, 160, 62, 80, 130, 251, 185, 94, 192, 48, 188, 39, 46, 163, 61, 10, 83, 56, 191, 51, 38, 56, 191, 109, 252, 7, 190, 130, 240, 24, 191, 147, 11, 176, 191, 72, 31, 29, 190, 158, 243, 8, 189, 100, 38, 61, 61, 42, 241, 152, 188, 49, 216, 165, 62, 75, 161, 154, 62, 108, 62, 199, 61, 111, 151, 162, 187, 124, 102, 47, 191, 104, 174, 136, 62, 3, 147, 12, 191, 183, 117, 152, 188, 74, 82, 29, 62, 222, 111, 83, 62, 67, 64, 11, 61, 165, 101, 133, 189, 91, 35, 47, 61, 86, 204, 91, 189, 118, 39, 74, 190, 53, 109, 255, 189, 33, 150, 235, 188, 21, 33, 96, 62, 127, 0, 220, 189, 231, 72, 17, 190, 210, 185, 235, 59, 13, 140, 139, 190, 57, 171, 71, 62, 116, 169, 5, 62, 54, 198, 21, 190, 187, 73, 138, 61, 127, 196, 103, 62, 12, 45, 207, 61, 87, 104, 7, 62, 100, 86, 109, 190, 12, 220, 178, 62, 226, 92, 84, 190, 52, 70, 150, 189, 32, 121, 67, 189, 141, 27, 141, 61, 34, 202, 175, 190, 95, 19, 37, 191, 233, 164, 80, 190, 206, 41, 165, 190, 253, 249, 0, 190, 46, 4, 156, 62, 195, 186, 14, 191, 192, 254, 148, 187, 124, 223, 146, 61, 51, 27, 135, 187, 50, 249, 218, 61, 144, 177, 14, 191, 249, 83, 3, 191, 139, 166, 12, 189, 8, 6, 188, 58, 249, 0, 239, 61, 220, 113, 112, 191, 213, 28, 161, 189, 85, 177, 12, 62, 60, 12, 49, 62, 108, 67, 34, 191, 236, 189, 12, 63, 232, 97, 148, 62, 46, 106, 217, 189, 158, 240, 14, 191, 35, 245, 230, 61, 35, 97, 143, 62, 27, 3, 199, 189, 98, 185, 144, 191, 196, 87, 249, 189, 109, 95, 133, 190, 168, 178, 150, 190, 235, 59, 51, 61, 126, 231, 96, 190, 204, 117, 246, 188, 199, 4, 173, 60, 44, 21, 81, 62, 59, 231, 176, 62, 66, 69, 41, 190, 176, 42, 181, 189, 13, 102, 38, 190, 189, 38, 56, 62, 201, 229, 68, 188, 59, 167, 163, 191, 58, 167, 41, 61, 8, 249, 9, 62, 215, 174, 69, 189, 224, 158, 99, 61, 175, 27, 157, 62, 206, 233, 48, 61, 65, 255, 2, 60, 167, 31, 23, 62, 195, 73, 80, 190, 50, 95, 16, 190, 229, 241, 129, 62, 216, 4, 18, 190, 225, 36, 10, 61, 187, 133, 32, 61, 206, 146, 84, 62, 196, 149, 149, 62, 127, 67, 252, 190, 73, 244, 55, 62, 132, 224, 116, 62, 33, 69, 156, 60, 195, 49, 95, 191, 68, 87, 121, 191, 105, 141, 39, 62, 4, 225, 74, 191, 253, 84, 54, 62, 26, 41, 171, 62, 4, 122, 204, 190, 12, 62, 253, 58, 158, 116, 243, 189, 240, 207, 239, 190, 7, 169, 169, 190, 121, 143, 103, 191, 113, 24, 25, 190, 42, 57, 204, 190, 37, 118, 189, 61, 87, 79, 48, 191, 221, 49, 29, 191, 217, 95, 21, 189, 50, 11, 13, 62, 75, 135, 49, 191, 149, 75, 37, 62, 216, 160, 219, 190, 195, 75, 86, 190, 32, 164, 164, 62, 161, 215, 81, 62, 122, 21, 14, 62, 91, 116, 146, 190, 167, 100, 12, 191, 43, 64, 38, 60, 195, 77, 193, 190, 200, 163, 113, 62, 204, 231, 106, 190, 66, 93, 174, 189, 77, 152, 86, 62, 121, 147, 186, 189, 116, 131, 211, 62, 91, 157, 45, 190, 222, 45, 137, 191, 179, 236, 208, 61, 178, 219, 169, 61, 56, 40, 137, 189, 215, 15, 196, 61, 108, 29, 124, 189, 130, 210, 130, 62, 179, 17, 97, 62, 124, 129, 170, 62, 12, 96, 118, 189, 225, 168, 62, 62, 156, 101, 141, 62, 106, 96, 52, 189, 21, 110, 8, 62, 56, 100, 129, 61, 186, 11, 85, 189, 153, 147, 43, 191, 224, 58, 231, 189, 98, 44, 73, 62, 229, 92, 7, 191, 109, 74, 130, 188, 138, 13, 158, 190, 26, 228, 46, 62, 199, 105, 12, 191, 147, 185, 69, 62, 21, 151, 166, 59, 153, 30, 184, 61, 153, 138, 98, 190, 93, 98, 99, 188, 104, 91, 78, 61, 55, 222, 132, 59, 16, 178, 155, 189, 100, 165, 5, 61, 226, 173, 154, 190, 179, 227, 147, 189, 141, 198, 212, 189, 201, 71, 110, 190, 183, 231, 97, 190, 146, 58, 51, 191, 14, 88, 133, 188, 230, 110, 87, 191, 21, 131, 56, 62, 115, 11, 6, 191, 254, 253, 158, 188, 131, 208, 140, 189, 252, 73, 147, 190, 56, 169, 112, 190, 161, 247, 156, 190, 48, 243, 254, 61, 196, 14, 84, 191, 122, 223, 238, 61, 28, 234, 128, 62, 241, 1, 20, 62, 203, 69, 187, 189, 223, 214, 7, 186, 216, 254, 41, 191, 155, 169, 223, 188, 152, 222, 18, 191, 24, 228, 207, 189, 159, 231, 150, 61, 69, 113, 165, 60, 224, 251, 31, 61, 93, 95, 8, 62, 100, 168, 80, 62, 112, 148, 149, 61, 172, 124, 183, 61, 37, 143, 216, 190, 106, 234, 27, 61, 229, 212, 60, 62, 90, 174, 226, 189, 168, 111, 102, 191, 196, 120, 30, 62, 245, 42, 106, 62, 3, 110, 225, 188, 34, 39, 241, 60, 232, 153, 207, 189, 160, 117, 34, 62, 88, 133, 178, 190, 231, 73, 123, 61, 15, 225, 48, 187, 105, 212, 250, 61, 107, 27, 92, 190, 229, 139, 223, 190, 5, 174, 43, 62, 228, 188, 18, 60, 92, 96, 173, 61, 134, 20, 6, 61, 254, 29, 60, 62, 187, 234, 10, 191, 144, 125, 67, 191, 14, 239, 209, 189, 220, 131, 217, 188, 239, 66, 199, 62, 214, 226, 32, 60, 160, 56, 144, 60, 146, 160, 137, 61, 85, 75, 177, 62, 238, 123, 243, 189, 133, 90, 16, 190, 113, 155, 177, 62, 151, 218, 131, 60, 205, 33, 115, 190, 218, 160, 137, 59, 156, 150, 181, 61, 172, 234, 173, 62, 204, 62, 28, 190, 232, 192, 206, 62, 81, 26, 169, 61, 217, 245, 196, 61, 143, 153, 145, 190, 64, 190, 111, 62, 237, 114, 15, 61, 167, 12, 172, 62, 166, 85, 163, 190, 93, 76, 136, 191, 168, 151, 17, 191, 227, 247, 26, 190, 98, 136, 25, 190, 20, 207, 132, 62, 13, 2, 147, 189, 47, 42, 84, 191, 13, 238, 142, 189, 210, 153, 167, 189, 237, 167, 189, 62, 165, 46, 154, 189, 131, 26, 24, 190, 208, 217, 87, 62, 16, 160, 214, 62, 39, 201, 137, 190, 136, 234, 210, 62, 160, 205, 198, 189, 82, 212, 91, 188, 231, 109, 32, 61, 66, 129, 123, 61, 41, 157, 36, 62, 58, 223, 61, 62, 193, 219, 184, 61, 58, 196, 54, 189, 251, 119, 156, 60, 202, 39, 153, 62, 148, 164, 116, 189, 71, 235, 158, 189, 239, 61, 134, 62, 65, 252, 245, 189, 161, 28, 75, 61, 141, 42, 169, 189, 70, 28, 68, 191, 33, 54, 222, 190, 119, 197, 51, 190, 9, 111, 28, 61, 243, 98, 49, 188, 222, 29, 57, 188, 239, 186, 161, 189, 204, 171, 35, 190, 151, 165, 237, 60, 154, 166, 32, 61, 120, 128, 224, 189, 135, 68, 82, 189, 237, 80, 148, 61, 190, 216, 96, 190, 212, 153, 18, 189, 132, 93, 35, 190, 29, 176, 104, 190, 234, 228, 5, 62, 220, 223, 20, 61, 74, 5, 127, 61, 92, 74, 12, 190, 62, 76, 102, 61, 23, 119, 168, 189, 122, 63, 163, 189, 45, 122, 11, 190, 24, 80, 13, 189, 31, 103, 195, 60, 220, 178, 12, 189, 192, 227, 242, 61, 142, 254, 66, 189, 129, 174, 9, 189, 3, 91, 49, 190, 13, 61, 153, 61, 27, 128, 158, 59, 190, 122, 48, 62, 28, 54, 44, 188, 93, 2, 166, 188, 143, 177, 2, 190, 65, 204, 32, 189, 121, 243, 33, 190, 238, 176, 42, 190, 141, 235, 190, 61, 188, 151, 30, 62, 251, 139, 25, 190, 45, 7, 149, 61, 107, 105, 181, 189, 214, 203, 168, 189, 53, 13, 3, 190, 145, 61, 25, 61, 64, 105, 253, 61, 34, 174, 250, 59, 21, 136, 6, 189, 200, 253, 0, 62, 146, 128, 122, 61, 5, 100, 42, 190, 93, 13, 73, 189, 123, 128, 167, 189, 82, 223, 244, 58, 6, 130, 75, 61, 223, 126, 180, 61, 160, 189, 160, 186, 82, 134, 20, 189, 29, 181, 202, 61, 241, 16, 101, 189, 103, 232, 34, 62, 115, 63, 238, 189, 6, 0, 204, 189, 243, 245, 217, 190, 202, 216, 224, 62, 254, 200, 123, 190, 52, 143, 170, 189, 51, 223, 159, 190, 35, 85, 133, 62, 158, 44, 182, 190, 253, 164, 146, 191, 185, 29, 132, 60, 233, 148, 200, 190, 252, 185, 59, 62, 233, 206, 192, 62, 6, 175, 168, 190, 131, 98, 17, 62, 162, 175, 24, 188, 217, 157, 47, 62, 177, 141, 213, 190, 227, 211, 16, 191, 184, 212, 153, 191, 225, 13, 24, 191, 198, 5, 145, 189, 224, 170, 188, 61, 182, 45, 66, 191, 83, 97, 106, 188, 124, 13, 254, 189, 12, 124, 127, 62, 14, 142, 226, 191, 47, 48, 192, 62, 64, 48, 98, 62, 128, 20, 250, 60, 191, 92, 150, 190, 50, 250, 130, 189, 214, 180, 128, 189, 6, 13, 127, 62, 155, 17, 67, 189, 65, 171, 142, 190, 215, 161, 239, 62, 10, 215, 46, 61, 99, 143, 152, 190, 109, 108, 70, 191, 227, 86, 163, 189, 212, 161, 133, 190, 165, 130, 44, 190, 175, 206, 248, 61, 96, 100, 171, 190, 220, 226, 132, 189, 134, 80, 140, 188, 229, 20, 109, 61, 243, 173, 178, 61, 126, 115, 201, 190, 174, 245, 67, 189, 188, 17, 157, 189, 141, 134, 35, 190, 129, 196, 139, 62, 246, 171, 70, 190, 144, 242, 176, 61, 88, 17, 234, 62, 222, 14, 200, 62, 192, 0, 205, 190, 139, 77, 32, 62, 153, 232, 175, 62, 30, 144, 25, 62, 187, 93, 20, 191, 91, 100, 184, 59, 193, 197, 60, 190, 58, 114, 31, 190, 197, 149, 134, 190, 210, 64, 212, 190, 2, 58, 204, 188, 242, 90, 147, 189, 254, 245, 132, 61, 83, 112, 54, 62, 155, 25, 19, 62, 38, 172, 136, 62, 40, 105, 152, 190, 95, 232, 234, 59, 26, 229, 141, 187, 240, 203, 15, 190, 204, 125, 20, 190, 109, 179, 199, 190, 212, 172, 4, 61, 76, 240, 46, 187, 225, 155, 146, 189, 125, 213, 25, 62, 223, 26, 55, 190, 203, 229, 138, 62, 96, 80, 148, 62, 58, 62, 44, 62, 242, 150, 38, 190, 183, 136, 37, 61, 156, 71, 1, 62, 243, 175, 142, 62, 13, 191, 44, 62, 209, 48, 119, 62, 15, 71, 233, 190, 14, 90, 176, 189, 23, 117, 16, 190, 157, 251, 1, 190, 61, 18, 155, 189, 99, 154, 54, 190, 95, 120, 198, 187, 236, 90, 188, 61, 153, 199, 228, 61, 43, 188, 71, 189, 89, 167, 207, 60, 77, 193, 51, 190, 21, 221, 140, 189, 127, 127, 210, 189, 203, 211, 253, 188, 60, 224, 110, 188, 38, 133, 19, 189, 137, 8, 211, 189, 1, 1, 4, 190, 159, 15, 229, 188, 153, 24, 14, 62, 200, 70, 217, 189, 177, 193, 31, 189, 47, 162, 56, 61, 71, 37, 63, 61, 111, 49, 241, 189, 202, 135, 156, 61, 251, 34, 10, 61, 169, 78, 246, 61, 146, 222, 179, 60, 157, 23, 227, 189, 94, 230, 143, 189, 130, 26, 23, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 26, 187, 61, 126, 9, 215, 61, 178, 45, 175, 61, 220, 224, 188, 190, 249, 109, 232, 189, 135, 179, 167, 61, 224, 25, 114, 62, 213, 127, 108, 62, 226, 159, 148, 62, 218, 91, 19, 61, 68, 194, 24, 62, 8, 170, 239, 189, 250, 34, 149, 62, 248, 66, 76, 188, 44, 197, 44, 62, 242, 226, 124, 61, 77, 123, 2, 62, 90, 41, 113, 62, 46, 44, 8, 189, 172, 184, 146, 62, 79, 30, 48, 62, 38, 218, 121, 190, 116, 152, 199, 188, 251, 35, 180, 62, 67, 65, 75, 61, 181, 72, 155, 189, 66, 38, 35, 190, 180, 46, 158, 189, 237, 48, 28, 62, 96, 224, 56, 62, 130, 236, 54, 62, 148, 40, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 246, 149, 191, 181, 55, 1, 61, 193, 136, 240, 61, 94, 174, 129, 190, 198, 45, 22, 190, 167, 122, 78, 188, 139, 136, 142, 191, 9, 121, 19, 63, 31, 185, 182, 191, 102, 147, 2, 191, 160, 251, 216, 62, 235, 209, 132, 190, 123, 118, 88, 188, 54, 49, 143, 190, 137, 144, 153, 62, 134, 107, 54, 61, 221, 9, 118, 63, 156, 208, 53, 62, 73, 128, 242, 62, 165, 170, 161, 61, 34, 198, 149, 191, 42, 223, 7, 63, 114, 124, 39, 191, 76, 91, 68, 189, 121, 216, 38, 191, 176, 18, 188, 190, 92, 107, 89, 61, 70, 31, 17, 190, 10, 131, 84, 63, 171, 132, 190, 62, 62, 97, 74, 62, 187, 254, 113, 188, 101, 85, 169, 62, 84, 93, 218, 62, 146, 186, 6, 60, 30, 78, 99, 62, 99, 217, 15, 190, 221, 120, 85, 190, 71, 128, 212, 190, 56, 144, 50, 62, 89, 143, 173, 62, 17, 225, 56, 191, 177, 210, 95, 190, 145, 202, 87, 188, 111, 2, 67, 190, 250, 208, 88, 60, 83, 109, 103, 61, 194, 115, 135, 190, 42, 117, 111, 61, 50, 42, 68, 190, 193, 21, 154, 190, 198, 111, 239, 190, 1, 15, 79, 62, 69, 140, 83, 61, 84, 151, 39, 62, 77, 58, 179, 190, 152, 203, 216, 187, 217, 205, 216, 62, 200, 249, 33, 189, 251, 236, 29, 57, 5, 17, 68, 190, 146, 62, 176, 190, 8, 6, 3, 61, 20, 44, 8, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 38, 213, 60, 169, 15, 246, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {151, 12, 22, 190, 247, 57, 90, 63, 41, 162, 149, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {41, 28, 108, 63, 168, 207, 19, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0046/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}