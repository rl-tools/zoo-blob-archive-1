// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 211, 176, 190, 66, 246, 149, 60, 64, 48, 200, 60, 4, 48, 227, 190, 25, 13, 228, 63, 129, 237, 45, 63, 205, 153, 254, 62, 18, 18, 128, 191, 67, 243, 242, 62, 178, 11, 4, 62, 195, 4, 35, 63, 80, 32, 50, 63, 189, 53, 108, 61, 76, 235, 188, 191, 223, 108, 185, 190, 217, 123, 213, 190, 141, 193, 180, 63, 113, 92, 153, 62, 88, 245, 4, 62, 192, 11, 187, 62, 54, 61, 178, 62, 46, 230, 5, 63, 53, 197, 127, 63, 102, 82, 119, 62, 157, 59, 213, 190, 157, 195, 159, 62, 99, 180, 220, 190, 44, 124, 166, 190, 51, 85, 243, 190, 94, 1, 142, 190, 21, 35, 103, 190, 78, 20, 27, 63, 184, 212, 217, 190, 161, 5, 0, 191, 8, 112, 209, 62, 246, 184, 227, 60, 248, 168, 184, 188, 146, 73, 77, 191, 222, 112, 118, 61, 139, 149, 220, 62, 212, 196, 166, 63, 45, 8, 144, 62, 84, 150, 38, 191, 18, 9, 9, 63, 122, 97, 148, 62, 64, 163, 153, 62, 86, 117, 155, 190, 91, 152, 15, 63, 94, 94, 56, 191, 143, 75, 3, 191, 239, 31, 60, 190, 62, 202, 149, 188, 77, 105, 103, 189, 35, 224, 241, 190, 176, 238, 124, 62, 142, 83, 125, 63, 228, 167, 29, 63, 35, 249, 1, 191, 106, 14, 80, 189, 213, 141, 64, 191, 17, 131, 197, 62, 126, 160, 198, 62, 100, 93, 0, 191, 54, 224, 113, 190, 154, 81, 182, 190, 254, 177, 23, 190, 113, 53, 144, 62, 89, 11, 20, 63, 66, 90, 62, 190, 146, 253, 207, 189, 112, 203, 162, 63, 44, 246, 230, 189, 57, 205, 141, 61, 224, 239, 34, 62, 245, 38, 40, 57, 37, 141, 186, 62, 127, 218, 209, 60, 26, 52, 243, 190, 37, 17, 71, 63, 122, 110, 64, 63, 218, 91, 180, 61, 94, 81, 2, 191, 81, 25, 229, 190, 188, 248, 66, 191, 94, 219, 76, 63, 81, 21, 149, 190, 158, 53, 61, 62, 93, 169, 234, 62, 12, 160, 65, 62, 180, 152, 13, 191, 102, 128, 90, 63, 30, 59, 115, 191, 165, 183, 168, 190, 90, 120, 142, 189, 208, 152, 206, 191, 208, 51, 160, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 88, 25, 191, 152, 26, 127, 190, 75, 168, 159, 62, 249, 10, 12, 190, 23, 191, 186, 188, 179, 59, 58, 190, 80, 156, 184, 62, 254, 191, 237, 61, 157, 215, 205, 190, 196, 191, 153, 62, 187, 192, 43, 190, 13, 99, 227, 62, 88, 158, 195, 62, 253, 177, 251, 189, 151, 177, 35, 63, 185, 157, 229, 61, 158, 104, 185, 190, 145, 200, 73, 190, 107, 114, 163, 190, 3, 45, 239, 60, 78, 44, 218, 62, 104, 85, 99, 62, 167, 96, 48, 63, 4, 92, 216, 189, 59, 137, 52, 190, 168, 170, 183, 189, 14, 250, 88, 61, 169, 88, 64, 190, 44, 218, 164, 190, 208, 51, 176, 62, 194, 185, 163, 190, 42, 41, 104, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 209, 25, 62, 127, 5, 190, 190, 224, 168, 225, 190, 41, 15, 109, 62, 70, 23, 167, 190, 75, 132, 101, 191, 126, 58, 157, 190, 2, 1, 177, 62, 76, 3, 191, 62, 215, 2, 146, 61, 97, 95, 102, 62, 97, 43, 175, 62, 66, 119, 137, 60, 101, 42, 78, 62, 37, 232, 197, 189, 55, 238, 118, 188, 161, 85, 194, 59, 53, 79, 227, 189, 243, 45, 238, 62, 156, 31, 40, 62, 193, 169, 93, 62, 153, 28, 7, 62, 192, 241, 234, 59, 5, 171, 39, 62, 140, 199, 34, 189, 8, 190, 17, 191, 61, 249, 19, 63, 30, 49, 128, 61, 110, 140, 86, 62, 68, 167, 214, 190, 35, 3, 145, 191, 56, 77, 18, 190, 222, 110, 146, 189, 199, 185, 92, 188, 25, 34, 227, 189, 120, 110, 108, 189, 240, 101, 105, 189, 135, 189, 44, 62, 250, 138, 216, 60, 171, 112, 18, 190, 195, 142, 241, 189, 114, 135, 85, 62, 55, 108, 133, 189, 164, 206, 132, 62, 5, 87, 34, 189, 178, 240, 74, 190, 59, 103, 126, 62, 191, 20, 35, 190, 87, 222, 158, 62, 251, 149, 51, 189, 229, 63, 43, 189, 214, 235, 194, 189, 138, 37, 159, 190, 12, 194, 102, 62, 179, 215, 18, 62, 187, 18, 12, 61, 1, 154, 31, 62, 244, 102, 189, 189, 64, 8, 149, 189, 113, 163, 137, 61, 185, 100, 172, 190, 242, 98, 189, 188, 98, 239, 29, 191, 70, 117, 103, 62, 36, 74, 163, 61, 73, 205, 178, 61, 68, 234, 146, 62, 200, 118, 151, 187, 87, 203, 41, 60, 188, 121, 137, 60, 82, 194, 3, 190, 235, 225, 140, 190, 75, 67, 115, 190, 87, 154, 49, 190, 219, 209, 16, 190, 76, 176, 150, 190, 169, 203, 47, 62, 229, 215, 101, 190, 202, 228, 207, 61, 172, 122, 22, 190, 56, 134, 177, 190, 139, 189, 39, 62, 112, 75, 119, 190, 227, 227, 145, 188, 238, 48, 55, 61, 114, 237, 21, 61, 169, 17, 203, 189, 203, 219, 47, 189, 128, 218, 15, 62, 174, 108, 165, 62, 129, 212, 34, 62, 151, 76, 122, 188, 68, 0, 8, 189, 28, 2, 121, 62, 4, 137, 245, 62, 27, 63, 75, 190, 122, 158, 46, 189, 249, 234, 22, 190, 193, 151, 201, 188, 126, 221, 247, 61, 57, 113, 28, 189, 229, 234, 241, 188, 60, 101, 101, 190, 79, 139, 247, 188, 187, 129, 192, 190, 190, 237, 98, 61, 153, 213, 174, 189, 64, 166, 152, 190, 15, 106, 228, 189, 54, 149, 148, 187, 146, 216, 150, 61, 20, 135, 237, 61, 224, 225, 116, 190, 94, 79, 10, 62, 193, 26, 13, 62, 248, 132, 105, 190, 148, 44, 45, 189, 228, 242, 162, 61, 2, 199, 175, 190, 99, 182, 112, 190, 41, 62, 92, 189, 162, 180, 164, 61, 163, 241, 50, 190, 251, 242, 142, 189, 70, 235, 110, 190, 74, 251, 59, 62, 149, 169, 163, 62, 153, 194, 164, 189, 140, 167, 34, 62, 81, 81, 97, 189, 107, 28, 125, 61, 42, 86, 218, 61, 72, 86, 174, 59, 148, 24, 46, 190, 82, 174, 67, 190, 21, 183, 140, 61, 155, 246, 192, 189, 32, 195, 133, 61, 119, 157, 118, 57, 225, 151, 128, 189, 241, 11, 101, 56, 33, 233, 145, 188, 215, 207, 78, 189, 134, 134, 41, 189, 92, 88, 198, 61, 143, 209, 209, 61, 242, 135, 253, 189, 196, 10, 29, 190, 136, 82, 72, 188, 195, 83, 72, 190, 190, 169, 251, 189, 73, 152, 42, 188, 250, 33, 29, 60, 243, 211, 1, 189, 148, 198, 13, 61, 204, 110, 206, 189, 57, 196, 207, 189, 15, 89, 5, 62, 197, 200, 10, 189, 109, 244, 87, 189, 159, 220, 39, 62, 2, 163, 104, 62, 192, 21, 193, 189, 19, 126, 135, 61, 235, 208, 168, 61, 229, 145, 104, 189, 189, 124, 72, 62, 25, 106, 89, 61, 9, 231, 171, 188, 235, 27, 25, 62, 9, 204, 51, 61, 41, 199, 175, 61, 210, 107, 96, 62, 250, 156, 114, 62, 62, 14, 164, 61, 99, 84, 24, 61, 171, 8, 57, 62, 156, 38, 62, 61, 73, 251, 105, 190, 4, 192, 180, 61, 55, 104, 164, 61, 195, 210, 207, 189, 0, 184, 50, 62, 140, 201, 67, 62, 172, 126, 220, 61, 144, 139, 79, 190, 36, 98, 154, 189, 213, 112, 134, 189, 102, 215, 44, 60, 212, 69, 129, 61, 219, 166, 255, 190, 205, 238, 53, 62, 22, 193, 75, 61, 38, 52, 141, 189, 227, 117, 12, 190, 237, 65, 17, 191, 69, 83, 86, 190, 116, 157, 141, 62, 45, 58, 224, 189, 239, 54, 138, 190, 207, 147, 40, 62, 226, 73, 133, 190, 243, 117, 107, 62, 145, 164, 211, 62, 103, 112, 56, 61, 235, 8, 5, 189, 165, 86, 197, 62, 158, 71, 137, 190, 117, 230, 82, 191, 66, 218, 135, 62, 89, 74, 253, 190, 181, 163, 39, 62, 0, 109, 189, 190, 51, 219, 137, 190, 19, 21, 55, 62, 148, 91, 223, 62, 224, 173, 23, 190, 150, 184, 97, 190, 226, 109, 6, 191, 42, 33, 141, 190, 141, 159, 239, 189, 187, 37, 172, 190, 62, 236, 133, 62, 37, 150, 47, 60, 139, 175, 43, 62, 209, 60, 144, 62, 211, 116, 85, 62, 170, 61, 13, 190, 111, 84, 203, 188, 239, 90, 220, 62, 250, 131, 244, 61, 192, 37, 158, 190, 155, 197, 26, 191, 119, 94, 54, 60, 167, 126, 37, 191, 99, 233, 208, 62, 50, 32, 169, 60, 179, 37, 1, 191, 250, 100, 208, 62, 12, 82, 50, 190, 219, 94, 162, 188, 66, 113, 219, 62, 53, 54, 53, 190, 206, 192, 221, 190, 194, 31, 15, 191, 0, 194, 191, 187, 238, 122, 152, 190, 233, 120, 218, 190, 76, 148, 36, 190, 186, 52, 39, 62, 198, 141, 41, 190, 119, 167, 220, 190, 255, 124, 72, 190, 43, 22, 80, 189, 214, 136, 15, 189, 162, 61, 20, 191, 120, 56, 146, 189, 174, 197, 199, 191, 18, 242, 42, 191, 152, 58, 231, 61, 212, 157, 52, 62, 57, 238, 153, 191, 54, 142, 206, 190, 160, 200, 37, 62, 199, 51, 44, 62, 245, 136, 164, 62, 150, 67, 2, 62, 233, 173, 173, 62, 154, 43, 11, 189, 120, 92, 149, 62, 20, 135, 52, 190, 227, 72, 245, 189, 153, 211, 132, 62, 164, 128, 236, 189, 82, 149, 52, 63, 214, 174, 155, 61, 2, 206, 25, 62, 225, 125, 204, 61, 103, 251, 122, 62, 40, 149, 217, 57, 8, 35, 44, 60, 166, 241, 27, 191, 236, 128, 37, 63, 227, 82, 108, 189, 202, 66, 195, 189, 58, 70, 118, 190, 101, 137, 112, 191, 68, 255, 134, 62, 42, 212, 175, 188, 65, 105, 60, 191, 91, 67, 157, 62, 234, 171, 30, 191, 73, 64, 128, 191, 124, 138, 144, 191, 207, 59, 78, 62, 123, 12, 128, 62, 203, 159, 235, 187, 60, 12, 63, 190, 161, 158, 181, 189, 107, 77, 6, 62, 154, 218, 203, 61, 144, 27, 189, 189, 14, 222, 122, 191, 67, 156, 40, 62, 127, 47, 205, 61, 158, 87, 21, 190, 193, 0, 119, 190, 222, 226, 254, 60, 153, 206, 66, 62, 77, 147, 244, 61, 218, 126, 51, 62, 33, 66, 76, 62, 218, 58, 167, 60, 79, 246, 66, 62, 214, 41, 23, 63, 75, 39, 59, 61, 142, 39, 146, 62, 181, 175, 122, 61, 140, 235, 19, 191, 73, 185, 121, 191, 241, 170, 32, 62, 74, 253, 57, 62, 35, 98, 95, 60, 15, 9, 158, 60, 255, 55, 93, 190, 82, 159, 197, 62, 16, 59, 130, 187, 97, 245, 199, 190, 130, 21, 17, 191, 138, 211, 157, 189, 194, 153, 230, 189, 37, 64, 181, 188, 52, 37, 169, 188, 205, 228, 13, 191, 165, 234, 240, 61, 188, 210, 243, 189, 241, 24, 81, 190, 3, 180, 140, 62, 39, 133, 81, 190, 9, 204, 8, 190, 162, 119, 186, 189, 52, 49, 113, 61, 97, 139, 1, 62, 233, 110, 243, 190, 35, 62, 200, 61, 23, 227, 143, 62, 193, 15, 234, 59, 255, 64, 154, 188, 199, 157, 106, 62, 14, 244, 246, 62, 149, 180, 129, 62, 51, 67, 102, 191, 88, 128, 192, 60, 234, 79, 137, 190, 173, 96, 214, 188, 28, 206, 193, 60, 225, 133, 125, 62, 6, 6, 35, 191, 32, 25, 61, 189, 212, 14, 89, 62, 49, 252, 2, 63, 168, 6, 57, 189, 43, 82, 220, 61, 172, 87, 132, 61, 164, 37, 201, 189, 231, 140, 74, 62, 149, 137, 233, 190, 65, 82, 194, 61, 203, 9, 138, 189, 54, 143, 122, 190, 58, 250, 246, 61, 115, 200, 90, 62, 140, 223, 124, 62, 250, 179, 244, 189, 222, 10, 81, 62, 155, 75, 218, 189, 52, 226, 13, 62, 199, 153, 219, 60, 116, 72, 104, 61, 35, 51, 189, 61, 68, 202, 106, 62, 84, 105, 129, 190, 105, 66, 5, 191, 152, 14, 33, 61, 179, 38, 24, 62, 120, 55, 155, 62, 8, 69, 14, 189, 216, 13, 236, 61, 72, 111, 35, 62, 48, 86, 146, 60, 15, 123, 108, 189, 111, 53, 173, 61, 228, 175, 234, 189, 62, 108, 82, 188, 220, 158, 36, 62, 113, 79, 245, 61, 86, 73, 99, 62, 78, 240, 9, 62, 28, 129, 196, 189, 3, 12, 36, 189, 246, 247, 113, 62, 130, 19, 138, 188, 22, 81, 254, 189, 234, 191, 62, 62, 255, 194, 153, 60, 170, 137, 131, 61, 237, 214, 164, 189, 178, 243, 148, 62, 202, 98, 67, 61, 136, 153, 54, 190, 135, 1, 76, 62, 180, 86, 202, 188, 157, 141, 40, 62, 228, 73, 166, 189, 71, 89, 22, 191, 185, 132, 167, 60, 244, 129, 7, 62, 71, 144, 143, 189, 120, 137, 34, 62, 102, 65, 48, 62, 134, 134, 101, 62, 176, 58, 28, 190, 103, 13, 51, 62, 96, 130, 120, 189, 238, 181, 2, 63, 81, 131, 33, 62, 8, 104, 55, 62, 144, 110, 134, 61, 27, 150, 82, 187, 34, 180, 85, 61, 15, 175, 18, 190, 195, 221, 141, 62, 77, 95, 3, 62, 82, 52, 3, 189, 144, 179, 51, 62, 103, 80, 53, 62, 86, 138, 247, 61, 239, 1, 245, 188, 145, 66, 197, 61, 170, 56, 148, 190, 89, 113, 46, 62, 235, 64, 144, 189, 180, 121, 221, 189, 16, 204, 9, 61, 31, 235, 26, 190, 206, 18, 113, 190, 31, 105, 6, 191, 68, 65, 191, 62, 198, 112, 101, 189, 27, 1, 161, 189, 16, 192, 41, 191, 253, 101, 44, 62, 30, 101, 117, 190, 144, 165, 147, 62, 65, 126, 219, 190, 248, 194, 39, 190, 112, 105, 119, 62, 253, 95, 25, 189, 62, 197, 172, 62, 143, 103, 25, 190, 9, 254, 252, 189, 74, 40, 146, 189, 146, 248, 117, 62, 125, 152, 136, 190, 65, 239, 47, 190, 222, 171, 48, 61, 216, 199, 64, 62, 87, 109, 152, 62, 197, 197, 16, 62, 99, 236, 17, 189, 220, 155, 32, 62, 242, 179, 120, 62, 92, 65, 207, 61, 3, 178, 29, 61, 171, 92, 46, 62, 211, 155, 5, 62, 225, 128, 29, 190, 13, 4, 163, 61, 189, 137, 236, 62, 208, 246, 218, 188, 49, 205, 49, 61, 175, 136, 199, 59, 79, 103, 126, 189, 119, 226, 25, 61, 11, 76, 141, 189, 203, 12, 132, 61, 109, 189, 17, 62, 130, 5, 156, 189, 216, 104, 3, 191, 99, 3, 5, 62, 91, 172, 145, 190, 206, 47, 30, 60, 140, 251, 235, 61, 107, 135, 37, 62, 175, 208, 114, 61, 244, 113, 142, 60, 172, 150, 54, 62, 225, 70, 184, 189, 9, 121, 65, 62, 210, 248, 193, 190, 128, 216, 54, 190, 152, 73, 138, 189, 20, 98, 85, 62, 97, 93, 255, 62, 172, 244, 186, 187, 107, 146, 149, 189, 101, 123, 144, 60, 84, 232, 47, 191, 157, 113, 81, 190, 44, 56, 122, 189, 252, 32, 29, 191, 212, 150, 68, 190, 179, 255, 30, 190, 96, 134, 172, 189, 85, 207, 98, 61, 69, 224, 63, 190, 51, 254, 22, 191, 8, 45, 138, 62, 207, 216, 135, 62, 183, 93, 156, 190, 218, 228, 223, 190, 217, 46, 77, 190, 88, 249, 95, 190, 181, 191, 71, 62, 8, 96, 25, 62, 176, 239, 161, 190, 46, 200, 146, 62, 92, 130, 0, 61, 241, 134, 51, 62, 156, 72, 138, 62, 120, 218, 75, 190, 204, 75, 22, 191, 23, 235, 252, 189, 135, 47, 121, 190, 147, 70, 202, 62, 108, 27, 147, 62, 80, 130, 251, 185, 174, 243, 27, 61, 54, 180, 154, 61, 128, 169, 56, 191, 161, 4, 17, 191, 33, 24, 192, 189, 129, 93, 245, 190, 27, 79, 169, 191, 72, 31, 29, 190, 139, 48, 161, 187, 229, 96, 77, 61, 167, 189, 229, 188, 239, 250, 165, 62, 107, 75, 154, 62, 240, 167, 194, 61, 70, 182, 206, 188, 160, 98, 13, 191, 2, 218, 138, 62, 114, 229, 232, 190, 156, 145, 47, 61, 231, 115, 224, 61, 207, 201, 75, 62, 19, 219, 196, 61, 76, 71, 160, 189, 30, 14, 71, 60, 48, 250, 211, 188, 3, 229, 71, 190, 100, 169, 221, 189, 246, 230, 58, 189, 133, 109, 106, 62, 36, 235, 3, 190, 133, 167, 117, 190, 210, 185, 235, 59, 85, 157, 139, 190, 177, 8, 37, 62, 3, 150, 31, 62, 75, 106, 68, 190, 28, 55, 100, 61, 101, 42, 81, 62, 182, 5, 229, 61, 87, 104, 7, 62, 234, 236, 135, 189, 12, 221, 160, 62, 246, 174, 138, 190, 250, 20, 76, 187, 125, 77, 169, 61, 236, 22, 134, 61, 31, 22, 166, 190, 95, 19, 37, 191, 221, 38, 123, 189, 67, 130, 193, 190, 135, 130, 246, 60, 210, 51, 146, 62, 12, 57, 5, 191, 110, 118, 146, 61, 228, 201, 154, 60, 79, 235, 106, 187, 4, 174, 53, 61, 59, 228, 17, 191, 82, 77, 20, 191, 188, 36, 212, 188, 187, 120, 12, 62, 84, 115, 4, 62, 128, 214, 98, 191, 213, 28, 161, 189, 81, 92, 20, 62, 1, 133, 66, 62, 114, 84, 9, 191, 38, 212, 0, 63, 192, 19, 154, 62, 165, 65, 224, 189, 237, 151, 226, 190, 35, 245, 230, 61, 124, 142, 40, 62, 213, 57, 180, 189, 141, 175, 73, 191, 134, 185, 218, 189, 165, 129, 191, 190, 123, 111, 162, 190, 225, 95, 30, 188, 37, 156, 77, 190, 204, 222, 254, 188, 193, 195, 60, 61, 117, 217, 14, 62, 34, 12, 159, 62, 106, 33, 75, 190, 233, 222, 244, 189, 23, 87, 2, 190, 96, 152, 4, 62, 255, 148, 140, 60, 244, 120, 103, 191, 31, 154, 106, 61, 84, 163, 2, 62, 110, 247, 126, 189, 163, 44, 0, 61, 101, 12, 157, 62, 206, 233, 48, 61, 85, 176, 154, 60, 185, 201, 1, 62, 192, 44, 63, 190, 93, 193, 30, 190, 24, 182, 128, 62, 16, 85, 25, 190, 201, 14, 13, 61, 187, 133, 32, 61, 132, 75, 72, 62, 85, 46, 143, 62, 211, 225, 176, 190, 213, 71, 226, 61, 34, 237, 117, 62, 97, 49, 236, 61, 73, 56, 66, 191, 139, 36, 55, 191, 115, 10, 196, 61, 181, 204, 11, 191, 74, 203, 45, 62, 77, 70, 151, 62, 4, 122, 204, 190, 0, 143, 126, 188, 156, 57, 125, 189, 198, 15, 137, 190, 24, 179, 131, 190, 119, 147, 65, 191, 85, 61, 45, 189, 115, 37, 244, 190, 194, 15, 212, 60, 215, 248, 57, 191, 221, 49, 29, 191, 217, 95, 21, 189, 23, 136, 141, 61, 188, 98, 245, 190, 215, 184, 112, 62, 148, 81, 145, 190, 156, 245, 137, 190, 224, 80, 131, 62, 212, 67, 7, 62, 122, 21, 14, 62, 122, 101, 195, 190, 228, 90, 212, 190, 99, 224, 92, 189, 170, 248, 178, 190, 55, 76, 11, 62, 223, 21, 61, 190, 54, 46, 124, 189, 116, 156, 33, 62, 181, 196, 231, 189, 216, 42, 186, 62, 200, 6, 90, 190, 61, 212, 36, 191, 59, 36, 7, 62, 4, 206, 137, 187, 115, 36, 112, 189, 59, 72, 188, 61, 17, 64, 200, 189, 198, 9, 76, 62, 230, 200, 59, 62, 57, 216, 155, 62, 195, 190, 147, 189, 32, 141, 40, 62, 160, 42, 92, 62, 106, 96, 52, 189, 83, 34, 208, 61, 209, 172, 211, 61, 187, 210, 172, 189, 177, 225, 39, 191, 221, 126, 13, 190, 78, 19, 63, 62, 245, 22, 224, 190, 109, 74, 130, 188, 73, 163, 157, 190, 175, 64, 106, 62, 84, 55, 193, 190, 103, 238, 58, 62, 21, 151, 166, 59, 34, 238, 58, 62, 100, 62, 88, 190, 93, 98, 99, 188, 202, 68, 60, 189, 55, 222, 132, 59, 77, 223, 202, 189, 26, 248, 93, 61, 103, 57, 155, 190, 197, 52, 186, 189, 55, 191, 29, 189, 103, 81, 110, 190, 71, 51, 60, 190, 135, 52, 2, 191, 195, 149, 131, 61, 50, 149, 50, 191, 242, 14, 242, 61, 81, 210, 141, 190, 254, 253, 158, 188, 131, 208, 140, 189, 155, 204, 108, 190, 156, 110, 25, 190, 181, 68, 124, 190, 244, 109, 147, 62, 126, 167, 23, 191, 17, 32, 121, 62, 3, 169, 89, 62, 241, 1, 20, 62, 160, 85, 114, 189, 129, 175, 105, 189, 184, 33, 233, 190, 248, 95, 25, 188, 100, 13, 14, 191, 90, 99, 9, 190, 182, 18, 49, 61, 218, 126, 9, 61, 219, 139, 77, 61, 106, 95, 25, 62, 42, 165, 71, 62, 183, 22, 52, 61, 15, 13, 158, 61, 112, 167, 227, 190, 25, 149, 96, 60, 104, 78, 0, 62, 247, 207, 181, 189, 70, 153, 32, 191, 213, 39, 49, 62, 177, 208, 108, 62, 112, 217, 228, 188, 161, 132, 190, 60, 19, 52, 57, 189, 160, 117, 34, 62, 246, 180, 175, 190, 168, 18, 10, 61, 202, 163, 117, 60, 113, 199, 202, 61, 120, 71, 91, 190, 195, 197, 222, 190, 112, 207, 26, 62, 228, 188, 18, 60, 55, 29, 230, 60, 73, 5, 144, 61, 88, 94, 55, 62, 178, 217, 214, 190, 127, 166, 61, 191, 15, 125, 210, 189, 166, 158, 25, 189, 63, 193, 198, 62, 185, 214, 60, 60, 219, 44, 106, 60, 16, 242, 210, 60, 212, 72, 210, 62, 75, 163, 10, 190, 25, 91, 28, 190, 43, 10, 194, 62, 135, 210, 212, 186, 185, 6, 116, 190, 99, 107, 236, 188, 176, 195, 176, 61, 7, 70, 174, 62, 172, 102, 5, 190, 57, 61, 201, 62, 178, 64, 135, 61, 217, 245, 196, 61, 236, 230, 144, 190, 108, 31, 106, 62, 40, 61, 12, 61, 162, 194, 186, 62, 232, 160, 164, 190, 91, 181, 130, 191, 228, 56, 224, 190, 227, 247, 26, 190, 166, 110, 41, 190, 136, 200, 136, 62, 89, 178, 166, 189, 244, 199, 74, 191, 210, 106, 61, 189, 81, 48, 182, 189, 181, 66, 196, 62, 201, 24, 173, 189, 152, 48, 30, 190, 99, 53, 84, 62, 115, 115, 186, 62, 26, 0, 122, 190, 167, 13, 215, 62, 168, 72, 7, 190, 209, 55, 51, 188, 203, 10, 154, 188, 22, 26, 112, 61, 72, 240, 23, 62, 31, 137, 54, 62, 44, 162, 213, 61, 251, 110, 110, 189, 227, 199, 231, 60, 50, 77, 155, 62, 148, 164, 116, 189, 151, 84, 132, 189, 153, 43, 145, 62, 85, 23, 3, 190, 30, 156, 137, 61, 99, 188, 149, 189, 87, 91, 51, 191, 153, 94, 239, 190, 119, 197, 51, 190, 9, 111, 28, 61, 243, 98, 49, 188, 222, 29, 57, 188, 239, 186, 161, 189, 204, 171, 35, 190, 151, 165, 237, 60, 154, 166, 32, 61, 120, 128, 224, 189, 135, 68, 82, 189, 237, 80, 148, 61, 190, 216, 96, 190, 212, 153, 18, 189, 132, 93, 35, 190, 29, 176, 104, 190, 234, 228, 5, 62, 220, 223, 20, 61, 74, 5, 127, 61, 92, 74, 12, 190, 62, 76, 102, 61, 23, 119, 168, 189, 122, 63, 163, 189, 45, 122, 11, 190, 24, 80, 13, 189, 31, 103, 195, 60, 220, 178, 12, 189, 192, 227, 242, 61, 142, 254, 66, 189, 129, 174, 9, 189, 3, 91, 49, 190, 13, 61, 153, 61, 27, 128, 158, 59, 190, 122, 48, 62, 28, 54, 44, 188, 93, 2, 166, 188, 143, 177, 2, 190, 65, 204, 32, 189, 121, 243, 33, 190, 238, 176, 42, 190, 141, 235, 190, 61, 188, 151, 30, 62, 251, 139, 25, 190, 45, 7, 149, 61, 107, 105, 181, 189, 214, 203, 168, 189, 53, 13, 3, 190, 145, 61, 25, 61, 64, 105, 253, 61, 34, 174, 250, 59, 21, 136, 6, 189, 200, 253, 0, 62, 146, 128, 122, 61, 5, 100, 42, 190, 93, 13, 73, 189, 123, 128, 167, 189, 82, 223, 244, 58, 6, 130, 75, 61, 223, 126, 180, 61, 160, 189, 160, 186, 82, 134, 20, 189, 29, 181, 202, 61, 241, 16, 101, 189, 103, 232, 34, 62, 115, 63, 238, 189, 6, 0, 204, 189, 134, 23, 117, 190, 3, 64, 207, 62, 200, 51, 143, 190, 227, 64, 66, 189, 222, 162, 90, 190, 98, 67, 127, 62, 20, 142, 180, 190, 253, 164, 146, 191, 200, 237, 22, 62, 233, 148, 200, 190, 21, 38, 138, 62, 230, 180, 181, 62, 171, 4, 162, 190, 155, 116, 87, 62, 13, 228, 77, 189, 182, 85, 42, 62, 111, 42, 88, 190, 170, 86, 13, 191, 9, 173, 151, 191, 245, 239, 25, 191, 75, 213, 213, 60, 70, 46, 181, 61, 90, 220, 87, 191, 83, 97, 106, 188, 204, 1, 1, 190, 82, 16, 129, 62, 65, 32, 207, 191, 241, 66, 170, 62, 81, 229, 93, 62, 119, 75, 179, 60, 229, 143, 103, 190, 50, 250, 130, 189, 90, 168, 188, 58, 227, 137, 103, 62, 57, 163, 100, 189, 175, 248, 82, 190, 208, 188, 178, 62, 74, 82, 26, 61, 152, 72, 153, 190, 217, 213, 65, 191, 244, 177, 131, 187, 67, 94, 136, 190, 188, 57, 11, 190, 108, 124, 207, 61, 84, 181, 162, 190, 195, 103, 150, 188, 20, 243, 78, 189, 96, 186, 71, 61, 22, 66, 215, 61, 119, 222, 184, 190, 66, 173, 232, 188, 131, 189, 176, 189, 75, 80, 145, 189, 8, 164, 135, 62, 8, 113, 88, 190, 144, 242, 176, 61, 64, 114, 232, 62, 148, 33, 196, 62, 39, 243, 179, 190, 121, 217, 249, 61, 109, 23, 174, 62, 135, 155, 13, 62, 37, 183, 240, 190, 91, 100, 184, 59, 16, 119, 122, 190, 180, 130, 9, 190, 201, 26, 130, 190, 11, 96, 181, 190, 27, 13, 202, 189, 237, 157, 78, 189, 139, 232, 146, 61, 192, 4, 12, 62, 7, 186, 12, 62, 43, 61, 104, 62, 201, 49, 176, 190, 181, 10, 184, 61, 185, 119, 228, 59, 205, 239, 10, 190, 139, 149, 3, 190, 156, 153, 197, 190, 114, 115, 49, 60, 112, 127, 204, 59, 211, 133, 193, 189, 89, 1, 4, 62, 145, 56, 51, 190, 243, 154, 131, 62, 114, 114, 103, 62, 58, 62, 44, 62, 67, 110, 59, 190, 18, 18, 70, 61, 221, 86, 226, 61, 83, 172, 149, 62, 232, 235, 29, 62, 95, 232, 132, 62, 236, 43, 170, 190, 14, 90, 176, 189, 23, 117, 16, 190, 157, 251, 1, 190, 61, 18, 155, 189, 99, 154, 54, 190, 95, 120, 198, 187, 236, 90, 188, 61, 153, 199, 228, 61, 43, 188, 71, 189, 89, 167, 207, 60, 77, 193, 51, 190, 21, 221, 140, 189, 127, 127, 210, 189, 203, 211, 253, 188, 60, 224, 110, 188, 38, 133, 19, 189, 137, 8, 211, 189, 1, 1, 4, 190, 159, 15, 229, 188, 153, 24, 14, 62, 200, 70, 217, 189, 177, 193, 31, 189, 47, 162, 56, 61, 71, 37, 63, 61, 111, 49, 241, 189, 202, 135, 156, 61, 251, 34, 10, 61, 169, 78, 246, 61, 146, 222, 179, 60, 157, 23, 227, 189, 94, 230, 143, 189, 130, 26, 23, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 205, 165, 61, 100, 116, 80, 61, 205, 210, 179, 61, 220, 224, 188, 190, 249, 109, 232, 189, 40, 37, 158, 61, 16, 76, 133, 62, 19, 47, 22, 62, 237, 30, 150, 62, 217, 29, 5, 61, 232, 57, 29, 62, 223, 5, 220, 189, 231, 35, 148, 62, 29, 212, 161, 59, 89, 239, 19, 62, 54, 202, 52, 61, 175, 207, 22, 62, 57, 142, 79, 62, 193, 91, 241, 188, 40, 19, 113, 62, 217, 77, 17, 62, 82, 133, 106, 190, 232, 233, 231, 60, 221, 24, 164, 62, 220, 189, 121, 61, 151, 145, 134, 189, 66, 38, 35, 190, 180, 46, 158, 189, 250, 118, 16, 62, 94, 107, 40, 62, 122, 20, 63, 62, 148, 40, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 244, 132, 191, 169, 7, 189, 61, 12, 224, 18, 62, 94, 174, 129, 190, 198, 45, 22, 190, 114, 82, 221, 188, 208, 116, 140, 191, 171, 90, 49, 63, 211, 227, 172, 191, 123, 62, 252, 190, 247, 192, 203, 62, 84, 71, 129, 190, 173, 211, 40, 189, 25, 16, 122, 190, 53, 110, 154, 62, 85, 180, 97, 61, 227, 185, 104, 63, 45, 120, 19, 62, 37, 200, 219, 62, 135, 90, 97, 61, 240, 228, 127, 191, 122, 82, 232, 62, 196, 138, 15, 191, 234, 136, 157, 189, 155, 111, 36, 191, 27, 71, 188, 190, 92, 107, 89, 61, 70, 31, 17, 190, 72, 130, 73, 63, 133, 237, 180, 62, 175, 48, 46, 62, 187, 254, 113, 188, 66, 248, 88, 62, 228, 11, 209, 62, 205, 137, 37, 58, 30, 78, 99, 62, 99, 217, 15, 190, 162, 184, 94, 190, 154, 165, 184, 190, 182, 137, 45, 62, 111, 69, 190, 61, 162, 96, 48, 191, 161, 4, 77, 187, 96, 234, 63, 189, 97, 254, 72, 190, 15, 108, 42, 61, 179, 68, 77, 61, 135, 14, 100, 190, 155, 221, 77, 61, 111, 63, 68, 190, 175, 96, 78, 190, 212, 217, 186, 190, 198, 116, 80, 62, 16, 242, 116, 188, 53, 125, 25, 62, 251, 227, 131, 190, 137, 214, 143, 188, 104, 252, 221, 62, 200, 249, 33, 189, 251, 236, 29, 57, 156, 164, 36, 190, 133, 173, 129, 190, 115, 90, 72, 188, 20, 44, 8, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 255, 163, 60, 159, 91, 230, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {115, 86, 66, 191, 252, 207, 139, 191, 208, 53, 130, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {114, 27, 227, 190, 136, 147, 75, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0046/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}