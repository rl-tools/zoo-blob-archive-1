// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 211, 176, 190, 66, 246, 149, 60, 64, 48, 200, 60, 90, 179, 250, 190, 124, 119, 83, 63, 170, 172, 112, 63, 213, 97, 21, 63, 243, 159, 67, 191, 15, 118, 226, 62, 71, 104, 19, 58, 201, 159, 149, 62, 147, 140, 25, 63, 58, 95, 59, 190, 64, 115, 134, 191, 85, 94, 161, 190, 178, 155, 225, 190, 67, 40, 116, 63, 173, 19, 187, 62, 96, 38, 62, 62, 139, 23, 194, 62, 60, 68, 211, 62, 28, 203, 7, 63, 217, 45, 100, 63, 237, 49, 174, 62, 155, 66, 58, 190, 167, 17, 47, 62, 140, 110, 241, 190, 16, 12, 42, 190, 239, 174, 194, 190, 181, 253, 171, 190, 82, 171, 24, 189, 204, 233, 219, 62, 24, 136, 249, 190, 29, 56, 181, 190, 119, 57, 136, 62, 39, 143, 109, 60, 145, 53, 167, 188, 153, 30, 53, 191, 179, 191, 112, 61, 187, 162, 207, 62, 88, 5, 158, 63, 1, 114, 181, 62, 40, 30, 22, 191, 183, 28, 240, 62, 119, 132, 125, 62, 224, 153, 151, 62, 118, 86, 132, 190, 135, 87, 10, 63, 193, 82, 18, 191, 48, 169, 196, 190, 244, 123, 96, 190, 132, 94, 225, 188, 178, 144, 192, 188, 220, 67, 6, 191, 7, 34, 83, 62, 76, 169, 103, 63, 34, 254, 7, 63, 119, 212, 161, 190, 44, 151, 216, 189, 193, 173, 78, 191, 56, 58, 218, 62, 110, 251, 215, 62, 132, 126, 5, 191, 243, 211, 55, 190, 216, 211, 186, 190, 39, 119, 121, 190, 183, 31, 153, 62, 11, 32, 21, 63, 106, 19, 137, 190, 185, 43, 222, 188, 222, 192, 100, 63, 201, 146, 253, 189, 57, 205, 141, 61, 224, 239, 34, 62, 245, 38, 40, 57, 53, 25, 123, 62, 37, 55, 157, 61, 249, 59, 246, 190, 240, 185, 86, 63, 40, 239, 9, 63, 87, 78, 16, 62, 135, 56, 245, 190, 179, 9, 185, 190, 185, 117, 92, 191, 195, 176, 79, 63, 205, 145, 210, 190, 165, 17, 12, 62, 19, 184, 212, 62, 161, 4, 137, 62, 158, 198, 15, 191, 98, 75, 33, 63, 123, 226, 97, 191, 137, 23, 165, 190, 34, 252, 150, 190, 64, 151, 158, 191, 185, 210, 190, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 88, 25, 191, 6, 61, 218, 190, 165, 45, 177, 62, 150, 61, 82, 190, 138, 69, 89, 62, 88, 96, 25, 61, 111, 203, 197, 62, 207, 34, 143, 61, 221, 156, 169, 190, 210, 182, 221, 62, 208, 74, 29, 190, 15, 171, 174, 62, 128, 77, 239, 62, 174, 121, 89, 190, 148, 152, 22, 63, 79, 106, 37, 62, 170, 20, 6, 190, 22, 17, 11, 190, 8, 115, 187, 190, 159, 153, 66, 190, 44, 151, 235, 62, 210, 194, 181, 62, 120, 239, 41, 63, 244, 127, 32, 190, 59, 137, 52, 190, 7, 123, 45, 189, 74, 136, 230, 188, 163, 19, 251, 189, 178, 50, 164, 190, 249, 253, 160, 62, 35, 190, 58, 190, 158, 185, 24, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 209, 25, 62, 88, 102, 191, 190, 214, 239, 175, 190, 18, 52, 120, 61, 187, 151, 33, 189, 232, 121, 4, 191, 93, 38, 142, 190, 233, 156, 190, 62, 52, 233, 199, 62, 42, 21, 248, 61, 206, 15, 103, 62, 42, 197, 34, 62, 168, 41, 67, 62, 211, 229, 126, 62, 254, 33, 70, 61, 65, 164, 144, 61, 219, 216, 171, 60, 105, 169, 191, 189, 165, 226, 174, 62, 135, 251, 72, 62, 167, 236, 141, 62, 55, 84, 78, 62, 89, 160, 40, 61, 5, 80, 224, 61, 140, 199, 34, 189, 103, 181, 14, 191, 128, 238, 19, 63, 53, 205, 218, 61, 243, 132, 88, 62, 114, 67, 196, 190, 50, 5, 53, 191, 180, 71, 151, 61, 222, 110, 146, 189, 82, 171, 77, 61, 63, 94, 164, 188, 9, 115, 22, 189, 71, 123, 4, 188, 180, 82, 45, 61, 6, 71, 59, 60, 154, 226, 45, 190, 254, 112, 63, 190, 56, 172, 7, 62, 34, 180, 62, 190, 23, 186, 103, 61, 103, 179, 133, 61, 108, 204, 123, 190, 124, 97, 34, 62, 152, 241, 86, 189, 171, 126, 75, 62, 99, 199, 153, 189, 113, 91, 146, 189, 1, 65, 12, 190, 30, 126, 158, 190, 51, 103, 61, 62, 25, 32, 205, 189, 213, 39, 171, 190, 1, 154, 31, 62, 165, 222, 196, 60, 245, 230, 162, 61, 135, 176, 106, 188, 27, 238, 127, 190, 186, 115, 128, 60, 187, 45, 39, 190, 9, 26, 109, 62, 36, 74, 163, 61, 24, 55, 49, 62, 178, 140, 164, 62, 85, 79, 16, 189, 226, 112, 199, 61, 160, 240, 6, 62, 58, 36, 91, 189, 68, 37, 43, 190, 212, 147, 108, 190, 79, 84, 27, 190, 243, 47, 42, 190, 153, 223, 234, 189, 244, 242, 231, 187, 229, 83, 243, 189, 201, 110, 140, 61, 61, 213, 75, 190, 233, 217, 21, 190, 57, 66, 42, 62, 105, 146, 99, 190, 12, 90, 81, 188, 156, 177, 192, 58, 115, 206, 143, 61, 193, 201, 249, 189, 226, 119, 30, 190, 128, 218, 15, 62, 43, 105, 147, 62, 15, 200, 121, 62, 127, 82, 193, 60, 17, 193, 139, 61, 201, 235, 91, 62, 180, 137, 201, 62, 207, 9, 237, 188, 122, 158, 46, 189, 249, 234, 22, 190, 193, 151, 201, 188, 126, 221, 247, 61, 57, 113, 28, 189, 229, 234, 241, 188, 60, 101, 101, 190, 79, 139, 247, 188, 187, 129, 192, 190, 190, 237, 98, 61, 153, 213, 174, 189, 64, 166, 152, 190, 15, 106, 228, 189, 54, 149, 148, 187, 146, 216, 150, 61, 20, 135, 237, 61, 224, 225, 116, 190, 94, 79, 10, 62, 193, 26, 13, 62, 248, 132, 105, 190, 148, 44, 45, 189, 228, 242, 162, 61, 2, 199, 175, 190, 99, 182, 112, 190, 41, 62, 92, 189, 162, 180, 164, 61, 163, 241, 50, 190, 251, 242, 142, 189, 70, 235, 110, 190, 74, 251, 59, 62, 149, 169, 163, 62, 153, 194, 164, 189, 140, 167, 34, 62, 81, 81, 97, 189, 107, 28, 125, 61, 42, 86, 218, 61, 72, 86, 174, 59, 148, 24, 46, 190, 82, 174, 67, 190, 21, 183, 140, 61, 155, 246, 192, 189, 32, 195, 133, 61, 119, 157, 118, 57, 225, 151, 128, 189, 241, 11, 101, 56, 33, 233, 145, 188, 215, 207, 78, 189, 134, 134, 41, 189, 92, 88, 198, 61, 143, 209, 209, 61, 242, 135, 253, 189, 196, 10, 29, 190, 136, 82, 72, 188, 195, 83, 72, 190, 190, 169, 251, 189, 73, 152, 42, 188, 250, 33, 29, 60, 243, 211, 1, 189, 148, 198, 13, 61, 204, 110, 206, 189, 57, 196, 207, 189, 15, 89, 5, 62, 197, 200, 10, 189, 109, 244, 87, 189, 159, 220, 39, 62, 148, 240, 170, 61, 83, 5, 149, 188, 113, 69, 128, 60, 60, 209, 200, 61, 172, 156, 164, 189, 31, 165, 78, 62, 6, 79, 170, 61, 247, 96, 75, 60, 214, 235, 16, 62, 145, 181, 149, 61, 172, 9, 244, 188, 45, 212, 53, 62, 85, 125, 143, 62, 221, 66, 27, 62, 74, 220, 122, 61, 47, 210, 25, 62, 252, 28, 99, 61, 81, 180, 124, 190, 24, 142, 181, 61, 156, 197, 240, 61, 23, 33, 219, 189, 90, 66, 75, 62, 4, 231, 78, 61, 172, 126, 220, 61, 162, 204, 64, 190, 93, 101, 193, 60, 110, 234, 135, 189, 227, 159, 207, 61, 236, 74, 181, 61, 66, 133, 225, 190, 41, 156, 43, 62, 22, 193, 75, 61, 133, 152, 37, 187, 228, 150, 175, 188, 112, 11, 109, 190, 166, 135, 95, 189, 59, 144, 220, 61, 170, 139, 121, 188, 14, 24, 166, 189, 220, 89, 2, 60, 51, 4, 209, 190, 171, 130, 251, 61, 47, 54, 194, 61, 77, 101, 100, 62, 113, 247, 231, 61, 126, 142, 98, 62, 208, 127, 0, 189, 223, 192, 51, 191, 66, 110, 3, 62, 146, 105, 25, 190, 186, 195, 92, 189, 17, 218, 60, 190, 173, 251, 209, 190, 48, 140, 246, 61, 50, 234, 214, 61, 224, 173, 23, 190, 226, 46, 144, 60, 25, 211, 51, 190, 22, 74, 146, 190, 60, 205, 130, 189, 206, 1, 249, 189, 147, 246, 255, 62, 50, 131, 133, 61, 139, 175, 43, 62, 7, 168, 95, 62, 95, 199, 173, 62, 180, 156, 9, 190, 29, 55, 40, 190, 210, 245, 64, 62, 16, 11, 12, 62, 65, 102, 153, 190, 34, 15, 227, 190, 75, 196, 189, 188, 26, 168, 177, 189, 50, 52, 29, 62, 178, 4, 102, 61, 35, 47, 21, 191, 183, 111, 141, 62, 236, 170, 255, 189, 130, 241, 196, 189, 99, 239, 41, 62, 245, 31, 43, 190, 58, 228, 229, 190, 27, 229, 121, 190, 89, 73, 74, 189, 176, 151, 128, 190, 59, 234, 247, 189, 76, 148, 36, 190, 123, 45, 169, 62, 238, 34, 197, 188, 31, 48, 239, 190, 144, 137, 86, 62, 50, 122, 84, 62, 129, 49, 19, 62, 66, 63, 48, 191, 120, 56, 146, 189, 74, 79, 147, 191, 195, 68, 44, 191, 64, 152, 135, 190, 126, 26, 77, 62, 23, 130, 80, 191, 108, 52, 252, 190, 38, 62, 104, 60, 49, 139, 74, 62, 162, 97, 172, 62, 212, 251, 13, 62, 107, 145, 76, 62, 184, 209, 157, 61, 213, 231, 190, 61, 22, 17, 54, 61, 248, 160, 130, 189, 65, 35, 87, 62, 51, 97, 207, 189, 44, 249, 215, 62, 93, 213, 193, 61, 127, 185, 52, 62, 209, 58, 229, 61, 17, 74, 116, 62, 193, 70, 97, 189, 8, 35, 44, 60, 148, 168, 22, 191, 116, 201, 6, 63, 255, 21, 45, 189, 73, 106, 241, 189, 116, 181, 106, 190, 252, 92, 40, 191, 167, 248, 115, 62, 42, 212, 175, 188, 97, 226, 35, 191, 188, 246, 123, 62, 73, 39, 227, 190, 213, 77, 10, 191, 14, 149, 195, 190, 106, 81, 136, 62, 19, 221, 156, 62, 70, 189, 70, 189, 109, 53, 97, 190, 105, 223, 215, 189, 177, 248, 181, 189, 202, 149, 3, 61, 174, 28, 78, 61, 133, 143, 203, 190, 117, 186, 56, 62, 154, 117, 62, 190, 7, 30, 22, 190, 24, 105, 67, 60, 217, 173, 200, 60, 195, 11, 116, 62, 155, 109, 205, 61, 86, 102, 86, 62, 35, 218, 3, 62, 218, 58, 167, 60, 67, 234, 100, 62, 250, 121, 39, 63, 61, 48, 17, 61, 32, 67, 52, 62, 142, 154, 191, 61, 250, 121, 54, 190, 119, 240, 58, 191, 241, 170, 32, 62, 54, 77, 74, 62, 29, 166, 254, 61, 31, 153, 210, 60, 120, 49, 77, 190, 23, 134, 171, 62, 251, 27, 70, 61, 134, 23, 185, 190, 25, 31, 23, 191, 50, 18, 91, 189, 194, 114, 218, 189, 191, 168, 194, 61, 23, 77, 244, 61, 26, 13, 7, 191, 166, 85, 15, 62, 94, 216, 191, 189, 12, 153, 4, 190, 237, 13, 75, 62, 137, 167, 32, 190, 176, 246, 99, 190, 48, 253, 12, 190, 187, 25, 162, 61, 93, 224, 219, 61, 67, 31, 137, 190, 35, 62, 200, 61, 161, 29, 133, 62, 203, 13, 155, 59, 33, 5, 239, 189, 77, 81, 182, 62, 203, 69, 230, 62, 170, 117, 0, 62, 183, 3, 6, 191, 88, 128, 192, 60, 67, 219, 166, 190, 76, 170, 237, 189, 227, 117, 21, 61, 49, 7, 57, 62, 62, 107, 148, 190, 203, 127, 96, 189, 89, 157, 75, 62, 207, 37, 243, 62, 167, 75, 13, 189, 15, 182, 221, 61, 52, 37, 35, 62, 55, 98, 249, 61, 26, 248, 123, 62, 157, 224, 247, 60, 5, 93, 114, 61, 101, 229, 51, 190, 117, 221, 138, 190, 67, 79, 2, 62, 49, 231, 73, 62, 38, 236, 147, 62, 131, 36, 199, 189, 177, 255, 137, 62, 201, 195, 132, 61, 52, 226, 13, 62, 55, 120, 70, 60, 147, 169, 85, 61, 34, 113, 134, 61, 60, 134, 126, 61, 188, 202, 115, 190, 26, 65, 251, 190, 52, 237, 186, 189, 179, 38, 24, 62, 215, 245, 15, 62, 114, 1, 50, 186, 224, 172, 92, 61, 251, 17, 41, 62, 185, 82, 54, 60, 252, 196, 111, 189, 147, 211, 229, 61, 43, 169, 209, 189, 236, 79, 214, 188, 104, 138, 54, 62, 233, 144, 229, 59, 87, 173, 83, 62, 141, 173, 69, 62, 199, 179, 208, 58, 207, 111, 157, 188, 111, 89, 42, 62, 36, 119, 76, 188, 58, 241, 20, 190, 142, 175, 58, 62, 146, 211, 131, 61, 141, 118, 93, 61, 201, 227, 35, 189, 219, 198, 53, 62, 202, 98, 67, 61, 180, 45, 38, 190, 235, 27, 141, 62, 235, 11, 255, 188, 83, 149, 65, 62, 169, 34, 90, 189, 222, 122, 0, 191, 219, 60, 169, 188, 244, 129, 7, 62, 255, 152, 13, 190, 211, 32, 196, 61, 119, 249, 199, 61, 20, 173, 31, 61, 73, 178, 187, 189, 178, 37, 42, 62, 196, 162, 60, 189, 27, 97, 238, 62, 136, 244, 5, 62, 63, 118, 43, 62, 41, 24, 148, 61, 115, 165, 10, 62, 48, 22, 143, 61, 79, 9, 163, 189, 185, 148, 130, 62, 74, 209, 166, 60, 31, 99, 149, 189, 85, 176, 244, 61, 163, 18, 15, 62, 93, 129, 63, 62, 132, 198, 151, 189, 89, 77, 83, 62, 230, 118, 11, 190, 89, 113, 46, 62, 69, 164, 153, 189, 151, 171, 179, 188, 139, 215, 228, 188, 178, 97, 66, 190, 123, 7, 70, 190, 21, 92, 245, 190, 101, 230, 13, 62, 198, 112, 101, 189, 253, 33, 150, 187, 233, 253, 2, 190, 146, 79, 136, 188, 253, 134, 15, 190, 176, 246, 102, 62, 226, 61, 169, 190, 34, 125, 39, 190, 151, 239, 148, 62, 216, 27, 52, 188, 174, 200, 183, 62, 76, 34, 131, 188, 236, 137, 237, 190, 223, 46, 171, 189, 221, 206, 60, 62, 118, 32, 48, 190, 170, 18, 25, 189, 79, 77, 120, 61, 89, 142, 98, 190, 110, 186, 162, 62, 68, 246, 184, 61, 186, 9, 107, 58, 70, 8, 187, 61, 157, 171, 13, 62, 92, 65, 207, 61, 140, 226, 124, 60, 180, 196, 240, 188, 231, 1, 39, 62, 156, 30, 219, 60, 10, 61, 42, 61, 87, 218, 158, 62, 140, 99, 19, 62, 49, 205, 49, 61, 228, 15, 245, 60, 240, 130, 70, 187, 204, 207, 134, 61, 82, 217, 78, 189, 48, 26, 41, 61, 161, 129, 242, 61, 38, 159, 22, 190, 16, 163, 13, 191, 157, 254, 186, 61, 132, 108, 130, 190, 113, 175, 119, 189, 52, 235, 221, 61, 18, 104, 141, 61, 42, 50, 215, 60, 145, 162, 65, 61, 110, 56, 194, 61, 76, 3, 220, 189, 36, 215, 84, 62, 24, 64, 30, 190, 215, 237, 53, 190, 69, 59, 0, 190, 134, 168, 47, 190, 46, 122, 176, 61, 172, 244, 186, 187, 91, 73, 185, 61, 47, 114, 162, 189, 61, 219, 193, 190, 226, 177, 151, 61, 209, 52, 110, 58, 224, 192, 112, 190, 11, 95, 81, 190, 179, 255, 30, 190, 159, 219, 0, 61, 88, 169, 244, 186, 48, 107, 42, 190, 130, 75, 76, 190, 99, 171, 174, 62, 43, 82, 121, 62, 192, 89, 169, 190, 112, 191, 144, 190, 170, 118, 129, 61, 41, 229, 163, 189, 197, 167, 116, 62, 126, 246, 39, 61, 160, 54, 150, 190, 226, 34, 149, 62, 189, 223, 124, 60, 198, 56, 247, 61, 243, 143, 98, 62, 230, 159, 65, 190, 10, 83, 213, 190, 144, 15, 168, 189, 70, 232, 86, 188, 174, 239, 124, 62, 220, 103, 55, 62, 80, 130, 251, 185, 42, 75, 173, 61, 34, 113, 113, 189, 49, 137, 36, 191, 168, 146, 119, 190, 133, 117, 31, 189, 145, 55, 152, 190, 124, 254, 90, 191, 72, 31, 29, 190, 243, 0, 156, 60, 196, 227, 126, 62, 16, 56, 140, 60, 3, 134, 219, 61, 24, 249, 133, 62, 142, 3, 47, 62, 222, 111, 30, 60, 116, 110, 103, 190, 180, 99, 32, 62, 19, 66, 140, 189, 194, 62, 165, 60, 172, 187, 239, 188, 94, 101, 37, 62, 142, 115, 221, 61, 236, 220, 29, 187, 141, 100, 243, 189, 92, 219, 95, 59, 96, 214, 22, 190, 224, 108, 179, 189, 138, 183, 157, 186, 224, 106, 117, 61, 51, 9, 183, 189, 158, 180, 59, 189, 210, 185, 235, 59, 237, 203, 61, 190, 87, 209, 88, 62, 44, 255, 243, 61, 104, 3, 182, 60, 112, 93, 234, 61, 183, 112, 213, 61, 134, 174, 137, 189, 87, 104, 7, 62, 8, 246, 202, 61, 68, 98, 150, 62, 85, 14, 142, 190, 73, 159, 174, 61, 12, 18, 61, 62, 213, 57, 180, 61, 44, 94, 152, 190, 202, 10, 29, 191, 225, 0, 43, 61, 114, 101, 189, 190, 92, 45, 241, 189, 237, 174, 132, 62, 60, 214, 5, 191, 252, 203, 74, 189, 176, 173, 141, 189, 205, 131, 22, 190, 245, 31, 78, 62, 63, 138, 234, 190, 238, 34, 169, 190, 224, 159, 21, 61, 200, 170, 35, 62, 160, 49, 56, 62, 103, 247, 135, 190, 213, 28, 161, 189, 240, 75, 147, 62, 38, 100, 108, 62, 171, 88, 81, 190, 65, 159, 8, 63, 37, 159, 199, 62, 203, 255, 76, 61, 105, 255, 154, 190, 35, 245, 230, 61, 38, 221, 84, 61, 195, 186, 43, 62, 20, 39, 186, 190, 15, 6, 51, 188, 90, 10, 49, 190, 17, 241, 22, 190, 1, 14, 140, 61, 59, 75, 42, 190, 210, 80, 98, 189, 155, 119, 74, 61, 19, 103, 215, 60, 156, 210, 62, 62, 180, 105, 78, 189, 37, 122, 147, 187, 58, 34, 55, 61, 75, 248, 8, 62, 205, 122, 249, 59, 81, 37, 102, 190, 207, 82, 26, 61, 215, 77, 146, 61, 61, 126, 184, 189, 94, 206, 231, 188, 223, 44, 29, 61, 206, 233, 48, 61, 76, 170, 208, 187, 141, 44, 51, 62, 124, 244, 66, 190, 39, 54, 65, 61, 240, 249, 83, 62, 44, 118, 208, 189, 229, 101, 23, 62, 187, 133, 32, 61, 82, 194, 148, 61, 105, 86, 194, 62, 234, 218, 150, 190, 125, 17, 27, 61, 164, 171, 163, 189, 60, 82, 16, 62, 169, 119, 59, 191, 46, 42, 146, 190, 153, 79, 148, 61, 143, 221, 239, 189, 64, 43, 13, 62, 109, 232, 157, 62, 171, 137, 32, 191, 106, 190, 215, 187, 192, 206, 32, 62, 231, 209, 104, 189, 42, 218, 26, 190, 204, 59, 48, 191, 123, 88, 133, 61, 226, 201, 203, 190, 218, 73, 211, 187, 117, 230, 23, 191, 17, 30, 242, 190, 217, 95, 21, 189, 255, 150, 149, 61, 179, 181, 168, 190, 78, 216, 77, 62, 230, 243, 191, 189, 91, 145, 88, 190, 168, 20, 206, 61, 101, 205, 74, 61, 122, 21, 14, 62, 2, 13, 165, 189, 39, 134, 78, 190, 3, 146, 140, 61, 105, 52, 66, 189, 215, 72, 177, 62, 202, 105, 184, 189, 39, 30, 165, 189, 254, 147, 185, 61, 219, 10, 106, 189, 233, 41, 146, 62, 152, 231, 134, 60, 31, 160, 219, 190, 99, 192, 71, 62, 45, 77, 73, 62, 167, 108, 65, 61, 54, 158, 74, 62, 131, 243, 243, 189, 235, 14, 45, 62, 221, 157, 39, 62, 171, 78, 92, 62, 213, 52, 140, 60, 32, 143, 106, 61, 226, 231, 180, 61, 106, 96, 52, 189, 175, 245, 0, 61, 160, 64, 135, 190, 222, 82, 166, 189, 178, 150, 231, 189, 187, 65, 84, 190, 164, 149, 189, 187, 37, 230, 76, 189, 109, 74, 130, 188, 130, 5, 140, 190, 92, 95, 131, 62, 66, 70, 150, 190, 25, 35, 25, 62, 48, 211, 132, 189, 207, 230, 83, 62, 142, 180, 137, 190, 93, 98, 99, 188, 156, 182, 126, 189, 55, 222, 132, 59, 209, 99, 192, 61, 70, 66, 163, 61, 33, 230, 94, 190, 24, 203, 31, 189, 142, 117, 152, 188, 94, 48, 146, 189, 227, 19, 179, 190, 135, 148, 173, 190, 173, 32, 77, 190, 116, 32, 1, 191, 71, 149, 225, 61, 114, 52, 15, 190, 164, 176, 113, 189, 131, 208, 140, 189, 224, 161, 191, 189, 253, 59, 138, 190, 87, 68, 219, 190, 254, 9, 185, 62, 139, 165, 181, 190, 172, 167, 160, 62, 9, 147, 72, 62, 241, 1, 20, 62, 14, 111, 189, 189, 23, 67, 17, 189, 86, 151, 210, 189, 253, 93, 154, 60, 248, 61, 38, 190, 191, 214, 207, 189, 200, 227, 0, 61, 233, 74, 60, 61, 16, 50, 39, 61, 114, 14, 30, 62, 34, 2, 10, 62, 134, 160, 165, 61, 65, 153, 23, 62, 30, 178, 100, 189, 92, 198, 29, 62, 104, 46, 103, 61, 73, 130, 184, 189, 152, 111, 128, 190, 14, 157, 47, 62, 187, 66, 120, 62, 237, 111, 213, 188, 25, 199, 43, 61, 5, 224, 182, 189, 160, 117, 34, 62, 223, 83, 185, 190, 148, 88, 129, 59, 222, 36, 15, 60, 139, 42, 70, 61, 169, 249, 97, 190, 130, 234, 173, 190, 135, 237, 19, 62, 228, 188, 18, 60, 197, 213, 234, 188, 117, 184, 76, 190, 123, 158, 12, 60, 175, 58, 134, 189, 243, 104, 60, 190, 177, 162, 227, 189, 139, 37, 91, 60, 37, 15, 205, 62, 121, 81, 186, 188, 216, 93, 173, 60, 43, 42, 51, 190, 42, 135, 222, 61, 186, 217, 187, 61, 215, 163, 136, 60, 253, 164, 54, 62, 142, 38, 60, 190, 210, 146, 105, 190, 182, 35, 70, 189, 20, 204, 200, 61, 230, 207, 187, 62, 28, 175, 28, 190, 13, 245, 193, 62, 13, 201, 206, 188, 217, 245, 196, 61, 216, 13, 125, 190, 122, 109, 139, 62, 140, 120, 50, 61, 159, 147, 118, 61, 108, 152, 159, 190, 12, 188, 15, 191, 38, 213, 42, 190, 227, 247, 26, 190, 39, 183, 0, 190, 132, 237, 227, 61, 187, 50, 165, 189, 143, 161, 208, 190, 162, 58, 76, 61, 217, 158, 163, 189, 4, 140, 210, 62, 253, 60, 118, 189, 171, 122, 116, 190, 48, 163, 72, 62, 163, 229, 24, 62, 166, 44, 192, 190, 253, 43, 253, 62, 6, 3, 243, 189, 95, 231, 137, 189, 8, 45, 132, 190, 206, 131, 197, 61, 221, 27, 27, 62, 98, 131, 93, 62, 180, 240, 8, 62, 138, 108, 26, 190, 229, 239, 3, 61, 104, 128, 19, 62, 148, 164, 116, 189, 162, 54, 181, 60, 42, 127, 174, 62, 34, 26, 157, 189, 234, 82, 246, 189, 183, 131, 70, 189, 60, 214, 143, 190, 162, 200, 102, 190, 119, 197, 51, 190, 9, 111, 28, 61, 243, 98, 49, 188, 222, 29, 57, 188, 239, 186, 161, 189, 204, 171, 35, 190, 151, 165, 237, 60, 154, 166, 32, 61, 120, 128, 224, 189, 135, 68, 82, 189, 237, 80, 148, 61, 190, 216, 96, 190, 212, 153, 18, 189, 132, 93, 35, 190, 29, 176, 104, 190, 234, 228, 5, 62, 220, 223, 20, 61, 74, 5, 127, 61, 92, 74, 12, 190, 62, 76, 102, 61, 23, 119, 168, 189, 122, 63, 163, 189, 45, 122, 11, 190, 24, 80, 13, 189, 31, 103, 195, 60, 220, 178, 12, 189, 192, 227, 242, 61, 142, 254, 66, 189, 129, 174, 9, 189, 3, 91, 49, 190, 13, 61, 153, 61, 27, 128, 158, 59, 190, 122, 48, 62, 28, 54, 44, 188, 93, 2, 166, 188, 143, 177, 2, 190, 65, 204, 32, 189, 121, 243, 33, 190, 238, 176, 42, 190, 141, 235, 190, 61, 188, 151, 30, 62, 251, 139, 25, 190, 45, 7, 149, 61, 107, 105, 181, 189, 214, 203, 168, 189, 53, 13, 3, 190, 145, 61, 25, 61, 64, 105, 253, 61, 34, 174, 250, 59, 21, 136, 6, 189, 200, 253, 0, 62, 146, 128, 122, 61, 5, 100, 42, 190, 93, 13, 73, 189, 123, 128, 167, 189, 82, 223, 244, 58, 6, 130, 75, 61, 223, 126, 180, 61, 160, 189, 160, 186, 82, 134, 20, 189, 29, 181, 202, 61, 241, 16, 101, 189, 103, 232, 34, 62, 115, 63, 238, 189, 6, 0, 204, 189, 138, 100, 3, 189, 153, 182, 176, 62, 152, 87, 116, 190, 24, 187, 159, 190, 205, 116, 142, 61, 140, 59, 147, 62, 242, 92, 177, 190, 132, 164, 146, 191, 251, 12, 146, 61, 105, 38, 197, 190, 238, 29, 175, 62, 62, 10, 139, 62, 211, 215, 178, 190, 191, 231, 134, 62, 218, 251, 234, 189, 16, 242, 92, 61, 212, 93, 43, 190, 145, 122, 235, 190, 74, 163, 135, 191, 135, 76, 29, 191, 67, 219, 210, 189, 145, 218, 187, 61, 220, 78, 86, 190, 83, 97, 106, 188, 46, 224, 149, 189, 157, 30, 136, 62, 215, 75, 195, 191, 184, 213, 191, 62, 90, 12, 97, 62, 10, 75, 114, 61, 36, 125, 4, 191, 50, 250, 130, 189, 163, 20, 163, 61, 114, 8, 55, 62, 58, 140, 40, 190, 11, 117, 45, 189, 87, 85, 141, 62, 156, 163, 59, 61, 161, 182, 156, 190, 153, 155, 52, 191, 90, 75, 156, 61, 237, 65, 162, 190, 73, 101, 57, 190, 77, 5, 109, 61, 3, 27, 172, 190, 66, 47, 108, 189, 213, 229, 96, 190, 60, 138, 168, 61, 227, 178, 189, 61, 188, 178, 168, 190, 177, 82, 143, 188, 111, 161, 5, 190, 150, 47, 113, 60, 147, 75, 100, 62, 184, 129, 214, 190, 144, 242, 176, 61, 224, 6, 228, 62, 64, 111, 180, 62, 210, 183, 131, 190, 139, 80, 225, 61, 73, 52, 161, 62, 41, 17, 78, 62, 210, 140, 114, 190, 91, 100, 184, 59, 151, 230, 126, 60, 120, 181, 13, 189, 102, 151, 0, 190, 72, 129, 103, 190, 237, 210, 205, 61, 12, 174, 46, 61, 125, 0, 177, 61, 140, 150, 68, 62, 8, 5, 61, 62, 116, 135, 126, 62, 62, 138, 168, 189, 216, 9, 117, 189, 95, 124, 60, 60, 48, 32, 148, 61, 112, 69, 132, 189, 90, 162, 61, 190, 18, 83, 63, 61, 166, 64, 241, 61, 205, 153, 90, 189, 246, 216, 166, 61, 154, 192, 6, 190, 196, 80, 69, 62, 195, 160, 191, 61, 58, 62, 44, 62, 54, 229, 56, 190, 47, 28, 55, 188, 27, 83, 42, 62, 216, 79, 200, 62, 89, 138, 8, 62, 16, 72, 31, 62, 58, 58, 234, 189, 14, 90, 176, 189, 23, 117, 16, 190, 157, 251, 1, 190, 61, 18, 155, 189, 99, 154, 54, 190, 95, 120, 198, 187, 236, 90, 188, 61, 153, 199, 228, 61, 43, 188, 71, 189, 89, 167, 207, 60, 77, 193, 51, 190, 21, 221, 140, 189, 127, 127, 210, 189, 203, 211, 253, 188, 60, 224, 110, 188, 38, 133, 19, 189, 137, 8, 211, 189, 1, 1, 4, 190, 159, 15, 229, 188, 153, 24, 14, 62, 200, 70, 217, 189, 177, 193, 31, 189, 47, 162, 56, 61, 71, 37, 63, 61, 111, 49, 241, 189, 202, 135, 156, 61, 251, 34, 10, 61, 169, 78, 246, 61, 146, 222, 179, 60, 157, 23, 227, 189, 94, 230, 143, 189, 130, 26, 23, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 14, 196, 61, 210, 159, 146, 187, 6, 176, 210, 61, 220, 224, 188, 190, 249, 109, 232, 189, 167, 28, 131, 61, 230, 232, 64, 62, 190, 133, 84, 61, 179, 207, 117, 62, 167, 76, 226, 60, 136, 221, 33, 62, 107, 142, 62, 189, 50, 174, 149, 62, 37, 62, 197, 61, 228, 198, 21, 62, 185, 190, 101, 189, 38, 225, 190, 61, 185, 192, 234, 61, 44, 235, 181, 188, 238, 235, 72, 62, 103, 22, 242, 61, 214, 244, 203, 189, 41, 249, 156, 61, 165, 231, 162, 62, 146, 177, 166, 188, 183, 67, 221, 189, 66, 38, 35, 190, 180, 46, 158, 189, 249, 183, 15, 62, 163, 53, 12, 62, 82, 180, 68, 62, 148, 40, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 217, 5, 191, 178, 159, 143, 189, 144, 75, 13, 62, 94, 174, 129, 190, 198, 45, 22, 190, 3, 80, 115, 189, 165, 17, 182, 190, 77, 200, 10, 63, 179, 93, 110, 191, 25, 176, 202, 190, 229, 26, 185, 62, 84, 168, 139, 190, 232, 230, 86, 189, 253, 248, 71, 190, 44, 238, 143, 62, 130, 164, 2, 62, 255, 147, 21, 63, 61, 46, 67, 61, 174, 17, 231, 62, 186, 168, 212, 59, 218, 163, 84, 191, 113, 141, 92, 62, 7, 114, 244, 190, 231, 61, 200, 189, 64, 49, 132, 190, 87, 180, 158, 190, 92, 107, 89, 61, 70, 31, 17, 190, 111, 140, 96, 63, 115, 102, 181, 62, 88, 226, 227, 61, 187, 254, 113, 188, 193, 182, 28, 62, 173, 125, 115, 62, 133, 139, 241, 186, 30, 78, 99, 62, 99, 217, 15, 190, 25, 70, 89, 190, 43, 178, 161, 190, 57, 86, 68, 62, 242, 89, 8, 189, 173, 134, 22, 191, 51, 84, 129, 61, 64, 131, 81, 189, 57, 232, 17, 190, 192, 69, 75, 60, 198, 133, 12, 61, 84, 246, 210, 189, 242, 175, 176, 185, 27, 60, 6, 190, 18, 1, 128, 190, 250, 60, 39, 190, 230, 187, 97, 62, 55, 56, 135, 61, 20, 16, 87, 61, 204, 187, 32, 190, 108, 53, 242, 60, 82, 125, 238, 62, 200, 249, 33, 189, 251, 236, 29, 57, 236, 216, 110, 189, 98, 125, 22, 190, 53, 172, 84, 189, 20, 44, 8, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 154, 168, 188, 39, 133, 190, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {153, 251, 72, 63, 190, 56, 73, 191, 254, 227, 222, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {48, 162, 75, 63, 251, 30, 187, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0046/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}