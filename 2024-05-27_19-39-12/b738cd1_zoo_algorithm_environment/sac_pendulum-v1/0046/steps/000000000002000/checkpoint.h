// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {85, 120, 180, 190, 152, 26, 155, 60, 204, 96, 78, 61, 119, 220, 207, 190, 200, 254, 102, 190, 137, 239, 244, 62, 48, 245, 142, 62, 18, 222, 118, 191, 122, 168, 121, 62, 241, 108, 67, 62, 243, 131, 154, 61, 157, 100, 7, 63, 40, 179, 178, 190, 25, 90, 63, 191, 186, 93, 165, 190, 163, 227, 72, 190, 102, 187, 202, 62, 148, 129, 152, 62, 107, 222, 206, 61, 27, 10, 142, 190, 116, 171, 148, 62, 150, 117, 11, 63, 55, 171, 22, 63, 115, 37, 184, 62, 248, 117, 155, 190, 3, 18, 66, 63, 51, 19, 23, 190, 238, 58, 37, 190, 136, 195, 37, 60, 186, 183, 155, 190, 67, 24, 52, 190, 100, 163, 93, 63, 54, 51, 51, 190, 173, 35, 93, 190, 183, 245, 177, 62, 196, 109, 157, 61, 89, 40, 180, 189, 160, 151, 105, 191, 25, 148, 105, 61, 209, 179, 194, 62, 31, 82, 69, 63, 60, 118, 222, 62, 105, 60, 250, 190, 10, 178, 171, 62, 189, 54, 178, 62, 11, 198, 164, 62, 213, 51, 57, 190, 163, 17, 17, 63, 217, 42, 2, 191, 226, 192, 44, 190, 126, 155, 69, 190, 166, 176, 76, 62, 140, 242, 165, 61, 141, 139, 249, 190, 127, 4, 227, 62, 65, 224, 240, 62, 176, 232, 251, 62, 37, 141, 147, 190, 91, 170, 66, 63, 83, 96, 207, 190, 94, 165, 213, 62, 217, 129, 25, 63, 117, 106, 166, 190, 133, 129, 125, 189, 101, 113, 150, 189, 214, 111, 195, 190, 243, 10, 146, 62, 51, 63, 52, 63, 143, 191, 57, 190, 52, 244, 129, 190, 233, 125, 74, 63, 45, 68, 150, 61, 142, 216, 142, 61, 59, 46, 36, 62, 180, 164, 186, 186, 210, 164, 3, 63, 72, 182, 84, 62, 55, 165, 197, 190, 131, 110, 217, 62, 144, 239, 123, 62, 95, 41, 125, 61, 20, 228, 146, 190, 156, 188, 15, 63, 245, 250, 202, 190, 231, 139, 215, 62, 130, 29, 28, 190, 135, 52, 179, 61, 78, 139, 38, 63, 34, 120, 102, 62, 75, 42, 244, 190, 32, 116, 222, 62, 169, 239, 217, 190, 90, 209, 156, 190, 140, 216, 143, 190, 139, 162, 0, 191, 0, 199, 120, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {36, 102, 23, 191, 53, 226, 198, 190, 237, 4, 41, 63, 110, 63, 5, 191, 19, 108, 121, 62, 41, 61, 178, 61, 177, 231, 223, 62, 130, 86, 38, 61, 209, 12, 62, 190, 19, 17, 212, 62, 180, 227, 34, 187, 30, 98, 84, 62, 3, 143, 237, 62, 128, 216, 64, 190, 103, 234, 8, 63, 33, 189, 215, 60, 8, 21, 5, 189, 52, 215, 16, 190, 0, 80, 229, 190, 103, 59, 64, 190, 34, 249, 4, 63, 203, 45, 214, 62, 72, 103, 25, 63, 255, 221, 168, 189, 246, 47, 51, 190, 58, 176, 84, 190, 84, 173, 162, 190, 178, 246, 147, 190, 230, 123, 0, 191, 255, 214, 9, 61, 144, 18, 22, 190, 88, 128, 69, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 209, 25, 62, 9, 27, 73, 61, 201, 112, 137, 190, 167, 69, 19, 190, 129, 166, 119, 190, 175, 158, 211, 189, 154, 237, 46, 190, 50, 106, 139, 60, 156, 71, 200, 62, 138, 201, 86, 61, 156, 43, 103, 62, 9, 59, 77, 62, 22, 83, 219, 188, 178, 109, 203, 189, 125, 62, 78, 62, 89, 135, 214, 189, 154, 164, 199, 189, 6, 250, 4, 189, 54, 7, 131, 188, 177, 102, 34, 62, 219, 171, 107, 62, 224, 98, 242, 61, 237, 61, 231, 187, 222, 64, 112, 62, 98, 198, 34, 189, 89, 183, 6, 191, 85, 27, 219, 60, 231, 242, 94, 61, 212, 189, 29, 61, 223, 201, 166, 190, 208, 114, 96, 190, 32, 167, 125, 189, 222, 110, 146, 189, 54, 105, 199, 59, 120, 64, 129, 189, 36, 179, 64, 189, 144, 143, 38, 190, 44, 212, 251, 60, 85, 98, 240, 187, 27, 151, 172, 189, 32, 108, 247, 189, 219, 217, 34, 61, 150, 9, 162, 189, 232, 249, 170, 60, 139, 74, 143, 189, 67, 176, 245, 189, 26, 157, 206, 61, 137, 134, 153, 189, 49, 244, 215, 61, 83, 2, 21, 189, 31, 208, 218, 188, 204, 110, 176, 189, 73, 51, 47, 190, 192, 110, 201, 61, 6, 72, 230, 60, 237, 108, 39, 190, 1, 154, 31, 62, 148, 207, 158, 61, 36, 75, 185, 61, 5, 81, 101, 188, 160, 233, 253, 189, 43, 176, 202, 61, 218, 210, 203, 189, 48, 24, 216, 188, 36, 74, 163, 61, 1, 220, 184, 61, 13, 141, 173, 62, 228, 46, 116, 188, 159, 158, 12, 62, 143, 76, 136, 60, 116, 242, 186, 189, 125, 95, 110, 190, 181, 245, 209, 189, 75, 164, 36, 190, 54, 226, 149, 189, 242, 36, 52, 189, 144, 34, 142, 61, 229, 37, 246, 189, 155, 158, 197, 61, 78, 63, 14, 190, 235, 127, 170, 189, 187, 46, 180, 61, 200, 104, 128, 190, 189, 135, 110, 61, 177, 29, 26, 187, 194, 15, 109, 61, 255, 6, 29, 190, 49, 194, 197, 60, 128, 218, 15, 62, 95, 194, 74, 62, 227, 145, 124, 61, 223, 46, 199, 61, 244, 211, 29, 190, 104, 198, 201, 61, 167, 211, 67, 62, 28, 123, 30, 59, 119, 99, 46, 189, 220, 168, 19, 190, 75, 117, 26, 61, 84, 25, 3, 62, 162, 17, 254, 60, 117, 186, 206, 188, 136, 191, 29, 190, 144, 32, 212, 188, 62, 81, 143, 190, 168, 255, 16, 62, 36, 29, 41, 188, 135, 118, 58, 190, 164, 19, 157, 188, 134, 200, 56, 59, 165, 59, 249, 61, 146, 115, 5, 62, 188, 118, 16, 190, 70, 235, 14, 62, 235, 151, 21, 62, 219, 227, 24, 190, 206, 128, 212, 59, 214, 213, 21, 62, 225, 106, 136, 190, 104, 128, 63, 190, 41, 62, 92, 189, 179, 198, 85, 61, 36, 136, 52, 190, 123, 44, 88, 60, 58, 15, 25, 190, 131, 17, 56, 62, 59, 162, 147, 62, 218, 185, 236, 188, 140, 167, 34, 62, 108, 202, 162, 188, 255, 227, 192, 61, 91, 203, 19, 62, 101, 223, 149, 59, 171, 116, 32, 190, 81, 84, 24, 190, 92, 92, 224, 61, 155, 246, 192, 189, 32, 195, 133, 61, 119, 157, 118, 57, 27, 183, 127, 189, 161, 61, 218, 60, 35, 7, 57, 60, 230, 188, 6, 189, 20, 100, 172, 58, 92, 88, 198, 61, 143, 209, 209, 61, 104, 209, 172, 189, 196, 10, 29, 190, 136, 82, 72, 188, 87, 14, 72, 190, 141, 195, 248, 189, 73, 152, 42, 188, 250, 33, 29, 60, 243, 211, 1, 189, 203, 12, 154, 61, 204, 110, 206, 189, 23, 33, 135, 189, 15, 89, 5, 62, 45, 204, 10, 189, 183, 88, 81, 189, 139, 103, 40, 62, 133, 179, 0, 62, 73, 86, 2, 189, 217, 197, 228, 61, 199, 0, 177, 61, 36, 46, 16, 189, 202, 157, 19, 62, 162, 227, 3, 187, 122, 204, 119, 61, 196, 70, 9, 62, 111, 119, 236, 61, 72, 112, 3, 190, 116, 221, 181, 61, 6, 71, 105, 62, 210, 222, 18, 62, 159, 54, 99, 61, 89, 25, 245, 61, 177, 189, 227, 61, 250, 140, 71, 190, 29, 91, 213, 61, 157, 112, 203, 61, 159, 222, 238, 189, 134, 137, 37, 62, 112, 126, 128, 61, 75, 129, 220, 61, 122, 111, 52, 190, 56, 55, 200, 189, 93, 195, 120, 189, 18, 159, 168, 61, 250, 117, 205, 61, 198, 179, 135, 190, 5, 95, 57, 62, 145, 14, 77, 61, 154, 160, 92, 188, 116, 248, 165, 189, 155, 141, 45, 190, 107, 51, 8, 190, 86, 2, 14, 61, 98, 157, 150, 189, 10, 231, 68, 189, 195, 41, 132, 61, 128, 52, 146, 190, 126, 16, 164, 61, 53, 125, 180, 188, 188, 148, 16, 62, 81, 233, 1, 62, 150, 199, 10, 62, 160, 136, 3, 189, 17, 192, 159, 190, 52, 151, 117, 61, 60, 90, 166, 189, 5, 187, 29, 186, 92, 130, 207, 189, 210, 117, 134, 190, 9, 189, 102, 61, 160, 177, 3, 189, 224, 173, 23, 190, 212, 180, 9, 62, 225, 91, 74, 188, 192, 157, 161, 189, 14, 55, 28, 190, 189, 187, 218, 189, 195, 224, 236, 189, 65, 25, 22, 189, 139, 175, 43, 62, 235, 59, 164, 61, 145, 17, 166, 62, 224, 11, 81, 190, 130, 62, 159, 61, 195, 138, 79, 61, 162, 133, 157, 61, 52, 220, 119, 190, 23, 49, 110, 190, 6, 205, 132, 60, 235, 111, 225, 189, 89, 24, 143, 61, 209, 185, 252, 61, 39, 95, 251, 190, 74, 12, 77, 62, 215, 25, 207, 189, 55, 118, 144, 189, 210, 103, 251, 188, 148, 243, 138, 190, 216, 53, 87, 190, 246, 212, 22, 190, 143, 138, 147, 60, 244, 138, 130, 190, 243, 182, 132, 188, 76, 148, 36, 190, 145, 64, 222, 60, 197, 163, 146, 189, 187, 35, 254, 59, 80, 89, 110, 61, 213, 56, 121, 60, 4, 0, 54, 62, 54, 137, 30, 190, 120, 56, 146, 189, 92, 220, 89, 190, 56, 85, 13, 191, 157, 130, 190, 190, 240, 11, 26, 189, 238, 199, 158, 61, 36, 89, 36, 190, 156, 192, 160, 189, 110, 200, 82, 62, 38, 127, 91, 62, 66, 186, 23, 62, 247, 64, 44, 62, 42, 37, 190, 190, 26, 56, 135, 189, 176, 129, 10, 62, 31, 165, 210, 189, 39, 152, 26, 61, 237, 235, 134, 189, 218, 143, 249, 189, 195, 246, 103, 61, 186, 104, 16, 62, 20, 117, 222, 187, 190, 52, 118, 62, 135, 157, 9, 62, 182, 69, 44, 60, 90, 52, 20, 191, 77, 141, 38, 62, 33, 49, 202, 189, 108, 57, 122, 188, 35, 22, 65, 190, 150, 108, 201, 190, 17, 145, 140, 61, 42, 212, 175, 188, 171, 46, 228, 189, 167, 8, 198, 61, 43, 169, 247, 189, 75, 131, 58, 190, 107, 141, 193, 60, 230, 1, 189, 61, 88, 97, 14, 189, 2, 77, 140, 188, 192, 230, 41, 190, 186, 94, 5, 190, 30, 86, 54, 189, 8, 174, 194, 61, 219, 107, 48, 190, 169, 63, 24, 190, 240, 126, 185, 61, 183, 152, 0, 62, 91, 127, 1, 190, 53, 162, 121, 61, 41, 28, 97, 61, 159, 179, 167, 61, 191, 115, 229, 61, 68, 86, 16, 188, 163, 27, 255, 61, 218, 58, 167, 60, 35, 66, 24, 62, 76, 106, 47, 62, 16, 253, 174, 61, 249, 119, 199, 61, 109, 88, 61, 189, 154, 36, 242, 61, 218, 182, 16, 190, 241, 170, 32, 62, 61, 219, 196, 61, 3, 208, 183, 61, 104, 186, 16, 60, 79, 135, 209, 61, 162, 164, 59, 62, 228, 244, 121, 187, 107, 250, 177, 190, 22, 203, 145, 190, 76, 198, 23, 189, 163, 133, 97, 187, 182, 251, 137, 60, 251, 231, 96, 62, 75, 86, 208, 190, 251, 186, 180, 61, 23, 225, 128, 189, 112, 43, 128, 189, 48, 43, 249, 61, 116, 200, 81, 190, 103, 106, 56, 189, 55, 22, 72, 190, 118, 215, 153, 61, 17, 184, 167, 188, 154, 33, 167, 189, 35, 62, 200, 61, 219, 50, 183, 61, 99, 156, 243, 189, 123, 229, 216, 61, 174, 63, 186, 61, 71, 178, 88, 62, 65, 248, 211, 188, 114, 139, 78, 187, 50, 236, 198, 60, 218, 247, 240, 189, 37, 181, 32, 189, 40, 84, 177, 61, 136, 243, 79, 61, 137, 9, 254, 59, 132, 45, 191, 60, 239, 209, 204, 61, 205, 149, 248, 62, 71, 157, 135, 189, 218, 154, 249, 61, 89, 82, 92, 62, 144, 183, 163, 60, 61, 47, 34, 62, 132, 195, 72, 62, 242, 61, 131, 61, 164, 165, 121, 190, 95, 164, 98, 190, 148, 3, 231, 61, 227, 161, 40, 62, 210, 232, 124, 62, 81, 192, 23, 190, 162, 237, 116, 62, 107, 164, 63, 62, 36, 227, 13, 62, 130, 17, 56, 61, 225, 163, 104, 189, 230, 30, 147, 60, 189, 1, 186, 61, 49, 217, 65, 190, 169, 237, 82, 190, 137, 254, 57, 190, 178, 115, 24, 62, 186, 113, 69, 62, 6, 89, 44, 60, 126, 136, 24, 62, 255, 7, 25, 62, 191, 237, 102, 61, 250, 248, 202, 189, 13, 111, 222, 60, 234, 110, 121, 189, 100, 199, 10, 189, 176, 245, 90, 62, 226, 44, 160, 189, 141, 40, 6, 62, 82, 160, 7, 62, 168, 22, 151, 58, 156, 160, 122, 188, 246, 232, 12, 62, 214, 130, 15, 61, 61, 101, 203, 189, 110, 158, 65, 62, 56, 111, 32, 61, 242, 47, 41, 61, 63, 185, 161, 189, 172, 5, 60, 62, 195, 101, 67, 61, 27, 227, 37, 190, 203, 66, 13, 62, 143, 162, 10, 189, 17, 58, 37, 62, 91, 186, 69, 189, 249, 174, 167, 190, 125, 17, 33, 188, 101, 30, 8, 62, 222, 137, 144, 188, 233, 211, 173, 61, 14, 186, 9, 62, 148, 35, 41, 190, 134, 228, 203, 61, 150, 125, 73, 62, 253, 252, 134, 189, 208, 228, 239, 62, 61, 88, 149, 61, 15, 54, 50, 62, 206, 169, 236, 61, 254, 248, 51, 189, 167, 123, 4, 61, 76, 183, 146, 60, 244, 39, 115, 62, 217, 29, 132, 189, 184, 145, 38, 189, 132, 218, 23, 62, 140, 219, 193, 61, 117, 221, 25, 62, 119, 138, 17, 190, 228, 189, 75, 62, 219, 181, 129, 59, 214, 113, 46, 62, 163, 73, 88, 189, 170, 222, 156, 189, 110, 174, 187, 189, 16, 16, 9, 189, 145, 174, 17, 190, 14, 8, 154, 190, 235, 87, 24, 189, 54, 188, 103, 189, 224, 75, 80, 61, 84, 45, 246, 59, 205, 80, 241, 61, 237, 158, 36, 190, 213, 122, 5, 190, 149, 25, 102, 189, 145, 106, 239, 61, 62, 111, 30, 62, 9, 57, 186, 189, 215, 89, 116, 62, 218, 170, 176, 189, 7, 144, 165, 190, 186, 22, 81, 62, 209, 138, 98, 189, 55, 30, 18, 61, 23, 192, 135, 189, 204, 58, 162, 61, 189, 166, 133, 189, 65, 246, 99, 62, 153, 205, 243, 60, 120, 185, 86, 189, 191, 183, 238, 60, 112, 131, 7, 59, 237, 63, 207, 61, 87, 186, 140, 61, 67, 154, 28, 62, 94, 136, 160, 61, 42, 248, 28, 190, 95, 2, 163, 61, 168, 193, 47, 62, 9, 155, 203, 61, 146, 245, 48, 61, 44, 237, 94, 189, 170, 11, 103, 61, 122, 27, 172, 61, 253, 179, 221, 61, 247, 156, 31, 189, 179, 195, 227, 61, 207, 227, 253, 189, 88, 182, 154, 190, 7, 51, 69, 62, 105, 111, 223, 189, 85, 40, 171, 189, 55, 67, 77, 62, 62, 6, 169, 61, 68, 209, 105, 60, 155, 231, 233, 61, 3, 7, 48, 62, 178, 213, 239, 189, 232, 128, 60, 62, 9, 128, 139, 61, 39, 47, 231, 188, 141, 254, 4, 189, 200, 13, 48, 189, 50, 144, 130, 61, 172, 244, 186, 187, 34, 147, 104, 61, 171, 179, 20, 61, 145, 88, 105, 189, 127, 212, 27, 62, 182, 246, 75, 189, 251, 39, 35, 190, 10, 30, 168, 61, 179, 255, 30, 190, 88, 196, 133, 189, 57, 36, 165, 59, 157, 121, 27, 190, 187, 203, 156, 61, 122, 141, 31, 62, 235, 107, 46, 62, 122, 111, 156, 190, 229, 136, 161, 190, 108, 202, 3, 188, 17, 222, 79, 190, 212, 78, 33, 59, 152, 96, 233, 61, 220, 92, 113, 190, 8, 0, 233, 61, 173, 128, 209, 61, 225, 10, 236, 60, 95, 23, 170, 61, 82, 48, 116, 190, 205, 177, 219, 189, 150, 141, 14, 188, 20, 54, 203, 188, 62, 206, 10, 189, 232, 215, 131, 61, 80, 130, 251, 185, 116, 38, 5, 62, 226, 205, 194, 189, 85, 20, 18, 61, 40, 18, 28, 190, 238, 195, 208, 189, 130, 219, 154, 188, 22, 182, 58, 190, 121, 0, 29, 190, 193, 112, 140, 186, 249, 14, 133, 62, 153, 238, 31, 62, 213, 3, 50, 62, 23, 167, 28, 62, 174, 105, 4, 62, 187, 103, 35, 189, 28, 172, 210, 189, 50, 169, 30, 62, 138, 179, 31, 61, 77, 82, 170, 189, 92, 170, 176, 188, 164, 220, 52, 62, 250, 162, 18, 61, 203, 38, 119, 61, 228, 243, 208, 189, 236, 55, 189, 61, 195, 70, 61, 189, 124, 160, 114, 186, 13, 112, 181, 60, 254, 220, 139, 61, 83, 232, 253, 189, 102, 67, 105, 187, 154, 208, 235, 59, 127, 67, 190, 189, 123, 216, 52, 62, 82, 113, 81, 62, 145, 205, 28, 190, 37, 168, 22, 62, 48, 242, 180, 61, 210, 188, 67, 60, 87, 104, 7, 62, 212, 163, 176, 61, 235, 25, 161, 62, 143, 184, 37, 190, 249, 89, 77, 62, 190, 110, 20, 62, 32, 251, 205, 61, 195, 115, 136, 190, 38, 210, 186, 190, 205, 220, 150, 60, 30, 176, 66, 190, 194, 231, 101, 189, 88, 150, 165, 62, 225, 60, 171, 190, 3, 222, 110, 60, 194, 95, 200, 60, 177, 44, 217, 189, 80, 188, 24, 62, 192, 254, 183, 190, 63, 106, 89, 190, 68, 201, 24, 60, 182, 29, 9, 62, 28, 16, 206, 61, 156, 171, 65, 61, 213, 28, 161, 189, 157, 190, 73, 62, 246, 125, 47, 61, 53, 203, 160, 189, 51, 248, 48, 62, 241, 30, 121, 62, 239, 153, 200, 189, 139, 222, 131, 189, 188, 6, 231, 61, 245, 111, 152, 61, 162, 220, 56, 62, 217, 76, 82, 190, 204, 203, 105, 61, 1, 188, 61, 190, 5, 150, 38, 190, 104, 205, 206, 60, 218, 76, 184, 189, 7, 2, 111, 189, 226, 178, 227, 61, 90, 94, 231, 188, 73, 29, 99, 62, 1, 86, 133, 188, 79, 188, 68, 60, 207, 143, 247, 61, 37, 235, 19, 62, 36, 43, 106, 61, 127, 183, 196, 189, 126, 40, 203, 61, 44, 190, 170, 61, 18, 238, 171, 189, 12, 96, 155, 189, 47, 142, 205, 60, 123, 236, 48, 61, 22, 67, 106, 61, 86, 54, 154, 61, 243, 236, 1, 190, 47, 195, 52, 190, 155, 145, 90, 62, 41, 224, 154, 189, 22, 255, 107, 62, 187, 133, 32, 61, 42, 34, 41, 60, 87, 60, 65, 62, 83, 104, 156, 189, 9, 118, 227, 189, 96, 87, 196, 189, 158, 72, 250, 186, 129, 159, 216, 189, 66, 233, 52, 190, 161, 153, 10, 62, 145, 50, 144, 188, 97, 171, 174, 61, 63, 231, 126, 61, 49, 206, 86, 186, 14, 39, 10, 190, 105, 182, 27, 62, 0, 85, 169, 60, 20, 68, 174, 189, 218, 70, 245, 189, 121, 112, 120, 61, 110, 172, 1, 190, 89, 84, 158, 61, 151, 76, 198, 189, 190, 32, 210, 189, 217, 95, 21, 189, 64, 183, 9, 62, 217, 254, 19, 62, 25, 58, 15, 62, 50, 145, 209, 61, 16, 234, 149, 189, 186, 178, 191, 188, 92, 208, 82, 189, 28, 127, 13, 62, 11, 128, 200, 189, 15, 5, 198, 60, 201, 129, 1, 61, 174, 47, 58, 60, 222, 118, 152, 61, 27, 212, 165, 188, 22, 170, 207, 189, 67, 232, 162, 189, 165, 61, 246, 189, 211, 101, 0, 62, 32, 142, 3, 190, 117, 97, 155, 189, 155, 211, 3, 62, 187, 114, 134, 189, 2, 16, 175, 61, 149, 232, 46, 62, 14, 29, 133, 189, 44, 146, 160, 61, 222, 50, 32, 61, 239, 76, 170, 61, 186, 95, 147, 188, 9, 47, 142, 189, 200, 179, 226, 189, 56, 101, 52, 189, 119, 166, 4, 62, 14, 180, 150, 60, 19, 26, 47, 190, 86, 240, 150, 61, 92, 36, 41, 190, 156, 105, 41, 189, 7, 166, 116, 189, 109, 74, 130, 188, 174, 106, 186, 188, 88, 62, 175, 61, 190, 107, 228, 189, 220, 149, 186, 187, 114, 144, 228, 61, 243, 210, 248, 61, 109, 190, 14, 190, 9, 99, 6, 62, 50, 81, 238, 189, 53, 56, 199, 61, 253, 111, 149, 61, 231, 143, 228, 189, 3, 101, 213, 189, 70, 154, 167, 189, 36, 146, 236, 189, 42, 192, 137, 189, 92, 4, 22, 190, 87, 18, 198, 189, 82, 202, 30, 62, 73, 105, 32, 190, 12, 117, 139, 61, 102, 178, 26, 60, 247, 32, 96, 189, 131, 208, 140, 189, 4, 194, 41, 62, 119, 181, 212, 189, 207, 236, 227, 189, 254, 124, 50, 62, 164, 62, 140, 185, 146, 131, 205, 61, 51, 212, 223, 61, 202, 128, 20, 62, 207, 210, 9, 61, 147, 201, 81, 189, 126, 120, 85, 60, 106, 166, 7, 189, 117, 47, 154, 60, 79, 146, 214, 189, 3, 34, 121, 188, 97, 1, 150, 61, 89, 71, 31, 61, 221, 136, 56, 62, 234, 104, 221, 61, 247, 49, 86, 189, 203, 225, 255, 61, 35, 7, 218, 60, 247, 30, 37, 62, 13, 37, 24, 61, 50, 213, 58, 189, 166, 61, 43, 190, 26, 142, 45, 62, 163, 93, 97, 62, 240, 107, 29, 189, 240, 102, 126, 60, 66, 205, 69, 189, 137, 118, 34, 62, 72, 137, 183, 190, 35, 228, 224, 189, 240, 209, 113, 187, 173, 52, 128, 61, 120, 229, 80, 190, 1, 249, 55, 190, 28, 237, 2, 62, 171, 209, 27, 60, 232, 118, 228, 61, 116, 166, 39, 190, 163, 101, 216, 60, 112, 234, 217, 189, 213, 33, 115, 61, 106, 241, 52, 189, 212, 17, 165, 188, 249, 136, 226, 62, 157, 182, 10, 60, 128, 208, 19, 61, 229, 156, 176, 188, 42, 222, 116, 61, 251, 104, 94, 61, 126, 142, 67, 62, 35, 146, 43, 62, 38, 173, 185, 189, 57, 233, 27, 190, 105, 149, 5, 189, 199, 243, 203, 61, 167, 166, 152, 62, 38, 151, 22, 190, 17, 19, 161, 62, 225, 164, 138, 61, 123, 246, 196, 61, 83, 104, 87, 190, 73, 232, 219, 61, 118, 27, 53, 61, 67, 226, 146, 61, 164, 101, 138, 190, 158, 77, 25, 190, 197, 96, 133, 189, 227, 247, 26, 190, 5, 113, 56, 189, 24, 178, 19, 62, 236, 233, 49, 190, 17, 127, 238, 189, 120, 19, 40, 61, 225, 146, 247, 189, 76, 84, 22, 62, 220, 233, 166, 189, 57, 216, 239, 189, 112, 11, 130, 189, 22, 84, 36, 62, 105, 109, 249, 189, 38, 218, 12, 62, 184, 34, 138, 189, 156, 126, 253, 189, 169, 21, 197, 187, 226, 118, 244, 60, 183, 149, 15, 190, 148, 51, 239, 61, 187, 36, 182, 61, 239, 148, 99, 189, 136, 35, 195, 189, 12, 177, 47, 190, 148, 164, 116, 189, 0, 28, 201, 189, 87, 236, 208, 188, 100, 161, 2, 190, 16, 107, 206, 189, 155, 98, 216, 189, 121, 193, 254, 61, 241, 255, 210, 61, 25, 204, 51, 190, 62, 71, 168, 61, 227, 208, 107, 59, 148, 157, 151, 60, 137, 212, 137, 189, 90, 221, 188, 189, 203, 202, 85, 61, 210, 237, 166, 61, 120, 128, 224, 189, 79, 202, 141, 188, 237, 80, 148, 61, 57, 26, 249, 189, 13, 180, 197, 188, 19, 19, 183, 189, 173, 94, 36, 190, 49, 90, 25, 62, 200, 14, 28, 61, 74, 5, 127, 61, 96, 122, 202, 189, 62, 76, 102, 61, 97, 181, 150, 189, 75, 95, 135, 189, 246, 80, 150, 189, 230, 204, 237, 188, 31, 103, 195, 60, 109, 82, 12, 189, 95, 10, 35, 62, 142, 254, 66, 189, 101, 147, 192, 188, 186, 85, 52, 190, 120, 43, 199, 61, 24, 222, 148, 60, 190, 122, 48, 62, 112, 192, 143, 186, 65, 89, 6, 59, 242, 129, 241, 189, 192, 159, 204, 188, 151, 7, 32, 190, 2, 217, 28, 190, 62, 132, 208, 61, 69, 103, 49, 62, 99, 183, 3, 190, 163, 223, 193, 61, 151, 7, 173, 189, 50, 153, 147, 189, 234, 39, 0, 190, 150, 182, 37, 61, 193, 202, 16, 62, 125, 50, 148, 60, 2, 219, 23, 188, 220, 152, 6, 62, 169, 132, 187, 61, 53, 97, 12, 190, 150, 250, 226, 188, 161, 138, 115, 189, 197, 31, 231, 59, 6, 130, 75, 61, 139, 181, 220, 61, 207, 142, 169, 59, 0, 70, 207, 187, 190, 160, 219, 61, 86, 45, 241, 188, 112, 73, 43, 62, 122, 70, 226, 189, 6, 0, 204, 189, 215, 176, 208, 189, 194, 240, 186, 62, 6, 182, 81, 190, 249, 204, 12, 60, 109, 29, 31, 189, 115, 12, 120, 62, 19, 3, 182, 190, 36, 193, 66, 191, 245, 184, 5, 62, 59, 28, 57, 190, 182, 97, 128, 62, 207, 119, 190, 62, 59, 74, 158, 190, 78, 25, 85, 62, 132, 184, 58, 189, 133, 135, 0, 62, 213, 11, 92, 190, 27, 39, 232, 190, 13, 44, 194, 190, 93, 84, 235, 190, 4, 52, 155, 188, 41, 137, 15, 188, 99, 107, 104, 190, 83, 97, 106, 188, 104, 10, 55, 190, 176, 183, 12, 62, 142, 252, 238, 190, 199, 226, 38, 62, 22, 120, 18, 60, 249, 236, 33, 62, 247, 224, 153, 61, 50, 250, 130, 189, 131, 106, 165, 61, 174, 94, 79, 62, 66, 46, 59, 189, 233, 44, 3, 62, 131, 169, 118, 62, 7, 216, 95, 61, 105, 48, 146, 190, 212, 87, 203, 190, 67, 22, 149, 61, 175, 170, 82, 190, 95, 0, 215, 189, 183, 3, 41, 62, 28, 20, 100, 190, 156, 197, 166, 60, 26, 6, 228, 189, 67, 166, 53, 62, 195, 124, 94, 189, 182, 40, 121, 190, 115, 85, 222, 61, 43, 108, 90, 190, 172, 96, 4, 188, 97, 100, 187, 61, 124, 173, 46, 190, 144, 242, 176, 61, 56, 105, 93, 62, 246, 201, 45, 62, 136, 108, 118, 189, 229, 107, 39, 190, 93, 3, 78, 61, 164, 79, 204, 60, 127, 92, 239, 61, 6, 84, 179, 59, 190, 207, 220, 60, 241, 190, 231, 189, 87, 40, 17, 190, 21, 234, 46, 190, 106, 248, 154, 189, 120, 60, 242, 61, 184, 222, 7, 62, 27, 158, 197, 61, 236, 233, 13, 62, 20, 123, 40, 62, 121, 149, 9, 190, 29, 36, 81, 61, 204, 81, 229, 61, 179, 159, 147, 189, 217, 65, 134, 189, 36, 252, 2, 190, 18, 55, 195, 61, 129, 112, 32, 62, 180, 221, 236, 189, 13, 20, 193, 188, 249, 34, 42, 190, 157, 201, 202, 61, 236, 49, 125, 189, 226, 61, 44, 62, 106, 78, 1, 190, 116, 200, 204, 60, 103, 160, 245, 61, 74, 16, 44, 62, 45, 189, 16, 62, 110, 200, 222, 186, 144, 90, 144, 189, 14, 90, 176, 189, 23, 117, 16, 190, 157, 251, 1, 190, 61, 18, 155, 189, 88, 177, 44, 190, 191, 130, 194, 186, 185, 232, 189, 61, 176, 187, 240, 61, 99, 80, 104, 188, 115, 104, 91, 61, 12, 228, 15, 190, 239, 190, 86, 189, 79, 15, 211, 189, 198, 37, 214, 188, 236, 170, 24, 59, 38, 133, 19, 189, 103, 177, 193, 189, 232, 207, 218, 189, 169, 220, 226, 188, 207, 157, 41, 62, 139, 95, 146, 189, 169, 20, 55, 188, 214, 142, 173, 61, 101, 208, 154, 61, 111, 49, 241, 189, 143, 124, 207, 61, 139, 79, 12, 61, 166, 91, 20, 62, 146, 222, 179, 60, 118, 199, 171, 189, 7, 90, 139, 189, 191, 78, 25, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 170, 191, 60, 90, 207, 145, 189, 77, 70, 219, 61, 37, 117, 112, 190, 162, 24, 176, 189, 65, 133, 148, 189, 111, 45, 117, 61, 214, 129, 190, 61, 255, 186, 225, 61, 196, 11, 26, 190, 7, 61, 28, 62, 93, 10, 154, 189, 179, 65, 41, 62, 214, 102, 0, 61, 74, 198, 10, 62, 240, 117, 157, 60, 74, 85, 54, 188, 158, 55, 175, 59, 30, 41, 24, 188, 7, 28, 0, 62, 203, 32, 1, 189, 93, 93, 133, 189, 114, 83, 248, 189, 4, 219, 96, 62, 164, 199, 110, 188, 64, 99, 32, 189, 197, 183, 0, 190, 8, 222, 116, 189, 18, 14, 255, 61, 247, 86, 50, 62, 143, 82, 27, 62, 43, 177, 48, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 198, 140, 190, 204, 75, 108, 189, 210, 183, 187, 61, 155, 155, 233, 189, 132, 135, 26, 190, 72, 161, 150, 189, 248, 163, 78, 190, 199, 164, 157, 62, 115, 4, 19, 191, 37, 153, 136, 189, 115, 35, 243, 61, 173, 17, 120, 190, 249, 141, 47, 189, 18, 12, 95, 190, 86, 91, 46, 62, 119, 13, 6, 62, 47, 67, 19, 62, 162, 94, 40, 61, 89, 68, 127, 62, 69, 26, 191, 61, 188, 155, 18, 190, 189, 98, 213, 61, 155, 189, 17, 60, 123, 188, 223, 189, 243, 124, 102, 190, 105, 224, 178, 188, 203, 152, 166, 186, 208, 227, 17, 190, 91, 191, 33, 63, 55, 11, 65, 62, 133, 213, 128, 61, 12, 185, 173, 189, 25, 131, 195, 61, 247, 91, 147, 61, 118, 41, 177, 188, 168, 28, 0, 62, 35, 222, 18, 190, 113, 241, 65, 190, 148, 113, 76, 190, 180, 251, 31, 62, 156, 201, 210, 189, 31, 89, 39, 190, 46, 229, 43, 61, 155, 131, 99, 189, 194, 119, 202, 189, 125, 191, 208, 59, 115, 35, 148, 58, 5, 56, 223, 189, 148, 87, 195, 61, 72, 138, 5, 190, 172, 49, 6, 190, 148, 139, 25, 190, 52, 23, 74, 188, 52, 80, 191, 61, 17, 251, 224, 189, 1, 39, 210, 189, 49, 161, 121, 61, 71, 193, 121, 61, 143, 233, 13, 190, 165, 6, 40, 185, 220, 254, 244, 59, 0, 215, 242, 188, 43, 55, 232, 60, 129, 213, 144, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 186, 19, 188, 107, 135, 69, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {137, 9, 188, 63, 229, 100, 127, 62, 225, 138, 81, 187};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {28, 141, 29, 61, 236, 178, 230, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0046/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}