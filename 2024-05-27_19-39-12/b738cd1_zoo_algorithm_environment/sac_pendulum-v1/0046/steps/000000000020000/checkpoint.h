// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 211, 176, 190, 66, 246, 149, 60, 64, 48, 200, 60, 45, 137, 217, 190, 233, 25, 250, 63, 110, 82, 44, 63, 177, 119, 6, 63, 219, 20, 138, 191, 56, 91, 198, 62, 86, 154, 190, 61, 224, 100, 73, 63, 215, 150, 57, 63, 219, 84, 94, 62, 19, 135, 204, 191, 35, 150, 195, 190, 54, 136, 7, 191, 79, 222, 197, 63, 73, 111, 148, 62, 187, 69, 240, 61, 18, 29, 115, 62, 11, 66, 172, 62, 41, 189, 250, 62, 177, 51, 145, 63, 118, 114, 103, 62, 45, 3, 221, 190, 23, 188, 203, 62, 60, 207, 255, 190, 26, 140, 207, 190, 236, 49, 249, 190, 226, 237, 111, 190, 254, 173, 136, 190, 47, 100, 43, 63, 202, 187, 7, 191, 129, 67, 4, 191, 159, 207, 255, 62, 24, 132, 255, 60, 38, 219, 151, 189, 30, 7, 139, 191, 231, 248, 172, 188, 35, 146, 205, 62, 137, 238, 177, 63, 106, 122, 182, 62, 150, 94, 80, 191, 83, 61, 215, 62, 213, 152, 118, 62, 69, 202, 106, 62, 151, 216, 94, 190, 51, 111, 8, 63, 188, 10, 133, 191, 194, 86, 54, 191, 25, 239, 80, 190, 247, 201, 107, 61, 49, 14, 158, 189, 162, 98, 220, 190, 4, 118, 124, 62, 169, 254, 141, 63, 179, 15, 45, 63, 146, 30, 9, 191, 49, 134, 34, 61, 252, 151, 58, 191, 59, 102, 180, 62, 49, 36, 226, 62, 27, 226, 204, 190, 255, 100, 235, 189, 198, 100, 239, 190, 124, 24, 206, 189, 26, 173, 77, 62, 241, 181, 12, 63, 181, 45, 16, 190, 27, 131, 213, 189, 107, 198, 176, 63, 38, 146, 9, 190, 57, 205, 141, 61, 224, 239, 34, 62, 245, 38, 40, 57, 3, 205, 199, 62, 111, 83, 8, 190, 78, 222, 238, 190, 135, 121, 56, 63, 31, 10, 71, 63, 57, 183, 60, 62, 192, 99, 185, 189, 56, 103, 87, 191, 235, 50, 25, 191, 236, 101, 64, 63, 162, 50, 179, 190, 244, 188, 87, 62, 78, 224, 234, 62, 11, 196, 198, 60, 163, 106, 16, 191, 52, 229, 100, 63, 141, 57, 143, 191, 25, 120, 121, 190, 207, 102, 193, 189, 162, 104, 218, 191, 172, 53, 166, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 88, 25, 191, 162, 27, 117, 190, 93, 1, 170, 62, 223, 147, 41, 190, 117, 251, 172, 61, 10, 152, 200, 188, 55, 204, 178, 62, 136, 140, 199, 61, 13, 154, 182, 190, 105, 190, 80, 62, 111, 173, 6, 190, 136, 44, 226, 62, 116, 94, 175, 62, 224, 53, 2, 190, 100, 145, 16, 63, 76, 81, 69, 61, 33, 103, 12, 190, 111, 144, 100, 190, 248, 39, 159, 190, 48, 243, 20, 190, 86, 157, 207, 62, 18, 191, 31, 62, 19, 59, 34, 63, 212, 216, 195, 189, 59, 137, 52, 190, 105, 162, 174, 189, 26, 225, 55, 61, 70, 12, 83, 190, 157, 122, 5, 191, 139, 227, 173, 62, 115, 20, 177, 190, 16, 27, 219, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 209, 25, 62, 3, 161, 19, 191, 112, 160, 221, 190, 171, 235, 108, 62, 166, 66, 186, 190, 55, 159, 133, 191, 96, 120, 149, 190, 83, 247, 189, 62, 14, 101, 196, 62, 120, 175, 85, 61, 83, 156, 131, 62, 168, 59, 201, 62, 231, 175, 219, 59, 233, 165, 89, 62, 169, 112, 186, 190, 93, 255, 226, 188, 192, 8, 71, 60, 213, 41, 192, 189, 196, 34, 222, 62, 105, 71, 54, 62, 223, 175, 96, 62, 165, 64, 216, 61, 63, 115, 151, 60, 195, 174, 131, 62, 140, 199, 34, 189, 217, 52, 13, 191, 65, 234, 21, 63, 204, 166, 126, 61, 83, 67, 82, 62, 27, 63, 208, 190, 94, 175, 172, 191, 120, 149, 221, 189, 222, 110, 146, 189, 222, 28, 162, 189, 63, 119, 26, 189, 77, 170, 67, 189, 190, 110, 238, 60, 205, 81, 93, 62, 234, 183, 188, 61, 207, 5, 60, 190, 50, 230, 64, 190, 38, 137, 89, 62, 114, 163, 10, 190, 75, 124, 158, 62, 107, 233, 10, 62, 59, 77, 116, 190, 29, 154, 154, 62, 255, 250, 179, 189, 3, 69, 151, 62, 199, 171, 106, 189, 100, 19, 225, 189, 163, 206, 217, 189, 99, 17, 174, 190, 161, 230, 129, 62, 235, 86, 1, 62, 44, 38, 59, 61, 1, 154, 31, 62, 25, 227, 211, 189, 235, 167, 156, 189, 181, 179, 104, 61, 122, 47, 215, 189, 44, 60, 37, 189, 112, 164, 4, 191, 138, 234, 153, 62, 36, 74, 163, 61, 92, 72, 171, 190, 101, 225, 146, 62, 212, 83, 8, 61, 156, 22, 246, 61, 72, 243, 28, 190, 101, 32, 57, 190, 132, 49, 175, 190, 130, 71, 189, 190, 57, 29, 64, 190, 74, 26, 50, 190, 170, 51, 7, 191, 238, 28, 166, 62, 143, 186, 172, 190, 254, 254, 204, 60, 219, 114, 163, 189, 235, 116, 207, 190, 158, 88, 63, 62, 176, 233, 163, 190, 153, 166, 249, 188, 39, 106, 243, 60, 235, 49, 230, 61, 110, 77, 10, 190, 249, 56, 131, 60, 128, 218, 15, 62, 192, 132, 163, 62, 206, 67, 219, 61, 64, 136, 210, 187, 53, 6, 81, 188, 21, 121, 96, 62, 0, 179, 2, 63, 20, 54, 53, 190, 122, 158, 46, 189, 249, 234, 22, 190, 193, 151, 201, 188, 126, 221, 247, 61, 57, 113, 28, 189, 229, 234, 241, 188, 60, 101, 101, 190, 79, 139, 247, 188, 187, 129, 192, 190, 190, 237, 98, 61, 153, 213, 174, 189, 64, 166, 152, 190, 15, 106, 228, 189, 54, 149, 148, 187, 146, 216, 150, 61, 20, 135, 237, 61, 224, 225, 116, 190, 94, 79, 10, 62, 193, 26, 13, 62, 248, 132, 105, 190, 148, 44, 45, 189, 228, 242, 162, 61, 2, 199, 175, 190, 99, 182, 112, 190, 41, 62, 92, 189, 162, 180, 164, 61, 163, 241, 50, 190, 251, 242, 142, 189, 70, 235, 110, 190, 74, 251, 59, 62, 149, 169, 163, 62, 153, 194, 164, 189, 140, 167, 34, 62, 81, 81, 97, 189, 107, 28, 125, 61, 42, 86, 218, 61, 72, 86, 174, 59, 148, 24, 46, 190, 82, 174, 67, 190, 21, 183, 140, 61, 155, 246, 192, 189, 32, 195, 133, 61, 119, 157, 118, 57, 225, 151, 128, 189, 241, 11, 101, 56, 33, 233, 145, 188, 215, 207, 78, 189, 134, 134, 41, 189, 92, 88, 198, 61, 143, 209, 209, 61, 242, 135, 253, 189, 196, 10, 29, 190, 136, 82, 72, 188, 195, 83, 72, 190, 190, 169, 251, 189, 73, 152, 42, 188, 250, 33, 29, 60, 243, 211, 1, 189, 148, 198, 13, 61, 204, 110, 206, 189, 57, 196, 207, 189, 15, 89, 5, 62, 197, 200, 10, 189, 109, 244, 87, 189, 159, 220, 39, 62, 219, 108, 138, 62, 188, 43, 113, 189, 203, 33, 157, 61, 210, 220, 38, 61, 206, 88, 162, 189, 118, 210, 90, 62, 168, 140, 192, 60, 192, 140, 215, 188, 78, 201, 22, 62, 3, 78, 155, 60, 127, 83, 213, 61, 212, 29, 126, 62, 237, 83, 68, 62, 9, 153, 175, 61, 203, 19, 22, 61, 253, 243, 103, 62, 109, 78, 66, 60, 154, 180, 92, 190, 197, 54, 129, 61, 71, 225, 229, 60, 144, 179, 199, 189, 126, 93, 34, 62, 6, 164, 72, 62, 172, 126, 220, 61, 177, 241, 131, 190, 66, 248, 10, 190, 34, 47, 166, 189, 126, 242, 59, 60, 88, 122, 220, 59, 18, 248, 10, 191, 208, 122, 38, 62, 22, 193, 75, 61, 219, 253, 229, 189, 217, 87, 229, 189, 142, 201, 16, 191, 176, 227, 188, 190, 194, 48, 167, 62, 223, 255, 19, 190, 61, 97, 201, 189, 9, 147, 49, 62, 138, 235, 194, 190, 158, 210, 134, 62, 15, 230, 188, 62, 123, 106, 37, 188, 77, 59, 128, 61, 20, 35, 132, 62, 97, 103, 199, 189, 10, 131, 167, 191, 198, 201, 156, 62, 39, 218, 249, 190, 15, 77, 39, 62, 248, 252, 151, 190, 239, 139, 251, 190, 90, 9, 115, 62, 111, 78, 255, 62, 224, 173, 23, 190, 175, 145, 16, 190, 113, 48, 168, 190, 57, 1, 144, 190, 141, 159, 239, 189, 170, 132, 128, 190, 68, 203, 75, 62, 12, 222, 124, 188, 139, 175, 43, 62, 11, 245, 56, 62, 10, 224, 134, 62, 202, 27, 32, 190, 112, 50, 202, 61, 140, 58, 234, 62, 4, 182, 12, 62, 80, 254, 146, 190, 179, 89, 62, 190, 184, 17, 9, 189, 174, 51, 96, 190, 18, 147, 207, 62, 61, 225, 227, 61, 80, 5, 252, 190, 213, 96, 192, 62, 15, 156, 27, 190, 214, 218, 193, 62, 84, 105, 17, 63, 164, 173, 87, 190, 175, 180, 2, 190, 84, 119, 184, 190, 30, 245, 90, 61, 233, 42, 169, 190, 62, 186, 129, 190, 76, 148, 36, 190, 161, 100, 80, 63, 176, 187, 51, 61, 191, 114, 224, 190, 184, 74, 187, 60, 210, 226, 35, 62, 224, 146, 62, 190, 164, 44, 46, 191, 120, 56, 146, 189, 2, 169, 207, 191, 75, 205, 52, 191, 162, 141, 113, 62, 195, 64, 242, 60, 36, 129, 150, 191, 179, 54, 203, 190, 197, 71, 31, 62, 78, 34, 42, 62, 109, 185, 129, 62, 183, 160, 20, 62, 120, 13, 181, 62, 148, 146, 46, 190, 175, 109, 158, 62, 135, 177, 251, 190, 182, 219, 36, 190, 201, 154, 204, 61, 237, 152, 230, 189, 82, 174, 81, 63, 30, 102, 143, 61, 85, 58, 235, 61, 224, 212, 90, 188, 167, 153, 99, 62, 212, 35, 238, 61, 8, 35, 44, 60, 107, 243, 33, 191, 221, 89, 33, 63, 101, 55, 170, 189, 35, 153, 225, 189, 49, 216, 135, 190, 241, 221, 142, 191, 40, 44, 253, 61, 42, 212, 175, 188, 43, 133, 64, 191, 19, 122, 174, 62, 117, 96, 22, 191, 71, 113, 179, 191, 204, 75, 148, 191, 162, 54, 132, 62, 137, 254, 140, 62, 42, 33, 31, 189, 80, 183, 131, 190, 213, 244, 12, 190, 171, 153, 0, 62, 151, 242, 208, 61, 177, 133, 68, 189, 63, 127, 141, 191, 30, 182, 44, 62, 151, 9, 10, 62, 205, 121, 84, 190, 197, 31, 114, 190, 25, 241, 168, 188, 79, 120, 27, 62, 133, 240, 33, 189, 13, 117, 45, 62, 203, 152, 68, 62, 218, 58, 167, 60, 120, 89, 20, 62, 200, 34, 25, 63, 250, 76, 129, 188, 197, 116, 174, 62, 136, 89, 18, 61, 123, 250, 37, 191, 86, 189, 135, 191, 241, 170, 32, 62, 225, 165, 10, 62, 230, 187, 222, 187, 111, 174, 180, 189, 201, 136, 113, 190, 26, 86, 149, 62, 178, 251, 104, 189, 223, 146, 206, 190, 113, 143, 58, 191, 92, 89, 30, 190, 81, 113, 11, 190, 98, 190, 194, 189, 79, 146, 131, 60, 56, 138, 25, 191, 143, 253, 82, 189, 196, 133, 253, 189, 34, 200, 221, 190, 80, 70, 140, 62, 69, 220, 155, 190, 101, 58, 67, 190, 7, 20, 131, 189, 247, 47, 2, 189, 207, 119, 11, 62, 227, 74, 15, 191, 35, 62, 200, 61, 70, 157, 156, 62, 190, 193, 54, 60, 145, 63, 186, 189, 88, 98, 53, 62, 40, 88, 254, 62, 18, 231, 163, 62, 73, 145, 148, 191, 88, 128, 192, 60, 237, 48, 5, 191, 81, 205, 133, 187, 182, 23, 185, 60, 123, 57, 131, 62, 241, 175, 33, 191, 214, 40, 50, 60, 76, 118, 128, 62, 254, 30, 19, 63, 104, 140, 20, 189, 24, 92, 26, 62, 49, 74, 140, 61, 24, 247, 44, 190, 218, 215, 130, 62, 79, 172, 66, 191, 131, 206, 182, 61, 56, 137, 187, 61, 137, 145, 83, 190, 178, 43, 47, 62, 179, 60, 127, 62, 35, 75, 104, 62, 147, 136, 247, 189, 245, 251, 77, 62, 82, 162, 53, 190, 52, 226, 13, 62, 246, 189, 227, 60, 213, 80, 186, 61, 144, 144, 255, 61, 160, 171, 144, 62, 90, 51, 131, 190, 35, 222, 17, 191, 237, 49, 212, 61, 179, 38, 24, 62, 167, 124, 171, 62, 207, 87, 30, 189, 199, 52, 230, 61, 25, 245, 52, 61, 31, 12, 152, 188, 114, 17, 140, 189, 111, 106, 30, 61, 124, 54, 244, 189, 39, 150, 20, 189, 95, 160, 24, 62, 246, 103, 10, 62, 103, 210, 52, 62, 245, 215, 140, 61, 52, 80, 200, 189, 240, 171, 131, 189, 140, 13, 106, 62, 146, 191, 55, 189, 14, 78, 2, 190, 174, 177, 38, 62, 39, 176, 139, 188, 15, 97, 158, 60, 223, 142, 172, 189, 145, 5, 169, 62, 202, 98, 67, 61, 38, 47, 95, 190, 224, 158, 23, 62, 166, 93, 42, 189, 61, 108, 18, 62, 34, 190, 252, 189, 23, 183, 41, 191, 240, 1, 162, 189, 244, 129, 7, 62, 124, 78, 13, 189, 126, 240, 45, 62, 126, 133, 33, 62, 42, 200, 158, 62, 82, 122, 114, 190, 91, 58, 3, 62, 226, 159, 226, 189, 62, 251, 17, 63, 149, 137, 94, 62, 210, 231, 105, 62, 197, 71, 79, 61, 128, 201, 50, 188, 77, 34, 14, 189, 222, 47, 59, 190, 230, 18, 122, 62, 129, 249, 99, 62, 198, 76, 0, 61, 130, 141, 40, 62, 242, 96, 97, 62, 164, 207, 23, 62, 185, 143, 228, 59, 244, 90, 241, 61, 171, 246, 213, 190, 89, 113, 46, 62, 52, 225, 206, 187, 211, 219, 231, 189, 98, 122, 179, 61, 86, 48, 144, 190, 127, 243, 64, 190, 27, 146, 223, 190, 10, 37, 6, 63, 198, 112, 101, 189, 188, 14, 8, 190, 209, 189, 52, 191, 7, 236, 161, 61, 237, 251, 133, 190, 24, 81, 102, 62, 66, 22, 252, 190, 211, 53, 79, 190, 4, 72, 33, 62, 66, 77, 77, 189, 70, 9, 141, 62, 37, 173, 83, 190, 118, 9, 155, 60, 84, 225, 47, 190, 252, 80, 167, 62, 135, 39, 188, 190, 117, 237, 157, 190, 67, 119, 52, 188, 230, 62, 188, 61, 38, 75, 127, 62, 26, 65, 18, 62, 76, 234, 85, 189, 71, 206, 45, 62, 111, 62, 139, 62, 92, 65, 207, 61, 238, 244, 208, 60, 35, 129, 43, 62, 243, 155, 176, 61, 24, 70, 45, 190, 201, 141, 157, 61, 16, 215, 31, 63, 251, 173, 213, 189, 49, 205, 49, 61, 210, 179, 25, 188, 239, 9, 47, 61, 51, 194, 200, 61, 75, 229, 229, 190, 141, 101, 168, 60, 76, 200, 88, 62, 76, 21, 147, 59, 145, 212, 22, 191, 9, 151, 231, 189, 51, 166, 41, 190, 131, 17, 39, 189, 126, 49, 89, 62, 210, 169, 77, 62, 68, 153, 46, 61, 107, 79, 194, 61, 180, 103, 124, 61, 121, 175, 199, 189, 58, 7, 133, 62, 135, 228, 233, 190, 49, 213, 52, 190, 115, 188, 119, 190, 196, 114, 188, 62, 31, 9, 53, 63, 172, 244, 186, 187, 140, 169, 105, 191, 227, 113, 24, 62, 213, 199, 44, 191, 234, 46, 33, 189, 13, 144, 159, 190, 175, 114, 180, 191, 137, 28, 12, 191, 179, 255, 30, 190, 101, 125, 234, 187, 126, 153, 190, 60, 76, 161, 22, 190, 40, 198, 16, 191, 55, 60, 181, 62, 10, 20, 131, 62, 88, 91, 193, 190, 102, 161, 72, 190, 165, 223, 35, 62, 184, 247, 188, 189, 163, 198, 175, 62, 185, 245, 99, 61, 78, 130, 172, 190, 147, 66, 199, 62, 223, 247, 43, 61, 185, 172, 219, 62, 183, 105, 142, 62, 62, 199, 32, 190, 67, 97, 166, 190, 71, 190, 132, 190, 153, 131, 177, 190, 108, 225, 159, 62, 117, 167, 94, 62, 80, 130, 251, 185, 172, 165, 57, 190, 105, 254, 180, 189, 150, 98, 175, 190, 112, 226, 126, 191, 178, 71, 130, 190, 105, 99, 25, 191, 194, 114, 160, 191, 72, 31, 29, 190, 9, 157, 249, 188, 38, 243, 211, 60, 184, 91, 169, 188, 96, 138, 231, 62, 196, 47, 176, 62, 44, 197, 117, 61, 89, 64, 167, 188, 203, 5, 100, 191, 189, 8, 154, 62, 147, 89, 38, 191, 84, 58, 149, 189, 196, 71, 131, 62, 139, 129, 53, 62, 186, 225, 76, 61, 84, 131, 116, 189, 135, 13, 179, 56, 94, 183, 39, 189, 136, 189, 92, 190, 20, 77, 27, 190, 84, 174, 44, 188, 156, 149, 165, 62, 50, 163, 222, 189, 0, 102, 172, 188, 210, 185, 235, 59, 162, 180, 122, 190, 31, 201, 64, 62, 121, 152, 27, 62, 237, 231, 57, 190, 14, 181, 157, 61, 226, 193, 149, 62, 186, 81, 71, 62, 87, 104, 7, 62, 0, 115, 226, 190, 138, 17, 182, 62, 113, 249, 84, 190, 20, 122, 224, 189, 139, 65, 107, 190, 88, 4, 42, 61, 113, 244, 186, 190, 95, 19, 37, 191, 128, 29, 8, 191, 167, 129, 224, 60, 3, 140, 87, 190, 6, 50, 169, 62, 227, 53, 25, 191, 246, 73, 161, 189, 44, 20, 208, 61, 223, 228, 226, 189, 164, 23, 205, 62, 176, 114, 28, 191, 2, 238, 144, 190, 28, 156, 106, 188, 149, 227, 89, 189, 118, 121, 238, 61, 115, 111, 95, 191, 213, 28, 161, 189, 159, 104, 34, 62, 179, 104, 37, 62, 177, 21, 60, 191, 102, 73, 14, 63, 71, 73, 153, 62, 200, 205, 184, 189, 252, 29, 85, 191, 35, 245, 230, 61, 25, 255, 161, 62, 72, 125, 176, 189, 114, 14, 175, 191, 158, 136, 240, 189, 74, 44, 84, 190, 242, 237, 160, 190, 76, 80, 194, 60, 190, 126, 116, 190, 177, 29, 241, 188, 154, 66, 195, 187, 68, 77, 75, 62, 153, 243, 203, 62, 196, 225, 74, 190, 15, 222, 239, 187, 215, 71, 38, 190, 136, 173, 6, 62, 32, 251, 21, 189, 110, 58, 191, 191, 148, 193, 132, 60, 160, 126, 10, 62, 36, 159, 146, 188, 41, 203, 94, 61, 195, 178, 159, 62, 206, 233, 48, 61, 79, 13, 73, 187, 170, 139, 254, 61, 108, 69, 96, 190, 141, 196, 59, 190, 145, 218, 122, 62, 30, 149, 189, 189, 150, 61, 148, 60, 187, 133, 32, 61, 220, 15, 153, 62, 242, 201, 145, 62, 141, 235, 40, 191, 116, 248, 98, 62, 216, 75, 232, 62, 194, 106, 14, 190, 218, 194, 187, 191, 17, 113, 152, 191, 104, 211, 254, 61, 14, 94, 134, 191, 88, 78, 154, 189, 255, 234, 163, 62, 4, 122, 204, 190, 219, 126, 84, 190, 172, 154, 92, 190, 204, 79, 100, 191, 140, 217, 238, 190, 76, 32, 140, 191, 230, 18, 164, 190, 20, 235, 122, 190, 73, 171, 75, 61, 228, 252, 17, 191, 221, 49, 29, 191, 217, 95, 21, 189, 204, 196, 110, 62, 9, 111, 146, 191, 96, 248, 180, 61, 49, 48, 11, 191, 17, 135, 148, 189, 62, 7, 227, 62, 13, 65, 119, 62, 122, 21, 14, 62, 247, 246, 157, 190, 115, 174, 13, 191, 226, 2, 13, 189, 251, 127, 195, 190, 183, 99, 55, 62, 40, 6, 150, 190, 114, 12, 41, 190, 146, 189, 126, 62, 80, 174, 33, 189, 35, 50, 229, 62, 251, 82, 245, 189, 9, 117, 148, 191, 243, 37, 215, 188, 114, 93, 179, 62, 89, 206, 67, 190, 85, 104, 37, 62, 170, 254, 24, 189, 28, 216, 69, 62, 166, 91, 130, 62, 81, 208, 180, 62, 38, 226, 7, 189, 58, 132, 74, 62, 90, 79, 134, 62, 106, 96, 52, 189, 171, 73, 31, 62, 71, 53, 107, 60, 103, 129, 169, 188, 104, 39, 45, 191, 107, 35, 195, 189, 172, 42, 156, 62, 87, 153, 14, 191, 109, 74, 130, 188, 138, 13, 158, 190, 74, 222, 53, 62, 242, 246, 66, 191, 21, 221, 143, 62, 21, 151, 166, 59, 100, 143, 237, 60, 255, 136, 130, 190, 93, 98, 99, 188, 253, 226, 130, 61, 55, 222, 132, 59, 218, 75, 224, 190, 166, 199, 77, 61, 226, 173, 154, 190, 28, 86, 118, 190, 54, 57, 249, 189, 37, 191, 44, 191, 245, 53, 145, 190, 171, 101, 129, 191, 36, 231, 118, 190, 238, 203, 77, 191, 27, 154, 78, 62, 184, 166, 78, 191, 254, 253, 158, 188, 131, 208, 140, 189, 168, 100, 114, 190, 200, 62, 50, 191, 250, 209, 239, 190, 212, 204, 65, 61, 45, 207, 99, 191, 210, 254, 68, 62, 65, 126, 192, 62, 241, 1, 20, 62, 50, 110, 21, 190, 153, 184, 179, 60, 136, 138, 112, 191, 195, 10, 169, 59, 122, 65, 21, 191, 162, 101, 189, 189, 249, 131, 60, 61, 18, 7, 36, 61, 92, 254, 115, 61, 203, 128, 11, 62, 12, 209, 63, 62, 236, 36, 213, 61, 159, 152, 138, 61, 95, 203, 244, 190, 194, 82, 183, 187, 3, 77, 62, 62, 18, 159, 212, 189, 136, 54, 146, 191, 11, 12, 34, 62, 220, 89, 103, 62, 58, 132, 191, 60, 3, 195, 151, 60, 22, 86, 214, 189, 160, 117, 34, 62, 103, 193, 173, 190, 6, 44, 196, 60, 149, 48, 71, 60, 177, 18, 174, 61, 63, 90, 88, 190, 68, 161, 218, 190, 201, 36, 61, 62, 228, 188, 18, 60, 47, 71, 237, 60, 162, 174, 242, 60, 203, 198, 30, 62, 136, 255, 21, 191, 115, 46, 102, 191, 40, 94, 161, 189, 120, 138, 33, 188, 36, 209, 232, 62, 85, 227, 73, 61, 177, 237, 159, 61, 24, 4, 134, 61, 74, 14, 162, 62, 141, 93, 198, 189, 161, 109, 107, 190, 186, 24, 161, 62, 41, 125, 253, 61, 117, 14, 53, 190, 47, 161, 43, 187, 10, 1, 20, 62, 74, 217, 175, 62, 106, 71, 49, 190, 146, 22, 214, 62, 253, 160, 30, 62, 217, 245, 196, 61, 159, 178, 132, 190, 222, 198, 122, 62, 146, 235, 175, 61, 253, 58, 183, 62, 88, 116, 154, 190, 102, 233, 140, 191, 222, 104, 1, 191, 227, 247, 26, 190, 125, 66, 32, 190, 120, 107, 134, 62, 250, 110, 63, 189, 97, 201, 137, 191, 80, 209, 226, 189, 14, 48, 118, 189, 198, 0, 191, 62, 163, 181, 205, 189, 0, 104, 128, 190, 136, 131, 64, 62, 203, 119, 186, 62, 125, 184, 155, 190, 240, 226, 216, 62, 121, 48, 248, 189, 56, 216, 109, 188, 90, 40, 129, 190, 169, 20, 211, 60, 130, 151, 73, 62, 9, 156, 25, 62, 163, 213, 115, 61, 213, 142, 53, 190, 52, 95, 121, 59, 132, 78, 161, 62, 148, 164, 116, 189, 27, 146, 218, 189, 233, 181, 131, 62, 171, 230, 58, 190, 129, 59, 171, 61, 58, 228, 208, 189, 131, 96, 81, 191, 43, 28, 248, 190, 119, 197, 51, 190, 9, 111, 28, 61, 243, 98, 49, 188, 222, 29, 57, 188, 239, 186, 161, 189, 204, 171, 35, 190, 151, 165, 237, 60, 154, 166, 32, 61, 120, 128, 224, 189, 135, 68, 82, 189, 237, 80, 148, 61, 190, 216, 96, 190, 212, 153, 18, 189, 132, 93, 35, 190, 29, 176, 104, 190, 234, 228, 5, 62, 220, 223, 20, 61, 74, 5, 127, 61, 92, 74, 12, 190, 62, 76, 102, 61, 23, 119, 168, 189, 122, 63, 163, 189, 45, 122, 11, 190, 24, 80, 13, 189, 31, 103, 195, 60, 220, 178, 12, 189, 192, 227, 242, 61, 142, 254, 66, 189, 129, 174, 9, 189, 3, 91, 49, 190, 13, 61, 153, 61, 27, 128, 158, 59, 190, 122, 48, 62, 28, 54, 44, 188, 93, 2, 166, 188, 143, 177, 2, 190, 65, 204, 32, 189, 121, 243, 33, 190, 238, 176, 42, 190, 141, 235, 190, 61, 188, 151, 30, 62, 251, 139, 25, 190, 45, 7, 149, 61, 107, 105, 181, 189, 214, 203, 168, 189, 53, 13, 3, 190, 145, 61, 25, 61, 64, 105, 253, 61, 34, 174, 250, 59, 21, 136, 6, 189, 200, 253, 0, 62, 146, 128, 122, 61, 5, 100, 42, 190, 93, 13, 73, 189, 123, 128, 167, 189, 82, 223, 244, 58, 6, 130, 75, 61, 223, 126, 180, 61, 160, 189, 160, 186, 82, 134, 20, 189, 29, 181, 202, 61, 241, 16, 101, 189, 103, 232, 34, 62, 115, 63, 238, 189, 6, 0, 204, 189, 167, 28, 49, 191, 131, 25, 232, 62, 173, 186, 132, 190, 114, 205, 250, 60, 34, 208, 27, 191, 2, 234, 114, 62, 82, 33, 192, 190, 253, 164, 146, 191, 86, 98, 179, 60, 58, 178, 186, 190, 156, 85, 93, 62, 136, 133, 227, 62, 93, 143, 186, 190, 118, 200, 26, 62, 222, 46, 212, 60, 231, 217, 27, 63, 108, 155, 168, 190, 41, 106, 33, 191, 36, 103, 123, 191, 40, 234, 19, 191, 11, 61, 155, 61, 143, 220, 186, 61, 44, 114, 37, 191, 83, 97, 106, 188, 221, 156, 239, 189, 132, 34, 117, 62, 115, 132, 245, 191, 56, 75, 194, 62, 46, 167, 102, 62, 126, 137, 14, 61, 56, 136, 179, 190, 50, 250, 130, 189, 220, 28, 61, 190, 109, 192, 128, 62, 72, 153, 80, 189, 207, 235, 167, 190, 9, 30, 221, 62, 29, 223, 43, 60, 50, 28, 168, 190, 169, 203, 118, 191, 147, 107, 156, 190, 237, 172, 160, 190, 30, 229, 171, 190, 44, 15, 25, 62, 30, 189, 198, 190, 237, 208, 0, 190, 157, 97, 78, 60, 26, 3, 12, 190, 149, 7, 193, 61, 152, 151, 225, 190, 217, 135, 238, 189, 124, 9, 148, 189, 156, 34, 77, 190, 230, 91, 133, 62, 200, 132, 156, 190, 144, 242, 176, 61, 76, 180, 234, 62, 23, 89, 190, 62, 245, 238, 247, 190, 85, 91, 32, 62, 137, 82, 173, 62, 168, 10, 48, 62, 212, 91, 88, 191, 91, 100, 184, 59, 129, 243, 49, 190, 124, 244, 59, 190, 51, 5, 194, 190, 196, 234, 196, 190, 2, 236, 146, 189, 219, 61, 1, 190, 202, 136, 235, 60, 128, 189, 80, 62, 25, 87, 67, 62, 107, 220, 149, 62, 179, 66, 125, 190, 169, 37, 103, 186, 23, 173, 109, 189, 115, 48, 4, 60, 250, 228, 42, 190, 74, 129, 187, 190, 147, 146, 95, 61, 59, 47, 227, 189, 220, 179, 50, 189, 102, 2, 35, 62, 19, 137, 29, 190, 214, 193, 135, 62, 8, 161, 140, 62, 58, 62, 44, 62, 175, 17, 26, 190, 113, 100, 121, 60, 171, 133, 28, 62, 197, 72, 112, 62, 139, 100, 43, 62, 206, 39, 145, 62, 141, 112, 250, 190, 14, 90, 176, 189, 23, 117, 16, 190, 157, 251, 1, 190, 61, 18, 155, 189, 99, 154, 54, 190, 95, 120, 198, 187, 236, 90, 188, 61, 153, 199, 228, 61, 43, 188, 71, 189, 89, 167, 207, 60, 77, 193, 51, 190, 21, 221, 140, 189, 127, 127, 210, 189, 203, 211, 253, 188, 60, 224, 110, 188, 38, 133, 19, 189, 137, 8, 211, 189, 1, 1, 4, 190, 159, 15, 229, 188, 153, 24, 14, 62, 200, 70, 217, 189, 177, 193, 31, 189, 47, 162, 56, 61, 71, 37, 63, 61, 111, 49, 241, 189, 202, 135, 156, 61, 251, 34, 10, 61, 169, 78, 246, 61, 146, 222, 179, 60, 157, 23, 227, 189, 94, 230, 143, 189, 130, 26, 23, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {150, 162, 200, 61, 123, 114, 62, 62, 247, 230, 148, 61, 220, 224, 188, 190, 249, 109, 232, 189, 214, 105, 132, 61, 251, 54, 135, 62, 145, 105, 147, 62, 109, 214, 133, 62, 188, 249, 43, 61, 48, 77, 35, 62, 214, 176, 231, 189, 91, 240, 132, 62, 17, 139, 3, 189, 162, 238, 56, 62, 131, 35, 248, 61, 87, 194, 229, 61, 198, 72, 118, 62, 133, 1, 26, 189, 84, 148, 154, 62, 133, 52, 25, 62, 129, 166, 107, 190, 216, 126, 131, 189, 136, 13, 183, 62, 214, 91, 82, 61, 158, 75, 189, 189, 66, 38, 35, 190, 180, 46, 158, 189, 86, 3, 30, 62, 151, 97, 45, 62, 156, 236, 41, 62, 148, 40, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {132, 136, 173, 191, 16, 28, 4, 62, 134, 168, 70, 62, 94, 174, 129, 190, 198, 45, 22, 190, 174, 138, 100, 188, 96, 52, 119, 191, 168, 180, 23, 63, 249, 85, 172, 191, 160, 131, 3, 191, 243, 232, 212, 62, 210, 51, 141, 190, 24, 246, 116, 59, 207, 162, 155, 190, 193, 61, 154, 62, 120, 87, 36, 61, 101, 70, 124, 63, 176, 121, 71, 62, 252, 211, 252, 62, 127, 170, 182, 61, 198, 75, 183, 191, 194, 157, 17, 63, 29, 112, 132, 191, 100, 64, 164, 186, 116, 73, 34, 191, 113, 148, 189, 190, 92, 107, 89, 61, 70, 31, 17, 190, 87, 212, 73, 63, 35, 3, 189, 62, 140, 63, 56, 62, 187, 254, 113, 188, 140, 158, 211, 62, 254, 126, 189, 62, 107, 78, 104, 61, 30, 78, 99, 62, 99, 217, 15, 190, 123, 26, 34, 190, 186, 25, 157, 190, 50, 252, 137, 62, 16, 181, 82, 63, 25, 8, 52, 191, 204, 95, 7, 191, 210, 16, 14, 60, 175, 58, 19, 190, 7, 66, 112, 188, 221, 209, 8, 61, 97, 41, 214, 190, 250, 251, 171, 61, 129, 93, 116, 190, 222, 106, 75, 190, 116, 93, 3, 191, 199, 123, 59, 62, 56, 48, 101, 60, 99, 187, 223, 61, 182, 51, 173, 190, 65, 70, 177, 189, 136, 28, 203, 62, 200, 249, 33, 189, 251, 236, 29, 57, 7, 171, 27, 189, 205, 243, 206, 190, 61, 180, 142, 188, 20, 44, 8, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 87, 2, 61, 85, 73, 10, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {65, 24, 154, 63, 124, 81, 35, 192, 229, 146, 240, 188};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {74, 131, 2, 193, 142, 240, 213, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0046/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}