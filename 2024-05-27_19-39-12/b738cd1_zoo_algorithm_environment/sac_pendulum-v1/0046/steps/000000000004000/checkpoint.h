// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 211, 176, 190, 66, 246, 149, 60, 64, 48, 200, 60, 236, 231, 14, 191, 217, 219, 59, 189, 240, 49, 111, 63, 144, 196, 218, 62, 202, 5, 86, 191, 79, 76, 249, 62, 226, 92, 6, 60, 41, 139, 224, 61, 164, 210, 21, 63, 205, 208, 147, 190, 231, 191, 37, 191, 168, 19, 155, 190, 2, 136, 136, 190, 32, 48, 13, 63, 124, 113, 188, 62, 215, 57, 56, 62, 156, 75, 168, 188, 197, 216, 242, 62, 71, 77, 13, 63, 251, 161, 60, 63, 64, 44, 193, 62, 105, 128, 149, 190, 21, 202, 209, 62, 237, 16, 234, 190, 30, 36, 27, 190, 210, 208, 240, 189, 55, 165, 175, 190, 178, 57, 28, 190, 98, 6, 18, 63, 151, 0, 1, 191, 189, 12, 154, 190, 125, 101, 164, 62, 33, 60, 142, 61, 13, 226, 61, 189, 67, 133, 63, 191, 153, 118, 36, 62, 84, 16, 221, 62, 109, 182, 134, 63, 232, 49, 199, 62, 97, 157, 29, 191, 61, 210, 155, 62, 231, 82, 117, 62, 179, 60, 143, 62, 151, 22, 159, 190, 193, 187, 18, 63, 193, 134, 254, 190, 53, 42, 145, 189, 97, 247, 95, 190, 204, 71, 198, 61, 220, 132, 158, 61, 13, 208, 9, 191, 165, 246, 164, 62, 22, 201, 37, 63, 136, 206, 6, 63, 201, 183, 164, 190, 109, 118, 243, 62, 85, 20, 81, 191, 99, 78, 201, 62, 222, 237, 4, 63, 188, 9, 10, 191, 129, 135, 17, 58, 106, 91, 229, 187, 187, 86, 156, 190, 247, 171, 160, 62, 110, 234, 30, 63, 120, 222, 136, 190, 10, 210, 63, 190, 233, 145, 69, 63, 207, 13, 197, 189, 57, 205, 141, 61, 224, 239, 34, 62, 245, 38, 40, 57, 226, 64, 97, 62, 110, 148, 225, 61, 192, 114, 254, 190, 132, 21, 77, 63, 179, 165, 157, 62, 176, 82, 249, 61, 86, 60, 199, 190, 146, 254, 204, 62, 22, 113, 117, 191, 194, 1, 71, 63, 37, 112, 200, 190, 80, 135, 238, 61, 56, 75, 229, 62, 188, 177, 174, 62, 200, 123, 18, 191, 234, 232, 235, 62, 224, 148, 120, 191, 117, 39, 151, 190, 115, 79, 184, 190, 3, 245, 78, 191, 161, 199, 113, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 88, 25, 191, 231, 213, 150, 190, 98, 170, 243, 62, 5, 3, 193, 190, 6, 24, 104, 62, 145, 188, 163, 61, 127, 96, 193, 62, 151, 221, 75, 60, 167, 37, 82, 190, 89, 3, 249, 62, 137, 139, 33, 189, 131, 77, 158, 62, 202, 189, 238, 62, 194, 17, 108, 190, 151, 194, 36, 63, 230, 169, 241, 61, 132, 205, 179, 189, 101, 255, 46, 190, 50, 211, 211, 190, 231, 192, 37, 190, 129, 106, 0, 63, 246, 17, 179, 62, 5, 252, 35, 63, 12, 35, 242, 189, 59, 137, 52, 190, 186, 98, 128, 189, 250, 183, 214, 189, 68, 192, 64, 190, 133, 168, 171, 190, 115, 132, 103, 62, 61, 3, 124, 190, 163, 141, 235, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 209, 25, 62, 216, 197, 94, 190, 72, 39, 168, 190, 71, 186, 33, 62, 182, 232, 48, 190, 90, 42, 136, 190, 169, 3, 116, 190, 81, 170, 177, 62, 161, 240, 198, 62, 121, 128, 161, 61, 18, 100, 104, 62, 149, 161, 66, 62, 204, 246, 177, 61, 239, 173, 75, 62, 103, 22, 52, 62, 170, 198, 15, 62, 76, 108, 117, 189, 47, 230, 255, 189, 146, 195, 183, 62, 240, 103, 61, 62, 251, 196, 138, 62, 96, 222, 37, 62, 137, 203, 11, 61, 64, 119, 54, 62, 140, 199, 34, 189, 215, 58, 24, 191, 71, 244, 4, 63, 12, 152, 168, 61, 155, 89, 118, 62, 50, 80, 212, 190, 210, 124, 14, 191, 61, 180, 141, 189, 222, 110, 146, 189, 231, 173, 207, 187, 196, 29, 144, 189, 31, 52, 64, 189, 106, 194, 44, 190, 51, 198, 134, 60, 76, 89, 151, 188, 29, 146, 172, 189, 32, 209, 251, 189, 241, 47, 234, 60, 91, 239, 167, 189, 183, 111, 158, 59, 215, 243, 164, 189, 110, 142, 245, 189, 245, 25, 135, 61, 241, 147, 155, 189, 20, 134, 199, 61, 83, 2, 21, 189, 31, 208, 218, 188, 204, 110, 176, 189, 26, 53, 47, 190, 81, 154, 188, 61, 184, 241, 170, 60, 8, 93, 45, 190, 1, 154, 31, 62, 148, 207, 158, 61, 36, 75, 185, 61, 5, 81, 101, 188, 160, 233, 253, 189, 43, 176, 202, 61, 218, 210, 203, 189, 48, 24, 216, 188, 36, 74, 163, 61, 31, 156, 9, 62, 69, 55, 170, 62, 82, 23, 44, 189, 106, 135, 5, 62, 241, 255, 182, 61, 9, 67, 106, 189, 94, 188, 66, 190, 240, 220, 117, 190, 219, 198, 24, 190, 60, 233, 58, 190, 35, 74, 251, 189, 39, 96, 203, 60, 15, 124, 0, 190, 8, 9, 8, 61, 208, 105, 74, 190, 95, 209, 229, 189, 153, 143, 28, 62, 215, 211, 100, 190, 73, 90, 163, 188, 107, 165, 13, 189, 166, 117, 142, 61, 60, 207, 32, 190, 4, 17, 39, 190, 128, 218, 15, 62, 121, 246, 137, 62, 16, 10, 119, 62, 112, 181, 208, 60, 215, 239, 176, 60, 214, 0, 59, 62, 227, 252, 205, 62, 61, 24, 235, 60, 122, 158, 46, 189, 249, 234, 22, 190, 193, 151, 201, 188, 126, 221, 247, 61, 57, 113, 28, 189, 229, 234, 241, 188, 60, 101, 101, 190, 79, 139, 247, 188, 187, 129, 192, 190, 190, 237, 98, 61, 153, 213, 174, 189, 64, 166, 152, 190, 15, 106, 228, 189, 54, 149, 148, 187, 146, 216, 150, 61, 20, 135, 237, 61, 224, 225, 116, 190, 94, 79, 10, 62, 193, 26, 13, 62, 248, 132, 105, 190, 148, 44, 45, 189, 228, 242, 162, 61, 2, 199, 175, 190, 99, 182, 112, 190, 41, 62, 92, 189, 162, 180, 164, 61, 163, 241, 50, 190, 251, 242, 142, 189, 70, 235, 110, 190, 74, 251, 59, 62, 149, 169, 163, 62, 153, 194, 164, 189, 140, 167, 34, 62, 15, 220, 201, 188, 150, 111, 181, 61, 170, 109, 12, 62, 101, 223, 149, 59, 216, 153, 35, 190, 252, 93, 36, 190, 37, 167, 209, 61, 155, 246, 192, 189, 32, 195, 133, 61, 119, 157, 118, 57, 27, 183, 127, 189, 159, 134, 198, 60, 214, 25, 227, 59, 103, 54, 23, 189, 140, 196, 80, 188, 92, 88, 198, 61, 143, 209, 209, 61, 91, 127, 184, 189, 196, 10, 29, 190, 136, 82, 72, 188, 87, 14, 72, 190, 141, 195, 248, 189, 73, 152, 42, 188, 250, 33, 29, 60, 243, 211, 1, 189, 188, 166, 144, 61, 204, 110, 206, 189, 60, 181, 142, 189, 15, 89, 5, 62, 45, 204, 10, 189, 183, 88, 81, 189, 159, 220, 39, 62, 183, 20, 134, 61, 237, 0, 33, 189, 243, 25, 144, 60, 124, 206, 247, 61, 226, 238, 75, 189, 175, 57, 49, 62, 173, 217, 122, 61, 87, 134, 173, 60, 113, 210, 22, 62, 159, 190, 177, 61, 222, 163, 174, 189, 28, 142, 26, 62, 33, 127, 136, 62, 115, 153, 63, 62, 152, 194, 83, 61, 117, 93, 38, 62, 20, 106, 141, 61, 144, 112, 117, 190, 156, 205, 201, 61, 126, 56, 250, 61, 106, 174, 212, 189, 148, 228, 71, 62, 255, 218, 25, 61, 172, 126, 220, 61, 64, 38, 52, 190, 23, 210, 204, 60, 120, 79, 116, 189, 15, 68, 193, 60, 3, 148, 180, 61, 102, 139, 187, 190, 70, 189, 85, 62, 22, 193, 75, 61, 27, 154, 141, 60, 212, 100, 76, 188, 250, 117, 59, 190, 6, 1, 136, 189, 2, 186, 158, 61, 87, 5, 24, 187, 216, 134, 222, 57, 131, 185, 145, 189, 248, 73, 209, 190, 64, 41, 30, 189, 164, 107, 185, 60, 90, 252, 71, 62, 175, 45, 59, 62, 90, 25, 53, 62, 224, 90, 227, 58, 11, 35, 191, 190, 88, 99, 117, 61, 175, 85, 155, 189, 60, 138, 17, 190, 86, 17, 52, 190, 203, 233, 205, 190, 78, 214, 78, 61, 173, 152, 18, 189, 224, 173, 23, 190, 10, 68, 6, 62, 168, 153, 146, 58, 35, 195, 135, 190, 200, 190, 3, 190, 5, 157, 166, 189, 211, 181, 15, 62, 222, 69, 231, 60, 139, 175, 43, 62, 186, 242, 249, 61, 51, 184, 173, 62, 176, 248, 99, 190, 125, 112, 67, 60, 206, 234, 198, 61, 29, 221, 208, 61, 239, 98, 174, 190, 124, 133, 251, 190, 162, 235, 36, 61, 141, 205, 118, 190, 206, 189, 219, 61, 226, 31, 2, 62, 226, 144, 31, 191, 163, 85, 108, 62, 60, 167, 49, 190, 159, 219, 124, 189, 193, 252, 117, 61, 71, 205, 140, 190, 204, 175, 17, 191, 240, 70, 149, 190, 33, 170, 143, 60, 215, 106, 118, 190, 132, 140, 124, 189, 76, 148, 36, 190, 139, 238, 123, 62, 120, 46, 121, 61, 222, 124, 228, 190, 4, 12, 95, 62, 129, 50, 59, 62, 20, 155, 145, 62, 70, 41, 172, 190, 120, 56, 146, 189, 226, 39, 130, 191, 235, 163, 50, 191, 138, 237, 162, 190, 120, 98, 253, 61, 18, 252, 178, 190, 46, 108, 0, 191, 233, 162, 43, 189, 18, 76, 86, 62, 3, 111, 163, 62, 43, 99, 34, 62, 9, 73, 29, 62, 220, 71, 179, 189, 137, 62, 151, 189, 181, 218, 248, 61, 73, 0, 151, 189, 30, 104, 26, 62, 129, 53, 237, 189, 97, 253, 7, 189, 6, 226, 201, 61, 53, 18, 76, 62, 97, 54, 201, 61, 125, 66, 145, 62, 161, 19, 58, 61, 8, 35, 44, 60, 185, 72, 24, 191, 62, 224, 254, 62, 84, 60, 76, 189, 78, 162, 63, 61, 233, 226, 106, 190, 48, 159, 28, 191, 37, 165, 30, 62, 42, 212, 175, 188, 28, 208, 192, 190, 25, 247, 76, 62, 62, 83, 159, 190, 34, 92, 195, 190, 112, 105, 4, 190, 130, 183, 102, 62, 68, 43, 146, 62, 178, 183, 134, 189, 60, 45, 89, 190, 153, 184, 0, 190, 224, 252, 46, 190, 51, 130, 75, 61, 122, 124, 106, 61, 156, 71, 183, 190, 105, 200, 20, 62, 233, 53, 10, 190, 138, 244, 13, 190, 194, 242, 1, 62, 141, 133, 183, 60, 63, 136, 87, 62, 177, 46, 222, 61, 115, 65, 32, 62, 245, 66, 168, 61, 218, 58, 167, 60, 49, 254, 94, 62, 134, 189, 19, 63, 166, 123, 26, 61, 17, 190, 8, 62, 240, 27, 137, 61, 185, 213, 27, 61, 39, 197, 194, 190, 241, 170, 32, 62, 119, 214, 38, 62, 214, 65, 192, 61, 29, 54, 200, 187, 39, 144, 145, 187, 230, 143, 133, 62, 68, 179, 220, 60, 187, 180, 202, 190, 96, 230, 7, 191, 70, 156, 144, 189, 108, 198, 243, 189, 157, 82, 92, 188, 109, 170, 42, 62, 35, 162, 0, 191, 236, 131, 89, 61, 148, 123, 15, 190, 143, 83, 41, 190, 71, 119, 114, 62, 101, 132, 57, 190, 33, 238, 116, 190, 160, 180, 80, 190, 134, 226, 89, 61, 88, 131, 216, 60, 125, 111, 2, 190, 35, 62, 200, 61, 147, 29, 157, 62, 82, 151, 77, 189, 103, 65, 236, 189, 71, 148, 71, 62, 149, 100, 215, 62, 187, 160, 57, 62, 148, 76, 39, 190, 88, 128, 192, 60, 178, 171, 128, 190, 124, 239, 232, 189, 95, 61, 149, 61, 118, 13, 25, 62, 39, 199, 216, 189, 197, 153, 66, 189, 58, 59, 47, 62, 244, 185, 250, 62, 226, 111, 224, 188, 133, 183, 4, 62, 225, 157, 39, 62, 165, 51, 143, 61, 97, 143, 94, 62, 23, 10, 16, 62, 150, 98, 160, 61, 233, 226, 68, 190, 7, 3, 140, 190, 152, 183, 12, 62, 157, 80, 85, 62, 60, 154, 156, 62, 254, 8, 188, 189, 141, 191, 146, 62, 112, 96, 7, 62, 52, 226, 13, 62, 109, 149, 1, 60, 183, 149, 96, 60, 212, 236, 139, 61, 51, 40, 163, 61, 38, 8, 118, 190, 159, 205, 219, 190, 106, 12, 2, 190, 179, 38, 24, 62, 66, 135, 236, 61, 166, 137, 51, 188, 20, 210, 71, 61, 105, 90, 58, 62, 133, 35, 205, 60, 0, 212, 174, 189, 10, 68, 172, 61, 49, 36, 212, 189, 89, 174, 248, 188, 37, 139, 57, 62, 106, 138, 72, 189, 89, 170, 67, 62, 102, 5, 44, 62, 223, 222, 5, 61, 66, 130, 204, 188, 148, 105, 48, 62, 205, 123, 55, 188, 11, 37, 26, 190, 27, 6, 57, 62, 110, 251, 109, 61, 18, 161, 65, 61, 218, 140, 90, 189, 16, 187, 25, 62, 202, 98, 67, 61, 169, 37, 38, 190, 64, 68, 141, 62, 162, 26, 17, 189, 193, 122, 244, 61, 67, 219, 133, 189, 55, 162, 224, 190, 103, 179, 85, 60, 244, 129, 7, 62, 226, 147, 163, 189, 178, 160, 192, 61, 138, 130, 4, 62, 3, 199, 79, 188, 125, 151, 171, 60, 83, 246, 55, 62, 191, 33, 12, 189, 44, 44, 247, 62, 181, 249, 11, 62, 230, 141, 67, 62, 206, 210, 220, 61, 43, 79, 192, 61, 228, 112, 138, 61, 165, 176, 144, 60, 168, 244, 138, 62, 152, 73, 77, 60, 17, 245, 164, 189, 241, 225, 22, 62, 97, 248, 25, 62, 162, 234, 88, 62, 157, 94, 144, 189, 42, 166, 115, 62, 41, 175, 93, 189, 89, 113, 46, 62, 107, 29, 168, 189, 58, 32, 91, 189, 144, 64, 232, 188, 81, 100, 24, 190, 74, 13, 66, 190, 166, 60, 252, 190, 22, 107, 108, 61, 198, 112, 101, 189, 221, 0, 17, 188, 177, 38, 254, 189, 45, 18, 147, 61, 56, 22, 245, 189, 7, 101, 232, 189, 186, 23, 104, 190, 151, 169, 184, 60, 70, 97, 150, 62, 101, 209, 84, 188, 253, 17, 182, 62, 204, 144, 128, 189, 21, 155, 229, 190, 53, 137, 8, 62, 146, 68, 154, 189, 17, 180, 129, 189, 161, 25, 219, 188, 87, 173, 169, 61, 228, 203, 3, 190, 44, 201, 165, 62, 186, 35, 208, 61, 22, 233, 148, 59, 4, 10, 188, 61, 11, 94, 199, 61, 92, 65, 207, 61, 184, 124, 32, 61, 12, 160, 207, 61, 130, 133, 52, 62, 47, 100, 176, 189, 192, 219, 142, 61, 26, 65, 146, 62, 177, 74, 52, 62, 49, 205, 49, 61, 83, 247, 228, 188, 34, 156, 80, 61, 170, 176, 20, 61, 192, 255, 226, 60, 142, 52, 166, 188, 190, 216, 246, 61, 67, 237, 49, 190, 164, 11, 13, 191, 210, 143, 19, 62, 198, 181, 129, 190, 65, 200, 207, 189, 74, 246, 45, 62, 9, 114, 95, 60, 156, 216, 163, 186, 153, 20, 102, 61, 92, 13, 241, 61, 40, 26, 220, 189, 108, 245, 25, 62, 97, 107, 250, 189, 244, 62, 7, 190, 189, 185, 153, 189, 94, 85, 187, 189, 209, 132, 195, 60, 172, 244, 186, 187, 79, 43, 226, 61, 102, 203, 159, 61, 62, 244, 146, 190, 86, 64, 100, 62, 132, 90, 210, 60, 223, 72, 213, 189, 62, 17, 17, 189, 179, 255, 30, 190, 240, 152, 46, 188, 159, 223, 52, 60, 50, 144, 69, 190, 56, 76, 147, 186, 145, 113, 137, 62, 173, 16, 104, 62, 97, 237, 182, 190, 82, 244, 29, 191, 243, 185, 136, 61, 123, 226, 188, 190, 144, 6, 45, 62, 160, 85, 0, 62, 47, 129, 166, 190, 44, 129, 120, 62, 105, 165, 220, 187, 216, 79, 215, 61, 212, 253, 153, 61, 101, 196, 118, 190, 91, 136, 54, 191, 29, 239, 130, 190, 14, 227, 242, 186, 6, 244, 227, 61, 67, 234, 244, 61, 80, 130, 251, 185, 27, 27, 112, 62, 210, 235, 96, 189, 192, 193, 52, 191, 237, 79, 20, 190, 27, 222, 88, 59, 23, 135, 77, 189, 86, 182, 208, 190, 72, 31, 29, 190, 28, 215, 197, 188, 190, 73, 118, 62, 220, 106, 117, 60, 97, 170, 25, 62, 177, 17, 86, 62, 192, 227, 29, 62, 138, 153, 100, 59, 196, 38, 67, 190, 141, 220, 40, 62, 162, 237, 167, 188, 11, 9, 131, 188, 60, 231, 9, 189, 29, 59, 58, 62, 230, 59, 164, 61, 105, 104, 237, 187, 72, 111, 188, 189, 151, 137, 103, 61, 16, 57, 7, 190, 4, 86, 105, 189, 252, 125, 118, 60, 213, 202, 136, 61, 194, 131, 168, 189, 157, 30, 211, 187, 210, 185, 235, 59, 127, 187, 7, 190, 136, 128, 148, 62, 39, 212, 24, 62, 232, 196, 201, 189, 167, 113, 15, 62, 120, 198, 231, 61, 128, 42, 1, 60, 87, 104, 7, 62, 36, 211, 182, 61, 4, 201, 155, 62, 233, 9, 114, 190, 163, 70, 11, 62, 45, 165, 62, 62, 131, 240, 244, 61, 55, 161, 129, 190, 192, 195, 3, 191, 127, 220, 39, 60, 56, 64, 146, 190, 123, 80, 203, 189, 192, 249, 139, 62, 22, 163, 195, 190, 94, 113, 71, 189, 42, 224, 76, 189, 43, 226, 36, 190, 122, 12, 106, 62, 195, 120, 189, 190, 70, 171, 153, 190, 36, 95, 88, 60, 184, 221, 5, 62, 100, 38, 29, 62, 95, 106, 58, 61, 213, 28, 161, 189, 78, 249, 157, 62, 27, 93, 105, 62, 170, 184, 46, 190, 54, 47, 216, 62, 211, 101, 193, 62, 247, 38, 180, 60, 93, 151, 27, 190, 35, 245, 230, 61, 86, 34, 183, 61, 238, 32, 61, 62, 157, 4, 149, 190, 32, 8, 229, 60, 226, 164, 197, 189, 133, 100, 239, 189, 70, 73, 203, 61, 106, 220, 43, 190, 33, 214, 97, 189, 190, 220, 122, 61, 32, 170, 53, 61, 5, 141, 89, 62, 157, 178, 220, 60, 47, 151, 120, 61, 119, 114, 170, 61, 243, 16, 19, 62, 47, 98, 248, 60, 90, 74, 6, 190, 195, 8, 54, 61, 35, 22, 138, 61, 65, 219, 184, 189, 86, 36, 42, 189, 148, 57, 2, 61, 206, 233, 48, 61, 31, 99, 133, 60, 175, 193, 37, 62, 213, 179, 58, 190, 192, 66, 143, 189, 248, 204, 84, 62, 120, 153, 16, 189, 6, 141, 97, 62, 187, 133, 32, 61, 112, 95, 232, 61, 229, 17, 190, 62, 17, 207, 136, 190, 125, 117, 13, 185, 82, 55, 219, 189, 86, 184, 15, 62, 182, 40, 26, 191, 133, 233, 55, 190, 175, 10, 157, 61, 54, 102, 227, 188, 41, 72, 115, 61, 242, 111, 128, 62, 152, 123, 255, 190, 34, 247, 99, 189, 64, 62, 48, 62, 175, 167, 129, 59, 221, 215, 225, 189, 52, 242, 21, 191, 46, 220, 28, 62, 37, 95, 153, 190, 103, 191, 194, 187, 17, 188, 240, 190, 136, 166, 145, 190, 217, 95, 21, 189, 98, 134, 225, 61, 71, 131, 150, 189, 201, 240, 136, 62, 229, 236, 131, 189, 152, 145, 27, 190, 229, 219, 127, 189, 162, 240, 145, 188, 122, 21, 14, 62, 108, 109, 253, 189, 117, 43, 25, 190, 106, 193, 111, 61, 34, 218, 190, 188, 172, 85, 8, 62, 40, 228, 17, 190, 3, 128, 211, 189, 178, 190, 175, 61, 24, 86, 54, 189, 53, 111, 146, 62, 53, 29, 209, 188, 86, 48, 166, 190, 177, 16, 27, 62, 39, 123, 205, 60, 212, 148, 53, 61, 187, 147, 71, 62, 25, 34, 207, 189, 221, 207, 222, 61, 192, 137, 45, 62, 16, 133, 117, 62, 134, 180, 16, 61, 43, 85, 140, 61, 158, 154, 102, 61, 106, 96, 52, 189, 249, 52, 97, 61, 110, 242, 215, 189, 150, 169, 141, 189, 59, 100, 150, 61, 157, 62, 47, 190, 68, 235, 122, 189, 192, 228, 48, 189, 109, 74, 130, 188, 239, 25, 132, 189, 161, 19, 1, 62, 231, 116, 1, 190, 137, 178, 126, 188, 178, 232, 192, 61, 159, 240, 14, 62, 34, 237, 20, 190, 124, 126, 231, 61, 113, 196, 9, 190, 218, 21, 159, 61, 129, 13, 108, 61, 182, 74, 167, 189, 65, 78, 218, 189, 118, 193, 233, 189, 177, 166, 203, 189, 169, 192, 178, 189, 118, 171, 45, 190, 196, 149, 220, 189, 169, 119, 10, 62, 208, 161, 53, 190, 32, 170, 102, 61, 63, 246, 217, 187, 242, 106, 114, 189, 131, 208, 140, 189, 65, 40, 17, 62, 10, 71, 202, 189, 106, 104, 10, 190, 229, 189, 69, 62, 8, 127, 189, 188, 22, 157, 222, 61, 74, 207, 177, 61, 241, 1, 20, 62, 243, 212, 237, 188, 70, 141, 5, 189, 63, 196, 25, 189, 138, 32, 190, 60, 88, 56, 211, 188, 222, 41, 174, 189, 177, 79, 48, 61, 190, 35, 101, 61, 197, 102, 66, 61, 188, 210, 45, 62, 16, 206, 248, 61, 31, 91, 89, 61, 15, 80, 46, 62, 204, 30, 77, 61, 213, 31, 62, 62, 107, 145, 125, 61, 114, 237, 168, 189, 240, 112, 64, 190, 167, 220, 56, 62, 172, 201, 129, 62, 118, 90, 182, 188, 38, 28, 65, 61, 245, 233, 172, 189, 160, 117, 34, 62, 153, 133, 181, 190, 75, 241, 121, 188, 70, 65, 78, 60, 209, 214, 118, 60, 109, 146, 96, 190, 184, 253, 144, 190, 194, 16, 29, 62, 228, 188, 18, 60, 128, 205, 27, 61, 40, 198, 55, 190, 160, 34, 41, 61, 120, 214, 219, 188, 181, 110, 203, 188, 62, 183, 154, 189, 189, 199, 128, 60, 76, 13, 219, 62, 39, 210, 214, 60, 253, 229, 243, 60, 34, 171, 35, 189, 172, 91, 25, 62, 200, 47, 187, 61, 210, 215, 48, 62, 226, 220, 87, 62, 181, 15, 130, 189, 199, 251, 112, 190, 255, 252, 191, 188, 159, 226, 254, 61, 7, 118, 175, 62, 184, 40, 229, 189, 29, 109, 178, 62, 169, 186, 83, 187, 217, 245, 196, 61, 28, 85, 144, 190, 26, 55, 54, 62, 76, 85, 146, 61, 114, 25, 111, 61, 129, 197, 180, 190, 62, 207, 235, 190, 193, 14, 167, 189, 227, 247, 26, 190, 195, 39, 123, 189, 175, 0, 15, 62, 91, 114, 175, 189, 133, 42, 43, 190, 79, 167, 160, 61, 13, 106, 183, 189, 47, 18, 163, 62, 3, 175, 158, 189, 89, 53, 27, 190, 56, 196, 55, 188, 53, 191, 0, 62, 217, 92, 115, 190, 199, 160, 169, 62, 18, 128, 202, 189, 193, 171, 121, 189, 46, 14, 50, 187, 65, 3, 87, 61, 67, 84, 34, 61, 84, 49, 43, 62, 110, 230, 211, 61, 66, 187, 158, 189, 86, 151, 90, 189, 216, 45, 41, 190, 148, 164, 116, 189, 55, 244, 208, 188, 72, 6, 105, 62, 219, 43, 191, 189, 168, 179, 81, 189, 74, 177, 130, 189, 182, 129, 170, 61, 163, 46, 191, 61, 119, 197, 51, 190, 141, 190, 42, 61, 131, 126, 68, 186, 49, 112, 201, 187, 149, 217, 141, 189, 0, 92, 35, 190, 251, 53, 22, 61, 101, 85, 56, 61, 120, 128, 224, 189, 13, 97, 72, 189, 237, 80, 148, 61, 78, 204, 96, 190, 241, 226, 211, 188, 132, 93, 35, 190, 111, 76, 101, 190, 157, 247, 14, 62, 220, 223, 20, 61, 74, 5, 127, 61, 117, 203, 11, 190, 62, 76, 102, 61, 16, 242, 167, 189, 215, 178, 160, 189, 247, 69, 9, 190, 24, 80, 13, 189, 31, 103, 195, 60, 220, 178, 12, 189, 5, 36, 3, 62, 142, 254, 66, 189, 163, 98, 142, 188, 3, 91, 49, 190, 49, 59, 180, 61, 139, 122, 246, 59, 190, 122, 48, 62, 112, 192, 143, 186, 65, 89, 6, 59, 242, 129, 241, 189, 65, 204, 32, 189, 151, 7, 32, 190, 2, 217, 28, 190, 62, 132, 208, 61, 188, 151, 30, 62, 251, 139, 25, 190, 45, 7, 149, 61, 107, 105, 181, 189, 50, 153, 147, 189, 234, 39, 0, 190, 150, 182, 37, 61, 193, 202, 16, 62, 34, 174, 250, 59, 21, 136, 6, 189, 220, 152, 6, 62, 146, 128, 122, 61, 5, 100, 42, 190, 93, 13, 73, 189, 123, 128, 167, 189, 82, 223, 244, 58, 6, 130, 75, 61, 223, 126, 180, 61, 207, 142, 169, 59, 82, 134, 20, 189, 190, 160, 219, 61, 241, 16, 101, 189, 202, 172, 35, 62, 115, 63, 238, 189, 6, 0, 204, 189, 98, 225, 101, 189, 52, 201, 195, 62, 41, 110, 113, 190, 235, 17, 222, 189, 245, 33, 135, 61, 254, 115, 155, 62, 182, 63, 179, 190, 174, 161, 148, 191, 13, 55, 1, 62, 41, 9, 221, 190, 70, 72, 189, 62, 180, 241, 184, 62, 207, 238, 173, 190, 153, 207, 149, 62, 133, 193, 213, 189, 31, 23, 233, 61, 112, 66, 58, 190, 12, 81, 229, 190, 73, 254, 134, 191, 192, 152, 45, 191, 255, 134, 90, 189, 79, 68, 168, 61, 196, 145, 9, 190, 83, 97, 106, 188, 187, 38, 209, 189, 21, 172, 137, 62, 60, 65, 171, 191, 80, 230, 197, 62, 107, 148, 38, 62, 194, 108, 62, 62, 161, 219, 27, 190, 50, 250, 130, 189, 108, 87, 236, 61, 154, 7, 75, 62, 26, 87, 179, 189, 137, 249, 156, 60, 229, 221, 152, 62, 96, 223, 163, 61, 253, 33, 152, 190, 250, 65, 35, 191, 178, 216, 243, 60, 140, 160, 157, 190, 193, 174, 26, 190, 1, 106, 210, 61, 159, 23, 140, 190, 232, 134, 230, 188, 59, 77, 61, 190, 63, 102, 169, 61, 168, 220, 25, 61, 201, 164, 113, 190, 92, 19, 149, 189, 109, 58, 83, 190, 217, 49, 25, 189, 85, 43, 29, 62, 226, 199, 79, 190, 144, 242, 176, 61, 184, 6, 204, 62, 193, 105, 158, 62, 195, 66, 141, 190, 218, 59, 132, 59, 218, 150, 128, 62, 183, 119, 31, 62, 132, 233, 74, 189, 91, 100, 184, 59, 57, 158, 65, 189, 201, 34, 6, 189, 158, 232, 237, 189, 159, 21, 48, 190, 36, 40, 175, 189, 86, 204, 149, 61, 187, 60, 38, 62, 200, 162, 82, 62, 140, 10, 63, 62, 46, 12, 131, 62, 114, 103, 23, 190, 19, 188, 34, 189, 156, 8, 244, 61, 151, 119, 1, 190, 225, 140, 64, 189, 219, 152, 17, 190, 227, 82, 173, 61, 5, 221, 61, 62, 70, 229, 3, 189, 4, 102, 166, 61, 38, 247, 255, 189, 145, 59, 56, 62, 51, 14, 179, 60, 58, 62, 44, 62, 222, 71, 20, 190, 120, 147, 80, 61, 48, 160, 74, 62, 170, 207, 170, 62, 7, 7, 31, 62, 73, 214, 7, 62, 165, 21, 4, 189, 14, 90, 176, 189, 23, 117, 16, 190, 157, 251, 1, 190, 61, 18, 155, 189, 99, 154, 54, 190, 95, 120, 198, 187, 236, 90, 188, 61, 153, 199, 228, 61, 43, 188, 71, 189, 89, 167, 207, 60, 77, 193, 51, 190, 21, 221, 140, 189, 127, 127, 210, 189, 203, 211, 253, 188, 60, 224, 110, 188, 38, 133, 19, 189, 137, 8, 211, 189, 1, 1, 4, 190, 159, 15, 229, 188, 153, 24, 14, 62, 200, 70, 217, 189, 177, 193, 31, 189, 47, 162, 56, 61, 71, 37, 63, 61, 111, 49, 241, 189, 202, 135, 156, 61, 251, 34, 10, 61, 169, 78, 246, 61, 146, 222, 179, 60, 157, 23, 227, 189, 94, 230, 143, 189, 130, 26, 23, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 215, 134, 61, 211, 250, 194, 189, 48, 13, 214, 61, 220, 224, 188, 190, 113, 244, 179, 189, 117, 102, 208, 60, 84, 95, 0, 62, 21, 215, 209, 61, 170, 195, 93, 62, 7, 148, 245, 188, 116, 43, 233, 61, 227, 230, 76, 189, 163, 165, 128, 62, 219, 198, 212, 61, 158, 157, 13, 62, 99, 230, 17, 187, 25, 234, 188, 61, 61, 110, 177, 61, 1, 8, 114, 188, 126, 245, 70, 62, 21, 222, 104, 61, 250, 102, 164, 189, 164, 12, 218, 189, 176, 102, 154, 62, 53, 58, 184, 60, 62, 181, 226, 189, 152, 19, 23, 190, 88, 69, 138, 189, 47, 87, 69, 62, 162, 245, 14, 62, 7, 198, 48, 62, 148, 40, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 246, 217, 190, 125, 230, 95, 189, 205, 83, 51, 62, 94, 174, 129, 190, 129, 14, 26, 190, 24, 45, 169, 189, 83, 199, 121, 190, 57, 151, 3, 63, 142, 89, 91, 191, 201, 162, 149, 190, 56, 96, 124, 62, 183, 223, 145, 190, 70, 151, 130, 189, 63, 86, 100, 190, 241, 53, 144, 62, 212, 204, 5, 62, 178, 136, 6, 63, 171, 60, 180, 60, 22, 123, 191, 62, 87, 207, 195, 60, 169, 49, 51, 191, 160, 140, 24, 62, 110, 18, 47, 189, 118, 55, 243, 189, 40, 91, 127, 190, 77, 233, 21, 190, 2, 167, 91, 61, 86, 76, 17, 190, 215, 82, 110, 63, 28, 146, 141, 62, 18, 158, 248, 61, 187, 254, 113, 188, 45, 37, 63, 62, 103, 63, 144, 61, 166, 3, 167, 60, 30, 78, 99, 62, 20, 120, 18, 190, 187, 85, 88, 190, 163, 214, 143, 190, 45, 125, 44, 62, 150, 125, 89, 188, 102, 239, 236, 190, 169, 111, 166, 61, 153, 12, 19, 189, 99, 116, 241, 189, 215, 89, 5, 61, 150, 58, 254, 60, 217, 226, 183, 189, 255, 248, 130, 61, 4, 15, 13, 190, 87, 54, 1, 190, 121, 66, 57, 190, 5, 65, 59, 62, 98, 133, 17, 62, 236, 218, 103, 189, 67, 149, 17, 190, 104, 218, 147, 61, 167, 249, 66, 62, 247, 249, 37, 189, 206, 86, 135, 56, 50, 47, 32, 189, 125, 142, 237, 188, 2, 60, 204, 188, 20, 44, 8, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 126, 178, 188, 122, 168, 156, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {26, 37, 236, 191, 228, 131, 116, 63, 231, 186, 153, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {40, 238, 113, 63, 241, 84, 27, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0046/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}