// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 211, 176, 190, 66, 246, 149, 60, 64, 48, 200, 60, 66, 84, 191, 190, 12, 37, 248, 63, 243, 237, 32, 63, 77, 179, 5, 63, 6, 213, 135, 191, 229, 20, 226, 62, 67, 95, 192, 61, 235, 124, 73, 63, 71, 23, 51, 63, 4, 242, 221, 61, 214, 255, 205, 191, 232, 91, 179, 190, 189, 141, 228, 190, 83, 213, 194, 63, 251, 206, 152, 62, 251, 214, 246, 61, 250, 145, 131, 62, 165, 131, 175, 62, 80, 63, 252, 62, 52, 177, 141, 63, 17, 182, 92, 62, 189, 47, 222, 190, 157, 184, 178, 62, 144, 63, 241, 190, 122, 163, 176, 190, 29, 124, 254, 190, 189, 245, 103, 190, 202, 197, 110, 190, 32, 94, 42, 63, 74, 159, 7, 191, 66, 45, 3, 191, 30, 163, 252, 62, 234, 79, 244, 60, 110, 172, 137, 189, 25, 116, 131, 191, 148, 184, 189, 188, 108, 231, 207, 62, 74, 163, 174, 63, 61, 170, 164, 62, 196, 168, 59, 191, 207, 38, 233, 62, 154, 155, 122, 62, 75, 242, 116, 62, 112, 135, 99, 190, 104, 193, 7, 63, 115, 177, 93, 191, 196, 73, 59, 191, 181, 97, 39, 190, 37, 63, 190, 188, 13, 100, 0, 190, 32, 224, 226, 190, 76, 128, 122, 62, 177, 187, 138, 63, 157, 169, 41, 63, 155, 92, 240, 190, 254, 237, 75, 58, 86, 117, 61, 191, 201, 84, 183, 62, 202, 163, 222, 62, 39, 60, 229, 190, 202, 239, 71, 190, 240, 69, 0, 191, 137, 193, 119, 189, 124, 228, 103, 62, 80, 198, 16, 63, 163, 151, 19, 190, 242, 122, 245, 189, 111, 26, 172, 63, 252, 6, 250, 189, 57, 205, 141, 61, 224, 239, 34, 62, 245, 38, 40, 57, 192, 42, 196, 62, 133, 238, 192, 189, 98, 24, 241, 190, 146, 49, 61, 63, 9, 153, 77, 63, 227, 192, 243, 61, 84, 167, 215, 189, 191, 196, 63, 191, 35, 67, 53, 191, 175, 252, 64, 63, 158, 212, 160, 190, 17, 249, 107, 62, 186, 15, 237, 62, 16, 95, 113, 61, 233, 176, 12, 191, 127, 219, 98, 63, 75, 225, 139, 191, 86, 226, 134, 190, 202, 63, 97, 189, 242, 78, 214, 191, 32, 190, 176, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 88, 25, 191, 84, 159, 104, 190, 13, 204, 168, 62, 164, 49, 47, 190, 64, 215, 164, 188, 222, 49, 189, 189, 126, 101, 180, 62, 241, 152, 207, 61, 215, 60, 187, 190, 6, 159, 123, 62, 174, 115, 135, 189, 24, 138, 226, 62, 71, 147, 182, 62, 117, 232, 250, 189, 225, 49, 21, 63, 221, 240, 111, 61, 49, 182, 86, 190, 112, 38, 131, 190, 118, 185, 160, 190, 224, 153, 203, 188, 225, 156, 210, 62, 101, 118, 27, 62, 51, 40, 41, 63, 152, 225, 231, 189, 59, 137, 52, 190, 31, 83, 185, 189, 157, 42, 107, 61, 63, 54, 42, 190, 190, 61, 249, 190, 246, 233, 176, 62, 40, 91, 176, 190, 189, 64, 197, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 209, 25, 62, 211, 187, 248, 190, 1, 126, 236, 190, 197, 75, 136, 62, 248, 29, 192, 190, 76, 62, 125, 191, 83, 11, 154, 190, 83, 180, 190, 62, 124, 42, 188, 62, 134, 189, 96, 61, 126, 151, 121, 62, 207, 158, 208, 62, 252, 8, 31, 187, 15, 119, 94, 62, 153, 85, 123, 190, 18, 14, 29, 189, 170, 113, 178, 60, 126, 252, 214, 189, 55, 188, 240, 62, 247, 228, 41, 62, 150, 197, 95, 62, 130, 236, 223, 61, 199, 170, 153, 60, 185, 62, 126, 62, 140, 199, 34, 189, 161, 9, 14, 191, 27, 241, 22, 63, 72, 34, 103, 61, 199, 130, 41, 62, 119, 172, 210, 190, 39, 57, 169, 191, 56, 198, 242, 189, 222, 110, 146, 189, 170, 73, 137, 189, 144, 220, 153, 57, 80, 97, 66, 189, 94, 244, 135, 61, 222, 79, 72, 62, 248, 235, 217, 61, 92, 109, 47, 190, 85, 104, 46, 190, 253, 219, 112, 62, 157, 235, 249, 189, 142, 37, 141, 62, 23, 46, 55, 62, 155, 133, 107, 190, 32, 215, 135, 62, 201, 212, 138, 189, 151, 133, 166, 62, 106, 254, 40, 189, 167, 250, 203, 189, 244, 189, 187, 189, 140, 235, 171, 190, 124, 253, 149, 62, 124, 125, 240, 61, 58, 126, 159, 60, 1, 154, 31, 62, 233, 83, 194, 189, 189, 192, 147, 189, 170, 224, 151, 61, 4, 180, 183, 189, 102, 70, 11, 189, 200, 248, 249, 190, 145, 109, 177, 62, 36, 74, 163, 61, 251, 144, 118, 190, 209, 226, 151, 62, 186, 120, 34, 61, 118, 148, 202, 61, 11, 110, 10, 190, 174, 11, 36, 190, 150, 42, 167, 190, 103, 132, 175, 190, 156, 190, 33, 190, 113, 178, 93, 190, 210, 74, 234, 190, 151, 188, 159, 62, 113, 123, 159, 190, 130, 77, 35, 59, 29, 175, 180, 189, 146, 105, 185, 190, 167, 115, 32, 62, 173, 81, 144, 190, 109, 57, 3, 189, 109, 109, 190, 60, 130, 205, 246, 61, 111, 104, 4, 190, 212, 133, 102, 189, 128, 218, 15, 62, 16, 154, 153, 62, 216, 142, 239, 61, 205, 118, 108, 188, 169, 146, 19, 188, 254, 143, 91, 62, 154, 56, 255, 62, 153, 226, 36, 190, 122, 158, 46, 189, 249, 234, 22, 190, 193, 151, 201, 188, 126, 221, 247, 61, 57, 113, 28, 189, 229, 234, 241, 188, 60, 101, 101, 190, 79, 139, 247, 188, 187, 129, 192, 190, 190, 237, 98, 61, 153, 213, 174, 189, 64, 166, 152, 190, 15, 106, 228, 189, 54, 149, 148, 187, 146, 216, 150, 61, 20, 135, 237, 61, 224, 225, 116, 190, 94, 79, 10, 62, 193, 26, 13, 62, 248, 132, 105, 190, 148, 44, 45, 189, 228, 242, 162, 61, 2, 199, 175, 190, 99, 182, 112, 190, 41, 62, 92, 189, 162, 180, 164, 61, 163, 241, 50, 190, 251, 242, 142, 189, 70, 235, 110, 190, 74, 251, 59, 62, 149, 169, 163, 62, 153, 194, 164, 189, 140, 167, 34, 62, 81, 81, 97, 189, 107, 28, 125, 61, 42, 86, 218, 61, 72, 86, 174, 59, 148, 24, 46, 190, 82, 174, 67, 190, 21, 183, 140, 61, 155, 246, 192, 189, 32, 195, 133, 61, 119, 157, 118, 57, 225, 151, 128, 189, 241, 11, 101, 56, 33, 233, 145, 188, 215, 207, 78, 189, 134, 134, 41, 189, 92, 88, 198, 61, 143, 209, 209, 61, 242, 135, 253, 189, 196, 10, 29, 190, 136, 82, 72, 188, 195, 83, 72, 190, 190, 169, 251, 189, 73, 152, 42, 188, 250, 33, 29, 60, 243, 211, 1, 189, 148, 198, 13, 61, 204, 110, 206, 189, 57, 196, 207, 189, 15, 89, 5, 62, 197, 200, 10, 189, 109, 244, 87, 189, 159, 220, 39, 62, 145, 61, 127, 62, 189, 152, 161, 189, 166, 119, 137, 61, 160, 226, 56, 61, 206, 30, 183, 189, 4, 210, 86, 62, 221, 46, 220, 60, 110, 255, 176, 188, 166, 1, 37, 62, 111, 228, 119, 60, 32, 220, 239, 61, 124, 176, 103, 62, 108, 114, 68, 62, 49, 224, 199, 61, 115, 36, 223, 60, 247, 194, 130, 62, 105, 214, 125, 60, 36, 63, 104, 190, 144, 143, 142, 61, 44, 219, 19, 61, 77, 149, 195, 189, 246, 164, 37, 62, 14, 182, 41, 62, 172, 126, 220, 61, 12, 122, 129, 190, 44, 144, 3, 190, 61, 113, 147, 189, 5, 138, 133, 59, 208, 198, 130, 60, 148, 189, 8, 191, 132, 22, 39, 62, 22, 193, 75, 61, 139, 186, 169, 189, 203, 244, 24, 190, 164, 131, 229, 190, 137, 200, 163, 190, 83, 75, 155, 62, 249, 75, 210, 189, 249, 83, 106, 190, 118, 161, 43, 62, 67, 99, 168, 190, 45, 185, 110, 62, 165, 38, 195, 62, 182, 202, 65, 189, 76, 249, 45, 189, 98, 241, 172, 62, 1, 41, 51, 189, 136, 93, 147, 191, 54, 70, 148, 62, 149, 241, 210, 190, 185, 27, 32, 62, 181, 114, 179, 190, 22, 221, 203, 190, 232, 192, 61, 62, 245, 21, 229, 62, 224, 173, 23, 190, 60, 202, 54, 190, 166, 108, 240, 190, 55, 199, 140, 190, 141, 159, 239, 189, 163, 170, 154, 190, 109, 9, 139, 62, 209, 117, 159, 189, 139, 175, 43, 62, 31, 142, 98, 62, 122, 141, 127, 62, 251, 65, 17, 190, 211, 159, 231, 61, 11, 102, 237, 62, 212, 121, 9, 62, 60, 62, 135, 190, 222, 62, 214, 190, 76, 166, 76, 189, 197, 149, 209, 190, 172, 207, 181, 62, 93, 62, 217, 61, 65, 17, 233, 190, 156, 129, 187, 62, 229, 108, 28, 190, 19, 228, 131, 62, 159, 64, 25, 63, 170, 132, 64, 190, 187, 236, 150, 190, 194, 226, 214, 190, 56, 164, 129, 61, 151, 193, 181, 190, 244, 225, 114, 190, 76, 148, 36, 190, 252, 129, 92, 63, 192, 197, 168, 60, 33, 169, 214, 190, 98, 201, 185, 188, 174, 127, 24, 62, 112, 10, 201, 189, 27, 248, 22, 191, 120, 56, 146, 189, 41, 183, 207, 191, 212, 134, 50, 191, 125, 54, 76, 62, 185, 110, 35, 61, 252, 175, 160, 191, 128, 182, 202, 190, 50, 30, 41, 62, 245, 111, 12, 62, 212, 218, 132, 62, 61, 200, 7, 62, 178, 252, 187, 62, 180, 125, 246, 189, 71, 153, 159, 62, 162, 97, 141, 190, 171, 247, 22, 190, 17, 76, 245, 61, 89, 57, 4, 190, 198, 136, 75, 63, 15, 160, 97, 61, 117, 80, 5, 62, 30, 139, 105, 60, 9, 197, 114, 62, 2, 228, 210, 61, 8, 35, 44, 60, 46, 216, 31, 191, 195, 196, 36, 63, 82, 29, 190, 189, 127, 184, 218, 189, 141, 134, 129, 190, 168, 198, 138, 191, 128, 32, 3, 62, 42, 212, 175, 188, 49, 151, 52, 191, 174, 253, 168, 62, 64, 69, 31, 191, 78, 42, 161, 191, 53, 89, 164, 191, 195, 178, 118, 62, 114, 74, 135, 62, 66, 93, 167, 188, 125, 176, 106, 190, 95, 236, 226, 189, 61, 56, 5, 62, 7, 138, 221, 61, 56, 218, 134, 189, 33, 74, 134, 191, 44, 102, 42, 62, 133, 175, 42, 62, 252, 70, 52, 190, 206, 253, 140, 190, 77, 45, 28, 59, 218, 253, 36, 62, 29, 64, 131, 61, 103, 73, 44, 62, 77, 158, 81, 62, 218, 58, 167, 60, 155, 132, 37, 62, 220, 52, 23, 63, 120, 70, 147, 60, 138, 55, 165, 62, 68, 95, 49, 61, 55, 100, 36, 191, 238, 28, 135, 191, 241, 170, 32, 62, 19, 83, 21, 62, 232, 15, 67, 187, 69, 19, 180, 188, 199, 238, 158, 190, 143, 46, 158, 62, 82, 145, 45, 189, 122, 98, 203, 190, 19, 52, 48, 191, 23, 109, 250, 189, 78, 39, 87, 190, 111, 165, 198, 189, 199, 161, 111, 187, 133, 200, 21, 191, 55, 12, 21, 189, 67, 73, 255, 189, 181, 45, 188, 190, 19, 253, 92, 62, 64, 182, 123, 190, 62, 81, 83, 190, 142, 12, 147, 189, 193, 80, 37, 189, 49, 6, 9, 62, 182, 238, 24, 191, 35, 62, 200, 61, 168, 166, 149, 62, 14, 143, 90, 60, 71, 7, 216, 189, 22, 140, 62, 62, 57, 91, 251, 62, 1, 69, 154, 62, 242, 210, 143, 191, 88, 128, 192, 60, 37, 112, 221, 190, 53, 231, 253, 187, 117, 97, 199, 60, 99, 124, 103, 62, 25, 58, 60, 191, 59, 0, 185, 186, 61, 252, 119, 62, 150, 137, 12, 63, 131, 133, 132, 189, 0, 61, 15, 62, 52, 122, 103, 61, 22, 58, 49, 190, 211, 218, 116, 62, 140, 131, 10, 191, 35, 2, 207, 61, 197, 242, 52, 61, 240, 174, 101, 190, 173, 145, 24, 62, 218, 25, 105, 62, 191, 33, 109, 62, 200, 29, 27, 190, 243, 121, 76, 62, 232, 37, 40, 190, 52, 226, 13, 62, 76, 222, 226, 60, 68, 162, 176, 61, 146, 56, 210, 61, 151, 165, 139, 62, 66, 25, 131, 190, 217, 244, 14, 191, 199, 210, 125, 61, 179, 38, 24, 62, 232, 86, 163, 62, 134, 16, 187, 188, 53, 179, 217, 61, 145, 0, 29, 61, 55, 197, 207, 188, 124, 117, 53, 189, 31, 239, 127, 61, 156, 222, 243, 189, 221, 78, 246, 188, 178, 114, 14, 62, 27, 44, 23, 62, 12, 226, 48, 62, 118, 45, 185, 61, 119, 157, 168, 189, 3, 229, 94, 189, 129, 72, 129, 62, 217, 118, 93, 189, 138, 59, 6, 190, 241, 117, 34, 62, 51, 35, 36, 188, 248, 212, 205, 60, 48, 12, 147, 189, 83, 235, 150, 62, 202, 98, 67, 61, 196, 74, 101, 190, 75, 48, 51, 62, 77, 170, 76, 189, 93, 64, 30, 62, 250, 39, 240, 189, 232, 239, 39, 191, 187, 181, 186, 189, 244, 129, 7, 62, 100, 97, 3, 189, 140, 141, 21, 62, 58, 222, 30, 62, 22, 230, 141, 62, 162, 57, 87, 190, 225, 2, 254, 61, 49, 119, 207, 189, 140, 34, 12, 63, 156, 250, 63, 62, 196, 18, 89, 62, 209, 69, 138, 61, 156, 40, 92, 189, 188, 49, 199, 188, 206, 121, 26, 190, 177, 117, 111, 62, 132, 122, 64, 62, 235, 220, 197, 59, 16, 62, 39, 62, 193, 67, 76, 62, 131, 83, 21, 62, 43, 179, 3, 189, 26, 190, 235, 61, 131, 20, 205, 190, 89, 113, 46, 62, 3, 154, 194, 188, 155, 18, 186, 189, 177, 28, 128, 61, 32, 173, 154, 190, 81, 16, 77, 190, 83, 58, 239, 190, 65, 233, 243, 62, 198, 112, 101, 189, 29, 112, 185, 189, 38, 50, 45, 191, 204, 216, 214, 61, 10, 8, 114, 190, 91, 178, 149, 62, 140, 139, 241, 190, 178, 136, 60, 190, 236, 159, 66, 62, 85, 107, 240, 188, 119, 151, 151, 62, 249, 189, 61, 190, 18, 111, 47, 61, 71, 210, 1, 190, 214, 63, 128, 62, 45, 156, 168, 190, 117, 47, 140, 190, 61, 78, 45, 60, 244, 252, 7, 62, 132, 246, 139, 62, 74, 216, 22, 62, 135, 35, 168, 188, 72, 19, 47, 62, 100, 63, 146, 62, 92, 65, 207, 61, 62, 56, 4, 61, 247, 207, 45, 62, 111, 131, 219, 61, 56, 111, 21, 190, 34, 102, 169, 61, 172, 203, 21, 63, 162, 252, 148, 189, 49, 205, 49, 61, 157, 252, 7, 189, 233, 65, 32, 61, 98, 26, 157, 61, 15, 180, 181, 190, 133, 110, 152, 58, 73, 83, 74, 62, 180, 243, 142, 188, 242, 14, 23, 191, 79, 174, 212, 187, 7, 87, 74, 190, 89, 130, 89, 189, 103, 187, 112, 62, 39, 51, 56, 62, 207, 43, 28, 61, 106, 63, 174, 61, 175, 54, 102, 62, 0, 213, 206, 189, 87, 27, 109, 62, 176, 34, 233, 190, 225, 62, 69, 190, 233, 15, 51, 190, 233, 10, 172, 62, 160, 156, 39, 63, 172, 244, 186, 187, 137, 45, 78, 191, 115, 206, 6, 62, 4, 152, 44, 191, 177, 52, 116, 189, 159, 105, 133, 190, 10, 212, 174, 191, 159, 210, 244, 190, 179, 255, 30, 190, 183, 90, 166, 188, 236, 165, 226, 60, 111, 6, 35, 190, 62, 127, 8, 191, 108, 4, 177, 62, 247, 207, 130, 62, 139, 218, 181, 190, 3, 154, 89, 190, 248, 206, 130, 61, 44, 215, 145, 189, 170, 180, 161, 62, 134, 118, 212, 61, 230, 227, 166, 190, 254, 219, 187, 62, 165, 249, 22, 61, 208, 22, 200, 62, 251, 45, 131, 62, 240, 38, 44, 190, 142, 36, 187, 190, 26, 121, 73, 190, 124, 48, 149, 190, 12, 177, 179, 62, 35, 184, 148, 62, 80, 130, 251, 185, 97, 7, 0, 190, 15, 159, 22, 189, 21, 62, 0, 191, 74, 194, 118, 191, 249, 210, 65, 190, 105, 99, 25, 191, 157, 94, 163, 191, 72, 31, 29, 190, 218, 182, 66, 189, 248, 196, 35, 61, 64, 159, 138, 188, 166, 163, 220, 62, 153, 12, 157, 62, 253, 107, 156, 61, 107, 94, 76, 188, 108, 104, 90, 191, 252, 165, 159, 62, 69, 93, 47, 191, 89, 188, 214, 189, 153, 160, 128, 62, 7, 221, 65, 62, 208, 246, 168, 60, 187, 183, 103, 189, 4, 56, 83, 60, 140, 246, 72, 189, 21, 210, 80, 190, 120, 153, 18, 190, 126, 96, 104, 188, 113, 36, 166, 62, 81, 39, 216, 189, 100, 14, 252, 189, 210, 185, 235, 59, 120, 195, 128, 190, 142, 134, 71, 62, 210, 19, 28, 62, 10, 68, 38, 190, 124, 51, 159, 61, 184, 15, 148, 62, 4, 118, 67, 62, 87, 104, 7, 62, 163, 48, 188, 190, 130, 1, 183, 62, 172, 254, 72, 190, 211, 129, 27, 190, 118, 95, 85, 190, 160, 33, 107, 61, 208, 121, 179, 190, 95, 19, 37, 191, 70, 87, 197, 190, 123, 51, 238, 188, 184, 31, 20, 190, 151, 69, 163, 62, 102, 193, 19, 191, 111, 196, 87, 189, 77, 59, 193, 61, 169, 119, 122, 61, 131, 138, 139, 62, 164, 177, 19, 191, 33, 227, 178, 190, 127, 164, 105, 188, 142, 86, 61, 189, 255, 42, 254, 61, 64, 229, 96, 191, 213, 28, 161, 189, 248, 205, 32, 62, 98, 145, 47, 62, 22, 38, 55, 191, 19, 160, 13, 63, 234, 104, 154, 62, 168, 228, 189, 189, 77, 124, 61, 191, 35, 245, 230, 61, 239, 113, 159, 62, 122, 129, 170, 189, 121, 126, 158, 191, 241, 142, 184, 189, 63, 179, 80, 190, 165, 104, 150, 190, 208, 209, 2, 61, 91, 43, 91, 190, 48, 199, 136, 59, 18, 1, 17, 57, 220, 64, 100, 62, 13, 78, 206, 62, 33, 173, 54, 190, 216, 139, 108, 188, 51, 131, 35, 190, 30, 21, 62, 62, 226, 220, 170, 188, 18, 31, 178, 191, 3, 126, 32, 61, 111, 71, 9, 62, 162, 46, 255, 59, 207, 128, 99, 61, 127, 215, 145, 62, 206, 233, 48, 61, 52, 15, 45, 187, 69, 206, 3, 62, 208, 154, 69, 190, 119, 11, 34, 190, 169, 176, 127, 62, 199, 55, 201, 189, 175, 254, 94, 61, 187, 133, 32, 61, 220, 15, 153, 62, 76, 25, 155, 62, 124, 192, 22, 191, 255, 105, 92, 62, 216, 75, 232, 62, 219, 251, 158, 189, 170, 68, 165, 191, 172, 88, 150, 191, 181, 11, 11, 62, 132, 140, 129, 191, 30, 229, 178, 60, 81, 71, 171, 62, 4, 122, 204, 190, 123, 184, 201, 189, 118, 204, 52, 190, 126, 20, 79, 191, 193, 128, 236, 190, 26, 9, 141, 191, 155, 69, 157, 190, 86, 140, 136, 190, 249, 10, 127, 61, 26, 140, 16, 191, 221, 49, 29, 191, 217, 95, 21, 189, 85, 56, 90, 62, 208, 11, 120, 191, 244, 105, 179, 61, 211, 110, 2, 191, 123, 11, 190, 189, 230, 209, 205, 62, 104, 127, 110, 62, 122, 21, 14, 62, 199, 155, 147, 190, 82, 53, 246, 190, 204, 133, 92, 189, 71, 206, 182, 190, 161, 253, 110, 62, 128, 110, 136, 190, 25, 240, 17, 190, 112, 235, 129, 62, 20, 219, 50, 189, 77, 187, 227, 62, 4, 81, 8, 190, 55, 1, 141, 191, 87, 17, 222, 60, 244, 40, 123, 62, 179, 112, 25, 190, 232, 207, 30, 62, 197, 84, 18, 189, 246, 246, 71, 62, 251, 112, 131, 62, 35, 75, 178, 62, 147, 47, 157, 188, 37, 225, 66, 62, 34, 124, 138, 62, 106, 96, 52, 189, 230, 23, 27, 62, 95, 162, 139, 60, 244, 83, 151, 188, 218, 132, 27, 191, 211, 113, 203, 189, 251, 95, 135, 62, 207, 79, 6, 191, 109, 74, 130, 188, 138, 13, 158, 190, 82, 128, 15, 62, 168, 215, 43, 191, 128, 204, 60, 62, 21, 151, 166, 59, 31, 225, 252, 60, 255, 136, 130, 190, 93, 98, 99, 188, 221, 230, 236, 188, 55, 222, 132, 59, 229, 184, 182, 190, 208, 55, 251, 187, 226, 173, 154, 190, 67, 46, 71, 190, 221, 224, 7, 190, 43, 240, 36, 191, 245, 53, 145, 190, 165, 227, 127, 191, 15, 84, 119, 190, 9, 159, 88, 191, 248, 176, 11, 62, 147, 85, 59, 191, 254, 253, 158, 188, 131, 208, 140, 189, 126, 34, 175, 190, 166, 144, 0, 191, 115, 152, 26, 191, 168, 11, 68, 61, 152, 78, 106, 191, 25, 21, 147, 61, 227, 84, 136, 62, 241, 1, 20, 62, 221, 104, 69, 190, 126, 13, 228, 187, 182, 73, 78, 191, 188, 126, 68, 187, 252, 71, 29, 191, 218, 67, 188, 189, 107, 62, 54, 61, 66, 41, 74, 61, 87, 240, 147, 61, 105, 145, 11, 62, 120, 229, 78, 62, 181, 79, 152, 61, 49, 84, 141, 61, 48, 197, 224, 190, 198, 43, 89, 188, 60, 159, 88, 62, 39, 234, 201, 189, 120, 218, 133, 191, 98, 90, 44, 62, 60, 242, 101, 62, 77, 207, 85, 60, 139, 193, 143, 60, 53, 154, 0, 190, 160, 117, 34, 62, 55, 215, 175, 190, 242, 103, 200, 60, 141, 248, 190, 60, 111, 145, 203, 61, 107, 179, 89, 190, 56, 254, 220, 190, 149, 68, 61, 62, 228, 188, 18, 60, 217, 57, 149, 61, 213, 192, 156, 60, 14, 17, 44, 62, 13, 82, 28, 191, 159, 140, 84, 191, 110, 205, 183, 189, 48, 160, 90, 188, 147, 45, 212, 62, 150, 69, 164, 60, 144, 206, 71, 61, 71, 109, 148, 61, 214, 161, 155, 62, 102, 140, 211, 189, 104, 148, 67, 190, 129, 237, 162, 62, 129, 179, 170, 61, 194, 163, 83, 190, 133, 156, 222, 59, 63, 130, 229, 61, 234, 86, 175, 62, 169, 145, 92, 190, 160, 69, 212, 62, 185, 197, 8, 62, 217, 245, 196, 61, 19, 116, 137, 190, 77, 48, 121, 62, 127, 172, 110, 61, 30, 198, 174, 62, 113, 114, 157, 190, 253, 165, 139, 191, 255, 185, 18, 191, 227, 247, 26, 190, 30, 135, 19, 190, 156, 176, 125, 62, 161, 147, 129, 189, 55, 110, 122, 191, 67, 77, 175, 189, 35, 190, 153, 189, 49, 93, 189, 62, 65, 57, 218, 189, 187, 101, 93, 190, 219, 157, 88, 62, 90, 122, 211, 62, 187, 231, 158, 190, 165, 38, 212, 62, 191, 113, 197, 189, 76, 159, 216, 188, 116, 238, 213, 189, 10, 62, 77, 61, 146, 141, 49, 62, 184, 22, 38, 62, 184, 2, 145, 61, 127, 130, 40, 190, 1, 19, 1, 60, 39, 149, 168, 62, 148, 164, 116, 189, 55, 167, 180, 189, 161, 60, 131, 62, 165, 202, 30, 190, 6, 106, 102, 61, 146, 253, 191, 189, 143, 207, 77, 191, 97, 226, 252, 190, 119, 197, 51, 190, 9, 111, 28, 61, 243, 98, 49, 188, 222, 29, 57, 188, 239, 186, 161, 189, 204, 171, 35, 190, 151, 165, 237, 60, 154, 166, 32, 61, 120, 128, 224, 189, 135, 68, 82, 189, 237, 80, 148, 61, 190, 216, 96, 190, 212, 153, 18, 189, 132, 93, 35, 190, 29, 176, 104, 190, 234, 228, 5, 62, 220, 223, 20, 61, 74, 5, 127, 61, 92, 74, 12, 190, 62, 76, 102, 61, 23, 119, 168, 189, 122, 63, 163, 189, 45, 122, 11, 190, 24, 80, 13, 189, 31, 103, 195, 60, 220, 178, 12, 189, 192, 227, 242, 61, 142, 254, 66, 189, 129, 174, 9, 189, 3, 91, 49, 190, 13, 61, 153, 61, 27, 128, 158, 59, 190, 122, 48, 62, 28, 54, 44, 188, 93, 2, 166, 188, 143, 177, 2, 190, 65, 204, 32, 189, 121, 243, 33, 190, 238, 176, 42, 190, 141, 235, 190, 61, 188, 151, 30, 62, 251, 139, 25, 190, 45, 7, 149, 61, 107, 105, 181, 189, 214, 203, 168, 189, 53, 13, 3, 190, 145, 61, 25, 61, 64, 105, 253, 61, 34, 174, 250, 59, 21, 136, 6, 189, 200, 253, 0, 62, 146, 128, 122, 61, 5, 100, 42, 190, 93, 13, 73, 189, 123, 128, 167, 189, 82, 223, 244, 58, 6, 130, 75, 61, 223, 126, 180, 61, 160, 189, 160, 186, 82, 134, 20, 189, 29, 181, 202, 61, 241, 16, 101, 189, 103, 232, 34, 62, 115, 63, 238, 189, 6, 0, 204, 189, 155, 20, 32, 191, 0, 109, 229, 62, 89, 121, 132, 190, 184, 209, 223, 188, 222, 10, 6, 191, 51, 232, 124, 62, 252, 203, 186, 190, 253, 164, 146, 191, 236, 53, 237, 60, 194, 238, 187, 190, 67, 6, 116, 62, 190, 31, 213, 62, 123, 91, 178, 190, 21, 200, 10, 62, 103, 177, 45, 60, 112, 129, 5, 63, 3, 138, 177, 190, 128, 216, 27, 191, 190, 72, 136, 191, 26, 115, 20, 191, 222, 200, 14, 61, 71, 169, 196, 61, 119, 6, 43, 191, 83, 97, 106, 188, 58, 4, 241, 189, 156, 91, 123, 62, 218, 249, 248, 191, 173, 63, 191, 62, 76, 65, 103, 62, 8, 246, 16, 61, 200, 89, 165, 190, 50, 250, 130, 189, 129, 107, 237, 189, 30, 196, 130, 62, 156, 111, 232, 188, 187, 168, 212, 190, 18, 57, 232, 62, 226, 54, 232, 60, 49, 169, 160, 190, 231, 159, 105, 191, 147, 243, 112, 190, 137, 226, 191, 190, 143, 224, 146, 190, 15, 73, 4, 62, 53, 224, 186, 190, 33, 156, 217, 189, 246, 248, 239, 59, 238, 16, 181, 60, 75, 123, 229, 60, 139, 161, 204, 190, 45, 135, 0, 190, 103, 102, 153, 189, 193, 217, 97, 190, 188, 151, 136, 62, 227, 223, 164, 190, 144, 242, 176, 61, 21, 68, 230, 62, 106, 75, 195, 62, 126, 219, 253, 190, 77, 130, 33, 62, 35, 199, 172, 62, 41, 128, 38, 62, 223, 235, 76, 191, 91, 100, 184, 59, 31, 134, 5, 190, 120, 96, 51, 190, 2, 168, 167, 190, 118, 240, 200, 190, 84, 3, 82, 60, 53, 205, 219, 189, 213, 181, 44, 61, 241, 211, 83, 62, 29, 103, 59, 62, 18, 51, 148, 62, 137, 178, 127, 190, 146, 31, 235, 187, 235, 65, 17, 189, 19, 91, 123, 189, 114, 61, 39, 190, 227, 22, 193, 190, 169, 2, 89, 61, 220, 183, 111, 189, 119, 180, 51, 189, 103, 124, 34, 62, 134, 22, 32, 190, 62, 150, 137, 62, 206, 197, 145, 62, 58, 62, 44, 62, 27, 80, 28, 190, 163, 49, 188, 60, 60, 140, 25, 62, 125, 221, 125, 62, 32, 109, 45, 62, 66, 129, 137, 62, 138, 65, 239, 190, 14, 90, 176, 189, 23, 117, 16, 190, 157, 251, 1, 190, 61, 18, 155, 189, 99, 154, 54, 190, 95, 120, 198, 187, 236, 90, 188, 61, 153, 199, 228, 61, 43, 188, 71, 189, 89, 167, 207, 60, 77, 193, 51, 190, 21, 221, 140, 189, 127, 127, 210, 189, 203, 211, 253, 188, 60, 224, 110, 188, 38, 133, 19, 189, 137, 8, 211, 189, 1, 1, 4, 190, 159, 15, 229, 188, 153, 24, 14, 62, 200, 70, 217, 189, 177, 193, 31, 189, 47, 162, 56, 61, 71, 37, 63, 61, 111, 49, 241, 189, 202, 135, 156, 61, 251, 34, 10, 61, 169, 78, 246, 61, 146, 222, 179, 60, 157, 23, 227, 189, 94, 230, 143, 189, 130, 26, 23, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 134, 197, 61, 38, 59, 75, 62, 174, 179, 165, 61, 220, 224, 188, 190, 249, 109, 232, 189, 220, 154, 142, 61, 122, 193, 111, 62, 126, 228, 108, 62, 222, 175, 142, 62, 228, 81, 26, 61, 179, 169, 34, 62, 185, 179, 237, 189, 182, 83, 146, 62, 68, 105, 16, 189, 104, 219, 54, 62, 103, 201, 241, 61, 120, 168, 240, 61, 233, 105, 122, 62, 13, 97, 241, 188, 149, 114, 156, 62, 96, 133, 46, 62, 141, 180, 121, 190, 195, 192, 216, 189, 124, 77, 179, 62, 154, 196, 71, 61, 242, 87, 182, 189, 66, 38, 35, 190, 180, 46, 158, 189, 203, 44, 33, 62, 219, 155, 51, 62, 221, 90, 46, 62, 148, 40, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 96, 171, 191, 22, 96, 7, 62, 226, 60, 48, 62, 94, 174, 129, 190, 198, 45, 22, 190, 185, 199, 170, 188, 26, 41, 122, 191, 180, 111, 15, 63, 6, 119, 176, 191, 20, 242, 2, 191, 228, 146, 209, 62, 209, 145, 133, 190, 152, 5, 86, 188, 88, 122, 140, 190, 42, 219, 152, 62, 237, 212, 42, 61, 51, 227, 124, 63, 16, 66, 90, 62, 27, 231, 244, 62, 100, 189, 154, 61, 50, 228, 171, 191, 6, 8, 13, 63, 31, 61, 82, 191, 72, 104, 168, 188, 209, 217, 34, 191, 255, 229, 185, 190, 92, 107, 89, 61, 70, 31, 17, 190, 149, 194, 76, 63, 208, 48, 190, 62, 131, 37, 63, 62, 187, 254, 113, 188, 70, 137, 195, 62, 155, 77, 204, 62, 251, 180, 79, 61, 30, 78, 99, 62, 99, 217, 15, 190, 193, 48, 53, 190, 3, 70, 194, 190, 92, 31, 111, 62, 198, 116, 45, 63, 138, 6, 50, 191, 93, 73, 226, 190, 32, 247, 162, 187, 170, 177, 33, 190, 188, 103, 179, 188, 234, 43, 80, 61, 12, 67, 190, 190, 132, 128, 150, 61, 35, 72, 111, 190, 56, 176, 122, 190, 169, 22, 235, 190, 133, 84, 120, 62, 48, 158, 29, 61, 22, 217, 81, 62, 30, 231, 178, 190, 104, 227, 174, 189, 97, 190, 214, 62, 200, 249, 33, 189, 251, 236, 29, 57, 225, 168, 141, 189, 193, 127, 207, 190, 35, 127, 148, 60, 20, 44, 8, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {9, 74, 15, 61, 103, 95, 6, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {15, 168, 187, 190, 93, 22, 108, 63, 180, 132, 62, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {69, 110, 174, 62, 82, 40, 158, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0046/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}