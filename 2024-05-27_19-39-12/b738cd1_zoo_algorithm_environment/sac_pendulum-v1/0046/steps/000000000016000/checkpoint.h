// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 211, 176, 190, 66, 246, 149, 60, 64, 48, 200, 60, 98, 112, 199, 190, 80, 217, 246, 63, 251, 116, 31, 63, 173, 234, 6, 63, 126, 6, 132, 191, 121, 92, 228, 62, 145, 211, 222, 61, 106, 229, 75, 63, 159, 94, 50, 63, 9, 207, 43, 61, 255, 217, 204, 191, 218, 167, 181, 190, 179, 4, 217, 190, 238, 136, 190, 63, 192, 106, 164, 62, 36, 70, 4, 62, 73, 203, 146, 62, 15, 10, 180, 62, 243, 124, 255, 62, 1, 246, 137, 63, 127, 175, 102, 62, 151, 38, 237, 190, 158, 1, 162, 62, 182, 18, 230, 190, 157, 118, 169, 190, 169, 46, 243, 190, 51, 251, 128, 190, 112, 180, 143, 190, 20, 136, 33, 63, 30, 14, 245, 190, 59, 73, 2, 191, 92, 27, 241, 62, 209, 124, 225, 60, 87, 101, 123, 189, 86, 186, 123, 191, 226, 185, 54, 189, 6, 248, 210, 62, 75, 204, 170, 63, 115, 31, 172, 62, 98, 54, 51, 191, 167, 129, 254, 62, 251, 57, 110, 62, 121, 220, 134, 62, 129, 210, 102, 190, 237, 4, 9, 63, 122, 169, 72, 191, 125, 111, 21, 191, 207, 128, 36, 190, 194, 142, 197, 188, 137, 248, 3, 190, 34, 132, 228, 190, 215, 235, 122, 62, 207, 175, 136, 63, 204, 104, 39, 63, 37, 12, 1, 191, 9, 18, 86, 189, 115, 219, 60, 191, 156, 78, 187, 62, 112, 64, 215, 62, 184, 234, 243, 190, 41, 211, 121, 190, 100, 92, 254, 190, 134, 42, 154, 189, 173, 99, 117, 62, 38, 180, 20, 63, 194, 17, 56, 190, 85, 138, 251, 189, 122, 92, 169, 63, 127, 242, 131, 189, 57, 205, 141, 61, 224, 239, 34, 62, 245, 38, 40, 57, 81, 65, 196, 62, 238, 236, 89, 189, 114, 155, 239, 190, 145, 74, 63, 63, 109, 88, 71, 63, 111, 25, 209, 61, 146, 101, 147, 190, 219, 150, 43, 191, 192, 224, 55, 191, 131, 120, 68, 63, 133, 69, 152, 190, 201, 86, 114, 62, 141, 16, 238, 62, 71, 193, 189, 61, 30, 60, 11, 191, 158, 72, 97, 63, 68, 241, 134, 191, 12, 190, 147, 190, 244, 90, 187, 189, 50, 125, 219, 191, 92, 71, 175, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 88, 25, 191, 161, 4, 101, 190, 198, 131, 171, 62, 14, 193, 31, 190, 168, 85, 130, 189, 24, 248, 22, 190, 26, 189, 183, 62, 169, 82, 218, 61, 135, 195, 210, 190, 114, 94, 158, 62, 182, 176, 28, 190, 225, 166, 226, 62, 50, 42, 187, 62, 247, 180, 244, 189, 102, 177, 26, 63, 250, 129, 175, 61, 197, 166, 191, 190, 17, 224, 108, 190, 29, 178, 160, 190, 100, 148, 172, 188, 7, 139, 213, 62, 138, 175, 101, 62, 9, 78, 43, 63, 109, 247, 250, 189, 59, 137, 52, 190, 110, 189, 181, 189, 198, 90, 116, 61, 159, 129, 38, 190, 198, 200, 231, 190, 167, 231, 178, 62, 40, 26, 173, 190, 8, 178, 152, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 209, 25, 62, 54, 108, 238, 190, 74, 245, 224, 190, 55, 50, 140, 62, 160, 66, 182, 190, 142, 2, 124, 191, 40, 70, 149, 190, 104, 90, 183, 62, 60, 5, 192, 62, 243, 49, 145, 61, 160, 108, 113, 62, 205, 195, 203, 62, 1, 88, 250, 60, 220, 163, 87, 62, 231, 250, 46, 190, 128, 86, 76, 188, 69, 134, 41, 61, 89, 187, 206, 189, 245, 6, 251, 62, 243, 216, 47, 62, 190, 138, 85, 62, 214, 11, 0, 62, 252, 205, 12, 60, 246, 252, 87, 62, 140, 199, 34, 189, 102, 153, 16, 191, 188, 45, 20, 63, 247, 27, 136, 61, 58, 115, 63, 62, 196, 38, 216, 190, 195, 25, 164, 191, 155, 43, 223, 189, 222, 110, 146, 189, 36, 15, 56, 189, 28, 251, 246, 187, 2, 229, 5, 189, 155, 116, 147, 61, 191, 68, 42, 62, 103, 149, 188, 61, 111, 119, 45, 190, 105, 12, 50, 190, 69, 110, 122, 62, 132, 56, 4, 190, 4, 18, 134, 62, 178, 159, 56, 62, 14, 147, 104, 190, 195, 99, 136, 62, 255, 145, 161, 189, 66, 130, 173, 62, 238, 69, 71, 189, 159, 114, 159, 189, 96, 59, 197, 189, 54, 65, 170, 190, 65, 95, 158, 62, 128, 151, 4, 62, 168, 149, 88, 60, 1, 154, 31, 62, 181, 219, 200, 189, 32, 201, 129, 189, 30, 212, 162, 61, 17, 212, 240, 189, 239, 157, 231, 188, 89, 180, 248, 190, 163, 150, 183, 62, 36, 74, 163, 61, 173, 43, 44, 190, 11, 13, 149, 62, 65, 150, 26, 61, 156, 136, 96, 61, 151, 73, 251, 189, 22, 193, 26, 190, 18, 7, 162, 190, 146, 127, 145, 190, 32, 43, 31, 190, 211, 238, 69, 190, 121, 254, 188, 190, 102, 143, 134, 62, 187, 71, 150, 190, 83, 237, 245, 188, 120, 55, 223, 189, 102, 73, 166, 190, 99, 30, 21, 62, 172, 39, 134, 190, 20, 98, 204, 188, 207, 66, 162, 60, 243, 115, 181, 61, 71, 135, 0, 190, 160, 204, 69, 189, 128, 218, 15, 62, 57, 83, 148, 62, 132, 139, 252, 61, 126, 89, 68, 188, 183, 148, 11, 188, 162, 0, 90, 62, 249, 247, 240, 62, 16, 7, 73, 190, 122, 158, 46, 189, 249, 234, 22, 190, 193, 151, 201, 188, 126, 221, 247, 61, 57, 113, 28, 189, 229, 234, 241, 188, 60, 101, 101, 190, 79, 139, 247, 188, 187, 129, 192, 190, 190, 237, 98, 61, 153, 213, 174, 189, 64, 166, 152, 190, 15, 106, 228, 189, 54, 149, 148, 187, 146, 216, 150, 61, 20, 135, 237, 61, 224, 225, 116, 190, 94, 79, 10, 62, 193, 26, 13, 62, 248, 132, 105, 190, 148, 44, 45, 189, 228, 242, 162, 61, 2, 199, 175, 190, 99, 182, 112, 190, 41, 62, 92, 189, 162, 180, 164, 61, 163, 241, 50, 190, 251, 242, 142, 189, 70, 235, 110, 190, 74, 251, 59, 62, 149, 169, 163, 62, 153, 194, 164, 189, 140, 167, 34, 62, 81, 81, 97, 189, 107, 28, 125, 61, 42, 86, 218, 61, 72, 86, 174, 59, 148, 24, 46, 190, 82, 174, 67, 190, 21, 183, 140, 61, 155, 246, 192, 189, 32, 195, 133, 61, 119, 157, 118, 57, 225, 151, 128, 189, 241, 11, 101, 56, 33, 233, 145, 188, 215, 207, 78, 189, 134, 134, 41, 189, 92, 88, 198, 61, 143, 209, 209, 61, 242, 135, 253, 189, 196, 10, 29, 190, 136, 82, 72, 188, 195, 83, 72, 190, 190, 169, 251, 189, 73, 152, 42, 188, 250, 33, 29, 60, 243, 211, 1, 189, 148, 198, 13, 61, 204, 110, 206, 189, 57, 196, 207, 189, 15, 89, 5, 62, 197, 200, 10, 189, 109, 244, 87, 189, 159, 220, 39, 62, 57, 234, 105, 62, 122, 217, 181, 189, 35, 34, 57, 61, 5, 50, 40, 61, 143, 156, 189, 189, 213, 226, 69, 62, 211, 161, 27, 61, 176, 69, 255, 188, 165, 90, 22, 62, 96, 120, 172, 60, 162, 182, 240, 61, 50, 204, 95, 62, 239, 0, 63, 62, 213, 40, 163, 61, 55, 220, 164, 60, 110, 77, 129, 62, 198, 14, 143, 60, 135, 207, 130, 190, 35, 171, 142, 61, 24, 60, 98, 61, 200, 26, 231, 189, 170, 57, 49, 62, 29, 79, 29, 62, 172, 126, 220, 61, 74, 121, 110, 190, 85, 186, 226, 189, 116, 244, 163, 189, 197, 247, 46, 187, 61, 211, 17, 61, 45, 98, 5, 191, 181, 10, 37, 62, 22, 193, 75, 61, 206, 96, 0, 190, 0, 204, 90, 190, 56, 86, 11, 191, 149, 175, 140, 190, 129, 18, 118, 62, 182, 210, 29, 190, 251, 28, 161, 190, 217, 63, 4, 62, 123, 92, 169, 190, 159, 99, 63, 62, 207, 163, 176, 62, 90, 209, 111, 189, 3, 100, 213, 189, 38, 179, 159, 62, 80, 172, 39, 190, 116, 185, 125, 191, 42, 199, 120, 62, 64, 52, 247, 190, 68, 222, 254, 61, 160, 32, 207, 190, 98, 160, 177, 190, 114, 187, 7, 62, 124, 128, 199, 62, 224, 173, 23, 190, 129, 81, 117, 190, 215, 51, 16, 191, 175, 216, 154, 190, 141, 159, 239, 189, 4, 240, 183, 190, 62, 236, 133, 62, 30, 234, 150, 189, 139, 175, 43, 62, 88, 49, 128, 62, 53, 142, 119, 62, 194, 70, 254, 189, 212, 105, 14, 188, 213, 104, 240, 62, 3, 141, 23, 62, 163, 48, 80, 190, 234, 110, 7, 191, 245, 204, 39, 190, 37, 7, 232, 190, 50, 67, 175, 62, 154, 29, 105, 61, 169, 21, 210, 190, 103, 200, 184, 62, 118, 154, 27, 190, 252, 56, 72, 61, 9, 134, 236, 62, 237, 199, 41, 190, 123, 164, 193, 190, 247, 174, 221, 190, 251, 14, 159, 188, 227, 47, 134, 190, 15, 48, 84, 190, 76, 148, 36, 190, 139, 99, 48, 63, 82, 28, 231, 61, 35, 222, 198, 190, 127, 109, 6, 188, 108, 153, 236, 61, 230, 2, 71, 189, 136, 212, 39, 191, 120, 56, 146, 189, 26, 178, 208, 191, 32, 85, 51, 191, 249, 241, 46, 62, 19, 80, 133, 61, 192, 40, 164, 191, 223, 78, 208, 190, 66, 54, 34, 62, 2, 93, 26, 62, 127, 48, 144, 62, 98, 166, 16, 62, 104, 249, 192, 62, 137, 43, 235, 189, 72, 177, 154, 62, 63, 73, 31, 190, 135, 241, 24, 190, 44, 43, 24, 62, 6, 163, 239, 189, 10, 250, 69, 63, 223, 181, 141, 61, 39, 166, 10, 62, 27, 103, 8, 61, 191, 90, 115, 62, 165, 212, 180, 61, 8, 35, 44, 60, 82, 44, 30, 191, 207, 212, 35, 63, 1, 71, 160, 189, 242, 180, 240, 189, 251, 95, 128, 190, 90, 136, 136, 191, 136, 45, 21, 62, 42, 212, 175, 188, 15, 126, 49, 191, 81, 139, 166, 62, 42, 163, 40, 191, 72, 30, 153, 191, 62, 72, 166, 191, 118, 244, 104, 62, 66, 111, 134, 62, 105, 11, 219, 188, 78, 216, 103, 190, 47, 173, 205, 189, 173, 167, 6, 62, 195, 73, 243, 61, 83, 182, 152, 189, 42, 15, 131, 191, 208, 241, 37, 62, 33, 188, 17, 62, 94, 175, 43, 190, 63, 166, 159, 190, 243, 219, 32, 60, 170, 124, 51, 62, 208, 33, 171, 61, 187, 67, 51, 62, 161, 73, 86, 62, 218, 58, 167, 60, 132, 30, 55, 62, 226, 195, 23, 63, 217, 228, 163, 60, 130, 170, 158, 62, 248, 222, 95, 61, 75, 168, 31, 191, 47, 75, 130, 191, 241, 170, 32, 62, 35, 53, 65, 62, 198, 90, 207, 187, 83, 61, 102, 60, 202, 74, 119, 190, 213, 37, 191, 62, 191, 104, 23, 189, 145, 170, 204, 190, 64, 117, 34, 191, 238, 23, 185, 189, 104, 236, 43, 190, 86, 29, 37, 189, 106, 85, 29, 188, 239, 244, 20, 191, 47, 83, 169, 60, 110, 240, 2, 190, 43, 12, 111, 190, 131, 59, 110, 62, 94, 136, 94, 190, 150, 124, 56, 190, 5, 249, 165, 189, 74, 220, 46, 61, 143, 101, 2, 62, 140, 182, 10, 191, 35, 62, 200, 61, 26, 20, 147, 62, 58, 71, 251, 59, 211, 144, 136, 189, 90, 227, 64, 62, 252, 54, 248, 62, 13, 55, 144, 62, 17, 113, 134, 191, 88, 128, 192, 60, 12, 68, 199, 190, 39, 76, 210, 187, 88, 101, 178, 60, 14, 14, 103, 62, 16, 80, 88, 191, 213, 25, 254, 187, 58, 241, 116, 62, 248, 18, 10, 63, 76, 234, 144, 189, 46, 25, 9, 62, 55, 6, 255, 60, 177, 57, 44, 190, 91, 205, 109, 62, 126, 117, 236, 190, 9, 243, 218, 61, 175, 177, 157, 186, 49, 131, 100, 190, 207, 121, 13, 62, 179, 209, 100, 62, 25, 12, 121, 62, 131, 221, 41, 190, 52, 220, 81, 62, 210, 251, 40, 190, 52, 226, 13, 62, 30, 112, 38, 61, 108, 160, 177, 61, 126, 213, 207, 61, 160, 251, 135, 62, 52, 230, 124, 190, 123, 57, 7, 191, 231, 30, 93, 61, 179, 38, 24, 62, 173, 211, 154, 62, 46, 212, 11, 189, 98, 100, 183, 61, 39, 98, 116, 61, 83, 209, 200, 188, 75, 156, 120, 189, 15, 162, 142, 61, 24, 141, 3, 190, 5, 25, 22, 189, 205, 178, 20, 62, 93, 180, 20, 62, 55, 49, 58, 62, 91, 255, 172, 61, 201, 46, 197, 189, 125, 25, 111, 189, 152, 42, 135, 62, 96, 222, 69, 189, 253, 137, 30, 190, 104, 114, 37, 62, 35, 132, 213, 59, 60, 254, 177, 60, 222, 254, 135, 189, 124, 163, 141, 62, 202, 98, 67, 61, 131, 130, 78, 190, 147, 129, 62, 62, 20, 69, 86, 189, 79, 125, 21, 62, 87, 124, 201, 189, 30, 109, 32, 191, 219, 67, 130, 189, 244, 129, 7, 62, 3, 246, 231, 188, 202, 4, 23, 62, 199, 159, 33, 62, 63, 216, 145, 62, 89, 198, 61, 190, 53, 227, 11, 62, 202, 152, 17, 190, 223, 226, 10, 63, 111, 39, 61, 62, 111, 252, 83, 62, 90, 172, 158, 61, 63, 157, 47, 189, 56, 117, 235, 188, 75, 203, 211, 189, 142, 171, 124, 62, 120, 125, 43, 62, 38, 236, 152, 59, 217, 65, 41, 62, 23, 138, 73, 62, 54, 17, 20, 62, 175, 51, 247, 188, 142, 179, 210, 61, 56, 255, 196, 190, 89, 113, 46, 62, 218, 128, 195, 188, 157, 205, 37, 190, 75, 102, 116, 61, 185, 14, 163, 190, 227, 57, 81, 190, 77, 150, 230, 190, 154, 100, 243, 62, 198, 112, 101, 189, 219, 196, 19, 189, 217, 80, 48, 191, 74, 149, 19, 62, 69, 107, 126, 190, 199, 218, 185, 62, 212, 57, 234, 190, 71, 210, 45, 190, 165, 126, 80, 62, 187, 188, 235, 188, 98, 102, 156, 62, 27, 28, 13, 190, 157, 180, 175, 60, 24, 206, 196, 189, 93, 204, 137, 62, 172, 58, 157, 190, 125, 114, 116, 190, 140, 217, 30, 60, 53, 214, 45, 62, 251, 123, 141, 62, 253, 145, 12, 62, 74, 226, 63, 188, 99, 68, 42, 62, 11, 103, 153, 62, 92, 65, 207, 61, 190, 238, 150, 60, 79, 15, 45, 62, 231, 155, 218, 61, 140, 11, 26, 190, 29, 83, 143, 61, 92, 177, 254, 62, 4, 109, 162, 189, 49, 205, 49, 61, 71, 6, 42, 189, 165, 99, 20, 59, 57, 17, 76, 61, 159, 237, 128, 190, 15, 153, 121, 60, 21, 251, 45, 62, 61, 185, 42, 189, 146, 203, 11, 191, 130, 164, 197, 60, 232, 25, 51, 190, 116, 39, 17, 189, 77, 56, 66, 62, 87, 84, 36, 62, 102, 12, 2, 61, 69, 111, 89, 61, 139, 156, 101, 62, 24, 72, 165, 189, 2, 71, 78, 62, 249, 18, 196, 190, 60, 248, 83, 190, 121, 96, 91, 190, 32, 172, 149, 62, 21, 143, 28, 63, 172, 244, 186, 187, 92, 223, 17, 191, 38, 93, 183, 61, 109, 121, 41, 191, 98, 227, 177, 189, 173, 159, 97, 190, 82, 232, 158, 191, 68, 173, 203, 190, 179, 255, 30, 190, 27, 225, 21, 189, 179, 180, 107, 61, 193, 228, 35, 190, 14, 51, 24, 191, 185, 47, 165, 62, 216, 57, 139, 62, 154, 64, 175, 190, 52, 17, 142, 190, 243, 40, 17, 189, 183, 206, 203, 189, 10, 106, 144, 62, 96, 23, 40, 62, 171, 212, 166, 190, 107, 57, 180, 62, 241, 10, 69, 61, 6, 195, 162, 62, 80, 209, 135, 62, 129, 190, 48, 190, 3, 155, 222, 190, 199, 45, 54, 190, 129, 70, 110, 190, 236, 181, 192, 62, 192, 194, 158, 62, 80, 130, 251, 185, 103, 94, 138, 189, 38, 30, 226, 59, 255, 198, 17, 191, 14, 141, 92, 191, 240, 75, 49, 190, 105, 99, 25, 191, 169, 235, 171, 191, 72, 31, 29, 190, 128, 24, 36, 189, 233, 3, 18, 61, 205, 79, 132, 188, 1, 89, 210, 62, 95, 125, 158, 62, 157, 186, 167, 61, 144, 84, 47, 188, 82, 229, 59, 191, 61, 91, 168, 62, 158, 64, 24, 191, 246, 89, 106, 189, 84, 134, 91, 62, 188, 137, 73, 62, 255, 206, 191, 59, 102, 126, 140, 189, 218, 247, 154, 61, 67, 134, 225, 188, 182, 25, 75, 190, 48, 37, 200, 189, 65, 75, 164, 188, 34, 68, 159, 62, 53, 165, 220, 189, 208, 61, 11, 190, 210, 185, 235, 59, 194, 247, 130, 190, 112, 131, 70, 62, 156, 223, 53, 62, 38, 34, 29, 190, 141, 22, 154, 61, 104, 248, 134, 62, 17, 79, 48, 62, 87, 104, 7, 62, 119, 27, 161, 190, 219, 157, 177, 62, 24, 109, 74, 190, 195, 218, 11, 190, 237, 191, 28, 190, 164, 24, 102, 61, 205, 238, 181, 190, 95, 19, 37, 191, 76, 192, 170, 190, 255, 216, 159, 190, 82, 50, 27, 190, 23, 181, 153, 62, 216, 162, 19, 191, 118, 81, 100, 189, 163, 161, 162, 61, 26, 129, 134, 187, 4, 168, 85, 62, 227, 249, 16, 191, 98, 66, 214, 190, 87, 110, 1, 189, 186, 24, 67, 189, 115, 194, 231, 61, 19, 40, 120, 191, 213, 28, 161, 189, 12, 21, 14, 62, 26, 91, 40, 62, 90, 251, 24, 191, 25, 61, 12, 63, 18, 111, 147, 62, 45, 193, 217, 189, 120, 85, 48, 191, 35, 245, 230, 61, 38, 59, 161, 62, 1, 7, 195, 189, 64, 34, 155, 191, 122, 198, 237, 189, 190, 84, 97, 190, 197, 187, 149, 190, 71, 86, 73, 61, 13, 137, 100, 190, 117, 237, 147, 188, 247, 207, 235, 59, 17, 37, 104, 62, 44, 150, 192, 62, 160, 185, 38, 190, 10, 183, 173, 189, 35, 162, 44, 190, 14, 227, 71, 62, 218, 120, 195, 188, 213, 229, 174, 191, 223, 98, 21, 61, 74, 108, 14, 62, 97, 238, 114, 188, 95, 165, 129, 61, 148, 149, 149, 62, 206, 233, 48, 61, 202, 2, 241, 58, 176, 216, 20, 62, 125, 129, 81, 190, 196, 102, 26, 190, 57, 178, 130, 62, 15, 27, 6, 190, 242, 63, 26, 61, 187, 133, 32, 61, 153, 57, 97, 62, 2, 13, 165, 62, 105, 166, 20, 191, 104, 218, 90, 62, 49, 173, 155, 62, 243, 231, 49, 188, 112, 204, 140, 191, 4, 249, 141, 191, 19, 95, 38, 62, 109, 33, 107, 191, 132, 218, 209, 61, 241, 120, 183, 62, 4, 122, 204, 190, 229, 142, 135, 188, 58, 65, 248, 189, 154, 25, 41, 191, 49, 64, 209, 190, 255, 97, 140, 191, 3, 246, 132, 190, 223, 178, 186, 190, 124, 134, 206, 61, 143, 92, 42, 191, 221, 49, 29, 191, 217, 95, 21, 189, 13, 209, 27, 62, 122, 38, 94, 191, 214, 193, 175, 61, 138, 12, 250, 190, 179, 120, 61, 190, 184, 21, 180, 62, 36, 252, 115, 62, 122, 21, 14, 62, 122, 222, 140, 190, 213, 63, 248, 190, 27, 213, 133, 189, 84, 116, 201, 190, 26, 67, 138, 62, 181, 52, 118, 190, 118, 93, 218, 189, 100, 191, 101, 62, 223, 178, 165, 189, 242, 190, 214, 62, 45, 225, 18, 190, 35, 27, 145, 191, 81, 222, 147, 61, 55, 55, 65, 62, 95, 205, 32, 190, 137, 218, 212, 61, 146, 213, 130, 189, 229, 197, 56, 62, 72, 98, 103, 62, 225, 237, 169, 62, 56, 154, 76, 189, 69, 214, 60, 62, 186, 58, 142, 62, 106, 96, 52, 189, 229, 133, 3, 62, 157, 165, 22, 61, 223, 70, 70, 189, 5, 15, 30, 191, 156, 1, 240, 189, 97, 66, 77, 62, 54, 244, 13, 191, 109, 74, 130, 188, 138, 13, 158, 190, 166, 183, 74, 62, 252, 14, 32, 191, 16, 91, 127, 62, 21, 151, 166, 59, 71, 219, 193, 61, 205, 5, 124, 190, 93, 98, 99, 188, 109, 157, 186, 61, 55, 222, 132, 59, 169, 247, 61, 190, 137, 0, 138, 61, 226, 173, 154, 190, 53, 9, 147, 189, 150, 74, 163, 189, 104, 207, 210, 190, 71, 43, 146, 190, 179, 146, 108, 191, 4, 205, 103, 190, 44, 14, 96, 191, 181, 233, 104, 62, 196, 227, 32, 191, 254, 253, 158, 188, 131, 208, 140, 189, 158, 94, 171, 190, 63, 115, 191, 190, 216, 27, 11, 191, 30, 166, 163, 61, 86, 1, 105, 191, 204, 223, 227, 61, 10, 201, 165, 62, 241, 1, 20, 62, 60, 224, 18, 190, 220, 13, 71, 188, 7, 99, 79, 191, 8, 236, 203, 188, 146, 139, 27, 191, 181, 190, 209, 189, 219, 11, 138, 61, 170, 36, 41, 61, 144, 122, 98, 61, 74, 129, 22, 62, 194, 101, 86, 62, 39, 15, 142, 61, 244, 62, 159, 61, 215, 186, 227, 190, 153, 63, 207, 59, 72, 126, 85, 62, 201, 119, 197, 189, 82, 7, 136, 191, 253, 62, 46, 62, 34, 176, 119, 62, 211, 68, 189, 187, 86, 78, 21, 61, 131, 133, 226, 189, 160, 117, 34, 62, 76, 78, 169, 190, 251, 34, 89, 61, 46, 207, 104, 60, 114, 243, 215, 61, 215, 187, 75, 190, 38, 236, 221, 190, 115, 73, 46, 62, 228, 188, 18, 60, 197, 177, 205, 61, 140, 34, 213, 60, 23, 129, 61, 62, 6, 40, 31, 191, 149, 177, 72, 191, 183, 31, 188, 189, 173, 130, 135, 188, 206, 223, 200, 62, 26, 112, 9, 60, 155, 15, 230, 60, 218, 141, 157, 61, 112, 121, 163, 62, 25, 141, 222, 189, 37, 231, 14, 190, 116, 46, 171, 62, 10, 249, 81, 61, 14, 7, 101, 190, 227, 235, 127, 60, 131, 250, 195, 61, 221, 130, 176, 62, 218, 217, 96, 190, 75, 17, 212, 62, 254, 86, 212, 61, 217, 245, 196, 61, 19, 76, 139, 190, 153, 110, 119, 62, 73, 110, 42, 61, 4, 201, 171, 62, 231, 4, 158, 190, 100, 126, 137, 191, 116, 90, 27, 191, 227, 247, 26, 190, 126, 76, 20, 190, 254, 67, 134, 62, 41, 11, 120, 189, 203, 108, 102, 191, 91, 18, 170, 189, 240, 27, 146, 189, 36, 218, 189, 62, 221, 47, 199, 189, 119, 127, 57, 190, 130, 51, 78, 62, 85, 135, 211, 62, 13, 226, 143, 190, 176, 21, 211, 62, 240, 235, 159, 189, 11, 88, 32, 188, 62, 205, 37, 188, 126, 115, 93, 61, 215, 82, 48, 62, 75, 173, 45, 62, 126, 208, 164, 61, 4, 157, 229, 189, 112, 193, 121, 60, 194, 219, 152, 62, 148, 164, 116, 189, 126, 88, 172, 189, 30, 79, 133, 62, 197, 245, 14, 190, 45, 221, 106, 61, 173, 4, 179, 189, 255, 194, 71, 191, 89, 226, 240, 190, 119, 197, 51, 190, 9, 111, 28, 61, 243, 98, 49, 188, 222, 29, 57, 188, 239, 186, 161, 189, 204, 171, 35, 190, 151, 165, 237, 60, 154, 166, 32, 61, 120, 128, 224, 189, 135, 68, 82, 189, 237, 80, 148, 61, 190, 216, 96, 190, 212, 153, 18, 189, 132, 93, 35, 190, 29, 176, 104, 190, 234, 228, 5, 62, 220, 223, 20, 61, 74, 5, 127, 61, 92, 74, 12, 190, 62, 76, 102, 61, 23, 119, 168, 189, 122, 63, 163, 189, 45, 122, 11, 190, 24, 80, 13, 189, 31, 103, 195, 60, 220, 178, 12, 189, 192, 227, 242, 61, 142, 254, 66, 189, 129, 174, 9, 189, 3, 91, 49, 190, 13, 61, 153, 61, 27, 128, 158, 59, 190, 122, 48, 62, 28, 54, 44, 188, 93, 2, 166, 188, 143, 177, 2, 190, 65, 204, 32, 189, 121, 243, 33, 190, 238, 176, 42, 190, 141, 235, 190, 61, 188, 151, 30, 62, 251, 139, 25, 190, 45, 7, 149, 61, 107, 105, 181, 189, 214, 203, 168, 189, 53, 13, 3, 190, 145, 61, 25, 61, 64, 105, 253, 61, 34, 174, 250, 59, 21, 136, 6, 189, 200, 253, 0, 62, 146, 128, 122, 61, 5, 100, 42, 190, 93, 13, 73, 189, 123, 128, 167, 189, 82, 223, 244, 58, 6, 130, 75, 61, 223, 126, 180, 61, 160, 189, 160, 186, 82, 134, 20, 189, 29, 181, 202, 61, 241, 16, 101, 189, 103, 232, 34, 62, 115, 63, 238, 189, 6, 0, 204, 189, 187, 246, 13, 191, 139, 207, 222, 62, 50, 60, 132, 190, 34, 181, 232, 189, 18, 75, 219, 190, 44, 222, 127, 62, 158, 135, 184, 190, 253, 164, 146, 191, 44, 105, 166, 189, 233, 148, 200, 190, 127, 59, 83, 62, 242, 144, 191, 62, 123, 207, 173, 190, 149, 166, 187, 61, 69, 131, 32, 188, 244, 225, 133, 62, 43, 218, 189, 190, 63, 41, 24, 191, 183, 245, 147, 191, 56, 167, 21, 191, 66, 100, 139, 189, 48, 11, 196, 61, 93, 26, 56, 191, 83, 97, 106, 188, 127, 8, 243, 189, 30, 184, 125, 62, 81, 60, 238, 191, 135, 120, 189, 62, 202, 105, 102, 62, 23, 33, 253, 60, 251, 68, 193, 190, 50, 250, 130, 189, 45, 28, 185, 189, 74, 125, 128, 62, 56, 31, 11, 189, 95, 101, 169, 190, 120, 28, 246, 62, 135, 124, 10, 61, 59, 65, 158, 190, 173, 207, 80, 191, 149, 250, 15, 190, 26, 234, 154, 190, 0, 27, 84, 190, 19, 6, 1, 62, 116, 100, 181, 190, 224, 7, 194, 189, 155, 99, 175, 187, 87, 249, 174, 61, 232, 90, 123, 61, 200, 110, 203, 190, 128, 102, 157, 189, 6, 166, 158, 189, 86, 27, 54, 190, 225, 18, 137, 62, 83, 254, 122, 190, 144, 242, 176, 61, 95, 149, 231, 62, 128, 106, 196, 62, 112, 139, 217, 190, 106, 251, 29, 62, 4, 66, 173, 62, 158, 191, 30, 62, 81, 178, 48, 191, 91, 100, 184, 59, 244, 128, 15, 190, 163, 83, 44, 190, 125, 110, 148, 190, 104, 249, 207, 190, 71, 96, 23, 61, 13, 189, 191, 189, 255, 118, 80, 61, 31, 235, 59, 62, 85, 16, 32, 62, 84, 154, 137, 62, 209, 93, 136, 190, 82, 242, 131, 187, 74, 147, 178, 188, 54, 102, 244, 189, 68, 209, 33, 190, 72, 22, 213, 190, 92, 12, 255, 60, 15, 198, 211, 188, 227, 181, 139, 189, 148, 8, 26, 62, 64, 23, 45, 190, 148, 249, 136, 62, 131, 126, 147, 62, 58, 62, 44, 62, 43, 47, 41, 190, 41, 187, 225, 60, 236, 2, 4, 62, 26, 90, 133, 62, 206, 226, 39, 62, 59, 13, 130, 62, 65, 7, 242, 190, 14, 90, 176, 189, 23, 117, 16, 190, 157, 251, 1, 190, 61, 18, 155, 189, 99, 154, 54, 190, 95, 120, 198, 187, 236, 90, 188, 61, 153, 199, 228, 61, 43, 188, 71, 189, 89, 167, 207, 60, 77, 193, 51, 190, 21, 221, 140, 189, 127, 127, 210, 189, 203, 211, 253, 188, 60, 224, 110, 188, 38, 133, 19, 189, 137, 8, 211, 189, 1, 1, 4, 190, 159, 15, 229, 188, 153, 24, 14, 62, 200, 70, 217, 189, 177, 193, 31, 189, 47, 162, 56, 61, 71, 37, 63, 61, 111, 49, 241, 189, 202, 135, 156, 61, 251, 34, 10, 61, 169, 78, 246, 61, 146, 222, 179, 60, 157, 23, 227, 189, 94, 230, 143, 189, 130, 26, 23, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {139, 168, 188, 61, 118, 154, 63, 62, 54, 190, 166, 61, 220, 224, 188, 190, 249, 109, 232, 189, 154, 238, 164, 61, 177, 252, 67, 62, 146, 118, 98, 62, 79, 85, 142, 62, 163, 65, 39, 61, 254, 189, 29, 62, 230, 141, 232, 189, 97, 126, 150, 62, 116, 161, 48, 189, 253, 135, 50, 62, 73, 3, 199, 61, 120, 193, 14, 62, 139, 116, 118, 62, 67, 110, 32, 189, 179, 97, 156, 62, 20, 224, 58, 62, 27, 222, 124, 190, 118, 254, 160, 188, 219, 152, 183, 62, 161, 78, 85, 61, 43, 83, 162, 189, 66, 38, 35, 190, 180, 46, 158, 189, 211, 38, 29, 62, 241, 194, 52, 62, 237, 94, 48, 62, 148, 40, 80, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 212, 163, 191, 212, 114, 34, 62, 138, 20, 5, 62, 94, 174, 129, 190, 198, 45, 22, 190, 242, 190, 74, 188, 12, 185, 125, 191, 56, 8, 10, 63, 243, 249, 179, 191, 167, 124, 3, 191, 67, 137, 202, 62, 94, 243, 133, 190, 180, 233, 54, 188, 232, 138, 142, 190, 233, 210, 149, 62, 174, 37, 69, 61, 126, 242, 129, 63, 134, 118, 83, 62, 52, 153, 240, 62, 225, 246, 151, 61, 218, 179, 167, 191, 14, 223, 8, 63, 100, 177, 76, 191, 0, 67, 228, 188, 196, 168, 36, 191, 209, 76, 183, 190, 92, 107, 89, 61, 70, 31, 17, 190, 178, 182, 74, 63, 254, 156, 187, 62, 111, 32, 64, 62, 187, 254, 113, 188, 27, 175, 180, 62, 131, 226, 216, 62, 83, 79, 8, 61, 30, 78, 99, 62, 99, 217, 15, 190, 104, 183, 58, 190, 15, 229, 174, 190, 89, 113, 65, 62, 30, 161, 5, 63, 199, 192, 55, 191, 124, 22, 230, 190, 97, 231, 75, 188, 22, 128, 36, 190, 160, 181, 239, 186, 57, 20, 93, 61, 238, 203, 155, 190, 9, 216, 88, 61, 166, 170, 46, 190, 16, 227, 172, 190, 88, 107, 0, 191, 42, 28, 136, 62, 135, 132, 93, 61, 205, 133, 70, 62, 185, 15, 201, 190, 1, 97, 71, 189, 111, 224, 220, 62, 200, 249, 33, 189, 251, 236, 29, 57, 40, 216, 66, 190, 187, 86, 205, 190, 211, 83, 242, 60, 20, 44, 8, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {88, 94, 1, 61, 43, 112, 0, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {29, 158, 246, 62, 27, 99, 144, 63, 234, 30, 170, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {118, 84, 103, 62, 50, 4, 213, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0046/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}