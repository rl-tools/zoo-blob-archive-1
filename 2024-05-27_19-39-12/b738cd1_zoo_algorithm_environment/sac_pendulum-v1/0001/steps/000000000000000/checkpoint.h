// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {64, 18, 140, 190, 226, 22, 84, 60, 241, 181, 246, 62, 243, 207, 146, 189, 39, 250, 239, 190, 253, 56, 40, 190, 34, 98, 218, 62, 201, 218, 157, 62, 148, 82, 8, 191, 141, 185, 254, 190, 188, 99, 232, 190, 34, 62, 2, 191, 29, 64, 15, 191, 159, 192, 157, 62, 116, 145, 216, 190, 133, 133, 21, 190, 107, 101, 190, 190, 187, 89, 213, 62, 150, 225, 3, 191, 226, 220, 186, 190, 10, 55, 99, 190, 1, 218, 230, 189, 195, 144, 189, 62, 20, 197, 230, 60, 13, 123, 239, 190, 222, 167, 3, 189, 168, 2, 57, 62, 5, 142, 114, 60, 191, 128, 14, 63, 196, 96, 136, 62, 60, 124, 9, 63, 138, 78, 129, 189, 95, 243, 253, 59, 152, 168, 209, 190, 234, 244, 139, 190, 141, 71, 159, 62, 84, 106, 220, 62, 121, 7, 28, 61, 244, 162, 6, 63, 250, 153, 107, 61, 68, 50, 129, 62, 45, 114, 69, 190, 61, 151, 174, 62, 241, 63, 188, 62, 195, 253, 223, 190, 177, 32, 17, 191, 117, 43, 10, 191, 61, 64, 35, 62, 155, 61, 16, 63, 70, 183, 24, 61, 206, 81, 188, 190, 197, 102, 208, 190, 53, 98, 19, 191, 138, 156, 158, 62, 46, 179, 193, 62, 254, 54, 2, 191, 73, 144, 253, 62, 36, 98, 236, 190, 138, 213, 217, 60, 248, 30, 63, 61, 161, 94, 147, 190, 171, 107, 10, 191, 229, 138, 17, 190, 241, 109, 142, 190, 120, 78, 2, 189, 225, 149, 104, 189, 130, 217, 163, 62, 1, 247, 30, 189, 253, 48, 5, 62, 68, 244, 11, 191, 146, 222, 187, 190, 210, 250, 98, 62, 38, 104, 88, 62, 93, 186, 54, 61, 150, 144, 195, 62, 143, 213, 0, 63, 106, 0, 176, 61, 23, 126, 41, 190, 179, 224, 210, 190, 98, 220, 247, 61, 148, 66, 0, 191, 49, 231, 18, 63, 66, 210, 242, 62, 210, 51, 129, 187, 237, 104, 166, 62, 217, 250, 147, 190, 97, 168, 89, 62, 38, 44, 176, 189, 221, 232, 166, 189, 104, 98, 141, 190, 52, 150, 104, 61, 62, 7, 18, 191, 54, 67, 194, 62, 24, 10, 190, 189, 26, 44, 222, 62, 155, 223, 190, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 204, 19, 191, 241, 109, 0, 191, 166, 51, 39, 190, 16, 120, 63, 62, 209, 119, 58, 190, 164, 9, 198, 62, 2, 107, 99, 62, 164, 71, 196, 62, 226, 151, 235, 60, 12, 197, 138, 190, 168, 20, 224, 187, 58, 228, 104, 190, 14, 210, 86, 61, 114, 74, 231, 188, 165, 212, 11, 63, 40, 221, 182, 62, 135, 231, 11, 63, 206, 214, 233, 62, 100, 22, 128, 61, 55, 209, 225, 62, 63, 6, 56, 62, 37, 209, 139, 62, 45, 123, 19, 63, 47, 226, 110, 62, 126, 165, 191, 62, 159, 126, 251, 190, 129, 175, 99, 190, 144, 222, 254, 190, 11, 16, 231, 190, 89, 98, 85, 190, 225, 3, 188, 190, 135, 233, 3, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {139, 157, 67, 61, 56, 98, 198, 61, 140, 213, 141, 189, 139, 84, 144, 189, 182, 215, 70, 189, 65, 174, 196, 61, 148, 114, 199, 61, 241, 212, 52, 62, 88, 99, 148, 189, 106, 199, 235, 189, 137, 104, 138, 61, 38, 140, 231, 189, 91, 187, 20, 62, 125, 93, 12, 190, 7, 126, 147, 189, 82, 238, 40, 62, 49, 235, 229, 61, 101, 169, 156, 189, 22, 7, 6, 190, 17, 20, 197, 58, 246, 179, 44, 62, 131, 249, 26, 62, 102, 217, 24, 62, 205, 134, 179, 189, 200, 132, 17, 189, 133, 145, 72, 61, 66, 214, 174, 189, 52, 138, 178, 189, 246, 255, 142, 189, 207, 228, 185, 189, 62, 183, 25, 61, 157, 7, 200, 186, 156, 191, 201, 61, 200, 102, 7, 189, 56, 121, 32, 190, 141, 165, 219, 61, 117, 152, 255, 61, 201, 94, 156, 189, 231, 254, 14, 62, 120, 40, 232, 61, 177, 14, 172, 189, 152, 112, 196, 61, 151, 142, 228, 189, 214, 76, 126, 189, 86, 144, 1, 190, 93, 7, 167, 61, 86, 174, 13, 59, 33, 97, 166, 189, 48, 11, 192, 60, 137, 168, 20, 62, 88, 32, 144, 61, 32, 123, 18, 62, 196, 184, 42, 61, 219, 139, 3, 62, 134, 110, 142, 189, 134, 77, 201, 188, 26, 236, 75, 189, 188, 36, 230, 61, 248, 59, 186, 56, 205, 138, 160, 61, 7, 54, 32, 62, 242, 180, 48, 190, 44, 167, 216, 189, 207, 173, 67, 61, 137, 174, 25, 62, 60, 206, 17, 62, 0, 208, 169, 189, 252, 22, 9, 62, 194, 88, 88, 61, 236, 186, 48, 189, 162, 108, 10, 189, 49, 182, 43, 62, 31, 3, 20, 62, 117, 167, 146, 61, 105, 190, 227, 60, 146, 235, 25, 190, 73, 145, 42, 190, 22, 64, 212, 189, 228, 137, 237, 61, 236, 240, 250, 189, 104, 73, 183, 61, 73, 154, 9, 62, 190, 160, 106, 188, 92, 182, 172, 61, 87, 5, 199, 188, 219, 230, 18, 61, 255, 197, 251, 188, 90, 242, 191, 187, 233, 49, 39, 190, 125, 254, 196, 61, 48, 237, 34, 190, 80, 118, 26, 62, 94, 208, 5, 190, 110, 225, 211, 188, 105, 3, 45, 62, 72, 109, 110, 189, 230, 26, 18, 189, 201, 79, 241, 61, 231, 208, 167, 61, 201, 196, 202, 61, 134, 50, 21, 190, 121, 118, 160, 189, 41, 17, 17, 62, 37, 81, 45, 62, 254, 168, 199, 188, 166, 239, 13, 62, 165, 97, 62, 61, 158, 103, 42, 190, 53, 112, 190, 61, 63, 96, 9, 62, 132, 130, 29, 62, 97, 19, 36, 61, 68, 196, 166, 61, 240, 231, 222, 188, 54, 97, 52, 62, 123, 152, 139, 189, 75, 18, 173, 189, 155, 139, 193, 189, 166, 150, 52, 190, 4, 98, 52, 190, 247, 68, 135, 60, 45, 74, 131, 188, 23, 92, 72, 61, 207, 227, 242, 61, 127, 132, 67, 189, 44, 29, 73, 189, 78, 147, 1, 189, 120, 76, 122, 61, 109, 246, 99, 61, 12, 30, 225, 189, 131, 171, 243, 189, 229, 63, 34, 60, 11, 102, 174, 189, 249, 99, 209, 188, 213, 40, 211, 188, 109, 166, 244, 189, 155, 9, 201, 61, 22, 97, 18, 62, 179, 9, 15, 62, 150, 135, 202, 61, 129, 155, 94, 60, 28, 127, 39, 189, 229, 38, 197, 60, 151, 159, 155, 60, 20, 43, 196, 60, 156, 191, 249, 61, 70, 68, 186, 60, 155, 73, 34, 189, 85, 211, 44, 190, 4, 127, 40, 189, 122, 225, 40, 62, 25, 196, 137, 187, 195, 242, 73, 61, 73, 110, 164, 189, 243, 136, 214, 61, 170, 194, 215, 189, 237, 198, 83, 189, 131, 240, 98, 61, 153, 158, 133, 189, 232, 72, 44, 62, 224, 1, 62, 188, 30, 218, 214, 189, 70, 49, 177, 188, 110, 242, 166, 189, 41, 97, 28, 189, 209, 170, 1, 61, 140, 178, 27, 189, 254, 66, 8, 59, 214, 23, 105, 189, 193, 207, 168, 189, 229, 38, 12, 190, 72, 206, 219, 189, 127, 47, 133, 188, 185, 51, 71, 61, 132, 75, 17, 189, 201, 248, 191, 189, 120, 162, 17, 60, 164, 26, 34, 190, 189, 251, 13, 190, 251, 157, 234, 189, 12, 189, 102, 61, 62, 40, 8, 189, 19, 227, 154, 189, 157, 199, 127, 189, 197, 100, 42, 62, 182, 159, 159, 61, 177, 60, 55, 61, 167, 221, 11, 190, 42, 244, 254, 187, 125, 45, 63, 61, 131, 14, 166, 189, 34, 89, 32, 190, 182, 109, 234, 189, 232, 236, 39, 190, 162, 242, 2, 62, 31, 228, 204, 59, 50, 27, 174, 61, 145, 28, 207, 61, 210, 139, 14, 62, 251, 144, 35, 62, 213, 153, 199, 61, 252, 174, 169, 60, 145, 179, 248, 189, 170, 103, 173, 61, 41, 195, 53, 59, 141, 137, 98, 189, 3, 164, 85, 189, 166, 237, 42, 190, 190, 211, 119, 188, 178, 84, 169, 188, 31, 4, 13, 62, 168, 143, 24, 62, 91, 177, 9, 62, 153, 66, 79, 61, 224, 94, 24, 62, 212, 154, 40, 190, 247, 94, 128, 189, 166, 224, 219, 61, 88, 14, 209, 189, 9, 63, 43, 62, 188, 62, 144, 189, 118, 107, 103, 189, 194, 220, 135, 61, 101, 209, 22, 190, 244, 127, 101, 61, 168, 49, 42, 190, 223, 60, 140, 60, 174, 251, 154, 189, 229, 156, 19, 190, 200, 17, 243, 61, 44, 120, 64, 60, 26, 92, 31, 62, 163, 99, 23, 187, 67, 23, 136, 61, 241, 31, 34, 189, 230, 250, 20, 62, 161, 88, 66, 61, 110, 7, 37, 190, 215, 63, 129, 189, 94, 95, 249, 188, 209, 75, 244, 188, 3, 36, 7, 62, 30, 174, 242, 189, 126, 126, 158, 58, 123, 227, 46, 62, 120, 84, 29, 189, 72, 243, 170, 60, 195, 0, 51, 59, 76, 74, 100, 189, 109, 240, 49, 190, 58, 230, 49, 62, 129, 78, 246, 189, 130, 190, 123, 189, 250, 0, 222, 61, 48, 28, 191, 60, 71, 228, 25, 187, 110, 109, 48, 190, 242, 64, 239, 189, 184, 163, 39, 190, 108, 157, 4, 190, 187, 36, 21, 190, 74, 90, 202, 61, 38, 245, 197, 188, 121, 157, 196, 61, 228, 82, 178, 189, 113, 180, 131, 189, 6, 165, 235, 188, 140, 6, 25, 190, 199, 115, 175, 60, 189, 245, 62, 61, 72, 139, 176, 61, 199, 17, 57, 189, 149, 68, 46, 61, 66, 64, 46, 190, 97, 185, 211, 189, 182, 215, 37, 190, 56, 234, 149, 60, 74, 207, 169, 188, 67, 254, 12, 190, 205, 223, 1, 190, 239, 239, 129, 189, 8, 250, 151, 188, 200, 48, 8, 61, 15, 97, 16, 190, 172, 242, 36, 62, 81, 0, 22, 62, 207, 139, 38, 190, 14, 70, 14, 62, 82, 51, 208, 60, 139, 94, 114, 61, 110, 115, 29, 189, 49, 104, 249, 189, 120, 94, 71, 189, 154, 27, 107, 61, 29, 103, 11, 190, 136, 133, 43, 62, 203, 82, 22, 190, 185, 209, 51, 190, 137, 200, 153, 61, 130, 195, 31, 190, 115, 182, 184, 61, 192, 134, 45, 62, 123, 186, 251, 189, 217, 212, 255, 187, 2, 173, 76, 189, 103, 194, 26, 190, 71, 64, 27, 190, 54, 161, 184, 189, 13, 186, 33, 62, 187, 197, 50, 189, 168, 185, 146, 61, 107, 196, 196, 189, 91, 51, 206, 189, 33, 171, 179, 189, 57, 190, 14, 190, 127, 187, 19, 62, 10, 216, 154, 61, 104, 43, 127, 61, 68, 96, 34, 62, 240, 220, 208, 59, 30, 119, 252, 61, 69, 155, 54, 61, 227, 51, 214, 61, 69, 225, 122, 187, 239, 1, 246, 59, 126, 182, 31, 189, 233, 39, 18, 62, 62, 203, 29, 60, 102, 186, 116, 189, 203, 57, 193, 189, 124, 61, 234, 188, 49, 107, 197, 189, 132, 1, 19, 190, 14, 158, 48, 190, 196, 102, 86, 189, 169, 38, 218, 189, 54, 183, 3, 62, 115, 142, 242, 189, 91, 68, 53, 189, 230, 119, 181, 61, 76, 174, 121, 61, 29, 254, 182, 189, 77, 184, 33, 62, 164, 143, 31, 190, 203, 172, 245, 189, 29, 218, 48, 62, 195, 47, 97, 60, 150, 64, 5, 62, 108, 64, 230, 56, 46, 205, 158, 61, 215, 112, 93, 60, 171, 252, 52, 62, 19, 49, 98, 189, 195, 234, 69, 189, 47, 222, 156, 59, 182, 175, 26, 190, 82, 20, 97, 188, 211, 30, 164, 188, 204, 176, 7, 190, 189, 4, 141, 189, 50, 43, 193, 189, 180, 230, 175, 61, 145, 247, 145, 188, 23, 240, 60, 188, 72, 116, 140, 189, 248, 127, 115, 189, 165, 155, 136, 187, 79, 175, 130, 189, 122, 134, 18, 190, 224, 228, 126, 189, 95, 25, 181, 189, 134, 52, 16, 62, 148, 144, 41, 62, 241, 190, 186, 189, 150, 136, 237, 61, 175, 6, 40, 190, 241, 145, 226, 189, 218, 239, 162, 188, 96, 139, 50, 62, 244, 35, 14, 190, 191, 193, 10, 62, 160, 34, 39, 190, 118, 58, 126, 60, 67, 178, 5, 190, 253, 126, 36, 62, 94, 169, 29, 62, 145, 248, 100, 61, 77, 222, 13, 62, 119, 216, 155, 187, 107, 88, 1, 189, 178, 181, 99, 189, 117, 109, 177, 61, 56, 96, 9, 62, 165, 145, 27, 62, 214, 187, 101, 59, 89, 23, 2, 190, 190, 175, 182, 189, 222, 242, 33, 190, 167, 54, 130, 189, 172, 50, 40, 190, 250, 182, 209, 189, 196, 157, 132, 61, 65, 178, 171, 61, 255, 209, 251, 61, 199, 172, 95, 61, 53, 41, 211, 188, 248, 218, 250, 189, 217, 129, 176, 61, 238, 14, 191, 59, 105, 208, 122, 61, 166, 107, 17, 189, 119, 97, 201, 61, 23, 33, 6, 62, 31, 28, 209, 189, 125, 80, 162, 61, 55, 106, 24, 190, 122, 172, 219, 61, 176, 127, 221, 187, 187, 183, 241, 189, 240, 120, 248, 61, 49, 5, 33, 62, 25, 90, 230, 60, 241, 6, 210, 189, 82, 182, 194, 188, 126, 169, 22, 61, 188, 38, 33, 190, 18, 31, 107, 189, 129, 146, 164, 61, 222, 206, 144, 187, 121, 164, 222, 188, 208, 73, 30, 60, 152, 88, 192, 61, 235, 186, 244, 189, 109, 226, 23, 62, 114, 125, 70, 188, 237, 90, 3, 61, 69, 192, 46, 62, 115, 174, 50, 190, 132, 190, 58, 60, 106, 22, 119, 189, 45, 180, 253, 61, 160, 249, 54, 189, 165, 146, 26, 62, 227, 237, 167, 189, 237, 207, 4, 61, 145, 243, 13, 62, 221, 91, 100, 189, 75, 136, 208, 189, 219, 46, 141, 61, 65, 0, 246, 60, 170, 6, 46, 190, 96, 165, 91, 61, 48, 69, 116, 61, 193, 116, 136, 188, 245, 16, 102, 61, 55, 218, 22, 61, 157, 57, 171, 189, 108, 48, 20, 190, 26, 7, 23, 190, 194, 3, 140, 189, 201, 179, 69, 60, 48, 82, 8, 190, 213, 10, 39, 190, 226, 183, 1, 62, 210, 202, 170, 188, 144, 153, 3, 189, 221, 41, 233, 189, 226, 181, 17, 189, 5, 52, 252, 188, 183, 33, 49, 62, 5, 117, 8, 60, 90, 154, 222, 188, 229, 228, 185, 61, 224, 242, 14, 189, 187, 126, 73, 188, 130, 191, 6, 62, 19, 239, 30, 62, 63, 4, 161, 61, 194, 137, 36, 62, 209, 216, 12, 62, 135, 206, 35, 190, 67, 28, 30, 190, 80, 19, 19, 59, 160, 103, 229, 189, 110, 29, 83, 61, 44, 124, 102, 61, 44, 161, 79, 188, 238, 145, 26, 190, 29, 200, 2, 62, 191, 104, 222, 61, 106, 215, 43, 62, 50, 15, 29, 62, 119, 149, 145, 61, 196, 45, 170, 61, 124, 109, 50, 61, 122, 37, 147, 189, 209, 71, 51, 62, 195, 252, 159, 189, 41, 231, 29, 62, 103, 184, 3, 62, 114, 138, 43, 189, 48, 112, 61, 61, 238, 241, 22, 190, 65, 77, 0, 190, 23, 120, 131, 189, 85, 96, 13, 62, 191, 154, 78, 61, 175, 249, 136, 189, 45, 71, 23, 190, 17, 145, 135, 61, 169, 182, 202, 189, 127, 60, 222, 189, 222, 203, 36, 190, 24, 128, 8, 190, 236, 197, 154, 61, 204, 198, 40, 190, 137, 153, 90, 189, 244, 148, 20, 188, 92, 70, 21, 189, 189, 130, 36, 190, 113, 8, 40, 189, 161, 213, 100, 189, 77, 214, 138, 61, 34, 5, 5, 190, 163, 68, 158, 189, 249, 205, 247, 61, 239, 46, 164, 188, 17, 109, 188, 61, 121, 121, 237, 189, 218, 124, 111, 189, 134, 242, 33, 190, 25, 132, 42, 189, 191, 1, 15, 60, 151, 76, 210, 188, 164, 15, 250, 189, 25, 251, 231, 189, 210, 39, 254, 61, 119, 29, 2, 62, 40, 168, 2, 62, 102, 178, 48, 190, 170, 87, 107, 61, 128, 20, 245, 61, 5, 218, 214, 189, 50, 142, 151, 188, 193, 94, 46, 62, 68, 71, 128, 189, 163, 185, 35, 62, 126, 90, 254, 189, 82, 175, 134, 60, 119, 67, 30, 190, 208, 253, 20, 189, 60, 64, 112, 189, 248, 240, 220, 189, 2, 187, 17, 190, 100, 172, 201, 189, 243, 152, 109, 189, 94, 125, 49, 62, 32, 48, 1, 190, 166, 80, 233, 189, 139, 134, 10, 62, 159, 13, 143, 189, 76, 95, 51, 190, 147, 231, 87, 188, 249, 24, 30, 190, 20, 165, 15, 190, 47, 11, 37, 190, 24, 154, 76, 61, 48, 162, 27, 190, 247, 27, 97, 187, 31, 211, 206, 189, 25, 143, 192, 61, 166, 125, 15, 190, 218, 82, 221, 189, 38, 34, 201, 189, 236, 34, 6, 62, 231, 57, 127, 60, 30, 96, 43, 62, 103, 161, 144, 189, 71, 132, 25, 189, 149, 35, 228, 61, 83, 127, 43, 62, 108, 97, 38, 62, 1, 25, 229, 188, 194, 65, 28, 190, 18, 91, 154, 60, 252, 51, 209, 189, 39, 97, 174, 60, 118, 14, 7, 189, 73, 241, 30, 190, 123, 79, 8, 62, 236, 28, 41, 188, 210, 195, 236, 61, 197, 224, 220, 189, 134, 43, 191, 60, 63, 141, 246, 61, 67, 108, 70, 189, 206, 38, 78, 61, 146, 43, 33, 190, 102, 148, 100, 188, 56, 246, 153, 189, 154, 135, 216, 61, 185, 205, 131, 58, 72, 159, 142, 189, 79, 136, 49, 190, 203, 161, 6, 62, 75, 220, 146, 60, 136, 130, 157, 61, 125, 146, 167, 60, 199, 20, 48, 190, 9, 253, 183, 189, 8, 21, 241, 61, 88, 168, 9, 189, 185, 8, 7, 62, 38, 4, 206, 189, 138, 99, 59, 60, 246, 106, 217, 189, 166, 125, 10, 62, 28, 246, 136, 61, 252, 79, 8, 61, 222, 149, 176, 59, 242, 44, 128, 61, 181, 230, 105, 61, 147, 193, 12, 190, 124, 7, 0, 190, 131, 93, 42, 62, 125, 160, 9, 189, 3, 67, 196, 189, 249, 113, 34, 62, 232, 248, 165, 61, 133, 28, 47, 62, 129, 1, 170, 61, 14, 11, 31, 61, 239, 72, 126, 189, 68, 241, 130, 189, 53, 57, 11, 190, 75, 230, 145, 189, 27, 236, 29, 62, 25, 36, 189, 61, 2, 160, 193, 61, 28, 44, 252, 61, 208, 240, 142, 189, 57, 239, 40, 61, 183, 120, 9, 190, 237, 145, 58, 61, 124, 212, 213, 61, 87, 115, 245, 61, 169, 252, 218, 61, 40, 62, 104, 60, 9, 102, 101, 189, 215, 144, 0, 190, 211, 71, 30, 190, 177, 71, 26, 61, 40, 239, 36, 190, 69, 165, 161, 61, 113, 140, 157, 60, 193, 11, 173, 61, 196, 63, 236, 189, 221, 138, 201, 61, 165, 68, 51, 61, 157, 110, 34, 190, 77, 123, 9, 62, 206, 61, 246, 61, 170, 98, 246, 189, 64, 122, 30, 186, 70, 101, 189, 61, 219, 30, 127, 61, 5, 22, 47, 189, 252, 69, 159, 187, 175, 9, 180, 188, 219, 11, 187, 61, 170, 65, 0, 190, 251, 11, 231, 188, 247, 101, 158, 61, 224, 234, 231, 189, 243, 215, 128, 189, 3, 140, 241, 61, 45, 101, 222, 189, 227, 28, 90, 189, 7, 175, 7, 190, 105, 154, 54, 61, 61, 164, 185, 61, 146, 74, 96, 60, 139, 61, 166, 189, 124, 48, 212, 61, 58, 246, 185, 61, 27, 57, 43, 62, 131, 75, 198, 189, 8, 158, 184, 61, 190, 13, 192, 61, 48, 203, 52, 189, 175, 189, 185, 189, 244, 201, 250, 189, 224, 131, 154, 189, 92, 212, 36, 62, 83, 226, 239, 188, 131, 204, 10, 188, 56, 36, 204, 61, 31, 142, 35, 62, 140, 144, 175, 189, 254, 68, 71, 189, 249, 206, 229, 61, 214, 197, 162, 61, 78, 40, 158, 61, 21, 62, 0, 61, 92, 149, 255, 189, 26, 7, 52, 62, 142, 87, 41, 62, 247, 88, 17, 62, 110, 197, 52, 62, 160, 31, 214, 187, 144, 100, 4, 62, 9, 43, 17, 61, 36, 83, 150, 189, 5, 183, 202, 189, 78, 184, 245, 189, 11, 23, 33, 62, 189, 16, 229, 61, 197, 68, 6, 188, 46, 88, 26, 62, 67, 196, 113, 61, 104, 96, 22, 189, 133, 135, 174, 189, 161, 130, 27, 189, 239, 14, 129, 61, 136, 113, 252, 189, 208, 196, 9, 62, 247, 247, 237, 189, 211, 106, 4, 62, 255, 44, 171, 61, 133, 157, 191, 61, 246, 7, 217, 189, 193, 243, 1, 62, 75, 146, 146, 189, 152, 34, 103, 189, 99, 176, 49, 62, 104, 106, 22, 189, 47, 197, 143, 61, 74, 95, 73, 61, 222, 75, 251, 60, 174, 238, 179, 61, 255, 15, 46, 190, 163, 96, 38, 62, 74, 169, 160, 189, 21, 228, 149, 189, 63, 52, 152, 189, 22, 5, 14, 61, 96, 113, 184, 61, 229, 236, 155, 61, 172, 4, 202, 61, 173, 45, 116, 61, 120, 98, 35, 189, 105, 52, 152, 189, 101, 138, 240, 60, 78, 207, 112, 189, 10, 35, 151, 61, 81, 99, 59, 61, 81, 76, 153, 189, 58, 247, 213, 189, 26, 249, 48, 190, 57, 99, 247, 61, 86, 23, 191, 61, 157, 12, 41, 190, 70, 201, 136, 61, 74, 189, 35, 60, 7, 127, 237, 60, 90, 69, 114, 61, 213, 230, 181, 189, 195, 22, 167, 189, 44, 164, 22, 62, 103, 166, 183, 61, 132, 79, 136, 189, 157, 173, 135, 59, 27, 94, 115, 189, 152, 171, 44, 190, 16, 253, 1, 61, 159, 233, 8, 190, 32, 233, 223, 60, 190, 193, 239, 61, 35, 131, 76, 61, 112, 116, 42, 190, 5, 172, 178, 188, 55, 75, 133, 61, 43, 191, 81, 188, 133, 174, 27, 62, 180, 164, 178, 61, 199, 200, 16, 190, 139, 23, 255, 189, 173, 184, 9, 189, 22, 25, 5, 190, 86, 30, 108, 61, 246, 225, 249, 61, 34, 174, 129, 61, 142, 85, 249, 60, 63, 71, 71, 189, 188, 182, 155, 61, 92, 79, 5, 62, 185, 139, 232, 189, 149, 99, 172, 61, 95, 69, 26, 62, 170, 235, 176, 189, 72, 154, 225, 61, 123, 119, 16, 190, 40, 22, 13, 62, 10, 31, 223, 189, 115, 136, 156, 186, 138, 86, 165, 61, 8, 76, 172, 189, 114, 151, 210, 189, 63, 75, 117, 189, 238, 124, 113, 61, 69, 83, 244, 189, 227, 94, 132, 189, 105, 2, 40, 62, 155, 82, 39, 190, 186, 81, 248, 61, 35, 58, 32, 189, 254, 165, 29, 62, 39, 80, 36, 190, 120, 205, 166, 60, 174, 247, 174, 188, 106, 10, 231, 189, 74, 55, 124, 61, 243, 74, 117, 61, 42, 127, 130, 189, 33, 131, 98, 188, 246, 233, 154, 189, 43, 34, 144, 61, 43, 196, 27, 190, 240, 167, 120, 189, 55, 172, 84, 61, 70, 154, 172, 61, 126, 74, 11, 62, 156, 121, 154, 60, 192, 21, 18, 62, 154, 66, 192, 189, 134, 103, 240, 61, 139, 43, 122, 61, 96, 228, 25, 62, 158, 47, 112, 61, 207, 15, 34, 190, 242, 251, 26, 190, 138, 66, 69, 61, 28, 65, 2, 62, 235, 73, 124, 189, 36, 230, 156, 187, 0, 156, 10, 62, 245, 247, 221, 189, 194, 133, 179, 189, 28, 62, 12, 187, 239, 255, 197, 61, 162, 226, 27, 189, 179, 25, 124, 189, 245, 18, 121, 61, 124, 189, 213, 189, 118, 144, 183, 189, 157, 107, 128, 61, 86, 238, 98, 189, 123, 254, 204, 61, 67, 163, 175, 61, 219, 98, 111, 189, 88, 159, 194, 189, 126, 253, 52, 190, 78, 35, 86, 189, 140, 149, 175, 189, 206, 95, 254, 189, 96, 167, 29, 190, 6, 213, 146, 61, 247, 44, 152, 61, 179, 253, 174, 61, 14, 69, 128, 189, 43, 91, 251, 189, 146, 154, 9, 190, 201, 43, 128, 187, 203, 215, 170, 60, 118, 121, 11, 62, 61, 28, 85, 189, 201, 24, 229, 189, 177, 59, 213, 61, 204, 135, 47, 62, 128, 174, 225, 189, 72, 31, 29, 190, 149, 20, 43, 189, 124, 194, 43, 62, 216, 207, 2, 190, 238, 7, 211, 61, 36, 152, 5, 62, 162, 217, 49, 189, 5, 171, 7, 189, 140, 200, 39, 62, 187, 0, 130, 60, 230, 186, 14, 62, 64, 17, 132, 187, 114, 45, 19, 62, 160, 84, 36, 62, 4, 255, 177, 189, 154, 24, 25, 62, 75, 200, 188, 188, 238, 241, 47, 190, 227, 28, 188, 60, 220, 135, 16, 190, 143, 24, 24, 62, 164, 78, 157, 189, 107, 190, 255, 189, 151, 129, 163, 189, 31, 42, 175, 189, 99, 36, 88, 61, 85, 173, 51, 190, 5, 74, 136, 189, 50, 91, 49, 190, 69, 221, 33, 190, 194, 148, 190, 189, 60, 166, 221, 61, 177, 224, 106, 189, 116, 203, 159, 60, 55, 249, 197, 61, 139, 231, 204, 61, 153, 225, 106, 61, 136, 41, 162, 187, 177, 69, 183, 189, 229, 82, 123, 188, 78, 154, 147, 189, 165, 74, 13, 189, 22, 237, 142, 61, 207, 175, 36, 190, 253, 42, 209, 189, 226, 161, 51, 189, 176, 178, 160, 61, 206, 204, 171, 60, 75, 60, 114, 189, 87, 200, 244, 189, 118, 131, 146, 61, 119, 116, 134, 189, 205, 208, 243, 60, 170, 72, 106, 189, 91, 93, 152, 188, 85, 202, 99, 189, 175, 31, 224, 61, 39, 176, 197, 61, 28, 28, 247, 189, 138, 2, 133, 61, 152, 147, 7, 62, 90, 220, 17, 189, 244, 27, 116, 61, 51, 48, 243, 60, 41, 119, 143, 61, 195, 162, 186, 60, 38, 220, 41, 60, 95, 209, 103, 189, 82, 189, 28, 190, 86, 7, 0, 190, 150, 26, 52, 62, 206, 104, 253, 56, 73, 11, 185, 189, 149, 88, 119, 189, 255, 148, 253, 61, 39, 103, 134, 60, 178, 9, 211, 188, 166, 45, 5, 62, 160, 17, 29, 190, 181, 215, 1, 62, 179, 175, 60, 60, 111, 5, 40, 62, 71, 207, 247, 60, 148, 88, 174, 59, 170, 5, 209, 188, 232, 13, 188, 60, 66, 43, 189, 61, 96, 147, 242, 188, 144, 68, 1, 62, 5, 238, 34, 60, 191, 60, 193, 189, 54, 49, 252, 189, 1, 253, 153, 61, 136, 150, 228, 61, 110, 229, 22, 189, 102, 203, 196, 189, 171, 79, 238, 60, 34, 35, 22, 189, 214, 205, 39, 190, 84, 61, 188, 186, 180, 46, 196, 189, 9, 238, 209, 61, 190, 28, 138, 189, 70, 221, 138, 61, 39, 193, 191, 61, 246, 116, 202, 188, 17, 114, 107, 61, 60, 36, 40, 190, 207, 7, 238, 61, 193, 118, 205, 60, 57, 189, 207, 61, 140, 229, 103, 188, 199, 17, 185, 61, 39, 88, 174, 189, 47, 75, 135, 61, 187, 18, 11, 62, 121, 120, 162, 61, 164, 204, 147, 61, 203, 60, 245, 189, 234, 246, 0, 190, 17, 227, 152, 60, 16, 107, 136, 61, 45, 42, 48, 62, 94, 248, 66, 61, 90, 86, 155, 189, 221, 57, 6, 62, 204, 42, 148, 61, 58, 152, 143, 61, 184, 185, 182, 60, 237, 232, 244, 61, 178, 89, 179, 189, 237, 41, 123, 187, 112, 229, 133, 189, 10, 7, 153, 60, 220, 55, 181, 58, 255, 194, 199, 189, 67, 123, 151, 61, 145, 31, 59, 61, 140, 254, 204, 189, 20, 175, 179, 189, 211, 20, 179, 61, 94, 2, 169, 189, 138, 110, 9, 60, 188, 134, 179, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {150, 37, 72, 189, 67, 244, 35, 62, 171, 101, 135, 59, 135, 206, 68, 189, 13, 245, 237, 188, 222, 25, 166, 59, 37, 235, 47, 61, 58, 129, 36, 190, 147, 252, 6, 62, 68, 93, 144, 189, 225, 148, 141, 58, 6, 185, 10, 186, 89, 152, 11, 62, 0, 125, 20, 62, 17, 210, 6, 190, 133, 57, 28, 190, 16, 109, 39, 190, 163, 4, 39, 190, 178, 127, 43, 190, 94, 147, 18, 62, 203, 245, 234, 61, 15, 230, 186, 61, 162, 132, 1, 62, 228, 48, 221, 61, 53, 194, 17, 190, 95, 204, 12, 62, 31, 62, 243, 61, 164, 27, 20, 62, 157, 45, 155, 61, 76, 99, 178, 188, 204, 120, 208, 189, 108, 50, 108, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 147, 194, 57, 93, 165, 1, 190, 11, 69, 23, 62, 163, 103, 26, 62, 149, 136, 49, 188, 26, 1, 24, 189, 10, 80, 63, 189, 237, 67, 244, 189, 87, 243, 150, 61, 184, 26, 141, 189, 24, 1, 188, 189, 169, 61, 43, 61, 72, 156, 12, 62, 33, 15, 20, 190, 125, 98, 9, 190, 112, 230, 102, 61, 210, 150, 157, 189, 164, 50, 20, 61, 136, 102, 130, 188, 245, 21, 216, 61, 233, 99, 218, 189, 156, 70, 137, 189, 242, 29, 14, 190, 63, 37, 43, 62, 134, 116, 52, 61, 119, 227, 236, 61, 67, 247, 29, 190, 68, 145, 205, 189, 15, 136, 34, 62, 75, 155, 169, 61, 245, 147, 100, 189, 197, 91, 116, 61, 218, 130, 191, 188, 170, 32, 232, 189, 227, 16, 159, 188, 116, 208, 128, 188, 66, 225, 51, 190, 141, 59, 15, 62, 146, 93, 231, 61, 150, 130, 4, 62, 94, 193, 36, 190, 189, 62, 43, 190, 147, 49, 183, 61, 148, 150, 158, 61, 130, 34, 254, 60, 6, 131, 203, 189, 190, 237, 108, 61, 200, 117, 182, 189, 233, 52, 139, 189, 160, 240, 152, 189, 66, 79, 211, 59, 111, 49, 34, 190, 237, 162, 43, 62, 3, 190, 244, 188, 1, 238, 155, 189, 240, 86, 9, 190, 188, 209, 183, 61, 131, 66, 187, 189, 48, 43, 16, 62, 239, 154, 162, 189, 109, 201, 237, 189, 100, 44, 22, 190, 56, 37, 41, 62, 73, 209, 197, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 167, 8, 189, 157, 129, 8, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {113, 47, 198, 60, 94, 69, 44, 63, 8, 93, 168, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {46, 4, 13, 189, 217, 73, 23, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0001/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}