// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 18, 151, 188, 126, 63, 88, 190, 98, 58, 241, 62, 249, 57, 142, 62, 19, 208, 126, 191, 238, 154, 217, 190, 193, 23, 219, 62, 241, 147, 218, 189, 8, 254, 29, 191, 182, 203, 52, 191, 202, 239, 57, 191, 202, 39, 116, 190, 58, 71, 205, 190, 252, 115, 171, 62, 179, 50, 8, 191, 180, 215, 252, 190, 207, 227, 143, 190, 226, 241, 127, 62, 233, 123, 134, 189, 171, 114, 166, 191, 148, 58, 148, 190, 204, 63, 82, 190, 163, 196, 106, 63, 87, 155, 15, 190, 34, 64, 1, 190, 54, 152, 144, 63, 187, 116, 120, 62, 105, 95, 96, 62, 110, 233, 153, 63, 137, 221, 199, 62, 68, 74, 7, 63, 212, 175, 9, 191, 176, 45, 121, 190, 147, 34, 246, 190, 79, 194, 196, 191, 232, 156, 191, 60, 97, 199, 5, 63, 50, 79, 92, 63, 74, 201, 12, 63, 16, 116, 244, 188, 85, 246, 46, 191, 95, 160, 199, 190, 17, 204, 177, 62, 37, 181, 62, 62, 196, 238, 3, 191, 254, 149, 145, 191, 29, 6, 12, 63, 164, 104, 244, 188, 116, 118, 77, 63, 156, 131, 134, 191, 144, 57, 44, 190, 40, 224, 190, 190, 27, 104, 22, 191, 171, 156, 222, 62, 233, 122, 155, 189, 215, 117, 157, 191, 189, 126, 171, 62, 2, 152, 94, 191, 99, 244, 189, 62, 114, 180, 74, 62, 142, 172, 68, 189, 208, 152, 143, 191, 158, 31, 128, 190, 250, 146, 96, 190, 208, 79, 254, 62, 50, 203, 221, 189, 133, 133, 75, 62, 125, 36, 47, 63, 77, 151, 171, 61, 46, 188, 14, 191, 96, 182, 243, 189, 188, 0, 188, 62, 60, 109, 48, 63, 192, 50, 130, 63, 13, 227, 174, 62, 226, 125, 243, 62, 255, 193, 148, 190, 252, 196, 184, 190, 5, 3, 114, 190, 65, 32, 243, 190, 171, 16, 45, 191, 167, 10, 94, 63, 91, 238, 152, 63, 99, 162, 170, 62, 114, 22, 245, 189, 16, 81, 106, 63, 70, 158, 170, 62, 125, 138, 82, 62, 245, 130, 72, 191, 35, 67, 159, 190, 103, 58, 215, 61, 222, 230, 130, 63, 136, 132, 19, 63, 204, 253, 179, 189, 149, 73, 210, 62, 42, 47, 126, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 49, 149, 191, 0, 164, 4, 191, 218, 193, 67, 190, 243, 27, 211, 62, 247, 183, 197, 190, 136, 26, 23, 63, 103, 94, 181, 190, 115, 11, 190, 62, 130, 126, 64, 190, 184, 218, 15, 190, 186, 183, 255, 61, 125, 26, 216, 190, 99, 37, 31, 190, 48, 253, 121, 190, 180, 160, 27, 63, 236, 152, 247, 61, 147, 78, 244, 62, 43, 10, 189, 62, 132, 41, 202, 62, 138, 86, 178, 62, 235, 11, 167, 62, 128, 216, 148, 62, 43, 248, 10, 63, 61, 78, 154, 62, 206, 183, 149, 60, 252, 71, 222, 190, 72, 227, 102, 190, 152, 70, 224, 190, 26, 15, 176, 190, 165, 21, 95, 190, 191, 157, 201, 190, 77, 175, 9, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {170, 70, 171, 62, 204, 248, 201, 60, 15, 210, 170, 189, 246, 62, 144, 190, 10, 55, 78, 62, 243, 50, 131, 61, 247, 7, 1, 191, 115, 32, 148, 62, 186, 93, 117, 62, 124, 150, 230, 61, 37, 149, 64, 61, 240, 255, 72, 191, 104, 227, 164, 62, 17, 193, 88, 189, 34, 174, 215, 61, 78, 126, 123, 62, 43, 161, 85, 62, 64, 14, 55, 190, 209, 182, 152, 190, 121, 71, 41, 62, 230, 241, 174, 188, 112, 152, 141, 62, 197, 25, 195, 62, 47, 88, 95, 190, 246, 52, 58, 62, 145, 173, 165, 189, 155, 245, 197, 61, 86, 12, 209, 190, 210, 144, 184, 62, 193, 188, 213, 189, 252, 209, 170, 62, 123, 17, 200, 186, 252, 20, 191, 62, 184, 159, 232, 190, 251, 201, 125, 190, 103, 89, 2, 62, 88, 22, 111, 62, 146, 13, 249, 189, 16, 27, 75, 62, 69, 224, 140, 62, 43, 215, 8, 191, 58, 193, 2, 61, 172, 219, 22, 187, 117, 103, 225, 62, 246, 80, 122, 186, 111, 198, 12, 61, 204, 72, 38, 62, 242, 127, 156, 190, 160, 170, 197, 61, 5, 177, 33, 62, 233, 206, 244, 61, 178, 222, 141, 187, 33, 137, 104, 190, 243, 119, 34, 62, 205, 140, 116, 189, 254, 22, 33, 189, 192, 100, 54, 61, 92, 105, 85, 190, 119, 75, 129, 61, 161, 122, 21, 62, 73, 17, 183, 61, 215, 243, 3, 191, 22, 14, 102, 190, 185, 19, 59, 61, 235, 227, 215, 190, 240, 194, 129, 62, 65, 10, 202, 189, 164, 73, 98, 190, 132, 188, 137, 61, 163, 168, 14, 62, 249, 98, 78, 191, 249, 179, 233, 60, 87, 55, 253, 62, 160, 6, 51, 190, 21, 179, 68, 60, 111, 60, 236, 190, 63, 123, 159, 190, 233, 14, 97, 190, 144, 120, 140, 189, 170, 202, 157, 62, 45, 218, 56, 62, 70, 80, 92, 62, 179, 13, 214, 61, 114, 20, 49, 62, 190, 128, 45, 61, 62, 73, 1, 61, 231, 198, 18, 62, 68, 185, 130, 59, 38, 197, 91, 190, 227, 147, 241, 61, 0, 23, 74, 190, 34, 115, 134, 191, 80, 84, 166, 189, 26, 229, 208, 60, 55, 102, 27, 62, 246, 56, 99, 189, 86, 124, 10, 190, 193, 67, 150, 62, 23, 136, 235, 61, 89, 59, 16, 62, 37, 86, 5, 190, 42, 168, 69, 62, 211, 83, 247, 61, 214, 26, 68, 188, 231, 61, 45, 191, 139, 215, 228, 190, 199, 219, 102, 189, 116, 233, 159, 62, 74, 12, 98, 190, 2, 111, 83, 62, 31, 227, 229, 61, 146, 28, 202, 189, 144, 12, 17, 62, 180, 56, 119, 62, 246, 73, 15, 63, 246, 104, 18, 62, 177, 244, 185, 61, 45, 113, 20, 190, 100, 23, 2, 191, 13, 127, 4, 61, 172, 52, 160, 190, 129, 22, 215, 61, 221, 185, 5, 62, 217, 98, 221, 191, 243, 202, 28, 191, 242, 17, 141, 61, 179, 201, 35, 191, 102, 24, 131, 61, 246, 14, 60, 60, 53, 128, 161, 190, 4, 87, 23, 190, 229, 221, 14, 62, 104, 31, 95, 61, 95, 188, 32, 189, 222, 62, 69, 62, 177, 107, 24, 189, 52, 151, 126, 190, 155, 116, 23, 190, 107, 221, 139, 62, 5, 216, 80, 190, 145, 122, 137, 61, 59, 12, 14, 188, 7, 125, 61, 62, 213, 90, 133, 61, 74, 92, 175, 62, 54, 241, 2, 62, 151, 101, 169, 189, 214, 57, 127, 190, 22, 73, 75, 190, 47, 86, 139, 60, 118, 43, 184, 62, 164, 39, 55, 189, 176, 192, 56, 62, 166, 157, 93, 190, 47, 211, 81, 62, 235, 119, 129, 187, 53, 51, 146, 190, 131, 126, 12, 190, 151, 21, 154, 190, 34, 174, 43, 62, 224, 1, 62, 188, 30, 218, 214, 189, 70, 49, 177, 188, 110, 242, 166, 189, 41, 97, 28, 189, 209, 170, 1, 61, 140, 178, 27, 189, 254, 66, 8, 59, 214, 23, 105, 189, 193, 207, 168, 189, 229, 38, 12, 190, 72, 206, 219, 189, 127, 47, 133, 188, 185, 51, 71, 61, 132, 75, 17, 189, 201, 248, 191, 189, 120, 162, 17, 60, 164, 26, 34, 190, 189, 251, 13, 190, 251, 157, 234, 189, 12, 189, 102, 61, 62, 40, 8, 189, 19, 227, 154, 189, 157, 199, 127, 189, 197, 100, 42, 62, 182, 159, 159, 61, 177, 60, 55, 61, 167, 221, 11, 190, 42, 244, 254, 187, 125, 45, 63, 61, 131, 14, 166, 189, 34, 89, 32, 190, 31, 216, 149, 189, 115, 217, 37, 191, 210, 21, 186, 62, 169, 24, 145, 190, 223, 100, 88, 189, 0, 211, 5, 62, 220, 135, 153, 190, 139, 170, 214, 62, 215, 122, 161, 190, 246, 126, 92, 61, 49, 203, 95, 61, 130, 76, 20, 63, 179, 249, 52, 62, 94, 215, 255, 189, 77, 254, 164, 189, 213, 194, 237, 190, 214, 208, 161, 188, 72, 59, 133, 61, 98, 15, 5, 62, 252, 240, 53, 190, 121, 250, 68, 191, 48, 240, 233, 61, 9, 125, 92, 62, 105, 126, 253, 59, 174, 228, 178, 61, 124, 194, 221, 62, 50, 48, 137, 190, 17, 159, 4, 63, 191, 21, 213, 190, 219, 239, 163, 190, 73, 224, 41, 189, 82, 184, 22, 190, 67, 244, 139, 62, 95, 47, 134, 191, 1, 79, 80, 190, 89, 173, 198, 61, 240, 87, 97, 61, 82, 79, 122, 189, 9, 215, 27, 61, 6, 40, 201, 62, 114, 242, 198, 190, 82, 43, 52, 190, 230, 49, 240, 59, 229, 185, 136, 61, 143, 185, 136, 190, 86, 145, 22, 190, 119, 239, 61, 62, 74, 239, 177, 61, 119, 116, 162, 190, 166, 137, 134, 61, 36, 41, 8, 191, 154, 3, 98, 189, 219, 235, 28, 189, 113, 34, 68, 62, 90, 35, 242, 60, 199, 84, 242, 61, 175, 131, 175, 190, 80, 130, 9, 191, 126, 106, 228, 62, 71, 219, 33, 189, 101, 63, 176, 190, 0, 233, 25, 191, 243, 53, 141, 190, 30, 150, 20, 187, 78, 217, 89, 191, 71, 231, 115, 190, 209, 52, 17, 190, 105, 233, 113, 61, 74, 23, 121, 60, 189, 102, 156, 62, 69, 125, 131, 62, 159, 203, 160, 62, 1, 238, 203, 190, 113, 26, 100, 190, 136, 169, 19, 62, 167, 147, 202, 189, 179, 233, 78, 62, 112, 91, 31, 62, 220, 49, 157, 62, 249, 94, 81, 62, 194, 50, 187, 62, 36, 198, 55, 62, 29, 124, 14, 190, 219, 129, 12, 190, 213, 89, 139, 61, 255, 111, 56, 62, 19, 128, 9, 62, 3, 190, 54, 62, 142, 59, 117, 62, 80, 142, 139, 190, 43, 148, 18, 62, 240, 82, 167, 61, 211, 98, 179, 190, 237, 52, 88, 60, 89, 226, 83, 191, 90, 52, 13, 62, 113, 203, 10, 189, 139, 94, 114, 61, 218, 223, 40, 189, 66, 177, 0, 190, 41, 114, 61, 189, 212, 236, 51, 61, 29, 103, 11, 190, 182, 74, 35, 62, 199, 63, 36, 190, 156, 95, 70, 190, 195, 99, 129, 61, 193, 41, 43, 190, 21, 240, 134, 61, 221, 233, 44, 62, 53, 3, 63, 190, 203, 76, 48, 188, 57, 236, 146, 189, 186, 82, 55, 190, 52, 220, 64, 190, 127, 151, 190, 189, 13, 186, 33, 62, 100, 103, 96, 189, 209, 238, 101, 61, 73, 245, 27, 190, 25, 35, 253, 189, 10, 232, 179, 189, 57, 190, 14, 190, 82, 3, 6, 62, 157, 84, 128, 61, 104, 43, 127, 61, 68, 60, 23, 62, 240, 220, 208, 59, 35, 110, 229, 60, 182, 176, 159, 60, 247, 206, 7, 61, 20, 228, 103, 190, 88, 6, 179, 190, 163, 168, 199, 186, 56, 70, 151, 189, 125, 146, 38, 191, 169, 86, 171, 61, 68, 178, 202, 190, 215, 170, 161, 62, 78, 232, 124, 190, 79, 222, 71, 191, 23, 21, 192, 190, 56, 234, 227, 189, 20, 25, 68, 190, 201, 127, 214, 62, 95, 170, 197, 61, 20, 229, 3, 63, 27, 129, 4, 188, 75, 64, 137, 62, 83, 219, 221, 190, 57, 135, 211, 61, 77, 86, 0, 190, 52, 64, 120, 191, 73, 104, 217, 61, 106, 119, 133, 190, 43, 106, 181, 191, 50, 30, 211, 61, 52, 120, 205, 61, 163, 5, 37, 62, 159, 12, 52, 62, 231, 98, 8, 191, 183, 73, 167, 61, 54, 1, 157, 188, 108, 65, 222, 189, 239, 14, 57, 62, 32, 114, 77, 189, 255, 54, 157, 189, 95, 158, 46, 62, 85, 85, 151, 190, 71, 180, 135, 62, 109, 106, 108, 190, 238, 66, 7, 63, 21, 74, 178, 189, 207, 124, 255, 61, 44, 228, 19, 62, 9, 100, 16, 190, 242, 119, 142, 190, 182, 135, 190, 190, 155, 202, 189, 61, 71, 253, 163, 62, 159, 207, 218, 61, 187, 50, 216, 61, 6, 191, 71, 62, 61, 169, 55, 191, 221, 13, 200, 189, 234, 16, 111, 189, 190, 2, 167, 62, 43, 120, 127, 190, 6, 28, 201, 190, 92, 34, 166, 189, 192, 68, 199, 190, 155, 171, 5, 190, 190, 55, 66, 190, 72, 19, 156, 62, 24, 125, 146, 62, 71, 140, 10, 191, 31, 176, 95, 60, 80, 190, 146, 61, 56, 133, 150, 191, 130, 127, 1, 60, 134, 180, 20, 188, 176, 153, 31, 191, 24, 249, 131, 62, 213, 144, 151, 190, 126, 195, 151, 190, 38, 174, 196, 190, 60, 190, 15, 190, 98, 84, 213, 190, 28, 31, 190, 61, 72, 58, 86, 62, 111, 42, 51, 62, 110, 56, 28, 189, 1, 67, 50, 189, 82, 79, 13, 190, 93, 68, 189, 189, 83, 238, 9, 62, 207, 226, 14, 190, 226, 184, 254, 62, 171, 224, 42, 190, 1, 68, 177, 190, 86, 58, 122, 189, 238, 177, 172, 61, 90, 125, 1, 190, 180, 161, 21, 190, 24, 200, 12, 191, 194, 181, 126, 190, 92, 110, 59, 190, 186, 220, 128, 62, 248, 4, 144, 62, 170, 136, 59, 61, 171, 194, 235, 61, 0, 141, 16, 62, 163, 182, 166, 61, 156, 148, 97, 188, 118, 98, 69, 62, 78, 101, 121, 188, 146, 186, 36, 62, 244, 132, 52, 187, 130, 150, 45, 62, 202, 128, 156, 62, 80, 40, 202, 61, 68, 53, 47, 62, 41, 3, 0, 190, 124, 95, 107, 61, 206, 149, 55, 61, 2, 102, 235, 189, 14, 246, 43, 62, 177, 61, 60, 189, 196, 53, 129, 62, 167, 5, 197, 190, 225, 150, 129, 62, 240, 251, 66, 62, 29, 163, 240, 189, 158, 128, 176, 189, 228, 59, 104, 190, 41, 232, 212, 189, 132, 105, 151, 62, 152, 99, 249, 190, 169, 251, 219, 190, 182, 245, 87, 62, 161, 29, 141, 62, 9, 175, 238, 189, 11, 247, 201, 62, 226, 118, 141, 62, 131, 214, 229, 190, 55, 230, 43, 60, 2, 142, 73, 189, 235, 76, 72, 62, 119, 56, 139, 62, 79, 113, 52, 190, 49, 27, 36, 189, 49, 119, 150, 187, 5, 15, 109, 189, 201, 69, 234, 188, 71, 202, 125, 189, 252, 132, 116, 190, 81, 217, 141, 190, 239, 207, 176, 62, 63, 198, 179, 187, 122, 71, 39, 189, 12, 206, 161, 62, 169, 170, 222, 190, 248, 248, 140, 62, 255, 136, 1, 63, 52, 126, 154, 61, 47, 112, 173, 190, 78, 245, 207, 61, 209, 216, 12, 62, 31, 234, 214, 189, 126, 126, 227, 190, 191, 113, 68, 60, 47, 103, 182, 190, 89, 0, 153, 190, 36, 23, 53, 62, 32, 208, 255, 190, 240, 238, 156, 190, 225, 140, 131, 191, 153, 28, 151, 191, 172, 16, 224, 62, 141, 49, 14, 63, 85, 210, 59, 189, 101, 138, 55, 190, 208, 214, 31, 62, 89, 240, 210, 189, 6, 92, 236, 62, 64, 106, 55, 188, 163, 167, 193, 62, 232, 174, 135, 62, 191, 214, 201, 62, 147, 239, 25, 190, 204, 136, 130, 189, 28, 195, 19, 190, 252, 71, 203, 189, 118, 197, 15, 62, 179, 30, 18, 190, 198, 184, 55, 191, 133, 151, 144, 190, 215, 129, 209, 189, 217, 124, 164, 190, 127, 60, 222, 189, 222, 203, 36, 190, 94, 8, 29, 190, 201, 48, 56, 61, 70, 163, 69, 190, 198, 250, 171, 189, 244, 148, 20, 188, 153, 184, 81, 189, 231, 118, 58, 190, 113, 8, 40, 189, 161, 213, 100, 189, 78, 169, 85, 61, 34, 5, 5, 190, 163, 68, 158, 189, 226, 58, 186, 61, 125, 115, 79, 189, 17, 109, 188, 61, 158, 161, 20, 190, 218, 124, 111, 189, 134, 242, 33, 190, 138, 110, 64, 189, 140, 163, 74, 186, 82, 40, 82, 189, 164, 15, 250, 189, 25, 251, 231, 189, 210, 39, 254, 61, 7, 8, 203, 61, 231, 161, 198, 61, 102, 178, 48, 190, 170, 87, 107, 61, 69, 100, 209, 61, 5, 218, 214, 189, 50, 142, 151, 188, 193, 94, 46, 62, 68, 71, 128, 189, 163, 185, 35, 62, 126, 90, 254, 189, 82, 175, 134, 60, 119, 67, 30, 190, 208, 253, 20, 189, 60, 64, 112, 189, 248, 240, 220, 189, 2, 187, 17, 190, 100, 172, 201, 189, 243, 152, 109, 189, 94, 125, 49, 62, 32, 48, 1, 190, 166, 80, 233, 189, 139, 134, 10, 62, 159, 13, 143, 189, 76, 95, 51, 190, 147, 231, 87, 188, 249, 24, 30, 190, 20, 165, 15, 190, 47, 11, 37, 190, 24, 154, 76, 61, 48, 162, 27, 190, 247, 27, 97, 187, 31, 211, 206, 189, 25, 143, 192, 61, 166, 125, 15, 190, 218, 82, 221, 189, 38, 34, 201, 189, 236, 34, 6, 62, 231, 57, 127, 60, 84, 152, 66, 190, 118, 52, 109, 190, 1, 229, 110, 61, 252, 106, 36, 61, 177, 197, 151, 62, 71, 28, 84, 190, 145, 29, 142, 190, 208, 124, 161, 62, 208, 253, 159, 62, 5, 208, 28, 191, 91, 65, 6, 191, 204, 11, 23, 191, 125, 255, 32, 191, 134, 147, 88, 191, 38, 65, 27, 189, 24, 26, 163, 62, 19, 218, 15, 191, 24, 27, 15, 191, 97, 235, 35, 191, 52, 105, 73, 60, 108, 41, 180, 189, 226, 86, 105, 62, 74, 72, 135, 62, 71, 57, 43, 191, 245, 46, 237, 61, 218, 245, 128, 190, 221, 38, 242, 190, 75, 223, 31, 63, 247, 121, 118, 191, 26, 183, 42, 190, 190, 152, 31, 191, 227, 153, 172, 60, 53, 104, 245, 190, 72, 96, 84, 189, 63, 34, 146, 61, 133, 168, 89, 190, 50, 1, 143, 61, 58, 144, 167, 61, 58, 9, 93, 190, 32, 0, 162, 188, 219, 169, 141, 62, 54, 211, 219, 190, 26, 28, 129, 61, 38, 66, 62, 62, 75, 151, 2, 190, 213, 131, 25, 189, 173, 173, 30, 190, 247, 49, 124, 61, 88, 181, 149, 62, 90, 75, 90, 61, 86, 70, 227, 59, 226, 210, 198, 62, 144, 183, 10, 62, 92, 167, 48, 62, 162, 220, 153, 62, 72, 112, 177, 61, 75, 203, 166, 189, 142, 70, 145, 189, 125, 217, 90, 190, 34, 176, 161, 191, 21, 137, 22, 62, 186, 91, 185, 61, 84, 110, 35, 60, 184, 198, 255, 61, 118, 42, 33, 60, 50, 151, 69, 191, 92, 241, 192, 190, 104, 228, 12, 188, 182, 149, 181, 61, 158, 51, 176, 59, 10, 239, 175, 62, 169, 90, 196, 189, 248, 40, 76, 190, 113, 22, 9, 191, 232, 18, 76, 189, 118, 50, 35, 63, 232, 197, 41, 191, 91, 232, 11, 62, 69, 66, 170, 187, 236, 86, 89, 190, 128, 55, 133, 190, 176, 253, 170, 62, 83, 60, 9, 62, 226, 233, 168, 190, 120, 46, 128, 62, 41, 192, 246, 59, 8, 38, 58, 191, 42, 131, 149, 62, 22, 34, 131, 191, 94, 252, 65, 189, 84, 52, 217, 189, 208, 224, 159, 189, 65, 19, 61, 191, 236, 152, 240, 190, 220, 130, 110, 191, 190, 30, 230, 188, 177, 253, 246, 62, 254, 220, 89, 191, 197, 66, 20, 190, 61, 93, 111, 62, 152, 29, 250, 61, 203, 254, 79, 190, 153, 42, 184, 190, 128, 83, 139, 62, 252, 50, 226, 190, 100, 49, 242, 185, 234, 173, 186, 188, 215, 228, 250, 62, 202, 62, 148, 62, 196, 202, 123, 62, 129, 220, 42, 62, 182, 120, 25, 190, 248, 233, 1, 62, 112, 112, 175, 189, 173, 133, 187, 189, 48, 228, 163, 190, 175, 88, 204, 190, 128, 42, 161, 62, 158, 177, 221, 188, 203, 139, 173, 188, 25, 87, 135, 62, 16, 213, 156, 190, 99, 192, 12, 62, 199, 234, 35, 62, 58, 30, 207, 188, 2, 63, 189, 190, 140, 180, 9, 189, 117, 162, 0, 61, 122, 107, 77, 190, 72, 48, 146, 189, 174, 72, 169, 61, 134, 226, 24, 62, 51, 128, 139, 62, 163, 88, 118, 190, 59, 134, 159, 62, 63, 155, 19, 62, 55, 110, 51, 61, 76, 32, 98, 62, 231, 93, 31, 189, 87, 198, 28, 189, 243, 176, 86, 62, 82, 55, 92, 60, 43, 107, 141, 62, 197, 194, 43, 62, 202, 132, 75, 60, 82, 69, 243, 190, 165, 80, 220, 190, 119, 97, 66, 62, 41, 144, 148, 190, 174, 34, 17, 62, 75, 136, 170, 189, 250, 192, 148, 61, 223, 50, 55, 62, 173, 238, 55, 190, 82, 87, 169, 187, 147, 116, 131, 62, 252, 144, 49, 61, 153, 110, 144, 190, 38, 249, 29, 62, 30, 94, 31, 189, 193, 202, 246, 189, 38, 57, 15, 62, 38, 174, 235, 61, 66, 34, 103, 190, 71, 255, 70, 191, 152, 178, 55, 62, 152, 49, 173, 190, 129, 98, 213, 190, 171, 163, 75, 62, 76, 200, 100, 190, 1, 249, 153, 62, 125, 214, 26, 190, 11, 21, 74, 189, 196, 100, 87, 191, 226, 231, 88, 190, 133, 114, 232, 188, 237, 245, 128, 62, 64, 44, 107, 60, 25, 47, 67, 61, 234, 34, 206, 61, 18, 138, 96, 62, 237, 233, 190, 190, 217, 118, 129, 188, 133, 234, 86, 62, 9, 53, 61, 61, 233, 65, 119, 190, 56, 12, 5, 190, 141, 168, 113, 190, 50, 52, 13, 62, 103, 212, 105, 62, 248, 88, 63, 188, 195, 22, 167, 189, 156, 2, 216, 189, 250, 15, 128, 61, 225, 127, 199, 190, 246, 181, 137, 190, 22, 206, 115, 62, 225, 67, 215, 190, 202, 104, 50, 187, 19, 220, 242, 61, 149, 223, 20, 191, 27, 130, 23, 62, 116, 141, 219, 189, 59, 219, 248, 189, 94, 75, 6, 62, 187, 74, 145, 62, 191, 63, 19, 62, 79, 70, 237, 190, 213, 38, 178, 187, 188, 186, 174, 190, 118, 25, 59, 190, 30, 101, 24, 191, 175, 244, 154, 190, 153, 226, 84, 62, 48, 82, 152, 62, 11, 4, 164, 190, 222, 249, 129, 62, 84, 187, 205, 190, 11, 147, 243, 60, 248, 244, 21, 63, 232, 221, 214, 190, 95, 71, 237, 190, 79, 221, 124, 190, 170, 235, 176, 189, 65, 221, 93, 188, 30, 22, 225, 190, 211, 136, 128, 189, 155, 162, 207, 189, 75, 17, 178, 190, 172, 233, 62, 62, 152, 15, 18, 62, 179, 15, 186, 189, 153, 128, 115, 61, 16, 227, 240, 190, 57, 131, 3, 190, 101, 183, 187, 62, 133, 107, 222, 188, 21, 177, 41, 190, 70, 19, 86, 62, 224, 111, 141, 62, 90, 102, 166, 62, 30, 108, 4, 190, 250, 230, 0, 61, 138, 191, 133, 62, 242, 120, 75, 62, 25, 11, 85, 60, 44, 51, 6, 62, 81, 49, 85, 189, 100, 11, 131, 189, 106, 127, 223, 190, 114, 79, 13, 189, 39, 144, 136, 191, 150, 214, 108, 189, 96, 40, 235, 189, 3, 212, 3, 189, 109, 20, 12, 62, 255, 70, 1, 189, 62, 140, 68, 61, 82, 106, 50, 190, 232, 90, 60, 61, 173, 107, 192, 60, 47, 132, 219, 61, 170, 168, 206, 185, 172, 93, 58, 190, 43, 91, 61, 190, 146, 143, 173, 60, 240, 124, 80, 61, 113, 232, 186, 189, 182, 71, 96, 189, 116, 164, 109, 61, 178, 190, 78, 190, 94, 232, 254, 189, 182, 223, 192, 189, 1, 6, 9, 61, 195, 190, 135, 189, 230, 165, 246, 189, 174, 222, 158, 188, 138, 96, 42, 190, 222, 65, 57, 190, 15, 250, 155, 57, 101, 73, 3, 190, 62, 235, 74, 61, 233, 160, 8, 60, 140, 248, 111, 189, 194, 3, 197, 189, 114, 40, 135, 190, 126, 110, 58, 189, 140, 149, 175, 189, 92, 81, 197, 189, 72, 119, 194, 190, 200, 210, 164, 188, 39, 119, 246, 61, 155, 123, 22, 62, 55, 47, 128, 190, 140, 179, 131, 61, 52, 104, 216, 189, 65, 118, 38, 190, 146, 232, 21, 62, 80, 140, 31, 62, 178, 45, 123, 190, 146, 179, 28, 61, 193, 25, 245, 61, 18, 76, 131, 62, 150, 205, 158, 189, 43, 178, 254, 189, 114, 79, 217, 190, 213, 137, 21, 190, 194, 240, 172, 190, 131, 159, 67, 189, 225, 12, 249, 61, 69, 149, 0, 187, 104, 206, 186, 190, 224, 82, 179, 62, 206, 244, 163, 190, 249, 195, 102, 62, 95, 224, 179, 61, 166, 47, 58, 189, 233, 216, 114, 189, 128, 219, 152, 190, 160, 163, 23, 62, 240, 71, 58, 189, 92, 229, 47, 190, 99, 137, 126, 60, 22, 25, 74, 190, 195, 15, 133, 61, 83, 190, 225, 189, 233, 29, 30, 190, 196, 145, 3, 190, 243, 0, 210, 189, 222, 155, 0, 61, 82, 111, 51, 190, 92, 211, 174, 189, 202, 123, 74, 190, 203, 72, 46, 190, 36, 36, 50, 190, 80, 87, 145, 61, 187, 77, 205, 189, 34, 135, 118, 188, 7, 250, 135, 61, 200, 62, 70, 61, 198, 224, 38, 61, 66, 179, 61, 189, 188, 156, 240, 189, 90, 23, 77, 189, 196, 45, 182, 189, 165, 74, 13, 189, 218, 76, 30, 188, 72, 114, 36, 190, 195, 30, 253, 189, 204, 104, 49, 189, 175, 51, 141, 61, 206, 204, 171, 60, 134, 76, 31, 190, 140, 8, 126, 189, 238, 151, 153, 60, 125, 202, 190, 189, 218, 246, 247, 61, 19, 94, 120, 62, 66, 117, 159, 189, 111, 58, 0, 61, 63, 218, 185, 61, 14, 84, 146, 61, 217, 244, 177, 190, 209, 67, 112, 62, 142, 138, 138, 62, 218, 222, 72, 61, 190, 120, 185, 61, 133, 165, 7, 62, 103, 138, 122, 61, 92, 218, 112, 188, 149, 12, 254, 61, 109, 182, 60, 62, 186, 39, 164, 189, 234, 12, 64, 189, 16, 239, 178, 61, 115, 122, 129, 189, 101, 177, 44, 189, 212, 62, 210, 189, 89, 135, 80, 62, 208, 174, 134, 191, 36, 176, 230, 190, 174, 232, 22, 62, 105, 19, 238, 190, 233, 115, 2, 62, 118, 71, 148, 190, 89, 243, 167, 62, 67, 114, 76, 62, 69, 33, 81, 190, 182, 209, 38, 60, 62, 187, 187, 188, 181, 68, 221, 190, 40, 52, 237, 186, 173, 63, 11, 189, 77, 45, 203, 62, 253, 28, 172, 61, 2, 243, 53, 191, 219, 239, 141, 62, 10, 34, 51, 62, 203, 230, 83, 189, 59, 102, 91, 191, 176, 228, 237, 188, 55, 172, 134, 190, 54, 225, 148, 190, 238, 147, 13, 191, 173, 52, 31, 190, 27, 169, 252, 60, 17, 252, 217, 188, 226, 124, 150, 190, 125, 81, 12, 62, 248, 144, 133, 62, 196, 236, 228, 61, 116, 241, 77, 62, 241, 39, 147, 61, 196, 73, 74, 62, 209, 163, 45, 62, 231, 42, 103, 188, 247, 225, 4, 190, 116, 48, 128, 62, 154, 87, 170, 62, 79, 252, 180, 188, 4, 144, 123, 61, 102, 85, 184, 61, 70, 246, 128, 191, 6, 101, 111, 189, 22, 144, 32, 62, 181, 200, 188, 191, 223, 187, 25, 63, 4, 114, 111, 191, 236, 254, 154, 190, 132, 179, 95, 190, 64, 251, 115, 188, 216, 3, 138, 61, 46, 47, 89, 62, 75, 243, 10, 61, 183, 11, 25, 190, 111, 224, 120, 60, 124, 85, 178, 189, 239, 189, 30, 62, 247, 112, 251, 61, 158, 127, 45, 191, 137, 246, 241, 189, 244, 156, 252, 62, 100, 42, 153, 190, 83, 134, 163, 190, 111, 193, 227, 190, 225, 61, 138, 62, 86, 79, 137, 190, 214, 57, 176, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 17, 20, 61, 213, 42, 97, 62, 166, 156, 147, 61, 255, 105, 5, 190, 65, 86, 78, 62, 222, 25, 166, 59, 180, 116, 27, 189, 172, 231, 140, 188, 152, 209, 7, 63, 244, 64, 168, 189, 175, 186, 241, 61, 208, 7, 199, 61, 108, 69, 79, 61, 172, 53, 167, 62, 120, 83, 16, 189, 188, 162, 49, 189, 181, 195, 54, 190, 163, 4, 39, 190, 145, 205, 21, 190, 184, 131, 145, 62, 64, 156, 12, 62, 27, 12, 248, 61, 8, 126, 197, 61, 128, 188, 130, 62, 63, 121, 43, 190, 193, 24, 191, 62, 180, 248, 52, 61, 205, 20, 25, 62, 99, 78, 220, 60, 147, 76, 175, 60, 200, 199, 204, 190, 29, 78, 172, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {133, 132, 128, 62, 92, 249, 105, 190, 246, 57, 31, 63, 147, 167, 233, 62, 146, 176, 58, 190, 26, 1, 24, 189, 210, 221, 41, 191, 240, 207, 38, 191, 5, 250, 231, 190, 254, 255, 16, 189, 133, 228, 244, 189, 237, 118, 164, 62, 128, 147, 211, 62, 106, 92, 102, 190, 140, 222, 181, 190, 189, 235, 31, 63, 222, 58, 156, 189, 164, 50, 20, 61, 18, 89, 85, 63, 249, 193, 226, 62, 21, 91, 110, 191, 254, 216, 193, 190, 124, 61, 97, 190, 0, 216, 185, 62, 22, 20, 253, 62, 163, 85, 173, 62, 233, 84, 120, 189, 84, 86, 232, 189, 109, 104, 8, 62, 104, 8, 101, 62, 196, 242, 68, 63, 83, 234, 25, 63, 136, 129, 215, 189, 20, 65, 128, 190, 64, 94, 198, 62, 233, 80, 4, 62, 147, 181, 125, 190, 141, 59, 15, 62, 192, 1, 60, 189, 193, 80, 7, 63, 246, 178, 174, 190, 208, 187, 20, 190, 50, 49, 153, 63, 188, 54, 255, 62, 73, 38, 163, 62, 240, 128, 216, 189, 15, 49, 176, 62, 241, 145, 214, 190, 120, 171, 139, 189, 160, 240, 152, 189, 182, 102, 15, 62, 130, 154, 234, 189, 8, 220, 221, 62, 146, 219, 160, 190, 79, 13, 10, 190, 125, 42, 69, 190, 88, 66, 145, 63, 220, 63, 1, 191, 25, 124, 146, 61, 147, 46, 71, 190, 170, 14, 124, 189, 81, 219, 145, 60, 203, 13, 66, 62, 90, 231, 80, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 58, 130, 189, 32, 203, 21, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {248, 153, 199, 189, 30, 150, 205, 191, 110, 172, 41, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {87, 122, 91, 63, 36, 34, 207, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0001/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}