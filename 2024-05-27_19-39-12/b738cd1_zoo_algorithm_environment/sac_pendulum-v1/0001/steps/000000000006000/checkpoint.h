// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {138, 40, 168, 189, 39, 221, 34, 190, 70, 205, 254, 62, 133, 1, 52, 62, 242, 81, 112, 191, 252, 214, 189, 190, 37, 190, 175, 62, 52, 91, 78, 61, 196, 229, 39, 191, 26, 89, 44, 191, 4, 46, 77, 191, 124, 166, 27, 190, 112, 235, 223, 190, 205, 198, 156, 62, 81, 7, 38, 191, 186, 21, 184, 190, 217, 98, 137, 190, 158, 54, 186, 62, 17, 207, 156, 190, 8, 72, 142, 191, 121, 17, 71, 190, 117, 90, 107, 189, 53, 49, 26, 63, 16, 200, 11, 190, 174, 59, 214, 190, 251, 12, 28, 63, 129, 47, 14, 62, 53, 107, 134, 188, 47, 8, 145, 63, 21, 171, 176, 62, 34, 52, 21, 63, 19, 84, 217, 190, 212, 168, 146, 190, 97, 109, 4, 191, 5, 133, 93, 191, 147, 21, 189, 61, 177, 129, 5, 63, 214, 6, 12, 63, 21, 21, 17, 63, 17, 167, 247, 189, 124, 9, 227, 190, 114, 91, 13, 191, 98, 42, 158, 62, 244, 5, 56, 62, 121, 172, 25, 191, 237, 129, 90, 191, 234, 172, 137, 62, 1, 144, 143, 61, 94, 175, 106, 63, 162, 205, 41, 191, 55, 82, 154, 190, 249, 225, 138, 190, 2, 126, 50, 191, 155, 232, 248, 62, 35, 100, 250, 61, 41, 110, 92, 191, 236, 137, 8, 63, 57, 49, 1, 191, 67, 221, 25, 61, 161, 54, 35, 62, 122, 71, 131, 188, 109, 253, 50, 191, 246, 217, 43, 190, 185, 213, 112, 190, 26, 151, 61, 62, 239, 0, 111, 190, 242, 146, 92, 62, 50, 148, 36, 63, 227, 234, 41, 61, 183, 211, 162, 190, 230, 106, 40, 191, 23, 120, 225, 62, 109, 227, 38, 63, 236, 53, 3, 63, 146, 147, 183, 62, 151, 181, 131, 62, 73, 12, 200, 189, 37, 165, 225, 190, 9, 204, 218, 190, 120, 54, 203, 190, 83, 21, 67, 191, 197, 169, 66, 63, 244, 127, 109, 63, 165, 109, 63, 62, 186, 120, 28, 190, 229, 51, 245, 62, 91, 69, 184, 62, 32, 30, 167, 61, 199, 161, 37, 191, 30, 198, 152, 190, 111, 182, 29, 190, 207, 93, 9, 63, 36, 108, 36, 63, 204, 253, 179, 189, 149, 73, 210, 62, 42, 47, 126, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {55, 144, 74, 191, 194, 121, 228, 190, 152, 73, 25, 190, 207, 8, 162, 62, 79, 59, 163, 190, 154, 103, 7, 63, 119, 209, 46, 190, 70, 71, 230, 62, 30, 78, 105, 189, 38, 201, 45, 190, 18, 132, 59, 62, 156, 173, 76, 190, 119, 230, 156, 61, 209, 45, 33, 190, 153, 237, 19, 63, 115, 45, 176, 62, 178, 123, 240, 62, 229, 165, 156, 62, 137, 77, 154, 62, 190, 194, 229, 62, 232, 213, 158, 62, 201, 188, 143, 62, 14, 194, 57, 63, 165, 193, 219, 61, 67, 103, 52, 62, 131, 248, 191, 190, 65, 231, 179, 190, 255, 119, 193, 190, 255, 199, 242, 189, 44, 70, 81, 190, 246, 188, 133, 190, 77, 175, 9, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 35, 66, 189, 47, 210, 53, 188, 104, 95, 227, 189, 142, 227, 39, 190, 176, 197, 172, 61, 84, 253, 237, 61, 2, 94, 82, 190, 198, 32, 193, 62, 165, 180, 73, 59, 116, 39, 29, 190, 60, 38, 179, 61, 6, 148, 176, 190, 204, 159, 112, 62, 207, 204, 6, 190, 2, 83, 70, 61, 210, 108, 168, 62, 163, 151, 128, 62, 161, 194, 30, 190, 118, 98, 113, 190, 190, 228, 4, 62, 13, 78, 13, 189, 77, 95, 144, 62, 81, 192, 220, 62, 157, 25, 85, 190, 156, 177, 202, 61, 159, 205, 224, 189, 208, 236, 133, 188, 17, 56, 213, 190, 106, 117, 219, 61, 110, 217, 35, 190, 143, 128, 227, 61, 123, 17, 200, 186, 63, 109, 59, 62, 206, 49, 128, 190, 42, 126, 147, 190, 212, 94, 57, 62, 134, 24, 108, 62, 62, 223, 38, 190, 32, 108, 132, 62, 122, 171, 40, 62, 100, 194, 80, 190, 45, 43, 142, 62, 166, 250, 70, 189, 239, 50, 82, 61, 157, 212, 25, 60, 95, 49, 216, 61, 74, 136, 23, 62, 231, 206, 12, 190, 89, 70, 220, 61, 28, 15, 79, 61, 66, 249, 58, 188, 139, 139, 5, 62, 96, 181, 105, 189, 52, 228, 22, 62, 177, 174, 36, 189, 151, 70, 20, 190, 2, 203, 175, 61, 154, 176, 125, 190, 84, 153, 226, 61, 233, 130, 46, 62, 155, 147, 53, 62, 230, 136, 198, 190, 210, 85, 51, 190, 185, 19, 59, 61, 233, 78, 254, 188, 212, 190, 177, 62, 64, 159, 92, 188, 3, 13, 21, 61, 230, 84, 50, 187, 132, 250, 187, 61, 183, 73, 43, 190, 16, 84, 13, 62, 84, 50, 110, 62, 255, 7, 38, 190, 129, 203, 64, 61, 70, 174, 123, 190, 245, 142, 141, 190, 90, 126, 27, 190, 9, 211, 81, 60, 2, 104, 91, 189, 130, 18, 251, 61, 112, 28, 130, 62, 114, 56, 192, 61, 125, 102, 251, 61, 239, 68, 199, 188, 42, 236, 254, 60, 105, 20, 155, 61, 155, 174, 182, 61, 200, 144, 113, 190, 121, 27, 128, 62, 51, 2, 112, 190, 53, 33, 206, 190, 60, 213, 200, 60, 160, 31, 5, 62, 200, 26, 137, 62, 246, 56, 99, 189, 212, 217, 171, 190, 252, 141, 165, 62, 209, 177, 58, 62, 24, 50, 65, 62, 66, 171, 188, 189, 162, 69, 74, 188, 219, 114, 115, 62, 181, 35, 56, 61, 10, 79, 201, 190, 138, 203, 85, 189, 136, 84, 68, 61, 214, 53, 224, 188, 239, 210, 83, 190, 51, 66, 113, 62, 109, 6, 56, 62, 109, 240, 237, 189, 158, 59, 66, 62, 197, 7, 240, 61, 168, 224, 189, 62, 89, 128, 184, 189, 212, 147, 57, 61, 173, 125, 227, 189, 23, 26, 173, 190, 168, 10, 185, 189, 45, 196, 62, 190, 22, 160, 56, 62, 235, 152, 16, 62, 185, 18, 35, 191, 116, 129, 49, 191, 177, 112, 235, 61, 45, 46, 61, 191, 102, 24, 131, 61, 73, 174, 14, 190, 14, 255, 133, 190, 124, 78, 84, 190, 179, 84, 39, 62, 206, 173, 0, 61, 199, 1, 218, 188, 57, 57, 44, 62, 109, 33, 121, 189, 115, 97, 67, 61, 37, 242, 92, 61, 32, 119, 14, 62, 232, 116, 141, 61, 120, 229, 77, 188, 114, 175, 96, 187, 48, 195, 31, 62, 181, 233, 228, 61, 162, 104, 76, 62, 32, 221, 193, 61, 183, 70, 160, 189, 89, 11, 125, 61, 170, 159, 4, 190, 219, 111, 196, 60, 219, 138, 136, 62, 115, 234, 112, 189, 67, 44, 202, 61, 183, 97, 160, 190, 1, 175, 97, 62, 40, 203, 93, 190, 248, 226, 131, 189, 177, 224, 225, 189, 155, 37, 58, 190, 34, 174, 43, 62, 224, 1, 62, 188, 30, 218, 214, 189, 70, 49, 177, 188, 110, 242, 166, 189, 41, 97, 28, 189, 209, 170, 1, 61, 140, 178, 27, 189, 254, 66, 8, 59, 214, 23, 105, 189, 193, 207, 168, 189, 229, 38, 12, 190, 72, 206, 219, 189, 127, 47, 133, 188, 185, 51, 71, 61, 132, 75, 17, 189, 201, 248, 191, 189, 120, 162, 17, 60, 164, 26, 34, 190, 189, 251, 13, 190, 251, 157, 234, 189, 12, 189, 102, 61, 62, 40, 8, 189, 19, 227, 154, 189, 157, 199, 127, 189, 197, 100, 42, 62, 182, 159, 159, 61, 177, 60, 55, 61, 167, 221, 11, 190, 42, 244, 254, 187, 125, 45, 63, 61, 131, 14, 166, 189, 34, 89, 32, 190, 250, 128, 136, 190, 137, 175, 129, 190, 182, 38, 194, 62, 180, 127, 137, 190, 132, 151, 117, 189, 75, 201, 239, 61, 90, 184, 244, 189, 253, 97, 153, 62, 250, 141, 3, 189, 243, 131, 62, 62, 198, 102, 207, 61, 153, 119, 71, 62, 2, 184, 12, 62, 24, 36, 31, 188, 218, 241, 192, 188, 203, 170, 230, 190, 82, 31, 165, 61, 123, 173, 174, 188, 253, 218, 150, 61, 226, 227, 13, 190, 52, 68, 227, 190, 218, 180, 171, 61, 41, 124, 131, 62, 88, 241, 240, 189, 249, 34, 143, 61, 29, 107, 238, 62, 8, 254, 99, 190, 133, 119, 191, 62, 103, 80, 180, 190, 118, 176, 31, 189, 105, 108, 59, 189, 82, 184, 22, 190, 237, 194, 104, 62, 228, 14, 69, 191, 121, 115, 69, 190, 247, 8, 224, 61, 115, 201, 135, 61, 127, 134, 204, 188, 1, 252, 145, 62, 125, 223, 194, 62, 251, 2, 17, 190, 107, 218, 218, 62, 103, 179, 87, 61, 40, 57, 169, 62, 163, 18, 98, 61, 125, 225, 141, 188, 218, 76, 73, 62, 22, 53, 129, 189, 77, 221, 122, 190, 214, 5, 147, 61, 249, 177, 142, 190, 59, 204, 26, 61, 106, 122, 49, 62, 174, 209, 35, 62, 95, 17, 240, 188, 230, 106, 139, 60, 144, 153, 26, 189, 152, 223, 229, 190, 151, 34, 2, 63, 139, 39, 76, 62, 52, 243, 103, 190, 251, 228, 192, 190, 179, 139, 25, 190, 30, 150, 20, 187, 4, 44, 202, 190, 183, 105, 92, 190, 32, 152, 87, 190, 81, 166, 199, 60, 38, 57, 93, 188, 10, 114, 114, 62, 61, 9, 73, 62, 15, 17, 141, 62, 202, 221, 33, 190, 138, 101, 209, 188, 224, 239, 210, 59, 193, 133, 87, 62, 21, 4, 215, 61, 106, 136, 32, 62, 247, 102, 140, 62, 65, 22, 198, 61, 183, 193, 103, 62, 217, 201, 46, 61, 81, 154, 61, 190, 69, 131, 124, 61, 214, 78, 253, 61, 86, 185, 33, 62, 230, 31, 137, 185, 99, 254, 141, 61, 116, 94, 51, 62, 127, 135, 187, 190, 238, 9, 29, 62, 20, 116, 50, 190, 223, 189, 156, 189, 74, 231, 177, 60, 192, 46, 42, 191, 90, 52, 13, 62, 113, 203, 10, 189, 139, 94, 114, 61, 218, 223, 40, 189, 66, 177, 0, 190, 41, 114, 61, 189, 212, 236, 51, 61, 29, 103, 11, 190, 182, 74, 35, 62, 199, 63, 36, 190, 156, 95, 70, 190, 195, 99, 129, 61, 193, 41, 43, 190, 21, 240, 134, 61, 221, 233, 44, 62, 53, 3, 63, 190, 203, 76, 48, 188, 57, 236, 146, 189, 186, 82, 55, 190, 52, 220, 64, 190, 127, 151, 190, 189, 13, 186, 33, 62, 100, 103, 96, 189, 209, 238, 101, 61, 73, 245, 27, 190, 25, 35, 253, 189, 10, 232, 179, 189, 57, 190, 14, 190, 82, 3, 6, 62, 157, 84, 128, 61, 104, 43, 127, 61, 68, 60, 23, 62, 240, 220, 208, 59, 30, 119, 252, 61, 43, 42, 9, 62, 240, 159, 35, 62, 234, 20, 230, 189, 166, 33, 12, 190, 50, 227, 41, 190, 3, 7, 158, 60, 169, 99, 130, 190, 191, 91, 204, 189, 207, 130, 203, 189, 39, 149, 103, 62, 34, 188, 228, 190, 196, 133, 203, 190, 58, 113, 96, 190, 18, 91, 135, 189, 167, 202, 175, 190, 211, 243, 156, 62, 217, 121, 129, 189, 9, 101, 40, 62, 2, 169, 171, 189, 83, 131, 57, 62, 88, 100, 104, 190, 51, 76, 216, 61, 15, 21, 67, 190, 47, 99, 228, 190, 135, 114, 111, 62, 193, 93, 141, 189, 212, 23, 0, 191, 9, 240, 27, 189, 78, 55, 33, 62, 117, 100, 104, 60, 159, 12, 52, 62, 201, 213, 136, 190, 1, 255, 107, 189, 67, 140, 79, 189, 136, 214, 235, 189, 45, 65, 44, 62, 14, 37, 111, 61, 111, 250, 4, 190, 84, 174, 74, 62, 57, 129, 49, 190, 164, 245, 183, 62, 254, 80, 141, 190, 134, 147, 156, 62, 0, 221, 147, 61, 21, 173, 135, 61, 57, 93, 254, 61, 250, 7, 93, 61, 120, 13, 171, 190, 104, 239, 152, 190, 30, 180, 138, 190, 114, 147, 188, 62, 157, 130, 5, 61, 18, 252, 225, 61, 135, 186, 145, 62, 140, 30, 239, 190, 22, 141, 21, 61, 193, 3, 223, 189, 233, 123, 144, 62, 12, 74, 18, 190, 112, 110, 208, 189, 215, 187, 42, 190, 231, 84, 52, 190, 155, 171, 5, 190, 139, 153, 48, 61, 53, 142, 237, 62, 28, 102, 154, 62, 174, 164, 12, 190, 124, 133, 192, 189, 219, 251, 53, 61, 204, 230, 201, 190, 7, 207, 38, 188, 52, 70, 65, 62, 52, 11, 42, 190, 162, 253, 166, 62, 5, 19, 148, 190, 106, 169, 84, 190, 17, 33, 184, 190, 87, 239, 7, 190, 161, 175, 74, 190, 208, 66, 203, 61, 196, 118, 39, 62, 4, 61, 39, 62, 223, 199, 222, 60, 94, 245, 135, 61, 132, 230, 1, 190, 82, 131, 175, 189, 43, 32, 56, 62, 155, 77, 191, 189, 95, 254, 4, 63, 204, 55, 87, 190, 79, 187, 82, 188, 205, 117, 48, 62, 253, 208, 94, 62, 199, 165, 3, 62, 180, 161, 21, 190, 31, 129, 20, 62, 74, 203, 110, 190, 155, 91, 114, 190, 81, 11, 79, 62, 238, 226, 135, 62, 187, 111, 150, 189, 187, 222, 187, 60, 146, 170, 232, 60, 121, 83, 151, 189, 194, 120, 156, 58, 152, 57, 155, 61, 3, 225, 15, 62, 35, 79, 207, 61, 171, 141, 15, 60, 202, 76, 37, 62, 32, 112, 28, 61, 23, 51, 130, 188, 193, 202, 252, 60, 166, 187, 6, 190, 189, 152, 169, 60, 12, 28, 186, 61, 254, 128, 27, 190, 36, 115, 69, 61, 113, 249, 78, 190, 54, 37, 114, 62, 147, 51, 236, 190, 171, 184, 139, 62, 227, 148, 184, 60, 25, 97, 165, 188, 112, 114, 154, 189, 74, 111, 46, 190, 41, 232, 212, 189, 144, 76, 138, 62, 120, 107, 189, 190, 214, 43, 156, 190, 101, 96, 82, 62, 82, 60, 189, 62, 27, 232, 234, 189, 57, 205, 140, 62, 25, 217, 13, 62, 228, 224, 30, 190, 157, 85, 154, 61, 91, 20, 15, 190, 213, 234, 100, 61, 117, 124, 44, 62, 55, 117, 109, 189, 52, 58, 31, 61, 156, 221, 161, 60, 105, 133, 196, 189, 211, 131, 200, 189, 116, 180, 42, 190, 47, 25, 144, 189, 162, 153, 4, 190, 42, 206, 154, 62, 5, 188, 15, 189, 188, 167, 182, 189, 20, 51, 50, 62, 171, 132, 106, 190, 141, 128, 183, 62, 230, 86, 162, 62, 107, 16, 35, 62, 189, 126, 97, 190, 46, 8, 250, 61, 209, 216, 12, 62, 232, 136, 34, 190, 74, 162, 184, 190, 121, 223, 196, 61, 227, 180, 135, 190, 159, 61, 103, 190, 29, 216, 14, 62, 95, 6, 198, 190, 114, 170, 161, 190, 47, 59, 24, 190, 79, 249, 97, 190, 107, 60, 0, 63, 15, 199, 85, 62, 81, 244, 235, 61, 170, 159, 3, 190, 104, 53, 246, 61, 118, 64, 50, 190, 250, 227, 237, 62, 129, 209, 133, 60, 128, 17, 178, 62, 4, 246, 12, 61, 137, 83, 130, 62, 174, 64, 97, 190, 127, 39, 91, 188, 48, 83, 6, 190, 232, 168, 130, 188, 203, 0, 159, 62, 236, 5, 34, 190, 26, 114, 42, 190, 183, 95, 23, 190, 171, 52, 43, 189, 139, 161, 49, 190, 127, 60, 222, 189, 222, 203, 36, 190, 94, 8, 29, 190, 201, 48, 56, 61, 70, 163, 69, 190, 198, 250, 171, 189, 244, 148, 20, 188, 153, 184, 81, 189, 231, 118, 58, 190, 113, 8, 40, 189, 161, 213, 100, 189, 78, 169, 85, 61, 34, 5, 5, 190, 163, 68, 158, 189, 226, 58, 186, 61, 125, 115, 79, 189, 17, 109, 188, 61, 158, 161, 20, 190, 218, 124, 111, 189, 134, 242, 33, 190, 138, 110, 64, 189, 140, 163, 74, 186, 82, 40, 82, 189, 164, 15, 250, 189, 25, 251, 231, 189, 210, 39, 254, 61, 7, 8, 203, 61, 231, 161, 198, 61, 102, 178, 48, 190, 170, 87, 107, 61, 69, 100, 209, 61, 5, 218, 214, 189, 50, 142, 151, 188, 193, 94, 46, 62, 68, 71, 128, 189, 163, 185, 35, 62, 126, 90, 254, 189, 82, 175, 134, 60, 119, 67, 30, 190, 208, 253, 20, 189, 60, 64, 112, 189, 248, 240, 220, 189, 2, 187, 17, 190, 100, 172, 201, 189, 243, 152, 109, 189, 94, 125, 49, 62, 32, 48, 1, 190, 166, 80, 233, 189, 139, 134, 10, 62, 159, 13, 143, 189, 76, 95, 51, 190, 147, 231, 87, 188, 249, 24, 30, 190, 20, 165, 15, 190, 47, 11, 37, 190, 24, 154, 76, 61, 48, 162, 27, 190, 247, 27, 97, 187, 31, 211, 206, 189, 25, 143, 192, 61, 166, 125, 15, 190, 218, 82, 221, 189, 38, 34, 201, 189, 236, 34, 6, 62, 231, 57, 127, 60, 84, 152, 66, 190, 230, 229, 33, 190, 245, 20, 0, 62, 97, 175, 167, 61, 112, 124, 39, 62, 253, 204, 243, 61, 225, 50, 170, 190, 102, 167, 154, 62, 215, 13, 157, 62, 104, 20, 36, 191, 237, 211, 188, 190, 138, 82, 15, 191, 240, 251, 32, 191, 47, 2, 101, 191, 133, 59, 70, 189, 241, 128, 190, 62, 73, 219, 252, 190, 159, 252, 22, 190, 51, 147, 221, 190, 80, 199, 241, 61, 118, 5, 46, 190, 167, 254, 96, 62, 189, 137, 152, 62, 11, 16, 104, 190, 27, 149, 237, 189, 142, 81, 19, 189, 234, 214, 18, 191, 6, 195, 233, 62, 1, 57, 59, 191, 193, 30, 152, 189, 193, 126, 251, 190, 227, 153, 172, 60, 48, 62, 213, 190, 231, 38, 188, 60, 248, 82, 8, 62, 245, 67, 178, 189, 124, 192, 7, 62, 10, 71, 57, 61, 253, 96, 147, 189, 132, 178, 18, 189, 160, 148, 82, 62, 175, 178, 127, 190, 78, 121, 216, 61, 54, 235, 133, 189, 253, 36, 222, 188, 191, 6, 17, 59, 222, 176, 48, 190, 114, 233, 246, 187, 70, 14, 138, 62, 27, 8, 176, 61, 40, 10, 188, 188, 23, 119, 132, 62, 123, 248, 182, 61, 35, 205, 100, 62, 68, 9, 165, 62, 249, 131, 255, 61, 216, 167, 99, 189, 116, 77, 118, 186, 211, 4, 64, 190, 74, 147, 63, 191, 176, 159, 107, 62, 16, 117, 28, 62, 72, 205, 251, 61, 184, 198, 255, 61, 241, 36, 173, 187, 46, 195, 39, 191, 50, 124, 129, 190, 16, 174, 197, 61, 178, 80, 100, 62, 123, 221, 174, 61, 233, 68, 144, 62, 28, 105, 164, 58, 98, 97, 214, 190, 184, 170, 22, 191, 148, 237, 160, 189, 61, 27, 29, 63, 253, 89, 125, 190, 70, 247, 163, 62, 7, 215, 241, 61, 94, 239, 162, 188, 140, 140, 157, 190, 8, 12, 157, 62, 195, 208, 27, 62, 92, 235, 62, 190, 54, 187, 145, 62, 178, 129, 45, 62, 198, 158, 24, 191, 244, 235, 133, 62, 182, 205, 117, 189, 76, 236, 169, 61, 38, 10, 180, 61, 150, 78, 231, 62, 78, 21, 131, 191, 126, 180, 188, 190, 108, 105, 100, 191, 190, 30, 230, 188, 195, 161, 90, 62, 98, 170, 26, 191, 110, 181, 78, 190, 139, 95, 98, 62, 75, 125, 189, 61, 150, 151, 37, 190, 45, 169, 10, 61, 219, 104, 39, 62, 53, 218, 8, 61, 245, 112, 132, 62, 113, 30, 22, 189, 252, 90, 10, 62, 66, 24, 139, 62, 82, 102, 137, 62, 8, 181, 8, 62, 38, 207, 109, 188, 37, 206, 59, 62, 91, 108, 246, 189, 65, 41, 50, 190, 55, 163, 18, 190, 155, 57, 58, 190, 210, 90, 122, 62, 225, 30, 147, 60, 218, 32, 179, 189, 162, 96, 131, 62, 244, 163, 172, 190, 238, 189, 247, 61, 15, 84, 5, 62, 215, 43, 153, 61, 24, 220, 116, 190, 29, 216, 159, 58, 117, 162, 0, 61, 42, 73, 63, 189, 20, 16, 230, 188, 119, 19, 24, 61, 179, 205, 5, 62, 115, 254, 130, 62, 91, 55, 41, 190, 24, 85, 72, 62, 217, 235, 132, 61, 17, 35, 92, 190, 163, 41, 170, 61, 52, 91, 244, 188, 84, 38, 25, 62, 74, 247, 135, 62, 142, 174, 249, 59, 138, 194, 141, 62, 172, 249, 236, 189, 23, 65, 157, 61, 71, 14, 112, 190, 181, 246, 9, 190, 156, 134, 75, 189, 106, 60, 101, 190, 154, 235, 236, 61, 148, 80, 159, 189, 5, 235, 65, 189, 231, 110, 120, 62, 9, 158, 111, 190, 124, 189, 95, 188, 68, 152, 114, 62, 143, 218, 198, 189, 121, 171, 123, 190, 135, 95, 171, 61, 30, 94, 31, 189, 137, 195, 254, 189, 66, 153, 95, 62, 24, 52, 178, 61, 20, 32, 46, 189, 240, 8, 35, 191, 210, 0, 144, 62, 144, 100, 127, 190, 4, 171, 41, 190, 1, 90, 128, 61, 78, 250, 164, 190, 146, 150, 192, 62, 215, 123, 82, 61, 158, 95, 108, 189, 223, 80, 99, 191, 168, 58, 136, 190, 56, 195, 93, 61, 206, 194, 130, 62, 121, 171, 230, 61, 42, 119, 28, 62, 198, 156, 6, 62, 214, 49, 183, 61, 73, 87, 60, 190, 114, 135, 61, 189, 85, 16, 149, 62, 251, 67, 161, 188, 135, 146, 181, 189, 9, 130, 4, 191, 59, 159, 243, 189, 202, 194, 157, 61, 134, 28, 89, 62, 75, 119, 118, 189, 195, 22, 167, 189, 13, 91, 35, 62, 57, 38, 130, 61, 62, 136, 4, 191, 40, 54, 10, 189, 165, 81, 32, 189, 186, 30, 146, 190, 202, 104, 50, 187, 92, 41, 94, 59, 56, 206, 71, 190, 152, 62, 153, 62, 52, 186, 156, 189, 59, 219, 248, 189, 175, 167, 59, 62, 153, 77, 254, 189, 153, 244, 82, 61, 249, 118, 45, 190, 120, 29, 25, 189, 4, 104, 168, 190, 191, 143, 41, 190, 226, 64, 154, 190, 139, 186, 158, 190, 110, 29, 103, 60, 218, 62, 110, 62, 85, 240, 82, 190, 76, 92, 109, 62, 179, 155, 9, 191, 156, 12, 196, 189, 230, 75, 10, 63, 255, 70, 129, 190, 137, 196, 131, 61, 205, 38, 201, 188, 170, 235, 176, 189, 0, 180, 238, 189, 127, 78, 164, 190, 153, 196, 250, 186, 13, 193, 48, 188, 245, 99, 39, 189, 3, 42, 38, 62, 164, 208, 242, 60, 100, 160, 89, 190, 201, 107, 8, 189, 41, 31, 53, 190, 176, 206, 62, 190, 146, 170, 127, 189, 227, 83, 230, 61, 232, 193, 100, 190, 193, 210, 19, 61, 47, 165, 20, 62, 97, 19, 101, 62, 94, 185, 210, 189, 169, 49, 15, 60, 226, 117, 206, 61, 244, 20, 23, 189, 38, 159, 67, 61, 146, 170, 249, 61, 62, 244, 45, 189, 229, 242, 72, 187, 172, 229, 136, 190, 220, 99, 87, 61, 118, 91, 203, 190, 25, 237, 175, 188, 122, 82, 8, 190, 182, 109, 100, 61, 109, 20, 12, 62, 255, 70, 1, 189, 62, 140, 68, 61, 82, 106, 50, 190, 232, 90, 60, 61, 173, 107, 192, 60, 47, 132, 219, 61, 170, 168, 206, 185, 172, 93, 58, 190, 43, 91, 61, 190, 146, 143, 173, 60, 240, 124, 80, 61, 113, 232, 186, 189, 182, 71, 96, 189, 116, 164, 109, 61, 178, 190, 78, 190, 94, 232, 254, 189, 182, 223, 192, 189, 1, 6, 9, 61, 195, 190, 135, 189, 230, 165, 246, 189, 174, 222, 158, 188, 138, 96, 42, 190, 222, 65, 57, 190, 15, 250, 155, 57, 101, 73, 3, 190, 62, 235, 74, 61, 233, 160, 8, 60, 140, 248, 111, 189, 194, 3, 197, 189, 114, 40, 135, 190, 126, 110, 58, 189, 140, 149, 175, 189, 186, 82, 38, 189, 202, 150, 155, 190, 0, 93, 76, 189, 187, 129, 234, 61, 45, 204, 8, 62, 98, 134, 10, 190, 111, 107, 158, 188, 108, 61, 208, 189, 50, 155, 151, 189, 114, 92, 110, 62, 184, 254, 2, 62, 182, 118, 66, 189, 98, 137, 142, 61, 157, 2, 227, 61, 161, 80, 134, 62, 179, 56, 52, 190, 244, 31, 222, 189, 94, 33, 47, 190, 18, 6, 62, 61, 155, 6, 58, 190, 0, 236, 125, 59, 204, 24, 14, 62, 49, 8, 175, 58, 213, 189, 64, 190, 122, 217, 192, 62, 34, 4, 187, 190, 203, 62, 97, 62, 173, 219, 100, 61, 36, 70, 23, 62, 53, 186, 92, 188, 238, 41, 34, 190, 160, 163, 23, 62, 240, 71, 58, 189, 92, 229, 47, 190, 99, 137, 126, 60, 245, 227, 49, 190, 195, 15, 133, 61, 37, 189, 160, 189, 233, 29, 30, 190, 39, 127, 2, 190, 235, 119, 203, 189, 222, 155, 0, 61, 82, 111, 51, 190, 190, 172, 135, 189, 208, 118, 74, 190, 203, 72, 46, 190, 36, 36, 50, 190, 93, 95, 198, 61, 187, 77, 205, 189, 180, 192, 136, 60, 252, 252, 200, 61, 219, 35, 164, 61, 78, 0, 74, 61, 190, 100, 60, 189, 151, 154, 232, 189, 90, 36, 150, 188, 196, 45, 182, 189, 165, 74, 13, 189, 218, 76, 30, 188, 72, 114, 36, 190, 238, 120, 237, 189, 204, 104, 49, 189, 146, 139, 153, 61, 206, 204, 171, 60, 109, 84, 12, 190, 26, 254, 223, 188, 158, 198, 191, 61, 24, 14, 220, 188, 203, 140, 67, 62, 139, 211, 14, 61, 127, 122, 87, 188, 180, 150, 154, 61, 66, 123, 219, 60, 254, 220, 109, 62, 153, 154, 153, 190, 44, 169, 107, 189, 34, 100, 236, 61, 4, 175, 174, 61, 7, 11, 251, 61, 79, 185, 182, 61, 61, 124, 47, 187, 235, 70, 22, 190, 88, 135, 253, 189, 198, 251, 140, 61, 160, 123, 80, 190, 182, 17, 149, 58, 100, 1, 18, 62, 86, 119, 22, 190, 32, 109, 22, 190, 218, 142, 170, 188, 158, 86, 120, 62, 171, 33, 194, 190, 58, 1, 228, 190, 137, 40, 68, 62, 64, 38, 14, 191, 233, 115, 2, 62, 252, 227, 139, 61, 170, 176, 158, 62, 116, 90, 222, 61, 250, 70, 244, 189, 93, 196, 4, 190, 51, 47, 151, 189, 181, 201, 69, 189, 20, 136, 204, 189, 76, 32, 138, 61, 208, 154, 138, 62, 43, 68, 103, 62, 67, 197, 198, 190, 119, 151, 47, 62, 47, 50, 172, 61, 57, 12, 77, 189, 72, 154, 238, 190, 195, 59, 254, 61, 169, 243, 91, 190, 102, 22, 132, 190, 143, 217, 160, 190, 37, 41, 99, 189, 31, 64, 12, 189, 29, 36, 168, 189, 145, 59, 4, 190, 180, 203, 1, 62, 218, 214, 3, 62, 89, 127, 74, 59, 229, 65, 1, 62, 28, 156, 43, 61, 92, 133, 30, 62, 238, 206, 135, 61, 231, 42, 103, 188, 247, 225, 4, 190, 134, 59, 7, 62, 68, 234, 145, 62, 181, 252, 182, 59, 76, 53, 0, 190, 172, 201, 179, 61, 44, 44, 31, 191, 79, 94, 70, 189, 6, 126, 63, 62, 123, 131, 56, 191, 49, 233, 17, 63, 63, 17, 189, 190, 183, 76, 165, 190, 152, 203, 175, 190, 205, 111, 130, 189, 78, 103, 74, 62, 63, 186, 67, 62, 31, 35, 233, 60, 43, 124, 90, 190, 124, 43, 230, 60, 76, 212, 202, 189, 45, 165, 235, 61, 1, 15, 59, 62, 58, 139, 108, 190, 116, 149, 28, 190, 195, 250, 220, 62, 8, 252, 238, 190, 219, 122, 70, 190, 214, 254, 188, 190, 142, 63, 54, 62, 95, 241, 112, 190, 214, 57, 176, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {42, 210, 5, 62, 204, 200, 100, 62, 99, 67, 24, 60, 234, 30, 180, 189, 76, 250, 24, 62, 222, 25, 166, 59, 1, 123, 36, 61, 4, 96, 196, 189, 125, 98, 216, 62, 244, 64, 168, 189, 90, 25, 70, 59, 175, 163, 40, 62, 132, 64, 211, 61, 213, 80, 96, 62, 155, 46, 15, 190, 52, 26, 154, 189, 181, 195, 54, 190, 163, 4, 39, 190, 65, 253, 90, 189, 5, 221, 142, 62, 195, 212, 29, 62, 85, 41, 44, 62, 169, 164, 31, 62, 206, 107, 130, 62, 248, 24, 111, 190, 154, 34, 147, 62, 180, 248, 52, 61, 203, 236, 71, 62, 236, 236, 83, 61, 60, 104, 131, 188, 212, 217, 153, 190, 28, 5, 5, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {195, 185, 67, 62, 248, 27, 88, 190, 21, 186, 84, 62, 236, 57, 141, 62, 91, 112, 104, 189, 26, 1, 24, 189, 44, 31, 238, 190, 236, 232, 231, 190, 51, 253, 169, 190, 254, 255, 16, 189, 145, 57, 99, 61, 51, 255, 149, 62, 86, 122, 149, 62, 191, 26, 44, 190, 75, 77, 128, 190, 242, 218, 236, 62, 222, 58, 156, 189, 164, 50, 20, 61, 167, 188, 44, 63, 62, 206, 105, 62, 74, 96, 57, 191, 158, 139, 139, 190, 60, 129, 50, 190, 14, 28, 252, 62, 45, 229, 52, 63, 109, 119, 61, 61, 233, 84, 120, 189, 15, 44, 21, 190, 128, 201, 10, 62, 58, 220, 80, 62, 232, 69, 129, 62, 181, 133, 8, 63, 9, 21, 139, 190, 113, 34, 8, 190, 211, 0, 53, 60, 27, 33, 112, 61, 118, 212, 144, 190, 141, 59, 15, 62, 1, 32, 223, 61, 199, 45, 166, 62, 250, 218, 218, 190, 208, 187, 20, 190, 80, 21, 21, 63, 155, 120, 0, 63, 235, 132, 42, 62, 121, 108, 35, 190, 13, 242, 105, 62, 160, 40, 144, 190, 120, 171, 139, 189, 160, 240, 152, 189, 108, 181, 122, 62, 228, 28, 133, 190, 100, 158, 145, 62, 25, 182, 169, 189, 222, 78, 20, 190, 204, 245, 13, 190, 181, 182, 13, 63, 159, 104, 88, 190, 25, 124, 146, 61, 9, 247, 44, 190, 128, 195, 129, 189, 169, 143, 51, 188, 5, 159, 197, 62, 3, 138, 34, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {252, 171, 2, 189, 95, 73, 100, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {78, 224, 80, 63, 157, 149, 130, 62, 73, 120, 180, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {136, 118, 35, 191, 36, 63, 192, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0001/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}