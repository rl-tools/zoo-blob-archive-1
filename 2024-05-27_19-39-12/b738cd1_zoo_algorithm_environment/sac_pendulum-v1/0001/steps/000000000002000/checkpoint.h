// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {112, 133, 175, 189, 148, 45, 171, 189, 197, 243, 248, 62, 211, 33, 184, 189, 67, 38, 2, 191, 94, 155, 180, 190, 178, 99, 2, 63, 123, 235, 76, 62, 91, 235, 22, 191, 210, 110, 14, 191, 132, 245, 73, 191, 74, 160, 170, 190, 70, 51, 49, 191, 165, 85, 87, 63, 184, 207, 191, 190, 126, 16, 150, 190, 91, 48, 1, 191, 44, 73, 172, 62, 56, 208, 188, 190, 156, 252, 168, 190, 119, 165, 53, 190, 18, 133, 26, 190, 195, 138, 93, 63, 12, 140, 35, 188, 93, 15, 215, 190, 80, 250, 154, 190, 228, 203, 178, 61, 66, 246, 213, 61, 104, 155, 28, 63, 9, 54, 213, 62, 5, 159, 3, 63, 43, 247, 133, 60, 204, 241, 41, 190, 100, 180, 166, 190, 230, 69, 70, 190, 142, 125, 128, 62, 94, 106, 251, 62, 3, 244, 193, 62, 198, 139, 21, 63, 190, 203, 217, 188, 86, 200, 131, 62, 107, 144, 24, 190, 119, 35, 48, 62, 128, 73, 13, 63, 125, 245, 211, 190, 64, 20, 27, 191, 205, 127, 187, 190, 188, 190, 254, 61, 120, 225, 47, 63, 157, 17, 179, 190, 212, 162, 192, 190, 214, 174, 159, 190, 208, 16, 103, 191, 40, 139, 163, 62, 139, 57, 168, 61, 234, 23, 113, 191, 40, 122, 197, 62, 181, 75, 189, 190, 120, 150, 131, 190, 73, 66, 127, 60, 178, 247, 97, 190, 36, 19, 85, 191, 91, 117, 16, 190, 220, 92, 132, 190, 37, 101, 194, 62, 237, 130, 255, 189, 214, 5, 179, 62, 231, 76, 136, 62, 30, 151, 13, 62, 127, 179, 236, 190, 249, 213, 112, 191, 202, 61, 109, 62, 28, 241, 222, 62, 53, 141, 163, 62, 50, 226, 227, 62, 217, 105, 213, 62, 221, 82, 95, 62, 48, 225, 186, 190, 5, 193, 31, 191, 251, 24, 228, 62, 225, 148, 0, 191, 37, 64, 53, 63, 44, 18, 75, 63, 8, 177, 73, 62, 184, 185, 30, 61, 110, 77, 38, 191, 200, 18, 154, 62, 172, 34, 165, 60, 107, 217, 131, 190, 110, 227, 141, 190, 123, 237, 255, 189, 159, 105, 65, 191, 83, 231, 186, 62, 51, 101, 182, 189, 9, 60, 212, 62, 76, 173, 170, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {221, 154, 57, 191, 167, 234, 231, 190, 170, 158, 118, 190, 46, 32, 153, 62, 183, 155, 24, 190, 6, 88, 3, 63, 110, 75, 23, 61, 176, 100, 223, 62, 119, 151, 149, 60, 50, 237, 128, 190, 153, 57, 71, 62, 54, 30, 174, 190, 196, 176, 239, 60, 86, 34, 2, 189, 106, 76, 48, 63, 96, 0, 152, 62, 205, 221, 16, 63, 250, 98, 218, 62, 204, 103, 178, 62, 206, 89, 234, 62, 52, 230, 89, 62, 196, 194, 157, 62, 61, 10, 30, 63, 70, 125, 76, 62, 21, 29, 83, 62, 215, 73, 160, 190, 100, 244, 29, 190, 84, 18, 56, 190, 225, 83, 172, 189, 215, 23, 135, 190, 68, 190, 70, 190, 124, 170, 8, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 4, 159, 188, 22, 158, 244, 61, 98, 201, 235, 189, 154, 66, 119, 189, 109, 90, 156, 188, 2, 89, 177, 61, 225, 170, 188, 61, 161, 153, 72, 62, 174, 18, 227, 189, 221, 144, 50, 190, 62, 0, 39, 61, 132, 189, 46, 190, 34, 170, 1, 62, 170, 68, 25, 190, 60, 128, 244, 187, 65, 246, 54, 62, 142, 92, 89, 62, 46, 22, 142, 189, 157, 158, 232, 189, 11, 153, 194, 60, 102, 103, 66, 62, 127, 22, 43, 62, 127, 232, 105, 62, 224, 189, 212, 189, 126, 134, 154, 188, 123, 247, 150, 189, 179, 78, 173, 189, 104, 211, 133, 190, 191, 21, 223, 61, 154, 55, 242, 189, 193, 117, 168, 61, 123, 17, 200, 186, 185, 131, 68, 62, 60, 15, 23, 190, 7, 164, 144, 190, 36, 164, 54, 61, 97, 129, 106, 62, 139, 207, 10, 190, 61, 78, 149, 61, 220, 214, 125, 62, 18, 10, 247, 189, 207, 116, 134, 62, 244, 69, 24, 190, 110, 95, 201, 189, 28, 64, 25, 59, 144, 250, 186, 60, 120, 251, 182, 61, 29, 116, 8, 190, 105, 28, 211, 60, 116, 52, 75, 61, 200, 31, 30, 61, 255, 96, 9, 62, 107, 187, 11, 190, 98, 238, 29, 62, 190, 86, 30, 60, 51, 87, 14, 190, 173, 62, 102, 61, 187, 255, 108, 190, 171, 213, 53, 61, 60, 234, 132, 189, 235, 84, 108, 62, 18, 0, 153, 190, 114, 214, 179, 189, 232, 5, 59, 61, 195, 162, 71, 60, 159, 150, 132, 62, 139, 192, 244, 188, 135, 51, 69, 62, 79, 154, 138, 188, 213, 146, 93, 61, 217, 91, 97, 60, 221, 61, 174, 61, 241, 215, 42, 62, 25, 102, 181, 189, 67, 207, 37, 61, 219, 186, 4, 190, 135, 25, 131, 190, 228, 145, 182, 189, 224, 110, 163, 61, 158, 241, 66, 189, 247, 203, 31, 62, 24, 169, 128, 62, 105, 61, 156, 61, 154, 187, 249, 61, 202, 45, 0, 62, 122, 93, 33, 61, 119, 18, 145, 59, 187, 130, 196, 61, 137, 12, 69, 190, 241, 203, 86, 62, 108, 218, 68, 190, 98, 7, 57, 62, 83, 3, 69, 59, 33, 58, 97, 61, 30, 188, 90, 62, 141, 23, 99, 189, 248, 185, 126, 189, 142, 84, 118, 62, 177, 184, 18, 62, 204, 223, 10, 62, 182, 172, 24, 190, 120, 129, 242, 189, 245, 117, 39, 62, 107, 11, 138, 61, 64, 2, 244, 189, 20, 151, 32, 60, 58, 11, 147, 188, 81, 188, 62, 190, 168, 113, 14, 189, 177, 81, 39, 62, 147, 189, 26, 62, 37, 133, 197, 188, 220, 224, 1, 62, 254, 65, 105, 60, 10, 154, 0, 62, 98, 139, 224, 189, 165, 198, 26, 189, 223, 119, 5, 190, 10, 17, 148, 190, 173, 51, 34, 190, 198, 87, 199, 189, 55, 249, 12, 62, 0, 186, 168, 61, 12, 169, 250, 60, 133, 220, 37, 190, 223, 234, 41, 61, 35, 2, 181, 189, 76, 37, 131, 61, 44, 80, 33, 61, 174, 102, 198, 189, 172, 16, 37, 190, 225, 215, 61, 61, 109, 69, 192, 60, 1, 134, 57, 189, 66, 34, 183, 187, 181, 210, 12, 189, 79, 40, 181, 61, 120, 152, 27, 62, 64, 249, 245, 61, 97, 219, 101, 61, 195, 57, 30, 61, 242, 236, 92, 189, 54, 113, 22, 62, 175, 71, 19, 61, 177, 163, 20, 62, 12, 157, 217, 61, 37, 254, 45, 60, 101, 208, 205, 59, 26, 0, 41, 190, 220, 193, 143, 60, 217, 209, 126, 62, 98, 122, 24, 189, 147, 37, 201, 61, 190, 203, 126, 190, 135, 172, 41, 62, 229, 97, 159, 190, 132, 196, 68, 61, 169, 196, 38, 61, 131, 10, 61, 189, 132, 180, 43, 62, 224, 1, 62, 188, 30, 218, 214, 189, 70, 49, 177, 188, 110, 242, 166, 189, 41, 97, 28, 189, 209, 170, 1, 61, 140, 178, 27, 189, 254, 66, 8, 59, 214, 23, 105, 189, 193, 207, 168, 189, 229, 38, 12, 190, 72, 206, 219, 189, 127, 47, 133, 188, 185, 51, 71, 61, 132, 75, 17, 189, 201, 248, 191, 189, 120, 162, 17, 60, 164, 26, 34, 190, 189, 251, 13, 190, 251, 157, 234, 189, 12, 189, 102, 61, 62, 40, 8, 189, 19, 227, 154, 189, 157, 199, 127, 189, 197, 100, 42, 62, 182, 159, 159, 61, 177, 60, 55, 61, 167, 221, 11, 190, 42, 244, 254, 187, 125, 45, 63, 61, 131, 14, 166, 189, 34, 89, 32, 190, 86, 75, 6, 190, 139, 243, 49, 190, 200, 100, 44, 62, 219, 239, 181, 189, 84, 106, 216, 188, 4, 87, 189, 61, 89, 78, 51, 61, 120, 106, 102, 62, 60, 182, 70, 61, 200, 255, 98, 62, 181, 70, 239, 189, 143, 17, 100, 61, 57, 106, 203, 61, 30, 193, 43, 189, 101, 162, 222, 189, 86, 24, 110, 190, 97, 190, 115, 189, 65, 204, 170, 189, 150, 252, 195, 60, 70, 255, 216, 61, 200, 212, 77, 61, 192, 240, 69, 61, 140, 153, 57, 62, 214, 148, 109, 190, 177, 131, 176, 59, 84, 186, 32, 62, 43, 162, 80, 190, 84, 242, 91, 62, 108, 104, 200, 190, 74, 221, 106, 189, 42, 171, 224, 189, 227, 202, 22, 190, 23, 152, 45, 62, 52, 27, 21, 191, 58, 44, 32, 190, 174, 234, 133, 188, 179, 85, 173, 60, 105, 127, 74, 61, 221, 89, 172, 61, 64, 118, 193, 62, 199, 227, 64, 59, 84, 11, 146, 62, 164, 39, 179, 60, 58, 219, 5, 62, 91, 108, 20, 62, 82, 60, 224, 189, 133, 225, 180, 61, 37, 57, 148, 189, 22, 26, 84, 190, 229, 175, 81, 61, 154, 185, 86, 190, 219, 47, 129, 60, 154, 243, 34, 61, 223, 59, 151, 61, 23, 85, 86, 61, 168, 220, 148, 189, 93, 100, 96, 187, 243, 183, 206, 190, 206, 236, 217, 62, 194, 12, 4, 61, 171, 144, 104, 190, 24, 187, 94, 190, 18, 216, 111, 189, 71, 228, 25, 187, 55, 228, 83, 190, 60, 177, 140, 189, 230, 253, 42, 190, 217, 172, 13, 190, 115, 14, 208, 188, 167, 185, 28, 62, 242, 220, 161, 188, 157, 248, 175, 62, 159, 224, 241, 188, 32, 236, 227, 61, 27, 156, 166, 188, 39, 218, 34, 190, 136, 182, 212, 61, 157, 19, 176, 61, 219, 75, 107, 62, 130, 80, 189, 58, 15, 35, 50, 62, 73, 17, 37, 190, 2, 225, 110, 190, 234, 201, 146, 187, 142, 35, 173, 189, 103, 153, 22, 62, 7, 199, 188, 61, 164, 96, 44, 190, 41, 18, 4, 62, 255, 32, 157, 190, 128, 187, 171, 61, 175, 97, 163, 190, 169, 83, 36, 61, 105, 181, 31, 62, 174, 31, 162, 190, 17, 56, 13, 62, 82, 51, 208, 60, 139, 94, 114, 61, 110, 115, 29, 189, 49, 104, 249, 189, 253, 47, 72, 189, 122, 145, 91, 61, 29, 103, 11, 190, 159, 246, 29, 62, 203, 82, 22, 190, 28, 181, 60, 190, 34, 28, 152, 61, 130, 195, 31, 190, 81, 187, 161, 61, 181, 51, 45, 62, 253, 156, 6, 190, 217, 212, 255, 187, 96, 223, 79, 189, 71, 10, 27, 190, 71, 64, 27, 190, 220, 153, 189, 189, 13, 186, 33, 62, 76, 13, 74, 189, 93, 218, 119, 61, 107, 196, 196, 189, 201, 102, 229, 189, 33, 171, 179, 189, 57, 190, 14, 190, 13, 223, 12, 62, 10, 216, 154, 61, 104, 43, 127, 61, 68, 96, 34, 62, 240, 220, 208, 59, 30, 119, 252, 61, 18, 173, 105, 61, 202, 62, 220, 61, 92, 243, 208, 188, 76, 70, 32, 189, 223, 177, 204, 189, 238, 127, 239, 61, 164, 172, 149, 189, 69, 103, 190, 189, 207, 130, 203, 189, 90, 194, 161, 187, 206, 66, 197, 189, 242, 147, 23, 190, 242, 177, 81, 190, 2, 72, 194, 189, 93, 211, 17, 190, 180, 246, 215, 61, 136, 76, 56, 190, 17, 116, 3, 190, 159, 139, 55, 61, 117, 95, 102, 61, 34, 107, 30, 190, 77, 166, 146, 61, 234, 210, 55, 190, 228, 75, 47, 190, 121, 4, 60, 62, 186, 182, 144, 188, 119, 108, 6, 62, 2, 23, 171, 188, 199, 218, 185, 61, 215, 112, 93, 60, 159, 12, 52, 62, 43, 213, 99, 189, 190, 109, 174, 189, 152, 152, 110, 60, 140, 107, 77, 190, 219, 146, 87, 61, 114, 57, 131, 189, 12, 28, 61, 190, 114, 234, 2, 61, 128, 48, 52, 190, 2, 210, 2, 62, 3, 54, 208, 188, 127, 115, 105, 188, 95, 140, 40, 189, 155, 194, 102, 188, 213, 87, 144, 61, 25, 97, 228, 189, 223, 15, 31, 190, 160, 172, 18, 190, 122, 94, 191, 189, 216, 113, 1, 62, 124, 243, 135, 61, 227, 210, 36, 189, 109, 57, 70, 62, 90, 227, 133, 190, 61, 112, 142, 189, 121, 197, 195, 188, 75, 187, 86, 62, 41, 227, 250, 189, 191, 193, 10, 62, 176, 163, 65, 190, 118, 58, 126, 60, 67, 178, 5, 190, 207, 200, 24, 61, 78, 175, 139, 62, 0, 147, 0, 62, 185, 6, 62, 62, 154, 103, 241, 189, 119, 24, 228, 60, 51, 117, 122, 188, 217, 39, 147, 189, 214, 208, 16, 62, 232, 127, 134, 189, 95, 83, 145, 60, 227, 209, 218, 189, 161, 40, 99, 190, 109, 57, 12, 190, 222, 125, 9, 190, 14, 174, 238, 189, 179, 87, 71, 189, 32, 9, 38, 62, 171, 82, 3, 62, 131, 2, 254, 61, 103, 71, 86, 62, 198, 192, 141, 189, 112, 8, 37, 190, 108, 235, 58, 62, 74, 253, 164, 189, 99, 2, 115, 62, 32, 111, 203, 189, 149, 51, 10, 62, 42, 23, 49, 62, 146, 250, 56, 188, 209, 252, 187, 61, 180, 161, 21, 190, 152, 244, 57, 62, 112, 187, 2, 190, 131, 201, 116, 190, 40, 17, 106, 61, 204, 36, 129, 62, 113, 133, 41, 189, 132, 49, 43, 190, 21, 57, 199, 61, 10, 162, 134, 58, 171, 48, 150, 187, 206, 139, 170, 189, 23, 85, 27, 61, 103, 90, 211, 61, 128, 139, 179, 189, 63, 10, 168, 61, 225, 103, 18, 61, 91, 72, 13, 190, 163, 7, 68, 61, 71, 107, 133, 189, 232, 135, 130, 60, 189, 133, 139, 187, 144, 104, 32, 190, 86, 99, 143, 61, 112, 168, 51, 190, 253, 241, 87, 62, 74, 91, 235, 190, 190, 179, 69, 62, 168, 4, 99, 190, 247, 212, 66, 61, 43, 128, 76, 60, 103, 146, 133, 189, 103, 239, 212, 189, 232, 76, 93, 62, 193, 61, 132, 190, 161, 103, 174, 190, 193, 226, 244, 61, 229, 24, 142, 62, 3, 98, 132, 189, 187, 154, 8, 62, 52, 102, 75, 62, 182, 102, 118, 189, 97, 13, 195, 60, 110, 199, 142, 190, 33, 114, 146, 189, 3, 37, 12, 62, 41, 119, 105, 190, 86, 229, 187, 189, 186, 251, 236, 61, 88, 243, 32, 190, 111, 41, 198, 189, 161, 29, 17, 190, 93, 213, 101, 188, 2, 138, 26, 190, 195, 227, 133, 62, 28, 229, 222, 60, 37, 6, 195, 189, 36, 14, 32, 62, 22, 13, 142, 190, 102, 131, 91, 62, 72, 103, 227, 61, 194, 210, 50, 62, 250, 108, 35, 190, 196, 139, 53, 62, 209, 216, 12, 62, 8, 40, 80, 190, 178, 170, 65, 190, 166, 144, 65, 189, 138, 66, 88, 190, 96, 55, 235, 189, 181, 215, 179, 61, 146, 243, 34, 190, 231, 156, 107, 190, 202, 220, 216, 60, 19, 184, 245, 61, 41, 230, 171, 62, 144, 209, 168, 61, 103, 181, 61, 62, 142, 59, 30, 189, 56, 110, 133, 61, 33, 191, 63, 190, 148, 44, 126, 62, 164, 193, 148, 189, 53, 137, 119, 62, 89, 45, 38, 61, 126, 240, 22, 189, 75, 37, 58, 189, 153, 0, 213, 60, 70, 27, 110, 190, 93, 118, 166, 61, 140, 199, 100, 62, 99, 171, 198, 189, 174, 69, 172, 61, 182, 14, 247, 189, 208, 15, 168, 186, 148, 215, 5, 190, 127, 60, 222, 189, 222, 203, 36, 190, 24, 128, 8, 190, 236, 197, 154, 61, 204, 198, 40, 190, 137, 153, 90, 189, 244, 148, 20, 188, 92, 70, 21, 189, 189, 130, 36, 190, 113, 8, 40, 189, 161, 213, 100, 189, 77, 214, 138, 61, 34, 5, 5, 190, 163, 68, 158, 189, 249, 205, 247, 61, 239, 46, 164, 188, 17, 109, 188, 61, 121, 121, 237, 189, 218, 124, 111, 189, 134, 242, 33, 190, 25, 132, 42, 189, 191, 1, 15, 60, 151, 76, 210, 188, 164, 15, 250, 189, 25, 251, 231, 189, 210, 39, 254, 61, 119, 29, 2, 62, 40, 168, 2, 62, 102, 178, 48, 190, 170, 87, 107, 61, 128, 20, 245, 61, 5, 218, 214, 189, 50, 142, 151, 188, 193, 94, 46, 62, 68, 71, 128, 189, 163, 185, 35, 62, 126, 90, 254, 189, 82, 175, 134, 60, 119, 67, 30, 190, 208, 253, 20, 189, 60, 64, 112, 189, 248, 240, 220, 189, 2, 187, 17, 190, 100, 172, 201, 189, 243, 152, 109, 189, 94, 125, 49, 62, 32, 48, 1, 190, 166, 80, 233, 189, 139, 134, 10, 62, 159, 13, 143, 189, 76, 95, 51, 190, 147, 231, 87, 188, 249, 24, 30, 190, 20, 165, 15, 190, 47, 11, 37, 190, 24, 154, 76, 61, 48, 162, 27, 190, 247, 27, 97, 187, 31, 211, 206, 189, 25, 143, 192, 61, 166, 125, 15, 190, 218, 82, 221, 189, 38, 34, 201, 189, 236, 34, 6, 62, 231, 57, 127, 60, 16, 186, 217, 60, 51, 162, 52, 189, 74, 162, 131, 189, 112, 42, 88, 62, 253, 230, 188, 189, 204, 30, 135, 62, 171, 38, 222, 61, 88, 70, 128, 190, 30, 107, 43, 62, 78, 101, 115, 190, 80, 85, 4, 190, 103, 98, 47, 60, 218, 241, 162, 190, 30, 111, 129, 59, 163, 222, 113, 190, 54, 98, 134, 62, 112, 80, 73, 190, 151, 108, 56, 62, 9, 151, 181, 61, 239, 137, 133, 61, 226, 46, 162, 62, 161, 97, 24, 190, 176, 196, 161, 189, 118, 255, 236, 61, 171, 69, 85, 58, 1, 82, 84, 60, 148, 145, 136, 190, 87, 248, 187, 189, 234, 33, 140, 189, 122, 129, 11, 61, 137, 211, 153, 188, 227, 153, 172, 60, 28, 165, 169, 190, 2, 172, 237, 185, 233, 38, 2, 62, 232, 66, 159, 60, 192, 223, 183, 61, 60, 235, 25, 189, 87, 163, 99, 61, 119, 250, 54, 190, 136, 21, 23, 62, 192, 151, 28, 190, 50, 36, 151, 61, 173, 36, 13, 188, 161, 212, 93, 189, 61, 22, 92, 61, 207, 91, 15, 190, 125, 150, 92, 189, 240, 19, 131, 62, 197, 88, 129, 61, 71, 215, 92, 189, 23, 73, 83, 62, 66, 104, 88, 62, 92, 163, 65, 62, 6, 238, 9, 62, 157, 134, 242, 61, 238, 135, 207, 189, 101, 55, 243, 188, 245, 197, 40, 190, 124, 8, 154, 190, 192, 49, 115, 62, 26, 94, 5, 62, 175, 251, 214, 61, 242, 227, 255, 61, 245, 48, 186, 189, 140, 97, 210, 190, 2, 223, 107, 190, 120, 48, 212, 59, 75, 179, 82, 62, 210, 101, 174, 61, 50, 65, 206, 61, 219, 153, 12, 62, 172, 44, 231, 187, 109, 122, 1, 191, 109, 88, 189, 189, 26, 100, 92, 61, 36, 38, 171, 190, 45, 17, 95, 62, 114, 148, 17, 61, 34, 177, 190, 61, 57, 159, 158, 190, 207, 24, 139, 61, 69, 33, 16, 190, 15, 191, 17, 190, 98, 136, 16, 61, 227, 203, 63, 62, 103, 105, 35, 190, 47, 102, 93, 188, 132, 78, 102, 189, 35, 236, 195, 61, 210, 32, 150, 60, 224, 174, 228, 61, 103, 172, 228, 190, 16, 231, 63, 190, 160, 187, 161, 190, 251, 11, 231, 188, 197, 204, 62, 62, 113, 156, 235, 190, 207, 51, 55, 190, 97, 54, 229, 61, 17, 231, 108, 61, 144, 156, 226, 189, 154, 137, 9, 190, 160, 207, 124, 62, 101, 5, 219, 61, 150, 217, 94, 62, 164, 195, 27, 190, 79, 161, 136, 61, 219, 165, 104, 62, 240, 205, 22, 62, 73, 209, 67, 61, 97, 139, 151, 61, 85, 164, 195, 61, 46, 111, 229, 189, 97, 47, 21, 190, 233, 221, 156, 189, 154, 214, 92, 190, 91, 182, 128, 62, 218, 221, 100, 61, 125, 10, 157, 189, 50, 8, 77, 62, 218, 219, 157, 190, 228, 213, 15, 60, 99, 50, 12, 190, 247, 115, 214, 61, 214, 132, 250, 189, 112, 226, 134, 61, 111, 130, 0, 61, 0, 130, 33, 189, 153, 49, 119, 61, 163, 131, 92, 61, 235, 84, 167, 61, 0, 134, 140, 62, 38, 207, 140, 189, 67, 167, 152, 61, 101, 111, 49, 62, 25, 135, 196, 189, 163, 148, 145, 61, 28, 16, 71, 190, 214, 249, 249, 61, 6, 56, 109, 62, 176, 249, 106, 189, 197, 234, 102, 62, 148, 245, 76, 60, 222, 171, 135, 189, 70, 224, 57, 190, 27, 61, 175, 189, 184, 115, 115, 61, 110, 24, 148, 190, 23, 38, 41, 62, 137, 215, 106, 189, 201, 112, 188, 60, 129, 89, 55, 62, 179, 72, 72, 190, 19, 57, 122, 189, 42, 132, 56, 59, 149, 120, 90, 189, 81, 136, 43, 190, 132, 85, 52, 62, 203, 102, 31, 189, 29, 216, 159, 189, 234, 200, 136, 61, 103, 93, 154, 189, 241, 175, 70, 62, 188, 231, 227, 190, 112, 62, 131, 62, 178, 95, 128, 60, 24, 224, 130, 190, 223, 102, 44, 60, 163, 152, 55, 190, 74, 236, 13, 62, 96, 146, 160, 61, 188, 30, 9, 188, 172, 177, 95, 190, 10, 183, 46, 190, 144, 198, 136, 61, 71, 36, 218, 61, 132, 37, 200, 61, 16, 207, 13, 62, 220, 127, 8, 62, 217, 64, 54, 62, 147, 155, 198, 189, 168, 122, 211, 189, 242, 67, 143, 62, 227, 123, 230, 60, 138, 84, 169, 190, 14, 160, 255, 189, 203, 35, 89, 62, 192, 229, 217, 61, 79, 249, 10, 188, 10, 240, 137, 189, 195, 22, 167, 189, 72, 243, 81, 62, 57, 38, 130, 61, 82, 95, 224, 189, 216, 81, 10, 189, 217, 131, 210, 189, 170, 253, 29, 190, 202, 104, 50, 187, 67, 217, 154, 189, 193, 80, 107, 188, 248, 174, 79, 62, 112, 138, 181, 61, 251, 64, 23, 190, 178, 87, 152, 61, 109, 136, 101, 61, 84, 203, 66, 188, 83, 14, 213, 61, 201, 232, 146, 61, 0, 218, 40, 190, 50, 134, 196, 189, 14, 119, 218, 189, 191, 73, 139, 190, 198, 189, 210, 60, 8, 72, 70, 62, 74, 38, 135, 60, 163, 145, 243, 61, 134, 80, 93, 189, 233, 189, 224, 60, 216, 124, 128, 62, 239, 210, 233, 189, 137, 196, 131, 61, 24, 91, 28, 62, 170, 235, 176, 189, 168, 203, 145, 61, 10, 197, 178, 189, 211, 102, 3, 62, 19, 231, 184, 189, 88, 222, 50, 188, 139, 105, 250, 61, 51, 228, 116, 189, 211, 197, 91, 190, 102, 125, 49, 189, 235, 36, 85, 189, 221, 44, 13, 190, 109, 106, 85, 189, 176, 173, 13, 62, 109, 166, 57, 190, 97, 61, 239, 61, 74, 84, 54, 61, 141, 88, 101, 62, 94, 133, 168, 189, 41, 190, 176, 61, 254, 228, 174, 60, 213, 211, 206, 187, 98, 27, 151, 61, 137, 229, 124, 61, 230, 98, 132, 187, 106, 121, 161, 188, 188, 237, 14, 190, 35, 216, 134, 61, 16, 135, 182, 190, 195, 166, 157, 61, 135, 82, 151, 61, 63, 34, 34, 62, 153, 26, 12, 62, 250, 161, 152, 60, 151, 228, 190, 61, 9, 123, 15, 190, 49, 131, 133, 61, 117, 62, 214, 60, 224, 155, 0, 62, 43, 233, 50, 60, 127, 218, 60, 190, 54, 24, 61, 190, 178, 181, 71, 61, 148, 36, 203, 61, 99, 171, 162, 189, 87, 242, 119, 187, 218, 209, 224, 61, 63, 254, 30, 190, 217, 120, 254, 189, 123, 93, 85, 189, 186, 147, 122, 61, 75, 47, 27, 189, 245, 121, 208, 189, 11, 103, 19, 60, 192, 2, 21, 190, 66, 235, 5, 190, 84, 132, 212, 60, 131, 137, 148, 189, 22, 246, 149, 61, 18, 35, 48, 61, 219, 98, 111, 189, 125, 149, 178, 189, 123, 162, 95, 190, 244, 189, 81, 189, 140, 149, 175, 189, 210, 159, 255, 187, 236, 187, 72, 190, 190, 19, 127, 188, 239, 19, 26, 61, 83, 8, 16, 62, 10, 205, 223, 188, 115, 217, 45, 190, 181, 152, 142, 188, 255, 3, 163, 186, 228, 247, 118, 62, 124, 226, 188, 61, 35, 166, 3, 189, 54, 61, 164, 61, 129, 78, 70, 61, 211, 196, 99, 62, 195, 244, 234, 189, 180, 16, 32, 190, 96, 70, 158, 189, 188, 24, 53, 62, 254, 183, 210, 189, 128, 202, 111, 188, 100, 87, 41, 62, 146, 36, 166, 61, 149, 77, 188, 189, 6, 118, 185, 62, 168, 223, 162, 190, 22, 94, 41, 62, 145, 112, 35, 190, 81, 95, 105, 62, 252, 132, 170, 61, 34, 113, 61, 189, 184, 162, 23, 62, 119, 79, 57, 189, 92, 229, 47, 190, 99, 137, 126, 60, 213, 39, 43, 190, 195, 15, 133, 61, 58, 165, 152, 189, 11, 112, 25, 190, 39, 127, 2, 190, 232, 226, 195, 189, 222, 155, 0, 61, 82, 111, 51, 190, 64, 5, 133, 189, 220, 104, 74, 190, 203, 72, 46, 190, 36, 36, 50, 190, 163, 228, 205, 61, 187, 77, 205, 189, 67, 61, 172, 60, 31, 218, 212, 61, 74, 82, 172, 61, 244, 62, 106, 61, 93, 55, 60, 189, 146, 62, 228, 189, 111, 59, 94, 188, 244, 196, 181, 189, 165, 74, 13, 189, 218, 76, 30, 188, 72, 114, 36, 190, 9, 112, 226, 189, 204, 104, 49, 189, 168, 120, 164, 61, 206, 204, 171, 60, 113, 224, 239, 189, 16, 187, 189, 189, 87, 17, 186, 61, 35, 134, 145, 189, 212, 152, 147, 61, 55, 111, 4, 190, 65, 206, 172, 188, 132, 13, 231, 188, 191, 89, 38, 61, 34, 54, 210, 58, 74, 144, 82, 190, 138, 122, 72, 61, 196, 244, 14, 60, 98, 236, 131, 59, 164, 74, 164, 61, 156, 250, 185, 188, 80, 58, 138, 61, 16, 209, 59, 189, 165, 244, 16, 189, 170, 37, 87, 189, 160, 58, 82, 190, 244, 127, 190, 189, 234, 199, 236, 61, 120, 133, 170, 189, 206, 120, 9, 190, 167, 164, 30, 189, 72, 96, 28, 62, 248, 14, 163, 189, 187, 2, 189, 187, 140, 236, 18, 62, 219, 234, 48, 190, 99, 122, 2, 62, 123, 100, 200, 61, 68, 57, 78, 62, 174, 35, 80, 61, 65, 32, 42, 188, 140, 118, 131, 189, 127, 199, 210, 60, 170, 89, 128, 61, 112, 131, 9, 189, 92, 56, 181, 61, 19, 89, 56, 62, 127, 33, 229, 61, 220, 126, 179, 189, 22, 133, 51, 62, 150, 182, 181, 61, 153, 21, 104, 189, 90, 154, 29, 190, 63, 177, 213, 60, 82, 147, 156, 189, 255, 198, 4, 190, 140, 17, 100, 189, 205, 14, 241, 189, 204, 209, 39, 61, 250, 22, 91, 189, 194, 246, 223, 60, 135, 12, 44, 62, 240, 119, 70, 61, 223, 75, 11, 61, 201, 136, 200, 60, 155, 119, 177, 61, 61, 245, 126, 61, 220, 57, 235, 61, 111, 226, 103, 188, 145, 52, 75, 188, 1, 110, 158, 188, 178, 88, 159, 61, 33, 95, 63, 62, 144, 236, 1, 190, 206, 252, 33, 62, 175, 101, 129, 189, 209, 52, 156, 190, 117, 156, 188, 61, 28, 98, 193, 189, 77, 32, 207, 61, 178, 6, 185, 61, 114, 83, 84, 190, 166, 42, 130, 61, 119, 209, 232, 189, 231, 164, 38, 62, 225, 100, 17, 189, 116, 6, 115, 62, 121, 56, 142, 189, 115, 2, 227, 60, 96, 196, 8, 62, 15, 182, 14, 189, 10, 117, 187, 189, 129, 121, 25, 61, 52, 163, 238, 188, 71, 225, 58, 62, 2, 93, 112, 190, 213, 49, 189, 187, 14, 88, 1, 60, 19, 42, 39, 189, 96, 111, 174, 188, 214, 57, 176, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {86, 192, 160, 60, 26, 76, 55, 62, 116, 165, 102, 61, 39, 124, 179, 189, 252, 55, 89, 61, 222, 25, 166, 59, 137, 7, 4, 61, 241, 66, 22, 190, 119, 216, 169, 62, 235, 31, 166, 189, 194, 184, 119, 189, 226, 200, 49, 61, 77, 248, 11, 62, 35, 190, 24, 62, 90, 42, 247, 189, 100, 159, 169, 189, 16, 109, 39, 190, 163, 4, 39, 190, 203, 238, 3, 190, 203, 131, 95, 62, 86, 123, 216, 61, 89, 95, 29, 62, 161, 163, 13, 62, 202, 172, 102, 62, 159, 6, 13, 190, 14, 184, 73, 62, 23, 106, 154, 61, 9, 54, 73, 62, 249, 200, 98, 61, 0, 97, 186, 188, 82, 111, 25, 190, 166, 16, 46, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {235, 222, 100, 188, 182, 213, 71, 190, 133, 62, 71, 62, 101, 193, 76, 62, 202, 146, 135, 189, 26, 1, 24, 189, 243, 208, 91, 190, 35, 146, 116, 190, 50, 34, 104, 190, 130, 230, 140, 189, 152, 126, 77, 189, 247, 227, 43, 61, 8, 229, 83, 62, 146, 62, 59, 190, 39, 70, 142, 190, 113, 205, 146, 62, 210, 150, 157, 189, 164, 50, 20, 61, 116, 104, 57, 62, 150, 46, 43, 62, 169, 167, 1, 190, 121, 227, 105, 190, 59, 103, 57, 190, 199, 255, 202, 62, 198, 154, 33, 62, 227, 245, 5, 188, 204, 130, 245, 189, 207, 38, 35, 190, 101, 240, 10, 62, 193, 121, 204, 61, 24, 163, 150, 58, 129, 29, 91, 62, 147, 186, 186, 189, 82, 99, 28, 190, 44, 207, 143, 189, 102, 32, 199, 188, 77, 184, 81, 190, 141, 59, 15, 62, 225, 226, 42, 62, 2, 56, 128, 62, 56, 36, 221, 190, 117, 44, 43, 190, 86, 78, 27, 62, 193, 19, 143, 62, 252, 46, 62, 60, 120, 137, 254, 189, 104, 188, 103, 61, 232, 218, 218, 189, 233, 52, 139, 189, 160, 240, 152, 189, 41, 115, 224, 61, 222, 31, 108, 190, 234, 77, 231, 62, 143, 44, 100, 189, 184, 95, 243, 189, 184, 211, 225, 189, 67, 147, 212, 61, 113, 247, 47, 190, 234, 127, 7, 62, 251, 195, 244, 189, 211, 45, 130, 189, 52, 75, 90, 189, 119, 241, 127, 62, 172, 113, 231, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 174, 166, 188, 167, 64, 192, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {48, 40, 231, 191, 85, 5, 198, 191, 176, 48, 77, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {73, 136, 103, 64, 127, 86, 14, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0001/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}