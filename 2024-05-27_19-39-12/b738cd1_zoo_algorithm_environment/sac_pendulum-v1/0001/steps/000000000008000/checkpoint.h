// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 25, 21, 61, 201, 58, 9, 190, 55, 21, 7, 63, 113, 140, 123, 62, 67, 187, 118, 191, 104, 64, 198, 190, 121, 95, 192, 62, 211, 77, 76, 60, 8, 186, 38, 191, 21, 216, 56, 191, 4, 160, 50, 191, 198, 21, 81, 190, 230, 179, 216, 190, 177, 89, 195, 62, 202, 230, 31, 191, 57, 17, 247, 190, 175, 172, 159, 190, 219, 201, 171, 62, 35, 226, 66, 190, 224, 13, 162, 191, 71, 205, 48, 190, 221, 155, 132, 189, 199, 152, 31, 63, 208, 190, 216, 189, 149, 162, 253, 190, 162, 241, 39, 63, 143, 141, 32, 62, 212, 64, 17, 61, 188, 148, 146, 63, 124, 235, 173, 62, 170, 6, 19, 63, 111, 132, 3, 191, 245, 119, 65, 190, 178, 34, 225, 190, 197, 166, 102, 191, 59, 182, 245, 61, 37, 57, 9, 63, 44, 195, 197, 62, 79, 27, 30, 63, 64, 175, 113, 60, 93, 197, 239, 190, 226, 239, 255, 190, 202, 176, 205, 62, 90, 33, 221, 61, 201, 113, 14, 191, 201, 137, 134, 191, 42, 27, 181, 62, 6, 175, 187, 61, 34, 131, 103, 63, 113, 61, 88, 191, 143, 13, 128, 190, 77, 120, 146, 190, 95, 6, 234, 190, 91, 3, 17, 63, 152, 124, 71, 61, 156, 242, 132, 191, 138, 85, 190, 62, 159, 69, 61, 191, 52, 114, 14, 189, 235, 235, 108, 62, 136, 165, 24, 60, 22, 59, 92, 191, 64, 139, 63, 190, 105, 143, 135, 190, 198, 167, 76, 62, 45, 34, 98, 190, 203, 22, 120, 62, 145, 188, 35, 63, 62, 64, 155, 186, 206, 255, 218, 190, 190, 155, 137, 190, 170, 19, 253, 62, 41, 27, 59, 63, 211, 32, 12, 63, 254, 202, 157, 62, 108, 197, 216, 62, 43, 204, 8, 190, 216, 9, 219, 190, 2, 24, 188, 190, 140, 141, 129, 190, 71, 203, 63, 191, 57, 161, 93, 63, 96, 9, 92, 63, 181, 98, 148, 62, 58, 245, 36, 190, 103, 196, 245, 62, 231, 152, 225, 62, 202, 204, 170, 61, 98, 124, 45, 191, 97, 237, 154, 190, 57, 30, 185, 188, 82, 185, 48, 63, 37, 230, 41, 63, 204, 253, 179, 189, 149, 73, 210, 62, 42, 47, 126, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 118, 138, 191, 181, 88, 219, 190, 55, 237, 87, 190, 203, 40, 178, 62, 202, 177, 175, 190, 222, 242, 24, 63, 6, 19, 99, 190, 170, 124, 233, 62, 160, 10, 72, 190, 89, 128, 4, 190, 120, 141, 70, 62, 177, 96, 38, 190, 112, 208, 134, 189, 77, 76, 98, 190, 204, 169, 32, 63, 11, 206, 109, 62, 113, 95, 245, 62, 199, 194, 183, 62, 155, 85, 236, 62, 10, 58, 222, 62, 147, 121, 189, 62, 32, 214, 135, 62, 115, 103, 54, 63, 228, 53, 6, 62, 128, 151, 236, 61, 70, 113, 203, 190, 171, 162, 165, 190, 117, 209, 210, 190, 232, 246, 16, 190, 54, 112, 123, 190, 53, 235, 159, 190, 77, 175, 9, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 161, 245, 187, 12, 133, 89, 187, 198, 159, 171, 189, 118, 33, 166, 190, 205, 177, 237, 61, 198, 205, 10, 62, 89, 29, 238, 190, 157, 52, 206, 62, 237, 212, 172, 61, 151, 30, 141, 189, 142, 37, 155, 61, 215, 69, 177, 190, 74, 142, 140, 62, 43, 72, 231, 189, 58, 216, 119, 61, 193, 97, 162, 62, 190, 224, 128, 62, 226, 108, 42, 190, 118, 188, 125, 190, 14, 232, 34, 62, 224, 187, 162, 189, 217, 195, 142, 62, 80, 251, 220, 62, 122, 91, 82, 190, 155, 253, 24, 62, 70, 205, 100, 189, 26, 34, 220, 60, 163, 233, 248, 190, 95, 22, 61, 62, 164, 184, 21, 190, 9, 132, 44, 62, 123, 17, 200, 186, 234, 166, 200, 62, 233, 139, 160, 190, 76, 165, 150, 190, 215, 225, 242, 61, 35, 0, 119, 62, 19, 6, 83, 190, 145, 91, 90, 62, 217, 199, 36, 62, 2, 39, 112, 190, 132, 59, 114, 62, 12, 211, 216, 188, 128, 136, 192, 188, 168, 90, 166, 60, 33, 208, 142, 61, 134, 120, 21, 62, 112, 205, 53, 190, 39, 116, 149, 61, 96, 162, 164, 61, 116, 202, 88, 187, 252, 131, 128, 61, 115, 67, 31, 190, 28, 28, 10, 62, 234, 146, 134, 189, 251, 179, 208, 189, 71, 107, 139, 61, 3, 246, 138, 190, 35, 204, 169, 61, 170, 254, 88, 62, 82, 138, 66, 62, 183, 88, 228, 190, 21, 33, 26, 190, 185, 19, 59, 61, 180, 203, 110, 190, 192, 59, 183, 62, 43, 101, 240, 188, 248, 74, 156, 61, 76, 16, 130, 188, 120, 3, 253, 61, 227, 202, 41, 190, 83, 50, 203, 61, 80, 7, 173, 62, 49, 80, 4, 190, 29, 163, 240, 60, 167, 209, 66, 190, 166, 140, 152, 190, 219, 187, 254, 189, 162, 59, 153, 188, 31, 92, 128, 60, 40, 192, 27, 62, 202, 96, 78, 62, 117, 197, 55, 61, 4, 109, 63, 62, 176, 146, 121, 61, 70, 235, 158, 188, 102, 118, 113, 61, 136, 74, 6, 61, 205, 33, 130, 190, 65, 153, 129, 62, 6, 153, 76, 190, 22, 131, 24, 191, 0, 161, 164, 60, 69, 97, 25, 62, 140, 219, 128, 62, 246, 56, 99, 189, 196, 110, 145, 189, 72, 101, 173, 62, 8, 26, 33, 62, 123, 19, 106, 62, 254, 231, 237, 189, 223, 230, 37, 62, 174, 186, 122, 62, 243, 222, 46, 187, 27, 170, 17, 191, 41, 241, 130, 61, 24, 46, 28, 61, 73, 162, 114, 62, 234, 19, 7, 190, 32, 144, 110, 62, 143, 252, 38, 62, 120, 36, 243, 189, 184, 109, 70, 62, 21, 37, 103, 62, 171, 42, 2, 63, 84, 234, 207, 61, 253, 80, 201, 61, 84, 244, 2, 190, 170, 53, 207, 190, 180, 193, 234, 60, 75, 177, 45, 190, 95, 226, 31, 62, 54, 255, 17, 62, 242, 231, 79, 191, 117, 77, 232, 190, 120, 74, 6, 62, 215, 191, 2, 191, 102, 24, 131, 61, 76, 167, 64, 190, 29, 234, 154, 190, 132, 138, 45, 190, 159, 219, 219, 61, 220, 43, 123, 61, 76, 210, 114, 189, 164, 121, 211, 61, 50, 71, 169, 188, 175, 47, 194, 61, 243, 38, 171, 189, 9, 74, 104, 62, 51, 43, 73, 190, 110, 86, 249, 188, 139, 99, 132, 188, 198, 138, 65, 62, 102, 231, 60, 62, 115, 9, 149, 62, 196, 239, 192, 61, 142, 59, 233, 189, 222, 240, 217, 60, 236, 44, 77, 190, 246, 141, 11, 61, 82, 33, 173, 62, 81, 74, 122, 189, 147, 55, 200, 61, 175, 230, 140, 190, 16, 10, 95, 62, 206, 75, 98, 190, 126, 165, 34, 190, 252, 0, 21, 190, 97, 98, 144, 190, 34, 174, 43, 62, 224, 1, 62, 188, 30, 218, 214, 189, 70, 49, 177, 188, 110, 242, 166, 189, 41, 97, 28, 189, 209, 170, 1, 61, 140, 178, 27, 189, 254, 66, 8, 59, 214, 23, 105, 189, 193, 207, 168, 189, 229, 38, 12, 190, 72, 206, 219, 189, 127, 47, 133, 188, 185, 51, 71, 61, 132, 75, 17, 189, 201, 248, 191, 189, 120, 162, 17, 60, 164, 26, 34, 190, 189, 251, 13, 190, 251, 157, 234, 189, 12, 189, 102, 61, 62, 40, 8, 189, 19, 227, 154, 189, 157, 199, 127, 189, 197, 100, 42, 62, 182, 159, 159, 61, 177, 60, 55, 61, 167, 221, 11, 190, 42, 244, 254, 187, 125, 45, 63, 61, 131, 14, 166, 189, 34, 89, 32, 190, 205, 215, 140, 61, 143, 104, 189, 190, 6, 187, 186, 62, 243, 166, 165, 190, 75, 216, 63, 189, 167, 174, 166, 61, 211, 37, 184, 189, 210, 9, 133, 62, 174, 209, 37, 190, 146, 75, 16, 62, 230, 151, 205, 61, 230, 57, 190, 62, 251, 202, 77, 62, 112, 200, 20, 189, 145, 134, 161, 188, 127, 210, 14, 191, 214, 250, 248, 60, 207, 246, 65, 61, 41, 248, 250, 61, 55, 195, 99, 190, 225, 232, 11, 191, 219, 196, 137, 61, 140, 42, 85, 62, 40, 204, 217, 188, 49, 249, 169, 61, 75, 226, 217, 62, 202, 238, 110, 190, 82, 225, 247, 62, 101, 10, 171, 190, 135, 11, 4, 190, 27, 209, 1, 61, 82, 184, 22, 190, 251, 165, 129, 62, 124, 250, 87, 191, 211, 130, 84, 190, 159, 25, 41, 62, 24, 78, 177, 61, 249, 231, 17, 189, 3, 238, 165, 62, 206, 68, 181, 62, 179, 8, 166, 189, 8, 133, 131, 62, 20, 221, 162, 188, 227, 24, 107, 62, 121, 165, 226, 189, 126, 4, 76, 189, 238, 96, 38, 62, 28, 77, 250, 61, 28, 109, 177, 190, 255, 148, 8, 62, 33, 17, 165, 190, 45, 131, 199, 61, 0, 71, 244, 61, 74, 147, 58, 62, 28, 27, 175, 189, 193, 166, 3, 62, 6, 2, 168, 190, 81, 239, 3, 191, 152, 7, 253, 62, 194, 2, 202, 189, 162, 239, 128, 190, 123, 115, 222, 190, 161, 28, 66, 190, 30, 150, 20, 187, 158, 194, 50, 191, 110, 8, 126, 190, 128, 236, 53, 190, 68, 47, 60, 59, 110, 140, 168, 60, 150, 244, 128, 62, 66, 44, 27, 62, 152, 112, 164, 62, 23, 36, 121, 189, 173, 129, 43, 190, 41, 136, 174, 61, 215, 3, 212, 188, 215, 211, 216, 61, 235, 186, 22, 62, 214, 4, 157, 62, 136, 168, 119, 62, 160, 70, 156, 62, 237, 59, 216, 61, 103, 137, 55, 190, 187, 6, 148, 61, 58, 196, 138, 61, 3, 189, 55, 62, 209, 79, 179, 61, 213, 9, 237, 61, 25, 29, 50, 62, 193, 174, 175, 190, 149, 239, 26, 62, 136, 69, 39, 190, 86, 249, 49, 190, 246, 97, 6, 188, 200, 43, 74, 191, 90, 52, 13, 62, 113, 203, 10, 189, 139, 94, 114, 61, 218, 223, 40, 189, 66, 177, 0, 190, 41, 114, 61, 189, 212, 236, 51, 61, 29, 103, 11, 190, 182, 74, 35, 62, 199, 63, 36, 190, 156, 95, 70, 190, 195, 99, 129, 61, 193, 41, 43, 190, 21, 240, 134, 61, 221, 233, 44, 62, 53, 3, 63, 190, 203, 76, 48, 188, 57, 236, 146, 189, 186, 82, 55, 190, 52, 220, 64, 190, 127, 151, 190, 189, 13, 186, 33, 62, 100, 103, 96, 189, 209, 238, 101, 61, 73, 245, 27, 190, 25, 35, 253, 189, 10, 232, 179, 189, 57, 190, 14, 190, 82, 3, 6, 62, 157, 84, 128, 61, 104, 43, 127, 61, 68, 60, 23, 62, 240, 220, 208, 59, 2, 229, 59, 62, 180, 132, 6, 62, 124, 222, 36, 62, 203, 164, 12, 190, 231, 131, 13, 190, 79, 79, 101, 187, 0, 79, 25, 189, 98, 21, 104, 190, 253, 70, 204, 189, 134, 83, 203, 189, 50, 30, 120, 62, 126, 155, 87, 190, 227, 49, 26, 191, 159, 78, 102, 190, 121, 189, 94, 189, 140, 124, 154, 190, 95, 250, 169, 62, 111, 216, 217, 61, 140, 73, 185, 62, 58, 236, 66, 188, 227, 197, 88, 62, 105, 148, 80, 190, 209, 238, 9, 62, 66, 150, 188, 189, 20, 253, 47, 191, 99, 45, 101, 62, 56, 242, 173, 189, 224, 123, 119, 191, 116, 219, 234, 61, 250, 101, 39, 62, 246, 135, 129, 62, 159, 12, 52, 62, 234, 74, 8, 191, 14, 5, 187, 188, 138, 226, 138, 189, 114, 213, 189, 189, 24, 195, 33, 62, 130, 13, 180, 61, 191, 145, 15, 190, 134, 163, 59, 62, 48, 25, 139, 190, 14, 147, 203, 62, 89, 114, 175, 190, 67, 64, 23, 63, 250, 73, 164, 61, 19, 236, 160, 61, 104, 161, 207, 61, 33, 50, 205, 188, 158, 212, 209, 190, 17, 255, 182, 190, 130, 51, 137, 190, 217, 194, 193, 62, 36, 214, 127, 61, 213, 20, 212, 61, 154, 198, 125, 62, 254, 218, 24, 191, 3, 52, 109, 61, 183, 206, 219, 189, 108, 43, 149, 62, 131, 14, 243, 189, 49, 158, 225, 189, 150, 13, 23, 190, 93, 73, 62, 190, 155, 171, 5, 190, 107, 181, 12, 190, 233, 220, 201, 62, 179, 155, 186, 62, 21, 66, 154, 190, 116, 220, 151, 59, 201, 147, 51, 60, 240, 228, 45, 191, 91, 116, 81, 61, 95, 34, 129, 62, 179, 137, 75, 190, 215, 119, 139, 62, 160, 104, 246, 190, 151, 248, 98, 190, 13, 250, 172, 190, 191, 14, 225, 189, 120, 64, 41, 190, 211, 239, 197, 61, 236, 197, 220, 61, 70, 91, 248, 61, 70, 3, 216, 59, 172, 3, 71, 189, 181, 176, 213, 189, 248, 24, 215, 188, 65, 153, 0, 62, 59, 115, 173, 189, 184, 199, 21, 63, 119, 86, 27, 190, 141, 13, 245, 189, 90, 16, 244, 61, 188, 204, 33, 62, 250, 1, 168, 61, 180, 161, 21, 190, 86, 70, 233, 61, 124, 226, 134, 190, 87, 212, 87, 190, 59, 144, 75, 62, 180, 16, 152, 62, 110, 153, 91, 189, 95, 242, 193, 187, 59, 128, 77, 61, 244, 126, 167, 59, 236, 186, 13, 190, 59, 254, 16, 62, 255, 23, 4, 189, 13, 241, 137, 61, 168, 31, 198, 186, 106, 224, 61, 62, 168, 143, 65, 62, 139, 238, 51, 61, 0, 227, 217, 61, 229, 104, 245, 189, 11, 36, 58, 61, 40, 118, 88, 61, 83, 15, 8, 190, 231, 98, 173, 61, 151, 87, 12, 190, 169, 57, 57, 62, 210, 178, 228, 190, 119, 193, 137, 62, 150, 153, 57, 189, 81, 242, 171, 189, 229, 244, 211, 189, 123, 167, 113, 190, 41, 232, 212, 189, 209, 151, 233, 62, 46, 59, 182, 190, 131, 231, 176, 190, 207, 229, 130, 62, 246, 103, 187, 62, 114, 81, 82, 190, 13, 235, 0, 63, 217, 232, 218, 61, 115, 22, 179, 190, 48, 184, 106, 61, 71, 57, 221, 189, 110, 36, 191, 61, 154, 22, 116, 62, 70, 126, 142, 189, 30, 161, 124, 61, 63, 100, 36, 190, 199, 50, 43, 190, 130, 58, 210, 189, 10, 184, 253, 189, 5, 5, 118, 190, 93, 65, 217, 189, 32, 10, 153, 62, 63, 198, 210, 189, 183, 180, 164, 189, 2, 250, 133, 62, 176, 240, 169, 190, 179, 82, 182, 62, 227, 191, 2, 63, 31, 121, 25, 62, 43, 241, 71, 190, 30, 153, 37, 62, 209, 216, 12, 62, 211, 233, 162, 190, 57, 190, 156, 190, 115, 210, 138, 61, 98, 80, 70, 189, 120, 19, 144, 190, 76, 32, 63, 62, 180, 42, 80, 190, 107, 102, 217, 190, 42, 214, 198, 190, 185, 72, 255, 190, 171, 62, 240, 62, 214, 13, 166, 62, 10, 82, 129, 61, 219, 131, 210, 189, 29, 72, 189, 61, 162, 160, 146, 189, 217, 19, 248, 62, 219, 206, 218, 60, 107, 59, 200, 62, 116, 114, 11, 62, 32, 180, 208, 62, 114, 189, 84, 190, 197, 246, 157, 189, 119, 128, 230, 189, 43, 54, 98, 189, 99, 57, 133, 62, 224, 170, 254, 189, 97, 40, 148, 190, 185, 236, 116, 190, 136, 34, 247, 60, 85, 77, 118, 190, 127, 60, 222, 189, 222, 203, 36, 190, 94, 8, 29, 190, 201, 48, 56, 61, 70, 163, 69, 190, 198, 250, 171, 189, 244, 148, 20, 188, 153, 184, 81, 189, 231, 118, 58, 190, 113, 8, 40, 189, 161, 213, 100, 189, 78, 169, 85, 61, 34, 5, 5, 190, 163, 68, 158, 189, 226, 58, 186, 61, 125, 115, 79, 189, 17, 109, 188, 61, 158, 161, 20, 190, 218, 124, 111, 189, 134, 242, 33, 190, 138, 110, 64, 189, 140, 163, 74, 186, 82, 40, 82, 189, 164, 15, 250, 189, 25, 251, 231, 189, 210, 39, 254, 61, 7, 8, 203, 61, 231, 161, 198, 61, 102, 178, 48, 190, 170, 87, 107, 61, 69, 100, 209, 61, 5, 218, 214, 189, 50, 142, 151, 188, 193, 94, 46, 62, 68, 71, 128, 189, 163, 185, 35, 62, 126, 90, 254, 189, 82, 175, 134, 60, 119, 67, 30, 190, 208, 253, 20, 189, 60, 64, 112, 189, 248, 240, 220, 189, 2, 187, 17, 190, 100, 172, 201, 189, 243, 152, 109, 189, 94, 125, 49, 62, 32, 48, 1, 190, 166, 80, 233, 189, 139, 134, 10, 62, 159, 13, 143, 189, 76, 95, 51, 190, 147, 231, 87, 188, 249, 24, 30, 190, 20, 165, 15, 190, 47, 11, 37, 190, 24, 154, 76, 61, 48, 162, 27, 190, 247, 27, 97, 187, 31, 211, 206, 189, 25, 143, 192, 61, 166, 125, 15, 190, 218, 82, 221, 189, 38, 34, 201, 189, 236, 34, 6, 62, 231, 57, 127, 60, 84, 152, 66, 190, 165, 198, 33, 190, 177, 113, 136, 61, 158, 90, 247, 61, 57, 198, 133, 60, 110, 104, 138, 61, 113, 117, 146, 190, 37, 206, 138, 62, 195, 166, 44, 62, 235, 15, 42, 191, 230, 252, 79, 190, 113, 10, 11, 191, 107, 84, 255, 190, 179, 140, 101, 191, 166, 131, 188, 188, 228, 152, 129, 62, 102, 165, 155, 190, 158, 15, 112, 190, 31, 205, 9, 191, 98, 107, 10, 61, 45, 238, 49, 188, 145, 100, 36, 62, 117, 6, 152, 62, 5, 50, 166, 190, 28, 209, 72, 62, 178, 148, 127, 61, 160, 74, 42, 191, 198, 162, 75, 63, 101, 193, 73, 191, 241, 214, 47, 190, 242, 53, 8, 191, 227, 153, 172, 60, 249, 76, 2, 191, 193, 77, 164, 60, 72, 38, 3, 62, 124, 106, 230, 189, 194, 20, 197, 61, 86, 154, 131, 61, 216, 56, 179, 189, 32, 205, 250, 188, 0, 198, 131, 62, 17, 43, 99, 190, 136, 212, 174, 61, 16, 121, 54, 187, 219, 9, 98, 189, 56, 68, 30, 187, 174, 198, 58, 190, 32, 189, 204, 187, 74, 4, 149, 62, 31, 25, 93, 61, 105, 170, 48, 189, 193, 239, 155, 62, 58, 231, 240, 61, 167, 222, 67, 62, 28, 70, 169, 62, 95, 20, 204, 61, 186, 45, 75, 189, 208, 64, 164, 60, 68, 219, 67, 190, 49, 164, 93, 191, 98, 20, 101, 62, 247, 51, 28, 62, 218, 230, 199, 61, 184, 198, 255, 61, 139, 102, 47, 190, 143, 172, 44, 191, 160, 119, 138, 190, 182, 43, 105, 61, 87, 14, 79, 62, 255, 175, 1, 189, 112, 245, 146, 62, 82, 152, 76, 58, 21, 72, 193, 190, 126, 201, 250, 190, 177, 36, 39, 189, 48, 3, 243, 62, 219, 242, 178, 190, 102, 139, 150, 62, 63, 213, 231, 61, 228, 116, 181, 188, 138, 172, 137, 190, 187, 52, 117, 62, 154, 19, 168, 61, 87, 174, 166, 190, 209, 11, 140, 62, 170, 0, 22, 62, 210, 202, 245, 190, 56, 58, 63, 62, 145, 164, 158, 189, 154, 152, 28, 61, 227, 136, 87, 61, 186, 35, 254, 62, 145, 87, 137, 191, 249, 89, 195, 190, 68, 245, 124, 191, 190, 30, 230, 188, 213, 245, 1, 63, 223, 181, 49, 191, 177, 65, 84, 190, 66, 166, 43, 62, 1, 239, 208, 61, 111, 122, 105, 190, 82, 241, 21, 61, 169, 109, 12, 62, 182, 195, 6, 190, 139, 156, 72, 62, 25, 87, 19, 189, 135, 45, 108, 62, 209, 163, 163, 62, 91, 169, 123, 62, 10, 128, 16, 62, 71, 87, 60, 190, 28, 50, 1, 62, 52, 194, 169, 189, 214, 6, 244, 189, 106, 54, 145, 190, 247, 127, 142, 190, 192, 201, 113, 62, 142, 166, 56, 189, 218, 40, 227, 188, 223, 74, 135, 62, 215, 82, 193, 190, 22, 56, 226, 61, 49, 31, 81, 62, 101, 197, 164, 61, 114, 155, 155, 190, 176, 25, 77, 61, 117, 162, 0, 61, 120, 16, 234, 188, 136, 201, 103, 189, 81, 165, 137, 61, 211, 21, 189, 61, 200, 240, 148, 62, 22, 25, 145, 190, 19, 73, 103, 62, 251, 159, 163, 61, 182, 224, 0, 190, 239, 252, 178, 61, 22, 138, 221, 58, 40, 36, 247, 189, 254, 242, 121, 62, 191, 81, 97, 60, 233, 189, 153, 62, 169, 48, 149, 189, 170, 118, 133, 61, 241, 22, 156, 190, 94, 212, 127, 190, 42, 88, 21, 190, 141, 218, 135, 190, 137, 179, 223, 61, 54, 82, 172, 189, 102, 76, 196, 189, 79, 200, 83, 62, 121, 89, 94, 190, 160, 12, 31, 59, 47, 161, 112, 62, 197, 159, 224, 189, 143, 108, 136, 190, 57, 198, 158, 61, 30, 94, 31, 189, 213, 48, 132, 190, 104, 229, 129, 61, 98, 223, 8, 62, 70, 23, 206, 189, 115, 205, 42, 191, 35, 22, 137, 62, 199, 225, 98, 190, 188, 158, 82, 190, 4, 167, 13, 62, 225, 14, 142, 190, 244, 199, 163, 62, 142, 127, 54, 61, 239, 217, 108, 189, 53, 190, 102, 191, 208, 63, 149, 190, 39, 193, 172, 61, 171, 213, 138, 62, 216, 88, 183, 61, 8, 66, 241, 61, 137, 152, 19, 62, 243, 132, 249, 61, 222, 174, 174, 190, 23, 84, 255, 188, 229, 200, 141, 62, 184, 250, 43, 188, 109, 197, 157, 189, 166, 142, 179, 190, 142, 129, 96, 190, 104, 53, 182, 61, 239, 154, 15, 62, 84, 132, 90, 189, 195, 22, 167, 189, 231, 155, 215, 189, 57, 38, 130, 61, 25, 3, 235, 190, 211, 131, 2, 190, 14, 184, 172, 61, 121, 98, 205, 190, 202, 104, 50, 187, 147, 37, 6, 62, 14, 217, 190, 190, 36, 83, 146, 62, 136, 153, 29, 190, 59, 219, 248, 189, 127, 186, 252, 61, 16, 135, 60, 61, 73, 13, 220, 61, 49, 156, 191, 190, 75, 192, 113, 189, 165, 136, 246, 190, 254, 81, 77, 190, 61, 4, 228, 190, 248, 1, 162, 190, 58, 30, 93, 62, 220, 111, 152, 62, 104, 228, 208, 190, 171, 50, 115, 62, 162, 162, 217, 190, 157, 54, 249, 189, 30, 252, 16, 63, 27, 188, 193, 190, 48, 20, 111, 61, 14, 146, 42, 190, 170, 235, 176, 189, 23, 89, 6, 190, 105, 0, 14, 191, 219, 184, 16, 189, 204, 50, 135, 189, 1, 50, 129, 190, 128, 142, 51, 62, 62, 47, 111, 60, 56, 114, 240, 189, 7, 15, 161, 61, 132, 196, 26, 190, 120, 68, 41, 190, 85, 218, 80, 61, 143, 222, 139, 61, 218, 4, 199, 190, 200, 2, 140, 61, 132, 185, 101, 62, 0, 20, 138, 62, 146, 79, 251, 189, 65, 46, 253, 188, 231, 10, 53, 62, 175, 150, 76, 59, 100, 21, 204, 60, 176, 36, 29, 62, 143, 0, 45, 189, 18, 44, 157, 188, 17, 219, 155, 190, 91, 238, 215, 189, 166, 140, 14, 191, 106, 11, 165, 187, 224, 243, 152, 190, 201, 33, 43, 61, 109, 20, 12, 62, 255, 70, 1, 189, 62, 140, 68, 61, 82, 106, 50, 190, 232, 90, 60, 61, 173, 107, 192, 60, 47, 132, 219, 61, 170, 168, 206, 185, 172, 93, 58, 190, 43, 91, 61, 190, 146, 143, 173, 60, 240, 124, 80, 61, 113, 232, 186, 189, 182, 71, 96, 189, 116, 164, 109, 61, 178, 190, 78, 190, 94, 232, 254, 189, 182, 223, 192, 189, 1, 6, 9, 61, 195, 190, 135, 189, 230, 165, 246, 189, 174, 222, 158, 188, 138, 96, 42, 190, 222, 65, 57, 190, 15, 250, 155, 57, 101, 73, 3, 190, 62, 235, 74, 61, 233, 160, 8, 60, 140, 248, 111, 189, 194, 3, 197, 189, 114, 40, 135, 190, 126, 110, 58, 189, 140, 149, 175, 189, 79, 42, 187, 59, 24, 187, 171, 190, 81, 203, 171, 188, 185, 135, 128, 61, 65, 88, 40, 62, 125, 243, 109, 190, 185, 205, 91, 187, 48, 137, 186, 189, 24, 154, 193, 60, 132, 17, 115, 62, 5, 133, 51, 62, 214, 4, 182, 190, 51, 132, 114, 61, 97, 176, 228, 61, 179, 63, 147, 62, 212, 246, 18, 190, 181, 204, 208, 189, 94, 135, 89, 190, 147, 109, 27, 189, 187, 208, 139, 190, 135, 146, 5, 189, 139, 24, 2, 62, 108, 74, 195, 58, 62, 141, 85, 190, 57, 44, 181, 62, 58, 71, 177, 190, 114, 122, 107, 62, 78, 80, 102, 61, 117, 141, 21, 62, 47, 1, 27, 189, 122, 56, 30, 190, 160, 163, 23, 62, 240, 71, 58, 189, 92, 229, 47, 190, 99, 137, 126, 60, 245, 227, 49, 190, 195, 15, 133, 61, 37, 189, 160, 189, 233, 29, 30, 190, 39, 127, 2, 190, 235, 119, 203, 189, 222, 155, 0, 61, 82, 111, 51, 190, 190, 172, 135, 189, 208, 118, 74, 190, 203, 72, 46, 190, 36, 36, 50, 190, 93, 95, 198, 61, 187, 77, 205, 189, 180, 192, 136, 60, 252, 252, 200, 61, 219, 35, 164, 61, 78, 0, 74, 61, 190, 100, 60, 189, 151, 154, 232, 189, 90, 36, 150, 188, 196, 45, 182, 189, 165, 74, 13, 189, 218, 76, 30, 188, 72, 114, 36, 190, 238, 120, 237, 189, 204, 104, 49, 189, 146, 139, 153, 61, 206, 204, 171, 60, 249, 248, 7, 190, 49, 214, 221, 59, 98, 213, 147, 61, 8, 115, 130, 188, 160, 101, 23, 62, 105, 106, 78, 62, 193, 68, 205, 59, 149, 140, 63, 61, 73, 18, 170, 61, 36, 128, 186, 62, 242, 27, 152, 190, 145, 175, 145, 61, 179, 255, 177, 62, 208, 168, 176, 61, 249, 165, 226, 61, 215, 87, 140, 61, 97, 122, 60, 61, 168, 51, 71, 189, 45, 51, 11, 61, 44, 238, 18, 62, 222, 125, 225, 189, 129, 240, 215, 188, 126, 39, 23, 62, 33, 83, 157, 189, 73, 218, 52, 61, 17, 162, 184, 188, 23, 66, 110, 62, 57, 201, 167, 190, 29, 64, 147, 190, 225, 193, 90, 62, 212, 23, 175, 190, 233, 115, 2, 62, 68, 150, 38, 190, 194, 214, 150, 62, 58, 86, 12, 62, 90, 143, 71, 190, 85, 175, 160, 189, 97, 118, 159, 189, 161, 44, 114, 190, 49, 33, 65, 189, 243, 216, 159, 189, 115, 193, 154, 62, 54, 230, 23, 62, 184, 57, 122, 190, 187, 131, 38, 62, 161, 85, 212, 61, 182, 82, 109, 189, 25, 107, 46, 191, 62, 99, 43, 61, 31, 65, 143, 190, 234, 223, 125, 190, 236, 86, 193, 190, 128, 39, 4, 190, 138, 136, 61, 187, 112, 125, 137, 189, 213, 161, 134, 190, 239, 56, 187, 61, 23, 179, 39, 62, 153, 23, 2, 61, 80, 67, 181, 61, 12, 122, 18, 61, 147, 180, 22, 62, 1, 109, 119, 61, 231, 42, 103, 188, 247, 225, 4, 190, 132, 21, 95, 62, 242, 45, 174, 62, 156, 114, 209, 188, 124, 116, 247, 188, 175, 46, 116, 61, 129, 64, 99, 191, 76, 108, 11, 189, 123, 105, 227, 61, 0, 20, 111, 191, 20, 169, 21, 63, 30, 99, 0, 191, 114, 200, 169, 190, 146, 192, 142, 190, 99, 52, 222, 188, 231, 174, 219, 61, 44, 148, 71, 62, 204, 85, 117, 189, 9, 169, 68, 190, 5, 2, 245, 187, 160, 85, 215, 189, 155, 11, 25, 62, 189, 252, 34, 62, 214, 199, 181, 190, 171, 207, 21, 190, 30, 181, 0, 63, 105, 89, 192, 190, 34, 66, 121, 190, 254, 148, 239, 190, 229, 205, 123, 62, 229, 44, 131, 190, 214, 57, 176, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 93, 208, 61, 49, 69, 50, 62, 229, 37, 150, 60, 89, 21, 160, 189, 121, 69, 60, 62, 222, 25, 166, 59, 213, 8, 184, 188, 218, 137, 204, 189, 168, 147, 250, 62, 244, 64, 168, 189, 90, 19, 102, 61, 222, 147, 8, 62, 239, 77, 190, 61, 57, 225, 132, 62, 162, 93, 66, 190, 136, 221, 44, 189, 181, 195, 54, 190, 163, 4, 39, 190, 31, 221, 120, 189, 211, 133, 145, 62, 85, 65, 52, 62, 108, 100, 190, 61, 160, 124, 223, 61, 50, 120, 132, 62, 63, 150, 57, 190, 166, 245, 164, 62, 180, 248, 52, 61, 249, 187, 30, 62, 236, 236, 83, 61, 188, 56, 51, 60, 89, 184, 170, 190, 155, 220, 207, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 73, 104, 62, 3, 215, 100, 190, 112, 151, 87, 62, 209, 147, 156, 62, 243, 174, 32, 190, 26, 1, 24, 189, 171, 174, 2, 191, 240, 135, 7, 191, 212, 223, 208, 190, 254, 255, 16, 189, 230, 14, 55, 61, 119, 125, 183, 62, 139, 174, 169, 62, 246, 205, 77, 190, 217, 242, 21, 191, 255, 94, 3, 63, 222, 58, 156, 189, 164, 50, 20, 61, 152, 83, 38, 63, 134, 115, 150, 62, 1, 138, 25, 191, 29, 34, 188, 190, 166, 250, 101, 190, 247, 116, 243, 62, 44, 7, 90, 63, 140, 117, 34, 62, 233, 84, 120, 189, 247, 91, 52, 190, 128, 201, 10, 62, 136, 170, 37, 62, 222, 186, 155, 62, 68, 197, 25, 63, 166, 146, 138, 190, 189, 198, 7, 190, 185, 32, 244, 61, 212, 71, 195, 61, 44, 29, 162, 190, 141, 59, 15, 62, 134, 153, 163, 61, 126, 4, 211, 62, 111, 131, 220, 190, 208, 187, 20, 190, 79, 227, 54, 63, 183, 172, 7, 63, 246, 15, 145, 62, 5, 157, 253, 189, 10, 27, 94, 62, 44, 52, 141, 190, 120, 171, 139, 189, 160, 240, 152, 189, 5, 132, 64, 62, 180, 178, 82, 190, 78, 114, 184, 62, 249, 205, 23, 190, 255, 125, 252, 189, 227, 24, 226, 189, 23, 141, 95, 63, 109, 84, 113, 190, 25, 124, 146, 61, 216, 77, 32, 190, 128, 195, 129, 189, 245, 226, 37, 60, 1, 218, 195, 62, 2, 102, 225, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 104, 35, 188, 59, 94, 37, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {231, 20, 183, 63, 130, 129, 7, 191, 144, 0, 139, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {8, 36, 216, 62, 136, 182, 25, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0001/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}