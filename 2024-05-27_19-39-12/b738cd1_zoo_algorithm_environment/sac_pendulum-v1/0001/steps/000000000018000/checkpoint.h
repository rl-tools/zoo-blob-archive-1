// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 225, 173, 60, 29, 227, 82, 190, 165, 64, 239, 62, 133, 172, 142, 62, 123, 85, 119, 191, 144, 232, 219, 190, 29, 184, 212, 62, 62, 161, 230, 189, 139, 116, 26, 191, 218, 228, 71, 191, 192, 90, 70, 191, 69, 116, 104, 190, 249, 14, 235, 190, 154, 246, 108, 62, 2, 157, 246, 190, 104, 62, 248, 190, 101, 167, 128, 190, 5, 112, 123, 62, 222, 150, 76, 59, 7, 24, 169, 191, 187, 127, 122, 190, 49, 86, 100, 190, 12, 252, 109, 63, 138, 173, 14, 190, 119, 6, 150, 190, 250, 57, 147, 63, 109, 33, 142, 62, 220, 18, 89, 62, 5, 170, 154, 63, 152, 129, 198, 62, 65, 82, 6, 63, 225, 49, 8, 191, 214, 65, 150, 190, 242, 240, 227, 190, 174, 189, 191, 191, 14, 207, 228, 60, 201, 76, 1, 63, 221, 40, 98, 63, 226, 234, 11, 63, 29, 169, 154, 61, 225, 44, 65, 191, 223, 86, 192, 190, 203, 247, 164, 62, 229, 203, 61, 62, 97, 48, 0, 191, 68, 92, 153, 191, 88, 205, 7, 63, 105, 209, 187, 60, 104, 104, 77, 63, 196, 210, 129, 191, 139, 199, 71, 190, 237, 78, 179, 190, 184, 75, 23, 191, 65, 69, 227, 62, 86, 254, 112, 189, 175, 117, 150, 191, 107, 195, 193, 62, 140, 74, 100, 191, 180, 142, 179, 62, 34, 70, 71, 62, 224, 158, 33, 189, 170, 224, 143, 191, 59, 235, 140, 190, 56, 171, 131, 190, 146, 146, 9, 63, 140, 197, 18, 190, 152, 142, 21, 62, 149, 38, 73, 63, 81, 246, 132, 61, 172, 32, 14, 191, 148, 25, 44, 190, 12, 254, 185, 62, 126, 220, 44, 63, 147, 89, 130, 63, 31, 110, 181, 62, 220, 139, 246, 62, 56, 143, 150, 190, 86, 209, 181, 190, 242, 75, 64, 190, 34, 90, 14, 191, 203, 50, 40, 191, 206, 153, 95, 63, 172, 67, 153, 63, 168, 156, 166, 62, 1, 143, 205, 189, 211, 75, 112, 63, 33, 132, 155, 62, 57, 122, 102, 62, 5, 7, 72, 191, 37, 165, 159, 190, 23, 141, 2, 62, 143, 151, 108, 63, 141, 187, 20, 63, 204, 253, 179, 189, 149, 73, 210, 62, 42, 47, 126, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 207, 148, 191, 166, 251, 7, 191, 158, 106, 81, 190, 66, 23, 184, 62, 89, 88, 232, 190, 251, 9, 26, 63, 156, 80, 242, 190, 228, 217, 182, 62, 45, 21, 20, 190, 39, 92, 42, 190, 156, 108, 243, 61, 26, 129, 243, 190, 203, 57, 54, 190, 79, 135, 62, 190, 87, 175, 21, 63, 231, 160, 61, 62, 248, 228, 240, 62, 1, 29, 193, 62, 185, 31, 201, 62, 60, 185, 191, 62, 31, 248, 166, 62, 158, 14, 135, 62, 125, 221, 240, 62, 45, 39, 106, 62, 184, 203, 172, 58, 108, 170, 221, 190, 71, 209, 87, 190, 50, 79, 224, 190, 7, 122, 205, 190, 114, 146, 87, 190, 160, 121, 225, 190, 77, 175, 9, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 218, 180, 62, 200, 150, 162, 61, 168, 135, 134, 189, 29, 136, 101, 190, 36, 44, 117, 62, 245, 218, 133, 61, 146, 126, 201, 190, 185, 225, 156, 62, 83, 180, 148, 62, 124, 106, 0, 62, 180, 12, 83, 61, 218, 96, 72, 191, 142, 181, 169, 62, 59, 55, 6, 57, 134, 241, 241, 61, 28, 223, 133, 62, 242, 242, 86, 62, 204, 195, 44, 190, 97, 175, 149, 190, 48, 106, 63, 62, 75, 21, 77, 59, 236, 19, 148, 62, 57, 107, 193, 62, 232, 240, 74, 190, 243, 3, 55, 62, 96, 114, 126, 189, 109, 181, 19, 62, 103, 234, 209, 190, 69, 29, 200, 62, 13, 71, 116, 189, 195, 255, 182, 62, 123, 17, 200, 186, 251, 49, 190, 62, 165, 50, 220, 190, 141, 147, 115, 190, 78, 51, 22, 62, 233, 207, 131, 62, 215, 166, 217, 189, 17, 5, 243, 61, 186, 63, 157, 62, 50, 124, 19, 191, 129, 31, 54, 61, 55, 113, 43, 188, 4, 84, 220, 62, 69, 182, 189, 58, 13, 65, 30, 61, 119, 58, 36, 62, 48, 229, 143, 190, 88, 47, 178, 61, 24, 137, 47, 62, 203, 84, 251, 61, 2, 9, 62, 187, 108, 42, 121, 190, 169, 59, 76, 62, 235, 30, 105, 189, 83, 73, 46, 189, 252, 169, 43, 61, 4, 31, 61, 190, 218, 117, 153, 61, 210, 38, 35, 62, 113, 34, 131, 61, 162, 165, 5, 191, 186, 146, 109, 190, 185, 19, 59, 61, 181, 57, 201, 190, 109, 155, 98, 62, 190, 69, 236, 189, 208, 121, 146, 190, 48, 159, 225, 61, 166, 193, 13, 62, 58, 38, 113, 191, 75, 66, 120, 61, 172, 112, 6, 63, 200, 138, 41, 190, 17, 186, 7, 188, 31, 28, 233, 190, 44, 190, 148, 190, 157, 68, 137, 190, 163, 253, 156, 189, 163, 96, 153, 62, 52, 240, 36, 62, 17, 81, 104, 62, 94, 237, 213, 61, 169, 190, 43, 62, 110, 6, 33, 60, 86, 51, 138, 61, 74, 100, 14, 62, 85, 67, 80, 60, 2, 72, 95, 190, 101, 50, 122, 61, 175, 48, 37, 190, 141, 8, 136, 191, 141, 196, 128, 189, 2, 226, 96, 189, 244, 236, 39, 62, 246, 56, 99, 189, 251, 166, 185, 189, 79, 255, 117, 62, 178, 153, 151, 61, 123, 32, 4, 62, 153, 56, 14, 190, 14, 131, 95, 62, 102, 9, 146, 61, 128, 159, 161, 188, 229, 96, 200, 190, 36, 140, 202, 190, 213, 225, 1, 190, 64, 0, 153, 62, 134, 44, 62, 190, 192, 215, 51, 62, 105, 33, 157, 61, 96, 70, 130, 189, 111, 245, 163, 61, 73, 65, 135, 62, 225, 50, 19, 63, 25, 173, 56, 62, 123, 152, 103, 61, 86, 8, 25, 190, 50, 158, 10, 191, 234, 78, 102, 61, 120, 8, 142, 190, 55, 95, 49, 61, 188, 23, 228, 61, 118, 189, 230, 191, 160, 124, 2, 191, 60, 29, 87, 60, 144, 234, 25, 191, 102, 24, 131, 61, 239, 134, 105, 61, 172, 96, 134, 190, 60, 75, 16, 190, 238, 25, 11, 62, 137, 247, 77, 61, 8, 42, 192, 188, 89, 64, 105, 62, 104, 251, 10, 189, 103, 216, 147, 190, 229, 190, 151, 189, 105, 57, 139, 62, 180, 198, 48, 190, 180, 193, 162, 61, 88, 4, 21, 60, 219, 201, 56, 62, 22, 205, 240, 60, 225, 107, 173, 62, 36, 36, 25, 62, 51, 249, 165, 189, 204, 27, 132, 190, 116, 52, 79, 190, 195, 40, 211, 60, 112, 187, 184, 62, 232, 27, 85, 189, 90, 177, 54, 62, 116, 233, 57, 190, 155, 245, 85, 62, 17, 32, 206, 59, 70, 130, 154, 190, 251, 15, 227, 189, 26, 237, 139, 190, 34, 174, 43, 62, 224, 1, 62, 188, 30, 218, 214, 189, 70, 49, 177, 188, 110, 242, 166, 189, 41, 97, 28, 189, 209, 170, 1, 61, 140, 178, 27, 189, 254, 66, 8, 59, 214, 23, 105, 189, 193, 207, 168, 189, 229, 38, 12, 190, 72, 206, 219, 189, 127, 47, 133, 188, 185, 51, 71, 61, 132, 75, 17, 189, 201, 248, 191, 189, 120, 162, 17, 60, 164, 26, 34, 190, 189, 251, 13, 190, 251, 157, 234, 189, 12, 189, 102, 61, 62, 40, 8, 189, 19, 227, 154, 189, 157, 199, 127, 189, 197, 100, 42, 62, 182, 159, 159, 61, 177, 60, 55, 61, 167, 221, 11, 190, 42, 244, 254, 187, 125, 45, 63, 61, 131, 14, 166, 189, 34, 89, 32, 190, 56, 201, 209, 189, 218, 231, 25, 191, 73, 225, 177, 62, 20, 80, 110, 190, 174, 158, 135, 189, 24, 18, 253, 61, 15, 95, 131, 190, 230, 98, 216, 62, 217, 239, 185, 190, 67, 132, 75, 61, 248, 122, 54, 61, 220, 196, 14, 63, 2, 235, 46, 62, 107, 190, 246, 189, 198, 120, 191, 189, 188, 80, 229, 190, 169, 103, 227, 188, 72, 226, 80, 61, 47, 88, 229, 61, 193, 13, 75, 190, 120, 34, 74, 191, 251, 9, 6, 62, 142, 204, 89, 62, 236, 94, 165, 188, 113, 204, 178, 61, 68, 245, 215, 62, 134, 240, 142, 190, 14, 226, 8, 63, 252, 53, 232, 190, 220, 13, 178, 190, 188, 27, 140, 189, 82, 184, 22, 190, 67, 244, 139, 62, 90, 64, 130, 191, 138, 153, 76, 190, 191, 109, 35, 62, 18, 63, 142, 61, 159, 235, 120, 189, 253, 131, 54, 61, 84, 70, 189, 62, 98, 36, 5, 191, 81, 247, 130, 190, 12, 10, 8, 58, 226, 6, 160, 62, 70, 92, 168, 190, 154, 114, 225, 189, 207, 156, 51, 62, 206, 12, 218, 61, 134, 15, 180, 190, 103, 245, 147, 61, 239, 31, 220, 190, 25, 125, 202, 189, 181, 41, 192, 60, 41, 52, 51, 62, 20, 5, 178, 188, 156, 78, 178, 61, 110, 201, 189, 190, 221, 11, 9, 191, 93, 45, 238, 62, 237, 143, 132, 60, 168, 158, 220, 190, 234, 116, 19, 191, 154, 68, 165, 190, 30, 150, 20, 187, 224, 92, 93, 191, 71, 182, 57, 190, 128, 23, 7, 190, 186, 68, 128, 61, 178, 127, 223, 59, 185, 226, 160, 62, 118, 71, 153, 62, 192, 79, 160, 62, 93, 109, 183, 190, 197, 98, 211, 189, 208, 210, 23, 62, 194, 83, 179, 189, 253, 159, 89, 62, 14, 129, 52, 62, 243, 39, 156, 62, 149, 203, 74, 62, 46, 155, 186, 62, 2, 129, 57, 62, 111, 17, 24, 190, 143, 129, 216, 189, 250, 33, 140, 61, 42, 149, 61, 62, 193, 43, 16, 62, 7, 115, 46, 62, 80, 144, 121, 62, 118, 95, 114, 190, 113, 75, 20, 62, 38, 20, 211, 61, 43, 207, 136, 190, 79, 94, 65, 61, 31, 204, 73, 191, 90, 52, 13, 62, 113, 203, 10, 189, 139, 94, 114, 61, 218, 223, 40, 189, 66, 177, 0, 190, 41, 114, 61, 189, 212, 236, 51, 61, 29, 103, 11, 190, 182, 74, 35, 62, 199, 63, 36, 190, 156, 95, 70, 190, 195, 99, 129, 61, 193, 41, 43, 190, 21, 240, 134, 61, 221, 233, 44, 62, 53, 3, 63, 190, 203, 76, 48, 188, 57, 236, 146, 189, 186, 82, 55, 190, 52, 220, 64, 190, 127, 151, 190, 189, 13, 186, 33, 62, 100, 103, 96, 189, 209, 238, 101, 61, 73, 245, 27, 190, 25, 35, 253, 189, 10, 232, 179, 189, 57, 190, 14, 190, 82, 3, 6, 62, 157, 84, 128, 61, 104, 43, 127, 61, 68, 60, 23, 62, 240, 220, 208, 59, 144, 204, 77, 61, 203, 120, 232, 59, 77, 129, 233, 61, 1, 225, 98, 190, 235, 92, 162, 190, 36, 185, 18, 188, 139, 61, 177, 189, 240, 215, 21, 191, 255, 76, 238, 61, 126, 206, 190, 190, 176, 183, 178, 62, 196, 147, 114, 190, 164, 232, 73, 191, 88, 82, 195, 190, 245, 52, 87, 189, 145, 121, 226, 188, 105, 103, 224, 62, 218, 183, 145, 61, 127, 37, 0, 63, 142, 81, 14, 61, 102, 0, 142, 62, 221, 220, 211, 190, 158, 66, 17, 62, 176, 246, 214, 189, 225, 105, 114, 191, 101, 194, 47, 62, 106, 162, 133, 190, 58, 29, 178, 191, 95, 240, 173, 61, 161, 20, 4, 62, 116, 219, 73, 62, 159, 12, 52, 62, 231, 98, 8, 191, 123, 252, 59, 61, 233, 220, 23, 189, 82, 60, 187, 189, 186, 1, 57, 62, 201, 90, 229, 187, 183, 214, 163, 189, 127, 180, 47, 62, 15, 173, 115, 190, 106, 53, 138, 62, 24, 167, 136, 190, 74, 58, 249, 62, 139, 167, 140, 189, 43, 30, 240, 61, 108, 147, 9, 62, 126, 212, 220, 189, 142, 134, 163, 190, 161, 115, 174, 190, 47, 8, 239, 61, 162, 224, 176, 62, 149, 251, 193, 61, 241, 193, 222, 61, 171, 144, 48, 62, 241, 69, 51, 191, 53, 34, 194, 189, 135, 221, 204, 189, 232, 245, 165, 62, 63, 167, 129, 190, 251, 104, 191, 190, 129, 22, 221, 189, 111, 246, 168, 190, 155, 171, 5, 190, 49, 77, 77, 190, 198, 92, 144, 62, 12, 159, 154, 62, 126, 21, 22, 191, 205, 134, 235, 60, 68, 206, 136, 61, 104, 174, 163, 191, 1, 153, 36, 61, 56, 253, 130, 189, 102, 172, 37, 191, 55, 54, 136, 62, 129, 97, 140, 190, 62, 234, 150, 190, 50, 173, 187, 190, 142, 110, 1, 190, 81, 86, 250, 190, 134, 39, 208, 61, 99, 87, 89, 62, 6, 8, 59, 62, 251, 169, 22, 189, 19, 176, 12, 189, 210, 93, 245, 189, 62, 101, 174, 189, 166, 113, 32, 62, 29, 65, 9, 190, 159, 31, 3, 63, 131, 20, 23, 190, 255, 151, 176, 190, 118, 90, 155, 189, 235, 215, 185, 61, 49, 242, 5, 190, 180, 161, 21, 190, 237, 179, 13, 191, 40, 8, 69, 190, 107, 59, 50, 190, 44, 197, 133, 62, 59, 84, 138, 62, 248, 165, 144, 61, 203, 253, 36, 62, 156, 197, 8, 62, 116, 40, 14, 60, 147, 247, 227, 188, 90, 103, 72, 62, 0, 135, 154, 61, 52, 164, 23, 62, 156, 171, 150, 60, 148, 113, 41, 62, 74, 80, 146, 62, 206, 130, 205, 61, 132, 9, 73, 62, 131, 77, 233, 189, 47, 247, 137, 61, 96, 145, 66, 61, 34, 240, 227, 189, 187, 67, 40, 62, 186, 175, 9, 189, 138, 142, 119, 62, 179, 177, 179, 190, 33, 110, 129, 62, 46, 66, 55, 62, 136, 236, 50, 190, 31, 3, 84, 189, 1, 89, 126, 190, 41, 232, 212, 189, 67, 157, 117, 62, 14, 131, 0, 191, 162, 226, 215, 190, 250, 69, 107, 62, 63, 225, 136, 62, 225, 48, 13, 190, 42, 145, 199, 62, 68, 60, 151, 62, 167, 155, 13, 191, 48, 197, 71, 189, 210, 37, 170, 188, 170, 102, 58, 62, 106, 11, 128, 62, 2, 206, 48, 190, 131, 100, 227, 188, 196, 110, 203, 188, 46, 114, 80, 188, 220, 228, 69, 189, 164, 108, 125, 189, 119, 139, 156, 190, 117, 136, 133, 190, 97, 158, 187, 62, 91, 106, 54, 60, 52, 110, 174, 189, 233, 16, 172, 62, 207, 94, 230, 190, 65, 69, 138, 62, 75, 96, 8, 63, 84, 182, 199, 187, 40, 103, 186, 190, 76, 163, 40, 61, 209, 216, 12, 62, 240, 241, 249, 189, 89, 210, 2, 191, 230, 74, 44, 60, 2, 220, 225, 190, 244, 54, 116, 190, 79, 223, 32, 62, 36, 52, 16, 191, 52, 66, 129, 190, 230, 154, 127, 191, 60, 207, 153, 191, 195, 219, 223, 62, 78, 187, 7, 63, 147, 59, 17, 189, 94, 137, 86, 190, 68, 9, 38, 62, 173, 113, 145, 190, 199, 7, 238, 62, 196, 105, 167, 188, 187, 195, 193, 62, 252, 26, 65, 62, 4, 249, 198, 62, 14, 156, 239, 189, 73, 6, 100, 189, 179, 180, 44, 190, 134, 48, 186, 189, 60, 99, 246, 61, 38, 207, 249, 189, 131, 226, 54, 191, 3, 28, 144, 190, 97, 19, 17, 190, 190, 60, 173, 190, 127, 60, 222, 189, 222, 203, 36, 190, 94, 8, 29, 190, 201, 48, 56, 61, 70, 163, 69, 190, 198, 250, 171, 189, 244, 148, 20, 188, 153, 184, 81, 189, 231, 118, 58, 190, 113, 8, 40, 189, 161, 213, 100, 189, 78, 169, 85, 61, 34, 5, 5, 190, 163, 68, 158, 189, 226, 58, 186, 61, 125, 115, 79, 189, 17, 109, 188, 61, 158, 161, 20, 190, 218, 124, 111, 189, 134, 242, 33, 190, 138, 110, 64, 189, 140, 163, 74, 186, 82, 40, 82, 189, 164, 15, 250, 189, 25, 251, 231, 189, 210, 39, 254, 61, 7, 8, 203, 61, 231, 161, 198, 61, 102, 178, 48, 190, 170, 87, 107, 61, 69, 100, 209, 61, 5, 218, 214, 189, 50, 142, 151, 188, 193, 94, 46, 62, 68, 71, 128, 189, 163, 185, 35, 62, 126, 90, 254, 189, 82, 175, 134, 60, 119, 67, 30, 190, 208, 253, 20, 189, 60, 64, 112, 189, 248, 240, 220, 189, 2, 187, 17, 190, 100, 172, 201, 189, 243, 152, 109, 189, 94, 125, 49, 62, 32, 48, 1, 190, 166, 80, 233, 189, 139, 134, 10, 62, 159, 13, 143, 189, 76, 95, 51, 190, 147, 231, 87, 188, 249, 24, 30, 190, 20, 165, 15, 190, 47, 11, 37, 190, 24, 154, 76, 61, 48, 162, 27, 190, 247, 27, 97, 187, 31, 211, 206, 189, 25, 143, 192, 61, 166, 125, 15, 190, 218, 82, 221, 189, 38, 34, 201, 189, 236, 34, 6, 62, 231, 57, 127, 60, 84, 152, 66, 190, 104, 210, 155, 190, 54, 158, 238, 60, 163, 38, 113, 61, 254, 105, 156, 62, 233, 116, 22, 190, 145, 29, 142, 190, 38, 11, 186, 62, 254, 221, 212, 62, 110, 123, 9, 191, 198, 21, 42, 191, 204, 11, 23, 191, 151, 171, 7, 191, 186, 38, 129, 191, 110, 136, 166, 188, 58, 221, 199, 62, 123, 111, 46, 191, 43, 75, 16, 191, 229, 109, 43, 191, 77, 255, 189, 61, 20, 108, 184, 189, 36, 71, 141, 62, 211, 212, 161, 62, 1, 239, 26, 191, 132, 163, 31, 62, 135, 26, 238, 190, 119, 185, 247, 190, 220, 253, 35, 63, 76, 152, 101, 191, 135, 247, 149, 190, 149, 221, 5, 191, 227, 153, 172, 60, 181, 35, 235, 190, 195, 76, 228, 189, 146, 251, 138, 61, 218, 30, 135, 190, 65, 53, 144, 61, 220, 100, 188, 61, 1, 157, 131, 190, 21, 97, 204, 60, 66, 236, 141, 62, 79, 255, 224, 190, 221, 246, 133, 61, 128, 133, 93, 62, 72, 158, 225, 189, 221, 183, 142, 189, 95, 122, 19, 190, 152, 219, 147, 59, 226, 93, 153, 62, 234, 230, 140, 61, 200, 253, 206, 60, 190, 105, 193, 62, 39, 151, 7, 62, 44, 212, 78, 62, 182, 18, 161, 62, 253, 96, 196, 61, 168, 53, 145, 189, 223, 135, 183, 189, 5, 173, 91, 190, 133, 236, 161, 191, 224, 9, 1, 62, 160, 196, 107, 61, 23, 218, 114, 59, 184, 198, 255, 61, 223, 10, 144, 189, 10, 170, 88, 191, 42, 57, 215, 190, 173, 121, 49, 188, 125, 164, 217, 61, 130, 253, 186, 60, 15, 162, 162, 62, 64, 38, 42, 188, 52, 107, 16, 190, 110, 32, 230, 190, 174, 240, 232, 59, 45, 161, 26, 63, 196, 15, 74, 191, 163, 33, 145, 61, 105, 221, 207, 59, 98, 116, 198, 189, 70, 233, 136, 190, 155, 243, 175, 62, 59, 183, 9, 62, 206, 172, 129, 190, 197, 202, 114, 62, 140, 196, 127, 61, 13, 178, 45, 191, 137, 208, 159, 62, 233, 103, 160, 191, 188, 133, 113, 189, 4, 149, 52, 190, 208, 224, 159, 189, 117, 234, 43, 191, 88, 155, 246, 190, 194, 108, 119, 191, 190, 30, 230, 188, 117, 133, 245, 62, 142, 38, 78, 191, 247, 251, 4, 190, 82, 209, 141, 62, 242, 130, 28, 62, 158, 207, 88, 190, 30, 138, 212, 190, 101, 182, 149, 62, 174, 232, 7, 191, 187, 11, 3, 189, 196, 250, 225, 188, 111, 147, 245, 62, 76, 89, 139, 62, 198, 64, 142, 62, 88, 183, 44, 62, 97, 114, 14, 190, 120, 81, 245, 61, 40, 48, 194, 189, 174, 144, 200, 189, 71, 150, 183, 190, 245, 87, 209, 190, 100, 249, 179, 62, 125, 151, 5, 189, 121, 145, 78, 189, 178, 81, 129, 62, 178, 36, 146, 190, 62, 87, 42, 62, 116, 150, 25, 62, 193, 18, 175, 189, 49, 236, 184, 190, 99, 175, 139, 189, 117, 162, 0, 61, 120, 26, 140, 190, 115, 229, 244, 188, 210, 93, 150, 61, 70, 188, 19, 62, 243, 180, 133, 62, 5, 18, 150, 190, 8, 237, 175, 62, 249, 190, 9, 62, 87, 152, 147, 187, 253, 103, 73, 62, 235, 156, 114, 189, 183, 174, 216, 61, 247, 233, 39, 62, 203, 173, 228, 60, 149, 207, 129, 62, 57, 192, 252, 61, 56, 140, 63, 188, 33, 81, 9, 191, 39, 86, 243, 190, 205, 34, 11, 62, 76, 56, 158, 190, 217, 216, 20, 62, 110, 69, 218, 189, 29, 200, 143, 59, 58, 162, 20, 62, 116, 208, 43, 190, 98, 187, 176, 187, 232, 5, 100, 62, 89, 84, 218, 186, 175, 5, 140, 190, 17, 228, 203, 61, 30, 94, 31, 189, 181, 227, 198, 189, 171, 47, 80, 61, 238, 249, 179, 61, 198, 138, 170, 190, 251, 153, 69, 191, 68, 118, 46, 62, 202, 211, 218, 190, 53, 210, 224, 190, 62, 98, 139, 62, 8, 26, 65, 190, 87, 35, 150, 62, 129, 77, 44, 190, 157, 214, 240, 188, 29, 155, 113, 191, 222, 17, 97, 190, 11, 194, 58, 189, 97, 140, 123, 62, 232, 166, 109, 60, 44, 224, 52, 61, 108, 121, 219, 61, 197, 164, 88, 62, 48, 18, 234, 190, 53, 32, 145, 188, 154, 115, 95, 62, 241, 191, 91, 61, 68, 21, 146, 190, 156, 29, 104, 190, 114, 56, 107, 190, 72, 23, 72, 62, 242, 253, 59, 62, 78, 215, 104, 60, 195, 22, 167, 189, 75, 147, 250, 60, 214, 151, 147, 61, 246, 9, 187, 190, 110, 29, 125, 190, 191, 65, 118, 62, 26, 181, 225, 190, 202, 104, 50, 187, 251, 89, 247, 61, 186, 72, 14, 191, 113, 223, 4, 62, 204, 11, 212, 189, 59, 219, 248, 189, 83, 93, 233, 61, 250, 68, 151, 62, 214, 54, 19, 62, 166, 140, 239, 190, 89, 31, 161, 187, 214, 89, 161, 190, 101, 123, 73, 190, 165, 11, 9, 191, 7, 233, 154, 190, 156, 220, 83, 62, 176, 17, 149, 62, 251, 219, 59, 190, 34, 148, 126, 62, 65, 74, 199, 190, 187, 231, 68, 61, 104, 38, 20, 63, 163, 89, 187, 190, 209, 85, 250, 190, 3, 83, 93, 190, 170, 235, 176, 189, 150, 201, 108, 187, 42, 169, 250, 190, 160, 90, 204, 189, 187, 226, 4, 190, 167, 76, 160, 190, 53, 199, 82, 62, 200, 253, 180, 61, 210, 153, 19, 189, 163, 73, 226, 61, 225, 241, 246, 190, 190, 204, 18, 190, 20, 68, 194, 62, 13, 248, 129, 188, 123, 179, 90, 190, 188, 205, 73, 62, 206, 159, 144, 62, 220, 20, 163, 62, 252, 20, 223, 189, 208, 17, 73, 61, 86, 216, 141, 62, 11, 144, 66, 62, 38, 197, 124, 61, 41, 223, 4, 62, 188, 238, 47, 189, 60, 22, 141, 189, 109, 148, 248, 190, 145, 102, 245, 188, 182, 167, 139, 191, 224, 17, 96, 189, 117, 210, 35, 190, 141, 82, 38, 189, 109, 20, 12, 62, 255, 70, 1, 189, 62, 140, 68, 61, 82, 106, 50, 190, 232, 90, 60, 61, 173, 107, 192, 60, 47, 132, 219, 61, 170, 168, 206, 185, 172, 93, 58, 190, 43, 91, 61, 190, 146, 143, 173, 60, 240, 124, 80, 61, 113, 232, 186, 189, 182, 71, 96, 189, 116, 164, 109, 61, 178, 190, 78, 190, 94, 232, 254, 189, 182, 223, 192, 189, 1, 6, 9, 61, 195, 190, 135, 189, 230, 165, 246, 189, 174, 222, 158, 188, 138, 96, 42, 190, 222, 65, 57, 190, 15, 250, 155, 57, 101, 73, 3, 190, 62, 235, 74, 61, 233, 160, 8, 60, 140, 248, 111, 189, 194, 3, 197, 189, 114, 40, 135, 190, 126, 110, 58, 189, 140, 149, 175, 189, 249, 119, 201, 189, 208, 110, 181, 190, 200, 38, 219, 188, 55, 51, 188, 61, 113, 173, 17, 62, 182, 130, 134, 190, 138, 46, 136, 61, 20, 7, 210, 189, 131, 100, 10, 190, 242, 40, 126, 62, 250, 46, 7, 62, 122, 125, 43, 190, 208, 31, 60, 61, 32, 1, 254, 61, 191, 85, 113, 62, 186, 20, 5, 190, 157, 42, 26, 190, 222, 200, 218, 190, 138, 188, 50, 190, 165, 48, 205, 190, 219, 214, 166, 189, 120, 79, 4, 62, 1, 3, 30, 188, 215, 28, 224, 190, 98, 201, 172, 62, 170, 129, 156, 190, 109, 233, 102, 62, 133, 26, 182, 61, 227, 1, 187, 188, 206, 31, 140, 189, 21, 163, 119, 190, 160, 163, 23, 62, 240, 71, 58, 189, 92, 229, 47, 190, 99, 137, 126, 60, 22, 25, 74, 190, 195, 15, 133, 61, 83, 190, 225, 189, 233, 29, 30, 190, 196, 145, 3, 190, 243, 0, 210, 189, 222, 155, 0, 61, 82, 111, 51, 190, 92, 211, 174, 189, 202, 123, 74, 190, 203, 72, 46, 190, 36, 36, 50, 190, 80, 87, 145, 61, 187, 77, 205, 189, 34, 135, 118, 188, 7, 250, 135, 61, 200, 62, 70, 61, 198, 224, 38, 61, 66, 179, 61, 189, 188, 156, 240, 189, 90, 23, 77, 189, 196, 45, 182, 189, 165, 74, 13, 189, 218, 76, 30, 188, 72, 114, 36, 190, 195, 30, 253, 189, 204, 104, 49, 189, 175, 51, 141, 61, 206, 204, 171, 60, 95, 38, 24, 190, 17, 86, 210, 189, 1, 95, 138, 60, 253, 52, 208, 189, 120, 184, 8, 62, 209, 234, 131, 62, 150, 183, 224, 189, 143, 80, 176, 61, 128, 77, 67, 62, 153, 247, 200, 61, 198, 59, 188, 190, 163, 222, 97, 62, 99, 166, 145, 62, 11, 134, 11, 61, 174, 127, 213, 61, 51, 173, 45, 62, 191, 50, 65, 61, 90, 35, 202, 187, 68, 83, 6, 62, 195, 220, 81, 62, 242, 170, 209, 189, 215, 33, 11, 59, 82, 186, 5, 62, 184, 141, 102, 189, 220, 73, 20, 188, 215, 114, 2, 190, 52, 131, 86, 62, 102, 40, 141, 191, 83, 77, 217, 190, 128, 152, 226, 61, 239, 131, 237, 190, 233, 115, 2, 62, 172, 243, 182, 190, 240, 241, 153, 62, 166, 9, 72, 62, 175, 71, 118, 190, 8, 223, 156, 59, 24, 130, 163, 188, 20, 212, 227, 190, 10, 224, 213, 187, 159, 228, 132, 187, 87, 111, 208, 62, 48, 77, 113, 61, 59, 9, 54, 191, 59, 195, 147, 62, 189, 237, 43, 62, 170, 133, 139, 189, 149, 249, 112, 191, 179, 0, 136, 189, 80, 36, 131, 190, 170, 148, 156, 190, 136, 53, 22, 191, 146, 123, 51, 190, 52, 160, 211, 60, 106, 86, 250, 188, 37, 197, 149, 190, 111, 170, 1, 62, 175, 199, 132, 62, 71, 178, 222, 61, 97, 148, 73, 62, 151, 157, 194, 61, 128, 13, 59, 62, 3, 66, 71, 62, 231, 42, 103, 188, 247, 225, 4, 190, 177, 155, 129, 62, 11, 43, 174, 62, 74, 120, 37, 184, 199, 181, 184, 61, 111, 83, 138, 61, 154, 182, 122, 191, 113, 178, 15, 189, 155, 212, 139, 62, 206, 136, 210, 191, 93, 231, 25, 63, 41, 91, 139, 191, 70, 14, 157, 190, 237, 247, 75, 190, 8, 104, 134, 187, 126, 96, 183, 61, 73, 68, 89, 62, 152, 14, 201, 59, 181, 33, 31, 190, 156, 188, 127, 61, 168, 206, 166, 189, 208, 247, 47, 62, 10, 156, 250, 61, 249, 190, 47, 191, 34, 133, 246, 189, 76, 164, 251, 62, 206, 11, 139, 190, 253, 253, 166, 190, 205, 39, 227, 190, 25, 141, 142, 62, 44, 114, 123, 190, 214, 57, 176, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {89, 93, 37, 61, 93, 25, 94, 62, 200, 147, 114, 61, 193, 127, 25, 190, 52, 84, 73, 62, 222, 25, 166, 59, 46, 114, 64, 189, 119, 24, 64, 189, 43, 112, 7, 63, 244, 64, 168, 189, 110, 165, 19, 62, 200, 224, 183, 61, 32, 219, 116, 61, 13, 134, 166, 62, 156, 158, 73, 188, 29, 217, 36, 189, 181, 195, 54, 190, 163, 4, 39, 190, 124, 95, 191, 189, 224, 226, 151, 62, 229, 118, 37, 62, 254, 223, 233, 61, 64, 161, 138, 61, 81, 2, 128, 62, 210, 24, 48, 190, 60, 48, 191, 62, 180, 248, 52, 61, 123, 63, 1, 62, 99, 78, 220, 60, 98, 108, 90, 61, 83, 107, 213, 190, 198, 186, 177, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 204, 127, 62, 124, 254, 90, 190, 151, 34, 17, 63, 16, 31, 206, 62, 239, 38, 53, 190, 26, 1, 24, 189, 36, 83, 40, 191, 11, 129, 32, 191, 201, 232, 228, 190, 254, 255, 16, 189, 138, 87, 232, 189, 246, 85, 167, 62, 121, 24, 212, 62, 237, 23, 91, 190, 234, 119, 191, 190, 181, 115, 31, 63, 222, 58, 156, 189, 164, 50, 20, 61, 2, 222, 107, 63, 107, 181, 227, 62, 57, 133, 128, 191, 123, 243, 189, 190, 78, 28, 71, 190, 37, 108, 184, 62, 148, 123, 149, 62, 91, 232, 175, 62, 233, 84, 120, 189, 13, 44, 180, 189, 109, 104, 8, 62, 135, 222, 118, 62, 41, 129, 92, 63, 104, 58, 24, 63, 31, 142, 187, 189, 124, 170, 144, 190, 145, 55, 154, 62, 140, 180, 232, 61, 126, 214, 102, 190, 141, 59, 15, 62, 184, 80, 156, 189, 128, 54, 234, 62, 222, 238, 175, 190, 208, 187, 20, 190, 0, 27, 151, 63, 39, 43, 236, 62, 102, 211, 114, 62, 208, 40, 198, 189, 156, 180, 166, 62, 128, 135, 215, 190, 120, 171, 139, 189, 160, 240, 152, 189, 243, 220, 135, 61, 190, 197, 41, 190, 54, 22, 194, 62, 0, 88, 175, 190, 167, 81, 26, 190, 160, 125, 32, 190, 76, 116, 135, 63, 197, 231, 1, 191, 25, 124, 146, 61, 17, 55, 50, 190, 170, 14, 124, 189, 130, 180, 30, 189, 232, 146, 169, 61, 0, 212, 84, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 196, 130, 189, 210, 140, 18, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {29, 24, 161, 188, 126, 89, 233, 62, 193, 114, 10, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {73, 183, 35, 63, 150, 182, 169, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0001/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}