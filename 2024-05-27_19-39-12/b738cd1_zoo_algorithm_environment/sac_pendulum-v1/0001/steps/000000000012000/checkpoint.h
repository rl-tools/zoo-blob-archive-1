// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {126, 219, 126, 60, 46, 108, 107, 190, 103, 180, 232, 62, 127, 94, 148, 62, 253, 55, 130, 191, 225, 52, 203, 190, 176, 31, 236, 62, 234, 205, 69, 188, 177, 186, 35, 191, 179, 116, 60, 191, 112, 189, 46, 191, 73, 35, 133, 190, 183, 184, 254, 190, 2, 171, 102, 62, 96, 6, 28, 191, 239, 194, 250, 190, 84, 1, 114, 190, 16, 110, 157, 62, 184, 18, 102, 190, 190, 191, 170, 191, 88, 158, 116, 190, 39, 218, 16, 190, 77, 29, 67, 63, 124, 139, 14, 190, 17, 245, 163, 190, 248, 21, 107, 63, 99, 103, 90, 62, 121, 224, 14, 62, 11, 76, 148, 63, 102, 78, 189, 62, 220, 200, 14, 63, 207, 160, 252, 190, 210, 131, 54, 190, 188, 64, 246, 190, 240, 187, 169, 191, 151, 74, 152, 61, 22, 36, 9, 63, 112, 20, 51, 63, 136, 52, 17, 63, 79, 17, 200, 189, 80, 244, 27, 191, 30, 211, 235, 190, 80, 208, 189, 62, 41, 80, 29, 62, 58, 126, 2, 191, 225, 66, 132, 191, 35, 147, 242, 62, 179, 4, 240, 59, 15, 158, 84, 63, 125, 73, 107, 191, 166, 247, 88, 190, 171, 206, 193, 190, 97, 169, 248, 190, 182, 203, 0, 63, 118, 12, 201, 188, 31, 21, 140, 191, 71, 94, 185, 62, 171, 48, 110, 191, 71, 134, 153, 62, 26, 240, 69, 62, 226, 81, 31, 189, 188, 219, 125, 191, 135, 93, 114, 190, 216, 196, 139, 190, 12, 177, 177, 62, 129, 193, 111, 190, 26, 54, 151, 62, 209, 85, 34, 63, 41, 207, 242, 187, 198, 210, 18, 191, 32, 174, 230, 189, 81, 202, 224, 62, 86, 70, 53, 63, 139, 0, 104, 63, 190, 155, 161, 62, 201, 23, 250, 62, 249, 249, 81, 190, 72, 29, 199, 190, 251, 145, 159, 190, 48, 17, 213, 190, 94, 118, 60, 191, 223, 79, 92, 63, 105, 126, 135, 63, 137, 126, 177, 62, 58, 176, 135, 190, 133, 26, 34, 63, 158, 158, 198, 62, 187, 16, 44, 62, 172, 228, 44, 191, 141, 205, 164, 190, 242, 113, 150, 60, 168, 228, 91, 63, 18, 108, 23, 63, 204, 253, 179, 189, 149, 73, 210, 62, 42, 47, 126, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {72, 89, 154, 191, 56, 228, 245, 190, 161, 4, 34, 190, 43, 72, 223, 62, 249, 13, 146, 190, 45, 127, 25, 63, 165, 91, 134, 190, 11, 11, 208, 62, 156, 191, 8, 190, 66, 7, 15, 190, 69, 68, 24, 62, 106, 14, 114, 190, 240, 244, 17, 190, 97, 52, 143, 190, 177, 216, 33, 63, 204, 233, 69, 62, 114, 208, 243, 62, 19, 164, 193, 62, 156, 171, 209, 62, 67, 1, 183, 62, 14, 62, 171, 62, 213, 185, 123, 62, 141, 5, 40, 63, 71, 195, 148, 62, 86, 187, 14, 61, 119, 254, 205, 190, 226, 2, 76, 190, 133, 116, 231, 190, 28, 105, 128, 190, 157, 124, 112, 190, 141, 209, 171, 190, 77, 175, 9, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 138, 21, 62, 228, 242, 201, 60, 89, 137, 118, 189, 176, 55, 169, 190, 139, 251, 55, 62, 94, 90, 228, 61, 56, 144, 1, 191, 240, 106, 184, 62, 76, 124, 13, 62, 226, 246, 130, 60, 193, 23, 152, 61, 187, 119, 9, 191, 7, 84, 148, 62, 128, 94, 137, 189, 198, 23, 235, 61, 105, 246, 103, 62, 195, 210, 114, 62, 152, 208, 27, 190, 79, 36, 142, 190, 88, 178, 54, 62, 64, 92, 19, 189, 191, 48, 143, 62, 210, 107, 210, 62, 129, 217, 79, 190, 22, 20, 61, 62, 27, 170, 40, 189, 94, 133, 162, 61, 96, 26, 230, 190, 39, 183, 143, 62, 70, 122, 213, 189, 93, 64, 132, 62, 123, 17, 200, 186, 199, 176, 224, 62, 162, 232, 214, 190, 18, 179, 133, 190, 87, 229, 7, 62, 184, 134, 131, 62, 44, 152, 247, 189, 118, 224, 27, 62, 94, 243, 121, 62, 130, 101, 185, 190, 63, 88, 251, 61, 9, 99, 187, 188, 95, 31, 150, 62, 178, 232, 0, 61, 34, 151, 99, 61, 216, 47, 20, 62, 65, 51, 78, 190, 97, 194, 158, 61, 171, 70, 39, 62, 182, 81, 201, 61, 70, 36, 156, 61, 8, 150, 91, 190, 12, 164, 48, 62, 147, 170, 161, 189, 113, 157, 148, 188, 102, 191, 77, 61, 101, 172, 106, 190, 100, 250, 176, 61, 124, 96, 46, 62, 144, 91, 46, 62, 12, 186, 0, 191, 231, 251, 46, 190, 185, 19, 59, 61, 130, 134, 208, 190, 143, 20, 146, 62, 130, 116, 146, 189, 202, 164, 6, 190, 95, 134, 159, 59, 110, 32, 43, 62, 230, 50, 219, 190, 112, 156, 226, 61, 1, 149, 237, 62, 42, 172, 225, 189, 80, 216, 166, 60, 123, 117, 188, 190, 195, 255, 144, 190, 42, 213, 87, 190, 15, 246, 126, 189, 64, 22, 49, 62, 195, 97, 42, 62, 74, 127, 105, 62, 233, 116, 216, 61, 132, 188, 104, 62, 87, 16, 80, 59, 220, 95, 143, 188, 114, 191, 35, 62, 33, 52, 9, 61, 42, 211, 65, 190, 107, 8, 65, 62, 35, 221, 120, 190, 14, 200, 114, 191, 27, 187, 217, 187, 22, 113, 156, 61, 51, 211, 89, 62, 246, 56, 99, 189, 85, 209, 148, 189, 227, 228, 166, 62, 250, 33, 13, 62, 17, 202, 31, 62, 138, 246, 234, 189, 22, 194, 42, 62, 106, 196, 85, 62, 67, 113, 218, 188, 115, 77, 5, 191, 67, 73, 130, 190, 26, 144, 200, 60, 236, 156, 145, 62, 128, 119, 88, 190, 96, 69, 97, 62, 75, 165, 30, 62, 149, 130, 23, 190, 142, 129, 64, 62, 203, 40, 100, 62, 131, 175, 8, 63, 81, 135, 45, 62, 128, 137, 210, 61, 98, 75, 32, 190, 250, 225, 229, 190, 98, 203, 32, 60, 54, 25, 92, 190, 5, 119, 3, 62, 74, 87, 9, 62, 138, 168, 172, 191, 157, 244, 244, 190, 212, 252, 235, 61, 97, 41, 19, 191, 102, 24, 131, 61, 228, 58, 209, 189, 74, 147, 165, 190, 239, 159, 25, 190, 194, 85, 3, 62, 125, 109, 79, 61, 99, 223, 133, 187, 16, 27, 237, 61, 106, 210, 172, 188, 108, 127, 92, 189, 55, 184, 20, 190, 104, 198, 138, 62, 229, 46, 35, 190, 57, 126, 97, 61, 180, 94, 107, 188, 139, 72, 62, 62, 238, 248, 1, 62, 235, 208, 174, 62, 57, 169, 40, 62, 8, 175, 105, 189, 13, 124, 175, 189, 172, 201, 62, 190, 35, 153, 35, 61, 244, 88, 181, 62, 249, 155, 173, 59, 92, 57, 39, 62, 51, 11, 109, 190, 192, 220, 89, 62, 64, 91, 107, 189, 129, 114, 133, 190, 41, 31, 22, 190, 131, 190, 167, 190, 34, 174, 43, 62, 224, 1, 62, 188, 30, 218, 214, 189, 70, 49, 177, 188, 110, 242, 166, 189, 41, 97, 28, 189, 209, 170, 1, 61, 140, 178, 27, 189, 254, 66, 8, 59, 214, 23, 105, 189, 193, 207, 168, 189, 229, 38, 12, 190, 72, 206, 219, 189, 127, 47, 133, 188, 185, 51, 71, 61, 132, 75, 17, 189, 201, 248, 191, 189, 120, 162, 17, 60, 164, 26, 34, 190, 189, 251, 13, 190, 251, 157, 234, 189, 12, 189, 102, 61, 62, 40, 8, 189, 19, 227, 154, 189, 157, 199, 127, 189, 197, 100, 42, 62, 182, 159, 159, 61, 177, 60, 55, 61, 167, 221, 11, 190, 42, 244, 254, 187, 125, 45, 63, 61, 131, 14, 166, 189, 34, 89, 32, 190, 4, 16, 222, 60, 95, 194, 0, 191, 144, 235, 196, 62, 217, 31, 129, 190, 159, 41, 155, 60, 126, 25, 209, 61, 122, 151, 240, 190, 38, 59, 182, 62, 66, 70, 77, 190, 17, 235, 215, 61, 246, 178, 128, 61, 245, 86, 246, 62, 192, 178, 82, 62, 234, 201, 71, 189, 74, 158, 138, 189, 75, 203, 246, 190, 230, 188, 42, 188, 198, 197, 100, 61, 149, 66, 8, 62, 180, 36, 100, 190, 87, 204, 51, 191, 194, 103, 13, 62, 207, 227, 80, 62, 151, 55, 44, 188, 132, 8, 180, 61, 108, 128, 227, 62, 153, 102, 68, 190, 54, 253, 8, 63, 199, 131, 194, 190, 61, 253, 90, 190, 202, 233, 228, 187, 82, 184, 22, 190, 67, 244, 139, 62, 83, 82, 116, 191, 78, 124, 99, 190, 121, 201, 1, 62, 41, 194, 137, 61, 241, 0, 148, 189, 99, 114, 78, 62, 68, 135, 187, 62, 228, 129, 57, 190, 73, 125, 183, 60, 110, 63, 98, 189, 207, 182, 232, 61, 192, 109, 133, 190, 69, 130, 247, 189, 4, 116, 34, 62, 180, 5, 1, 62, 162, 224, 192, 190, 67, 147, 156, 61, 58, 179, 234, 190, 17, 1, 224, 60, 24, 204, 141, 60, 150, 215, 59, 62, 253, 86, 83, 189, 179, 0, 222, 61, 172, 94, 22, 191, 11, 64, 12, 191, 60, 107, 234, 62, 128, 12, 162, 190, 198, 90, 168, 190, 171, 110, 10, 191, 135, 154, 151, 190, 30, 150, 20, 187, 80, 86, 119, 191, 119, 57, 130, 190, 108, 231, 34, 190, 102, 85, 62, 61, 204, 127, 207, 59, 85, 161, 159, 62, 134, 138, 54, 62, 51, 40, 171, 62, 195, 237, 243, 189, 57, 3, 227, 189, 197, 201, 7, 62, 97, 178, 103, 189, 131, 180, 104, 62, 235, 42, 22, 62, 111, 155, 153, 62, 164, 99, 104, 62, 238, 7, 182, 62, 147, 76, 50, 62, 99, 68, 10, 190, 113, 7, 57, 189, 64, 162, 167, 61, 214, 207, 71, 62, 199, 187, 11, 62, 98, 208, 61, 62, 202, 146, 124, 62, 46, 23, 156, 190, 58, 26, 21, 62, 51, 77, 161, 61, 205, 75, 133, 190, 115, 125, 184, 187, 158, 1, 73, 191, 90, 52, 13, 62, 113, 203, 10, 189, 139, 94, 114, 61, 218, 223, 40, 189, 66, 177, 0, 190, 41, 114, 61, 189, 212, 236, 51, 61, 29, 103, 11, 190, 182, 74, 35, 62, 199, 63, 36, 190, 156, 95, 70, 190, 195, 99, 129, 61, 193, 41, 43, 190, 21, 240, 134, 61, 221, 233, 44, 62, 53, 3, 63, 190, 203, 76, 48, 188, 57, 236, 146, 189, 186, 82, 55, 190, 52, 220, 64, 190, 127, 151, 190, 189, 13, 186, 33, 62, 100, 103, 96, 189, 209, 238, 101, 61, 73, 245, 27, 190, 25, 35, 253, 189, 10, 232, 179, 189, 57, 190, 14, 190, 82, 3, 6, 62, 157, 84, 128, 61, 104, 43, 127, 61, 68, 60, 23, 62, 240, 220, 208, 59, 125, 81, 172, 61, 192, 254, 182, 61, 105, 46, 147, 61, 56, 170, 49, 190, 119, 50, 154, 190, 205, 125, 205, 188, 217, 184, 239, 188, 30, 212, 210, 190, 247, 39, 34, 189, 174, 197, 171, 190, 178, 8, 138, 62, 246, 242, 89, 190, 183, 217, 49, 191, 36, 201, 155, 190, 87, 230, 231, 189, 178, 243, 138, 190, 168, 162, 185, 62, 162, 115, 143, 61, 228, 191, 229, 62, 75, 212, 19, 189, 217, 188, 110, 62, 100, 18, 166, 190, 11, 251, 133, 61, 186, 126, 232, 189, 22, 229, 110, 191, 133, 82, 11, 62, 137, 210, 62, 190, 59, 240, 160, 191, 168, 29, 236, 61, 20, 203, 218, 61, 103, 140, 97, 62, 159, 12, 52, 62, 231, 98, 8, 191, 6, 62, 171, 61, 70, 48, 171, 188, 31, 67, 189, 189, 109, 158, 71, 62, 35, 60, 249, 189, 54, 151, 226, 188, 61, 88, 40, 62, 201, 35, 174, 190, 123, 76, 162, 62, 180, 174, 132, 190, 223, 156, 25, 63, 124, 193, 1, 60, 211, 206, 14, 62, 11, 102, 9, 62, 9, 112, 30, 190, 216, 80, 164, 190, 164, 70, 254, 190, 141, 57, 124, 190, 175, 86, 116, 62, 22, 111, 219, 61, 188, 83, 217, 61, 252, 245, 74, 62, 174, 111, 87, 191, 198, 228, 211, 188, 219, 103, 106, 189, 103, 219, 171, 62, 80, 141, 65, 190, 203, 21, 136, 190, 5, 135, 155, 189, 240, 5, 149, 190, 155, 171, 5, 190, 6, 187, 11, 190, 131, 50, 185, 62, 249, 91, 168, 62, 195, 83, 211, 190, 143, 243, 104, 60, 129, 16, 134, 61, 241, 185, 88, 191, 29, 152, 229, 60, 125, 206, 97, 62, 68, 132, 186, 190, 167, 173, 141, 62, 67, 156, 198, 190, 30, 58, 132, 190, 153, 177, 193, 190, 150, 188, 228, 189, 123, 87, 176, 190, 20, 32, 206, 61, 190, 87, 62, 62, 69, 46, 37, 62, 138, 108, 71, 61, 69, 246, 104, 189, 170, 205, 24, 190, 182, 99, 106, 189, 18, 185, 10, 62, 220, 100, 202, 189, 208, 225, 12, 63, 237, 114, 49, 190, 167, 132, 123, 190, 200, 144, 163, 61, 83, 228, 251, 61, 106, 100, 170, 188, 180, 161, 21, 190, 149, 221, 162, 190, 120, 87, 136, 190, 197, 230, 78, 190, 37, 191, 120, 62, 93, 70, 140, 62, 87, 4, 138, 60, 103, 120, 42, 61, 243, 161, 172, 61, 119, 119, 83, 61, 114, 28, 129, 189, 232, 253, 60, 62, 88, 78, 146, 188, 212, 154, 26, 62, 98, 192, 29, 188, 6, 106, 42, 62, 141, 141, 123, 62, 120, 176, 184, 61, 107, 126, 36, 62, 55, 154, 195, 189, 110, 181, 5, 188, 177, 20, 128, 61, 97, 149, 244, 189, 0, 97, 14, 62, 150, 104, 143, 189, 215, 206, 105, 62, 166, 80, 215, 190, 115, 82, 131, 62, 169, 142, 16, 62, 151, 207, 22, 190, 63, 123, 214, 189, 1, 24, 130, 190, 41, 232, 212, 189, 4, 160, 196, 62, 234, 165, 204, 190, 41, 140, 203, 190, 79, 150, 147, 62, 197, 136, 170, 62, 124, 151, 47, 190, 114, 160, 228, 62, 31, 149, 55, 62, 31, 197, 197, 190, 145, 187, 16, 61, 8, 253, 71, 189, 179, 109, 40, 62, 243, 89, 137, 62, 121, 229, 222, 189, 38, 4, 189, 185, 126, 192, 45, 189, 34, 147, 161, 189, 208, 218, 156, 189, 4, 8, 158, 189, 127, 243, 152, 190, 98, 208, 27, 190, 189, 186, 169, 62, 82, 152, 59, 189, 51, 122, 168, 189, 94, 159, 151, 62, 232, 159, 204, 190, 217, 165, 169, 62, 93, 97, 10, 63, 20, 34, 173, 61, 74, 25, 115, 190, 163, 132, 236, 61, 209, 216, 12, 62, 95, 173, 219, 189, 252, 176, 10, 191, 226, 229, 202, 188, 184, 88, 202, 190, 108, 133, 194, 190, 137, 195, 45, 62, 179, 93, 242, 190, 200, 138, 165, 190, 161, 189, 36, 191, 18, 136, 116, 191, 230, 64, 213, 62, 149, 117, 234, 62, 115, 160, 20, 189, 218, 235, 162, 190, 73, 155, 0, 62, 200, 103, 237, 189, 23, 201, 223, 62, 231, 40, 37, 188, 231, 1, 184, 62, 6, 221, 140, 62, 63, 12, 170, 62, 8, 196, 136, 190, 82, 84, 136, 189, 41, 255, 21, 190, 187, 17, 192, 189, 107, 242, 227, 61, 61, 149, 160, 190, 63, 14, 34, 191, 189, 155, 71, 190, 142, 139, 54, 190, 21, 173, 135, 190, 127, 60, 222, 189, 222, 203, 36, 190, 94, 8, 29, 190, 201, 48, 56, 61, 70, 163, 69, 190, 198, 250, 171, 189, 244, 148, 20, 188, 153, 184, 81, 189, 231, 118, 58, 190, 113, 8, 40, 189, 161, 213, 100, 189, 78, 169, 85, 61, 34, 5, 5, 190, 163, 68, 158, 189, 226, 58, 186, 61, 125, 115, 79, 189, 17, 109, 188, 61, 158, 161, 20, 190, 218, 124, 111, 189, 134, 242, 33, 190, 138, 110, 64, 189, 140, 163, 74, 186, 82, 40, 82, 189, 164, 15, 250, 189, 25, 251, 231, 189, 210, 39, 254, 61, 7, 8, 203, 61, 231, 161, 198, 61, 102, 178, 48, 190, 170, 87, 107, 61, 69, 100, 209, 61, 5, 218, 214, 189, 50, 142, 151, 188, 193, 94, 46, 62, 68, 71, 128, 189, 163, 185, 35, 62, 126, 90, 254, 189, 82, 175, 134, 60, 119, 67, 30, 190, 208, 253, 20, 189, 60, 64, 112, 189, 248, 240, 220, 189, 2, 187, 17, 190, 100, 172, 201, 189, 243, 152, 109, 189, 94, 125, 49, 62, 32, 48, 1, 190, 166, 80, 233, 189, 139, 134, 10, 62, 159, 13, 143, 189, 76, 95, 51, 190, 147, 231, 87, 188, 249, 24, 30, 190, 20, 165, 15, 190, 47, 11, 37, 190, 24, 154, 76, 61, 48, 162, 27, 190, 247, 27, 97, 187, 31, 211, 206, 189, 25, 143, 192, 61, 166, 125, 15, 190, 218, 82, 221, 189, 38, 34, 201, 189, 236, 34, 6, 62, 231, 57, 127, 60, 84, 152, 66, 190, 6, 192, 107, 190, 152, 161, 17, 61, 61, 172, 126, 61, 182, 228, 12, 62, 54, 200, 135, 186, 141, 63, 145, 190, 16, 132, 139, 62, 156, 25, 89, 62, 86, 167, 36, 191, 158, 162, 150, 190, 204, 11, 23, 191, 248, 217, 11, 191, 115, 19, 77, 191, 177, 248, 104, 189, 253, 178, 136, 62, 146, 198, 200, 190, 153, 153, 157, 190, 160, 153, 26, 191, 84, 70, 247, 60, 4, 133, 179, 189, 69, 53, 46, 62, 132, 33, 137, 62, 255, 87, 223, 190, 11, 154, 42, 62, 79, 126, 34, 61, 152, 76, 24, 191, 4, 237, 61, 63, 46, 255, 85, 191, 215, 135, 142, 190, 224, 86, 0, 191, 227, 153, 172, 60, 163, 22, 230, 190, 153, 65, 172, 186, 103, 0, 228, 61, 245, 99, 75, 190, 217, 36, 202, 61, 155, 5, 157, 61, 190, 168, 246, 189, 134, 29, 222, 188, 177, 54, 117, 62, 134, 123, 174, 190, 58, 30, 147, 61, 192, 0, 239, 61, 212, 172, 237, 189, 35, 162, 52, 188, 170, 160, 22, 190, 194, 39, 201, 188, 229, 57, 145, 62, 142, 255, 96, 61, 198, 53, 198, 188, 222, 95, 203, 62, 140, 172, 236, 61, 47, 240, 35, 62, 49, 59, 156, 62, 40, 99, 184, 61, 28, 107, 133, 189, 141, 31, 179, 187, 17, 39, 77, 190, 58, 173, 150, 191, 154, 113, 107, 62, 18, 109, 14, 62, 148, 158, 137, 61, 184, 198, 255, 61, 247, 187, 130, 61, 249, 121, 58, 191, 127, 185, 176, 190, 14, 229, 69, 61, 102, 62, 9, 62, 203, 133, 205, 187, 228, 44, 176, 62, 118, 126, 141, 189, 21, 219, 159, 190, 124, 73, 24, 191, 53, 1, 163, 189, 153, 234, 30, 63, 203, 13, 2, 191, 88, 86, 90, 62, 189, 229, 38, 61, 196, 202, 182, 189, 177, 58, 143, 190, 82, 83, 153, 62, 19, 38, 214, 61, 246, 1, 167, 190, 131, 253, 142, 62, 226, 54, 179, 61, 17, 196, 49, 191, 183, 223, 136, 62, 216, 58, 37, 191, 197, 194, 10, 189, 109, 176, 154, 188, 167, 156, 159, 189, 153, 202, 97, 191, 112, 231, 227, 190, 23, 135, 100, 191, 190, 30, 230, 188, 238, 63, 1, 63, 208, 138, 72, 191, 117, 109, 43, 190, 252, 39, 110, 62, 255, 198, 2, 62, 52, 110, 99, 190, 207, 39, 148, 190, 98, 250, 91, 62, 38, 108, 146, 190, 113, 120, 148, 61, 100, 237, 27, 189, 112, 67, 203, 62, 159, 68, 156, 62, 52, 76, 130, 62, 71, 181, 20, 62, 80, 220, 42, 190, 185, 59, 243, 61, 107, 110, 196, 189, 31, 4, 221, 189, 128, 39, 162, 190, 112, 180, 182, 190, 194, 23, 153, 62, 133, 110, 70, 189, 115, 126, 249, 188, 67, 33, 133, 62, 34, 18, 170, 190, 130, 88, 17, 62, 224, 33, 65, 62, 80, 145, 140, 60, 117, 226, 169, 190, 151, 158, 192, 187, 117, 162, 0, 61, 73, 189, 12, 189, 239, 172, 98, 189, 148, 143, 176, 61, 31, 236, 36, 62, 249, 212, 137, 62, 154, 206, 126, 190, 201, 105, 148, 62, 119, 26, 196, 61, 171, 169, 165, 189, 201, 112, 16, 62, 125, 1, 133, 188, 89, 187, 47, 189, 253, 67, 78, 62, 172, 112, 141, 60, 6, 107, 151, 62, 122, 224, 153, 61, 21, 207, 44, 61, 44, 66, 224, 190, 228, 176, 172, 190, 17, 50, 57, 60, 38, 25, 128, 190, 230, 14, 15, 62, 152, 3, 183, 189, 218, 30, 245, 187, 196, 226, 42, 62, 248, 173, 62, 190, 94, 254, 58, 59, 170, 148, 112, 62, 46, 91, 142, 189, 224, 109, 129, 190, 4, 64, 172, 61, 30, 94, 31, 189, 9, 22, 78, 190, 98, 48, 179, 61, 8, 74, 207, 61, 117, 18, 26, 190, 48, 215, 77, 191, 50, 188, 121, 62, 146, 247, 85, 190, 181, 63, 148, 190, 57, 139, 44, 62, 206, 18, 94, 190, 9, 124, 153, 62, 118, 179, 49, 189, 29, 45, 69, 189, 5, 207, 112, 191, 29, 21, 103, 190, 249, 60, 60, 61, 78, 223, 129, 62, 197, 56, 138, 61, 232, 40, 166, 61, 114, 62, 44, 62, 172, 228, 65, 62, 24, 228, 224, 190, 96, 73, 8, 188, 199, 136, 131, 62, 30, 46, 22, 61, 220, 38, 123, 190, 6, 151, 168, 190, 62, 8, 118, 190, 71, 147, 21, 62, 179, 148, 88, 62, 126, 74, 54, 187, 195, 22, 167, 189, 156, 2, 216, 189, 42, 179, 80, 61, 241, 3, 246, 190, 26, 198, 143, 190, 216, 43, 146, 61, 31, 245, 221, 190, 202, 104, 50, 187, 153, 16, 174, 61, 226, 130, 12, 191, 174, 174, 67, 62, 159, 34, 241, 189, 59, 219, 248, 189, 238, 101, 6, 62, 170, 148, 46, 62, 82, 246, 241, 61, 154, 211, 5, 191, 175, 251, 132, 188, 250, 84, 241, 190, 243, 251, 76, 190, 84, 104, 29, 191, 158, 137, 137, 190, 108, 177, 247, 61, 56, 110, 147, 62, 140, 56, 232, 190, 9, 140, 124, 62, 189, 238, 210, 190, 54, 8, 34, 190, 222, 65, 20, 63, 137, 125, 235, 190, 30, 83, 140, 189, 136, 133, 90, 190, 170, 235, 176, 189, 64, 241, 153, 60, 177, 15, 14, 191, 224, 236, 32, 189, 33, 79, 11, 190, 18, 118, 166, 190, 105, 111, 62, 62, 138, 7, 17, 62, 124, 122, 131, 189, 30, 79, 98, 189, 59, 91, 187, 190, 175, 177, 14, 190, 239, 183, 154, 62, 182, 81, 77, 188, 39, 169, 140, 190, 48, 7, 81, 62, 67, 27, 35, 62, 107, 170, 154, 62, 47, 97, 237, 189, 225, 130, 49, 60, 115, 92, 124, 62, 201, 81, 1, 62, 147, 34, 150, 59, 41, 43, 14, 62, 186, 223, 60, 189, 111, 86, 74, 189, 160, 98, 205, 190, 112, 166, 234, 189, 192, 54, 116, 191, 28, 187, 187, 59, 176, 141, 57, 190, 53, 219, 127, 60, 109, 20, 12, 62, 255, 70, 1, 189, 62, 140, 68, 61, 82, 106, 50, 190, 232, 90, 60, 61, 173, 107, 192, 60, 47, 132, 219, 61, 170, 168, 206, 185, 172, 93, 58, 190, 43, 91, 61, 190, 146, 143, 173, 60, 240, 124, 80, 61, 113, 232, 186, 189, 182, 71, 96, 189, 116, 164, 109, 61, 178, 190, 78, 190, 94, 232, 254, 189, 182, 223, 192, 189, 1, 6, 9, 61, 195, 190, 135, 189, 230, 165, 246, 189, 174, 222, 158, 188, 138, 96, 42, 190, 222, 65, 57, 190, 15, 250, 155, 57, 101, 73, 3, 190, 62, 235, 74, 61, 233, 160, 8, 60, 140, 248, 111, 189, 194, 3, 197, 189, 114, 40, 135, 190, 126, 110, 58, 189, 140, 149, 175, 189, 92, 81, 197, 189, 88, 184, 188, 190, 231, 57, 46, 188, 160, 236, 194, 61, 5, 249, 21, 62, 177, 96, 95, 190, 112, 14, 132, 185, 58, 241, 183, 189, 77, 125, 130, 189, 114, 235, 36, 62, 36, 60, 43, 62, 120, 155, 186, 190, 219, 155, 18, 61, 185, 194, 230, 61, 32, 170, 137, 62, 55, 104, 131, 189, 54, 127, 228, 189, 195, 250, 148, 190, 51, 208, 193, 189, 187, 247, 135, 190, 69, 177, 42, 189, 179, 149, 17, 62, 74, 1, 154, 187, 126, 31, 95, 190, 117, 37, 173, 62, 110, 50, 163, 190, 20, 242, 105, 62, 206, 72, 133, 61, 100, 140, 88, 61, 192, 52, 68, 189, 204, 216, 131, 190, 160, 163, 23, 62, 240, 71, 58, 189, 92, 229, 47, 190, 99, 137, 126, 60, 245, 227, 49, 190, 195, 15, 133, 61, 37, 189, 160, 189, 233, 29, 30, 190, 39, 127, 2, 190, 235, 119, 203, 189, 222, 155, 0, 61, 82, 111, 51, 190, 190, 172, 135, 189, 208, 118, 74, 190, 203, 72, 46, 190, 36, 36, 50, 190, 93, 95, 198, 61, 187, 77, 205, 189, 180, 192, 136, 60, 252, 252, 200, 61, 219, 35, 164, 61, 78, 0, 74, 61, 190, 100, 60, 189, 151, 154, 232, 189, 90, 36, 150, 188, 196, 45, 182, 189, 165, 74, 13, 189, 218, 76, 30, 188, 72, 114, 36, 190, 238, 120, 237, 189, 204, 104, 49, 189, 146, 139, 153, 61, 206, 204, 171, 60, 49, 240, 208, 189, 145, 26, 199, 188, 213, 121, 88, 61, 45, 44, 144, 189, 42, 208, 23, 62, 43, 206, 101, 62, 174, 162, 79, 59, 94, 223, 145, 60, 180, 185, 10, 61, 148, 4, 51, 62, 132, 196, 152, 190, 96, 250, 74, 62, 186, 119, 140, 62, 135, 182, 155, 61, 58, 91, 246, 61, 201, 213, 138, 61, 199, 36, 90, 61, 115, 182, 231, 188, 90, 69, 159, 61, 158, 215, 89, 62, 109, 2, 195, 189, 113, 55, 78, 189, 187, 143, 183, 61, 45, 224, 146, 189, 58, 138, 165, 188, 143, 3, 97, 189, 34, 103, 100, 62, 8, 19, 65, 191, 110, 42, 165, 190, 210, 195, 65, 62, 62, 214, 205, 190, 233, 115, 2, 62, 232, 150, 46, 190, 207, 177, 140, 62, 138, 226, 62, 62, 16, 245, 112, 190, 52, 146, 36, 188, 55, 52, 152, 59, 134, 9, 206, 190, 210, 180, 143, 60, 8, 60, 103, 188, 48, 54, 193, 62, 234, 74, 203, 61, 118, 113, 25, 191, 154, 177, 110, 62, 42, 11, 8, 62, 94, 97, 12, 189, 225, 59, 67, 191, 247, 192, 186, 188, 144, 80, 125, 190, 74, 32, 150, 190, 219, 61, 190, 190, 148, 140, 80, 190, 222, 100, 22, 61, 33, 73, 144, 188, 232, 191, 126, 190, 179, 168, 9, 62, 100, 18, 106, 62, 239, 150, 163, 61, 188, 188, 26, 62, 218, 36, 181, 61, 179, 194, 19, 62, 178, 244, 24, 62, 231, 42, 103, 188, 247, 225, 4, 190, 146, 175, 79, 62, 109, 57, 168, 62, 151, 60, 137, 189, 160, 137, 148, 60, 45, 0, 9, 62, 250, 33, 131, 191, 234, 236, 56, 189, 239, 119, 55, 61, 130, 232, 182, 191, 81, 17, 29, 63, 98, 241, 87, 191, 178, 74, 146, 190, 189, 124, 138, 190, 104, 225, 109, 188, 79, 14, 165, 60, 226, 236, 101, 62, 67, 166, 134, 61, 44, 24, 5, 190, 30, 107, 182, 61, 236, 57, 205, 189, 180, 180, 7, 62, 232, 223, 30, 62, 113, 168, 7, 191, 231, 26, 188, 189, 251, 64, 253, 62, 76, 221, 178, 190, 148, 144, 140, 190, 227, 152, 223, 190, 196, 54, 111, 62, 190, 75, 130, 190, 214, 57, 176, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {120, 53, 128, 61, 17, 135, 69, 62, 59, 179, 156, 61, 80, 33, 207, 189, 250, 224, 82, 62, 222, 25, 166, 59, 74, 237, 49, 189, 88, 178, 184, 189, 187, 222, 8, 63, 244, 64, 168, 189, 221, 5, 151, 61, 52, 66, 173, 61, 120, 90, 136, 61, 225, 59, 160, 62, 35, 161, 155, 189, 117, 188, 131, 189, 181, 195, 54, 190, 163, 4, 39, 190, 57, 150, 237, 189, 34, 49, 140, 62, 143, 179, 36, 62, 77, 87, 202, 61, 159, 24, 231, 61, 91, 136, 136, 62, 94, 217, 54, 190, 51, 193, 182, 62, 180, 248, 52, 61, 102, 226, 30, 62, 236, 236, 83, 61, 61, 170, 64, 186, 128, 196, 197, 190, 63, 5, 214, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {247, 217, 128, 62, 214, 150, 82, 190, 137, 6, 242, 62, 191, 162, 200, 62, 148, 104, 56, 190, 26, 1, 24, 189, 246, 255, 27, 191, 229, 100, 24, 191, 39, 151, 232, 190, 254, 255, 16, 189, 102, 142, 225, 189, 218, 99, 185, 62, 19, 210, 204, 62, 49, 109, 93, 190, 181, 76, 236, 190, 161, 12, 22, 63, 222, 58, 156, 189, 164, 50, 20, 61, 133, 129, 35, 63, 14, 25, 208, 62, 232, 210, 82, 191, 127, 112, 194, 190, 165, 98, 75, 190, 177, 87, 208, 62, 244, 151, 66, 63, 57, 94, 154, 62, 233, 84, 120, 189, 204, 107, 2, 190, 128, 201, 10, 62, 133, 133, 67, 62, 158, 199, 13, 63, 135, 221, 34, 63, 233, 135, 47, 190, 229, 148, 133, 190, 38, 232, 185, 62, 244, 5, 228, 61, 61, 17, 131, 190, 141, 59, 15, 62, 41, 88, 217, 59, 91, 117, 0, 63, 65, 128, 186, 190, 208, 187, 20, 190, 73, 202, 107, 63, 60, 189, 2, 63, 158, 132, 154, 62, 115, 137, 171, 189, 217, 145, 165, 62, 70, 69, 134, 190, 120, 171, 139, 189, 160, 240, 152, 189, 254, 84, 1, 62, 212, 71, 142, 189, 79, 162, 195, 62, 138, 232, 110, 190, 61, 218, 8, 190, 91, 67, 63, 190, 144, 241, 134, 63, 174, 175, 192, 190, 25, 124, 146, 61, 217, 3, 52, 190, 128, 195, 129, 189, 11, 74, 14, 60, 222, 37, 166, 62, 239, 22, 164, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 138, 53, 189, 29, 177, 241, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {231, 118, 162, 190, 181, 117, 251, 190, 240, 106, 183, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {96, 247, 175, 62, 156, 239, 63, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0001/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}