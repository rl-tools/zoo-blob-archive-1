// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 166, 71, 187, 122, 90, 100, 190, 217, 61, 247, 62, 188, 144, 152, 62, 102, 3, 130, 191, 168, 211, 194, 190, 172, 98, 227, 62, 92, 242, 157, 60, 121, 102, 38, 191, 58, 15, 58, 191, 190, 181, 35, 191, 25, 18, 94, 190, 233, 110, 242, 190, 79, 124, 130, 62, 143, 185, 29, 191, 38, 44, 241, 190, 254, 79, 133, 190, 134, 136, 162, 62, 76, 46, 82, 190, 222, 136, 172, 191, 249, 188, 32, 190, 132, 53, 206, 189, 131, 108, 30, 63, 102, 96, 57, 190, 154, 122, 192, 190, 11, 181, 74, 63, 228, 109, 78, 62, 38, 11, 208, 61, 197, 151, 143, 63, 239, 155, 179, 62, 245, 147, 16, 63, 91, 21, 16, 191, 205, 65, 50, 190, 216, 84, 255, 190, 244, 44, 141, 191, 60, 155, 6, 62, 201, 16, 8, 63, 248, 72, 246, 62, 98, 198, 25, 63, 40, 10, 71, 60, 172, 133, 8, 191, 71, 171, 249, 190, 34, 124, 200, 62, 34, 168, 160, 61, 120, 109, 5, 191, 64, 7, 128, 191, 199, 31, 239, 62, 222, 183, 80, 61, 175, 41, 86, 63, 0, 27, 111, 191, 241, 184, 113, 190, 231, 34, 187, 190, 170, 60, 236, 190, 58, 52, 9, 63, 250, 39, 177, 58, 173, 11, 137, 191, 60, 251, 216, 62, 41, 58, 88, 191, 207, 196, 250, 61, 207, 83, 104, 62, 217, 232, 146, 188, 13, 67, 112, 191, 7, 145, 104, 190, 127, 143, 127, 190, 138, 199, 131, 62, 35, 60, 104, 190, 130, 74, 152, 62, 163, 110, 55, 63, 107, 224, 1, 189, 193, 126, 4, 191, 243, 210, 70, 190, 132, 112, 243, 62, 7, 56, 54, 63, 70, 52, 58, 63, 31, 94, 173, 62, 34, 124, 239, 62, 158, 224, 35, 190, 175, 51, 213, 190, 193, 173, 188, 190, 151, 138, 136, 190, 133, 90, 60, 191, 21, 74, 90, 63, 47, 212, 111, 63, 108, 39, 170, 62, 108, 76, 94, 190, 212, 44, 254, 62, 151, 247, 207, 62, 24, 140, 19, 62, 111, 239, 34, 191, 85, 219, 160, 190, 227, 33, 220, 189, 227, 11, 71, 63, 191, 145, 24, 63, 204, 253, 179, 189, 149, 73, 210, 62, 42, 47, 126, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 180, 149, 191, 190, 142, 239, 190, 50, 205, 74, 190, 61, 163, 238, 62, 10, 69, 137, 190, 93, 208, 25, 63, 23, 51, 81, 190, 89, 161, 215, 62, 41, 88, 10, 190, 47, 43, 220, 189, 135, 240, 52, 62, 252, 215, 23, 190, 239, 211, 3, 190, 168, 71, 88, 190, 96, 31, 38, 63, 128, 248, 95, 62, 255, 128, 244, 62, 237, 252, 174, 62, 55, 226, 206, 62, 152, 18, 185, 62, 81, 146, 180, 62, 28, 74, 148, 62, 153, 76, 36, 63, 196, 197, 127, 62, 89, 4, 133, 61, 14, 47, 206, 190, 231, 5, 117, 190, 118, 8, 229, 190, 153, 110, 125, 190, 115, 94, 136, 190, 196, 243, 183, 190, 77, 175, 9, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {28, 149, 251, 60, 81, 201, 32, 61, 65, 97, 140, 189, 1, 235, 156, 190, 30, 162, 26, 62, 192, 13, 190, 61, 39, 85, 240, 190, 186, 203, 200, 62, 29, 155, 1, 62, 26, 103, 145, 187, 228, 47, 160, 61, 45, 14, 246, 190, 228, 239, 135, 62, 7, 254, 135, 189, 159, 74, 222, 61, 45, 214, 147, 62, 124, 18, 120, 62, 250, 238, 83, 190, 225, 49, 157, 190, 69, 98, 42, 62, 218, 77, 47, 189, 191, 96, 142, 62, 127, 211, 219, 62, 181, 235, 113, 190, 74, 104, 53, 62, 137, 254, 62, 189, 101, 180, 143, 61, 191, 102, 227, 190, 78, 181, 97, 62, 165, 168, 205, 189, 4, 39, 77, 62, 123, 17, 200, 186, 94, 196, 223, 62, 168, 111, 180, 190, 254, 51, 137, 190, 153, 193, 220, 61, 171, 134, 132, 62, 206, 168, 39, 190, 123, 174, 37, 62, 235, 233, 65, 62, 161, 30, 167, 190, 19, 218, 13, 62, 157, 196, 130, 188, 150, 192, 4, 62, 156, 129, 18, 61, 231, 20, 136, 61, 233, 119, 20, 62, 34, 133, 66, 190, 68, 1, 169, 61, 169, 69, 6, 62, 14, 221, 115, 61, 120, 138, 126, 61, 194, 21, 76, 190, 8, 131, 35, 62, 38, 100, 177, 189, 181, 214, 83, 189, 106, 252, 81, 61, 42, 195, 112, 190, 154, 5, 190, 61, 140, 245, 37, 62, 118, 18, 54, 62, 103, 169, 237, 190, 49, 99, 40, 190, 185, 19, 59, 61, 205, 29, 181, 190, 237, 215, 182, 62, 117, 190, 20, 189, 60, 11, 203, 60, 105, 252, 75, 188, 183, 68, 37, 62, 175, 77, 74, 190, 93, 25, 146, 61, 12, 156, 172, 62, 50, 174, 26, 190, 240, 115, 180, 60, 63, 48, 107, 190, 249, 198, 150, 190, 11, 65, 3, 190, 2, 249, 125, 189, 218, 59, 69, 59, 15, 113, 37, 62, 198, 15, 113, 62, 159, 28, 227, 61, 127, 59, 59, 62, 2, 179, 57, 61, 89, 86, 60, 189, 75, 72, 137, 61, 161, 232, 41, 61, 44, 33, 115, 190, 62, 58, 130, 62, 58, 68, 76, 190, 144, 169, 66, 191, 138, 216, 150, 188, 130, 5, 19, 62, 50, 241, 91, 62, 246, 56, 99, 189, 69, 94, 209, 189, 228, 19, 160, 62, 52, 219, 23, 62, 94, 199, 62, 62, 127, 136, 226, 189, 157, 4, 37, 62, 79, 52, 93, 62, 112, 53, 2, 188, 61, 168, 6, 191, 203, 28, 252, 189, 99, 44, 76, 60, 163, 227, 116, 62, 239, 115, 64, 190, 110, 178, 100, 62, 79, 201, 27, 62, 151, 184, 8, 190, 163, 83, 52, 62, 4, 210, 100, 62, 179, 0, 7, 63, 252, 225, 10, 62, 31, 31, 161, 61, 248, 62, 21, 190, 34, 84, 221, 190, 116, 156, 4, 60, 223, 132, 70, 190, 10, 145, 16, 62, 13, 89, 15, 62, 184, 154, 129, 191, 180, 38, 255, 190, 43, 98, 215, 61, 202, 38, 17, 191, 102, 24, 131, 61, 204, 239, 5, 190, 136, 140, 149, 190, 13, 12, 40, 190, 150, 163, 248, 61, 32, 48, 58, 61, 11, 242, 242, 188, 120, 166, 2, 62, 242, 84, 41, 189, 173, 137, 171, 60, 77, 226, 2, 190, 79, 5, 144, 62, 100, 224, 72, 190, 108, 229, 132, 61, 248, 77, 126, 188, 38, 126, 64, 62, 39, 206, 22, 62, 17, 131, 179, 62, 33, 1, 8, 62, 15, 31, 166, 189, 41, 13, 64, 189, 214, 167, 47, 190, 0, 108, 3, 61, 135, 49, 181, 62, 251, 208, 244, 188, 27, 183, 39, 62, 231, 38, 129, 190, 111, 197, 88, 62, 195, 101, 213, 189, 251, 3, 80, 190, 46, 86, 2, 190, 53, 249, 149, 190, 34, 174, 43, 62, 224, 1, 62, 188, 30, 218, 214, 189, 70, 49, 177, 188, 110, 242, 166, 189, 41, 97, 28, 189, 209, 170, 1, 61, 140, 178, 27, 189, 254, 66, 8, 59, 214, 23, 105, 189, 193, 207, 168, 189, 229, 38, 12, 190, 72, 206, 219, 189, 127, 47, 133, 188, 185, 51, 71, 61, 132, 75, 17, 189, 201, 248, 191, 189, 120, 162, 17, 60, 164, 26, 34, 190, 189, 251, 13, 190, 251, 157, 234, 189, 12, 189, 102, 61, 62, 40, 8, 189, 19, 227, 154, 189, 157, 199, 127, 189, 197, 100, 42, 62, 182, 159, 159, 61, 177, 60, 55, 61, 167, 221, 11, 190, 42, 244, 254, 187, 125, 45, 63, 61, 131, 14, 166, 189, 34, 89, 32, 190, 118, 245, 128, 61, 18, 39, 211, 190, 221, 145, 208, 62, 6, 234, 172, 190, 219, 90, 120, 60, 168, 27, 205, 61, 12, 150, 191, 190, 200, 73, 148, 62, 189, 73, 74, 190, 32, 201, 183, 61, 105, 66, 140, 61, 164, 97, 227, 62, 80, 117, 84, 62, 112, 12, 197, 188, 76, 46, 130, 189, 151, 76, 10, 191, 168, 49, 106, 187, 7, 143, 150, 61, 170, 139, 13, 62, 136, 194, 104, 190, 113, 193, 40, 191, 67, 129, 242, 61, 148, 250, 54, 62, 2, 101, 171, 58, 44, 56, 117, 61, 236, 175, 245, 62, 46, 132, 57, 190, 124, 203, 241, 62, 102, 196, 180, 190, 74, 125, 17, 190, 200, 173, 122, 60, 82, 184, 22, 190, 67, 244, 139, 62, 181, 186, 112, 191, 79, 67, 101, 190, 34, 154, 9, 62, 144, 219, 145, 61, 180, 20, 152, 189, 156, 80, 138, 62, 209, 248, 187, 62, 146, 213, 0, 190, 60, 186, 214, 61, 149, 215, 25, 189, 172, 37, 13, 62, 191, 161, 115, 190, 125, 208, 213, 189, 29, 244, 36, 62, 54, 65, 6, 62, 222, 190, 186, 190, 56, 230, 151, 61, 64, 110, 225, 190, 141, 63, 130, 61, 61, 95, 53, 61, 245, 91, 62, 62, 186, 139, 105, 189, 130, 68, 188, 61, 160, 146, 17, 191, 35, 244, 12, 191, 37, 105, 237, 62, 238, 133, 154, 190, 152, 67, 161, 190, 203, 146, 4, 191, 88, 251, 148, 190, 30, 150, 20, 187, 99, 209, 105, 191, 42, 47, 108, 190, 149, 114, 45, 190, 54, 126, 0, 61, 143, 249, 19, 60, 40, 10, 137, 62, 47, 133, 49, 62, 167, 107, 160, 62, 191, 115, 170, 189, 207, 61, 24, 190, 204, 18, 10, 62, 112, 106, 171, 189, 147, 197, 80, 62, 205, 69, 24, 62, 52, 83, 155, 62, 203, 134, 113, 62, 145, 114, 182, 62, 216, 64, 0, 62, 151, 132, 45, 190, 156, 135, 137, 188, 159, 196, 190, 61, 71, 141, 65, 62, 25, 124, 255, 61, 83, 40, 0, 62, 183, 240, 110, 62, 29, 212, 164, 190, 44, 163, 23, 62, 81, 33, 61, 188, 73, 38, 92, 190, 66, 107, 82, 60, 192, 95, 72, 191, 90, 52, 13, 62, 113, 203, 10, 189, 139, 94, 114, 61, 218, 223, 40, 189, 66, 177, 0, 190, 41, 114, 61, 189, 212, 236, 51, 61, 29, 103, 11, 190, 182, 74, 35, 62, 199, 63, 36, 190, 156, 95, 70, 190, 195, 99, 129, 61, 193, 41, 43, 190, 21, 240, 134, 61, 221, 233, 44, 62, 53, 3, 63, 190, 203, 76, 48, 188, 57, 236, 146, 189, 186, 82, 55, 190, 52, 220, 64, 190, 127, 151, 190, 189, 13, 186, 33, 62, 100, 103, 96, 189, 209, 238, 101, 61, 73, 245, 27, 190, 25, 35, 253, 189, 10, 232, 179, 189, 57, 190, 14, 190, 82, 3, 6, 62, 157, 84, 128, 61, 104, 43, 127, 61, 68, 60, 23, 62, 240, 220, 208, 59, 170, 247, 45, 62, 139, 51, 220, 61, 158, 182, 196, 61, 75, 32, 33, 190, 107, 224, 77, 190, 125, 205, 148, 59, 218, 139, 73, 189, 195, 138, 171, 190, 165, 225, 160, 189, 114, 211, 94, 190, 84, 199, 122, 62, 245, 114, 65, 190, 5, 17, 40, 191, 176, 90, 140, 190, 4, 147, 210, 189, 197, 165, 118, 190, 89, 56, 173, 62, 106, 166, 214, 61, 99, 231, 225, 62, 177, 245, 2, 189, 182, 223, 99, 62, 224, 106, 132, 190, 63, 231, 153, 61, 10, 45, 199, 189, 226, 237, 77, 191, 189, 58, 34, 62, 227, 242, 16, 190, 164, 143, 162, 191, 96, 103, 54, 62, 232, 172, 4, 62, 117, 67, 151, 62, 159, 12, 52, 62, 231, 98, 8, 191, 230, 39, 251, 60, 39, 108, 136, 188, 44, 95, 1, 190, 197, 95, 75, 62, 131, 168, 133, 189, 105, 146, 19, 190, 104, 241, 74, 62, 178, 72, 165, 190, 86, 73, 191, 62, 7, 81, 162, 190, 112, 88, 215, 62, 3, 149, 103, 61, 236, 222, 252, 61, 44, 42, 9, 62, 32, 106, 229, 189, 141, 151, 198, 190, 3, 203, 227, 190, 112, 84, 189, 190, 130, 164, 136, 62, 99, 73, 78, 61, 209, 145, 243, 61, 141, 245, 119, 62, 221, 62, 59, 191, 50, 12, 36, 61, 35, 6, 93, 189, 29, 119, 168, 62, 0, 135, 8, 190, 45, 34, 35, 190, 114, 41, 226, 189, 70, 126, 96, 190, 155, 171, 5, 190, 84, 245, 11, 190, 110, 1, 227, 62, 199, 76, 183, 62, 72, 122, 164, 190, 211, 178, 210, 60, 34, 132, 133, 187, 102, 229, 49, 191, 129, 245, 204, 60, 75, 199, 122, 62, 129, 231, 103, 190, 106, 146, 136, 62, 119, 14, 6, 191, 167, 100, 130, 190, 108, 5, 163, 190, 245, 246, 223, 189, 122, 249, 137, 190, 136, 52, 178, 61, 179, 223, 168, 61, 60, 230, 227, 61, 35, 166, 215, 59, 121, 46, 75, 189, 149, 163, 2, 190, 57, 237, 146, 189, 136, 202, 162, 61, 227, 123, 229, 189, 226, 156, 22, 63, 209, 66, 8, 190, 131, 63, 72, 190, 65, 191, 210, 61, 24, 196, 65, 62, 28, 180, 126, 61, 180, 161, 21, 190, 238, 25, 0, 190, 68, 225, 124, 190, 101, 147, 82, 190, 98, 85, 104, 62, 71, 140, 145, 62, 227, 56, 253, 188, 17, 128, 237, 60, 11, 196, 84, 61, 20, 218, 48, 57, 240, 78, 0, 190, 174, 4, 62, 62, 73, 226, 76, 189, 253, 120, 11, 62, 204, 120, 82, 187, 63, 121, 51, 62, 14, 105, 77, 62, 26, 70, 184, 61, 191, 166, 2, 62, 103, 2, 233, 189, 63, 169, 10, 189, 251, 199, 156, 61, 94, 21, 249, 189, 249, 209, 249, 61, 163, 132, 0, 190, 29, 138, 96, 62, 84, 173, 220, 190, 180, 4, 135, 62, 33, 193, 128, 61, 196, 55, 2, 190, 232, 9, 175, 189, 124, 142, 128, 190, 41, 232, 212, 189, 36, 122, 217, 62, 127, 183, 216, 190, 209, 2, 204, 190, 40, 154, 139, 62, 129, 204, 163, 62, 166, 11, 53, 190, 212, 164, 242, 62, 75, 192, 7, 62, 98, 193, 199, 190, 126, 60, 25, 60, 108, 86, 40, 189, 215, 89, 67, 62, 87, 104, 131, 62, 89, 114, 247, 189, 184, 191, 208, 60, 51, 28, 205, 189, 237, 230, 141, 189, 21, 102, 166, 189, 7, 3, 152, 189, 148, 38, 136, 190, 175, 124, 233, 189, 2, 155, 152, 62, 198, 59, 102, 189, 129, 206, 156, 189, 64, 177, 138, 62, 79, 129, 207, 190, 116, 67, 161, 62, 240, 212, 0, 63, 88, 39, 230, 61, 189, 214, 128, 190, 148, 170, 4, 62, 209, 216, 12, 62, 243, 52, 87, 190, 159, 189, 230, 190, 128, 181, 14, 60, 165, 84, 77, 190, 205, 165, 188, 190, 137, 38, 39, 62, 223, 164, 141, 190, 169, 160, 182, 190, 32, 221, 31, 191, 86, 111, 66, 191, 5, 184, 222, 62, 139, 175, 218, 62, 9, 148, 32, 188, 78, 119, 86, 190, 88, 16, 236, 61, 252, 194, 56, 190, 76, 52, 233, 62, 54, 93, 161, 188, 200, 201, 188, 62, 193, 8, 72, 62, 158, 12, 187, 62, 183, 62, 142, 190, 149, 114, 149, 189, 14, 105, 31, 190, 86, 33, 189, 189, 215, 138, 50, 62, 73, 226, 100, 190, 92, 2, 244, 190, 248, 12, 136, 190, 109, 97, 207, 189, 192, 117, 141, 190, 127, 60, 222, 189, 222, 203, 36, 190, 94, 8, 29, 190, 201, 48, 56, 61, 70, 163, 69, 190, 198, 250, 171, 189, 244, 148, 20, 188, 153, 184, 81, 189, 231, 118, 58, 190, 113, 8, 40, 189, 161, 213, 100, 189, 78, 169, 85, 61, 34, 5, 5, 190, 163, 68, 158, 189, 226, 58, 186, 61, 125, 115, 79, 189, 17, 109, 188, 61, 158, 161, 20, 190, 218, 124, 111, 189, 134, 242, 33, 190, 138, 110, 64, 189, 140, 163, 74, 186, 82, 40, 82, 189, 164, 15, 250, 189, 25, 251, 231, 189, 210, 39, 254, 61, 7, 8, 203, 61, 231, 161, 198, 61, 102, 178, 48, 190, 170, 87, 107, 61, 69, 100, 209, 61, 5, 218, 214, 189, 50, 142, 151, 188, 193, 94, 46, 62, 68, 71, 128, 189, 163, 185, 35, 62, 126, 90, 254, 189, 82, 175, 134, 60, 119, 67, 30, 190, 208, 253, 20, 189, 60, 64, 112, 189, 248, 240, 220, 189, 2, 187, 17, 190, 100, 172, 201, 189, 243, 152, 109, 189, 94, 125, 49, 62, 32, 48, 1, 190, 166, 80, 233, 189, 139, 134, 10, 62, 159, 13, 143, 189, 76, 95, 51, 190, 147, 231, 87, 188, 249, 24, 30, 190, 20, 165, 15, 190, 47, 11, 37, 190, 24, 154, 76, 61, 48, 162, 27, 190, 247, 27, 97, 187, 31, 211, 206, 189, 25, 143, 192, 61, 166, 125, 15, 190, 218, 82, 221, 189, 38, 34, 201, 189, 236, 34, 6, 62, 231, 57, 127, 60, 84, 152, 66, 190, 219, 78, 99, 190, 11, 154, 41, 61, 248, 226, 149, 61, 157, 147, 70, 187, 250, 51, 38, 61, 141, 63, 145, 190, 130, 217, 138, 62, 117, 77, 37, 62, 66, 220, 29, 191, 115, 174, 106, 190, 67, 234, 20, 191, 123, 173, 236, 190, 23, 12, 93, 191, 235, 199, 9, 189, 44, 158, 95, 62, 204, 161, 166, 190, 136, 8, 117, 190, 48, 189, 19, 191, 164, 227, 207, 59, 38, 191, 108, 189, 180, 239, 16, 62, 246, 219, 153, 62, 87, 108, 175, 190, 201, 107, 125, 62, 213, 29, 68, 61, 113, 44, 57, 191, 46, 178, 90, 63, 19, 200, 71, 191, 97, 63, 136, 190, 29, 187, 237, 190, 227, 153, 172, 60, 148, 12, 244, 190, 107, 222, 143, 187, 126, 234, 229, 61, 232, 11, 36, 190, 42, 81, 187, 61, 70, 73, 150, 61, 132, 190, 199, 189, 140, 139, 15, 189, 164, 228, 86, 62, 122, 41, 148, 190, 223, 196, 132, 61, 206, 131, 162, 61, 46, 120, 189, 189, 54, 67, 42, 188, 38, 49, 44, 190, 190, 254, 52, 189, 180, 222, 140, 62, 102, 225, 92, 61, 123, 127, 163, 188, 56, 127, 178, 62, 98, 218, 210, 61, 28, 29, 32, 62, 139, 182, 153, 62, 140, 100, 195, 61, 84, 122, 126, 189, 91, 226, 133, 59, 9, 119, 76, 190, 111, 186, 131, 191, 129, 148, 84, 62, 170, 234, 5, 62, 177, 219, 150, 61, 184, 198, 255, 61, 115, 138, 254, 58, 123, 209, 39, 191, 224, 110, 157, 190, 100, 229, 203, 61, 37, 151, 43, 62, 202, 71, 41, 189, 251, 71, 183, 62, 199, 7, 254, 188, 138, 248, 148, 190, 161, 37, 6, 191, 134, 111, 236, 58, 93, 229, 10, 63, 145, 31, 186, 190, 85, 7, 144, 62, 190, 90, 220, 61, 187, 155, 7, 61, 60, 92, 87, 190, 59, 109, 116, 62, 233, 51, 114, 61, 178, 129, 175, 190, 113, 143, 170, 62, 128, 228, 10, 62, 101, 164, 6, 191, 29, 97, 71, 62, 195, 175, 126, 190, 128, 109, 221, 187, 78, 67, 13, 61, 38, 141, 26, 62, 22, 10, 87, 191, 93, 36, 188, 190, 232, 185, 89, 191, 190, 30, 230, 188, 5, 94, 6, 63, 192, 212, 58, 191, 141, 35, 46, 190, 253, 22, 121, 62, 55, 134, 12, 62, 74, 49, 77, 190, 44, 172, 153, 189, 173, 36, 43, 62, 191, 136, 121, 190, 223, 100, 178, 61, 103, 214, 38, 189, 237, 5, 194, 62, 121, 244, 160, 62, 193, 219, 134, 62, 163, 114, 12, 62, 49, 35, 48, 190, 180, 1, 246, 61, 153, 60, 121, 189, 170, 243, 172, 189, 151, 197, 146, 190, 1, 15, 161, 190, 74, 59, 150, 62, 22, 61, 152, 189, 208, 91, 125, 187, 164, 15, 115, 62, 23, 88, 170, 190, 69, 66, 24, 62, 130, 43, 35, 62, 222, 64, 52, 61, 143, 93, 154, 190, 234, 167, 137, 60, 117, 162, 0, 61, 249, 249, 80, 189, 103, 253, 58, 189, 101, 205, 150, 61, 13, 196, 38, 62, 178, 51, 142, 62, 227, 220, 140, 190, 148, 241, 160, 62, 26, 123, 128, 61, 234, 26, 19, 190, 225, 16, 152, 61, 15, 153, 148, 188, 173, 58, 180, 61, 134, 227, 75, 62, 250, 248, 136, 60, 7, 93, 146, 62, 147, 155, 34, 187, 38, 146, 46, 61, 211, 114, 186, 190, 211, 237, 164, 190, 0, 56, 134, 189, 68, 96, 122, 190, 85, 54, 2, 62, 177, 243, 233, 189, 62, 122, 103, 189, 185, 158, 29, 62, 137, 187, 79, 190, 132, 98, 156, 59, 61, 10, 83, 62, 200, 50, 250, 189, 236, 67, 125, 190, 111, 45, 139, 61, 30, 94, 31, 189, 99, 79, 104, 190, 19, 56, 118, 188, 126, 135, 176, 61, 200, 134, 107, 189, 85, 128, 62, 191, 54, 66, 139, 62, 73, 17, 240, 189, 65, 199, 109, 190, 151, 133, 58, 62, 244, 252, 85, 190, 48, 120, 152, 62, 236, 198, 250, 60, 132, 31, 48, 189, 221, 233, 110, 191, 139, 82, 127, 190, 0, 42, 168, 61, 34, 224, 128, 62, 50, 25, 179, 61, 207, 35, 208, 61, 116, 78, 65, 62, 142, 55, 41, 62, 105, 205, 208, 190, 114, 188, 96, 188, 203, 150, 144, 62, 102, 114, 189, 60, 185, 108, 118, 190, 43, 197, 139, 190, 22, 114, 70, 190, 225, 185, 7, 62, 136, 131, 205, 61, 6, 194, 46, 188, 195, 22, 167, 189, 156, 2, 216, 189, 42, 179, 80, 61, 27, 71, 251, 190, 237, 129, 136, 190, 18, 37, 107, 61, 189, 173, 206, 190, 202, 104, 50, 187, 126, 243, 14, 62, 172, 183, 204, 190, 158, 49, 149, 62, 134, 52, 29, 190, 59, 219, 248, 189, 3, 8, 13, 62, 133, 231, 250, 61, 33, 92, 241, 61, 209, 147, 221, 190, 248, 40, 87, 189, 40, 160, 245, 190, 133, 193, 85, 190, 79, 82, 255, 190, 65, 35, 156, 190, 33, 183, 76, 62, 124, 166, 158, 62, 147, 160, 215, 190, 111, 132, 133, 62, 188, 68, 236, 190, 56, 12, 80, 190, 14, 118, 25, 63, 201, 148, 195, 190, 253, 45, 170, 61, 191, 47, 42, 190, 170, 235, 176, 189, 12, 11, 128, 189, 134, 39, 26, 191, 31, 72, 102, 189, 50, 32, 70, 189, 100, 82, 164, 190, 192, 91, 52, 62, 8, 131, 89, 62, 137, 178, 104, 189, 83, 83, 59, 188, 87, 138, 121, 190, 90, 209, 28, 190, 79, 212, 122, 62, 79, 134, 153, 60, 54, 246, 149, 190, 141, 99, 45, 62, 87, 220, 32, 62, 238, 181, 146, 62, 183, 128, 9, 190, 124, 189, 152, 187, 111, 86, 90, 62, 78, 191, 174, 61, 63, 217, 138, 60, 125, 8, 20, 62, 230, 12, 91, 189, 187, 105, 20, 189, 227, 154, 206, 190, 194, 234, 179, 189, 46, 38, 63, 191, 10, 25, 208, 188, 200, 125, 130, 190, 206, 114, 69, 60, 109, 20, 12, 62, 255, 70, 1, 189, 62, 140, 68, 61, 82, 106, 50, 190, 232, 90, 60, 61, 173, 107, 192, 60, 47, 132, 219, 61, 170, 168, 206, 185, 172, 93, 58, 190, 43, 91, 61, 190, 146, 143, 173, 60, 240, 124, 80, 61, 113, 232, 186, 189, 182, 71, 96, 189, 116, 164, 109, 61, 178, 190, 78, 190, 94, 232, 254, 189, 182, 223, 192, 189, 1, 6, 9, 61, 195, 190, 135, 189, 230, 165, 246, 189, 174, 222, 158, 188, 138, 96, 42, 190, 222, 65, 57, 190, 15, 250, 155, 57, 101, 73, 3, 190, 62, 235, 74, 61, 233, 160, 8, 60, 140, 248, 111, 189, 194, 3, 197, 189, 114, 40, 135, 190, 126, 110, 58, 189, 140, 149, 175, 189, 220, 132, 164, 189, 155, 19, 169, 190, 47, 253, 150, 188, 224, 56, 227, 61, 171, 161, 22, 62, 44, 182, 54, 190, 180, 56, 91, 61, 138, 54, 224, 189, 133, 26, 155, 188, 0, 100, 71, 62, 182, 254, 68, 62, 152, 82, 110, 190, 50, 67, 134, 61, 147, 180, 225, 61, 165, 143, 141, 62, 126, 156, 187, 189, 104, 33, 170, 189, 28, 69, 67, 190, 16, 235, 42, 189, 183, 170, 124, 190, 152, 148, 94, 187, 180, 168, 7, 62, 58, 199, 47, 187, 235, 86, 30, 190, 145, 107, 179, 62, 113, 233, 169, 190, 130, 253, 102, 62, 146, 140, 135, 61, 30, 211, 205, 61, 205, 88, 203, 188, 19, 87, 63, 190, 160, 163, 23, 62, 240, 71, 58, 189, 92, 229, 47, 190, 99, 137, 126, 60, 245, 227, 49, 190, 195, 15, 133, 61, 37, 189, 160, 189, 233, 29, 30, 190, 39, 127, 2, 190, 235, 119, 203, 189, 222, 155, 0, 61, 82, 111, 51, 190, 190, 172, 135, 189, 208, 118, 74, 190, 203, 72, 46, 190, 36, 36, 50, 190, 93, 95, 198, 61, 187, 77, 205, 189, 180, 192, 136, 60, 252, 252, 200, 61, 219, 35, 164, 61, 78, 0, 74, 61, 190, 100, 60, 189, 151, 154, 232, 189, 90, 36, 150, 188, 196, 45, 182, 189, 165, 74, 13, 189, 218, 76, 30, 188, 72, 114, 36, 190, 238, 120, 237, 189, 204, 104, 49, 189, 146, 139, 153, 61, 206, 204, 171, 60, 97, 187, 223, 189, 244, 238, 102, 188, 27, 209, 107, 61, 207, 110, 70, 189, 180, 81, 20, 62, 148, 39, 82, 62, 249, 102, 154, 59, 103, 150, 167, 60, 252, 88, 108, 61, 156, 247, 140, 62, 170, 220, 162, 190, 236, 163, 22, 62, 51, 102, 142, 62, 168, 45, 160, 61, 26, 24, 236, 61, 117, 225, 122, 61, 73, 225, 228, 60, 218, 135, 81, 189, 242, 230, 102, 61, 108, 123, 66, 62, 85, 110, 224, 189, 143, 65, 93, 189, 29, 120, 183, 61, 156, 91, 167, 189, 102, 83, 166, 188, 47, 248, 40, 189, 8, 85, 101, 62, 95, 207, 8, 191, 198, 239, 158, 190, 83, 168, 68, 62, 43, 184, 192, 190, 233, 115, 2, 62, 151, 230, 38, 190, 148, 121, 148, 62, 66, 88, 43, 62, 18, 104, 94, 190, 191, 51, 228, 188, 180, 101, 142, 189, 11, 149, 179, 190, 17, 177, 91, 187, 92, 122, 201, 189, 123, 14, 173, 62, 222, 218, 207, 61, 108, 218, 4, 191, 215, 128, 62, 62, 192, 217, 255, 61, 90, 23, 47, 189, 225, 140, 52, 191, 236, 86, 122, 188, 96, 108, 152, 190, 123, 102, 151, 190, 152, 110, 221, 190, 108, 130, 62, 190, 107, 161, 211, 60, 95, 196, 65, 189, 57, 165, 153, 190, 253, 69, 1, 62, 77, 151, 76, 62, 190, 232, 135, 61, 77, 133, 241, 61, 242, 186, 248, 60, 66, 247, 22, 62, 23, 188, 138, 61, 231, 42, 103, 188, 247, 225, 4, 190, 40, 114, 105, 62, 83, 114, 173, 62, 184, 172, 182, 188, 36, 144, 205, 58, 72, 90, 239, 61, 232, 214, 115, 191, 123, 255, 252, 188, 27, 152, 166, 61, 225, 91, 149, 191, 126, 14, 30, 63, 44, 240, 54, 191, 58, 172, 137, 190, 239, 150, 131, 190, 229, 71, 168, 187, 13, 68, 190, 61, 207, 214, 105, 62, 70, 167, 166, 188, 33, 57, 10, 190, 85, 87, 151, 61, 78, 67, 175, 189, 26, 220, 15, 62, 18, 110, 45, 62, 173, 246, 7, 191, 244, 8, 182, 189, 196, 53, 0, 63, 222, 99, 177, 190, 151, 49, 94, 190, 51, 152, 231, 190, 171, 100, 129, 62, 122, 10, 135, 190, 214, 57, 176, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {134, 123, 158, 61, 232, 158, 55, 62, 49, 168, 0, 61, 164, 48, 222, 189, 232, 62, 91, 62, 222, 25, 166, 59, 199, 217, 98, 189, 31, 21, 180, 189, 45, 184, 7, 63, 244, 64, 168, 189, 158, 175, 134, 61, 225, 114, 169, 61, 133, 134, 81, 61, 237, 62, 155, 62, 15, 44, 156, 189, 11, 188, 123, 189, 181, 195, 54, 190, 163, 4, 39, 190, 162, 133, 153, 189, 9, 225, 134, 62, 84, 96, 116, 62, 130, 87, 189, 61, 51, 18, 206, 61, 203, 129, 136, 62, 160, 232, 46, 190, 35, 199, 176, 62, 180, 248, 52, 61, 225, 96, 53, 62, 236, 236, 83, 61, 184, 63, 199, 188, 156, 25, 195, 190, 53, 252, 241, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {151, 242, 129, 62, 166, 114, 59, 190, 100, 185, 119, 62, 251, 133, 170, 62, 188, 63, 52, 190, 26, 1, 24, 189, 6, 41, 17, 191, 44, 248, 31, 191, 121, 209, 226, 190, 254, 255, 16, 189, 21, 226, 83, 189, 47, 227, 187, 62, 51, 46, 172, 62, 103, 179, 90, 190, 65, 252, 242, 190, 12, 48, 13, 63, 222, 58, 156, 189, 164, 50, 20, 61, 64, 133, 39, 63, 153, 152, 166, 62, 100, 222, 26, 191, 187, 186, 174, 190, 131, 77, 78, 190, 194, 8, 217, 62, 75, 36, 100, 63, 6, 150, 116, 62, 233, 84, 120, 189, 213, 129, 7, 190, 128, 201, 10, 62, 215, 114, 34, 62, 195, 204, 236, 62, 29, 63, 31, 63, 27, 255, 80, 190, 1, 57, 89, 190, 50, 217, 149, 62, 224, 32, 204, 61, 123, 195, 157, 190, 141, 59, 15, 62, 216, 99, 67, 61, 70, 187, 235, 62, 102, 40, 208, 190, 208, 187, 20, 190, 95, 73, 80, 63, 131, 22, 12, 63, 109, 70, 147, 62, 234, 162, 221, 189, 82, 241, 143, 62, 172, 237, 109, 190, 120, 171, 139, 189, 160, 240, 152, 189, 228, 79, 213, 61, 41, 195, 193, 189, 33, 186, 180, 62, 140, 2, 74, 190, 21, 165, 246, 189, 242, 141, 51, 190, 121, 47, 119, 63, 0, 189, 153, 190, 25, 124, 146, 61, 108, 67, 38, 190, 128, 195, 129, 189, 209, 242, 16, 61, 174, 252, 191, 62, 161, 114, 174, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {24, 247, 3, 189, 144, 69, 27, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {146, 114, 137, 191, 22, 226, 159, 191, 63, 80, 161, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {130, 183, 18, 63, 30, 101, 148, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0001/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}