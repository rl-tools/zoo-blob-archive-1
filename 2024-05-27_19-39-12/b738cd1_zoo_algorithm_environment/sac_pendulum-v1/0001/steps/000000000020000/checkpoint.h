// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {178, 120, 212, 59, 162, 249, 36, 190, 52, 102, 234, 62, 71, 204, 118, 62, 46, 19, 122, 191, 251, 109, 221, 190, 168, 185, 217, 62, 27, 158, 4, 190, 104, 16, 23, 191, 97, 202, 63, 191, 150, 73, 72, 191, 212, 197, 130, 190, 154, 33, 221, 190, 99, 11, 77, 62, 155, 76, 248, 190, 76, 49, 251, 190, 21, 46, 109, 190, 90, 55, 111, 62, 110, 216, 67, 61, 46, 115, 176, 191, 179, 209, 131, 190, 87, 251, 110, 190, 162, 102, 117, 63, 65, 44, 3, 190, 250, 121, 109, 190, 204, 167, 150, 63, 225, 128, 145, 62, 227, 41, 57, 62, 71, 135, 155, 63, 188, 166, 194, 62, 254, 24, 9, 63, 103, 137, 7, 191, 90, 59, 145, 190, 230, 121, 178, 190, 41, 255, 180, 191, 214, 177, 135, 61, 29, 29, 249, 62, 201, 76, 95, 63, 83, 74, 18, 63, 210, 212, 145, 61, 160, 97, 110, 191, 85, 2, 208, 190, 241, 88, 155, 62, 50, 11, 77, 62, 3, 193, 243, 190, 222, 137, 152, 191, 25, 58, 1, 63, 251, 139, 25, 61, 216, 40, 79, 63, 251, 33, 128, 191, 162, 241, 21, 190, 160, 149, 170, 190, 172, 202, 48, 191, 169, 247, 222, 62, 173, 72, 104, 189, 243, 133, 139, 191, 93, 32, 223, 62, 215, 70, 107, 191, 14, 11, 161, 62, 169, 117, 76, 62, 131, 87, 8, 189, 180, 245, 145, 191, 73, 213, 137, 190, 47, 71, 154, 190, 135, 229, 12, 63, 250, 124, 54, 190, 8, 255, 9, 62, 156, 163, 81, 63, 52, 2, 3, 61, 252, 66, 1, 191, 58, 192, 122, 190, 176, 159, 183, 62, 184, 161, 43, 63, 175, 97, 126, 63, 67, 134, 189, 62, 13, 115, 252, 62, 129, 180, 165, 190, 8, 244, 175, 190, 184, 252, 27, 190, 201, 94, 15, 191, 67, 11, 47, 191, 18, 210, 95, 63, 42, 32, 152, 63, 61, 52, 171, 62, 103, 32, 141, 188, 78, 90, 124, 63, 101, 143, 159, 62, 206, 172, 111, 62, 135, 56, 75, 191, 65, 48, 165, 190, 234, 200, 13, 62, 17, 194, 95, 63, 123, 241, 30, 63, 204, 253, 179, 189, 149, 73, 210, 62, 42, 47, 126, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 19, 151, 191, 4, 77, 13, 191, 30, 94, 79, 190, 26, 100, 199, 62, 145, 134, 239, 190, 200, 141, 27, 63, 18, 10, 8, 191, 247, 101, 176, 62, 219, 61, 85, 190, 102, 170, 89, 190, 224, 105, 250, 61, 203, 198, 14, 191, 127, 51, 82, 190, 141, 88, 51, 190, 100, 222, 17, 63, 77, 244, 37, 62, 8, 136, 244, 62, 201, 215, 194, 62, 157, 211, 196, 62, 76, 151, 194, 62, 108, 153, 168, 62, 92, 40, 99, 62, 206, 30, 237, 62, 112, 253, 138, 62, 170, 225, 13, 188, 204, 140, 221, 190, 108, 252, 30, 190, 10, 8, 224, 190, 32, 217, 219, 190, 26, 210, 85, 190, 111, 22, 248, 190, 77, 175, 9, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {112, 123, 132, 62, 189, 246, 178, 61, 102, 153, 136, 189, 165, 44, 78, 190, 129, 99, 113, 62, 132, 242, 243, 60, 113, 222, 189, 190, 221, 252, 155, 62, 216, 90, 155, 62, 162, 10, 4, 62, 220, 249, 118, 61, 190, 228, 85, 191, 95, 12, 161, 62, 240, 249, 117, 57, 82, 176, 253, 61, 42, 247, 115, 62, 198, 139, 96, 62, 168, 184, 80, 190, 253, 218, 165, 190, 202, 164, 33, 62, 252, 9, 207, 60, 232, 106, 140, 62, 62, 103, 196, 62, 96, 246, 118, 190, 9, 9, 63, 62, 124, 30, 130, 189, 115, 141, 17, 62, 182, 125, 200, 190, 151, 156, 203, 62, 28, 132, 50, 189, 1, 171, 168, 62, 123, 17, 200, 186, 243, 86, 173, 62, 23, 91, 231, 190, 87, 96, 123, 190, 129, 67, 28, 62, 18, 236, 141, 62, 205, 170, 167, 189, 209, 250, 158, 61, 15, 116, 172, 62, 19, 191, 17, 191, 27, 188, 136, 61, 240, 168, 178, 188, 87, 136, 196, 62, 113, 105, 50, 60, 26, 158, 33, 61, 156, 69, 24, 62, 136, 67, 116, 190, 45, 0, 156, 61, 177, 133, 61, 62, 230, 151, 10, 62, 240, 142, 178, 60, 200, 177, 135, 190, 143, 167, 110, 62, 171, 187, 71, 189, 130, 180, 78, 189, 166, 164, 23, 61, 45, 158, 66, 190, 99, 35, 170, 61, 193, 19, 47, 62, 55, 101, 141, 61, 147, 17, 15, 191, 108, 115, 128, 190, 185, 19, 59, 61, 199, 61, 191, 190, 15, 159, 145, 62, 82, 252, 186, 189, 54, 15, 143, 190, 141, 85, 16, 62, 65, 14, 9, 62, 37, 254, 116, 191, 177, 125, 174, 61, 227, 74, 254, 62, 16, 134, 55, 190, 23, 108, 59, 189, 199, 75, 210, 190, 82, 254, 156, 190, 176, 132, 103, 190, 210, 106, 183, 189, 226, 205, 150, 62, 127, 64, 247, 61, 140, 106, 105, 62, 243, 39, 194, 61, 162, 158, 36, 62, 74, 186, 167, 186, 219, 135, 202, 61, 174, 74, 201, 61, 55, 240, 219, 60, 12, 126, 135, 190, 81, 13, 115, 61, 34, 229, 212, 189, 49, 246, 147, 191, 24, 117, 175, 189, 189, 216, 208, 189, 94, 113, 37, 62, 246, 56, 99, 189, 140, 30, 219, 188, 197, 71, 61, 62, 136, 69, 72, 61, 168, 36, 217, 61, 14, 255, 229, 189, 77, 228, 118, 62, 11, 190, 83, 189, 45, 38, 36, 188, 183, 204, 186, 190, 164, 78, 178, 190, 72, 85, 109, 190, 77, 171, 148, 62, 230, 87, 8, 190, 246, 231, 246, 61, 68, 148, 63, 61, 220, 36, 229, 188, 234, 73, 12, 189, 178, 150, 152, 62, 55, 198, 21, 63, 177, 32, 107, 62, 83, 119, 165, 188, 14, 56, 1, 190, 73, 171, 18, 191, 231, 39, 207, 61, 146, 67, 103, 190, 197, 31, 22, 187, 160, 87, 212, 61, 23, 192, 239, 191, 15, 182, 234, 190, 105, 106, 145, 189, 86, 207, 12, 191, 102, 24, 131, 61, 199, 175, 244, 187, 124, 157, 107, 190, 166, 161, 16, 190, 168, 155, 23, 62, 82, 217, 24, 61, 51, 18, 170, 60, 127, 211, 155, 62, 247, 222, 165, 188, 135, 111, 172, 190, 77, 214, 113, 189, 95, 26, 143, 62, 72, 76, 15, 190, 124, 243, 179, 61, 16, 7, 87, 61, 149, 34, 52, 62, 203, 214, 178, 60, 21, 39, 178, 62, 1, 101, 51, 62, 3, 5, 56, 189, 145, 227, 131, 190, 176, 181, 62, 190, 31, 135, 15, 61, 4, 195, 186, 62, 55, 42, 149, 189, 67, 135, 45, 62, 2, 135, 42, 190, 187, 220, 95, 62, 29, 147, 10, 60, 103, 63, 183, 190, 11, 117, 171, 189, 234, 155, 161, 190, 34, 174, 43, 62, 224, 1, 62, 188, 30, 218, 214, 189, 70, 49, 177, 188, 110, 242, 166, 189, 41, 97, 28, 189, 209, 170, 1, 61, 140, 178, 27, 189, 254, 66, 8, 59, 214, 23, 105, 189, 193, 207, 168, 189, 229, 38, 12, 190, 72, 206, 219, 189, 127, 47, 133, 188, 185, 51, 71, 61, 132, 75, 17, 189, 201, 248, 191, 189, 120, 162, 17, 60, 164, 26, 34, 190, 189, 251, 13, 190, 251, 157, 234, 189, 12, 189, 102, 61, 62, 40, 8, 189, 19, 227, 154, 189, 157, 199, 127, 189, 197, 100, 42, 62, 182, 159, 159, 61, 177, 60, 55, 61, 167, 221, 11, 190, 42, 244, 254, 187, 125, 45, 63, 61, 131, 14, 166, 189, 34, 89, 32, 190, 48, 221, 16, 190, 244, 183, 23, 191, 225, 208, 165, 62, 203, 110, 130, 190, 156, 149, 145, 189, 175, 98, 236, 61, 102, 61, 139, 190, 125, 206, 209, 62, 102, 213, 210, 190, 108, 231, 179, 60, 66, 107, 49, 61, 16, 212, 251, 62, 29, 20, 50, 62, 61, 38, 252, 189, 28, 161, 211, 189, 82, 231, 243, 190, 0, 193, 203, 188, 216, 41, 2, 61, 45, 35, 222, 61, 96, 91, 119, 190, 114, 106, 76, 191, 194, 183, 8, 62, 205, 183, 94, 62, 4, 97, 138, 189, 160, 237, 190, 61, 183, 182, 202, 62, 91, 96, 142, 190, 79, 221, 12, 63, 127, 250, 253, 190, 54, 129, 196, 190, 157, 56, 243, 189, 82, 184, 22, 190, 67, 244, 139, 62, 180, 36, 134, 191, 13, 128, 57, 190, 89, 1, 3, 62, 150, 102, 164, 61, 28, 136, 173, 189, 193, 225, 38, 189, 102, 71, 208, 62, 224, 162, 249, 190, 72, 78, 77, 190, 79, 60, 149, 60, 159, 178, 161, 62, 51, 238, 143, 190, 176, 70, 8, 190, 50, 243, 76, 62, 3, 218, 238, 61, 186, 82, 171, 190, 15, 240, 247, 60, 84, 220, 238, 190, 244, 25, 206, 189, 147, 161, 227, 188, 226, 162, 80, 62, 41, 87, 32, 61, 232, 8, 66, 61, 251, 41, 129, 190, 6, 182, 5, 191, 41, 246, 238, 62, 224, 191, 33, 62, 89, 68, 192, 190, 166, 95, 25, 191, 7, 218, 165, 190, 30, 150, 20, 187, 61, 12, 109, 191, 135, 157, 7, 190, 222, 10, 255, 189, 230, 161, 191, 61, 184, 235, 249, 58, 107, 132, 181, 62, 133, 228, 207, 62, 173, 22, 169, 62, 97, 39, 196, 190, 141, 157, 218, 189, 100, 243, 34, 62, 43, 64, 176, 188, 131, 123, 82, 62, 203, 52, 114, 62, 94, 175, 156, 62, 77, 86, 87, 62, 32, 155, 191, 62, 149, 22, 73, 62, 124, 47, 241, 189, 131, 171, 178, 189, 227, 120, 189, 61, 235, 85, 79, 62, 38, 228, 19, 62, 175, 216, 25, 62, 100, 43, 108, 62, 97, 56, 92, 190, 228, 85, 40, 62, 68, 59, 202, 61, 171, 208, 161, 190, 186, 165, 187, 61, 247, 61, 89, 191, 90, 52, 13, 62, 113, 203, 10, 189, 139, 94, 114, 61, 218, 223, 40, 189, 66, 177, 0, 190, 41, 114, 61, 189, 212, 236, 51, 61, 29, 103, 11, 190, 182, 74, 35, 62, 199, 63, 36, 190, 156, 95, 70, 190, 195, 99, 129, 61, 193, 41, 43, 190, 21, 240, 134, 61, 221, 233, 44, 62, 53, 3, 63, 190, 203, 76, 48, 188, 57, 236, 146, 189, 186, 82, 55, 190, 52, 220, 64, 190, 127, 151, 190, 189, 13, 186, 33, 62, 100, 103, 96, 189, 209, 238, 101, 61, 73, 245, 27, 190, 25, 35, 253, 189, 10, 232, 179, 189, 57, 190, 14, 190, 82, 3, 6, 62, 157, 84, 128, 61, 104, 43, 127, 61, 68, 60, 23, 62, 240, 220, 208, 59, 241, 124, 49, 62, 100, 136, 111, 189, 217, 247, 41, 62, 177, 67, 154, 190, 52, 108, 175, 190, 105, 23, 18, 189, 69, 187, 1, 190, 190, 161, 9, 191, 254, 77, 59, 62, 58, 34, 153, 190, 166, 175, 180, 62, 12, 83, 72, 190, 94, 124, 72, 191, 34, 0, 230, 190, 142, 94, 139, 187, 97, 38, 239, 189, 62, 67, 224, 62, 106, 25, 42, 61, 253, 73, 243, 62, 201, 106, 207, 60, 10, 133, 121, 62, 104, 188, 218, 190, 169, 51, 51, 62, 36, 6, 167, 189, 199, 247, 109, 191, 194, 156, 73, 62, 33, 121, 163, 190, 148, 168, 174, 191, 237, 29, 254, 61, 41, 191, 244, 61, 16, 68, 172, 62, 159, 12, 52, 62, 231, 98, 8, 191, 84, 42, 188, 61, 115, 167, 63, 189, 121, 254, 44, 189, 183, 39, 71, 62, 228, 99, 101, 189, 220, 49, 189, 188, 127, 8, 17, 62, 79, 6, 66, 190, 49, 116, 154, 62, 16, 97, 144, 190, 133, 254, 212, 62, 136, 63, 3, 189, 131, 252, 36, 62, 233, 168, 239, 61, 114, 61, 164, 189, 226, 222, 174, 190, 92, 143, 193, 190, 250, 4, 132, 188, 246, 64, 181, 62, 160, 150, 10, 62, 147, 122, 195, 61, 134, 249, 228, 61, 30, 31, 50, 191, 145, 32, 233, 189, 78, 209, 228, 189, 32, 167, 173, 62, 156, 169, 139, 190, 73, 2, 187, 190, 255, 150, 155, 189, 176, 218, 151, 190, 155, 171, 5, 190, 211, 204, 30, 190, 108, 243, 116, 62, 4, 218, 151, 62, 2, 34, 49, 191, 224, 24, 57, 188, 12, 114, 137, 61, 219, 165, 196, 191, 63, 66, 172, 60, 244, 4, 38, 190, 85, 244, 32, 191, 147, 252, 139, 62, 191, 237, 103, 190, 251, 146, 148, 190, 185, 153, 223, 190, 44, 50, 245, 189, 104, 91, 1, 191, 44, 138, 231, 61, 99, 224, 103, 62, 26, 52, 61, 62, 124, 107, 37, 58, 253, 142, 233, 188, 129, 108, 33, 190, 57, 188, 169, 189, 202, 52, 75, 62, 56, 254, 245, 189, 84, 205, 2, 63, 96, 103, 66, 190, 93, 73, 173, 190, 208, 22, 160, 189, 10, 123, 187, 61, 217, 26, 204, 189, 180, 161, 21, 190, 90, 219, 25, 191, 96, 212, 9, 190, 243, 240, 39, 190, 153, 40, 153, 62, 10, 25, 138, 62, 236, 13, 152, 61, 233, 175, 145, 62, 173, 240, 12, 62, 252, 28, 190, 189, 38, 86, 213, 189, 26, 222, 81, 62, 147, 64, 2, 62, 118, 220, 218, 61, 3, 12, 179, 61, 158, 167, 42, 62, 209, 38, 136, 62, 66, 92, 220, 61, 205, 234, 58, 62, 210, 71, 201, 189, 169, 42, 158, 60, 95, 108, 147, 61, 55, 36, 201, 189, 232, 171, 30, 62, 137, 105, 178, 189, 58, 167, 89, 62, 117, 178, 167, 190, 123, 12, 142, 62, 157, 16, 28, 62, 107, 5, 145, 190, 83, 90, 186, 57, 154, 155, 174, 190, 41, 232, 212, 189, 153, 99, 112, 62, 218, 122, 3, 191, 101, 226, 214, 190, 250, 117, 119, 62, 173, 9, 146, 62, 65, 95, 8, 190, 217, 215, 179, 62, 215, 167, 154, 62, 158, 200, 35, 191, 103, 206, 244, 189, 15, 175, 165, 188, 183, 26, 65, 62, 87, 146, 117, 62, 29, 48, 65, 190, 179, 135, 199, 188, 62, 225, 164, 59, 26, 191, 117, 187, 145, 122, 77, 189, 9, 196, 50, 189, 64, 56, 171, 190, 127, 238, 136, 190, 14, 31, 202, 62, 94, 45, 145, 60, 229, 5, 197, 189, 217, 201, 173, 62, 181, 61, 238, 190, 215, 161, 141, 62, 31, 246, 6, 63, 70, 245, 201, 189, 230, 107, 206, 190, 110, 189, 43, 188, 209, 216, 12, 62, 73, 168, 235, 189, 37, 132, 39, 191, 2, 12, 148, 59, 39, 124, 9, 191, 105, 122, 123, 190, 80, 239, 33, 62, 117, 223, 64, 191, 12, 182, 86, 190, 168, 41, 130, 191, 180, 43, 151, 191, 255, 43, 224, 62, 196, 240, 2, 63, 163, 229, 104, 188, 68, 16, 203, 190, 246, 51, 46, 62, 81, 83, 129, 190, 86, 189, 239, 62, 122, 55, 242, 187, 191, 132, 192, 62, 229, 68, 75, 62, 157, 176, 188, 62, 251, 138, 220, 189, 250, 228, 19, 189, 5, 41, 28, 190, 17, 147, 133, 189, 4, 78, 195, 61, 135, 47, 73, 190, 174, 194, 49, 191, 162, 248, 142, 190, 134, 198, 93, 190, 11, 241, 170, 190, 127, 60, 222, 189, 222, 203, 36, 190, 94, 8, 29, 190, 201, 48, 56, 61, 70, 163, 69, 190, 198, 250, 171, 189, 244, 148, 20, 188, 153, 184, 81, 189, 231, 118, 58, 190, 113, 8, 40, 189, 161, 213, 100, 189, 78, 169, 85, 61, 34, 5, 5, 190, 163, 68, 158, 189, 226, 58, 186, 61, 125, 115, 79, 189, 17, 109, 188, 61, 158, 161, 20, 190, 218, 124, 111, 189, 134, 242, 33, 190, 138, 110, 64, 189, 140, 163, 74, 186, 82, 40, 82, 189, 164, 15, 250, 189, 25, 251, 231, 189, 210, 39, 254, 61, 7, 8, 203, 61, 231, 161, 198, 61, 102, 178, 48, 190, 170, 87, 107, 61, 69, 100, 209, 61, 5, 218, 214, 189, 50, 142, 151, 188, 193, 94, 46, 62, 68, 71, 128, 189, 163, 185, 35, 62, 126, 90, 254, 189, 82, 175, 134, 60, 119, 67, 30, 190, 208, 253, 20, 189, 60, 64, 112, 189, 248, 240, 220, 189, 2, 187, 17, 190, 100, 172, 201, 189, 243, 152, 109, 189, 94, 125, 49, 62, 32, 48, 1, 190, 166, 80, 233, 189, 139, 134, 10, 62, 159, 13, 143, 189, 76, 95, 51, 190, 147, 231, 87, 188, 249, 24, 30, 190, 20, 165, 15, 190, 47, 11, 37, 190, 24, 154, 76, 61, 48, 162, 27, 190, 247, 27, 97, 187, 31, 211, 206, 189, 25, 143, 192, 61, 166, 125, 15, 190, 218, 82, 221, 189, 38, 34, 201, 189, 236, 34, 6, 62, 231, 57, 127, 60, 84, 152, 66, 190, 1, 127, 175, 190, 38, 162, 141, 61, 244, 59, 224, 59, 31, 105, 160, 62, 169, 216, 63, 190, 145, 29, 142, 190, 169, 161, 194, 62, 242, 195, 231, 62, 100, 127, 3, 191, 15, 48, 31, 191, 204, 11, 23, 191, 223, 4, 7, 191, 26, 2, 130, 191, 106, 85, 76, 187, 246, 245, 188, 62, 76, 244, 72, 191, 246, 234, 19, 191, 110, 87, 64, 191, 26, 161, 115, 61, 7, 110, 1, 190, 151, 44, 147, 62, 40, 84, 172, 62, 238, 37, 26, 191, 89, 115, 26, 62, 239, 153, 254, 190, 52, 228, 239, 190, 251, 213, 28, 63, 141, 161, 96, 191, 25, 65, 185, 190, 70, 12, 1, 191, 227, 153, 172, 60, 165, 217, 227, 190, 130, 48, 56, 190, 242, 133, 163, 61, 238, 5, 151, 190, 113, 200, 162, 61, 141, 164, 197, 61, 29, 42, 223, 190, 104, 84, 99, 61, 198, 231, 124, 62, 60, 123, 224, 190, 150, 135, 145, 61, 198, 182, 101, 62, 231, 216, 189, 189, 44, 159, 24, 190, 75, 19, 2, 190, 144, 209, 175, 186, 78, 234, 155, 62, 184, 227, 170, 61, 32, 53, 220, 60, 101, 103, 194, 62, 46, 53, 255, 61, 91, 182, 96, 62, 185, 132, 170, 62, 154, 23, 236, 61, 75, 15, 70, 189, 78, 250, 185, 189, 109, 22, 98, 190, 16, 43, 160, 191, 239, 149, 208, 61, 234, 181, 93, 60, 108, 186, 221, 59, 184, 198, 255, 61, 81, 242, 11, 190, 230, 203, 80, 191, 140, 52, 188, 190, 39, 133, 41, 189, 214, 110, 56, 61, 8, 134, 251, 59, 196, 13, 221, 62, 226, 68, 144, 189, 167, 246, 255, 189, 163, 52, 201, 190, 23, 128, 235, 61, 70, 160, 34, 63, 146, 177, 114, 191, 80, 135, 22, 62, 226, 58, 90, 61, 189, 83, 26, 190, 47, 43, 59, 190, 223, 0, 178, 62, 7, 233, 38, 62, 220, 22, 149, 190, 101, 157, 141, 62, 219, 120, 170, 187, 217, 238, 62, 191, 98, 222, 147, 62, 78, 138, 202, 191, 180, 137, 11, 62, 109, 12, 131, 190, 208, 224, 159, 189, 6, 191, 31, 191, 83, 244, 191, 190, 125, 200, 131, 191, 190, 30, 230, 188, 201, 96, 233, 62, 51, 74, 84, 191, 135, 212, 15, 190, 176, 109, 124, 62, 214, 33, 44, 62, 44, 71, 88, 190, 112, 107, 8, 191, 11, 121, 157, 62, 98, 181, 22, 191, 238, 40, 72, 189, 24, 122, 49, 189, 145, 143, 217, 62, 234, 54, 141, 62, 164, 214, 138, 62, 103, 155, 29, 62, 14, 197, 12, 190, 104, 108, 217, 61, 142, 249, 198, 189, 196, 223, 191, 189, 108, 81, 201, 190, 248, 121, 224, 190, 230, 143, 191, 62, 213, 80, 11, 189, 160, 8, 164, 189, 231, 154, 120, 62, 120, 162, 152, 190, 36, 80, 50, 62, 184, 215, 15, 62, 127, 114, 250, 189, 239, 26, 209, 190, 145, 127, 209, 189, 117, 162, 0, 61, 113, 186, 151, 190, 91, 131, 163, 189, 5, 39, 80, 61, 246, 102, 180, 61, 187, 36, 129, 62, 111, 87, 161, 190, 162, 229, 136, 62, 5, 92, 24, 62, 98, 218, 59, 189, 82, 65, 62, 62, 55, 253, 214, 189, 135, 3, 236, 61, 253, 75, 6, 62, 240, 245, 214, 188, 14, 28, 105, 62, 22, 188, 237, 61, 58, 183, 104, 189, 23, 168, 21, 191, 63, 126, 254, 190, 9, 251, 236, 61, 66, 134, 197, 190, 71, 45, 34, 62, 181, 112, 239, 189, 189, 198, 67, 189, 231, 151, 216, 61, 183, 37, 67, 190, 6, 0, 226, 188, 214, 85, 55, 62, 17, 79, 67, 189, 84, 134, 171, 190, 2, 32, 93, 61, 30, 94, 31, 189, 248, 143, 14, 190, 141, 115, 173, 189, 207, 190, 217, 61, 114, 7, 207, 190, 251, 153, 69, 191, 82, 249, 25, 62, 84, 243, 36, 191, 246, 88, 164, 190, 37, 81, 143, 62, 223, 218, 37, 190, 1, 89, 154, 62, 191, 244, 67, 190, 53, 142, 99, 188, 142, 145, 155, 191, 246, 231, 79, 190, 188, 146, 149, 189, 170, 5, 130, 62, 176, 72, 36, 58, 184, 127, 223, 60, 243, 245, 174, 61, 49, 169, 84, 62, 55, 199, 218, 190, 169, 31, 252, 59, 215, 2, 80, 62, 202, 29, 172, 61, 216, 31, 143, 190, 207, 223, 237, 190, 63, 142, 68, 190, 180, 234, 79, 62, 184, 239, 18, 62, 19, 21, 66, 60, 195, 22, 167, 189, 75, 147, 250, 60, 175, 251, 62, 61, 100, 242, 187, 190, 181, 48, 129, 190, 39, 108, 94, 62, 31, 10, 250, 190, 202, 104, 50, 187, 185, 9, 211, 61, 153, 250, 15, 191, 90, 77, 166, 61, 131, 169, 205, 189, 59, 219, 248, 189, 220, 199, 148, 61, 190, 252, 136, 62, 3, 88, 15, 62, 160, 9, 233, 190, 222, 8, 217, 186, 66, 9, 173, 190, 236, 43, 96, 190, 20, 91, 19, 191, 24, 184, 147, 190, 59, 75, 63, 62, 49, 35, 141, 62, 17, 248, 60, 190, 57, 37, 110, 62, 112, 183, 205, 190, 160, 139, 171, 60, 49, 81, 14, 63, 125, 66, 196, 190, 50, 145, 1, 191, 87, 180, 127, 190, 170, 235, 176, 189, 135, 58, 1, 189, 146, 134, 26, 191, 154, 217, 9, 190, 98, 31, 24, 190, 168, 12, 171, 190, 101, 67, 86, 62, 14, 8, 115, 189, 175, 41, 74, 188, 41, 182, 117, 61, 147, 200, 1, 191, 122, 209, 24, 190, 169, 104, 179, 62, 114, 40, 13, 188, 136, 248, 186, 190, 36, 201, 66, 62, 40, 236, 154, 62, 208, 193, 163, 62, 25, 7, 206, 189, 221, 91, 65, 61, 202, 100, 139, 62, 241, 42, 55, 62, 25, 61, 139, 61, 135, 231, 16, 62, 84, 97, 56, 189, 117, 200, 70, 189, 222, 142, 11, 191, 110, 247, 199, 189, 96, 232, 137, 191, 37, 152, 215, 189, 235, 202, 122, 190, 224, 131, 157, 189, 109, 20, 12, 62, 255, 70, 1, 189, 62, 140, 68, 61, 82, 106, 50, 190, 232, 90, 60, 61, 173, 107, 192, 60, 47, 132, 219, 61, 170, 168, 206, 185, 172, 93, 58, 190, 43, 91, 61, 190, 146, 143, 173, 60, 240, 124, 80, 61, 113, 232, 186, 189, 182, 71, 96, 189, 116, 164, 109, 61, 178, 190, 78, 190, 94, 232, 254, 189, 182, 223, 192, 189, 1, 6, 9, 61, 195, 190, 135, 189, 230, 165, 246, 189, 174, 222, 158, 188, 138, 96, 42, 190, 222, 65, 57, 190, 15, 250, 155, 57, 101, 73, 3, 190, 62, 235, 74, 61, 233, 160, 8, 60, 140, 248, 111, 189, 194, 3, 197, 189, 114, 40, 135, 190, 126, 110, 58, 189, 140, 149, 175, 189, 249, 119, 201, 189, 81, 184, 203, 190, 70, 14, 90, 189, 58, 103, 235, 60, 220, 243, 8, 62, 28, 237, 128, 190, 241, 91, 36, 58, 131, 71, 189, 189, 93, 55, 39, 190, 96, 59, 152, 62, 118, 212, 200, 61, 255, 76, 43, 190, 28, 84, 144, 61, 58, 59, 171, 61, 211, 104, 86, 62, 7, 190, 44, 190, 187, 254, 57, 190, 95, 70, 212, 190, 141, 227, 56, 190, 106, 211, 229, 190, 197, 245, 17, 190, 104, 40, 11, 62, 161, 229, 87, 188, 197, 91, 245, 190, 6, 205, 166, 62, 134, 245, 170, 190, 53, 181, 86, 62, 192, 111, 178, 61, 139, 42, 32, 189, 62, 29, 15, 190, 109, 174, 105, 190, 160, 163, 23, 62, 240, 71, 58, 189, 92, 229, 47, 190, 99, 137, 126, 60, 22, 25, 74, 190, 195, 15, 133, 61, 83, 190, 225, 189, 233, 29, 30, 190, 196, 145, 3, 190, 243, 0, 210, 189, 222, 155, 0, 61, 82, 111, 51, 190, 92, 211, 174, 189, 202, 123, 74, 190, 203, 72, 46, 190, 36, 36, 50, 190, 80, 87, 145, 61, 187, 77, 205, 189, 34, 135, 118, 188, 7, 250, 135, 61, 200, 62, 70, 61, 198, 224, 38, 61, 66, 179, 61, 189, 188, 156, 240, 189, 90, 23, 77, 189, 196, 45, 182, 189, 165, 74, 13, 189, 218, 76, 30, 188, 72, 114, 36, 190, 195, 30, 253, 189, 204, 104, 49, 189, 175, 51, 141, 61, 206, 204, 171, 60, 104, 122, 21, 190, 10, 173, 233, 189, 143, 23, 202, 58, 76, 109, 245, 189, 189, 62, 247, 61, 48, 3, 130, 62, 234, 68, 35, 190, 202, 191, 150, 61, 140, 176, 34, 62, 6, 40, 179, 61, 76, 132, 198, 190, 131, 235, 76, 62, 244, 20, 145, 62, 226, 4, 158, 60, 131, 191, 179, 61, 250, 241, 31, 62, 221, 241, 9, 61, 83, 231, 165, 187, 56, 113, 1, 62, 140, 1, 78, 62, 43, 112, 229, 189, 28, 143, 250, 187, 25, 239, 211, 61, 45, 195, 85, 189, 191, 92, 91, 188, 216, 80, 19, 190, 42, 242, 73, 62, 9, 92, 152, 191, 67, 200, 234, 190, 192, 232, 177, 61, 185, 217, 244, 190, 233, 115, 2, 62, 100, 144, 201, 190, 99, 81, 169, 62, 14, 106, 86, 62, 82, 19, 80, 190, 81, 171, 206, 60, 12, 80, 232, 60, 170, 234, 217, 190, 33, 86, 253, 59, 14, 113, 202, 61, 63, 160, 234, 62, 0, 25, 122, 61, 180, 205, 17, 191, 246, 28, 164, 62, 133, 108, 81, 62, 217, 41, 134, 189, 23, 80, 104, 191, 0, 180, 191, 189, 220, 187, 106, 190, 168, 159, 172, 190, 185, 238, 255, 190, 133, 41, 19, 190, 74, 190, 50, 61, 68, 30, 201, 188, 146, 144, 116, 190, 58, 161, 249, 61, 130, 117, 141, 62, 144, 57, 7, 62, 197, 66, 76, 62, 130, 38, 65, 62, 153, 157, 88, 62, 173, 136, 133, 62, 231, 42, 103, 188, 247, 225, 4, 190, 213, 254, 122, 62, 23, 179, 174, 62, 107, 104, 133, 187, 161, 242, 192, 61, 247, 123, 139, 60, 86, 143, 128, 191, 196, 121, 52, 189, 93, 59, 166, 62, 133, 112, 213, 191, 192, 43, 26, 63, 160, 60, 151, 191, 6, 86, 161, 190, 198, 210, 97, 190, 53, 50, 215, 58, 131, 16, 134, 61, 149, 238, 89, 62, 177, 124, 4, 189, 37, 62, 62, 190, 216, 227, 65, 60, 88, 183, 173, 189, 106, 71, 32, 62, 49, 57, 1, 62, 88, 129, 55, 191, 130, 19, 224, 189, 55, 124, 248, 62, 182, 93, 141, 190, 130, 56, 161, 190, 75, 138, 242, 190, 100, 181, 139, 62, 183, 237, 132, 190, 214, 57, 176, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {212, 79, 64, 61, 23, 78, 91, 62, 52, 241, 237, 60, 60, 40, 64, 190, 241, 110, 80, 62, 222, 25, 166, 59, 105, 136, 68, 189, 10, 100, 141, 188, 41, 158, 9, 63, 244, 64, 168, 189, 116, 114, 18, 62, 134, 71, 107, 61, 98, 106, 140, 61, 19, 223, 166, 62, 115, 86, 50, 187, 9, 171, 241, 188, 181, 195, 54, 190, 163, 4, 39, 190, 139, 23, 195, 189, 72, 56, 159, 62, 151, 113, 42, 62, 62, 61, 210, 61, 36, 61, 10, 61, 89, 119, 135, 62, 49, 92, 54, 190, 126, 204, 196, 62, 180, 248, 52, 61, 65, 177, 208, 61, 99, 78, 220, 60, 237, 226, 41, 61, 74, 240, 215, 190, 242, 207, 177, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {229, 201, 127, 62, 46, 126, 80, 190, 253, 251, 27, 63, 245, 230, 194, 62, 200, 51, 55, 190, 26, 1, 24, 189, 146, 5, 37, 191, 86, 152, 44, 191, 179, 94, 234, 190, 254, 255, 16, 189, 71, 239, 27, 190, 117, 191, 152, 62, 248, 98, 226, 62, 16, 95, 94, 190, 48, 225, 225, 190, 134, 91, 32, 63, 222, 58, 156, 189, 164, 50, 20, 61, 44, 205, 105, 63, 208, 124, 227, 62, 229, 186, 147, 191, 72, 130, 189, 190, 28, 15, 83, 190, 47, 39, 189, 62, 185, 126, 34, 62, 86, 92, 180, 62, 233, 84, 120, 189, 96, 212, 161, 189, 109, 104, 8, 62, 196, 228, 114, 62, 4, 108, 100, 63, 39, 84, 24, 63, 255, 105, 169, 189, 104, 100, 166, 190, 196, 19, 116, 62, 181, 56, 27, 62, 22, 61, 116, 190, 141, 59, 15, 62, 56, 144, 11, 190, 56, 73, 218, 62, 250, 143, 188, 190, 208, 187, 20, 190, 215, 173, 147, 63, 80, 167, 1, 63, 55, 155, 58, 62, 60, 59, 216, 189, 245, 166, 92, 62, 213, 62, 221, 190, 120, 171, 139, 189, 160, 240, 152, 189, 85, 108, 222, 61, 154, 209, 84, 190, 64, 36, 146, 62, 0, 2, 195, 190, 3, 127, 19, 190, 78, 174, 30, 190, 55, 9, 133, 63, 20, 69, 6, 191, 25, 124, 146, 61, 213, 45, 38, 190, 170, 14, 124, 189, 68, 151, 22, 189, 54, 182, 38, 189, 214, 192, 10, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {6, 40, 138, 189, 68, 88, 49, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {161, 64, 198, 63, 191, 137, 159, 63, 160, 126, 8, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {90, 33, 70, 192, 78, 163, 243, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0001/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}