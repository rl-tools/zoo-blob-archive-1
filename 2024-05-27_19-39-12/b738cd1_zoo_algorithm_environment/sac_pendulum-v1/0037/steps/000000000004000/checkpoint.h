// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 236, 104, 63, 220, 112, 194, 62, 51, 74, 241, 61, 9, 106, 150, 189, 72, 22, 62, 63, 180, 51, 133, 62, 246, 56, 92, 189, 202, 20, 47, 63, 151, 216, 153, 60, 0, 63, 128, 190, 215, 102, 126, 191, 14, 48, 44, 190, 162, 1, 177, 190, 227, 2, 14, 63, 191, 173, 93, 189, 117, 59, 20, 191, 234, 187, 4, 191, 178, 94, 129, 189, 82, 65, 46, 191, 235, 133, 226, 189, 225, 121, 46, 63, 178, 113, 216, 62, 148, 132, 164, 62, 250, 4, 215, 62, 143, 197, 176, 62, 98, 76, 109, 63, 180, 206, 204, 190, 23, 159, 153, 62, 120, 58, 228, 62, 219, 143, 245, 62, 188, 164, 186, 189, 13, 204, 133, 62, 195, 185, 65, 62, 188, 169, 152, 62, 28, 19, 18, 191, 38, 120, 192, 62, 72, 238, 16, 63, 145, 144, 67, 191, 132, 64, 197, 190, 149, 221, 92, 60, 109, 243, 6, 189, 120, 63, 147, 190, 252, 13, 0, 191, 160, 97, 167, 190, 187, 219, 135, 190, 182, 11, 214, 190, 53, 162, 17, 63, 180, 172, 39, 191, 134, 83, 109, 62, 86, 142, 34, 191, 38, 4, 19, 60, 237, 183, 4, 63, 145, 244, 25, 191, 41, 119, 179, 61, 218, 83, 161, 61, 17, 195, 13, 191, 245, 117, 145, 62, 21, 181, 142, 62, 144, 208, 84, 63, 8, 241, 191, 190, 232, 181, 31, 60, 35, 35, 97, 62, 125, 23, 6, 191, 235, 47, 38, 63, 97, 82, 105, 63, 17, 89, 163, 189, 207, 101, 200, 61, 62, 68, 38, 63, 97, 51, 17, 61, 62, 228, 166, 190, 133, 213, 36, 61, 14, 180, 50, 191, 17, 240, 161, 62, 46, 230, 27, 191, 41, 6, 28, 63, 254, 172, 15, 63, 49, 20, 107, 63, 213, 163, 156, 62, 14, 121, 34, 63, 80, 189, 158, 190, 10, 156, 94, 190, 43, 231, 35, 63, 204, 160, 1, 191, 217, 109, 147, 190, 249, 101, 75, 63, 11, 169, 57, 63, 249, 171, 41, 63, 149, 61, 30, 191, 42, 209, 190, 190, 48, 131, 95, 63, 48, 158, 52, 190, 3, 32, 223, 190, 39, 222, 38, 63, 157, 173, 11, 63, 165, 58, 158, 190, 88, 203, 24, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 188, 249, 190, 72, 169, 215, 190, 139, 115, 232, 62, 86, 65, 66, 62, 232, 70, 97, 62, 158, 226, 238, 62, 189, 132, 172, 190, 170, 164, 140, 62, 125, 237, 243, 62, 211, 59, 12, 191, 37, 252, 67, 190, 245, 192, 110, 62, 245, 217, 163, 190, 210, 55, 23, 191, 172, 2, 45, 190, 159, 0, 100, 190, 252, 71, 201, 61, 26, 244, 14, 191, 16, 71, 133, 61, 20, 166, 203, 62, 196, 35, 245, 61, 51, 156, 14, 63, 115, 204, 88, 63, 142, 105, 252, 189, 199, 153, 140, 62, 164, 84, 118, 59, 213, 97, 136, 62, 34, 172, 81, 190, 28, 232, 168, 190, 128, 144, 199, 190, 248, 101, 113, 189, 235, 25, 34, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 175, 219, 61, 227, 46, 138, 61, 142, 124, 197, 61, 5, 164, 14, 62, 65, 188, 169, 61, 150, 68, 8, 62, 82, 87, 141, 61, 13, 56, 40, 62, 139, 225, 176, 61, 140, 113, 245, 189, 35, 243, 28, 190, 92, 147, 227, 188, 8, 91, 223, 189, 86, 255, 138, 190, 110, 5, 33, 61, 231, 38, 139, 189, 53, 180, 131, 61, 106, 167, 51, 187, 194, 64, 228, 188, 171, 52, 191, 59, 190, 20, 76, 61, 126, 25, 183, 61, 236, 166, 157, 61, 162, 199, 241, 61, 195, 177, 85, 60, 169, 192, 14, 190, 244, 254, 98, 62, 109, 198, 189, 189, 31, 63, 47, 61, 20, 92, 94, 61, 136, 249, 199, 188, 83, 136, 52, 190, 118, 241, 207, 187, 211, 230, 153, 187, 92, 219, 40, 190, 149, 160, 118, 186, 23, 148, 103, 190, 160, 87, 145, 61, 57, 122, 132, 190, 32, 76, 102, 189, 99, 214, 12, 62, 113, 150, 160, 188, 39, 161, 144, 189, 161, 96, 22, 189, 36, 25, 30, 62, 127, 168, 72, 189, 123, 207, 105, 189, 52, 66, 138, 190, 165, 34, 119, 62, 112, 42, 16, 189, 102, 203, 120, 190, 99, 215, 22, 189, 216, 97, 157, 61, 223, 19, 24, 61, 52, 147, 232, 61, 94, 87, 100, 190, 154, 95, 45, 61, 129, 12, 215, 189, 74, 53, 29, 62, 44, 142, 147, 62, 124, 114, 11, 61, 180, 89, 133, 190, 190, 248, 215, 60, 197, 173, 42, 190, 208, 79, 179, 59, 54, 37, 20, 190, 189, 119, 138, 190, 212, 75, 53, 62, 46, 197, 177, 189, 3, 249, 209, 187, 130, 144, 99, 61, 198, 112, 222, 189, 210, 208, 135, 190, 117, 180, 48, 190, 95, 86, 225, 61, 132, 1, 83, 187, 37, 4, 131, 59, 60, 38, 173, 61, 100, 3, 99, 61, 167, 137, 183, 61, 245, 229, 71, 61, 14, 100, 139, 60, 167, 84, 229, 61, 249, 121, 139, 190, 42, 220, 42, 190, 130, 72, 71, 190, 98, 16, 133, 186, 46, 199, 16, 190, 255, 109, 151, 61, 53, 40, 197, 189, 195, 2, 22, 62, 154, 70, 148, 61, 158, 102, 54, 190, 109, 17, 24, 190, 109, 191, 26, 61, 213, 124, 41, 190, 32, 207, 205, 61, 29, 89, 211, 61, 21, 136, 6, 62, 226, 29, 149, 61, 247, 47, 182, 188, 147, 177, 37, 190, 58, 40, 93, 190, 23, 194, 200, 60, 251, 88, 51, 190, 22, 49, 40, 62, 147, 239, 14, 62, 87, 23, 106, 189, 132, 5, 173, 188, 56, 122, 208, 61, 165, 106, 140, 61, 87, 148, 190, 187, 203, 87, 201, 188, 174, 207, 132, 190, 134, 208, 188, 61, 65, 196, 157, 61, 88, 126, 195, 61, 254, 11, 202, 188, 33, 28, 76, 190, 224, 88, 103, 190, 67, 191, 186, 189, 184, 183, 197, 61, 147, 98, 48, 190, 247, 249, 115, 62, 62, 188, 49, 62, 180, 67, 28, 61, 174, 41, 6, 61, 157, 1, 1, 62, 249, 204, 82, 187, 207, 3, 6, 61, 67, 7, 25, 190, 97, 156, 51, 190, 20, 65, 22, 62, 88, 1, 18, 190, 18, 119, 11, 190, 14, 87, 31, 190, 191, 139, 170, 61, 50, 53, 230, 189, 214, 150, 50, 190, 53, 37, 211, 61, 91, 232, 214, 189, 244, 15, 143, 189, 75, 168, 208, 61, 176, 27, 70, 59, 124, 9, 190, 61, 138, 24, 39, 190, 138, 217, 144, 61, 226, 154, 116, 189, 164, 130, 253, 188, 133, 158, 178, 189, 131, 29, 123, 189, 154, 9, 166, 189, 42, 209, 6, 190, 167, 227, 231, 189, 15, 211, 16, 190, 182, 234, 224, 61, 85, 92, 156, 61, 23, 165, 28, 188, 171, 51, 44, 62, 251, 1, 113, 60, 209, 99, 132, 62, 105, 62, 120, 60, 153, 124, 187, 187, 6, 4, 85, 190, 179, 51, 134, 189, 176, 175, 165, 189, 157, 181, 252, 61, 118, 19, 68, 61, 190, 163, 77, 61, 26, 138, 160, 190, 61, 200, 72, 189, 212, 4, 75, 62, 4, 168, 93, 60, 176, 207, 127, 190, 65, 116, 72, 189, 253, 165, 31, 190, 230, 49, 103, 62, 140, 94, 152, 62, 36, 152, 58, 190, 238, 168, 29, 61, 89, 93, 84, 61, 69, 45, 42, 62, 216, 166, 207, 61, 26, 11, 69, 190, 112, 90, 92, 61, 241, 63, 144, 59, 31, 201, 110, 62, 212, 123, 134, 189, 142, 69, 148, 190, 5, 37, 156, 61, 17, 180, 8, 61, 51, 131, 44, 190, 179, 234, 97, 61, 202, 115, 31, 61, 3, 184, 82, 191, 79, 90, 45, 62, 16, 12, 68, 191, 136, 190, 156, 61, 81, 36, 15, 62, 162, 112, 56, 190, 204, 51, 253, 189, 145, 214, 35, 61, 79, 240, 4, 62, 112, 118, 48, 190, 45, 114, 96, 62, 17, 141, 8, 62, 7, 1, 53, 61, 193, 242, 11, 189, 36, 204, 254, 188, 169, 75, 133, 189, 166, 12, 70, 190, 245, 58, 80, 188, 91, 107, 168, 61, 92, 147, 180, 190, 82, 30, 237, 190, 144, 128, 150, 61, 247, 171, 110, 190, 118, 243, 155, 189, 97, 10, 215, 189, 213, 154, 211, 61, 63, 167, 155, 61, 22, 7, 19, 190, 126, 215, 184, 60, 197, 111, 83, 62, 95, 108, 254, 189, 129, 71, 163, 61, 241, 34, 207, 189, 57, 109, 137, 61, 239, 189, 149, 62, 168, 220, 151, 62, 93, 208, 237, 190, 60, 72, 92, 61, 57, 223, 12, 190, 49, 227, 88, 190, 249, 183, 208, 189, 78, 198, 202, 190, 38, 156, 135, 190, 64, 172, 7, 61, 37, 239, 227, 188, 141, 107, 48, 62, 198, 219, 111, 61, 44, 153, 4, 59, 15, 198, 93, 190, 137, 163, 132, 190, 1, 255, 193, 187, 73, 228, 121, 190, 89, 155, 11, 61, 112, 47, 86, 61, 85, 154, 16, 191, 23, 114, 109, 190, 110, 54, 106, 61, 233, 216, 156, 190, 101, 113, 85, 190, 36, 123, 52, 191, 27, 127, 25, 191, 204, 0, 73, 190, 16, 195, 197, 189, 253, 193, 146, 190, 246, 189, 14, 61, 62, 34, 220, 61, 191, 182, 65, 190, 108, 154, 88, 62, 51, 37, 64, 189, 253, 34, 174, 187, 24, 47, 74, 58, 226, 17, 179, 190, 245, 99, 92, 188, 222, 81, 63, 61, 203, 217, 241, 61, 118, 121, 4, 190, 209, 212, 46, 190, 140, 90, 92, 190, 27, 240, 125, 62, 200, 204, 118, 190, 123, 190, 141, 62, 133, 246, 226, 60, 189, 57, 40, 189, 220, 236, 164, 190, 238, 104, 177, 190, 214, 16, 33, 61, 38, 203, 82, 189, 103, 168, 139, 190, 93, 170, 157, 189, 62, 28, 137, 62, 49, 104, 188, 190, 169, 105, 55, 61, 6, 32, 67, 62, 233, 19, 64, 62, 66, 60, 139, 61, 8, 191, 133, 189, 142, 154, 97, 62, 212, 122, 83, 188, 236, 170, 210, 62, 26, 18, 61, 62, 22, 0, 41, 187, 40, 40, 251, 189, 168, 29, 233, 190, 49, 71, 115, 190, 60, 60, 85, 190, 152, 202, 210, 189, 232, 171, 20, 190, 213, 73, 133, 188, 23, 64, 196, 60, 159, 226, 35, 191, 102, 217, 254, 189, 112, 211, 234, 189, 52, 29, 29, 191, 254, 73, 166, 61, 79, 59, 13, 191, 47, 58, 8, 190, 204, 5, 5, 62, 99, 162, 78, 191, 51, 106, 53, 190, 91, 237, 60, 189, 160, 117, 179, 190, 239, 178, 9, 190, 158, 254, 50, 189, 101, 156, 7, 62, 137, 44, 192, 189, 176, 176, 163, 61, 59, 30, 2, 189, 209, 220, 145, 61, 222, 180, 117, 188, 15, 141, 32, 61, 218, 44, 163, 62, 97, 57, 108, 62, 0, 130, 15, 191, 230, 146, 6, 190, 226, 26, 115, 61, 114, 226, 74, 190, 195, 214, 182, 61, 109, 99, 6, 191, 107, 77, 133, 189, 220, 106, 57, 190, 82, 91, 148, 62, 52, 147, 129, 62, 219, 228, 16, 190, 220, 13, 4, 190, 247, 161, 24, 190, 134, 25, 161, 190, 39, 11, 179, 60, 120, 58, 48, 62, 207, 153, 174, 62, 255, 73, 10, 190, 22, 13, 77, 191, 116, 1, 80, 62, 133, 138, 177, 189, 59, 130, 165, 190, 24, 153, 219, 188, 57, 32, 55, 191, 9, 40, 91, 191, 9, 139, 224, 189, 81, 48, 4, 190, 181, 231, 40, 189, 195, 90, 23, 62, 228, 10, 187, 189, 211, 229, 18, 62, 101, 186, 180, 61, 232, 22, 146, 188, 46, 8, 67, 61, 249, 169, 119, 190, 241, 58, 137, 190, 187, 212, 229, 189, 44, 231, 106, 62, 149, 76, 162, 62, 61, 178, 32, 61, 198, 234, 14, 190, 90, 6, 249, 190, 0, 222, 37, 62, 82, 201, 198, 188, 189, 92, 149, 189, 101, 26, 232, 61, 111, 5, 44, 190, 113, 45, 164, 61, 185, 235, 17, 62, 7, 133, 62, 190, 82, 246, 137, 60, 109, 202, 59, 190, 199, 30, 139, 62, 47, 218, 91, 62, 97, 233, 17, 189, 141, 245, 58, 61, 74, 31, 200, 188, 17, 85, 148, 62, 92, 80, 55, 61, 160, 218, 255, 187, 88, 70, 218, 61, 115, 14, 126, 61, 155, 105, 130, 189, 172, 175, 1, 62, 194, 190, 199, 61, 59, 3, 246, 189, 201, 248, 100, 190, 136, 43, 133, 189, 230, 71, 133, 58, 230, 244, 117, 62, 110, 149, 128, 62, 71, 201, 87, 190, 58, 130, 188, 190, 160, 169, 188, 190, 39, 246, 136, 62, 14, 133, 166, 62, 83, 121, 130, 190, 229, 215, 42, 62, 250, 135, 3, 190, 66, 207, 109, 189, 244, 3, 115, 62, 132, 206, 194, 190, 254, 37, 47, 62, 216, 23, 30, 189, 246, 188, 35, 62, 39, 102, 209, 62, 98, 56, 220, 189, 222, 218, 224, 189, 148, 93, 81, 62, 243, 240, 62, 62, 188, 169, 170, 189, 140, 204, 3, 190, 226, 136, 0, 190, 81, 154, 47, 190, 235, 103, 32, 62, 17, 245, 60, 190, 204, 115, 27, 62, 7, 245, 220, 189, 241, 234, 6, 188, 215, 248, 38, 190, 215, 238, 251, 188, 6, 13, 204, 61, 172, 245, 171, 189, 190, 188, 38, 190, 69, 18, 46, 190, 99, 193, 136, 60, 98, 19, 29, 190, 76, 18, 40, 188, 59, 63, 239, 61, 197, 71, 200, 189, 59, 176, 119, 61, 119, 153, 8, 190, 165, 178, 19, 190, 125, 25, 175, 189, 67, 104, 13, 190, 231, 13, 17, 190, 46, 76, 34, 61, 92, 44, 19, 190, 65, 120, 190, 189, 34, 26, 14, 62, 235, 0, 128, 188, 73, 221, 42, 190, 87, 100, 170, 62, 214, 15, 225, 188, 225, 196, 185, 188, 14, 101, 56, 190, 67, 255, 31, 189, 87, 129, 107, 190, 36, 154, 217, 188, 54, 114, 106, 61, 1, 46, 140, 188, 169, 129, 107, 62, 5, 244, 2, 62, 145, 220, 97, 57, 57, 126, 74, 190, 12, 111, 177, 190, 76, 157, 136, 189, 189, 31, 55, 190, 187, 251, 67, 190, 144, 77, 72, 61, 175, 190, 91, 189, 236, 12, 133, 61, 2, 104, 159, 59, 22, 100, 152, 62, 39, 238, 75, 62, 195, 208, 189, 190, 64, 56, 123, 189, 198, 236, 136, 62, 10, 11, 111, 62, 33, 94, 30, 62, 248, 133, 155, 62, 60, 131, 123, 61, 104, 133, 82, 190, 29, 67, 188, 61, 62, 101, 101, 188, 1, 40, 44, 190, 48, 26, 92, 59, 43, 203, 82, 62, 68, 201, 172, 61, 129, 220, 164, 62, 88, 251, 246, 189, 44, 52, 211, 189, 40, 238, 212, 190, 169, 212, 179, 189, 242, 54, 45, 189, 18, 234, 53, 190, 59, 58, 68, 190, 59, 210, 63, 61, 191, 225, 172, 62, 205, 155, 201, 60, 73, 74, 58, 61, 201, 176, 134, 189, 225, 165, 104, 189, 20, 163, 42, 191, 71, 134, 132, 190, 172, 1, 142, 190, 188, 86, 27, 61, 247, 31, 41, 61, 75, 103, 30, 191, 97, 35, 43, 61, 191, 184, 21, 190, 27, 219, 107, 189, 56, 197, 228, 188, 105, 233, 67, 191, 46, 31, 20, 191, 240, 94, 249, 189, 137, 248, 113, 190, 161, 241, 252, 60, 37, 63, 64, 61, 86, 1, 179, 61, 41, 33, 2, 62, 62, 136, 169, 190, 151, 144, 12, 61, 54, 152, 5, 62, 211, 153, 140, 189, 230, 108, 157, 61, 212, 90, 152, 189, 25, 8, 97, 189, 13, 13, 119, 189, 134, 32, 52, 190, 202, 147, 113, 189, 217, 33, 135, 188, 103, 12, 112, 190, 114, 80, 63, 190, 97, 109, 108, 190, 58, 42, 27, 190, 125, 246, 24, 62, 102, 218, 4, 190, 20, 54, 29, 62, 210, 71, 43, 189, 37, 83, 18, 190, 107, 254, 122, 187, 211, 54, 51, 190, 106, 73, 228, 189, 144, 62, 188, 61, 56, 18, 42, 62, 225, 185, 211, 61, 161, 18, 30, 188, 195, 222, 253, 61, 63, 220, 5, 190, 255, 143, 223, 189, 179, 67, 43, 62, 229, 248, 46, 60, 21, 78, 128, 60, 199, 102, 4, 62, 124, 74, 189, 188, 38, 247, 252, 189, 200, 76, 100, 61, 250, 200, 226, 189, 228, 208, 208, 61, 177, 246, 39, 62, 241, 213, 183, 61, 223, 87, 146, 188, 34, 235, 70, 61, 7, 151, 213, 61, 186, 26, 13, 190, 118, 171, 92, 61, 31, 143, 9, 190, 55, 115, 36, 62, 212, 26, 130, 189, 6, 197, 12, 190, 76, 29, 73, 189, 39, 21, 154, 188, 136, 91, 134, 190, 117, 204, 30, 61, 253, 61, 39, 62, 109, 193, 99, 188, 223, 174, 163, 187, 40, 51, 27, 62, 107, 56, 22, 189, 150, 52, 8, 190, 98, 155, 22, 190, 127, 144, 24, 62, 10, 103, 92, 190, 63, 181, 85, 62, 194, 182, 124, 60, 241, 156, 117, 62, 208, 146, 196, 189, 210, 83, 145, 190, 209, 63, 164, 190, 204, 171, 184, 189, 194, 65, 81, 62, 33, 52, 99, 190, 150, 70, 156, 61, 71, 135, 170, 61, 30, 229, 39, 190, 102, 0, 182, 61, 21, 46, 135, 62, 214, 11, 228, 60, 199, 10, 53, 62, 108, 19, 215, 190, 94, 135, 81, 190, 48, 160, 32, 62, 134, 249, 191, 190, 118, 143, 178, 189, 209, 86, 37, 190, 153, 115, 90, 189, 157, 123, 51, 190, 76, 145, 233, 189, 122, 157, 2, 189, 1, 52, 242, 61, 48, 108, 118, 61, 22, 21, 128, 62, 77, 0, 126, 61, 239, 213, 4, 62, 247, 247, 0, 62, 73, 40, 196, 61, 99, 202, 245, 188, 214, 65, 234, 190, 165, 180, 40, 62, 148, 133, 170, 62, 80, 56, 155, 188, 123, 100, 61, 189, 108, 220, 145, 187, 251, 244, 43, 190, 28, 90, 79, 189, 60, 209, 229, 61, 240, 234, 99, 62, 129, 236, 90, 188, 104, 165, 35, 61, 145, 110, 175, 61, 160, 126, 92, 190, 18, 121, 56, 61, 49, 193, 145, 62, 207, 42, 169, 62, 236, 25, 73, 188, 139, 177, 47, 190, 210, 48, 246, 61, 90, 113, 202, 189, 101, 101, 129, 190, 187, 41, 164, 62, 229, 119, 160, 190, 222, 175, 106, 190, 168, 252, 219, 190, 230, 53, 110, 189, 126, 46, 26, 61, 58, 208, 137, 189, 79, 132, 24, 62, 153, 216, 138, 190, 248, 92, 80, 62, 83, 18, 116, 61, 191, 180, 110, 188, 43, 28, 145, 190, 171, 28, 18, 189, 158, 93, 59, 190, 249, 61, 59, 62, 39, 158, 165, 62, 126, 56, 129, 62, 38, 62, 3, 189, 96, 91, 150, 190, 5, 199, 217, 189, 172, 39, 61, 62, 24, 4, 174, 59, 124, 71, 71, 62, 26, 240, 56, 61, 41, 112, 188, 61, 252, 120, 76, 190, 123, 220, 48, 189, 176, 7, 138, 61, 25, 38, 77, 61, 166, 81, 38, 189, 49, 220, 40, 62, 107, 158, 48, 190, 227, 85, 255, 60, 212, 94, 118, 62, 11, 100, 188, 62, 126, 65, 173, 60, 67, 114, 10, 190, 243, 98, 217, 188, 0, 94, 26, 61, 45, 45, 99, 62, 18, 66, 27, 62, 35, 177, 171, 60, 43, 89, 234, 61, 60, 58, 154, 190, 227, 82, 47, 190, 219, 121, 72, 190, 179, 207, 170, 188, 29, 132, 67, 62, 82, 124, 95, 59, 242, 156, 87, 190, 25, 41, 206, 190, 126, 62, 156, 61, 224, 89, 148, 189, 167, 214, 88, 189, 165, 243, 208, 62, 112, 244, 20, 190, 148, 28, 113, 189, 141, 120, 108, 62, 130, 106, 229, 190, 66, 48, 23, 62, 82, 202, 150, 190, 250, 182, 136, 62, 126, 58, 34, 63, 74, 144, 163, 189, 8, 197, 212, 61, 250, 114, 235, 61, 154, 249, 96, 62, 197, 34, 212, 62, 153, 82, 133, 62, 12, 236, 230, 186, 13, 129, 164, 188, 65, 19, 5, 62, 246, 232, 161, 189, 131, 1, 71, 188, 28, 130, 93, 61, 11, 170, 19, 62, 175, 31, 88, 188, 225, 126, 145, 189, 159, 69, 9, 62, 73, 248, 238, 189, 27, 29, 78, 190, 216, 122, 0, 62, 166, 237, 3, 62, 248, 117, 189, 61, 187, 72, 226, 61, 58, 220, 157, 61, 139, 138, 170, 61, 252, 7, 15, 62, 23, 173, 44, 62, 183, 201, 204, 188, 73, 40, 51, 60, 92, 157, 77, 62, 76, 63, 56, 62, 3, 208, 22, 62, 145, 102, 152, 190, 197, 107, 51, 62, 230, 64, 116, 60, 145, 66, 226, 61, 148, 8, 159, 189, 160, 95, 171, 189, 1, 90, 1, 190, 199, 231, 14, 190, 29, 177, 216, 189, 228, 24, 97, 189, 9, 74, 211, 189, 81, 65, 156, 189, 233, 229, 138, 60, 80, 213, 225, 188, 153, 238, 69, 189, 236, 241, 103, 189, 201, 251, 238, 60, 144, 47, 202, 61, 2, 26, 137, 61, 4, 54, 116, 189, 57, 14, 160, 188, 87, 244, 24, 190, 1, 236, 102, 189, 244, 27, 80, 188, 32, 25, 13, 62, 21, 56, 221, 188, 205, 75, 228, 61, 237, 107, 252, 189, 198, 122, 32, 62, 9, 122, 15, 186, 32, 84, 21, 61, 149, 235, 34, 190, 193, 85, 40, 190, 248, 229, 34, 190, 117, 87, 129, 61, 51, 65, 164, 61, 133, 23, 20, 190, 241, 37, 20, 190, 140, 201, 237, 189, 185, 190, 141, 190, 73, 104, 247, 61, 177, 241, 29, 191, 57, 150, 246, 189, 96, 114, 0, 190, 226, 217, 14, 190, 112, 100, 0, 61, 20, 247, 113, 61, 18, 199, 23, 190, 115, 44, 143, 61, 31, 61, 179, 61, 21, 231, 131, 62, 114, 94, 131, 61, 30, 146, 147, 60, 40, 68, 21, 190, 123, 222, 13, 62, 245, 164, 125, 188, 255, 161, 166, 61, 239, 93, 251, 60, 89, 65, 43, 189, 60, 196, 196, 190, 6, 200, 41, 62, 107, 105, 53, 190, 24, 126, 230, 60, 252, 104, 217, 61, 113, 152, 2, 62, 143, 188, 209, 189, 173, 18, 81, 190, 155, 164, 85, 61, 125, 28, 130, 62, 61, 28, 251, 189, 234, 71, 195, 189, 0, 72, 179, 58, 132, 66, 178, 61, 140, 19, 61, 190, 179, 95, 216, 61, 66, 115, 135, 62, 35, 1, 3, 62, 121, 199, 176, 190, 28, 52, 180, 189, 109, 197, 151, 190, 180, 242, 46, 60, 15, 82, 134, 62, 97, 79, 174, 62, 155, 53, 91, 190, 179, 219, 24, 190, 62, 105, 240, 61, 222, 28, 162, 62, 55, 30, 42, 190, 135, 207, 206, 61, 182, 32, 5, 61, 94, 158, 1, 186, 177, 255, 98, 189, 88, 3, 214, 189, 105, 65, 9, 62, 241, 73, 99, 190, 3, 33, 181, 61, 120, 155, 203, 62, 201, 174, 123, 190, 224, 190, 90, 189, 247, 2, 68, 189, 124, 17, 235, 62, 133, 151, 172, 62, 99, 38, 96, 189, 175, 120, 172, 187, 234, 7, 12, 62, 219, 155, 98, 61, 201, 194, 3, 61, 49, 150, 85, 61, 216, 68, 103, 62, 45, 85, 150, 61, 93, 55, 198, 189, 81, 240, 218, 186, 160, 170, 6, 190, 13, 193, 126, 190, 183, 51, 133, 189, 188, 13, 73, 61, 194, 77, 206, 61, 65, 179, 132, 59, 108, 228, 143, 61, 159, 97, 123, 61, 129, 116, 38, 190, 173, 191, 161, 61, 136, 53, 113, 62, 88, 22, 16, 62, 196, 41, 237, 61, 192, 167, 208, 60, 249, 140, 116, 62, 136, 253, 235, 189, 230, 7, 175, 190, 23, 15, 223, 60, 69, 66, 20, 190, 222, 216, 69, 61, 11, 18, 139, 189, 55, 150, 31, 58, 203, 226, 35, 188, 161, 21, 80, 189, 229, 175, 213, 61, 193, 231, 127, 190, 66, 114, 28, 189, 191, 156, 134, 62, 141, 130, 246, 188, 116, 75, 140, 190, 141, 144, 95, 61, 192, 220, 1, 62, 146, 217, 130, 62, 86, 49, 145, 61, 181, 131, 55, 190, 25, 253, 90, 190, 226, 104, 240, 189, 193, 154, 189, 61, 155, 14, 139, 190, 170, 63, 58, 62, 249, 242, 250, 188, 200, 61, 115, 190, 111, 180, 83, 190, 151, 152, 14, 190, 186, 248, 7, 189, 24, 15, 20, 62, 124, 254, 36, 189, 41, 178, 129, 62, 179, 248, 18, 60, 57, 167, 193, 189, 49, 217, 130, 188, 239, 156, 150, 62, 253, 77, 75, 187, 112, 125, 141, 62, 210, 129, 134, 189, 184, 116, 42, 62, 177, 154, 42, 62, 8, 24, 16, 62, 91, 178, 91, 61, 36, 146, 182, 190, 25, 136, 210, 58, 82, 130, 138, 62, 93, 114, 0, 189, 243, 233, 214, 189, 233, 113, 17, 190, 14, 80, 144, 190, 59, 237, 135, 190, 113, 222, 188, 61, 216, 237, 103, 188, 219, 101, 0, 190, 139, 178, 177, 189, 224, 119, 226, 61, 99, 193, 137, 61, 165, 227, 197, 60, 75, 156, 140, 60, 71, 232, 63, 62, 139, 65, 149, 61, 69, 28, 136, 190, 53, 229, 161, 62, 24, 96, 195, 189, 216, 132, 16, 190, 55, 243, 175, 187, 220, 55, 71, 191, 14, 236, 31, 191, 229, 55, 241, 189, 99, 134, 30, 190, 189, 60, 225, 190, 78, 96, 173, 61, 11, 44, 170, 60, 40, 247, 68, 61, 73, 162, 8, 62, 10, 122, 30, 62, 205, 11, 9, 189, 13, 67, 214, 190, 13, 201, 184, 189, 49, 7, 164, 190, 174, 184, 204, 62, 138, 11, 32, 188, 135, 161, 64, 189, 209, 226, 167, 189, 246, 158, 21, 191, 201, 185, 132, 188, 28, 7, 44, 62, 50, 76, 130, 190, 177, 10, 130, 62, 175, 42, 3, 191, 243, 142, 238, 60, 57, 243, 125, 62, 83, 8, 3, 191, 151, 122, 11, 62, 107, 108, 170, 190, 117, 157, 95, 190, 216, 207, 32, 62, 66, 106, 156, 190, 196, 134, 175, 60, 136, 127, 88, 61, 62, 198, 89, 189, 201, 180, 83, 190, 19, 172, 179, 189, 153, 98, 94, 189, 30, 168, 200, 189, 37, 127, 188, 188, 246, 47, 43, 62, 183, 193, 54, 59, 26, 70, 245, 61, 15, 166, 253, 188, 73, 189, 104, 190, 61, 166, 170, 189, 184, 101, 194, 61, 49, 100, 72, 190, 118, 82, 37, 186, 211, 173, 23, 187, 163, 237, 201, 190, 192, 16, 83, 190, 211, 144, 197, 61, 128, 77, 28, 189, 128, 8, 49, 188, 160, 129, 123, 190, 106, 111, 95, 190, 36, 28, 112, 62, 110, 217, 203, 190, 113, 132, 167, 188, 156, 74, 29, 190, 128, 250, 71, 190, 163, 92, 52, 189, 204, 21, 23, 61, 221, 45, 246, 61, 49, 244, 19, 62, 158, 82, 173, 61, 74, 13, 120, 190, 240, 5, 169, 62, 200, 124, 174, 61, 125, 250, 9, 190, 149, 155, 202, 62, 79, 230, 89, 190, 127, 133, 158, 190, 81, 69, 48, 61, 10, 85, 51, 62, 121, 76, 181, 188, 169, 80, 24, 62, 115, 231, 198, 190, 187, 209, 52, 190, 185, 54, 74, 190, 198, 223, 238, 189, 76, 157, 50, 61, 121, 85, 151, 189, 142, 112, 39, 62, 112, 104, 87, 62, 4, 165, 25, 60, 15, 65, 102, 62, 129, 188, 62, 62, 158, 142, 102, 62, 198, 207, 213, 189, 64, 150, 37, 190, 232, 231, 222, 61, 218, 72, 162, 190, 192, 3, 247, 189, 245, 22, 232, 189, 215, 51, 27, 190, 246, 124, 202, 61, 114, 173, 218, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {48, 33, 115, 62, 71, 25, 131, 189, 191, 20, 200, 61, 16, 255, 124, 61, 210, 200, 17, 62, 253, 240, 85, 62, 31, 38, 156, 189, 232, 65, 86, 62, 237, 111, 145, 60, 2, 168, 83, 62, 155, 49, 121, 62, 144, 185, 204, 61, 218, 164, 105, 62, 111, 95, 173, 189, 48, 29, 182, 189, 8, 30, 221, 61, 20, 75, 209, 188, 238, 2, 52, 62, 134, 69, 241, 61, 109, 190, 63, 61, 160, 209, 193, 61, 15, 99, 219, 61, 48, 112, 180, 59, 169, 159, 181, 189, 25, 65, 216, 187, 172, 98, 219, 61, 106, 72, 78, 62, 229, 11, 72, 189, 181, 90, 15, 62, 131, 144, 207, 61, 154, 107, 141, 189, 200, 145, 191, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 6, 190, 188, 1, 148, 33, 62, 32, 51, 20, 190, 63, 216, 134, 60, 200, 79, 24, 62, 165, 168, 31, 61, 234, 11, 218, 62, 21, 34, 28, 191, 188, 182, 193, 190, 117, 107, 68, 63, 253, 237, 47, 191, 167, 210, 138, 62, 65, 231, 204, 62, 140, 241, 165, 61, 241, 104, 138, 190, 60, 76, 80, 191, 156, 76, 237, 189, 120, 38, 111, 188, 54, 124, 179, 62, 54, 135, 15, 191, 28, 4, 101, 62, 84, 152, 1, 63, 172, 199, 72, 190, 224, 41, 239, 185, 42, 100, 91, 62, 160, 180, 144, 62, 40, 196, 19, 190, 42, 191, 122, 190, 194, 239, 210, 190, 50, 139, 28, 63, 188, 196, 253, 60, 78, 236, 243, 62, 140, 208, 29, 190, 170, 251, 194, 189, 240, 230, 59, 61, 112, 244, 160, 61, 219, 199, 28, 190, 150, 8, 211, 190, 94, 158, 1, 189, 174, 18, 199, 188, 199, 16, 134, 62, 200, 124, 136, 189, 187, 169, 167, 189, 38, 144, 141, 59, 226, 227, 74, 190, 255, 19, 246, 189, 171, 1, 21, 61, 196, 213, 19, 62, 238, 75, 232, 61, 101, 129, 105, 189, 82, 123, 24, 62, 84, 223, 30, 62, 8, 144, 129, 189, 102, 131, 174, 61, 122, 53, 155, 189, 8, 192, 130, 189, 156, 97, 184, 189, 23, 177, 181, 61, 239, 126, 48, 190, 72, 87, 163, 61, 109, 69, 8, 190, 2, 64, 26, 62, 116, 220, 221, 189, 90, 246, 195, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 186, 129, 61, 101, 111, 158, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {34, 192, 211, 63, 27, 36, 10, 191, 178, 176, 145, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {136, 31, 255, 63, 53, 177, 158, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0037/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}