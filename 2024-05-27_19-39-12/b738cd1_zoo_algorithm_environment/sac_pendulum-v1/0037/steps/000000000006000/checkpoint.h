// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {118, 32, 130, 63, 130, 200, 7, 63, 168, 238, 45, 62, 194, 139, 34, 190, 49, 253, 114, 63, 124, 17, 166, 62, 189, 181, 53, 190, 92, 234, 80, 63, 57, 235, 84, 185, 120, 16, 167, 190, 131, 67, 158, 191, 195, 3, 103, 190, 251, 117, 228, 190, 182, 208, 24, 63, 117, 115, 31, 189, 133, 155, 31, 191, 106, 19, 250, 190, 181, 34, 68, 189, 168, 130, 42, 191, 161, 24, 254, 62, 171, 125, 39, 63, 140, 106, 194, 62, 17, 40, 0, 63, 186, 100, 166, 62, 27, 195, 159, 62, 76, 231, 87, 63, 225, 86, 197, 190, 148, 82, 202, 62, 244, 212, 241, 62, 220, 114, 237, 62, 21, 169, 211, 189, 238, 160, 6, 63, 16, 97, 81, 62, 10, 232, 202, 62, 235, 120, 239, 190, 250, 120, 202, 62, 129, 175, 43, 63, 97, 192, 99, 191, 142, 180, 184, 190, 93, 182, 120, 62, 6, 14, 84, 189, 20, 1, 131, 190, 159, 171, 24, 191, 59, 23, 39, 191, 41, 132, 104, 190, 24, 17, 192, 190, 159, 28, 247, 62, 195, 66, 36, 191, 158, 3, 131, 62, 17, 216, 71, 191, 11, 142, 77, 189, 124, 44, 36, 63, 88, 176, 27, 191, 17, 136, 229, 61, 124, 201, 162, 189, 249, 163, 18, 191, 124, 45, 159, 62, 102, 239, 79, 62, 88, 199, 77, 63, 103, 124, 205, 190, 8, 233, 168, 61, 74, 198, 117, 190, 132, 95, 250, 190, 214, 75, 40, 63, 131, 27, 124, 63, 238, 154, 198, 189, 62, 209, 235, 57, 251, 126, 57, 63, 29, 157, 65, 61, 238, 96, 158, 190, 208, 123, 66, 191, 61, 144, 25, 191, 106, 87, 250, 62, 214, 66, 154, 190, 146, 69, 21, 63, 21, 91, 23, 63, 109, 83, 143, 63, 29, 144, 142, 62, 61, 23, 53, 63, 145, 227, 188, 190, 10, 208, 132, 190, 128, 165, 77, 63, 59, 87, 31, 191, 214, 215, 119, 190, 72, 158, 69, 63, 95, 166, 101, 63, 111, 134, 34, 63, 109, 228, 16, 191, 87, 217, 136, 62, 0, 126, 82, 63, 115, 26, 161, 189, 1, 106, 12, 61, 219, 164, 22, 63, 164, 72, 33, 63, 169, 31, 195, 190, 8, 238, 18, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {39, 147, 191, 190, 150, 36, 148, 190, 243, 39, 225, 62, 83, 145, 106, 61, 39, 241, 116, 62, 224, 87, 233, 62, 138, 138, 202, 190, 79, 116, 141, 62, 232, 14, 240, 62, 101, 15, 17, 191, 77, 143, 50, 190, 177, 142, 1, 62, 76, 127, 174, 190, 113, 41, 35, 191, 20, 95, 143, 190, 255, 75, 147, 190, 242, 176, 224, 61, 190, 120, 19, 191, 209, 126, 13, 62, 240, 209, 255, 62, 164, 206, 171, 61, 83, 167, 243, 62, 252, 14, 74, 63, 195, 77, 169, 189, 73, 217, 1, 62, 53, 63, 239, 61, 169, 107, 134, 62, 51, 170, 128, 190, 43, 82, 173, 190, 185, 105, 248, 190, 253, 219, 105, 190, 253, 44, 54, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 30, 97, 62, 211, 80, 61, 61, 101, 222, 172, 61, 32, 100, 171, 61, 19, 196, 28, 61, 211, 80, 232, 61, 120, 158, 177, 61, 79, 203, 42, 62, 163, 43, 158, 61, 248, 186, 0, 190, 119, 46, 39, 190, 93, 151, 97, 59, 20, 211, 216, 189, 79, 57, 133, 190, 76, 64, 223, 59, 244, 164, 216, 189, 93, 46, 252, 61, 33, 199, 144, 190, 185, 168, 233, 188, 127, 229, 20, 188, 235, 221, 83, 60, 18, 48, 7, 62, 116, 160, 203, 61, 112, 121, 133, 61, 71, 198, 36, 61, 99, 201, 231, 189, 73, 123, 150, 62, 134, 44, 219, 188, 77, 98, 19, 61, 155, 15, 139, 61, 87, 71, 235, 188, 67, 205, 60, 190, 61, 125, 13, 62, 229, 29, 133, 190, 35, 19, 96, 190, 101, 151, 212, 189, 239, 194, 9, 191, 110, 219, 40, 61, 39, 131, 165, 190, 15, 19, 148, 61, 227, 229, 192, 61, 128, 74, 183, 190, 202, 2, 112, 190, 114, 204, 99, 61, 126, 84, 131, 61, 87, 54, 30, 190, 175, 13, 60, 61, 208, 105, 154, 190, 2, 156, 126, 62, 102, 42, 26, 190, 9, 11, 132, 190, 134, 74, 191, 189, 222, 40, 199, 188, 39, 218, 14, 61, 37, 122, 0, 62, 196, 200, 152, 190, 74, 205, 47, 62, 100, 140, 113, 189, 50, 223, 15, 62, 140, 214, 125, 62, 238, 117, 186, 61, 94, 9, 151, 190, 121, 251, 184, 188, 189, 239, 171, 190, 57, 129, 91, 190, 33, 230, 34, 190, 246, 66, 217, 190, 224, 195, 168, 62, 53, 179, 121, 190, 67, 66, 186, 61, 178, 85, 10, 188, 7, 106, 185, 190, 129, 248, 26, 190, 254, 243, 152, 190, 224, 129, 27, 60, 2, 216, 65, 61, 75, 164, 177, 60, 218, 127, 161, 61, 92, 40, 45, 61, 145, 31, 1, 190, 200, 140, 52, 62, 122, 196, 109, 190, 45, 18, 83, 62, 236, 27, 160, 190, 225, 15, 213, 190, 105, 177, 35, 190, 155, 145, 154, 189, 115, 192, 199, 190, 83, 60, 110, 61, 96, 247, 162, 190, 20, 105, 204, 61, 55, 5, 41, 61, 157, 97, 252, 190, 141, 230, 86, 190, 59, 49, 247, 188, 231, 163, 2, 190, 116, 92, 96, 62, 74, 187, 56, 62, 25, 201, 184, 62, 236, 237, 185, 189, 168, 5, 110, 62, 43, 57, 36, 190, 245, 30, 117, 190, 14, 60, 174, 61, 184, 38, 5, 190, 13, 122, 62, 62, 96, 172, 46, 62, 119, 249, 21, 190, 89, 75, 192, 190, 156, 146, 156, 188, 200, 237, 10, 189, 129, 9, 50, 189, 180, 68, 209, 190, 160, 107, 198, 190, 76, 203, 203, 60, 47, 88, 2, 62, 125, 13, 153, 189, 39, 241, 158, 61, 116, 245, 54, 189, 71, 8, 187, 190, 15, 103, 19, 190, 210, 173, 132, 62, 134, 130, 204, 190, 170, 199, 152, 189, 161, 12, 133, 62, 246, 57, 11, 185, 184, 178, 178, 187, 178, 0, 231, 189, 249, 204, 82, 187, 207, 3, 6, 61, 67, 7, 25, 190, 97, 156, 51, 190, 20, 65, 22, 62, 88, 1, 18, 190, 18, 119, 11, 190, 14, 87, 31, 190, 191, 139, 170, 61, 50, 53, 230, 189, 214, 150, 50, 190, 53, 37, 211, 61, 91, 232, 214, 189, 244, 15, 143, 189, 75, 168, 208, 61, 176, 27, 70, 59, 124, 9, 190, 61, 138, 24, 39, 190, 138, 217, 144, 61, 226, 154, 116, 189, 164, 130, 253, 188, 133, 158, 178, 189, 131, 29, 123, 189, 154, 9, 166, 189, 42, 209, 6, 190, 167, 227, 231, 189, 15, 211, 16, 190, 182, 234, 224, 61, 85, 92, 156, 61, 23, 165, 28, 188, 171, 51, 44, 62, 251, 1, 113, 60, 97, 176, 217, 62, 142, 137, 154, 190, 247, 38, 10, 188, 149, 194, 199, 190, 50, 164, 248, 188, 199, 179, 58, 189, 58, 48, 123, 61, 3, 130, 88, 188, 136, 132, 5, 62, 159, 250, 207, 190, 4, 157, 154, 190, 120, 215, 115, 62, 90, 43, 34, 190, 57, 50, 11, 190, 196, 57, 19, 62, 31, 51, 30, 189, 251, 158, 171, 61, 74, 197, 83, 62, 101, 3, 63, 190, 224, 47, 243, 61, 10, 109, 166, 61, 253, 0, 107, 62, 86, 182, 11, 62, 84, 208, 57, 190, 251, 145, 158, 61, 140, 146, 172, 189, 252, 111, 137, 62, 28, 88, 254, 189, 21, 103, 185, 190, 205, 0, 183, 60, 39, 246, 176, 188, 8, 62, 73, 190, 111, 46, 97, 61, 202, 115, 31, 61, 69, 60, 111, 191, 158, 19, 74, 62, 111, 237, 74, 191, 236, 33, 240, 61, 40, 17, 20, 62, 166, 231, 55, 190, 83, 223, 78, 190, 145, 214, 35, 61, 79, 240, 4, 62, 48, 97, 20, 190, 41, 176, 64, 62, 189, 24, 115, 61, 125, 143, 211, 60, 70, 4, 222, 189, 249, 70, 101, 61, 194, 160, 46, 191, 0, 218, 11, 62, 165, 23, 209, 189, 39, 120, 255, 60, 241, 131, 243, 190, 180, 201, 254, 190, 171, 41, 248, 60, 143, 229, 10, 190, 118, 243, 155, 189, 116, 122, 11, 190, 173, 221, 165, 61, 63, 167, 155, 61, 157, 60, 253, 189, 116, 0, 37, 61, 195, 186, 19, 62, 95, 108, 254, 189, 144, 247, 48, 189, 59, 5, 11, 190, 189, 201, 20, 61, 10, 67, 131, 62, 73, 202, 140, 62, 138, 16, 255, 190, 79, 130, 65, 61, 98, 201, 73, 190, 49, 227, 88, 190, 188, 132, 130, 190, 147, 30, 156, 190, 50, 200, 133, 190, 208, 179, 22, 61, 113, 213, 149, 189, 190, 8, 249, 61, 89, 162, 204, 189, 44, 153, 4, 59, 96, 104, 82, 61, 55, 22, 171, 190, 125, 87, 186, 189, 48, 220, 168, 190, 252, 174, 222, 186, 150, 31, 157, 188, 163, 101, 234, 190, 85, 253, 108, 190, 104, 164, 177, 60, 16, 166, 154, 190, 101, 113, 85, 190, 124, 239, 24, 191, 138, 67, 203, 190, 38, 43, 80, 190, 240, 145, 109, 190, 213, 31, 147, 190, 26, 61, 169, 189, 138, 150, 252, 61, 42, 145, 201, 190, 182, 138, 55, 62, 252, 147, 229, 189, 183, 189, 24, 190, 161, 115, 160, 61, 190, 92, 205, 190, 170, 106, 31, 189, 3, 243, 154, 61, 91, 226, 37, 62, 4, 0, 174, 189, 42, 223, 99, 190, 136, 196, 63, 190, 212, 13, 162, 62, 173, 23, 164, 190, 192, 48, 147, 62, 124, 234, 222, 61, 84, 114, 164, 188, 174, 63, 131, 189, 91, 51, 194, 190, 161, 207, 39, 61, 39, 37, 164, 189, 211, 143, 228, 190, 49, 139, 86, 188, 169, 228, 163, 62, 23, 122, 0, 191, 124, 149, 134, 188, 59, 214, 10, 62, 39, 63, 115, 62, 128, 233, 45, 62, 197, 211, 114, 190, 67, 54, 149, 62, 208, 113, 5, 190, 187, 171, 234, 62, 123, 197, 27, 62, 104, 170, 96, 188, 19, 166, 77, 190, 193, 240, 104, 190, 38, 128, 126, 189, 137, 155, 224, 190, 152, 42, 143, 59, 62, 49, 76, 190, 213, 73, 133, 188, 231, 176, 166, 189, 145, 17, 219, 190, 244, 200, 83, 190, 112, 211, 234, 189, 235, 140, 30, 191, 96, 223, 152, 62, 26, 23, 31, 191, 204, 32, 191, 60, 175, 235, 62, 62, 120, 120, 146, 191, 91, 222, 175, 189, 71, 202, 171, 188, 101, 116, 17, 191, 85, 239, 70, 62, 47, 134, 225, 61, 83, 178, 226, 61, 25, 188, 178, 189, 246, 168, 238, 61, 88, 51, 50, 62, 139, 240, 149, 61, 94, 230, 151, 59, 120, 3, 138, 61, 126, 226, 178, 62, 79, 187, 133, 62, 21, 50, 19, 191, 57, 201, 147, 189, 202, 115, 143, 61, 66, 116, 148, 190, 90, 115, 218, 61, 219, 97, 201, 190, 254, 30, 11, 190, 105, 66, 79, 190, 162, 198, 174, 62, 99, 13, 134, 62, 28, 29, 108, 190, 220, 13, 4, 190, 55, 41, 48, 62, 232, 163, 151, 190, 252, 56, 210, 60, 182, 78, 56, 62, 89, 160, 179, 62, 94, 129, 12, 190, 46, 251, 63, 191, 199, 137, 193, 62, 128, 103, 227, 189, 152, 142, 220, 190, 108, 220, 51, 190, 24, 10, 26, 191, 167, 147, 47, 191, 168, 190, 11, 190, 33, 228, 121, 190, 140, 248, 42, 189, 248, 59, 69, 62, 1, 180, 170, 189, 70, 29, 131, 62, 216, 200, 203, 61, 169, 139, 238, 59, 199, 186, 76, 61, 23, 79, 135, 190, 241, 233, 138, 190, 17, 176, 228, 189, 51, 144, 84, 62, 118, 133, 188, 62, 172, 187, 152, 60, 169, 235, 139, 189, 39, 2, 233, 190, 41, 100, 63, 62, 226, 33, 15, 61, 226, 212, 176, 189, 242, 164, 169, 61, 16, 114, 36, 190, 128, 25, 197, 59, 190, 222, 18, 62, 174, 40, 15, 190, 109, 212, 106, 60, 234, 179, 107, 190, 30, 86, 129, 62, 52, 40, 122, 62, 255, 226, 185, 188, 165, 252, 116, 61, 249, 172, 203, 188, 208, 109, 143, 62, 135, 42, 145, 60, 176, 175, 172, 187, 43, 97, 19, 62, 63, 34, 218, 61, 245, 212, 0, 61, 53, 124, 43, 62, 106, 147, 223, 61, 33, 66, 200, 189, 30, 165, 141, 190, 160, 55, 135, 189, 26, 193, 41, 187, 119, 21, 102, 62, 130, 161, 165, 62, 62, 180, 81, 190, 217, 73, 82, 190, 123, 124, 172, 190, 92, 193, 159, 62, 71, 250, 167, 62, 182, 110, 142, 190, 204, 49, 208, 61, 217, 45, 6, 190, 110, 181, 3, 190, 14, 161, 130, 62, 146, 236, 159, 190, 142, 25, 49, 62, 182, 114, 74, 189, 22, 124, 37, 62, 162, 34, 242, 62, 40, 231, 146, 189, 219, 78, 225, 189, 215, 253, 67, 62, 154, 104, 54, 62, 188, 169, 170, 189, 60, 36, 5, 190, 9, 46, 2, 190, 114, 28, 49, 190, 194, 189, 30, 62, 23, 187, 66, 190, 134, 232, 17, 62, 131, 43, 227, 189, 241, 234, 6, 188, 28, 134, 39, 190, 182, 14, 3, 189, 99, 63, 194, 61, 172, 245, 171, 189, 190, 188, 38, 190, 69, 18, 46, 190, 99, 193, 136, 60, 16, 107, 29, 190, 76, 18, 40, 188, 215, 210, 227, 61, 197, 71, 200, 189, 59, 176, 119, 61, 119, 153, 8, 190, 35, 18, 23, 190, 125, 25, 175, 189, 61, 117, 20, 190, 231, 13, 17, 190, 46, 76, 34, 61, 92, 44, 19, 190, 13, 98, 192, 189, 228, 217, 2, 62, 225, 35, 189, 188, 73, 221, 42, 190, 26, 173, 202, 62, 3, 69, 130, 189, 77, 210, 169, 187, 216, 30, 207, 190, 209, 73, 89, 189, 9, 62, 102, 190, 45, 73, 56, 188, 21, 16, 99, 61, 120, 145, 78, 60, 38, 187, 118, 62, 208, 145, 219, 61, 141, 178, 145, 60, 92, 36, 143, 190, 24, 115, 241, 190, 21, 141, 176, 189, 219, 11, 77, 190, 207, 214, 101, 190, 156, 181, 156, 61, 36, 170, 20, 189, 23, 107, 217, 61, 166, 254, 255, 59, 126, 174, 175, 62, 38, 118, 99, 62, 57, 59, 221, 190, 175, 59, 66, 189, 245, 49, 150, 62, 70, 75, 137, 62, 172, 211, 229, 61, 31, 41, 148, 62, 162, 150, 161, 61, 121, 226, 59, 190, 200, 170, 160, 61, 27, 82, 167, 189, 210, 84, 95, 190, 143, 250, 187, 189, 80, 139, 122, 62, 185, 121, 219, 187, 31, 133, 170, 62, 193, 74, 28, 190, 165, 60, 230, 189, 48, 26, 233, 190, 169, 212, 179, 189, 240, 168, 54, 190, 226, 14, 43, 62, 27, 67, 133, 190, 127, 158, 70, 61, 134, 39, 144, 62, 65, 104, 108, 189, 5, 98, 189, 61, 163, 62, 223, 60, 59, 172, 150, 62, 19, 21, 79, 191, 110, 3, 9, 191, 70, 85, 193, 190, 233, 169, 162, 188, 66, 187, 43, 190, 68, 244, 131, 190, 88, 225, 232, 60, 94, 244, 108, 190, 17, 26, 26, 190, 208, 22, 13, 190, 200, 137, 62, 191, 167, 19, 188, 190, 190, 60, 44, 190, 192, 219, 208, 59, 50, 11, 149, 186, 178, 82, 1, 62, 27, 99, 33, 190, 187, 13, 56, 62, 114, 118, 142, 190, 181, 142, 15, 61, 233, 142, 17, 62, 229, 80, 200, 61, 71, 249, 128, 186, 120, 63, 210, 189, 113, 1, 157, 189, 59, 60, 109, 190, 180, 185, 153, 190, 252, 81, 179, 190, 142, 137, 239, 189, 212, 38, 155, 190, 97, 160, 147, 190, 198, 225, 110, 190, 54, 185, 17, 61, 178, 46, 33, 62, 115, 210, 75, 61, 254, 161, 113, 62, 119, 141, 32, 190, 217, 76, 45, 190, 104, 118, 62, 60, 43, 225, 119, 60, 16, 182, 135, 190, 225, 30, 175, 60, 246, 180, 40, 62, 32, 24, 186, 61, 71, 158, 70, 189, 156, 28, 108, 189, 46, 163, 4, 190, 225, 177, 20, 190, 249, 253, 74, 62, 6, 153, 218, 60, 194, 111, 138, 61, 28, 1, 230, 61, 248, 175, 218, 189, 58, 237, 217, 189, 117, 247, 59, 61, 158, 254, 234, 189, 64, 85, 112, 61, 238, 210, 94, 62, 219, 169, 121, 62, 104, 216, 119, 61, 4, 125, 237, 61, 67, 118, 177, 188, 104, 46, 8, 191, 32, 159, 145, 60, 118, 254, 203, 189, 94, 2, 66, 62, 58, 19, 90, 190, 57, 75, 108, 190, 79, 148, 134, 58, 114, 23, 133, 189, 8, 26, 164, 190, 187, 226, 47, 188, 232, 193, 46, 62, 212, 148, 117, 189, 243, 175, 188, 188, 236, 59, 4, 62, 84, 151, 86, 61, 159, 6, 238, 190, 97, 197, 48, 190, 65, 202, 143, 62, 141, 131, 246, 190, 122, 83, 186, 62, 199, 162, 134, 189, 251, 156, 132, 62, 208, 240, 185, 189, 25, 170, 34, 190, 88, 20, 164, 190, 100, 93, 224, 189, 190, 50, 102, 62, 171, 231, 180, 188, 8, 4, 161, 61, 101, 40, 80, 190, 81, 32, 184, 59, 246, 153, 210, 61, 76, 95, 9, 63, 251, 55, 220, 60, 60, 206, 155, 62, 223, 178, 251, 190, 87, 52, 40, 190, 145, 180, 118, 62, 222, 55, 47, 191, 221, 186, 128, 189, 127, 75, 106, 190, 249, 183, 0, 60, 8, 25, 164, 61, 135, 19, 214, 189, 25, 247, 163, 188, 252, 0, 9, 62, 253, 7, 5, 62, 90, 154, 159, 62, 92, 138, 120, 190, 114, 128, 32, 61, 235, 133, 117, 62, 226, 199, 132, 61, 28, 2, 114, 61, 151, 48, 39, 191, 12, 193, 0, 62, 22, 240, 149, 62, 228, 249, 143, 189, 153, 126, 200, 190, 20, 193, 26, 61, 70, 19, 139, 190, 243, 216, 156, 189, 69, 126, 104, 62, 64, 243, 112, 62, 222, 81, 221, 188, 21, 85, 227, 61, 77, 59, 144, 62, 245, 120, 125, 190, 108, 246, 32, 61, 77, 253, 66, 62, 210, 52, 120, 62, 55, 150, 236, 187, 188, 125, 35, 190, 2, 197, 31, 62, 178, 22, 49, 190, 63, 150, 212, 190, 253, 127, 109, 62, 23, 27, 199, 190, 7, 140, 40, 190, 205, 248, 236, 190, 8, 55, 115, 189, 146, 150, 39, 61, 195, 101, 61, 61, 72, 174, 140, 187, 195, 84, 131, 190, 126, 176, 73, 61, 36, 167, 107, 61, 2, 28, 29, 60, 4, 159, 106, 190, 77, 211, 58, 189, 204, 161, 59, 190, 224, 220, 37, 62, 134, 199, 165, 62, 199, 218, 128, 62, 211, 11, 59, 190, 229, 106, 162, 190, 70, 119, 4, 190, 118, 240, 80, 62, 246, 20, 171, 188, 231, 209, 107, 62, 238, 250, 1, 61, 45, 174, 135, 62, 73, 110, 227, 189, 130, 100, 181, 189, 23, 194, 125, 61, 60, 103, 49, 61, 183, 151, 59, 60, 124, 156, 99, 62, 116, 121, 23, 190, 189, 102, 209, 60, 116, 100, 103, 62, 67, 156, 188, 62, 82, 73, 137, 189, 58, 236, 228, 189, 67, 14, 1, 61, 146, 148, 2, 190, 61, 158, 146, 62, 68, 175, 118, 187, 250, 250, 8, 61, 88, 193, 10, 62, 49, 94, 132, 190, 100, 11, 37, 190, 236, 22, 61, 190, 49, 156, 49, 189, 41, 28, 162, 62, 52, 58, 41, 62, 44, 250, 188, 190, 173, 120, 154, 190, 223, 150, 24, 61, 248, 149, 133, 59, 173, 198, 191, 189, 167, 86, 225, 62, 168, 65, 195, 189, 110, 93, 32, 189, 79, 35, 126, 62, 242, 251, 198, 190, 7, 221, 21, 62, 177, 39, 166, 190, 12, 98, 143, 62, 105, 226, 61, 63, 42, 198, 20, 189, 56, 102, 216, 61, 74, 37, 224, 61, 36, 216, 165, 62, 179, 31, 0, 63, 131, 2, 122, 62, 3, 208, 41, 189, 172, 32, 51, 61, 247, 139, 210, 61, 84, 179, 252, 188, 160, 74, 142, 188, 206, 127, 27, 61, 68, 64, 40, 62, 42, 161, 107, 188, 26, 15, 156, 189, 54, 215, 35, 62, 144, 5, 222, 189, 9, 213, 26, 190, 208, 50, 81, 62, 213, 80, 49, 62, 222, 77, 238, 61, 98, 214, 168, 186, 208, 180, 190, 61, 97, 169, 238, 61, 250, 204, 53, 62, 78, 69, 33, 62, 93, 14, 116, 189, 197, 59, 70, 61, 55, 212, 85, 62, 172, 135, 82, 62, 203, 190, 47, 62, 243, 118, 163, 190, 21, 45, 19, 62, 14, 83, 153, 60, 63, 34, 243, 61, 130, 221, 3, 189, 160, 95, 171, 189, 1, 90, 1, 190, 199, 231, 14, 190, 29, 177, 216, 189, 228, 24, 97, 189, 9, 74, 211, 189, 81, 65, 156, 189, 233, 229, 138, 60, 80, 213, 225, 188, 153, 238, 69, 189, 236, 241, 103, 189, 201, 251, 238, 60, 144, 47, 202, 61, 2, 26, 137, 61, 4, 54, 116, 189, 57, 14, 160, 188, 87, 244, 24, 190, 1, 236, 102, 189, 244, 27, 80, 188, 32, 25, 13, 62, 21, 56, 221, 188, 205, 75, 228, 61, 237, 107, 252, 189, 198, 122, 32, 62, 9, 122, 15, 186, 32, 84, 21, 61, 149, 235, 34, 190, 193, 85, 40, 190, 248, 229, 34, 190, 117, 87, 129, 61, 51, 65, 164, 61, 133, 23, 20, 190, 79, 106, 155, 190, 140, 201, 237, 189, 131, 164, 50, 190, 185, 104, 148, 188, 135, 111, 40, 191, 195, 219, 149, 190, 96, 114, 0, 190, 21, 157, 182, 190, 210, 148, 114, 61, 20, 247, 113, 61, 18, 199, 23, 190, 74, 110, 7, 190, 38, 175, 136, 61, 69, 45, 106, 62, 124, 7, 199, 189, 209, 70, 192, 188, 144, 61, 73, 190, 47, 62, 208, 190, 115, 121, 178, 189, 113, 125, 192, 61, 161, 215, 71, 187, 130, 137, 242, 61, 65, 167, 152, 190, 91, 100, 211, 61, 188, 19, 116, 190, 245, 199, 169, 189, 31, 175, 3, 62, 67, 181, 21, 62, 247, 233, 232, 189, 173, 18, 81, 190, 72, 160, 85, 61, 8, 245, 125, 62, 129, 152, 150, 190, 83, 48, 75, 190, 43, 9, 136, 61, 201, 29, 201, 189, 120, 111, 52, 190, 90, 96, 122, 189, 25, 216, 148, 62, 222, 149, 218, 61, 120, 251, 152, 190, 229, 44, 159, 189, 222, 140, 178, 190, 171, 193, 42, 61, 231, 83, 131, 62, 30, 108, 169, 62, 231, 173, 210, 190, 48, 91, 41, 190, 110, 36, 157, 61, 242, 231, 6, 63, 62, 78, 172, 189, 69, 54, 5, 62, 248, 153, 168, 60, 192, 8, 12, 62, 185, 240, 90, 188, 95, 146, 28, 190, 247, 26, 55, 62, 58, 0, 208, 190, 236, 165, 249, 61, 53, 13, 224, 62, 185, 168, 118, 190, 243, 164, 119, 188, 78, 7, 122, 187, 83, 163, 239, 62, 77, 8, 235, 62, 32, 135, 204, 189, 254, 49, 197, 188, 39, 121, 24, 62, 178, 107, 29, 61, 253, 232, 134, 61, 199, 126, 228, 60, 20, 150, 87, 62, 41, 146, 139, 61, 166, 142, 255, 189, 96, 170, 15, 189, 30, 193, 197, 189, 190, 138, 157, 190, 186, 217, 152, 189, 173, 116, 182, 61, 51, 226, 205, 61, 181, 1, 40, 61, 80, 17, 1, 189, 77, 12, 162, 61, 221, 195, 34, 190, 36, 136, 141, 61, 199, 105, 110, 62, 24, 61, 7, 62, 58, 4, 206, 61, 142, 28, 27, 61, 250, 130, 135, 62, 180, 239, 215, 189, 196, 67, 208, 190, 118, 214, 181, 188, 253, 222, 33, 190, 46, 141, 33, 61, 188, 174, 171, 189, 83, 68, 213, 61, 246, 137, 153, 189, 212, 152, 151, 190, 175, 33, 13, 62, 33, 243, 28, 191, 69, 234, 207, 189, 5, 154, 92, 62, 106, 83, 137, 189, 252, 222, 101, 190, 45, 114, 123, 61, 239, 232, 148, 61, 78, 251, 147, 62, 7, 83, 177, 61, 110, 37, 106, 190, 135, 236, 187, 190, 98, 51, 160, 190, 190, 212, 42, 62, 177, 38, 157, 190, 121, 236, 63, 62, 101, 41, 157, 188, 192, 74, 137, 190, 95, 161, 2, 190, 15, 166, 149, 190, 79, 107, 183, 189, 184, 65, 27, 62, 114, 45, 134, 189, 22, 214, 149, 62, 191, 210, 74, 60, 100, 141, 200, 189, 246, 168, 85, 189, 89, 152, 141, 62, 21, 158, 108, 61, 165, 119, 208, 62, 82, 178, 145, 190, 177, 136, 10, 62, 69, 181, 41, 62, 213, 217, 249, 61, 107, 131, 162, 61, 145, 126, 237, 190, 243, 207, 128, 61, 61, 252, 111, 62, 252, 245, 8, 60, 46, 0, 178, 190, 28, 41, 248, 60, 140, 35, 204, 190, 222, 133, 160, 190, 32, 34, 234, 61, 181, 84, 26, 189, 3, 143, 36, 190, 205, 248, 49, 61, 125, 67, 241, 62, 185, 225, 17, 61, 55, 101, 149, 188, 164, 29, 128, 188, 205, 151, 40, 62, 58, 130, 223, 60, 150, 78, 236, 189, 117, 166, 221, 62, 152, 233, 21, 190, 74, 239, 137, 190, 212, 100, 212, 187, 46, 230, 49, 191, 220, 78, 165, 190, 159, 168, 54, 190, 131, 5, 162, 190, 61, 115, 31, 191, 71, 78, 218, 61, 57, 91, 70, 190, 208, 69, 6, 62, 187, 51, 173, 61, 228, 232, 41, 62, 137, 237, 123, 189, 59, 104, 144, 190, 206, 111, 133, 189, 242, 4, 221, 190, 182, 206, 222, 62, 158, 130, 103, 61, 135, 161, 64, 189, 182, 157, 126, 190, 239, 123, 131, 190, 121, 54, 142, 189, 59, 157, 194, 62, 69, 5, 122, 190, 7, 191, 223, 62, 73, 252, 186, 190, 8, 89, 9, 189, 44, 248, 121, 62, 156, 46, 38, 191, 26, 59, 47, 62, 139, 64, 12, 191, 133, 176, 77, 190, 49, 193, 97, 62, 153, 42, 153, 190, 101, 35, 26, 61, 245, 89, 162, 61, 44, 243, 238, 61, 121, 248, 185, 190, 248, 56, 168, 189, 250, 66, 164, 61, 1, 179, 43, 189, 15, 34, 233, 61, 37, 119, 99, 62, 40, 77, 110, 60, 146, 142, 215, 61, 12, 66, 105, 61, 202, 25, 78, 190, 90, 209, 180, 189, 91, 146, 111, 61, 53, 150, 42, 190, 118, 82, 37, 186, 38, 15, 31, 62, 19, 232, 58, 190, 36, 129, 146, 190, 67, 114, 173, 60, 95, 135, 102, 189, 73, 17, 158, 61, 25, 255, 89, 190, 21, 143, 46, 190, 249, 14, 174, 62, 89, 67, 235, 190, 164, 87, 40, 189, 58, 238, 198, 189, 141, 201, 21, 190, 40, 215, 148, 61, 205, 27, 159, 61, 95, 76, 246, 61, 8, 87, 9, 62, 119, 82, 173, 61, 225, 188, 184, 190, 140, 21, 168, 62, 71, 35, 144, 61, 161, 171, 153, 190, 33, 162, 176, 62, 236, 89, 190, 190, 47, 186, 216, 190, 237, 95, 189, 187, 73, 137, 64, 62, 128, 203, 199, 61, 140, 116, 229, 61, 155, 176, 221, 190, 244, 114, 163, 189, 150, 60, 31, 190, 252, 201, 114, 190, 23, 107, 30, 61, 206, 117, 32, 190, 64, 46, 228, 61, 16, 134, 239, 60, 28, 96, 67, 60, 154, 195, 93, 62, 210, 146, 99, 62, 203, 214, 86, 62, 67, 219, 216, 189, 17, 231, 45, 190, 35, 226, 182, 60, 65, 123, 155, 190, 226, 108, 74, 188, 46, 90, 12, 61, 171, 151, 156, 190, 165, 137, 65, 60, 80, 69, 195, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {195, 75, 139, 62, 40, 171, 37, 189, 14, 199, 22, 62, 5, 41, 203, 61, 210, 200, 17, 62, 184, 79, 121, 62, 35, 118, 2, 189, 13, 177, 54, 62, 202, 153, 107, 60, 29, 225, 95, 62, 131, 171, 128, 62, 172, 23, 200, 61, 30, 243, 130, 62, 1, 0, 184, 189, 184, 209, 149, 189, 67, 32, 213, 61, 239, 102, 40, 61, 110, 36, 231, 61, 118, 162, 247, 61, 93, 111, 71, 60, 239, 57, 196, 61, 79, 23, 145, 61, 226, 152, 0, 187, 169, 159, 181, 189, 144, 230, 14, 189, 23, 81, 167, 61, 83, 45, 89, 62, 179, 101, 241, 189, 207, 85, 8, 62, 53, 23, 145, 61, 177, 113, 33, 187, 185, 166, 49, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {156, 73, 179, 188, 143, 16, 207, 61, 223, 244, 232, 190, 201, 206, 84, 62, 200, 79, 24, 62, 201, 216, 96, 59, 153, 100, 227, 62, 146, 91, 12, 191, 184, 49, 255, 190, 187, 76, 96, 63, 103, 50, 66, 191, 154, 21, 128, 62, 34, 169, 195, 62, 61, 210, 165, 61, 108, 159, 155, 190, 247, 158, 101, 191, 142, 112, 243, 189, 8, 75, 179, 189, 177, 28, 29, 63, 132, 196, 31, 191, 60, 173, 52, 62, 171, 241, 6, 63, 158, 187, 95, 190, 224, 41, 239, 185, 0, 200, 78, 62, 169, 63, 200, 62, 77, 94, 70, 190, 152, 254, 143, 190, 207, 21, 241, 190, 104, 93, 77, 63, 35, 120, 58, 61, 41, 142, 0, 63, 252, 103, 42, 190, 60, 121, 167, 190, 124, 121, 31, 62, 81, 71, 150, 62, 219, 199, 28, 190, 73, 57, 14, 191, 97, 217, 214, 189, 70, 146, 78, 188, 184, 95, 122, 62, 24, 182, 19, 187, 46, 150, 68, 61, 146, 166, 231, 188, 251, 23, 120, 190, 82, 31, 246, 189, 86, 228, 169, 189, 48, 217, 8, 62, 114, 219, 29, 62, 69, 75, 156, 188, 158, 195, 133, 62, 98, 224, 79, 62, 83, 191, 196, 189, 93, 186, 175, 188, 80, 179, 137, 189, 8, 192, 130, 189, 228, 21, 177, 189, 228, 156, 238, 61, 224, 252, 239, 189, 229, 149, 6, 62, 193, 23, 215, 189, 101, 156, 46, 62, 127, 148, 246, 189, 65, 200, 7, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 236, 154, 61, 141, 74, 191, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {53, 172, 199, 63, 215, 11, 241, 190, 69, 152, 137, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {70, 127, 99, 63, 231, 243, 9, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0037/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}