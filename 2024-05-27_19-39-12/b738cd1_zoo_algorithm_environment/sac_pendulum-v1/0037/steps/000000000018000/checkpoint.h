// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 146, 132, 63, 49, 54, 57, 63, 60, 224, 96, 62, 141, 74, 227, 190, 10, 247, 152, 63, 115, 118, 190, 62, 229, 232, 213, 190, 180, 214, 91, 63, 161, 141, 147, 61, 128, 88, 33, 190, 152, 163, 201, 191, 245, 232, 95, 190, 188, 44, 49, 191, 187, 232, 193, 62, 182, 187, 104, 188, 202, 124, 92, 191, 210, 73, 41, 191, 121, 42, 131, 61, 227, 139, 108, 191, 218, 145, 20, 63, 46, 39, 3, 63, 205, 118, 74, 62, 137, 225, 62, 63, 171, 121, 91, 62, 130, 152, 131, 62, 150, 143, 133, 63, 85, 148, 141, 190, 7, 39, 46, 63, 90, 39, 80, 63, 177, 94, 178, 62, 126, 31, 213, 190, 134, 147, 48, 63, 42, 167, 132, 62, 115, 217, 231, 62, 139, 50, 6, 191, 10, 41, 179, 62, 29, 187, 57, 63, 130, 160, 140, 191, 189, 61, 164, 190, 138, 92, 244, 62, 33, 122, 232, 189, 215, 86, 115, 190, 59, 134, 45, 191, 198, 94, 30, 191, 38, 126, 124, 190, 158, 148, 170, 190, 29, 91, 8, 63, 97, 166, 32, 191, 89, 220, 39, 62, 199, 212, 132, 191, 68, 148, 81, 189, 21, 240, 43, 63, 93, 32, 15, 191, 124, 117, 69, 62, 155, 158, 179, 188, 159, 188, 29, 191, 57, 28, 190, 62, 89, 251, 81, 62, 168, 56, 38, 63, 251, 59, 223, 190, 144, 150, 198, 61, 111, 102, 252, 190, 219, 60, 116, 190, 227, 20, 6, 63, 219, 142, 138, 63, 124, 80, 255, 189, 120, 146, 168, 190, 96, 207, 70, 63, 150, 250, 239, 60, 223, 214, 38, 190, 106, 167, 169, 191, 67, 50, 244, 190, 51, 254, 254, 62, 151, 201, 99, 190, 78, 38, 201, 62, 25, 24, 17, 63, 12, 120, 177, 63, 224, 48, 161, 62, 44, 203, 40, 63, 167, 89, 65, 191, 163, 169, 80, 190, 59, 58, 87, 63, 146, 80, 94, 191, 147, 123, 122, 190, 19, 253, 79, 63, 171, 211, 119, 63, 187, 198, 34, 63, 137, 36, 55, 191, 115, 137, 10, 60, 27, 20, 74, 63, 7, 235, 76, 190, 25, 93, 30, 190, 56, 116, 10, 63, 147, 144, 83, 63, 11, 6, 5, 191, 62, 186, 20, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 174, 181, 190, 207, 199, 33, 190, 162, 185, 225, 62, 6, 182, 183, 190, 249, 182, 8, 63, 204, 215, 245, 62, 60, 234, 223, 189, 60, 188, 107, 62, 61, 246, 202, 62, 48, 153, 44, 191, 112, 63, 49, 190, 108, 166, 32, 189, 93, 103, 203, 190, 94, 208, 109, 191, 177, 117, 215, 190, 219, 174, 139, 190, 95, 128, 132, 188, 133, 109, 34, 191, 93, 215, 184, 61, 218, 70, 246, 62, 65, 133, 51, 61, 122, 204, 166, 62, 41, 114, 49, 63, 81, 60, 61, 190, 78, 19, 12, 62, 64, 187, 164, 61, 52, 52, 27, 62, 89, 154, 136, 190, 32, 10, 194, 190, 157, 205, 182, 190, 248, 248, 165, 189, 183, 242, 61, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {115, 142, 197, 60, 82, 146, 221, 61, 253, 124, 132, 62, 83, 182, 216, 61, 150, 70, 229, 61, 90, 46, 26, 187, 95, 91, 31, 61, 7, 118, 226, 61, 189, 252, 89, 61, 151, 5, 25, 190, 232, 129, 193, 189, 242, 94, 55, 190, 130, 92, 31, 190, 81, 96, 157, 190, 201, 210, 41, 61, 58, 78, 121, 189, 184, 115, 36, 62, 255, 171, 66, 190, 113, 2, 92, 190, 205, 133, 198, 188, 37, 208, 146, 60, 187, 177, 179, 61, 165, 226, 228, 61, 246, 246, 15, 62, 24, 122, 188, 189, 206, 3, 228, 189, 210, 45, 105, 62, 55, 187, 204, 189, 68, 213, 30, 61, 199, 82, 95, 189, 217, 64, 3, 190, 115, 133, 235, 189, 219, 143, 95, 62, 142, 54, 139, 191, 193, 17, 4, 190, 64, 243, 138, 190, 131, 13, 220, 191, 246, 179, 165, 189, 16, 11, 172, 190, 144, 59, 20, 62, 109, 153, 205, 61, 92, 224, 88, 191, 67, 198, 19, 191, 223, 135, 192, 61, 47, 49, 45, 189, 156, 92, 30, 190, 10, 79, 77, 61, 77, 159, 207, 190, 52, 203, 47, 62, 12, 196, 35, 190, 83, 150, 88, 190, 172, 188, 247, 189, 139, 27, 26, 190, 68, 187, 129, 61, 68, 6, 30, 62, 109, 127, 155, 190, 16, 166, 109, 62, 124, 105, 51, 59, 147, 223, 241, 61, 123, 40, 89, 62, 231, 108, 79, 62, 138, 107, 148, 190, 109, 22, 107, 61, 43, 77, 63, 191, 147, 201, 130, 191, 97, 187, 170, 190, 191, 120, 21, 191, 62, 147, 206, 62, 99, 229, 25, 190, 187, 240, 27, 62, 129, 82, 199, 61, 250, 216, 16, 191, 89, 103, 31, 190, 73, 199, 251, 190, 92, 92, 48, 190, 191, 191, 27, 62, 221, 108, 94, 62, 218, 127, 161, 61, 149, 204, 172, 188, 197, 44, 137, 190, 121, 23, 120, 62, 116, 226, 220, 189, 94, 244, 152, 62, 248, 45, 28, 191, 63, 17, 0, 191, 84, 180, 241, 190, 200, 113, 123, 190, 227, 62, 38, 191, 174, 2, 45, 62, 130, 177, 32, 191, 140, 84, 39, 62, 40, 181, 106, 62, 4, 56, 158, 191, 190, 5, 107, 190, 15, 144, 1, 61, 255, 141, 246, 190, 172, 189, 181, 62, 253, 230, 160, 62, 212, 79, 172, 62, 2, 41, 148, 61, 66, 135, 136, 62, 87, 144, 153, 61, 185, 82, 39, 189, 241, 140, 19, 62, 71, 135, 115, 189, 149, 23, 68, 62, 12, 64, 156, 62, 236, 96, 35, 190, 168, 151, 64, 190, 32, 21, 234, 190, 244, 145, 147, 61, 181, 143, 144, 190, 34, 138, 17, 191, 214, 116, 163, 191, 172, 92, 232, 189, 198, 60, 58, 62, 196, 135, 104, 61, 30, 86, 39, 62, 97, 173, 84, 60, 167, 198, 14, 191, 11, 94, 29, 190, 118, 152, 162, 62, 113, 69, 155, 190, 157, 98, 36, 61, 248, 192, 137, 62, 107, 32, 10, 62, 178, 195, 6, 61, 120, 70, 229, 190, 106, 146, 136, 61, 119, 195, 72, 191, 253, 33, 131, 191, 64, 237, 43, 191, 81, 194, 0, 191, 65, 51, 167, 190, 14, 226, 4, 191, 228, 171, 153, 189, 219, 149, 136, 189, 66, 229, 128, 190, 100, 124, 89, 191, 11, 221, 113, 62, 152, 65, 164, 190, 244, 15, 143, 189, 255, 79, 147, 62, 168, 165, 60, 59, 135, 4, 161, 62, 12, 174, 21, 62, 174, 235, 90, 62, 254, 6, 128, 190, 81, 111, 97, 190, 102, 81, 67, 190, 227, 20, 49, 190, 151, 111, 146, 190, 156, 94, 83, 188, 109, 189, 170, 190, 156, 101, 91, 61, 172, 174, 63, 62, 114, 36, 10, 62, 245, 101, 98, 189, 185, 213, 68, 62, 231, 216, 76, 190, 93, 214, 181, 62, 97, 111, 172, 190, 16, 204, 194, 61, 43, 173, 48, 191, 140, 172, 5, 61, 198, 115, 2, 61, 148, 216, 178, 61, 189, 234, 69, 189, 205, 54, 12, 62, 133, 11, 58, 191, 69, 48, 109, 190, 185, 98, 139, 62, 110, 22, 206, 190, 142, 54, 81, 190, 158, 251, 59, 62, 235, 184, 27, 188, 48, 46, 84, 188, 158, 48, 130, 62, 11, 99, 14, 190, 81, 117, 1, 62, 150, 96, 15, 61, 90, 114, 89, 62, 22, 150, 50, 62, 222, 80, 93, 190, 186, 236, 5, 62, 208, 188, 36, 190, 156, 157, 64, 62, 173, 163, 139, 190, 40, 124, 150, 190, 62, 87, 69, 61, 32, 164, 98, 60, 85, 2, 46, 190, 197, 98, 209, 189, 202, 115, 31, 61, 191, 181, 93, 191, 74, 68, 149, 62, 30, 128, 183, 191, 176, 214, 45, 62, 194, 4, 222, 189, 64, 172, 194, 191, 146, 83, 249, 190, 97, 245, 35, 61, 84, 196, 4, 62, 208, 157, 211, 189, 183, 110, 139, 62, 218, 118, 76, 61, 107, 8, 152, 190, 190, 151, 18, 191, 134, 142, 147, 62, 27, 62, 148, 191, 177, 95, 221, 62, 246, 114, 139, 190, 82, 235, 249, 60, 32, 213, 82, 191, 39, 38, 20, 191, 56, 181, 142, 60, 230, 134, 209, 190, 118, 243, 155, 189, 221, 68, 14, 189, 29, 231, 115, 62, 93, 187, 178, 188, 1, 12, 2, 189, 194, 145, 186, 60, 199, 172, 51, 62, 95, 108, 254, 189, 205, 8, 169, 189, 44, 123, 148, 190, 170, 252, 132, 62, 126, 249, 74, 189, 22, 198, 141, 62, 59, 52, 63, 191, 118, 124, 38, 61, 20, 145, 158, 190, 49, 227, 88, 190, 129, 156, 166, 190, 102, 65, 84, 191, 116, 55, 180, 188, 82, 87, 51, 190, 211, 50, 75, 62, 59, 116, 86, 62, 56, 119, 0, 189, 141, 139, 30, 191, 30, 25, 14, 190, 81, 200, 210, 190, 157, 248, 152, 61, 151, 6, 70, 191, 0, 235, 213, 190, 8, 131, 65, 62, 190, 161, 75, 191, 85, 253, 108, 190, 177, 13, 91, 62, 248, 98, 132, 190, 101, 113, 85, 190, 173, 182, 66, 191, 27, 86, 39, 191, 236, 166, 128, 59, 51, 12, 216, 191, 131, 93, 231, 190, 114, 135, 34, 191, 127, 115, 50, 62, 88, 200, 87, 191, 148, 186, 99, 62, 205, 115, 168, 61, 14, 173, 0, 191, 96, 49, 9, 62, 113, 49, 6, 191, 7, 32, 68, 190, 17, 178, 46, 62, 86, 67, 151, 62, 233, 53, 36, 188, 133, 148, 165, 190, 59, 33, 32, 190, 157, 143, 196, 62, 160, 23, 34, 190, 116, 76, 170, 62, 147, 52, 30, 62, 30, 156, 165, 60, 125, 49, 171, 61, 5, 6, 39, 191, 165, 184, 96, 61, 132, 8, 233, 60, 0, 128, 205, 191, 78, 1, 172, 61, 105, 33, 235, 62, 245, 141, 142, 191, 204, 15, 184, 60, 179, 180, 100, 62, 16, 174, 161, 62, 23, 178, 202, 62, 203, 133, 201, 190, 14, 26, 153, 62, 28, 54, 89, 190, 175, 227, 249, 62, 99, 135, 139, 62, 176, 51, 13, 190, 40, 249, 148, 190, 194, 12, 53, 190, 134, 101, 20, 62, 97, 203, 32, 191, 124, 128, 190, 190, 204, 162, 254, 190, 57, 176, 12, 189, 81, 221, 38, 189, 216, 204, 170, 190, 38, 20, 43, 191, 154, 246, 7, 190, 140, 48, 70, 191, 40, 98, 176, 62, 71, 167, 89, 191, 15, 230, 25, 60, 211, 176, 70, 62, 49, 136, 183, 191, 233, 199, 86, 190, 127, 26, 68, 189, 63, 81, 152, 191, 230, 204, 140, 191, 123, 73, 95, 62, 144, 136, 28, 61, 56, 101, 48, 190, 251, 198, 160, 62, 235, 193, 145, 61, 143, 90, 26, 62, 205, 163, 185, 61, 69, 186, 219, 62, 181, 41, 177, 62, 24, 106, 169, 62, 194, 177, 12, 191, 82, 150, 30, 61, 131, 189, 46, 61, 47, 160, 116, 191, 132, 17, 110, 62, 99, 99, 179, 190, 167, 206, 233, 190, 171, 88, 71, 191, 8, 160, 191, 62, 111, 33, 75, 62, 133, 14, 8, 62, 135, 58, 54, 62, 190, 190, 130, 62, 197, 103, 157, 190, 36, 157, 234, 59, 184, 218, 49, 62, 67, 117, 185, 62, 0, 165, 46, 190, 91, 53, 98, 191, 217, 120, 4, 63, 15, 48, 210, 189, 75, 123, 65, 191, 148, 63, 217, 190, 58, 163, 40, 191, 246, 111, 110, 191, 27, 105, 140, 190, 40, 219, 154, 190, 115, 172, 252, 189, 131, 158, 52, 62, 201, 52, 13, 190, 131, 157, 200, 62, 79, 211, 192, 62, 81, 53, 122, 60, 164, 6, 238, 60, 200, 238, 125, 190, 73, 10, 193, 190, 24, 64, 26, 190, 133, 9, 38, 62, 85, 103, 194, 62, 15, 153, 205, 190, 173, 212, 67, 190, 111, 154, 71, 191, 12, 218, 111, 62, 16, 164, 138, 190, 91, 155, 87, 189, 219, 242, 128, 61, 50, 174, 191, 189, 166, 122, 168, 60, 73, 14, 55, 62, 117, 75, 136, 190, 62, 19, 85, 189, 150, 195, 149, 190, 232, 164, 156, 62, 203, 111, 144, 62, 137, 139, 167, 189, 159, 14, 7, 62, 127, 232, 225, 59, 151, 7, 173, 62, 224, 167, 69, 189, 119, 206, 154, 61, 219, 116, 114, 62, 7, 237, 80, 187, 119, 229, 73, 62, 17, 147, 118, 62, 133, 218, 254, 61, 60, 155, 253, 189, 101, 141, 140, 190, 211, 206, 250, 189, 185, 139, 169, 61, 230, 19, 215, 61, 114, 68, 177, 62, 74, 56, 64, 190, 56, 30, 216, 190, 67, 205, 25, 191, 230, 65, 152, 62, 163, 59, 174, 189, 166, 211, 192, 190, 43, 3, 136, 61, 168, 130, 178, 189, 206, 87, 235, 189, 21, 230, 148, 62, 207, 242, 201, 190, 177, 139, 107, 61, 180, 167, 175, 189, 208, 142, 51, 62, 137, 93, 1, 63, 100, 198, 212, 189, 28, 117, 230, 189, 59, 111, 15, 62, 47, 181, 82, 62, 9, 143, 174, 189, 95, 17, 17, 190, 253, 83, 1, 190, 184, 206, 51, 190, 96, 61, 31, 62, 202, 118, 91, 190, 84, 133, 246, 61, 117, 69, 3, 190, 241, 234, 6, 188, 66, 144, 49, 190, 141, 45, 42, 189, 145, 28, 142, 61, 172, 245, 171, 189, 190, 188, 38, 190, 69, 18, 46, 190, 99, 193, 136, 60, 186, 171, 48, 190, 235, 209, 0, 189, 35, 106, 179, 61, 197, 71, 200, 189, 59, 176, 119, 61, 119, 153, 8, 190, 94, 50, 23, 190, 125, 25, 175, 189, 18, 55, 45, 190, 57, 70, 22, 190, 83, 240, 33, 61, 92, 44, 19, 190, 189, 121, 246, 189, 203, 226, 220, 61, 219, 3, 59, 189, 73, 221, 42, 190, 43, 21, 216, 62, 50, 1, 88, 190, 177, 33, 231, 59, 26, 79, 214, 191, 235, 218, 210, 189, 151, 94, 198, 190, 194, 207, 130, 189, 39, 170, 125, 61, 206, 145, 100, 188, 221, 70, 143, 62, 109, 136, 10, 188, 163, 80, 242, 61, 73, 193, 240, 190, 95, 34, 62, 191, 212, 171, 191, 189, 206, 225, 20, 190, 53, 21, 75, 190, 81, 225, 10, 63, 83, 111, 109, 61, 255, 164, 206, 61, 30, 65, 48, 190, 45, 14, 161, 62, 150, 164, 88, 62, 86, 100, 42, 191, 146, 229, 48, 61, 130, 40, 157, 62, 154, 4, 81, 62, 173, 161, 130, 60, 6, 9, 175, 62, 182, 227, 87, 61, 67, 254, 24, 190, 204, 186, 175, 186, 173, 140, 166, 189, 37, 236, 151, 190, 40, 138, 163, 189, 177, 139, 174, 61, 0, 238, 71, 188, 67, 38, 106, 62, 94, 121, 153, 190, 187, 232, 241, 189, 172, 14, 176, 190, 169, 212, 179, 189, 161, 148, 160, 190, 133, 41, 132, 60, 168, 165, 158, 190, 127, 158, 70, 61, 55, 72, 86, 62, 187, 214, 8, 62, 34, 43, 132, 190, 48, 174, 48, 60, 125, 45, 159, 61, 144, 2, 45, 191, 241, 210, 33, 191, 206, 108, 193, 190, 135, 125, 64, 189, 178, 117, 136, 190, 117, 145, 182, 190, 88, 225, 232, 60, 213, 140, 239, 190, 151, 217, 73, 190, 3, 195, 12, 190, 224, 76, 103, 191, 231, 252, 9, 191, 225, 108, 45, 190, 118, 233, 11, 62, 97, 201, 131, 190, 22, 185, 108, 62, 183, 172, 174, 190, 22, 235, 65, 62, 139, 71, 226, 190, 139, 106, 73, 190, 130, 153, 102, 62, 198, 44, 77, 62, 1, 207, 24, 190, 137, 93, 182, 190, 96, 104, 65, 190, 243, 190, 132, 191, 198, 142, 100, 191, 169, 9, 161, 190, 81, 14, 160, 189, 26, 61, 50, 191, 179, 18, 207, 189, 80, 114, 185, 190, 128, 203, 12, 62, 248, 12, 179, 61, 156, 112, 54, 62, 34, 170, 155, 62, 235, 207, 147, 190, 101, 146, 155, 190, 246, 141, 12, 62, 175, 249, 199, 188, 241, 32, 38, 191, 233, 191, 199, 189, 223, 47, 24, 190, 168, 194, 32, 190, 144, 230, 21, 190, 252, 208, 240, 191, 233, 111, 189, 190, 73, 91, 165, 190, 253, 60, 141, 62, 229, 147, 79, 190, 114, 60, 245, 60, 202, 8, 115, 62, 229, 150, 231, 190, 46, 252, 170, 189, 245, 91, 27, 188, 238, 133, 176, 190, 214, 202, 124, 62, 202, 233, 221, 62, 44, 142, 104, 62, 5, 116, 160, 187, 78, 86, 253, 61, 219, 136, 0, 62, 164, 193, 188, 188, 215, 177, 153, 61, 90, 135, 148, 189, 212, 111, 122, 62, 80, 231, 46, 190, 46, 133, 224, 190, 165, 163, 37, 61, 34, 156, 7, 62, 223, 14, 133, 191, 217, 140, 48, 62, 151, 87, 211, 62, 238, 176, 78, 191, 49, 8, 202, 189, 196, 215, 113, 62, 111, 8, 3, 62, 132, 245, 23, 191, 31, 45, 187, 190, 58, 33, 143, 62, 221, 137, 149, 191, 192, 107, 224, 62, 236, 190, 46, 189, 53, 61, 27, 62, 108, 3, 210, 189, 133, 168, 168, 190, 94, 19, 216, 190, 41, 233, 135, 190, 180, 7, 117, 62, 16, 193, 117, 61, 230, 105, 77, 62, 83, 250, 3, 60, 204, 82, 223, 189, 7, 34, 3, 62, 65, 222, 221, 62, 53, 215, 91, 61, 178, 168, 20, 62, 232, 32, 226, 190, 21, 151, 155, 190, 36, 76, 83, 62, 137, 35, 146, 191, 150, 240, 63, 189, 232, 223, 250, 190, 170, 170, 174, 62, 101, 105, 173, 62, 146, 234, 208, 189, 228, 77, 16, 189, 148, 102, 218, 61, 146, 77, 192, 62, 50, 148, 185, 62, 26, 200, 180, 190, 48, 219, 7, 62, 85, 225, 189, 62, 234, 211, 243, 60, 233, 107, 49, 190, 99, 121, 45, 191, 30, 89, 29, 62, 140, 149, 129, 62, 12, 73, 220, 62, 115, 229, 241, 190, 156, 229, 107, 61, 186, 89, 196, 190, 116, 150, 12, 191, 125, 140, 149, 62, 53, 107, 124, 62, 211, 215, 162, 189, 203, 13, 222, 61, 60, 115, 102, 62, 45, 146, 129, 190, 37, 191, 59, 188, 223, 202, 78, 62, 178, 154, 128, 62, 243, 125, 66, 189, 239, 94, 214, 189, 212, 236, 96, 62, 234, 94, 40, 190, 89, 199, 244, 190, 90, 128, 156, 62, 87, 179, 210, 190, 63, 64, 73, 190, 193, 46, 18, 191, 98, 235, 16, 190, 216, 32, 57, 62, 178, 58, 137, 59, 253, 167, 162, 189, 250, 242, 153, 190, 239, 232, 48, 190, 197, 242, 160, 61, 172, 88, 206, 188, 85, 49, 52, 190, 43, 167, 81, 189, 88, 46, 93, 189, 45, 111, 150, 60, 80, 168, 202, 62, 119, 235, 38, 63, 94, 206, 39, 190, 226, 24, 126, 190, 210, 79, 107, 190, 83, 168, 154, 190, 92, 236, 58, 190, 2, 18, 128, 62, 233, 44, 1, 62, 51, 132, 160, 62, 60, 240, 17, 190, 162, 144, 194, 60, 173, 98, 145, 189, 104, 49, 189, 60, 172, 137, 2, 59, 225, 192, 127, 62, 1, 145, 41, 190, 175, 45, 32, 61, 250, 205, 28, 62, 169, 112, 7, 63, 114, 43, 24, 190, 11, 166, 53, 190, 30, 171, 118, 189, 66, 241, 199, 190, 243, 119, 146, 62, 180, 157, 37, 189, 223, 97, 13, 61, 16, 252, 189, 61, 96, 149, 92, 190, 192, 108, 141, 190, 185, 73, 93, 190, 239, 76, 187, 189, 232, 187, 202, 62, 244, 165, 18, 63, 48, 20, 246, 190, 167, 148, 141, 190, 249, 253, 47, 60, 80, 6, 124, 190, 161, 234, 181, 189, 231, 229, 229, 62, 146, 201, 161, 188, 151, 200, 179, 188, 220, 240, 98, 62, 245, 83, 185, 190, 255, 245, 164, 61, 49, 206, 214, 190, 234, 119, 159, 62, 205, 44, 75, 63, 13, 165, 128, 189, 23, 224, 55, 62, 138, 180, 14, 62, 240, 49, 221, 62, 183, 32, 1, 63, 217, 116, 231, 61, 120, 117, 63, 189, 164, 119, 27, 62, 103, 125, 0, 61, 159, 124, 147, 189, 68, 255, 148, 189, 92, 66, 232, 60, 69, 14, 220, 61, 155, 5, 27, 188, 53, 202, 66, 190, 167, 84, 105, 62, 191, 59, 68, 190, 47, 20, 16, 191, 237, 21, 93, 62, 119, 50, 46, 62, 18, 167, 67, 62, 15, 177, 237, 62, 174, 159, 4, 62, 223, 220, 197, 61, 241, 151, 232, 61, 145, 74, 225, 61, 119, 37, 203, 189, 77, 68, 56, 61, 202, 53, 143, 62, 203, 25, 84, 62, 65, 91, 15, 62, 139, 242, 200, 190, 82, 129, 12, 62, 173, 152, 15, 189, 223, 181, 252, 61, 140, 243, 203, 189, 246, 113, 235, 189, 239, 120, 1, 190, 21, 0, 34, 190, 206, 239, 43, 190, 158, 10, 166, 189, 238, 233, 86, 190, 81, 65, 156, 189, 35, 228, 152, 188, 41, 180, 233, 188, 14, 65, 70, 189, 57, 227, 103, 189, 252, 237, 219, 60, 76, 89, 231, 61, 197, 253, 150, 61, 116, 202, 243, 189, 102, 70, 240, 188, 116, 202, 43, 190, 1, 236, 102, 189, 244, 27, 80, 188, 223, 170, 9, 62, 166, 37, 12, 189, 18, 211, 248, 61, 188, 159, 9, 190, 120, 249, 18, 62, 41, 185, 145, 187, 22, 139, 0, 61, 176, 245, 26, 190, 209, 25, 14, 190, 144, 152, 39, 190, 117, 87, 129, 61, 51, 65, 164, 61, 178, 103, 13, 190, 208, 83, 156, 190, 140, 201, 237, 189, 14, 252, 121, 190, 34, 132, 184, 189, 81, 177, 44, 191, 116, 48, 235, 190, 96, 114, 0, 190, 161, 41, 32, 191, 198, 84, 176, 61, 20, 247, 113, 61, 18, 199, 23, 190, 188, 190, 54, 60, 143, 141, 87, 62, 138, 254, 39, 63, 223, 62, 13, 190, 18, 119, 136, 60, 221, 143, 55, 190, 106, 1, 246, 190, 4, 216, 235, 62, 76, 218, 214, 61, 0, 129, 48, 61, 37, 75, 24, 62, 195, 197, 174, 190, 247, 213, 29, 62, 194, 197, 111, 189, 247, 202, 108, 190, 55, 225, 89, 62, 189, 130, 151, 62, 184, 109, 137, 189, 63, 83, 99, 190, 85, 251, 62, 190, 237, 240, 179, 62, 193, 107, 136, 190, 194, 54, 253, 190, 86, 26, 193, 189, 169, 16, 121, 190, 69, 255, 148, 190, 205, 63, 118, 190, 254, 234, 195, 61, 100, 85, 9, 62, 238, 59, 114, 190, 155, 218, 189, 189, 94, 139, 26, 191, 36, 212, 144, 61, 85, 57, 178, 62, 173, 247, 77, 63, 164, 106, 191, 190, 171, 215, 1, 190, 157, 47, 197, 61, 90, 160, 235, 62, 159, 213, 55, 189, 204, 146, 29, 62, 3, 160, 224, 61, 35, 220, 52, 62, 143, 138, 228, 188, 70, 214, 144, 189, 206, 158, 53, 62, 158, 123, 225, 190, 242, 200, 75, 62, 96, 160, 6, 63, 132, 59, 82, 190, 38, 183, 41, 60, 229, 8, 2, 61, 137, 79, 32, 63, 207, 194, 242, 62, 197, 120, 101, 190, 177, 10, 155, 60, 205, 231, 182, 62, 182, 210, 220, 60, 12, 123, 177, 61, 145, 99, 217, 188, 205, 87, 99, 62, 126, 255, 189, 60, 54, 225, 241, 189, 10, 26, 17, 190, 147, 188, 182, 188, 79, 228, 213, 190, 97, 212, 12, 191, 7, 67, 49, 62, 150, 88, 244, 61, 234, 77, 41, 62, 14, 115, 222, 62, 115, 149, 247, 61, 53, 183, 44, 190, 139, 26, 156, 60, 50, 247, 61, 62, 15, 66, 244, 61, 178, 42, 252, 61, 131, 3, 243, 61, 71, 121, 148, 62, 17, 181, 11, 190, 66, 65, 1, 191, 147, 83, 110, 188, 173, 36, 84, 190, 69, 147, 93, 61, 103, 213, 49, 190, 61, 248, 218, 62, 129, 67, 82, 190, 22, 38, 33, 191, 237, 98, 164, 62, 63, 123, 141, 191, 196, 46, 195, 190, 124, 190, 223, 61, 217, 57, 185, 189, 171, 171, 3, 191, 190, 203, 148, 62, 171, 174, 180, 189, 24, 161, 170, 62, 107, 24, 191, 61, 239, 14, 106, 190, 161, 136, 122, 191, 183, 121, 172, 190, 120, 140, 106, 62, 204, 224, 151, 61, 133, 6, 22, 62, 109, 17, 193, 190, 30, 133, 151, 190, 254, 59, 126, 190, 84, 172, 195, 190, 82, 255, 49, 190, 197, 115, 59, 62, 135, 155, 30, 62, 72, 87, 186, 61, 229, 197, 236, 189, 99, 97, 36, 189, 81, 236, 27, 190, 104, 65, 140, 62, 143, 67, 202, 188, 219, 147, 213, 62, 211, 231, 83, 190, 84, 71, 135, 62, 198, 17, 20, 62, 245, 117, 40, 62, 88, 205, 26, 190, 37, 108, 243, 190, 138, 140, 240, 61, 7, 180, 78, 62, 241, 185, 8, 62, 244, 77, 121, 190, 192, 173, 161, 61, 106, 204, 15, 191, 20, 8, 66, 191, 212, 86, 246, 61, 185, 193, 148, 188, 177, 112, 81, 190, 143, 39, 68, 62, 2, 152, 210, 62, 96, 200, 23, 61, 17, 204, 216, 189, 93, 8, 30, 188, 221, 208, 64, 62, 107, 155, 40, 189, 132, 79, 12, 189, 107, 164, 252, 62, 203, 34, 26, 190, 122, 200, 178, 190, 31, 213, 61, 61, 147, 250, 77, 191, 182, 91, 154, 190, 94, 204, 142, 190, 149, 207, 153, 190, 145, 62, 133, 191, 117, 22, 10, 62, 254, 22, 104, 191, 220, 126, 71, 62, 245, 18, 63, 187, 28, 208, 154, 189, 25, 183, 46, 189, 19, 246, 192, 190, 75, 3, 79, 189, 51, 224, 70, 191, 71, 125, 242, 62, 69, 45, 219, 58, 117, 179, 191, 189, 178, 162, 196, 189, 187, 67, 107, 190, 63, 4, 135, 187, 234, 229, 2, 63, 113, 47, 106, 190, 129, 181, 186, 62, 29, 40, 235, 190, 110, 57, 100, 190, 8, 221, 67, 62, 14, 96, 128, 191, 74, 82, 83, 62, 183, 78, 80, 191, 103, 226, 36, 189, 47, 62, 156, 62, 11, 145, 119, 190, 219, 174, 104, 188, 144, 222, 54, 61, 234, 138, 234, 62, 165, 4, 39, 191, 136, 187, 112, 61, 117, 35, 164, 62, 72, 232, 92, 61, 76, 117, 188, 62, 51, 21, 160, 62, 19, 119, 222, 188, 120, 64, 21, 62, 105, 5, 27, 189, 247, 162, 71, 190, 19, 23, 26, 61, 80, 248, 156, 188, 126, 188, 133, 190, 32, 210, 219, 189, 93, 205, 244, 62, 59, 227, 23, 189, 79, 208, 75, 190, 237, 136, 61, 190, 237, 182, 227, 189, 226, 220, 235, 189, 31, 101, 144, 190, 127, 229, 97, 189, 32, 169, 248, 62, 94, 155, 139, 190, 183, 9, 155, 189, 133, 202, 37, 189, 81, 110, 87, 190, 88, 27, 92, 61, 39, 170, 23, 62, 115, 35, 86, 61, 189, 254, 188, 61, 201, 81, 237, 190, 196, 0, 161, 190, 69, 153, 136, 62, 53, 208, 97, 189, 18, 144, 63, 191, 246, 5, 124, 62, 214, 80, 39, 191, 227, 185, 64, 191, 131, 249, 38, 190, 167, 143, 59, 62, 168, 147, 215, 62, 242, 110, 24, 189, 65, 164, 37, 191, 71, 133, 116, 62, 221, 190, 64, 62, 17, 220, 137, 190, 152, 113, 67, 61, 124, 253, 132, 190, 45, 237, 67, 61, 165, 157, 171, 189, 130, 149, 37, 188, 16, 77, 115, 62, 123, 70, 102, 62, 205, 209, 5, 62, 204, 220, 17, 189, 197, 174, 75, 190, 202, 143, 158, 189, 38, 96, 170, 190, 54, 217, 40, 62, 135, 28, 0, 62, 162, 178, 223, 190, 105, 46, 107, 61, 245, 62, 188, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 17, 62, 62, 46, 34, 41, 189, 139, 159, 62, 62, 159, 36, 29, 62, 101, 178, 119, 62, 99, 49, 109, 62, 49, 117, 197, 61, 230, 217, 150, 61, 255, 251, 74, 61, 27, 41, 106, 62, 110, 187, 152, 62, 21, 153, 41, 62, 222, 162, 135, 62, 158, 30, 236, 189, 13, 30, 171, 189, 177, 47, 202, 185, 106, 239, 162, 61, 230, 171, 19, 62, 254, 247, 60, 62, 30, 178, 108, 186, 122, 65, 128, 60, 125, 185, 75, 61, 243, 150, 150, 188, 229, 52, 216, 189, 26, 181, 195, 189, 165, 142, 203, 61, 31, 113, 98, 62, 238, 180, 75, 190, 206, 74, 232, 61, 81, 6, 255, 61, 248, 126, 173, 61, 217, 106, 132, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 73, 143, 59, 116, 69, 184, 60, 115, 234, 134, 191, 214, 182, 172, 62, 59, 8, 59, 63, 189, 214, 218, 60, 229, 242, 158, 63, 28, 210, 100, 191, 192, 5, 87, 191, 177, 134, 173, 63, 177, 108, 144, 191, 26, 39, 159, 62, 133, 100, 171, 62, 74, 139, 141, 61, 170, 68, 155, 190, 109, 21, 86, 191, 26, 250, 70, 191, 138, 22, 146, 190, 105, 235, 134, 63, 122, 166, 34, 191, 79, 65, 34, 62, 222, 145, 8, 63, 152, 41, 74, 190, 48, 226, 242, 60, 221, 174, 214, 62, 21, 120, 218, 62, 125, 146, 84, 190, 83, 86, 227, 190, 34, 173, 250, 190, 117, 66, 176, 63, 35, 76, 60, 62, 180, 5, 19, 63, 114, 184, 47, 190, 95, 254, 9, 191, 23, 105, 179, 62, 44, 238, 54, 62, 198, 161, 0, 191, 210, 175, 19, 191, 242, 182, 31, 190, 21, 73, 14, 189, 124, 125, 98, 62, 152, 182, 44, 190, 176, 85, 79, 62, 41, 252, 241, 61, 73, 208, 99, 190, 113, 72, 248, 189, 206, 38, 103, 190, 18, 140, 205, 62, 185, 92, 130, 62, 17, 113, 232, 189, 0, 209, 35, 62, 119, 254, 137, 62, 224, 156, 18, 190, 23, 193, 104, 189, 153, 188, 8, 190, 252, 141, 10, 189, 241, 153, 90, 188, 130, 192, 131, 61, 242, 212, 58, 190, 40, 204, 235, 61, 234, 68, 30, 190, 3, 179, 45, 62, 73, 174, 186, 189, 108, 223, 83, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 154, 145, 61, 98, 105, 253, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {44, 21, 145, 191, 77, 1, 138, 191, 58, 125, 140, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {95, 112, 61, 192, 247, 219, 18, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0037/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}