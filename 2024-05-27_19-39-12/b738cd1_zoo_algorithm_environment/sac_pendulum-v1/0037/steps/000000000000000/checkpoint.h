// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {223, 86, 19, 63, 82, 219, 123, 62, 173, 153, 168, 189, 171, 77, 84, 190, 99, 22, 170, 62, 83, 129, 175, 62, 179, 99, 173, 60, 170, 209, 172, 61, 30, 154, 140, 62, 112, 60, 92, 190, 75, 122, 10, 191, 223, 145, 219, 190, 100, 80, 117, 190, 106, 13, 165, 61, 189, 53, 61, 61, 169, 10, 238, 190, 2, 147, 12, 190, 220, 146, 41, 190, 128, 234, 12, 191, 59, 212, 201, 187, 192, 72, 206, 62, 156, 188, 43, 62, 97, 4, 218, 61, 11, 5, 9, 63, 83, 133, 179, 62, 29, 67, 11, 63, 184, 43, 0, 189, 92, 4, 144, 62, 74, 128, 60, 62, 225, 90, 226, 62, 185, 214, 64, 190, 147, 1, 56, 189, 142, 200, 22, 62, 9, 239, 154, 62, 218, 44, 19, 191, 247, 141, 12, 62, 79, 199, 197, 61, 45, 163, 220, 190, 236, 171, 204, 190, 221, 57, 125, 189, 4, 207, 51, 62, 231, 59, 76, 190, 249, 3, 230, 190, 1, 12, 108, 61, 85, 198, 106, 190, 30, 254, 193, 190, 174, 209, 12, 62, 111, 188, 222, 190, 209, 72, 160, 62, 172, 129, 228, 190, 190, 166, 118, 189, 185, 209, 178, 62, 226, 219, 11, 191, 132, 86, 230, 61, 2, 15, 133, 62, 105, 130, 218, 190, 56, 28, 48, 62, 147, 94, 238, 62, 192, 86, 1, 63, 87, 75, 137, 190, 152, 2, 156, 62, 45, 131, 243, 61, 168, 61, 200, 190, 152, 223, 249, 62, 68, 221, 12, 63, 211, 67, 155, 61, 20, 28, 157, 62, 79, 170, 213, 62, 48, 207, 37, 62, 89, 130, 166, 59, 78, 59, 50, 189, 222, 132, 208, 190, 79, 31, 13, 63, 72, 58, 157, 190, 189, 125, 168, 62, 219, 11, 166, 62, 16, 205, 244, 62, 209, 112, 163, 62, 18, 197, 131, 62, 230, 93, 34, 188, 173, 58, 144, 190, 157, 186, 2, 63, 228, 24, 104, 190, 160, 109, 153, 189, 25, 193, 205, 62, 118, 106, 144, 62, 112, 16, 19, 63, 194, 156, 245, 190, 48, 157, 201, 190, 104, 221, 6, 63, 115, 64, 155, 189, 249, 54, 228, 190, 147, 191, 143, 62, 244, 220, 11, 63, 44, 167, 37, 62, 146, 169, 226, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 182, 19, 191, 130, 170, 150, 190, 19, 52, 185, 62, 167, 87, 181, 61, 178, 28, 139, 59, 176, 121, 215, 62, 252, 90, 204, 190, 194, 19, 182, 62, 49, 226, 11, 63, 39, 230, 7, 191, 68, 12, 5, 190, 128, 91, 152, 62, 10, 4, 34, 190, 50, 84, 9, 191, 245, 113, 105, 188, 19, 167, 17, 190, 205, 198, 15, 188, 248, 90, 15, 191, 52, 172, 9, 61, 187, 20, 152, 62, 129, 26, 75, 189, 24, 217, 17, 63, 73, 182, 13, 63, 168, 221, 62, 190, 238, 21, 60, 62, 57, 250, 194, 189, 85, 208, 201, 62, 216, 186, 97, 190, 115, 190, 251, 190, 148, 135, 253, 190, 220, 97, 72, 189, 111, 129, 13, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 241, 28, 190, 42, 231, 148, 61, 200, 117, 201, 61, 220, 8, 154, 61, 24, 157, 13, 62, 219, 23, 105, 61, 24, 30, 169, 61, 227, 116, 49, 62, 84, 223, 25, 61, 10, 86, 135, 189, 133, 70, 5, 190, 74, 192, 219, 188, 178, 206, 140, 189, 251, 170, 4, 190, 97, 233, 59, 61, 32, 164, 66, 189, 66, 239, 63, 60, 172, 134, 32, 189, 183, 20, 68, 188, 36, 8, 234, 60, 152, 17, 184, 60, 33, 214, 64, 61, 47, 107, 250, 59, 196, 97, 209, 61, 70, 116, 3, 61, 110, 106, 5, 190, 17, 62, 21, 62, 25, 33, 228, 61, 228, 79, 179, 61, 59, 207, 48, 61, 37, 84, 194, 59, 27, 137, 237, 188, 140, 213, 212, 61, 42, 215, 161, 61, 244, 175, 24, 190, 79, 45, 171, 189, 208, 57, 212, 189, 98, 115, 21, 189, 25, 100, 51, 190, 36, 20, 5, 61, 240, 165, 47, 62, 157, 240, 95, 61, 233, 199, 112, 58, 148, 158, 243, 189, 199, 29, 145, 61, 84, 158, 10, 62, 17, 63, 40, 61, 30, 115, 4, 190, 76, 33, 188, 61, 241, 153, 143, 189, 153, 232, 157, 189, 136, 87, 226, 189, 185, 179, 173, 61, 13, 144, 11, 189, 73, 27, 190, 61, 123, 28, 232, 189, 103, 248, 234, 61, 103, 24, 98, 60, 191, 42, 221, 58, 5, 254, 153, 61, 75, 179, 19, 62, 194, 41, 198, 189, 143, 14, 228, 61, 23, 164, 28, 190, 221, 39, 189, 60, 112, 1, 252, 189, 103, 16, 37, 190, 238, 222, 140, 61, 62, 224, 105, 189, 34, 200, 230, 189, 161, 31, 133, 61, 219, 144, 133, 59, 185, 39, 168, 189, 223, 194, 91, 189, 80, 218, 50, 62, 101, 101, 225, 188, 101, 133, 140, 60, 143, 218, 27, 62, 8, 197, 168, 61, 133, 84, 22, 62, 77, 240, 137, 189, 88, 92, 160, 61, 3, 214, 166, 61, 22, 109, 41, 190, 144, 69, 221, 189, 23, 90, 210, 188, 29, 59, 252, 61, 195, 239, 227, 189, 165, 73, 163, 61, 157, 0, 117, 61, 128, 190, 34, 62, 243, 226, 25, 61, 120, 26, 3, 188, 122, 45, 13, 190, 212, 61, 231, 60, 158, 165, 57, 189, 103, 160, 240, 60, 26, 117, 240, 61, 253, 24, 18, 62, 254, 55, 232, 61, 233, 60, 118, 61, 197, 123, 152, 189, 31, 9, 12, 190, 112, 178, 10, 61, 221, 78, 224, 189, 255, 131, 34, 62, 253, 59, 52, 62, 254, 66, 165, 60, 60, 197, 131, 186, 241, 190, 151, 61, 69, 193, 192, 61, 239, 32, 93, 61, 250, 32, 8, 62, 244, 92, 39, 190, 226, 221, 40, 62, 20, 254, 243, 61, 174, 3, 38, 62, 59, 230, 227, 188, 67, 213, 44, 190, 48, 237, 40, 190, 154, 24, 35, 189, 231, 230, 72, 61, 79, 104, 6, 190, 204, 56, 7, 62, 80, 104, 29, 62, 26, 211, 2, 62, 35, 48, 217, 61, 16, 155, 205, 61, 249, 204, 82, 187, 186, 119, 6, 61, 247, 161, 14, 190, 9, 94, 41, 190, 21, 104, 25, 62, 143, 67, 7, 190, 18, 119, 11, 190, 163, 241, 23, 190, 130, 83, 199, 61, 50, 53, 230, 189, 214, 150, 50, 190, 25, 173, 227, 61, 136, 98, 195, 189, 244, 15, 143, 189, 5, 101, 212, 61, 57, 37, 242, 59, 189, 184, 207, 61, 247, 168, 33, 190, 156, 176, 160, 61, 94, 39, 59, 189, 141, 177, 202, 188, 18, 143, 152, 189, 101, 116, 70, 189, 215, 152, 163, 189, 10, 185, 253, 189, 71, 224, 227, 189, 84, 38, 6, 190, 41, 4, 245, 61, 143, 89, 160, 61, 65, 116, 2, 188, 235, 196, 50, 62, 251, 1, 113, 60, 179, 103, 8, 62, 69, 35, 3, 62, 124, 44, 107, 189, 117, 215, 9, 190, 223, 205, 149, 188, 231, 80, 216, 189, 194, 196, 119, 188, 130, 207, 33, 61, 70, 156, 168, 188, 8, 142, 27, 190, 177, 157, 0, 190, 111, 39, 168, 61, 117, 228, 54, 61, 11, 232, 11, 190, 108, 180, 7, 61, 154, 159, 88, 188, 250, 240, 44, 62, 239, 94, 50, 62, 185, 105, 35, 190, 178, 133, 98, 189, 56, 69, 30, 60, 70, 169, 154, 61, 213, 44, 186, 188, 111, 214, 0, 190, 241, 243, 166, 188, 64, 139, 136, 61, 124, 76, 18, 62, 58, 92, 246, 189, 250, 96, 23, 190, 166, 5, 50, 190, 69, 98, 1, 190, 91, 78, 22, 190, 92, 91, 91, 189, 181, 135, 135, 61, 4, 13, 57, 189, 211, 78, 243, 61, 29, 47, 28, 190, 242, 93, 29, 62, 68, 27, 46, 62, 111, 150, 22, 190, 231, 7, 172, 61, 145, 214, 35, 61, 102, 155, 43, 62, 169, 216, 34, 190, 187, 215, 87, 61, 150, 5, 33, 60, 58, 165, 142, 61, 171, 91, 43, 60, 222, 124, 135, 61, 20, 125, 32, 189, 11, 9, 17, 62, 252, 148, 22, 59, 6, 201, 163, 61, 177, 66, 203, 189, 72, 66, 162, 186, 108, 109, 91, 61, 117, 104, 5, 190, 122, 202, 166, 189, 202, 214, 47, 190, 167, 110, 149, 187, 63, 167, 155, 61, 126, 11, 82, 188, 101, 118, 29, 190, 153, 37, 246, 60, 38, 66, 128, 59, 31, 77, 197, 60, 196, 202, 231, 188, 238, 122, 193, 188, 105, 84, 183, 61, 136, 237, 8, 62, 62, 123, 5, 190, 191, 134, 3, 62, 76, 198, 51, 189, 154, 74, 27, 190, 189, 15, 56, 189, 70, 96, 131, 189, 179, 248, 34, 190, 205, 151, 245, 61, 204, 192, 13, 190, 78, 209, 3, 62, 188, 223, 15, 62, 186, 155, 5, 61, 182, 58, 5, 190, 99, 54, 188, 60, 18, 18, 129, 61, 165, 235, 185, 188, 122, 223, 47, 61, 4, 145, 84, 61, 136, 103, 222, 58, 2, 254, 244, 189, 154, 122, 243, 61, 102, 174, 39, 190, 98, 86, 219, 189, 94, 200, 124, 189, 29, 178, 183, 61, 3, 191, 54, 189, 37, 140, 187, 189, 38, 91, 201, 189, 222, 100, 146, 61, 35, 100, 105, 60, 28, 85, 122, 61, 132, 80, 224, 61, 157, 56, 216, 189, 23, 154, 102, 61, 29, 60, 232, 61, 124, 20, 37, 190, 223, 107, 36, 62, 239, 210, 50, 188, 30, 164, 90, 61, 102, 14, 51, 190, 73, 6, 5, 190, 162, 0, 27, 190, 213, 99, 207, 61, 49, 175, 81, 189, 70, 218, 32, 62, 37, 173, 214, 61, 236, 180, 191, 187, 189, 9, 37, 189, 180, 153, 16, 190, 31, 82, 133, 61, 173, 73, 20, 190, 49, 8, 140, 58, 30, 88, 154, 189, 11, 27, 25, 62, 151, 172, 248, 189, 194, 36, 57, 189, 125, 241, 187, 61, 188, 237, 40, 62, 8, 112, 4, 62, 219, 70, 130, 61, 12, 132, 190, 188, 122, 231, 36, 62, 254, 28, 11, 62, 238, 42, 245, 60, 200, 195, 228, 189, 122, 253, 15, 58, 103, 168, 32, 61, 173, 55, 30, 190, 192, 151, 76, 60, 109, 51, 11, 190, 179, 176, 93, 189, 162, 156, 26, 61, 186, 217, 14, 62, 100, 230, 23, 190, 208, 207, 227, 61, 228, 121, 48, 189, 90, 216, 85, 189, 226, 215, 96, 61, 194, 127, 48, 62, 217, 46, 250, 189, 133, 15, 89, 189, 244, 97, 108, 189, 105, 182, 20, 190, 141, 175, 206, 61, 237, 216, 49, 190, 129, 201, 178, 189, 69, 230, 182, 60, 20, 225, 251, 61, 16, 52, 45, 190, 99, 6, 248, 61, 168, 217, 7, 190, 193, 77, 15, 62, 113, 78, 9, 190, 182, 245, 148, 189, 45, 17, 18, 62, 48, 60, 10, 189, 200, 177, 238, 189, 149, 168, 46, 190, 109, 175, 152, 189, 130, 156, 203, 188, 203, 193, 39, 62, 165, 145, 130, 189, 204, 100, 206, 61, 226, 195, 194, 189, 18, 107, 135, 61, 56, 152, 199, 61, 101, 98, 253, 188, 220, 13, 4, 190, 224, 240, 8, 190, 238, 124, 172, 189, 118, 188, 199, 61, 217, 134, 143, 61, 133, 94, 48, 62, 244, 89, 7, 190, 39, 174, 33, 190, 14, 174, 203, 61, 81, 66, 189, 189, 146, 136, 30, 187, 154, 182, 8, 59, 142, 214, 113, 61, 189, 39, 198, 189, 161, 103, 52, 62, 96, 73, 59, 60, 147, 2, 18, 62, 242, 71, 186, 61, 41, 237, 42, 189, 145, 131, 189, 61, 146, 250, 221, 188, 86, 103, 47, 189, 27, 245, 216, 61, 225, 70, 199, 188, 206, 33, 11, 190, 193, 222, 117, 60, 201, 172, 9, 62, 237, 173, 227, 61, 69, 4, 141, 189, 201, 56, 162, 189, 195, 99, 27, 190, 65, 168, 224, 61, 218, 66, 249, 189, 237, 128, 179, 61, 54, 105, 28, 190, 72, 120, 18, 189, 55, 110, 16, 61, 103, 172, 168, 61, 37, 180, 131, 61, 142, 135, 158, 60, 214, 125, 199, 188, 15, 255, 5, 62, 209, 101, 38, 190, 206, 55, 204, 61, 122, 142, 165, 61, 24, 146, 112, 189, 206, 182, 190, 187, 91, 236, 4, 190, 130, 133, 198, 61, 14, 122, 191, 58, 126, 58, 33, 62, 22, 17, 185, 189, 160, 95, 219, 61, 28, 212, 143, 59, 70, 67, 249, 189, 212, 189, 151, 61, 36, 0, 110, 61, 155, 103, 136, 61, 180, 38, 122, 61, 234, 87, 149, 61, 74, 183, 52, 190, 130, 233, 22, 190, 62, 89, 122, 61, 30, 241, 51, 62, 21, 189, 45, 62, 13, 20, 51, 190, 80, 250, 13, 190, 55, 72, 189, 188, 248, 119, 11, 190, 22, 37, 23, 62, 242, 95, 5, 190, 186, 225, 226, 61, 136, 128, 210, 61, 225, 81, 5, 61, 211, 216, 205, 61, 186, 245, 98, 60, 162, 89, 48, 190, 47, 170, 187, 61, 16, 76, 218, 57, 188, 169, 170, 189, 205, 131, 3, 190, 32, 44, 248, 189, 91, 200, 45, 190, 114, 19, 35, 62, 206, 253, 48, 190, 116, 249, 48, 62, 66, 206, 200, 189, 241, 234, 6, 188, 199, 144, 37, 190, 41, 175, 245, 188, 103, 144, 230, 61, 172, 245, 171, 189, 190, 188, 38, 190, 69, 18, 46, 190, 99, 193, 136, 60, 83, 180, 24, 190, 76, 18, 40, 188, 209, 169, 252, 61, 197, 71, 200, 189, 59, 176, 119, 61, 119, 153, 8, 190, 164, 71, 12, 190, 125, 25, 175, 189, 64, 43, 248, 189, 231, 13, 17, 190, 46, 76, 34, 61, 92, 44, 19, 190, 102, 112, 186, 189, 122, 206, 34, 62, 69, 173, 180, 58, 73, 221, 42, 190, 2, 213, 213, 189, 60, 211, 11, 190, 21, 150, 64, 189, 151, 48, 43, 189, 224, 85, 148, 61, 122, 210, 23, 61, 111, 92, 214, 59, 180, 232, 240, 187, 197, 123, 50, 190, 89, 110, 161, 61, 104, 66, 214, 60, 210, 7, 236, 61, 210, 136, 254, 189, 255, 80, 95, 189, 143, 22, 169, 61, 240, 62, 139, 189, 56, 95, 46, 189, 201, 244, 197, 61, 55, 73, 43, 189, 16, 159, 255, 60, 118, 48, 250, 61, 0, 79, 214, 61, 233, 10, 34, 62, 181, 164, 38, 190, 32, 204, 48, 189, 169, 72, 52, 61, 218, 134, 245, 61, 139, 138, 207, 60, 113, 222, 246, 61, 147, 1, 163, 61, 172, 31, 4, 190, 65, 210, 13, 62, 9, 5, 18, 62, 155, 147, 215, 189, 251, 166, 46, 61, 141, 161, 227, 187, 197, 163, 166, 189, 128, 1, 11, 60, 11, 245, 230, 61, 250, 21, 34, 189, 129, 172, 69, 189, 48, 97, 109, 189, 123, 121, 212, 59, 28, 163, 175, 61, 108, 55, 130, 189, 47, 139, 40, 62, 135, 232, 246, 61, 43, 14, 73, 61, 102, 251, 19, 62, 73, 115, 143, 189, 174, 177, 207, 61, 233, 172, 252, 188, 172, 123, 181, 189, 22, 193, 47, 62, 58, 212, 226, 60, 218, 18, 193, 61, 44, 215, 34, 190, 4, 225, 23, 62, 97, 125, 209, 189, 151, 227, 18, 62, 251, 54, 176, 60, 130, 69, 32, 190, 144, 43, 231, 189, 179, 242, 115, 61, 67, 111, 254, 61, 243, 241, 108, 189, 159, 133, 177, 60, 163, 95, 78, 61, 188, 17, 63, 61, 229, 112, 48, 190, 222, 89, 112, 60, 13, 165, 4, 62, 162, 40, 148, 189, 53, 8, 89, 186, 194, 51, 1, 190, 67, 121, 220, 59, 232, 145, 93, 189, 134, 32, 52, 190, 123, 44, 223, 188, 136, 42, 161, 188, 53, 141, 167, 189, 88, 205, 77, 189, 200, 176, 52, 190, 79, 191, 171, 189, 22, 210, 41, 62, 250, 107, 9, 190, 182, 176, 30, 62, 115, 176, 252, 188, 246, 149, 239, 189, 26, 86, 120, 189, 73, 41, 79, 189, 2, 201, 197, 189, 200, 21, 254, 60, 100, 7, 28, 62, 51, 36, 3, 62, 153, 12, 6, 59, 0, 189, 90, 61, 87, 135, 4, 190, 236, 145, 19, 190, 67, 211, 235, 61, 27, 166, 40, 189, 89, 101, 221, 189, 83, 241, 130, 60, 167, 77, 92, 189, 108, 148, 146, 61, 34, 220, 254, 61, 107, 104, 211, 189, 73, 227, 41, 189, 165, 233, 227, 61, 209, 101, 159, 61, 23, 11, 49, 189, 23, 110, 195, 61, 81, 76, 178, 61, 142, 185, 21, 190, 202, 77, 211, 61, 135, 22, 215, 189, 172, 14, 39, 62, 68, 9, 245, 61, 122, 131, 228, 189, 94, 233, 114, 189, 143, 168, 133, 189, 45, 164, 26, 190, 124, 239, 152, 60, 214, 251, 41, 62, 156, 80, 139, 61, 204, 37, 201, 189, 185, 35, 101, 60, 142, 212, 107, 189, 44, 183, 13, 187, 144, 84, 148, 61, 186, 16, 164, 187, 148, 41, 157, 187, 165, 186, 208, 56, 30, 60, 194, 189, 100, 248, 51, 62, 112, 36, 145, 189, 236, 203, 145, 59, 93, 60, 49, 190, 41, 115, 80, 61, 66, 30, 165, 61, 128, 50, 247, 189, 101, 131, 94, 61, 143, 55, 33, 62, 212, 17, 154, 61, 37, 200, 147, 61, 219, 250, 183, 61, 122, 2, 42, 62, 109, 155, 15, 62, 198, 202, 213, 189, 173, 236, 37, 190, 99, 51, 181, 61, 206, 183, 103, 188, 78, 102, 230, 189, 143, 132, 156, 60, 227, 124, 186, 61, 153, 137, 229, 189, 20, 230, 189, 60, 199, 234, 83, 188, 199, 193, 64, 61, 228, 199, 15, 61, 89, 99, 174, 189, 187, 54, 121, 61, 219, 24, 236, 61, 89, 104, 140, 61, 231, 2, 251, 60, 236, 245, 18, 190, 172, 131, 11, 190, 129, 134, 213, 61, 7, 28, 194, 61, 130, 5, 19, 190, 206, 47, 153, 189, 250, 177, 209, 61, 82, 141, 3, 62, 245, 80, 199, 60, 164, 24, 12, 190, 29, 110, 203, 61, 150, 66, 171, 188, 242, 178, 140, 61, 114, 44, 89, 189, 156, 227, 43, 190, 254, 148, 0, 62, 139, 137, 137, 61, 175, 230, 38, 62, 244, 5, 251, 60, 124, 121, 243, 189, 77, 214, 29, 190, 84, 243, 221, 189, 89, 111, 120, 61, 185, 109, 208, 61, 133, 168, 85, 188, 110, 244, 233, 60, 75, 162, 10, 190, 175, 111, 180, 61, 2, 185, 156, 61, 137, 96, 155, 189, 92, 33, 34, 62, 197, 216, 12, 190, 95, 140, 31, 62, 33, 182, 183, 189, 20, 128, 172, 189, 199, 190, 97, 187, 175, 10, 183, 61, 4, 11, 222, 189, 111, 12, 12, 60, 48, 50, 249, 61, 254, 244, 174, 61, 40, 58, 66, 60, 223, 65, 38, 190, 209, 68, 144, 189, 83, 235, 208, 61, 153, 228, 254, 61, 106, 35, 44, 62, 202, 194, 155, 61, 194, 15, 39, 62, 234, 109, 40, 190, 44, 49, 60, 188, 15, 247, 46, 188, 193, 105, 251, 61, 135, 41, 215, 189, 38, 35, 189, 189, 38, 26, 131, 189, 131, 3, 5, 189, 74, 203, 194, 61, 90, 87, 47, 62, 105, 132, 98, 61, 104, 223, 247, 188, 217, 229, 9, 190, 119, 237, 244, 61, 252, 232, 109, 61, 3, 82, 72, 61, 221, 224, 46, 189, 159, 73, 15, 62, 34, 101, 58, 189, 167, 98, 191, 189, 9, 33, 3, 190, 213, 110, 28, 190, 114, 57, 46, 189, 183, 129, 163, 187, 176, 55, 147, 189, 156, 80, 97, 189, 64, 17, 101, 60, 92, 177, 6, 190, 253, 157, 54, 61, 189, 198, 23, 62, 143, 233, 157, 188, 133, 44, 253, 189, 69, 90, 26, 62, 217, 210, 36, 190, 138, 38, 1, 62, 184, 204, 22, 190, 78, 84, 14, 62, 3, 150, 11, 62, 152, 45, 47, 60, 171, 95, 196, 61, 38, 93, 89, 61, 195, 217, 229, 189, 195, 116, 212, 61, 233, 45, 34, 62, 10, 102, 35, 189, 226, 180, 6, 190, 26, 78, 48, 62, 132, 69, 254, 189, 88, 117, 150, 188, 163, 29, 10, 189, 232, 141, 160, 60, 92, 50, 231, 189, 125, 27, 34, 190, 150, 102, 36, 62, 118, 236, 120, 59, 165, 113, 31, 190, 59, 241, 16, 61, 18, 26, 121, 61, 72, 158, 28, 60, 19, 42, 24, 62, 251, 138, 105, 188, 37, 240, 11, 62, 189, 14, 8, 62, 95, 172, 166, 61, 132, 240, 176, 189, 6, 189, 146, 188, 213, 3, 50, 62, 17, 112, 34, 60, 132, 223, 220, 61, 243, 91, 130, 189, 36, 231, 94, 61, 13, 106, 60, 188, 156, 124, 235, 61, 13, 166, 25, 60, 167, 172, 164, 189, 16, 153, 1, 190, 42, 127, 254, 189, 18, 172, 201, 189, 62, 91, 67, 189, 10, 90, 194, 189, 81, 65, 156, 189, 96, 134, 193, 60, 55, 207, 13, 59, 153, 238, 69, 189, 236, 241, 103, 189, 188, 139, 4, 61, 198, 245, 217, 61, 144, 118, 147, 61, 180, 255, 79, 189, 116, 106, 13, 59, 26, 203, 24, 190, 1, 236, 102, 189, 138, 172, 69, 188, 253, 3, 38, 62, 15, 214, 2, 188, 190, 142, 11, 62, 159, 71, 208, 189, 55, 243, 49, 62, 231, 133, 165, 59, 198, 165, 57, 61, 130, 175, 20, 190, 27, 153, 39, 190, 26, 6, 32, 190, 117, 87, 129, 61, 51, 65, 164, 61, 166, 48, 11, 190, 191, 127, 8, 189, 114, 9, 131, 189, 57, 52, 25, 62, 51, 30, 161, 61, 164, 194, 139, 189, 97, 25, 179, 188, 106, 67, 213, 189, 6, 35, 134, 189, 185, 191, 41, 62, 79, 234, 210, 61, 155, 93, 229, 189, 110, 166, 157, 60, 156, 58, 121, 189, 216, 44, 52, 62, 196, 237, 225, 61, 228, 146, 118, 61, 162, 41, 226, 189, 113, 104, 17, 62, 61, 203, 221, 61, 38, 205, 139, 61, 156, 21, 173, 59, 149, 201, 13, 61, 157, 98, 32, 190, 140, 216, 17, 62, 144, 232, 3, 190, 74, 139, 11, 62, 57, 3, 249, 60, 180, 190, 176, 186, 220, 207, 19, 189, 113, 127, 44, 190, 140, 91, 11, 61, 171, 114, 1, 62, 156, 13, 232, 188, 10, 113, 23, 62, 180, 95, 18, 62, 251, 81, 82, 61, 19, 226, 185, 188, 13, 29, 245, 61, 42, 95, 45, 62, 173, 156, 43, 62, 105, 15, 158, 189, 219, 206, 115, 61, 174, 219, 20, 190, 190, 103, 43, 190, 144, 86, 132, 189, 49, 111, 158, 61, 224, 60, 47, 190, 125, 1, 20, 189, 69, 5, 198, 61, 56, 102, 8, 62, 125, 120, 8, 61, 70, 9, 86, 189, 60, 60, 181, 188, 225, 209, 223, 61, 152, 12, 158, 61, 91, 154, 25, 190, 106, 28, 186, 61, 34, 56, 188, 188, 254, 197, 157, 189, 221, 255, 124, 189, 11, 0, 190, 189, 67, 215, 151, 189, 231, 119, 42, 190, 40, 132, 224, 61, 91, 221, 154, 59, 200, 99, 241, 189, 252, 57, 130, 188, 44, 56, 223, 61, 62, 98, 204, 61, 77, 31, 221, 60, 42, 18, 91, 61, 185, 44, 51, 62, 49, 143, 65, 189, 170, 33, 21, 190, 168, 192, 109, 189, 197, 130, 224, 189, 62, 81, 186, 189, 118, 157, 198, 61, 55, 31, 126, 61, 141, 117, 209, 61, 170, 137, 38, 189, 181, 155, 141, 61, 156, 5, 131, 188, 202, 184, 222, 189, 183, 248, 193, 61, 70, 179, 13, 62, 67, 170, 132, 61, 162, 224, 5, 62, 127, 25, 3, 60, 32, 64, 9, 62, 127, 162, 13, 190, 107, 223, 75, 189, 23, 225, 26, 189, 72, 119, 52, 190, 10, 236, 137, 61, 208, 36, 14, 62, 68, 110, 235, 61, 226, 57, 198, 189, 88, 255, 84, 189, 150, 26, 31, 187, 93, 199, 19, 190, 82, 114, 4, 190, 51, 99, 18, 62, 38, 103, 160, 189, 255, 51, 152, 189, 148, 218, 46, 61, 223, 124, 231, 61, 42, 175, 147, 61, 73, 1, 134, 187, 86, 132, 18, 190, 9, 118, 153, 61, 45, 13, 226, 60, 97, 6, 178, 189, 235, 27, 177, 189, 24, 197, 162, 59, 45, 97, 67, 61, 2, 112, 39, 190, 221, 171, 128, 59, 227, 107, 241, 189, 245, 78, 159, 61, 94, 237, 140, 189, 126, 32, 85, 189, 182, 153, 49, 62, 121, 212, 156, 189, 130, 223, 199, 189, 43, 17, 8, 190, 179, 117, 238, 61, 244, 68, 72, 60, 163, 163, 172, 189, 48, 55, 169, 189, 125, 117, 169, 61, 229, 57, 22, 62, 3, 146, 207, 187, 14, 14, 57, 189, 152, 104, 209, 61, 243, 78, 210, 189, 87, 33, 18, 62, 76, 195, 109, 189, 57, 132, 27, 190, 114, 104, 25, 62, 66, 215, 222, 189, 236, 28, 51, 190, 120, 118, 167, 185, 102, 32, 133, 189, 211, 108, 236, 188, 138, 202, 139, 60, 2, 28, 141, 61, 38, 102, 8, 62, 82, 143, 236, 60, 93, 145, 192, 189, 217, 54, 138, 61, 203, 93, 126, 61, 187, 182, 55, 61, 226, 196, 83, 61, 145, 182, 180, 189, 189, 76, 1, 62, 229, 230, 48, 190, 39, 45, 1, 190, 235, 243, 156, 61, 238, 241, 55, 61, 98, 1, 129, 189, 218, 51, 25, 190, 245, 26, 97, 189, 37, 213, 42, 62, 230, 3, 17, 190, 196, 219, 213, 188, 221, 181, 48, 57, 144, 147, 131, 59, 170, 57, 44, 189, 228, 175, 135, 61, 170, 79, 47, 190, 115, 122, 49, 62, 254, 187, 38, 61, 241, 232, 249, 60, 64, 206, 146, 61, 74, 129, 18, 190, 35, 119, 170, 189, 86, 113, 162, 61, 133, 84, 32, 190, 104, 77, 112, 188, 210, 123, 163, 189, 192, 115, 203, 61, 10, 160, 35, 62, 255, 119, 22, 59, 45, 25, 81, 61, 45, 142, 177, 189, 179, 123, 250, 189, 165, 83, 43, 189, 32, 45, 11, 190, 144, 124, 120, 187, 94, 255, 175, 189, 157, 133, 134, 189, 67, 249, 9, 190, 201, 227, 131, 189, 139, 135, 7, 190, 28, 9, 207, 61, 145, 99, 6, 190, 88, 46, 169, 61, 208, 104, 81, 188, 202, 245, 19, 62, 63, 93, 156, 189, 54, 143, 40, 190, 169, 124, 204, 188, 205, 113, 10, 62, 83, 190, 107, 60, 118, 82, 37, 186, 170, 64, 234, 59, 56, 107, 109, 189, 158, 22, 30, 190, 148, 206, 46, 60, 94, 36, 140, 61, 200, 136, 223, 188, 203, 40, 86, 189, 9, 230, 49, 190, 136, 22, 8, 62, 132, 241, 0, 190, 143, 150, 55, 60, 193, 151, 237, 189, 155, 0, 1, 61, 155, 162, 126, 61, 146, 29, 178, 61, 78, 224, 251, 61, 32, 84, 35, 62, 158, 82, 173, 61, 146, 34, 80, 189, 1, 236, 25, 62, 90, 221, 34, 190, 71, 61, 216, 61, 211, 161, 190, 61, 16, 62, 48, 189, 33, 134, 29, 190, 232, 227, 167, 61, 33, 180, 136, 58, 119, 46, 24, 190, 131, 144, 177, 61, 254, 1, 32, 190, 61, 102, 220, 188, 68, 49, 128, 60, 49, 68, 34, 189, 197, 2, 168, 189, 107, 222, 143, 61, 110, 105, 26, 62, 194, 186, 212, 61, 233, 32, 149, 189, 240, 35, 48, 62, 243, 108, 179, 58, 7, 50, 215, 60, 252, 21, 175, 189, 164, 73, 17, 188, 47, 194, 36, 62, 181, 64, 9, 190, 113, 100, 206, 61, 61, 215, 217, 189, 221, 110, 29, 190, 79, 51, 35, 62, 12, 99, 209, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 107, 7, 62, 43, 56, 15, 190, 209, 200, 160, 61, 170, 72, 23, 62, 204, 237, 30, 62, 192, 62, 197, 61, 79, 18, 223, 61, 208, 193, 4, 62, 132, 204, 243, 60, 36, 99, 153, 61, 135, 32, 168, 60, 228, 187, 36, 188, 171, 18, 236, 61, 123, 16, 150, 189, 242, 143, 218, 188, 83, 235, 143, 189, 190, 129, 154, 61, 245, 1, 170, 61, 171, 123, 4, 185, 102, 190, 222, 189, 136, 142, 111, 61, 193, 159, 10, 189, 129, 218, 146, 189, 219, 213, 141, 189, 149, 202, 253, 61, 201, 229, 12, 62, 188, 146, 10, 62, 6, 132, 164, 189, 135, 77, 208, 60, 170, 135, 118, 189, 21, 74, 42, 190, 39, 71, 15, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {214, 13, 231, 59, 202, 254, 141, 61, 197, 122, 177, 188, 182, 135, 21, 61, 177, 55, 23, 62, 16, 165, 3, 59, 128, 97, 49, 62, 233, 73, 20, 190, 193, 253, 97, 188, 129, 83, 215, 61, 197, 56, 193, 60, 67, 162, 178, 61, 23, 84, 9, 62, 138, 95, 166, 61, 235, 19, 152, 189, 200, 142, 42, 60, 216, 196, 67, 189, 245, 25, 161, 188, 122, 89, 81, 61, 155, 213, 238, 189, 131, 12, 195, 61, 208, 8, 16, 62, 171, 243, 37, 190, 250, 172, 210, 187, 168, 21, 5, 62, 248, 106, 156, 61, 147, 21, 210, 189, 134, 178, 14, 190, 251, 63, 42, 190, 170, 27, 35, 62, 16, 197, 189, 57, 93, 44, 149, 61, 200, 153, 185, 189, 167, 235, 3, 189, 184, 227, 123, 188, 48, 107, 96, 61, 205, 94, 31, 190, 176, 227, 46, 190, 114, 236, 205, 60, 156, 161, 132, 188, 63, 254, 255, 61, 247, 34, 150, 59, 39, 181, 139, 189, 209, 187, 105, 61, 199, 3, 241, 189, 107, 86, 246, 189, 85, 46, 29, 61, 29, 165, 153, 61, 221, 97, 251, 61, 179, 201, 152, 187, 17, 238, 250, 61, 211, 173, 48, 62, 8, 161, 47, 59, 130, 208, 14, 62, 201, 181, 4, 189, 8, 93, 150, 189, 248, 163, 127, 189, 214, 204, 249, 60, 151, 26, 29, 190, 132, 48, 193, 189, 84, 124, 173, 189, 246, 14, 44, 61, 181, 87, 50, 189, 123, 37, 138, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {4, 237, 149, 61, 228, 25, 34, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {87, 251, 82, 191, 43, 19, 201, 63, 104, 86, 166, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {20, 9, 179, 61, 217, 117, 150, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0037/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}