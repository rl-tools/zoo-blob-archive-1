// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {40, 250, 131, 63, 172, 212, 28, 63, 7, 55, 112, 62, 171, 124, 137, 190, 96, 244, 145, 63, 148, 188, 180, 62, 158, 190, 138, 190, 226, 174, 79, 63, 161, 177, 154, 61, 22, 28, 9, 190, 204, 59, 179, 191, 186, 170, 124, 190, 133, 219, 223, 190, 139, 55, 227, 62, 140, 135, 95, 188, 136, 15, 72, 191, 217, 135, 245, 190, 194, 144, 173, 188, 242, 198, 66, 191, 51, 79, 71, 63, 133, 55, 3, 63, 8, 4, 143, 62, 40, 132, 30, 63, 143, 110, 134, 62, 56, 44, 152, 62, 9, 12, 107, 63, 151, 209, 165, 190, 149, 17, 20, 63, 189, 57, 40, 63, 154, 67, 202, 62, 248, 240, 81, 190, 168, 155, 40, 63, 0, 157, 117, 62, 184, 118, 213, 62, 219, 249, 5, 191, 234, 52, 186, 62, 81, 162, 56, 63, 72, 3, 136, 191, 213, 228, 148, 190, 82, 222, 201, 62, 52, 230, 209, 189, 95, 118, 92, 190, 50, 49, 21, 191, 226, 83, 36, 191, 252, 25, 106, 190, 186, 171, 212, 190, 102, 39, 231, 62, 171, 56, 36, 191, 70, 59, 125, 62, 11, 73, 118, 191, 44, 30, 87, 189, 74, 0, 37, 63, 123, 201, 60, 191, 238, 156, 255, 61, 147, 142, 123, 189, 221, 46, 16, 191, 249, 160, 160, 62, 129, 25, 78, 62, 100, 197, 79, 63, 223, 88, 218, 190, 17, 87, 25, 62, 0, 68, 213, 190, 153, 238, 156, 190, 12, 216, 38, 63, 96, 57, 136, 63, 193, 172, 86, 189, 118, 176, 221, 189, 123, 148, 60, 63, 81, 97, 31, 61, 14, 152, 248, 189, 235, 78, 135, 191, 82, 48, 14, 191, 82, 104, 242, 62, 189, 84, 154, 190, 113, 143, 230, 62, 13, 140, 22, 63, 200, 62, 166, 63, 89, 247, 133, 62, 83, 103, 48, 63, 60, 148, 57, 191, 198, 25, 75, 190, 120, 181, 85, 63, 222, 236, 71, 191, 17, 229, 100, 190, 155, 54, 72, 63, 142, 239, 127, 63, 108, 96, 27, 63, 229, 41, 49, 191, 111, 26, 140, 62, 138, 40, 54, 63, 177, 58, 32, 190, 132, 70, 219, 189, 136, 80, 19, 63, 194, 133, 59, 63, 251, 106, 220, 190, 227, 66, 13, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 225, 178, 190, 75, 200, 229, 189, 138, 42, 217, 62, 176, 204, 125, 190, 34, 248, 209, 62, 231, 7, 2, 63, 226, 179, 190, 190, 172, 126, 192, 62, 144, 207, 233, 62, 7, 48, 43, 191, 237, 150, 184, 189, 6, 0, 134, 61, 244, 169, 183, 190, 62, 232, 86, 191, 67, 76, 221, 190, 58, 30, 155, 190, 14, 38, 252, 61, 86, 168, 15, 191, 108, 209, 239, 61, 180, 234, 243, 62, 43, 112, 118, 61, 172, 126, 209, 62, 20, 147, 62, 63, 118, 38, 116, 190, 212, 231, 41, 62, 189, 113, 220, 61, 199, 12, 110, 62, 38, 127, 135, 190, 201, 104, 191, 190, 251, 245, 222, 190, 119, 15, 104, 189, 72, 174, 71, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 163, 239, 61, 26, 181, 0, 62, 88, 116, 14, 62, 246, 50, 151, 61, 239, 34, 221, 61, 49, 10, 239, 60, 8, 69, 185, 61, 4, 174, 68, 62, 250, 113, 184, 61, 118, 252, 4, 190, 228, 235, 172, 189, 164, 143, 46, 189, 73, 126, 135, 189, 112, 167, 144, 190, 141, 111, 208, 60, 94, 124, 163, 189, 206, 41, 117, 62, 245, 212, 57, 190, 147, 251, 19, 190, 255, 19, 3, 58, 221, 41, 14, 61, 177, 220, 16, 62, 72, 73, 237, 61, 156, 15, 205, 61, 29, 128, 171, 60, 34, 43, 151, 189, 115, 151, 161, 62, 138, 148, 200, 59, 102, 108, 150, 61, 71, 171, 48, 61, 202, 189, 134, 189, 5, 122, 18, 190, 229, 146, 70, 62, 123, 136, 57, 191, 98, 61, 178, 190, 147, 73, 217, 190, 23, 237, 182, 191, 183, 172, 66, 190, 156, 42, 171, 190, 29, 66, 207, 61, 123, 169, 146, 61, 20, 35, 28, 191, 229, 25, 248, 190, 215, 128, 159, 61, 77, 188, 0, 61, 156, 92, 30, 190, 10, 79, 77, 61, 32, 226, 151, 190, 228, 252, 95, 62, 59, 107, 53, 190, 171, 164, 157, 190, 163, 101, 11, 190, 235, 156, 172, 189, 5, 220, 37, 61, 195, 41, 230, 61, 43, 214, 225, 190, 101, 78, 75, 62, 129, 43, 69, 189, 158, 52, 2, 62, 44, 241, 119, 62, 89, 109, 254, 61, 115, 255, 160, 190, 254, 149, 138, 57, 25, 110, 240, 190, 205, 33, 145, 190, 253, 56, 212, 189, 158, 120, 181, 190, 145, 104, 126, 62, 208, 94, 32, 190, 79, 183, 14, 61, 239, 255, 154, 61, 190, 96, 178, 190, 252, 47, 33, 190, 15, 194, 243, 190, 157, 200, 21, 61, 140, 143, 168, 61, 137, 221, 79, 62, 218, 127, 161, 61, 248, 207, 190, 189, 37, 172, 2, 190, 100, 121, 33, 62, 43, 152, 18, 190, 158, 71, 70, 62, 33, 118, 177, 190, 107, 129, 241, 190, 163, 215, 164, 189, 9, 168, 164, 60, 116, 58, 34, 191, 249, 101, 226, 61, 121, 142, 201, 190, 102, 80, 39, 62, 88, 120, 133, 62, 173, 254, 50, 191, 56, 102, 48, 190, 35, 50, 72, 188, 84, 247, 2, 190, 92, 102, 171, 62, 73, 163, 73, 62, 182, 161, 184, 62, 16, 126, 193, 189, 235, 84, 254, 61, 36, 191, 106, 188, 108, 89, 37, 190, 96, 194, 246, 61, 19, 40, 152, 189, 193, 212, 130, 62, 99, 122, 65, 62, 194, 20, 9, 190, 11, 229, 139, 190, 110, 121, 115, 190, 52, 163, 238, 61, 228, 196, 205, 189, 20, 35, 27, 191, 146, 237, 101, 191, 116, 38, 70, 61, 175, 180, 75, 62, 180, 57, 55, 188, 153, 143, 5, 62, 50, 31, 162, 188, 240, 255, 221, 190, 170, 18, 6, 190, 167, 201, 154, 62, 74, 158, 167, 190, 32, 243, 134, 187, 72, 12, 154, 62, 114, 197, 183, 61, 138, 137, 125, 61, 134, 223, 205, 190, 123, 213, 134, 61, 143, 205, 234, 190, 41, 123, 7, 191, 85, 72, 159, 190, 240, 52, 170, 189, 23, 51, 61, 190, 173, 97, 190, 190, 46, 253, 217, 189, 102, 200, 12, 61, 194, 187, 97, 190, 237, 83, 27, 191, 192, 186, 58, 62, 86, 79, 144, 190, 244, 15, 143, 189, 79, 198, 138, 62, 168, 165, 60, 59, 222, 186, 133, 62, 75, 182, 0, 60, 221, 7, 18, 62, 41, 241, 34, 190, 38, 227, 70, 190, 29, 181, 211, 189, 117, 121, 116, 189, 237, 223, 238, 187, 233, 151, 121, 189, 200, 185, 72, 190, 97, 138, 194, 60, 12, 191, 58, 62, 141, 157, 176, 61, 208, 138, 214, 189, 160, 131, 38, 62, 107, 169, 24, 189, 159, 51, 214, 62, 192, 16, 170, 190, 222, 115, 250, 188, 96, 249, 43, 191, 80, 105, 90, 188, 198, 93, 162, 189, 94, 134, 20, 60, 1, 105, 38, 189, 97, 239, 212, 61, 55, 47, 232, 190, 110, 214, 161, 190, 216, 167, 151, 62, 154, 126, 131, 190, 120, 36, 241, 189, 54, 110, 42, 62, 176, 75, 148, 188, 72, 75, 138, 61, 77, 106, 150, 62, 118, 146, 44, 190, 48, 151, 184, 61, 65, 208, 222, 60, 44, 32, 67, 62, 88, 3, 235, 61, 123, 85, 112, 190, 212, 5, 13, 62, 242, 238, 27, 190, 110, 224, 92, 62, 38, 238, 72, 190, 217, 150, 161, 190, 104, 18, 3, 60, 235, 43, 63, 186, 192, 76, 68, 190, 120, 54, 79, 189, 202, 115, 31, 61, 28, 117, 97, 191, 82, 238, 115, 62, 240, 230, 126, 191, 62, 139, 45, 62, 196, 91, 113, 190, 75, 36, 158, 191, 6, 191, 170, 190, 97, 245, 35, 61, 84, 196, 4, 62, 164, 209, 159, 188, 25, 155, 67, 62, 126, 198, 138, 189, 154, 84, 7, 190, 249, 179, 196, 190, 70, 47, 114, 62, 12, 190, 131, 191, 205, 204, 234, 62, 33, 17, 137, 190, 90, 64, 205, 188, 236, 197, 3, 191, 98, 251, 19, 191, 188, 15, 248, 188, 156, 8, 67, 190, 118, 243, 155, 189, 125, 189, 200, 189, 183, 1, 8, 62, 223, 39, 155, 61, 109, 117, 175, 190, 219, 28, 171, 189, 85, 72, 165, 61, 95, 108, 254, 189, 205, 8, 169, 189, 219, 70, 167, 190, 67, 97, 83, 62, 16, 4, 229, 61, 216, 167, 142, 62, 169, 26, 46, 191, 118, 124, 38, 61, 255, 178, 179, 190, 49, 227, 88, 190, 132, 136, 166, 190, 96, 175, 28, 191, 232, 252, 137, 189, 209, 152, 6, 190, 82, 169, 178, 61, 27, 147, 14, 62, 9, 128, 95, 189, 194, 75, 13, 190, 109, 11, 11, 189, 179, 82, 217, 190, 174, 55, 64, 61, 66, 209, 218, 190, 244, 7, 62, 190, 46, 81, 19, 62, 125, 192, 44, 191, 85, 253, 108, 190, 16, 226, 82, 62, 121, 71, 144, 190, 101, 113, 85, 190, 59, 163, 53, 191, 51, 254, 26, 191, 154, 248, 109, 189, 133, 83, 67, 191, 217, 239, 138, 190, 164, 158, 148, 190, 78, 173, 0, 62, 144, 182, 37, 191, 183, 82, 13, 62, 39, 70, 82, 189, 237, 101, 134, 190, 178, 39, 221, 61, 109, 214, 0, 191, 122, 85, 142, 189, 167, 70, 176, 61, 207, 110, 124, 62, 46, 118, 152, 189, 178, 152, 151, 190, 168, 251, 41, 190, 208, 104, 170, 62, 59, 192, 79, 190, 124, 190, 97, 62, 200, 216, 20, 62, 31, 219, 119, 60, 199, 238, 150, 61, 44, 124, 184, 190, 181, 219, 100, 61, 75, 18, 77, 189, 28, 248, 146, 191, 45, 158, 114, 61, 20, 89, 214, 62, 133, 16, 45, 191, 245, 7, 163, 59, 66, 35, 10, 62, 104, 11, 143, 62, 18, 244, 178, 62, 243, 77, 175, 190, 188, 205, 152, 62, 16, 115, 139, 190, 91, 156, 235, 62, 63, 64, 29, 62, 232, 104, 246, 189, 144, 136, 124, 190, 32, 42, 55, 190, 71, 9, 242, 61, 104, 28, 16, 191, 224, 80, 23, 190, 204, 136, 0, 191, 213, 73, 133, 188, 38, 245, 111, 189, 160, 244, 193, 190, 218, 122, 32, 191, 125, 41, 5, 190, 192, 172, 53, 191, 188, 147, 171, 62, 201, 111, 51, 191, 148, 178, 212, 60, 48, 229, 62, 62, 36, 187, 166, 191, 230, 5, 26, 190, 136, 248, 133, 187, 255, 208, 106, 191, 63, 148, 15, 191, 49, 85, 130, 62, 255, 243, 3, 60, 2, 33, 42, 190, 219, 246, 83, 62, 83, 121, 45, 62, 233, 167, 36, 62, 185, 8, 155, 60, 2, 31, 100, 62, 113, 97, 168, 62, 237, 56, 145, 62, 189, 132, 8, 191, 171, 36, 35, 61, 192, 151, 58, 61, 249, 98, 28, 191, 101, 47, 94, 62, 113, 40, 158, 190, 69, 0, 155, 190, 10, 250, 216, 190, 153, 146, 203, 62, 97, 116, 111, 62, 113, 177, 128, 60, 141, 137, 14, 190, 201, 150, 171, 61, 220, 71, 159, 190, 104, 242, 129, 60, 24, 153, 67, 62, 17, 36, 177, 62, 13, 11, 12, 190, 149, 11, 45, 191, 249, 149, 1, 63, 230, 212, 193, 189, 102, 156, 37, 191, 121, 234, 136, 190, 112, 87, 15, 191, 232, 0, 65, 191, 25, 15, 86, 190, 52, 239, 157, 190, 2, 154, 5, 189, 4, 249, 115, 62, 242, 76, 8, 189, 165, 27, 151, 62, 90, 200, 152, 62, 18, 123, 61, 61, 57, 152, 252, 60, 206, 142, 139, 190, 249, 69, 165, 190, 114, 71, 186, 189, 123, 9, 56, 62, 102, 126, 192, 62, 148, 22, 112, 190, 58, 136, 221, 189, 91, 159, 43, 191, 118, 111, 115, 62, 49, 70, 83, 190, 106, 83, 14, 189, 0, 78, 106, 61, 223, 104, 21, 190, 219, 242, 105, 59, 144, 180, 41, 62, 70, 128, 81, 190, 163, 179, 167, 188, 103, 243, 134, 190, 8, 250, 144, 62, 226, 151, 136, 62, 62, 148, 94, 189, 153, 74, 180, 61, 154, 114, 231, 187, 75, 20, 42, 62, 163, 172, 51, 189, 92, 178, 83, 61, 166, 164, 37, 62, 204, 165, 191, 61, 98, 109, 173, 59, 87, 58, 109, 62, 20, 169, 15, 62, 68, 19, 250, 189, 50, 223, 154, 190, 0, 6, 99, 189, 20, 44, 107, 61, 17, 126, 53, 62, 94, 76, 175, 62, 66, 165, 163, 190, 137, 127, 153, 190, 192, 74, 248, 190, 92, 145, 165, 62, 16, 27, 201, 60, 144, 97, 147, 190, 96, 101, 138, 61, 136, 37, 4, 190, 112, 195, 15, 190, 208, 22, 123, 62, 164, 104, 186, 190, 156, 62, 2, 62, 17, 32, 151, 189, 128, 185, 47, 62, 5, 99, 253, 62, 91, 170, 137, 189, 206, 35, 196, 189, 59, 130, 67, 62, 177, 250, 229, 61, 188, 169, 170, 189, 60, 36, 5, 190, 9, 46, 2, 190, 114, 28, 49, 190, 194, 189, 30, 62, 23, 187, 66, 190, 134, 232, 17, 62, 131, 43, 227, 189, 241, 234, 6, 188, 28, 134, 39, 190, 182, 14, 3, 189, 99, 63, 194, 61, 172, 245, 171, 189, 190, 188, 38, 190, 69, 18, 46, 190, 99, 193, 136, 60, 16, 107, 29, 190, 76, 18, 40, 188, 215, 210, 227, 61, 197, 71, 200, 189, 59, 176, 119, 61, 119, 153, 8, 190, 35, 18, 23, 190, 125, 25, 175, 189, 61, 117, 20, 190, 231, 13, 17, 190, 46, 76, 34, 61, 92, 44, 19, 190, 13, 98, 192, 189, 228, 217, 2, 62, 225, 35, 189, 188, 73, 221, 42, 190, 163, 110, 218, 62, 53, 215, 9, 190, 51, 152, 131, 60, 63, 109, 128, 191, 101, 42, 90, 61, 196, 251, 195, 190, 76, 44, 129, 189, 7, 141, 134, 61, 98, 239, 251, 59, 58, 245, 125, 62, 77, 46, 41, 61, 141, 224, 154, 61, 191, 38, 200, 190, 3, 51, 37, 191, 196, 80, 163, 189, 74, 27, 64, 190, 248, 126, 35, 190, 18, 5, 223, 62, 152, 189, 183, 188, 206, 237, 196, 61, 15, 34, 168, 189, 32, 4, 172, 62, 234, 4, 112, 62, 62, 248, 13, 191, 46, 102, 234, 185, 122, 131, 160, 62, 113, 214, 117, 62, 199, 135, 116, 61, 134, 63, 155, 62, 92, 222, 49, 61, 202, 35, 73, 190, 41, 142, 177, 60, 173, 140, 166, 189, 188, 153, 151, 190, 218, 95, 161, 189, 79, 180, 225, 61, 68, 150, 63, 187, 144, 10, 122, 62, 214, 39, 141, 190, 126, 64, 241, 189, 39, 110, 173, 190, 169, 212, 179, 189, 212, 130, 160, 190, 242, 50, 158, 60, 168, 165, 158, 190, 127, 158, 70, 61, 80, 77, 104, 62, 151, 89, 237, 61, 212, 47, 86, 190, 48, 174, 48, 60, 35, 215, 219, 61, 163, 173, 47, 191, 102, 139, 29, 191, 206, 108, 193, 190, 9, 165, 37, 189, 152, 120, 123, 190, 82, 90, 182, 190, 88, 225, 232, 60, 210, 115, 211, 190, 151, 217, 73, 190, 3, 195, 12, 190, 78, 32, 99, 191, 123, 1, 3, 191, 225, 108, 45, 190, 109, 255, 171, 61, 17, 228, 33, 190, 163, 151, 37, 62, 71, 158, 188, 190, 37, 253, 55, 62, 235, 15, 190, 190, 173, 79, 105, 189, 88, 48, 47, 62, 185, 185, 38, 62, 232, 11, 251, 189, 193, 91, 131, 190, 255, 63, 89, 189, 227, 166, 63, 191, 57, 150, 7, 191, 193, 248, 168, 190, 211, 48, 114, 189, 29, 144, 234, 190, 227, 233, 97, 190, 64, 90, 160, 190, 243, 250, 188, 61, 4, 254, 234, 61, 4, 173, 7, 62, 191, 65, 131, 62, 122, 30, 70, 190, 90, 5, 44, 190, 28, 140, 116, 61, 11, 24, 177, 187, 122, 5, 10, 191, 9, 10, 46, 189, 99, 14, 85, 61, 155, 157, 20, 189, 176, 200, 212, 189, 82, 208, 221, 190, 88, 82, 36, 190, 100, 19, 105, 190, 242, 93, 68, 62, 161, 174, 209, 189, 25, 32, 5, 188, 226, 20, 246, 61, 229, 51, 20, 190, 33, 88, 215, 189, 158, 232, 253, 60, 17, 155, 20, 190, 158, 254, 88, 61, 213, 89, 170, 62, 8, 174, 75, 62, 238, 250, 68, 60, 136, 55, 212, 61, 128, 89, 169, 60, 219, 113, 104, 190, 45, 229, 220, 189, 90, 206, 177, 189, 224, 71, 91, 62, 146, 49, 0, 190, 219, 66, 139, 190, 97, 16, 20, 60, 210, 163, 34, 189, 55, 83, 242, 190, 190, 201, 178, 61, 242, 242, 159, 62, 127, 168, 187, 189, 245, 30, 135, 188, 115, 92, 2, 62, 70, 157, 186, 61, 5, 18, 26, 191, 64, 6, 142, 190, 254, 112, 62, 62, 220, 212, 38, 191, 168, 106, 146, 62, 14, 239, 9, 189, 201, 163, 101, 62, 238, 4, 11, 190, 241, 16, 120, 190, 164, 174, 187, 190, 104, 152, 77, 190, 92, 99, 100, 62, 219, 141, 10, 62, 144, 215, 203, 61, 183, 137, 180, 189, 232, 85, 252, 187, 184, 14, 247, 61, 132, 32, 206, 62, 64, 221, 206, 60, 11, 248, 92, 62, 115, 107, 184, 190, 103, 57, 108, 190, 57, 113, 79, 62, 72, 205, 61, 191, 141, 178, 131, 189, 153, 230, 187, 190, 66, 103, 144, 62, 236, 134, 169, 62, 113, 86, 248, 189, 172, 142, 47, 189, 31, 78, 220, 61, 99, 224, 160, 62, 77, 6, 173, 62, 160, 110, 30, 191, 93, 150, 16, 186, 49, 125, 160, 62, 216, 89, 8, 188, 229, 188, 215, 188, 145, 53, 76, 191, 111, 176, 10, 62, 123, 130, 138, 62, 23, 130, 53, 62, 249, 249, 62, 191, 123, 127, 158, 61, 214, 75, 174, 190, 159, 228, 116, 190, 237, 165, 151, 62, 126, 148, 117, 62, 111, 54, 205, 188, 66, 153, 81, 62, 98, 85, 154, 62, 24, 157, 131, 190, 193, 228, 22, 61, 249, 173, 69, 62, 199, 144, 96, 62, 233, 154, 37, 187, 141, 103, 232, 189, 162, 213, 54, 62, 87, 92, 29, 190, 24, 112, 234, 190, 112, 169, 131, 62, 204, 131, 127, 190, 164, 27, 217, 189, 33, 224, 249, 190, 202, 137, 245, 189, 226, 75, 36, 62, 104, 172, 39, 61, 73, 37, 88, 188, 152, 231, 152, 190, 130, 237, 244, 188, 32, 210, 174, 61, 17, 252, 152, 59, 40, 65, 77, 190, 94, 195, 219, 188, 104, 95, 145, 189, 232, 242, 220, 61, 31, 94, 199, 62, 34, 137, 210, 62, 17, 92, 32, 190, 117, 206, 149, 190, 224, 110, 33, 190, 91, 80, 218, 189, 205, 242, 9, 189, 19, 159, 129, 62, 213, 217, 154, 61, 44, 198, 149, 62, 184, 193, 8, 190, 202, 113, 38, 189, 51, 114, 100, 60, 169, 243, 51, 61, 54, 194, 2, 61, 188, 96, 135, 62, 151, 27, 0, 190, 142, 42, 39, 61, 116, 95, 104, 62, 0, 58, 223, 62, 53, 212, 17, 190, 161, 194, 166, 189, 83, 210, 9, 61, 227, 124, 85, 190, 112, 54, 141, 62, 156, 36, 138, 188, 74, 136, 127, 61, 161, 235, 216, 61, 39, 188, 108, 190, 1, 206, 71, 190, 185, 65, 24, 190, 126, 245, 189, 189, 139, 36, 197, 62, 100, 140, 145, 62, 21, 103, 215, 190, 236, 95, 150, 190, 44, 57, 51, 61, 121, 137, 103, 190, 230, 250, 195, 189, 110, 46, 234, 62, 206, 78, 87, 189, 221, 63, 187, 188, 17, 97, 115, 62, 121, 156, 185, 190, 72, 74, 200, 61, 39, 132, 190, 190, 135, 252, 158, 62, 95, 116, 73, 63, 199, 113, 67, 189, 211, 210, 5, 62, 92, 248, 242, 61, 148, 32, 182, 62, 52, 188, 6, 63, 45, 32, 72, 62, 179, 43, 64, 189, 250, 108, 71, 61, 207, 83, 225, 61, 248, 140, 247, 189, 109, 161, 103, 189, 53, 31, 88, 61, 99, 57, 17, 62, 196, 153, 26, 189, 19, 189, 255, 189, 95, 77, 66, 62, 146, 165, 21, 190, 178, 16, 149, 190, 184, 13, 57, 62, 137, 52, 33, 62, 221, 180, 64, 62, 193, 49, 179, 62, 139, 254, 72, 61, 16, 142, 199, 61, 163, 175, 26, 62, 209, 127, 27, 62, 40, 86, 120, 189, 81, 51, 235, 60, 63, 131, 120, 62, 223, 22, 102, 62, 214, 172, 41, 62, 59, 84, 182, 190, 38, 34, 5, 62, 79, 245, 123, 188, 37, 231, 194, 61, 21, 112, 62, 189, 246, 113, 235, 189, 239, 120, 1, 190, 187, 238, 32, 190, 206, 239, 43, 190, 73, 9, 164, 189, 238, 233, 86, 190, 81, 65, 156, 189, 35, 228, 152, 188, 202, 169, 210, 188, 14, 65, 70, 189, 57, 227, 103, 189, 252, 237, 219, 60, 55, 253, 232, 61, 57, 14, 152, 61, 102, 22, 244, 189, 138, 47, 217, 188, 116, 202, 43, 190, 1, 236, 102, 189, 244, 27, 80, 188, 154, 148, 12, 62, 0, 70, 3, 189, 154, 226, 254, 61, 5, 172, 7, 190, 117, 3, 21, 62, 41, 185, 145, 187, 22, 139, 0, 61, 213, 179, 25, 190, 38, 90, 13, 190, 144, 152, 39, 190, 117, 87, 129, 61, 51, 65, 164, 61, 118, 87, 10, 190, 192, 160, 178, 190, 140, 201, 237, 189, 92, 174, 118, 190, 225, 111, 130, 189, 12, 5, 46, 191, 123, 70, 214, 190, 96, 114, 0, 190, 251, 107, 22, 191, 251, 178, 146, 61, 20, 247, 113, 61, 18, 199, 23, 190, 243, 138, 112, 190, 228, 107, 10, 62, 144, 85, 198, 62, 224, 96, 190, 189, 74, 132, 211, 187, 188, 48, 122, 190, 22, 222, 45, 191, 50, 73, 228, 60, 104, 249, 200, 61, 98, 36, 33, 60, 68, 180, 3, 62, 69, 41, 180, 190, 89, 58, 236, 61, 160, 113, 103, 190, 222, 59, 33, 190, 76, 239, 33, 62, 73, 135, 103, 62, 247, 233, 232, 189, 173, 18, 81, 190, 72, 160, 85, 61, 97, 164, 158, 62, 178, 10, 152, 190, 159, 173, 136, 190, 56, 204, 13, 60, 43, 177, 107, 189, 215, 197, 128, 190, 16, 175, 223, 188, 65, 230, 125, 62, 24, 42, 232, 61, 128, 63, 135, 190, 85, 126, 34, 190, 123, 63, 205, 190, 146, 99, 60, 61, 85, 172, 174, 62, 229, 62, 6, 63, 109, 118, 188, 190, 230, 11, 36, 190, 217, 229, 242, 61, 77, 149, 191, 62, 217, 201, 23, 189, 16, 30, 25, 62, 106, 149, 144, 61, 224, 156, 46, 62, 110, 34, 153, 188, 140, 126, 195, 189, 31, 51, 49, 62, 102, 53, 220, 190, 154, 240, 66, 62, 82, 54, 4, 63, 146, 50, 125, 190, 223, 37, 32, 189, 227, 136, 17, 188, 198, 116, 8, 63, 248, 180, 250, 62, 184, 163, 1, 190, 101, 4, 193, 187, 255, 228, 77, 62, 138, 49, 196, 61, 19, 183, 31, 61, 109, 177, 137, 59, 208, 168, 119, 62, 19, 146, 38, 61, 62, 158, 10, 190, 44, 186, 119, 189, 74, 89, 99, 189, 232, 18, 202, 190, 161, 188, 155, 190, 255, 24, 29, 62, 34, 155, 182, 61, 159, 28, 18, 62, 24, 23, 168, 62, 70, 87, 65, 61, 192, 126, 58, 190, 61, 106, 49, 61, 131, 120, 96, 62, 0, 98, 16, 62, 69, 43, 204, 61, 70, 57, 176, 61, 140, 99, 153, 62, 58, 15, 0, 190, 123, 170, 247, 190, 137, 15, 172, 188, 243, 17, 51, 190, 207, 142, 15, 61, 32, 110, 16, 190, 200, 122, 139, 62, 186, 155, 14, 190, 111, 169, 225, 190, 87, 161, 170, 61, 29, 19, 46, 191, 87, 147, 152, 190, 191, 143, 53, 62, 116, 175, 179, 189, 43, 246, 189, 190, 149, 182, 9, 62, 18, 173, 204, 59, 181, 163, 156, 62, 107, 252, 35, 61, 239, 14, 106, 190, 107, 78, 25, 191, 87, 175, 161, 190, 55, 10, 38, 62, 192, 100, 7, 189, 178, 236, 39, 62, 177, 132, 226, 189, 156, 43, 142, 190, 249, 182, 162, 190, 165, 85, 193, 190, 166, 19, 93, 190, 75, 178, 39, 62, 255, 157, 59, 189, 155, 61, 37, 62, 194, 24, 175, 189, 158, 166, 150, 189, 46, 241, 144, 189, 13, 89, 144, 62, 2, 87, 1, 62, 96, 152, 208, 62, 240, 222, 77, 190, 171, 155, 25, 62, 179, 158, 53, 61, 162, 1, 249, 61, 218, 181, 254, 189, 117, 111, 224, 190, 81, 180, 201, 61, 127, 195, 99, 62, 199, 172, 220, 61, 111, 89, 129, 190, 88, 148, 112, 61, 113, 80, 0, 191, 18, 184, 221, 190, 34, 209, 194, 61, 98, 226, 8, 189, 122, 46, 55, 190, 251, 24, 73, 62, 152, 73, 187, 62, 94, 106, 239, 60, 62, 14, 110, 189, 203, 56, 10, 188, 86, 196, 39, 62, 10, 224, 120, 188, 38, 255, 143, 189, 137, 168, 240, 62, 39, 56, 24, 190, 211, 53, 167, 190, 193, 155, 98, 60, 27, 106, 22, 191, 120, 210, 143, 190, 44, 173, 82, 190, 50, 228, 177, 190, 138, 167, 79, 191, 2, 226, 241, 61, 181, 145, 228, 190, 222, 161, 70, 62, 157, 234, 233, 61, 56, 1, 197, 61, 3, 17, 163, 189, 32, 76, 144, 190, 18, 1, 142, 189, 18, 56, 19, 191, 39, 30, 234, 62, 192, 31, 36, 61, 11, 250, 90, 189, 146, 86, 67, 190, 241, 49, 6, 190, 154, 95, 251, 188, 161, 127, 215, 62, 75, 239, 119, 190, 123, 189, 225, 62, 67, 214, 212, 190, 124, 229, 192, 189, 91, 217, 138, 62, 213, 227, 70, 191, 206, 7, 66, 62, 62, 238, 50, 191, 114, 255, 218, 189, 63, 174, 146, 62, 190, 59, 142, 190, 142, 70, 196, 187, 40, 84, 127, 61, 101, 59, 247, 62, 35, 5, 10, 191, 114, 88, 47, 61, 157, 63, 82, 62, 74, 21, 216, 61, 151, 83, 90, 62, 94, 48, 150, 62, 94, 18, 233, 60, 118, 171, 49, 62, 130, 175, 94, 60, 30, 202, 208, 189, 86, 1, 3, 61, 52, 13, 161, 61, 101, 65, 68, 190, 36, 83, 105, 189, 204, 149, 214, 62, 10, 141, 7, 189, 117, 69, 83, 190, 63, 243, 213, 189, 148, 158, 94, 189, 176, 64, 95, 61, 106, 23, 21, 190, 30, 132, 27, 190, 158, 53, 215, 62, 73, 219, 63, 190, 251, 10, 140, 187, 22, 10, 71, 186, 125, 67, 140, 190, 188, 155, 135, 61, 96, 254, 91, 62, 64, 247, 0, 62, 41, 32, 26, 62, 11, 245, 222, 190, 162, 140, 129, 190, 245, 96, 88, 62, 171, 110, 144, 188, 61, 7, 23, 191, 104, 215, 109, 62, 56, 235, 23, 191, 48, 53, 47, 191, 10, 210, 21, 189, 181, 165, 55, 62, 213, 133, 75, 62, 178, 37, 9, 189, 244, 89, 242, 190, 249, 234, 208, 61, 49, 158, 113, 189, 73, 237, 170, 190, 49, 127, 168, 187, 5, 43, 209, 189, 206, 135, 51, 61, 88, 146, 15, 189, 155, 89, 0, 188, 76, 104, 89, 62, 13, 52, 120, 62, 209, 89, 39, 62, 52, 77, 0, 190, 218, 147, 73, 190, 126, 120, 78, 188, 157, 55, 141, 190, 176, 75, 45, 62, 14, 206, 202, 61, 163, 240, 231, 190, 158, 154, 211, 188, 135, 201, 44, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {163, 139, 133, 62, 6, 102, 124, 189, 217, 185, 34, 62, 178, 90, 5, 62, 109, 139, 116, 62, 21, 96, 85, 62, 182, 81, 158, 61, 214, 235, 7, 62, 94, 196, 26, 61, 9, 25, 77, 62, 42, 128, 138, 62, 53, 101, 23, 62, 37, 132, 130, 62, 1, 0, 184, 189, 209, 234, 129, 189, 205, 57, 105, 60, 219, 171, 3, 61, 168, 129, 214, 61, 98, 115, 23, 62, 177, 140, 251, 57, 234, 205, 122, 61, 116, 158, 127, 61, 160, 145, 12, 187, 99, 202, 212, 189, 131, 12, 222, 189, 19, 150, 227, 61, 167, 213, 103, 62, 180, 189, 83, 190, 125, 182, 215, 61, 192, 3, 234, 61, 250, 252, 117, 61, 71, 76, 144, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 127, 106, 188, 101, 2, 158, 61, 61, 230, 15, 191, 59, 111, 160, 62, 162, 182, 231, 62, 76, 243, 84, 60, 64, 97, 95, 63, 247, 48, 82, 191, 74, 153, 30, 191, 31, 40, 144, 63, 235, 168, 96, 191, 112, 88, 179, 62, 251, 233, 198, 62, 61, 210, 165, 61, 115, 148, 167, 190, 151, 43, 86, 191, 99, 243, 209, 190, 224, 212, 242, 189, 23, 91, 47, 63, 244, 50, 38, 191, 37, 222, 66, 62, 137, 43, 13, 63, 90, 24, 92, 190, 64, 49, 242, 60, 68, 19, 176, 62, 68, 19, 236, 62, 251, 145, 126, 190, 196, 236, 171, 190, 5, 170, 244, 190, 21, 169, 135, 63, 140, 81, 8, 62, 230, 225, 8, 63, 13, 77, 48, 190, 162, 144, 5, 191, 186, 151, 167, 62, 71, 79, 152, 62, 224, 89, 198, 190, 61, 81, 18, 191, 102, 225, 1, 189, 221, 158, 121, 189, 122, 92, 132, 62, 171, 4, 39, 190, 126, 183, 127, 61, 114, 36, 207, 61, 127, 126, 90, 190, 82, 31, 246, 189, 103, 123, 13, 190, 194, 156, 186, 62, 187, 97, 36, 62, 168, 44, 132, 189, 75, 242, 144, 62, 177, 164, 161, 62, 62, 20, 224, 189, 21, 19, 101, 189, 203, 47, 214, 189, 242, 34, 11, 189, 120, 17, 98, 189, 77, 204, 124, 61, 203, 81, 254, 189, 162, 251, 9, 62, 52, 108, 116, 188, 247, 189, 0, 62, 162, 249, 5, 190, 14, 210, 194, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {70, 66, 149, 61, 126, 142, 211, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {254, 224, 24, 191, 103, 173, 61, 191, 219, 189, 184, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {21, 107, 43, 191, 30, 239, 241, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0037/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}