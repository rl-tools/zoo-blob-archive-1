// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {227, 65, 134, 63, 202, 95, 39, 63, 101, 147, 108, 62, 233, 95, 171, 190, 36, 159, 152, 63, 218, 232, 193, 62, 35, 74, 173, 190, 92, 163, 94, 63, 188, 244, 148, 61, 192, 46, 95, 190, 125, 66, 195, 191, 196, 253, 126, 190, 61, 57, 25, 191, 95, 197, 196, 62, 94, 41, 214, 188, 11, 136, 116, 191, 162, 187, 16, 191, 200, 23, 144, 59, 54, 96, 98, 191, 74, 138, 34, 63, 245, 193, 7, 63, 150, 83, 148, 62, 92, 238, 48, 63, 240, 35, 97, 62, 52, 87, 130, 62, 147, 74, 132, 63, 56, 104, 183, 190, 38, 82, 34, 63, 121, 233, 67, 63, 105, 46, 195, 62, 198, 211, 161, 190, 162, 43, 48, 63, 147, 116, 135, 62, 204, 75, 232, 62, 244, 203, 18, 191, 204, 211, 173, 62, 9, 83, 57, 63, 130, 59, 139, 191, 166, 152, 145, 190, 97, 179, 4, 63, 192, 246, 234, 189, 30, 240, 103, 190, 97, 203, 47, 191, 163, 73, 39, 191, 39, 252, 85, 190, 4, 72, 82, 190, 161, 146, 16, 63, 163, 154, 44, 191, 7, 3, 64, 62, 185, 102, 129, 191, 11, 23, 159, 189, 155, 201, 39, 63, 38, 163, 48, 191, 113, 136, 19, 62, 142, 158, 254, 188, 47, 114, 38, 191, 174, 31, 182, 62, 102, 7, 101, 62, 141, 124, 33, 63, 146, 23, 196, 190, 76, 57, 14, 62, 62, 137, 249, 190, 151, 138, 60, 190, 155, 190, 23, 63, 18, 0, 130, 63, 216, 20, 155, 189, 100, 216, 131, 190, 137, 25, 75, 63, 247, 163, 209, 60, 233, 132, 89, 190, 222, 208, 165, 191, 215, 194, 241, 190, 134, 126, 252, 62, 90, 245, 147, 190, 250, 82, 234, 62, 203, 228, 22, 63, 170, 23, 173, 63, 242, 210, 152, 62, 142, 200, 44, 63, 185, 78, 62, 191, 185, 191, 59, 190, 22, 91, 86, 63, 170, 30, 91, 191, 23, 86, 72, 190, 152, 193, 84, 63, 147, 20, 105, 63, 11, 53, 39, 63, 78, 183, 74, 191, 170, 182, 176, 61, 151, 183, 62, 63, 78, 58, 56, 190, 209, 143, 8, 190, 246, 63, 12, 63, 27, 152, 76, 63, 191, 222, 3, 191, 162, 212, 9, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 109, 176, 190, 229, 207, 9, 190, 191, 139, 247, 62, 48, 5, 185, 190, 158, 200, 13, 63, 198, 223, 239, 62, 7, 195, 17, 190, 42, 53, 158, 62, 192, 54, 202, 62, 251, 2, 51, 191, 159, 88, 25, 190, 254, 191, 0, 186, 51, 249, 202, 190, 227, 172, 102, 191, 249, 219, 236, 190, 214, 38, 75, 190, 186, 134, 22, 61, 20, 103, 34, 191, 204, 192, 171, 61, 29, 203, 0, 63, 116, 39, 106, 61, 67, 11, 199, 62, 95, 31, 58, 63, 79, 206, 52, 190, 134, 16, 40, 62, 244, 251, 217, 61, 28, 82, 47, 62, 198, 161, 143, 190, 35, 221, 187, 190, 73, 84, 215, 190, 137, 228, 25, 189, 216, 122, 67, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {6, 108, 143, 61, 65, 223, 235, 61, 95, 254, 90, 62, 126, 79, 202, 61, 16, 13, 145, 61, 70, 12, 9, 188, 0, 92, 85, 61, 242, 157, 27, 62, 119, 150, 64, 61, 175, 236, 1, 190, 220, 33, 185, 189, 53, 65, 10, 190, 133, 54, 1, 190, 146, 37, 166, 190, 127, 58, 193, 187, 233, 229, 229, 189, 221, 42, 67, 62, 85, 0, 242, 189, 167, 103, 21, 190, 165, 94, 52, 189, 47, 94, 128, 187, 210, 99, 227, 61, 205, 137, 201, 61, 52, 175, 194, 61, 229, 214, 96, 189, 37, 143, 141, 189, 40, 169, 134, 62, 140, 222, 117, 189, 65, 125, 119, 61, 180, 86, 21, 189, 173, 107, 212, 189, 79, 188, 20, 190, 121, 20, 87, 62, 59, 161, 137, 191, 59, 86, 42, 190, 179, 241, 153, 190, 140, 191, 206, 191, 241, 49, 30, 189, 148, 176, 90, 190, 182, 60, 15, 62, 66, 46, 181, 61, 66, 172, 69, 191, 211, 95, 14, 191, 16, 152, 231, 61, 30, 25, 89, 189, 156, 92, 30, 190, 10, 79, 77, 61, 58, 21, 163, 190, 57, 141, 65, 62, 45, 78, 155, 189, 34, 212, 18, 190, 142, 145, 13, 190, 159, 131, 39, 190, 144, 198, 79, 61, 251, 145, 16, 62, 204, 201, 185, 190, 20, 208, 116, 62, 150, 82, 61, 188, 61, 43, 225, 61, 60, 127, 78, 62, 4, 225, 85, 62, 216, 224, 68, 190, 227, 98, 5, 62, 148, 41, 63, 191, 117, 192, 130, 191, 249, 166, 105, 190, 101, 147, 9, 191, 125, 133, 223, 62, 242, 63, 54, 190, 233, 119, 48, 62, 236, 59, 235, 61, 155, 20, 15, 191, 179, 198, 16, 190, 73, 199, 251, 190, 21, 23, 194, 189, 83, 194, 7, 62, 127, 100, 114, 62, 218, 127, 161, 61, 56, 27, 230, 189, 171, 34, 131, 190, 14, 12, 123, 62, 169, 226, 62, 190, 70, 99, 147, 62, 125, 201, 24, 191, 105, 13, 243, 190, 69, 219, 246, 190, 143, 0, 104, 190, 40, 242, 25, 191, 244, 253, 16, 62, 92, 159, 26, 191, 140, 99, 40, 62, 241, 172, 115, 62, 20, 168, 160, 191, 90, 198, 103, 190, 119, 189, 219, 60, 12, 255, 211, 190, 139, 129, 186, 62, 26, 95, 172, 62, 248, 11, 193, 62, 103, 21, 165, 189, 46, 44, 125, 62, 174, 7, 100, 61, 16, 119, 181, 188, 250, 25, 33, 62, 190, 93, 143, 189, 152, 67, 138, 62, 171, 66, 169, 62, 245, 151, 18, 190, 13, 172, 84, 190, 66, 73, 221, 190, 63, 54, 173, 61, 155, 115, 141, 190, 4, 58, 20, 191, 124, 9, 161, 191, 120, 54, 153, 189, 126, 119, 57, 62, 227, 39, 8, 61, 40, 73, 38, 62, 209, 19, 141, 60, 8, 5, 4, 191, 241, 33, 6, 190, 238, 0, 171, 62, 1, 63, 156, 190, 121, 201, 15, 61, 125, 213, 161, 62, 47, 106, 40, 62, 5, 83, 127, 61, 233, 24, 17, 191, 22, 29, 36, 61, 199, 34, 63, 191, 25, 220, 130, 191, 101, 146, 14, 191, 204, 69, 201, 190, 145, 40, 138, 190, 103, 10, 252, 190, 237, 219, 193, 189, 124, 26, 33, 189, 160, 188, 165, 190, 226, 165, 76, 191, 89, 252, 98, 62, 136, 125, 145, 190, 244, 15, 143, 189, 255, 79, 147, 62, 168, 165, 60, 59, 206, 45, 162, 62, 161, 193, 235, 61, 50, 101, 72, 62, 142, 191, 97, 190, 119, 171, 54, 190, 117, 132, 42, 190, 221, 193, 21, 190, 110, 248, 88, 190, 136, 117, 221, 188, 198, 7, 181, 190, 135, 207, 107, 61, 243, 173, 71, 62, 116, 0, 209, 61, 214, 8, 124, 189, 82, 128, 47, 62, 51, 41, 109, 190, 164, 176, 185, 62, 181, 221, 165, 190, 3, 234, 141, 61, 179, 174, 50, 191, 79, 112, 213, 60, 93, 96, 5, 61, 108, 149, 228, 61, 141, 1, 10, 189, 26, 200, 10, 62, 206, 80, 41, 191, 44, 56, 104, 190, 74, 127, 151, 62, 51, 19, 187, 190, 219, 2, 2, 190, 228, 247, 88, 62, 86, 84, 127, 187, 207, 171, 12, 60, 114, 53, 175, 62, 68, 235, 176, 189, 193, 139, 244, 61, 107, 131, 240, 60, 209, 222, 91, 62, 239, 135, 32, 62, 35, 72, 94, 190, 81, 125, 22, 62, 9, 96, 27, 190, 167, 192, 78, 62, 131, 40, 130, 190, 48, 138, 145, 190, 67, 254, 169, 61, 137, 50, 91, 61, 117, 100, 15, 190, 120, 54, 79, 189, 202, 115, 31, 61, 191, 181, 93, 191, 34, 185, 121, 62, 123, 31, 171, 191, 109, 238, 225, 61, 177, 215, 98, 190, 183, 229, 186, 191, 117, 76, 238, 190, 97, 245, 35, 61, 84, 196, 4, 62, 16, 149, 55, 190, 159, 251, 117, 62, 104, 240, 139, 61, 127, 140, 135, 190, 226, 239, 16, 191, 145, 208, 126, 62, 98, 255, 141, 191, 108, 137, 174, 62, 231, 88, 143, 190, 94, 72, 252, 186, 43, 250, 68, 191, 117, 218, 23, 191, 197, 110, 157, 188, 136, 205, 220, 190, 118, 243, 155, 189, 105, 1, 131, 189, 149, 125, 83, 62, 223, 39, 155, 61, 29, 13, 114, 190, 251, 168, 20, 190, 97, 93, 22, 62, 95, 108, 254, 189, 205, 8, 169, 189, 154, 53, 175, 190, 37, 29, 96, 62, 80, 205, 251, 189, 46, 171, 107, 62, 157, 232, 57, 191, 118, 124, 38, 61, 37, 60, 200, 190, 49, 227, 88, 190, 129, 156, 166, 190, 24, 115, 53, 191, 164, 144, 89, 189, 244, 161, 159, 190, 231, 45, 219, 61, 128, 76, 255, 61, 232, 123, 81, 189, 210, 114, 12, 191, 30, 96, 249, 189, 176, 233, 240, 190, 67, 238, 9, 61, 221, 218, 48, 191, 51, 249, 211, 190, 70, 102, 13, 62, 154, 56, 42, 191, 85, 253, 108, 190, 122, 206, 69, 62, 192, 239, 142, 190, 101, 113, 85, 190, 39, 5, 65, 191, 77, 217, 23, 191, 37, 157, 62, 189, 92, 235, 207, 191, 166, 169, 163, 190, 233, 138, 17, 191, 164, 235, 44, 62, 67, 135, 72, 191, 121, 222, 130, 62, 108, 202, 247, 61, 113, 7, 244, 190, 65, 158, 241, 61, 150, 177, 3, 191, 181, 60, 183, 189, 59, 93, 43, 62, 55, 211, 144, 62, 11, 220, 143, 189, 79, 254, 174, 190, 92, 164, 41, 190, 137, 53, 191, 62, 123, 206, 104, 190, 197, 155, 172, 62, 163, 143, 17, 62, 199, 43, 129, 60, 173, 194, 123, 61, 64, 219, 17, 191, 174, 99, 99, 61, 70, 121, 165, 60, 105, 230, 196, 191, 55, 43, 143, 61, 48, 77, 226, 62, 244, 7, 142, 191, 4, 14, 54, 61, 217, 174, 112, 62, 17, 138, 153, 62, 243, 32, 226, 62, 35, 200, 190, 190, 151, 86, 162, 62, 112, 104, 187, 190, 221, 164, 251, 62, 147, 220, 104, 62, 20, 241, 17, 190, 121, 79, 133, 190, 123, 163, 16, 190, 147, 36, 62, 62, 109, 132, 27, 191, 63, 139, 180, 190, 222, 229, 4, 191, 213, 103, 117, 188, 231, 193, 33, 189, 207, 149, 164, 190, 241, 102, 68, 191, 154, 246, 7, 190, 181, 184, 85, 191, 91, 245, 194, 62, 142, 59, 80, 191, 159, 106, 74, 61, 226, 53, 90, 62, 253, 219, 181, 191, 8, 111, 45, 190, 136, 89, 123, 188, 246, 234, 136, 191, 130, 184, 117, 191, 197, 37, 135, 62, 167, 252, 4, 60, 45, 123, 52, 190, 83, 24, 167, 62, 0, 164, 13, 62, 125, 108, 33, 62, 197, 175, 231, 61, 222, 186, 133, 62, 14, 147, 177, 62, 68, 103, 123, 62, 232, 181, 5, 191, 108, 162, 168, 61, 94, 203, 192, 61, 156, 78, 123, 191, 93, 101, 117, 62, 86, 35, 170, 190, 219, 255, 192, 190, 170, 31, 42, 191, 4, 252, 176, 62, 150, 98, 114, 62, 82, 114, 101, 60, 135, 58, 54, 62, 254, 228, 41, 62, 209, 146, 133, 190, 88, 224, 20, 61, 218, 0, 114, 62, 251, 76, 206, 62, 162, 93, 44, 190, 246, 85, 82, 191, 59, 128, 16, 63, 210, 232, 51, 189, 255, 25, 47, 191, 158, 31, 219, 190, 157, 220, 27, 191, 83, 203, 102, 191, 6, 130, 88, 190, 61, 194, 151, 190, 169, 179, 189, 189, 49, 236, 101, 62, 183, 151, 18, 190, 245, 181, 192, 62, 248, 141, 178, 62, 170, 255, 211, 60, 254, 99, 37, 61, 210, 114, 130, 190, 112, 25, 190, 190, 9, 228, 253, 189, 205, 171, 38, 62, 101, 50, 191, 62, 250, 0, 128, 190, 162, 106, 45, 190, 227, 38, 79, 191, 207, 11, 97, 62, 110, 140, 155, 190, 32, 159, 138, 189, 223, 182, 132, 61, 78, 0, 225, 189, 24, 143, 202, 60, 27, 102, 63, 62, 185, 80, 137, 190, 58, 226, 33, 189, 25, 110, 141, 190, 78, 17, 157, 62, 168, 85, 144, 62, 249, 87, 107, 189, 206, 53, 2, 62, 102, 74, 56, 188, 203, 184, 113, 62, 167, 90, 63, 189, 189, 247, 226, 61, 147, 126, 143, 62, 44, 141, 44, 59, 79, 77, 79, 62, 199, 42, 116, 62, 245, 55, 28, 62, 63, 110, 235, 189, 118, 224, 145, 190, 222, 215, 182, 189, 93, 130, 242, 61, 16, 97, 219, 61, 235, 5, 172, 62, 48, 91, 204, 189, 47, 106, 197, 190, 188, 103, 28, 191, 107, 155, 145, 62, 160, 144, 221, 189, 56, 204, 191, 190, 102, 122, 134, 61, 130, 41, 215, 189, 119, 231, 237, 189, 20, 106, 151, 62, 227, 13, 199, 190, 179, 139, 142, 61, 131, 93, 150, 189, 1, 5, 49, 62, 169, 36, 0, 63, 233, 14, 160, 189, 230, 69, 200, 189, 196, 68, 15, 62, 127, 240, 241, 61, 188, 169, 170, 189, 213, 192, 5, 190, 73, 105, 2, 190, 114, 28, 49, 190, 199, 103, 30, 62, 47, 207, 67, 190, 68, 73, 16, 62, 68, 230, 227, 189, 241, 234, 6, 188, 167, 144, 39, 190, 102, 20, 5, 189, 38, 222, 191, 61, 172, 245, 171, 189, 190, 188, 38, 190, 69, 18, 46, 190, 99, 193, 136, 60, 153, 170, 29, 190, 1, 35, 41, 188, 224, 175, 224, 61, 197, 71, 200, 189, 59, 176, 119, 61, 119, 153, 8, 190, 44, 86, 23, 190, 125, 25, 175, 189, 191, 241, 21, 190, 229, 20, 17, 190, 46, 76, 34, 61, 92, 44, 19, 190, 188, 59, 194, 189, 192, 129, 0, 62, 164, 35, 204, 188, 73, 221, 42, 190, 182, 190, 216, 62, 136, 211, 92, 190, 210, 98, 173, 188, 47, 245, 203, 191, 161, 86, 147, 189, 176, 109, 193, 190, 186, 16, 158, 189, 66, 67, 122, 61, 209, 244, 49, 187, 62, 117, 137, 62, 47, 180, 194, 188, 247, 105, 2, 62, 102, 65, 230, 190, 17, 116, 66, 191, 173, 21, 165, 189, 79, 44, 24, 190, 241, 156, 44, 190, 221, 144, 25, 63, 198, 32, 158, 61, 169, 115, 209, 61, 155, 118, 24, 190, 73, 219, 161, 62, 191, 42, 88, 62, 12, 124, 37, 191, 201, 91, 44, 61, 0, 227, 153, 62, 186, 47, 90, 62, 140, 141, 220, 60, 249, 39, 167, 62, 25, 45, 91, 61, 15, 33, 7, 190, 174, 69, 127, 61, 173, 140, 166, 189, 37, 236, 151, 190, 40, 138, 163, 189, 177, 139, 174, 61, 0, 238, 71, 188, 67, 38, 106, 62, 94, 121, 153, 190, 187, 232, 241, 189, 172, 14, 176, 190, 169, 212, 179, 189, 161, 148, 160, 190, 133, 41, 132, 60, 168, 165, 158, 190, 127, 158, 70, 61, 55, 72, 86, 62, 187, 214, 8, 62, 34, 43, 132, 190, 48, 174, 48, 60, 125, 45, 159, 61, 144, 2, 45, 191, 241, 210, 33, 191, 206, 108, 193, 190, 135, 125, 64, 189, 178, 117, 136, 190, 117, 145, 182, 190, 88, 225, 232, 60, 213, 140, 239, 190, 151, 217, 73, 190, 3, 195, 12, 190, 224, 76, 103, 191, 231, 252, 9, 191, 225, 108, 45, 190, 155, 58, 200, 61, 124, 230, 134, 190, 44, 186, 81, 62, 101, 253, 187, 190, 115, 42, 52, 62, 48, 248, 216, 190, 236, 49, 62, 190, 107, 157, 66, 62, 143, 147, 69, 62, 0, 112, 84, 190, 0, 148, 184, 190, 146, 253, 28, 190, 20, 47, 123, 191, 32, 126, 86, 191, 124, 122, 208, 190, 175, 21, 143, 189, 128, 96, 34, 191, 126, 188, 202, 189, 144, 96, 194, 190, 164, 203, 2, 62, 133, 71, 190, 61, 122, 93, 42, 62, 108, 197, 146, 62, 94, 200, 142, 190, 210, 21, 164, 190, 31, 126, 203, 61, 78, 229, 92, 188, 64, 176, 32, 191, 135, 66, 23, 190, 175, 117, 243, 189, 214, 165, 29, 190, 142, 60, 11, 190, 170, 71, 232, 191, 162, 153, 102, 190, 18, 23, 131, 190, 50, 74, 131, 62, 129, 141, 32, 190, 73, 200, 76, 61, 102, 215, 141, 62, 113, 77, 218, 190, 67, 87, 45, 189, 80, 195, 240, 60, 38, 189, 111, 190, 97, 142, 117, 62, 41, 106, 216, 62, 112, 88, 105, 62, 173, 211, 47, 188, 251, 144, 26, 62, 74, 192, 210, 61, 18, 155, 215, 189, 88, 38, 159, 61, 43, 232, 47, 189, 85, 29, 127, 62, 80, 19, 214, 189, 91, 200, 184, 190, 83, 250, 50, 61, 137, 94, 247, 61, 174, 93, 112, 191, 80, 154, 39, 62, 100, 187, 202, 62, 171, 58, 78, 191, 183, 5, 159, 189, 139, 187, 123, 62, 143, 14, 18, 62, 52, 128, 29, 191, 82, 255, 161, 190, 107, 98, 149, 62, 194, 150, 142, 191, 201, 140, 221, 62, 27, 197, 17, 189, 118, 230, 49, 62, 107, 110, 226, 189, 211, 182, 159, 190, 175, 69, 216, 190, 17, 142, 97, 190, 108, 125, 106, 62, 24, 138, 190, 61, 94, 105, 75, 62, 5, 96, 212, 60, 166, 79, 142, 189, 165, 143, 230, 61, 12, 165, 214, 62, 118, 244, 37, 61, 127, 116, 47, 62, 122, 252, 201, 190, 181, 174, 145, 190, 249, 130, 99, 62, 154, 192, 138, 191, 144, 52, 103, 189, 141, 232, 249, 190, 67, 201, 170, 62, 165, 229, 171, 62, 15, 229, 226, 189, 223, 210, 224, 188, 193, 191, 201, 61, 12, 228, 154, 62, 223, 234, 183, 62, 154, 139, 213, 190, 194, 245, 139, 61, 234, 126, 177, 62, 161, 225, 46, 60, 117, 210, 55, 190, 29, 61, 58, 191, 57, 58, 21, 62, 73, 9, 134, 62, 54, 210, 211, 62, 85, 60, 10, 191, 119, 224, 145, 61, 116, 82, 181, 190, 83, 254, 246, 190, 187, 31, 151, 62, 168, 179, 137, 62, 231, 2, 86, 189, 233, 106, 54, 62, 105, 234, 132, 62, 11, 35, 127, 190, 62, 170, 156, 60, 44, 65, 78, 62, 212, 25, 117, 62, 126, 116, 157, 188, 88, 106, 216, 189, 171, 196, 82, 62, 3, 38, 30, 190, 75, 217, 237, 190, 162, 188, 146, 62, 1, 102, 192, 190, 43, 155, 23, 190, 189, 177, 0, 191, 195, 212, 251, 189, 251, 75, 122, 62, 215, 53, 128, 61, 250, 158, 231, 189, 20, 181, 156, 190, 142, 22, 84, 190, 116, 95, 9, 62, 234, 18, 118, 59, 107, 159, 67, 190, 128, 96, 160, 60, 228, 191, 4, 60, 82, 48, 56, 61, 131, 172, 194, 62, 218, 29, 29, 63, 188, 77, 84, 190, 246, 89, 151, 190, 14, 130, 106, 190, 135, 196, 140, 190, 254, 30, 254, 189, 45, 217, 118, 62, 97, 171, 181, 61, 181, 127, 161, 62, 22, 23, 5, 190, 242, 154, 24, 189, 220, 99, 13, 189, 209, 140, 90, 61, 240, 70, 181, 59, 95, 58, 129, 62, 130, 139, 224, 189, 134, 120, 167, 61, 125, 99, 75, 62, 28, 130, 234, 62, 71, 42, 20, 190, 77, 106, 13, 190, 32, 46, 198, 188, 199, 123, 193, 190, 238, 194, 129, 62, 76, 47, 132, 189, 220, 123, 95, 61, 131, 228, 209, 61, 12, 92, 112, 190, 223, 244, 128, 190, 119, 204, 55, 190, 98, 154, 187, 189, 254, 95, 196, 62, 240, 189, 10, 63, 13, 200, 244, 190, 181, 232, 156, 190, 156, 182, 57, 186, 21, 179, 139, 190, 252, 230, 197, 189, 19, 212, 224, 62, 39, 201, 58, 189, 219, 223, 217, 188, 212, 245, 96, 62, 124, 108, 198, 190, 118, 139, 189, 61, 14, 87, 208, 190, 51, 233, 157, 62, 27, 102, 74, 63, 101, 75, 30, 189, 30, 236, 62, 62, 9, 108, 7, 62, 241, 203, 190, 62, 144, 99, 2, 63, 105, 233, 213, 61, 40, 85, 169, 189, 99, 164, 5, 62, 87, 54, 203, 60, 136, 56, 169, 189, 238, 210, 170, 189, 142, 175, 240, 60, 44, 38, 6, 62, 24, 207, 181, 188, 143, 162, 82, 190, 172, 36, 115, 62, 254, 166, 43, 190, 166, 117, 1, 191, 129, 90, 51, 62, 155, 21, 56, 62, 130, 187, 89, 62, 113, 187, 0, 63, 146, 198, 21, 62, 95, 94, 218, 61, 23, 187, 9, 62, 122, 249, 251, 61, 172, 157, 196, 189, 144, 126, 24, 61, 245, 203, 142, 62, 89, 197, 81, 62, 180, 186, 28, 62, 25, 19, 194, 190, 198, 194, 252, 61, 240, 240, 13, 189, 116, 254, 13, 62, 169, 133, 37, 189, 246, 113, 235, 189, 239, 120, 1, 190, 21, 0, 34, 190, 206, 239, 43, 190, 158, 10, 166, 189, 238, 233, 86, 190, 81, 65, 156, 189, 35, 228, 152, 188, 41, 180, 233, 188, 14, 65, 70, 189, 57, 227, 103, 189, 252, 237, 219, 60, 76, 89, 231, 61, 197, 253, 150, 61, 116, 202, 243, 189, 102, 70, 240, 188, 116, 202, 43, 190, 1, 236, 102, 189, 244, 27, 80, 188, 223, 170, 9, 62, 166, 37, 12, 189, 18, 211, 248, 61, 188, 159, 9, 190, 120, 249, 18, 62, 41, 185, 145, 187, 22, 139, 0, 61, 176, 245, 26, 190, 209, 25, 14, 190, 144, 152, 39, 190, 117, 87, 129, 61, 51, 65, 164, 61, 178, 103, 13, 190, 43, 118, 166, 190, 140, 201, 237, 189, 36, 25, 138, 190, 199, 44, 181, 189, 72, 154, 54, 191, 1, 216, 5, 191, 96, 114, 0, 190, 22, 169, 30, 191, 190, 81, 84, 61, 20, 247, 113, 61, 18, 199, 23, 190, 8, 181, 138, 60, 238, 97, 71, 62, 237, 18, 29, 63, 247, 100, 16, 190, 205, 157, 129, 188, 144, 183, 55, 190, 209, 97, 208, 190, 104, 48, 235, 62, 38, 72, 149, 61, 234, 56, 42, 60, 38, 17, 223, 61, 228, 208, 195, 190, 47, 122, 244, 61, 229, 186, 44, 189, 233, 167, 116, 190, 222, 142, 67, 62, 0, 209, 148, 62, 128, 171, 33, 190, 235, 15, 82, 190, 171, 85, 3, 190, 118, 131, 165, 62, 31, 174, 135, 190, 13, 109, 236, 190, 70, 90, 129, 189, 127, 63, 107, 190, 42, 4, 170, 190, 27, 225, 128, 190, 75, 246, 238, 61, 146, 114, 15, 62, 19, 207, 131, 190, 157, 86, 24, 190, 108, 26, 14, 191, 232, 69, 138, 61, 52, 229, 171, 62, 237, 188, 66, 63, 155, 214, 209, 190, 151, 193, 48, 190, 203, 96, 180, 61, 245, 38, 209, 62, 51, 239, 129, 189, 112, 219, 16, 62, 189, 34, 162, 61, 143, 198, 48, 62, 95, 99, 243, 188, 120, 194, 231, 189, 196, 67, 63, 62, 5, 24, 221, 190, 48, 199, 72, 62, 194, 29, 6, 63, 8, 63, 69, 190, 146, 31, 33, 187, 1, 12, 102, 59, 50, 188, 13, 63, 195, 24, 244, 62, 62, 85, 88, 190, 143, 185, 194, 188, 162, 137, 195, 62, 195, 224, 89, 60, 184, 91, 208, 61, 253, 229, 138, 188, 197, 184, 100, 62, 31, 145, 255, 60, 84, 211, 245, 189, 134, 18, 10, 190, 165, 78, 22, 188, 49, 142, 196, 190, 173, 108, 252, 190, 129, 32, 53, 62, 9, 81, 231, 61, 155, 29, 78, 62, 61, 115, 246, 62, 32, 52, 25, 62, 181, 191, 46, 190, 185, 19, 47, 61, 178, 86, 64, 62, 107, 52, 230, 61, 109, 62, 11, 62, 190, 119, 247, 61, 157, 216, 146, 62, 122, 111, 252, 189, 134, 39, 250, 190, 75, 214, 208, 188, 20, 238, 67, 190, 48, 108, 165, 61, 121, 166, 242, 189, 168, 84, 237, 62, 176, 5, 97, 190, 88, 145, 28, 191, 105, 244, 183, 62, 188, 53, 136, 191, 74, 190, 190, 190, 124, 15, 193, 61, 20, 113, 142, 189, 151, 185, 5, 191, 27, 67, 150, 62, 99, 19, 210, 189, 148, 237, 177, 62, 211, 48, 200, 61, 239, 14, 106, 190, 174, 207, 89, 191, 56, 34, 173, 190, 1, 185, 130, 62, 88, 25, 172, 61, 117, 35, 40, 62, 206, 100, 197, 190, 69, 236, 141, 190, 138, 197, 128, 190, 232, 155, 190, 190, 182, 191, 177, 189, 136, 52, 75, 62, 58, 208, 51, 62, 196, 16, 0, 62, 231, 228, 178, 189, 204, 96, 177, 188, 32, 120, 31, 190, 182, 185, 144, 62, 14, 115, 184, 57, 132, 98, 212, 62, 175, 181, 105, 190, 172, 89, 77, 62, 128, 243, 195, 61, 87, 30, 248, 61, 111, 240, 51, 190, 197, 213, 255, 190, 169, 188, 225, 61, 109, 217, 84, 62, 96, 162, 15, 62, 65, 141, 137, 190, 50, 93, 171, 61, 60, 209, 9, 191, 215, 67, 53, 191, 225, 70, 157, 61, 195, 85, 230, 188, 200, 18, 61, 190, 228, 163, 132, 62, 5, 135, 222, 62, 245, 12, 14, 61, 236, 185, 180, 189, 33, 35, 36, 188, 195, 246, 50, 62, 85, 179, 106, 189, 156, 159, 44, 189, 99, 76, 247, 62, 214, 90, 19, 190, 173, 216, 173, 190, 154, 43, 202, 60, 97, 5, 65, 191, 179, 199, 128, 190, 68, 92, 105, 190, 198, 207, 171, 190, 12, 182, 126, 191, 42, 192, 33, 62, 172, 158, 72, 191, 253, 140, 115, 62, 8, 162, 118, 61, 67, 22, 14, 189, 28, 229, 114, 189, 175, 175, 168, 190, 1, 202, 254, 189, 139, 100, 56, 191, 17, 36, 239, 62, 193, 219, 96, 61, 60, 17, 192, 189, 123, 11, 217, 189, 54, 91, 75, 190, 68, 113, 177, 59, 220, 56, 247, 62, 143, 52, 112, 190, 58, 109, 213, 62, 63, 34, 199, 190, 87, 248, 39, 190, 45, 238, 118, 62, 77, 105, 112, 191, 41, 114, 75, 62, 76, 196, 86, 191, 9, 12, 26, 189, 124, 59, 162, 62, 120, 148, 139, 190, 134, 80, 227, 186, 147, 170, 31, 61, 199, 40, 232, 62, 145, 146, 31, 191, 223, 36, 210, 61, 147, 78, 178, 62, 12, 167, 239, 61, 161, 105, 206, 62, 254, 170, 184, 62, 197, 155, 193, 60, 172, 82, 58, 62, 157, 18, 197, 187, 206, 238, 5, 190, 220, 254, 176, 61, 176, 143, 214, 60, 194, 59, 104, 190, 94, 75, 38, 189, 84, 13, 20, 63, 18, 101, 162, 60, 80, 117, 42, 190, 42, 17, 12, 190, 159, 36, 133, 189, 190, 236, 72, 189, 217, 96, 67, 190, 133, 111, 86, 189, 239, 37, 3, 63, 35, 153, 37, 190, 109, 102, 7, 189, 226, 96, 202, 187, 220, 40, 60, 190, 231, 85, 139, 61, 117, 119, 78, 62, 204, 49, 219, 61, 1, 245, 14, 62, 58, 53, 217, 190, 215, 75, 206, 190, 76, 127, 150, 62, 155, 42, 106, 189, 81, 121, 94, 191, 244, 154, 109, 62, 205, 219, 50, 191, 150, 222, 44, 191, 129, 117, 68, 190, 198, 108, 18, 62, 12, 245, 202, 62, 220, 218, 68, 60, 38, 62, 30, 191, 226, 140, 206, 61, 98, 57, 238, 61, 232, 117, 160, 190, 241, 185, 179, 59, 187, 218, 164, 190, 156, 239, 67, 61, 111, 197, 172, 189, 85, 7, 76, 189, 210, 17, 54, 62, 253, 2, 60, 62, 175, 65, 212, 61, 193, 68, 209, 189, 92, 105, 114, 190, 191, 81, 242, 189, 66, 150, 213, 190, 159, 109, 136, 61, 250, 83, 22, 62, 118, 225, 196, 190, 30, 188, 153, 61, 251, 66, 24, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {34, 101, 86, 62, 183, 18, 63, 189, 106, 166, 50, 62, 218, 119, 29, 62, 196, 90, 122, 62, 51, 156, 109, 62, 57, 1, 141, 61, 246, 79, 107, 61, 79, 17, 73, 61, 72, 226, 120, 62, 95, 104, 171, 62, 228, 241, 42, 62, 62, 224, 134, 62, 161, 98, 185, 189, 172, 101, 155, 189, 177, 47, 202, 185, 93, 169, 136, 61, 125, 104, 26, 62, 190, 54, 48, 62, 100, 165, 31, 59, 159, 102, 208, 60, 242, 135, 60, 61, 9, 218, 10, 188, 229, 52, 216, 189, 196, 131, 5, 190, 165, 225, 199, 61, 8, 20, 106, 62, 28, 106, 47, 190, 89, 41, 232, 61, 19, 165, 11, 62, 230, 186, 249, 61, 2, 199, 228, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 180, 31, 59, 147, 249, 21, 61, 254, 115, 133, 191, 30, 24, 204, 62, 141, 141, 46, 63, 43, 12, 183, 60, 99, 50, 141, 63, 236, 10, 90, 191, 207, 74, 82, 191, 135, 104, 176, 63, 60, 253, 138, 191, 23, 99, 172, 62, 177, 215, 181, 62, 199, 205, 165, 61, 76, 107, 159, 190, 109, 21, 86, 191, 227, 145, 56, 191, 97, 28, 135, 190, 94, 28, 131, 63, 201, 250, 32, 191, 101, 108, 47, 62, 80, 64, 10, 63, 105, 51, 89, 190, 48, 226, 242, 60, 204, 240, 221, 62, 139, 104, 221, 62, 11, 94, 98, 190, 74, 19, 243, 190, 240, 20, 249, 190, 28, 189, 175, 63, 176, 119, 86, 62, 254, 145, 17, 63, 191, 147, 43, 190, 236, 134, 254, 190, 138, 117, 157, 62, 140, 40, 60, 62, 227, 158, 20, 191, 85, 162, 18, 191, 158, 255, 62, 190, 46, 188, 173, 188, 251, 1, 113, 62, 81, 52, 74, 190, 225, 226, 59, 62, 91, 184, 5, 62, 40, 174, 76, 190, 119, 22, 246, 189, 12, 168, 97, 190, 18, 140, 205, 62, 7, 46, 91, 62, 126, 110, 218, 189, 164, 147, 213, 61, 156, 231, 135, 62, 182, 154, 232, 189, 101, 80, 251, 188, 179, 140, 9, 190, 252, 141, 10, 189, 248, 57, 150, 188, 135, 20, 174, 61, 39, 7, 63, 190, 251, 162, 69, 61, 59, 64, 15, 190, 23, 6, 149, 61, 193, 156, 0, 190, 193, 58, 93, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 136, 137, 61, 158, 151, 240, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {227, 3, 241, 63, 81, 41, 42, 190, 34, 123, 114, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {96, 14, 248, 191, 12, 199, 30, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0037/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}