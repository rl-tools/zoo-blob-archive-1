// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {107, 152, 60, 63, 255, 215, 251, 62, 178, 70, 21, 190, 210, 135, 26, 190, 253, 108, 27, 63, 122, 154, 137, 62, 82, 29, 10, 189, 1, 153, 2, 63, 247, 7, 151, 61, 182, 56, 149, 190, 151, 134, 121, 191, 15, 229, 154, 190, 96, 149, 147, 190, 45, 160, 23, 63, 17, 246, 141, 187, 119, 6, 21, 191, 251, 146, 14, 191, 221, 82, 174, 189, 87, 204, 33, 191, 12, 39, 130, 190, 113, 95, 236, 62, 167, 175, 138, 62, 103, 128, 182, 62, 120, 255, 243, 62, 74, 43, 176, 62, 37, 170, 122, 63, 9, 245, 45, 190, 23, 74, 189, 62, 4, 39, 107, 62, 109, 213, 230, 62, 71, 243, 86, 61, 3, 32, 59, 186, 52, 57, 39, 62, 6, 99, 234, 61, 185, 63, 54, 191, 221, 6, 61, 62, 10, 115, 112, 62, 46, 23, 40, 191, 76, 172, 199, 190, 143, 214, 57, 190, 28, 91, 216, 61, 193, 255, 109, 190, 56, 208, 230, 190, 62, 122, 129, 61, 140, 80, 93, 190, 186, 242, 3, 191, 249, 0, 30, 63, 176, 140, 242, 190, 73, 28, 208, 61, 167, 246, 40, 191, 221, 180, 24, 59, 252, 202, 204, 62, 52, 222, 19, 191, 123, 72, 213, 61, 99, 32, 92, 62, 157, 229, 241, 190, 204, 212, 244, 61, 46, 119, 11, 63, 137, 224, 221, 62, 108, 154, 154, 190, 217, 162, 18, 62, 75, 33, 112, 62, 81, 107, 177, 190, 185, 27, 0, 63, 222, 65, 100, 63, 223, 188, 47, 60, 240, 148, 210, 61, 157, 138, 36, 63, 180, 155, 23, 61, 73, 135, 253, 189, 170, 198, 149, 61, 47, 37, 2, 191, 188, 192, 78, 62, 163, 92, 47, 191, 18, 101, 143, 62, 78, 72, 217, 62, 134, 228, 29, 63, 201, 49, 175, 62, 15, 11, 194, 62, 140, 147, 159, 190, 97, 64, 90, 190, 64, 136, 26, 63, 139, 101, 132, 190, 240, 70, 52, 190, 124, 206, 74, 63, 177, 145, 225, 62, 86, 99, 35, 63, 143, 74, 238, 190, 84, 245, 191, 190, 77, 14, 254, 62, 110, 126, 138, 190, 248, 180, 32, 191, 245, 224, 143, 62, 20, 174, 216, 62, 51, 207, 143, 188, 107, 91, 5, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {229, 189, 216, 190, 206, 175, 143, 190, 71, 54, 205, 62, 109, 97, 136, 62, 67, 128, 252, 61, 197, 245, 207, 62, 253, 55, 173, 190, 45, 17, 182, 62, 182, 141, 22, 63, 62, 28, 2, 191, 186, 215, 128, 190, 42, 159, 225, 62, 134, 235, 22, 190, 63, 174, 16, 191, 104, 229, 203, 189, 202, 214, 28, 189, 251, 89, 121, 62, 113, 110, 15, 191, 103, 115, 41, 61, 162, 101, 19, 62, 236, 150, 127, 61, 210, 90, 51, 63, 68, 81, 68, 63, 1, 41, 66, 190, 142, 252, 0, 63, 206, 40, 211, 61, 20, 8, 217, 62, 213, 208, 5, 190, 166, 160, 173, 190, 185, 9, 250, 190, 13, 199, 169, 61, 51, 167, 36, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {18, 158, 161, 60, 60, 32, 175, 61, 63, 97, 163, 61, 137, 14, 58, 61, 47, 144, 170, 61, 177, 175, 140, 186, 143, 44, 186, 61, 60, 125, 62, 62, 48, 246, 211, 61, 28, 231, 157, 189, 25, 70, 215, 189, 7, 165, 45, 187, 134, 40, 80, 189, 219, 92, 23, 190, 121, 197, 160, 187, 10, 241, 102, 189, 204, 144, 156, 61, 178, 143, 27, 61, 200, 36, 142, 60, 17, 27, 136, 61, 91, 207, 84, 61, 9, 129, 229, 61, 149, 129, 228, 60, 193, 245, 236, 61, 170, 50, 52, 61, 136, 241, 5, 190, 26, 38, 38, 62, 170, 50, 72, 61, 188, 80, 156, 61, 176, 153, 140, 61, 203, 165, 167, 60, 29, 187, 30, 189, 134, 172, 222, 60, 131, 53, 176, 187, 55, 123, 79, 190, 89, 254, 130, 61, 71, 115, 58, 190, 138, 198, 23, 62, 143, 246, 110, 190, 114, 0, 93, 189, 64, 42, 43, 62, 253, 197, 140, 188, 208, 116, 129, 189, 217, 123, 187, 60, 44, 93, 19, 62, 53, 171, 31, 59, 156, 39, 176, 187, 14, 66, 91, 190, 238, 171, 150, 62, 215, 118, 89, 187, 56, 109, 173, 189, 234, 194, 145, 189, 114, 42, 233, 61, 77, 80, 34, 189, 139, 14, 187, 61, 65, 81, 41, 190, 71, 224, 248, 61, 43, 250, 186, 189, 227, 249, 24, 62, 34, 182, 144, 62, 85, 150, 59, 61, 111, 7, 45, 190, 111, 121, 209, 61, 238, 209, 72, 190, 241, 164, 183, 60, 98, 46, 6, 190, 161, 240, 62, 190, 66, 21, 221, 60, 133, 89, 222, 60, 65, 228, 15, 190, 230, 100, 137, 61, 79, 243, 162, 188, 62, 19, 246, 189, 50, 189, 136, 189, 113, 11, 49, 62, 117, 76, 14, 189, 48, 169, 184, 188, 168, 203, 201, 61, 146, 220, 47, 61, 12, 64, 235, 61, 176, 157, 73, 189, 63, 86, 119, 61, 33, 91, 162, 61, 108, 174, 76, 190, 112, 18, 18, 190, 65, 61, 174, 189, 191, 223, 141, 61, 164, 102, 22, 190, 156, 18, 97, 61, 204, 124, 187, 60, 42, 172, 3, 62, 253, 166, 147, 61, 196, 129, 181, 188, 212, 140, 13, 190, 143, 122, 161, 60, 14, 79, 161, 189, 230, 59, 55, 189, 56, 9, 147, 61, 158, 237, 3, 62, 38, 170, 201, 61, 117, 131, 132, 61, 167, 101, 138, 189, 151, 99, 72, 190, 172, 37, 152, 188, 158, 209, 236, 189, 24, 10, 249, 61, 130, 94, 235, 61, 45, 227, 133, 189, 27, 56, 76, 189, 242, 242, 124, 61, 27, 216, 222, 61, 230, 153, 30, 61, 216, 83, 188, 60, 206, 20, 131, 190, 234, 173, 188, 61, 94, 230, 198, 61, 232, 74, 3, 62, 5, 51, 67, 189, 242, 20, 52, 190, 15, 253, 77, 190, 161, 29, 222, 189, 40, 168, 136, 60, 189, 38, 33, 190, 254, 51, 248, 61, 73, 236, 230, 61, 140, 141, 106, 61, 207, 141, 14, 61, 198, 161, 164, 61, 249, 204, 82, 187, 92, 215, 5, 61, 3, 192, 23, 190, 189, 156, 51, 190, 241, 144, 23, 62, 189, 33, 17, 190, 18, 119, 11, 190, 94, 86, 31, 190, 225, 167, 174, 61, 50, 53, 230, 189, 214, 150, 50, 190, 53, 37, 211, 61, 91, 232, 214, 189, 244, 15, 143, 189, 136, 45, 210, 61, 42, 162, 163, 59, 124, 9, 190, 61, 138, 24, 39, 190, 138, 217, 144, 61, 173, 25, 114, 189, 252, 92, 247, 188, 23, 74, 175, 189, 222, 73, 115, 189, 236, 142, 164, 189, 42, 209, 6, 190, 167, 227, 231, 189, 17, 182, 16, 190, 182, 234, 224, 61, 85, 92, 156, 61, 23, 165, 28, 188, 171, 51, 44, 62, 251, 1, 113, 60, 212, 199, 145, 62, 48, 56, 20, 61, 235, 107, 55, 189, 174, 137, 36, 190, 235, 112, 180, 189, 185, 251, 203, 189, 98, 80, 227, 61, 171, 146, 121, 61, 165, 137, 110, 61, 63, 221, 128, 190, 153, 67, 193, 60, 191, 128, 93, 62, 2, 124, 228, 60, 211, 105, 123, 190, 75, 54, 215, 188, 42, 64, 116, 189, 98, 99, 138, 62, 37, 171, 151, 62, 151, 89, 140, 189, 138, 195, 197, 186, 203, 175, 143, 61, 19, 198, 42, 62, 10, 153, 100, 61, 39, 242, 9, 190, 151, 164, 152, 61, 237, 250, 30, 61, 184, 250, 59, 62, 198, 9, 174, 189, 218, 210, 116, 190, 224, 64, 143, 61, 251, 10, 76, 61, 56, 129, 25, 190, 167, 181, 84, 190, 202, 115, 31, 61, 110, 211, 46, 190, 241, 14, 15, 62, 141, 27, 243, 190, 120, 200, 1, 62, 90, 122, 0, 62, 253, 108, 56, 190, 71, 102, 129, 189, 145, 214, 35, 61, 79, 240, 4, 62, 235, 220, 22, 190, 12, 165, 200, 61, 117, 244, 188, 61, 70, 174, 135, 61, 119, 58, 136, 59, 159, 13, 5, 61, 43, 144, 110, 189, 146, 71, 6, 60, 128, 143, 133, 188, 65, 118, 167, 61, 133, 9, 133, 190, 159, 102, 115, 190, 129, 183, 140, 61, 112, 2, 34, 190, 118, 243, 155, 189, 122, 136, 55, 190, 208, 110, 245, 189, 63, 167, 155, 61, 22, 142, 189, 189, 224, 145, 83, 185, 199, 136, 191, 61, 44, 113, 76, 187, 27, 51, 115, 61, 84, 10, 223, 57, 147, 8, 142, 189, 114, 135, 165, 62, 183, 24, 18, 62, 78, 242, 113, 190, 65, 113, 162, 61, 60, 232, 230, 60, 227, 136, 78, 190, 201, 168, 220, 189, 24, 183, 75, 190, 207, 46, 93, 190, 176, 198, 21, 61, 212, 185, 251, 189, 126, 214, 36, 62, 147, 183, 89, 61, 44, 153, 4, 59, 237, 75, 24, 190, 170, 163, 246, 188, 58, 60, 149, 60, 81, 150, 19, 60, 245, 100, 216, 61, 118, 242, 208, 60, 182, 241, 23, 190, 60, 209, 32, 190, 0, 219, 169, 61, 121, 121, 48, 190, 106, 226, 46, 190, 70, 115, 55, 190, 15, 76, 16, 190, 119, 43, 15, 190, 202, 87, 208, 189, 251, 35, 39, 190, 169, 252, 130, 61, 140, 17, 123, 60, 53, 89, 107, 61, 235, 128, 205, 61, 213, 182, 13, 190, 70, 106, 93, 61, 108, 50, 163, 61, 88, 9, 52, 190, 59, 153, 232, 61, 67, 105, 110, 188, 72, 4, 119, 61, 122, 211, 53, 190, 124, 127, 15, 190, 174, 220, 36, 190, 231, 10, 1, 62, 254, 90, 229, 188, 80, 122, 53, 62, 146, 249, 186, 61, 26, 129, 97, 188, 134, 31, 186, 189, 62, 129, 77, 190, 78, 25, 112, 61, 49, 213, 2, 190, 43, 145, 91, 188, 172, 116, 164, 189, 53, 55, 68, 62, 157, 246, 5, 190, 255, 25, 144, 189, 167, 83, 201, 61, 44, 89, 47, 62, 66, 60, 139, 61, 138, 36, 28, 61, 6, 179, 0, 61, 208, 139, 23, 62, 55, 9, 62, 62, 1, 181, 235, 61, 251, 192, 67, 189, 211, 152, 154, 57, 177, 238, 44, 190, 166, 167, 41, 190, 228, 123, 155, 188, 215, 90, 185, 188, 93, 75, 29, 190, 52, 71, 133, 188, 114, 196, 226, 61, 142, 18, 130, 190, 119, 173, 171, 60, 69, 62, 233, 189, 4, 247, 11, 190, 30, 209, 116, 187, 24, 222, 191, 61, 185, 96, 116, 190, 26, 167, 24, 189, 157, 158, 18, 190, 171, 162, 185, 189, 78, 50, 112, 61, 189, 83, 121, 190, 141, 110, 0, 190, 227, 246, 29, 61, 2, 217, 40, 62, 26, 27, 55, 189, 116, 244, 163, 61, 211, 238, 125, 190, 91, 51, 65, 62, 156, 70, 231, 60, 224, 119, 165, 189, 168, 1, 197, 62, 180, 139, 236, 61, 95, 131, 26, 190, 89, 52, 210, 189, 185, 11, 147, 61, 117, 231, 236, 189, 219, 34, 245, 61, 161, 42, 155, 190, 180, 238, 24, 61, 236, 15, 23, 190, 152, 180, 80, 62, 133, 143, 95, 62, 108, 97, 127, 190, 220, 13, 4, 190, 218, 37, 28, 190, 33, 175, 115, 190, 59, 121, 0, 187, 79, 82, 67, 62, 68, 149, 180, 62, 90, 38, 50, 190, 3, 205, 208, 190, 3, 236, 244, 61, 48, 96, 27, 190, 41, 249, 73, 190, 57, 200, 131, 189, 99, 132, 170, 189, 235, 201, 163, 190, 83, 114, 138, 188, 103, 226, 118, 189, 245, 179, 57, 61, 100, 184, 78, 61, 196, 129, 157, 61, 248, 238, 28, 61, 126, 24, 1, 62, 111, 234, 115, 189, 109, 198, 55, 61, 74, 154, 53, 190, 101, 173, 112, 190, 228, 28, 166, 189, 60, 140, 98, 62, 73, 223, 14, 62, 143, 72, 10, 190, 201, 109, 217, 188, 204, 120, 140, 190, 97, 61, 39, 62, 245, 250, 57, 190, 158, 121, 123, 60, 219, 57, 17, 190, 11, 56, 130, 189, 215, 105, 133, 189, 28, 52, 12, 61, 126, 2, 213, 187, 122, 82, 10, 60, 14, 158, 7, 190, 113, 61, 69, 62, 161, 165, 26, 189, 0, 61, 9, 188, 203, 86, 14, 61, 213, 142, 40, 189, 233, 83, 133, 60, 190, 55, 37, 190, 220, 84, 32, 61, 4, 52, 132, 188, 197, 56, 70, 62, 63, 180, 54, 190, 233, 227, 35, 62, 176, 176, 90, 61, 34, 30, 11, 190, 83, 247, 89, 190, 3, 205, 12, 189, 119, 59, 7, 61, 80, 185, 116, 62, 130, 30, 193, 61, 96, 59, 141, 190, 109, 152, 128, 190, 215, 73, 19, 190, 151, 226, 146, 62, 152, 92, 109, 62, 175, 9, 37, 190, 149, 7, 48, 190, 222, 74, 151, 189, 75, 218, 140, 190, 206, 32, 193, 61, 99, 27, 102, 190, 11, 165, 44, 62, 187, 80, 179, 187, 80, 136, 110, 61, 35, 22, 52, 62, 25, 111, 170, 189, 119, 240, 2, 190, 121, 108, 71, 62, 244, 162, 77, 189, 188, 169, 170, 189, 205, 131, 3, 190, 32, 44, 248, 189, 91, 200, 45, 190, 114, 19, 35, 62, 206, 253, 48, 190, 116, 249, 48, 62, 66, 206, 200, 189, 241, 234, 6, 188, 199, 144, 37, 190, 41, 175, 245, 188, 103, 144, 230, 61, 172, 245, 171, 189, 190, 188, 38, 190, 69, 18, 46, 190, 99, 193, 136, 60, 83, 180, 24, 190, 76, 18, 40, 188, 209, 169, 252, 61, 197, 71, 200, 189, 59, 176, 119, 61, 119, 153, 8, 190, 164, 71, 12, 190, 125, 25, 175, 189, 64, 43, 248, 189, 231, 13, 17, 190, 46, 76, 34, 61, 92, 44, 19, 190, 102, 112, 186, 189, 122, 206, 34, 62, 69, 173, 180, 58, 73, 221, 42, 190, 190, 24, 137, 189, 236, 136, 160, 189, 227, 68, 114, 59, 134, 156, 23, 190, 121, 7, 13, 62, 22, 147, 10, 189, 202, 213, 27, 188, 189, 133, 11, 61, 246, 29, 128, 189, 116, 127, 37, 62, 138, 138, 164, 61, 70, 155, 14, 61, 66, 35, 115, 190, 82, 104, 44, 190, 60, 19, 204, 61, 64, 158, 130, 186, 35, 132, 159, 189, 73, 37, 226, 61, 32, 228, 43, 188, 250, 96, 183, 188, 42, 173, 188, 60, 59, 44, 87, 62, 117, 144, 98, 62, 72, 210, 128, 190, 19, 78, 24, 189, 86, 104, 31, 62, 19, 150, 137, 61, 53, 113, 80, 189, 105, 227, 91, 62, 234, 74, 159, 61, 240, 10, 48, 190, 196, 254, 45, 61, 220, 203, 202, 60, 253, 93, 51, 190, 8, 224, 0, 62, 158, 12, 47, 188, 72, 206, 28, 62, 75, 85, 0, 62, 68, 210, 167, 61, 26, 23, 140, 189, 21, 85, 121, 189, 148, 169, 159, 189, 26, 74, 42, 189, 76, 22, 85, 188, 36, 78, 35, 190, 95, 123, 244, 61, 47, 5, 81, 62, 85, 83, 183, 61, 143, 255, 38, 189, 108, 222, 135, 189, 57, 189, 155, 61, 149, 75, 240, 189, 220, 1, 33, 190, 219, 126, 5, 62, 198, 117, 195, 61, 110, 103, 83, 61, 43, 247, 119, 190, 5, 72, 173, 61, 10, 145, 28, 190, 114, 76, 124, 61, 185, 80, 155, 187, 32, 121, 115, 190, 83, 151, 60, 190, 171, 80, 177, 188, 1, 174, 249, 61, 148, 95, 104, 189, 157, 182, 227, 187, 107, 86, 148, 61, 36, 181, 186, 187, 4, 227, 154, 190, 191, 169, 9, 188, 222, 225, 219, 61, 255, 156, 158, 189, 131, 226, 147, 60, 182, 90, 6, 190, 86, 61, 51, 189, 13, 13, 119, 189, 134, 32, 52, 190, 151, 135, 142, 189, 148, 204, 158, 188, 18, 217, 50, 190, 152, 86, 225, 189, 91, 90, 72, 190, 76, 84, 248, 189, 171, 73, 24, 62, 225, 238, 20, 190, 156, 111, 239, 61, 198, 18, 43, 189, 37, 168, 12, 190, 150, 153, 76, 189, 251, 211, 170, 189, 131, 56, 228, 189, 188, 161, 58, 61, 86, 213, 8, 62, 247, 87, 190, 61, 161, 18, 30, 188, 135, 243, 176, 61, 134, 235, 29, 190, 144, 241, 36, 190, 57, 229, 24, 62, 72, 6, 209, 189, 171, 133, 68, 189, 25, 12, 230, 61, 130, 171, 243, 188, 91, 104, 130, 189, 194, 43, 175, 61, 139, 218, 150, 189, 0, 161, 13, 62, 28, 205, 26, 62, 158, 176, 155, 61, 177, 140, 148, 189, 137, 92, 40, 61, 131, 116, 61, 62, 233, 40, 193, 189, 15, 229, 46, 62, 248, 78, 250, 189, 161, 214, 26, 62, 50, 212, 250, 188, 159, 223, 98, 190, 154, 51, 154, 189, 178, 170, 143, 60, 33, 162, 134, 190, 111, 221, 247, 60, 51, 11, 91, 62, 28, 185, 250, 59, 244, 60, 200, 186, 156, 179, 51, 62, 133, 141, 39, 189, 53, 136, 71, 190, 194, 35, 120, 60, 101, 130, 223, 60, 64, 133, 20, 61, 217, 54, 77, 61, 186, 239, 180, 60, 226, 228, 95, 62, 128, 153, 184, 189, 197, 194, 87, 190, 32, 82, 130, 190, 46, 163, 63, 188, 254, 106, 73, 62, 164, 57, 250, 189, 67, 65, 158, 61, 216, 221, 47, 62, 116, 219, 38, 60, 15, 8, 227, 61, 114, 154, 18, 60, 199, 23, 225, 61, 253, 61, 203, 61, 167, 53, 16, 190, 50, 225, 179, 190, 1, 13, 1, 61, 120, 135, 115, 189, 155, 57, 195, 189, 25, 231, 168, 189, 41, 201, 167, 61, 145, 238, 28, 61, 71, 94, 148, 189, 150, 38, 170, 188, 80, 138, 216, 61, 78, 191, 128, 61, 97, 106, 44, 189, 58, 177, 184, 61, 117, 39, 66, 62, 243, 24, 23, 61, 134, 247, 78, 62, 84, 165, 179, 189, 75, 8, 87, 190, 94, 77, 210, 61, 215, 169, 179, 62, 146, 76, 239, 189, 230, 114, 168, 189, 30, 30, 151, 189, 70, 247, 88, 188, 154, 144, 238, 60, 251, 142, 89, 61, 118, 71, 104, 62, 124, 195, 66, 190, 236, 250, 137, 188, 191, 80, 239, 189, 43, 174, 29, 190, 136, 83, 121, 61, 5, 139, 131, 62, 186, 3, 177, 62, 16, 152, 184, 187, 241, 249, 77, 190, 235, 143, 153, 189, 111, 199, 237, 189, 116, 125, 229, 189, 240, 143, 13, 62, 16, 236, 190, 189, 125, 17, 220, 189, 174, 230, 154, 190, 225, 181, 101, 189, 161, 216, 74, 61, 26, 251, 83, 189, 17, 169, 132, 62, 1, 169, 135, 190, 128, 226, 150, 62, 178, 248, 219, 186, 230, 155, 130, 189, 83, 89, 42, 190, 201, 132, 159, 188, 193, 188, 42, 190, 227, 201, 50, 62, 13, 116, 104, 62, 238, 95, 55, 62, 83, 136, 7, 61, 56, 227, 72, 190, 126, 181, 122, 187, 211, 198, 192, 61, 154, 56, 203, 61, 18, 171, 45, 62, 140, 227, 213, 61, 71, 221, 58, 61, 226, 122, 99, 190, 42, 18, 151, 60, 125, 163, 92, 61, 14, 172, 26, 61, 47, 83, 95, 189, 227, 58, 22, 60, 185, 96, 47, 190, 250, 234, 172, 59, 249, 32, 93, 62, 42, 162, 131, 62, 156, 142, 133, 188, 1, 44, 184, 189, 240, 11, 4, 190, 203, 190, 97, 62, 156, 226, 214, 61, 158, 7, 91, 62, 62, 15, 174, 188, 167, 106, 229, 61, 77, 76, 150, 190, 46, 65, 24, 190, 87, 120, 56, 190, 178, 170, 145, 188, 8, 40, 128, 188, 228, 55, 197, 189, 62, 173, 137, 189, 121, 117, 88, 190, 33, 117, 201, 61, 24, 25, 56, 190, 82, 224, 3, 61, 199, 209, 176, 61, 182, 143, 131, 189, 201, 204, 130, 190, 56, 99, 231, 61, 225, 3, 132, 190, 215, 98, 24, 62, 228, 227, 127, 190, 249, 2, 53, 62, 194, 193, 158, 62, 42, 195, 100, 189, 19, 158, 184, 61, 187, 188, 211, 61, 114, 42, 183, 189, 145, 83, 134, 62, 66, 49, 110, 62, 168, 34, 84, 61, 195, 37, 96, 190, 76, 30, 141, 62, 204, 204, 75, 190, 169, 165, 41, 60, 114, 246, 39, 61, 117, 1, 50, 62, 238, 81, 7, 189, 10, 250, 175, 189, 52, 137, 244, 61, 233, 50, 140, 189, 46, 50, 49, 190, 123, 37, 97, 61, 102, 85, 236, 61, 217, 68, 227, 188, 158, 116, 67, 62, 150, 19, 255, 60, 86, 211, 24, 62, 147, 119, 2, 62, 136, 109, 105, 62, 217, 131, 8, 61, 180, 69, 212, 188, 206, 158, 69, 62, 174, 175, 244, 61, 46, 169, 152, 61, 43, 69, 87, 190, 198, 125, 20, 62, 172, 243, 190, 60, 98, 90, 253, 61, 22, 92, 6, 59, 129, 236, 168, 189, 180, 90, 1, 190, 91, 148, 6, 190, 29, 177, 216, 189, 62, 91, 67, 189, 46, 238, 209, 189, 81, 65, 156, 189, 25, 19, 142, 60, 230, 129, 250, 187, 153, 238, 69, 189, 236, 241, 103, 189, 201, 251, 238, 60, 144, 47, 202, 61, 26, 156, 137, 61, 79, 160, 106, 189, 123, 86, 157, 187, 87, 244, 24, 190, 1, 236, 102, 189, 244, 27, 80, 188, 238, 123, 27, 62, 115, 15, 138, 188, 198, 232, 1, 62, 121, 24, 226, 189, 96, 118, 42, 62, 9, 122, 15, 186, 156, 221, 28, 61, 204, 33, 31, 190, 248, 72, 40, 190, 248, 229, 34, 190, 117, 87, 129, 61, 51, 65, 164, 61, 146, 180, 18, 190, 96, 195, 7, 190, 140, 201, 237, 189, 34, 32, 218, 187, 27, 102, 33, 62, 52, 215, 219, 190, 143, 80, 164, 188, 35, 25, 1, 190, 213, 213, 19, 190, 206, 157, 156, 61, 82, 241, 114, 61, 124, 203, 24, 190, 235, 10, 8, 62, 166, 126, 54, 61, 250, 106, 135, 62, 233, 112, 224, 61, 168, 231, 114, 61, 234, 243, 29, 189, 48, 211, 34, 62, 112, 173, 229, 61, 38, 153, 192, 61, 238, 187, 96, 61, 17, 92, 88, 189, 187, 197, 146, 190, 65, 246, 65, 62, 68, 159, 186, 189, 30, 217, 75, 61, 170, 92, 176, 61, 78, 153, 149, 61, 13, 59, 232, 189, 117, 24, 59, 190, 27, 58, 211, 61, 106, 35, 86, 62, 104, 158, 17, 190, 114, 89, 79, 61, 104, 251, 68, 61, 207, 115, 69, 62, 17, 43, 44, 190, 222, 87, 71, 62, 134, 182, 72, 62, 133, 114, 191, 61, 127, 131, 142, 190, 76, 148, 43, 189, 183, 33, 116, 190, 69, 79, 227, 188, 49, 243, 146, 61, 19, 161, 29, 62, 109, 224, 63, 190, 157, 210, 218, 189, 110, 227, 57, 62, 82, 150, 134, 61, 42, 14, 122, 189, 95, 123, 221, 188, 214, 194, 240, 60, 156, 145, 175, 189, 140, 100, 143, 189, 160, 187, 213, 189, 20, 178, 193, 61, 245, 73, 41, 190, 252, 13, 149, 59, 54, 134, 183, 61, 103, 117, 100, 190, 105, 27, 169, 189, 208, 188, 193, 189, 210, 12, 96, 62, 101, 41, 75, 62, 7, 157, 138, 189, 145, 223, 92, 60, 225, 42, 16, 61, 254, 35, 13, 62, 71, 178, 106, 189, 228, 179, 143, 61, 71, 191, 97, 62, 102, 75, 190, 61, 139, 55, 204, 189, 12, 94, 174, 58, 156, 60, 6, 190, 77, 53, 8, 190, 209, 58, 230, 60, 42, 168, 210, 60, 138, 1, 244, 61, 25, 27, 237, 188, 107, 94, 19, 62, 147, 106, 36, 61, 138, 154, 190, 189, 189, 88, 191, 61, 144, 167, 134, 62, 85, 137, 22, 62, 188, 170, 250, 61, 14, 13, 243, 60, 106, 88, 75, 62, 207, 145, 30, 190, 154, 11, 37, 190, 122, 32, 100, 60, 31, 161, 15, 190, 191, 120, 147, 61, 172, 190, 157, 61, 226, 145, 224, 61, 243, 126, 219, 189, 80, 36, 112, 189, 199, 138, 215, 187, 50, 150, 15, 190, 205, 216, 11, 190, 166, 80, 18, 62, 144, 15, 151, 189, 76, 177, 154, 189, 238, 65, 250, 60, 9, 14, 220, 61, 200, 13, 5, 62, 54, 198, 22, 188, 76, 22, 38, 190, 202, 240, 110, 61, 157, 108, 86, 60, 94, 163, 62, 189, 36, 200, 172, 189, 3, 171, 130, 61, 96, 49, 36, 61, 10, 8, 47, 190, 222, 211, 1, 60, 64, 45, 223, 189, 60, 223, 137, 61, 190, 3, 139, 59, 206, 151, 113, 189, 142, 143, 46, 62, 103, 162, 184, 188, 172, 33, 209, 189, 94, 221, 7, 190, 152, 243, 8, 62, 27, 170, 61, 59, 151, 7, 159, 61, 162, 93, 220, 187, 126, 253, 39, 62, 180, 247, 147, 61, 5, 8, 89, 62, 138, 199, 126, 189, 223, 144, 51, 60, 87, 45, 185, 189, 95, 109, 149, 62, 191, 103, 226, 189, 251, 175, 59, 190, 113, 218, 102, 189, 2, 222, 28, 190, 135, 200, 77, 190, 164, 205, 109, 60, 23, 165, 133, 188, 236, 147, 32, 190, 157, 187, 162, 189, 243, 169, 101, 188, 158, 29, 24, 62, 107, 42, 13, 61, 141, 68, 245, 60, 244, 234, 53, 62, 208, 243, 132, 61, 159, 162, 26, 190, 47, 154, 3, 62, 226, 101, 223, 189, 174, 25, 24, 59, 60, 48, 81, 190, 38, 156, 119, 190, 73, 76, 57, 190, 118, 61, 145, 60, 20, 201, 4, 190, 249, 67, 169, 190, 140, 28, 103, 187, 255, 50, 136, 62, 249, 6, 124, 189, 235, 65, 41, 62, 121, 192, 206, 61, 213, 81, 209, 188, 23, 37, 159, 190, 94, 81, 58, 189, 13, 25, 143, 190, 104, 31, 203, 62, 254, 253, 255, 60, 1, 164, 178, 189, 16, 245, 61, 61, 242, 5, 176, 190, 191, 175, 229, 60, 148, 163, 223, 60, 128, 229, 43, 190, 170, 0, 199, 189, 120, 115, 44, 190, 234, 130, 224, 188, 168, 182, 44, 62, 4, 233, 12, 190, 12, 212, 3, 62, 217, 171, 129, 190, 230, 16, 194, 189, 24, 23, 16, 62, 14, 144, 136, 190, 60, 34, 109, 58, 11, 18, 13, 61, 174, 216, 4, 190, 207, 15, 19, 190, 15, 227, 32, 189, 159, 173, 186, 189, 226, 206, 223, 189, 151, 136, 207, 189, 251, 82, 195, 61, 55, 13, 33, 60, 0, 252, 52, 62, 173, 181, 53, 60, 18, 83, 46, 190, 98, 228, 28, 188, 190, 137, 17, 62, 138, 161, 101, 189, 118, 82, 37, 186, 17, 63, 162, 189, 179, 181, 9, 190, 197, 86, 249, 189, 67, 33, 58, 61, 41, 99, 135, 61, 75, 162, 204, 189, 254, 237, 138, 189, 247, 122, 213, 189, 112, 179, 69, 62, 191, 168, 6, 190, 101, 146, 228, 60, 211, 187, 187, 189, 192, 166, 23, 190, 249, 85, 238, 59, 21, 88, 184, 61, 21, 13, 15, 62, 45, 6, 51, 62, 158, 82, 173, 61, 57, 15, 76, 189, 25, 99, 12, 62, 163, 38, 44, 190, 144, 83, 184, 61, 112, 7, 163, 61, 191, 163, 168, 189, 25, 109, 62, 190, 140, 10, 144, 61, 158, 196, 165, 187, 167, 228, 34, 190, 15, 243, 158, 61, 170, 79, 43, 190, 123, 145, 39, 189, 165, 78, 111, 60, 154, 68, 74, 189, 109, 193, 182, 189, 102, 133, 110, 61, 113, 57, 34, 62, 37, 96, 211, 61, 233, 118, 158, 189, 0, 12, 35, 62, 132, 181, 247, 187, 228, 150, 132, 60, 15, 199, 208, 189, 60, 176, 200, 188, 81, 229, 26, 62, 239, 182, 38, 190, 180, 108, 177, 61, 116, 218, 233, 189, 145, 220, 34, 190, 235, 230, 27, 62, 19, 1, 181, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {42, 148, 17, 62, 240, 49, 251, 188, 48, 158, 115, 61, 146, 35, 238, 61, 32, 123, 19, 62, 238, 204, 46, 62, 133, 195, 35, 59, 41, 116, 36, 62, 93, 218, 42, 59, 174, 246, 221, 61, 173, 75, 50, 62, 213, 227, 29, 61, 188, 193, 34, 62, 123, 16, 150, 189, 66, 248, 227, 188, 150, 26, 84, 60, 193, 78, 17, 188, 4, 191, 255, 61, 141, 69, 106, 61, 173, 204, 53, 59, 148, 75, 254, 61, 106, 129, 106, 61, 203, 134, 131, 188, 206, 240, 161, 189, 65, 44, 158, 61, 124, 30, 4, 62, 60, 48, 38, 62, 246, 237, 148, 189, 59, 160, 141, 61, 71, 79, 156, 61, 2, 86, 228, 189, 112, 97, 136, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 168, 223, 188, 3, 82, 36, 62, 30, 157, 110, 188, 192, 136, 149, 59, 242, 78, 24, 62, 224, 207, 75, 61, 248, 19, 109, 62, 110, 8, 107, 190, 31, 252, 36, 189, 35, 39, 12, 62, 232, 123, 206, 190, 143, 162, 10, 62, 162, 76, 161, 62, 138, 95, 166, 61, 180, 236, 26, 190, 119, 12, 18, 190, 157, 217, 128, 189, 214, 244, 234, 60, 44, 28, 35, 62, 44, 86, 211, 190, 221, 139, 89, 62, 178, 17, 187, 62, 162, 2, 106, 190, 80, 60, 152, 186, 71, 170, 59, 62, 157, 139, 26, 62, 149, 122, 23, 190, 167, 6, 2, 190, 145, 97, 139, 190, 160, 81, 220, 62, 59, 231, 89, 187, 40, 125, 112, 61, 190, 114, 217, 189, 154, 137, 167, 189, 146, 120, 112, 59, 53, 130, 13, 61, 77, 203, 28, 190, 4, 36, 188, 190, 125, 37, 47, 189, 46, 245, 203, 60, 53, 134, 17, 62, 244, 149, 148, 61, 101, 225, 203, 187, 9, 209, 21, 61, 242, 253, 62, 190, 107, 86, 246, 189, 100, 21, 4, 61, 120, 213, 40, 62, 121, 200, 210, 61, 76, 176, 161, 189, 240, 43, 19, 62, 79, 4, 64, 62, 76, 72, 119, 189, 224, 32, 242, 61, 192, 75, 196, 189, 180, 92, 132, 189, 244, 1, 231, 189, 157, 86, 195, 60, 66, 79, 12, 190, 48, 34, 152, 189, 120, 7, 210, 189, 254, 180, 7, 62, 100, 31, 164, 189, 124, 150, 123, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 47, 73, 61, 63, 84, 66, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {75, 172, 157, 190, 15, 116, 1, 191, 118, 135, 39, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {96, 74, 195, 63, 104, 204, 240, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0037/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}