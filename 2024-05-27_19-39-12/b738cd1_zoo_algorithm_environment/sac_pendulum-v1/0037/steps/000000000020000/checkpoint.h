// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {34, 157, 132, 63, 182, 139, 62, 63, 132, 10, 122, 62, 77, 15, 203, 190, 142, 183, 154, 63, 1, 134, 199, 62, 156, 94, 211, 190, 52, 89, 96, 63, 90, 103, 122, 61, 68, 214, 65, 190, 100, 104, 201, 191, 223, 136, 131, 190, 215, 173, 51, 191, 138, 190, 209, 62, 244, 53, 179, 188, 99, 115, 86, 191, 227, 168, 58, 191, 224, 246, 178, 61, 35, 230, 93, 191, 9, 96, 20, 63, 162, 53, 246, 62, 56, 169, 74, 62, 61, 220, 60, 63, 232, 99, 113, 62, 21, 227, 134, 62, 57, 162, 132, 63, 178, 112, 121, 190, 238, 217, 59, 63, 249, 91, 94, 63, 236, 132, 180, 62, 59, 21, 191, 190, 133, 158, 61, 63, 164, 142, 127, 62, 189, 3, 212, 62, 196, 171, 7, 191, 215, 23, 184, 62, 59, 127, 58, 63, 161, 56, 145, 191, 148, 102, 164, 190, 189, 48, 240, 62, 25, 101, 232, 189, 223, 249, 117, 190, 71, 118, 48, 191, 151, 32, 40, 191, 73, 253, 105, 190, 61, 47, 212, 190, 142, 188, 10, 63, 90, 166, 32, 191, 171, 251, 216, 61, 64, 218, 143, 191, 11, 203, 138, 189, 39, 194, 48, 63, 194, 137, 12, 191, 153, 164, 117, 62, 41, 167, 64, 57, 35, 175, 10, 191, 206, 30, 188, 62, 232, 131, 71, 62, 127, 121, 44, 63, 152, 147, 227, 190, 173, 204, 228, 61, 220, 210, 253, 190, 159, 7, 90, 190, 121, 160, 6, 63, 187, 230, 137, 63, 107, 52, 203, 189, 125, 163, 169, 190, 43, 237, 75, 63, 225, 249, 14, 61, 31, 215, 216, 189, 85, 57, 177, 191, 62, 115, 223, 190, 201, 108, 5, 63, 33, 60, 53, 190, 199, 194, 147, 62, 251, 166, 14, 63, 236, 190, 183, 63, 4, 6, 162, 62, 191, 72, 38, 63, 170, 223, 57, 191, 138, 65, 134, 190, 118, 153, 87, 63, 23, 25, 103, 191, 213, 228, 124, 190, 82, 234, 79, 63, 32, 218, 125, 63, 180, 110, 44, 63, 21, 201, 28, 191, 102, 31, 140, 189, 18, 231, 76, 63, 128, 83, 81, 190, 54, 93, 78, 190, 27, 178, 6, 63, 139, 71, 86, 63, 230, 40, 8, 191, 169, 66, 21, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {188, 247, 178, 190, 130, 160, 5, 190, 179, 113, 230, 62, 92, 118, 200, 190, 225, 224, 5, 63, 183, 58, 9, 63, 92, 26, 21, 190, 162, 27, 120, 62, 68, 217, 207, 62, 138, 28, 37, 191, 39, 83, 51, 190, 140, 79, 177, 189, 141, 7, 206, 190, 91, 158, 116, 191, 8, 83, 216, 190, 37, 39, 171, 190, 149, 166, 108, 189, 131, 164, 28, 191, 222, 208, 238, 61, 93, 88, 228, 62, 141, 31, 52, 61, 26, 94, 166, 62, 161, 49, 51, 63, 28, 2, 93, 190, 46, 57, 240, 61, 154, 7, 151, 61, 101, 81, 12, 62, 29, 107, 139, 190, 118, 187, 201, 190, 209, 180, 181, 190, 141, 49, 4, 190, 254, 89, 63, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 134, 2, 188, 92, 235, 41, 62, 78, 188, 165, 62, 227, 173, 239, 61, 40, 96, 27, 62, 89, 97, 27, 188, 4, 14, 202, 61, 209, 103, 212, 61, 169, 31, 135, 61, 72, 90, 28, 190, 95, 185, 4, 189, 212, 102, 116, 190, 199, 248, 42, 190, 3, 2, 206, 190, 175, 153, 139, 61, 70, 18, 8, 189, 188, 151, 44, 62, 51, 199, 176, 189, 239, 170, 40, 190, 5, 141, 116, 187, 167, 237, 16, 61, 44, 170, 174, 61, 210, 213, 15, 62, 235, 58, 27, 62, 169, 53, 15, 190, 27, 66, 221, 189, 216, 224, 87, 62, 16, 99, 1, 190, 132, 6, 192, 60, 157, 152, 13, 60, 86, 139, 154, 189, 45, 50, 136, 189, 111, 241, 29, 62, 142, 54, 139, 191, 176, 88, 147, 190, 161, 38, 137, 190, 203, 204, 220, 191, 42, 120, 211, 189, 182, 24, 174, 190, 136, 178, 162, 61, 86, 164, 48, 187, 82, 150, 132, 191, 67, 198, 19, 191, 165, 203, 204, 61, 237, 147, 155, 189, 156, 92, 30, 190, 10, 79, 77, 61, 115, 162, 181, 190, 24, 218, 126, 62, 93, 255, 66, 60, 188, 175, 160, 189, 96, 8, 98, 190, 8, 182, 76, 190, 154, 102, 164, 188, 169, 144, 134, 61, 39, 166, 162, 190, 1, 3, 79, 62, 241, 177, 147, 189, 195, 240, 136, 61, 10, 105, 41, 62, 13, 207, 42, 62, 221, 47, 156, 190, 100, 97, 167, 61, 88, 253, 93, 191, 80, 107, 128, 191, 60, 110, 248, 190, 62, 86, 36, 191, 188, 48, 0, 63, 253, 196, 157, 189, 42, 205, 83, 62, 83, 148, 223, 61, 67, 48, 38, 191, 197, 239, 105, 190, 73, 199, 251, 190, 231, 58, 155, 190, 151, 25, 19, 62, 154, 144, 161, 62, 218, 127, 161, 61, 253, 213, 190, 61, 209, 161, 172, 190, 162, 153, 158, 62, 143, 122, 0, 190, 63, 183, 151, 62, 152, 13, 13, 191, 117, 63, 206, 190, 196, 238, 9, 191, 170, 30, 87, 190, 172, 62, 13, 191, 63, 114, 32, 62, 130, 177, 32, 191, 241, 97, 109, 62, 114, 121, 161, 62, 2, 40, 171, 191, 192, 100, 125, 190, 255, 15, 168, 58, 64, 68, 215, 190, 51, 164, 184, 62, 188, 182, 140, 62, 125, 114, 157, 62, 55, 42, 144, 61, 149, 203, 122, 62, 211, 172, 252, 60, 187, 145, 193, 189, 174, 6, 18, 62, 154, 194, 117, 189, 190, 152, 132, 61, 41, 245, 130, 62, 12, 203, 54, 190, 198, 30, 37, 190, 96, 185, 236, 190, 141, 252, 135, 61, 220, 220, 197, 190, 214, 198, 12, 191, 191, 221, 164, 191, 138, 172, 51, 190, 74, 192, 49, 62, 0, 207, 132, 61, 2, 214, 42, 62, 113, 200, 51, 60, 56, 1, 30, 191, 229, 153, 34, 190, 113, 138, 160, 62, 178, 152, 150, 190, 17, 59, 101, 61, 223, 41, 114, 62, 193, 144, 138, 61, 90, 147, 228, 188, 196, 51, 228, 190, 225, 50, 140, 61, 98, 24, 48, 191, 64, 186, 106, 191, 129, 45, 48, 191, 252, 172, 32, 191, 244, 242, 136, 190, 200, 161, 247, 190, 217, 22, 47, 189, 170, 233, 26, 189, 31, 121, 132, 190, 171, 253, 60, 191, 37, 169, 137, 62, 58, 118, 165, 190, 244, 15, 143, 189, 255, 79, 147, 62, 168, 165, 60, 59, 153, 176, 172, 62, 64, 143, 54, 62, 192, 164, 131, 62, 111, 232, 108, 190, 20, 53, 112, 190, 161, 255, 47, 190, 234, 197, 18, 190, 172, 162, 155, 190, 70, 171, 127, 60, 70, 36, 168, 190, 166, 227, 141, 61, 222, 109, 79, 62, 19, 128, 44, 62, 99, 154, 140, 188, 13, 208, 110, 62, 145, 231, 229, 189, 43, 229, 168, 62, 47, 226, 201, 190, 121, 250, 208, 61, 6, 247, 20, 191, 17, 191, 98, 61, 2, 142, 172, 61, 144, 192, 212, 61, 24, 183, 154, 189, 177, 151, 37, 62, 24, 81, 90, 191, 199, 196, 138, 190, 103, 185, 149, 62, 103, 63, 211, 190, 74, 64, 164, 190, 159, 237, 116, 62, 152, 118, 7, 61, 182, 240, 164, 61, 120, 67, 188, 62, 75, 140, 92, 189, 201, 8, 37, 62, 124, 62, 154, 61, 139, 1, 99, 62, 160, 141, 58, 62, 122, 7, 70, 190, 22, 26, 6, 62, 165, 165, 60, 190, 239, 126, 68, 62, 226, 8, 148, 190, 195, 26, 165, 190, 239, 14, 173, 61, 19, 69, 109, 61, 18, 1, 211, 189, 219, 161, 33, 190, 202, 115, 31, 61, 42, 85, 94, 191, 78, 90, 135, 62, 200, 104, 186, 191, 100, 53, 48, 62, 199, 14, 250, 189, 255, 34, 217, 191, 19, 37, 29, 191, 97, 245, 35, 61, 50, 179, 4, 62, 172, 19, 32, 190, 95, 83, 89, 62, 182, 56, 185, 189, 80, 42, 165, 190, 233, 27, 32, 191, 129, 26, 128, 62, 219, 146, 162, 191, 48, 15, 203, 62, 240, 111, 168, 190, 109, 67, 110, 188, 140, 217, 84, 191, 138, 224, 24, 191, 197, 206, 143, 188, 21, 146, 241, 190, 118, 243, 155, 189, 120, 52, 193, 189, 104, 64, 47, 62, 215, 43, 19, 190, 246, 247, 12, 60, 111, 249, 140, 61, 99, 255, 0, 62, 95, 108, 254, 189, 205, 8, 169, 189, 205, 10, 144, 190, 233, 8, 147, 62, 180, 151, 123, 59, 227, 166, 143, 62, 122, 177, 81, 191, 118, 124, 38, 61, 82, 31, 81, 190, 49, 227, 88, 190, 129, 156, 166, 190, 8, 161, 81, 191, 50, 118, 57, 60, 189, 57, 127, 189, 150, 194, 122, 62, 115, 23, 145, 62, 106, 212, 181, 188, 77, 65, 18, 191, 128, 143, 168, 189, 74, 71, 178, 190, 62, 128, 230, 61, 172, 108, 59, 191, 118, 152, 205, 190, 141, 64, 104, 62, 160, 203, 83, 191, 85, 253, 108, 190, 2, 231, 122, 62, 186, 124, 108, 190, 101, 113, 85, 190, 173, 20, 67, 191, 43, 106, 52, 191, 53, 170, 105, 61, 125, 119, 224, 191, 82, 98, 4, 191, 71, 192, 21, 191, 5, 149, 66, 62, 51, 125, 85, 191, 95, 87, 100, 62, 51, 202, 157, 61, 171, 57, 19, 191, 169, 150, 62, 62, 6, 205, 7, 191, 82, 246, 121, 190, 202, 70, 24, 62, 241, 159, 170, 62, 140, 81, 215, 61, 119, 106, 177, 190, 11, 91, 12, 190, 43, 220, 206, 62, 59, 202, 62, 190, 177, 179, 163, 62, 75, 129, 59, 62, 235, 175, 40, 61, 80, 153, 15, 62, 184, 121, 33, 191, 19, 201, 139, 61, 106, 112, 127, 59, 254, 67, 221, 191, 224, 126, 227, 61, 41, 35, 0, 63, 18, 97, 152, 191, 135, 182, 164, 186, 218, 124, 68, 62, 176, 172, 176, 62, 202, 27, 231, 62, 159, 11, 217, 190, 73, 226, 147, 62, 190, 118, 21, 190, 95, 6, 245, 62, 193, 114, 129, 62, 86, 140, 54, 190, 15, 157, 155, 190, 91, 148, 47, 190, 156, 117, 71, 62, 76, 101, 43, 191, 20, 210, 194, 190, 121, 173, 254, 190, 58, 124, 12, 189, 234, 173, 20, 189, 244, 3, 165, 190, 135, 248, 7, 191, 154, 246, 7, 190, 139, 65, 42, 191, 202, 249, 178, 62, 15, 22, 108, 191, 25, 72, 195, 60, 188, 85, 61, 62, 13, 155, 187, 191, 100, 10, 75, 190, 97, 220, 89, 189, 56, 244, 183, 191, 91, 252, 167, 191, 193, 248, 91, 62, 160, 80, 187, 187, 69, 27, 67, 190, 104, 163, 38, 62, 85, 219, 13, 60, 193, 233, 85, 62, 130, 97, 241, 61, 148, 2, 253, 62, 177, 21, 192, 62, 58, 52, 242, 62, 15, 141, 232, 190, 45, 197, 116, 61, 35, 164, 43, 61, 221, 97, 129, 191, 112, 115, 154, 62, 11, 152, 171, 190, 143, 63, 249, 190, 147, 44, 107, 191, 163, 44, 182, 62, 47, 159, 66, 62, 155, 239, 100, 62, 5, 209, 51, 62, 92, 30, 162, 62, 117, 91, 156, 190, 207, 22, 122, 60, 111, 44, 50, 62, 177, 172, 196, 62, 219, 95, 55, 190, 54, 201, 124, 191, 43, 137, 9, 63, 117, 8, 205, 189, 94, 229, 72, 191, 65, 55, 203, 190, 88, 162, 5, 191, 236, 48, 80, 191, 158, 72, 146, 190, 20, 187, 155, 190, 82, 235, 34, 190, 103, 136, 28, 62, 121, 73, 71, 190, 29, 250, 163, 62, 47, 248, 197, 62, 174, 127, 41, 188, 249, 106, 205, 60, 115, 152, 106, 190, 165, 33, 7, 191, 202, 33, 52, 190, 171, 103, 30, 62, 60, 231, 194, 62, 171, 116, 20, 191, 116, 13, 132, 190, 184, 177, 95, 191, 22, 215, 116, 62, 94, 125, 135, 190, 244, 163, 79, 189, 119, 179, 161, 61, 42, 232, 183, 189, 212, 213, 18, 61, 124, 174, 56, 62, 32, 3, 167, 190, 12, 2, 95, 189, 129, 62, 155, 190, 223, 43, 161, 62, 70, 55, 148, 62, 107, 81, 228, 189, 73, 32, 1, 62, 111, 190, 115, 60, 17, 236, 218, 62, 81, 235, 87, 189, 26, 133, 149, 61, 10, 136, 129, 62, 156, 239, 55, 189, 109, 12, 66, 62, 207, 55, 134, 62, 170, 48, 243, 61, 67, 189, 246, 189, 41, 7, 130, 190, 207, 59, 123, 190, 34, 95, 164, 61, 28, 8, 203, 61, 100, 109, 181, 62, 10, 248, 143, 190, 198, 182, 239, 190, 4, 248, 39, 191, 154, 16, 166, 62, 120, 203, 66, 189, 248, 180, 183, 190, 54, 25, 160, 61, 22, 14, 160, 189, 203, 178, 201, 189, 252, 239, 156, 62, 69, 174, 222, 190, 169, 137, 101, 61, 98, 121, 186, 189, 170, 21, 58, 62, 205, 106, 3, 63, 49, 94, 2, 190, 134, 228, 221, 189, 122, 188, 32, 62, 123, 149, 150, 62, 9, 143, 174, 189, 95, 17, 17, 190, 253, 83, 1, 190, 184, 206, 51, 190, 96, 61, 31, 62, 202, 118, 91, 190, 84, 133, 246, 61, 117, 69, 3, 190, 241, 234, 6, 188, 66, 144, 49, 190, 141, 45, 42, 189, 145, 28, 142, 61, 172, 245, 171, 189, 190, 188, 38, 190, 69, 18, 46, 190, 99, 193, 136, 60, 186, 171, 48, 190, 235, 209, 0, 189, 35, 106, 179, 61, 197, 71, 200, 189, 59, 176, 119, 61, 119, 153, 8, 190, 94, 50, 23, 190, 125, 25, 175, 189, 18, 55, 45, 190, 57, 70, 22, 190, 83, 240, 33, 61, 92, 44, 19, 190, 189, 121, 246, 189, 203, 226, 220, 61, 219, 3, 59, 189, 73, 221, 42, 190, 114, 15, 217, 62, 14, 89, 49, 190, 59, 18, 115, 61, 46, 231, 227, 191, 179, 16, 53, 189, 4, 63, 207, 190, 83, 239, 142, 188, 105, 26, 135, 61, 142, 178, 130, 187, 199, 48, 218, 62, 182, 63, 21, 61, 231, 124, 9, 62, 194, 183, 255, 190, 113, 32, 68, 191, 73, 34, 242, 189, 222, 204, 71, 189, 228, 76, 99, 190, 183, 106, 13, 63, 86, 24, 166, 61, 126, 100, 245, 61, 182, 5, 49, 190, 27, 38, 163, 62, 216, 31, 102, 62, 30, 137, 32, 191, 127, 7, 73, 61, 74, 97, 162, 62, 19, 13, 73, 62, 56, 13, 7, 187, 155, 169, 193, 62, 141, 129, 186, 61, 57, 185, 254, 189, 86, 67, 184, 59, 173, 140, 166, 189, 37, 236, 151, 190, 40, 138, 163, 189, 177, 139, 174, 61, 0, 238, 71, 188, 67, 38, 106, 62, 94, 121, 153, 190, 187, 232, 241, 189, 172, 14, 176, 190, 169, 212, 179, 189, 161, 148, 160, 190, 133, 41, 132, 60, 168, 165, 158, 190, 127, 158, 70, 61, 55, 72, 86, 62, 187, 214, 8, 62, 34, 43, 132, 190, 48, 174, 48, 60, 125, 45, 159, 61, 144, 2, 45, 191, 241, 210, 33, 191, 206, 108, 193, 190, 135, 125, 64, 189, 178, 117, 136, 190, 117, 145, 182, 190, 88, 225, 232, 60, 213, 140, 239, 190, 151, 217, 73, 190, 3, 195, 12, 190, 224, 76, 103, 191, 231, 252, 9, 191, 225, 108, 45, 190, 221, 26, 82, 62, 87, 33, 158, 190, 190, 26, 113, 62, 26, 96, 159, 190, 136, 180, 82, 62, 229, 113, 199, 190, 6, 105, 101, 190, 12, 204, 143, 62, 192, 45, 89, 62, 12, 103, 159, 188, 194, 197, 203, 190, 128, 208, 131, 188, 14, 196, 136, 191, 226, 226, 118, 191, 249, 254, 179, 190, 104, 212, 134, 189, 78, 72, 54, 191, 55, 95, 171, 188, 80, 142, 69, 190, 92, 68, 27, 62, 12, 134, 163, 61, 98, 229, 78, 62, 13, 38, 166, 62, 48, 32, 161, 190, 60, 227, 48, 190, 88, 160, 72, 62, 157, 131, 135, 60, 130, 118, 31, 191, 107, 162, 28, 61, 85, 65, 72, 190, 91, 127, 97, 190, 132, 251, 49, 190, 172, 231, 248, 191, 191, 237, 232, 190, 35, 161, 178, 190, 39, 11, 159, 62, 65, 178, 80, 190, 244, 236, 156, 61, 157, 33, 130, 62, 27, 114, 8, 191, 124, 208, 216, 189, 72, 182, 209, 188, 156, 25, 212, 190, 171, 117, 106, 62, 193, 47, 240, 62, 108, 105, 112, 62, 55, 135, 103, 188, 183, 157, 210, 61, 217, 216, 29, 62, 100, 19, 80, 189, 242, 226, 151, 61, 102, 181, 177, 189, 64, 104, 129, 62, 89, 185, 89, 190, 169, 84, 232, 190, 200, 234, 68, 61, 169, 190, 226, 61, 142, 176, 137, 191, 145, 190, 66, 62, 1, 212, 232, 62, 121, 210, 100, 191, 213, 102, 218, 189, 24, 46, 93, 62, 50, 247, 253, 61, 255, 130, 37, 191, 23, 122, 197, 190, 184, 50, 143, 62, 2, 58, 158, 191, 30, 238, 227, 62, 186, 109, 152, 187, 217, 143, 27, 62, 11, 93, 236, 189, 52, 176, 168, 190, 202, 85, 4, 191, 215, 82, 137, 190, 163, 99, 123, 62, 207, 126, 25, 61, 186, 247, 116, 62, 28, 154, 233, 60, 168, 237, 203, 189, 213, 85, 23, 62, 76, 62, 225, 62, 53, 249, 145, 61, 158, 158, 24, 62, 136, 42, 240, 190, 167, 132, 170, 190, 36, 100, 72, 62, 141, 34, 151, 191, 104, 125, 43, 189, 146, 189, 16, 191, 40, 8, 167, 62, 14, 138, 169, 62, 46, 41, 222, 189, 255, 188, 206, 188, 198, 203, 246, 61, 159, 183, 1, 63, 92, 189, 188, 62, 159, 136, 198, 190, 184, 189, 24, 62, 51, 156, 223, 62, 222, 47, 78, 61, 220, 102, 53, 190, 27, 127, 40, 191, 90, 74, 34, 62, 100, 62, 131, 62, 189, 160, 16, 63, 127, 95, 253, 190, 69, 131, 130, 61, 27, 115, 205, 190, 138, 185, 33, 191, 157, 48, 149, 62, 194, 245, 135, 62, 214, 73, 213, 189, 199, 86, 135, 61, 69, 37, 79, 62, 208, 29, 125, 190, 113, 0, 114, 188, 142, 116, 85, 62, 6, 189, 133, 62, 6, 135, 64, 189, 206, 255, 193, 189, 159, 4, 108, 62, 81, 75, 40, 190, 101, 103, 248, 190, 223, 63, 169, 62, 158, 83, 229, 190, 99, 157, 126, 190, 217, 165, 26, 191, 84, 42, 26, 190, 252, 159, 57, 62, 87, 98, 170, 188, 92, 184, 227, 189, 53, 152, 165, 190, 204, 42, 120, 190, 244, 253, 160, 61, 222, 182, 28, 189, 163, 233, 50, 190, 207, 235, 100, 190, 221, 125, 92, 189, 103, 99, 47, 188, 61, 197, 208, 62, 130, 62, 38, 63, 16, 155, 16, 190, 23, 226, 133, 190, 134, 69, 123, 190, 41, 127, 160, 190, 112, 99, 120, 190, 163, 168, 128, 62, 213, 247, 7, 62, 227, 209, 159, 62, 249, 210, 26, 190, 53, 184, 111, 60, 70, 34, 190, 189, 64, 124, 254, 59, 89, 213, 77, 57, 47, 97, 129, 62, 80, 136, 87, 190, 175, 45, 32, 61, 146, 65, 21, 62, 106, 184, 16, 63, 191, 27, 31, 190, 240, 196, 65, 190, 252, 79, 188, 189, 93, 89, 216, 190, 28, 73, 135, 62, 27, 120, 124, 188, 42, 155, 45, 61, 12, 168, 178, 61, 222, 17, 92, 190, 238, 55, 220, 190, 2, 33, 92, 190, 143, 202, 179, 189, 45, 13, 209, 62, 85, 235, 23, 63, 23, 109, 233, 190, 199, 33, 148, 190, 251, 243, 207, 60, 76, 41, 97, 190, 148, 97, 132, 189, 239, 29, 229, 62, 167, 204, 136, 188, 167, 35, 185, 188, 120, 70, 90, 62, 178, 152, 188, 190, 242, 39, 168, 61, 185, 135, 223, 190, 201, 184, 160, 62, 226, 60, 77, 63, 186, 197, 170, 189, 179, 49, 80, 62, 74, 150, 47, 62, 158, 28, 236, 62, 74, 87, 1, 63, 88, 136, 22, 62, 180, 207, 180, 188, 81, 141, 43, 62, 253, 132, 107, 61, 170, 164, 135, 189, 10, 188, 201, 188, 71, 219, 243, 60, 158, 3, 211, 61, 146, 64, 9, 62, 213, 4, 28, 190, 176, 63, 117, 62, 123, 56, 92, 190, 203, 99, 32, 191, 163, 86, 90, 62, 45, 136, 71, 62, 130, 208, 49, 62, 98, 248, 239, 62, 188, 150, 24, 62, 186, 124, 206, 61, 11, 249, 222, 61, 240, 4, 212, 61, 83, 80, 195, 189, 142, 243, 58, 61, 25, 154, 144, 62, 101, 67, 94, 62, 234, 230, 5, 62, 55, 136, 209, 190, 51, 17, 42, 62, 41, 94, 136, 57, 182, 246, 16, 62, 59, 209, 237, 189, 246, 113, 235, 189, 239, 120, 1, 190, 21, 0, 34, 190, 206, 239, 43, 190, 158, 10, 166, 189, 238, 233, 86, 190, 81, 65, 156, 189, 35, 228, 152, 188, 41, 180, 233, 188, 14, 65, 70, 189, 57, 227, 103, 189, 252, 237, 219, 60, 76, 89, 231, 61, 197, 253, 150, 61, 116, 202, 243, 189, 102, 70, 240, 188, 116, 202, 43, 190, 1, 236, 102, 189, 244, 27, 80, 188, 223, 170, 9, 62, 166, 37, 12, 189, 18, 211, 248, 61, 188, 159, 9, 190, 120, 249, 18, 62, 41, 185, 145, 187, 22, 139, 0, 61, 176, 245, 26, 190, 209, 25, 14, 190, 144, 152, 39, 190, 117, 87, 129, 61, 51, 65, 164, 61, 178, 103, 13, 190, 218, 252, 161, 190, 140, 201, 237, 189, 119, 113, 134, 190, 227, 220, 227, 189, 50, 82, 45, 191, 208, 1, 1, 191, 96, 114, 0, 190, 178, 149, 44, 191, 21, 33, 155, 61, 20, 247, 113, 61, 18, 199, 23, 190, 122, 148, 117, 189, 115, 247, 73, 62, 81, 221, 45, 63, 64, 46, 217, 189, 199, 106, 139, 60, 235, 185, 97, 190, 241, 34, 14, 191, 124, 226, 180, 62, 224, 151, 192, 61, 33, 48, 4, 61, 171, 79, 12, 62, 201, 235, 181, 190, 178, 5, 35, 62, 167, 189, 170, 189, 7, 198, 139, 190, 220, 248, 61, 62, 128, 252, 137, 62, 186, 245, 52, 189, 205, 95, 107, 190, 47, 99, 127, 190, 193, 253, 178, 62, 63, 145, 136, 190, 15, 99, 248, 190, 165, 154, 10, 190, 163, 183, 135, 190, 7, 101, 166, 190, 6, 122, 118, 190, 202, 199, 148, 61, 71, 146, 6, 62, 16, 55, 117, 190, 87, 32, 91, 190, 200, 69, 21, 191, 220, 27, 139, 61, 243, 43, 184, 62, 117, 207, 84, 63, 196, 72, 180, 190, 65, 138, 24, 190, 44, 47, 204, 61, 201, 221, 239, 62, 65, 220, 44, 189, 149, 225, 23, 62, 142, 224, 226, 61, 255, 81, 50, 62, 109, 171, 30, 189, 216, 202, 156, 189, 26, 25, 51, 62, 118, 110, 230, 190, 236, 41, 79, 62, 63, 184, 8, 63, 146, 64, 102, 190, 153, 135, 158, 60, 62, 83, 91, 61, 224, 142, 38, 63, 114, 115, 243, 62, 114, 150, 66, 190, 186, 130, 74, 61, 244, 126, 210, 62, 100, 233, 129, 61, 1, 123, 221, 61, 50, 153, 185, 60, 59, 18, 101, 62, 199, 191, 196, 60, 42, 55, 222, 60, 23, 13, 212, 189, 93, 169, 69, 188, 143, 198, 224, 190, 73, 196, 38, 191, 77, 207, 65, 62, 129, 181, 28, 62, 163, 75, 26, 62, 56, 145, 224, 62, 81, 130, 14, 62, 140, 168, 32, 190, 131, 113, 217, 60, 65, 216, 59, 62, 251, 69, 3, 62, 80, 59, 20, 62, 52, 189, 246, 61, 11, 6, 154, 62, 73, 176, 18, 190, 253, 83, 5, 191, 45, 227, 115, 60, 217, 143, 46, 190, 179, 180, 150, 61, 25, 59, 53, 190, 23, 34, 225, 62, 99, 51, 73, 190, 80, 144, 31, 191, 228, 87, 168, 62, 101, 58, 142, 191, 191, 198, 219, 190, 234, 150, 215, 61, 148, 137, 215, 189, 53, 27, 1, 191, 150, 8, 178, 62, 89, 195, 185, 189, 165, 3, 157, 62, 105, 195, 224, 61, 239, 14, 106, 190, 70, 28, 122, 191, 183, 121, 172, 190, 70, 117, 71, 62, 179, 2, 87, 61, 200, 94, 232, 61, 121, 169, 180, 190, 161, 208, 133, 190, 18, 117, 126, 190, 108, 208, 201, 190, 143, 36, 22, 190, 233, 214, 34, 62, 178, 107, 51, 62, 123, 254, 162, 61, 87, 53, 0, 190, 250, 136, 91, 189, 220, 25, 44, 190, 135, 200, 127, 62, 21, 155, 57, 189, 63, 25, 212, 62, 249, 192, 132, 190, 95, 171, 142, 62, 102, 129, 56, 62, 19, 156, 56, 62, 15, 62, 28, 190, 234, 18, 255, 190, 126, 47, 234, 61, 51, 215, 75, 62, 104, 103, 104, 62, 172, 97, 145, 190, 237, 13, 171, 61, 211, 146, 23, 191, 99, 36, 87, 191, 199, 240, 233, 61, 145, 59, 196, 59, 255, 87, 97, 190, 174, 196, 53, 62, 175, 225, 212, 62, 36, 110, 24, 61, 82, 253, 244, 189, 238, 116, 56, 188, 50, 101, 66, 62, 2, 92, 60, 189, 191, 192, 0, 189, 18, 94, 253, 62, 218, 161, 34, 190, 186, 51, 187, 190, 106, 11, 127, 61, 119, 144, 90, 191, 106, 184, 175, 190, 128, 196, 157, 190, 18, 106, 156, 190, 31, 161, 137, 191, 53, 89, 6, 62, 56, 10, 116, 191, 47, 58, 32, 62, 104, 115, 219, 188, 54, 88, 9, 190, 3, 30, 59, 189, 164, 86, 193, 190, 155, 107, 170, 189, 34, 119, 74, 191, 45, 173, 239, 62, 14, 205, 15, 60, 81, 88, 229, 189, 109, 101, 185, 189, 90, 158, 112, 190, 232, 7, 214, 187, 96, 60, 3, 63, 99, 41, 112, 190, 183, 65, 197, 62, 138, 240, 232, 190, 138, 55, 127, 190, 206, 150, 43, 62, 45, 229, 134, 191, 177, 136, 79, 62, 87, 108, 85, 191, 188, 225, 219, 188, 38, 7, 168, 62, 78, 40, 122, 190, 108, 194, 31, 189, 47, 7, 10, 61, 79, 156, 12, 63, 79, 83, 51, 191, 121, 182, 48, 61, 7, 97, 176, 62, 174, 141, 202, 60, 42, 75, 194, 62, 47, 221, 165, 62, 56, 57, 40, 189, 209, 6, 35, 62, 60, 237, 112, 60, 60, 64, 137, 190, 120, 22, 162, 60, 241, 21, 186, 188, 172, 56, 124, 190, 5, 181, 227, 189, 58, 145, 233, 62, 51, 219, 133, 189, 108, 16, 18, 190, 199, 158, 34, 190, 110, 132, 216, 189, 255, 87, 22, 190, 133, 188, 167, 190, 68, 234, 215, 60, 75, 236, 3, 63, 34, 20, 149, 190, 110, 42, 136, 189, 126, 114, 64, 189, 130, 212, 95, 190, 181, 181, 138, 61, 179, 34, 13, 62, 112, 224, 36, 61, 16, 43, 178, 61, 199, 234, 26, 191, 148, 192, 99, 190, 131, 186, 206, 62, 190, 144, 20, 189, 150, 38, 58, 191, 0, 119, 128, 62, 60, 201, 47, 191, 207, 135, 38, 191, 76, 155, 178, 189, 86, 115, 68, 62, 65, 94, 252, 62, 7, 231, 171, 61, 58, 207, 35, 191, 32, 42, 151, 62, 238, 34, 123, 62, 113, 31, 100, 190, 126, 24, 43, 61, 137, 18, 224, 190, 208, 219, 86, 190, 211, 26, 183, 190, 149, 226, 241, 187, 86, 134, 117, 62, 125, 184, 113, 62, 218, 237, 21, 62, 96, 228, 34, 188, 87, 19, 177, 189, 181, 163, 147, 188, 233, 191, 157, 190, 219, 27, 92, 62, 5, 32, 62, 62, 31, 19, 152, 190, 159, 158, 45, 62, 186, 204, 197, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {48, 253, 46, 62, 177, 187, 199, 189, 85, 222, 125, 62, 137, 203, 35, 62, 85, 116, 138, 62, 1, 147, 121, 62, 233, 127, 69, 61, 37, 233, 182, 61, 236, 248, 128, 61, 90, 34, 100, 62, 228, 78, 169, 62, 29, 107, 49, 62, 178, 191, 141, 62, 158, 30, 236, 189, 168, 8, 181, 189, 177, 47, 202, 185, 149, 18, 2, 62, 173, 95, 40, 62, 173, 199, 67, 62, 205, 101, 103, 59, 51, 90, 197, 59, 92, 160, 81, 61, 160, 179, 198, 188, 229, 52, 216, 189, 26, 64, 3, 190, 126, 124, 201, 61, 246, 129, 95, 62, 190, 152, 109, 190, 84, 13, 225, 61, 150, 32, 253, 61, 245, 44, 7, 62, 229, 200, 59, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {195, 63, 42, 60, 199, 105, 134, 60, 8, 89, 150, 191, 129, 255, 161, 62, 250, 204, 55, 63, 244, 33, 12, 61, 229, 65, 161, 63, 98, 48, 94, 191, 190, 67, 100, 191, 176, 127, 180, 63, 15, 58, 155, 191, 138, 101, 184, 62, 168, 191, 179, 62, 74, 139, 141, 61, 202, 219, 160, 190, 109, 21, 86, 191, 117, 253, 76, 191, 174, 142, 167, 190, 170, 121, 151, 63, 57, 137, 49, 191, 137, 159, 57, 62, 255, 204, 12, 63, 128, 235, 77, 190, 48, 226, 242, 60, 216, 228, 206, 62, 58, 134, 228, 62, 191, 0, 90, 190, 219, 86, 216, 190, 143, 214, 2, 191, 213, 77, 183, 63, 145, 8, 83, 62, 221, 47, 13, 63, 230, 141, 55, 190, 82, 124, 5, 191, 162, 79, 173, 62, 161, 28, 73, 62, 31, 218, 20, 191, 174, 30, 23, 191, 164, 254, 12, 190, 249, 82, 104, 188, 213, 35, 77, 62, 33, 162, 156, 189, 31, 135, 57, 62, 64, 85, 166, 61, 67, 150, 118, 190, 113, 72, 248, 189, 145, 119, 125, 190, 18, 140, 205, 62, 154, 214, 81, 62, 138, 197, 9, 190, 81, 109, 42, 62, 58, 72, 162, 62, 47, 194, 38, 190, 210, 54, 176, 189, 168, 45, 52, 190, 252, 141, 10, 189, 192, 64, 150, 60, 65, 133, 12, 61, 154, 54, 85, 190, 215, 9, 152, 61, 228, 252, 27, 190, 56, 3, 133, 62, 179, 222, 193, 189, 235, 188, 224, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 70, 154, 61, 128, 222, 6, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {66, 176, 95, 191, 193, 207, 181, 60, 19, 78, 228, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {106, 139, 65, 192, 148, 253, 144, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0037/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}