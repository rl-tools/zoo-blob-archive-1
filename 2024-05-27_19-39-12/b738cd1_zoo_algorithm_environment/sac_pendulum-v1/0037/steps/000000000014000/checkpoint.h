// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 161, 132, 63, 201, 12, 33, 63, 0, 5, 131, 62, 233, 181, 179, 190, 239, 254, 151, 63, 117, 177, 181, 62, 165, 137, 171, 190, 216, 98, 86, 63, 82, 40, 149, 61, 230, 78, 50, 190, 81, 227, 191, 191, 143, 250, 133, 190, 255, 152, 29, 191, 90, 36, 186, 62, 48, 213, 174, 188, 184, 57, 114, 191, 225, 193, 15, 191, 144, 190, 232, 60, 14, 224, 86, 191, 45, 20, 37, 63, 56, 3, 247, 62, 73, 27, 131, 62, 160, 52, 34, 63, 211, 230, 138, 62, 81, 136, 141, 62, 218, 21, 131, 63, 228, 4, 165, 190, 212, 76, 32, 63, 124, 54, 65, 63, 47, 185, 193, 62, 175, 216, 163, 190, 86, 135, 45, 63, 245, 34, 127, 62, 145, 213, 234, 62, 55, 99, 13, 191, 42, 213, 177, 62, 74, 22, 59, 63, 67, 223, 136, 191, 29, 69, 150, 190, 83, 26, 11, 63, 52, 127, 8, 190, 169, 254, 94, 190, 3, 182, 43, 191, 172, 85, 45, 191, 133, 163, 50, 190, 220, 237, 222, 190, 53, 49, 253, 62, 191, 76, 34, 191, 218, 105, 86, 62, 165, 237, 126, 191, 9, 124, 195, 189, 58, 47, 35, 63, 204, 182, 53, 191, 28, 17, 10, 62, 83, 216, 61, 189, 41, 106, 27, 191, 242, 205, 160, 62, 109, 170, 89, 62, 52, 154, 48, 63, 162, 13, 213, 190, 105, 149, 37, 62, 131, 86, 238, 190, 62, 88, 94, 190, 33, 9, 24, 63, 244, 214, 131, 63, 40, 13, 206, 189, 101, 106, 113, 190, 23, 67, 70, 63, 105, 245, 99, 61, 195, 89, 51, 190, 79, 247, 160, 191, 112, 160, 239, 190, 40, 235, 227, 62, 6, 199, 149, 190, 85, 195, 226, 62, 222, 0, 21, 63, 126, 0, 172, 63, 87, 209, 143, 62, 155, 252, 44, 63, 134, 150, 68, 191, 119, 0, 60, 190, 183, 108, 87, 63, 179, 11, 82, 191, 81, 179, 83, 190, 153, 240, 83, 63, 254, 75, 104, 63, 77, 133, 38, 63, 75, 97, 64, 191, 129, 53, 230, 61, 0, 1, 54, 63, 170, 109, 11, 190, 184, 161, 2, 190, 19, 254, 12, 63, 127, 108, 74, 63, 251, 96, 249, 190, 44, 201, 13, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 60, 180, 190, 187, 234, 244, 189, 77, 65, 225, 62, 67, 86, 185, 190, 183, 142, 238, 62, 3, 248, 233, 62, 164, 3, 138, 190, 47, 169, 166, 62, 205, 182, 216, 62, 123, 242, 47, 191, 123, 121, 242, 189, 36, 150, 140, 60, 142, 71, 196, 190, 158, 199, 95, 191, 79, 212, 239, 190, 18, 160, 164, 190, 49, 18, 153, 61, 45, 86, 32, 191, 29, 56, 173, 61, 177, 155, 247, 62, 49, 244, 84, 61, 184, 220, 201, 62, 25, 123, 55, 63, 169, 254, 58, 190, 31, 6, 231, 61, 82, 90, 234, 61, 30, 227, 63, 62, 172, 31, 147, 190, 7, 107, 179, 190, 19, 49, 222, 190, 127, 144, 227, 188, 121, 91, 67, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 172, 163, 61, 47, 92, 159, 61, 13, 137, 45, 62, 246, 108, 207, 61, 248, 226, 151, 61, 161, 59, 167, 58, 73, 153, 49, 61, 254, 22, 27, 62, 216, 62, 162, 61, 84, 216, 64, 190, 132, 42, 252, 189, 170, 42, 6, 190, 65, 244, 172, 189, 21, 34, 188, 190, 101, 37, 119, 60, 120, 52, 201, 189, 171, 70, 99, 62, 38, 30, 30, 190, 42, 239, 51, 190, 119, 20, 32, 188, 172, 201, 252, 60, 51, 36, 11, 62, 161, 215, 201, 61, 237, 203, 219, 61, 128, 166, 124, 189, 99, 189, 156, 189, 191, 40, 158, 62, 1, 89, 68, 188, 18, 144, 210, 60, 206, 87, 188, 188, 133, 191, 5, 190, 92, 159, 4, 190, 31, 88, 84, 62, 159, 202, 128, 191, 45, 44, 134, 190, 88, 171, 198, 190, 0, 137, 204, 191, 176, 103, 6, 190, 226, 148, 156, 190, 37, 46, 0, 62, 78, 70, 158, 61, 74, 98, 63, 191, 67, 224, 12, 191, 87, 138, 192, 61, 97, 69, 12, 189, 156, 92, 30, 190, 10, 79, 77, 61, 222, 238, 151, 190, 177, 95, 64, 62, 231, 28, 244, 189, 196, 132, 81, 190, 242, 212, 20, 190, 182, 254, 25, 190, 97, 173, 58, 61, 216, 191, 1, 62, 176, 71, 235, 190, 188, 148, 91, 62, 94, 52, 206, 188, 134, 229, 221, 61, 129, 118, 85, 62, 183, 57, 64, 62, 175, 17, 134, 190, 130, 235, 138, 61, 50, 55, 68, 191, 156, 153, 82, 191, 185, 229, 39, 190, 129, 27, 221, 190, 188, 171, 225, 62, 11, 161, 235, 189, 137, 180, 78, 62, 98, 95, 4, 62, 12, 199, 2, 191, 174, 206, 143, 190, 73, 199, 251, 190, 63, 95, 189, 188, 6, 164, 0, 62, 115, 194, 116, 62, 218, 127, 161, 61, 22, 56, 185, 188, 122, 207, 27, 190, 91, 251, 125, 62, 254, 212, 74, 190, 123, 113, 147, 62, 84, 216, 31, 191, 22, 249, 237, 190, 216, 152, 222, 190, 123, 66, 251, 189, 28, 13, 21, 191, 88, 128, 11, 62, 167, 97, 12, 191, 159, 41, 48, 62, 172, 108, 121, 62, 247, 76, 153, 191, 116, 196, 87, 190, 205, 33, 159, 60, 185, 230, 219, 190, 190, 63, 180, 62, 205, 113, 142, 62, 80, 153, 187, 62, 184, 99, 254, 189, 81, 229, 62, 62, 230, 209, 69, 188, 139, 106, 181, 189, 222, 101, 12, 62, 4, 33, 132, 189, 0, 28, 142, 62, 171, 248, 136, 62, 146, 209, 31, 190, 59, 171, 106, 190, 199, 8, 192, 190, 15, 156, 189, 61, 9, 172, 19, 190, 162, 237, 27, 191, 38, 152, 149, 191, 97, 29, 62, 189, 153, 220, 73, 62, 45, 138, 182, 60, 246, 162, 31, 62, 210, 220, 160, 57, 189, 159, 246, 190, 10, 56, 25, 190, 212, 244, 164, 62, 221, 48, 162, 190, 74, 24, 154, 60, 208, 116, 153, 62, 137, 26, 252, 61, 49, 121, 51, 61, 87, 67, 252, 190, 70, 213, 146, 61, 32, 108, 37, 191, 226, 146, 91, 191, 241, 182, 12, 191, 105, 169, 167, 190, 22, 208, 143, 190, 225, 246, 238, 190, 27, 54, 151, 189, 191, 55, 241, 188, 188, 112, 144, 190, 10, 71, 57, 191, 211, 241, 98, 62, 191, 197, 154, 190, 244, 15, 143, 189, 161, 95, 146, 62, 168, 165, 60, 59, 217, 199, 148, 62, 208, 6, 210, 61, 64, 253, 63, 62, 72, 123, 104, 190, 236, 36, 95, 190, 224, 160, 11, 190, 169, 166, 204, 189, 215, 48, 93, 190, 130, 6, 189, 188, 21, 227, 145, 190, 230, 8, 60, 61, 117, 247, 61, 62, 21, 41, 2, 62, 95, 193, 150, 189, 42, 189, 56, 62, 77, 91, 51, 190, 71, 161, 205, 62, 104, 239, 186, 190, 64, 208, 160, 60, 198, 67, 57, 191, 214, 139, 13, 57, 171, 239, 255, 188, 106, 209, 120, 61, 145, 192, 170, 188, 67, 211, 27, 62, 136, 255, 31, 191, 1, 193, 145, 190, 175, 26, 143, 62, 181, 17, 170, 190, 148, 125, 74, 190, 235, 195, 120, 62, 8, 35, 167, 59, 238, 89, 36, 60, 181, 187, 155, 62, 26, 167, 5, 190, 60, 44, 10, 62, 55, 34, 88, 61, 121, 150, 112, 62, 88, 180, 27, 62, 174, 67, 91, 190, 183, 215, 1, 62, 205, 130, 252, 189, 40, 24, 100, 62, 209, 222, 104, 190, 171, 228, 150, 190, 91, 67, 100, 61, 13, 164, 153, 60, 135, 111, 7, 190, 120, 54, 79, 189, 202, 115, 31, 61, 191, 181, 93, 191, 152, 144, 114, 62, 70, 229, 162, 191, 206, 92, 202, 61, 177, 215, 98, 190, 126, 240, 185, 191, 164, 251, 217, 190, 97, 245, 35, 61, 84, 196, 4, 62, 151, 104, 50, 190, 112, 201, 114, 62, 153, 55, 173, 61, 149, 136, 118, 190, 79, 60, 8, 191, 84, 94, 121, 62, 33, 107, 137, 191, 161, 148, 173, 62, 102, 153, 137, 190, 117, 179, 145, 187, 242, 180, 45, 191, 237, 11, 21, 191, 73, 16, 188, 188, 86, 168, 192, 190, 118, 243, 155, 189, 204, 1, 135, 189, 138, 166, 80, 62, 223, 39, 155, 61, 75, 184, 115, 190, 221, 174, 23, 190, 151, 244, 23, 62, 95, 108, 254, 189, 205, 8, 169, 189, 8, 39, 179, 190, 239, 182, 119, 62, 58, 131, 76, 188, 191, 130, 143, 62, 118, 59, 58, 191, 118, 124, 38, 61, 190, 229, 189, 190, 49, 227, 88, 190, 129, 156, 166, 190, 185, 115, 35, 191, 106, 58, 52, 189, 210, 217, 167, 190, 230, 158, 14, 62, 42, 139, 29, 62, 65, 114, 2, 189, 134, 174, 241, 190, 138, 13, 156, 189, 17, 145, 227, 190, 239, 158, 89, 61, 116, 222, 44, 191, 172, 223, 176, 190, 127, 23, 39, 62, 229, 83, 28, 191, 85, 253, 108, 190, 110, 189, 84, 62, 30, 163, 140, 190, 101, 113, 85, 190, 133, 10, 64, 191, 14, 63, 20, 191, 54, 70, 32, 189, 168, 58, 181, 191, 122, 162, 145, 190, 248, 131, 7, 191, 235, 64, 45, 62, 254, 133, 55, 191, 159, 72, 139, 62, 187, 164, 145, 61, 134, 87, 226, 190, 92, 197, 206, 61, 244, 110, 1, 191, 120, 144, 135, 189, 52, 102, 10, 62, 35, 182, 135, 62, 97, 91, 183, 189, 82, 0, 156, 190, 234, 178, 33, 190, 110, 35, 183, 62, 87, 3, 135, 190, 71, 220, 156, 62, 69, 57, 8, 62, 4, 138, 80, 60, 203, 9, 85, 61, 73, 217, 4, 191, 135, 119, 123, 61, 9, 105, 91, 188, 193, 75, 194, 191, 231, 227, 103, 61, 144, 16, 215, 62, 225, 32, 140, 191, 189, 168, 14, 60, 127, 240, 65, 62, 110, 120, 143, 62, 178, 128, 234, 62, 196, 223, 201, 190, 104, 27, 141, 62, 213, 55, 160, 190, 75, 50, 224, 62, 198, 150, 55, 62, 96, 168, 62, 190, 88, 229, 133, 190, 48, 207, 64, 190, 106, 170, 62, 62, 209, 87, 33, 191, 46, 160, 109, 190, 227, 74, 5, 191, 213, 73, 133, 188, 123, 114, 248, 188, 129, 15, 197, 190, 98, 144, 67, 191, 154, 246, 7, 190, 223, 209, 57, 191, 96, 127, 169, 62, 254, 72, 76, 191, 161, 56, 253, 60, 245, 77, 50, 62, 151, 56, 173, 191, 80, 117, 7, 190, 66, 106, 86, 188, 26, 144, 128, 191, 121, 130, 76, 191, 130, 123, 139, 62, 4, 142, 26, 189, 62, 106, 63, 190, 94, 184, 23, 62, 104, 200, 242, 61, 4, 27, 62, 62, 48, 252, 192, 61, 102, 81, 147, 62, 133, 157, 182, 62, 134, 52, 155, 62, 75, 15, 248, 190, 208, 140, 61, 61, 95, 206, 109, 61, 13, 219, 78, 191, 252, 203, 133, 62, 113, 225, 70, 190, 113, 10, 203, 190, 1, 93, 19, 191, 170, 74, 178, 62, 104, 12, 111, 62, 220, 24, 230, 61, 89, 229, 53, 62, 111, 104, 92, 62, 121, 43, 151, 190, 201, 210, 99, 60, 246, 166, 73, 62, 100, 105, 193, 62, 35, 88, 19, 190, 113, 183, 40, 191, 109, 203, 4, 63, 133, 190, 179, 189, 38, 102, 58, 191, 2, 43, 142, 190, 164, 26, 14, 191, 228, 143, 77, 191, 17, 100, 115, 190, 208, 108, 163, 190, 216, 226, 149, 189, 122, 61, 75, 62, 6, 206, 220, 189, 130, 121, 171, 62, 23, 191, 158, 62, 58, 131, 163, 60, 106, 83, 175, 60, 183, 241, 149, 190, 211, 247, 185, 190, 27, 218, 239, 189, 8, 83, 38, 62, 251, 138, 186, 62, 137, 210, 82, 190, 74, 3, 35, 190, 31, 217, 62, 191, 13, 183, 100, 62, 211, 96, 130, 190, 225, 94, 65, 189, 71, 171, 253, 60, 215, 145, 11, 190, 81, 230, 101, 187, 237, 68, 34, 62, 151, 162, 118, 190, 200, 5, 38, 189, 211, 200, 149, 190, 173, 41, 146, 62, 125, 124, 135, 62, 156, 228, 124, 189, 11, 82, 217, 61, 39, 106, 148, 187, 204, 214, 71, 62, 30, 158, 98, 189, 230, 249, 145, 61, 68, 218, 88, 62, 139, 135, 236, 60, 196, 164, 207, 61, 110, 225, 83, 62, 121, 181, 11, 62, 169, 192, 4, 190, 128, 9, 155, 190, 99, 100, 166, 189, 206, 39, 166, 61, 246, 79, 2, 62, 32, 149, 176, 62, 122, 9, 183, 189, 6, 173, 196, 190, 138, 145, 0, 191, 95, 189, 152, 62, 202, 144, 60, 189, 208, 148, 170, 190, 24, 239, 120, 61, 199, 73, 216, 189, 67, 95, 8, 190, 168, 97, 134, 62, 96, 162, 186, 190, 73, 193, 169, 61, 132, 10, 182, 189, 56, 137, 47, 62, 95, 113, 0, 63, 228, 243, 160, 189, 46, 153, 205, 189, 182, 120, 35, 62, 133, 116, 30, 62, 188, 169, 170, 189, 60, 36, 5, 190, 9, 46, 2, 190, 114, 28, 49, 190, 194, 189, 30, 62, 23, 187, 66, 190, 134, 232, 17, 62, 131, 43, 227, 189, 241, 234, 6, 188, 28, 134, 39, 190, 182, 14, 3, 189, 99, 63, 194, 61, 172, 245, 171, 189, 190, 188, 38, 190, 69, 18, 46, 190, 99, 193, 136, 60, 16, 107, 29, 190, 76, 18, 40, 188, 215, 210, 227, 61, 197, 71, 200, 189, 59, 176, 119, 61, 119, 153, 8, 190, 35, 18, 23, 190, 125, 25, 175, 189, 61, 117, 20, 190, 231, 13, 17, 190, 46, 76, 34, 61, 92, 44, 19, 190, 13, 98, 192, 189, 228, 217, 2, 62, 225, 35, 189, 188, 73, 221, 42, 190, 188, 41, 217, 62, 64, 0, 69, 190, 139, 83, 147, 188, 157, 59, 192, 191, 172, 0, 8, 189, 121, 165, 190, 190, 93, 76, 137, 189, 228, 32, 133, 61, 183, 6, 149, 187, 247, 146, 122, 62, 19, 5, 67, 187, 99, 164, 244, 61, 248, 116, 224, 190, 95, 57, 60, 191, 173, 21, 165, 189, 254, 112, 73, 190, 192, 177, 28, 190, 244, 61, 12, 63, 93, 110, 40, 61, 241, 183, 189, 61, 177, 130, 11, 190, 242, 199, 162, 62, 65, 69, 92, 62, 159, 59, 28, 191, 147, 232, 29, 61, 3, 37, 154, 62, 83, 54, 97, 62, 107, 221, 13, 61, 59, 139, 165, 62, 42, 149, 127, 61, 33, 171, 24, 190, 104, 39, 167, 60, 173, 140, 166, 189, 37, 236, 151, 190, 40, 138, 163, 189, 177, 139, 174, 61, 0, 238, 71, 188, 67, 38, 106, 62, 94, 121, 153, 190, 187, 232, 241, 189, 172, 14, 176, 190, 169, 212, 179, 189, 161, 148, 160, 190, 133, 41, 132, 60, 168, 165, 158, 190, 127, 158, 70, 61, 55, 72, 86, 62, 187, 214, 8, 62, 34, 43, 132, 190, 48, 174, 48, 60, 125, 45, 159, 61, 144, 2, 45, 191, 241, 210, 33, 191, 206, 108, 193, 190, 135, 125, 64, 189, 178, 117, 136, 190, 117, 145, 182, 190, 88, 225, 232, 60, 213, 140, 239, 190, 151, 217, 73, 190, 3, 195, 12, 190, 224, 76, 103, 191, 231, 252, 9, 191, 225, 108, 45, 190, 232, 3, 178, 61, 60, 95, 73, 190, 60, 77, 93, 62, 113, 82, 189, 190, 193, 81, 89, 62, 246, 70, 194, 190, 109, 60, 225, 189, 88, 3, 56, 62, 20, 186, 44, 62, 94, 174, 10, 190, 148, 60, 150, 190, 208, 35, 17, 188, 243, 236, 125, 191, 65, 46, 53, 191, 120, 101, 208, 190, 200, 178, 113, 189, 253, 154, 255, 190, 18, 35, 55, 190, 167, 100, 194, 190, 70, 107, 209, 61, 167, 227, 156, 61, 161, 178, 12, 62, 140, 71, 145, 62, 40, 184, 108, 190, 174, 236, 31, 190, 193, 121, 158, 61, 71, 69, 97, 189, 214, 238, 42, 191, 159, 88, 155, 188, 116, 66, 34, 189, 3, 230, 178, 189, 33, 190, 31, 190, 131, 120, 194, 191, 136, 205, 69, 190, 115, 64, 157, 190, 179, 122, 120, 62, 249, 59, 55, 190, 86, 204, 113, 61, 123, 113, 126, 62, 49, 37, 204, 190, 9, 181, 242, 189, 190, 87, 248, 60, 71, 234, 64, 190, 2, 89, 54, 62, 137, 74, 197, 62, 33, 15, 7, 62, 46, 54, 116, 188, 59, 121, 184, 61, 37, 143, 156, 61, 3, 28, 52, 190, 27, 67, 195, 60, 155, 91, 213, 189, 13, 172, 94, 62, 190, 59, 35, 190, 111, 8, 198, 190, 225, 165, 117, 60, 198, 26, 108, 61, 157, 69, 97, 191, 19, 140, 3, 62, 118, 45, 183, 62, 217, 43, 66, 191, 200, 122, 208, 189, 8, 226, 57, 62, 126, 42, 173, 61, 208, 153, 24, 191, 78, 103, 156, 190, 5, 16, 122, 62, 117, 21, 131, 191, 137, 200, 187, 62, 108, 55, 126, 189, 213, 37, 43, 62, 78, 84, 212, 189, 249, 175, 153, 190, 151, 230, 205, 190, 132, 143, 97, 190, 253, 106, 111, 62, 50, 201, 200, 61, 7, 177, 87, 62, 174, 95, 241, 188, 37, 92, 132, 189, 12, 41, 240, 61, 239, 55, 218, 62, 160, 178, 27, 61, 152, 86, 40, 62, 150, 236, 208, 190, 179, 244, 131, 190, 181, 29, 94, 62, 171, 190, 126, 191, 206, 141, 83, 189, 162, 28, 221, 190, 52, 37, 165, 62, 40, 235, 169, 62, 80, 21, 209, 189, 218, 172, 52, 189, 53, 144, 218, 61, 230, 202, 201, 62, 126, 159, 183, 62, 140, 60, 201, 190, 14, 129, 147, 61, 149, 189, 143, 62, 58, 181, 109, 60, 133, 27, 254, 189, 236, 8, 43, 191, 69, 178, 23, 62, 46, 8, 136, 62, 75, 146, 193, 62, 66, 138, 3, 191, 78, 119, 156, 61, 121, 155, 180, 190, 33, 99, 209, 190, 133, 148, 110, 62, 194, 83, 124, 62, 161, 50, 29, 189, 34, 214, 35, 62, 128, 184, 114, 62, 133, 166, 128, 190, 193, 5, 158, 60, 245, 183, 80, 62, 191, 163, 120, 62, 71, 35, 208, 188, 249, 252, 204, 189, 204, 235, 80, 62, 176, 102, 29, 190, 49, 16, 237, 190, 31, 106, 149, 62, 201, 115, 160, 190, 21, 47, 23, 190, 167, 53, 3, 191, 202, 127, 254, 189, 50, 81, 66, 62, 162, 14, 44, 61, 1, 167, 180, 189, 138, 205, 163, 190, 117, 245, 83, 190, 118, 128, 181, 61, 33, 181, 136, 187, 123, 86, 68, 190, 214, 4, 234, 187, 182, 15, 58, 189, 44, 40, 63, 61, 134, 212, 198, 62, 182, 2, 9, 63, 52, 229, 31, 190, 3, 14, 145, 190, 191, 76, 98, 190, 58, 47, 90, 190, 82, 172, 204, 189, 24, 61, 128, 62, 22, 149, 191, 61, 66, 9, 158, 62, 207, 244, 14, 190, 240, 109, 5, 189, 229, 225, 36, 189, 19, 54, 63, 61, 247, 220, 110, 60, 25, 129, 133, 62, 116, 216, 4, 190, 225, 17, 62, 61, 208, 162, 63, 62, 62, 110, 240, 62, 9, 77, 19, 190, 161, 34, 255, 189, 194, 120, 28, 188, 76, 103, 164, 190, 182, 172, 129, 62, 71, 192, 178, 189, 244, 247, 35, 61, 46, 16, 217, 61, 142, 12, 111, 190, 98, 112, 118, 190, 27, 66, 54, 190, 0, 188, 194, 189, 101, 32, 202, 62, 4, 90, 236, 62, 36, 177, 219, 190, 12, 169, 150, 190, 210, 76, 36, 60, 132, 23, 114, 190, 119, 40, 175, 189, 100, 186, 227, 62, 156, 208, 33, 189, 165, 10, 201, 188, 8, 191, 100, 62, 79, 81, 190, 190, 138, 67, 183, 61, 40, 166, 201, 190, 126, 234, 159, 62, 156, 238, 75, 63, 117, 148, 50, 189, 84, 119, 34, 62, 97, 79, 6, 62, 197, 144, 196, 62, 249, 145, 3, 63, 199, 200, 13, 62, 148, 69, 98, 189, 143, 45, 242, 61, 224, 194, 154, 61, 215, 235, 137, 189, 204, 151, 142, 189, 199, 121, 22, 61, 140, 70, 21, 62, 217, 57, 56, 189, 239, 119, 50, 190, 95, 81, 97, 62, 190, 167, 35, 190, 211, 223, 230, 190, 211, 191, 53, 62, 246, 15, 51, 62, 252, 107, 91, 62, 4, 135, 222, 62, 33, 233, 195, 61, 82, 124, 232, 61, 184, 198, 22, 62, 12, 247, 12, 62, 219, 144, 154, 189, 181, 175, 57, 61, 50, 151, 136, 62, 138, 244, 88, 62, 36, 230, 36, 62, 198, 127, 190, 190, 153, 112, 247, 61, 149, 147, 249, 188, 184, 92, 227, 61, 110, 229, 42, 189, 246, 113, 235, 189, 239, 120, 1, 190, 21, 0, 34, 190, 206, 239, 43, 190, 158, 10, 166, 189, 238, 233, 86, 190, 81, 65, 156, 189, 35, 228, 152, 188, 41, 180, 233, 188, 14, 65, 70, 189, 57, 227, 103, 189, 252, 237, 219, 60, 76, 89, 231, 61, 197, 253, 150, 61, 116, 202, 243, 189, 102, 70, 240, 188, 116, 202, 43, 190, 1, 236, 102, 189, 244, 27, 80, 188, 223, 170, 9, 62, 166, 37, 12, 189, 18, 211, 248, 61, 188, 159, 9, 190, 120, 249, 18, 62, 41, 185, 145, 187, 22, 139, 0, 61, 176, 245, 26, 190, 209, 25, 14, 190, 144, 152, 39, 190, 117, 87, 129, 61, 51, 65, 164, 61, 178, 103, 13, 190, 110, 237, 97, 190, 140, 201, 237, 189, 33, 237, 129, 190, 90, 16, 116, 189, 91, 109, 52, 191, 101, 15, 1, 191, 96, 114, 0, 190, 122, 37, 1, 191, 189, 208, 137, 61, 20, 247, 113, 61, 18, 199, 23, 190, 197, 61, 184, 188, 249, 103, 95, 62, 2, 241, 10, 63, 107, 121, 187, 189, 203, 66, 104, 188, 225, 33, 49, 190, 168, 195, 221, 190, 192, 103, 210, 62, 16, 224, 183, 61, 89, 214, 239, 60, 225, 86, 2, 62, 74, 32, 185, 190, 4, 101, 5, 62, 19, 226, 166, 189, 32, 85, 30, 190, 119, 76, 102, 62, 132, 130, 166, 62, 79, 111, 83, 190, 173, 18, 81, 190, 22, 237, 30, 190, 238, 68, 171, 62, 186, 116, 140, 190, 98, 232, 196, 190, 59, 246, 34, 189, 38, 41, 55, 190, 228, 222, 151, 190, 125, 158, 92, 190, 80, 52, 25, 62, 80, 124, 11, 62, 13, 59, 131, 190, 230, 122, 14, 190, 63, 48, 252, 190, 158, 64, 129, 61, 64, 21, 176, 62, 43, 58, 49, 63, 66, 135, 186, 190, 12, 47, 27, 190, 22, 232, 183, 61, 120, 191, 218, 62, 197, 119, 8, 189, 185, 40, 23, 62, 125, 83, 171, 61, 125, 169, 46, 62, 58, 162, 207, 188, 112, 56, 203, 189, 231, 137, 59, 62, 19, 33, 220, 190, 135, 160, 72, 62, 168, 151, 6, 63, 140, 249, 80, 190, 71, 78, 23, 188, 180, 89, 165, 60, 251, 115, 17, 63, 161, 248, 245, 62, 179, 104, 56, 190, 230, 166, 11, 187, 179, 149, 194, 62, 100, 194, 118, 61, 73, 251, 236, 61, 53, 80, 148, 187, 175, 231, 106, 62, 133, 218, 52, 61, 94, 56, 20, 190, 54, 22, 217, 189, 252, 107, 199, 188, 21, 29, 187, 190, 40, 27, 229, 190, 161, 88, 59, 62, 131, 49, 216, 61, 250, 88, 90, 62, 213, 123, 214, 62, 23, 240, 205, 61, 113, 253, 39, 190, 242, 233, 126, 61, 97, 72, 78, 62, 157, 98, 5, 62, 241, 14, 26, 62, 133, 22, 225, 61, 226, 157, 149, 62, 225, 154, 225, 189, 128, 32, 243, 190, 36, 7, 247, 188, 239, 48, 64, 190, 190, 175, 84, 61, 168, 231, 240, 189, 253, 198, 211, 62, 225, 141, 41, 190, 120, 113, 1, 191, 227, 51, 163, 62, 207, 108, 103, 191, 29, 15, 182, 190, 73, 26, 250, 61, 74, 193, 168, 189, 73, 175, 246, 190, 7, 101, 139, 62, 248, 121, 64, 189, 153, 203, 163, 62, 255, 214, 195, 61, 239, 14, 106, 190, 146, 91, 50, 191, 87, 175, 161, 190, 223, 218, 98, 62, 87, 11, 15, 61, 213, 205, 24, 62, 137, 202, 155, 190, 81, 245, 119, 190, 23, 34, 145, 190, 82, 87, 185, 190, 68, 226, 181, 189, 181, 106, 49, 62, 131, 158, 9, 62, 197, 80, 1, 62, 42, 9, 189, 189, 169, 233, 41, 189, 255, 12, 9, 190, 37, 147, 137, 62, 251, 122, 143, 189, 25, 251, 212, 62, 59, 52, 84, 190, 211, 196, 75, 62, 234, 48, 166, 61, 128, 178, 12, 62, 250, 207, 39, 190, 243, 94, 231, 190, 118, 122, 223, 61, 242, 205, 101, 62, 66, 67, 6, 62, 114, 148, 122, 190, 124, 211, 163, 61, 75, 70, 6, 191, 183, 109, 26, 191, 23, 110, 154, 61, 169, 32, 146, 188, 20, 211, 50, 190, 235, 58, 87, 62, 206, 236, 186, 62, 98, 127, 59, 61, 105, 23, 142, 189, 152, 198, 61, 187, 137, 230, 56, 62, 246, 104, 196, 188, 79, 7, 52, 189, 9, 43, 246, 62, 41, 148, 15, 190, 156, 56, 171, 190, 165, 20, 216, 60, 255, 249, 42, 191, 252, 237, 141, 190, 237, 200, 85, 190, 209, 141, 168, 190, 49, 222, 109, 191, 108, 4, 9, 62, 184, 122, 54, 191, 170, 244, 91, 62, 251, 195, 141, 61, 90, 87, 103, 187, 41, 200, 74, 189, 80, 251, 164, 190, 1, 96, 219, 189, 228, 195, 42, 191, 255, 29, 245, 62, 218, 245, 70, 61, 237, 16, 147, 189, 102, 164, 40, 190, 3, 168, 48, 190, 172, 76, 235, 58, 169, 8, 248, 62, 240, 204, 101, 190, 184, 176, 209, 62, 50, 154, 210, 190, 41, 36, 12, 190, 8, 120, 131, 62, 131, 124, 100, 191, 206, 29, 88, 62, 75, 76, 74, 191, 166, 25, 99, 189, 108, 127, 157, 62, 197, 74, 131, 190, 254, 230, 9, 58, 180, 166, 115, 61, 237, 128, 242, 62, 141, 175, 19, 191, 6, 101, 111, 61, 237, 255, 133, 62, 116, 37, 205, 61, 163, 160, 146, 62, 66, 83, 169, 62, 50, 1, 19, 60, 242, 49, 56, 62, 168, 176, 132, 189, 41, 49, 4, 190, 9, 164, 63, 61, 96, 219, 80, 61, 25, 73, 93, 190, 225, 254, 115, 189, 238, 86, 9, 63, 253, 204, 57, 189, 169, 238, 44, 190, 63, 154, 248, 189, 11, 98, 118, 189, 102, 112, 0, 189, 31, 203, 68, 190, 253, 211, 186, 189, 66, 211, 232, 62, 73, 166, 41, 190, 54, 129, 139, 188, 170, 142, 41, 188, 42, 126, 60, 190, 104, 226, 164, 61, 121, 63, 84, 62, 245, 3, 220, 61, 173, 195, 14, 62, 12, 58, 5, 191, 180, 177, 147, 190, 250, 163, 151, 62, 205, 35, 43, 189, 117, 157, 88, 191, 221, 142, 105, 62, 209, 236, 36, 191, 249, 212, 38, 191, 232, 171, 173, 189, 137, 216, 27, 62, 204, 95, 189, 62, 28, 224, 207, 60, 189, 219, 29, 191, 32, 31, 245, 61, 233, 248, 155, 60, 225, 244, 147, 190, 223, 212, 59, 188, 36, 201, 161, 190, 156, 239, 67, 61, 176, 48, 172, 189, 220, 143, 37, 189, 77, 202, 63, 62, 110, 98, 83, 62, 135, 194, 3, 62, 168, 115, 4, 190, 96, 51, 128, 190, 102, 249, 56, 189, 234, 86, 185, 190, 139, 71, 7, 62, 28, 113, 253, 61, 153, 108, 197, 190, 124, 240, 130, 61, 73, 222, 252, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 246, 114, 62, 45, 129, 114, 189, 215, 92, 72, 62, 120, 104, 13, 62, 96, 157, 122, 62, 238, 121, 111, 62, 249, 14, 138, 61, 175, 241, 190, 61, 155, 122, 41, 61, 63, 9, 89, 62, 208, 231, 156, 62, 42, 116, 19, 62, 52, 64, 129, 62, 1, 0, 184, 189, 206, 158, 146, 189, 177, 47, 202, 185, 44, 10, 63, 61, 41, 194, 240, 61, 34, 97, 42, 62, 161, 200, 186, 59, 207, 209, 226, 60, 19, 18, 74, 61, 152, 66, 0, 58, 229, 52, 216, 189, 101, 196, 195, 189, 178, 87, 203, 61, 97, 160, 117, 62, 117, 193, 68, 190, 123, 224, 237, 61, 206, 9, 11, 62, 149, 187, 210, 61, 153, 209, 131, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 39, 32, 188, 195, 190, 75, 61, 126, 89, 121, 191, 201, 228, 183, 62, 27, 124, 39, 63, 200, 90, 178, 60, 114, 199, 132, 63, 37, 87, 97, 191, 159, 13, 68, 191, 86, 127, 163, 63, 21, 117, 116, 191, 116, 53, 169, 62, 60, 55, 179, 62, 61, 210, 165, 61, 138, 96, 160, 190, 109, 21, 86, 191, 54, 204, 25, 191, 56, 150, 86, 190, 250, 242, 105, 63, 212, 155, 31, 191, 64, 149, 52, 62, 158, 88, 11, 63, 158, 60, 88, 190, 48, 226, 242, 60, 91, 123, 211, 62, 124, 198, 228, 62, 70, 102, 106, 190, 152, 86, 206, 190, 145, 63, 244, 190, 80, 75, 164, 63, 98, 87, 40, 62, 158, 29, 10, 63, 139, 106, 65, 190, 80, 24, 5, 191, 251, 230, 191, 62, 60, 173, 132, 62, 79, 89, 237, 190, 196, 46, 25, 191, 8, 144, 31, 190, 83, 2, 175, 188, 94, 43, 124, 62, 96, 25, 35, 190, 93, 107, 22, 62, 182, 111, 7, 62, 248, 100, 76, 190, 82, 31, 246, 189, 141, 176, 81, 190, 18, 140, 205, 62, 64, 168, 51, 62, 29, 217, 209, 189, 21, 117, 75, 62, 208, 200, 137, 62, 56, 255, 254, 189, 169, 208, 95, 189, 77, 91, 0, 190, 252, 141, 10, 189, 10, 230, 80, 187, 196, 63, 160, 61, 168, 61, 42, 190, 24, 121, 231, 61, 217, 180, 0, 190, 4, 55, 11, 62, 81, 26, 198, 189, 38, 208, 132, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {174, 78, 129, 61, 46, 168, 236, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {220, 221, 12, 191, 107, 249, 76, 191, 187, 156, 215, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {189, 98, 1, 192, 96, 134, 180, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0037/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}