// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 239, 131, 63, 71, 149, 27, 63, 96, 110, 118, 62, 227, 40, 180, 190, 99, 112, 146, 63, 44, 14, 186, 62, 228, 156, 163, 190, 88, 158, 76, 63, 46, 36, 180, 61, 15, 122, 173, 189, 198, 201, 186, 191, 222, 43, 134, 190, 51, 79, 10, 191, 58, 182, 184, 62, 162, 202, 98, 60, 152, 24, 90, 191, 105, 91, 11, 191, 213, 98, 237, 60, 51, 22, 80, 191, 30, 177, 61, 63, 48, 60, 255, 62, 58, 83, 131, 62, 203, 187, 23, 63, 173, 29, 145, 62, 162, 223, 145, 62, 167, 15, 118, 63, 220, 41, 171, 190, 101, 250, 24, 63, 223, 46, 61, 63, 164, 59, 191, 62, 237, 82, 148, 190, 87, 103, 41, 63, 221, 189, 118, 62, 169, 22, 235, 62, 176, 127, 3, 191, 60, 4, 179, 62, 166, 118, 59, 63, 233, 147, 133, 191, 127, 172, 149, 190, 191, 77, 1, 63, 153, 237, 11, 190, 117, 6, 82, 190, 229, 2, 36, 191, 236, 189, 41, 191, 137, 92, 79, 190, 42, 61, 237, 190, 78, 107, 239, 62, 128, 116, 35, 191, 3, 25, 111, 62, 253, 8, 115, 191, 51, 169, 183, 189, 59, 223, 34, 63, 180, 7, 56, 191, 219, 155, 199, 61, 128, 210, 207, 188, 75, 176, 26, 191, 220, 251, 156, 62, 20, 51, 85, 62, 93, 97, 65, 63, 188, 168, 217, 190, 150, 42, 37, 62, 246, 255, 226, 190, 35, 204, 149, 190, 47, 139, 29, 63, 30, 142, 133, 63, 125, 207, 220, 189, 109, 2, 45, 190, 213, 156, 62, 63, 247, 64, 76, 61, 169, 185, 217, 189, 160, 128, 150, 191, 207, 20, 3, 191, 219, 167, 229, 62, 32, 194, 93, 190, 143, 245, 228, 62, 222, 56, 22, 63, 242, 142, 167, 63, 131, 206, 133, 62, 139, 157, 47, 63, 77, 222, 59, 191, 224, 145, 57, 190, 227, 170, 87, 63, 237, 16, 70, 191, 246, 183, 91, 190, 9, 26, 76, 63, 247, 147, 115, 63, 242, 176, 33, 63, 104, 70, 61, 191, 116, 61, 105, 62, 168, 116, 55, 63, 4, 246, 250, 189, 205, 189, 136, 189, 42, 27, 19, 63, 90, 209, 73, 63, 138, 97, 231, 190, 27, 108, 14, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {24, 136, 185, 190, 222, 143, 160, 189, 181, 157, 217, 62, 13, 115, 174, 190, 103, 252, 228, 62, 50, 165, 254, 62, 76, 89, 152, 190, 41, 71, 187, 62, 83, 70, 223, 62, 5, 125, 46, 191, 37, 223, 192, 189, 145, 97, 51, 61, 120, 139, 189, 190, 39, 92, 95, 191, 138, 183, 226, 190, 150, 117, 165, 190, 108, 217, 201, 61, 176, 161, 25, 191, 140, 187, 228, 61, 174, 179, 247, 62, 202, 88, 92, 61, 240, 15, 209, 62, 240, 105, 61, 63, 177, 57, 104, 190, 208, 5, 250, 61, 210, 179, 232, 61, 39, 214, 90, 62, 61, 195, 145, 190, 217, 148, 183, 190, 172, 15, 214, 190, 9, 178, 31, 188, 95, 190, 64, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 13, 218, 61, 105, 246, 198, 61, 24, 247, 30, 62, 254, 142, 168, 61, 39, 233, 219, 61, 156, 116, 59, 60, 204, 242, 137, 61, 211, 163, 50, 62, 124, 234, 188, 61, 34, 86, 22, 190, 144, 12, 222, 189, 204, 104, 163, 189, 209, 66, 113, 189, 19, 46, 159, 190, 219, 35, 25, 61, 236, 65, 146, 189, 106, 203, 119, 62, 91, 152, 36, 190, 56, 196, 51, 190, 212, 2, 187, 59, 120, 99, 84, 61, 42, 220, 19, 62, 109, 128, 224, 61, 36, 86, 249, 61, 104, 18, 127, 188, 111, 239, 161, 189, 192, 185, 164, 62, 207, 61, 38, 60, 101, 29, 123, 61, 44, 105, 137, 60, 34, 164, 210, 189, 244, 69, 245, 189, 203, 97, 78, 62, 87, 150, 84, 191, 239, 170, 163, 190, 26, 58, 217, 190, 56, 242, 198, 191, 61, 11, 65, 190, 200, 24, 171, 190, 163, 134, 226, 61, 34, 81, 135, 61, 50, 131, 46, 191, 29, 137, 3, 191, 53, 180, 163, 61, 138, 45, 45, 188, 156, 92, 30, 190, 10, 79, 77, 61, 222, 238, 151, 190, 121, 221, 69, 62, 114, 15, 58, 190, 101, 183, 142, 190, 100, 212, 24, 190, 46, 87, 6, 190, 125, 147, 35, 61, 37, 239, 236, 61, 247, 186, 224, 190, 70, 113, 78, 62, 200, 96, 23, 189, 94, 155, 226, 61, 46, 216, 95, 62, 105, 217, 39, 62, 141, 248, 161, 190, 26, 107, 209, 60, 13, 76, 47, 191, 150, 184, 7, 191, 208, 149, 2, 190, 156, 175, 201, 190, 135, 88, 184, 62, 154, 26, 45, 190, 13, 19, 243, 61, 208, 82, 137, 61, 179, 18, 220, 190, 129, 143, 160, 190, 73, 199, 251, 190, 80, 176, 39, 60, 177, 248, 0, 62, 180, 159, 104, 62, 218, 127, 161, 61, 21, 152, 138, 189, 37, 61, 10, 190, 32, 57, 97, 62, 123, 46, 29, 190, 100, 173, 133, 62, 238, 218, 25, 191, 137, 200, 0, 191, 37, 30, 147, 190, 120, 59, 149, 189, 92, 68, 39, 191, 28, 248, 17, 62, 102, 198, 236, 190, 101, 101, 54, 62, 59, 88, 130, 62, 118, 132, 118, 191, 154, 161, 119, 190, 142, 21, 201, 58, 115, 14, 207, 190, 183, 86, 177, 62, 243, 186, 98, 62, 148, 206, 194, 62, 225, 81, 22, 190, 49, 11, 3, 62, 169, 145, 199, 188, 92, 231, 10, 190, 225, 23, 8, 62, 231, 233, 59, 189, 62, 36, 133, 62, 118, 238, 90, 62, 46, 221, 21, 190, 1, 137, 134, 190, 123, 72, 125, 190, 120, 79, 144, 61, 116, 225, 191, 189, 29, 111, 32, 191, 156, 228, 128, 191, 167, 90, 180, 59, 51, 33, 102, 62, 197, 155, 62, 60, 39, 199, 35, 62, 236, 227, 33, 186, 48, 154, 231, 190, 132, 154, 14, 190, 50, 141, 165, 62, 74, 28, 166, 190, 139, 251, 61, 59, 181, 243, 156, 62, 196, 168, 218, 61, 128, 82, 120, 61, 102, 59, 220, 190, 147, 187, 169, 61, 17, 28, 10, 191, 75, 219, 51, 191, 38, 69, 1, 191, 75, 163, 55, 190, 251, 87, 134, 190, 39, 240, 208, 190, 126, 7, 154, 189, 156, 195, 1, 60, 252, 229, 127, 190, 187, 54, 38, 191, 72, 126, 78, 62, 238, 241, 164, 190, 244, 15, 143, 189, 109, 114, 149, 62, 168, 165, 60, 59, 186, 163, 130, 62, 100, 47, 70, 61, 24, 22, 37, 62, 69, 110, 72, 190, 77, 193, 120, 190, 158, 76, 218, 189, 23, 206, 130, 189, 38, 239, 25, 190, 182, 105, 31, 189, 37, 32, 106, 190, 207, 120, 187, 60, 25, 126, 46, 62, 0, 167, 252, 61, 232, 198, 152, 189, 79, 13, 54, 62, 80, 173, 107, 189, 86, 171, 213, 62, 53, 225, 189, 190, 152, 161, 155, 188, 232, 171, 64, 191, 113, 194, 26, 187, 143, 75, 117, 189, 205, 246, 11, 61, 12, 142, 199, 188, 3, 174, 250, 61, 38, 51, 252, 190, 194, 253, 164, 190, 45, 228, 151, 62, 251, 145, 165, 190, 194, 72, 33, 190, 152, 244, 113, 62, 55, 219, 155, 58, 242, 63, 210, 60, 184, 155, 149, 62, 176, 248, 23, 190, 24, 58, 224, 61, 225, 47, 28, 61, 218, 133, 81, 62, 98, 138, 2, 62, 112, 185, 90, 190, 168, 235, 16, 62, 37, 9, 17, 190, 118, 131, 77, 62, 54, 44, 113, 190, 195, 240, 139, 190, 20, 50, 90, 61, 40, 255, 198, 60, 215, 207, 34, 190, 120, 54, 79, 189, 202, 115, 31, 61, 191, 181, 93, 191, 138, 217, 101, 62, 149, 73, 137, 191, 229, 139, 5, 62, 177, 215, 98, 190, 221, 246, 178, 191, 79, 187, 218, 190, 97, 245, 35, 61, 84, 196, 4, 62, 51, 163, 214, 189, 44, 175, 80, 62, 202, 22, 72, 189, 85, 234, 66, 190, 53, 230, 253, 190, 158, 59, 106, 62, 24, 227, 133, 191, 76, 55, 199, 62, 160, 85, 150, 190, 38, 222, 197, 188, 144, 183, 248, 190, 40, 161, 5, 191, 72, 41, 29, 189, 96, 4, 154, 190, 118, 243, 155, 189, 47, 15, 186, 189, 248, 19, 39, 62, 223, 39, 155, 61, 130, 145, 128, 190, 103, 145, 2, 190, 57, 1, 200, 61, 95, 108, 254, 189, 205, 8, 169, 189, 2, 114, 175, 190, 36, 184, 98, 62, 170, 118, 80, 61, 49, 218, 141, 62, 174, 54, 58, 191, 118, 124, 38, 61, 190, 81, 193, 190, 49, 227, 88, 190, 129, 156, 166, 190, 97, 173, 27, 191, 123, 95, 120, 189, 187, 240, 169, 190, 72, 103, 204, 61, 19, 157, 2, 62, 204, 38, 38, 189, 123, 234, 187, 190, 59, 181, 123, 189, 76, 155, 229, 190, 232, 157, 45, 61, 138, 141, 2, 191, 77, 109, 139, 190, 64, 250, 20, 62, 190, 79, 25, 191, 85, 253, 108, 190, 44, 24, 81, 62, 96, 41, 146, 190, 101, 113, 85, 190, 41, 239, 55, 191, 219, 128, 17, 191, 41, 168, 126, 189, 99, 157, 140, 191, 120, 11, 139, 190, 76, 189, 213, 190, 157, 4, 30, 62, 153, 212, 45, 191, 19, 179, 96, 62, 163, 106, 116, 188, 27, 178, 182, 190, 141, 160, 195, 61, 14, 111, 1, 191, 240, 56, 100, 189, 243, 244, 3, 62, 4, 177, 127, 62, 130, 127, 245, 189, 164, 34, 152, 190, 185, 182, 31, 190, 176, 188, 177, 62, 146, 148, 95, 190, 67, 16, 144, 62, 202, 91, 5, 62, 61, 207, 176, 59, 193, 122, 35, 61, 208, 14, 228, 190, 165, 102, 91, 61, 74, 161, 54, 188, 125, 22, 179, 191, 192, 9, 90, 61, 96, 200, 208, 62, 123, 166, 95, 191, 70, 105, 13, 189, 145, 115, 40, 62, 207, 173, 135, 62, 46, 39, 196, 62, 217, 51, 181, 190, 186, 29, 150, 62, 46, 24, 162, 190, 95, 43, 235, 62, 91, 201, 48, 62, 224, 130, 6, 190, 210, 220, 129, 190, 240, 57, 78, 190, 133, 232, 14, 62, 34, 101, 19, 191, 12, 77, 99, 190, 89, 32, 4, 191, 213, 73, 133, 188, 9, 22, 28, 189, 43, 77, 206, 190, 171, 106, 68, 191, 154, 246, 7, 190, 151, 175, 57, 191, 177, 254, 159, 62, 82, 151, 68, 191, 116, 171, 126, 60, 151, 229, 58, 62, 199, 140, 169, 191, 50, 128, 37, 190, 112, 69, 56, 188, 252, 70, 130, 191, 233, 212, 47, 191, 253, 198, 129, 62, 218, 83, 18, 187, 184, 243, 44, 190, 167, 163, 53, 62, 125, 106, 8, 62, 94, 82, 225, 61, 226, 159, 65, 61, 168, 235, 148, 62, 2, 7, 176, 62, 36, 113, 164, 62, 119, 109, 15, 191, 95, 190, 163, 60, 136, 98, 77, 61, 202, 150, 68, 191, 240, 146, 46, 62, 23, 26, 33, 190, 211, 76, 178, 190, 229, 42, 253, 190, 38, 83, 200, 62, 90, 65, 119, 62, 103, 34, 252, 61, 123, 210, 80, 62, 215, 162, 84, 62, 6, 219, 154, 190, 180, 203, 160, 60, 48, 137, 62, 62, 252, 235, 181, 62, 172, 66, 3, 190, 161, 247, 29, 191, 217, 90, 253, 62, 136, 187, 166, 189, 20, 9, 51, 191, 232, 196, 138, 190, 21, 189, 22, 191, 57, 41, 83, 191, 222, 60, 104, 190, 172, 182, 158, 190, 43, 170, 154, 188, 28, 205, 134, 62, 90, 48, 198, 189, 19, 21, 162, 62, 45, 242, 147, 62, 27, 14, 77, 61, 227, 227, 18, 61, 105, 112, 143, 190, 229, 58, 164, 190, 234, 222, 157, 189, 198, 123, 39, 62, 203, 30, 177, 62, 246, 94, 64, 190, 117, 68, 44, 190, 211, 66, 66, 191, 174, 52, 87, 62, 9, 252, 120, 190, 32, 173, 58, 189, 166, 254, 47, 61, 140, 239, 41, 190, 238, 20, 30, 60, 58, 176, 51, 62, 72, 13, 127, 190, 130, 251, 4, 189, 108, 56, 133, 190, 111, 208, 140, 62, 44, 19, 130, 62, 229, 100, 38, 189, 175, 151, 216, 61, 9, 188, 148, 59, 165, 174, 27, 62, 161, 90, 81, 189, 85, 167, 48, 61, 204, 116, 61, 62, 165, 158, 22, 61, 77, 254, 29, 61, 61, 140, 98, 62, 90, 235, 3, 62, 127, 71, 3, 190, 168, 251, 150, 190, 40, 41, 148, 189, 225, 154, 84, 61, 133, 229, 25, 62, 93, 22, 171, 62, 173, 3, 18, 190, 110, 248, 190, 190, 51, 233, 243, 190, 155, 133, 153, 62, 6, 92, 62, 186, 78, 168, 158, 190, 185, 84, 153, 61, 74, 144, 248, 189, 221, 212, 5, 190, 142, 73, 130, 62, 156, 192, 184, 190, 212, 45, 212, 61, 135, 161, 169, 189, 128, 197, 41, 62, 25, 69, 253, 62, 81, 34, 141, 189, 77, 131, 198, 189, 182, 128, 55, 62, 19, 43, 28, 62, 188, 169, 170, 189, 60, 36, 5, 190, 9, 46, 2, 190, 114, 28, 49, 190, 194, 189, 30, 62, 23, 187, 66, 190, 134, 232, 17, 62, 131, 43, 227, 189, 241, 234, 6, 188, 28, 134, 39, 190, 182, 14, 3, 189, 99, 63, 194, 61, 172, 245, 171, 189, 190, 188, 38, 190, 69, 18, 46, 190, 99, 193, 136, 60, 16, 107, 29, 190, 76, 18, 40, 188, 215, 210, 227, 61, 197, 71, 200, 189, 59, 176, 119, 61, 119, 153, 8, 190, 35, 18, 23, 190, 125, 25, 175, 189, 61, 117, 20, 190, 231, 13, 17, 190, 46, 76, 34, 61, 92, 44, 19, 190, 13, 98, 192, 189, 228, 217, 2, 62, 225, 35, 189, 188, 73, 221, 42, 190, 161, 198, 217, 62, 78, 156, 42, 190, 243, 135, 238, 188, 151, 48, 165, 191, 46, 61, 196, 187, 36, 220, 222, 190, 183, 178, 154, 189, 95, 191, 119, 61, 221, 1, 70, 188, 113, 42, 132, 62, 194, 146, 98, 60, 220, 27, 209, 61, 89, 249, 207, 190, 255, 115, 43, 191, 173, 21, 165, 189, 198, 47, 86, 190, 180, 135, 15, 190, 56, 198, 248, 62, 226, 246, 129, 59, 27, 193, 159, 61, 46, 83, 224, 189, 127, 178, 162, 62, 14, 39, 88, 62, 250, 182, 23, 191, 5, 113, 169, 60, 98, 219, 153, 62, 96, 104, 111, 62, 224, 72, 80, 61, 242, 249, 158, 62, 182, 55, 61, 61, 248, 214, 57, 190, 93, 117, 47, 60, 173, 140, 166, 189, 37, 236, 151, 190, 40, 138, 163, 189, 177, 139, 174, 61, 0, 238, 71, 188, 67, 38, 106, 62, 94, 121, 153, 190, 187, 232, 241, 189, 172, 14, 176, 190, 169, 212, 179, 189, 161, 148, 160, 190, 133, 41, 132, 60, 168, 165, 158, 190, 127, 158, 70, 61, 55, 72, 86, 62, 187, 214, 8, 62, 34, 43, 132, 190, 48, 174, 48, 60, 125, 45, 159, 61, 144, 2, 45, 191, 241, 210, 33, 191, 206, 108, 193, 190, 135, 125, 64, 189, 178, 117, 136, 190, 117, 145, 182, 190, 88, 225, 232, 60, 213, 140, 239, 190, 151, 217, 73, 190, 3, 195, 12, 190, 224, 76, 103, 191, 231, 252, 9, 191, 225, 108, 45, 190, 150, 173, 190, 61, 32, 240, 50, 190, 228, 244, 85, 62, 154, 140, 198, 190, 192, 54, 97, 62, 95, 141, 184, 190, 63, 169, 158, 189, 53, 233, 47, 62, 142, 30, 50, 62, 65, 209, 163, 189, 42, 129, 140, 190, 13, 80, 84, 59, 43, 247, 104, 191, 209, 37, 27, 191, 187, 79, 176, 190, 228, 227, 31, 189, 52, 1, 247, 190, 57, 246, 119, 190, 230, 1, 164, 190, 85, 171, 218, 61, 60, 197, 202, 61, 177, 131, 14, 62, 219, 119, 144, 62, 62, 3, 74, 190, 236, 136, 1, 190, 28, 241, 151, 61, 221, 160, 42, 189, 153, 7, 34, 191, 182, 158, 32, 60, 163, 34, 172, 60, 39, 197, 46, 189, 135, 190, 2, 190, 216, 206, 128, 191, 225, 71, 30, 190, 79, 126, 132, 190, 180, 10, 100, 62, 211, 44, 15, 190, 100, 54, 201, 60, 160, 197, 17, 62, 63, 94, 142, 190, 154, 149, 250, 189, 66, 167, 251, 60, 186, 164, 7, 190, 212, 66, 24, 62, 46, 79, 184, 62, 109, 110, 220, 61, 189, 108, 231, 59, 188, 12, 202, 61, 126, 145, 76, 61, 152, 141, 21, 190, 122, 215, 6, 189, 223, 129, 211, 189, 165, 36, 88, 62, 146, 159, 46, 190, 172, 85, 171, 190, 141, 26, 40, 60, 26, 57, 50, 61, 95, 14, 60, 191, 126, 161, 222, 61, 240, 43, 169, 62, 36, 184, 175, 190, 128, 35, 5, 190, 226, 47, 13, 62, 14, 60, 152, 61, 59, 35, 24, 191, 221, 196, 155, 190, 115, 147, 43, 62, 220, 200, 96, 191, 148, 36, 147, 62, 200, 121, 95, 189, 34, 92, 64, 62, 174, 163, 231, 189, 23, 198, 139, 190, 199, 180, 190, 190, 189, 73, 102, 190, 246, 65, 112, 62, 122, 149, 199, 61, 245, 225, 243, 61, 12, 29, 54, 189, 69, 47, 103, 189, 123, 55, 247, 61, 59, 66, 215, 62, 148, 68, 22, 61, 171, 168, 58, 62, 94, 160, 212, 190, 91, 159, 109, 190, 8, 70, 77, 62, 145, 48, 94, 191, 241, 128, 84, 189, 235, 197, 198, 190, 77, 163, 149, 62, 42, 243, 163, 62, 146, 227, 214, 189, 110, 153, 42, 189, 145, 217, 234, 61, 20, 68, 210, 62, 240, 71, 179, 62, 185, 141, 0, 191, 128, 85, 205, 60, 28, 22, 148, 62, 115, 200, 138, 58, 243, 62, 172, 189, 198, 22, 71, 191, 35, 172, 14, 62, 193, 60, 138, 62, 141, 22, 141, 62, 0, 115, 35, 191, 194, 90, 156, 61, 187, 236, 170, 190, 6, 231, 171, 190, 191, 71, 130, 62, 233, 49, 116, 62, 25, 2, 171, 188, 112, 199, 60, 62, 152, 51, 129, 62, 240, 138, 129, 190, 65, 27, 23, 61, 44, 163, 78, 62, 146, 104, 109, 62, 117, 75, 161, 188, 97, 164, 225, 189, 251, 236, 67, 62, 120, 150, 22, 190, 115, 225, 231, 190, 191, 255, 136, 62, 30, 163, 158, 190, 42, 155, 38, 190, 91, 174, 0, 191, 105, 21, 248, 189, 47, 121, 28, 62, 35, 152, 34, 61, 121, 186, 133, 189, 43, 205, 170, 190, 49, 238, 16, 190, 215, 98, 131, 61, 196, 146, 179, 58, 244, 201, 71, 190, 96, 70, 34, 189, 36, 41, 163, 189, 236, 239, 148, 61, 245, 158, 197, 62, 87, 164, 255, 62, 178, 11, 42, 190, 232, 169, 150, 190, 203, 173, 69, 190, 24, 64, 17, 190, 174, 150, 146, 189, 204, 202, 129, 62, 144, 66, 165, 61, 57, 225, 155, 62, 197, 105, 15, 190, 33, 218, 14, 189, 94, 17, 143, 188, 89, 57, 60, 61, 224, 93, 188, 60, 17, 162, 135, 62, 25, 247, 0, 190, 140, 128, 245, 60, 90, 101, 78, 62, 50, 63, 234, 62, 234, 98, 12, 190, 187, 78, 200, 189, 197, 207, 221, 60, 222, 207, 137, 190, 91, 43, 128, 62, 135, 222, 153, 189, 56, 168, 68, 61, 199, 145, 234, 61, 232, 224, 105, 190, 115, 36, 79, 190, 40, 155, 37, 190, 183, 228, 202, 189, 71, 66, 198, 62, 202, 73, 210, 62, 93, 215, 216, 190, 82, 55, 152, 190, 129, 216, 159, 60, 124, 19, 109, 190, 223, 207, 195, 189, 42, 118, 232, 62, 185, 192, 72, 189, 29, 241, 118, 188, 15, 102, 113, 62, 126, 64, 184, 190, 116, 139, 187, 61, 175, 90, 189, 190, 87, 48, 158, 62, 19, 223, 74, 63, 177, 142, 7, 189, 255, 247, 19, 62, 142, 13, 5, 62, 3, 38, 194, 62, 8, 79, 5, 63, 250, 143, 55, 62, 60, 80, 59, 189, 113, 66, 183, 61, 86, 96, 245, 61, 143, 9, 190, 189, 91, 59, 110, 189, 191, 179, 47, 61, 52, 240, 23, 62, 1, 75, 1, 189, 51, 251, 13, 190, 63, 240, 85, 62, 100, 57, 15, 190, 96, 235, 195, 190, 246, 19, 70, 62, 77, 155, 56, 62, 11, 129, 90, 62, 141, 117, 198, 62, 250, 60, 135, 61, 141, 209, 226, 61, 171, 161, 40, 62, 16, 120, 18, 62, 20, 211, 131, 189, 249, 105, 61, 61, 101, 183, 131, 62, 62, 127, 92, 62, 55, 135, 47, 62, 46, 164, 183, 190, 77, 163, 253, 61, 69, 251, 209, 188, 209, 33, 193, 61, 61, 100, 25, 189, 246, 113, 235, 189, 239, 120, 1, 190, 15, 0, 34, 190, 206, 239, 43, 190, 144, 10, 166, 189, 238, 233, 86, 190, 81, 65, 156, 189, 35, 228, 152, 188, 32, 179, 233, 188, 14, 65, 70, 189, 57, 227, 103, 189, 252, 237, 219, 60, 99, 89, 231, 61, 211, 253, 150, 61, 116, 202, 243, 189, 85, 69, 240, 188, 116, 202, 43, 190, 1, 236, 102, 189, 244, 27, 80, 188, 253, 170, 9, 62, 62, 37, 12, 189, 85, 211, 248, 61, 172, 159, 9, 190, 143, 249, 18, 62, 41, 185, 145, 187, 22, 139, 0, 61, 164, 245, 26, 190, 201, 25, 14, 190, 144, 152, 39, 190, 117, 87, 129, 61, 51, 65, 164, 61, 141, 103, 13, 190, 46, 28, 124, 190, 140, 201, 237, 189, 155, 31, 128, 190, 66, 203, 36, 189, 73, 6, 51, 191, 101, 45, 228, 190, 96, 114, 0, 190, 252, 47, 1, 191, 192, 254, 147, 61, 20, 247, 113, 61, 18, 199, 23, 190, 4, 72, 123, 188, 169, 104, 87, 62, 88, 188, 250, 62, 113, 180, 182, 189, 235, 129, 83, 188, 55, 16, 35, 190, 83, 89, 255, 190, 118, 3, 200, 62, 57, 132, 198, 61, 82, 163, 0, 61, 147, 108, 9, 62, 87, 177, 182, 190, 118, 177, 9, 62, 174, 200, 149, 189, 22, 153, 24, 190, 164, 7, 103, 62, 26, 6, 162, 62, 45, 41, 166, 189, 173, 18, 81, 190, 32, 196, 208, 189, 202, 145, 169, 62, 19, 96, 144, 190, 207, 7, 164, 190, 2, 92, 228, 56, 211, 15, 6, 190, 224, 182, 147, 190, 215, 7, 18, 190, 34, 64, 77, 62, 29, 105, 5, 62, 144, 202, 131, 190, 4, 200, 39, 190, 37, 29, 227, 190, 69, 75, 52, 61, 197, 9, 171, 62, 25, 121, 33, 63, 35, 77, 194, 190, 6, 79, 40, 190, 134, 29, 176, 61, 41, 65, 193, 62, 156, 200, 60, 189, 170, 223, 25, 62, 228, 2, 139, 61, 147, 141, 52, 62, 240, 234, 141, 188, 7, 226, 208, 189, 20, 187, 47, 62, 42, 105, 215, 190, 171, 241, 66, 62, 73, 68, 5, 63, 206, 95, 98, 190, 116, 235, 184, 188, 58, 28, 247, 59, 169, 101, 13, 63, 142, 19, 249, 62, 19, 190, 14, 190, 186, 121, 56, 59, 30, 231, 141, 62, 252, 94, 208, 61, 141, 1, 136, 61, 232, 74, 216, 59, 237, 149, 112, 62, 237, 105, 52, 61, 113, 5, 5, 190, 246, 254, 144, 189, 215, 200, 5, 189, 245, 171, 189, 190, 79, 24, 191, 190, 101, 61, 32, 62, 210, 244, 205, 61, 223, 198, 65, 62, 35, 219, 192, 62, 49, 46, 148, 61, 59, 0, 49, 190, 10, 179, 115, 61, 120, 235, 86, 62, 118, 143, 15, 62, 206, 85, 239, 61, 179, 148, 208, 61, 70, 103, 150, 62, 130, 24, 224, 189, 133, 109, 242, 190, 231, 103, 223, 188, 160, 41, 59, 190, 148, 119, 16, 61, 144, 217, 9, 190, 141, 64, 179, 62, 125, 8, 243, 189, 57, 37, 198, 190, 249, 115, 124, 62, 200, 215, 49, 191, 174, 199, 177, 190, 105, 154, 26, 62, 173, 211, 180, 189, 110, 253, 219, 190, 220, 134, 89, 62, 171, 30, 12, 60, 245, 179, 150, 62, 12, 47, 218, 61, 239, 14, 106, 190, 248, 70, 43, 191, 87, 175, 161, 190, 92, 242, 64, 62, 24, 191, 153, 188, 234, 234, 11, 62, 123, 218, 85, 190, 39, 120, 90, 190, 167, 38, 151, 190, 222, 44, 174, 190, 205, 34, 26, 190, 216, 7, 28, 62, 23, 63, 167, 61, 41, 169, 39, 62, 175, 65, 137, 189, 125, 239, 126, 189, 111, 227, 243, 189, 16, 203, 130, 62, 87, 55, 174, 189, 163, 35, 210, 62, 226, 122, 135, 190, 45, 255, 17, 62, 2, 81, 88, 61, 219, 31, 244, 61, 149, 177, 20, 190, 148, 232, 3, 191, 70, 245, 202, 61, 54, 127, 98, 62, 253, 104, 222, 61, 242, 180, 161, 190, 10, 209, 180, 61, 175, 206, 0, 191, 82, 44, 5, 191, 255, 206, 181, 61, 246, 191, 169, 188, 40, 168, 31, 190, 199, 105, 120, 62, 208, 100, 199, 62, 248, 175, 24, 61, 156, 89, 89, 189, 250, 66, 54, 188, 63, 136, 39, 62, 46, 213, 144, 188, 79, 235, 57, 189, 143, 141, 237, 62, 198, 83, 12, 190, 74, 166, 166, 190, 33, 135, 92, 60, 125, 39, 30, 191, 139, 116, 140, 190, 139, 134, 81, 190, 199, 50, 172, 190, 21, 33, 97, 191, 179, 12, 215, 61, 52, 186, 27, 191, 205, 139, 69, 62, 163, 22, 189, 61, 7, 93, 51, 61, 118, 26, 119, 189, 230, 38, 149, 190, 45, 68, 212, 189, 115, 80, 33, 191, 18, 184, 237, 62, 182, 91, 63, 61, 119, 35, 153, 189, 159, 149, 51, 190, 198, 133, 41, 190, 80, 42, 148, 188, 76, 53, 226, 62, 196, 190, 116, 190, 18, 156, 220, 62, 30, 227, 212, 190, 210, 151, 186, 189, 233, 184, 139, 62, 101, 208, 88, 191, 230, 155, 74, 62, 210, 155, 59, 191, 111, 238, 158, 189, 165, 9, 156, 62, 51, 97, 140, 190, 215, 204, 135, 186, 40, 161, 106, 61, 5, 141, 251, 62, 145, 244, 19, 191, 202, 179, 228, 60, 127, 134, 74, 62, 121, 5, 252, 61, 87, 253, 99, 62, 160, 168, 169, 62, 13, 151, 231, 59, 137, 23, 41, 62, 147, 72, 76, 189, 9, 152, 252, 189, 175, 72, 156, 60, 69, 113, 156, 61, 25, 94, 121, 190, 225, 254, 115, 189, 109, 56, 2, 63, 22, 196, 0, 189, 231, 65, 33, 190, 114, 178, 161, 189, 154, 25, 54, 189, 154, 164, 123, 59, 230, 183, 32, 190, 35, 118, 23, 190, 56, 148, 209, 62, 43, 160, 20, 190, 55, 173, 144, 187, 198, 51, 8, 189, 180, 62, 135, 190, 49, 238, 57, 60, 48, 158, 80, 62, 10, 97, 240, 61, 121, 219, 25, 62, 3, 24, 230, 190, 107, 239, 116, 190, 254, 138, 151, 62, 6, 224, 81, 188, 224, 23, 72, 191, 52, 7, 117, 62, 109, 100, 27, 191, 104, 3, 32, 191, 204, 145, 229, 188, 12, 145, 47, 62, 235, 189, 166, 62, 220, 97, 49, 61, 191, 79, 15, 191, 90, 41, 244, 61, 66, 123, 220, 188, 179, 121, 160, 190, 15, 121, 74, 188, 56, 106, 98, 190, 156, 239, 67, 61, 211, 131, 32, 189, 117, 24, 165, 188, 79, 106, 75, 62, 81, 149, 112, 62, 19, 211, 36, 62, 118, 188, 11, 190, 168, 77, 112, 190, 25, 26, 155, 187, 158, 114, 160, 190, 36, 251, 42, 62, 29, 175, 255, 61, 67, 145, 196, 190, 20, 249, 125, 61, 83, 88, 20, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {216, 98, 131, 62, 85, 229, 137, 189, 219, 230, 57, 62, 195, 231, 11, 62, 129, 89, 115, 62, 50, 204, 90, 62, 44, 46, 140, 61, 124, 4, 232, 61, 87, 173, 43, 61, 162, 189, 79, 62, 172, 7, 152, 62, 224, 235, 20, 62, 152, 181, 129, 62, 1, 0, 184, 189, 114, 54, 149, 189, 177, 47, 202, 185, 110, 108, 61, 61, 103, 217, 219, 61, 243, 207, 29, 62, 129, 210, 205, 59, 191, 225, 37, 61, 241, 91, 97, 61, 173, 3, 156, 59, 196, 52, 216, 189, 225, 20, 167, 189, 157, 164, 208, 61, 103, 71, 117, 62, 124, 160, 78, 190, 250, 142, 230, 61, 60, 250, 4, 62, 67, 186, 156, 61, 69, 144, 141, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {66, 159, 119, 188, 13, 134, 135, 61, 222, 196, 82, 191, 18, 48, 180, 62, 139, 233, 15, 63, 3, 145, 152, 60, 98, 14, 114, 63, 123, 110, 89, 191, 48, 64, 47, 191, 160, 86, 151, 63, 117, 57, 107, 191, 55, 255, 168, 62, 143, 211, 184, 62, 61, 210, 165, 61, 233, 10, 163, 190, 109, 21, 86, 191, 66, 22, 7, 191, 62, 62, 29, 190, 122, 54, 70, 63, 40, 170, 34, 191, 142, 4, 67, 62, 54, 81, 12, 63, 253, 247, 93, 190, 48, 226, 242, 60, 220, 179, 206, 62, 229, 153, 230, 62, 134, 128, 112, 190, 135, 237, 168, 190, 114, 189, 241, 190, 228, 9, 149, 63, 237, 121, 20, 62, 50, 73, 11, 63, 46, 97, 53, 190, 73, 213, 5, 191, 57, 77, 222, 62, 2, 82, 150, 62, 64, 149, 202, 190, 228, 215, 19, 191, 62, 159, 136, 189, 41, 45, 8, 188, 236, 124, 130, 62, 55, 113, 55, 190, 229, 141, 219, 61, 56, 3, 6, 62, 76, 182, 69, 190, 82, 31, 246, 189, 196, 146, 47, 190, 18, 140, 205, 62, 241, 94, 41, 62, 206, 197, 181, 189, 230, 25, 118, 62, 153, 149, 147, 62, 93, 247, 230, 189, 0, 230, 66, 189, 182, 71, 247, 189, 252, 141, 10, 189, 136, 87, 2, 189, 241, 144, 127, 61, 237, 216, 18, 190, 154, 12, 209, 61, 176, 20, 131, 189, 171, 215, 5, 62, 95, 11, 219, 189, 175, 103, 185, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {125, 18, 129, 61, 224, 106, 223, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {238, 235, 207, 189, 223, 44, 252, 61, 99, 37, 168, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {92, 207, 141, 191, 206, 53, 67, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0037/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}