// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 114, 131, 63, 140, 110, 16, 63, 156, 198, 115, 62, 168, 134, 18, 190, 160, 251, 135, 63, 103, 180, 186, 62, 58, 43, 88, 190, 197, 179, 72, 63, 119, 139, 106, 61, 214, 134, 148, 190, 86, 181, 167, 191, 15, 114, 120, 190, 139, 145, 194, 190, 163, 27, 6, 63, 100, 75, 157, 188, 104, 240, 46, 191, 158, 133, 236, 190, 186, 65, 23, 189, 126, 161, 49, 191, 217, 255, 40, 63, 51, 116, 16, 63, 200, 29, 177, 62, 111, 23, 41, 63, 169, 134, 123, 62, 104, 66, 151, 62, 63, 89, 88, 63, 184, 183, 174, 190, 209, 67, 16, 63, 130, 207, 28, 63, 222, 98, 215, 62, 93, 214, 215, 189, 126, 89, 34, 63, 237, 158, 114, 62, 46, 19, 205, 62, 76, 64, 254, 190, 120, 144, 195, 62, 91, 169, 50, 63, 31, 123, 132, 191, 250, 79, 154, 190, 72, 183, 153, 62, 58, 251, 157, 189, 87, 90, 116, 190, 202, 138, 21, 191, 159, 246, 29, 191, 241, 248, 106, 190, 244, 70, 226, 190, 59, 27, 248, 62, 216, 64, 36, 191, 54, 232, 112, 62, 13, 21, 110, 191, 133, 21, 182, 188, 94, 13, 33, 63, 10, 147, 44, 191, 135, 31, 7, 62, 16, 79, 160, 189, 183, 181, 4, 191, 36, 157, 164, 62, 194, 167, 104, 62, 121, 242, 79, 63, 212, 127, 219, 190, 214, 102, 171, 61, 127, 186, 228, 190, 133, 214, 163, 190, 111, 42, 47, 63, 58, 51, 133, 63, 241, 19, 181, 189, 23, 94, 43, 189, 64, 79, 61, 63, 179, 228, 73, 61, 42, 190, 128, 190, 6, 101, 131, 191, 4, 235, 18, 191, 244, 137, 247, 62, 140, 183, 162, 190, 70, 177, 3, 63, 29, 117, 21, 63, 240, 246, 159, 63, 205, 251, 129, 62, 135, 172, 46, 63, 208, 159, 29, 191, 44, 236, 83, 190, 41, 216, 83, 63, 28, 70, 71, 191, 201, 166, 80, 190, 241, 113, 70, 63, 220, 230, 113, 63, 57, 99, 26, 63, 4, 24, 30, 191, 173, 253, 114, 62, 95, 229, 67, 63, 106, 51, 22, 190, 119, 91, 174, 189, 198, 47, 24, 63, 37, 10, 36, 63, 115, 101, 217, 190, 71, 254, 14, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 50, 179, 190, 131, 107, 106, 190, 60, 20, 227, 62, 47, 49, 67, 189, 164, 247, 168, 62, 226, 18, 0, 63, 2, 165, 213, 190, 183, 116, 147, 62, 2, 25, 253, 62, 3, 74, 28, 191, 127, 49, 29, 190, 33, 42, 224, 61, 125, 58, 174, 190, 129, 44, 66, 191, 156, 117, 213, 190, 164, 116, 132, 190, 169, 86, 233, 61, 76, 242, 15, 191, 119, 222, 18, 62, 21, 128, 233, 62, 122, 102, 238, 61, 31, 238, 220, 62, 14, 156, 67, 63, 4, 192, 239, 189, 211, 69, 53, 62, 139, 43, 253, 61, 104, 101, 118, 62, 188, 87, 110, 190, 150, 229, 189, 190, 148, 133, 237, 190, 151, 102, 255, 189, 167, 30, 69, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 243, 52, 62, 170, 200, 106, 61, 164, 194, 236, 61, 63, 161, 85, 61, 223, 51, 191, 61, 129, 195, 179, 61, 236, 234, 124, 61, 94, 233, 58, 62, 240, 117, 184, 61, 184, 127, 14, 190, 206, 219, 25, 190, 16, 159, 18, 186, 235, 180, 195, 189, 223, 234, 128, 190, 158, 53, 70, 60, 132, 118, 174, 189, 121, 140, 63, 62, 38, 136, 41, 190, 102, 242, 164, 189, 141, 118, 221, 186, 117, 169, 136, 60, 83, 119, 29, 62, 185, 138, 0, 62, 100, 196, 152, 61, 188, 70, 79, 61, 218, 191, 207, 189, 103, 174, 144, 62, 25, 88, 142, 188, 152, 212, 84, 61, 161, 226, 43, 61, 145, 180, 67, 189, 56, 102, 42, 190, 242, 186, 63, 62, 78, 17, 22, 191, 88, 177, 144, 190, 7, 30, 165, 190, 145, 176, 136, 191, 194, 219, 240, 189, 175, 33, 171, 190, 185, 245, 204, 61, 26, 67, 171, 61, 13, 207, 17, 191, 42, 250, 211, 190, 216, 67, 114, 61, 11, 158, 51, 60, 156, 92, 30, 190, 10, 79, 77, 61, 109, 212, 153, 190, 15, 236, 76, 62, 137, 147, 95, 190, 66, 236, 169, 190, 52, 128, 238, 189, 129, 167, 188, 189, 82, 152, 57, 61, 218, 128, 248, 61, 164, 80, 206, 190, 181, 27, 62, 62, 72, 55, 36, 189, 26, 42, 246, 61, 87, 143, 106, 62, 47, 4, 252, 61, 231, 210, 136, 190, 76, 21, 1, 189, 237, 58, 208, 190, 232, 54, 94, 190, 128, 155, 81, 189, 79, 29, 222, 190, 84, 95, 115, 62, 196, 184, 136, 190, 151, 80, 234, 60, 199, 154, 104, 61, 37, 129, 157, 190, 146, 14, 238, 189, 98, 10, 190, 190, 77, 178, 161, 61, 43, 74, 198, 61, 130, 168, 47, 61, 218, 127, 161, 61, 193, 95, 202, 189, 186, 157, 3, 190, 67, 77, 22, 62, 95, 144, 43, 190, 238, 184, 89, 62, 173, 65, 152, 190, 67, 168, 9, 191, 233, 2, 107, 189, 208, 162, 63, 189, 88, 99, 30, 191, 244, 125, 2, 62, 200, 104, 146, 190, 186, 55, 202, 61, 177, 243, 212, 61, 203, 12, 12, 191, 56, 176, 17, 190, 131, 248, 22, 61, 188, 9, 12, 190, 149, 103, 159, 62, 0, 47, 73, 62, 23, 133, 188, 62, 124, 148, 226, 189, 118, 210, 14, 62, 145, 144, 166, 189, 219, 189, 30, 190, 244, 142, 251, 61, 14, 42, 131, 189, 66, 176, 89, 62, 180, 30, 65, 62, 247, 44, 4, 190, 220, 138, 140, 190, 255, 62, 43, 190, 196, 0, 136, 188, 29, 183, 229, 189, 194, 98, 14, 191, 52, 70, 73, 191, 233, 234, 111, 61, 242, 200, 77, 62, 110, 23, 16, 189, 180, 115, 7, 62, 132, 50, 150, 188, 233, 115, 243, 190, 19, 239, 1, 190, 73, 208, 153, 62, 197, 45, 152, 190, 206, 245, 165, 60, 157, 41, 147, 62, 204, 220, 171, 61, 89, 7, 58, 61, 75, 218, 157, 190, 203, 15, 129, 61, 84, 216, 142, 190, 21, 207, 200, 190, 95, 62, 166, 190, 121, 22, 202, 61, 130, 1, 105, 190, 26, 147, 145, 190, 180, 70, 227, 189, 202, 155, 68, 186, 126, 71, 13, 190, 51, 112, 235, 190, 102, 166, 43, 62, 200, 129, 142, 190, 244, 15, 143, 189, 122, 226, 161, 61, 176, 27, 70, 59, 108, 197, 89, 62, 123, 51, 152, 188, 42, 31, 248, 61, 247, 206, 33, 190, 211, 202, 56, 190, 112, 1, 6, 190, 55, 169, 100, 189, 51, 105, 166, 189, 49, 81, 148, 189, 235, 130, 35, 190, 172, 186, 165, 188, 229, 96, 52, 62, 229, 235, 218, 61, 218, 73, 140, 189, 209, 147, 54, 62, 139, 229, 169, 60, 165, 103, 211, 62, 232, 73, 187, 190, 240, 64, 147, 188, 141, 28, 16, 191, 142, 241, 170, 186, 233, 97, 80, 189, 181, 4, 224, 60, 4, 143, 116, 189, 241, 240, 226, 61, 123, 202, 231, 190, 232, 5, 180, 190, 9, 152, 125, 62, 172, 208, 97, 190, 239, 109, 236, 189, 194, 92, 29, 62, 157, 215, 119, 188, 16, 220, 11, 61, 101, 30, 97, 62, 244, 144, 88, 190, 218, 248, 203, 61, 76, 208, 83, 61, 102, 245, 71, 62, 234, 229, 250, 61, 184, 124, 85, 190, 30, 206, 187, 61, 59, 107, 31, 190, 239, 130, 93, 62, 28, 145, 54, 190, 45, 12, 182, 190, 34, 226, 29, 188, 199, 119, 83, 189, 61, 97, 75, 190, 50, 67, 216, 60, 202, 115, 31, 61, 62, 230, 114, 191, 10, 33, 112, 62, 176, 206, 100, 191, 99, 88, 31, 62, 98, 67, 39, 190, 47, 206, 89, 191, 176, 115, 157, 190, 97, 245, 35, 61, 84, 196, 4, 62, 125, 146, 131, 57, 5, 45, 80, 62, 214, 177, 53, 189, 124, 179, 100, 189, 170, 95, 137, 190, 189, 97, 86, 62, 11, 134, 72, 191, 97, 48, 204, 62, 42, 65, 103, 190, 229, 207, 25, 187, 0, 254, 2, 191, 246, 82, 20, 191, 132, 216, 188, 187, 84, 184, 37, 190, 118, 243, 155, 189, 92, 237, 185, 189, 123, 136, 4, 62, 80, 217, 50, 61, 137, 254, 215, 190, 97, 1, 91, 190, 202, 150, 133, 61, 95, 108, 254, 189, 27, 112, 185, 189, 115, 236, 81, 190, 31, 197, 173, 61, 235, 193, 93, 62, 174, 34, 133, 62, 116, 218, 22, 191, 87, 53, 15, 61, 56, 167, 131, 190, 49, 227, 88, 190, 86, 234, 164, 190, 202, 215, 14, 191, 209, 133, 60, 190, 191, 88, 27, 61, 74, 111, 91, 188, 77, 52, 11, 62, 141, 90, 57, 190, 44, 153, 4, 59, 66, 228, 128, 189, 215, 21, 189, 190, 36, 35, 17, 189, 114, 152, 213, 190, 87, 178, 123, 189, 94, 180, 70, 61, 244, 13, 36, 191, 85, 253, 108, 190, 92, 8, 181, 61, 139, 86, 166, 190, 101, 113, 85, 190, 146, 88, 49, 191, 131, 80, 5, 191, 182, 1, 8, 190, 235, 199, 243, 190, 18, 149, 94, 190, 179, 41, 140, 190, 26, 238, 229, 61, 76, 142, 22, 191, 62, 91, 7, 62, 111, 79, 76, 189, 156, 225, 26, 190, 107, 225, 196, 61, 76, 237, 220, 190, 206, 134, 202, 188, 16, 11, 221, 61, 139, 133, 73, 62, 158, 102, 158, 189, 48, 141, 117, 190, 115, 111, 35, 190, 231, 135, 159, 62, 17, 246, 94, 190, 170, 89, 117, 62, 185, 1, 9, 62, 201, 211, 193, 187, 121, 188, 217, 188, 43, 161, 204, 190, 19, 255, 57, 61, 239, 247, 210, 188, 225, 114, 78, 191, 188, 240, 64, 60, 24, 127, 182, 62, 65, 220, 13, 191, 20, 204, 44, 61, 171, 78, 63, 62, 11, 188, 136, 62, 72, 243, 142, 62, 209, 129, 185, 190, 167, 119, 144, 62, 48, 40, 118, 190, 81, 89, 225, 62, 188, 181, 3, 62, 165, 231, 179, 189, 185, 202, 124, 190, 125, 142, 30, 190, 68, 9, 231, 188, 98, 145, 18, 191, 137, 179, 163, 189, 53, 9, 209, 190, 213, 73, 133, 188, 199, 177, 39, 190, 132, 74, 188, 190, 208, 150, 219, 190, 37, 54, 4, 190, 34, 65, 35, 191, 7, 215, 184, 62, 252, 148, 25, 191, 141, 72, 117, 61, 102, 214, 52, 62, 30, 175, 170, 191, 10, 5, 19, 190, 134, 14, 243, 188, 105, 43, 40, 191, 59, 53, 57, 190, 53, 163, 13, 62, 241, 255, 111, 61, 198, 41, 243, 189, 47, 224, 176, 62, 66, 193, 59, 62, 21, 75, 51, 62, 124, 204, 179, 60, 151, 25, 221, 61, 137, 146, 177, 62, 72, 101, 137, 62, 91, 135, 5, 191, 42, 202, 207, 59, 145, 249, 97, 61, 24, 235, 9, 191, 15, 199, 102, 62, 2, 85, 195, 190, 180, 99, 100, 190, 223, 253, 163, 190, 43, 194, 186, 62, 89, 19, 115, 62, 42, 223, 18, 190, 23, 235, 14, 190, 252, 119, 46, 61, 154, 238, 156, 190, 159, 23, 38, 60, 195, 135, 66, 62, 140, 124, 185, 62, 222, 98, 30, 190, 164, 98, 56, 191, 40, 62, 240, 62, 251, 103, 225, 189, 17, 114, 6, 191, 133, 187, 139, 190, 114, 95, 18, 191, 21, 90, 63, 191, 139, 87, 59, 190, 62, 116, 142, 190, 174, 253, 136, 189, 210, 22, 80, 62, 106, 18, 65, 60, 116, 227, 106, 62, 232, 234, 114, 62, 209, 183, 139, 60, 226, 15, 38, 61, 36, 37, 147, 190, 130, 82, 153, 190, 175, 126, 3, 190, 217, 203, 74, 62, 149, 218, 190, 62, 100, 244, 233, 189, 144, 9, 69, 189, 242, 145, 25, 191, 31, 33, 122, 62, 96, 30, 4, 190, 0, 172, 40, 189, 137, 9, 70, 61, 3, 209, 32, 190, 200, 57, 183, 186, 136, 74, 21, 62, 61, 66, 12, 190, 176, 131, 4, 187, 98, 21, 127, 190, 30, 10, 142, 62, 157, 20, 134, 62, 167, 133, 245, 188, 128, 120, 135, 61, 62, 46, 170, 188, 221, 8, 78, 62, 165, 132, 234, 188, 136, 178, 47, 59, 148, 195, 20, 62, 56, 113, 15, 62, 7, 36, 248, 187, 23, 75, 119, 62, 178, 199, 255, 61, 131, 66, 240, 189, 54, 234, 153, 190, 222, 182, 179, 189, 66, 189, 22, 60, 28, 226, 66, 62, 153, 30, 165, 62, 7, 20, 136, 190, 75, 239, 86, 190, 157, 222, 225, 190, 166, 60, 168, 62, 150, 122, 208, 61, 52, 252, 140, 190, 61, 68, 144, 61, 131, 66, 18, 190, 155, 223, 20, 190, 83, 216, 116, 62, 182, 238, 165, 190, 143, 42, 14, 62, 61, 58, 147, 189, 58, 184, 45, 62, 28, 225, 247, 62, 5, 249, 159, 189, 176, 6, 213, 189, 127, 117, 60, 62, 106, 150, 249, 61, 188, 169, 170, 189, 60, 36, 5, 190, 9, 46, 2, 190, 114, 28, 49, 190, 194, 189, 30, 62, 23, 187, 66, 190, 134, 232, 17, 62, 131, 43, 227, 189, 241, 234, 6, 188, 28, 134, 39, 190, 182, 14, 3, 189, 99, 63, 194, 61, 172, 245, 171, 189, 190, 188, 38, 190, 69, 18, 46, 190, 99, 193, 136, 60, 16, 107, 29, 190, 76, 18, 40, 188, 215, 210, 227, 61, 197, 71, 200, 189, 59, 176, 119, 61, 119, 153, 8, 190, 35, 18, 23, 190, 125, 25, 175, 189, 61, 117, 20, 190, 231, 13, 17, 190, 46, 76, 34, 61, 92, 44, 19, 190, 13, 98, 192, 189, 228, 217, 2, 62, 225, 35, 189, 188, 73, 221, 42, 190, 69, 221, 222, 62, 37, 50, 182, 189, 196, 64, 201, 60, 228, 146, 34, 191, 77, 94, 87, 61, 186, 125, 172, 190, 202, 45, 101, 189, 78, 108, 145, 61, 119, 245, 232, 59, 167, 117, 132, 62, 128, 89, 166, 61, 28, 206, 75, 61, 92, 69, 164, 190, 234, 132, 28, 191, 84, 151, 164, 189, 236, 163, 76, 190, 44, 38, 52, 190, 244, 227, 179, 62, 254, 90, 45, 189, 211, 151, 196, 61, 242, 97, 244, 188, 105, 245, 178, 62, 141, 197, 122, 62, 160, 31, 3, 191, 201, 83, 171, 188, 35, 161, 164, 62, 188, 47, 129, 62, 198, 147, 178, 61, 223, 156, 152, 62, 201, 196, 36, 61, 48, 232, 81, 190, 124, 230, 64, 61, 173, 140, 166, 189, 171, 97, 142, 190, 203, 255, 102, 189, 89, 147, 37, 62, 34, 156, 238, 60, 86, 29, 150, 62, 68, 148, 75, 190, 252, 251, 234, 189, 64, 128, 151, 190, 169, 212, 179, 189, 172, 213, 146, 190, 160, 21, 86, 61, 219, 1, 157, 190, 127, 158, 70, 61, 213, 227, 136, 62, 94, 66, 200, 61, 201, 90, 194, 189, 48, 174, 48, 60, 120, 97, 45, 62, 95, 50, 42, 191, 93, 85, 17, 191, 206, 108, 193, 190, 197, 224, 9, 188, 31, 173, 75, 190, 18, 222, 174, 190, 88, 225, 232, 60, 126, 110, 160, 190, 218, 7, 73, 190, 3, 195, 12, 190, 40, 41, 86, 191, 60, 146, 236, 190, 225, 108, 45, 190, 235, 105, 4, 61, 222, 174, 164, 189, 35, 223, 249, 61, 129, 170, 142, 190, 254, 127, 25, 62, 197, 156, 182, 190, 7, 33, 118, 187, 229, 110, 19, 62, 68, 242, 12, 62, 219, 226, 184, 189, 247, 7, 56, 190, 247, 147, 204, 189, 208, 28, 249, 190, 158, 180, 224, 190, 78, 18, 186, 190, 126, 220, 176, 189, 49, 96, 203, 190, 251, 248, 155, 190, 96, 187, 135, 190, 230, 249, 145, 61, 165, 42, 25, 62, 53, 145, 207, 61, 105, 113, 105, 62, 113, 131, 51, 190, 28, 113, 75, 190, 245, 155, 183, 60, 56, 216, 90, 60, 125, 53, 206, 190, 111, 143, 85, 189, 212, 243, 253, 61, 254, 164, 36, 61, 237, 252, 137, 189, 39, 121, 208, 189, 213, 15, 31, 190, 200, 46, 96, 190, 34, 79, 41, 62, 38, 124, 141, 189, 40, 169, 74, 56, 148, 59, 223, 61, 191, 230, 210, 189, 50, 77, 250, 189, 22, 43, 3, 61, 215, 219, 16, 190, 220, 187, 106, 61, 198, 19, 126, 62, 224, 83, 119, 62, 159, 82, 11, 61, 150, 42, 205, 61, 20, 62, 255, 188, 220, 101, 201, 190, 29, 9, 103, 189, 189, 227, 223, 189, 25, 157, 54, 62, 137, 204, 75, 190, 137, 160, 139, 190, 98, 162, 158, 188, 134, 7, 48, 189, 19, 177, 173, 190, 18, 219, 63, 187, 76, 59, 88, 62, 211, 75, 153, 189, 77, 100, 100, 188, 118, 196, 22, 62, 159, 7, 139, 61, 190, 249, 19, 191, 131, 219, 93, 190, 182, 101, 100, 62, 164, 26, 29, 191, 14, 2, 152, 62, 47, 239, 108, 189, 104, 78, 135, 62, 83, 230, 223, 189, 119, 57, 113, 190, 139, 160, 169, 190, 95, 71, 21, 190, 155, 76, 114, 62, 133, 157, 153, 61, 241, 23, 154, 61, 245, 220, 124, 190, 210, 68, 4, 59, 115, 237, 215, 61, 176, 105, 228, 62, 214, 88, 58, 61, 52, 173, 106, 62, 206, 103, 219, 190, 27, 49, 94, 190, 167, 2, 92, 62, 117, 23, 76, 191, 240, 138, 76, 189, 1, 173, 157, 190, 150, 144, 96, 62, 50, 29, 142, 62, 21, 138, 211, 189, 225, 238, 75, 188, 195, 48, 16, 62, 64, 192, 72, 62, 112, 185, 157, 62, 167, 247, 246, 190, 171, 155, 74, 60, 180, 82, 87, 62, 202, 236, 35, 61, 52, 57, 74, 60, 17, 107, 60, 191, 172, 27, 218, 61, 18, 72, 145, 62, 7, 88, 19, 188, 198, 227, 34, 191, 211, 243, 54, 61, 188, 49, 154, 190, 254, 225, 22, 190, 129, 66, 115, 62, 111, 82, 121, 62, 59, 153, 20, 189, 126, 116, 60, 62, 199, 107, 142, 62, 139, 25, 127, 190, 129, 72, 57, 61, 174, 139, 68, 62, 78, 166, 104, 62, 20, 84, 151, 188, 59, 126, 27, 190, 201, 67, 22, 62, 69, 115, 37, 190, 26, 106, 223, 190, 223, 190, 66, 62, 161, 0, 179, 190, 115, 162, 39, 190, 79, 104, 238, 190, 37, 135, 232, 189, 209, 93, 159, 61, 54, 155, 81, 61, 150, 130, 201, 58, 131, 198, 139, 190, 193, 113, 41, 61, 3, 48, 133, 61, 118, 42, 191, 187, 127, 77, 75, 190, 232, 87, 134, 189, 113, 140, 22, 190, 90, 227, 251, 61, 28, 79, 182, 62, 115, 16, 172, 62, 238, 231, 59, 190, 253, 57, 150, 190, 181, 196, 18, 190, 68, 11, 225, 188, 157, 222, 214, 188, 149, 70, 132, 62, 72, 193, 121, 61, 145, 235, 146, 62, 252, 47, 252, 189, 37, 103, 71, 189, 138, 198, 205, 60, 18, 32, 205, 60, 210, 171, 16, 61, 19, 126, 129, 62, 213, 77, 24, 190, 191, 102, 213, 60, 224, 51, 91, 62, 154, 5, 207, 62, 22, 0, 230, 189, 233, 204, 208, 189, 28, 164, 17, 61, 173, 211, 7, 190, 40, 217, 131, 62, 159, 23, 85, 57, 205, 155, 71, 61, 134, 123, 248, 61, 245, 23, 125, 190, 216, 176, 60, 190, 25, 125, 48, 190, 42, 97, 164, 189, 64, 98, 189, 62, 58, 17, 103, 62, 4, 5, 218, 190, 72, 250, 160, 190, 36, 159, 78, 61, 248, 230, 75, 190, 160, 3, 201, 189, 159, 203, 227, 62, 226, 86, 153, 189, 124, 50, 221, 188, 250, 139, 116, 62, 144, 140, 188, 190, 158, 174, 228, 61, 117, 33, 178, 190, 97, 73, 160, 62, 49, 155, 73, 63, 240, 155, 15, 189, 24, 56, 231, 61, 174, 35, 217, 61, 244, 67, 173, 62, 228, 153, 9, 63, 87, 54, 108, 62, 19, 29, 31, 189, 98, 18, 115, 60, 32, 22, 254, 61, 101, 210, 189, 189, 10, 251, 62, 189, 20, 130, 121, 61, 10, 66, 27, 62, 29, 181, 144, 187, 97, 47, 186, 189, 28, 7, 69, 62, 134, 78, 8, 190, 145, 215, 92, 190, 105, 67, 78, 62, 42, 158, 46, 62, 36, 183, 29, 62, 53, 21, 144, 62, 144, 243, 132, 61, 235, 42, 215, 61, 73, 252, 36, 62, 41, 132, 38, 62, 16, 6, 68, 189, 115, 227, 217, 60, 54, 54, 123, 62, 99, 3, 110, 62, 254, 169, 28, 62, 156, 212, 179, 190, 109, 191, 22, 62, 72, 226, 181, 186, 171, 109, 236, 61, 169, 63, 31, 189, 246, 113, 235, 189, 239, 120, 1, 190, 173, 227, 32, 190, 206, 239, 43, 190, 111, 245, 163, 189, 230, 233, 86, 190, 81, 65, 156, 189, 35, 228, 152, 188, 221, 70, 210, 188, 14, 65, 70, 189, 57, 227, 103, 189, 252, 237, 219, 60, 199, 20, 233, 61, 75, 43, 152, 61, 106, 20, 244, 189, 63, 205, 216, 188, 116, 202, 43, 190, 1, 236, 102, 189, 244, 27, 80, 188, 47, 161, 12, 62, 207, 24, 3, 189, 207, 252, 254, 61, 144, 160, 7, 190, 103, 15, 21, 62, 41, 185, 145, 187, 135, 149, 0, 61, 69, 168, 25, 190, 245, 76, 13, 190, 144, 152, 39, 190, 117, 87, 129, 61, 51, 65, 164, 61, 211, 73, 10, 190, 8, 137, 212, 190, 140, 201, 237, 189, 251, 99, 58, 190, 230, 139, 163, 189, 88, 31, 36, 191, 79, 163, 196, 190, 96, 114, 0, 190, 103, 185, 25, 191, 144, 120, 176, 61, 20, 247, 113, 61, 18, 199, 23, 190, 250, 240, 124, 190, 199, 55, 183, 61, 40, 208, 158, 62, 214, 219, 9, 190, 32, 132, 93, 59, 253, 142, 137, 190, 94, 176, 37, 191, 240, 22, 166, 189, 233, 138, 237, 61, 241, 245, 10, 60, 169, 28, 23, 62, 118, 5, 157, 190, 222, 254, 222, 61, 93, 181, 152, 190, 129, 159, 49, 190, 44, 44, 17, 62, 184, 88, 52, 62, 247, 233, 232, 189, 173, 18, 81, 190, 72, 160, 85, 61, 51, 148, 149, 62, 55, 89, 154, 190, 241, 149, 131, 190, 99, 60, 124, 61, 221, 243, 46, 189, 242, 170, 81, 190, 22, 29, 9, 188, 110, 63, 128, 62, 209, 63, 223, 61, 185, 2, 140, 190, 73, 120, 229, 189, 241, 98, 203, 190, 35, 237, 38, 61, 100, 58, 156, 62, 12, 216, 216, 62, 176, 9, 204, 190, 122, 16, 33, 190, 205, 124, 231, 61, 221, 6, 196, 62, 229, 54, 120, 189, 4, 254, 23, 62, 208, 211, 107, 61, 7, 221, 42, 62, 72, 45, 5, 188, 25, 208, 197, 189, 255, 144, 46, 62, 55, 255, 215, 190, 183, 209, 49, 62, 171, 35, 251, 62, 140, 181, 106, 190, 196, 245, 83, 189, 146, 236, 223, 188, 30, 59, 0, 63, 137, 163, 255, 62, 70, 14, 219, 189, 116, 150, 251, 187, 8, 61, 2, 62, 195, 5, 181, 61, 216, 240, 0, 61, 216, 204, 31, 56, 130, 112, 120, 62, 121, 67, 95, 61, 17, 179, 216, 189, 243, 81, 48, 189, 223, 108, 88, 189, 154, 111, 182, 190, 25, 233, 68, 190, 208, 145, 224, 61, 131, 151, 190, 61, 220, 66, 216, 61, 165, 225, 135, 62, 191, 116, 121, 61, 242, 63, 48, 190, 116, 65, 83, 61, 76, 221, 117, 62, 239, 248, 27, 62, 233, 194, 166, 61, 201, 90, 178, 61, 80, 52, 154, 62, 238, 54, 4, 190, 207, 128, 233, 190, 15, 135, 11, 188, 173, 4, 49, 190, 30, 100, 59, 61, 30, 129, 237, 189, 149, 250, 121, 62, 4, 234, 9, 190, 198, 152, 208, 190, 8, 205, 181, 61, 190, 150, 47, 191, 215, 12, 93, 190, 188, 30, 58, 62, 244, 126, 155, 189, 190, 193, 124, 190, 252, 30, 191, 61, 238, 129, 101, 60, 41, 219, 156, 62, 121, 201, 16, 61, 239, 14, 106, 190, 6, 42, 6, 191, 87, 175, 161, 190, 123, 0, 26, 62, 94, 17, 245, 189, 211, 126, 52, 62, 198, 83, 25, 189, 5, 107, 159, 190, 75, 76, 65, 190, 54, 240, 177, 190, 185, 240, 75, 190, 188, 86, 41, 62, 86, 167, 119, 189, 66, 243, 69, 62, 126, 112, 167, 189, 99, 121, 172, 189, 231, 134, 135, 189, 237, 126, 144, 62, 172, 225, 12, 62, 158, 6, 212, 62, 144, 13, 17, 190, 75, 195, 32, 62, 34, 83, 200, 61, 156, 132, 26, 62, 177, 247, 20, 60, 245, 178, 183, 190, 26, 252, 175, 61, 214, 139, 106, 62, 55, 213, 81, 62, 56, 96, 68, 190, 169, 163, 113, 61, 64, 206, 224, 190, 17, 177, 190, 190, 186, 11, 245, 61, 117, 197, 196, 188, 22, 129, 50, 190, 133, 25, 43, 62, 149, 171, 219, 62, 105, 9, 21, 61, 172, 157, 180, 188, 219, 167, 234, 187, 194, 240, 50, 62, 222, 70, 90, 60, 251, 179, 152, 189, 108, 147, 234, 62, 119, 163, 21, 190, 33, 87, 152, 190, 118, 115, 167, 60, 103, 5, 4, 191, 197, 120, 94, 190, 97, 156, 62, 190, 38, 31, 165, 190, 143, 150, 68, 191, 213, 208, 207, 61, 1, 126, 173, 190, 66, 55, 33, 62, 101, 227, 152, 61, 110, 252, 217, 61, 179, 177, 146, 189, 104, 132, 154, 190, 88, 171, 105, 189, 174, 44, 13, 191, 249, 147, 227, 62, 199, 77, 52, 61, 135, 161, 64, 189, 72, 226, 144, 190, 6, 112, 69, 190, 208, 64, 52, 189, 195, 226, 207, 62, 112, 7, 128, 190, 7, 174, 214, 62, 125, 116, 211, 190, 240, 170, 143, 189, 236, 82, 134, 62, 90, 148, 75, 191, 107, 213, 54, 62, 20, 160, 32, 191, 149, 226, 227, 189, 123, 185, 149, 62, 216, 172, 144, 190, 51, 6, 47, 188, 58, 88, 109, 61, 76, 165, 173, 62, 234, 121, 5, 191, 53, 102, 39, 189, 217, 66, 21, 62, 181, 51, 227, 58, 53, 184, 56, 62, 215, 238, 143, 62, 247, 237, 101, 60, 222, 53, 5, 62, 234, 123, 135, 61, 154, 51, 45, 190, 244, 80, 57, 189, 119, 95, 140, 61, 197, 244, 76, 190, 121, 207, 190, 188, 73, 188, 135, 62, 222, 67, 190, 189, 241, 112, 104, 190, 20, 181, 224, 188, 140, 141, 73, 189, 133, 183, 171, 61, 8, 79, 60, 190, 171, 135, 49, 190, 204, 93, 200, 62, 225, 75, 171, 190, 217, 171, 185, 188, 151, 8, 172, 189, 56, 171, 87, 190, 90, 170, 40, 62, 222, 60, 10, 62, 119, 202, 248, 61, 83, 114, 18, 62, 33, 24, 111, 190, 163, 190, 141, 190, 88, 177, 70, 62, 55, 8, 45, 60, 59, 79, 217, 190, 178, 243, 131, 62, 45, 74, 246, 190, 152, 81, 33, 191, 54, 203, 153, 188, 100, 206, 46, 62, 24, 184, 8, 62, 196, 41, 37, 189, 11, 204, 215, 190, 63, 8, 176, 60, 201, 5, 237, 189, 250, 13, 176, 190, 20, 247, 33, 188, 240, 161, 170, 189, 128, 138, 225, 61, 106, 67, 244, 187, 184, 44, 84, 188, 186, 136, 75, 62, 174, 199, 106, 62, 26, 229, 54, 62, 79, 119, 9, 190, 167, 142, 37, 190, 97, 19, 235, 185, 197, 191, 141, 190, 106, 245, 240, 61, 136, 101, 193, 61, 21, 157, 239, 190, 243, 104, 140, 189, 61, 131, 140, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {64, 16, 146, 62, 5, 240, 128, 189, 211, 203, 3, 62, 114, 162, 7, 62, 179, 183, 83, 62, 203, 77, 91, 62, 76, 205, 133, 61, 111, 28, 19, 62, 182, 115, 61, 187, 146, 203, 72, 62, 26, 38, 136, 62, 130, 158, 8, 62, 209, 241, 130, 62, 1, 0, 184, 189, 154, 67, 95, 189, 98, 177, 127, 61, 228, 213, 142, 60, 188, 188, 133, 61, 42, 191, 3, 62, 128, 124, 119, 58, 222, 110, 168, 61, 66, 151, 141, 61, 201, 111, 196, 58, 134, 180, 212, 189, 129, 196, 154, 189, 81, 210, 228, 61, 37, 70, 107, 62, 175, 33, 45, 190, 252, 96, 0, 62, 236, 28, 197, 61, 54, 80, 83, 61, 149, 73, 235, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 135, 79, 188, 214, 227, 188, 61, 52, 243, 251, 190, 124, 224, 131, 62, 226, 210, 196, 62, 53, 216, 98, 60, 160, 124, 54, 63, 193, 203, 38, 191, 102, 96, 8, 191, 130, 13, 130, 63, 249, 166, 84, 191, 32, 248, 160, 62, 60, 107, 199, 62, 61, 210, 165, 61, 94, 250, 169, 190, 35, 181, 79, 191, 80, 76, 119, 190, 30, 170, 167, 189, 55, 167, 50, 63, 146, 59, 23, 191, 100, 165, 57, 62, 188, 184, 13, 63, 104, 112, 107, 190, 102, 48, 242, 60, 150, 232, 148, 62, 109, 244, 218, 62, 171, 28, 120, 190, 12, 220, 161, 190, 70, 243, 230, 190, 170, 72, 117, 63, 154, 38, 170, 61, 147, 50, 0, 63, 194, 230, 38, 190, 42, 9, 240, 190, 208, 252, 138, 62, 21, 196, 165, 62, 205, 13, 136, 190, 52, 39, 17, 191, 24, 139, 129, 189, 99, 103, 51, 189, 119, 75, 138, 62, 76, 38, 169, 189, 113, 68, 129, 61, 163, 222, 82, 61, 226, 219, 81, 190, 82, 31, 246, 189, 20, 233, 217, 189, 93, 118, 155, 62, 107, 213, 29, 62, 187, 175, 227, 188, 58, 225, 100, 62, 237, 120, 143, 62, 170, 155, 209, 189, 254, 95, 73, 189, 21, 9, 182, 189, 210, 39, 11, 189, 255, 140, 214, 189, 160, 138, 182, 61, 149, 176, 15, 190, 225, 90, 1, 62, 212, 84, 140, 189, 81, 103, 18, 62, 10, 78, 21, 190, 186, 236, 187, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 205, 149, 61, 24, 161, 210, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {51, 226, 8, 191, 72, 121, 233, 190, 117, 48, 195, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {56, 159, 235, 190, 250, 1, 25, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0037/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}