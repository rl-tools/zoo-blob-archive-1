// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 196, 177, 190, 249, 183, 150, 63, 113, 55, 249, 62, 65, 86, 35, 190, 112, 204, 218, 191, 156, 219, 170, 190, 217, 167, 182, 190, 5, 55, 109, 189, 244, 91, 225, 190, 39, 254, 229, 190, 234, 109, 215, 61, 237, 196, 51, 191, 56, 208, 143, 188, 210, 243, 35, 190, 9, 90, 11, 63, 137, 80, 128, 190, 5, 85, 172, 63, 202, 1, 242, 62, 169, 56, 84, 62, 29, 163, 148, 190, 196, 145, 46, 63, 203, 188, 67, 191, 53, 228, 131, 191, 24, 28, 165, 189, 98, 240, 131, 190, 53, 220, 185, 191, 95, 93, 62, 61, 125, 245, 18, 190, 140, 161, 107, 191, 141, 219, 157, 62, 224, 132, 86, 62, 47, 50, 97, 63, 151, 92, 184, 189, 139, 238, 55, 191, 141, 139, 245, 63, 212, 10, 211, 62, 75, 56, 30, 63, 249, 223, 35, 63, 252, 115, 33, 62, 46, 172, 16, 63, 127, 52, 120, 191, 204, 66, 214, 61, 85, 49, 209, 189, 216, 42, 189, 191, 33, 69, 164, 190, 39, 157, 13, 63, 143, 131, 134, 63, 162, 208, 84, 62, 141, 48, 190, 62, 180, 35, 254, 190, 102, 247, 73, 62, 117, 167, 198, 60, 74, 138, 69, 189, 193, 58, 106, 190, 108, 153, 81, 63, 56, 36, 205, 190, 157, 138, 129, 190, 128, 133, 51, 190, 162, 198, 63, 191, 22, 30, 245, 190, 149, 171, 2, 63, 137, 3, 191, 190, 152, 193, 231, 62, 51, 218, 25, 63, 237, 90, 178, 191, 171, 51, 241, 190, 66, 114, 187, 190, 174, 107, 68, 190, 123, 26, 218, 61, 35, 233, 135, 62, 128, 9, 252, 190, 173, 229, 55, 62, 204, 218, 134, 190, 102, 221, 22, 191, 10, 94, 170, 190, 56, 171, 204, 62, 238, 98, 154, 63, 33, 12, 95, 62, 99, 70, 187, 62, 175, 146, 147, 63, 187, 152, 190, 62, 235, 76, 199, 62, 126, 180, 121, 191, 35, 2, 141, 190, 156, 169, 39, 59, 229, 55, 148, 190, 91, 131, 162, 190, 121, 201, 25, 189, 104, 133, 221, 190, 250, 206, 253, 190, 159, 35, 0, 63, 222, 214, 129, 190, 65, 205, 249, 190, 171, 8, 66, 63, 63, 7, 67, 63, 94, 172, 118, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {48, 5, 13, 190, 143, 230, 182, 190, 56, 55, 240, 190, 27, 244, 226, 190, 105, 72, 0, 190, 82, 212, 155, 62, 104, 28, 17, 61, 27, 138, 163, 190, 245, 16, 121, 62, 113, 94, 116, 190, 136, 146, 66, 189, 40, 124, 183, 188, 252, 193, 229, 61, 191, 99, 40, 62, 25, 101, 201, 190, 253, 178, 63, 61, 248, 152, 194, 62, 41, 194, 76, 189, 158, 210, 73, 191, 240, 221, 197, 61, 108, 112, 110, 191, 233, 1, 255, 189, 49, 222, 17, 63, 184, 90, 177, 61, 180, 26, 145, 62, 152, 156, 12, 62, 7, 125, 87, 190, 53, 236, 47, 191, 206, 207, 19, 191, 202, 56, 150, 188, 31, 37, 169, 62, 192, 49, 195, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {112, 50, 144, 189, 252, 5, 90, 190, 24, 165, 73, 189, 157, 71, 130, 61, 254, 126, 159, 189, 216, 152, 165, 190, 50, 213, 191, 61, 147, 183, 174, 190, 249, 50, 11, 190, 148, 196, 164, 189, 54, 6, 100, 62, 29, 105, 43, 191, 133, 227, 212, 187, 74, 10, 39, 60, 254, 179, 130, 189, 92, 205, 201, 61, 86, 62, 6, 187, 250, 146, 190, 61, 122, 32, 163, 191, 116, 4, 113, 62, 118, 213, 121, 62, 101, 208, 12, 191, 224, 242, 15, 190, 167, 105, 225, 61, 151, 216, 230, 60, 135, 222, 137, 62, 110, 25, 14, 61, 115, 31, 51, 191, 134, 51, 85, 190, 65, 159, 138, 189, 169, 5, 32, 62, 185, 32, 26, 62, 37, 19, 6, 62, 162, 88, 132, 61, 236, 166, 53, 188, 80, 147, 157, 188, 222, 231, 14, 190, 223, 199, 80, 189, 254, 212, 198, 188, 16, 208, 142, 61, 94, 208, 250, 188, 85, 104, 34, 190, 48, 26, 46, 190, 220, 187, 12, 190, 106, 223, 229, 189, 44, 255, 205, 61, 232, 58, 47, 190, 224, 73, 184, 61, 100, 99, 4, 190, 199, 206, 33, 61, 72, 92, 4, 189, 155, 14, 89, 189, 97, 106, 48, 189, 22, 221, 32, 190, 139, 229, 139, 61, 46, 21, 164, 61, 184, 238, 7, 190, 55, 110, 25, 190, 91, 238, 188, 61, 88, 239, 14, 62, 129, 244, 52, 62, 190, 113, 46, 190, 117, 107, 192, 189, 169, 187, 6, 190, 183, 21, 176, 190, 1, 79, 157, 191, 92, 158, 193, 62, 245, 31, 31, 191, 203, 78, 60, 62, 5, 19, 214, 61, 187, 199, 190, 60, 94, 73, 13, 62, 189, 60, 78, 62, 168, 150, 186, 190, 26, 220, 185, 190, 161, 129, 84, 62, 106, 93, 183, 61, 4, 124, 198, 62, 175, 77, 220, 191, 218, 39, 167, 190, 71, 123, 14, 188, 224, 77, 74, 190, 166, 19, 117, 61, 239, 153, 134, 190, 36, 18, 2, 191, 12, 245, 252, 62, 158, 178, 105, 62, 69, 74, 101, 62, 10, 136, 14, 190, 211, 68, 232, 190, 18, 226, 109, 190, 220, 185, 159, 61, 197, 232, 240, 62, 20, 109, 134, 190, 31, 22, 124, 62, 238, 113, 254, 190, 253, 253, 108, 189, 179, 139, 163, 61, 184, 168, 121, 189, 152, 144, 201, 188, 45, 46, 140, 189, 74, 154, 21, 190, 87, 186, 246, 189, 173, 8, 26, 190, 165, 215, 173, 61, 177, 16, 213, 61, 102, 69, 88, 188, 124, 206, 182, 61, 124, 148, 133, 61, 137, 31, 193, 189, 165, 175, 106, 61, 14, 97, 248, 189, 34, 239, 169, 61, 176, 152, 14, 189, 217, 49, 21, 62, 142, 123, 116, 189, 4, 157, 242, 61, 141, 217, 247, 60, 78, 167, 40, 190, 6, 186, 26, 190, 60, 42, 174, 189, 16, 103, 166, 189, 41, 75, 177, 61, 160, 245, 129, 189, 52, 126, 61, 189, 238, 172, 230, 189, 213, 85, 232, 61, 22, 115, 180, 61, 34, 52, 185, 190, 105, 59, 47, 190, 81, 84, 28, 190, 79, 22, 162, 61, 165, 217, 2, 60, 165, 196, 31, 190, 7, 206, 20, 189, 192, 10, 84, 190, 173, 148, 105, 62, 215, 160, 90, 189, 239, 118, 54, 62, 54, 50, 176, 61, 15, 124, 150, 62, 72, 15, 74, 189, 28, 14, 136, 189, 191, 170, 80, 62, 166, 195, 77, 189, 186, 48, 20, 62, 35, 99, 186, 190, 71, 249, 61, 62, 105, 69, 236, 189, 231, 195, 43, 189, 52, 66, 148, 61, 172, 110, 167, 190, 84, 96, 81, 186, 187, 39, 197, 62, 205, 175, 28, 60, 171, 239, 131, 190, 42, 230, 212, 189, 193, 46, 116, 189, 186, 43, 254, 61, 78, 27, 93, 62, 58, 183, 75, 190, 214, 7, 64, 62, 158, 172, 46, 189, 56, 220, 180, 190, 152, 111, 79, 62, 142, 25, 18, 190, 93, 14, 64, 62, 94, 20, 20, 61, 19, 208, 129, 189, 250, 224, 111, 61, 148, 20, 158, 62, 196, 115, 218, 190, 113, 176, 81, 62, 177, 22, 144, 62, 50, 222, 53, 62, 76, 211, 81, 61, 45, 149, 176, 60, 69, 110, 43, 63, 95, 122, 85, 190, 246, 96, 50, 61, 82, 248, 255, 62, 178, 106, 111, 191, 32, 90, 70, 190, 40, 104, 35, 61, 121, 122, 143, 62, 196, 167, 79, 62, 116, 92, 154, 62, 160, 11, 168, 189, 8, 229, 164, 189, 53, 193, 110, 61, 98, 41, 76, 61, 204, 226, 26, 63, 28, 148, 241, 189, 43, 121, 52, 190, 216, 155, 21, 189, 81, 244, 13, 189, 55, 84, 212, 189, 214, 254, 222, 189, 172, 130, 2, 62, 192, 203, 21, 189, 149, 43, 162, 61, 178, 231, 145, 189, 94, 42, 175, 61, 37, 107, 242, 189, 230, 146, 25, 190, 4, 198, 51, 189, 203, 235, 215, 61, 172, 234, 157, 61, 9, 6, 56, 189, 50, 196, 91, 61, 68, 117, 250, 189, 20, 42, 87, 190, 115, 4, 213, 61, 120, 48, 245, 61, 130, 61, 39, 190, 209, 223, 44, 62, 232, 249, 39, 189, 197, 37, 25, 62, 108, 34, 141, 61, 249, 153, 146, 61, 192, 181, 48, 190, 162, 39, 232, 189, 75, 234, 190, 61, 124, 74, 4, 190, 6, 42, 51, 191, 85, 14, 153, 60, 2, 189, 107, 189, 149, 114, 44, 62, 5, 154, 133, 190, 220, 223, 89, 191, 228, 162, 138, 190, 156, 218, 136, 62, 69, 209, 132, 190, 198, 100, 138, 61, 25, 143, 205, 61, 206, 53, 229, 190, 221, 91, 5, 62, 80, 166, 151, 62, 201, 96, 120, 62, 165, 198, 67, 62, 247, 115, 149, 61, 161, 182, 72, 62, 154, 32, 252, 190, 185, 190, 39, 61, 232, 65, 168, 60, 215, 63, 23, 190, 238, 177, 225, 189, 123, 134, 99, 190, 220, 94, 85, 62, 229, 155, 97, 62, 74, 74, 19, 190, 97, 190, 158, 60, 27, 171, 112, 190, 237, 246, 146, 61, 92, 166, 199, 189, 8, 62, 156, 62, 42, 62, 192, 189, 191, 138, 218, 62, 87, 116, 153, 190, 112, 221, 69, 62, 14, 117, 142, 190, 62, 176, 190, 190, 183, 218, 202, 60, 171, 35, 12, 63, 161, 107, 23, 61, 33, 117, 53, 62, 100, 89, 245, 61, 72, 197, 80, 191, 200, 24, 189, 189, 42, 44, 186, 61, 188, 13, 149, 62, 196, 177, 61, 62, 10, 215, 251, 61, 223, 156, 93, 62, 210, 207, 130, 191, 184, 43, 60, 59, 193, 170, 23, 62, 27, 116, 171, 190, 64, 126, 21, 190, 137, 167, 44, 190, 1, 105, 96, 62, 208, 88, 180, 62, 154, 197, 151, 62, 168, 188, 80, 190, 47, 190, 5, 190, 173, 117, 175, 61, 252, 56, 10, 190, 4, 199, 199, 62, 217, 86, 101, 187, 140, 155, 228, 61, 237, 105, 102, 189, 45, 3, 142, 61, 159, 32, 95, 191, 96, 64, 253, 191, 206, 200, 189, 191, 12, 58, 12, 63, 66, 99, 235, 190, 155, 230, 3, 191, 57, 17, 75, 61, 215, 219, 143, 190, 121, 131, 169, 62, 141, 107, 83, 189, 179, 192, 172, 189, 59, 7, 198, 61, 134, 88, 116, 190, 57, 229, 71, 62, 135, 117, 52, 191, 249, 176, 103, 62, 63, 189, 131, 61, 134, 52, 161, 189, 236, 178, 154, 189, 78, 33, 61, 191, 73, 98, 158, 62, 164, 42, 186, 62, 162, 74, 56, 191, 62, 74, 131, 190, 191, 179, 114, 190, 119, 87, 149, 62, 167, 71, 74, 62, 9, 176, 236, 61, 72, 111, 90, 62, 241, 65, 62, 62, 243, 114, 244, 190, 19, 48, 183, 190, 224, 220, 151, 190, 134, 61, 7, 191, 5, 167, 22, 190, 76, 67, 70, 190, 215, 207, 200, 190, 107, 71, 131, 61, 11, 121, 173, 190, 57, 104, 201, 190, 198, 85, 132, 60, 121, 213, 5, 62, 151, 67, 63, 60, 181, 84, 56, 188, 222, 79, 113, 61, 249, 200, 109, 190, 162, 179, 240, 190, 176, 5, 98, 189, 68, 166, 195, 62, 133, 90, 142, 189, 242, 180, 167, 189, 107, 97, 74, 189, 92, 195, 220, 62, 36, 205, 88, 62, 254, 151, 152, 62, 131, 161, 182, 189, 193, 241, 0, 190, 8, 128, 135, 190, 147, 254, 222, 61, 221, 186, 179, 62, 245, 169, 137, 188, 60, 64, 141, 189, 85, 119, 245, 61, 115, 124, 243, 189, 214, 98, 31, 190, 85, 127, 157, 189, 0, 144, 32, 62, 250, 94, 201, 61, 187, 112, 66, 61, 51, 33, 132, 189, 54, 58, 196, 58, 26, 88, 177, 189, 54, 225, 184, 61, 188, 122, 198, 188, 202, 167, 171, 61, 82, 93, 228, 61, 244, 145, 4, 190, 185, 22, 234, 60, 135, 7, 6, 62, 100, 88, 190, 60, 185, 81, 8, 190, 141, 206, 41, 190, 44, 84, 0, 188, 222, 123, 174, 60, 44, 221, 23, 61, 129, 51, 156, 61, 105, 249, 246, 189, 45, 59, 120, 61, 102, 206, 225, 188, 89, 194, 245, 189, 178, 234, 253, 189, 67, 123, 128, 61, 40, 48, 111, 191, 39, 225, 6, 187, 210, 9, 10, 190, 19, 199, 141, 61, 218, 181, 52, 190, 242, 87, 20, 191, 184, 125, 153, 61, 2, 242, 77, 188, 120, 77, 27, 62, 98, 140, 106, 62, 114, 1, 206, 61, 8, 242, 174, 191, 109, 162, 230, 62, 148, 203, 57, 62, 74, 229, 197, 60, 72, 109, 166, 61, 181, 106, 85, 61, 253, 152, 226, 189, 79, 47, 158, 191, 174, 110, 192, 61, 58, 171, 150, 61, 82, 230, 207, 190, 50, 147, 29, 190, 230, 95, 189, 187, 6, 249, 32, 62, 196, 38, 214, 62, 167, 21, 68, 62, 168, 123, 78, 190, 244, 243, 150, 190, 57, 240, 243, 60, 102, 81, 52, 60, 179, 145, 244, 62, 114, 192, 192, 189, 82, 192, 179, 188, 43, 233, 156, 190, 123, 59, 114, 190, 1, 112, 110, 61, 42, 168, 146, 190, 247, 102, 6, 61, 181, 38, 147, 62, 4, 199, 251, 62, 171, 126, 86, 61, 229, 11, 65, 191, 229, 42, 175, 190, 2, 215, 116, 189, 74, 161, 162, 62, 64, 114, 26, 186, 119, 177, 162, 190, 18, 193, 130, 189, 246, 175, 52, 189, 231, 201, 12, 62, 107, 217, 178, 189, 95, 120, 36, 189, 75, 48, 252, 61, 45, 245, 154, 61, 99, 38, 174, 62, 230, 72, 63, 62, 207, 202, 192, 190, 148, 175, 157, 190, 208, 36, 180, 61, 66, 82, 169, 190, 73, 150, 26, 61, 164, 61, 8, 62, 100, 33, 94, 190, 76, 33, 155, 190, 240, 182, 141, 62, 97, 177, 7, 191, 86, 95, 127, 190, 42, 104, 4, 191, 253, 101, 7, 192, 244, 201, 0, 191, 160, 34, 212, 60, 9, 57, 222, 62, 212, 155, 75, 63, 164, 74, 92, 190, 45, 4, 168, 190, 49, 21, 170, 191, 16, 228, 30, 62, 32, 239, 41, 62, 233, 234, 223, 190, 20, 72, 214, 62, 73, 182, 35, 191, 106, 99, 49, 62, 1, 201, 202, 60, 69, 216, 2, 190, 196, 159, 79, 190, 21, 220, 78, 62, 106, 30, 1, 61, 30, 196, 242, 188, 31, 92, 201, 190, 11, 15, 8, 191, 35, 95, 177, 62, 42, 146, 163, 190, 41, 25, 172, 189, 247, 87, 192, 190, 50, 28, 61, 190, 15, 15, 4, 189, 25, 216, 239, 59, 181, 191, 137, 189, 89, 12, 9, 62, 230, 136, 69, 61, 12, 148, 176, 190, 217, 151, 135, 189, 172, 159, 76, 61, 7, 98, 162, 189, 110, 18, 123, 61, 244, 11, 173, 62, 81, 35, 112, 191, 183, 247, 178, 62, 7, 225, 26, 190, 167, 119, 177, 190, 73, 163, 142, 62, 38, 223, 110, 62, 237, 49, 82, 62, 229, 12, 140, 191, 202, 225, 150, 189, 5, 183, 88, 61, 224, 156, 176, 190, 132, 118, 130, 190, 251, 34, 178, 60, 129, 237, 114, 62, 87, 204, 150, 61, 24, 10, 37, 60, 131, 102, 5, 191, 186, 100, 38, 190, 237, 71, 21, 62, 26, 195, 15, 189, 135, 139, 19, 62, 229, 115, 166, 190, 57, 234, 252, 62, 194, 86, 229, 190, 192, 162, 208, 62, 211, 51, 98, 186, 23, 214, 86, 191, 170, 200, 39, 61, 56, 155, 93, 63, 25, 44, 196, 61, 183, 34, 76, 62, 13, 250, 255, 61, 29, 255, 77, 191, 155, 197, 28, 62, 144, 76, 135, 190, 216, 111, 161, 62, 212, 96, 132, 61, 167, 5, 31, 62, 113, 199, 181, 62, 240, 171, 167, 191, 117, 115, 192, 61, 35, 47, 124, 189, 160, 176, 68, 191, 147, 178, 50, 190, 70, 230, 218, 190, 163, 139, 110, 62, 231, 192, 26, 63, 114, 74, 228, 62, 37, 72, 218, 190, 143, 233, 6, 191, 124, 167, 146, 62, 142, 19, 175, 189, 249, 205, 40, 63, 236, 189, 28, 190, 114, 22, 100, 190, 33, 157, 160, 61, 192, 162, 6, 62, 218, 161, 105, 190, 63, 240, 177, 190, 124, 30, 243, 190, 39, 86, 7, 191, 36, 238, 176, 62, 35, 196, 26, 188, 167, 191, 23, 190, 167, 198, 177, 190, 246, 65, 202, 190, 132, 55, 89, 60, 51, 138, 70, 190, 26, 141, 250, 190, 123, 133, 130, 190, 193, 229, 48, 61, 187, 191, 26, 62, 247, 252, 187, 61, 230, 7, 194, 187, 153, 223, 203, 189, 138, 254, 80, 62, 209, 176, 78, 191, 204, 97, 47, 189, 42, 112, 233, 190, 147, 3, 187, 189, 23, 80, 64, 190, 118, 171, 167, 61, 188, 37, 250, 189, 36, 204, 197, 189, 49, 193, 26, 190, 18, 1, 98, 190, 172, 31, 66, 189, 38, 167, 19, 61, 95, 56, 189, 60, 238, 4, 219, 188, 50, 184, 88, 190, 105, 149, 32, 62, 164, 84, 138, 190, 185, 159, 32, 62, 123, 244, 18, 62, 213, 70, 189, 189, 72, 134, 39, 191, 208, 133, 166, 190, 2, 97, 4, 62, 222, 188, 135, 189, 95, 136, 32, 190, 95, 0, 149, 62, 162, 17, 184, 189, 217, 105, 83, 62, 47, 177, 248, 188, 246, 17, 163, 59, 226, 216, 117, 62, 148, 226, 139, 189, 217, 199, 38, 61, 203, 31, 158, 189, 242, 7, 179, 190, 43, 248, 192, 190, 161, 27, 21, 60, 170, 73, 137, 189, 193, 176, 147, 62, 182, 97, 24, 61, 146, 181, 175, 190, 207, 211, 78, 190, 171, 229, 121, 191, 73, 12, 29, 189, 211, 228, 39, 190, 86, 206, 100, 62, 252, 145, 200, 61, 234, 90, 7, 62, 225, 54, 97, 188, 110, 42, 248, 60, 101, 16, 209, 60, 55, 72, 152, 190, 20, 186, 19, 63, 128, 41, 86, 189, 230, 226, 143, 61, 211, 154, 151, 191, 145, 173, 98, 189, 10, 116, 34, 190, 151, 108, 143, 190, 4, 129, 147, 190, 239, 46, 151, 190, 100, 228, 245, 190, 7, 112, 17, 62, 152, 192, 132, 62, 245, 220, 38, 190, 232, 50, 253, 190, 44, 253, 187, 189, 56, 96, 163, 190, 222, 103, 24, 61, 143, 104, 9, 190, 97, 126, 168, 190, 8, 5, 252, 61, 30, 156, 112, 190, 213, 237, 72, 62, 132, 119, 67, 189, 123, 142, 253, 188, 154, 59, 140, 62, 73, 241, 192, 190, 61, 75, 159, 60, 194, 118, 24, 190, 133, 232, 94, 62, 193, 189, 248, 189, 199, 128, 171, 190, 171, 119, 144, 62, 62, 57, 194, 189, 159, 9, 199, 60, 249, 169, 132, 190, 65, 52, 230, 190, 250, 198, 73, 62, 164, 185, 189, 189, 152, 239, 69, 62, 57, 90, 157, 191, 143, 58, 192, 61, 214, 208, 129, 189, 217, 224, 28, 191, 5, 152, 44, 61, 220, 24, 175, 190, 198, 15, 1, 62, 212, 247, 77, 62, 235, 13, 44, 62, 42, 193, 5, 191, 114, 184, 151, 189, 15, 200, 107, 189, 27, 236, 37, 190, 75, 182, 10, 63, 8, 3, 3, 190, 206, 243, 78, 62, 129, 83, 149, 190, 238, 82, 11, 62, 136, 236, 144, 189, 33, 41, 248, 189, 236, 71, 13, 62, 218, 174, 103, 60, 29, 116, 230, 61, 67, 39, 113, 62, 126, 18, 131, 62, 17, 182, 225, 189, 67, 203, 8, 62, 71, 146, 210, 61, 200, 5, 24, 62, 190, 39, 132, 62, 168, 198, 152, 188, 132, 138, 138, 62, 56, 92, 127, 191, 165, 73, 56, 62, 203, 172, 74, 62, 71, 93, 139, 190, 132, 158, 140, 61, 248, 213, 131, 61, 88, 174, 77, 189, 213, 40, 193, 62, 255, 70, 153, 61, 115, 185, 192, 190, 210, 197, 188, 190, 125, 241, 1, 62, 234, 165, 20, 62, 196, 204, 38, 61, 188, 236, 97, 189, 100, 77, 52, 189, 174, 236, 17, 190, 248, 158, 206, 189, 138, 78, 218, 188, 199, 181, 10, 189, 80, 3, 11, 190, 111, 58, 17, 190, 214, 124, 91, 61, 228, 100, 207, 60, 131, 88, 27, 62, 86, 184, 56, 60, 202, 145, 141, 187, 231, 2, 175, 61, 189, 87, 197, 61, 43, 164, 146, 188, 209, 57, 230, 189, 206, 196, 184, 189, 131, 130, 24, 190, 70, 126, 47, 188, 30, 149, 23, 190, 192, 104, 142, 189, 126, 24, 11, 62, 98, 172, 44, 61, 168, 4, 60, 190, 86, 72, 211, 189, 129, 142, 250, 189, 130, 194, 68, 189, 162, 237, 32, 62, 113, 99, 173, 189, 82, 154, 16, 61, 81, 215, 132, 61, 81, 86, 82, 62, 112, 97, 114, 188, 188, 189, 56, 190, 120, 36, 128, 62, 132, 104, 154, 61, 227, 135, 64, 62, 62, 115, 27, 189, 226, 48, 180, 190, 108, 136, 229, 190, 77, 225, 147, 189, 155, 200, 254, 62, 148, 129, 96, 62, 248, 255, 151, 62, 115, 97, 55, 191, 136, 196, 100, 189, 233, 28, 131, 62, 81, 69, 106, 190, 187, 166, 193, 61, 74, 23, 51, 62, 74, 202, 173, 61, 143, 195, 40, 190, 164, 77, 59, 190, 34, 158, 131, 60, 75, 212, 220, 190, 221, 92, 166, 61, 136, 91, 13, 63, 104, 28, 14, 63, 78, 124, 19, 62, 208, 155, 208, 189, 123, 230, 0, 62, 242, 7, 199, 61, 69, 59, 63, 189, 102, 160, 220, 61, 135, 52, 175, 61, 119, 135, 174, 60, 103, 16, 126, 61, 23, 168, 18, 62, 248, 225, 60, 190, 246, 185, 5, 190, 218, 78, 214, 61, 163, 49, 35, 190, 60, 184, 250, 189, 0, 169, 185, 61, 157, 12, 94, 61, 148, 84, 110, 188, 120, 91, 175, 189, 142, 220, 240, 189, 161, 73, 104, 189, 162, 140, 184, 188, 77, 110, 179, 189, 27, 73, 217, 188, 28, 62, 67, 60, 48, 200, 182, 189, 88, 74, 103, 189, 140, 0, 106, 61, 196, 217, 46, 190, 238, 203, 21, 189, 250, 176, 58, 61, 80, 89, 41, 190, 31, 245, 184, 189, 23, 228, 159, 189, 5, 43, 35, 190, 57, 50, 185, 189, 134, 132, 222, 60, 147, 157, 174, 190, 69, 23, 243, 190, 53, 9, 31, 62, 230, 127, 1, 60, 85, 175, 201, 61, 31, 154, 150, 190, 122, 34, 9, 62, 168, 160, 32, 191, 31, 176, 209, 62, 193, 216, 247, 189, 8, 213, 67, 190, 185, 187, 190, 190, 201, 202, 13, 190, 7, 226, 210, 62, 114, 220, 37, 191, 232, 212, 137, 190, 168, 159, 81, 189, 240, 89, 98, 189, 209, 1, 20, 63, 255, 103, 210, 60, 193, 230, 32, 190, 61, 87, 189, 62, 46, 136, 47, 62, 214, 83, 177, 62, 245, 251, 136, 60, 38, 9, 193, 190, 12, 61, 14, 191, 113, 218, 190, 62, 124, 145, 131, 62, 245, 30, 152, 189, 19, 14, 54, 62, 37, 115, 212, 190, 100, 189, 237, 190, 211, 55, 111, 191, 73, 214, 56, 62, 124, 107, 163, 188, 189, 63, 27, 62, 162, 206, 244, 189, 214, 140, 128, 62, 65, 29, 70, 61, 187, 233, 146, 62, 21, 76, 50, 190, 218, 8, 79, 191, 164, 217, 105, 190, 185, 64, 61, 190, 139, 153, 199, 62, 124, 240, 139, 191, 193, 8, 25, 190, 159, 235, 165, 60, 142, 146, 161, 190, 96, 2, 57, 190, 188, 249, 118, 190, 157, 29, 190, 189, 244, 255, 102, 62, 79, 62, 58, 189, 228, 119, 144, 62, 198, 231, 80, 190, 51, 32, 30, 191, 46, 188, 228, 190, 241, 220, 211, 190, 170, 179, 230, 189, 22, 154, 113, 60, 26, 188, 88, 62, 142, 55, 176, 190, 171, 243, 27, 189, 192, 67, 19, 62, 138, 25, 141, 62, 83, 73, 246, 61, 53, 112, 214, 190, 117, 28, 33, 191, 113, 237, 39, 190, 100, 118, 40, 62, 123, 15, 131, 191, 185, 220, 33, 190, 68, 230, 32, 62, 32, 164, 64, 191, 120, 249, 183, 62, 78, 102, 234, 187, 129, 197, 205, 189, 40, 38, 132, 62, 130, 93, 113, 62, 228, 73, 22, 62, 81, 9, 52, 191, 40, 196, 84, 190, 121, 105, 115, 62, 128, 67, 227, 190, 247, 4, 12, 190, 120, 239, 59, 62, 182, 196, 211, 62, 34, 6, 98, 62, 50, 192, 245, 189, 154, 139, 141, 190, 225, 74, 62, 62, 2, 190, 180, 190, 139, 94, 52, 189, 146, 60, 191, 62, 12, 188, 103, 61, 125, 229, 116, 190, 206, 70, 235, 61, 146, 201, 133, 62, 140, 50, 145, 190, 149, 13, 176, 189, 20, 81, 66, 189, 199, 187, 61, 62, 45, 48, 28, 191, 142, 137, 203, 189, 23, 149, 216, 62, 111, 185, 157, 190, 223, 182, 168, 61, 96, 243, 223, 60, 127, 69, 151, 190, 252, 90, 200, 187, 62, 226, 33, 190, 116, 220, 160, 187, 66, 74, 124, 191, 211, 63, 148, 190, 70, 97, 16, 190, 90, 231, 164, 190, 206, 185, 149, 189, 214, 160, 245, 189, 47, 218, 93, 187, 228, 170, 26, 189, 140, 159, 189, 188, 219, 0, 143, 190, 239, 208, 93, 190, 238, 30, 61, 190, 103, 28, 161, 61, 92, 238, 225, 61, 111, 180, 250, 60, 191, 80, 95, 188, 246, 75, 64, 59, 214, 16, 17, 62, 39, 41, 72, 61, 243, 196, 144, 189, 167, 246, 153, 61, 197, 217, 12, 189, 170, 28, 77, 62, 145, 42, 193, 189, 21, 126, 20, 62, 15, 89, 99, 188, 140, 100, 25, 62, 158, 123, 169, 62, 116, 188, 45, 189, 21, 204, 146, 62, 167, 194, 144, 62, 102, 65, 129, 61, 254, 127, 36, 191, 190, 84, 43, 62, 232, 225, 113, 189, 43, 103, 10, 190, 59, 183, 143, 62, 153, 56, 213, 189, 233, 0, 247, 61, 176, 232, 29, 62, 18, 241, 32, 62, 10, 24, 89, 190, 131, 15, 228, 188, 141, 128, 70, 62, 107, 22, 42, 62, 248, 132, 71, 62, 87, 42, 13, 191, 106, 245, 2, 191, 204, 166, 174, 62, 29, 117, 14, 191, 255, 141, 223, 59, 96, 2, 169, 190, 71, 221, 133, 190, 165, 94, 131, 61, 22, 23, 231, 62, 123, 164, 224, 190, 197, 93, 38, 190, 178, 74, 244, 189, 188, 65, 97, 190, 229, 113, 143, 62, 126, 196, 131, 191, 69, 173, 219, 59, 218, 64, 166, 186, 58, 59, 223, 190, 250, 150, 9, 190, 81, 211, 177, 190, 96, 18, 225, 189, 130, 187, 195, 62, 88, 16, 109, 62, 81, 62, 74, 190, 68, 111, 3, 189, 130, 30, 170, 189, 166, 5, 173, 190, 208, 226, 64, 190, 129, 52, 203, 60, 44, 12, 151, 60, 189, 78, 237, 188, 251, 40, 135, 190, 215, 225, 240, 190, 175, 163, 120, 190, 139, 222, 172, 61, 201, 117, 181, 61, 108, 42, 167, 61, 66, 110, 251, 189, 226, 53, 210, 189, 72, 151, 146, 61, 29, 255, 141, 62, 248, 107, 162, 189, 209, 131, 10, 62, 99, 133, 108, 190, 224, 35, 187, 62, 143, 202, 136, 62, 192, 43, 26, 190, 161, 140, 128, 187, 63, 161, 117, 61, 244, 131, 149, 61, 246, 213, 83, 190, 14, 208, 145, 61, 195, 251, 141, 189, 195, 17, 167, 189, 232, 38, 140, 62, 238, 106, 12, 189, 88, 108, 167, 188, 87, 213, 125, 188, 221, 250, 213, 59, 83, 62, 162, 61, 220, 114, 186, 189, 109, 115, 123, 61, 255, 232, 133, 61, 151, 33, 30, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 234, 89, 61, 232, 17, 146, 188, 51, 46, 184, 62, 184, 35, 138, 189, 70, 99, 170, 62, 1, 235, 139, 190, 46, 214, 74, 190, 64, 236, 215, 61, 38, 160, 100, 189, 157, 47, 238, 61, 41, 0, 170, 189, 82, 192, 13, 190, 15, 39, 45, 62, 134, 175, 105, 62, 115, 51, 55, 189, 42, 136, 32, 62, 6, 76, 245, 189, 111, 7, 17, 190, 136, 163, 124, 188, 100, 131, 65, 62, 21, 146, 48, 62, 105, 102, 250, 61, 141, 139, 188, 189, 139, 174, 191, 189, 24, 162, 12, 190, 211, 77, 147, 189, 203, 80, 99, 62, 47, 247, 56, 190, 0, 34, 11, 188, 84, 32, 153, 62, 143, 37, 243, 61, 0, 170, 95, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {14, 159, 175, 190, 171, 4, 237, 189, 202, 154, 167, 63, 235, 121, 207, 61, 238, 91, 63, 189, 83, 118, 128, 191, 192, 52, 79, 58, 155, 229, 97, 190, 69, 177, 219, 190, 63, 184, 4, 191, 99, 151, 54, 190, 122, 156, 19, 189, 186, 120, 30, 191, 186, 235, 194, 62, 154, 128, 157, 191, 92, 129, 217, 190, 25, 120, 117, 191, 167, 26, 237, 61, 8, 131, 125, 62, 176, 175, 205, 62, 38, 9, 146, 191, 119, 93, 83, 190, 113, 122, 124, 61, 51, 189, 217, 62, 9, 223, 97, 61, 177, 56, 92, 63, 235, 12, 34, 63, 153, 167, 160, 190, 236, 156, 162, 187, 16, 75, 118, 189, 187, 156, 233, 62, 119, 182, 95, 61, 117, 239, 22, 190, 166, 124, 141, 189, 69, 221, 130, 62, 136, 143, 231, 61, 244, 126, 155, 190, 69, 109, 178, 62, 191, 94, 160, 60, 3, 175, 130, 61, 224, 255, 180, 62, 192, 252, 96, 190, 103, 1, 2, 63, 11, 48, 189, 61, 15, 29, 124, 190, 134, 173, 34, 190, 98, 166, 154, 61, 172, 255, 220, 189, 163, 82, 15, 63, 101, 62, 48, 190, 8, 132, 8, 190, 215, 173, 141, 190, 156, 218, 84, 62, 68, 7, 59, 190, 255, 150, 242, 61, 159, 203, 134, 61, 109, 5, 169, 61, 120, 230, 105, 189, 158, 12, 181, 189, 16, 150, 108, 63, 53, 163, 137, 62, 231, 67, 156, 190, 236, 200, 55, 189, 226, 99, 131, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 127, 0, 62, 194, 222, 193, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {220, 162, 227, 63, 101, 136, 198, 191, 236, 58, 237, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {152, 21, 14, 64, 82, 154, 197, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0086/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}