// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {201, 143, 159, 190, 208, 204, 106, 63, 159, 244, 239, 62, 12, 167, 163, 190, 52, 21, 206, 191, 230, 31, 192, 190, 188, 232, 171, 190, 190, 183, 169, 188, 85, 122, 244, 190, 66, 35, 227, 190, 174, 201, 11, 62, 36, 105, 55, 191, 160, 178, 115, 61, 242, 252, 24, 190, 204, 238, 12, 63, 151, 252, 172, 190, 244, 178, 145, 63, 76, 95, 0, 63, 143, 211, 65, 62, 168, 40, 35, 190, 173, 245, 68, 63, 119, 219, 36, 191, 28, 134, 113, 191, 101, 33, 236, 189, 227, 77, 26, 190, 17, 143, 151, 191, 207, 174, 174, 61, 155, 57, 0, 190, 164, 161, 95, 191, 124, 92, 175, 62, 198, 63, 68, 62, 168, 59, 33, 63, 123, 37, 43, 190, 108, 94, 254, 190, 127, 102, 211, 63, 23, 206, 191, 62, 134, 153, 24, 63, 179, 183, 19, 63, 157, 155, 44, 62, 46, 104, 45, 63, 245, 217, 19, 191, 53, 204, 20, 190, 249, 216, 146, 190, 149, 35, 180, 191, 91, 142, 149, 190, 21, 105, 20, 63, 24, 65, 129, 63, 142, 210, 67, 62, 31, 158, 204, 62, 187, 29, 192, 190, 155, 54, 179, 62, 98, 247, 11, 61, 123, 173, 170, 60, 229, 64, 96, 190, 168, 11, 83, 63, 55, 203, 155, 190, 220, 165, 128, 190, 176, 107, 95, 189, 66, 31, 65, 191, 204, 108, 254, 190, 41, 53, 242, 62, 234, 128, 40, 190, 238, 53, 233, 62, 50, 20, 31, 63, 133, 232, 180, 191, 1, 168, 207, 190, 122, 156, 158, 190, 105, 34, 135, 190, 24, 144, 233, 61, 19, 219, 136, 62, 97, 12, 143, 190, 57, 158, 115, 62, 175, 91, 152, 190, 190, 166, 4, 191, 78, 137, 178, 190, 113, 126, 203, 62, 28, 137, 143, 63, 227, 221, 80, 62, 35, 251, 165, 62, 54, 187, 130, 63, 133, 116, 193, 62, 37, 62, 252, 62, 41, 139, 101, 191, 101, 188, 169, 190, 8, 88, 69, 189, 9, 185, 130, 190, 83, 28, 170, 190, 24, 193, 140, 61, 124, 252, 0, 191, 197, 48, 246, 190, 201, 102, 1, 63, 102, 151, 199, 189, 120, 113, 28, 191, 36, 166, 49, 63, 172, 119, 50, 63, 29, 79, 133, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 181, 163, 190, 165, 101, 122, 190, 183, 188, 196, 190, 203, 140, 4, 191, 139, 21, 198, 189, 34, 84, 157, 189, 95, 59, 196, 60, 141, 198, 154, 190, 241, 23, 182, 62, 223, 86, 197, 189, 84, 188, 182, 189, 129, 228, 58, 189, 51, 251, 53, 62, 68, 30, 35, 62, 112, 37, 155, 190, 55, 225, 163, 61, 119, 244, 244, 62, 142, 176, 221, 189, 28, 222, 62, 191, 122, 42, 245, 61, 14, 104, 66, 191, 38, 51, 114, 189, 66, 48, 24, 63, 218, 35, 134, 61, 191, 171, 132, 62, 38, 204, 248, 61, 140, 14, 72, 190, 198, 154, 8, 191, 118, 3, 3, 191, 164, 49, 110, 61, 116, 2, 180, 62, 139, 109, 193, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {246, 154, 41, 61, 226, 138, 180, 189, 205, 178, 77, 189, 16, 171, 149, 61, 124, 41, 211, 189, 148, 168, 255, 189, 150, 189, 144, 61, 67, 24, 197, 189, 109, 189, 124, 188, 236, 173, 2, 190, 34, 26, 142, 62, 224, 48, 148, 190, 132, 54, 70, 61, 133, 249, 47, 188, 201, 194, 148, 61, 234, 173, 45, 62, 238, 239, 38, 61, 161, 4, 196, 61, 119, 76, 151, 191, 250, 147, 102, 62, 215, 112, 27, 62, 67, 213, 246, 190, 137, 130, 179, 189, 186, 199, 192, 61, 63, 92, 179, 60, 181, 158, 186, 62, 148, 186, 1, 62, 105, 254, 20, 191, 65, 216, 58, 190, 254, 91, 137, 189, 168, 58, 45, 62, 28, 123, 53, 62, 37, 19, 6, 62, 162, 88, 132, 61, 236, 166, 53, 188, 80, 147, 157, 188, 222, 231, 14, 190, 223, 199, 80, 189, 254, 212, 198, 188, 16, 208, 142, 61, 94, 208, 250, 188, 85, 104, 34, 190, 48, 26, 46, 190, 220, 187, 12, 190, 106, 223, 229, 189, 44, 255, 205, 61, 232, 58, 47, 190, 224, 73, 184, 61, 100, 99, 4, 190, 199, 206, 33, 61, 72, 92, 4, 189, 155, 14, 89, 189, 97, 106, 48, 189, 22, 221, 32, 190, 139, 229, 139, 61, 46, 21, 164, 61, 184, 238, 7, 190, 55, 110, 25, 190, 91, 238, 188, 61, 88, 239, 14, 62, 129, 244, 52, 62, 190, 113, 46, 190, 117, 107, 192, 189, 169, 187, 6, 190, 241, 44, 93, 190, 236, 219, 125, 191, 236, 158, 225, 62, 6, 129, 11, 191, 136, 187, 93, 62, 84, 88, 107, 62, 49, 185, 71, 61, 83, 165, 123, 189, 228, 66, 233, 61, 146, 40, 155, 190, 21, 49, 141, 190, 133, 179, 203, 62, 151, 81, 144, 61, 98, 10, 199, 62, 230, 221, 182, 191, 149, 77, 166, 190, 7, 96, 60, 189, 219, 105, 238, 189, 210, 76, 15, 60, 144, 208, 203, 189, 155, 146, 178, 190, 151, 0, 0, 63, 163, 140, 121, 62, 139, 61, 123, 62, 165, 231, 229, 60, 131, 82, 223, 190, 72, 158, 15, 190, 154, 77, 110, 62, 17, 178, 252, 62, 123, 201, 65, 190, 247, 43, 131, 62, 117, 210, 248, 190, 253, 253, 108, 189, 179, 139, 163, 61, 184, 168, 121, 189, 152, 144, 201, 188, 45, 46, 140, 189, 74, 154, 21, 190, 87, 186, 246, 189, 173, 8, 26, 190, 165, 215, 173, 61, 177, 16, 213, 61, 102, 69, 88, 188, 124, 206, 182, 61, 124, 148, 133, 61, 137, 31, 193, 189, 165, 175, 106, 61, 14, 97, 248, 189, 34, 239, 169, 61, 176, 152, 14, 189, 217, 49, 21, 62, 142, 123, 116, 189, 4, 157, 242, 61, 141, 217, 247, 60, 78, 167, 40, 190, 6, 186, 26, 190, 60, 42, 174, 189, 16, 103, 166, 189, 41, 75, 177, 61, 160, 245, 129, 189, 52, 126, 61, 189, 238, 172, 230, 189, 213, 85, 232, 61, 22, 115, 180, 61, 143, 68, 66, 190, 17, 70, 6, 190, 208, 78, 35, 190, 28, 147, 133, 61, 151, 20, 235, 60, 39, 25, 133, 189, 112, 65, 20, 187, 77, 111, 223, 189, 55, 96, 59, 62, 188, 108, 151, 188, 50, 141, 112, 61, 224, 30, 236, 61, 253, 211, 168, 62, 25, 157, 195, 61, 79, 85, 162, 187, 197, 216, 106, 62, 34, 254, 116, 187, 198, 134, 4, 62, 31, 41, 247, 190, 57, 53, 73, 62, 174, 113, 72, 61, 241, 90, 2, 60, 208, 80, 147, 61, 110, 51, 135, 190, 116, 91, 31, 61, 123, 106, 201, 62, 188, 200, 139, 61, 17, 214, 66, 190, 104, 115, 209, 189, 198, 171, 122, 189, 161, 81, 9, 62, 148, 69, 143, 62, 40, 211, 1, 190, 119, 181, 244, 61, 206, 176, 19, 190, 193, 25, 24, 191, 215, 253, 12, 62, 4, 112, 171, 189, 70, 0, 0, 62, 130, 69, 187, 60, 131, 45, 154, 190, 35, 148, 147, 189, 72, 126, 144, 188, 79, 167, 136, 190, 128, 50, 18, 62, 177, 26, 184, 61, 146, 97, 13, 62, 89, 68, 58, 61, 250, 208, 160, 189, 136, 252, 185, 62, 124, 102, 159, 190, 103, 204, 102, 190, 24, 61, 180, 62, 209, 91, 65, 191, 164, 28, 73, 190, 173, 40, 178, 189, 120, 43, 131, 60, 119, 162, 119, 62, 36, 9, 170, 62, 160, 11, 168, 189, 155, 133, 179, 189, 212, 165, 185, 190, 31, 30, 131, 189, 139, 203, 11, 63, 28, 148, 241, 189, 43, 121, 52, 190, 216, 155, 21, 189, 81, 244, 13, 189, 55, 84, 212, 189, 214, 254, 222, 189, 172, 130, 2, 62, 192, 203, 21, 189, 149, 43, 162, 61, 178, 231, 145, 189, 94, 42, 175, 61, 37, 107, 242, 189, 230, 146, 25, 190, 4, 198, 51, 189, 203, 235, 215, 61, 172, 234, 157, 61, 9, 6, 56, 189, 50, 196, 91, 61, 68, 117, 250, 189, 20, 42, 87, 190, 115, 4, 213, 61, 120, 48, 245, 61, 130, 61, 39, 190, 209, 223, 44, 62, 232, 249, 39, 189, 197, 37, 25, 62, 108, 34, 141, 61, 249, 153, 146, 61, 192, 181, 48, 190, 162, 39, 232, 189, 75, 234, 190, 61, 124, 74, 4, 190, 212, 218, 250, 190, 128, 222, 48, 61, 28, 6, 146, 189, 80, 146, 42, 62, 134, 157, 116, 190, 114, 0, 33, 191, 81, 222, 136, 190, 84, 145, 74, 62, 177, 81, 153, 59, 223, 180, 255, 60, 77, 85, 120, 61, 212, 168, 167, 190, 134, 140, 246, 61, 38, 132, 160, 62, 194, 49, 130, 62, 34, 79, 43, 62, 168, 253, 2, 62, 91, 156, 71, 62, 116, 108, 197, 190, 33, 227, 212, 60, 162, 107, 161, 60, 39, 177, 5, 190, 92, 51, 154, 189, 195, 167, 63, 190, 164, 60, 72, 62, 123, 25, 61, 62, 141, 112, 24, 190, 200, 124, 62, 61, 28, 212, 126, 190, 61, 112, 132, 61, 190, 155, 11, 190, 233, 88, 162, 62, 241, 85, 191, 189, 16, 47, 206, 62, 2, 14, 155, 190, 53, 101, 66, 62, 79, 48, 134, 190, 145, 164, 141, 190, 57, 62, 106, 60, 194, 34, 224, 62, 27, 73, 52, 62, 2, 218, 31, 62, 35, 170, 239, 61, 141, 182, 240, 190, 124, 15, 6, 190, 160, 251, 101, 61, 48, 206, 125, 62, 82, 22, 2, 62, 75, 121, 9, 62, 218, 1, 82, 62, 223, 244, 52, 191, 190, 29, 23, 61, 22, 142, 134, 61, 99, 144, 167, 190, 93, 119, 196, 189, 236, 148, 90, 190, 156, 234, 108, 62, 90, 120, 148, 62, 254, 191, 123, 62, 99, 44, 11, 190, 28, 186, 242, 189, 73, 183, 237, 61, 119, 184, 48, 190, 176, 72, 169, 62, 23, 185, 67, 187, 142, 54, 229, 61, 204, 161, 177, 189, 64, 190, 69, 61, 70, 83, 105, 191, 76, 249, 236, 191, 126, 215, 183, 191, 1, 53, 237, 62, 131, 149, 65, 190, 219, 169, 82, 190, 172, 195, 110, 60, 186, 74, 165, 190, 52, 133, 131, 62, 171, 79, 174, 189, 93, 119, 197, 189, 71, 140, 104, 60, 7, 37, 88, 190, 65, 103, 44, 62, 138, 145, 46, 191, 162, 184, 65, 62, 63, 189, 131, 61, 69, 225, 234, 189, 230, 73, 209, 188, 169, 238, 54, 191, 8, 143, 137, 62, 243, 245, 138, 62, 80, 20, 36, 191, 51, 220, 127, 190, 177, 83, 131, 190, 189, 109, 124, 62, 58, 230, 7, 62, 128, 73, 242, 61, 139, 254, 151, 62, 190, 70, 89, 62, 137, 37, 243, 190, 204, 18, 186, 190, 53, 26, 79, 190, 211, 151, 89, 190, 74, 85, 62, 190, 141, 204, 208, 189, 162, 6, 12, 61, 230, 78, 26, 62, 223, 10, 141, 190, 16, 34, 42, 190, 45, 189, 38, 188, 13, 11, 21, 61, 129, 22, 46, 61, 196, 193, 182, 188, 219, 15, 193, 60, 98, 14, 240, 190, 171, 188, 192, 189, 45, 185, 203, 60, 26, 234, 237, 62, 234, 105, 222, 189, 165, 214, 234, 189, 199, 172, 223, 189, 114, 178, 0, 62, 194, 129, 88, 62, 74, 143, 222, 62, 215, 229, 88, 189, 247, 63, 242, 189, 50, 71, 65, 190, 47, 59, 151, 60, 157, 249, 182, 62, 245, 169, 137, 188, 60, 64, 141, 189, 85, 119, 245, 61, 115, 124, 243, 189, 214, 98, 31, 190, 85, 127, 157, 189, 0, 144, 32, 62, 250, 94, 201, 61, 187, 112, 66, 61, 51, 33, 132, 189, 54, 58, 196, 58, 26, 88, 177, 189, 54, 225, 184, 61, 188, 122, 198, 188, 202, 167, 171, 61, 82, 93, 228, 61, 244, 145, 4, 190, 185, 22, 234, 60, 135, 7, 6, 62, 100, 88, 190, 60, 185, 81, 8, 190, 141, 206, 41, 190, 44, 84, 0, 188, 222, 123, 174, 60, 44, 221, 23, 61, 129, 51, 156, 61, 105, 249, 246, 189, 45, 59, 120, 61, 102, 206, 225, 188, 89, 194, 245, 189, 178, 234, 253, 189, 67, 123, 128, 61, 126, 100, 91, 191, 105, 81, 171, 60, 19, 110, 153, 189, 89, 81, 248, 61, 50, 234, 58, 190, 0, 238, 230, 190, 90, 95, 137, 61, 10, 77, 160, 61, 215, 172, 164, 62, 158, 92, 117, 62, 248, 190, 176, 61, 76, 225, 128, 191, 89, 24, 214, 62, 125, 81, 35, 62, 126, 223, 92, 61, 250, 91, 123, 60, 24, 121, 174, 61, 34, 234, 181, 189, 111, 253, 148, 191, 12, 169, 247, 61, 180, 89, 199, 186, 228, 116, 194, 190, 201, 212, 150, 189, 175, 61, 123, 188, 195, 34, 72, 62, 242, 116, 178, 62, 162, 241, 168, 61, 104, 41, 1, 190, 4, 92, 82, 190, 91, 105, 87, 61, 133, 110, 173, 186, 40, 159, 199, 62, 97, 181, 185, 61, 113, 240, 24, 61, 161, 5, 47, 190, 132, 182, 198, 189, 150, 201, 165, 61, 200, 24, 231, 189, 4, 225, 36, 61, 238, 136, 112, 62, 148, 134, 181, 62, 167, 55, 165, 61, 23, 97, 202, 190, 239, 13, 138, 188, 216, 98, 64, 189, 30, 225, 130, 62, 11, 79, 117, 61, 75, 43, 120, 190, 99, 141, 240, 189, 98, 18, 29, 61, 176, 135, 225, 189, 238, 217, 223, 189, 90, 224, 10, 61, 173, 174, 60, 60, 81, 179, 70, 61, 148, 207, 164, 62, 223, 91, 93, 62, 139, 235, 136, 190, 85, 26, 167, 189, 183, 240, 105, 61, 95, 234, 88, 190, 69, 188, 64, 189, 153, 194, 4, 62, 84, 169, 246, 189, 43, 174, 3, 190, 30, 19, 116, 62, 76, 207, 232, 190, 191, 212, 48, 190, 72, 28, 248, 190, 35, 239, 231, 191, 165, 112, 242, 190, 169, 225, 13, 62, 217, 58, 221, 62, 72, 25, 74, 63, 173, 186, 132, 190, 109, 101, 137, 190, 113, 239, 139, 191, 245, 240, 39, 61, 132, 201, 7, 62, 83, 86, 237, 188, 227, 55, 206, 62, 197, 138, 5, 191, 80, 117, 21, 62, 100, 143, 218, 61, 241, 159, 22, 190, 71, 113, 134, 190, 14, 223, 139, 62, 157, 133, 64, 59, 24, 64, 130, 61, 177, 212, 200, 190, 226, 107, 20, 190, 150, 54, 181, 62, 236, 125, 176, 190, 195, 124, 174, 57, 105, 108, 179, 190, 47, 79, 160, 61, 65, 252, 4, 61, 140, 4, 182, 61, 210, 42, 194, 189, 98, 61, 237, 61, 147, 193, 197, 188, 150, 168, 252, 189, 103, 24, 4, 190, 102, 208, 62, 62, 43, 135, 116, 186, 3, 37, 41, 189, 254, 246, 198, 62, 149, 86, 237, 190, 211, 115, 216, 62, 233, 51, 41, 190, 133, 22, 132, 190, 51, 90, 192, 62, 106, 230, 139, 62, 181, 224, 52, 62, 90, 56, 131, 191, 239, 3, 242, 189, 195, 130, 222, 189, 123, 207, 154, 190, 162, 253, 74, 190, 5, 95, 52, 188, 48, 96, 73, 62, 164, 121, 74, 62, 205, 157, 218, 61, 187, 31, 224, 190, 163, 10, 38, 190, 243, 39, 232, 61, 198, 161, 44, 189, 142, 138, 67, 62, 34, 153, 57, 190, 124, 41, 209, 62, 8, 206, 228, 190, 19, 53, 219, 62, 20, 151, 179, 189, 222, 241, 63, 191, 55, 161, 70, 188, 255, 78, 14, 63, 24, 76, 44, 62, 237, 231, 105, 62, 81, 136, 30, 62, 28, 58, 16, 191, 151, 164, 106, 61, 226, 221, 144, 190, 87, 81, 111, 62, 112, 145, 142, 188, 191, 218, 254, 61, 107, 201, 195, 62, 126, 135, 149, 191, 115, 239, 199, 61, 191, 194, 144, 189, 118, 97, 56, 191, 255, 61, 236, 189, 25, 249, 213, 190, 197, 28, 108, 62, 140, 154, 12, 63, 140, 148, 136, 62, 139, 228, 242, 190, 232, 190, 9, 191, 185, 97, 151, 62, 193, 113, 187, 189, 14, 175, 217, 62, 218, 158, 25, 190, 255, 193, 18, 190, 233, 16, 55, 62, 154, 212, 101, 62, 146, 60, 91, 190, 50, 138, 127, 190, 233, 219, 212, 190, 211, 95, 141, 190, 146, 96, 199, 62, 173, 23, 152, 61, 4, 208, 144, 189, 52, 34, 221, 189, 105, 162, 78, 190, 221, 196, 207, 61, 247, 224, 207, 189, 98, 22, 166, 190, 45, 244, 72, 190, 115, 127, 247, 61, 214, 255, 29, 62, 70, 80, 65, 62, 230, 7, 194, 187, 30, 206, 66, 60, 133, 32, 172, 62, 118, 250, 48, 191, 94, 196, 130, 61, 238, 90, 143, 190, 147, 3, 187, 189, 75, 175, 32, 190, 234, 67, 32, 62, 68, 192, 212, 188, 115, 29, 164, 59, 246, 166, 26, 190, 111, 126, 193, 189, 198, 79, 173, 60, 25, 77, 168, 61, 80, 225, 77, 61, 131, 126, 121, 189, 51, 96, 197, 189, 127, 116, 1, 62, 250, 220, 223, 189, 254, 239, 25, 188, 133, 195, 233, 61, 64, 77, 147, 188, 49, 181, 143, 190, 50, 186, 117, 190, 159, 145, 5, 62, 88, 104, 84, 60, 114, 146, 67, 187, 147, 56, 137, 62, 52, 92, 193, 189, 48, 180, 74, 61, 146, 167, 84, 188, 58, 103, 182, 59, 183, 113, 96, 62, 202, 61, 162, 189, 76, 1, 205, 60, 181, 25, 58, 189, 35, 193, 30, 190, 131, 79, 48, 190, 194, 105, 136, 188, 0, 3, 2, 189, 215, 208, 148, 62, 101, 60, 192, 61, 194, 199, 74, 190, 98, 181, 138, 190, 213, 143, 82, 191, 17, 76, 24, 62, 154, 65, 241, 186, 203, 161, 101, 62, 250, 27, 174, 188, 7, 110, 22, 62, 173, 141, 244, 189, 81, 42, 132, 61, 139, 101, 217, 61, 183, 72, 231, 189, 121, 15, 153, 62, 38, 35, 20, 189, 134, 21, 59, 62, 79, 42, 112, 191, 196, 91, 143, 189, 196, 127, 224, 189, 210, 62, 49, 190, 59, 232, 196, 190, 216, 7, 152, 189, 94, 76, 161, 190, 33, 178, 38, 62, 36, 149, 131, 62, 203, 1, 139, 189, 245, 232, 43, 190, 136, 162, 12, 190, 121, 86, 181, 190, 70, 227, 15, 61, 181, 191, 178, 188, 185, 125, 124, 190, 206, 115, 1, 62, 217, 188, 65, 190, 136, 72, 20, 62, 126, 98, 109, 61, 101, 103, 51, 189, 141, 141, 141, 62, 131, 229, 178, 190, 20, 225, 44, 189, 212, 238, 220, 189, 40, 111, 143, 62, 5, 184, 59, 60, 175, 50, 249, 188, 60, 47, 115, 62, 4, 104, 13, 190, 57, 149, 232, 60, 176, 191, 88, 190, 193, 78, 161, 190, 232, 228, 68, 62, 34, 239, 15, 190, 46, 225, 93, 62, 215, 94, 137, 191, 88, 141, 196, 61, 223, 48, 123, 61, 129, 12, 247, 190, 221, 28, 83, 190, 53, 36, 143, 190, 158, 57, 221, 61, 2, 140, 62, 62, 38, 108, 66, 62, 155, 7, 203, 190, 253, 65, 102, 189, 95, 100, 93, 189, 35, 75, 245, 189, 29, 19, 231, 62, 8, 191, 91, 189, 89, 9, 76, 62, 206, 146, 165, 190, 151, 82, 221, 61, 250, 221, 15, 190, 26, 141, 105, 188, 187, 38, 159, 61, 8, 12, 3, 57, 108, 125, 35, 189, 43, 236, 135, 61, 228, 238, 20, 62, 90, 144, 141, 61, 221, 121, 36, 62, 62, 103, 145, 61, 34, 126, 38, 62, 53, 41, 150, 62, 180, 238, 50, 189, 71, 32, 127, 62, 94, 10, 107, 191, 85, 109, 25, 62, 188, 0, 5, 61, 86, 76, 121, 190, 79, 27, 50, 61, 118, 172, 9, 189, 81, 230, 188, 189, 12, 195, 215, 62, 56, 79, 243, 61, 174, 56, 160, 190, 212, 167, 187, 190, 166, 228, 214, 61, 145, 218, 26, 62, 144, 8, 42, 61, 188, 236, 97, 189, 100, 77, 52, 189, 174, 236, 17, 190, 248, 158, 206, 189, 138, 78, 218, 188, 199, 181, 10, 189, 80, 3, 11, 190, 111, 58, 17, 190, 214, 124, 91, 61, 228, 100, 207, 60, 131, 88, 27, 62, 86, 184, 56, 60, 202, 145, 141, 187, 231, 2, 175, 61, 189, 87, 197, 61, 43, 164, 146, 188, 209, 57, 230, 189, 206, 196, 184, 189, 131, 130, 24, 190, 70, 126, 47, 188, 30, 149, 23, 190, 192, 104, 142, 189, 126, 24, 11, 62, 98, 172, 44, 61, 168, 4, 60, 190, 86, 72, 211, 189, 129, 142, 250, 189, 130, 194, 68, 189, 162, 237, 32, 62, 113, 99, 173, 189, 82, 154, 16, 61, 81, 215, 132, 61, 200, 15, 73, 62, 51, 165, 11, 61, 29, 169, 11, 190, 162, 98, 146, 62, 92, 143, 168, 61, 192, 3, 235, 61, 233, 189, 57, 189, 252, 29, 202, 189, 176, 25, 172, 189, 51, 99, 129, 61, 134, 219, 0, 63, 104, 183, 168, 61, 251, 67, 69, 62, 147, 84, 4, 191, 199, 29, 207, 59, 197, 185, 223, 61, 224, 245, 63, 190, 137, 121, 3, 62, 212, 41, 109, 62, 153, 195, 36, 62, 150, 32, 94, 189, 136, 175, 138, 189, 213, 166, 69, 61, 199, 232, 174, 190, 44, 92, 41, 62, 60, 28, 197, 62, 93, 165, 185, 62, 132, 173, 42, 62, 239, 47, 162, 189, 149, 14, 84, 62, 102, 72, 241, 61, 27, 5, 55, 190, 102, 160, 220, 61, 135, 52, 175, 61, 119, 135, 174, 60, 103, 16, 126, 61, 23, 168, 18, 62, 248, 225, 60, 190, 246, 185, 5, 190, 218, 78, 214, 61, 163, 49, 35, 190, 60, 184, 250, 189, 0, 169, 185, 61, 157, 12, 94, 61, 148, 84, 110, 188, 120, 91, 175, 189, 142, 220, 240, 189, 161, 73, 104, 189, 162, 140, 184, 188, 77, 110, 179, 189, 27, 73, 217, 188, 28, 62, 67, 60, 48, 200, 182, 189, 88, 74, 103, 189, 140, 0, 106, 61, 196, 217, 46, 190, 238, 203, 21, 189, 250, 176, 58, 61, 80, 89, 41, 190, 31, 245, 184, 189, 23, 228, 159, 189, 5, 43, 35, 190, 57, 50, 185, 189, 134, 132, 222, 60, 80, 100, 212, 190, 97, 167, 253, 190, 35, 192, 252, 61, 146, 209, 251, 188, 134, 239, 142, 61, 209, 95, 163, 190, 105, 178, 231, 61, 212, 5, 1, 191, 178, 148, 167, 62, 39, 179, 218, 189, 210, 82, 250, 189, 132, 164, 160, 61, 219, 55, 130, 189, 223, 96, 230, 62, 202, 33, 41, 191, 39, 139, 28, 190, 22, 162, 82, 189, 249, 154, 215, 189, 147, 5, 201, 62, 145, 26, 118, 187, 40, 42, 20, 190, 127, 112, 181, 62, 48, 139, 83, 62, 162, 84, 183, 62, 155, 227, 46, 60, 49, 104, 114, 190, 253, 207, 208, 190, 106, 171, 82, 62, 121, 38, 55, 62, 129, 58, 237, 189, 52, 32, 91, 62, 191, 205, 157, 190, 123, 171, 140, 190, 182, 128, 33, 191, 193, 98, 131, 62, 94, 243, 151, 61, 109, 13, 92, 62, 6, 195, 75, 61, 163, 25, 157, 62, 88, 133, 28, 61, 121, 21, 81, 62, 53, 52, 208, 189, 217, 37, 0, 191, 155, 120, 54, 61, 40, 19, 53, 190, 116, 242, 173, 62, 157, 63, 58, 191, 91, 118, 165, 189, 98, 143, 43, 187, 7, 201, 100, 190, 118, 74, 32, 191, 55, 137, 238, 189, 204, 7, 6, 61, 85, 13, 206, 61, 80, 179, 242, 188, 252, 193, 154, 62, 163, 134, 255, 188, 85, 110, 3, 191, 107, 139, 45, 190, 156, 204, 127, 190, 207, 168, 197, 189, 71, 69, 28, 190, 103, 204, 53, 62, 36, 34, 103, 190, 9, 77, 219, 61, 46, 14, 173, 61, 192, 13, 147, 62, 206, 28, 16, 62, 50, 54, 52, 190, 215, 41, 59, 190, 199, 124, 56, 190, 140, 210, 100, 187, 76, 106, 240, 190, 82, 105, 34, 61, 104, 243, 196, 62, 62, 172, 177, 190, 231, 99, 179, 62, 47, 39, 45, 190, 160, 253, 22, 190, 87, 205, 154, 62, 184, 85, 23, 62, 142, 85, 11, 62, 135, 137, 171, 190, 13, 103, 108, 190, 36, 10, 175, 62, 245, 197, 14, 191, 225, 49, 45, 190, 155, 231, 161, 61, 113, 12, 163, 62, 81, 100, 158, 62, 98, 165, 9, 62, 253, 71, 88, 190, 184, 200, 102, 62, 108, 3, 187, 190, 3, 114, 224, 189, 148, 173, 207, 62, 4, 199, 157, 60, 45, 193, 128, 190, 96, 146, 78, 61, 169, 128, 93, 62, 75, 151, 176, 189, 29, 244, 9, 61, 129, 63, 188, 61, 156, 140, 58, 62, 65, 115, 80, 190, 53, 213, 143, 61, 165, 107, 12, 63, 225, 2, 83, 190, 140, 61, 12, 62, 46, 112, 228, 57, 208, 94, 152, 190, 160, 235, 121, 61, 75, 194, 236, 189, 246, 122, 199, 189, 241, 58, 44, 191, 113, 90, 213, 190, 143, 100, 129, 189, 219, 135, 174, 190, 9, 147, 85, 60, 228, 175, 43, 189, 23, 239, 254, 189, 36, 110, 46, 61, 229, 8, 189, 61, 55, 243, 136, 190, 10, 43, 108, 190, 221, 56, 117, 190, 57, 190, 175, 61, 40, 136, 68, 62, 119, 184, 36, 62, 216, 241, 17, 189, 224, 235, 84, 189, 82, 218, 173, 61, 59, 112, 61, 189, 216, 79, 128, 188, 15, 191, 247, 187, 186, 38, 72, 189, 148, 7, 132, 189, 49, 172, 129, 190, 90, 23, 254, 187, 97, 240, 164, 60, 18, 124, 65, 62, 245, 97, 200, 62, 72, 171, 88, 189, 220, 163, 169, 62, 118, 57, 106, 62, 248, 252, 101, 60, 20, 63, 63, 191, 222, 20, 1, 62, 240, 155, 84, 189, 73, 32, 1, 190, 207, 237, 30, 62, 142, 113, 77, 190, 103, 179, 185, 61, 121, 123, 56, 62, 76, 144, 77, 62, 43, 165, 80, 190, 65, 207, 138, 189, 33, 10, 24, 62, 24, 62, 32, 62, 140, 43, 133, 62, 128, 209, 19, 191, 146, 31, 10, 191, 174, 47, 189, 62, 176, 191, 239, 190, 61, 238, 38, 188, 164, 214, 63, 190, 213, 148, 103, 190, 41, 51, 210, 61, 107, 201, 127, 62, 51, 166, 200, 190, 111, 222, 120, 60, 254, 104, 62, 189, 158, 233, 51, 190, 220, 113, 141, 62, 38, 216, 132, 191, 171, 59, 156, 61, 36, 236, 187, 185, 154, 27, 93, 190, 169, 150, 199, 190, 1, 137, 151, 190, 50, 79, 195, 186, 47, 26, 147, 62, 101, 253, 128, 62, 78, 10, 60, 190, 185, 248, 197, 60, 30, 63, 161, 186, 240, 97, 239, 189, 10, 52, 21, 190, 129, 52, 203, 60, 67, 178, 205, 189, 217, 207, 9, 189, 232, 217, 51, 190, 186, 0, 70, 190, 132, 125, 138, 190, 215, 116, 155, 61, 94, 131, 153, 61, 35, 124, 92, 61, 251, 12, 59, 60, 144, 108, 224, 189, 98, 19, 6, 62, 157, 64, 39, 62, 207, 167, 220, 189, 100, 28, 107, 61, 224, 10, 183, 189, 192, 216, 191, 62, 111, 84, 147, 62, 65, 122, 42, 190, 223, 244, 145, 60, 195, 16, 254, 60, 165, 205, 78, 61, 18, 218, 194, 190, 234, 194, 96, 61, 120, 203, 188, 188, 131, 237, 6, 189, 77, 139, 137, 62, 104, 64, 115, 189, 67, 208, 53, 187, 8, 99, 7, 60, 116, 108, 144, 61, 149, 118, 35, 61, 52, 3, 223, 189, 91, 232, 48, 61, 76, 120, 161, 61, 30, 26, 52, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 114, 223, 61, 232, 17, 146, 188, 179, 18, 177, 62, 184, 35, 138, 189, 55, 236, 161, 62, 138, 17, 152, 190, 46, 214, 74, 190, 228, 116, 189, 61, 159, 7, 82, 189, 24, 130, 44, 61, 36, 23, 242, 189, 82, 192, 13, 190, 218, 121, 51, 62, 193, 172, 59, 62, 182, 206, 4, 58, 136, 45, 102, 62, 230, 67, 22, 190, 88, 51, 55, 61, 24, 183, 21, 61, 83, 200, 111, 62, 43, 93, 2, 61, 207, 4, 211, 61, 141, 139, 188, 189, 182, 205, 135, 189, 24, 162, 12, 190, 248, 184, 23, 187, 156, 112, 64, 62, 92, 1, 84, 190, 173, 70, 70, 61, 100, 77, 106, 62, 67, 217, 12, 62, 18, 161, 71, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 246, 161, 190, 171, 4, 237, 189, 66, 67, 158, 63, 235, 121, 207, 61, 249, 126, 83, 60, 103, 166, 86, 191, 192, 52, 79, 58, 67, 44, 111, 190, 253, 125, 149, 190, 179, 73, 223, 190, 158, 95, 48, 190, 122, 156, 19, 189, 250, 69, 19, 191, 223, 42, 41, 62, 3, 114, 136, 191, 65, 251, 232, 190, 161, 48, 81, 191, 205, 114, 19, 62, 226, 8, 191, 61, 80, 170, 161, 62, 123, 102, 68, 191, 254, 161, 97, 190, 113, 122, 124, 61, 144, 61, 163, 62, 9, 223, 97, 61, 72, 212, 56, 63, 124, 143, 175, 62, 68, 238, 50, 190, 90, 161, 157, 188, 217, 55, 179, 188, 26, 127, 167, 62, 92, 119, 175, 60, 52, 146, 26, 190, 166, 124, 141, 189, 151, 50, 140, 62, 136, 143, 231, 61, 93, 162, 150, 190, 226, 166, 146, 62, 191, 94, 160, 60, 32, 130, 191, 189, 181, 170, 182, 62, 44, 88, 165, 190, 124, 93, 46, 62, 11, 48, 189, 61, 154, 49, 50, 190, 57, 131, 204, 189, 39, 177, 22, 62, 92, 167, 175, 189, 172, 119, 255, 62, 155, 220, 27, 190, 161, 82, 236, 188, 10, 177, 189, 60, 41, 169, 139, 62, 220, 94, 87, 190, 255, 150, 242, 61, 25, 8, 41, 62, 109, 5, 169, 61, 116, 188, 223, 61, 41, 61, 9, 190, 242, 176, 83, 63, 74, 105, 150, 62, 40, 41, 164, 190, 230, 45, 65, 190, 143, 206, 65, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 191, 32, 62, 43, 47, 140, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {231, 73, 151, 190, 224, 89, 208, 63, 212, 187, 42, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {60, 191, 118, 191, 106, 233, 26, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0086/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}