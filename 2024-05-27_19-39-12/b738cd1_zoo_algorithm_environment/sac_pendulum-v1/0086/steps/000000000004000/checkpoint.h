// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {193, 72, 236, 189, 71, 31, 28, 63, 47, 46, 2, 63, 189, 235, 9, 191, 24, 50, 100, 191, 95, 179, 246, 190, 108, 133, 139, 190, 255, 73, 142, 60, 60, 248, 240, 190, 2, 131, 44, 191, 206, 33, 26, 63, 22, 18, 74, 191, 109, 247, 164, 189, 81, 100, 178, 190, 146, 184, 13, 63, 247, 3, 153, 189, 222, 156, 28, 61, 230, 185, 57, 63, 202, 30, 15, 62, 217, 60, 6, 191, 19, 242, 97, 63, 75, 65, 99, 191, 35, 107, 166, 190, 130, 199, 63, 189, 64, 234, 167, 190, 248, 7, 32, 191, 124, 194, 37, 62, 133, 84, 202, 189, 176, 170, 17, 191, 226, 167, 216, 62, 24, 168, 182, 59, 220, 193, 39, 63, 159, 13, 99, 190, 20, 186, 175, 190, 118, 81, 31, 63, 29, 119, 5, 63, 62, 250, 17, 63, 221, 60, 190, 62, 137, 38, 60, 62, 251, 229, 48, 63, 159, 121, 149, 190, 238, 222, 13, 190, 57, 226, 234, 190, 179, 33, 31, 191, 11, 254, 180, 190, 17, 9, 10, 63, 34, 252, 86, 63, 172, 133, 147, 62, 24, 184, 4, 63, 26, 111, 186, 190, 220, 185, 185, 62, 107, 14, 66, 190, 14, 223, 26, 62, 101, 129, 107, 190, 171, 251, 137, 62, 178, 182, 21, 191, 83, 193, 121, 190, 72, 116, 164, 189, 24, 168, 220, 190, 110, 31, 21, 191, 65, 117, 110, 62, 27, 43, 89, 190, 154, 123, 0, 63, 248, 78, 18, 63, 71, 211, 45, 191, 188, 2, 26, 191, 19, 10, 125, 190, 127, 135, 205, 190, 151, 48, 129, 62, 18, 31, 8, 62, 26, 227, 143, 190, 129, 160, 155, 62, 223, 138, 172, 190, 154, 152, 128, 190, 231, 153, 217, 190, 123, 66, 218, 62, 227, 194, 104, 63, 241, 218, 48, 62, 151, 208, 161, 62, 51, 5, 70, 63, 116, 219, 200, 62, 86, 11, 148, 62, 157, 232, 14, 191, 101, 235, 239, 190, 165, 135, 85, 61, 3, 109, 6, 190, 184, 234, 194, 190, 2, 86, 165, 60, 114, 145, 36, 190, 208, 185, 13, 191, 168, 151, 30, 63, 100, 73, 60, 189, 135, 129, 23, 191, 174, 208, 30, 63, 28, 45, 252, 62, 55, 13, 179, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 45, 33, 191, 166, 142, 70, 190, 148, 107, 192, 190, 121, 114, 188, 190, 213, 132, 114, 189, 58, 247, 152, 188, 200, 24, 68, 62, 166, 197, 138, 190, 24, 115, 168, 62, 97, 162, 128, 190, 227, 74, 152, 188, 137, 228, 161, 62, 246, 245, 159, 62, 122, 7, 142, 62, 67, 214, 102, 190, 226, 71, 58, 62, 183, 87, 205, 62, 86, 242, 222, 189, 123, 52, 6, 191, 115, 66, 167, 62, 111, 176, 240, 190, 176, 224, 196, 189, 25, 201, 12, 63, 56, 146, 199, 61, 184, 1, 190, 62, 206, 107, 44, 62, 215, 242, 3, 190, 95, 31, 161, 190, 20, 32, 156, 190, 165, 107, 154, 62, 163, 71, 212, 62, 142, 135, 74, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 222, 200, 61, 153, 177, 112, 61, 69, 46, 214, 189, 190, 74, 70, 61, 172, 220, 27, 190, 34, 29, 135, 188, 185, 161, 13, 61, 220, 223, 13, 189, 85, 31, 232, 61, 111, 164, 65, 190, 106, 73, 87, 62, 24, 192, 112, 189, 221, 86, 148, 61, 100, 73, 45, 187, 96, 179, 151, 62, 42, 220, 33, 62, 57, 213, 195, 61, 26, 2, 169, 61, 110, 237, 8, 191, 201, 79, 133, 62, 36, 95, 17, 189, 154, 45, 134, 190, 59, 91, 133, 61, 9, 3, 131, 61, 223, 136, 28, 61, 86, 168, 174, 62, 106, 246, 36, 62, 101, 134, 167, 190, 198, 176, 37, 190, 122, 22, 44, 189, 164, 234, 8, 62, 146, 209, 143, 61, 37, 19, 6, 62, 162, 88, 132, 61, 236, 166, 53, 188, 80, 147, 157, 188, 222, 231, 14, 190, 223, 199, 80, 189, 254, 212, 198, 188, 16, 208, 142, 61, 94, 208, 250, 188, 85, 104, 34, 190, 48, 26, 46, 190, 220, 187, 12, 190, 106, 223, 229, 189, 44, 255, 205, 61, 232, 58, 47, 190, 224, 73, 184, 61, 100, 99, 4, 190, 199, 206, 33, 61, 72, 92, 4, 189, 155, 14, 89, 189, 97, 106, 48, 189, 22, 221, 32, 190, 139, 229, 139, 61, 46, 21, 164, 61, 184, 238, 7, 190, 55, 110, 25, 190, 91, 238, 188, 61, 88, 239, 14, 62, 129, 244, 52, 62, 190, 113, 46, 190, 117, 107, 192, 189, 169, 187, 6, 190, 171, 80, 152, 190, 100, 4, 151, 190, 192, 150, 85, 62, 81, 1, 104, 191, 101, 128, 65, 62, 72, 6, 60, 62, 45, 45, 165, 60, 151, 237, 130, 62, 6, 87, 180, 61, 200, 90, 142, 190, 135, 82, 243, 190, 252, 21, 137, 62, 35, 30, 144, 61, 220, 61, 227, 62, 247, 254, 15, 191, 90, 214, 149, 190, 189, 107, 185, 189, 220, 67, 159, 190, 31, 117, 38, 62, 197, 109, 144, 189, 201, 52, 81, 190, 89, 32, 242, 62, 207, 231, 112, 62, 20, 82, 123, 62, 139, 91, 186, 60, 40, 22, 208, 190, 193, 133, 27, 190, 106, 64, 147, 62, 215, 83, 230, 62, 35, 90, 97, 190, 215, 248, 126, 62, 108, 255, 168, 190, 253, 253, 108, 189, 119, 244, 178, 61, 69, 151, 115, 189, 231, 8, 198, 188, 45, 46, 140, 189, 74, 154, 21, 190, 87, 186, 246, 189, 173, 8, 26, 190, 87, 198, 180, 61, 177, 16, 213, 61, 240, 197, 86, 188, 124, 206, 182, 61, 197, 39, 134, 61, 255, 160, 175, 189, 142, 207, 125, 61, 210, 121, 248, 189, 66, 97, 178, 61, 245, 179, 13, 189, 63, 50, 25, 62, 13, 139, 69, 189, 4, 157, 242, 61, 100, 95, 49, 61, 77, 183, 37, 190, 32, 122, 26, 190, 191, 30, 158, 189, 64, 132, 166, 189, 41, 75, 177, 61, 146, 220, 100, 189, 40, 32, 50, 189, 199, 200, 210, 189, 15, 136, 1, 62, 22, 115, 180, 61, 14, 14, 31, 190, 90, 209, 152, 189, 172, 57, 17, 190, 106, 165, 153, 61, 170, 182, 160, 60, 193, 201, 165, 59, 250, 99, 20, 58, 230, 32, 196, 189, 6, 148, 202, 61, 115, 148, 234, 60, 201, 106, 236, 61, 30, 241, 37, 62, 51, 240, 128, 62, 53, 91, 177, 185, 228, 89, 176, 61, 45, 93, 15, 62, 100, 130, 253, 188, 239, 198, 32, 62, 206, 135, 194, 190, 23, 15, 52, 62, 54, 155, 184, 61, 33, 25, 120, 60, 210, 201, 113, 61, 232, 215, 90, 190, 53, 129, 99, 187, 51, 25, 167, 62, 80, 15, 132, 61, 79, 51, 3, 190, 178, 168, 151, 189, 34, 186, 191, 189, 217, 28, 231, 61, 173, 170, 38, 62, 199, 246, 245, 188, 119, 181, 244, 61, 101, 149, 23, 190, 207, 74, 139, 190, 164, 211, 249, 60, 143, 112, 187, 189, 128, 80, 10, 61, 100, 170, 10, 189, 141, 21, 25, 190, 214, 15, 43, 190, 51, 131, 65, 61, 33, 138, 7, 190, 189, 218, 206, 61, 59, 172, 114, 61, 203, 153, 11, 62, 219, 179, 1, 189, 109, 247, 85, 189, 101, 16, 72, 60, 144, 65, 224, 189, 68, 128, 80, 190, 33, 198, 149, 61, 158, 142, 113, 190, 132, 167, 84, 189, 162, 164, 53, 190, 238, 8, 27, 190, 152, 102, 75, 62, 122, 252, 68, 62, 176, 205, 156, 189, 6, 214, 179, 189, 41, 201, 82, 189, 135, 31, 135, 61, 79, 17, 134, 62, 28, 148, 241, 189, 3, 215, 37, 190, 91, 90, 38, 188, 96, 101, 31, 188, 55, 84, 212, 189, 214, 254, 222, 189, 172, 130, 2, 62, 192, 203, 21, 189, 149, 43, 162, 61, 178, 231, 145, 189, 102, 216, 206, 61, 174, 235, 242, 189, 45, 24, 32, 190, 3, 160, 0, 189, 156, 199, 232, 61, 237, 83, 140, 61, 149, 148, 61, 189, 163, 227, 139, 61, 74, 54, 222, 189, 40, 20, 60, 190, 115, 4, 213, 61, 128, 78, 21, 62, 130, 61, 39, 190, 209, 223, 44, 62, 177, 84, 116, 188, 190, 87, 19, 62, 100, 12, 138, 61, 119, 137, 201, 61, 184, 71, 27, 190, 214, 56, 183, 189, 66, 234, 213, 61, 241, 100, 6, 190, 173, 85, 18, 190, 64, 195, 174, 185, 133, 114, 95, 189, 131, 74, 91, 62, 11, 214, 162, 190, 61, 83, 35, 190, 188, 249, 185, 190, 176, 76, 112, 189, 85, 4, 231, 186, 37, 210, 72, 190, 11, 157, 32, 62, 7, 53, 108, 188, 231, 172, 209, 61, 164, 241, 113, 62, 63, 108, 86, 62, 165, 85, 21, 62, 145, 160, 238, 61, 183, 78, 121, 62, 37, 247, 87, 190, 25, 243, 34, 61, 22, 23, 21, 190, 99, 28, 10, 190, 178, 155, 1, 189, 229, 111, 143, 190, 22, 92, 84, 62, 240, 221, 45, 62, 158, 58, 165, 189, 138, 76, 140, 60, 172, 4, 134, 190, 187, 110, 184, 61, 126, 67, 27, 190, 30, 25, 138, 62, 28, 145, 18, 62, 89, 234, 137, 62, 47, 62, 159, 190, 119, 164, 86, 62, 137, 210, 119, 190, 232, 104, 105, 59, 44, 100, 226, 189, 2, 27, 129, 188, 150, 186, 11, 190, 113, 252, 154, 189, 143, 4, 43, 62, 206, 135, 158, 60, 102, 166, 98, 189, 17, 44, 123, 61, 116, 135, 162, 61, 138, 133, 30, 62, 244, 208, 252, 61, 249, 163, 104, 62, 33, 63, 147, 190, 4, 248, 242, 60, 10, 89, 130, 61, 125, 135, 133, 190, 223, 220, 224, 188, 63, 68, 184, 190, 165, 18, 81, 62, 186, 0, 141, 62, 148, 10, 128, 62, 163, 47, 24, 190, 100, 210, 210, 189, 57, 86, 22, 62, 255, 181, 15, 190, 102, 164, 147, 62, 24, 75, 67, 187, 242, 198, 21, 62, 56, 105, 166, 189, 232, 184, 164, 61, 66, 5, 132, 191, 48, 210, 148, 191, 125, 96, 185, 191, 244, 198, 184, 62, 250, 56, 108, 61, 40, 105, 213, 189, 29, 193, 105, 61, 135, 174, 127, 189, 7, 12, 24, 62, 191, 233, 182, 189, 42, 58, 125, 189, 89, 73, 5, 190, 123, 54, 185, 61, 211, 175, 81, 62, 131, 252, 245, 190, 211, 33, 104, 62, 63, 189, 131, 61, 104, 167, 167, 189, 95, 119, 155, 62, 249, 70, 7, 191, 86, 95, 164, 62, 125, 1, 240, 61, 37, 1, 211, 190, 63, 245, 113, 190, 219, 179, 137, 190, 189, 27, 143, 62, 112, 76, 255, 61, 176, 39, 29, 62, 145, 13, 148, 62, 240, 49, 14, 62, 23, 145, 162, 190, 184, 163, 47, 190, 26, 106, 141, 190, 34, 157, 29, 190, 202, 159, 135, 190, 79, 82, 195, 61, 171, 156, 195, 61, 182, 213, 199, 188, 24, 181, 122, 190, 225, 48, 20, 61, 61, 23, 183, 60, 141, 34, 153, 60, 129, 225, 185, 188, 180, 87, 20, 60, 67, 69, 190, 60, 11, 245, 101, 190, 92, 164, 103, 62, 35, 86, 139, 61, 95, 142, 137, 62, 35, 158, 29, 60, 212, 148, 223, 188, 69, 80, 77, 190, 206, 156, 20, 62, 29, 36, 130, 62, 22, 120, 179, 62, 243, 208, 29, 190, 219, 38, 122, 58, 131, 34, 174, 189, 77, 126, 140, 61, 147, 35, 132, 62, 245, 169, 137, 188, 60, 64, 141, 189, 85, 119, 245, 61, 115, 124, 243, 189, 214, 98, 31, 190, 85, 127, 157, 189, 0, 144, 32, 62, 250, 94, 201, 61, 187, 112, 66, 61, 51, 33, 132, 189, 54, 58, 196, 58, 26, 88, 177, 189, 54, 225, 184, 61, 188, 122, 198, 188, 202, 167, 171, 61, 82, 93, 228, 61, 244, 145, 4, 190, 185, 22, 234, 60, 135, 7, 6, 62, 100, 88, 190, 60, 185, 81, 8, 190, 141, 206, 41, 190, 44, 84, 0, 188, 222, 123, 174, 60, 44, 221, 23, 61, 129, 51, 156, 61, 105, 249, 246, 189, 45, 59, 120, 61, 102, 206, 225, 188, 89, 194, 245, 189, 178, 234, 253, 189, 67, 123, 128, 61, 140, 211, 153, 190, 13, 195, 147, 61, 206, 174, 84, 189, 213, 154, 35, 62, 141, 255, 80, 190, 235, 121, 179, 189, 104, 202, 100, 188, 42, 128, 13, 60, 52, 151, 170, 61, 129, 206, 1, 62, 16, 202, 108, 61, 155, 36, 122, 190, 19, 169, 200, 62, 17, 29, 48, 61, 199, 175, 28, 62, 26, 247, 45, 189, 16, 138, 9, 60, 51, 200, 65, 189, 221, 159, 20, 191, 88, 146, 13, 62, 240, 152, 24, 60, 156, 3, 163, 190, 234, 114, 186, 189, 250, 54, 2, 190, 23, 5, 69, 62, 41, 237, 142, 62, 104, 197, 229, 61, 53, 88, 199, 188, 28, 17, 39, 190, 87, 215, 137, 61, 112, 191, 141, 189, 105, 187, 137, 62, 45, 129, 174, 61, 29, 25, 145, 61, 117, 202, 150, 189, 106, 124, 23, 189, 30, 203, 116, 60, 104, 5, 238, 188, 53, 95, 215, 187, 155, 114, 106, 62, 150, 129, 63, 62, 56, 122, 121, 59, 242, 63, 82, 190, 124, 180, 48, 61, 105, 49, 26, 189, 39, 254, 125, 62, 21, 211, 192, 61, 142, 171, 42, 190, 172, 49, 48, 190, 71, 212, 203, 61, 66, 45, 68, 190, 15, 199, 17, 190, 51, 66, 95, 188, 114, 238, 117, 188, 72, 74, 204, 60, 191, 24, 165, 62, 248, 192, 57, 62, 250, 35, 245, 189, 231, 9, 13, 60, 126, 108, 210, 61, 155, 185, 187, 189, 207, 236, 167, 189, 78, 36, 38, 62, 87, 36, 96, 188, 11, 103, 226, 189, 246, 228, 9, 62, 252, 183, 175, 190, 204, 152, 233, 188, 209, 178, 48, 191, 147, 81, 148, 191, 202, 65, 43, 191, 106, 92, 153, 62, 123, 213, 176, 62, 135, 63, 152, 62, 52, 108, 58, 190, 115, 243, 178, 189, 28, 10, 135, 190, 40, 95, 70, 190, 28, 197, 205, 60, 191, 121, 19, 189, 116, 45, 126, 57, 39, 212, 25, 189, 6, 4, 247, 61, 146, 137, 23, 62, 81, 206, 193, 188, 185, 250, 158, 190, 113, 55, 131, 62, 36, 133, 129, 190, 165, 219, 37, 62, 177, 180, 189, 190, 104, 140, 18, 190, 179, 131, 255, 60, 169, 59, 70, 189, 221, 176, 96, 61, 84, 15, 210, 190, 250, 25, 195, 60, 210, 176, 0, 62, 246, 192, 59, 62, 145, 197, 19, 190, 223, 31, 217, 61, 213, 150, 205, 189, 218, 191, 224, 188, 26, 31, 106, 190, 41, 242, 100, 61, 54, 137, 131, 189, 241, 225, 13, 190, 129, 162, 184, 62, 129, 219, 252, 189, 70, 231, 211, 62, 67, 143, 39, 190, 237, 101, 159, 189, 243, 192, 181, 62, 172, 104, 95, 62, 187, 42, 53, 62, 37, 71, 179, 190, 242, 26, 206, 189, 154, 107, 242, 189, 125, 101, 193, 189, 97, 182, 5, 190, 178, 133, 134, 189, 129, 72, 61, 62, 164, 246, 58, 62, 205, 181, 6, 62, 11, 82, 84, 190, 225, 195, 7, 190, 87, 249, 6, 62, 127, 76, 171, 189, 62, 28, 184, 61, 31, 48, 63, 62, 120, 176, 187, 62, 200, 94, 217, 190, 251, 46, 245, 62, 178, 112, 133, 190, 42, 20, 238, 190, 86, 53, 133, 190, 53, 244, 174, 62, 231, 79, 111, 60, 96, 191, 107, 189, 167, 71, 112, 62, 218, 128, 195, 189, 145, 3, 18, 62, 7, 110, 13, 190, 192, 206, 67, 62, 194, 31, 100, 189, 9, 136, 33, 62, 222, 216, 227, 62, 60, 188, 20, 191, 7, 220, 1, 62, 89, 233, 45, 188, 140, 169, 11, 191, 169, 103, 37, 60, 108, 4, 237, 190, 211, 243, 124, 62, 65, 147, 227, 62, 142, 231, 65, 61, 203, 75, 204, 190, 56, 79, 255, 190, 223, 136, 183, 62, 61, 16, 61, 189, 155, 141, 166, 62, 222, 152, 145, 61, 213, 62, 135, 189, 224, 81, 118, 62, 32, 160, 133, 62, 178, 61, 71, 189, 177, 185, 57, 190, 38, 148, 135, 189, 193, 68, 228, 60, 216, 41, 163, 61, 165, 100, 173, 61, 135, 9, 161, 189, 230, 227, 98, 190, 128, 152, 242, 189, 242, 230, 149, 61, 144, 122, 143, 59, 163, 191, 156, 188, 149, 93, 170, 190, 167, 248, 21, 62, 119, 175, 2, 62, 118, 59, 48, 62, 230, 7, 194, 187, 24, 173, 252, 60, 10, 79, 162, 61, 106, 2, 164, 190, 34, 170, 229, 60, 216, 74, 41, 189, 6, 211, 148, 189, 170, 160, 219, 189, 66, 190, 114, 62, 160, 234, 37, 189, 171, 108, 8, 59, 212, 250, 249, 189, 179, 100, 223, 189, 98, 10, 175, 61, 208, 25, 6, 62, 35, 10, 159, 61, 112, 151, 181, 189, 156, 130, 141, 61, 107, 227, 210, 61, 243, 68, 246, 61, 97, 190, 15, 190, 24, 8, 124, 61, 225, 41, 89, 188, 56, 92, 16, 190, 170, 230, 126, 190, 16, 245, 243, 61, 47, 40, 149, 61, 51, 16, 164, 61, 242, 208, 36, 62, 108, 192, 164, 189, 209, 58, 58, 189, 3, 26, 75, 57, 160, 67, 58, 189, 244, 186, 132, 62, 174, 91, 59, 190, 51, 43, 151, 188, 25, 132, 22, 188, 240, 177, 224, 188, 29, 164, 156, 188, 52, 135, 149, 61, 96, 212, 37, 61, 64, 68, 152, 62, 173, 149, 8, 62, 167, 191, 34, 190, 135, 209, 155, 190, 24, 137, 84, 190, 206, 18, 226, 189, 213, 249, 188, 190, 218, 166, 90, 62, 134, 183, 146, 188, 171, 168, 12, 62, 252, 4, 49, 61, 58, 92, 205, 58, 143, 213, 174, 61, 71, 84, 222, 189, 54, 207, 33, 62, 162, 37, 131, 58, 25, 150, 144, 62, 78, 238, 46, 190, 241, 13, 199, 188, 210, 48, 12, 190, 98, 53, 75, 190, 222, 31, 32, 190, 184, 100, 58, 189, 120, 94, 65, 190, 104, 29, 51, 62, 107, 204, 99, 62, 210, 249, 134, 189, 234, 164, 102, 190, 75, 64, 119, 189, 119, 209, 171, 190, 247, 137, 75, 62, 214, 5, 121, 61, 159, 4, 118, 190, 104, 41, 73, 62, 50, 124, 154, 186, 209, 144, 65, 62, 92, 68, 35, 62, 14, 196, 83, 190, 93, 149, 22, 62, 233, 132, 166, 190, 160, 36, 56, 61, 77, 135, 89, 190, 71, 61, 193, 61, 104, 215, 85, 58, 34, 105, 167, 61, 121, 235, 26, 62, 40, 149, 145, 61, 224, 93, 243, 61, 164, 61, 210, 61, 173, 253, 218, 189, 1, 16, 96, 62, 109, 115, 0, 190, 178, 211, 49, 62, 60, 66, 83, 59, 46, 140, 197, 61, 14, 1, 37, 62, 75, 20, 202, 189, 123, 97, 248, 189, 10, 194, 190, 190, 17, 131, 245, 60, 135, 22, 35, 62, 85, 132, 49, 62, 8, 131, 90, 189, 96, 164, 139, 189, 206, 211, 5, 189, 193, 199, 4, 190, 7, 160, 162, 62, 21, 6, 253, 187, 212, 29, 131, 62, 246, 191, 178, 190, 16, 252, 209, 61, 241, 145, 208, 189, 3, 195, 46, 61, 201, 215, 238, 61, 108, 127, 121, 61, 250, 98, 32, 189, 147, 200, 252, 61, 210, 227, 246, 61, 114, 98, 71, 62, 163, 240, 59, 62, 164, 13, 157, 187, 28, 118, 129, 62, 113, 212, 142, 62, 115, 109, 208, 59, 119, 191, 133, 62, 252, 77, 212, 190, 188, 181, 39, 62, 204, 234, 238, 188, 224, 128, 60, 190, 86, 91, 177, 61, 35, 97, 180, 188, 226, 47, 193, 189, 125, 3, 200, 62, 184, 122, 42, 62, 170, 55, 105, 190, 71, 187, 181, 190, 166, 23, 222, 61, 130, 7, 202, 61, 243, 156, 148, 189, 188, 236, 97, 189, 100, 77, 52, 189, 174, 236, 17, 190, 248, 158, 206, 189, 138, 78, 218, 188, 199, 181, 10, 189, 80, 3, 11, 190, 111, 58, 17, 190, 214, 124, 91, 61, 228, 100, 207, 60, 131, 88, 27, 62, 86, 184, 56, 60, 202, 145, 141, 187, 231, 2, 175, 61, 189, 87, 197, 61, 43, 164, 146, 188, 209, 57, 230, 189, 206, 196, 184, 189, 131, 130, 24, 190, 70, 126, 47, 188, 30, 149, 23, 190, 192, 104, 142, 189, 126, 24, 11, 62, 98, 172, 44, 61, 168, 4, 60, 190, 86, 72, 211, 189, 129, 142, 250, 189, 130, 194, 68, 189, 162, 237, 32, 62, 113, 99, 173, 189, 82, 154, 16, 61, 81, 215, 132, 61, 68, 158, 53, 62, 116, 103, 154, 60, 143, 150, 234, 189, 107, 123, 141, 62, 251, 77, 63, 61, 226, 11, 44, 61, 26, 104, 61, 189, 248, 2, 4, 189, 52, 218, 132, 190, 46, 38, 23, 61, 148, 49, 212, 62, 243, 120, 134, 189, 235, 247, 86, 62, 156, 178, 157, 190, 20, 110, 218, 187, 235, 233, 129, 61, 212, 80, 83, 190, 121, 33, 229, 61, 186, 101, 194, 61, 199, 189, 25, 62, 210, 230, 144, 61, 188, 33, 60, 188, 30, 227, 180, 189, 93, 97, 138, 190, 99, 185, 22, 62, 217, 152, 166, 62, 248, 170, 57, 62, 149, 213, 72, 62, 244, 74, 32, 189, 188, 209, 85, 62, 204, 151, 67, 62, 7, 209, 244, 189, 102, 160, 220, 61, 135, 52, 175, 61, 119, 135, 174, 60, 103, 16, 126, 61, 23, 168, 18, 62, 248, 225, 60, 190, 246, 185, 5, 190, 218, 78, 214, 61, 163, 49, 35, 190, 60, 184, 250, 189, 0, 169, 185, 61, 157, 12, 94, 61, 148, 84, 110, 188, 120, 91, 175, 189, 142, 220, 240, 189, 161, 73, 104, 189, 162, 140, 184, 188, 77, 110, 179, 189, 27, 73, 217, 188, 28, 62, 67, 60, 48, 200, 182, 189, 88, 74, 103, 189, 140, 0, 106, 61, 196, 217, 46, 190, 238, 203, 21, 189, 250, 176, 58, 61, 80, 89, 41, 190, 31, 245, 184, 189, 23, 228, 159, 189, 5, 43, 35, 190, 57, 50, 185, 189, 134, 132, 222, 60, 67, 6, 89, 190, 37, 224, 42, 190, 165, 103, 6, 62, 86, 206, 135, 189, 31, 185, 188, 61, 151, 247, 146, 189, 192, 3, 20, 62, 115, 110, 173, 189, 98, 34, 128, 62, 56, 143, 224, 189, 148, 82, 102, 190, 28, 181, 36, 61, 154, 111, 176, 189, 60, 66, 175, 62, 13, 63, 119, 190, 211, 120, 56, 189, 190, 205, 225, 189, 177, 3, 29, 190, 30, 60, 102, 188, 21, 32, 225, 188, 245, 232, 80, 190, 170, 17, 151, 62, 22, 143, 65, 62, 232, 239, 177, 62, 82, 121, 252, 188, 225, 207, 167, 189, 113, 219, 34, 190, 133, 19, 38, 62, 131, 43, 72, 62, 39, 37, 55, 190, 242, 176, 247, 61, 0, 248, 127, 190, 194, 103, 170, 190, 228, 213, 4, 190, 188, 3, 215, 189, 76, 233, 194, 190, 199, 82, 249, 61, 108, 103, 193, 61, 181, 104, 106, 62, 77, 129, 237, 61, 211, 241, 225, 61, 61, 38, 85, 190, 107, 224, 36, 190, 210, 166, 116, 61, 96, 112, 3, 190, 80, 163, 206, 62, 111, 89, 196, 189, 164, 117, 204, 59, 214, 227, 56, 189, 76, 115, 203, 190, 143, 229, 200, 190, 184, 11, 87, 190, 85, 114, 199, 188, 101, 8, 218, 61, 99, 235, 8, 189, 252, 178, 126, 62, 102, 127, 138, 189, 175, 100, 184, 190, 128, 206, 163, 189, 150, 234, 144, 189, 192, 180, 11, 190, 78, 119, 118, 190, 161, 84, 115, 62, 148, 179, 180, 189, 123, 177, 145, 62, 38, 101, 234, 61, 4, 212, 146, 61, 90, 193, 88, 189, 156, 162, 236, 189, 132, 104, 191, 57, 170, 253, 70, 190, 224, 77, 90, 190, 32, 159, 1, 190, 196, 78, 83, 189, 121, 76, 228, 187, 60, 204, 138, 189, 168, 224, 80, 62, 52, 254, 116, 190, 222, 67, 98, 189, 142, 131, 56, 62, 226, 120, 209, 61, 215, 24, 114, 190, 128, 52, 224, 61, 171, 128, 210, 188, 5, 78, 115, 62, 119, 155, 217, 61, 219, 173, 206, 188, 197, 62, 202, 59, 239, 119, 212, 61, 138, 3, 48, 62, 8, 190, 190, 61, 119, 3, 155, 189, 94, 96, 79, 62, 214, 98, 117, 189, 207, 141, 34, 190, 175, 41, 94, 62, 67, 146, 22, 62, 146, 115, 34, 189, 3, 195, 25, 190, 54, 250, 46, 189, 1, 183, 5, 61, 152, 41, 6, 62, 183, 33, 40, 62, 107, 6, 35, 62, 15, 184, 145, 189, 43, 91, 26, 62, 32, 252, 215, 61, 242, 187, 46, 190, 63, 178, 92, 61, 79, 13, 215, 60, 70, 235, 215, 189, 77, 26, 189, 186, 49, 213, 189, 189, 48, 12, 251, 189, 229, 54, 89, 61, 233, 148, 133, 190, 45, 140, 18, 189, 171, 33, 54, 190, 127, 134, 163, 61, 35, 88, 14, 189, 38, 167, 84, 190, 66, 197, 36, 189, 157, 147, 229, 61, 174, 110, 44, 62, 108, 125, 228, 189, 152, 58, 0, 190, 65, 25, 29, 190, 6, 150, 3, 62, 210, 117, 32, 62, 87, 203, 117, 59, 62, 99, 64, 189, 24, 140, 191, 61, 222, 199, 237, 189, 205, 197, 24, 61, 157, 24, 62, 189, 113, 101, 192, 188, 196, 238, 249, 189, 52, 170, 90, 190, 166, 219, 147, 61, 249, 32, 161, 61, 223, 208, 218, 61, 57, 34, 128, 62, 221, 107, 72, 60, 236, 11, 123, 62, 38, 94, 95, 62, 192, 87, 40, 61, 219, 96, 32, 191, 245, 137, 211, 61, 122, 152, 228, 189, 162, 64, 15, 190, 17, 214, 54, 62, 193, 116, 79, 190, 102, 72, 112, 61, 37, 79, 227, 61, 118, 116, 64, 62, 78, 206, 51, 190, 193, 145, 129, 189, 139, 223, 235, 61, 182, 31, 246, 61, 150, 252, 255, 61, 111, 130, 103, 190, 196, 237, 52, 190, 52, 48, 115, 62, 141, 136, 77, 191, 51, 223, 47, 61, 211, 227, 7, 61, 244, 155, 208, 189, 209, 228, 137, 61, 144, 109, 108, 62, 152, 182, 60, 190, 42, 38, 217, 60, 188, 216, 3, 188, 192, 59, 233, 189, 13, 175, 182, 62, 135, 154, 223, 190, 84, 90, 1, 62, 193, 59, 142, 61, 117, 111, 42, 189, 196, 96, 36, 190, 242, 14, 118, 190, 157, 140, 241, 60, 68, 134, 150, 62, 96, 126, 154, 62, 164, 45, 253, 189, 31, 48, 55, 189, 75, 67, 74, 61, 139, 130, 168, 60, 168, 194, 32, 62, 35, 159, 167, 61, 250, 4, 128, 189, 254, 139, 122, 61, 3, 198, 206, 189, 242, 183, 58, 190, 172, 77, 53, 190, 195, 80, 249, 61, 0, 218, 201, 61, 182, 235, 43, 61, 146, 7, 127, 61, 72, 73, 203, 189, 225, 166, 61, 62, 230, 152, 159, 61, 130, 45, 150, 189, 28, 152, 1, 62, 161, 144, 193, 189, 85, 116, 161, 62, 110, 160, 139, 62, 189, 83, 13, 189, 159, 75, 111, 189, 123, 105, 164, 60, 19, 11, 200, 61, 1, 58, 153, 190, 128, 75, 94, 61, 188, 179, 135, 183, 171, 198, 139, 186, 115, 166, 124, 62, 142, 57, 119, 59, 251, 119, 55, 189, 170, 9, 65, 189, 52, 78, 91, 61, 163, 76, 2, 62, 84, 255, 79, 189, 107, 196, 240, 60, 251, 138, 194, 61, 91, 118, 198, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {239, 187, 37, 62, 232, 17, 146, 188, 110, 231, 164, 62, 108, 54, 117, 189, 206, 17, 68, 62, 175, 65, 191, 189, 131, 187, 70, 190, 135, 148, 189, 61, 64, 56, 18, 61, 169, 207, 188, 61, 73, 1, 240, 60, 82, 192, 13, 190, 30, 148, 172, 61, 55, 36, 28, 62, 141, 116, 100, 61, 24, 197, 110, 62, 78, 170, 141, 189, 105, 50, 157, 189, 53, 182, 85, 61, 252, 45, 44, 62, 212, 54, 65, 61, 88, 114, 156, 61, 141, 139, 188, 189, 63, 4, 145, 189, 24, 162, 12, 190, 221, 25, 120, 189, 25, 255, 74, 62, 208, 223, 50, 190, 88, 35, 169, 188, 93, 171, 5, 62, 106, 137, 5, 62, 226, 13, 151, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 74, 44, 190, 171, 4, 237, 189, 213, 178, 137, 63, 82, 153, 209, 61, 166, 74, 253, 188, 34, 47, 111, 190, 81, 218, 28, 188, 16, 98, 153, 190, 135, 227, 64, 190, 153, 145, 238, 190, 180, 174, 31, 190, 122, 156, 19, 189, 214, 109, 98, 190, 226, 172, 37, 62, 221, 112, 28, 191, 14, 153, 169, 190, 42, 134, 1, 191, 6, 54, 234, 61, 120, 206, 24, 62, 148, 49, 95, 62, 183, 40, 67, 190, 180, 178, 131, 190, 113, 122, 124, 61, 218, 161, 144, 62, 9, 223, 97, 61, 208, 166, 159, 62, 188, 115, 100, 62, 26, 203, 1, 190, 96, 225, 96, 60, 45, 77, 92, 189, 165, 88, 133, 62, 136, 76, 8, 61, 255, 245, 0, 190, 166, 124, 141, 189, 230, 187, 164, 61, 65, 176, 230, 61, 9, 121, 79, 190, 187, 166, 201, 61, 5, 31, 36, 61, 139, 247, 209, 189, 25, 201, 24, 62, 185, 42, 158, 190, 82, 213, 229, 61, 11, 48, 189, 61, 171, 49, 94, 190, 134, 229, 139, 189, 248, 59, 29, 62, 58, 192, 202, 189, 174, 44, 164, 62, 91, 94, 55, 190, 9, 231, 243, 187, 30, 76, 5, 190, 175, 214, 34, 62, 220, 18, 78, 190, 255, 150, 242, 61, 133, 133, 81, 62, 109, 5, 169, 61, 76, 55, 37, 62, 112, 253, 63, 190, 61, 165, 174, 62, 115, 86, 90, 62, 135, 147, 79, 190, 219, 12, 139, 190, 140, 140, 15, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 185, 202, 61, 51, 119, 175, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {198, 239, 216, 61, 158, 180, 212, 191, 4, 212, 7, 64};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {158, 173, 34, 64, 228, 160, 30, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0086/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}