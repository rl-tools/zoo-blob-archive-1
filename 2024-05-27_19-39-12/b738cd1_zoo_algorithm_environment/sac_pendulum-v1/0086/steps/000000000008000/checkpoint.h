// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 51, 172, 190, 204, 61, 88, 63, 27, 5, 1, 63, 112, 12, 157, 190, 180, 207, 194, 191, 22, 86, 192, 190, 130, 119, 162, 190, 12, 152, 69, 61, 222, 103, 247, 190, 215, 170, 243, 190, 245, 50, 136, 61, 39, 136, 57, 191, 39, 171, 35, 189, 134, 31, 36, 190, 70, 47, 12, 63, 86, 119, 179, 190, 11, 87, 143, 63, 12, 74, 244, 62, 222, 162, 79, 62, 233, 179, 132, 190, 108, 166, 75, 63, 3, 8, 43, 191, 242, 125, 88, 191, 39, 184, 221, 60, 153, 220, 54, 190, 98, 123, 127, 191, 62, 251, 225, 61, 35, 169, 64, 190, 80, 175, 65, 191, 244, 228, 188, 62, 226, 25, 55, 62, 250, 19, 12, 63, 227, 78, 60, 190, 46, 189, 27, 191, 225, 240, 186, 63, 244, 109, 194, 62, 9, 40, 21, 63, 90, 88, 1, 63, 219, 246, 41, 62, 5, 125, 45, 63, 86, 52, 2, 191, 5, 123, 4, 190, 46, 213, 129, 190, 17, 128, 166, 191, 172, 174, 135, 190, 85, 2, 20, 63, 36, 20, 117, 63, 243, 203, 105, 62, 229, 59, 226, 62, 100, 85, 156, 190, 187, 59, 186, 62, 7, 68, 228, 59, 22, 20, 148, 60, 144, 4, 100, 190, 252, 220, 61, 63, 205, 58, 162, 190, 144, 95, 131, 190, 97, 162, 31, 189, 37, 70, 55, 191, 121, 119, 11, 191, 241, 153, 184, 62, 199, 143, 68, 190, 155, 128, 225, 62, 150, 173, 29, 63, 106, 202, 163, 191, 29, 106, 227, 190, 90, 82, 158, 190, 254, 92, 84, 190, 248, 145, 12, 62, 245, 233, 138, 62, 91, 72, 182, 190, 123, 19, 109, 62, 219, 224, 147, 190, 84, 98, 244, 190, 173, 176, 195, 190, 128, 55, 217, 62, 147, 44, 139, 63, 141, 73, 43, 62, 51, 7, 164, 62, 171, 22, 128, 63, 51, 109, 196, 62, 219, 85, 209, 62, 21, 57, 86, 191, 124, 104, 185, 190, 210, 220, 186, 189, 222, 40, 135, 190, 79, 12, 162, 190, 105, 26, 132, 61, 187, 155, 1, 191, 206, 198, 2, 191, 240, 69, 4, 63, 72, 155, 123, 189, 25, 170, 30, 191, 56, 126, 45, 63, 212, 31, 56, 63, 72, 49, 135, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {20, 117, 191, 190, 82, 165, 143, 190, 3, 44, 184, 190, 155, 164, 17, 191, 231, 111, 5, 190, 229, 122, 65, 59, 150, 29, 217, 61, 228, 220, 192, 190, 191, 43, 211, 62, 123, 42, 35, 190, 181, 219, 25, 190, 46, 237, 161, 61, 60, 192, 84, 62, 41, 81, 47, 62, 115, 44, 172, 190, 125, 146, 175, 61, 95, 181, 255, 62, 206, 103, 97, 190, 176, 24, 49, 191, 133, 211, 0, 62, 16, 193, 21, 191, 254, 49, 154, 189, 219, 167, 20, 63, 133, 41, 57, 61, 71, 195, 135, 62, 65, 157, 206, 61, 173, 250, 22, 190, 54, 72, 222, 190, 196, 225, 253, 190, 253, 86, 244, 61, 126, 151, 196, 62, 82, 188, 166, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 105, 230, 61, 84, 218, 132, 189, 36, 72, 98, 189, 127, 161, 156, 61, 41, 190, 20, 190, 144, 47, 90, 189, 169, 130, 39, 61, 201, 64, 138, 189, 230, 3, 246, 60, 66, 58, 127, 190, 229, 244, 136, 62, 50, 41, 35, 190, 192, 160, 87, 61, 224, 129, 130, 60, 78, 70, 14, 62, 176, 139, 50, 62, 71, 112, 129, 61, 162, 113, 237, 61, 235, 66, 96, 191, 145, 77, 112, 62, 71, 190, 145, 189, 244, 231, 192, 190, 204, 235, 226, 188, 194, 25, 104, 61, 7, 152, 88, 59, 79, 121, 195, 62, 245, 13, 31, 62, 170, 2, 216, 190, 154, 132, 21, 190, 17, 70, 98, 189, 79, 194, 52, 62, 255, 57, 9, 62, 37, 19, 6, 62, 162, 88, 132, 61, 236, 166, 53, 188, 80, 147, 157, 188, 222, 231, 14, 190, 223, 199, 80, 189, 254, 212, 198, 188, 16, 208, 142, 61, 94, 208, 250, 188, 85, 104, 34, 190, 48, 26, 46, 190, 220, 187, 12, 190, 106, 223, 229, 189, 44, 255, 205, 61, 232, 58, 47, 190, 224, 73, 184, 61, 100, 99, 4, 190, 199, 206, 33, 61, 72, 92, 4, 189, 155, 14, 89, 189, 97, 106, 48, 189, 22, 221, 32, 190, 139, 229, 139, 61, 46, 21, 164, 61, 184, 238, 7, 190, 55, 110, 25, 190, 91, 238, 188, 61, 88, 239, 14, 62, 129, 244, 52, 62, 190, 113, 46, 190, 117, 107, 192, 189, 169, 187, 6, 190, 109, 152, 133, 190, 18, 166, 91, 191, 48, 251, 211, 62, 214, 77, 20, 191, 174, 24, 83, 62, 62, 147, 94, 62, 248, 167, 253, 60, 65, 104, 191, 59, 153, 180, 86, 61, 60, 174, 138, 190, 190, 81, 85, 190, 89, 74, 196, 62, 37, 249, 138, 61, 19, 133, 194, 62, 133, 155, 163, 191, 143, 140, 160, 190, 136, 126, 197, 189, 159, 191, 1, 190, 13, 130, 93, 61, 123, 253, 3, 190, 151, 129, 61, 190, 238, 82, 232, 62, 234, 135, 112, 62, 100, 59, 112, 62, 210, 181, 112, 61, 0, 52, 216, 190, 100, 3, 36, 190, 167, 230, 66, 62, 33, 180, 224, 62, 101, 222, 86, 190, 70, 32, 138, 62, 53, 93, 215, 190, 253, 253, 108, 189, 179, 139, 163, 61, 184, 168, 121, 189, 152, 144, 201, 188, 45, 46, 140, 189, 74, 154, 21, 190, 87, 186, 246, 189, 173, 8, 26, 190, 165, 215, 173, 61, 177, 16, 213, 61, 102, 69, 88, 188, 124, 206, 182, 61, 124, 148, 133, 61, 137, 31, 193, 189, 165, 175, 106, 61, 14, 97, 248, 189, 34, 239, 169, 61, 176, 152, 14, 189, 217, 49, 21, 62, 142, 123, 116, 189, 4, 157, 242, 61, 141, 217, 247, 60, 78, 167, 40, 190, 6, 186, 26, 190, 60, 42, 174, 189, 16, 103, 166, 189, 41, 75, 177, 61, 160, 245, 129, 189, 52, 126, 61, 189, 238, 172, 230, 189, 213, 85, 232, 61, 22, 115, 180, 61, 49, 129, 44, 190, 199, 3, 198, 189, 16, 192, 45, 190, 200, 221, 104, 61, 134, 138, 208, 60, 248, 63, 80, 189, 221, 63, 180, 60, 22, 161, 176, 189, 153, 112, 79, 62, 245, 104, 158, 186, 174, 169, 110, 61, 156, 222, 35, 62, 32, 80, 152, 62, 216, 1, 226, 61, 123, 108, 38, 61, 110, 63, 76, 62, 182, 214, 78, 188, 246, 42, 10, 62, 110, 117, 242, 190, 45, 74, 53, 62, 55, 197, 108, 61, 208, 18, 9, 61, 52, 165, 171, 61, 85, 244, 109, 190, 166, 216, 248, 60, 68, 11, 201, 62, 158, 109, 137, 61, 252, 21, 14, 190, 60, 170, 196, 189, 163, 216, 168, 189, 105, 15, 13, 62, 229, 108, 102, 62, 253, 216, 149, 189, 119, 181, 244, 61, 151, 139, 31, 190, 100, 244, 17, 191, 158, 110, 22, 62, 161, 113, 128, 188, 6, 118, 0, 62, 222, 86, 252, 61, 240, 131, 123, 190, 164, 143, 164, 189, 250, 111, 207, 60, 52, 197, 34, 190, 216, 145, 10, 62, 126, 240, 61, 61, 80, 170, 11, 62, 40, 174, 51, 61, 10, 127, 133, 189, 242, 143, 115, 62, 53, 80, 239, 189, 131, 207, 160, 190, 195, 121, 126, 62, 69, 169, 45, 191, 100, 115, 202, 189, 193, 157, 250, 189, 56, 1, 163, 189, 70, 190, 140, 62, 105, 177, 172, 62, 160, 11, 168, 189, 155, 133, 179, 189, 216, 143, 132, 190, 242, 93, 93, 57, 222, 66, 224, 62, 28, 148, 241, 189, 43, 121, 52, 190, 216, 155, 21, 189, 81, 244, 13, 189, 55, 84, 212, 189, 214, 254, 222, 189, 172, 130, 2, 62, 192, 203, 21, 189, 149, 43, 162, 61, 178, 231, 145, 189, 94, 42, 175, 61, 37, 107, 242, 189, 230, 146, 25, 190, 4, 198, 51, 189, 203, 235, 215, 61, 172, 234, 157, 61, 9, 6, 56, 189, 50, 196, 91, 61, 68, 117, 250, 189, 20, 42, 87, 190, 115, 4, 213, 61, 120, 48, 245, 61, 130, 61, 39, 190, 209, 223, 44, 62, 232, 249, 39, 189, 197, 37, 25, 62, 108, 34, 141, 61, 249, 153, 146, 61, 192, 181, 48, 190, 162, 39, 232, 189, 75, 234, 190, 61, 124, 74, 4, 190, 136, 1, 175, 190, 86, 151, 30, 189, 218, 242, 88, 189, 251, 156, 71, 62, 85, 28, 109, 190, 88, 119, 24, 191, 208, 30, 133, 190, 6, 133, 191, 61, 190, 144, 255, 186, 117, 237, 121, 189, 252, 50, 2, 62, 214, 65, 148, 190, 187, 227, 10, 62, 85, 116, 149, 62, 199, 213, 32, 62, 23, 196, 42, 62, 78, 8, 20, 62, 193, 82, 115, 62, 166, 146, 159, 190, 186, 50, 162, 60, 235, 131, 2, 189, 128, 185, 41, 190, 78, 106, 51, 189, 208, 10, 64, 190, 174, 249, 64, 62, 156, 113, 57, 62, 25, 141, 252, 189, 4, 65, 8, 60, 116, 251, 110, 190, 184, 51, 137, 61, 153, 31, 6, 190, 8, 214, 175, 62, 234, 177, 73, 61, 3, 211, 159, 62, 5, 116, 143, 190, 49, 172, 97, 62, 62, 51, 61, 190, 158, 104, 13, 190, 167, 122, 250, 188, 249, 92, 139, 62, 214, 135, 156, 61, 78, 92, 198, 61, 102, 199, 80, 62, 232, 197, 154, 190, 216, 15, 7, 190, 244, 54, 166, 187, 227, 212, 253, 61, 133, 76, 215, 61, 78, 60, 170, 61, 2, 28, 133, 62, 248, 157, 250, 190, 123, 21, 127, 61, 77, 117, 10, 62, 234, 163, 180, 190, 110, 107, 180, 189, 161, 74, 165, 190, 40, 55, 116, 62, 216, 208, 122, 62, 148, 190, 114, 62, 61, 94, 39, 190, 102, 26, 195, 189, 234, 192, 30, 62, 195, 125, 26, 190, 115, 75, 164, 62, 23, 185, 67, 187, 219, 74, 164, 61, 239, 218, 144, 189, 32, 188, 152, 61, 56, 2, 97, 191, 251, 87, 220, 191, 199, 18, 174, 191, 219, 47, 207, 62, 155, 32, 124, 189, 245, 80, 30, 62, 146, 174, 146, 61, 168, 50, 130, 190, 246, 231, 199, 61, 134, 206, 32, 190, 63, 106, 13, 190, 240, 222, 16, 190, 21, 202, 120, 190, 206, 184, 81, 62, 55, 84, 27, 191, 51, 23, 74, 62, 63, 189, 131, 61, 253, 183, 10, 190, 19, 87, 254, 61, 254, 253, 59, 191, 117, 159, 144, 62, 142, 189, 30, 62, 191, 164, 12, 191, 61, 169, 130, 190, 36, 95, 121, 190, 77, 25, 130, 62, 221, 247, 1, 62, 173, 157, 51, 61, 231, 203, 140, 62, 10, 98, 28, 62, 220, 70, 237, 190, 209, 114, 184, 190, 185, 207, 92, 190, 117, 248, 84, 190, 1, 186, 82, 190, 153, 167, 173, 61, 239, 173, 202, 61, 145, 82, 218, 61, 198, 56, 113, 190, 211, 89, 251, 189, 186, 118, 45, 61, 0, 173, 131, 61, 35, 217, 245, 188, 235, 28, 9, 60, 235, 162, 127, 61, 187, 191, 206, 190, 156, 59, 7, 62, 136, 133, 172, 61, 219, 188, 187, 62, 95, 178, 141, 189, 158, 33, 68, 189, 4, 246, 4, 190, 212, 147, 13, 62, 47, 240, 124, 62, 35, 202, 209, 62, 142, 208, 250, 189, 241, 73, 5, 190, 236, 139, 218, 189, 28, 59, 129, 61, 46, 85, 170, 62, 245, 169, 137, 188, 60, 64, 141, 189, 85, 119, 245, 61, 115, 124, 243, 189, 214, 98, 31, 190, 85, 127, 157, 189, 0, 144, 32, 62, 250, 94, 201, 61, 187, 112, 66, 61, 51, 33, 132, 189, 54, 58, 196, 58, 26, 88, 177, 189, 54, 225, 184, 61, 188, 122, 198, 188, 202, 167, 171, 61, 82, 93, 228, 61, 244, 145, 4, 190, 185, 22, 234, 60, 135, 7, 6, 62, 100, 88, 190, 60, 185, 81, 8, 190, 141, 206, 41, 190, 44, 84, 0, 188, 222, 123, 174, 60, 44, 221, 23, 61, 129, 51, 156, 61, 105, 249, 246, 189, 45, 59, 120, 61, 102, 206, 225, 188, 89, 194, 245, 189, 178, 234, 253, 189, 67, 123, 128, 61, 154, 21, 103, 191, 239, 56, 29, 61, 25, 164, 134, 189, 164, 170, 12, 62, 173, 214, 78, 190, 47, 122, 6, 191, 136, 68, 44, 61, 60, 241, 91, 62, 102, 242, 144, 62, 108, 145, 97, 62, 223, 60, 131, 61, 150, 19, 60, 191, 122, 71, 206, 62, 81, 49, 245, 61, 180, 161, 205, 61, 31, 175, 160, 188, 220, 207, 133, 61, 228, 16, 139, 189, 20, 187, 122, 191, 109, 1, 244, 61, 129, 177, 113, 189, 40, 62, 192, 190, 116, 0, 177, 189, 231, 72, 61, 189, 246, 28, 63, 62, 88, 129, 163, 62, 16, 203, 102, 60, 215, 236, 178, 189, 0, 36, 52, 190, 115, 117, 81, 61, 94, 19, 205, 188, 141, 223, 178, 62, 168, 174, 138, 61, 136, 108, 96, 61, 1, 157, 29, 190, 254, 206, 173, 189, 42, 137, 184, 60, 103, 134, 192, 189, 134, 252, 82, 59, 179, 8, 35, 62, 173, 182, 165, 62, 185, 177, 85, 61, 238, 132, 148, 190, 147, 49, 158, 60, 184, 217, 48, 189, 153, 67, 135, 62, 84, 179, 145, 61, 135, 213, 98, 190, 75, 116, 254, 189, 26, 172, 33, 61, 186, 121, 99, 190, 218, 135, 31, 190, 112, 143, 233, 60, 213, 160, 67, 187, 76, 148, 146, 61, 169, 178, 165, 62, 20, 159, 92, 62, 97, 21, 107, 190, 18, 4, 95, 189, 188, 176, 128, 61, 75, 18, 60, 190, 59, 252, 185, 189, 199, 18, 244, 61, 248, 54, 154, 189, 116, 83, 139, 190, 18, 124, 61, 62, 113, 38, 204, 190, 116, 210, 223, 189, 52, 171, 252, 190, 176, 124, 229, 191, 222, 37, 2, 191, 3, 65, 103, 62, 130, 156, 186, 62, 148, 232, 48, 63, 55, 135, 112, 190, 179, 102, 126, 190, 164, 154, 43, 191, 185, 197, 213, 189, 229, 71, 139, 61, 64, 83, 157, 189, 163, 219, 151, 62, 74, 61, 170, 190, 230, 206, 182, 62, 162, 100, 249, 61, 168, 0, 88, 184, 61, 161, 192, 190, 8, 50, 117, 62, 69, 218, 206, 189, 114, 175, 191, 61, 6, 185, 205, 190, 76, 231, 35, 190, 187, 38, 72, 62, 31, 121, 167, 190, 117, 137, 152, 60, 247, 63, 192, 190, 47, 83, 147, 60, 120, 217, 129, 61, 215, 60, 0, 62, 241, 167, 230, 189, 30, 97, 220, 61, 121, 243, 123, 189, 245, 219, 0, 190, 250, 116, 43, 190, 185, 231, 75, 62, 20, 168, 74, 61, 176, 193, 131, 189, 98, 28, 197, 62, 89, 70, 196, 190, 157, 199, 212, 62, 231, 54, 0, 190, 55, 211, 47, 190, 87, 221, 183, 62, 52, 127, 149, 62, 112, 42, 65, 62, 128, 9, 52, 191, 27, 40, 211, 189, 164, 173, 39, 190, 204, 18, 59, 190, 197, 47, 57, 190, 69, 54, 30, 188, 167, 189, 55, 62, 231, 94, 58, 62, 32, 10, 184, 61, 57, 193, 149, 190, 40, 204, 14, 190, 190, 206, 3, 62, 81, 189, 23, 189, 180, 232, 43, 62, 225, 21, 0, 190, 126, 22, 230, 62, 222, 133, 239, 190, 158, 209, 212, 62, 12, 48, 1, 190, 206, 181, 68, 191, 33, 138, 202, 189, 132, 47, 17, 63, 52, 246, 107, 62, 207, 247, 137, 62, 14, 215, 64, 62, 17, 221, 18, 191, 124, 218, 189, 61, 159, 66, 91, 190, 96, 120, 144, 62, 202, 26, 135, 187, 132, 70, 14, 62, 174, 183, 200, 62, 184, 188, 115, 191, 36, 255, 1, 62, 42, 79, 202, 188, 97, 230, 34, 191, 108, 227, 122, 189, 38, 167, 226, 190, 222, 85, 118, 62, 45, 216, 10, 63, 198, 197, 122, 62, 153, 178, 220, 190, 205, 172, 10, 191, 173, 160, 167, 62, 219, 87, 144, 189, 75, 139, 220, 62, 112, 229, 196, 60, 34, 137, 136, 189, 3, 83, 39, 62, 16, 66, 74, 62, 14, 182, 186, 189, 130, 147, 97, 190, 1, 125, 140, 190, 245, 7, 231, 189, 230, 194, 171, 62, 255, 79, 183, 61, 28, 156, 20, 190, 197, 31, 194, 189, 103, 144, 34, 190, 203, 11, 19, 62, 32, 234, 55, 188, 242, 81, 143, 190, 197, 218, 119, 190, 15, 143, 173, 61, 140, 71, 5, 62, 62, 14, 56, 62, 230, 7, 194, 187, 42, 185, 95, 61, 189, 183, 85, 62, 236, 115, 37, 191, 92, 48, 45, 61, 59, 208, 112, 190, 110, 144, 173, 189, 71, 95, 214, 189, 101, 106, 41, 62, 11, 184, 23, 189, 45, 87, 26, 188, 214, 131, 34, 190, 49, 189, 135, 189, 152, 255, 252, 61, 114, 59, 155, 61, 107, 99, 14, 61, 167, 88, 150, 189, 140, 174, 7, 189, 163, 64, 255, 61, 32, 141, 4, 189, 34, 38, 2, 189, 85, 30, 215, 61, 190, 86, 181, 189, 21, 132, 135, 190, 218, 98, 128, 190, 184, 155, 34, 62, 220, 89, 0, 62, 148, 174, 140, 59, 126, 152, 121, 62, 8, 10, 245, 189, 161, 253, 1, 60, 8, 23, 187, 59, 97, 44, 240, 60, 34, 167, 143, 62, 162, 91, 18, 190, 174, 238, 234, 60, 201, 84, 193, 188, 79, 109, 35, 190, 116, 192, 6, 190, 227, 31, 100, 61, 64, 83, 186, 188, 74, 5, 153, 62, 34, 79, 182, 61, 84, 183, 72, 190, 53, 110, 144, 190, 171, 101, 21, 191, 74, 82, 240, 61, 140, 146, 58, 189, 234, 84, 99, 62, 77, 143, 142, 187, 21, 21, 17, 62, 45, 201, 222, 189, 42, 231, 233, 60, 227, 188, 217, 61, 23, 252, 42, 189, 73, 160, 143, 62, 217, 41, 44, 189, 101, 52, 63, 62, 82, 11, 51, 191, 150, 75, 135, 189, 19, 245, 21, 190, 162, 127, 31, 190, 61, 51, 131, 190, 135, 250, 166, 189, 21, 52, 50, 190, 6, 237, 25, 62, 20, 34, 132, 62, 192, 229, 152, 189, 55, 130, 181, 189, 80, 202, 254, 189, 104, 44, 185, 190, 247, 21, 139, 61, 226, 95, 236, 189, 48, 237, 120, 190, 141, 55, 20, 62, 136, 99, 243, 189, 75, 44, 53, 62, 248, 104, 56, 61, 93, 47, 145, 189, 51, 228, 132, 62, 74, 87, 174, 190, 27, 228, 201, 187, 154, 216, 41, 190, 227, 137, 36, 61, 143, 57, 15, 190, 245, 89, 135, 61, 150, 178, 131, 62, 94, 142, 4, 190, 238, 135, 156, 61, 151, 101, 43, 189, 110, 207, 137, 190, 134, 235, 89, 62, 135, 15, 36, 190, 185, 140, 119, 62, 32, 181, 26, 191, 19, 73, 223, 61, 12, 245, 26, 62, 248, 78, 162, 190, 227, 115, 112, 190, 198, 127, 179, 190, 78, 129, 164, 61, 26, 144, 51, 62, 186, 111, 77, 62, 226, 115, 90, 190, 5, 66, 18, 189, 194, 241, 7, 189, 59, 232, 212, 189, 60, 194, 199, 62, 58, 77, 51, 59, 242, 73, 78, 62, 138, 166, 161, 190, 146, 237, 250, 61, 42, 49, 233, 189, 92, 34, 162, 60, 29, 131, 221, 61, 208, 79, 229, 61, 223, 205, 122, 189, 163, 59, 33, 61, 141, 219, 9, 62, 68, 203, 7, 62, 12, 144, 46, 62, 131, 103, 44, 61, 137, 236, 60, 62, 184, 230, 152, 62, 113, 54, 23, 189, 18, 240, 141, 62, 193, 74, 61, 191, 180, 71, 24, 62, 194, 145, 189, 189, 15, 15, 111, 190, 134, 24, 7, 61, 228, 121, 65, 189, 182, 77, 234, 189, 195, 21, 225, 62, 115, 141, 35, 62, 135, 130, 138, 190, 67, 15, 170, 190, 86, 10, 214, 61, 127, 137, 17, 62, 180, 8, 16, 188, 188, 236, 97, 189, 100, 77, 52, 189, 174, 236, 17, 190, 248, 158, 206, 189, 138, 78, 218, 188, 199, 181, 10, 189, 80, 3, 11, 190, 111, 58, 17, 190, 214, 124, 91, 61, 228, 100, 207, 60, 131, 88, 27, 62, 86, 184, 56, 60, 202, 145, 141, 187, 231, 2, 175, 61, 189, 87, 197, 61, 43, 164, 146, 188, 209, 57, 230, 189, 206, 196, 184, 189, 131, 130, 24, 190, 70, 126, 47, 188, 30, 149, 23, 190, 192, 104, 142, 189, 126, 24, 11, 62, 98, 172, 44, 61, 168, 4, 60, 190, 86, 72, 211, 189, 129, 142, 250, 189, 130, 194, 68, 189, 162, 237, 32, 62, 113, 99, 173, 189, 82, 154, 16, 61, 81, 215, 132, 61, 105, 94, 19, 62, 39, 164, 186, 61, 216, 138, 14, 190, 222, 97, 139, 62, 31, 58, 60, 61, 19, 47, 136, 61, 111, 78, 133, 189, 174, 234, 213, 186, 37, 112, 179, 189, 145, 3, 202, 61, 217, 244, 229, 62, 68, 185, 2, 61, 162, 116, 53, 62, 151, 80, 229, 190, 123, 1, 155, 61, 93, 9, 154, 61, 200, 231, 82, 190, 30, 175, 210, 61, 177, 177, 64, 62, 37, 218, 44, 62, 151, 98, 136, 61, 93, 123, 111, 188, 48, 124, 229, 60, 83, 158, 155, 190, 222, 3, 56, 62, 18, 114, 176, 62, 108, 55, 118, 62, 193, 2, 67, 62, 211, 135, 164, 189, 57, 15, 91, 62, 217, 30, 8, 62, 16, 252, 55, 190, 102, 160, 220, 61, 135, 52, 175, 61, 119, 135, 174, 60, 103, 16, 126, 61, 23, 168, 18, 62, 248, 225, 60, 190, 246, 185, 5, 190, 218, 78, 214, 61, 163, 49, 35, 190, 60, 184, 250, 189, 0, 169, 185, 61, 157, 12, 94, 61, 148, 84, 110, 188, 120, 91, 175, 189, 142, 220, 240, 189, 161, 73, 104, 189, 162, 140, 184, 188, 77, 110, 179, 189, 27, 73, 217, 188, 28, 62, 67, 60, 48, 200, 182, 189, 88, 74, 103, 189, 140, 0, 106, 61, 196, 217, 46, 190, 238, 203, 21, 189, 250, 176, 58, 61, 80, 89, 41, 190, 31, 245, 184, 189, 23, 228, 159, 189, 5, 43, 35, 190, 57, 50, 185, 189, 134, 132, 222, 60, 134, 55, 185, 190, 240, 182, 174, 190, 88, 210, 79, 61, 52, 207, 235, 189, 200, 76, 105, 61, 219, 43, 118, 190, 88, 53, 228, 61, 32, 13, 157, 190, 142, 237, 196, 62, 42, 184, 177, 189, 89, 91, 84, 190, 190, 56, 236, 60, 17, 195, 113, 189, 121, 162, 238, 62, 199, 93, 243, 190, 219, 169, 0, 190, 251, 73, 106, 189, 239, 47, 75, 190, 25, 79, 53, 62, 140, 112, 151, 188, 114, 230, 182, 189, 141, 19, 196, 62, 125, 24, 90, 62, 47, 226, 188, 62, 234, 216, 125, 60, 81, 117, 92, 190, 136, 255, 172, 190, 88, 114, 66, 62, 47, 137, 199, 61, 187, 4, 22, 190, 106, 16, 50, 62, 204, 220, 144, 190, 202, 242, 164, 190, 84, 108, 187, 190, 199, 206, 18, 62, 194, 94, 113, 189, 136, 135, 22, 62, 135, 189, 56, 61, 251, 205, 129, 62, 36, 227, 152, 61, 7, 37, 60, 62, 144, 127, 32, 190, 93, 187, 212, 190, 244, 226, 77, 61, 199, 243, 39, 190, 210, 139, 176, 62, 201, 251, 246, 190, 162, 100, 87, 189, 10, 38, 243, 188, 242, 154, 202, 190, 167, 198, 54, 191, 188, 146, 123, 190, 6, 120, 14, 61, 13, 226, 148, 61, 70, 105, 140, 58, 81, 215, 138, 62, 102, 69, 132, 61, 154, 29, 242, 190, 201, 181, 19, 190, 15, 171, 145, 190, 7, 241, 56, 190, 130, 110, 130, 190, 169, 81, 43, 62, 3, 123, 36, 190, 171, 76, 217, 61, 38, 101, 234, 61, 124, 221, 140, 61, 22, 101, 184, 189, 217, 111, 17, 190, 194, 197, 11, 190, 197, 215, 70, 190, 88, 182, 110, 190, 239, 208, 155, 190, 104, 220, 37, 60, 143, 89, 147, 62, 165, 239, 150, 190, 168, 233, 168, 62, 71, 26, 47, 190, 222, 67, 98, 189, 104, 249, 138, 62, 107, 232, 29, 62, 141, 232, 204, 189, 25, 250, 243, 61, 114, 103, 28, 190, 121, 193, 157, 62, 226, 220, 220, 190, 163, 204, 15, 190, 156, 19, 130, 61, 244, 126, 27, 62, 18, 130, 139, 62, 82, 60, 2, 62, 164, 155, 148, 189, 94, 96, 79, 62, 127, 206, 173, 190, 35, 54, 73, 190, 158, 243, 197, 62, 106, 35, 176, 61, 254, 71, 123, 190, 252, 174, 205, 60, 7, 76, 53, 62, 216, 68, 34, 188, 55, 21, 232, 61, 4, 253, 240, 61, 179, 108, 121, 62, 246, 116, 230, 189, 72, 250, 19, 62, 99, 181, 12, 63, 14, 112, 33, 190, 95, 226, 188, 61, 199, 135, 128, 188, 58, 118, 162, 190, 69, 89, 99, 60, 251, 117, 252, 189, 154, 81, 201, 189, 32, 64, 7, 190, 44, 116, 150, 190, 48, 225, 72, 189, 144, 222, 67, 190, 51, 137, 130, 61, 9, 57, 121, 189, 196, 231, 10, 190, 59, 30, 57, 188, 82, 27, 181, 61, 105, 71, 39, 188, 247, 235, 58, 190, 80, 132, 7, 190, 186, 228, 32, 61, 105, 235, 6, 62, 23, 56, 79, 62, 146, 230, 59, 189, 146, 123, 113, 189, 147, 80, 169, 61, 5, 133, 215, 189, 226, 61, 215, 59, 161, 1, 25, 189, 21, 14, 144, 189, 152, 214, 14, 190, 114, 109, 174, 190, 171, 46, 55, 60, 58, 206, 170, 61, 136, 29, 31, 62, 69, 195, 185, 62, 197, 201, 118, 189, 33, 185, 158, 62, 194, 187, 39, 62, 106, 245, 228, 60, 139, 80, 59, 191, 27, 123, 209, 61, 97, 17, 10, 190, 182, 163, 5, 190, 162, 181, 250, 61, 7, 111, 133, 190, 239, 167, 146, 61, 31, 135, 60, 62, 72, 226, 90, 62, 179, 78, 52, 190, 168, 35, 130, 189, 246, 160, 0, 62, 156, 186, 32, 62, 24, 141, 78, 62, 235, 131, 237, 190, 198, 30, 209, 190, 170, 216, 129, 62, 63, 230, 27, 191, 0, 99, 85, 189, 190, 231, 35, 190, 183, 237, 74, 190, 85, 86, 215, 61, 185, 236, 114, 62, 127, 151, 115, 190, 165, 212, 206, 61, 148, 195, 140, 189, 245, 73, 56, 190, 141, 235, 138, 62, 200, 109, 80, 191, 7, 27, 165, 61, 26, 55, 147, 188, 61, 139, 35, 61, 71, 145, 169, 190, 82, 203, 170, 190, 138, 67, 200, 60, 6, 7, 137, 62, 64, 229, 124, 62, 102, 2, 74, 190, 163, 31, 2, 61, 206, 5, 56, 60, 63, 231, 181, 189, 200, 219, 74, 187, 207, 202, 211, 60, 27, 217, 1, 190, 250, 104, 145, 188, 195, 41, 62, 190, 86, 41, 55, 190, 90, 68, 99, 190, 153, 234, 129, 61, 4, 237, 127, 61, 119, 36, 76, 61, 89, 2, 173, 60, 29, 91, 171, 189, 154, 192, 39, 62, 124, 182, 66, 62, 53, 148, 168, 189, 114, 86, 80, 61, 114, 246, 89, 189, 52, 233, 179, 62, 205, 190, 165, 62, 17, 186, 216, 189, 109, 144, 190, 187, 146, 66, 1, 61, 133, 197, 74, 61, 17, 198, 196, 190, 245, 230, 21, 61, 184, 239, 91, 59, 126, 39, 29, 59, 175, 213, 146, 62, 216, 129, 130, 188, 134, 81, 191, 187, 245, 91, 51, 60, 54, 36, 129, 61, 125, 20, 195, 61, 59, 201, 214, 189, 246, 92, 184, 60, 3, 175, 179, 61, 55, 75, 9, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 8, 250, 61, 232, 17, 146, 188, 83, 40, 180, 62, 184, 35, 138, 189, 97, 251, 155, 62, 5, 125, 72, 190, 46, 214, 74, 190, 90, 72, 177, 61, 31, 189, 146, 189, 213, 145, 130, 60, 165, 147, 13, 189, 82, 192, 13, 190, 221, 55, 9, 62, 234, 178, 86, 62, 116, 39, 137, 188, 53, 76, 89, 62, 9, 196, 14, 190, 246, 117, 189, 59, 32, 133, 189, 60, 49, 219, 112, 62, 90, 6, 161, 188, 134, 6, 136, 61, 141, 139, 188, 189, 228, 27, 210, 188, 24, 162, 12, 190, 128, 73, 19, 60, 1, 73, 99, 62, 50, 126, 101, 190, 24, 91, 30, 61, 160, 123, 59, 62, 7, 96, 8, 62, 9, 102, 77, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 71, 113, 190, 171, 4, 237, 189, 146, 60, 150, 63, 235, 121, 207, 61, 198, 124, 30, 60, 58, 83, 25, 191, 192, 52, 79, 58, 12, 185, 135, 190, 43, 111, 47, 190, 133, 251, 230, 190, 27, 47, 30, 190, 122, 156, 19, 189, 105, 63, 4, 191, 12, 125, 32, 62, 175, 218, 107, 191, 213, 140, 201, 190, 5, 145, 65, 191, 170, 168, 196, 61, 104, 93, 19, 62, 225, 106, 141, 62, 247, 38, 192, 190, 15, 78, 113, 190, 113, 122, 124, 61, 85, 95, 148, 62, 9, 223, 97, 61, 3, 67, 34, 63, 203, 69, 129, 62, 25, 55, 80, 190, 172, 24, 142, 59, 201, 206, 65, 189, 13, 93, 164, 62, 185, 210, 164, 60, 145, 242, 19, 190, 166, 124, 141, 189, 19, 216, 107, 62, 136, 143, 231, 61, 127, 22, 146, 190, 223, 81, 178, 62, 191, 94, 160, 60, 8, 131, 204, 189, 232, 31, 173, 62, 188, 115, 157, 190, 172, 189, 97, 62, 11, 48, 189, 61, 214, 243, 56, 190, 24, 98, 32, 190, 9, 177, 255, 61, 190, 150, 205, 188, 56, 40, 253, 62, 115, 148, 25, 190, 41, 38, 154, 188, 40, 65, 184, 188, 192, 10, 152, 62, 73, 171, 88, 190, 255, 150, 242, 61, 29, 162, 57, 62, 109, 5, 169, 61, 106, 209, 217, 61, 65, 36, 60, 190, 161, 75, 45, 63, 64, 166, 52, 62, 44, 9, 155, 190, 239, 90, 133, 190, 153, 234, 60, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 123, 52, 62, 41, 246, 111, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {208, 54, 164, 191, 132, 68, 134, 60, 31, 130, 131, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {176, 134, 184, 63, 177, 223, 48, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0086/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}