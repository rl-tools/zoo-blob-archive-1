// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 242, 137, 190, 141, 248, 97, 63, 32, 94, 252, 62, 38, 91, 149, 190, 202, 4, 214, 191, 9, 242, 191, 190, 162, 201, 176, 190, 8, 31, 213, 188, 20, 102, 238, 190, 12, 54, 232, 190, 246, 247, 4, 62, 51, 36, 54, 191, 17, 69, 138, 61, 67, 166, 4, 190, 88, 209, 17, 63, 23, 127, 196, 190, 106, 201, 150, 63, 75, 236, 249, 62, 122, 246, 59, 62, 166, 117, 16, 190, 227, 142, 70, 63, 138, 235, 40, 191, 218, 179, 128, 191, 76, 30, 252, 189, 64, 210, 50, 190, 82, 177, 166, 191, 133, 5, 183, 61, 106, 121, 193, 189, 79, 135, 114, 191, 138, 45, 167, 62, 4, 14, 67, 62, 114, 223, 50, 63, 197, 197, 36, 190, 32, 155, 13, 191, 83, 73, 216, 63, 240, 148, 211, 62, 148, 65, 23, 63, 189, 95, 37, 63, 69, 95, 62, 62, 122, 124, 44, 63, 92, 218, 29, 191, 105, 53, 11, 190, 101, 181, 132, 190, 86, 103, 188, 191, 28, 106, 161, 190, 170, 13, 18, 63, 51, 94, 130, 63, 94, 65, 83, 62, 205, 242, 201, 62, 40, 82, 212, 190, 254, 206, 154, 62, 106, 170, 94, 188, 97, 159, 74, 188, 222, 8, 88, 190, 122, 79, 81, 63, 186, 238, 160, 190, 84, 126, 133, 190, 171, 99, 216, 189, 22, 167, 72, 191, 186, 81, 250, 190, 150, 221, 242, 62, 105, 52, 81, 190, 52, 202, 236, 62, 136, 190, 29, 63, 184, 46, 182, 191, 29, 41, 213, 190, 51, 25, 160, 190, 193, 6, 122, 190, 87, 107, 250, 61, 71, 213, 130, 62, 214, 84, 146, 190, 211, 192, 107, 62, 217, 229, 146, 190, 61, 107, 11, 191, 7, 21, 173, 190, 169, 205, 201, 62, 62, 65, 147, 63, 233, 59, 72, 62, 84, 218, 160, 62, 249, 59, 134, 63, 137, 152, 199, 62, 239, 249, 239, 62, 161, 123, 106, 191, 122, 80, 166, 190, 41, 212, 63, 189, 166, 115, 151, 190, 173, 178, 161, 190, 201, 91, 120, 61, 86, 73, 255, 190, 161, 205, 241, 190, 244, 179, 253, 62, 218, 92, 101, 189, 38, 221, 28, 191, 51, 184, 47, 63, 48, 200, 51, 63, 245, 47, 141, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 82, 180, 190, 31, 248, 138, 190, 203, 57, 204, 190, 131, 247, 6, 191, 202, 32, 156, 189, 28, 7, 173, 188, 169, 189, 145, 60, 163, 80, 146, 190, 128, 128, 163, 62, 137, 198, 233, 189, 211, 30, 179, 189, 78, 187, 89, 188, 201, 34, 23, 62, 172, 16, 34, 62, 197, 149, 165, 190, 138, 79, 130, 61, 13, 250, 237, 62, 247, 87, 251, 189, 191, 167, 68, 191, 201, 234, 137, 61, 41, 174, 72, 191, 50, 195, 156, 189, 92, 221, 25, 63, 110, 128, 128, 61, 141, 128, 128, 62, 129, 114, 7, 62, 101, 182, 98, 190, 203, 255, 21, 191, 21, 179, 14, 191, 35, 90, 89, 61, 192, 148, 171, 62, 181, 211, 203, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 110, 3, 61, 8, 158, 6, 190, 21, 14, 75, 189, 205, 107, 143, 61, 42, 68, 181, 189, 183, 236, 23, 190, 53, 56, 169, 61, 225, 149, 202, 189, 183, 57, 169, 189, 211, 53, 212, 189, 132, 160, 143, 62, 237, 186, 172, 190, 87, 17, 65, 61, 182, 229, 181, 187, 173, 179, 2, 61, 88, 93, 44, 62, 133, 233, 10, 61, 233, 16, 186, 61, 150, 97, 158, 191, 20, 162, 102, 62, 189, 37, 79, 62, 134, 82, 4, 191, 252, 225, 209, 189, 191, 224, 207, 61, 25, 72, 192, 60, 220, 105, 185, 62, 238, 154, 12, 62, 186, 92, 37, 191, 194, 18, 75, 190, 189, 98, 153, 189, 204, 148, 35, 62, 131, 6, 68, 62, 37, 19, 6, 62, 162, 88, 132, 61, 236, 166, 53, 188, 80, 147, 157, 188, 222, 231, 14, 190, 223, 199, 80, 189, 254, 212, 198, 188, 16, 208, 142, 61, 94, 208, 250, 188, 85, 104, 34, 190, 48, 26, 46, 190, 220, 187, 12, 190, 106, 223, 229, 189, 44, 255, 205, 61, 232, 58, 47, 190, 224, 73, 184, 61, 100, 99, 4, 190, 199, 206, 33, 61, 72, 92, 4, 189, 155, 14, 89, 189, 97, 106, 48, 189, 22, 221, 32, 190, 139, 229, 139, 61, 46, 21, 164, 61, 184, 238, 7, 190, 55, 110, 25, 190, 91, 238, 188, 61, 88, 239, 14, 62, 129, 244, 52, 62, 190, 113, 46, 190, 117, 107, 192, 189, 169, 187, 6, 190, 10, 188, 73, 190, 120, 106, 150, 191, 6, 22, 222, 62, 106, 166, 12, 191, 136, 250, 100, 62, 63, 184, 124, 62, 218, 26, 100, 61, 213, 12, 145, 189, 99, 135, 7, 62, 201, 191, 174, 190, 37, 195, 159, 190, 254, 238, 212, 62, 143, 86, 155, 61, 74, 33, 196, 62, 152, 219, 207, 191, 37, 167, 166, 190, 215, 9, 21, 189, 137, 140, 244, 189, 201, 214, 94, 58, 181, 107, 13, 190, 10, 56, 201, 190, 120, 22, 253, 62, 106, 32, 128, 62, 182, 233, 117, 62, 87, 165, 26, 188, 172, 168, 223, 190, 187, 74, 32, 190, 193, 219, 35, 62, 202, 135, 0, 63, 220, 239, 75, 190, 118, 161, 131, 62, 25, 109, 252, 190, 253, 253, 108, 189, 179, 139, 163, 61, 184, 168, 121, 189, 152, 144, 201, 188, 45, 46, 140, 189, 74, 154, 21, 190, 87, 186, 246, 189, 173, 8, 26, 190, 165, 215, 173, 61, 177, 16, 213, 61, 102, 69, 88, 188, 124, 206, 182, 61, 124, 148, 133, 61, 137, 31, 193, 189, 165, 175, 106, 61, 14, 97, 248, 189, 34, 239, 169, 61, 176, 152, 14, 189, 217, 49, 21, 62, 142, 123, 116, 189, 4, 157, 242, 61, 141, 217, 247, 60, 78, 167, 40, 190, 6, 186, 26, 190, 60, 42, 174, 189, 16, 103, 166, 189, 41, 75, 177, 61, 160, 245, 129, 189, 52, 126, 61, 189, 238, 172, 230, 189, 213, 85, 232, 61, 22, 115, 180, 61, 47, 58, 103, 190, 228, 46, 18, 190, 131, 125, 16, 190, 148, 248, 173, 61, 111, 242, 124, 61, 94, 187, 154, 189, 81, 234, 166, 60, 87, 232, 39, 190, 94, 24, 83, 62, 11, 231, 148, 187, 124, 197, 176, 61, 97, 175, 12, 62, 163, 47, 163, 62, 27, 209, 187, 61, 225, 87, 150, 188, 50, 246, 95, 62, 243, 127, 75, 60, 0, 163, 24, 62, 222, 26, 249, 190, 110, 194, 83, 62, 15, 62, 50, 61, 148, 94, 234, 186, 44, 144, 178, 61, 11, 230, 126, 190, 127, 98, 76, 61, 150, 141, 199, 62, 179, 188, 151, 61, 15, 52, 74, 190, 251, 122, 189, 189, 255, 48, 73, 189, 28, 108, 235, 61, 64, 154, 146, 62, 89, 141, 9, 190, 119, 181, 244, 61, 206, 176, 19, 190, 76, 129, 18, 191, 229, 142, 26, 62, 108, 49, 193, 189, 97, 219, 8, 62, 158, 177, 244, 60, 223, 147, 156, 190, 70, 21, 127, 189, 141, 129, 181, 189, 213, 215, 152, 190, 195, 51, 253, 61, 69, 41, 191, 61, 146, 97, 13, 62, 6, 171, 157, 60, 64, 60, 166, 189, 198, 87, 222, 62, 144, 220, 164, 190, 31, 24, 68, 190, 215, 233, 193, 62, 230, 22, 76, 191, 236, 93, 84, 190, 255, 2, 160, 189, 75, 207, 100, 61, 195, 82, 86, 62, 64, 79, 163, 62, 160, 11, 168, 189, 155, 133, 179, 189, 58, 175, 168, 190, 53, 169, 145, 189, 100, 109, 11, 63, 28, 148, 241, 189, 43, 121, 52, 190, 216, 155, 21, 189, 81, 244, 13, 189, 55, 84, 212, 189, 214, 254, 222, 189, 172, 130, 2, 62, 192, 203, 21, 189, 149, 43, 162, 61, 178, 231, 145, 189, 94, 42, 175, 61, 37, 107, 242, 189, 230, 146, 25, 190, 4, 198, 51, 189, 203, 235, 215, 61, 172, 234, 157, 61, 9, 6, 56, 189, 50, 196, 91, 61, 68, 117, 250, 189, 20, 42, 87, 190, 115, 4, 213, 61, 120, 48, 245, 61, 130, 61, 39, 190, 209, 223, 44, 62, 232, 249, 39, 189, 197, 37, 25, 62, 108, 34, 141, 61, 249, 153, 146, 61, 192, 181, 48, 190, 162, 39, 232, 189, 75, 234, 190, 61, 124, 74, 4, 190, 218, 168, 20, 191, 180, 111, 137, 61, 78, 32, 139, 189, 174, 201, 41, 62, 89, 151, 89, 190, 20, 225, 49, 191, 198, 132, 129, 190, 57, 98, 111, 62, 3, 246, 31, 188, 142, 18, 48, 62, 183, 118, 150, 61, 146, 153, 191, 190, 153, 151, 236, 61, 194, 67, 160, 62, 108, 101, 146, 62, 206, 82, 44, 62, 63, 192, 0, 62, 35, 29, 62, 62, 232, 224, 230, 190, 209, 27, 244, 60, 118, 36, 222, 61, 61, 246, 9, 190, 111, 6, 155, 189, 59, 254, 52, 190, 92, 252, 76, 62, 106, 184, 70, 62, 192, 218, 6, 190, 51, 193, 62, 61, 92, 34, 128, 190, 150, 170, 114, 61, 69, 173, 13, 190, 204, 127, 160, 62, 10, 84, 190, 189, 21, 119, 230, 62, 243, 157, 152, 190, 158, 133, 66, 62, 99, 28, 148, 190, 232, 81, 145, 190, 91, 176, 237, 59, 227, 156, 9, 63, 182, 208, 24, 62, 84, 176, 60, 62, 112, 207, 231, 61, 38, 225, 22, 191, 236, 18, 243, 189, 69, 232, 133, 61, 236, 134, 157, 62, 249, 59, 26, 62, 10, 177, 17, 62, 216, 147, 60, 62, 148, 243, 82, 191, 15, 139, 13, 61, 66, 126, 167, 61, 253, 121, 166, 190, 14, 216, 186, 189, 169, 141, 68, 190, 95, 29, 112, 62, 101, 76, 163, 62, 210, 33, 149, 62, 146, 228, 3, 190, 20, 92, 233, 189, 131, 108, 199, 61, 4, 226, 51, 190, 49, 128, 183, 62, 23, 185, 67, 187, 216, 157, 243, 61, 194, 17, 164, 189, 183, 246, 81, 61, 251, 18, 107, 191, 41, 216, 241, 191, 38, 105, 194, 191, 243, 217, 251, 62, 61, 99, 120, 190, 197, 219, 195, 190, 0, 18, 103, 60, 207, 5, 174, 190, 31, 212, 144, 62, 198, 207, 110, 189, 198, 146, 168, 189, 124, 108, 33, 61, 1, 251, 71, 190, 213, 240, 43, 62, 216, 36, 54, 191, 225, 54, 71, 62, 63, 189, 131, 61, 49, 199, 206, 189, 117, 193, 148, 189, 234, 6, 51, 191, 173, 117, 139, 62, 134, 5, 156, 62, 69, 91, 54, 191, 38, 17, 132, 190, 38, 151, 130, 190, 86, 170, 129, 62, 33, 234, 21, 62, 37, 108, 214, 61, 200, 54, 154, 62, 69, 84, 82, 62, 18, 95, 243, 190, 130, 202, 185, 190, 238, 63, 133, 190, 41, 208, 94, 190, 98, 11, 105, 190, 96, 245, 236, 189, 103, 69, 211, 189, 94, 111, 250, 61, 7, 170, 91, 190, 89, 17, 66, 190, 156, 74, 241, 183, 104, 33, 55, 61, 1, 108, 16, 61, 0, 165, 145, 187, 154, 50, 22, 60, 23, 87, 6, 191, 46, 118, 16, 190, 47, 127, 117, 187, 156, 97, 234, 62, 117, 204, 5, 190, 246, 178, 10, 190, 194, 127, 4, 190, 29, 41, 236, 61, 25, 31, 111, 62, 219, 101, 227, 62, 84, 214, 92, 189, 247, 63, 242, 189, 99, 135, 111, 190, 230, 65, 115, 61, 182, 243, 189, 62, 245, 169, 137, 188, 60, 64, 141, 189, 85, 119, 245, 61, 115, 124, 243, 189, 214, 98, 31, 190, 85, 127, 157, 189, 0, 144, 32, 62, 250, 94, 201, 61, 187, 112, 66, 61, 51, 33, 132, 189, 54, 58, 196, 58, 26, 88, 177, 189, 54, 225, 184, 61, 188, 122, 198, 188, 202, 167, 171, 61, 82, 93, 228, 61, 244, 145, 4, 190, 185, 22, 234, 60, 135, 7, 6, 62, 100, 88, 190, 60, 185, 81, 8, 190, 141, 206, 41, 190, 44, 84, 0, 188, 222, 123, 174, 60, 44, 221, 23, 61, 129, 51, 156, 61, 105, 249, 246, 189, 45, 59, 120, 61, 102, 206, 225, 188, 89, 194, 245, 189, 178, 234, 253, 189, 67, 123, 128, 61, 38, 211, 113, 191, 120, 241, 168, 60, 85, 50, 167, 189, 156, 151, 233, 61, 199, 141, 52, 190, 127, 180, 0, 191, 140, 221, 154, 61, 25, 227, 158, 60, 150, 3, 158, 62, 13, 121, 145, 62, 108, 123, 242, 61, 240, 63, 143, 191, 21, 167, 220, 62, 79, 248, 61, 62, 82, 119, 112, 61, 177, 184, 32, 61, 239, 140, 198, 61, 206, 123, 197, 189, 14, 138, 154, 191, 230, 212, 251, 61, 246, 15, 25, 61, 196, 183, 191, 190, 15, 225, 152, 189, 24, 132, 15, 60, 218, 166, 71, 62, 234, 52, 194, 62, 89, 253, 5, 62, 217, 68, 6, 190, 234, 115, 102, 190, 221, 220, 73, 61, 27, 206, 24, 60, 207, 103, 213, 62, 196, 216, 162, 61, 28, 165, 150, 60, 93, 248, 61, 190, 34, 227, 222, 189, 6, 107, 186, 61, 186, 149, 246, 189, 28, 219, 90, 61, 104, 131, 120, 62, 136, 11, 198, 62, 30, 222, 59, 61, 152, 26, 9, 191, 230, 208, 63, 187, 154, 0, 41, 189, 80, 213, 136, 62, 162, 132, 31, 61, 78, 82, 128, 190, 81, 203, 206, 189, 119, 241, 73, 61, 175, 181, 90, 189, 46, 146, 220, 189, 10, 126, 44, 59, 240, 140, 5, 61, 129, 151, 148, 61, 102, 115, 168, 62, 216, 203, 96, 62, 223, 186, 143, 190, 19, 166, 248, 189, 17, 241, 66, 61, 24, 95, 106, 190, 124, 48, 253, 188, 59, 60, 1, 62, 179, 68, 6, 190, 138, 129, 54, 190, 52, 236, 151, 62, 242, 173, 217, 190, 193, 89, 20, 190, 170, 228, 5, 191, 111, 165, 237, 191, 77, 140, 1, 191, 122, 114, 0, 62, 238, 13, 237, 62, 0, 58, 79, 63, 137, 97, 134, 190, 7, 20, 146, 190, 49, 34, 163, 191, 174, 133, 195, 61, 76, 100, 73, 62, 200, 140, 151, 190, 142, 231, 213, 62, 240, 145, 11, 191, 192, 11, 21, 62, 114, 204, 4, 62, 222, 102, 98, 190, 57, 67, 78, 190, 188, 152, 135, 62, 148, 55, 154, 60, 57, 237, 138, 61, 184, 112, 201, 190, 177, 199, 216, 190, 35, 235, 214, 62, 169, 61, 132, 190, 254, 237, 210, 60, 76, 240, 160, 190, 45, 208, 232, 189, 227, 215, 150, 60, 247, 226, 45, 61, 97, 176, 179, 189, 169, 37, 244, 61, 229, 116, 172, 187, 81, 96, 44, 190, 189, 145, 230, 189, 233, 75, 31, 62, 135, 247, 133, 189, 2, 85, 142, 188, 72, 7, 201, 62, 0, 65, 15, 191, 63, 162, 214, 62, 174, 112, 38, 190, 30, 188, 155, 190, 192, 32, 190, 62, 136, 56, 136, 62, 77, 101, 54, 62, 164, 236, 137, 191, 21, 228, 233, 189, 190, 7, 96, 189, 117, 62, 173, 190, 172, 67, 99, 190, 79, 193, 89, 187, 10, 136, 76, 62, 66, 215, 67, 62, 56, 93, 229, 61, 29, 40, 253, 190, 0, 77, 47, 190, 30, 53, 226, 61, 28, 185, 57, 189, 37, 142, 78, 62, 224, 253, 86, 190, 238, 206, 199, 62, 64, 41, 225, 190, 142, 43, 220, 62, 119, 19, 189, 189, 103, 209, 75, 191, 209, 153, 52, 188, 5, 239, 20, 63, 210, 79, 169, 60, 4, 97, 38, 62, 4, 139, 17, 62, 100, 127, 36, 191, 7, 197, 49, 61, 116, 188, 168, 190, 121, 62, 100, 62, 30, 98, 211, 188, 155, 168, 205, 61, 151, 128, 192, 62, 50, 102, 159, 191, 18, 24, 188, 61, 96, 19, 138, 189, 165, 64, 66, 191, 10, 179, 102, 190, 100, 176, 219, 190, 85, 115, 101, 62, 46, 48, 14, 63, 152, 144, 153, 62, 172, 206, 254, 190, 96, 245, 8, 191, 154, 234, 147, 62, 195, 147, 202, 189, 213, 4, 232, 62, 70, 76, 28, 190, 198, 173, 43, 190, 159, 200, 49, 62, 50, 127, 100, 62, 182, 238, 105, 190, 98, 111, 132, 190, 33, 109, 243, 190, 155, 204, 187, 190, 154, 24, 195, 62, 237, 10, 235, 188, 9, 30, 136, 189, 162, 228, 15, 190, 252, 210, 151, 190, 222, 81, 157, 61, 73, 195, 8, 190, 31, 201, 198, 190, 106, 161, 123, 190, 184, 58, 4, 62, 114, 155, 77, 62, 0, 210, 63, 62, 230, 7, 194, 187, 34, 110, 216, 57, 70, 46, 165, 62, 77, 44, 76, 191, 238, 0, 119, 61, 225, 37, 185, 190, 147, 3, 187, 189, 128, 227, 28, 190, 170, 188, 32, 62, 226, 63, 215, 188, 255, 223, 228, 185, 49, 193, 26, 190, 254, 155, 230, 189, 94, 169, 157, 188, 81, 63, 150, 61, 54, 193, 54, 61, 212, 123, 29, 189, 206, 164, 245, 189, 76, 146, 18, 62, 124, 205, 66, 190, 62, 180, 224, 60, 38, 122, 198, 61, 194, 202, 54, 189, 168, 93, 182, 190, 171, 43, 130, 190, 254, 158, 240, 61, 185, 134, 26, 189, 122, 25, 3, 189, 127, 111, 139, 62, 197, 140, 185, 189, 138, 113, 202, 61, 30, 144, 188, 188, 41, 170, 17, 188, 151, 198, 86, 62, 199, 250, 153, 189, 243, 207, 194, 60, 179, 2, 112, 189, 156, 79, 71, 190, 124, 175, 90, 190, 47, 227, 199, 188, 226, 102, 13, 189, 187, 249, 146, 62, 18, 11, 157, 61, 49, 20, 94, 190, 218, 33, 143, 190, 178, 1, 102, 191, 160, 102, 229, 61, 138, 42, 73, 188, 147, 165, 94, 62, 31, 93, 51, 188, 91, 26, 16, 62, 27, 21, 13, 190, 15, 97, 255, 61, 231, 146, 161, 61, 239, 91, 239, 189, 205, 222, 179, 62, 127, 203, 204, 188, 195, 46, 70, 62, 151, 207, 134, 191, 63, 106, 134, 189, 121, 99, 199, 189, 214, 181, 36, 190, 244, 57, 179, 190, 184, 208, 188, 189, 89, 48, 192, 190, 16, 245, 82, 62, 135, 166, 141, 62, 26, 90, 145, 189, 164, 62, 56, 190, 70, 181, 3, 190, 78, 49, 199, 190, 160, 163, 193, 61, 231, 98, 172, 189, 57, 225, 90, 190, 162, 227, 27, 62, 6, 88, 91, 190, 198, 138, 30, 62, 50, 33, 139, 60, 97, 179, 32, 189, 72, 228, 140, 62, 118, 110, 158, 190, 226, 233, 184, 189, 234, 30, 138, 189, 210, 197, 143, 62, 162, 85, 185, 188, 64, 199, 51, 188, 72, 77, 85, 62, 166, 238, 109, 190, 196, 51, 14, 189, 40, 187, 59, 190, 176, 7, 186, 190, 54, 148, 241, 61, 203, 212, 163, 189, 80, 52, 88, 62, 73, 166, 147, 191, 15, 155, 197, 61, 1, 182, 49, 61, 146, 64, 4, 191, 62, 109, 91, 190, 113, 126, 85, 190, 103, 143, 222, 61, 76, 197, 233, 61, 52, 165, 16, 62, 114, 129, 232, 190, 22, 149, 120, 189, 190, 101, 90, 189, 234, 234, 254, 189, 150, 37, 219, 62, 71, 28, 175, 189, 88, 132, 78, 62, 214, 27, 163, 190, 201, 22, 223, 61, 136, 250, 244, 189, 255, 103, 96, 189, 182, 222, 192, 61, 133, 30, 14, 189, 180, 239, 113, 189, 200, 0, 250, 61, 11, 9, 23, 62, 92, 103, 32, 60, 206, 181, 22, 62, 79, 121, 167, 61, 89, 240, 45, 62, 145, 43, 144, 62, 136, 8, 25, 189, 228, 76, 122, 62, 5, 223, 122, 191, 28, 243, 28, 62, 191, 78, 178, 61, 78, 126, 130, 190, 19, 90, 254, 60, 47, 161, 11, 188, 98, 29, 186, 189, 117, 250, 208, 62, 146, 38, 244, 61, 178, 207, 166, 190, 124, 109, 190, 190, 216, 166, 207, 61, 198, 247, 15, 62, 239, 82, 74, 61, 188, 236, 97, 189, 100, 77, 52, 189, 174, 236, 17, 190, 248, 158, 206, 189, 138, 78, 218, 188, 199, 181, 10, 189, 80, 3, 11, 190, 111, 58, 17, 190, 214, 124, 91, 61, 228, 100, 207, 60, 131, 88, 27, 62, 86, 184, 56, 60, 202, 145, 141, 187, 231, 2, 175, 61, 189, 87, 197, 61, 43, 164, 146, 188, 209, 57, 230, 189, 206, 196, 184, 189, 131, 130, 24, 190, 70, 126, 47, 188, 30, 149, 23, 190, 192, 104, 142, 189, 126, 24, 11, 62, 98, 172, 44, 61, 168, 4, 60, 190, 86, 72, 211, 189, 129, 142, 250, 189, 130, 194, 68, 189, 162, 237, 32, 62, 113, 99, 173, 189, 82, 154, 16, 61, 81, 215, 132, 61, 225, 254, 84, 62, 9, 68, 39, 59, 106, 45, 21, 190, 212, 153, 144, 62, 111, 45, 141, 61, 215, 242, 25, 62, 66, 166, 80, 189, 101, 47, 32, 190, 246, 239, 216, 189, 203, 61, 240, 60, 121, 34, 9, 63, 57, 166, 28, 62, 144, 68, 97, 62, 70, 147, 17, 191, 235, 173, 10, 189, 113, 163, 28, 62, 18, 27, 95, 190, 8, 84, 2, 62, 2, 255, 114, 62, 218, 163, 16, 62, 130, 20, 190, 189, 156, 155, 227, 189, 163, 183, 90, 61, 91, 195, 196, 190, 62, 91, 24, 62, 6, 24, 223, 62, 113, 111, 218, 62, 100, 30, 32, 62, 132, 190, 172, 189, 149, 165, 63, 62, 145, 66, 218, 61, 16, 218, 15, 190, 102, 160, 220, 61, 135, 52, 175, 61, 119, 135, 174, 60, 103, 16, 126, 61, 23, 168, 18, 62, 248, 225, 60, 190, 246, 185, 5, 190, 218, 78, 214, 61, 163, 49, 35, 190, 60, 184, 250, 189, 0, 169, 185, 61, 157, 12, 94, 61, 148, 84, 110, 188, 120, 91, 175, 189, 142, 220, 240, 189, 161, 73, 104, 189, 162, 140, 184, 188, 77, 110, 179, 189, 27, 73, 217, 188, 28, 62, 67, 60, 48, 200, 182, 189, 88, 74, 103, 189, 140, 0, 106, 61, 196, 217, 46, 190, 238, 203, 21, 189, 250, 176, 58, 61, 80, 89, 41, 190, 31, 245, 184, 189, 23, 228, 159, 189, 5, 43, 35, 190, 57, 50, 185, 189, 134, 132, 222, 60, 84, 79, 180, 190, 220, 97, 13, 191, 216, 248, 21, 62, 30, 251, 177, 187, 84, 171, 154, 61, 90, 154, 149, 190, 8, 182, 234, 61, 205, 117, 38, 191, 183, 19, 152, 62, 75, 120, 34, 190, 10, 197, 248, 189, 245, 183, 12, 61, 53, 86, 137, 189, 28, 85, 224, 62, 208, 169, 60, 191, 179, 254, 44, 190, 206, 248, 86, 189, 113, 53, 149, 189, 61, 143, 250, 62, 8, 112, 50, 59, 5, 246, 45, 190, 105, 192, 179, 62, 250, 150, 52, 62, 182, 22, 177, 62, 5, 125, 21, 60, 209, 33, 134, 190, 145, 252, 224, 190, 241, 107, 100, 62, 27, 28, 94, 62, 224, 182, 195, 189, 118, 165, 103, 62, 153, 149, 164, 190, 181, 108, 147, 190, 189, 135, 83, 191, 238, 61, 106, 62, 223, 30, 60, 61, 161, 224, 90, 62, 118, 212, 29, 61, 79, 116, 155, 62, 194, 100, 3, 59, 7, 20, 107, 62, 67, 31, 13, 190, 50, 160, 32, 191, 46, 53, 57, 61, 167, 55, 48, 190, 209, 235, 180, 62, 83, 242, 113, 191, 27, 126, 191, 189, 218, 152, 58, 60, 29, 94, 134, 190, 9, 45, 254, 190, 100, 184, 82, 190, 76, 96, 19, 188, 171, 201, 13, 62, 8, 35, 151, 188, 99, 6, 156, 62, 212, 179, 234, 189, 219, 85, 8, 191, 1, 75, 115, 190, 170, 124, 219, 190, 170, 179, 230, 189, 134, 248, 178, 189, 240, 90, 59, 62, 7, 91, 128, 190, 242, 49, 0, 62, 183, 51, 172, 61, 77, 123, 144, 62, 79, 193, 6, 62, 1, 154, 154, 190, 80, 47, 80, 190, 48, 145, 121, 190, 254, 158, 193, 60, 22, 25, 59, 191, 245, 188, 112, 189, 215, 177, 185, 62, 82, 221, 202, 190, 255, 218, 181, 62, 114, 50, 36, 190, 6, 26, 38, 190, 129, 212, 156, 62, 173, 87, 18, 62, 216, 127, 240, 61, 171, 170, 230, 190, 213, 216, 122, 190, 151, 173, 169, 62, 225, 25, 20, 191, 40, 14, 71, 190, 45, 237, 131, 61, 134, 242, 157, 62, 231, 195, 157, 62, 247, 84, 6, 62, 72, 190, 129, 190, 43, 14, 92, 62, 228, 40, 198, 190, 125, 3, 192, 189, 113, 69, 213, 62, 31, 65, 169, 60, 201, 133, 119, 190, 187, 223, 9, 61, 93, 226, 81, 62, 154, 24, 35, 190, 212, 234, 141, 60, 34, 139, 101, 61, 88, 167, 58, 62, 255, 115, 167, 190, 164, 43, 89, 185, 26, 209, 10, 63, 198, 182, 108, 190, 210, 18, 31, 62, 33, 255, 185, 60, 82, 103, 152, 190, 60, 191, 163, 61, 30, 140, 232, 189, 177, 117, 202, 189, 245, 93, 66, 191, 213, 15, 223, 190, 216, 74, 195, 189, 127, 224, 166, 190, 16, 125, 90, 188, 29, 80, 68, 189, 48, 98, 20, 190, 103, 243, 104, 61, 133, 43, 181, 61, 201, 183, 140, 190, 10, 225, 128, 190, 239, 250, 132, 190, 157, 152, 240, 61, 228, 181, 79, 62, 177, 119, 246, 61, 38, 213, 10, 189, 233, 233, 1, 189, 125, 216, 213, 61, 69, 182, 215, 187, 7, 59, 11, 189, 99, 17, 170, 60, 129, 30, 177, 189, 186, 237, 54, 189, 229, 41, 99, 190, 80, 108, 93, 60, 250, 65, 221, 60, 42, 210, 52, 62, 226, 55, 204, 62, 38, 244, 77, 189, 229, 163, 163, 62, 120, 18, 125, 62, 122, 118, 254, 60, 165, 35, 66, 191, 3, 58, 16, 62, 92, 207, 31, 189, 175, 50, 3, 190, 105, 90, 43, 62, 57, 200, 51, 190, 166, 176, 214, 61, 8, 128, 49, 62, 165, 23, 84, 62, 170, 213, 78, 190, 181, 191, 97, 189, 57, 177, 37, 62, 239, 206, 15, 62, 155, 28, 138, 62, 4, 217, 20, 191, 118, 117, 8, 191, 124, 147, 190, 62, 101, 5, 241, 190, 37, 1, 188, 61, 104, 47, 68, 190, 239, 147, 55, 190, 61, 158, 210, 61, 248, 89, 197, 62, 38, 33, 182, 190, 174, 153, 94, 189, 25, 75, 107, 189, 95, 149, 53, 190, 117, 86, 147, 62, 210, 147, 134, 191, 116, 248, 130, 61, 181, 125, 176, 60, 12, 26, 40, 190, 242, 46, 178, 190, 146, 215, 164, 190, 157, 51, 241, 188, 31, 244, 164, 62, 141, 57, 140, 62, 104, 119, 37, 190, 40, 93, 180, 188, 147, 27, 146, 188, 202, 156, 34, 190, 74, 94, 125, 190, 129, 52, 203, 60, 173, 124, 85, 189, 73, 189, 20, 189, 54, 73, 67, 190, 37, 21, 129, 190, 46, 78, 143, 190, 199, 76, 197, 61, 21, 18, 200, 61, 22, 5, 186, 61, 129, 228, 93, 188, 111, 61, 177, 189, 204, 165, 150, 61, 84, 135, 83, 62, 155, 194, 174, 189, 221, 125, 175, 61, 199, 16, 162, 189, 137, 224, 180, 62, 19, 75, 142, 62, 110, 175, 54, 190, 7, 213, 10, 188, 142, 40, 49, 61, 118, 203, 154, 61, 45, 74, 185, 190, 107, 173, 140, 61, 5, 94, 119, 188, 74, 159, 29, 189, 171, 107, 142, 62, 128, 196, 61, 189, 246, 148, 57, 60, 253, 38, 110, 188, 145, 237, 109, 61, 252, 92, 44, 61, 83, 127, 193, 189, 33, 85, 117, 61, 166, 178, 124, 61, 213, 40, 47, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {82, 176, 210, 61, 232, 17, 146, 188, 169, 56, 179, 62, 184, 35, 138, 189, 51, 221, 168, 62, 108, 74, 167, 190, 46, 214, 74, 190, 196, 227, 194, 61, 142, 8, 47, 189, 132, 3, 135, 61, 3, 50, 239, 189, 82, 192, 13, 190, 130, 157, 70, 62, 222, 148, 75, 62, 57, 94, 31, 59, 185, 112, 92, 62, 17, 15, 46, 190, 222, 205, 9, 60, 105, 207, 159, 60, 240, 188, 132, 62, 56, 208, 154, 60, 115, 79, 195, 61, 141, 139, 188, 189, 47, 190, 143, 189, 24, 162, 12, 190, 226, 144, 153, 188, 179, 97, 76, 62, 237, 194, 89, 190, 128, 180, 84, 61, 176, 196, 116, 62, 79, 10, 20, 62, 103, 113, 76, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 202, 175, 190, 171, 4, 237, 189, 180, 251, 166, 63, 235, 121, 207, 61, 54, 204, 187, 60, 150, 9, 96, 191, 192, 52, 79, 58, 15, 66, 117, 190, 65, 143, 198, 190, 25, 87, 231, 190, 93, 155, 121, 190, 122, 156, 19, 189, 144, 144, 27, 191, 233, 50, 64, 62, 141, 100, 150, 191, 106, 158, 239, 190, 152, 103, 102, 191, 219, 160, 32, 62, 34, 231, 172, 61, 181, 52, 198, 62, 46, 35, 78, 191, 158, 11, 88, 190, 113, 122, 124, 61, 91, 115, 181, 62, 9, 223, 97, 61, 250, 200, 71, 63, 163, 207, 213, 62, 182, 88, 153, 190, 84, 122, 75, 189, 167, 134, 123, 188, 2, 2, 186, 62, 106, 136, 210, 60, 241, 182, 27, 190, 166, 124, 141, 189, 117, 130, 141, 62, 136, 143, 231, 61, 250, 203, 155, 190, 124, 0, 110, 62, 191, 94, 160, 60, 211, 139, 74, 189, 14, 90, 194, 62, 106, 121, 172, 190, 154, 45, 101, 62, 11, 48, 189, 61, 237, 248, 82, 190, 109, 78, 5, 190, 163, 162, 252, 61, 170, 197, 170, 189, 80, 2, 252, 62, 156, 64, 51, 190, 167, 32, 167, 189, 80, 103, 154, 188, 101, 125, 113, 62, 188, 26, 79, 190, 255, 150, 242, 61, 177, 45, 242, 61, 109, 5, 169, 61, 225, 179, 87, 61, 173, 3, 54, 190, 87, 99, 93, 63, 203, 70, 167, 62, 167, 158, 166, 190, 208, 249, 155, 189, 185, 36, 78, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {210, 133, 43, 62, 138, 115, 154, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {160, 238, 106, 191, 175, 106, 75, 189, 72, 245, 96, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {147, 81, 224, 191, 18, 165, 73, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0086/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}