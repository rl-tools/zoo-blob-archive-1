// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {7, 177, 194, 190, 184, 203, 98, 63, 126, 57, 242, 62, 41, 54, 152, 190, 24, 77, 202, 191, 171, 172, 187, 190, 83, 193, 163, 190, 67, 182, 244, 58, 213, 198, 244, 190, 59, 33, 238, 190, 192, 32, 234, 61, 216, 235, 55, 191, 153, 27, 23, 189, 154, 4, 90, 190, 22, 117, 13, 63, 111, 165, 190, 190, 150, 232, 134, 63, 131, 243, 8, 63, 24, 250, 56, 62, 251, 122, 143, 190, 139, 126, 75, 63, 112, 36, 37, 191, 28, 14, 101, 191, 69, 8, 163, 189, 25, 117, 19, 190, 226, 11, 141, 191, 47, 50, 184, 61, 199, 32, 202, 189, 181, 74, 75, 191, 187, 32, 166, 62, 224, 194, 67, 62, 145, 105, 24, 63, 24, 89, 46, 190, 188, 80, 14, 191, 246, 171, 201, 63, 60, 62, 181, 62, 219, 45, 21, 63, 112, 80, 8, 63, 140, 228, 51, 62, 140, 8, 46, 63, 160, 116, 9, 191, 6, 85, 32, 190, 11, 237, 116, 190, 63, 156, 174, 191, 178, 168, 135, 190, 5, 164, 18, 63, 249, 205, 125, 63, 179, 189, 85, 62, 101, 113, 219, 62, 142, 86, 178, 190, 88, 31, 176, 62, 115, 59, 95, 59, 216, 58, 196, 60, 138, 149, 94, 190, 224, 40, 76, 63, 106, 81, 150, 190, 36, 10, 130, 190, 23, 214, 13, 189, 71, 111, 57, 191, 68, 4, 6, 191, 252, 207, 214, 62, 157, 80, 96, 190, 51, 224, 231, 62, 59, 55, 33, 63, 9, 161, 173, 191, 160, 116, 213, 190, 140, 77, 154, 190, 63, 168, 124, 190, 154, 83, 240, 61, 100, 25, 133, 62, 252, 169, 152, 190, 240, 68, 117, 62, 137, 192, 149, 190, 118, 76, 2, 191, 118, 147, 188, 190, 105, 40, 204, 62, 219, 108, 140, 63, 130, 221, 79, 62, 112, 198, 166, 62, 250, 77, 128, 63, 106, 13, 197, 62, 29, 189, 243, 62, 119, 71, 95, 191, 235, 121, 175, 190, 194, 81, 191, 189, 0, 253, 102, 190, 203, 66, 169, 190, 211, 196, 135, 61, 92, 13, 3, 191, 222, 196, 251, 190, 243, 68, 5, 63, 139, 30, 188, 189, 178, 8, 29, 191, 103, 36, 46, 63, 22, 180, 46, 63, 139, 81, 140, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 88, 161, 190, 87, 65, 130, 190, 229, 44, 207, 190, 119, 134, 8, 191, 4, 139, 143, 189, 89, 201, 120, 188, 17, 152, 206, 61, 11, 71, 176, 190, 212, 105, 191, 62, 207, 193, 32, 190, 139, 107, 220, 189, 211, 253, 187, 59, 89, 138, 77, 62, 155, 234, 46, 62, 189, 251, 158, 190, 34, 102, 171, 61, 52, 177, 241, 62, 29, 86, 41, 190, 65, 120, 56, 191, 244, 41, 243, 61, 238, 106, 61, 191, 88, 136, 67, 189, 83, 205, 22, 63, 116, 254, 141, 61, 111, 249, 105, 62, 136, 221, 232, 61, 102, 240, 42, 190, 240, 39, 245, 190, 131, 252, 255, 190, 244, 251, 156, 61, 67, 183, 189, 62, 78, 238, 185, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 123, 102, 61, 18, 225, 192, 189, 7, 14, 62, 189, 126, 236, 167, 61, 124, 112, 236, 189, 142, 7, 198, 189, 212, 55, 134, 61, 30, 117, 230, 189, 209, 60, 32, 61, 241, 139, 12, 190, 87, 133, 146, 62, 107, 209, 110, 190, 54, 188, 68, 61, 202, 84, 117, 188, 12, 230, 139, 61, 14, 245, 47, 62, 220, 178, 98, 61, 5, 27, 218, 61, 88, 179, 139, 191, 190, 98, 99, 62, 19, 177, 176, 61, 26, 56, 233, 190, 238, 14, 120, 189, 255, 174, 194, 61, 231, 64, 240, 59, 111, 191, 189, 62, 218, 184, 8, 62, 74, 255, 3, 191, 153, 74, 37, 190, 66, 60, 139, 189, 185, 91, 47, 62, 139, 171, 25, 62, 37, 19, 6, 62, 162, 88, 132, 61, 236, 166, 53, 188, 80, 147, 157, 188, 222, 231, 14, 190, 223, 199, 80, 189, 254, 212, 198, 188, 16, 208, 142, 61, 94, 208, 250, 188, 85, 104, 34, 190, 48, 26, 46, 190, 220, 187, 12, 190, 106, 223, 229, 189, 44, 255, 205, 61, 232, 58, 47, 190, 224, 73, 184, 61, 100, 99, 4, 190, 199, 206, 33, 61, 72, 92, 4, 189, 155, 14, 89, 189, 97, 106, 48, 189, 22, 221, 32, 190, 139, 229, 139, 61, 46, 21, 164, 61, 184, 238, 7, 190, 55, 110, 25, 190, 91, 238, 188, 61, 88, 239, 14, 62, 129, 244, 52, 62, 190, 113, 46, 190, 117, 107, 192, 189, 169, 187, 6, 190, 88, 223, 113, 190, 10, 153, 102, 191, 65, 72, 221, 62, 66, 70, 14, 191, 166, 181, 83, 62, 68, 146, 98, 62, 247, 77, 32, 61, 209, 64, 166, 60, 89, 169, 166, 61, 96, 41, 152, 190, 128, 194, 123, 190, 172, 89, 200, 62, 126, 232, 152, 61, 157, 162, 202, 62, 54, 12, 169, 191, 36, 98, 159, 190, 26, 37, 135, 189, 195, 171, 232, 189, 10, 106, 106, 61, 255, 213, 194, 189, 98, 30, 158, 190, 181, 51, 252, 62, 248, 179, 123, 62, 194, 137, 109, 62, 226, 77, 116, 61, 192, 149, 215, 190, 162, 34, 11, 190, 100, 80, 118, 62, 137, 10, 238, 62, 202, 69, 61, 190, 129, 82, 136, 62, 63, 208, 230, 190, 253, 253, 108, 189, 179, 139, 163, 61, 184, 168, 121, 189, 152, 144, 201, 188, 45, 46, 140, 189, 74, 154, 21, 190, 87, 186, 246, 189, 173, 8, 26, 190, 165, 215, 173, 61, 177, 16, 213, 61, 102, 69, 88, 188, 124, 206, 182, 61, 124, 148, 133, 61, 137, 31, 193, 189, 165, 175, 106, 61, 14, 97, 248, 189, 34, 239, 169, 61, 176, 152, 14, 189, 217, 49, 21, 62, 142, 123, 116, 189, 4, 157, 242, 61, 141, 217, 247, 60, 78, 167, 40, 190, 6, 186, 26, 190, 60, 42, 174, 189, 16, 103, 166, 189, 41, 75, 177, 61, 160, 245, 129, 189, 52, 126, 61, 189, 238, 172, 230, 189, 213, 85, 232, 61, 22, 115, 180, 61, 190, 177, 47, 190, 237, 221, 15, 190, 94, 93, 40, 190, 40, 228, 128, 61, 132, 41, 252, 60, 24, 2, 97, 189, 66, 178, 152, 60, 127, 79, 196, 189, 194, 55, 56, 62, 80, 150, 197, 187, 91, 26, 156, 61, 81, 86, 4, 62, 106, 22, 167, 62, 169, 187, 204, 61, 113, 214, 140, 188, 201, 120, 101, 62, 46, 96, 95, 188, 102, 10, 14, 62, 49, 207, 241, 190, 213, 50, 65, 62, 59, 248, 101, 61, 95, 69, 63, 60, 53, 198, 124, 61, 120, 219, 130, 190, 226, 204, 244, 60, 144, 11, 201, 62, 222, 71, 141, 61, 91, 1, 41, 190, 3, 14, 214, 189, 56, 244, 139, 189, 224, 114, 23, 62, 142, 189, 119, 62, 98, 177, 213, 189, 119, 181, 244, 61, 206, 176, 19, 190, 98, 162, 13, 191, 134, 66, 22, 62, 98, 244, 96, 189, 156, 117, 2, 62, 63, 18, 82, 61, 2, 95, 134, 190, 222, 24, 78, 189, 72, 73, 193, 61, 137, 163, 105, 190, 72, 186, 7, 62, 130, 39, 23, 61, 119, 150, 12, 62, 55, 213, 32, 61, 209, 73, 156, 189, 0, 243, 105, 62, 230, 157, 31, 190, 60, 13, 180, 190, 164, 53, 172, 62, 96, 3, 63, 191, 91, 43, 32, 190, 107, 152, 195, 189, 50, 216, 111, 189, 70, 102, 127, 62, 35, 52, 171, 62, 160, 11, 168, 189, 155, 133, 179, 189, 162, 93, 174, 190, 55, 214, 239, 188, 216, 13, 254, 62, 28, 148, 241, 189, 43, 121, 52, 190, 216, 155, 21, 189, 81, 244, 13, 189, 55, 84, 212, 189, 214, 254, 222, 189, 172, 130, 2, 62, 192, 203, 21, 189, 149, 43, 162, 61, 178, 231, 145, 189, 94, 42, 175, 61, 37, 107, 242, 189, 230, 146, 25, 190, 4, 198, 51, 189, 203, 235, 215, 61, 172, 234, 157, 61, 9, 6, 56, 189, 50, 196, 91, 61, 68, 117, 250, 189, 20, 42, 87, 190, 115, 4, 213, 61, 120, 48, 245, 61, 130, 61, 39, 190, 209, 223, 44, 62, 232, 249, 39, 189, 197, 37, 25, 62, 108, 34, 141, 61, 249, 153, 146, 61, 192, 181, 48, 190, 162, 39, 232, 189, 75, 234, 190, 61, 124, 74, 4, 190, 173, 178, 199, 190, 241, 38, 150, 60, 104, 194, 136, 189, 155, 90, 52, 62, 236, 99, 137, 190, 131, 185, 24, 191, 150, 16, 145, 190, 31, 29, 46, 62, 221, 233, 42, 60, 86, 19, 240, 189, 33, 52, 146, 61, 203, 6, 156, 190, 60, 42, 250, 61, 90, 83, 157, 62, 97, 194, 96, 62, 224, 140, 38, 62, 226, 44, 1, 62, 83, 75, 88, 62, 216, 40, 171, 190, 129, 52, 240, 60, 103, 20, 87, 189, 83, 40, 11, 190, 253, 198, 124, 189, 138, 205, 75, 190, 56, 50, 74, 62, 48, 189, 51, 62, 179, 182, 16, 190, 105, 236, 54, 61, 99, 66, 120, 190, 47, 195, 144, 61, 2, 148, 8, 190, 251, 96, 167, 62, 84, 92, 133, 188, 196, 95, 188, 62, 85, 44, 159, 190, 65, 151, 61, 62, 200, 33, 101, 190, 63, 56, 97, 190, 81, 187, 159, 59, 36, 250, 177, 62, 84, 104, 39, 62, 71, 244, 252, 61, 138, 226, 255, 61, 182, 80, 194, 190, 162, 254, 12, 190, 210, 190, 89, 61, 226, 250, 77, 62, 14, 36, 206, 61, 58, 22, 244, 61, 204, 236, 92, 62, 225, 209, 18, 191, 135, 192, 69, 61, 3, 214, 220, 61, 133, 30, 164, 190, 229, 44, 182, 189, 212, 77, 118, 190, 195, 226, 107, 62, 89, 132, 130, 62, 48, 168, 86, 62, 139, 123, 5, 190, 56, 168, 0, 190, 55, 218, 8, 62, 239, 146, 40, 190, 182, 166, 157, 62, 23, 185, 67, 187, 139, 248, 236, 61, 154, 230, 169, 189, 14, 175, 106, 61, 63, 35, 108, 191, 29, 129, 229, 191, 127, 43, 181, 191, 196, 122, 232, 62, 122, 108, 155, 189, 119, 81, 249, 60, 216, 234, 246, 60, 156, 119, 146, 190, 235, 180, 49, 62, 240, 197, 184, 189, 84, 84, 202, 189, 98, 151, 95, 189, 99, 81, 87, 190, 136, 179, 57, 62, 215, 176, 35, 191, 217, 169, 76, 62, 63, 189, 131, 61, 159, 51, 212, 189, 55, 135, 137, 61, 125, 37, 45, 191, 239, 12, 144, 62, 231, 14, 86, 62, 85, 151, 22, 191, 79, 38, 107, 190, 153, 219, 128, 190, 15, 230, 130, 62, 221, 157, 7, 62, 42, 58, 158, 61, 253, 206, 151, 62, 45, 9, 108, 62, 238, 205, 229, 190, 140, 46, 177, 190, 104, 126, 61, 190, 243, 127, 84, 190, 132, 144, 63, 190, 102, 9, 4, 61, 214, 25, 182, 61, 158, 211, 39, 62, 150, 153, 121, 190, 172, 246, 29, 190, 116, 46, 171, 59, 133, 45, 38, 61, 236, 12, 115, 61, 209, 40, 113, 188, 56, 123, 31, 61, 149, 184, 224, 190, 205, 224, 170, 187, 239, 45, 161, 61, 171, 229, 233, 62, 175, 4, 181, 189, 181, 92, 156, 189, 137, 47, 229, 189, 37, 16, 38, 62, 175, 0, 95, 62, 39, 43, 217, 62, 94, 70, 152, 189, 72, 61, 222, 189, 143, 56, 8, 190, 181, 120, 33, 61, 202, 134, 177, 62, 245, 169, 137, 188, 60, 64, 141, 189, 85, 119, 245, 61, 115, 124, 243, 189, 214, 98, 31, 190, 85, 127, 157, 189, 0, 144, 32, 62, 250, 94, 201, 61, 187, 112, 66, 61, 51, 33, 132, 189, 54, 58, 196, 58, 26, 88, 177, 189, 54, 225, 184, 61, 188, 122, 198, 188, 202, 167, 171, 61, 82, 93, 228, 61, 244, 145, 4, 190, 185, 22, 234, 60, 135, 7, 6, 62, 100, 88, 190, 60, 185, 81, 8, 190, 141, 206, 41, 190, 44, 84, 0, 188, 222, 123, 174, 60, 44, 221, 23, 61, 129, 51, 156, 61, 105, 249, 246, 189, 45, 59, 120, 61, 102, 206, 225, 188, 89, 194, 245, 189, 178, 234, 253, 189, 67, 123, 128, 61, 158, 34, 73, 191, 146, 96, 206, 60, 60, 254, 147, 189, 95, 111, 1, 62, 100, 193, 56, 190, 116, 93, 226, 190, 56, 17, 120, 61, 51, 64, 9, 62, 175, 168, 158, 62, 163, 233, 80, 62, 26, 231, 128, 61, 187, 207, 95, 191, 117, 32, 209, 62, 213, 129, 17, 62, 160, 102, 136, 61, 127, 192, 208, 187, 250, 94, 149, 61, 93, 179, 169, 189, 117, 189, 137, 191, 84, 5, 255, 61, 0, 72, 134, 187, 211, 26, 191, 190, 24, 100, 182, 189, 244, 203, 237, 188, 60, 146, 68, 62, 58, 186, 166, 62, 189, 33, 100, 61, 154, 117, 194, 189, 9, 118, 71, 190, 53, 131, 101, 61, 68, 103, 54, 188, 118, 246, 189, 62, 154, 220, 175, 61, 132, 154, 0, 61, 147, 56, 45, 190, 98, 117, 198, 189, 196, 42, 128, 61, 245, 152, 212, 189, 173, 7, 7, 61, 54, 227, 98, 62, 184, 33, 172, 62, 140, 242, 175, 61, 245, 129, 169, 190, 17, 43, 67, 188, 103, 193, 79, 189, 25, 136, 126, 62, 28, 19, 81, 61, 9, 28, 111, 190, 213, 53, 246, 189, 139, 170, 225, 60, 126, 160, 50, 190, 63, 178, 23, 190, 221, 154, 152, 60, 55, 116, 68, 188, 38, 221, 78, 61, 133, 128, 164, 62, 90, 51, 74, 62, 110, 71, 129, 190, 9, 29, 116, 189, 171, 88, 75, 61, 94, 48, 83, 190, 49, 137, 173, 189, 236, 101, 229, 61, 96, 56, 223, 189, 59, 104, 142, 190, 136, 227, 84, 62, 145, 31, 232, 190, 147, 82, 49, 190, 16, 31, 6, 191, 104, 208, 241, 191, 50, 227, 7, 191, 177, 54, 250, 61, 23, 32, 185, 62, 195, 98, 44, 63, 107, 169, 114, 190, 111, 58, 138, 190, 242, 231, 81, 191, 197, 203, 22, 60, 119, 145, 200, 61, 218, 240, 159, 189, 50, 70, 163, 62, 162, 47, 216, 190, 35, 83, 150, 62, 251, 58, 8, 62, 63, 236, 206, 188, 4, 198, 146, 190, 13, 110, 85, 62, 250, 117, 156, 189, 74, 191, 152, 61, 6, 185, 205, 190, 76, 231, 35, 190, 170, 92, 171, 62, 222, 74, 180, 190, 228, 169, 25, 61, 209, 27, 164, 190, 47, 83, 147, 60, 128, 78, 28, 184, 100, 252, 171, 61, 229, 111, 192, 189, 202, 254, 250, 61, 129, 251, 45, 189, 231, 182, 22, 190, 184, 70, 20, 190, 118, 250, 4, 62, 113, 22, 46, 61, 178, 254, 195, 188, 211, 171, 205, 62, 4, 216, 221, 190, 17, 137, 214, 62, 84, 2, 31, 190, 62, 209, 133, 190, 177, 80, 188, 62, 18, 139, 147, 62, 207, 124, 61, 62, 149, 99, 106, 191, 22, 119, 236, 189, 81, 172, 243, 189, 204, 19, 132, 190, 35, 206, 71, 190, 105, 85, 171, 59, 151, 219, 60, 62, 207, 150, 64, 62, 21, 106, 174, 61, 221, 108, 192, 190, 200, 31, 21, 190, 49, 103, 240, 61, 41, 18, 26, 189, 244, 97, 45, 62, 123, 148, 242, 189, 46, 135, 228, 62, 131, 36, 235, 190, 142, 29, 215, 62, 158, 55, 245, 189, 55, 107, 63, 191, 216, 190, 41, 189, 160, 214, 19, 63, 137, 121, 107, 62, 221, 170, 116, 62, 206, 245, 31, 62, 225, 180, 14, 191, 129, 84, 143, 61, 115, 209, 117, 190, 73, 186, 140, 62, 21, 169, 145, 188, 165, 227, 7, 62, 80, 35, 197, 62, 183, 127, 135, 191, 224, 176, 234, 61, 65, 158, 87, 189, 83, 176, 41, 191, 55, 20, 178, 189, 107, 94, 212, 190, 42, 219, 117, 62, 39, 221, 9, 63, 192, 63, 136, 62, 11, 36, 222, 190, 38, 15, 11, 191, 253, 4, 159, 62, 85, 53, 177, 189, 98, 131, 216, 62, 141, 141, 230, 189, 18, 223, 10, 190, 60, 200, 57, 62, 137, 249, 98, 62, 99, 59, 5, 190, 33, 209, 98, 190, 156, 204, 163, 190, 56, 143, 76, 190, 83, 227, 157, 62, 171, 117, 219, 61, 237, 27, 170, 189, 168, 32, 142, 189, 211, 140, 8, 190, 35, 253, 192, 61, 170, 106, 184, 189, 57, 238, 140, 190, 249, 96, 127, 190, 48, 91, 226, 61, 63, 113, 0, 62, 102, 188, 53, 62, 230, 7, 194, 187, 14, 55, 240, 59, 126, 181, 137, 62, 176, 48, 60, 191, 208, 86, 80, 61, 115, 155, 102, 190, 63, 95, 184, 189, 47, 142, 28, 190, 64, 0, 36, 62, 126, 214, 18, 189, 229, 129, 27, 57, 190, 53, 27, 190, 202, 15, 219, 189, 165, 46, 118, 61, 100, 177, 178, 61, 223, 65, 82, 61, 140, 57, 166, 189, 248, 190, 182, 189, 54, 207, 247, 61, 133, 117, 74, 189, 64, 212, 1, 189, 164, 222, 231, 61, 176, 6, 182, 188, 71, 48, 128, 190, 183, 140, 116, 190, 93, 188, 18, 62, 116, 54, 114, 61, 224, 214, 41, 60, 254, 48, 132, 62, 28, 114, 196, 189, 42, 195, 171, 60, 225, 72, 184, 187, 229, 40, 51, 188, 187, 157, 117, 62, 164, 64, 218, 189, 184, 113, 192, 60, 78, 24, 11, 189, 114, 250, 13, 190, 187, 247, 31, 190, 205, 157, 217, 59, 49, 114, 210, 188, 50, 226, 150, 62, 227, 136, 201, 61, 20, 100, 73, 190, 102, 67, 139, 190, 31, 41, 45, 191, 9, 135, 39, 62, 61, 6, 213, 59, 243, 118, 106, 62, 236, 7, 159, 188, 168, 54, 26, 62, 66, 115, 129, 189, 149, 0, 35, 61, 52, 78, 229, 61, 146, 88, 176, 189, 107, 214, 137, 62, 215, 33, 35, 189, 35, 50, 66, 62, 206, 244, 73, 191, 27, 96, 137, 189, 104, 140, 252, 189, 168, 253, 16, 190, 122, 3, 167, 190, 200, 193, 53, 189, 204, 71, 137, 190, 98, 35, 32, 62, 65, 112, 133, 62, 48, 205, 156, 189, 213, 35, 217, 189, 181, 165, 9, 190, 100, 210, 178, 190, 3, 185, 127, 61, 217, 252, 134, 188, 28, 145, 97, 190, 3, 17, 16, 62, 210, 168, 27, 190, 181, 12, 249, 61, 79, 20, 105, 61, 23, 147, 84, 189, 172, 249, 140, 62, 147, 10, 212, 190, 130, 81, 175, 188, 127, 139, 48, 190, 30, 197, 142, 62, 135, 149, 11, 60, 235, 161, 47, 189, 223, 218, 132, 62, 16, 88, 213, 189, 222, 137, 86, 61, 155, 83, 63, 190, 228, 204, 160, 190, 39, 14, 103, 62, 111, 165, 82, 190, 1, 54, 107, 62, 201, 173, 103, 191, 54, 189, 206, 61, 33, 124, 189, 61, 54, 102, 220, 190, 129, 99, 97, 190, 48, 14, 178, 190, 82, 124, 210, 61, 211, 42, 85, 62, 215, 212, 78, 62, 103, 57, 166, 190, 87, 162, 76, 189, 22, 62, 65, 189, 105, 255, 233, 189, 69, 220, 206, 62, 1, 45, 167, 188, 8, 83, 73, 62, 157, 64, 163, 190, 228, 213, 238, 61, 204, 69, 7, 190, 154, 243, 149, 60, 209, 175, 181, 61, 125, 65, 42, 61, 148, 253, 77, 189, 176, 180, 35, 61, 118, 30, 23, 62, 196, 57, 252, 61, 183, 234, 47, 62, 159, 65, 83, 61, 228, 104, 39, 62, 166, 189, 155, 62, 69, 146, 80, 189, 228, 188, 134, 62, 94, 217, 85, 191, 188, 104, 27, 62, 248, 210, 224, 59, 29, 227, 118, 190, 99, 169, 246, 60, 222, 173, 53, 189, 85, 165, 205, 189, 111, 168, 223, 62, 253, 69, 20, 62, 108, 184, 144, 190, 183, 1, 179, 190, 147, 2, 221, 61, 150, 104, 28, 62, 90, 188, 173, 60, 188, 236, 97, 189, 100, 77, 52, 189, 174, 236, 17, 190, 248, 158, 206, 189, 138, 78, 218, 188, 199, 181, 10, 189, 80, 3, 11, 190, 111, 58, 17, 190, 214, 124, 91, 61, 228, 100, 207, 60, 131, 88, 27, 62, 86, 184, 56, 60, 202, 145, 141, 187, 231, 2, 175, 61, 189, 87, 197, 61, 43, 164, 146, 188, 209, 57, 230, 189, 206, 196, 184, 189, 131, 130, 24, 190, 70, 126, 47, 188, 30, 149, 23, 190, 192, 104, 142, 189, 126, 24, 11, 62, 98, 172, 44, 61, 168, 4, 60, 190, 86, 72, 211, 189, 129, 142, 250, 189, 130, 194, 68, 189, 162, 237, 32, 62, 113, 99, 173, 189, 82, 154, 16, 61, 81, 215, 132, 61, 245, 229, 53, 62, 54, 57, 29, 61, 52, 132, 9, 190, 138, 40, 144, 62, 74, 189, 158, 61, 27, 239, 163, 61, 21, 30, 16, 189, 14, 172, 154, 189, 240, 57, 35, 190, 208, 178, 105, 61, 28, 174, 244, 62, 204, 235, 212, 60, 148, 6, 91, 62, 93, 113, 247, 190, 76, 232, 148, 60, 39, 210, 231, 61, 180, 180, 43, 190, 45, 161, 244, 61, 156, 229, 79, 62, 149, 218, 31, 62, 98, 51, 57, 188, 2, 205, 106, 189, 207, 84, 63, 60, 42, 42, 157, 190, 0, 9, 37, 62, 137, 77, 194, 62, 101, 155, 162, 62, 39, 173, 27, 62, 80, 218, 160, 189, 240, 107, 81, 62, 196, 33, 2, 62, 35, 80, 26, 190, 102, 160, 220, 61, 135, 52, 175, 61, 119, 135, 174, 60, 103, 16, 126, 61, 23, 168, 18, 62, 248, 225, 60, 190, 246, 185, 5, 190, 218, 78, 214, 61, 163, 49, 35, 190, 60, 184, 250, 189, 0, 169, 185, 61, 157, 12, 94, 61, 148, 84, 110, 188, 120, 91, 175, 189, 142, 220, 240, 189, 161, 73, 104, 189, 162, 140, 184, 188, 77, 110, 179, 189, 27, 73, 217, 188, 28, 62, 67, 60, 48, 200, 182, 189, 88, 74, 103, 189, 140, 0, 106, 61, 196, 217, 46, 190, 238, 203, 21, 189, 250, 176, 58, 61, 80, 89, 41, 190, 31, 245, 184, 189, 23, 228, 159, 189, 5, 43, 35, 190, 57, 50, 185, 189, 134, 132, 222, 60, 36, 174, 210, 190, 186, 178, 212, 190, 179, 53, 211, 61, 33, 29, 99, 189, 131, 140, 146, 61, 1, 83, 148, 190, 93, 111, 251, 61, 231, 238, 190, 190, 4, 2, 189, 62, 94, 133, 101, 189, 152, 77, 14, 190, 163, 81, 201, 61, 78, 201, 120, 189, 177, 79, 236, 62, 122, 232, 14, 191, 149, 29, 11, 190, 78, 246, 60, 189, 238, 202, 8, 190, 216, 91, 144, 62, 246, 125, 153, 187, 166, 208, 11, 190, 43, 43, 192, 62, 122, 136, 95, 62, 118, 99, 189, 62, 186, 209, 151, 60, 190, 175, 90, 190, 127, 101, 196, 190, 108, 202, 76, 62, 77, 31, 24, 62, 97, 198, 252, 189, 45, 249, 80, 62, 1, 120, 154, 190, 107, 85, 150, 190, 181, 119, 237, 190, 191, 228, 116, 62, 58, 138, 80, 61, 152, 219, 63, 62, 48, 4, 66, 61, 166, 179, 146, 62, 31, 8, 191, 61, 133, 226, 73, 62, 106, 101, 236, 189, 31, 90, 227, 190, 138, 210, 50, 61, 28, 172, 52, 190, 209, 66, 174, 62, 146, 136, 16, 191, 42, 178, 132, 189, 58, 197, 107, 188, 165, 138, 120, 190, 130, 21, 48, 191, 153, 6, 37, 190, 188, 106, 143, 60, 186, 46, 180, 61, 53, 113, 141, 188, 168, 191, 146, 62, 44, 7, 69, 60, 182, 112, 251, 190, 64, 142, 22, 190, 222, 53, 90, 190, 153, 87, 30, 190, 115, 249, 70, 190, 134, 85, 48, 62, 206, 73, 77, 190, 123, 149, 42, 62, 40, 146, 178, 61, 99, 45, 141, 62, 124, 82, 1, 62, 32, 8, 215, 189, 83, 123, 238, 189, 71, 115, 43, 190, 162, 75, 115, 190, 216, 251, 226, 190, 149, 79, 166, 61, 40, 203, 185, 62, 99, 227, 145, 190, 26, 47, 172, 62, 83, 149, 55, 190, 74, 224, 11, 190, 26, 201, 147, 62, 46, 86, 21, 62, 58, 33, 247, 61, 188, 230, 16, 190, 223, 34, 90, 190, 57, 202, 193, 62, 247, 55, 0, 191, 150, 104, 23, 190, 76, 64, 135, 61, 134, 244, 155, 62, 252, 42, 153, 62, 209, 242, 32, 62, 233, 86, 13, 190, 223, 140, 115, 62, 77, 253, 177, 190, 75, 255, 14, 190, 255, 98, 207, 62, 161, 87, 111, 61, 25, 124, 131, 190, 48, 213, 54, 61, 189, 171, 77, 62, 233, 83, 75, 189, 165, 36, 155, 61, 227, 213, 180, 61, 211, 209, 61, 62, 139, 17, 71, 190, 244, 51, 197, 61, 236, 121, 10, 63, 205, 86, 55, 190, 148, 2, 248, 61, 118, 247, 198, 186, 217, 236, 151, 190, 43, 30, 50, 61, 158, 124, 253, 189, 35, 109, 225, 189, 34, 92, 210, 190, 185, 142, 180, 190, 169, 202, 85, 189, 128, 213, 133, 190, 231, 136, 177, 60, 160, 182, 132, 189, 130, 59, 7, 190, 50, 61, 213, 60, 77, 216, 207, 61, 75, 10, 46, 190, 248, 40, 72, 190, 12, 118, 52, 190, 9, 150, 151, 61, 195, 2, 53, 62, 28, 209, 60, 62, 225, 121, 84, 189, 200, 58, 97, 189, 165, 170, 175, 61, 125, 20, 70, 189, 212, 33, 169, 185, 108, 83, 45, 60, 157, 154, 74, 189, 163, 218, 156, 189, 22, 36, 130, 190, 203, 164, 130, 60, 169, 177, 53, 61, 52, 2, 65, 62, 44, 71, 198, 62, 173, 103, 150, 189, 164, 154, 168, 62, 12, 175, 88, 62, 84, 91, 221, 60, 97, 169, 57, 191, 89, 149, 245, 61, 167, 64, 92, 189, 24, 27, 0, 190, 146, 207, 13, 62, 7, 81, 79, 190, 93, 36, 166, 61, 246, 188, 59, 62, 26, 180, 83, 62, 228, 57, 57, 190, 186, 140, 139, 189, 182, 73, 19, 62, 96, 50, 47, 62, 169, 145, 98, 62, 208, 226, 9, 191, 170, 34, 239, 190, 77, 169, 162, 62, 26, 120, 1, 191, 81, 192, 10, 189, 206, 94, 57, 190, 193, 148, 79, 190, 26, 96, 249, 61, 78, 255, 125, 62, 202, 144, 141, 190, 20, 250, 178, 61, 48, 48, 127, 189, 215, 119, 47, 190, 42, 2, 142, 62, 65, 255, 106, 191, 30, 195, 178, 61, 181, 200, 248, 187, 234, 94, 161, 60, 152, 27, 180, 190, 147, 116, 147, 190, 206, 231, 84, 61, 104, 245, 141, 62, 217, 163, 128, 62, 132, 214, 67, 190, 88, 235, 107, 61, 203, 201, 85, 60, 120, 192, 200, 189, 11, 198, 62, 189, 238, 255, 203, 60, 44, 188, 194, 189, 248, 152, 138, 188, 145, 78, 51, 190, 255, 80, 63, 190, 215, 233, 139, 190, 34, 19, 148, 61, 129, 97, 149, 61, 51, 163, 64, 61, 123, 194, 33, 60, 30, 135, 195, 189, 98, 57, 28, 62, 171, 20, 33, 62, 155, 133, 201, 189, 130, 219, 150, 61, 179, 68, 180, 189, 80, 107, 191, 62, 29, 141, 155, 62, 109, 66, 47, 190, 13, 29, 120, 60, 98, 49, 179, 60, 103, 91, 114, 61, 74, 118, 192, 190, 87, 230, 71, 61, 249, 229, 169, 188, 159, 34, 196, 188, 116, 0, 131, 62, 243, 1, 84, 189, 187, 213, 10, 188, 122, 165, 0, 60, 146, 78, 127, 61, 182, 251, 135, 61, 205, 179, 225, 189, 217, 219, 25, 61, 117, 53, 197, 61, 191, 89, 18, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 238, 239, 61, 232, 17, 146, 188, 76, 37, 182, 62, 184, 35, 138, 189, 92, 153, 156, 62, 1, 229, 132, 190, 46, 214, 74, 190, 151, 220, 181, 61, 32, 85, 116, 189, 157, 199, 34, 61, 149, 103, 177, 189, 82, 192, 13, 190, 172, 130, 26, 62, 17, 32, 58, 62, 190, 245, 21, 189, 238, 241, 100, 62, 244, 64, 23, 190, 204, 94, 1, 61, 0, 13, 35, 61, 89, 130, 112, 62, 180, 123, 200, 60, 16, 49, 184, 61, 141, 139, 188, 189, 33, 56, 118, 189, 24, 162, 12, 190, 34, 247, 54, 60, 17, 122, 75, 62, 187, 193, 102, 190, 151, 145, 13, 61, 92, 41, 93, 62, 168, 72, 16, 62, 57, 124, 66, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 25, 147, 190, 171, 4, 237, 189, 57, 1, 154, 63, 235, 121, 207, 61, 223, 60, 105, 59, 70, 68, 60, 191, 192, 52, 79, 58, 138, 179, 122, 190, 93, 183, 65, 190, 184, 48, 221, 190, 209, 166, 45, 190, 122, 156, 19, 189, 66, 231, 8, 191, 183, 224, 31, 62, 159, 96, 112, 191, 196, 142, 223, 190, 196, 223, 67, 191, 49, 193, 244, 61, 241, 47, 228, 61, 24, 148, 139, 62, 128, 3, 46, 191, 186, 26, 109, 190, 113, 122, 124, 61, 240, 24, 153, 62, 9, 223, 97, 61, 240, 147, 43, 63, 150, 82, 137, 62, 57, 168, 40, 190, 119, 189, 206, 188, 24, 157, 0, 189, 42, 69, 163, 62, 101, 187, 157, 60, 164, 222, 31, 190, 166, 124, 141, 189, 173, 147, 92, 62, 136, 143, 231, 61, 123, 249, 148, 190, 78, 179, 172, 62, 191, 94, 160, 60, 182, 74, 210, 189, 27, 199, 171, 62, 140, 243, 167, 190, 24, 106, 57, 62, 11, 48, 189, 61, 5, 63, 30, 190, 193, 223, 230, 189, 79, 216, 52, 62, 60, 20, 151, 189, 150, 89, 1, 63, 130, 144, 23, 190, 12, 235, 94, 188, 67, 52, 239, 187, 75, 19, 121, 62, 124, 24, 90, 190, 255, 150, 242, 61, 197, 55, 46, 62, 109, 5, 169, 61, 17, 229, 252, 61, 222, 6, 53, 190, 149, 25, 62, 63, 194, 19, 74, 62, 217, 115, 160, 190, 137, 92, 99, 190, 154, 92, 66, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {117, 149, 32, 62, 91, 166, 128, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {77, 104, 207, 191, 30, 70, 29, 63, 194, 95, 24, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {10, 202, 244, 63, 17, 184, 200, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0086/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}