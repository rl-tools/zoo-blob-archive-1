// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {71, 98, 160, 190, 146, 232, 143, 63, 16, 127, 236, 62, 112, 108, 76, 190, 247, 108, 217, 191, 5, 0, 178, 190, 104, 84, 153, 190, 53, 127, 226, 188, 134, 73, 234, 190, 231, 224, 248, 190, 158, 255, 226, 61, 55, 192, 50, 191, 52, 169, 199, 61, 68, 122, 217, 189, 32, 52, 11, 63, 142, 91, 142, 190, 0, 204, 163, 63, 197, 56, 254, 62, 80, 49, 56, 62, 143, 166, 160, 190, 78, 233, 58, 63, 254, 236, 37, 191, 198, 93, 135, 191, 241, 47, 7, 190, 182, 153, 90, 190, 42, 189, 186, 191, 138, 205, 170, 61, 162, 136, 213, 189, 208, 158, 109, 191, 240, 192, 161, 62, 10, 196, 78, 62, 246, 83, 73, 63, 161, 194, 30, 190, 217, 115, 15, 191, 98, 124, 240, 63, 111, 236, 223, 62, 228, 184, 26, 63, 28, 26, 35, 63, 183, 157, 48, 62, 230, 170, 33, 63, 12, 80, 91, 191, 100, 84, 136, 189, 59, 186, 28, 190, 209, 205, 187, 191, 124, 157, 169, 190, 42, 106, 14, 63, 246, 6, 132, 63, 187, 124, 81, 62, 175, 14, 185, 62, 205, 73, 236, 190, 59, 252, 123, 62, 81, 187, 244, 60, 169, 15, 90, 187, 222, 73, 99, 190, 251, 97, 72, 63, 73, 191, 189, 190, 147, 246, 136, 190, 44, 183, 42, 190, 171, 86, 62, 191, 36, 165, 250, 190, 205, 67, 252, 62, 149, 218, 124, 190, 162, 207, 239, 62, 11, 255, 26, 63, 118, 61, 187, 191, 89, 235, 224, 190, 64, 214, 168, 190, 180, 46, 130, 190, 246, 69, 13, 62, 134, 254, 126, 62, 71, 51, 210, 190, 19, 162, 85, 62, 240, 1, 105, 190, 113, 43, 7, 191, 168, 123, 178, 190, 106, 96, 201, 62, 12, 239, 150, 63, 27, 250, 98, 62, 89, 181, 163, 62, 135, 111, 144, 63, 248, 23, 193, 62, 169, 100, 205, 62, 34, 240, 113, 191, 183, 95, 158, 190, 177, 71, 8, 61, 10, 3, 147, 190, 3, 15, 164, 190, 111, 235, 219, 188, 2, 222, 220, 190, 177, 151, 247, 190, 90, 61, 251, 62, 183, 96, 104, 190, 104, 32, 4, 191, 10, 198, 50, 63, 190, 43, 67, 63, 91, 194, 130, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {118, 215, 35, 190, 145, 219, 179, 190, 58, 23, 225, 190, 25, 158, 250, 190, 81, 105, 203, 188, 161, 129, 135, 62, 15, 226, 79, 60, 136, 161, 159, 190, 198, 12, 138, 62, 219, 255, 70, 190, 89, 137, 151, 189, 234, 29, 187, 61, 44, 55, 7, 62, 226, 41, 0, 62, 140, 237, 204, 190, 203, 249, 57, 61, 90, 153, 200, 62, 8, 23, 35, 189, 104, 133, 78, 191, 6, 104, 202, 61, 164, 199, 88, 191, 179, 27, 210, 189, 76, 188, 22, 63, 183, 172, 89, 61, 11, 47, 156, 62, 220, 236, 7, 62, 133, 103, 110, 190, 143, 60, 36, 191, 248, 110, 18, 191, 233, 20, 231, 187, 127, 238, 163, 62, 126, 66, 208, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 135, 112, 189, 186, 246, 72, 190, 226, 80, 48, 189, 166, 69, 143, 61, 232, 140, 143, 189, 144, 137, 164, 190, 58, 63, 191, 61, 232, 170, 47, 190, 97, 54, 198, 189, 96, 182, 105, 189, 57, 91, 121, 62, 166, 74, 33, 191, 5, 215, 199, 187, 39, 68, 49, 60, 88, 132, 46, 189, 111, 107, 203, 61, 96, 42, 232, 59, 235, 98, 189, 61, 38, 205, 163, 191, 22, 120, 114, 62, 46, 250, 130, 62, 24, 208, 17, 191, 28, 16, 5, 190, 167, 215, 225, 61, 159, 76, 46, 61, 1, 52, 139, 62, 37, 234, 19, 61, 172, 117, 52, 191, 220, 167, 92, 190, 88, 235, 143, 189, 179, 63, 32, 62, 176, 3, 24, 62, 37, 19, 6, 62, 162, 88, 132, 61, 236, 166, 53, 188, 80, 147, 157, 188, 222, 231, 14, 190, 223, 199, 80, 189, 254, 212, 198, 188, 16, 208, 142, 61, 94, 208, 250, 188, 85, 104, 34, 190, 48, 26, 46, 190, 220, 187, 12, 190, 106, 223, 229, 189, 44, 255, 205, 61, 232, 58, 47, 190, 224, 73, 184, 61, 100, 99, 4, 190, 199, 206, 33, 61, 72, 92, 4, 189, 155, 14, 89, 189, 97, 106, 48, 189, 22, 221, 32, 190, 139, 229, 139, 61, 46, 21, 164, 61, 184, 238, 7, 190, 55, 110, 25, 190, 91, 238, 188, 61, 88, 239, 14, 62, 129, 244, 52, 62, 190, 113, 46, 190, 117, 107, 192, 189, 169, 187, 6, 190, 47, 177, 140, 190, 70, 34, 151, 191, 51, 201, 216, 62, 99, 156, 16, 191, 20, 29, 86, 62, 144, 167, 25, 62, 37, 111, 78, 61, 171, 182, 138, 61, 39, 178, 71, 62, 159, 103, 180, 190, 170, 60, 213, 190, 229, 206, 160, 62, 44, 210, 161, 61, 19, 134, 203, 62, 124, 85, 212, 191, 33, 172, 170, 190, 231, 4, 37, 188, 111, 46, 65, 190, 1, 253, 55, 61, 38, 74, 87, 190, 206, 151, 236, 190, 145, 148, 6, 63, 105, 137, 128, 62, 244, 109, 126, 62, 195, 124, 200, 189, 160, 133, 231, 190, 115, 111, 80, 190, 232, 242, 4, 62, 36, 110, 2, 63, 57, 156, 108, 190, 233, 156, 114, 62, 53, 232, 254, 190, 253, 253, 108, 189, 179, 139, 163, 61, 184, 168, 121, 189, 152, 144, 201, 188, 45, 46, 140, 189, 74, 154, 21, 190, 87, 186, 246, 189, 173, 8, 26, 190, 165, 215, 173, 61, 177, 16, 213, 61, 102, 69, 88, 188, 124, 206, 182, 61, 124, 148, 133, 61, 137, 31, 193, 189, 165, 175, 106, 61, 14, 97, 248, 189, 34, 239, 169, 61, 176, 152, 14, 189, 217, 49, 21, 62, 142, 123, 116, 189, 4, 157, 242, 61, 141, 217, 247, 60, 78, 167, 40, 190, 6, 186, 26, 190, 60, 42, 174, 189, 16, 103, 166, 189, 41, 75, 177, 61, 160, 245, 129, 189, 52, 126, 61, 189, 238, 172, 230, 189, 213, 85, 232, 61, 22, 115, 180, 61, 170, 197, 193, 190, 38, 147, 12, 190, 76, 239, 18, 190, 58, 170, 172, 61, 146, 167, 109, 61, 76, 97, 49, 190, 88, 33, 198, 60, 143, 208, 60, 190, 0, 158, 155, 62, 176, 176, 23, 61, 111, 190, 236, 61, 255, 88, 28, 61, 230, 40, 154, 62, 213, 63, 207, 61, 11, 249, 164, 188, 115, 1, 52, 62, 88, 248, 83, 61, 236, 181, 17, 62, 170, 103, 200, 190, 220, 105, 71, 62, 194, 214, 182, 188, 228, 66, 155, 187, 178, 40, 3, 62, 228, 54, 85, 190, 110, 104, 247, 60, 86, 195, 177, 62, 74, 46, 132, 188, 4, 171, 69, 190, 228, 239, 182, 189, 180, 54, 89, 189, 30, 139, 251, 61, 80, 46, 88, 62, 146, 195, 25, 190, 179, 179, 244, 61, 227, 126, 1, 190, 59, 253, 254, 190, 44, 142, 48, 62, 45, 49, 1, 190, 193, 176, 26, 62, 131, 81, 10, 61, 22, 202, 126, 190, 157, 211, 169, 188, 230, 218, 189, 188, 155, 114, 171, 190, 200, 128, 249, 61, 17, 116, 56, 62, 146, 97, 13, 62, 157, 23, 60, 60, 104, 208, 144, 189, 121, 144, 22, 63, 109, 14, 169, 190, 245, 169, 241, 189, 228, 148, 221, 62, 51, 65, 113, 191, 245, 5, 99, 190, 10, 185, 76, 189, 254, 232, 47, 62, 131, 193, 63, 62, 109, 66, 155, 62, 160, 11, 168, 189, 155, 133, 179, 189, 147, 110, 229, 189, 248, 77, 157, 188, 151, 176, 13, 63, 28, 148, 241, 189, 43, 121, 52, 190, 216, 155, 21, 189, 81, 244, 13, 189, 55, 84, 212, 189, 214, 254, 222, 189, 172, 130, 2, 62, 192, 203, 21, 189, 149, 43, 162, 61, 178, 231, 145, 189, 94, 42, 175, 61, 37, 107, 242, 189, 230, 146, 25, 190, 4, 198, 51, 189, 203, 235, 215, 61, 172, 234, 157, 61, 9, 6, 56, 189, 50, 196, 91, 61, 68, 117, 250, 189, 20, 42, 87, 190, 115, 4, 213, 61, 120, 48, 245, 61, 130, 61, 39, 190, 209, 223, 44, 62, 232, 249, 39, 189, 197, 37, 25, 62, 108, 34, 141, 61, 249, 153, 146, 61, 192, 181, 48, 190, 162, 39, 232, 189, 75, 234, 190, 61, 124, 74, 4, 190, 86, 121, 57, 191, 252, 214, 140, 61, 214, 12, 133, 189, 201, 177, 36, 62, 123, 184, 154, 190, 136, 231, 78, 191, 129, 126, 171, 190, 108, 202, 152, 62, 217, 238, 77, 190, 214, 96, 156, 61, 87, 173, 214, 61, 221, 98, 211, 190, 98, 90, 241, 61, 199, 44, 152, 62, 232, 185, 149, 62, 33, 246, 61, 62, 47, 98, 149, 61, 218, 72, 63, 62, 37, 141, 246, 190, 138, 41, 46, 61, 127, 107, 25, 61, 214, 124, 48, 190, 200, 209, 241, 189, 218, 73, 123, 190, 177, 120, 91, 62, 128, 47, 94, 62, 230, 94, 225, 189, 109, 194, 115, 61, 152, 46, 123, 190, 82, 211, 133, 61, 165, 219, 228, 189, 56, 31, 160, 62, 92, 172, 154, 189, 126, 109, 238, 62, 239, 14, 161, 190, 3, 120, 53, 62, 235, 21, 131, 190, 51, 130, 180, 190, 103, 101, 6, 61, 141, 176, 19, 63, 189, 185, 193, 61, 142, 123, 89, 62, 1, 116, 6, 62, 45, 184, 82, 191, 13, 251, 205, 189, 176, 125, 197, 61, 228, 253, 169, 62, 105, 81, 50, 62, 250, 51, 11, 62, 250, 26, 84, 62, 167, 187, 110, 191, 177, 194, 163, 60, 178, 146, 47, 62, 243, 139, 177, 190, 85, 101, 0, 190, 92, 104, 41, 190, 250, 139, 103, 62, 64, 62, 174, 62, 96, 32, 155, 62, 52, 239, 20, 190, 104, 200, 8, 190, 0, 34, 180, 61, 252, 189, 12, 190, 215, 77, 197, 62, 3, 26, 20, 188, 150, 237, 28, 62, 196, 13, 130, 189, 137, 126, 125, 61, 49, 73, 120, 191, 223, 111, 227, 191, 39, 101, 193, 191, 132, 176, 17, 63, 216, 156, 187, 190, 91, 20, 236, 190, 100, 12, 103, 61, 63, 145, 86, 190, 196, 145, 182, 62, 36, 111, 31, 185, 92, 44, 48, 189, 148, 223, 2, 62, 248, 228, 57, 190, 39, 231, 59, 62, 17, 92, 54, 191, 250, 246, 100, 62, 63, 189, 131, 61, 227, 194, 161, 189, 231, 237, 183, 188, 235, 145, 51, 191, 184, 5, 158, 62, 218, 186, 203, 62, 160, 35, 24, 191, 106, 169, 99, 190, 53, 174, 126, 190, 127, 90, 144, 62, 114, 25, 76, 62, 165, 98, 52, 62, 151, 111, 26, 62, 69, 84, 82, 62, 18, 95, 243, 190, 27, 177, 183, 190, 16, 156, 191, 190, 18, 251, 237, 190, 233, 84, 134, 190, 96, 245, 236, 189, 68, 223, 192, 190, 238, 247, 182, 61, 66, 17, 112, 190, 148, 200, 223, 190, 121, 165, 179, 60, 171, 189, 218, 61, 1, 108, 16, 61, 74, 15, 193, 59, 211, 221, 34, 61, 41, 171, 77, 190, 153, 112, 180, 190, 31, 165, 225, 60, 194, 209, 200, 62, 239, 223, 225, 189, 130, 111, 238, 189, 254, 141, 196, 189, 177, 10, 157, 62, 143, 108, 112, 62, 49, 43, 182, 62, 84, 214, 92, 189, 247, 63, 242, 189, 110, 27, 131, 190, 156, 72, 239, 61, 72, 32, 190, 62, 245, 169, 137, 188, 60, 64, 141, 189, 85, 119, 245, 61, 115, 124, 243, 189, 214, 98, 31, 190, 85, 127, 157, 189, 0, 144, 32, 62, 250, 94, 201, 61, 187, 112, 66, 61, 51, 33, 132, 189, 54, 58, 196, 58, 26, 88, 177, 189, 54, 225, 184, 61, 188, 122, 198, 188, 202, 167, 171, 61, 82, 93, 228, 61, 244, 145, 4, 190, 185, 22, 234, 60, 135, 7, 6, 62, 100, 88, 190, 60, 185, 81, 8, 190, 141, 206, 41, 190, 44, 84, 0, 188, 222, 123, 174, 60, 44, 221, 23, 61, 129, 51, 156, 61, 105, 249, 246, 189, 45, 59, 120, 61, 102, 206, 225, 188, 89, 194, 245, 189, 178, 234, 253, 189, 67, 123, 128, 61, 206, 66, 101, 191, 119, 146, 196, 58, 2, 118, 209, 189, 234, 47, 179, 61, 117, 206, 2, 190, 132, 57, 12, 191, 255, 176, 233, 61, 138, 54, 213, 60, 27, 125, 104, 62, 217, 64, 150, 62, 109, 178, 202, 61, 156, 246, 177, 191, 46, 198, 229, 62, 242, 219, 79, 62, 33, 231, 6, 61, 34, 110, 139, 61, 90, 168, 177, 61, 62, 190, 242, 189, 8, 198, 160, 191, 67, 248, 208, 61, 30, 201, 253, 61, 205, 135, 217, 190, 68, 211, 220, 189, 178, 208, 233, 60, 215, 255, 51, 62, 60, 213, 205, 62, 32, 167, 73, 62, 49, 14, 71, 190, 46, 215, 127, 190, 139, 229, 224, 60, 255, 20, 189, 59, 167, 0, 243, 62, 55, 46, 186, 189, 183, 243, 69, 189, 166, 122, 117, 190, 62, 236, 48, 190, 242, 130, 96, 61, 155, 244, 146, 190, 126, 148, 229, 60, 170, 178, 128, 62, 59, 171, 236, 62, 89, 204, 41, 61, 12, 73, 52, 191, 119, 236, 170, 190, 44, 251, 79, 189, 90, 199, 154, 62, 90, 74, 4, 189, 14, 198, 151, 190, 37, 102, 164, 189, 26, 13, 123, 189, 18, 49, 193, 60, 2, 188, 19, 190, 200, 36, 245, 188, 0, 85, 185, 61, 84, 231, 92, 61, 23, 110, 172, 62, 186, 15, 26, 62, 132, 234, 179, 190, 140, 57, 142, 190, 63, 6, 161, 60, 216, 21, 150, 190, 199, 80, 162, 188, 15, 130, 234, 61, 187, 18, 52, 190, 164, 11, 49, 190, 83, 159, 162, 62, 83, 207, 226, 190, 11, 109, 34, 190, 186, 215, 7, 191, 188, 223, 2, 192, 112, 160, 5, 191, 39, 127, 95, 61, 76, 53, 223, 62, 233, 255, 71, 63, 164, 74, 92, 190, 45, 4, 168, 190, 173, 199, 175, 191, 191, 50, 27, 62, 91, 236, 95, 62, 233, 234, 223, 190, 120, 175, 208, 62, 212, 7, 2, 191, 102, 238, 149, 62, 203, 144, 229, 61, 159, 23, 38, 190, 159, 220, 39, 190, 4, 115, 76, 62, 34, 242, 25, 60, 211, 116, 42, 61, 31, 92, 201, 190, 11, 15, 8, 191, 196, 10, 221, 62, 159, 11, 85, 190, 178, 142, 146, 60, 180, 252, 159, 190, 50, 28, 61, 190, 96, 33, 243, 188, 135, 13, 180, 187, 247, 184, 165, 189, 63, 9, 242, 61, 118, 36, 98, 61, 175, 96, 173, 190, 157, 104, 133, 189, 21, 250, 133, 61, 126, 134, 8, 189, 58, 201, 173, 61, 220, 35, 177, 62, 191, 140, 104, 191, 149, 205, 180, 62, 126, 30, 22, 190, 173, 43, 182, 190, 24, 133, 144, 62, 129, 120, 127, 62, 193, 171, 55, 62, 126, 166, 143, 191, 11, 123, 205, 189, 54, 95, 114, 61, 35, 249, 197, 190, 183, 128, 113, 190, 62, 213, 225, 60, 110, 91, 94, 62, 192, 11, 161, 61, 81, 118, 136, 60, 17, 179, 11, 191, 206, 86, 57, 190, 199, 58, 236, 61, 254, 79, 84, 189, 228, 125, 24, 62, 196, 26, 199, 190, 74, 5, 205, 62, 5, 168, 224, 190, 153, 107, 215, 62, 32, 115, 194, 189, 112, 192, 111, 191, 18, 154, 112, 188, 164, 217, 58, 63, 0, 178, 53, 189, 19, 34, 233, 61, 72, 207, 2, 62, 155, 144, 77, 191, 165, 136, 223, 61, 228, 12, 143, 190, 165, 43, 108, 62, 114, 170, 135, 60, 224, 8, 16, 62, 171, 19, 185, 62, 194, 255, 165, 191, 220, 148, 186, 61, 4, 250, 189, 189, 208, 251, 72, 191, 92, 79, 98, 190, 227, 108, 224, 190, 250, 11, 103, 62, 53, 16, 15, 63, 205, 119, 187, 62, 73, 221, 253, 190, 16, 172, 7, 191, 57, 134, 146, 62, 120, 52, 186, 189, 192, 105, 24, 63, 236, 189, 28, 190, 151, 187, 79, 190, 7, 115, 5, 62, 68, 62, 59, 62, 218, 161, 105, 190, 197, 218, 177, 190, 124, 30, 243, 190, 86, 10, 4, 191, 211, 69, 176, 62, 35, 196, 26, 188, 77, 82, 215, 189, 54, 24, 176, 190, 248, 26, 201, 190, 132, 55, 89, 60, 254, 165, 49, 190, 67, 230, 247, 190, 123, 133, 130, 190, 204, 21, 193, 61, 193, 146, 65, 62, 23, 197, 16, 62, 230, 7, 194, 187, 122, 23, 51, 189, 108, 194, 69, 62, 209, 176, 78, 191, 155, 222, 243, 59, 60, 143, 223, 190, 147, 3, 187, 189, 98, 146, 41, 190, 247, 24, 11, 62, 59, 185, 144, 189, 79, 143, 85, 189, 49, 193, 26, 190, 77, 210, 49, 190, 22, 161, 151, 189, 3, 176, 77, 61, 97, 71, 240, 60, 241, 235, 84, 188, 252, 230, 48, 190, 133, 92, 49, 62, 140, 208, 148, 190, 210, 139, 9, 62, 87, 253, 16, 62, 54, 201, 184, 189, 87, 25, 16, 191, 154, 146, 134, 190, 168, 203, 18, 62, 224, 204, 196, 189, 171, 114, 161, 189, 230, 226, 158, 62, 132, 123, 204, 189, 24, 10, 38, 62, 103, 23, 44, 189, 123, 241, 165, 60, 100, 247, 126, 62, 84, 212, 119, 189, 240, 91, 131, 61, 148, 39, 171, 189, 77, 168, 134, 190, 180, 27, 155, 190, 55, 21, 255, 188, 7, 201, 75, 189, 180, 100, 142, 62, 145, 75, 87, 61, 148, 248, 124, 190, 211, 96, 143, 190, 72, 119, 125, 191, 178, 150, 28, 61, 148, 131, 157, 189, 232, 145, 98, 62, 221, 196, 72, 61, 194, 236, 15, 62, 119, 136, 140, 189, 94, 188, 35, 62, 20, 215, 160, 61, 92, 55, 13, 190, 191, 132, 243, 62, 223, 130, 102, 188, 236, 223, 51, 62, 1, 86, 152, 191, 100, 227, 83, 189, 160, 66, 182, 189, 72, 111, 127, 190, 248, 112, 146, 190, 205, 73, 113, 190, 243, 86, 215, 190, 116, 223, 94, 62, 194, 59, 144, 62, 90, 194, 171, 189, 55, 249, 191, 190, 79, 222, 213, 189, 22, 171, 189, 190, 152, 204, 10, 61, 143, 104, 9, 190, 27, 246, 142, 190, 208, 137, 19, 62, 203, 32, 101, 190, 221, 162, 201, 61, 219, 42, 240, 188, 149, 219, 208, 188, 160, 87, 144, 62, 141, 200, 163, 190, 202, 116, 22, 190, 199, 165, 172, 189, 36, 41, 144, 62, 8, 255, 237, 189, 248, 1, 72, 188, 175, 160, 71, 62, 136, 90, 134, 190, 247, 195, 200, 189, 161, 143, 235, 189, 182, 76, 214, 190, 21, 221, 81, 61, 158, 32, 151, 189, 106, 208, 84, 62, 90, 7, 155, 191, 219, 228, 209, 61, 25, 221, 9, 61, 144, 134, 13, 191, 156, 29, 136, 189, 175, 163, 85, 190, 170, 130, 1, 62, 156, 116, 36, 61, 99, 235, 97, 61, 253, 155, 3, 191, 44, 96, 145, 189, 159, 33, 74, 189, 141, 81, 241, 189, 161, 150, 203, 62, 130, 76, 195, 189, 199, 63, 60, 62, 64, 78, 161, 190, 239, 146, 222, 61, 154, 185, 158, 189, 140, 206, 232, 189, 213, 112, 1, 62, 200, 41, 165, 187, 92, 58, 69, 189, 105, 180, 60, 62, 24, 104, 26, 62, 156, 197, 148, 189, 81, 179, 247, 61, 212, 197, 174, 61, 179, 67, 14, 62, 113, 207, 131, 62, 190, 79, 77, 189, 254, 158, 120, 62, 176, 161, 130, 191, 31, 221, 25, 62, 187, 110, 41, 62, 142, 79, 161, 190, 125, 98, 13, 61, 243, 166, 131, 60, 100, 213, 171, 189, 111, 110, 193, 62, 167, 198, 190, 61, 128, 117, 193, 190, 4, 26, 199, 190, 174, 135, 196, 61, 159, 165, 8, 62, 233, 14, 57, 61, 188, 236, 97, 189, 100, 77, 52, 189, 174, 236, 17, 190, 248, 158, 206, 189, 138, 78, 218, 188, 199, 181, 10, 189, 80, 3, 11, 190, 111, 58, 17, 190, 214, 124, 91, 61, 228, 100, 207, 60, 131, 88, 27, 62, 86, 184, 56, 60, 202, 145, 141, 187, 231, 2, 175, 61, 189, 87, 197, 61, 43, 164, 146, 188, 209, 57, 230, 189, 206, 196, 184, 189, 131, 130, 24, 190, 70, 126, 47, 188, 30, 149, 23, 190, 192, 104, 142, 189, 126, 24, 11, 62, 98, 172, 44, 61, 168, 4, 60, 190, 86, 72, 211, 189, 129, 142, 250, 189, 130, 194, 68, 189, 162, 237, 32, 62, 113, 99, 173, 189, 82, 154, 16, 61, 81, 215, 132, 61, 136, 156, 16, 62, 140, 131, 6, 189, 107, 157, 47, 190, 68, 149, 134, 62, 187, 113, 108, 61, 234, 120, 30, 62, 180, 187, 56, 189, 54, 192, 156, 190, 229, 159, 71, 190, 163, 173, 14, 189, 207, 33, 18, 63, 24, 80, 28, 62, 131, 10, 159, 62, 92, 182, 38, 191, 67, 23, 153, 189, 82, 191, 126, 62, 42, 141, 63, 190, 240, 252, 228, 61, 125, 146, 90, 62, 107, 145, 213, 61, 118, 122, 23, 190, 109, 29, 30, 190, 207, 140, 239, 60, 144, 5, 194, 190, 193, 86, 203, 61, 43, 184, 9, 63, 159, 236, 3, 63, 22, 162, 12, 62, 84, 107, 195, 189, 161, 99, 22, 62, 105, 155, 194, 61, 249, 148, 110, 189, 102, 160, 220, 61, 135, 52, 175, 61, 119, 135, 174, 60, 103, 16, 126, 61, 23, 168, 18, 62, 248, 225, 60, 190, 246, 185, 5, 190, 218, 78, 214, 61, 163, 49, 35, 190, 60, 184, 250, 189, 0, 169, 185, 61, 157, 12, 94, 61, 148, 84, 110, 188, 120, 91, 175, 189, 142, 220, 240, 189, 161, 73, 104, 189, 162, 140, 184, 188, 77, 110, 179, 189, 27, 73, 217, 188, 28, 62, 67, 60, 48, 200, 182, 189, 88, 74, 103, 189, 140, 0, 106, 61, 196, 217, 46, 190, 238, 203, 21, 189, 250, 176, 58, 61, 80, 89, 41, 190, 31, 245, 184, 189, 23, 228, 159, 189, 5, 43, 35, 190, 57, 50, 185, 189, 134, 132, 222, 60, 182, 80, 165, 190, 67, 104, 14, 191, 51, 147, 30, 62, 170, 35, 210, 59, 89, 7, 179, 61, 165, 184, 147, 190, 107, 128, 0, 62, 65, 25, 52, 191, 178, 154, 183, 62, 2, 82, 24, 190, 223, 220, 45, 190, 160, 181, 34, 190, 66, 232, 208, 189, 52, 49, 212, 62, 119, 40, 61, 191, 125, 86, 99, 190, 20, 175, 64, 189, 211, 178, 128, 189, 60, 74, 10, 63, 93, 107, 199, 59, 55, 108, 46, 190, 137, 157, 187, 62, 183, 150, 38, 62, 187, 142, 178, 62, 55, 223, 16, 59, 38, 8, 165, 190, 178, 146, 252, 190, 213, 6, 137, 62, 26, 98, 126, 62, 5, 105, 174, 189, 64, 22, 67, 62, 144, 158, 183, 190, 62, 85, 223, 190, 170, 205, 96, 191, 73, 214, 56, 62, 124, 107, 163, 188, 46, 163, 37, 62, 92, 59, 213, 189, 55, 143, 131, 62, 91, 106, 7, 61, 156, 106, 144, 62, 29, 91, 42, 190, 217, 190, 69, 191, 93, 136, 72, 190, 211, 118, 68, 190, 170, 25, 198, 62, 209, 41, 131, 191, 242, 166, 22, 190, 70, 160, 77, 60, 60, 123, 175, 190, 37, 115, 132, 190, 39, 181, 107, 190, 23, 88, 135, 189, 62, 91, 95, 62, 102, 101, 80, 189, 173, 154, 146, 62, 182, 182, 49, 190, 71, 241, 27, 191, 221, 190, 210, 190, 246, 201, 192, 190, 170, 179, 230, 189, 87, 124, 216, 60, 47, 89, 71, 62, 49, 117, 164, 190, 206, 251, 65, 189, 79, 58, 244, 61, 16, 185, 139, 62, 58, 191, 225, 61, 109, 70, 249, 190, 9, 114, 14, 191, 80, 42, 151, 190, 2, 175, 214, 61, 173, 193, 139, 191, 186, 139, 14, 190, 111, 203, 102, 62, 21, 149, 68, 191, 45, 117, 180, 62, 247, 37, 96, 189, 253, 120, 8, 190, 207, 28, 136, 62, 89, 106, 75, 62, 198, 117, 3, 62, 104, 87, 26, 191, 136, 28, 102, 190, 161, 197, 131, 62, 221, 210, 2, 191, 162, 173, 59, 190, 144, 161, 236, 61, 48, 96, 176, 62, 27, 136, 113, 62, 26, 126, 107, 189, 117, 163, 148, 190, 73, 63, 92, 62, 112, 213, 193, 190, 141, 36, 79, 189, 30, 63, 200, 62, 179, 90, 87, 61, 201, 133, 119, 190, 62, 245, 203, 60, 102, 195, 59, 62, 44, 45, 141, 190, 180, 122, 144, 189, 103, 118, 193, 188, 88, 167, 58, 62, 155, 145, 28, 191, 142, 137, 203, 189, 186, 1, 220, 62, 117, 25, 164, 190, 158, 238, 238, 61, 255, 16, 115, 61, 82, 103, 152, 190, 226, 167, 203, 60, 26, 114, 252, 189, 121, 32, 142, 189, 51, 140, 118, 191, 230, 40, 200, 190, 70, 97, 16, 190, 233, 30, 149, 190, 185, 218, 64, 189, 65, 86, 173, 189, 250, 95, 193, 189, 203, 41, 26, 188, 109, 29, 54, 59, 219, 0, 143, 190, 228, 83, 115, 190, 142, 196, 135, 190, 147, 48, 211, 61, 50, 152, 23, 62, 220, 3, 207, 60, 36, 224, 60, 188, 189, 129, 136, 188, 98, 224, 241, 61, 113, 11, 87, 61, 158, 199, 175, 189, 158, 185, 171, 61, 85, 115, 162, 189, 101, 151, 199, 61, 141, 45, 226, 189, 185, 97, 52, 61, 106, 180, 252, 188, 225, 52, 38, 62, 152, 198, 211, 62, 180, 218, 8, 189, 106, 75, 148, 62, 255, 65, 158, 62, 127, 30, 33, 61, 223, 109, 45, 191, 134, 229, 25, 62, 215, 184, 225, 188, 190, 251, 14, 190, 20, 123, 130, 62, 91, 17, 173, 189, 235, 229, 234, 61, 29, 148, 23, 62, 134, 220, 37, 62, 115, 222, 67, 190, 156, 244, 49, 189, 133, 153, 51, 62, 10, 204, 27, 62, 21, 165, 102, 62, 87, 42, 13, 191, 203, 2, 2, 191, 204, 166, 174, 62, 29, 117, 14, 191, 137, 99, 177, 60, 169, 88, 97, 190, 37, 247, 139, 190, 165, 94, 131, 61, 96, 222, 219, 62, 33, 97, 218, 190, 157, 99, 42, 190, 178, 74, 244, 189, 188, 171, 113, 190, 57, 231, 131, 62, 50, 6, 132, 191, 222, 56, 171, 187, 116, 179, 177, 188, 52, 66, 228, 190, 161, 73, 66, 190, 174, 110, 195, 190, 252, 147, 206, 189, 153, 127, 177, 62, 246, 72, 92, 62, 99, 105, 97, 190, 253, 255, 183, 189, 232, 120, 190, 189, 52, 80, 166, 190, 219, 223, 86, 190, 129, 52, 203, 60, 206, 67, 36, 188, 18, 175, 91, 189, 239, 7, 141, 190, 56, 144, 208, 190, 1, 17, 143, 190, 218, 152, 175, 61, 61, 250, 181, 61, 230, 53, 172, 61, 10, 233, 190, 189, 112, 17, 175, 189, 156, 9, 46, 61, 83, 98, 89, 62, 210, 0, 222, 189, 247, 60, 219, 61, 187, 180, 29, 190, 232, 197, 209, 62, 100, 173, 140, 62, 146, 79, 62, 190, 169, 168, 49, 61, 214, 174, 159, 61, 146, 50, 119, 61, 109, 107, 139, 190, 82, 101, 72, 61, 136, 150, 130, 189, 29, 99, 89, 189, 185, 6, 134, 62, 174, 249, 148, 188, 68, 249, 155, 188, 230, 164, 253, 60, 201, 243, 100, 61, 104, 105, 52, 61, 166, 26, 198, 189, 239, 149, 67, 61, 180, 62, 99, 61, 95, 109, 105, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 76, 116, 61, 232, 17, 146, 188, 235, 145, 181, 62, 184, 35, 138, 189, 167, 2, 188, 62, 215, 172, 189, 190, 46, 214, 74, 190, 204, 240, 192, 61, 178, 88, 87, 189, 166, 219, 17, 62, 47, 154, 173, 189, 82, 192, 13, 190, 75, 27, 56, 62, 26, 111, 78, 62, 180, 72, 27, 189, 3, 207, 36, 62, 245, 36, 22, 190, 242, 129, 187, 189, 229, 60, 66, 60, 73, 43, 133, 62, 179, 15, 65, 61, 49, 152, 147, 61, 141, 139, 188, 189, 192, 6, 250, 188, 24, 162, 12, 190, 130, 117, 101, 189, 196, 195, 75, 62, 103, 250, 75, 190, 13, 87, 169, 60, 203, 49, 142, 62, 5, 153, 201, 61, 128, 14, 105, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 41, 187, 190, 171, 4, 237, 189, 162, 131, 170, 63, 235, 121, 207, 61, 120, 116, 145, 60, 251, 104, 97, 191, 192, 52, 79, 58, 215, 157, 132, 190, 248, 111, 242, 190, 212, 139, 0, 191, 183, 243, 148, 190, 122, 156, 19, 189, 28, 24, 36, 191, 129, 2, 173, 62, 5, 91, 155, 191, 131, 180, 228, 190, 231, 209, 107, 191, 157, 120, 15, 62, 20, 78, 75, 62, 230, 89, 201, 62, 190, 203, 85, 191, 8, 245, 42, 190, 113, 122, 124, 61, 68, 95, 185, 62, 9, 223, 97, 61, 25, 9, 79, 63, 18, 132, 21, 63, 239, 171, 213, 190, 243, 227, 180, 188, 141, 157, 229, 188, 81, 220, 218, 62, 0, 35, 73, 61, 2, 61, 39, 190, 166, 124, 141, 189, 78, 249, 102, 62, 136, 143, 231, 61, 199, 125, 164, 190, 127, 190, 194, 61, 191, 94, 160, 60, 124, 146, 192, 60, 70, 118, 193, 62, 102, 253, 126, 190, 109, 18, 231, 62, 11, 48, 189, 61, 22, 104, 124, 190, 176, 30, 218, 189, 243, 38, 186, 61, 100, 230, 222, 189, 166, 125, 7, 63, 82, 243, 61, 190, 85, 18, 163, 189, 36, 77, 53, 190, 143, 209, 142, 62, 108, 80, 106, 190, 255, 150, 242, 61, 166, 103, 55, 62, 109, 5, 169, 61, 112, 223, 130, 189, 1, 191, 134, 189, 32, 173, 110, 63, 55, 210, 140, 62, 54, 42, 170, 190, 26, 133, 16, 190, 21, 173, 131, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 223, 53, 62, 228, 184, 192, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {93, 115, 28, 192, 242, 40, 109, 191, 218, 167, 22, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {178, 46, 14, 193, 192, 62, 111, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0086/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}