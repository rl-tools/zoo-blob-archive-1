// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 138, 146, 190, 83, 123, 51, 63, 229, 140, 1, 63, 136, 188, 224, 190, 236, 249, 177, 191, 78, 225, 203, 190, 25, 178, 171, 190, 159, 196, 88, 61, 60, 8, 244, 190, 202, 126, 245, 190, 137, 2, 20, 62, 167, 52, 68, 191, 219, 250, 66, 189, 178, 104, 229, 189, 52, 183, 7, 63, 11, 114, 132, 190, 209, 141, 130, 63, 236, 235, 251, 62, 109, 225, 122, 62, 83, 184, 127, 190, 53, 146, 68, 63, 152, 65, 52, 191, 1, 61, 60, 191, 216, 58, 99, 61, 18, 173, 110, 190, 19, 10, 71, 191, 70, 223, 232, 61, 174, 101, 139, 190, 180, 78, 69, 191, 112, 69, 207, 62, 161, 212, 36, 62, 245, 115, 1, 63, 40, 79, 59, 190, 199, 107, 32, 191, 217, 146, 165, 63, 133, 59, 192, 62, 12, 96, 29, 63, 153, 144, 222, 62, 186, 108, 42, 62, 41, 120, 49, 63, 229, 105, 215, 190, 238, 115, 11, 190, 102, 31, 190, 190, 175, 63, 146, 191, 193, 112, 142, 190, 188, 84, 27, 63, 114, 218, 109, 63, 128, 25, 104, 62, 82, 153, 227, 62, 57, 97, 221, 190, 110, 18, 178, 62, 167, 224, 25, 61, 119, 113, 250, 60, 223, 156, 103, 190, 106, 245, 27, 63, 160, 4, 199, 190, 7, 97, 134, 190, 188, 220, 6, 189, 90, 71, 53, 191, 38, 159, 17, 191, 167, 96, 128, 62, 71, 220, 13, 190, 75, 207, 234, 62, 172, 215, 35, 63, 152, 220, 138, 191, 227, 176, 0, 191, 185, 142, 153, 190, 53, 150, 74, 190, 135, 245, 91, 62, 75, 10, 151, 62, 168, 72, 139, 190, 237, 10, 119, 62, 175, 114, 153, 190, 27, 255, 236, 190, 109, 139, 206, 190, 138, 49, 241, 62, 180, 33, 121, 63, 13, 169, 61, 62, 185, 19, 172, 62, 162, 99, 119, 63, 61, 57, 181, 62, 57, 21, 177, 62, 202, 93, 53, 191, 73, 110, 212, 190, 225, 194, 233, 188, 132, 142, 84, 190, 39, 9, 170, 190, 146, 113, 138, 61, 162, 34, 0, 191, 97, 96, 7, 191, 173, 140, 8, 63, 232, 202, 91, 189, 219, 157, 35, 191, 216, 224, 47, 63, 212, 51, 54, 63, 82, 174, 111, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 181, 245, 190, 200, 125, 133, 190, 180, 226, 194, 190, 65, 199, 2, 191, 153, 45, 1, 190, 80, 232, 137, 188, 31, 170, 32, 62, 241, 214, 194, 190, 213, 182, 210, 62, 52, 150, 17, 190, 27, 79, 35, 190, 81, 49, 52, 62, 123, 58, 112, 62, 203, 6, 78, 62, 250, 184, 158, 190, 19, 104, 225, 61, 114, 138, 7, 63, 166, 84, 91, 190, 217, 184, 34, 191, 130, 73, 13, 62, 241, 98, 235, 190, 241, 36, 82, 189, 202, 195, 20, 63, 146, 207, 17, 61, 201, 100, 147, 62, 237, 151, 194, 61, 247, 11, 5, 190, 60, 156, 201, 190, 158, 189, 244, 190, 8, 179, 36, 62, 8, 61, 209, 62, 66, 228, 139, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {55, 47, 169, 61, 50, 160, 81, 61, 98, 113, 201, 189, 88, 235, 48, 61, 50, 243, 21, 190, 152, 7, 60, 189, 209, 102, 80, 61, 128, 163, 81, 61, 129, 85, 223, 61, 151, 64, 105, 190, 140, 200, 61, 62, 165, 206, 21, 190, 212, 104, 145, 61, 25, 76, 205, 60, 109, 243, 146, 62, 64, 115, 53, 62, 23, 141, 174, 61, 84, 232, 172, 61, 164, 115, 56, 191, 125, 107, 129, 62, 240, 144, 186, 189, 220, 91, 152, 190, 44, 149, 144, 60, 6, 104, 132, 61, 190, 42, 135, 60, 41, 210, 190, 62, 54, 145, 23, 62, 229, 209, 181, 190, 248, 173, 28, 190, 166, 152, 67, 189, 201, 190, 22, 62, 50, 206, 235, 61, 37, 19, 6, 62, 162, 88, 132, 61, 236, 166, 53, 188, 80, 147, 157, 188, 222, 231, 14, 190, 223, 199, 80, 189, 254, 212, 198, 188, 16, 208, 142, 61, 94, 208, 250, 188, 85, 104, 34, 190, 48, 26, 46, 190, 220, 187, 12, 190, 106, 223, 229, 189, 44, 255, 205, 61, 232, 58, 47, 190, 224, 73, 184, 61, 100, 99, 4, 190, 199, 206, 33, 61, 72, 92, 4, 189, 155, 14, 89, 189, 97, 106, 48, 189, 22, 221, 32, 190, 139, 229, 139, 61, 46, 21, 164, 61, 184, 238, 7, 190, 55, 110, 25, 190, 91, 238, 188, 61, 88, 239, 14, 62, 129, 244, 52, 62, 190, 113, 46, 190, 117, 107, 192, 189, 169, 187, 6, 190, 39, 200, 136, 190, 81, 220, 43, 191, 27, 74, 198, 62, 251, 215, 29, 191, 148, 52, 72, 62, 197, 70, 86, 62, 104, 41, 150, 60, 145, 180, 77, 60, 121, 163, 42, 61, 209, 130, 140, 190, 213, 230, 113, 190, 181, 215, 176, 62, 235, 111, 132, 61, 93, 99, 204, 62, 46, 199, 130, 191, 225, 73, 164, 190, 81, 108, 205, 189, 129, 212, 1, 190, 217, 74, 184, 60, 17, 172, 9, 190, 69, 172, 20, 190, 160, 124, 242, 62, 159, 238, 108, 62, 52, 247, 128, 62, 31, 166, 94, 61, 130, 165, 218, 190, 41, 113, 37, 190, 214, 31, 105, 62, 27, 53, 246, 62, 77, 211, 99, 190, 205, 83, 136, 62, 139, 196, 195, 190, 253, 253, 108, 189, 179, 139, 163, 61, 184, 168, 121, 189, 152, 144, 201, 188, 45, 46, 140, 189, 74, 154, 21, 190, 87, 186, 246, 189, 173, 8, 26, 190, 165, 215, 173, 61, 177, 16, 213, 61, 102, 69, 88, 188, 124, 206, 182, 61, 124, 148, 133, 61, 137, 31, 193, 189, 165, 175, 106, 61, 14, 97, 248, 189, 34, 239, 169, 61, 176, 152, 14, 189, 217, 49, 21, 62, 142, 123, 116, 189, 4, 157, 242, 61, 141, 217, 247, 60, 78, 167, 40, 190, 6, 186, 26, 190, 60, 42, 174, 189, 16, 103, 166, 189, 41, 75, 177, 61, 160, 245, 129, 189, 52, 126, 61, 189, 238, 172, 230, 189, 213, 85, 232, 61, 22, 115, 180, 61, 68, 218, 45, 190, 73, 241, 214, 189, 251, 245, 22, 190, 68, 83, 156, 61, 142, 161, 4, 60, 79, 125, 140, 188, 131, 42, 172, 59, 179, 213, 214, 189, 194, 43, 22, 62, 163, 97, 53, 188, 146, 10, 197, 61, 242, 144, 78, 62, 87, 186, 144, 62, 83, 44, 142, 61, 175, 246, 37, 61, 105, 59, 51, 62, 175, 200, 203, 188, 143, 179, 26, 62, 195, 243, 219, 190, 79, 93, 47, 62, 29, 118, 160, 61, 160, 72, 62, 60, 66, 25, 210, 61, 217, 200, 87, 190, 37, 205, 4, 61, 97, 213, 193, 62, 194, 68, 114, 61, 177, 254, 16, 190, 129, 122, 156, 189, 14, 173, 183, 189, 192, 251, 8, 62, 235, 54, 83, 62, 227, 131, 250, 189, 119, 181, 244, 61, 225, 212, 20, 190, 233, 163, 15, 191, 36, 241, 204, 61, 9, 169, 209, 188, 93, 131, 197, 61, 45, 235, 95, 61, 40, 197, 104, 190, 3, 160, 16, 190, 134, 215, 61, 189, 219, 247, 23, 190, 231, 41, 3, 62, 176, 147, 73, 61, 203, 153, 11, 62, 30, 120, 204, 60, 190, 126, 122, 189, 68, 40, 116, 60, 144, 65, 224, 189, 179, 125, 205, 190, 254, 121, 39, 62, 61, 98, 29, 191, 221, 207, 192, 189, 55, 102, 21, 190, 228, 23, 82, 190, 114, 9, 131, 62, 242, 138, 153, 62, 160, 11, 168, 189, 155, 133, 179, 189, 66, 18, 129, 190, 193, 165, 154, 188, 80, 83, 201, 62, 28, 148, 241, 189, 43, 121, 52, 190, 216, 155, 21, 189, 81, 244, 13, 189, 55, 84, 212, 189, 214, 254, 222, 189, 172, 130, 2, 62, 192, 203, 21, 189, 149, 43, 162, 61, 178, 231, 145, 189, 94, 42, 175, 61, 37, 107, 242, 189, 230, 146, 25, 190, 4, 198, 51, 189, 203, 235, 215, 61, 172, 234, 157, 61, 9, 6, 56, 189, 50, 196, 91, 61, 68, 117, 250, 189, 20, 42, 87, 190, 115, 4, 213, 61, 120, 48, 245, 61, 130, 61, 39, 190, 209, 223, 44, 62, 232, 249, 39, 189, 197, 37, 25, 62, 108, 34, 141, 61, 249, 153, 146, 61, 192, 181, 48, 190, 162, 39, 232, 189, 75, 234, 190, 61, 124, 74, 4, 190, 92, 175, 117, 190, 91, 243, 225, 188, 69, 20, 127, 189, 50, 198, 70, 62, 239, 86, 143, 190, 173, 105, 182, 190, 96, 11, 139, 190, 195, 34, 170, 187, 105, 89, 157, 60, 193, 132, 168, 189, 95, 200, 23, 62, 19, 48, 73, 190, 176, 230, 7, 62, 132, 251, 136, 62, 59, 171, 48, 62, 246, 115, 42, 62, 125, 132, 21, 62, 254, 52, 114, 62, 101, 41, 149, 190, 212, 152, 240, 60, 54, 22, 1, 190, 213, 7, 29, 190, 131, 255, 45, 189, 89, 246, 98, 190, 178, 186, 73, 62, 118, 216, 56, 62, 225, 238, 249, 189, 66, 3, 179, 58, 47, 69, 130, 190, 104, 218, 159, 61, 163, 120, 12, 190, 176, 34, 168, 62, 215, 169, 178, 61, 63, 97, 156, 62, 98, 97, 152, 190, 234, 46, 85, 62, 79, 78, 93, 190, 167, 189, 67, 189, 148, 90, 132, 189, 230, 139, 219, 61, 84, 117, 158, 188, 116, 181, 49, 188, 16, 108, 65, 62, 230, 30, 59, 190, 133, 115, 197, 189, 234, 21, 204, 187, 251, 207, 234, 61, 138, 226, 4, 62, 127, 167, 206, 61, 88, 24, 125, 62, 241, 179, 220, 190, 110, 15, 59, 61, 133, 74, 205, 61, 162, 241, 164, 190, 80, 213, 150, 189, 156, 229, 178, 190, 8, 57, 97, 62, 9, 128, 128, 62, 11, 46, 133, 62, 235, 158, 31, 190, 198, 193, 181, 189, 102, 220, 20, 62, 67, 158, 42, 190, 230, 50, 173, 62, 23, 185, 67, 187, 75, 105, 238, 61, 22, 141, 182, 189, 247, 102, 132, 61, 165, 80, 97, 191, 122, 70, 203, 191, 241, 92, 170, 191, 7, 48, 191, 62, 94, 210, 66, 61, 1, 11, 167, 62, 202, 214, 150, 61, 56, 240, 109, 190, 122, 9, 211, 61, 132, 171, 5, 190, 235, 121, 205, 189, 212, 130, 24, 190, 95, 104, 26, 189, 198, 65, 75, 62, 240, 170, 17, 191, 20, 118, 93, 62, 63, 189, 131, 61, 233, 195, 213, 189, 182, 236, 106, 62, 152, 249, 38, 191, 215, 243, 154, 62, 36, 80, 253, 61, 102, 205, 13, 191, 91, 145, 128, 190, 206, 103, 134, 190, 168, 169, 137, 62, 227, 106, 252, 61, 187, 97, 124, 61, 204, 63, 91, 62, 40, 48, 244, 61, 245, 117, 223, 190, 59, 62, 162, 190, 152, 109, 128, 190, 154, 32, 100, 190, 135, 96, 90, 190, 133, 50, 249, 61, 161, 231, 204, 61, 189, 150, 8, 61, 101, 166, 141, 190, 226, 201, 2, 190, 246, 49, 107, 61, 221, 27, 109, 61, 5, 63, 98, 189, 163, 22, 92, 60, 103, 196, 139, 61, 228, 57, 185, 190, 226, 251, 26, 62, 125, 45, 107, 61, 160, 151, 156, 62, 94, 171, 103, 189, 238, 39, 115, 189, 33, 121, 21, 190, 114, 45, 240, 61, 18, 192, 124, 62, 5, 93, 190, 62, 35, 73, 56, 190, 209, 120, 145, 189, 131, 97, 237, 189, 5, 153, 117, 61, 241, 75, 168, 62, 245, 169, 137, 188, 60, 64, 141, 189, 85, 119, 245, 61, 115, 124, 243, 189, 214, 98, 31, 190, 85, 127, 157, 189, 0, 144, 32, 62, 250, 94, 201, 61, 187, 112, 66, 61, 51, 33, 132, 189, 54, 58, 196, 58, 26, 88, 177, 189, 54, 225, 184, 61, 188, 122, 198, 188, 202, 167, 171, 61, 82, 93, 228, 61, 244, 145, 4, 190, 185, 22, 234, 60, 135, 7, 6, 62, 100, 88, 190, 60, 185, 81, 8, 190, 141, 206, 41, 190, 44, 84, 0, 188, 222, 123, 174, 60, 44, 221, 23, 61, 129, 51, 156, 61, 105, 249, 246, 189, 45, 59, 120, 61, 102, 206, 225, 188, 89, 194, 245, 189, 178, 234, 253, 189, 67, 123, 128, 61, 6, 234, 62, 191, 182, 146, 73, 61, 127, 110, 109, 189, 187, 11, 28, 62, 114, 168, 22, 190, 106, 183, 160, 190, 131, 51, 181, 61, 238, 25, 32, 62, 90, 123, 116, 62, 222, 82, 143, 62, 172, 105, 152, 61, 195, 207, 12, 191, 178, 206, 208, 62, 40, 178, 174, 61, 109, 254, 251, 61, 132, 185, 195, 188, 92, 169, 166, 61, 202, 5, 79, 189, 37, 142, 80, 191, 146, 126, 3, 62, 186, 17, 151, 187, 232, 83, 187, 190, 86, 44, 128, 189, 116, 127, 253, 188, 80, 104, 68, 62, 147, 149, 157, 62, 217, 53, 68, 60, 92, 172, 147, 189, 81, 169, 43, 190, 214, 46, 115, 61, 15, 220, 53, 189, 179, 70, 171, 62, 222, 18, 183, 61, 242, 32, 107, 61, 167, 160, 169, 189, 78, 151, 205, 188, 182, 94, 0, 60, 2, 138, 14, 189, 178, 11, 101, 188, 234, 146, 16, 62, 88, 56, 123, 62, 63, 93, 132, 60, 45, 12, 111, 190, 79, 158, 206, 61, 54, 208, 63, 189, 134, 226, 133, 62, 41, 104, 148, 61, 103, 25, 93, 190, 202, 35, 28, 190, 115, 56, 190, 61, 40, 171, 28, 190, 153, 217, 16, 190, 29, 154, 45, 61, 65, 247, 100, 58, 250, 128, 159, 61, 142, 57, 170, 62, 131, 104, 116, 62, 131, 116, 78, 190, 153, 225, 184, 188, 106, 59, 202, 61, 147, 239, 232, 189, 132, 54, 154, 189, 76, 181, 27, 62, 180, 41, 80, 189, 240, 195, 8, 189, 247, 157, 90, 62, 14, 196, 241, 190, 186, 118, 34, 190, 31, 139, 231, 190, 67, 11, 197, 191, 74, 105, 247, 190, 30, 48, 162, 62, 171, 143, 193, 62, 125, 68, 59, 63, 55, 135, 112, 190, 1, 181, 122, 190, 251, 155, 45, 191, 121, 129, 126, 190, 203, 157, 240, 61, 243, 107, 132, 189, 100, 28, 145, 62, 218, 221, 110, 190, 243, 175, 156, 62, 218, 159, 239, 61, 53, 253, 7, 61, 164, 170, 204, 190, 1, 8, 125, 62, 94, 208, 236, 189, 205, 30, 168, 61, 6, 185, 205, 190, 213, 224, 18, 190, 52, 144, 144, 61, 129, 97, 159, 189, 115, 244, 221, 187, 24, 248, 2, 191, 205, 177, 143, 60, 175, 86, 133, 61, 195, 60, 114, 62, 42, 190, 29, 190, 74, 164, 158, 61, 33, 29, 75, 189, 216, 126, 166, 189, 218, 156, 25, 190, 135, 30, 75, 62, 243, 225, 60, 61, 147, 248, 139, 189, 215, 135, 153, 62, 180, 73, 168, 190, 19, 98, 227, 62, 253, 43, 1, 190, 218, 183, 190, 188, 76, 136, 195, 62, 53, 84, 153, 62, 176, 178, 36, 62, 13, 47, 7, 191, 52, 144, 183, 189, 106, 228, 243, 189, 144, 252, 234, 189, 117, 151, 48, 190, 72, 133, 144, 59, 222, 132, 60, 62, 8, 41, 70, 62, 10, 187, 234, 61, 37, 24, 101, 190, 165, 92, 12, 190, 242, 97, 7, 62, 161, 248, 149, 189, 76, 156, 59, 62, 119, 85, 23, 61, 140, 194, 218, 62, 121, 133, 229, 190, 73, 215, 225, 62, 224, 115, 171, 189, 193, 37, 30, 191, 9, 49, 168, 189, 131, 114, 242, 62, 23, 33, 43, 62, 174, 153, 168, 62, 8, 51, 109, 62, 11, 145, 235, 190, 61, 67, 190, 61, 114, 197, 111, 190, 236, 41, 131, 62, 156, 251, 17, 189, 12, 36, 38, 62, 172, 47, 217, 62, 49, 1, 77, 191, 161, 114, 5, 62, 222, 52, 54, 60, 17, 115, 29, 191, 90, 247, 20, 189, 11, 189, 217, 190, 59, 33, 115, 62, 106, 117, 250, 62, 8, 165, 23, 62, 90, 238, 217, 190, 57, 104, 4, 191, 14, 13, 174, 62, 209, 154, 144, 189, 241, 135, 196, 62, 33, 176, 147, 61, 144, 94, 142, 189, 74, 1, 87, 62, 182, 189, 112, 62, 54, 157, 225, 189, 97, 239, 8, 190, 130, 102, 22, 190, 120, 39, 4, 189, 207, 182, 103, 62, 244, 218, 24, 62, 138, 2, 229, 189, 102, 171, 168, 189, 137, 57, 66, 190, 168, 150, 247, 61, 178, 171, 192, 187, 60, 32, 113, 190, 237, 16, 162, 190, 46, 242, 240, 61, 253, 123, 31, 62, 123, 2, 53, 62, 230, 7, 194, 187, 54, 73, 45, 61, 72, 9, 31, 62, 234, 213, 173, 190, 147, 184, 19, 61, 66, 174, 13, 190, 86, 115, 168, 189, 254, 135, 210, 189, 233, 132, 86, 62, 62, 61, 23, 189, 234, 51, 138, 59, 131, 130, 75, 190, 20, 28, 140, 189, 35, 89, 250, 61, 192, 46, 242, 61, 38, 241, 135, 61, 192, 91, 162, 189, 198, 163, 158, 60, 108, 142, 230, 61, 195, 170, 136, 61, 193, 9, 139, 189, 227, 103, 159, 61, 42, 60, 158, 189, 185, 187, 48, 190, 234, 18, 134, 190, 24, 67, 24, 62, 124, 114, 235, 61, 69, 156, 162, 59, 164, 75, 87, 62, 30, 194, 199, 189, 166, 106, 8, 60, 32, 128, 27, 60, 39, 17, 216, 60, 245, 150, 138, 62, 88, 222, 8, 190, 48, 95, 221, 60, 6, 193, 133, 187, 54, 135, 22, 190, 16, 114, 197, 189, 77, 102, 146, 61, 41, 53, 138, 60, 186, 22, 154, 62, 241, 5, 214, 61, 235, 171, 71, 190, 29, 239, 145, 190, 141, 244, 223, 190, 140, 237, 233, 61, 146, 82, 123, 189, 171, 34, 86, 62, 238, 15, 171, 187, 89, 12, 0, 62, 65, 222, 242, 189, 63, 82, 25, 60, 201, 195, 187, 61, 221, 123, 79, 187, 223, 85, 132, 62, 164, 132, 11, 189, 176, 245, 81, 62, 23, 87, 249, 190, 124, 174, 115, 189, 205, 186, 28, 190, 105, 228, 245, 189, 136, 197, 155, 190, 110, 122, 187, 189, 4, 205, 9, 190, 243, 49, 18, 62, 189, 23, 133, 62, 121, 197, 132, 189, 60, 52, 165, 189, 41, 155, 216, 189, 236, 223, 181, 190, 147, 237, 202, 61, 88, 123, 236, 188, 93, 148, 129, 190, 62, 148, 37, 62, 127, 39, 138, 189, 37, 10, 44, 62, 4, 10, 230, 61, 167, 36, 32, 190, 248, 153, 66, 62, 30, 98, 155, 190, 20, 81, 190, 60, 234, 170, 45, 190, 58, 253, 16, 61, 184, 196, 197, 189, 155, 164, 167, 61, 135, 160, 96, 62, 242, 84, 184, 189, 223, 96, 229, 61, 27, 5, 39, 61, 122, 120, 39, 190, 61, 81, 108, 62, 198, 39, 24, 190, 160, 61, 98, 62, 123, 69, 41, 190, 94, 6, 200, 61, 60, 51, 67, 62, 116, 229, 44, 190, 109, 13, 119, 190, 249, 221, 184, 190, 126, 133, 243, 60, 141, 224, 50, 62, 115, 60, 78, 62, 145, 192, 170, 189, 252, 10, 67, 189, 72, 249, 6, 189, 112, 87, 247, 189, 37, 104, 203, 62, 181, 223, 203, 188, 22, 124, 84, 62, 150, 63, 166, 190, 56, 135, 247, 61, 138, 241, 214, 189, 40, 224, 136, 60, 97, 43, 254, 61, 229, 22, 2, 62, 155, 170, 133, 189, 194, 15, 153, 61, 224, 62, 28, 62, 167, 122, 2, 62, 148, 161, 59, 62, 54, 109, 180, 60, 108, 180, 72, 62, 86, 180, 152, 62, 189, 36, 82, 188, 145, 214, 146, 62, 224, 101, 26, 191, 5, 42, 29, 62, 226, 70, 204, 189, 155, 166, 101, 190, 213, 58, 71, 61, 69, 185, 11, 189, 48, 251, 235, 189, 145, 219, 220, 62, 236, 155, 27, 62, 245, 196, 133, 190, 73, 230, 170, 190, 162, 164, 220, 61, 214, 55, 5, 62, 248, 84, 5, 189, 188, 236, 97, 189, 100, 77, 52, 189, 174, 236, 17, 190, 248, 158, 206, 189, 138, 78, 218, 188, 199, 181, 10, 189, 80, 3, 11, 190, 111, 58, 17, 190, 214, 124, 91, 61, 228, 100, 207, 60, 131, 88, 27, 62, 86, 184, 56, 60, 202, 145, 141, 187, 231, 2, 175, 61, 189, 87, 197, 61, 43, 164, 146, 188, 209, 57, 230, 189, 206, 196, 184, 189, 131, 130, 24, 190, 70, 126, 47, 188, 30, 149, 23, 190, 192, 104, 142, 189, 126, 24, 11, 62, 98, 172, 44, 61, 168, 4, 60, 190, 86, 72, 211, 189, 129, 142, 250, 189, 130, 194, 68, 189, 162, 237, 32, 62, 113, 99, 173, 189, 82, 154, 16, 61, 81, 215, 132, 61, 38, 242, 54, 62, 133, 16, 134, 61, 55, 248, 235, 189, 202, 221, 146, 62, 205, 33, 231, 60, 206, 144, 159, 61, 122, 126, 178, 189, 111, 28, 70, 186, 8, 147, 50, 190, 91, 150, 56, 61, 13, 105, 221, 62, 195, 15, 114, 61, 227, 192, 41, 62, 61, 35, 212, 190, 232, 96, 74, 61, 10, 180, 128, 61, 139, 209, 133, 190, 200, 32, 229, 61, 17, 241, 41, 62, 253, 22, 36, 62, 104, 220, 135, 61, 179, 108, 158, 188, 166, 185, 121, 59, 196, 63, 167, 190, 178, 140, 48, 62, 25, 0, 175, 62, 153, 75, 101, 62, 218, 240, 74, 62, 216, 8, 89, 189, 220, 238, 87, 62, 199, 213, 23, 62, 141, 120, 42, 190, 102, 160, 220, 61, 135, 52, 175, 61, 119, 135, 174, 60, 103, 16, 126, 61, 23, 168, 18, 62, 248, 225, 60, 190, 246, 185, 5, 190, 218, 78, 214, 61, 163, 49, 35, 190, 60, 184, 250, 189, 0, 169, 185, 61, 157, 12, 94, 61, 148, 84, 110, 188, 120, 91, 175, 189, 142, 220, 240, 189, 161, 73, 104, 189, 162, 140, 184, 188, 77, 110, 179, 189, 27, 73, 217, 188, 28, 62, 67, 60, 48, 200, 182, 189, 88, 74, 103, 189, 140, 0, 106, 61, 196, 217, 46, 190, 238, 203, 21, 189, 250, 176, 58, 61, 80, 89, 41, 190, 31, 245, 184, 189, 23, 228, 159, 189, 5, 43, 35, 190, 57, 50, 185, 189, 134, 132, 222, 60, 42, 112, 135, 190, 103, 32, 139, 190, 180, 107, 192, 61, 213, 87, 178, 189, 20, 112, 105, 61, 226, 21, 8, 190, 60, 119, 219, 61, 12, 27, 134, 190, 246, 198, 148, 62, 119, 251, 214, 189, 229, 57, 123, 190, 35, 241, 153, 61, 196, 2, 143, 189, 225, 191, 216, 62, 69, 28, 195, 190, 156, 133, 4, 190, 91, 139, 158, 189, 158, 66, 61, 190, 187, 147, 211, 61, 131, 112, 39, 189, 221, 222, 169, 189, 7, 31, 178, 62, 144, 93, 75, 62, 245, 136, 192, 62, 207, 233, 101, 187, 34, 169, 92, 190, 157, 20, 142, 190, 253, 72, 54, 62, 96, 166, 52, 62, 255, 25, 56, 190, 104, 248, 14, 62, 128, 7, 140, 190, 14, 61, 165, 190, 75, 189, 147, 190, 80, 210, 130, 60, 174, 73, 56, 190, 125, 87, 237, 61, 52, 188, 168, 61, 154, 128, 96, 62, 151, 193, 13, 60, 57, 37, 12, 62, 137, 180, 79, 190, 188, 21, 133, 190, 174, 94, 188, 61, 192, 134, 22, 190, 25, 147, 188, 62, 2, 123, 173, 190, 123, 194, 13, 189, 206, 162, 71, 189, 171, 204, 196, 190, 39, 157, 2, 191, 165, 57, 127, 190, 21, 199, 231, 60, 40, 223, 225, 61, 183, 52, 241, 186, 89, 4, 130, 62, 33, 25, 130, 61, 47, 121, 224, 190, 9, 76, 250, 189, 72, 28, 14, 190, 147, 172, 56, 190, 253, 197, 125, 190, 84, 119, 80, 62, 118, 153, 5, 190, 147, 39, 11, 62, 38, 101, 234, 61, 6, 179, 67, 61, 247, 189, 198, 189, 73, 12, 47, 190, 31, 164, 184, 189, 173, 100, 99, 190, 212, 218, 110, 190, 136, 156, 93, 190, 138, 74, 162, 189, 242, 40, 98, 62, 196, 128, 94, 190, 92, 21, 155, 62, 230, 156, 76, 190, 222, 67, 98, 189, 163, 180, 125, 62, 2, 65, 7, 62, 18, 170, 73, 190, 205, 81, 224, 61, 51, 119, 9, 190, 15, 155, 112, 62, 135, 152, 164, 190, 56, 15, 6, 190, 125, 66, 84, 60, 166, 137, 199, 61, 14, 146, 129, 62, 24, 15, 225, 61, 176, 214, 156, 189, 94, 96, 79, 62, 161, 126, 136, 190, 241, 64, 96, 190, 80, 224, 174, 62, 64, 230, 251, 61, 247, 124, 96, 190, 100, 55, 24, 190, 111, 60, 226, 58, 186, 181, 14, 60, 115, 231, 6, 62, 73, 106, 13, 62, 77, 44, 130, 62, 50, 140, 164, 189, 201, 59, 26, 62, 221, 230, 218, 62, 21, 36, 24, 190, 115, 146, 165, 61, 46, 249, 142, 186, 135, 212, 151, 190, 244, 2, 18, 60, 13, 156, 231, 189, 220, 31, 6, 190, 183, 194, 87, 61, 192, 241, 160, 190, 214, 169, 90, 189, 99, 16, 214, 189, 47, 154, 156, 61, 117, 67, 130, 189, 59, 210, 93, 190, 175, 37, 172, 188, 251, 247, 210, 61, 188, 45, 44, 62, 108, 125, 228, 189, 11, 44, 7, 190, 231, 241, 40, 188, 74, 213, 5, 62, 46, 115, 42, 62, 61, 27, 43, 189, 38, 191, 86, 189, 42, 225, 185, 61, 145, 198, 9, 190, 236, 48, 184, 60, 104, 88, 95, 189, 253, 108, 28, 189, 215, 86, 15, 190, 147, 201, 161, 190, 204, 119, 72, 61, 179, 195, 223, 61, 194, 12, 11, 62, 0, 7, 162, 62, 177, 229, 70, 189, 219, 165, 146, 62, 197, 14, 54, 62, 106, 83, 17, 61, 28, 63, 49, 191, 174, 46, 194, 61, 217, 45, 18, 190, 29, 125, 25, 190, 75, 231, 56, 62, 186, 151, 107, 190, 193, 163, 156, 61, 253, 14, 43, 62, 231, 246, 68, 62, 84, 199, 67, 190, 145, 225, 124, 189, 83, 175, 235, 61, 153, 109, 18, 62, 208, 224, 51, 62, 199, 210, 157, 190, 185, 230, 161, 190, 7, 68, 112, 62, 53, 127, 37, 191, 28, 94, 19, 189, 108, 63, 212, 188, 50, 148, 69, 190, 190, 149, 66, 61, 190, 79, 115, 62, 142, 57, 111, 190, 35, 93, 166, 61, 226, 213, 91, 61, 156, 98, 49, 190, 117, 252, 148, 62, 164, 68, 37, 191, 252, 201, 169, 61, 0, 29, 126, 53, 226, 48, 23, 189, 110, 200, 131, 190, 222, 30, 170, 190, 22, 7, 220, 60, 171, 72, 138, 62, 112, 51, 163, 62, 250, 222, 56, 190, 52, 5, 104, 61, 171, 59, 179, 60, 242, 139, 79, 189, 139, 195, 171, 61, 82, 151, 211, 60, 181, 70, 7, 190, 108, 183, 120, 187, 226, 22, 56, 190, 124, 28, 52, 190, 222, 14, 108, 190, 18, 157, 191, 61, 209, 113, 180, 61, 7, 237, 7, 61, 48, 247, 96, 61, 36, 216, 201, 189, 68, 13, 22, 62, 164, 22, 9, 62, 188, 55, 192, 189, 91, 0, 197, 61, 52, 119, 38, 188, 181, 44, 177, 62, 141, 96, 153, 62, 149, 186, 218, 189, 93, 159, 185, 188, 177, 184, 191, 60, 215, 247, 146, 61, 42, 77, 175, 190, 208, 180, 7, 61, 115, 175, 190, 60, 33, 79, 112, 188, 106, 175, 156, 62, 194, 44, 20, 60, 117, 8, 157, 186, 246, 254, 194, 59, 160, 193, 116, 61, 200, 83, 197, 61, 37, 156, 159, 189, 254, 254, 152, 60, 187, 44, 191, 61, 152, 140, 2, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 130, 1, 62, 232, 17, 146, 188, 115, 54, 178, 62, 184, 35, 138, 189, 125, 89, 152, 62, 95, 212, 49, 190, 46, 214, 74, 190, 83, 241, 162, 61, 209, 40, 146, 189, 111, 23, 62, 61, 244, 203, 205, 188, 82, 192, 13, 190, 205, 227, 234, 61, 192, 156, 102, 62, 170, 153, 18, 189, 181, 124, 74, 62, 206, 196, 33, 190, 31, 238, 209, 188, 65, 97, 14, 61, 12, 2, 121, 62, 124, 111, 106, 189, 251, 51, 95, 61, 141, 139, 188, 189, 164, 43, 145, 188, 24, 162, 12, 190, 120, 253, 210, 188, 164, 14, 124, 62, 204, 39, 100, 190, 204, 171, 166, 60, 227, 181, 69, 62, 163, 35, 62, 62, 237, 75, 80, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {114, 255, 76, 190, 171, 4, 237, 189, 121, 53, 146, 63, 235, 121, 207, 61, 147, 64, 193, 59, 196, 3, 11, 191, 192, 52, 79, 58, 67, 148, 143, 190, 19, 67, 53, 190, 37, 232, 241, 190, 121, 251, 34, 190, 122, 156, 19, 189, 163, 116, 229, 190, 153, 220, 54, 62, 74, 22, 98, 191, 87, 238, 194, 190, 129, 70, 42, 191, 41, 223, 219, 61, 75, 216, 29, 62, 103, 240, 132, 62, 239, 32, 73, 190, 209, 219, 122, 190, 113, 122, 124, 61, 210, 39, 153, 62, 9, 223, 97, 61, 58, 61, 2, 63, 22, 194, 119, 62, 185, 86, 77, 190, 243, 184, 155, 60, 175, 175, 50, 189, 18, 165, 178, 62, 128, 35, 202, 60, 194, 50, 23, 190, 166, 124, 141, 189, 229, 165, 10, 62, 136, 143, 231, 61, 146, 93, 139, 190, 109, 72, 142, 62, 191, 94, 160, 60, 13, 214, 169, 189, 142, 28, 136, 62, 19, 60, 154, 190, 91, 35, 89, 62, 11, 48, 189, 61, 64, 200, 64, 190, 29, 12, 250, 189, 30, 35, 205, 61, 206, 121, 29, 189, 120, 56, 215, 62, 218, 33, 28, 190, 236, 119, 250, 56, 20, 193, 223, 189, 102, 206, 130, 62, 156, 102, 92, 190, 255, 150, 242, 61, 18, 77, 70, 62, 109, 5, 169, 61, 74, 237, 38, 62, 115, 102, 62, 190, 52, 157, 18, 63, 10, 29, 74, 62, 184, 129, 145, 190, 89, 145, 162, 190, 169, 55, 59, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {92, 70, 48, 62, 219, 144, 85, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {177, 183, 176, 63, 183, 190, 147, 190, 41, 203, 20, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {254, 54, 195, 63, 92, 21, 160, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0086/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}