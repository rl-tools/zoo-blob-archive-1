// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {129, 212, 181, 61, 248, 177, 165, 62, 103, 179, 255, 62, 19, 107, 4, 63, 105, 185, 46, 190, 161, 5, 3, 63, 59, 185, 138, 62, 172, 20, 192, 190, 240, 44, 11, 63, 50, 39, 135, 62, 120, 167, 76, 62, 82, 204, 141, 188, 180, 21, 8, 190, 180, 162, 194, 190, 99, 176, 58, 190, 165, 204, 62, 190, 148, 1, 114, 189, 91, 114, 206, 60, 157, 146, 53, 190, 210, 84, 232, 61, 18, 177, 103, 62, 89, 52, 2, 191, 220, 189, 151, 60, 232, 160, 230, 190, 79, 230, 21, 190, 85, 200, 179, 62, 151, 201, 208, 189, 0, 127, 189, 62, 221, 82, 117, 61, 91, 202, 137, 190, 78, 55, 220, 190, 4, 246, 216, 190, 48, 102, 70, 62, 140, 202, 30, 62, 144, 74, 193, 61, 132, 117, 156, 190, 246, 133, 189, 62, 40, 59, 79, 190, 182, 141, 228, 62, 63, 12, 145, 62, 29, 240, 8, 63, 35, 127, 78, 190, 136, 82, 226, 62, 46, 69, 59, 189, 248, 117, 11, 191, 178, 231, 161, 190, 24, 254, 185, 62, 37, 130, 5, 63, 177, 26, 107, 62, 119, 240, 99, 190, 39, 81, 45, 61, 215, 165, 93, 62, 199, 89, 9, 191, 250, 40, 173, 190, 143, 176, 97, 62, 177, 242, 110, 188, 235, 46, 164, 190, 231, 226, 158, 59, 91, 215, 250, 190, 156, 124, 65, 60, 68, 0, 137, 190, 131, 115, 173, 62, 180, 165, 182, 189, 150, 242, 215, 188, 172, 255, 183, 62, 115, 159, 135, 190, 200, 210, 168, 189, 33, 226, 60, 62, 174, 116, 89, 190, 30, 139, 65, 62, 233, 171, 131, 61, 165, 146, 109, 190, 197, 242, 250, 190, 9, 116, 33, 189, 118, 119, 159, 62, 205, 64, 246, 189, 117, 206, 36, 190, 113, 43, 246, 62, 196, 170, 195, 61, 63, 125, 224, 190, 62, 138, 52, 62, 213, 172, 250, 62, 65, 119, 158, 62, 19, 225, 201, 189, 201, 102, 46, 61, 181, 65, 152, 190, 204, 79, 235, 190, 225, 171, 34, 62, 108, 58, 139, 62, 118, 20, 202, 60, 142, 160, 135, 62, 35, 239, 206, 190, 17, 210, 125, 62, 21, 167, 42, 188, 98, 114, 233, 62, 189, 123, 18, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 175, 19, 191, 214, 153, 35, 62, 5, 103, 9, 63, 161, 73, 100, 61, 152, 231, 135, 61, 181, 73, 221, 62, 178, 157, 98, 190, 205, 87, 177, 62, 143, 23, 223, 190, 111, 254, 27, 62, 37, 16, 47, 190, 239, 142, 179, 61, 13, 55, 32, 62, 155, 208, 229, 62, 8, 229, 77, 190, 110, 14, 158, 190, 68, 133, 70, 190, 213, 45, 4, 190, 36, 87, 209, 62, 90, 81, 5, 191, 237, 10, 1, 190, 241, 66, 207, 189, 254, 201, 11, 63, 176, 22, 112, 61, 122, 8, 246, 61, 112, 232, 215, 62, 114, 237, 91, 62, 237, 137, 131, 62, 6, 128, 135, 62, 153, 93, 16, 63, 148, 50, 106, 61, 254, 172, 56, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 122, 8, 62, 58, 230, 89, 189, 150, 16, 21, 61, 69, 22, 194, 59, 119, 166, 28, 190, 31, 134, 151, 189, 4, 180, 36, 189, 222, 84, 48, 62, 49, 161, 50, 189, 210, 181, 75, 189, 161, 45, 160, 189, 202, 167, 251, 58, 6, 210, 195, 61, 149, 131, 222, 61, 88, 215, 5, 189, 161, 97, 242, 189, 19, 154, 178, 188, 245, 19, 20, 190, 255, 175, 184, 189, 225, 247, 25, 61, 195, 29, 215, 188, 50, 30, 216, 189, 247, 49, 33, 190, 62, 179, 143, 189, 202, 159, 48, 62, 222, 111, 39, 62, 198, 172, 83, 188, 172, 16, 110, 189, 173, 143, 181, 60, 184, 112, 23, 190, 202, 200, 250, 189, 254, 69, 28, 189, 59, 163, 70, 188, 46, 93, 244, 189, 129, 76, 235, 188, 204, 185, 22, 190, 73, 157, 125, 189, 75, 111, 16, 190, 255, 249, 53, 189, 82, 84, 181, 59, 31, 30, 172, 60, 185, 139, 157, 189, 59, 99, 29, 61, 166, 56, 13, 190, 74, 5, 154, 60, 196, 190, 168, 189, 113, 96, 93, 61, 153, 250, 184, 61, 187, 225, 247, 189, 236, 36, 192, 61, 141, 210, 9, 188, 209, 140, 38, 61, 17, 215, 152, 188, 166, 122, 242, 60, 205, 95, 238, 60, 6, 3, 190, 61, 241, 163, 45, 62, 174, 32, 156, 188, 248, 128, 17, 59, 99, 116, 37, 190, 1, 206, 182, 60, 184, 105, 146, 189, 84, 228, 45, 190, 162, 224, 8, 62, 129, 97, 12, 190, 46, 7, 198, 60, 149, 77, 70, 61, 151, 229, 40, 62, 160, 249, 191, 189, 92, 148, 147, 188, 33, 19, 13, 190, 26, 176, 78, 189, 41, 214, 159, 61, 28, 222, 183, 60, 124, 12, 70, 188, 151, 107, 6, 62, 85, 141, 160, 61, 154, 183, 237, 189, 192, 216, 145, 61, 24, 43, 243, 61, 84, 180, 237, 61, 204, 81, 52, 190, 187, 40, 146, 187, 139, 62, 85, 188, 58, 70, 204, 61, 227, 250, 39, 190, 197, 219, 122, 189, 81, 245, 21, 190, 16, 151, 36, 62, 91, 176, 143, 189, 173, 121, 181, 189, 43, 190, 241, 189, 25, 0, 174, 189, 113, 205, 119, 61, 254, 11, 153, 188, 185, 13, 40, 189, 155, 245, 44, 62, 52, 44, 240, 61, 52, 16, 149, 189, 116, 33, 173, 57, 61, 24, 219, 189, 127, 114, 38, 62, 190, 65, 201, 59, 202, 163, 56, 188, 118, 71, 200, 61, 163, 247, 143, 189, 22, 137, 207, 61, 188, 176, 168, 61, 184, 202, 25, 190, 46, 13, 48, 62, 215, 183, 50, 189, 103, 146, 114, 189, 4, 76, 175, 189, 243, 247, 219, 60, 113, 7, 37, 62, 1, 127, 130, 61, 252, 106, 13, 60, 102, 232, 229, 61, 119, 63, 42, 190, 149, 27, 37, 190, 63, 182, 114, 61, 164, 247, 64, 189, 209, 33, 38, 62, 111, 208, 11, 62, 113, 222, 7, 190, 170, 216, 42, 190, 203, 137, 171, 189, 172, 108, 232, 61, 202, 27, 187, 188, 45, 175, 164, 61, 179, 144, 21, 190, 40, 12, 217, 189, 226, 4, 248, 187, 183, 118, 139, 61, 105, 104, 128, 61, 29, 209, 33, 190, 208, 105, 170, 188, 110, 96, 28, 61, 171, 193, 49, 189, 200, 159, 41, 187, 89, 111, 99, 188, 8, 13, 29, 61, 105, 244, 215, 189, 190, 145, 248, 61, 119, 26, 222, 189, 236, 125, 8, 190, 95, 254, 13, 190, 73, 163, 143, 61, 40, 156, 190, 60, 89, 15, 4, 61, 233, 227, 244, 189, 94, 66, 215, 189, 165, 15, 48, 62, 150, 177, 233, 61, 163, 106, 19, 62, 4, 188, 34, 190, 143, 24, 249, 61, 47, 67, 238, 188, 6, 243, 11, 62, 139, 96, 21, 189, 1, 78, 130, 61, 47, 97, 23, 190, 212, 89, 42, 62, 32, 202, 170, 61, 214, 124, 217, 61, 136, 175, 172, 61, 144, 3, 226, 61, 155, 232, 84, 61, 60, 214, 10, 188, 12, 90, 120, 61, 72, 45, 233, 61, 172, 188, 20, 62, 2, 170, 88, 189, 136, 229, 30, 62, 186, 5, 50, 62, 118, 159, 6, 62, 251, 123, 6, 190, 53, 90, 140, 189, 25, 155, 141, 61, 69, 158, 17, 189, 147, 63, 193, 187, 118, 207, 253, 189, 217, 201, 251, 189, 242, 119, 22, 190, 41, 63, 169, 189, 14, 239, 48, 190, 124, 118, 108, 61, 85, 123, 247, 61, 36, 219, 34, 62, 37, 125, 217, 61, 254, 11, 193, 61, 181, 59, 210, 188, 172, 48, 8, 189, 28, 84, 18, 62, 6, 140, 117, 60, 46, 18, 32, 62, 177, 18, 131, 59, 112, 127, 90, 61, 21, 238, 98, 189, 82, 119, 213, 61, 90, 9, 29, 189, 222, 56, 40, 62, 127, 148, 21, 62, 236, 113, 149, 187, 115, 0, 142, 61, 183, 47, 1, 61, 249, 204, 225, 61, 11, 131, 142, 61, 203, 135, 201, 188, 204, 30, 39, 190, 213, 247, 189, 189, 107, 101, 40, 190, 9, 17, 50, 190, 88, 199, 24, 190, 243, 40, 45, 190, 21, 88, 1, 62, 115, 123, 28, 190, 24, 215, 19, 190, 13, 220, 157, 189, 208, 59, 125, 189, 51, 42, 228, 59, 108, 255, 227, 58, 10, 212, 223, 189, 221, 15, 22, 190, 122, 126, 92, 188, 207, 58, 179, 61, 155, 104, 152, 61, 4, 49, 254, 189, 183, 222, 139, 189, 19, 15, 14, 62, 195, 56, 117, 189, 82, 212, 200, 58, 167, 139, 108, 189, 109, 29, 218, 189, 27, 172, 145, 61, 231, 58, 208, 61, 63, 140, 0, 62, 227, 76, 15, 190, 109, 118, 39, 190, 222, 216, 92, 189, 131, 100, 29, 189, 105, 86, 240, 61, 68, 49, 9, 190, 222, 165, 247, 60, 192, 1, 222, 60, 118, 155, 205, 61, 81, 46, 44, 62, 172, 216, 139, 61, 35, 186, 170, 60, 187, 7, 208, 189, 250, 9, 206, 61, 201, 131, 51, 62, 23, 126, 250, 189, 231, 133, 242, 189, 102, 183, 253, 189, 152, 116, 112, 189, 232, 113, 132, 189, 55, 185, 188, 189, 208, 121, 25, 62, 237, 25, 100, 189, 162, 102, 216, 189, 75, 149, 155, 187, 123, 235, 210, 61, 179, 41, 153, 189, 213, 66, 99, 189, 254, 225, 35, 62, 83, 254, 68, 188, 61, 201, 28, 62, 13, 202, 47, 190, 111, 196, 214, 61, 172, 70, 10, 61, 203, 34, 141, 189, 44, 184, 67, 59, 88, 250, 60, 188, 242, 143, 224, 189, 230, 163, 35, 190, 0, 228, 212, 61, 233, 157, 40, 190, 215, 28, 191, 61, 206, 224, 55, 60, 149, 15, 48, 190, 237, 198, 225, 189, 64, 58, 254, 61, 177, 135, 46, 60, 243, 69, 13, 62, 232, 164, 1, 62, 153, 207, 52, 62, 138, 46, 126, 189, 189, 230, 146, 189, 184, 78, 133, 61, 127, 24, 204, 61, 180, 194, 12, 62, 180, 240, 31, 190, 214, 38, 170, 60, 30, 81, 7, 62, 26, 178, 97, 189, 222, 178, 9, 190, 83, 4, 23, 190, 96, 50, 224, 61, 68, 172, 58, 188, 75, 173, 8, 62, 74, 193, 201, 187, 45, 124, 223, 61, 152, 43, 34, 62, 76, 238, 40, 62, 155, 225, 226, 61, 226, 75, 202, 61, 197, 163, 7, 190, 119, 249, 114, 61, 249, 176, 249, 188, 115, 249, 190, 60, 26, 92, 149, 61, 192, 242, 44, 189, 107, 63, 147, 189, 194, 61, 79, 61, 221, 216, 145, 61, 1, 182, 250, 61, 197, 167, 18, 62, 117, 243, 153, 61, 159, 44, 35, 62, 48, 16, 205, 189, 23, 179, 92, 61, 83, 67, 15, 62, 239, 255, 195, 189, 90, 216, 41, 190, 56, 210, 175, 61, 25, 11, 6, 61, 193, 248, 230, 189, 212, 202, 162, 189, 177, 229, 237, 61, 32, 138, 253, 187, 205, 18, 133, 61, 148, 11, 91, 189, 36, 241, 141, 189, 143, 74, 216, 61, 238, 107, 41, 62, 170, 44, 10, 61, 104, 165, 7, 190, 4, 54, 59, 189, 170, 62, 192, 61, 145, 179, 224, 61, 6, 90, 230, 189, 128, 74, 114, 61, 226, 66, 211, 187, 188, 160, 46, 190, 2, 172, 153, 61, 207, 243, 34, 188, 49, 235, 145, 61, 9, 227, 51, 59, 74, 211, 46, 62, 92, 76, 128, 188, 243, 53, 52, 62, 128, 211, 9, 61, 145, 221, 22, 190, 73, 27, 245, 61, 77, 136, 230, 61, 184, 162, 37, 60, 113, 214, 22, 190, 208, 234, 5, 190, 232, 216, 61, 61, 180, 82, 239, 61, 65, 67, 212, 60, 130, 55, 188, 189, 129, 165, 133, 61, 29, 16, 90, 61, 93, 112, 147, 189, 35, 115, 213, 189, 26, 162, 48, 62, 193, 251, 42, 189, 212, 238, 16, 190, 129, 3, 183, 189, 190, 29, 116, 188, 146, 176, 210, 189, 94, 23, 34, 190, 86, 184, 145, 61, 168, 207, 15, 62, 211, 93, 128, 61, 157, 35, 19, 190, 61, 75, 238, 61, 82, 192, 133, 61, 79, 119, 23, 190, 49, 21, 38, 62, 139, 197, 12, 61, 254, 30, 168, 189, 194, 249, 1, 62, 252, 138, 35, 189, 220, 176, 136, 188, 196, 90, 147, 189, 70, 130, 243, 189, 163, 169, 168, 189, 215, 191, 199, 60, 93, 115, 54, 61, 112, 12, 48, 62, 152, 103, 186, 189, 217, 122, 179, 61, 94, 44, 194, 59, 188, 178, 222, 189, 151, 149, 132, 189, 145, 131, 51, 190, 249, 131, 11, 62, 213, 83, 174, 189, 106, 125, 24, 190, 108, 57, 208, 188, 59, 48, 221, 189, 16, 191, 72, 189, 12, 102, 128, 61, 247, 79, 245, 61, 202, 110, 8, 61, 170, 67, 21, 62, 250, 221, 238, 61, 230, 60, 49, 62, 248, 23, 136, 188, 40, 196, 189, 61, 99, 52, 159, 189, 58, 77, 15, 190, 145, 13, 44, 62, 60, 99, 22, 190, 189, 11, 45, 190, 236, 82, 250, 189, 85, 113, 24, 190, 153, 83, 44, 61, 67, 71, 135, 187, 240, 34, 182, 189, 13, 52, 231, 61, 86, 122, 16, 190, 247, 109, 57, 189, 213, 212, 170, 188, 44, 40, 230, 189, 66, 67, 226, 189, 91, 142, 226, 60, 49, 109, 229, 189, 214, 241, 1, 190, 71, 209, 34, 190, 154, 185, 48, 62, 115, 151, 79, 61, 5, 201, 193, 61, 218, 127, 194, 60, 242, 36, 245, 189, 97, 128, 140, 189, 235, 72, 192, 189, 204, 25, 174, 189, 191, 233, 101, 189, 149, 53, 236, 189, 137, 59, 146, 61, 90, 255, 211, 61, 164, 51, 143, 189, 176, 75, 167, 60, 189, 196, 144, 189, 99, 159, 53, 189, 198, 179, 50, 61, 179, 249, 197, 187, 244, 187, 150, 189, 163, 17, 157, 61, 227, 197, 128, 189, 0, 217, 35, 188, 217, 73, 15, 190, 106, 89, 255, 60, 32, 175, 168, 189, 128, 78, 27, 190, 36, 10, 112, 61, 247, 131, 84, 189, 146, 173, 21, 190, 252, 103, 40, 62, 71, 63, 118, 188, 236, 175, 43, 190, 228, 215, 196, 189, 195, 224, 145, 188, 247, 108, 47, 62, 150, 29, 128, 189, 51, 168, 167, 61, 31, 211, 20, 190, 94, 139, 227, 60, 190, 113, 23, 62, 35, 90, 41, 190, 167, 207, 60, 61, 26, 181, 220, 61, 114, 64, 17, 188, 66, 134, 31, 190, 22, 7, 3, 62, 17, 109, 198, 189, 178, 124, 225, 189, 134, 82, 237, 60, 63, 206, 101, 61, 248, 254, 229, 60, 162, 175, 0, 190, 186, 241, 243, 187, 89, 120, 22, 61, 61, 89, 236, 61, 41, 28, 51, 60, 181, 99, 232, 189, 161, 181, 65, 189, 219, 195, 95, 189, 106, 172, 25, 60, 62, 253, 51, 189, 188, 116, 232, 60, 253, 23, 233, 188, 151, 140, 9, 62, 223, 99, 44, 62, 157, 103, 11, 189, 14, 164, 10, 61, 65, 198, 95, 60, 242, 190, 195, 61, 64, 61, 25, 190, 192, 54, 75, 61, 91, 212, 38, 62, 96, 245, 171, 189, 123, 224, 28, 190, 220, 0, 196, 61, 96, 144, 33, 190, 112, 56, 231, 189, 180, 17, 180, 57, 248, 181, 236, 61, 198, 123, 9, 190, 64, 41, 26, 190, 40, 241, 248, 61, 162, 25, 250, 61, 18, 208, 163, 61, 37, 225, 1, 62, 251, 37, 25, 62, 150, 87, 2, 190, 167, 163, 15, 61, 105, 131, 143, 60, 133, 117, 149, 189, 103, 78, 134, 189, 127, 40, 40, 190, 101, 202, 32, 190, 194, 8, 23, 190, 230, 241, 50, 190, 116, 62, 144, 189, 216, 146, 66, 189, 122, 132, 132, 189, 216, 32, 163, 60, 40, 151, 10, 190, 248, 200, 133, 61, 149, 149, 4, 62, 175, 227, 92, 187, 160, 206, 162, 189, 193, 17, 175, 187, 22, 45, 1, 60, 104, 234, 145, 189, 149, 226, 181, 60, 26, 49, 39, 62, 247, 95, 23, 190, 227, 36, 223, 189, 78, 161, 108, 60, 62, 83, 27, 190, 65, 104, 221, 61, 234, 219, 157, 61, 214, 103, 107, 61, 198, 177, 206, 60, 88, 235, 26, 62, 118, 167, 85, 189, 27, 139, 6, 62, 103, 1, 183, 188, 181, 166, 85, 60, 104, 81, 19, 189, 157, 142, 185, 61, 167, 47, 229, 60, 96, 7, 161, 188, 98, 63, 29, 190, 128, 57, 176, 60, 164, 215, 11, 190, 111, 128, 197, 60, 215, 228, 239, 60, 246, 31, 234, 60, 169, 170, 15, 190, 126, 100, 41, 190, 120, 44, 183, 61, 201, 221, 175, 189, 254, 38, 76, 189, 36, 145, 254, 189, 241, 118, 4, 61, 139, 195, 1, 62, 176, 211, 160, 60, 240, 31, 190, 61, 77, 2, 19, 61, 106, 79, 112, 189, 200, 254, 19, 59, 236, 69, 253, 61, 83, 73, 50, 189, 154, 30, 100, 189, 174, 22, 49, 62, 35, 90, 2, 60, 218, 1, 152, 61, 84, 165, 240, 61, 12, 137, 161, 189, 67, 36, 51, 190, 30, 13, 240, 189, 174, 203, 13, 60, 239, 105, 21, 62, 108, 153, 195, 61, 81, 2, 125, 61, 143, 85, 7, 62, 175, 87, 253, 189, 120, 115, 48, 190, 251, 6, 26, 190, 21, 181, 31, 190, 164, 81, 59, 189, 98, 65, 156, 59, 126, 168, 228, 189, 195, 89, 44, 62, 203, 241, 205, 60, 9, 84, 219, 60, 236, 177, 187, 189, 109, 231, 214, 61, 30, 205, 193, 61, 35, 174, 30, 62, 212, 159, 33, 62, 144, 66, 102, 189, 10, 63, 255, 189, 119, 111, 234, 61, 87, 72, 8, 190, 192, 1, 235, 61, 73, 186, 35, 189, 173, 124, 138, 189, 41, 150, 50, 62, 203, 29, 30, 190, 31, 90, 196, 189, 34, 192, 255, 61, 23, 245, 9, 62, 68, 10, 26, 62, 86, 164, 91, 60, 51, 247, 202, 61, 192, 119, 102, 61, 224, 169, 170, 189, 67, 23, 8, 190, 78, 255, 161, 61, 222, 104, 157, 61, 49, 40, 195, 189, 187, 72, 5, 61, 108, 162, 60, 189, 31, 49, 184, 189, 63, 32, 13, 190, 182, 105, 45, 62, 201, 204, 11, 62, 29, 210, 88, 188, 192, 120, 9, 189, 7, 2, 42, 190, 116, 234, 227, 189, 141, 99, 212, 189, 87, 122, 187, 60, 131, 52, 242, 188, 192, 112, 50, 190, 182, 228, 159, 61, 203, 154, 10, 62, 153, 210, 43, 62, 221, 248, 30, 190, 81, 73, 87, 58, 194, 157, 102, 60, 108, 208, 48, 61, 221, 73, 203, 60, 37, 187, 243, 189, 13, 238, 12, 190, 124, 169, 23, 190, 246, 76, 2, 62, 83, 136, 18, 188, 173, 55, 99, 189, 233, 216, 111, 188, 129, 61, 9, 61, 245, 192, 156, 189, 101, 177, 50, 62, 134, 84, 52, 190, 202, 135, 50, 62, 4, 159, 119, 188, 111, 211, 38, 190, 69, 89, 18, 62, 38, 190, 2, 188, 104, 221, 248, 189, 145, 117, 33, 62, 202, 216, 37, 62, 202, 189, 79, 61, 251, 151, 3, 59, 27, 201, 41, 62, 98, 48, 42, 187, 206, 99, 34, 190, 244, 13, 246, 61, 12, 189, 232, 61, 41, 230, 169, 61, 148, 190, 5, 190, 83, 157, 92, 61, 133, 73, 20, 62, 183, 85, 57, 188, 72, 116, 188, 61, 107, 49, 236, 61, 106, 74, 24, 62, 109, 140, 127, 189, 179, 85, 94, 61, 14, 124, 7, 62, 124, 153, 5, 190, 254, 96, 47, 189, 167, 135, 21, 190, 91, 249, 246, 61, 211, 125, 242, 189, 26, 80, 10, 62, 210, 123, 204, 188, 92, 42, 17, 62, 17, 251, 139, 60, 119, 232, 212, 61, 114, 155, 178, 188, 120, 81, 31, 190, 53, 160, 189, 188, 117, 146, 9, 190, 77, 198, 38, 62, 129, 224, 154, 61, 104, 56, 126, 61, 217, 58, 28, 62, 187, 211, 221, 189, 155, 209, 84, 60, 252, 208, 46, 62, 175, 72, 39, 190, 144, 227, 77, 61, 196, 208, 50, 190, 150, 187, 137, 189, 130, 33, 171, 57, 153, 48, 47, 190, 136, 76, 51, 61, 121, 247, 3, 189, 121, 62, 24, 62, 146, 160, 247, 189, 254, 139, 123, 61, 48, 67, 18, 62, 50, 41, 22, 188, 138, 90, 228, 61, 11, 19, 37, 62, 225, 155, 205, 61, 160, 42, 48, 190, 179, 152, 156, 189, 21, 86, 80, 61, 241, 35, 2, 189, 55, 20, 11, 190, 59, 158, 50, 190, 0, 180, 24, 188, 161, 153, 175, 188, 45, 216, 99, 59, 228, 133, 195, 61, 171, 4, 18, 62, 163, 10, 81, 188, 224, 117, 44, 62, 83, 229, 116, 61, 54, 216, 153, 61, 161, 34, 227, 187, 0, 3, 49, 62, 70, 247, 35, 62, 59, 198, 125, 189, 55, 183, 184, 189, 251, 139, 35, 62, 187, 77, 5, 62, 186, 223, 10, 62, 87, 174, 16, 188, 205, 235, 155, 61, 140, 236, 129, 61, 91, 187, 184, 189, 149, 229, 220, 60, 58, 160, 99, 189, 212, 8, 158, 61, 39, 30, 170, 61, 214, 16, 212, 189, 10, 77, 12, 190, 109, 185, 159, 189, 209, 0, 38, 190, 157, 161, 17, 190, 237, 118, 236, 61, 46, 187, 200, 189, 62, 100, 212, 189, 88, 201, 144, 60, 183, 19, 132, 61, 253, 19, 203, 189, 185, 61, 167, 61, 75, 165, 17, 62, 36, 201, 246, 61, 43, 159, 212, 61, 78, 255, 211, 61, 44, 201, 145, 189, 197, 167, 221, 60, 204, 179, 176, 61, 113, 119, 36, 190, 194, 218, 194, 188, 43, 77, 201, 61, 255, 243, 41, 190, 196, 47, 166, 61, 59, 186, 37, 62, 78, 5, 16, 190, 199, 60, 9, 61, 174, 195, 180, 189, 145, 61, 115, 61, 181, 148, 71, 58, 146, 101, 139, 61, 113, 174, 8, 190, 19, 52, 138, 189, 250, 175, 220, 60, 131, 208, 6, 190, 10, 217, 44, 62, 117, 94, 92, 61, 148, 95, 31, 190, 183, 58, 8, 62, 184, 205, 148, 61, 77, 53, 40, 188, 175, 244, 138, 188, 37, 77, 251, 189, 186, 25, 29, 189, 76, 141, 152, 189, 26, 127, 11, 60, 23, 114, 186, 189, 87, 150, 214, 61, 68, 149, 244, 188, 77, 3, 211, 189, 169, 39, 148, 60, 133, 63, 196, 189, 88, 221, 169, 189, 217, 148, 116, 61, 178, 193, 29, 190, 100, 143, 27, 62, 131, 58, 16, 190, 170, 101, 33, 62, 125, 91, 26, 190, 160, 100, 169, 61, 116, 220, 36, 189, 199, 205, 250, 189, 60, 56, 31, 62, 212, 77, 49, 62, 111, 208, 4, 60, 249, 49, 0, 62, 161, 217, 169, 61, 245, 251, 50, 62, 155, 208, 1, 60, 253, 117, 252, 189, 66, 102, 8, 188, 120, 137, 176, 61, 18, 228, 211, 189, 99, 230, 237, 189, 171, 47, 107, 188, 169, 28, 10, 190, 64, 100, 241, 61, 160, 230, 253, 60, 189, 4, 3, 62, 187, 125, 217, 61, 17, 209, 230, 61, 138, 31, 7, 190, 88, 8, 84, 61, 169, 60, 138, 189, 111, 164, 215, 61, 35, 194, 18, 62, 60, 165, 254, 186, 91, 166, 0, 190, 136, 39, 245, 189, 246, 38, 27, 190, 119, 103, 243, 61, 52, 153, 143, 189, 236, 32, 91, 189, 156, 24, 109, 189, 128, 170, 223, 61, 26, 242, 254, 189, 201, 29, 217, 61, 74, 123, 9, 190, 179, 164, 244, 189, 146, 25, 29, 62, 225, 175, 238, 60, 66, 62, 225, 60, 46, 235, 185, 60, 239, 8, 64, 189, 253, 250, 202, 61, 139, 74, 52, 190, 240, 149, 219, 61, 101, 143, 180, 188, 6, 87, 157, 61, 1, 82, 36, 61, 192, 170, 201, 60, 42, 1, 184, 61, 66, 125, 114, 60, 150, 55, 27, 190, 251, 202, 232, 61, 176, 74, 52, 62, 107, 68, 200, 189, 129, 216, 43, 62, 129, 134, 5, 190, 64, 110, 232, 61, 160, 101, 2, 61, 213, 36, 3, 62, 91, 48, 47, 61, 226, 147, 150, 61, 63, 123, 89, 61, 142, 232, 134, 60, 117, 226, 73, 189, 94, 47, 63, 188, 205, 59, 207, 61, 211, 4, 163, 61, 234, 147, 203, 188, 20, 178, 247, 189, 23, 225, 21, 190, 191, 225, 48, 61, 121, 138, 80, 189, 240, 90, 206, 189, 117, 52, 108, 61, 154, 173, 251, 61, 49, 225, 82, 189, 193, 5, 27, 190, 219, 33, 6, 62, 238, 165, 88, 189, 122, 57, 8, 190, 163, 209, 227, 59, 231, 6, 52, 190, 139, 37, 28, 190, 82, 51, 118, 61, 145, 103, 0, 62, 1, 153, 138, 188, 68, 136, 194, 189, 133, 118, 19, 190, 151, 40, 213, 61, 54, 226, 178, 189, 175, 93, 128, 189, 201, 1, 24, 62, 156, 98, 251, 189, 251, 165, 158, 188, 234, 81, 9, 62, 164, 104, 110, 189, 212, 71, 216, 60, 100, 211, 158, 60, 244, 96, 253, 189, 127, 87, 237, 189, 30, 61, 245, 188, 92, 93, 11, 189, 192, 254, 30, 190, 104, 239, 188, 188, 79, 190, 6, 190, 31, 168, 160, 189, 84, 88, 18, 189, 197, 129, 35, 190, 19, 214, 46, 62, 119, 162, 131, 189, 21, 121, 35, 190, 235, 205, 169, 60, 164, 129, 1, 62, 204, 98, 23, 61, 144, 244, 128, 188, 174, 51, 228, 189, 21, 184, 195, 60, 87, 134, 189, 189, 147, 173, 124, 189, 178, 121, 41, 62, 184, 145, 19, 190, 197, 16, 3, 62, 125, 124, 46, 62, 85, 14, 155, 61, 122, 139, 15, 61, 227, 255, 134, 188, 40, 215, 12, 190, 244, 67, 193, 189, 181, 0, 53, 186, 112, 191, 127, 61, 154, 134, 102, 61, 219, 33, 30, 62, 90, 252, 69, 59, 168, 209, 12, 190, 35, 132, 195, 189, 85, 37, 177, 189, 208, 225, 103, 61, 255, 42, 129, 61, 79, 56, 142, 61, 11, 209, 94, 61, 139, 133, 68, 188, 193, 110, 134, 189, 1, 239, 15, 190, 159, 79, 73, 61, 38, 53, 8, 62, 43, 196, 141, 61, 73, 104, 8, 190, 148, 168, 41, 190, 251, 226, 7, 189, 102, 56, 213, 188, 226, 235, 214, 189, 247, 155, 237, 61, 240, 227, 211, 61, 254, 81, 229, 61, 20, 214, 27, 189, 199, 3, 15, 62, 148, 173, 148, 61, 2, 41, 165, 60, 28, 194, 19, 62, 220, 92, 21, 62, 228, 15, 19, 189, 249, 250, 163, 61, 94, 180, 179, 61, 102, 148, 167, 61, 50, 199, 148, 189, 242, 86, 9, 190, 154, 204, 182, 61, 226, 10, 187, 60, 242, 236, 12, 62, 211, 36, 158, 61, 93, 1, 164, 189, 249, 223, 121, 61, 123, 141, 153, 185, 200, 34, 13, 62, 8, 82, 226, 187, 103, 11, 238, 189, 169, 142, 15, 190, 118, 89, 13, 190, 5, 50, 21, 61, 181, 40, 41, 190, 24, 241, 8, 61, 109, 119, 231, 61, 83, 238, 209, 189, 120, 158, 110, 61, 140, 114, 4, 62, 242, 133, 3, 190, 28, 155, 194, 61, 189, 149, 39, 61, 94, 41, 116, 188, 101, 15, 25, 190, 106, 16, 37, 62, 162, 75, 139, 189, 198, 56, 196, 189, 135, 125, 8, 62, 73, 88, 232, 61, 113, 147, 13, 61, 61, 255, 20, 61, 146, 166, 166, 61, 75, 207, 166, 61, 109, 68, 225, 188, 61, 162, 147, 189, 241, 145, 132, 61, 97, 119, 110, 61, 31, 77, 19, 190, 142, 177, 143, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 205, 36, 190, 43, 219, 232, 61, 247, 142, 211, 61, 34, 237, 15, 190, 236, 79, 156, 188, 59, 196, 1, 62, 161, 255, 85, 60, 189, 49, 2, 190, 99, 162, 232, 61, 149, 117, 180, 59, 69, 56, 221, 60, 93, 193, 88, 188, 68, 130, 2, 190, 229, 163, 183, 61, 51, 85, 224, 189, 218, 157, 153, 61, 46, 208, 30, 62, 218, 2, 41, 62, 156, 249, 99, 61, 216, 4, 48, 61, 218, 196, 34, 61, 86, 0, 36, 62, 248, 41, 163, 188, 14, 108, 3, 190, 30, 161, 188, 188, 91, 219, 200, 189, 75, 57, 16, 62, 18, 160, 164, 61, 159, 136, 1, 62, 132, 157, 38, 62, 90, 65, 143, 189, 40, 156, 224, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 2, 24, 60, 32, 152, 137, 60, 31, 91, 33, 62, 225, 155, 244, 189, 243, 72, 169, 61, 213, 22, 8, 62, 32, 45, 219, 189, 228, 1, 29, 190, 134, 96, 153, 61, 244, 141, 57, 61, 74, 210, 49, 190, 39, 196, 125, 188, 209, 63, 210, 189, 101, 46, 162, 189, 21, 69, 48, 190, 213, 233, 160, 187, 199, 171, 31, 190, 45, 225, 31, 190, 31, 218, 53, 189, 43, 205, 38, 62, 82, 110, 38, 62, 198, 125, 188, 61, 181, 236, 134, 61, 63, 167, 131, 189, 39, 234, 38, 61, 35, 152, 129, 61, 90, 29, 5, 61, 21, 74, 13, 189, 37, 185, 161, 61, 15, 153, 80, 189, 187, 86, 156, 60, 221, 43, 158, 61, 186, 53, 251, 61, 84, 35, 169, 187, 232, 10, 7, 190, 51, 6, 34, 189, 166, 136, 24, 190, 173, 72, 30, 189, 204, 176, 135, 187, 1, 158, 89, 61, 71, 117, 8, 190, 120, 89, 125, 61, 123, 96, 235, 61, 206, 40, 44, 62, 245, 47, 140, 61, 162, 7, 26, 188, 52, 153, 2, 61, 201, 9, 217, 189, 48, 56, 140, 61, 137, 28, 203, 189, 227, 21, 37, 62, 250, 205, 144, 189, 127, 54, 86, 189, 2, 248, 34, 189, 144, 237, 10, 190, 87, 36, 47, 190, 163, 4, 251, 61, 10, 132, 40, 190, 253, 89, 129, 188, 190, 170, 11, 62, 75, 13, 152, 189, 208, 242, 5, 190, 157, 168, 231, 189, 197, 52, 118, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {69, 5, 2, 190, 105, 191, 20, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {80, 175, 161, 191, 162, 9, 34, 61, 236, 9, 92, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {211, 97, 132, 189, 27, 160, 53, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0049/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}