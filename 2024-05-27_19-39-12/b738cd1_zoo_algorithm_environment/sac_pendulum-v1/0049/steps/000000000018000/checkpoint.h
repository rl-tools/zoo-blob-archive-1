// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 237, 95, 63, 225, 239, 187, 62, 47, 44, 191, 62, 224, 97, 58, 63, 36, 91, 153, 61, 168, 55, 21, 63, 110, 84, 48, 62, 93, 24, 116, 63, 144, 178, 249, 62, 82, 205, 215, 62, 205, 31, 166, 62, 81, 72, 33, 188, 186, 173, 171, 190, 180, 233, 138, 191, 167, 101, 217, 189, 173, 41, 105, 190, 119, 118, 149, 60, 10, 82, 180, 187, 174, 186, 204, 62, 111, 253, 74, 63, 252, 198, 84, 61, 212, 184, 28, 191, 144, 159, 185, 191, 90, 201, 181, 190, 30, 101, 158, 190, 129, 250, 185, 62, 209, 54, 145, 190, 201, 81, 5, 63, 98, 239, 8, 191, 67, 195, 36, 190, 184, 184, 33, 191, 144, 75, 190, 62, 193, 226, 6, 63, 192, 118, 56, 189, 20, 129, 54, 189, 199, 107, 233, 189, 128, 38, 253, 62, 204, 183, 162, 61, 9, 198, 250, 62, 0, 155, 253, 62, 200, 124, 15, 63, 214, 197, 250, 190, 73, 178, 55, 63, 128, 19, 28, 191, 223, 219, 24, 191, 29, 228, 41, 63, 29, 42, 23, 63, 36, 188, 190, 62, 12, 16, 31, 188, 174, 97, 41, 191, 200, 208, 53, 62, 46, 167, 96, 63, 18, 174, 149, 191, 64, 136, 145, 190, 244, 119, 6, 63, 252, 53, 31, 191, 123, 127, 137, 190, 90, 120, 73, 190, 196, 151, 136, 191, 114, 14, 248, 61, 185, 18, 5, 190, 83, 160, 229, 189, 179, 194, 178, 190, 114, 243, 22, 190, 122, 109, 7, 190, 46, 147, 3, 191, 51, 236, 115, 190, 250, 146, 139, 189, 244, 53, 108, 190, 214, 205, 43, 190, 146, 105, 135, 191, 172, 237, 217, 190, 212, 100, 146, 191, 150, 117, 58, 62, 7, 88, 10, 61, 180, 213, 53, 190, 242, 197, 156, 190, 152, 185, 23, 63, 214, 1, 12, 62, 137, 175, 88, 191, 171, 118, 45, 62, 186, 233, 22, 63, 77, 228, 88, 62, 204, 48, 231, 189, 74, 173, 221, 62, 108, 245, 154, 191, 191, 142, 172, 190, 228, 234, 118, 62, 146, 220, 192, 62, 213, 167, 196, 60, 178, 219, 28, 190, 36, 43, 124, 190, 231, 140, 8, 63, 137, 98, 5, 63, 65, 143, 100, 63, 147, 36, 10, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 119, 151, 191, 249, 143, 222, 60, 54, 184, 181, 62, 234, 19, 80, 60, 110, 153, 161, 62, 14, 166, 37, 63, 210, 22, 243, 190, 185, 208, 34, 189, 71, 50, 31, 191, 180, 23, 151, 62, 85, 62, 111, 190, 231, 31, 161, 62, 43, 56, 32, 62, 5, 27, 66, 62, 233, 111, 23, 191, 220, 80, 109, 191, 28, 46, 5, 62, 167, 14, 41, 191, 96, 124, 40, 62, 244, 184, 100, 190, 95, 22, 121, 190, 139, 251, 187, 190, 2, 209, 249, 62, 39, 54, 2, 190, 57, 63, 141, 188, 29, 117, 9, 63, 76, 240, 162, 62, 98, 210, 159, 62, 63, 217, 36, 61, 107, 73, 244, 62, 48, 141, 237, 61, 218, 199, 173, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 4, 52, 62, 206, 156, 11, 189, 216, 81, 236, 60, 219, 195, 169, 61, 155, 110, 99, 190, 197, 234, 253, 189, 66, 6, 144, 188, 34, 179, 39, 62, 94, 78, 51, 189, 199, 12, 163, 189, 194, 88, 8, 190, 245, 194, 195, 188, 62, 254, 224, 61, 189, 32, 60, 62, 88, 215, 5, 189, 236, 123, 193, 189, 160, 147, 112, 189, 245, 19, 20, 190, 113, 9, 252, 189, 228, 115, 8, 189, 148, 118, 248, 188, 104, 195, 215, 189, 31, 40, 70, 190, 110, 115, 155, 189, 127, 86, 21, 62, 224, 239, 15, 62, 36, 76, 164, 189, 159, 158, 63, 61, 173, 143, 181, 60, 120, 60, 13, 190, 221, 111, 44, 190, 175, 2, 119, 188, 234, 16, 66, 190, 150, 168, 184, 188, 127, 254, 110, 191, 96, 165, 183, 190, 98, 55, 249, 62, 12, 10, 78, 189, 76, 252, 20, 188, 235, 208, 216, 62, 147, 107, 52, 191, 160, 15, 78, 191, 172, 110, 111, 191, 196, 89, 104, 191, 94, 26, 106, 62, 226, 155, 44, 190, 53, 32, 81, 190, 161, 39, 162, 189, 194, 174, 53, 63, 99, 206, 22, 191, 76, 64, 1, 191, 16, 75, 75, 63, 209, 124, 194, 190, 4, 243, 136, 190, 211, 96, 153, 61, 50, 138, 108, 189, 244, 114, 188, 61, 170, 80, 85, 60, 114, 250, 35, 62, 12, 11, 26, 191, 175, 111, 136, 190, 67, 169, 13, 191, 206, 130, 11, 191, 158, 250, 14, 189, 147, 77, 41, 190, 105, 23, 67, 189, 194, 228, 212, 61, 45, 51, 106, 190, 133, 150, 50, 190, 81, 117, 120, 62, 131, 27, 185, 190, 134, 68, 250, 62, 60, 1, 168, 62, 70, 47, 254, 190, 242, 250, 237, 61, 72, 215, 104, 61, 226, 174, 111, 188, 31, 37, 89, 191, 125, 216, 132, 61, 84, 138, 75, 62, 148, 194, 160, 190, 35, 134, 50, 190, 231, 9, 227, 189, 117, 10, 52, 191, 31, 144, 84, 190, 238, 42, 179, 191, 16, 124, 163, 62, 66, 207, 221, 191, 176, 207, 8, 63, 210, 78, 116, 61, 0, 70, 50, 190, 189, 112, 170, 191, 228, 33, 205, 190, 191, 142, 135, 62, 232, 86, 74, 60, 58, 250, 72, 61, 231, 203, 27, 63, 164, 228, 154, 62, 180, 29, 155, 189, 210, 177, 44, 62, 42, 221, 183, 190, 193, 82, 247, 61, 190, 149, 165, 62, 22, 182, 81, 190, 28, 216, 86, 190, 217, 39, 206, 189, 8, 26, 161, 189, 119, 102, 138, 61, 254, 130, 233, 59, 190, 22, 184, 62, 16, 222, 193, 190, 36, 79, 123, 62, 169, 110, 151, 189, 239, 25, 139, 191, 115, 82, 27, 62, 228, 245, 6, 62, 190, 20, 201, 61, 179, 136, 251, 61, 221, 127, 58, 189, 186, 148, 148, 190, 251, 143, 201, 189, 106, 157, 183, 189, 109, 185, 46, 62, 177, 154, 138, 62, 33, 24, 208, 190, 185, 217, 91, 60, 33, 50, 45, 190, 244, 223, 141, 62, 127, 115, 248, 190, 112, 16, 248, 61, 92, 128, 41, 190, 210, 197, 167, 189, 253, 57, 153, 62, 116, 50, 121, 62, 102, 106, 192, 61, 105, 5, 22, 191, 140, 4, 8, 191, 239, 159, 49, 62, 109, 195, 69, 190, 82, 136, 88, 61, 195, 179, 9, 61, 197, 150, 99, 60, 19, 5, 3, 61, 133, 225, 141, 190, 178, 122, 39, 190, 224, 60, 164, 190, 138, 131, 183, 61, 13, 107, 125, 60, 128, 75, 78, 191, 22, 97, 225, 190, 182, 201, 196, 188, 45, 109, 42, 191, 200, 11, 137, 60, 144, 159, 7, 62, 73, 208, 170, 62, 69, 222, 226, 189, 178, 104, 19, 62, 226, 197, 12, 62, 113, 225, 91, 62, 129, 180, 145, 190, 213, 60, 82, 189, 249, 192, 183, 190, 239, 161, 105, 61, 39, 124, 48, 62, 88, 238, 81, 190, 144, 21, 102, 59, 99, 196, 54, 191, 69, 142, 117, 189, 173, 210, 247, 61, 175, 217, 52, 62, 97, 152, 79, 189, 94, 122, 87, 62, 143, 152, 135, 190, 53, 75, 51, 62, 87, 176, 222, 62, 208, 79, 123, 61, 198, 204, 180, 191, 114, 142, 249, 62, 92, 29, 74, 62, 24, 2, 167, 191, 87, 234, 224, 188, 99, 203, 27, 190, 150, 105, 139, 189, 143, 152, 251, 189, 67, 243, 134, 191, 197, 244, 51, 191, 191, 33, 49, 190, 94, 206, 91, 62, 156, 78, 158, 62, 96, 146, 16, 62, 243, 139, 43, 191, 152, 178, 46, 191, 255, 32, 187, 62, 60, 242, 185, 62, 229, 87, 51, 62, 6, 178, 240, 62, 217, 137, 196, 190, 206, 153, 113, 60, 149, 128, 150, 62, 250, 139, 44, 190, 95, 243, 34, 62, 89, 221, 40, 62, 90, 103, 177, 60, 18, 175, 193, 61, 29, 247, 125, 62, 10, 97, 91, 62, 236, 63, 197, 189, 9, 107, 162, 62, 56, 227, 225, 189, 33, 186, 145, 191, 187, 224, 21, 190, 131, 243, 221, 189, 4, 154, 9, 190, 142, 89, 208, 189, 163, 45, 42, 190, 236, 63, 29, 61, 55, 126, 150, 190, 10, 91, 135, 189, 144, 136, 70, 190, 62, 236, 219, 61, 34, 152, 157, 190, 153, 25, 101, 62, 29, 156, 131, 190, 54, 127, 180, 61, 245, 76, 110, 62, 146, 224, 166, 62, 255, 37, 82, 59, 73, 87, 238, 188, 247, 185, 44, 190, 107, 28, 86, 62, 41, 121, 108, 62, 54, 38, 44, 62, 231, 42, 144, 190, 36, 18, 154, 189, 234, 32, 252, 190, 158, 187, 10, 62, 126, 82, 171, 62, 49, 72, 204, 61, 95, 51, 246, 190, 136, 246, 193, 60, 219, 105, 230, 61, 209, 42, 103, 191, 69, 166, 122, 189, 34, 159, 46, 61, 156, 68, 77, 62, 46, 47, 95, 62, 68, 179, 178, 62, 113, 43, 156, 61, 40, 156, 202, 189, 221, 216, 104, 190, 198, 199, 153, 188, 15, 66, 170, 62, 142, 246, 146, 190, 59, 225, 225, 61, 55, 189, 184, 190, 44, 228, 66, 62, 181, 209, 175, 190, 113, 68, 145, 189, 209, 7, 97, 62, 79, 53, 187, 189, 28, 219, 166, 61, 205, 94, 77, 62, 38, 7, 226, 188, 117, 175, 155, 189, 92, 192, 244, 188, 10, 221, 128, 62, 151, 73, 29, 189, 114, 139, 84, 62, 146, 102, 9, 190, 160, 101, 163, 61, 36, 243, 55, 62, 253, 170, 44, 190, 112, 254, 62, 189, 33, 248, 77, 62, 173, 149, 148, 60, 181, 83, 153, 190, 76, 192, 39, 62, 163, 34, 39, 190, 88, 253, 86, 62, 213, 1, 89, 61, 159, 119, 127, 190, 213, 230, 21, 189, 177, 188, 176, 62, 92, 116, 13, 61, 156, 95, 123, 62, 252, 60, 88, 62, 247, 76, 180, 62, 224, 199, 12, 190, 158, 28, 189, 62, 88, 50, 226, 61, 233, 105, 58, 61, 27, 195, 9, 62, 109, 176, 3, 191, 62, 226, 0, 191, 253, 102, 205, 60, 144, 43, 36, 190, 66, 46, 137, 189, 192, 179, 230, 189, 25, 246, 78, 62, 195, 63, 223, 59, 39, 140, 42, 62, 168, 99, 186, 188, 251, 196, 244, 62, 136, 201, 1, 63, 83, 168, 18, 61, 94, 20, 107, 63, 249, 50, 252, 61, 198, 183, 69, 191, 28, 118, 58, 61, 254, 200, 28, 61, 228, 253, 152, 189, 85, 37, 64, 62, 184, 179, 43, 191, 118, 153, 65, 190, 19, 191, 163, 190, 212, 81, 116, 61, 210, 61, 152, 62, 58, 100, 176, 188, 193, 149, 1, 188, 27, 138, 145, 62, 143, 62, 196, 61, 121, 149, 82, 62, 241, 237, 165, 61, 220, 95, 18, 61, 198, 7, 180, 190, 32, 45, 29, 61, 104, 12, 180, 62, 160, 125, 45, 190, 139, 114, 153, 190, 122, 91, 222, 61, 217, 168, 133, 190, 155, 216, 95, 61, 142, 85, 137, 61, 222, 116, 210, 61, 230, 97, 68, 190, 88, 154, 130, 62, 207, 35, 182, 188, 183, 116, 140, 191, 168, 80, 63, 189, 16, 248, 13, 61, 124, 221, 69, 62, 66, 213, 39, 189, 161, 196, 9, 62, 187, 197, 166, 189, 31, 28, 10, 191, 129, 16, 172, 187, 151, 18, 231, 188, 216, 45, 56, 62, 244, 205, 43, 190, 149, 160, 166, 62, 116, 175, 39, 190, 32, 218, 141, 62, 255, 48, 236, 188, 173, 231, 135, 190, 55, 99, 42, 190, 153, 77, 18, 62, 25, 250, 7, 191, 227, 182, 204, 190, 74, 78, 110, 190, 4, 84, 114, 60, 38, 131, 126, 62, 48, 12, 174, 188, 75, 183, 33, 190, 24, 227, 87, 61, 47, 190, 117, 189, 118, 96, 51, 189, 18, 120, 17, 190, 196, 5, 210, 61, 206, 158, 73, 189, 233, 87, 47, 189, 80, 95, 3, 190, 107, 172, 125, 188, 115, 7, 191, 60, 153, 216, 158, 189, 240, 30, 141, 60, 132, 68, 86, 62, 227, 91, 1, 190, 75, 251, 180, 190, 40, 242, 109, 60, 183, 192, 148, 61, 131, 67, 104, 190, 186, 234, 209, 60, 47, 248, 105, 59, 62, 189, 65, 190, 61, 236, 17, 63, 246, 188, 136, 61, 252, 138, 16, 190, 32, 149, 1, 191, 67, 31, 39, 62, 1, 11, 65, 190, 164, 213, 66, 190, 252, 55, 178, 62, 229, 144, 208, 61, 116, 243, 50, 190, 146, 11, 153, 189, 141, 154, 191, 188, 99, 57, 214, 188, 133, 82, 30, 189, 196, 200, 129, 190, 195, 68, 214, 62, 254, 231, 6, 61, 204, 38, 199, 190, 27, 255, 226, 189, 129, 155, 94, 62, 33, 159, 247, 61, 25, 190, 54, 62, 76, 109, 79, 62, 138, 158, 219, 61, 139, 64, 17, 189, 194, 140, 13, 61, 110, 250, 135, 62, 2, 177, 30, 190, 18, 203, 7, 62, 129, 79, 182, 190, 233, 12, 150, 190, 29, 151, 132, 62, 183, 2, 206, 189, 201, 127, 108, 190, 142, 152, 129, 191, 141, 216, 71, 190, 171, 187, 170, 62, 212, 143, 25, 62, 99, 55, 68, 61, 226, 174, 166, 62, 0, 241, 198, 188, 74, 32, 233, 190, 14, 197, 53, 191, 49, 56, 1, 191, 152, 88, 12, 61, 157, 55, 136, 62, 237, 134, 169, 190, 245, 236, 216, 188, 11, 45, 109, 63, 61, 150, 224, 190, 41, 184, 169, 190, 6, 149, 90, 63, 20, 147, 70, 62, 157, 51, 148, 189, 189, 15, 204, 189, 61, 108, 120, 190, 107, 105, 34, 62, 196, 209, 48, 62, 23, 133, 48, 190, 102, 27, 160, 189, 191, 117, 81, 190, 4, 57, 162, 190, 141, 1, 196, 190, 252, 126, 24, 190, 99, 159, 53, 189, 198, 179, 50, 61, 179, 249, 197, 187, 244, 187, 150, 189, 163, 17, 157, 61, 227, 197, 128, 189, 0, 217, 35, 188, 217, 73, 15, 190, 106, 89, 255, 60, 32, 175, 168, 189, 128, 78, 27, 190, 36, 10, 112, 61, 247, 131, 84, 189, 146, 173, 21, 190, 252, 103, 40, 62, 71, 63, 118, 188, 236, 175, 43, 190, 228, 215, 196, 189, 195, 224, 145, 188, 247, 108, 47, 62, 150, 29, 128, 189, 51, 168, 167, 61, 31, 211, 20, 190, 94, 139, 227, 60, 190, 113, 23, 62, 35, 90, 41, 190, 167, 207, 60, 61, 26, 181, 220, 61, 114, 64, 17, 188, 66, 134, 31, 190, 22, 7, 3, 62, 17, 109, 198, 189, 183, 152, 17, 190, 249, 71, 245, 61, 220, 77, 29, 61, 65, 203, 41, 61, 67, 76, 170, 190, 144, 134, 81, 61, 195, 42, 176, 62, 51, 97, 138, 189, 189, 126, 35, 190, 152, 196, 31, 190, 80, 183, 110, 190, 232, 131, 233, 189, 133, 140, 214, 61, 63, 2, 82, 61, 236, 227, 233, 189, 141, 104, 191, 188, 211, 57, 143, 62, 211, 4, 16, 191, 131, 132, 12, 187, 219, 78, 126, 190, 218, 223, 19, 62, 226, 155, 8, 62, 48, 133, 3, 190, 93, 121, 20, 189, 77, 115, 156, 61, 239, 175, 18, 189, 85, 254, 250, 189, 202, 229, 7, 62, 240, 31, 154, 190, 240, 109, 144, 60, 0, 129, 150, 60, 246, 198, 20, 62, 147, 96, 76, 189, 168, 40, 201, 190, 170, 76, 136, 190, 192, 14, 116, 61, 230, 156, 188, 62, 215, 70, 127, 62, 127, 57, 116, 63, 94, 168, 120, 61, 82, 199, 142, 190, 63, 115, 65, 59, 102, 72, 138, 191, 249, 2, 73, 189, 58, 254, 0, 191, 234, 207, 90, 188, 102, 58, 201, 190, 182, 111, 166, 190, 202, 57, 132, 62, 221, 113, 82, 191, 21, 37, 214, 188, 185, 65, 51, 63, 74, 47, 75, 185, 207, 188, 8, 62, 100, 202, 124, 62, 121, 189, 124, 188, 137, 127, 151, 190, 36, 38, 80, 191, 133, 221, 110, 189, 8, 105, 131, 188, 180, 70, 0, 189, 171, 180, 147, 62, 252, 163, 192, 191, 231, 75, 208, 190, 131, 217, 126, 62, 2, 156, 177, 189, 96, 242, 214, 61, 163, 174, 225, 61, 124, 109, 70, 189, 151, 127, 190, 61, 17, 230, 212, 62, 103, 130, 221, 189, 211, 146, 19, 189, 254, 37, 241, 189, 242, 158, 171, 189, 187, 222, 180, 189, 209, 108, 22, 62, 212, 133, 13, 62, 77, 68, 12, 190, 34, 235, 31, 59, 196, 229, 22, 62, 188, 76, 116, 191, 120, 41, 127, 189, 5, 3, 115, 62, 86, 85, 3, 62, 1, 140, 185, 189, 55, 13, 1, 190, 75, 132, 196, 60, 103, 21, 48, 190, 88, 218, 243, 188, 45, 161, 29, 190, 139, 50, 130, 61, 50, 15, 87, 189, 39, 92, 224, 61, 144, 155, 137, 61, 169, 152, 176, 61, 112, 240, 206, 62, 175, 60, 71, 61, 64, 18, 163, 60, 48, 103, 37, 62, 45, 177, 214, 189, 94, 254, 147, 186, 209, 33, 218, 62, 95, 76, 132, 62, 61, 150, 180, 189, 131, 52, 41, 190, 0, 174, 158, 190, 244, 120, 224, 189, 172, 24, 229, 60, 202, 226, 170, 62, 249, 120, 55, 190, 94, 54, 178, 62, 142, 229, 56, 62, 158, 76, 144, 191, 52, 99, 124, 190, 208, 43, 182, 57, 205, 96, 140, 190, 151, 184, 85, 188, 149, 224, 9, 61, 30, 27, 95, 190, 145, 40, 71, 189, 82, 189, 171, 189, 242, 106, 236, 187, 250, 125, 146, 61, 142, 32, 236, 189, 53, 101, 0, 62, 106, 245, 61, 61, 81, 208, 127, 62, 213, 69, 46, 191, 249, 45, 90, 190, 183, 79, 93, 62, 87, 175, 51, 191, 233, 50, 171, 62, 157, 82, 134, 62, 62, 45, 54, 190, 1, 86, 81, 190, 70, 173, 115, 62, 193, 212, 36, 62, 1, 210, 39, 62, 140, 147, 41, 62, 26, 94, 160, 61, 106, 239, 54, 191, 114, 227, 176, 190, 188, 79, 173, 190, 130, 75, 123, 190, 229, 133, 107, 189, 180, 195, 155, 62, 127, 137, 107, 190, 218, 117, 109, 191, 207, 190, 66, 191, 134, 204, 36, 190, 117, 109, 77, 191, 22, 240, 148, 189, 218, 154, 137, 62, 31, 86, 163, 62, 126, 223, 252, 190, 140, 22, 64, 62, 230, 189, 2, 62, 138, 253, 76, 59, 119, 120, 100, 190, 10, 48, 83, 191, 131, 139, 70, 190, 34, 26, 183, 189, 197, 194, 220, 188, 67, 204, 100, 62, 9, 197, 162, 62, 82, 129, 137, 191, 167, 183, 83, 191, 204, 122, 135, 190, 207, 128, 140, 62, 151, 29, 12, 62, 178, 227, 121, 60, 216, 39, 135, 190, 123, 213, 107, 190, 213, 106, 199, 62, 237, 112, 38, 191, 233, 33, 187, 189, 15, 148, 115, 62, 81, 154, 127, 62, 30, 32, 15, 190, 203, 50, 113, 191, 197, 187, 96, 191, 92, 111, 1, 62, 154, 203, 20, 191, 177, 31, 146, 190, 51, 196, 106, 62, 215, 167, 165, 62, 138, 223, 10, 190, 17, 20, 160, 62, 156, 0, 130, 62, 136, 74, 158, 62, 24, 176, 205, 190, 6, 231, 192, 190, 95, 113, 201, 189, 51, 211, 203, 189, 140, 119, 131, 190, 36, 134, 146, 61, 227, 135, 139, 62, 103, 27, 157, 190, 206, 249, 166, 190, 102, 151, 9, 63, 114, 214, 78, 62, 44, 13, 212, 60, 229, 22, 137, 62, 239, 44, 115, 61, 214, 137, 61, 191, 42, 87, 7, 191, 57, 72, 78, 190, 26, 179, 229, 190, 111, 53, 77, 62, 224, 175, 53, 62, 173, 97, 231, 190, 122, 244, 248, 190, 190, 3, 15, 191, 9, 37, 31, 60, 28, 57, 102, 191, 70, 212, 128, 62, 120, 73, 218, 61, 54, 101, 188, 189, 132, 134, 26, 191, 67, 110, 194, 62, 196, 35, 89, 62, 216, 171, 11, 62, 197, 116, 145, 188, 6, 172, 29, 61, 198, 3, 229, 61, 10, 122, 20, 190, 238, 164, 198, 188, 35, 128, 65, 62, 104, 70, 59, 190, 232, 112, 162, 60, 186, 221, 49, 190, 33, 63, 206, 189, 226, 181, 200, 187, 5, 198, 82, 190, 13, 160, 5, 61, 89, 66, 149, 189, 234, 171, 4, 62, 122, 170, 255, 189, 148, 200, 38, 61, 69, 87, 43, 62, 163, 117, 75, 59, 34, 135, 237, 61, 249, 98, 24, 62, 168, 172, 206, 61, 79, 203, 62, 190, 206, 97, 144, 189, 120, 39, 58, 61, 162, 145, 106, 189, 255, 76, 37, 190, 17, 20, 50, 190, 97, 25, 9, 189, 135, 33, 183, 187, 32, 116, 79, 188, 98, 189, 161, 61, 10, 108, 236, 61, 213, 141, 121, 62, 106, 81, 134, 62, 132, 166, 158, 61, 102, 243, 103, 62, 148, 120, 230, 190, 219, 61, 57, 61, 28, 89, 220, 62, 17, 143, 49, 191, 203, 203, 232, 189, 138, 209, 96, 62, 76, 79, 232, 60, 86, 133, 44, 62, 129, 11, 147, 61, 33, 135, 70, 62, 48, 206, 149, 61, 40, 222, 186, 61, 89, 122, 136, 60, 198, 243, 146, 191, 110, 217, 1, 62, 28, 181, 168, 61, 171, 230, 93, 61, 108, 178, 188, 189, 6, 88, 51, 190, 190, 183, 142, 190, 217, 129, 214, 190, 25, 18, 16, 62, 181, 122, 149, 59, 39, 10, 75, 60, 244, 168, 99, 190, 140, 110, 59, 62, 195, 144, 142, 189, 94, 17, 229, 61, 98, 155, 58, 62, 136, 94, 238, 61, 50, 250, 140, 61, 207, 219, 5, 61, 246, 31, 15, 190, 174, 191, 159, 189, 71, 227, 193, 61, 135, 236, 49, 190, 37, 152, 201, 188, 172, 3, 200, 188, 162, 223, 90, 190, 38, 34, 49, 189, 191, 101, 29, 62, 193, 3, 126, 190, 133, 242, 172, 59, 201, 111, 143, 189, 118, 106, 1, 60, 195, 96, 23, 189, 210, 200, 122, 189, 216, 75, 77, 190, 199, 170, 15, 190, 96, 161, 143, 60, 15, 142, 158, 190, 45, 116, 17, 62, 41, 93, 225, 187, 231, 245, 68, 190, 159, 246, 145, 61, 3, 116, 201, 188, 147, 184, 128, 189, 73, 134, 190, 189, 199, 83, 33, 190, 250, 196, 249, 188, 53, 224, 203, 189, 51, 160, 91, 62, 169, 178, 247, 190, 191, 116, 143, 62, 73, 22, 223, 190, 209, 208, 226, 60, 56, 26, 44, 62, 59, 74, 152, 190, 15, 194, 111, 190, 253, 106, 206, 61, 196, 199, 147, 191, 125, 253, 235, 61, 13, 231, 48, 61, 193, 221, 119, 62, 234, 147, 1, 190, 137, 205, 237, 189, 254, 241, 78, 190, 178, 72, 15, 191, 214, 110, 80, 62, 253, 190, 177, 189, 235, 187, 0, 190, 2, 35, 176, 188, 27, 92, 232, 61, 196, 153, 168, 188, 212, 203, 44, 62, 123, 230, 8, 191, 77, 121, 32, 191, 227, 198, 61, 62, 52, 170, 20, 190, 65, 65, 217, 61, 238, 97, 156, 191, 145, 172, 15, 191, 14, 93, 56, 191, 163, 229, 71, 190, 209, 253, 38, 62, 106, 103, 82, 190, 172, 43, 172, 62, 203, 82, 97, 62, 134, 92, 140, 190, 62, 90, 36, 191, 169, 5, 0, 62, 189, 67, 208, 62, 214, 151, 8, 62, 93, 137, 231, 61, 69, 208, 159, 190, 107, 220, 203, 190, 209, 166, 11, 63, 181, 198, 28, 191, 17, 137, 76, 190, 150, 172, 133, 62, 147, 100, 182, 62, 10, 141, 183, 190, 50, 119, 143, 191, 178, 164, 152, 191, 192, 177, 204, 61, 230, 146, 68, 191, 105, 139, 133, 62, 173, 211, 175, 61, 247, 121, 128, 62, 226, 140, 129, 190, 226, 106, 154, 62, 215, 15, 49, 61, 235, 254, 105, 62, 30, 207, 162, 190, 167, 66, 177, 190, 13, 154, 5, 189, 141, 140, 170, 190, 106, 3, 153, 61, 93, 133, 240, 61, 151, 62, 166, 190, 69, 124, 117, 190, 138, 135, 19, 191, 113, 140, 1, 62, 118, 169, 130, 62, 78, 213, 166, 189, 70, 146, 199, 61, 13, 42, 19, 61, 62, 188, 140, 61, 27, 19, 123, 62, 20, 57, 154, 190, 100, 119, 78, 63, 102, 121, 131, 62, 196, 96, 159, 61, 234, 153, 241, 61, 172, 255, 228, 190, 162, 96, 107, 190, 6, 194, 108, 190, 89, 210, 3, 191, 3, 90, 255, 190, 103, 170, 180, 61, 60, 158, 229, 62, 88, 157, 9, 190, 196, 224, 229, 61, 165, 31, 214, 61, 53, 80, 8, 62, 239, 23, 69, 191, 219, 33, 6, 62, 238, 165, 88, 189, 122, 57, 8, 190, 163, 209, 227, 59, 221, 89, 60, 190, 103, 234, 35, 190, 82, 51, 118, 61, 147, 34, 239, 61, 216, 119, 227, 188, 199, 142, 211, 189, 133, 118, 19, 190, 241, 170, 195, 61, 54, 226, 178, 189, 230, 64, 146, 189, 233, 80, 15, 62, 156, 98, 251, 189, 251, 165, 158, 188, 50, 17, 1, 62, 196, 29, 136, 189, 212, 71, 216, 60, 141, 182, 251, 59, 195, 55, 9, 190, 32, 175, 254, 189, 131, 98, 29, 189, 92, 93, 11, 189, 192, 254, 30, 190, 220, 161, 186, 188, 229, 208, 14, 190, 206, 170, 177, 189, 203, 134, 46, 189, 197, 129, 35, 190, 19, 214, 46, 62, 248, 152, 11, 62, 7, 76, 79, 189, 84, 48, 133, 60, 117, 126, 4, 189, 75, 255, 244, 62, 55, 241, 58, 62, 39, 209, 163, 61, 203, 11, 82, 62, 91, 205, 226, 190, 96, 74, 138, 189, 112, 36, 36, 59, 200, 162, 104, 190, 121, 86, 110, 62, 131, 73, 249, 61, 206, 225, 221, 61, 181, 249, 64, 62, 235, 119, 43, 62, 69, 22, 181, 190, 240, 76, 65, 189, 61, 65, 176, 62, 129, 255, 172, 61, 37, 86, 170, 60, 120, 47, 96, 62, 46, 241, 2, 61, 54, 255, 176, 190, 238, 109, 107, 189, 11, 96, 160, 61, 198, 206, 164, 188, 195, 184, 217, 61, 17, 241, 152, 61, 87, 83, 179, 61, 94, 112, 189, 186, 128, 77, 207, 190, 55, 97, 56, 190, 250, 215, 101, 61, 190, 205, 4, 62, 133, 198, 116, 62, 153, 3, 178, 61, 113, 174, 120, 190, 244, 78, 8, 191, 113, 117, 41, 191, 195, 166, 32, 187, 166, 195, 119, 61, 21, 236, 174, 61, 215, 55, 174, 61, 182, 192, 16, 190, 217, 75, 51, 62, 182, 121, 247, 189, 74, 16, 119, 189, 106, 37, 11, 62, 48, 221, 156, 62, 251, 46, 67, 190, 65, 244, 62, 191, 248, 118, 16, 191, 167, 183, 228, 61, 152, 184, 3, 191, 60, 127, 168, 189, 163, 67, 247, 61, 31, 92, 20, 62, 141, 11, 252, 61, 208, 15, 210, 61, 229, 189, 207, 61, 71, 197, 0, 62, 243, 245, 20, 190, 203, 100, 87, 190, 85, 78, 228, 189, 180, 183, 4, 62, 13, 184, 12, 190, 87, 193, 44, 191, 30, 66, 181, 189, 254, 147, 145, 191, 238, 207, 169, 190, 209, 57, 207, 61, 151, 100, 21, 189, 49, 67, 200, 62, 59, 40, 139, 61, 17, 21, 72, 190, 128, 93, 25, 189, 24, 126, 94, 62, 89, 128, 76, 189, 7, 172, 161, 190, 230, 58, 87, 63, 127, 23, 128, 60, 217, 86, 39, 191, 14, 114, 152, 188, 94, 21, 5, 189, 206, 78, 20, 190, 220, 117, 194, 189, 217, 7, 129, 62, 146, 184, 125, 62, 182, 30, 27, 62, 48, 137, 172, 189, 209, 135, 222, 61, 85, 71, 14, 61, 247, 204, 93, 62, 180, 94, 142, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 20, 94, 190, 194, 94, 65, 62, 236, 22, 158, 62, 240, 207, 113, 189, 181, 237, 66, 62, 50, 58, 107, 61, 149, 42, 89, 61, 124, 67, 143, 61, 2, 221, 145, 62, 152, 8, 220, 190, 56, 112, 205, 61, 211, 243, 131, 190, 197, 213, 106, 190, 229, 38, 48, 62, 51, 85, 224, 189, 48, 159, 103, 62, 24, 58, 185, 62, 72, 14, 147, 62, 190, 189, 235, 188, 97, 133, 176, 62, 106, 188, 62, 62, 66, 104, 185, 62, 190, 234, 211, 188, 192, 47, 23, 190, 171, 15, 18, 190, 8, 85, 242, 61, 57, 144, 239, 62, 130, 22, 181, 187, 89, 228, 243, 61, 66, 137, 186, 62, 11, 150, 32, 62, 34, 163, 251, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 212, 7, 189, 123, 16, 214, 191, 234, 128, 176, 63, 24, 214, 15, 191, 102, 235, 38, 62, 234, 111, 235, 62, 11, 18, 3, 191, 1, 52, 10, 191, 254, 24, 196, 61, 13, 160, 119, 63, 181, 157, 251, 190, 109, 5, 80, 62, 48, 231, 200, 190, 215, 196, 137, 191, 21, 69, 48, 190, 13, 123, 178, 187, 7, 198, 141, 191, 38, 87, 37, 189, 222, 81, 169, 190, 217, 19, 59, 63, 95, 150, 65, 63, 12, 191, 230, 62, 142, 74, 3, 61, 40, 74, 56, 190, 75, 119, 234, 61, 29, 154, 32, 61, 166, 78, 48, 63, 23, 31, 36, 63, 48, 182, 146, 61, 32, 94, 237, 186, 52, 214, 36, 62, 165, 7, 252, 62, 65, 36, 24, 62, 231, 237, 114, 62, 63, 50, 162, 189, 248, 148, 27, 190, 48, 168, 224, 190, 96, 234, 9, 191, 152, 220, 238, 187, 78, 244, 133, 62, 157, 118, 151, 190, 27, 110, 59, 62, 47, 77, 229, 61, 16, 107, 49, 62, 61, 80, 74, 61, 34, 12, 223, 189, 52, 153, 2, 61, 224, 240, 175, 189, 53, 167, 132, 62, 179, 171, 147, 190, 11, 51, 27, 62, 130, 45, 70, 190, 57, 211, 114, 62, 206, 25, 15, 189, 191, 208, 35, 190, 204, 197, 198, 190, 59, 81, 92, 62, 94, 217, 37, 191, 180, 98, 146, 62, 241, 81, 194, 62, 67, 64, 139, 189, 172, 178, 167, 190, 55, 182, 71, 190, 53, 139, 65, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 222, 26, 190, 208, 176, 100, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {108, 1, 143, 191, 145, 195, 3, 64, 173, 56, 218, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {213, 115, 53, 64, 209, 173, 15, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0049/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}