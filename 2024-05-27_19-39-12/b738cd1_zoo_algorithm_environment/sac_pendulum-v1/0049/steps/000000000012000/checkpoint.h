// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 21, 119, 63, 184, 228, 147, 62, 35, 228, 180, 62, 238, 128, 76, 63, 238, 7, 64, 61, 53, 179, 16, 63, 44, 108, 123, 62, 196, 180, 71, 63, 87, 11, 1, 63, 65, 22, 218, 62, 204, 231, 171, 62, 151, 171, 175, 189, 137, 114, 151, 190, 148, 65, 123, 191, 170, 44, 254, 189, 4, 53, 108, 190, 225, 158, 149, 189, 232, 104, 187, 59, 219, 109, 208, 62, 42, 106, 54, 63, 53, 89, 128, 61, 152, 79, 19, 191, 166, 13, 174, 191, 151, 127, 169, 190, 90, 147, 35, 190, 157, 9, 226, 62, 107, 37, 152, 190, 6, 83, 2, 63, 16, 216, 6, 191, 243, 23, 100, 190, 63, 33, 226, 190, 4, 117, 160, 62, 8, 139, 17, 63, 141, 244, 176, 61, 249, 21, 42, 188, 221, 213, 146, 190, 180, 235, 10, 63, 198, 212, 42, 61, 123, 1, 248, 62, 227, 234, 10, 63, 175, 94, 255, 62, 56, 103, 228, 190, 23, 169, 70, 63, 216, 117, 12, 191, 92, 142, 19, 191, 181, 133, 67, 63, 128, 229, 4, 63, 197, 187, 188, 62, 116, 208, 136, 189, 237, 220, 8, 191, 79, 41, 107, 62, 77, 172, 92, 63, 194, 33, 130, 191, 143, 29, 174, 190, 210, 219, 10, 63, 33, 153, 38, 191, 175, 150, 105, 190, 209, 246, 87, 190, 255, 144, 121, 191, 32, 186, 244, 61, 161, 117, 9, 190, 130, 136, 150, 189, 154, 60, 169, 190, 109, 244, 230, 189, 199, 219, 177, 189, 38, 248, 11, 191, 218, 150, 41, 190, 204, 16, 210, 189, 0, 240, 133, 190, 143, 87, 70, 190, 26, 21, 67, 191, 116, 53, 4, 191, 175, 53, 130, 191, 217, 27, 157, 60, 131, 254, 129, 61, 67, 124, 28, 190, 116, 4, 160, 190, 32, 190, 29, 63, 74, 139, 2, 62, 35, 41, 80, 191, 9, 103, 91, 62, 93, 29, 15, 63, 173, 125, 110, 62, 218, 253, 164, 190, 105, 25, 234, 62, 171, 181, 138, 191, 233, 124, 188, 190, 239, 254, 177, 62, 145, 11, 171, 62, 20, 17, 249, 188, 145, 41, 8, 189, 246, 38, 134, 190, 65, 251, 10, 63, 85, 126, 13, 63, 191, 68, 81, 63, 56, 135, 10, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {12, 197, 145, 191, 42, 75, 5, 62, 171, 196, 235, 62, 161, 16, 208, 61, 42, 248, 166, 62, 99, 151, 35, 63, 210, 8, 218, 190, 22, 255, 236, 58, 189, 251, 11, 191, 175, 123, 172, 62, 207, 153, 37, 190, 111, 177, 148, 62, 168, 164, 106, 62, 91, 237, 144, 62, 35, 221, 5, 191, 20, 45, 88, 191, 106, 214, 81, 61, 240, 231, 38, 191, 213, 142, 117, 62, 61, 192, 136, 190, 129, 58, 114, 190, 232, 193, 144, 190, 25, 251, 5, 63, 131, 214, 63, 190, 141, 181, 198, 189, 60, 237, 1, 63, 80, 31, 158, 62, 154, 84, 148, 62, 230, 96, 151, 61, 28, 59, 253, 62, 232, 91, 79, 62, 158, 136, 131, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 4, 52, 62, 206, 156, 11, 189, 216, 81, 236, 60, 219, 195, 169, 61, 155, 110, 99, 190, 197, 234, 253, 189, 66, 6, 144, 188, 34, 179, 39, 62, 94, 78, 51, 189, 199, 12, 163, 189, 194, 88, 8, 190, 245, 194, 195, 188, 62, 254, 224, 61, 189, 32, 60, 62, 88, 215, 5, 189, 236, 123, 193, 189, 160, 147, 112, 189, 245, 19, 20, 190, 113, 9, 252, 189, 228, 115, 8, 189, 148, 118, 248, 188, 104, 195, 215, 189, 31, 40, 70, 190, 110, 115, 155, 189, 127, 86, 21, 62, 224, 239, 15, 62, 36, 76, 164, 189, 159, 158, 63, 61, 173, 143, 181, 60, 120, 60, 13, 190, 221, 111, 44, 190, 175, 2, 119, 188, 76, 169, 163, 189, 11, 195, 118, 61, 114, 207, 74, 191, 70, 114, 178, 190, 177, 105, 211, 62, 151, 68, 137, 189, 76, 252, 20, 188, 225, 150, 144, 62, 187, 69, 60, 191, 48, 184, 105, 191, 200, 6, 85, 191, 251, 11, 104, 191, 45, 73, 153, 62, 75, 96, 57, 190, 56, 222, 145, 190, 248, 14, 40, 61, 91, 169, 51, 63, 14, 175, 243, 190, 254, 178, 25, 191, 75, 226, 64, 63, 152, 137, 101, 190, 19, 20, 8, 190, 71, 200, 32, 61, 56, 182, 245, 189, 131, 162, 105, 62, 202, 72, 240, 60, 157, 144, 9, 62, 67, 108, 234, 190, 87, 1, 207, 190, 94, 42, 239, 190, 35, 64, 5, 191, 76, 175, 117, 62, 218, 82, 51, 190, 130, 47, 162, 189, 183, 144, 81, 61, 8, 250, 68, 62, 58, 52, 180, 190, 98, 196, 183, 61, 108, 147, 12, 189, 205, 112, 146, 62, 249, 167, 192, 62, 53, 55, 255, 190, 212, 170, 35, 189, 244, 166, 179, 60, 158, 47, 142, 189, 159, 197, 58, 191, 125, 216, 132, 61, 47, 107, 84, 62, 220, 197, 1, 191, 35, 134, 50, 190, 255, 189, 223, 189, 58, 227, 37, 191, 22, 70, 132, 190, 54, 147, 185, 191, 251, 84, 71, 62, 213, 117, 232, 191, 252, 45, 65, 62, 215, 102, 146, 189, 11, 237, 146, 190, 73, 43, 115, 191, 135, 20, 174, 190, 139, 225, 157, 62, 65, 50, 222, 189, 171, 241, 21, 59, 159, 110, 9, 63, 186, 217, 157, 62, 73, 226, 176, 189, 150, 144, 18, 62, 232, 10, 110, 190, 122, 191, 23, 62, 109, 164, 247, 61, 76, 168, 115, 189, 125, 78, 51, 190, 89, 189, 202, 189, 174, 246, 208, 189, 25, 160, 113, 61, 227, 9, 126, 60, 68, 244, 177, 62, 135, 221, 188, 190, 225, 123, 38, 62, 252, 105, 137, 189, 117, 160, 125, 191, 185, 43, 31, 62, 128, 146, 19, 62, 255, 49, 201, 61, 163, 231, 224, 61, 109, 121, 3, 189, 214, 196, 129, 190, 145, 172, 55, 190, 253, 89, 218, 189, 117, 10, 49, 62, 135, 130, 136, 62, 50, 78, 180, 190, 201, 13, 152, 188, 135, 198, 62, 190, 225, 109, 110, 62, 97, 223, 178, 190, 180, 233, 218, 61, 248, 241, 47, 190, 114, 230, 154, 189, 126, 177, 82, 62, 192, 201, 66, 62, 121, 10, 203, 190, 192, 110, 241, 190, 14, 176, 2, 191, 152, 51, 76, 62, 84, 83, 49, 190, 205, 38, 84, 61, 206, 8, 132, 60, 127, 198, 170, 188, 170, 127, 150, 189, 181, 247, 7, 190, 83, 56, 97, 190, 19, 250, 78, 190, 211, 4, 8, 62, 18, 245, 124, 189, 220, 90, 243, 190, 174, 159, 161, 190, 133, 166, 133, 189, 31, 6, 26, 191, 35, 176, 4, 62, 115, 93, 1, 62, 57, 230, 169, 62, 203, 234, 202, 189, 39, 220, 78, 62, 96, 207, 6, 62, 79, 177, 71, 62, 156, 215, 136, 190, 213, 60, 82, 189, 31, 219, 183, 190, 129, 185, 150, 60, 70, 10, 8, 62, 123, 250, 155, 190, 91, 53, 116, 189, 188, 251, 17, 191, 51, 196, 56, 190, 38, 232, 243, 61, 77, 35, 242, 61, 242, 17, 77, 189, 39, 205, 60, 62, 103, 93, 138, 190, 184, 67, 9, 62, 50, 145, 189, 62, 208, 79, 123, 61, 83, 200, 58, 191, 204, 181, 167, 62, 16, 235, 9, 62, 80, 93, 157, 191, 76, 36, 65, 189, 0, 62, 37, 190, 66, 46, 5, 190, 165, 81, 74, 190, 16, 70, 62, 191, 113, 72, 203, 190, 181, 8, 118, 189, 136, 130, 48, 62, 4, 187, 88, 62, 212, 116, 4, 62, 50, 63, 35, 190, 63, 36, 212, 190, 91, 50, 147, 62, 50, 12, 183, 62, 168, 11, 34, 62, 209, 222, 215, 62, 255, 92, 137, 190, 31, 68, 236, 60, 248, 42, 194, 61, 82, 97, 15, 189, 145, 19, 56, 62, 220, 176, 17, 62, 58, 0, 38, 188, 73, 197, 129, 61, 92, 139, 123, 62, 209, 91, 56, 62, 45, 12, 226, 189, 224, 26, 104, 62, 215, 41, 226, 189, 18, 28, 140, 191, 21, 160, 46, 190, 122, 57, 211, 189, 171, 20, 25, 190, 46, 242, 5, 190, 146, 41, 48, 190, 13, 220, 128, 61, 29, 84, 195, 190, 166, 129, 187, 189, 181, 237, 82, 190, 191, 16, 160, 61, 245, 121, 146, 190, 120, 13, 51, 62, 131, 38, 144, 190, 40, 182, 36, 61, 122, 162, 24, 62, 124, 27, 168, 62, 130, 121, 147, 188, 126, 11, 90, 189, 212, 131, 66, 189, 6, 111, 105, 62, 84, 60, 2, 61, 190, 175, 110, 62, 155, 3, 154, 190, 119, 112, 189, 189, 93, 52, 248, 190, 44, 59, 247, 61, 217, 222, 174, 62, 240, 92, 151, 61, 93, 43, 243, 190, 73, 86, 209, 189, 116, 143, 3, 62, 251, 203, 76, 191, 251, 138, 160, 189, 215, 53, 137, 61, 220, 33, 64, 62, 29, 255, 73, 62, 26, 238, 181, 62, 249, 138, 214, 61, 124, 251, 39, 190, 194, 162, 131, 190, 12, 12, 13, 189, 47, 107, 161, 62, 50, 229, 134, 190, 133, 149, 100, 61, 7, 165, 194, 190, 104, 241, 4, 62, 15, 50, 140, 190, 210, 178, 161, 189, 90, 227, 99, 62, 74, 103, 153, 187, 246, 158, 120, 189, 67, 18, 57, 62, 240, 108, 153, 61, 33, 30, 29, 190, 78, 164, 2, 60, 33, 162, 139, 62, 177, 186, 201, 188, 94, 136, 124, 62, 60, 155, 20, 190, 232, 145, 4, 62, 193, 184, 15, 62, 46, 89, 180, 189, 80, 229, 181, 189, 190, 190, 3, 62, 73, 11, 63, 61, 195, 117, 184, 190, 68, 15, 45, 62, 77, 108, 28, 190, 246, 248, 88, 62, 170, 211, 104, 187, 48, 55, 225, 189, 39, 130, 18, 189, 192, 200, 174, 62, 139, 143, 194, 61, 107, 87, 98, 62, 187, 186, 141, 62, 179, 223, 173, 62, 193, 201, 248, 189, 58, 135, 80, 62, 110, 44, 243, 61, 155, 36, 85, 61, 79, 134, 35, 62, 242, 175, 16, 191, 78, 62, 0, 191, 14, 75, 129, 62, 76, 33, 106, 190, 36, 75, 159, 189, 211, 12, 238, 189, 46, 211, 136, 61, 67, 245, 52, 59, 193, 144, 47, 62, 154, 33, 222, 188, 102, 239, 228, 62, 60, 252, 203, 62, 55, 107, 153, 61, 27, 31, 73, 63, 248, 125, 227, 61, 116, 221, 26, 191, 174, 45, 201, 60, 241, 121, 233, 60, 218, 17, 214, 189, 76, 160, 11, 62, 142, 174, 64, 191, 169, 9, 9, 190, 186, 181, 121, 190, 150, 46, 124, 61, 139, 7, 125, 62, 104, 236, 208, 60, 107, 223, 72, 61, 27, 60, 160, 62, 114, 48, 127, 61, 180, 4, 58, 62, 245, 37, 161, 61, 153, 202, 249, 187, 185, 244, 157, 190, 9, 117, 62, 61, 42, 182, 26, 62, 146, 177, 180, 188, 25, 79, 138, 190, 156, 129, 136, 61, 162, 218, 99, 190, 64, 237, 12, 61, 226, 171, 76, 61, 103, 163, 161, 61, 129, 159, 64, 190, 79, 196, 96, 62, 96, 3, 1, 189, 17, 249, 134, 191, 50, 108, 147, 189, 35, 167, 211, 60, 103, 47, 68, 62, 166, 178, 106, 189, 164, 157, 17, 62, 249, 70, 49, 189, 52, 36, 134, 190, 95, 92, 45, 189, 197, 104, 165, 189, 245, 223, 33, 62, 131, 171, 27, 190, 152, 43, 135, 62, 208, 225, 73, 190, 231, 176, 120, 62, 255, 48, 236, 188, 173, 231, 135, 190, 55, 99, 42, 190, 153, 77, 18, 62, 25, 250, 7, 191, 227, 182, 204, 190, 74, 78, 110, 190, 4, 84, 114, 60, 38, 131, 126, 62, 48, 12, 174, 188, 75, 183, 33, 190, 24, 227, 87, 61, 47, 190, 117, 189, 118, 96, 51, 189, 18, 120, 17, 190, 196, 5, 210, 61, 206, 158, 73, 189, 233, 87, 47, 189, 80, 95, 3, 190, 107, 172, 125, 188, 115, 7, 191, 60, 153, 216, 158, 189, 240, 30, 141, 60, 132, 68, 86, 62, 227, 91, 1, 190, 75, 251, 180, 190, 40, 242, 109, 60, 183, 192, 148, 61, 131, 67, 104, 190, 186, 234, 209, 60, 47, 248, 105, 59, 62, 189, 65, 190, 102, 169, 13, 63, 126, 147, 197, 61, 190, 179, 230, 189, 248, 4, 221, 190, 250, 119, 95, 62, 38, 196, 43, 190, 44, 133, 250, 61, 177, 166, 187, 62, 184, 113, 201, 61, 223, 34, 52, 190, 16, 206, 162, 189, 21, 233, 140, 188, 23, 112, 62, 59, 181, 167, 158, 188, 21, 132, 96, 190, 218, 143, 211, 62, 64, 64, 5, 61, 45, 42, 180, 190, 48, 217, 191, 189, 248, 3, 81, 62, 125, 98, 38, 62, 224, 74, 95, 62, 229, 154, 95, 62, 33, 39, 14, 62, 220, 133, 190, 189, 218, 68, 58, 61, 20, 91, 129, 62, 76, 77, 32, 190, 131, 123, 40, 62, 70, 176, 158, 190, 148, 144, 145, 190, 191, 46, 145, 62, 68, 248, 140, 189, 220, 214, 173, 190, 34, 129, 132, 191, 55, 202, 42, 190, 220, 3, 130, 62, 142, 136, 15, 62, 99, 55, 68, 61, 95, 93, 117, 62, 25, 22, 234, 189, 83, 57, 11, 191, 202, 124, 74, 191, 221, 108, 227, 190, 102, 246, 142, 189, 84, 220, 138, 62, 192, 89, 221, 190, 43, 33, 171, 59, 181, 183, 77, 63, 248, 5, 169, 190, 198, 168, 185, 190, 158, 99, 57, 63, 254, 68, 80, 62, 51, 238, 116, 189, 50, 147, 135, 189, 247, 49, 131, 190, 79, 95, 152, 62, 215, 161, 137, 61, 29, 99, 148, 190, 145, 23, 41, 61, 209, 55, 143, 190, 73, 129, 95, 190, 128, 199, 1, 191, 183, 252, 181, 188, 99, 159, 53, 189, 198, 179, 50, 61, 179, 249, 197, 187, 244, 187, 150, 189, 163, 17, 157, 61, 227, 197, 128, 189, 0, 217, 35, 188, 217, 73, 15, 190, 106, 89, 255, 60, 32, 175, 168, 189, 128, 78, 27, 190, 36, 10, 112, 61, 247, 131, 84, 189, 146, 173, 21, 190, 252, 103, 40, 62, 71, 63, 118, 188, 236, 175, 43, 190, 228, 215, 196, 189, 195, 224, 145, 188, 247, 108, 47, 62, 150, 29, 128, 189, 51, 168, 167, 61, 31, 211, 20, 190, 94, 139, 227, 60, 190, 113, 23, 62, 35, 90, 41, 190, 167, 207, 60, 61, 26, 181, 220, 61, 114, 64, 17, 188, 66, 134, 31, 190, 22, 7, 3, 62, 17, 109, 198, 189, 167, 249, 29, 190, 139, 158, 255, 61, 219, 248, 206, 60, 130, 84, 135, 61, 9, 214, 82, 190, 70, 62, 196, 61, 170, 23, 35, 62, 140, 241, 145, 187, 53, 192, 45, 190, 99, 185, 226, 189, 169, 251, 189, 190, 92, 166, 203, 189, 18, 149, 221, 61, 134, 85, 124, 61, 170, 91, 3, 190, 33, 174, 254, 189, 6, 28, 77, 62, 82, 156, 213, 190, 195, 117, 63, 61, 80, 122, 150, 190, 152, 124, 241, 61, 248, 81, 196, 61, 26, 162, 220, 189, 224, 179, 44, 189, 31, 96, 99, 61, 33, 13, 231, 189, 244, 204, 237, 189, 222, 230, 46, 62, 147, 132, 101, 190, 171, 64, 18, 61, 46, 161, 196, 189, 39, 48, 56, 61, 147, 96, 76, 189, 83, 123, 39, 190, 161, 72, 252, 189, 50, 223, 139, 61, 117, 145, 194, 62, 209, 206, 143, 62, 241, 32, 80, 63, 155, 119, 225, 61, 115, 92, 131, 190, 109, 243, 65, 60, 35, 192, 144, 191, 134, 52, 119, 189, 190, 107, 135, 190, 241, 75, 151, 188, 8, 75, 201, 190, 14, 66, 144, 190, 105, 66, 216, 188, 205, 220, 62, 191, 227, 177, 180, 188, 50, 107, 239, 62, 237, 16, 183, 60, 135, 163, 23, 62, 109, 65, 135, 62, 96, 63, 213, 60, 6, 94, 163, 190, 52, 11, 82, 191, 110, 76, 86, 190, 47, 234, 181, 188, 250, 112, 156, 187, 0, 195, 144, 62, 96, 152, 188, 191, 109, 127, 140, 190, 59, 253, 81, 62, 181, 65, 186, 189, 112, 114, 200, 61, 231, 120, 218, 61, 170, 74, 179, 188, 192, 88, 211, 61, 225, 22, 120, 62, 174, 207, 165, 189, 69, 233, 6, 186, 33, 129, 226, 189, 38, 195, 185, 189, 222, 242, 159, 189, 144, 187, 19, 62, 55, 234, 10, 62, 99, 16, 39, 190, 225, 101, 55, 189, 125, 5, 215, 61, 128, 253, 75, 191, 2, 193, 9, 189, 49, 2, 58, 62, 211, 179, 16, 62, 149, 140, 186, 189, 7, 109, 226, 189, 152, 34, 57, 61, 86, 121, 138, 189, 188, 93, 98, 189, 24, 57, 45, 190, 105, 35, 169, 61, 12, 151, 2, 60, 113, 252, 191, 61, 239, 19, 252, 60, 165, 41, 107, 61, 177, 104, 157, 62, 165, 217, 150, 61, 29, 64, 6, 61, 138, 171, 50, 62, 32, 74, 39, 189, 181, 253, 104, 61, 16, 179, 134, 62, 181, 235, 113, 62, 166, 176, 71, 189, 180, 70, 228, 189, 31, 207, 175, 190, 134, 170, 203, 189, 115, 157, 85, 61, 35, 77, 177, 62, 58, 65, 31, 190, 43, 209, 122, 62, 172, 250, 60, 62, 56, 139, 124, 191, 254, 199, 64, 190, 102, 146, 33, 186, 96, 177, 141, 190, 143, 15, 191, 188, 74, 147, 123, 61, 124, 228, 53, 190, 227, 128, 207, 189, 26, 212, 186, 189, 61, 225, 14, 59, 163, 65, 201, 61, 30, 141, 143, 188, 138, 90, 32, 62, 246, 142, 13, 61, 225, 237, 100, 62, 122, 173, 11, 191, 55, 198, 136, 190, 157, 153, 35, 62, 106, 14, 62, 191, 58, 78, 120, 62, 76, 61, 43, 62, 78, 225, 178, 190, 107, 120, 200, 188, 83, 212, 119, 62, 177, 57, 4, 62, 25, 75, 50, 62, 167, 170, 96, 62, 7, 93, 186, 60, 158, 137, 229, 190, 220, 69, 198, 61, 102, 32, 105, 190, 8, 16, 147, 190, 184, 144, 132, 61, 72, 248, 153, 62, 78, 53, 132, 190, 81, 176, 91, 191, 12, 119, 73, 191, 51, 16, 74, 189, 91, 118, 51, 191, 164, 13, 70, 189, 46, 108, 106, 62, 40, 189, 140, 62, 71, 73, 0, 191, 244, 29, 55, 62, 232, 43, 76, 188, 103, 79, 243, 188, 215, 146, 129, 190, 178, 6, 47, 191, 231, 102, 78, 190, 230, 28, 166, 189, 186, 21, 128, 189, 70, 119, 48, 62, 157, 58, 142, 62, 235, 104, 127, 191, 132, 234, 25, 191, 221, 17, 134, 190, 247, 97, 139, 62, 61, 242, 37, 62, 233, 29, 2, 59, 98, 181, 140, 190, 65, 215, 132, 190, 217, 205, 166, 62, 65, 93, 4, 191, 20, 233, 203, 189, 90, 234, 75, 62, 195, 97, 114, 62, 22, 50, 45, 190, 241, 215, 30, 191, 168, 140, 36, 191, 189, 112, 225, 61, 194, 204, 219, 190, 16, 167, 85, 190, 15, 147, 119, 62, 128, 235, 166, 62, 62, 43, 47, 190, 158, 224, 151, 62, 60, 112, 118, 62, 26, 165, 164, 62, 45, 241, 181, 190, 45, 254, 54, 190, 47, 11, 145, 189, 190, 139, 188, 189, 29, 44, 104, 190, 218, 241, 115, 61, 92, 195, 93, 62, 220, 97, 41, 190, 0, 161, 181, 190, 124, 81, 6, 63, 48, 231, 255, 61, 74, 149, 203, 61, 19, 14, 216, 61, 255, 63, 170, 61, 180, 68, 34, 191, 247, 252, 228, 189, 89, 152, 64, 189, 17, 134, 209, 190, 170, 96, 44, 62, 131, 159, 124, 61, 209, 110, 161, 190, 76, 216, 11, 191, 252, 78, 35, 191, 143, 165, 172, 189, 221, 171, 129, 191, 25, 196, 222, 61, 71, 180, 15, 62, 249, 207, 95, 189, 103, 238, 45, 191, 45, 66, 72, 62, 224, 86, 214, 61, 206, 5, 57, 62, 218, 237, 80, 60, 6, 172, 29, 61, 198, 3, 229, 61, 10, 122, 20, 190, 238, 164, 198, 188, 35, 128, 65, 62, 104, 70, 59, 190, 232, 112, 162, 60, 186, 221, 49, 190, 33, 63, 206, 189, 226, 181, 200, 187, 5, 198, 82, 190, 13, 160, 5, 61, 89, 66, 149, 189, 234, 171, 4, 62, 122, 170, 255, 189, 148, 200, 38, 61, 69, 87, 43, 62, 163, 117, 75, 59, 34, 135, 237, 61, 249, 98, 24, 62, 168, 172, 206, 61, 79, 203, 62, 190, 206, 97, 144, 189, 120, 39, 58, 61, 162, 145, 106, 189, 255, 76, 37, 190, 17, 20, 50, 190, 97, 25, 9, 189, 135, 33, 183, 187, 32, 116, 79, 188, 98, 189, 161, 61, 10, 108, 236, 61, 226, 22, 70, 62, 64, 11, 130, 62, 174, 161, 134, 61, 165, 51, 98, 62, 195, 222, 202, 190, 70, 113, 132, 61, 32, 227, 115, 62, 241, 56, 26, 191, 187, 248, 195, 189, 177, 185, 108, 62, 246, 103, 131, 60, 171, 237, 56, 62, 229, 90, 135, 61, 76, 112, 66, 62, 43, 123, 71, 61, 82, 120, 33, 61, 182, 121, 170, 188, 232, 149, 122, 191, 153, 204, 30, 62, 64, 111, 18, 61, 11, 187, 203, 60, 143, 152, 9, 190, 241, 235, 23, 190, 141, 180, 140, 190, 196, 206, 170, 190, 196, 52, 222, 61, 46, 0, 131, 188, 107, 252, 248, 60, 232, 183, 20, 190, 19, 155, 41, 62, 125, 169, 221, 189, 187, 53, 155, 61, 98, 155, 58, 62, 136, 94, 238, 61, 50, 250, 140, 61, 207, 219, 5, 61, 246, 31, 15, 190, 174, 191, 159, 189, 71, 227, 193, 61, 135, 236, 49, 190, 37, 152, 201, 188, 172, 3, 200, 188, 162, 223, 90, 190, 38, 34, 49, 189, 191, 101, 29, 62, 193, 3, 126, 190, 133, 242, 172, 59, 201, 111, 143, 189, 118, 106, 1, 60, 195, 96, 23, 189, 210, 200, 122, 189, 216, 75, 77, 190, 199, 170, 15, 190, 96, 161, 143, 60, 15, 142, 158, 190, 45, 116, 17, 62, 41, 93, 225, 187, 231, 245, 68, 190, 159, 246, 145, 61, 3, 116, 201, 188, 147, 184, 128, 189, 73, 134, 190, 189, 199, 83, 33, 190, 250, 196, 249, 188, 53, 224, 203, 189, 67, 161, 128, 62, 27, 131, 221, 190, 16, 77, 109, 62, 248, 28, 124, 190, 183, 91, 86, 61, 158, 163, 128, 62, 122, 39, 71, 190, 214, 189, 11, 190, 130, 45, 36, 61, 193, 210, 152, 191, 179, 158, 7, 62, 195, 133, 176, 61, 6, 33, 103, 62, 228, 4, 60, 190, 33, 120, 179, 61, 22, 216, 250, 188, 57, 18, 27, 191, 62, 240, 10, 62, 107, 157, 180, 189, 172, 27, 232, 59, 52, 65, 206, 61, 226, 85, 8, 62, 25, 17, 179, 61, 155, 2, 126, 62, 30, 246, 134, 190, 126, 120, 6, 191, 90, 139, 25, 62, 34, 56, 75, 190, 7, 41, 170, 61, 33, 216, 107, 191, 78, 110, 76, 190, 39, 245, 3, 191, 245, 103, 57, 190, 44, 121, 45, 62, 92, 234, 138, 190, 179, 98, 154, 62, 233, 121, 38, 62, 95, 37, 137, 190, 190, 153, 210, 190, 130, 110, 36, 62, 207, 28, 201, 62, 64, 148, 22, 62, 248, 80, 64, 61, 155, 219, 155, 190, 106, 216, 247, 190, 204, 5, 203, 62, 188, 32, 230, 190, 18, 111, 61, 190, 78, 36, 102, 62, 209, 68, 163, 62, 58, 32, 179, 190, 87, 107, 123, 191, 87, 158, 144, 191, 165, 169, 186, 60, 237, 70, 17, 191, 82, 113, 83, 62, 66, 112, 228, 61, 33, 106, 144, 62, 255, 27, 165, 190, 154, 70, 139, 62, 170, 66, 102, 58, 75, 66, 127, 62, 136, 228, 137, 190, 128, 5, 54, 190, 194, 227, 74, 189, 153, 70, 170, 190, 55, 217, 191, 60, 110, 252, 106, 61, 253, 51, 192, 190, 199, 45, 28, 190, 76, 123, 134, 190, 87, 49, 150, 60, 209, 101, 129, 62, 55, 67, 188, 189, 59, 93, 158, 61, 55, 92, 102, 60, 226, 27, 3, 61, 131, 243, 61, 62, 64, 88, 43, 190, 47, 103, 71, 63, 61, 119, 85, 62, 103, 245, 109, 61, 88, 108, 128, 61, 66, 191, 104, 190, 215, 58, 167, 189, 68, 223, 120, 190, 240, 7, 163, 190, 25, 10, 239, 190, 32, 110, 160, 61, 28, 161, 222, 62, 5, 88, 60, 190, 233, 13, 170, 61, 58, 181, 194, 61, 22, 125, 0, 62, 216, 228, 58, 191, 219, 33, 6, 62, 238, 165, 88, 189, 122, 57, 8, 190, 163, 209, 227, 59, 221, 89, 60, 190, 103, 234, 35, 190, 82, 51, 118, 61, 147, 34, 239, 61, 216, 119, 227, 188, 199, 142, 211, 189, 133, 118, 19, 190, 241, 170, 195, 61, 54, 226, 178, 189, 230, 64, 146, 189, 233, 80, 15, 62, 156, 98, 251, 189, 251, 165, 158, 188, 50, 17, 1, 62, 196, 29, 136, 189, 212, 71, 216, 60, 141, 182, 251, 59, 195, 55, 9, 190, 32, 175, 254, 189, 131, 98, 29, 189, 92, 93, 11, 189, 192, 254, 30, 190, 220, 161, 186, 188, 229, 208, 14, 190, 206, 170, 177, 189, 203, 134, 46, 189, 197, 129, 35, 190, 19, 214, 46, 62, 149, 240, 214, 61, 126, 13, 122, 189, 62, 149, 67, 60, 102, 231, 35, 61, 206, 222, 154, 62, 114, 189, 41, 62, 181, 222, 42, 189, 190, 144, 4, 62, 200, 163, 156, 190, 155, 80, 192, 189, 253, 238, 130, 60, 58, 81, 58, 190, 210, 34, 100, 62, 90, 209, 53, 62, 247, 254, 210, 60, 62, 220, 47, 62, 222, 112, 149, 61, 0, 19, 229, 190, 51, 113, 73, 189, 92, 32, 49, 62, 64, 222, 35, 62, 238, 20, 169, 61, 233, 213, 122, 62, 75, 72, 241, 186, 217, 193, 119, 189, 247, 39, 160, 189, 101, 51, 70, 60, 244, 98, 255, 60, 143, 44, 126, 61, 92, 47, 190, 61, 143, 132, 43, 61, 215, 195, 148, 188, 54, 83, 147, 190, 44, 185, 43, 190, 78, 161, 166, 61, 23, 185, 40, 62, 169, 158, 37, 62, 184, 215, 152, 61, 42, 179, 106, 190, 148, 135, 229, 190, 117, 162, 27, 191, 204, 164, 250, 60, 116, 152, 197, 61, 183, 227, 244, 61, 196, 238, 192, 61, 39, 175, 243, 189, 230, 103, 26, 62, 28, 162, 254, 59, 78, 163, 160, 189, 36, 206, 36, 62, 88, 144, 179, 62, 137, 73, 95, 190, 126, 146, 242, 190, 22, 174, 183, 190, 203, 186, 252, 61, 233, 123, 254, 190, 237, 136, 192, 188, 195, 177, 18, 62, 65, 78, 38, 62, 145, 52, 25, 62, 32, 186, 6, 62, 101, 218, 10, 62, 90, 190, 15, 62, 69, 189, 200, 189, 47, 148, 124, 190, 145, 128, 25, 190, 28, 81, 85, 61, 84, 232, 13, 190, 8, 186, 16, 191, 243, 229, 168, 189, 132, 67, 107, 191, 109, 155, 127, 190, 229, 42, 7, 62, 42, 229, 30, 189, 87, 0, 177, 62, 180, 119, 238, 61, 180, 164, 115, 190, 101, 113, 234, 58, 113, 60, 133, 62, 48, 62, 17, 190, 29, 74, 123, 190, 101, 26, 81, 63, 44, 59, 206, 60, 104, 11, 236, 190, 59, 175, 182, 60, 161, 159, 46, 60, 71, 23, 203, 189, 154, 126, 47, 189, 24, 24, 73, 62, 19, 252, 103, 62, 61, 68, 77, 62, 70, 59, 109, 189, 69, 37, 4, 62, 43, 173, 185, 59, 200, 94, 88, 62, 255, 181, 24, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 20, 94, 190, 27, 192, 51, 62, 41, 112, 102, 62, 136, 49, 102, 189, 77, 11, 27, 62, 86, 115, 230, 60, 228, 222, 34, 61, 154, 222, 75, 61, 26, 219, 150, 62, 218, 119, 200, 190, 175, 237, 128, 61, 211, 243, 131, 190, 12, 107, 77, 190, 2, 73, 36, 62, 51, 85, 224, 189, 69, 206, 131, 62, 187, 223, 184, 62, 232, 60, 144, 62, 66, 1, 243, 60, 99, 181, 109, 62, 103, 73, 28, 62, 120, 255, 153, 62, 190, 234, 211, 188, 82, 88, 23, 190, 171, 15, 18, 190, 253, 78, 215, 61, 230, 99, 216, 62, 10, 188, 44, 189, 89, 228, 243, 61, 152, 33, 176, 62, 163, 7, 32, 62, 219, 235, 247, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 212, 7, 189, 79, 122, 188, 191, 90, 198, 137, 63, 102, 241, 13, 191, 220, 239, 35, 62, 236, 111, 185, 62, 184, 93, 4, 191, 226, 188, 21, 191, 173, 178, 23, 62, 135, 90, 99, 63, 223, 61, 239, 190, 109, 5, 80, 62, 176, 196, 3, 191, 7, 45, 119, 191, 21, 69, 48, 190, 16, 52, 151, 189, 30, 248, 133, 191, 253, 126, 205, 189, 155, 246, 177, 190, 198, 104, 22, 63, 131, 107, 49, 63, 95, 150, 92, 62, 142, 74, 3, 61, 71, 1, 44, 190, 75, 119, 234, 61, 222, 110, 154, 189, 119, 46, 37, 63, 18, 229, 3, 63, 48, 182, 146, 61, 84, 212, 92, 188, 63, 210, 54, 62, 31, 112, 239, 62, 65, 36, 24, 62, 226, 121, 191, 61, 27, 150, 195, 61, 51, 184, 164, 189, 212, 148, 230, 190, 110, 83, 128, 190, 100, 15, 67, 61, 255, 128, 89, 62, 59, 156, 139, 190, 111, 53, 64, 62, 203, 44, 62, 62, 16, 107, 49, 62, 90, 105, 169, 188, 42, 236, 95, 190, 52, 153, 2, 61, 163, 198, 158, 188, 231, 5, 248, 61, 61, 146, 21, 190, 30, 186, 135, 62, 108, 86, 18, 189, 159, 36, 15, 62, 12, 237, 44, 189, 191, 208, 35, 190, 18, 55, 164, 190, 59, 81, 92, 62, 212, 232, 229, 190, 104, 102, 226, 61, 183, 122, 223, 62, 67, 64, 139, 189, 238, 25, 114, 190, 248, 60, 110, 190, 59, 177, 228, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {160, 27, 7, 190, 46, 116, 42, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {155, 51, 220, 62, 2, 89, 162, 62, 96, 205, 142, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {6, 122, 209, 191, 248, 206, 171, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0049/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}