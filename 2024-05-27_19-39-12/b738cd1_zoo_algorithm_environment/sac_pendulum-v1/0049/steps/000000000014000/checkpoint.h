// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 170, 98, 63, 155, 228, 170, 62, 228, 87, 189, 62, 93, 93, 70, 63, 248, 87, 177, 61, 217, 119, 19, 63, 100, 249, 122, 62, 3, 123, 95, 63, 43, 134, 240, 62, 39, 203, 225, 62, 145, 62, 189, 62, 52, 189, 4, 189, 122, 58, 170, 190, 97, 230, 135, 191, 155, 231, 235, 189, 124, 127, 129, 190, 139, 205, 129, 189, 244, 52, 32, 59, 248, 26, 225, 62, 160, 13, 72, 63, 38, 254, 63, 61, 247, 107, 26, 191, 133, 210, 184, 191, 82, 184, 166, 190, 15, 200, 242, 189, 28, 252, 215, 62, 233, 194, 142, 190, 244, 211, 3, 63, 6, 103, 19, 191, 193, 26, 19, 190, 31, 39, 221, 190, 93, 68, 173, 62, 64, 102, 9, 63, 200, 153, 27, 61, 119, 229, 237, 188, 255, 219, 122, 190, 215, 56, 5, 63, 239, 73, 164, 61, 44, 193, 251, 62, 123, 42, 10, 63, 101, 51, 0, 63, 174, 182, 226, 190, 243, 74, 73, 63, 67, 3, 20, 191, 221, 62, 17, 191, 242, 171, 52, 63, 167, 47, 18, 63, 233, 81, 193, 62, 53, 12, 144, 189, 128, 2, 11, 191, 184, 55, 114, 62, 147, 105, 96, 63, 45, 221, 136, 191, 40, 115, 167, 190, 102, 131, 7, 63, 85, 227, 33, 191, 111, 100, 130, 190, 56, 91, 103, 190, 31, 18, 127, 191, 237, 176, 251, 61, 161, 244, 235, 189, 22, 80, 235, 189, 200, 122, 171, 190, 158, 134, 169, 189, 68, 137, 227, 189, 250, 165, 12, 191, 167, 41, 101, 190, 113, 25, 235, 189, 207, 6, 129, 190, 242, 241, 97, 190, 209, 3, 97, 191, 97, 115, 244, 190, 203, 156, 139, 191, 101, 129, 4, 62, 46, 243, 136, 61, 115, 124, 5, 190, 116, 141, 172, 190, 170, 97, 22, 63, 108, 188, 251, 61, 241, 13, 90, 191, 213, 25, 72, 62, 17, 7, 21, 63, 80, 249, 60, 62, 188, 14, 130, 190, 90, 242, 231, 62, 143, 116, 148, 191, 36, 92, 172, 190, 143, 118, 159, 62, 52, 243, 173, 62, 35, 137, 73, 188, 206, 202, 69, 60, 209, 223, 139, 190, 197, 87, 5, 63, 205, 218, 4, 63, 157, 32, 96, 63, 230, 60, 11, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 121, 148, 191, 237, 169, 230, 61, 130, 132, 195, 62, 183, 139, 211, 61, 160, 90, 162, 62, 30, 112, 37, 63, 39, 96, 202, 190, 89, 222, 148, 60, 236, 171, 18, 191, 15, 52, 174, 62, 115, 14, 73, 190, 237, 50, 154, 62, 244, 93, 88, 62, 205, 251, 133, 62, 79, 114, 7, 191, 243, 194, 95, 191, 181, 208, 203, 61, 73, 201, 38, 191, 144, 111, 82, 62, 138, 88, 111, 190, 245, 191, 94, 190, 238, 232, 145, 190, 122, 0, 4, 63, 148, 152, 44, 190, 175, 204, 128, 189, 92, 240, 10, 63, 178, 59, 154, 62, 146, 202, 155, 62, 108, 170, 130, 61, 251, 68, 255, 62, 74, 137, 95, 62, 45, 114, 152, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 4, 52, 62, 206, 156, 11, 189, 216, 81, 236, 60, 219, 195, 169, 61, 155, 110, 99, 190, 197, 234, 253, 189, 66, 6, 144, 188, 34, 179, 39, 62, 94, 78, 51, 189, 199, 12, 163, 189, 194, 88, 8, 190, 245, 194, 195, 188, 62, 254, 224, 61, 189, 32, 60, 62, 88, 215, 5, 189, 236, 123, 193, 189, 160, 147, 112, 189, 245, 19, 20, 190, 113, 9, 252, 189, 228, 115, 8, 189, 148, 118, 248, 188, 104, 195, 215, 189, 31, 40, 70, 190, 110, 115, 155, 189, 127, 86, 21, 62, 224, 239, 15, 62, 36, 76, 164, 189, 159, 158, 63, 61, 173, 143, 181, 60, 120, 60, 13, 190, 221, 111, 44, 190, 175, 2, 119, 188, 68, 109, 250, 189, 215, 111, 230, 60, 77, 131, 83, 191, 70, 114, 178, 190, 130, 75, 231, 62, 7, 186, 28, 189, 76, 252, 20, 188, 40, 77, 171, 62, 187, 69, 60, 191, 165, 125, 99, 191, 58, 1, 89, 191, 243, 114, 111, 191, 215, 39, 141, 62, 105, 58, 101, 190, 215, 233, 147, 190, 30, 110, 182, 188, 53, 128, 56, 63, 107, 245, 8, 191, 136, 202, 23, 191, 60, 203, 71, 63, 5, 221, 169, 190, 196, 154, 117, 190, 114, 220, 97, 61, 7, 116, 18, 190, 189, 31, 125, 62, 221, 75, 50, 61, 96, 185, 31, 62, 249, 137, 247, 190, 219, 145, 197, 190, 53, 65, 249, 190, 227, 77, 3, 191, 106, 49, 175, 61, 197, 114, 52, 190, 57, 204, 221, 189, 167, 10, 6, 61, 110, 194, 1, 62, 176, 195, 172, 190, 192, 44, 253, 61, 119, 63, 215, 189, 174, 106, 151, 62, 32, 219, 191, 62, 53, 55, 255, 190, 124, 223, 87, 189, 33, 132, 141, 61, 118, 204, 196, 189, 104, 11, 56, 191, 125, 216, 132, 61, 168, 139, 58, 62, 97, 142, 2, 191, 35, 134, 50, 190, 255, 189, 223, 189, 58, 227, 37, 191, 83, 161, 137, 190, 32, 181, 185, 191, 167, 69, 135, 62, 109, 76, 232, 191, 145, 147, 133, 62, 220, 25, 169, 189, 250, 232, 146, 190, 196, 160, 120, 191, 135, 20, 174, 190, 77, 182, 151, 62, 92, 233, 1, 190, 239, 130, 229, 188, 215, 142, 9, 63, 77, 177, 156, 62, 113, 57, 138, 189, 154, 218, 14, 62, 189, 113, 156, 190, 134, 107, 17, 62, 180, 182, 43, 62, 62, 159, 7, 190, 97, 205, 45, 190, 56, 144, 245, 189, 201, 27, 142, 189, 70, 188, 90, 61, 69, 147, 118, 60, 249, 157, 174, 62, 18, 53, 193, 190, 40, 150, 67, 62, 92, 238, 139, 189, 135, 104, 137, 191, 227, 249, 10, 62, 49, 197, 12, 62, 89, 99, 192, 61, 112, 107, 229, 61, 186, 115, 55, 189, 172, 98, 136, 190, 92, 37, 92, 189, 22, 222, 192, 189, 180, 172, 37, 62, 125, 104, 131, 62, 249, 20, 204, 190, 40, 242, 175, 188, 250, 192, 47, 190, 131, 218, 134, 62, 202, 183, 236, 190, 122, 115, 237, 61, 189, 163, 34, 190, 80, 40, 164, 189, 102, 137, 83, 62, 125, 219, 83, 62, 200, 214, 101, 189, 72, 126, 15, 191, 102, 24, 6, 191, 140, 237, 56, 62, 238, 211, 79, 190, 235, 51, 251, 60, 135, 248, 205, 60, 116, 66, 183, 188, 163, 130, 4, 190, 211, 86, 126, 190, 190, 32, 83, 190, 185, 200, 175, 190, 210, 94, 204, 61, 41, 197, 40, 189, 250, 186, 249, 190, 224, 202, 134, 190, 100, 221, 187, 189, 46, 60, 33, 191, 90, 222, 93, 61, 254, 125, 5, 62, 44, 66, 169, 62, 197, 15, 238, 189, 34, 217, 12, 62, 237, 52, 25, 62, 102, 16, 77, 62, 211, 203, 135, 190, 213, 60, 82, 189, 213, 65, 198, 190, 76, 236, 217, 59, 254, 204, 231, 61, 3, 24, 156, 190, 220, 233, 142, 189, 224, 198, 30, 191, 118, 45, 34, 190, 82, 89, 223, 61, 232, 86, 215, 61, 97, 152, 79, 189, 95, 38, 53, 62, 178, 92, 152, 190, 107, 252, 1, 62, 50, 254, 190, 62, 208, 79, 123, 61, 203, 32, 112, 191, 221, 167, 175, 62, 79, 54, 253, 61, 95, 212, 155, 191, 2, 23, 31, 189, 238, 221, 31, 190, 109, 99, 4, 190, 74, 91, 59, 190, 70, 87, 123, 191, 39, 255, 238, 190, 228, 212, 238, 189, 213, 4, 38, 62, 105, 152, 89, 62, 95, 206, 216, 61, 103, 59, 128, 190, 168, 71, 206, 190, 144, 122, 153, 62, 136, 254, 186, 62, 93, 76, 57, 62, 176, 153, 224, 62, 209, 33, 168, 190, 23, 77, 3, 61, 232, 20, 21, 62, 104, 73, 202, 189, 176, 221, 72, 62, 124, 181, 19, 62, 98, 215, 233, 60, 31, 91, 157, 61, 39, 59, 130, 62, 142, 30, 70, 62, 55, 139, 195, 189, 59, 83, 137, 62, 5, 104, 213, 189, 221, 122, 144, 191, 114, 205, 41, 190, 38, 155, 209, 189, 52, 218, 17, 190, 36, 134, 238, 189, 201, 174, 43, 190, 101, 14, 120, 61, 4, 50, 138, 190, 63, 18, 149, 189, 177, 195, 81, 190, 59, 1, 185, 61, 113, 46, 155, 190, 192, 67, 63, 62, 95, 134, 133, 190, 158, 198, 150, 61, 241, 22, 33, 62, 11, 2, 170, 62, 95, 10, 162, 188, 118, 14, 118, 189, 223, 188, 235, 188, 178, 106, 107, 62, 172, 240, 102, 61, 157, 144, 121, 62, 43, 40, 145, 190, 31, 137, 190, 189, 24, 127, 242, 190, 51, 11, 254, 61, 68, 170, 176, 62, 11, 218, 145, 61, 195, 56, 246, 190, 32, 133, 198, 189, 113, 172, 34, 62, 181, 15, 90, 191, 2, 116, 164, 189, 121, 104, 197, 61, 20, 111, 68, 62, 110, 30, 79, 62, 135, 177, 181, 62, 72, 146, 213, 61, 134, 97, 246, 188, 191, 235, 108, 190, 160, 155, 20, 188, 147, 62, 159, 62, 138, 245, 139, 190, 244, 70, 104, 61, 9, 27, 179, 190, 53, 141, 3, 62, 136, 236, 179, 190, 96, 185, 182, 189, 146, 102, 76, 62, 80, 232, 251, 188, 115, 70, 139, 188, 190, 48, 58, 62, 117, 48, 126, 61, 62, 221, 2, 190, 3, 169, 153, 188, 76, 163, 141, 62, 71, 5, 166, 189, 73, 183, 111, 62, 79, 174, 32, 190, 210, 141, 234, 61, 108, 29, 15, 62, 144, 170, 65, 190, 172, 246, 186, 189, 209, 56, 3, 62, 162, 237, 55, 61, 159, 192, 174, 190, 121, 104, 47, 62, 99, 51, 27, 190, 69, 53, 84, 62, 40, 192, 146, 60, 31, 4, 130, 190, 118, 212, 95, 189, 214, 23, 175, 62, 161, 90, 160, 61, 2, 233, 105, 62, 178, 91, 137, 62, 27, 91, 164, 62, 48, 240, 31, 190, 207, 8, 181, 62, 23, 211, 7, 62, 148, 252, 47, 61, 70, 152, 36, 62, 45, 85, 21, 191, 174, 66, 5, 191, 219, 108, 56, 62, 209, 131, 109, 190, 134, 219, 151, 189, 201, 251, 234, 189, 93, 192, 161, 61, 157, 106, 106, 59, 16, 121, 58, 62, 15, 144, 176, 188, 209, 247, 233, 62, 81, 201, 246, 62, 64, 220, 182, 61, 248, 43, 82, 63, 7, 40, 232, 61, 104, 234, 50, 191, 210, 69, 18, 61, 226, 29, 19, 61, 221, 73, 199, 189, 151, 154, 19, 62, 159, 146, 95, 191, 126, 45, 17, 190, 155, 56, 126, 190, 85, 246, 140, 61, 129, 160, 132, 62, 234, 152, 102, 60, 53, 153, 49, 61, 113, 191, 163, 62, 119, 211, 120, 60, 231, 5, 62, 62, 14, 221, 182, 61, 15, 0, 221, 59, 179, 26, 173, 190, 116, 81, 96, 61, 151, 137, 82, 62, 203, 37, 177, 189, 229, 231, 130, 190, 126, 233, 156, 61, 229, 197, 93, 190, 203, 67, 60, 61, 173, 184, 94, 61, 230, 134, 183, 61, 65, 233, 53, 190, 126, 56, 89, 62, 4, 190, 21, 189, 173, 12, 138, 191, 230, 98, 133, 189, 255, 109, 92, 60, 9, 114, 72, 62, 137, 178, 62, 189, 15, 233, 20, 62, 32, 65, 74, 189, 172, 101, 106, 190, 35, 214, 249, 188, 81, 71, 154, 189, 226, 54, 44, 62, 215, 237, 39, 190, 52, 25, 146, 62, 92, 173, 61, 190, 35, 57, 131, 62, 255, 48, 236, 188, 173, 231, 135, 190, 55, 99, 42, 190, 153, 77, 18, 62, 25, 250, 7, 191, 227, 182, 204, 190, 74, 78, 110, 190, 4, 84, 114, 60, 38, 131, 126, 62, 48, 12, 174, 188, 75, 183, 33, 190, 24, 227, 87, 61, 47, 190, 117, 189, 118, 96, 51, 189, 18, 120, 17, 190, 196, 5, 210, 61, 206, 158, 73, 189, 233, 87, 47, 189, 80, 95, 3, 190, 107, 172, 125, 188, 115, 7, 191, 60, 153, 216, 158, 189, 240, 30, 141, 60, 132, 68, 86, 62, 227, 91, 1, 190, 75, 251, 180, 190, 40, 242, 109, 60, 183, 192, 148, 61, 131, 67, 104, 190, 186, 234, 209, 60, 47, 248, 105, 59, 62, 189, 65, 190, 53, 93, 9, 63, 39, 219, 162, 61, 236, 183, 2, 190, 249, 142, 241, 190, 218, 125, 79, 62, 168, 42, 46, 190, 198, 107, 195, 189, 215, 134, 195, 62, 200, 152, 209, 61, 233, 73, 67, 190, 130, 91, 149, 189, 148, 4, 143, 188, 222, 205, 79, 188, 26, 64, 238, 188, 186, 193, 107, 190, 10, 125, 203, 62, 26, 43, 253, 60, 29, 164, 187, 190, 160, 64, 227, 189, 164, 123, 90, 62, 215, 227, 34, 62, 201, 237, 90, 62, 192, 112, 97, 62, 42, 250, 13, 62, 184, 119, 210, 60, 9, 15, 43, 61, 34, 172, 128, 62, 134, 180, 42, 190, 250, 155, 24, 62, 204, 165, 194, 190, 87, 24, 147, 190, 85, 72, 136, 62, 68, 248, 140, 189, 24, 150, 148, 190, 64, 78, 114, 191, 126, 170, 59, 190, 120, 135, 136, 62, 22, 196, 19, 62, 99, 55, 68, 61, 103, 56, 118, 62, 123, 228, 7, 190, 67, 70, 17, 191, 127, 52, 48, 191, 121, 24, 2, 191, 131, 81, 166, 188, 3, 13, 103, 62, 218, 210, 232, 190, 43, 33, 171, 59, 239, 122, 91, 63, 2, 223, 210, 190, 29, 101, 204, 190, 1, 64, 68, 63, 41, 43, 10, 62, 8, 214, 3, 190, 148, 249, 205, 189, 215, 237, 159, 190, 4, 53, 151, 62, 168, 43, 3, 62, 238, 56, 128, 190, 170, 85, 137, 59, 179, 198, 160, 190, 141, 177, 139, 190, 92, 230, 222, 190, 165, 160, 60, 189, 99, 159, 53, 189, 198, 179, 50, 61, 179, 249, 197, 187, 244, 187, 150, 189, 163, 17, 157, 61, 227, 197, 128, 189, 0, 217, 35, 188, 217, 73, 15, 190, 106, 89, 255, 60, 32, 175, 168, 189, 128, 78, 27, 190, 36, 10, 112, 61, 247, 131, 84, 189, 146, 173, 21, 190, 252, 103, 40, 62, 71, 63, 118, 188, 236, 175, 43, 190, 228, 215, 196, 189, 195, 224, 145, 188, 247, 108, 47, 62, 150, 29, 128, 189, 51, 168, 167, 61, 31, 211, 20, 190, 94, 139, 227, 60, 190, 113, 23, 62, 35, 90, 41, 190, 167, 207, 60, 61, 26, 181, 220, 61, 114, 64, 17, 188, 66, 134, 31, 190, 22, 7, 3, 62, 17, 109, 198, 189, 226, 202, 129, 190, 129, 220, 251, 61, 61, 13, 85, 61, 16, 51, 115, 61, 33, 163, 170, 190, 250, 213, 179, 61, 210, 247, 133, 62, 181, 207, 45, 189, 63, 35, 19, 190, 98, 157, 3, 190, 112, 254, 133, 190, 50, 254, 211, 189, 153, 121, 224, 61, 141, 255, 105, 61, 77, 174, 5, 190, 90, 180, 235, 189, 38, 83, 103, 62, 235, 204, 6, 191, 188, 208, 224, 60, 142, 206, 158, 190, 250, 127, 8, 62, 187, 31, 240, 61, 235, 114, 249, 189, 237, 176, 15, 189, 116, 107, 13, 62, 208, 243, 135, 189, 141, 110, 13, 190, 92, 87, 35, 62, 76, 239, 134, 190, 241, 121, 13, 61, 103, 58, 237, 188, 124, 18, 237, 61, 147, 96, 76, 189, 190, 115, 63, 190, 201, 125, 47, 190, 78, 234, 84, 61, 97, 137, 208, 62, 198, 90, 142, 62, 135, 112, 85, 63, 253, 224, 3, 62, 204, 62, 119, 190, 79, 121, 200, 59, 251, 88, 149, 191, 243, 91, 91, 189, 33, 57, 149, 190, 194, 199, 163, 188, 146, 28, 202, 190, 104, 24, 166, 190, 92, 122, 114, 188, 245, 41, 74, 191, 18, 216, 204, 188, 150, 136, 253, 62, 7, 119, 234, 60, 93, 255, 29, 62, 26, 250, 136, 62, 26, 29, 4, 61, 56, 32, 67, 190, 107, 47, 86, 191, 70, 170, 55, 190, 2, 231, 222, 188, 190, 131, 244, 187, 99, 72, 137, 62, 96, 245, 184, 191, 158, 97, 212, 190, 196, 155, 30, 62, 215, 210, 190, 189, 55, 63, 212, 61, 184, 121, 217, 61, 53, 15, 144, 189, 51, 225, 202, 61, 107, 228, 146, 62, 181, 32, 220, 189, 12, 251, 2, 60, 58, 38, 245, 189, 152, 169, 194, 189, 147, 238, 179, 189, 46, 198, 17, 62, 254, 226, 4, 62, 113, 157, 46, 190, 247, 199, 156, 189, 174, 183, 231, 61, 154, 227, 112, 191, 137, 56, 84, 189, 68, 46, 74, 62, 3, 133, 17, 62, 187, 18, 170, 189, 176, 54, 6, 190, 9, 23, 49, 61, 111, 184, 110, 189, 11, 33, 61, 189, 203, 97, 46, 190, 107, 111, 148, 61, 91, 13, 57, 189, 195, 216, 200, 61, 214, 245, 46, 61, 46, 154, 133, 61, 249, 219, 176, 62, 189, 235, 90, 61, 165, 69, 24, 61, 53, 167, 24, 62, 21, 184, 186, 189, 220, 204, 25, 61, 51, 185, 154, 62, 94, 160, 139, 62, 193, 4, 174, 188, 134, 204, 35, 190, 135, 125, 152, 190, 80, 255, 206, 189, 124, 2, 18, 61, 113, 63, 173, 62, 21, 191, 34, 190, 184, 5, 160, 62, 222, 244, 54, 62, 56, 69, 137, 191, 29, 221, 107, 190, 18, 223, 238, 187, 63, 93, 133, 190, 91, 76, 15, 187, 193, 83, 115, 61, 162, 44, 45, 190, 100, 183, 119, 61, 127, 46, 172, 189, 42, 34, 154, 188, 227, 124, 159, 61, 231, 220, 147, 189, 93, 157, 246, 61, 60, 207, 52, 61, 200, 243, 127, 62, 174, 252, 28, 191, 152, 151, 133, 190, 1, 234, 26, 62, 110, 43, 79, 191, 196, 36, 156, 62, 69, 97, 72, 62, 181, 103, 212, 190, 247, 96, 146, 189, 163, 13, 119, 62, 202, 180, 12, 62, 250, 36, 24, 62, 161, 216, 97, 62, 196, 61, 235, 60, 50, 23, 237, 190, 30, 228, 143, 61, 103, 41, 156, 190, 165, 147, 139, 190, 92, 83, 76, 188, 45, 226, 151, 62, 8, 168, 106, 190, 230, 108, 82, 191, 113, 227, 49, 191, 215, 0, 211, 188, 22, 240, 41, 191, 180, 104, 15, 190, 83, 92, 109, 62, 59, 148, 151, 62, 27, 247, 15, 191, 250, 18, 74, 62, 95, 18, 123, 60, 104, 236, 238, 188, 199, 223, 141, 190, 142, 221, 66, 191, 203, 50, 71, 190, 146, 199, 168, 189, 33, 201, 133, 189, 255, 187, 72, 62, 74, 247, 151, 62, 109, 216, 139, 191, 75, 42, 57, 191, 166, 149, 131, 190, 14, 171, 136, 62, 162, 241, 24, 62, 236, 87, 31, 188, 186, 166, 136, 190, 134, 81, 134, 190, 32, 18, 158, 62, 252, 125, 22, 191, 20, 116, 188, 189, 94, 157, 56, 62, 220, 28, 108, 62, 97, 121, 29, 190, 133, 205, 50, 191, 140, 99, 54, 191, 97, 207, 207, 61, 70, 106, 5, 191, 37, 156, 135, 190, 253, 58, 122, 62, 243, 78, 171, 62, 137, 83, 53, 190, 174, 172, 149, 62, 218, 83, 125, 62, 68, 212, 163, 62, 229, 255, 190, 190, 225, 24, 96, 190, 153, 180, 184, 189, 228, 136, 252, 189, 110, 78, 163, 190, 25, 247, 185, 61, 18, 103, 89, 62, 212, 1, 59, 190, 121, 185, 213, 190, 248, 40, 6, 63, 239, 142, 255, 61, 93, 165, 116, 61, 157, 152, 255, 61, 74, 151, 129, 61, 15, 226, 32, 191, 111, 241, 21, 190, 177, 200, 222, 189, 168, 236, 215, 190, 214, 211, 146, 61, 108, 131, 113, 61, 78, 199, 166, 190, 147, 174, 13, 191, 50, 138, 36, 191, 196, 229, 20, 189, 239, 124, 132, 191, 221, 220, 140, 61, 175, 97, 243, 61, 35, 178, 127, 189, 43, 183, 60, 191, 199, 41, 113, 62, 29, 111, 203, 61, 210, 90, 33, 62, 143, 67, 234, 188, 6, 172, 29, 61, 198, 3, 229, 61, 10, 122, 20, 190, 238, 164, 198, 188, 35, 128, 65, 62, 104, 70, 59, 190, 232, 112, 162, 60, 186, 221, 49, 190, 33, 63, 206, 189, 226, 181, 200, 187, 5, 198, 82, 190, 13, 160, 5, 61, 89, 66, 149, 189, 234, 171, 4, 62, 122, 170, 255, 189, 148, 200, 38, 61, 69, 87, 43, 62, 163, 117, 75, 59, 34, 135, 237, 61, 249, 98, 24, 62, 168, 172, 206, 61, 79, 203, 62, 190, 206, 97, 144, 189, 120, 39, 58, 61, 162, 145, 106, 189, 255, 76, 37, 190, 17, 20, 50, 190, 97, 25, 9, 189, 135, 33, 183, 187, 32, 116, 79, 188, 98, 189, 161, 61, 10, 108, 236, 61, 130, 209, 24, 62, 43, 87, 131, 62, 177, 41, 151, 61, 225, 219, 95, 62, 143, 207, 225, 190, 225, 218, 134, 61, 96, 65, 137, 62, 238, 1, 29, 191, 44, 0, 17, 189, 86, 76, 96, 62, 171, 197, 95, 60, 184, 254, 55, 62, 127, 25, 141, 61, 165, 0, 68, 62, 135, 58, 94, 61, 20, 166, 76, 60, 161, 218, 241, 187, 66, 86, 145, 191, 150, 161, 11, 62, 187, 161, 106, 61, 41, 143, 149, 61, 41, 82, 170, 189, 163, 154, 35, 190, 41, 20, 111, 190, 58, 103, 165, 190, 228, 203, 247, 61, 185, 248, 75, 188, 90, 210, 179, 60, 178, 67, 80, 190, 141, 67, 45, 62, 95, 148, 189, 189, 171, 127, 176, 61, 98, 155, 58, 62, 136, 94, 238, 61, 50, 250, 140, 61, 207, 219, 5, 61, 246, 31, 15, 190, 174, 191, 159, 189, 71, 227, 193, 61, 135, 236, 49, 190, 37, 152, 201, 188, 172, 3, 200, 188, 162, 223, 90, 190, 38, 34, 49, 189, 191, 101, 29, 62, 193, 3, 126, 190, 133, 242, 172, 59, 201, 111, 143, 189, 118, 106, 1, 60, 195, 96, 23, 189, 210, 200, 122, 189, 216, 75, 77, 190, 199, 170, 15, 190, 96, 161, 143, 60, 15, 142, 158, 190, 45, 116, 17, 62, 41, 93, 225, 187, 231, 245, 68, 190, 159, 246, 145, 61, 3, 116, 201, 188, 147, 184, 128, 189, 73, 134, 190, 189, 199, 83, 33, 190, 250, 196, 249, 188, 53, 224, 203, 189, 229, 137, 150, 62, 93, 1, 207, 190, 51, 207, 133, 62, 136, 136, 183, 190, 189, 146, 46, 61, 203, 226, 126, 62, 250, 238, 105, 190, 105, 8, 49, 190, 167, 170, 171, 61, 72, 138, 152, 191, 29, 11, 1, 62, 113, 7, 251, 61, 8, 72, 104, 62, 114, 247, 59, 190, 55, 204, 144, 189, 16, 28, 66, 190, 167, 157, 41, 191, 91, 177, 55, 62, 146, 170, 177, 189, 102, 68, 33, 189, 175, 239, 100, 61, 107, 216, 223, 61, 79, 155, 62, 61, 75, 91, 90, 62, 64, 147, 172, 190, 178, 19, 10, 191, 175, 83, 41, 62, 168, 229, 59, 190, 14, 175, 232, 61, 81, 38, 130, 191, 98, 195, 111, 190, 235, 153, 23, 191, 136, 126, 64, 190, 146, 93, 20, 62, 206, 190, 145, 190, 117, 78, 175, 62, 236, 87, 41, 62, 225, 180, 221, 190, 219, 2, 2, 191, 216, 71, 28, 62, 76, 123, 195, 62, 112, 27, 250, 61, 48, 88, 18, 61, 215, 56, 159, 190, 194, 18, 251, 190, 42, 52, 196, 62, 236, 54, 8, 191, 74, 186, 57, 190, 132, 137, 88, 62, 65, 5, 159, 62, 49, 13, 168, 190, 131, 243, 143, 191, 244, 252, 158, 191, 134, 0, 137, 60, 31, 74, 39, 191, 254, 95, 2, 62, 128, 71, 211, 61, 120, 14, 148, 62, 17, 55, 170, 190, 158, 67, 139, 62, 207, 250, 41, 188, 69, 209, 115, 62, 244, 8, 158, 190, 141, 12, 138, 190, 202, 213, 79, 189, 210, 173, 181, 190, 124, 202, 71, 61, 27, 198, 187, 61, 210, 20, 181, 190, 72, 83, 91, 190, 224, 207, 232, 190, 111, 59, 17, 62, 43, 160, 132, 62, 191, 80, 216, 189, 137, 74, 197, 61, 70, 73, 107, 60, 203, 47, 135, 61, 77, 213, 93, 62, 27, 229, 126, 190, 225, 140, 74, 63, 240, 176, 84, 62, 179, 9, 140, 61, 39, 72, 185, 61, 26, 128, 96, 190, 23, 128, 97, 189, 184, 46, 99, 190, 75, 54, 229, 190, 174, 252, 33, 191, 185, 173, 164, 61, 18, 141, 228, 62, 69, 137, 36, 190, 57, 232, 203, 61, 241, 203, 223, 61, 251, 196, 251, 61, 100, 65, 69, 191, 219, 33, 6, 62, 238, 165, 88, 189, 122, 57, 8, 190, 163, 209, 227, 59, 221, 89, 60, 190, 103, 234, 35, 190, 82, 51, 118, 61, 147, 34, 239, 61, 216, 119, 227, 188, 199, 142, 211, 189, 133, 118, 19, 190, 241, 170, 195, 61, 54, 226, 178, 189, 230, 64, 146, 189, 233, 80, 15, 62, 156, 98, 251, 189, 251, 165, 158, 188, 50, 17, 1, 62, 196, 29, 136, 189, 212, 71, 216, 60, 141, 182, 251, 59, 195, 55, 9, 190, 32, 175, 254, 189, 131, 98, 29, 189, 92, 93, 11, 189, 192, 254, 30, 190, 220, 161, 186, 188, 229, 208, 14, 190, 206, 170, 177, 189, 203, 134, 46, 189, 197, 129, 35, 190, 19, 214, 46, 62, 8, 64, 194, 60, 174, 224, 141, 189, 227, 69, 247, 58, 145, 223, 72, 187, 44, 32, 200, 62, 172, 227, 58, 62, 172, 154, 227, 188, 2, 95, 102, 62, 229, 185, 172, 190, 113, 94, 156, 189, 81, 10, 33, 189, 197, 198, 65, 190, 210, 78, 90, 62, 3, 155, 26, 62, 173, 217, 63, 61, 45, 229, 186, 61, 71, 233, 165, 61, 136, 99, 232, 190, 211, 204, 23, 189, 79, 183, 109, 62, 100, 48, 56, 62, 231, 183, 215, 61, 50, 106, 120, 62, 40, 225, 134, 61, 141, 184, 33, 190, 70, 69, 176, 189, 144, 108, 244, 60, 200, 128, 156, 59, 231, 181, 170, 61, 51, 121, 171, 61, 162, 124, 25, 61, 197, 191, 13, 189, 67, 121, 181, 190, 64, 52, 57, 190, 10, 100, 96, 61, 63, 232, 55, 62, 41, 100, 37, 62, 184, 81, 148, 61, 153, 154, 255, 189, 215, 26, 11, 191, 21, 247, 29, 191, 47, 156, 214, 60, 195, 196, 44, 61, 9, 31, 252, 61, 20, 21, 163, 61, 39, 27, 198, 189, 136, 12, 13, 62, 118, 152, 175, 189, 35, 227, 173, 189, 251, 107, 181, 61, 132, 104, 172, 62, 122, 55, 92, 190, 153, 248, 253, 190, 30, 239, 179, 190, 226, 249, 254, 61, 98, 114, 7, 191, 225, 112, 5, 190, 241, 193, 248, 61, 1, 224, 26, 62, 113, 13, 33, 62, 108, 42, 208, 61, 3, 233, 26, 62, 9, 7, 242, 61, 233, 126, 11, 190, 226, 117, 131, 190, 225, 21, 17, 190, 165, 132, 34, 61, 248, 58, 194, 189, 31, 250, 38, 191, 206, 94, 186, 189, 150, 212, 138, 191, 228, 190, 161, 190, 219, 252, 1, 62, 202, 147, 180, 57, 252, 164, 154, 62, 80, 42, 224, 61, 198, 131, 111, 190, 250, 80, 30, 60, 52, 231, 130, 62, 242, 126, 41, 190, 15, 242, 147, 190, 118, 190, 91, 63, 87, 139, 119, 61, 242, 41, 13, 191, 156, 53, 92, 60, 96, 0, 43, 186, 31, 77, 215, 189, 51, 173, 144, 189, 195, 118, 8, 62, 151, 84, 77, 62, 192, 160, 63, 62, 23, 97, 20, 189, 67, 27, 19, 62, 19, 213, 94, 61, 123, 199, 51, 62, 163, 203, 58, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 20, 94, 190, 220, 122, 76, 62, 76, 175, 120, 62, 133, 188, 131, 189, 225, 251, 46, 62, 53, 189, 172, 59, 110, 25, 56, 61, 27, 238, 96, 61, 15, 200, 151, 62, 63, 83, 210, 190, 32, 207, 161, 61, 211, 243, 131, 190, 175, 12, 97, 190, 5, 13, 37, 62, 51, 85, 224, 189, 115, 172, 129, 62, 127, 136, 183, 62, 227, 32, 145, 62, 142, 102, 147, 187, 179, 80, 137, 62, 73, 83, 43, 62, 116, 68, 154, 62, 190, 234, 211, 188, 28, 54, 20, 190, 171, 15, 18, 190, 44, 197, 1, 62, 202, 37, 216, 62, 236, 128, 189, 188, 89, 228, 243, 61, 59, 38, 184, 62, 134, 68, 40, 62, 177, 231, 219, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 212, 7, 189, 1, 221, 200, 191, 56, 201, 146, 63, 25, 242, 15, 191, 134, 150, 50, 62, 175, 15, 184, 62, 172, 79, 8, 191, 124, 85, 20, 191, 223, 247, 6, 62, 199, 122, 123, 63, 124, 137, 246, 190, 109, 5, 80, 62, 195, 118, 254, 190, 72, 147, 124, 191, 21, 69, 48, 190, 228, 76, 157, 189, 143, 178, 135, 191, 250, 145, 191, 189, 219, 30, 176, 190, 200, 110, 40, 63, 2, 16, 63, 63, 167, 205, 67, 62, 142, 74, 3, 61, 96, 240, 56, 190, 75, 119, 234, 61, 215, 67, 128, 189, 234, 117, 44, 63, 58, 48, 39, 63, 48, 182, 146, 61, 181, 221, 139, 188, 241, 193, 51, 62, 139, 175, 241, 62, 65, 36, 24, 62, 114, 69, 46, 62, 142, 118, 88, 61, 3, 241, 245, 189, 230, 86, 240, 190, 62, 30, 138, 190, 68, 54, 176, 60, 120, 24, 56, 62, 183, 123, 147, 190, 54, 22, 135, 62, 245, 132, 224, 61, 16, 107, 49, 62, 181, 229, 19, 188, 238, 4, 62, 190, 52, 153, 2, 61, 46, 86, 244, 189, 96, 127, 70, 62, 29, 63, 107, 190, 174, 180, 97, 62, 14, 158, 240, 189, 73, 91, 90, 62, 246, 181, 208, 189, 191, 208, 35, 190, 75, 211, 177, 190, 59, 81, 92, 62, 185, 158, 254, 190, 223, 152, 82, 62, 128, 177, 2, 63, 67, 64, 139, 189, 40, 85, 137, 190, 49, 197, 98, 190, 39, 43, 39, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {193, 61, 14, 190, 60, 16, 69, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {179, 189, 147, 191, 162, 117, 49, 191, 196, 3, 80, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {226, 60, 166, 192, 190, 88, 11, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0049/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}