// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 53, 120, 63, 23, 46, 135, 62, 60, 143, 184, 62, 122, 241, 76, 63, 63, 14, 205, 60, 143, 30, 18, 63, 180, 55, 161, 62, 97, 156, 32, 63, 73, 87, 8, 63, 118, 116, 218, 62, 132, 12, 158, 62, 194, 110, 2, 190, 8, 219, 135, 190, 53, 65, 112, 191, 109, 85, 231, 189, 240, 199, 102, 190, 53, 13, 238, 189, 36, 142, 225, 59, 94, 166, 205, 62, 104, 126, 20, 63, 139, 140, 110, 61, 68, 48, 19, 191, 47, 106, 165, 191, 103, 36, 175, 190, 139, 240, 70, 190, 28, 221, 6, 63, 45, 239, 147, 190, 41, 22, 230, 62, 56, 196, 9, 191, 169, 53, 126, 190, 151, 84, 218, 190, 152, 210, 155, 62, 15, 182, 18, 63, 174, 20, 12, 62, 104, 10, 128, 189, 68, 239, 147, 190, 235, 189, 15, 63, 26, 89, 240, 59, 97, 166, 249, 62, 93, 118, 6, 63, 170, 51, 17, 63, 55, 36, 238, 190, 178, 223, 76, 63, 250, 214, 7, 191, 50, 19, 16, 191, 101, 83, 64, 63, 120, 113, 247, 62, 143, 155, 194, 62, 24, 197, 195, 189, 107, 81, 8, 191, 187, 96, 87, 62, 81, 168, 89, 63, 168, 62, 115, 191, 39, 36, 174, 190, 66, 139, 4, 63, 201, 22, 31, 191, 52, 128, 116, 190, 225, 67, 151, 190, 227, 146, 115, 191, 212, 48, 243, 61, 242, 153, 62, 190, 189, 238, 50, 189, 247, 245, 172, 190, 95, 189, 22, 190, 217, 158, 167, 189, 200, 63, 18, 191, 150, 139, 28, 190, 69, 240, 230, 189, 147, 117, 139, 190, 216, 10, 69, 190, 236, 109, 30, 191, 25, 49, 19, 191, 175, 244, 101, 191, 151, 32, 37, 189, 125, 57, 192, 61, 226, 233, 6, 190, 164, 97, 145, 190, 67, 1, 34, 63, 32, 82, 0, 62, 135, 108, 82, 191, 204, 137, 99, 62, 165, 51, 17, 63, 5, 77, 130, 62, 114, 221, 153, 190, 61, 45, 231, 62, 67, 64, 122, 191, 130, 116, 210, 190, 125, 155, 168, 62, 200, 203, 175, 62, 174, 116, 6, 189, 226, 178, 253, 59, 35, 206, 151, 190, 130, 195, 12, 63, 17, 241, 11, 63, 214, 205, 70, 63, 74, 184, 12, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 106, 138, 191, 81, 83, 36, 62, 165, 43, 2, 63, 41, 50, 236, 61, 123, 127, 174, 62, 247, 36, 29, 63, 99, 220, 223, 190, 81, 196, 211, 61, 247, 120, 243, 190, 159, 135, 176, 62, 77, 157, 52, 190, 225, 37, 161, 62, 30, 89, 133, 62, 88, 10, 142, 62, 70, 125, 247, 190, 83, 139, 74, 191, 195, 253, 24, 59, 144, 86, 37, 191, 18, 111, 126, 62, 52, 194, 87, 190, 51, 243, 81, 190, 237, 246, 61, 190, 177, 202, 5, 63, 203, 1, 205, 189, 228, 49, 218, 60, 171, 132, 251, 62, 204, 152, 150, 62, 205, 188, 149, 62, 20, 22, 171, 61, 72, 68, 248, 62, 202, 54, 76, 62, 60, 203, 111, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 4, 52, 62, 206, 156, 11, 189, 216, 81, 236, 60, 219, 195, 169, 61, 155, 110, 99, 190, 197, 234, 253, 189, 66, 6, 144, 188, 34, 179, 39, 62, 94, 78, 51, 189, 199, 12, 163, 189, 194, 88, 8, 190, 245, 194, 195, 188, 62, 254, 224, 61, 189, 32, 60, 62, 88, 215, 5, 189, 236, 123, 193, 189, 160, 147, 112, 189, 245, 19, 20, 190, 113, 9, 252, 189, 228, 115, 8, 189, 148, 118, 248, 188, 104, 195, 215, 189, 31, 40, 70, 190, 110, 115, 155, 189, 127, 86, 21, 62, 224, 239, 15, 62, 36, 76, 164, 189, 159, 158, 63, 61, 173, 143, 181, 60, 120, 60, 13, 190, 221, 111, 44, 190, 175, 2, 119, 188, 76, 169, 163, 189, 209, 171, 207, 60, 21, 109, 51, 191, 70, 114, 178, 190, 132, 89, 181, 62, 11, 1, 130, 189, 76, 252, 20, 188, 210, 180, 91, 62, 85, 151, 63, 191, 132, 187, 128, 191, 213, 188, 61, 191, 25, 208, 97, 191, 235, 151, 146, 62, 227, 107, 116, 190, 84, 164, 136, 190, 155, 239, 155, 61, 194, 165, 29, 63, 158, 215, 96, 190, 52, 0, 54, 191, 152, 186, 37, 63, 180, 164, 10, 190, 253, 67, 65, 189, 48, 113, 85, 61, 207, 96, 22, 190, 25, 220, 134, 62, 255, 204, 151, 59, 34, 155, 40, 61, 46, 73, 206, 190, 244, 134, 243, 190, 166, 39, 173, 190, 199, 254, 16, 191, 175, 252, 168, 62, 51, 158, 76, 190, 16, 39, 142, 189, 189, 214, 218, 61, 145, 199, 224, 61, 169, 242, 195, 190, 2, 22, 28, 62, 248, 167, 92, 189, 133, 117, 105, 62, 23, 17, 247, 62, 248, 220, 243, 190, 47, 18, 71, 61, 204, 201, 143, 61, 2, 201, 77, 189, 15, 61, 0, 191, 125, 216, 132, 61, 150, 230, 85, 62, 52, 130, 203, 190, 35, 134, 50, 190, 191, 12, 195, 189, 164, 118, 36, 191, 196, 5, 100, 190, 217, 105, 180, 191, 148, 175, 106, 62, 135, 67, 216, 191, 195, 175, 145, 62, 197, 211, 60, 188, 147, 108, 132, 190, 34, 9, 56, 191, 135, 20, 174, 190, 123, 151, 156, 62, 147, 14, 70, 189, 101, 159, 1, 61, 119, 211, 240, 62, 15, 89, 154, 62, 61, 78, 199, 189, 213, 6, 17, 62, 207, 162, 128, 190, 149, 59, 13, 62, 152, 244, 74, 60, 6, 245, 140, 188, 127, 231, 15, 190, 202, 206, 180, 189, 166, 148, 225, 189, 11, 41, 95, 61, 49, 127, 48, 60, 184, 216, 176, 62, 220, 219, 174, 190, 40, 49, 4, 62, 254, 68, 134, 189, 199, 6, 101, 191, 114, 66, 43, 62, 9, 159, 28, 62, 147, 247, 12, 62, 120, 93, 12, 62, 73, 159, 32, 189, 160, 18, 87, 190, 230, 204, 14, 190, 33, 40, 240, 189, 63, 76, 31, 62, 229, 226, 132, 62, 141, 151, 168, 190, 245, 12, 15, 189, 237, 124, 77, 190, 76, 171, 102, 62, 70, 170, 86, 190, 61, 213, 235, 61, 253, 29, 50, 190, 150, 33, 153, 189, 104, 85, 61, 62, 194, 135, 37, 62, 239, 223, 228, 190, 50, 66, 242, 190, 22, 223, 224, 190, 114, 143, 81, 62, 24, 7, 50, 190, 220, 220, 79, 61, 99, 198, 154, 60, 247, 61, 24, 189, 67, 105, 181, 189, 182, 103, 249, 188, 195, 176, 136, 190, 31, 162, 237, 189, 121, 64, 13, 62, 121, 182, 208, 189, 101, 140, 254, 190, 233, 145, 218, 190, 29, 24, 128, 189, 26, 26, 32, 191, 87, 20, 204, 61, 243, 107, 239, 61, 225, 28, 175, 62, 82, 245, 193, 189, 87, 83, 113, 62, 145, 125, 2, 62, 208, 18, 62, 62, 123, 71, 131, 190, 213, 60, 82, 189, 46, 49, 198, 190, 45, 38, 154, 186, 64, 52, 237, 61, 25, 173, 143, 190, 133, 221, 130, 189, 124, 185, 121, 190, 74, 89, 61, 190, 195, 202, 223, 61, 131, 54, 201, 61, 76, 53, 190, 188, 224, 219, 51, 62, 61, 104, 152, 190, 254, 144, 243, 61, 204, 113, 174, 62, 44, 58, 123, 61, 28, 53, 92, 191, 100, 229, 122, 62, 140, 228, 229, 61, 59, 37, 145, 191, 80, 251, 128, 189, 80, 212, 46, 190, 65, 56, 17, 190, 146, 75, 91, 190, 126, 122, 175, 190, 61, 163, 178, 190, 201, 53, 167, 188, 4, 208, 29, 62, 132, 80, 60, 62, 102, 92, 246, 61, 212, 176, 150, 189, 71, 39, 217, 190, 138, 236, 114, 62, 20, 219, 184, 62, 241, 41, 38, 62, 38, 211, 211, 62, 15, 221, 147, 190, 251, 179, 253, 60, 36, 192, 190, 188, 70, 253, 87, 188, 57, 217, 71, 62, 100, 154, 24, 62, 63, 131, 201, 186, 79, 55, 76, 61, 207, 213, 128, 62, 22, 59, 43, 62, 249, 189, 202, 189, 46, 117, 84, 62, 16, 196, 202, 189, 176, 152, 129, 191, 61, 212, 37, 190, 16, 170, 187, 189, 235, 216, 6, 190, 75, 89, 254, 189, 249, 85, 61, 190, 8, 153, 175, 61, 27, 147, 153, 190, 107, 102, 186, 189, 84, 138, 93, 190, 3, 116, 130, 61, 117, 122, 139, 190, 112, 90, 36, 62, 35, 215, 145, 190, 38, 204, 61, 61, 209, 8, 8, 62, 180, 137, 168, 62, 166, 146, 3, 189, 192, 6, 108, 189, 226, 122, 129, 189, 87, 57, 103, 62, 68, 194, 4, 190, 76, 140, 87, 62, 8, 99, 161, 190, 97, 221, 194, 189, 222, 254, 238, 190, 97, 37, 224, 61, 151, 4, 176, 62, 44, 56, 132, 61, 116, 159, 240, 190, 117, 153, 209, 189, 85, 100, 51, 62, 11, 226, 60, 191, 115, 151, 166, 189, 223, 11, 66, 62, 105, 242, 57, 62, 200, 2, 64, 62, 54, 240, 178, 62, 150, 196, 206, 61, 188, 82, 36, 190, 58, 39, 137, 190, 128, 38, 59, 189, 108, 42, 157, 62, 81, 93, 132, 190, 36, 78, 44, 61, 39, 17, 204, 190, 254, 97, 247, 61, 17, 56, 108, 190, 147, 83, 162, 189, 8, 225, 101, 62, 118, 74, 84, 60, 212, 69, 195, 189, 93, 9, 38, 62, 184, 209, 2, 62, 253, 26, 64, 190, 34, 230, 30, 60, 181, 249, 138, 62, 71, 8, 212, 188, 184, 48, 128, 62, 8, 112, 24, 190, 116, 25, 12, 62, 63, 223, 254, 61, 176, 91, 91, 189, 84, 126, 2, 190, 131, 140, 1, 62, 245, 60, 48, 61, 3, 227, 200, 190, 20, 204, 23, 62, 5, 239, 45, 190, 79, 214, 84, 62, 56, 97, 4, 189, 168, 133, 12, 190, 209, 13, 46, 189, 145, 143, 179, 62, 159, 43, 228, 61, 68, 62, 95, 62, 7, 59, 151, 62, 92, 175, 170, 62, 219, 92, 245, 189, 62, 232, 43, 62, 250, 26, 176, 61, 45, 3, 25, 61, 89, 24, 23, 62, 74, 157, 6, 191, 52, 103, 247, 190, 15, 58, 192, 62, 109, 171, 117, 190, 219, 134, 193, 189, 40, 66, 237, 189, 235, 124, 91, 61, 231, 43, 69, 59, 82, 232, 15, 62, 249, 104, 232, 188, 7, 50, 212, 62, 38, 227, 189, 62, 21, 57, 132, 61, 132, 189, 48, 63, 147, 227, 223, 61, 17, 12, 26, 191, 67, 18, 17, 185, 92, 211, 109, 60, 126, 158, 215, 189, 20, 186, 227, 61, 9, 207, 51, 191, 160, 199, 5, 190, 4, 166, 79, 190, 227, 183, 109, 61, 249, 94, 99, 62, 15, 193, 27, 61, 71, 33, 110, 61, 231, 78, 150, 62, 173, 18, 160, 61, 220, 156, 60, 62, 201, 110, 84, 61, 222, 40, 64, 188, 181, 100, 156, 190, 19, 245, 164, 60, 250, 248, 14, 61, 88, 35, 11, 59, 255, 79, 121, 190, 113, 163, 128, 61, 30, 170, 142, 190, 52, 21, 225, 60, 125, 4, 82, 61, 30, 215, 156, 61, 2, 129, 34, 190, 167, 81, 80, 62, 169, 43, 145, 60, 190, 132, 125, 191, 178, 151, 154, 189, 202, 106, 11, 62, 52, 171, 102, 62, 118, 175, 7, 189, 144, 243, 7, 62, 52, 151, 136, 187, 204, 211, 249, 190, 214, 18, 114, 189, 89, 39, 157, 189, 170, 18, 25, 62, 156, 138, 16, 190, 60, 3, 121, 62, 48, 87, 89, 190, 22, 218, 98, 62, 255, 48, 236, 188, 173, 231, 135, 190, 55, 99, 42, 190, 153, 77, 18, 62, 25, 250, 7, 191, 227, 182, 204, 190, 74, 78, 110, 190, 4, 84, 114, 60, 38, 131, 126, 62, 48, 12, 174, 188, 75, 183, 33, 190, 24, 227, 87, 61, 47, 190, 117, 189, 118, 96, 51, 189, 18, 120, 17, 190, 196, 5, 210, 61, 206, 158, 73, 189, 233, 87, 47, 189, 80, 95, 3, 190, 107, 172, 125, 188, 115, 7, 191, 60, 153, 216, 158, 189, 240, 30, 141, 60, 132, 68, 86, 62, 227, 91, 1, 190, 75, 251, 180, 190, 40, 242, 109, 60, 183, 192, 148, 61, 131, 67, 104, 190, 186, 234, 209, 60, 47, 248, 105, 59, 62, 189, 65, 190, 238, 77, 249, 62, 116, 96, 206, 61, 234, 236, 205, 189, 209, 232, 236, 190, 64, 63, 105, 62, 34, 146, 29, 190, 77, 241, 218, 61, 66, 121, 191, 62, 182, 241, 194, 61, 246, 126, 47, 190, 160, 11, 133, 189, 204, 117, 18, 189, 111, 241, 62, 60, 138, 2, 37, 189, 167, 137, 106, 190, 106, 114, 193, 62, 50, 181, 62, 61, 99, 176, 183, 190, 154, 251, 176, 189, 146, 49, 73, 62, 206, 12, 54, 62, 89, 146, 105, 62, 251, 163, 81, 62, 221, 45, 23, 62, 133, 58, 204, 187, 128, 126, 112, 61, 241, 242, 111, 62, 107, 114, 70, 190, 187, 201, 38, 62, 25, 94, 180, 190, 83, 106, 140, 190, 36, 160, 145, 62, 68, 248, 140, 189, 227, 124, 151, 190, 49, 219, 119, 191, 25, 243, 129, 190, 123, 130, 129, 62, 96, 125, 25, 62, 99, 55, 68, 61, 37, 156, 118, 62, 139, 112, 93, 190, 12, 234, 241, 190, 209, 250, 80, 191, 66, 74, 209, 190, 7, 185, 112, 189, 144, 155, 57, 62, 238, 254, 182, 190, 43, 33, 171, 59, 133, 81, 54, 63, 16, 6, 233, 189, 231, 165, 145, 190, 128, 203, 40, 63, 214, 195, 82, 62, 79, 123, 125, 189, 26, 98, 44, 189, 23, 134, 103, 190, 73, 165, 146, 62, 223, 129, 137, 60, 187, 8, 177, 190, 222, 23, 88, 189, 118, 25, 72, 190, 105, 32, 31, 190, 147, 85, 32, 191, 183, 252, 181, 188, 99, 159, 53, 189, 198, 179, 50, 61, 179, 249, 197, 187, 244, 187, 150, 189, 163, 17, 157, 61, 227, 197, 128, 189, 0, 217, 35, 188, 217, 73, 15, 190, 106, 89, 255, 60, 32, 175, 168, 189, 128, 78, 27, 190, 36, 10, 112, 61, 247, 131, 84, 189, 146, 173, 21, 190, 252, 103, 40, 62, 71, 63, 118, 188, 236, 175, 43, 190, 228, 215, 196, 189, 195, 224, 145, 188, 247, 108, 47, 62, 150, 29, 128, 189, 51, 168, 167, 61, 31, 211, 20, 190, 94, 139, 227, 60, 190, 113, 23, 62, 35, 90, 41, 190, 167, 207, 60, 61, 26, 181, 220, 61, 114, 64, 17, 188, 66, 134, 31, 190, 22, 7, 3, 62, 17, 109, 198, 189, 208, 86, 38, 190, 206, 84, 245, 61, 189, 84, 162, 60, 103, 63, 129, 61, 71, 16, 115, 190, 172, 19, 202, 61, 224, 185, 246, 187, 61, 31, 31, 61, 28, 45, 35, 190, 193, 18, 237, 189, 83, 210, 177, 190, 148, 116, 201, 189, 207, 214, 211, 61, 251, 188, 118, 61, 92, 130, 225, 189, 59, 33, 227, 189, 230, 54, 24, 62, 25, 12, 170, 190, 233, 114, 34, 61, 190, 65, 97, 190, 138, 11, 10, 62, 55, 240, 210, 61, 102, 96, 201, 189, 138, 213, 145, 188, 172, 62, 217, 61, 103, 248, 23, 190, 150, 29, 31, 190, 203, 185, 44, 62, 145, 234, 90, 190, 67, 15, 185, 60, 121, 144, 35, 190, 251, 83, 75, 61, 147, 96, 76, 189, 144, 234, 5, 189, 14, 109, 225, 189, 225, 123, 126, 61, 157, 208, 186, 62, 92, 148, 140, 62, 156, 115, 5, 63, 109, 228, 221, 61, 17, 12, 124, 190, 116, 40, 39, 60, 164, 20, 139, 191, 78, 216, 141, 189, 171, 123, 4, 190, 192, 20, 229, 188, 96, 191, 197, 190, 226, 67, 30, 190, 197, 69, 98, 60, 25, 43, 40, 191, 180, 133, 204, 188, 231, 3, 185, 62, 54, 175, 30, 61, 126, 128, 32, 62, 128, 194, 134, 62, 24, 114, 29, 61, 96, 167, 139, 190, 174, 28, 51, 191, 91, 169, 161, 190, 111, 35, 1, 189, 149, 187, 134, 59, 152, 147, 131, 62, 82, 107, 182, 191, 1, 41, 48, 190, 81, 202, 42, 62, 95, 176, 174, 189, 134, 68, 194, 61, 242, 233, 192, 61, 239, 104, 174, 188, 13, 21, 197, 61, 230, 112, 46, 62, 64, 224, 46, 189, 159, 196, 71, 60, 214, 232, 205, 189, 77, 147, 204, 189, 50, 200, 172, 189, 73, 113, 25, 62, 65, 181, 243, 61, 67, 158, 47, 190, 193, 131, 97, 189, 128, 114, 172, 61, 49, 34, 49, 191, 116, 105, 196, 188, 150, 32, 46, 62, 38, 89, 43, 62, 79, 241, 160, 189, 3, 88, 232, 189, 50, 45, 149, 61, 54, 145, 45, 189, 2, 162, 144, 189, 165, 50, 62, 190, 88, 252, 136, 61, 213, 230, 12, 61, 250, 56, 163, 61, 13, 204, 61, 60, 241, 74, 115, 61, 107, 231, 118, 62, 99, 194, 163, 61, 186, 113, 249, 60, 94, 190, 28, 62, 197, 18, 73, 189, 101, 36, 100, 61, 198, 49, 10, 62, 88, 242, 130, 62, 225, 32, 7, 189, 218, 50, 221, 189, 135, 240, 178, 190, 199, 12, 220, 189, 1, 9, 114, 61, 207, 151, 169, 62, 204, 33, 11, 190, 144, 132, 82, 62, 230, 18, 78, 62, 59, 105, 114, 191, 242, 152, 58, 190, 231, 86, 149, 59, 73, 24, 117, 190, 59, 163, 102, 59, 96, 219, 105, 61, 161, 130, 5, 190, 155, 111, 34, 189, 228, 216, 198, 189, 195, 101, 137, 188, 188, 31, 155, 61, 62, 113, 28, 188, 174, 112, 12, 62, 100, 78, 227, 60, 60, 43, 105, 62, 14, 15, 221, 190, 40, 173, 135, 190, 80, 222, 39, 62, 21, 18, 46, 191, 82, 117, 76, 62, 23, 54, 12, 62, 32, 76, 85, 190, 87, 201, 145, 187, 114, 117, 145, 62, 186, 103, 29, 61, 35, 110, 60, 62, 230, 253, 124, 62, 225, 154, 169, 60, 10, 245, 194, 190, 142, 192, 240, 61, 218, 164, 33, 190, 244, 77, 154, 190, 90, 157, 153, 61, 241, 74, 76, 62, 65, 25, 135, 190, 167, 190, 99, 191, 95, 162, 84, 191, 104, 189, 9, 189, 210, 240, 47, 191, 76, 48, 202, 189, 243, 180, 103, 62, 112, 34, 137, 62, 5, 3, 222, 190, 66, 26, 254, 61, 94, 118, 225, 188, 76, 207, 236, 188, 63, 217, 115, 190, 8, 132, 24, 191, 208, 121, 101, 190, 198, 186, 159, 189, 228, 125, 165, 189, 62, 215, 67, 62, 73, 83, 135, 62, 110, 3, 54, 191, 81, 103, 232, 190, 45, 181, 98, 190, 34, 227, 123, 62, 117, 168, 65, 62, 64, 175, 150, 59, 34, 203, 152, 190, 84, 51, 142, 190, 124, 201, 162, 62, 1, 226, 229, 190, 171, 204, 246, 189, 48, 188, 93, 62, 215, 82, 84, 62, 216, 208, 61, 190, 253, 246, 8, 191, 53, 57, 16, 191, 40, 245, 2, 62, 209, 252, 166, 190, 127, 143, 54, 190, 127, 189, 119, 62, 20, 56, 162, 62, 85, 173, 56, 190, 114, 61, 154, 62, 143, 8, 90, 62, 201, 185, 166, 62, 72, 234, 175, 190, 248, 199, 237, 189, 230, 187, 139, 189, 39, 38, 193, 189, 95, 135, 75, 190, 130, 52, 13, 61, 45, 246, 69, 62, 237, 211, 69, 190, 128, 232, 169, 190, 87, 31, 11, 63, 240, 5, 202, 61, 173, 183, 218, 61, 67, 44, 79, 62, 177, 93, 170, 61, 217, 207, 236, 190, 70, 152, 14, 61, 63, 117, 116, 188, 202, 61, 211, 190, 228, 217, 159, 62, 55, 201, 198, 60, 193, 171, 163, 190, 186, 37, 9, 191, 68, 107, 34, 191, 11, 203, 18, 189, 214, 12, 94, 191, 105, 56, 91, 61, 42, 156, 15, 62, 40, 100, 65, 189, 96, 63, 10, 191, 57, 137, 77, 62, 126, 65, 170, 61, 208, 64, 60, 62, 88, 133, 101, 60, 6, 172, 29, 61, 198, 3, 229, 61, 10, 122, 20, 190, 238, 164, 198, 188, 35, 128, 65, 62, 104, 70, 59, 190, 232, 112, 162, 60, 186, 221, 49, 190, 33, 63, 206, 189, 226, 181, 200, 187, 5, 198, 82, 190, 13, 160, 5, 61, 89, 66, 149, 189, 234, 171, 4, 62, 122, 170, 255, 189, 148, 200, 38, 61, 69, 87, 43, 62, 163, 117, 75, 59, 34, 135, 237, 61, 249, 98, 24, 62, 168, 172, 206, 61, 79, 203, 62, 190, 206, 97, 144, 189, 120, 39, 58, 61, 162, 145, 106, 189, 255, 76, 37, 190, 17, 20, 50, 190, 97, 25, 9, 189, 135, 33, 183, 187, 32, 116, 79, 188, 98, 189, 161, 61, 10, 108, 236, 61, 42, 233, 30, 62, 102, 93, 132, 62, 55, 14, 135, 61, 247, 197, 98, 62, 252, 211, 203, 190, 236, 8, 157, 61, 225, 80, 50, 62, 124, 7, 235, 190, 188, 53, 167, 189, 133, 99, 129, 62, 238, 248, 39, 60, 229, 72, 46, 62, 172, 119, 145, 61, 241, 53, 44, 62, 84, 155, 229, 60, 179, 229, 243, 60, 247, 136, 64, 189, 237, 110, 76, 191, 107, 134, 54, 62, 20, 88, 208, 60, 106, 5, 245, 60, 130, 236, 27, 190, 163, 131, 25, 190, 242, 168, 135, 190, 129, 6, 145, 190, 191, 129, 198, 61, 72, 236, 203, 188, 5, 129, 158, 60, 98, 65, 202, 189, 97, 245, 40, 62, 110, 164, 1, 190, 222, 3, 156, 61, 98, 155, 58, 62, 136, 94, 238, 61, 50, 250, 140, 61, 207, 219, 5, 61, 246, 31, 15, 190, 174, 191, 159, 189, 71, 227, 193, 61, 135, 236, 49, 190, 37, 152, 201, 188, 172, 3, 200, 188, 162, 223, 90, 190, 38, 34, 49, 189, 191, 101, 29, 62, 193, 3, 126, 190, 133, 242, 172, 59, 201, 111, 143, 189, 118, 106, 1, 60, 195, 96, 23, 189, 210, 200, 122, 189, 216, 75, 77, 190, 199, 170, 15, 190, 96, 161, 143, 60, 15, 142, 158, 190, 45, 116, 17, 62, 41, 93, 225, 187, 231, 245, 68, 190, 159, 246, 145, 61, 3, 116, 201, 188, 147, 184, 128, 189, 73, 134, 190, 189, 199, 83, 33, 190, 250, 196, 249, 188, 173, 189, 203, 189, 123, 41, 186, 188, 235, 170, 14, 191, 182, 255, 252, 61, 250, 96, 17, 190, 3, 232, 72, 61, 118, 248, 159, 61, 102, 53, 207, 189, 148, 225, 185, 189, 31, 14, 36, 189, 11, 190, 135, 191, 0, 234, 234, 61, 19, 20, 54, 190, 177, 12, 58, 62, 26, 186, 96, 190, 150, 142, 67, 62, 244, 163, 12, 189, 175, 111, 5, 191, 104, 18, 24, 61, 22, 54, 207, 189, 206, 37, 146, 61, 237, 111, 25, 62, 212, 254, 14, 62, 212, 181, 29, 62, 183, 179, 148, 62, 164, 107, 12, 190, 204, 173, 11, 191, 231, 228, 165, 61, 104, 18, 87, 190, 45, 66, 28, 189, 87, 10, 58, 191, 59, 48, 213, 189, 25, 74, 204, 190, 207, 216, 64, 190, 62, 205, 35, 62, 149, 38, 158, 190, 225, 146, 149, 62, 65, 139, 5, 62, 175, 47, 91, 190, 200, 140, 201, 190, 109, 240, 130, 62, 157, 17, 173, 62, 72, 222, 17, 62, 175, 221, 190, 59, 80, 93, 161, 190, 3, 54, 10, 191, 53, 241, 169, 62, 251, 72, 202, 190, 12, 255, 71, 190, 1, 29, 84, 62, 177, 154, 134, 62, 3, 93, 181, 190, 51, 202, 128, 191, 104, 87, 154, 191, 53, 40, 80, 188, 41, 177, 22, 191, 129, 119, 36, 62, 70, 245, 231, 61, 90, 219, 146, 62, 133, 41, 185, 190, 253, 250, 105, 62, 199, 131, 26, 189, 22, 184, 130, 62, 178, 205, 139, 190, 172, 30, 255, 188, 78, 41, 97, 189, 243, 56, 156, 190, 96, 169, 36, 61, 76, 191, 198, 60, 97, 219, 198, 190, 60, 228, 195, 189, 175, 229, 249, 189, 217, 98, 139, 189, 94, 126, 112, 62, 251, 166, 138, 189, 11, 86, 209, 61, 93, 69, 116, 59, 78, 155, 253, 60, 250, 198, 36, 62, 19, 103, 3, 189, 4, 133, 56, 63, 69, 14, 107, 62, 57, 221, 8, 61, 138, 186, 176, 60, 178, 106, 92, 190, 92, 98, 173, 189, 217, 94, 75, 190, 64, 206, 134, 190, 80, 19, 204, 190, 156, 157, 107, 61, 250, 73, 209, 62, 69, 173, 36, 190, 99, 156, 190, 61, 129, 62, 196, 61, 149, 250, 211, 61, 60, 196, 43, 191, 219, 33, 6, 62, 238, 165, 88, 189, 122, 57, 8, 190, 163, 209, 227, 59, 221, 89, 60, 190, 103, 234, 35, 190, 82, 51, 118, 61, 147, 34, 239, 61, 216, 119, 227, 188, 199, 142, 211, 189, 133, 118, 19, 190, 241, 170, 195, 61, 54, 226, 178, 189, 230, 64, 146, 189, 233, 80, 15, 62, 156, 98, 251, 189, 251, 165, 158, 188, 50, 17, 1, 62, 196, 29, 136, 189, 212, 71, 216, 60, 141, 182, 251, 59, 195, 55, 9, 190, 32, 175, 254, 189, 131, 98, 29, 189, 92, 93, 11, 189, 192, 254, 30, 190, 220, 161, 186, 188, 229, 208, 14, 190, 206, 170, 177, 189, 203, 134, 46, 189, 197, 129, 35, 190, 19, 214, 46, 62, 77, 134, 186, 61, 174, 70, 88, 189, 230, 42, 45, 60, 42, 124, 165, 61, 22, 223, 96, 62, 32, 116, 6, 62, 69, 9, 156, 189, 75, 199, 154, 61, 19, 11, 130, 190, 148, 246, 189, 189, 163, 90, 78, 59, 249, 155, 51, 190, 75, 86, 105, 62, 30, 85, 70, 62, 73, 222, 237, 185, 209, 19, 56, 62, 139, 68, 139, 59, 40, 104, 217, 190, 9, 155, 103, 189, 95, 232, 184, 61, 144, 72, 51, 62, 72, 59, 178, 61, 139, 66, 119, 62, 50, 65, 158, 188, 23, 37, 130, 189, 193, 38, 207, 189, 110, 120, 160, 188, 128, 139, 92, 61, 52, 68, 121, 61, 114, 241, 236, 61, 62, 115, 98, 60, 157, 60, 136, 188, 39, 16, 112, 190, 141, 178, 42, 190, 27, 116, 176, 61, 136, 37, 62, 62, 107, 236, 0, 62, 220, 102, 102, 61, 69, 251, 36, 190, 150, 77, 245, 190, 220, 121, 243, 190, 230, 214, 249, 60, 202, 108, 203, 61, 55, 54, 22, 62, 100, 9, 188, 61, 199, 162, 180, 189, 3, 184, 40, 62, 252, 52, 64, 61, 107, 142, 241, 189, 45, 186, 64, 62, 183, 202, 177, 62, 26, 192, 131, 190, 189, 112, 199, 190, 36, 217, 148, 190, 218, 149, 22, 62, 112, 4, 253, 190, 140, 237, 129, 189, 86, 216, 12, 62, 49, 0, 36, 62, 31, 33, 57, 62, 35, 250, 15, 62, 196, 41, 27, 62, 203, 231, 11, 62, 187, 205, 191, 189, 201, 22, 97, 190, 104, 187, 35, 190, 126, 39, 93, 61, 224, 62, 25, 190, 129, 247, 243, 190, 157, 132, 140, 188, 62, 130, 46, 191, 103, 105, 109, 190, 171, 169, 225, 61, 1, 143, 61, 189, 210, 233, 164, 62, 78, 176, 235, 61, 223, 195, 126, 190, 248, 80, 14, 188, 147, 142, 99, 62, 52, 2, 29, 190, 25, 49, 140, 190, 115, 76, 56, 63, 160, 234, 109, 60, 36, 17, 223, 190, 0, 129, 134, 187, 106, 129, 33, 188, 166, 116, 183, 189, 150, 247, 113, 189, 53, 186, 32, 62, 161, 53, 98, 62, 251, 22, 111, 62, 1, 164, 140, 189, 202, 21, 224, 61, 44, 161, 45, 61, 129, 23, 79, 62, 198, 231, 35, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 20, 94, 190, 229, 234, 55, 62, 160, 217, 134, 62, 186, 105, 155, 189, 29, 192, 9, 62, 103, 218, 214, 60, 190, 10, 232, 60, 30, 156, 29, 61, 223, 98, 150, 62, 250, 246, 189, 190, 70, 104, 26, 61, 211, 243, 131, 190, 111, 178, 81, 190, 200, 252, 52, 62, 51, 85, 224, 189, 224, 33, 125, 62, 224, 239, 172, 62, 215, 225, 135, 62, 238, 236, 117, 60, 54, 72, 82, 62, 3, 12, 8, 62, 168, 20, 144, 62, 190, 234, 211, 188, 118, 67, 22, 190, 171, 15, 18, 190, 151, 51, 21, 61, 190, 50, 200, 62, 121, 18, 87, 189, 89, 228, 243, 61, 109, 3, 166, 62, 218, 142, 27, 62, 159, 237, 86, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 212, 7, 189, 73, 136, 160, 191, 201, 19, 122, 63, 154, 200, 0, 191, 191, 220, 31, 62, 110, 28, 171, 62, 55, 187, 255, 190, 226, 93, 22, 191, 168, 75, 46, 62, 250, 141, 66, 63, 127, 194, 230, 190, 109, 5, 80, 62, 69, 130, 7, 191, 37, 165, 89, 191, 21, 69, 48, 190, 255, 227, 157, 189, 248, 127, 97, 191, 254, 250, 203, 189, 15, 255, 143, 190, 26, 160, 246, 62, 250, 21, 37, 63, 180, 129, 56, 62, 142, 74, 3, 61, 255, 223, 30, 190, 75, 119, 234, 61, 124, 73, 41, 189, 6, 40, 32, 63, 9, 8, 130, 62, 48, 182, 146, 61, 225, 156, 15, 188, 99, 102, 58, 62, 7, 127, 164, 62, 65, 36, 24, 62, 237, 139, 237, 61, 245, 195, 170, 61, 87, 22, 19, 189, 197, 100, 246, 190, 104, 13, 23, 190, 230, 18, 82, 61, 9, 50, 48, 62, 73, 98, 136, 190, 193, 38, 64, 62, 137, 207, 107, 62, 16, 107, 49, 62, 237, 49, 6, 60, 81, 20, 44, 190, 52, 153, 2, 61, 252, 206, 170, 60, 71, 163, 198, 61, 60, 210, 200, 189, 215, 85, 172, 62, 119, 97, 129, 61, 216, 127, 158, 61, 72, 231, 242, 60, 191, 208, 35, 190, 101, 235, 155, 190, 59, 81, 92, 62, 48, 114, 197, 190, 238, 23, 177, 61, 65, 207, 206, 62, 67, 64, 139, 189, 74, 149, 92, 190, 131, 133, 128, 190, 129, 49, 185, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {88, 81, 247, 189, 46, 75, 7, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {219, 53, 33, 63, 207, 194, 16, 191, 255, 49, 92, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {116, 103, 8, 64, 44, 219, 132, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0049/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}