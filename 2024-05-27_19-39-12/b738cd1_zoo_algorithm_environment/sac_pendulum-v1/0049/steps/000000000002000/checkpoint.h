// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 162, 67, 62, 175, 65, 228, 62, 70, 158, 0, 63, 73, 90, 67, 63, 111, 126, 40, 189, 180, 119, 4, 63, 188, 154, 188, 62, 217, 178, 72, 190, 70, 91, 255, 62, 37, 202, 28, 62, 207, 70, 172, 62, 152, 232, 51, 189, 16, 107, 67, 189, 30, 180, 60, 191, 118, 73, 203, 189, 187, 177, 51, 190, 55, 95, 167, 188, 185, 130, 99, 61, 188, 218, 53, 190, 29, 53, 210, 62, 2, 102, 60, 62, 191, 29, 13, 191, 136, 101, 69, 190, 184, 7, 204, 190, 226, 109, 67, 190, 68, 244, 4, 63, 114, 200, 89, 190, 219, 227, 254, 62, 69, 9, 212, 188, 92, 215, 145, 190, 107, 229, 184, 190, 185, 12, 51, 191, 108, 83, 127, 62, 197, 27, 170, 62, 191, 152, 59, 61, 204, 97, 143, 190, 54, 42, 29, 63, 205, 61, 33, 189, 0, 199, 225, 62, 135, 1, 134, 62, 8, 115, 87, 63, 69, 127, 99, 190, 178, 0, 46, 63, 134, 144, 187, 190, 57, 98, 9, 191, 82, 46, 148, 189, 87, 197, 251, 62, 149, 90, 233, 62, 140, 39, 54, 61, 43, 70, 146, 190, 235, 90, 23, 62, 54, 110, 208, 62, 226, 198, 26, 191, 156, 140, 211, 190, 234, 195, 214, 62, 65, 243, 27, 190, 207, 231, 130, 190, 185, 113, 13, 190, 241, 62, 43, 191, 67, 62, 7, 62, 134, 54, 166, 190, 181, 9, 23, 63, 251, 150, 191, 189, 68, 143, 144, 190, 147, 231, 239, 62, 95, 216, 157, 190, 244, 7, 250, 189, 115, 107, 111, 62, 29, 82, 123, 190, 192, 170, 197, 189, 169, 209, 108, 62, 177, 188, 81, 190, 189, 67, 18, 191, 171, 155, 44, 62, 163, 173, 63, 62, 34, 96, 81, 189, 88, 180, 17, 191, 78, 92, 9, 63, 111, 192, 180, 61, 217, 169, 124, 191, 213, 137, 43, 62, 197, 130, 165, 62, 124, 30, 233, 62, 158, 7, 18, 190, 172, 56, 107, 62, 36, 18, 18, 191, 183, 79, 221, 190, 29, 95, 78, 62, 120, 193, 165, 62, 38, 92, 140, 187, 67, 13, 150, 61, 11, 122, 94, 191, 226, 114, 130, 62, 229, 162, 53, 62, 182, 152, 28, 63, 204, 151, 15, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 125, 37, 191, 184, 47, 6, 62, 19, 95, 22, 63, 129, 209, 97, 62, 249, 86, 118, 62, 44, 146, 19, 63, 27, 115, 136, 190, 129, 53, 99, 62, 123, 105, 166, 190, 190, 157, 17, 62, 81, 182, 3, 190, 19, 168, 31, 62, 61, 198, 33, 62, 183, 39, 4, 63, 123, 203, 137, 190, 50, 160, 11, 191, 101, 74, 32, 190, 139, 178, 153, 190, 217, 123, 165, 62, 108, 18, 191, 190, 120, 198, 210, 189, 7, 186, 193, 60, 235, 15, 17, 63, 246, 212, 169, 61, 14, 17, 162, 61, 106, 79, 253, 62, 145, 205, 162, 62, 114, 230, 247, 62, 217, 233, 77, 62, 238, 167, 18, 63, 203, 142, 128, 62, 31, 228, 107, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {55, 251, 44, 62, 30, 98, 241, 188, 47, 130, 39, 61, 190, 6, 177, 61, 120, 34, 95, 190, 230, 82, 193, 189, 18, 112, 187, 188, 32, 178, 39, 62, 164, 153, 50, 189, 172, 150, 98, 189, 2, 195, 197, 189, 61, 111, 237, 186, 207, 253, 238, 61, 46, 187, 79, 62, 88, 215, 5, 189, 99, 100, 199, 189, 193, 237, 53, 188, 245, 19, 20, 190, 208, 52, 189, 189, 18, 9, 169, 185, 29, 223, 41, 189, 38, 8, 216, 189, 182, 231, 44, 190, 127, 187, 146, 189, 223, 161, 40, 62, 118, 232, 35, 62, 50, 212, 49, 189, 94, 238, 150, 61, 173, 143, 181, 60, 131, 125, 6, 190, 41, 88, 12, 190, 210, 74, 124, 188, 29, 113, 49, 189, 168, 237, 17, 190, 60, 140, 61, 189, 85, 36, 5, 190, 31, 41, 244, 189, 50, 120, 161, 189, 120, 59, 234, 188, 239, 163, 220, 60, 153, 242, 154, 189, 16, 184, 3, 190, 109, 79, 201, 188, 6, 229, 92, 190, 254, 194, 82, 186, 110, 22, 153, 188, 127, 162, 209, 59, 153, 223, 181, 61, 175, 253, 16, 190, 13, 28, 100, 61, 136, 165, 155, 189, 183, 244, 237, 60, 221, 149, 109, 61, 252, 35, 168, 61, 24, 109, 170, 61, 212, 172, 239, 61, 70, 129, 111, 62, 235, 219, 105, 188, 50, 214, 3, 190, 92, 3, 10, 190, 246, 237, 160, 188, 210, 143, 139, 188, 250, 93, 143, 190, 232, 129, 8, 62, 113, 160, 41, 190, 221, 227, 141, 188, 45, 130, 120, 61, 77, 142, 187, 61, 126, 245, 174, 189, 40, 39, 87, 61, 223, 79, 247, 189, 177, 105, 159, 188, 87, 4, 155, 61, 207, 92, 43, 187, 211, 91, 99, 61, 201, 60, 221, 61, 93, 55, 40, 61, 122, 86, 90, 190, 75, 85, 140, 61, 58, 242, 243, 61, 201, 20, 239, 60, 68, 170, 44, 190, 129, 254, 142, 189, 237, 170, 25, 190, 184, 92, 123, 61, 134, 249, 156, 190, 144, 165, 222, 187, 129, 176, 141, 190, 143, 13, 110, 62, 213, 101, 209, 188, 157, 38, 86, 189, 2, 115, 86, 190, 146, 9, 79, 190, 91, 41, 149, 61, 240, 29, 114, 60, 52, 217, 7, 189, 220, 233, 71, 62, 39, 147, 59, 62, 135, 169, 88, 189, 254, 219, 1, 62, 195, 66, 187, 190, 0, 98, 134, 62, 248, 214, 62, 61, 148, 81, 80, 189, 41, 141, 16, 190, 93, 240, 72, 189, 213, 56, 51, 61, 85, 179, 112, 61, 49, 201, 176, 189, 125, 81, 176, 62, 4, 123, 71, 190, 225, 41, 16, 188, 78, 68, 207, 58, 251, 190, 138, 190, 104, 159, 100, 62, 186, 66, 100, 62, 92, 139, 54, 62, 180, 118, 249, 61, 233, 223, 73, 189, 155, 98, 51, 190, 11, 169, 198, 61, 109, 237, 47, 189, 11, 233, 145, 61, 119, 224, 131, 62, 137, 93, 118, 190, 83, 198, 171, 188, 253, 44, 19, 190, 85, 183, 30, 62, 155, 165, 143, 189, 145, 254, 57, 61, 195, 193, 0, 190, 23, 174, 235, 189, 209, 187, 146, 61, 245, 85, 204, 61, 59, 118, 129, 61, 44, 137, 220, 189, 156, 129, 41, 186, 69, 101, 24, 62, 231, 61, 212, 188, 12, 198, 200, 61, 48, 184, 42, 189, 70, 75, 105, 61, 254, 223, 79, 188, 128, 180, 226, 61, 24, 216, 52, 190, 87, 74, 64, 59, 81, 74, 2, 189, 54, 148, 102, 189, 19, 2, 73, 61, 231, 255, 19, 61, 67, 42, 157, 188, 134, 211, 108, 189, 20, 164, 66, 62, 207, 60, 10, 62, 210, 63, 110, 62, 225, 235, 214, 189, 135, 111, 104, 62, 132, 40, 204, 58, 115, 233, 81, 62, 232, 174, 22, 189, 134, 150, 64, 59, 149, 137, 100, 190, 209, 24, 51, 62, 93, 228, 9, 61, 178, 57, 83, 62, 175, 151, 155, 61, 18, 34, 136, 61, 204, 244, 197, 60, 11, 160, 13, 61, 1, 8, 231, 61, 192, 246, 42, 62, 2, 160, 58, 62, 81, 18, 250, 189, 234, 133, 159, 61, 9, 127, 121, 62, 166, 91, 159, 61, 170, 111, 112, 190, 216, 12, 52, 61, 136, 90, 204, 61, 167, 158, 116, 190, 57, 195, 1, 190, 8, 206, 39, 190, 59, 6, 16, 190, 74, 167, 18, 190, 240, 205, 208, 189, 140, 200, 36, 190, 99, 223, 123, 62, 12, 98, 3, 62, 239, 195, 77, 62, 174, 159, 175, 61, 87, 61, 86, 62, 163, 136, 133, 189, 253, 152, 170, 189, 136, 220, 82, 62, 135, 128, 64, 61, 81, 137, 139, 62, 220, 196, 75, 189, 150, 197, 163, 61, 184, 215, 226, 189, 80, 193, 115, 61, 93, 181, 235, 189, 225, 233, 83, 62, 216, 246, 108, 60, 169, 9, 198, 60, 16, 111, 249, 61, 47, 196, 176, 61, 68, 93, 221, 61, 72, 18, 83, 60, 238, 243, 140, 189, 210, 42, 81, 190, 118, 167, 92, 189, 83, 158, 75, 190, 169, 253, 141, 190, 58, 172, 83, 190, 179, 152, 29, 190, 152, 150, 198, 61, 105, 11, 117, 190, 211, 20, 58, 190, 107, 137, 99, 190, 128, 67, 212, 60, 56, 23, 152, 187, 238, 242, 154, 61, 106, 245, 102, 190, 132, 125, 35, 190, 68, 253, 88, 189, 7, 222, 221, 61, 78, 61, 18, 61, 120, 99, 89, 189, 123, 57, 106, 190, 8, 83, 101, 62, 111, 144, 158, 189, 44, 142, 168, 61, 131, 250, 111, 190, 224, 166, 174, 189, 50, 238, 85, 189, 47, 192, 216, 61, 54, 122, 19, 62, 29, 10, 43, 61, 240, 250, 181, 190, 4, 125, 146, 189, 152, 203, 156, 60, 27, 85, 41, 190, 18, 9, 103, 189, 42, 118, 16, 62, 32, 160, 94, 62, 37, 219, 36, 62, 238, 116, 171, 62, 239, 158, 157, 61, 217, 178, 149, 60, 185, 240, 41, 190, 205, 72, 138, 189, 110, 14, 146, 62, 245, 33, 57, 190, 225, 229, 217, 59, 102, 225, 142, 190, 33, 164, 175, 189, 133, 175, 46, 190, 239, 27, 16, 190, 224, 248, 100, 62, 246, 60, 137, 189, 138, 32, 152, 189, 117, 0, 175, 61, 154, 195, 224, 61, 213, 241, 214, 189, 176, 222, 97, 189, 129, 248, 70, 62, 109, 93, 251, 60, 93, 77, 49, 62, 164, 244, 79, 190, 129, 100, 148, 61, 12, 240, 110, 61, 61, 186, 164, 189, 77, 31, 52, 189, 28, 218, 100, 61, 68, 51, 167, 189, 89, 215, 141, 190, 215, 23, 84, 61, 238, 174, 70, 190, 25, 250, 200, 61, 85, 39, 28, 60, 224, 90, 19, 190, 35, 195, 49, 189, 150, 131, 163, 62, 74, 84, 253, 60, 69, 95, 30, 62, 136, 113, 50, 62, 110, 69, 172, 62, 58, 254, 51, 189, 183, 31, 128, 189, 175, 54, 189, 60, 96, 173, 12, 61, 123, 182, 133, 61, 16, 149, 1, 190, 95, 191, 19, 190, 76, 190, 218, 61, 79, 186, 139, 189, 72, 24, 138, 189, 33, 49, 247, 189, 108, 66, 159, 60, 200, 15, 213, 59, 120, 144, 180, 61, 164, 133, 106, 189, 84, 220, 69, 62, 178, 131, 12, 62, 243, 129, 240, 61, 31, 208, 88, 62, 245, 62, 197, 61, 44, 51, 116, 190, 50, 229, 163, 60, 217, 163, 103, 188, 126, 90, 28, 189, 53, 36, 197, 61, 229, 121, 247, 189, 173, 64, 19, 190, 202, 148, 174, 60, 236, 41, 53, 61, 126, 95, 34, 62, 210, 128, 192, 60, 67, 85, 37, 61, 17, 236, 9, 62, 143, 240, 126, 189, 87, 182, 208, 61, 188, 193, 246, 61, 216, 48, 238, 187, 212, 165, 204, 190, 143, 103, 11, 62, 80, 198, 105, 61, 126, 8, 195, 188, 51, 208, 60, 190, 164, 145, 218, 61, 243, 132, 145, 189, 66, 9, 95, 61, 108, 184, 46, 188, 37, 25, 147, 61, 76, 86, 102, 188, 193, 41, 77, 62, 254, 81, 180, 61, 205, 14, 223, 190, 124, 121, 114, 188, 22, 184, 110, 62, 207, 31, 151, 62, 176, 72, 25, 189, 182, 185, 32, 62, 224, 124, 150, 60, 229, 252, 33, 190, 78, 247, 54, 61, 29, 190, 5, 190, 253, 18, 21, 62, 139, 143, 94, 189, 248, 235, 129, 62, 135, 179, 231, 189, 39, 225, 72, 62, 245, 163, 192, 60, 121, 186, 32, 190, 38, 98, 225, 61, 237, 255, 2, 62, 158, 243, 83, 59, 209, 80, 15, 190, 194, 240, 14, 190, 237, 47, 64, 61, 221, 182, 13, 62, 226, 226, 0, 61, 200, 95, 207, 189, 218, 230, 150, 61, 100, 41, 50, 61, 160, 140, 103, 189, 143, 236, 206, 189, 161, 130, 37, 62, 206, 158, 73, 189, 205, 132, 19, 190, 167, 27, 179, 189, 107, 172, 125, 188, 189, 235, 188, 189, 94, 109, 14, 190, 244, 101, 178, 61, 83, 34, 33, 62, 95, 39, 104, 61, 76, 66, 30, 190, 33, 144, 217, 61, 43, 153, 158, 61, 235, 212, 27, 190, 20, 75, 42, 62, 104, 117, 203, 60, 63, 229, 194, 189, 17, 230, 56, 62, 37, 69, 96, 188, 84, 254, 89, 189, 95, 177, 19, 190, 27, 147, 33, 190, 101, 154, 135, 189, 192, 78, 73, 61, 168, 245, 32, 62, 236, 160, 44, 62, 80, 173, 35, 190, 224, 147, 206, 59, 124, 195, 31, 189, 22, 198, 173, 189, 93, 243, 20, 188, 248, 63, 112, 190, 93, 66, 53, 62, 42, 131, 108, 188, 195, 56, 78, 190, 220, 35, 87, 189, 224, 253, 195, 60, 74, 254, 34, 62, 247, 104, 38, 62, 22, 197, 39, 62, 75, 253, 168, 61, 152, 57, 21, 62, 253, 20, 148, 61, 192, 182, 5, 61, 18, 61, 40, 190, 41, 231, 228, 61, 162, 83, 161, 189, 46, 152, 134, 190, 169, 55, 65, 62, 53, 61, 248, 189, 40, 30, 86, 190, 207, 221, 149, 190, 61, 9, 112, 190, 205, 135, 139, 61, 157, 144, 44, 62, 81, 74, 31, 61, 245, 100, 102, 62, 101, 209, 58, 190, 255, 144, 8, 190, 173, 15, 120, 190, 224, 147, 59, 190, 28, 207, 14, 190, 183, 31, 14, 61, 91, 32, 64, 190, 181, 51, 241, 188, 110, 241, 40, 190, 120, 206, 209, 61, 116, 211, 189, 58, 20, 217, 192, 61, 44, 101, 74, 62, 31, 37, 30, 189, 183, 102, 165, 60, 242, 230, 164, 189, 63, 69, 135, 62, 84, 249, 219, 59, 179, 250, 10, 191, 136, 229, 4, 189, 239, 58, 215, 61, 179, 191, 243, 188, 154, 38, 12, 191, 85, 4, 131, 188, 99, 159, 53, 189, 198, 179, 50, 61, 179, 249, 197, 187, 244, 187, 150, 189, 163, 17, 157, 61, 227, 197, 128, 189, 0, 217, 35, 188, 217, 73, 15, 190, 106, 89, 255, 60, 32, 175, 168, 189, 128, 78, 27, 190, 36, 10, 112, 61, 247, 131, 84, 189, 146, 173, 21, 190, 252, 103, 40, 62, 71, 63, 118, 188, 236, 175, 43, 190, 228, 215, 196, 189, 195, 224, 145, 188, 247, 108, 47, 62, 150, 29, 128, 189, 51, 168, 167, 61, 31, 211, 20, 190, 94, 139, 227, 60, 190, 113, 23, 62, 35, 90, 41, 190, 167, 207, 60, 61, 26, 181, 220, 61, 114, 64, 17, 188, 66, 134, 31, 190, 22, 7, 3, 62, 17, 109, 198, 189, 4, 171, 219, 189, 45, 105, 131, 61, 29, 58, 137, 61, 142, 123, 226, 61, 133, 118, 184, 190, 68, 150, 148, 61, 228, 176, 153, 61, 52, 243, 211, 61, 239, 201, 10, 190, 19, 189, 234, 189, 0, 176, 226, 189, 47, 82, 150, 189, 84, 92, 62, 61, 187, 43, 172, 61, 38, 176, 107, 189, 221, 88, 127, 60, 187, 250, 53, 62, 221, 45, 103, 61, 224, 14, 56, 183, 40, 147, 22, 62, 230, 40, 55, 62, 205, 160, 255, 61, 248, 217, 138, 189, 25, 214, 58, 61, 78, 142, 70, 62, 220, 57, 167, 189, 149, 228, 132, 190, 5, 152, 38, 62, 194, 138, 71, 190, 110, 203, 229, 187, 238, 221, 95, 189, 204, 197, 29, 62, 71, 52, 13, 190, 130, 109, 1, 190, 94, 124, 9, 61, 255, 134, 69, 62, 216, 159, 197, 189, 218, 77, 91, 62, 46, 151, 139, 62, 50, 79, 201, 188, 25, 128, 212, 189, 81, 165, 203, 186, 244, 25, 154, 190, 7, 18, 128, 189, 40, 207, 16, 190, 70, 244, 170, 59, 2, 163, 146, 190, 244, 102, 132, 189, 123, 2, 242, 189, 114, 64, 137, 190, 31, 10, 31, 189, 127, 2, 20, 189, 209, 162, 244, 61, 91, 9, 49, 62, 112, 138, 129, 62, 142, 12, 216, 60, 162, 241, 187, 60, 218, 32, 182, 189, 255, 129, 210, 190, 7, 107, 171, 188, 99, 205, 142, 188, 141, 182, 151, 62, 228, 124, 22, 191, 84, 21, 162, 188, 16, 190, 190, 60, 146, 163, 191, 189, 167, 55, 9, 62, 168, 112, 29, 62, 212, 183, 222, 189, 134, 246, 218, 61, 149, 124, 68, 62, 93, 140, 7, 189, 158, 17, 22, 61, 177, 66, 28, 189, 208, 195, 224, 188, 244, 75, 64, 189, 192, 59, 25, 62, 228, 68, 14, 62, 173, 7, 185, 189, 176, 62, 221, 189, 143, 8, 227, 61, 63, 139, 119, 190, 26, 91, 17, 61, 147, 41, 92, 62, 188, 147, 76, 62, 32, 2, 149, 189, 161, 86, 229, 189, 219, 36, 235, 61, 28, 253, 64, 189, 195, 19, 9, 189, 117, 157, 113, 190, 98, 151, 153, 61, 230, 159, 211, 61, 217, 158, 236, 61, 244, 57, 37, 61, 86, 1, 162, 61, 1, 86, 203, 188, 74, 63, 151, 60, 245, 224, 176, 61, 47, 16, 251, 60, 220, 233, 22, 190, 48, 86, 8, 62, 130, 181, 226, 187, 56, 237, 30, 62, 120, 194, 175, 61, 153, 97, 212, 189, 9, 207, 106, 190, 202, 214, 4, 190, 52, 88, 151, 60, 176, 4, 123, 62, 26, 27, 3, 187, 253, 152, 119, 61, 59, 11, 36, 62, 90, 19, 162, 190, 129, 47, 36, 190, 210, 246, 146, 189, 117, 252, 235, 189, 246, 5, 222, 60, 224, 180, 181, 60, 186, 94, 205, 189, 125, 83, 0, 62, 65, 49, 168, 188, 243, 125, 74, 189, 239, 17, 206, 188, 76, 65, 179, 61, 129, 57, 205, 61, 182, 178, 171, 61, 116, 146, 17, 62, 231, 109, 27, 190, 133, 217, 69, 190, 239, 221, 39, 62, 118, 47, 211, 190, 179, 116, 131, 62, 12, 223, 164, 61, 44, 12, 202, 189, 232, 165, 13, 62, 156, 149, 132, 190, 104, 100, 167, 189, 163, 188, 89, 62, 38, 195, 245, 61, 26, 99, 182, 61, 195, 24, 131, 190, 246, 220, 184, 61, 168, 222, 59, 188, 198, 68, 65, 190, 52, 210, 186, 189, 211, 254, 168, 61, 133, 35, 2, 190, 38, 75, 211, 190, 70, 99, 52, 190, 74, 49, 45, 189, 34, 196, 91, 190, 169, 79, 182, 189, 141, 122, 105, 62, 97, 123, 173, 62, 187, 82, 63, 190, 243, 244, 246, 188, 90, 184, 230, 189, 124, 134, 143, 60, 10, 151, 24, 190, 102, 248, 141, 190, 213, 9, 7, 190, 111, 48, 66, 189, 196, 160, 173, 189, 87, 103, 133, 62, 252, 179, 71, 62, 174, 17, 166, 190, 241, 222, 93, 189, 125, 49, 223, 60, 26, 18, 211, 61, 43, 15, 85, 62, 49, 38, 182, 189, 35, 64, 89, 190, 152, 138, 155, 190, 30, 164, 79, 62, 52, 218, 134, 190, 51, 88, 191, 188, 147, 245, 195, 61, 43, 114, 99, 61, 24, 180, 184, 189, 179, 207, 6, 189, 245, 56, 141, 190, 177, 168, 234, 61, 40, 184, 110, 189, 102, 17, 131, 190, 239, 87, 115, 62, 99, 196, 202, 62, 100, 179, 63, 190, 128, 32, 70, 62, 156, 92, 210, 61, 110, 44, 196, 62, 86, 239, 68, 190, 87, 220, 245, 61, 108, 101, 25, 189, 22, 136, 8, 190, 46, 176, 64, 61, 84, 10, 75, 62, 94, 25, 244, 61, 233, 90, 25, 190, 255, 216, 136, 59, 148, 190, 84, 61, 64, 198, 23, 188, 128, 199, 7, 62, 197, 67, 209, 61, 6, 9, 237, 61, 82, 89, 135, 190, 7, 223, 37, 61, 41, 113, 202, 61, 165, 33, 129, 190, 163, 126, 160, 188, 112, 132, 34, 190, 162, 71, 153, 189, 64, 201, 225, 190, 187, 55, 67, 189, 69, 251, 112, 189, 79, 187, 253, 60, 23, 68, 2, 61, 164, 154, 8, 62, 149, 117, 153, 61, 167, 135, 127, 190, 148, 58, 19, 189, 226, 85, 247, 189, 146, 82, 105, 62, 166, 74, 130, 61, 163, 202, 30, 61, 73, 15, 244, 61, 25, 82, 11, 190, 235, 195, 18, 188, 35, 128, 65, 62, 154, 194, 50, 190, 78, 86, 174, 60, 83, 210, 49, 190, 177, 40, 201, 189, 183, 226, 96, 58, 5, 198, 82, 190, 115, 27, 35, 61, 129, 160, 135, 189, 129, 248, 19, 62, 134, 84, 255, 189, 250, 149, 39, 61, 69, 87, 43, 62, 33, 255, 57, 59, 143, 125, 248, 61, 249, 98, 24, 62, 178, 7, 213, 61, 181, 217, 60, 190, 151, 71, 130, 189, 121, 155, 71, 61, 181, 80, 106, 189, 82, 83, 36, 190, 121, 16, 50, 190, 33, 44, 146, 188, 221, 244, 178, 187, 207, 159, 113, 58, 98, 189, 161, 61, 76, 27, 245, 61, 77, 207, 102, 188, 206, 129, 83, 62, 197, 8, 197, 61, 41, 146, 34, 62, 238, 212, 108, 190, 126, 33, 86, 62, 59, 130, 73, 62, 202, 64, 24, 190, 17, 187, 45, 190, 173, 45, 67, 62, 163, 166, 239, 61, 96, 85, 24, 62, 113, 64, 3, 61, 189, 51, 32, 62, 2, 69, 118, 61, 180, 65, 83, 189, 38, 217, 172, 61, 204, 217, 191, 189, 8, 49, 179, 61, 19, 28, 88, 62, 249, 242, 136, 188, 246, 142, 18, 190, 179, 181, 191, 189, 169, 120, 52, 190, 230, 255, 224, 189, 160, 237, 19, 62, 24, 77, 17, 190, 24, 125, 44, 189, 252, 156, 250, 188, 253, 88, 15, 62, 211, 176, 193, 189, 73, 174, 243, 61, 97, 174, 43, 62, 86, 132, 1, 62, 55, 179, 210, 61, 249, 52, 217, 61, 102, 168, 247, 189, 183, 178, 158, 60, 198, 191, 219, 61, 135, 236, 49, 190, 194, 218, 194, 188, 180, 61, 58, 61, 100, 218, 36, 190, 220, 198, 16, 61, 105, 246, 43, 62, 219, 160, 27, 190, 99, 12, 169, 58, 0, 157, 140, 189, 174, 216, 53, 61, 199, 250, 15, 189, 163, 195, 32, 60, 73, 249, 78, 190, 104, 82, 211, 189, 238, 183, 141, 60, 232, 103, 44, 190, 105, 28, 26, 62, 237, 58, 124, 61, 154, 8, 28, 190, 146, 148, 223, 61, 188, 100, 141, 61, 17, 179, 121, 189, 10, 15, 228, 188, 116, 77, 8, 190, 88, 67, 151, 188, 215, 98, 185, 189, 139, 167, 201, 189, 129, 222, 171, 189, 28, 25, 24, 62, 106, 84, 235, 189, 69, 96, 181, 60, 90, 5, 112, 62, 119, 231, 104, 189, 41, 184, 179, 189, 254, 1, 147, 61, 225, 159, 92, 190, 231, 248, 36, 62, 20, 31, 120, 190, 87, 24, 80, 62, 128, 92, 15, 190, 116, 85, 81, 62, 180, 203, 81, 189, 228, 159, 5, 190, 198, 93, 43, 62, 212, 77, 49, 62, 102, 178, 205, 61, 229, 228, 40, 62, 131, 100, 14, 62, 248, 185, 72, 62, 250, 36, 128, 62, 51, 241, 153, 188, 231, 155, 203, 190, 66, 176, 229, 61, 76, 164, 202, 189, 190, 231, 34, 189, 212, 97, 175, 190, 238, 122, 5, 60, 233, 198, 155, 189, 182, 239, 222, 189, 19, 145, 27, 62, 177, 76, 76, 190, 197, 103, 178, 62, 45, 179, 107, 61, 187, 146, 71, 189, 112, 190, 124, 189, 220, 222, 114, 189, 99, 156, 28, 62, 121, 217, 175, 61, 157, 38, 27, 190, 250, 143, 127, 190, 30, 60, 246, 190, 231, 137, 203, 61, 230, 139, 104, 190, 239, 63, 58, 190, 18, 242, 134, 187, 154, 113, 1, 62, 17, 30, 165, 190, 154, 196, 133, 190, 122, 61, 195, 190, 46, 24, 68, 189, 61, 174, 239, 58, 80, 110, 153, 61, 102, 161, 148, 61, 100, 4, 149, 62, 16, 5, 114, 190, 175, 14, 0, 62, 173, 41, 170, 189, 53, 86, 130, 62, 58, 106, 16, 190, 230, 162, 114, 61, 73, 22, 137, 60, 21, 218, 182, 188, 200, 244, 56, 189, 233, 131, 113, 60, 185, 100, 161, 190, 194, 222, 193, 61, 57, 68, 29, 62, 253, 71, 223, 189, 202, 95, 20, 62, 139, 163, 93, 190, 133, 1, 204, 61, 52, 160, 208, 59, 244, 73, 37, 61, 22, 110, 106, 61, 79, 34, 85, 61, 160, 76, 133, 60, 88, 174, 201, 60, 29, 184, 181, 189, 202, 250, 66, 188, 214, 88, 1, 61, 42, 18, 95, 61, 94, 252, 197, 189, 245, 32, 21, 190, 168, 62, 104, 190, 75, 194, 158, 187, 166, 63, 12, 190, 118, 94, 80, 190, 116, 18, 57, 61, 52, 243, 32, 188, 131, 224, 213, 189, 195, 73, 60, 190, 219, 33, 6, 62, 238, 165, 88, 189, 122, 57, 8, 190, 163, 209, 227, 59, 221, 89, 60, 190, 103, 234, 35, 190, 82, 51, 118, 61, 147, 34, 239, 61, 216, 119, 227, 188, 199, 142, 211, 189, 133, 118, 19, 190, 241, 170, 195, 61, 54, 226, 178, 189, 230, 64, 146, 189, 233, 80, 15, 62, 156, 98, 251, 189, 251, 165, 158, 188, 50, 17, 1, 62, 196, 29, 136, 189, 212, 71, 216, 60, 141, 182, 251, 59, 195, 55, 9, 190, 32, 175, 254, 189, 131, 98, 29, 189, 92, 93, 11, 189, 192, 254, 30, 190, 220, 161, 186, 188, 229, 208, 14, 190, 206, 170, 177, 189, 203, 134, 46, 189, 197, 129, 35, 190, 19, 214, 46, 62, 200, 98, 119, 189, 76, 1, 217, 189, 109, 0, 130, 61, 128, 204, 54, 62, 64, 153, 111, 189, 34, 232, 169, 61, 52, 114, 135, 189, 255, 212, 133, 60, 167, 81, 88, 190, 36, 123, 169, 189, 245, 34, 3, 62, 74, 184, 45, 190, 230, 132, 61, 62, 0, 255, 106, 62, 151, 251, 251, 59, 55, 57, 175, 61, 157, 27, 74, 61, 225, 28, 67, 190, 243, 78, 179, 189, 96, 165, 9, 62, 77, 9, 35, 62, 254, 209, 145, 61, 249, 157, 57, 62, 194, 122, 13, 186, 85, 159, 189, 189, 160, 121, 129, 189, 250, 39, 23, 190, 248, 132, 146, 61, 247, 50, 81, 61, 127, 95, 32, 62, 34, 17, 37, 61, 21, 227, 37, 61, 151, 46, 15, 190, 188, 52, 58, 190, 154, 94, 185, 61, 121, 154, 11, 62, 29, 34, 200, 61, 67, 63, 154, 189, 123, 241, 56, 190, 127, 85, 148, 189, 29, 87, 22, 189, 62, 117, 161, 189, 57, 31, 36, 62, 244, 92, 230, 61, 172, 220, 164, 61, 160, 147, 158, 189, 193, 68, 30, 62, 94, 27, 55, 61, 200, 195, 140, 188, 219, 3, 78, 62, 211, 124, 38, 62, 28, 2, 13, 190, 93, 240, 30, 60, 172, 40, 38, 61, 45, 144, 158, 61, 226, 238, 186, 189, 201, 246, 218, 189, 150, 153, 6, 62, 143, 234, 40, 62, 116, 159, 28, 62, 102, 46, 157, 61, 247, 109, 37, 189, 237, 7, 45, 62, 80, 37, 128, 187, 176, 34, 47, 189, 43, 85, 8, 190, 81, 28, 39, 60, 1, 113, 36, 190, 157, 102, 124, 189, 69, 119, 157, 61, 96, 210, 129, 190, 44, 236, 118, 188, 141, 73, 26, 62, 33, 69, 107, 189, 169, 16, 62, 62, 139, 221, 33, 62, 87, 118, 107, 190, 162, 200, 165, 60, 111, 68, 202, 61, 205, 156, 24, 190, 195, 79, 103, 190, 10, 116, 131, 62, 141, 77, 77, 189, 13, 91, 101, 190, 188, 237, 172, 60, 46, 1, 106, 61, 75, 241, 193, 59, 104, 124, 193, 60, 65, 247, 208, 60, 6, 212, 20, 62, 184, 230, 169, 62, 14, 231, 95, 189, 205, 1, 163, 61, 161, 35, 141, 61, 239, 138, 42, 62, 28, 205, 31, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {85, 178, 62, 190, 154, 136, 51, 62, 37, 18, 34, 62, 228, 92, 239, 187, 232, 29, 9, 61, 166, 117, 5, 62, 251, 82, 127, 61, 187, 71, 67, 188, 248, 237, 68, 62, 207, 100, 14, 190, 131, 193, 185, 61, 57, 24, 46, 188, 62, 66, 245, 189, 190, 216, 81, 62, 51, 85, 224, 189, 16, 29, 54, 62, 190, 160, 129, 62, 148, 78, 126, 62, 65, 105, 192, 60, 140, 250, 33, 62, 187, 242, 85, 61, 206, 11, 72, 62, 190, 225, 100, 188, 248, 109, 171, 189, 247, 59, 59, 189, 30, 167, 42, 188, 107, 66, 173, 62, 14, 52, 71, 189, 89, 228, 243, 61, 115, 155, 129, 62, 246, 224, 213, 187, 75, 103, 129, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {99, 23, 189, 188, 145, 226, 165, 189, 15, 41, 41, 62, 235, 103, 95, 190, 237, 189, 184, 61, 91, 124, 81, 62, 57, 236, 134, 190, 11, 248, 194, 190, 24, 190, 50, 62, 214, 207, 150, 61, 73, 218, 137, 190, 222, 193, 124, 58, 91, 100, 34, 190, 231, 116, 178, 190, 21, 69, 48, 190, 250, 33, 20, 190, 61, 181, 228, 190, 172, 21, 96, 190, 146, 118, 185, 189, 46, 234, 178, 62, 7, 194, 202, 62, 56, 133, 3, 62, 44, 130, 10, 61, 239, 117, 5, 190, 248, 119, 74, 61, 115, 177, 88, 188, 210, 26, 167, 62, 64, 32, 100, 188, 48, 182, 146, 61, 49, 209, 248, 189, 161, 44, 232, 61, 182, 166, 46, 62, 40, 41, 23, 62, 244, 80, 118, 189, 130, 189, 121, 190, 53, 159, 44, 189, 19, 186, 42, 190, 33, 178, 129, 189, 69, 66, 199, 60, 123, 219, 154, 61, 123, 175, 77, 190, 65, 200, 90, 61, 154, 131, 139, 61, 197, 169, 53, 62, 176, 54, 80, 61, 82, 250, 252, 189, 52, 153, 2, 61, 163, 188, 24, 190, 89, 172, 5, 189, 115, 151, 46, 190, 154, 29, 247, 61, 247, 238, 151, 188, 175, 133, 146, 59, 161, 107, 252, 188, 225, 219, 36, 190, 15, 209, 82, 190, 64, 86, 4, 62, 52, 128, 156, 190, 146, 185, 140, 60, 16, 241, 18, 62, 67, 64, 139, 189, 77, 211, 48, 190, 101, 68, 212, 189, 123, 175, 154, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 128, 25, 190, 141, 80, 84, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {165, 250, 180, 190, 153, 241, 163, 190, 223, 138, 255, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {253, 9, 150, 62, 58, 182, 234, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0049/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}