// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {48, 5, 97, 63, 28, 210, 182, 62, 120, 202, 192, 62, 107, 83, 62, 63, 70, 77, 146, 61, 155, 238, 21, 63, 239, 2, 63, 62, 182, 55, 114, 63, 6, 195, 233, 62, 254, 10, 229, 62, 108, 248, 162, 62, 215, 234, 84, 188, 17, 228, 183, 190, 112, 104, 140, 191, 242, 41, 218, 189, 178, 176, 107, 190, 204, 62, 188, 188, 65, 208, 99, 188, 151, 224, 205, 62, 10, 197, 71, 63, 242, 250, 33, 61, 76, 212, 21, 191, 0, 178, 190, 191, 18, 160, 174, 190, 119, 122, 110, 190, 229, 57, 206, 62, 14, 26, 133, 190, 193, 65, 6, 63, 64, 142, 8, 191, 89, 28, 34, 190, 0, 115, 11, 191, 201, 89, 177, 62, 15, 127, 11, 63, 160, 219, 209, 187, 173, 6, 127, 188, 223, 109, 55, 190, 13, 5, 255, 62, 235, 44, 141, 61, 27, 54, 0, 63, 102, 80, 6, 63, 106, 58, 250, 62, 183, 101, 221, 190, 125, 22, 68, 63, 217, 174, 20, 191, 231, 45, 20, 191, 163, 161, 48, 63, 205, 225, 21, 63, 183, 232, 193, 62, 212, 252, 140, 189, 119, 103, 33, 191, 40, 26, 130, 62, 51, 237, 92, 63, 203, 87, 140, 191, 147, 205, 164, 190, 125, 175, 7, 63, 55, 89, 28, 191, 60, 212, 135, 190, 73, 52, 102, 190, 134, 155, 130, 191, 130, 97, 16, 62, 223, 15, 141, 189, 132, 79, 10, 190, 13, 201, 186, 190, 219, 72, 179, 189, 137, 68, 29, 190, 46, 22, 10, 191, 39, 59, 116, 190, 10, 159, 240, 189, 97, 19, 119, 190, 196, 124, 4, 190, 229, 32, 132, 191, 208, 123, 233, 190, 214, 64, 146, 191, 91, 198, 210, 61, 74, 102, 178, 60, 138, 254, 42, 190, 239, 181, 155, 190, 21, 117, 21, 63, 41, 70, 12, 62, 176, 169, 86, 191, 138, 83, 56, 62, 175, 254, 26, 63, 192, 210, 35, 62, 93, 191, 15, 190, 210, 210, 226, 62, 3, 75, 152, 191, 28, 96, 168, 190, 124, 131, 144, 62, 57, 237, 192, 62, 93, 164, 0, 187, 245, 123, 125, 189, 48, 85, 122, 190, 178, 201, 5, 63, 87, 57, 3, 63, 200, 35, 99, 63, 191, 177, 10, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 82, 149, 191, 236, 97, 108, 61, 50, 248, 195, 62, 153, 33, 134, 61, 140, 99, 152, 62, 91, 138, 38, 63, 45, 69, 234, 190, 142, 141, 114, 188, 40, 128, 34, 191, 157, 204, 159, 62, 35, 1, 77, 190, 69, 229, 176, 62, 133, 167, 49, 62, 174, 70, 91, 62, 232, 172, 13, 191, 170, 131, 101, 191, 114, 181, 196, 61, 88, 204, 42, 191, 236, 231, 62, 62, 39, 119, 121, 190, 88, 29, 78, 190, 227, 61, 167, 190, 27, 254, 4, 63, 178, 9, 10, 190, 233, 247, 176, 188, 174, 181, 11, 63, 25, 3, 160, 62, 101, 31, 166, 62, 73, 176, 88, 61, 198, 214, 1, 63, 16, 139, 44, 62, 90, 55, 171, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 4, 52, 62, 206, 156, 11, 189, 216, 81, 236, 60, 219, 195, 169, 61, 155, 110, 99, 190, 197, 234, 253, 189, 66, 6, 144, 188, 34, 179, 39, 62, 94, 78, 51, 189, 199, 12, 163, 189, 194, 88, 8, 190, 245, 194, 195, 188, 62, 254, 224, 61, 189, 32, 60, 62, 88, 215, 5, 189, 236, 123, 193, 189, 160, 147, 112, 189, 245, 19, 20, 190, 113, 9, 252, 189, 228, 115, 8, 189, 148, 118, 248, 188, 104, 195, 215, 189, 31, 40, 70, 190, 110, 115, 155, 189, 127, 86, 21, 62, 224, 239, 15, 62, 36, 76, 164, 189, 159, 158, 63, 61, 173, 143, 181, 60, 120, 60, 13, 190, 221, 111, 44, 190, 175, 2, 119, 188, 171, 212, 19, 190, 245, 94, 201, 59, 103, 228, 97, 191, 251, 236, 181, 190, 226, 69, 249, 62, 92, 12, 28, 189, 76, 252, 20, 188, 102, 246, 202, 62, 187, 69, 60, 191, 71, 4, 80, 191, 244, 174, 100, 191, 93, 116, 110, 191, 124, 10, 131, 62, 253, 43, 118, 190, 212, 235, 106, 190, 24, 94, 30, 189, 31, 254, 57, 63, 232, 124, 246, 190, 171, 92, 5, 191, 135, 190, 77, 63, 125, 48, 213, 190, 54, 72, 157, 190, 56, 141, 127, 61, 153, 75, 189, 189, 199, 220, 30, 62, 209, 229, 15, 61, 81, 121, 49, 62, 225, 77, 249, 190, 52, 77, 151, 190, 26, 109, 5, 191, 39, 210, 5, 191, 196, 160, 35, 60, 167, 120, 51, 190, 217, 75, 109, 189, 15, 138, 206, 61, 120, 112, 240, 189, 176, 69, 78, 190, 133, 198, 130, 62, 250, 120, 146, 190, 232, 114, 254, 62, 24, 103, 180, 62, 37, 187, 2, 191, 165, 194, 178, 61, 156, 92, 208, 61, 73, 30, 225, 188, 75, 184, 73, 191, 125, 216, 132, 61, 241, 153, 77, 62, 26, 83, 181, 190, 35, 134, 50, 190, 164, 117, 224, 189, 115, 185, 58, 191, 74, 42, 25, 190, 170, 167, 172, 191, 107, 136, 181, 62, 9, 170, 217, 191, 126, 64, 3, 63, 137, 13, 20, 61, 76, 187, 86, 190, 17, 23, 154, 191, 126, 78, 172, 190, 218, 169, 155, 62, 19, 208, 93, 188, 83, 21, 49, 61, 251, 178, 21, 63, 120, 135, 159, 62, 95, 130, 140, 189, 30, 131, 41, 62, 67, 83, 175, 190, 27, 1, 6, 62, 240, 48, 121, 62, 88, 200, 68, 190, 180, 211, 58, 190, 53, 209, 212, 189, 186, 212, 148, 189, 26, 234, 126, 61, 246, 186, 148, 60, 96, 223, 179, 62, 18, 83, 189, 190, 162, 248, 105, 62, 16, 213, 125, 189, 236, 86, 137, 191, 239, 151, 25, 62, 23, 198, 11, 62, 92, 78, 217, 61, 157, 65, 4, 62, 160, 226, 54, 189, 145, 32, 141, 190, 181, 24, 129, 189, 57, 125, 170, 189, 29, 11, 51, 62, 146, 80, 138, 62, 179, 185, 204, 190, 249, 15, 141, 58, 55, 128, 33, 190, 180, 213, 143, 62, 190, 98, 252, 190, 226, 175, 225, 61, 114, 222, 47, 190, 246, 205, 170, 189, 215, 66, 138, 62, 5, 221, 115, 62, 137, 182, 189, 61, 72, 255, 20, 191, 240, 58, 6, 191, 176, 78, 58, 62, 122, 251, 83, 190, 118, 120, 138, 61, 180, 100, 170, 60, 151, 121, 128, 60, 134, 10, 169, 188, 25, 61, 148, 190, 197, 179, 65, 190, 213, 234, 167, 190, 149, 130, 201, 61, 8, 83, 19, 188, 57, 199, 33, 191, 113, 154, 148, 190, 40, 165, 201, 188, 237, 237, 38, 191, 105, 26, 237, 60, 247, 250, 251, 61, 193, 87, 168, 62, 171, 0, 226, 189, 63, 245, 22, 62, 240, 248, 24, 62, 1, 131, 70, 62, 64, 250, 150, 190, 213, 60, 82, 189, 206, 73, 167, 190, 195, 34, 155, 61, 223, 41, 39, 62, 149, 91, 145, 190, 239, 69, 93, 188, 103, 159, 42, 191, 228, 57, 5, 190, 206, 219, 230, 61, 1, 100, 44, 62, 97, 152, 79, 189, 69, 234, 77, 62, 206, 133, 114, 190, 111, 66, 37, 62, 0, 150, 208, 62, 208, 79, 123, 61, 69, 142, 157, 191, 164, 238, 216, 62, 248, 253, 58, 62, 30, 247, 150, 191, 148, 123, 45, 189, 158, 155, 39, 190, 139, 212, 201, 189, 112, 249, 40, 190, 224, 193, 143, 191, 186, 98, 17, 191, 167, 170, 190, 189, 66, 159, 88, 62, 69, 69, 139, 62, 167, 250, 27, 62, 66, 232, 2, 191, 225, 171, 6, 191, 231, 159, 176, 62, 19, 127, 190, 62, 64, 188, 57, 62, 203, 176, 239, 62, 24, 131, 187, 190, 191, 217, 201, 60, 156, 242, 94, 62, 199, 28, 30, 190, 19, 103, 61, 62, 97, 183, 37, 62, 165, 221, 218, 60, 167, 40, 184, 61, 197, 123, 132, 62, 101, 29, 84, 62, 230, 16, 178, 189, 54, 118, 155, 62, 237, 81, 201, 189, 167, 239, 143, 191, 114, 122, 23, 190, 187, 171, 211, 189, 32, 194, 2, 190, 70, 231, 197, 189, 52, 245, 39, 190, 154, 227, 84, 61, 103, 175, 136, 190, 179, 63, 120, 189, 142, 235, 66, 190, 167, 22, 220, 61, 53, 155, 154, 190, 221, 56, 89, 62, 115, 248, 123, 190, 25, 82, 188, 61, 228, 19, 78, 62, 247, 184, 164, 62, 173, 194, 107, 188, 127, 135, 7, 189, 143, 87, 176, 189, 192, 77, 89, 62, 204, 189, 19, 62, 17, 37, 118, 62, 185, 102, 152, 190, 91, 36, 152, 189, 13, 225, 3, 191, 188, 98, 3, 62, 212, 26, 170, 62, 210, 90, 155, 61, 36, 159, 247, 190, 78, 190, 254, 188, 110, 226, 249, 61, 201, 1, 89, 191, 196, 135, 123, 189, 62, 39, 4, 61, 212, 18, 70, 62, 152, 166, 85, 62, 231, 139, 178, 62, 93, 194, 203, 61, 179, 108, 164, 189, 133, 77, 116, 190, 229, 91, 179, 188, 179, 59, 165, 62, 99, 214, 135, 190, 162, 99, 178, 61, 222, 231, 182, 190, 212, 102, 40, 62, 25, 207, 183, 190, 120, 155, 166, 189, 197, 45, 87, 62, 149, 106, 147, 189, 32, 117, 19, 61, 7, 73, 78, 62, 38, 35, 63, 60, 160, 164, 229, 189, 70, 23, 203, 188, 10, 44, 138, 62, 220, 244, 107, 189, 202, 84, 103, 62, 238, 51, 22, 190, 26, 94, 209, 61, 29, 176, 41, 62, 50, 157, 65, 190, 223, 96, 142, 189, 57, 15, 45, 62, 166, 237, 15, 61, 155, 218, 159, 190, 58, 78, 42, 62, 0, 149, 34, 190, 126, 194, 90, 62, 180, 12, 4, 61, 205, 120, 134, 190, 38, 73, 63, 189, 25, 87, 178, 62, 64, 97, 107, 61, 58, 247, 120, 62, 231, 64, 119, 62, 161, 7, 169, 62, 79, 177, 28, 190, 139, 53, 202, 62, 77, 83, 16, 62, 91, 167, 159, 61, 73, 183, 19, 62, 125, 183, 15, 191, 41, 227, 254, 190, 220, 86, 196, 61, 107, 111, 69, 190, 154, 152, 101, 189, 86, 142, 229, 189, 11, 198, 85, 62, 171, 56, 91, 60, 195, 218, 71, 62, 149, 184, 59, 188, 92, 180, 244, 62, 142, 59, 10, 63, 159, 242, 153, 61, 134, 166, 91, 63, 102, 108, 250, 61, 82, 10, 45, 191, 7, 196, 64, 61, 67, 205, 42, 61, 67, 178, 157, 189, 212, 136, 49, 62, 111, 167, 51, 191, 113, 179, 24, 190, 195, 75, 137, 190, 120, 106, 150, 61, 121, 62, 143, 62, 6, 127, 56, 59, 133, 48, 236, 60, 192, 136, 172, 62, 86, 171, 70, 61, 232, 4, 59, 62, 186, 200, 125, 61, 38, 131, 8, 61, 65, 191, 192, 190, 194, 188, 254, 60, 152, 0, 142, 62, 112, 149, 39, 190, 28, 14, 144, 190, 182, 62, 206, 61, 75, 191, 150, 190, 187, 159, 67, 61, 210, 164, 59, 61, 112, 177, 189, 61, 55, 78, 62, 190, 124, 19, 93, 62, 8, 32, 77, 189, 29, 178, 138, 191, 123, 210, 81, 189, 231, 65, 227, 187, 98, 71, 69, 62, 92, 189, 47, 189, 221, 130, 10, 62, 193, 29, 153, 189, 167, 98, 248, 190, 163, 11, 28, 189, 58, 22, 125, 189, 156, 153, 54, 62, 109, 39, 42, 190, 184, 97, 159, 62, 167, 201, 66, 190, 239, 169, 126, 62, 255, 48, 236, 188, 173, 231, 135, 190, 55, 99, 42, 190, 153, 77, 18, 62, 25, 250, 7, 191, 227, 182, 204, 190, 74, 78, 110, 190, 4, 84, 114, 60, 38, 131, 126, 62, 48, 12, 174, 188, 75, 183, 33, 190, 24, 227, 87, 61, 47, 190, 117, 189, 118, 96, 51, 189, 18, 120, 17, 190, 196, 5, 210, 61, 206, 158, 73, 189, 233, 87, 47, 189, 80, 95, 3, 190, 107, 172, 125, 188, 115, 7, 191, 60, 153, 216, 158, 189, 240, 30, 141, 60, 132, 68, 86, 62, 227, 91, 1, 190, 75, 251, 180, 190, 40, 242, 109, 60, 183, 192, 148, 61, 131, 67, 104, 190, 186, 234, 209, 60, 47, 248, 105, 59, 62, 189, 65, 190, 92, 232, 14, 63, 154, 17, 152, 61, 26, 38, 7, 190, 45, 92, 249, 190, 130, 173, 78, 62, 145, 250, 45, 190, 170, 129, 55, 190, 17, 234, 207, 62, 194, 177, 209, 61, 23, 95, 50, 190, 31, 1, 138, 189, 104, 152, 131, 188, 161, 246, 146, 188, 99, 167, 32, 189, 219, 123, 114, 190, 125, 133, 212, 62, 164, 134, 18, 61, 48, 63, 183, 190, 142, 18, 201, 189, 148, 30, 94, 62, 13, 82, 23, 62, 163, 44, 80, 62, 216, 92, 100, 62, 237, 69, 20, 62, 187, 90, 149, 61, 238, 170, 42, 61, 21, 84, 132, 62, 90, 191, 46, 190, 215, 132, 38, 62, 194, 192, 200, 190, 226, 244, 146, 190, 85, 56, 136, 62, 68, 248, 140, 189, 242, 60, 96, 190, 16, 229, 122, 191, 167, 157, 63, 190, 166, 154, 164, 62, 39, 114, 1, 62, 99, 55, 68, 61, 239, 40, 151, 62, 89, 116, 253, 189, 53, 112, 233, 190, 138, 218, 47, 191, 109, 48, 19, 191, 228, 156, 59, 61, 19, 216, 28, 62, 47, 230, 201, 190, 43, 33, 171, 59, 17, 97, 110, 63, 84, 130, 179, 190, 114, 170, 163, 190, 180, 21, 90, 63, 254, 76, 131, 61, 215, 65, 69, 190, 9, 169, 33, 190, 114, 191, 138, 190, 172, 87, 28, 62, 114, 36, 57, 62, 23, 39, 45, 190, 33, 176, 88, 188, 196, 10, 93, 190, 138, 254, 175, 190, 41, 208, 192, 190, 164, 168, 240, 189, 99, 159, 53, 189, 198, 179, 50, 61, 179, 249, 197, 187, 244, 187, 150, 189, 163, 17, 157, 61, 227, 197, 128, 189, 0, 217, 35, 188, 217, 73, 15, 190, 106, 89, 255, 60, 32, 175, 168, 189, 128, 78, 27, 190, 36, 10, 112, 61, 247, 131, 84, 189, 146, 173, 21, 190, 252, 103, 40, 62, 71, 63, 118, 188, 236, 175, 43, 190, 228, 215, 196, 189, 195, 224, 145, 188, 247, 108, 47, 62, 150, 29, 128, 189, 51, 168, 167, 61, 31, 211, 20, 190, 94, 139, 227, 60, 190, 113, 23, 62, 35, 90, 41, 190, 167, 207, 60, 61, 26, 181, 220, 61, 114, 64, 17, 188, 66, 134, 31, 190, 22, 7, 3, 62, 17, 109, 198, 189, 243, 15, 50, 190, 161, 247, 7, 62, 82, 18, 77, 61, 130, 242, 107, 61, 196, 35, 167, 190, 100, 31, 139, 61, 51, 231, 162, 62, 214, 235, 189, 189, 101, 157, 31, 190, 186, 13, 10, 190, 194, 55, 110, 190, 3, 60, 224, 189, 46, 59, 242, 61, 165, 191, 81, 61, 195, 144, 248, 189, 1, 28, 69, 189, 237, 16, 145, 62, 212, 176, 9, 191, 203, 226, 147, 60, 155, 169, 127, 190, 7, 69, 17, 62, 21, 134, 5, 62, 59, 19, 7, 190, 181, 164, 44, 189, 20, 41, 195, 61, 178, 203, 226, 188, 184, 95, 223, 189, 180, 172, 25, 62, 253, 25, 143, 190, 249, 135, 250, 60, 101, 54, 173, 60, 211, 44, 23, 62, 147, 96, 76, 189, 49, 6, 163, 190, 51, 9, 114, 190, 227, 118, 135, 61, 68, 254, 212, 62, 23, 219, 136, 62, 212, 6, 104, 63, 253, 243, 237, 61, 131, 66, 130, 190, 3, 72, 97, 60, 160, 214, 140, 191, 213, 85, 49, 189, 39, 133, 217, 190, 215, 81, 27, 188, 99, 112, 196, 190, 5, 93, 166, 190, 233, 220, 30, 62, 61, 75, 75, 191, 85, 107, 97, 188, 164, 52, 12, 63, 16, 46, 201, 60, 49, 221, 30, 62, 182, 87, 136, 62, 201, 11, 180, 60, 5, 94, 100, 190, 16, 27, 73, 191, 224, 162, 29, 190, 55, 207, 145, 188, 250, 184, 130, 187, 69, 211, 142, 62, 190, 0, 183, 191, 19, 246, 222, 190, 27, 17, 80, 62, 79, 247, 179, 189, 49, 129, 204, 61, 61, 252, 210, 61, 117, 96, 110, 189, 134, 126, 182, 61, 11, 74, 176, 62, 178, 38, 220, 189, 200, 15, 100, 186, 244, 136, 242, 189, 158, 154, 186, 189, 223, 128, 182, 189, 168, 202, 21, 62, 219, 250, 1, 62, 228, 109, 21, 190, 91, 204, 24, 189, 102, 148, 14, 62, 16, 31, 114, 191, 188, 23, 109, 189, 102, 190, 99, 62, 241, 103, 31, 62, 242, 160, 135, 189, 166, 156, 7, 190, 168, 47, 65, 61, 216, 34, 233, 189, 214, 102, 1, 189, 243, 90, 30, 190, 214, 255, 128, 61, 206, 152, 66, 189, 141, 59, 198, 61, 239, 140, 128, 61, 247, 12, 162, 61, 241, 200, 199, 62, 223, 88, 80, 61, 207, 88, 169, 60, 227, 66, 14, 62, 176, 250, 219, 189, 70, 163, 70, 187, 253, 222, 165, 62, 158, 21, 133, 62, 167, 20, 255, 188, 251, 43, 51, 190, 190, 216, 156, 190, 177, 203, 247, 189, 229, 30, 0, 61, 97, 126, 165, 62, 71, 89, 48, 190, 167, 126, 173, 62, 29, 0, 58, 62, 12, 203, 141, 191, 115, 181, 127, 190, 61, 182, 71, 59, 43, 132, 132, 190, 148, 210, 220, 57, 124, 157, 244, 60, 68, 12, 52, 190, 204, 111, 156, 188, 174, 15, 172, 189, 65, 238, 32, 188, 83, 47, 112, 61, 92, 215, 205, 189, 163, 16, 202, 61, 68, 119, 60, 61, 243, 1, 126, 62, 28, 109, 42, 191, 163, 86, 117, 190, 203, 36, 63, 62, 235, 69, 60, 191, 247, 173, 166, 62, 216, 182, 122, 62, 112, 190, 47, 190, 97, 87, 52, 190, 87, 138, 119, 62, 54, 98, 24, 62, 184, 172, 30, 62, 232, 234, 96, 62, 208, 128, 82, 61, 221, 20, 226, 190, 156, 73, 171, 189, 50, 112, 172, 190, 47, 18, 136, 190, 84, 16, 148, 189, 11, 224, 149, 62, 100, 226, 109, 190, 107, 62, 91, 191, 198, 39, 52, 191, 159, 149, 197, 188, 33, 244, 73, 191, 228, 171, 224, 189, 2, 50, 125, 62, 187, 114, 154, 62, 205, 182, 5, 191, 108, 114, 58, 62, 228, 124, 226, 61, 184, 124, 137, 188, 186, 22, 130, 190, 218, 131, 75, 191, 253, 127, 70, 190, 200, 18, 175, 189, 174, 253, 49, 189, 104, 242, 90, 62, 242, 130, 159, 62, 4, 101, 134, 191, 133, 124, 85, 191, 132, 12, 137, 190, 1, 40, 137, 62, 150, 175, 24, 62, 102, 183, 94, 60, 43, 209, 135, 190, 32, 112, 102, 190, 110, 70, 184, 62, 62, 123, 32, 191, 201, 74, 188, 189, 201, 172, 69, 62, 210, 101, 115, 62, 111, 131, 10, 190, 187, 122, 91, 191, 100, 99, 78, 191, 3, 5, 255, 61, 176, 78, 29, 191, 102, 228, 153, 190, 130, 186, 113, 62, 79, 16, 168, 62, 227, 26, 27, 190, 21, 196, 149, 62, 106, 89, 130, 62, 218, 43, 159, 62, 102, 223, 202, 190, 113, 91, 151, 190, 103, 197, 204, 189, 35, 34, 231, 189, 247, 228, 157, 190, 216, 99, 212, 61, 49, 74, 137, 62, 248, 90, 125, 190, 244, 248, 188, 190, 216, 167, 7, 63, 54, 54, 61, 62, 130, 98, 255, 60, 223, 36, 132, 62, 24, 145, 98, 61, 177, 183, 6, 191, 233, 169, 136, 190, 119, 156, 37, 190, 61, 216, 228, 190, 204, 176, 9, 62, 247, 1, 3, 62, 99, 57, 199, 190, 17, 65, 230, 190, 36, 87, 7, 191, 174, 170, 221, 61, 131, 161, 119, 191, 254, 129, 44, 62, 206, 243, 214, 61, 31, 248, 168, 189, 13, 51, 41, 191, 102, 71, 175, 62, 120, 190, 81, 62, 193, 64, 13, 62, 233, 38, 5, 189, 6, 172, 29, 61, 198, 3, 229, 61, 10, 122, 20, 190, 238, 164, 198, 188, 35, 128, 65, 62, 104, 70, 59, 190, 232, 112, 162, 60, 186, 221, 49, 190, 33, 63, 206, 189, 226, 181, 200, 187, 5, 198, 82, 190, 13, 160, 5, 61, 89, 66, 149, 189, 234, 171, 4, 62, 122, 170, 255, 189, 148, 200, 38, 61, 69, 87, 43, 62, 163, 117, 75, 59, 34, 135, 237, 61, 249, 98, 24, 62, 168, 172, 206, 61, 79, 203, 62, 190, 206, 97, 144, 189, 120, 39, 58, 61, 162, 145, 106, 189, 255, 76, 37, 190, 17, 20, 50, 190, 97, 25, 9, 189, 135, 33, 183, 187, 32, 116, 79, 188, 98, 189, 161, 61, 10, 108, 236, 61, 224, 184, 79, 62, 24, 132, 136, 62, 204, 217, 155, 61, 186, 79, 107, 62, 181, 6, 228, 190, 248, 32, 115, 61, 164, 214, 174, 62, 160, 85, 38, 191, 47, 58, 100, 189, 90, 134, 105, 62, 51, 109, 180, 60, 114, 52, 58, 62, 118, 79, 158, 61, 215, 239, 70, 62, 112, 212, 164, 61, 54, 183, 103, 61, 183, 217, 141, 60, 144, 143, 143, 191, 86, 60, 15, 62, 105, 23, 154, 61, 3, 111, 184, 61, 225, 58, 121, 189, 160, 2, 37, 190, 73, 170, 117, 190, 4, 245, 180, 190, 224, 209, 15, 62, 5, 37, 235, 59, 132, 34, 192, 60, 5, 211, 80, 190, 101, 215, 55, 62, 162, 129, 140, 189, 38, 46, 217, 61, 98, 155, 58, 62, 136, 94, 238, 61, 50, 250, 140, 61, 207, 219, 5, 61, 246, 31, 15, 190, 174, 191, 159, 189, 71, 227, 193, 61, 135, 236, 49, 190, 37, 152, 201, 188, 172, 3, 200, 188, 162, 223, 90, 190, 38, 34, 49, 189, 191, 101, 29, 62, 193, 3, 126, 190, 133, 242, 172, 59, 201, 111, 143, 189, 118, 106, 1, 60, 195, 96, 23, 189, 210, 200, 122, 189, 216, 75, 77, 190, 199, 170, 15, 190, 96, 161, 143, 60, 15, 142, 158, 190, 45, 116, 17, 62, 41, 93, 225, 187, 231, 245, 68, 190, 159, 246, 145, 61, 3, 116, 201, 188, 147, 184, 128, 189, 73, 134, 190, 189, 199, 83, 33, 190, 250, 196, 249, 188, 53, 224, 203, 189, 50, 142, 135, 62, 194, 210, 224, 190, 163, 164, 140, 62, 104, 119, 176, 190, 237, 166, 93, 61, 228, 168, 88, 62, 13, 39, 117, 190, 175, 234, 66, 190, 130, 244, 220, 61, 4, 40, 149, 191, 150, 5, 15, 62, 204, 254, 187, 61, 220, 144, 120, 62, 249, 2, 13, 190, 26, 253, 230, 189, 13, 45, 16, 190, 241, 222, 21, 191, 238, 21, 86, 62, 146, 170, 177, 189, 213, 170, 119, 189, 200, 117, 36, 61, 208, 121, 4, 62, 226, 23, 4, 61, 26, 12, 104, 62, 78, 14, 208, 190, 221, 244, 15, 191, 151, 127, 59, 62, 79, 41, 17, 190, 69, 99, 246, 61, 3, 90, 142, 191, 163, 214, 193, 190, 226, 174, 39, 191, 174, 172, 75, 190, 7, 131, 25, 62, 16, 93, 117, 190, 236, 223, 169, 62, 33, 182, 74, 62, 61, 85, 153, 190, 170, 216, 30, 191, 161, 33, 11, 62, 110, 194, 200, 62, 120, 160, 246, 61, 172, 11, 194, 61, 215, 153, 163, 190, 133, 239, 213, 190, 86, 182, 247, 62, 109, 71, 20, 191, 217, 53, 81, 190, 50, 211, 98, 62, 127, 183, 170, 62, 1, 131, 176, 190, 12, 202, 145, 191, 195, 81, 155, 191, 66, 130, 163, 61, 169, 64, 69, 191, 120, 166, 62, 62, 57, 103, 171, 61, 115, 35, 133, 62, 205, 196, 145, 190, 171, 170, 142, 62, 92, 65, 218, 60, 247, 63, 93, 62, 204, 123, 168, 190, 81, 27, 163, 190, 126, 168, 2, 189, 191, 213, 169, 190, 213, 29, 115, 61, 131, 80, 228, 61, 56, 75, 169, 190, 201, 31, 98, 190, 254, 31, 18, 191, 88, 88, 4, 62, 71, 93, 129, 62, 244, 212, 141, 189, 252, 164, 201, 61, 134, 206, 16, 61, 0, 192, 160, 61, 97, 2, 107, 62, 0, 211, 142, 190, 211, 176, 78, 63, 175, 155, 99, 62, 113, 2, 144, 61, 169, 11, 255, 61, 148, 4, 184, 190, 166, 88, 38, 190, 201, 53, 104, 190, 67, 132, 4, 191, 80, 31, 6, 191, 161, 29, 193, 61, 78, 98, 232, 62, 29, 177, 23, 190, 124, 145, 203, 61, 140, 122, 214, 61, 32, 39, 10, 62, 157, 252, 67, 191, 219, 33, 6, 62, 238, 165, 88, 189, 122, 57, 8, 190, 163, 209, 227, 59, 221, 89, 60, 190, 103, 234, 35, 190, 82, 51, 118, 61, 147, 34, 239, 61, 216, 119, 227, 188, 199, 142, 211, 189, 133, 118, 19, 190, 241, 170, 195, 61, 54, 226, 178, 189, 230, 64, 146, 189, 233, 80, 15, 62, 156, 98, 251, 189, 251, 165, 158, 188, 50, 17, 1, 62, 196, 29, 136, 189, 212, 71, 216, 60, 141, 182, 251, 59, 195, 55, 9, 190, 32, 175, 254, 189, 131, 98, 29, 189, 92, 93, 11, 189, 192, 254, 30, 190, 220, 161, 186, 188, 229, 208, 14, 190, 206, 170, 177, 189, 203, 134, 46, 189, 197, 129, 35, 190, 19, 214, 46, 62, 38, 192, 141, 61, 136, 114, 92, 189, 249, 89, 225, 59, 130, 206, 154, 188, 148, 32, 245, 62, 36, 65, 75, 62, 159, 85, 132, 60, 73, 42, 131, 62, 9, 61, 197, 190, 215, 22, 69, 189, 188, 223, 187, 188, 29, 227, 69, 190, 185, 11, 106, 62, 148, 105, 13, 62, 85, 251, 212, 61, 200, 77, 4, 62, 195, 100, 12, 62, 204, 112, 187, 190, 60, 44, 155, 188, 212, 235, 153, 62, 11, 159, 32, 62, 191, 175, 181, 61, 2, 108, 126, 62, 106, 200, 169, 61, 89, 188, 127, 190, 83, 109, 127, 189, 107, 23, 149, 61, 109, 175, 159, 187, 6, 28, 8, 62, 86, 148, 166, 61, 86, 51, 137, 61, 216, 53, 163, 188, 218, 182, 203, 190, 203, 7, 63, 190, 89, 202, 85, 61, 83, 237, 21, 62, 248, 94, 96, 62, 250, 58, 192, 61, 128, 21, 46, 190, 75, 158, 8, 191, 149, 210, 40, 191, 235, 95, 115, 60, 217, 238, 78, 61, 57, 19, 241, 61, 88, 198, 156, 61, 147, 34, 218, 189, 87, 189, 45, 62, 4, 236, 246, 189, 155, 124, 157, 189, 168, 234, 245, 61, 238, 219, 165, 62, 242, 74, 77, 190, 227, 200, 31, 191, 12, 189, 232, 190, 199, 90, 17, 62, 55, 7, 4, 191, 188, 66, 202, 189, 234, 187, 236, 61, 94, 242, 19, 62, 102, 28, 15, 62, 195, 205, 225, 61, 26, 203, 3, 62, 226, 127, 228, 61, 152, 88, 28, 190, 15, 234, 84, 190, 76, 14, 239, 189, 1, 168, 204, 61, 3, 90, 220, 189, 145, 107, 50, 191, 248, 158, 189, 189, 208, 63, 143, 191, 36, 234, 169, 190, 28, 92, 208, 61, 149, 26, 29, 188, 92, 205, 171, 62, 101, 166, 160, 61, 174, 59, 83, 190, 37, 207, 190, 188, 182, 60, 96, 62, 79, 212, 158, 189, 98, 56, 177, 190, 194, 182, 89, 63, 192, 131, 32, 61, 27, 49, 43, 191, 159, 111, 162, 188, 72, 68, 12, 189, 168, 162, 12, 190, 228, 168, 196, 189, 34, 138, 37, 62, 38, 91, 87, 62, 55, 210, 29, 62, 62, 189, 113, 189, 48, 237, 0, 62, 49, 73, 102, 61, 168, 249, 47, 62, 177, 85, 229, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 20, 94, 190, 132, 128, 80, 62, 69, 153, 168, 62, 68, 43, 110, 189, 245, 219, 65, 62, 121, 67, 110, 61, 82, 11, 94, 61, 172, 157, 128, 61, 190, 222, 151, 62, 43, 9, 211, 190, 31, 2, 178, 61, 211, 243, 131, 190, 38, 210, 98, 190, 88, 184, 31, 62, 51, 85, 224, 189, 227, 77, 121, 62, 136, 171, 186, 62, 119, 44, 143, 62, 0, 178, 15, 189, 121, 202, 164, 62, 234, 81, 56, 62, 211, 143, 182, 62, 190, 234, 211, 188, 32, 56, 16, 190, 171, 15, 18, 190, 62, 247, 13, 62, 146, 98, 230, 62, 101, 52, 53, 188, 89, 228, 243, 61, 183, 194, 191, 62, 72, 16, 44, 62, 165, 255, 227, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 212, 7, 189, 43, 30, 210, 191, 154, 176, 175, 63, 78, 100, 20, 191, 198, 123, 48, 62, 50, 169, 213, 62, 20, 208, 7, 191, 122, 223, 12, 191, 210, 72, 223, 61, 54, 167, 121, 63, 75, 48, 3, 191, 109, 5, 80, 62, 31, 6, 251, 190, 222, 197, 133, 191, 21, 69, 48, 190, 135, 119, 44, 189, 100, 121, 139, 191, 39, 16, 135, 189, 101, 26, 176, 190, 219, 201, 52, 63, 59, 164, 68, 63, 151, 92, 166, 62, 142, 74, 3, 61, 29, 192, 70, 190, 75, 119, 234, 61, 25, 100, 56, 60, 199, 245, 47, 63, 56, 138, 43, 63, 48, 182, 146, 61, 181, 93, 152, 188, 0, 18, 49, 62, 155, 46, 253, 62, 65, 36, 24, 62, 246, 253, 99, 62, 73, 111, 171, 189, 130, 1, 202, 189, 164, 138, 238, 190, 125, 114, 220, 190, 82, 24, 2, 61, 202, 92, 115, 62, 216, 37, 157, 190, 109, 91, 82, 62, 79, 97, 16, 62, 16, 107, 49, 62, 230, 59, 48, 60, 156, 251, 221, 189, 52, 153, 2, 61, 225, 247, 163, 189, 114, 182, 117, 62, 244, 186, 106, 190, 235, 234, 90, 62, 31, 108, 57, 190, 42, 132, 84, 62, 212, 226, 245, 189, 191, 208, 35, 190, 12, 74, 178, 190, 59, 81, 92, 62, 178, 19, 18, 191, 238, 74, 99, 62, 38, 161, 205, 62, 67, 64, 139, 189, 160, 209, 158, 190, 18, 10, 94, 190, 225, 160, 42, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 172, 23, 190, 190, 226, 93, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {251, 61, 132, 191, 40, 242, 240, 62, 118, 188, 174, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {4, 118, 152, 64, 34, 145, 61, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0049/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}