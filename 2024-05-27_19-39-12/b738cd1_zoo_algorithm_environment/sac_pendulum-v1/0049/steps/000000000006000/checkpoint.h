// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {24, 69, 67, 63, 7, 148, 189, 62, 29, 171, 208, 62, 192, 210, 69, 63, 168, 74, 4, 60, 98, 12, 21, 63, 197, 144, 186, 62, 61, 148, 31, 63, 66, 38, 16, 63, 140, 210, 206, 62, 156, 142, 180, 62, 91, 135, 117, 189, 68, 239, 84, 190, 15, 59, 54, 191, 42, 58, 255, 188, 29, 95, 24, 190, 37, 1, 89, 189, 4, 122, 253, 60, 149, 193, 46, 62, 1, 214, 13, 63, 255, 20, 80, 61, 154, 94, 19, 191, 52, 36, 137, 191, 78, 42, 197, 190, 172, 81, 194, 190, 175, 213, 63, 63, 8, 243, 145, 190, 127, 60, 233, 62, 255, 231, 180, 190, 40, 218, 162, 190, 186, 81, 206, 190, 52, 254, 159, 62, 53, 175, 21, 63, 154, 54, 40, 62, 166, 54, 31, 61, 82, 179, 174, 190, 182, 93, 14, 63, 253, 183, 165, 189, 50, 189, 0, 63, 73, 71, 17, 63, 77, 114, 239, 62, 113, 46, 237, 190, 52, 170, 84, 63, 180, 156, 248, 190, 250, 184, 17, 191, 141, 101, 252, 62, 18, 150, 246, 62, 127, 170, 195, 62, 1, 86, 82, 190, 195, 216, 234, 190, 145, 37, 96, 62, 35, 117, 85, 63, 87, 250, 77, 191, 19, 172, 167, 190, 137, 212, 17, 63, 1, 185, 231, 190, 31, 79, 117, 190, 128, 22, 160, 190, 166, 79, 113, 191, 177, 235, 238, 61, 147, 217, 23, 190, 134, 129, 174, 61, 157, 22, 155, 190, 247, 34, 2, 189, 132, 189, 40, 189, 124, 209, 13, 191, 100, 227, 172, 189, 247, 220, 184, 189, 105, 25, 150, 190, 183, 22, 146, 189, 154, 234, 22, 191, 24, 104, 14, 191, 125, 136, 78, 191, 80, 198, 128, 187, 15, 36, 218, 61, 176, 11, 27, 190, 146, 193, 221, 189, 23, 160, 40, 63, 127, 17, 63, 62, 111, 9, 107, 191, 75, 211, 91, 62, 145, 230, 21, 63, 193, 37, 199, 61, 74, 249, 166, 190, 160, 225, 252, 62, 146, 72, 68, 191, 197, 27, 209, 190, 46, 237, 179, 62, 179, 245, 188, 62, 189, 191, 170, 188, 122, 73, 219, 61, 147, 66, 157, 190, 43, 107, 18, 63, 182, 102, 6, 63, 250, 159, 52, 63, 23, 85, 12, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 70, 103, 191, 48, 230, 71, 62, 152, 125, 23, 63, 12, 36, 214, 61, 78, 12, 176, 62, 50, 41, 27, 63, 130, 81, 250, 190, 236, 38, 225, 61, 253, 99, 94, 190, 113, 153, 185, 62, 223, 225, 247, 189, 40, 129, 199, 62, 189, 21, 148, 62, 103, 91, 93, 62, 192, 224, 211, 190, 230, 63, 70, 191, 90, 75, 79, 60, 199, 96, 26, 191, 96, 23, 130, 62, 172, 118, 122, 190, 59, 189, 163, 190, 194, 216, 120, 190, 101, 231, 241, 62, 28, 51, 194, 189, 77, 137, 130, 61, 226, 253, 2, 63, 222, 219, 111, 62, 112, 231, 136, 62, 66, 44, 9, 62, 175, 123, 7, 63, 228, 157, 158, 61, 109, 30, 89, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 4, 52, 62, 206, 156, 11, 189, 216, 81, 236, 60, 219, 195, 169, 61, 155, 110, 99, 190, 197, 234, 253, 189, 66, 6, 144, 188, 34, 179, 39, 62, 94, 78, 51, 189, 199, 12, 163, 189, 194, 88, 8, 190, 245, 194, 195, 188, 62, 254, 224, 61, 189, 32, 60, 62, 88, 215, 5, 189, 236, 123, 193, 189, 160, 147, 112, 189, 245, 19, 20, 190, 113, 9, 252, 189, 228, 115, 8, 189, 148, 118, 248, 188, 104, 195, 215, 189, 31, 40, 70, 190, 110, 115, 155, 189, 127, 86, 21, 62, 224, 239, 15, 62, 36, 76, 164, 189, 159, 158, 63, 61, 173, 143, 181, 60, 120, 60, 13, 190, 221, 111, 44, 190, 175, 2, 119, 188, 202, 249, 129, 189, 26, 68, 27, 61, 27, 93, 21, 191, 70, 114, 178, 190, 172, 252, 181, 62, 218, 26, 245, 188, 76, 252, 20, 188, 98, 192, 70, 62, 8, 120, 77, 191, 51, 226, 101, 191, 175, 167, 38, 191, 69, 86, 104, 191, 194, 188, 169, 62, 99, 179, 95, 190, 84, 164, 136, 190, 232, 118, 197, 61, 214, 212, 29, 63, 18, 135, 94, 190, 50, 63, 19, 191, 118, 51, 34, 63, 159, 138, 0, 190, 244, 154, 186, 189, 41, 249, 98, 61, 196, 47, 47, 190, 11, 46, 153, 62, 49, 164, 59, 61, 111, 243, 9, 61, 61, 252, 205, 190, 223, 146, 175, 190, 139, 68, 136, 190, 102, 26, 12, 191, 137, 26, 119, 62, 223, 186, 71, 190, 72, 44, 2, 190, 71, 214, 153, 61, 27, 82, 40, 61, 161, 33, 7, 191, 136, 115, 238, 61, 240, 184, 49, 190, 103, 27, 49, 189, 6, 251, 30, 63, 209, 151, 239, 190, 35, 192, 56, 61, 119, 171, 182, 61, 171, 66, 196, 189, 118, 110, 170, 190, 125, 216, 132, 61, 226, 237, 34, 62, 30, 158, 133, 190, 35, 134, 50, 190, 244, 242, 194, 189, 189, 189, 10, 191, 97, 171, 194, 188, 30, 119, 139, 191, 79, 185, 50, 62, 23, 16, 198, 191, 131, 59, 164, 62, 168, 111, 223, 188, 63, 77, 36, 190, 55, 108, 40, 191, 135, 20, 174, 190, 179, 240, 87, 62, 9, 212, 66, 189, 193, 229, 30, 189, 174, 220, 167, 62, 84, 168, 155, 62, 164, 175, 192, 189, 156, 219, 0, 62, 10, 120, 40, 190, 236, 125, 26, 62, 118, 43, 219, 61, 239, 226, 254, 187, 183, 102, 44, 190, 162, 47, 136, 189, 198, 1, 228, 189, 155, 4, 64, 61, 38, 66, 159, 60, 196, 33, 176, 62, 43, 135, 161, 190, 41, 150, 142, 61, 243, 54, 153, 189, 205, 220, 26, 191, 210, 33, 66, 62, 22, 59, 28, 62, 47, 67, 38, 62, 130, 52, 28, 62, 246, 178, 132, 189, 15, 162, 52, 190, 217, 120, 25, 190, 90, 153, 226, 189, 245, 166, 2, 62, 149, 185, 138, 62, 103, 202, 143, 190, 90, 242, 30, 189, 34, 12, 84, 190, 126, 171, 101, 62, 48, 86, 60, 190, 234, 111, 197, 61, 172, 53, 28, 190, 59, 56, 23, 189, 248, 164, 149, 61, 40, 181, 15, 62, 36, 90, 10, 61, 48, 248, 194, 190, 172, 162, 118, 190, 199, 103, 90, 62, 40, 213, 34, 190, 119, 42, 234, 61, 114, 215, 138, 187, 92, 195, 154, 60, 160, 75, 131, 189, 154, 213, 228, 60, 22, 70, 180, 190, 26, 152, 140, 189, 162, 184, 9, 62, 6, 92, 103, 190, 162, 114, 52, 190, 161, 251, 109, 190, 6, 195, 175, 188, 110, 131, 220, 190, 35, 130, 8, 62, 13, 51, 149, 61, 151, 84, 144, 62, 51, 143, 73, 189, 222, 231, 122, 62, 17, 147, 48, 62, 22, 175, 28, 62, 85, 146, 38, 190, 27, 190, 69, 189, 205, 45, 182, 190, 15, 248, 153, 61, 44, 177, 161, 61, 139, 54, 131, 189, 56, 42, 32, 61, 56, 164, 199, 60, 60, 169, 90, 189, 43, 123, 125, 61, 39, 144, 8, 62, 107, 207, 47, 61, 34, 234, 72, 62, 143, 126, 136, 190, 118, 205, 177, 61, 133, 107, 164, 62, 48, 87, 128, 61, 25, 149, 25, 191, 84, 102, 65, 62, 58, 206, 27, 62, 85, 76, 39, 191, 91, 218, 202, 189, 194, 56, 67, 190, 157, 250, 235, 189, 69, 189, 71, 190, 94, 1, 160, 189, 133, 42, 142, 190, 56, 138, 93, 61, 53, 71, 14, 62, 148, 110, 98, 62, 130, 144, 12, 62, 154, 83, 18, 188, 22, 76, 146, 190, 52, 127, 231, 61, 196, 237, 188, 62, 36, 158, 56, 62, 109, 136, 215, 62, 237, 101, 92, 190, 105, 242, 157, 61, 179, 85, 183, 61, 223, 226, 152, 189, 82, 155, 190, 61, 243, 242, 73, 62, 181, 174, 135, 187, 122, 251, 100, 61, 83, 101, 135, 62, 5, 211, 45, 62, 209, 48, 131, 189, 165, 99, 40, 62, 174, 58, 13, 190, 228, 204, 49, 191, 162, 13, 222, 189, 10, 92, 16, 190, 203, 219, 55, 190, 182, 34, 34, 190, 224, 0, 73, 190, 237, 178, 156, 61, 35, 111, 154, 190, 188, 128, 186, 189, 103, 156, 136, 190, 37, 112, 186, 61, 29, 71, 76, 190, 237, 37, 80, 62, 1, 245, 154, 190, 58, 39, 106, 61, 26, 219, 240, 61, 57, 59, 176, 62, 251, 78, 56, 189, 224, 251, 108, 189, 10, 193, 35, 189, 80, 113, 71, 62, 145, 103, 169, 189, 230, 224, 52, 62, 216, 72, 171, 190, 214, 221, 207, 189, 249, 24, 254, 190, 98, 247, 185, 61, 169, 99, 185, 62, 73, 125, 95, 61, 86, 208, 251, 190, 246, 189, 46, 187, 27, 218, 195, 61, 77, 100, 18, 191, 219, 212, 199, 189, 27, 85, 154, 62, 163, 231, 65, 62, 218, 195, 55, 62, 112, 168, 172, 62, 26, 108, 192, 61, 61, 59, 189, 189, 175, 174, 149, 190, 38, 178, 52, 189, 129, 166, 159, 62, 156, 156, 128, 190, 35, 81, 157, 60, 183, 203, 215, 190, 106, 217, 235, 61, 62, 16, 113, 190, 216, 248, 199, 189, 129, 34, 111, 62, 44, 17, 40, 189, 95, 35, 154, 189, 152, 52, 3, 62, 45, 182, 70, 61, 219, 211, 1, 190, 172, 138, 104, 189, 97, 137, 143, 62, 244, 243, 186, 58, 59, 66, 121, 62, 199, 207, 43, 190, 189, 223, 187, 61, 87, 221, 14, 62, 20, 253, 174, 189, 132, 142, 5, 190, 100, 44, 64, 62, 177, 167, 131, 61, 185, 102, 195, 190, 50, 29, 189, 61, 12, 63, 77, 190, 94, 209, 44, 62, 219, 239, 220, 188, 191, 157, 0, 190, 58, 96, 67, 189, 154, 221, 189, 62, 38, 192, 179, 61, 106, 98, 129, 62, 1, 120, 128, 62, 174, 82, 173, 62, 21, 162, 234, 189, 77, 37, 33, 62, 122, 64, 112, 61, 172, 40, 89, 59, 139, 197, 205, 61, 142, 155, 163, 190, 119, 140, 222, 190, 240, 110, 153, 62, 140, 207, 21, 190, 141, 49, 7, 190, 106, 220, 162, 189, 123, 89, 210, 59, 211, 115, 5, 61, 221, 152, 227, 61, 100, 133, 39, 189, 28, 50, 187, 62, 111, 51, 160, 62, 164, 34, 193, 61, 180, 244, 8, 63, 18, 124, 24, 62, 191, 106, 1, 191, 211, 148, 233, 188, 186, 31, 212, 187, 200, 165, 145, 189, 248, 132, 210, 61, 176, 233, 36, 191, 240, 45, 52, 190, 40, 49, 7, 190, 0, 127, 83, 61, 72, 151, 115, 62, 7, 71, 156, 60, 174, 78, 240, 60, 250, 127, 105, 62, 113, 22, 148, 61, 94, 167, 78, 62, 140, 198, 123, 61, 253, 139, 169, 189, 48, 198, 81, 190, 104, 225, 223, 59, 110, 251, 8, 62, 48, 88, 197, 61, 34, 119, 96, 190, 139, 121, 65, 61, 245, 46, 114, 190, 143, 223, 10, 60, 140, 140, 148, 61, 43, 214, 45, 61, 82, 36, 30, 190, 29, 218, 133, 62, 154, 125, 43, 59, 175, 184, 68, 191, 167, 32, 204, 189, 11, 158, 60, 62, 218, 108, 151, 62, 170, 165, 32, 60, 245, 181, 9, 62, 230, 153, 95, 61, 57, 8, 226, 190, 167, 70, 24, 189, 173, 3, 202, 189, 8, 250, 241, 61, 6, 88, 226, 189, 193, 117, 60, 62, 184, 168, 71, 190, 2, 185, 135, 62, 255, 48, 236, 188, 173, 231, 135, 190, 164, 220, 42, 190, 56, 177, 28, 62, 190, 15, 251, 190, 169, 37, 192, 190, 65, 158, 109, 190, 151, 123, 15, 61, 46, 197, 139, 62, 113, 15, 164, 187, 75, 183, 33, 190, 145, 187, 151, 61, 47, 190, 117, 189, 101, 210, 208, 188, 132, 28, 2, 190, 196, 5, 210, 61, 206, 158, 73, 189, 35, 56, 78, 189, 226, 32, 236, 189, 107, 172, 125, 188, 84, 110, 57, 61, 116, 140, 104, 189, 34, 6, 33, 61, 249, 69, 107, 62, 143, 131, 253, 189, 75, 251, 180, 190, 40, 242, 109, 60, 69, 230, 182, 61, 117, 151, 87, 190, 194, 207, 40, 61, 47, 248, 105, 59, 62, 189, 65, 190, 236, 54, 169, 62, 196, 213, 88, 61, 248, 70, 255, 189, 247, 135, 159, 190, 195, 221, 71, 62, 104, 6, 4, 190, 121, 172, 27, 62, 154, 41, 174, 62, 161, 217, 19, 62, 69, 8, 65, 190, 57, 17, 183, 189, 100, 91, 89, 189, 52, 130, 192, 188, 20, 252, 177, 188, 85, 130, 138, 190, 11, 6, 141, 62, 35, 83, 32, 61, 117, 74, 217, 190, 96, 152, 231, 189, 40, 170, 66, 62, 7, 255, 72, 62, 96, 202, 106, 62, 158, 247, 69, 62, 64, 237, 14, 62, 4, 162, 95, 60, 23, 136, 40, 61, 163, 62, 71, 62, 243, 255, 74, 190, 123, 150, 13, 62, 248, 107, 152, 190, 106, 174, 157, 190, 79, 178, 120, 62, 68, 248, 140, 189, 198, 41, 77, 190, 237, 59, 81, 191, 134, 148, 194, 190, 169, 26, 150, 62, 70, 25, 19, 62, 99, 55, 68, 61, 251, 59, 143, 62, 109, 55, 221, 190, 128, 150, 166, 190, 128, 198, 37, 191, 26, 194, 212, 190, 69, 165, 86, 61, 35, 210, 250, 188, 156, 75, 132, 190, 43, 33, 171, 59, 191, 26, 22, 63, 39, 74, 54, 61, 239, 172, 20, 190, 149, 228, 20, 63, 214, 34, 41, 62, 29, 113, 184, 189, 34, 189, 55, 189, 152, 193, 41, 190, 241, 11, 139, 62, 44, 163, 226, 60, 196, 164, 199, 190, 101, 124, 243, 189, 129, 234, 97, 189, 83, 192, 96, 190, 240, 50, 41, 191, 183, 252, 181, 188, 99, 159, 53, 189, 198, 179, 50, 61, 179, 249, 197, 187, 244, 187, 150, 189, 163, 17, 157, 61, 227, 197, 128, 189, 0, 217, 35, 188, 217, 73, 15, 190, 106, 89, 255, 60, 32, 175, 168, 189, 128, 78, 27, 190, 36, 10, 112, 61, 247, 131, 84, 189, 146, 173, 21, 190, 252, 103, 40, 62, 71, 63, 118, 188, 236, 175, 43, 190, 228, 215, 196, 189, 195, 224, 145, 188, 247, 108, 47, 62, 150, 29, 128, 189, 51, 168, 167, 61, 31, 211, 20, 190, 94, 139, 227, 60, 190, 113, 23, 62, 35, 90, 41, 190, 167, 207, 60, 61, 26, 181, 220, 61, 114, 64, 17, 188, 66, 134, 31, 190, 22, 7, 3, 62, 17, 109, 198, 189, 55, 231, 0, 190, 150, 113, 36, 62, 197, 224, 119, 61, 41, 91, 137, 61, 134, 70, 230, 189, 56, 221, 203, 61, 175, 181, 241, 61, 132, 73, 5, 62, 46, 69, 93, 190, 233, 26, 200, 189, 98, 229, 130, 190, 67, 190, 179, 189, 38, 26, 19, 62, 199, 70, 125, 61, 32, 153, 244, 189, 49, 91, 223, 58, 177, 227, 169, 61, 225, 136, 249, 189, 46, 100, 61, 61, 13, 238, 3, 190, 51, 105, 14, 62, 82, 57, 228, 61, 186, 57, 174, 189, 158, 213, 175, 60, 0, 127, 56, 62, 124, 245, 0, 190, 129, 148, 85, 190, 242, 31, 59, 62, 107, 214, 51, 190, 229, 246, 142, 60, 42, 117, 15, 190, 46, 10, 35, 62, 147, 96, 76, 189, 209, 234, 198, 189, 113, 33, 156, 190, 106, 76, 22, 62, 213, 86, 97, 62, 239, 108, 47, 62, 80, 239, 206, 62, 56, 222, 150, 61, 21, 195, 46, 190, 135, 106, 104, 188, 21, 54, 105, 191, 163, 168, 153, 189, 70, 201, 244, 189, 3, 14, 109, 60, 79, 192, 195, 190, 150, 241, 25, 60, 24, 158, 156, 62, 221, 131, 11, 191, 116, 134, 168, 189, 7, 158, 168, 62, 233, 150, 215, 61, 13, 193, 76, 62, 218, 121, 134, 62, 152, 112, 133, 61, 119, 63, 69, 190, 29, 6, 243, 190, 180, 245, 159, 190, 242, 234, 70, 187, 216, 83, 200, 188, 83, 96, 116, 62, 88, 242, 107, 191, 140, 177, 252, 59, 173, 156, 50, 61, 58, 233, 155, 189, 61, 42, 230, 61, 50, 73, 166, 61, 72, 174, 230, 61, 53, 150, 8, 62, 16, 64, 103, 62, 177, 212, 90, 61, 46, 22, 115, 188, 209, 199, 153, 189, 89, 113, 185, 189, 156, 113, 166, 189, 22, 3, 42, 62, 17, 75, 226, 61, 7, 202, 77, 190, 175, 151, 199, 189, 230, 84, 176, 61, 217, 148, 5, 191, 214, 194, 52, 187, 158, 95, 99, 62, 217, 156, 69, 62, 92, 19, 125, 189, 207, 69, 229, 189, 72, 255, 240, 61, 225, 38, 11, 189, 178, 87, 111, 189, 106, 148, 80, 190, 27, 230, 130, 61, 167, 156, 170, 61, 162, 87, 157, 61, 134, 42, 63, 60, 211, 38, 172, 61, 32, 42, 58, 62, 25, 149, 210, 61, 213, 104, 116, 60, 43, 10, 142, 61, 15, 247, 207, 61, 70, 183, 3, 61, 252, 46, 175, 61, 126, 210, 189, 62, 226, 158, 84, 188, 220, 62, 171, 189, 50, 208, 202, 190, 112, 11, 230, 189, 106, 42, 176, 61, 141, 142, 144, 62, 241, 192, 13, 190, 229, 228, 54, 62, 147, 119, 44, 62, 139, 159, 51, 191, 224, 250, 42, 190, 236, 73, 239, 60, 175, 233, 35, 190, 197, 186, 93, 61, 21, 49, 103, 61, 230, 220, 86, 189, 216, 220, 17, 190, 237, 29, 233, 189, 148, 102, 247, 59, 53, 53, 14, 61, 213, 127, 102, 61, 64, 82, 159, 61, 0, 178, 166, 60, 108, 147, 97, 62, 47, 184, 119, 190, 54, 149, 98, 190, 35, 51, 77, 62, 134, 112, 31, 191, 18, 222, 253, 61, 28, 7, 247, 61, 43, 223, 21, 190, 120, 214, 156, 189, 220, 147, 235, 62, 51, 242, 240, 188, 230, 205, 93, 62, 214, 6, 131, 62, 200, 188, 101, 61, 137, 142, 175, 190, 221, 62, 53, 62, 222, 74, 72, 189, 234, 178, 144, 190, 220, 69, 166, 61, 47, 154, 252, 61, 85, 234, 141, 190, 32, 181, 9, 191, 79, 215, 216, 190, 33, 3, 56, 188, 227, 119, 35, 191, 238, 38, 114, 189, 198, 185, 127, 62, 234, 99, 158, 62, 222, 204, 212, 190, 130, 67, 181, 60, 234, 42, 43, 188, 137, 202, 11, 60, 31, 219, 70, 190, 168, 149, 208, 190, 166, 108, 63, 190, 91, 12, 123, 188, 63, 28, 166, 189, 225, 95, 45, 62, 242, 214, 148, 62, 125, 172, 236, 190, 252, 225, 105, 190, 22, 184, 138, 189, 193, 209, 107, 62, 153, 185, 86, 62, 21, 21, 162, 60, 176, 129, 138, 190, 132, 242, 151, 190, 185, 177, 156, 62, 63, 126, 164, 190, 114, 202, 35, 190, 96, 112, 82, 62, 90, 219, 61, 62, 113, 148, 130, 190, 226, 232, 173, 190, 99, 76, 237, 190, 195, 173, 50, 62, 22, 205, 98, 190, 173, 66, 246, 189, 39, 115, 130, 62, 229, 156, 161, 62, 127, 136, 62, 190, 148, 4, 142, 62, 41, 150, 119, 62, 96, 40, 175, 62, 124, 244, 136, 190, 57, 12, 17, 61, 17, 58, 41, 189, 73, 155, 166, 189, 141, 140, 170, 189, 224, 237, 55, 188, 227, 18, 37, 62, 113, 69, 76, 190, 51, 209, 182, 190, 189, 205, 39, 63, 82, 26, 159, 60, 3, 118, 249, 61, 87, 164, 51, 62, 82, 123, 217, 61, 106, 191, 191, 190, 54, 61, 160, 61, 8, 195, 120, 61, 61, 36, 194, 190, 98, 74, 37, 62, 74, 157, 89, 189, 116, 26, 146, 190, 125, 209, 3, 191, 21, 199, 225, 190, 113, 246, 156, 189, 92, 5, 47, 191, 15, 111, 141, 61, 214, 193, 32, 62, 21, 162, 196, 60, 9, 242, 247, 190, 211, 12, 49, 60, 252, 195, 73, 61, 60, 49, 92, 62, 184, 184, 5, 61, 6, 172, 29, 61, 55, 222, 235, 61, 110, 48, 15, 190, 101, 64, 164, 188, 35, 128, 65, 62, 89, 8, 57, 190, 108, 202, 171, 60, 186, 221, 49, 190, 33, 63, 206, 189, 148, 149, 86, 187, 5, 198, 82, 190, 167, 196, 17, 61, 27, 63, 143, 189, 53, 1, 12, 62, 45, 91, 254, 189, 148, 200, 38, 61, 69, 87, 43, 62, 163, 117, 75, 59, 45, 90, 242, 61, 249, 98, 24, 62, 168, 172, 206, 61, 79, 203, 62, 190, 183, 37, 139, 189, 120, 39, 58, 61, 162, 145, 106, 189, 255, 76, 37, 190, 17, 20, 50, 190, 188, 138, 224, 188, 205, 37, 171, 187, 80, 223, 233, 187, 98, 189, 161, 61, 203, 76, 241, 61, 225, 6, 58, 188, 234, 100, 130, 62, 110, 121, 208, 61, 163, 29, 139, 62, 152, 153, 164, 190, 4, 5, 67, 62, 142, 138, 87, 62, 194, 236, 193, 190, 200, 109, 21, 190, 20, 155, 142, 62, 73, 208, 50, 61, 247, 204, 75, 62, 92, 118, 154, 61, 175, 83, 89, 62, 180, 12, 72, 188, 10, 254, 42, 189, 144, 113, 101, 189, 151, 69, 6, 191, 226, 171, 69, 62, 219, 40, 55, 61, 197, 17, 107, 188, 228, 20, 48, 190, 126, 27, 3, 190, 149, 110, 130, 190, 76, 111, 55, 190, 18, 72, 244, 61, 107, 56, 181, 189, 75, 3, 142, 61, 93, 174, 143, 189, 64, 216, 106, 62, 33, 71, 4, 190, 6, 62, 209, 61, 98, 155, 58, 62, 136, 94, 238, 61, 50, 250, 140, 61, 207, 219, 5, 61, 246, 31, 15, 190, 174, 191, 159, 189, 71, 227, 193, 61, 135, 236, 49, 190, 37, 152, 201, 188, 172, 3, 200, 188, 162, 223, 90, 190, 38, 34, 49, 189, 191, 101, 29, 62, 193, 3, 126, 190, 133, 242, 172, 59, 201, 111, 143, 189, 118, 106, 1, 60, 195, 96, 23, 189, 210, 200, 122, 189, 216, 75, 77, 190, 199, 170, 15, 190, 96, 161, 143, 60, 15, 142, 158, 190, 45, 116, 17, 62, 41, 93, 225, 187, 231, 245, 68, 190, 159, 246, 145, 61, 3, 116, 201, 188, 147, 184, 128, 189, 73, 134, 190, 189, 199, 83, 33, 190, 250, 196, 249, 188, 173, 189, 203, 189, 99, 44, 240, 189, 9, 149, 197, 190, 48, 254, 19, 61, 26, 47, 130, 60, 228, 125, 17, 60, 157, 120, 98, 62, 10, 61, 84, 188, 245, 99, 27, 190, 179, 149, 134, 188, 79, 117, 23, 191, 159, 102, 202, 61, 57, 199, 133, 190, 143, 199, 17, 62, 41, 13, 131, 190, 150, 142, 67, 62, 189, 229, 100, 190, 218, 199, 159, 190, 67, 134, 136, 61, 153, 23, 169, 189, 7, 81, 135, 61, 17, 16, 25, 62, 0, 179, 0, 62, 88, 35, 54, 62, 249, 161, 102, 62, 206, 206, 111, 190, 19, 255, 27, 191, 39, 106, 75, 61, 34, 132, 30, 190, 170, 145, 255, 189, 231, 33, 47, 191, 64, 248, 205, 188, 222, 183, 87, 190, 97, 26, 44, 190, 38, 114, 54, 62, 129, 62, 137, 190, 62, 22, 82, 62, 184, 249, 244, 61, 91, 157, 125, 190, 100, 235, 183, 190, 128, 177, 234, 62, 168, 159, 164, 62, 119, 246, 16, 62, 16, 91, 208, 60, 245, 236, 155, 190, 112, 150, 6, 191, 243, 179, 180, 62, 171, 8, 154, 190, 215, 11, 87, 190, 67, 16, 99, 62, 158, 192, 117, 62, 34, 180, 203, 190, 229, 92, 254, 190, 159, 251, 63, 191, 143, 209, 136, 60, 134, 194, 218, 190, 72, 63, 70, 62, 99, 98, 236, 61, 173, 59, 151, 62, 48, 219, 175, 190, 110, 99, 63, 62, 18, 212, 75, 188, 215, 28, 137, 62, 187, 31, 121, 190, 230, 162, 114, 61, 144, 140, 8, 189, 126, 60, 2, 190, 36, 176, 135, 61, 48, 230, 108, 188, 158, 63, 200, 190, 194, 222, 193, 61, 228, 202, 241, 60, 95, 166, 90, 190, 68, 56, 109, 62, 156, 111, 93, 190, 244, 229, 13, 62, 67, 138, 32, 187, 225, 89, 140, 61, 54, 227, 24, 62, 79, 34, 85, 61, 24, 87, 26, 61, 39, 90, 42, 62, 92, 34, 100, 60, 248, 143, 130, 190, 93, 165, 231, 189, 2, 18, 204, 188, 177, 183, 13, 190, 185, 189, 77, 190, 141, 13, 233, 190, 193, 134, 40, 190, 121, 94, 185, 60, 205, 139, 11, 190, 219, 212, 176, 61, 106, 175, 247, 61, 225, 192, 107, 190, 18, 10, 173, 190, 219, 33, 6, 62, 238, 165, 88, 189, 122, 57, 8, 190, 163, 209, 227, 59, 221, 89, 60, 190, 103, 234, 35, 190, 82, 51, 118, 61, 147, 34, 239, 61, 216, 119, 227, 188, 199, 142, 211, 189, 133, 118, 19, 190, 241, 170, 195, 61, 54, 226, 178, 189, 230, 64, 146, 189, 233, 80, 15, 62, 156, 98, 251, 189, 251, 165, 158, 188, 50, 17, 1, 62, 196, 29, 136, 189, 212, 71, 216, 60, 141, 182, 251, 59, 195, 55, 9, 190, 32, 175, 254, 189, 131, 98, 29, 189, 92, 93, 11, 189, 192, 254, 30, 190, 220, 161, 186, 188, 229, 208, 14, 190, 206, 170, 177, 189, 203, 134, 46, 189, 197, 129, 35, 190, 19, 214, 46, 62, 126, 57, 132, 189, 116, 207, 79, 189, 198, 100, 60, 61, 10, 195, 11, 62, 142, 101, 74, 62, 33, 2, 241, 61, 96, 157, 83, 189, 249, 35, 141, 61, 124, 247, 152, 190, 223, 238, 127, 189, 112, 157, 50, 61, 208, 140, 50, 190, 158, 157, 115, 62, 33, 106, 91, 62, 54, 139, 202, 188, 245, 104, 215, 61, 144, 246, 103, 59, 42, 131, 148, 190, 123, 254, 177, 188, 36, 59, 245, 61, 117, 234, 14, 62, 123, 244, 115, 61, 209, 187, 69, 62, 116, 18, 216, 188, 69, 114, 85, 189, 193, 1, 183, 189, 23, 242, 94, 189, 234, 244, 204, 61, 199, 2, 202, 61, 147, 153, 18, 62, 134, 250, 143, 60, 119, 219, 166, 60, 20, 66, 110, 190, 43, 109, 56, 190, 151, 157, 201, 61, 173, 203, 43, 62, 31, 3, 72, 61, 247, 113, 166, 60, 122, 106, 146, 190, 74, 166, 207, 190, 142, 118, 166, 190, 107, 137, 147, 187, 192, 107, 4, 62, 148, 208, 12, 62, 154, 189, 158, 61, 57, 233, 215, 189, 241, 193, 24, 62, 128, 190, 171, 60, 189, 207, 249, 189, 240, 102, 62, 62, 217, 169, 158, 62, 151, 177, 141, 190, 244, 86, 179, 190, 154, 81, 137, 190, 7, 95, 212, 61, 57, 252, 235, 190, 91, 51, 10, 188, 237, 115, 8, 62, 182, 122, 44, 62, 36, 43, 42, 62, 42, 86, 211, 61, 51, 214, 252, 61, 78, 226, 18, 62, 167, 26, 172, 189, 109, 52, 220, 189, 56, 67, 38, 190, 213, 220, 89, 61, 64, 101, 9, 190, 233, 81, 170, 190, 100, 212, 106, 61, 249, 109, 203, 190, 136, 178, 33, 190, 60, 136, 55, 62, 120, 10, 129, 189, 133, 104, 138, 62, 38, 207, 19, 62, 17, 184, 130, 190, 31, 118, 33, 60, 39, 13, 33, 62, 137, 48, 22, 190, 157, 195, 142, 190, 136, 48, 222, 62, 62, 189, 170, 188, 61, 219, 184, 190, 164, 100, 226, 60, 223, 8, 126, 60, 122, 111, 208, 188, 213, 124, 28, 189, 157, 203, 218, 61, 184, 7, 81, 62, 80, 187, 157, 62, 91, 168, 142, 189, 84, 106, 151, 61, 80, 213, 157, 61, 168, 80, 75, 62, 23, 236, 63, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 20, 94, 190, 24, 122, 90, 62, 87, 14, 81, 62, 107, 91, 149, 189, 113, 247, 2, 62, 44, 222, 207, 61, 156, 96, 144, 61, 19, 110, 198, 59, 39, 171, 132, 62, 71, 232, 171, 190, 215, 183, 143, 187, 149, 223, 112, 190, 218, 209, 52, 190, 146, 191, 45, 62, 51, 85, 224, 189, 122, 210, 114, 62, 212, 53, 124, 62, 12, 105, 145, 62, 57, 49, 190, 188, 16, 89, 72, 62, 137, 76, 30, 62, 226, 93, 123, 62, 56, 150, 165, 188, 245, 234, 109, 189, 171, 15, 18, 190, 209, 240, 160, 188, 135, 230, 199, 62, 134, 128, 61, 189, 89, 228, 243, 61, 150, 44, 163, 62, 50, 202, 225, 61, 255, 158, 145, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 212, 7, 189, 45, 30, 138, 191, 181, 189, 82, 63, 250, 28, 202, 190, 151, 140, 7, 62, 92, 118, 140, 62, 49, 192, 253, 190, 194, 9, 42, 191, 212, 57, 58, 62, 53, 174, 247, 62, 113, 81, 201, 190, 210, 176, 83, 62, 72, 85, 247, 190, 199, 66, 59, 191, 21, 69, 48, 190, 184, 209, 223, 189, 191, 29, 58, 191, 233, 162, 72, 190, 68, 189, 157, 190, 32, 101, 224, 62, 4, 147, 8, 63, 106, 101, 78, 62, 18, 23, 3, 61, 110, 54, 59, 190, 75, 119, 234, 61, 141, 43, 200, 189, 228, 31, 10, 63, 197, 225, 34, 61, 48, 182, 146, 61, 87, 55, 117, 189, 251, 61, 46, 62, 180, 58, 93, 62, 65, 36, 24, 62, 140, 236, 1, 62, 242, 45, 10, 62, 233, 191, 128, 188, 32, 154, 210, 190, 66, 106, 183, 189, 198, 94, 250, 60, 74, 157, 21, 61, 186, 246, 141, 190, 6, 163, 167, 62, 187, 165, 41, 62, 36, 101, 64, 62, 57, 33, 120, 61, 155, 83, 87, 189, 52, 153, 2, 61, 105, 131, 221, 189, 196, 199, 235, 60, 195, 194, 11, 190, 31, 73, 150, 62, 255, 51, 134, 60, 156, 1, 2, 185, 3, 145, 132, 61, 55, 216, 35, 190, 165, 17, 150, 190, 59, 81, 92, 62, 55, 48, 151, 190, 61, 144, 247, 187, 194, 110, 120, 62, 67, 64, 139, 189, 35, 22, 79, 190, 17, 251, 131, 190, 100, 218, 218, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 6, 26, 190, 89, 188, 160, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {8, 10, 142, 63, 116, 194, 165, 188, 11, 92, 209, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {96, 193, 102, 191, 29, 234, 199, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0049/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}