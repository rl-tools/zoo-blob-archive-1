// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {96, 175, 234, 190, 104, 243, 178, 62, 95, 234, 157, 62, 45, 110, 191, 62, 48, 31, 63, 61, 137, 164, 59, 62, 105, 118, 251, 188, 204, 65, 119, 62, 56, 120, 5, 191, 255, 232, 216, 62, 46, 193, 228, 62, 97, 126, 245, 61, 157, 89, 199, 189, 23, 189, 113, 62, 153, 115, 1, 62, 216, 235, 244, 190, 222, 41, 180, 62, 75, 154, 151, 190, 244, 213, 88, 189, 44, 200, 9, 63, 4, 189, 94, 190, 53, 95, 215, 62, 130, 151, 202, 190, 68, 200, 201, 190, 163, 46, 149, 61, 94, 222, 146, 62, 68, 208, 132, 62, 226, 167, 204, 62, 221, 134, 151, 60, 45, 247, 134, 62, 164, 189, 2, 191, 165, 206, 12, 191, 107, 69, 86, 62, 253, 72, 251, 62, 47, 151, 231, 190, 151, 25, 162, 62, 214, 150, 156, 61, 107, 55, 1, 190, 159, 228, 175, 62, 189, 242, 203, 62, 146, 192, 235, 189, 148, 65, 17, 63, 123, 62, 251, 188, 170, 29, 238, 190, 142, 178, 135, 190, 142, 53, 151, 190, 45, 133, 224, 62, 97, 240, 160, 190, 182, 157, 78, 62, 212, 148, 23, 190, 112, 59, 236, 62, 37, 157, 14, 63, 189, 131, 8, 191, 25, 16, 144, 62, 133, 236, 53, 190, 108, 133, 251, 61, 66, 67, 248, 190, 86, 216, 113, 62, 172, 156, 223, 190, 140, 78, 215, 61, 98, 119, 159, 62, 191, 249, 210, 62, 80, 52, 191, 190, 238, 108, 18, 63, 14, 108, 151, 62, 235, 196, 193, 190, 41, 191, 14, 63, 76, 205, 218, 61, 40, 181, 67, 61, 104, 41, 128, 62, 190, 98, 248, 62, 253, 98, 88, 62, 132, 42, 138, 189, 185, 0, 76, 61, 20, 113, 162, 189, 227, 110, 137, 190, 120, 31, 51, 60, 179, 90, 25, 62, 51, 94, 218, 62, 24, 30, 73, 190, 184, 111, 168, 62, 181, 20, 247, 62, 113, 155, 211, 61, 146, 7, 218, 189, 51, 150, 236, 190, 131, 253, 142, 62, 85, 59, 13, 189, 50, 4, 88, 188, 245, 23, 223, 61, 196, 17, 7, 191, 29, 198, 193, 62, 49, 215, 199, 190, 230, 138, 23, 190, 135, 180, 72, 190, 90, 43, 45, 62, 194, 141, 6, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {63, 173, 19, 191, 15, 74, 159, 62, 205, 52, 87, 62, 68, 1, 220, 62, 235, 125, 152, 190, 148, 64, 81, 61, 84, 56, 100, 62, 138, 110, 42, 189, 146, 164, 193, 190, 225, 138, 199, 190, 112, 17, 61, 190, 126, 0, 188, 190, 10, 208, 133, 62, 77, 231, 200, 62, 213, 212, 134, 190, 224, 171, 207, 62, 113, 217, 130, 190, 54, 158, 189, 190, 43, 177, 8, 63, 186, 255, 184, 62, 148, 1, 111, 62, 143, 209, 227, 62, 229, 37, 11, 63, 131, 114, 6, 63, 205, 103, 146, 190, 103, 138, 15, 191, 144, 113, 107, 190, 182, 1, 213, 62, 108, 74, 4, 63, 178, 177, 22, 62, 121, 115, 244, 62, 176, 61, 102, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {103, 128, 255, 189, 169, 232, 15, 62, 206, 34, 209, 189, 217, 67, 10, 190, 39, 239, 211, 61, 100, 214, 241, 61, 148, 69, 30, 62, 220, 244, 47, 62, 66, 254, 40, 62, 17, 170, 150, 61, 225, 70, 105, 61, 14, 117, 4, 62, 86, 87, 5, 61, 48, 121, 41, 190, 221, 243, 52, 190, 20, 94, 17, 190, 246, 113, 26, 190, 50, 50, 101, 61, 249, 221, 209, 58, 39, 73, 38, 61, 198, 22, 46, 189, 249, 37, 32, 190, 213, 128, 16, 62, 244, 82, 221, 61, 203, 186, 207, 61, 137, 162, 188, 189, 216, 248, 45, 62, 13, 247, 247, 61, 3, 156, 240, 189, 254, 162, 197, 60, 22, 35, 66, 189, 119, 198, 40, 189, 127, 180, 44, 190, 234, 39, 44, 62, 109, 222, 58, 60, 131, 215, 137, 61, 194, 216, 41, 190, 74, 239, 116, 61, 51, 21, 243, 189, 151, 109, 248, 189, 236, 138, 22, 190, 119, 85, 235, 61, 30, 212, 44, 62, 169, 85, 187, 61, 197, 83, 244, 61, 244, 79, 165, 61, 66, 22, 111, 61, 169, 199, 147, 189, 37, 220, 151, 189, 19, 205, 250, 60, 48, 131, 7, 62, 133, 131, 219, 188, 1, 131, 132, 61, 182, 69, 137, 189, 24, 69, 225, 189, 129, 184, 50, 61, 200, 91, 143, 61, 66, 105, 23, 190, 184, 36, 29, 59, 198, 50, 157, 187, 199, 32, 150, 188, 180, 41, 129, 189, 202, 12, 228, 188, 186, 164, 254, 189, 146, 251, 38, 62, 33, 178, 54, 189, 53, 121, 240, 189, 86, 19, 162, 61, 19, 249, 66, 60, 3, 160, 213, 189, 117, 192, 23, 62, 21, 147, 140, 189, 210, 118, 94, 60, 57, 163, 41, 62, 72, 59, 50, 61, 142, 107, 45, 190, 253, 91, 202, 61, 21, 112, 247, 60, 142, 78, 78, 189, 96, 91, 1, 190, 80, 153, 111, 189, 141, 197, 189, 61, 118, 149, 7, 189, 116, 98, 31, 62, 33, 135, 81, 61, 236, 14, 189, 189, 225, 80, 251, 189, 118, 244, 33, 190, 193, 204, 41, 190, 160, 76, 250, 61, 69, 53, 90, 189, 92, 252, 45, 190, 197, 35, 237, 59, 12, 176, 15, 60, 76, 146, 12, 189, 19, 58, 33, 190, 80, 208, 199, 61, 75, 3, 36, 186, 155, 145, 186, 61, 140, 238, 30, 190, 20, 157, 55, 189, 198, 128, 191, 59, 12, 59, 131, 189, 208, 142, 215, 188, 238, 229, 72, 61, 108, 38, 22, 190, 137, 20, 35, 190, 18, 38, 211, 61, 239, 149, 18, 61, 144, 135, 177, 61, 166, 101, 183, 189, 171, 40, 171, 60, 134, 60, 158, 61, 242, 215, 225, 188, 245, 191, 35, 62, 246, 177, 148, 189, 156, 59, 36, 190, 210, 46, 157, 189, 222, 98, 41, 190, 182, 213, 35, 190, 152, 253, 188, 61, 232, 32, 162, 189, 22, 116, 191, 189, 197, 82, 165, 60, 53, 105, 0, 62, 76, 69, 181, 61, 141, 142, 22, 190, 170, 90, 241, 189, 122, 47, 181, 61, 118, 198, 14, 190, 134, 146, 249, 188, 47, 124, 176, 189, 180, 227, 51, 62, 223, 18, 139, 60, 244, 159, 54, 60, 142, 182, 49, 189, 96, 188, 51, 62, 250, 124, 241, 188, 210, 205, 240, 189, 208, 40, 34, 190, 145, 199, 89, 60, 51, 241, 49, 189, 233, 193, 106, 189, 197, 48, 35, 62, 225, 9, 120, 189, 98, 131, 226, 61, 152, 218, 190, 189, 141, 50, 21, 188, 7, 219, 32, 61, 177, 238, 76, 189, 232, 184, 18, 190, 225, 122, 232, 189, 190, 1, 170, 189, 247, 85, 62, 189, 105, 122, 178, 184, 60, 166, 131, 188, 134, 70, 149, 60, 184, 95, 167, 61, 142, 141, 202, 59, 227, 64, 91, 189, 19, 155, 37, 61, 243, 44, 134, 187, 4, 27, 252, 61, 186, 26, 163, 189, 181, 110, 244, 60, 43, 45, 23, 62, 8, 162, 12, 61, 251, 240, 101, 61, 159, 114, 250, 189, 121, 114, 213, 189, 37, 183, 35, 190, 56, 35, 142, 189, 191, 236, 174, 189, 5, 21, 207, 189, 243, 191, 210, 61, 73, 101, 101, 189, 85, 143, 232, 189, 241, 97, 1, 189, 249, 223, 20, 62, 179, 8, 182, 61, 20, 169, 218, 61, 11, 14, 39, 62, 204, 131, 162, 61, 76, 92, 167, 61, 227, 191, 211, 189, 199, 122, 138, 188, 249, 187, 22, 62, 164, 253, 27, 190, 226, 235, 18, 62, 149, 180, 29, 190, 9, 17, 139, 189, 177, 2, 113, 60, 11, 32, 187, 61, 49, 132, 44, 62, 196, 151, 169, 189, 110, 224, 44, 62, 200, 51, 50, 62, 237, 154, 200, 189, 200, 173, 5, 190, 116, 167, 143, 61, 128, 87, 32, 62, 74, 101, 23, 190, 39, 62, 198, 189, 26, 188, 40, 62, 165, 92, 153, 61, 177, 241, 161, 189, 48, 143, 194, 59, 60, 224, 182, 61, 199, 173, 96, 189, 237, 149, 24, 62, 146, 253, 46, 190, 231, 185, 8, 62, 92, 163, 194, 61, 43, 152, 68, 189, 206, 148, 3, 62, 83, 44, 26, 62, 249, 94, 154, 61, 28, 19, 144, 61, 14, 27, 148, 61, 147, 181, 165, 189, 106, 29, 9, 190, 118, 219, 227, 189, 230, 149, 191, 60, 130, 81, 179, 189, 37, 240, 201, 61, 254, 135, 222, 61, 8, 135, 222, 61, 106, 235, 159, 61, 237, 207, 71, 187, 173, 183, 184, 60, 179, 252, 20, 189, 38, 0, 39, 189, 27, 120, 127, 189, 98, 68, 216, 60, 190, 158, 3, 188, 99, 37, 32, 61, 86, 81, 8, 190, 178, 163, 222, 189, 68, 167, 130, 61, 30, 28, 235, 189, 42, 216, 200, 189, 159, 74, 227, 60, 219, 171, 142, 188, 215, 186, 5, 61, 115, 212, 119, 60, 245, 27, 193, 60, 195, 30, 19, 190, 184, 8, 151, 61, 194, 155, 185, 189, 163, 181, 195, 189, 26, 143, 193, 61, 113, 149, 133, 189, 52, 215, 221, 61, 15, 124, 201, 61, 78, 41, 158, 189, 143, 216, 129, 189, 169, 39, 100, 189, 204, 98, 227, 60, 70, 60, 52, 62, 71, 34, 31, 61, 137, 203, 49, 189, 71, 140, 36, 190, 207, 225, 95, 61, 66, 17, 240, 61, 155, 204, 253, 61, 52, 182, 0, 61, 77, 114, 142, 189, 219, 67, 21, 190, 29, 237, 3, 190, 206, 44, 31, 190, 242, 236, 22, 190, 73, 26, 35, 190, 83, 98, 180, 61, 97, 222, 220, 58, 46, 34, 24, 61, 108, 73, 5, 190, 142, 236, 15, 62, 42, 248, 22, 62, 202, 155, 47, 62, 177, 144, 227, 61, 137, 41, 96, 61, 249, 225, 22, 190, 97, 212, 38, 190, 131, 96, 168, 61, 203, 66, 218, 61, 70, 55, 135, 61, 5, 72, 24, 190, 109, 9, 13, 190, 68, 52, 171, 188, 67, 51, 46, 190, 57, 148, 186, 60, 249, 74, 217, 189, 236, 211, 204, 61, 166, 210, 10, 62, 29, 125, 15, 190, 186, 214, 150, 189, 30, 157, 152, 189, 224, 157, 20, 190, 91, 80, 192, 189, 241, 192, 246, 60, 154, 152, 34, 189, 133, 83, 170, 188, 100, 252, 11, 190, 74, 46, 18, 62, 149, 47, 133, 61, 230, 245, 37, 62, 72, 175, 24, 62, 172, 19, 39, 61, 133, 68, 177, 60, 249, 49, 241, 189, 214, 152, 42, 62, 189, 44, 244, 189, 181, 51, 225, 61, 30, 126, 217, 61, 228, 92, 0, 62, 229, 48, 203, 59, 182, 173, 163, 189, 217, 152, 175, 189, 115, 193, 30, 61, 111, 58, 48, 62, 7, 239, 21, 62, 104, 122, 18, 62, 207, 85, 146, 187, 1, 174, 211, 189, 58, 120, 26, 190, 205, 221, 0, 60, 53, 221, 16, 189, 244, 133, 191, 189, 73, 71, 30, 62, 228, 141, 148, 189, 94, 247, 132, 189, 202, 225, 2, 190, 150, 63, 84, 60, 31, 171, 120, 189, 149, 229, 113, 58, 239, 234, 66, 189, 162, 32, 128, 189, 165, 79, 129, 188, 174, 111, 9, 190, 87, 229, 168, 189, 238, 177, 249, 189, 23, 123, 127, 61, 158, 202, 175, 60, 32, 66, 17, 61, 133, 14, 105, 189, 167, 0, 137, 61, 226, 181, 143, 60, 13, 153, 180, 188, 16, 71, 66, 59, 101, 75, 227, 188, 12, 73, 58, 60, 99, 37, 52, 62, 84, 71, 157, 189, 232, 109, 224, 61, 137, 91, 4, 62, 162, 238, 39, 62, 246, 66, 142, 188, 192, 43, 42, 62, 5, 10, 45, 189, 8, 29, 187, 189, 176, 3, 147, 189, 201, 154, 31, 190, 165, 153, 2, 190, 247, 210, 44, 61, 126, 224, 171, 189, 187, 145, 38, 62, 150, 134, 230, 189, 38, 203, 55, 61, 12, 240, 209, 60, 70, 81, 179, 61, 141, 221, 178, 61, 106, 197, 177, 189, 6, 65, 0, 190, 109, 57, 83, 60, 146, 148, 78, 189, 49, 204, 41, 62, 7, 99, 34, 190, 83, 42, 46, 62, 242, 100, 228, 61, 40, 162, 16, 62, 96, 24, 252, 61, 14, 48, 40, 190, 96, 241, 133, 61, 5, 94, 41, 60, 171, 219, 193, 61, 212, 51, 175, 189, 87, 204, 194, 61, 172, 250, 23, 190, 171, 126, 3, 190, 7, 1, 21, 190, 189, 197, 177, 189, 154, 255, 10, 190, 249, 133, 177, 61, 104, 26, 16, 190, 153, 214, 193, 61, 46, 217, 215, 61, 149, 1, 136, 61, 11, 53, 225, 188, 184, 62, 81, 61, 135, 40, 37, 62, 4, 82, 130, 61, 45, 253, 158, 188, 20, 171, 17, 62, 226, 57, 13, 62, 126, 154, 118, 61, 138, 139, 54, 60, 253, 50, 0, 190, 90, 108, 23, 190, 153, 52, 33, 62, 105, 101, 234, 189, 38, 14, 209, 61, 110, 171, 49, 190, 164, 45, 141, 58, 44, 167, 146, 61, 30, 26, 152, 60, 220, 198, 4, 190, 124, 146, 138, 61, 46, 38, 47, 62, 119, 233, 154, 187, 54, 15, 192, 61, 168, 88, 69, 59, 48, 113, 85, 61, 243, 197, 115, 61, 225, 216, 133, 61, 46, 75, 138, 189, 252, 225, 211, 187, 36, 234, 10, 190, 174, 249, 69, 61, 30, 93, 244, 189, 152, 186, 218, 188, 190, 218, 189, 189, 13, 155, 121, 61, 48, 9, 54, 189, 26, 233, 236, 61, 116, 177, 216, 60, 249, 145, 34, 62, 13, 106, 60, 60, 243, 202, 235, 189, 127, 161, 59, 189, 60, 90, 14, 62, 71, 167, 38, 62, 63, 247, 20, 190, 103, 255, 42, 190, 63, 160, 189, 189, 162, 103, 44, 62, 150, 188, 21, 190, 241, 136, 186, 189, 123, 62, 162, 61, 2, 142, 191, 61, 1, 90, 212, 61, 119, 152, 249, 59, 220, 210, 9, 61, 124, 94, 33, 190, 67, 0, 197, 189, 217, 149, 209, 61, 123, 185, 135, 189, 113, 78, 11, 190, 17, 116, 149, 188, 154, 165, 190, 189, 111, 2, 160, 189, 43, 84, 227, 188, 46, 32, 113, 189, 174, 173, 37, 190, 43, 252, 235, 189, 69, 167, 19, 62, 186, 56, 36, 190, 226, 71, 221, 61, 15, 36, 205, 61, 153, 55, 254, 189, 65, 27, 152, 61, 128, 196, 3, 190, 87, 169, 217, 188, 28, 154, 197, 188, 167, 108, 242, 61, 147, 32, 176, 60, 87, 125, 142, 60, 26, 255, 84, 189, 5, 255, 190, 58, 102, 33, 196, 61, 204, 142, 51, 190, 4, 163, 156, 189, 98, 247, 150, 61, 169, 48, 120, 61, 38, 98, 33, 62, 81, 7, 185, 188, 16, 61, 215, 61, 13, 159, 58, 60, 168, 18, 43, 62, 209, 143, 178, 189, 203, 109, 212, 61, 244, 144, 133, 189, 240, 184, 207, 189, 60, 48, 27, 62, 233, 92, 250, 61, 171, 138, 236, 61, 122, 72, 48, 190, 84, 18, 6, 62, 187, 113, 70, 60, 248, 42, 162, 189, 79, 192, 127, 189, 171, 145, 143, 189, 85, 114, 41, 190, 108, 46, 186, 189, 19, 61, 28, 62, 10, 113, 13, 61, 236, 67, 37, 190, 112, 76, 86, 189, 2, 229, 27, 189, 167, 41, 204, 189, 186, 166, 159, 60, 70, 173, 31, 62, 7, 195, 207, 189, 54, 19, 210, 189, 20, 63, 130, 189, 200, 150, 165, 189, 29, 137, 21, 62, 207, 37, 219, 188, 13, 157, 222, 61, 155, 5, 157, 61, 83, 166, 194, 189, 60, 109, 64, 189, 199, 244, 192, 189, 20, 55, 128, 61, 117, 195, 230, 60, 17, 115, 14, 61, 42, 7, 174, 61, 104, 245, 41, 62, 191, 178, 23, 60, 206, 196, 81, 61, 34, 99, 40, 190, 22, 235, 224, 188, 227, 187, 129, 189, 225, 109, 241, 189, 126, 21, 101, 60, 29, 244, 234, 189, 125, 54, 253, 61, 131, 192, 44, 62, 16, 143, 214, 189, 137, 77, 185, 189, 54, 160, 128, 189, 41, 104, 12, 62, 214, 238, 72, 61, 202, 2, 134, 187, 253, 117, 21, 190, 214, 216, 190, 58, 200, 222, 156, 61, 5, 59, 152, 61, 136, 108, 47, 190, 146, 11, 185, 61, 96, 178, 142, 61, 220, 216, 160, 61, 252, 137, 45, 190, 185, 203, 172, 189, 217, 206, 62, 61, 238, 183, 45, 62, 212, 160, 27, 190, 72, 112, 171, 61, 154, 79, 4, 62, 168, 48, 217, 61, 106, 155, 239, 61, 225, 12, 242, 189, 86, 140, 8, 190, 82, 57, 19, 187, 31, 169, 151, 61, 118, 7, 208, 61, 64, 110, 223, 189, 227, 46, 134, 189, 195, 91, 14, 62, 135, 239, 189, 189, 15, 90, 208, 61, 15, 141, 130, 61, 171, 88, 216, 61, 157, 30, 183, 189, 54, 2, 53, 62, 25, 245, 165, 58, 160, 79, 137, 61, 10, 187, 158, 189, 108, 81, 14, 190, 75, 131, 71, 61, 164, 120, 50, 190, 205, 37, 152, 189, 160, 207, 19, 62, 123, 130, 68, 189, 157, 14, 251, 61, 111, 233, 30, 62, 201, 34, 144, 61, 250, 139, 7, 190, 29, 124, 46, 62, 54, 16, 84, 61, 0, 252, 111, 61, 49, 82, 153, 61, 253, 21, 120, 189, 107, 22, 171, 189, 238, 193, 157, 189, 146, 51, 140, 61, 147, 153, 217, 61, 187, 134, 98, 189, 252, 52, 228, 187, 2, 132, 189, 188, 223, 126, 187, 61, 195, 187, 214, 60, 141, 107, 222, 60, 140, 105, 230, 189, 93, 191, 173, 189, 101, 214, 106, 60, 162, 157, 5, 62, 238, 100, 55, 189, 116, 133, 30, 190, 46, 193, 62, 189, 97, 181, 73, 61, 78, 72, 111, 187, 99, 237, 28, 62, 76, 67, 204, 60, 91, 46, 230, 61, 149, 71, 55, 189, 51, 83, 27, 189, 0, 187, 237, 61, 56, 36, 27, 61, 216, 1, 38, 190, 116, 254, 20, 62, 91, 165, 159, 189, 158, 173, 2, 62, 140, 7, 52, 190, 222, 152, 35, 62, 157, 71, 213, 189, 101, 34, 29, 62, 184, 134, 230, 189, 232, 57, 38, 61, 158, 201, 136, 61, 150, 10, 172, 60, 205, 177, 245, 61, 119, 48, 73, 188, 96, 138, 187, 61, 201, 225, 41, 61, 162, 165, 10, 190, 108, 115, 31, 190, 190, 31, 161, 189, 150, 16, 153, 60, 142, 85, 159, 61, 84, 250, 17, 62, 11, 3, 239, 189, 44, 196, 88, 61, 143, 176, 182, 189, 81, 59, 45, 62, 229, 169, 25, 188, 48, 240, 92, 61, 52, 15, 112, 61, 126, 248, 238, 60, 81, 146, 200, 189, 83, 28, 21, 62, 246, 198, 141, 61, 227, 230, 50, 189, 239, 132, 217, 189, 154, 188, 31, 60, 18, 176, 41, 62, 59, 227, 35, 62, 109, 248, 137, 61, 153, 124, 47, 190, 104, 227, 247, 61, 61, 207, 36, 189, 49, 60, 183, 61, 143, 210, 131, 61, 191, 181, 135, 189, 38, 183, 133, 188, 176, 142, 180, 60, 104, 66, 176, 189, 200, 109, 191, 189, 20, 99, 6, 190, 78, 230, 232, 61, 22, 84, 18, 188, 3, 118, 29, 62, 123, 210, 94, 189, 77, 107, 7, 189, 138, 236, 254, 61, 72, 156, 141, 61, 43, 70, 34, 59, 75, 13, 212, 189, 231, 218, 192, 188, 239, 74, 44, 189, 137, 116, 18, 62, 48, 225, 224, 188, 194, 159, 131, 60, 204, 6, 144, 189, 172, 5, 254, 188, 23, 74, 190, 188, 149, 245, 166, 189, 21, 182, 14, 190, 57, 191, 39, 189, 8, 209, 105, 61, 216, 61, 6, 190, 124, 36, 214, 60, 141, 154, 254, 189, 59, 142, 172, 61, 215, 221, 211, 61, 31, 16, 171, 189, 152, 161, 255, 61, 78, 102, 12, 190, 41, 13, 143, 61, 237, 37, 36, 62, 224, 43, 206, 61, 243, 238, 27, 190, 4, 155, 201, 60, 48, 109, 20, 189, 75, 143, 13, 62, 165, 2, 42, 62, 42, 63, 26, 62, 167, 68, 6, 190, 127, 43, 104, 189, 243, 81, 46, 62, 168, 170, 52, 190, 145, 31, 55, 189, 127, 118, 212, 189, 246, 216, 14, 62, 114, 168, 31, 62, 3, 124, 107, 189, 39, 234, 158, 59, 5, 247, 37, 190, 225, 117, 7, 62, 209, 41, 49, 190, 197, 68, 50, 190, 251, 37, 142, 61, 207, 31, 50, 62, 209, 175, 17, 61, 219, 207, 135, 189, 152, 163, 21, 190, 0, 190, 198, 61, 90, 22, 55, 61, 233, 122, 52, 189, 1, 164, 10, 62, 60, 37, 82, 61, 44, 113, 6, 189, 72, 91, 223, 189, 128, 133, 40, 190, 214, 3, 224, 189, 165, 51, 182, 61, 242, 158, 141, 61, 134, 180, 2, 62, 194, 200, 177, 189, 152, 24, 248, 61, 57, 94, 210, 189, 99, 26, 218, 59, 94, 186, 19, 62, 208, 126, 83, 59, 66, 180, 20, 62, 21, 244, 234, 61, 194, 246, 254, 189, 51, 43, 49, 189, 140, 122, 134, 189, 31, 16, 41, 190, 41, 253, 33, 190, 179, 215, 133, 188, 158, 239, 234, 61, 152, 126, 175, 61, 182, 79, 49, 190, 115, 226, 3, 190, 188, 192, 50, 62, 86, 106, 205, 61, 63, 180, 248, 59, 8, 138, 143, 189, 207, 196, 162, 61, 229, 214, 53, 61, 34, 44, 14, 62, 188, 174, 17, 61, 235, 116, 171, 189, 220, 241, 154, 61, 94, 221, 46, 190, 36, 50, 157, 61, 206, 239, 166, 189, 119, 199, 169, 61, 184, 251, 91, 189, 114, 255, 239, 188, 5, 245, 228, 61, 66, 118, 39, 62, 185, 158, 49, 61, 111, 88, 25, 62, 146, 129, 152, 189, 114, 247, 252, 60, 146, 12, 173, 188, 220, 100, 135, 189, 208, 113, 208, 61, 115, 30, 242, 61, 104, 161, 43, 188, 197, 116, 1, 60, 178, 14, 13, 190, 154, 43, 245, 189, 220, 127, 146, 61, 35, 165, 48, 62, 30, 127, 28, 62, 130, 237, 213, 60, 42, 165, 17, 62, 233, 34, 230, 61, 231, 10, 110, 189, 5, 218, 234, 61, 103, 13, 206, 61, 228, 48, 140, 189, 149, 34, 168, 188, 177, 245, 237, 61, 255, 4, 27, 62, 186, 37, 51, 190, 205, 215, 17, 62, 162, 83, 21, 62, 194, 165, 163, 61, 161, 22, 45, 190, 190, 167, 231, 189, 41, 19, 4, 189, 142, 83, 111, 61, 19, 199, 25, 190, 201, 74, 85, 61, 155, 117, 26, 62, 57, 38, 52, 190, 69, 44, 32, 189, 8, 132, 185, 60, 151, 63, 42, 190, 140, 63, 45, 190, 124, 236, 187, 61, 213, 167, 146, 59, 16, 234, 175, 189, 149, 250, 183, 189, 74, 30, 33, 190, 233, 143, 5, 62, 132, 76, 11, 62, 142, 120, 215, 189, 157, 119, 26, 190, 41, 243, 65, 61, 206, 154, 161, 188, 229, 201, 161, 61, 199, 155, 7, 62, 76, 198, 10, 62, 229, 195, 3, 62, 73, 209, 73, 188, 75, 231, 29, 62, 83, 120, 12, 62, 135, 80, 31, 62, 66, 134, 24, 189, 122, 247, 116, 189, 50, 56, 78, 188, 47, 23, 243, 189, 54, 169, 44, 62, 231, 25, 45, 62, 102, 160, 249, 188, 57, 228, 31, 62, 255, 76, 233, 189, 239, 9, 207, 189, 47, 125, 214, 61, 38, 98, 4, 190, 22, 34, 244, 61, 116, 136, 200, 189, 18, 111, 221, 61, 173, 168, 108, 189, 200, 185, 10, 62, 189, 143, 7, 61, 255, 7, 217, 61, 134, 241, 0, 190, 252, 17, 45, 60, 91, 156, 96, 61, 109, 9, 153, 189, 93, 66, 167, 189, 161, 227, 0, 190, 62, 41, 35, 190, 169, 179, 39, 190, 179, 67, 186, 189, 161, 59, 52, 190, 177, 84, 46, 59, 110, 226, 35, 62, 75, 180, 47, 190, 76, 159, 175, 61, 95, 10, 44, 62, 179, 184, 235, 189, 95, 228, 43, 190, 133, 26, 157, 61, 173, 245, 6, 190, 233, 212, 189, 189, 228, 73, 216, 189, 113, 123, 19, 190, 106, 108, 17, 62, 49, 144, 26, 60, 135, 138, 37, 62, 2, 75, 141, 188, 33, 71, 3, 61, 143, 100, 22, 190, 71, 84, 204, 61, 112, 90, 137, 189, 20, 251, 137, 189, 130, 238, 176, 61, 64, 144, 61, 189, 80, 115, 85, 188, 156, 190, 228, 189, 90, 91, 42, 62, 229, 89, 48, 190, 64, 113, 153, 61, 186, 182, 0, 190, 24, 221, 222, 189, 99, 30, 10, 188, 80, 236, 184, 61, 150, 82, 3, 62, 117, 43, 23, 62, 142, 223, 173, 61, 200, 13, 48, 189, 128, 100, 178, 189, 122, 49, 160, 61, 108, 84, 248, 61, 220, 86, 66, 61, 79, 216, 39, 62, 24, 104, 12, 189, 166, 140, 41, 62, 4, 225, 44, 60, 73, 199, 16, 190, 196, 173, 237, 188, 51, 59, 164, 189, 215, 251, 206, 188, 231, 75, 26, 189, 219, 233, 191, 61, 24, 69, 9, 190, 200, 68, 49, 62, 13, 95, 10, 62, 97, 25, 2, 190, 57, 75, 9, 62, 19, 211, 8, 190, 216, 97, 112, 61, 1, 72, 120, 189, 65, 152, 51, 62, 211, 101, 4, 62, 83, 158, 238, 61, 13, 40, 204, 189, 179, 21, 145, 61, 12, 206, 252, 189, 41, 197, 51, 187, 161, 64, 16, 190, 133, 26, 47, 62, 24, 222, 56, 189, 50, 189, 39, 62, 110, 90, 158, 187, 205, 153, 197, 61, 231, 66, 5, 190, 45, 49, 24, 190, 81, 220, 178, 189, 131, 92, 1, 62, 194, 132, 6, 62, 213, 68, 155, 189, 222, 242, 104, 188, 57, 184, 32, 61, 159, 28, 203, 61, 192, 116, 34, 190, 217, 93, 193, 61, 91, 46, 253, 61, 238, 92, 188, 189, 237, 204, 150, 189, 98, 59, 233, 189, 60, 254, 224, 61, 223, 156, 35, 62, 34, 77, 28, 62, 231, 210, 85, 59, 210, 179, 16, 61, 137, 155, 12, 62, 84, 2, 37, 62, 123, 36, 183, 61, 49, 49, 61, 60, 147, 147, 196, 188, 211, 53, 207, 61, 166, 69, 229, 189, 168, 133, 46, 189, 10, 238, 41, 190, 112, 143, 224, 61, 175, 26, 19, 62, 87, 5, 149, 60, 155, 201, 178, 189, 116, 21, 156, 60, 45, 59, 189, 189, 212, 39, 2, 190, 94, 48, 174, 189, 134, 221, 148, 189, 62, 63, 18, 190, 208, 199, 186, 189, 226, 104, 44, 190, 33, 34, 135, 61, 55, 233, 244, 189, 19, 114, 160, 61, 22, 97, 145, 61, 21, 203, 47, 62, 185, 211, 30, 189, 111, 98, 228, 189, 185, 6, 121, 189, 43, 74, 89, 189, 89, 243, 128, 61, 207, 168, 89, 61, 63, 36, 35, 61, 101, 26, 13, 62, 96, 174, 38, 62, 181, 190, 51, 189, 243, 23, 245, 188, 94, 169, 183, 189, 194, 75, 234, 188, 98, 85, 15, 189, 46, 159, 52, 62, 221, 43, 130, 60, 206, 150, 6, 62, 28, 248, 168, 60, 193, 240, 48, 190, 101, 110, 81, 189, 89, 88, 10, 62, 123, 244, 25, 62, 56, 159, 251, 60, 72, 200, 71, 61, 44, 27, 4, 190, 52, 91, 150, 61, 156, 216, 109, 59, 171, 249, 43, 190, 166, 85, 0, 62, 237, 193, 214, 189, 200, 189, 63, 61, 199, 20, 226, 61, 101, 235, 211, 189, 183, 5, 38, 59, 231, 109, 26, 62, 233, 230, 24, 61, 49, 131, 34, 190, 179, 118, 254, 189, 110, 247, 48, 62, 205, 226, 0, 62, 102, 19, 217, 61, 51, 88, 233, 189, 11, 201, 218, 189, 77, 31, 2, 190, 198, 84, 221, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {196, 83, 194, 61, 106, 152, 164, 61, 175, 123, 228, 61, 0, 107, 239, 61, 131, 14, 158, 189, 218, 37, 12, 62, 25, 171, 202, 61, 148, 84, 194, 189, 125, 3, 194, 60, 151, 185, 10, 190, 214, 234, 238, 60, 126, 24, 106, 188, 110, 174, 20, 62, 85, 16, 214, 60, 174, 38, 158, 188, 146, 203, 252, 61, 242, 9, 48, 190, 108, 6, 37, 190, 212, 17, 152, 61, 158, 15, 199, 188, 202, 197, 172, 189, 8, 56, 50, 188, 193, 203, 246, 189, 173, 137, 179, 61, 104, 197, 59, 61, 213, 222, 52, 190, 30, 108, 203, 60, 85, 235, 131, 60, 85, 167, 154, 189, 100, 9, 244, 61, 219, 224, 163, 61, 187, 44, 18, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 43, 36, 60, 97, 228, 239, 61, 160, 182, 203, 61, 144, 136, 47, 190, 150, 205, 121, 61, 30, 89, 112, 61, 82, 203, 28, 62, 173, 239, 28, 189, 76, 102, 6, 190, 120, 110, 189, 189, 52, 95, 114, 187, 37, 133, 139, 61, 169, 24, 48, 62, 213, 184, 114, 188, 80, 0, 178, 189, 214, 215, 220, 61, 51, 29, 51, 61, 182, 143, 171, 189, 85, 32, 156, 189, 205, 201, 166, 60, 89, 214, 79, 189, 229, 30, 44, 189, 93, 68, 17, 62, 14, 38, 171, 189, 205, 244, 3, 62, 121, 105, 113, 189, 109, 197, 158, 61, 60, 76, 242, 61, 39, 139, 47, 61, 13, 234, 234, 61, 72, 126, 189, 189, 22, 198, 32, 190, 77, 116, 155, 61, 68, 64, 249, 61, 33, 207, 46, 190, 85, 107, 145, 189, 68, 65, 22, 190, 236, 73, 230, 189, 218, 233, 6, 190, 235, 116, 42, 189, 58, 220, 207, 189, 150, 197, 165, 61, 92, 160, 116, 189, 12, 84, 250, 188, 153, 160, 5, 62, 103, 230, 20, 62, 44, 29, 23, 62, 114, 30, 142, 61, 164, 49, 138, 189, 4, 22, 215, 61, 214, 74, 50, 62, 216, 255, 10, 189, 86, 163, 144, 189, 2, 219, 203, 189, 171, 92, 134, 61, 162, 144, 175, 189, 95, 215, 82, 189, 35, 107, 200, 59, 137, 189, 179, 189, 128, 129, 183, 188, 76, 231, 64, 61, 101, 131, 144, 189, 197, 147, 11, 190, 25, 68, 8, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 176, 35, 62, 54, 175, 3, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {194, 54, 51, 191, 205, 94, 135, 61, 240, 131, 34, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {0, 95, 142, 62, 103, 9, 26, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0053/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}