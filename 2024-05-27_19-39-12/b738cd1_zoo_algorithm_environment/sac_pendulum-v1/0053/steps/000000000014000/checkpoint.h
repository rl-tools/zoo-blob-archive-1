// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 94, 190, 190, 238, 59, 217, 63, 80, 64, 222, 62, 26, 255, 42, 63, 178, 65, 29, 63, 238, 221, 17, 62, 229, 2, 213, 190, 237, 167, 84, 191, 230, 191, 246, 190, 207, 169, 32, 63, 186, 139, 144, 63, 127, 132, 226, 61, 179, 25, 51, 63, 224, 252, 41, 63, 212, 129, 130, 62, 9, 77, 15, 191, 14, 3, 232, 190, 233, 183, 225, 190, 207, 128, 110, 62, 45, 15, 251, 62, 249, 219, 210, 190, 223, 72, 32, 63, 136, 101, 177, 191, 190, 19, 203, 190, 253, 13, 59, 63, 95, 186, 212, 62, 22, 15, 138, 62, 49, 57, 82, 61, 191, 84, 227, 62, 17, 7, 204, 62, 190, 46, 2, 190, 20, 0, 232, 190, 158, 234, 51, 63, 92, 246, 172, 62, 1, 201, 46, 191, 232, 215, 179, 62, 40, 235, 27, 61, 97, 128, 231, 190, 92, 121, 14, 63, 88, 194, 35, 63, 141, 164, 244, 62, 171, 190, 8, 63, 249, 127, 252, 62, 43, 189, 176, 191, 14, 74, 174, 190, 254, 167, 130, 190, 54, 136, 138, 190, 166, 225, 208, 190, 4, 37, 164, 62, 231, 253, 21, 62, 33, 154, 11, 63, 135, 98, 87, 63, 202, 44, 9, 191, 116, 229, 207, 62, 171, 169, 8, 190, 1, 181, 145, 191, 225, 201, 208, 190, 9, 244, 141, 62, 102, 68, 81, 191, 241, 217, 201, 62, 16, 175, 174, 62, 187, 250, 46, 62, 116, 41, 10, 191, 204, 211, 198, 62, 238, 150, 148, 62, 185, 122, 214, 190, 54, 65, 45, 63, 50, 94, 46, 62, 212, 66, 43, 60, 126, 187, 127, 189, 28, 207, 25, 63, 236, 156, 132, 60, 108, 212, 12, 190, 220, 171, 97, 190, 147, 98, 121, 190, 184, 46, 192, 190, 224, 220, 83, 63, 52, 189, 14, 62, 42, 144, 44, 62, 178, 89, 238, 190, 80, 241, 2, 63, 232, 64, 28, 63, 179, 148, 47, 63, 131, 195, 131, 188, 45, 7, 114, 191, 95, 171, 237, 61, 126, 255, 95, 189, 8, 76, 253, 189, 121, 175, 159, 191, 70, 88, 15, 191, 182, 145, 23, 63, 62, 232, 168, 191, 61, 231, 92, 190, 109, 65, 8, 63, 133, 122, 47, 63, 66, 37, 235, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {217, 77, 33, 191, 166, 72, 37, 62, 68, 241, 131, 61, 124, 69, 202, 62, 39, 138, 227, 190, 91, 52, 139, 190, 238, 207, 175, 61, 71, 121, 171, 190, 59, 197, 75, 191, 59, 101, 21, 191, 38, 136, 180, 190, 173, 126, 155, 190, 143, 188, 100, 62, 221, 39, 121, 61, 96, 61, 93, 190, 142, 120, 139, 62, 164, 17, 98, 189, 207, 241, 17, 191, 94, 185, 244, 62, 135, 68, 124, 62, 53, 30, 5, 62, 3, 239, 3, 63, 23, 199, 8, 63, 87, 232, 233, 62, 72, 243, 73, 189, 37, 173, 54, 191, 103, 51, 68, 61, 136, 87, 134, 62, 223, 49, 242, 62, 130, 230, 155, 188, 111, 252, 168, 62, 218, 80, 72, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 217, 141, 190, 98, 69, 169, 189, 231, 152, 150, 61, 129, 224, 230, 190, 228, 152, 65, 63, 118, 136, 253, 189, 26, 31, 23, 190, 180, 13, 64, 63, 139, 29, 88, 63, 74, 149, 30, 62, 138, 42, 172, 62, 115, 190, 36, 62, 158, 15, 113, 62, 233, 66, 49, 190, 122, 236, 12, 63, 244, 77, 74, 190, 168, 146, 205, 189, 191, 130, 0, 62, 210, 55, 193, 62, 127, 92, 115, 62, 176, 221, 158, 189, 6, 110, 175, 190, 154, 5, 45, 61, 48, 134, 190, 189, 72, 146, 163, 189, 14, 160, 204, 190, 243, 165, 127, 62, 236, 253, 35, 189, 38, 232, 112, 190, 77, 140, 201, 61, 187, 210, 168, 60, 74, 31, 15, 61, 228, 196, 148, 61, 36, 168, 91, 62, 114, 193, 214, 189, 203, 92, 238, 62, 100, 149, 157, 190, 27, 134, 165, 61, 71, 37, 250, 61, 100, 180, 98, 191, 8, 129, 85, 191, 135, 201, 30, 190, 182, 145, 11, 62, 187, 49, 68, 61, 132, 59, 232, 61, 170, 57, 4, 60, 4, 189, 114, 191, 170, 6, 15, 190, 44, 130, 25, 190, 152, 141, 140, 190, 225, 200, 144, 189, 87, 65, 179, 189, 11, 225, 1, 62, 160, 176, 154, 61, 211, 127, 2, 61, 218, 115, 189, 62, 37, 80, 181, 61, 117, 91, 238, 190, 110, 22, 15, 188, 185, 138, 21, 62, 233, 204, 227, 61, 81, 203, 92, 190, 113, 145, 14, 191, 121, 59, 93, 190, 226, 227, 172, 62, 193, 192, 37, 62, 234, 254, 100, 190, 186, 52, 155, 62, 126, 16, 179, 190, 240, 24, 150, 190, 144, 233, 155, 62, 30, 20, 186, 61, 33, 69, 248, 190, 39, 202, 92, 61, 46, 43, 89, 62, 24, 36, 104, 190, 166, 51, 96, 62, 198, 206, 212, 61, 211, 143, 163, 188, 167, 17, 109, 189, 25, 99, 149, 189, 112, 181, 87, 61, 222, 69, 205, 189, 156, 61, 177, 62, 27, 88, 110, 62, 243, 220, 133, 61, 156, 184, 115, 61, 4, 120, 205, 61, 130, 230, 143, 188, 107, 166, 231, 62, 177, 160, 20, 190, 154, 206, 16, 62, 139, 28, 92, 62, 80, 14, 137, 62, 74, 79, 132, 62, 179, 44, 228, 189, 207, 12, 168, 191, 133, 62, 203, 189, 187, 66, 253, 60, 175, 92, 172, 189, 8, 184, 168, 189, 187, 58, 172, 189, 193, 114, 208, 61, 93, 5, 166, 190, 21, 75, 155, 61, 94, 132, 49, 191, 164, 161, 144, 190, 230, 31, 174, 62, 27, 254, 186, 60, 232, 222, 102, 189, 220, 76, 163, 190, 131, 71, 109, 61, 154, 67, 160, 59, 208, 98, 198, 189, 231, 123, 159, 62, 170, 38, 44, 62, 63, 161, 139, 190, 176, 24, 166, 190, 15, 171, 121, 190, 111, 17, 59, 190, 141, 198, 117, 190, 119, 76, 208, 189, 117, 191, 74, 62, 166, 245, 211, 189, 31, 180, 83, 62, 193, 212, 113, 191, 67, 66, 228, 190, 95, 74, 18, 191, 122, 47, 181, 61, 118, 198, 14, 190, 118, 23, 24, 189, 105, 167, 186, 189, 180, 227, 51, 62, 192, 57, 41, 60, 152, 91, 139, 59, 119, 13, 76, 189, 96, 188, 51, 62, 250, 124, 241, 188, 210, 205, 240, 189, 208, 40, 34, 190, 145, 199, 89, 60, 51, 241, 49, 189, 169, 91, 129, 189, 56, 75, 28, 62, 225, 9, 120, 189, 98, 131, 226, 61, 230, 124, 204, 189, 141, 50, 21, 188, 39, 1, 5, 61, 28, 233, 104, 189, 98, 105, 26, 190, 225, 122, 232, 189, 89, 19, 182, 189, 247, 85, 62, 189, 105, 122, 178, 184, 27, 253, 189, 188, 76, 23, 58, 60, 90, 221, 153, 61, 17, 168, 122, 185, 227, 64, 91, 189, 78, 199, 118, 190, 65, 6, 181, 61, 78, 108, 25, 62, 224, 132, 241, 189, 69, 120, 107, 191, 31, 241, 47, 62, 237, 197, 106, 59, 210, 117, 116, 61, 151, 216, 135, 191, 96, 140, 208, 190, 73, 4, 21, 62, 77, 114, 90, 61, 164, 99, 105, 61, 234, 128, 2, 190, 236, 22, 51, 61, 241, 78, 56, 61, 151, 78, 97, 190, 214, 94, 57, 62, 184, 76, 31, 62, 211, 182, 195, 62, 67, 77, 2, 62, 239, 1, 46, 62, 155, 210, 201, 61, 39, 176, 175, 61, 135, 46, 225, 188, 28, 96, 139, 190, 173, 68, 58, 61, 29, 75, 67, 189, 102, 246, 67, 62, 88, 204, 179, 187, 15, 193, 231, 61, 166, 151, 7, 190, 96, 60, 216, 61, 70, 8, 211, 61, 49, 152, 232, 190, 108, 55, 175, 188, 26, 7, 130, 191, 10, 42, 148, 191, 45, 136, 7, 191, 150, 55, 177, 62, 234, 69, 83, 191, 179, 130, 208, 190, 63, 153, 11, 62, 100, 75, 50, 62, 96, 31, 11, 62, 237, 119, 126, 190, 159, 214, 205, 62, 139, 195, 79, 62, 240, 67, 128, 190, 169, 237, 148, 62, 118, 126, 133, 190, 87, 33, 185, 62, 179, 52, 123, 62, 177, 145, 173, 60, 238, 122, 143, 61, 132, 216, 44, 62, 237, 229, 168, 62, 82, 90, 202, 62, 144, 31, 12, 190, 252, 35, 75, 189, 232, 125, 0, 61, 166, 245, 209, 62, 178, 104, 199, 62, 132, 195, 175, 190, 74, 45, 128, 190, 221, 166, 225, 62, 83, 206, 191, 61, 15, 239, 204, 62, 175, 63, 11, 62, 8, 216, 27, 61, 107, 142, 86, 62, 148, 152, 12, 191, 126, 29, 29, 63, 10, 139, 186, 62, 21, 55, 241, 190, 51, 190, 198, 62, 238, 21, 218, 190, 7, 99, 119, 62, 116, 89, 28, 191, 113, 182, 107, 60, 42, 102, 101, 62, 143, 38, 1, 63, 201, 193, 192, 60, 204, 15, 174, 190, 205, 97, 207, 60, 42, 59, 47, 61, 200, 27, 42, 62, 87, 164, 51, 62, 14, 23, 151, 190, 216, 77, 56, 191, 172, 125, 211, 62, 190, 39, 229, 61, 232, 113, 217, 189, 31, 114, 44, 190, 107, 32, 195, 190, 39, 93, 101, 62, 175, 110, 172, 189, 227, 35, 234, 61, 59, 204, 86, 62, 14, 202, 12, 62, 156, 44, 8, 60, 90, 95, 228, 189, 205, 245, 34, 189, 7, 206, 192, 189, 156, 174, 144, 62, 164, 244, 36, 62, 91, 11, 136, 190, 253, 223, 93, 189, 85, 103, 57, 190, 25, 73, 140, 61, 135, 10, 143, 190, 174, 248, 35, 190, 57, 0, 137, 62, 58, 108, 80, 62, 82, 112, 167, 59, 64, 235, 136, 190, 230, 199, 191, 57, 40, 129, 36, 61, 244, 188, 148, 62, 33, 199, 198, 61, 255, 132, 219, 189, 152, 224, 43, 62, 162, 42, 243, 59, 145, 177, 251, 61, 237, 31, 11, 61, 153, 109, 229, 189, 30, 75, 223, 189, 240, 96, 39, 61, 143, 62, 174, 191, 17, 27, 231, 190, 218, 119, 197, 189, 202, 137, 1, 190, 183, 143, 245, 189, 70, 48, 249, 188, 162, 79, 48, 189, 168, 57, 136, 190, 65, 34, 86, 190, 249, 31, 66, 191, 222, 150, 59, 190, 5, 236, 238, 61, 168, 35, 38, 189, 62, 193, 172, 190, 86, 191, 142, 190, 136, 91, 103, 62, 128, 217, 4, 190, 20, 77, 74, 188, 249, 244, 220, 62, 123, 221, 167, 62, 100, 195, 173, 190, 31, 91, 11, 191, 63, 91, 115, 189, 184, 104, 80, 189, 40, 29, 224, 190, 122, 11, 240, 61, 127, 80, 106, 62, 177, 19, 8, 190, 197, 111, 75, 62, 247, 47, 206, 191, 35, 135, 48, 190, 196, 243, 228, 190, 210, 24, 89, 188, 250, 7, 165, 62, 211, 85, 1, 61, 198, 141, 240, 61, 4, 220, 34, 190, 249, 103, 191, 61, 75, 204, 93, 62, 123, 153, 22, 191, 216, 30, 134, 62, 107, 208, 24, 189, 150, 160, 232, 190, 93, 167, 157, 188, 206, 68, 254, 189, 8, 210, 24, 62, 154, 83, 30, 191, 171, 91, 107, 61, 13, 236, 169, 61, 52, 83, 117, 62, 74, 157, 22, 190, 231, 184, 94, 190, 165, 170, 141, 189, 78, 176, 24, 62, 62, 34, 122, 62, 204, 18, 215, 61, 182, 146, 12, 190, 99, 234, 139, 62, 34, 51, 46, 62, 142, 159, 114, 62, 191, 154, 128, 189, 232, 252, 148, 190, 209, 252, 1, 61, 94, 232, 152, 62, 213, 75, 136, 191, 236, 217, 72, 62, 226, 123, 150, 62, 148, 211, 125, 62, 113, 132, 154, 190, 31, 133, 202, 62, 36, 82, 238, 187, 184, 181, 24, 191, 110, 235, 37, 191, 63, 249, 56, 191, 215, 177, 235, 190, 21, 21, 72, 62, 70, 251, 136, 190, 135, 57, 152, 62, 189, 134, 34, 191, 7, 247, 70, 62, 238, 109, 188, 61, 64, 154, 149, 62, 117, 195, 127, 62, 118, 249, 178, 190, 103, 44, 93, 190, 152, 77, 53, 189, 34, 210, 197, 61, 216, 147, 224, 61, 142, 34, 164, 190, 101, 5, 66, 63, 216, 129, 152, 62, 160, 46, 127, 62, 118, 124, 186, 62, 210, 109, 171, 190, 118, 221, 2, 59, 170, 214, 52, 189, 56, 77, 238, 62, 148, 74, 14, 190, 94, 25, 161, 61, 61, 19, 120, 190, 180, 141, 158, 191, 211, 167, 37, 190, 80, 71, 220, 189, 140, 130, 172, 61, 96, 14, 96, 191, 255, 57, 6, 191, 215, 64, 165, 62, 132, 212, 74, 60, 161, 242, 165, 62, 2, 79, 9, 190, 76, 49, 131, 62, 209, 35, 74, 62, 142, 163, 10, 190, 178, 105, 25, 190, 159, 32, 162, 61, 164, 20, 220, 62, 176, 84, 254, 61, 157, 57, 52, 60, 8, 253, 71, 190, 110, 204, 129, 189, 196, 17, 166, 62, 234, 157, 252, 62, 33, 189, 18, 190, 48, 218, 86, 190, 50, 23, 152, 61, 15, 119, 126, 62, 102, 213, 207, 62, 221, 48, 151, 190, 43, 26, 142, 191, 135, 171, 124, 62, 99, 223, 155, 61, 117, 170, 151, 62, 178, 244, 145, 190, 207, 175, 29, 62, 250, 160, 64, 62, 137, 74, 58, 191, 217, 64, 34, 189, 248, 182, 162, 190, 3, 237, 81, 62, 150, 228, 158, 61, 156, 219, 162, 190, 203, 111, 225, 189, 193, 247, 65, 191, 185, 85, 118, 62, 250, 113, 47, 190, 14, 234, 222, 61, 44, 165, 21, 62, 245, 153, 159, 188, 211, 197, 101, 189, 11, 40, 18, 190, 110, 54, 51, 62, 41, 133, 211, 61, 239, 134, 117, 190, 141, 166, 181, 190, 165, 111, 193, 189, 42, 152, 21, 62, 158, 75, 139, 62, 101, 189, 222, 190, 105, 140, 179, 190, 136, 63, 208, 189, 134, 39, 70, 61, 210, 199, 15, 62, 224, 254, 7, 190, 207, 83, 127, 61, 68, 93, 33, 190, 35, 91, 212, 189, 149, 148, 244, 58, 255, 250, 137, 189, 226, 20, 19, 190, 42, 93, 97, 189, 149, 129, 44, 190, 47, 154, 113, 190, 237, 82, 229, 189, 131, 45, 62, 189, 230, 96, 19, 190, 1, 67, 125, 190, 63, 166, 179, 61, 63, 10, 58, 190, 239, 255, 76, 61, 194, 211, 159, 61, 37, 185, 63, 190, 19, 167, 89, 61, 219, 96, 135, 189, 245, 116, 106, 189, 244, 204, 6, 190, 3, 92, 87, 61, 36, 16, 119, 189, 157, 68, 124, 61, 10, 58, 35, 190, 193, 235, 202, 189, 111, 134, 27, 62, 184, 45, 78, 190, 191, 178, 209, 189, 78, 18, 184, 189, 143, 156, 216, 61, 151, 41, 115, 187, 134, 170, 171, 189, 245, 224, 11, 62, 250, 185, 53, 189, 191, 219, 96, 62, 84, 53, 255, 189, 99, 163, 130, 61, 77, 112, 32, 190, 53, 93, 166, 190, 87, 207, 115, 189, 29, 245, 169, 60, 38, 128, 56, 62, 168, 168, 24, 190, 166, 124, 20, 61, 72, 157, 34, 190, 25, 199, 8, 189, 247, 165, 176, 190, 158, 239, 163, 189, 225, 13, 67, 190, 196, 214, 60, 190, 110, 98, 144, 60, 133, 233, 122, 61, 242, 86, 52, 190, 128, 70, 150, 190, 94, 207, 167, 190, 124, 103, 46, 190, 142, 176, 150, 61, 53, 77, 56, 62, 57, 211, 56, 190, 118, 169, 201, 191, 242, 215, 65, 191, 58, 190, 70, 61, 146, 30, 59, 191, 102, 196, 242, 190, 85, 189, 50, 62, 96, 94, 16, 60, 96, 104, 84, 189, 215, 226, 7, 190, 93, 212, 74, 191, 52, 77, 151, 188, 133, 179, 72, 62, 43, 154, 149, 186, 109, 164, 172, 189, 106, 60, 253, 62, 110, 18, 0, 62, 44, 125, 86, 61, 144, 135, 74, 190, 227, 228, 68, 62, 44, 107, 168, 185, 45, 94, 138, 190, 92, 139, 4, 190, 105, 127, 203, 188, 100, 87, 84, 190, 132, 157, 99, 189, 249, 244, 104, 190, 25, 40, 151, 62, 231, 81, 137, 190, 18, 254, 142, 62, 174, 29, 16, 189, 222, 186, 162, 62, 222, 72, 70, 191, 191, 76, 147, 191, 137, 144, 55, 191, 141, 165, 220, 61, 174, 150, 142, 191, 155, 216, 255, 189, 47, 143, 168, 60, 62, 223, 77, 189, 107, 120, 185, 188, 75, 37, 34, 190, 206, 33, 190, 190, 254, 251, 62, 61, 101, 71, 1, 190, 245, 3, 155, 60, 214, 193, 182, 189, 39, 55, 1, 63, 76, 153, 41, 62, 199, 157, 87, 190, 113, 214, 161, 188, 102, 2, 40, 62, 131, 219, 59, 62, 218, 140, 3, 189, 69, 144, 76, 190, 227, 177, 96, 61, 19, 222, 93, 186, 250, 85, 147, 190, 238, 27, 173, 61, 61, 77, 40, 62, 229, 122, 9, 190, 216, 96, 160, 61, 226, 85, 41, 61, 136, 133, 140, 62, 174, 234, 194, 190, 10, 57, 0, 192, 201, 216, 113, 190, 46, 249, 132, 62, 205, 39, 14, 191, 243, 55, 153, 189, 41, 119, 189, 62, 179, 102, 48, 60, 31, 158, 2, 190, 120, 246, 34, 62, 129, 171, 185, 190, 102, 222, 138, 190, 177, 17, 250, 62, 101, 107, 184, 190, 231, 185, 254, 60, 254, 116, 64, 190, 183, 252, 32, 62, 254, 248, 19, 61, 77, 209, 161, 61, 17, 54, 181, 62, 203, 130, 153, 61, 151, 234, 9, 190, 150, 170, 40, 190, 122, 230, 145, 191, 178, 226, 145, 61, 35, 70, 254, 187, 141, 107, 222, 60, 118, 102, 249, 62, 202, 251, 236, 190, 74, 166, 192, 62, 243, 241, 243, 189, 167, 120, 173, 190, 4, 90, 16, 191, 92, 30, 133, 190, 108, 24, 32, 62, 238, 186, 72, 187, 139, 101, 168, 62, 60, 37, 66, 189, 57, 89, 20, 62, 84, 115, 133, 61, 143, 159, 9, 191, 163, 64, 246, 61, 121, 148, 104, 61, 67, 42, 206, 190, 100, 245, 176, 61, 159, 158, 12, 190, 142, 60, 143, 62, 104, 12, 71, 191, 245, 141, 107, 62, 88, 0, 177, 188, 141, 33, 132, 62, 20, 171, 157, 189, 106, 59, 141, 189, 191, 243, 113, 60, 138, 35, 117, 58, 227, 45, 136, 62, 41, 15, 229, 61, 189, 251, 250, 189, 34, 125, 152, 62, 81, 115, 131, 189, 10, 68, 201, 59, 36, 73, 120, 60, 26, 163, 160, 190, 169, 78, 203, 187, 26, 252, 114, 62, 85, 115, 184, 189, 251, 225, 160, 62, 97, 162, 36, 190, 150, 46, 180, 62, 133, 216, 175, 190, 15, 0, 246, 189, 139, 66, 9, 62, 240, 233, 119, 190, 172, 216, 178, 190, 250, 239, 33, 62, 158, 47, 146, 61, 167, 2, 48, 60, 125, 81, 70, 189, 167, 186, 33, 62, 80, 225, 150, 190, 181, 181, 83, 62, 241, 157, 17, 62, 35, 16, 78, 189, 136, 251, 57, 61, 135, 71, 142, 189, 10, 227, 112, 61, 4, 122, 83, 188, 46, 33, 21, 62, 208, 167, 54, 62, 14, 161, 235, 189, 67, 23, 50, 62, 46, 9, 143, 188, 171, 122, 168, 61, 59, 9, 104, 62, 79, 228, 179, 189, 115, 86, 14, 62, 205, 134, 1, 61, 86, 235, 122, 190, 198, 248, 113, 62, 164, 94, 129, 61, 211, 237, 18, 62, 14, 65, 171, 190, 228, 187, 147, 189, 9, 183, 122, 61, 242, 248, 133, 190, 147, 228, 62, 190, 118, 234, 5, 190, 90, 79, 130, 190, 148, 79, 47, 188, 148, 79, 197, 59, 29, 96, 60, 188, 222, 209, 67, 191, 132, 70, 69, 60, 103, 136, 131, 61, 95, 254, 176, 61, 250, 106, 195, 60, 242, 110, 2, 190, 168, 43, 182, 61, 23, 189, 177, 61, 172, 99, 165, 61, 229, 35, 116, 62, 97, 183, 108, 190, 3, 88, 203, 62, 218, 82, 116, 62, 138, 34, 131, 62, 158, 177, 117, 60, 98, 96, 140, 190, 68, 117, 173, 189, 82, 245, 2, 62, 65, 154, 2, 188, 110, 231, 186, 62, 214, 237, 8, 191, 252, 65, 117, 62, 17, 49, 35, 63, 240, 72, 51, 190, 23, 237, 186, 62, 128, 173, 215, 190, 200, 225, 95, 62, 160, 139, 144, 62, 55, 203, 76, 190, 37, 211, 160, 189, 221, 77, 112, 190, 175, 35, 126, 62, 172, 158, 16, 191, 149, 161, 107, 190, 170, 203, 42, 62, 113, 55, 143, 61, 144, 173, 166, 190, 37, 84, 132, 190, 90, 204, 185, 189, 167, 214, 93, 62, 127, 51, 122, 62, 253, 215, 237, 61, 10, 187, 24, 62, 127, 1, 217, 189, 124, 40, 128, 188, 57, 73, 136, 61, 75, 55, 175, 61, 127, 45, 135, 191, 199, 133, 12, 191, 27, 254, 117, 62, 139, 178, 15, 62, 3, 179, 63, 62, 98, 183, 178, 61, 84, 48, 176, 61, 127, 53, 139, 190, 18, 130, 34, 61, 113, 225, 208, 61, 206, 231, 85, 190, 186, 44, 248, 60, 36, 234, 4, 190, 77, 22, 17, 189, 130, 57, 68, 188, 0, 82, 135, 189, 108, 205, 195, 186, 82, 4, 38, 191, 83, 169, 50, 62, 70, 9, 11, 62, 144, 65, 211, 60, 241, 125, 99, 190, 233, 43, 38, 62, 174, 156, 9, 62, 142, 7, 225, 188, 193, 211, 240, 61, 97, 147, 151, 62, 229, 241, 157, 59, 132, 241, 152, 62, 128, 87, 214, 61, 161, 172, 24, 62, 136, 134, 33, 62, 23, 77, 141, 190, 137, 170, 239, 188, 227, 113, 139, 188, 27, 27, 204, 186, 223, 246, 143, 61, 181, 91, 247, 188, 223, 15, 96, 62, 71, 146, 149, 188, 111, 206, 35, 61, 119, 202, 63, 62, 5, 192, 245, 60, 127, 213, 33, 62, 176, 219, 88, 190, 30, 21, 102, 190, 49, 150, 154, 190, 184, 24, 177, 189, 167, 51, 10, 190, 123, 252, 59, 60, 167, 66, 147, 189, 203, 191, 204, 190, 228, 155, 23, 62, 214, 186, 59, 62, 7, 110, 23, 62, 158, 179, 177, 61, 50, 104, 85, 62, 248, 233, 217, 61, 103, 152, 28, 61, 187, 106, 112, 62, 26, 73, 70, 191, 235, 173, 249, 190, 233, 62, 212, 61, 169, 48, 229, 61, 137, 159, 167, 62, 94, 202, 26, 190, 111, 187, 195, 59, 226, 64, 3, 62, 53, 234, 162, 61, 161, 22, 45, 190, 157, 103, 242, 189, 41, 19, 4, 189, 153, 183, 109, 61, 65, 6, 33, 190, 201, 74, 85, 61, 155, 117, 26, 62, 57, 38, 52, 190, 210, 230, 26, 189, 8, 132, 185, 60, 235, 29, 45, 190, 198, 66, 45, 190, 124, 236, 187, 61, 202, 102, 245, 184, 75, 157, 173, 189, 149, 250, 183, 189, 252, 140, 33, 190, 1, 60, 7, 62, 132, 76, 11, 62, 124, 242, 217, 189, 60, 167, 26, 190, 224, 132, 185, 60, 206, 154, 161, 188, 229, 201, 161, 61, 15, 154, 8, 62, 76, 198, 10, 62, 31, 218, 197, 61, 73, 209, 73, 188, 75, 231, 29, 62, 135, 165, 10, 62, 252, 3, 143, 189, 154, 41, 178, 189, 247, 63, 12, 61, 203, 31, 87, 190, 199, 4, 238, 190, 88, 54, 140, 62, 126, 40, 18, 190, 172, 159, 139, 60, 20, 235, 255, 189, 212, 98, 128, 190, 2, 225, 12, 189, 180, 81, 246, 60, 170, 144, 110, 189, 108, 114, 0, 62, 146, 75, 239, 189, 99, 21, 27, 62, 93, 195, 241, 189, 102, 112, 68, 62, 201, 67, 41, 62, 165, 66, 130, 62, 34, 186, 116, 190, 92, 32, 6, 190, 209, 238, 93, 189, 217, 92, 115, 190, 40, 55, 159, 188, 30, 164, 121, 190, 139, 21, 85, 190, 213, 182, 106, 190, 44, 241, 43, 60, 207, 150, 187, 189, 105, 214, 129, 62, 5, 194, 190, 61, 100, 240, 5, 190, 146, 176, 9, 188, 208, 101, 33, 191, 55, 215, 215, 190, 65, 251, 142, 191, 13, 132, 87, 191, 86, 92, 109, 191, 204, 26, 21, 190, 238, 175, 109, 191, 3, 174, 193, 190, 11, 242, 133, 62, 192, 201, 152, 189, 59, 217, 105, 62, 24, 75, 235, 189, 168, 88, 156, 62, 203, 28, 97, 61, 94, 140, 66, 189, 156, 19, 7, 190, 61, 100, 230, 190, 147, 194, 148, 62, 20, 31, 115, 190, 32, 84, 53, 190, 137, 232, 221, 189, 20, 125, 33, 62, 79, 123, 218, 62, 154, 156, 181, 62, 75, 39, 151, 190, 147, 111, 19, 190, 33, 253, 188, 62, 105, 40, 121, 62, 15, 250, 41, 63, 136, 90, 64, 189, 71, 149, 49, 63, 160, 135, 83, 190, 32, 198, 99, 190, 240, 199, 174, 188, 186, 130, 100, 191, 156, 241, 110, 189, 159, 78, 24, 62, 215, 87, 146, 62, 131, 247, 26, 191, 156, 86, 122, 190, 130, 2, 146, 62, 235, 47, 189, 189, 194, 153, 158, 62, 33, 179, 239, 189, 106, 21, 141, 62, 27, 241, 69, 59, 147, 200, 130, 190, 201, 142, 188, 59, 238, 234, 185, 188, 137, 165, 160, 62, 5, 166, 77, 62, 235, 208, 0, 190, 8, 211, 63, 189, 201, 24, 132, 188, 58, 45, 119, 62, 232, 105, 101, 63, 72, 235, 185, 189, 114, 136, 6, 190, 239, 169, 101, 187, 239, 208, 29, 189, 125, 38, 162, 62, 155, 41, 79, 190, 179, 58, 144, 190, 207, 37, 248, 60, 169, 93, 180, 62, 6, 179, 249, 188, 153, 45, 61, 191, 79, 10, 131, 61, 190, 165, 220, 189, 20, 94, 113, 189, 222, 109, 120, 191, 84, 227, 100, 188, 76, 135, 242, 189, 231, 70, 17, 62, 65, 28, 198, 59, 164, 228, 155, 61, 242, 212, 70, 190, 248, 242, 71, 62, 147, 136, 206, 61, 163, 68, 167, 61, 253, 136, 106, 60, 158, 69, 149, 60, 249, 249, 5, 62, 106, 197, 36, 62, 166, 16, 44, 62, 230, 172, 35, 190, 237, 47, 23, 62, 228, 207, 245, 188, 228, 13, 102, 62, 163, 44, 63, 62, 180, 15, 49, 190, 130, 100, 246, 61, 156, 224, 156, 62, 251, 133, 146, 190, 52, 74, 147, 190, 44, 109, 92, 58, 146, 139, 75, 62, 247, 4, 173, 62, 116, 134, 166, 189, 29, 127, 93, 61, 120, 135, 160, 61, 141, 108, 2, 191, 48, 181, 33, 190, 168, 111, 172, 189, 242, 147, 172, 190, 196, 216, 13, 190, 167, 71, 250, 189, 49, 85, 3, 187, 120, 194, 224, 190, 139, 167, 246, 188, 52, 154, 33, 62, 175, 22, 82, 62, 201, 126, 134, 62, 158, 52, 5, 190, 85, 109, 31, 190, 2, 134, 178, 189, 251, 230, 231, 61, 81, 249, 2, 62, 138, 128, 212, 189, 233, 149, 183, 62, 38, 56, 135, 62, 153, 69, 128, 62, 59, 199, 216, 61, 162, 129, 105, 190, 223, 105, 106, 190, 218, 107, 103, 61, 226, 104, 234, 190, 191, 183, 134, 62, 76, 224, 49, 188, 100, 33, 156, 62, 159, 35, 229, 59, 100, 8, 18, 190, 97, 9, 244, 61, 141, 77, 125, 190, 75, 187, 107, 62, 53, 225, 153, 60, 220, 31, 224, 189, 148, 223, 172, 189, 126, 114, 27, 188, 172, 31, 173, 61, 236, 9, 34, 191, 121, 237, 78, 62, 168, 102, 170, 189, 200, 200, 235, 61, 55, 167, 45, 62, 224, 232, 104, 190, 124, 202, 206, 188, 146, 108, 17, 62, 255, 195, 252, 61, 131, 36, 116, 188, 53, 139, 145, 190, 126, 205, 114, 62, 72, 9, 74, 62, 53, 137, 46, 62, 129, 234, 198, 59, 32, 124, 0, 191, 16, 138, 169, 190, 64, 158, 8, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {224, 1, 71, 62, 236, 12, 215, 61, 174, 221, 179, 62, 0, 112, 103, 62, 10, 89, 172, 189, 207, 148, 161, 62, 2, 78, 173, 62, 190, 152, 67, 189, 140, 82, 175, 60, 133, 46, 45, 62, 41, 209, 222, 61, 67, 28, 18, 62, 5, 93, 74, 62, 96, 63, 252, 61, 158, 214, 233, 188, 15, 245, 180, 61, 245, 47, 9, 61, 50, 61, 80, 61, 252, 196, 159, 62, 65, 3, 55, 62, 217, 152, 5, 62, 159, 172, 33, 62, 62, 223, 12, 190, 151, 181, 138, 62, 126, 209, 27, 61, 85, 4, 80, 190, 227, 21, 72, 62, 114, 101, 171, 62, 197, 77, 50, 190, 140, 166, 253, 61, 13, 82, 65, 62, 209, 113, 120, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 146, 18, 191, 186, 54, 56, 191, 98, 226, 152, 62, 231, 106, 166, 191, 23, 117, 99, 61, 33, 243, 39, 62, 122, 108, 85, 63, 191, 101, 40, 191, 37, 179, 19, 189, 193, 196, 213, 191, 0, 232, 156, 190, 72, 66, 228, 190, 23, 255, 242, 62, 54, 235, 127, 191, 54, 28, 115, 60, 77, 63, 15, 62, 195, 34, 29, 191, 41, 247, 200, 190, 195, 39, 198, 191, 22, 43, 139, 190, 35, 107, 119, 61, 40, 19, 217, 189, 79, 165, 67, 63, 102, 161, 199, 59, 100, 233, 40, 62, 99, 213, 93, 189, 95, 2, 83, 60, 175, 84, 143, 63, 157, 79, 133, 62, 142, 127, 32, 62, 55, 10, 133, 190, 180, 33, 197, 190, 246, 89, 93, 188, 179, 253, 180, 62, 156, 105, 186, 190, 147, 82, 23, 190, 52, 135, 25, 190, 120, 202, 83, 190, 230, 75, 35, 61, 235, 255, 185, 189, 87, 57, 248, 189, 148, 64, 124, 188, 209, 128, 81, 190, 47, 160, 205, 189, 237, 204, 58, 62, 147, 23, 143, 62, 168, 86, 213, 61, 42, 25, 59, 190, 117, 80, 48, 190, 231, 111, 80, 58, 31, 161, 130, 62, 163, 188, 173, 189, 151, 255, 92, 190, 79, 197, 143, 190, 27, 213, 211, 62, 151, 5, 125, 190, 243, 54, 11, 189, 122, 220, 230, 59, 240, 237, 34, 190, 173, 107, 12, 188, 155, 143, 207, 62, 40, 32, 87, 190, 20, 134, 34, 190, 200, 200, 12, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 210, 72, 62, 11, 62, 129, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {37, 145, 208, 191, 218, 122, 163, 61, 120, 169, 92, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {172, 182, 176, 192, 82, 252, 42, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0053/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}