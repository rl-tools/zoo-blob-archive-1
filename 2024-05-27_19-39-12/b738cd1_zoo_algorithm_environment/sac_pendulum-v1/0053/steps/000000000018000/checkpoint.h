// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {208, 35, 216, 190, 38, 199, 217, 63, 110, 99, 4, 63, 186, 115, 34, 63, 46, 145, 45, 63, 56, 185, 252, 61, 27, 53, 228, 190, 81, 14, 102, 191, 154, 130, 243, 190, 72, 82, 22, 63, 169, 73, 146, 63, 151, 93, 25, 62, 230, 148, 44, 63, 207, 182, 54, 63, 7, 105, 133, 62, 175, 44, 13, 191, 63, 235, 236, 190, 201, 101, 237, 190, 254, 218, 80, 62, 54, 155, 238, 62, 146, 132, 215, 190, 96, 16, 34, 63, 148, 60, 184, 191, 188, 25, 198, 190, 204, 189, 53, 63, 82, 40, 241, 62, 99, 178, 130, 62, 104, 147, 211, 60, 45, 197, 252, 62, 249, 43, 202, 62, 41, 115, 143, 189, 234, 49, 0, 191, 238, 4, 56, 63, 151, 158, 207, 62, 141, 236, 49, 191, 224, 153, 148, 62, 89, 166, 45, 60, 176, 215, 242, 190, 15, 163, 13, 63, 151, 15, 27, 63, 245, 91, 249, 62, 127, 197, 11, 63, 144, 52, 2, 63, 130, 80, 187, 191, 130, 110, 156, 190, 185, 227, 183, 190, 231, 68, 143, 190, 190, 149, 185, 190, 68, 36, 171, 62, 29, 144, 28, 62, 34, 118, 7, 63, 130, 72, 83, 63, 198, 36, 4, 191, 19, 208, 173, 62, 207, 221, 56, 190, 190, 129, 145, 191, 222, 94, 213, 190, 74, 147, 153, 62, 242, 10, 79, 191, 138, 27, 183, 62, 147, 155, 159, 62, 119, 195, 94, 62, 225, 25, 17, 191, 29, 158, 184, 62, 206, 51, 189, 62, 59, 179, 223, 190, 149, 198, 52, 63, 22, 0, 94, 62, 59, 73, 19, 188, 241, 197, 17, 190, 2, 18, 27, 63, 187, 73, 3, 61, 40, 5, 66, 190, 131, 3, 66, 190, 59, 191, 113, 190, 190, 148, 221, 190, 93, 48, 95, 63, 165, 84, 156, 61, 128, 110, 62, 62, 142, 193, 236, 190, 3, 8, 251, 62, 162, 145, 16, 63, 248, 227, 60, 63, 197, 34, 64, 189, 96, 91, 132, 191, 144, 9, 17, 61, 163, 100, 52, 188, 4, 188, 4, 190, 18, 176, 174, 191, 78, 30, 251, 190, 137, 77, 13, 63, 68, 133, 179, 191, 91, 93, 21, 190, 179, 86, 7, 63, 86, 85, 66, 63, 46, 165, 216, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 135, 0, 191, 211, 123, 220, 61, 200, 239, 62, 62, 146, 31, 193, 62, 241, 125, 233, 190, 84, 99, 197, 189, 96, 110, 75, 61, 115, 4, 171, 190, 83, 25, 78, 191, 198, 243, 34, 191, 224, 146, 197, 190, 26, 199, 123, 190, 82, 147, 68, 62, 100, 20, 114, 59, 249, 211, 81, 190, 216, 242, 25, 62, 248, 162, 135, 189, 169, 189, 27, 191, 5, 52, 240, 62, 199, 189, 111, 62, 24, 12, 155, 61, 141, 63, 230, 62, 125, 174, 215, 62, 4, 255, 206, 62, 108, 143, 244, 189, 197, 99, 51, 191, 86, 33, 154, 61, 102, 78, 74, 62, 93, 231, 243, 62, 217, 120, 211, 60, 216, 6, 167, 62, 234, 74, 130, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {154, 215, 153, 190, 193, 209, 193, 189, 100, 141, 214, 61, 211, 180, 238, 190, 129, 16, 52, 63, 118, 96, 237, 189, 181, 146, 107, 190, 97, 127, 72, 63, 18, 166, 57, 63, 21, 15, 0, 62, 115, 88, 146, 62, 105, 167, 2, 62, 27, 112, 93, 62, 78, 58, 84, 190, 64, 138, 20, 63, 2, 89, 61, 190, 177, 194, 19, 190, 10, 97, 189, 61, 108, 186, 209, 62, 224, 116, 122, 62, 5, 89, 230, 189, 72, 79, 176, 190, 215, 218, 31, 61, 123, 28, 198, 189, 148, 74, 153, 189, 131, 136, 202, 190, 112, 65, 92, 62, 132, 163, 76, 189, 210, 143, 40, 190, 239, 230, 227, 61, 208, 84, 63, 61, 100, 29, 33, 188, 161, 159, 157, 61, 171, 35, 106, 62, 191, 244, 193, 189, 96, 13, 242, 62, 174, 203, 181, 190, 238, 226, 153, 61, 38, 245, 12, 62, 212, 122, 123, 191, 107, 111, 128, 191, 122, 80, 9, 190, 103, 211, 53, 62, 186, 5, 220, 61, 109, 234, 57, 62, 39, 174, 104, 60, 16, 190, 137, 191, 5, 189, 246, 189, 122, 81, 223, 189, 179, 215, 113, 190, 84, 92, 199, 189, 224, 35, 163, 189, 160, 171, 24, 62, 209, 115, 189, 61, 108, 197, 2, 61, 110, 113, 193, 62, 32, 206, 236, 61, 71, 150, 182, 190, 6, 32, 61, 61, 161, 177, 25, 62, 24, 193, 25, 62, 201, 112, 64, 190, 253, 177, 25, 191, 160, 214, 81, 190, 33, 108, 179, 62, 80, 227, 26, 62, 212, 218, 99, 190, 108, 176, 153, 62, 9, 212, 156, 190, 59, 135, 136, 190, 108, 131, 178, 62, 79, 54, 191, 61, 132, 69, 163, 190, 237, 177, 137, 61, 100, 81, 131, 62, 48, 36, 91, 190, 70, 153, 87, 62, 80, 34, 232, 61, 168, 22, 151, 188, 199, 131, 97, 189, 9, 211, 129, 189, 104, 123, 101, 61, 229, 224, 187, 189, 26, 46, 168, 62, 21, 138, 130, 62, 102, 64, 137, 61, 188, 224, 73, 61, 180, 118, 200, 61, 129, 6, 50, 188, 158, 87, 175, 62, 108, 148, 11, 190, 136, 52, 17, 62, 15, 120, 68, 62, 97, 70, 140, 62, 39, 89, 114, 62, 137, 107, 206, 189, 70, 144, 166, 191, 54, 194, 18, 190, 38, 92, 221, 59, 175, 92, 172, 189, 8, 184, 168, 189, 61, 178, 25, 190, 167, 162, 206, 61, 231, 153, 217, 190, 21, 75, 155, 61, 189, 5, 51, 191, 26, 155, 142, 190, 161, 54, 167, 62, 152, 27, 168, 60, 35, 67, 91, 189, 154, 182, 227, 190, 42, 76, 200, 60, 107, 174, 204, 59, 250, 150, 232, 189, 106, 195, 139, 62, 162, 23, 35, 62, 74, 33, 140, 190, 70, 165, 167, 190, 222, 214, 166, 190, 172, 34, 77, 190, 226, 171, 128, 190, 119, 76, 208, 189, 139, 231, 68, 62, 166, 245, 211, 189, 185, 110, 92, 62, 247, 106, 122, 191, 48, 57, 246, 190, 230, 61, 16, 191, 122, 47, 181, 61, 118, 198, 14, 190, 118, 23, 24, 189, 105, 167, 186, 189, 180, 227, 51, 62, 192, 57, 41, 60, 152, 91, 139, 59, 119, 13, 76, 189, 96, 188, 51, 62, 250, 124, 241, 188, 210, 205, 240, 189, 208, 40, 34, 190, 145, 199, 89, 60, 51, 241, 49, 189, 169, 91, 129, 189, 56, 75, 28, 62, 225, 9, 120, 189, 98, 131, 226, 61, 230, 124, 204, 189, 141, 50, 21, 188, 39, 1, 5, 61, 28, 233, 104, 189, 98, 105, 26, 190, 225, 122, 232, 189, 89, 19, 182, 189, 247, 85, 62, 189, 105, 122, 178, 184, 27, 253, 189, 188, 76, 23, 58, 60, 90, 221, 153, 61, 17, 168, 122, 185, 227, 64, 91, 189, 111, 164, 9, 190, 173, 29, 125, 61, 17, 125, 18, 62, 243, 94, 1, 190, 206, 247, 113, 191, 29, 160, 65, 62, 18, 207, 20, 61, 195, 229, 95, 61, 141, 21, 132, 191, 141, 120, 224, 190, 218, 131, 22, 62, 170, 71, 139, 60, 45, 101, 43, 60, 189, 180, 27, 190, 181, 34, 28, 61, 226, 129, 37, 61, 120, 196, 129, 190, 254, 29, 16, 62, 227, 205, 30, 62, 113, 29, 167, 62, 253, 238, 14, 62, 153, 67, 37, 62, 7, 148, 155, 61, 52, 151, 216, 61, 88, 98, 234, 188, 204, 180, 229, 61, 202, 134, 16, 60, 62, 202, 113, 189, 146, 58, 139, 62, 187, 126, 235, 187, 44, 171, 171, 61, 28, 31, 41, 190, 244, 77, 212, 61, 162, 27, 195, 61, 51, 18, 0, 191, 154, 26, 219, 188, 72, 23, 132, 191, 4, 119, 150, 191, 77, 241, 240, 190, 204, 192, 176, 62, 143, 187, 75, 191, 237, 224, 224, 190, 30, 210, 21, 62, 126, 29, 32, 62, 67, 28, 183, 61, 149, 231, 136, 190, 68, 71, 206, 62, 221, 91, 39, 62, 158, 71, 144, 190, 4, 233, 135, 62, 23, 156, 136, 190, 159, 107, 160, 62, 23, 184, 139, 62, 46, 41, 169, 60, 126, 150, 132, 61, 253, 89, 36, 62, 103, 81, 152, 62, 96, 81, 213, 62, 221, 225, 42, 190, 69, 60, 79, 189, 100, 80, 123, 60, 144, 248, 199, 62, 157, 115, 189, 62, 251, 143, 191, 190, 238, 34, 148, 190, 238, 58, 229, 62, 218, 70, 140, 61, 21, 60, 205, 62, 66, 250, 175, 61, 48, 39, 153, 187, 45, 142, 48, 62, 161, 105, 12, 191, 112, 213, 218, 62, 155, 98, 164, 62, 237, 216, 8, 191, 232, 201, 183, 62, 168, 60, 223, 190, 157, 196, 98, 62, 63, 28, 29, 191, 170, 234, 37, 188, 167, 140, 73, 62, 139, 27, 253, 62, 121, 131, 179, 187, 236, 236, 175, 190, 100, 20, 216, 59, 78, 137, 66, 61, 226, 197, 51, 62, 131, 121, 49, 62, 49, 175, 154, 190, 51, 100, 40, 191, 249, 178, 197, 62, 86, 153, 228, 61, 196, 124, 6, 190, 108, 91, 76, 190, 81, 153, 187, 190, 148, 23, 71, 62, 150, 14, 57, 189, 97, 246, 169, 61, 45, 148, 44, 62, 118, 50, 245, 61, 152, 36, 161, 188, 238, 245, 34, 190, 231, 108, 182, 189, 255, 201, 71, 190, 104, 91, 77, 62, 137, 59, 149, 61, 225, 141, 189, 190, 82, 139, 60, 190, 70, 102, 135, 190, 28, 127, 233, 60, 3, 205, 193, 190, 136, 252, 95, 190, 135, 20, 79, 62, 177, 82, 32, 62, 96, 101, 194, 189, 147, 15, 166, 190, 102, 41, 161, 189, 118, 134, 152, 187, 28, 120, 121, 62, 222, 181, 245, 61, 29, 36, 26, 190, 212, 237, 84, 62, 75, 76, 186, 189, 109, 31, 190, 61, 81, 221, 8, 62, 222, 68, 44, 190, 149, 251, 49, 190, 5, 120, 167, 60, 63, 51, 173, 191, 218, 198, 230, 190, 8, 125, 250, 189, 202, 137, 1, 190, 183, 143, 245, 189, 120, 84, 227, 189, 162, 79, 48, 189, 50, 64, 178, 190, 65, 34, 86, 190, 10, 32, 56, 191, 232, 10, 52, 190, 97, 199, 215, 61, 45, 197, 39, 189, 197, 35, 167, 190, 191, 114, 208, 190, 157, 189, 69, 62, 39, 226, 251, 189, 2, 46, 196, 188, 131, 150, 197, 62, 59, 190, 163, 62, 100, 195, 173, 190, 62, 91, 11, 191, 12, 228, 12, 190, 132, 208, 136, 189, 36, 3, 229, 190, 122, 11, 240, 61, 226, 214, 102, 62, 177, 19, 8, 190, 163, 135, 84, 62, 17, 168, 211, 191, 3, 247, 89, 190, 25, 186, 206, 190, 2, 89, 131, 189, 206, 228, 166, 62, 71, 243, 1, 188, 44, 44, 234, 61, 133, 83, 77, 190, 51, 33, 13, 61, 8, 34, 47, 62, 211, 166, 26, 191, 104, 151, 189, 61, 103, 197, 130, 189, 117, 55, 0, 191, 210, 65, 169, 60, 189, 108, 172, 189, 75, 247, 22, 62, 4, 99, 36, 191, 68, 187, 160, 60, 58, 242, 180, 61, 96, 105, 144, 62, 212, 86, 75, 190, 236, 35, 63, 190, 68, 83, 206, 189, 238, 52, 20, 62, 64, 60, 125, 62, 192, 71, 201, 61, 217, 149, 33, 190, 44, 10, 179, 62, 140, 210, 64, 62, 78, 133, 109, 62, 148, 2, 208, 189, 15, 158, 175, 190, 188, 137, 26, 61, 247, 138, 147, 62, 147, 73, 146, 191, 131, 31, 94, 62, 13, 170, 140, 62, 160, 249, 131, 62, 41, 171, 150, 190, 69, 60, 186, 62, 99, 95, 51, 189, 234, 121, 25, 191, 189, 71, 59, 191, 65, 23, 74, 191, 39, 208, 47, 191, 36, 133, 87, 62, 125, 8, 81, 190, 94, 197, 159, 62, 125, 23, 34, 191, 143, 62, 53, 62, 141, 154, 248, 61, 239, 171, 165, 62, 31, 58, 95, 62, 111, 33, 160, 190, 171, 46, 111, 190, 133, 1, 38, 189, 219, 116, 230, 61, 181, 5, 221, 61, 249, 218, 165, 190, 166, 168, 53, 63, 185, 248, 169, 62, 183, 99, 131, 62, 40, 121, 154, 62, 252, 6, 185, 190, 142, 24, 103, 60, 95, 137, 255, 188, 119, 207, 223, 62, 177, 129, 68, 190, 49, 24, 173, 61, 7, 252, 137, 190, 226, 28, 157, 191, 169, 134, 255, 189, 5, 91, 180, 189, 116, 1, 183, 61, 150, 126, 61, 191, 154, 42, 10, 191, 168, 114, 179, 62, 86, 81, 159, 61, 218, 208, 182, 62, 192, 103, 208, 189, 174, 147, 141, 62, 101, 134, 94, 62, 194, 171, 199, 189, 177, 47, 149, 189, 207, 68, 128, 61, 83, 55, 234, 62, 229, 8, 7, 62, 97, 146, 231, 58, 58, 38, 89, 190, 82, 95, 154, 189, 114, 189, 173, 62, 50, 101, 245, 62, 156, 130, 204, 189, 7, 72, 117, 190, 216, 100, 164, 61, 189, 248, 127, 62, 199, 116, 201, 62, 81, 49, 143, 190, 242, 160, 155, 191, 61, 225, 136, 62, 125, 119, 156, 61, 149, 172, 158, 62, 81, 222, 122, 190, 130, 73, 14, 62, 213, 126, 75, 62, 241, 48, 85, 191, 82, 66, 181, 62, 121, 236, 171, 190, 197, 64, 0, 62, 174, 241, 79, 62, 127, 141, 98, 190, 143, 255, 246, 189, 133, 245, 102, 191, 157, 133, 128, 62, 171, 37, 216, 189, 183, 6, 205, 61, 90, 191, 220, 61, 117, 242, 172, 189, 175, 13, 43, 189, 130, 69, 8, 190, 177, 89, 47, 62, 55, 153, 216, 61, 201, 42, 97, 190, 250, 56, 8, 191, 239, 105, 198, 188, 125, 206, 28, 62, 221, 68, 73, 62, 238, 14, 213, 190, 59, 222, 221, 190, 179, 179, 121, 189, 40, 105, 169, 189, 97, 168, 59, 62, 110, 129, 133, 190, 157, 231, 149, 61, 32, 30, 130, 190, 45, 15, 156, 190, 106, 139, 87, 61, 102, 30, 232, 61, 73, 95, 26, 190, 130, 213, 124, 189, 149, 129, 44, 190, 188, 14, 43, 191, 241, 48, 250, 190, 111, 209, 189, 189, 110, 104, 110, 61, 115, 61, 50, 190, 72, 52, 90, 190, 185, 155, 207, 190, 79, 89, 27, 62, 115, 120, 133, 60, 28, 212, 9, 190, 123, 74, 157, 61, 208, 253, 156, 187, 207, 232, 241, 189, 92, 136, 162, 190, 210, 39, 7, 188, 75, 183, 196, 190, 121, 211, 170, 61, 161, 198, 136, 190, 106, 37, 216, 189, 25, 214, 147, 62, 248, 128, 198, 190, 191, 178, 209, 189, 43, 36, 34, 190, 237, 28, 183, 61, 233, 169, 153, 189, 134, 170, 171, 189, 57, 153, 244, 61, 79, 161, 47, 59, 98, 186, 128, 62, 84, 53, 255, 189, 99, 163, 130, 61, 76, 173, 34, 190, 201, 223, 210, 190, 64, 16, 223, 189, 29, 245, 169, 60, 204, 97, 79, 62, 15, 84, 41, 190, 166, 124, 20, 61, 149, 163, 79, 190, 167, 132, 69, 189, 142, 252, 22, 191, 37, 129, 63, 189, 144, 176, 38, 190, 179, 86, 172, 189, 185, 73, 145, 189, 62, 127, 89, 61, 242, 86, 52, 190, 93, 124, 176, 190, 55, 163, 198, 190, 251, 115, 194, 190, 120, 222, 136, 61, 92, 161, 66, 62, 57, 211, 56, 190, 215, 128, 190, 191, 137, 72, 132, 191, 43, 244, 110, 61, 43, 90, 92, 191, 117, 127, 251, 190, 168, 130, 35, 62, 76, 113, 17, 189, 79, 149, 87, 189, 52, 33, 7, 190, 12, 20, 78, 191, 91, 169, 24, 59, 96, 5, 100, 62, 65, 109, 223, 60, 175, 146, 6, 190, 8, 9, 1, 63, 51, 87, 246, 61, 156, 236, 14, 61, 132, 185, 112, 190, 122, 100, 93, 62, 234, 233, 220, 61, 54, 64, 155, 190, 24, 98, 31, 190, 238, 153, 161, 189, 174, 168, 91, 190, 31, 92, 143, 189, 249, 244, 104, 190, 46, 137, 161, 62, 57, 110, 143, 190, 250, 235, 173, 62, 147, 160, 142, 188, 126, 215, 182, 62, 36, 61, 82, 191, 199, 232, 135, 191, 229, 175, 106, 191, 29, 186, 210, 61, 16, 159, 161, 191, 43, 176, 1, 190, 244, 214, 77, 188, 212, 46, 244, 189, 223, 76, 243, 188, 144, 43, 30, 190, 129, 95, 181, 190, 210, 175, 135, 61, 183, 34, 202, 189, 68, 35, 59, 61, 133, 252, 2, 190, 19, 39, 2, 63, 44, 87, 19, 62, 233, 236, 102, 190, 107, 77, 56, 189, 61, 149, 50, 62, 159, 161, 147, 62, 59, 214, 178, 189, 139, 54, 126, 190, 21, 124, 238, 186, 154, 179, 21, 189, 142, 38, 164, 190, 238, 27, 173, 61, 104, 0, 60, 62, 84, 32, 52, 190, 251, 44, 255, 61, 94, 243, 63, 61, 230, 200, 157, 62, 34, 153, 198, 190, 206, 5, 0, 192, 76, 233, 153, 190, 34, 229, 142, 62, 211, 121, 38, 191, 243, 55, 153, 189, 119, 3, 194, 62, 18, 163, 107, 187, 168, 0, 19, 190, 120, 246, 34, 62, 52, 202, 219, 190, 19, 204, 153, 190, 86, 16, 233, 62, 189, 184, 193, 190, 85, 56, 135, 188, 136, 3, 75, 190, 40, 241, 45, 62, 59, 179, 57, 188, 84, 3, 154, 60, 236, 156, 191, 62, 161, 68, 176, 61, 52, 33, 21, 190, 33, 130, 46, 190, 18, 52, 157, 191, 42, 80, 173, 61, 74, 217, 102, 57, 4, 238, 129, 60, 12, 147, 236, 62, 173, 55, 248, 190, 55, 32, 230, 62, 129, 167, 205, 189, 83, 167, 170, 190, 191, 162, 27, 191, 79, 225, 145, 190, 165, 54, 36, 62, 234, 169, 9, 187, 95, 206, 166, 62, 191, 228, 170, 189, 55, 164, 8, 62, 235, 108, 46, 61, 88, 156, 12, 191, 165, 180, 250, 188, 150, 51, 140, 61, 82, 137, 214, 190, 166, 75, 14, 62, 219, 225, 160, 189, 154, 131, 146, 62, 78, 21, 76, 191, 111, 65, 105, 62, 108, 141, 59, 59, 203, 78, 155, 62, 154, 225, 217, 189, 163, 129, 4, 189, 43, 232, 197, 59, 244, 0, 15, 60, 146, 3, 137, 62, 191, 79, 236, 61, 241, 185, 214, 189, 219, 77, 206, 62, 211, 233, 224, 188, 195, 235, 65, 58, 40, 57, 200, 60, 101, 253, 165, 190, 240, 124, 21, 56, 244, 60, 117, 62, 152, 182, 167, 189, 133, 132, 141, 62, 122, 102, 35, 190, 52, 226, 164, 62, 241, 96, 170, 190, 204, 119, 237, 189, 41, 147, 10, 62, 118, 167, 147, 190, 102, 59, 140, 190, 155, 228, 26, 62, 31, 157, 223, 61, 71, 81, 239, 60, 45, 155, 76, 189, 83, 30, 19, 62, 114, 247, 167, 190, 101, 250, 57, 62, 185, 21, 11, 62, 222, 192, 97, 189, 202, 59, 103, 61, 177, 142, 133, 189, 69, 189, 7, 61, 41, 145, 43, 189, 51, 165, 216, 61, 248, 112, 43, 62, 233, 93, 7, 190, 232, 6, 160, 61, 245, 68, 8, 188, 89, 113, 126, 61, 48, 72, 151, 62, 86, 250, 129, 189, 34, 109, 212, 61, 130, 73, 149, 60, 6, 14, 116, 190, 132, 6, 118, 62, 252, 80, 148, 60, 178, 69, 24, 62, 251, 62, 179, 190, 153, 247, 7, 190, 16, 147, 127, 60, 172, 7, 156, 190, 51, 122, 182, 190, 230, 142, 82, 190, 49, 54, 171, 190, 51, 106, 236, 188, 95, 37, 64, 185, 121, 28, 146, 188, 19, 165, 79, 191, 47, 145, 52, 189, 221, 245, 65, 61, 77, 252, 205, 61, 151, 82, 68, 189, 69, 122, 2, 190, 232, 192, 47, 61, 61, 118, 150, 61, 149, 157, 156, 61, 134, 62, 126, 62, 72, 40, 134, 190, 51, 66, 253, 62, 235, 17, 90, 62, 27, 206, 128, 62, 147, 146, 208, 60, 103, 180, 165, 190, 117, 210, 196, 189, 21, 205, 2, 62, 137, 140, 32, 61, 93, 245, 192, 62, 126, 83, 26, 191, 90, 222, 130, 62, 62, 74, 52, 63, 67, 14, 147, 190, 207, 78, 232, 62, 52, 54, 219, 190, 60, 33, 222, 62, 81, 188, 188, 62, 129, 132, 203, 189, 144, 100, 214, 189, 157, 2, 131, 190, 185, 134, 133, 62, 138, 122, 22, 191, 108, 102, 100, 190, 106, 38, 59, 62, 124, 41, 249, 60, 46, 240, 151, 190, 59, 22, 148, 190, 165, 22, 45, 189, 112, 82, 109, 62, 41, 35, 123, 62, 109, 170, 8, 62, 14, 205, 131, 61, 102, 194, 78, 190, 153, 45, 131, 188, 73, 246, 174, 61, 98, 226, 112, 61, 224, 96, 138, 191, 202, 82, 17, 191, 13, 158, 139, 62, 155, 94, 16, 62, 43, 84, 17, 62, 191, 3, 5, 188, 80, 9, 88, 61, 190, 1, 149, 190, 24, 174, 120, 189, 208, 195, 163, 60, 104, 108, 178, 190, 105, 112, 77, 189, 134, 37, 38, 190, 97, 147, 59, 189, 122, 134, 61, 189, 179, 5, 200, 189, 81, 243, 28, 189, 9, 6, 74, 191, 52, 160, 62, 61, 182, 45, 202, 61, 55, 222, 68, 188, 173, 215, 175, 190, 235, 147, 9, 62, 229, 182, 198, 60, 68, 238, 191, 189, 74, 119, 109, 61, 236, 209, 142, 62, 19, 90, 195, 189, 60, 230, 113, 62, 210, 4, 147, 61, 93, 45, 243, 61, 207, 57, 61, 62, 107, 59, 185, 190, 185, 230, 231, 189, 141, 179, 56, 189, 152, 118, 151, 62, 184, 31, 131, 61, 197, 114, 188, 188, 213, 97, 111, 62, 153, 91, 52, 61, 53, 99, 143, 61, 198, 55, 112, 62, 111, 121, 210, 60, 173, 67, 35, 63, 56, 130, 8, 62, 206, 95, 18, 58, 138, 106, 20, 191, 27, 140, 90, 190, 213, 123, 13, 190, 63, 92, 56, 188, 244, 144, 112, 189, 73, 188, 219, 190, 250, 58, 13, 61, 169, 218, 60, 62, 246, 205, 38, 61, 175, 175, 224, 61, 1, 215, 84, 62, 1, 91, 187, 61, 183, 251, 164, 61, 0, 244, 118, 62, 65, 70, 66, 191, 240, 76, 24, 191, 94, 212, 228, 61, 204, 150, 1, 62, 179, 119, 172, 62, 110, 187, 72, 190, 169, 4, 40, 61, 226, 64, 3, 62, 53, 234, 162, 61, 161, 22, 45, 190, 157, 103, 242, 189, 41, 19, 4, 189, 153, 183, 109, 61, 65, 6, 33, 190, 201, 74, 85, 61, 155, 117, 26, 62, 57, 38, 52, 190, 210, 230, 26, 189, 8, 132, 185, 60, 235, 29, 45, 190, 198, 66, 45, 190, 124, 236, 187, 61, 202, 102, 245, 184, 75, 157, 173, 189, 149, 250, 183, 189, 252, 140, 33, 190, 1, 60, 7, 62, 132, 76, 11, 62, 124, 242, 217, 189, 60, 167, 26, 190, 224, 132, 185, 60, 206, 154, 161, 188, 229, 201, 161, 61, 15, 154, 8, 62, 76, 198, 10, 62, 31, 218, 197, 61, 73, 209, 73, 188, 75, 231, 29, 62, 135, 165, 10, 62, 206, 121, 163, 189, 3, 251, 55, 190, 129, 86, 54, 60, 216, 144, 148, 190, 178, 165, 6, 191, 79, 19, 100, 62, 245, 99, 68, 190, 108, 57, 14, 61, 152, 224, 9, 190, 24, 97, 135, 190, 225, 190, 7, 189, 211, 241, 164, 60, 232, 195, 129, 189, 143, 41, 151, 61, 232, 22, 184, 189, 35, 56, 230, 61, 246, 141, 22, 190, 218, 207, 11, 62, 105, 119, 50, 62, 73, 162, 131, 62, 30, 200, 137, 190, 130, 245, 41, 190, 54, 12, 219, 189, 82, 185, 174, 190, 182, 224, 100, 189, 30, 164, 121, 190, 231, 0, 94, 190, 30, 68, 140, 190, 45, 94, 210, 188, 195, 58, 188, 189, 160, 23, 143, 62, 121, 55, 44, 61, 15, 73, 99, 190, 152, 129, 202, 60, 109, 170, 87, 191, 155, 199, 192, 190, 74, 12, 147, 191, 152, 78, 120, 191, 202, 248, 131, 191, 114, 157, 49, 190, 129, 60, 100, 191, 197, 57, 227, 190, 36, 23, 122, 62, 22, 38, 94, 189, 112, 135, 103, 62, 67, 108, 221, 189, 213, 100, 193, 62, 228, 127, 7, 190, 200, 145, 60, 189, 31, 122, 198, 189, 101, 137, 2, 191, 31, 252, 152, 62, 185, 174, 120, 190, 84, 171, 104, 190, 219, 81, 61, 189, 68, 190, 209, 61, 187, 53, 170, 62, 169, 59, 173, 62, 217, 199, 148, 190, 158, 120, 156, 189, 168, 203, 165, 62, 172, 66, 184, 61, 56, 217, 49, 63, 53, 139, 132, 189, 213, 134, 35, 63, 172, 31, 109, 190, 55, 160, 106, 190, 76, 239, 44, 189, 30, 150, 95, 191, 70, 128, 21, 189, 117, 60, 50, 62, 170, 142, 150, 62, 71, 114, 235, 190, 36, 87, 134, 190, 6, 249, 157, 62, 174, 199, 228, 188, 48, 237, 171, 62, 98, 210, 178, 189, 151, 149, 150, 62, 149, 243, 114, 60, 91, 176, 99, 190, 0, 170, 180, 61, 254, 127, 75, 189, 7, 193, 174, 62, 55, 213, 91, 62, 233, 205, 4, 190, 149, 59, 20, 189, 194, 213, 117, 189, 137, 127, 126, 62, 143, 47, 94, 63, 152, 65, 81, 189, 109, 59, 23, 190, 185, 168, 146, 189, 91, 52, 59, 189, 226, 237, 160, 62, 155, 45, 67, 190, 60, 126, 111, 190, 43, 66, 187, 187, 53, 207, 177, 62, 162, 16, 134, 189, 14, 200, 63, 191, 17, 113, 169, 61, 91, 135, 175, 189, 195, 235, 133, 189, 242, 16, 98, 191, 160, 136, 6, 61, 201, 55, 95, 189, 183, 210, 32, 62, 204, 167, 254, 59, 138, 213, 157, 61, 253, 252, 77, 190, 38, 202, 65, 62, 253, 86, 234, 61, 227, 165, 171, 61, 65, 235, 99, 60, 163, 176, 69, 186, 167, 68, 12, 62, 248, 32, 16, 62, 59, 36, 13, 62, 112, 113, 76, 190, 22, 119, 22, 62, 147, 68, 253, 60, 5, 171, 117, 62, 220, 158, 33, 62, 36, 245, 41, 190, 178, 3, 244, 61, 85, 133, 142, 62, 0, 151, 147, 190, 15, 89, 154, 190, 19, 100, 231, 59, 97, 174, 89, 62, 200, 232, 173, 62, 44, 184, 236, 189, 173, 101, 112, 61, 22, 224, 142, 61, 245, 79, 3, 191, 169, 174, 165, 190, 155, 151, 168, 189, 168, 51, 190, 190, 150, 16, 210, 189, 255, 232, 166, 189, 32, 168, 43, 187, 223, 84, 232, 190, 28, 234, 178, 188, 182, 156, 44, 62, 29, 197, 109, 62, 248, 211, 123, 62, 61, 116, 220, 189, 142, 141, 28, 190, 116, 214, 143, 189, 55, 202, 238, 61, 200, 131, 15, 62, 129, 97, 151, 189, 169, 112, 238, 62, 153, 168, 145, 62, 148, 93, 129, 62, 140, 178, 1, 62, 60, 75, 99, 190, 40, 32, 103, 190, 74, 182, 87, 61, 189, 86, 21, 191, 43, 57, 133, 62, 136, 8, 12, 189, 92, 119, 149, 62, 121, 67, 87, 189, 65, 217, 62, 190, 69, 88, 176, 61, 173, 6, 116, 190, 216, 220, 78, 61, 175, 8, 116, 189, 130, 54, 62, 190, 165, 104, 97, 189, 116, 25, 45, 60, 144, 57, 130, 61, 95, 38, 33, 191, 176, 181, 62, 62, 186, 240, 208, 189, 35, 134, 25, 62, 55, 146, 15, 62, 193, 37, 79, 190, 150, 244, 33, 189, 101, 2, 21, 62, 201, 181, 5, 62, 238, 48, 69, 189, 201, 245, 145, 190, 139, 17, 110, 62, 126, 175, 75, 62, 255, 4, 40, 62, 11, 210, 9, 190, 255, 8, 9, 191, 136, 58, 161, 190, 102, 117, 184, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 69, 77, 62, 2, 176, 245, 61, 240, 156, 172, 62, 66, 244, 89, 62, 10, 89, 172, 189, 213, 231, 153, 62, 90, 160, 166, 62, 191, 29, 48, 189, 243, 249, 9, 188, 48, 226, 30, 62, 142, 45, 231, 61, 96, 217, 29, 62, 240, 250, 55, 62, 3, 17, 230, 61, 115, 225, 41, 60, 22, 111, 34, 61, 34, 108, 204, 61, 55, 169, 209, 61, 230, 27, 181, 62, 15, 135, 62, 62, 254, 183, 237, 61, 23, 47, 31, 62, 113, 43, 16, 190, 40, 149, 105, 62, 129, 231, 135, 60, 85, 4, 80, 190, 48, 98, 60, 62, 108, 110, 183, 62, 196, 204, 86, 190, 253, 245, 188, 61, 132, 96, 74, 62, 41, 162, 117, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 206, 10, 191, 6, 115, 79, 191, 72, 218, 138, 62, 155, 18, 163, 191, 23, 117, 99, 61, 6, 64, 2, 62, 187, 64, 68, 63, 202, 153, 22, 191, 139, 174, 11, 188, 211, 150, 208, 191, 232, 242, 146, 190, 67, 130, 221, 190, 139, 200, 238, 62, 180, 78, 139, 191, 78, 174, 169, 62, 152, 126, 27, 62, 167, 65, 38, 191, 85, 160, 221, 190, 220, 59, 206, 191, 156, 106, 127, 190, 207, 180, 211, 60, 141, 66, 193, 189, 190, 79, 90, 63, 198, 36, 174, 188, 113, 68, 69, 62, 99, 213, 93, 189, 49, 192, 153, 189, 255, 105, 150, 63, 69, 136, 124, 62, 125, 188, 227, 61, 117, 146, 82, 190, 249, 27, 177, 190, 193, 13, 80, 189, 120, 69, 132, 62, 181, 32, 197, 190, 62, 118, 110, 190, 52, 135, 25, 190, 251, 69, 58, 190, 97, 88, 110, 61, 3, 117, 43, 190, 246, 176, 128, 190, 32, 87, 235, 189, 136, 255, 140, 190, 5, 119, 234, 189, 170, 37, 9, 62, 110, 187, 248, 62, 217, 86, 121, 62, 125, 45, 138, 190, 35, 158, 91, 190, 132, 151, 34, 189, 233, 231, 154, 62, 38, 15, 35, 190, 102, 132, 101, 190, 80, 141, 192, 190, 64, 68, 152, 62, 47, 9, 141, 190, 128, 17, 115, 189, 122, 220, 230, 59, 50, 242, 242, 189, 238, 64, 170, 60, 207, 101, 177, 62, 129, 210, 43, 190, 166, 173, 129, 190, 29, 31, 133, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 178, 58, 62, 134, 44, 150, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {120, 99, 211, 191, 219, 212, 201, 62, 150, 211, 52, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {220, 90, 217, 63, 212, 17, 145, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0053/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}