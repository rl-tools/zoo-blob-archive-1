// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {116, 205, 11, 191, 77, 149, 182, 63, 4, 55, 231, 62, 254, 245, 49, 63, 174, 169, 200, 62, 48, 61, 28, 62, 234, 31, 143, 190, 195, 189, 62, 191, 200, 107, 9, 191, 82, 172, 50, 63, 171, 164, 90, 63, 72, 93, 19, 62, 13, 25, 38, 63, 70, 98, 20, 63, 57, 20, 118, 62, 164, 22, 234, 190, 232, 57, 6, 191, 219, 122, 219, 190, 44, 87, 134, 62, 172, 39, 23, 63, 127, 10, 224, 190, 19, 127, 34, 63, 118, 242, 158, 191, 23, 61, 209, 190, 61, 185, 39, 63, 179, 15, 195, 62, 241, 85, 131, 62, 249, 83, 16, 62, 254, 100, 161, 62, 247, 57, 213, 62, 43, 32, 22, 190, 193, 41, 219, 190, 123, 178, 56, 63, 44, 184, 223, 61, 73, 151, 70, 191, 75, 142, 193, 62, 53, 148, 170, 60, 87, 199, 216, 190, 67, 119, 28, 63, 176, 200, 39, 63, 29, 181, 178, 62, 117, 175, 15, 63, 238, 76, 0, 63, 159, 26, 160, 191, 202, 215, 137, 190, 55, 40, 123, 190, 52, 170, 149, 190, 210, 49, 233, 190, 61, 191, 178, 62, 120, 140, 193, 61, 92, 96, 16, 63, 255, 107, 90, 63, 162, 203, 34, 191, 5, 229, 199, 62, 102, 77, 150, 189, 150, 127, 122, 191, 44, 64, 253, 190, 197, 93, 156, 62, 197, 88, 87, 191, 31, 59, 202, 62, 179, 126, 174, 62, 12, 89, 128, 61, 133, 166, 7, 191, 146, 166, 225, 62, 63, 80, 14, 62, 252, 75, 217, 190, 131, 120, 36, 63, 18, 200, 160, 61, 71, 122, 82, 60, 186, 104, 45, 61, 254, 151, 8, 63, 58, 132, 99, 60, 36, 171, 254, 189, 39, 214, 64, 190, 91, 14, 139, 190, 98, 162, 43, 190, 37, 210, 39, 63, 250, 213, 53, 62, 201, 32, 68, 62, 177, 210, 4, 191, 236, 109, 0, 63, 30, 140, 41, 63, 189, 114, 230, 62, 20, 94, 118, 188, 21, 177, 67, 191, 131, 18, 160, 62, 139, 243, 102, 189, 165, 228, 26, 189, 113, 79, 133, 191, 247, 187, 15, 191, 162, 41, 30, 63, 171, 119, 156, 191, 128, 225, 65, 190, 30, 210, 1, 63, 3, 120, 22, 63, 192, 177, 246, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {249, 172, 2, 191, 207, 15, 51, 62, 20, 75, 200, 188, 36, 22, 175, 62, 78, 154, 208, 190, 33, 114, 143, 190, 187, 32, 215, 61, 178, 135, 135, 190, 48, 245, 49, 191, 8, 96, 226, 190, 70, 58, 163, 190, 179, 64, 73, 190, 105, 143, 65, 62, 80, 206, 180, 61, 218, 230, 98, 190, 0, 149, 123, 62, 121, 151, 131, 188, 129, 192, 236, 190, 129, 216, 237, 62, 168, 80, 145, 62, 123, 34, 101, 62, 251, 119, 34, 63, 233, 24, 15, 63, 97, 12, 10, 63, 58, 14, 142, 188, 218, 175, 46, 191, 204, 113, 231, 61, 167, 200, 145, 62, 210, 135, 219, 62, 125, 209, 93, 188, 26, 122, 146, 62, 55, 88, 54, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 250, 170, 190, 71, 248, 231, 189, 50, 254, 179, 61, 71, 89, 240, 190, 54, 24, 21, 63, 95, 87, 157, 189, 255, 174, 13, 188, 216, 120, 43, 63, 88, 188, 12, 63, 160, 150, 235, 61, 164, 242, 165, 62, 54, 56, 41, 62, 153, 101, 92, 62, 59, 236, 73, 190, 233, 204, 244, 62, 176, 162, 64, 190, 254, 87, 245, 189, 199, 248, 164, 61, 48, 190, 169, 62, 26, 29, 103, 62, 121, 60, 44, 189, 47, 108, 189, 190, 151, 22, 195, 60, 220, 121, 235, 189, 140, 134, 138, 189, 45, 27, 218, 190, 116, 102, 123, 62, 68, 171, 238, 189, 28, 122, 81, 190, 163, 227, 181, 61, 14, 237, 37, 60, 157, 144, 85, 187, 176, 19, 207, 188, 88, 46, 81, 62, 167, 203, 46, 189, 160, 118, 200, 62, 219, 187, 48, 189, 224, 146, 26, 62, 132, 178, 156, 61, 204, 15, 26, 191, 127, 48, 238, 190, 38, 228, 229, 189, 136, 73, 195, 61, 61, 157, 118, 61, 59, 7, 96, 61, 183, 113, 94, 61, 164, 81, 7, 191, 115, 8, 231, 189, 93, 185, 240, 189, 32, 95, 82, 190, 153, 212, 114, 188, 191, 51, 31, 190, 144, 32, 189, 61, 158, 162, 41, 61, 60, 240, 161, 60, 215, 62, 133, 62, 129, 110, 175, 61, 162, 67, 38, 191, 198, 167, 59, 189, 244, 196, 222, 61, 227, 80, 134, 187, 82, 155, 184, 189, 10, 31, 250, 190, 234, 165, 11, 190, 132, 245, 142, 62, 191, 132, 1, 62, 158, 153, 155, 190, 17, 45, 122, 62, 42, 103, 167, 190, 8, 36, 178, 190, 203, 191, 85, 62, 215, 135, 55, 61, 73, 65, 142, 190, 2, 32, 17, 61, 170, 108, 80, 62, 118, 195, 107, 190, 190, 22, 93, 62, 48, 195, 172, 61, 5, 105, 118, 189, 135, 143, 18, 190, 252, 213, 192, 189, 151, 169, 203, 61, 133, 209, 36, 190, 197, 152, 184, 62, 53, 170, 65, 62, 191, 145, 57, 61, 81, 184, 238, 60, 29, 229, 20, 61, 236, 159, 94, 189, 67, 248, 187, 62, 169, 31, 38, 190, 93, 37, 200, 61, 58, 94, 25, 62, 105, 131, 45, 62, 118, 1, 113, 62, 22, 44, 21, 190, 67, 253, 87, 191, 120, 181, 202, 186, 70, 98, 107, 61, 3, 123, 221, 189, 8, 184, 168, 189, 253, 15, 14, 189, 2, 71, 87, 188, 129, 232, 121, 190, 21, 75, 155, 61, 162, 193, 211, 190, 247, 114, 172, 190, 110, 26, 185, 62, 58, 48, 111, 189, 113, 158, 96, 59, 79, 79, 94, 190, 218, 93, 103, 61, 54, 187, 104, 187, 31, 255, 162, 189, 107, 239, 116, 62, 132, 244, 223, 61, 196, 247, 188, 190, 6, 184, 151, 190, 99, 171, 66, 190, 167, 91, 40, 190, 154, 98, 144, 190, 119, 76, 208, 189, 215, 3, 24, 62, 226, 29, 216, 189, 2, 46, 59, 62, 81, 239, 28, 191, 137, 72, 178, 190, 49, 14, 122, 190, 122, 47, 181, 61, 118, 198, 14, 190, 118, 23, 24, 189, 105, 167, 186, 189, 180, 227, 51, 62, 192, 57, 41, 60, 152, 91, 139, 59, 119, 13, 76, 189, 96, 188, 51, 62, 250, 124, 241, 188, 210, 205, 240, 189, 208, 40, 34, 190, 145, 199, 89, 60, 51, 241, 49, 189, 169, 91, 129, 189, 56, 75, 28, 62, 225, 9, 120, 189, 98, 131, 226, 61, 230, 124, 204, 189, 141, 50, 21, 188, 39, 1, 5, 61, 28, 233, 104, 189, 98, 105, 26, 190, 225, 122, 232, 189, 89, 19, 182, 189, 247, 85, 62, 189, 105, 122, 178, 184, 27, 253, 189, 188, 76, 23, 58, 60, 90, 221, 153, 61, 17, 168, 122, 185, 227, 64, 91, 189, 215, 168, 35, 190, 127, 194, 191, 61, 227, 159, 229, 61, 220, 245, 238, 189, 144, 219, 70, 191, 226, 217, 40, 62, 31, 228, 134, 189, 115, 119, 238, 60, 225, 151, 53, 191, 97, 184, 202, 190, 24, 176, 10, 62, 86, 250, 70, 60, 147, 223, 128, 61, 94, 75, 217, 189, 11, 24, 153, 60, 217, 227, 97, 187, 116, 234, 89, 190, 80, 196, 51, 62, 234, 76, 245, 61, 144, 92, 198, 62, 23, 245, 214, 61, 169, 8, 50, 62, 49, 77, 185, 61, 80, 75, 192, 61, 125, 193, 242, 188, 66, 216, 129, 190, 208, 203, 9, 61, 93, 33, 129, 189, 200, 1, 116, 62, 169, 17, 127, 189, 150, 216, 197, 61, 37, 99, 228, 189, 32, 247, 52, 62, 208, 243, 147, 61, 16, 196, 200, 190, 218, 211, 79, 189, 88, 141, 99, 191, 216, 227, 136, 191, 217, 1, 33, 191, 13, 175, 193, 62, 11, 107, 252, 190, 143, 137, 200, 190, 241, 21, 0, 62, 91, 220, 15, 62, 105, 254, 27, 62, 101, 50, 122, 190, 238, 246, 214, 62, 161, 200, 103, 62, 215, 179, 122, 190, 183, 107, 146, 62, 173, 148, 129, 190, 51, 132, 183, 62, 119, 234, 88, 62, 58, 71, 0, 60, 232, 219, 25, 61, 30, 31, 26, 62, 163, 160, 207, 62, 161, 188, 158, 62, 44, 38, 20, 190, 57, 22, 183, 189, 119, 180, 26, 62, 75, 112, 214, 62, 189, 149, 186, 62, 236, 136, 165, 190, 88, 87, 109, 190, 171, 100, 219, 62, 142, 154, 13, 62, 69, 151, 197, 62, 136, 125, 212, 61, 79, 244, 211, 61, 50, 171, 65, 62, 28, 22, 5, 191, 97, 230, 202, 62, 133, 146, 176, 62, 208, 5, 245, 190, 231, 166, 182, 62, 53, 236, 224, 190, 235, 145, 123, 62, 17, 82, 15, 191, 250, 122, 198, 187, 169, 24, 109, 62, 152, 215, 217, 62, 249, 21, 11, 61, 50, 163, 188, 190, 38, 225, 60, 188, 178, 192, 76, 188, 84, 72, 38, 62, 117, 144, 41, 62, 57, 233, 163, 190, 47, 1, 49, 191, 2, 148, 211, 62, 40, 38, 165, 61, 227, 196, 129, 60, 162, 121, 162, 189, 64, 179, 190, 190, 47, 130, 107, 62, 33, 93, 52, 190, 218, 4, 14, 62, 3, 124, 123, 62, 231, 160, 18, 62, 160, 17, 226, 56, 170, 64, 148, 189, 161, 56, 35, 61, 102, 112, 163, 60, 114, 20, 77, 62, 252, 118, 27, 62, 191, 227, 128, 190, 136, 144, 220, 189, 93, 232, 97, 190, 58, 195, 163, 61, 216, 44, 50, 190, 157, 14, 7, 190, 217, 105, 134, 62, 74, 244, 33, 62, 63, 66, 162, 61, 254, 248, 139, 190, 175, 233, 123, 61, 36, 78, 182, 61, 118, 119, 171, 62, 172, 111, 225, 61, 254, 18, 196, 189, 33, 146, 83, 189, 190, 9, 118, 187, 68, 206, 35, 62, 118, 119, 226, 60, 208, 208, 242, 188, 251, 46, 176, 189, 55, 150, 233, 60, 2, 63, 121, 191, 106, 177, 156, 190, 245, 140, 64, 189, 222, 255, 65, 190, 151, 116, 85, 189, 50, 3, 9, 61, 207, 141, 92, 190, 207, 250, 142, 190, 150, 5, 43, 190, 141, 44, 7, 191, 13, 177, 62, 190, 99, 51, 51, 62, 121, 210, 129, 189, 192, 240, 84, 190, 124, 200, 103, 190, 182, 156, 78, 62, 201, 88, 162, 189, 109, 64, 213, 61, 245, 53, 180, 62, 210, 52, 166, 62, 178, 242, 235, 190, 151, 169, 17, 191, 148, 133, 243, 60, 26, 11, 159, 189, 48, 91, 1, 191, 122, 11, 240, 61, 168, 53, 111, 62, 48, 63, 46, 190, 18, 121, 9, 62, 64, 236, 166, 191, 191, 25, 135, 189, 144, 230, 20, 190, 13, 204, 90, 189, 196, 112, 149, 62, 183, 138, 140, 61, 243, 87, 144, 61, 200, 80, 49, 190, 152, 138, 32, 62, 216, 58, 81, 62, 171, 221, 7, 191, 224, 81, 35, 62, 178, 188, 149, 188, 164, 118, 219, 190, 202, 183, 197, 189, 138, 101, 55, 190, 233, 40, 9, 62, 197, 37, 16, 191, 120, 166, 84, 61, 164, 34, 148, 61, 127, 24, 11, 62, 72, 248, 232, 189, 157, 210, 142, 190, 133, 122, 189, 189, 196, 202, 230, 61, 0, 72, 95, 62, 191, 89, 116, 61, 172, 77, 37, 190, 162, 228, 229, 61, 24, 63, 14, 62, 211, 91, 79, 62, 181, 26, 28, 189, 204, 143, 69, 190, 99, 80, 222, 187, 105, 34, 148, 62, 89, 193, 59, 191, 222, 1, 63, 62, 74, 108, 149, 62, 217, 15, 128, 62, 116, 66, 105, 190, 125, 130, 200, 62, 51, 74, 97, 61, 196, 149, 15, 191, 13, 57, 218, 190, 176, 90, 138, 190, 131, 160, 20, 191, 181, 172, 164, 61, 116, 3, 212, 190, 71, 43, 152, 62, 203, 230, 31, 191, 167, 156, 74, 62, 218, 74, 194, 61, 210, 31, 113, 62, 8, 232, 123, 62, 194, 166, 221, 190, 37, 94, 74, 190, 194, 139, 40, 189, 202, 46, 200, 61, 82, 95, 6, 62, 49, 202, 173, 190, 115, 148, 214, 62, 2, 35, 109, 62, 228, 36, 140, 62, 220, 213, 134, 62, 74, 139, 155, 190, 9, 118, 38, 189, 214, 89, 14, 187, 81, 95, 220, 62, 239, 168, 204, 189, 110, 14, 220, 60, 44, 25, 97, 190, 214, 169, 135, 191, 166, 106, 113, 190, 148, 210, 41, 190, 179, 151, 31, 61, 41, 192, 22, 191, 193, 22, 251, 190, 16, 149, 170, 62, 115, 246, 47, 188, 225, 28, 166, 62, 238, 138, 15, 190, 226, 69, 88, 62, 176, 82, 23, 62, 53, 221, 18, 190, 174, 252, 9, 190, 49, 117, 165, 61, 248, 109, 218, 62, 36, 15, 220, 61, 39, 27, 15, 61, 150, 103, 86, 190, 52, 124, 90, 189, 133, 21, 151, 62, 185, 182, 52, 62, 199, 134, 31, 190, 143, 244, 53, 190, 135, 75, 188, 61, 28, 201, 80, 62, 166, 67, 160, 62, 64, 87, 149, 190, 35, 72, 107, 191, 3, 114, 64, 62, 117, 200, 251, 61, 23, 246, 102, 62, 43, 137, 173, 190, 241, 111, 75, 62, 103, 159, 37, 62, 162, 113, 253, 190, 151, 37, 93, 189, 155, 250, 76, 190, 151, 81, 241, 189, 156, 122, 157, 61, 127, 8, 223, 190, 203, 65, 232, 189, 145, 254, 238, 190, 24, 37, 120, 62, 90, 129, 54, 190, 207, 115, 41, 62, 254, 123, 104, 62, 50, 68, 20, 59, 30, 184, 161, 189, 204, 174, 27, 190, 165, 79, 50, 62, 67, 109, 147, 61, 57, 189, 130, 190, 89, 27, 62, 190, 139, 142, 10, 190, 201, 204, 0, 62, 95, 52, 122, 62, 180, 239, 159, 190, 77, 208, 132, 190, 60, 52, 2, 190, 2, 142, 191, 61, 224, 112, 189, 61, 23, 113, 236, 187, 228, 175, 226, 60, 124, 94, 33, 190, 210, 171, 197, 189, 153, 177, 196, 61, 169, 8, 165, 189, 113, 78, 11, 190, 17, 116, 149, 188, 154, 208, 207, 189, 175, 114, 171, 189, 190, 147, 13, 189, 200, 38, 134, 189, 236, 158, 52, 190, 74, 228, 3, 190, 69, 167, 19, 62, 35, 229, 43, 190, 119, 136, 190, 61, 92, 42, 176, 61, 88, 183, 11, 190, 52, 236, 119, 61, 199, 77, 17, 190, 155, 14, 243, 188, 28, 154, 197, 188, 167, 108, 242, 61, 96, 66, 185, 60, 127, 196, 130, 59, 253, 111, 138, 189, 86, 120, 72, 188, 72, 57, 167, 61, 204, 142, 51, 190, 191, 178, 209, 189, 54, 146, 66, 60, 178, 77, 64, 61, 197, 110, 195, 61, 18, 8, 84, 189, 71, 97, 196, 61, 139, 244, 71, 188, 74, 36, 19, 62, 84, 53, 255, 189, 99, 163, 130, 61, 29, 77, 194, 189, 176, 125, 14, 190, 224, 71, 220, 61, 40, 139, 151, 61, 66, 210, 203, 61, 96, 204, 64, 190, 14, 57, 184, 61, 198, 3, 244, 188, 64, 193, 200, 189, 248, 180, 1, 190, 135, 139, 175, 189, 119, 162, 68, 190, 174, 131, 48, 190, 236, 203, 200, 61, 15, 178, 237, 60, 242, 86, 52, 190, 178, 0, 194, 189, 31, 149, 228, 189, 48, 243, 26, 190, 219, 230, 201, 59, 71, 128, 211, 61, 85, 55, 16, 190, 168, 240, 156, 191, 47, 94, 47, 191, 41, 129, 164, 61, 255, 99, 126, 190, 245, 94, 187, 190, 255, 37, 121, 62, 200, 43, 17, 62, 221, 14, 13, 190, 79, 210, 2, 190, 160, 46, 212, 190, 250, 119, 7, 189, 8, 74, 112, 62, 123, 205, 241, 188, 8, 205, 174, 61, 181, 115, 180, 62, 149, 44, 52, 62, 16, 82, 207, 61, 3, 230, 137, 190, 52, 142, 37, 62, 0, 204, 146, 189, 246, 217, 80, 190, 245, 15, 153, 189, 185, 152, 7, 190, 223, 39, 92, 189, 31, 216, 53, 188, 249, 244, 104, 190, 225, 64, 142, 62, 29, 67, 8, 190, 41, 228, 148, 62, 33, 212, 44, 189, 31, 211, 242, 61, 183, 103, 148, 190, 102, 165, 69, 191, 175, 203, 221, 190, 215, 7, 239, 61, 67, 32, 242, 190, 18, 209, 143, 61, 226, 179, 127, 61, 248, 50, 58, 61, 145, 162, 237, 189, 127, 201, 195, 189, 129, 145, 248, 189, 252, 137, 11, 61, 225, 33, 224, 189, 83, 81, 255, 59, 5, 19, 144, 61, 127, 105, 189, 62, 131, 191, 63, 62, 197, 87, 55, 190, 166, 116, 104, 189, 67, 60, 251, 61, 127, 153, 17, 62, 167, 89, 6, 187, 206, 103, 53, 190, 239, 202, 35, 188, 130, 78, 24, 62, 216, 233, 141, 190, 238, 27, 173, 61, 51, 127, 30, 62, 235, 220, 250, 59, 105, 228, 164, 61, 66, 43, 164, 60, 102, 23, 226, 61, 111, 177, 164, 189, 74, 60, 211, 191, 189, 211, 145, 190, 77, 102, 74, 62, 216, 115, 0, 191, 243, 55, 153, 189, 201, 229, 151, 62, 179, 0, 183, 60, 235, 5, 207, 189, 120, 246, 34, 62, 57, 191, 100, 190, 64, 107, 196, 190, 102, 160, 6, 63, 230, 96, 197, 190, 138, 13, 160, 189, 182, 42, 33, 190, 248, 22, 211, 61, 237, 47, 225, 189, 94, 239, 25, 190, 105, 123, 148, 62, 161, 38, 62, 62, 30, 25, 41, 190, 12, 223, 59, 190, 22, 130, 53, 191, 208, 137, 202, 61, 205, 14, 182, 189, 141, 107, 222, 60, 248, 189, 241, 62, 76, 18, 186, 190, 132, 88, 122, 62, 108, 217, 36, 190, 230, 162, 153, 190, 100, 12, 217, 190, 43, 124, 177, 190, 245, 124, 2, 62, 207, 239, 122, 61, 84, 133, 140, 62, 245, 209, 40, 189, 143, 186, 106, 62, 173, 171, 34, 61, 49, 176, 3, 191, 167, 183, 173, 61, 120, 138, 164, 61, 95, 236, 176, 190, 42, 216, 204, 61, 44, 190, 52, 190, 98, 115, 141, 62, 4, 226, 60, 191, 22, 229, 130, 62, 233, 119, 55, 188, 60, 2, 111, 62, 166, 30, 8, 189, 93, 104, 198, 189, 79, 20, 166, 188, 32, 2, 24, 189, 84, 250, 120, 62, 147, 11, 130, 61, 4, 42, 248, 189, 115, 218, 63, 61, 14, 239, 133, 189, 121, 43, 14, 189, 45, 7, 151, 61, 202, 252, 84, 190, 122, 199, 4, 189, 250, 244, 116, 62, 48, 180, 66, 190, 206, 144, 154, 62, 7, 208, 24, 190, 78, 64, 158, 62, 163, 9, 165, 190, 246, 206, 211, 60, 74, 107, 67, 61, 82, 209, 130, 190, 26, 144, 102, 190, 248, 96, 2, 62, 41, 86, 127, 61, 124, 167, 6, 60, 34, 152, 79, 189, 49, 255, 46, 62, 157, 192, 143, 190, 67, 105, 53, 62, 253, 212, 10, 62, 242, 193, 18, 59, 9, 18, 33, 61, 61, 83, 8, 189, 168, 92, 193, 60, 145, 73, 172, 188, 69, 232, 5, 62, 232, 92, 240, 61, 105, 71, 164, 189, 84, 75, 134, 60, 204, 117, 202, 188, 140, 67, 3, 61, 54, 234, 110, 62, 178, 122, 237, 189, 76, 13, 26, 62, 178, 25, 89, 59, 105, 141, 171, 190, 16, 36, 99, 62, 208, 131, 199, 61, 31, 237, 192, 61, 49, 135, 119, 190, 115, 128, 15, 61, 249, 1, 77, 60, 45, 168, 93, 190, 168, 125, 134, 189, 145, 90, 5, 188, 130, 239, 92, 190, 69, 29, 134, 189, 93, 2, 185, 189, 254, 199, 112, 60, 194, 73, 51, 191, 76, 177, 53, 59, 226, 100, 175, 61, 139, 38, 77, 61, 238, 146, 117, 61, 222, 126, 50, 190, 43, 78, 47, 61, 128, 178, 60, 61, 13, 227, 95, 61, 88, 137, 51, 62, 155, 62, 130, 190, 21, 174, 231, 61, 104, 158, 76, 62, 197, 65, 92, 62, 214, 197, 70, 189, 115, 38, 49, 190, 41, 149, 239, 189, 60, 80, 37, 62, 60, 157, 234, 58, 11, 65, 151, 62, 172, 85, 192, 190, 83, 70, 37, 62, 165, 207, 15, 63, 138, 155, 58, 190, 76, 245, 166, 62, 111, 201, 179, 190, 100, 235, 153, 62, 183, 57, 120, 62, 58, 252, 87, 190, 75, 237, 51, 60, 22, 119, 114, 190, 7, 94, 70, 62, 72, 150, 248, 190, 165, 180, 253, 189, 15, 191, 255, 61, 50, 96, 60, 62, 191, 4, 153, 190, 245, 167, 104, 190, 207, 201, 202, 189, 174, 62, 59, 62, 172, 161, 57, 62, 77, 242, 37, 61, 229, 100, 80, 62, 22, 2, 200, 188, 46, 50, 173, 188, 20, 122, 17, 60, 182, 84, 205, 189, 79, 114, 26, 191, 212, 127, 245, 190, 72, 173, 55, 62, 246, 142, 197, 60, 21, 58, 74, 62, 77, 90, 127, 61, 59, 71, 100, 61, 22, 124, 143, 190, 56, 199, 8, 62, 172, 124, 72, 184, 181, 13, 80, 190, 69, 227, 188, 60, 224, 223, 35, 190, 217, 71, 16, 189, 19, 173, 93, 188, 29, 190, 154, 189, 106, 35, 222, 60, 94, 244, 20, 191, 243, 80, 248, 61, 73, 89, 14, 62, 6, 189, 54, 61, 166, 86, 80, 190, 234, 38, 88, 62, 170, 216, 158, 61, 41, 156, 46, 189, 182, 125, 23, 62, 96, 57, 117, 62, 166, 58, 255, 188, 86, 31, 4, 62, 108, 114, 218, 61, 71, 73, 222, 61, 33, 159, 59, 62, 193, 114, 145, 190, 236, 199, 36, 61, 254, 32, 39, 189, 1, 145, 220, 61, 211, 205, 127, 61, 142, 102, 145, 189, 216, 226, 82, 62, 96, 207, 75, 189, 10, 48, 177, 187, 240, 28, 207, 61, 76, 185, 71, 188, 147, 84, 110, 189, 187, 225, 147, 190, 164, 221, 249, 189, 122, 80, 62, 188, 90, 89, 130, 61, 213, 151, 222, 189, 232, 40, 29, 188, 230, 61, 239, 189, 162, 142, 177, 190, 121, 13, 93, 62, 59, 17, 18, 62, 236, 70, 96, 62, 64, 165, 74, 61, 147, 175, 66, 62, 167, 8, 210, 61, 250, 227, 0, 61, 57, 143, 97, 62, 149, 26, 125, 190, 32, 104, 207, 190, 196, 164, 159, 61, 226, 189, 60, 62, 192, 36, 135, 62, 139, 8, 10, 190, 47, 194, 207, 60, 226, 64, 3, 62, 53, 234, 162, 61, 161, 22, 45, 190, 157, 103, 242, 189, 41, 19, 4, 189, 153, 183, 109, 61, 65, 6, 33, 190, 201, 74, 85, 61, 155, 117, 26, 62, 57, 38, 52, 190, 210, 230, 26, 189, 8, 132, 185, 60, 235, 29, 45, 190, 198, 66, 45, 190, 124, 236, 187, 61, 202, 102, 245, 184, 75, 157, 173, 189, 149, 250, 183, 189, 252, 140, 33, 190, 1, 60, 7, 62, 132, 76, 11, 62, 124, 242, 217, 189, 60, 167, 26, 190, 224, 132, 185, 60, 206, 154, 161, 188, 229, 201, 161, 61, 15, 154, 8, 62, 76, 198, 10, 62, 31, 218, 197, 61, 73, 209, 73, 188, 75, 231, 29, 62, 135, 165, 10, 62, 9, 134, 198, 60, 66, 31, 144, 188, 28, 182, 147, 188, 193, 11, 7, 190, 128, 8, 168, 190, 110, 154, 122, 62, 215, 151, 68, 188, 189, 104, 44, 189, 154, 118, 66, 61, 233, 29, 80, 190, 16, 113, 82, 59, 90, 148, 75, 61, 46, 228, 51, 189, 192, 59, 50, 62, 28, 144, 81, 190, 200, 12, 236, 61, 0, 67, 149, 189, 120, 157, 102, 62, 254, 133, 216, 61, 15, 103, 146, 62, 129, 66, 41, 190, 205, 243, 105, 189, 135, 122, 162, 59, 23, 234, 28, 190, 155, 43, 13, 189, 2, 34, 16, 190, 13, 219, 61, 190, 77, 99, 29, 190, 147, 187, 192, 188, 184, 241, 30, 190, 128, 16, 73, 62, 143, 153, 12, 62, 56, 54, 81, 188, 212, 77, 38, 61, 119, 80, 69, 191, 8, 84, 150, 190, 181, 20, 86, 191, 70, 107, 148, 191, 197, 150, 98, 191, 111, 241, 193, 188, 133, 153, 21, 191, 15, 145, 170, 190, 230, 178, 139, 62, 123, 217, 214, 189, 220, 53, 112, 62, 9, 82, 213, 189, 139, 29, 133, 62, 253, 119, 172, 189, 246, 133, 26, 189, 45, 234, 16, 190, 23, 225, 241, 190, 55, 206, 138, 62, 134, 31, 48, 190, 240, 201, 175, 188, 41, 209, 6, 190, 88, 35, 165, 62, 25, 23, 65, 62, 14, 11, 184, 62, 85, 21, 156, 190, 127, 84, 104, 189, 109, 38, 194, 62, 150, 36, 161, 61, 231, 176, 2, 63, 17, 222, 12, 188, 58, 91, 4, 63, 174, 249, 251, 189, 226, 52, 102, 190, 36, 5, 17, 61, 105, 192, 70, 191, 242, 220, 238, 189, 98, 193, 177, 61, 63, 90, 83, 62, 153, 144, 190, 190, 172, 73, 147, 190, 198, 167, 120, 62, 100, 168, 243, 189, 99, 100, 145, 62, 222, 222, 40, 190, 11, 20, 75, 62, 146, 140, 37, 59, 250, 136, 158, 190, 81, 53, 41, 61, 231, 50, 190, 60, 149, 27, 146, 62, 62, 74, 49, 62, 117, 223, 176, 189, 217, 96, 53, 188, 202, 116, 167, 60, 19, 183, 111, 62, 87, 187, 226, 62, 243, 73, 14, 190, 124, 118, 87, 189, 169, 115, 158, 61, 189, 126, 120, 189, 30, 231, 141, 62, 97, 101, 109, 190, 141, 70, 69, 190, 2, 227, 49, 61, 243, 135, 153, 62, 22, 100, 228, 188, 72, 145, 21, 191, 48, 94, 72, 61, 121, 7, 54, 190, 45, 89, 174, 189, 113, 65, 26, 191, 160, 38, 19, 187, 26, 234, 17, 190, 190, 197, 209, 61, 205, 112, 93, 187, 34, 12, 207, 61, 63, 31, 92, 190, 117, 96, 19, 62, 126, 114, 216, 61, 115, 197, 182, 61, 13, 218, 4, 189, 142, 246, 152, 60, 18, 216, 223, 61, 180, 182, 42, 62, 127, 234, 41, 62, 38, 91, 37, 190, 52, 86, 13, 62, 163, 83, 160, 61, 154, 116, 80, 62, 22, 37, 51, 62, 23, 21, 77, 190, 166, 36, 137, 61, 240, 66, 152, 62, 220, 246, 132, 190, 137, 47, 187, 190, 112, 200, 170, 188, 164, 110, 119, 62, 137, 62, 153, 62, 195, 173, 242, 188, 208, 248, 220, 61, 125, 42, 213, 61, 222, 108, 237, 190, 71, 95, 76, 189, 104, 30, 91, 60, 163, 219, 126, 190, 15, 1, 195, 189, 193, 62, 58, 190, 117, 36, 218, 59, 81, 50, 203, 190, 27, 184, 7, 188, 21, 175, 60, 62, 161, 228, 84, 62, 208, 32, 148, 62, 138, 41, 40, 190, 183, 172, 25, 190, 252, 171, 194, 189, 0, 236, 209, 61, 118, 173, 174, 61, 236, 152, 207, 189, 88, 51, 202, 61, 127, 94, 133, 62, 25, 86, 114, 62, 56, 24, 253, 60, 242, 110, 16, 190, 165, 25, 132, 190, 22, 40, 164, 61, 71, 116, 241, 190, 176, 240, 122, 62, 68, 63, 41, 61, 131, 31, 135, 62, 27, 14, 201, 187, 153, 58, 183, 189, 160, 97, 223, 61, 83, 220, 92, 190, 203, 62, 250, 61, 19, 240, 12, 61, 172, 117, 141, 189, 22, 44, 116, 189, 137, 79, 17, 189, 16, 100, 177, 61, 82, 255, 22, 191, 194, 247, 79, 62, 6, 209, 119, 189, 12, 136, 202, 61, 98, 147, 48, 62, 68, 123, 129, 190, 6, 86, 102, 189, 189, 56, 207, 61, 66, 6, 223, 61, 35, 252, 135, 189, 139, 176, 152, 190, 118, 49, 220, 61, 11, 18, 85, 62, 70, 214, 13, 62, 70, 190, 112, 189, 234, 51, 193, 190, 90, 13, 176, 190, 53, 134, 21, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 138, 46, 62, 37, 226, 164, 60, 223, 234, 157, 62, 79, 198, 76, 62, 10, 89, 172, 189, 90, 163, 160, 62, 127, 247, 166, 62, 49, 73, 52, 189, 46, 170, 65, 61, 76, 182, 2, 62, 9, 237, 153, 61, 153, 57, 233, 61, 125, 41, 106, 62, 50, 51, 235, 61, 19, 205, 8, 189, 145, 24, 96, 61, 212, 147, 162, 188, 163, 173, 132, 59, 135, 233, 128, 62, 184, 43, 36, 62, 83, 87, 218, 61, 198, 63, 235, 61, 201, 135, 77, 190, 43, 137, 142, 62, 27, 33, 130, 61, 85, 4, 80, 190, 118, 193, 43, 62, 9, 163, 156, 62, 66, 118, 142, 189, 108, 124, 222, 61, 101, 224, 23, 62, 87, 4, 86, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {15, 60, 6, 191, 51, 43, 135, 190, 255, 254, 152, 62, 91, 130, 92, 191, 23, 117, 99, 61, 154, 143, 29, 62, 0, 6, 90, 63, 144, 223, 42, 191, 164, 221, 3, 190, 73, 177, 162, 191, 17, 103, 149, 190, 139, 117, 243, 190, 138, 210, 213, 62, 20, 245, 38, 191, 137, 83, 149, 189, 238, 184, 130, 61, 117, 211, 247, 190, 155, 248, 88, 190, 220, 163, 153, 191, 176, 181, 149, 190, 148, 114, 68, 61, 31, 154, 11, 190, 92, 39, 26, 63, 239, 102, 144, 60, 43, 121, 37, 62, 99, 213, 93, 189, 111, 194, 180, 187, 148, 120, 103, 63, 57, 242, 216, 61, 11, 183, 20, 62, 112, 55, 192, 190, 144, 24, 206, 190, 248, 255, 26, 61, 151, 93, 214, 62, 230, 21, 151, 190, 33, 12, 32, 189, 52, 135, 25, 190, 168, 86, 84, 190, 150, 196, 117, 61, 150, 51, 3, 189, 29, 239, 178, 189, 59, 50, 206, 61, 253, 254, 224, 189, 112, 133, 174, 189, 18, 193, 56, 62, 196, 168, 80, 62, 114, 35, 15, 62, 42, 93, 38, 61, 195, 64, 47, 190, 3, 79, 147, 187, 158, 140, 200, 61, 247, 107, 201, 189, 133, 114, 56, 190, 232, 111, 77, 190, 142, 241, 221, 62, 78, 224, 123, 190, 114, 250, 1, 189, 122, 220, 230, 59, 230, 72, 238, 189, 80, 83, 159, 189, 100, 192, 142, 62, 38, 90, 87, 190, 63, 205, 243, 189, 3, 42, 36, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 173, 36, 62, 104, 46, 46, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {11, 23, 121, 62, 3, 97, 13, 192, 129, 171, 84, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {5, 21, 8, 64, 0, 176, 115, 186};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0053/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}