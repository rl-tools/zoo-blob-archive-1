// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {7, 57, 227, 190, 94, 191, 224, 62, 230, 105, 96, 62, 148, 172, 249, 62, 132, 70, 121, 62, 27, 102, 56, 62, 14, 98, 21, 190, 224, 203, 108, 62, 9, 39, 247, 190, 233, 115, 1, 63, 192, 233, 11, 63, 253, 130, 43, 62, 209, 37, 34, 188, 78, 60, 111, 62, 119, 21, 227, 61, 23, 97, 238, 190, 51, 204, 1, 63, 13, 253, 144, 190, 18, 163, 169, 189, 7, 81, 75, 63, 219, 158, 152, 190, 54, 176, 11, 63, 230, 131, 16, 191, 171, 253, 199, 190, 116, 220, 215, 61, 246, 32, 138, 62, 194, 114, 165, 62, 49, 166, 152, 62, 20, 243, 35, 61, 139, 227, 184, 62, 7, 8, 225, 190, 95, 251, 113, 191, 43, 94, 134, 62, 39, 191, 31, 63, 61, 17, 11, 191, 153, 59, 115, 62, 211, 104, 150, 61, 172, 85, 41, 191, 136, 39, 176, 62, 208, 159, 2, 63, 111, 189, 59, 62, 172, 95, 243, 62, 153, 207, 91, 62, 123, 135, 22, 191, 245, 137, 149, 190, 142, 147, 134, 190, 22, 117, 210, 62, 188, 78, 187, 190, 36, 106, 126, 62, 232, 47, 118, 187, 199, 39, 250, 62, 95, 201, 30, 63, 152, 121, 14, 191, 82, 234, 71, 62, 158, 69, 28, 190, 75, 37, 225, 60, 86, 139, 226, 190, 204, 120, 127, 62, 111, 49, 101, 191, 219, 79, 73, 62, 153, 45, 3, 63, 212, 74, 124, 62, 84, 241, 222, 190, 58, 204, 39, 63, 249, 83, 88, 62, 10, 140, 195, 190, 44, 56, 22, 63, 215, 135, 51, 62, 243, 43, 180, 61, 209, 25, 171, 61, 225, 200, 31, 63, 218, 36, 25, 62, 184, 231, 139, 61, 190, 18, 218, 61, 40, 146, 67, 190, 10, 246, 61, 190, 190, 176, 25, 62, 177, 0, 19, 62, 151, 157, 205, 62, 24, 151, 141, 190, 254, 163, 178, 62, 34, 203, 23, 63, 92, 128, 93, 62, 77, 188, 202, 188, 2, 188, 4, 191, 56, 251, 219, 62, 3, 94, 39, 189, 177, 21, 133, 62, 157, 94, 133, 61, 17, 25, 252, 190, 225, 199, 18, 63, 250, 104, 63, 191, 192, 83, 60, 190, 176, 199, 152, 61, 254, 162, 207, 62, 130, 197, 8, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 135, 38, 191, 160, 26, 157, 62, 245, 105, 162, 62, 213, 14, 209, 62, 218, 10, 193, 190, 191, 95, 175, 189, 72, 23, 132, 62, 31, 155, 204, 189, 112, 72, 155, 190, 234, 218, 175, 190, 210, 129, 49, 190, 21, 222, 144, 190, 158, 40, 166, 62, 153, 5, 67, 62, 78, 237, 68, 190, 41, 212, 192, 62, 234, 122, 79, 190, 4, 3, 206, 190, 138, 188, 17, 63, 145, 41, 237, 62, 93, 181, 47, 62, 79, 190, 242, 62, 31, 204, 5, 63, 255, 55, 36, 63, 32, 130, 136, 190, 137, 116, 32, 191, 176, 70, 47, 190, 4, 148, 175, 62, 39, 211, 30, 63, 157, 107, 111, 189, 3, 159, 240, 62, 209, 201, 123, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {96, 10, 9, 190, 11, 144, 187, 61, 175, 24, 234, 189, 237, 175, 51, 190, 226, 225, 204, 61, 25, 75, 245, 61, 109, 207, 26, 62, 158, 238, 19, 62, 182, 160, 11, 62, 226, 132, 22, 61, 21, 138, 171, 60, 65, 27, 182, 61, 121, 20, 202, 187, 206, 97, 84, 190, 181, 203, 67, 190, 109, 86, 26, 190, 225, 56, 67, 190, 212, 206, 92, 60, 92, 183, 182, 188, 149, 182, 224, 187, 42, 78, 110, 189, 219, 225, 56, 190, 72, 244, 178, 61, 106, 185, 146, 61, 203, 186, 207, 61, 142, 93, 206, 189, 70, 240, 1, 62, 5, 229, 163, 61, 8, 106, 27, 190, 218, 164, 55, 60, 174, 150, 170, 189, 81, 170, 158, 189, 216, 156, 145, 190, 126, 93, 196, 61, 185, 240, 243, 60, 210, 8, 127, 189, 57, 29, 58, 190, 33, 46, 30, 62, 78, 158, 169, 189, 117, 136, 60, 190, 227, 3, 69, 190, 38, 200, 197, 61, 181, 75, 23, 62, 130, 239, 186, 61, 60, 221, 181, 61, 46, 142, 218, 60, 56, 15, 156, 189, 96, 81, 4, 188, 65, 236, 225, 189, 140, 246, 194, 60, 184, 24, 50, 62, 209, 193, 139, 189, 191, 17, 3, 61, 37, 99, 235, 189, 0, 202, 41, 190, 170, 162, 82, 61, 50, 88, 136, 61, 168, 2, 40, 190, 96, 120, 244, 54, 24, 204, 48, 189, 186, 144, 249, 60, 239, 221, 138, 189, 82, 30, 39, 190, 23, 193, 77, 190, 181, 28, 11, 62, 35, 54, 236, 188, 138, 85, 230, 189, 238, 109, 125, 61, 25, 179, 160, 188, 97, 131, 191, 189, 78, 243, 1, 62, 166, 14, 97, 61, 120, 229, 180, 189, 98, 104, 41, 61, 62, 190, 91, 62, 128, 227, 52, 190, 171, 63, 92, 62, 75, 247, 143, 61, 248, 70, 57, 61, 159, 122, 248, 189, 144, 125, 161, 189, 107, 28, 247, 61, 181, 224, 253, 60, 200, 95, 213, 62, 248, 39, 198, 61, 172, 237, 22, 189, 222, 73, 155, 189, 130, 212, 61, 190, 249, 172, 17, 190, 90, 104, 148, 61, 172, 216, 193, 189, 14, 189, 167, 189, 5, 110, 144, 61, 35, 37, 141, 61, 187, 44, 72, 62, 65, 95, 27, 190, 148, 12, 246, 61, 104, 162, 19, 62, 39, 146, 215, 61, 125, 4, 81, 187, 185, 159, 167, 189, 136, 167, 58, 61, 15, 113, 52, 187, 186, 80, 11, 190, 90, 231, 187, 61, 160, 208, 218, 189, 44, 179, 60, 190, 209, 101, 34, 62, 131, 230, 65, 61, 205, 241, 55, 62, 243, 134, 51, 190, 60, 13, 122, 61, 116, 180, 10, 62, 165, 97, 32, 61, 46, 190, 44, 62, 6, 224, 231, 189, 78, 239, 92, 190, 138, 210, 232, 189, 14, 136, 198, 188, 87, 112, 195, 188, 191, 96, 129, 189, 184, 137, 248, 189, 1, 111, 43, 189, 119, 209, 28, 61, 29, 88, 95, 62, 121, 2, 66, 61, 72, 98, 132, 190, 182, 223, 82, 189, 122, 47, 181, 61, 118, 198, 14, 190, 118, 23, 24, 189, 105, 167, 186, 189, 180, 227, 51, 62, 192, 57, 41, 60, 152, 91, 139, 59, 119, 13, 76, 189, 96, 188, 51, 62, 250, 124, 241, 188, 210, 205, 240, 189, 208, 40, 34, 190, 145, 199, 89, 60, 51, 241, 49, 189, 169, 91, 129, 189, 56, 75, 28, 62, 225, 9, 120, 189, 98, 131, 226, 61, 230, 124, 204, 189, 141, 50, 21, 188, 39, 1, 5, 61, 28, 233, 104, 189, 98, 105, 26, 190, 225, 122, 232, 189, 89, 19, 182, 189, 247, 85, 62, 189, 105, 122, 178, 184, 27, 253, 189, 188, 76, 23, 58, 60, 90, 221, 153, 61, 17, 168, 122, 185, 227, 64, 91, 189, 162, 81, 235, 188, 23, 175, 6, 189, 79, 149, 1, 62, 57, 119, 7, 190, 27, 254, 123, 189, 161, 163, 245, 61, 52, 155, 75, 60, 165, 22, 226, 61, 77, 121, 166, 190, 37, 135, 167, 190, 199, 218, 223, 61, 118, 168, 231, 188, 236, 3, 19, 61, 140, 10, 189, 189, 209, 26, 23, 62, 213, 182, 139, 189, 111, 30, 54, 190, 231, 138, 109, 61, 90, 173, 30, 62, 102, 121, 188, 62, 24, 235, 11, 62, 106, 16, 76, 62, 124, 119, 198, 61, 222, 83, 51, 60, 181, 19, 156, 189, 59, 155, 8, 190, 220, 195, 170, 61, 79, 127, 216, 189, 162, 114, 24, 62, 20, 69, 254, 189, 133, 165, 187, 61, 219, 15, 4, 189, 10, 175, 149, 59, 10, 227, 151, 61, 51, 94, 251, 189, 97, 159, 170, 59, 188, 83, 222, 61, 139, 149, 57, 190, 188, 172, 197, 190, 237, 196, 244, 61, 8, 135, 168, 187, 82, 75, 163, 190, 115, 45, 155, 61, 241, 182, 214, 61, 31, 242, 249, 61, 225, 117, 21, 190, 80, 106, 233, 61, 216, 150, 179, 61, 120, 221, 35, 190, 176, 229, 244, 61, 131, 15, 183, 189, 141, 140, 175, 62, 199, 201, 136, 61, 102, 147, 169, 189, 37, 20, 57, 61, 248, 136, 90, 61, 92, 176, 183, 60, 127, 18, 132, 60, 14, 79, 2, 189, 82, 53, 44, 190, 212, 14, 206, 188, 176, 246, 157, 189, 171, 77, 82, 62, 98, 240, 53, 190, 136, 118, 92, 61, 19, 69, 91, 62, 47, 159, 23, 62, 177, 17, 90, 62, 196, 240, 27, 190, 4, 81, 217, 61, 44, 179, 57, 61, 3, 165, 115, 190, 153, 83, 235, 189, 216, 217, 248, 189, 147, 89, 87, 190, 215, 30, 227, 189, 14, 251, 179, 190, 129, 0, 203, 189, 131, 252, 81, 189, 130, 96, 189, 188, 254, 189, 27, 190, 82, 44, 229, 189, 186, 211, 64, 61, 92, 135, 129, 190, 117, 171, 142, 189, 171, 187, 26, 189, 199, 201, 86, 189, 129, 191, 96, 62, 96, 103, 181, 190, 234, 178, 142, 190, 217, 185, 207, 188, 250, 3, 154, 189, 181, 129, 143, 62, 194, 16, 38, 61, 160, 167, 42, 190, 13, 246, 116, 189, 155, 108, 165, 188, 197, 242, 31, 62, 137, 45, 68, 62, 189, 102, 51, 62, 217, 15, 139, 189, 200, 95, 253, 189, 234, 61, 7, 62, 25, 111, 9, 60, 68, 165, 44, 62, 2, 178, 95, 61, 37, 162, 146, 189, 81, 7, 131, 189, 248, 53, 230, 189, 248, 43, 98, 189, 141, 182, 104, 190, 21, 126, 229, 189, 11, 150, 26, 62, 243, 190, 168, 61, 119, 182, 51, 61, 214, 62, 55, 190, 154, 209, 217, 61, 13, 177, 253, 61, 163, 94, 141, 62, 159, 178, 123, 62, 240, 144, 74, 189, 106, 124, 90, 190, 33, 2, 217, 189, 150, 33, 213, 61, 223, 182, 97, 62, 172, 23, 18, 61, 118, 131, 134, 190, 11, 82, 98, 189, 152, 115, 76, 188, 235, 9, 14, 190, 77, 193, 190, 60, 60, 159, 100, 189, 72, 210, 176, 61, 255, 142, 20, 62, 124, 236, 12, 190, 118, 59, 195, 189, 16, 44, 30, 189, 151, 148, 202, 189, 113, 25, 105, 189, 24, 31, 109, 61, 93, 118, 78, 60, 24, 223, 15, 60, 0, 235, 26, 190, 163, 12, 27, 62, 227, 59, 203, 61, 89, 136, 57, 62, 34, 27, 30, 62, 145, 40, 137, 61, 79, 194, 125, 187, 120, 112, 16, 190, 31, 7, 75, 62, 169, 28, 98, 189, 45, 103, 131, 61, 203, 220, 169, 61, 163, 20, 32, 62, 103, 92, 130, 188, 121, 48, 161, 188, 137, 143, 209, 189, 123, 136, 192, 188, 152, 110, 83, 62, 72, 219, 24, 62, 77, 205, 72, 62, 126, 141, 147, 61, 159, 17, 235, 187, 115, 62, 89, 190, 133, 36, 201, 61, 151, 238, 55, 62, 138, 220, 132, 190, 134, 100, 17, 62, 22, 112, 210, 189, 38, 230, 11, 190, 74, 57, 5, 190, 69, 55, 67, 189, 173, 229, 10, 189, 4, 203, 37, 190, 41, 99, 213, 61, 169, 205, 84, 189, 95, 254, 108, 188, 202, 38, 113, 189, 52, 7, 90, 190, 193, 55, 170, 189, 138, 120, 251, 61, 159, 172, 204, 61, 253, 115, 214, 61, 114, 24, 50, 190, 58, 0, 118, 60, 249, 67, 202, 59, 247, 228, 159, 61, 27, 229, 11, 62, 150, 193, 29, 189, 120, 244, 104, 189, 113, 86, 83, 62, 130, 16, 189, 189, 186, 127, 196, 61, 13, 75, 79, 62, 98, 109, 58, 62, 75, 78, 223, 189, 235, 86, 136, 62, 143, 80, 200, 61, 249, 186, 149, 190, 239, 120, 246, 189, 150, 92, 106, 190, 173, 234, 137, 190, 213, 22, 120, 60, 168, 7, 101, 190, 47, 13, 15, 62, 219, 249, 135, 190, 247, 194, 16, 62, 95, 160, 14, 58, 109, 216, 129, 61, 156, 137, 12, 62, 61, 187, 162, 190, 86, 242, 20, 190, 10, 46, 6, 187, 118, 210, 108, 189, 92, 163, 42, 62, 185, 175, 153, 190, 148, 249, 231, 61, 24, 88, 125, 61, 242, 117, 244, 61, 248, 41, 87, 62, 209, 44, 49, 190, 76, 145, 118, 189, 49, 83, 7, 58, 192, 28, 251, 189, 178, 19, 248, 189, 101, 193, 163, 61, 184, 92, 94, 190, 32, 249, 86, 190, 25, 253, 55, 190, 119, 237, 15, 190, 36, 239, 17, 58, 135, 89, 120, 190, 112, 124, 204, 190, 44, 240, 151, 62, 71, 142, 177, 61, 14, 248, 141, 62, 223, 47, 32, 189, 105, 165, 33, 62, 130, 232, 14, 62, 32, 253, 123, 189, 110, 228, 81, 60, 62, 65, 28, 62, 132, 123, 229, 62, 212, 195, 214, 61, 244, 94, 116, 61, 137, 104, 193, 189, 41, 65, 54, 190, 184, 131, 129, 62, 180, 99, 148, 190, 57, 136, 171, 59, 17, 212, 245, 189, 74, 88, 183, 59, 176, 117, 219, 61, 245, 183, 78, 62, 140, 223, 108, 190, 118, 167, 109, 61, 136, 52, 96, 62, 71, 8, 56, 61, 193, 194, 65, 62, 5, 188, 105, 189, 237, 98, 41, 62, 214, 95, 23, 62, 237, 169, 148, 190, 112, 77, 168, 188, 116, 111, 34, 61, 177, 119, 147, 190, 68, 114, 121, 61, 135, 226, 131, 190, 14, 81, 19, 189, 141, 197, 143, 190, 154, 253, 51, 62, 38, 239, 240, 188, 78, 239, 212, 61, 1, 77, 225, 61, 181, 172, 136, 189, 9, 34, 99, 189, 9, 178, 30, 190, 104, 217, 66, 187, 143, 200, 94, 62, 122, 49, 54, 190, 186, 176, 56, 190, 123, 142, 25, 190, 1, 144, 209, 189, 115, 136, 145, 62, 189, 140, 75, 190, 34, 204, 163, 190, 235, 19, 170, 61, 2, 142, 191, 61, 224, 112, 189, 61, 23, 113, 236, 187, 228, 175, 226, 60, 124, 94, 33, 190, 210, 171, 197, 189, 153, 177, 196, 61, 169, 8, 165, 189, 113, 78, 11, 190, 17, 116, 149, 188, 154, 208, 207, 189, 175, 114, 171, 189, 190, 147, 13, 189, 200, 38, 134, 189, 236, 158, 52, 190, 74, 228, 3, 190, 69, 167, 19, 62, 35, 229, 43, 190, 119, 136, 190, 61, 92, 42, 176, 61, 88, 183, 11, 190, 52, 236, 119, 61, 199, 77, 17, 190, 155, 14, 243, 188, 28, 154, 197, 188, 167, 108, 242, 61, 96, 66, 185, 60, 127, 196, 130, 59, 253, 111, 138, 189, 86, 120, 72, 188, 72, 57, 167, 61, 204, 142, 51, 190, 91, 133, 208, 189, 0, 106, 147, 60, 178, 77, 64, 61, 38, 176, 211, 61, 180, 110, 81, 189, 71, 97, 196, 61, 98, 220, 252, 187, 74, 36, 19, 62, 136, 161, 246, 189, 134, 59, 141, 61, 198, 157, 193, 189, 9, 26, 14, 190, 87, 146, 225, 61, 3, 250, 158, 61, 66, 210, 203, 61, 157, 161, 64, 190, 154, 147, 191, 61, 157, 230, 244, 188, 64, 193, 200, 189, 138, 44, 254, 189, 135, 139, 175, 189, 16, 193, 67, 190, 106, 250, 41, 190, 12, 121, 213, 61, 15, 178, 237, 60, 204, 63, 52, 190, 21, 3, 190, 189, 239, 171, 214, 189, 100, 84, 20, 190, 219, 230, 201, 59, 71, 128, 211, 61, 81, 215, 12, 190, 56, 209, 250, 189, 28, 124, 169, 187, 69, 87, 208, 188, 239, 169, 137, 62, 144, 45, 10, 190, 171, 4, 77, 62, 185, 17, 114, 62, 8, 117, 148, 190, 162, 158, 180, 189, 59, 249, 89, 190, 86, 168, 179, 189, 203, 20, 164, 189, 190, 117, 222, 189, 24, 248, 174, 61, 198, 169, 238, 60, 229, 207, 243, 61, 114, 237, 128, 60, 152, 109, 132, 190, 24, 89, 160, 60, 180, 150, 162, 190, 142, 33, 231, 189, 250, 132, 8, 61, 139, 207, 219, 188, 139, 156, 95, 62, 10, 51, 135, 61, 204, 183, 105, 190, 180, 156, 47, 190, 36, 115, 145, 60, 153, 52, 148, 62, 226, 34, 15, 61, 0, 120, 31, 190, 154, 148, 14, 190, 154, 150, 38, 59, 252, 30, 11, 62, 7, 244, 139, 61, 16, 255, 209, 189, 26, 2, 155, 61, 8, 27, 180, 61, 20, 221, 179, 61, 74, 42, 120, 190, 5, 249, 8, 189, 177, 105, 208, 61, 252, 162, 206, 61, 179, 28, 5, 190, 190, 9, 87, 61, 174, 38, 20, 62, 58, 74, 151, 61, 222, 195, 6, 62, 203, 41, 194, 189, 92, 127, 251, 189, 10, 73, 226, 185, 106, 102, 168, 188, 0, 67, 74, 61, 102, 154, 32, 190, 175, 23, 234, 188, 34, 84, 70, 62, 119, 31, 41, 190, 103, 248, 173, 61, 108, 220, 195, 61, 167, 247, 145, 61, 90, 209, 63, 189, 224, 155, 10, 62, 70, 196, 203, 189, 199, 98, 163, 61, 236, 204, 189, 189, 163, 233, 108, 190, 186, 80, 217, 60, 122, 192, 164, 190, 205, 37, 152, 189, 82, 218, 38, 62, 202, 213, 100, 189, 112, 184, 131, 61, 124, 231, 30, 62, 201, 34, 144, 61, 226, 140, 88, 190, 202, 241, 7, 62, 74, 60, 240, 189, 55, 13, 254, 187, 91, 167, 144, 60, 32, 222, 96, 189, 61, 230, 216, 189, 249, 213, 228, 189, 80, 251, 97, 61, 27, 45, 152, 189, 117, 109, 222, 189, 165, 133, 153, 189, 192, 47, 18, 190, 160, 13, 59, 62, 52, 49, 128, 187, 141, 107, 222, 60, 101, 45, 254, 189, 174, 165, 73, 190, 182, 222, 166, 61, 186, 27, 179, 61, 133, 222, 27, 190, 248, 61, 68, 190, 114, 147, 98, 189, 140, 245, 204, 61, 51, 42, 17, 61, 43, 57, 121, 62, 158, 79, 74, 189, 145, 8, 56, 62, 199, 44, 200, 61, 93, 62, 97, 190, 2, 35, 192, 61, 35, 123, 139, 187, 207, 169, 100, 190, 67, 117, 4, 62, 119, 16, 6, 190, 199, 205, 24, 62, 24, 145, 159, 190, 137, 251, 128, 62, 154, 20, 211, 189, 234, 93, 17, 62, 241, 188, 176, 189, 152, 159, 153, 189, 238, 87, 97, 61, 155, 92, 191, 60, 25, 160, 65, 62, 96, 97, 126, 61, 127, 222, 14, 189, 127, 212, 190, 188, 223, 183, 33, 190, 224, 118, 224, 189, 238, 50, 63, 61, 7, 97, 105, 188, 3, 110, 140, 188, 188, 239, 40, 62, 197, 177, 1, 190, 160, 215, 28, 62, 77, 7, 191, 189, 192, 194, 137, 62, 201, 28, 140, 189, 198, 23, 108, 61, 169, 175, 213, 61, 65, 189, 104, 189, 206, 61, 235, 189, 201, 100, 187, 61, 209, 8, 166, 61, 187, 129, 159, 188, 95, 237, 180, 189, 237, 241, 160, 61, 122, 154, 197, 61, 225, 243, 48, 62, 224, 98, 162, 61, 166, 151, 3, 190, 91, 214, 214, 61, 175, 223, 16, 189, 225, 224, 104, 61, 40, 144, 39, 61, 250, 212, 251, 60, 23, 14, 151, 61, 184, 63, 92, 189, 150, 166, 54, 190, 181, 225, 181, 189, 78, 186, 208, 189, 140, 182, 75, 62, 29, 38, 30, 189, 114, 30, 195, 61, 54, 39, 153, 188, 169, 1, 171, 188, 68, 50, 65, 62, 38, 202, 157, 61, 76, 255, 190, 61, 57, 113, 18, 190, 220, 24, 158, 185, 234, 251, 204, 60, 247, 7, 107, 61, 0, 35, 233, 188, 48, 121, 209, 58, 37, 21, 172, 189, 227, 210, 121, 188, 116, 119, 8, 189, 145, 178, 33, 189, 122, 42, 93, 190, 87, 36, 184, 187, 128, 97, 168, 61, 210, 17, 225, 189, 46, 252, 209, 60, 255, 176, 44, 190, 37, 37, 61, 61, 210, 167, 160, 61, 175, 170, 19, 187, 14, 129, 89, 62, 49, 225, 113, 190, 21, 232, 16, 61, 70, 229, 41, 62, 243, 3, 7, 62, 236, 191, 53, 189, 24, 240, 55, 188, 73, 118, 221, 189, 152, 67, 56, 62, 230, 181, 69, 62, 25, 216, 18, 62, 167, 68, 6, 190, 113, 137, 46, 189, 65, 222, 85, 62, 183, 42, 52, 190, 42, 109, 141, 189, 143, 187, 210, 189, 194, 156, 39, 62, 242, 144, 25, 62, 203, 160, 198, 189, 118, 80, 65, 189, 39, 116, 66, 190, 90, 191, 245, 61, 209, 41, 49, 190, 235, 87, 59, 190, 43, 147, 118, 61, 241, 67, 235, 61, 215, 150, 18, 61, 116, 128, 20, 190, 114, 200, 21, 190, 108, 19, 151, 61, 139, 147, 172, 60, 54, 11, 32, 189, 1, 164, 10, 62, 184, 86, 165, 61, 104, 73, 81, 189, 220, 245, 36, 190, 5, 101, 26, 190, 214, 3, 224, 189, 20, 64, 150, 60, 104, 125, 145, 61, 37, 70, 236, 61, 22, 181, 21, 61, 170, 5, 235, 61, 46, 21, 187, 59, 97, 109, 69, 189, 85, 21, 20, 62, 220, 147, 45, 61, 162, 18, 133, 61, 234, 122, 197, 61, 176, 132, 54, 190, 101, 148, 145, 188, 10, 99, 244, 188, 1, 170, 233, 189, 12, 116, 123, 189, 253, 114, 159, 189, 252, 106, 254, 61, 15, 50, 192, 61, 78, 226, 237, 189, 103, 45, 22, 190, 185, 182, 65, 62, 121, 33, 147, 61, 139, 131, 95, 188, 125, 47, 212, 60, 210, 182, 62, 62, 197, 87, 169, 188, 34, 210, 102, 61, 239, 228, 77, 61, 40, 21, 117, 189, 139, 34, 33, 62, 137, 86, 74, 190, 35, 124, 121, 60, 239, 158, 87, 189, 242, 54, 7, 60, 215, 216, 40, 190, 223, 130, 206, 188, 194, 29, 67, 187, 233, 132, 206, 61, 21, 166, 136, 60, 178, 136, 228, 61, 149, 28, 191, 60, 116, 55, 0, 190, 138, 81, 64, 190, 34, 41, 99, 61, 168, 210, 73, 61, 246, 7, 47, 62, 173, 217, 147, 189, 231, 60, 179, 61, 11, 216, 33, 190, 141, 61, 98, 190, 163, 224, 34, 61, 254, 147, 61, 62, 126, 35, 179, 62, 163, 58, 132, 61, 164, 51, 57, 62, 235, 191, 52, 61, 27, 36, 45, 190, 50, 78, 61, 62, 246, 254, 64, 61, 212, 100, 46, 190, 78, 39, 181, 187, 174, 211, 128, 61, 68, 169, 69, 62, 100, 185, 255, 188, 188, 87, 130, 61, 162, 83, 21, 62, 194, 165, 163, 61, 161, 22, 45, 190, 190, 167, 231, 189, 41, 19, 4, 189, 142, 83, 111, 61, 19, 199, 25, 190, 201, 74, 85, 61, 155, 117, 26, 62, 57, 38, 52, 190, 69, 44, 32, 189, 8, 132, 185, 60, 151, 63, 42, 190, 140, 63, 45, 190, 124, 236, 187, 61, 213, 167, 146, 59, 16, 234, 175, 189, 149, 250, 183, 189, 74, 30, 33, 190, 233, 143, 5, 62, 132, 76, 11, 62, 142, 120, 215, 189, 157, 119, 26, 190, 41, 243, 65, 61, 206, 154, 161, 188, 229, 201, 161, 61, 199, 155, 7, 62, 76, 198, 10, 62, 229, 195, 3, 62, 73, 209, 73, 188, 75, 231, 29, 62, 83, 120, 12, 62, 217, 145, 16, 62, 214, 71, 130, 189, 215, 138, 30, 189, 230, 5, 135, 189, 83, 153, 1, 190, 254, 234, 47, 62, 151, 181, 18, 62, 83, 203, 143, 61, 16, 126, 190, 61, 105, 4, 69, 190, 66, 100, 232, 187, 141, 13, 170, 61, 98, 198, 156, 189, 156, 156, 250, 61, 62, 250, 159, 188, 4, 103, 214, 61, 27, 134, 171, 189, 30, 97, 7, 62, 27, 7, 183, 61, 25, 127, 144, 62, 197, 29, 229, 189, 165, 201, 58, 61, 89, 189, 81, 61, 162, 9, 7, 190, 249, 222, 235, 188, 46, 153, 14, 190, 226, 125, 72, 190, 33, 157, 14, 190, 233, 17, 192, 189, 61, 28, 252, 189, 148, 113, 77, 62, 40, 185, 23, 62, 106, 25, 60, 190, 136, 175, 191, 61, 82, 204, 79, 61, 102, 239, 23, 190, 240, 26, 7, 190, 175, 58, 178, 189, 193, 128, 223, 190, 158, 230, 165, 189, 171, 24, 38, 190, 169, 194, 103, 190, 178, 166, 149, 62, 84, 12, 78, 189, 32, 149, 129, 62, 122, 233, 176, 188, 199, 109, 162, 61, 223, 80, 104, 190, 41, 132, 102, 61, 84, 7, 230, 189, 111, 151, 149, 189, 52, 144, 155, 62, 111, 79, 234, 189, 172, 142, 135, 189, 170, 37, 214, 189, 10, 154, 30, 62, 246, 66, 147, 190, 243, 18, 150, 61, 5, 13, 62, 190, 126, 247, 38, 190, 55, 90, 102, 61, 216, 202, 46, 61, 187, 98, 166, 62, 228, 248, 2, 62, 200, 157, 39, 189, 133, 248, 42, 190, 151, 251, 220, 189, 159, 244, 68, 189, 35, 149, 177, 61, 205, 40, 153, 59, 21, 8, 178, 61, 40, 146, 211, 61, 49, 20, 137, 188, 6, 229, 39, 190, 54, 116, 93, 62, 240, 254, 9, 60, 58, 46, 137, 62, 178, 195, 218, 188, 54, 230, 143, 61, 24, 3, 109, 61, 65, 175, 64, 190, 118, 98, 105, 62, 238, 173, 12, 62, 115, 88, 151, 62, 124, 148, 37, 62, 104, 249, 209, 189, 206, 46, 129, 60, 25, 0, 9, 190, 245, 152, 123, 62, 57, 97, 150, 61, 207, 69, 63, 61, 232, 167, 177, 189, 59, 171, 128, 61, 25, 97, 188, 189, 24, 180, 25, 62, 23, 178, 247, 189, 182, 165, 8, 62, 62, 101, 9, 190, 254, 244, 62, 62, 216, 127, 250, 189, 64, 2, 176, 61, 191, 54, 14, 190, 255, 234, 39, 190, 119, 220, 45, 58, 45, 185, 18, 61, 24, 96, 2, 61, 220, 201, 99, 189, 37, 246, 22, 189, 207, 243, 72, 60, 125, 31, 43, 61, 28, 143, 181, 189, 9, 148, 176, 61, 37, 50, 109, 61, 28, 105, 191, 189, 52, 50, 59, 189, 16, 250, 74, 60, 138, 54, 17, 62, 57, 139, 72, 62, 156, 49, 205, 61, 82, 196, 12, 190, 136, 157, 193, 61, 149, 65, 10, 62, 9, 186, 219, 61, 54, 149, 214, 61, 100, 2, 148, 189, 110, 123, 88, 60, 245, 208, 142, 62, 212, 239, 68, 190, 40, 254, 167, 188, 11, 38, 252, 188, 16, 23, 29, 62, 201, 123, 146, 62, 195, 119, 174, 188, 112, 23, 67, 188, 5, 166, 13, 62, 163, 42, 121, 190, 235, 34, 198, 189, 129, 172, 174, 189, 188, 13, 187, 189, 130, 17, 220, 189, 241, 169, 152, 189, 231, 26, 149, 189, 227, 165, 55, 189, 183, 226, 38, 189, 93, 232, 253, 61, 227, 228, 240, 61, 102, 151, 69, 62, 146, 3, 176, 189, 40, 75, 11, 190, 229, 30, 161, 189, 243, 169, 131, 61, 131, 221, 76, 62, 182, 196, 189, 189, 231, 144, 7, 189, 89, 248, 47, 62, 210, 203, 61, 62, 244, 200, 169, 61, 249, 195, 61, 189, 165, 103, 102, 190, 250, 229, 49, 61, 8, 242, 197, 188, 156, 81, 123, 62, 229, 43, 20, 61, 54, 240, 109, 62, 117, 212, 57, 187, 184, 31, 240, 189, 237, 60, 84, 187, 232, 20, 49, 61, 151, 131, 86, 62, 82, 115, 183, 61, 222, 242, 31, 189, 223, 1, 225, 189, 197, 223, 177, 60, 100, 60, 5, 61, 116, 26, 90, 190, 152, 253, 53, 62, 236, 222, 141, 189, 244, 0, 84, 61, 124, 171, 11, 62, 233, 104, 107, 190, 34, 11, 106, 189, 181, 42, 211, 61, 228, 124, 159, 61, 255, 221, 140, 189, 105, 19, 153, 190, 136, 250, 21, 62, 23, 30, 34, 62, 83, 126, 179, 61, 4, 219, 27, 189, 138, 199, 27, 190, 123, 39, 134, 190, 171, 11, 20, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 210, 73, 61, 160, 135, 176, 61, 87, 41, 115, 62, 96, 94, 81, 62, 10, 89, 172, 189, 250, 138, 99, 62, 132, 87, 110, 62, 239, 209, 62, 61, 16, 62, 220, 61, 10, 64, 177, 189, 130, 158, 247, 61, 230, 108, 168, 60, 127, 0, 99, 62, 149, 164, 164, 61, 19, 205, 8, 189, 41, 159, 117, 61, 107, 238, 133, 189, 56, 159, 25, 190, 237, 62, 135, 61, 231, 113, 138, 61, 196, 118, 59, 187, 47, 206, 157, 61, 70, 122, 34, 190, 43, 77, 41, 62, 27, 202, 73, 61, 213, 222, 52, 190, 140, 32, 163, 61, 140, 117, 13, 62, 177, 186, 185, 188, 134, 105, 223, 61, 104, 59, 57, 62, 15, 161, 45, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 203, 117, 188, 153, 243, 170, 188, 210, 200, 140, 62, 53, 176, 122, 190, 23, 117, 99, 61, 109, 51, 226, 61, 10, 245, 161, 62, 33, 164, 151, 190, 79, 116, 56, 190, 230, 146, 182, 189, 224, 85, 225, 189, 206, 33, 66, 190, 208, 102, 154, 62, 125, 117, 150, 190, 137, 83, 149, 189, 202, 79, 134, 61, 200, 126, 146, 190, 5, 62, 169, 189, 227, 26, 3, 190, 3, 242, 208, 189, 233, 31, 49, 189, 234, 149, 156, 189, 208, 161, 24, 62, 201, 184, 65, 189, 37, 49, 44, 62, 121, 105, 113, 189, 81, 199, 72, 61, 9, 163, 153, 62, 184, 64, 190, 61, 173, 40, 7, 62, 196, 14, 130, 190, 74, 185, 108, 190, 124, 14, 20, 61, 210, 6, 131, 62, 224, 102, 130, 190, 216, 255, 165, 189, 52, 135, 25, 190, 188, 208, 11, 190, 194, 231, 194, 189, 220, 134, 56, 58, 217, 93, 13, 190, 129, 138, 150, 61, 61, 226, 200, 189, 63, 109, 126, 189, 71, 59, 1, 62, 49, 144, 9, 62, 114, 35, 15, 62, 57, 56, 41, 61, 141, 88, 12, 190, 157, 216, 149, 61, 19, 46, 67, 62, 74, 61, 182, 189, 253, 186, 210, 189, 52, 189, 237, 189, 164, 40, 139, 61, 201, 81, 251, 189, 195, 13, 145, 189, 35, 107, 200, 59, 108, 215, 191, 189, 206, 78, 229, 189, 61, 180, 118, 61, 7, 98, 198, 189, 98, 67, 58, 190, 110, 62, 216, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 6, 249, 61, 152, 216, 228, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {111, 185, 22, 63, 84, 208, 251, 190, 213, 212, 230, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {153, 233, 178, 63, 254, 1, 25, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0053/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}