// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 152, 44, 191, 225, 82, 91, 63, 242, 174, 168, 62, 137, 218, 42, 63, 13, 210, 104, 62, 175, 251, 35, 62, 232, 240, 104, 190, 194, 77, 115, 189, 15, 87, 28, 191, 166, 222, 59, 63, 251, 14, 9, 63, 33, 88, 74, 61, 199, 8, 7, 63, 137, 130, 213, 62, 238, 220, 73, 62, 188, 97, 196, 190, 107, 161, 72, 62, 168, 68, 246, 190, 226, 102, 176, 61, 188, 183, 42, 63, 254, 85, 253, 190, 155, 182, 33, 63, 105, 82, 120, 191, 226, 204, 173, 190, 168, 143, 188, 62, 106, 129, 180, 62, 35, 196, 137, 62, 54, 46, 78, 62, 92, 199, 11, 61, 207, 196, 208, 62, 168, 225, 180, 190, 68, 186, 94, 191, 84, 16, 49, 63, 2, 220, 96, 62, 147, 58, 71, 191, 201, 170, 190, 62, 159, 35, 46, 61, 1, 82, 48, 191, 43, 219, 24, 63, 70, 51, 40, 63, 76, 13, 199, 60, 84, 225, 16, 63, 30, 192, 228, 62, 244, 224, 109, 191, 248, 160, 130, 190, 59, 56, 110, 190, 222, 116, 245, 61, 180, 32, 249, 190, 94, 178, 186, 62, 145, 217, 107, 190, 110, 65, 15, 63, 76, 227, 92, 63, 231, 228, 30, 191, 191, 12, 152, 62, 21, 117, 1, 190, 252, 30, 157, 190, 66, 44, 10, 191, 2, 181, 133, 62, 144, 208, 102, 191, 39, 53, 192, 62, 47, 205, 196, 62, 155, 202, 241, 62, 1, 93, 4, 191, 85, 165, 33, 63, 195, 235, 243, 62, 18, 233, 192, 190, 75, 126, 65, 63, 127, 11, 3, 62, 183, 173, 194, 186, 191, 127, 6, 62, 195, 91, 0, 63, 193, 203, 122, 61, 174, 128, 106, 189, 197, 121, 122, 62, 17, 46, 136, 190, 59, 191, 21, 185, 102, 110, 182, 62, 48, 198, 239, 61, 9, 8, 120, 62, 141, 93, 36, 191, 42, 33, 249, 62, 101, 41, 58, 63, 129, 124, 56, 62, 158, 68, 150, 188, 207, 171, 15, 191, 181, 199, 3, 63, 57, 212, 179, 189, 192, 168, 16, 62, 110, 168, 204, 61, 4, 179, 20, 191, 105, 11, 40, 63, 107, 127, 100, 191, 127, 49, 91, 190, 59, 248, 239, 62, 102, 108, 161, 62, 18, 155, 1, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 189, 238, 190, 38, 141, 126, 62, 174, 16, 24, 62, 155, 59, 174, 62, 184, 133, 193, 190, 102, 253, 76, 190, 164, 37, 56, 62, 84, 116, 118, 190, 56, 47, 13, 191, 47, 156, 233, 190, 186, 182, 71, 190, 72, 159, 7, 190, 121, 54, 83, 62, 36, 244, 92, 61, 11, 234, 144, 190, 32, 235, 123, 62, 210, 179, 222, 189, 19, 31, 189, 190, 105, 147, 234, 62, 87, 36, 196, 62, 132, 240, 93, 62, 180, 75, 17, 63, 57, 249, 250, 62, 47, 1, 37, 63, 105, 55, 4, 190, 206, 23, 40, 191, 249, 136, 18, 61, 149, 163, 148, 62, 230, 58, 3, 63, 118, 236, 187, 188, 20, 112, 124, 62, 111, 140, 91, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {186, 168, 176, 190, 222, 150, 180, 189, 72, 24, 205, 61, 120, 195, 201, 190, 100, 124, 137, 62, 249, 67, 195, 60, 190, 152, 63, 61, 199, 230, 253, 62, 220, 29, 100, 62, 8, 192, 159, 61, 148, 245, 140, 62, 53, 245, 40, 62, 220, 99, 49, 62, 245, 191, 89, 190, 103, 86, 191, 62, 61, 93, 43, 190, 125, 137, 14, 190, 237, 20, 245, 60, 112, 193, 131, 62, 162, 67, 71, 62, 168, 80, 92, 189, 207, 207, 193, 190, 73, 61, 127, 189, 168, 51, 247, 189, 118, 232, 60, 187, 50, 179, 136, 190, 21, 46, 107, 62, 194, 168, 87, 190, 64, 232, 48, 190, 92, 60, 239, 61, 141, 146, 189, 60, 180, 165, 54, 189, 220, 16, 248, 189, 6, 242, 74, 62, 166, 157, 81, 189, 181, 208, 87, 62, 147, 147, 24, 61, 60, 52, 9, 62, 47, 208, 254, 60, 215, 233, 192, 190, 134, 82, 126, 190, 171, 178, 175, 188, 182, 241, 10, 62, 143, 255, 134, 60, 245, 105, 144, 61, 216, 17, 15, 60, 20, 59, 113, 190, 240, 0, 145, 189, 18, 213, 32, 190, 56, 136, 22, 190, 200, 61, 134, 61, 105, 45, 252, 189, 123, 235, 218, 61, 162, 55, 133, 186, 20, 155, 41, 189, 215, 207, 37, 62, 106, 60, 181, 61, 59, 96, 157, 190, 145, 120, 1, 189, 100, 136, 128, 61, 190, 9, 159, 187, 84, 185, 120, 189, 56, 247, 185, 190, 221, 184, 80, 190, 137, 59, 122, 62, 212, 139, 118, 61, 10, 179, 87, 190, 169, 124, 23, 62, 13, 35, 132, 190, 243, 247, 55, 190, 189, 135, 170, 61, 98, 41, 229, 60, 219, 55, 38, 190, 186, 167, 139, 58, 194, 154, 86, 62, 187, 30, 115, 190, 113, 215, 86, 62, 103, 246, 116, 61, 217, 113, 161, 188, 154, 70, 39, 190, 208, 154, 248, 189, 197, 142, 15, 62, 21, 132, 54, 189, 95, 190, 198, 62, 223, 170, 207, 61, 207, 148, 28, 188, 235, 192, 38, 189, 6, 184, 38, 188, 187, 92, 35, 190, 25, 32, 56, 61, 245, 18, 58, 190, 95, 117, 13, 60, 231, 26, 59, 62, 5, 40, 71, 61, 113, 160, 60, 62, 75, 106, 53, 190, 53, 219, 158, 189, 96, 92, 181, 61, 89, 27, 43, 62, 26, 203, 232, 189, 11, 236, 170, 189, 201, 254, 158, 61, 1, 75, 57, 189, 99, 0, 234, 189, 80, 221, 156, 61, 69, 141, 249, 189, 14, 240, 6, 191, 225, 64, 7, 62, 134, 231, 110, 190, 32, 66, 24, 62, 187, 191, 31, 190, 135, 92, 173, 61, 117, 188, 236, 61, 220, 146, 159, 60, 95, 110, 98, 62, 198, 215, 162, 190, 148, 23, 167, 190, 111, 78, 98, 190, 42, 19, 186, 189, 219, 217, 64, 190, 245, 99, 34, 190, 119, 76, 208, 189, 133, 55, 120, 189, 85, 149, 74, 189, 46, 71, 21, 62, 89, 161, 13, 189, 174, 120, 115, 190, 57, 76, 148, 189, 122, 47, 181, 61, 118, 198, 14, 190, 118, 23, 24, 189, 105, 167, 186, 189, 180, 227, 51, 62, 192, 57, 41, 60, 152, 91, 139, 59, 119, 13, 76, 189, 96, 188, 51, 62, 250, 124, 241, 188, 210, 205, 240, 189, 208, 40, 34, 190, 145, 199, 89, 60, 51, 241, 49, 189, 169, 91, 129, 189, 56, 75, 28, 62, 225, 9, 120, 189, 98, 131, 226, 61, 230, 124, 204, 189, 141, 50, 21, 188, 39, 1, 5, 61, 28, 233, 104, 189, 98, 105, 26, 190, 225, 122, 232, 189, 89, 19, 182, 189, 247, 85, 62, 189, 105, 122, 178, 184, 27, 253, 189, 188, 76, 23, 58, 60, 90, 221, 153, 61, 17, 168, 122, 185, 227, 64, 91, 189, 151, 240, 37, 62, 66, 255, 131, 61, 218, 137, 54, 61, 107, 48, 115, 189, 236, 127, 249, 190, 132, 128, 159, 61, 236, 53, 16, 188, 132, 148, 46, 61, 16, 249, 209, 190, 57, 115, 180, 190, 117, 150, 21, 62, 237, 233, 146, 189, 67, 222, 114, 61, 34, 45, 171, 189, 102, 22, 221, 60, 39, 13, 189, 189, 72, 145, 83, 190, 22, 137, 219, 61, 51, 105, 179, 61, 83, 183, 182, 62, 38, 61, 18, 62, 202, 91, 95, 62, 136, 69, 245, 61, 118, 232, 87, 62, 149, 227, 114, 189, 69, 161, 192, 189, 242, 123, 182, 187, 247, 212, 20, 189, 252, 173, 153, 62, 49, 90, 13, 190, 239, 240, 107, 61, 207, 149, 55, 189, 86, 238, 147, 62, 250, 86, 214, 61, 214, 246, 177, 190, 53, 220, 236, 60, 136, 166, 238, 190, 134, 18, 72, 191, 105, 67, 65, 191, 182, 240, 157, 62, 248, 91, 28, 190, 100, 165, 190, 190, 195, 102, 4, 62, 116, 15, 29, 61, 1, 8, 35, 62, 63, 110, 76, 190, 97, 112, 136, 62, 230, 75, 224, 60, 221, 97, 115, 190, 240, 149, 130, 62, 80, 230, 41, 190, 176, 13, 175, 62, 38, 172, 51, 62, 222, 135, 72, 188, 55, 203, 120, 61, 131, 142, 74, 62, 75, 30, 149, 61, 120, 68, 134, 61, 86, 243, 59, 190, 229, 175, 129, 189, 9, 202, 2, 62, 87, 182, 20, 62, 105, 252, 145, 62, 243, 6, 112, 190, 74, 120, 212, 189, 16, 30, 208, 62, 204, 79, 80, 62, 59, 229, 184, 62, 63, 213, 147, 188, 254, 150, 59, 62, 254, 249, 84, 61, 108, 153, 219, 190, 196, 58, 101, 62, 133, 90, 159, 62, 243, 220, 1, 191, 219, 183, 174, 62, 152, 251, 225, 190, 57, 172, 112, 62, 135, 77, 176, 190, 19, 58, 71, 60, 174, 104, 107, 62, 229, 244, 164, 62, 48, 189, 181, 61, 17, 227, 198, 190, 167, 229, 253, 189, 217, 219, 177, 189, 151, 190, 23, 62, 95, 113, 43, 62, 93, 103, 199, 190, 5, 59, 214, 190, 247, 198, 215, 62, 65, 185, 144, 61, 2, 82, 80, 62, 18, 121, 242, 188, 54, 115, 151, 190, 115, 191, 93, 62, 99, 119, 169, 189, 247, 151, 50, 62, 56, 50, 127, 62, 178, 134, 42, 62, 247, 50, 153, 189, 46, 44, 164, 189, 249, 186, 168, 61, 139, 221, 12, 61, 14, 23, 63, 62, 240, 105, 224, 61, 176, 46, 180, 190, 115, 164, 41, 189, 204, 41, 129, 190, 88, 188, 241, 60, 187, 149, 93, 190, 51, 17, 191, 189, 53, 165, 101, 62, 3, 185, 1, 62, 108, 17, 192, 61, 199, 30, 157, 190, 187, 5, 94, 61, 197, 145, 191, 61, 90, 4, 164, 62, 75, 115, 18, 62, 82, 95, 196, 189, 77, 242, 11, 190, 211, 85, 2, 188, 251, 147, 36, 62, 17, 124, 245, 61, 199, 141, 8, 187, 113, 13, 15, 190, 214, 35, 175, 188, 9, 174, 52, 190, 228, 89, 79, 190, 130, 178, 148, 61, 41, 61, 72, 190, 137, 31, 158, 61, 65, 67, 68, 62, 87, 252, 15, 190, 46, 142, 17, 190, 252, 144, 170, 189, 241, 200, 2, 190, 234, 174, 129, 190, 18, 216, 134, 61, 172, 215, 34, 190, 12, 152, 204, 188, 126, 78, 69, 190, 80, 219, 88, 62, 160, 65, 154, 61, 42, 24, 56, 62, 129, 213, 96, 62, 133, 208, 152, 187, 94, 210, 74, 190, 32, 198, 170, 190, 149, 25, 242, 61, 192, 99, 195, 189, 111, 68, 230, 189, 122, 11, 240, 61, 37, 11, 29, 62, 0, 141, 52, 190, 218, 41, 140, 61, 6, 123, 136, 190, 94, 158, 73, 189, 218, 16, 48, 62, 62, 46, 46, 61, 180, 179, 134, 62, 194, 4, 199, 61, 120, 27, 235, 60, 108, 173, 95, 190, 219, 48, 9, 62, 62, 115, 238, 61, 23, 98, 213, 190, 187, 105, 49, 62, 198, 237, 203, 188, 18, 66, 249, 190, 123, 160, 114, 189, 147, 190, 57, 190, 73, 59, 185, 61, 255, 8, 220, 190, 3, 70, 206, 61, 10, 104, 93, 61, 76, 225, 163, 61, 237, 42, 44, 189, 103, 10, 159, 190, 92, 194, 54, 190, 179, 217, 129, 61, 227, 36, 67, 62, 17, 201, 5, 61, 227, 199, 124, 190, 175, 83, 240, 61, 211, 137, 26, 62, 53, 230, 57, 62, 39, 119, 131, 61, 187, 190, 20, 190, 7, 224, 30, 188, 248, 200, 130, 62, 199, 208, 156, 190, 182, 227, 97, 62, 45, 57, 98, 62, 91, 169, 136, 62, 150, 105, 58, 190, 90, 216, 152, 62, 112, 120, 77, 61, 82, 167, 242, 190, 159, 91, 198, 189, 7, 47, 221, 189, 201, 128, 80, 191, 207, 7, 83, 62, 224, 246, 210, 190, 226, 98, 165, 62, 33, 90, 14, 191, 133, 144, 25, 62, 114, 241, 42, 62, 73, 171, 128, 62, 205, 46, 36, 62, 22, 253, 240, 190, 255, 123, 120, 190, 84, 212, 100, 189, 252, 105, 247, 61, 26, 3, 30, 62, 174, 228, 198, 190, 61, 5, 51, 62, 208, 179, 143, 62, 28, 108, 155, 62, 152, 118, 69, 62, 43, 75, 150, 190, 238, 227, 76, 189, 167, 243, 142, 61, 67, 70, 138, 62, 234, 136, 235, 189, 126, 67, 254, 59, 119, 239, 54, 190, 228, 40, 35, 191, 200, 139, 115, 190, 171, 192, 37, 190, 80, 18, 155, 188, 244, 57, 175, 190, 23, 33, 254, 190, 6, 232, 181, 62, 131, 235, 68, 189, 171, 19, 172, 62, 117, 175, 234, 189, 92, 252, 18, 62, 161, 156, 212, 61, 55, 44, 17, 190, 104, 64, 146, 189, 3, 71, 165, 61, 171, 247, 225, 62, 2, 148, 7, 62, 80, 47, 170, 61, 3, 97, 30, 190, 169, 5, 96, 187, 179, 37, 147, 62, 121, 135, 145, 190, 12, 123, 37, 190, 90, 200, 7, 190, 189, 120, 198, 61, 132, 33, 11, 62, 180, 192, 41, 62, 200, 2, 131, 190, 237, 190, 143, 190, 245, 81, 122, 62, 187, 103, 185, 61, 1, 22, 106, 62, 215, 200, 156, 190, 188, 102, 45, 62, 230, 16, 24, 62, 217, 68, 174, 190, 93, 14, 253, 189, 123, 179, 247, 188, 243, 2, 56, 191, 80, 34, 151, 61, 56, 27, 33, 191, 162, 114, 178, 189, 159, 207, 196, 190, 42, 233, 74, 62, 248, 126, 203, 189, 100, 92, 26, 62, 2, 93, 33, 62, 180, 135, 118, 190, 139, 60, 211, 189, 237, 171, 32, 190, 1, 61, 60, 62, 29, 208, 220, 61, 192, 121, 144, 190, 150, 86, 62, 190, 240, 228, 56, 190, 166, 24, 14, 62, 127, 65, 81, 62, 0, 63, 136, 190, 50, 95, 107, 190, 214, 104, 118, 188, 2, 142, 191, 61, 224, 112, 189, 61, 23, 113, 236, 187, 228, 175, 226, 60, 124, 94, 33, 190, 210, 171, 197, 189, 153, 177, 196, 61, 169, 8, 165, 189, 113, 78, 11, 190, 17, 116, 149, 188, 154, 208, 207, 189, 175, 114, 171, 189, 190, 147, 13, 189, 200, 38, 134, 189, 236, 158, 52, 190, 74, 228, 3, 190, 69, 167, 19, 62, 35, 229, 43, 190, 119, 136, 190, 61, 92, 42, 176, 61, 88, 183, 11, 190, 52, 236, 119, 61, 199, 77, 17, 190, 155, 14, 243, 188, 28, 154, 197, 188, 167, 108, 242, 61, 96, 66, 185, 60, 127, 196, 130, 59, 253, 111, 138, 189, 86, 120, 72, 188, 72, 57, 167, 61, 204, 142, 51, 190, 191, 178, 209, 189, 54, 146, 66, 60, 178, 77, 64, 61, 197, 110, 195, 61, 18, 8, 84, 189, 71, 97, 196, 61, 139, 244, 71, 188, 74, 36, 19, 62, 84, 53, 255, 189, 99, 163, 130, 61, 29, 77, 194, 189, 176, 125, 14, 190, 224, 71, 220, 61, 40, 139, 151, 61, 66, 210, 203, 61, 96, 204, 64, 190, 14, 57, 184, 61, 198, 3, 244, 188, 64, 193, 200, 189, 248, 180, 1, 190, 135, 139, 175, 189, 119, 162, 68, 190, 174, 131, 48, 190, 236, 203, 200, 61, 15, 178, 237, 60, 242, 86, 52, 190, 178, 0, 194, 189, 31, 149, 228, 189, 48, 243, 26, 190, 219, 230, 201, 59, 71, 128, 211, 61, 85, 55, 16, 190, 248, 8, 200, 190, 115, 89, 26, 190, 113, 221, 186, 61, 190, 65, 216, 61, 211, 9, 186, 190, 166, 17, 132, 62, 16, 219, 80, 62, 73, 9, 29, 190, 152, 191, 2, 190, 247, 99, 74, 190, 125, 225, 3, 191, 174, 204, 128, 186, 156, 162, 214, 190, 7, 86, 137, 61, 97, 249, 65, 62, 135, 219, 75, 62, 1, 197, 131, 60, 114, 240, 161, 190, 17, 191, 22, 62, 218, 224, 248, 190, 117, 240, 43, 190, 119, 36, 139, 188, 18, 167, 126, 189, 108, 64, 144, 61, 202, 89, 30, 60, 249, 244, 104, 190, 95, 226, 247, 189, 76, 98, 51, 60, 73, 15, 134, 62, 46, 49, 176, 60, 32, 144, 185, 61, 138, 66, 65, 190, 174, 236, 183, 189, 236, 193, 208, 60, 255, 121, 30, 62, 108, 247, 50, 190, 36, 133, 235, 61, 95, 253, 246, 61, 137, 100, 194, 61, 161, 27, 7, 190, 227, 151, 127, 189, 176, 253, 141, 61, 25, 61, 197, 188, 6, 80, 59, 190, 213, 241, 111, 189, 192, 180, 231, 61, 138, 45, 84, 62, 86, 249, 82, 62, 132, 200, 4, 190, 196, 10, 92, 190, 221, 200, 208, 61, 210, 36, 201, 189, 89, 13, 7, 61, 154, 116, 37, 190, 16, 127, 100, 189, 176, 241, 12, 62, 239, 21, 104, 190, 90, 198, 225, 61, 100, 98, 96, 61, 61, 77, 68, 61, 206, 51, 50, 189, 207, 220, 9, 62, 172, 227, 96, 61, 193, 93, 85, 61, 156, 163, 20, 191, 56, 193, 116, 190, 60, 195, 195, 61, 95, 171, 18, 191, 243, 55, 153, 189, 228, 109, 72, 62, 111, 190, 202, 189, 223, 235, 163, 60, 120, 246, 34, 62, 92, 244, 143, 61, 225, 109, 51, 191, 126, 226, 253, 61, 183, 213, 37, 191, 55, 195, 118, 60, 45, 77, 167, 188, 179, 141, 132, 60, 141, 97, 194, 189, 249, 213, 228, 189, 176, 59, 24, 62, 100, 238, 67, 190, 55, 226, 136, 190, 154, 166, 100, 190, 78, 90, 68, 190, 158, 243, 46, 62, 62, 35, 54, 190, 141, 107, 222, 60, 105, 242, 253, 189, 168, 195, 132, 190, 141, 112, 86, 62, 148, 250, 88, 189, 183, 120, 51, 190, 179, 186, 62, 190, 190, 75, 50, 190, 20, 2, 14, 62, 90, 24, 97, 61, 2, 167, 129, 62, 66, 77, 201, 189, 232, 89, 73, 62, 18, 14, 187, 60, 167, 191, 194, 190, 107, 252, 182, 61, 34, 143, 13, 61, 140, 142, 246, 190, 228, 151, 23, 62, 51, 154, 105, 190, 253, 217, 120, 62, 228, 32, 17, 191, 2, 174, 133, 62, 83, 5, 191, 188, 121, 102, 94, 62, 109, 218, 82, 189, 181, 213, 24, 190, 86, 118, 93, 189, 213, 158, 67, 189, 155, 210, 127, 62, 125, 72, 43, 61, 126, 84, 13, 190, 72, 88, 40, 61, 9, 150, 122, 189, 140, 125, 219, 188, 30, 95, 102, 61, 199, 187, 14, 190, 87, 112, 214, 187, 144, 65, 76, 62, 16, 175, 27, 190, 83, 48, 120, 62, 80, 145, 248, 189, 96, 208, 147, 62, 173, 21, 181, 190, 57, 58, 119, 61, 90, 183, 217, 60, 243, 130, 23, 190, 183, 214, 69, 190, 129, 147, 189, 61, 173, 208, 54, 61, 138, 131, 199, 60, 145, 52, 150, 189, 41, 18, 16, 62, 241, 111, 190, 189, 76, 8, 32, 62, 56, 103, 222, 61, 25, 2, 218, 60, 237, 155, 179, 61, 24, 167, 40, 188, 6, 17, 34, 187, 89, 100, 87, 59, 8, 254, 241, 61, 169, 113, 187, 61, 227, 123, 208, 189, 68, 62, 101, 190, 48, 244, 51, 189, 49, 205, 179, 59, 124, 116, 112, 62, 242, 153, 207, 189, 18, 20, 39, 62, 132, 2, 6, 189, 225, 199, 73, 190, 186, 136, 88, 62, 135, 111, 244, 61, 49, 39, 140, 61, 253, 68, 144, 190, 22, 63, 103, 61, 115, 220, 248, 188, 157, 199, 199, 189, 50, 157, 73, 189, 154, 70, 165, 60, 5, 93, 116, 190, 111, 34, 43, 61, 85, 55, 197, 189, 88, 253, 97, 60, 43, 108, 0, 191, 223, 65, 153, 60, 184, 122, 238, 61, 176, 162, 95, 61, 3, 6, 135, 61, 217, 114, 73, 190, 136, 103, 187, 188, 129, 169, 145, 60, 13, 100, 35, 61, 86, 156, 12, 62, 144, 208, 140, 190, 23, 61, 163, 189, 38, 229, 112, 62, 29, 231, 68, 62, 66, 212, 69, 189, 254, 22, 164, 189, 178, 125, 237, 189, 120, 249, 43, 62, 35, 89, 221, 61, 56, 189, 120, 62, 38, 250, 95, 190, 156, 27, 186, 61, 226, 61, 231, 62, 93, 105, 41, 190, 43, 17, 118, 62, 120, 233, 96, 190, 12, 11, 128, 62, 64, 139, 60, 62, 189, 239, 112, 190, 112, 51, 140, 189, 90, 222, 140, 190, 44, 140, 22, 62, 54, 106, 176, 190, 217, 139, 25, 190, 28, 14, 138, 61, 230, 231, 232, 61, 84, 247, 182, 189, 62, 80, 131, 190, 77, 121, 130, 189, 124, 111, 19, 62, 180, 248, 1, 62, 125, 150, 18, 60, 60, 45, 11, 62, 239, 38, 79, 61, 238, 184, 167, 189, 53, 39, 128, 189, 168, 253, 114, 190, 208, 39, 121, 190, 146, 13, 157, 190, 245, 226, 229, 61, 255, 73, 189, 61, 94, 250, 7, 62, 106, 37, 185, 61, 231, 127, 15, 61, 2, 110, 177, 190, 13, 153, 28, 62, 222, 185, 236, 188, 239, 32, 153, 188, 175, 78, 33, 60, 14, 101, 63, 190, 74, 111, 120, 189, 119, 208, 236, 59, 55, 212, 211, 189, 52, 36, 59, 187, 245, 5, 135, 190, 5, 176, 230, 61, 7, 127, 237, 61, 110, 164, 231, 60, 87, 98, 36, 190, 188, 206, 89, 62, 241, 210, 208, 60, 249, 68, 20, 189, 197, 238, 3, 62, 152, 235, 88, 62, 99, 71, 113, 189, 250, 168, 233, 187, 192, 19, 180, 61, 181, 188, 144, 61, 200, 194, 76, 62, 204, 149, 128, 190, 240, 42, 193, 61, 212, 178, 149, 189, 98, 210, 59, 62, 206, 51, 255, 60, 17, 72, 210, 189, 6, 191, 88, 62, 120, 215, 143, 188, 234, 16, 13, 189, 113, 174, 237, 61, 152, 75, 216, 188, 58, 121, 10, 190, 11, 50, 91, 190, 176, 33, 170, 60, 36, 134, 7, 189, 4, 55, 41, 62, 65, 1, 33, 189, 81, 233, 22, 60, 59, 5, 57, 190, 7, 181, 139, 190, 225, 18, 97, 62, 42, 126, 238, 61, 52, 172, 151, 62, 52, 90, 182, 61, 147, 62, 92, 62, 8, 37, 9, 62, 192, 206, 185, 61, 9, 161, 87, 62, 173, 25, 43, 60, 198, 39, 177, 190, 43, 25, 194, 61, 165, 29, 69, 62, 247, 80, 77, 62, 53, 84, 217, 189, 39, 126, 197, 61, 156, 238, 7, 62, 53, 234, 162, 61, 161, 22, 45, 190, 133, 115, 241, 189, 41, 19, 4, 189, 153, 183, 109, 61, 237, 170, 32, 190, 201, 74, 85, 61, 155, 117, 26, 62, 57, 38, 52, 190, 213, 53, 27, 189, 8, 132, 185, 60, 237, 119, 44, 190, 198, 66, 45, 190, 124, 236, 187, 61, 80, 210, 84, 58, 75, 157, 173, 189, 149, 250, 183, 189, 252, 140, 33, 190, 1, 60, 7, 62, 132, 76, 11, 62, 142, 120, 215, 189, 60, 167, 26, 190, 1, 238, 222, 60, 206, 154, 161, 188, 229, 201, 161, 61, 15, 154, 8, 62, 76, 198, 10, 62, 170, 230, 210, 61, 73, 209, 73, 188, 75, 231, 29, 62, 135, 165, 10, 62, 53, 27, 244, 61, 55, 1, 142, 60, 75, 212, 102, 189, 145, 154, 18, 189, 94, 43, 198, 190, 53, 46, 52, 62, 252, 145, 160, 61, 148, 117, 159, 60, 220, 56, 233, 60, 243, 233, 74, 190, 21, 135, 225, 187, 79, 168, 198, 61, 240, 172, 80, 189, 55, 85, 54, 62, 82, 214, 243, 189, 117, 228, 205, 61, 251, 142, 129, 189, 17, 174, 111, 62, 249, 75, 170, 61, 254, 34, 159, 62, 40, 29, 12, 190, 159, 189, 2, 61, 111, 113, 231, 61, 117, 219, 154, 189, 86, 106, 98, 189, 226, 164, 64, 190, 232, 41, 52, 190, 18, 40, 45, 189, 64, 123, 242, 188, 28, 82, 35, 190, 149, 136, 107, 62, 142, 253, 12, 62, 76, 135, 165, 189, 120, 64, 133, 61, 153, 2, 137, 190, 146, 228, 75, 190, 254, 89, 8, 191, 4, 172, 254, 190, 109, 250, 99, 191, 190, 9, 83, 189, 37, 166, 169, 190, 35, 235, 169, 190, 253, 169, 149, 62, 160, 176, 9, 190, 99, 207, 126, 62, 161, 254, 202, 189, 38, 45, 129, 61, 53, 41, 149, 190, 160, 168, 48, 189, 68, 164, 249, 189, 169, 91, 85, 190, 30, 18, 144, 62, 224, 227, 24, 190, 179, 48, 31, 189, 93, 66, 4, 190, 165, 203, 146, 62, 178, 195, 146, 190, 42, 107, 99, 189, 84, 49, 163, 190, 228, 17, 60, 189, 193, 150, 126, 62, 131, 206, 231, 60, 184, 91, 182, 62, 221, 137, 217, 60, 33, 9, 138, 62, 221, 80, 39, 190, 128, 108, 56, 190, 223, 27, 158, 59, 27, 208, 173, 190, 32, 34, 99, 189, 145, 10, 171, 61, 115, 225, 211, 61, 176, 219, 25, 190, 29, 31, 148, 190, 143, 156, 143, 62, 109, 50, 22, 190, 75, 77, 160, 62, 2, 25, 13, 190, 126, 85, 198, 61, 29, 254, 186, 60, 120, 44, 156, 190, 84, 141, 219, 61, 37, 194, 134, 61, 160, 102, 149, 62, 218, 186, 77, 62, 196, 108, 126, 189, 168, 63, 5, 189, 29, 140, 8, 61, 238, 194, 139, 62, 108, 230, 184, 60, 88, 152, 13, 190, 76, 34, 173, 189, 16, 146, 18, 62, 121, 18, 124, 189, 202, 253, 250, 61, 120, 62, 63, 190, 180, 189, 187, 61, 90, 127, 105, 60, 24, 201, 35, 62, 73, 65, 237, 188, 96, 22, 107, 190, 36, 64, 231, 189, 39, 154, 11, 190, 9, 157, 136, 189, 159, 247, 207, 189, 132, 34, 32, 61, 178, 27, 21, 190, 241, 24, 48, 61, 174, 112, 161, 188, 115, 118, 196, 61, 121, 191, 79, 190, 67, 43, 155, 61, 64, 203, 172, 61, 64, 245, 177, 61, 132, 75, 183, 189, 90, 238, 159, 186, 235, 253, 18, 62, 145, 236, 80, 62, 206, 41, 64, 62, 102, 121, 182, 189, 251, 93, 221, 61, 185, 173, 246, 61, 139, 56, 38, 62, 89, 211, 74, 62, 182, 174, 149, 189, 210, 45, 224, 186, 63, 169, 135, 62, 158, 142, 109, 190, 133, 95, 68, 190, 52, 228, 148, 59, 176, 101, 80, 62, 239, 255, 148, 62, 185, 188, 68, 189, 168, 55, 61, 61, 60, 245, 232, 61, 206, 242, 179, 190, 166, 92, 42, 189, 5, 193, 169, 60, 142, 58, 146, 190, 228, 141, 205, 187, 208, 215, 56, 190, 186, 122, 99, 60, 168, 233, 133, 190, 144, 85, 224, 188, 194, 109, 94, 62, 159, 12, 111, 62, 125, 3, 104, 62, 203, 30, 62, 190, 136, 252, 54, 190, 81, 205, 220, 189, 228, 57, 241, 61, 22, 50, 164, 61, 102, 16, 247, 189, 144, 9, 173, 189, 25, 143, 152, 62, 246, 112, 128, 62, 249, 46, 198, 188, 175, 55, 196, 189, 231, 138, 122, 190, 238, 2, 182, 61, 97, 69, 27, 190, 1, 117, 120, 62, 177, 27, 152, 61, 56, 22, 113, 62, 101, 47, 130, 188, 157, 118, 37, 189, 140, 136, 52, 60, 235, 97, 239, 189, 95, 22, 24, 62, 42, 1, 46, 61, 0, 124, 153, 190, 141, 100, 1, 190, 92, 237, 225, 189, 79, 222, 158, 61, 139, 170, 233, 190, 90, 191, 90, 62, 226, 170, 48, 189, 170, 225, 163, 61, 206, 108, 41, 62, 226, 49, 171, 190, 114, 74, 237, 189, 34, 176, 150, 61, 244, 254, 199, 61, 30, 186, 180, 189, 31, 75, 169, 190, 112, 129, 46, 62, 93, 32, 73, 62, 18, 162, 4, 62, 46, 88, 237, 188, 136, 98, 107, 190, 80, 71, 166, 190, 15, 189, 24, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {193, 192, 7, 62, 22, 229, 33, 61, 6, 170, 158, 62, 211, 220, 5, 62, 10, 89, 172, 189, 87, 13, 155, 62, 2, 69, 170, 62, 170, 170, 134, 60, 28, 75, 140, 61, 109, 243, 19, 188, 55, 27, 215, 61, 186, 192, 160, 61, 37, 191, 123, 62, 136, 94, 118, 61, 19, 205, 8, 189, 145, 24, 96, 61, 52, 93, 23, 189, 25, 98, 208, 189, 128, 5, 83, 62, 117, 205, 5, 62, 193, 181, 138, 61, 204, 22, 172, 61, 152, 186, 79, 190, 49, 154, 121, 62, 196, 103, 215, 61, 253, 140, 74, 190, 78, 76, 29, 62, 238, 237, 135, 62, 185, 239, 141, 187, 188, 122, 180, 61, 213, 40, 212, 61, 71, 105, 60, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 132, 211, 190, 218, 146, 24, 60, 147, 140, 144, 62, 108, 158, 215, 190, 23, 117, 99, 61, 3, 39, 21, 62, 20, 68, 52, 63, 246, 128, 24, 191, 233, 0, 63, 190, 52, 37, 213, 190, 134, 183, 135, 190, 124, 67, 255, 190, 55, 97, 161, 62, 165, 116, 254, 190, 137, 83, 149, 189, 238, 184, 130, 61, 116, 115, 206, 190, 236, 123, 244, 189, 122, 73, 40, 191, 68, 114, 135, 190, 198, 97, 213, 60, 240, 174, 1, 190, 253, 113, 185, 62, 113, 24, 167, 60, 254, 152, 83, 62, 247, 156, 96, 189, 201, 151, 110, 188, 32, 146, 14, 63, 90, 32, 217, 61, 130, 210, 224, 61, 93, 228, 189, 190, 38, 226, 192, 190, 73, 176, 127, 61, 167, 185, 151, 62, 9, 14, 158, 190, 122, 212, 27, 190, 52, 135, 25, 190, 102, 210, 43, 190, 230, 107, 176, 189, 128, 254, 92, 61, 116, 77, 246, 189, 21, 23, 221, 188, 225, 216, 130, 189, 41, 204, 128, 189, 116, 43, 63, 62, 186, 8, 52, 62, 114, 35, 15, 62, 42, 93, 38, 61, 77, 51, 158, 189, 157, 63, 158, 61, 204, 126, 87, 61, 146, 223, 125, 189, 32, 109, 42, 190, 179, 76, 18, 190, 197, 188, 186, 62, 56, 37, 98, 190, 113, 88, 50, 189, 137, 97, 0, 60, 158, 199, 25, 190, 127, 158, 161, 189, 74, 83, 23, 62, 244, 185, 37, 190, 3, 92, 21, 190, 10, 154, 31, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {114, 212, 16, 62, 162, 77, 167, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {71, 177, 189, 190, 93, 236, 13, 64, 194, 145, 97, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {170, 180, 14, 191, 83, 254, 82, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0053/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}