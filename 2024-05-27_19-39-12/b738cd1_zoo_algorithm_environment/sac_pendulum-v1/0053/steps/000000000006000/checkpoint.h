// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 228, 21, 191, 131, 22, 144, 63, 73, 179, 231, 62, 209, 215, 52, 63, 55, 114, 87, 62, 227, 230, 44, 62, 233, 105, 168, 190, 184, 23, 20, 191, 104, 250, 17, 191, 24, 172, 54, 63, 1, 63, 50, 63, 189, 58, 206, 61, 254, 233, 33, 63, 143, 24, 6, 63, 17, 60, 104, 62, 219, 100, 243, 190, 201, 190, 202, 190, 124, 55, 249, 190, 75, 168, 80, 62, 158, 21, 7, 63, 42, 188, 239, 190, 201, 234, 33, 63, 61, 129, 152, 191, 180, 245, 188, 190, 135, 109, 32, 63, 32, 47, 201, 62, 184, 18, 132, 62, 117, 86, 43, 62, 136, 233, 123, 62, 131, 64, 214, 62, 26, 187, 85, 190, 171, 43, 230, 190, 96, 13, 61, 63, 128, 55, 92, 61, 184, 42, 86, 191, 136, 185, 188, 62, 85, 56, 116, 61, 19, 163, 217, 190, 11, 122, 33, 63, 38, 102, 42, 63, 78, 57, 134, 62, 229, 175, 18, 63, 153, 250, 247, 62, 6, 95, 154, 191, 169, 70, 105, 190, 230, 180, 98, 190, 101, 147, 79, 190, 63, 87, 251, 190, 208, 84, 182, 62, 105, 28, 167, 60, 215, 122, 19, 63, 188, 53, 98, 63, 200, 215, 36, 191, 69, 22, 174, 62, 21, 55, 221, 189, 50, 5, 82, 191, 99, 214, 4, 191, 166, 169, 164, 62, 99, 42, 90, 191, 186, 3, 200, 62, 249, 91, 169, 62, 5, 28, 25, 62, 191, 19, 15, 191, 150, 196, 238, 62, 86, 157, 117, 62, 222, 56, 222, 190, 108, 78, 59, 63, 8, 240, 24, 62, 151, 74, 218, 187, 87, 78, 39, 62, 196, 82, 19, 63, 112, 81, 164, 60, 3, 4, 161, 189, 9, 113, 112, 188, 217, 39, 161, 190, 41, 123, 69, 188, 224, 86, 254, 62, 207, 142, 43, 62, 55, 26, 53, 62, 141, 163, 17, 191, 81, 72, 253, 62, 73, 227, 52, 63, 20, 163, 114, 62, 185, 45, 153, 60, 198, 26, 21, 191, 157, 111, 225, 62, 86, 253, 137, 188, 166, 30, 238, 188, 26, 133, 248, 190, 221, 246, 36, 191, 108, 164, 41, 63, 105, 214, 139, 191, 224, 67, 81, 190, 98, 23, 2, 63, 129, 22, 7, 63, 25, 208, 250, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {138, 199, 252, 190, 10, 231, 90, 62, 118, 226, 9, 61, 123, 194, 172, 62, 253, 1, 206, 190, 249, 134, 89, 190, 16, 81, 216, 61, 150, 32, 127, 190, 154, 4, 30, 191, 195, 180, 212, 190, 98, 159, 157, 190, 64, 21, 174, 189, 161, 4, 33, 62, 187, 247, 181, 61, 89, 9, 127, 190, 114, 226, 137, 62, 37, 72, 152, 188, 242, 51, 185, 190, 253, 216, 247, 62, 214, 134, 150, 62, 15, 250, 136, 62, 185, 246, 41, 63, 210, 68, 251, 62, 165, 65, 16, 63, 139, 99, 64, 188, 74, 144, 33, 191, 206, 250, 6, 62, 16, 161, 135, 62, 186, 142, 217, 62, 42, 184, 183, 189, 42, 72, 103, 62, 177, 152, 54, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 20, 178, 190, 10, 20, 15, 190, 4, 243, 169, 61, 55, 42, 241, 190, 79, 254, 222, 62, 161, 1, 145, 189, 23, 190, 188, 60, 4, 161, 28, 63, 248, 53, 186, 62, 2, 102, 170, 61, 43, 255, 153, 62, 248, 208, 36, 62, 101, 252, 71, 62, 231, 217, 99, 190, 225, 216, 238, 62, 60, 182, 69, 190, 4, 0, 19, 190, 84, 11, 253, 60, 98, 82, 158, 62, 90, 186, 95, 62, 11, 0, 75, 189, 169, 168, 193, 190, 191, 169, 76, 188, 78, 226, 255, 189, 196, 19, 153, 189, 249, 164, 181, 190, 29, 83, 110, 62, 242, 108, 39, 190, 33, 42, 65, 190, 20, 207, 161, 61, 167, 172, 64, 61, 252, 154, 29, 189, 222, 74, 72, 187, 183, 181, 96, 62, 122, 22, 34, 189, 26, 148, 165, 62, 113, 168, 189, 60, 209, 192, 13, 62, 48, 255, 108, 61, 156, 169, 238, 190, 146, 191, 173, 190, 22, 32, 72, 189, 237, 142, 244, 61, 238, 36, 54, 187, 254, 225, 142, 61, 9, 73, 36, 61, 98, 32, 203, 190, 232, 127, 153, 189, 189, 197, 12, 190, 67, 84, 82, 190, 227, 95, 68, 61, 193, 92, 38, 190, 52, 69, 241, 61, 65, 191, 60, 61, 241, 231, 64, 60, 93, 118, 127, 62, 242, 48, 192, 61, 107, 146, 1, 191, 35, 230, 49, 189, 18, 73, 225, 61, 53, 228, 177, 60, 244, 26, 98, 189, 128, 183, 217, 190, 216, 117, 26, 190, 180, 211, 69, 62, 198, 201, 230, 61, 239, 178, 161, 190, 152, 229, 93, 62, 19, 72, 191, 190, 237, 128, 180, 190, 199, 107, 26, 62, 36, 247, 168, 61, 131, 122, 130, 190, 165, 104, 178, 187, 144, 105, 62, 62, 21, 142, 106, 190, 167, 138, 73, 62, 89, 250, 119, 61, 7, 141, 32, 60, 213, 53, 88, 190, 135, 3, 245, 189, 252, 156, 15, 62, 52, 79, 24, 190, 103, 220, 190, 62, 31, 88, 44, 62, 126, 128, 50, 61, 27, 37, 206, 60, 37, 126, 194, 187, 9, 222, 218, 189, 79, 125, 41, 62, 33, 135, 53, 190, 157, 78, 162, 61, 217, 144, 110, 61, 190, 33, 2, 62, 206, 113, 123, 62, 170, 224, 65, 190, 147, 154, 249, 190, 115, 21, 21, 60, 130, 88, 2, 62, 138, 188, 221, 189, 8, 184, 168, 189, 157, 251, 234, 187, 170, 15, 192, 189, 206, 207, 20, 190, 21, 75, 155, 61, 154, 64, 135, 190, 32, 113, 183, 190, 108, 59, 195, 62, 33, 125, 101, 189, 11, 41, 58, 60, 123, 16, 253, 189, 227, 14, 85, 61, 247, 216, 51, 188, 234, 66, 3, 190, 71, 128, 136, 62, 94, 219, 7, 62, 134, 192, 216, 190, 187, 46, 168, 190, 91, 152, 71, 190, 203, 116, 97, 190, 203, 95, 153, 190, 119, 76, 208, 189, 207, 13, 27, 62, 40, 233, 184, 189, 161, 8, 15, 62, 130, 228, 130, 190, 70, 85, 63, 190, 232, 21, 29, 190, 122, 47, 181, 61, 118, 198, 14, 190, 118, 23, 24, 189, 105, 167, 186, 189, 180, 227, 51, 62, 192, 57, 41, 60, 152, 91, 139, 59, 119, 13, 76, 189, 96, 188, 51, 62, 250, 124, 241, 188, 210, 205, 240, 189, 208, 40, 34, 190, 145, 199, 89, 60, 51, 241, 49, 189, 169, 91, 129, 189, 56, 75, 28, 62, 225, 9, 120, 189, 98, 131, 226, 61, 230, 124, 204, 189, 141, 50, 21, 188, 39, 1, 5, 61, 28, 233, 104, 189, 98, 105, 26, 190, 225, 122, 232, 189, 89, 19, 182, 189, 247, 85, 62, 189, 105, 122, 178, 184, 27, 253, 189, 188, 76, 23, 58, 60, 90, 221, 153, 61, 17, 168, 122, 185, 227, 64, 91, 189, 180, 80, 165, 189, 250, 58, 198, 61, 56, 242, 120, 61, 222, 148, 186, 189, 96, 196, 57, 191, 240, 17, 228, 61, 80, 77, 129, 189, 55, 133, 19, 61, 147, 65, 19, 191, 86, 189, 200, 190, 188, 147, 253, 61, 38, 38, 196, 188, 130, 191, 59, 61, 12, 222, 209, 189, 190, 37, 2, 61, 135, 0, 120, 189, 109, 97, 94, 190, 35, 231, 42, 62, 194, 51, 189, 61, 66, 12, 191, 62, 139, 243, 217, 61, 175, 139, 66, 62, 89, 112, 225, 61, 6, 233, 240, 61, 76, 128, 130, 189, 238, 216, 68, 190, 90, 126, 65, 60, 39, 91, 64, 189, 36, 219, 92, 62, 8, 8, 231, 189, 104, 0, 181, 61, 10, 110, 212, 189, 128, 77, 135, 62, 253, 139, 180, 61, 71, 6, 254, 190, 61, 61, 171, 187, 191, 147, 78, 191, 138, 7, 158, 191, 247, 110, 17, 191, 19, 215, 197, 62, 136, 222, 178, 190, 189, 61, 195, 190, 191, 254, 248, 61, 94, 107, 203, 61, 235, 59, 24, 62, 186, 194, 112, 190, 210, 65, 198, 62, 244, 208, 232, 61, 160, 30, 121, 190, 194, 182, 141, 62, 193, 88, 146, 190, 90, 81, 174, 62, 238, 227, 125, 62, 139, 202, 17, 61, 212, 212, 120, 61, 165, 242, 68, 62, 179, 252, 185, 62, 253, 222, 141, 62, 152, 239, 38, 190, 195, 188, 131, 189, 133, 106, 225, 61, 53, 14, 164, 62, 92, 53, 173, 62, 85, 151, 153, 190, 134, 58, 42, 190, 180, 68, 217, 62, 159, 90, 32, 62, 61, 79, 198, 62, 172, 129, 231, 61, 221, 62, 13, 62, 176, 222, 247, 61, 165, 21, 0, 191, 5, 16, 165, 62, 219, 26, 174, 62, 110, 43, 253, 190, 34, 94, 167, 62, 30, 220, 229, 190, 203, 21, 128, 62, 123, 68, 3, 191, 216, 44, 200, 188, 41, 89, 110, 62, 132, 247, 186, 62, 81, 223, 35, 61, 216, 5, 200, 190, 123, 97, 119, 189, 97, 231, 66, 189, 88, 96, 33, 62, 161, 116, 45, 62, 153, 69, 190, 190, 113, 109, 0, 191, 34, 98, 207, 62, 235, 209, 154, 61, 115, 254, 209, 61, 135, 103, 155, 189, 247, 191, 179, 190, 120, 34, 121, 62, 21, 207, 240, 189, 5, 60, 17, 62, 135, 62, 112, 62, 127, 31, 28, 62, 101, 182, 97, 188, 242, 232, 177, 189, 155, 141, 183, 61, 135, 7, 46, 61, 227, 82, 33, 62, 143, 5, 22, 62, 68, 70, 131, 190, 169, 16, 216, 189, 112, 177, 107, 190, 149, 235, 148, 61, 183, 96, 85, 190, 200, 78, 243, 189, 115, 110, 129, 62, 163, 241, 240, 61, 231, 49, 161, 61, 172, 230, 145, 190, 78, 62, 155, 61, 131, 9, 212, 61, 227, 98, 172, 62, 151, 52, 15, 62, 152, 84, 210, 189, 251, 24, 144, 189, 145, 198, 74, 188, 138, 170, 44, 62, 167, 147, 136, 61, 199, 223, 5, 189, 166, 247, 209, 189, 159, 225, 190, 60, 214, 133, 27, 191, 219, 42, 186, 190, 214, 29, 82, 61, 101, 161, 104, 190, 226, 235, 156, 60, 180, 229, 165, 61, 5, 226, 130, 190, 72, 148, 129, 190, 160, 5, 228, 189, 183, 183, 178, 190, 130, 28, 85, 190, 126, 101, 35, 62, 232, 120, 160, 189, 187, 77, 106, 190, 12, 34, 101, 190, 186, 172, 95, 62, 91, 194, 217, 189, 94, 176, 19, 60, 200, 77, 181, 62, 114, 34, 157, 62, 91, 35, 222, 190, 23, 222, 15, 191, 67, 233, 190, 189, 29, 113, 198, 189, 23, 179, 222, 190, 122, 11, 240, 61, 236, 139, 90, 62, 51, 249, 141, 190, 159, 32, 240, 61, 153, 57, 53, 191, 165, 187, 51, 187, 223, 150, 144, 188, 105, 33, 68, 61, 228, 34, 142, 62, 71, 231, 92, 61, 24, 244, 101, 61, 84, 16, 50, 190, 251, 73, 2, 62, 141, 43, 60, 62, 146, 93, 245, 190, 14, 80, 249, 61, 197, 104, 171, 187, 134, 239, 223, 190, 207, 88, 31, 190, 74, 23, 81, 190, 228, 206, 246, 61, 230, 59, 12, 191, 159, 25, 90, 61, 6, 72, 103, 61, 233, 78, 155, 61, 193, 226, 213, 189, 226, 217, 160, 190, 141, 38, 228, 189, 179, 41, 208, 61, 195, 162, 83, 62, 123, 148, 96, 61, 112, 15, 81, 190, 90, 204, 50, 62, 61, 217, 232, 61, 6, 153, 71, 62, 88, 38, 116, 59, 215, 238, 56, 190, 148, 20, 26, 188, 5, 55, 147, 62, 25, 62, 16, 191, 70, 52, 71, 62, 28, 197, 133, 62, 92, 93, 128, 62, 7, 137, 51, 190, 185, 120, 183, 62, 169, 148, 154, 61, 242, 54, 10, 191, 238, 79, 143, 190, 103, 142, 68, 190, 135, 80, 47, 191, 242, 70, 0, 62, 9, 43, 219, 190, 100, 235, 159, 62, 212, 158, 38, 191, 189, 48, 58, 62, 164, 23, 239, 61, 162, 8, 111, 62, 114, 96, 89, 62, 6, 156, 224, 190, 105, 220, 87, 190, 3, 204, 66, 189, 235, 107, 208, 61, 24, 69, 10, 62, 116, 36, 187, 190, 170, 45, 34, 62, 103, 237, 111, 62, 37, 190, 145, 62, 231, 188, 76, 62, 51, 29, 163, 190, 134, 141, 102, 189, 226, 63, 26, 61, 137, 52, 197, 62, 251, 189, 148, 189, 232, 252, 66, 60, 121, 66, 41, 190, 54, 41, 117, 191, 20, 254, 117, 190, 253, 0, 46, 190, 117, 172, 174, 60, 142, 241, 236, 190, 131, 0, 255, 190, 8, 165, 168, 62, 175, 205, 23, 189, 155, 23, 158, 62, 84, 110, 18, 190, 125, 245, 81, 62, 143, 32, 5, 62, 229, 175, 30, 190, 95, 225, 217, 189, 153, 144, 171, 61, 9, 6, 210, 62, 0, 21, 253, 61, 6, 0, 148, 61, 2, 208, 44, 190, 35, 13, 193, 188, 48, 197, 148, 62, 220, 169, 114, 189, 146, 220, 48, 190, 233, 143, 14, 190, 173, 138, 195, 61, 154, 49, 58, 62, 91, 16, 123, 62, 59, 105, 152, 190, 148, 27, 40, 191, 235, 179, 63, 62, 127, 145, 236, 61, 216, 18, 79, 62, 227, 76, 155, 190, 94, 89, 72, 62, 246, 229, 44, 62, 254, 140, 201, 190, 171, 33, 34, 190, 105, 190, 241, 189, 160, 203, 216, 190, 128, 7, 133, 61, 79, 148, 5, 191, 117, 193, 175, 189, 64, 71, 228, 190, 220, 7, 110, 62, 106, 250, 29, 190, 139, 50, 61, 62, 74, 103, 89, 62, 8, 202, 96, 59, 217, 170, 159, 189, 175, 137, 21, 190, 239, 24, 48, 62, 183, 58, 162, 61, 157, 65, 138, 190, 150, 86, 62, 190, 101, 64, 50, 190, 120, 25, 7, 62, 231, 183, 78, 62, 147, 129, 153, 190, 52, 143, 116, 190, 169, 75, 156, 189, 2, 142, 191, 61, 224, 112, 189, 61, 23, 113, 236, 187, 228, 175, 226, 60, 124, 94, 33, 190, 210, 171, 197, 189, 153, 177, 196, 61, 169, 8, 165, 189, 113, 78, 11, 190, 17, 116, 149, 188, 154, 208, 207, 189, 175, 114, 171, 189, 190, 147, 13, 189, 200, 38, 134, 189, 236, 158, 52, 190, 74, 228, 3, 190, 69, 167, 19, 62, 35, 229, 43, 190, 119, 136, 190, 61, 92, 42, 176, 61, 88, 183, 11, 190, 52, 236, 119, 61, 199, 77, 17, 190, 155, 14, 243, 188, 28, 154, 197, 188, 167, 108, 242, 61, 96, 66, 185, 60, 127, 196, 130, 59, 253, 111, 138, 189, 86, 120, 72, 188, 72, 57, 167, 61, 204, 142, 51, 190, 191, 178, 209, 189, 54, 146, 66, 60, 178, 77, 64, 61, 197, 110, 195, 61, 18, 8, 84, 189, 71, 97, 196, 61, 139, 244, 71, 188, 74, 36, 19, 62, 84, 53, 255, 189, 99, 163, 130, 61, 29, 77, 194, 189, 176, 125, 14, 190, 224, 71, 220, 61, 40, 139, 151, 61, 66, 210, 203, 61, 96, 204, 64, 190, 14, 57, 184, 61, 198, 3, 244, 188, 64, 193, 200, 189, 248, 180, 1, 190, 135, 139, 175, 189, 119, 162, 68, 190, 174, 131, 48, 190, 236, 203, 200, 61, 15, 178, 237, 60, 242, 86, 52, 190, 178, 0, 194, 189, 31, 149, 228, 189, 48, 243, 26, 190, 219, 230, 201, 59, 71, 128, 211, 61, 85, 55, 16, 190, 30, 147, 80, 191, 170, 89, 9, 191, 88, 206, 194, 61, 188, 182, 122, 189, 33, 90, 187, 190, 236, 53, 124, 62, 27, 176, 89, 62, 49, 192, 237, 189, 79, 210, 2, 190, 80, 76, 99, 190, 193, 50, 202, 189, 234, 176, 127, 62, 252, 183, 137, 189, 157, 192, 7, 61, 83, 202, 136, 62, 215, 180, 77, 62, 188, 49, 42, 61, 238, 19, 14, 191, 207, 116, 46, 62, 110, 64, 69, 189, 72, 33, 39, 190, 46, 68, 209, 188, 160, 152, 163, 189, 46, 223, 235, 60, 230, 164, 163, 59, 249, 244, 104, 190, 226, 179, 116, 62, 14, 23, 207, 188, 236, 146, 132, 62, 99, 229, 117, 188, 126, 222, 232, 61, 183, 243, 74, 190, 204, 217, 211, 190, 24, 143, 183, 190, 214, 14, 17, 62, 172, 13, 147, 190, 159, 125, 180, 61, 81, 8, 165, 61, 150, 38, 248, 61, 195, 140, 229, 189, 112, 39, 169, 189, 113, 175, 88, 59, 152, 237, 43, 61, 15, 5, 181, 189, 237, 141, 97, 60, 97, 229, 84, 61, 161, 158, 133, 62, 56, 104, 88, 62, 49, 122, 61, 190, 59, 45, 150, 190, 125, 95, 1, 62, 98, 191, 13, 62, 56, 184, 46, 61, 145, 170, 16, 190, 123, 12, 167, 188, 207, 41, 55, 62, 29, 166, 127, 190, 238, 27, 173, 61, 94, 21, 16, 62, 34, 92, 126, 61, 152, 218, 168, 58, 224, 107, 123, 61, 68, 234, 143, 61, 62, 40, 213, 58, 38, 25, 145, 191, 250, 253, 174, 190, 51, 103, 18, 62, 164, 169, 228, 190, 243, 55, 153, 189, 32, 175, 100, 62, 149, 122, 61, 188, 62, 61, 142, 189, 120, 246, 34, 62, 4, 196, 158, 189, 212, 182, 217, 190, 206, 32, 21, 63, 199, 107, 196, 190, 239, 241, 223, 189, 169, 118, 201, 189, 126, 133, 97, 61, 157, 179, 23, 190, 223, 79, 134, 190, 178, 96, 121, 62, 149, 154, 154, 62, 116, 243, 100, 190, 50, 108, 90, 190, 186, 109, 12, 191, 187, 38, 24, 62, 70, 241, 39, 190, 141, 107, 222, 60, 179, 213, 245, 62, 197, 225, 183, 190, 250, 226, 95, 62, 11, 182, 69, 190, 192, 171, 105, 190, 11, 27, 160, 190, 39, 197, 171, 190, 63, 133, 245, 61, 16, 63, 204, 61, 46, 110, 129, 62, 162, 131, 142, 189, 116, 114, 137, 62, 128, 234, 111, 61, 101, 159, 236, 190, 153, 14, 141, 60, 224, 92, 50, 61, 68, 52, 190, 190, 252, 217, 251, 61, 41, 9, 70, 190, 1, 3, 136, 62, 47, 20, 51, 191, 92, 127, 151, 62, 25, 43, 172, 188, 13, 214, 95, 62, 226, 9, 38, 187, 28, 35, 204, 189, 32, 163, 124, 188, 210, 182, 11, 189, 115, 148, 117, 62, 16, 85, 84, 61, 36, 20, 205, 189, 249, 26, 119, 189, 154, 198, 134, 189, 90, 251, 27, 189, 93, 126, 196, 61, 144, 163, 31, 190, 154, 61, 152, 188, 144, 27, 97, 62, 247, 110, 105, 190, 173, 114, 148, 62, 111, 209, 23, 190, 92, 41, 152, 62, 218, 193, 200, 190, 95, 185, 82, 61, 158, 68, 165, 188, 128, 34, 89, 190, 135, 21, 138, 190, 70, 41, 184, 61, 44, 105, 51, 61, 180, 3, 205, 60, 247, 245, 139, 189, 216, 31, 33, 62, 11, 113, 54, 190, 114, 73, 15, 62, 92, 149, 238, 61, 223, 198, 214, 60, 67, 192, 136, 61, 103, 252, 227, 187, 61, 193, 5, 189, 234, 39, 246, 188, 136, 99, 2, 62, 57, 192, 178, 61, 231, 122, 12, 190, 13, 23, 227, 189, 224, 190, 2, 189, 28, 147, 183, 59, 25, 130, 106, 62, 162, 93, 18, 190, 57, 201, 63, 62, 61, 13, 1, 189, 77, 41, 162, 190, 7, 185, 90, 62, 179, 242, 188, 61, 25, 141, 151, 61, 192, 218, 138, 190, 214, 245, 62, 61, 57, 130, 199, 188, 170, 39, 54, 190, 166, 143, 219, 189, 161, 10, 62, 188, 73, 50, 92, 190, 224, 1, 27, 188, 238, 67, 197, 189, 18, 74, 133, 60, 108, 211, 39, 191, 231, 58, 44, 187, 187, 7, 186, 61, 68, 225, 85, 61, 241, 12, 141, 61, 155, 33, 41, 190, 129, 53, 0, 58, 120, 93, 242, 60, 195, 226, 68, 61, 83, 52, 32, 62, 199, 0, 154, 190, 135, 60, 26, 189, 184, 28, 89, 62, 253, 114, 79, 62, 83, 191, 18, 189, 141, 244, 38, 190, 30, 206, 219, 189, 8, 19, 32, 62, 122, 198, 160, 189, 62, 37, 150, 62, 165, 92, 90, 190, 212, 16, 27, 62, 152, 198, 6, 63, 38, 240, 6, 190, 67, 23, 171, 62, 143, 160, 174, 190, 210, 3, 150, 62, 174, 195, 57, 62, 189, 84, 135, 190, 133, 11, 32, 188, 253, 130, 138, 190, 132, 25, 43, 62, 122, 5, 243, 190, 109, 37, 167, 189, 203, 192, 180, 61, 87, 193, 107, 62, 19, 18, 140, 190, 178, 29, 95, 190, 225, 212, 140, 189, 201, 247, 70, 62, 162, 222, 67, 62, 235, 39, 222, 60, 198, 138, 179, 62, 49, 33, 169, 189, 136, 39, 53, 189, 164, 231, 119, 60, 132, 31, 120, 190, 251, 166, 225, 190, 189, 186, 228, 190, 248, 94, 5, 62, 137, 178, 138, 60, 159, 16, 60, 62, 177, 38, 161, 61, 236, 48, 99, 61, 240, 64, 180, 190, 246, 238, 38, 62, 161, 42, 58, 189, 231, 136, 223, 189, 141, 59, 43, 189, 85, 203, 65, 190, 131, 9, 84, 189, 254, 252, 214, 59, 175, 37, 186, 189, 230, 199, 152, 60, 114, 135, 210, 190, 221, 64, 224, 61, 42, 195, 255, 61, 150, 155, 44, 61, 112, 245, 34, 190, 167, 222, 112, 62, 244, 42, 241, 60, 152, 133, 55, 189, 99, 71, 28, 62, 226, 112, 100, 62, 67, 157, 141, 189, 40, 107, 117, 61, 184, 151, 209, 61, 16, 250, 172, 61, 243, 166, 78, 62, 185, 203, 145, 190, 200, 213, 248, 61, 94, 144, 136, 189, 105, 224, 71, 61, 148, 159, 115, 61, 176, 84, 190, 189, 2, 42, 86, 62, 20, 15, 150, 189, 95, 190, 199, 188, 158, 37, 163, 61, 149, 200, 192, 188, 184, 12, 0, 190, 243, 231, 135, 190, 217, 184, 228, 189, 225, 245, 144, 189, 208, 11, 110, 61, 99, 57, 210, 189, 168, 127, 144, 60, 51, 56, 29, 190, 91, 170, 174, 190, 34, 215, 108, 62, 192, 210, 248, 61, 247, 228, 95, 62, 180, 4, 79, 61, 187, 164, 68, 62, 193, 108, 231, 61, 209, 143, 220, 60, 59, 220, 86, 62, 211, 125, 206, 188, 178, 235, 210, 190, 92, 224, 163, 61, 243, 127, 34, 62, 63, 253, 112, 62, 205, 227, 1, 190, 33, 62, 199, 60, 226, 64, 3, 62, 53, 234, 162, 61, 161, 22, 45, 190, 157, 103, 242, 189, 41, 19, 4, 189, 153, 183, 109, 61, 65, 6, 33, 190, 201, 74, 85, 61, 155, 117, 26, 62, 57, 38, 52, 190, 210, 230, 26, 189, 8, 132, 185, 60, 235, 29, 45, 190, 198, 66, 45, 190, 124, 236, 187, 61, 202, 102, 245, 184, 75, 157, 173, 189, 149, 250, 183, 189, 252, 140, 33, 190, 1, 60, 7, 62, 132, 76, 11, 62, 124, 242, 217, 189, 60, 167, 26, 190, 224, 132, 185, 60, 206, 154, 161, 188, 229, 201, 161, 61, 15, 154, 8, 62, 76, 198, 10, 62, 31, 218, 197, 61, 73, 209, 73, 188, 75, 231, 29, 62, 135, 165, 10, 62, 182, 31, 85, 61, 57, 85, 254, 60, 130, 66, 134, 189, 33, 165, 102, 189, 93, 195, 188, 190, 208, 112, 57, 62, 83, 88, 38, 61, 105, 62, 143, 188, 65, 160, 180, 187, 106, 158, 81, 190, 195, 96, 163, 59, 164, 93, 163, 61, 196, 200, 38, 189, 87, 212, 69, 62, 237, 141, 48, 190, 182, 50, 178, 61, 32, 95, 126, 189, 161, 217, 104, 62, 148, 5, 181, 61, 227, 3, 164, 62, 25, 63, 30, 190, 142, 48, 140, 185, 155, 170, 221, 61, 126, 60, 172, 189, 61, 6, 169, 189, 128, 11, 14, 190, 69, 190, 47, 190, 4, 223, 122, 189, 6, 70, 243, 188, 72, 31, 76, 190, 143, 247, 132, 62, 255, 151, 17, 62, 214, 158, 83, 188, 189, 229, 97, 61, 207, 193, 34, 191, 100, 107, 117, 190, 176, 22, 65, 191, 199, 68, 117, 191, 223, 63, 93, 191, 93, 81, 32, 61, 104, 184, 234, 190, 139, 103, 166, 190, 70, 89, 144, 62, 81, 110, 221, 189, 211, 113, 119, 62, 8, 33, 199, 189, 226, 171, 95, 62, 175, 9, 146, 190, 87, 98, 11, 189, 115, 250, 251, 189, 69, 198, 200, 190, 48, 79, 141, 62, 140, 181, 18, 190, 54, 11, 142, 188, 80, 63, 251, 189, 82, 51, 151, 62, 144, 94, 122, 189, 154, 45, 111, 62, 106, 119, 156, 190, 211, 212, 35, 189, 251, 63, 136, 62, 222, 144, 165, 61, 92, 19, 231, 62, 233, 166, 150, 59, 242, 103, 227, 62, 41, 77, 254, 189, 229, 178, 66, 190, 50, 175, 163, 60, 99, 249, 42, 191, 203, 207, 156, 189, 199, 21, 159, 61, 189, 109, 34, 62, 192, 153, 107, 190, 85, 36, 140, 190, 180, 183, 136, 62, 44, 5, 236, 189, 234, 244, 153, 62, 38, 204, 34, 190, 36, 134, 41, 62, 200, 8, 226, 60, 145, 31, 154, 190, 199, 179, 179, 61, 16, 193, 91, 61, 53, 232, 142, 62, 170, 60, 67, 62, 217, 253, 148, 189, 43, 102, 36, 189, 147, 124, 138, 60, 66, 85, 138, 62, 223, 137, 72, 62, 169, 145, 7, 190, 225, 130, 170, 189, 144, 249, 1, 62, 87, 5, 8, 189, 227, 243, 80, 62, 227, 139, 94, 190, 98, 209, 224, 189, 48, 219, 87, 61, 202, 28, 108, 62, 52, 160, 175, 188, 142, 23, 2, 191, 78, 68, 186, 188, 131, 59, 70, 190, 120, 254, 153, 189, 191, 108, 211, 190, 116, 23, 169, 186, 224, 147, 35, 190, 80, 244, 139, 61, 221, 221, 161, 188, 191, 87, 205, 61, 170, 24, 76, 190, 148, 83, 215, 61, 104, 190, 193, 61, 204, 243, 201, 61, 197, 5, 104, 189, 230, 15, 248, 59, 182, 138, 215, 61, 150, 77, 55, 62, 121, 215, 60, 62, 244, 251, 5, 190, 160, 160, 205, 61, 149, 25, 193, 61, 138, 251, 58, 62, 32, 212, 68, 62, 128, 193, 6, 190, 185, 194, 139, 60, 84, 60, 151, 62, 254, 209, 132, 190, 195, 23, 196, 190, 182, 111, 238, 188, 93, 229, 118, 62, 199, 24, 142, 62, 226, 121, 127, 189, 219, 61, 199, 61, 39, 181, 14, 62, 66, 101, 218, 190, 69, 18, 223, 189, 147, 8, 177, 188, 127, 140, 132, 190, 55, 234, 47, 189, 2, 17, 61, 190, 209, 166, 192, 187, 127, 97, 197, 190, 20, 82, 1, 60, 155, 81, 51, 62, 235, 33, 84, 62, 61, 70, 148, 62, 254, 247, 32, 190, 236, 220, 20, 190, 34, 86, 190, 189, 234, 217, 209, 61, 120, 1, 157, 61, 1, 69, 209, 189, 236, 135, 207, 189, 167, 26, 139, 62, 64, 234, 114, 62, 208, 45, 140, 60, 19, 49, 254, 189, 253, 236, 128, 190, 93, 10, 109, 61, 156, 187, 189, 190, 118, 253, 113, 62, 127, 127, 115, 61, 87, 59, 117, 62, 90, 41, 198, 187, 108, 176, 97, 189, 114, 120, 69, 61, 118, 25, 71, 190, 42, 74, 147, 61, 8, 203, 20, 60, 216, 231, 20, 190, 100, 227, 3, 190, 246, 169, 162, 189, 67, 164, 157, 61, 83, 17, 19, 191, 231, 229, 88, 62, 177, 145, 154, 189, 106, 82, 144, 61, 37, 51, 57, 62, 140, 152, 143, 190, 156, 85, 185, 189, 124, 29, 168, 61, 78, 227, 197, 61, 31, 238, 169, 189, 216, 208, 175, 190, 74, 33, 13, 62, 87, 250, 57, 62, 236, 63, 2, 62, 235, 233, 247, 188, 81, 44, 171, 190, 57, 85, 175, 190, 47, 7, 12, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {125, 37, 45, 62, 87, 48, 102, 61, 194, 65, 146, 62, 185, 227, 61, 62, 10, 89, 172, 189, 216, 105, 151, 62, 85, 209, 162, 62, 114, 138, 25, 189, 102, 253, 101, 61, 160, 58, 231, 61, 163, 231, 143, 61, 236, 252, 189, 61, 32, 46, 112, 62, 53, 144, 191, 61, 19, 205, 8, 189, 145, 24, 96, 61, 172, 143, 33, 188, 71, 184, 4, 189, 103, 14, 134, 62, 228, 42, 36, 62, 26, 195, 212, 61, 84, 252, 237, 61, 193, 185, 73, 190, 252, 216, 149, 62, 245, 1, 89, 61, 85, 4, 80, 190, 59, 157, 74, 62, 64, 104, 137, 62, 60, 29, 23, 189, 148, 88, 227, 61, 178, 91, 17, 62, 23, 101, 79, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 182, 251, 190, 106, 58, 11, 190, 88, 128, 148, 62, 8, 41, 35, 191, 23, 117, 99, 61, 140, 145, 14, 62, 134, 66, 86, 63, 91, 120, 37, 191, 43, 65, 24, 190, 144, 12, 126, 191, 21, 14, 149, 190, 153, 65, 254, 190, 228, 188, 181, 62, 164, 139, 4, 191, 137, 83, 149, 189, 238, 184, 130, 61, 199, 183, 217, 190, 151, 199, 38, 190, 163, 136, 121, 191, 220, 186, 148, 190, 52, 140, 42, 61, 245, 162, 15, 190, 156, 169, 20, 63, 158, 54, 50, 60, 37, 85, 54, 62, 99, 213, 93, 189, 159, 93, 15, 188, 152, 150, 60, 63, 131, 21, 180, 61, 118, 194, 6, 62, 170, 173, 199, 190, 139, 9, 206, 190, 47, 55, 64, 61, 31, 207, 184, 62, 185, 171, 163, 190, 175, 146, 204, 189, 52, 135, 25, 190, 146, 225, 77, 190, 62, 22, 161, 188, 195, 230, 18, 61, 45, 200, 236, 189, 225, 218, 127, 61, 70, 172, 164, 189, 47, 91, 217, 189, 171, 166, 76, 62, 24, 37, 50, 62, 114, 35, 15, 62, 42, 93, 38, 61, 196, 131, 243, 189, 200, 0, 23, 61, 12, 58, 50, 61, 42, 90, 200, 189, 219, 142, 76, 190, 74, 223, 49, 190, 109, 110, 238, 62, 112, 35, 133, 190, 246, 215, 45, 189, 122, 220, 230, 59, 210, 84, 35, 190, 145, 139, 117, 189, 109, 165, 93, 62, 171, 79, 90, 190, 216, 88, 20, 190, 194, 1, 65, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 214, 5, 62, 207, 36, 25, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {222, 165, 170, 62, 255, 39, 56, 190, 122, 146, 2, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {174, 132, 167, 63, 112, 72, 108, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0053/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}