// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {114, 174, 209, 190, 90, 183, 215, 63, 76, 5, 241, 62, 62, 81, 39, 63, 198, 146, 28, 63, 203, 185, 41, 62, 107, 125, 224, 190, 119, 123, 88, 191, 229, 235, 243, 190, 83, 173, 25, 63, 118, 3, 143, 63, 18, 171, 21, 62, 253, 216, 49, 63, 84, 236, 47, 63, 127, 113, 134, 62, 75, 157, 12, 191, 127, 112, 242, 190, 142, 124, 227, 190, 244, 215, 91, 62, 158, 111, 246, 62, 114, 192, 203, 190, 98, 243, 32, 63, 24, 140, 179, 191, 135, 56, 201, 190, 114, 42, 61, 63, 14, 56, 226, 62, 136, 7, 138, 62, 65, 101, 169, 60, 89, 109, 252, 62, 92, 9, 200, 62, 110, 50, 11, 190, 37, 0, 254, 190, 146, 99, 50, 63, 255, 16, 192, 62, 180, 37, 52, 191, 128, 127, 167, 62, 164, 112, 238, 60, 168, 131, 229, 190, 47, 56, 12, 63, 121, 194, 34, 63, 165, 152, 244, 62, 22, 124, 6, 63, 129, 2, 0, 63, 54, 147, 181, 191, 47, 69, 164, 190, 241, 143, 169, 190, 49, 136, 143, 190, 114, 150, 194, 190, 76, 211, 168, 62, 214, 134, 15, 62, 29, 159, 7, 63, 54, 179, 87, 63, 67, 50, 12, 191, 46, 120, 202, 62, 199, 61, 40, 190, 74, 208, 145, 191, 119, 137, 213, 190, 231, 232, 143, 62, 205, 60, 78, 191, 83, 140, 195, 62, 219, 188, 168, 62, 49, 26, 100, 62, 102, 253, 14, 191, 146, 174, 193, 62, 45, 241, 175, 62, 189, 170, 219, 190, 230, 132, 50, 63, 2, 192, 60, 62, 194, 92, 95, 188, 58, 51, 214, 189, 152, 116, 25, 63, 200, 172, 244, 60, 242, 53, 8, 190, 175, 82, 75, 190, 67, 221, 125, 190, 23, 236, 204, 190, 162, 219, 92, 63, 65, 124, 194, 61, 156, 117, 46, 62, 168, 182, 243, 190, 93, 22, 2, 63, 196, 156, 23, 63, 114, 237, 49, 63, 61, 118, 189, 188, 80, 252, 124, 191, 49, 207, 146, 61, 108, 9, 226, 188, 15, 109, 19, 190, 77, 127, 169, 191, 95, 111, 5, 191, 253, 51, 19, 63, 115, 106, 172, 191, 158, 107, 68, 190, 122, 206, 12, 63, 149, 70, 59, 63, 116, 145, 218, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {28, 32, 18, 191, 220, 233, 17, 62, 250, 86, 190, 61, 103, 34, 202, 62, 154, 117, 222, 190, 196, 238, 58, 190, 73, 40, 122, 61, 186, 12, 175, 190, 191, 142, 72, 191, 148, 222, 31, 191, 77, 163, 199, 190, 209, 235, 138, 190, 87, 244, 88, 62, 175, 80, 48, 61, 182, 129, 87, 190, 1, 236, 73, 62, 184, 63, 120, 189, 41, 93, 19, 191, 179, 227, 239, 62, 87, 170, 107, 62, 236, 131, 198, 61, 116, 7, 244, 62, 235, 30, 1, 63, 208, 47, 218, 62, 238, 214, 176, 189, 175, 88, 58, 191, 58, 31, 102, 61, 144, 97, 111, 62, 203, 6, 1, 63, 141, 77, 45, 60, 227, 49, 173, 62, 181, 224, 94, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 60, 131, 190, 49, 164, 152, 189, 170, 143, 164, 61, 249, 143, 228, 190, 192, 215, 62, 63, 228, 33, 1, 190, 157, 26, 78, 190, 114, 163, 71, 63, 195, 184, 83, 63, 217, 143, 30, 62, 141, 11, 163, 62, 236, 69, 34, 62, 83, 182, 120, 62, 132, 149, 46, 190, 66, 190, 19, 63, 216, 193, 73, 190, 36, 102, 211, 189, 209, 187, 1, 62, 10, 247, 205, 62, 15, 67, 132, 62, 53, 190, 208, 189, 208, 224, 173, 190, 119, 177, 87, 61, 79, 126, 165, 189, 140, 196, 169, 189, 0, 230, 214, 190, 45, 218, 126, 62, 219, 150, 19, 189, 49, 135, 65, 190, 34, 89, 197, 61, 23, 185, 54, 61, 160, 128, 5, 61, 142, 151, 141, 61, 84, 158, 105, 62, 51, 48, 197, 189, 126, 133, 241, 62, 209, 192, 163, 190, 30, 33, 175, 61, 106, 196, 2, 62, 15, 15, 116, 191, 111, 219, 100, 191, 213, 86, 19, 190, 221, 212, 27, 62, 183, 22, 143, 61, 120, 246, 21, 62, 0, 226, 141, 60, 254, 193, 132, 191, 161, 188, 2, 190, 123, 205, 2, 190, 15, 104, 136, 190, 90, 189, 161, 189, 214, 232, 186, 189, 119, 68, 13, 62, 76, 125, 160, 61, 45, 67, 6, 61, 73, 245, 189, 62, 76, 26, 220, 61, 172, 188, 242, 190, 48, 50, 178, 60, 237, 244, 26, 62, 133, 159, 215, 61, 207, 236, 78, 190, 94, 114, 23, 191, 6, 230, 79, 190, 74, 220, 168, 62, 152, 249, 36, 62, 14, 144, 99, 190, 241, 86, 159, 62, 184, 149, 163, 190, 145, 50, 146, 190, 64, 200, 170, 62, 29, 149, 174, 61, 199, 37, 225, 190, 244, 217, 66, 61, 106, 152, 102, 62, 145, 25, 106, 190, 214, 152, 84, 62, 38, 165, 216, 61, 104, 220, 198, 188, 29, 144, 110, 189, 30, 212, 149, 189, 164, 40, 69, 61, 182, 93, 214, 189, 122, 181, 169, 62, 155, 195, 126, 62, 165, 225, 149, 61, 237, 227, 113, 61, 211, 194, 226, 61, 31, 129, 140, 188, 197, 74, 228, 62, 216, 194, 24, 190, 78, 167, 25, 62, 2, 194, 79, 62, 102, 79, 139, 62, 136, 118, 125, 62, 188, 33, 216, 189, 60, 214, 167, 191, 68, 40, 8, 190, 51, 65, 193, 188, 175, 92, 172, 189, 8, 184, 168, 189, 146, 155, 230, 189, 193, 114, 208, 61, 114, 45, 202, 190, 21, 75, 155, 61, 192, 40, 43, 191, 63, 236, 139, 190, 169, 22, 172, 62, 100, 180, 206, 60, 195, 244, 27, 189, 117, 131, 218, 190, 23, 141, 38, 61, 71, 49, 133, 60, 252, 28, 199, 189, 66, 194, 137, 62, 1, 102, 40, 62, 63, 161, 139, 190, 135, 85, 166, 190, 242, 211, 150, 190, 19, 251, 66, 190, 154, 165, 121, 190, 119, 76, 208, 189, 72, 215, 75, 62, 166, 245, 211, 189, 126, 13, 87, 62, 252, 130, 129, 191, 227, 166, 243, 190, 178, 48, 8, 191, 122, 47, 181, 61, 118, 198, 14, 190, 118, 23, 24, 189, 105, 167, 186, 189, 180, 227, 51, 62, 192, 57, 41, 60, 152, 91, 139, 59, 119, 13, 76, 189, 96, 188, 51, 62, 250, 124, 241, 188, 210, 205, 240, 189, 208, 40, 34, 190, 145, 199, 89, 60, 51, 241, 49, 189, 169, 91, 129, 189, 56, 75, 28, 62, 225, 9, 120, 189, 98, 131, 226, 61, 230, 124, 204, 189, 141, 50, 21, 188, 39, 1, 5, 61, 28, 233, 104, 189, 98, 105, 26, 190, 225, 122, 232, 189, 89, 19, 182, 189, 247, 85, 62, 189, 105, 122, 178, 184, 27, 253, 189, 188, 76, 23, 58, 60, 90, 221, 153, 61, 17, 168, 122, 185, 227, 64, 91, 189, 4, 220, 76, 190, 16, 95, 170, 61, 137, 192, 22, 62, 19, 36, 225, 189, 114, 3, 105, 191, 228, 91, 51, 62, 50, 233, 193, 60, 226, 51, 79, 61, 112, 137, 134, 191, 225, 231, 213, 190, 248, 120, 30, 62, 93, 224, 34, 61, 194, 248, 56, 61, 33, 11, 4, 190, 207, 69, 19, 61, 64, 140, 39, 61, 242, 219, 99, 190, 240, 51, 41, 62, 110, 158, 22, 62, 77, 79, 185, 62, 9, 16, 13, 62, 184, 51, 45, 62, 60, 65, 192, 61, 203, 5, 221, 61, 221, 145, 251, 188, 156, 50, 93, 189, 211, 74, 24, 61, 67, 201, 49, 189, 50, 73, 99, 62, 128, 48, 168, 187, 51, 151, 204, 61, 146, 167, 5, 190, 248, 116, 186, 61, 126, 204, 197, 61, 72, 3, 239, 190, 46, 172, 190, 188, 243, 0, 129, 191, 87, 141, 147, 191, 201, 98, 254, 190, 147, 189, 165, 62, 43, 97, 79, 191, 212, 34, 212, 190, 70, 39, 29, 62, 114, 106, 46, 62, 143, 246, 253, 61, 62, 179, 128, 190, 138, 241, 195, 62, 73, 36, 71, 62, 65, 81, 129, 190, 95, 221, 143, 62, 114, 48, 143, 190, 149, 44, 175, 62, 155, 102, 132, 62, 106, 62, 135, 60, 136, 16, 128, 61, 168, 18, 49, 62, 127, 229, 164, 62, 41, 162, 201, 62, 155, 22, 17, 190, 58, 99, 80, 189, 85, 154, 48, 61, 66, 188, 206, 62, 235, 38, 189, 62, 175, 11, 176, 190, 16, 70, 119, 190, 3, 71, 227, 62, 16, 240, 170, 61, 217, 243, 202, 62, 248, 179, 224, 61, 248, 68, 198, 60, 95, 180, 57, 62, 96, 89, 6, 191, 122, 81, 16, 63, 101, 128, 186, 62, 117, 175, 248, 190, 45, 144, 199, 62, 32, 164, 211, 190, 184, 53, 120, 62, 203, 121, 22, 191, 208, 161, 232, 58, 200, 42, 101, 62, 34, 83, 3, 63, 63, 68, 245, 60, 34, 202, 166, 190, 207, 160, 54, 60, 26, 237, 38, 61, 58, 229, 47, 62, 30, 168, 48, 62, 233, 42, 151, 190, 56, 222, 57, 191, 230, 236, 213, 62, 187, 77, 219, 61, 203, 201, 197, 189, 23, 9, 55, 190, 60, 235, 185, 190, 161, 1, 94, 62, 90, 125, 167, 189, 171, 167, 209, 61, 87, 164, 56, 62, 165, 155, 253, 61, 130, 1, 183, 187, 167, 172, 20, 190, 191, 64, 168, 189, 212, 12, 239, 189, 182, 133, 117, 62, 53, 65, 6, 62, 78, 48, 157, 190, 219, 200, 157, 189, 112, 195, 66, 190, 215, 30, 122, 61, 57, 61, 152, 190, 16, 203, 84, 190, 130, 86, 129, 62, 144, 247, 85, 62, 168, 180, 0, 189, 36, 13, 136, 190, 247, 99, 55, 189, 125, 93, 83, 60, 110, 39, 141, 62, 172, 22, 178, 61, 255, 217, 6, 190, 84, 39, 40, 62, 243, 127, 8, 188, 168, 115, 215, 61, 134, 209, 57, 61, 99, 104, 25, 190, 81, 210, 244, 189, 187, 192, 9, 61, 214, 47, 174, 191, 172, 133, 238, 190, 112, 152, 29, 190, 202, 137, 1, 190, 183, 143, 245, 189, 14, 110, 141, 189, 162, 79, 48, 189, 80, 59, 167, 190, 65, 34, 86, 190, 189, 240, 47, 191, 222, 10, 45, 190, 44, 254, 237, 61, 128, 194, 13, 189, 96, 248, 158, 190, 86, 235, 198, 190, 159, 43, 85, 62, 161, 23, 229, 189, 74, 218, 246, 187, 234, 240, 196, 62, 42, 52, 167, 62, 100, 195, 173, 190, 62, 91, 11, 191, 224, 185, 227, 189, 55, 126, 106, 189, 151, 210, 225, 190, 122, 11, 240, 61, 153, 89, 111, 62, 177, 19, 8, 190, 190, 191, 81, 62, 174, 40, 215, 191, 196, 221, 82, 190, 72, 69, 192, 190, 98, 71, 80, 189, 95, 165, 165, 62, 20, 45, 0, 58, 126, 146, 221, 61, 37, 197, 59, 190, 23, 182, 105, 61, 215, 31, 50, 62, 191, 17, 19, 191, 161, 0, 97, 62, 56, 3, 77, 189, 27, 228, 244, 190, 31, 14, 225, 60, 51, 10, 186, 189, 3, 50, 29, 62, 50, 44, 27, 191, 98, 248, 188, 60, 200, 87, 184, 61, 196, 185, 143, 62, 112, 164, 34, 190, 33, 236, 60, 190, 57, 77, 203, 189, 255, 6, 11, 62, 93, 242, 125, 62, 90, 125, 172, 61, 19, 34, 32, 190, 141, 194, 130, 62, 42, 137, 72, 62, 190, 214, 104, 62, 243, 235, 0, 190, 95, 135, 166, 190, 232, 70, 72, 61, 154, 208, 148, 62, 7, 26, 146, 191, 31, 136, 74, 62, 229, 42, 141, 62, 249, 175, 117, 62, 211, 1, 168, 190, 32, 65, 191, 62, 251, 44, 42, 189, 166, 202, 18, 191, 89, 249, 73, 191, 145, 96, 74, 191, 132, 70, 22, 191, 131, 123, 101, 62, 99, 166, 119, 190, 28, 17, 151, 62, 127, 1, 27, 191, 244, 3, 49, 62, 235, 249, 177, 61, 188, 184, 160, 62, 150, 48, 127, 62, 82, 11, 167, 190, 11, 183, 115, 190, 71, 215, 80, 189, 78, 123, 206, 61, 86, 140, 187, 61, 198, 128, 169, 190, 210, 88, 55, 63, 167, 129, 160, 62, 134, 220, 119, 62, 247, 122, 172, 62, 50, 200, 179, 190, 151, 76, 162, 60, 140, 75, 132, 189, 89, 82, 220, 62, 5, 19, 45, 190, 18, 41, 189, 61, 186, 11, 129, 190, 78, 134, 161, 191, 37, 11, 12, 190, 225, 144, 171, 189, 249, 10, 221, 61, 37, 141, 83, 191, 161, 222, 11, 191, 202, 91, 168, 62, 158, 107, 40, 61, 156, 38, 171, 62, 61, 42, 7, 190, 126, 169, 147, 62, 160, 126, 94, 62, 128, 96, 0, 190, 253, 253, 242, 189, 212, 192, 168, 61, 244, 74, 223, 62, 168, 6, 18, 62, 187, 241, 129, 60, 26, 167, 73, 190, 85, 163, 126, 189, 141, 9, 174, 62, 206, 229, 245, 62, 222, 76, 2, 190, 188, 93, 90, 190, 20, 66, 146, 61, 228, 191, 134, 62, 124, 66, 210, 62, 14, 216, 153, 190, 17, 211, 148, 191, 162, 95, 135, 62, 123, 188, 156, 61, 111, 186, 158, 62, 216, 19, 128, 190, 248, 155, 24, 62, 186, 38, 70, 62, 55, 216, 74, 191, 90, 71, 230, 61, 50, 91, 173, 190, 81, 186, 71, 62, 42, 80, 94, 62, 53, 184, 134, 190, 222, 203, 213, 189, 222, 238, 87, 191, 232, 13, 124, 62, 70, 19, 2, 190, 68, 103, 239, 61, 147, 190, 4, 62, 124, 25, 82, 189, 125, 189, 71, 189, 205, 47, 11, 190, 165, 205, 54, 62, 190, 158, 224, 61, 73, 140, 105, 190, 68, 31, 242, 190, 159, 222, 43, 189, 32, 186, 29, 62, 249, 71, 124, 62, 130, 135, 219, 190, 65, 132, 200, 190, 89, 121, 133, 189, 226, 216, 138, 58, 73, 107, 17, 62, 185, 14, 152, 189, 229, 35, 145, 61, 86, 56, 86, 190, 51, 101, 174, 189, 47, 136, 234, 61, 231, 31, 207, 188, 184, 168, 18, 190, 130, 213, 124, 189, 149, 129, 44, 190, 185, 92, 205, 190, 91, 216, 93, 190, 169, 214, 188, 189, 22, 48, 233, 189, 82, 196, 38, 186, 101, 4, 42, 188, 236, 112, 133, 190, 109, 200, 216, 61, 106, 71, 210, 60, 78, 112, 177, 189, 243, 7, 208, 61, 252, 183, 85, 189, 127, 246, 60, 189, 20, 88, 236, 189, 71, 105, 39, 61, 86, 192, 34, 190, 90, 7, 167, 61, 165, 118, 49, 190, 186, 5, 233, 59, 4, 144, 38, 62, 153, 87, 142, 190, 191, 178, 209, 189, 251, 18, 2, 190, 201, 250, 191, 61, 41, 79, 131, 189, 134, 170, 171, 189, 218, 19, 252, 61, 151, 154, 237, 188, 117, 134, 117, 62, 84, 53, 255, 189, 99, 163, 130, 61, 175, 10, 36, 190, 57, 111, 181, 190, 103, 160, 208, 189, 29, 245, 169, 60, 134, 221, 71, 62, 247, 96, 38, 190, 166, 124, 20, 61, 144, 109, 47, 190, 64, 106, 52, 189, 79, 82, 1, 191, 125, 147, 138, 189, 173, 146, 58, 190, 239, 213, 8, 190, 95, 28, 156, 189, 19, 95, 89, 61, 242, 86, 52, 190, 41, 47, 167, 190, 197, 234, 177, 190, 187, 194, 150, 190, 179, 151, 140, 61, 129, 27, 64, 62, 57, 211, 56, 190, 238, 112, 201, 191, 241, 235, 98, 191, 95, 235, 125, 61, 99, 109, 72, 191, 251, 227, 248, 190, 168, 185, 57, 62, 11, 53, 25, 59, 137, 191, 136, 189, 215, 226, 7, 190, 22, 152, 75, 191, 16, 199, 72, 188, 239, 107, 67, 62, 149, 204, 165, 59, 77, 85, 219, 189, 148, 208, 246, 62, 44, 232, 11, 62, 25, 142, 44, 61, 82, 64, 111, 190, 53, 1, 82, 62, 65, 83, 55, 61, 239, 232, 140, 190, 34, 233, 5, 190, 48, 88, 180, 189, 243, 174, 60, 190, 171, 253, 72, 189, 249, 244, 104, 190, 52, 125, 151, 62, 1, 86, 143, 190, 215, 162, 172, 62, 27, 109, 205, 188, 241, 81, 162, 62, 189, 254, 70, 191, 169, 218, 146, 191, 32, 171, 74, 191, 168, 132, 241, 61, 202, 214, 149, 191, 240, 88, 6, 190, 172, 182, 198, 60, 235, 62, 120, 189, 113, 94, 35, 189, 86, 47, 34, 190, 58, 136, 189, 190, 192, 27, 76, 61, 142, 139, 8, 190, 159, 212, 180, 60, 159, 95, 222, 189, 120, 160, 250, 62, 77, 91, 50, 62, 142, 169, 98, 190, 75, 47, 79, 189, 108, 218, 48, 62, 231, 69, 101, 62, 44, 203, 40, 189, 238, 47, 82, 190, 79, 187, 192, 187, 153, 248, 155, 60, 42, 179, 145, 190, 238, 27, 173, 61, 23, 45, 38, 62, 12, 24, 24, 190, 194, 154, 10, 62, 112, 225, 67, 61, 248, 65, 138, 62, 154, 57, 189, 190, 116, 226, 255, 191, 146, 13, 149, 190, 221, 26, 134, 62, 225, 3, 23, 191, 243, 55, 153, 189, 200, 46, 188, 62, 139, 55, 150, 187, 171, 38, 26, 190, 120, 246, 34, 62, 23, 240, 205, 190, 209, 123, 146, 190, 191, 155, 239, 62, 151, 38, 189, 190, 167, 67, 33, 60, 194, 42, 86, 190, 6, 34, 33, 62, 154, 0, 82, 60, 47, 20, 52, 61, 10, 255, 181, 62, 133, 199, 173, 61, 255, 38, 25, 190, 5, 211, 51, 190, 175, 114, 153, 191, 30, 215, 153, 61, 62, 14, 51, 188, 141, 107, 222, 60, 105, 66, 242, 62, 31, 54, 248, 190, 92, 23, 214, 62, 36, 16, 244, 189, 56, 95, 178, 190, 194, 177, 21, 191, 29, 178, 136, 190, 156, 43, 34, 62, 173, 44, 1, 188, 237, 210, 164, 62, 101, 245, 133, 189, 143, 90, 13, 62, 213, 19, 37, 61, 175, 16, 5, 191, 38, 207, 201, 61, 169, 54, 167, 61, 165, 123, 204, 190, 221, 48, 21, 62, 254, 36, 176, 189, 222, 200, 149, 62, 216, 41, 67, 191, 140, 100, 97, 62, 196, 253, 139, 59, 212, 243, 154, 62, 83, 94, 154, 189, 19, 246, 248, 188, 212, 109, 250, 58, 56, 86, 38, 187, 56, 171, 137, 62, 120, 34, 207, 61, 40, 177, 239, 189, 155, 193, 152, 62, 51, 74, 172, 188, 104, 150, 11, 187, 120, 203, 203, 187, 31, 64, 164, 190, 129, 7, 28, 60, 165, 132, 120, 62, 156, 223, 203, 189, 136, 1, 156, 62, 245, 70, 52, 190, 5, 237, 178, 62, 254, 29, 162, 190, 73, 50, 10, 190, 220, 104, 3, 62, 121, 13, 148, 190, 61, 94, 165, 190, 226, 128, 22, 62, 36, 144, 172, 61, 198, 72, 72, 60, 43, 255, 91, 189, 193, 102, 31, 62, 63, 136, 169, 190, 57, 86, 52, 62, 32, 2, 14, 62, 203, 221, 89, 189, 164, 86, 220, 60, 77, 231, 139, 189, 197, 193, 28, 61, 47, 23, 239, 188, 64, 243, 6, 62, 100, 51, 54, 62, 235, 232, 13, 190, 112, 27, 32, 62, 193, 215, 146, 188, 111, 195, 162, 61, 222, 66, 127, 62, 7, 34, 210, 189, 63, 75, 245, 61, 169, 214, 8, 61, 233, 184, 118, 190, 215, 181, 115, 62, 2, 66, 251, 60, 181, 89, 15, 62, 46, 134, 174, 190, 175, 23, 220, 189, 5, 207, 170, 60, 17, 232, 133, 190, 215, 223, 114, 190, 17, 254, 16, 190, 82, 168, 149, 190, 93, 6, 139, 188, 75, 96, 37, 60, 197, 91, 14, 188, 144, 99, 68, 191, 72, 30, 10, 189, 190, 149, 110, 61, 55, 234, 207, 61, 128, 63, 188, 185, 128, 158, 235, 189, 181, 99, 94, 61, 47, 72, 147, 61, 209, 76, 164, 61, 49, 160, 106, 62, 86, 203, 129, 190, 86, 246, 204, 62, 187, 93, 112, 62, 95, 249, 126, 62, 104, 166, 77, 188, 192, 145, 159, 190, 99, 17, 162, 189, 91, 167, 2, 62, 115, 12, 187, 60, 14, 143, 194, 62, 13, 32, 23, 191, 107, 14, 133, 62, 135, 58, 49, 63, 220, 21, 79, 190, 102, 204, 213, 62, 155, 211, 231, 190, 30, 237, 145, 62, 255, 47, 166, 62, 17, 59, 24, 190, 202, 41, 214, 189, 68, 120, 127, 190, 47, 219, 135, 62, 36, 53, 26, 191, 167, 220, 106, 190, 175, 137, 58, 62, 80, 179, 67, 61, 97, 202, 171, 190, 98, 246, 140, 190, 144, 97, 142, 189, 175, 49, 110, 62, 127, 136, 127, 62, 238, 90, 18, 62, 33, 237, 183, 61, 129, 11, 199, 189, 181, 104, 174, 188, 46, 110, 172, 61, 169, 251, 248, 61, 138, 39, 143, 191, 243, 25, 16, 191, 33, 85, 139, 62, 252, 31, 6, 62, 60, 67, 57, 62, 233, 193, 1, 61, 184, 94, 168, 61, 17, 177, 130, 190, 46, 12, 151, 188, 185, 162, 72, 61, 135, 94, 134, 190, 94, 70, 73, 60, 46, 166, 23, 190, 145, 14, 43, 189, 134, 214, 190, 188, 102, 121, 154, 189, 169, 167, 190, 187, 149, 69, 50, 191, 118, 57, 181, 61, 195, 17, 253, 61, 191, 160, 186, 60, 243, 229, 141, 190, 48, 237, 40, 62, 1, 152, 144, 61, 181, 62, 130, 189, 149, 211, 216, 61, 46, 218, 143, 62, 83, 232, 83, 189, 181, 13, 138, 62, 31, 134, 194, 61, 211, 61, 19, 62, 92, 156, 22, 62, 35, 174, 170, 190, 49, 76, 55, 189, 21, 95, 161, 188, 55, 101, 89, 62, 96, 10, 176, 61, 144, 242, 155, 188, 126, 211, 128, 62, 250, 151, 30, 61, 60, 185, 111, 61, 170, 0, 106, 62, 83, 233, 250, 60, 254, 32, 212, 62, 231, 127, 50, 189, 123, 218, 109, 190, 110, 240, 247, 190, 42, 186, 24, 190, 58, 202, 249, 189, 92, 154, 135, 58, 135, 1, 102, 189, 219, 106, 205, 190, 175, 35, 195, 61, 157, 101, 58, 62, 20, 124, 191, 61, 165, 131, 231, 61, 68, 80, 105, 62, 79, 15, 236, 61, 70, 101, 182, 61, 96, 111, 121, 62, 231, 99, 42, 191, 168, 110, 12, 191, 103, 229, 4, 62, 146, 200, 13, 62, 77, 221, 173, 62, 20, 113, 42, 190, 238, 172, 73, 61, 226, 64, 3, 62, 53, 234, 162, 61, 161, 22, 45, 190, 157, 103, 242, 189, 41, 19, 4, 189, 153, 183, 109, 61, 65, 6, 33, 190, 201, 74, 85, 61, 155, 117, 26, 62, 57, 38, 52, 190, 210, 230, 26, 189, 8, 132, 185, 60, 235, 29, 45, 190, 198, 66, 45, 190, 124, 236, 187, 61, 202, 102, 245, 184, 75, 157, 173, 189, 149, 250, 183, 189, 252, 140, 33, 190, 1, 60, 7, 62, 132, 76, 11, 62, 124, 242, 217, 189, 60, 167, 26, 190, 224, 132, 185, 60, 206, 154, 161, 188, 229, 201, 161, 61, 15, 154, 8, 62, 76, 198, 10, 62, 31, 218, 197, 61, 73, 209, 73, 188, 75, 231, 29, 62, 135, 165, 10, 62, 245, 28, 163, 189, 217, 215, 16, 190, 42, 226, 64, 60, 38, 169, 128, 190, 219, 6, 0, 191, 172, 55, 113, 62, 56, 4, 49, 190, 212, 91, 183, 60, 163, 26, 243, 189, 201, 5, 131, 190, 166, 240, 25, 189, 136, 70, 156, 60, 169, 123, 138, 189, 173, 174, 204, 61, 108, 43, 220, 189, 226, 103, 251, 61, 27, 143, 7, 190, 157, 31, 42, 62, 49, 195, 38, 62, 252, 93, 117, 62, 131, 83, 132, 190, 208, 220, 27, 190, 124, 143, 157, 189, 181, 24, 146, 190, 193, 12, 61, 189, 30, 164, 121, 190, 60, 196, 94, 190, 58, 125, 134, 190, 0, 108, 239, 188, 245, 207, 205, 189, 161, 59, 132, 62, 3, 215, 139, 61, 71, 2, 95, 190, 139, 45, 35, 60, 148, 113, 58, 191, 76, 98, 199, 190, 83, 142, 146, 191, 226, 225, 102, 191, 79, 183, 100, 191, 10, 168, 19, 190, 217, 180, 107, 191, 247, 87, 213, 190, 44, 96, 130, 62, 244, 96, 118, 189, 43, 29, 107, 62, 178, 92, 231, 189, 203, 48, 193, 62, 175, 34, 4, 189, 234, 225, 68, 189, 41, 189, 228, 189, 222, 87, 233, 190, 100, 16, 154, 62, 53, 239, 29, 190, 12, 32, 72, 190, 54, 124, 95, 189, 89, 111, 13, 62, 198, 59, 189, 62, 150, 249, 153, 62, 40, 136, 148, 190, 21, 162, 155, 189, 61, 3, 174, 62, 190, 196, 51, 62, 189, 41, 52, 63, 251, 235, 118, 189, 176, 217, 44, 63, 64, 230, 104, 190, 245, 240, 88, 190, 109, 236, 13, 189, 109, 160, 100, 191, 239, 228, 16, 189, 236, 236, 50, 62, 146, 252, 156, 62, 173, 78, 11, 191, 200, 200, 128, 190, 59, 173, 152, 62, 241, 1, 107, 189, 85, 6, 167, 62, 76, 255, 217, 189, 255, 119, 154, 62, 68, 78, 193, 60, 119, 37, 113, 190, 206, 13, 57, 61, 185, 126, 220, 188, 234, 5, 166, 62, 243, 193, 98, 62, 202, 144, 251, 189, 168, 231, 64, 189, 246, 167, 10, 189, 13, 8, 132, 62, 209, 62, 105, 63, 54, 179, 137, 189, 72, 60, 13, 190, 106, 200, 12, 189, 183, 53, 211, 188, 181, 97, 162, 62, 25, 176, 72, 190, 50, 125, 160, 190, 7, 40, 183, 60, 89, 0, 179, 62, 49, 188, 15, 189, 55, 160, 56, 191, 23, 244, 137, 61, 168, 219, 186, 189, 120, 81, 140, 189, 66, 5, 115, 191, 61, 46, 141, 187, 192, 184, 190, 189, 156, 213, 17, 62, 181, 73, 126, 59, 190, 199, 166, 61, 65, 54, 79, 190, 134, 147, 64, 62, 186, 220, 223, 61, 177, 221, 159, 61, 122, 225, 181, 59, 79, 30, 254, 59, 182, 136, 14, 62, 44, 148, 31, 62, 180, 142, 36, 62, 252, 220, 45, 190, 81, 177, 19, 62, 175, 93, 182, 188, 118, 186, 106, 62, 155, 102, 61, 62, 123, 84, 80, 190, 155, 22, 247, 61, 95, 214, 149, 62, 251, 164, 140, 190, 16, 216, 144, 190, 179, 72, 204, 59, 26, 129, 70, 62, 83, 62, 172, 62, 227, 98, 195, 189, 17, 17, 67, 61, 157, 110, 112, 61, 78, 98, 249, 190, 113, 29, 69, 190, 27, 117, 86, 189, 132, 155, 168, 190, 162, 54, 157, 189, 249, 14, 139, 189, 234, 153, 80, 60, 42, 84, 215, 190, 230, 160, 35, 189, 82, 237, 62, 62, 62, 164, 122, 62, 110, 111, 136, 62, 114, 130, 188, 189, 33, 158, 40, 190, 177, 230, 177, 189, 69, 181, 243, 61, 123, 204, 251, 61, 45, 65, 201, 189, 108, 4, 192, 62, 34, 190, 158, 62, 61, 3, 126, 62, 5, 44, 184, 61, 21, 104, 111, 190, 148, 47, 89, 190, 173, 114, 132, 61, 45, 9, 1, 191, 161, 66, 133, 62, 176, 254, 49, 189, 55, 150, 149, 62, 131, 109, 236, 188, 214, 205, 59, 190, 202, 18, 161, 61, 114, 184, 100, 190, 160, 245, 58, 62, 156, 173, 210, 187, 94, 93, 22, 190, 210, 131, 112, 189, 228, 132, 7, 60, 63, 236, 156, 61, 63, 243, 27, 191, 225, 75, 51, 62, 96, 35, 185, 189, 16, 97, 15, 62, 205, 229, 40, 62, 102, 235, 84, 190, 52, 199, 82, 189, 31, 122, 3, 62, 85, 138, 1, 62, 207, 103, 44, 189, 229, 84, 155, 190, 112, 167, 78, 62, 133, 126, 84, 62, 222, 108, 34, 62, 226, 136, 170, 189, 143, 83, 8, 191, 94, 1, 160, 190, 58, 37, 223, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {164, 57, 88, 62, 254, 123, 226, 61, 8, 143, 178, 62, 23, 73, 92, 62, 10, 89, 172, 189, 178, 217, 161, 62, 140, 110, 169, 62, 252, 203, 37, 189, 180, 55, 35, 60, 162, 8, 35, 62, 77, 186, 226, 61, 220, 228, 20, 62, 210, 143, 70, 62, 63, 176, 255, 61, 63, 182, 164, 188, 99, 113, 89, 61, 118, 176, 140, 61, 142, 249, 164, 61, 25, 246, 169, 62, 216, 60, 60, 62, 236, 2, 2, 62, 160, 212, 30, 62, 33, 60, 7, 190, 235, 31, 134, 62, 168, 212, 55, 61, 85, 4, 80, 190, 102, 106, 56, 62, 164, 161, 186, 62, 150, 202, 71, 190, 239, 51, 231, 61, 240, 130, 73, 62, 18, 228, 117, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {248, 137, 18, 191, 224, 188, 69, 191, 183, 117, 147, 62, 40, 49, 165, 191, 23, 117, 99, 61, 255, 23, 20, 62, 145, 138, 69, 63, 244, 203, 24, 191, 253, 222, 81, 188, 68, 183, 210, 191, 81, 194, 141, 190, 210, 218, 211, 190, 84, 53, 245, 62, 125, 214, 134, 191, 133, 242, 50, 61, 131, 173, 29, 62, 20, 163, 29, 191, 141, 10, 201, 190, 81, 145, 202, 191, 66, 20, 117, 190, 184, 82, 86, 61, 120, 74, 144, 189, 126, 159, 94, 63, 13, 86, 252, 59, 98, 124, 70, 62, 99, 213, 93, 189, 208, 116, 239, 187, 237, 67, 149, 63, 192, 109, 133, 62, 38, 118, 13, 62, 27, 98, 76, 190, 149, 226, 172, 190, 151, 213, 22, 189, 72, 75, 172, 62, 87, 22, 192, 190, 47, 142, 48, 190, 52, 135, 25, 190, 106, 114, 59, 190, 171, 136, 146, 60, 57, 224, 10, 190, 196, 253, 48, 190, 61, 183, 66, 189, 153, 98, 130, 190, 105, 141, 242, 189, 197, 182, 53, 62, 221, 241, 218, 62, 21, 175, 60, 62, 14, 12, 89, 190, 97, 83, 74, 190, 4, 29, 209, 188, 75, 152, 152, 62, 96, 112, 16, 190, 73, 26, 103, 190, 253, 80, 167, 190, 213, 211, 179, 62, 15, 83, 129, 190, 192, 192, 29, 188, 122, 220, 230, 59, 160, 206, 24, 190, 101, 12, 96, 187, 240, 63, 203, 62, 14, 137, 57, 190, 67, 252, 83, 190, 37, 222, 199, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 55, 68, 62, 67, 0, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {76, 6, 54, 62, 220, 66, 129, 63, 10, 32, 54, 64};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {220, 171, 26, 63, 244, 243, 237, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0053/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}