// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 77, 250, 190, 200, 218, 217, 63, 216, 189, 226, 62, 254, 73, 47, 63, 99, 48, 1, 63, 126, 249, 30, 62, 24, 9, 138, 190, 31, 250, 79, 191, 181, 206, 4, 191, 229, 194, 48, 63, 11, 123, 117, 63, 110, 156, 37, 62, 25, 177, 43, 63, 62, 215, 36, 63, 113, 134, 112, 62, 219, 251, 225, 190, 96, 145, 247, 190, 122, 144, 224, 190, 239, 53, 151, 62, 128, 54, 11, 63, 213, 187, 224, 190, 77, 58, 32, 63, 254, 159, 171, 191, 56, 126, 209, 190, 78, 231, 49, 63, 53, 186, 205, 62, 109, 66, 129, 62, 91, 209, 187, 61, 162, 149, 195, 62, 209, 120, 207, 62, 224, 137, 144, 189, 151, 142, 238, 190, 214, 54, 54, 63, 109, 6, 40, 62, 66, 213, 49, 191, 196, 229, 190, 62, 136, 162, 38, 61, 20, 233, 249, 190, 3, 88, 21, 63, 14, 149, 37, 63, 146, 86, 227, 62, 10, 50, 11, 63, 172, 95, 254, 62, 174, 40, 171, 191, 62, 117, 168, 190, 191, 157, 148, 190, 152, 39, 170, 190, 112, 2, 219, 190, 141, 30, 166, 62, 67, 96, 31, 62, 45, 199, 14, 63, 63, 47, 85, 63, 170, 60, 8, 191, 158, 202, 200, 62, 134, 90, 161, 189, 134, 187, 136, 191, 249, 66, 231, 190, 177, 111, 153, 62, 246, 229, 96, 191, 81, 46, 203, 62, 0, 40, 178, 62, 248, 42, 197, 61, 152, 201, 6, 191, 181, 91, 221, 62, 209, 68, 87, 62, 137, 238, 215, 190, 71, 120, 37, 63, 145, 155, 36, 61, 202, 50, 2, 60, 49, 28, 165, 60, 123, 229, 5, 63, 200, 116, 145, 60, 182, 141, 44, 190, 122, 101, 55, 190, 241, 221, 133, 190, 70, 144, 131, 190, 171, 164, 56, 63, 0, 45, 34, 62, 42, 171, 45, 62, 25, 144, 227, 190, 70, 106, 2, 63, 125, 97, 36, 63, 77, 226, 18, 63, 240, 94, 62, 189, 162, 79, 90, 191, 132, 164, 54, 62, 222, 215, 10, 189, 189, 255, 1, 186, 252, 122, 162, 191, 135, 227, 6, 191, 65, 81, 24, 63, 253, 76, 165, 191, 55, 216, 72, 190, 134, 31, 1, 63, 101, 112, 40, 63, 177, 48, 241, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 247, 5, 191, 123, 71, 30, 62, 204, 88, 21, 188, 90, 130, 173, 62, 62, 37, 221, 190, 108, 103, 164, 190, 215, 121, 184, 61, 7, 222, 152, 190, 170, 139, 65, 191, 255, 69, 255, 190, 232, 81, 177, 190, 139, 82, 133, 190, 121, 217, 91, 62, 159, 159, 144, 61, 58, 91, 77, 190, 162, 72, 84, 62, 216, 220, 35, 189, 229, 15, 8, 191, 188, 232, 246, 62, 143, 139, 141, 62, 214, 70, 55, 62, 15, 245, 26, 63, 124, 131, 18, 63, 85, 24, 253, 62, 126, 200, 16, 188, 226, 102, 51, 191, 32, 199, 174, 61, 13, 222, 145, 62, 227, 81, 234, 62, 64, 55, 4, 61, 149, 214, 175, 62, 61, 190, 70, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {254, 121, 165, 190, 245, 50, 5, 190, 228, 1, 201, 61, 24, 244, 251, 190, 16, 153, 36, 63, 223, 61, 150, 189, 101, 206, 149, 189, 50, 143, 49, 63, 177, 173, 43, 63, 108, 244, 243, 61, 159, 109, 165, 62, 132, 190, 25, 62, 123, 64, 88, 62, 183, 144, 84, 190, 231, 5, 253, 62, 238, 88, 47, 190, 51, 101, 1, 190, 56, 13, 172, 61, 24, 247, 186, 62, 126, 159, 87, 62, 79, 13, 120, 189, 190, 241, 189, 190, 132, 126, 134, 187, 110, 60, 224, 189, 219, 7, 114, 189, 78, 21, 210, 190, 85, 198, 111, 62, 166, 253, 17, 190, 206, 79, 252, 189, 188, 189, 220, 61, 198, 183, 26, 187, 175, 238, 193, 187, 10, 24, 130, 189, 177, 157, 47, 62, 78, 190, 78, 189, 196, 254, 189, 62, 253, 119, 35, 190, 64, 165, 27, 62, 154, 54, 156, 61, 94, 146, 60, 191, 112, 236, 32, 191, 178, 41, 78, 190, 25, 72, 234, 61, 41, 134, 196, 61, 8, 51, 242, 61, 1, 228, 105, 60, 38, 50, 55, 191, 74, 38, 9, 190, 33, 174, 11, 190, 169, 128, 77, 190, 43, 225, 189, 188, 240, 19, 129, 189, 141, 39, 180, 61, 106, 228, 2, 61, 237, 170, 91, 186, 41, 28, 136, 62, 56, 236, 176, 61, 248, 21, 47, 191, 109, 144, 97, 59, 110, 31, 170, 61, 249, 105, 72, 61, 90, 66, 16, 190, 11, 94, 252, 190, 165, 10, 81, 190, 134, 182, 164, 62, 57, 69, 5, 62, 150, 176, 130, 190, 169, 11, 131, 62, 195, 55, 180, 190, 51, 80, 159, 190, 233, 187, 134, 62, 215, 137, 158, 61, 73, 197, 181, 190, 183, 57, 101, 61, 251, 64, 91, 62, 204, 58, 92, 190, 140, 185, 101, 62, 74, 88, 188, 61, 14, 16, 234, 188, 66, 203, 171, 189, 154, 34, 171, 189, 95, 67, 168, 61, 25, 209, 6, 190, 110, 70, 186, 62, 135, 15, 92, 62, 249, 78, 97, 61, 216, 235, 16, 61, 136, 173, 107, 61, 231, 45, 172, 188, 63, 230, 210, 62, 146, 213, 25, 190, 153, 158, 228, 61, 212, 196, 51, 62, 194, 57, 112, 62, 39, 156, 120, 62, 96, 9, 5, 190, 2, 86, 156, 191, 21, 130, 215, 187, 128, 2, 67, 61, 3, 123, 221, 189, 8, 184, 168, 189, 214, 8, 7, 189, 113, 150, 164, 61, 89, 196, 129, 190, 21, 75, 155, 61, 153, 19, 25, 191, 22, 101, 147, 190, 2, 147, 181, 62, 120, 201, 43, 60, 58, 243, 217, 188, 167, 203, 149, 190, 102, 194, 110, 61, 216, 16, 169, 60, 224, 141, 143, 189, 247, 79, 145, 62, 215, 6, 26, 62, 254, 129, 128, 190, 229, 35, 163, 190, 81, 180, 110, 190, 142, 30, 47, 190, 92, 114, 116, 190, 119, 76, 208, 189, 58, 245, 71, 62, 5, 73, 217, 189, 123, 161, 78, 62, 50, 206, 107, 191, 113, 248, 236, 190, 243, 131, 218, 190, 122, 47, 181, 61, 118, 198, 14, 190, 118, 23, 24, 189, 105, 167, 186, 189, 180, 227, 51, 62, 192, 57, 41, 60, 152, 91, 139, 59, 119, 13, 76, 189, 96, 188, 51, 62, 250, 124, 241, 188, 210, 205, 240, 189, 208, 40, 34, 190, 145, 199, 89, 60, 51, 241, 49, 189, 169, 91, 129, 189, 56, 75, 28, 62, 225, 9, 120, 189, 98, 131, 226, 61, 230, 124, 204, 189, 141, 50, 21, 188, 39, 1, 5, 61, 28, 233, 104, 189, 98, 105, 26, 190, 225, 122, 232, 189, 89, 19, 182, 189, 247, 85, 62, 189, 105, 122, 178, 184, 27, 253, 189, 188, 76, 23, 58, 60, 90, 221, 153, 61, 17, 168, 122, 185, 227, 64, 91, 189, 105, 212, 27, 190, 170, 118, 151, 61, 139, 226, 2, 62, 22, 115, 11, 190, 162, 255, 98, 191, 229, 185, 38, 62, 202, 164, 214, 188, 104, 32, 93, 61, 69, 160, 100, 191, 123, 17, 198, 190, 178, 17, 24, 62, 24, 151, 60, 61, 174, 237, 141, 61, 118, 240, 245, 189, 101, 224, 47, 61, 219, 182, 228, 60, 48, 105, 93, 190, 195, 96, 52, 62, 159, 113, 8, 62, 35, 193, 201, 62, 29, 26, 244, 61, 58, 219, 47, 62, 10, 71, 172, 61, 41, 15, 174, 61, 66, 193, 180, 188, 73, 23, 108, 190, 41, 218, 50, 61, 57, 217, 130, 189, 247, 170, 102, 62, 88, 22, 234, 188, 116, 80, 205, 61, 154, 163, 255, 189, 104, 248, 45, 62, 97, 129, 118, 61, 223, 124, 210, 190, 125, 53, 147, 189, 135, 59, 126, 191, 161, 43, 139, 191, 146, 29, 36, 191, 69, 195, 195, 62, 4, 78, 42, 191, 16, 220, 200, 190, 188, 25, 8, 62, 128, 178, 43, 62, 115, 148, 26, 62, 142, 185, 127, 190, 81, 72, 229, 62, 83, 87, 97, 62, 69, 50, 126, 190, 11, 232, 150, 62, 164, 97, 126, 190, 238, 96, 191, 62, 20, 166, 68, 62, 181, 252, 243, 187, 225, 114, 10, 61, 236, 182, 4, 62, 11, 92, 191, 62, 221, 253, 154, 62, 170, 197, 10, 190, 131, 148, 203, 189, 208, 15, 14, 62, 105, 19, 224, 62, 208, 126, 196, 62, 137, 152, 175, 190, 194, 173, 133, 190, 36, 163, 221, 62, 252, 105, 228, 61, 147, 151, 199, 62, 241, 159, 11, 62, 153, 110, 99, 61, 205, 4, 77, 62, 132, 168, 16, 191, 107, 75, 253, 62, 181, 111, 177, 62, 128, 144, 247, 190, 243, 255, 181, 62, 42, 167, 229, 190, 148, 177, 114, 62, 12, 85, 32, 191, 92, 209, 128, 58, 144, 173, 98, 62, 72, 160, 228, 62, 117, 51, 130, 60, 22, 216, 191, 190, 30, 107, 216, 57, 219, 199, 222, 59, 59, 168, 34, 62, 178, 183, 39, 62, 124, 241, 161, 190, 85, 110, 50, 191, 194, 34, 205, 62, 62, 205, 181, 61, 199, 2, 92, 189, 180, 84, 24, 190, 56, 194, 199, 190, 29, 103, 103, 62, 63, 219, 25, 190, 8, 30, 8, 62, 167, 10, 101, 62, 248, 197, 16, 62, 15, 5, 178, 60, 129, 58, 222, 189, 112, 127, 172, 188, 19, 99, 8, 189, 222, 68, 114, 62, 128, 220, 40, 62, 237, 107, 131, 190, 79, 170, 244, 189, 105, 188, 92, 190, 96, 232, 152, 61, 70, 87, 94, 190, 242, 127, 37, 190, 65, 229, 135, 62, 196, 28, 27, 62, 130, 121, 75, 61, 121, 4, 149, 190, 25, 186, 165, 60, 190, 35, 100, 61, 105, 166, 162, 62, 181, 120, 175, 61, 175, 65, 249, 189, 178, 139, 152, 61, 46, 218, 93, 188, 104, 60, 17, 62, 250, 188, 120, 188, 54, 182, 131, 189, 2, 162, 178, 189, 36, 182, 46, 61, 1, 125, 162, 191, 198, 164, 177, 190, 86, 26, 113, 189, 142, 16, 218, 189, 178, 163, 243, 189, 103, 106, 36, 61, 130, 183, 212, 189, 165, 54, 77, 190, 65, 34, 86, 190, 77, 77, 46, 191, 3, 234, 41, 190, 50, 10, 31, 62, 63, 252, 193, 188, 184, 1, 137, 190, 65, 4, 117, 190, 114, 69, 110, 62, 105, 171, 176, 189, 197, 253, 136, 61, 108, 9, 217, 62, 31, 251, 175, 62, 206, 208, 173, 190, 255, 73, 14, 191, 167, 222, 21, 60, 204, 124, 34, 189, 76, 121, 223, 190, 122, 11, 240, 61, 74, 110, 129, 62, 48, 188, 5, 190, 116, 66, 70, 62, 62, 210, 202, 191, 230, 161, 17, 190, 27, 136, 151, 190, 7, 116, 121, 189, 79, 234, 156, 62, 155, 201, 69, 61, 126, 42, 187, 61, 90, 145, 28, 190, 110, 181, 229, 61, 68, 254, 91, 62, 185, 73, 21, 191, 64, 93, 69, 62, 96, 173, 6, 189, 241, 119, 231, 190, 95, 219, 207, 189, 226, 125, 52, 190, 93, 87, 11, 62, 249, 201, 30, 191, 167, 154, 54, 61, 115, 143, 149, 61, 119, 197, 29, 62, 1, 127, 17, 190, 15, 148, 142, 190, 187, 117, 168, 189, 27, 220, 253, 61, 158, 176, 105, 62, 33, 176, 138, 61, 153, 79, 34, 190, 201, 113, 72, 62, 35, 27, 10, 62, 15, 47, 97, 62, 108, 164, 217, 189, 50, 94, 130, 190, 118, 69, 242, 185, 215, 42, 152, 62, 207, 142, 133, 191, 181, 225, 78, 62, 2, 243, 148, 62, 96, 171, 133, 62, 245, 10, 102, 190, 138, 222, 196, 62, 187, 229, 148, 60, 46, 69, 26, 191, 14, 33, 0, 191, 173, 200, 226, 190, 78, 230, 233, 190, 155, 202, 23, 62, 189, 9, 171, 190, 88, 14, 159, 62, 96, 82, 39, 191, 213, 184, 65, 62, 12, 5, 241, 61, 248, 69, 135, 62, 229, 75, 122, 62, 190, 172, 204, 190, 44, 141, 88, 190, 250, 75, 70, 189, 126, 242, 213, 61, 23, 112, 236, 61, 30, 64, 175, 190, 219, 191, 21, 63, 216, 227, 139, 62, 164, 35, 138, 62, 50, 227, 135, 62, 171, 186, 170, 190, 140, 46, 173, 188, 181, 57, 25, 60, 4, 1, 231, 62, 206, 92, 18, 190, 247, 133, 79, 61, 169, 226, 137, 190, 228, 71, 147, 191, 42, 27, 75, 190, 180, 72, 10, 190, 202, 237, 33, 61, 146, 184, 64, 191, 115, 145, 1, 191, 24, 238, 166, 62, 23, 152, 22, 59, 205, 78, 166, 62, 172, 59, 7, 190, 122, 158, 86, 62, 212, 164, 45, 62, 208, 245, 12, 190, 198, 171, 15, 190, 206, 220, 120, 61, 74, 122, 222, 62, 234, 60, 220, 61, 166, 162, 156, 60, 230, 160, 105, 190, 42, 7, 125, 189, 78, 51, 162, 62, 104, 121, 136, 62, 194, 172, 24, 190, 70, 232, 74, 190, 127, 74, 175, 61, 106, 82, 95, 62, 176, 216, 168, 62, 3, 166, 147, 190, 7, 97, 155, 191, 114, 120, 131, 62, 224, 39, 218, 61, 200, 250, 143, 62, 139, 233, 121, 190, 233, 134, 64, 62, 92, 250, 33, 62, 39, 111, 28, 191, 232, 168, 54, 190, 132, 140, 181, 190, 0, 220, 198, 61, 121, 107, 1, 61, 78, 117, 141, 190, 174, 38, 111, 189, 238, 91, 28, 191, 237, 207, 105, 62, 22, 213, 200, 189, 232, 230, 63, 62, 17, 46, 70, 62, 69, 243, 76, 61, 179, 90, 158, 189, 15, 226, 28, 190, 243, 142, 72, 62, 54, 224, 140, 61, 198, 66, 130, 190, 89, 27, 62, 190, 147, 34, 28, 189, 188, 251, 17, 62, 81, 163, 108, 62, 197, 7, 200, 190, 33, 113, 141, 190, 239, 178, 42, 189, 214, 231, 197, 61, 189, 187, 46, 62, 10, 0, 232, 189, 37, 87, 192, 61, 199, 0, 1, 190, 35, 91, 212, 189, 193, 234, 63, 60, 47, 115, 34, 189, 69, 98, 42, 190, 144, 254, 145, 189, 171, 95, 41, 190, 18, 149, 25, 190, 233, 132, 76, 189, 11, 144, 222, 187, 131, 65, 226, 189, 11, 10, 145, 190, 30, 74, 20, 62, 72, 230, 232, 189, 166, 241, 156, 61, 253, 22, 255, 61, 105, 21, 64, 190, 71, 34, 148, 61, 90, 56, 25, 189, 126, 206, 182, 188, 176, 213, 1, 190, 129, 185, 140, 61, 100, 48, 84, 60, 162, 28, 183, 61, 179, 40, 220, 189, 191, 26, 224, 189, 19, 166, 54, 62, 64, 123, 26, 190, 191, 178, 209, 189, 54, 146, 66, 60, 178, 77, 64, 61, 197, 110, 195, 61, 18, 8, 84, 189, 71, 97, 196, 61, 139, 244, 71, 188, 74, 36, 19, 62, 84, 53, 255, 189, 99, 163, 130, 61, 29, 77, 194, 189, 176, 125, 14, 190, 224, 71, 220, 61, 40, 139, 151, 61, 66, 210, 203, 61, 96, 204, 64, 190, 14, 57, 184, 61, 198, 3, 244, 188, 64, 193, 200, 189, 248, 180, 1, 190, 135, 139, 175, 189, 119, 162, 68, 190, 174, 131, 48, 190, 236, 203, 200, 61, 15, 178, 237, 60, 242, 86, 52, 190, 178, 0, 194, 189, 31, 149, 228, 189, 48, 243, 26, 190, 219, 230, 201, 59, 71, 128, 211, 61, 85, 55, 16, 190, 137, 46, 195, 191, 109, 113, 13, 191, 155, 66, 142, 61, 176, 190, 155, 190, 245, 94, 187, 190, 13, 87, 96, 62, 82, 20, 138, 61, 161, 196, 217, 189, 79, 210, 2, 190, 24, 239, 46, 191, 29, 196, 157, 188, 19, 190, 78, 62, 38, 108, 182, 58, 211, 18, 240, 187, 60, 48, 219, 62, 174, 82, 34, 62, 6, 45, 154, 61, 49, 157, 75, 190, 158, 130, 62, 62, 172, 253, 58, 189, 175, 217, 115, 190, 2, 34, 211, 189, 211, 224, 141, 189, 108, 29, 193, 189, 229, 91, 1, 189, 249, 244, 104, 190, 221, 186, 152, 62, 124, 217, 67, 190, 43, 68, 162, 62, 59, 20, 49, 189, 255, 179, 100, 62, 139, 101, 19, 191, 122, 124, 137, 191, 217, 116, 225, 190, 238, 115, 236, 61, 1, 37, 23, 191, 187, 165, 128, 187, 67, 69, 74, 61, 37, 183, 164, 188, 115, 23, 162, 189, 109, 36, 251, 189, 166, 3, 135, 190, 176, 165, 74, 61, 188, 140, 252, 189, 7, 130, 232, 60, 183, 179, 36, 60, 153, 111, 226, 62, 123, 247, 58, 62, 185, 1, 60, 190, 41, 30, 43, 187, 2, 2, 32, 62, 210, 223, 36, 62, 94, 34, 214, 188, 116, 28, 69, 190, 227, 194, 31, 61, 105, 142, 247, 61, 62, 227, 144, 190, 238, 27, 173, 61, 127, 110, 50, 62, 33, 62, 128, 189, 1, 54, 3, 62, 25, 102, 193, 60, 215, 214, 78, 62, 38, 11, 107, 190, 222, 174, 0, 192, 189, 211, 145, 190, 252, 201, 112, 62, 221, 167, 202, 190, 243, 55, 153, 189, 131, 47, 179, 62, 19, 214, 25, 61, 184, 79, 5, 190, 120, 246, 34, 62, 16, 53, 166, 190, 223, 21, 152, 190, 223, 237, 246, 62, 64, 144, 185, 190, 233, 55, 143, 188, 202, 88, 82, 190, 127, 138, 13, 62, 207, 89, 141, 187, 228, 232, 129, 189, 206, 34, 163, 62, 185, 15, 157, 61, 194, 155, 2, 190, 241, 167, 39, 190, 5, 210, 123, 191, 29, 10, 171, 61, 106, 144, 22, 189, 141, 107, 222, 60, 145, 126, 246, 62, 126, 52, 206, 190, 66, 73, 151, 62, 61, 250, 22, 190, 249, 100, 192, 190, 146, 34, 11, 191, 230, 189, 160, 190, 143, 192, 12, 62, 14, 175, 76, 61, 151, 5, 152, 62, 115, 33, 115, 188, 18, 21, 80, 62, 95, 69, 122, 61, 238, 253, 13, 191, 51, 32, 232, 61, 160, 12, 179, 61, 30, 129, 192, 190, 207, 100, 41, 61, 45, 143, 64, 190, 201, 213, 137, 62, 140, 185, 76, 191, 137, 115, 127, 62, 27, 128, 194, 188, 57, 251, 81, 62, 211, 189, 99, 189, 92, 56, 1, 190, 146, 189, 50, 186, 243, 20, 200, 188, 58, 52, 118, 62, 250, 40, 156, 61, 145, 253, 236, 189, 12, 154, 91, 62, 209, 43, 189, 189, 138, 120, 178, 188, 237, 20, 243, 60, 225, 84, 133, 190, 221, 117, 67, 189, 22, 150, 125, 62, 10, 27, 8, 190, 86, 47, 151, 62, 12, 20, 20, 190, 22, 165, 161, 62, 186, 78, 170, 190, 113, 133, 30, 189, 107, 88, 229, 61, 173, 145, 115, 190, 184, 73, 117, 190, 236, 52, 37, 62, 227, 79, 161, 61, 99, 175, 172, 60, 113, 77, 46, 189, 106, 0, 38, 62, 253, 225, 145, 190, 84, 90, 94, 62, 48, 62, 16, 62, 109, 182, 202, 188, 120, 140, 26, 61, 41, 225, 96, 189, 179, 67, 125, 61, 233, 104, 69, 188, 254, 252, 0, 62, 235, 223, 13, 62, 183, 144, 149, 189, 75, 56, 229, 61, 40, 236, 166, 188, 0, 198, 71, 61, 63, 80, 96, 62, 144, 66, 180, 189, 52, 80, 4, 62, 119, 202, 171, 60, 18, 173, 183, 190, 195, 197, 92, 62, 248, 220, 165, 61, 181, 172, 209, 61, 10, 110, 143, 190, 223, 85, 15, 189, 71, 35, 51, 61, 239, 185, 139, 190, 144, 107, 15, 190, 222, 41, 95, 189, 194, 1, 103, 190, 1, 250, 146, 189, 243, 123, 128, 189, 232, 62, 106, 188, 39, 198, 71, 191, 177, 188, 216, 59, 211, 126, 135, 61, 71, 230, 227, 60, 66, 117, 1, 61, 20, 181, 61, 190, 110, 104, 133, 61, 231, 135, 91, 61, 194, 250, 94, 61, 188, 202, 60, 62, 58, 45, 128, 190, 138, 236, 97, 62, 187, 248, 73, 62, 169, 204, 103, 62, 199, 140, 110, 189, 132, 134, 119, 190, 172, 226, 251, 189, 6, 5, 15, 62, 114, 32, 47, 58, 72, 255, 150, 62, 61, 197, 195, 190, 175, 220, 46, 62, 39, 229, 15, 63, 147, 180, 67, 190, 190, 108, 186, 62, 209, 220, 194, 190, 34, 74, 142, 62, 32, 221, 129, 62, 76, 85, 82, 190, 174, 28, 124, 57, 211, 29, 111, 190, 108, 161, 70, 62, 192, 130, 5, 191, 178, 108, 150, 189, 47, 88, 7, 62, 59, 83, 17, 62, 200, 100, 167, 190, 135, 3, 124, 190, 10, 130, 197, 189, 236, 99, 59, 62, 101, 63, 51, 62, 59, 155, 121, 61, 30, 21, 125, 62, 197, 223, 179, 189, 114, 185, 159, 188, 133, 255, 197, 59, 239, 70, 45, 60, 216, 247, 37, 191, 68, 245, 8, 191, 69, 145, 63, 62, 228, 27, 166, 61, 87, 180, 49, 62, 240, 236, 165, 61, 9, 115, 79, 61, 8, 40, 137, 190, 35, 95, 183, 61, 148, 106, 135, 61, 10, 24, 105, 190, 183, 125, 93, 61, 154, 140, 250, 189, 145, 80, 127, 188, 157, 210, 88, 187, 13, 216, 132, 189, 34, 110, 17, 60, 222, 224, 38, 191, 212, 24, 42, 62, 243, 194, 17, 62, 91, 236, 138, 60, 1, 231, 101, 190, 60, 253, 48, 62, 11, 156, 240, 61, 218, 62, 62, 189, 164, 120, 227, 61, 255, 153, 127, 62, 188, 52, 133, 187, 113, 160, 121, 62, 207, 225, 216, 61, 176, 254, 217, 61, 185, 106, 39, 62, 174, 49, 139, 190, 95, 255, 241, 188, 104, 52, 178, 188, 92, 89, 33, 62, 175, 77, 67, 61, 24, 89, 82, 189, 211, 20, 70, 62, 103, 56, 162, 189, 18, 133, 140, 60, 43, 70, 28, 62, 177, 209, 176, 60, 6, 19, 63, 188, 167, 213, 143, 190, 29, 170, 88, 190, 0, 67, 6, 189, 12, 225, 93, 188, 88, 5, 14, 190, 239, 119, 52, 60, 77, 183, 181, 189, 59, 33, 205, 190, 152, 19, 56, 62, 223, 118, 39, 62, 81, 202, 71, 62, 45, 121, 148, 61, 14, 94, 78, 62, 155, 74, 190, 61, 229, 102, 250, 60, 155, 62, 114, 62, 85, 165, 0, 191, 203, 225, 229, 190, 201, 144, 160, 61, 90, 245, 44, 62, 237, 46, 155, 62, 119, 4, 22, 190, 78, 124, 157, 188, 226, 64, 3, 62, 53, 234, 162, 61, 161, 22, 45, 190, 157, 103, 242, 189, 41, 19, 4, 189, 153, 183, 109, 61, 65, 6, 33, 190, 201, 74, 85, 61, 155, 117, 26, 62, 57, 38, 52, 190, 210, 230, 26, 189, 8, 132, 185, 60, 235, 29, 45, 190, 198, 66, 45, 190, 124, 236, 187, 61, 202, 102, 245, 184, 75, 157, 173, 189, 149, 250, 183, 189, 252, 140, 33, 190, 1, 60, 7, 62, 132, 76, 11, 62, 124, 242, 217, 189, 60, 167, 26, 190, 224, 132, 185, 60, 206, 154, 161, 188, 229, 201, 161, 61, 15, 154, 8, 62, 76, 198, 10, 62, 31, 218, 197, 61, 73, 209, 73, 188, 75, 231, 29, 62, 135, 165, 10, 62, 135, 198, 154, 59, 72, 136, 92, 189, 235, 123, 22, 59, 103, 52, 50, 190, 117, 162, 198, 190, 63, 214, 125, 62, 210, 116, 167, 189, 148, 199, 231, 185, 228, 33, 206, 188, 75, 138, 97, 190, 131, 126, 177, 187, 191, 19, 76, 61, 57, 40, 27, 189, 64, 85, 27, 62, 81, 199, 13, 190, 119, 114, 6, 62, 88, 123, 185, 189, 70, 202, 85, 62, 239, 193, 9, 62, 218, 24, 147, 62, 195, 59, 84, 190, 127, 77, 195, 189, 253, 245, 179, 188, 91, 183, 52, 190, 48, 22, 26, 189, 175, 242, 55, 190, 158, 228, 63, 190, 180, 228, 67, 190, 172, 73, 135, 60, 145, 18, 254, 189, 128, 90, 109, 62, 94, 243, 250, 61, 58, 198, 38, 189, 164, 111, 199, 60, 164, 223, 49, 191, 17, 164, 180, 190, 216, 91, 114, 191, 225, 4, 129, 191, 86, 165, 97, 191, 122, 75, 252, 189, 117, 48, 62, 191, 19, 69, 173, 190, 139, 185, 141, 62, 226, 212, 169, 189, 63, 135, 114, 62, 236, 144, 201, 189, 206, 206, 139, 62, 91, 141, 103, 61, 163, 246, 4, 189, 75, 198, 6, 190, 85, 130, 247, 190, 156, 192, 146, 62, 50, 164, 83, 190, 247, 60, 64, 189, 39, 23, 253, 189, 31, 121, 150, 62, 155, 148, 206, 62, 127, 180, 190, 62, 11, 31, 150, 190, 28, 115, 161, 189, 95, 183, 205, 62, 112, 94, 19, 62, 183, 52, 19, 63, 131, 99, 76, 188, 209, 61, 18, 63, 107, 13, 1, 190, 118, 229, 124, 190, 10, 249, 170, 60, 179, 131, 90, 191, 254, 47, 209, 189, 177, 193, 230, 61, 62, 97, 131, 62, 247, 22, 12, 191, 190, 21, 148, 190, 0, 12, 126, 62, 157, 129, 236, 189, 221, 123, 146, 62, 123, 183, 4, 190, 198, 159, 129, 62, 181, 66, 215, 188, 161, 245, 148, 190, 224, 177, 55, 61, 127, 79, 14, 188, 192, 123, 164, 62, 141, 181, 56, 62, 10, 43, 177, 189, 63, 210, 72, 60, 15, 121, 75, 60, 76, 87, 99, 62, 50, 164, 21, 63, 216, 225, 244, 189, 138, 63, 89, 189, 209, 179, 241, 60, 28, 57, 144, 189, 204, 237, 169, 62, 128, 252, 108, 190, 164, 251, 71, 190, 171, 172, 165, 60, 194, 193, 165, 62, 195, 41, 71, 189, 25, 49, 51, 191, 89, 173, 80, 61, 196, 224, 15, 190, 212, 170, 126, 189, 236, 94, 75, 191, 17, 51, 17, 60, 239, 75, 239, 189, 144, 207, 13, 62, 25, 124, 148, 60, 125, 44, 178, 61, 211, 75, 69, 190, 48, 218, 43, 62, 84, 206, 219, 61, 8, 251, 172, 61, 50, 124, 115, 188, 42, 65, 5, 61, 166, 57, 250, 61, 45, 43, 35, 62, 27, 21, 33, 62, 31, 215, 54, 190, 19, 103, 20, 62, 215, 2, 138, 60, 24, 39, 101, 62, 76, 14, 48, 62, 193, 87, 104, 190, 55, 29, 203, 61, 252, 209, 152, 62, 211, 154, 140, 190, 123, 253, 178, 190, 252, 139, 98, 188, 233, 251, 120, 62, 101, 58, 161, 62, 158, 96, 17, 189, 126, 27, 211, 61, 95, 212, 197, 61, 71, 179, 3, 191, 98, 94, 245, 189, 167, 31, 143, 188, 144, 209, 141, 190, 83, 66, 19, 190, 150, 195, 42, 190, 96, 156, 245, 58, 34, 138, 231, 190, 159, 121, 23, 188, 15, 80, 55, 62, 98, 172, 59, 62, 7, 8, 141, 62, 99, 246, 50, 190, 83, 237, 25, 190, 36, 55, 199, 189, 92, 187, 202, 61, 204, 247, 197, 61, 20, 13, 189, 189, 143, 210, 132, 62, 150, 242, 129, 62, 49, 194, 114, 62, 105, 69, 102, 61, 211, 230, 56, 190, 27, 97, 133, 190, 144, 173, 170, 61, 77, 49, 0, 191, 73, 164, 129, 62, 33, 105, 75, 60, 172, 233, 143, 62, 19, 197, 203, 60, 53, 172, 9, 190, 83, 48, 234, 61, 105, 208, 130, 190, 0, 135, 68, 62, 162, 70, 56, 61, 227, 199, 144, 189, 127, 191, 158, 189, 6, 121, 212, 188, 27, 61, 175, 61, 213, 54, 37, 191, 239, 241, 66, 62, 71, 191, 135, 189, 64, 215, 202, 61, 93, 108, 42, 62, 80, 122, 129, 190, 116, 74, 57, 189, 115, 250, 234, 61, 215, 195, 226, 61, 197, 77, 101, 189, 77, 180, 156, 190, 134, 67, 37, 62, 14, 220, 78, 62, 6, 166, 27, 62, 252, 222, 139, 189, 203, 148, 239, 190, 33, 117, 181, 190, 138, 213, 27, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 83, 58, 62, 1, 76, 71, 61, 180, 74, 165, 62, 177, 237, 95, 62, 10, 89, 172, 189, 88, 194, 159, 62, 23, 117, 166, 62, 202, 108, 106, 189, 150, 14, 242, 60, 27, 235, 53, 62, 120, 247, 152, 61, 200, 155, 254, 61, 180, 183, 80, 62, 131, 7, 246, 61, 182, 33, 132, 59, 145, 24, 96, 61, 118, 3, 14, 61, 47, 38, 144, 61, 138, 133, 131, 62, 38, 154, 24, 62, 32, 146, 212, 61, 125, 142, 238, 61, 205, 18, 73, 190, 126, 225, 128, 62, 248, 77, 68, 61, 85, 4, 80, 190, 111, 96, 73, 62, 168, 17, 167, 62, 139, 126, 203, 189, 165, 142, 219, 61, 155, 59, 31, 62, 86, 248, 89, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {175, 205, 9, 191, 6, 36, 192, 190, 14, 230, 157, 62, 145, 85, 159, 191, 23, 117, 99, 61, 84, 78, 59, 62, 169, 109, 105, 63, 251, 98, 53, 191, 234, 191, 232, 189, 227, 243, 206, 191, 243, 171, 177, 190, 21, 3, 9, 191, 170, 213, 229, 62, 222, 206, 86, 191, 233, 244, 32, 189, 238, 184, 130, 61, 200, 172, 15, 191, 54, 90, 156, 190, 104, 254, 185, 191, 28, 19, 170, 190, 238, 15, 84, 61, 237, 136, 61, 190, 137, 222, 36, 63, 216, 252, 114, 59, 66, 36, 56, 62, 99, 213, 93, 189, 230, 105, 52, 60, 123, 115, 129, 63, 2, 161, 53, 62, 178, 56, 44, 62, 229, 125, 209, 190, 34, 191, 234, 190, 96, 32, 141, 58, 236, 228, 224, 62, 249, 115, 153, 190, 87, 88, 251, 189, 52, 135, 25, 190, 166, 235, 63, 190, 156, 95, 176, 61, 4, 88, 67, 189, 206, 173, 131, 189, 49, 166, 219, 60, 91, 118, 235, 189, 62, 255, 119, 189, 17, 195, 56, 62, 19, 230, 45, 62, 52, 190, 45, 62, 42, 93, 38, 61, 86, 163, 44, 190, 23, 99, 8, 188, 18, 107, 84, 62, 255, 228, 62, 189, 29, 62, 44, 190, 202, 150, 87, 190, 182, 23, 211, 62, 148, 99, 102, 190, 115, 111, 170, 188, 122, 220, 230, 59, 66, 227, 23, 190, 157, 160, 148, 189, 231, 206, 172, 62, 154, 162, 65, 190, 180, 70, 183, 189, 235, 37, 39, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {35, 64, 52, 62, 34, 102, 54, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {226, 220, 32, 63, 250, 187, 43, 62, 160, 21, 32, 192};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {42, 198, 5, 64, 8, 36, 102, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0053/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}