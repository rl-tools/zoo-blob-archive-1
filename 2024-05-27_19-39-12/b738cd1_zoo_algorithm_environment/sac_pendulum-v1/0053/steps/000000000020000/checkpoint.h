// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 202, 237, 190, 158, 133, 228, 63, 192, 152, 248, 62, 134, 65, 33, 63, 9, 107, 44, 63, 50, 199, 204, 61, 189, 42, 211, 190, 156, 52, 106, 191, 207, 68, 245, 190, 205, 176, 22, 63, 95, 232, 147, 63, 140, 96, 2, 62, 97, 44, 49, 63, 208, 188, 58, 63, 226, 63, 150, 62, 52, 100, 10, 191, 135, 105, 241, 190, 77, 110, 234, 190, 5, 85, 52, 62, 142, 28, 4, 63, 221, 140, 229, 190, 214, 200, 27, 63, 83, 147, 187, 191, 190, 2, 204, 190, 218, 35, 58, 63, 51, 158, 16, 63, 121, 106, 118, 62, 136, 237, 157, 189, 171, 157, 1, 63, 84, 233, 213, 62, 199, 201, 80, 190, 16, 99, 212, 190, 99, 250, 54, 63, 211, 69, 176, 62, 158, 92, 46, 191, 151, 41, 167, 62, 63, 231, 131, 189, 216, 225, 249, 190, 249, 212, 8, 63, 212, 187, 21, 63, 39, 18, 233, 62, 171, 9, 21, 63, 61, 175, 249, 62, 171, 27, 189, 191, 36, 228, 166, 190, 174, 5, 170, 190, 90, 255, 166, 190, 50, 156, 166, 190, 129, 242, 168, 62, 2, 123, 240, 61, 135, 119, 17, 63, 198, 116, 76, 63, 81, 204, 4, 191, 238, 74, 184, 62, 75, 12, 52, 190, 221, 97, 149, 191, 197, 242, 194, 190, 100, 209, 150, 62, 209, 159, 83, 191, 199, 253, 143, 62, 6, 153, 155, 62, 239, 64, 46, 62, 243, 226, 18, 191, 29, 137, 171, 62, 128, 190, 172, 62, 177, 221, 227, 190, 127, 204, 46, 63, 178, 133, 157, 62, 99, 219, 72, 189, 249, 98, 81, 190, 87, 29, 22, 63, 175, 162, 38, 61, 210, 72, 129, 190, 147, 151, 77, 190, 243, 253, 96, 190, 161, 5, 27, 191, 167, 117, 114, 63, 189, 144, 19, 62, 128, 200, 49, 62, 228, 198, 217, 190, 68, 150, 8, 63, 117, 194, 5, 63, 216, 177, 61, 63, 30, 204, 219, 189, 158, 195, 115, 191, 80, 242, 136, 189, 206, 208, 38, 60, 97, 186, 169, 189, 94, 155, 179, 191, 174, 100, 244, 190, 162, 250, 252, 62, 106, 238, 188, 191, 161, 161, 241, 189, 84, 60, 4, 63, 207, 222, 54, 63, 150, 182, 0, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {118, 88, 212, 190, 189, 47, 157, 61, 186, 38, 73, 62, 204, 183, 185, 62, 130, 192, 223, 190, 76, 139, 181, 189, 140, 93, 205, 60, 228, 92, 178, 190, 32, 133, 74, 191, 120, 2, 31, 191, 147, 43, 5, 191, 51, 21, 164, 190, 221, 48, 1, 62, 107, 66, 216, 188, 43, 250, 102, 190, 98, 181, 3, 62, 39, 143, 172, 189, 125, 20, 36, 191, 200, 151, 231, 62, 44, 132, 87, 62, 30, 18, 164, 61, 233, 55, 228, 62, 71, 75, 180, 62, 190, 71, 189, 62, 209, 132, 3, 190, 86, 133, 15, 191, 221, 205, 119, 61, 148, 78, 67, 62, 15, 155, 224, 62, 53, 142, 112, 61, 186, 95, 145, 62, 22, 88, 130, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {171, 128, 132, 190, 117, 151, 193, 189, 78, 62, 255, 61, 227, 85, 241, 190, 242, 75, 56, 63, 250, 133, 190, 189, 236, 185, 135, 190, 27, 201, 69, 63, 161, 219, 84, 63, 57, 184, 26, 62, 72, 167, 158, 62, 151, 142, 35, 62, 198, 29, 134, 62, 117, 189, 53, 190, 160, 137, 21, 63, 119, 92, 45, 190, 177, 79, 219, 189, 148, 248, 5, 62, 165, 152, 201, 62, 133, 108, 141, 62, 140, 112, 12, 190, 16, 65, 188, 190, 86, 170, 230, 60, 167, 211, 254, 189, 247, 58, 64, 189, 158, 242, 255, 190, 195, 40, 129, 62, 121, 28, 144, 189, 89, 111, 211, 189, 222, 1, 248, 61, 230, 221, 56, 61, 195, 238, 210, 60, 124, 61, 148, 61, 245, 193, 91, 62, 29, 190, 185, 189, 225, 86, 233, 62, 215, 87, 211, 190, 32, 179, 144, 61, 2, 85, 36, 62, 177, 112, 128, 191, 19, 101, 132, 191, 88, 215, 219, 189, 136, 71, 91, 62, 191, 105, 19, 62, 212, 62, 95, 62, 65, 121, 178, 59, 84, 97, 144, 191, 58, 148, 234, 189, 122, 222, 194, 189, 86, 107, 82, 190, 58, 63, 241, 189, 137, 181, 140, 189, 158, 99, 51, 62, 177, 189, 242, 61, 174, 227, 239, 60, 146, 183, 183, 62, 109, 37, 254, 61, 132, 4, 187, 190, 31, 195, 136, 61, 29, 163, 27, 62, 50, 34, 41, 62, 214, 214, 54, 190, 242, 95, 33, 191, 109, 108, 91, 190, 61, 171, 172, 62, 208, 91, 17, 62, 27, 209, 93, 190, 182, 174, 149, 62, 194, 103, 158, 190, 205, 118, 131, 190, 54, 61, 184, 62, 233, 31, 1, 62, 247, 91, 175, 190, 115, 2, 78, 61, 77, 144, 126, 62, 207, 90, 101, 190, 238, 79, 55, 62, 4, 2, 200, 61, 215, 20, 138, 59, 253, 70, 79, 189, 130, 21, 178, 189, 163, 23, 24, 61, 193, 119, 84, 189, 239, 38, 161, 62, 107, 224, 132, 62, 131, 180, 137, 61, 23, 17, 66, 61, 71, 51, 217, 61, 223, 128, 94, 188, 44, 155, 172, 62, 189, 5, 31, 190, 90, 53, 17, 62, 39, 5, 54, 62, 51, 100, 146, 62, 102, 25, 126, 62, 129, 58, 251, 189, 40, 126, 166, 191, 54, 194, 18, 190, 191, 164, 144, 188, 175, 92, 172, 189, 8, 184, 168, 189, 72, 133, 45, 190, 167, 162, 206, 61, 231, 153, 217, 190, 21, 75, 155, 61, 53, 58, 60, 191, 237, 131, 164, 190, 195, 180, 149, 62, 21, 10, 190, 188, 171, 254, 192, 189, 46, 162, 228, 190, 185, 184, 42, 60, 110, 49, 23, 189, 130, 8, 246, 189, 230, 187, 105, 62, 179, 36, 251, 61, 74, 33, 140, 190, 70, 165, 167, 190, 222, 214, 166, 190, 110, 18, 160, 190, 176, 172, 130, 190, 119, 76, 208, 189, 186, 181, 24, 62, 166, 245, 211, 189, 35, 3, 25, 62, 200, 149, 122, 191, 89, 221, 4, 191, 109, 23, 19, 191, 122, 47, 181, 61, 118, 198, 14, 190, 118, 23, 24, 189, 105, 167, 186, 189, 180, 227, 51, 62, 192, 57, 41, 60, 152, 91, 139, 59, 119, 13, 76, 189, 96, 188, 51, 62, 250, 124, 241, 188, 210, 205, 240, 189, 208, 40, 34, 190, 145, 199, 89, 60, 51, 241, 49, 189, 169, 91, 129, 189, 56, 75, 28, 62, 225, 9, 120, 189, 98, 131, 226, 61, 230, 124, 204, 189, 141, 50, 21, 188, 39, 1, 5, 61, 28, 233, 104, 189, 98, 105, 26, 190, 225, 122, 232, 189, 89, 19, 182, 189, 247, 85, 62, 189, 105, 122, 178, 184, 27, 253, 189, 188, 76, 23, 58, 60, 90, 221, 153, 61, 17, 168, 122, 185, 227, 64, 91, 189, 154, 61, 106, 189, 35, 29, 57, 61, 6, 2, 18, 62, 179, 130, 14, 190, 232, 227, 125, 191, 249, 60, 70, 62, 13, 90, 41, 61, 154, 221, 166, 61, 91, 241, 131, 191, 22, 81, 218, 190, 90, 25, 19, 62, 76, 200, 77, 188, 149, 225, 1, 189, 119, 216, 54, 190, 253, 122, 98, 61, 174, 233, 34, 61, 213, 234, 149, 190, 227, 158, 207, 61, 217, 237, 65, 62, 223, 85, 155, 62, 35, 45, 14, 62, 84, 17, 38, 62, 149, 88, 143, 61, 194, 60, 8, 62, 74, 51, 23, 189, 166, 43, 139, 62, 132, 89, 210, 188, 90, 215, 129, 189, 140, 227, 181, 62, 233, 36, 2, 187, 229, 75, 167, 61, 25, 221, 90, 190, 224, 77, 53, 62, 9, 176, 147, 61, 128, 245, 4, 191, 109, 47, 69, 189, 187, 139, 138, 191, 186, 167, 154, 191, 149, 33, 1, 191, 191, 179, 196, 62, 67, 96, 78, 191, 85, 141, 224, 190, 227, 223, 245, 61, 75, 17, 204, 61, 172, 93, 33, 60, 247, 41, 156, 190, 84, 90, 221, 62, 66, 96, 249, 61, 46, 210, 176, 190, 64, 229, 86, 62, 51, 139, 102, 190, 228, 245, 140, 62, 42, 138, 119, 62, 150, 7, 155, 59, 77, 223, 84, 61, 48, 146, 39, 62, 98, 43, 126, 62, 235, 124, 8, 63, 204, 227, 109, 190, 68, 114, 135, 189, 255, 255, 201, 61, 221, 114, 206, 62, 95, 76, 189, 62, 234, 101, 222, 190, 172, 125, 165, 190, 114, 251, 233, 62, 190, 123, 147, 61, 174, 191, 209, 62, 72, 166, 171, 61, 87, 108, 82, 188, 112, 25, 43, 62, 68, 147, 17, 191, 27, 54, 162, 62, 218, 103, 136, 62, 114, 93, 17, 191, 75, 32, 197, 62, 222, 183, 209, 190, 166, 78, 101, 62, 118, 44, 31, 191, 82, 59, 214, 187, 45, 238, 78, 62, 144, 137, 4, 63, 200, 137, 27, 189, 23, 12, 165, 190, 249, 129, 1, 60, 136, 255, 102, 61, 220, 156, 62, 62, 247, 107, 47, 62, 90, 176, 150, 190, 171, 222, 28, 191, 231, 112, 202, 62, 98, 54, 236, 61, 139, 129, 26, 190, 35, 207, 82, 190, 109, 195, 182, 190, 181, 119, 71, 62, 131, 168, 35, 60, 136, 50, 198, 61, 68, 98, 46, 62, 163, 136, 21, 62, 102, 231, 126, 188, 137, 216, 47, 190, 69, 212, 144, 189, 85, 13, 63, 190, 177, 178, 62, 62, 213, 29, 213, 60, 162, 64, 222, 190, 108, 232, 157, 190, 166, 180, 161, 190, 104, 100, 48, 60, 16, 82, 197, 190, 10, 188, 87, 190, 64, 12, 28, 62, 12, 85, 135, 61, 30, 150, 189, 189, 207, 236, 185, 190, 53, 121, 129, 189, 196, 112, 144, 60, 11, 130, 129, 62, 235, 33, 57, 62, 15, 70, 80, 190, 245, 152, 105, 62, 134, 109, 63, 190, 224, 2, 233, 61, 123, 53, 102, 62, 99, 120, 49, 190, 19, 150, 58, 190, 87, 39, 239, 59, 216, 31, 173, 191, 218, 198, 230, 190, 212, 13, 219, 189, 202, 137, 1, 190, 183, 143, 245, 189, 234, 137, 251, 189, 162, 79, 48, 189, 50, 64, 178, 190, 65, 34, 86, 190, 37, 53, 66, 191, 254, 157, 99, 190, 230, 33, 136, 61, 149, 64, 179, 189, 121, 176, 191, 190, 159, 75, 210, 190, 39, 194, 74, 62, 70, 192, 47, 190, 44, 201, 21, 189, 245, 167, 176, 62, 107, 154, 143, 62, 100, 195, 173, 190, 62, 91, 11, 191, 74, 239, 12, 190, 201, 85, 44, 190, 120, 17, 230, 190, 122, 11, 240, 61, 61, 175, 54, 62, 177, 19, 8, 190, 115, 124, 19, 62, 210, 114, 209, 191, 246, 192, 129, 190, 72, 182, 215, 190, 210, 89, 204, 189, 49, 10, 170, 62, 165, 165, 111, 60, 143, 106, 248, 61, 183, 25, 83, 190, 124, 51, 63, 61, 188, 178, 48, 62, 128, 243, 32, 191, 207, 203, 249, 188, 195, 138, 28, 190, 56, 78, 12, 191, 203, 162, 87, 61, 183, 133, 69, 189, 204, 214, 24, 62, 252, 2, 40, 191, 48, 115, 38, 61, 130, 19, 195, 61, 172, 224, 157, 62, 137, 216, 104, 190, 119, 130, 41, 190, 229, 119, 194, 189, 236, 19, 32, 62, 137, 94, 130, 62, 66, 96, 209, 61, 70, 222, 10, 190, 230, 182, 195, 62, 6, 232, 76, 62, 237, 86, 110, 62, 61, 230, 179, 189, 219, 194, 174, 190, 26, 85, 56, 61, 247, 143, 147, 62, 179, 70, 153, 191, 57, 144, 101, 62, 252, 105, 121, 62, 26, 59, 135, 62, 213, 249, 139, 190, 76, 132, 167, 62, 57, 179, 151, 189, 207, 10, 35, 191, 242, 226, 36, 191, 139, 22, 91, 191, 181, 91, 50, 191, 221, 135, 130, 62, 22, 246, 220, 189, 83, 179, 170, 62, 1, 140, 40, 191, 171, 241, 31, 62, 238, 6, 51, 62, 227, 129, 184, 62, 165, 61, 30, 62, 178, 138, 140, 190, 242, 246, 129, 190, 160, 229, 94, 189, 154, 54, 240, 61, 59, 5, 194, 61, 70, 2, 177, 190, 56, 196, 63, 63, 153, 79, 201, 62, 235, 245, 126, 62, 153, 249, 133, 62, 226, 118, 207, 190, 3, 232, 140, 60, 126, 90, 4, 187, 176, 93, 196, 62, 200, 110, 99, 190, 40, 41, 205, 61, 73, 162, 139, 190, 249, 106, 160, 191, 158, 62, 202, 189, 163, 94, 153, 189, 105, 174, 197, 61, 121, 190, 92, 191, 27, 207, 23, 191, 141, 236, 159, 62, 201, 25, 138, 61, 156, 175, 163, 62, 91, 60, 15, 190, 233, 113, 140, 62, 215, 71, 116, 62, 3, 157, 11, 190, 148, 157, 171, 189, 215, 195, 164, 61, 183, 253, 226, 62, 18, 14, 17, 62, 115, 127, 186, 60, 234, 195, 89, 190, 175, 241, 196, 188, 88, 99, 180, 62, 214, 107, 29, 63, 109, 42, 7, 190, 167, 46, 106, 190, 69, 129, 186, 61, 94, 31, 134, 62, 145, 204, 204, 62, 253, 178, 168, 190, 128, 93, 167, 191, 19, 113, 137, 62, 169, 243, 119, 61, 137, 220, 157, 62, 27, 177, 129, 190, 54, 218, 231, 61, 236, 175, 80, 62, 132, 143, 92, 191, 59, 182, 13, 63, 73, 70, 172, 190, 99, 244, 2, 62, 173, 5, 253, 61, 59, 113, 82, 190, 20, 25, 32, 190, 22, 7, 120, 191, 100, 229, 118, 62, 185, 144, 3, 190, 4, 125, 54, 60, 72, 185, 171, 61, 185, 129, 27, 190, 61, 219, 4, 189, 80, 175, 3, 190, 93, 219, 47, 62, 31, 204, 175, 61, 92, 6, 108, 190, 176, 88, 27, 191, 21, 226, 156, 189, 185, 140, 32, 62, 125, 236, 13, 62, 107, 13, 217, 190, 23, 193, 243, 190, 85, 180, 162, 189, 56, 123, 250, 189, 31, 215, 86, 62, 226, 210, 100, 190, 89, 156, 183, 61, 132, 128, 111, 190, 153, 24, 171, 190, 192, 90, 26, 61, 201, 109, 106, 62, 38, 157, 77, 190, 130, 213, 124, 189, 77, 115, 47, 190, 212, 217, 37, 191, 40, 231, 15, 191, 218, 224, 116, 189, 153, 194, 63, 62, 202, 129, 82, 190, 176, 32, 107, 190, 183, 61, 198, 190, 9, 123, 138, 62, 244, 17, 140, 61, 192, 226, 21, 190, 184, 77, 166, 61, 247, 134, 4, 61, 114, 67, 17, 190, 198, 154, 196, 190, 255, 235, 224, 189, 128, 93, 196, 190, 66, 179, 205, 61, 36, 50, 162, 190, 245, 126, 144, 59, 22, 54, 192, 62, 156, 142, 195, 190, 191, 178, 209, 189, 103, 58, 50, 190, 166, 121, 49, 61, 129, 200, 184, 189, 134, 170, 171, 189, 22, 37, 249, 60, 193, 43, 205, 189, 135, 13, 130, 62, 84, 53, 255, 189, 99, 163, 130, 61, 189, 229, 90, 190, 158, 149, 66, 190, 68, 61, 253, 61, 162, 254, 26, 188, 46, 80, 92, 62, 187, 124, 106, 190, 60, 150, 4, 60, 13, 135, 188, 189, 66, 239, 130, 189, 1, 219, 185, 190, 228, 168, 4, 190, 166, 127, 100, 190, 43, 56, 8, 61, 221, 122, 150, 189, 159, 115, 59, 189, 242, 86, 52, 190, 183, 221, 244, 189, 245, 137, 227, 190, 33, 110, 5, 191, 122, 157, 34, 61, 22, 10, 113, 62, 230, 90, 56, 190, 50, 80, 196, 191, 50, 190, 140, 191, 249, 57, 91, 61, 162, 20, 104, 191, 40, 46, 253, 190, 224, 152, 28, 62, 190, 132, 90, 189, 12, 224, 89, 189, 78, 27, 7, 190, 18, 163, 118, 191, 126, 42, 105, 189, 62, 117, 42, 62, 147, 238, 159, 188, 175, 130, 144, 190, 190, 36, 2, 63, 198, 89, 222, 61, 236, 94, 156, 189, 124, 168, 166, 190, 181, 66, 83, 62, 183, 70, 27, 61, 39, 123, 163, 190, 20, 22, 65, 190, 100, 90, 111, 190, 134, 127, 186, 190, 18, 153, 143, 189, 205, 97, 111, 190, 194, 96, 134, 62, 165, 18, 198, 190, 192, 77, 160, 62, 129, 36, 118, 188, 39, 107, 176, 62, 245, 97, 124, 191, 102, 208, 139, 191, 22, 103, 120, 191, 196, 80, 237, 61, 71, 17, 167, 191, 22, 95, 253, 189, 237, 70, 33, 59, 204, 21, 233, 189, 96, 84, 202, 188, 148, 205, 29, 190, 154, 10, 251, 190, 84, 69, 34, 60, 106, 203, 30, 190, 39, 102, 52, 186, 236, 84, 137, 190, 235, 40, 4, 63, 126, 88, 27, 62, 249, 52, 169, 190, 217, 134, 4, 190, 228, 132, 54, 62, 190, 244, 95, 62, 112, 177, 167, 189, 72, 86, 133, 190, 27, 214, 26, 190, 158, 17, 47, 190, 161, 75, 153, 190, 105, 149, 166, 61, 36, 29, 6, 62, 34, 240, 137, 190, 31, 54, 253, 61, 248, 66, 128, 61, 97, 49, 151, 62, 38, 95, 6, 191, 104, 92, 6, 192, 10, 223, 151, 190, 172, 231, 144, 62, 169, 11, 45, 191, 243, 55, 153, 189, 110, 237, 186, 62, 204, 11, 0, 189, 54, 174, 197, 189, 120, 246, 34, 62, 126, 23, 16, 191, 241, 134, 174, 190, 131, 166, 231, 62, 6, 15, 200, 190, 125, 119, 253, 189, 50, 124, 7, 190, 52, 57, 34, 62, 107, 245, 184, 189, 242, 177, 9, 188, 23, 33, 199, 62, 79, 207, 175, 61, 22, 67, 42, 190, 146, 11, 74, 190, 197, 216, 163, 191, 211, 168, 0, 185, 236, 7, 46, 188, 94, 201, 164, 61, 50, 135, 229, 62, 211, 45, 9, 191, 205, 23, 210, 62, 5, 187, 158, 189, 85, 60, 132, 190, 237, 164, 48, 191, 182, 78, 168, 190, 239, 174, 39, 62, 232, 155, 24, 188, 234, 103, 168, 62, 122, 16, 199, 189, 166, 224, 238, 61, 226, 113, 254, 60, 51, 20, 20, 191, 89, 32, 44, 190, 33, 21, 43, 189, 208, 63, 250, 190, 104, 239, 18, 62, 148, 147, 147, 189, 222, 198, 140, 62, 186, 235, 79, 191, 255, 167, 101, 62, 15, 162, 59, 188, 184, 43, 157, 62, 49, 65, 28, 190, 148, 250, 214, 188, 222, 152, 79, 186, 77, 54, 33, 60, 226, 43, 139, 62, 207, 168, 216, 61, 10, 176, 218, 189, 96, 28, 225, 62, 34, 6, 36, 189, 91, 201, 94, 187, 31, 117, 131, 188, 205, 76, 176, 190, 228, 204, 163, 58, 217, 211, 102, 62, 56, 11, 206, 189, 177, 215, 126, 62, 41, 39, 89, 190, 150, 119, 148, 62, 224, 151, 184, 190, 35, 205, 46, 190, 179, 139, 186, 61, 58, 36, 145, 190, 146, 238, 173, 190, 123, 200, 10, 62, 211, 136, 253, 61, 87, 35, 131, 61, 85, 42, 39, 189, 131, 249, 13, 62, 19, 57, 160, 190, 125, 211, 7, 62, 39, 101, 11, 62, 237, 111, 243, 188, 173, 141, 26, 61, 106, 97, 78, 189, 106, 223, 144, 188, 106, 45, 178, 189, 199, 125, 170, 61, 237, 74, 8, 62, 153, 181, 63, 190, 223, 10, 215, 60, 225, 155, 229, 58, 218, 203, 225, 60, 171, 224, 146, 62, 27, 81, 214, 189, 193, 32, 243, 61, 69, 9, 96, 59, 241, 220, 129, 190, 169, 177, 128, 62, 176, 145, 242, 60, 246, 193, 36, 62, 226, 39, 178, 190, 114, 16, 7, 190, 145, 7, 109, 60, 121, 200, 159, 190, 232, 100, 244, 190, 124, 75, 159, 190, 175, 31, 192, 190, 73, 135, 99, 61, 148, 214, 136, 61, 140, 243, 9, 187, 192, 155, 77, 191, 95, 82, 9, 189, 202, 132, 151, 61, 108, 85, 35, 62, 22, 72, 146, 189, 250, 75, 176, 189, 131, 30, 48, 61, 118, 89, 168, 61, 118, 215, 182, 61, 155, 107, 131, 62, 155, 1, 130, 190, 169, 74, 8, 63, 23, 114, 128, 62, 10, 138, 129, 62, 142, 170, 34, 61, 124, 126, 167, 190, 10, 132, 149, 189, 247, 193, 15, 62, 177, 96, 137, 61, 253, 220, 199, 62, 60, 6, 44, 191, 3, 43, 139, 62, 51, 35, 57, 63, 47, 26, 177, 190, 202, 209, 238, 62, 129, 220, 194, 190, 214, 207, 234, 62, 229, 64, 190, 62, 196, 253, 211, 189, 214, 201, 28, 190, 13, 98, 152, 190, 33, 81, 133, 62, 61, 228, 10, 191, 51, 50, 136, 190, 212, 63, 43, 62, 131, 183, 187, 188, 181, 231, 116, 190, 17, 191, 159, 190, 235, 27, 30, 189, 74, 9, 108, 62, 51, 150, 132, 62, 69, 224, 30, 62, 193, 61, 88, 188, 241, 238, 59, 190, 152, 81, 23, 189, 108, 212, 200, 61, 120, 113, 146, 61, 93, 250, 141, 191, 17, 142, 13, 191, 130, 25, 140, 62, 29, 178, 7, 62, 75, 1, 203, 61, 62, 38, 250, 188, 186, 110, 27, 60, 76, 9, 172, 190, 84, 0, 190, 189, 223, 24, 12, 188, 43, 65, 200, 190, 248, 179, 234, 189, 141, 63, 36, 190, 108, 254, 168, 188, 58, 100, 55, 188, 247, 4, 151, 189, 85, 219, 24, 189, 88, 131, 83, 191, 0, 145, 15, 61, 163, 210, 227, 61, 115, 39, 183, 60, 101, 181, 203, 190, 179, 10, 27, 62, 109, 62, 42, 188, 62, 108, 252, 189, 149, 242, 147, 60, 84, 61, 131, 62, 146, 34, 6, 190, 212, 114, 46, 62, 22, 90, 180, 61, 178, 18, 157, 61, 65, 86, 71, 62, 208, 37, 191, 190, 43, 20, 5, 190, 177, 114, 70, 189, 155, 247, 178, 62, 56, 33, 147, 61, 111, 131, 5, 187, 129, 187, 119, 62, 115, 206, 157, 61, 42, 142, 183, 61, 12, 85, 126, 62, 241, 72, 118, 61, 94, 33, 79, 63, 137, 116, 95, 62, 7, 38, 34, 62, 238, 46, 22, 191, 151, 133, 104, 190, 186, 214, 245, 189, 114, 77, 183, 60, 207, 208, 54, 189, 242, 126, 211, 190, 188, 217, 0, 61, 235, 9, 113, 62, 107, 103, 88, 61, 222, 92, 237, 61, 108, 117, 86, 62, 55, 29, 207, 61, 181, 110, 217, 61, 101, 196, 121, 62, 156, 141, 75, 191, 95, 28, 20, 191, 199, 183, 249, 61, 73, 41, 46, 62, 28, 7, 184, 62, 221, 164, 55, 190, 139, 135, 132, 61, 111, 193, 240, 61, 164, 218, 161, 61, 161, 22, 45, 190, 214, 50, 255, 189, 41, 19, 4, 189, 153, 183, 109, 61, 20, 244, 33, 190, 201, 74, 85, 61, 155, 117, 26, 62, 57, 38, 52, 190, 210, 230, 26, 189, 8, 132, 185, 60, 227, 48, 45, 190, 46, 78, 45, 190, 124, 236, 187, 61, 34, 159, 191, 186, 75, 157, 173, 189, 149, 250, 183, 189, 252, 140, 33, 190, 1, 60, 7, 62, 132, 76, 11, 62, 97, 191, 223, 189, 217, 204, 26, 190, 251, 229, 100, 60, 206, 154, 161, 188, 201, 221, 153, 61, 15, 154, 8, 62, 164, 180, 8, 62, 167, 84, 173, 61, 73, 209, 73, 188, 75, 231, 29, 62, 135, 165, 10, 62, 39, 116, 163, 189, 102, 4, 78, 190, 90, 236, 67, 189, 22, 239, 159, 190, 3, 17, 7, 191, 246, 101, 43, 62, 39, 60, 92, 190, 210, 84, 57, 189, 245, 11, 10, 190, 131, 52, 144, 190, 44, 242, 14, 189, 42, 170, 47, 60, 73, 124, 109, 189, 173, 5, 179, 60, 217, 212, 38, 190, 83, 127, 100, 61, 114, 158, 59, 190, 101, 44, 175, 61, 16, 195, 230, 61, 19, 51, 106, 62, 139, 1, 165, 190, 36, 101, 119, 190, 163, 222, 126, 190, 147, 226, 187, 190, 225, 181, 208, 189, 30, 164, 121, 190, 160, 84, 93, 190, 86, 49, 140, 190, 200, 35, 204, 188, 66, 208, 28, 190, 155, 38, 86, 62, 148, 43, 57, 60, 115, 114, 172, 190, 166, 152, 0, 189, 109, 51, 92, 191, 140, 94, 223, 190, 66, 218, 149, 191, 32, 41, 120, 191, 246, 60, 134, 191, 66, 12, 3, 190, 33, 63, 98, 191, 74, 244, 240, 190, 207, 0, 115, 62, 189, 108, 12, 189, 241, 96, 90, 62, 247, 19, 0, 190, 245, 45, 197, 62, 230, 12, 244, 189, 170, 207, 107, 189, 30, 45, 131, 189, 156, 99, 249, 190, 110, 59, 151, 62, 103, 51, 56, 190, 124, 42, 54, 190, 211, 171, 151, 189, 246, 87, 80, 61, 220, 110, 183, 62, 136, 91, 251, 62, 73, 95, 152, 190, 127, 252, 209, 189, 254, 49, 131, 62, 33, 200, 218, 61, 72, 185, 58, 63, 39, 115, 197, 189, 110, 129, 21, 63, 188, 183, 136, 190, 72, 28, 109, 190, 116, 174, 102, 189, 9, 206, 102, 191, 135, 163, 238, 188, 168, 205, 45, 62, 175, 167, 149, 62, 196, 112, 16, 191, 188, 243, 164, 190, 253, 222, 133, 62, 105, 118, 88, 189, 25, 127, 148, 62, 91, 12, 2, 190, 139, 39, 145, 62, 228, 106, 127, 60, 172, 60, 136, 190, 215, 169, 132, 61, 126, 157, 84, 189, 16, 244, 162, 62, 249, 62, 86, 62, 218, 201, 4, 190, 139, 171, 54, 189, 80, 55, 52, 189, 206, 11, 127, 62, 25, 97, 123, 63, 161, 32, 188, 189, 71, 63, 31, 190, 13, 111, 191, 189, 124, 187, 74, 189, 98, 23, 161, 62, 216, 212, 117, 190, 102, 135, 170, 190, 22, 195, 252, 188, 7, 26, 177, 62, 232, 56, 194, 189, 185, 231, 72, 191, 3, 251, 174, 61, 233, 36, 171, 189, 176, 234, 48, 189, 13, 154, 105, 191, 76, 50, 169, 60, 186, 128, 71, 189, 111, 43, 39, 62, 249, 10, 141, 188, 95, 128, 98, 61, 166, 14, 65, 190, 38, 125, 62, 62, 104, 94, 187, 61, 41, 89, 177, 61, 116, 199, 46, 61, 216, 82, 27, 188, 149, 120, 8, 62, 143, 40, 9, 62, 56, 168, 254, 61, 155, 32, 108, 190, 182, 218, 13, 62, 119, 61, 159, 61, 58, 179, 104, 62, 147, 2, 17, 62, 162, 188, 65, 190, 91, 155, 253, 61, 60, 246, 145, 62, 185, 253, 167, 190, 70, 206, 167, 190, 172, 177, 82, 60, 24, 113, 62, 62, 142, 220, 176, 62, 171, 213, 250, 189, 202, 123, 210, 60, 165, 67, 78, 61, 100, 182, 9, 191, 114, 149, 230, 190, 143, 242, 40, 190, 92, 184, 212, 190, 180, 148, 148, 189, 152, 119, 67, 189, 15, 101, 151, 186, 136, 40, 238, 190, 138, 247, 44, 189, 214, 52, 51, 62, 163, 62, 131, 62, 117, 73, 70, 62, 249, 172, 180, 189, 20, 235, 43, 190, 193, 227, 151, 189, 255, 236, 249, 61, 182, 160, 7, 62, 173, 55, 192, 189, 68, 31, 2, 63, 12, 62, 151, 62, 42, 136, 125, 62, 185, 81, 194, 61, 123, 183, 131, 190, 110, 176, 96, 190, 113, 232, 85, 61, 69, 9, 40, 191, 64, 185, 132, 62, 190, 80, 207, 188, 130, 131, 148, 62, 22, 11, 143, 189, 123, 91, 66, 190, 217, 164, 168, 61, 214, 28, 136, 190, 14, 24, 114, 189, 127, 189, 66, 190, 30, 139, 98, 190, 156, 200, 59, 188, 228, 40, 96, 61, 100, 79, 106, 61, 183, 245, 37, 191, 88, 80, 73, 62, 14, 17, 205, 189, 165, 74, 57, 62, 69, 240, 204, 61, 7, 34, 52, 190, 163, 239, 29, 189, 99, 177, 27, 62, 61, 235, 8, 62, 145, 149, 117, 189, 137, 250, 138, 190, 30, 128, 130, 62, 201, 163, 94, 62, 235, 181, 35, 62, 167, 25, 39, 190, 28, 33, 10, 191, 153, 6, 159, 190, 101, 193, 154, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 201, 72, 62, 112, 191, 227, 61, 105, 135, 174, 62, 191, 223, 39, 62, 10, 89, 172, 189, 122, 76, 157, 62, 206, 168, 163, 62, 246, 195, 12, 189, 218, 159, 2, 61, 178, 21, 217, 61, 153, 144, 251, 61, 135, 202, 30, 62, 49, 199, 72, 62, 105, 135, 196, 61, 168, 75, 84, 61, 151, 15, 171, 61, 182, 88, 8, 61, 49, 75, 71, 61, 204, 210, 173, 62, 82, 236, 60, 62, 171, 31, 217, 61, 168, 133, 51, 62, 191, 117, 2, 190, 211, 64, 89, 62, 23, 149, 20, 61, 246, 245, 89, 190, 13, 102, 236, 61, 250, 178, 177, 62, 68, 210, 95, 190, 110, 2, 165, 61, 185, 67, 76, 62, 165, 110, 119, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {169, 70, 11, 191, 81, 94, 81, 191, 172, 34, 124, 62, 241, 17, 160, 191, 23, 117, 99, 61, 81, 67, 9, 62, 59, 67, 73, 63, 11, 252, 18, 191, 120, 185, 2, 59, 6, 38, 205, 191, 64, 1, 147, 190, 223, 82, 225, 190, 241, 133, 239, 62, 239, 238, 149, 191, 63, 236, 178, 62, 154, 151, 41, 62, 216, 94, 38, 191, 71, 142, 219, 190, 30, 150, 202, 191, 59, 224, 128, 190, 98, 10, 82, 59, 99, 31, 184, 189, 46, 39, 86, 63, 146, 89, 61, 188, 49, 182, 73, 62, 54, 180, 92, 189, 190, 199, 55, 189, 166, 242, 153, 63, 182, 145, 100, 62, 99, 209, 204, 61, 209, 51, 63, 190, 194, 161, 172, 190, 101, 133, 2, 190, 236, 169, 106, 62, 187, 119, 220, 190, 96, 79, 108, 190, 52, 135, 25, 190, 71, 56, 60, 190, 246, 230, 61, 188, 124, 195, 58, 190, 6, 242, 177, 190, 123, 210, 231, 189, 200, 195, 160, 190, 177, 6, 182, 189, 199, 0, 211, 61, 247, 155, 22, 63, 167, 33, 153, 61, 198, 182, 135, 190, 59, 232, 108, 190, 114, 4, 111, 189, 228, 12, 169, 62, 110, 6, 75, 190, 212, 189, 130, 190, 245, 142, 210, 190, 154, 118, 138, 62, 88, 164, 143, 190, 244, 55, 116, 189, 168, 209, 229, 59, 43, 62, 17, 190, 170, 102, 58, 189, 70, 138, 156, 62, 186, 242, 47, 190, 200, 70, 140, 190, 119, 172, 78, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 146, 59, 62, 160, 247, 181, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {197, 1, 155, 62, 118, 79, 132, 190, 219, 172, 250, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {149, 146, 158, 63, 159, 46, 182, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0053/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}