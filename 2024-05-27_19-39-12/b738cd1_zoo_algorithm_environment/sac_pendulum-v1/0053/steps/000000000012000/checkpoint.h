// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 157, 200, 190, 56, 189, 220, 63, 45, 75, 222, 62, 178, 141, 46, 63, 234, 29, 17, 63, 148, 8, 19, 62, 54, 173, 176, 190, 124, 26, 76, 191, 73, 249, 0, 191, 66, 21, 46, 63, 3, 70, 132, 63, 157, 174, 22, 62, 24, 249, 49, 63, 59, 158, 42, 63, 115, 143, 124, 62, 20, 103, 244, 190, 15, 242, 233, 190, 49, 122, 229, 190, 84, 22, 140, 62, 200, 248, 2, 63, 165, 241, 214, 190, 175, 229, 29, 63, 36, 213, 177, 191, 5, 239, 203, 190, 100, 100, 55, 63, 29, 101, 207, 62, 135, 88, 135, 62, 196, 90, 153, 61, 13, 212, 210, 62, 25, 148, 205, 62, 59, 132, 171, 189, 157, 130, 220, 190, 102, 11, 54, 63, 185, 63, 112, 62, 141, 232, 38, 191, 254, 202, 187, 62, 8, 44, 18, 61, 131, 153, 240, 190, 77, 241, 16, 63, 72, 254, 37, 63, 178, 104, 244, 62, 248, 116, 11, 63, 83, 190, 248, 62, 22, 189, 176, 191, 20, 57, 177, 190, 166, 251, 144, 190, 132, 4, 134, 190, 125, 67, 215, 190, 126, 72, 166, 62, 80, 18, 40, 62, 188, 41, 15, 63, 42, 33, 85, 63, 73, 200, 3, 191, 114, 53, 210, 62, 141, 158, 192, 189, 80, 140, 138, 191, 220, 179, 217, 190, 46, 127, 142, 62, 131, 209, 88, 191, 126, 100, 203, 62, 222, 4, 170, 62, 210, 165, 205, 61, 65, 113, 6, 191, 115, 43, 212, 62, 101, 42, 92, 62, 226, 164, 210, 190, 11, 248, 37, 63, 184, 142, 154, 61, 3, 9, 46, 61, 80, 39, 44, 188, 230, 32, 16, 63, 108, 169, 200, 60, 66, 60, 38, 190, 130, 74, 82, 190, 124, 248, 126, 190, 145, 222, 174, 190, 145, 143, 72, 63, 76, 137, 27, 62, 145, 68, 42, 62, 38, 33, 224, 190, 113, 90, 3, 63, 11, 96, 32, 63, 17, 163, 32, 63, 229, 153, 142, 187, 174, 209, 99, 191, 199, 58, 56, 62, 216, 116, 127, 189, 47, 238, 137, 189, 176, 4, 164, 191, 109, 174, 11, 191, 114, 129, 23, 63, 224, 5, 169, 191, 63, 177, 95, 190, 31, 51, 7, 63, 111, 52, 50, 63, 73, 179, 236, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {41, 110, 27, 191, 22, 4, 39, 62, 181, 130, 170, 60, 209, 159, 180, 62, 25, 202, 224, 190, 12, 54, 156, 190, 179, 129, 203, 61, 204, 167, 168, 190, 12, 19, 74, 191, 131, 233, 12, 191, 90, 4, 164, 190, 50, 188, 171, 190, 116, 90, 97, 62, 119, 36, 150, 61, 243, 237, 91, 190, 95, 42, 100, 62, 24, 59, 39, 189, 232, 104, 16, 191, 44, 8, 246, 62, 17, 191, 129, 62, 91, 181, 24, 62, 156, 103, 18, 63, 4, 7, 10, 63, 212, 32, 235, 62, 122, 200, 129, 188, 227, 204, 49, 191, 197, 80, 109, 61, 138, 141, 136, 62, 251, 255, 237, 62, 82, 109, 128, 61, 81, 238, 171, 62, 102, 255, 69, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 177, 142, 190, 12, 242, 6, 190, 230, 197, 164, 61, 226, 175, 252, 190, 18, 122, 60, 63, 90, 57, 228, 189, 106, 49, 245, 189, 220, 147, 52, 63, 167, 179, 77, 63, 100, 132, 30, 62, 170, 44, 175, 62, 126, 141, 32, 62, 208, 136, 100, 62, 125, 59, 64, 190, 96, 197, 0, 63, 255, 30, 68, 190, 41, 118, 215, 189, 141, 187, 212, 61, 219, 9, 178, 62, 132, 86, 87, 62, 147, 158, 175, 189, 21, 201, 200, 190, 16, 209, 137, 188, 193, 243, 244, 189, 132, 252, 154, 189, 47, 133, 189, 190, 254, 200, 120, 62, 5, 254, 1, 190, 5, 186, 85, 190, 146, 249, 207, 61, 247, 188, 10, 189, 119, 238, 233, 60, 47, 37, 234, 184, 243, 150, 40, 62, 216, 239, 175, 189, 200, 50, 208, 62, 37, 182, 161, 190, 162, 32, 215, 61, 198, 10, 225, 61, 85, 148, 79, 191, 24, 230, 81, 191, 241, 34, 71, 190, 216, 228, 14, 62, 179, 116, 186, 61, 154, 133, 2, 62, 154, 150, 146, 188, 26, 197, 87, 191, 128, 67, 17, 190, 229, 39, 26, 190, 95, 190, 123, 190, 250, 250, 95, 189, 222, 186, 70, 189, 173, 6, 235, 61, 120, 105, 121, 61, 153, 231, 238, 59, 33, 198, 161, 62, 246, 42, 179, 61, 170, 97, 15, 191, 42, 181, 14, 60, 3, 116, 231, 61, 23, 182, 155, 61, 77, 55, 71, 190, 243, 76, 5, 191, 173, 150, 118, 190, 98, 186, 179, 62, 192, 42, 24, 62, 54, 9, 125, 190, 214, 37, 144, 62, 133, 81, 189, 190, 230, 75, 161, 190, 232, 26, 139, 62, 212, 156, 167, 61, 110, 125, 229, 190, 150, 195, 124, 61, 145, 229, 90, 62, 16, 0, 98, 190, 76, 226, 103, 62, 109, 216, 198, 61, 180, 174, 202, 188, 23, 165, 153, 189, 67, 220, 156, 189, 115, 190, 98, 61, 55, 161, 229, 189, 231, 198, 182, 62, 238, 157, 87, 62, 234, 99, 70, 61, 216, 164, 47, 61, 123, 2, 169, 61, 33, 175, 253, 188, 193, 109, 228, 62, 240, 56, 19, 190, 73, 206, 249, 61, 223, 200, 107, 62, 146, 80, 128, 62, 158, 16, 128, 62, 84, 226, 246, 189, 48, 145, 168, 191, 83, 37, 179, 189, 80, 166, 222, 60, 165, 220, 234, 189, 8, 184, 168, 189, 159, 239, 157, 189, 69, 252, 194, 61, 129, 211, 165, 190, 21, 75, 155, 61, 86, 159, 39, 191, 99, 227, 144, 190, 224, 130, 172, 62, 1, 172, 169, 60, 241, 118, 61, 189, 208, 254, 181, 190, 132, 118, 119, 61, 222, 217, 24, 60, 251, 111, 217, 189, 30, 8, 151, 62, 27, 108, 38, 62, 222, 30, 143, 190, 89, 29, 167, 190, 206, 210, 135, 190, 215, 79, 47, 190, 28, 113, 115, 190, 119, 76, 208, 189, 103, 31, 73, 62, 166, 245, 211, 189, 117, 185, 87, 62, 11, 22, 125, 191, 154, 255, 242, 190, 170, 152, 10, 191, 122, 47, 181, 61, 118, 198, 14, 190, 118, 23, 24, 189, 105, 167, 186, 189, 180, 227, 51, 62, 192, 57, 41, 60, 152, 91, 139, 59, 119, 13, 76, 189, 96, 188, 51, 62, 250, 124, 241, 188, 210, 205, 240, 189, 208, 40, 34, 190, 145, 199, 89, 60, 51, 241, 49, 189, 169, 91, 129, 189, 56, 75, 28, 62, 225, 9, 120, 189, 98, 131, 226, 61, 230, 124, 204, 189, 141, 50, 21, 188, 39, 1, 5, 61, 28, 233, 104, 189, 98, 105, 26, 190, 225, 122, 232, 189, 89, 19, 182, 189, 247, 85, 62, 189, 105, 122, 178, 184, 27, 253, 189, 188, 76, 23, 58, 60, 90, 221, 153, 61, 17, 168, 122, 185, 227, 64, 91, 189, 183, 53, 88, 190, 199, 50, 149, 61, 224, 108, 6, 62, 156, 173, 17, 190, 70, 187, 115, 191, 8, 35, 30, 62, 136, 163, 201, 188, 59, 18, 98, 61, 30, 39, 130, 191, 11, 0, 203, 190, 151, 245, 22, 62, 47, 117, 109, 61, 241, 23, 132, 61, 191, 20, 12, 190, 44, 67, 50, 61, 236, 106, 3, 61, 56, 211, 102, 190, 203, 249, 53, 62, 38, 5, 24, 62, 219, 239, 200, 62, 115, 157, 223, 61, 46, 148, 33, 62, 190, 14, 166, 61, 179, 156, 135, 61, 216, 86, 21, 189, 90, 246, 142, 190, 99, 255, 62, 61, 38, 189, 144, 189, 133, 117, 97, 62, 226, 60, 142, 188, 61, 161, 219, 61, 136, 35, 22, 190, 63, 118, 11, 62, 158, 139, 151, 61, 195, 203, 233, 190, 102, 165, 107, 189, 2, 107, 134, 191, 178, 10, 147, 191, 181, 161, 22, 191, 28, 186, 181, 62, 96, 24, 69, 191, 9, 248, 203, 190, 248, 98, 9, 62, 0, 132, 56, 62, 117, 236, 19, 62, 161, 50, 132, 190, 242, 163, 212, 62, 155, 148, 77, 62, 199, 32, 130, 190, 193, 26, 151, 62, 11, 102, 133, 190, 23, 61, 190, 62, 147, 72, 88, 62, 194, 213, 118, 186, 99, 70, 52, 61, 48, 22, 13, 62, 127, 30, 171, 62, 252, 48, 191, 62, 234, 124, 9, 190, 150, 95, 171, 189, 207, 213, 186, 61, 39, 240, 208, 62, 246, 138, 196, 62, 33, 18, 183, 190, 24, 207, 134, 190, 104, 70, 222, 62, 154, 196, 185, 61, 249, 44, 201, 62, 236, 221, 28, 62, 223, 166, 16, 61, 50, 195, 85, 62, 60, 74, 23, 191, 226, 26, 21, 63, 29, 201, 184, 62, 5, 29, 240, 190, 31, 170, 193, 62, 203, 120, 223, 190, 45, 243, 117, 62, 90, 238, 39, 191, 224, 203, 44, 187, 4, 218, 101, 62, 56, 132, 249, 62, 83, 37, 122, 187, 6, 33, 182, 190, 36, 69, 50, 60, 91, 150, 201, 60, 213, 114, 32, 62, 22, 119, 37, 62, 235, 54, 160, 190, 119, 77, 53, 191, 14, 247, 208, 62, 38, 10, 205, 61, 57, 40, 233, 189, 172, 123, 66, 190, 1, 109, 205, 190, 215, 138, 107, 62, 78, 118, 205, 189, 97, 231, 242, 61, 253, 56, 93, 62, 213, 188, 12, 62, 45, 21, 5, 61, 157, 31, 213, 189, 25, 81, 213, 188, 70, 51, 211, 189, 163, 75, 145, 62, 52, 56, 58, 62, 152, 248, 112, 190, 17, 102, 159, 189, 127, 170, 71, 190, 244, 245, 152, 61, 193, 34, 150, 190, 226, 90, 38, 190, 86, 7, 140, 62, 23, 201, 57, 62, 192, 198, 225, 59, 25, 78, 145, 190, 136, 250, 21, 60, 179, 145, 56, 61, 138, 200, 149, 62, 84, 224, 182, 61, 212, 100, 230, 189, 160, 230, 33, 62, 232, 5, 210, 185, 178, 134, 0, 62, 83, 226, 185, 59, 221, 159, 213, 189, 79, 177, 237, 189, 241, 198, 92, 61, 47, 5, 174, 191, 76, 220, 219, 190, 235, 228, 197, 189, 200, 115, 3, 190, 183, 143, 245, 189, 210, 90, 111, 188, 169, 127, 158, 188, 78, 242, 89, 190, 65, 34, 86, 190, 113, 199, 63, 191, 239, 92, 55, 190, 163, 98, 251, 61, 19, 181, 21, 189, 217, 21, 163, 190, 61, 196, 138, 190, 52, 228, 111, 62, 33, 3, 244, 189, 0, 161, 1, 187, 27, 174, 218, 62, 172, 87, 169, 62, 49, 105, 161, 190, 215, 60, 8, 191, 51, 197, 68, 189, 46, 244, 14, 189, 180, 154, 219, 190, 122, 11, 240, 61, 72, 203, 111, 62, 186, 157, 11, 190, 250, 42, 79, 62, 73, 4, 213, 191, 137, 187, 56, 190, 206, 25, 214, 190, 79, 55, 4, 189, 146, 242, 162, 62, 95, 170, 190, 60, 39, 234, 222, 61, 93, 246, 8, 190, 229, 23, 175, 61, 48, 140, 93, 62, 96, 56, 30, 191, 20, 183, 129, 62, 91, 2, 187, 188, 128, 64, 218, 190, 150, 120, 18, 189, 49, 113, 14, 190, 71, 208, 27, 62, 121, 5, 39, 191, 149, 219, 20, 61, 97, 137, 182, 61, 62, 113, 96, 62, 249, 141, 43, 190, 137, 146, 114, 190, 226, 96, 163, 189, 191, 196, 10, 62, 109, 37, 114, 62, 199, 89, 173, 61, 97, 86, 35, 190, 228, 147, 133, 62, 65, 154, 39, 62, 170, 252, 106, 62, 11, 199, 225, 189, 31, 89, 157, 190, 88, 123, 83, 60, 234, 22, 160, 62, 72, 137, 134, 191, 142, 186, 90, 62, 107, 222, 155, 62, 13, 88, 140, 62, 217, 70, 100, 190, 21, 244, 207, 62, 16, 66, 212, 60, 210, 248, 30, 191, 155, 55, 18, 191, 229, 115, 28, 191, 164, 102, 196, 190, 143, 59, 75, 62, 67, 80, 133, 190, 167, 56, 168, 62, 198, 38, 43, 191, 58, 103, 79, 62, 218, 136, 14, 62, 72, 242, 151, 62, 59, 35, 120, 62, 4, 94, 181, 190, 121, 71, 73, 190, 100, 253, 8, 189, 221, 184, 228, 61, 132, 191, 6, 62, 232, 248, 161, 190, 123, 118, 56, 63, 132, 79, 161, 62, 64, 107, 141, 62, 12, 37, 165, 62, 95, 182, 171, 190, 13, 3, 251, 187, 176, 185, 194, 60, 172, 43, 236, 62, 158, 167, 223, 189, 134, 108, 134, 61, 113, 198, 112, 190, 81, 94, 153, 191, 138, 100, 53, 190, 69, 67, 4, 190, 252, 96, 107, 61, 5, 132, 88, 191, 136, 125, 4, 191, 135, 142, 163, 62, 79, 212, 114, 59, 153, 133, 164, 62, 162, 211, 5, 190, 255, 206, 109, 62, 227, 92, 57, 62, 63, 44, 14, 190, 193, 107, 25, 190, 205, 152, 145, 61, 77, 93, 221, 62, 21, 42, 221, 61, 139, 147, 22, 60, 187, 224, 76, 190, 236, 166, 126, 189, 153, 215, 162, 62, 251, 123, 211, 62, 68, 184, 24, 190, 219, 11, 79, 190, 248, 228, 190, 61, 173, 211, 109, 62, 28, 153, 199, 62, 92, 219, 148, 190, 21, 12, 149, 191, 17, 156, 117, 62, 248, 88, 185, 61, 81, 60, 139, 62, 164, 27, 136, 190, 226, 206, 54, 62, 223, 44, 49, 62, 6, 42, 43, 191, 194, 75, 50, 190, 41, 45, 190, 190, 211, 221, 50, 62, 198, 82, 66, 61, 30, 237, 137, 190, 220, 209, 165, 189, 203, 247, 45, 191, 133, 228, 110, 62, 203, 71, 0, 190, 147, 230, 34, 62, 141, 113, 37, 62, 218, 81, 29, 61, 1, 205, 139, 189, 104, 132, 30, 190, 137, 75, 51, 62, 201, 117, 153, 61, 186, 101, 121, 190, 149, 21, 78, 190, 35, 88, 84, 189, 215, 193, 7, 62, 144, 72, 132, 62, 98, 229, 216, 190, 25, 77, 159, 190, 158, 115, 142, 189, 28, 203, 133, 61, 168, 116, 24, 62, 226, 220, 5, 190, 242, 193, 146, 61, 86, 94, 20, 190, 35, 91, 212, 189, 48, 124, 58, 188, 67, 116, 133, 189, 228, 196, 24, 190, 104, 126, 135, 189, 220, 162, 42, 190, 66, 246, 48, 190, 7, 237, 147, 189, 108, 143, 241, 188, 45, 109, 14, 190, 45, 205, 144, 190, 226, 11, 241, 61, 161, 157, 26, 190, 224, 235, 67, 61, 68, 67, 206, 61, 184, 139, 74, 190, 236, 33, 96, 61, 90, 45, 112, 189, 27, 247, 66, 189, 66, 1, 5, 190, 194, 243, 138, 61, 54, 178, 186, 188, 115, 114, 138, 61, 153, 40, 9, 190, 73, 175, 5, 190, 57, 237, 33, 62, 126, 82, 54, 190, 191, 178, 209, 189, 190, 208, 214, 59, 2, 128, 178, 61, 117, 192, 186, 61, 115, 102, 98, 189, 228, 241, 236, 61, 81, 85, 150, 188, 55, 121, 73, 62, 84, 53, 255, 189, 99, 163, 130, 61, 210, 241, 222, 189, 68, 111, 32, 190, 140, 251, 171, 61, 246, 128, 93, 61, 127, 171, 32, 62, 71, 103, 31, 190, 184, 216, 150, 61, 37, 130, 76, 189, 32, 34, 46, 189, 0, 85, 210, 189, 163, 128, 137, 189, 175, 217, 38, 190, 227, 193, 242, 189, 65, 155, 199, 61, 168, 60, 80, 61, 242, 86, 52, 190, 77, 208, 0, 190, 144, 15, 0, 190, 255, 164, 2, 190, 238, 120, 98, 61, 154, 18, 50, 62, 153, 197, 23, 190, 196, 7, 203, 191, 132, 56, 64, 191, 172, 178, 112, 61, 36, 31, 10, 191, 188, 193, 215, 190, 83, 164, 66, 62, 117, 150, 71, 61, 118, 90, 76, 189, 133, 145, 5, 190, 91, 182, 61, 191, 112, 44, 6, 188, 186, 124, 77, 62, 134, 144, 249, 59, 166, 171, 252, 188, 248, 98, 251, 62, 233, 223, 19, 62, 236, 12, 165, 61, 120, 8, 51, 190, 250, 90, 73, 62, 34, 59, 159, 188, 70, 242, 116, 190, 225, 217, 199, 189, 196, 1, 129, 61, 90, 199, 13, 190, 179, 16, 45, 189, 249, 244, 104, 190, 170, 237, 155, 62, 133, 62, 67, 190, 177, 83, 142, 62, 54, 150, 2, 189, 168, 176, 157, 62, 164, 81, 48, 191, 179, 239, 146, 191, 7, 92, 59, 191, 215, 205, 235, 61, 152, 203, 110, 191, 100, 84, 204, 189, 26, 161, 3, 61, 26, 2, 168, 188, 145, 132, 157, 188, 169, 86, 24, 190, 106, 39, 167, 190, 231, 28, 82, 61, 148, 123, 6, 190, 162, 116, 146, 60, 53, 126, 85, 189, 214, 225, 0, 63, 100, 165, 56, 62, 52, 103, 68, 190, 53, 61, 103, 188, 119, 32, 43, 62, 137, 148, 28, 62, 39, 128, 24, 188, 239, 243, 51, 190, 123, 80, 227, 61, 179, 112, 131, 61, 31, 187, 142, 190, 238, 27, 173, 61, 87, 149, 39, 62, 144, 30, 150, 189, 108, 168, 152, 61, 212, 29, 47, 61, 172, 2, 136, 62, 239, 29, 170, 190, 109, 240, 2, 192, 104, 42, 108, 190, 119, 35, 114, 62, 184, 155, 212, 190, 243, 55, 153, 189, 238, 184, 179, 62, 17, 125, 15, 61, 179, 45, 23, 190, 120, 246, 34, 62, 39, 117, 163, 190, 191, 196, 148, 190, 234, 3, 236, 62, 46, 221, 192, 190, 85, 196, 172, 60, 86, 210, 97, 190, 62, 37, 21, 62, 12, 55, 177, 60, 223, 112, 247, 60, 102, 196, 164, 62, 56, 149, 77, 61, 252, 121, 250, 189, 236, 207, 27, 190, 229, 23, 130, 191, 207, 78, 219, 61, 156, 145, 205, 188, 141, 107, 222, 60, 236, 86, 239, 62, 99, 174, 194, 190, 223, 78, 164, 62, 149, 213, 23, 190, 189, 148, 196, 190, 15, 106, 11, 191, 118, 95, 163, 190, 158, 229, 18, 62, 250, 149, 242, 55, 223, 89, 159, 62, 114, 54, 8, 189, 91, 150, 25, 62, 229, 147, 139, 61, 96, 227, 18, 191, 16, 14, 203, 61, 118, 190, 12, 61, 36, 126, 213, 190, 141, 153, 253, 60, 217, 231, 69, 190, 76, 7, 133, 62, 204, 143, 81, 191, 194, 53, 94, 62, 154, 174, 73, 189, 81, 166, 99, 62, 78, 176, 196, 189, 247, 31, 227, 189, 41, 130, 205, 59, 222, 2, 59, 188, 118, 189, 128, 62, 1, 192, 172, 61, 23, 65, 10, 190, 70, 149, 116, 62, 69, 202, 220, 189, 251, 51, 153, 187, 32, 182, 17, 189, 158, 8, 167, 190, 186, 156, 2, 189, 132, 27, 103, 62, 233, 212, 162, 189, 185, 244, 154, 62, 34, 207, 18, 190, 119, 96, 170, 62, 49, 214, 181, 190, 66, 60, 204, 189, 100, 108, 250, 61, 187, 56, 83, 190, 27, 251, 158, 190, 15, 20, 51, 62, 179, 69, 168, 61, 119, 26, 132, 60, 30, 187, 33, 189, 46, 254, 32, 62, 89, 195, 130, 190, 254, 26, 99, 62, 19, 22, 20, 62, 157, 17, 84, 189, 44, 104, 137, 61, 83, 178, 130, 189, 88, 15, 129, 61, 72, 143, 79, 188, 101, 59, 9, 62, 88, 254, 37, 62, 190, 21, 197, 189, 189, 222, 49, 62, 232, 103, 105, 188, 13, 196, 128, 61, 240, 24, 118, 62, 34, 111, 89, 189, 11, 199, 22, 62, 103, 121, 234, 60, 215, 190, 181, 190, 248, 96, 95, 62, 117, 151, 108, 61, 94, 69, 238, 61, 138, 0, 170, 190, 102, 58, 149, 189, 92, 179, 116, 61, 230, 113, 151, 190, 112, 95, 121, 190, 219, 43, 30, 190, 71, 212, 110, 190, 103, 139, 206, 188, 119, 0, 208, 188, 178, 134, 202, 188, 3, 147, 77, 191, 220, 179, 114, 187, 231, 54, 74, 61, 202, 255, 132, 61, 190, 82, 207, 59, 110, 234, 21, 190, 48, 211, 161, 61, 251, 148, 146, 61, 133, 31, 134, 61, 191, 152, 76, 62, 34, 127, 127, 190, 88, 142, 114, 62, 57, 80, 96, 62, 219, 28, 117, 62, 57, 183, 68, 189, 64, 19, 147, 190, 222, 152, 215, 189, 227, 88, 231, 61, 97, 122, 227, 186, 8, 204, 176, 62, 89, 182, 233, 190, 63, 183, 96, 62, 82, 191, 22, 63, 117, 247, 49, 190, 149, 236, 171, 62, 209, 154, 186, 190, 68, 79, 107, 62, 27, 128, 135, 62, 254, 91, 83, 190, 242, 92, 249, 188, 209, 81, 92, 190, 148, 36, 109, 62, 186, 126, 0, 191, 0, 154, 238, 189, 150, 172, 36, 62, 62, 221, 214, 61, 77, 55, 154, 190, 56, 100, 112, 190, 134, 85, 198, 189, 71, 217, 77, 62, 173, 60, 112, 62, 91, 219, 214, 61, 6, 250, 99, 62, 199, 59, 231, 189, 233, 142, 168, 186, 84, 228, 82, 61, 99, 117, 186, 61, 79, 138, 88, 191, 91, 115, 7, 191, 254, 153, 93, 62, 74, 153, 15, 62, 42, 131, 41, 62, 215, 123, 117, 61, 73, 20, 111, 61, 225, 166, 140, 190, 198, 18, 211, 60, 26, 73, 154, 61, 180, 124, 111, 190, 19, 80, 63, 61, 72, 169, 215, 189, 220, 232, 44, 188, 109, 226, 213, 187, 140, 141, 112, 189, 203, 6, 16, 58, 15, 230, 43, 191, 217, 229, 27, 62, 179, 126, 19, 62, 67, 194, 36, 60, 48, 18, 118, 190, 177, 115, 37, 62, 112, 151, 228, 61, 150, 86, 90, 189, 231, 4, 192, 61, 184, 42, 136, 62, 152, 39, 193, 188, 228, 102, 158, 62, 196, 234, 225, 61, 45, 104, 235, 61, 225, 64, 33, 62, 228, 23, 149, 190, 92, 131, 68, 189, 85, 169, 101, 188, 128, 92, 206, 59, 178, 54, 68, 61, 250, 218, 50, 189, 186, 161, 63, 62, 6, 192, 199, 189, 26, 27, 216, 60, 2, 74, 32, 62, 163, 56, 5, 61, 130, 182, 139, 61, 99, 52, 151, 190, 108, 132, 95, 190, 241, 47, 49, 188, 46, 35, 69, 189, 156, 93, 33, 190, 171, 182, 169, 60, 245, 134, 167, 189, 54, 231, 216, 190, 57, 78, 43, 62, 52, 160, 56, 62, 146, 83, 54, 62, 68, 80, 139, 61, 178, 211, 68, 62, 167, 115, 178, 61, 209, 50, 62, 60, 145, 231, 107, 62, 107, 162, 63, 191, 60, 104, 236, 190, 206, 248, 149, 61, 132, 133, 24, 62, 67, 59, 163, 62, 20, 81, 25, 190, 238, 22, 86, 189, 226, 64, 3, 62, 53, 234, 162, 61, 161, 22, 45, 190, 157, 103, 242, 189, 41, 19, 4, 189, 153, 183, 109, 61, 65, 6, 33, 190, 201, 74, 85, 61, 155, 117, 26, 62, 57, 38, 52, 190, 210, 230, 26, 189, 8, 132, 185, 60, 235, 29, 45, 190, 198, 66, 45, 190, 124, 236, 187, 61, 202, 102, 245, 184, 75, 157, 173, 189, 149, 250, 183, 189, 252, 140, 33, 190, 1, 60, 7, 62, 132, 76, 11, 62, 124, 242, 217, 189, 60, 167, 26, 190, 224, 132, 185, 60, 206, 154, 161, 188, 229, 201, 161, 61, 15, 154, 8, 62, 76, 198, 10, 62, 31, 218, 197, 61, 73, 209, 73, 188, 75, 231, 29, 62, 135, 165, 10, 62, 254, 253, 0, 189, 82, 68, 135, 189, 221, 52, 164, 58, 239, 49, 64, 190, 53, 237, 228, 190, 54, 99, 123, 62, 58, 136, 2, 190, 58, 227, 3, 189, 69, 197, 232, 189, 127, 181, 117, 190, 243, 224, 168, 188, 222, 140, 40, 61, 168, 119, 32, 189, 255, 67, 12, 62, 46, 8, 42, 190, 254, 186, 2, 62, 180, 86, 220, 189, 230, 31, 73, 62, 155, 40, 11, 62, 57, 185, 144, 62, 20, 13, 128, 190, 251, 227, 7, 190, 202, 156, 53, 189, 188, 209, 61, 190, 6, 213, 71, 189, 180, 24, 95, 190, 5, 85, 69, 190, 217, 114, 80, 190, 224, 140, 77, 61, 213, 118, 5, 190, 210, 24, 101, 62, 40, 42, 213, 61, 23, 119, 131, 189, 239, 185, 34, 59, 23, 224, 21, 191, 29, 136, 202, 190, 197, 248, 133, 191, 9, 93, 87, 191, 247, 229, 102, 191, 94, 184, 2, 190, 69, 82, 92, 191, 43, 157, 178, 190, 43, 187, 140, 62, 197, 191, 149, 189, 33, 127, 115, 62, 192, 124, 211, 189, 149, 186, 158, 62, 6, 33, 221, 61, 84, 108, 18, 189, 218, 96, 6, 190, 75, 15, 221, 190, 190, 197, 150, 62, 76, 28, 97, 190, 0, 141, 219, 189, 172, 129, 249, 189, 167, 54, 118, 62, 80, 19, 236, 62, 210, 95, 210, 62, 161, 254, 147, 190, 112, 155, 10, 190, 246, 51, 210, 62, 201, 181, 143, 62, 54, 216, 37, 63, 0, 100, 195, 188, 2, 54, 36, 63, 81, 156, 50, 190, 217, 247, 114, 190, 63, 6, 77, 188, 120, 119, 101, 191, 37, 60, 154, 189, 211, 226, 242, 61, 43, 224, 142, 62, 68, 190, 28, 191, 216, 67, 139, 190, 11, 196, 132, 62, 170, 162, 230, 189, 122, 46, 145, 62, 138, 129, 8, 190, 212, 51, 140, 62, 23, 174, 176, 188, 121, 75, 145, 190, 202, 124, 80, 59, 0, 62, 201, 188, 122, 199, 153, 62, 245, 34, 55, 62, 172, 247, 0, 190, 235, 90, 20, 189, 10, 164, 204, 188, 155, 162, 104, 62, 153, 231, 68, 63, 99, 62, 243, 189, 229, 219, 231, 189, 232, 125, 44, 187, 26, 151, 83, 189, 55, 176, 166, 62, 230, 119, 103, 190, 190, 227, 113, 190, 105, 237, 144, 60, 225, 42, 170, 62, 13, 192, 83, 189, 45, 181, 68, 191, 161, 86, 58, 61, 230, 47, 10, 190, 160, 36, 129, 189, 110, 54, 107, 191, 176, 40, 103, 186, 73, 216, 234, 189, 148, 152, 24, 62, 66, 72, 132, 60, 101, 91, 141, 61, 8, 202, 70, 190, 23, 168, 56, 62, 69, 44, 200, 61, 155, 153, 166, 61, 194, 162, 210, 59, 16, 101, 252, 60, 37, 170, 232, 61, 245, 21, 25, 62, 190, 113, 28, 62, 97, 148, 54, 190, 202, 94, 12, 62, 174, 135, 61, 188, 215, 139, 105, 62, 172, 115, 42, 62, 105, 34, 23, 190, 89, 245, 221, 61, 98, 117, 154, 62, 21, 161, 152, 190, 7, 143, 180, 190, 162, 56, 71, 188, 5, 174, 102, 62, 251, 215, 163, 62, 52, 15, 118, 189, 195, 95, 179, 61, 199, 113, 197, 61, 54, 64, 11, 191, 67, 248, 35, 190, 178, 183, 165, 189, 139, 14, 150, 190, 165, 147, 4, 190, 57, 252, 13, 190, 49, 227, 151, 187, 228, 150, 245, 190, 181, 124, 167, 188, 132, 160, 38, 62, 206, 202, 79, 62, 165, 181, 129, 62, 107, 13, 20, 190, 172, 64, 25, 190, 92, 119, 187, 189, 90, 67, 206, 61, 107, 187, 216, 61, 207, 204, 189, 189, 61, 114, 147, 62, 124, 201, 133, 62, 129, 224, 117, 62, 219, 7, 162, 61, 2, 31, 95, 190, 211, 164, 128, 190, 177, 6, 132, 61, 121, 14, 0, 191, 254, 156, 132, 62, 7, 66, 71, 188, 174, 204, 151, 62, 17, 28, 205, 60, 59, 68, 22, 190, 32, 199, 253, 61, 77, 51, 141, 190, 74, 104, 85, 62, 120, 246, 51, 60, 224, 115, 211, 189, 187, 130, 213, 189, 140, 255, 18, 189, 231, 91, 159, 61, 0, 104, 42, 191, 167, 72, 62, 62, 123, 204, 184, 189, 121, 243, 202, 61, 29, 193, 26, 62, 73, 176, 127, 190, 60, 6, 4, 189, 58, 80, 8, 62, 150, 58, 240, 61, 29, 93, 13, 189, 131, 218, 153, 190, 237, 14, 71, 62, 91, 229, 57, 62, 216, 86, 43, 62, 22, 56, 65, 189, 166, 109, 4, 191, 143, 30, 178, 190, 47, 79, 11, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 86, 30, 62, 103, 59, 148, 61, 71, 118, 174, 62, 140, 102, 101, 62, 10, 89, 172, 189, 116, 195, 156, 62, 232, 190, 164, 62, 167, 55, 127, 189, 139, 225, 107, 60, 67, 46, 52, 62, 217, 88, 182, 61, 199, 9, 22, 62, 62, 131, 81, 62, 247, 110, 228, 61, 55, 255, 149, 188, 184, 125, 8, 62, 0, 32, 79, 61, 147, 21, 129, 61, 12, 24, 144, 62, 175, 114, 26, 62, 89, 188, 254, 61, 164, 129, 6, 62, 154, 244, 12, 190, 141, 3, 126, 62, 168, 149, 3, 61, 85, 4, 80, 190, 38, 230, 86, 62, 183, 5, 173, 62, 97, 225, 38, 190, 184, 6, 236, 61, 17, 4, 44, 62, 171, 148, 102, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 232, 16, 191, 53, 160, 17, 191, 197, 86, 156, 62, 173, 216, 170, 191, 23, 117, 99, 61, 184, 66, 61, 62, 78, 145, 100, 63, 229, 115, 56, 191, 70, 14, 166, 189, 126, 245, 216, 191, 239, 73, 179, 190, 5, 79, 6, 191, 50, 112, 236, 62, 203, 78, 98, 191, 230, 141, 88, 188, 21, 46, 1, 62, 142, 20, 25, 191, 244, 168, 192, 190, 33, 144, 187, 191, 226, 202, 169, 190, 44, 11, 116, 61, 200, 97, 53, 190, 72, 126, 43, 63, 236, 18, 2, 188, 73, 198, 37, 62, 99, 213, 93, 189, 145, 168, 1, 61, 209, 64, 139, 63, 137, 88, 103, 62, 252, 95, 42, 62, 244, 106, 183, 190, 19, 165, 231, 190, 232, 61, 114, 60, 21, 246, 201, 62, 123, 32, 173, 190, 67, 251, 17, 190, 52, 135, 25, 190, 250, 124, 72, 190, 76, 15, 134, 61, 62, 126, 84, 189, 14, 155, 183, 189, 89, 146, 163, 59, 242, 18, 27, 190, 115, 143, 116, 189, 234, 92, 52, 62, 71, 22, 99, 62, 152, 80, 245, 61, 91, 12, 154, 189, 110, 161, 27, 190, 207, 247, 158, 60, 20, 69, 89, 62, 99, 30, 11, 189, 75, 123, 63, 190, 162, 65, 104, 190, 36, 135, 214, 62, 154, 189, 107, 190, 7, 19, 196, 188, 122, 220, 230, 59, 51, 231, 37, 190, 249, 226, 173, 189, 199, 3, 190, 62, 15, 182, 63, 190, 90, 64, 198, 189, 8, 119, 50, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 59, 67, 62, 151, 237, 88, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {70, 247, 136, 61, 137, 194, 194, 191, 27, 62, 221, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {144, 214, 50, 64, 218, 152, 23, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0053/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}