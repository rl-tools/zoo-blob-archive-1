// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 224, 52, 191, 35, 241, 172, 63, 222, 135, 195, 62, 97, 233, 199, 189, 122, 249, 94, 191, 59, 153, 156, 62, 90, 61, 24, 63, 165, 175, 143, 63, 208, 73, 149, 62, 151, 110, 39, 63, 11, 190, 153, 191, 24, 214, 209, 190, 128, 228, 228, 189, 234, 118, 103, 189, 126, 170, 113, 190, 77, 131, 150, 62, 95, 169, 104, 191, 146, 97, 141, 190, 75, 100, 183, 190, 31, 89, 193, 191, 201, 215, 195, 190, 193, 16, 6, 191, 186, 61, 70, 63, 150, 162, 228, 189, 168, 11, 207, 190, 57, 170, 170, 190, 188, 85, 144, 190, 219, 83, 62, 62, 237, 0, 214, 62, 112, 118, 51, 190, 242, 190, 169, 62, 227, 45, 120, 62, 23, 244, 184, 190, 95, 158, 238, 62, 140, 81, 14, 191, 88, 69, 41, 188, 188, 89, 73, 191, 7, 129, 230, 63, 237, 196, 193, 62, 163, 65, 0, 61, 227, 34, 125, 63, 229, 69, 78, 63, 222, 234, 162, 190, 15, 155, 77, 63, 19, 114, 23, 190, 183, 34, 212, 62, 252, 53, 186, 62, 214, 99, 178, 190, 226, 211, 25, 62, 224, 254, 213, 191, 13, 5, 173, 190, 127, 33, 6, 63, 164, 83, 132, 62, 139, 115, 207, 62, 196, 243, 141, 191, 65, 172, 224, 190, 142, 254, 132, 189, 83, 190, 133, 191, 120, 135, 87, 62, 189, 120, 139, 59, 120, 209, 107, 62, 129, 247, 186, 62, 63, 181, 16, 63, 187, 177, 236, 190, 101, 134, 73, 63, 138, 91, 65, 62, 19, 244, 67, 61, 202, 57, 210, 191, 121, 134, 183, 190, 242, 248, 176, 62, 181, 12, 233, 61, 102, 201, 142, 188, 99, 60, 197, 62, 100, 224, 34, 191, 184, 61, 248, 61, 179, 135, 211, 62, 166, 246, 192, 189, 16, 182, 3, 191, 126, 70, 133, 191, 60, 186, 159, 190, 117, 69, 70, 60, 25, 151, 247, 61, 148, 208, 37, 190, 249, 255, 42, 191, 91, 138, 166, 190, 33, 175, 94, 191, 209, 148, 34, 190, 243, 192, 230, 62, 190, 70, 206, 190, 148, 35, 63, 63, 229, 252, 217, 188, 220, 32, 62, 191, 217, 18, 194, 62, 9, 163, 117, 190, 253, 64, 227, 62, 58, 93, 242, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {161, 90, 178, 190, 14, 219, 234, 190, 13, 212, 221, 189, 239, 195, 14, 191, 168, 101, 138, 190, 55, 140, 62, 62, 100, 184, 32, 190, 220, 127, 20, 61, 198, 225, 20, 191, 214, 159, 233, 188, 3, 57, 167, 61, 97, 245, 59, 63, 109, 216, 32, 187, 141, 139, 179, 190, 14, 4, 140, 61, 15, 236, 207, 61, 10, 139, 249, 61, 231, 46, 98, 62, 69, 69, 59, 190, 173, 13, 166, 62, 157, 15, 144, 191, 205, 53, 37, 63, 204, 169, 196, 62, 177, 67, 0, 191, 81, 204, 111, 189, 228, 55, 151, 190, 163, 22, 164, 187, 192, 36, 215, 190, 114, 174, 130, 62, 126, 158, 41, 61, 114, 40, 92, 190, 41, 191, 179, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 144, 187, 190, 134, 176, 150, 61, 1, 188, 207, 190, 215, 222, 240, 190, 57, 130, 16, 61, 255, 251, 30, 62, 63, 159, 108, 62, 137, 39, 183, 61, 211, 229, 221, 189, 44, 99, 203, 188, 71, 142, 211, 188, 124, 66, 211, 60, 95, 0, 131, 189, 224, 124, 6, 190, 151, 99, 41, 190, 208, 75, 131, 61, 243, 11, 173, 61, 171, 229, 209, 190, 157, 48, 248, 62, 168, 231, 187, 62, 195, 147, 190, 190, 65, 9, 177, 62, 88, 31, 146, 189, 146, 215, 14, 62, 183, 253, 177, 190, 140, 172, 133, 190, 2, 4, 125, 62, 242, 93, 161, 61, 47, 224, 175, 62, 109, 245, 242, 189, 97, 155, 204, 60, 108, 57, 152, 62, 36, 174, 50, 62, 99, 248, 184, 61, 15, 22, 143, 190, 0, 188, 90, 62, 235, 239, 0, 191, 215, 16, 75, 189, 141, 85, 51, 191, 249, 29, 154, 190, 108, 179, 130, 191, 60, 205, 60, 189, 21, 237, 175, 189, 132, 128, 147, 62, 67, 170, 41, 61, 171, 3, 254, 188, 75, 94, 252, 60, 51, 25, 145, 189, 125, 31, 184, 190, 142, 18, 171, 189, 13, 111, 92, 189, 252, 201, 236, 189, 211, 243, 214, 190, 162, 94, 45, 190, 38, 208, 182, 61, 24, 188, 34, 62, 208, 116, 244, 61, 138, 225, 184, 62, 207, 134, 52, 62, 199, 37, 172, 190, 122, 187, 182, 62, 64, 202, 13, 190, 246, 120, 162, 62, 190, 180, 135, 61, 125, 50, 59, 190, 45, 86, 95, 185, 114, 188, 163, 190, 83, 49, 250, 189, 53, 128, 144, 62, 89, 53, 186, 61, 164, 246, 125, 189, 163, 15, 45, 62, 212, 164, 215, 62, 77, 92, 146, 61, 13, 110, 211, 61, 139, 73, 150, 190, 250, 47, 83, 189, 107, 81, 77, 190, 14, 227, 214, 60, 152, 124, 196, 189, 138, 171, 147, 190, 233, 118, 210, 190, 18, 162, 148, 61, 154, 64, 30, 62, 96, 1, 39, 190, 191, 95, 55, 190, 106, 60, 165, 189, 144, 72, 32, 190, 89, 104, 125, 190, 214, 124, 139, 188, 248, 148, 134, 190, 57, 115, 23, 62, 42, 249, 135, 60, 230, 80, 49, 190, 18, 255, 63, 190, 116, 177, 66, 190, 92, 198, 9, 191, 236, 29, 146, 190, 234, 10, 114, 62, 194, 193, 38, 191, 83, 90, 200, 188, 65, 50, 55, 189, 192, 87, 168, 188, 4, 249, 39, 62, 94, 154, 52, 62, 249, 161, 191, 188, 140, 180, 186, 60, 163, 47, 60, 62, 123, 110, 133, 191, 72, 144, 163, 190, 100, 197, 67, 61, 190, 64, 30, 62, 111, 1, 217, 190, 234, 172, 126, 62, 151, 172, 160, 62, 12, 41, 19, 62, 179, 95, 156, 59, 159, 88, 50, 61, 119, 213, 111, 190, 130, 198, 49, 190, 67, 162, 161, 61, 148, 0, 28, 189, 231, 177, 182, 61, 5, 122, 215, 61, 153, 32, 28, 190, 37, 52, 53, 62, 95, 233, 31, 190, 172, 254, 151, 189, 36, 97, 96, 191, 145, 20, 21, 190, 2, 42, 38, 61, 86, 2, 228, 190, 41, 124, 40, 189, 139, 236, 102, 62, 173, 249, 54, 59, 254, 118, 35, 62, 105, 104, 51, 62, 169, 47, 70, 62, 53, 115, 80, 62, 69, 196, 174, 62, 170, 50, 94, 191, 144, 135, 176, 61, 69, 91, 194, 189, 30, 124, 112, 62, 189, 55, 3, 191, 153, 204, 86, 62, 186, 214, 68, 61, 49, 169, 63, 61, 185, 78, 106, 190, 27, 125, 86, 190, 196, 152, 175, 60, 253, 188, 20, 61, 247, 11, 142, 62, 191, 255, 67, 190, 85, 241, 23, 190, 167, 38, 23, 62, 204, 56, 88, 190, 159, 44, 96, 189, 178, 127, 176, 188, 74, 73, 191, 189, 68, 190, 15, 60, 219, 60, 10, 62, 88, 106, 183, 190, 44, 85, 227, 61, 156, 37, 61, 191, 12, 224, 237, 61, 196, 249, 41, 191, 28, 86, 60, 190, 198, 178, 137, 191, 35, 242, 244, 60, 49, 66, 62, 61, 126, 43, 193, 62, 104, 144, 81, 190, 25, 12, 70, 61, 169, 83, 233, 189, 127, 116, 106, 62, 129, 27, 227, 189, 121, 151, 50, 189, 25, 177, 175, 62, 105, 44, 161, 187, 99, 53, 172, 190, 218, 17, 146, 190, 37, 172, 200, 188, 206, 112, 158, 61, 185, 103, 18, 62, 31, 202, 142, 62, 67, 108, 131, 62, 77, 14, 42, 190, 228, 67, 231, 62, 65, 146, 2, 190, 215, 170, 248, 61, 238, 128, 26, 190, 167, 154, 217, 188, 69, 218, 165, 62, 81, 97, 183, 190, 1, 232, 223, 62, 84, 71, 3, 190, 175, 71, 180, 189, 87, 96, 98, 190, 213, 28, 14, 187, 147, 216, 178, 60, 155, 40, 224, 189, 78, 9, 219, 61, 177, 120, 221, 61, 21, 169, 101, 189, 33, 195, 31, 187, 204, 107, 226, 60, 131, 239, 189, 61, 7, 149, 30, 62, 183, 251, 199, 188, 15, 99, 247, 187, 133, 141, 155, 190, 187, 44, 172, 190, 135, 175, 23, 191, 27, 137, 106, 61, 248, 120, 14, 62, 142, 15, 109, 62, 1, 5, 209, 61, 143, 242, 155, 189, 87, 105, 82, 187, 216, 75, 56, 62, 83, 111, 123, 189, 202, 184, 5, 63, 113, 136, 195, 190, 106, 198, 26, 190, 69, 28, 98, 189, 221, 223, 139, 189, 31, 232, 208, 61, 230, 21, 177, 60, 212, 3, 13, 190, 20, 49, 5, 190, 153, 33, 136, 189, 74, 58, 125, 61, 13, 66, 0, 189, 124, 117, 39, 62, 82, 54, 205, 187, 224, 100, 212, 61, 208, 160, 55, 59, 95, 206, 142, 61, 84, 227, 173, 189, 32, 75, 159, 189, 226, 144, 37, 190, 51, 16, 23, 189, 49, 138, 152, 189, 28, 8, 221, 61, 113, 203, 52, 190, 200, 77, 206, 188, 73, 97, 105, 189, 175, 64, 30, 62, 238, 152, 17, 190, 12, 133, 15, 189, 86, 205, 244, 61, 39, 165, 181, 61, 236, 202, 199, 61, 217, 211, 49, 190, 247, 82, 236, 189, 237, 188, 15, 190, 59, 116, 116, 189, 185, 251, 6, 62, 250, 227, 41, 60, 221, 23, 126, 188, 199, 74, 15, 62, 206, 110, 34, 62, 131, 49, 219, 61, 138, 56, 1, 189, 240, 226, 31, 190, 121, 131, 134, 189, 152, 210, 52, 190, 23, 149, 0, 189, 103, 240, 143, 61, 82, 45, 156, 60, 56, 146, 139, 61, 163, 154, 13, 190, 199, 244, 5, 190, 249, 43, 99, 189, 165, 138, 27, 62, 72, 250, 229, 61, 169, 29, 47, 190, 171, 192, 188, 189, 104, 113, 52, 61, 38, 36, 105, 187, 22, 7, 71, 61, 113, 137, 203, 61, 121, 232, 244, 189, 241, 143, 158, 61, 106, 45, 189, 188, 131, 58, 164, 61, 255, 184, 215, 189, 29, 11, 39, 191, 126, 254, 237, 190, 245, 30, 238, 61, 191, 152, 243, 190, 108, 123, 29, 61, 195, 147, 156, 189, 226, 72, 92, 190, 240, 122, 106, 62, 37, 32, 69, 190, 112, 128, 58, 189, 139, 29, 8, 61, 110, 40, 38, 190, 20, 211, 69, 190, 33, 121, 221, 190, 18, 46, 215, 59, 228, 175, 73, 62, 168, 156, 147, 190, 60, 137, 147, 190, 160, 248, 85, 190, 53, 54, 178, 62, 140, 42, 77, 62, 15, 108, 53, 62, 170, 123, 219, 190, 96, 216, 6, 190, 246, 43, 206, 190, 153, 10, 166, 61, 20, 203, 1, 190, 47, 22, 229, 61, 62, 182, 213, 190, 255, 49, 248, 189, 234, 151, 218, 190, 213, 254, 147, 62, 227, 85, 86, 62, 18, 47, 99, 62, 93, 158, 181, 190, 250, 175, 244, 62, 24, 148, 41, 190, 114, 164, 95, 62, 230, 108, 11, 190, 219, 191, 157, 190, 200, 125, 85, 190, 19, 189, 88, 189, 182, 217, 145, 61, 141, 134, 3, 62, 39, 105, 111, 61, 149, 241, 72, 189, 164, 200, 148, 189, 2, 222, 87, 61, 19, 50, 86, 62, 142, 185, 114, 61, 239, 245, 120, 62, 198, 52, 172, 189, 217, 233, 247, 190, 106, 219, 83, 190, 87, 150, 108, 60, 246, 104, 130, 61, 145, 85, 170, 62, 61, 27, 141, 62, 132, 108, 25, 62, 76, 89, 10, 190, 171, 13, 164, 62, 130, 249, 94, 190, 27, 241, 192, 62, 183, 239, 58, 190, 61, 121, 86, 189, 210, 214, 138, 60, 230, 100, 165, 189, 158, 158, 243, 61, 63, 136, 142, 189, 216, 105, 17, 190, 222, 61, 31, 62, 138, 141, 49, 190, 77, 58, 230, 189, 47, 53, 125, 60, 207, 162, 238, 189, 61, 81, 142, 189, 9, 180, 91, 190, 254, 186, 151, 61, 101, 154, 11, 190, 240, 152, 124, 61, 32, 246, 27, 190, 150, 251, 18, 190, 80, 169, 163, 61, 219, 235, 131, 61, 201, 201, 49, 190, 74, 125, 3, 190, 243, 235, 47, 190, 70, 199, 252, 188, 223, 134, 66, 59, 152, 58, 21, 61, 108, 152, 163, 189, 200, 230, 191, 189, 180, 200, 27, 190, 227, 172, 237, 61, 146, 137, 62, 61, 76, 197, 42, 189, 153, 25, 184, 190, 196, 191, 44, 62, 189, 121, 241, 188, 144, 235, 238, 189, 84, 150, 110, 190, 65, 107, 41, 62, 183, 69, 51, 62, 223, 204, 228, 189, 217, 26, 55, 62, 177, 137, 32, 190, 150, 47, 20, 62, 129, 219, 100, 62, 241, 147, 217, 190, 140, 148, 18, 190, 130, 34, 23, 190, 107, 12, 31, 62, 242, 169, 245, 61, 217, 120, 213, 61, 176, 188, 41, 62, 189, 94, 15, 190, 97, 80, 84, 189, 244, 208, 224, 190, 150, 167, 118, 61, 227, 8, 35, 190, 184, 159, 50, 62, 1, 134, 24, 190, 18, 251, 53, 190, 170, 123, 252, 61, 206, 107, 115, 62, 168, 232, 108, 62, 20, 111, 52, 62, 137, 120, 78, 190, 103, 235, 51, 190, 188, 158, 122, 61, 201, 213, 116, 190, 214, 184, 23, 190, 195, 41, 185, 188, 42, 166, 64, 62, 102, 243, 148, 60, 197, 6, 128, 62, 129, 108, 236, 189, 150, 99, 6, 190, 97, 253, 23, 61, 100, 148, 169, 62, 227, 196, 5, 190, 114, 8, 248, 189, 111, 164, 91, 190, 215, 174, 75, 62, 68, 207, 10, 188, 40, 114, 212, 189, 216, 13, 237, 61, 18, 43, 181, 59, 107, 34, 162, 190, 86, 34, 54, 190, 146, 31, 148, 189, 176, 149, 156, 189, 247, 216, 160, 62, 172, 205, 1, 190, 55, 205, 146, 188, 142, 237, 222, 189, 7, 208, 161, 61, 78, 13, 2, 189, 166, 55, 108, 62, 76, 57, 76, 62, 113, 49, 36, 61, 90, 197, 54, 62, 94, 72, 189, 60, 76, 17, 143, 190, 54, 19, 179, 189, 155, 166, 144, 62, 255, 239, 157, 190, 226, 28, 159, 61, 55, 4, 13, 61, 3, 146, 17, 61, 49, 23, 185, 62, 44, 155, 60, 62, 231, 240, 169, 190, 172, 42, 163, 189, 159, 220, 100, 62, 128, 114, 142, 62, 119, 11, 110, 191, 213, 114, 39, 62, 6, 151, 251, 190, 78, 200, 69, 190, 100, 101, 128, 61, 108, 225, 243, 189, 139, 251, 147, 190, 208, 222, 69, 189, 181, 145, 175, 62, 67, 39, 141, 61, 255, 244, 30, 190, 37, 197, 82, 190, 249, 88, 84, 191, 212, 145, 130, 62, 217, 219, 110, 61, 131, 58, 176, 190, 185, 77, 163, 191, 4, 184, 159, 189, 136, 188, 129, 62, 190, 101, 16, 191, 227, 137, 68, 62, 244, 100, 156, 189, 230, 222, 142, 188, 118, 186, 132, 61, 27, 2, 165, 61, 213, 23, 55, 61, 133, 58, 186, 61, 49, 45, 132, 190, 132, 100, 51, 191, 109, 145, 204, 188, 96, 221, 19, 190, 82, 162, 208, 59, 4, 164, 24, 190, 241, 251, 252, 61, 208, 239, 113, 62, 205, 250, 15, 62, 128, 131, 235, 61, 28, 3, 166, 62, 14, 250, 8, 190, 163, 128, 240, 189, 191, 66, 91, 190, 132, 121, 159, 188, 117, 203, 65, 62, 86, 107, 79, 61, 172, 158, 21, 61, 197, 124, 49, 62, 30, 228, 119, 190, 219, 175, 24, 61, 136, 122, 174, 61, 211, 193, 50, 62, 71, 212, 250, 61, 24, 129, 194, 190, 82, 151, 202, 187, 221, 55, 13, 62, 19, 152, 72, 190, 131, 165, 255, 61, 74, 249, 113, 189, 155, 77, 154, 61, 231, 64, 121, 62, 232, 109, 222, 60, 192, 147, 36, 189, 13, 199, 208, 188, 8, 188, 217, 189, 129, 70, 71, 62, 247, 161, 230, 190, 208, 142, 96, 62, 96, 124, 44, 60, 110, 197, 89, 62, 105, 171, 194, 61, 1, 164, 206, 61, 253, 6, 58, 189, 158, 144, 156, 60, 162, 3, 81, 189, 54, 56, 197, 189, 4, 109, 234, 61, 41, 10, 7, 62, 161, 83, 152, 190, 194, 128, 145, 188, 142, 178, 39, 62, 179, 243, 56, 62, 118, 132, 153, 189, 58, 208, 15, 61, 65, 98, 254, 188, 102, 198, 209, 189, 159, 114, 163, 189, 62, 104, 211, 189, 215, 71, 55, 190, 156, 149, 147, 189, 199, 146, 187, 189, 198, 33, 47, 61, 31, 91, 41, 190, 122, 16, 161, 189, 251, 255, 131, 189, 211, 126, 34, 190, 120, 132, 26, 60, 134, 1, 2, 190, 209, 141, 2, 189, 22, 28, 0, 188, 168, 121, 117, 61, 232, 232, 169, 60, 143, 152, 226, 189, 174, 170, 91, 190, 123, 6, 156, 189, 168, 213, 221, 61, 230, 35, 157, 60, 154, 220, 73, 188, 99, 28, 121, 61, 22, 20, 139, 61, 209, 210, 59, 61, 235, 161, 50, 190, 239, 119, 68, 186, 246, 101, 137, 61, 36, 207, 221, 189, 149, 248, 7, 62, 224, 212, 41, 190, 242, 97, 55, 189, 90, 1, 219, 189, 236, 230, 45, 190, 228, 136, 180, 189, 105, 138, 154, 189, 24, 146, 70, 189, 52, 186, 26, 62, 45, 21, 250, 188, 249, 145, 18, 190, 86, 212, 217, 189, 40, 41, 81, 60, 125, 82, 248, 188, 18, 144, 42, 58, 80, 221, 88, 61, 227, 222, 61, 190, 119, 243, 16, 190, 222, 28, 50, 61, 47, 35, 12, 62, 76, 205, 8, 190, 63, 166, 215, 189, 250, 98, 141, 189, 86, 225, 47, 61, 245, 179, 204, 61, 200, 188, 36, 62, 152, 235, 12, 190, 168, 227, 157, 188, 38, 22, 140, 189, 215, 70, 158, 61, 148, 60, 34, 189, 89, 66, 144, 190, 12, 174, 143, 62, 59, 6, 232, 60, 138, 132, 78, 191, 77, 186, 3, 59, 221, 92, 110, 61, 15, 131, 41, 62, 152, 186, 17, 62, 73, 177, 230, 59, 220, 250, 156, 62, 32, 237, 128, 62, 82, 240, 63, 61, 60, 147, 47, 191, 207, 8, 137, 189, 40, 137, 168, 189, 249, 155, 199, 61, 159, 113, 43, 191, 195, 251, 77, 62, 117, 4, 22, 190, 142, 53, 131, 189, 116, 199, 226, 62, 165, 193, 253, 189, 52, 153, 210, 189, 140, 212, 125, 59, 201, 125, 146, 62, 219, 175, 254, 189, 122, 75, 56, 190, 120, 237, 55, 61, 16, 115, 178, 190, 95, 18, 162, 62, 231, 254, 190, 189, 46, 16, 183, 188, 100, 220, 233, 60, 206, 37, 218, 61, 46, 34, 72, 190, 242, 172, 159, 62, 79, 125, 234, 61, 69, 200, 138, 189, 253, 252, 198, 188, 66, 152, 133, 189, 170, 67, 138, 62, 68, 36, 195, 188, 68, 60, 37, 62, 140, 190, 209, 188, 126, 207, 253, 189, 88, 188, 71, 62, 73, 216, 203, 189, 236, 193, 119, 62, 71, 97, 5, 61, 123, 118, 147, 62, 38, 10, 150, 190, 59, 213, 71, 191, 21, 217, 82, 62, 19, 136, 255, 190, 99, 3, 138, 189, 183, 174, 188, 189, 223, 251, 89, 62, 229, 52, 125, 62, 128, 61, 32, 191, 189, 47, 150, 189, 195, 52, 80, 61, 54, 229, 200, 61, 155, 234, 16, 63, 44, 142, 145, 190, 156, 204, 144, 191, 168, 50, 6, 191, 172, 171, 143, 62, 194, 163, 232, 190, 230, 189, 48, 189, 123, 92, 174, 189, 57, 33, 39, 62, 108, 214, 80, 62, 253, 26, 66, 190, 239, 190, 84, 62, 184, 216, 4, 61, 127, 159, 41, 190, 16, 63, 25, 191, 40, 44, 73, 190, 220, 19, 13, 60, 86, 128, 166, 61, 52, 30, 24, 190, 243, 152, 130, 62, 91, 160, 217, 188, 204, 215, 146, 62, 244, 50, 160, 62, 215, 144, 216, 62, 216, 31, 110, 190, 151, 197, 33, 188, 197, 111, 197, 190, 42, 219, 210, 189, 42, 175, 24, 190, 235, 248, 98, 61, 119, 204, 49, 189, 60, 236, 235, 61, 102, 76, 148, 190, 173, 190, 196, 188, 244, 46, 111, 61, 87, 228, 63, 189, 129, 60, 23, 190, 18, 176, 173, 189, 228, 41, 120, 189, 30, 91, 88, 190, 228, 181, 98, 189, 162, 179, 182, 61, 214, 144, 158, 189, 168, 101, 17, 189, 195, 8, 160, 61, 116, 60, 212, 189, 113, 56, 88, 189, 17, 163, 1, 189, 175, 90, 42, 190, 103, 253, 37, 190, 176, 164, 147, 188, 14, 69, 16, 62, 196, 213, 220, 188, 8, 70, 91, 61, 137, 66, 219, 189, 26, 31, 56, 190, 114, 218, 100, 189, 92, 39, 37, 62, 140, 25, 109, 189, 22, 85, 127, 61, 75, 143, 166, 61, 0, 68, 194, 61, 3, 93, 143, 189, 201, 3, 94, 189, 135, 72, 197, 61, 82, 204, 62, 190, 52, 87, 12, 191, 59, 58, 193, 188, 235, 233, 187, 190, 164, 105, 68, 62, 93, 1, 78, 190, 9, 127, 213, 191, 150, 213, 4, 61, 90, 10, 90, 62, 245, 143, 21, 191, 159, 104, 24, 191, 242, 234, 46, 191, 92, 189, 83, 190, 144, 118, 148, 60, 27, 203, 10, 191, 131, 92, 113, 62, 240, 148, 1, 191, 248, 56, 146, 191, 75, 63, 27, 191, 202, 91, 50, 62, 237, 71, 223, 188, 158, 34, 108, 190, 147, 121, 11, 62, 145, 252, 232, 189, 23, 95, 232, 189, 120, 138, 2, 190, 92, 176, 66, 62, 47, 17, 120, 62, 59, 137, 109, 191, 69, 63, 229, 61, 242, 21, 38, 191, 61, 212, 71, 189, 45, 178, 86, 61, 195, 205, 159, 61, 36, 135, 150, 62, 102, 13, 54, 190, 170, 32, 143, 62, 225, 225, 104, 190, 86, 201, 49, 61, 205, 46, 180, 190, 210, 143, 103, 62, 213, 4, 106, 190, 75, 114, 35, 62, 185, 232, 4, 61, 11, 29, 179, 62, 238, 67, 191, 62, 86, 75, 131, 188, 43, 21, 78, 62, 218, 29, 63, 62, 255, 43, 142, 189, 167, 211, 161, 189, 57, 63, 2, 190, 9, 175, 48, 190, 249, 173, 54, 191, 151, 195, 171, 190, 41, 160, 122, 60, 9, 218, 137, 189, 245, 55, 223, 62, 248, 30, 32, 62, 249, 252, 222, 190, 102, 70, 60, 190, 71, 88, 0, 62, 82, 95, 18, 190, 139, 174, 212, 62, 170, 213, 210, 188, 247, 183, 113, 189, 241, 103, 245, 189, 105, 96, 194, 189, 67, 101, 149, 61, 121, 37, 209, 189, 84, 27, 8, 62, 237, 30, 48, 190, 135, 26, 9, 189, 255, 77, 143, 189, 52, 158, 240, 189, 191, 230, 60, 189, 146, 32, 255, 189, 9, 62, 251, 60, 229, 15, 188, 188, 68, 168, 221, 189, 127, 172, 1, 188, 37, 126, 175, 189, 184, 234, 41, 190, 83, 0, 254, 188, 46, 27, 160, 60, 249, 73, 233, 60, 159, 238, 178, 189, 156, 189, 218, 189, 187, 147, 233, 189, 95, 114, 217, 61, 233, 179, 209, 61, 193, 214, 38, 190, 201, 65, 143, 189, 4, 163, 162, 189, 111, 17, 177, 188, 204, 224, 49, 62, 179, 172, 235, 189, 80, 238, 118, 61, 217, 5, 62, 62, 241, 127, 55, 60, 104, 71, 180, 61, 98, 204, 133, 190, 71, 161, 40, 192, 44, 74, 228, 190, 224, 112, 79, 62, 220, 112, 86, 191, 240, 2, 170, 190, 208, 236, 183, 191, 213, 199, 162, 62, 87, 177, 51, 62, 30, 171, 236, 61, 212, 55, 180, 62, 74, 50, 41, 191, 160, 57, 136, 191, 84, 98, 15, 190, 116, 20, 168, 62, 228, 212, 119, 62, 160, 72, 32, 191, 174, 97, 180, 62, 131, 56, 5, 191, 254, 86, 152, 189, 171, 26, 154, 62, 89, 245, 250, 189, 191, 74, 220, 60, 69, 253, 182, 191, 68, 38, 164, 62, 86, 66, 224, 190, 48, 197, 173, 60, 250, 14, 162, 62, 226, 222, 1, 191, 53, 218, 134, 188, 255, 39, 88, 190, 11, 2, 170, 60, 59, 165, 16, 61, 178, 165, 188, 61, 184, 43, 51, 190, 40, 94, 228, 59, 193, 175, 177, 189, 193, 116, 74, 62, 174, 201, 203, 61, 191, 75, 189, 59, 216, 28, 86, 191, 72, 64, 171, 188, 174, 20, 14, 62, 76, 26, 143, 62, 139, 41, 229, 57, 231, 110, 134, 62, 253, 56, 96, 191, 209, 62, 40, 191, 172, 57, 137, 189, 40, 75, 45, 191, 194, 156, 2, 62, 231, 232, 114, 61, 211, 1, 17, 190, 63, 12, 135, 188, 1, 147, 133, 191, 35, 220, 12, 62, 178, 253, 177, 61, 221, 118, 37, 62, 130, 255, 87, 62, 93, 5, 71, 191, 65, 103, 10, 192, 53, 77, 189, 190, 176, 132, 95, 62, 158, 21, 109, 191, 94, 242, 176, 60, 10, 212, 202, 61, 101, 84, 15, 187, 192, 90, 194, 61, 91, 75, 119, 62, 5, 78, 111, 62, 161, 252, 5, 61, 68, 151, 147, 186, 173, 213, 110, 191, 2, 247, 33, 191, 89, 207, 227, 189, 116, 196, 52, 62, 95, 214, 131, 189, 176, 79, 47, 61, 152, 85, 68, 62, 19, 11, 13, 61, 196, 17, 190, 189, 219, 150, 156, 62, 187, 64, 79, 62, 172, 222, 168, 61, 166, 98, 137, 190, 245, 240, 158, 190, 247, 100, 224, 60, 68, 175, 39, 189, 248, 192, 187, 61, 111, 152, 42, 62, 114, 111, 4, 191, 62, 114, 178, 62, 132, 122, 156, 190, 57, 255, 127, 62, 219, 166, 33, 191, 173, 200, 210, 61, 30, 107, 101, 58, 252, 193, 75, 62, 156, 195, 136, 190, 96, 44, 216, 61, 87, 48, 160, 190, 27, 109, 15, 62, 89, 151, 17, 187, 243, 227, 133, 62, 59, 140, 1, 191, 65, 228, 50, 190, 113, 103, 13, 61, 36, 180, 252, 188, 230, 55, 176, 61, 237, 119, 195, 188, 249, 77, 241, 190, 31, 210, 4, 191, 221, 169, 168, 190, 198, 6, 21, 191, 99, 175, 98, 62, 17, 190, 182, 189, 73, 6, 225, 62, 78, 240, 49, 62, 153, 70, 214, 190, 70, 34, 163, 61, 192, 77, 153, 62, 39, 38, 5, 62, 206, 70, 14, 63, 59, 113, 161, 190, 37, 233, 7, 190, 117, 122, 21, 190, 220, 164, 192, 189, 231, 227, 6, 62, 161, 76, 13, 62, 23, 99, 132, 188, 28, 16, 130, 61, 62, 147, 179, 61, 246, 207, 93, 189, 64, 66, 36, 60, 72, 208, 8, 190, 54, 180, 207, 189, 244, 88, 220, 189, 102, 193, 9, 62, 126, 50, 205, 59, 109, 101, 143, 60, 143, 13, 250, 189, 150, 29, 32, 190, 69, 89, 232, 188, 247, 215, 214, 189, 125, 78, 66, 61, 203, 140, 194, 60, 233, 4, 65, 190, 253, 230, 36, 62, 193, 246, 213, 61, 46, 142, 6, 62, 141, 90, 45, 61, 62, 238, 132, 189, 209, 235, 46, 190, 169, 49, 29, 190, 23, 37, 35, 190, 71, 58, 200, 61, 141, 52, 19, 192, 6, 144, 100, 191, 173, 180, 135, 191, 111, 131, 101, 62, 235, 106, 144, 189, 48, 25, 145, 189, 106, 208, 160, 62, 61, 98, 172, 190, 111, 1, 248, 60, 15, 130, 144, 189, 173, 215, 190, 59, 69, 54, 137, 62, 167, 148, 200, 190, 150, 167, 101, 191, 67, 210, 19, 191, 240, 186, 177, 189, 63, 71, 131, 62, 135, 101, 126, 191, 144, 100, 93, 62, 200, 131, 5, 189, 128, 32, 83, 62, 72, 47, 83, 62, 105, 15, 155, 62, 117, 157, 23, 190, 94, 58, 42, 191, 246, 95, 21, 188, 165, 92, 7, 63, 207, 171, 95, 62, 179, 202, 118, 62, 12, 199, 140, 61, 173, 5, 108, 191, 52, 183, 211, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 160, 140, 61, 19, 142, 163, 62, 208, 117, 15, 190, 90, 92, 53, 62, 113, 28, 230, 61, 46, 135, 223, 62, 139, 9, 26, 190, 18, 31, 44, 190, 211, 107, 105, 190, 12, 113, 154, 189, 162, 88, 232, 61, 209, 116, 23, 190, 129, 184, 32, 61, 254, 93, 113, 62, 105, 77, 24, 61, 96, 189, 181, 61, 234, 204, 149, 62, 96, 23, 243, 61, 53, 33, 162, 61, 164, 243, 40, 62, 99, 207, 140, 189, 39, 131, 67, 190, 215, 28, 85, 61, 152, 232, 238, 189, 254, 39, 170, 61, 109, 8, 161, 61, 148, 99, 133, 62, 162, 175, 197, 61, 53, 24, 172, 62, 137, 37, 183, 61, 42, 144, 9, 189, 149, 22, 3, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {133, 9, 201, 190, 208, 179, 185, 62, 159, 191, 216, 61, 153, 156, 27, 191, 167, 90, 135, 60, 36, 150, 8, 63, 191, 28, 83, 62, 126, 35, 6, 62, 77, 96, 65, 61, 120, 150, 36, 191, 59, 137, 139, 62, 92, 207, 136, 61, 172, 116, 26, 62, 163, 6, 212, 185, 200, 205, 44, 191, 135, 249, 71, 191, 33, 75, 137, 189, 40, 119, 65, 188, 21, 102, 186, 189, 60, 51, 75, 191, 30, 81, 161, 62, 153, 154, 77, 191, 107, 161, 126, 189, 171, 197, 162, 63, 181, 184, 170, 62, 233, 216, 142, 59, 183, 98, 199, 63, 78, 224, 160, 62, 244, 16, 83, 191, 143, 75, 216, 62, 24, 223, 185, 188, 55, 179, 122, 191, 159, 191, 254, 61, 20, 218, 97, 61, 240, 113, 126, 190, 158, 106, 174, 190, 46, 163, 11, 191, 247, 135, 188, 190, 99, 72, 225, 61, 185, 197, 108, 188, 60, 128, 222, 59, 43, 85, 146, 62, 200, 46, 225, 61, 51, 193, 96, 61, 45, 54, 5, 190, 189, 64, 184, 190, 90, 191, 16, 190, 47, 143, 176, 62, 116, 27, 155, 190, 73, 20, 177, 61, 104, 165, 37, 62, 243, 191, 173, 61, 225, 34, 17, 62, 152, 148, 180, 62, 148, 57, 65, 61, 73, 55, 247, 61, 55, 238, 159, 60, 108, 195, 199, 61, 203, 167, 0, 62, 137, 147, 170, 189, 66, 40, 170, 61, 145, 76, 80, 60, 156, 90, 8, 190, 228, 178, 158, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 154, 63, 62, 233, 58, 210, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {255, 124, 144, 63, 20, 181, 176, 191, 62, 3, 253, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {249, 43, 164, 64, 100, 40, 90, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0022/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}