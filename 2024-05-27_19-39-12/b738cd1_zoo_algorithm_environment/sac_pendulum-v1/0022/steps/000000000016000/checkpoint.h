// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 103, 28, 191, 62, 51, 189, 63, 26, 144, 200, 62, 40, 122, 123, 190, 133, 219, 117, 191, 111, 116, 189, 62, 72, 56, 25, 63, 212, 21, 147, 63, 180, 29, 160, 62, 41, 5, 44, 63, 77, 2, 153, 191, 67, 199, 209, 190, 203, 19, 5, 190, 207, 32, 168, 189, 171, 102, 91, 190, 2, 212, 175, 62, 170, 28, 88, 191, 0, 151, 148, 190, 63, 121, 165, 190, 251, 166, 195, 191, 170, 50, 193, 190, 60, 157, 8, 191, 170, 69, 69, 63, 105, 4, 247, 189, 33, 28, 221, 190, 86, 39, 186, 190, 172, 122, 147, 190, 193, 210, 51, 62, 84, 137, 214, 62, 243, 173, 52, 190, 114, 254, 158, 62, 242, 152, 162, 61, 204, 24, 158, 190, 184, 144, 225, 62, 178, 231, 3, 191, 63, 247, 246, 188, 151, 200, 85, 191, 144, 226, 228, 63, 212, 207, 216, 62, 104, 13, 70, 188, 195, 28, 136, 63, 226, 121, 67, 63, 162, 10, 123, 190, 160, 159, 66, 63, 115, 250, 25, 190, 99, 38, 191, 62, 111, 87, 151, 62, 51, 200, 173, 190, 73, 24, 41, 62, 183, 88, 215, 191, 179, 118, 165, 190, 25, 37, 255, 62, 193, 55, 151, 62, 143, 171, 203, 62, 65, 129, 141, 191, 250, 4, 251, 190, 171, 73, 154, 189, 80, 69, 139, 191, 78, 41, 89, 62, 200, 159, 196, 188, 152, 109, 90, 62, 123, 82, 211, 62, 155, 138, 15, 63, 152, 23, 231, 190, 57, 172, 80, 63, 187, 5, 74, 62, 108, 211, 86, 61, 231, 134, 212, 191, 209, 117, 172, 190, 242, 248, 176, 62, 181, 12, 233, 61, 102, 201, 142, 188, 101, 64, 178, 62, 137, 54, 32, 191, 138, 249, 58, 62, 225, 112, 219, 62, 200, 225, 186, 189, 167, 94, 253, 190, 198, 68, 129, 191, 208, 186, 201, 190, 155, 233, 83, 188, 205, 211, 38, 62, 133, 67, 172, 190, 88, 30, 24, 191, 97, 95, 155, 190, 200, 29, 112, 191, 222, 197, 38, 190, 138, 154, 220, 62, 153, 24, 199, 190, 145, 217, 65, 63, 172, 0, 62, 190, 71, 234, 84, 191, 32, 139, 199, 62, 250, 224, 106, 190, 51, 149, 245, 62, 124, 173, 254, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 3, 82, 190, 74, 160, 157, 190, 250, 198, 223, 189, 130, 108, 12, 191, 94, 197, 159, 190, 30, 5, 231, 61, 138, 210, 35, 190, 244, 243, 249, 60, 198, 17, 24, 191, 175, 206, 2, 189, 61, 50, 85, 60, 156, 20, 56, 63, 124, 9, 162, 187, 44, 221, 208, 190, 28, 36, 145, 61, 42, 188, 237, 60, 13, 220, 12, 62, 254, 171, 65, 62, 96, 119, 30, 190, 53, 223, 161, 62, 207, 55, 153, 191, 135, 112, 37, 63, 157, 80, 188, 62, 177, 67, 0, 191, 98, 151, 143, 189, 151, 29, 147, 190, 133, 1, 93, 61, 62, 28, 14, 191, 150, 127, 114, 62, 113, 18, 75, 60, 182, 12, 34, 190, 233, 215, 180, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 18, 223, 190, 41, 176, 34, 62, 229, 210, 7, 191, 11, 199, 237, 190, 245, 43, 109, 61, 127, 221, 45, 62, 58, 5, 108, 62, 140, 183, 183, 61, 87, 134, 168, 189, 42, 106, 229, 188, 5, 41, 189, 188, 128, 212, 163, 60, 38, 238, 16, 190, 252, 28, 198, 189, 112, 24, 41, 190, 5, 95, 130, 61, 83, 245, 180, 61, 29, 91, 131, 190, 196, 16, 240, 62, 173, 164, 175, 62, 145, 169, 226, 190, 134, 128, 142, 62, 150, 27, 137, 189, 146, 215, 14, 62, 213, 199, 156, 190, 238, 248, 124, 190, 35, 133, 99, 62, 163, 114, 191, 61, 106, 25, 179, 62, 16, 100, 198, 60, 175, 21, 203, 61, 175, 181, 103, 62, 127, 24, 246, 61, 224, 62, 227, 61, 7, 231, 155, 190, 15, 165, 26, 62, 86, 154, 22, 191, 140, 25, 97, 189, 196, 156, 48, 191, 17, 255, 205, 190, 155, 158, 120, 191, 121, 59, 78, 189, 37, 186, 197, 189, 12, 98, 141, 62, 78, 15, 171, 188, 165, 29, 126, 189, 226, 231, 22, 189, 136, 134, 172, 189, 198, 232, 184, 190, 127, 23, 192, 189, 64, 149, 145, 61, 225, 52, 151, 188, 128, 254, 252, 190, 46, 211, 55, 190, 154, 248, 196, 61, 24, 188, 34, 62, 213, 71, 212, 61, 6, 53, 160, 62, 232, 146, 130, 62, 249, 221, 159, 190, 196, 64, 33, 63, 190, 5, 14, 190, 135, 59, 173, 62, 177, 119, 119, 61, 154, 164, 67, 190, 45, 86, 95, 185, 196, 109, 184, 190, 193, 72, 204, 189, 248, 248, 148, 62, 244, 98, 212, 61, 191, 68, 145, 189, 221, 226, 42, 62, 150, 103, 209, 62, 210, 19, 179, 61, 110, 176, 239, 61, 99, 5, 135, 190, 166, 229, 200, 189, 107, 81, 77, 190, 40, 178, 217, 60, 243, 20, 166, 189, 180, 4, 152, 190, 233, 118, 210, 190, 69, 94, 253, 60, 185, 216, 218, 61, 96, 1, 39, 190, 162, 135, 90, 190, 193, 192, 173, 189, 144, 72, 32, 190, 89, 104, 125, 190, 210, 120, 169, 187, 248, 196, 166, 190, 103, 71, 33, 62, 159, 104, 47, 188, 230, 80, 49, 190, 18, 255, 63, 190, 206, 192, 109, 190, 3, 195, 53, 191, 195, 227, 195, 190, 132, 131, 125, 62, 90, 203, 32, 191, 180, 38, 148, 188, 99, 196, 28, 189, 68, 108, 93, 188, 217, 222, 62, 62, 194, 230, 72, 62, 140, 222, 41, 188, 73, 216, 29, 61, 24, 59, 69, 62, 160, 240, 136, 191, 196, 184, 174, 190, 238, 193, 157, 61, 73, 123, 49, 62, 28, 14, 213, 190, 214, 105, 119, 62, 97, 170, 174, 62, 235, 222, 72, 62, 109, 147, 207, 60, 37, 100, 131, 61, 141, 192, 108, 190, 130, 198, 49, 190, 167, 187, 143, 61, 190, 181, 30, 188, 190, 55, 11, 62, 121, 5, 235, 61, 96, 139, 87, 190, 130, 13, 20, 62, 212, 134, 128, 190, 91, 148, 137, 189, 192, 110, 111, 191, 149, 233, 77, 190, 30, 113, 179, 60, 67, 63, 223, 190, 39, 205, 20, 188, 200, 4, 95, 62, 37, 122, 63, 188, 180, 11, 43, 62, 77, 221, 69, 62, 116, 31, 122, 62, 93, 8, 116, 62, 44, 49, 157, 62, 188, 119, 107, 191, 59, 18, 106, 61, 18, 226, 150, 189, 16, 2, 137, 62, 142, 21, 18, 191, 3, 31, 47, 62, 13, 232, 9, 60, 172, 192, 24, 61, 252, 1, 120, 190, 220, 156, 126, 190, 156, 48, 153, 188, 253, 188, 20, 61, 67, 253, 70, 62, 161, 7, 25, 190, 144, 83, 91, 190, 211, 70, 53, 62, 219, 245, 135, 190, 226, 172, 7, 190, 202, 217, 178, 189, 27, 132, 4, 190, 37, 249, 63, 61, 102, 142, 27, 62, 224, 18, 194, 190, 17, 159, 203, 61, 67, 66, 60, 191, 24, 54, 246, 61, 61, 143, 39, 191, 83, 146, 20, 190, 134, 183, 158, 191, 60, 143, 94, 61, 230, 86, 112, 61, 104, 189, 189, 62, 106, 167, 14, 190, 86, 52, 244, 60, 243, 134, 184, 189, 37, 253, 115, 62, 253, 176, 216, 189, 53, 121, 93, 189, 102, 122, 214, 62, 59, 167, 199, 61, 159, 126, 200, 190, 217, 177, 127, 190, 152, 71, 50, 188, 206, 112, 158, 61, 35, 78, 5, 62, 160, 208, 140, 62, 195, 9, 171, 62, 127, 250, 24, 190, 163, 169, 12, 63, 144, 130, 11, 190, 57, 21, 10, 62, 17, 55, 228, 189, 131, 120, 149, 189, 164, 101, 187, 62, 191, 251, 11, 191, 108, 176, 237, 62, 106, 25, 1, 190, 41, 218, 137, 189, 33, 32, 129, 190, 186, 125, 58, 187, 10, 31, 163, 187, 136, 122, 246, 189, 166, 135, 197, 61, 139, 237, 3, 62, 145, 131, 190, 189, 6, 70, 192, 188, 184, 20, 172, 60, 212, 12, 164, 61, 142, 76, 88, 62, 154, 227, 213, 188, 213, 126, 34, 188, 87, 118, 159, 190, 249, 78, 214, 190, 132, 160, 44, 191, 23, 19, 202, 61, 248, 120, 14, 62, 21, 138, 163, 62, 102, 249, 188, 61, 214, 65, 142, 189, 173, 105, 207, 187, 142, 57, 90, 62, 136, 52, 125, 188, 173, 80, 19, 63, 125, 72, 238, 190, 106, 198, 26, 190, 69, 28, 98, 189, 221, 223, 139, 189, 31, 232, 208, 61, 230, 21, 177, 60, 212, 3, 13, 190, 20, 49, 5, 190, 153, 33, 136, 189, 74, 58, 125, 61, 13, 66, 0, 189, 124, 117, 39, 62, 82, 54, 205, 187, 224, 100, 212, 61, 208, 160, 55, 59, 95, 206, 142, 61, 84, 227, 173, 189, 32, 75, 159, 189, 226, 144, 37, 190, 51, 16, 23, 189, 49, 138, 152, 189, 28, 8, 221, 61, 113, 203, 52, 190, 200, 77, 206, 188, 73, 97, 105, 189, 175, 64, 30, 62, 238, 152, 17, 190, 12, 133, 15, 189, 86, 205, 244, 61, 39, 165, 181, 61, 236, 202, 199, 61, 217, 211, 49, 190, 247, 82, 236, 189, 237, 188, 15, 190, 59, 116, 116, 189, 185, 251, 6, 62, 250, 227, 41, 60, 221, 23, 126, 188, 199, 74, 15, 62, 206, 110, 34, 62, 131, 49, 219, 61, 138, 56, 1, 189, 240, 226, 31, 190, 121, 131, 134, 189, 152, 210, 52, 190, 23, 149, 0, 189, 103, 240, 143, 61, 82, 45, 156, 60, 56, 146, 139, 61, 163, 154, 13, 190, 199, 244, 5, 190, 249, 43, 99, 189, 165, 138, 27, 62, 72, 250, 229, 61, 169, 29, 47, 190, 171, 192, 188, 189, 104, 113, 52, 61, 38, 36, 105, 187, 22, 7, 71, 61, 113, 137, 203, 61, 121, 232, 244, 189, 241, 143, 158, 61, 106, 45, 189, 188, 131, 58, 164, 61, 255, 184, 215, 189, 76, 22, 120, 191, 126, 254, 237, 190, 49, 145, 170, 61, 45, 108, 244, 190, 197, 108, 79, 61, 250, 177, 100, 189, 6, 153, 68, 190, 251, 241, 88, 62, 197, 253, 27, 190, 12, 133, 77, 189, 55, 137, 16, 61, 200, 110, 23, 190, 11, 250, 214, 190, 95, 239, 221, 190, 146, 15, 138, 186, 95, 141, 74, 62, 89, 17, 134, 190, 208, 200, 113, 190, 82, 210, 82, 190, 241, 138, 176, 62, 140, 42, 77, 62, 211, 23, 185, 61, 21, 64, 211, 190, 96, 216, 6, 190, 246, 43, 206, 190, 152, 3, 196, 61, 219, 125, 0, 190, 49, 5, 254, 61, 37, 240, 184, 190, 219, 119, 247, 189, 234, 151, 218, 190, 27, 147, 56, 62, 147, 29, 38, 62, 46, 85, 113, 62, 163, 188, 192, 190, 148, 23, 229, 62, 14, 121, 55, 190, 94, 238, 87, 62, 214, 148, 27, 190, 125, 114, 166, 190, 120, 222, 122, 190, 251, 153, 97, 189, 71, 2, 128, 61, 127, 129, 251, 61, 18, 55, 10, 60, 157, 73, 176, 189, 227, 154, 188, 189, 240, 194, 48, 61, 118, 146, 80, 62, 161, 33, 84, 61, 64, 8, 137, 62, 142, 191, 174, 189, 161, 213, 16, 191, 50, 42, 82, 190, 133, 196, 89, 60, 246, 104, 130, 61, 248, 162, 166, 62, 224, 244, 129, 62, 55, 49, 61, 62, 156, 123, 20, 190, 0, 184, 181, 62, 118, 71, 96, 190, 60, 114, 202, 62, 204, 175, 49, 190, 61, 121, 86, 189, 210, 214, 138, 60, 230, 100, 165, 189, 158, 158, 243, 61, 63, 136, 142, 189, 216, 105, 17, 190, 222, 61, 31, 62, 138, 141, 49, 190, 77, 58, 230, 189, 47, 53, 125, 60, 207, 162, 238, 189, 61, 81, 142, 189, 9, 180, 91, 190, 254, 186, 151, 61, 101, 154, 11, 190, 240, 152, 124, 61, 32, 246, 27, 190, 150, 251, 18, 190, 80, 169, 163, 61, 219, 235, 131, 61, 201, 201, 49, 190, 74, 125, 3, 190, 243, 235, 47, 190, 70, 199, 252, 188, 223, 134, 66, 59, 152, 58, 21, 61, 108, 152, 163, 189, 200, 230, 191, 189, 180, 200, 27, 190, 227, 172, 237, 61, 146, 137, 62, 61, 76, 197, 42, 189, 214, 225, 200, 190, 156, 94, 73, 62, 248, 254, 94, 189, 208, 67, 4, 190, 56, 234, 117, 190, 225, 173, 32, 62, 211, 24, 57, 62, 132, 80, 2, 190, 72, 19, 36, 62, 78, 242, 38, 190, 15, 242, 11, 62, 0, 2, 83, 62, 142, 111, 243, 190, 133, 214, 12, 190, 183, 242, 44, 190, 186, 35, 19, 62, 84, 120, 237, 61, 231, 228, 184, 61, 76, 64, 66, 62, 8, 100, 254, 189, 229, 157, 154, 189, 16, 51, 229, 190, 119, 228, 111, 61, 227, 8, 35, 190, 27, 46, 33, 62, 10, 169, 42, 190, 128, 221, 4, 190, 214, 183, 244, 61, 228, 46, 147, 62, 39, 237, 101, 62, 144, 249, 76, 62, 115, 84, 80, 190, 55, 58, 51, 190, 120, 66, 105, 61, 224, 25, 135, 190, 154, 247, 216, 189, 208, 176, 172, 188, 62, 64, 69, 62, 55, 183, 34, 61, 174, 61, 107, 62, 20, 170, 247, 189, 90, 116, 253, 189, 96, 237, 98, 61, 169, 253, 152, 62, 86, 163, 19, 190, 101, 116, 146, 189, 155, 63, 100, 190, 20, 163, 87, 62, 105, 244, 147, 188, 29, 139, 11, 190, 18, 194, 160, 61, 158, 183, 13, 189, 132, 144, 125, 190, 43, 73, 85, 190, 29, 81, 168, 189, 176, 149, 156, 189, 22, 75, 131, 62, 147, 35, 198, 189, 137, 122, 51, 189, 186, 186, 183, 189, 130, 54, 150, 61, 158, 218, 145, 189, 139, 220, 88, 62, 99, 148, 48, 62, 90, 150, 137, 60, 107, 46, 67, 62, 173, 14, 145, 60, 192, 232, 108, 190, 136, 151, 160, 189, 17, 49, 148, 62, 99, 112, 137, 190, 18, 29, 47, 61, 11, 220, 169, 61, 182, 61, 64, 60, 197, 46, 182, 62, 163, 38, 65, 62, 154, 186, 195, 190, 157, 249, 83, 189, 45, 231, 76, 62, 196, 175, 139, 62, 187, 223, 109, 191, 95, 129, 44, 62, 227, 201, 1, 191, 143, 243, 100, 190, 235, 98, 242, 61, 129, 40, 44, 190, 92, 93, 150, 190, 208, 222, 69, 189, 197, 112, 183, 62, 235, 234, 182, 61, 89, 156, 34, 190, 173, 188, 77, 190, 3, 129, 123, 191, 216, 157, 135, 62, 108, 190, 145, 61, 123, 10, 203, 190, 239, 220, 185, 191, 235, 121, 134, 189, 183, 32, 184, 62, 214, 222, 31, 191, 249, 59, 70, 62, 172, 234, 5, 190, 226, 3, 236, 188, 246, 49, 207, 61, 246, 197, 219, 61, 136, 232, 125, 61, 15, 68, 201, 61, 187, 195, 155, 190, 76, 51, 42, 191, 187, 221, 85, 188, 17, 51, 219, 189, 147, 195, 132, 60, 215, 74, 80, 190, 53, 225, 236, 61, 74, 138, 18, 62, 159, 200, 34, 62, 178, 149, 7, 62, 88, 131, 200, 62, 96, 194, 74, 190, 163, 128, 240, 189, 193, 106, 98, 190, 199, 27, 67, 188, 164, 204, 110, 61, 122, 112, 91, 61, 151, 198, 176, 60, 147, 134, 47, 62, 215, 169, 110, 190, 15, 83, 216, 61, 255, 87, 89, 61, 193, 64, 71, 62, 246, 250, 186, 61, 239, 7, 163, 190, 117, 161, 240, 60, 190, 232, 19, 62, 161, 70, 64, 190, 28, 181, 245, 61, 23, 17, 169, 188, 27, 190, 218, 61, 120, 153, 139, 62, 254, 132, 211, 59, 30, 43, 163, 189, 50, 232, 164, 188, 24, 121, 191, 189, 43, 170, 100, 62, 115, 77, 251, 190, 96, 188, 82, 62, 68, 151, 113, 60, 177, 89, 63, 62, 119, 165, 227, 61, 218, 237, 135, 61, 200, 141, 147, 189, 158, 144, 156, 60, 248, 248, 140, 189, 211, 144, 68, 189, 146, 134, 248, 61, 245, 190, 38, 62, 195, 93, 171, 190, 9, 220, 183, 188, 118, 33, 53, 62, 115, 190, 20, 62, 118, 132, 153, 189, 58, 208, 15, 61, 65, 98, 254, 188, 102, 198, 209, 189, 159, 114, 163, 189, 62, 104, 211, 189, 215, 71, 55, 190, 156, 149, 147, 189, 199, 146, 187, 189, 198, 33, 47, 61, 31, 91, 41, 190, 122, 16, 161, 189, 251, 255, 131, 189, 211, 126, 34, 190, 120, 132, 26, 60, 134, 1, 2, 190, 209, 141, 2, 189, 22, 28, 0, 188, 168, 121, 117, 61, 232, 232, 169, 60, 143, 152, 226, 189, 174, 170, 91, 190, 123, 6, 156, 189, 168, 213, 221, 61, 230, 35, 157, 60, 154, 220, 73, 188, 99, 28, 121, 61, 22, 20, 139, 61, 209, 210, 59, 61, 235, 161, 50, 190, 239, 119, 68, 186, 246, 101, 137, 61, 36, 207, 221, 189, 149, 248, 7, 62, 224, 212, 41, 190, 242, 97, 55, 189, 90, 1, 219, 189, 236, 230, 45, 190, 228, 136, 180, 189, 105, 138, 154, 189, 24, 146, 70, 189, 52, 186, 26, 62, 45, 21, 250, 188, 249, 145, 18, 190, 86, 212, 217, 189, 40, 41, 81, 60, 125, 82, 248, 188, 18, 144, 42, 58, 80, 221, 88, 61, 227, 222, 61, 190, 119, 243, 16, 190, 222, 28, 50, 61, 47, 35, 12, 62, 76, 205, 8, 190, 63, 166, 215, 189, 250, 98, 141, 189, 86, 225, 47, 61, 245, 179, 204, 61, 200, 188, 36, 62, 152, 235, 12, 190, 168, 227, 157, 188, 38, 22, 140, 189, 215, 70, 158, 61, 148, 60, 34, 189, 52, 237, 151, 190, 137, 241, 143, 62, 137, 99, 48, 61, 203, 255, 70, 191, 90, 173, 178, 59, 112, 196, 128, 61, 226, 242, 53, 62, 29, 158, 32, 62, 236, 141, 194, 60, 99, 52, 158, 62, 158, 205, 133, 62, 233, 0, 107, 61, 155, 175, 52, 191, 67, 157, 85, 189, 68, 142, 123, 189, 130, 41, 223, 61, 139, 210, 41, 191, 210, 19, 82, 62, 142, 93, 76, 190, 71, 76, 153, 189, 23, 110, 249, 62, 155, 142, 4, 190, 0, 202, 210, 189, 140, 212, 125, 59, 4, 54, 155, 62, 32, 18, 203, 189, 3, 36, 95, 190, 23, 106, 82, 61, 79, 113, 226, 190, 55, 81, 163, 62, 207, 142, 189, 189, 227, 246, 14, 189, 81, 65, 127, 61, 74, 92, 218, 61, 84, 188, 61, 190, 60, 223, 145, 62, 74, 44, 219, 61, 28, 82, 151, 189, 192, 102, 127, 189, 92, 17, 140, 189, 216, 194, 114, 62, 37, 185, 138, 188, 123, 105, 37, 62, 235, 245, 251, 188, 148, 251, 175, 189, 147, 142, 87, 62, 26, 152, 217, 189, 138, 208, 118, 62, 113, 67, 114, 60, 198, 179, 153, 62, 110, 216, 159, 190, 135, 247, 69, 191, 221, 194, 80, 62, 83, 15, 238, 190, 8, 56, 161, 189, 183, 174, 188, 189, 17, 243, 82, 62, 123, 13, 112, 62, 155, 186, 35, 191, 3, 207, 156, 189, 7, 8, 116, 61, 247, 52, 233, 61, 81, 225, 18, 63, 61, 120, 124, 190, 120, 238, 169, 191, 232, 44, 7, 191, 110, 88, 183, 62, 173, 206, 4, 191, 101, 83, 80, 189, 52, 42, 239, 189, 169, 26, 46, 62, 215, 225, 85, 62, 20, 41, 32, 190, 21, 216, 79, 62, 250, 59, 214, 60, 72, 148, 38, 190, 193, 143, 41, 191, 20, 202, 71, 190, 25, 58, 102, 60, 224, 184, 155, 61, 156, 241, 53, 190, 59, 24, 142, 62, 61, 142, 220, 188, 169, 113, 176, 62, 122, 217, 159, 62, 214, 210, 234, 62, 61, 219, 140, 190, 151, 197, 33, 188, 139, 61, 229, 190, 49, 52, 221, 189, 39, 91, 23, 190, 196, 93, 64, 61, 209, 127, 170, 187, 44, 63, 223, 61, 43, 5, 140, 190, 239, 120, 89, 60, 244, 46, 111, 61, 87, 228, 63, 189, 129, 60, 23, 190, 18, 176, 173, 189, 228, 41, 120, 189, 30, 91, 88, 190, 228, 181, 98, 189, 162, 179, 182, 61, 214, 144, 158, 189, 168, 101, 17, 189, 195, 8, 160, 61, 116, 60, 212, 189, 113, 56, 88, 189, 17, 163, 1, 189, 175, 90, 42, 190, 103, 253, 37, 190, 176, 164, 147, 188, 14, 69, 16, 62, 196, 213, 220, 188, 8, 70, 91, 61, 137, 66, 219, 189, 26, 31, 56, 190, 114, 218, 100, 189, 92, 39, 37, 62, 140, 25, 109, 189, 22, 85, 127, 61, 75, 143, 166, 61, 0, 68, 194, 61, 3, 93, 143, 189, 201, 3, 94, 189, 135, 72, 197, 61, 82, 204, 62, 190, 255, 145, 32, 191, 89, 24, 201, 188, 235, 233, 187, 190, 164, 105, 68, 62, 204, 15, 73, 190, 160, 238, 212, 191, 85, 56, 156, 60, 94, 140, 59, 62, 33, 147, 20, 191, 43, 134, 25, 191, 109, 164, 46, 191, 59, 149, 125, 190, 66, 44, 217, 188, 150, 118, 12, 191, 245, 38, 86, 62, 56, 175, 1, 191, 234, 82, 146, 191, 183, 68, 27, 191, 115, 69, 11, 62, 108, 111, 137, 189, 158, 34, 108, 190, 3, 69, 194, 61, 89, 123, 11, 190, 23, 95, 232, 189, 120, 138, 2, 190, 92, 176, 66, 62, 206, 110, 74, 62, 240, 253, 108, 191, 247, 82, 161, 61, 42, 126, 48, 191, 13, 149, 232, 189, 113, 213, 43, 60, 66, 14, 180, 61, 38, 164, 149, 62, 110, 217, 64, 190, 99, 90, 130, 62, 93, 55, 113, 190, 69, 253, 241, 60, 148, 248, 204, 190, 144, 18, 132, 62, 113, 167, 138, 190, 48, 5, 69, 62, 2, 102, 66, 61, 14, 98, 174, 62, 238, 21, 251, 62, 8, 160, 221, 189, 177, 2, 104, 62, 180, 255, 78, 62, 162, 49, 191, 189, 128, 90, 189, 189, 247, 123, 103, 190, 79, 174, 72, 190, 172, 132, 83, 191, 78, 92, 151, 190, 135, 141, 167, 186, 9, 218, 137, 189, 177, 253, 217, 62, 82, 243, 23, 62, 122, 20, 12, 191, 250, 85, 58, 190, 120, 29, 7, 62, 149, 147, 31, 190, 145, 69, 211, 62, 67, 229, 167, 60, 247, 183, 113, 189, 241, 103, 245, 189, 105, 96, 194, 189, 67, 101, 149, 61, 121, 37, 209, 189, 84, 27, 8, 62, 237, 30, 48, 190, 135, 26, 9, 189, 255, 77, 143, 189, 52, 158, 240, 189, 191, 230, 60, 189, 146, 32, 255, 189, 9, 62, 251, 60, 229, 15, 188, 188, 68, 168, 221, 189, 127, 172, 1, 188, 37, 126, 175, 189, 184, 234, 41, 190, 83, 0, 254, 188, 46, 27, 160, 60, 249, 73, 233, 60, 159, 238, 178, 189, 156, 189, 218, 189, 187, 147, 233, 189, 95, 114, 217, 61, 233, 179, 209, 61, 193, 214, 38, 190, 201, 65, 143, 189, 4, 163, 162, 189, 111, 17, 177, 188, 204, 224, 49, 62, 179, 172, 235, 189, 96, 213, 104, 61, 191, 56, 51, 62, 1, 10, 148, 61, 104, 71, 180, 61, 0, 213, 183, 188, 70, 19, 39, 192, 170, 195, 185, 190, 176, 118, 141, 62, 157, 39, 75, 191, 164, 137, 145, 60, 96, 108, 136, 191, 226, 190, 233, 62, 102, 22, 66, 62, 96, 212, 233, 61, 164, 191, 252, 62, 98, 220, 145, 190, 47, 116, 128, 191, 46, 149, 230, 189, 91, 226, 197, 62, 107, 154, 137, 62, 168, 239, 32, 191, 32, 117, 202, 62, 86, 50, 247, 190, 254, 86, 152, 189, 122, 79, 147, 62, 0, 185, 234, 62, 191, 89, 116, 61, 244, 193, 142, 191, 223, 184, 162, 62, 249, 240, 219, 190, 53, 186, 142, 60, 195, 179, 183, 62, 182, 135, 7, 191, 24, 68, 23, 189, 159, 19, 104, 190, 94, 217, 231, 60, 132, 138, 56, 61, 234, 217, 208, 61, 200, 134, 48, 190, 88, 86, 115, 60, 248, 111, 208, 189, 232, 7, 91, 62, 17, 149, 228, 61, 109, 38, 140, 186, 148, 199, 124, 191, 33, 248, 124, 189, 27, 129, 15, 62, 20, 171, 147, 62, 146, 67, 15, 59, 110, 104, 130, 62, 250, 145, 104, 191, 6, 11, 44, 191, 14, 77, 48, 190, 19, 227, 47, 191, 143, 172, 7, 62, 231, 232, 114, 61, 148, 32, 28, 190, 94, 16, 86, 188, 217, 118, 142, 191, 38, 195, 27, 62, 190, 8, 4, 62, 87, 23, 25, 62, 220, 91, 69, 62, 112, 112, 71, 191, 44, 18, 21, 192, 76, 10, 14, 191, 4, 117, 116, 62, 107, 54, 112, 191, 247, 182, 104, 60, 99, 213, 183, 61, 151, 135, 145, 189, 75, 225, 230, 61, 225, 201, 117, 62, 71, 116, 116, 62, 112, 58, 32, 61, 29, 212, 15, 60, 194, 204, 105, 191, 136, 129, 242, 190, 164, 131, 175, 189, 25, 111, 62, 62, 19, 182, 169, 189, 6, 243, 84, 61, 255, 226, 151, 61, 173, 189, 176, 60, 253, 131, 45, 189, 107, 26, 167, 62, 26, 136, 57, 62, 172, 222, 168, 61, 64, 252, 128, 190, 109, 95, 150, 190, 100, 174, 248, 189, 38, 85, 42, 189, 63, 196, 9, 189, 177, 75, 50, 62, 25, 136, 38, 191, 16, 119, 183, 62, 56, 253, 148, 190, 39, 128, 156, 62, 14, 179, 33, 191, 199, 252, 176, 61, 203, 203, 58, 59, 74, 206, 77, 62, 180, 103, 147, 190, 123, 81, 213, 61, 21, 144, 169, 190, 231, 80, 34, 62, 4, 168, 255, 59, 171, 208, 134, 62, 115, 134, 247, 190, 225, 172, 30, 190, 116, 113, 1, 61, 162, 59, 172, 188, 57, 205, 151, 61, 112, 128, 83, 188, 243, 213, 240, 190, 7, 5, 6, 191, 48, 4, 182, 190, 158, 229, 13, 191, 235, 20, 93, 62, 17, 190, 182, 189, 51, 89, 227, 62, 130, 85, 46, 62, 51, 149, 205, 190, 2, 8, 171, 61, 250, 98, 166, 62, 184, 208, 28, 62, 195, 239, 27, 63, 32, 187, 142, 190, 37, 233, 7, 190, 117, 122, 21, 190, 220, 164, 192, 189, 214, 60, 3, 62, 78, 65, 9, 62, 156, 237, 180, 188, 28, 16, 130, 61, 116, 231, 163, 61, 162, 226, 96, 189, 81, 14, 15, 58, 228, 95, 22, 190, 53, 44, 217, 189, 244, 88, 220, 189, 102, 193, 9, 62, 73, 243, 129, 187, 134, 199, 242, 58, 52, 52, 251, 189, 150, 29, 32, 190, 69, 89, 232, 188, 34, 200, 215, 189, 125, 78, 66, 61, 154, 26, 175, 60, 81, 38, 68, 190, 253, 230, 36, 62, 193, 246, 213, 61, 212, 90, 237, 61, 141, 90, 45, 61, 224, 185, 163, 189, 67, 11, 47, 190, 169, 49, 29, 190, 23, 37, 35, 190, 171, 156, 197, 61, 140, 129, 21, 192, 43, 121, 144, 191, 37, 195, 135, 191, 176, 135, 110, 62, 233, 191, 49, 189, 56, 98, 152, 189, 35, 120, 157, 62, 55, 157, 160, 190, 243, 113, 136, 61, 196, 246, 103, 189, 89, 158, 159, 60, 98, 81, 81, 62, 190, 20, 230, 190, 248, 147, 101, 191, 245, 54, 14, 191, 171, 181, 154, 189, 97, 31, 117, 62, 158, 197, 108, 191, 141, 168, 40, 62, 62, 159, 170, 189, 128, 32, 83, 62, 226, 69, 35, 61, 24, 238, 144, 62, 117, 157, 23, 190, 75, 14, 57, 191, 101, 24, 9, 60, 227, 67, 217, 62, 45, 141, 115, 62, 216, 99, 93, 62, 18, 131, 16, 188, 183, 246, 147, 191, 223, 223, 170, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {81, 155, 62, 61, 206, 104, 158, 62, 153, 40, 10, 190, 236, 106, 68, 62, 168, 213, 177, 61, 134, 65, 224, 62, 142, 202, 27, 190, 18, 31, 44, 190, 211, 107, 105, 190, 83, 31, 185, 189, 80, 24, 221, 61, 209, 116, 23, 190, 62, 141, 185, 60, 171, 49, 78, 62, 23, 29, 235, 60, 12, 236, 176, 61, 167, 131, 137, 62, 96, 23, 243, 61, 53, 33, 162, 61, 102, 189, 49, 62, 248, 226, 137, 189, 35, 255, 60, 190, 215, 28, 85, 61, 121, 101, 31, 190, 106, 109, 168, 61, 109, 8, 161, 61, 76, 154, 187, 62, 37, 69, 186, 61, 207, 112, 177, 62, 233, 48, 192, 61, 241, 41, 42, 189, 68, 99, 62, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {246, 182, 160, 190, 23, 245, 174, 62, 61, 133, 146, 61, 187, 51, 28, 191, 143, 162, 10, 187, 139, 124, 10, 63, 220, 203, 171, 62, 126, 35, 6, 62, 77, 96, 65, 61, 228, 57, 38, 191, 127, 6, 136, 62, 92, 207, 136, 61, 141, 170, 20, 62, 30, 243, 207, 59, 147, 107, 48, 191, 221, 72, 121, 191, 24, 73, 229, 188, 40, 119, 65, 188, 21, 102, 186, 189, 102, 19, 77, 191, 79, 159, 138, 62, 112, 213, 133, 191, 107, 161, 126, 189, 179, 26, 161, 63, 226, 184, 180, 62, 233, 216, 142, 59, 214, 70, 183, 63, 216, 154, 165, 62, 19, 142, 81, 191, 18, 45, 214, 62, 94, 64, 106, 188, 55, 10, 118, 191, 246, 208, 43, 62, 192, 142, 20, 62, 171, 59, 153, 190, 114, 97, 185, 190, 63, 208, 14, 191, 64, 5, 171, 190, 178, 24, 7, 62, 185, 197, 108, 188, 60, 128, 222, 59, 209, 165, 161, 62, 83, 80, 232, 61, 51, 193, 96, 61, 194, 6, 199, 189, 25, 126, 157, 190, 214, 197, 63, 190, 37, 177, 14, 63, 127, 185, 170, 190, 73, 20, 177, 61, 104, 165, 37, 62, 64, 241, 63, 61, 191, 34, 242, 61, 26, 79, 255, 62, 148, 57, 65, 61, 240, 104, 206, 61, 104, 149, 68, 61, 108, 195, 199, 61, 251, 139, 124, 62, 223, 228, 147, 189, 123, 52, 145, 61, 147, 166, 39, 61, 181, 213, 8, 190, 218, 36, 0, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {18, 249, 84, 62, 21, 51, 215, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {109, 10, 197, 191, 56, 231, 4, 63, 93, 55, 143, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {177, 243, 168, 64, 86, 41, 127, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0022/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}