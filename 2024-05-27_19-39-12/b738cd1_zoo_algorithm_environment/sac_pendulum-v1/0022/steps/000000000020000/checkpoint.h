// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 156, 8, 191, 38, 77, 188, 63, 148, 93, 218, 62, 128, 11, 8, 191, 174, 25, 64, 191, 126, 165, 232, 62, 121, 185, 20, 63, 55, 235, 161, 63, 115, 128, 144, 62, 163, 57, 49, 63, 52, 174, 158, 191, 95, 136, 208, 190, 180, 17, 89, 190, 196, 138, 41, 189, 169, 217, 92, 190, 167, 54, 181, 62, 116, 83, 63, 191, 180, 36, 167, 190, 66, 210, 162, 190, 61, 196, 209, 191, 166, 110, 171, 190, 233, 89, 253, 190, 225, 170, 67, 63, 82, 89, 210, 189, 145, 209, 7, 191, 68, 172, 5, 191, 233, 103, 103, 190, 117, 177, 86, 62, 187, 43, 238, 62, 246, 58, 236, 189, 232, 98, 151, 62, 255, 216, 241, 61, 187, 11, 152, 190, 80, 100, 186, 62, 187, 78, 12, 191, 243, 171, 151, 188, 38, 66, 99, 191, 203, 173, 226, 63, 214, 180, 226, 62, 157, 196, 172, 189, 7, 221, 129, 63, 247, 227, 67, 63, 221, 23, 237, 60, 245, 233, 43, 63, 79, 34, 4, 190, 125, 4, 179, 62, 235, 7, 162, 62, 249, 178, 172, 190, 2, 198, 40, 62, 17, 243, 225, 191, 194, 44, 160, 190, 95, 166, 233, 62, 246, 229, 185, 62, 93, 24, 241, 62, 152, 167, 151, 191, 41, 120, 44, 191, 173, 210, 55, 189, 203, 56, 150, 191, 185, 155, 146, 61, 1, 46, 19, 188, 227, 204, 154, 62, 120, 79, 213, 62, 56, 206, 18, 63, 9, 158, 244, 190, 29, 206, 96, 63, 126, 220, 90, 62, 5, 31, 45, 61, 80, 117, 217, 191, 83, 251, 179, 190, 242, 248, 176, 62, 181, 12, 233, 61, 102, 201, 142, 188, 187, 83, 147, 62, 14, 55, 31, 191, 144, 242, 58, 62, 120, 68, 215, 62, 96, 205, 23, 190, 20, 95, 233, 190, 15, 159, 140, 191, 6, 63, 14, 191, 122, 157, 174, 60, 19, 159, 43, 189, 168, 213, 241, 190, 212, 232, 12, 191, 247, 202, 118, 190, 194, 25, 136, 191, 149, 59, 17, 190, 16, 222, 1, 63, 27, 99, 113, 190, 184, 242, 57, 63, 9, 56, 240, 60, 20, 206, 86, 191, 8, 118, 220, 62, 30, 107, 139, 190, 1, 179, 7, 63, 1, 155, 1, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 79, 147, 190, 80, 54, 192, 190, 135, 106, 248, 189, 162, 76, 10, 191, 38, 138, 155, 190, 49, 154, 217, 61, 131, 90, 13, 190, 212, 37, 14, 61, 227, 24, 39, 191, 160, 100, 49, 188, 158, 251, 45, 188, 238, 86, 30, 63, 47, 192, 128, 189, 26, 200, 232, 190, 85, 142, 162, 61, 166, 137, 217, 187, 98, 234, 11, 62, 58, 159, 246, 61, 29, 52, 147, 189, 177, 46, 186, 62, 245, 102, 155, 191, 215, 28, 30, 63, 144, 242, 184, 62, 177, 67, 0, 191, 88, 29, 61, 190, 121, 234, 170, 190, 14, 21, 252, 61, 115, 19, 8, 191, 194, 248, 132, 62, 94, 221, 105, 61, 130, 128, 252, 60, 229, 220, 164, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 88, 191, 190, 13, 108, 158, 61, 150, 14, 34, 191, 184, 88, 246, 190, 70, 48, 85, 61, 180, 213, 35, 62, 106, 220, 99, 62, 189, 205, 207, 61, 253, 5, 169, 189, 206, 164, 55, 189, 153, 59, 128, 189, 35, 145, 230, 60, 132, 86, 25, 188, 216, 219, 59, 190, 182, 145, 35, 190, 60, 12, 165, 60, 220, 150, 213, 61, 235, 51, 124, 190, 194, 232, 246, 62, 168, 209, 150, 62, 125, 141, 32, 191, 120, 135, 133, 62, 127, 36, 130, 189, 146, 215, 14, 62, 46, 207, 128, 190, 47, 157, 149, 190, 121, 120, 106, 62, 228, 113, 120, 61, 92, 164, 185, 62, 164, 112, 23, 61, 222, 1, 15, 62, 207, 86, 99, 62, 139, 126, 2, 61, 252, 8, 121, 61, 171, 248, 202, 190, 169, 217, 182, 61, 42, 204, 14, 191, 208, 27, 172, 189, 165, 38, 91, 191, 78, 126, 245, 190, 111, 33, 76, 191, 83, 64, 80, 190, 149, 42, 57, 190, 32, 39, 136, 62, 84, 22, 214, 189, 1, 168, 7, 190, 247, 86, 162, 190, 184, 202, 55, 190, 156, 204, 164, 190, 82, 65, 173, 189, 115, 217, 137, 62, 197, 97, 113, 62, 27, 228, 15, 191, 108, 24, 145, 190, 90, 93, 245, 61, 24, 188, 34, 62, 109, 152, 4, 62, 0, 177, 5, 62, 228, 200, 181, 62, 19, 211, 6, 191, 106, 26, 37, 63, 203, 194, 198, 189, 80, 149, 157, 62, 176, 47, 105, 189, 31, 155, 79, 190, 45, 86, 95, 185, 145, 111, 205, 190, 233, 39, 135, 189, 171, 249, 156, 62, 196, 178, 232, 61, 187, 240, 163, 189, 84, 159, 35, 62, 19, 67, 198, 62, 122, 211, 201, 61, 27, 251, 4, 62, 68, 158, 132, 190, 80, 15, 6, 190, 107, 81, 77, 190, 44, 232, 133, 60, 79, 43, 142, 189, 156, 173, 152, 190, 233, 118, 210, 190, 217, 4, 197, 59, 146, 225, 27, 61, 96, 1, 39, 190, 189, 12, 140, 190, 18, 253, 180, 189, 144, 72, 32, 190, 89, 104, 125, 190, 218, 9, 9, 58, 1, 202, 183, 190, 95, 141, 45, 62, 101, 8, 242, 188, 230, 80, 49, 190, 18, 255, 63, 190, 200, 9, 136, 190, 55, 167, 53, 191, 110, 100, 199, 190, 126, 68, 148, 62, 145, 5, 45, 191, 46, 105, 200, 189, 37, 67, 138, 189, 223, 26, 25, 189, 116, 246, 35, 62, 221, 71, 42, 62, 40, 11, 67, 59, 106, 243, 39, 61, 121, 133, 65, 62, 53, 110, 124, 191, 96, 222, 124, 190, 54, 103, 195, 61, 92, 223, 63, 62, 114, 193, 4, 191, 129, 62, 70, 62, 69, 246, 185, 62, 60, 102, 108, 62, 30, 247, 112, 61, 83, 91, 4, 62, 148, 62, 161, 190, 130, 198, 49, 190, 102, 113, 50, 189, 175, 242, 188, 60, 54, 12, 58, 62, 33, 85, 190, 61, 0, 247, 175, 190, 65, 80, 204, 59, 204, 143, 206, 190, 93, 119, 55, 189, 223, 126, 98, 191, 145, 48, 79, 190, 227, 143, 209, 61, 90, 241, 249, 190, 101, 193, 220, 189, 94, 249, 76, 62, 16, 79, 131, 188, 162, 24, 157, 61, 28, 180, 29, 62, 254, 120, 237, 62, 113, 18, 191, 62, 65, 177, 132, 62, 20, 69, 89, 191, 142, 214, 118, 61, 228, 170, 177, 61, 56, 101, 217, 62, 112, 213, 75, 191, 108, 141, 232, 59, 42, 59, 227, 60, 164, 49, 122, 188, 252, 1, 120, 190, 116, 243, 252, 189, 169, 14, 50, 190, 253, 188, 20, 61, 99, 121, 13, 190, 151, 214, 35, 61, 61, 27, 76, 190, 218, 6, 32, 62, 56, 169, 186, 190, 110, 150, 243, 190, 203, 11, 38, 190, 222, 233, 232, 187, 189, 91, 113, 189, 220, 214, 247, 61, 12, 166, 218, 190, 164, 27, 172, 61, 251, 141, 54, 191, 49, 116, 220, 61, 206, 106, 43, 191, 15, 148, 21, 190, 168, 137, 195, 191, 197, 61, 93, 61, 53, 180, 121, 61, 121, 61, 178, 62, 23, 190, 132, 190, 62, 32, 146, 188, 25, 129, 182, 189, 93, 253, 110, 62, 122, 2, 201, 189, 181, 181, 135, 189, 160, 103, 222, 62, 147, 48, 11, 62, 15, 166, 232, 190, 86, 238, 134, 190, 33, 87, 174, 59, 206, 112, 158, 61, 186, 197, 7, 62, 211, 254, 134, 62, 162, 73, 168, 62, 205, 98, 19, 190, 226, 47, 28, 63, 184, 5, 0, 190, 202, 78, 8, 62, 125, 174, 213, 189, 90, 101, 58, 190, 119, 15, 144, 62, 22, 158, 20, 191, 28, 70, 2, 63, 3, 225, 165, 188, 44, 136, 15, 189, 178, 89, 157, 190, 210, 203, 102, 61, 117, 153, 22, 61, 116, 188, 253, 189, 69, 35, 246, 61, 132, 132, 66, 62, 7, 152, 54, 190, 83, 62, 192, 189, 90, 201, 251, 59, 241, 198, 204, 61, 87, 21, 127, 62, 89, 85, 180, 61, 146, 58, 246, 189, 113, 84, 123, 190, 236, 246, 3, 191, 157, 1, 56, 191, 255, 212, 1, 62, 248, 120, 14, 62, 115, 150, 177, 62, 154, 54, 217, 61, 77, 40, 113, 190, 168, 122, 83, 61, 91, 175, 41, 62, 231, 132, 8, 61, 5, 7, 9, 63, 77, 114, 5, 191, 106, 198, 26, 190, 69, 28, 98, 189, 221, 223, 139, 189, 31, 232, 208, 61, 230, 21, 177, 60, 212, 3, 13, 190, 20, 49, 5, 190, 153, 33, 136, 189, 74, 58, 125, 61, 13, 66, 0, 189, 124, 117, 39, 62, 82, 54, 205, 187, 224, 100, 212, 61, 208, 160, 55, 59, 95, 206, 142, 61, 84, 227, 173, 189, 32, 75, 159, 189, 226, 144, 37, 190, 51, 16, 23, 189, 49, 138, 152, 189, 28, 8, 221, 61, 113, 203, 52, 190, 200, 77, 206, 188, 73, 97, 105, 189, 175, 64, 30, 62, 238, 152, 17, 190, 12, 133, 15, 189, 86, 205, 244, 61, 39, 165, 181, 61, 236, 202, 199, 61, 217, 211, 49, 190, 247, 82, 236, 189, 237, 188, 15, 190, 59, 116, 116, 189, 185, 251, 6, 62, 250, 227, 41, 60, 221, 23, 126, 188, 199, 74, 15, 62, 206, 110, 34, 62, 131, 49, 219, 61, 138, 56, 1, 189, 240, 226, 31, 190, 121, 131, 134, 189, 152, 210, 52, 190, 23, 149, 0, 189, 103, 240, 143, 61, 82, 45, 156, 60, 56, 146, 139, 61, 163, 154, 13, 190, 199, 244, 5, 190, 249, 43, 99, 189, 165, 138, 27, 62, 72, 250, 229, 61, 169, 29, 47, 190, 171, 192, 188, 189, 104, 113, 52, 61, 38, 36, 105, 187, 22, 7, 71, 61, 113, 137, 203, 61, 121, 232, 244, 189, 241, 143, 158, 61, 106, 45, 189, 188, 131, 58, 164, 61, 255, 184, 215, 189, 37, 97, 138, 191, 126, 254, 237, 190, 141, 62, 157, 61, 140, 170, 1, 191, 211, 69, 174, 60, 65, 131, 162, 189, 71, 88, 28, 190, 234, 234, 87, 62, 115, 61, 234, 189, 165, 83, 143, 189, 25, 166, 118, 60, 164, 122, 25, 190, 34, 154, 233, 190, 95, 239, 221, 190, 14, 83, 20, 59, 111, 203, 56, 62, 55, 51, 83, 190, 198, 81, 236, 189, 170, 226, 0, 190, 181, 180, 226, 62, 140, 42, 77, 62, 211, 23, 190, 61, 241, 233, 211, 190, 96, 216, 6, 190, 246, 43, 206, 190, 27, 202, 188, 61, 77, 35, 73, 60, 59, 39, 238, 61, 60, 158, 172, 190, 234, 115, 228, 189, 234, 151, 218, 190, 19, 29, 35, 62, 54, 188, 46, 61, 141, 122, 34, 62, 50, 32, 198, 190, 38, 227, 234, 62, 171, 89, 236, 189, 135, 46, 112, 62, 197, 246, 79, 190, 23, 126, 151, 190, 132, 167, 131, 190, 0, 250, 83, 189, 63, 10, 162, 61, 202, 187, 18, 62, 44, 100, 215, 189, 148, 42, 52, 190, 111, 214, 201, 189, 86, 26, 85, 61, 53, 86, 111, 62, 103, 5, 201, 61, 111, 160, 113, 62, 20, 148, 57, 189, 157, 91, 41, 191, 202, 164, 94, 190, 244, 66, 62, 61, 246, 104, 130, 61, 14, 75, 179, 62, 247, 88, 114, 62, 126, 243, 242, 61, 149, 189, 253, 189, 8, 208, 170, 62, 0, 225, 56, 190, 61, 132, 170, 62, 78, 197, 38, 190, 61, 121, 86, 189, 210, 214, 138, 60, 230, 100, 165, 189, 158, 158, 243, 61, 63, 136, 142, 189, 216, 105, 17, 190, 222, 61, 31, 62, 138, 141, 49, 190, 77, 58, 230, 189, 47, 53, 125, 60, 207, 162, 238, 189, 61, 81, 142, 189, 9, 180, 91, 190, 254, 186, 151, 61, 101, 154, 11, 190, 240, 152, 124, 61, 32, 246, 27, 190, 150, 251, 18, 190, 80, 169, 163, 61, 219, 235, 131, 61, 201, 201, 49, 190, 74, 125, 3, 190, 243, 235, 47, 190, 70, 199, 252, 188, 223, 134, 66, 59, 152, 58, 21, 61, 108, 152, 163, 189, 200, 230, 191, 189, 180, 200, 27, 190, 227, 172, 237, 61, 146, 137, 62, 61, 76, 197, 42, 189, 190, 126, 247, 190, 123, 219, 61, 62, 25, 127, 98, 190, 9, 102, 13, 190, 171, 239, 104, 190, 114, 249, 180, 61, 210, 58, 64, 62, 22, 90, 234, 189, 92, 131, 28, 62, 66, 198, 138, 190, 53, 140, 138, 61, 166, 233, 241, 61, 200, 109, 11, 191, 54, 75, 54, 190, 112, 155, 100, 190, 215, 125, 130, 61, 56, 114, 4, 62, 250, 123, 10, 61, 208, 165, 129, 62, 4, 42, 185, 60, 52, 248, 11, 190, 152, 64, 4, 191, 245, 53, 113, 61, 227, 8, 35, 190, 5, 66, 36, 62, 161, 76, 81, 190, 39, 69, 169, 189, 92, 175, 17, 62, 47, 244, 176, 62, 115, 93, 116, 62, 198, 80, 89, 62, 68, 130, 131, 190, 11, 205, 123, 190, 98, 33, 223, 61, 251, 196, 178, 190, 78, 75, 236, 189, 204, 202, 113, 190, 186, 96, 246, 61, 0, 40, 54, 62, 111, 17, 145, 61, 254, 193, 150, 190, 158, 92, 162, 189, 231, 132, 20, 61, 148, 8, 83, 62, 27, 82, 84, 190, 2, 156, 97, 188, 135, 145, 9, 190, 235, 187, 73, 62, 232, 132, 8, 189, 0, 43, 156, 190, 221, 212, 2, 62, 0, 51, 131, 189, 191, 4, 57, 190, 169, 7, 27, 190, 91, 122, 194, 189, 176, 149, 156, 189, 138, 15, 220, 61, 91, 251, 68, 187, 176, 43, 240, 60, 50, 189, 14, 190, 23, 39, 98, 62, 135, 96, 75, 190, 23, 86, 158, 62, 129, 78, 117, 62, 145, 163, 67, 60, 91, 153, 97, 62, 194, 175, 143, 61, 172, 221, 132, 190, 219, 59, 68, 190, 52, 215, 137, 62, 130, 43, 171, 190, 153, 57, 23, 188, 10, 2, 1, 61, 75, 236, 176, 60, 113, 248, 182, 62, 167, 200, 75, 62, 242, 158, 212, 190, 234, 59, 171, 187, 165, 222, 81, 62, 238, 82, 146, 62, 192, 216, 131, 191, 70, 101, 32, 62, 34, 105, 45, 191, 113, 5, 172, 190, 56, 11, 57, 62, 175, 176, 39, 190, 114, 136, 195, 190, 208, 222, 69, 189, 226, 228, 165, 62, 60, 115, 2, 62, 120, 228, 102, 190, 188, 97, 101, 190, 38, 210, 152, 191, 128, 102, 110, 62, 22, 188, 161, 61, 249, 234, 217, 190, 247, 19, 194, 191, 87, 195, 236, 189, 107, 41, 160, 62, 125, 5, 56, 191, 193, 205, 85, 62, 63, 58, 64, 190, 249, 22, 93, 189, 134, 195, 21, 62, 174, 223, 217, 61, 13, 76, 44, 61, 117, 4, 153, 61, 115, 71, 190, 190, 135, 224, 31, 191, 210, 216, 235, 186, 221, 18, 176, 189, 221, 122, 88, 187, 72, 2, 138, 190, 234, 16, 197, 61, 234, 115, 254, 61, 63, 94, 130, 62, 95, 56, 0, 62, 245, 197, 230, 62, 252, 133, 141, 190, 163, 128, 240, 189, 107, 124, 97, 190, 127, 83, 211, 188, 117, 99, 103, 61, 105, 121, 104, 61, 51, 220, 226, 188, 203, 81, 24, 62, 40, 203, 158, 190, 138, 195, 36, 62, 94, 161, 113, 189, 107, 250, 120, 62, 60, 75, 68, 62, 151, 54, 10, 191, 250, 66, 54, 190, 42, 201, 102, 187, 42, 231, 134, 190, 251, 204, 32, 61, 83, 102, 30, 190, 168, 107, 117, 62, 175, 144, 159, 62, 37, 167, 171, 188, 182, 206, 22, 190, 63, 22, 5, 60, 249, 83, 22, 61, 100, 254, 150, 62, 21, 153, 77, 191, 38, 20, 38, 62, 205, 100, 57, 189, 116, 221, 170, 61, 1, 75, 208, 61, 108, 64, 54, 62, 84, 114, 163, 190, 158, 144, 156, 60, 132, 250, 43, 190, 119, 74, 125, 61, 150, 43, 192, 61, 187, 182, 141, 61, 0, 119, 219, 190, 239, 26, 69, 189, 34, 249, 130, 62, 46, 163, 130, 62, 118, 132, 153, 189, 58, 208, 15, 61, 65, 98, 254, 188, 102, 198, 209, 189, 159, 114, 163, 189, 62, 104, 211, 189, 215, 71, 55, 190, 156, 149, 147, 189, 199, 146, 187, 189, 198, 33, 47, 61, 31, 91, 41, 190, 122, 16, 161, 189, 251, 255, 131, 189, 211, 126, 34, 190, 120, 132, 26, 60, 134, 1, 2, 190, 209, 141, 2, 189, 22, 28, 0, 188, 168, 121, 117, 61, 232, 232, 169, 60, 143, 152, 226, 189, 174, 170, 91, 190, 123, 6, 156, 189, 168, 213, 221, 61, 230, 35, 157, 60, 154, 220, 73, 188, 99, 28, 121, 61, 22, 20, 139, 61, 209, 210, 59, 61, 235, 161, 50, 190, 239, 119, 68, 186, 246, 101, 137, 61, 187, 223, 17, 190, 31, 222, 251, 61, 110, 196, 75, 190, 242, 97, 55, 189, 90, 1, 219, 189, 128, 231, 44, 190, 244, 49, 176, 189, 105, 138, 154, 189, 24, 146, 70, 189, 52, 186, 26, 62, 45, 21, 250, 188, 246, 198, 25, 190, 66, 83, 15, 190, 204, 84, 118, 187, 125, 82, 248, 188, 18, 144, 42, 58, 199, 207, 119, 61, 178, 194, 77, 190, 251, 178, 59, 190, 86, 52, 42, 58, 122, 54, 234, 61, 88, 173, 34, 190, 150, 35, 198, 189, 250, 98, 141, 189, 173, 75, 0, 61, 245, 179, 204, 61, 76, 164, 4, 62, 152, 235, 12, 190, 118, 64, 236, 188, 28, 117, 146, 189, 113, 74, 140, 61, 249, 246, 143, 189, 14, 162, 152, 190, 249, 138, 154, 62, 238, 237, 180, 61, 137, 164, 78, 191, 1, 192, 183, 189, 130, 17, 52, 61, 45, 113, 2, 62, 125, 5, 248, 61, 143, 54, 204, 188, 138, 156, 157, 62, 66, 117, 131, 62, 172, 179, 138, 61, 44, 236, 57, 191, 227, 171, 191, 188, 58, 207, 129, 189, 9, 129, 235, 61, 147, 171, 60, 191, 62, 179, 68, 62, 36, 154, 191, 190, 234, 40, 42, 190, 255, 221, 8, 63, 155, 206, 1, 190, 253, 253, 46, 190, 140, 212, 125, 59, 102, 193, 139, 62, 190, 124, 160, 189, 143, 58, 151, 190, 123, 79, 236, 60, 99, 224, 27, 191, 214, 105, 144, 62, 41, 206, 206, 189, 229, 247, 127, 189, 191, 71, 212, 61, 210, 30, 116, 61, 50, 190, 55, 190, 248, 186, 192, 62, 35, 188, 72, 62, 173, 77, 98, 188, 234, 15, 72, 189, 67, 235, 180, 188, 144, 178, 137, 62, 83, 183, 176, 187, 190, 57, 71, 62, 89, 100, 226, 187, 176, 220, 189, 188, 156, 63, 74, 62, 224, 179, 206, 189, 239, 48, 134, 62, 237, 159, 203, 61, 21, 193, 181, 62, 185, 240, 173, 190, 236, 138, 48, 191, 181, 137, 48, 62, 242, 40, 224, 190, 22, 96, 226, 185, 183, 174, 188, 189, 228, 160, 109, 62, 76, 182, 116, 62, 143, 149, 47, 191, 196, 38, 227, 188, 201, 140, 155, 61, 111, 104, 36, 62, 138, 43, 10, 63, 200, 162, 70, 190, 241, 243, 177, 191, 91, 221, 228, 190, 160, 192, 223, 62, 43, 121, 36, 191, 127, 99, 243, 187, 184, 101, 9, 190, 93, 144, 15, 62, 106, 141, 129, 62, 134, 226, 16, 190, 76, 22, 238, 61, 182, 38, 33, 189, 206, 247, 176, 189, 43, 16, 47, 191, 176, 28, 163, 189, 144, 116, 174, 189, 120, 103, 28, 60, 247, 179, 205, 189, 126, 213, 4, 63, 161, 117, 161, 189, 10, 228, 214, 62, 63, 114, 192, 62, 188, 114, 251, 62, 162, 249, 145, 190, 151, 197, 33, 188, 168, 47, 60, 190, 113, 39, 87, 190, 148, 213, 205, 189, 102, 41, 76, 61, 28, 137, 167, 189, 19, 15, 198, 62, 26, 7, 54, 190, 100, 48, 209, 60, 244, 46, 111, 61, 87, 228, 63, 189, 129, 60, 23, 190, 18, 176, 173, 189, 228, 41, 120, 189, 30, 91, 88, 190, 228, 181, 98, 189, 162, 179, 182, 61, 214, 144, 158, 189, 168, 101, 17, 189, 195, 8, 160, 61, 116, 60, 212, 189, 113, 56, 88, 189, 17, 163, 1, 189, 175, 90, 42, 190, 103, 253, 37, 190, 176, 164, 147, 188, 14, 69, 16, 62, 196, 213, 220, 188, 8, 70, 91, 61, 137, 66, 219, 189, 26, 31, 56, 190, 114, 218, 100, 189, 92, 39, 37, 62, 140, 25, 109, 189, 22, 85, 127, 61, 75, 143, 166, 61, 0, 68, 194, 61, 3, 93, 143, 189, 201, 3, 94, 189, 135, 72, 197, 61, 82, 204, 62, 190, 247, 5, 37, 191, 230, 60, 226, 188, 235, 233, 187, 190, 164, 105, 68, 62, 204, 15, 73, 190, 160, 238, 212, 191, 75, 108, 226, 59, 210, 50, 40, 62, 33, 147, 20, 191, 43, 134, 25, 191, 109, 164, 46, 191, 212, 176, 135, 190, 207, 239, 57, 189, 150, 118, 12, 191, 154, 255, 74, 62, 56, 175, 1, 191, 94, 138, 146, 191, 183, 68, 27, 191, 110, 100, 235, 61, 220, 224, 181, 189, 158, 34, 108, 190, 159, 206, 154, 61, 51, 1, 27, 190, 23, 95, 232, 189, 120, 138, 2, 190, 92, 176, 66, 62, 88, 35, 51, 62, 240, 253, 108, 191, 18, 3, 128, 61, 42, 126, 48, 191, 174, 194, 240, 189, 139, 116, 21, 188, 113, 111, 100, 189, 249, 57, 55, 62, 116, 204, 82, 190, 106, 17, 168, 62, 18, 41, 48, 190, 94, 193, 140, 61, 147, 52, 212, 190, 147, 93, 144, 62, 39, 192, 137, 190, 3, 2, 69, 62, 48, 48, 136, 61, 83, 54, 182, 62, 115, 242, 192, 62, 214, 176, 88, 190, 209, 126, 93, 62, 216, 135, 86, 62, 139, 123, 14, 189, 206, 120, 104, 189, 163, 252, 220, 190, 89, 214, 122, 190, 41, 76, 108, 191, 243, 95, 185, 190, 202, 18, 86, 61, 9, 218, 137, 189, 14, 96, 234, 62, 183, 231, 12, 62, 170, 222, 85, 191, 198, 108, 28, 190, 219, 192, 1, 62, 218, 74, 222, 189, 168, 31, 176, 62, 159, 236, 87, 188, 247, 183, 113, 189, 241, 103, 245, 189, 105, 96, 194, 189, 67, 101, 149, 61, 121, 37, 209, 189, 84, 27, 8, 62, 237, 30, 48, 190, 135, 26, 9, 189, 255, 77, 143, 189, 52, 158, 240, 189, 191, 230, 60, 189, 146, 32, 255, 189, 9, 62, 251, 60, 229, 15, 188, 188, 68, 168, 221, 189, 127, 172, 1, 188, 37, 126, 175, 189, 184, 234, 41, 190, 83, 0, 254, 188, 46, 27, 160, 60, 249, 73, 233, 60, 159, 238, 178, 189, 156, 189, 218, 189, 187, 147, 233, 189, 95, 114, 217, 61, 233, 179, 209, 61, 193, 214, 38, 190, 201, 65, 143, 189, 4, 163, 162, 189, 111, 17, 177, 188, 204, 224, 49, 62, 179, 172, 235, 189, 113, 143, 183, 61, 202, 74, 91, 62, 10, 189, 51, 61, 104, 71, 180, 61, 149, 255, 87, 190, 29, 244, 57, 192, 202, 220, 104, 190, 238, 253, 64, 62, 87, 202, 88, 191, 197, 30, 48, 61, 205, 65, 136, 191, 87, 94, 193, 62, 254, 107, 86, 62, 110, 180, 5, 62, 7, 141, 242, 62, 58, 66, 142, 190, 130, 200, 82, 191, 182, 177, 250, 189, 146, 76, 226, 62, 3, 187, 126, 62, 232, 244, 22, 191, 89, 110, 203, 62, 183, 131, 180, 190, 254, 86, 152, 189, 242, 52, 142, 62, 215, 151, 221, 62, 231, 64, 211, 61, 80, 242, 154, 191, 212, 237, 169, 62, 38, 37, 212, 190, 164, 87, 50, 61, 196, 75, 182, 62, 32, 156, 58, 191, 252, 117, 63, 190, 188, 189, 108, 190, 153, 98, 2, 62, 50, 80, 224, 61, 72, 109, 31, 62, 158, 249, 3, 190, 51, 102, 69, 61, 169, 149, 227, 189, 21, 159, 103, 62, 109, 161, 15, 62, 20, 117, 174, 60, 134, 25, 147, 191, 179, 169, 193, 189, 251, 170, 20, 62, 192, 183, 155, 62, 37, 105, 178, 61, 20, 219, 152, 62, 119, 17, 139, 191, 52, 29, 48, 191, 164, 245, 97, 190, 59, 204, 52, 191, 66, 39, 84, 62, 231, 232, 114, 61, 92, 87, 191, 189, 118, 53, 6, 188, 5, 73, 180, 191, 209, 27, 69, 62, 68, 13, 71, 62, 235, 211, 123, 62, 253, 47, 113, 62, 193, 127, 65, 191, 63, 0, 27, 192, 183, 65, 48, 191, 118, 124, 136, 62, 114, 87, 116, 191, 157, 99, 147, 188, 196, 239, 163, 61, 254, 120, 144, 189, 46, 71, 244, 61, 49, 64, 136, 62, 117, 149, 127, 62, 97, 95, 67, 61, 98, 219, 90, 60, 250, 116, 102, 191, 184, 249, 185, 190, 57, 113, 130, 189, 39, 238, 80, 62, 65, 72, 9, 190, 34, 121, 11, 61, 194, 212, 132, 61, 67, 245, 146, 61, 181, 32, 104, 188, 249, 6, 180, 62, 216, 213, 10, 62, 172, 222, 168, 61, 9, 84, 165, 190, 125, 29, 131, 190, 157, 48, 22, 190, 23, 214, 248, 188, 139, 145, 77, 190, 255, 135, 179, 61, 197, 152, 151, 191, 151, 210, 172, 62, 220, 182, 188, 190, 158, 53, 109, 62, 132, 187, 35, 191, 121, 49, 169, 61, 31, 35, 129, 61, 79, 56, 87, 62, 155, 150, 210, 190, 74, 111, 17, 62, 66, 196, 180, 190, 151, 30, 49, 62, 61, 227, 241, 60, 8, 232, 137, 62, 128, 92, 8, 191, 42, 238, 98, 190, 4, 55, 27, 61, 18, 133, 185, 187, 239, 30, 34, 61, 177, 213, 24, 61, 85, 231, 48, 191, 209, 95, 7, 191, 222, 10, 222, 190, 75, 136, 16, 191, 114, 172, 68, 62, 17, 190, 182, 189, 109, 90, 241, 62, 253, 161, 32, 62, 70, 44, 40, 191, 5, 171, 204, 61, 175, 154, 94, 62, 55, 190, 82, 62, 53, 160, 13, 63, 174, 194, 131, 190, 37, 233, 7, 190, 117, 122, 21, 190, 220, 164, 192, 189, 214, 60, 3, 62, 78, 65, 9, 62, 156, 237, 180, 188, 28, 16, 130, 61, 116, 231, 163, 61, 162, 226, 96, 189, 81, 14, 15, 58, 228, 95, 22, 190, 53, 44, 217, 189, 244, 88, 220, 189, 102, 193, 9, 62, 73, 243, 129, 187, 134, 199, 242, 58, 52, 52, 251, 189, 150, 29, 32, 190, 69, 89, 232, 188, 34, 200, 215, 189, 125, 78, 66, 61, 154, 26, 175, 60, 81, 38, 68, 190, 253, 230, 36, 62, 193, 246, 213, 61, 212, 90, 237, 61, 141, 90, 45, 61, 224, 185, 163, 189, 67, 11, 47, 190, 169, 49, 29, 190, 23, 37, 35, 190, 171, 156, 197, 61, 140, 129, 21, 192, 145, 246, 170, 191, 37, 195, 135, 191, 74, 173, 119, 62, 14, 142, 20, 189, 185, 13, 114, 189, 138, 108, 174, 62, 140, 227, 154, 190, 226, 232, 186, 61, 20, 248, 130, 189, 135, 35, 222, 187, 90, 69, 98, 62, 19, 228, 229, 190, 248, 147, 101, 191, 89, 10, 11, 191, 229, 195, 222, 189, 47, 50, 142, 62, 189, 171, 63, 191, 192, 157, 97, 62, 117, 161, 17, 190, 128, 32, 83, 62, 191, 243, 27, 190, 27, 238, 160, 62, 117, 157, 23, 190, 103, 212, 24, 191, 102, 199, 137, 188, 30, 202, 248, 62, 80, 166, 101, 62, 55, 112, 136, 62, 83, 200, 37, 62, 191, 93, 121, 191, 151, 216, 157, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 201, 68, 61, 46, 45, 150, 62, 195, 45, 20, 190, 183, 206, 73, 62, 227, 121, 164, 61, 81, 34, 214, 62, 161, 226, 220, 189, 18, 31, 44, 190, 211, 107, 105, 190, 100, 248, 187, 189, 77, 70, 4, 62, 209, 116, 23, 190, 158, 200, 143, 189, 136, 63, 243, 61, 212, 181, 2, 61, 83, 249, 132, 61, 119, 138, 140, 62, 96, 23, 243, 61, 144, 30, 129, 61, 49, 63, 53, 62, 234, 222, 22, 189, 11, 60, 16, 190, 215, 28, 85, 61, 88, 47, 51, 190, 252, 144, 179, 61, 109, 8, 161, 61, 113, 127, 164, 62, 147, 149, 222, 61, 241, 127, 181, 62, 27, 176, 210, 61, 241, 41, 42, 189, 179, 57, 63, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 27, 165, 190, 67, 133, 236, 62, 126, 220, 207, 61, 122, 184, 24, 191, 125, 4, 119, 188, 29, 70, 7, 63, 91, 5, 186, 62, 126, 35, 6, 62, 77, 96, 65, 61, 96, 176, 18, 191, 47, 8, 99, 62, 92, 207, 136, 61, 96, 9, 21, 62, 28, 16, 132, 188, 239, 110, 57, 191, 146, 217, 158, 191, 52, 224, 81, 189, 40, 119, 65, 188, 48, 61, 131, 189, 207, 26, 75, 191, 155, 140, 117, 62, 156, 119, 175, 191, 107, 161, 126, 189, 34, 226, 160, 63, 209, 144, 181, 62, 233, 216, 142, 59, 161, 117, 165, 63, 178, 85, 207, 62, 14, 49, 75, 191, 166, 96, 223, 62, 94, 64, 106, 188, 242, 107, 118, 191, 4, 181, 148, 61, 175, 209, 49, 62, 103, 176, 92, 190, 44, 124, 205, 190, 67, 235, 78, 191, 209, 8, 178, 190, 63, 30, 31, 61, 185, 197, 108, 188, 60, 128, 222, 59, 126, 155, 1, 63, 76, 247, 162, 61, 51, 193, 96, 61, 207, 119, 140, 189, 224, 15, 184, 190, 157, 174, 238, 190, 30, 66, 2, 63, 13, 252, 9, 191, 73, 20, 177, 61, 227, 162, 0, 62, 143, 172, 14, 190, 227, 184, 129, 61, 121, 202, 161, 62, 148, 57, 65, 61, 210, 193, 208, 61, 185, 5, 236, 61, 108, 195, 199, 61, 14, 78, 69, 62, 10, 112, 103, 61, 77, 204, 103, 62, 81, 100, 180, 61, 181, 213, 8, 190, 187, 218, 131, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 123, 103, 62, 10, 75, 185, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {90, 146, 3, 190, 68, 165, 193, 62, 68, 37, 67, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {59, 187, 14, 64, 238, 112, 225, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0022/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}