// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 87, 64, 191, 7, 205, 89, 62, 118, 187, 30, 63, 49, 12, 170, 190, 48, 121, 32, 191, 144, 83, 240, 62, 189, 155, 39, 63, 38, 69, 63, 63, 185, 127, 186, 62, 190, 64, 32, 63, 43, 163, 130, 191, 199, 5, 245, 190, 142, 96, 13, 190, 168, 202, 76, 62, 44, 79, 127, 190, 112, 212, 163, 62, 229, 14, 151, 190, 250, 72, 204, 190, 27, 245, 23, 191, 21, 117, 124, 191, 38, 171, 242, 190, 94, 204, 109, 190, 46, 85, 63, 63, 235, 57, 9, 190, 233, 210, 240, 190, 10, 86, 130, 189, 77, 56, 144, 190, 104, 97, 51, 62, 112, 228, 22, 63, 148, 156, 25, 190, 114, 201, 153, 62, 231, 15, 46, 62, 216, 171, 223, 190, 98, 238, 0, 63, 98, 142, 210, 190, 165, 57, 223, 188, 10, 51, 82, 191, 166, 66, 162, 63, 143, 201, 211, 62, 107, 192, 211, 190, 147, 215, 68, 62, 144, 107, 110, 63, 170, 58, 128, 190, 81, 230, 130, 63, 252, 248, 15, 190, 251, 155, 199, 62, 151, 76, 188, 62, 59, 51, 186, 190, 197, 187, 203, 61, 111, 59, 178, 191, 144, 32, 156, 190, 11, 165, 245, 62, 187, 6, 172, 61, 77, 201, 239, 62, 212, 142, 80, 191, 15, 82, 239, 190, 126, 64, 129, 188, 232, 67, 61, 191, 38, 68, 146, 62, 253, 19, 20, 189, 23, 105, 163, 62, 55, 122, 87, 62, 53, 231, 25, 63, 127, 146, 251, 190, 17, 39, 255, 62, 216, 147, 44, 62, 247, 100, 228, 188, 166, 52, 165, 191, 105, 56, 213, 190, 242, 248, 176, 62, 181, 12, 233, 61, 102, 201, 142, 188, 128, 107, 184, 62, 233, 197, 49, 191, 76, 178, 6, 62, 92, 108, 193, 62, 115, 208, 10, 190, 194, 196, 13, 191, 169, 58, 47, 191, 180, 242, 10, 190, 9, 204, 233, 187, 215, 185, 175, 189, 105, 50, 27, 61, 21, 124, 71, 191, 124, 248, 99, 190, 50, 189, 35, 191, 248, 7, 200, 189, 56, 130, 234, 62, 136, 154, 194, 189, 149, 180, 57, 63, 121, 133, 104, 190, 17, 80, 5, 191, 211, 219, 222, 62, 153, 165, 112, 190, 209, 164, 54, 62, 138, 109, 176, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {10, 89, 240, 190, 229, 199, 190, 190, 39, 229, 160, 187, 215, 97, 214, 190, 247, 67, 176, 190, 62, 19, 96, 62, 181, 34, 47, 189, 252, 191, 36, 62, 250, 163, 18, 191, 45, 12, 183, 189, 253, 31, 194, 61, 201, 74, 74, 63, 227, 224, 69, 60, 183, 126, 191, 188, 109, 138, 141, 189, 187, 9, 131, 62, 103, 107, 111, 62, 168, 188, 157, 62, 155, 179, 66, 59, 168, 11, 210, 62, 28, 22, 28, 191, 133, 166, 42, 63, 146, 47, 33, 63, 177, 67, 0, 191, 12, 150, 161, 60, 89, 132, 104, 190, 97, 200, 154, 61, 13, 62, 167, 190, 177, 104, 208, 62, 139, 243, 154, 62, 92, 107, 133, 190, 176, 65, 194, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 163, 103, 190, 54, 49, 26, 60, 150, 134, 151, 61, 25, 115, 188, 190, 199, 32, 178, 61, 42, 127, 41, 62, 215, 60, 94, 62, 48, 83, 0, 61, 125, 173, 205, 189, 82, 14, 130, 61, 5, 19, 162, 60, 65, 15, 47, 61, 129, 52, 131, 60, 231, 55, 126, 61, 17, 248, 109, 190, 90, 76, 223, 61, 92, 46, 228, 187, 218, 46, 19, 190, 48, 115, 141, 62, 66, 234, 38, 62, 50, 84, 214, 189, 161, 48, 74, 62, 12, 25, 189, 189, 146, 215, 14, 62, 94, 153, 15, 190, 39, 109, 112, 190, 143, 107, 41, 61, 213, 252, 201, 61, 52, 28, 122, 62, 21, 181, 159, 189, 184, 183, 172, 188, 96, 166, 73, 62, 246, 35, 102, 62, 46, 25, 126, 61, 69, 72, 21, 190, 229, 158, 181, 62, 8, 216, 76, 190, 103, 241, 29, 189, 171, 156, 245, 189, 170, 89, 141, 188, 148, 88, 57, 191, 97, 147, 46, 190, 129, 224, 40, 190, 90, 40, 121, 62, 224, 190, 0, 62, 164, 231, 124, 189, 50, 90, 191, 62, 80, 164, 249, 189, 182, 155, 125, 190, 187, 80, 11, 190, 233, 252, 68, 190, 32, 79, 137, 189, 25, 5, 136, 190, 6, 231, 197, 189, 99, 105, 230, 61, 24, 188, 34, 62, 114, 83, 51, 62, 209, 117, 172, 62, 67, 58, 110, 61, 150, 4, 173, 189, 62, 28, 137, 62, 129, 77, 17, 190, 180, 240, 131, 62, 250, 239, 165, 61, 191, 72, 86, 189, 59, 161, 212, 187, 150, 20, 248, 189, 84, 236, 9, 190, 17, 4, 107, 62, 231, 104, 19, 62, 135, 42, 195, 189, 255, 231, 52, 62, 184, 128, 180, 62, 78, 135, 205, 61, 66, 53, 224, 61, 118, 18, 4, 190, 233, 78, 9, 62, 102, 236, 27, 190, 37, 8, 206, 61, 203, 6, 143, 189, 54, 122, 67, 190, 132, 67, 154, 190, 212, 138, 69, 62, 163, 10, 86, 62, 96, 1, 39, 190, 10, 94, 14, 188, 214, 166, 160, 189, 144, 72, 32, 190, 188, 46, 48, 190, 118, 145, 162, 188, 175, 115, 100, 189, 224, 244, 5, 62, 128, 122, 177, 188, 119, 161, 82, 190, 142, 147, 94, 190, 14, 140, 97, 189, 78, 78, 174, 190, 203, 10, 36, 190, 147, 11, 102, 62, 113, 18, 252, 190, 97, 109, 143, 188, 22, 72, 132, 188, 192, 27, 246, 183, 178, 64, 242, 61, 246, 79, 38, 62, 95, 39, 92, 61, 63, 246, 16, 61, 210, 56, 30, 62, 162, 236, 231, 190, 74, 104, 117, 190, 43, 11, 146, 188, 59, 163, 30, 62, 237, 247, 145, 190, 149, 118, 130, 62, 71, 77, 245, 61, 94, 205, 70, 188, 94, 158, 121, 61, 238, 183, 94, 189, 224, 116, 70, 190, 130, 198, 49, 190, 41, 251, 69, 60, 208, 172, 241, 188, 89, 209, 225, 189, 154, 238, 180, 61, 83, 144, 171, 189, 151, 233, 51, 62, 59, 1, 24, 61, 105, 166, 154, 189, 161, 78, 12, 191, 218, 11, 129, 190, 204, 223, 122, 62, 227, 66, 165, 190, 79, 191, 203, 189, 17, 194, 48, 62, 201, 161, 141, 61, 208, 92, 202, 61, 112, 174, 201, 61, 100, 64, 2, 62, 174, 167, 244, 61, 217, 184, 181, 62, 230, 218, 130, 190, 132, 238, 41, 188, 39, 18, 30, 190, 55, 242, 41, 62, 6, 147, 189, 190, 149, 112, 151, 62, 154, 155, 81, 61, 182, 44, 220, 188, 185, 157, 92, 190, 128, 134, 214, 187, 134, 89, 231, 57, 253, 188, 20, 61, 143, 67, 128, 62, 224, 149, 152, 190, 96, 207, 196, 189, 144, 62, 138, 61, 183, 93, 55, 190, 159, 166, 127, 188, 194, 61, 225, 189, 167, 40, 169, 61, 80, 202, 238, 61, 250, 40, 248, 61, 198, 230, 104, 190, 72, 150, 108, 62, 137, 128, 14, 191, 108, 90, 94, 61, 86, 98, 181, 190, 11, 133, 41, 190, 140, 81, 17, 191, 194, 154, 248, 189, 30, 193, 45, 189, 69, 161, 142, 62, 183, 202, 250, 188, 183, 35, 81, 61, 112, 62, 32, 189, 20, 45, 19, 62, 29, 243, 119, 189, 79, 243, 166, 189, 73, 55, 27, 62, 90, 156, 65, 189, 33, 119, 65, 190, 124, 225, 115, 190, 122, 66, 204, 189, 206, 112, 158, 61, 233, 168, 21, 62, 62, 199, 150, 62, 36, 186, 186, 61, 153, 123, 41, 189, 111, 149, 162, 62, 237, 168, 197, 189, 173, 65, 183, 61, 138, 172, 42, 190, 42, 80, 68, 61, 69, 18, 65, 62, 202, 168, 143, 189, 243, 131, 201, 62, 167, 67, 98, 190, 45, 236, 62, 189, 3, 227, 9, 190, 254, 156, 140, 58, 99, 217, 148, 189, 172, 155, 18, 190, 60, 242, 4, 62, 34, 31, 27, 62, 248, 241, 128, 61, 132, 54, 33, 189, 211, 17, 173, 61, 92, 201, 4, 62, 97, 60, 226, 61, 189, 82, 68, 189, 64, 58, 95, 61, 185, 66, 70, 190, 41, 247, 32, 190, 188, 224, 165, 190, 240, 199, 98, 61, 248, 120, 14, 62, 105, 142, 240, 61, 48, 63, 202, 61, 65, 50, 159, 61, 171, 252, 165, 187, 125, 163, 24, 62, 215, 178, 11, 190, 107, 113, 179, 62, 231, 204, 124, 190, 106, 198, 26, 190, 69, 28, 98, 189, 221, 223, 139, 189, 31, 232, 208, 61, 230, 21, 177, 60, 212, 3, 13, 190, 20, 49, 5, 190, 153, 33, 136, 189, 74, 58, 125, 61, 13, 66, 0, 189, 124, 117, 39, 62, 82, 54, 205, 187, 224, 100, 212, 61, 208, 160, 55, 59, 95, 206, 142, 61, 84, 227, 173, 189, 32, 75, 159, 189, 226, 144, 37, 190, 51, 16, 23, 189, 49, 138, 152, 189, 28, 8, 221, 61, 113, 203, 52, 190, 200, 77, 206, 188, 73, 97, 105, 189, 175, 64, 30, 62, 238, 152, 17, 190, 12, 133, 15, 189, 86, 205, 244, 61, 39, 165, 181, 61, 236, 202, 199, 61, 217, 211, 49, 190, 247, 82, 236, 189, 237, 188, 15, 190, 59, 116, 116, 189, 185, 251, 6, 62, 250, 227, 41, 60, 221, 23, 126, 188, 199, 74, 15, 62, 206, 110, 34, 62, 131, 49, 219, 61, 138, 56, 1, 189, 240, 226, 31, 190, 121, 131, 134, 189, 152, 210, 52, 190, 23, 149, 0, 189, 103, 240, 143, 61, 82, 45, 156, 60, 56, 146, 139, 61, 163, 154, 13, 190, 199, 244, 5, 190, 249, 43, 99, 189, 165, 138, 27, 62, 72, 250, 229, 61, 169, 29, 47, 190, 171, 192, 188, 189, 104, 113, 52, 61, 38, 36, 105, 187, 22, 7, 71, 61, 113, 137, 203, 61, 121, 232, 244, 189, 241, 143, 158, 61, 106, 45, 189, 188, 131, 58, 164, 61, 255, 184, 215, 189, 184, 79, 9, 191, 90, 90, 144, 190, 205, 82, 173, 62, 32, 151, 35, 190, 93, 128, 99, 61, 109, 139, 14, 188, 70, 251, 178, 188, 100, 62, 132, 61, 28, 161, 74, 190, 200, 74, 22, 190, 82, 66, 212, 60, 234, 229, 78, 189, 80, 64, 8, 190, 227, 201, 105, 190, 129, 136, 81, 190, 228, 23, 28, 62, 110, 205, 234, 188, 135, 196, 192, 58, 1, 149, 29, 61, 226, 167, 34, 62, 155, 49, 153, 62, 244, 110, 170, 60, 27, 105, 67, 190, 96, 216, 6, 190, 212, 87, 130, 190, 146, 54, 214, 61, 62, 238, 111, 60, 237, 220, 228, 61, 92, 6, 91, 190, 137, 70, 84, 61, 71, 11, 129, 190, 149, 223, 51, 62, 220, 228, 141, 62, 162, 146, 84, 62, 116, 245, 124, 190, 171, 18, 239, 62, 71, 108, 92, 190, 193, 168, 91, 62, 120, 182, 191, 189, 19, 226, 132, 190, 62, 84, 148, 190, 158, 215, 115, 189, 253, 29, 163, 61, 76, 233, 231, 61, 217, 221, 154, 61, 71, 182, 126, 189, 196, 129, 107, 61, 219, 66, 152, 61, 151, 98, 50, 62, 17, 189, 246, 59, 41, 180, 59, 62, 243, 144, 222, 189, 88, 179, 165, 190, 200, 58, 42, 190, 86, 65, 172, 188, 246, 104, 130, 61, 185, 236, 195, 62, 102, 223, 148, 62, 155, 3, 232, 61, 107, 52, 220, 189, 125, 224, 121, 62, 11, 105, 98, 190, 227, 168, 168, 62, 107, 198, 92, 190, 61, 121, 86, 189, 210, 214, 138, 60, 230, 100, 165, 189, 158, 158, 243, 61, 63, 136, 142, 189, 216, 105, 17, 190, 222, 61, 31, 62, 138, 141, 49, 190, 77, 58, 230, 189, 47, 53, 125, 60, 207, 162, 238, 189, 61, 81, 142, 189, 9, 180, 91, 190, 254, 186, 151, 61, 101, 154, 11, 190, 240, 152, 124, 61, 32, 246, 27, 190, 150, 251, 18, 190, 80, 169, 163, 61, 219, 235, 131, 61, 201, 201, 49, 190, 74, 125, 3, 190, 243, 235, 47, 190, 70, 199, 252, 188, 223, 134, 66, 59, 152, 58, 21, 61, 108, 152, 163, 189, 200, 230, 191, 189, 180, 200, 27, 190, 227, 172, 237, 61, 146, 137, 62, 61, 76, 197, 42, 189, 33, 63, 69, 190, 85, 142, 134, 188, 201, 127, 199, 60, 166, 39, 175, 189, 83, 4, 124, 190, 122, 226, 15, 62, 135, 102, 58, 62, 220, 158, 217, 189, 239, 202, 5, 62, 241, 234, 64, 190, 8, 89, 15, 62, 136, 118, 40, 62, 2, 142, 67, 61, 215, 129, 140, 190, 239, 80, 121, 189, 145, 119, 34, 62, 118, 242, 62, 61, 133, 158, 11, 61, 178, 231, 4, 60, 64, 165, 19, 190, 136, 228, 31, 189, 86, 60, 188, 190, 68, 14, 109, 188, 227, 8, 35, 190, 176, 57, 208, 61, 102, 208, 4, 190, 116, 250, 38, 190, 74, 115, 35, 62, 229, 245, 195, 61, 139, 113, 82, 62, 2, 86, 224, 187, 240, 59, 151, 190, 243, 123, 46, 190, 205, 12, 55, 61, 95, 7, 24, 61, 203, 100, 199, 189, 111, 138, 148, 61, 199, 209, 75, 62, 31, 227, 148, 59, 236, 246, 67, 62, 140, 82, 43, 189, 79, 180, 145, 189, 212, 175, 135, 61, 224, 233, 203, 62, 88, 117, 121, 189, 15, 127, 182, 189, 238, 28, 118, 190, 227, 70, 115, 62, 173, 44, 69, 61, 1, 45, 86, 61, 70, 213, 172, 61, 29, 96, 130, 189, 78, 86, 139, 190, 220, 86, 28, 190, 159, 181, 164, 189, 176, 149, 156, 189, 80, 210, 148, 62, 182, 212, 230, 189, 16, 85, 24, 189, 41, 117, 173, 189, 101, 206, 131, 61, 168, 109, 174, 61, 137, 146, 118, 62, 174, 0, 98, 62, 103, 30, 185, 61, 210, 109, 162, 61, 36, 35, 52, 62, 125, 66, 141, 190, 194, 119, 184, 189, 246, 105, 130, 62, 140, 157, 125, 190, 48, 27, 188, 61, 59, 42, 153, 60, 204, 54, 194, 61, 126, 11, 189, 62, 189, 137, 211, 61, 40, 56, 240, 189, 234, 233, 204, 188, 200, 178, 52, 62, 185, 225, 121, 62, 151, 254, 85, 191, 147, 120, 82, 62, 41, 226, 178, 190, 120, 240, 76, 190, 15, 223, 218, 60, 60, 81, 14, 61, 207, 102, 140, 190, 208, 222, 69, 189, 41, 186, 6, 62, 138, 157, 178, 61, 102, 235, 28, 190, 158, 63, 107, 190, 231, 4, 4, 191, 239, 186, 103, 62, 103, 57, 232, 187, 34, 38, 41, 190, 48, 131, 15, 191, 129, 72, 0, 190, 213, 102, 48, 189, 232, 127, 125, 190, 131, 142, 37, 62, 145, 191, 207, 60, 176, 123, 137, 189, 170, 49, 144, 60, 34, 221, 47, 61, 168, 13, 41, 61, 175, 174, 233, 61, 22, 29, 43, 190, 76, 64, 90, 190, 174, 17, 114, 187, 231, 66, 76, 190, 226, 5, 29, 61, 167, 127, 7, 189, 55, 189, 201, 61, 52, 146, 159, 61, 188, 131, 55, 188, 130, 89, 40, 62, 105, 107, 58, 62, 3, 137, 161, 189, 163, 128, 240, 189, 11, 121, 128, 190, 91, 254, 31, 188, 34, 241, 222, 61, 110, 121, 52, 61, 230, 159, 183, 188, 38, 111, 57, 62, 144, 47, 163, 190, 210, 164, 146, 189, 75, 153, 82, 61, 135, 25, 128, 62, 162, 109, 103, 61, 16, 175, 58, 190, 41, 24, 156, 189, 153, 59, 56, 62, 179, 10, 67, 190, 74, 196, 213, 188, 134, 96, 214, 189, 18, 133, 198, 188, 20, 60, 63, 62, 123, 228, 203, 61, 13, 154, 210, 189, 178, 25, 133, 189, 94, 238, 150, 190, 95, 190, 1, 62, 52, 26, 54, 190, 186, 184, 92, 62, 64, 88, 16, 62, 143, 98, 69, 62, 138, 222, 152, 187, 161, 109, 65, 60, 54, 251, 95, 61, 158, 144, 156, 60, 5, 9, 203, 60, 23, 161, 46, 190, 240, 208, 120, 62, 81, 89, 214, 60, 116, 222, 34, 190, 146, 76, 6, 189, 11, 29, 81, 62, 65, 96, 219, 61, 121, 238, 152, 189, 58, 208, 15, 61, 65, 98, 254, 188, 102, 198, 209, 189, 159, 114, 163, 189, 204, 157, 209, 189, 112, 231, 50, 190, 59, 148, 128, 189, 199, 146, 187, 189, 198, 33, 47, 61, 40, 232, 40, 190, 128, 29, 155, 189, 75, 114, 100, 189, 211, 126, 34, 190, 28, 171, 128, 60, 134, 1, 2, 190, 100, 49, 0, 189, 22, 28, 0, 188, 131, 133, 146, 61, 233, 200, 28, 61, 143, 152, 226, 189, 92, 50, 78, 190, 165, 111, 143, 189, 168, 213, 221, 61, 230, 35, 157, 60, 154, 220, 73, 188, 82, 8, 148, 61, 22, 20, 139, 61, 26, 243, 93, 61, 235, 161, 50, 190, 239, 119, 68, 186, 209, 215, 151, 61, 36, 207, 221, 189, 149, 248, 7, 62, 224, 212, 41, 190, 242, 97, 55, 189, 90, 1, 219, 189, 236, 230, 45, 190, 228, 136, 180, 189, 105, 138, 154, 189, 24, 146, 70, 189, 52, 186, 26, 62, 45, 21, 250, 188, 249, 145, 18, 190, 86, 212, 217, 189, 40, 41, 81, 60, 125, 82, 248, 188, 18, 144, 42, 58, 80, 221, 88, 61, 227, 222, 61, 190, 119, 243, 16, 190, 222, 28, 50, 61, 47, 35, 12, 62, 76, 205, 8, 190, 63, 166, 215, 189, 250, 98, 141, 189, 86, 225, 47, 61, 245, 179, 204, 61, 200, 188, 36, 62, 152, 235, 12, 190, 168, 227, 157, 188, 38, 22, 140, 189, 215, 70, 158, 61, 148, 60, 34, 189, 255, 75, 207, 190, 93, 125, 216, 61, 240, 224, 140, 61, 42, 74, 56, 191, 243, 117, 186, 188, 148, 229, 122, 61, 178, 24, 4, 62, 125, 78, 194, 61, 165, 139, 107, 189, 222, 70, 200, 62, 97, 83, 136, 62, 231, 158, 151, 60, 231, 33, 230, 190, 200, 124, 252, 189, 60, 14, 24, 190, 129, 103, 178, 61, 62, 187, 238, 190, 129, 68, 56, 62, 245, 3, 239, 189, 210, 179, 189, 189, 241, 165, 167, 62, 36, 163, 159, 189, 142, 75, 252, 188, 140, 212, 125, 59, 126, 126, 194, 61, 26, 222, 232, 189, 194, 220, 76, 190, 37, 88, 162, 60, 217, 171, 34, 189, 153, 50, 128, 62, 243, 83, 80, 190, 56, 216, 131, 61, 248, 49, 222, 188, 92, 209, 169, 61, 70, 80, 140, 190, 240, 46, 152, 62, 102, 194, 130, 60, 80, 44, 45, 188, 150, 255, 11, 62, 133, 174, 41, 189, 210, 77, 37, 62, 159, 63, 240, 189, 46, 29, 254, 61, 88, 155, 4, 61, 48, 167, 99, 190, 37, 189, 3, 62, 120, 174, 77, 189, 44, 154, 87, 62, 163, 54, 2, 62, 164, 100, 58, 62, 216, 177, 109, 189, 38, 171, 52, 191, 214, 184, 36, 62, 72, 137, 250, 190, 170, 94, 199, 60, 183, 174, 188, 189, 200, 72, 141, 62, 110, 195, 96, 62, 28, 169, 178, 190, 40, 146, 152, 189, 28, 124, 44, 62, 83, 188, 39, 61, 82, 111, 7, 63, 174, 85, 157, 190, 225, 234, 117, 191, 21, 60, 206, 190, 196, 77, 128, 62, 33, 123, 58, 190, 115, 171, 121, 189, 130, 100, 187, 188, 120, 99, 47, 62, 91, 57, 244, 61, 34, 102, 105, 190, 49, 125, 57, 62, 182, 88, 68, 61, 180, 126, 153, 189, 238, 51, 207, 190, 140, 46, 156, 190, 126, 202, 183, 189, 62, 94, 188, 61, 151, 228, 49, 189, 182, 251, 116, 62, 17, 219, 118, 61, 102, 148, 16, 62, 6, 116, 156, 62, 3, 136, 159, 62, 121, 168, 8, 190, 151, 197, 33, 188, 120, 8, 196, 190, 217, 151, 169, 189, 117, 37, 69, 189, 212, 225, 90, 61, 72, 152, 120, 187, 202, 77, 5, 62, 127, 222, 103, 190, 67, 179, 204, 189, 244, 46, 111, 61, 87, 228, 63, 189, 129, 60, 23, 190, 18, 176, 173, 189, 228, 41, 120, 189, 30, 91, 88, 190, 228, 181, 98, 189, 162, 179, 182, 61, 214, 144, 158, 189, 168, 101, 17, 189, 195, 8, 160, 61, 116, 60, 212, 189, 113, 56, 88, 189, 17, 163, 1, 189, 175, 90, 42, 190, 103, 253, 37, 190, 176, 164, 147, 188, 14, 69, 16, 62, 196, 213, 220, 188, 8, 70, 91, 61, 137, 66, 219, 189, 26, 31, 56, 190, 114, 218, 100, 189, 92, 39, 37, 62, 140, 25, 109, 189, 22, 85, 127, 61, 75, 143, 166, 61, 0, 68, 194, 61, 3, 93, 143, 189, 201, 3, 94, 189, 135, 72, 197, 61, 82, 204, 62, 190, 210, 163, 178, 190, 158, 192, 31, 190, 49, 22, 141, 190, 164, 105, 68, 62, 146, 142, 75, 190, 131, 19, 134, 191, 212, 144, 91, 189, 183, 81, 162, 62, 24, 220, 200, 190, 194, 185, 145, 189, 166, 1, 224, 190, 36, 36, 38, 190, 74, 240, 54, 62, 64, 2, 152, 190, 179, 165, 218, 62, 244, 196, 69, 190, 225, 251, 149, 190, 113, 200, 227, 190, 146, 166, 203, 61, 155, 200, 184, 184, 158, 34, 108, 190, 42, 242, 89, 62, 166, 139, 61, 190, 23, 95, 232, 189, 120, 138, 2, 190, 199, 99, 70, 62, 119, 14, 72, 62, 20, 115, 111, 191, 164, 239, 206, 60, 188, 194, 26, 191, 78, 225, 132, 190, 191, 83, 252, 61, 141, 10, 41, 62, 156, 118, 90, 62, 180, 101, 6, 190, 191, 240, 159, 62, 248, 198, 144, 190, 108, 83, 143, 61, 188, 203, 85, 190, 212, 117, 91, 62, 6, 112, 144, 190, 13, 122, 54, 61, 180, 221, 162, 188, 9, 89, 168, 62, 112, 209, 43, 62, 141, 41, 108, 187, 109, 49, 129, 62, 236, 70, 6, 62, 15, 66, 20, 59, 5, 195, 26, 190, 161, 113, 111, 61, 159, 232, 43, 189, 222, 211, 11, 191, 165, 16, 131, 190, 18, 57, 114, 61, 9, 218, 137, 189, 80, 105, 214, 62, 204, 53, 41, 62, 127, 0, 6, 190, 209, 53, 28, 190, 159, 13, 22, 62, 208, 140, 13, 190, 231, 31, 164, 62, 17, 203, 71, 189, 247, 183, 113, 189, 241, 103, 245, 189, 105, 96, 194, 189, 67, 101, 149, 61, 121, 37, 209, 189, 84, 27, 8, 62, 237, 30, 48, 190, 135, 26, 9, 189, 255, 77, 143, 189, 52, 158, 240, 189, 191, 230, 60, 189, 146, 32, 255, 189, 9, 62, 251, 60, 229, 15, 188, 188, 68, 168, 221, 189, 127, 172, 1, 188, 37, 126, 175, 189, 184, 234, 41, 190, 83, 0, 254, 188, 46, 27, 160, 60, 249, 73, 233, 60, 159, 238, 178, 189, 156, 189, 218, 189, 187, 147, 233, 189, 95, 114, 217, 61, 233, 179, 209, 61, 193, 214, 38, 190, 201, 65, 143, 189, 4, 163, 162, 189, 111, 17, 177, 188, 204, 224, 49, 62, 179, 172, 235, 189, 123, 93, 177, 61, 80, 190, 159, 62, 87, 25, 251, 189, 104, 71, 180, 61, 224, 141, 236, 190, 151, 200, 216, 191, 214, 178, 135, 190, 254, 143, 5, 62, 182, 208, 49, 191, 181, 57, 222, 189, 182, 66, 140, 191, 247, 103, 80, 62, 148, 22, 25, 62, 41, 127, 2, 62, 115, 93, 165, 62, 249, 45, 228, 190, 107, 225, 198, 190, 42, 35, 79, 190, 230, 118, 130, 62, 176, 192, 147, 62, 129, 174, 241, 190, 142, 180, 160, 62, 83, 175, 208, 190, 254, 86, 152, 189, 3, 169, 172, 62, 34, 214, 53, 190, 5, 127, 63, 61, 94, 128, 205, 191, 144, 159, 132, 62, 41, 118, 216, 190, 0, 226, 16, 62, 250, 213, 141, 62, 188, 192, 160, 190, 5, 163, 67, 187, 190, 52, 77, 190, 19, 234, 8, 60, 72, 149, 197, 189, 82, 112, 163, 61, 55, 10, 207, 189, 111, 118, 80, 189, 235, 97, 134, 190, 62, 62, 177, 61, 48, 23, 226, 60, 110, 136, 38, 61, 163, 110, 135, 190, 96, 120, 223, 189, 24, 169, 22, 62, 127, 123, 94, 62, 208, 205, 179, 61, 216, 123, 70, 62, 160, 242, 164, 190, 170, 122, 6, 191, 9, 69, 120, 189, 104, 90, 8, 190, 52, 82, 48, 62, 231, 232, 114, 61, 136, 108, 141, 189, 165, 20, 169, 189, 122, 50, 12, 190, 89, 165, 187, 61, 80, 182, 68, 62, 56, 191, 38, 62, 183, 170, 65, 62, 232, 1, 221, 190, 232, 63, 239, 191, 52, 84, 76, 191, 146, 225, 43, 62, 213, 208, 59, 191, 72, 250, 21, 189, 20, 10, 15, 62, 25, 201, 80, 61, 237, 252, 132, 60, 0, 241, 43, 62, 146, 100, 154, 62, 223, 112, 173, 61, 100, 2, 58, 189, 183, 93, 3, 191, 46, 173, 137, 191, 28, 246, 78, 190, 235, 34, 93, 62, 109, 210, 76, 60, 108, 246, 186, 189, 91, 30, 8, 62, 59, 197, 22, 190, 70, 31, 109, 190, 119, 238, 85, 62, 196, 101, 112, 62, 172, 222, 168, 61, 7, 122, 17, 191, 31, 200, 145, 190, 199, 130, 125, 189, 186, 153, 110, 189, 186, 7, 5, 62, 128, 59, 6, 190, 212, 209, 130, 191, 178, 29, 178, 62, 248, 242, 80, 190, 212, 186, 245, 61, 114, 83, 242, 190, 134, 246, 141, 61, 39, 48, 72, 190, 173, 179, 45, 62, 87, 232, 96, 190, 46, 44, 12, 190, 110, 34, 249, 190, 202, 131, 239, 189, 135, 58, 196, 189, 238, 185, 138, 62, 109, 198, 64, 190, 48, 202, 40, 190, 193, 86, 28, 190, 233, 161, 223, 189, 49, 25, 134, 61, 120, 134, 1, 189, 106, 108, 244, 190, 21, 239, 210, 190, 151, 250, 177, 189, 0, 204, 241, 190, 7, 109, 72, 62, 17, 190, 182, 189, 88, 216, 224, 62, 191, 165, 179, 61, 88, 77, 151, 190, 200, 62, 27, 187, 59, 18, 123, 62, 144, 131, 55, 62, 106, 118, 218, 62, 115, 84, 170, 190, 37, 233, 7, 190, 117, 122, 21, 190, 220, 164, 192, 189, 231, 227, 6, 62, 161, 76, 13, 62, 23, 99, 132, 188, 28, 16, 130, 61, 62, 147, 179, 61, 246, 207, 93, 189, 64, 66, 36, 60, 72, 208, 8, 190, 54, 180, 207, 189, 244, 88, 220, 189, 102, 193, 9, 62, 126, 50, 205, 59, 109, 101, 143, 60, 143, 13, 250, 189, 150, 29, 32, 190, 69, 89, 232, 188, 247, 215, 214, 189, 125, 78, 66, 61, 203, 140, 194, 60, 233, 4, 65, 190, 253, 230, 36, 62, 193, 246, 213, 61, 46, 142, 6, 62, 141, 90, 45, 61, 62, 238, 132, 189, 209, 235, 46, 190, 169, 49, 29, 190, 23, 37, 35, 190, 71, 58, 200, 61, 17, 140, 245, 191, 182, 123, 109, 191, 46, 247, 5, 190, 33, 226, 229, 61, 8, 59, 41, 189, 59, 221, 252, 189, 211, 15, 160, 62, 166, 79, 117, 190, 155, 180, 210, 61, 85, 72, 237, 189, 165, 245, 90, 189, 201, 176, 77, 62, 183, 36, 79, 190, 61, 65, 189, 191, 163, 26, 18, 191, 13, 16, 22, 190, 77, 197, 91, 62, 152, 200, 198, 190, 72, 107, 14, 62, 3, 32, 247, 60, 128, 32, 83, 62, 38, 64, 104, 62, 16, 157, 140, 62, 117, 157, 23, 190, 251, 242, 8, 191, 65, 130, 194, 189, 207, 67, 190, 62, 210, 124, 42, 62, 117, 75, 113, 62, 159, 43, 19, 190, 39, 232, 138, 191, 106, 109, 38, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {166, 74, 55, 188, 47, 229, 145, 62, 76, 54, 115, 189, 238, 221, 8, 62, 62, 70, 208, 61, 40, 33, 162, 62, 192, 197, 165, 189, 18, 31, 44, 190, 211, 107, 105, 190, 86, 74, 253, 189, 68, 216, 189, 61, 209, 116, 23, 190, 168, 82, 4, 189, 160, 66, 102, 62, 74, 118, 174, 60, 173, 245, 159, 61, 55, 128, 138, 62, 227, 239, 6, 62, 53, 33, 162, 61, 171, 218, 33, 62, 184, 20, 27, 188, 83, 28, 61, 190, 215, 28, 85, 61, 114, 239, 116, 189, 178, 162, 153, 61, 109, 8, 161, 61, 158, 125, 36, 62, 191, 90, 18, 62, 216, 204, 148, 62, 146, 244, 174, 61, 42, 144, 9, 189, 86, 158, 229, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {187, 78, 47, 190, 59, 68, 84, 62, 33, 151, 7, 62, 168, 23, 231, 190, 58, 216, 129, 189, 194, 135, 142, 62, 235, 214, 8, 62, 126, 35, 6, 62, 77, 96, 65, 61, 130, 182, 7, 190, 97, 181, 158, 62, 92, 207, 136, 61, 56, 97, 21, 62, 146, 177, 148, 189, 168, 63, 18, 191, 137, 237, 72, 190, 107, 238, 21, 190, 179, 47, 130, 188, 21, 102, 186, 189, 68, 92, 33, 191, 25, 25, 166, 62, 175, 55, 215, 190, 107, 161, 126, 189, 154, 254, 78, 63, 236, 223, 153, 62, 233, 216, 142, 59, 113, 8, 150, 63, 136, 163, 9, 62, 13, 100, 101, 191, 101, 80, 209, 62, 24, 223, 185, 188, 133, 28, 110, 191, 54, 210, 211, 60, 210, 80, 130, 187, 193, 106, 39, 190, 134, 0, 133, 190, 1, 10, 204, 190, 46, 239, 85, 190, 191, 211, 35, 61, 185, 197, 108, 188, 60, 128, 222, 59, 14, 38, 30, 62, 206, 79, 152, 61, 51, 193, 96, 61, 175, 25, 225, 189, 95, 227, 196, 190, 28, 33, 6, 188, 32, 168, 81, 61, 29, 74, 108, 190, 95, 158, 180, 61, 104, 165, 37, 62, 156, 118, 94, 61, 226, 97, 160, 61, 33, 160, 10, 62, 148, 57, 65, 61, 191, 236, 61, 62, 190, 69, 62, 188, 108, 195, 199, 61, 3, 75, 237, 189, 238, 197, 93, 190, 78, 158, 162, 59, 182, 118, 130, 61, 156, 90, 8, 190, 199, 84, 216, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {29, 90, 237, 61, 202, 217, 108, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {239, 154, 129, 191, 247, 255, 81, 190, 131, 112, 209, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {54, 226, 225, 191, 114, 12, 8, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0022/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}