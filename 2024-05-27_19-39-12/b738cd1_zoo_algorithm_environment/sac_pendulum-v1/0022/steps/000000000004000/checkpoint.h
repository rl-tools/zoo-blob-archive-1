// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 219, 35, 191, 249, 80, 200, 190, 148, 86, 33, 63, 207, 123, 185, 190, 182, 166, 64, 191, 2, 58, 229, 62, 96, 116, 9, 63, 134, 65, 27, 63, 133, 255, 212, 62, 59, 232, 221, 62, 87, 109, 63, 191, 43, 166, 6, 191, 233, 242, 120, 190, 208, 115, 244, 62, 89, 156, 136, 190, 192, 200, 125, 62, 57, 235, 89, 62, 62, 124, 194, 190, 174, 106, 32, 191, 66, 12, 24, 191, 237, 92, 254, 190, 98, 132, 103, 190, 27, 207, 55, 63, 90, 247, 238, 189, 83, 155, 8, 191, 101, 69, 148, 62, 29, 43, 136, 190, 2, 148, 130, 61, 207, 158, 49, 63, 13, 109, 232, 189, 234, 110, 75, 62, 43, 178, 228, 62, 74, 109, 209, 190, 147, 84, 231, 62, 63, 1, 57, 190, 235, 132, 85, 189, 178, 209, 85, 191, 242, 202, 11, 63, 133, 196, 19, 63, 249, 86, 151, 190, 224, 89, 201, 190, 111, 203, 106, 63, 81, 98, 30, 190, 86, 35, 99, 63, 11, 187, 29, 190, 182, 50, 157, 62, 205, 250, 231, 62, 42, 39, 197, 190, 147, 0, 184, 189, 135, 201, 129, 191, 199, 245, 156, 190, 76, 84, 11, 63, 168, 16, 143, 61, 94, 89, 221, 62, 134, 67, 89, 191, 68, 55, 99, 190, 117, 179, 194, 61, 65, 150, 53, 191, 52, 248, 177, 62, 210, 229, 67, 61, 92, 89, 56, 62, 134, 100, 212, 60, 42, 201, 22, 63, 85, 149, 202, 190, 196, 110, 32, 63, 70, 147, 131, 61, 87, 110, 198, 187, 129, 222, 69, 191, 241, 31, 243, 190, 242, 248, 176, 62, 181, 12, 233, 61, 102, 201, 142, 188, 64, 123, 44, 62, 193, 224, 54, 191, 186, 11, 1, 62, 195, 105, 179, 62, 58, 192, 142, 189, 246, 181, 14, 191, 134, 224, 37, 191, 6, 44, 13, 190, 114, 221, 151, 61, 135, 185, 131, 190, 224, 228, 42, 63, 25, 254, 67, 191, 146, 187, 34, 189, 114, 207, 238, 190, 235, 188, 178, 189, 181, 55, 25, 63, 203, 109, 100, 190, 40, 130, 49, 63, 63, 220, 69, 190, 136, 204, 62, 191, 156, 177, 216, 62, 104, 102, 134, 190, 95, 249, 75, 62, 237, 123, 42, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {146, 129, 8, 191, 144, 248, 147, 190, 186, 169, 207, 61, 16, 1, 135, 190, 35, 42, 112, 190, 125, 166, 150, 62, 199, 196, 185, 189, 184, 106, 28, 62, 235, 18, 0, 191, 58, 109, 31, 60, 195, 168, 112, 62, 53, 194, 65, 63, 76, 47, 31, 190, 67, 166, 9, 190, 135, 203, 199, 189, 60, 90, 174, 62, 17, 145, 160, 62, 26, 223, 159, 62, 91, 253, 141, 189, 231, 35, 141, 62, 119, 153, 239, 190, 248, 152, 43, 63, 28, 177, 33, 63, 177, 67, 0, 191, 24, 152, 124, 61, 39, 64, 58, 190, 128, 135, 64, 186, 3, 248, 19, 190, 186, 27, 219, 62, 113, 30, 166, 62, 210, 80, 0, 190, 49, 250, 157, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {236, 212, 166, 190, 4, 178, 43, 190, 225, 188, 89, 62, 47, 135, 140, 190, 0, 181, 243, 61, 77, 167, 56, 62, 208, 2, 55, 62, 173, 187, 95, 61, 57, 154, 140, 189, 121, 146, 163, 61, 192, 148, 18, 61, 90, 149, 66, 61, 217, 166, 178, 61, 207, 233, 178, 188, 71, 239, 88, 190, 150, 120, 10, 62, 52, 77, 174, 188, 42, 19, 217, 188, 181, 91, 44, 62, 219, 168, 232, 61, 159, 193, 101, 189, 16, 51, 14, 62, 231, 179, 250, 189, 146, 215, 14, 62, 29, 36, 232, 189, 82, 8, 102, 190, 204, 21, 212, 188, 249, 238, 210, 61, 238, 92, 3, 62, 223, 122, 210, 187, 238, 196, 91, 190, 229, 210, 0, 62, 233, 233, 141, 62, 169, 136, 212, 61, 181, 239, 193, 60, 0, 66, 129, 62, 246, 53, 169, 190, 196, 253, 209, 189, 67, 235, 171, 188, 26, 161, 32, 190, 138, 216, 41, 191, 49, 93, 131, 190, 245, 187, 133, 190, 86, 29, 96, 62, 90, 32, 20, 62, 243, 234, 100, 60, 21, 6, 183, 61, 206, 197, 120, 190, 236, 54, 75, 190, 105, 203, 88, 189, 169, 50, 54, 190, 167, 17, 146, 189, 179, 12, 14, 190, 41, 133, 198, 189, 26, 232, 27, 62, 24, 188, 34, 62, 253, 192, 40, 62, 177, 202, 133, 62, 127, 120, 137, 61, 124, 15, 28, 190, 129, 235, 87, 62, 65, 253, 133, 189, 17, 56, 159, 62, 81, 51, 182, 61, 241, 132, 30, 61, 210, 156, 68, 61, 36, 41, 120, 188, 127, 74, 1, 190, 217, 36, 80, 62, 180, 124, 47, 62, 36, 21, 231, 189, 188, 178, 30, 62, 201, 81, 156, 62, 126, 145, 188, 61, 95, 60, 252, 61, 199, 215, 227, 188, 236, 255, 21, 62, 47, 126, 135, 189, 252, 164, 147, 61, 16, 165, 88, 189, 253, 193, 31, 190, 46, 76, 81, 190, 233, 130, 30, 62, 26, 185, 98, 62, 162, 126, 26, 190, 18, 153, 200, 60, 155, 56, 130, 189, 144, 72, 32, 190, 28, 189, 45, 190, 135, 7, 44, 58, 219, 105, 195, 189, 199, 215, 4, 62, 104, 226, 47, 60, 233, 199, 249, 189, 214, 166, 33, 190, 156, 244, 61, 60, 114, 63, 89, 190, 90, 252, 176, 190, 230, 62, 104, 62, 43, 172, 152, 190, 49, 22, 162, 188, 155, 239, 139, 188, 73, 54, 130, 59, 196, 161, 15, 62, 234, 5, 240, 61, 142, 125, 126, 61, 39, 8, 247, 60, 210, 188, 221, 61, 79, 103, 200, 189, 52, 221, 129, 190, 99, 199, 124, 188, 170, 9, 30, 62, 104, 22, 208, 189, 203, 151, 79, 62, 127, 153, 55, 62, 68, 195, 142, 60, 72, 34, 123, 60, 233, 93, 23, 188, 68, 180, 45, 190, 130, 198, 49, 190, 67, 17, 87, 190, 238, 129, 153, 188, 46, 131, 94, 189, 95, 212, 176, 61, 114, 185, 195, 189, 210, 12, 226, 61, 173, 203, 63, 190, 86, 174, 186, 188, 249, 212, 199, 190, 118, 225, 63, 190, 40, 181, 65, 62, 23, 148, 53, 190, 27, 182, 129, 189, 204, 21, 55, 62, 51, 121, 10, 62, 229, 217, 3, 62, 146, 120, 222, 61, 150, 71, 45, 62, 38, 242, 7, 62, 186, 101, 102, 62, 249, 243, 232, 189, 4, 183, 190, 61, 202, 12, 9, 190, 156, 137, 33, 62, 195, 71, 62, 190, 112, 52, 69, 62, 122, 85, 77, 61, 135, 159, 211, 188, 171, 160, 244, 189, 25, 3, 51, 187, 184, 153, 14, 61, 253, 188, 20, 61, 227, 178, 100, 61, 82, 118, 132, 190, 169, 236, 214, 189, 237, 46, 240, 61, 156, 88, 30, 190, 193, 50, 151, 189, 239, 240, 16, 189, 174, 92, 227, 61, 131, 140, 17, 62, 56, 62, 11, 62, 101, 189, 141, 189, 5, 215, 46, 62, 238, 223, 14, 191, 250, 60, 28, 189, 88, 84, 133, 190, 106, 201, 29, 190, 30, 3, 226, 190, 54, 162, 7, 190, 225, 128, 7, 190, 207, 176, 81, 62, 193, 211, 104, 60, 3, 179, 230, 61, 4, 169, 74, 189, 228, 88, 221, 60, 155, 115, 52, 188, 167, 128, 162, 188, 211, 200, 12, 62, 244, 89, 248, 59, 131, 41, 174, 189, 118, 145, 58, 190, 54, 244, 171, 189, 206, 112, 158, 61, 201, 158, 250, 61, 134, 249, 119, 62, 142, 96, 191, 61, 50, 221, 105, 189, 164, 133, 117, 62, 11, 152, 31, 189, 195, 89, 244, 61, 135, 51, 220, 189, 46, 71, 173, 61, 68, 46, 57, 62, 200, 143, 183, 61, 209, 108, 175, 62, 36, 243, 140, 190, 83, 97, 106, 189, 90, 137, 1, 190, 21, 228, 1, 61, 34, 155, 24, 190, 55, 90, 13, 190, 50, 49, 241, 61, 149, 210, 33, 62, 227, 152, 20, 62, 130, 159, 56, 186, 22, 189, 181, 61, 77, 247, 253, 61, 7, 65, 223, 61, 76, 169, 165, 188, 37, 172, 76, 61, 91, 139, 111, 189, 205, 106, 145, 189, 162, 225, 31, 190, 120, 219, 146, 61, 248, 120, 14, 62, 216, 199, 170, 60, 106, 80, 145, 61, 202, 13, 205, 61, 63, 223, 4, 189, 62, 61, 191, 61, 189, 171, 249, 189, 111, 104, 178, 62, 223, 64, 180, 189, 106, 198, 26, 190, 69, 28, 98, 189, 221, 223, 139, 189, 31, 232, 208, 61, 230, 21, 177, 60, 212, 3, 13, 190, 20, 49, 5, 190, 153, 33, 136, 189, 74, 58, 125, 61, 13, 66, 0, 189, 124, 117, 39, 62, 82, 54, 205, 187, 224, 100, 212, 61, 208, 160, 55, 59, 95, 206, 142, 61, 84, 227, 173, 189, 32, 75, 159, 189, 226, 144, 37, 190, 51, 16, 23, 189, 49, 138, 152, 189, 28, 8, 221, 61, 113, 203, 52, 190, 200, 77, 206, 188, 73, 97, 105, 189, 175, 64, 30, 62, 238, 152, 17, 190, 12, 133, 15, 189, 86, 205, 244, 61, 39, 165, 181, 61, 236, 202, 199, 61, 217, 211, 49, 190, 247, 82, 236, 189, 237, 188, 15, 190, 59, 116, 116, 189, 185, 251, 6, 62, 250, 227, 41, 60, 221, 23, 126, 188, 199, 74, 15, 62, 206, 110, 34, 62, 131, 49, 219, 61, 138, 56, 1, 189, 240, 226, 31, 190, 121, 131, 134, 189, 152, 210, 52, 190, 23, 149, 0, 189, 103, 240, 143, 61, 82, 45, 156, 60, 56, 146, 139, 61, 163, 154, 13, 190, 199, 244, 5, 190, 249, 43, 99, 189, 165, 138, 27, 62, 72, 250, 229, 61, 169, 29, 47, 190, 171, 192, 188, 189, 104, 113, 52, 61, 38, 36, 105, 187, 22, 7, 71, 61, 113, 137, 203, 61, 121, 232, 244, 189, 241, 143, 158, 61, 106, 45, 189, 188, 131, 58, 164, 61, 255, 184, 215, 189, 121, 44, 236, 190, 31, 66, 181, 190, 149, 164, 153, 62, 161, 169, 136, 189, 32, 147, 182, 61, 24, 152, 11, 61, 190, 64, 161, 60, 223, 190, 160, 61, 154, 251, 1, 190, 182, 125, 36, 190, 97, 11, 97, 61, 193, 130, 148, 59, 8, 102, 1, 60, 144, 163, 114, 190, 108, 13, 77, 190, 111, 153, 57, 62, 27, 143, 138, 61, 41, 162, 10, 61, 66, 51, 190, 61, 168, 92, 17, 62, 161, 191, 75, 62, 93, 175, 103, 60, 40, 156, 1, 190, 96, 216, 6, 190, 142, 176, 6, 190, 164, 134, 10, 62, 54, 210, 131, 61, 68, 110, 10, 62, 0, 166, 10, 190, 87, 122, 79, 61, 172, 142, 194, 190, 102, 70, 20, 62, 119, 253, 105, 62, 216, 231, 8, 62, 88, 168, 175, 189, 96, 250, 202, 62, 57, 193, 145, 190, 251, 246, 70, 62, 73, 49, 234, 189, 60, 103, 111, 190, 44, 126, 204, 190, 94, 186, 35, 189, 252, 53, 123, 61, 231, 13, 8, 62, 55, 234, 171, 61, 37, 176, 200, 189, 123, 41, 126, 61, 34, 31, 138, 61, 79, 234, 21, 62, 107, 55, 239, 187, 148, 43, 155, 61, 198, 47, 47, 189, 92, 232, 145, 190, 176, 125, 69, 189, 216, 248, 195, 188, 246, 104, 130, 61, 81, 160, 135, 62, 143, 160, 129, 62, 139, 54, 211, 60, 123, 230, 25, 190, 18, 207, 34, 62, 225, 254, 131, 190, 114, 56, 133, 62, 207, 20, 224, 189, 61, 121, 86, 189, 210, 214, 138, 60, 230, 100, 165, 189, 158, 158, 243, 61, 63, 136, 142, 189, 216, 105, 17, 190, 222, 61, 31, 62, 138, 141, 49, 190, 77, 58, 230, 189, 47, 53, 125, 60, 207, 162, 238, 189, 61, 81, 142, 189, 9, 180, 91, 190, 254, 186, 151, 61, 101, 154, 11, 190, 240, 152, 124, 61, 32, 246, 27, 190, 150, 251, 18, 190, 80, 169, 163, 61, 219, 235, 131, 61, 201, 201, 49, 190, 74, 125, 3, 190, 243, 235, 47, 190, 70, 199, 252, 188, 223, 134, 66, 59, 152, 58, 21, 61, 108, 152, 163, 189, 200, 230, 191, 189, 180, 200, 27, 190, 227, 172, 237, 61, 146, 137, 62, 61, 76, 197, 42, 189, 217, 248, 44, 190, 174, 148, 100, 61, 182, 65, 171, 187, 176, 38, 219, 189, 3, 137, 131, 190, 151, 149, 4, 62, 206, 23, 60, 62, 17, 5, 143, 189, 74, 136, 169, 61, 129, 81, 30, 190, 133, 164, 11, 62, 45, 59, 21, 62, 204, 254, 94, 61, 201, 49, 58, 190, 0, 13, 161, 188, 232, 150, 24, 62, 164, 25, 34, 61, 34, 56, 29, 189, 255, 194, 233, 188, 170, 227, 99, 188, 7, 151, 27, 61, 140, 113, 89, 190, 215, 31, 206, 188, 227, 8, 35, 190, 82, 215, 169, 61, 164, 148, 5, 190, 140, 235, 53, 190, 185, 23, 37, 62, 226, 50, 214, 61, 218, 85, 44, 62, 24, 221, 196, 61, 72, 49, 58, 189, 175, 221, 24, 190, 241, 251, 228, 60, 212, 82, 213, 61, 207, 136, 138, 189, 87, 82, 135, 61, 191, 119, 24, 62, 194, 248, 84, 187, 216, 128, 61, 62, 66, 54, 174, 189, 155, 203, 53, 189, 174, 135, 225, 60, 51, 44, 143, 62, 82, 146, 44, 61, 179, 251, 83, 189, 169, 55, 123, 190, 204, 110, 65, 62, 55, 201, 23, 62, 31, 204, 83, 61, 240, 130, 159, 61, 230, 3, 85, 189, 233, 126, 97, 190, 95, 48, 226, 189, 253, 217, 182, 189, 176, 149, 156, 189, 169, 17, 17, 62, 160, 104, 19, 190, 80, 117, 51, 189, 251, 149, 198, 189, 123, 183, 10, 61, 151, 115, 191, 61, 120, 53, 111, 62, 210, 65, 141, 62, 39, 167, 15, 61, 227, 185, 173, 189, 241, 124, 14, 62, 121, 226, 107, 189, 9, 101, 194, 189, 171, 196, 130, 62, 218, 228, 96, 190, 230, 57, 40, 62, 167, 226, 64, 189, 87, 2, 239, 61, 90, 136, 188, 62, 30, 85, 59, 61, 75, 115, 114, 60, 175, 14, 206, 189, 18, 148, 100, 62, 27, 65, 119, 62, 206, 109, 21, 191, 34, 10, 215, 61, 198, 64, 116, 190, 73, 206, 27, 190, 150, 124, 150, 189, 216, 30, 246, 61, 41, 141, 130, 190, 208, 222, 69, 189, 211, 200, 253, 189, 75, 135, 233, 61, 253, 103, 161, 189, 124, 187, 94, 190, 105, 137, 209, 190, 108, 204, 239, 61, 78, 16, 56, 190, 31, 94, 187, 189, 254, 163, 235, 190, 208, 205, 45, 190, 156, 190, 58, 188, 105, 66, 245, 189, 165, 129, 41, 62, 74, 35, 34, 61, 117, 69, 17, 189, 19, 106, 192, 188, 95, 57, 196, 61, 211, 119, 14, 188, 224, 132, 225, 61, 94, 215, 50, 190, 227, 47, 120, 189, 152, 99, 187, 58, 210, 91, 128, 190, 194, 90, 2, 61, 181, 32, 237, 61, 214, 47, 239, 61, 132, 28, 132, 61, 128, 235, 69, 189, 48, 153, 19, 62, 37, 72, 18, 62, 105, 148, 34, 189, 163, 128, 240, 189, 136, 151, 147, 190, 57, 68, 3, 188, 144, 2, 211, 61, 127, 220, 43, 61, 219, 93, 104, 60, 160, 22, 53, 62, 57, 116, 208, 190, 204, 87, 212, 189, 136, 5, 13, 189, 14, 251, 9, 62, 238, 223, 142, 61, 202, 101, 155, 189, 58, 170, 121, 189, 62, 39, 56, 62, 208, 183, 32, 190, 20, 182, 24, 186, 48, 11, 213, 189, 71, 231, 161, 59, 164, 108, 61, 62, 112, 183, 128, 61, 43, 67, 178, 189, 141, 53, 248, 189, 126, 52, 142, 190, 90, 148, 238, 61, 228, 55, 121, 188, 189, 52, 48, 62, 214, 38, 4, 62, 213, 175, 24, 62, 50, 72, 68, 189, 148, 60, 60, 60, 149, 74, 185, 61, 158, 144, 156, 60, 52, 5, 206, 189, 175, 73, 41, 190, 96, 154, 68, 62, 241, 201, 62, 61, 251, 57, 242, 189, 153, 231, 166, 189, 194, 239, 211, 61, 228, 95, 222, 61, 121, 238, 152, 189, 58, 208, 15, 61, 65, 98, 254, 188, 102, 198, 209, 189, 159, 114, 163, 189, 204, 157, 209, 189, 112, 231, 50, 190, 59, 148, 128, 189, 199, 146, 187, 189, 198, 33, 47, 61, 40, 232, 40, 190, 128, 29, 155, 189, 75, 114, 100, 189, 211, 126, 34, 190, 28, 171, 128, 60, 134, 1, 2, 190, 100, 49, 0, 189, 22, 28, 0, 188, 131, 133, 146, 61, 233, 200, 28, 61, 143, 152, 226, 189, 92, 50, 78, 190, 165, 111, 143, 189, 168, 213, 221, 61, 230, 35, 157, 60, 154, 220, 73, 188, 82, 8, 148, 61, 22, 20, 139, 61, 26, 243, 93, 61, 235, 161, 50, 190, 239, 119, 68, 186, 209, 215, 151, 61, 36, 207, 221, 189, 149, 248, 7, 62, 224, 212, 41, 190, 242, 97, 55, 189, 90, 1, 219, 189, 236, 230, 45, 190, 228, 136, 180, 189, 105, 138, 154, 189, 24, 146, 70, 189, 52, 186, 26, 62, 45, 21, 250, 188, 249, 145, 18, 190, 86, 212, 217, 189, 40, 41, 81, 60, 125, 82, 248, 188, 18, 144, 42, 58, 80, 221, 88, 61, 227, 222, 61, 190, 119, 243, 16, 190, 222, 28, 50, 61, 47, 35, 12, 62, 76, 205, 8, 190, 63, 166, 215, 189, 250, 98, 141, 189, 86, 225, 47, 61, 245, 179, 204, 61, 200, 188, 36, 62, 152, 235, 12, 190, 168, 227, 157, 188, 38, 22, 140, 189, 215, 70, 158, 61, 148, 60, 34, 189, 163, 172, 167, 190, 112, 35, 44, 190, 172, 90, 169, 61, 165, 235, 231, 190, 95, 238, 119, 189, 95, 4, 147, 61, 170, 179, 225, 61, 109, 88, 179, 61, 73, 215, 36, 190, 40, 221, 191, 62, 46, 110, 132, 62, 135, 215, 240, 188, 201, 252, 24, 188, 212, 80, 58, 190, 83, 249, 61, 190, 74, 80, 181, 61, 59, 212, 56, 190, 43, 196, 168, 61, 231, 125, 61, 188, 36, 63, 105, 189, 64, 4, 109, 62, 252, 19, 50, 60, 81, 87, 172, 60, 140, 212, 125, 59, 104, 15, 149, 190, 89, 131, 204, 189, 31, 151, 222, 189, 178, 96, 196, 186, 29, 181, 135, 189, 226, 245, 250, 61, 30, 108, 4, 191, 36, 52, 24, 62, 170, 63, 32, 190, 27, 156, 242, 188, 245, 243, 205, 189, 194, 121, 114, 62, 34, 99, 111, 189, 56, 165, 22, 189, 203, 208, 26, 62, 0, 222, 103, 189, 132, 42, 174, 61, 119, 247, 35, 190, 84, 157, 185, 61, 74, 107, 246, 61, 80, 185, 190, 190, 185, 164, 156, 61, 112, 56, 188, 189, 28, 221, 57, 62, 47, 222, 2, 62, 140, 14, 120, 62, 104, 132, 70, 190, 107, 199, 23, 191, 41, 79, 81, 62, 160, 149, 211, 190, 242, 22, 18, 61, 183, 174, 188, 189, 247, 100, 146, 62, 187, 234, 45, 62, 131, 75, 216, 190, 207, 165, 239, 189, 31, 236, 28, 62, 223, 180, 134, 61, 12, 29, 230, 62, 251, 89, 78, 190, 209, 122, 78, 191, 119, 7, 25, 191, 113, 177, 139, 62, 113, 155, 136, 189, 244, 16, 41, 189, 56, 44, 125, 58, 160, 68, 59, 62, 237, 243, 8, 62, 223, 61, 37, 190, 1, 158, 9, 62, 147, 154, 97, 61, 244, 158, 13, 189, 160, 201, 30, 190, 12, 200, 164, 190, 43, 232, 201, 189, 77, 222, 219, 61, 251, 57, 108, 61, 101, 150, 154, 62, 90, 110, 240, 61, 55, 188, 55, 62, 10, 114, 45, 62, 26, 123, 173, 62, 217, 13, 203, 189, 151, 197, 33, 188, 99, 93, 195, 190, 39, 53, 161, 189, 9, 155, 189, 60, 195, 125, 91, 61, 133, 52, 20, 61, 185, 71, 32, 62, 238, 153, 247, 190, 190, 192, 134, 189, 244, 46, 111, 61, 87, 228, 63, 189, 129, 60, 23, 190, 44, 211, 104, 189, 165, 54, 238, 188, 39, 50, 58, 190, 84, 8, 249, 188, 35, 141, 250, 61, 53, 31, 71, 189, 134, 204, 68, 187, 75, 135, 219, 61, 191, 229, 151, 189, 113, 56, 88, 189, 17, 163, 1, 189, 145, 227, 8, 190, 97, 71, 7, 190, 224, 56, 152, 58, 14, 69, 16, 62, 206, 222, 185, 188, 243, 29, 165, 61, 137, 66, 219, 189, 130, 26, 35, 190, 137, 56, 241, 188, 92, 39, 37, 62, 140, 25, 109, 189, 53, 22, 187, 61, 64, 98, 173, 61, 95, 243, 249, 61, 222, 103, 89, 189, 201, 3, 94, 189, 135, 72, 197, 61, 244, 230, 61, 190, 77, 233, 57, 188, 222, 46, 28, 188, 157, 7, 89, 190, 164, 105, 68, 62, 77, 137, 182, 190, 66, 16, 103, 191, 25, 175, 33, 189, 175, 33, 105, 62, 76, 48, 138, 190, 82, 68, 67, 190, 73, 124, 37, 191, 65, 179, 19, 190, 80, 10, 106, 62, 42, 65, 54, 188, 200, 110, 111, 62, 211, 144, 240, 190, 199, 65, 236, 189, 16, 121, 147, 190, 135, 2, 13, 62, 40, 98, 213, 186, 154, 185, 72, 190, 180, 31, 86, 62, 217, 126, 39, 190, 23, 95, 232, 189, 128, 252, 234, 189, 63, 223, 54, 62, 192, 163, 99, 62, 140, 156, 132, 191, 50, 243, 165, 61, 70, 68, 207, 190, 245, 225, 222, 189, 151, 6, 10, 62, 159, 111, 112, 62, 98, 246, 132, 62, 31, 253, 18, 61, 51, 20, 139, 62, 194, 139, 168, 190, 149, 106, 137, 61, 239, 230, 29, 190, 203, 195, 241, 61, 132, 24, 163, 190, 147, 116, 11, 189, 123, 221, 37, 189, 140, 130, 172, 62, 72, 211, 65, 62, 25, 192, 175, 61, 68, 170, 17, 62, 94, 91, 194, 61, 37, 166, 82, 61, 238, 122, 142, 189, 127, 239, 119, 61, 118, 215, 166, 188, 17, 191, 210, 190, 251, 240, 117, 190, 213, 226, 225, 61, 9, 218, 137, 189, 107, 129, 204, 62, 150, 247, 36, 62, 181, 145, 4, 190, 110, 120, 40, 190, 76, 84, 16, 62, 166, 94, 116, 189, 71, 112, 193, 62, 61, 241, 227, 187, 247, 183, 113, 189, 241, 103, 245, 189, 105, 96, 194, 189, 67, 101, 149, 61, 121, 37, 209, 189, 84, 27, 8, 62, 237, 30, 48, 190, 135, 26, 9, 189, 255, 77, 143, 189, 52, 158, 240, 189, 191, 230, 60, 189, 146, 32, 255, 189, 9, 62, 251, 60, 229, 15, 188, 188, 68, 168, 221, 189, 127, 172, 1, 188, 37, 126, 175, 189, 184, 234, 41, 190, 83, 0, 254, 188, 46, 27, 160, 60, 249, 73, 233, 60, 159, 238, 178, 189, 156, 189, 218, 189, 187, 147, 233, 189, 95, 114, 217, 61, 233, 179, 209, 61, 193, 214, 38, 190, 201, 65, 143, 189, 4, 163, 162, 189, 111, 17, 177, 188, 204, 224, 49, 62, 179, 172, 235, 189, 51, 133, 239, 61, 172, 84, 148, 62, 90, 183, 193, 189, 92, 56, 251, 61, 101, 246, 17, 191, 188, 141, 165, 191, 118, 65, 184, 189, 220, 127, 231, 189, 84, 50, 11, 191, 34, 38, 197, 190, 67, 60, 160, 191, 110, 97, 166, 189, 56, 45, 61, 62, 224, 172, 238, 61, 58, 68, 200, 189, 222, 75, 54, 191, 54, 51, 253, 189, 64, 132, 134, 190, 215, 190, 144, 62, 208, 166, 153, 62, 243, 130, 227, 190, 74, 190, 144, 62, 147, 31, 75, 190, 254, 86, 152, 189, 75, 88, 15, 61, 34, 214, 53, 190, 251, 78, 168, 61, 90, 106, 206, 191, 37, 98, 61, 62, 218, 116, 245, 190, 153, 124, 211, 61, 186, 231, 122, 62, 244, 208, 177, 190, 194, 164, 212, 60, 98, 26, 85, 190, 152, 11, 106, 59, 169, 140, 21, 190, 215, 107, 1, 61, 241, 16, 143, 189, 15, 168, 218, 189, 180, 37, 171, 190, 201, 8, 133, 60, 44, 62, 219, 188, 121, 113, 3, 188, 102, 19, 135, 190, 72, 102, 46, 189, 239, 67, 154, 61, 140, 77, 18, 62, 192, 239, 14, 62, 147, 84, 17, 62, 82, 255, 33, 190, 26, 90, 175, 190, 176, 224, 2, 61, 234, 29, 167, 188, 215, 48, 62, 62, 231, 232, 114, 61, 22, 253, 160, 189, 67, 146, 227, 189, 233, 65, 200, 60, 174, 183, 134, 61, 27, 123, 122, 62, 31, 155, 34, 62, 5, 112, 131, 62, 111, 61, 33, 190, 29, 157, 210, 191, 91, 122, 100, 191, 103, 237, 64, 62, 12, 19, 28, 191, 91, 12, 210, 188, 70, 113, 27, 62, 93, 61, 114, 187, 2, 186, 59, 61, 204, 73, 32, 62, 195, 14, 153, 62, 25, 189, 197, 61, 23, 228, 189, 187, 133, 107, 101, 190, 145, 118, 109, 191, 38, 133, 72, 190, 247, 142, 110, 62, 126, 228, 253, 60, 164, 68, 182, 60, 199, 154, 59, 62, 248, 60, 254, 189, 1, 143, 122, 190, 195, 194, 97, 62, 139, 184, 85, 62, 172, 222, 168, 61, 48, 183, 8, 191, 194, 220, 140, 190, 68, 128, 91, 60, 23, 243, 105, 189, 10, 104, 174, 61, 175, 13, 160, 59, 211, 88, 143, 191, 61, 160, 180, 62, 206, 175, 199, 190, 13, 226, 161, 187, 134, 98, 182, 190, 29, 109, 181, 61, 30, 64, 65, 190, 49, 27, 50, 62, 130, 14, 15, 190, 180, 153, 74, 190, 198, 69, 231, 190, 168, 23, 25, 190, 220, 238, 192, 189, 250, 134, 132, 62, 241, 109, 160, 190, 108, 40, 81, 190, 253, 9, 84, 190, 27, 248, 2, 190, 68, 159, 197, 61, 207, 210, 35, 189, 1, 234, 169, 190, 43, 60, 78, 190, 198, 43, 29, 189, 153, 13, 201, 190, 146, 92, 100, 62, 17, 190, 182, 189, 36, 3, 199, 62, 24, 74, 208, 61, 245, 62, 249, 189, 115, 0, 207, 60, 44, 136, 137, 62, 104, 101, 44, 62, 89, 8, 185, 62, 18, 19, 89, 190, 37, 233, 7, 190, 117, 122, 21, 190, 220, 164, 192, 189, 231, 227, 6, 62, 161, 76, 13, 62, 23, 99, 132, 188, 28, 16, 130, 61, 62, 147, 179, 61, 246, 207, 93, 189, 64, 66, 36, 60, 72, 208, 8, 190, 54, 180, 207, 189, 244, 88, 220, 189, 102, 193, 9, 62, 126, 50, 205, 59, 109, 101, 143, 60, 143, 13, 250, 189, 150, 29, 32, 190, 69, 89, 232, 188, 247, 215, 214, 189, 125, 78, 66, 61, 203, 140, 194, 60, 233, 4, 65, 190, 253, 230, 36, 62, 193, 246, 213, 61, 46, 142, 6, 62, 141, 90, 45, 61, 62, 238, 132, 189, 209, 235, 46, 190, 169, 49, 29, 190, 23, 37, 35, 190, 71, 58, 200, 61, 201, 177, 218, 191, 199, 228, 126, 191, 188, 170, 81, 189, 189, 41, 20, 61, 162, 171, 156, 188, 48, 187, 36, 190, 163, 34, 135, 62, 28, 128, 252, 189, 120, 164, 19, 62, 61, 30, 42, 189, 160, 217, 134, 189, 186, 212, 238, 61, 5, 214, 169, 189, 94, 135, 166, 191, 255, 196, 231, 190, 73, 36, 23, 190, 232, 43, 245, 61, 226, 73, 141, 190, 251, 48, 225, 61, 179, 108, 148, 61, 128, 32, 83, 62, 16, 199, 146, 62, 50, 82, 81, 62, 117, 157, 23, 190, 131, 1, 31, 191, 36, 221, 10, 190, 233, 116, 183, 62, 92, 98, 35, 62, 56, 123, 10, 62, 185, 239, 218, 189, 182, 64, 152, 191, 81, 225, 49, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {22, 168, 83, 189, 225, 21, 133, 62, 199, 212, 142, 188, 212, 115, 251, 61, 217, 195, 229, 60, 248, 135, 144, 62, 34, 255, 34, 189, 18, 31, 44, 190, 211, 107, 105, 190, 133, 1, 143, 189, 175, 98, 235, 61, 209, 116, 23, 190, 238, 218, 3, 189, 229, 185, 48, 62, 177, 147, 17, 61, 243, 1, 91, 61, 191, 103, 129, 62, 227, 239, 6, 62, 53, 33, 162, 61, 45, 234, 30, 62, 74, 197, 75, 61, 84, 148, 24, 190, 27, 59, 171, 61, 189, 122, 86, 189, 36, 145, 130, 61, 109, 8, 161, 61, 211, 184, 101, 61, 156, 152, 225, 61, 246, 123, 152, 62, 96, 161, 167, 61, 42, 144, 9, 189, 207, 143, 233, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 100, 0, 190, 137, 191, 49, 62, 95, 107, 241, 61, 226, 107, 138, 190, 5, 91, 27, 189, 110, 63, 55, 62, 31, 111, 192, 61, 126, 35, 6, 62, 77, 96, 65, 61, 118, 26, 6, 190, 137, 43, 121, 62, 92, 207, 136, 61, 201, 254, 231, 61, 60, 36, 122, 189, 36, 12, 210, 190, 17, 198, 36, 190, 253, 108, 150, 189, 179, 47, 130, 188, 21, 102, 186, 189, 247, 119, 166, 190, 197, 198, 159, 62, 10, 146, 209, 190, 31, 126, 163, 189, 74, 165, 42, 63, 182, 13, 140, 62, 233, 216, 142, 59, 93, 38, 143, 63, 4, 65, 253, 61, 95, 118, 57, 191, 217, 168, 181, 62, 24, 223, 185, 188, 15, 94, 74, 191, 41, 235, 152, 60, 12, 183, 13, 58, 114, 0, 7, 190, 50, 179, 16, 190, 122, 140, 86, 190, 90, 3, 212, 189, 128, 26, 225, 187, 185, 197, 108, 188, 60, 128, 222, 59, 222, 174, 223, 61, 89, 111, 73, 61, 51, 193, 96, 61, 80, 200, 183, 189, 171, 88, 158, 190, 155, 148, 167, 189, 213, 210, 169, 188, 69, 213, 91, 190, 95, 158, 180, 61, 104, 165, 37, 62, 150, 5, 244, 60, 118, 165, 235, 61, 103, 100, 213, 61, 193, 22, 165, 61, 108, 46, 80, 62, 69, 139, 22, 59, 108, 195, 199, 61, 26, 229, 229, 189, 74, 131, 77, 190, 255, 95, 242, 187, 104, 39, 20, 61, 156, 90, 8, 190, 104, 118, 154, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 2, 211, 61, 92, 163, 46, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {230, 223, 251, 189, 52, 63, 32, 63, 135, 10, 185, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {207, 20, 211, 191, 30, 227, 66, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0022/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}