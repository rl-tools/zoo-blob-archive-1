// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {45, 117, 41, 191, 175, 160, 238, 190, 29, 132, 97, 62, 6, 23, 225, 190, 185, 58, 83, 191, 102, 81, 117, 62, 184, 106, 100, 62, 219, 167, 12, 63, 104, 142, 0, 63, 85, 106, 153, 62, 242, 38, 13, 191, 166, 61, 241, 190, 194, 18, 134, 190, 17, 186, 29, 63, 220, 146, 83, 189, 120, 144, 97, 62, 237, 214, 95, 62, 254, 137, 25, 190, 22, 20, 16, 191, 130, 69, 208, 190, 50, 12, 246, 190, 37, 148, 149, 190, 140, 254, 71, 63, 153, 224, 207, 188, 105, 187, 20, 191, 6, 226, 38, 63, 24, 176, 26, 61, 225, 101, 160, 189, 15, 201, 17, 63, 153, 106, 240, 189, 10, 98, 29, 62, 14, 15, 224, 62, 180, 44, 83, 190, 183, 68, 162, 62, 60, 88, 79, 190, 215, 202, 181, 189, 34, 159, 95, 191, 220, 183, 20, 62, 111, 120, 2, 63, 211, 147, 185, 190, 195, 155, 213, 190, 5, 70, 241, 62, 4, 1, 39, 62, 109, 82, 12, 63, 127, 52, 24, 190, 58, 202, 75, 62, 170, 143, 249, 62, 187, 103, 133, 190, 205, 180, 3, 190, 232, 206, 87, 191, 6, 178, 147, 190, 134, 214, 223, 62, 149, 171, 242, 61, 87, 181, 212, 62, 71, 114, 69, 191, 235, 151, 28, 190, 242, 214, 22, 62, 77, 44, 15, 191, 151, 206, 169, 62, 140, 9, 63, 62, 101, 241, 141, 62, 24, 107, 43, 189, 154, 248, 6, 63, 210, 192, 93, 190, 152, 119, 60, 63, 74, 232, 44, 62, 185, 68, 170, 188, 65, 45, 220, 190, 91, 216, 234, 190, 23, 126, 180, 62, 85, 27, 226, 61, 191, 166, 72, 189, 92, 208, 40, 189, 115, 59, 28, 191, 94, 223, 234, 61, 99, 172, 210, 62, 22, 147, 194, 59, 219, 128, 254, 190, 211, 88, 34, 191, 215, 188, 13, 62, 66, 39, 31, 62, 122, 219, 136, 190, 64, 7, 66, 63, 198, 151, 199, 190, 68, 239, 107, 188, 64, 27, 234, 190, 48, 70, 146, 189, 77, 210, 27, 63, 222, 68, 248, 187, 63, 148, 34, 63, 140, 15, 135, 190, 189, 221, 95, 191, 200, 183, 51, 62, 144, 94, 133, 190, 160, 141, 107, 62, 36, 41, 250, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {133, 231, 251, 190, 147, 81, 76, 190, 133, 9, 218, 61, 37, 158, 150, 190, 254, 155, 242, 189, 185, 188, 156, 62, 210, 179, 29, 59, 11, 126, 212, 61, 26, 196, 217, 190, 19, 246, 7, 62, 59, 32, 147, 62, 102, 93, 55, 63, 41, 77, 144, 189, 6, 253, 115, 189, 219, 225, 142, 190, 59, 23, 219, 62, 236, 237, 221, 62, 91, 26, 149, 62, 50, 178, 25, 189, 251, 207, 116, 62, 40, 32, 21, 191, 128, 76, 34, 63, 56, 34, 50, 63, 231, 60, 252, 190, 81, 145, 233, 61, 146, 175, 133, 190, 125, 175, 166, 61, 247, 1, 133, 189, 201, 244, 225, 62, 161, 35, 86, 62, 120, 203, 130, 189, 27, 230, 129, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 22, 106, 190, 38, 48, 214, 189, 78, 10, 98, 62, 121, 43, 97, 190, 246, 79, 68, 62, 181, 250, 56, 62, 53, 86, 13, 62, 117, 143, 21, 62, 175, 161, 104, 61, 78, 50, 237, 61, 33, 197, 79, 61, 64, 147, 65, 61, 111, 142, 12, 62, 63, 181, 98, 61, 74, 180, 182, 189, 236, 113, 19, 62, 82, 241, 153, 189, 230, 130, 44, 189, 148, 229, 40, 62, 22, 249, 27, 62, 172, 122, 28, 189, 237, 106, 51, 62, 123, 32, 23, 190, 16, 89, 16, 62, 138, 247, 105, 189, 29, 241, 70, 190, 31, 217, 198, 56, 74, 135, 239, 61, 97, 96, 198, 61, 206, 123, 197, 188, 130, 89, 17, 190, 171, 220, 39, 62, 219, 90, 151, 62, 229, 38, 39, 62, 72, 0, 157, 59, 123, 88, 23, 62, 244, 117, 25, 189, 39, 99, 223, 189, 179, 205, 162, 61, 229, 181, 24, 190, 34, 228, 170, 190, 223, 13, 40, 190, 103, 70, 92, 190, 224, 249, 13, 62, 80, 222, 162, 61, 198, 232, 96, 186, 147, 9, 238, 61, 59, 110, 111, 190, 217, 27, 13, 190, 89, 48, 50, 189, 64, 15, 33, 190, 231, 214, 185, 189, 248, 85, 236, 189, 185, 22, 16, 190, 58, 73, 52, 62, 236, 44, 35, 62, 217, 174, 106, 62, 224, 181, 60, 62, 44, 77, 140, 61, 75, 142, 12, 61, 167, 128, 95, 62, 24, 37, 148, 188, 210, 241, 197, 62, 254, 87, 137, 61, 15, 188, 140, 60, 86, 63, 156, 61, 17, 21, 199, 60, 236, 100, 90, 190, 128, 174, 27, 62, 35, 127, 70, 62, 46, 137, 41, 190, 237, 163, 133, 61, 225, 74, 81, 62, 185, 238, 161, 61, 165, 132, 6, 62, 198, 192, 29, 189, 218, 112, 242, 61, 70, 108, 80, 189, 149, 47, 177, 60, 238, 103, 16, 189, 10, 188, 23, 190, 166, 252, 4, 190, 100, 50, 155, 61, 187, 119, 30, 62, 94, 76, 49, 189, 247, 39, 249, 188, 88, 223, 165, 189, 143, 125, 31, 190, 125, 53, 183, 189, 217, 77, 234, 188, 174, 225, 37, 190, 237, 207, 243, 61, 129, 90, 61, 189, 121, 243, 231, 188, 115, 38, 5, 190, 22, 254, 160, 189, 204, 218, 129, 188, 105, 193, 75, 190, 107, 66, 76, 62, 165, 255, 124, 190, 73, 166, 146, 61, 109, 75, 43, 186, 168, 92, 134, 189, 180, 179, 71, 62, 237, 102, 133, 62, 19, 41, 165, 61, 155, 252, 106, 61, 82, 205, 18, 62, 19, 223, 153, 189, 241, 220, 6, 190, 4, 146, 222, 61, 92, 91, 45, 62, 112, 253, 11, 190, 239, 143, 61, 62, 178, 236, 37, 62, 191, 205, 30, 61, 128, 234, 172, 60, 71, 190, 134, 188, 12, 129, 71, 190, 51, 179, 45, 190, 109, 230, 103, 60, 56, 200, 249, 60, 47, 121, 52, 189, 234, 244, 253, 61, 52, 40, 110, 189, 168, 254, 224, 61, 59, 190, 111, 59, 139, 180, 180, 188, 129, 70, 88, 190, 169, 201, 182, 189, 236, 144, 48, 62, 233, 159, 127, 189, 5, 108, 35, 60, 89, 81, 69, 62, 238, 205, 47, 62, 204, 127, 23, 62, 122, 45, 86, 62, 40, 139, 55, 62, 2, 152, 28, 62, 161, 0, 42, 62, 75, 79, 5, 190, 175, 29, 43, 62, 157, 138, 241, 188, 109, 34, 43, 62, 177, 97, 37, 190, 16, 196, 32, 62, 71, 23, 93, 187, 150, 82, 248, 188, 192, 131, 150, 189, 246, 103, 3, 189, 197, 217, 54, 61, 11, 0, 36, 61, 132, 213, 28, 62, 220, 113, 43, 190, 73, 154, 3, 190, 121, 36, 55, 62, 138, 85, 55, 190, 108, 69, 165, 189, 73, 145, 188, 61, 14, 83, 165, 61, 109, 189, 24, 62, 180, 101, 55, 62, 236, 156, 181, 189, 221, 55, 56, 61, 52, 203, 131, 190, 151, 59, 103, 189, 151, 240, 56, 190, 26, 230, 17, 190, 151, 167, 217, 189, 156, 74, 134, 189, 11, 47, 221, 189, 245, 10, 39, 62, 219, 95, 223, 188, 67, 108, 198, 61, 245, 205, 242, 189, 71, 73, 114, 60, 125, 151, 65, 61, 98, 148, 69, 187, 210, 235, 41, 62, 194, 174, 94, 60, 0, 127, 134, 189, 248, 80, 61, 190, 149, 37, 128, 189, 206, 112, 158, 61, 229, 81, 54, 62, 66, 208, 5, 62, 4, 227, 224, 61, 126, 204, 191, 61, 32, 52, 135, 62, 201, 77, 190, 59, 121, 15, 55, 62, 205, 141, 237, 189, 105, 86, 249, 61, 69, 4, 121, 62, 9, 133, 207, 61, 60, 87, 88, 62, 146, 15, 28, 190, 93, 82, 40, 190, 133, 2, 174, 189, 220, 214, 39, 60, 49, 65, 16, 188, 17, 155, 17, 190, 132, 93, 79, 61, 49, 28, 133, 61, 191, 75, 248, 61, 1, 206, 58, 60, 127, 229, 4, 61, 40, 151, 25, 61, 40, 107, 8, 62, 18, 99, 82, 60, 18, 9, 156, 61, 245, 18, 38, 189, 182, 82, 31, 189, 3, 56, 36, 190, 223, 178, 74, 61, 101, 196, 14, 62, 10, 72, 169, 61, 177, 61, 91, 189, 66, 187, 231, 61, 130, 255, 224, 60, 254, 254, 177, 61, 217, 150, 124, 189, 211, 226, 216, 62, 202, 128, 173, 189, 106, 198, 26, 190, 69, 28, 98, 189, 221, 223, 139, 189, 31, 232, 208, 61, 230, 21, 177, 60, 212, 3, 13, 190, 20, 49, 5, 190, 153, 33, 136, 189, 74, 58, 125, 61, 13, 66, 0, 189, 124, 117, 39, 62, 82, 54, 205, 187, 224, 100, 212, 61, 208, 160, 55, 59, 95, 206, 142, 61, 84, 227, 173, 189, 32, 75, 159, 189, 226, 144, 37, 190, 51, 16, 23, 189, 49, 138, 152, 189, 28, 8, 221, 61, 113, 203, 52, 190, 200, 77, 206, 188, 73, 97, 105, 189, 175, 64, 30, 62, 238, 152, 17, 190, 12, 133, 15, 189, 86, 205, 244, 61, 39, 165, 181, 61, 236, 202, 199, 61, 217, 211, 49, 190, 247, 82, 236, 189, 237, 188, 15, 190, 59, 116, 116, 189, 185, 251, 6, 62, 250, 227, 41, 60, 221, 23, 126, 188, 199, 74, 15, 62, 206, 110, 34, 62, 131, 49, 219, 61, 138, 56, 1, 189, 240, 226, 31, 190, 121, 131, 134, 189, 152, 210, 52, 190, 23, 149, 0, 189, 103, 240, 143, 61, 82, 45, 156, 60, 56, 146, 139, 61, 163, 154, 13, 190, 199, 244, 5, 190, 249, 43, 99, 189, 165, 138, 27, 62, 72, 250, 229, 61, 169, 29, 47, 190, 171, 192, 188, 189, 104, 113, 52, 61, 38, 36, 105, 187, 22, 7, 71, 61, 113, 137, 203, 61, 121, 232, 244, 189, 241, 143, 158, 61, 106, 45, 189, 188, 131, 58, 164, 61, 255, 184, 215, 189, 62, 102, 63, 190, 240, 15, 87, 190, 36, 202, 32, 62, 80, 153, 64, 189, 214, 75, 249, 61, 4, 196, 130, 61, 142, 182, 33, 189, 204, 188, 3, 62, 197, 32, 178, 188, 100, 229, 2, 190, 121, 45, 181, 61, 208, 135, 178, 61, 203, 74, 91, 60, 95, 39, 40, 190, 37, 28, 200, 189, 225, 8, 91, 62, 78, 99, 133, 61, 192, 31, 173, 189, 176, 222, 159, 61, 12, 223, 12, 62, 116, 111, 244, 187, 166, 215, 227, 185, 43, 43, 249, 189, 48, 206, 7, 190, 220, 158, 178, 61, 174, 79, 7, 62, 31, 246, 127, 61, 39, 133, 249, 61, 237, 214, 185, 189, 9, 193, 191, 189, 118, 15, 80, 190, 107, 129, 41, 62, 0, 6, 122, 62, 4, 192, 52, 62, 20, 140, 117, 188, 76, 237, 251, 61, 119, 10, 35, 190, 166, 149, 219, 61, 68, 1, 151, 189, 80, 206, 155, 190, 147, 154, 116, 190, 123, 96, 164, 189, 112, 171, 19, 60, 116, 145, 156, 61, 27, 210, 96, 61, 211, 183, 203, 189, 33, 25, 28, 190, 170, 136, 121, 188, 148, 117, 52, 62, 60, 27, 162, 61, 3, 3, 3, 62, 140, 208, 217, 186, 36, 214, 102, 190, 206, 254, 34, 186, 195, 34, 54, 189, 61, 128, 131, 61, 95, 71, 149, 62, 101, 143, 221, 58, 252, 167, 93, 61, 240, 237, 199, 189, 230, 132, 54, 62, 106, 233, 39, 190, 200, 147, 165, 62, 52, 47, 117, 189, 217, 202, 157, 188, 43, 97, 80, 61, 121, 15, 55, 189, 158, 158, 243, 61, 63, 136, 142, 189, 216, 105, 17, 190, 222, 61, 31, 62, 138, 141, 49, 190, 77, 58, 230, 189, 47, 53, 125, 60, 207, 162, 238, 189, 133, 124, 68, 189, 229, 106, 57, 190, 198, 15, 204, 61, 101, 154, 11, 190, 240, 152, 124, 61, 107, 96, 18, 190, 172, 122, 223, 189, 19, 132, 245, 61, 1, 149, 214, 61, 73, 225, 14, 190, 72, 50, 180, 189, 175, 216, 44, 190, 70, 199, 252, 188, 31, 195, 42, 61, 152, 58, 21, 61, 70, 13, 35, 189, 200, 230, 191, 189, 16, 99, 250, 189, 154, 114, 19, 62, 122, 115, 165, 61, 35, 165, 243, 187, 208, 244, 254, 189, 76, 51, 167, 61, 81, 22, 161, 188, 34, 175, 165, 189, 183, 237, 93, 190, 243, 32, 2, 62, 120, 229, 62, 62, 76, 75, 91, 189, 86, 187, 54, 60, 10, 144, 3, 190, 249, 103, 22, 62, 120, 211, 207, 61, 39, 249, 135, 61, 66, 207, 43, 190, 133, 244, 132, 61, 229, 91, 18, 62, 61, 98, 178, 60, 187, 53, 108, 189, 215, 214, 167, 189, 172, 192, 25, 189, 194, 88, 139, 188, 160, 58, 66, 190, 95, 150, 39, 189, 141, 181, 33, 190, 123, 28, 150, 61, 130, 220, 156, 189, 101, 0, 101, 190, 9, 196, 70, 62, 226, 235, 147, 61, 23, 76, 22, 62, 73, 28, 253, 61, 88, 243, 206, 189, 36, 79, 9, 190, 82, 163, 15, 61, 16, 166, 33, 62, 69, 196, 195, 59, 57, 193, 1, 62, 190, 105, 251, 61, 24, 117, 68, 60, 207, 240, 68, 62, 108, 124, 59, 60, 146, 202, 60, 189, 57, 28, 103, 60, 229, 149, 73, 62, 220, 74, 194, 60, 7, 17, 143, 188, 138, 48, 55, 190, 117, 199, 41, 62, 211, 221, 36, 62, 226, 252, 171, 61, 175, 160, 3, 189, 243, 241, 184, 189, 75, 21, 224, 189, 44, 109, 30, 190, 139, 40, 208, 189, 52, 158, 153, 189, 193, 74, 36, 62, 196, 129, 189, 189, 90, 149, 234, 189, 218, 96, 120, 189, 159, 59, 162, 188, 57, 171, 18, 62, 5, 106, 129, 62, 107, 63, 81, 62, 253, 157, 13, 62, 231, 169, 140, 60, 135, 254, 77, 62, 160, 94, 43, 61, 128, 87, 57, 189, 95, 127, 34, 62, 119, 32, 144, 189, 2, 19, 4, 62, 206, 33, 158, 61, 17, 247, 85, 61, 150, 150, 155, 62, 181, 48, 177, 187, 203, 24, 185, 61, 236, 4, 196, 186, 47, 54, 72, 62, 36, 139, 39, 62, 105, 212, 215, 190, 71, 68, 41, 62, 80, 204, 89, 190, 16, 24, 255, 189, 188, 29, 200, 60, 118, 77, 201, 61, 198, 14, 147, 190, 222, 217, 65, 189, 233, 61, 7, 189, 119, 229, 147, 61, 163, 83, 63, 189, 173, 185, 26, 190, 189, 73, 114, 190, 253, 235, 70, 62, 25, 156, 58, 189, 115, 248, 120, 189, 202, 171, 135, 190, 62, 133, 161, 188, 49, 83, 142, 188, 128, 60, 88, 189, 47, 45, 113, 62, 68, 205, 42, 61, 173, 81, 80, 189, 205, 37, 39, 61, 116, 123, 110, 62, 179, 232, 77, 60, 196, 113, 253, 61, 201, 104, 24, 190, 50, 193, 176, 59, 249, 142, 13, 62, 203, 160, 24, 190, 200, 6, 28, 61, 30, 163, 228, 61, 13, 245, 233, 61, 69, 47, 165, 61, 167, 228, 97, 59, 202, 30, 49, 62, 212, 51, 45, 62, 15, 81, 56, 189, 165, 166, 235, 189, 90, 47, 221, 189, 202, 51, 9, 61, 30, 43, 23, 62, 80, 1, 139, 61, 182, 124, 74, 61, 196, 79, 66, 62, 208, 226, 102, 190, 254, 192, 127, 189, 176, 109, 34, 189, 105, 84, 229, 61, 137, 180, 217, 61, 206, 116, 47, 61, 3, 4, 211, 60, 164, 53, 79, 62, 202, 54, 2, 190, 98, 76, 55, 61, 248, 230, 210, 60, 101, 229, 6, 61, 170, 219, 89, 62, 235, 209, 53, 60, 171, 235, 213, 189, 92, 145, 209, 189, 250, 158, 52, 190, 55, 208, 11, 62, 196, 119, 205, 187, 12, 83, 54, 62, 181, 125, 12, 61, 141, 216, 8, 62, 247, 106, 2, 61, 92, 179, 40, 188, 146, 247, 204, 61, 92, 10, 190, 60, 58, 5, 219, 189, 78, 22, 172, 189, 3, 41, 17, 62, 124, 162, 226, 61, 82, 120, 42, 190, 186, 64, 140, 189, 143, 11, 186, 61, 207, 53, 149, 61, 121, 238, 152, 189, 58, 208, 15, 61, 65, 98, 254, 188, 102, 198, 209, 189, 159, 114, 163, 189, 204, 157, 209, 189, 112, 231, 50, 190, 59, 148, 128, 189, 199, 146, 187, 189, 198, 33, 47, 61, 40, 232, 40, 190, 128, 29, 155, 189, 75, 114, 100, 189, 211, 126, 34, 190, 28, 171, 128, 60, 134, 1, 2, 190, 100, 49, 0, 189, 22, 28, 0, 188, 131, 133, 146, 61, 233, 200, 28, 61, 143, 152, 226, 189, 92, 50, 78, 190, 165, 111, 143, 189, 168, 213, 221, 61, 230, 35, 157, 60, 154, 220, 73, 188, 82, 8, 148, 61, 22, 20, 139, 61, 26, 243, 93, 61, 235, 161, 50, 190, 239, 119, 68, 186, 209, 215, 151, 61, 36, 207, 221, 189, 149, 248, 7, 62, 224, 212, 41, 190, 242, 97, 55, 189, 90, 1, 219, 189, 236, 230, 45, 190, 228, 136, 180, 189, 105, 138, 154, 189, 24, 146, 70, 189, 52, 186, 26, 62, 45, 21, 250, 188, 249, 145, 18, 190, 86, 212, 217, 189, 40, 41, 81, 60, 125, 82, 248, 188, 18, 144, 42, 58, 80, 221, 88, 61, 227, 222, 61, 190, 119, 243, 16, 190, 222, 28, 50, 61, 47, 35, 12, 62, 76, 205, 8, 190, 63, 166, 215, 189, 250, 98, 141, 189, 86, 225, 47, 61, 245, 179, 204, 61, 200, 188, 36, 62, 152, 235, 12, 190, 168, 227, 157, 188, 38, 22, 140, 189, 215, 70, 158, 61, 148, 60, 34, 189, 188, 42, 236, 189, 226, 178, 189, 187, 181, 169, 135, 61, 3, 156, 167, 190, 64, 12, 63, 186, 122, 8, 46, 61, 216, 117, 174, 61, 132, 149, 239, 61, 61, 66, 209, 188, 108, 11, 178, 62, 235, 78, 119, 62, 106, 179, 18, 189, 215, 48, 132, 61, 241, 204, 222, 188, 85, 180, 218, 189, 208, 129, 109, 61, 73, 83, 38, 190, 113, 125, 145, 61, 221, 206, 198, 60, 170, 34, 198, 59, 19, 49, 76, 62, 157, 37, 18, 61, 173, 0, 22, 187, 190, 109, 150, 59, 78, 209, 236, 189, 235, 116, 88, 189, 157, 236, 101, 189, 183, 119, 149, 59, 67, 172, 143, 188, 53, 100, 240, 61, 53, 233, 168, 190, 31, 110, 74, 62, 89, 191, 162, 189, 64, 207, 157, 186, 104, 229, 10, 190, 85, 174, 52, 62, 116, 217, 254, 187, 161, 38, 183, 188, 62, 195, 18, 62, 251, 87, 175, 59, 159, 177, 201, 61, 234, 79, 235, 189, 69, 249, 242, 61, 191, 29, 194, 61, 18, 14, 228, 190, 41, 82, 110, 61, 75, 229, 200, 188, 157, 208, 67, 62, 21, 52, 185, 61, 68, 192, 118, 62, 19, 126, 41, 190, 24, 30, 12, 191, 221, 12, 209, 60, 84, 198, 118, 190, 116, 109, 113, 60, 239, 65, 195, 189, 59, 208, 80, 62, 234, 97, 33, 62, 228, 123, 219, 190, 52, 186, 200, 189, 178, 15, 255, 61, 161, 159, 188, 60, 198, 125, 236, 62, 78, 52, 9, 190, 192, 192, 203, 190, 156, 210, 185, 190, 26, 186, 206, 61, 136, 226, 17, 188, 121, 226, 199, 59, 122, 29, 144, 60, 102, 72, 36, 62, 226, 13, 55, 62, 72, 132, 43, 189, 54, 233, 26, 62, 21, 35, 151, 61, 60, 195, 200, 60, 54, 138, 15, 190, 166, 245, 67, 190, 58, 38, 217, 59, 194, 29, 1, 62, 213, 10, 171, 61, 73, 220, 3, 62, 196, 183, 221, 61, 92, 56, 71, 62, 224, 102, 88, 189, 28, 240, 164, 62, 209, 100, 163, 189, 50, 8, 20, 188, 52, 140, 125, 189, 252, 153, 127, 189, 4, 230, 6, 61, 108, 42, 101, 61, 106, 42, 189, 61, 25, 115, 5, 189, 254, 2, 90, 190, 134, 128, 37, 189, 244, 46, 111, 61, 87, 228, 63, 189, 129, 60, 23, 190, 44, 211, 104, 189, 165, 54, 238, 188, 39, 50, 58, 190, 84, 8, 249, 188, 35, 141, 250, 61, 53, 31, 71, 189, 134, 204, 68, 187, 75, 135, 219, 61, 191, 229, 151, 189, 113, 56, 88, 189, 17, 163, 1, 189, 145, 227, 8, 190, 97, 71, 7, 190, 224, 56, 152, 58, 14, 69, 16, 62, 206, 222, 185, 188, 243, 29, 165, 61, 137, 66, 219, 189, 130, 26, 35, 190, 137, 56, 241, 188, 92, 39, 37, 62, 140, 25, 109, 189, 53, 22, 187, 61, 64, 98, 173, 61, 95, 243, 249, 61, 222, 103, 89, 189, 201, 3, 94, 189, 135, 72, 197, 61, 244, 230, 61, 190, 201, 252, 0, 61, 47, 28, 18, 62, 204, 170, 49, 190, 108, 19, 187, 61, 223, 130, 17, 190, 54, 143, 156, 190, 65, 147, 157, 61, 12, 120, 220, 61, 19, 132, 152, 188, 78, 205, 17, 190, 87, 242, 12, 190, 11, 47, 6, 189, 171, 142, 23, 62, 29, 109, 254, 60, 158, 19, 249, 61, 15, 7, 251, 189, 49, 148, 215, 61, 184, 236, 26, 190, 19, 29, 171, 61, 110, 226, 165, 189, 38, 59, 27, 190, 42, 246, 246, 61, 254, 133, 64, 189, 23, 95, 232, 189, 184, 215, 241, 61, 15, 39, 9, 62, 57, 239, 40, 62, 180, 132, 195, 190, 129, 122, 71, 62, 6, 242, 95, 190, 250, 93, 201, 61, 174, 227, 90, 61, 118, 33, 112, 62, 174, 196, 157, 62, 95, 227, 34, 188, 159, 59, 48, 61, 111, 33, 41, 190, 208, 159, 45, 189, 205, 55, 163, 189, 213, 152, 130, 61, 178, 64, 227, 189, 204, 34, 171, 189, 88, 126, 215, 189, 114, 201, 129, 62, 71, 161, 223, 61, 94, 250, 64, 61, 255, 39, 82, 189, 228, 92, 41, 59, 139, 63, 213, 61, 164, 167, 151, 189, 183, 167, 222, 61, 163, 54, 17, 188, 82, 212, 209, 190, 142, 222, 132, 190, 249, 248, 226, 61, 9, 218, 137, 189, 117, 232, 232, 62, 56, 143, 114, 189, 152, 155, 228, 189, 65, 255, 175, 189, 155, 181, 49, 62, 70, 56, 246, 188, 42, 32, 227, 62, 232, 199, 238, 59, 247, 183, 113, 189, 241, 103, 245, 189, 105, 96, 194, 189, 67, 101, 149, 61, 121, 37, 209, 189, 84, 27, 8, 62, 237, 30, 48, 190, 135, 26, 9, 189, 255, 77, 143, 189, 52, 158, 240, 189, 191, 230, 60, 189, 146, 32, 255, 189, 9, 62, 251, 60, 229, 15, 188, 188, 68, 168, 221, 189, 127, 172, 1, 188, 37, 126, 175, 189, 184, 234, 41, 190, 83, 0, 254, 188, 46, 27, 160, 60, 249, 73, 233, 60, 159, 238, 178, 189, 156, 189, 218, 189, 187, 147, 233, 189, 95, 114, 217, 61, 233, 179, 209, 61, 193, 214, 38, 190, 201, 65, 143, 189, 4, 163, 162, 189, 111, 17, 177, 188, 204, 224, 49, 62, 179, 172, 235, 189, 254, 184, 183, 61, 103, 214, 159, 62, 135, 216, 48, 189, 176, 158, 213, 60, 134, 95, 111, 190, 111, 37, 5, 191, 83, 16, 44, 188, 178, 152, 58, 190, 78, 131, 154, 190, 154, 157, 223, 189, 97, 38, 9, 191, 233, 116, 131, 187, 156, 49, 247, 61, 84, 145, 231, 61, 147, 74, 163, 61, 249, 174, 101, 190, 73, 249, 132, 61, 138, 218, 41, 190, 72, 96, 72, 62, 25, 47, 90, 62, 12, 144, 215, 190, 59, 88, 74, 62, 108, 120, 220, 189, 254, 86, 152, 189, 245, 91, 238, 61, 89, 22, 130, 190, 231, 109, 31, 188, 73, 213, 44, 191, 232, 158, 109, 62, 244, 239, 189, 190, 80, 191, 33, 62, 242, 76, 22, 62, 238, 214, 137, 190, 172, 27, 119, 61, 62, 177, 77, 190, 32, 98, 47, 61, 67, 180, 122, 189, 202, 227, 152, 188, 115, 130, 54, 189, 127, 16, 191, 189, 247, 170, 86, 190, 44, 35, 67, 186, 121, 110, 128, 189, 190, 82, 145, 189, 31, 118, 107, 190, 180, 166, 1, 187, 29, 79, 236, 61, 64, 72, 185, 61, 160, 103, 17, 62, 24, 49, 13, 62, 27, 233, 76, 190, 221, 128, 147, 190, 185, 254, 78, 59, 54, 148, 177, 60, 207, 238, 44, 62, 215, 2, 122, 61, 72, 11, 134, 189, 185, 64, 152, 189, 73, 41, 167, 59, 133, 87, 211, 61, 1, 51, 103, 62, 210, 220, 41, 62, 46, 34, 153, 62, 168, 106, 52, 190, 138, 247, 61, 191, 122, 88, 212, 190, 162, 222, 19, 62, 209, 64, 253, 190, 142, 119, 113, 61, 7, 150, 38, 62, 45, 81, 190, 189, 141, 29, 241, 61, 72, 10, 138, 62, 197, 154, 178, 62, 185, 180, 244, 61, 251, 118, 24, 189, 203, 106, 161, 189, 145, 223, 198, 190, 35, 123, 10, 189, 154, 0, 124, 62, 168, 53, 36, 189, 43, 168, 140, 189, 160, 241, 38, 62, 32, 33, 116, 189, 222, 125, 163, 190, 203, 18, 123, 62, 180, 5, 29, 62, 171, 199, 181, 61, 133, 207, 78, 190, 49, 47, 80, 190, 168, 53, 91, 61, 198, 98, 45, 189, 36, 23, 180, 59, 68, 51, 188, 189, 174, 75, 35, 191, 235, 73, 187, 62, 59, 192, 156, 190, 172, 171, 154, 188, 98, 35, 72, 190, 182, 158, 194, 61, 4, 211, 0, 188, 249, 169, 73, 62, 54, 147, 197, 189, 178, 172, 232, 189, 226, 92, 68, 190, 3, 129, 174, 189, 64, 159, 79, 189, 4, 68, 78, 62, 77, 231, 154, 190, 30, 6, 56, 190, 102, 76, 214, 189, 148, 204, 232, 189, 218, 94, 154, 61, 43, 119, 38, 61, 174, 152, 179, 190, 71, 47, 20, 190, 76, 183, 171, 189, 72, 233, 93, 190, 26, 149, 87, 62, 93, 44, 178, 189, 56, 231, 147, 62, 178, 167, 15, 62, 194, 150, 29, 190, 112, 249, 238, 61, 191, 140, 103, 62, 87, 226, 93, 62, 218, 228, 177, 62, 113, 96, 36, 190, 37, 233, 7, 190, 117, 122, 21, 190, 220, 164, 192, 189, 174, 214, 16, 62, 91, 242, 19, 62, 202, 71, 251, 187, 41, 252, 156, 61, 4, 58, 192, 61, 36, 223, 82, 189, 5, 40, 149, 60, 163, 206, 250, 189, 196, 27, 199, 189, 244, 88, 220, 189, 102, 193, 9, 62, 86, 180, 101, 60, 69, 77, 254, 60, 133, 42, 237, 189, 150, 29, 32, 190, 69, 89, 232, 188, 247, 215, 214, 189, 125, 78, 66, 61, 176, 195, 215, 60, 32, 77, 50, 190, 253, 230, 36, 62, 193, 246, 213, 61, 163, 31, 21, 62, 141, 90, 45, 61, 247, 60, 63, 189, 155, 86, 45, 190, 169, 49, 29, 190, 23, 37, 35, 190, 64, 241, 203, 61, 82, 46, 46, 191, 46, 166, 202, 190, 132, 159, 17, 189, 169, 157, 168, 188, 198, 244, 63, 61, 234, 117, 5, 190, 104, 238, 51, 62, 151, 247, 9, 189, 153, 123, 123, 62, 89, 228, 4, 61, 236, 66, 231, 188, 175, 58, 2, 62, 239, 227, 251, 188, 207, 77, 38, 191, 148, 206, 137, 190, 125, 58, 254, 189, 82, 161, 200, 60, 208, 200, 141, 190, 186, 5, 53, 61, 56, 197, 181, 61, 211, 24, 198, 60, 58, 71, 186, 62, 78, 175, 16, 62, 5, 6, 25, 190, 187, 126, 139, 190, 192, 188, 49, 190, 201, 172, 178, 62, 78, 107, 25, 62, 195, 14, 141, 61, 224, 198, 34, 190, 25, 249, 39, 191, 40, 157, 84, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {188, 118, 58, 189, 161, 40, 79, 62, 250, 80, 138, 189, 10, 251, 8, 62, 218, 202, 23, 189, 139, 50, 130, 62, 79, 18, 179, 189, 18, 31, 44, 190, 211, 107, 105, 190, 18, 219, 194, 187, 123, 20, 225, 61, 169, 58, 222, 189, 96, 184, 179, 189, 15, 198, 163, 61, 164, 64, 153, 60, 174, 124, 165, 61, 202, 179, 66, 62, 227, 239, 6, 62, 53, 33, 162, 61, 39, 144, 49, 62, 120, 91, 115, 61, 147, 255, 214, 189, 27, 59, 171, 61, 79, 160, 80, 189, 34, 185, 228, 60, 109, 8, 161, 61, 24, 168, 24, 61, 103, 127, 56, 61, 99, 255, 136, 62, 131, 133, 37, 61, 121, 207, 233, 188, 90, 131, 178, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {43, 53, 16, 190, 160, 68, 12, 62, 49, 1, 154, 188, 244, 144, 118, 190, 129, 188, 148, 189, 241, 98, 34, 62, 182, 74, 215, 61, 126, 35, 6, 62, 77, 96, 65, 61, 61, 203, 157, 189, 131, 10, 64, 62, 244, 13, 34, 61, 178, 144, 250, 61, 231, 213, 58, 188, 212, 42, 173, 190, 13, 32, 31, 190, 227, 85, 201, 189, 179, 47, 130, 188, 21, 102, 186, 189, 182, 11, 52, 190, 29, 16, 152, 62, 168, 238, 145, 190, 31, 126, 163, 189, 108, 191, 67, 62, 95, 9, 139, 62, 233, 216, 142, 59, 211, 123, 23, 63, 127, 125, 231, 61, 152, 143, 217, 190, 63, 88, 142, 62, 241, 57, 186, 188, 160, 120, 194, 190, 41, 174, 153, 60, 42, 140, 186, 188, 163, 79, 226, 189, 195, 91, 37, 190, 186, 188, 85, 190, 47, 142, 233, 189, 192, 110, 42, 189, 185, 197, 108, 188, 60, 128, 222, 59, 45, 105, 189, 61, 234, 240, 181, 60, 105, 17, 180, 61, 162, 6, 9, 190, 175, 213, 161, 190, 161, 201, 135, 189, 74, 125, 151, 189, 44, 42, 59, 190, 95, 158, 180, 61, 104, 165, 37, 62, 47, 77, 9, 61, 23, 77, 37, 61, 103, 35, 192, 61, 193, 22, 165, 61, 245, 215, 61, 62, 165, 55, 18, 188, 108, 195, 199, 61, 222, 89, 142, 189, 83, 136, 95, 190, 231, 52, 215, 60, 13, 233, 140, 189, 232, 115, 8, 190, 16, 97, 159, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 39, 195, 61, 126, 110, 154, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {140, 62, 198, 190, 194, 143, 76, 191, 253, 220, 141, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {152, 58, 252, 63, 26, 174, 19, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0022/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}