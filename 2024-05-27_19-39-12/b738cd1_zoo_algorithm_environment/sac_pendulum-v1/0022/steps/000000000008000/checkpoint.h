// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {216, 158, 62, 191, 137, 93, 64, 63, 14, 98, 235, 62, 226, 115, 134, 190, 96, 218, 71, 191, 163, 143, 225, 62, 6, 190, 32, 63, 25, 93, 106, 63, 87, 81, 183, 62, 199, 141, 35, 63, 135, 154, 145, 191, 174, 130, 229, 190, 129, 40, 35, 190, 193, 215, 168, 60, 39, 190, 132, 190, 111, 121, 136, 62, 253, 116, 46, 191, 172, 153, 131, 190, 10, 137, 234, 190, 232, 159, 153, 191, 196, 248, 227, 190, 104, 151, 229, 190, 26, 201, 63, 63, 61, 203, 252, 189, 144, 100, 190, 190, 49, 159, 64, 190, 7, 71, 180, 190, 249, 84, 54, 62, 75, 197, 34, 63, 201, 36, 28, 190, 182, 144, 161, 62, 10, 199, 219, 62, 20, 211, 183, 190, 217, 60, 242, 62, 51, 13, 3, 191, 224, 169, 54, 188, 16, 192, 59, 191, 231, 242, 197, 63, 202, 204, 159, 62, 87, 137, 63, 190, 220, 108, 255, 62, 27, 70, 104, 63, 206, 100, 76, 190, 28, 65, 95, 63, 169, 46, 74, 190, 240, 143, 191, 62, 89, 235, 35, 63, 28, 96, 142, 190, 185, 139, 19, 62, 110, 20, 200, 191, 179, 203, 153, 190, 93, 77, 241, 62, 75, 174, 94, 62, 172, 181, 227, 62, 220, 42, 131, 191, 199, 110, 234, 190, 190, 145, 137, 187, 26, 62, 94, 191, 48, 194, 177, 62, 168, 96, 153, 188, 7, 74, 207, 62, 69, 162, 149, 62, 161, 217, 19, 63, 169, 134, 244, 190, 36, 49, 42, 63, 98, 136, 61, 62, 242, 130, 53, 61, 127, 21, 193, 191, 18, 67, 198, 190, 242, 248, 176, 62, 181, 12, 233, 61, 102, 201, 142, 188, 132, 218, 151, 62, 79, 149, 70, 191, 125, 87, 50, 62, 252, 248, 164, 62, 126, 103, 40, 190, 72, 130, 11, 191, 10, 187, 99, 191, 26, 183, 108, 190, 160, 118, 128, 60, 36, 206, 98, 61, 157, 202, 9, 60, 21, 72, 62, 191, 38, 175, 135, 190, 246, 16, 46, 191, 186, 30, 18, 190, 65, 15, 7, 63, 242, 6, 181, 189, 131, 179, 51, 63, 23, 44, 221, 189, 120, 47, 37, 191, 156, 155, 213, 62, 40, 170, 128, 190, 40, 129, 162, 62, 51, 130, 195, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {243, 10, 252, 190, 81, 11, 204, 190, 120, 113, 19, 189, 147, 42, 239, 190, 4, 190, 168, 190, 233, 211, 146, 62, 192, 11, 141, 189, 5, 72, 73, 61, 225, 22, 11, 191, 134, 248, 165, 60, 124, 110, 36, 62, 59, 121, 69, 63, 69, 250, 16, 61, 207, 139, 64, 190, 175, 30, 154, 60, 131, 201, 151, 62, 242, 20, 93, 62, 13, 32, 166, 62, 132, 81, 204, 188, 137, 80, 180, 62, 197, 253, 72, 191, 167, 85, 30, 63, 223, 152, 8, 63, 177, 67, 0, 191, 118, 73, 248, 188, 194, 161, 152, 190, 231, 208, 54, 189, 57, 223, 211, 190, 245, 185, 193, 62, 117, 201, 133, 62, 177, 168, 111, 190, 192, 238, 164, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 13, 109, 190, 127, 208, 5, 60, 17, 95, 234, 188, 132, 89, 221, 190, 166, 209, 133, 61, 82, 91, 0, 62, 18, 110, 102, 62, 53, 40, 168, 61, 98, 95, 198, 189, 228, 144, 245, 60, 5, 152, 65, 187, 224, 255, 20, 189, 145, 175, 214, 61, 3, 245, 78, 61, 8, 74, 44, 190, 147, 64, 187, 61, 248, 188, 44, 61, 86, 60, 106, 190, 166, 55, 173, 62, 80, 203, 154, 62, 13, 86, 150, 190, 5, 115, 177, 62, 70, 12, 189, 189, 146, 215, 14, 62, 5, 142, 185, 190, 199, 116, 130, 190, 97, 46, 203, 61, 108, 31, 186, 61, 87, 238, 144, 62, 212, 21, 28, 190, 128, 40, 3, 189, 149, 100, 163, 62, 74, 229, 98, 62, 30, 131, 147, 61, 130, 20, 50, 190, 101, 51, 171, 62, 74, 110, 136, 190, 16, 50, 31, 189, 61, 67, 81, 190, 55, 207, 31, 190, 244, 107, 106, 191, 192, 189, 62, 190, 123, 125, 55, 190, 69, 128, 135, 62, 136, 137, 111, 61, 95, 51, 38, 189, 151, 41, 118, 62, 108, 132, 21, 190, 33, 159, 143, 190, 84, 132, 1, 190, 66, 177, 11, 190, 84, 89, 43, 190, 188, 173, 141, 190, 15, 75, 36, 190, 173, 232, 243, 61, 24, 188, 34, 62, 56, 131, 51, 62, 159, 140, 173, 62, 193, 79, 199, 61, 135, 177, 196, 189, 196, 123, 155, 62, 229, 221, 0, 190, 254, 188, 139, 62, 80, 103, 9, 61, 213, 8, 64, 189, 241, 30, 68, 60, 41, 17, 83, 190, 161, 76, 176, 189, 70, 254, 122, 62, 89, 63, 34, 62, 174, 166, 139, 189, 21, 93, 9, 62, 48, 76, 194, 62, 252, 235, 171, 61, 11, 76, 250, 61, 110, 238, 213, 189, 53, 166, 117, 61, 129, 34, 28, 190, 110, 56, 18, 61, 75, 144, 140, 189, 2, 132, 80, 190, 15, 111, 184, 190, 79, 164, 72, 62, 76, 62, 49, 62, 96, 1, 39, 190, 33, 43, 176, 189, 15, 13, 55, 189, 144, 72, 32, 190, 174, 40, 101, 190, 162, 147, 135, 58, 203, 47, 151, 189, 185, 178, 22, 62, 142, 165, 11, 61, 75, 245, 48, 190, 212, 55, 55, 190, 50, 132, 241, 189, 123, 164, 166, 190, 2, 57, 68, 190, 56, 79, 76, 62, 38, 156, 17, 191, 108, 68, 227, 59, 120, 236, 146, 188, 94, 78, 219, 60, 0, 164, 2, 62, 111, 172, 80, 62, 230, 71, 24, 59, 13, 37, 186, 60, 125, 165, 16, 62, 168, 52, 52, 191, 103, 53, 132, 190, 250, 231, 153, 188, 58, 29, 17, 62, 41, 55, 187, 190, 184, 212, 122, 62, 211, 112, 69, 62, 41, 163, 166, 61, 157, 116, 151, 61, 123, 70, 142, 189, 224, 228, 82, 190, 130, 198, 49, 190, 106, 162, 201, 60, 176, 215, 28, 189, 173, 11, 20, 189, 25, 182, 172, 61, 179, 72, 153, 189, 82, 28, 35, 62, 132, 131, 246, 187, 93, 170, 214, 189, 21, 150, 20, 191, 49, 253, 140, 190, 191, 47, 37, 62, 248, 74, 171, 190, 85, 136, 94, 189, 98, 206, 72, 62, 164, 218, 158, 61, 213, 121, 245, 61, 138, 114, 20, 62, 69, 2, 18, 62, 46, 210, 33, 62, 231, 161, 165, 62, 86, 230, 193, 190, 31, 103, 42, 189, 71, 205, 4, 190, 200, 234, 75, 62, 138, 172, 239, 190, 131, 223, 101, 62, 14, 203, 33, 61, 243, 185, 104, 60, 84, 94, 100, 190, 78, 237, 172, 189, 209, 19, 164, 187, 253, 188, 20, 61, 247, 216, 89, 62, 38, 194, 128, 190, 161, 41, 231, 189, 27, 27, 220, 61, 135, 152, 86, 190, 236, 206, 157, 189, 238, 156, 25, 190, 115, 111, 48, 60, 101, 114, 217, 61, 30, 125, 230, 61, 155, 139, 129, 190, 82, 73, 65, 62, 20, 28, 51, 191, 181, 133, 123, 61, 203, 75, 200, 190, 144, 144, 229, 189, 231, 149, 87, 191, 254, 50, 101, 189, 73, 101, 14, 189, 122, 52, 159, 62, 252, 75, 20, 189, 182, 121, 68, 61, 197, 9, 238, 187, 90, 212, 31, 62, 162, 108, 200, 189, 161, 141, 203, 189, 79, 233, 124, 62, 216, 9, 213, 188, 157, 242, 90, 190, 110, 5, 103, 190, 223, 206, 162, 189, 206, 112, 158, 61, 72, 226, 24, 62, 217, 189, 139, 62, 99, 145, 42, 62, 69, 22, 154, 189, 194, 19, 193, 62, 247, 223, 236, 189, 170, 72, 164, 61, 217, 64, 13, 190, 158, 211, 46, 60, 137, 2, 105, 62, 238, 162, 255, 189, 138, 189, 218, 62, 11, 75, 93, 190, 46, 76, 109, 189, 80, 194, 26, 190, 177, 45, 225, 188, 255, 201, 146, 189, 242, 67, 220, 189, 72, 39, 244, 61, 183, 68, 43, 62, 18, 215, 12, 188, 78, 90, 252, 188, 169, 24, 77, 61, 11, 9, 235, 61, 5, 98, 29, 62, 183, 168, 96, 189, 125, 137, 153, 60, 87, 238, 162, 190, 55, 237, 63, 190, 128, 253, 212, 190, 178, 135, 142, 61, 248, 120, 14, 62, 177, 49, 61, 62, 111, 113, 211, 61, 87, 25, 145, 187, 39, 138, 5, 188, 64, 184, 49, 62, 17, 60, 6, 190, 6, 29, 200, 62, 144, 228, 141, 190, 106, 198, 26, 190, 69, 28, 98, 189, 221, 223, 139, 189, 31, 232, 208, 61, 230, 21, 177, 60, 212, 3, 13, 190, 20, 49, 5, 190, 153, 33, 136, 189, 74, 58, 125, 61, 13, 66, 0, 189, 124, 117, 39, 62, 82, 54, 205, 187, 224, 100, 212, 61, 208, 160, 55, 59, 95, 206, 142, 61, 84, 227, 173, 189, 32, 75, 159, 189, 226, 144, 37, 190, 51, 16, 23, 189, 49, 138, 152, 189, 28, 8, 221, 61, 113, 203, 52, 190, 200, 77, 206, 188, 73, 97, 105, 189, 175, 64, 30, 62, 238, 152, 17, 190, 12, 133, 15, 189, 86, 205, 244, 61, 39, 165, 181, 61, 236, 202, 199, 61, 217, 211, 49, 190, 247, 82, 236, 189, 237, 188, 15, 190, 59, 116, 116, 189, 185, 251, 6, 62, 250, 227, 41, 60, 221, 23, 126, 188, 199, 74, 15, 62, 206, 110, 34, 62, 131, 49, 219, 61, 138, 56, 1, 189, 240, 226, 31, 190, 121, 131, 134, 189, 152, 210, 52, 190, 23, 149, 0, 189, 103, 240, 143, 61, 82, 45, 156, 60, 56, 146, 139, 61, 163, 154, 13, 190, 199, 244, 5, 190, 249, 43, 99, 189, 165, 138, 27, 62, 72, 250, 229, 61, 169, 29, 47, 190, 171, 192, 188, 189, 104, 113, 52, 61, 38, 36, 105, 187, 22, 7, 71, 61, 113, 137, 203, 61, 121, 232, 244, 189, 241, 143, 158, 61, 106, 45, 189, 188, 131, 58, 164, 61, 255, 184, 215, 189, 113, 170, 215, 190, 227, 185, 193, 190, 190, 135, 204, 62, 116, 182, 148, 190, 91, 251, 163, 61, 19, 150, 76, 189, 78, 150, 200, 189, 174, 128, 87, 62, 40, 241, 44, 190, 132, 103, 115, 189, 58, 61, 215, 60, 112, 167, 80, 190, 130, 217, 188, 61, 196, 147, 19, 190, 120, 165, 18, 189, 27, 148, 55, 62, 183, 235, 26, 190, 38, 234, 183, 60, 112, 233, 128, 190, 65, 186, 156, 62, 177, 139, 127, 62, 161, 24, 129, 62, 190, 132, 170, 190, 96, 216, 6, 190, 41, 80, 214, 190, 254, 127, 178, 61, 127, 239, 56, 190, 180, 101, 248, 61, 140, 132, 212, 190, 148, 36, 109, 61, 94, 212, 168, 190, 180, 152, 201, 62, 103, 248, 149, 62, 54, 137, 60, 62, 129, 164, 150, 190, 220, 230, 254, 62, 244, 252, 97, 190, 153, 51, 89, 62, 230, 46, 210, 189, 248, 236, 149, 190, 231, 186, 146, 190, 171, 69, 87, 189, 75, 65, 137, 61, 59, 203, 211, 61, 246, 1, 45, 62, 69, 149, 103, 189, 236, 254, 250, 186, 35, 76, 97, 61, 231, 78, 75, 62, 72, 182, 112, 188, 235, 84, 121, 62, 159, 110, 184, 189, 79, 186, 191, 190, 50, 85, 17, 190, 33, 233, 112, 187, 246, 104, 130, 61, 10, 98, 166, 62, 226, 164, 148, 62, 2, 185, 59, 62, 90, 181, 229, 189, 245, 36, 139, 62, 6, 48, 118, 190, 209, 213, 158, 62, 239, 141, 50, 190, 61, 121, 86, 189, 210, 214, 138, 60, 230, 100, 165, 189, 158, 158, 243, 61, 63, 136, 142, 189, 216, 105, 17, 190, 222, 61, 31, 62, 138, 141, 49, 190, 77, 58, 230, 189, 47, 53, 125, 60, 207, 162, 238, 189, 61, 81, 142, 189, 9, 180, 91, 190, 254, 186, 151, 61, 101, 154, 11, 190, 240, 152, 124, 61, 32, 246, 27, 190, 150, 251, 18, 190, 80, 169, 163, 61, 219, 235, 131, 61, 201, 201, 49, 190, 74, 125, 3, 190, 243, 235, 47, 190, 70, 199, 252, 188, 223, 134, 66, 59, 152, 58, 21, 61, 108, 152, 163, 189, 200, 230, 191, 189, 180, 200, 27, 190, 227, 172, 237, 61, 146, 137, 62, 61, 76, 197, 42, 189, 105, 249, 57, 190, 215, 97, 250, 61, 186, 80, 153, 60, 248, 74, 132, 189, 4, 175, 128, 190, 194, 111, 27, 62, 236, 214, 85, 62, 122, 9, 0, 190, 237, 145, 7, 62, 167, 109, 30, 190, 86, 142, 19, 62, 205, 33, 70, 62, 236, 112, 98, 189, 111, 198, 84, 190, 252, 231, 182, 189, 92, 236, 36, 62, 56, 158, 206, 61, 200, 58, 227, 60, 213, 200, 192, 61, 169, 116, 56, 190, 183, 159, 32, 188, 24, 16, 216, 190, 128, 230, 250, 60, 227, 8, 35, 190, 117, 241, 31, 62, 106, 53, 254, 189, 195, 45, 16, 190, 0, 53, 36, 62, 68, 91, 36, 62, 139, 129, 89, 62, 229, 1, 223, 61, 150, 53, 136, 190, 63, 61, 24, 190, 237, 7, 160, 61, 46, 199, 31, 189, 240, 211, 235, 189, 59, 198, 82, 61, 23, 170, 65, 62, 47, 72, 154, 60, 192, 167, 94, 62, 172, 37, 90, 189, 186, 217, 208, 189, 58, 154, 116, 61, 86, 120, 180, 62, 10, 76, 117, 189, 134, 164, 198, 189, 30, 225, 101, 190, 227, 3, 108, 62, 136, 40, 224, 59, 28, 223, 4, 187, 64, 111, 199, 61, 231, 77, 106, 188, 64, 33, 135, 190, 201, 1, 36, 190, 6, 173, 180, 189, 176, 149, 156, 189, 66, 54, 160, 62, 53, 207, 252, 189, 183, 31, 229, 188, 17, 224, 197, 189, 27, 61, 84, 61, 157, 179, 70, 61, 45, 163, 132, 62, 40, 105, 91, 62, 255, 125, 155, 61, 82, 118, 117, 61, 213, 104, 48, 62, 221, 122, 167, 190, 148, 225, 204, 189, 189, 47, 135, 62, 252, 208, 138, 190, 182, 169, 36, 62, 132, 103, 145, 60, 29, 223, 160, 61, 24, 139, 181, 62, 84, 133, 9, 62, 232, 48, 0, 190, 164, 101, 117, 189, 58, 41, 103, 62, 44, 87, 131, 62, 153, 176, 94, 191, 145, 96, 80, 62, 115, 124, 29, 191, 28, 172, 243, 189, 52, 222, 5, 60, 210, 58, 45, 61, 102, 14, 141, 190, 208, 222, 69, 189, 66, 142, 66, 62, 111, 172, 240, 60, 137, 153, 182, 190, 157, 71, 140, 190, 177, 145, 26, 191, 70, 62, 92, 62, 232, 31, 1, 189, 122, 16, 36, 190, 38, 209, 51, 191, 222, 114, 32, 189, 214, 130, 164, 189, 171, 184, 200, 190, 61, 136, 56, 62, 125, 79, 137, 58, 214, 243, 43, 189, 173, 65, 31, 61, 114, 97, 45, 61, 69, 185, 82, 61, 236, 35, 213, 61, 41, 45, 79, 190, 171, 44, 3, 191, 154, 117, 51, 61, 135, 214, 47, 190, 175, 140, 193, 60, 91, 121, 191, 189, 63, 66, 182, 61, 238, 69, 64, 62, 132, 112, 140, 61, 191, 147, 79, 62, 153, 204, 118, 62, 87, 8, 161, 189, 163, 128, 240, 189, 25, 196, 43, 190, 186, 215, 20, 188, 132, 45, 71, 62, 194, 243, 95, 61, 189, 226, 187, 60, 200, 97, 82, 62, 24, 172, 97, 190, 21, 159, 140, 188, 240, 100, 139, 61, 38, 33, 129, 62, 115, 77, 116, 61, 235, 236, 127, 190, 8, 48, 135, 188, 54, 96, 42, 62, 72, 191, 64, 190, 126, 47, 163, 61, 62, 34, 100, 189, 243, 89, 64, 61, 4, 161, 95, 62, 58, 119, 0, 61, 216, 187, 126, 189, 216, 211, 121, 189, 82, 53, 54, 190, 47, 203, 44, 62, 59, 47, 164, 190, 136, 37, 77, 62, 83, 63, 238, 59, 138, 17, 139, 62, 162, 110, 24, 60, 2, 216, 135, 61, 190, 169, 83, 188, 158, 144, 156, 60, 72, 234, 164, 58, 216, 76, 23, 190, 87, 40, 20, 62, 242, 66, 94, 61, 190, 91, 131, 190, 248, 140, 57, 189, 21, 29, 81, 62, 205, 199, 28, 62, 121, 238, 152, 189, 58, 208, 15, 61, 65, 98, 254, 188, 102, 198, 209, 189, 159, 114, 163, 189, 204, 157, 209, 189, 112, 231, 50, 190, 59, 148, 128, 189, 199, 146, 187, 189, 198, 33, 47, 61, 40, 232, 40, 190, 128, 29, 155, 189, 75, 114, 100, 189, 211, 126, 34, 190, 28, 171, 128, 60, 134, 1, 2, 190, 100, 49, 0, 189, 22, 28, 0, 188, 131, 133, 146, 61, 233, 200, 28, 61, 143, 152, 226, 189, 92, 50, 78, 190, 165, 111, 143, 189, 168, 213, 221, 61, 230, 35, 157, 60, 154, 220, 73, 188, 82, 8, 148, 61, 22, 20, 139, 61, 26, 243, 93, 61, 235, 161, 50, 190, 239, 119, 68, 186, 209, 215, 151, 61, 36, 207, 221, 189, 149, 248, 7, 62, 224, 212, 41, 190, 242, 97, 55, 189, 90, 1, 219, 189, 236, 230, 45, 190, 228, 136, 180, 189, 105, 138, 154, 189, 24, 146, 70, 189, 52, 186, 26, 62, 45, 21, 250, 188, 249, 145, 18, 190, 86, 212, 217, 189, 40, 41, 81, 60, 125, 82, 248, 188, 18, 144, 42, 58, 80, 221, 88, 61, 227, 222, 61, 190, 119, 243, 16, 190, 222, 28, 50, 61, 47, 35, 12, 62, 76, 205, 8, 190, 63, 166, 215, 189, 250, 98, 141, 189, 86, 225, 47, 61, 245, 179, 204, 61, 200, 188, 36, 62, 152, 235, 12, 190, 168, 227, 157, 188, 38, 22, 140, 189, 215, 70, 158, 61, 148, 60, 34, 189, 98, 219, 149, 190, 41, 45, 116, 62, 44, 97, 200, 60, 159, 40, 74, 191, 128, 69, 12, 60, 86, 58, 139, 61, 18, 156, 43, 62, 34, 77, 240, 61, 128, 87, 5, 59, 235, 115, 179, 62, 137, 111, 131, 62, 181, 26, 174, 59, 9, 33, 17, 191, 103, 18, 167, 189, 91, 85, 10, 190, 129, 223, 170, 61, 153, 186, 18, 191, 105, 231, 64, 62, 15, 104, 4, 190, 163, 113, 77, 188, 43, 229, 194, 62, 252, 26, 191, 189, 212, 113, 107, 189, 140, 212, 125, 59, 106, 85, 63, 62, 95, 184, 4, 190, 164, 215, 41, 190, 159, 141, 85, 60, 226, 97, 6, 190, 174, 157, 138, 62, 43, 229, 206, 189, 94, 134, 55, 61, 152, 196, 120, 60, 112, 187, 233, 61, 131, 158, 92, 190, 223, 89, 162, 62, 106, 103, 85, 60, 155, 224, 242, 188, 103, 65, 171, 61, 109, 85, 154, 189, 242, 77, 22, 62, 128, 200, 152, 189, 159, 73, 244, 61, 158, 170, 226, 60, 112, 81, 18, 190, 111, 174, 57, 62, 113, 87, 158, 189, 140, 139, 83, 62, 47, 170, 248, 61, 140, 150, 101, 62, 62, 152, 232, 189, 97, 194, 74, 191, 157, 194, 86, 62, 47, 90, 235, 190, 10, 126, 150, 58, 183, 174, 188, 189, 242, 103, 147, 62, 36, 218, 96, 62, 231, 10, 208, 190, 53, 145, 175, 189, 176, 9, 8, 62, 51, 242, 171, 61, 214, 81, 16, 63, 235, 56, 137, 190, 165, 174, 117, 191, 214, 53, 172, 190, 132, 138, 85, 62, 34, 149, 152, 190, 83, 64, 66, 189, 129, 72, 79, 189, 214, 167, 32, 62, 117, 244, 71, 62, 114, 252, 110, 190, 112, 158, 95, 62, 75, 91, 63, 61, 245, 5, 29, 190, 52, 241, 198, 190, 181, 60, 48, 190, 124, 55, 176, 187, 58, 233, 188, 61, 98, 134, 249, 189, 101, 143, 74, 62, 29, 13, 31, 61, 12, 231, 115, 62, 216, 78, 225, 62, 152, 34, 219, 62, 252, 65, 52, 190, 151, 197, 33, 188, 175, 75, 187, 190, 239, 110, 185, 189, 236, 48, 116, 189, 119, 234, 132, 61, 113, 132, 23, 189, 0, 217, 14, 62, 53, 218, 246, 189, 108, 212, 147, 59, 244, 46, 111, 61, 87, 228, 63, 189, 129, 60, 23, 190, 18, 176, 173, 189, 228, 41, 120, 189, 30, 91, 88, 190, 228, 181, 98, 189, 162, 179, 182, 61, 214, 144, 158, 189, 168, 101, 17, 189, 195, 8, 160, 61, 116, 60, 212, 189, 113, 56, 88, 189, 17, 163, 1, 189, 175, 90, 42, 190, 103, 253, 37, 190, 176, 164, 147, 188, 14, 69, 16, 62, 196, 213, 220, 188, 8, 70, 91, 61, 137, 66, 219, 189, 26, 31, 56, 190, 114, 218, 100, 189, 92, 39, 37, 62, 140, 25, 109, 189, 22, 85, 127, 61, 75, 143, 166, 61, 0, 68, 194, 61, 3, 93, 143, 189, 201, 3, 94, 189, 135, 72, 197, 61, 82, 204, 62, 190, 236, 42, 248, 190, 243, 155, 7, 190, 253, 31, 200, 190, 164, 105, 68, 62, 209, 114, 233, 189, 120, 45, 154, 191, 149, 221, 54, 60, 16, 42, 105, 62, 127, 231, 191, 190, 35, 123, 224, 190, 22, 25, 22, 191, 43, 250, 91, 190, 97, 136, 61, 61, 231, 226, 220, 190, 169, 187, 141, 62, 204, 82, 211, 190, 176, 150, 59, 191, 24, 126, 14, 191, 52, 71, 30, 62, 70, 212, 252, 188, 158, 34, 108, 190, 138, 169, 18, 62, 228, 247, 21, 190, 23, 95, 232, 189, 120, 138, 2, 190, 92, 176, 66, 62, 109, 148, 102, 62, 30, 98, 90, 191, 12, 246, 179, 61, 164, 41, 31, 191, 155, 35, 97, 190, 182, 86, 113, 61, 171, 240, 11, 62, 20, 218, 115, 62, 237, 240, 27, 190, 180, 148, 173, 62, 33, 80, 136, 190, 119, 56, 146, 61, 54, 43, 104, 190, 175, 237, 67, 62, 219, 94, 141, 190, 20, 48, 186, 61, 60, 105, 3, 188, 135, 132, 178, 62, 33, 51, 172, 61, 84, 175, 202, 186, 20, 177, 94, 62, 151, 97, 16, 62, 95, 121, 60, 188, 127, 131, 17, 190, 209, 208, 114, 60, 146, 179, 33, 190, 1, 229, 11, 191, 164, 224, 176, 190, 251, 214, 110, 61, 9, 218, 137, 189, 169, 67, 238, 62, 191, 165, 55, 62, 106, 225, 78, 190, 10, 183, 17, 190, 132, 1, 33, 62, 149, 25, 3, 190, 25, 133, 176, 62, 44, 168, 211, 189, 247, 183, 113, 189, 241, 103, 245, 189, 105, 96, 194, 189, 67, 101, 149, 61, 121, 37, 209, 189, 84, 27, 8, 62, 237, 30, 48, 190, 135, 26, 9, 189, 255, 77, 143, 189, 52, 158, 240, 189, 191, 230, 60, 189, 146, 32, 255, 189, 9, 62, 251, 60, 229, 15, 188, 188, 68, 168, 221, 189, 127, 172, 1, 188, 37, 126, 175, 189, 184, 234, 41, 190, 83, 0, 254, 188, 46, 27, 160, 60, 249, 73, 233, 60, 159, 238, 178, 189, 156, 189, 218, 189, 187, 147, 233, 189, 95, 114, 217, 61, 233, 179, 209, 61, 193, 214, 38, 190, 201, 65, 143, 189, 4, 163, 162, 189, 111, 17, 177, 188, 204, 224, 49, 62, 179, 172, 235, 189, 231, 120, 186, 61, 172, 14, 163, 62, 221, 235, 53, 190, 104, 71, 180, 61, 148, 242, 189, 190, 133, 36, 0, 192, 223, 26, 202, 190, 149, 255, 194, 60, 40, 100, 49, 191, 191, 197, 248, 190, 251, 193, 174, 191, 168, 163, 17, 62, 37, 39, 221, 61, 212, 17, 7, 62, 77, 212, 240, 61, 170, 209, 67, 191, 35, 69, 90, 191, 200, 162, 76, 190, 100, 190, 160, 62, 112, 205, 120, 62, 207, 115, 249, 190, 5, 12, 137, 62, 147, 190, 16, 191, 254, 86, 152, 189, 196, 66, 177, 62, 34, 214, 53, 190, 199, 218, 164, 61, 248, 240, 195, 191, 82, 59, 110, 62, 53, 185, 210, 190, 113, 16, 25, 62, 112, 168, 110, 62, 37, 70, 165, 190, 166, 113, 213, 187, 228, 206, 67, 190, 15, 27, 239, 60, 207, 14, 112, 189, 14, 195, 184, 61, 94, 68, 223, 189, 142, 204, 220, 188, 97, 251, 97, 190, 229, 165, 40, 62, 104, 132, 130, 61, 162, 131, 219, 60, 143, 190, 164, 190, 186, 159, 217, 189, 103, 135, 49, 62, 203, 128, 129, 62, 242, 10, 98, 61, 255, 164, 45, 62, 4, 15, 13, 191, 245, 149, 27, 191, 147, 212, 71, 189, 21, 250, 175, 190, 129, 127, 31, 62, 231, 232, 114, 61, 103, 166, 175, 189, 188, 90, 60, 189, 113, 188, 228, 190, 36, 6, 251, 61, 103, 13, 23, 62, 225, 210, 5, 62, 177, 20, 51, 62, 193, 73, 14, 191, 201, 31, 237, 191, 209, 145, 80, 191, 9, 107, 72, 62, 2, 17, 84, 191, 119, 116, 123, 60, 167, 178, 220, 61, 59, 250, 135, 60, 255, 85, 176, 61, 204, 237, 96, 62, 44, 125, 158, 62, 50, 209, 159, 61, 119, 211, 118, 189, 15, 233, 8, 191, 54, 58, 132, 191, 57, 82, 9, 190, 113, 180, 93, 62, 246, 70, 177, 189, 218, 86, 19, 189, 32, 49, 29, 61, 39, 192, 93, 189, 72, 194, 93, 190, 38, 102, 144, 62, 140, 234, 58, 62, 172, 222, 168, 61, 46, 98, 249, 190, 243, 182, 151, 190, 107, 151, 253, 189, 143, 188, 96, 189, 47, 201, 151, 61, 18, 179, 109, 189, 179, 86, 131, 191, 174, 157, 205, 62, 166, 27, 128, 190, 116, 108, 47, 62, 94, 192, 15, 191, 17, 191, 203, 61, 180, 181, 150, 189, 10, 254, 77, 62, 227, 163, 84, 190, 55, 121, 222, 61, 222, 181, 208, 190, 87, 94, 230, 61, 46, 111, 204, 188, 138, 235, 137, 62, 53, 26, 169, 190, 252, 149, 64, 190, 79, 114, 174, 61, 231, 74, 69, 189, 192, 68, 198, 61, 175, 213, 165, 189, 55, 159, 233, 190, 212, 200, 0, 191, 57, 18, 61, 190, 102, 210, 230, 190, 134, 232, 106, 62, 17, 190, 182, 189, 219, 43, 236, 62, 33, 202, 43, 62, 217, 72, 173, 190, 235, 168, 189, 61, 68, 226, 150, 62, 142, 20, 14, 62, 201, 244, 237, 62, 239, 30, 141, 190, 37, 233, 7, 190, 117, 122, 21, 190, 220, 164, 192, 189, 231, 227, 6, 62, 161, 76, 13, 62, 23, 99, 132, 188, 28, 16, 130, 61, 62, 147, 179, 61, 246, 207, 93, 189, 64, 66, 36, 60, 72, 208, 8, 190, 54, 180, 207, 189, 244, 88, 220, 189, 102, 193, 9, 62, 126, 50, 205, 59, 109, 101, 143, 60, 143, 13, 250, 189, 150, 29, 32, 190, 69, 89, 232, 188, 247, 215, 214, 189, 125, 78, 66, 61, 203, 140, 194, 60, 233, 4, 65, 190, 253, 230, 36, 62, 193, 246, 213, 61, 46, 142, 6, 62, 141, 90, 45, 61, 62, 238, 132, 189, 209, 235, 46, 190, 169, 49, 29, 190, 23, 37, 35, 190, 71, 58, 200, 61, 188, 90, 0, 192, 29, 231, 106, 191, 202, 150, 230, 190, 183, 69, 13, 62, 199, 199, 35, 189, 91, 53, 226, 189, 241, 187, 161, 62, 176, 208, 145, 190, 79, 93, 191, 61, 52, 41, 248, 189, 191, 149, 176, 188, 241, 204, 84, 62, 107, 53, 170, 190, 155, 22, 150, 191, 151, 12, 24, 191, 2, 126, 238, 189, 185, 178, 101, 62, 61, 52, 238, 190, 33, 131, 88, 62, 158, 160, 174, 60, 128, 32, 83, 62, 206, 240, 73, 62, 187, 62, 144, 62, 117, 157, 23, 190, 161, 205, 56, 191, 134, 157, 109, 189, 42, 48, 233, 62, 225, 44, 69, 62, 117, 196, 116, 62, 223, 30, 181, 189, 79, 124, 135, 191, 79, 53, 222, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 78, 249, 60, 142, 184, 145, 62, 39, 212, 157, 189, 196, 180, 0, 62, 68, 125, 163, 61, 206, 50, 189, 62, 216, 220, 188, 189, 18, 31, 44, 190, 211, 107, 105, 190, 187, 8, 191, 189, 168, 194, 194, 61, 209, 116, 23, 190, 76, 16, 195, 187, 211, 124, 91, 62, 146, 253, 91, 61, 221, 198, 187, 61, 150, 67, 137, 62, 227, 239, 6, 62, 53, 33, 162, 61, 85, 191, 17, 62, 114, 247, 175, 188, 31, 100, 58, 190, 215, 28, 85, 61, 160, 91, 236, 189, 226, 29, 129, 61, 109, 8, 161, 61, 74, 237, 201, 61, 212, 176, 249, 61, 46, 129, 151, 62, 74, 197, 198, 61, 42, 144, 9, 189, 167, 92, 248, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 9, 156, 190, 238, 125, 114, 62, 230, 62, 218, 61, 72, 159, 7, 191, 47, 239, 39, 189, 0, 140, 190, 62, 221, 223, 62, 62, 126, 35, 6, 62, 77, 96, 65, 61, 61, 93, 238, 190, 136, 27, 165, 62, 92, 207, 136, 61, 94, 89, 29, 62, 100, 13, 128, 189, 195, 127, 34, 191, 193, 81, 243, 190, 17, 144, 236, 189, 179, 47, 130, 188, 21, 102, 186, 189, 11, 133, 54, 191, 8, 111, 175, 62, 22, 97, 19, 191, 107, 161, 126, 189, 128, 69, 115, 63, 10, 89, 164, 62, 233, 216, 142, 59, 167, 253, 166, 63, 77, 5, 85, 62, 239, 8, 101, 191, 127, 141, 229, 62, 24, 223, 185, 188, 8, 163, 116, 191, 8, 32, 67, 61, 19, 221, 51, 61, 36, 253, 43, 190, 7, 63, 100, 190, 47, 184, 220, 190, 238, 222, 82, 190, 83, 86, 85, 61, 185, 197, 108, 188, 60, 128, 222, 59, 72, 211, 210, 61, 254, 169, 210, 61, 51, 193, 96, 61, 193, 204, 2, 190, 213, 158, 169, 190, 154, 202, 65, 189, 229, 243, 31, 62, 178, 100, 132, 190, 95, 158, 180, 61, 104, 165, 37, 62, 209, 149, 149, 61, 53, 176, 172, 61, 21, 241, 88, 62, 148, 57, 65, 61, 128, 18, 42, 62, 151, 0, 145, 60, 108, 195, 199, 61, 91, 227, 161, 188, 206, 18, 52, 190, 227, 200, 169, 61, 135, 158, 164, 61, 156, 90, 8, 190, 254, 110, 91, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 89, 228, 61, 195, 126, 131, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {81, 227, 52, 190, 110, 184, 237, 190, 158, 168, 248, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {38, 158, 58, 63, 118, 122, 48, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0022/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}