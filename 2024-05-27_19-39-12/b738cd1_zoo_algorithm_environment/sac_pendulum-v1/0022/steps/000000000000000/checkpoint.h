// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 77, 12, 191, 236, 41, 15, 190, 239, 135, 103, 61, 79, 36, 9, 191, 226, 27, 247, 190, 205, 169, 6, 62, 108, 37, 28, 187, 142, 130, 189, 62, 111, 2, 4, 63, 237, 127, 174, 62, 20, 218, 159, 190, 204, 89, 187, 190, 224, 236, 190, 190, 179, 85, 188, 62, 8, 193, 48, 61, 211, 220, 174, 62, 184, 192, 91, 61, 186, 99, 236, 189, 42, 9, 225, 190, 50, 128, 227, 190, 242, 239, 7, 191, 19, 75, 220, 190, 109, 74, 1, 63, 152, 131, 16, 61, 53, 102, 241, 190, 96, 38, 254, 62, 156, 149, 105, 61, 169, 136, 242, 189, 94, 187, 173, 62, 221, 226, 229, 189, 69, 78, 233, 61, 184, 75, 15, 62, 247, 86, 76, 190, 0, 28, 75, 62, 6, 136, 2, 61, 44, 106, 51, 190, 73, 186, 8, 191, 1, 251, 24, 62, 80, 52, 16, 63, 180, 116, 81, 190, 99, 15, 140, 190, 135, 230, 194, 62, 129, 190, 44, 62, 105, 115, 243, 62, 185, 21, 253, 189, 57, 1, 246, 61, 186, 136, 221, 62, 104, 214, 63, 190, 158, 206, 35, 190, 64, 224, 223, 190, 206, 64, 244, 190, 3, 6, 104, 62, 166, 214, 153, 60, 168, 54, 198, 62, 34, 138, 14, 191, 126, 181, 186, 190, 224, 127, 87, 62, 196, 199, 205, 190, 74, 67, 140, 60, 155, 222, 125, 62, 185, 171, 226, 62, 47, 173, 31, 190, 246, 189, 197, 62, 197, 237, 193, 188, 111, 11, 0, 63, 120, 32, 90, 62, 131, 154, 148, 189, 163, 107, 33, 190, 114, 97, 6, 191, 23, 126, 180, 62, 85, 27, 226, 61, 191, 166, 72, 189, 118, 192, 43, 190, 199, 187, 180, 190, 233, 194, 127, 61, 121, 244, 154, 62, 11, 102, 250, 61, 233, 146, 235, 190, 163, 17, 208, 190, 249, 67, 83, 189, 124, 218, 153, 62, 242, 85, 37, 189, 135, 232, 11, 63, 141, 4, 171, 190, 204, 168, 118, 188, 120, 230, 23, 190, 185, 93, 29, 190, 60, 131, 232, 62, 52, 215, 145, 189, 35, 192, 19, 63, 115, 31, 90, 190, 197, 208, 254, 190, 67, 244, 7, 61, 162, 234, 77, 190, 65, 105, 169, 61, 203, 199, 169, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 191, 19, 191, 87, 165, 145, 190, 60, 103, 18, 62, 169, 68, 229, 190, 122, 81, 150, 189, 199, 161, 241, 61, 161, 125, 52, 189, 238, 197, 160, 61, 64, 9, 9, 191, 119, 187, 111, 61, 7, 19, 87, 62, 154, 88, 15, 63, 184, 153, 134, 190, 44, 130, 19, 189, 83, 85, 183, 190, 80, 131, 181, 62, 160, 238, 99, 62, 106, 133, 176, 62, 133, 78, 22, 190, 60, 138, 40, 62, 139, 9, 8, 191, 21, 215, 10, 63, 169, 29, 16, 63, 231, 60, 252, 190, 98, 115, 209, 188, 175, 233, 39, 190, 26, 47, 40, 61, 78, 136, 117, 190, 211, 2, 151, 62, 20, 131, 78, 62, 165, 192, 240, 190, 44, 181, 11, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 88, 142, 189, 166, 173, 15, 189, 83, 15, 52, 62, 173, 253, 116, 188, 173, 148, 119, 61, 195, 78, 7, 62, 162, 55, 23, 62, 106, 2, 10, 187, 206, 147, 26, 189, 184, 64, 245, 58, 154, 233, 149, 188, 9, 250, 209, 60, 147, 192, 43, 62, 210, 247, 210, 61, 133, 249, 5, 189, 201, 2, 40, 61, 2, 115, 14, 189, 131, 111, 172, 189, 143, 93, 50, 62, 153, 110, 216, 61, 178, 70, 191, 189, 114, 25, 122, 61, 231, 239, 14, 190, 16, 89, 16, 62, 120, 186, 8, 61, 178, 187, 99, 189, 238, 75, 27, 188, 126, 5, 22, 62, 111, 91, 45, 62, 220, 144, 146, 189, 146, 216, 41, 188, 145, 19, 145, 61, 133, 114, 36, 62, 130, 19, 125, 61, 219, 7, 93, 61, 127, 175, 172, 61, 17, 15, 224, 61, 119, 21, 169, 189, 139, 146, 211, 61, 131, 227, 181, 188, 50, 190, 46, 190, 3, 99, 60, 189, 186, 147, 9, 190, 183, 242, 166, 61, 198, 184, 66, 61, 150, 195, 12, 189, 157, 239, 231, 61, 54, 24, 14, 190, 78, 124, 48, 190, 88, 205, 33, 188, 58, 225, 38, 190, 54, 156, 12, 189, 95, 27, 25, 61, 189, 13, 207, 188, 185, 159, 48, 62, 236, 44, 35, 62, 25, 42, 61, 61, 4, 179, 18, 62, 104, 28, 183, 61, 167, 15, 217, 61, 140, 124, 245, 61, 42, 96, 70, 61, 202, 199, 223, 61, 173, 14, 220, 61, 142, 160, 62, 61, 163, 25, 10, 62, 197, 121, 153, 60, 170, 38, 15, 190, 211, 114, 41, 62, 222, 239, 250, 61, 196, 225, 252, 189, 112, 246, 147, 61, 215, 121, 35, 62, 255, 100, 229, 60, 35, 105, 95, 61, 59, 152, 73, 189, 73, 100, 240, 61, 84, 65, 47, 189, 135, 59, 3, 60, 97, 136, 170, 189, 49, 116, 245, 189, 182, 64, 9, 190, 198, 199, 205, 61, 74, 130, 50, 62, 3, 4, 105, 188, 111, 165, 241, 188, 100, 202, 180, 189, 143, 125, 31, 190, 221, 79, 176, 188, 112, 163, 47, 189, 168, 248, 25, 190, 74, 134, 98, 61, 244, 135, 72, 185, 121, 50, 4, 189, 95, 35, 184, 189, 123, 163, 79, 189, 52, 252, 1, 61, 81, 31, 23, 190, 236, 90, 22, 62, 54, 74, 43, 188, 41, 127, 122, 59, 225, 37, 216, 189, 164, 166, 77, 189, 83, 226, 184, 61, 118, 137, 37, 62, 42, 214, 174, 189, 57, 113, 172, 189, 166, 34, 244, 61, 250, 53, 163, 189, 35, 220, 11, 190, 220, 91, 183, 61, 168, 90, 153, 60, 169, 202, 18, 189, 246, 30, 4, 62, 239, 169, 45, 62, 57, 152, 62, 60, 232, 7, 228, 57, 11, 143, 234, 189, 130, 16, 48, 190, 51, 179, 45, 190, 70, 225, 207, 61, 149, 153, 165, 61, 89, 34, 102, 189, 36, 227, 27, 61, 196, 232, 142, 61, 190, 117, 93, 61, 182, 9, 160, 61, 218, 244, 189, 189, 209, 49, 31, 190, 55, 153, 235, 189, 225, 143, 9, 62, 134, 219, 208, 60, 246, 240, 229, 187, 166, 140, 23, 62, 174, 1, 21, 62, 34, 237, 3, 62, 2, 92, 32, 62, 101, 178, 16, 62, 7, 139, 212, 61, 98, 240, 40, 62, 88, 15, 223, 189, 225, 3, 24, 62, 38, 8, 62, 60, 245, 50, 5, 62, 121, 142, 42, 190, 80, 209, 156, 61, 218, 79, 113, 187, 251, 115, 96, 188, 171, 148, 173, 189, 107, 6, 255, 188, 227, 179, 37, 61, 11, 0, 36, 61, 154, 13, 0, 62, 226, 227, 2, 190, 69, 35, 248, 189, 153, 11, 234, 61, 141, 79, 28, 190, 205, 34, 34, 190, 89, 25, 57, 61, 229, 36, 161, 61, 112, 59, 56, 189, 9, 24, 107, 189, 90, 52, 36, 190, 18, 165, 14, 61, 236, 15, 50, 190, 150, 130, 159, 189, 229, 25, 48, 190, 228, 12, 132, 189, 215, 76, 18, 189, 61, 133, 199, 60, 107, 42, 146, 189, 2, 134, 187, 61, 148, 227, 201, 189, 142, 114, 115, 189, 174, 49, 18, 190, 77, 147, 145, 61, 52, 165, 98, 60, 86, 131, 16, 190, 20, 192, 173, 61, 181, 139, 9, 60, 190, 113, 238, 60, 143, 216, 239, 189, 206, 6, 152, 189, 206, 112, 158, 61, 43, 100, 244, 189, 22, 128, 206, 61, 58, 132, 148, 61, 7, 116, 222, 61, 173, 231, 51, 62, 30, 221, 167, 189, 44, 61, 12, 190, 11, 164, 248, 189, 177, 228, 26, 60, 125, 148, 22, 62, 42, 65, 20, 62, 112, 36, 36, 62, 112, 37, 176, 59, 212, 192, 38, 190, 54, 206, 160, 189, 70, 84, 33, 62, 86, 25, 24, 62, 73, 223, 220, 188, 27, 67, 217, 61, 30, 110, 188, 58, 19, 87, 246, 61, 252, 208, 141, 188, 50, 206, 154, 60, 223, 23, 232, 61, 115, 206, 186, 61, 76, 237, 224, 60, 175, 10, 166, 61, 56, 20, 11, 61, 49, 54, 51, 61, 100, 199, 22, 189, 72, 80, 2, 61, 101, 196, 14, 62, 111, 33, 209, 189, 203, 178, 186, 189, 162, 146, 27, 62, 211, 65, 137, 61, 44, 39, 109, 188, 229, 28, 254, 188, 9, 164, 19, 62, 48, 144, 107, 188, 106, 198, 26, 190, 69, 28, 98, 189, 221, 223, 139, 189, 31, 232, 208, 61, 230, 21, 177, 60, 212, 3, 13, 190, 20, 49, 5, 190, 153, 33, 136, 189, 74, 58, 125, 61, 13, 66, 0, 189, 124, 117, 39, 62, 82, 54, 205, 187, 224, 100, 212, 61, 208, 160, 55, 59, 95, 206, 142, 61, 84, 227, 173, 189, 32, 75, 159, 189, 226, 144, 37, 190, 51, 16, 23, 189, 49, 138, 152, 189, 28, 8, 221, 61, 113, 203, 52, 190, 200, 77, 206, 188, 73, 97, 105, 189, 175, 64, 30, 62, 238, 152, 17, 190, 12, 133, 15, 189, 86, 205, 244, 61, 39, 165, 181, 61, 236, 202, 199, 61, 217, 211, 49, 190, 247, 82, 236, 189, 121, 54, 0, 190, 117, 130, 144, 188, 39, 222, 25, 62, 74, 123, 89, 60, 49, 19, 145, 59, 241, 235, 39, 62, 252, 251, 39, 62, 66, 238, 6, 62, 21, 11, 238, 188, 107, 120, 247, 189, 151, 107, 134, 189, 9, 113, 32, 189, 44, 136, 154, 188, 75, 236, 192, 61, 82, 45, 156, 60, 112, 252, 202, 61, 46, 140, 4, 190, 251, 93, 206, 189, 22, 39, 35, 189, 61, 136, 46, 62, 102, 252, 249, 61, 132, 151, 25, 190, 231, 131, 165, 189, 104, 113, 52, 61, 78, 229, 134, 61, 252, 63, 84, 61, 173, 9, 240, 61, 64, 100, 243, 189, 185, 55, 49, 62, 142, 147, 170, 59, 33, 113, 38, 62, 203, 18, 167, 189, 253, 18, 222, 60, 221, 140, 235, 189, 117, 229, 52, 62, 245, 227, 152, 189, 246, 134, 113, 61, 1, 120, 41, 61, 128, 239, 128, 189, 68, 151, 143, 61, 214, 145, 16, 188, 221, 55, 39, 190, 154, 85, 139, 61, 150, 174, 125, 61, 202, 251, 132, 61, 151, 86, 172, 189, 72, 150, 179, 189, 236, 150, 51, 62, 180, 127, 52, 61, 123, 50, 112, 189, 140, 161, 230, 61, 101, 2, 230, 61, 147, 97, 35, 189, 104, 176, 117, 189, 182, 239, 23, 190, 48, 206, 7, 190, 207, 253, 43, 62, 47, 136, 15, 62, 238, 70, 156, 61, 36, 66, 32, 62, 252, 129, 210, 189, 228, 242, 161, 189, 178, 131, 5, 189, 225, 145, 37, 62, 161, 15, 188, 61, 21, 228, 144, 61, 195, 40, 92, 61, 12, 184, 53, 61, 213, 112, 6, 187, 168, 100, 46, 62, 51, 144, 27, 189, 93, 29, 30, 190, 42, 13, 140, 189, 178, 39, 131, 61, 2, 168, 231, 61, 73, 223, 37, 61, 196, 236, 232, 60, 168, 101, 2, 190, 23, 219, 35, 190, 165, 141, 206, 61, 204, 21, 29, 62, 255, 246, 15, 62, 158, 217, 224, 61, 193, 88, 63, 61, 81, 130, 193, 189, 11, 214, 248, 61, 14, 178, 35, 189, 61, 128, 131, 61, 2, 17, 252, 61, 140, 178, 63, 189, 188, 175, 142, 61, 20, 106, 200, 187, 239, 154, 183, 61, 215, 254, 164, 189, 75, 77, 137, 61, 47, 112, 190, 185, 39, 222, 133, 188, 196, 28, 129, 61, 102, 138, 8, 189, 158, 158, 243, 61, 63, 136, 142, 189, 216, 105, 17, 190, 222, 61, 31, 62, 241, 73, 49, 190, 77, 58, 230, 189, 47, 53, 125, 60, 207, 162, 238, 189, 95, 40, 53, 189, 69, 11, 46, 190, 192, 12, 229, 61, 101, 154, 11, 190, 240, 152, 124, 61, 107, 96, 18, 190, 88, 129, 198, 189, 72, 78, 7, 62, 240, 99, 239, 61, 63, 186, 3, 190, 96, 93, 156, 189, 175, 216, 44, 190, 70, 199, 252, 188, 207, 119, 91, 61, 152, 58, 21, 61, 188, 176, 227, 188, 200, 230, 191, 189, 218, 245, 247, 189, 190, 170, 31, 62, 8, 111, 184, 61, 37, 5, 148, 58, 19, 250, 15, 188, 93, 217, 186, 61, 61, 202, 197, 60, 11, 101, 176, 189, 71, 132, 18, 190, 86, 92, 161, 61, 228, 235, 31, 62, 86, 209, 196, 60, 232, 161, 36, 61, 34, 82, 223, 189, 64, 202, 3, 62, 71, 118, 42, 61, 82, 91, 252, 61, 244, 185, 14, 190, 8, 184, 131, 61, 47, 114, 19, 62, 140, 223, 233, 188, 118, 44, 80, 189, 231, 163, 5, 188, 189, 164, 180, 61, 93, 246, 23, 60, 64, 15, 0, 189, 230, 139, 169, 189, 141, 181, 33, 190, 224, 200, 174, 188, 43, 254, 186, 189, 16, 142, 18, 190, 50, 85, 34, 62, 65, 155, 116, 59, 112, 67, 27, 62, 140, 49, 121, 189, 184, 89, 4, 189, 195, 10, 189, 189, 140, 137, 46, 60, 156, 201, 20, 62, 147, 36, 142, 61, 174, 12, 4, 62, 101, 104, 110, 61, 235, 61, 248, 188, 71, 166, 44, 62, 141, 40, 155, 188, 111, 142, 5, 190, 9, 160, 41, 189, 32, 180, 3, 62, 128, 224, 25, 61, 16, 20, 66, 189, 98, 194, 29, 190, 106, 196, 220, 61, 75, 119, 3, 62, 211, 230, 215, 60, 205, 158, 80, 189, 231, 205, 149, 189, 156, 43, 144, 189, 54, 34, 26, 190, 122, 78, 9, 190, 52, 158, 153, 189, 197, 77, 202, 61, 147, 2, 147, 189, 33, 59, 246, 189, 152, 1, 23, 190, 59, 109, 141, 189, 230, 141, 187, 61, 43, 14, 30, 62, 112, 149, 30, 62, 19, 60, 50, 62, 212, 49, 164, 61, 147, 216, 160, 61, 23, 239, 50, 62, 185, 158, 224, 189, 49, 191, 150, 61, 160, 251, 222, 60, 8, 200, 150, 188, 200, 254, 48, 60, 201, 130, 37, 190, 83, 226, 35, 62, 200, 10, 24, 60, 249, 90, 78, 61, 150, 56, 232, 188, 89, 188, 32, 62, 142, 157, 59, 189, 21, 1, 27, 190, 201, 101, 148, 61, 138, 16, 36, 190, 121, 99, 19, 190, 188, 6, 182, 189, 196, 212, 50, 189, 89, 115, 45, 190, 222, 217, 65, 189, 206, 145, 146, 61, 126, 72, 38, 61, 102, 66, 89, 189, 180, 20, 42, 190, 173, 28, 216, 61, 88, 132, 222, 61, 224, 59, 8, 188, 56, 227, 199, 189, 17, 24, 36, 190, 227, 221, 164, 61, 254, 41, 128, 189, 27, 69, 26, 61, 64, 104, 26, 62, 67, 157, 232, 60, 113, 229, 106, 189, 189, 124, 103, 189, 49, 88, 18, 62, 167, 149, 157, 189, 157, 242, 150, 61, 104, 10, 189, 189, 10, 41, 180, 60, 227, 240, 35, 62, 25, 45, 241, 189, 225, 9, 252, 188, 232, 5, 33, 62, 175, 91, 151, 61, 160, 102, 192, 61, 95, 11, 191, 188, 72, 99, 12, 62, 85, 44, 184, 61, 93, 121, 129, 188, 165, 166, 235, 189, 0, 143, 106, 61, 127, 83, 174, 61, 128, 112, 13, 62, 169, 212, 215, 60, 119, 1, 33, 62, 200, 240, 17, 62, 1, 94, 48, 60, 94, 119, 202, 189, 47, 112, 177, 59, 241, 237, 21, 62, 154, 183, 150, 61, 187, 202, 12, 62, 170, 253, 162, 59, 91, 188, 36, 62, 216, 162, 29, 190, 138, 71, 13, 60, 61, 95, 244, 188, 218, 166, 194, 188, 228, 190, 36, 62, 221, 240, 14, 60, 206, 232, 190, 189, 107, 147, 227, 189, 253, 128, 17, 190, 225, 175, 175, 61, 68, 171, 250, 187, 169, 30, 252, 61, 184, 59, 25, 61, 141, 85, 15, 62, 146, 108, 68, 60, 68, 53, 246, 188, 70, 160, 201, 61, 92, 10, 190, 60, 47, 138, 154, 189, 15, 93, 41, 189, 173, 232, 16, 62, 77, 213, 70, 61, 59, 250, 9, 190, 45, 116, 1, 190, 1, 127, 244, 61, 30, 172, 86, 61, 121, 238, 152, 189, 249, 248, 153, 61, 210, 232, 142, 188, 102, 198, 209, 189, 210, 214, 155, 189, 177, 177, 200, 189, 77, 210, 28, 190, 101, 157, 100, 189, 199, 146, 187, 189, 198, 33, 47, 61, 5, 4, 36, 190, 167, 25, 70, 189, 241, 92, 34, 189, 82, 4, 0, 190, 28, 171, 128, 60, 134, 71, 253, 189, 56, 2, 255, 187, 3, 136, 151, 60, 242, 177, 232, 61, 152, 41, 165, 61, 178, 128, 226, 189, 147, 81, 50, 190, 47, 89, 53, 189, 168, 213, 221, 61, 220, 61, 72, 61, 154, 220, 73, 188, 45, 55, 223, 61, 22, 20, 139, 61, 115, 17, 170, 61, 31, 233, 32, 190, 46, 226, 121, 59, 73, 222, 185, 61, 36, 207, 221, 189, 43, 251, 35, 62, 224, 212, 41, 190, 242, 97, 55, 189, 90, 1, 219, 189, 143, 88, 40, 190, 33, 50, 103, 189, 105, 138, 154, 189, 24, 146, 70, 189, 52, 186, 26, 62, 96, 222, 166, 188, 71, 132, 233, 189, 140, 79, 216, 189, 176, 63, 231, 60, 125, 82, 248, 188, 154, 54, 112, 59, 99, 49, 175, 61, 213, 189, 49, 190, 197, 251, 241, 189, 54, 104, 124, 61, 47, 35, 12, 62, 14, 198, 5, 190, 91, 144, 147, 189, 250, 98, 141, 189, 28, 215, 136, 61, 245, 179, 204, 61, 93, 135, 47, 62, 152, 235, 12, 190, 157, 168, 25, 60, 240, 170, 113, 189, 141, 48, 182, 61, 244, 38, 245, 188, 238, 39, 99, 61, 117, 98, 237, 61, 156, 158, 228, 60, 30, 121, 248, 189, 193, 202, 38, 190, 239, 245, 254, 187, 87, 180, 48, 61, 185, 13, 147, 189, 36, 20, 254, 189, 215, 245, 25, 62, 7, 189, 240, 61, 233, 100, 216, 188, 70, 226, 206, 61, 191, 151, 27, 61, 25, 16, 160, 189, 240, 97, 229, 189, 4, 11, 245, 189, 219, 123, 99, 61, 108, 123, 64, 61, 34, 85, 2, 189, 236, 192, 11, 62, 231, 225, 135, 189, 159, 148, 144, 188, 190, 109, 150, 59, 45, 9, 167, 61, 10, 172, 118, 61, 78, 159, 121, 189, 41, 175, 194, 188, 115, 216, 192, 61, 183, 232, 183, 61, 145, 32, 125, 189, 248, 176, 184, 61, 136, 178, 45, 62, 144, 225, 19, 190, 140, 8, 41, 189, 87, 174, 167, 61, 134, 150, 83, 61, 177, 165, 254, 189, 82, 25, 165, 61, 118, 212, 152, 61, 234, 16, 27, 62, 17, 185, 241, 189, 241, 243, 160, 61, 193, 227, 15, 188, 75, 15, 49, 190, 23, 192, 229, 61, 51, 54, 52, 189, 75, 109, 52, 62, 224, 140, 73, 186, 55, 67, 35, 62, 255, 99, 123, 61, 12, 73, 20, 190, 127, 127, 41, 61, 8, 249, 104, 61, 201, 72, 108, 189, 239, 65, 195, 189, 193, 51, 175, 189, 202, 206, 199, 61, 168, 75, 75, 189, 163, 191, 19, 190, 79, 152, 75, 60, 4, 56, 202, 189, 169, 219, 126, 61, 41, 103, 114, 189, 208, 161, 169, 189, 93, 230, 28, 190, 24, 121, 147, 61, 169, 255, 249, 60, 38, 75, 204, 189, 43, 201, 207, 59, 54, 82, 31, 62, 19, 223, 144, 61, 170, 95, 218, 189, 68, 102, 141, 61, 119, 229, 30, 61, 92, 218, 45, 61, 195, 176, 214, 189, 95, 80, 225, 189, 248, 183, 17, 61, 248, 226, 131, 61, 159, 103, 217, 61, 75, 146, 227, 61, 250, 58, 217, 61, 176, 65, 193, 61, 254, 191, 147, 189, 29, 219, 47, 62, 217, 155, 146, 189, 50, 8, 20, 188, 2, 53, 50, 62, 72, 140, 158, 188, 166, 62, 94, 188, 243, 171, 114, 61, 237, 197, 16, 62, 176, 166, 110, 189, 242, 162, 189, 61, 189, 179, 167, 189, 130, 30, 138, 61, 82, 115, 54, 188, 4, 74, 6, 190, 193, 191, 64, 189, 168, 157, 54, 187, 212, 117, 39, 190, 33, 45, 129, 188, 72, 212, 17, 62, 53, 31, 71, 189, 9, 61, 48, 60, 168, 140, 251, 61, 0, 172, 64, 189, 83, 19, 34, 189, 28, 222, 191, 187, 180, 123, 251, 189, 19, 4, 239, 189, 196, 185, 161, 60, 242, 20, 45, 62, 42, 154, 174, 59, 15, 9, 217, 61, 96, 207, 187, 189, 167, 87, 7, 190, 170, 202, 42, 188, 92, 39, 37, 62, 64, 136, 53, 188, 28, 93, 212, 61, 175, 110, 219, 61, 12, 206, 8, 62, 108, 151, 225, 188, 25, 145, 247, 188, 129, 184, 14, 62, 125, 234, 32, 190, 195, 120, 65, 60, 45, 203, 252, 61, 151, 158, 182, 189, 192, 4, 28, 61, 241, 7, 202, 189, 157, 97, 40, 190, 156, 155, 143, 61, 189, 187, 5, 62, 151, 221, 240, 61, 7, 247, 48, 189, 79, 225, 129, 61, 30, 18, 198, 189, 164, 255, 37, 62, 3, 228, 136, 61, 58, 214, 35, 62, 110, 92, 114, 189, 11, 127, 148, 61, 182, 10, 107, 189, 172, 204, 89, 61, 137, 167, 189, 189, 14, 193, 133, 189, 34, 175, 254, 61, 174, 124, 6, 190, 23, 95, 232, 189, 231, 85, 206, 61, 223, 167, 9, 62, 254, 243, 24, 62, 94, 215, 25, 190, 94, 190, 139, 61, 197, 29, 236, 189, 229, 176, 2, 62, 86, 97, 11, 61, 56, 15, 75, 60, 65, 134, 113, 61, 153, 104, 246, 60, 75, 0, 39, 189, 124, 58, 132, 189, 177, 2, 170, 189, 149, 169, 157, 189, 96, 48, 17, 62, 166, 94, 73, 61, 44, 167, 167, 60, 60, 97, 54, 189, 207, 251, 242, 61, 83, 2, 107, 60, 36, 151, 64, 189, 184, 251, 112, 189, 248, 79, 141, 61, 145, 190, 252, 60, 182, 181, 252, 189, 95, 197, 143, 61, 178, 101, 98, 61, 92, 251, 44, 190, 15, 191, 7, 190, 96, 92, 158, 61, 9, 218, 137, 189, 43, 199, 173, 61, 231, 192, 240, 189, 248, 128, 200, 189, 117, 46, 179, 187, 196, 13, 164, 60, 131, 211, 139, 187, 16, 187, 89, 61, 219, 126, 173, 188, 247, 183, 113, 189, 241, 103, 245, 189, 105, 96, 194, 189, 67, 101, 149, 61, 121, 37, 209, 189, 84, 27, 8, 62, 237, 30, 48, 190, 135, 26, 9, 189, 255, 77, 143, 189, 52, 158, 240, 189, 191, 230, 60, 189, 146, 32, 255, 189, 9, 62, 251, 60, 229, 15, 188, 188, 68, 168, 221, 189, 127, 172, 1, 188, 37, 126, 175, 189, 184, 234, 41, 190, 83, 0, 254, 188, 46, 27, 160, 60, 249, 73, 233, 60, 159, 238, 178, 189, 156, 189, 218, 189, 187, 147, 233, 189, 95, 114, 217, 61, 233, 179, 209, 61, 193, 214, 38, 190, 201, 65, 143, 189, 4, 163, 162, 189, 111, 17, 177, 188, 204, 224, 49, 62, 179, 172, 235, 189, 116, 226, 69, 189, 22, 80, 13, 62, 99, 66, 142, 61, 36, 113, 197, 60, 47, 178, 190, 189, 171, 241, 2, 190, 116, 222, 99, 61, 200, 6, 16, 190, 123, 137, 122, 189, 210, 37, 229, 61, 34, 245, 34, 189, 89, 134, 183, 189, 36, 127, 8, 61, 199, 95, 93, 61, 188, 166, 162, 61, 13, 95, 16, 62, 169, 158, 130, 61, 69, 130, 24, 189, 223, 25, 140, 59, 191, 152, 179, 61, 137, 255, 196, 189, 147, 163, 0, 62, 174, 141, 111, 189, 254, 86, 152, 189, 48, 223, 150, 188, 212, 237, 50, 190, 105, 181, 38, 190, 131, 171, 90, 189, 200, 47, 102, 61, 52, 175, 52, 190, 176, 94, 143, 60, 160, 10, 96, 188, 135, 3, 210, 189, 76, 94, 175, 61, 81, 82, 23, 190, 32, 177, 113, 61, 160, 120, 41, 60, 123, 247, 207, 189, 48, 78, 175, 189, 7, 30, 47, 189, 54, 146, 8, 190, 152, 137, 207, 188, 121, 116, 231, 189, 205, 36, 32, 190, 84, 174, 12, 190, 46, 220, 69, 61, 90, 203, 235, 61, 252, 230, 111, 61, 109, 152, 187, 61, 40, 182, 13, 62, 164, 248, 212, 189, 16, 177, 18, 190, 212, 53, 19, 61, 125, 176, 50, 62, 71, 127, 244, 61, 215, 2, 122, 61, 158, 54, 24, 190, 179, 76, 169, 189, 111, 118, 205, 61, 32, 49, 44, 61, 137, 224, 25, 62, 51, 30, 42, 62, 213, 37, 25, 62, 2, 25, 12, 190, 118, 221, 52, 190, 120, 84, 245, 189, 19, 231, 51, 62, 149, 224, 246, 189, 137, 153, 23, 190, 11, 46, 182, 61, 152, 195, 225, 189, 179, 37, 251, 189, 249, 109, 41, 62, 66, 220, 40, 62, 153, 249, 118, 60, 69, 24, 22, 190, 172, 128, 40, 61, 147, 193, 13, 190, 151, 145, 161, 61, 79, 183, 195, 61, 178, 210, 38, 189, 205, 75, 39, 189, 189, 189, 14, 62, 194, 113, 51, 190, 170, 77, 11, 190, 39, 238, 0, 61, 229, 158, 245, 61, 171, 199, 181, 61, 246, 227, 18, 62, 10, 87, 57, 61, 248, 158, 231, 59, 182, 197, 217, 59, 21, 184, 208, 188, 46, 148, 127, 189, 130, 47, 143, 189, 234, 115, 28, 62, 19, 112, 123, 189, 96, 107, 71, 189, 86, 39, 25, 190, 80, 226, 37, 61, 115, 233, 157, 61, 92, 5, 13, 62, 185, 131, 0, 190, 23, 163, 170, 188, 231, 221, 137, 189, 49, 173, 31, 189, 19, 242, 124, 189, 75, 61, 3, 62, 176, 141, 32, 190, 24, 210, 19, 190, 195, 139, 225, 189, 34, 238, 205, 189, 100, 110, 37, 60, 160, 92, 79, 187, 56, 113, 21, 190, 82, 28, 20, 62, 89, 164, 165, 189, 96, 171, 132, 61, 196, 125, 42, 62, 93, 44, 178, 189, 148, 62, 225, 61, 43, 239, 206, 61, 49, 231, 200, 61, 159, 99, 205, 61, 112, 46, 21, 62, 218, 231, 45, 62, 143, 210, 188, 61, 162, 229, 53, 189, 37, 233, 7, 190, 117, 122, 21, 190, 220, 164, 192, 189, 73, 42, 25, 62, 58, 20, 24, 62, 95, 180, 153, 186, 4, 59, 184, 61, 12, 177, 207, 61, 114, 86, 80, 189, 2, 197, 212, 60, 31, 4, 231, 189, 171, 235, 184, 189, 244, 88, 220, 189, 102, 193, 9, 62, 40, 198, 149, 60, 121, 58, 52, 61, 189, 243, 219, 189, 150, 29, 32, 190, 69, 89, 232, 188, 247, 215, 214, 189, 125, 78, 66, 61, 98, 196, 243, 60, 244, 147, 32, 190, 253, 230, 36, 62, 193, 246, 213, 61, 63, 132, 33, 62, 141, 90, 45, 61, 223, 178, 3, 189, 44, 253, 41, 190, 169, 49, 29, 190, 23, 37, 35, 190, 223, 180, 209, 61, 242, 243, 224, 189, 69, 37, 46, 62, 252, 94, 16, 62, 115, 181, 114, 61, 250, 153, 117, 189, 139, 194, 17, 190, 132, 140, 0, 62, 191, 228, 250, 189, 242, 67, 1, 62, 28, 117, 241, 188, 146, 79, 95, 189, 82, 251, 215, 61, 92, 213, 204, 61, 144, 21, 48, 190, 40, 165, 15, 190, 226, 239, 41, 190, 10, 199, 13, 188, 187, 110, 2, 190, 34, 162, 14, 189, 3, 164, 7, 190, 10, 188, 50, 61, 170, 119, 1, 62, 241, 148, 213, 61, 5, 6, 25, 190, 240, 185, 97, 61, 23, 45, 191, 189, 120, 237, 50, 62, 117, 113, 15, 62, 43, 114, 8, 61, 82, 55, 29, 190, 242, 191, 44, 190, 116, 89, 16, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 191, 245, 189, 245, 201, 37, 62, 167, 103, 39, 189, 20, 127, 135, 61, 173, 17, 141, 189, 200, 51, 22, 62, 140, 154, 255, 189, 18, 31, 44, 190, 115, 86, 39, 190, 16, 32, 120, 188, 168, 117, 206, 61, 150, 123, 193, 189, 4, 174, 228, 189, 198, 24, 65, 188, 74, 91, 60, 188, 3, 61, 208, 61, 174, 82, 28, 62, 151, 3, 33, 62, 218, 248, 218, 61, 169, 244, 18, 62, 29, 250, 211, 187, 172, 234, 203, 189, 43, 208, 3, 62, 255, 151, 171, 189, 74, 143, 9, 190, 109, 8, 161, 61, 227, 4, 12, 190, 51, 137, 131, 188, 246, 95, 155, 61, 19, 139, 113, 60, 82, 179, 176, 188, 82, 133, 7, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 71, 172, 189, 149, 241, 62, 61, 238, 87, 159, 60, 68, 24, 250, 189, 206, 94, 20, 189, 116, 147, 120, 60, 106, 22, 167, 61, 126, 35, 6, 62, 192, 131, 85, 61, 77, 40, 79, 59, 193, 51, 191, 61, 183, 19, 31, 61, 96, 182, 156, 61, 229, 3, 36, 190, 30, 10, 37, 189, 189, 191, 22, 190, 231, 25, 183, 189, 53, 214, 211, 188, 217, 225, 193, 189, 189, 77, 230, 189, 74, 205, 203, 61, 173, 196, 27, 190, 154, 92, 191, 189, 187, 240, 134, 61, 58, 133, 132, 61, 233, 216, 142, 59, 234, 48, 168, 61, 62, 99, 172, 187, 100, 186, 252, 188, 165, 166, 32, 62, 132, 192, 188, 188, 231, 28, 224, 189, 202, 43, 113, 187, 117, 74, 183, 60, 209, 37, 10, 190, 98, 82, 189, 189, 126, 234, 39, 190, 84, 4, 145, 189, 151, 88, 218, 188, 185, 197, 108, 188, 254, 135, 192, 59, 228, 206, 224, 61, 58, 7, 103, 61, 45, 151, 194, 61, 152, 117, 174, 189, 39, 150, 46, 190, 194, 104, 62, 61, 31, 40, 86, 189, 236, 222, 38, 190, 77, 103, 232, 61, 242, 114, 38, 62, 221, 237, 13, 61, 95, 59, 146, 61, 117, 118, 201, 61, 100, 5, 198, 61, 62, 71, 12, 62, 14, 107, 117, 61, 108, 195, 199, 61, 91, 249, 118, 189, 44, 201, 240, 189, 91, 17, 26, 188, 179, 239, 233, 187, 230, 140, 8, 190, 16, 179, 28, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 167, 110, 61, 116, 85, 243, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {248, 159, 115, 191, 81, 143, 135, 63, 153, 110, 146, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {50, 225, 230, 60, 227, 84, 172, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0022/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}