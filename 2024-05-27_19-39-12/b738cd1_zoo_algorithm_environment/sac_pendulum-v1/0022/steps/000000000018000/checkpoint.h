// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {7, 197, 13, 191, 86, 51, 185, 63, 132, 21, 228, 62, 0, 72, 242, 190, 174, 201, 94, 191, 25, 95, 218, 62, 199, 95, 22, 63, 217, 26, 157, 63, 58, 140, 146, 62, 224, 149, 51, 63, 3, 78, 156, 191, 58, 224, 207, 190, 15, 217, 61, 190, 237, 5, 185, 189, 203, 215, 96, 190, 231, 228, 196, 62, 183, 89, 77, 191, 192, 146, 151, 190, 23, 17, 174, 190, 202, 230, 199, 191, 63, 112, 186, 190, 111, 27, 5, 191, 95, 118, 68, 63, 140, 137, 213, 189, 169, 136, 3, 191, 177, 251, 224, 190, 97, 202, 135, 190, 216, 238, 52, 62, 44, 194, 228, 62, 201, 223, 30, 190, 210, 189, 153, 62, 101, 192, 249, 61, 162, 79, 155, 190, 43, 95, 197, 62, 169, 190, 10, 191, 205, 103, 247, 188, 187, 160, 90, 191, 83, 174, 224, 63, 11, 128, 231, 62, 35, 192, 197, 189, 62, 225, 129, 63, 157, 64, 66, 63, 81, 105, 3, 190, 124, 138, 53, 63, 217, 28, 17, 190, 192, 153, 174, 62, 65, 54, 180, 62, 62, 98, 176, 190, 28, 95, 81, 62, 149, 198, 219, 191, 79, 72, 163, 190, 59, 126, 227, 62, 146, 6, 200, 62, 1, 68, 203, 62, 250, 75, 145, 191, 47, 115, 25, 191, 4, 175, 89, 189, 56, 47, 149, 191, 113, 8, 237, 61, 207, 201, 104, 59, 194, 54, 134, 62, 237, 230, 211, 62, 78, 33, 17, 63, 233, 221, 236, 190, 19, 13, 88, 63, 162, 70, 91, 62, 26, 10, 131, 61, 195, 244, 215, 191, 186, 180, 174, 190, 242, 248, 176, 62, 181, 12, 233, 61, 102, 201, 142, 188, 132, 37, 156, 62, 78, 165, 29, 191, 165, 248, 78, 62, 65, 110, 219, 62, 98, 182, 1, 190, 26, 118, 239, 190, 201, 199, 132, 191, 245, 131, 3, 191, 247, 147, 163, 186, 105, 149, 7, 62, 223, 152, 192, 190, 233, 94, 23, 191, 162, 78, 153, 190, 98, 127, 123, 191, 81, 253, 8, 190, 27, 201, 202, 62, 60, 80, 167, 190, 119, 94, 65, 63, 111, 44, 231, 189, 17, 124, 77, 191, 155, 5, 217, 62, 21, 94, 131, 190, 67, 118, 0, 63, 225, 153, 248, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {65, 32, 128, 190, 233, 188, 154, 190, 72, 161, 239, 189, 65, 203, 6, 191, 247, 153, 151, 190, 116, 46, 1, 62, 179, 255, 43, 190, 131, 154, 210, 60, 9, 220, 32, 191, 243, 148, 7, 189, 182, 189, 172, 58, 113, 114, 39, 63, 193, 223, 66, 189, 127, 14, 235, 190, 159, 230, 8, 61, 54, 98, 43, 188, 123, 24, 49, 62, 63, 83, 9, 62, 217, 207, 4, 190, 76, 248, 162, 62, 122, 65, 153, 191, 44, 71, 33, 63, 25, 156, 193, 62, 177, 67, 0, 191, 243, 80, 255, 189, 10, 73, 156, 190, 100, 102, 182, 61, 184, 209, 6, 191, 54, 6, 105, 62, 203, 201, 236, 188, 238, 105, 14, 189, 170, 103, 170, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 223, 214, 190, 188, 171, 243, 61, 151, 252, 19, 191, 117, 23, 239, 190, 189, 183, 94, 61, 150, 253, 31, 62, 62, 167, 106, 62, 196, 31, 172, 61, 119, 236, 156, 189, 175, 98, 70, 189, 143, 174, 56, 189, 230, 3, 225, 59, 152, 26, 179, 189, 175, 133, 16, 190, 195, 24, 50, 190, 249, 122, 21, 61, 91, 124, 196, 61, 10, 0, 124, 190, 14, 117, 245, 62, 128, 151, 156, 62, 5, 117, 9, 191, 188, 194, 138, 62, 69, 23, 141, 189, 146, 215, 14, 62, 180, 85, 147, 190, 41, 93, 138, 190, 64, 41, 105, 62, 77, 137, 161, 61, 218, 30, 181, 62, 121, 129, 52, 61, 6, 10, 196, 61, 61, 145, 104, 62, 202, 243, 104, 61, 22, 114, 157, 61, 35, 10, 178, 190, 221, 181, 170, 61, 169, 26, 23, 191, 198, 135, 165, 189, 53, 157, 38, 191, 42, 157, 213, 190, 52, 166, 74, 191, 233, 254, 30, 190, 140, 235, 44, 190, 119, 98, 133, 62, 251, 12, 170, 189, 98, 23, 230, 189, 102, 23, 51, 190, 133, 129, 36, 190, 251, 44, 167, 190, 185, 204, 189, 189, 233, 231, 117, 62, 65, 192, 24, 62, 69, 1, 11, 191, 35, 107, 106, 190, 85, 110, 245, 61, 24, 188, 34, 62, 205, 53, 251, 61, 239, 26, 50, 62, 24, 188, 179, 62, 2, 151, 211, 190, 251, 206, 47, 63, 244, 61, 238, 189, 113, 218, 158, 62, 247, 54, 188, 60, 231, 136, 79, 190, 45, 86, 95, 185, 132, 238, 185, 190, 8, 220, 201, 189, 33, 223, 141, 62, 50, 173, 204, 61, 175, 135, 204, 189, 116, 91, 22, 62, 7, 132, 188, 62, 194, 191, 174, 61, 4, 244, 234, 61, 57, 155, 123, 190, 17, 220, 240, 189, 107, 81, 77, 190, 219, 136, 53, 60, 207, 73, 171, 189, 216, 234, 161, 190, 233, 118, 210, 190, 18, 177, 99, 59, 70, 126, 59, 61, 96, 1, 39, 190, 41, 251, 118, 190, 23, 30, 213, 189, 144, 72, 32, 190, 89, 104, 125, 190, 198, 8, 76, 188, 179, 161, 185, 190, 24, 116, 25, 62, 71, 88, 7, 189, 230, 80, 49, 190, 18, 255, 63, 190, 190, 145, 128, 190, 129, 95, 55, 191, 210, 79, 199, 190, 81, 129, 134, 62, 252, 92, 41, 191, 145, 80, 115, 189, 126, 174, 137, 189, 35, 148, 158, 188, 181, 150, 43, 62, 66, 170, 64, 62, 72, 41, 217, 57, 204, 239, 32, 61, 176, 79, 53, 62, 154, 246, 132, 191, 144, 129, 144, 190, 12, 59, 180, 61, 220, 114, 57, 62, 232, 77, 248, 190, 24, 205, 77, 62, 94, 46, 180, 62, 203, 3, 88, 62, 91, 189, 35, 61, 62, 56, 206, 61, 209, 205, 147, 190, 130, 198, 49, 190, 70, 138, 189, 187, 142, 96, 42, 60, 121, 127, 42, 62, 220, 94, 193, 61, 49, 144, 95, 190, 153, 3, 67, 61, 231, 146, 145, 190, 17, 172, 82, 189, 32, 139, 109, 191, 145, 48, 79, 190, 29, 228, 88, 61, 124, 154, 252, 190, 202, 234, 205, 189, 235, 234, 59, 62, 84, 158, 101, 189, 208, 237, 174, 61, 187, 43, 253, 61, 72, 246, 192, 62, 36, 165, 158, 62, 48, 110, 133, 62, 219, 173, 101, 191, 181, 164, 122, 61, 40, 29, 15, 188, 60, 95, 180, 62, 246, 122, 63, 191, 107, 102, 99, 61, 206, 115, 108, 188, 64, 111, 46, 189, 252, 1, 120, 190, 32, 192, 62, 190, 80, 187, 23, 190, 253, 188, 20, 61, 6, 212, 43, 189, 28, 45, 51, 189, 175, 93, 115, 190, 226, 32, 26, 62, 58, 243, 147, 190, 178, 46, 183, 190, 133, 149, 188, 189, 252, 117, 155, 189, 134, 198, 122, 60, 95, 235, 12, 62, 190, 153, 200, 190, 11, 79, 200, 61, 30, 64, 60, 191, 0, 191, 3, 62, 59, 124, 40, 191, 156, 39, 15, 190, 192, 206, 185, 191, 154, 26, 129, 61, 200, 108, 134, 61, 56, 149, 189, 62, 202, 89, 51, 190, 133, 233, 187, 59, 148, 25, 176, 189, 50, 86, 119, 62, 248, 220, 191, 189, 79, 19, 93, 189, 75, 186, 230, 62, 91, 138, 6, 62, 65, 181, 216, 190, 24, 216, 122, 190, 219, 235, 248, 59, 206, 112, 158, 61, 142, 168, 5, 62, 70, 97, 138, 62, 17, 175, 178, 62, 121, 44, 9, 190, 78, 31, 20, 63, 114, 6, 249, 189, 129, 138, 10, 62, 240, 231, 196, 189, 139, 53, 247, 189, 34, 24, 170, 62, 200, 135, 22, 191, 164, 45, 221, 62, 62, 71, 232, 189, 69, 228, 190, 189, 128, 148, 155, 190, 9, 21, 92, 60, 62, 120, 174, 188, 36, 14, 230, 189, 49, 120, 202, 61, 31, 53, 202, 61, 138, 33, 10, 190, 22, 167, 75, 189, 161, 242, 250, 60, 58, 57, 177, 61, 227, 143, 36, 62, 249, 170, 4, 189, 46, 116, 180, 189, 109, 86, 150, 190, 248, 18, 234, 190, 57, 229, 46, 191, 205, 36, 85, 61, 248, 120, 14, 62, 194, 133, 158, 62, 177, 122, 194, 61, 66, 132, 42, 190, 120, 127, 226, 58, 56, 111, 30, 62, 175, 98, 140, 188, 136, 176, 13, 63, 61, 70, 241, 190, 106, 198, 26, 190, 69, 28, 98, 189, 221, 223, 139, 189, 31, 232, 208, 61, 230, 21, 177, 60, 212, 3, 13, 190, 20, 49, 5, 190, 153, 33, 136, 189, 74, 58, 125, 61, 13, 66, 0, 189, 124, 117, 39, 62, 82, 54, 205, 187, 224, 100, 212, 61, 208, 160, 55, 59, 95, 206, 142, 61, 84, 227, 173, 189, 32, 75, 159, 189, 226, 144, 37, 190, 51, 16, 23, 189, 49, 138, 152, 189, 28, 8, 221, 61, 113, 203, 52, 190, 200, 77, 206, 188, 73, 97, 105, 189, 175, 64, 30, 62, 238, 152, 17, 190, 12, 133, 15, 189, 86, 205, 244, 61, 39, 165, 181, 61, 236, 202, 199, 61, 217, 211, 49, 190, 247, 82, 236, 189, 237, 188, 15, 190, 59, 116, 116, 189, 185, 251, 6, 62, 250, 227, 41, 60, 221, 23, 126, 188, 199, 74, 15, 62, 206, 110, 34, 62, 131, 49, 219, 61, 138, 56, 1, 189, 240, 226, 31, 190, 121, 131, 134, 189, 152, 210, 52, 190, 23, 149, 0, 189, 103, 240, 143, 61, 82, 45, 156, 60, 56, 146, 139, 61, 163, 154, 13, 190, 199, 244, 5, 190, 249, 43, 99, 189, 165, 138, 27, 62, 72, 250, 229, 61, 169, 29, 47, 190, 171, 192, 188, 189, 104, 113, 52, 61, 38, 36, 105, 187, 22, 7, 71, 61, 113, 137, 203, 61, 121, 232, 244, 189, 241, 143, 158, 61, 106, 45, 189, 188, 131, 58, 164, 61, 255, 184, 215, 189, 153, 134, 125, 191, 126, 254, 237, 190, 242, 174, 0, 62, 104, 93, 254, 190, 225, 11, 53, 61, 203, 73, 135, 189, 109, 193, 33, 190, 236, 175, 102, 62, 252, 253, 232, 189, 57, 221, 73, 189, 229, 79, 12, 61, 225, 135, 15, 190, 61, 219, 207, 190, 95, 239, 221, 190, 207, 31, 102, 60, 68, 214, 75, 62, 129, 66, 127, 190, 17, 54, 7, 190, 98, 250, 54, 190, 27, 81, 212, 62, 140, 42, 77, 62, 15, 243, 252, 61, 172, 253, 212, 190, 96, 216, 6, 190, 246, 43, 206, 190, 185, 20, 206, 61, 18, 122, 87, 189, 236, 63, 252, 61, 247, 239, 180, 190, 82, 98, 247, 189, 234, 151, 218, 190, 162, 112, 83, 62, 152, 33, 185, 61, 217, 64, 67, 62, 131, 217, 197, 190, 14, 189, 219, 62, 157, 223, 40, 190, 196, 157, 91, 62, 38, 193, 72, 190, 232, 17, 158, 190, 192, 89, 145, 190, 248, 184, 124, 189, 45, 237, 110, 61, 18, 31, 6, 62, 40, 213, 126, 189, 11, 39, 15, 190, 235, 63, 200, 189, 21, 51, 20, 61, 26, 240, 85, 62, 124, 43, 155, 61, 112, 11, 115, 62, 118, 138, 151, 189, 252, 128, 31, 191, 148, 141, 93, 190, 29, 134, 167, 60, 246, 104, 130, 61, 154, 107, 181, 62, 246, 78, 107, 62, 248, 251, 17, 62, 84, 103, 15, 190, 126, 238, 161, 62, 181, 131, 67, 190, 86, 227, 183, 62, 146, 183, 46, 190, 61, 121, 86, 189, 210, 214, 138, 60, 230, 100, 165, 189, 158, 158, 243, 61, 63, 136, 142, 189, 216, 105, 17, 190, 222, 61, 31, 62, 138, 141, 49, 190, 77, 58, 230, 189, 47, 53, 125, 60, 207, 162, 238, 189, 61, 81, 142, 189, 9, 180, 91, 190, 254, 186, 151, 61, 101, 154, 11, 190, 240, 152, 124, 61, 32, 246, 27, 190, 150, 251, 18, 190, 80, 169, 163, 61, 219, 235, 131, 61, 201, 201, 49, 190, 74, 125, 3, 190, 243, 235, 47, 190, 70, 199, 252, 188, 223, 134, 66, 59, 152, 58, 21, 61, 108, 152, 163, 189, 200, 230, 191, 189, 180, 200, 27, 190, 227, 172, 237, 61, 146, 137, 62, 61, 76, 197, 42, 189, 143, 39, 225, 190, 54, 241, 64, 62, 33, 121, 164, 189, 228, 30, 32, 190, 169, 83, 130, 190, 80, 77, 16, 62, 62, 134, 49, 62, 101, 182, 0, 190, 33, 138, 7, 62, 204, 213, 57, 190, 175, 57, 242, 61, 105, 44, 69, 62, 39, 46, 4, 191, 193, 108, 40, 190, 143, 215, 53, 190, 211, 77, 251, 61, 218, 124, 234, 61, 96, 187, 172, 61, 29, 58, 81, 62, 222, 139, 99, 189, 133, 147, 223, 189, 108, 109, 228, 190, 152, 70, 107, 61, 227, 8, 35, 190, 77, 143, 33, 62, 145, 186, 70, 190, 80, 213, 233, 189, 45, 185, 232, 61, 253, 131, 152, 62, 227, 252, 118, 62, 235, 53, 82, 62, 141, 171, 66, 190, 153, 36, 56, 190, 85, 15, 182, 61, 201, 116, 150, 190, 176, 141, 180, 189, 248, 113, 208, 189, 27, 28, 52, 62, 131, 232, 220, 61, 63, 1, 29, 62, 192, 67, 58, 190, 161, 253, 90, 189, 225, 70, 178, 61, 252, 147, 122, 62, 107, 69, 26, 190, 190, 23, 19, 189, 19, 162, 57, 190, 172, 44, 124, 62, 245, 98, 14, 189, 150, 51, 132, 190, 24, 195, 225, 61, 50, 133, 94, 189, 134, 50, 91, 190, 231, 224, 53, 190, 46, 236, 191, 189, 176, 149, 156, 189, 47, 175, 235, 61, 70, 39, 69, 188, 140, 211, 179, 186, 166, 160, 172, 189, 182, 44, 43, 62, 108, 114, 50, 190, 219, 163, 140, 62, 30, 186, 79, 62, 49, 224, 139, 60, 83, 23, 80, 62, 179, 4, 14, 61, 17, 86, 132, 190, 12, 252, 6, 190, 84, 96, 135, 62, 139, 211, 143, 190, 133, 154, 131, 60, 88, 79, 165, 61, 187, 143, 177, 60, 128, 117, 182, 62, 123, 156, 55, 62, 240, 127, 198, 190, 99, 69, 236, 188, 141, 66, 84, 62, 198, 167, 143, 62, 89, 95, 127, 191, 166, 202, 20, 62, 117, 224, 18, 191, 97, 78, 126, 190, 171, 61, 18, 62, 68, 129, 33, 190, 110, 141, 180, 190, 208, 222, 69, 189, 161, 12, 164, 62, 128, 171, 232, 61, 16, 14, 55, 190, 60, 25, 100, 190, 115, 10, 131, 191, 168, 138, 106, 62, 130, 199, 159, 61, 147, 0, 205, 190, 25, 121, 187, 191, 166, 246, 197, 189, 103, 31, 192, 62, 36, 77, 46, 191, 27, 164, 81, 62, 184, 230, 43, 190, 10, 33, 206, 188, 7, 85, 11, 62, 165, 17, 1, 62, 175, 8, 71, 61, 218, 21, 169, 61, 104, 52, 164, 190, 131, 172, 31, 191, 44, 143, 170, 59, 220, 104, 193, 189, 226, 205, 57, 59, 118, 108, 99, 190, 6, 166, 33, 62, 48, 199, 11, 62, 88, 4, 95, 62, 109, 74, 248, 61, 240, 158, 226, 62, 247, 64, 113, 190, 163, 128, 240, 189, 47, 1, 52, 190, 170, 221, 191, 188, 245, 247, 123, 61, 87, 231, 106, 61, 82, 79, 232, 59, 50, 183, 85, 62, 234, 59, 129, 190, 118, 110, 31, 62, 251, 85, 2, 61, 44, 191, 134, 62, 253, 136, 13, 62, 64, 167, 220, 190, 173, 18, 205, 189, 151, 214, 137, 61, 199, 129, 140, 190, 128, 46, 48, 60, 40, 152, 254, 189, 187, 53, 58, 62, 9, 188, 153, 62, 192, 190, 173, 188, 43, 1, 211, 189, 153, 32, 141, 60, 159, 177, 165, 189, 226, 125, 135, 62, 177, 198, 57, 191, 195, 206, 42, 62, 60, 195, 168, 188, 233, 31, 200, 61, 89, 120, 11, 62, 168, 8, 218, 61, 213, 208, 127, 190, 158, 144, 156, 60, 49, 137, 37, 190, 140, 13, 213, 59, 238, 56, 250, 61, 228, 208, 204, 61, 31, 206, 181, 190, 19, 229, 18, 189, 159, 46, 131, 62, 189, 156, 58, 62, 118, 132, 153, 189, 58, 208, 15, 61, 65, 98, 254, 188, 102, 198, 209, 189, 159, 114, 163, 189, 62, 104, 211, 189, 215, 71, 55, 190, 156, 149, 147, 189, 199, 146, 187, 189, 198, 33, 47, 61, 31, 91, 41, 190, 122, 16, 161, 189, 251, 255, 131, 189, 211, 126, 34, 190, 120, 132, 26, 60, 134, 1, 2, 190, 209, 141, 2, 189, 22, 28, 0, 188, 168, 121, 117, 61, 232, 232, 169, 60, 143, 152, 226, 189, 174, 170, 91, 190, 123, 6, 156, 189, 168, 213, 221, 61, 230, 35, 157, 60, 154, 220, 73, 188, 99, 28, 121, 61, 22, 20, 139, 61, 209, 210, 59, 61, 235, 161, 50, 190, 239, 119, 68, 186, 246, 101, 137, 61, 187, 223, 17, 190, 31, 222, 251, 61, 110, 196, 75, 190, 242, 97, 55, 189, 90, 1, 219, 189, 128, 231, 44, 190, 244, 49, 176, 189, 105, 138, 154, 189, 24, 146, 70, 189, 52, 186, 26, 62, 45, 21, 250, 188, 246, 198, 25, 190, 66, 83, 15, 190, 204, 84, 118, 187, 125, 82, 248, 188, 18, 144, 42, 58, 199, 207, 119, 61, 178, 194, 77, 190, 251, 178, 59, 190, 86, 52, 42, 58, 122, 54, 234, 61, 88, 173, 34, 190, 150, 35, 198, 189, 250, 98, 141, 189, 173, 75, 0, 61, 245, 179, 204, 61, 76, 164, 4, 62, 152, 235, 12, 190, 118, 64, 236, 188, 28, 117, 146, 189, 113, 74, 140, 61, 249, 246, 143, 189, 59, 71, 152, 190, 2, 75, 149, 62, 1, 136, 93, 61, 130, 240, 79, 191, 188, 102, 62, 189, 14, 26, 6, 61, 89, 155, 22, 62, 178, 23, 8, 62, 8, 252, 33, 58, 16, 233, 155, 62, 198, 185, 128, 62, 122, 156, 66, 61, 110, 182, 52, 191, 111, 86, 27, 189, 107, 37, 132, 189, 245, 148, 216, 61, 185, 244, 55, 191, 216, 159, 58, 62, 32, 169, 137, 190, 8, 245, 199, 189, 39, 13, 1, 63, 15, 53, 247, 189, 194, 244, 29, 190, 140, 212, 125, 59, 95, 63, 140, 62, 200, 125, 192, 189, 100, 91, 119, 190, 80, 107, 181, 60, 193, 137, 243, 190, 224, 31, 145, 62, 111, 4, 189, 189, 6, 203, 28, 189, 180, 186, 173, 61, 214, 138, 188, 61, 45, 21, 66, 190, 21, 15, 167, 62, 216, 135, 19, 62, 153, 146, 48, 189, 66, 106, 109, 189, 198, 62, 33, 189, 52, 235, 110, 62, 170, 157, 134, 188, 71, 232, 48, 62, 145, 192, 154, 188, 84, 191, 110, 189, 188, 53, 87, 62, 191, 204, 210, 189, 151, 213, 123, 62, 159, 165, 115, 61, 10, 54, 169, 62, 165, 141, 175, 190, 70, 133, 60, 191, 117, 112, 77, 62, 39, 140, 232, 190, 84, 81, 32, 189, 183, 174, 188, 189, 47, 62, 121, 62, 252, 94, 107, 62, 239, 3, 43, 191, 36, 108, 71, 189, 208, 185, 79, 61, 68, 0, 28, 62, 162, 164, 16, 63, 252, 230, 99, 190, 115, 25, 173, 191, 152, 245, 240, 190, 91, 78, 198, 62, 173, 238, 24, 191, 142, 118, 77, 189, 85, 137, 44, 190, 93, 174, 32, 62, 205, 19, 106, 62, 36, 171, 33, 190, 164, 4, 55, 62, 217, 197, 217, 186, 32, 80, 39, 190, 168, 220, 36, 191, 99, 67, 175, 189, 113, 153, 70, 60, 224, 212, 78, 61, 217, 254, 61, 190, 47, 57, 188, 62, 247, 196, 8, 189, 71, 165, 201, 62, 96, 235, 159, 62, 203, 63, 0, 63, 203, 151, 170, 190, 151, 197, 33, 188, 252, 82, 149, 190, 204, 101, 6, 190, 159, 140, 242, 189, 103, 148, 29, 61, 222, 31, 160, 188, 95, 17, 140, 62, 2, 38, 65, 190, 196, 248, 108, 61, 244, 46, 111, 61, 87, 228, 63, 189, 129, 60, 23, 190, 18, 176, 173, 189, 228, 41, 120, 189, 30, 91, 88, 190, 228, 181, 98, 189, 162, 179, 182, 61, 214, 144, 158, 189, 168, 101, 17, 189, 195, 8, 160, 61, 116, 60, 212, 189, 113, 56, 88, 189, 17, 163, 1, 189, 175, 90, 42, 190, 103, 253, 37, 190, 176, 164, 147, 188, 14, 69, 16, 62, 196, 213, 220, 188, 8, 70, 91, 61, 137, 66, 219, 189, 26, 31, 56, 190, 114, 218, 100, 189, 92, 39, 37, 62, 140, 25, 109, 189, 22, 85, 127, 61, 75, 143, 166, 61, 0, 68, 194, 61, 3, 93, 143, 189, 201, 3, 94, 189, 135, 72, 197, 61, 82, 204, 62, 190, 87, 196, 34, 191, 246, 176, 218, 188, 235, 233, 187, 190, 164, 105, 68, 62, 204, 15, 73, 190, 160, 238, 212, 191, 137, 147, 100, 60, 41, 115, 52, 62, 33, 147, 20, 191, 43, 134, 25, 191, 109, 164, 46, 191, 232, 2, 131, 190, 125, 21, 11, 189, 150, 118, 12, 191, 67, 40, 81, 62, 56, 175, 1, 191, 221, 137, 146, 191, 183, 68, 27, 191, 87, 194, 2, 62, 6, 179, 154, 189, 158, 34, 108, 190, 81, 116, 178, 61, 199, 68, 18, 190, 23, 95, 232, 189, 120, 138, 2, 190, 92, 176, 66, 62, 114, 23, 65, 62, 240, 253, 108, 191, 159, 99, 146, 61, 42, 126, 48, 191, 38, 24, 240, 189, 97, 2, 55, 59, 176, 81, 3, 188, 137, 244, 118, 62, 67, 50, 88, 190, 114, 32, 157, 62, 156, 164, 67, 190, 146, 80, 112, 61, 22, 69, 195, 190, 68, 2, 142, 62, 229, 156, 133, 190, 189, 165, 64, 62, 86, 187, 107, 61, 232, 129, 177, 62, 162, 253, 204, 62, 113, 236, 35, 190, 41, 42, 100, 62, 76, 250, 81, 62, 158, 253, 64, 189, 37, 18, 152, 189, 135, 246, 157, 190, 23, 185, 90, 190, 36, 177, 93, 191, 98, 197, 177, 190, 148, 134, 38, 61, 9, 218, 137, 189, 129, 188, 236, 62, 156, 231, 21, 62, 108, 130, 44, 191, 186, 56, 23, 190, 176, 85, 11, 62, 46, 216, 239, 189, 0, 200, 192, 62, 32, 150, 76, 188, 247, 183, 113, 189, 241, 103, 245, 189, 105, 96, 194, 189, 67, 101, 149, 61, 121, 37, 209, 189, 84, 27, 8, 62, 237, 30, 48, 190, 135, 26, 9, 189, 255, 77, 143, 189, 52, 158, 240, 189, 191, 230, 60, 189, 146, 32, 255, 189, 9, 62, 251, 60, 229, 15, 188, 188, 68, 168, 221, 189, 127, 172, 1, 188, 37, 126, 175, 189, 184, 234, 41, 190, 83, 0, 254, 188, 46, 27, 160, 60, 249, 73, 233, 60, 159, 238, 178, 189, 156, 189, 218, 189, 187, 147, 233, 189, 95, 114, 217, 61, 233, 179, 209, 61, 193, 214, 38, 190, 201, 65, 143, 189, 4, 163, 162, 189, 111, 17, 177, 188, 204, 224, 49, 62, 179, 172, 235, 189, 164, 122, 148, 61, 27, 53, 77, 62, 195, 84, 234, 59, 104, 71, 180, 61, 14, 105, 213, 189, 156, 119, 49, 192, 175, 29, 162, 190, 40, 167, 99, 62, 254, 2, 91, 191, 97, 240, 25, 60, 213, 36, 137, 191, 220, 255, 191, 62, 113, 12, 77, 62, 247, 50, 245, 61, 2, 136, 235, 62, 178, 43, 149, 190, 193, 254, 118, 191, 201, 180, 9, 190, 116, 14, 221, 62, 109, 12, 146, 62, 123, 137, 26, 191, 133, 51, 197, 62, 194, 36, 236, 190, 254, 86, 152, 189, 15, 200, 140, 62, 6, 162, 229, 62, 24, 219, 195, 61, 191, 98, 145, 191, 159, 225, 158, 62, 199, 104, 218, 190, 50, 32, 13, 61, 49, 86, 177, 62, 226, 150, 8, 191, 210, 54, 130, 189, 112, 26, 107, 190, 26, 23, 196, 61, 61, 51, 179, 61, 171, 37, 17, 62, 18, 202, 250, 189, 255, 242, 45, 61, 44, 212, 203, 189, 72, 111, 100, 62, 165, 193, 6, 62, 200, 5, 112, 60, 151, 233, 125, 191, 9, 218, 246, 188, 157, 20, 25, 62, 177, 19, 154, 62, 12, 140, 125, 61, 70, 16, 147, 62, 69, 160, 122, 191, 115, 13, 43, 191, 98, 93, 12, 190, 29, 101, 48, 191, 157, 69, 62, 62, 231, 232, 114, 61, 87, 234, 199, 189, 225, 11, 75, 187, 141, 40, 159, 191, 87, 248, 68, 62, 183, 29, 51, 62, 92, 198, 110, 62, 238, 80, 110, 62, 171, 82, 66, 191, 104, 20, 23, 192, 104, 219, 44, 191, 135, 127, 127, 62, 176, 229, 114, 191, 41, 187, 130, 187, 54, 213, 153, 61, 41, 167, 181, 189, 17, 205, 231, 61, 125, 183, 130, 62, 50, 220, 124, 62, 199, 130, 51, 61, 191, 76, 63, 59, 157, 55, 100, 191, 59, 181, 198, 190, 34, 170, 145, 189, 128, 13, 73, 62, 241, 206, 254, 189, 110, 136, 242, 60, 71, 206, 145, 60, 142, 214, 0, 61, 181, 32, 104, 188, 8, 219, 174, 62, 78, 245, 18, 62, 172, 222, 168, 61, 207, 19, 149, 190, 177, 83, 139, 190, 75, 221, 65, 190, 211, 182, 66, 189, 196, 105, 172, 189, 252, 59, 207, 61, 55, 112, 96, 191, 184, 171, 179, 62, 196, 184, 174, 190, 227, 110, 132, 62, 98, 32, 35, 191, 205, 146, 162, 61, 139, 149, 18, 61, 233, 235, 85, 62, 198, 66, 179, 190, 89, 148, 8, 62, 133, 69, 178, 190, 133, 129, 41, 62, 14, 186, 147, 60, 124, 113, 136, 62, 248, 26, 7, 191, 221, 22, 75, 190, 88, 193, 33, 61, 108, 30, 98, 188, 29, 131, 112, 61, 4, 16, 65, 60, 100, 140, 21, 191, 162, 243, 5, 191, 80, 65, 204, 190, 171, 121, 16, 191, 201, 13, 84, 62, 17, 190, 182, 189, 149, 168, 239, 62, 32, 190, 37, 62, 159, 46, 12, 191, 128, 194, 209, 61, 214, 118, 128, 62, 232, 190, 64, 62, 180, 45, 18, 63, 146, 166, 138, 190, 37, 233, 7, 190, 117, 122, 21, 190, 220, 164, 192, 189, 214, 60, 3, 62, 78, 65, 9, 62, 156, 237, 180, 188, 28, 16, 130, 61, 116, 231, 163, 61, 162, 226, 96, 189, 81, 14, 15, 58, 228, 95, 22, 190, 53, 44, 217, 189, 244, 88, 220, 189, 102, 193, 9, 62, 73, 243, 129, 187, 134, 199, 242, 58, 52, 52, 251, 189, 150, 29, 32, 190, 69, 89, 232, 188, 34, 200, 215, 189, 125, 78, 66, 61, 154, 26, 175, 60, 81, 38, 68, 190, 253, 230, 36, 62, 193, 246, 213, 61, 212, 90, 237, 61, 141, 90, 45, 61, 224, 185, 163, 189, 67, 11, 47, 190, 169, 49, 29, 190, 23, 37, 35, 190, 171, 156, 197, 61, 140, 129, 21, 192, 31, 96, 165, 191, 37, 195, 135, 191, 126, 207, 132, 62, 179, 235, 139, 188, 138, 192, 104, 189, 182, 92, 173, 62, 244, 89, 155, 190, 145, 216, 224, 61, 36, 207, 100, 189, 107, 250, 189, 60, 174, 246, 67, 62, 154, 41, 230, 190, 248, 147, 101, 191, 22, 124, 11, 191, 16, 182, 160, 189, 247, 114, 134, 62, 114, 8, 100, 191, 76, 91, 79, 62, 58, 192, 238, 189, 128, 32, 83, 62, 120, 64, 131, 189, 17, 216, 154, 62, 117, 157, 23, 190, 139, 150, 61, 191, 123, 237, 135, 60, 248, 11, 232, 62, 217, 42, 130, 62, 165, 126, 119, 62, 67, 163, 174, 60, 71, 133, 156, 191, 130, 190, 92, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {232, 216, 233, 60, 20, 214, 147, 62, 97, 32, 17, 190, 22, 203, 59, 62, 126, 18, 122, 61, 193, 88, 225, 62, 245, 188, 49, 190, 18, 31, 44, 190, 211, 107, 105, 190, 174, 60, 157, 189, 244, 16, 235, 61, 209, 116, 23, 190, 243, 209, 44, 60, 30, 15, 33, 62, 176, 58, 170, 60, 129, 217, 173, 61, 20, 246, 129, 62, 96, 23, 243, 61, 144, 30, 129, 61, 15, 167, 39, 62, 17, 100, 94, 189, 119, 31, 62, 190, 215, 28, 85, 61, 69, 101, 39, 190, 190, 241, 165, 61, 109, 8, 161, 61, 131, 185, 160, 62, 189, 161, 213, 61, 225, 12, 176, 62, 238, 226, 200, 61, 241, 41, 42, 189, 170, 8, 81, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {68, 191, 156, 190, 234, 94, 162, 62, 195, 80, 165, 61, 192, 59, 22, 191, 198, 24, 61, 188, 52, 151, 9, 63, 122, 3, 146, 62, 126, 35, 6, 62, 77, 96, 65, 61, 227, 28, 33, 191, 93, 186, 107, 62, 92, 207, 136, 61, 101, 64, 8, 62, 229, 40, 25, 187, 87, 46, 47, 191, 206, 246, 149, 191, 248, 234, 30, 189, 40, 119, 65, 188, 48, 61, 131, 189, 221, 147, 69, 191, 160, 64, 131, 62, 65, 75, 158, 191, 107, 161, 126, 189, 195, 13, 161, 63, 161, 151, 175, 62, 233, 216, 142, 59, 108, 179, 168, 63, 181, 96, 187, 62, 35, 137, 75, 191, 247, 148, 218, 62, 94, 64, 106, 188, 174, 30, 128, 191, 54, 117, 8, 62, 51, 165, 57, 62, 106, 176, 112, 190, 227, 18, 200, 190, 237, 170, 43, 191, 29, 17, 198, 190, 227, 4, 252, 60, 185, 197, 108, 188, 60, 128, 222, 59, 59, 200, 214, 62, 181, 211, 136, 61, 51, 193, 96, 61, 176, 103, 131, 189, 99, 141, 158, 190, 45, 171, 181, 190, 70, 118, 241, 62, 128, 251, 228, 190, 73, 20, 177, 61, 227, 162, 0, 62, 49, 238, 137, 189, 7, 36, 81, 61, 143, 40, 236, 62, 148, 57, 65, 61, 169, 139, 206, 61, 52, 11, 22, 61, 108, 195, 199, 61, 145, 224, 129, 62, 213, 118, 147, 189, 218, 49, 205, 61, 135, 225, 136, 61, 181, 213, 8, 190, 48, 122, 101, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 50, 89, 62, 196, 61, 216, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {67, 51, 189, 191, 138, 163, 113, 63, 20, 245, 142, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {89, 42, 189, 64, 208, 103, 182, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0022/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}