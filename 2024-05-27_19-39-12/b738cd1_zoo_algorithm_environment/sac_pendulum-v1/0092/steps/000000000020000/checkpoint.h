// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {87, 45, 11, 60, 4, 155, 130, 190, 17, 157, 39, 62, 76, 124, 116, 190, 168, 27, 120, 191, 99, 155, 15, 191, 81, 184, 9, 63, 128, 86, 148, 190, 47, 28, 138, 190, 199, 110, 102, 62, 254, 152, 230, 62, 57, 99, 109, 191, 14, 233, 116, 60, 167, 99, 11, 63, 86, 245, 192, 190, 210, 0, 11, 63, 253, 48, 21, 63, 91, 138, 53, 190, 84, 26, 158, 191, 12, 138, 97, 62, 48, 138, 230, 184, 72, 87, 128, 191, 138, 209, 164, 63, 51, 127, 187, 62, 178, 161, 187, 62, 103, 134, 214, 62, 159, 195, 69, 62, 173, 49, 251, 189, 41, 79, 186, 62, 43, 178, 9, 63, 238, 114, 181, 189, 65, 25, 171, 191, 215, 51, 159, 190, 215, 139, 224, 62, 98, 30, 18, 63, 93, 30, 205, 190, 144, 126, 191, 62, 100, 205, 80, 191, 88, 237, 76, 190, 158, 223, 156, 61, 227, 242, 208, 189, 235, 72, 140, 188, 145, 157, 198, 189, 209, 131, 142, 63, 82, 82, 182, 62, 14, 230, 135, 61, 166, 176, 150, 191, 80, 250, 166, 62, 254, 231, 101, 63, 167, 147, 251, 62, 182, 173, 125, 61, 148, 207, 90, 63, 34, 204, 19, 63, 41, 14, 76, 62, 160, 145, 18, 63, 90, 201, 50, 191, 49, 115, 186, 190, 134, 136, 249, 62, 144, 254, 109, 63, 192, 43, 46, 190, 47, 201, 183, 62, 60, 125, 167, 191, 60, 138, 35, 191, 236, 128, 130, 190, 125, 188, 71, 59, 134, 15, 1, 189, 245, 49, 176, 62, 85, 77, 188, 190, 83, 68, 33, 190, 125, 169, 71, 62, 5, 97, 136, 63, 9, 157, 137, 62, 165, 194, 148, 189, 108, 228, 215, 190, 160, 189, 165, 62, 44, 226, 225, 190, 93, 16, 226, 62, 50, 109, 19, 61, 239, 35, 119, 190, 105, 223, 77, 190, 177, 67, 244, 190, 91, 63, 126, 190, 124, 32, 96, 63, 73, 58, 38, 62, 84, 84, 42, 63, 118, 167, 130, 191, 96, 92, 128, 190, 70, 15, 173, 62, 103, 171, 174, 191, 132, 204, 53, 191, 211, 248, 128, 188, 52, 235, 53, 191, 148, 169, 117, 62, 85, 34, 140, 191, 230, 149, 132, 191, 96, 124, 250, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {135, 147, 54, 191, 217, 102, 197, 190, 11, 221, 5, 191, 13, 63, 229, 190, 121, 1, 144, 61, 122, 95, 150, 62, 93, 217, 202, 62, 39, 149, 66, 62, 156, 185, 160, 190, 68, 164, 237, 61, 128, 215, 36, 62, 133, 47, 35, 189, 175, 42, 48, 189, 165, 200, 228, 190, 79, 1, 146, 190, 101, 106, 1, 62, 16, 94, 26, 62, 53, 101, 133, 190, 168, 169, 182, 62, 141, 69, 152, 189, 16, 22, 217, 61, 119, 209, 228, 62, 246, 205, 128, 62, 194, 120, 152, 61, 169, 93, 95, 190, 38, 211, 8, 63, 102, 213, 61, 191, 43, 218, 217, 62, 176, 171, 180, 188, 70, 6, 181, 61, 74, 55, 197, 188, 23, 56, 113, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {150, 44, 188, 189, 85, 16, 226, 60, 202, 192, 62, 62, 194, 227, 102, 62, 140, 129, 78, 189, 185, 208, 146, 62, 97, 99, 165, 190, 239, 240, 199, 189, 236, 63, 142, 190, 86, 33, 9, 190, 215, 187, 60, 62, 84, 207, 134, 62, 163, 120, 173, 62, 237, 114, 160, 61, 132, 165, 33, 191, 236, 231, 80, 62, 114, 254, 123, 190, 233, 245, 205, 190, 87, 56, 210, 60, 112, 91, 49, 62, 189, 37, 190, 59, 163, 183, 149, 60, 112, 191, 166, 61, 41, 18, 241, 190, 121, 107, 9, 189, 164, 5, 163, 61, 222, 15, 229, 188, 225, 40, 166, 190, 155, 215, 41, 62, 40, 239, 28, 62, 237, 111, 201, 62, 110, 114, 249, 190, 219, 120, 53, 190, 152, 250, 9, 60, 122, 153, 132, 189, 150, 209, 251, 60, 79, 154, 168, 188, 161, 152, 152, 189, 92, 39, 19, 62, 216, 51, 228, 190, 122, 101, 116, 191, 248, 32, 84, 60, 52, 251, 149, 62, 159, 252, 121, 190, 206, 237, 163, 62, 172, 133, 44, 62, 189, 9, 138, 191, 83, 63, 73, 62, 208, 135, 197, 61, 47, 118, 146, 190, 17, 240, 159, 189, 110, 52, 175, 190, 12, 37, 246, 190, 89, 5, 143, 62, 60, 1, 20, 189, 125, 3, 158, 191, 63, 41, 158, 188, 87, 87, 146, 60, 107, 164, 53, 190, 255, 158, 214, 190, 184, 228, 166, 62, 2, 163, 35, 191, 0, 20, 130, 62, 249, 86, 19, 62, 227, 214, 141, 62, 246, 75, 198, 188, 225, 63, 151, 62, 107, 15, 40, 62, 11, 144, 218, 61, 178, 64, 3, 61, 23, 74, 169, 190, 134, 95, 33, 63, 92, 134, 28, 63, 109, 240, 80, 190, 224, 112, 228, 61, 245, 34, 156, 62, 136, 207, 100, 62, 80, 216, 44, 61, 40, 191, 55, 63, 101, 44, 35, 191, 31, 60, 220, 189, 227, 220, 39, 62, 153, 130, 155, 187, 220, 111, 9, 63, 186, 72, 155, 189, 190, 227, 83, 188, 232, 6, 94, 61, 198, 250, 143, 62, 141, 41, 22, 190, 192, 63, 195, 61, 238, 120, 167, 61, 250, 227, 31, 189, 242, 171, 71, 190, 181, 6, 250, 189, 105, 66, 140, 190, 27, 237, 84, 191, 21, 40, 0, 62, 13, 135, 36, 191, 109, 60, 134, 191, 183, 238, 152, 191, 192, 65, 39, 191, 217, 198, 48, 62, 130, 205, 151, 189, 171, 214, 230, 190, 105, 52, 79, 62, 189, 107, 19, 62, 1, 208, 183, 190, 253, 174, 241, 190, 86, 35, 59, 190, 232, 208, 14, 62, 128, 143, 221, 191, 87, 26, 13, 190, 161, 13, 2, 63, 146, 173, 111, 62, 197, 125, 178, 61, 213, 36, 21, 190, 153, 155, 253, 190, 122, 3, 132, 189, 122, 2, 74, 190, 107, 61, 100, 190, 124, 228, 141, 62, 64, 95, 93, 62, 102, 89, 238, 189, 145, 251, 139, 62, 8, 137, 220, 189, 140, 23, 93, 191, 43, 233, 211, 61, 244, 177, 63, 190, 82, 87, 93, 190, 231, 166, 17, 191, 154, 41, 10, 61, 212, 133, 139, 191, 84, 88, 14, 63, 129, 200, 168, 191, 30, 143, 158, 62, 148, 232, 179, 61, 76, 251, 205, 190, 222, 58, 173, 61, 105, 212, 189, 61, 143, 28, 100, 191, 104, 33, 55, 191, 196, 198, 57, 189, 129, 222, 25, 190, 155, 216, 196, 190, 30, 165, 56, 61, 100, 85, 216, 190, 19, 229, 27, 190, 252, 85, 24, 191, 98, 8, 174, 191, 223, 165, 68, 62, 188, 133, 137, 191, 130, 14, 135, 189, 88, 174, 163, 61, 82, 166, 191, 61, 239, 176, 27, 190, 13, 201, 71, 62, 6, 180, 17, 191, 241, 96, 190, 191, 58, 162, 116, 62, 174, 169, 67, 63, 128, 68, 31, 61, 107, 225, 243, 61, 99, 81, 180, 190, 43, 198, 219, 186, 187, 39, 163, 189, 237, 166, 56, 62, 8, 4, 150, 62, 131, 160, 103, 191, 33, 108, 155, 190, 34, 38, 33, 190, 175, 197, 216, 189, 228, 169, 230, 61, 154, 251, 6, 191, 87, 237, 83, 61, 228, 228, 141, 191, 58, 191, 46, 61, 237, 133, 143, 62, 247, 109, 136, 62, 202, 219, 13, 190, 123, 23, 15, 190, 247, 71, 251, 61, 253, 158, 43, 61, 45, 219, 248, 60, 27, 241, 38, 188, 58, 183, 56, 191, 25, 188, 23, 190, 1, 195, 41, 189, 185, 251, 199, 62, 111, 140, 37, 190, 80, 33, 91, 188, 203, 180, 81, 191, 109, 191, 62, 62, 216, 226, 32, 62, 165, 79, 86, 190, 56, 49, 90, 190, 187, 90, 15, 60, 18, 218, 116, 189, 0, 121, 193, 61, 11, 169, 103, 190, 72, 194, 120, 190, 111, 80, 73, 61, 69, 207, 119, 62, 215, 6, 224, 188, 1, 91, 45, 189, 85, 183, 62, 60, 111, 115, 11, 188, 45, 8, 245, 189, 69, 238, 38, 62, 103, 139, 29, 62, 44, 124, 144, 190, 47, 106, 165, 62, 158, 112, 166, 61, 131, 7, 220, 61, 255, 229, 0, 62, 122, 173, 160, 62, 70, 33, 61, 190, 89, 251, 192, 61, 100, 34, 18, 189, 35, 165, 157, 189, 252, 28, 154, 61, 231, 42, 160, 62, 3, 169, 100, 61, 190, 252, 174, 62, 158, 28, 242, 189, 174, 156, 168, 190, 6, 224, 160, 61, 92, 101, 5, 191, 42, 101, 129, 62, 11, 58, 25, 190, 138, 126, 57, 61, 160, 183, 157, 62, 233, 30, 156, 191, 208, 164, 236, 189, 42, 151, 67, 190, 86, 135, 186, 188, 168, 189, 138, 61, 136, 168, 205, 190, 35, 140, 33, 190, 105, 0, 123, 191, 105, 30, 136, 62, 105, 186, 4, 63, 201, 46, 190, 62, 106, 101, 167, 190, 250, 206, 102, 61, 188, 91, 172, 60, 80, 133, 111, 62, 22, 31, 162, 62, 93, 212, 193, 60, 70, 187, 157, 190, 110, 69, 216, 61, 94, 80, 216, 190, 232, 106, 79, 62, 211, 59, 8, 191, 112, 189, 229, 189, 84, 53, 4, 191, 130, 76, 223, 62, 190, 21, 106, 60, 153, 112, 228, 190, 23, 116, 126, 190, 104, 26, 1, 191, 180, 201, 47, 63, 5, 46, 173, 191, 75, 53, 72, 188, 254, 186, 103, 62, 26, 139, 78, 190, 243, 62, 131, 189, 6, 95, 0, 63, 118, 157, 220, 190, 54, 227, 86, 190, 226, 47, 10, 62, 233, 142, 144, 61, 9, 116, 107, 190, 16, 98, 67, 190, 37, 15, 99, 190, 183, 82, 83, 62, 37, 61, 154, 190, 244, 40, 26, 191, 243, 254, 183, 61, 238, 206, 31, 191, 54, 221, 82, 61, 108, 101, 59, 62, 227, 79, 147, 186, 182, 14, 123, 61, 228, 130, 233, 61, 159, 197, 65, 190, 61, 137, 22, 191, 156, 205, 19, 61, 224, 149, 213, 62, 215, 42, 151, 190, 84, 188, 251, 61, 153, 61, 234, 190, 111, 75, 56, 62, 201, 101, 144, 190, 188, 237, 234, 61, 164, 255, 129, 62, 191, 68, 252, 190, 187, 155, 247, 190, 29, 220, 235, 190, 53, 89, 93, 59, 150, 103, 185, 61, 19, 95, 121, 191, 221, 217, 89, 60, 199, 230, 229, 190, 122, 31, 82, 62, 1, 94, 153, 190, 186, 26, 208, 186, 124, 233, 128, 190, 99, 233, 145, 189, 69, 71, 191, 188, 240, 22, 210, 61, 241, 22, 57, 61, 183, 197, 177, 61, 196, 52, 138, 191, 198, 135, 56, 62, 131, 189, 173, 189, 13, 56, 239, 62, 116, 106, 73, 191, 135, 22, 209, 61, 185, 62, 90, 191, 193, 127, 112, 62, 2, 107, 108, 61, 158, 204, 173, 61, 23, 105, 62, 190, 21, 10, 109, 62, 231, 63, 35, 189, 62, 186, 179, 61, 158, 230, 138, 189, 18, 117, 68, 190, 77, 73, 3, 61, 129, 238, 34, 62, 157, 238, 155, 59, 137, 229, 109, 61, 251, 72, 75, 190, 98, 93, 189, 60, 174, 33, 7, 191, 118, 8, 196, 62, 23, 185, 112, 189, 168, 110, 121, 61, 229, 2, 14, 62, 37, 169, 180, 187, 119, 57, 35, 62, 65, 86, 134, 61, 101, 211, 230, 61, 191, 41, 9, 62, 2, 249, 158, 60, 212, 80, 128, 62, 243, 35, 3, 189, 222, 255, 155, 62, 6, 110, 58, 190, 69, 223, 26, 61, 245, 179, 135, 189, 183, 137, 51, 62, 180, 30, 85, 61, 61, 145, 51, 190, 250, 91, 188, 190, 213, 16, 222, 61, 230, 73, 212, 189, 190, 81, 135, 62, 118, 220, 42, 62, 9, 136, 107, 190, 35, 55, 204, 190, 206, 152, 147, 189, 12, 250, 135, 190, 10, 97, 129, 62, 201, 245, 72, 191, 249, 22, 199, 188, 183, 163, 24, 191, 80, 110, 216, 62, 139, 131, 135, 62, 202, 232, 36, 62, 99, 172, 181, 189, 225, 77, 38, 61, 209, 244, 254, 189, 22, 9, 152, 62, 202, 226, 246, 60, 89, 215, 20, 59, 40, 22, 82, 190, 141, 248, 87, 61, 52, 132, 186, 190, 154, 79, 128, 62, 30, 117, 22, 191, 68, 249, 163, 189, 141, 148, 136, 59, 130, 11, 119, 190, 90, 46, 0, 62, 130, 37, 143, 190, 4, 198, 217, 62, 234, 127, 190, 191, 2, 13, 177, 62, 246, 223, 109, 190, 4, 179, 94, 62, 249, 36, 95, 62, 177, 208, 190, 61, 51, 155, 163, 61, 180, 239, 247, 62, 165, 218, 183, 190, 1, 250, 170, 62, 5, 181, 34, 62, 106, 1, 6, 63, 90, 96, 235, 190, 233, 188, 150, 62, 209, 240, 144, 189, 143, 181, 163, 62, 59, 135, 19, 62, 77, 151, 225, 60, 251, 119, 38, 62, 8, 79, 62, 61, 26, 163, 164, 61, 139, 40, 50, 189, 65, 47, 162, 62, 189, 210, 211, 189, 215, 245, 29, 62, 245, 142, 0, 63, 209, 252, 135, 189, 118, 189, 180, 61, 209, 132, 142, 62, 238, 153, 180, 188, 89, 34, 109, 189, 44, 202, 239, 190, 37, 36, 14, 189, 155, 24, 180, 189, 162, 232, 118, 62, 95, 90, 185, 62, 32, 85, 150, 191, 120, 150, 90, 190, 245, 245, 25, 191, 78, 246, 41, 190, 100, 164, 150, 189, 224, 25, 21, 191, 190, 247, 234, 189, 247, 192, 219, 191, 37, 113, 72, 62, 82, 37, 68, 62, 36, 108, 192, 62, 6, 89, 163, 189, 120, 159, 78, 62, 194, 57, 208, 61, 240, 167, 233, 61, 72, 249, 91, 62, 249, 65, 200, 62, 139, 150, 90, 191, 107, 252, 16, 62, 108, 168, 80, 190, 176, 150, 154, 62, 182, 29, 10, 191, 248, 79, 20, 62, 19, 106, 40, 191, 2, 33, 191, 62, 134, 180, 132, 189, 199, 156, 255, 189, 83, 87, 59, 189, 82, 114, 169, 61, 179, 217, 154, 60, 33, 140, 49, 188, 150, 125, 48, 60, 247, 67, 208, 59, 9, 226, 183, 61, 26, 59, 225, 189, 193, 204, 209, 61, 241, 231, 216, 189, 40, 160, 129, 189, 20, 132, 174, 61, 174, 74, 148, 189, 34, 24, 248, 188, 45, 169, 186, 188, 1, 52, 44, 190, 196, 251, 188, 189, 146, 144, 37, 190, 123, 6, 72, 61, 107, 58, 85, 190, 151, 203, 190, 189, 40, 87, 3, 190, 228, 238, 248, 189, 58, 55, 20, 60, 21, 85, 227, 60, 231, 28, 242, 188, 158, 42, 70, 61, 186, 224, 39, 190, 79, 6, 5, 62, 8, 94, 166, 189, 192, 52, 162, 61, 229, 116, 86, 62, 81, 208, 189, 190, 49, 255, 75, 189, 16, 108, 241, 189, 122, 39, 138, 61, 10, 90, 30, 62, 38, 199, 162, 189, 73, 38, 176, 190, 140, 177, 245, 60, 200, 79, 255, 61, 188, 32, 37, 62, 12, 91, 226, 190, 82, 123, 129, 61, 22, 200, 171, 190, 137, 110, 177, 62, 63, 142, 15, 62, 2, 58, 39, 189, 198, 86, 17, 188, 135, 47, 255, 189, 191, 234, 6, 189, 195, 68, 59, 62, 214, 112, 240, 60, 26, 251, 113, 189, 31, 59, 17, 62, 203, 62, 78, 62, 224, 225, 180, 189, 153, 92, 252, 61, 97, 252, 64, 60, 136, 161, 90, 62, 143, 125, 39, 190, 31, 139, 214, 62, 99, 186, 22, 190, 51, 51, 204, 189, 137, 50, 137, 61, 203, 201, 26, 190, 251, 29, 167, 61, 153, 219, 165, 60, 26, 98, 37, 62, 244, 113, 9, 190, 190, 86, 0, 62, 154, 174, 13, 189, 61, 202, 241, 189, 162, 145, 242, 189, 89, 219, 21, 190, 29, 100, 109, 61, 194, 41, 37, 61, 105, 69, 88, 189, 196, 49, 69, 185, 204, 10, 174, 60, 19, 0, 146, 188, 69, 23, 163, 189, 172, 21, 16, 62, 203, 243, 54, 189, 119, 159, 223, 189, 198, 17, 255, 61, 240, 7, 27, 190, 161, 189, 92, 188, 124, 159, 41, 190, 85, 11, 33, 190, 43, 227, 139, 189, 206, 204, 127, 187, 20, 192, 35, 62, 104, 168, 132, 189, 14, 186, 38, 189, 229, 133, 159, 190, 60, 116, 8, 190, 198, 172, 83, 190, 224, 124, 24, 191, 215, 84, 210, 190, 248, 76, 173, 62, 142, 150, 253, 186, 144, 122, 148, 190, 91, 102, 36, 61, 148, 179, 161, 190, 220, 7, 248, 190, 201, 147, 55, 191, 243, 57, 248, 189, 241, 195, 144, 62, 141, 96, 125, 189, 169, 14, 205, 190, 6, 134, 173, 188, 59, 159, 155, 191, 245, 119, 118, 62, 172, 194, 242, 189, 37, 202, 115, 62, 153, 193, 210, 190, 254, 192, 55, 190, 185, 131, 169, 62, 21, 166, 154, 62, 104, 128, 22, 191, 109, 80, 56, 61, 19, 235, 160, 190, 14, 95, 174, 189, 140, 182, 216, 62, 243, 89, 194, 60, 70, 209, 209, 190, 53, 224, 164, 62, 191, 248, 189, 60, 222, 144, 95, 62, 36, 70, 15, 190, 224, 73, 133, 190, 173, 201, 161, 189, 211, 62, 200, 189, 163, 193, 227, 62, 71, 147, 45, 189, 19, 71, 43, 61, 241, 30, 223, 189, 202, 206, 236, 189, 171, 127, 175, 189, 46, 213, 230, 61, 69, 112, 87, 190, 169, 249, 15, 62, 52, 103, 176, 62, 199, 168, 97, 189, 28, 224, 32, 191, 81, 245, 182, 60, 34, 86, 244, 189, 77, 240, 24, 190, 23, 48, 59, 62, 24, 254, 209, 189, 213, 0, 76, 190, 194, 155, 70, 62, 121, 122, 154, 61, 62, 139, 136, 190, 102, 29, 234, 61, 225, 184, 103, 60, 248, 101, 93, 63, 226, 105, 4, 190, 211, 97, 51, 189, 89, 52, 166, 61, 237, 49, 202, 189, 127, 123, 144, 186, 119, 132, 78, 190, 104, 220, 202, 189, 145, 151, 210, 189, 21, 17, 56, 190, 94, 41, 69, 190, 46, 252, 77, 60, 82, 32, 128, 189, 100, 172, 209, 187, 54, 164, 188, 61, 90, 248, 20, 190, 226, 161, 164, 189, 204, 21, 61, 190, 246, 88, 163, 61, 37, 37, 18, 61, 78, 63, 6, 60, 240, 9, 78, 189, 18, 81, 120, 61, 58, 254, 22, 190, 206, 142, 208, 61, 73, 246, 22, 190, 46, 192, 185, 61, 81, 129, 135, 189, 214, 210, 208, 61, 1, 156, 167, 59, 196, 89, 99, 189, 25, 100, 237, 189, 214, 206, 52, 189, 143, 154, 236, 188, 254, 82, 215, 61, 137, 96, 77, 62, 180, 5, 215, 61, 194, 40, 237, 60, 240, 252, 243, 61, 83, 11, 39, 189, 115, 178, 209, 62, 13, 146, 59, 63, 174, 103, 67, 190, 46, 1, 123, 62, 199, 122, 55, 62, 82, 118, 128, 62, 210, 167, 5, 190, 210, 68, 24, 63, 90, 250, 171, 60, 110, 111, 79, 60, 13, 34, 85, 189, 195, 217, 42, 189, 64, 202, 0, 63, 75, 40, 51, 189, 167, 131, 130, 189, 253, 145, 56, 62, 117, 37, 31, 62, 29, 247, 255, 189, 164, 61, 207, 61, 237, 251, 198, 60, 67, 126, 26, 190, 122, 155, 71, 62, 143, 102, 196, 61, 7, 172, 246, 61, 131, 87, 5, 191, 188, 173, 139, 190, 71, 104, 81, 191, 117, 183, 94, 62, 16, 99, 109, 62, 191, 45, 200, 62, 183, 223, 189, 60, 50, 116, 167, 62, 27, 243, 133, 62, 124, 127, 160, 191, 89, 250, 2, 62, 182, 222, 254, 60, 74, 66, 7, 191, 137, 86, 7, 63, 136, 249, 186, 189, 6, 80, 43, 191, 76, 231, 129, 190, 78, 49, 48, 62, 173, 193, 245, 190, 105, 56, 77, 62, 120, 110, 39, 191, 92, 56, 68, 190, 225, 74, 75, 62, 167, 22, 133, 62, 23, 137, 53, 191, 222, 151, 211, 61, 80, 123, 104, 62, 144, 197, 178, 61, 197, 58, 43, 190, 54, 166, 231, 62, 184, 82, 228, 189, 206, 100, 245, 62, 82, 67, 14, 62, 67, 17, 71, 61, 135, 65, 1, 191, 7, 48, 75, 189, 85, 131, 148, 189, 200, 66, 205, 62, 10, 213, 14, 191, 88, 100, 22, 62, 12, 246, 136, 62, 229, 231, 118, 190, 208, 100, 22, 56, 141, 7, 114, 62, 16, 252, 99, 190, 59, 29, 21, 63, 198, 96, 237, 189, 246, 70, 154, 190, 109, 104, 96, 190, 184, 54, 27, 187, 199, 143, 201, 190, 121, 77, 249, 61, 176, 149, 205, 190, 137, 2, 107, 190, 28, 37, 173, 61, 44, 201, 201, 190, 135, 105, 33, 190, 210, 69, 19, 61, 70, 152, 51, 189, 223, 192, 253, 61, 111, 85, 34, 61, 85, 211, 148, 62, 233, 163, 246, 190, 83, 117, 136, 62, 134, 127, 139, 62, 248, 209, 46, 62, 28, 158, 205, 189, 222, 7, 206, 61, 230, 251, 220, 61, 113, 121, 14, 62, 198, 236, 44, 61, 49, 212, 195, 188, 100, 27, 8, 190, 178, 38, 44, 62, 213, 103, 137, 189, 105, 173, 18, 190, 47, 67, 171, 189, 21, 45, 200, 189, 165, 62, 20, 190, 143, 163, 173, 58, 186, 33, 14, 188, 160, 133, 12, 190, 38, 162, 46, 190, 1, 32, 127, 188, 120, 182, 168, 189, 11, 55, 9, 189, 218, 176, 49, 190, 137, 65, 228, 59, 1, 156, 70, 61, 120, 168, 252, 59, 39, 120, 39, 190, 251, 147, 40, 190, 54, 142, 186, 60, 181, 55, 30, 190, 1, 152, 41, 60, 234, 235, 197, 60, 197, 235, 45, 190, 25, 187, 186, 189, 28, 55, 70, 191, 98, 206, 28, 191, 236, 68, 146, 191, 55, 238, 194, 190, 106, 247, 220, 189, 123, 87, 126, 61, 137, 59, 29, 191, 193, 192, 40, 63, 58, 139, 85, 62, 134, 208, 33, 62, 78, 207, 137, 190, 162, 56, 62, 189, 186, 131, 137, 189, 12, 98, 2, 192, 80, 37, 185, 190, 113, 115, 228, 62, 239, 76, 105, 62, 164, 109, 5, 62, 22, 5, 226, 61, 213, 1, 147, 190, 71, 232, 105, 189, 165, 121, 57, 187, 244, 157, 247, 189, 230, 25, 50, 190, 75, 221, 74, 62, 218, 203, 132, 190, 176, 210, 171, 61, 120, 128, 9, 62, 213, 99, 22, 191, 68, 166, 23, 61, 104, 125, 126, 190, 43, 217, 201, 189, 14, 69, 98, 190, 14, 177, 141, 190, 96, 54, 38, 62, 157, 58, 38, 61, 126, 93, 196, 61, 75, 81, 204, 61, 50, 15, 56, 190, 17, 157, 226, 61, 152, 100, 76, 189, 200, 147, 27, 191, 51, 169, 71, 60, 56, 172, 49, 191, 86, 172, 187, 61, 206, 133, 201, 190, 137, 83, 109, 60, 207, 162, 182, 62, 213, 140, 53, 189, 28, 247, 242, 61, 132, 107, 168, 62, 20, 158, 107, 61, 33, 200, 131, 62, 18, 38, 26, 62, 116, 94, 254, 188, 179, 231, 58, 61, 55, 187, 181, 62, 140, 226, 66, 189, 240, 202, 122, 62, 80, 34, 36, 190, 139, 13, 129, 190, 30, 119, 125, 60, 208, 206, 81, 190, 54, 24, 39, 190, 114, 251, 160, 190, 62, 222, 237, 62, 148, 172, 52, 191, 90, 115, 118, 62, 110, 134, 45, 189, 102, 178, 77, 62, 116, 221, 128, 188, 188, 7, 25, 191, 70, 68, 252, 189, 142, 43, 1, 62, 186, 15, 171, 189, 122, 150, 175, 62, 203, 50, 153, 60, 174, 3, 114, 191, 79, 98, 247, 187, 142, 74, 154, 62, 128, 243, 212, 190, 171, 14, 50, 62, 155, 111, 131, 190, 222, 83, 170, 186, 60, 213, 178, 188, 214, 57, 65, 62, 195, 198, 125, 190, 116, 186, 20, 61, 210, 238, 26, 188, 84, 89, 27, 190, 226, 176, 144, 190, 27, 149, 221, 62, 8, 10, 141, 190, 208, 170, 234, 62, 199, 98, 118, 188, 15, 220, 169, 189, 92, 218, 161, 190, 14, 17, 142, 190, 238, 63, 129, 62, 59, 55, 194, 59, 78, 251, 100, 62, 2, 112, 151, 62, 192, 137, 76, 190, 67, 181, 172, 190, 175, 126, 63, 62, 177, 72, 28, 191, 202, 59, 116, 62, 74, 100, 157, 191, 135, 226, 162, 188, 150, 71, 4, 191, 0, 253, 95, 62, 81, 235, 130, 60, 120, 221, 150, 189, 104, 66, 159, 190, 186, 95, 177, 62, 195, 138, 53, 190, 47, 242, 119, 62, 246, 61, 15, 189, 185, 128, 205, 61, 123, 46, 205, 61, 83, 159, 54, 62, 225, 88, 181, 190, 3, 254, 117, 62, 152, 107, 55, 191, 102, 204, 79, 190, 119, 20, 67, 62, 191, 149, 20, 190, 44, 81, 94, 190, 65, 10, 46, 191, 17, 48, 245, 189, 112, 130, 77, 191, 92, 124, 177, 61, 190, 250, 3, 62, 105, 142, 189, 62, 70, 221, 160, 62, 87, 94, 54, 191, 244, 49, 168, 61, 165, 216, 9, 62, 50, 171, 182, 61, 79, 244, 27, 62, 86, 161, 38, 62, 150, 40, 64, 191, 55, 154, 44, 189, 32, 4, 136, 61, 154, 187, 132, 190, 81, 247, 124, 62, 59, 27, 84, 59, 216, 8, 185, 190, 202, 215, 143, 62, 180, 68, 231, 59, 105, 253, 2, 190, 11, 137, 71, 189, 112, 16, 180, 62, 244, 15, 157, 62, 186, 204, 71, 188, 35, 137, 49, 62, 188, 93, 186, 190, 179, 209, 141, 62, 146, 46, 208, 61, 160, 180, 43, 61, 32, 129, 131, 190, 58, 212, 47, 189, 67, 123, 16, 191, 129, 227, 158, 190, 155, 31, 40, 61, 19, 40, 114, 62, 205, 76, 226, 190, 19, 83, 239, 190, 165, 9, 170, 189, 102, 137, 181, 62, 136, 218, 63, 189, 68, 113, 56, 61, 139, 247, 28, 190, 99, 137, 116, 191, 83, 25, 23, 62, 181, 6, 168, 62, 24, 254, 122, 190, 246, 165, 244, 61, 121, 227, 68, 189, 19, 51, 156, 188, 31, 47, 136, 62, 25, 50, 59, 62, 59, 79, 44, 191, 11, 73, 173, 60, 146, 149, 132, 189, 186, 158, 42, 190, 155, 22, 142, 190, 226, 96, 64, 62, 118, 54, 220, 189, 111, 67, 102, 62, 107, 231, 17, 62, 58, 92, 222, 61, 115, 187, 159, 62, 212, 232, 7, 62, 143, 204, 5, 62, 125, 194, 135, 59, 167, 168, 227, 190, 133, 131, 202, 190, 96, 239, 10, 190, 125, 42, 218, 62, 48, 213, 169, 61, 249, 247, 1, 62, 203, 226, 36, 190, 209, 222, 175, 62, 207, 48, 203, 188, 66, 116, 47, 61, 236, 119, 138, 62, 138, 21, 142, 62, 110, 176, 20, 63, 176, 102, 184, 61, 210, 212, 59, 191, 211, 35, 9, 62, 94, 233, 202, 190, 37, 58, 67, 189, 130, 182, 136, 190, 97, 195, 69, 61, 66, 250, 252, 190, 214, 244, 83, 62, 132, 250, 220, 190, 127, 141, 4, 61, 186, 23, 97, 189, 207, 217, 223, 61, 188, 100, 243, 62, 182, 163, 67, 61, 116, 19, 47, 190, 48, 77, 24, 62, 27, 89, 2, 61, 92, 120, 91, 61, 42, 99, 175, 61, 185, 127, 151, 56, 247, 86, 228, 189, 176, 230, 213, 189, 129, 165, 94, 58, 177, 80, 228, 61, 172, 216, 59, 190, 2, 98, 167, 61, 247, 255, 105, 187, 208, 14, 192, 61, 103, 94, 89, 188, 11, 154, 240, 189, 70, 138, 254, 187, 119, 224, 227, 189, 2, 244, 183, 189, 231, 192, 20, 61, 101, 221, 244, 189, 58, 73, 14, 189, 113, 141, 24, 62, 123, 118, 28, 188, 247, 245, 182, 189, 148, 227, 152, 60, 79, 58, 152, 61, 237, 140, 145, 61, 218, 167, 84, 189, 56, 48, 109, 189, 252, 93, 103, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {211, 123, 43, 62, 185, 200, 252, 61, 52, 198, 61, 190, 113, 230, 2, 62, 25, 16, 59, 62, 120, 61, 119, 62, 143, 42, 88, 62, 205, 153, 115, 62, 225, 216, 128, 61, 75, 11, 93, 62, 254, 61, 238, 61, 253, 88, 176, 62, 58, 7, 73, 60, 129, 51, 55, 62, 60, 96, 237, 61, 70, 49, 218, 60, 69, 250, 183, 189, 220, 38, 3, 62, 226, 234, 22, 189, 226, 161, 233, 187, 138, 244, 136, 189, 146, 159, 147, 62, 238, 229, 175, 59, 190, 226, 130, 188, 37, 240, 176, 61, 149, 108, 162, 62, 80, 209, 95, 61, 51, 109, 51, 62, 26, 12, 82, 62, 114, 127, 94, 62, 50, 90, 63, 190, 220, 243, 162, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 157, 117, 62, 37, 137, 67, 63, 104, 38, 172, 62, 158, 66, 89, 62, 121, 160, 145, 63, 20, 249, 73, 190, 214, 189, 204, 188, 160, 50, 63, 191, 11, 206, 61, 63, 88, 86, 73, 191, 102, 214, 139, 189, 160, 175, 213, 190, 196, 40, 213, 62, 19, 49, 75, 191, 90, 156, 221, 60, 9, 94, 71, 189, 23, 18, 6, 190, 61, 153, 245, 190, 222, 69, 43, 191, 93, 13, 120, 189, 101, 101, 112, 62, 116, 233, 146, 63, 128, 38, 155, 62, 85, 217, 167, 61, 22, 164, 89, 62, 89, 11, 146, 189, 177, 57, 200, 62, 87, 30, 26, 191, 214, 19, 103, 62, 51, 77, 132, 62, 78, 17, 243, 190, 76, 169, 152, 60, 182, 6, 188, 189, 109, 242, 177, 62, 70, 94, 50, 189, 44, 174, 132, 191, 173, 195, 160, 62, 31, 181, 136, 189, 186, 30, 164, 190, 5, 204, 98, 186, 56, 223, 34, 190, 113, 187, 196, 61, 169, 183, 162, 190, 3, 78, 204, 61, 250, 77, 94, 60, 209, 247, 44, 61, 116, 87, 212, 61, 106, 180, 33, 190, 181, 154, 224, 61, 248, 241, 145, 189, 169, 22, 184, 62, 35, 100, 46, 189, 5, 204, 59, 189, 229, 113, 224, 189, 96, 59, 20, 62, 212, 31, 13, 190, 246, 38, 85, 191, 241, 206, 231, 190, 186, 175, 205, 62, 216, 189, 2, 62, 147, 212, 178, 188, 64, 13, 162, 188, 0, 116, 18, 61, 175, 196, 137, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 21, 83, 61, 177, 215, 225, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {254, 237, 36, 64, 88, 254, 143, 191, 248, 78, 35, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {206, 148, 157, 64, 92, 157, 124, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0092/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}