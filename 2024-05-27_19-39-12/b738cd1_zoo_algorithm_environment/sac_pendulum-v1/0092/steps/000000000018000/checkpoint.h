// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {230, 97, 109, 187, 155, 253, 133, 190, 133, 187, 49, 62, 238, 252, 146, 190, 30, 108, 127, 191, 195, 70, 10, 191, 142, 196, 6, 63, 109, 211, 116, 190, 110, 243, 137, 190, 239, 112, 61, 62, 128, 183, 225, 62, 213, 226, 119, 191, 210, 37, 78, 59, 239, 121, 16, 63, 170, 238, 191, 190, 42, 195, 6, 63, 204, 104, 29, 63, 134, 161, 58, 190, 6, 134, 153, 191, 34, 154, 95, 62, 189, 87, 122, 188, 9, 130, 110, 191, 242, 235, 162, 63, 123, 65, 189, 62, 19, 100, 186, 62, 87, 122, 189, 62, 68, 76, 62, 62, 70, 115, 201, 189, 8, 237, 91, 62, 236, 77, 18, 63, 121, 235, 134, 189, 81, 48, 163, 191, 35, 48, 158, 190, 255, 118, 203, 62, 55, 95, 12, 63, 44, 164, 233, 190, 80, 242, 196, 62, 124, 208, 79, 191, 183, 129, 75, 190, 158, 223, 156, 61, 227, 242, 208, 189, 235, 72, 140, 188, 75, 198, 105, 189, 210, 203, 135, 63, 223, 174, 182, 62, 84, 107, 133, 61, 121, 71, 144, 191, 28, 255, 160, 62, 4, 232, 101, 63, 205, 151, 237, 62, 6, 36, 168, 61, 161, 95, 91, 63, 45, 47, 25, 63, 42, 58, 63, 62, 66, 222, 23, 63, 7, 84, 45, 191, 232, 124, 196, 190, 48, 144, 238, 62, 68, 116, 83, 63, 129, 146, 40, 190, 71, 202, 159, 62, 245, 115, 165, 191, 148, 81, 39, 191, 88, 135, 145, 190, 32, 148, 236, 60, 35, 234, 8, 189, 88, 137, 149, 62, 58, 81, 179, 190, 207, 92, 39, 190, 63, 249, 72, 62, 108, 77, 136, 63, 93, 242, 135, 62, 26, 185, 111, 190, 185, 160, 218, 190, 131, 238, 165, 62, 68, 204, 233, 190, 130, 213, 223, 62, 229, 247, 19, 61, 89, 156, 61, 190, 180, 92, 37, 190, 186, 2, 252, 190, 21, 137, 131, 190, 9, 186, 96, 63, 199, 186, 52, 62, 126, 17, 45, 63, 13, 214, 131, 191, 25, 119, 117, 190, 67, 184, 139, 62, 210, 71, 164, 191, 179, 64, 55, 191, 119, 35, 111, 188, 253, 191, 47, 191, 101, 114, 120, 62, 125, 3, 137, 191, 26, 100, 129, 191, 82, 85, 247, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {142, 203, 49, 191, 82, 144, 176, 190, 166, 249, 1, 191, 220, 108, 202, 190, 61, 226, 66, 61, 221, 139, 155, 62, 16, 49, 213, 62, 212, 148, 100, 62, 0, 199, 172, 190, 101, 2, 14, 62, 116, 193, 14, 62, 127, 229, 143, 189, 206, 189, 32, 189, 165, 200, 228, 190, 40, 186, 162, 190, 22, 113, 242, 61, 17, 145, 10, 62, 170, 13, 135, 190, 182, 236, 190, 62, 134, 104, 181, 189, 51, 154, 13, 62, 179, 95, 227, 62, 243, 164, 136, 62, 26, 166, 131, 61, 82, 204, 159, 190, 63, 132, 11, 63, 178, 39, 48, 191, 9, 22, 215, 62, 142, 91, 239, 187, 66, 105, 188, 61, 75, 203, 129, 188, 220, 251, 182, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {23, 205, 183, 189, 252, 10, 107, 60, 15, 57, 15, 62, 47, 195, 94, 62, 76, 151, 60, 189, 182, 29, 152, 62, 197, 108, 149, 190, 121, 222, 39, 189, 227, 181, 177, 190, 95, 62, 36, 190, 150, 226, 251, 61, 117, 188, 134, 62, 196, 202, 194, 62, 237, 114, 160, 61, 196, 9, 15, 191, 104, 176, 92, 62, 99, 188, 105, 190, 192, 102, 199, 190, 8, 42, 82, 61, 186, 248, 58, 62, 30, 133, 184, 60, 142, 59, 10, 61, 186, 69, 201, 61, 205, 62, 244, 190, 201, 53, 7, 189, 101, 40, 188, 61, 27, 177, 21, 189, 114, 13, 162, 190, 42, 71, 75, 62, 150, 133, 44, 62, 95, 126, 196, 62, 243, 154, 225, 190, 93, 87, 67, 190, 92, 176, 230, 61, 236, 6, 121, 189, 21, 161, 125, 61, 63, 107, 6, 189, 245, 34, 189, 190, 144, 232, 34, 62, 43, 80, 215, 190, 205, 62, 105, 191, 87, 42, 171, 59, 108, 253, 133, 62, 199, 243, 121, 190, 229, 135, 147, 62, 172, 133, 44, 62, 133, 98, 129, 191, 16, 237, 51, 62, 224, 243, 126, 61, 175, 114, 143, 190, 160, 179, 225, 189, 21, 235, 171, 190, 165, 172, 225, 190, 78, 215, 131, 62, 8, 121, 200, 189, 85, 44, 150, 191, 144, 124, 240, 188, 106, 135, 141, 60, 102, 121, 28, 190, 0, 3, 205, 190, 43, 68, 149, 62, 182, 29, 18, 191, 170, 145, 116, 62, 166, 131, 13, 62, 107, 52, 155, 62, 253, 164, 253, 188, 90, 175, 132, 62, 200, 239, 37, 62, 22, 219, 211, 61, 24, 3, 20, 61, 86, 48, 155, 190, 172, 24, 13, 63, 197, 26, 11, 63, 98, 172, 96, 190, 181, 72, 100, 61, 72, 204, 154, 62, 13, 199, 152, 62, 80, 216, 44, 61, 34, 51, 37, 63, 129, 33, 251, 190, 196, 254, 179, 189, 86, 26, 53, 62, 104, 75, 33, 61, 11, 176, 5, 63, 134, 203, 55, 189, 76, 253, 20, 188, 59, 147, 185, 61, 11, 161, 101, 62, 40, 121, 198, 189, 82, 139, 133, 61, 210, 119, 164, 61, 86, 28, 204, 189, 193, 73, 12, 190, 216, 218, 188, 189, 190, 87, 104, 190, 7, 68, 58, 191, 78, 164, 25, 62, 13, 135, 36, 191, 77, 240, 110, 191, 170, 182, 145, 191, 61, 116, 12, 191, 111, 16, 80, 62, 127, 35, 25, 60, 146, 2, 190, 190, 145, 148, 36, 60, 174, 176, 3, 62, 211, 192, 194, 190, 157, 45, 206, 190, 48, 222, 65, 188, 232, 208, 14, 62, 78, 53, 207, 191, 117, 56, 171, 189, 28, 190, 7, 63, 134, 55, 106, 62, 224, 53, 48, 62, 127, 40, 254, 189, 48, 142, 134, 190, 65, 152, 37, 188, 190, 217, 3, 190, 71, 247, 152, 190, 142, 204, 170, 62, 126, 9, 76, 62, 102, 89, 238, 189, 255, 99, 72, 62, 186, 79, 244, 59, 72, 3, 10, 191, 210, 201, 15, 62, 101, 114, 19, 190, 213, 137, 92, 190, 175, 104, 72, 191, 154, 41, 10, 61, 254, 88, 143, 191, 90, 244, 12, 63, 184, 166, 168, 191, 65, 184, 156, 62, 210, 47, 196, 61, 145, 95, 210, 190, 73, 147, 193, 61, 237, 210, 29, 189, 20, 97, 89, 191, 63, 25, 32, 191, 196, 198, 57, 189, 199, 203, 23, 190, 65, 55, 192, 190, 240, 44, 103, 61, 16, 14, 220, 190, 37, 178, 137, 190, 212, 216, 22, 191, 9, 33, 197, 191, 91, 235, 68, 62, 127, 236, 135, 191, 92, 70, 134, 189, 230, 153, 190, 61, 13, 130, 195, 61, 239, 176, 27, 190, 31, 9, 76, 62, 164, 188, 234, 190, 28, 153, 216, 191, 177, 21, 129, 62, 99, 176, 67, 63, 128, 68, 31, 61, 143, 3, 12, 62, 99, 166, 159, 190, 179, 74, 7, 60, 35, 40, 158, 189, 107, 187, 50, 62, 149, 52, 132, 62, 210, 155, 99, 191, 229, 2, 97, 190, 54, 13, 33, 189, 125, 25, 94, 189, 150, 224, 240, 61, 187, 136, 18, 191, 87, 237, 83, 61, 116, 244, 153, 191, 140, 96, 7, 188, 202, 46, 138, 62, 181, 4, 135, 62, 178, 123, 35, 190, 114, 47, 16, 190, 121, 245, 215, 61, 48, 46, 1, 61, 138, 151, 145, 60, 114, 80, 17, 60, 127, 225, 3, 191, 12, 149, 31, 190, 132, 208, 233, 188, 127, 242, 204, 62, 97, 92, 67, 190, 195, 82, 233, 188, 79, 36, 59, 191, 211, 32, 0, 62, 222, 21, 45, 62, 72, 155, 96, 190, 148, 197, 113, 190, 156, 110, 64, 187, 32, 89, 93, 189, 194, 179, 170, 61, 148, 120, 96, 190, 65, 131, 60, 190, 16, 201, 168, 59, 213, 254, 136, 62, 189, 46, 106, 189, 32, 140, 24, 189, 220, 212, 94, 59, 111, 115, 11, 188, 37, 181, 163, 189, 99, 133, 46, 62, 3, 97, 17, 62, 204, 62, 151, 190, 254, 129, 158, 62, 139, 114, 153, 61, 166, 229, 198, 61, 182, 24, 246, 61, 223, 80, 155, 62, 83, 38, 53, 190, 37, 70, 19, 62, 7, 35, 228, 188, 54, 58, 174, 189, 205, 96, 208, 61, 204, 238, 156, 62, 81, 80, 65, 61, 125, 229, 194, 62, 216, 10, 7, 190, 131, 59, 165, 190, 181, 192, 206, 61, 12, 57, 247, 190, 218, 20, 133, 62, 134, 124, 26, 190, 239, 246, 27, 61, 0, 50, 149, 62, 231, 54, 151, 191, 53, 184, 153, 188, 187, 157, 174, 189, 195, 92, 130, 61, 5, 30, 139, 61, 123, 153, 224, 190, 35, 140, 33, 190, 110, 239, 134, 191, 249, 63, 138, 62, 136, 197, 2, 63, 89, 204, 190, 62, 96, 48, 177, 190, 57, 213, 77, 61, 178, 209, 168, 59, 6, 127, 111, 62, 99, 165, 157, 62, 101, 208, 67, 61, 229, 152, 141, 190, 7, 92, 211, 61, 117, 153, 210, 190, 197, 139, 91, 62, 130, 55, 14, 191, 119, 158, 1, 190, 141, 16, 221, 190, 26, 224, 225, 62, 198, 38, 85, 60, 141, 75, 44, 191, 23, 116, 126, 190, 116, 123, 13, 191, 126, 111, 41, 63, 119, 76, 174, 191, 187, 221, 143, 188, 238, 158, 117, 62, 145, 215, 79, 190, 9, 145, 85, 189, 213, 182, 174, 62, 174, 111, 207, 190, 207, 26, 2, 190, 226, 47, 10, 62, 226, 71, 167, 61, 208, 214, 101, 190, 12, 116, 45, 190, 195, 78, 87, 190, 171, 95, 173, 61, 125, 8, 157, 190, 94, 141, 76, 191, 186, 196, 168, 61, 72, 60, 40, 191, 95, 158, 120, 61, 84, 87, 72, 62, 175, 101, 201, 58, 182, 14, 123, 61, 84, 195, 252, 61, 40, 101, 136, 189, 206, 105, 80, 191, 223, 193, 62, 61, 137, 179, 208, 62, 215, 42, 151, 190, 223, 76, 7, 62, 253, 251, 221, 190, 69, 50, 56, 62, 98, 240, 146, 190, 160, 70, 249, 61, 159, 116, 107, 62, 188, 8, 218, 190, 67, 225, 222, 190, 241, 55, 224, 190, 124, 182, 119, 60, 92, 159, 189, 61, 41, 129, 108, 191, 221, 217, 89, 60, 41, 74, 186, 190, 255, 240, 10, 62, 96, 0, 138, 190, 54, 23, 216, 61, 40, 86, 128, 190, 24, 114, 141, 189, 117, 112, 106, 188, 71, 78, 206, 61, 36, 198, 115, 61, 142, 23, 44, 62, 118, 17, 138, 191, 191, 58, 48, 62, 78, 20, 175, 189, 100, 42, 238, 62, 101, 53, 56, 191, 15, 134, 222, 61, 236, 210, 106, 191, 55, 9, 73, 62, 101, 184, 103, 61, 142, 184, 183, 61, 48, 101, 41, 190, 221, 130, 115, 62, 24, 207, 243, 188, 14, 34, 178, 61, 202, 19, 168, 189, 242, 177, 29, 190, 14, 33, 103, 61, 233, 79, 55, 62, 162, 188, 42, 60, 153, 129, 141, 61, 6, 249, 98, 190, 98, 93, 189, 60, 223, 236, 249, 190, 93, 85, 190, 62, 31, 5, 134, 189, 4, 85, 108, 61, 98, 172, 251, 61, 152, 213, 40, 187, 39, 148, 23, 62, 161, 84, 111, 61, 75, 124, 212, 61, 232, 5, 39, 62, 147, 220, 9, 61, 169, 107, 132, 62, 239, 13, 214, 188, 137, 44, 171, 62, 93, 109, 75, 190, 147, 67, 232, 60, 40, 159, 83, 189, 35, 35, 0, 62, 130, 193, 88, 188, 182, 76, 2, 190, 37, 174, 166, 190, 32, 113, 3, 62, 241, 141, 166, 189, 80, 130, 143, 62, 34, 183, 80, 62, 218, 1, 40, 190, 82, 207, 148, 190, 221, 5, 172, 189, 92, 148, 160, 189, 43, 210, 137, 62, 47, 227, 80, 191, 249, 22, 199, 188, 166, 175, 1, 191, 253, 224, 186, 62, 33, 234, 140, 62, 210, 229, 56, 62, 174, 108, 208, 189, 220, 107, 131, 61, 222, 44, 6, 190, 179, 223, 169, 62, 94, 69, 221, 60, 91, 219, 172, 61, 196, 0, 142, 190, 55, 211, 232, 61, 143, 11, 172, 190, 49, 106, 170, 62, 172, 226, 27, 191, 131, 101, 172, 189, 196, 125, 43, 189, 56, 164, 129, 190, 126, 90, 18, 62, 67, 111, 156, 190, 175, 224, 163, 62, 202, 103, 198, 191, 116, 189, 125, 62, 31, 152, 124, 190, 42, 154, 44, 62, 105, 181, 57, 62, 42, 197, 86, 60, 147, 163, 166, 61, 28, 106, 206, 62, 108, 133, 192, 190, 95, 242, 195, 62, 5, 181, 34, 62, 100, 71, 248, 62, 167, 205, 209, 190, 104, 204, 145, 62, 153, 160, 180, 189, 250, 241, 175, 62, 104, 135, 243, 61, 192, 229, 162, 61, 179, 145, 12, 62, 21, 215, 127, 61, 191, 101, 128, 59, 152, 122, 201, 186, 212, 60, 115, 62, 235, 100, 29, 190, 112, 130, 134, 61, 160, 174, 8, 63, 113, 10, 220, 187, 190, 93, 251, 61, 238, 95, 166, 62, 238, 153, 180, 188, 159, 81, 6, 189, 215, 85, 221, 190, 154, 89, 245, 188, 253, 31, 189, 189, 24, 157, 103, 62, 5, 181, 178, 62, 179, 139, 144, 191, 0, 50, 4, 190, 214, 246, 250, 190, 107, 184, 127, 189, 55, 73, 156, 189, 227, 40, 32, 191, 190, 247, 234, 189, 213, 34, 231, 191, 157, 105, 43, 62, 48, 105, 49, 62, 29, 67, 187, 62, 120, 186, 216, 189, 195, 175, 69, 62, 26, 165, 178, 61, 224, 113, 228, 61, 72, 218, 74, 62, 163, 192, 207, 62, 54, 36, 37, 191, 231, 191, 12, 62, 105, 91, 71, 190, 32, 85, 157, 62, 121, 63, 18, 191, 104, 232, 7, 62, 80, 118, 10, 191, 219, 222, 207, 62, 134, 180, 132, 189, 199, 156, 255, 189, 83, 87, 59, 189, 82, 114, 169, 61, 179, 217, 154, 60, 33, 140, 49, 188, 150, 125, 48, 60, 247, 67, 208, 59, 9, 226, 183, 61, 26, 59, 225, 189, 193, 204, 209, 61, 241, 231, 216, 189, 40, 160, 129, 189, 20, 132, 174, 61, 174, 74, 148, 189, 34, 24, 248, 188, 45, 169, 186, 188, 1, 52, 44, 190, 196, 251, 188, 189, 146, 144, 37, 190, 123, 6, 72, 61, 107, 58, 85, 190, 151, 203, 190, 189, 40, 87, 3, 190, 228, 238, 248, 189, 58, 55, 20, 60, 21, 85, 227, 60, 231, 28, 242, 188, 158, 42, 70, 61, 186, 224, 39, 190, 79, 6, 5, 62, 8, 94, 166, 189, 11, 192, 163, 61, 157, 122, 95, 62, 249, 238, 175, 190, 102, 151, 42, 189, 98, 102, 219, 189, 153, 114, 147, 61, 8, 38, 24, 62, 31, 45, 26, 189, 134, 232, 155, 190, 61, 180, 85, 61, 244, 25, 22, 62, 192, 90, 49, 62, 113, 213, 235, 190, 82, 123, 129, 61, 179, 237, 149, 190, 214, 6, 174, 62, 83, 69, 15, 62, 83, 92, 25, 189, 149, 107, 163, 188, 172, 166, 241, 189, 248, 171, 41, 189, 247, 100, 61, 62, 17, 203, 210, 60, 30, 63, 177, 188, 197, 218, 27, 62, 197, 194, 94, 62, 74, 45, 165, 189, 27, 200, 36, 62, 162, 26, 246, 57, 115, 15, 83, 62, 54, 136, 25, 190, 245, 133, 190, 62, 99, 186, 22, 190, 51, 51, 204, 189, 137, 50, 137, 61, 203, 201, 26, 190, 251, 29, 167, 61, 153, 219, 165, 60, 26, 98, 37, 62, 244, 113, 9, 190, 190, 86, 0, 62, 154, 174, 13, 189, 61, 202, 241, 189, 162, 145, 242, 189, 89, 219, 21, 190, 29, 100, 109, 61, 194, 41, 37, 61, 105, 69, 88, 189, 196, 49, 69, 185, 204, 10, 174, 60, 19, 0, 146, 188, 69, 23, 163, 189, 172, 21, 16, 62, 203, 243, 54, 189, 119, 159, 223, 189, 198, 17, 255, 61, 240, 7, 27, 190, 161, 189, 92, 188, 124, 159, 41, 190, 85, 11, 33, 190, 43, 227, 139, 189, 206, 204, 127, 187, 20, 192, 35, 62, 104, 168, 132, 189, 48, 238, 71, 189, 235, 250, 61, 190, 60, 116, 8, 190, 218, 233, 56, 190, 50, 49, 9, 191, 249, 104, 179, 190, 57, 77, 189, 62, 149, 78, 213, 187, 75, 60, 157, 190, 170, 12, 200, 60, 158, 222, 33, 190, 55, 154, 236, 190, 62, 199, 26, 191, 243, 57, 248, 189, 174, 53, 142, 62, 32, 121, 145, 189, 187, 161, 204, 190, 12, 3, 78, 189, 42, 95, 142, 191, 125, 176, 158, 62, 241, 214, 220, 187, 138, 122, 137, 62, 183, 142, 149, 190, 181, 92, 57, 190, 26, 40, 160, 62, 10, 182, 163, 62, 104, 128, 22, 191, 175, 74, 69, 61, 70, 118, 131, 190, 26, 126, 14, 61, 8, 35, 209, 62, 119, 136, 14, 61, 255, 125, 198, 190, 31, 140, 159, 62, 120, 200, 104, 61, 76, 187, 113, 62, 15, 167, 250, 189, 241, 33, 86, 190, 117, 124, 151, 189, 82, 14, 113, 190, 220, 130, 207, 62, 255, 125, 122, 189, 99, 250, 116, 60, 4, 155, 176, 189, 2, 254, 246, 189, 171, 127, 175, 189, 139, 184, 130, 189, 73, 148, 34, 190, 200, 224, 93, 62, 116, 29, 194, 62, 47, 24, 42, 189, 243, 223, 25, 191, 251, 168, 146, 60, 99, 44, 231, 189, 73, 68, 1, 190, 166, 113, 229, 61, 121, 67, 165, 189, 226, 228, 70, 190, 215, 96, 73, 62, 210, 1, 149, 60, 131, 63, 129, 190, 158, 156, 226, 61, 78, 66, 90, 61, 191, 124, 80, 63, 226, 105, 4, 190, 211, 97, 51, 189, 89, 52, 166, 61, 237, 49, 202, 189, 127, 123, 144, 186, 119, 132, 78, 190, 104, 220, 202, 189, 145, 151, 210, 189, 21, 17, 56, 190, 94, 41, 69, 190, 46, 252, 77, 60, 82, 32, 128, 189, 100, 172, 209, 187, 54, 164, 188, 61, 90, 248, 20, 190, 226, 161, 164, 189, 204, 21, 61, 190, 246, 88, 163, 61, 37, 37, 18, 61, 78, 63, 6, 60, 240, 9, 78, 189, 18, 81, 120, 61, 58, 254, 22, 190, 206, 142, 208, 61, 73, 246, 22, 190, 46, 192, 185, 61, 81, 129, 135, 189, 214, 210, 208, 61, 1, 156, 167, 59, 196, 89, 99, 189, 25, 100, 237, 189, 214, 206, 52, 189, 76, 68, 73, 189, 184, 133, 187, 61, 58, 89, 29, 62, 121, 117, 194, 61, 204, 81, 161, 60, 32, 137, 216, 61, 174, 105, 63, 189, 55, 215, 175, 62, 253, 233, 34, 63, 201, 14, 126, 190, 149, 236, 71, 62, 7, 204, 44, 62, 192, 32, 147, 62, 210, 167, 5, 190, 174, 23, 9, 63, 239, 201, 175, 59, 109, 45, 143, 59, 70, 120, 135, 189, 42, 234, 180, 188, 5, 168, 249, 62, 83, 8, 213, 188, 144, 34, 165, 189, 198, 99, 66, 62, 185, 250, 159, 61, 230, 27, 15, 190, 6, 20, 105, 61, 92, 131, 130, 60, 140, 238, 103, 190, 51, 142, 95, 62, 115, 241, 229, 61, 72, 249, 168, 61, 208, 201, 235, 190, 254, 63, 131, 190, 114, 103, 69, 191, 4, 169, 58, 189, 135, 162, 45, 62, 216, 1, 194, 62, 32, 14, 26, 61, 157, 8, 175, 62, 72, 133, 149, 62, 171, 76, 155, 191, 227, 70, 26, 62, 210, 126, 9, 190, 241, 152, 6, 191, 49, 126, 210, 62, 136, 249, 186, 189, 78, 201, 38, 191, 19, 134, 131, 190, 171, 39, 33, 62, 30, 57, 241, 190, 182, 16, 30, 62, 59, 6, 17, 191, 152, 133, 143, 190, 61, 70, 99, 62, 193, 245, 80, 62, 35, 80, 32, 191, 23, 244, 5, 62, 23, 112, 157, 62, 192, 185, 43, 61, 179, 81, 165, 189, 133, 2, 185, 62, 120, 172, 100, 190, 79, 75, 252, 62, 27, 195, 32, 62, 52, 111, 128, 61, 184, 71, 12, 191, 45, 173, 72, 189, 155, 104, 196, 189, 125, 88, 205, 62, 241, 29, 11, 191, 117, 122, 30, 62, 135, 96, 147, 62, 65, 97, 104, 190, 132, 81, 199, 60, 121, 88, 1, 62, 171, 228, 83, 190, 87, 35, 12, 63, 198, 96, 237, 189, 140, 144, 147, 190, 95, 78, 73, 190, 79, 21, 0, 61, 180, 122, 185, 190, 186, 163, 246, 61, 209, 251, 187, 190, 155, 120, 153, 190, 71, 30, 203, 61, 212, 226, 218, 190, 124, 84, 12, 190, 174, 249, 127, 61, 194, 218, 221, 188, 178, 113, 253, 61, 17, 159, 118, 61, 22, 138, 147, 62, 209, 12, 12, 191, 118, 58, 150, 62, 169, 23, 143, 62, 248, 209, 46, 62, 28, 158, 205, 189, 222, 7, 206, 61, 230, 251, 220, 61, 113, 121, 14, 62, 198, 236, 44, 61, 49, 212, 195, 188, 100, 27, 8, 190, 178, 38, 44, 62, 213, 103, 137, 189, 105, 173, 18, 190, 47, 67, 171, 189, 21, 45, 200, 189, 165, 62, 20, 190, 143, 163, 173, 58, 186, 33, 14, 188, 160, 133, 12, 190, 38, 162, 46, 190, 1, 32, 127, 188, 120, 182, 168, 189, 11, 55, 9, 189, 218, 176, 49, 190, 137, 65, 228, 59, 1, 156, 70, 61, 120, 168, 252, 59, 39, 120, 39, 190, 251, 147, 40, 190, 54, 142, 186, 60, 181, 55, 30, 190, 1, 152, 41, 60, 234, 235, 197, 60, 197, 235, 45, 190, 59, 98, 179, 189, 28, 55, 70, 191, 172, 47, 59, 191, 27, 197, 138, 191, 101, 157, 153, 190, 100, 214, 226, 189, 123, 87, 126, 61, 88, 121, 9, 191, 26, 189, 241, 62, 15, 58, 63, 60, 61, 73, 235, 189, 38, 250, 117, 190, 164, 161, 27, 61, 186, 131, 137, 189, 169, 176, 241, 191, 241, 251, 190, 190, 118, 125, 221, 62, 7, 121, 71, 62, 209, 219, 36, 62, 132, 124, 224, 61, 9, 234, 33, 190, 143, 85, 125, 189, 46, 201, 90, 60, 40, 234, 81, 190, 19, 38, 142, 189, 188, 11, 32, 62, 218, 203, 132, 190, 112, 74, 8, 188, 186, 195, 56, 62, 106, 143, 203, 190, 28, 28, 143, 60, 188, 86, 126, 190, 63, 122, 254, 189, 81, 222, 101, 190, 111, 242, 137, 190, 25, 245, 32, 62, 58, 236, 46, 61, 205, 52, 184, 61, 246, 241, 187, 61, 55, 181, 22, 190, 169, 203, 217, 61, 252, 51, 73, 189, 46, 120, 19, 191, 226, 138, 144, 60, 237, 36, 55, 191, 86, 172, 187, 61, 161, 159, 184, 190, 138, 92, 228, 187, 199, 120, 177, 62, 105, 63, 86, 189, 14, 44, 213, 61, 199, 60, 168, 62, 100, 97, 66, 61, 191, 11, 130, 62, 122, 235, 17, 62, 195, 255, 150, 188, 187, 107, 88, 61, 180, 45, 184, 62, 234, 130, 105, 189, 64, 39, 132, 62, 112, 238, 51, 190, 200, 103, 133, 190, 81, 148, 20, 61, 164, 96, 126, 190, 14, 162, 30, 190, 120, 59, 158, 190, 187, 40, 195, 62, 195, 21, 60, 191, 168, 59, 93, 62, 107, 249, 46, 189, 33, 9, 129, 62, 174, 36, 65, 61, 214, 103, 46, 191, 49, 253, 34, 190, 243, 43, 148, 61, 168, 191, 182, 189, 239, 253, 197, 62, 203, 50, 153, 60, 157, 178, 90, 191, 54, 45, 145, 187, 194, 78, 153, 62, 82, 155, 217, 190, 118, 142, 70, 62, 36, 248, 131, 190, 9, 64, 81, 61, 19, 254, 138, 188, 99, 148, 76, 62, 120, 231, 144, 190, 97, 97, 2, 61, 0, 207, 201, 188, 2, 23, 45, 190, 26, 172, 165, 190, 191, 108, 235, 62, 98, 164, 91, 190, 175, 222, 223, 62, 107, 148, 232, 60, 101, 43, 189, 189, 102, 15, 137, 190, 36, 25, 140, 190, 94, 204, 128, 62, 91, 65, 200, 59, 216, 80, 96, 62, 178, 65, 171, 62, 241, 49, 37, 190, 139, 47, 178, 190, 237, 4, 43, 62, 173, 195, 250, 190, 64, 64, 111, 62, 199, 186, 153, 191, 135, 226, 162, 188, 225, 106, 244, 190, 7, 39, 70, 62, 219, 149, 241, 188, 98, 134, 15, 190, 108, 57, 171, 190, 219, 252, 175, 62, 29, 244, 42, 190, 136, 131, 137, 62, 176, 171, 95, 189, 108, 215, 16, 62, 37, 8, 143, 61, 160, 34, 91, 62, 136, 87, 168, 190, 188, 244, 136, 62, 174, 70, 59, 191, 73, 180, 70, 190, 90, 198, 36, 62, 100, 8, 5, 190, 221, 108, 91, 190, 250, 230, 47, 191, 123, 46, 69, 190, 136, 122, 77, 191, 148, 182, 167, 60, 39, 249, 247, 61, 221, 104, 155, 62, 51, 115, 131, 62, 58, 230, 81, 191, 31, 44, 112, 61, 245, 63, 71, 189, 223, 78, 173, 61, 195, 22, 88, 62, 86, 161, 38, 62, 234, 176, 82, 191, 117, 229, 250, 188, 72, 249, 110, 61, 38, 43, 142, 190, 210, 10, 141, 62, 148, 4, 139, 188, 211, 98, 144, 190, 143, 176, 127, 62, 165, 223, 193, 60, 245, 99, 87, 190, 68, 129, 7, 189, 33, 25, 136, 62, 56, 112, 156, 62, 223, 138, 234, 189, 90, 179, 87, 62, 216, 41, 130, 190, 156, 170, 140, 62, 135, 56, 199, 61, 32, 129, 112, 61, 184, 169, 142, 190, 218, 121, 9, 190, 203, 21, 26, 191, 125, 131, 163, 190, 100, 233, 38, 61, 148, 154, 100, 62, 43, 145, 195, 190, 78, 119, 15, 191, 251, 33, 228, 189, 173, 18, 138, 62, 96, 82, 59, 189, 20, 67, 171, 61, 139, 247, 28, 190, 23, 134, 91, 191, 2, 217, 29, 62, 211, 138, 166, 62, 81, 39, 131, 190, 59, 25, 12, 62, 216, 179, 59, 189, 69, 85, 203, 60, 10, 101, 133, 62, 30, 124, 67, 62, 89, 28, 54, 191, 92, 136, 3, 61, 88, 128, 183, 189, 112, 156, 91, 190, 120, 174, 164, 190, 74, 48, 89, 62, 234, 195, 102, 189, 119, 95, 93, 62, 105, 117, 28, 62, 241, 207, 193, 61, 122, 143, 159, 62, 239, 74, 46, 62, 48, 82, 31, 62, 26, 179, 208, 60, 203, 16, 205, 190, 20, 235, 202, 190, 160, 236, 31, 190, 151, 60, 246, 62, 153, 92, 160, 61, 195, 178, 4, 62, 59, 235, 11, 190, 101, 160, 186, 62, 207, 48, 203, 188, 231, 70, 33, 61, 168, 242, 136, 62, 60, 57, 165, 62, 104, 253, 31, 63, 71, 41, 237, 61, 14, 5, 60, 191, 66, 79, 12, 62, 66, 74, 206, 190, 86, 173, 29, 188, 149, 240, 114, 190, 56, 30, 182, 60, 113, 23, 0, 191, 202, 106, 94, 62, 136, 8, 219, 190, 120, 97, 131, 61, 224, 229, 71, 189, 227, 83, 195, 61, 64, 58, 211, 62, 182, 163, 67, 61, 116, 19, 47, 190, 48, 77, 24, 62, 27, 89, 2, 61, 92, 120, 91, 61, 42, 99, 175, 61, 185, 127, 151, 56, 247, 86, 228, 189, 176, 230, 213, 189, 129, 165, 94, 58, 177, 80, 228, 61, 172, 216, 59, 190, 2, 98, 167, 61, 247, 255, 105, 187, 208, 14, 192, 61, 103, 94, 89, 188, 11, 154, 240, 189, 70, 138, 254, 187, 119, 224, 227, 189, 2, 244, 183, 189, 231, 192, 20, 61, 101, 221, 244, 189, 58, 73, 14, 189, 113, 141, 24, 62, 123, 118, 28, 188, 247, 245, 182, 189, 148, 227, 152, 60, 79, 58, 152, 61, 237, 140, 145, 61, 218, 167, 84, 189, 56, 48, 109, 189, 252, 93, 103, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {78, 187, 67, 62, 252, 143, 184, 61, 184, 97, 33, 190, 13, 252, 47, 62, 243, 44, 63, 62, 52, 177, 99, 62, 137, 239, 76, 62, 44, 90, 102, 62, 39, 119, 122, 61, 5, 155, 90, 62, 220, 90, 212, 61, 165, 2, 179, 62, 178, 31, 39, 60, 104, 245, 32, 62, 60, 96, 237, 61, 199, 11, 180, 60, 69, 250, 183, 189, 76, 19, 17, 62, 50, 136, 21, 187, 226, 161, 233, 187, 177, 254, 143, 189, 186, 236, 146, 62, 18, 104, 207, 60, 190, 226, 130, 188, 52, 23, 170, 61, 68, 161, 155, 62, 7, 85, 107, 61, 229, 112, 37, 62, 4, 140, 75, 62, 191, 155, 94, 62, 173, 234, 41, 190, 220, 243, 162, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 96, 130, 62, 72, 173, 46, 63, 8, 153, 145, 62, 194, 206, 24, 62, 13, 148, 152, 63, 6, 242, 83, 190, 124, 155, 37, 188, 251, 76, 70, 191, 154, 1, 72, 63, 112, 80, 64, 191, 97, 116, 183, 189, 158, 243, 235, 190, 103, 68, 215, 62, 53, 222, 74, 191, 90, 156, 221, 60, 153, 200, 120, 189, 23, 18, 6, 190, 241, 99, 240, 190, 231, 60, 33, 191, 93, 13, 120, 189, 255, 242, 96, 62, 12, 112, 138, 63, 187, 157, 177, 62, 85, 217, 167, 61, 113, 70, 54, 62, 16, 132, 181, 189, 217, 42, 254, 62, 215, 67, 18, 191, 173, 89, 130, 62, 31, 183, 166, 62, 228, 149, 255, 190, 76, 169, 152, 60, 193, 99, 173, 189, 216, 2, 155, 62, 181, 32, 83, 188, 228, 85, 112, 191, 69, 236, 136, 62, 100, 235, 5, 189, 101, 114, 164, 190, 185, 113, 183, 61, 230, 126, 84, 190, 89, 148, 245, 61, 245, 208, 148, 190, 82, 85, 24, 62, 234, 75, 139, 61, 245, 30, 157, 61, 116, 87, 212, 61, 144, 21, 13, 190, 181, 154, 224, 61, 132, 82, 231, 189, 171, 76, 185, 62, 35, 100, 46, 189, 233, 3, 66, 188, 155, 71, 121, 189, 19, 43, 234, 61, 212, 31, 13, 190, 99, 122, 65, 191, 229, 157, 215, 190, 94, 112, 201, 62, 60, 101, 247, 61, 149, 216, 173, 59, 6, 251, 251, 59, 59, 222, 162, 59, 175, 196, 137, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {229, 188, 73, 61, 238, 82, 201, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {107, 46, 21, 63, 250, 17, 39, 190, 212, 176, 106, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {154, 47, 245, 62, 118, 189, 241, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0092/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}