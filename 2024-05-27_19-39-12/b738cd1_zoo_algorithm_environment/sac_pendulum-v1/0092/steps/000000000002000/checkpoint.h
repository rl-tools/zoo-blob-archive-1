// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 137, 136, 190, 145, 194, 99, 190, 31, 127, 125, 62, 214, 183, 111, 190, 25, 86, 144, 189, 77, 225, 214, 190, 224, 74, 249, 62, 70, 191, 212, 61, 35, 85, 183, 190, 69, 153, 221, 190, 106, 84, 72, 63, 192, 9, 143, 190, 185, 212, 161, 62, 55, 255, 151, 62, 225, 242, 154, 190, 228, 44, 180, 62, 57, 133, 23, 63, 112, 156, 235, 189, 185, 225, 59, 191, 138, 230, 94, 62, 228, 211, 82, 62, 181, 235, 218, 190, 18, 251, 242, 62, 20, 226, 160, 62, 9, 230, 84, 189, 71, 152, 239, 61, 173, 118, 95, 61, 104, 221, 7, 190, 141, 157, 202, 190, 19, 36, 33, 63, 211, 223, 182, 60, 15, 234, 67, 191, 170, 42, 167, 190, 121, 212, 156, 61, 132, 36, 82, 63, 124, 186, 181, 190, 120, 58, 89, 62, 110, 97, 214, 190, 125, 231, 149, 189, 158, 223, 156, 61, 227, 242, 208, 189, 235, 72, 140, 188, 131, 76, 17, 62, 250, 4, 151, 62, 238, 171, 199, 61, 241, 103, 158, 62, 99, 36, 53, 191, 29, 10, 170, 62, 246, 180, 27, 63, 46, 230, 121, 62, 246, 21, 57, 189, 121, 158, 183, 62, 48, 242, 248, 61, 39, 85, 180, 62, 222, 171, 31, 63, 154, 98, 194, 190, 206, 254, 172, 190, 203, 93, 47, 61, 199, 234, 65, 63, 176, 143, 162, 60, 186, 38, 240, 62, 49, 161, 105, 190, 66, 247, 213, 190, 167, 77, 168, 189, 196, 228, 96, 186, 82, 105, 94, 189, 68, 221, 139, 62, 54, 169, 97, 62, 116, 149, 29, 190, 250, 118, 70, 61, 45, 112, 80, 63, 243, 30, 18, 62, 139, 144, 158, 190, 33, 157, 63, 191, 159, 233, 55, 62, 252, 223, 188, 188, 70, 6, 185, 62, 59, 21, 101, 61, 41, 89, 9, 190, 20, 85, 198, 61, 47, 101, 238, 190, 19, 97, 127, 190, 146, 180, 25, 63, 241, 88, 91, 61, 45, 68, 3, 63, 35, 112, 2, 191, 141, 73, 134, 190, 210, 136, 202, 62, 87, 71, 38, 190, 233, 136, 201, 190, 253, 78, 84, 189, 52, 46, 29, 191, 187, 246, 28, 62, 61, 93, 30, 191, 154, 23, 76, 191, 125, 239, 60, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {213, 13, 36, 191, 132, 119, 133, 189, 85, 80, 165, 190, 4, 130, 100, 190, 184, 178, 21, 190, 213, 252, 245, 62, 131, 124, 155, 62, 220, 240, 141, 62, 68, 238, 34, 190, 64, 150, 202, 62, 150, 55, 3, 63, 246, 220, 186, 62, 158, 120, 229, 59, 165, 200, 228, 190, 101, 169, 205, 190, 44, 153, 181, 190, 123, 156, 155, 62, 244, 113, 159, 190, 131, 189, 212, 62, 253, 40, 97, 62, 25, 13, 233, 62, 240, 221, 203, 62, 166, 96, 241, 62, 168, 57, 161, 62, 223, 108, 243, 189, 42, 197, 24, 63, 53, 195, 177, 190, 140, 49, 216, 62, 56, 91, 121, 62, 227, 144, 218, 62, 247, 83, 9, 62, 68, 81, 222, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 176, 9, 60, 189, 87, 203, 59, 83, 234, 251, 61, 212, 145, 47, 62, 103, 22, 53, 188, 204, 197, 41, 62, 10, 220, 146, 190, 182, 100, 97, 189, 148, 234, 154, 61, 184, 232, 190, 60, 201, 107, 147, 61, 64, 21, 45, 62, 222, 213, 134, 62, 237, 114, 160, 61, 199, 193, 175, 61, 138, 197, 177, 60, 228, 208, 241, 189, 2, 48, 218, 189, 238, 70, 207, 61, 146, 190, 124, 189, 242, 245, 30, 60, 223, 6, 235, 189, 22, 65, 76, 188, 186, 116, 163, 60, 78, 231, 43, 61, 110, 79, 186, 59, 153, 85, 96, 187, 41, 117, 34, 189, 78, 112, 22, 62, 180, 173, 37, 62, 243, 177, 108, 62, 240, 19, 99, 190, 150, 184, 212, 189, 45, 164, 17, 62, 13, 35, 73, 61, 247, 192, 0, 62, 129, 223, 109, 61, 99, 118, 211, 189, 198, 236, 10, 190, 61, 212, 246, 189, 67, 214, 216, 189, 143, 17, 67, 189, 56, 246, 208, 60, 139, 112, 22, 190, 135, 184, 29, 61, 172, 133, 44, 62, 125, 227, 70, 60, 142, 193, 188, 60, 128, 75, 241, 61, 43, 134, 98, 189, 18, 32, 5, 59, 30, 225, 29, 190, 239, 41, 194, 189, 36, 6, 83, 61, 195, 71, 21, 61, 111, 119, 46, 190, 178, 181, 215, 189, 211, 62, 44, 60, 219, 143, 172, 189, 78, 79, 31, 190, 121, 15, 237, 61, 187, 129, 33, 190, 186, 188, 243, 61, 64, 254, 40, 190, 14, 106, 7, 62, 5, 84, 252, 185, 104, 249, 96, 62, 13, 234, 12, 62, 27, 146, 215, 61, 174, 216, 128, 189, 21, 126, 142, 189, 164, 246, 17, 62, 219, 114, 8, 62, 41, 239, 253, 189, 207, 190, 32, 62, 36, 217, 83, 62, 63, 14, 152, 62, 80, 216, 44, 61, 95, 232, 251, 61, 75, 23, 131, 189, 169, 103, 37, 61, 86, 251, 96, 62, 17, 161, 78, 62, 57, 220, 93, 62, 209, 64, 23, 61, 183, 248, 197, 188, 27, 238, 209, 61, 254, 197, 110, 62, 149, 245, 170, 60, 78, 204, 68, 189, 30, 171, 217, 61, 127, 203, 27, 190, 164, 93, 251, 188, 127, 104, 134, 188, 147, 52, 182, 188, 240, 61, 94, 190, 222, 205, 0, 189, 47, 239, 167, 189, 62, 45, 21, 189, 45, 127, 173, 61, 107, 208, 6, 61, 138, 246, 61, 62, 127, 255, 161, 61, 48, 42, 109, 190, 194, 127, 57, 190, 69, 97, 66, 61, 197, 132, 179, 188, 198, 87, 240, 61, 226, 36, 9, 62, 232, 208, 14, 62, 179, 3, 176, 189, 16, 186, 143, 189, 165, 241, 115, 62, 11, 236, 222, 188, 137, 97, 80, 62, 46, 186, 39, 190, 188, 192, 176, 61, 178, 145, 92, 188, 222, 76, 200, 189, 145, 35, 79, 190, 177, 7, 159, 62, 231, 208, 207, 61, 177, 114, 143, 61, 208, 19, 131, 61, 171, 158, 208, 60, 163, 53, 240, 188, 191, 24, 210, 61, 33, 231, 207, 61, 70, 227, 147, 190, 75, 250, 173, 61, 44, 161, 10, 61, 177, 8, 48, 191, 202, 30, 81, 189, 147, 84, 77, 190, 201, 216, 42, 62, 190, 251, 235, 59, 149, 124, 114, 190, 174, 143, 88, 61, 32, 253, 91, 187, 70, 96, 24, 191, 70, 68, 170, 190, 196, 198, 57, 189, 47, 107, 190, 189, 191, 157, 161, 190, 240, 32, 211, 61, 97, 161, 142, 190, 228, 164, 133, 189, 253, 90, 194, 190, 182, 218, 76, 190, 250, 41, 24, 62, 61, 166, 74, 190, 219, 138, 101, 189, 93, 109, 110, 61, 146, 47, 234, 60, 213, 111, 22, 190, 156, 24, 168, 61, 167, 93, 223, 188, 5, 13, 56, 190, 200, 117, 137, 62, 48, 69, 195, 62, 151, 193, 69, 62, 142, 57, 38, 60, 250, 200, 73, 190, 55, 201, 36, 189, 54, 50, 143, 186, 101, 174, 148, 62, 37, 171, 32, 62, 209, 223, 248, 189, 56, 29, 154, 189, 204, 226, 214, 61, 161, 235, 29, 190, 255, 147, 40, 62, 222, 220, 160, 190, 87, 237, 83, 61, 251, 4, 103, 190, 179, 168, 145, 62, 19, 218, 37, 62, 147, 53, 60, 62, 156, 160, 18, 190, 208, 132, 92, 62, 45, 21, 19, 61, 137, 82, 27, 61, 133, 19, 113, 61, 227, 24, 43, 189, 142, 208, 120, 190, 78, 55, 73, 189, 33, 67, 136, 60, 134, 219, 145, 62, 77, 166, 10, 190, 231, 198, 184, 189, 24, 167, 16, 190, 192, 224, 149, 190, 7, 246, 40, 61, 213, 155, 163, 189, 188, 124, 156, 190, 3, 105, 125, 189, 44, 77, 93, 189, 101, 125, 139, 61, 53, 114, 159, 188, 153, 3, 235, 189, 111, 10, 39, 190, 205, 175, 64, 62, 238, 229, 180, 188, 88, 157, 249, 187, 178, 158, 254, 188, 111, 115, 11, 188, 49, 144, 118, 61, 49, 168, 23, 62, 239, 227, 56, 62, 45, 237, 92, 190, 142, 35, 65, 62, 92, 7, 195, 61, 112, 40, 124, 61, 109, 227, 131, 62, 22, 201, 84, 62, 61, 73, 23, 190, 154, 197, 125, 61, 246, 119, 83, 187, 140, 98, 2, 189, 205, 181, 122, 61, 53, 21, 62, 62, 208, 56, 91, 60, 253, 173, 155, 62, 130, 184, 201, 187, 201, 213, 210, 189, 220, 137, 96, 61, 207, 105, 19, 190, 225, 130, 144, 62, 62, 192, 45, 188, 234, 121, 182, 61, 31, 232, 244, 61, 12, 245, 227, 189, 175, 36, 18, 62, 153, 229, 240, 189, 104, 36, 191, 59, 54, 218, 2, 62, 100, 166, 10, 62, 35, 140, 33, 190, 24, 123, 14, 62, 159, 81, 249, 61, 46, 246, 0, 62, 11, 74, 74, 61, 198, 173, 134, 190, 119, 209, 131, 62, 156, 42, 131, 189, 137, 164, 16, 62, 206, 146, 151, 62, 80, 167, 172, 189, 154, 148, 76, 189, 135, 197, 10, 61, 250, 251, 32, 190, 243, 87, 199, 61, 42, 20, 153, 190, 117, 236, 69, 190, 127, 207, 22, 190, 223, 136, 49, 190, 164, 192, 239, 189, 168, 54, 76, 189, 207, 119, 203, 190, 190, 69, 202, 190, 61, 96, 181, 189, 103, 173, 229, 190, 34, 219, 192, 189, 99, 21, 25, 62, 160, 154, 43, 190, 113, 220, 92, 189, 53, 133, 131, 62, 232, 251, 216, 190, 82, 142, 3, 190, 226, 47, 10, 62, 20, 176, 246, 187, 179, 188, 181, 189, 166, 71, 134, 187, 170, 182, 91, 189, 230, 204, 189, 61, 9, 73, 29, 190, 150, 129, 195, 189, 212, 131, 17, 62, 153, 224, 238, 189, 222, 44, 110, 186, 248, 114, 104, 62, 210, 177, 30, 59, 247, 136, 22, 60, 205, 177, 116, 61, 137, 182, 181, 60, 121, 148, 70, 60, 210, 28, 19, 62, 66, 192, 64, 62, 231, 58, 161, 61, 137, 66, 50, 61, 210, 126, 105, 190, 80, 38, 42, 62, 137, 126, 67, 190, 218, 200, 101, 62, 8, 229, 40, 189, 38, 128, 191, 61, 122, 105, 67, 189, 78, 4, 130, 190, 187, 83, 216, 60, 47, 98, 16, 62, 168, 245, 152, 190, 221, 217, 89, 60, 139, 175, 62, 189, 103, 117, 234, 61, 216, 65, 49, 190, 178, 223, 213, 61, 126, 15, 51, 190, 43, 120, 232, 61, 127, 104, 229, 187, 222, 191, 134, 61, 61, 88, 26, 62, 50, 6, 6, 189, 250, 194, 130, 190, 204, 4, 53, 62, 37, 173, 43, 189, 76, 210, 129, 62, 171, 253, 142, 190, 22, 204, 232, 61, 92, 223, 178, 190, 246, 167, 71, 190, 221, 49, 67, 61, 66, 127, 169, 61, 230, 191, 253, 189, 222, 190, 82, 62, 64, 116, 40, 61, 110, 135, 47, 62, 205, 35, 33, 190, 229, 94, 139, 60, 23, 112, 17, 62, 23, 222, 208, 61, 53, 110, 18, 189, 175, 214, 5, 62, 101, 214, 155, 189, 98, 93, 189, 60, 108, 37, 19, 190, 103, 59, 120, 62, 87, 43, 202, 189, 20, 87, 115, 61, 43, 245, 183, 61, 84, 204, 107, 62, 197, 187, 204, 61, 190, 147, 54, 61, 91, 104, 224, 61, 175, 68, 48, 62, 226, 142, 138, 189, 86, 133, 132, 62, 36, 121, 114, 61, 43, 36, 119, 62, 74, 104, 89, 190, 47, 204, 165, 188, 96, 10, 45, 190, 34, 24, 159, 189, 156, 76, 206, 61, 228, 77, 21, 188, 231, 60, 32, 190, 225, 183, 241, 61, 85, 133, 154, 189, 175, 188, 81, 62, 174, 20, 165, 58, 132, 121, 221, 61, 23, 90, 62, 189, 106, 64, 214, 188, 230, 34, 220, 61, 235, 66, 109, 62, 199, 34, 119, 189, 249, 22, 199, 188, 139, 6, 17, 190, 170, 74, 123, 62, 138, 137, 70, 60, 31, 65, 134, 61, 61, 201, 162, 189, 169, 123, 99, 61, 202, 121, 28, 190, 229, 115, 99, 62, 232, 13, 96, 188, 41, 221, 35, 62, 150, 236, 91, 190, 148, 122, 206, 186, 149, 112, 23, 190, 127, 135, 178, 62, 206, 221, 172, 190, 108, 106, 202, 189, 5, 120, 84, 189, 95, 74, 146, 190, 59, 247, 54, 61, 210, 226, 239, 189, 178, 97, 129, 189, 20, 154, 5, 191, 177, 48, 82, 190, 8, 175, 81, 190, 222, 81, 78, 62, 217, 95, 149, 61, 64, 146, 135, 189, 78, 229, 214, 61, 203, 139, 149, 62, 116, 98, 207, 190, 87, 57, 92, 61, 5, 181, 34, 62, 78, 130, 93, 62, 31, 170, 154, 190, 134, 236, 87, 62, 151, 249, 231, 189, 242, 66, 41, 187, 251, 201, 76, 189, 200, 235, 179, 60, 5, 245, 128, 60, 117, 174, 118, 60, 120, 76, 18, 190, 174, 214, 126, 61, 220, 112, 25, 62, 115, 158, 155, 190, 50, 49, 130, 189, 166, 96, 116, 62, 3, 208, 116, 189, 240, 119, 47, 62, 98, 224, 52, 62, 83, 144, 175, 61, 184, 31, 98, 188, 2, 17, 8, 190, 106, 162, 203, 187, 165, 170, 13, 61, 94, 22, 148, 62, 67, 94, 50, 62, 132, 128, 174, 189, 3, 220, 61, 61, 181, 23, 92, 190, 140, 237, 194, 189, 186, 138, 31, 60, 180, 25, 11, 190, 190, 247, 234, 189, 200, 54, 69, 189, 148, 4, 0, 62, 217, 246, 34, 188, 182, 244, 1, 62, 153, 244, 90, 189, 241, 112, 170, 62, 119, 215, 135, 61, 115, 32, 49, 61, 153, 87, 87, 62, 23, 18, 113, 62, 182, 74, 29, 190, 235, 22, 172, 61, 220, 218, 13, 60, 151, 168, 58, 62, 197, 7, 184, 190, 248, 213, 5, 62, 53, 176, 18, 190, 224, 161, 246, 189, 134, 180, 132, 189, 199, 156, 255, 189, 83, 87, 59, 189, 82, 114, 169, 61, 179, 217, 154, 60, 33, 140, 49, 188, 150, 125, 48, 60, 247, 67, 208, 59, 9, 226, 183, 61, 26, 59, 225, 189, 193, 204, 209, 61, 241, 231, 216, 189, 40, 160, 129, 189, 20, 132, 174, 61, 174, 74, 148, 189, 34, 24, 248, 188, 45, 169, 186, 188, 1, 52, 44, 190, 196, 251, 188, 189, 146, 144, 37, 190, 123, 6, 72, 61, 107, 58, 85, 190, 151, 203, 190, 189, 40, 87, 3, 190, 228, 238, 248, 189, 58, 55, 20, 60, 21, 85, 227, 60, 231, 28, 242, 188, 158, 42, 70, 61, 186, 224, 39, 190, 79, 6, 5, 62, 8, 94, 166, 189, 238, 189, 255, 61, 41, 141, 71, 62, 174, 197, 143, 190, 215, 250, 135, 189, 112, 251, 241, 188, 139, 119, 46, 62, 73, 42, 59, 61, 186, 37, 30, 62, 190, 234, 32, 190, 199, 44, 32, 59, 1, 162, 190, 61, 145, 190, 117, 62, 46, 197, 162, 190, 82, 123, 129, 61, 229, 193, 168, 61, 225, 20, 128, 62, 242, 142, 227, 61, 106, 77, 46, 188, 95, 171, 48, 189, 193, 253, 17, 62, 227, 99, 175, 189, 224, 33, 41, 62, 64, 96, 59, 61, 18, 94, 28, 187, 196, 38, 146, 61, 123, 50, 115, 62, 24, 186, 218, 187, 233, 118, 184, 61, 158, 67, 221, 58, 53, 32, 36, 62, 79, 118, 122, 190, 1, 246, 234, 61, 99, 186, 22, 190, 51, 51, 204, 189, 137, 50, 137, 61, 203, 201, 26, 190, 251, 29, 167, 61, 153, 219, 165, 60, 26, 98, 37, 62, 244, 113, 9, 190, 190, 86, 0, 62, 154, 174, 13, 189, 61, 202, 241, 189, 162, 145, 242, 189, 89, 219, 21, 190, 29, 100, 109, 61, 194, 41, 37, 61, 105, 69, 88, 189, 196, 49, 69, 185, 204, 10, 174, 60, 19, 0, 146, 188, 69, 23, 163, 189, 172, 21, 16, 62, 203, 243, 54, 189, 119, 159, 223, 189, 198, 17, 255, 61, 240, 7, 27, 190, 161, 189, 92, 188, 124, 159, 41, 190, 85, 11, 33, 190, 43, 227, 139, 189, 206, 204, 127, 187, 20, 192, 35, 62, 104, 168, 132, 189, 100, 103, 83, 61, 255, 6, 76, 190, 76, 34, 164, 61, 172, 199, 124, 189, 115, 227, 65, 189, 97, 2, 140, 189, 145, 95, 136, 61, 182, 178, 95, 190, 213, 223, 30, 190, 159, 150, 61, 190, 38, 151, 165, 61, 234, 82, 36, 190, 6, 72, 0, 190, 243, 57, 248, 189, 189, 7, 193, 61, 91, 127, 30, 190, 85, 212, 57, 190, 171, 45, 153, 61, 55, 243, 60, 190, 92, 56, 29, 62, 34, 247, 163, 61, 137, 240, 175, 188, 189, 165, 133, 61, 247, 67, 189, 189, 51, 253, 179, 61, 135, 40, 148, 61, 115, 72, 111, 60, 160, 129, 35, 190, 0, 232, 40, 60, 239, 192, 195, 61, 68, 131, 64, 62, 227, 79, 155, 61, 198, 139, 174, 189, 61, 208, 92, 188, 123, 36, 232, 61, 97, 46, 17, 62, 60, 119, 161, 189, 130, 136, 45, 61, 75, 183, 33, 190, 117, 15, 107, 61, 9, 54, 165, 61, 143, 62, 176, 189, 34, 1, 36, 190, 241, 239, 250, 188, 173, 54, 118, 189, 171, 127, 175, 189, 70, 21, 14, 62, 237, 7, 198, 188, 49, 25, 189, 60, 176, 128, 224, 61, 54, 193, 241, 60, 255, 178, 47, 189, 249, 254, 60, 189, 147, 231, 36, 190, 243, 75, 249, 188, 25, 39, 72, 189, 200, 97, 65, 61, 218, 248, 56, 189, 79, 145, 3, 61, 88, 83, 152, 188, 145, 28, 38, 190, 3, 41, 28, 61, 122, 98, 248, 61, 198, 161, 26, 62, 226, 105, 4, 190, 56, 20, 24, 189, 89, 52, 166, 61, 123, 110, 174, 189, 252, 133, 69, 60, 224, 93, 48, 190, 27, 171, 180, 189, 47, 23, 159, 189, 8, 98, 39, 190, 61, 128, 34, 190, 57, 85, 15, 61, 27, 67, 12, 189, 100, 172, 209, 187, 54, 164, 188, 61, 28, 243, 237, 189, 124, 118, 140, 189, 180, 72, 5, 190, 167, 138, 239, 61, 219, 182, 45, 61, 92, 45, 32, 61, 239, 119, 50, 189, 49, 20, 152, 61, 178, 103, 2, 190, 222, 60, 255, 61, 196, 112, 17, 190, 54, 139, 232, 61, 64, 214, 131, 189, 54, 23, 2, 62, 1, 156, 167, 59, 243, 245, 68, 189, 44, 40, 221, 189, 203, 203, 255, 188, 118, 5, 217, 60, 178, 208, 139, 61, 147, 101, 7, 62, 214, 137, 126, 61, 115, 38, 233, 60, 184, 48, 152, 188, 212, 3, 160, 61, 168, 58, 5, 61, 117, 175, 31, 62, 156, 20, 216, 189, 157, 81, 47, 62, 222, 52, 152, 61, 183, 125, 106, 62, 210, 167, 5, 190, 225, 71, 14, 62, 155, 88, 177, 61, 38, 142, 39, 61, 189, 183, 208, 189, 23, 163, 172, 61, 157, 255, 253, 61, 201, 103, 4, 188, 124, 204, 65, 190, 219, 85, 7, 62, 243, 144, 234, 60, 188, 191, 1, 62, 146, 68, 188, 189, 189, 100, 11, 61, 251, 179, 105, 190, 155, 179, 132, 62, 184, 233, 6, 62, 110, 182, 51, 62, 216, 48, 84, 190, 13, 114, 175, 190, 93, 43, 112, 189, 197, 12, 77, 62, 244, 21, 8, 60, 37, 75, 74, 62, 23, 129, 4, 61, 175, 225, 165, 189, 225, 160, 14, 60, 7, 194, 174, 189, 17, 121, 14, 62, 10, 29, 194, 189, 54, 47, 226, 189, 127, 112, 31, 62, 136, 249, 186, 189, 97, 26, 70, 190, 244, 181, 115, 190, 204, 113, 205, 61, 85, 139, 138, 189, 154, 39, 23, 61, 113, 41, 180, 190, 132, 152, 164, 188, 204, 57, 94, 61, 61, 211, 36, 62, 164, 186, 148, 190, 43, 15, 53, 62, 8, 224, 217, 61, 55, 149, 156, 188, 67, 178, 47, 190, 82, 97, 251, 61, 188, 120, 247, 61, 3, 128, 252, 62, 116, 181, 82, 62, 80, 72, 113, 59, 134, 169, 238, 189, 193, 46, 15, 190, 253, 244, 13, 189, 239, 236, 93, 188, 227, 61, 194, 189, 70, 71, 166, 61, 53, 176, 3, 62, 3, 55, 26, 189, 6, 84, 128, 188, 196, 180, 176, 59, 155, 195, 85, 190, 232, 96, 149, 62, 198, 96, 237, 189, 109, 205, 22, 187, 199, 156, 228, 189, 195, 140, 237, 188, 174, 85, 156, 190, 85, 13, 240, 188, 49, 235, 131, 190, 140, 154, 40, 187, 109, 66, 19, 62, 159, 193, 6, 190, 184, 70, 140, 190, 95, 212, 202, 61, 18, 132, 171, 189, 42, 217, 59, 61, 89, 121, 12, 189, 199, 222, 105, 62, 123, 225, 150, 189, 121, 155, 189, 62, 11, 146, 92, 62, 248, 209, 46, 62, 28, 158, 205, 189, 222, 7, 206, 61, 230, 251, 220, 61, 113, 121, 14, 62, 198, 236, 44, 61, 49, 212, 195, 188, 100, 27, 8, 190, 178, 38, 44, 62, 213, 103, 137, 189, 105, 173, 18, 190, 47, 67, 171, 189, 21, 45, 200, 189, 165, 62, 20, 190, 143, 163, 173, 58, 186, 33, 14, 188, 160, 133, 12, 190, 38, 162, 46, 190, 1, 32, 127, 188, 120, 182, 168, 189, 11, 55, 9, 189, 218, 176, 49, 190, 137, 65, 228, 59, 1, 156, 70, 61, 120, 168, 252, 59, 39, 120, 39, 190, 251, 147, 40, 190, 54, 142, 186, 60, 181, 55, 30, 190, 1, 152, 41, 60, 234, 235, 197, 60, 197, 235, 45, 190, 178, 100, 156, 188, 85, 17, 35, 190, 188, 18, 64, 189, 226, 183, 185, 189, 191, 153, 32, 62, 234, 138, 20, 190, 229, 101, 223, 61, 61, 6, 22, 190, 35, 30, 227, 61, 19, 147, 191, 61, 83, 20, 11, 62, 9, 58, 210, 61, 237, 21, 201, 61, 186, 131, 137, 189, 124, 216, 43, 188, 99, 186, 196, 189, 244, 121, 21, 62, 190, 216, 1, 60, 149, 75, 54, 62, 17, 108, 82, 61, 140, 15, 179, 61, 84, 58, 230, 187, 195, 247, 219, 188, 153, 54, 59, 190, 3, 119, 50, 60, 37, 106, 17, 62, 205, 248, 172, 189, 11, 147, 120, 61, 13, 99, 18, 62, 205, 193, 219, 188, 242, 78, 131, 61, 90, 150, 233, 188, 148, 87, 252, 61, 6, 107, 213, 61, 144, 82, 85, 190, 238, 45, 122, 61, 202, 251, 147, 188, 62, 26, 135, 61, 235, 135, 3, 190, 61, 247, 132, 61, 48, 8, 1, 62, 233, 91, 88, 188, 51, 87, 52, 190, 24, 16, 1, 188, 162, 205, 137, 190, 86, 172, 187, 61, 62, 50, 27, 189, 229, 37, 3, 60, 128, 157, 97, 62, 43, 163, 228, 60, 158, 1, 248, 61, 141, 47, 72, 62, 79, 240, 40, 62, 57, 109, 51, 62, 109, 25, 21, 62, 83, 142, 48, 187, 145, 2, 1, 62, 36, 156, 59, 62, 171, 132, 233, 60, 130, 144, 21, 62, 108, 88, 8, 188, 191, 193, 7, 190, 76, 231, 27, 61, 17, 68, 77, 190, 180, 130, 76, 189, 209, 160, 34, 189, 240, 234, 81, 62, 17, 155, 139, 189, 56, 109, 1, 62, 205, 112, 0, 190, 204, 17, 78, 62, 114, 117, 33, 62, 25, 254, 100, 61, 150, 112, 223, 189, 80, 187, 123, 61, 25, 142, 178, 189, 118, 247, 51, 62, 203, 50, 153, 60, 239, 221, 195, 188, 136, 253, 135, 189, 187, 91, 18, 62, 218, 21, 70, 190, 51, 6, 218, 188, 229, 37, 149, 190, 53, 225, 169, 61, 59, 14, 223, 189, 21, 176, 196, 61, 46, 170, 103, 61, 81, 131, 199, 61, 158, 70, 95, 189, 191, 44, 65, 190, 115, 33, 91, 190, 72, 116, 100, 62, 67, 210, 56, 190, 229, 133, 188, 62, 255, 185, 25, 62, 90, 15, 97, 61, 88, 70, 108, 189, 0, 29, 212, 189, 208, 250, 119, 62, 129, 23, 12, 189, 146, 217, 47, 62, 133, 124, 208, 61, 94, 110, 153, 61, 172, 180, 181, 189, 19, 86, 32, 62, 147, 22, 11, 190, 139, 50, 32, 62, 202, 52, 222, 189, 135, 226, 162, 188, 132, 212, 221, 189, 110, 118, 14, 61, 48, 232, 212, 189, 146, 152, 95, 189, 164, 199, 69, 190, 44, 106, 147, 62, 244, 48, 88, 189, 137, 93, 235, 61, 17, 250, 71, 60, 236, 243, 115, 62, 128, 200, 30, 61, 102, 90, 135, 61, 49, 19, 10, 190, 189, 223, 113, 62, 121, 3, 157, 189, 92, 180, 166, 189, 240, 86, 73, 60, 93, 36, 4, 190, 203, 109, 145, 190, 3, 18, 175, 60, 62, 29, 255, 61, 37, 33, 16, 189, 171, 197, 113, 189, 242, 99, 162, 60, 32, 254, 211, 189, 152, 191, 42, 61, 66, 83, 81, 190, 160, 122, 203, 61, 230, 205, 203, 61, 230, 104, 209, 61, 33, 229, 130, 62, 86, 161, 38, 62, 235, 8, 116, 190, 204, 176, 18, 61, 102, 178, 0, 189, 165, 181, 56, 189, 130, 109, 125, 62, 255, 186, 66, 190, 47, 166, 95, 189, 115, 57, 176, 61, 120, 29, 8, 60, 145, 68, 31, 189, 28, 109, 1, 187, 4, 54, 83, 61, 94, 60, 240, 61, 252, 173, 138, 190, 98, 125, 99, 62, 137, 188, 178, 60, 255, 71, 143, 62, 104, 2, 58, 61, 251, 161, 151, 61, 160, 102, 56, 190, 26, 83, 132, 61, 73, 29, 228, 188, 11, 139, 209, 189, 239, 109, 173, 188, 184, 227, 65, 187, 116, 218, 11, 190, 154, 62, 251, 60, 92, 98, 194, 58, 172, 98, 55, 62, 110, 79, 79, 61, 144, 252, 238, 61, 139, 247, 28, 190, 238, 112, 127, 188, 19, 146, 197, 60, 205, 112, 84, 62, 36, 186, 50, 190, 104, 168, 250, 61, 7, 28, 23, 190, 204, 109, 142, 61, 77, 137, 5, 62, 70, 225, 246, 61, 172, 160, 6, 190, 197, 89, 215, 61, 116, 106, 38, 190, 208, 171, 1, 188, 166, 39, 170, 189, 207, 217, 98, 62, 239, 220, 86, 188, 178, 170, 12, 62, 30, 44, 114, 59, 123, 164, 191, 61, 169, 200, 193, 61, 53, 205, 228, 61, 115, 192, 236, 61, 199, 34, 5, 62, 41, 82, 69, 190, 134, 202, 172, 189, 185, 196, 72, 189, 199, 198, 84, 189, 235, 231, 39, 190, 78, 61, 169, 189, 15, 186, 217, 188, 253, 25, 39, 189, 207, 48, 203, 188, 113, 56, 253, 188, 254, 59, 52, 61, 47, 247, 229, 188, 60, 182, 39, 62, 132, 181, 124, 61, 2, 199, 205, 189, 135, 5, 185, 60, 131, 176, 46, 190, 13, 50, 44, 61, 196, 255, 64, 190, 70, 201, 97, 189, 64, 222, 7, 61, 4, 43, 184, 61, 11, 58, 143, 189, 141, 218, 17, 190, 89, 98, 61, 190, 37, 224, 202, 188, 167, 248, 217, 61, 182, 163, 67, 61, 145, 9, 47, 190, 48, 77, 24, 62, 27, 89, 2, 61, 92, 120, 91, 61, 42, 99, 175, 61, 173, 33, 183, 58, 247, 86, 228, 189, 176, 230, 213, 189, 196, 43, 120, 59, 206, 61, 235, 61, 172, 216, 59, 190, 224, 7, 170, 61, 247, 255, 105, 187, 208, 14, 192, 61, 136, 148, 43, 188, 180, 113, 240, 189, 70, 138, 254, 187, 110, 15, 226, 189, 2, 244, 183, 189, 54, 77, 29, 61, 144, 131, 241, 189, 232, 247, 13, 189, 113, 141, 24, 62, 16, 1, 247, 187, 35, 109, 180, 189, 148, 227, 152, 60, 248, 97, 152, 61, 132, 72, 149, 61, 182, 248, 80, 189, 145, 37, 99, 189, 27, 213, 115, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {194, 189, 206, 61, 159, 232, 138, 189, 0, 59, 215, 189, 120, 92, 79, 61, 180, 112, 42, 62, 187, 254, 113, 62, 75, 126, 108, 62, 137, 12, 176, 61, 212, 145, 37, 62, 210, 199, 94, 62, 30, 69, 224, 60, 58, 75, 46, 62, 122, 78, 94, 189, 106, 70, 239, 60, 60, 96, 237, 61, 26, 40, 47, 189, 69, 250, 183, 189, 170, 156, 238, 189, 218, 228, 144, 61, 127, 97, 164, 60, 123, 30, 225, 189, 108, 105, 51, 62, 249, 176, 239, 61, 190, 226, 130, 188, 25, 53, 153, 61, 179, 207, 64, 62, 24, 215, 200, 187, 146, 123, 5, 61, 221, 173, 241, 61, 151, 119, 16, 62, 111, 102, 6, 61, 87, 198, 156, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 184, 65, 62, 178, 113, 14, 61, 24, 174, 4, 62, 36, 235, 133, 61, 174, 9, 216, 62, 132, 55, 81, 190, 153, 116, 119, 61, 196, 61, 70, 190, 63, 59, 242, 62, 179, 154, 184, 190, 249, 191, 63, 190, 16, 178, 151, 190, 105, 109, 159, 62, 195, 249, 134, 190, 90, 156, 221, 60, 74, 37, 21, 190, 23, 18, 6, 190, 93, 161, 209, 188, 26, 157, 247, 189, 92, 86, 255, 189, 89, 31, 25, 62, 179, 141, 169, 62, 33, 115, 129, 62, 85, 217, 167, 61, 136, 26, 171, 61, 112, 8, 78, 189, 103, 162, 64, 62, 218, 145, 105, 190, 218, 100, 177, 61, 132, 141, 165, 61, 128, 230, 224, 188, 12, 28, 156, 60, 62, 190, 64, 61, 14, 63, 248, 61, 254, 9, 202, 61, 249, 63, 22, 190, 22, 80, 171, 61, 12, 246, 115, 187, 161, 182, 96, 190, 89, 157, 5, 62, 101, 150, 98, 190, 0, 236, 243, 60, 101, 34, 105, 190, 113, 186, 14, 62, 163, 170, 254, 61, 167, 254, 143, 60, 116, 87, 212, 61, 55, 164, 67, 190, 181, 154, 224, 61, 250, 203, 231, 61, 4, 164, 17, 190, 25, 52, 6, 189, 67, 225, 3, 62, 70, 69, 152, 189, 244, 208, 249, 61, 212, 31, 13, 190, 229, 213, 9, 190, 234, 203, 35, 190, 113, 227, 68, 62, 109, 60, 250, 61, 25, 85, 12, 189, 123, 53, 131, 189, 38, 74, 6, 62, 24, 245, 143, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 237, 220, 61, 126, 163, 82, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {40, 96, 78, 191, 59, 155, 225, 62, 210, 182, 74, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {126, 69, 204, 191, 40, 72, 199, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0092/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}