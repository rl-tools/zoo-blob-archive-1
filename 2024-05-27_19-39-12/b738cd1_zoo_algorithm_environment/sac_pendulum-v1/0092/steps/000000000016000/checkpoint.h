// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {2, 154, 152, 188, 173, 254, 137, 190, 147, 228, 55, 62, 204, 182, 139, 190, 88, 87, 130, 191, 39, 248, 13, 191, 48, 23, 6, 63, 160, 30, 73, 190, 98, 172, 139, 190, 104, 213, 112, 188, 121, 14, 217, 62, 68, 178, 116, 191, 24, 32, 141, 60, 9, 83, 9, 63, 162, 230, 186, 190, 147, 121, 253, 62, 119, 243, 34, 63, 84, 144, 121, 190, 13, 88, 143, 191, 187, 130, 62, 62, 188, 21, 138, 187, 235, 232, 83, 191, 150, 220, 166, 63, 214, 244, 179, 62, 65, 146, 195, 62, 24, 241, 188, 62, 34, 147, 50, 62, 14, 156, 118, 190, 147, 117, 4, 62, 169, 119, 29, 63, 118, 29, 255, 188, 5, 162, 159, 191, 208, 235, 143, 190, 10, 69, 170, 62, 27, 255, 43, 63, 237, 191, 1, 191, 75, 143, 198, 62, 39, 131, 81, 191, 153, 143, 72, 190, 158, 223, 156, 61, 227, 242, 208, 189, 235, 72, 140, 188, 98, 219, 176, 60, 69, 80, 135, 63, 146, 11, 174, 62, 165, 240, 143, 61, 94, 81, 143, 191, 106, 0, 162, 62, 249, 253, 102, 63, 254, 13, 244, 62, 64, 55, 146, 61, 242, 5, 91, 63, 129, 118, 23, 63, 49, 18, 79, 62, 139, 118, 26, 63, 174, 78, 42, 191, 34, 110, 206, 190, 247, 235, 224, 62, 212, 252, 90, 63, 9, 249, 42, 190, 25, 182, 173, 62, 144, 245, 163, 191, 167, 217, 33, 191, 60, 233, 142, 190, 1, 245, 100, 61, 219, 112, 22, 189, 225, 135, 160, 62, 238, 135, 169, 190, 133, 25, 43, 190, 8, 163, 69, 62, 104, 59, 142, 63, 112, 108, 134, 62, 20, 91, 157, 190, 193, 153, 208, 190, 33, 185, 178, 62, 104, 33, 215, 190, 199, 64, 223, 62, 193, 202, 13, 61, 191, 0, 79, 190, 30, 209, 25, 190, 75, 246, 248, 190, 160, 195, 132, 190, 229, 179, 104, 63, 189, 250, 46, 62, 218, 55, 47, 63, 179, 108, 131, 191, 17, 5, 115, 190, 36, 109, 138, 62, 220, 155, 164, 191, 167, 87, 46, 191, 118, 8, 122, 188, 71, 81, 32, 191, 177, 119, 131, 62, 109, 70, 131, 191, 211, 142, 130, 191, 147, 22, 230, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {202, 115, 46, 191, 217, 188, 150, 190, 212, 5, 254, 190, 140, 61, 187, 190, 151, 155, 198, 60, 62, 203, 171, 62, 203, 237, 204, 62, 2, 61, 155, 62, 171, 134, 167, 190, 43, 0, 74, 186, 127, 234, 52, 62, 87, 3, 61, 189, 213, 79, 14, 189, 165, 200, 228, 190, 66, 47, 161, 190, 1, 117, 246, 61, 18, 173, 8, 62, 3, 31, 137, 190, 231, 114, 196, 62, 179, 194, 13, 189, 178, 227, 66, 62, 5, 136, 228, 62, 134, 96, 147, 62, 211, 70, 138, 61, 174, 200, 171, 190, 69, 224, 16, 63, 94, 207, 42, 191, 88, 168, 214, 62, 158, 168, 162, 186, 137, 44, 228, 61, 172, 11, 95, 188, 73, 13, 154, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {179, 214, 128, 189, 214, 233, 172, 59, 133, 16, 0, 62, 147, 58, 96, 62, 249, 142, 41, 189, 148, 134, 151, 62, 146, 126, 129, 190, 94, 42, 247, 60, 4, 232, 215, 190, 245, 230, 46, 190, 109, 108, 225, 61, 144, 110, 134, 62, 222, 111, 210, 62, 237, 114, 160, 61, 223, 218, 240, 190, 98, 201, 86, 62, 243, 203, 108, 190, 62, 193, 201, 190, 214, 206, 133, 61, 238, 227, 57, 62, 66, 101, 55, 61, 69, 201, 12, 61, 228, 38, 208, 61, 80, 230, 0, 191, 26, 27, 232, 187, 51, 227, 175, 61, 98, 184, 65, 189, 151, 66, 171, 190, 239, 246, 93, 62, 145, 6, 68, 62, 127, 124, 188, 62, 250, 32, 198, 190, 221, 30, 57, 190, 75, 92, 109, 61, 236, 6, 121, 189, 21, 161, 125, 61, 63, 107, 6, 189, 196, 217, 195, 190, 242, 88, 28, 62, 44, 76, 186, 190, 107, 68, 92, 191, 171, 2, 152, 60, 41, 126, 23, 62, 199, 243, 121, 190, 46, 173, 85, 62, 172, 133, 44, 62, 230, 33, 111, 191, 88, 140, 49, 62, 228, 250, 163, 61, 152, 22, 121, 190, 183, 94, 51, 190, 21, 235, 171, 190, 85, 223, 12, 191, 124, 40, 117, 62, 93, 107, 50, 190, 0, 37, 136, 191, 139, 63, 126, 188, 131, 189, 0, 61, 102, 121, 28, 190, 149, 134, 175, 190, 216, 250, 125, 62, 22, 15, 45, 191, 103, 203, 120, 62, 155, 141, 2, 62, 177, 159, 133, 62, 30, 232, 86, 189, 19, 44, 117, 62, 60, 158, 36, 62, 117, 230, 196, 61, 189, 65, 32, 61, 82, 153, 144, 190, 48, 147, 253, 62, 197, 27, 250, 62, 247, 65, 97, 190, 56, 57, 34, 61, 213, 160, 151, 62, 53, 84, 176, 62, 80, 216, 44, 61, 253, 185, 30, 63, 213, 9, 220, 190, 119, 52, 157, 189, 184, 53, 61, 62, 9, 120, 134, 61, 248, 77, 4, 63, 204, 122, 188, 188, 113, 245, 135, 188, 105, 22, 223, 61, 218, 2, 74, 62, 139, 222, 231, 189, 142, 222, 46, 61, 240, 184, 115, 61, 131, 104, 11, 190, 147, 113, 208, 189, 106, 68, 147, 189, 26, 218, 121, 190, 189, 204, 55, 191, 113, 35, 37, 62, 12, 104, 36, 191, 248, 212, 36, 191, 86, 76, 129, 191, 60, 84, 219, 190, 46, 239, 90, 62, 63, 123, 178, 61, 164, 71, 151, 190, 210, 70, 83, 190, 75, 185, 165, 61, 157, 1, 190, 190, 24, 246, 165, 190, 47, 158, 96, 61, 232, 208, 14, 62, 140, 214, 200, 191, 203, 192, 243, 189, 150, 46, 2, 63, 162, 253, 58, 62, 53, 183, 82, 62, 110, 134, 230, 189, 2, 41, 3, 190, 175, 237, 213, 186, 23, 12, 236, 189, 255, 42, 203, 190, 43, 234, 184, 62, 47, 249, 54, 62, 102, 89, 238, 189, 89, 24, 212, 61, 172, 193, 41, 61, 96, 29, 167, 190, 239, 227, 216, 61, 246, 105, 165, 189, 196, 8, 116, 190, 18, 235, 71, 191, 154, 41, 10, 61, 166, 193, 163, 191, 99, 16, 208, 62, 46, 226, 171, 191, 25, 250, 136, 62, 171, 171, 202, 61, 211, 109, 212, 190, 222, 8, 216, 61, 228, 221, 216, 189, 83, 42, 128, 191, 46, 190, 12, 191, 196, 198, 57, 189, 235, 191, 254, 189, 252, 151, 194, 190, 11, 119, 38, 62, 103, 222, 197, 190, 26, 155, 131, 190, 104, 191, 9, 191, 164, 7, 197, 191, 156, 47, 35, 62, 15, 111, 125, 191, 160, 71, 42, 189, 98, 136, 192, 61, 173, 12, 165, 61, 239, 176, 27, 190, 210, 184, 78, 62, 219, 24, 199, 190, 39, 47, 216, 191, 227, 202, 129, 62, 171, 52, 63, 63, 128, 68, 31, 61, 32, 176, 58, 62, 84, 97, 144, 190, 145, 43, 170, 60, 58, 40, 139, 189, 79, 181, 53, 62, 51, 199, 101, 62, 119, 166, 106, 191, 252, 143, 41, 190, 113, 34, 148, 61, 202, 179, 149, 187, 35, 177, 4, 62, 193, 97, 22, 191, 87, 237, 83, 61, 86, 161, 170, 191, 133, 156, 159, 188, 198, 48, 138, 62, 225, 254, 135, 62, 135, 20, 40, 190, 182, 89, 12, 190, 126, 234, 217, 61, 106, 199, 43, 61, 48, 29, 163, 60, 160, 205, 0, 61, 229, 191, 2, 191, 188, 127, 23, 190, 69, 166, 222, 59, 118, 176, 213, 62, 14, 148, 76, 190, 2, 141, 208, 188, 160, 229, 30, 191, 237, 92, 26, 62, 254, 18, 207, 61, 158, 135, 121, 190, 49, 25, 142, 190, 132, 165, 6, 189, 19, 149, 57, 189, 230, 95, 229, 61, 60, 29, 59, 190, 102, 104, 28, 190, 225, 115, 230, 189, 144, 50, 86, 62, 81, 204, 191, 189, 140, 114, 154, 188, 0, 32, 128, 188, 111, 115, 11, 188, 94, 103, 153, 189, 209, 50, 167, 61, 155, 129, 43, 62, 2, 23, 145, 190, 98, 121, 158, 62, 77, 201, 223, 61, 252, 43, 187, 61, 200, 227, 23, 62, 11, 22, 156, 62, 181, 108, 40, 190, 166, 175, 221, 61, 66, 23, 56, 60, 42, 184, 191, 189, 6, 137, 3, 62, 148, 202, 148, 62, 218, 252, 35, 61, 23, 255, 156, 62, 84, 151, 239, 189, 159, 119, 170, 190, 216, 29, 12, 62, 203, 50, 238, 190, 119, 20, 133, 62, 198, 39, 30, 190, 242, 154, 11, 61, 210, 79, 124, 62, 213, 8, 152, 191, 81, 241, 70, 61, 72, 80, 34, 189, 216, 1, 227, 61, 84, 157, 139, 61, 189, 34, 238, 190, 35, 140, 33, 190, 130, 162, 144, 191, 197, 13, 134, 62, 24, 217, 1, 63, 64, 173, 190, 62, 38, 75, 184, 190, 241, 216, 67, 61, 33, 82, 255, 187, 81, 183, 116, 62, 197, 36, 155, 62, 171, 134, 150, 61, 109, 6, 160, 190, 176, 218, 220, 61, 114, 212, 199, 190, 125, 34, 111, 62, 127, 184, 18, 191, 14, 184, 13, 190, 176, 80, 195, 190, 222, 135, 242, 62, 45, 88, 153, 188, 29, 81, 43, 191, 23, 116, 126, 190, 200, 119, 60, 191, 191, 244, 252, 62, 187, 51, 176, 191, 173, 185, 96, 189, 132, 221, 128, 62, 225, 230, 71, 190, 46, 227, 30, 189, 19, 37, 145, 62, 23, 169, 20, 191, 247, 19, 45, 189, 226, 47, 10, 62, 57, 251, 239, 61, 47, 159, 112, 190, 71, 84, 89, 189, 116, 144, 23, 190, 2, 78, 6, 62, 26, 111, 122, 190, 148, 111, 76, 191, 171, 70, 89, 61, 28, 80, 22, 191, 141, 130, 202, 61, 132, 141, 69, 62, 169, 250, 171, 187, 182, 14, 123, 61, 142, 157, 12, 62, 144, 192, 4, 60, 65, 117, 80, 191, 89, 214, 45, 61, 44, 143, 199, 62, 215, 42, 151, 190, 67, 147, 239, 61, 195, 27, 215, 190, 241, 208, 41, 62, 65, 179, 151, 190, 167, 82, 5, 62, 255, 71, 83, 62, 181, 70, 166, 190, 60, 224, 198, 190, 86, 242, 226, 190, 71, 104, 39, 60, 148, 175, 179, 61, 94, 9, 94, 191, 221, 217, 89, 60, 202, 198, 158, 190, 66, 131, 12, 62, 96, 247, 85, 190, 99, 108, 50, 62, 149, 171, 129, 190, 67, 98, 132, 189, 21, 87, 159, 188, 119, 137, 222, 61, 160, 144, 134, 61, 90, 75, 130, 62, 238, 52, 136, 191, 79, 117, 61, 62, 165, 138, 222, 189, 21, 65, 1, 63, 194, 76, 36, 191, 185, 218, 205, 61, 69, 45, 105, 191, 217, 227, 55, 62, 0, 5, 211, 60, 158, 113, 209, 61, 115, 141, 46, 190, 0, 172, 108, 62, 166, 115, 207, 188, 49, 214, 194, 61, 152, 175, 197, 189, 239, 145, 25, 190, 23, 215, 135, 61, 153, 238, 19, 62, 226, 125, 135, 60, 82, 148, 164, 61, 104, 139, 121, 190, 98, 93, 189, 60, 191, 66, 245, 190, 24, 110, 162, 62, 239, 88, 106, 189, 158, 255, 133, 61, 43, 44, 234, 61, 180, 123, 244, 59, 224, 253, 16, 62, 77, 53, 137, 61, 224, 104, 210, 61, 48, 151, 62, 62, 122, 253, 99, 59, 76, 253, 138, 62, 18, 192, 47, 188, 100, 214, 179, 62, 157, 173, 91, 190, 24, 222, 185, 60, 221, 220, 187, 189, 7, 47, 13, 62, 181, 15, 154, 188, 78, 211, 200, 189, 235, 245, 158, 190, 158, 13, 2, 62, 155, 139, 155, 189, 115, 234, 145, 62, 92, 171, 41, 62, 149, 5, 23, 190, 176, 151, 79, 190, 161, 39, 199, 189, 209, 83, 9, 189, 239, 146, 139, 62, 27, 254, 88, 191, 249, 22, 199, 188, 188, 147, 1, 191, 96, 97, 178, 62, 183, 93, 143, 62, 146, 80, 67, 62, 46, 48, 242, 189, 17, 85, 147, 61, 91, 117, 31, 190, 63, 76, 177, 62, 245, 63, 174, 60, 104, 64, 1, 62, 184, 161, 159, 190, 105, 47, 13, 62, 60, 34, 161, 190, 205, 22, 192, 62, 212, 231, 32, 191, 227, 24, 225, 189, 12, 248, 73, 189, 118, 158, 139, 190, 19, 71, 13, 62, 59, 185, 170, 190, 209, 227, 153, 62, 147, 192, 183, 191, 127, 57, 92, 62, 99, 1, 133, 190, 0, 58, 243, 61, 236, 239, 28, 62, 248, 56, 131, 189, 119, 187, 182, 61, 191, 224, 174, 62, 185, 13, 199, 190, 246, 255, 202, 62, 5, 181, 34, 62, 164, 6, 238, 62, 52, 153, 205, 190, 137, 151, 139, 62, 213, 248, 219, 189, 13, 220, 177, 62, 32, 54, 217, 61, 53, 26, 189, 61, 62, 11, 205, 61, 70, 19, 107, 61, 120, 13, 54, 189, 110, 40, 179, 60, 18, 216, 62, 62, 234, 6, 213, 189, 103, 252, 153, 59, 107, 251, 9, 63, 141, 210, 38, 60, 4, 194, 255, 61, 10, 219, 167, 62, 238, 153, 180, 188, 35, 93, 28, 59, 86, 162, 213, 190, 151, 198, 5, 189, 46, 166, 201, 189, 7, 108, 97, 62, 189, 246, 155, 62, 77, 223, 146, 191, 25, 209, 147, 189, 229, 164, 185, 190, 3, 44, 65, 187, 138, 238, 159, 189, 134, 3, 38, 191, 190, 247, 234, 189, 85, 171, 244, 191, 92, 227, 40, 62, 109, 148, 43, 62, 38, 147, 185, 62, 217, 140, 244, 189, 166, 208, 65, 62, 141, 129, 158, 61, 83, 24, 239, 61, 117, 220, 69, 62, 224, 13, 218, 62, 146, 25, 23, 191, 45, 222, 15, 62, 229, 212, 52, 190, 140, 105, 164, 62, 216, 82, 22, 191, 15, 124, 251, 61, 15, 71, 219, 190, 107, 60, 229, 62, 134, 180, 132, 189, 199, 156, 255, 189, 83, 87, 59, 189, 82, 114, 169, 61, 179, 217, 154, 60, 33, 140, 49, 188, 150, 125, 48, 60, 247, 67, 208, 59, 9, 226, 183, 61, 26, 59, 225, 189, 193, 204, 209, 61, 241, 231, 216, 189, 40, 160, 129, 189, 20, 132, 174, 61, 174, 74, 148, 189, 34, 24, 248, 188, 45, 169, 186, 188, 1, 52, 44, 190, 196, 251, 188, 189, 146, 144, 37, 190, 123, 6, 72, 61, 107, 58, 85, 190, 151, 203, 190, 189, 40, 87, 3, 190, 228, 238, 248, 189, 58, 55, 20, 60, 21, 85, 227, 60, 231, 28, 242, 188, 158, 42, 70, 61, 186, 224, 39, 190, 79, 6, 5, 62, 8, 94, 166, 189, 29, 225, 132, 61, 233, 17, 109, 62, 125, 43, 175, 190, 107, 84, 55, 189, 123, 70, 207, 189, 222, 147, 168, 61, 247, 73, 16, 62, 229, 115, 214, 188, 70, 249, 142, 190, 179, 112, 7, 61, 211, 217, 32, 62, 66, 216, 60, 62, 63, 178, 243, 190, 82, 123, 129, 61, 57, 220, 143, 190, 136, 79, 158, 62, 168, 191, 25, 62, 111, 88, 221, 188, 71, 56, 198, 188, 121, 198, 218, 189, 200, 120, 60, 189, 218, 190, 74, 62, 174, 125, 232, 60, 4, 219, 177, 59, 208, 116, 7, 62, 201, 1, 113, 62, 42, 45, 135, 189, 146, 20, 61, 62, 236, 179, 16, 188, 247, 125, 78, 62, 142, 23, 47, 190, 168, 66, 194, 62, 99, 186, 22, 190, 51, 51, 204, 189, 137, 50, 137, 61, 203, 201, 26, 190, 251, 29, 167, 61, 153, 219, 165, 60, 26, 98, 37, 62, 244, 113, 9, 190, 190, 86, 0, 62, 154, 174, 13, 189, 61, 202, 241, 189, 162, 145, 242, 189, 89, 219, 21, 190, 29, 100, 109, 61, 194, 41, 37, 61, 105, 69, 88, 189, 196, 49, 69, 185, 204, 10, 174, 60, 19, 0, 146, 188, 69, 23, 163, 189, 172, 21, 16, 62, 203, 243, 54, 189, 119, 159, 223, 189, 198, 17, 255, 61, 240, 7, 27, 190, 161, 189, 92, 188, 124, 159, 41, 190, 85, 11, 33, 190, 43, 227, 139, 189, 206, 204, 127, 187, 20, 192, 35, 62, 104, 168, 132, 189, 3, 211, 17, 189, 135, 14, 32, 190, 60, 116, 8, 190, 111, 89, 230, 189, 211, 152, 216, 190, 214, 162, 146, 190, 166, 122, 203, 62, 101, 46, 89, 188, 99, 43, 153, 190, 187, 133, 210, 59, 155, 162, 184, 189, 124, 231, 185, 190, 42, 126, 13, 191, 243, 57, 248, 189, 3, 201, 132, 62, 110, 12, 155, 189, 5, 100, 213, 190, 151, 253, 132, 189, 199, 129, 138, 191, 145, 101, 173, 62, 122, 73, 201, 60, 82, 144, 150, 62, 216, 55, 93, 190, 90, 22, 73, 190, 8, 236, 154, 62, 240, 149, 169, 62, 104, 128, 22, 191, 43, 142, 62, 61, 56, 160, 115, 190, 33, 224, 135, 61, 91, 167, 203, 62, 17, 101, 70, 61, 61, 149, 195, 190, 178, 12, 149, 62, 213, 77, 131, 61, 138, 51, 121, 62, 152, 102, 232, 189, 153, 19, 58, 190, 33, 239, 112, 189, 6, 71, 128, 190, 163, 241, 209, 62, 223, 155, 216, 188, 184, 141, 186, 188, 90, 237, 149, 189, 66, 143, 19, 190, 171, 127, 175, 189, 40, 121, 198, 189, 39, 191, 221, 189, 240, 38, 130, 62, 133, 1, 204, 62, 23, 204, 55, 189, 28, 109, 20, 191, 103, 45, 232, 185, 247, 173, 238, 189, 45, 43, 0, 190, 40, 242, 200, 61, 124, 216, 101, 189, 35, 69, 54, 190, 228, 74, 68, 62, 249, 24, 128, 187, 107, 106, 135, 190, 193, 20, 188, 61, 204, 206, 219, 61, 93, 30, 65, 63, 226, 105, 4, 190, 211, 97, 51, 189, 89, 52, 166, 61, 237, 49, 202, 189, 127, 123, 144, 186, 119, 132, 78, 190, 104, 220, 202, 189, 145, 151, 210, 189, 21, 17, 56, 190, 94, 41, 69, 190, 46, 252, 77, 60, 82, 32, 128, 189, 100, 172, 209, 187, 54, 164, 188, 61, 90, 248, 20, 190, 226, 161, 164, 189, 204, 21, 61, 190, 246, 88, 163, 61, 37, 37, 18, 61, 78, 63, 6, 60, 240, 9, 78, 189, 18, 81, 120, 61, 58, 254, 22, 190, 206, 142, 208, 61, 73, 246, 22, 190, 46, 192, 185, 61, 81, 129, 135, 189, 214, 210, 208, 61, 1, 156, 167, 59, 196, 89, 99, 189, 25, 100, 237, 189, 214, 206, 52, 189, 211, 39, 131, 189, 194, 144, 173, 61, 0, 89, 16, 62, 253, 64, 197, 61, 131, 93, 119, 60, 122, 220, 206, 61, 88, 8, 33, 189, 211, 46, 153, 62, 200, 54, 16, 63, 250, 187, 140, 190, 33, 116, 71, 62, 150, 33, 40, 62, 186, 5, 165, 62, 210, 167, 5, 190, 71, 159, 4, 63, 117, 109, 131, 188, 216, 245, 122, 58, 2, 96, 147, 189, 149, 166, 136, 187, 154, 129, 246, 62, 30, 126, 148, 186, 6, 197, 189, 189, 178, 188, 74, 62, 146, 119, 42, 61, 21, 184, 12, 190, 223, 214, 235, 60, 52, 79, 161, 59, 88, 144, 137, 190, 68, 85, 118, 62, 217, 235, 12, 62, 211, 16, 247, 60, 186, 142, 213, 190, 17, 173, 128, 190, 110, 88, 73, 191, 248, 131, 59, 190, 134, 180, 140, 61, 5, 31, 130, 62, 185, 253, 47, 61, 217, 47, 143, 62, 25, 6, 147, 62, 219, 180, 159, 191, 159, 106, 38, 62, 108, 28, 93, 190, 241, 232, 254, 190, 106, 250, 195, 62, 136, 249, 186, 189, 184, 45, 33, 191, 0, 6, 138, 190, 88, 25, 27, 62, 241, 136, 242, 190, 11, 39, 29, 62, 134, 196, 6, 191, 223, 137, 140, 190, 24, 18, 47, 62, 89, 179, 65, 62, 106, 185, 31, 191, 183, 217, 33, 62, 151, 114, 140, 62, 221, 14, 126, 60, 144, 24, 200, 189, 244, 8, 174, 62, 12, 124, 99, 190, 81, 202, 250, 62, 86, 149, 9, 62, 1, 77, 107, 61, 2, 137, 15, 191, 45, 173, 72, 189, 227, 107, 18, 190, 225, 228, 166, 62, 138, 191, 14, 191, 107, 179, 249, 61, 179, 247, 145, 62, 244, 97, 105, 190, 61, 117, 54, 61, 182, 83, 144, 61, 133, 101, 128, 190, 75, 34, 11, 63, 198, 96, 237, 189, 33, 147, 144, 190, 95, 251, 54, 190, 141, 204, 168, 61, 177, 160, 167, 190, 82, 128, 15, 62, 23, 177, 169, 190, 83, 0, 171, 190, 43, 34, 165, 61, 55, 74, 217, 190, 229, 28, 1, 190, 41, 135, 163, 61, 49, 36, 44, 189, 178, 113, 253, 61, 60, 48, 101, 61, 156, 65, 156, 62, 68, 208, 19, 191, 92, 209, 161, 62, 71, 17, 146, 62, 248, 209, 46, 62, 28, 158, 205, 189, 222, 7, 206, 61, 230, 251, 220, 61, 113, 121, 14, 62, 198, 236, 44, 61, 49, 212, 195, 188, 100, 27, 8, 190, 178, 38, 44, 62, 213, 103, 137, 189, 105, 173, 18, 190, 47, 67, 171, 189, 21, 45, 200, 189, 165, 62, 20, 190, 143, 163, 173, 58, 186, 33, 14, 188, 160, 133, 12, 190, 38, 162, 46, 190, 1, 32, 127, 188, 120, 182, 168, 189, 11, 55, 9, 189, 218, 176, 49, 190, 137, 65, 228, 59, 1, 156, 70, 61, 120, 168, 252, 59, 39, 120, 39, 190, 251, 147, 40, 190, 54, 142, 186, 60, 181, 55, 30, 190, 1, 152, 41, 60, 234, 235, 197, 60, 197, 235, 45, 190, 59, 98, 179, 189, 86, 145, 60, 191, 163, 141, 13, 191, 147, 142, 120, 191, 31, 206, 101, 190, 201, 135, 213, 189, 123, 87, 126, 61, 182, 233, 5, 191, 91, 69, 148, 62, 61, 207, 93, 190, 45, 155, 136, 189, 180, 134, 67, 190, 65, 89, 234, 61, 186, 131, 137, 189, 130, 115, 227, 191, 175, 129, 224, 190, 92, 52, 215, 62, 85, 38, 37, 62, 31, 113, 73, 62, 159, 115, 234, 61, 59, 214, 19, 189, 240, 183, 135, 189, 176, 185, 1, 61, 88, 202, 148, 190, 204, 221, 175, 189, 104, 73, 235, 61, 218, 203, 132, 190, 218, 81, 210, 189, 54, 218, 100, 62, 83, 108, 89, 190, 153, 102, 208, 189, 161, 136, 115, 190, 155, 35, 34, 190, 217, 83, 94, 190, 69, 3, 137, 190, 218, 108, 13, 62, 7, 46, 36, 61, 74, 94, 208, 61, 175, 158, 138, 60, 74, 169, 19, 190, 102, 18, 224, 61, 236, 42, 216, 189, 58, 193, 9, 191, 224, 242, 247, 60, 106, 184, 55, 191, 86, 172, 187, 61, 144, 82, 171, 190, 111, 167, 223, 189, 24, 45, 183, 62, 234, 184, 46, 189, 30, 90, 216, 61, 161, 17, 175, 62, 51, 129, 91, 61, 32, 99, 130, 62, 140, 200, 25, 62, 62, 141, 158, 59, 171, 175, 217, 60, 85, 168, 183, 62, 12, 216, 102, 189, 96, 120, 137, 62, 164, 10, 52, 190, 179, 45, 130, 190, 123, 60, 28, 189, 50, 170, 130, 190, 66, 45, 2, 190, 251, 225, 198, 190, 179, 20, 202, 62, 100, 193, 21, 191, 71, 141, 137, 62, 31, 16, 27, 189, 99, 103, 109, 62, 69, 104, 247, 61, 38, 124, 59, 191, 137, 228, 30, 190, 154, 118, 158, 188, 29, 134, 144, 189, 192, 247, 203, 62, 203, 50, 153, 60, 234, 159, 66, 191, 105, 6, 20, 59, 179, 158, 153, 62, 63, 238, 220, 190, 129, 22, 79, 62, 250, 163, 124, 190, 227, 125, 121, 61, 115, 208, 236, 188, 215, 150, 75, 62, 12, 170, 156, 190, 184, 43, 124, 61, 118, 221, 15, 189, 167, 56, 93, 190, 33, 50, 178, 190, 106, 23, 239, 62, 40, 47, 81, 190, 22, 95, 222, 62, 55, 12, 214, 59, 229, 163, 143, 189, 41, 203, 122, 190, 49, 49, 127, 190, 225, 178, 132, 62, 124, 32, 156, 60, 85, 196, 112, 62, 130, 71, 158, 62, 78, 131, 3, 190, 55, 250, 159, 190, 139, 31, 34, 62, 96, 231, 225, 190, 72, 169, 123, 62, 192, 59, 145, 191, 135, 226, 162, 188, 3, 166, 232, 190, 216, 10, 69, 62, 161, 56, 84, 188, 47, 179, 39, 190, 128, 129, 168, 190, 136, 162, 184, 62, 195, 99, 28, 190, 58, 136, 147, 62, 117, 225, 57, 189, 226, 104, 47, 62, 17, 70, 131, 61, 66, 219, 112, 62, 100, 162, 160, 190, 105, 64, 149, 62, 92, 208, 47, 191, 65, 132, 57, 190, 223, 120, 30, 62, 200, 158, 1, 190, 25, 240, 75, 190, 224, 165, 58, 191, 80, 137, 15, 190, 30, 164, 20, 191, 97, 192, 170, 60, 191, 7, 246, 61, 212, 253, 136, 62, 245, 195, 143, 62, 31, 132, 97, 191, 61, 243, 163, 61, 180, 100, 251, 189, 42, 3, 185, 61, 161, 246, 117, 62, 86, 161, 38, 62, 54, 1, 69, 191, 147, 80, 164, 188, 11, 118, 91, 61, 252, 74, 148, 190, 188, 158, 147, 62, 161, 153, 138, 188, 110, 206, 123, 190, 247, 80, 106, 62, 230, 225, 206, 60, 121, 133, 114, 190, 159, 9, 86, 58, 182, 61, 118, 62, 56, 112, 156, 62, 143, 200, 23, 190, 38, 73, 104, 62, 79, 248, 76, 190, 12, 41, 142, 62, 134, 179, 152, 61, 114, 155, 190, 61, 87, 76, 189, 190, 249, 253, 4, 190, 137, 165, 245, 190, 117, 56, 133, 190, 116, 238, 63, 61, 202, 74, 64, 62, 184, 166, 150, 190, 223, 147, 33, 191, 192, 14, 234, 189, 120, 96, 46, 62, 63, 137, 180, 188, 105, 60, 192, 61, 139, 247, 28, 190, 171, 230, 62, 191, 121, 15, 23, 62, 251, 111, 166, 62, 242, 115, 135, 190, 201, 134, 20, 62, 5, 164, 4, 189, 199, 248, 18, 61, 203, 160, 123, 62, 247, 157, 65, 62, 235, 158, 61, 191, 60, 125, 137, 61, 167, 130, 211, 189, 176, 94, 136, 190, 175, 150, 180, 190, 49, 57, 95, 62, 149, 236, 54, 189, 115, 123, 83, 62, 162, 245, 252, 61, 61, 58, 170, 61, 22, 54, 142, 62, 114, 168, 22, 62, 137, 162, 6, 62, 246, 164, 48, 59, 122, 213, 203, 190, 162, 155, 192, 190, 169, 27, 43, 190, 166, 23, 4, 63, 73, 74, 165, 61, 24, 143, 236, 61, 181, 175, 36, 190, 22, 231, 185, 62, 207, 48, 203, 188, 251, 117, 17, 61, 151, 157, 146, 62, 134, 135, 175, 62, 72, 254, 35, 63, 136, 140, 230, 61, 134, 14, 65, 191, 45, 166, 232, 61, 204, 130, 209, 190, 64, 3, 45, 187, 115, 133, 103, 190, 207, 143, 94, 59, 246, 239, 254, 190, 138, 73, 56, 62, 235, 38, 216, 190, 18, 62, 146, 61, 9, 90, 155, 189, 148, 96, 211, 61, 202, 92, 188, 62, 182, 163, 67, 61, 116, 19, 47, 190, 48, 77, 24, 62, 27, 89, 2, 61, 92, 120, 91, 61, 42, 99, 175, 61, 185, 127, 151, 56, 247, 86, 228, 189, 176, 230, 213, 189, 129, 165, 94, 58, 177, 80, 228, 61, 172, 216, 59, 190, 2, 98, 167, 61, 247, 255, 105, 187, 208, 14, 192, 61, 103, 94, 89, 188, 11, 154, 240, 189, 70, 138, 254, 187, 119, 224, 227, 189, 2, 244, 183, 189, 231, 192, 20, 61, 101, 221, 244, 189, 58, 73, 14, 189, 113, 141, 24, 62, 123, 118, 28, 188, 247, 245, 182, 189, 148, 227, 152, 60, 79, 58, 152, 61, 237, 140, 145, 61, 218, 167, 84, 189, 56, 48, 109, 189, 252, 93, 103, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {16, 30, 72, 62, 169, 109, 157, 61, 157, 68, 17, 190, 169, 86, 37, 62, 238, 193, 52, 62, 77, 214, 95, 62, 193, 135, 79, 62, 88, 179, 93, 62, 21, 84, 93, 61, 57, 175, 113, 62, 149, 246, 201, 61, 155, 105, 178, 62, 210, 127, 11, 187, 83, 166, 23, 62, 60, 96, 237, 61, 91, 167, 192, 60, 69, 250, 183, 189, 134, 21, 25, 62, 93, 211, 79, 60, 226, 161, 233, 187, 177, 69, 141, 189, 135, 89, 134, 62, 30, 5, 17, 61, 190, 226, 130, 188, 246, 109, 162, 61, 106, 202, 154, 62, 234, 17, 109, 61, 97, 42, 50, 62, 217, 110, 72, 62, 226, 224, 92, 62, 140, 3, 26, 190, 220, 243, 162, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 90, 145, 62, 85, 70, 33, 63, 189, 81, 139, 62, 109, 25, 13, 62, 54, 118, 155, 63, 244, 232, 114, 190, 207, 33, 66, 187, 149, 250, 79, 191, 186, 233, 80, 63, 222, 249, 49, 191, 146, 181, 242, 189, 34, 148, 4, 191, 73, 23, 211, 62, 192, 56, 82, 191, 90, 156, 221, 60, 222, 170, 198, 189, 23, 18, 6, 190, 3, 226, 239, 190, 76, 124, 26, 191, 93, 13, 120, 189, 0, 232, 106, 62, 236, 16, 135, 63, 183, 123, 185, 62, 85, 217, 167, 61, 96, 93, 47, 62, 111, 206, 224, 189, 10, 87, 12, 63, 68, 124, 15, 191, 219, 49, 137, 62, 107, 153, 182, 62, 237, 65, 3, 191, 76, 169, 152, 60, 142, 213, 129, 189, 157, 44, 154, 62, 84, 232, 213, 59, 136, 102, 84, 191, 159, 123, 136, 62, 144, 235, 4, 189, 225, 7, 145, 190, 8, 91, 35, 62, 180, 0, 90, 190, 144, 19, 35, 62, 136, 70, 130, 190, 92, 245, 87, 62, 80, 18, 54, 61, 147, 128, 143, 61, 116, 87, 212, 61, 142, 195, 7, 190, 181, 154, 224, 61, 177, 103, 141, 189, 9, 55, 145, 62, 35, 100, 46, 189, 136, 190, 251, 59, 228, 45, 131, 60, 16, 107, 9, 62, 212, 31, 13, 190, 125, 35, 58, 191, 7, 112, 204, 190, 69, 160, 171, 62, 173, 7, 9, 62, 243, 72, 158, 59, 174, 18, 14, 189, 34, 190, 37, 61, 175, 196, 137, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 186, 64, 61, 0, 167, 178, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {82, 42, 145, 190, 51, 83, 142, 190, 19, 213, 156, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {142, 34, 158, 191, 130, 184, 17, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0092/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}