// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 139, 123, 190, 165, 4, 97, 190, 190, 142, 112, 62, 219, 218, 182, 190, 141, 210, 72, 191, 50, 230, 28, 191, 219, 245, 1, 63, 30, 10, 183, 189, 230, 8, 156, 190, 212, 191, 10, 190, 68, 178, 197, 62, 90, 12, 111, 191, 251, 240, 164, 61, 186, 137, 30, 63, 83, 173, 184, 190, 19, 219, 10, 63, 183, 138, 3, 63, 53, 180, 160, 190, 11, 1, 109, 191, 165, 95, 244, 61, 194, 28, 28, 60, 185, 94, 47, 191, 223, 247, 150, 63, 241, 101, 179, 62, 8, 101, 202, 62, 50, 71, 164, 62, 68, 156, 33, 62, 168, 81, 62, 190, 177, 213, 174, 61, 169, 140, 54, 63, 252, 237, 4, 189, 232, 27, 142, 191, 168, 96, 173, 190, 95, 157, 155, 62, 73, 34, 56, 63, 166, 206, 27, 191, 185, 77, 193, 62, 248, 96, 61, 191, 168, 12, 56, 190, 158, 223, 156, 61, 227, 242, 208, 189, 235, 72, 140, 188, 219, 13, 75, 62, 155, 250, 98, 63, 87, 48, 141, 62, 81, 3, 208, 59, 22, 185, 137, 191, 133, 52, 182, 62, 13, 198, 107, 63, 124, 152, 203, 62, 206, 155, 209, 61, 109, 73, 96, 63, 7, 242, 247, 62, 121, 33, 115, 62, 91, 201, 23, 63, 211, 158, 21, 191, 255, 223, 222, 190, 222, 132, 208, 62, 191, 53, 83, 63, 12, 34, 196, 188, 134, 62, 201, 62, 106, 27, 133, 191, 34, 137, 65, 191, 229, 74, 87, 190, 30, 176, 40, 61, 178, 194, 33, 189, 98, 113, 178, 62, 163, 77, 128, 190, 136, 189, 129, 190, 38, 219, 90, 62, 213, 103, 136, 63, 142, 164, 121, 62, 37, 41, 135, 190, 36, 255, 24, 191, 161, 62, 180, 62, 197, 244, 139, 190, 179, 114, 225, 62, 1, 106, 138, 61, 130, 140, 112, 190, 108, 141, 118, 189, 98, 193, 247, 190, 172, 184, 117, 190, 153, 151, 89, 63, 108, 180, 48, 62, 11, 242, 44, 63, 71, 1, 115, 191, 58, 87, 106, 190, 186, 192, 147, 62, 45, 153, 136, 191, 96, 170, 77, 191, 140, 143, 122, 188, 228, 141, 10, 191, 51, 253, 127, 62, 250, 155, 97, 191, 254, 232, 84, 191, 144, 75, 234, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {67, 164, 21, 191, 195, 239, 133, 190, 121, 88, 223, 190, 133, 140, 158, 190, 69, 102, 186, 61, 143, 12, 177, 62, 4, 206, 90, 62, 38, 31, 108, 62, 211, 82, 138, 190, 3, 177, 213, 60, 84, 16, 173, 62, 27, 205, 170, 187, 168, 129, 133, 60, 165, 200, 228, 190, 112, 189, 175, 190, 53, 73, 137, 61, 107, 87, 45, 62, 192, 187, 123, 190, 109, 124, 219, 62, 193, 18, 22, 189, 145, 6, 225, 62, 124, 168, 221, 62, 90, 228, 182, 62, 92, 112, 242, 60, 46, 40, 142, 190, 53, 117, 2, 63, 209, 79, 244, 190, 138, 183, 215, 62, 191, 163, 89, 61, 176, 37, 185, 62, 5, 147, 169, 60, 147, 187, 114, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 109, 98, 61, 110, 52, 9, 59, 3, 134, 211, 61, 54, 3, 120, 62, 254, 24, 115, 188, 150, 48, 139, 62, 42, 25, 36, 190, 184, 64, 151, 60, 55, 154, 253, 190, 77, 88, 195, 189, 72, 121, 14, 62, 216, 86, 133, 62, 217, 90, 200, 62, 237, 114, 160, 61, 184, 144, 67, 190, 66, 203, 77, 62, 55, 28, 144, 190, 96, 139, 225, 190, 7, 119, 115, 61, 58, 212, 51, 62, 212, 110, 52, 61, 216, 254, 209, 60, 19, 110, 134, 61, 84, 241, 231, 190, 205, 238, 158, 61, 177, 171, 242, 61, 166, 33, 100, 189, 191, 13, 128, 190, 38, 17, 52, 62, 25, 219, 76, 62, 162, 77, 183, 62, 57, 46, 131, 190, 133, 114, 23, 190, 66, 49, 204, 59, 236, 6, 121, 189, 21, 161, 125, 61, 63, 107, 6, 189, 165, 211, 137, 190, 140, 176, 63, 189, 34, 171, 157, 190, 230, 156, 32, 191, 83, 224, 192, 60, 59, 5, 143, 61, 199, 243, 121, 190, 242, 148, 28, 62, 172, 133, 44, 62, 2, 129, 246, 190, 228, 136, 19, 62, 214, 240, 141, 61, 138, 206, 39, 190, 163, 103, 237, 190, 21, 235, 171, 190, 23, 209, 7, 191, 172, 4, 11, 62, 111, 110, 20, 191, 108, 17, 38, 191, 104, 64, 93, 188, 124, 215, 25, 57, 102, 121, 28, 190, 76, 207, 137, 190, 109, 116, 58, 62, 151, 194, 5, 191, 62, 130, 106, 62, 193, 5, 149, 60, 113, 89, 40, 62, 90, 122, 31, 189, 113, 250, 94, 62, 142, 159, 72, 62, 238, 34, 4, 62, 112, 125, 12, 61, 217, 2, 214, 189, 171, 239, 197, 62, 66, 94, 185, 62, 217, 64, 139, 190, 65, 91, 247, 61, 240, 20, 154, 62, 100, 129, 203, 62, 80, 216, 44, 61, 138, 197, 3, 63, 1, 246, 154, 190, 73, 205, 180, 189, 124, 202, 25, 62, 150, 8, 223, 61, 159, 148, 1, 63, 38, 210, 67, 60, 125, 144, 231, 60, 30, 118, 252, 61, 2, 152, 59, 62, 248, 86, 8, 190, 134, 145, 165, 61, 249, 85, 121, 61, 111, 18, 247, 189, 20, 155, 141, 189, 91, 70, 13, 189, 150, 224, 103, 190, 140, 6, 3, 191, 59, 123, 23, 61, 249, 8, 24, 191, 219, 90, 163, 190, 27, 183, 181, 190, 128, 25, 147, 190, 165, 21, 97, 62, 202, 112, 0, 62, 10, 45, 139, 190, 229, 53, 213, 190, 182, 240, 22, 61, 128, 161, 95, 190, 119, 129, 105, 190, 198, 6, 223, 61, 232, 208, 14, 62, 186, 46, 168, 191, 173, 77, 66, 190, 181, 245, 234, 62, 157, 142, 164, 61, 16, 222, 94, 62, 58, 125, 119, 189, 204, 169, 195, 189, 206, 216, 185, 187, 116, 88, 248, 189, 170, 70, 212, 190, 45, 189, 167, 62, 252, 84, 66, 62, 102, 89, 238, 189, 187, 96, 89, 61, 157, 232, 129, 61, 255, 210, 138, 190, 11, 88, 28, 61, 2, 229, 146, 187, 32, 136, 149, 190, 1, 114, 83, 191, 154, 41, 10, 61, 13, 187, 174, 191, 13, 178, 191, 62, 250, 241, 137, 191, 170, 44, 144, 62, 246, 216, 12, 62, 83, 13, 207, 190, 181, 218, 196, 61, 180, 95, 167, 190, 137, 196, 122, 191, 177, 149, 186, 190, 196, 198, 57, 189, 184, 169, 167, 189, 73, 184, 220, 190, 95, 114, 93, 62, 235, 64, 173, 190, 212, 158, 126, 190, 11, 110, 208, 190, 157, 63, 191, 191, 124, 203, 49, 62, 255, 90, 98, 191, 65, 118, 140, 60, 39, 125, 109, 61, 69, 241, 248, 61, 239, 176, 27, 190, 188, 91, 127, 62, 4, 223, 155, 190, 30, 97, 212, 191, 65, 173, 91, 62, 39, 231, 3, 63, 251, 67, 19, 61, 185, 185, 88, 62, 205, 93, 121, 190, 162, 137, 135, 59, 108, 54, 162, 189, 3, 34, 90, 62, 118, 208, 1, 62, 16, 244, 37, 191, 103, 148, 124, 189, 31, 147, 16, 61, 42, 14, 90, 60, 156, 12, 22, 62, 134, 43, 10, 191, 87, 237, 83, 61, 178, 24, 162, 191, 38, 56, 75, 62, 65, 52, 163, 62, 249, 90, 160, 62, 252, 92, 16, 190, 96, 65, 250, 189, 46, 156, 12, 62, 61, 177, 128, 61, 217, 132, 137, 61, 163, 161, 137, 60, 146, 95, 12, 191, 105, 89, 45, 190, 197, 87, 231, 60, 244, 250, 184, 62, 233, 53, 21, 190, 82, 90, 44, 186, 99, 20, 174, 190, 38, 230, 67, 61, 26, 127, 193, 61, 31, 41, 132, 190, 246, 254, 186, 190, 108, 208, 147, 189, 161, 127, 83, 189, 103, 144, 52, 62, 48, 218, 213, 189, 177, 141, 38, 190, 57, 159, 247, 189, 110, 223, 65, 62, 242, 171, 241, 189, 203, 81, 245, 187, 222, 90, 56, 189, 111, 115, 11, 188, 157, 49, 154, 189, 205, 31, 33, 61, 135, 14, 141, 62, 212, 99, 55, 190, 84, 212, 158, 62, 173, 66, 58, 62, 6, 246, 94, 61, 185, 121, 52, 62, 94, 157, 170, 62, 84, 135, 234, 189, 237, 102, 219, 61, 209, 172, 171, 60, 189, 6, 144, 189, 253, 188, 201, 61, 231, 59, 137, 62, 43, 117, 155, 187, 162, 140, 142, 62, 20, 176, 214, 189, 100, 112, 103, 190, 184, 93, 91, 62, 122, 224, 196, 190, 220, 65, 136, 62, 254, 77, 39, 190, 167, 37, 27, 61, 255, 211, 160, 61, 85, 156, 81, 191, 34, 238, 12, 62, 117, 12, 46, 190, 131, 135, 214, 61, 128, 32, 179, 61, 174, 145, 234, 190, 35, 140, 33, 190, 4, 136, 124, 191, 90, 62, 138, 62, 211, 182, 255, 62, 157, 129, 192, 62, 188, 109, 191, 190, 66, 151, 175, 60, 42, 35, 168, 59, 88, 183, 100, 62, 161, 240, 158, 62, 71, 32, 237, 60, 129, 225, 203, 190, 144, 72, 85, 61, 216, 163, 159, 190, 1, 139, 46, 62, 215, 140, 16, 191, 185, 164, 0, 190, 105, 46, 165, 190, 81, 208, 167, 62, 34, 214, 226, 189, 91, 112, 56, 191, 23, 116, 126, 190, 86, 219, 134, 191, 205, 16, 142, 62, 69, 115, 165, 191, 187, 84, 129, 189, 27, 9, 127, 62, 194, 42, 101, 190, 78, 113, 94, 189, 38, 165, 233, 61, 175, 41, 61, 191, 2, 98, 122, 58, 226, 47, 10, 62, 29, 148, 229, 61, 22, 138, 131, 190, 145, 62, 246, 188, 237, 110, 14, 190, 52, 136, 29, 62, 80, 86, 64, 190, 236, 168, 64, 191, 154, 80, 61, 61, 96, 30, 21, 191, 247, 236, 226, 61, 177, 240, 38, 62, 78, 52, 45, 187, 182, 14, 123, 61, 60, 102, 16, 62, 244, 168, 53, 61, 19, 243, 73, 191, 63, 78, 190, 60, 222, 172, 113, 62, 215, 42, 151, 190, 246, 62, 68, 62, 174, 175, 168, 190, 219, 210, 58, 62, 62, 60, 166, 190, 22, 36, 244, 61, 134, 224, 215, 61, 144, 222, 97, 190, 3, 112, 235, 189, 250, 238, 197, 190, 65, 126, 219, 61, 210, 213, 162, 61, 65, 10, 27, 191, 221, 217, 89, 60, 255, 43, 87, 190, 88, 108, 54, 61, 122, 7, 19, 190, 94, 82, 173, 62, 252, 136, 104, 190, 43, 101, 1, 190, 118, 157, 231, 60, 66, 249, 152, 61, 160, 247, 210, 61, 87, 143, 40, 62, 11, 97, 88, 191, 113, 56, 178, 61, 219, 223, 136, 189, 147, 255, 187, 62, 205, 197, 204, 190, 115, 42, 20, 62, 233, 80, 93, 191, 248, 152, 71, 62, 100, 96, 50, 61, 9, 178, 254, 61, 70, 48, 52, 190, 138, 55, 96, 62, 0, 224, 220, 188, 115, 46, 15, 62, 13, 132, 212, 189, 120, 30, 201, 189, 191, 186, 13, 62, 96, 251, 12, 62, 207, 32, 33, 58, 156, 216, 217, 61, 46, 3, 124, 190, 98, 93, 189, 60, 253, 242, 215, 190, 153, 220, 143, 62, 43, 96, 28, 59, 176, 217, 6, 62, 16, 174, 242, 61, 210, 28, 71, 61, 11, 99, 13, 62, 163, 232, 166, 61, 148, 137, 12, 62, 125, 155, 95, 62, 5, 79, 69, 188, 26, 171, 134, 62, 199, 14, 18, 61, 160, 157, 168, 62, 191, 194, 84, 190, 8, 135, 36, 60, 211, 119, 226, 189, 110, 247, 191, 61, 123, 137, 248, 60, 254, 162, 75, 58, 222, 138, 135, 190, 219, 60, 220, 61, 179, 86, 219, 189, 173, 167, 138, 62, 9, 170, 29, 61, 84, 188, 61, 189, 163, 26, 131, 189, 187, 77, 150, 189, 0, 25, 72, 188, 58, 125, 138, 62, 132, 167, 88, 191, 249, 22, 199, 188, 212, 37, 203, 190, 246, 176, 153, 62, 206, 228, 141, 62, 74, 168, 78, 62, 243, 130, 20, 190, 162, 60, 72, 61, 131, 188, 24, 190, 68, 30, 168, 62, 156, 201, 123, 60, 163, 170, 34, 62, 138, 169, 162, 190, 253, 209, 215, 61, 211, 24, 133, 190, 32, 95, 199, 62, 203, 110, 34, 191, 126, 154, 204, 189, 34, 30, 155, 189, 195, 231, 96, 190, 33, 122, 209, 61, 253, 232, 65, 190, 84, 11, 163, 62, 182, 86, 152, 191, 92, 236, 14, 62, 211, 65, 171, 190, 108, 15, 69, 62, 253, 172, 247, 61, 181, 32, 42, 190, 124, 218, 168, 61, 220, 101, 186, 62, 15, 60, 247, 190, 107, 83, 192, 62, 5, 181, 34, 62, 84, 211, 208, 62, 5, 202, 202, 190, 42, 20, 63, 62, 15, 86, 79, 190, 58, 197, 156, 62, 119, 56, 217, 60, 180, 25, 88, 61, 148, 179, 17, 61, 252, 254, 175, 187, 69, 91, 247, 189, 224, 174, 44, 61, 27, 163, 14, 62, 144, 199, 136, 61, 121, 105, 123, 189, 241, 205, 0, 63, 68, 167, 159, 188, 186, 28, 229, 61, 55, 216, 191, 62, 238, 153, 180, 188, 243, 212, 214, 61, 177, 143, 180, 190, 111, 226, 28, 189, 13, 182, 0, 190, 49, 237, 75, 62, 26, 37, 64, 62, 173, 149, 67, 191, 74, 145, 234, 60, 48, 62, 206, 190, 116, 64, 179, 60, 195, 168, 152, 189, 95, 45, 35, 191, 190, 247, 234, 189, 183, 246, 201, 191, 71, 88, 56, 61, 50, 193, 20, 62, 229, 60, 184, 62, 220, 76, 18, 190, 67, 90, 12, 62, 135, 118, 190, 61, 174, 229, 210, 61, 165, 177, 66, 62, 125, 149, 200, 62, 140, 98, 45, 191, 85, 163, 148, 61, 101, 203, 210, 189, 31, 119, 138, 62, 132, 3, 21, 191, 209, 252, 18, 62, 96, 218, 240, 190, 168, 51, 215, 62, 134, 180, 132, 189, 199, 156, 255, 189, 83, 87, 59, 189, 82, 114, 169, 61, 179, 217, 154, 60, 33, 140, 49, 188, 150, 125, 48, 60, 247, 67, 208, 59, 9, 226, 183, 61, 26, 59, 225, 189, 193, 204, 209, 61, 241, 231, 216, 189, 40, 160, 129, 189, 20, 132, 174, 61, 174, 74, 148, 189, 34, 24, 248, 188, 45, 169, 186, 188, 1, 52, 44, 190, 196, 251, 188, 189, 146, 144, 37, 190, 123, 6, 72, 61, 107, 58, 85, 190, 151, 203, 190, 189, 40, 87, 3, 190, 228, 238, 248, 189, 58, 55, 20, 60, 21, 85, 227, 60, 231, 28, 242, 188, 158, 42, 70, 61, 186, 224, 39, 190, 79, 6, 5, 62, 8, 94, 166, 189, 168, 97, 190, 61, 124, 77, 131, 62, 83, 195, 169, 190, 245, 166, 85, 189, 206, 47, 208, 189, 185, 91, 4, 62, 80, 98, 238, 61, 42, 94, 9, 61, 190, 152, 66, 190, 144, 89, 11, 61, 5, 21, 24, 62, 137, 155, 88, 62, 177, 131, 237, 190, 82, 123, 129, 61, 118, 140, 94, 190, 244, 117, 148, 62, 245, 6, 90, 62, 218, 182, 46, 61, 223, 80, 58, 188, 58, 57, 131, 189, 235, 239, 29, 189, 119, 130, 94, 62, 131, 240, 142, 61, 241, 5, 30, 61, 117, 129, 247, 61, 76, 239, 110, 62, 53, 70, 194, 188, 227, 198, 48, 62, 57, 140, 69, 60, 69, 151, 76, 62, 77, 118, 54, 190, 154, 116, 166, 62, 99, 186, 22, 190, 51, 51, 204, 189, 137, 50, 137, 61, 203, 201, 26, 190, 251, 29, 167, 61, 153, 219, 165, 60, 26, 98, 37, 62, 244, 113, 9, 190, 190, 86, 0, 62, 154, 174, 13, 189, 61, 202, 241, 189, 162, 145, 242, 189, 89, 219, 21, 190, 29, 100, 109, 61, 194, 41, 37, 61, 105, 69, 88, 189, 196, 49, 69, 185, 204, 10, 174, 60, 19, 0, 146, 188, 69, 23, 163, 189, 172, 21, 16, 62, 203, 243, 54, 189, 119, 159, 223, 189, 198, 17, 255, 61, 240, 7, 27, 190, 161, 189, 92, 188, 124, 159, 41, 190, 85, 11, 33, 190, 43, 227, 139, 189, 206, 204, 127, 187, 20, 192, 35, 62, 104, 168, 132, 189, 94, 216, 125, 60, 242, 69, 12, 190, 60, 116, 8, 190, 72, 189, 167, 189, 232, 175, 194, 190, 102, 220, 214, 190, 118, 174, 192, 62, 86, 124, 141, 189, 241, 248, 130, 190, 153, 55, 220, 188, 127, 73, 93, 189, 162, 178, 180, 190, 9, 191, 63, 191, 243, 57, 248, 189, 163, 66, 108, 62, 112, 178, 201, 189, 135, 65, 239, 190, 74, 78, 217, 189, 131, 23, 130, 191, 161, 30, 199, 61, 102, 2, 16, 61, 172, 83, 80, 62, 8, 29, 57, 190, 250, 170, 131, 190, 124, 250, 147, 62, 204, 128, 128, 62, 137, 82, 36, 191, 1, 237, 200, 188, 30, 192, 1, 191, 31, 194, 159, 61, 110, 182, 186, 62, 173, 222, 22, 62, 78, 113, 180, 190, 114, 152, 68, 62, 172, 243, 61, 61, 126, 178, 55, 62, 157, 90, 44, 190, 222, 149, 5, 190, 239, 224, 18, 190, 138, 16, 31, 190, 249, 174, 149, 62, 20, 53, 219, 189, 8, 255, 167, 189, 226, 53, 238, 189, 144, 205, 6, 190, 171, 127, 175, 189, 131, 170, 250, 189, 15, 252, 133, 189, 185, 92, 132, 62, 181, 181, 175, 62, 138, 235, 58, 189, 91, 127, 241, 190, 95, 109, 7, 189, 57, 37, 28, 190, 211, 64, 225, 189, 119, 187, 134, 61, 147, 126, 51, 190, 225, 223, 71, 190, 60, 86, 210, 61, 187, 144, 26, 188, 183, 184, 101, 190, 125, 5, 48, 61, 216, 1, 80, 61, 111, 157, 18, 63, 226, 105, 4, 190, 211, 97, 51, 189, 89, 52, 166, 61, 237, 49, 202, 189, 127, 123, 144, 186, 119, 132, 78, 190, 104, 220, 202, 189, 145, 151, 210, 189, 21, 17, 56, 190, 94, 41, 69, 190, 46, 252, 77, 60, 82, 32, 128, 189, 100, 172, 209, 187, 54, 164, 188, 61, 90, 248, 20, 190, 226, 161, 164, 189, 204, 21, 61, 190, 246, 88, 163, 61, 37, 37, 18, 61, 78, 63, 6, 60, 240, 9, 78, 189, 18, 81, 120, 61, 58, 254, 22, 190, 206, 142, 208, 61, 73, 246, 22, 190, 46, 192, 185, 61, 81, 129, 135, 189, 214, 210, 208, 61, 1, 156, 167, 59, 196, 89, 99, 189, 25, 100, 237, 189, 214, 206, 52, 189, 69, 90, 80, 189, 83, 11, 169, 61, 154, 106, 2, 62, 27, 199, 250, 61, 172, 130, 45, 61, 88, 28, 179, 61, 158, 85, 223, 61, 99, 98, 130, 62, 79, 198, 230, 62, 214, 64, 132, 190, 67, 105, 107, 62, 0, 65, 42, 62, 164, 145, 167, 62, 210, 167, 5, 190, 12, 214, 240, 62, 22, 180, 43, 60, 138, 40, 23, 189, 146, 70, 5, 190, 85, 199, 77, 60, 2, 128, 241, 62, 254, 225, 56, 60, 45, 22, 161, 189, 37, 67, 62, 62, 157, 186, 84, 61, 111, 155, 150, 189, 103, 113, 134, 61, 187, 76, 200, 187, 74, 61, 101, 190, 110, 122, 110, 62, 59, 210, 32, 62, 237, 156, 16, 61, 255, 168, 145, 190, 198, 75, 133, 190, 129, 244, 48, 191, 142, 14, 203, 61, 79, 186, 69, 190, 54, 109, 114, 62, 45, 152, 254, 61, 29, 218, 129, 61, 225, 2, 68, 62, 68, 66, 122, 191, 55, 231, 45, 62, 235, 216, 169, 190, 74, 227, 128, 190, 251, 182, 140, 62, 136, 249, 186, 189, 198, 127, 31, 191, 235, 203, 164, 190, 80, 121, 8, 62, 190, 189, 198, 190, 116, 160, 3, 62, 238, 150, 86, 190, 36, 119, 123, 190, 184, 2, 121, 61, 246, 98, 16, 62, 107, 95, 1, 191, 90, 156, 70, 62, 80, 171, 73, 62, 127, 206, 228, 189, 157, 151, 1, 190, 225, 201, 118, 62, 43, 56, 23, 190, 232, 249, 234, 62, 251, 46, 54, 61, 31, 218, 209, 60, 162, 29, 45, 191, 45, 173, 72, 189, 232, 127, 128, 190, 242, 66, 118, 62, 107, 199, 202, 190, 45, 77, 153, 61, 97, 17, 146, 62, 190, 235, 90, 190, 26, 21, 142, 61, 194, 234, 255, 189, 109, 37, 153, 190, 140, 203, 1, 63, 198, 96, 237, 189, 169, 99, 145, 190, 50, 234, 27, 190, 143, 179, 14, 62, 210, 7, 140, 190, 145, 158, 113, 189, 20, 232, 135, 190, 228, 227, 20, 191, 62, 112, 190, 61, 172, 132, 27, 191, 52, 207, 195, 189, 179, 49, 197, 61, 1, 241, 2, 189, 17, 172, 233, 61, 166, 110, 150, 61, 211, 169, 169, 62, 44, 205, 62, 191, 0, 234, 179, 62, 33, 106, 72, 62, 248, 209, 46, 62, 28, 158, 205, 189, 222, 7, 206, 61, 230, 251, 220, 61, 113, 121, 14, 62, 198, 236, 44, 61, 49, 212, 195, 188, 100, 27, 8, 190, 178, 38, 44, 62, 213, 103, 137, 189, 105, 173, 18, 190, 47, 67, 171, 189, 21, 45, 200, 189, 165, 62, 20, 190, 143, 163, 173, 58, 186, 33, 14, 188, 160, 133, 12, 190, 38, 162, 46, 190, 1, 32, 127, 188, 120, 182, 168, 189, 11, 55, 9, 189, 218, 176, 49, 190, 137, 65, 228, 59, 1, 156, 70, 61, 120, 168, 252, 59, 39, 120, 39, 190, 251, 147, 40, 190, 54, 142, 186, 60, 181, 55, 30, 190, 1, 152, 41, 60, 234, 235, 197, 60, 197, 235, 45, 190, 59, 98, 179, 189, 172, 151, 7, 191, 213, 120, 155, 190, 4, 217, 242, 190, 241, 51, 6, 190, 170, 30, 236, 189, 123, 87, 126, 61, 63, 29, 165, 190, 116, 50, 18, 62, 127, 253, 92, 190, 49, 71, 5, 60, 100, 219, 17, 190, 131, 198, 241, 61, 186, 131, 137, 189, 240, 45, 31, 191, 75, 209, 25, 191, 99, 17, 193, 62, 22, 222, 189, 61, 241, 242, 73, 62, 131, 12, 13, 62, 37, 139, 163, 188, 36, 89, 220, 189, 126, 218, 39, 60, 92, 55, 172, 190, 53, 72, 59, 189, 96, 223, 215, 61, 218, 203, 132, 190, 57, 9, 25, 190, 193, 245, 86, 62, 55, 249, 50, 190, 59, 38, 171, 190, 32, 14, 115, 190, 164, 251, 28, 189, 33, 26, 249, 189, 239, 150, 139, 190, 58, 12, 85, 61, 89, 74, 2, 189, 118, 199, 5, 62, 230, 139, 87, 189, 106, 251, 166, 189, 239, 202, 35, 62, 87, 244, 185, 189, 102, 151, 189, 190, 179, 213, 237, 59, 139, 56, 20, 191, 86, 172, 187, 61, 22, 221, 140, 190, 191, 60, 40, 190, 20, 213, 204, 62, 173, 127, 179, 60, 180, 75, 26, 62, 177, 49, 167, 62, 174, 156, 223, 61, 220, 57, 131, 62, 128, 188, 92, 62, 136, 41, 71, 61, 245, 122, 83, 61, 211, 152, 162, 62, 69, 222, 81, 189, 56, 120, 124, 62, 202, 199, 157, 189, 19, 238, 80, 190, 102, 176, 124, 189, 197, 216, 32, 190, 229, 15, 8, 189, 216, 115, 138, 190, 49, 26, 242, 62, 161, 252, 174, 190, 213, 201, 152, 62, 215, 44, 145, 189, 131, 167, 127, 62, 61, 2, 77, 62, 42, 55, 70, 191, 97, 218, 173, 189, 136, 134, 216, 60, 153, 47, 184, 189, 51, 117, 204, 62, 203, 50, 153, 60, 162, 115, 12, 191, 66, 160, 191, 186, 185, 144, 128, 62, 150, 128, 241, 190, 115, 192, 66, 62, 163, 63, 134, 190, 135, 143, 134, 61, 209, 176, 153, 189, 106, 146, 36, 62, 187, 93, 164, 190, 185, 31, 14, 62, 164, 19, 57, 189, 189, 66, 51, 190, 167, 144, 185, 190, 249, 202, 228, 62, 255, 3, 61, 190, 215, 242, 219, 62, 112, 105, 0, 62, 58, 230, 178, 188, 52, 180, 38, 190, 136, 23, 66, 190, 177, 230, 104, 62, 116, 98, 20, 189, 102, 150, 117, 62, 132, 86, 35, 62, 114, 12, 40, 189, 42, 92, 15, 190, 243, 172, 39, 62, 19, 96, 165, 190, 148, 11, 93, 62, 194, 18, 70, 191, 135, 226, 162, 188, 193, 195, 183, 190, 70, 119, 7, 62, 215, 222, 253, 61, 17, 56, 153, 188, 3, 189, 146, 190, 102, 78, 178, 62, 176, 204, 228, 189, 248, 10, 121, 62, 227, 120, 31, 60, 190, 160, 98, 62, 119, 246, 38, 61, 27, 96, 74, 62, 167, 138, 144, 190, 117, 118, 148, 62, 143, 86, 211, 190, 115, 134, 24, 190, 110, 165, 188, 61, 169, 170, 137, 189, 139, 82, 79, 190, 161, 248, 43, 191, 127, 136, 94, 58, 226, 178, 107, 190, 99, 61, 69, 60, 0, 25, 215, 61, 149, 221, 176, 61, 192, 108, 93, 62, 86, 44, 101, 191, 248, 108, 239, 61, 234, 58, 238, 189, 184, 42, 172, 61, 40, 194, 118, 62, 86, 161, 38, 62, 168, 10, 49, 191, 166, 73, 2, 189, 227, 127, 235, 60, 163, 174, 156, 190, 224, 196, 146, 62, 208, 65, 90, 58, 25, 160, 128, 190, 118, 234, 6, 62, 70, 251, 2, 186, 109, 5, 134, 190, 41, 108, 50, 61, 129, 223, 55, 62, 87, 250, 46, 187, 123, 213, 97, 190, 217, 226, 92, 62, 243, 77, 77, 190, 150, 87, 136, 62, 134, 107, 192, 188, 105, 80, 28, 62, 242, 69, 164, 190, 152, 168, 88, 189, 206, 158, 125, 190, 39, 82, 80, 190, 108, 190, 234, 60, 13, 239, 52, 62, 38, 74, 92, 190, 53, 3, 50, 191, 175, 188, 128, 189, 18, 0, 77, 62, 18, 183, 173, 188, 88, 168, 205, 61, 139, 247, 28, 190, 158, 115, 136, 190, 137, 164, 212, 61, 199, 100, 148, 62, 6, 83, 156, 190, 35, 254, 15, 62, 50, 119, 164, 188, 204, 155, 26, 61, 236, 162, 75, 62, 48, 220, 35, 62, 175, 45, 59, 191, 146, 150, 238, 61, 90, 21, 215, 189, 94, 157, 113, 190, 80, 94, 183, 190, 244, 42, 84, 62, 233, 239, 14, 189, 87, 85, 45, 62, 234, 141, 43, 62, 220, 29, 195, 61, 6, 241, 115, 62, 119, 154, 15, 62, 235, 168, 41, 62, 5, 55, 123, 61, 240, 104, 172, 190, 40, 34, 84, 190, 69, 32, 199, 189, 90, 99, 0, 63, 232, 253, 133, 61, 200, 11, 62, 61, 132, 212, 198, 189, 71, 218, 159, 62, 207, 48, 203, 188, 24, 69, 197, 60, 127, 0, 154, 62, 249, 110, 186, 62, 2, 177, 37, 63, 47, 40, 253, 61, 100, 72, 46, 191, 116, 180, 218, 61, 159, 235, 164, 190, 53, 39, 255, 60, 147, 210, 78, 190, 105, 199, 123, 188, 177, 155, 205, 190, 57, 77, 48, 62, 71, 81, 177, 190, 65, 24, 72, 61, 145, 88, 197, 189, 201, 153, 225, 61, 189, 174, 144, 62, 182, 163, 67, 61, 116, 19, 47, 190, 48, 77, 24, 62, 27, 89, 2, 61, 92, 120, 91, 61, 42, 99, 175, 61, 185, 127, 151, 56, 247, 86, 228, 189, 176, 230, 213, 189, 129, 165, 94, 58, 177, 80, 228, 61, 172, 216, 59, 190, 2, 98, 167, 61, 247, 255, 105, 187, 208, 14, 192, 61, 103, 94, 89, 188, 11, 154, 240, 189, 70, 138, 254, 187, 119, 224, 227, 189, 2, 244, 183, 189, 231, 192, 20, 61, 101, 221, 244, 189, 58, 73, 14, 189, 113, 141, 24, 62, 123, 118, 28, 188, 247, 245, 182, 189, 148, 227, 152, 60, 79, 58, 152, 61, 237, 140, 145, 61, 218, 167, 84, 189, 56, 48, 109, 189, 252, 93, 103, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {226, 132, 55, 62, 9, 94, 230, 59, 112, 84, 199, 189, 146, 69, 11, 62, 185, 251, 65, 62, 203, 175, 118, 62, 238, 63, 107, 62, 41, 229, 57, 62, 88, 80, 132, 61, 152, 97, 83, 62, 98, 147, 205, 61, 155, 8, 156, 62, 208, 20, 84, 189, 81, 249, 211, 61, 60, 96, 237, 61, 166, 70, 15, 61, 69, 250, 183, 189, 103, 9, 44, 61, 164, 207, 42, 61, 226, 161, 233, 187, 226, 151, 108, 189, 189, 53, 74, 62, 122, 129, 196, 61, 190, 226, 130, 188, 175, 37, 67, 61, 162, 243, 157, 62, 246, 93, 208, 60, 94, 48, 42, 62, 142, 83, 38, 62, 91, 132, 63, 62, 122, 17, 225, 189, 220, 243, 162, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {61, 255, 157, 62, 41, 66, 227, 62, 161, 194, 133, 62, 102, 75, 250, 61, 1, 199, 151, 63, 29, 205, 149, 190, 118, 1, 203, 188, 86, 63, 74, 191, 223, 227, 86, 63, 0, 158, 246, 190, 218, 188, 36, 190, 177, 3, 2, 191, 168, 231, 215, 62, 70, 179, 71, 191, 90, 156, 221, 60, 105, 163, 38, 190, 23, 18, 6, 190, 249, 191, 239, 190, 204, 149, 181, 190, 93, 13, 120, 189, 76, 37, 118, 62, 106, 3, 61, 63, 248, 125, 213, 62, 85, 217, 167, 61, 173, 156, 69, 62, 145, 133, 241, 189, 73, 43, 22, 63, 104, 251, 182, 190, 160, 166, 149, 62, 82, 242, 182, 62, 120, 11, 196, 190, 76, 169, 152, 60, 249, 38, 1, 60, 220, 61, 239, 61, 122, 99, 39, 61, 67, 169, 40, 191, 26, 73, 117, 62, 111, 210, 168, 189, 43, 118, 139, 190, 218, 110, 41, 62, 104, 59, 145, 190, 237, 110, 116, 61, 192, 189, 119, 190, 9, 77, 109, 62, 105, 56, 3, 61, 236, 250, 31, 61, 116, 87, 212, 61, 108, 120, 35, 190, 181, 154, 224, 61, 38, 25, 109, 189, 220, 2, 64, 62, 35, 100, 46, 189, 141, 11, 126, 61, 169, 166, 173, 189, 7, 147, 165, 61, 212, 31, 13, 190, 22, 147, 34, 191, 108, 169, 170, 190, 94, 238, 133, 62, 168, 109, 20, 62, 93, 1, 30, 189, 242, 230, 170, 189, 167, 1, 26, 62, 175, 196, 137, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {94, 186, 41, 61, 3, 199, 147, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {164, 182, 128, 191, 184, 219, 154, 63, 79, 174, 103, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {80, 254, 145, 62, 28, 49, 80, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0092/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}