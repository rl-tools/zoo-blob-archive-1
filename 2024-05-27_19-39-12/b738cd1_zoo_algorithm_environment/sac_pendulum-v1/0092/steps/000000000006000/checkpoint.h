// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {44, 250, 119, 190, 215, 213, 22, 189, 130, 73, 142, 62, 186, 190, 240, 190, 209, 113, 75, 191, 130, 173, 19, 191, 134, 62, 221, 62, 110, 218, 229, 188, 0, 175, 211, 190, 240, 26, 161, 190, 199, 150, 131, 62, 169, 108, 110, 191, 209, 1, 206, 61, 191, 133, 1, 63, 111, 79, 200, 190, 253, 166, 238, 62, 141, 174, 238, 62, 150, 122, 167, 190, 165, 93, 94, 191, 137, 16, 245, 61, 209, 77, 190, 61, 29, 3, 17, 191, 156, 75, 134, 63, 162, 247, 194, 62, 193, 233, 196, 62, 196, 197, 161, 62, 163, 134, 6, 62, 130, 164, 240, 189, 203, 231, 18, 60, 75, 243, 76, 63, 238, 70, 168, 187, 202, 79, 96, 191, 135, 236, 175, 190, 36, 153, 129, 62, 1, 244, 55, 63, 244, 96, 57, 191, 205, 197, 195, 62, 189, 152, 19, 191, 250, 109, 11, 190, 158, 223, 156, 61, 227, 242, 208, 189, 235, 72, 140, 188, 41, 57, 230, 58, 10, 182, 54, 63, 102, 122, 30, 62, 75, 229, 102, 189, 249, 255, 126, 191, 9, 123, 202, 62, 155, 68, 97, 63, 246, 254, 58, 62, 8, 51, 208, 61, 104, 120, 80, 63, 201, 242, 215, 62, 202, 133, 166, 62, 166, 120, 41, 63, 121, 93, 195, 190, 116, 227, 214, 190, 26, 7, 145, 62, 140, 84, 42, 63, 164, 118, 186, 188, 237, 226, 172, 62, 213, 225, 107, 191, 63, 84, 40, 191, 205, 27, 37, 190, 75, 4, 42, 189, 91, 130, 205, 188, 127, 198, 174, 62, 248, 126, 70, 190, 178, 100, 134, 190, 184, 132, 72, 62, 250, 254, 118, 63, 215, 173, 101, 62, 230, 71, 141, 190, 55, 183, 193, 190, 171, 121, 203, 62, 201, 177, 175, 189, 162, 206, 182, 62, 120, 208, 47, 61, 205, 230, 178, 189, 145, 221, 0, 61, 107, 34, 3, 191, 208, 37, 117, 190, 37, 235, 32, 63, 96, 177, 36, 62, 140, 1, 42, 63, 210, 56, 63, 191, 138, 125, 106, 190, 243, 212, 92, 62, 118, 41, 100, 191, 34, 199, 59, 191, 53, 28, 164, 189, 227, 45, 231, 190, 234, 17, 130, 62, 69, 117, 15, 191, 98, 109, 60, 191, 17, 59, 217, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 78, 28, 191, 125, 85, 38, 190, 52, 75, 135, 190, 148, 32, 195, 190, 127, 47, 2, 62, 208, 107, 176, 62, 33, 35, 120, 62, 42, 202, 78, 62, 140, 156, 62, 190, 92, 109, 40, 62, 40, 220, 248, 62, 174, 70, 146, 61, 243, 1, 71, 61, 165, 200, 228, 190, 208, 160, 172, 190, 189, 54, 49, 61, 155, 76, 101, 62, 35, 32, 114, 190, 251, 174, 198, 62, 247, 70, 84, 61, 150, 57, 18, 63, 72, 159, 239, 62, 6, 249, 232, 62, 162, 2, 125, 61, 195, 164, 140, 190, 238, 35, 27, 63, 84, 206, 198, 190, 241, 35, 244, 62, 86, 237, 207, 61, 143, 204, 247, 62, 4, 203, 202, 187, 245, 36, 67, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {196, 74, 195, 61, 19, 2, 206, 58, 121, 222, 129, 61, 253, 74, 132, 62, 200, 54, 66, 60, 38, 168, 140, 62, 151, 183, 47, 190, 92, 3, 126, 189, 234, 112, 183, 190, 128, 114, 153, 189, 224, 157, 233, 61, 56, 32, 137, 62, 184, 101, 162, 62, 237, 114, 160, 61, 108, 78, 53, 190, 245, 192, 254, 61, 16, 220, 84, 190, 61, 52, 188, 190, 232, 46, 154, 61, 219, 68, 50, 62, 3, 224, 64, 61, 133, 212, 92, 188, 27, 200, 131, 61, 127, 140, 119, 190, 6, 92, 152, 61, 155, 53, 194, 61, 239, 96, 3, 189, 189, 129, 11, 190, 197, 88, 209, 61, 85, 28, 86, 62, 28, 225, 158, 62, 60, 128, 77, 190, 186, 127, 177, 189, 240, 228, 190, 60, 236, 6, 121, 189, 21, 161, 125, 61, 63, 107, 6, 189, 179, 0, 138, 190, 88, 5, 17, 189, 106, 31, 49, 190, 165, 174, 252, 190, 19, 100, 15, 61, 151, 93, 176, 60, 199, 243, 121, 190, 246, 26, 9, 190, 172, 133, 44, 62, 50, 93, 17, 190, 249, 158, 11, 62, 233, 22, 185, 59, 44, 161, 2, 190, 5, 53, 246, 189, 21, 235, 171, 190, 147, 230, 81, 190, 20, 67, 199, 61, 198, 229, 139, 190, 96, 20, 229, 190, 122, 123, 119, 59, 96, 86, 222, 54, 102, 121, 28, 190, 36, 134, 91, 190, 198, 9, 70, 190, 101, 4, 145, 190, 185, 242, 108, 62, 66, 181, 196, 60, 137, 82, 180, 61, 0, 59, 24, 59, 47, 92, 56, 62, 102, 51, 96, 62, 250, 90, 7, 62, 233, 145, 153, 187, 121, 186, 241, 60, 41, 227, 107, 62, 149, 226, 135, 62, 28, 96, 136, 190, 140, 232, 70, 62, 74, 6, 150, 62, 146, 24, 219, 62, 80, 216, 44, 61, 74, 58, 183, 62, 20, 107, 133, 190, 206, 129, 137, 189, 74, 69, 184, 61, 88, 40, 32, 62, 13, 246, 208, 62, 61, 179, 134, 61, 57, 205, 85, 61, 116, 102, 15, 62, 79, 139, 70, 62, 204, 45, 19, 190, 241, 32, 49, 61, 101, 51, 182, 61, 98, 215, 11, 190, 210, 134, 124, 189, 123, 106, 154, 60, 174, 144, 84, 190, 165, 74, 159, 190, 15, 153, 86, 189, 205, 14, 190, 190, 193, 141, 76, 190, 108, 78, 38, 190, 19, 91, 184, 189, 222, 7, 96, 62, 175, 239, 206, 61, 9, 131, 143, 190, 13, 84, 10, 191, 9, 196, 171, 59, 40, 26, 218, 189, 255, 10, 19, 189, 128, 187, 243, 61, 232, 208, 14, 62, 194, 119, 137, 190, 224, 42, 35, 190, 62, 127, 198, 62, 225, 87, 192, 189, 106, 247, 115, 62, 95, 26, 88, 60, 74, 47, 48, 188, 137, 98, 115, 188, 218, 223, 176, 189, 134, 34, 136, 190, 190, 180, 151, 62, 230, 158, 31, 62, 29, 180, 207, 189, 203, 134, 201, 60, 99, 153, 88, 61, 218, 131, 33, 190, 0, 27, 135, 61, 50, 205, 119, 61, 230, 25, 173, 190, 5, 45, 22, 191, 154, 41, 10, 61, 125, 81, 173, 191, 163, 104, 163, 62, 172, 113, 41, 191, 38, 200, 152, 62, 120, 93, 15, 62, 168, 30, 230, 190, 177, 105, 222, 61, 177, 140, 168, 190, 224, 18, 109, 191, 248, 159, 105, 190, 196, 198, 57, 189, 16, 97, 244, 189, 201, 55, 206, 190, 173, 227, 96, 62, 83, 227, 176, 190, 144, 149, 126, 190, 58, 228, 153, 190, 189, 138, 146, 191, 78, 233, 128, 62, 144, 143, 27, 191, 85, 9, 166, 60, 133, 187, 141, 61, 181, 21, 45, 62, 239, 176, 27, 190, 15, 223, 136, 62, 66, 187, 59, 190, 65, 39, 162, 191, 201, 124, 124, 62, 162, 8, 196, 62, 212, 202, 165, 61, 74, 178, 100, 62, 35, 126, 61, 190, 177, 152, 130, 186, 70, 222, 174, 189, 236, 246, 118, 62, 245, 81, 99, 61, 215, 66, 231, 190, 48, 100, 125, 189, 54, 26, 86, 189, 40, 254, 88, 61, 41, 196, 34, 62, 191, 21, 250, 190, 87, 237, 83, 61, 114, 65, 38, 191, 78, 187, 184, 62, 147, 193, 135, 62, 69, 201, 155, 62, 146, 234, 8, 190, 160, 155, 133, 189, 249, 67, 26, 62, 52, 11, 158, 61, 143, 171, 178, 61, 89, 192, 17, 190, 61, 217, 228, 190, 15, 141, 38, 190, 67, 69, 211, 60, 121, 119, 85, 62, 129, 168, 207, 189, 67, 160, 189, 59, 241, 161, 102, 190, 197, 224, 234, 187, 199, 143, 193, 60, 117, 121, 139, 190, 108, 195, 195, 190, 214, 7, 210, 189, 75, 55, 87, 189, 150, 250, 80, 62, 53, 5, 83, 188, 105, 59, 34, 190, 236, 255, 108, 190, 216, 254, 20, 62, 73, 165, 225, 189, 10, 174, 164, 58, 73, 114, 187, 189, 111, 115, 11, 188, 171, 109, 46, 189, 119, 53, 255, 60, 16, 85, 160, 62, 31, 125, 149, 190, 111, 14, 138, 62, 179, 137, 122, 62, 109, 146, 176, 60, 216, 124, 93, 62, 136, 166, 160, 62, 219, 98, 203, 189, 95, 116, 76, 61, 89, 172, 198, 60, 137, 50, 172, 189, 88, 92, 121, 61, 68, 184, 85, 62, 61, 145, 9, 189, 215, 151, 131, 62, 129, 123, 210, 189, 119, 238, 104, 190, 208, 48, 107, 62, 154, 43, 164, 190, 112, 81, 127, 62, 179, 94, 67, 190, 34, 237, 131, 61, 82, 110, 199, 60, 227, 121, 16, 191, 202, 161, 21, 62, 216, 116, 151, 190, 185, 190, 90, 62, 103, 18, 167, 61, 90, 168, 162, 190, 35, 140, 33, 190, 55, 141, 121, 190, 147, 153, 6, 63, 248, 207, 240, 62, 210, 144, 192, 62, 208, 229, 170, 190, 252, 235, 137, 61, 192, 238, 73, 61, 245, 126, 135, 62, 204, 128, 181, 62, 161, 147, 39, 190, 46, 152, 169, 190, 97, 228, 63, 61, 207, 40, 162, 190, 134, 30, 43, 187, 147, 88, 229, 190, 93, 34, 195, 189, 88, 65, 5, 190, 16, 238, 140, 62, 193, 126, 14, 190, 239, 85, 8, 191, 23, 116, 126, 190, 115, 44, 128, 191, 203, 206, 54, 62, 70, 71, 97, 191, 235, 192, 0, 189, 152, 47, 136, 62, 253, 97, 143, 190, 208, 5, 75, 188, 202, 145, 60, 61, 39, 62, 47, 191, 29, 142, 132, 60, 226, 47, 10, 62, 22, 110, 148, 61, 169, 131, 69, 190, 107, 175, 198, 188, 67, 29, 18, 190, 18, 54, 44, 62, 191, 4, 129, 189, 127, 118, 0, 191, 216, 232, 250, 61, 193, 60, 190, 190, 217, 152, 245, 61, 213, 208, 83, 62, 180, 135, 84, 61, 182, 14, 123, 61, 85, 207, 46, 62, 88, 132, 92, 61, 102, 85, 245, 190, 155, 173, 189, 61, 198, 173, 199, 61, 157, 230, 255, 60, 46, 163, 56, 62, 226, 170, 134, 190, 76, 188, 58, 62, 13, 102, 157, 190, 7, 191, 42, 62, 48, 224, 107, 189, 58, 58, 47, 189, 180, 192, 50, 61, 232, 3, 185, 190, 25, 52, 231, 61, 157, 120, 217, 61, 2, 8, 15, 191, 221, 217, 89, 60, 47, 176, 2, 62, 37, 67, 190, 62, 158, 224, 23, 190, 210, 201, 207, 62, 9, 21, 103, 190, 144, 31, 45, 189, 46, 232, 233, 60, 184, 151, 155, 61, 46, 116, 248, 61, 254, 126, 241, 61, 200, 11, 43, 191, 30, 30, 1, 62, 63, 82, 157, 189, 144, 239, 173, 62, 166, 240, 179, 190, 250, 148, 19, 62, 72, 121, 21, 191, 231, 199, 181, 60, 4, 242, 45, 61, 241, 172, 23, 62, 97, 6, 9, 190, 222, 125, 97, 62, 26, 55, 81, 188, 8, 49, 65, 62, 162, 227, 228, 189, 179, 184, 67, 189, 50, 161, 37, 62, 239, 84, 217, 61, 234, 185, 75, 61, 232, 249, 5, 62, 31, 47, 97, 190, 98, 93, 189, 60, 38, 118, 141, 190, 207, 174, 145, 62, 94, 93, 138, 58, 98, 67, 3, 62, 86, 110, 224, 61, 70, 224, 15, 62, 26, 35, 15, 62, 91, 156, 228, 61, 68, 128, 28, 62, 118, 121, 106, 62, 96, 0, 48, 189, 112, 236, 146, 62, 1, 135, 38, 61, 5, 193, 153, 62, 42, 98, 67, 190, 202, 215, 52, 60, 106, 189, 3, 190, 200, 72, 211, 61, 47, 65, 181, 61, 161, 13, 206, 61, 204, 252, 117, 190, 236, 94, 2, 62, 133, 156, 3, 190, 94, 10, 102, 62, 153, 19, 198, 58, 27, 207, 205, 60, 149, 213, 189, 60, 6, 101, 150, 189, 194, 202, 18, 62, 153, 36, 130, 62, 201, 80, 60, 191, 249, 22, 199, 188, 248, 86, 96, 190, 254, 159, 152, 62, 8, 92, 110, 62, 129, 148, 87, 62, 206, 93, 53, 190, 222, 52, 23, 188, 43, 69, 3, 190, 161, 120, 154, 62, 139, 224, 195, 187, 192, 222, 28, 62, 29, 32, 160, 190, 97, 133, 132, 61, 182, 53, 118, 190, 83, 24, 189, 62, 243, 243, 18, 191, 188, 125, 139, 189, 245, 92, 192, 189, 50, 125, 164, 189, 222, 247, 143, 61, 248, 7, 241, 190, 194, 123, 121, 62, 170, 152, 156, 191, 144, 45, 183, 61, 181, 92, 181, 190, 132, 198, 135, 62, 111, 78, 43, 62, 34, 45, 57, 190, 203, 116, 254, 61, 254, 85, 75, 62, 192, 69, 20, 191, 251, 125, 167, 62, 5, 181, 34, 62, 156, 0, 183, 62, 197, 179, 200, 190, 114, 94, 65, 62, 172, 223, 87, 190, 85, 167, 134, 62, 209, 82, 122, 59, 190, 17, 86, 189, 122, 13, 45, 61, 230, 33, 77, 189, 206, 46, 231, 189, 5, 137, 116, 61, 180, 80, 59, 62, 252, 28, 165, 189, 47, 235, 159, 59, 135, 207, 243, 62, 31, 201, 30, 190, 17, 5, 10, 62, 69, 64, 20, 62, 159, 207, 178, 188, 236, 123, 243, 61, 201, 23, 133, 190, 0, 167, 138, 188, 187, 190, 214, 189, 20, 72, 102, 62, 236, 173, 193, 61, 163, 15, 239, 190, 26, 200, 63, 61, 86, 49, 229, 190, 100, 123, 180, 60, 95, 56, 20, 189, 10, 234, 32, 191, 190, 247, 234, 189, 202, 23, 217, 190, 80, 4, 219, 62, 187, 197, 157, 61, 223, 55, 168, 62, 86, 61, 30, 190, 56, 100, 83, 62, 138, 6, 196, 61, 105, 183, 187, 61, 253, 216, 68, 62, 29, 74, 119, 62, 34, 119, 219, 190, 70, 118, 112, 61, 240, 167, 156, 189, 166, 241, 4, 62, 12, 158, 17, 191, 253, 73, 26, 62, 182, 175, 14, 190, 59, 144, 105, 62, 134, 180, 132, 189, 199, 156, 255, 189, 83, 87, 59, 189, 82, 114, 169, 61, 179, 217, 154, 60, 33, 140, 49, 188, 150, 125, 48, 60, 247, 67, 208, 59, 9, 226, 183, 61, 26, 59, 225, 189, 193, 204, 209, 61, 241, 231, 216, 189, 40, 160, 129, 189, 20, 132, 174, 61, 174, 74, 148, 189, 34, 24, 248, 188, 45, 169, 186, 188, 1, 52, 44, 190, 196, 251, 188, 189, 146, 144, 37, 190, 123, 6, 72, 61, 107, 58, 85, 190, 151, 203, 190, 189, 40, 87, 3, 190, 228, 238, 248, 189, 58, 55, 20, 60, 21, 85, 227, 60, 231, 28, 242, 188, 158, 42, 70, 61, 186, 224, 39, 190, 79, 6, 5, 62, 8, 94, 166, 189, 99, 23, 211, 61, 68, 178, 142, 62, 102, 82, 145, 190, 216, 48, 73, 189, 151, 90, 174, 189, 69, 93, 56, 62, 51, 16, 191, 61, 25, 140, 183, 61, 40, 166, 22, 190, 222, 178, 11, 60, 39, 211, 74, 62, 90, 240, 115, 62, 161, 65, 219, 190, 82, 123, 129, 61, 105, 181, 129, 189, 109, 36, 152, 62, 191, 43, 88, 62, 247, 124, 99, 61, 162, 131, 134, 188, 66, 235, 246, 60, 216, 239, 10, 189, 178, 101, 124, 62, 183, 203, 181, 61, 228, 191, 80, 61, 251, 199, 200, 61, 56, 19, 135, 62, 221, 68, 164, 188, 124, 130, 26, 62, 165, 236, 31, 61, 156, 171, 79, 62, 98, 210, 68, 190, 78, 137, 169, 62, 99, 186, 22, 190, 51, 51, 204, 189, 137, 50, 137, 61, 203, 201, 26, 190, 251, 29, 167, 61, 153, 219, 165, 60, 26, 98, 37, 62, 244, 113, 9, 190, 190, 86, 0, 62, 154, 174, 13, 189, 61, 202, 241, 189, 162, 145, 242, 189, 89, 219, 21, 190, 29, 100, 109, 61, 194, 41, 37, 61, 105, 69, 88, 189, 196, 49, 69, 185, 204, 10, 174, 60, 19, 0, 146, 188, 69, 23, 163, 189, 172, 21, 16, 62, 203, 243, 54, 189, 119, 159, 223, 189, 198, 17, 255, 61, 240, 7, 27, 190, 161, 189, 92, 188, 124, 159, 41, 190, 85, 11, 33, 190, 43, 227, 139, 189, 206, 204, 127, 187, 20, 192, 35, 62, 104, 168, 132, 189, 244, 76, 9, 61, 50, 96, 40, 190, 60, 116, 8, 190, 101, 167, 202, 189, 140, 112, 197, 190, 244, 200, 152, 190, 215, 191, 116, 62, 62, 99, 12, 190, 159, 122, 21, 190, 80, 96, 130, 189, 8, 115, 165, 61, 145, 82, 178, 190, 134, 122, 180, 190, 243, 57, 248, 189, 147, 198, 185, 62, 136, 177, 1, 190, 106, 221, 161, 190, 163, 2, 151, 189, 247, 100, 252, 190, 227, 116, 255, 189, 205, 42, 175, 61, 14, 125, 166, 60, 50, 251, 15, 190, 238, 114, 82, 190, 91, 119, 127, 62, 119, 178, 1, 62, 132, 143, 182, 190, 92, 179, 221, 189, 159, 46, 24, 190, 204, 121, 199, 61, 130, 172, 161, 62, 3, 153, 44, 62, 50, 241, 134, 190, 53, 222, 3, 62, 16, 36, 10, 62, 149, 237, 17, 62, 214, 142, 12, 190, 38, 200, 53, 188, 49, 109, 85, 190, 164, 129, 16, 189, 61, 98, 136, 62, 150, 197, 163, 189, 31, 199, 234, 188, 114, 168, 153, 189, 41, 61, 148, 188, 171, 127, 175, 189, 127, 210, 155, 188, 233, 249, 138, 61, 68, 240, 77, 62, 246, 229, 153, 62, 172, 170, 191, 60, 76, 67, 130, 190, 79, 188, 45, 60, 180, 45, 141, 189, 227, 242, 23, 189, 189, 216, 190, 61, 205, 113, 146, 189, 49, 50, 32, 189, 119, 233, 10, 61, 50, 124, 172, 61, 248, 102, 214, 189, 139, 207, 146, 61, 140, 11, 39, 62, 96, 216, 225, 62, 226, 105, 4, 190, 132, 34, 27, 189, 89, 52, 166, 61, 72, 73, 177, 189, 202, 2, 33, 60, 45, 15, 50, 190, 243, 167, 215, 189, 128, 117, 195, 189, 8, 98, 39, 190, 111, 104, 41, 190, 161, 11, 9, 61, 242, 178, 25, 189, 100, 172, 209, 187, 54, 164, 188, 61, 78, 4, 239, 189, 124, 118, 140, 189, 180, 72, 5, 190, 167, 138, 239, 61, 219, 182, 45, 61, 72, 158, 26, 61, 239, 119, 50, 189, 129, 228, 134, 61, 82, 221, 3, 190, 130, 255, 242, 61, 196, 112, 17, 190, 154, 215, 204, 61, 64, 214, 131, 189, 123, 59, 230, 61, 1, 156, 167, 59, 211, 237, 69, 189, 44, 40, 221, 189, 5, 33, 14, 189, 150, 93, 115, 189, 74, 130, 146, 61, 248, 147, 189, 61, 52, 117, 17, 62, 183, 54, 77, 61, 29, 27, 96, 61, 164, 252, 33, 62, 246, 168, 67, 62, 200, 254, 196, 62, 14, 126, 77, 190, 159, 7, 76, 62, 50, 163, 35, 62, 12, 237, 163, 62, 210, 167, 5, 190, 21, 248, 183, 62, 98, 190, 151, 189, 3, 232, 189, 187, 71, 131, 43, 190, 85, 83, 19, 61, 61, 205, 197, 62, 182, 222, 132, 60, 98, 223, 241, 189, 110, 60, 52, 62, 202, 247, 217, 61, 60, 12, 147, 189, 176, 152, 2, 61, 231, 60, 150, 60, 187, 217, 44, 190, 15, 40, 101, 62, 12, 0, 40, 62, 200, 50, 186, 188, 241, 29, 157, 190, 135, 206, 157, 190, 135, 142, 207, 190, 237, 86, 72, 62, 102, 73, 118, 190, 46, 37, 133, 62, 52, 251, 207, 61, 207, 160, 198, 188, 71, 116, 213, 61, 101, 172, 69, 191, 95, 233, 22, 62, 125, 110, 131, 190, 197, 198, 41, 190, 229, 117, 99, 62, 136, 249, 186, 189, 169, 162, 24, 191, 63, 40, 173, 190, 87, 121, 239, 61, 29, 27, 151, 190, 166, 147, 11, 62, 159, 92, 41, 190, 227, 173, 13, 190, 204, 252, 207, 60, 18, 202, 45, 62, 189, 82, 251, 190, 75, 191, 60, 62, 155, 58, 18, 62, 234, 161, 238, 189, 142, 220, 89, 190, 39, 225, 56, 62, 233, 206, 177, 187, 125, 94, 235, 62, 229, 223, 189, 61, 104, 162, 51, 186, 67, 159, 248, 190, 45, 173, 72, 189, 104, 141, 148, 190, 111, 77, 173, 61, 174, 77, 76, 190, 96, 199, 184, 61, 1, 233, 138, 62, 34, 144, 149, 190, 151, 210, 159, 61, 197, 35, 96, 190, 240, 45, 172, 190, 233, 37, 214, 62, 198, 96, 237, 189, 215, 21, 202, 190, 205, 78, 5, 190, 189, 180, 135, 61, 234, 144, 157, 190, 90, 235, 196, 61, 55, 43, 129, 190, 36, 157, 162, 190, 49, 188, 254, 61, 7, 86, 178, 190, 119, 55, 14, 190, 233, 165, 238, 61, 123, 66, 253, 188, 75, 183, 233, 61, 88, 55, 111, 61, 71, 132, 137, 62, 14, 160, 222, 190, 238, 92, 198, 62, 103, 83, 198, 61, 248, 209, 46, 62, 28, 158, 205, 189, 222, 7, 206, 61, 230, 251, 220, 61, 113, 121, 14, 62, 198, 236, 44, 61, 49, 212, 195, 188, 100, 27, 8, 190, 178, 38, 44, 62, 213, 103, 137, 189, 105, 173, 18, 190, 47, 67, 171, 189, 21, 45, 200, 189, 165, 62, 20, 190, 143, 163, 173, 58, 186, 33, 14, 188, 160, 133, 12, 190, 38, 162, 46, 190, 1, 32, 127, 188, 120, 182, 168, 189, 11, 55, 9, 189, 218, 176, 49, 190, 137, 65, 228, 59, 1, 156, 70, 61, 120, 168, 252, 59, 39, 120, 39, 190, 251, 147, 40, 190, 54, 142, 186, 60, 181, 55, 30, 190, 1, 152, 41, 60, 234, 235, 197, 60, 197, 235, 45, 190, 191, 60, 178, 189, 18, 9, 226, 190, 98, 204, 46, 190, 140, 100, 157, 190, 245, 94, 120, 61, 89, 15, 173, 189, 6, 186, 142, 61, 68, 63, 57, 190, 34, 250, 9, 62, 202, 215, 209, 59, 142, 244, 208, 60, 90, 146, 59, 60, 160, 43, 180, 61, 186, 131, 137, 189, 218, 99, 15, 189, 188, 58, 184, 190, 195, 60, 186, 62, 45, 59, 78, 61, 47, 1, 84, 62, 135, 170, 114, 62, 7, 72, 89, 59, 69, 241, 144, 189, 210, 109, 149, 60, 23, 214, 40, 190, 117, 240, 43, 189, 93, 56, 40, 62, 131, 170, 116, 190, 111, 156, 92, 59, 45, 211, 59, 62, 26, 251, 255, 189, 205, 197, 170, 189, 33, 29, 80, 190, 8, 251, 6, 61, 196, 247, 68, 188, 79, 163, 149, 190, 189, 208, 79, 187, 242, 159, 178, 189, 81, 189, 8, 62, 3, 75, 24, 190, 102, 135, 76, 189, 237, 181, 17, 62, 85, 57, 245, 189, 125, 120, 82, 190, 124, 235, 247, 188, 108, 40, 213, 190, 86, 172, 187, 61, 198, 200, 33, 190, 252, 69, 17, 190, 79, 60, 198, 62, 159, 113, 9, 186, 39, 1, 38, 62, 88, 96, 146, 62, 102, 188, 12, 62, 180, 16, 69, 62, 171, 61, 111, 62, 148, 221, 61, 61, 128, 140, 12, 61, 115, 169, 111, 62, 3, 153, 146, 189, 154, 60, 37, 62, 186, 56, 102, 60, 129, 138, 51, 190, 1, 19, 141, 189, 130, 72, 92, 190, 190, 254, 228, 188, 97, 113, 167, 190, 5, 14, 210, 62, 121, 106, 144, 190, 139, 105, 170, 62, 160, 182, 138, 189, 173, 12, 131, 62, 99, 67, 136, 62, 164, 126, 34, 191, 117, 139, 145, 189, 250, 140, 204, 189, 139, 113, 214, 189, 116, 208, 153, 62, 203, 50, 153, 60, 188, 20, 5, 191, 224, 197, 208, 189, 248, 129, 141, 62, 192, 250, 205, 190, 84, 121, 34, 62, 218, 150, 97, 190, 10, 146, 225, 59, 69, 50, 210, 189, 223, 243, 14, 62, 26, 203, 105, 190, 63, 74, 248, 61, 22, 182, 76, 188, 253, 93, 19, 190, 191, 185, 129, 190, 234, 179, 192, 62, 75, 98, 125, 190, 111, 132, 186, 62, 223, 25, 48, 61, 191, 193, 45, 61, 175, 214, 97, 189, 183, 83, 54, 190, 93, 240, 94, 62, 83, 95, 155, 189, 178, 151, 94, 62, 174, 209, 235, 61, 122, 161, 0, 61, 241, 166, 159, 188, 234, 164, 43, 62, 10, 157, 254, 189, 177, 208, 56, 62, 51, 54, 12, 191, 135, 226, 162, 188, 66, 71, 53, 190, 215, 212, 250, 61, 41, 156, 38, 62, 18, 184, 94, 61, 29, 165, 142, 190, 108, 220, 145, 62, 165, 161, 141, 189, 106, 72, 88, 62, 127, 158, 177, 60, 251, 4, 114, 62, 208, 219, 60, 61, 139, 180, 42, 62, 48, 91, 141, 190, 65, 131, 141, 62, 28, 90, 134, 190, 76, 167, 216, 189, 210, 5, 143, 61, 110, 161, 239, 60, 212, 81, 140, 190, 113, 10, 185, 190, 32, 165, 114, 61, 156, 11, 148, 190, 153, 54, 18, 189, 198, 35, 170, 61, 79, 196, 7, 60, 155, 205, 37, 62, 230, 138, 80, 191, 44, 92, 213, 61, 122, 57, 148, 189, 176, 254, 29, 61, 236, 100, 126, 62, 86, 161, 38, 62, 178, 6, 28, 191, 173, 246, 154, 189, 54, 235, 186, 60, 154, 144, 152, 190, 189, 17, 154, 62, 33, 250, 237, 187, 40, 208, 81, 190, 156, 8, 178, 61, 21, 224, 226, 59, 90, 156, 110, 190, 253, 41, 219, 186, 72, 242, 12, 62, 133, 44, 212, 188, 18, 251, 137, 190, 31, 200, 92, 62, 63, 85, 11, 190, 54, 43, 118, 62, 151, 227, 29, 189, 114, 47, 62, 62, 205, 217, 0, 191, 232, 54, 145, 189, 121, 206, 130, 190, 239, 135, 18, 190, 227, 253, 76, 61, 225, 227, 133, 61, 215, 15, 39, 190, 16, 122, 18, 191, 222, 59, 89, 188, 178, 118, 137, 61, 103, 26, 53, 59, 77, 125, 76, 61, 139, 247, 28, 190, 121, 109, 159, 189, 154, 251, 144, 61, 91, 182, 170, 62, 196, 217, 129, 190, 184, 254, 6, 62, 41, 31, 43, 61, 139, 130, 152, 188, 89, 253, 242, 61, 65, 42, 24, 62, 187, 85, 22, 191, 146, 253, 243, 61, 186, 196, 221, 189, 234, 25, 103, 190, 120, 73, 141, 190, 229, 16, 52, 62, 89, 155, 214, 189, 104, 147, 32, 62, 180, 221, 15, 189, 222, 230, 230, 61, 240, 94, 27, 62, 92, 30, 22, 62, 250, 174, 185, 61, 221, 143, 110, 61, 102, 140, 131, 190, 126, 93, 53, 190, 247, 115, 183, 189, 9, 60, 16, 62, 239, 99, 166, 188, 40, 71, 225, 59, 24, 177, 175, 189, 223, 87, 152, 62, 207, 48, 203, 188, 163, 164, 36, 190, 131, 105, 153, 62, 193, 13, 151, 61, 211, 136, 218, 62, 151, 241, 0, 62, 240, 156, 6, 191, 165, 101, 170, 61, 44, 103, 74, 190, 83, 120, 116, 61, 6, 234, 167, 190, 19, 197, 243, 188, 78, 99, 121, 190, 234, 172, 167, 61, 243, 75, 157, 190, 162, 101, 122, 61, 46, 196, 11, 190, 191, 25, 160, 61, 53, 208, 108, 62, 182, 163, 67, 61, 116, 19, 47, 190, 48, 77, 24, 62, 27, 89, 2, 61, 92, 120, 91, 61, 42, 99, 175, 61, 185, 127, 151, 56, 247, 86, 228, 189, 176, 230, 213, 189, 129, 165, 94, 58, 177, 80, 228, 61, 172, 216, 59, 190, 2, 98, 167, 61, 247, 255, 105, 187, 208, 14, 192, 61, 103, 94, 89, 188, 11, 154, 240, 189, 70, 138, 254, 187, 119, 224, 227, 189, 2, 244, 183, 189, 231, 192, 20, 61, 101, 221, 244, 189, 58, 73, 14, 189, 113, 141, 24, 62, 123, 118, 28, 188, 247, 245, 182, 189, 148, 227, 152, 60, 79, 58, 152, 61, 237, 140, 145, 61, 218, 167, 84, 189, 56, 48, 109, 189, 252, 93, 103, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {170, 71, 38, 62, 170, 99, 43, 189, 118, 74, 145, 189, 129, 231, 198, 61, 151, 156, 142, 62, 182, 134, 118, 62, 14, 157, 117, 62, 8, 148, 91, 62, 226, 9, 45, 62, 198, 118, 95, 62, 220, 34, 218, 61, 48, 133, 128, 62, 128, 248, 1, 189, 85, 252, 145, 61, 60, 96, 237, 61, 255, 100, 53, 61, 69, 250, 183, 189, 64, 102, 209, 189, 116, 68, 33, 62, 167, 71, 156, 59, 229, 75, 132, 189, 243, 0, 48, 62, 7, 153, 5, 62, 190, 226, 130, 188, 249, 223, 140, 61, 10, 71, 132, 62, 49, 254, 67, 60, 115, 125, 19, 62, 123, 162, 20, 62, 216, 145, 35, 62, 250, 201, 0, 189, 220, 243, 162, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {210, 15, 142, 62, 219, 2, 133, 62, 154, 101, 102, 62, 142, 8, 3, 62, 200, 210, 142, 63, 82, 50, 133, 190, 246, 19, 82, 60, 204, 112, 50, 191, 214, 203, 83, 63, 63, 107, 245, 190, 200, 96, 67, 190, 149, 163, 217, 190, 238, 21, 5, 63, 20, 109, 13, 191, 90, 156, 221, 60, 67, 232, 79, 190, 23, 18, 6, 190, 80, 249, 177, 190, 176, 209, 64, 190, 70, 68, 255, 189, 230, 218, 97, 62, 188, 244, 15, 63, 207, 27, 239, 62, 85, 217, 167, 61, 132, 138, 98, 62, 81, 239, 157, 189, 223, 53, 230, 62, 62, 126, 142, 190, 202, 100, 126, 62, 74, 227, 148, 62, 101, 195, 17, 190, 76, 169, 152, 60, 100, 180, 4, 61, 187, 208, 54, 62, 113, 241, 128, 61, 104, 242, 191, 190, 48, 88, 27, 62, 147, 105, 130, 189, 70, 215, 162, 190, 108, 99, 137, 61, 1, 45, 99, 190, 242, 175, 244, 59, 219, 181, 105, 190, 104, 106, 57, 62, 36, 25, 58, 61, 198, 59, 120, 189, 116, 87, 212, 61, 254, 192, 53, 190, 181, 154, 224, 61, 116, 93, 96, 189, 152, 206, 79, 61, 129, 38, 6, 189, 99, 30, 164, 61, 175, 150, 115, 189, 62, 210, 125, 61, 212, 31, 13, 190, 153, 107, 191, 190, 105, 29, 140, 190, 199, 101, 137, 62, 245, 78, 5, 62, 210, 250, 47, 189, 238, 119, 14, 190, 6, 10, 49, 62, 175, 196, 137, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 227, 19, 61, 65, 233, 135, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {60, 189, 191, 63, 159, 81, 235, 190, 205, 31, 254, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {72, 132, 68, 63, 160, 203, 194, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0092/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}