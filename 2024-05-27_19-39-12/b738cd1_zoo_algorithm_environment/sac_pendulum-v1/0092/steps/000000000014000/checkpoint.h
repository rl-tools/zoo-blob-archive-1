// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {158, 192, 152, 189, 43, 107, 154, 190, 72, 143, 76, 62, 44, 243, 155, 190, 114, 87, 110, 191, 9, 124, 17, 191, 190, 76, 7, 63, 19, 198, 16, 190, 142, 241, 140, 190, 183, 177, 255, 60, 90, 207, 220, 62, 40, 226, 104, 191, 51, 201, 22, 61, 52, 241, 21, 63, 131, 112, 185, 190, 30, 126, 2, 63, 144, 125, 34, 63, 160, 219, 116, 190, 21, 115, 131, 191, 61, 157, 37, 62, 235, 183, 136, 59, 252, 142, 64, 191, 255, 237, 160, 63, 12, 83, 177, 62, 50, 53, 201, 62, 26, 196, 179, 62, 131, 135, 40, 62, 98, 53, 128, 190, 216, 177, 223, 61, 192, 154, 35, 63, 56, 109, 42, 60, 86, 125, 151, 191, 99, 236, 161, 190, 155, 154, 169, 62, 40, 195, 53, 63, 42, 42, 9, 191, 106, 162, 197, 62, 148, 101, 74, 191, 26, 87, 67, 190, 158, 223, 156, 61, 227, 242, 208, 189, 235, 72, 140, 188, 15, 25, 167, 61, 136, 24, 129, 63, 230, 7, 171, 62, 195, 195, 104, 61, 232, 252, 147, 191, 250, 146, 163, 62, 198, 35, 108, 63, 139, 218, 223, 62, 19, 7, 208, 61, 226, 13, 92, 63, 162, 66, 9, 63, 240, 244, 103, 62, 194, 244, 27, 63, 39, 0, 34, 191, 3, 164, 208, 190, 231, 16, 222, 62, 218, 196, 105, 63, 240, 233, 20, 190, 156, 109, 210, 62, 112, 39, 159, 191, 205, 54, 43, 191, 137, 110, 127, 190, 95, 115, 77, 61, 108, 72, 48, 189, 180, 235, 184, 62, 145, 129, 169, 190, 149, 12, 67, 190, 50, 164, 72, 62, 107, 99, 143, 63, 184, 123, 120, 62, 13, 246, 102, 190, 42, 24, 250, 190, 223, 9, 179, 62, 32, 217, 180, 190, 34, 213, 234, 62, 230, 24, 223, 60, 13, 122, 49, 190, 13, 204, 221, 189, 249, 110, 252, 190, 92, 177, 128, 190, 166, 0, 100, 63, 72, 87, 57, 62, 239, 165, 47, 63, 78, 187, 125, 191, 71, 249, 112, 190, 233, 206, 163, 62, 98, 177, 161, 191, 182, 69, 46, 191, 75, 104, 44, 189, 40, 29, 30, 191, 27, 235, 115, 62, 224, 63, 122, 191, 186, 124, 122, 191, 111, 91, 244, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {100, 57, 42, 191, 53, 237, 185, 190, 74, 61, 243, 190, 82, 164, 160, 190, 10, 87, 91, 61, 158, 183, 192, 62, 209, 41, 185, 62, 240, 152, 141, 62, 199, 146, 158, 190, 210, 225, 129, 189, 101, 102, 124, 62, 117, 220, 5, 189, 205, 249, 173, 188, 165, 200, 228, 190, 158, 235, 157, 190, 101, 127, 210, 61, 142, 108, 28, 62, 4, 229, 134, 190, 224, 119, 204, 62, 81, 80, 131, 187, 116, 219, 135, 62, 176, 182, 234, 62, 91, 254, 164, 62, 234, 218, 138, 61, 102, 45, 141, 190, 8, 58, 19, 63, 253, 171, 30, 191, 219, 132, 215, 62, 181, 87, 110, 60, 172, 206, 41, 62, 161, 74, 72, 188, 130, 111, 32, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {109, 24, 64, 189, 109, 148, 91, 188, 252, 247, 204, 61, 163, 143, 108, 62, 123, 91, 17, 189, 238, 183, 150, 62, 138, 23, 103, 190, 211, 206, 68, 187, 86, 110, 220, 190, 157, 239, 44, 190, 28, 226, 210, 61, 254, 140, 131, 62, 168, 18, 208, 62, 237, 114, 160, 61, 119, 147, 211, 190, 151, 8, 93, 62, 217, 38, 113, 190, 238, 227, 202, 190, 139, 88, 136, 61, 234, 134, 66, 62, 205, 150, 20, 61, 169, 14, 248, 60, 16, 144, 191, 61, 12, 59, 252, 190, 51, 67, 154, 185, 80, 58, 196, 61, 55, 186, 137, 189, 119, 82, 162, 190, 75, 222, 87, 62, 125, 120, 58, 62, 18, 250, 181, 62, 20, 203, 181, 190, 103, 186, 25, 190, 86, 68, 12, 187, 236, 6, 121, 189, 21, 161, 125, 61, 63, 107, 6, 189, 9, 102, 147, 190, 30, 61, 170, 61, 17, 179, 166, 190, 235, 56, 78, 191, 109, 196, 247, 60, 70, 81, 248, 188, 199, 243, 121, 190, 109, 88, 229, 61, 172, 133, 44, 62, 117, 24, 83, 191, 243, 244, 43, 62, 201, 66, 92, 61, 27, 8, 116, 190, 121, 137, 137, 190, 21, 235, 171, 190, 210, 227, 41, 191, 194, 226, 75, 62, 92, 47, 163, 190, 201, 243, 108, 191, 7, 23, 183, 187, 89, 69, 221, 60, 102, 121, 28, 190, 77, 247, 150, 190, 6, 247, 56, 62, 177, 227, 62, 191, 184, 198, 122, 62, 34, 240, 196, 61, 7, 225, 130, 62, 70, 130, 136, 189, 134, 199, 85, 62, 96, 59, 56, 62, 237, 17, 220, 61, 77, 95, 55, 61, 171, 43, 108, 190, 69, 232, 222, 62, 153, 121, 234, 62, 47, 178, 127, 190, 21, 46, 25, 61, 211, 15, 151, 62, 98, 223, 177, 62, 80, 216, 44, 61, 131, 169, 17, 63, 181, 158, 185, 190, 94, 161, 147, 189, 206, 172, 61, 62, 68, 236, 158, 61, 230, 45, 7, 63, 251, 35, 219, 188, 201, 226, 90, 188, 210, 35, 230, 61, 50, 111, 68, 62, 211, 108, 222, 189, 88, 253, 75, 61, 21, 14, 66, 61, 171, 52, 15, 190, 128, 75, 200, 189, 241, 192, 161, 189, 159, 160, 119, 190, 0, 246, 41, 191, 172, 155, 7, 62, 70, 169, 36, 191, 255, 252, 17, 191, 170, 180, 79, 191, 223, 203, 202, 190, 113, 170, 87, 62, 26, 90, 240, 61, 28, 46, 141, 190, 33, 160, 134, 190, 79, 33, 143, 61, 187, 4, 178, 190, 82, 51, 164, 190, 59, 221, 112, 61, 232, 208, 14, 62, 10, 149, 194, 191, 68, 50, 31, 190, 49, 70, 253, 62, 176, 162, 37, 62, 124, 80, 80, 62, 255, 49, 219, 189, 136, 38, 5, 190, 47, 50, 92, 188, 100, 220, 255, 189, 213, 116, 215, 190, 108, 52, 181, 62, 116, 224, 54, 62, 102, 89, 238, 189, 203, 221, 159, 61, 94, 17, 30, 61, 73, 204, 164, 190, 72, 185, 157, 61, 183, 53, 39, 189, 179, 41, 141, 190, 221, 184, 70, 191, 154, 41, 10, 61, 53, 60, 169, 191, 65, 148, 195, 62, 144, 231, 168, 191, 146, 225, 123, 62, 36, 141, 225, 61, 240, 248, 207, 190, 9, 26, 213, 61, 180, 222, 99, 190, 106, 65, 134, 191, 210, 62, 231, 190, 196, 198, 57, 189, 185, 7, 204, 189, 237, 183, 206, 190, 189, 241, 78, 62, 56, 182, 183, 190, 150, 53, 102, 190, 194, 13, 252, 190, 36, 72, 194, 191, 148, 180, 20, 62, 113, 123, 91, 191, 186, 93, 137, 188, 14, 219, 167, 61, 162, 222, 170, 61, 239, 176, 27, 190, 229, 82, 92, 62, 228, 31, 151, 190, 140, 230, 213, 191, 243, 36, 116, 62, 90, 77, 42, 63, 128, 68, 31, 61, 215, 221, 100, 62, 68, 254, 126, 190, 2, 106, 114, 60, 170, 190, 140, 189, 89, 216, 58, 62, 89, 21, 72, 62, 175, 90, 80, 191, 192, 89, 33, 190, 189, 92, 102, 61, 221, 26, 23, 61, 44, 236, 15, 62, 40, 177, 15, 191, 87, 237, 83, 61, 53, 202, 181, 191, 54, 0, 54, 189, 35, 48, 140, 62, 4, 117, 137, 62, 84, 207, 29, 190, 95, 177, 19, 190, 146, 86, 10, 62, 110, 133, 98, 61, 228, 194, 21, 61, 215, 23, 198, 60, 173, 127, 14, 191, 163, 162, 32, 190, 121, 253, 14, 61, 111, 48, 205, 62, 178, 251, 55, 190, 155, 71, 217, 59, 198, 101, 18, 191, 141, 96, 45, 62, 164, 254, 96, 61, 99, 124, 136, 190, 232, 80, 166, 190, 71, 134, 119, 189, 211, 17, 62, 189, 237, 38, 19, 62, 75, 79, 11, 190, 215, 79, 25, 190, 149, 110, 213, 189, 237, 62, 74, 62, 41, 130, 199, 189, 0, 27, 92, 188, 154, 157, 162, 188, 111, 115, 11, 188, 29, 56, 130, 189, 138, 101, 51, 61, 12, 125, 121, 62, 158, 79, 76, 190, 245, 94, 163, 62, 92, 29, 17, 62, 169, 239, 166, 61, 184, 198, 51, 62, 183, 37, 167, 62, 223, 150, 247, 189, 242, 5, 192, 61, 198, 115, 28, 61, 18, 15, 202, 189, 153, 169, 13, 62, 57, 216, 149, 62, 204, 119, 206, 60, 27, 148, 146, 62, 197, 235, 153, 189, 147, 44, 140, 190, 134, 213, 41, 62, 211, 126, 223, 190, 160, 253, 126, 62, 69, 167, 35, 190, 127, 53, 7, 61, 39, 17, 64, 62, 103, 200, 134, 191, 58, 178, 88, 61, 40, 29, 12, 189, 5, 194, 252, 61, 202, 197, 151, 61, 79, 47, 236, 190, 35, 140, 33, 190, 29, 80, 150, 191, 26, 130, 94, 62, 94, 222, 0, 63, 165, 49, 188, 62, 178, 82, 186, 190, 224, 137, 24, 61, 202, 55, 157, 59, 30, 131, 117, 62, 30, 94, 157, 62, 227, 224, 119, 61, 240, 234, 148, 190, 83, 83, 189, 61, 254, 232, 186, 190, 162, 144, 91, 62, 240, 6, 18, 191, 118, 137, 252, 189, 141, 26, 194, 190, 92, 159, 223, 62, 253, 112, 171, 189, 82, 172, 40, 191, 23, 116, 126, 190, 226, 154, 74, 191, 161, 67, 247, 62, 6, 190, 170, 191, 112, 203, 106, 189, 26, 53, 131, 62, 37, 54, 88, 190, 234, 44, 133, 189, 183, 82, 74, 62, 197, 162, 31, 191, 121, 32, 79, 60, 226, 47, 10, 62, 83, 64, 1, 62, 88, 34, 151, 190, 34, 254, 53, 189, 6, 232, 25, 190, 76, 247, 43, 62, 123, 143, 80, 190, 155, 136, 68, 191, 173, 102, 58, 61, 181, 35, 253, 190, 147, 85, 228, 61, 203, 214, 27, 62, 72, 15, 82, 187, 182, 14, 123, 61, 175, 114, 18, 62, 18, 191, 116, 61, 6, 164, 74, 191, 177, 192, 220, 187, 87, 230, 154, 62, 215, 42, 151, 190, 153, 48, 250, 61, 166, 46, 206, 190, 85, 91, 31, 62, 219, 158, 160, 190, 77, 221, 252, 61, 116, 89, 56, 62, 153, 166, 104, 190, 150, 217, 142, 190, 107, 57, 181, 190, 100, 0, 8, 61, 192, 191, 157, 61, 139, 67, 67, 191, 221, 217, 89, 60, 227, 188, 108, 190, 222, 42, 191, 61, 31, 208, 36, 190, 204, 42, 131, 62, 59, 69, 128, 190, 146, 36, 157, 189, 76, 18, 68, 188, 77, 240, 214, 61, 130, 101, 153, 61, 8, 224, 155, 62, 218, 157, 123, 191, 186, 163, 54, 62, 212, 27, 245, 189, 226, 248, 3, 63, 25, 1, 10, 191, 72, 188, 216, 61, 35, 171, 107, 191, 56, 198, 75, 62, 105, 82, 179, 59, 9, 126, 224, 61, 177, 225, 45, 190, 212, 177, 88, 62, 149, 142, 238, 188, 67, 178, 214, 61, 219, 86, 161, 189, 100, 239, 232, 189, 224, 176, 188, 61, 95, 31, 16, 62, 77, 224, 199, 60, 27, 128, 179, 61, 52, 187, 116, 190, 98, 93, 189, 60, 237, 104, 227, 190, 33, 205, 141, 62, 111, 61, 21, 189, 224, 74, 187, 61, 23, 44, 235, 61, 160, 198, 47, 60, 151, 173, 22, 62, 7, 130, 170, 61, 195, 48, 233, 61, 16, 158, 85, 62, 182, 102, 118, 188, 220, 160, 144, 62, 23, 132, 188, 59, 112, 249, 184, 62, 198, 84, 86, 190, 64, 246, 217, 60, 162, 75, 224, 189, 251, 2, 29, 62, 164, 252, 174, 187, 5, 21, 159, 189, 245, 176, 152, 190, 146, 105, 201, 61, 166, 4, 192, 189, 219, 3, 144, 62, 174, 179, 254, 61, 40, 237, 200, 189, 241, 144, 44, 190, 92, 41, 182, 189, 76, 70, 88, 188, 32, 4, 137, 62, 182, 61, 88, 191, 249, 22, 199, 188, 148, 139, 236, 190, 177, 36, 169, 62, 71, 141, 143, 62, 70, 151, 69, 62, 103, 51, 1, 190, 179, 84, 122, 61, 156, 21, 26, 190, 5, 160, 181, 62, 59, 166, 189, 60, 247, 145, 11, 62, 216, 2, 164, 190, 17, 253, 13, 62, 151, 53, 156, 190, 65, 237, 196, 62, 139, 134, 32, 191, 11, 8, 212, 189, 120, 20, 104, 189, 213, 151, 137, 190, 133, 125, 201, 61, 54, 43, 118, 190, 77, 210, 83, 62, 221, 24, 161, 191, 222, 77, 42, 62, 52, 199, 144, 190, 92, 247, 225, 61, 155, 47, 247, 61, 67, 34, 187, 189, 233, 151, 116, 61, 203, 56, 178, 62, 53, 133, 225, 190, 211, 9, 202, 62, 5, 181, 34, 62, 188, 208, 219, 62, 72, 94, 213, 190, 119, 152, 128, 62, 56, 72, 4, 190, 20, 129, 172, 62, 10, 174, 171, 61, 5, 206, 142, 61, 162, 100, 139, 61, 4, 42, 35, 61, 119, 110, 133, 189, 242, 94, 4, 59, 149, 194, 33, 62, 66, 39, 105, 58, 249, 190, 198, 188, 16, 26, 8, 63, 225, 253, 129, 188, 187, 6, 184, 61, 5, 209, 187, 62, 238, 153, 180, 188, 202, 85, 14, 61, 4, 101, 202, 190, 46, 27, 79, 189, 214, 190, 226, 189, 192, 109, 93, 62, 36, 188, 124, 62, 246, 101, 131, 191, 167, 97, 125, 189, 173, 142, 178, 190, 124, 75, 197, 60, 90, 135, 160, 189, 251, 73, 34, 191, 190, 247, 234, 189, 177, 145, 253, 191, 150, 71, 10, 62, 202, 42, 42, 62, 220, 24, 185, 62, 187, 15, 246, 189, 100, 235, 49, 62, 209, 151, 190, 61, 147, 227, 243, 61, 61, 212, 77, 62, 50, 32, 213, 62, 172, 28, 36, 191, 248, 11, 251, 61, 224, 153, 33, 190, 249, 209, 154, 62, 76, 151, 19, 191, 222, 239, 16, 62, 82, 7, 204, 190, 46, 226, 225, 62, 134, 180, 132, 189, 199, 156, 255, 189, 83, 87, 59, 189, 82, 114, 169, 61, 179, 217, 154, 60, 33, 140, 49, 188, 150, 125, 48, 60, 247, 67, 208, 59, 9, 226, 183, 61, 26, 59, 225, 189, 193, 204, 209, 61, 241, 231, 216, 189, 40, 160, 129, 189, 20, 132, 174, 61, 174, 74, 148, 189, 34, 24, 248, 188, 45, 169, 186, 188, 1, 52, 44, 190, 196, 251, 188, 189, 146, 144, 37, 190, 123, 6, 72, 61, 107, 58, 85, 190, 151, 203, 190, 189, 40, 87, 3, 190, 228, 238, 248, 189, 58, 55, 20, 60, 21, 85, 227, 60, 231, 28, 242, 188, 158, 42, 70, 61, 186, 224, 39, 190, 79, 6, 5, 62, 8, 94, 166, 189, 184, 70, 105, 61, 47, 8, 123, 62, 92, 224, 169, 190, 224, 203, 113, 189, 7, 251, 210, 189, 179, 187, 190, 61, 245, 197, 25, 62, 134, 254, 28, 60, 68, 88, 128, 190, 103, 75, 7, 61, 88, 85, 45, 62, 41, 118, 70, 62, 95, 128, 238, 190, 82, 123, 129, 61, 96, 240, 125, 190, 172, 128, 143, 62, 24, 47, 45, 62, 215, 149, 142, 187, 52, 196, 163, 188, 93, 224, 210, 189, 123, 200, 15, 189, 100, 245, 91, 62, 194, 132, 43, 61, 252, 18, 203, 60, 142, 212, 241, 61, 87, 153, 123, 62, 92, 81, 63, 189, 101, 174, 71, 62, 225, 86, 136, 58, 122, 123, 88, 62, 81, 179, 58, 190, 244, 6, 198, 62, 99, 186, 22, 190, 51, 51, 204, 189, 137, 50, 137, 61, 203, 201, 26, 190, 251, 29, 167, 61, 153, 219, 165, 60, 26, 98, 37, 62, 244, 113, 9, 190, 190, 86, 0, 62, 154, 174, 13, 189, 61, 202, 241, 189, 162, 145, 242, 189, 89, 219, 21, 190, 29, 100, 109, 61, 194, 41, 37, 61, 105, 69, 88, 189, 196, 49, 69, 185, 204, 10, 174, 60, 19, 0, 146, 188, 69, 23, 163, 189, 172, 21, 16, 62, 203, 243, 54, 189, 119, 159, 223, 189, 198, 17, 255, 61, 240, 7, 27, 190, 161, 189, 92, 188, 124, 159, 41, 190, 85, 11, 33, 190, 43, 227, 139, 189, 206, 204, 127, 187, 20, 192, 35, 62, 104, 168, 132, 189, 142, 254, 178, 188, 59, 135, 181, 189, 60, 116, 8, 190, 31, 56, 129, 189, 177, 56, 211, 190, 38, 121, 180, 190, 103, 139, 213, 62, 2, 122, 69, 189, 120, 139, 165, 190, 180, 167, 173, 188, 211, 128, 70, 187, 225, 127, 173, 190, 58, 99, 8, 191, 243, 57, 248, 189, 119, 121, 85, 62, 190, 181, 180, 189, 41, 179, 2, 191, 185, 205, 2, 190, 197, 197, 130, 191, 215, 48, 116, 62, 216, 210, 189, 61, 219, 247, 148, 62, 36, 9, 22, 190, 179, 218, 130, 190, 137, 148, 146, 62, 127, 45, 156, 62, 162, 242, 16, 191, 177, 157, 132, 59, 136, 96, 130, 190, 23, 110, 9, 62, 154, 204, 193, 62, 236, 69, 4, 62, 58, 157, 191, 190, 9, 151, 133, 62, 148, 53, 97, 61, 132, 231, 97, 62, 131, 127, 15, 190, 108, 170, 47, 190, 126, 187, 189, 189, 185, 145, 77, 190, 134, 247, 230, 62, 191, 0, 128, 188, 178, 178, 112, 189, 160, 118, 196, 189, 119, 189, 30, 190, 171, 127, 175, 189, 76, 191, 127, 189, 3, 106, 10, 190, 68, 179, 177, 62, 143, 234, 240, 62, 159, 218, 96, 189, 45, 14, 19, 191, 21, 59, 189, 188, 151, 224, 22, 190, 79, 239, 3, 190, 249, 216, 30, 62, 175, 20, 158, 189, 154, 125, 63, 190, 6, 191, 47, 62, 119, 255, 0, 61, 197, 79, 134, 190, 57, 251, 124, 61, 64, 105, 158, 61, 188, 17, 53, 63, 226, 105, 4, 190, 211, 97, 51, 189, 89, 52, 166, 61, 237, 49, 202, 189, 127, 123, 144, 186, 119, 132, 78, 190, 104, 220, 202, 189, 145, 151, 210, 189, 21, 17, 56, 190, 94, 41, 69, 190, 46, 252, 77, 60, 82, 32, 128, 189, 100, 172, 209, 187, 54, 164, 188, 61, 90, 248, 20, 190, 226, 161, 164, 189, 204, 21, 61, 190, 246, 88, 163, 61, 37, 37, 18, 61, 78, 63, 6, 60, 240, 9, 78, 189, 18, 81, 120, 61, 58, 254, 22, 190, 206, 142, 208, 61, 73, 246, 22, 190, 46, 192, 185, 61, 81, 129, 135, 189, 214, 210, 208, 61, 1, 156, 167, 59, 196, 89, 99, 189, 25, 100, 237, 189, 214, 206, 52, 189, 92, 40, 207, 188, 139, 242, 140, 61, 142, 163, 244, 61, 6, 88, 226, 61, 132, 149, 187, 60, 112, 254, 212, 61, 10, 8, 31, 60, 26, 190, 140, 62, 175, 228, 10, 63, 192, 132, 133, 190, 91, 78, 73, 62, 238, 150, 37, 62, 178, 95, 166, 62, 210, 167, 5, 190, 36, 31, 255, 62, 171, 11, 122, 61, 152, 206, 29, 186, 110, 109, 155, 189, 228, 68, 156, 59, 132, 245, 251, 62, 46, 48, 178, 187, 40, 247, 184, 189, 46, 36, 75, 62, 230, 232, 61, 61, 16, 123, 159, 189, 13, 20, 36, 61, 248, 92, 108, 188, 60, 115, 131, 190, 243, 213, 120, 62, 56, 90, 7, 62, 143, 152, 151, 61, 4, 184, 186, 190, 28, 186, 142, 190, 203, 88, 52, 191, 24, 37, 56, 190, 212, 241, 249, 60, 124, 9, 90, 62, 127, 59, 84, 61, 99, 18, 62, 62, 118, 123, 122, 62, 64, 129, 157, 191, 82, 129, 32, 62, 45, 55, 103, 190, 176, 109, 231, 190, 183, 55, 197, 62, 136, 249, 186, 189, 56, 125, 37, 191, 114, 193, 147, 190, 78, 9, 23, 62, 222, 164, 240, 190, 205, 2, 43, 62, 28, 152, 246, 190, 31, 60, 109, 190, 242, 172, 2, 62, 91, 173, 65, 62, 42, 78, 29, 191, 192, 24, 32, 62, 179, 233, 106, 62, 137, 21, 5, 59, 103, 224, 255, 189, 98, 15, 174, 62, 69, 174, 25, 190, 248, 179, 243, 62, 119, 220, 217, 61, 169, 4, 92, 61, 175, 6, 32, 191, 45, 173, 72, 189, 103, 222, 99, 190, 58, 4, 137, 62, 201, 63, 10, 191, 44, 4, 129, 61, 230, 254, 140, 62, 55, 254, 75, 190, 72, 225, 131, 61, 186, 8, 34, 189, 163, 243, 163, 190, 168, 193, 12, 63, 198, 96, 237, 189, 26, 79, 141, 190, 34, 171, 34, 190, 96, 43, 18, 62, 176, 68, 141, 190, 120, 219, 65, 62, 84, 14, 174, 190, 215, 228, 222, 190, 158, 68, 53, 61, 141, 24, 204, 190, 4, 158, 229, 189, 133, 42, 198, 61, 12, 175, 133, 189, 178, 113, 253, 61, 25, 54, 80, 61, 180, 27, 173, 62, 50, 154, 41, 191, 5, 180, 174, 62, 33, 35, 115, 62, 248, 209, 46, 62, 28, 158, 205, 189, 222, 7, 206, 61, 230, 251, 220, 61, 113, 121, 14, 62, 198, 236, 44, 61, 49, 212, 195, 188, 100, 27, 8, 190, 178, 38, 44, 62, 213, 103, 137, 189, 105, 173, 18, 190, 47, 67, 171, 189, 21, 45, 200, 189, 165, 62, 20, 190, 143, 163, 173, 58, 186, 33, 14, 188, 160, 133, 12, 190, 38, 162, 46, 190, 1, 32, 127, 188, 120, 182, 168, 189, 11, 55, 9, 189, 218, 176, 49, 190, 137, 65, 228, 59, 1, 156, 70, 61, 120, 168, 252, 59, 39, 120, 39, 190, 251, 147, 40, 190, 54, 142, 186, 60, 181, 55, 30, 190, 1, 152, 41, 60, 234, 235, 197, 60, 197, 235, 45, 190, 59, 98, 179, 189, 32, 17, 37, 191, 154, 247, 9, 191, 152, 29, 87, 191, 2, 4, 97, 190, 33, 51, 231, 189, 123, 87, 126, 61, 211, 76, 212, 190, 65, 5, 127, 62, 145, 137, 113, 190, 52, 40, 76, 189, 220, 125, 83, 190, 251, 154, 244, 61, 186, 131, 137, 189, 152, 196, 189, 191, 85, 89, 249, 190, 37, 112, 209, 62, 190, 30, 21, 62, 191, 101, 71, 62, 175, 78, 229, 61, 134, 88, 33, 189, 203, 5, 183, 189, 147, 105, 171, 60, 218, 130, 160, 190, 126, 115, 136, 187, 132, 225, 207, 61, 218, 203, 132, 190, 249, 146, 5, 190, 122, 7, 99, 62, 190, 132, 87, 190, 241, 32, 72, 190, 161, 136, 115, 190, 15, 217, 32, 190, 94, 232, 80, 190, 235, 161, 136, 190, 46, 30, 189, 61, 210, 211, 179, 60, 168, 69, 236, 61, 241, 207, 192, 59, 51, 23, 186, 189, 246, 160, 22, 62, 158, 224, 161, 189, 200, 164, 240, 190, 84, 148, 240, 60, 233, 173, 45, 191, 86, 172, 187, 61, 105, 58, 142, 190, 228, 75, 21, 190, 192, 51, 198, 62, 167, 150, 106, 185, 94, 235, 245, 61, 69, 242, 175, 62, 48, 48, 162, 61, 121, 105, 141, 62, 117, 141, 49, 62, 16, 58, 66, 61, 239, 109, 28, 61, 156, 5, 191, 62, 46, 84, 137, 189, 119, 159, 149, 62, 206, 124, 22, 190, 152, 21, 106, 190, 136, 44, 47, 189, 18, 129, 84, 190, 214, 83, 234, 189, 25, 11, 176, 190, 209, 38, 199, 62, 170, 136, 204, 190, 156, 180, 146, 62, 17, 183, 42, 189, 200, 165, 114, 62, 43, 97, 21, 62, 6, 141, 59, 191, 146, 42, 30, 190, 39, 59, 165, 188, 90, 166, 159, 189, 179, 64, 206, 62, 203, 50, 153, 60, 87, 247, 50, 191, 122, 165, 115, 59, 117, 88, 150, 62, 192, 230, 223, 190, 4, 194, 80, 62, 251, 38, 119, 190, 123, 68, 99, 61, 28, 238, 45, 189, 245, 174, 67, 62, 245, 85, 154, 190, 36, 128, 131, 61, 25, 162, 13, 189, 118, 76, 74, 190, 85, 76, 176, 190, 206, 255, 238, 62, 125, 249, 87, 190, 253, 43, 213, 62, 129, 38, 63, 61, 122, 212, 65, 189, 109, 91, 103, 190, 86, 150, 123, 190, 230, 30, 124, 62, 112, 80, 206, 59, 49, 133, 127, 62, 189, 28, 136, 62, 95, 244, 183, 189, 51, 82, 100, 190, 214, 83, 39, 62, 211, 244, 219, 190, 162, 95, 119, 62, 53, 139, 133, 191, 135, 226, 162, 188, 163, 236, 215, 190, 1, 145, 62, 62, 239, 219, 148, 61, 159, 141, 129, 189, 123, 0, 161, 190, 35, 175, 190, 62, 210, 205, 24, 190, 40, 180, 152, 62, 228, 60, 167, 188, 173, 130, 105, 62, 83, 233, 104, 61, 197, 191, 126, 62, 143, 53, 157, 190, 29, 112, 165, 62, 87, 50, 26, 191, 236, 34, 60, 190, 138, 51, 17, 62, 227, 25, 186, 189, 70, 19, 114, 190, 70, 70, 39, 191, 37, 79, 82, 190, 222, 73, 191, 190, 103, 96, 220, 58, 178, 149, 235, 61, 57, 5, 85, 62, 106, 14, 137, 62, 115, 13, 97, 191, 227, 171, 147, 61, 36, 113, 13, 190, 80, 208, 128, 61, 76, 159, 120, 62, 86, 161, 38, 62, 53, 10, 64, 191, 50, 245, 223, 188, 122, 139, 86, 61, 66, 55, 148, 190, 114, 34, 147, 62, 25, 61, 68, 188, 124, 39, 134, 190, 182, 187, 81, 62, 135, 98, 135, 60, 243, 38, 106, 190, 124, 37, 46, 188, 58, 242, 107, 62, 188, 43, 117, 62, 84, 193, 26, 190, 18, 85, 104, 62, 167, 231, 100, 190, 184, 88, 132, 62, 225, 246, 90, 61, 39, 136, 206, 61, 75, 187, 187, 190, 217, 15, 13, 190, 30, 59, 149, 190, 79, 227, 111, 190, 175, 227, 60, 61, 111, 31, 58, 62, 168, 6, 141, 190, 72, 2, 35, 191, 122, 69, 228, 189, 147, 67, 35, 62, 168, 2, 199, 188, 21, 217, 197, 61, 139, 247, 28, 190, 107, 60, 43, 191, 238, 228, 22, 62, 155, 165, 164, 62, 41, 167, 137, 190, 26, 117, 22, 62, 1, 57, 182, 188, 96, 178, 216, 60, 72, 12, 109, 62, 86, 151, 58, 62, 84, 223, 60, 191, 160, 16, 152, 61, 157, 102, 209, 189, 82, 55, 133, 190, 11, 79, 180, 190, 19, 54, 95, 62, 245, 222, 110, 189, 34, 132, 72, 62, 193, 189, 15, 62, 15, 151, 14, 62, 124, 10, 146, 62, 174, 120, 62, 62, 131, 25, 33, 62, 227, 245, 19, 61, 147, 111, 193, 190, 132, 180, 149, 190, 43, 131, 191, 189, 7, 0, 8, 63, 111, 216, 2, 62, 165, 2, 234, 61, 137, 116, 2, 190, 74, 220, 187, 62, 207, 48, 203, 188, 230, 207, 189, 61, 23, 113, 163, 62, 157, 119, 182, 62, 193, 88, 38, 63, 162, 125, 0, 62, 20, 8, 61, 191, 203, 106, 2, 62, 231, 253, 196, 190, 199, 91, 75, 60, 77, 66, 81, 190, 208, 154, 73, 61, 167, 218, 236, 190, 3, 0, 79, 62, 100, 229, 194, 190, 44, 231, 159, 61, 166, 252, 131, 189, 233, 154, 25, 62, 69, 11, 186, 62, 182, 163, 67, 61, 116, 19, 47, 190, 48, 77, 24, 62, 27, 89, 2, 61, 92, 120, 91, 61, 42, 99, 175, 61, 185, 127, 151, 56, 247, 86, 228, 189, 176, 230, 213, 189, 129, 165, 94, 58, 177, 80, 228, 61, 172, 216, 59, 190, 2, 98, 167, 61, 247, 255, 105, 187, 208, 14, 192, 61, 103, 94, 89, 188, 11, 154, 240, 189, 70, 138, 254, 187, 119, 224, 227, 189, 2, 244, 183, 189, 231, 192, 20, 61, 101, 221, 244, 189, 58, 73, 14, 189, 113, 141, 24, 62, 123, 118, 28, 188, 247, 245, 182, 189, 148, 227, 152, 60, 79, 58, 152, 61, 237, 140, 145, 61, 218, 167, 84, 189, 56, 48, 109, 189, 252, 93, 103, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {80, 27, 77, 62, 200, 153, 94, 61, 56, 91, 2, 190, 24, 233, 25, 62, 112, 184, 45, 62, 20, 224, 95, 62, 235, 109, 115, 62, 157, 108, 82, 62, 231, 78, 227, 60, 55, 1, 118, 62, 213, 89, 210, 61, 57, 94, 175, 62, 243, 255, 148, 188, 72, 227, 15, 62, 60, 96, 237, 61, 42, 244, 239, 60, 69, 250, 183, 189, 197, 9, 249, 61, 242, 193, 101, 60, 226, 161, 233, 187, 131, 116, 103, 189, 17, 213, 121, 62, 233, 189, 71, 61, 190, 226, 130, 188, 202, 5, 143, 61, 8, 233, 163, 62, 253, 113, 100, 61, 184, 80, 83, 62, 171, 161, 70, 62, 234, 36, 92, 62, 106, 1, 12, 190, 220, 243, 162, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 52, 151, 62, 219, 187, 17, 63, 236, 145, 140, 62, 83, 0, 39, 62, 178, 133, 153, 63, 5, 230, 131, 190, 220, 212, 27, 187, 215, 236, 77, 191, 197, 63, 89, 63, 161, 61, 26, 191, 78, 221, 8, 190, 47, 116, 5, 191, 90, 160, 204, 62, 210, 233, 82, 191, 90, 156, 221, 60, 170, 147, 6, 190, 23, 18, 6, 190, 100, 241, 242, 190, 149, 42, 28, 191, 93, 13, 120, 189, 129, 208, 113, 62, 241, 212, 127, 63, 163, 150, 190, 62, 85, 217, 167, 61, 22, 51, 59, 62, 35, 136, 225, 189, 29, 34, 14, 63, 62, 95, 7, 191, 65, 5, 143, 62, 129, 5, 183, 62, 74, 220, 3, 191, 76, 169, 152, 60, 160, 9, 204, 188, 191, 103, 102, 62, 161, 135, 161, 60, 191, 159, 61, 191, 173, 5, 125, 62, 15, 19, 63, 189, 232, 78, 142, 190, 10, 51, 75, 62, 238, 9, 125, 190, 160, 4, 206, 61, 59, 34, 119, 190, 98, 125, 97, 62, 132, 215, 52, 187, 23, 192, 144, 61, 116, 87, 212, 61, 138, 68, 23, 190, 181, 154, 224, 61, 28, 251, 3, 189, 146, 108, 89, 62, 35, 100, 46, 189, 246, 26, 17, 61, 99, 10, 29, 189, 57, 31, 243, 61, 212, 31, 13, 190, 166, 141, 53, 191, 204, 31, 205, 190, 143, 61, 132, 62, 194, 66, 6, 62, 171, 105, 98, 189, 169, 138, 207, 189, 39, 165, 171, 61, 175, 196, 137, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {32, 141, 82, 61, 37, 208, 175, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {144, 21, 180, 191, 76, 248, 154, 63, 196, 31, 189, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {148, 27, 50, 192, 66, 230, 41, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0092/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}