// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {206, 237, 181, 190, 28, 163, 47, 190, 73, 142, 151, 62, 51, 89, 208, 190, 71, 206, 137, 190, 52, 155, 7, 191, 178, 180, 148, 62, 35, 183, 31, 61, 232, 200, 219, 190, 204, 19, 218, 190, 27, 148, 65, 63, 130, 200, 66, 191, 201, 142, 18, 62, 152, 64, 10, 63, 206, 58, 188, 190, 153, 200, 203, 62, 92, 71, 5, 63, 132, 11, 156, 190, 65, 197, 90, 191, 69, 132, 190, 61, 233, 119, 32, 62, 16, 218, 249, 190, 108, 238, 75, 63, 28, 8, 182, 62, 248, 76, 51, 62, 144, 213, 175, 62, 93, 200, 166, 61, 168, 97, 209, 189, 124, 149, 139, 190, 1, 170, 75, 63, 92, 197, 135, 61, 94, 87, 69, 191, 160, 230, 130, 190, 229, 65, 15, 62, 110, 164, 118, 63, 239, 247, 41, 191, 19, 112, 188, 62, 19, 187, 16, 191, 57, 121, 190, 189, 158, 223, 156, 61, 227, 242, 208, 189, 235, 72, 140, 188, 45, 174, 67, 190, 99, 149, 7, 63, 21, 201, 38, 62, 10, 224, 56, 61, 188, 236, 92, 191, 149, 155, 212, 62, 101, 64, 91, 63, 253, 255, 73, 62, 153, 163, 168, 61, 153, 136, 10, 63, 239, 236, 213, 62, 100, 211, 183, 62, 91, 139, 48, 63, 247, 238, 148, 190, 41, 254, 193, 190, 114, 15, 128, 62, 245, 162, 48, 63, 16, 184, 21, 189, 190, 201, 185, 62, 238, 62, 6, 191, 40, 145, 0, 191, 173, 25, 187, 189, 239, 22, 129, 189, 154, 1, 238, 188, 249, 241, 191, 62, 131, 206, 58, 62, 235, 234, 114, 190, 103, 156, 6, 62, 230, 107, 93, 63, 105, 6, 216, 61, 33, 231, 157, 190, 107, 29, 17, 191, 159, 225, 193, 62, 252, 74, 167, 189, 197, 9, 152, 62, 130, 29, 40, 61, 211, 39, 89, 190, 96, 166, 143, 62, 20, 216, 0, 191, 230, 2, 88, 190, 179, 202, 9, 63, 239, 167, 210, 61, 74, 34, 43, 63, 28, 13, 53, 191, 60, 68, 56, 190, 234, 214, 141, 62, 72, 36, 138, 190, 215, 34, 19, 191, 114, 145, 81, 189, 132, 100, 20, 191, 10, 94, 128, 62, 241, 253, 17, 191, 83, 193, 69, 191, 107, 12, 250, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 206, 13, 191, 150, 152, 252, 189, 55, 230, 102, 190, 96, 113, 149, 190, 104, 111, 9, 61, 141, 39, 225, 62, 208, 254, 101, 62, 120, 94, 134, 62, 45, 238, 117, 190, 30, 247, 106, 62, 128, 209, 254, 62, 68, 46, 132, 62, 163, 150, 23, 61, 165, 200, 228, 190, 180, 175, 221, 190, 35, 18, 101, 189, 191, 145, 179, 62, 181, 46, 128, 190, 200, 193, 179, 62, 48, 37, 151, 61, 84, 185, 12, 63, 42, 85, 242, 62, 255, 59, 223, 62, 134, 165, 29, 62, 15, 60, 67, 190, 79, 246, 41, 63, 70, 102, 183, 190, 17, 179, 233, 62, 95, 121, 69, 62, 200, 144, 227, 62, 57, 21, 206, 61, 247, 192, 224, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 78, 154, 61, 206, 79, 252, 187, 226, 30, 42, 61, 143, 139, 128, 62, 182, 118, 76, 59, 36, 121, 125, 62, 221, 171, 115, 190, 36, 213, 9, 189, 48, 134, 160, 189, 154, 104, 5, 189, 57, 112, 80, 61, 77, 28, 125, 62, 118, 108, 161, 62, 237, 114, 160, 61, 146, 153, 48, 190, 75, 212, 4, 62, 126, 127, 1, 190, 8, 73, 96, 190, 102, 87, 75, 61, 30, 131, 202, 61, 78, 22, 211, 59, 187, 185, 127, 189, 241, 10, 42, 61, 87, 0, 202, 59, 36, 124, 145, 61, 60, 213, 174, 61, 101, 11, 3, 189, 179, 58, 190, 188, 3, 159, 191, 61, 12, 33, 49, 62, 150, 223, 161, 62, 108, 234, 152, 190, 165, 42, 217, 189, 155, 21, 19, 62, 236, 6, 121, 189, 21, 161, 125, 61, 63, 107, 6, 189, 85, 36, 122, 190, 220, 57, 189, 189, 177, 2, 2, 190, 196, 154, 130, 190, 98, 7, 140, 61, 135, 161, 7, 188, 199, 243, 121, 190, 52, 183, 184, 60, 172, 133, 44, 62, 116, 160, 169, 188, 144, 143, 16, 62, 63, 173, 49, 62, 40, 151, 217, 186, 219, 178, 169, 189, 124, 45, 92, 190, 146, 14, 32, 190, 61, 247, 211, 61, 176, 3, 197, 188, 253, 124, 129, 190, 8, 154, 240, 185, 196, 174, 136, 61, 102, 121, 28, 190, 78, 84, 22, 190, 49, 96, 147, 61, 151, 76, 85, 190, 12, 220, 116, 62, 219, 17, 199, 189, 191, 74, 95, 62, 234, 11, 10, 59, 95, 83, 36, 62, 117, 208, 94, 62, 188, 22, 1, 62, 89, 162, 105, 188, 156, 119, 36, 61, 27, 212, 103, 62, 71, 115, 133, 62, 46, 116, 64, 190, 157, 107, 29, 62, 10, 12, 141, 62, 246, 84, 219, 62, 80, 216, 44, 61, 165, 220, 184, 62, 47, 42, 230, 189, 31, 66, 161, 189, 122, 95, 17, 62, 155, 77, 31, 62, 178, 101, 172, 62, 73, 150, 63, 61, 11, 215, 165, 60, 55, 159, 8, 62, 31, 125, 139, 62, 185, 255, 139, 188, 252, 160, 156, 60, 8, 89, 190, 61, 42, 11, 180, 189, 14, 107, 148, 189, 252, 114, 147, 184, 146, 125, 148, 189, 6, 51, 167, 190, 94, 122, 248, 189, 252, 217, 80, 190, 18, 179, 218, 189, 13, 109, 238, 188, 223, 42, 11, 188, 237, 98, 42, 62, 124, 242, 150, 61, 102, 140, 135, 190, 92, 152, 199, 190, 113, 247, 190, 60, 70, 240, 127, 189, 146, 115, 59, 61, 93, 31, 176, 61, 232, 208, 14, 62, 216, 86, 135, 190, 100, 122, 14, 190, 176, 153, 159, 62, 246, 251, 224, 189, 26, 102, 72, 62, 84, 13, 252, 189, 110, 118, 29, 61, 100, 132, 245, 188, 192, 42, 247, 189, 42, 71, 76, 190, 80, 170, 140, 62, 177, 110, 239, 61, 6, 114, 192, 187, 107, 44, 26, 61, 240, 49, 90, 60, 109, 234, 164, 189, 23, 80, 179, 61, 72, 52, 152, 61, 192, 150, 160, 190, 19, 32, 91, 190, 154, 41, 10, 61, 192, 225, 178, 191, 184, 213, 158, 189, 105, 253, 49, 191, 213, 191, 143, 62, 233, 230, 251, 61, 161, 28, 213, 190, 194, 137, 235, 61, 56, 0, 63, 190, 21, 139, 141, 191, 64, 108, 164, 190, 196, 198, 57, 189, 156, 238, 187, 189, 58, 243, 200, 190, 182, 196, 121, 62, 36, 120, 148, 190, 37, 80, 100, 190, 209, 88, 185, 190, 248, 159, 37, 191, 232, 127, 105, 62, 242, 34, 248, 190, 71, 22, 86, 60, 79, 155, 177, 61, 34, 84, 15, 62, 239, 176, 27, 190, 67, 144, 105, 62, 143, 200, 135, 189, 241, 195, 46, 191, 189, 180, 138, 62, 234, 26, 197, 62, 149, 86, 79, 62, 31, 242, 81, 62, 94, 22, 27, 190, 98, 51, 169, 60, 237, 148, 104, 189, 147, 182, 141, 62, 44, 191, 136, 61, 233, 230, 135, 190, 70, 53, 115, 61, 38, 35, 187, 59, 177, 253, 235, 60, 102, 96, 72, 62, 63, 127, 7, 191, 87, 237, 83, 61, 74, 13, 207, 190, 54, 167, 167, 62, 6, 80, 130, 62, 219, 30, 185, 62, 217, 142, 229, 189, 43, 220, 153, 61, 106, 124, 29, 62, 40, 107, 58, 61, 53, 97, 193, 61, 183, 31, 228, 189, 17, 115, 212, 190, 26, 57, 6, 190, 14, 156, 49, 61, 54, 148, 91, 62, 19, 97, 239, 189, 79, 49, 133, 60, 191, 93, 142, 190, 236, 2, 251, 189, 143, 109, 71, 189, 27, 38, 55, 190, 61, 179, 175, 190, 44, 27, 196, 189, 29, 209, 58, 189, 5, 163, 7, 62, 81, 1, 181, 187, 108, 5, 237, 189, 33, 43, 115, 190, 212, 22, 32, 62, 116, 96, 125, 189, 221, 121, 134, 59, 20, 167, 222, 189, 111, 115, 11, 188, 24, 101, 218, 188, 144, 130, 80, 61, 147, 114, 137, 62, 138, 13, 158, 190, 213, 17, 71, 62, 127, 74, 75, 62, 109, 203, 7, 61, 2, 237, 132, 62, 53, 84, 125, 62, 248, 101, 150, 189, 219, 173, 169, 60, 1, 114, 59, 61, 107, 120, 155, 189, 170, 101, 192, 61, 111, 95, 42, 62, 194, 213, 98, 187, 75, 171, 139, 62, 80, 176, 91, 189, 214, 83, 32, 190, 191, 229, 194, 61, 160, 156, 129, 190, 43, 200, 103, 62, 148, 144, 51, 190, 202, 0, 226, 61, 24, 244, 227, 61, 149, 42, 135, 190, 205, 233, 149, 62, 161, 119, 140, 190, 242, 232, 221, 61, 153, 100, 203, 61, 48, 116, 150, 190, 35, 140, 33, 190, 231, 99, 29, 62, 71, 129, 130, 62, 85, 48, 234, 62, 130, 139, 195, 62, 103, 113, 146, 190, 176, 149, 110, 62, 202, 108, 158, 187, 39, 94, 69, 62, 244, 217, 179, 62, 162, 86, 216, 189, 5, 10, 236, 190, 219, 204, 158, 61, 128, 148, 164, 190, 14, 254, 157, 61, 25, 230, 203, 190, 104, 99, 20, 190, 44, 197, 209, 190, 28, 227, 132, 60, 122, 221, 12, 190, 156, 11, 129, 190, 4, 116, 126, 190, 234, 137, 137, 191, 24, 15, 88, 188, 90, 39, 87, 191, 190, 78, 48, 189, 200, 124, 122, 62, 161, 194, 139, 190, 157, 79, 115, 188, 207, 216, 29, 62, 182, 55, 83, 191, 170, 65, 84, 59, 226, 47, 10, 62, 28, 241, 168, 61, 105, 229, 64, 190, 112, 236, 216, 59, 132, 129, 218, 189, 12, 55, 51, 62, 180, 226, 222, 189, 243, 88, 94, 190, 167, 166, 5, 62, 21, 35, 129, 190, 156, 248, 209, 61, 139, 166, 89, 62, 104, 241, 41, 61, 182, 14, 123, 61, 41, 172, 15, 62, 110, 197, 249, 61, 56, 206, 6, 190, 89, 87, 227, 61, 53, 26, 235, 61, 224, 61, 238, 60, 99, 36, 30, 62, 153, 34, 111, 190, 181, 212, 77, 62, 128, 187, 143, 190, 220, 24, 85, 62, 254, 230, 134, 189, 169, 97, 86, 188, 129, 84, 140, 60, 105, 157, 203, 190, 36, 238, 248, 61, 250, 29, 19, 62, 137, 169, 8, 191, 221, 217, 89, 60, 111, 137, 238, 61, 66, 85, 132, 62, 53, 196, 213, 189, 58, 131, 187, 62, 83, 20, 68, 190, 223, 228, 177, 60, 132, 202, 48, 61, 124, 239, 177, 61, 30, 171, 34, 62, 131, 33, 79, 189, 102, 207, 39, 191, 182, 110, 25, 62, 148, 121, 132, 189, 119, 181, 130, 62, 118, 150, 157, 190, 70, 104, 34, 62, 215, 125, 46, 191, 241, 34, 65, 189, 90, 97, 140, 188, 105, 70, 24, 62, 63, 116, 225, 189, 35, 17, 106, 62, 31, 87, 21, 187, 72, 88, 66, 62, 149, 128, 239, 189, 68, 181, 53, 188, 13, 197, 4, 62, 248, 122, 171, 61, 16, 50, 150, 61, 120, 165, 25, 62, 250, 170, 110, 190, 98, 93, 189, 60, 105, 174, 138, 190, 157, 67, 130, 62, 222, 214, 222, 188, 83, 183, 112, 61, 112, 57, 221, 61, 43, 18, 63, 62, 27, 173, 22, 62, 98, 45, 0, 62, 212, 254, 18, 62, 195, 195, 55, 62, 77, 123, 190, 189, 35, 144, 150, 62, 122, 71, 59, 61, 195, 193, 139, 62, 17, 120, 83, 190, 231, 229, 190, 60, 8, 152, 52, 190, 223, 58, 238, 61, 179, 191, 197, 61, 148, 145, 59, 61, 212, 206, 111, 190, 103, 219, 166, 61, 58, 93, 75, 190, 49, 153, 96, 62, 251, 11, 220, 58, 44, 23, 1, 61, 194, 176, 237, 59, 10, 133, 178, 189, 255, 158, 91, 62, 67, 238, 95, 62, 150, 194, 250, 190, 249, 22, 199, 188, 142, 206, 87, 190, 178, 224, 145, 62, 132, 189, 105, 62, 48, 236, 47, 62, 51, 59, 180, 189, 161, 119, 194, 188, 193, 116, 186, 189, 231, 157, 139, 62, 67, 60, 13, 61, 54, 27, 199, 61, 246, 5, 166, 190, 77, 143, 171, 60, 122, 36, 136, 190, 166, 97, 166, 62, 204, 122, 212, 190, 81, 74, 54, 189, 239, 83, 254, 189, 100, 12, 8, 190, 156, 37, 135, 61, 140, 168, 120, 190, 254, 65, 9, 62, 252, 160, 150, 191, 101, 125, 52, 189, 163, 40, 202, 190, 108, 216, 131, 62, 251, 158, 24, 62, 3, 64, 20, 190, 57, 224, 11, 62, 238, 98, 130, 62, 171, 255, 58, 191, 235, 118, 140, 62, 5, 181, 34, 62, 150, 193, 196, 62, 158, 31, 198, 190, 139, 214, 128, 62, 151, 5, 30, 190, 160, 32, 93, 62, 144, 219, 42, 189, 142, 115, 229, 60, 192, 130, 69, 61, 57, 180, 194, 188, 136, 237, 219, 189, 141, 178, 125, 61, 80, 38, 63, 62, 138, 83, 190, 189, 49, 248, 14, 188, 27, 253, 238, 62, 20, 57, 140, 189, 121, 90, 28, 62, 13, 170, 27, 62, 254, 50, 244, 60, 56, 236, 22, 61, 223, 76, 96, 190, 101, 157, 32, 189, 193, 231, 212, 189, 57, 59, 121, 62, 73, 246, 42, 62, 76, 4, 80, 190, 213, 170, 166, 61, 51, 30, 178, 190, 153, 172, 195, 188, 247, 56, 0, 189, 250, 68, 248, 190, 190, 247, 234, 189, 25, 227, 206, 189, 105, 199, 101, 62, 254, 154, 186, 61, 162, 172, 158, 62, 48, 149, 245, 189, 39, 156, 129, 62, 106, 53, 143, 61, 82, 10, 141, 61, 158, 211, 78, 62, 221, 176, 70, 62, 53, 62, 234, 190, 78, 33, 164, 61, 18, 200, 177, 189, 159, 85, 48, 62, 163, 173, 229, 190, 179, 251, 0, 62, 214, 38, 166, 190, 125, 95, 27, 61, 134, 180, 132, 189, 199, 156, 255, 189, 83, 87, 59, 189, 82, 114, 169, 61, 179, 217, 154, 60, 33, 140, 49, 188, 150, 125, 48, 60, 247, 67, 208, 59, 9, 226, 183, 61, 26, 59, 225, 189, 193, 204, 209, 61, 241, 231, 216, 189, 40, 160, 129, 189, 20, 132, 174, 61, 174, 74, 148, 189, 34, 24, 248, 188, 45, 169, 186, 188, 1, 52, 44, 190, 196, 251, 188, 189, 146, 144, 37, 190, 123, 6, 72, 61, 107, 58, 85, 190, 151, 203, 190, 189, 40, 87, 3, 190, 228, 238, 248, 189, 58, 55, 20, 60, 21, 85, 227, 60, 231, 28, 242, 188, 158, 42, 70, 61, 186, 224, 39, 190, 79, 6, 5, 62, 8, 94, 166, 189, 247, 91, 91, 61, 55, 90, 141, 62, 245, 29, 132, 190, 139, 35, 32, 189, 165, 172, 147, 189, 85, 191, 63, 62, 128, 151, 176, 61, 65, 81, 251, 61, 98, 104, 52, 190, 109, 80, 99, 188, 227, 127, 98, 62, 68, 114, 133, 62, 120, 160, 224, 190, 82, 123, 129, 61, 85, 156, 105, 189, 168, 168, 136, 62, 208, 102, 60, 62, 158, 177, 58, 188, 233, 143, 76, 188, 191, 162, 175, 61, 121, 127, 210, 188, 232, 98, 132, 62, 176, 34, 172, 61, 60, 19, 116, 186, 114, 145, 89, 61, 233, 31, 139, 62, 50, 203, 95, 188, 89, 86, 247, 61, 20, 199, 223, 60, 107, 158, 92, 62, 14, 29, 117, 190, 25, 140, 172, 62, 99, 186, 22, 190, 51, 51, 204, 189, 137, 50, 137, 61, 203, 201, 26, 190, 251, 29, 167, 61, 153, 219, 165, 60, 26, 98, 37, 62, 244, 113, 9, 190, 190, 86, 0, 62, 154, 174, 13, 189, 61, 202, 241, 189, 162, 145, 242, 189, 89, 219, 21, 190, 29, 100, 109, 61, 194, 41, 37, 61, 105, 69, 88, 189, 196, 49, 69, 185, 204, 10, 174, 60, 19, 0, 146, 188, 69, 23, 163, 189, 172, 21, 16, 62, 203, 243, 54, 189, 119, 159, 223, 189, 198, 17, 255, 61, 240, 7, 27, 190, 161, 189, 92, 188, 124, 159, 41, 190, 85, 11, 33, 190, 43, 227, 139, 189, 206, 204, 127, 187, 20, 192, 35, 62, 104, 168, 132, 189, 62, 223, 212, 188, 40, 26, 92, 190, 44, 210, 163, 189, 45, 6, 140, 61, 204, 146, 251, 189, 29, 86, 21, 190, 199, 248, 74, 62, 154, 94, 40, 190, 69, 77, 97, 190, 140, 138, 147, 189, 59, 125, 2, 62, 123, 225, 24, 190, 188, 11, 23, 190, 243, 57, 248, 189, 166, 50, 138, 62, 70, 25, 225, 189, 80, 130, 96, 190, 21, 215, 11, 190, 115, 220, 133, 190, 145, 215, 143, 61, 23, 28, 187, 61, 59, 59, 145, 61, 58, 37, 59, 60, 75, 103, 81, 190, 172, 27, 95, 62, 98, 247, 27, 62, 54, 48, 216, 189, 188, 89, 228, 189, 5, 41, 29, 187, 100, 195, 204, 61, 250, 147, 155, 62, 202, 61, 56, 62, 213, 55, 88, 190, 147, 242, 224, 61, 242, 0, 56, 62, 13, 215, 49, 62, 201, 14, 211, 189, 83, 25, 9, 61, 222, 102, 108, 190, 12, 172, 138, 60, 212, 5, 132, 62, 93, 232, 170, 189, 110, 24, 200, 188, 228, 227, 8, 189, 113, 62, 177, 188, 171, 127, 175, 189, 56, 135, 142, 61, 49, 223, 141, 60, 201, 91, 24, 62, 92, 0, 141, 62, 117, 105, 138, 61, 177, 253, 11, 190, 106, 245, 250, 60, 197, 198, 210, 189, 238, 96, 137, 188, 24, 234, 163, 60, 97, 94, 142, 189, 111, 123, 61, 189, 23, 14, 132, 61, 104, 218, 47, 60, 115, 235, 192, 189, 143, 230, 191, 61, 148, 35, 214, 61, 186, 4, 183, 62, 226, 105, 4, 190, 56, 20, 24, 189, 89, 52, 166, 61, 123, 110, 174, 189, 252, 133, 69, 60, 224, 93, 48, 190, 27, 171, 180, 189, 47, 23, 159, 189, 8, 98, 39, 190, 61, 128, 34, 190, 57, 85, 15, 61, 27, 67, 12, 189, 100, 172, 209, 187, 54, 164, 188, 61, 28, 243, 237, 189, 124, 118, 140, 189, 180, 72, 5, 190, 167, 138, 239, 61, 219, 182, 45, 61, 92, 45, 32, 61, 239, 119, 50, 189, 49, 20, 152, 61, 178, 103, 2, 190, 222, 60, 255, 61, 196, 112, 17, 190, 54, 139, 232, 61, 64, 214, 131, 189, 54, 23, 2, 62, 1, 156, 167, 59, 243, 245, 68, 189, 44, 40, 221, 189, 203, 203, 255, 188, 123, 123, 18, 61, 96, 143, 141, 61, 81, 144, 152, 61, 77, 4, 18, 62, 154, 225, 59, 61, 168, 191, 74, 61, 195, 5, 46, 62, 40, 217, 38, 62, 234, 3, 181, 62, 244, 149, 33, 190, 33, 146, 25, 62, 153, 80, 20, 62, 145, 53, 155, 62, 210, 167, 5, 190, 191, 73, 162, 62, 252, 213, 83, 59, 62, 55, 130, 188, 37, 163, 13, 190, 89, 43, 10, 61, 122, 101, 157, 62, 45, 54, 24, 188, 83, 23, 25, 190, 193, 39, 43, 62, 214, 31, 35, 62, 126, 82, 230, 59, 120, 247, 0, 60, 65, 158, 194, 60, 232, 58, 253, 189, 71, 151, 80, 62, 149, 61, 15, 62, 91, 198, 82, 61, 55, 77, 178, 190, 152, 198, 200, 190, 203, 101, 75, 190, 203, 196, 76, 62, 8, 16, 66, 190, 193, 95, 84, 62, 215, 211, 207, 60, 57, 104, 100, 189, 134, 125, 129, 61, 127, 174, 217, 190, 80, 16, 38, 62, 254, 196, 34, 190, 225, 141, 76, 190, 236, 92, 130, 62, 136, 249, 186, 189, 65, 140, 14, 191, 230, 39, 169, 190, 235, 43, 27, 62, 184, 189, 50, 190, 172, 217, 210, 61, 135, 102, 146, 190, 188, 124, 121, 189, 159, 137, 141, 61, 7, 211, 34, 62, 22, 17, 159, 190, 128, 253, 30, 62, 145, 147, 28, 62, 174, 93, 153, 189, 112, 144, 47, 190, 107, 104, 78, 62, 66, 216, 152, 61, 56, 182, 245, 62, 8, 143, 30, 62, 84, 18, 179, 189, 133, 108, 86, 190, 153, 181, 60, 189, 187, 37, 161, 190, 46, 69, 3, 60, 55, 82, 55, 190, 63, 210, 23, 61, 145, 200, 21, 62, 160, 42, 107, 190, 239, 199, 179, 60, 150, 227, 154, 189, 167, 57, 203, 190, 141, 37, 243, 62, 198, 96, 237, 189, 115, 104, 219, 190, 118, 168, 39, 190, 108, 87, 61, 62, 86, 36, 146, 190, 19, 46, 148, 61, 222, 131, 94, 190, 242, 234, 148, 189, 228, 30, 29, 62, 68, 149, 44, 190, 156, 18, 107, 190, 153, 19, 138, 61, 60, 23, 115, 189, 205, 230, 224, 61, 238, 105, 242, 188, 120, 148, 188, 62, 9, 163, 32, 190, 217, 191, 192, 62, 238, 142, 38, 62, 248, 209, 46, 62, 28, 158, 205, 189, 222, 7, 206, 61, 230, 251, 220, 61, 113, 121, 14, 62, 198, 236, 44, 61, 49, 212, 195, 188, 100, 27, 8, 190, 178, 38, 44, 62, 213, 103, 137, 189, 105, 173, 18, 190, 47, 67, 171, 189, 21, 45, 200, 189, 165, 62, 20, 190, 143, 163, 173, 58, 186, 33, 14, 188, 160, 133, 12, 190, 38, 162, 46, 190, 1, 32, 127, 188, 120, 182, 168, 189, 11, 55, 9, 189, 218, 176, 49, 190, 137, 65, 228, 59, 1, 156, 70, 61, 120, 168, 252, 59, 39, 120, 39, 190, 251, 147, 40, 190, 54, 142, 186, 60, 181, 55, 30, 190, 1, 152, 41, 60, 234, 235, 197, 60, 197, 235, 45, 190, 73, 219, 8, 190, 177, 38, 148, 190, 168, 9, 188, 189, 184, 17, 30, 190, 63, 81, 55, 62, 93, 23, 153, 189, 131, 251, 176, 61, 154, 163, 29, 190, 176, 1, 196, 188, 174, 209, 63, 61, 40, 81, 129, 61, 210, 196, 219, 61, 199, 203, 82, 61, 186, 131, 137, 189, 83, 34, 53, 189, 18, 127, 95, 190, 15, 229, 123, 62, 233, 50, 186, 189, 100, 103, 63, 62, 26, 7, 70, 62, 171, 249, 58, 61, 189, 210, 16, 189, 166, 217, 156, 59, 212, 3, 227, 189, 90, 181, 79, 189, 22, 167, 50, 62, 151, 137, 10, 190, 105, 71, 136, 61, 136, 9, 13, 62, 184, 218, 112, 189, 17, 234, 128, 60, 1, 5, 254, 189, 185, 248, 236, 60, 129, 130, 170, 61, 78, 35, 122, 190, 165, 41, 64, 61, 179, 232, 131, 189, 8, 158, 194, 61, 129, 166, 195, 189, 106, 156, 48, 61, 250, 133, 207, 61, 245, 51, 70, 189, 17, 123, 23, 190, 4, 121, 51, 187, 140, 224, 229, 190, 86, 172, 187, 61, 66, 64, 35, 190, 182, 158, 94, 189, 149, 188, 158, 62, 91, 15, 138, 188, 128, 177, 244, 61, 193, 38, 93, 62, 114, 184, 36, 62, 178, 41, 100, 62, 71, 43, 53, 62, 175, 84, 10, 61, 90, 110, 163, 61, 233, 13, 109, 62, 34, 32, 151, 188, 98, 188, 55, 62, 205, 53, 46, 189, 163, 29, 4, 190, 140, 234, 204, 59, 82, 33, 2, 190, 60, 96, 232, 189, 57, 52, 8, 190, 82, 167, 196, 62, 219, 236, 137, 190, 80, 7, 134, 62, 81, 40, 240, 189, 69, 180, 88, 62, 234, 235, 81, 62, 202, 5, 93, 190, 115, 17, 157, 189, 168, 212, 55, 184, 202, 132, 38, 190, 129, 110, 176, 62, 203, 50, 153, 60, 119, 80, 220, 190, 216, 192, 9, 190, 13, 8, 169, 62, 107, 1, 113, 190, 144, 33, 16, 62, 112, 238, 133, 190, 249, 189, 165, 61, 105, 156, 127, 189, 97, 210, 23, 62, 193, 215, 171, 59, 34, 187, 146, 61, 179, 133, 7, 59, 14, 124, 249, 189, 15, 42, 85, 190, 133, 224, 211, 62, 37, 124, 59, 190, 172, 57, 182, 62, 217, 18, 193, 61, 212, 51, 106, 61, 253, 45, 11, 189, 131, 18, 72, 190, 210, 81, 62, 62, 115, 126, 48, 190, 37, 35, 55, 62, 139, 45, 9, 62, 147, 167, 27, 61, 80, 133, 44, 189, 54, 62, 32, 62, 140, 81, 36, 59, 2, 43, 0, 62, 252, 129, 155, 190, 135, 226, 162, 188, 9, 73, 42, 190, 131, 7, 238, 61, 252, 145, 12, 62, 155, 235, 68, 60, 38, 47, 69, 190, 46, 127, 88, 62, 219, 187, 189, 186, 114, 126, 78, 62, 138, 101, 90, 61, 77, 90, 55, 62, 126, 10, 37, 61, 31, 91, 242, 61, 237, 156, 143, 190, 224, 31, 108, 62, 155, 58, 212, 189, 148, 190, 65, 189, 238, 251, 71, 61, 136, 133, 79, 61, 127, 125, 192, 190, 239, 180, 3, 190, 227, 102, 141, 61, 27, 182, 98, 190, 96, 121, 176, 189, 134, 21, 205, 186, 166, 211, 248, 188, 167, 75, 246, 61, 86, 114, 253, 190, 222, 123, 224, 61, 67, 48, 210, 60, 4, 78, 168, 59, 78, 136, 143, 62, 86, 161, 38, 62, 193, 31, 17, 191, 150, 237, 169, 189, 18, 41, 216, 60, 20, 91, 55, 190, 168, 115, 133, 62, 67, 182, 234, 189, 151, 109, 251, 189, 215, 123, 2, 62, 172, 183, 31, 188, 24, 241, 28, 189, 16, 107, 43, 189, 109, 64, 17, 62, 221, 209, 241, 60, 129, 223, 99, 190, 117, 65, 115, 62, 18, 145, 81, 189, 34, 58, 129, 62, 111, 31, 138, 60, 54, 207, 7, 62, 126, 8, 146, 190, 132, 205, 3, 188, 60, 115, 20, 190, 144, 60, 11, 190, 238, 137, 41, 186, 222, 11, 219, 188, 11, 89, 56, 190, 233, 237, 88, 190, 12, 92, 117, 60, 67, 244, 18, 62, 127, 37, 137, 60, 245, 156, 241, 61, 139, 247, 28, 190, 145, 250, 206, 189, 145, 109, 163, 61, 119, 212, 175, 62, 148, 125, 238, 189, 53, 38, 9, 62, 224, 204, 249, 189, 198, 3, 77, 61, 195, 62, 221, 61, 59, 235, 21, 62, 100, 150, 183, 190, 110, 127, 206, 61, 73, 75, 30, 190, 82, 198, 226, 189, 63, 148, 102, 190, 164, 115, 111, 62, 68, 202, 227, 188, 61, 68, 43, 62, 207, 121, 57, 189, 123, 164, 191, 61, 185, 22, 12, 62, 45, 34, 50, 62, 125, 184, 18, 62, 54, 243, 15, 62, 203, 47, 63, 190, 118, 140, 28, 190, 126, 176, 104, 189, 199, 198, 84, 189, 216, 20, 50, 190, 222, 196, 87, 189, 75, 85, 92, 188, 45, 29, 235, 61, 207, 48, 203, 188, 113, 56, 253, 188, 137, 183, 46, 188, 247, 219, 219, 189, 60, 182, 39, 62, 39, 71, 210, 61, 132, 84, 89, 190, 221, 70, 100, 61, 22, 169, 63, 190, 222, 52, 69, 61, 3, 156, 145, 190, 52, 49, 172, 189, 73, 48, 146, 189, 188, 36, 237, 61, 0, 142, 14, 190, 17, 203, 133, 189, 223, 101, 26, 190, 27, 162, 212, 189, 155, 21, 232, 61, 182, 163, 67, 61, 116, 19, 47, 190, 48, 77, 24, 62, 27, 89, 2, 61, 92, 120, 91, 61, 42, 99, 175, 61, 185, 12, 189, 57, 247, 86, 228, 189, 176, 230, 213, 189, 225, 89, 195, 58, 249, 0, 230, 61, 172, 216, 59, 190, 218, 20, 168, 61, 247, 255, 105, 187, 208, 14, 192, 61, 124, 109, 77, 188, 172, 150, 240, 189, 70, 138, 254, 187, 163, 110, 227, 189, 2, 244, 183, 189, 241, 11, 23, 61, 40, 15, 244, 189, 252, 15, 14, 189, 113, 141, 24, 62, 60, 85, 21, 188, 250, 89, 182, 189, 148, 227, 152, 60, 161, 70, 152, 61, 175, 134, 146, 61, 176, 122, 83, 189, 0, 211, 106, 189, 174, 76, 106, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {149, 118, 14, 62, 123, 247, 28, 60, 88, 136, 189, 189, 105, 135, 110, 61, 151, 118, 128, 62, 115, 182, 99, 62, 68, 196, 132, 62, 26, 104, 45, 62, 11, 87, 43, 62, 98, 113, 113, 62, 139, 17, 218, 61, 154, 36, 105, 62, 6, 252, 193, 188, 42, 48, 122, 61, 60, 96, 237, 61, 141, 157, 56, 61, 69, 250, 183, 189, 163, 30, 42, 189, 238, 5, 3, 62, 127, 97, 164, 60, 160, 98, 180, 189, 162, 19, 83, 62, 121, 159, 22, 62, 190, 226, 130, 188, 205, 175, 151, 61, 210, 166, 129, 62, 76, 64, 75, 61, 132, 61, 255, 61, 230, 168, 50, 62, 26, 205, 19, 62, 15, 41, 237, 187, 183, 114, 161, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {93, 8, 117, 62, 194, 208, 69, 62, 72, 240, 67, 62, 40, 246, 69, 61, 195, 98, 96, 63, 112, 92, 124, 190, 215, 195, 197, 60, 57, 187, 234, 190, 186, 66, 61, 63, 202, 179, 250, 190, 162, 234, 85, 190, 86, 162, 177, 190, 41, 150, 14, 63, 97, 252, 183, 190, 90, 156, 221, 60, 217, 97, 99, 190, 23, 18, 6, 190, 221, 176, 137, 190, 25, 63, 55, 190, 92, 86, 255, 189, 57, 106, 65, 62, 214, 135, 224, 62, 90, 62, 181, 62, 85, 217, 167, 61, 35, 126, 219, 61, 76, 123, 229, 188, 199, 212, 157, 62, 60, 233, 104, 190, 195, 134, 11, 62, 120, 161, 52, 62, 120, 215, 57, 189, 59, 171, 152, 60, 63, 219, 79, 61, 156, 4, 70, 62, 83, 79, 220, 61, 13, 93, 42, 190, 50, 155, 176, 61, 254, 66, 217, 188, 227, 119, 129, 190, 251, 132, 28, 62, 138, 101, 108, 190, 190, 255, 116, 59, 146, 48, 101, 190, 149, 165, 243, 61, 175, 102, 175, 61, 150, 91, 199, 188, 116, 87, 212, 61, 66, 184, 66, 190, 181, 154, 224, 61, 202, 137, 3, 188, 111, 62, 218, 60, 25, 52, 6, 189, 224, 25, 239, 61, 184, 189, 163, 189, 58, 24, 230, 61, 212, 31, 13, 190, 182, 163, 68, 190, 73, 202, 66, 190, 98, 127, 102, 62, 184, 144, 217, 61, 178, 75, 255, 188, 33, 52, 131, 189, 245, 121, 28, 62, 175, 200, 137, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 177, 30, 61, 109, 119, 132, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {128, 123, 149, 190, 59, 144, 77, 191, 74, 208, 25, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {115, 176, 131, 63, 148, 101, 26, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0092/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}