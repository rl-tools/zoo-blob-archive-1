// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 169, 158, 190, 11, 181, 91, 190, 249, 88, 133, 62, 195, 211, 213, 190, 153, 65, 65, 191, 246, 21, 28, 191, 81, 187, 245, 62, 227, 161, 33, 189, 23, 118, 183, 190, 78, 231, 133, 190, 27, 68, 154, 62, 228, 78, 115, 191, 30, 183, 232, 61, 38, 248, 14, 63, 21, 176, 192, 190, 233, 185, 1, 63, 247, 70, 20, 63, 134, 12, 146, 190, 15, 119, 103, 191, 222, 33, 131, 61, 207, 10, 40, 61, 71, 64, 23, 191, 9, 6, 155, 63, 49, 133, 171, 62, 44, 8, 191, 62, 51, 209, 174, 62, 43, 168, 11, 62, 249, 250, 18, 190, 138, 128, 72, 187, 215, 38, 64, 63, 43, 54, 49, 189, 45, 16, 138, 191, 159, 33, 153, 190, 240, 84, 144, 62, 12, 69, 84, 63, 218, 62, 26, 191, 28, 36, 192, 62, 121, 105, 50, 191, 2, 36, 29, 190, 158, 223, 156, 61, 227, 242, 208, 189, 235, 72, 140, 188, 117, 173, 87, 62, 56, 235, 87, 63, 146, 225, 96, 62, 197, 112, 70, 189, 68, 12, 136, 191, 44, 67, 189, 62, 194, 120, 104, 63, 89, 39, 183, 62, 169, 11, 168, 61, 235, 139, 89, 63, 190, 0, 245, 62, 76, 46, 118, 62, 107, 64, 28, 63, 192, 143, 12, 191, 2, 36, 215, 190, 1, 211, 188, 62, 144, 116, 78, 63, 161, 77, 184, 189, 203, 171, 172, 62, 217, 212, 124, 191, 215, 176, 57, 191, 2, 157, 56, 190, 248, 134, 18, 61, 193, 156, 31, 189, 179, 125, 168, 62, 135, 149, 94, 190, 222, 219, 139, 190, 131, 73, 100, 62, 29, 19, 136, 63, 221, 165, 92, 62, 96, 167, 130, 190, 21, 106, 16, 191, 109, 39, 198, 62, 144, 235, 31, 190, 41, 79, 199, 62, 157, 62, 74, 61, 37, 217, 100, 190, 169, 74, 200, 187, 68, 177, 254, 190, 13, 54, 109, 190, 162, 161, 72, 63, 144, 67, 44, 62, 115, 147, 42, 63, 81, 171, 108, 191, 209, 240, 82, 190, 221, 88, 96, 62, 29, 4, 110, 191, 77, 223, 83, 191, 170, 130, 132, 189, 20, 79, 15, 191, 135, 4, 123, 62, 164, 22, 70, 191, 147, 55, 72, 191, 156, 109, 244, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 72, 16, 191, 73, 5, 86, 190, 237, 146, 181, 190, 212, 72, 187, 190, 211, 185, 206, 61, 250, 133, 201, 62, 16, 89, 54, 62, 86, 227, 72, 62, 202, 204, 107, 190, 52, 38, 168, 61, 149, 32, 233, 62, 200, 61, 117, 61, 208, 28, 144, 60, 165, 200, 228, 190, 128, 128, 190, 190, 122, 246, 248, 60, 209, 91, 72, 62, 96, 151, 125, 190, 247, 151, 221, 62, 10, 125, 250, 60, 218, 29, 10, 63, 205, 232, 226, 62, 65, 71, 204, 62, 22, 197, 15, 61, 209, 233, 100, 190, 84, 216, 12, 63, 168, 145, 230, 190, 241, 161, 227, 62, 83, 66, 153, 61, 54, 35, 234, 62, 33, 189, 173, 60, 216, 134, 185, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 118, 163, 61, 48, 12, 19, 186, 195, 149, 149, 61, 97, 240, 122, 62, 200, 185, 111, 59, 121, 239, 141, 62, 194, 223, 52, 190, 211, 234, 162, 188, 247, 134, 223, 190, 243, 38, 168, 189, 221, 71, 9, 62, 173, 24, 138, 62, 10, 227, 186, 62, 237, 114, 160, 61, 124, 14, 89, 190, 194, 92, 83, 62, 217, 22, 135, 190, 0, 188, 205, 190, 149, 18, 145, 61, 125, 97, 79, 62, 149, 144, 81, 61, 205, 57, 182, 60, 250, 120, 144, 61, 98, 156, 200, 190, 85, 250, 185, 61, 244, 81, 224, 61, 126, 160, 67, 189, 244, 121, 79, 190, 13, 154, 20, 62, 146, 31, 86, 62, 120, 19, 189, 62, 156, 246, 112, 190, 181, 217, 227, 189, 71, 131, 52, 60, 236, 6, 121, 189, 21, 161, 125, 61, 63, 107, 6, 189, 179, 0, 138, 190, 79, 138, 221, 189, 43, 171, 97, 190, 240, 112, 3, 191, 62, 172, 214, 60, 182, 105, 157, 60, 199, 243, 121, 190, 21, 151, 228, 185, 172, 133, 44, 62, 245, 38, 66, 190, 150, 118, 7, 62, 149, 107, 55, 61, 0, 164, 226, 189, 19, 28, 11, 190, 21, 235, 171, 190, 180, 245, 111, 190, 21, 98, 135, 61, 14, 196, 143, 190, 106, 11, 242, 190, 184, 195, 32, 188, 155, 50, 214, 188, 102, 121, 28, 190, 167, 92, 127, 190, 84, 72, 66, 187, 174, 49, 154, 190, 163, 222, 100, 62, 25, 235, 59, 189, 3, 136, 238, 61, 176, 152, 175, 188, 217, 98, 65, 62, 145, 240, 81, 62, 218, 24, 10, 62, 60, 224, 5, 60, 50, 108, 243, 188, 251, 246, 169, 62, 226, 84, 166, 62, 57, 181, 131, 190, 144, 214, 31, 62, 184, 11, 155, 62, 255, 217, 204, 62, 80, 216, 44, 61, 207, 219, 237, 62, 120, 105, 107, 190, 13, 38, 189, 189, 105, 248, 3, 62, 225, 135, 2, 62, 222, 199, 243, 62, 152, 88, 29, 61, 10, 50, 58, 61, 129, 145, 2, 62, 28, 92, 51, 62, 237, 91, 228, 189, 134, 111, 131, 61, 203, 187, 150, 61, 152, 109, 1, 190, 162, 181, 161, 189, 173, 131, 183, 187, 215, 41, 43, 190, 94, 48, 212, 190, 48, 220, 210, 188, 215, 140, 3, 191, 166, 233, 149, 190, 94, 253, 109, 190, 250, 187, 102, 190, 93, 242, 73, 62, 195, 156, 13, 62, 46, 145, 126, 190, 238, 152, 244, 190, 55, 112, 210, 60, 50, 94, 57, 190, 198, 73, 48, 190, 163, 84, 238, 61, 232, 208, 14, 62, 99, 209, 138, 191, 253, 203, 63, 190, 173, 241, 219, 62, 86, 71, 198, 60, 30, 218, 90, 62, 205, 81, 87, 189, 221, 95, 183, 189, 74, 66, 0, 58, 250, 251, 249, 189, 67, 220, 186, 190, 124, 100, 158, 62, 24, 140, 68, 62, 102, 89, 238, 189, 190, 199, 144, 61, 212, 166, 112, 61, 180, 26, 135, 190, 196, 135, 51, 61, 95, 134, 121, 60, 11, 207, 165, 190, 185, 248, 57, 191, 154, 41, 10, 61, 107, 52, 174, 191, 67, 157, 143, 62, 68, 185, 128, 191, 117, 210, 138, 62, 223, 22, 10, 62, 121, 47, 202, 190, 98, 1, 182, 61, 101, 82, 197, 190, 18, 176, 127, 191, 205, 118, 174, 190, 196, 198, 57, 189, 117, 50, 165, 189, 12, 26, 230, 190, 228, 119, 101, 62, 48, 115, 161, 190, 212, 158, 126, 190, 214, 135, 200, 190, 21, 42, 172, 191, 214, 142, 43, 62, 12, 126, 65, 191, 150, 71, 182, 60, 69, 48, 52, 61, 112, 77, 250, 61, 239, 176, 27, 190, 6, 179, 126, 62, 116, 58, 140, 190, 29, 16, 192, 191, 113, 45, 79, 62, 97, 101, 210, 62, 54, 139, 158, 61, 229, 149, 101, 62, 238, 8, 81, 190, 147, 201, 192, 59, 246, 94, 183, 189, 229, 83, 101, 62, 82, 248, 8, 62, 11, 195, 8, 191, 15, 231, 106, 189, 99, 118, 187, 188, 81, 72, 17, 61, 171, 206, 20, 62, 3, 61, 4, 191, 87, 237, 83, 61, 197, 12, 130, 191, 59, 154, 77, 62, 47, 250, 156, 62, 136, 153, 157, 62, 89, 95, 10, 190, 49, 43, 0, 190, 3, 57, 18, 62, 64, 237, 144, 61, 184, 107, 158, 61, 51, 131, 72, 189, 152, 238, 5, 191, 75, 190, 36, 190, 171, 242, 253, 60, 200, 176, 148, 62, 32, 249, 251, 189, 232, 96, 84, 58, 108, 13, 182, 190, 106, 36, 76, 61, 49, 26, 192, 61, 243, 162, 111, 190, 62, 241, 184, 190, 83, 154, 132, 189, 223, 154, 54, 189, 157, 87, 83, 62, 194, 4, 39, 189, 25, 113, 34, 190, 126, 209, 59, 190, 6, 195, 53, 62, 224, 221, 183, 189, 245, 14, 14, 59, 97, 82, 49, 189, 111, 115, 11, 188, 114, 83, 171, 189, 154, 74, 65, 61, 151, 200, 151, 62, 77, 65, 102, 190, 88, 23, 163, 62, 2, 73, 105, 62, 29, 25, 121, 61, 249, 93, 93, 62, 79, 132, 177, 62, 209, 137, 239, 189, 130, 77, 199, 61, 15, 204, 175, 60, 223, 240, 74, 189, 226, 66, 159, 61, 204, 37, 135, 62, 50, 83, 237, 58, 33, 127, 141, 62, 153, 37, 148, 189, 72, 53, 82, 190, 5, 211, 99, 62, 141, 29, 179, 190, 169, 206, 132, 62, 27, 170, 61, 190, 60, 186, 59, 61, 234, 209, 161, 61, 152, 11, 52, 191, 165, 253, 17, 62, 2, 22, 146, 190, 223, 245, 21, 62, 122, 169, 154, 61, 32, 179, 212, 190, 35, 140, 33, 190, 74, 102, 44, 191, 141, 152, 151, 62, 125, 4, 0, 63, 173, 191, 187, 62, 102, 70, 185, 190, 188, 110, 191, 60, 60, 201, 137, 60, 146, 127, 111, 62, 10, 172, 166, 62, 35, 115, 84, 189, 71, 181, 231, 190, 219, 178, 36, 61, 232, 95, 160, 190, 59, 171, 149, 61, 166, 236, 6, 191, 243, 16, 246, 189, 16, 198, 170, 190, 32, 16, 165, 62, 220, 89, 14, 190, 13, 253, 37, 191, 23, 116, 126, 190, 246, 35, 131, 191, 187, 147, 56, 62, 113, 217, 155, 191, 26, 95, 111, 189, 71, 184, 134, 62, 115, 246, 78, 190, 33, 238, 27, 189, 195, 40, 60, 61, 166, 202, 59, 191, 90, 69, 61, 60, 226, 47, 10, 62, 126, 192, 2, 62, 1, 245, 125, 190, 128, 174, 145, 60, 194, 27, 199, 189, 253, 205, 29, 62, 222, 170, 251, 189, 33, 36, 36, 191, 163, 242, 132, 61, 190, 93, 248, 190, 122, 240, 9, 62, 132, 134, 44, 62, 253, 200, 178, 60, 182, 14, 123, 61, 198, 176, 37, 62, 150, 76, 132, 61, 26, 43, 41, 191, 112, 192, 27, 61, 81, 41, 26, 62, 133, 29, 151, 190, 100, 170, 88, 62, 159, 94, 141, 190, 40, 26, 72, 62, 236, 99, 160, 190, 187, 164, 24, 62, 4, 29, 93, 61, 22, 207, 170, 189, 194, 128, 221, 187, 96, 60, 170, 190, 92, 69, 6, 62, 231, 24, 191, 61, 213, 184, 14, 191, 221, 217, 89, 60, 187, 60, 9, 61, 50, 105, 247, 60, 161, 206, 1, 190, 36, 237, 193, 62, 127, 192, 91, 190, 185, 189, 193, 189, 137, 197, 49, 61, 227, 131, 181, 61, 192, 204, 249, 61, 29, 38, 98, 62, 34, 81, 102, 191, 127, 170, 3, 62, 227, 201, 119, 189, 164, 2, 206, 62, 138, 158, 181, 190, 116, 121, 34, 62, 138, 57, 94, 191, 68, 197, 6, 62, 240, 112, 126, 61, 92, 119, 13, 62, 187, 112, 28, 190, 210, 41, 97, 62, 147, 159, 211, 188, 104, 247, 46, 62, 160, 127, 171, 189, 131, 194, 148, 189, 212, 161, 6, 62, 147, 179, 5, 62, 189, 192, 204, 60, 183, 221, 226, 61, 27, 24, 111, 190, 98, 93, 189, 60, 6, 22, 196, 190, 222, 224, 144, 62, 155, 191, 141, 60, 127, 230, 249, 61, 186, 210, 238, 61, 70, 101, 183, 61, 5, 160, 10, 62, 32, 89, 216, 61, 153, 246, 20, 62, 187, 16, 107, 62, 89, 107, 140, 188, 178, 236, 143, 62, 79, 29, 33, 61, 148, 44, 165, 62, 233, 98, 73, 190, 161, 126, 195, 59, 129, 79, 244, 189, 109, 177, 225, 61, 195, 7, 115, 61, 123, 12, 59, 61, 120, 29, 122, 190, 156, 177, 242, 61, 134, 232, 232, 189, 142, 88, 130, 62, 218, 131, 183, 60, 13, 193, 76, 188, 171, 20, 24, 189, 203, 176, 135, 189, 77, 133, 100, 61, 175, 46, 134, 62, 111, 231, 78, 191, 249, 22, 199, 188, 79, 197, 170, 190, 249, 218, 157, 62, 176, 16, 135, 62, 138, 92, 55, 62, 50, 4, 46, 190, 120, 92, 10, 61, 92, 105, 26, 190, 234, 42, 166, 62, 146, 106, 84, 187, 98, 131, 45, 62, 35, 30, 159, 190, 208, 165, 198, 61, 119, 164, 128, 190, 228, 187, 200, 62, 171, 240, 29, 191, 33, 226, 195, 189, 195, 128, 158, 189, 130, 152, 7, 190, 236, 88, 138, 61, 195, 174, 80, 190, 172, 229, 148, 62, 249, 138, 157, 191, 222, 6, 204, 61, 37, 59, 190, 190, 186, 159, 93, 62, 18, 147, 10, 62, 173, 6, 30, 190, 209, 208, 188, 61, 46, 214, 183, 62, 130, 180, 7, 191, 4, 170, 197, 62, 5, 181, 34, 62, 220, 188, 210, 62, 102, 196, 202, 190, 100, 28, 54, 62, 218, 72, 76, 190, 25, 150, 150, 62, 53, 50, 17, 188, 44, 88, 39, 61, 93, 86, 3, 61, 94, 183, 157, 188, 40, 207, 246, 189, 104, 28, 31, 61, 162, 110, 17, 62, 3, 236, 144, 59, 23, 116, 78, 189, 132, 146, 2, 63, 172, 102, 0, 189, 194, 24, 245, 61, 2, 227, 163, 62, 159, 207, 178, 188, 154, 11, 232, 61, 9, 17, 156, 190, 125, 135, 244, 188, 253, 57, 2, 190, 109, 253, 74, 62, 155, 6, 72, 62, 11, 21, 35, 191, 65, 221, 46, 61, 168, 129, 199, 190, 73, 231, 133, 60, 123, 198, 137, 189, 212, 90, 39, 191, 190, 247, 234, 189, 94, 35, 146, 191, 181, 201, 0, 62, 104, 239, 253, 61, 182, 102, 173, 62, 67, 175, 30, 190, 31, 160, 16, 62, 3, 148, 179, 61, 253, 11, 214, 61, 199, 0, 61, 62, 62, 162, 160, 62, 179, 35, 27, 191, 192, 253, 135, 61, 68, 38, 193, 189, 161, 253, 66, 62, 186, 251, 22, 191, 33, 199, 14, 62, 230, 134, 209, 190, 145, 48, 190, 62, 134, 180, 132, 189, 199, 156, 255, 189, 83, 87, 59, 189, 82, 114, 169, 61, 179, 217, 154, 60, 33, 140, 49, 188, 150, 125, 48, 60, 247, 67, 208, 59, 9, 226, 183, 61, 26, 59, 225, 189, 193, 204, 209, 61, 241, 231, 216, 189, 40, 160, 129, 189, 20, 132, 174, 61, 174, 74, 148, 189, 34, 24, 248, 188, 45, 169, 186, 188, 1, 52, 44, 190, 196, 251, 188, 189, 146, 144, 37, 190, 123, 6, 72, 61, 107, 58, 85, 190, 151, 203, 190, 189, 40, 87, 3, 190, 228, 238, 248, 189, 58, 55, 20, 60, 21, 85, 227, 60, 231, 28, 242, 188, 158, 42, 70, 61, 186, 224, 39, 190, 79, 6, 5, 62, 8, 94, 166, 189, 182, 247, 234, 61, 249, 172, 138, 62, 119, 239, 154, 190, 55, 80, 71, 189, 107, 189, 200, 189, 151, 128, 37, 62, 145, 107, 2, 62, 142, 42, 125, 61, 93, 236, 61, 190, 121, 19, 241, 60, 245, 225, 49, 62, 162, 162, 95, 62, 38, 68, 228, 190, 82, 123, 129, 61, 62, 202, 48, 190, 164, 151, 149, 62, 209, 132, 105, 62, 30, 62, 39, 61, 221, 180, 53, 188, 109, 219, 205, 188, 12, 28, 30, 189, 13, 3, 118, 62, 77, 237, 163, 61, 31, 149, 85, 61, 175, 207, 242, 61, 147, 244, 130, 62, 9, 83, 162, 188, 195, 161, 46, 62, 199, 227, 235, 60, 55, 212, 74, 62, 154, 99, 62, 190, 191, 77, 174, 62, 99, 186, 22, 190, 51, 51, 204, 189, 137, 50, 137, 61, 203, 201, 26, 190, 251, 29, 167, 61, 153, 219, 165, 60, 26, 98, 37, 62, 244, 113, 9, 190, 190, 86, 0, 62, 154, 174, 13, 189, 61, 202, 241, 189, 162, 145, 242, 189, 89, 219, 21, 190, 29, 100, 109, 61, 194, 41, 37, 61, 105, 69, 88, 189, 196, 49, 69, 185, 204, 10, 174, 60, 19, 0, 146, 188, 69, 23, 163, 189, 172, 21, 16, 62, 203, 243, 54, 189, 119, 159, 223, 189, 198, 17, 255, 61, 240, 7, 27, 190, 161, 189, 92, 188, 124, 159, 41, 190, 85, 11, 33, 190, 43, 227, 139, 189, 206, 204, 127, 187, 20, 192, 35, 62, 104, 168, 132, 189, 213, 178, 30, 61, 20, 120, 44, 190, 60, 116, 8, 190, 13, 183, 75, 189, 68, 217, 154, 190, 254, 58, 158, 190, 157, 230, 167, 62, 113, 102, 179, 189, 190, 131, 103, 190, 179, 118, 18, 189, 187, 104, 55, 60, 95, 158, 164, 190, 211, 97, 8, 191, 243, 57, 248, 189, 209, 149, 143, 62, 140, 89, 214, 189, 173, 237, 203, 190, 45, 27, 221, 189, 175, 5, 63, 191, 80, 120, 52, 189, 174, 225, 204, 60, 235, 160, 251, 61, 105, 220, 58, 190, 187, 108, 112, 190, 119, 13, 144, 62, 250, 179, 84, 62, 30, 94, 228, 190, 177, 245, 65, 189, 193, 44, 172, 190, 239, 190, 118, 61, 200, 139, 178, 62, 44, 173, 39, 62, 174, 132, 99, 190, 241, 204, 40, 62, 41, 140, 211, 61, 181, 182, 43, 62, 72, 108, 32, 190, 160, 220, 164, 189, 71, 120, 31, 190, 26, 195, 198, 189, 217, 190, 133, 62, 241, 241, 147, 189, 4, 108, 146, 189, 169, 200, 206, 189, 23, 243, 200, 189, 171, 127, 175, 189, 5, 17, 219, 189, 218, 145, 102, 60, 55, 135, 69, 62, 197, 14, 151, 62, 238, 102, 187, 188, 231, 70, 216, 190, 23, 142, 160, 188, 170, 54, 16, 190, 155, 74, 180, 189, 218, 21, 105, 61, 169, 123, 147, 189, 229, 52, 2, 190, 83, 144, 137, 61, 32, 18, 234, 60, 169, 27, 57, 190, 62, 177, 84, 61, 163, 46, 0, 62, 64, 32, 0, 63, 226, 105, 4, 190, 132, 34, 27, 189, 89, 52, 166, 61, 72, 73, 177, 189, 202, 2, 33, 60, 45, 15, 50, 190, 243, 167, 215, 189, 128, 117, 195, 189, 8, 98, 39, 190, 111, 104, 41, 190, 161, 11, 9, 61, 242, 178, 25, 189, 100, 172, 209, 187, 54, 164, 188, 61, 78, 4, 239, 189, 124, 118, 140, 189, 180, 72, 5, 190, 167, 138, 239, 61, 219, 182, 45, 61, 72, 158, 26, 61, 239, 119, 50, 189, 129, 228, 134, 61, 82, 221, 3, 190, 130, 255, 242, 61, 196, 112, 17, 190, 154, 215, 204, 61, 64, 214, 131, 189, 123, 59, 230, 61, 1, 156, 167, 59, 211, 237, 69, 189, 44, 40, 221, 189, 5, 33, 14, 189, 115, 210, 108, 189, 35, 180, 149, 61, 117, 56, 207, 61, 163, 148, 3, 62, 118, 226, 71, 61, 68, 237, 131, 61, 170, 16, 209, 61, 226, 77, 106, 62, 196, 44, 223, 62, 211, 79, 91, 190, 204, 148, 92, 62, 172, 188, 44, 62, 163, 24, 167, 62, 210, 167, 5, 190, 183, 219, 227, 62, 246, 195, 156, 61, 63, 254, 1, 189, 65, 33, 10, 190, 48, 40, 182, 60, 219, 85, 227, 62, 214, 251, 130, 60, 194, 253, 209, 189, 221, 107, 56, 62, 125, 153, 123, 61, 237, 89, 241, 188, 80, 188, 39, 61, 225, 156, 104, 59, 138, 250, 88, 190, 19, 170, 104, 62, 251, 154, 39, 62, 68, 125, 206, 61, 54, 206, 161, 190, 127, 233, 142, 190, 6, 175, 8, 191, 246, 241, 30, 62, 167, 81, 127, 190, 15, 112, 143, 62, 14, 217, 224, 61, 150, 8, 137, 60, 197, 180, 32, 62, 38, 159, 84, 191, 87, 70, 39, 62, 201, 7, 174, 190, 41, 62, 42, 190, 135, 84, 78, 62, 136, 249, 186, 189, 10, 54, 40, 191, 6, 243, 167, 190, 119, 21, 244, 61, 200, 136, 149, 190, 61, 213, 220, 61, 142, 3, 24, 190, 145, 173, 101, 190, 70, 211, 20, 61, 136, 83, 11, 62, 190, 30, 255, 190, 199, 249, 72, 62, 210, 1, 47, 62, 128, 80, 249, 189, 157, 13, 32, 190, 130, 249, 45, 62, 51, 108, 233, 189, 246, 98, 236, 62, 73, 153, 78, 61, 130, 37, 131, 59, 128, 121, 30, 191, 45, 173, 72, 189, 191, 241, 158, 190, 55, 213, 186, 61, 221, 71, 209, 190, 74, 82, 100, 61, 174, 200, 145, 62, 188, 229, 94, 190, 202, 189, 139, 61, 59, 186, 72, 190, 6, 34, 190, 190, 91, 180, 255, 62, 198, 96, 237, 189, 237, 65, 152, 190, 113, 11, 38, 190, 177, 206, 2, 62, 221, 83, 134, 190, 2, 255, 196, 61, 185, 27, 116, 190, 198, 202, 222, 190, 148, 1, 162, 61, 81, 86, 213, 190, 108, 125, 200, 189, 29, 172, 186, 61, 0, 89, 27, 189, 75, 183, 233, 61, 117, 208, 139, 61, 86, 188, 174, 62, 154, 66, 30, 191, 240, 177, 179, 62, 193, 118, 232, 61, 248, 209, 46, 62, 28, 158, 205, 189, 222, 7, 206, 61, 230, 251, 220, 61, 113, 121, 14, 62, 198, 236, 44, 61, 49, 212, 195, 188, 100, 27, 8, 190, 178, 38, 44, 62, 213, 103, 137, 189, 105, 173, 18, 190, 47, 67, 171, 189, 21, 45, 200, 189, 165, 62, 20, 190, 143, 163, 173, 58, 186, 33, 14, 188, 160, 133, 12, 190, 38, 162, 46, 190, 1, 32, 127, 188, 120, 182, 168, 189, 11, 55, 9, 189, 218, 176, 49, 190, 137, 65, 228, 59, 1, 156, 70, 61, 120, 168, 252, 59, 39, 120, 39, 190, 251, 147, 40, 190, 54, 142, 186, 60, 181, 55, 30, 190, 1, 152, 41, 60, 234, 235, 197, 60, 197, 235, 45, 190, 59, 98, 179, 189, 213, 138, 251, 190, 103, 218, 131, 190, 243, 65, 191, 190, 108, 181, 108, 189, 34, 64, 3, 190, 123, 87, 126, 61, 181, 3, 135, 190, 10, 135, 227, 61, 117, 235, 201, 189, 35, 132, 0, 188, 148, 152, 188, 189, 158, 20, 166, 61, 186, 131, 137, 189, 197, 77, 121, 190, 11, 107, 244, 190, 211, 95, 179, 62, 77, 182, 99, 61, 131, 115, 53, 62, 153, 172, 28, 62, 104, 56, 29, 189, 189, 56, 236, 189, 43, 253, 50, 188, 105, 106, 149, 190, 187, 20, 190, 188, 180, 189, 229, 61, 218, 203, 132, 190, 188, 27, 203, 189, 73, 208, 50, 62, 135, 184, 61, 190, 6, 48, 59, 190, 124, 174, 114, 190, 125, 105, 188, 60, 17, 190, 211, 189, 54, 39, 146, 190, 236, 16, 0, 187, 110, 219, 172, 189, 110, 179, 17, 62, 207, 29, 200, 189, 148, 241, 161, 189, 173, 201, 1, 62, 225, 89, 230, 189, 67, 72, 144, 190, 157, 193, 28, 189, 45, 18, 241, 190, 86, 172, 187, 61, 96, 55, 135, 190, 85, 120, 25, 190, 5, 56, 208, 62, 8, 4, 244, 185, 31, 10, 44, 62, 57, 127, 163, 62, 134, 222, 230, 61, 84, 49, 113, 62, 34, 95, 108, 62, 40, 134, 47, 61, 214, 214, 43, 61, 163, 67, 143, 62, 219, 137, 169, 189, 41, 89, 81, 62, 52, 254, 190, 186, 233, 199, 86, 190, 173, 185, 144, 189, 97, 98, 52, 190, 198, 72, 168, 188, 77, 201, 129, 190, 1, 19, 209, 62, 125, 30, 202, 190, 53, 153, 149, 62, 117, 207, 171, 189, 98, 153, 136, 62, 199, 45, 112, 62, 223, 153, 55, 191, 186, 5, 149, 189, 223, 232, 238, 60, 220, 7, 250, 189, 46, 200, 196, 62, 203, 50, 153, 60, 84, 58, 17, 191, 107, 72, 115, 187, 118, 160, 127, 62, 62, 51, 227, 190, 159, 99, 62, 62, 159, 130, 126, 190, 61, 193, 140, 61, 107, 56, 110, 189, 41, 110, 35, 62, 87, 19, 152, 190, 111, 114, 23, 62, 105, 159, 214, 188, 73, 36, 104, 190, 130, 12, 165, 190, 238, 144, 221, 62, 109, 124, 56, 190, 190, 168, 222, 62, 205, 163, 38, 62, 92, 201, 38, 60, 141, 51, 28, 190, 152, 177, 36, 190, 0, 16, 84, 62, 22, 149, 74, 189, 135, 76, 133, 62, 81, 253, 245, 61, 57, 6, 0, 188, 144, 88, 190, 189, 12, 240, 45, 62, 177, 98, 109, 190, 152, 1, 78, 62, 197, 103, 34, 191, 135, 226, 162, 188, 24, 87, 150, 190, 101, 113, 6, 62, 9, 222, 47, 62, 146, 221, 146, 59, 41, 128, 138, 190, 158, 120, 185, 62, 106, 56, 196, 189, 110, 212, 106, 62, 147, 127, 203, 60, 249, 216, 123, 62, 57, 3, 56, 61, 24, 253, 71, 62, 69, 48, 151, 190, 1, 36, 151, 62, 241, 129, 160, 190, 83, 197, 13, 190, 206, 175, 172, 61, 50, 218, 73, 189, 98, 250, 94, 190, 73, 106, 247, 190, 55, 151, 60, 61, 3, 251, 155, 190, 30, 34, 15, 187, 133, 145, 185, 61, 115, 143, 236, 60, 232, 149, 40, 62, 75, 201, 88, 191, 14, 177, 235, 61, 165, 204, 189, 189, 228, 126, 150, 61, 79, 90, 116, 62, 86, 161, 38, 62, 59, 42, 62, 191, 94, 19, 0, 189, 221, 94, 153, 60, 248, 227, 146, 190, 250, 19, 149, 62, 65, 52, 160, 187, 64, 204, 108, 190, 217, 112, 202, 61, 92, 61, 55, 57, 153, 70, 147, 190, 83, 234, 55, 61, 185, 240, 17, 62, 208, 167, 16, 189, 252, 248, 138, 190, 107, 53, 86, 62, 228, 177, 48, 190, 192, 80, 141, 62, 88, 218, 201, 188, 201, 153, 73, 62, 104, 17, 165, 190, 175, 74, 181, 189, 195, 155, 145, 190, 236, 123, 61, 190, 12, 43, 227, 60, 192, 142, 37, 62, 27, 69, 20, 190, 36, 242, 36, 191, 72, 157, 172, 188, 33, 108, 75, 62, 225, 9, 182, 188, 135, 103, 211, 61, 139, 247, 28, 190, 231, 231, 4, 190, 36, 33, 2, 62, 176, 20, 153, 62, 79, 136, 145, 190, 172, 232, 23, 62, 191, 152, 12, 60, 49, 190, 57, 61, 102, 90, 74, 62, 77, 107, 42, 62, 132, 130, 40, 191, 249, 147, 21, 62, 99, 132, 194, 189, 213, 146, 129, 190, 111, 161, 150, 190, 20, 190, 84, 62, 72, 45, 226, 188, 49, 217, 76, 62, 28, 134, 30, 62, 62, 235, 3, 62, 111, 72, 98, 62, 67, 78, 34, 62, 83, 249, 30, 62, 195, 200, 135, 61, 132, 146, 157, 190, 147, 36, 221, 189, 189, 125, 161, 189, 202, 209, 210, 62, 160, 99, 68, 61, 209, 34, 4, 61, 127, 193, 172, 189, 208, 32, 150, 62, 207, 48, 203, 188, 212, 13, 164, 188, 255, 174, 152, 62, 139, 250, 148, 62, 181, 6, 21, 63, 132, 222, 246, 61, 53, 97, 57, 191, 15, 159, 205, 61, 35, 215, 136, 190, 134, 250, 30, 61, 157, 104, 111, 190, 210, 76, 96, 187, 124, 161, 170, 190, 53, 237, 27, 62, 34, 77, 166, 190, 144, 246, 47, 61, 73, 71, 218, 189, 144, 236, 202, 61, 33, 68, 148, 62, 182, 163, 67, 61, 116, 19, 47, 190, 48, 77, 24, 62, 27, 89, 2, 61, 92, 120, 91, 61, 42, 99, 175, 61, 185, 127, 151, 56, 247, 86, 228, 189, 176, 230, 213, 189, 129, 165, 94, 58, 177, 80, 228, 61, 172, 216, 59, 190, 2, 98, 167, 61, 247, 255, 105, 187, 208, 14, 192, 61, 103, 94, 89, 188, 11, 154, 240, 189, 70, 138, 254, 187, 119, 224, 227, 189, 2, 244, 183, 189, 231, 192, 20, 61, 101, 221, 244, 189, 58, 73, 14, 189, 113, 141, 24, 62, 123, 118, 28, 188, 247, 245, 182, 189, 148, 227, 152, 60, 79, 58, 152, 61, 237, 140, 145, 61, 218, 167, 84, 189, 56, 48, 109, 189, 252, 93, 103, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {197, 235, 59, 62, 113, 251, 55, 189, 138, 48, 169, 189, 224, 182, 248, 61, 164, 182, 69, 62, 181, 80, 117, 62, 113, 116, 125, 62, 35, 8, 62, 62, 135, 166, 220, 61, 74, 49, 105, 62, 15, 166, 227, 61, 82, 64, 146, 62, 106, 93, 76, 189, 10, 66, 181, 61, 60, 96, 237, 61, 241, 107, 64, 61, 69, 250, 183, 189, 177, 197, 180, 188, 185, 202, 149, 61, 167, 71, 156, 59, 159, 8, 119, 189, 52, 136, 54, 62, 5, 64, 195, 61, 190, 226, 130, 188, 42, 73, 249, 60, 202, 106, 154, 62, 159, 90, 21, 61, 125, 79, 47, 62, 145, 181, 24, 62, 242, 154, 71, 62, 53, 155, 200, 189, 220, 243, 162, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {148, 248, 155, 62, 69, 228, 140, 62, 202, 95, 113, 62, 112, 173, 203, 61, 117, 144, 148, 63, 34, 141, 141, 190, 122, 240, 199, 188, 21, 66, 65, 191, 232, 178, 91, 63, 111, 97, 254, 190, 130, 213, 55, 190, 37, 180, 244, 190, 193, 106, 1, 63, 45, 1, 50, 191, 90, 156, 221, 60, 112, 97, 65, 190, 23, 18, 6, 190, 178, 37, 213, 190, 21, 197, 112, 190, 70, 68, 255, 189, 122, 113, 107, 62, 27, 252, 36, 63, 252, 107, 217, 62, 85, 217, 167, 61, 96, 41, 74, 62, 102, 126, 1, 190, 175, 127, 21, 63, 228, 173, 167, 190, 35, 61, 145, 62, 57, 8, 178, 62, 215, 239, 151, 190, 76, 169, 152, 60, 68, 210, 1, 61, 36, 162, 30, 62, 89, 225, 113, 61, 212, 207, 20, 191, 127, 237, 30, 62, 172, 76, 157, 189, 172, 38, 156, 190, 32, 188, 254, 61, 119, 197, 136, 190, 127, 26, 66, 61, 199, 118, 113, 190, 92, 212, 107, 62, 43, 163, 24, 188, 233, 73, 209, 60, 116, 87, 212, 61, 242, 10, 49, 190, 181, 154, 224, 61, 175, 192, 126, 189, 244, 159, 187, 61, 129, 38, 6, 189, 139, 20, 158, 61, 254, 184, 153, 189, 162, 186, 12, 61, 212, 31, 13, 190, 116, 187, 0, 191, 139, 105, 151, 190, 57, 186, 136, 62, 13, 80, 13, 62, 35, 137, 201, 188, 51, 164, 234, 189, 176, 236, 48, 62, 175, 196, 137, 186};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 242, 9, 61, 3, 76, 145, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {114, 173, 155, 190, 156, 104, 94, 62, 2, 208, 218, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {163, 205, 247, 191, 154, 75, 75, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0092/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}