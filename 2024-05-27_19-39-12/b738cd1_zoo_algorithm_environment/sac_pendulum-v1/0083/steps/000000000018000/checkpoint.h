// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 72, 254, 190, 1, 123, 193, 187, 98, 90, 60, 60, 223, 101, 179, 190, 165, 235, 39, 63, 46, 119, 48, 191, 248, 32, 14, 191, 113, 137, 115, 191, 24, 190, 84, 62, 204, 9, 12, 63, 33, 11, 182, 190, 122, 217, 140, 62, 220, 30, 177, 189, 42, 236, 184, 190, 94, 88, 212, 62, 241, 220, 210, 62, 117, 182, 189, 190, 231, 77, 12, 191, 241, 239, 27, 63, 76, 144, 86, 63, 22, 165, 197, 62, 153, 68, 129, 63, 10, 184, 70, 191, 194, 170, 1, 191, 54, 64, 36, 63, 123, 178, 153, 63, 4, 244, 184, 62, 93, 100, 120, 59, 94, 44, 131, 61, 81, 53, 26, 63, 223, 230, 99, 190, 5, 174, 17, 190, 236, 66, 182, 189, 196, 199, 4, 191, 140, 161, 4, 191, 12, 238, 137, 62, 151, 92, 182, 62, 184, 150, 83, 191, 113, 251, 219, 189, 190, 203, 148, 190, 98, 83, 60, 189, 110, 104, 59, 63, 19, 230, 185, 189, 59, 235, 196, 191, 55, 198, 152, 190, 10, 148, 202, 190, 85, 4, 49, 63, 201, 189, 72, 62, 155, 99, 8, 63, 11, 123, 248, 190, 247, 128, 25, 62, 137, 215, 90, 190, 149, 30, 191, 191, 140, 15, 109, 190, 159, 58, 248, 62, 190, 142, 105, 61, 68, 236, 39, 191, 126, 70, 169, 190, 73, 43, 204, 63, 246, 119, 144, 62, 12, 237, 146, 189, 58, 10, 138, 63, 155, 63, 207, 62, 81, 190, 223, 62, 28, 20, 213, 63, 2, 103, 173, 62, 194, 82, 21, 190, 20, 24, 39, 63, 88, 39, 204, 61, 84, 141, 49, 191, 248, 162, 156, 62, 207, 12, 32, 191, 200, 12, 155, 62, 19, 239, 144, 63, 187, 198, 207, 62, 188, 254, 44, 63, 248, 175, 213, 190, 160, 117, 233, 62, 96, 204, 46, 191, 88, 149, 130, 62, 42, 166, 245, 61, 139, 147, 39, 62, 124, 32, 169, 62, 4, 71, 199, 62, 54, 213, 241, 62, 6, 198, 26, 63, 248, 175, 68, 62, 14, 20, 16, 62, 204, 136, 9, 191, 47, 161, 53, 63, 227, 0, 156, 189, 131, 148, 217, 63, 12, 142, 223, 62, 161, 255, 78, 191, 28, 213, 73, 190, 46, 254, 255, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 83, 25, 191, 53, 116, 121, 62, 143, 124, 100, 190, 237, 210, 29, 63, 210, 164, 56, 190, 71, 42, 77, 191, 218, 34, 145, 191, 122, 173, 132, 62, 47, 185, 175, 190, 236, 133, 195, 190, 151, 90, 162, 62, 109, 24, 148, 62, 86, 233, 226, 62, 224, 235, 201, 62, 51, 192, 167, 62, 124, 170, 29, 63, 106, 124, 104, 62, 133, 201, 82, 62, 158, 149, 102, 190, 133, 235, 180, 190, 72, 122, 205, 189, 165, 56, 125, 62, 52, 243, 54, 63, 23, 65, 154, 190, 21, 159, 4, 190, 13, 116, 33, 191, 39, 137, 71, 63, 157, 108, 25, 190, 250, 162, 223, 190, 116, 206, 47, 189, 172, 205, 179, 190, 200, 135, 19, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 234, 157, 61, 81, 189, 107, 62, 123, 163, 128, 62, 131, 173, 127, 62, 211, 32, 46, 190, 30, 248, 95, 190, 142, 85, 248, 187, 173, 92, 110, 62, 10, 12, 146, 188, 129, 133, 100, 190, 118, 24, 179, 188, 212, 38, 108, 60, 174, 102, 105, 61, 124, 210, 4, 62, 140, 110, 111, 190, 202, 167, 155, 60, 150, 189, 147, 61, 239, 53, 173, 62, 222, 230, 14, 190, 54, 169, 122, 191, 235, 87, 190, 190, 83, 195, 131, 62, 233, 22, 113, 61, 147, 146, 91, 62, 8, 49, 156, 60, 184, 76, 61, 62, 24, 180, 91, 61, 177, 178, 22, 62, 157, 214, 43, 62, 169, 120, 148, 61, 220, 32, 227, 190, 123, 239, 255, 61, 211, 139, 146, 61, 247, 176, 25, 189, 180, 166, 85, 61, 28, 110, 140, 62, 16, 218, 29, 62, 170, 166, 12, 191, 130, 27, 78, 191, 159, 100, 222, 61, 194, 139, 88, 191, 70, 236, 47, 189, 40, 170, 24, 62, 222, 193, 63, 189, 224, 148, 150, 62, 11, 14, 177, 187, 206, 241, 78, 189, 255, 81, 146, 187, 252, 245, 36, 62, 155, 7, 42, 190, 15, 189, 156, 61, 113, 84, 22, 190, 0, 28, 139, 188, 234, 135, 171, 189, 245, 168, 81, 62, 253, 210, 224, 190, 227, 21, 206, 190, 254, 251, 13, 61, 13, 126, 186, 190, 251, 66, 213, 61, 92, 13, 113, 62, 1, 20, 181, 61, 60, 11, 3, 191, 190, 194, 248, 62, 176, 71, 245, 61, 42, 129, 104, 62, 228, 117, 51, 62, 33, 94, 159, 62, 13, 160, 1, 190, 81, 237, 101, 190, 144, 88, 55, 191, 110, 27, 92, 62, 221, 39, 125, 191, 41, 171, 129, 189, 48, 235, 59, 62, 34, 52, 162, 62, 164, 164, 252, 61, 44, 78, 125, 189, 182, 47, 235, 62, 113, 190, 45, 189, 241, 9, 15, 62, 110, 235, 255, 62, 0, 147, 128, 189, 9, 81, 66, 190, 33, 52, 168, 190, 179, 152, 49, 190, 79, 121, 189, 188, 28, 102, 171, 190, 174, 132, 202, 190, 215, 135, 204, 60, 191, 164, 6, 62, 214, 105, 63, 62, 127, 194, 166, 61, 95, 128, 233, 61, 222, 220, 9, 191, 244, 52, 170, 190, 107, 227, 148, 61, 130, 230, 20, 62, 62, 174, 150, 190, 216, 142, 228, 190, 127, 67, 95, 62, 17, 208, 137, 61, 46, 37, 15, 61, 84, 57, 41, 190, 248, 36, 204, 190, 160, 27, 79, 190, 193, 162, 37, 61, 175, 211, 25, 189, 79, 17, 142, 191, 123, 102, 27, 62, 32, 176, 152, 191, 152, 185, 197, 61, 117, 55, 45, 62, 250, 23, 50, 191, 3, 63, 39, 60, 22, 244, 77, 62, 67, 212, 70, 188, 214, 162, 95, 61, 144, 252, 58, 190, 236, 219, 161, 190, 207, 33, 48, 191, 209, 209, 81, 190, 184, 42, 22, 62, 15, 78, 135, 191, 12, 43, 179, 190, 19, 54, 35, 190, 77, 127, 27, 190, 160, 181, 203, 190, 126, 166, 205, 60, 227, 31, 25, 62, 152, 25, 170, 189, 191, 56, 224, 59, 52, 15, 34, 62, 46, 160, 209, 61, 48, 59, 5, 190, 79, 34, 71, 62, 43, 3, 65, 190, 140, 92, 58, 62, 159, 87, 208, 60, 195, 170, 112, 62, 200, 11, 83, 61, 23, 140, 247, 189, 155, 82, 117, 60, 199, 177, 126, 59, 168, 223, 223, 61, 216, 148, 68, 190, 239, 182, 227, 61, 191, 211, 202, 60, 73, 61, 81, 62, 52, 223, 93, 189, 21, 133, 138, 62, 5, 65, 32, 190, 228, 177, 221, 61, 183, 80, 191, 189, 227, 87, 47, 60, 184, 13, 193, 187, 111, 17, 172, 61, 234, 175, 149, 189, 226, 119, 12, 189, 127, 59, 131, 61, 238, 39, 49, 61, 125, 92, 218, 187, 108, 79, 201, 188, 174, 4, 133, 189, 225, 250, 76, 188, 204, 0, 173, 61, 27, 198, 180, 187, 21, 253, 205, 189, 16, 101, 188, 189, 113, 89, 211, 189, 186, 146, 157, 61, 79, 198, 190, 189, 88, 157, 35, 190, 41, 209, 200, 61, 187, 254, 196, 61, 57, 205, 254, 61, 68, 196, 32, 190, 160, 168, 227, 189, 44, 197, 21, 187, 212, 191, 29, 189, 131, 1, 139, 61, 223, 191, 34, 190, 168, 169, 51, 190, 52, 109, 45, 60, 121, 142, 193, 61, 97, 136, 174, 189, 243, 11, 146, 189, 209, 139, 198, 61, 134, 155, 25, 190, 16, 57, 129, 60, 216, 74, 63, 189, 220, 243, 71, 189, 64, 33, 31, 189, 146, 12, 189, 60, 7, 196, 250, 189, 199, 83, 82, 190, 17, 72, 31, 190, 19, 79, 248, 189, 117, 195, 150, 187, 100, 88, 228, 61, 14, 212, 52, 189, 121, 165, 243, 188, 198, 162, 215, 59, 228, 184, 134, 190, 139, 150, 250, 189, 153, 140, 48, 189, 174, 13, 131, 61, 107, 192, 168, 190, 234, 114, 46, 190, 163, 235, 9, 190, 250, 135, 15, 189, 74, 243, 68, 61, 28, 86, 26, 62, 77, 100, 174, 190, 1, 99, 63, 190, 14, 121, 133, 59, 52, 100, 197, 58, 139, 184, 149, 61, 193, 73, 68, 61, 41, 0, 230, 61, 228, 233, 241, 60, 170, 184, 186, 189, 116, 175, 233, 61, 142, 56, 118, 61, 223, 207, 22, 61, 213, 79, 76, 190, 254, 98, 210, 190, 129, 141, 15, 190, 241, 199, 115, 62, 153, 251, 183, 189, 29, 213, 29, 191, 85, 119, 93, 62, 239, 33, 252, 190, 3, 47, 98, 62, 62, 161, 239, 189, 77, 218, 196, 61, 9, 79, 210, 61, 212, 38, 20, 62, 108, 173, 120, 189, 231, 6, 195, 188, 74, 208, 246, 188, 70, 75, 131, 190, 147, 160, 196, 62, 23, 77, 214, 61, 130, 219, 100, 189, 9, 196, 177, 189, 9, 149, 19, 61, 76, 30, 12, 191, 81, 29, 177, 190, 230, 23, 118, 189, 60, 138, 189, 61, 30, 92, 98, 61, 194, 44, 65, 189, 247, 190, 149, 61, 248, 26, 51, 60, 97, 208, 174, 190, 123, 105, 3, 60, 103, 242, 51, 190, 187, 106, 62, 62, 24, 71, 246, 62, 48, 219, 98, 62, 88, 175, 130, 62, 168, 207, 241, 190, 249, 33, 82, 62, 67, 154, 102, 191, 168, 148, 127, 61, 55, 31, 48, 188, 242, 182, 216, 189, 239, 189, 109, 62, 107, 121, 70, 60, 120, 104, 252, 189, 227, 170, 225, 190, 121, 100, 76, 62, 231, 163, 193, 190, 46, 154, 109, 62, 58, 37, 58, 61, 106, 81, 84, 190, 90, 226, 2, 191, 68, 178, 72, 189, 37, 34, 85, 61, 44, 194, 196, 190, 71, 109, 135, 62, 145, 173, 177, 190, 27, 213, 60, 189, 65, 219, 65, 189, 96, 233, 192, 188, 252, 169, 159, 190, 97, 76, 19, 190, 63, 25, 46, 190, 139, 61, 153, 189, 134, 251, 167, 62, 216, 153, 173, 62, 231, 86, 229, 59, 183, 236, 108, 61, 203, 139, 41, 191, 53, 23, 79, 62, 131, 193, 54, 191, 215, 117, 27, 190, 189, 238, 165, 62, 165, 112, 175, 62, 176, 252, 108, 62, 250, 121, 132, 190, 107, 214, 130, 61, 169, 170, 141, 190, 47, 234, 165, 61, 223, 15, 212, 190, 203, 67, 66, 62, 180, 138, 120, 60, 11, 108, 242, 189, 86, 57, 34, 190, 128, 239, 239, 61, 180, 49, 140, 61, 72, 13, 11, 191, 103, 236, 72, 62, 54, 66, 78, 61, 146, 97, 243, 59, 162, 250, 186, 62, 174, 154, 240, 61, 72, 235, 188, 190, 9, 90, 33, 62, 212, 244, 141, 61, 211, 117, 0, 61, 37, 201, 54, 62, 139, 206, 18, 190, 5, 57, 205, 61, 7, 44, 57, 189, 24, 39, 250, 62, 43, 254, 196, 189, 161, 24, 197, 62, 110, 230, 100, 60, 186, 110, 9, 62, 76, 42, 149, 188, 189, 226, 27, 62, 145, 191, 90, 61, 195, 16, 187, 60, 26, 2, 158, 188, 58, 172, 102, 190, 241, 10, 194, 62, 94, 213, 181, 61, 213, 68, 251, 190, 153, 71, 58, 190, 115, 238, 16, 62, 244, 69, 90, 189, 235, 74, 91, 61, 136, 245, 121, 61, 239, 17, 222, 61, 4, 96, 140, 61, 243, 196, 164, 189, 255, 71, 135, 190, 84, 240, 160, 188, 158, 96, 12, 190, 123, 143, 34, 62, 222, 15, 45, 189, 31, 89, 9, 190, 210, 84, 168, 189, 59, 84, 75, 189, 156, 193, 60, 61, 160, 15, 33, 190, 172, 179, 46, 191, 110, 248, 145, 62, 29, 243, 104, 190, 25, 172, 46, 189, 38, 145, 96, 62, 187, 213, 142, 62, 137, 130, 111, 62, 89, 121, 226, 61, 26, 100, 184, 61, 37, 70, 25, 59, 162, 149, 16, 190, 169, 13, 195, 60, 130, 82, 2, 62, 125, 173, 136, 61, 46, 174, 42, 60, 66, 110, 6, 190, 245, 249, 94, 62, 252, 201, 38, 191, 250, 152, 10, 190, 51, 239, 31, 188, 79, 174, 6, 62, 80, 150, 19, 189, 109, 65, 112, 190, 17, 160, 131, 189, 193, 207, 14, 189, 155, 110, 200, 190, 39, 155, 7, 190, 173, 39, 141, 62, 47, 73, 168, 62, 77, 18, 174, 61, 143, 162, 230, 189, 229, 213, 245, 190, 222, 48, 61, 62, 171, 127, 58, 190, 8, 140, 182, 62, 52, 76, 174, 190, 69, 34, 62, 62, 86, 248, 20, 62, 42, 141, 109, 59, 34, 109, 136, 189, 46, 140, 248, 190, 57, 138, 127, 189, 109, 62, 234, 61, 4, 215, 68, 189, 113, 5, 161, 189, 87, 147, 147, 191, 190, 84, 133, 190, 249, 10, 84, 62, 69, 31, 202, 60, 111, 165, 253, 61, 161, 121, 78, 61, 169, 99, 200, 61, 57, 95, 147, 59, 118, 183, 249, 61, 107, 44, 12, 62, 66, 50, 166, 62, 229, 107, 249, 190, 213, 40, 155, 189, 232, 26, 143, 61, 180, 149, 240, 189, 92, 39, 245, 61, 5, 134, 145, 189, 97, 201, 188, 60, 91, 206, 114, 189, 249, 160, 185, 61, 84, 155, 240, 189, 73, 167, 73, 189, 120, 9, 220, 189, 85, 214, 245, 189, 200, 154, 227, 187, 145, 251, 142, 188, 85, 86, 67, 61, 200, 160, 12, 190, 185, 210, 29, 190, 113, 247, 138, 61, 156, 52, 196, 60, 71, 110, 131, 60, 199, 106, 186, 61, 208, 243, 216, 189, 227, 81, 208, 189, 30, 68, 167, 189, 131, 238, 223, 61, 239, 76, 96, 61, 145, 240, 33, 61, 111, 37, 234, 61, 152, 118, 231, 189, 149, 56, 208, 61, 164, 140, 94, 189, 215, 171, 136, 189, 160, 196, 7, 62, 34, 167, 204, 189, 198, 184, 131, 188, 219, 37, 2, 62, 43, 223, 133, 189, 183, 70, 15, 190, 22, 86, 45, 190, 204, 56, 116, 61, 87, 148, 111, 189, 165, 216, 50, 190, 199, 57, 239, 61, 247, 204, 244, 188, 211, 2, 4, 62, 79, 27, 29, 189, 138, 203, 228, 189, 160, 77, 197, 60, 219, 33, 40, 190, 24, 251, 156, 59, 38, 88, 232, 189, 44, 50, 109, 188, 141, 77, 189, 61, 232, 79, 106, 189, 42, 149, 252, 59, 245, 162, 39, 62, 106, 247, 139, 61, 150, 31, 192, 61, 253, 180, 3, 62, 59, 43, 79, 60, 154, 170, 43, 61, 200, 157, 234, 188, 103, 236, 106, 189, 124, 185, 18, 190, 148, 80, 153, 189, 138, 230, 37, 62, 114, 205, 165, 190, 156, 70, 184, 190, 147, 148, 63, 62, 165, 242, 143, 61, 70, 227, 250, 190, 235, 160, 86, 191, 29, 6, 74, 190, 67, 61, 185, 191, 13, 39, 148, 62, 58, 133, 255, 190, 207, 15, 166, 189, 28, 216, 106, 61, 206, 217, 98, 62, 38, 116, 107, 190, 237, 156, 151, 189, 123, 132, 158, 62, 170, 228, 211, 188, 17, 52, 43, 191, 189, 140, 162, 62, 46, 233, 8, 190, 160, 128, 101, 190, 84, 61, 171, 189, 46, 82, 224, 190, 249, 66, 241, 190, 165, 233, 83, 189, 144, 122, 231, 61, 51, 92, 4, 190, 54, 217, 167, 190, 245, 176, 159, 61, 72, 246, 113, 190, 98, 112, 82, 191, 148, 214, 255, 61, 132, 223, 23, 190, 167, 117, 140, 191, 16, 249, 222, 189, 21, 157, 34, 189, 80, 4, 202, 61, 66, 187, 15, 63, 242, 143, 154, 62, 178, 63, 168, 190, 40, 166, 30, 189, 55, 117, 8, 189, 98, 164, 193, 189, 184, 149, 31, 62, 105, 241, 141, 190, 153, 13, 200, 61, 3, 255, 29, 62, 247, 83, 253, 189, 168, 146, 142, 191, 180, 58, 134, 61, 53, 87, 174, 62, 59, 80, 79, 61, 39, 8, 127, 62, 112, 170, 145, 61, 199, 193, 221, 190, 200, 50, 78, 190, 161, 113, 215, 190, 166, 116, 191, 189, 226, 214, 32, 190, 170, 214, 48, 62, 77, 202, 50, 191, 81, 46, 6, 63, 55, 132, 198, 190, 116, 126, 196, 189, 204, 198, 59, 62, 26, 140, 37, 62, 115, 194, 254, 187, 114, 206, 255, 190, 26, 107, 213, 190, 214, 239, 136, 190, 60, 123, 68, 190, 166, 19, 146, 189, 255, 170, 151, 191, 175, 253, 134, 61, 192, 188, 33, 190, 214, 221, 65, 62, 141, 93, 202, 61, 53, 230, 137, 189, 137, 114, 30, 62, 231, 249, 144, 189, 53, 127, 98, 62, 56, 146, 162, 190, 107, 190, 93, 190, 169, 197, 75, 191, 212, 223, 186, 62, 220, 27, 215, 62, 43, 215, 152, 62, 171, 202, 150, 60, 146, 130, 97, 61, 132, 86, 47, 62, 175, 155, 162, 60, 167, 61, 155, 189, 91, 10, 89, 62, 45, 108, 30, 191, 2, 114, 61, 61, 230, 3, 10, 62, 164, 247, 45, 62, 242, 195, 201, 190, 164, 7, 251, 190, 30, 129, 18, 191, 89, 143, 154, 190, 14, 117, 248, 190, 104, 196, 149, 61, 99, 37, 152, 62, 199, 54, 103, 191, 152, 190, 202, 61, 122, 203, 199, 190, 104, 247, 206, 61, 196, 203, 213, 60, 50, 20, 119, 189, 9, 223, 25, 63, 6, 227, 134, 191, 196, 43, 220, 62, 63, 205, 71, 190, 171, 102, 38, 191, 82, 43, 93, 191, 139, 109, 7, 63, 18, 108, 203, 62, 22, 51, 16, 189, 139, 138, 196, 189, 244, 190, 62, 61, 227, 39, 169, 62, 109, 63, 196, 61, 41, 206, 146, 62, 216, 226, 201, 61, 8, 174, 134, 191, 33, 183, 130, 60, 79, 178, 185, 60, 223, 34, 4, 191, 187, 136, 136, 190, 142, 8, 22, 191, 198, 109, 218, 61, 16, 90, 144, 190, 163, 56, 2, 191, 154, 46, 43, 190, 125, 102, 163, 190, 143, 144, 35, 62, 29, 139, 166, 190, 122, 151, 232, 62, 66, 218, 170, 191, 245, 184, 75, 62, 120, 149, 71, 191, 166, 89, 116, 185, 145, 75, 29, 61, 65, 140, 4, 191, 113, 203, 138, 189, 174, 233, 63, 62, 125, 194, 153, 61, 173, 156, 22, 190, 194, 146, 57, 62, 149, 170, 42, 189, 161, 216, 88, 190, 5, 19, 19, 190, 169, 59, 158, 62, 134, 112, 251, 189, 39, 214, 82, 191, 249, 155, 44, 61, 120, 15, 53, 58, 140, 201, 83, 191, 229, 188, 170, 61, 84, 162, 41, 62, 34, 152, 145, 61, 77, 122, 185, 190, 61, 166, 207, 189, 115, 242, 145, 190, 169, 80, 175, 61, 216, 255, 102, 190, 206, 73, 230, 189, 125, 226, 209, 190, 18, 95, 52, 61, 77, 67, 239, 189, 246, 114, 86, 61, 246, 176, 251, 60, 128, 69, 120, 61, 80, 156, 53, 190, 20, 57, 117, 190, 26, 10, 202, 62, 45, 7, 143, 190, 224, 79, 42, 190, 64, 141, 180, 190, 114, 131, 25, 191, 19, 1, 160, 189, 237, 98, 125, 62, 173, 253, 155, 62, 4, 136, 58, 61, 25, 175, 139, 62, 118, 144, 112, 190, 52, 246, 152, 190, 118, 14, 139, 62, 176, 164, 33, 191, 65, 59, 59, 61, 184, 93, 186, 189, 159, 247, 40, 62, 92, 31, 133, 62, 238, 96, 69, 60, 62, 10, 69, 190, 67, 255, 219, 189, 30, 5, 121, 61, 144, 50, 180, 189, 137, 145, 184, 62, 137, 114, 217, 189, 52, 142, 41, 59, 205, 61, 156, 190, 110, 82, 37, 62, 206, 48, 66, 62, 181, 8, 99, 190, 47, 169, 175, 61, 233, 174, 215, 189, 192, 54, 55, 62, 179, 3, 108, 190, 143, 94, 127, 191, 172, 48, 181, 190, 158, 148, 61, 61, 113, 91, 12, 189, 230, 64, 158, 62, 48, 4, 53, 62, 198, 170, 153, 62, 231, 95, 217, 60, 239, 149, 18, 61, 107, 174, 249, 61, 219, 210, 80, 62, 19, 131, 255, 190, 212, 245, 160, 61, 3, 98, 235, 189, 113, 69, 1, 191, 244, 146, 196, 189, 59, 248, 60, 62, 242, 116, 230, 62, 55, 61, 61, 190, 42, 12, 229, 190, 133, 156, 136, 61, 240, 107, 230, 190, 17, 164, 222, 61, 84, 142, 164, 59, 68, 147, 162, 62, 42, 45, 42, 61, 158, 129, 10, 61, 66, 20, 134, 62, 67, 19, 92, 190, 217, 46, 158, 62, 252, 167, 186, 61, 105, 220, 174, 61, 209, 126, 77, 189, 106, 107, 100, 61, 73, 7, 189, 189, 125, 102, 65, 190, 68, 147, 23, 191, 239, 1, 185, 190, 35, 133, 117, 190, 27, 190, 58, 61, 200, 114, 137, 190, 93, 153, 141, 190, 235, 108, 129, 190, 23, 183, 236, 61, 248, 204, 33, 191, 230, 156, 104, 189, 237, 167, 171, 62, 0, 165, 163, 62, 152, 171, 54, 190, 22, 215, 245, 189, 229, 82, 149, 191, 224, 106, 30, 63, 7, 73, 134, 191, 55, 182, 132, 62, 229, 192, 218, 190, 234, 167, 87, 62, 23, 122, 1, 62, 254, 229, 127, 190, 45, 34, 40, 191, 184, 189, 9, 63, 100, 120, 79, 62, 39, 94, 150, 190, 193, 211, 77, 62, 11, 171, 181, 190, 223, 170, 15, 62, 57, 165, 28, 191, 159, 251, 238, 62, 96, 116, 149, 62, 35, 188, 34, 61, 108, 241, 38, 62, 135, 116, 244, 189, 212, 161, 12, 63, 140, 236, 79, 190, 14, 89, 245, 62, 36, 34, 203, 190, 200, 202, 32, 190, 251, 63, 181, 61, 251, 254, 16, 60, 17, 78, 92, 62, 37, 47, 83, 190, 123, 2, 138, 190, 13, 96, 76, 61, 79, 193, 14, 62, 36, 39, 178, 62, 122, 168, 173, 189, 44, 116, 213, 61, 17, 52, 82, 61, 67, 18, 149, 62, 73, 57, 253, 189, 21, 13, 161, 60, 142, 9, 202, 61, 47, 220, 231, 189, 25, 188, 35, 60, 84, 167, 129, 190, 116, 36, 230, 61, 174, 203, 3, 190, 54, 14, 116, 190, 2, 93, 5, 61, 222, 57, 254, 62, 187, 88, 34, 188, 193, 152, 45, 62, 122, 204, 26, 62, 203, 208, 138, 188, 177, 240, 77, 189, 240, 127, 90, 61, 127, 214, 233, 61, 83, 235, 91, 62, 102, 7, 43, 62, 71, 200, 39, 62, 175, 221, 21, 190, 255, 187, 249, 190, 241, 73, 199, 190, 174, 215, 19, 190, 172, 74, 207, 62, 46, 71, 89, 190, 110, 71, 129, 191, 170, 84, 131, 62, 232, 99, 43, 191, 146, 199, 5, 60, 194, 65, 20, 190, 193, 194, 146, 61, 53, 14, 108, 188, 66, 102, 137, 62, 185, 135, 50, 190, 79, 147, 147, 61, 239, 120, 69, 62, 253, 158, 114, 189, 33, 47, 94, 62, 110, 123, 73, 62, 48, 118, 37, 62, 100, 253, 6, 190, 72, 160, 21, 190, 178, 139, 234, 190, 66, 53, 184, 190, 175, 38, 141, 190, 209, 244, 206, 61, 218, 76, 87, 62, 46, 203, 228, 189, 156, 203, 94, 190, 241, 107, 108, 189, 202, 13, 176, 191, 157, 52, 188, 189, 24, 65, 178, 62, 218, 83, 147, 63, 197, 15, 17, 63, 51, 194, 138, 190, 16, 72, 136, 62, 212, 84, 164, 61, 242, 198, 1, 190, 158, 5, 51, 191, 126, 160, 14, 60, 211, 165, 212, 188, 255, 169, 172, 59, 89, 50, 39, 188, 82, 206, 69, 190, 168, 137, 181, 189, 71, 209, 55, 190, 101, 37, 204, 62, 105, 19, 35, 191, 25, 15, 191, 61, 107, 196, 180, 61, 168, 44, 162, 61, 247, 159, 34, 191, 178, 252, 15, 61, 11, 227, 26, 62, 129, 199, 112, 190, 48, 128, 222, 61, 51, 41, 128, 190, 138, 244, 116, 190, 217, 71, 99, 61, 254, 163, 235, 190, 1, 236, 145, 62, 155, 122, 188, 62, 207, 187, 144, 189, 207, 41, 188, 62, 26, 247, 2, 190, 156, 192, 153, 62, 13, 140, 4, 191, 89, 45, 249, 190, 244, 163, 129, 189, 24, 72, 117, 190, 94, 152, 133, 62, 160, 153, 249, 190, 25, 182, 55, 188, 221, 143, 9, 190, 18, 90, 19, 62, 129, 83, 127, 60, 139, 27, 30, 191, 2, 231, 13, 62, 59, 49, 1, 62, 230, 103, 133, 190, 133, 34, 72, 190, 69, 77, 86, 191, 236, 106, 35, 191, 253, 208, 19, 62, 56, 148, 97, 62, 254, 217, 172, 61, 72, 116, 14, 189, 114, 62, 115, 62, 221, 140, 15, 190, 114, 226, 233, 61, 146, 58, 42, 61, 167, 34, 183, 61, 189, 247, 56, 191, 93, 128, 184, 59, 196, 147, 197, 189, 197, 83, 95, 60, 111, 67, 103, 61, 161, 234, 185, 189, 118, 62, 8, 61, 78, 104, 243, 61, 105, 78, 9, 190, 240, 205, 17, 188, 24, 79, 254, 61, 111, 26, 211, 189, 11, 58, 255, 189, 96, 97, 17, 190, 65, 138, 231, 188, 208, 87, 234, 189, 208, 39, 27, 62, 172, 24, 228, 61, 104, 81, 254, 189, 17, 18, 140, 189, 120, 213, 188, 188, 200, 70, 255, 61, 109, 185, 194, 61, 94, 25, 45, 189, 179, 47, 109, 189, 87, 246, 2, 190, 49, 97, 15, 189, 19, 175, 253, 61, 54, 12, 185, 189, 197, 191, 1, 62, 76, 53, 242, 61, 180, 142, 179, 61, 235, 211, 165, 189, 217, 57, 170, 188, 12, 7, 25, 62, 116, 60, 141, 62, 84, 79, 228, 190, 157, 81, 10, 191, 67, 199, 164, 61, 9, 100, 16, 191, 117, 39, 146, 62, 253, 129, 132, 61, 136, 110, 94, 61, 66, 68, 180, 61, 74, 58, 67, 189, 231, 187, 131, 61, 170, 111, 195, 191, 178, 126, 9, 62, 132, 75, 204, 191, 32, 205, 44, 62, 86, 5, 42, 190, 161, 219, 68, 191, 80, 89, 120, 62, 169, 126, 151, 62, 8, 53, 106, 62, 142, 0, 137, 62, 147, 105, 176, 62, 66, 13, 10, 190, 116, 7, 14, 190, 14, 2, 238, 61, 168, 84, 49, 62, 95, 126, 222, 61, 19, 195, 152, 62, 41, 48, 139, 189, 101, 205, 189, 62, 190, 235, 108, 191, 42, 94, 14, 189, 240, 23, 118, 62, 95, 248, 71, 189, 253, 36, 131, 61, 61, 2, 145, 190, 81, 70, 168, 190, 107, 181, 12, 63, 144, 154, 93, 190, 56, 120, 212, 62, 142, 103, 36, 191, 191, 135, 46, 62, 255, 26, 223, 190, 21, 109, 211, 61, 126, 254, 82, 189, 215, 198, 176, 190, 128, 2, 114, 61, 230, 141, 169, 189, 137, 71, 189, 188, 31, 115, 137, 190, 104, 6, 62, 191, 194, 110, 13, 191, 151, 41, 146, 60, 113, 84, 100, 62, 21, 226, 205, 61, 219, 7, 87, 189, 252, 95, 131, 190, 103, 253, 185, 61, 100, 78, 177, 61, 250, 182, 159, 62, 153, 116, 201, 62, 126, 133, 137, 191, 232, 19, 70, 189, 158, 26, 170, 61, 114, 38, 92, 62, 81, 195, 24, 61, 23, 225, 53, 190, 138, 113, 31, 61, 75, 65, 157, 62, 169, 213, 121, 62, 145, 132, 97, 189, 140, 136, 100, 189, 229, 68, 100, 62, 217, 79, 48, 190, 14, 137, 75, 189, 10, 6, 60, 62, 109, 87, 216, 61, 150, 172, 66, 191, 99, 173, 26, 61, 147, 34, 155, 60, 195, 242, 46, 191, 51, 9, 149, 189, 55, 10, 103, 62, 211, 69, 88, 61, 169, 253, 222, 61, 177, 249, 132, 188, 247, 63, 85, 190, 70, 70, 112, 62, 134, 227, 229, 187, 26, 202, 0, 190, 125, 156, 217, 61, 227, 8, 62, 61, 24, 99, 152, 189, 42, 154, 162, 62, 199, 7, 53, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 160, 165, 61, 94, 26, 161, 189, 130, 244, 89, 62, 59, 14, 156, 189, 167, 190, 131, 62, 171, 15, 226, 60, 34, 70, 152, 190, 156, 42, 90, 62, 198, 3, 108, 188, 99, 154, 155, 62, 251, 229, 71, 190, 141, 160, 164, 62, 10, 158, 109, 61, 22, 101, 12, 190, 165, 15, 134, 189, 27, 237, 112, 62, 198, 135, 33, 62, 104, 99, 206, 62, 228, 202, 3, 62, 204, 49, 211, 189, 23, 57, 79, 188, 211, 248, 52, 62, 138, 126, 193, 189, 197, 77, 156, 62, 113, 123, 9, 190, 192, 137, 3, 61, 15, 71, 20, 190, 185, 163, 176, 61, 50, 249, 62, 190, 93, 95, 179, 61, 196, 109, 141, 62, 90, 79, 158, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 188, 103, 190, 73, 83, 203, 62, 25, 210, 15, 63, 7, 213, 138, 63, 202, 97, 12, 188, 101, 140, 83, 60, 10, 118, 151, 61, 34, 97, 43, 62, 115, 43, 5, 63, 166, 223, 106, 62, 16, 221, 153, 189, 66, 247, 134, 62, 235, 65, 175, 190, 187, 255, 210, 61, 251, 228, 6, 190, 193, 98, 128, 63, 69, 60, 50, 63, 33, 128, 70, 191, 48, 30, 177, 191, 186, 57, 56, 63, 241, 32, 243, 190, 59, 85, 134, 190, 207, 165, 57, 189, 72, 172, 191, 63, 185, 145, 2, 190, 77, 51, 45, 63, 45, 188, 0, 63, 83, 32, 252, 190, 124, 175, 211, 61, 90, 58, 67, 63, 93, 101, 223, 190, 0, 31, 37, 190, 192, 43, 209, 190, 242, 102, 156, 61, 200, 135, 20, 61, 176, 181, 59, 62, 145, 33, 112, 190, 247, 170, 28, 61, 136, 66, 123, 60, 103, 194, 169, 61, 126, 166, 239, 62, 251, 252, 185, 190, 140, 64, 11, 62, 13, 186, 243, 189, 33, 23, 159, 189, 1, 15, 187, 189, 123, 24, 12, 62, 22, 146, 44, 60, 191, 218, 177, 61, 242, 151, 54, 190, 222, 184, 44, 62, 244, 7, 1, 62, 131, 76, 254, 62, 60, 217, 147, 189, 65, 163, 252, 62, 128, 213, 197, 61, 36, 219, 5, 62, 103, 135, 5, 63, 72, 181, 120, 58, 125, 205, 32, 190, 64, 242, 182, 189, 35, 64, 6, 62, 98, 251, 154, 188, 84, 64, 237, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 201, 23, 190, 239, 142, 65, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {100, 65, 164, 191, 192, 236, 219, 63, 122, 158, 23, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {248, 22, 7, 65, 0, 49, 61, 187};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0083/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}