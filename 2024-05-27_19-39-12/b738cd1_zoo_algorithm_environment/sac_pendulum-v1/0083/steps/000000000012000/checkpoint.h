// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 72, 254, 190, 1, 123, 193, 187, 98, 90, 60, 60, 176, 87, 191, 190, 15, 61, 32, 63, 75, 252, 52, 191, 255, 188, 172, 190, 132, 21, 126, 191, 243, 35, 130, 62, 205, 38, 1, 63, 229, 119, 210, 190, 30, 48, 87, 62, 43, 241, 180, 189, 239, 163, 162, 190, 191, 180, 202, 62, 46, 220, 5, 63, 167, 149, 160, 190, 64, 84, 15, 191, 34, 1, 108, 63, 222, 228, 63, 63, 108, 203, 204, 62, 212, 123, 133, 63, 245, 255, 43, 191, 165, 81, 251, 190, 21, 37, 51, 63, 167, 244, 154, 63, 67, 187, 163, 62, 212, 66, 54, 187, 231, 9, 213, 60, 23, 113, 17, 63, 255, 219, 39, 190, 14, 224, 10, 189, 6, 216, 17, 190, 241, 95, 252, 190, 27, 116, 253, 190, 70, 195, 54, 62, 238, 151, 175, 62, 247, 202, 57, 191, 72, 32, 32, 190, 105, 59, 168, 190, 222, 173, 139, 190, 128, 165, 64, 63, 86, 169, 30, 189, 26, 194, 179, 191, 40, 99, 157, 190, 14, 136, 205, 190, 237, 14, 23, 63, 148, 6, 59, 62, 217, 3, 241, 62, 246, 119, 59, 191, 10, 69, 70, 62, 11, 32, 89, 190, 192, 78, 178, 191, 17, 141, 96, 190, 18, 13, 3, 63, 10, 176, 147, 61, 143, 32, 40, 191, 199, 87, 222, 190, 204, 142, 184, 63, 135, 17, 146, 62, 71, 154, 222, 189, 176, 126, 96, 63, 15, 2, 244, 62, 112, 227, 214, 62, 232, 231, 197, 63, 226, 129, 165, 62, 117, 171, 15, 190, 251, 132, 26, 63, 172, 171, 154, 61, 53, 47, 24, 191, 150, 175, 131, 62, 13, 235, 41, 191, 23, 188, 161, 62, 167, 146, 143, 63, 99, 9, 201, 62, 159, 122, 223, 62, 173, 161, 195, 190, 231, 140, 242, 62, 218, 253, 41, 191, 187, 110, 124, 62, 233, 109, 222, 61, 161, 35, 216, 62, 174, 104, 160, 62, 232, 119, 204, 62, 45, 184, 34, 63, 23, 40, 3, 63, 100, 166, 57, 62, 43, 16, 30, 62, 164, 85, 34, 191, 225, 218, 32, 63, 158, 251, 9, 190, 146, 67, 189, 63, 81, 14, 1, 63, 202, 194, 49, 191, 145, 252, 199, 189, 89, 145, 21, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 83, 25, 191, 65, 36, 117, 62, 251, 126, 36, 190, 83, 65, 37, 63, 27, 16, 141, 190, 46, 53, 60, 191, 83, 235, 124, 191, 158, 132, 165, 62, 51, 218, 151, 190, 231, 240, 216, 190, 86, 89, 192, 62, 95, 202, 83, 62, 87, 109, 7, 63, 208, 154, 174, 62, 119, 190, 161, 62, 203, 162, 41, 63, 230, 220, 87, 62, 250, 163, 54, 62, 204, 253, 65, 190, 131, 133, 121, 190, 66, 233, 72, 190, 225, 190, 151, 62, 100, 105, 68, 63, 32, 60, 93, 190, 191, 232, 231, 189, 205, 151, 48, 191, 58, 193, 78, 63, 212, 209, 19, 61, 46, 219, 143, 190, 152, 161, 80, 57, 139, 241, 166, 190, 106, 72, 38, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 234, 157, 61, 255, 210, 87, 62, 159, 112, 135, 62, 108, 124, 143, 62, 47, 213, 17, 190, 7, 243, 132, 190, 37, 108, 222, 188, 188, 56, 30, 62, 11, 248, 83, 61, 162, 232, 78, 190, 34, 250, 172, 187, 91, 18, 45, 61, 51, 201, 213, 60, 70, 108, 252, 61, 81, 108, 54, 190, 106, 231, 85, 61, 253, 153, 187, 61, 251, 157, 153, 62, 94, 211, 51, 190, 5, 237, 66, 191, 187, 222, 186, 190, 215, 189, 62, 62, 105, 67, 131, 61, 10, 45, 109, 62, 116, 171, 138, 61, 183, 71, 77, 62, 112, 76, 7, 62, 2, 61, 56, 62, 82, 220, 90, 62, 116, 21, 173, 61, 173, 187, 206, 190, 231, 9, 20, 62, 211, 139, 146, 61, 21, 161, 43, 190, 224, 100, 77, 61, 50, 5, 142, 62, 237, 104, 29, 62, 143, 14, 55, 191, 198, 20, 58, 191, 6, 48, 195, 61, 136, 128, 92, 191, 2, 103, 16, 189, 238, 14, 143, 61, 253, 123, 114, 189, 27, 82, 140, 62, 241, 64, 159, 60, 100, 80, 167, 189, 208, 244, 21, 189, 31, 63, 44, 62, 120, 239, 106, 190, 225, 206, 96, 189, 21, 31, 41, 59, 148, 84, 62, 60, 129, 90, 194, 189, 146, 27, 43, 62, 151, 134, 234, 190, 95, 231, 203, 190, 93, 244, 237, 60, 12, 86, 207, 190, 167, 119, 205, 61, 142, 165, 84, 62, 130, 215, 209, 61, 74, 19, 177, 190, 171, 190, 141, 62, 176, 71, 245, 61, 76, 79, 95, 62, 21, 112, 39, 62, 175, 180, 147, 62, 187, 208, 1, 190, 125, 211, 30, 190, 144, 38, 31, 191, 160, 98, 84, 62, 119, 187, 127, 191, 2, 129, 95, 189, 40, 21, 176, 61, 87, 81, 146, 62, 98, 166, 188, 61, 128, 61, 38, 189, 255, 118, 207, 62, 198, 238, 186, 189, 168, 100, 4, 62, 242, 43, 225, 62, 103, 239, 215, 189, 68, 31, 179, 189, 255, 11, 153, 190, 6, 40, 52, 190, 65, 204, 163, 189, 185, 105, 146, 190, 18, 242, 189, 190, 108, 141, 199, 60, 44, 39, 242, 60, 37, 53, 57, 62, 62, 63, 89, 61, 86, 22, 1, 62, 50, 237, 194, 190, 148, 182, 200, 190, 107, 227, 148, 61, 92, 254, 41, 62, 50, 76, 149, 190, 184, 224, 218, 190, 59, 123, 95, 62, 17, 208, 137, 61, 46, 37, 15, 61, 84, 57, 41, 190, 111, 39, 204, 190, 7, 226, 78, 190, 176, 241, 140, 61, 238, 240, 89, 188, 79, 17, 142, 191, 95, 192, 53, 62, 32, 176, 152, 191, 99, 170, 2, 62, 117, 55, 45, 62, 250, 23, 50, 191, 3, 63, 39, 60, 156, 143, 110, 62, 157, 33, 175, 60, 195, 87, 169, 61, 141, 188, 27, 190, 170, 113, 153, 190, 214, 239, 42, 191, 209, 209, 81, 190, 126, 122, 53, 62, 40, 161, 134, 191, 12, 43, 179, 190, 141, 173, 28, 190, 54, 71, 244, 189, 55, 120, 190, 190, 126, 166, 205, 60, 92, 202, 190, 61, 116, 64, 219, 189, 217, 181, 135, 61, 153, 139, 80, 62, 7, 24, 44, 61, 33, 67, 2, 190, 3, 119, 33, 62, 42, 84, 101, 190, 118, 241, 94, 62, 60, 159, 201, 59, 188, 70, 105, 62, 95, 151, 146, 61, 253, 63, 215, 189, 157, 73, 14, 61, 22, 194, 30, 187, 32, 251, 76, 62, 89, 186, 86, 190, 34, 197, 61, 61, 30, 48, 28, 61, 241, 163, 71, 62, 237, 196, 166, 189, 199, 204, 124, 62, 252, 75, 239, 189, 20, 212, 144, 61, 97, 9, 147, 189, 97, 176, 228, 60, 229, 244, 247, 60, 254, 244, 214, 61, 215, 122, 45, 189, 228, 121, 84, 189, 98, 81, 159, 61, 238, 39, 49, 61, 125, 92, 218, 187, 108, 79, 201, 188, 174, 4, 133, 189, 225, 250, 76, 188, 204, 0, 173, 61, 27, 198, 180, 187, 21, 253, 205, 189, 16, 101, 188, 189, 113, 89, 211, 189, 186, 146, 157, 61, 79, 198, 190, 189, 88, 157, 35, 190, 41, 209, 200, 61, 187, 254, 196, 61, 57, 205, 254, 61, 68, 196, 32, 190, 160, 168, 227, 189, 44, 197, 21, 187, 212, 191, 29, 189, 131, 1, 139, 61, 223, 191, 34, 190, 168, 169, 51, 190, 52, 109, 45, 60, 121, 142, 193, 61, 97, 136, 174, 189, 243, 11, 146, 189, 209, 139, 198, 61, 134, 155, 25, 190, 16, 57, 129, 60, 216, 74, 63, 189, 220, 243, 71, 189, 64, 33, 31, 189, 146, 12, 189, 60, 7, 196, 250, 189, 199, 83, 82, 190, 17, 72, 31, 190, 19, 79, 248, 189, 117, 195, 150, 187, 100, 88, 228, 61, 14, 212, 52, 189, 121, 165, 243, 188, 198, 162, 215, 59, 228, 184, 134, 190, 139, 150, 250, 189, 153, 140, 48, 189, 174, 13, 131, 61, 107, 192, 168, 190, 234, 114, 46, 190, 163, 235, 9, 190, 250, 135, 15, 189, 74, 243, 68, 61, 28, 86, 26, 62, 77, 100, 174, 190, 1, 99, 63, 190, 14, 121, 133, 59, 52, 100, 197, 58, 139, 184, 149, 61, 193, 73, 68, 61, 41, 0, 230, 61, 228, 233, 241, 60, 170, 184, 186, 189, 116, 175, 233, 61, 142, 56, 118, 61, 223, 207, 22, 61, 117, 33, 29, 190, 33, 162, 220, 190, 4, 204, 11, 190, 170, 225, 86, 62, 157, 200, 54, 189, 24, 196, 5, 191, 66, 52, 107, 62, 250, 253, 247, 190, 108, 70, 76, 62, 182, 1, 3, 190, 221, 35, 127, 61, 208, 80, 210, 61, 242, 215, 19, 62, 229, 76, 84, 189, 100, 43, 128, 189, 43, 177, 52, 188, 88, 255, 62, 190, 144, 43, 178, 62, 115, 180, 178, 59, 145, 133, 137, 189, 212, 6, 152, 189, 239, 151, 36, 60, 72, 164, 166, 190, 238, 69, 176, 190, 221, 37, 135, 189, 214, 81, 44, 61, 42, 215, 18, 61, 20, 168, 129, 189, 224, 248, 130, 61, 105, 118, 131, 61, 3, 6, 96, 190, 123, 105, 3, 60, 222, 223, 19, 190, 18, 225, 80, 62, 80, 186, 191, 62, 41, 74, 100, 62, 111, 247, 148, 62, 0, 139, 202, 190, 251, 124, 79, 62, 182, 31, 132, 191, 172, 30, 133, 61, 16, 77, 94, 188, 158, 101, 170, 189, 47, 181, 80, 62, 61, 62, 78, 61, 190, 123, 144, 189, 89, 251, 226, 190, 209, 36, 241, 61, 174, 78, 69, 190, 252, 189, 122, 62, 49, 50, 92, 62, 88, 225, 61, 190, 212, 204, 227, 190, 220, 234, 194, 189, 50, 102, 139, 61, 95, 165, 226, 190, 192, 88, 129, 62, 226, 83, 171, 190, 43, 193, 199, 189, 193, 91, 59, 190, 242, 184, 158, 187, 110, 173, 13, 190, 22, 78, 1, 190, 63, 25, 46, 190, 16, 93, 133, 189, 22, 172, 149, 62, 244, 198, 167, 62, 224, 94, 115, 54, 138, 187, 60, 61, 0, 93, 18, 191, 106, 123, 103, 62, 21, 175, 51, 191, 110, 236, 28, 190, 160, 245, 154, 62, 31, 128, 146, 62, 161, 136, 107, 62, 7, 169, 130, 190, 152, 174, 72, 60, 97, 168, 113, 190, 195, 77, 167, 61, 145, 225, 227, 190, 119, 40, 65, 62, 106, 78, 15, 62, 93, 98, 208, 189, 31, 254, 122, 59, 133, 55, 26, 62, 21, 252, 164, 61, 246, 136, 5, 191, 236, 130, 51, 62, 227, 8, 16, 61, 166, 40, 139, 60, 130, 89, 191, 62, 206, 115, 246, 61, 45, 161, 104, 190, 54, 239, 24, 62, 212, 244, 141, 61, 238, 188, 153, 60, 207, 86, 64, 62, 115, 205, 89, 189, 232, 32, 155, 61, 29, 140, 58, 189, 101, 36, 237, 62, 251, 227, 57, 190, 203, 251, 250, 62, 27, 84, 38, 188, 174, 42, 24, 62, 12, 57, 142, 187, 129, 249, 33, 62, 192, 127, 129, 61, 152, 97, 254, 61, 64, 205, 65, 60, 136, 192, 31, 190, 231, 165, 222, 62, 220, 18, 62, 61, 222, 3, 217, 190, 161, 126, 68, 190, 42, 6, 13, 188, 220, 131, 55, 189, 113, 87, 150, 61, 151, 149, 242, 61, 155, 186, 239, 61, 52, 180, 5, 62, 226, 128, 40, 189, 3, 133, 17, 190, 164, 103, 28, 188, 186, 255, 6, 190, 246, 188, 68, 62, 222, 15, 45, 189, 14, 207, 41, 190, 100, 110, 25, 190, 27, 79, 73, 189, 155, 181, 2, 60, 34, 6, 254, 189, 233, 233, 3, 191, 118, 31, 145, 62, 148, 18, 47, 190, 101, 26, 132, 189, 206, 110, 67, 62, 131, 45, 94, 62, 187, 143, 106, 62, 118, 250, 240, 61, 219, 164, 166, 61, 183, 47, 183, 60, 133, 81, 3, 190, 232, 94, 238, 59, 71, 237, 191, 60, 249, 185, 61, 62, 188, 183, 71, 61, 147, 12, 153, 189, 174, 103, 98, 62, 148, 78, 169, 190, 84, 160, 139, 189, 155, 212, 43, 189, 242, 213, 3, 62, 86, 26, 207, 188, 163, 121, 70, 190, 119, 123, 166, 189, 39, 0, 225, 61, 83, 154, 140, 190, 39, 155, 7, 190, 122, 162, 147, 62, 86, 13, 164, 62, 96, 152, 193, 61, 18, 27, 228, 189, 255, 183, 234, 190, 223, 128, 68, 62, 15, 211, 93, 190, 189, 71, 239, 62, 159, 35, 174, 190, 214, 49, 89, 62, 100, 15, 16, 62, 222, 101, 104, 188, 17, 77, 176, 189, 130, 107, 202, 190, 203, 37, 166, 188, 48, 216, 207, 61, 254, 16, 178, 189, 223, 31, 121, 189, 83, 199, 70, 191, 244, 145, 112, 190, 139, 200, 56, 62, 56, 69, 74, 61, 156, 94, 19, 62, 118, 97, 27, 62, 125, 156, 209, 61, 37, 224, 102, 61, 25, 3, 16, 62, 31, 244, 74, 62, 224, 132, 161, 62, 252, 68, 209, 190, 187, 186, 83, 189, 232, 26, 143, 61, 180, 149, 240, 189, 92, 39, 245, 61, 5, 134, 145, 189, 97, 201, 188, 60, 91, 206, 114, 189, 249, 160, 185, 61, 84, 155, 240, 189, 73, 167, 73, 189, 120, 9, 220, 189, 85, 214, 245, 189, 200, 154, 227, 187, 145, 251, 142, 188, 85, 86, 67, 61, 200, 160, 12, 190, 185, 210, 29, 190, 113, 247, 138, 61, 156, 52, 196, 60, 71, 110, 131, 60, 199, 106, 186, 61, 208, 243, 216, 189, 227, 81, 208, 189, 30, 68, 167, 189, 131, 238, 223, 61, 239, 76, 96, 61, 145, 240, 33, 61, 111, 37, 234, 61, 152, 118, 231, 189, 149, 56, 208, 61, 164, 140, 94, 189, 215, 171, 136, 189, 160, 196, 7, 62, 34, 167, 204, 189, 198, 184, 131, 188, 219, 37, 2, 62, 43, 223, 133, 189, 183, 70, 15, 190, 22, 86, 45, 190, 204, 56, 116, 61, 87, 148, 111, 189, 165, 216, 50, 190, 199, 57, 239, 61, 247, 204, 244, 188, 211, 2, 4, 62, 79, 27, 29, 189, 138, 203, 228, 189, 160, 77, 197, 60, 219, 33, 40, 190, 24, 251, 156, 59, 38, 88, 232, 189, 44, 50, 109, 188, 141, 77, 189, 61, 232, 79, 106, 189, 42, 149, 252, 59, 245, 162, 39, 62, 106, 247, 139, 61, 150, 31, 192, 61, 253, 180, 3, 62, 59, 43, 79, 60, 154, 170, 43, 61, 200, 157, 234, 188, 103, 236, 106, 189, 124, 185, 18, 190, 148, 80, 153, 189, 138, 230, 37, 62, 243, 117, 136, 190, 149, 192, 165, 190, 224, 145, 54, 62, 77, 43, 182, 61, 31, 25, 247, 190, 185, 153, 49, 191, 10, 187, 144, 189, 240, 44, 176, 191, 126, 222, 158, 62, 187, 29, 128, 190, 231, 188, 77, 189, 17, 206, 242, 60, 47, 155, 106, 62, 172, 180, 49, 190, 220, 33, 154, 189, 135, 98, 156, 62, 93, 134, 4, 60, 5, 89, 241, 190, 110, 111, 150, 62, 77, 205, 201, 189, 238, 250, 48, 190, 245, 32, 219, 189, 46, 82, 224, 190, 106, 121, 230, 190, 157, 67, 134, 189, 127, 236, 2, 62, 208, 176, 15, 190, 193, 238, 178, 190, 27, 85, 161, 61, 245, 122, 222, 189, 185, 100, 70, 191, 148, 214, 255, 61, 98, 234, 59, 190, 161, 206, 149, 191, 48, 96, 193, 189, 60, 180, 151, 188, 58, 168, 91, 62, 34, 108, 241, 62, 157, 38, 151, 62, 71, 179, 219, 190, 178, 58, 49, 188, 26, 190, 156, 189, 19, 204, 22, 61, 94, 93, 46, 62, 34, 241, 30, 188, 184, 100, 230, 61, 56, 150, 11, 62, 160, 205, 151, 189, 109, 235, 35, 191, 28, 40, 42, 188, 132, 237, 110, 62, 64, 228, 144, 61, 188, 12, 62, 62, 245, 122, 11, 61, 115, 205, 109, 190, 12, 137, 142, 190, 205, 174, 90, 190, 128, 249, 150, 189, 242, 13, 6, 190, 215, 178, 31, 62, 152, 116, 1, 191, 17, 22, 223, 62, 119, 111, 102, 190, 116, 126, 196, 189, 127, 10, 59, 62, 31, 231, 138, 62, 244, 193, 80, 188, 104, 72, 183, 190, 188, 167, 218, 190, 245, 160, 37, 190, 99, 56, 121, 190, 137, 43, 217, 60, 11, 251, 117, 191, 152, 87, 183, 61, 255, 91, 188, 187, 125, 253, 10, 62, 211, 104, 24, 189, 84, 218, 75, 189, 138, 150, 52, 62, 158, 50, 230, 189, 36, 167, 24, 62, 223, 189, 163, 190, 75, 94, 204, 188, 27, 70, 37, 191, 235, 74, 150, 62, 234, 110, 214, 62, 155, 2, 157, 62, 149, 220, 251, 61, 154, 233, 168, 189, 194, 116, 122, 62, 137, 128, 190, 60, 211, 231, 91, 189, 20, 230, 190, 61, 220, 214, 204, 190, 4, 53, 123, 61, 230, 3, 10, 62, 21, 79, 43, 62, 129, 184, 6, 190, 163, 52, 225, 190, 215, 128, 158, 190, 143, 13, 165, 190, 198, 213, 235, 190, 168, 248, 83, 60, 131, 44, 195, 62, 189, 200, 80, 191, 196, 66, 244, 61, 49, 42, 19, 190, 192, 174, 99, 61, 229, 47, 31, 61, 200, 84, 126, 187, 134, 169, 21, 63, 11, 99, 137, 191, 51, 75, 181, 62, 50, 152, 91, 190, 229, 70, 246, 190, 201, 87, 76, 191, 196, 161, 190, 62, 13, 11, 196, 62, 159, 114, 1, 189, 72, 89, 148, 189, 150, 59, 145, 190, 240, 186, 201, 62, 126, 192, 24, 61, 108, 61, 133, 62, 149, 176, 57, 62, 240, 68, 89, 191, 16, 150, 126, 60, 79, 178, 185, 60, 255, 80, 2, 191, 104, 143, 144, 190, 114, 244, 18, 191, 135, 234, 220, 61, 16, 90, 144, 190, 84, 11, 200, 190, 154, 46, 43, 190, 84, 225, 130, 190, 7, 187, 38, 62, 244, 177, 164, 190, 48, 163, 220, 62, 131, 103, 153, 191, 222, 156, 65, 62, 237, 121, 96, 191, 155, 24, 16, 189, 23, 149, 163, 61, 112, 50, 241, 190, 113, 203, 138, 189, 123, 218, 61, 62, 249, 247, 159, 61, 204, 179, 229, 189, 145, 179, 28, 62, 207, 3, 0, 190, 124, 243, 72, 190, 184, 152, 214, 189, 148, 210, 133, 62, 94, 240, 238, 189, 138, 84, 50, 191, 180, 87, 40, 61, 190, 167, 208, 59, 59, 217, 94, 191, 229, 188, 170, 61, 239, 120, 47, 62, 234, 189, 4, 62, 119, 225, 194, 190, 109, 136, 226, 189, 137, 81, 142, 190, 169, 80, 175, 61, 47, 33, 102, 190, 206, 73, 230, 189, 243, 166, 176, 190, 44, 164, 76, 61, 47, 176, 179, 59, 53, 142, 10, 188, 27, 12, 172, 61, 191, 60, 28, 189, 56, 51, 228, 189, 60, 5, 161, 190, 253, 255, 143, 62, 36, 80, 136, 190, 201, 198, 204, 190, 135, 220, 63, 190, 31, 190, 49, 191, 15, 92, 147, 59, 76, 193, 117, 62, 191, 175, 155, 62, 167, 159, 187, 189, 165, 196, 157, 62, 58, 229, 48, 190, 52, 246, 152, 190, 183, 48, 128, 62, 203, 207, 47, 191, 140, 155, 19, 61, 184, 93, 186, 189, 139, 78, 26, 62, 21, 47, 139, 62, 187, 22, 26, 61, 73, 1, 57, 190, 16, 136, 241, 189, 51, 85, 176, 61, 226, 139, 16, 190, 128, 5, 218, 62, 179, 229, 191, 189, 53, 242, 209, 60, 224, 141, 139, 190, 86, 77, 23, 62, 4, 224, 61, 62, 111, 14, 27, 190, 0, 135, 214, 61, 128, 220, 198, 189, 136, 64, 67, 62, 166, 88, 128, 190, 213, 89, 75, 191, 95, 221, 172, 190, 13, 200, 63, 189, 151, 50, 16, 189, 11, 208, 161, 62, 115, 237, 107, 62, 147, 153, 161, 62, 40, 233, 191, 61, 158, 167, 127, 61, 159, 241, 46, 62, 232, 33, 87, 62, 247, 105, 239, 190, 221, 140, 198, 61, 3, 98, 235, 189, 137, 38, 25, 190, 3, 35, 237, 189, 90, 53, 62, 62, 30, 26, 202, 62, 173, 170, 196, 189, 100, 39, 176, 190, 191, 231, 164, 61, 36, 122, 165, 190, 255, 82, 130, 61, 101, 59, 84, 61, 49, 87, 150, 62, 247, 77, 91, 61, 210, 196, 90, 61, 217, 241, 145, 62, 206, 138, 45, 190, 248, 248, 153, 62, 116, 248, 126, 62, 169, 32, 133, 61, 59, 238, 135, 60, 120, 205, 45, 61, 181, 39, 160, 188, 179, 42, 35, 190, 199, 100, 223, 190, 82, 160, 61, 190, 244, 65, 88, 190, 254, 235, 189, 61, 229, 47, 131, 190, 50, 201, 103, 190, 203, 24, 130, 190, 188, 35, 53, 62, 203, 252, 239, 190, 230, 156, 104, 189, 102, 194, 147, 62, 98, 71, 230, 61, 255, 11, 136, 189, 215, 22, 21, 190, 183, 41, 72, 191, 90, 154, 26, 63, 12, 81, 71, 191, 148, 147, 200, 61, 3, 251, 84, 190, 83, 66, 68, 62, 215, 44, 113, 189, 175, 15, 253, 189, 91, 117, 27, 191, 66, 244, 181, 62, 110, 138, 62, 62, 142, 202, 42, 61, 200, 90, 146, 188, 119, 22, 168, 190, 132, 11, 72, 61, 206, 114, 16, 191, 64, 122, 190, 62, 128, 189, 137, 62, 123, 25, 239, 61, 198, 69, 149, 61, 25, 239, 102, 60, 143, 149, 5, 63, 101, 231, 13, 190, 184, 108, 228, 62, 163, 230, 209, 190, 0, 134, 136, 190, 13, 163, 5, 62, 251, 254, 16, 60, 179, 110, 98, 62, 121, 26, 62, 190, 47, 52, 32, 190, 155, 132, 16, 61, 26, 19, 17, 62, 99, 103, 159, 62, 203, 253, 34, 190, 21, 28, 80, 62, 28, 222, 182, 60, 61, 236, 148, 62, 117, 59, 238, 189, 125, 73, 161, 60, 230, 196, 199, 61, 187, 241, 7, 189, 76, 62, 246, 188, 91, 237, 49, 190, 113, 86, 228, 61, 28, 102, 22, 190, 120, 145, 134, 190, 61, 133, 171, 188, 81, 111, 184, 62, 138, 238, 153, 188, 64, 175, 64, 62, 16, 74, 34, 62, 178, 191, 236, 59, 17, 234, 132, 189, 236, 85, 140, 61, 182, 141, 75, 62, 183, 12, 112, 62, 71, 103, 236, 61, 154, 208, 52, 62, 175, 221, 21, 190, 140, 88, 167, 190, 121, 38, 197, 190, 208, 118, 181, 189, 235, 2, 209, 62, 59, 131, 191, 189, 237, 29, 100, 191, 196, 168, 156, 62, 26, 18, 29, 191, 95, 254, 89, 60, 156, 108, 253, 189, 105, 12, 147, 61, 42, 106, 30, 61, 88, 113, 152, 62, 154, 224, 175, 189, 85, 6, 143, 61, 211, 97, 133, 62, 69, 63, 59, 61, 50, 86, 103, 62, 134, 208, 33, 62, 126, 11, 45, 62, 147, 24, 172, 189, 34, 13, 6, 190, 143, 88, 237, 190, 212, 244, 166, 190, 247, 166, 124, 190, 15, 100, 176, 61, 105, 103, 94, 62, 32, 96, 206, 189, 209, 154, 74, 190, 120, 199, 194, 188, 97, 136, 165, 191, 157, 52, 188, 189, 199, 208, 184, 62, 170, 202, 142, 63, 5, 57, 229, 62, 59, 23, 144, 190, 74, 209, 137, 62, 14, 7, 227, 61, 81, 86, 135, 189, 87, 86, 75, 191, 215, 50, 62, 58, 60, 193, 220, 188, 147, 146, 80, 189, 134, 249, 211, 59, 73, 223, 95, 190, 180, 141, 86, 190, 37, 181, 25, 189, 115, 140, 155, 62, 10, 218, 46, 191, 120, 52, 1, 62, 206, 93, 254, 61, 191, 35, 200, 61, 223, 108, 140, 190, 169, 72, 14, 62, 9, 31, 12, 62, 212, 228, 84, 190, 255, 163, 182, 61, 25, 24, 102, 190, 47, 150, 101, 190, 1, 180, 184, 61, 228, 184, 7, 191, 115, 123, 137, 62, 47, 53, 180, 62, 207, 187, 144, 189, 244, 107, 192, 62, 232, 0, 223, 60, 223, 152, 147, 62, 217, 188, 176, 190, 22, 81, 250, 190, 149, 160, 232, 60, 252, 115, 144, 190, 75, 231, 194, 62, 193, 17, 163, 190, 104, 49, 64, 60, 143, 94, 66, 187, 12, 187, 213, 61, 163, 87, 189, 189, 28, 59, 12, 191, 20, 131, 69, 62, 32, 92, 169, 61, 136, 8, 9, 191, 179, 117, 55, 190, 122, 102, 234, 190, 235, 28, 200, 190, 118, 185, 2, 62, 93, 75, 110, 62, 24, 56, 181, 61, 251, 20, 5, 62, 4, 15, 58, 62, 51, 107, 68, 189, 12, 190, 0, 62, 209, 210, 149, 61, 164, 203, 102, 60, 194, 30, 191, 190, 191, 37, 81, 60, 196, 147, 197, 189, 197, 83, 95, 60, 111, 67, 103, 61, 161, 234, 185, 189, 118, 62, 8, 61, 78, 104, 243, 61, 105, 78, 9, 190, 240, 205, 17, 188, 24, 79, 254, 61, 111, 26, 211, 189, 11, 58, 255, 189, 96, 97, 17, 190, 65, 138, 231, 188, 208, 87, 234, 189, 208, 39, 27, 62, 172, 24, 228, 61, 104, 81, 254, 189, 17, 18, 140, 189, 120, 213, 188, 188, 200, 70, 255, 61, 109, 185, 194, 61, 94, 25, 45, 189, 179, 47, 109, 189, 87, 246, 2, 190, 49, 97, 15, 189, 19, 175, 253, 61, 54, 12, 185, 189, 197, 191, 1, 62, 76, 53, 242, 61, 180, 142, 179, 61, 235, 211, 165, 189, 217, 57, 170, 188, 12, 7, 25, 62, 149, 189, 48, 62, 117, 88, 18, 191, 230, 150, 34, 191, 148, 75, 15, 188, 248, 108, 130, 190, 26, 255, 61, 62, 163, 13, 58, 61, 234, 122, 4, 190, 10, 180, 70, 60, 133, 247, 7, 59, 16, 61, 169, 60, 147, 26, 164, 191, 227, 33, 202, 61, 208, 8, 201, 191, 41, 24, 35, 62, 4, 215, 57, 190, 80, 204, 70, 191, 237, 217, 214, 189, 58, 101, 135, 62, 38, 157, 72, 62, 115, 159, 13, 62, 83, 22, 158, 62, 191, 112, 157, 189, 149, 65, 127, 190, 148, 19, 185, 188, 224, 79, 90, 62, 5, 167, 182, 60, 108, 229, 26, 62, 29, 41, 39, 190, 50, 108, 151, 62, 137, 240, 75, 191, 42, 94, 14, 189, 78, 213, 128, 62, 58, 14, 219, 61, 89, 114, 83, 61, 24, 102, 14, 190, 183, 245, 159, 190, 115, 233, 253, 62, 188, 99, 100, 190, 166, 173, 230, 62, 10, 25, 5, 191, 18, 199, 97, 62, 2, 195, 72, 190, 170, 189, 199, 61, 166, 104, 254, 189, 143, 115, 118, 190, 177, 14, 172, 61, 159, 75, 245, 189, 238, 67, 107, 61, 143, 170, 116, 190, 131, 222, 235, 190, 104, 95, 226, 190, 64, 99, 23, 189, 225, 168, 109, 62, 32, 94, 195, 61, 17, 159, 25, 188, 201, 199, 143, 190, 243, 238, 58, 62, 95, 113, 155, 61, 114, 240, 151, 62, 230, 97, 177, 62, 157, 161, 96, 191, 160, 145, 5, 189, 158, 26, 170, 61, 40, 77, 175, 61, 24, 65, 183, 60, 251, 1, 184, 189, 95, 231, 184, 60, 236, 73, 120, 62, 213, 10, 93, 62, 170, 43, 188, 189, 245, 100, 203, 188, 160, 249, 66, 62, 114, 246, 20, 190, 58, 174, 177, 189, 87, 123, 123, 62, 58, 242, 140, 61, 78, 74, 173, 190, 62, 23, 95, 189, 97, 107, 231, 61, 181, 141, 248, 190, 251, 115, 197, 189, 178, 157, 27, 62, 217, 178, 37, 189, 252, 122, 12, 188, 55, 78, 131, 189, 194, 10, 203, 190, 55, 39, 45, 62, 81, 189, 238, 60, 18, 74, 67, 190, 160, 10, 216, 61, 108, 34, 134, 61, 4, 67, 133, 189, 239, 27, 78, 62, 219, 229, 133, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {7, 98, 136, 61, 85, 170, 217, 189, 248, 161, 41, 62, 128, 10, 65, 189, 215, 148, 128, 62, 171, 15, 226, 60, 34, 70, 152, 190, 243, 164, 80, 62, 15, 213, 53, 189, 19, 245, 165, 62, 105, 196, 52, 190, 50, 98, 159, 62, 193, 215, 107, 61, 22, 101, 12, 190, 165, 15, 134, 189, 140, 70, 97, 62, 187, 157, 23, 62, 210, 213, 189, 62, 99, 62, 186, 61, 138, 243, 5, 190, 47, 193, 232, 187, 125, 56, 41, 62, 165, 127, 147, 189, 181, 120, 154, 62, 16, 237, 255, 189, 119, 71, 146, 61, 104, 195, 99, 189, 202, 5, 139, 61, 50, 249, 62, 190, 72, 7, 131, 61, 66, 172, 139, 62, 69, 46, 184, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {253, 208, 132, 190, 122, 228, 4, 63, 59, 169, 15, 63, 97, 132, 139, 63, 172, 65, 239, 60, 101, 140, 83, 60, 10, 118, 151, 61, 75, 118, 135, 62, 237, 95, 32, 63, 138, 225, 139, 62, 249, 231, 41, 190, 222, 66, 131, 62, 88, 98, 229, 190, 187, 255, 210, 61, 251, 228, 6, 190, 172, 204, 117, 63, 93, 205, 42, 63, 34, 85, 75, 191, 8, 205, 156, 191, 154, 51, 39, 63, 21, 182, 22, 191, 222, 5, 190, 190, 100, 99, 19, 62, 178, 88, 159, 63, 235, 245, 1, 190, 135, 68, 88, 63, 219, 223, 247, 62, 79, 12, 250, 190, 124, 175, 211, 61, 181, 252, 31, 63, 178, 100, 234, 190, 67, 34, 175, 189, 66, 102, 165, 190, 171, 231, 27, 190, 78, 236, 234, 61, 35, 125, 63, 62, 16, 86, 26, 190, 247, 170, 28, 61, 136, 66, 123, 60, 142, 205, 192, 60, 152, 62, 199, 62, 98, 108, 150, 190, 253, 117, 23, 62, 27, 191, 173, 189, 62, 232, 114, 61, 1, 15, 187, 189, 123, 24, 12, 62, 66, 124, 246, 188, 58, 166, 198, 60, 142, 48, 229, 189, 181, 214, 75, 62, 194, 138, 168, 61, 154, 213, 115, 62, 66, 48, 19, 189, 12, 49, 150, 62, 114, 65, 1, 62, 200, 145, 18, 62, 211, 210, 151, 62, 203, 85, 134, 61, 161, 219, 60, 60, 64, 242, 182, 189, 84, 241, 209, 61, 187, 168, 99, 61, 141, 160, 121, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 204, 2, 190, 0, 202, 28, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {147, 25, 84, 62, 133, 54, 142, 191, 195, 28, 158, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {120, 104, 247, 63, 130, 195, 251, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0083/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}