// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 72, 254, 190, 1, 123, 193, 187, 98, 90, 60, 60, 151, 155, 154, 190, 113, 162, 25, 63, 70, 69, 59, 191, 159, 113, 176, 190, 131, 238, 129, 191, 116, 142, 135, 62, 116, 248, 6, 63, 153, 172, 237, 190, 226, 123, 76, 62, 225, 98, 242, 188, 176, 60, 158, 190, 105, 138, 201, 62, 46, 168, 253, 62, 67, 63, 130, 190, 17, 102, 16, 191, 98, 95, 104, 63, 80, 202, 61, 63, 165, 26, 202, 62, 190, 228, 132, 63, 86, 205, 35, 191, 101, 57, 255, 190, 250, 241, 53, 63, 226, 7, 154, 63, 155, 213, 155, 62, 50, 130, 15, 189, 188, 59, 202, 59, 170, 136, 16, 63, 9, 149, 245, 189, 246, 143, 102, 189, 21, 205, 31, 190, 205, 33, 249, 190, 19, 70, 238, 190, 9, 67, 76, 62, 181, 212, 192, 62, 80, 124, 35, 191, 144, 118, 69, 190, 179, 38, 172, 190, 244, 115, 154, 190, 157, 60, 66, 63, 139, 3, 164, 60, 245, 198, 171, 191, 234, 222, 152, 190, 190, 187, 208, 190, 92, 121, 13, 63, 5, 77, 30, 62, 118, 4, 213, 62, 176, 122, 80, 191, 166, 61, 65, 62, 31, 137, 67, 190, 80, 244, 166, 191, 124, 230, 69, 190, 237, 172, 251, 62, 242, 32, 213, 61, 40, 206, 40, 191, 165, 238, 245, 190, 227, 218, 173, 63, 250, 250, 145, 62, 105, 42, 11, 190, 186, 9, 74, 63, 18, 237, 1, 63, 161, 88, 210, 62, 126, 45, 185, 63, 248, 214, 157, 62, 180, 47, 1, 190, 246, 59, 22, 63, 84, 254, 194, 61, 251, 231, 3, 191, 138, 245, 138, 62, 185, 129, 47, 191, 254, 61, 160, 62, 148, 189, 138, 63, 241, 54, 204, 62, 248, 195, 158, 62, 51, 43, 181, 190, 110, 31, 255, 62, 171, 203, 38, 191, 110, 199, 94, 62, 218, 63, 214, 61, 53, 69, 230, 62, 25, 225, 77, 62, 125, 132, 231, 62, 71, 136, 45, 63, 111, 45, 240, 62, 69, 210, 35, 62, 28, 195, 238, 61, 231, 155, 32, 191, 0, 159, 41, 63, 147, 38, 49, 190, 167, 112, 171, 63, 143, 103, 18, 63, 184, 220, 33, 191, 54, 216, 138, 188, 230, 32, 44, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 83, 25, 191, 0, 54, 156, 62, 18, 69, 41, 190, 57, 196, 36, 63, 1, 73, 140, 190, 203, 110, 52, 191, 90, 233, 115, 191, 197, 33, 168, 62, 132, 32, 153, 190, 71, 180, 212, 190, 120, 118, 198, 62, 25, 46, 89, 62, 20, 168, 12, 63, 222, 163, 160, 62, 156, 152, 145, 62, 17, 228, 43, 63, 147, 80, 116, 62, 55, 240, 37, 62, 20, 1, 61, 190, 229, 83, 86, 190, 215, 63, 83, 190, 254, 178, 166, 62, 98, 186, 67, 63, 155, 15, 59, 190, 171, 209, 225, 189, 42, 55, 41, 191, 14, 236, 78, 63, 166, 176, 186, 61, 108, 248, 112, 190, 160, 14, 3, 189, 211, 150, 161, 190, 143, 160, 29, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 234, 157, 61, 143, 36, 96, 62, 141, 58, 136, 62, 55, 70, 141, 62, 84, 67, 22, 190, 69, 226, 132, 190, 21, 155, 111, 189, 170, 106, 19, 62, 244, 134, 132, 61, 3, 74, 79, 190, 106, 220, 16, 60, 49, 64, 62, 61, 225, 5, 14, 60, 175, 26, 255, 61, 208, 2, 32, 190, 80, 64, 172, 61, 166, 204, 145, 61, 201, 255, 122, 62, 154, 42, 54, 190, 64, 20, 23, 191, 5, 202, 175, 190, 56, 184, 29, 62, 8, 247, 176, 61, 109, 234, 122, 62, 209, 88, 170, 61, 116, 196, 66, 62, 147, 137, 48, 62, 115, 65, 53, 62, 173, 62, 93, 62, 68, 27, 165, 61, 118, 103, 179, 190, 73, 23, 30, 62, 211, 139, 146, 61, 70, 94, 186, 190, 134, 91, 17, 61, 117, 205, 142, 62, 128, 142, 30, 62, 24, 202, 51, 191, 133, 132, 37, 191, 192, 122, 199, 61, 196, 165, 92, 191, 19, 208, 251, 188, 196, 41, 112, 61, 21, 170, 136, 189, 29, 228, 139, 62, 111, 93, 170, 60, 208, 240, 136, 189, 242, 164, 100, 189, 245, 183, 53, 62, 238, 86, 91, 190, 179, 56, 179, 189, 165, 73, 229, 60, 21, 160, 12, 61, 124, 210, 210, 189, 140, 77, 24, 62, 234, 105, 2, 191, 107, 188, 197, 190, 157, 35, 196, 60, 167, 167, 216, 190, 9, 93, 204, 61, 193, 93, 76, 62, 229, 21, 213, 61, 1, 219, 150, 190, 121, 84, 81, 62, 176, 71, 245, 61, 34, 117, 231, 61, 80, 51, 35, 62, 133, 215, 141, 62, 62, 201, 230, 189, 180, 47, 78, 190, 62, 227, 4, 191, 182, 146, 47, 62, 196, 58, 126, 191, 51, 231, 24, 189, 123, 154, 10, 61, 57, 126, 146, 62, 15, 11, 116, 61, 173, 64, 233, 188, 18, 242, 192, 62, 142, 173, 229, 189, 218, 7, 7, 62, 173, 29, 218, 62, 112, 102, 62, 190, 255, 90, 0, 189, 120, 176, 134, 190, 117, 164, 69, 190, 158, 202, 250, 189, 54, 12, 163, 190, 120, 40, 168, 190, 175, 117, 30, 61, 185, 240, 231, 59, 142, 140, 64, 62, 84, 52, 40, 61, 189, 20, 13, 62, 123, 165, 166, 190, 249, 160, 223, 190, 107, 227, 148, 61, 19, 116, 72, 62, 185, 202, 187, 190, 89, 136, 229, 190, 87, 113, 131, 61, 97, 55, 246, 61, 46, 37, 15, 61, 228, 241, 166, 188, 140, 193, 232, 190, 238, 231, 132, 190, 26, 175, 203, 61, 139, 229, 168, 187, 99, 79, 107, 191, 150, 231, 72, 62, 247, 197, 79, 191, 2, 197, 38, 62, 10, 125, 0, 62, 99, 35, 21, 191, 140, 197, 179, 61, 32, 170, 149, 62, 81, 71, 201, 61, 184, 82, 15, 62, 181, 214, 233, 189, 167, 247, 147, 190, 194, 175, 7, 191, 209, 209, 81, 190, 120, 115, 85, 62, 114, 113, 95, 191, 241, 132, 147, 190, 12, 227, 132, 190, 209, 226, 23, 189, 83, 153, 173, 190, 126, 166, 205, 60, 92, 112, 200, 61, 138, 37, 230, 189, 14, 15, 112, 61, 214, 33, 105, 62, 189, 48, 15, 61, 95, 55, 157, 189, 59, 231, 25, 62, 220, 43, 137, 190, 119, 91, 115, 62, 233, 189, 75, 60, 171, 60, 98, 62, 158, 154, 103, 61, 92, 68, 199, 189, 168, 37, 26, 61, 67, 194, 155, 187, 182, 242, 102, 62, 92, 175, 83, 190, 105, 235, 23, 61, 108, 198, 24, 61, 112, 39, 83, 62, 244, 228, 196, 189, 204, 65, 96, 62, 170, 51, 185, 189, 219, 214, 111, 61, 10, 254, 46, 189, 27, 235, 25, 61, 185, 73, 51, 61, 95, 214, 181, 61, 236, 34, 195, 188, 85, 160, 32, 189, 223, 177, 186, 61, 238, 39, 49, 61, 125, 92, 218, 187, 108, 79, 201, 188, 174, 4, 133, 189, 225, 250, 76, 188, 204, 0, 173, 61, 27, 198, 180, 187, 21, 253, 205, 189, 16, 101, 188, 189, 113, 89, 211, 189, 186, 146, 157, 61, 79, 198, 190, 189, 88, 157, 35, 190, 41, 209, 200, 61, 187, 254, 196, 61, 57, 205, 254, 61, 68, 196, 32, 190, 160, 168, 227, 189, 44, 197, 21, 187, 212, 191, 29, 189, 131, 1, 139, 61, 223, 191, 34, 190, 168, 169, 51, 190, 52, 109, 45, 60, 121, 142, 193, 61, 97, 136, 174, 189, 243, 11, 146, 189, 209, 139, 198, 61, 134, 155, 25, 190, 16, 57, 129, 60, 216, 74, 63, 189, 220, 243, 71, 189, 64, 33, 31, 189, 146, 12, 189, 60, 7, 196, 250, 189, 199, 83, 82, 190, 17, 72, 31, 190, 19, 79, 248, 189, 117, 195, 150, 187, 100, 88, 228, 61, 14, 212, 52, 189, 121, 165, 243, 188, 198, 162, 215, 59, 228, 184, 134, 190, 139, 150, 250, 189, 153, 140, 48, 189, 174, 13, 131, 61, 107, 192, 168, 190, 234, 114, 46, 190, 163, 235, 9, 190, 250, 135, 15, 189, 74, 243, 68, 61, 28, 86, 26, 62, 77, 100, 174, 190, 1, 99, 63, 190, 14, 121, 133, 59, 52, 100, 197, 58, 139, 184, 149, 61, 193, 73, 68, 61, 41, 0, 230, 61, 228, 233, 241, 60, 170, 184, 186, 189, 116, 175, 233, 61, 142, 56, 118, 61, 223, 207, 22, 61, 16, 124, 37, 190, 20, 93, 226, 190, 9, 77, 11, 190, 188, 223, 84, 62, 116, 165, 67, 189, 219, 70, 214, 190, 118, 202, 101, 62, 233, 86, 234, 190, 111, 243, 76, 62, 118, 53, 0, 190, 211, 224, 98, 61, 167, 183, 202, 61, 73, 145, 18, 62, 36, 37, 35, 189, 250, 69, 141, 189, 73, 114, 0, 60, 213, 23, 198, 189, 1, 50, 167, 62, 49, 179, 50, 189, 227, 221, 115, 189, 156, 41, 132, 189, 234, 253, 128, 187, 68, 156, 136, 190, 190, 175, 159, 190, 133, 246, 130, 189, 20, 76, 12, 61, 61, 65, 43, 61, 72, 183, 101, 189, 195, 88, 132, 61, 238, 0, 160, 61, 55, 237, 54, 190, 123, 105, 3, 60, 152, 42, 34, 190, 202, 5, 42, 62, 2, 153, 195, 62, 140, 64, 83, 62, 43, 172, 140, 62, 127, 253, 171, 190, 41, 223, 84, 62, 95, 109, 122, 191, 209, 227, 69, 61, 2, 1, 156, 188, 45, 234, 242, 189, 226, 111, 90, 62, 204, 250, 59, 61, 39, 65, 157, 189, 38, 27, 199, 190, 167, 149, 18, 62, 34, 152, 22, 190, 45, 232, 103, 62, 96, 118, 99, 62, 78, 97, 64, 190, 174, 13, 172, 190, 168, 137, 156, 189, 118, 51, 133, 61, 106, 147, 200, 190, 28, 3, 107, 62, 31, 193, 155, 190, 237, 162, 156, 189, 233, 207, 42, 190, 246, 244, 83, 187, 72, 176, 239, 189, 22, 49, 8, 190, 63, 25, 46, 190, 24, 1, 135, 189, 245, 1, 139, 62, 239, 169, 161, 62, 174, 89, 229, 59, 237, 235, 25, 61, 74, 9, 242, 190, 194, 181, 94, 62, 122, 230, 47, 191, 176, 115, 16, 190, 65, 65, 151, 62, 77, 136, 136, 62, 187, 64, 93, 62, 42, 85, 128, 190, 84, 38, 78, 184, 253, 115, 82, 190, 85, 44, 173, 61, 133, 163, 214, 190, 117, 189, 55, 62, 202, 234, 84, 62, 87, 164, 133, 189, 181, 235, 155, 61, 233, 55, 24, 62, 241, 173, 192, 61, 74, 240, 240, 190, 224, 15, 53, 62, 70, 243, 106, 61, 248, 40, 13, 61, 245, 55, 189, 62, 22, 205, 1, 62, 109, 227, 36, 190, 35, 196, 30, 62, 212, 244, 141, 61, 213, 202, 248, 59, 107, 30, 61, 62, 255, 210, 137, 188, 119, 45, 79, 61, 212, 7, 62, 189, 190, 38, 194, 62, 28, 209, 58, 190, 91, 128, 0, 63, 51, 156, 6, 189, 138, 140, 11, 62, 253, 198, 110, 188, 125, 250, 58, 62, 177, 220, 95, 61, 245, 5, 40, 62, 221, 145, 23, 60, 219, 216, 14, 190, 21, 237, 223, 62, 111, 92, 2, 61, 112, 181, 180, 190, 150, 35, 79, 190, 211, 97, 127, 189, 241, 83, 131, 188, 189, 96, 132, 61, 225, 62, 5, 62, 255, 83, 192, 61, 210, 12, 1, 62, 111, 181, 255, 188, 223, 47, 224, 189, 106, 147, 124, 188, 200, 81, 5, 190, 34, 222, 63, 62, 222, 15, 45, 189, 116, 245, 36, 190, 163, 10, 45, 190, 75, 39, 93, 189, 235, 160, 142, 60, 164, 251, 203, 189, 46, 77, 218, 190, 216, 234, 142, 62, 150, 171, 57, 190, 184, 200, 96, 189, 102, 19, 68, 62, 29, 107, 90, 62, 74, 247, 99, 62, 156, 118, 253, 61, 30, 62, 138, 61, 130, 18, 120, 60, 218, 112, 224, 189, 122, 144, 175, 60, 38, 75, 75, 60, 249, 200, 41, 62, 251, 141, 132, 61, 253, 97, 168, 189, 32, 166, 77, 62, 125, 229, 123, 190, 202, 94, 94, 189, 33, 247, 231, 188, 69, 69, 250, 61, 182, 201, 91, 188, 28, 211, 70, 190, 213, 21, 154, 189, 254, 255, 255, 61, 4, 199, 108, 190, 39, 155, 7, 190, 253, 95, 155, 62, 184, 235, 155, 62, 56, 124, 200, 61, 158, 244, 253, 189, 177, 250, 220, 190, 204, 84, 49, 62, 236, 123, 100, 190, 133, 71, 8, 63, 158, 195, 176, 190, 105, 47, 90, 62, 101, 192, 231, 61, 27, 93, 186, 188, 45, 55, 196, 189, 171, 24, 179, 190, 244, 251, 77, 187, 120, 193, 171, 61, 238, 95, 22, 190, 174, 64, 85, 189, 139, 54, 26, 191, 106, 175, 91, 190, 12, 113, 51, 62, 153, 154, 121, 61, 201, 152, 40, 62, 61, 100, 86, 62, 42, 115, 185, 61, 162, 167, 132, 61, 61, 2, 22, 62, 47, 193, 101, 62, 110, 143, 156, 62, 182, 90, 181, 190, 135, 69, 21, 189, 232, 26, 143, 61, 180, 149, 240, 189, 92, 39, 245, 61, 5, 134, 145, 189, 97, 201, 188, 60, 91, 206, 114, 189, 249, 160, 185, 61, 84, 155, 240, 189, 73, 167, 73, 189, 120, 9, 220, 189, 85, 214, 245, 189, 200, 154, 227, 187, 145, 251, 142, 188, 85, 86, 67, 61, 200, 160, 12, 190, 185, 210, 29, 190, 113, 247, 138, 61, 156, 52, 196, 60, 71, 110, 131, 60, 199, 106, 186, 61, 208, 243, 216, 189, 227, 81, 208, 189, 30, 68, 167, 189, 131, 238, 223, 61, 239, 76, 96, 61, 145, 240, 33, 61, 111, 37, 234, 61, 152, 118, 231, 189, 149, 56, 208, 61, 164, 140, 94, 189, 215, 171, 136, 189, 160, 196, 7, 62, 34, 167, 204, 189, 198, 184, 131, 188, 219, 37, 2, 62, 43, 223, 133, 189, 183, 70, 15, 190, 22, 86, 45, 190, 204, 56, 116, 61, 87, 148, 111, 189, 165, 216, 50, 190, 199, 57, 239, 61, 247, 204, 244, 188, 211, 2, 4, 62, 79, 27, 29, 189, 138, 203, 228, 189, 160, 77, 197, 60, 219, 33, 40, 190, 24, 251, 156, 59, 38, 88, 232, 189, 44, 50, 109, 188, 141, 77, 189, 61, 232, 79, 106, 189, 42, 149, 252, 59, 245, 162, 39, 62, 106, 247, 139, 61, 150, 31, 192, 61, 253, 180, 3, 62, 59, 43, 79, 60, 154, 170, 43, 61, 200, 157, 234, 188, 103, 236, 106, 189, 124, 185, 18, 190, 148, 80, 153, 189, 138, 230, 37, 62, 239, 231, 138, 190, 96, 203, 173, 190, 255, 69, 41, 62, 103, 230, 172, 61, 166, 213, 202, 190, 126, 13, 26, 191, 47, 41, 141, 189, 171, 185, 161, 191, 196, 187, 157, 62, 24, 62, 62, 190, 62, 254, 124, 189, 211, 158, 46, 60, 110, 236, 93, 62, 57, 36, 59, 190, 51, 197, 208, 189, 86, 46, 152, 62, 211, 147, 56, 59, 12, 159, 124, 190, 52, 201, 117, 62, 65, 110, 189, 189, 103, 157, 22, 190, 234, 98, 12, 190, 46, 82, 224, 190, 149, 65, 215, 190, 173, 45, 151, 189, 155, 156, 208, 61, 157, 132, 28, 190, 213, 54, 161, 190, 11, 206, 132, 61, 136, 6, 185, 189, 66, 128, 80, 191, 148, 214, 255, 61, 211, 62, 67, 190, 189, 24, 144, 191, 32, 31, 226, 189, 132, 41, 202, 60, 77, 64, 105, 62, 98, 107, 159, 62, 63, 73, 146, 62, 205, 25, 0, 191, 25, 60, 73, 187, 15, 123, 178, 189, 211, 182, 18, 62, 2, 66, 40, 62, 234, 179, 120, 61, 185, 186, 213, 61, 150, 173, 29, 62, 197, 88, 119, 189, 83, 57, 224, 190, 252, 107, 177, 188, 109, 215, 93, 62, 18, 46, 160, 61, 240, 137, 31, 62, 128, 154, 175, 60, 130, 102, 57, 190, 171, 116, 162, 190, 196, 90, 110, 190, 131, 200, 226, 188, 135, 243, 11, 190, 67, 43, 216, 61, 179, 73, 248, 190, 12, 136, 213, 62, 248, 130, 62, 190, 116, 126, 196, 189, 188, 113, 51, 62, 108, 112, 160, 62, 208, 180, 99, 186, 143, 133, 159, 190, 69, 227, 217, 190, 37, 6, 29, 190, 203, 155, 121, 190, 253, 2, 42, 61, 164, 220, 102, 191, 135, 165, 176, 61, 233, 8, 42, 187, 59, 250, 5, 62, 233, 108, 129, 189, 207, 71, 67, 189, 198, 8, 10, 62, 116, 208, 238, 189, 132, 36, 113, 61, 207, 148, 164, 190, 238, 178, 108, 189, 63, 134, 46, 191, 57, 38, 107, 62, 179, 77, 206, 62, 203, 127, 151, 62, 147, 6, 219, 61, 239, 61, 34, 188, 10, 146, 85, 62, 243, 57, 168, 60, 87, 151, 13, 189, 236, 137, 188, 61, 76, 150, 212, 190, 147, 36, 84, 61, 230, 3, 10, 62, 228, 37, 37, 62, 190, 184, 41, 190, 22, 200, 187, 190, 220, 103, 149, 190, 40, 180, 153, 190, 4, 0, 6, 191, 228, 21, 240, 60, 13, 196, 213, 62, 29, 83, 76, 191, 89, 8, 235, 61, 68, 52, 42, 190, 249, 80, 136, 61, 87, 68, 232, 60, 17, 7, 219, 60, 159, 86, 9, 63, 228, 173, 136, 191, 112, 241, 152, 62, 248, 48, 85, 190, 121, 138, 244, 190, 149, 219, 80, 191, 171, 0, 106, 62, 192, 124, 181, 62, 181, 40, 11, 189, 50, 106, 202, 189, 129, 183, 145, 190, 98, 250, 175, 62, 235, 31, 94, 60, 185, 144, 162, 62, 116, 163, 74, 62, 231, 221, 79, 191, 54, 74, 36, 60, 79, 178, 185, 60, 124, 88, 205, 190, 18, 254, 159, 190, 180, 59, 16, 191, 177, 39, 197, 61, 16, 90, 144, 190, 201, 218, 156, 190, 154, 46, 43, 190, 187, 130, 45, 190, 242, 126, 32, 62, 48, 194, 123, 190, 167, 77, 211, 62, 37, 84, 142, 191, 162, 83, 61, 62, 131, 13, 81, 191, 67, 143, 222, 187, 101, 137, 185, 61, 52, 34, 239, 190, 113, 203, 138, 189, 52, 127, 115, 62, 254, 48, 193, 61, 88, 70, 222, 188, 106, 82, 82, 62, 125, 212, 255, 189, 198, 38, 21, 190, 97, 20, 217, 189, 76, 180, 140, 62, 161, 104, 213, 189, 173, 184, 11, 191, 221, 55, 252, 60, 141, 180, 11, 61, 193, 109, 88, 191, 229, 188, 170, 61, 124, 218, 42, 62, 174, 222, 22, 62, 167, 202, 171, 190, 205, 121, 170, 189, 156, 38, 148, 190, 169, 80, 175, 61, 84, 196, 62, 190, 72, 106, 235, 189, 113, 149, 144, 190, 70, 81, 72, 61, 199, 170, 139, 60, 217, 84, 139, 60, 222, 177, 176, 61, 16, 87, 132, 189, 136, 121, 161, 189, 162, 174, 121, 190, 51, 163, 121, 62, 174, 72, 138, 190, 53, 99, 203, 190, 178, 16, 234, 189, 232, 144, 11, 191, 55, 217, 151, 61, 181, 48, 98, 62, 120, 101, 178, 62, 104, 0, 162, 188, 217, 109, 156, 62, 104, 28, 223, 189, 184, 183, 151, 190, 73, 73, 141, 62, 75, 72, 23, 191, 28, 128, 141, 60, 184, 93, 186, 189, 3, 189, 32, 62, 244, 205, 143, 62, 209, 181, 57, 61, 186, 68, 56, 190, 106, 243, 224, 189, 161, 179, 26, 61, 177, 24, 10, 190, 37, 82, 222, 62, 80, 83, 182, 189, 150, 200, 19, 61, 155, 121, 135, 190, 241, 202, 28, 62, 149, 107, 63, 62, 138, 145, 244, 189, 6, 67, 227, 61, 123, 197, 213, 189, 136, 98, 33, 62, 218, 54, 121, 190, 158, 105, 38, 191, 217, 212, 165, 190, 108, 129, 178, 189, 242, 142, 165, 188, 37, 99, 162, 62, 149, 105, 120, 62, 98, 5, 161, 62, 253, 171, 214, 61, 173, 128, 119, 61, 207, 67, 52, 62, 4, 132, 86, 62, 167, 12, 223, 190, 148, 84, 205, 61, 3, 98, 235, 189, 188, 15, 242, 189, 131, 146, 8, 190, 254, 64, 63, 62, 26, 124, 193, 62, 13, 221, 95, 189, 180, 10, 150, 190, 58, 63, 173, 61, 105, 118, 139, 190, 68, 73, 73, 61, 89, 136, 142, 61, 28, 5, 144, 62, 203, 14, 131, 61, 49, 214, 32, 61, 22, 108, 161, 62, 17, 155, 42, 190, 244, 69, 154, 62, 152, 120, 154, 62, 231, 233, 129, 61, 135, 111, 15, 61, 27, 231, 43, 61, 103, 62, 10, 60, 25, 146, 35, 190, 128, 86, 205, 190, 191, 193, 246, 189, 228, 21, 100, 190, 109, 133, 188, 61, 37, 84, 132, 190, 247, 79, 91, 190, 14, 0, 139, 190, 5, 120, 71, 62, 128, 245, 214, 190, 230, 156, 104, 189, 158, 98, 137, 62, 58, 99, 186, 61, 120, 87, 53, 189, 183, 73, 69, 190, 165, 232, 64, 191, 26, 153, 235, 62, 127, 218, 56, 191, 107, 122, 167, 188, 46, 243, 153, 190, 82, 98, 67, 62, 104, 79, 1, 189, 77, 69, 197, 189, 114, 231, 23, 191, 139, 95, 158, 62, 222, 106, 68, 62, 130, 211, 187, 61, 140, 23, 132, 189, 25, 125, 166, 190, 218, 123, 70, 61, 113, 23, 18, 191, 129, 63, 168, 62, 18, 33, 139, 62, 230, 247, 218, 61, 5, 12, 80, 60, 82, 122, 14, 190, 87, 135, 7, 63, 55, 166, 11, 190, 162, 168, 203, 62, 33, 64, 249, 190, 54, 133, 163, 190, 255, 240, 237, 61, 251, 254, 16, 60, 178, 46, 93, 62, 253, 211, 70, 190, 85, 253, 22, 190, 152, 227, 140, 60, 28, 230, 20, 62, 73, 176, 148, 62, 142, 120, 45, 190, 251, 77, 128, 62, 237, 159, 38, 60, 116, 51, 139, 62, 220, 21, 7, 190, 12, 181, 22, 60, 251, 114, 180, 61, 58, 144, 8, 189, 109, 24, 65, 189, 255, 76, 72, 190, 10, 159, 98, 61, 215, 105, 26, 190, 206, 255, 102, 190, 220, 44, 196, 188, 180, 84, 164, 62, 130, 128, 179, 187, 82, 230, 59, 62, 102, 206, 49, 62, 43, 155, 107, 188, 208, 175, 189, 189, 164, 73, 133, 61, 165, 10, 101, 62, 216, 253, 103, 62, 132, 241, 253, 61, 246, 178, 44, 62, 175, 221, 21, 190, 108, 0, 227, 190, 52, 14, 206, 190, 83, 181, 178, 189, 18, 251, 204, 62, 1, 153, 131, 60, 191, 47, 78, 191, 204, 87, 156, 62, 5, 207, 26, 191, 198, 0, 209, 59, 226, 123, 248, 189, 90, 8, 112, 61, 197, 116, 40, 61, 204, 254, 148, 62, 154, 234, 88, 189, 116, 8, 51, 61, 104, 43, 139, 62, 162, 5, 253, 61, 95, 162, 81, 62, 108, 70, 219, 61, 149, 88, 44, 62, 19, 159, 178, 189, 204, 60, 26, 190, 57, 81, 236, 190, 199, 85, 159, 190, 192, 99, 129, 190, 120, 23, 125, 61, 251, 41, 88, 62, 246, 87, 201, 189, 105, 45, 81, 190, 109, 94, 137, 188, 53, 6, 157, 191, 157, 52, 188, 189, 197, 47, 184, 62, 158, 84, 145, 63, 37, 189, 202, 62, 106, 178, 143, 190, 72, 128, 136, 62, 4, 37, 227, 61, 182, 128, 149, 189, 72, 49, 96, 191, 124, 205, 192, 58, 179, 222, 228, 188, 214, 34, 148, 188, 56, 30, 201, 59, 142, 163, 78, 190, 221, 163, 87, 190, 193, 9, 10, 60, 9, 94, 151, 62, 2, 210, 26, 191, 96, 230, 250, 61, 59, 49, 248, 61, 160, 206, 205, 61, 137, 186, 33, 190, 47, 180, 15, 62, 49, 66, 15, 62, 205, 107, 119, 190, 143, 85, 185, 61, 236, 228, 57, 190, 174, 183, 81, 190, 85, 237, 1, 61, 175, 7, 255, 190, 228, 201, 115, 62, 44, 52, 183, 62, 207, 187, 144, 189, 233, 193, 209, 62, 228, 5, 173, 61, 142, 23, 145, 62, 124, 220, 173, 190, 35, 29, 232, 190, 32, 178, 223, 59, 98, 123, 148, 190, 195, 4, 209, 62, 67, 17, 157, 190, 13, 234, 86, 61, 211, 208, 66, 61, 90, 241, 205, 61, 63, 138, 223, 189, 80, 161, 233, 190, 229, 190, 80, 62, 99, 181, 103, 61, 86, 152, 254, 190, 74, 165, 33, 190, 167, 143, 193, 190, 109, 248, 184, 190, 137, 25, 171, 61, 93, 194, 107, 62, 85, 162, 6, 62, 191, 227, 38, 62, 142, 227, 45, 62, 123, 182, 31, 56, 243, 130, 224, 61, 8, 94, 161, 61, 185, 136, 107, 188, 243, 56, 154, 190, 255, 97, 122, 61, 196, 147, 197, 189, 197, 83, 95, 60, 111, 67, 103, 61, 161, 234, 185, 189, 118, 62, 8, 61, 78, 104, 243, 61, 105, 78, 9, 190, 240, 205, 17, 188, 24, 79, 254, 61, 111, 26, 211, 189, 11, 58, 255, 189, 96, 97, 17, 190, 65, 138, 231, 188, 208, 87, 234, 189, 208, 39, 27, 62, 172, 24, 228, 61, 104, 81, 254, 189, 17, 18, 140, 189, 120, 213, 188, 188, 200, 70, 255, 61, 109, 185, 194, 61, 94, 25, 45, 189, 179, 47, 109, 189, 87, 246, 2, 190, 49, 97, 15, 189, 19, 175, 253, 61, 54, 12, 185, 189, 197, 191, 1, 62, 76, 53, 242, 61, 180, 142, 179, 61, 235, 211, 165, 189, 217, 57, 170, 188, 12, 7, 25, 62, 84, 28, 10, 62, 31, 173, 20, 191, 70, 28, 67, 191, 125, 185, 160, 187, 166, 115, 130, 190, 33, 21, 148, 61, 94, 117, 36, 190, 207, 11, 146, 190, 85, 93, 233, 59, 248, 36, 161, 60, 192, 197, 178, 61, 65, 67, 155, 191, 244, 66, 249, 61, 9, 189, 156, 191, 21, 172, 40, 62, 154, 123, 117, 190, 129, 106, 40, 191, 242, 219, 30, 190, 85, 217, 138, 62, 203, 92, 66, 62, 254, 83, 64, 61, 225, 119, 144, 62, 94, 152, 2, 190, 41, 245, 159, 190, 170, 54, 26, 189, 234, 53, 126, 62, 222, 215, 48, 189, 58, 242, 71, 189, 254, 177, 56, 190, 101, 173, 142, 62, 57, 136, 75, 191, 42, 94, 14, 189, 185, 237, 134, 62, 70, 64, 28, 62, 21, 51, 131, 61, 122, 210, 189, 189, 50, 8, 147, 190, 192, 204, 182, 62, 40, 166, 101, 190, 48, 9, 229, 62, 240, 32, 242, 190, 27, 19, 111, 62, 131, 42, 49, 190, 109, 187, 196, 61, 117, 111, 230, 189, 70, 85, 80, 190, 89, 15, 153, 61, 105, 51, 237, 189, 75, 194, 20, 59, 99, 71, 107, 190, 161, 24, 195, 190, 164, 97, 208, 190, 126, 203, 194, 189, 69, 6, 99, 62, 56, 43, 223, 61, 192, 88, 195, 187, 59, 114, 91, 190, 114, 71, 64, 62, 96, 208, 156, 61, 199, 123, 154, 62, 131, 75, 184, 62, 243, 235, 78, 191, 56, 42, 150, 188, 158, 26, 170, 61, 195, 240, 190, 61, 195, 133, 66, 61, 65, 10, 171, 189, 133, 59, 32, 61, 11, 165, 92, 62, 217, 179, 111, 62, 108, 215, 175, 189, 38, 254, 74, 187, 70, 45, 87, 62, 56, 253, 17, 190, 52, 168, 151, 189, 47, 70, 128, 62, 212, 137, 160, 61, 33, 99, 145, 190, 112, 234, 78, 189, 247, 188, 234, 61, 158, 248, 225, 190, 141, 223, 162, 189, 100, 158, 80, 62, 48, 36, 185, 188, 244, 208, 48, 187, 226, 58, 125, 189, 181, 115, 196, 190, 106, 215, 60, 62, 50, 93, 53, 61, 122, 90, 64, 190, 141, 84, 239, 61, 146, 228, 154, 61, 175, 68, 73, 189, 213, 1, 102, 62, 240, 130, 145, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {38, 122, 134, 61, 70, 253, 232, 189, 147, 19, 6, 62, 77, 232, 141, 188, 132, 89, 109, 62, 171, 15, 226, 60, 34, 70, 152, 190, 171, 95, 75, 62, 1, 130, 204, 188, 233, 122, 163, 62, 246, 212, 28, 190, 53, 34, 152, 62, 60, 191, 80, 61, 22, 101, 12, 190, 165, 15, 134, 189, 80, 170, 72, 62, 179, 89, 14, 62, 53, 2, 183, 62, 80, 101, 139, 61, 15, 44, 190, 189, 107, 51, 5, 61, 166, 88, 44, 62, 177, 81, 136, 189, 4, 195, 156, 62, 87, 244, 8, 190, 208, 65, 135, 61, 23, 77, 56, 189, 113, 237, 131, 61, 50, 249, 62, 190, 46, 10, 8, 61, 80, 23, 135, 62, 7, 112, 187, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {88, 1, 132, 190, 51, 202, 8, 63, 135, 156, 8, 63, 98, 84, 132, 63, 64, 158, 12, 61, 101, 140, 83, 60, 10, 118, 151, 61, 237, 110, 131, 62, 136, 246, 9, 63, 53, 233, 134, 62, 118, 91, 51, 190, 77, 133, 125, 62, 21, 245, 226, 190, 187, 255, 210, 61, 251, 228, 6, 190, 134, 182, 95, 63, 228, 189, 43, 63, 213, 6, 68, 191, 6, 236, 142, 191, 99, 129, 24, 63, 180, 95, 3, 191, 79, 123, 191, 190, 204, 138, 53, 62, 176, 125, 154, 63, 157, 127, 21, 190, 113, 73, 98, 63, 103, 6, 240, 62, 63, 188, 249, 190, 124, 175, 211, 61, 24, 100, 52, 63, 136, 162, 230, 190, 202, 119, 240, 189, 92, 77, 146, 190, 219, 183, 134, 190, 83, 46, 7, 62, 198, 34, 33, 62, 33, 168, 22, 190, 247, 170, 28, 61, 136, 66, 123, 60, 199, 18, 33, 188, 233, 5, 183, 62, 153, 27, 137, 190, 124, 117, 17, 62, 29, 85, 75, 189, 240, 124, 223, 61, 1, 15, 187, 189, 123, 24, 12, 62, 129, 173, 237, 186, 85, 89, 92, 61, 198, 199, 25, 190, 229, 209, 36, 62, 26, 121, 166, 61, 197, 186, 65, 62, 16, 3, 5, 188, 27, 90, 142, 62, 148, 47, 167, 61, 152, 87, 231, 61, 29, 18, 65, 62, 115, 185, 156, 61, 66, 212, 132, 61, 64, 242, 182, 189, 126, 76, 241, 61, 233, 99, 93, 61, 91, 52, 134, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {203, 190, 5, 190, 160, 226, 14, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {204, 234, 135, 63, 99, 226, 29, 63, 43, 29, 160, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {83, 51, 1, 192, 47, 14, 214, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0083/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}