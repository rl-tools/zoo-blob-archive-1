// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {255, 67, 5, 191, 29, 226, 9, 189, 243, 184, 251, 60, 166, 12, 254, 189, 196, 137, 5, 63, 229, 132, 12, 191, 88, 90, 134, 60, 96, 251, 168, 190, 236, 221, 26, 62, 160, 225, 238, 62, 217, 122, 46, 188, 147, 35, 196, 187, 235, 101, 45, 62, 37, 70, 173, 190, 243, 173, 7, 62, 255, 93, 95, 62, 29, 149, 245, 188, 75, 251, 202, 190, 107, 178, 140, 190, 50, 13, 133, 62, 222, 189, 253, 62, 17, 125, 236, 62, 241, 80, 28, 189, 246, 132, 12, 191, 232, 246, 15, 63, 18, 158, 195, 62, 188, 127, 169, 61, 61, 0, 54, 61, 7, 126, 149, 190, 233, 210, 94, 62, 41, 222, 33, 61, 10, 151, 112, 62, 177, 242, 128, 190, 221, 41, 233, 190, 216, 219, 2, 191, 96, 70, 90, 190, 46, 123, 59, 62, 84, 80, 7, 190, 147, 15, 219, 190, 238, 27, 241, 190, 67, 55, 190, 190, 142, 215, 15, 63, 218, 21, 229, 189, 43, 153, 21, 190, 7, 238, 243, 190, 255, 250, 13, 190, 55, 117, 27, 190, 16, 162, 176, 62, 175, 115, 225, 187, 135, 26, 42, 190, 234, 188, 15, 62, 45, 93, 180, 190, 120, 62, 2, 191, 246, 49, 137, 190, 97, 27, 154, 62, 104, 124, 184, 186, 117, 211, 15, 191, 246, 48, 173, 190, 244, 26, 10, 63, 139, 38, 105, 62, 20, 41, 17, 61, 197, 152, 69, 190, 68, 62, 195, 62, 223, 161, 225, 62, 94, 179, 202, 62, 182, 120, 0, 63, 170, 157, 37, 62, 175, 250, 208, 61, 183, 150, 136, 62, 177, 158, 227, 190, 127, 140, 53, 62, 71, 87, 1, 191, 81, 252, 92, 62, 38, 6, 17, 62, 122, 110, 232, 62, 58, 128, 102, 190, 212, 52, 221, 190, 244, 191, 13, 63, 26, 47, 14, 191, 177, 143, 231, 189, 76, 122, 163, 62, 189, 31, 220, 62, 62, 159, 147, 190, 103, 208, 210, 62, 138, 86, 190, 62, 37, 128, 111, 188, 41, 195, 136, 62, 180, 105, 219, 62, 101, 68, 9, 191, 58, 195, 6, 63, 201, 119, 0, 191, 154, 163, 146, 190, 166, 188, 177, 62, 141, 158, 19, 62, 56, 136, 167, 62, 152, 112, 205, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {122, 155, 19, 191, 185, 63, 149, 62, 204, 204, 1, 191, 128, 1, 178, 62, 146, 248, 17, 190, 87, 234, 254, 190, 101, 122, 249, 190, 95, 59, 3, 63, 79, 48, 6, 191, 112, 221, 211, 190, 228, 140, 148, 62, 0, 137, 134, 62, 113, 255, 240, 62, 252, 213, 11, 63, 179, 62, 217, 62, 139, 25, 17, 63, 107, 112, 223, 62, 200, 169, 4, 62, 254, 24, 133, 190, 250, 74, 7, 191, 102, 91, 45, 61, 156, 217, 255, 62, 38, 87, 6, 63, 168, 59, 139, 188, 21, 185, 7, 62, 60, 168, 216, 190, 28, 220, 243, 62, 46, 207, 232, 62, 208, 28, 201, 61, 246, 17, 188, 189, 201, 78, 41, 62, 180, 77, 143, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 254, 122, 61, 119, 48, 39, 59, 69, 159, 197, 61, 225, 146, 57, 61, 241, 68, 193, 189, 162, 153, 4, 189, 63, 163, 199, 60, 209, 36, 45, 62, 70, 72, 27, 189, 11, 88, 127, 189, 235, 192, 42, 190, 206, 51, 200, 60, 53, 224, 177, 189, 172, 153, 156, 61, 86, 19, 160, 188, 117, 97, 13, 61, 50, 234, 108, 189, 185, 120, 21, 62, 153, 128, 140, 188, 143, 180, 232, 189, 127, 68, 40, 190, 65, 66, 45, 62, 227, 250, 167, 61, 235, 200, 250, 60, 152, 116, 202, 61, 63, 131, 229, 61, 147, 212, 1, 62, 140, 70, 80, 61, 214, 169, 148, 61, 25, 186, 204, 189, 6, 135, 114, 188, 223, 196, 230, 61, 211, 139, 146, 61, 145, 148, 26, 190, 30, 176, 40, 189, 179, 49, 174, 61, 82, 228, 235, 61, 152, 151, 27, 62, 206, 185, 0, 61, 136, 61, 67, 188, 116, 214, 45, 190, 105, 213, 24, 189, 119, 166, 175, 61, 183, 141, 52, 61, 70, 235, 41, 62, 19, 121, 136, 61, 10, 21, 176, 189, 145, 102, 90, 189, 223, 67, 206, 61, 71, 13, 184, 189, 110, 179, 74, 189, 7, 144, 50, 62, 139, 103, 35, 62, 229, 78, 173, 189, 96, 134, 172, 61, 76, 190, 23, 190, 167, 248, 21, 190, 90, 9, 90, 189, 42, 51, 49, 190, 119, 246, 135, 189, 140, 47, 249, 60, 179, 156, 217, 56, 156, 214, 193, 188, 88, 170, 125, 61, 130, 234, 237, 61, 142, 50, 22, 62, 234, 99, 253, 189, 8, 44, 18, 62, 157, 56, 163, 189, 204, 139, 7, 62, 242, 183, 47, 62, 249, 34, 24, 62, 40, 84, 238, 189, 249, 33, 26, 59, 7, 246, 142, 189, 202, 248, 0, 190, 224, 41, 208, 189, 206, 115, 136, 61, 233, 147, 201, 61, 223, 158, 161, 188, 61, 118, 62, 61, 165, 182, 39, 62, 62, 174, 145, 189, 103, 114, 46, 190, 72, 195, 11, 190, 63, 105, 173, 189, 88, 179, 90, 189, 52, 210, 141, 189, 103, 67, 22, 61, 141, 140, 212, 188, 208, 50, 17, 190, 226, 187, 23, 62, 184, 94, 9, 188, 48, 195, 26, 62, 165, 59, 27, 190, 37, 59, 22, 190, 77, 36, 190, 61, 209, 5, 52, 62, 220, 137, 169, 61, 112, 101, 189, 61, 106, 198, 138, 61, 68, 76, 139, 61, 235, 90, 238, 61, 247, 122, 14, 190, 104, 30, 15, 190, 167, 34, 69, 188, 76, 88, 249, 59, 191, 125, 194, 189, 132, 61, 36, 190, 27, 49, 30, 62, 209, 154, 164, 189, 201, 61, 187, 61, 152, 238, 122, 61, 243, 193, 193, 61, 219, 39, 26, 62, 18, 210, 17, 62, 183, 231, 38, 62, 39, 252, 197, 61, 97, 236, 34, 190, 176, 73, 26, 190, 32, 27, 39, 62, 151, 54, 18, 190, 211, 32, 225, 61, 134, 223, 20, 190, 77, 227, 118, 189, 215, 247, 240, 189, 62, 208, 186, 189, 166, 78, 174, 189, 63, 108, 33, 61, 158, 14, 32, 62, 204, 125, 4, 62, 76, 78, 234, 189, 5, 9, 11, 62, 191, 213, 39, 62, 75, 140, 30, 62, 64, 209, 223, 61, 127, 95, 105, 61, 48, 74, 46, 62, 192, 208, 7, 61, 212, 90, 179, 61, 42, 37, 37, 61, 30, 138, 1, 190, 135, 243, 1, 62, 163, 37, 176, 189, 165, 146, 249, 61, 199, 244, 154, 187, 159, 155, 145, 61, 174, 176, 149, 189, 10, 31, 35, 62, 36, 9, 12, 190, 100, 243, 4, 61, 5, 99, 78, 57, 176, 62, 1, 62, 18, 224, 90, 188, 149, 253, 161, 188, 11, 135, 175, 187, 148, 151, 1, 62, 61, 232, 236, 60, 161, 112, 181, 189, 7, 53, 48, 62, 238, 39, 49, 61, 11, 116, 89, 60, 108, 79, 201, 188, 213, 9, 133, 189, 225, 250, 76, 188, 185, 189, 188, 61, 27, 198, 180, 187, 6, 50, 183, 189, 233, 115, 188, 189, 113, 89, 211, 189, 149, 131, 174, 61, 88, 224, 180, 189, 119, 42, 28, 190, 41, 209, 200, 61, 73, 39, 207, 61, 84, 9, 4, 62, 68, 196, 32, 190, 121, 79, 221, 189, 164, 101, 37, 60, 212, 191, 29, 189, 131, 1, 139, 61, 236, 131, 34, 190, 103, 76, 47, 190, 251, 210, 236, 60, 121, 142, 193, 61, 97, 136, 174, 189, 95, 114, 134, 189, 209, 139, 198, 61, 134, 155, 25, 190, 16, 57, 129, 60, 216, 74, 63, 189, 2, 162, 19, 189, 254, 232, 13, 189, 221, 93, 220, 59, 165, 149, 223, 189, 200, 204, 175, 61, 199, 44, 17, 190, 183, 35, 48, 190, 230, 208, 84, 60, 28, 18, 44, 62, 208, 101, 225, 60, 221, 34, 100, 188, 223, 164, 214, 60, 241, 230, 31, 190, 145, 243, 118, 189, 50, 31, 203, 188, 80, 12, 220, 61, 151, 120, 238, 189, 10, 250, 214, 189, 116, 224, 128, 60, 174, 216, 75, 189, 224, 200, 143, 61, 156, 127, 43, 62, 10, 5, 49, 190, 126, 142, 127, 61, 18, 46, 173, 188, 17, 0, 156, 60, 190, 227, 183, 61, 123, 78, 7, 62, 94, 150, 4, 62, 232, 186, 64, 61, 226, 79, 153, 189, 174, 209, 9, 62, 152, 86, 169, 58, 143, 252, 97, 61, 251, 200, 176, 189, 54, 217, 40, 190, 37, 81, 49, 190, 175, 239, 7, 62, 32, 26, 17, 190, 1, 78, 23, 189, 90, 91, 147, 187, 37, 87, 163, 61, 69, 158, 14, 62, 185, 69, 146, 189, 18, 7, 157, 189, 183, 176, 69, 61, 239, 136, 0, 62, 176, 200, 134, 58, 18, 72, 40, 189, 63, 182, 118, 188, 33, 158, 128, 61, 23, 71, 25, 62, 102, 3, 1, 190, 133, 241, 152, 189, 128, 83, 182, 188, 137, 114, 243, 187, 142, 49, 126, 189, 233, 46, 47, 189, 221, 155, 78, 189, 22, 235, 71, 61, 225, 61, 154, 61, 238, 243, 143, 61, 212, 152, 8, 62, 132, 118, 196, 61, 93, 14, 160, 61, 23, 110, 61, 60, 48, 206, 8, 190, 178, 38, 151, 60, 174, 22, 39, 61, 244, 76, 143, 61, 128, 236, 171, 61, 60, 46, 6, 190, 104, 27, 10, 189, 42, 109, 98, 61, 2, 12, 74, 189, 59, 2, 240, 60, 104, 203, 182, 189, 229, 55, 128, 60, 90, 222, 93, 60, 233, 245, 187, 189, 60, 239, 63, 61, 113, 102, 33, 190, 62, 128, 206, 61, 119, 141, 158, 61, 76, 186, 188, 61, 79, 22, 236, 189, 222, 134, 89, 60, 44, 177, 79, 61, 197, 225, 28, 62, 252, 69, 86, 188, 29, 112, 214, 61, 159, 221, 34, 62, 105, 146, 180, 189, 191, 240, 3, 190, 220, 127, 14, 189, 54, 162, 129, 61, 204, 120, 237, 58, 32, 21, 46, 190, 111, 105, 42, 190, 243, 123, 192, 188, 91, 56, 64, 60, 221, 82, 204, 189, 192, 194, 230, 61, 2, 113, 237, 61, 64, 39, 16, 62, 247, 190, 176, 60, 128, 157, 2, 190, 21, 31, 24, 62, 27, 194, 69, 188, 58, 31, 155, 61, 111, 175, 5, 190, 52, 242, 18, 189, 113, 194, 26, 190, 36, 226, 29, 190, 182, 55, 36, 190, 117, 43, 49, 62, 16, 163, 151, 189, 244, 157, 189, 61, 139, 52, 228, 61, 110, 166, 121, 59, 67, 168, 250, 60, 176, 196, 38, 190, 248, 241, 226, 60, 236, 143, 172, 188, 94, 234, 2, 190, 179, 100, 46, 62, 107, 9, 16, 189, 249, 39, 244, 61, 28, 58, 186, 61, 236, 215, 80, 61, 31, 176, 147, 189, 115, 208, 217, 188, 82, 9, 131, 60, 166, 221, 13, 62, 140, 62, 63, 189, 233, 232, 36, 62, 106, 217, 0, 190, 6, 165, 17, 62, 67, 104, 211, 61, 148, 127, 21, 61, 146, 54, 141, 60, 150, 109, 33, 62, 84, 41, 119, 59, 130, 18, 204, 61, 152, 192, 94, 189, 56, 21, 159, 189, 33, 224, 27, 62, 125, 209, 175, 61, 180, 222, 22, 60, 43, 72, 187, 189, 179, 193, 37, 189, 249, 10, 189, 61, 197, 109, 118, 187, 184, 197, 180, 61, 72, 184, 191, 59, 82, 58, 64, 61, 56, 12, 112, 188, 29, 76, 48, 190, 102, 18, 209, 189, 184, 229, 24, 61, 49, 169, 51, 62, 157, 23, 174, 188, 29, 213, 173, 189, 47, 246, 198, 60, 145, 38, 33, 190, 213, 25, 63, 189, 147, 219, 45, 61, 1, 208, 174, 189, 35, 225, 231, 61, 122, 205, 213, 61, 77, 246, 214, 189, 3, 197, 10, 62, 104, 98, 60, 61, 165, 148, 255, 61, 157, 138, 30, 62, 144, 91, 220, 58, 99, 186, 232, 188, 181, 108, 52, 190, 132, 156, 27, 61, 210, 110, 214, 186, 118, 245, 165, 61, 85, 221, 119, 61, 164, 131, 240, 189, 116, 93, 201, 61, 54, 16, 42, 59, 217, 140, 1, 62, 71, 182, 70, 61, 192, 37, 154, 61, 234, 82, 111, 59, 242, 217, 17, 190, 84, 75, 32, 61, 3, 149, 248, 61, 119, 104, 105, 187, 158, 235, 22, 190, 140, 219, 151, 189, 19, 198, 75, 61, 224, 168, 114, 188, 152, 57, 188, 188, 126, 251, 181, 189, 249, 205, 22, 189, 157, 218, 150, 189, 220, 47, 30, 62, 25, 210, 35, 190, 200, 12, 242, 188, 209, 196, 19, 62, 123, 10, 12, 189, 153, 66, 208, 189, 199, 139, 153, 188, 15, 231, 145, 187, 115, 242, 242, 61, 180, 77, 139, 61, 92, 65, 38, 62, 177, 169, 26, 61, 82, 71, 149, 187, 78, 138, 30, 62, 126, 54, 147, 188, 74, 130, 189, 189, 74, 125, 139, 61, 206, 123, 163, 189, 124, 132, 204, 61, 206, 25, 131, 61, 184, 161, 174, 60, 62, 45, 6, 62, 114, 29, 246, 188, 107, 127, 131, 189, 139, 84, 175, 61, 58, 101, 219, 189, 40, 125, 45, 62, 63, 30, 253, 188, 212, 69, 130, 61, 107, 38, 103, 189, 245, 211, 229, 61, 242, 72, 234, 189, 73, 227, 60, 189, 127, 71, 141, 189, 212, 11, 231, 189, 114, 52, 133, 60, 100, 169, 16, 188, 64, 134, 196, 61, 71, 26, 255, 189, 158, 90, 248, 189, 137, 116, 220, 61, 64, 226, 45, 61, 17, 44, 176, 60, 57, 48, 224, 61, 28, 127, 164, 189, 250, 167, 165, 189, 203, 106, 83, 189, 229, 189, 241, 61, 76, 112, 156, 61, 214, 242, 139, 61, 208, 97, 28, 62, 79, 75, 174, 189, 238, 200, 254, 61, 117, 216, 58, 188, 210, 16, 50, 189, 151, 77, 18, 62, 130, 248, 224, 189, 191, 244, 194, 60, 28, 102, 225, 61, 114, 223, 59, 189, 200, 115, 22, 190, 22, 86, 45, 190, 46, 199, 121, 61, 30, 229, 52, 189, 236, 91, 28, 190, 1, 119, 223, 61, 124, 158, 239, 187, 65, 5, 9, 62, 106, 183, 192, 188, 203, 196, 227, 189, 86, 232, 47, 61, 63, 110, 35, 190, 223, 254, 6, 60, 114, 83, 229, 189, 197, 151, 14, 188, 173, 109, 198, 61, 6, 186, 99, 189, 240, 232, 141, 60, 29, 46, 49, 62, 132, 240, 196, 61, 138, 189, 204, 61, 105, 54, 0, 62, 160, 35, 98, 60, 59, 71, 63, 61, 7, 240, 179, 188, 23, 19, 104, 189, 40, 39, 21, 190, 222, 67, 104, 189, 203, 222, 51, 62, 93, 80, 100, 61, 126, 0, 169, 189, 0, 11, 140, 61, 72, 139, 8, 190, 210, 174, 133, 61, 72, 25, 252, 186, 220, 67, 28, 190, 74, 137, 237, 189, 244, 27, 17, 62, 104, 150, 29, 62, 183, 113, 202, 189, 156, 139, 160, 188, 15, 99, 6, 62, 173, 113, 235, 189, 216, 238, 75, 188, 159, 250, 215, 61, 19, 68, 159, 61, 223, 148, 131, 189, 234, 176, 158, 189, 44, 1, 44, 190, 199, 30, 7, 187, 3, 122, 128, 187, 56, 29, 11, 190, 181, 62, 54, 189, 138, 85, 15, 189, 79, 34, 50, 62, 37, 49, 33, 190, 208, 0, 144, 188, 15, 156, 3, 62, 18, 20, 187, 189, 177, 122, 13, 190, 163, 78, 10, 62, 0, 213, 242, 189, 79, 232, 44, 62, 47, 228, 230, 188, 39, 209, 103, 61, 210, 7, 25, 62, 76, 39, 119, 61, 254, 77, 22, 62, 33, 44, 7, 190, 248, 10, 70, 189, 222, 191, 33, 190, 57, 15, 198, 60, 58, 121, 231, 61, 45, 168, 54, 189, 114, 137, 44, 61, 143, 138, 27, 62, 157, 226, 198, 189, 146, 94, 33, 190, 214, 37, 208, 189, 116, 62, 33, 190, 62, 170, 39, 190, 154, 16, 35, 62, 96, 117, 220, 186, 151, 200, 126, 60, 120, 105, 175, 61, 14, 196, 18, 190, 187, 5, 248, 189, 239, 35, 6, 58, 84, 176, 235, 61, 235, 193, 205, 189, 236, 148, 89, 60, 131, 220, 218, 61, 116, 126, 196, 189, 19, 141, 171, 60, 198, 189, 50, 62, 137, 185, 183, 189, 141, 9, 36, 62, 33, 150, 74, 61, 239, 134, 129, 61, 29, 98, 41, 190, 34, 145, 228, 189, 242, 10, 19, 190, 180, 100, 143, 189, 166, 133, 13, 190, 110, 25, 3, 61, 188, 85, 48, 190, 236, 127, 65, 188, 121, 144, 27, 190, 10, 108, 146, 61, 26, 175, 223, 189, 110, 136, 189, 188, 88, 121, 102, 61, 24, 200, 109, 189, 197, 214, 255, 61, 146, 27, 29, 62, 81, 27, 33, 62, 151, 42, 5, 61, 191, 223, 51, 190, 145, 105, 239, 189, 229, 231, 83, 189, 76, 160, 244, 189, 247, 108, 113, 189, 115, 10, 177, 60, 75, 210, 253, 61, 230, 3, 10, 62, 221, 90, 32, 61, 5, 253, 137, 60, 139, 52, 193, 189, 163, 34, 15, 62, 141, 138, 143, 189, 168, 190, 128, 61, 69, 237, 6, 62, 91, 117, 189, 189, 12, 56, 4, 62, 36, 83, 38, 60, 39, 245, 22, 190, 209, 8, 177, 60, 138, 225, 226, 61, 223, 69, 198, 61, 62, 21, 169, 61, 226, 232, 225, 189, 81, 23, 197, 61, 148, 242, 143, 189, 190, 116, 184, 189, 250, 96, 45, 62, 199, 221, 142, 189, 170, 218, 99, 189, 118, 222, 27, 190, 164, 31, 173, 60, 96, 197, 9, 190, 144, 134, 164, 61, 92, 72, 10, 189, 88, 199, 43, 61, 36, 20, 6, 190, 230, 168, 3, 190, 31, 190, 202, 188, 81, 18, 211, 60, 6, 103, 121, 189, 21, 52, 47, 62, 241, 68, 50, 190, 0, 83, 111, 61, 75, 229, 34, 190, 10, 166, 76, 189, 228, 41, 33, 189, 31, 6, 29, 190, 43, 230, 32, 62, 32, 37, 36, 62, 11, 255, 74, 61, 118, 210, 188, 188, 252, 107, 205, 61, 168, 132, 119, 61, 194, 85, 255, 189, 32, 45, 191, 61, 127, 242, 49, 190, 101, 202, 39, 61, 115, 247, 249, 61, 194, 51, 56, 61, 69, 58, 134, 189, 135, 193, 2, 62, 105, 30, 35, 61, 184, 49, 53, 61, 28, 1, 10, 189, 44, 129, 252, 61, 192, 0, 87, 60, 49, 245, 129, 189, 48, 142, 42, 62, 117, 163, 194, 189, 178, 58, 56, 61, 2, 38, 151, 61, 71, 163, 16, 62, 138, 52, 34, 190, 203, 232, 0, 189, 11, 54, 12, 189, 165, 50, 190, 189, 128, 124, 146, 61, 216, 40, 133, 61, 51, 188, 93, 189, 185, 51, 22, 190, 184, 185, 71, 61, 31, 187, 19, 188, 105, 132, 4, 62, 62, 61, 51, 189, 236, 238, 155, 189, 49, 113, 39, 190, 3, 107, 147, 189, 101, 228, 137, 61, 52, 203, 217, 189, 95, 221, 248, 189, 37, 161, 34, 62, 63, 251, 156, 189, 48, 239, 150, 61, 228, 4, 27, 62, 180, 230, 47, 62, 239, 24, 18, 189, 78, 207, 24, 62, 157, 55, 224, 188, 39, 104, 32, 189, 4, 34, 253, 61, 109, 54, 9, 190, 24, 143, 88, 61, 108, 1, 226, 189, 248, 9, 138, 60, 241, 51, 25, 60, 63, 19, 49, 190, 231, 208, 16, 190, 78, 68, 124, 61, 98, 59, 174, 189, 100, 194, 147, 189, 232, 33, 194, 61, 198, 211, 54, 61, 53, 185, 78, 189, 77, 3, 139, 189, 143, 149, 207, 61, 121, 157, 3, 62, 238, 218, 63, 186, 162, 29, 151, 61, 51, 81, 2, 190, 223, 193, 185, 61, 215, 78, 198, 189, 209, 11, 136, 188, 47, 125, 39, 190, 238, 233, 8, 190, 142, 205, 247, 59, 6, 182, 50, 62, 79, 13, 247, 61, 27, 154, 43, 62, 243, 24, 229, 61, 213, 59, 202, 189, 203, 44, 118, 189, 10, 28, 169, 188, 85, 31, 236, 189, 141, 210, 158, 61, 3, 98, 235, 189, 127, 95, 11, 62, 115, 113, 82, 61, 35, 245, 2, 62, 44, 153, 42, 62, 9, 9, 200, 189, 205, 103, 76, 189, 122, 209, 209, 189, 187, 251, 158, 189, 24, 35, 187, 189, 85, 226, 178, 61, 44, 33, 136, 61, 241, 75, 154, 189, 135, 111, 43, 190, 129, 202, 18, 62, 143, 189, 48, 190, 86, 225, 72, 61, 19, 74, 8, 62, 116, 195, 107, 187, 45, 22, 162, 187, 143, 2, 79, 189, 198, 176, 46, 62, 47, 163, 219, 189, 56, 75, 72, 189, 207, 82, 27, 62, 202, 133, 11, 190, 218, 173, 0, 189, 200, 155, 25, 190, 236, 17, 44, 186, 206, 85, 147, 189, 176, 149, 36, 61, 52, 61, 71, 61, 230, 156, 104, 189, 60, 100, 246, 61, 233, 174, 80, 61, 66, 157, 182, 188, 75, 86, 222, 61, 175, 204, 143, 189, 233, 245, 130, 61, 64, 195, 140, 189, 36, 234, 237, 189, 41, 247, 9, 190, 169, 201, 143, 61, 48, 239, 36, 190, 139, 224, 157, 61, 156, 106, 23, 190, 189, 186, 172, 189, 25, 241, 237, 189, 162, 129, 137, 187, 91, 64, 47, 190, 24, 23, 193, 61, 101, 28, 189, 188, 110, 238, 13, 190, 237, 207, 0, 61, 89, 52, 49, 188, 126, 175, 89, 189, 208, 135, 22, 190, 220, 66, 33, 189, 123, 56, 29, 62, 226, 123, 226, 189, 232, 61, 162, 188, 11, 114, 43, 190, 26, 60, 148, 188, 244, 255, 138, 189, 152, 224, 11, 188, 160, 249, 92, 61, 136, 59, 19, 190, 41, 67, 60, 187, 26, 238, 31, 62, 9, 164, 41, 62, 55, 125, 195, 61, 169, 186, 10, 190, 177, 53, 183, 189, 244, 94, 19, 62, 123, 42, 28, 62, 150, 178, 198, 189, 117, 185, 3, 189, 143, 194, 167, 61, 63, 223, 240, 187, 54, 21, 31, 190, 178, 148, 71, 189, 139, 154, 214, 189, 207, 189, 214, 189, 121, 240, 50, 190, 225, 222, 171, 60, 88, 252, 251, 61, 96, 143, 1, 187, 87, 208, 255, 59, 114, 122, 39, 61, 59, 107, 202, 189, 144, 96, 41, 190, 87, 70, 73, 188, 48, 239, 129, 59, 61, 205, 52, 62, 108, 180, 15, 62, 233, 37, 172, 61, 175, 221, 21, 190, 206, 237, 187, 189, 208, 2, 64, 189, 36, 16, 32, 190, 43, 168, 1, 62, 38, 237, 2, 61, 176, 222, 50, 190, 209, 30, 206, 61, 50, 180, 11, 62, 124, 170, 51, 190, 175, 117, 237, 61, 210, 252, 128, 189, 72, 241, 86, 187, 125, 206, 0, 61, 249, 108, 11, 189, 191, 215, 84, 189, 5, 247, 152, 189, 175, 154, 30, 62, 172, 15, 235, 188, 96, 184, 87, 188, 219, 171, 14, 61, 92, 11, 134, 189, 80, 183, 11, 190, 123, 33, 201, 188, 71, 37, 78, 189, 0, 221, 47, 190, 110, 26, 74, 189, 38, 136, 27, 62, 186, 205, 208, 61, 250, 95, 240, 189, 52, 192, 48, 190, 62, 213, 246, 189, 157, 52, 188, 189, 71, 238, 33, 62, 72, 246, 251, 61, 96, 248, 32, 62, 31, 2, 177, 189, 244, 148, 255, 61, 196, 179, 40, 62, 172, 193, 217, 189, 137, 168, 45, 190, 79, 8, 160, 61, 187, 234, 12, 190, 85, 132, 132, 61, 115, 72, 199, 188, 72, 11, 24, 190, 92, 219, 7, 190, 226, 119, 251, 60, 123, 248, 177, 61, 238, 104, 174, 187, 202, 226, 243, 187, 182, 120, 136, 61, 91, 6, 200, 189, 20, 194, 19, 61, 217, 198, 85, 189, 225, 178, 147, 188, 155, 49, 236, 188, 94, 110, 13, 62, 212, 6, 226, 189, 157, 77, 32, 190, 58, 191, 152, 61, 201, 203, 51, 190, 98, 155, 209, 61, 249, 70, 228, 61, 202, 152, 184, 189, 185, 130, 152, 61, 183, 173, 196, 59, 76, 184, 236, 61, 144, 48, 253, 189, 203, 0, 173, 60, 237, 87, 231, 188, 151, 194, 39, 190, 169, 183, 76, 60, 7, 188, 2, 188, 19, 108, 231, 189, 193, 47, 231, 61, 103, 250, 152, 61, 251, 88, 62, 189, 39, 14, 70, 189, 36, 53, 20, 62, 121, 42, 197, 61, 140, 43, 39, 190, 109, 39, 26, 62, 35, 0, 235, 61, 48, 170, 187, 189, 128, 140, 35, 186, 170, 146, 247, 61, 0, 97, 29, 190, 88, 160, 77, 188, 19, 117, 11, 62, 7, 50, 168, 60, 64, 202, 245, 59, 149, 56, 26, 190, 172, 222, 29, 190, 120, 242, 125, 61, 99, 184, 188, 61, 173, 5, 172, 189, 87, 103, 0, 61, 252, 253, 164, 61, 94, 77, 193, 189, 9, 105, 81, 61, 137, 234, 7, 62, 155, 30, 242, 189, 68, 151, 183, 59, 199, 230, 245, 61, 104, 132, 167, 189, 15, 74, 249, 189, 24, 200, 18, 190, 88, 90, 217, 188, 90, 44, 201, 189, 222, 61, 33, 62, 29, 39, 1, 62, 231, 237, 225, 189, 41, 89, 132, 189, 79, 13, 192, 187, 137, 140, 11, 62, 250, 0, 226, 61, 226, 140, 254, 188, 81, 62, 61, 189, 140, 85, 233, 189, 104, 162, 178, 188, 190, 156, 17, 62, 176, 194, 151, 189, 25, 233, 14, 62, 251, 244, 4, 62, 80, 37, 210, 61, 26, 107, 129, 189, 252, 101, 73, 187, 43, 209, 43, 62, 183, 64, 218, 61, 140, 130, 11, 186, 46, 135, 216, 189, 196, 88, 78, 60, 80, 117, 213, 189, 64, 93, 210, 61, 168, 48, 26, 189, 81, 236, 52, 190, 102, 234, 63, 188, 196, 4, 113, 61, 71, 214, 155, 61, 13, 59, 165, 61, 167, 69, 195, 61, 164, 36, 24, 190, 164, 167, 25, 60, 136, 27, 129, 189, 140, 123, 149, 61, 30, 90, 194, 189, 53, 172, 161, 189, 73, 79, 229, 61, 76, 73, 255, 189, 174, 145, 14, 62, 125, 210, 47, 190, 14, 10, 169, 189, 45, 80, 236, 61, 174, 82, 151, 61, 180, 142, 34, 62, 191, 47, 31, 62, 36, 225, 144, 188, 193, 165, 201, 61, 159, 53, 30, 190, 153, 6, 63, 189, 72, 58, 55, 187, 249, 117, 7, 61, 228, 60, 63, 61, 227, 196, 41, 62, 181, 96, 164, 61, 118, 36, 43, 62, 3, 98, 204, 187, 13, 176, 51, 62, 235, 187, 230, 189, 101, 236, 210, 61, 123, 231, 57, 189, 214, 108, 28, 62, 219, 88, 174, 189, 62, 14, 51, 61, 123, 19, 246, 60, 169, 3, 128, 188, 138, 238, 82, 61, 240, 189, 63, 60, 173, 129, 238, 61, 46, 116, 46, 61, 226, 233, 233, 189, 136, 248, 48, 62, 111, 45, 33, 190, 188, 153, 8, 190, 72, 205, 29, 190, 216, 218, 237, 61, 68, 50, 12, 187, 175, 60, 222, 61, 186, 150, 45, 62, 14, 246, 34, 190, 114, 87, 131, 189, 158, 26, 170, 61, 167, 44, 12, 62, 57, 193, 251, 61, 139, 144, 4, 190, 158, 224, 219, 188, 99, 170, 211, 60, 208, 37, 199, 61, 204, 242, 38, 190, 50, 225, 204, 189, 39, 126, 21, 62, 54, 252, 182, 188, 77, 229, 95, 61, 149, 72, 49, 62, 107, 39, 207, 60, 41, 186, 8, 61, 3, 93, 119, 189, 81, 217, 88, 61, 18, 232, 212, 189, 58, 49, 12, 61, 90, 139, 129, 60, 227, 15, 193, 189, 113, 103, 203, 189, 104, 29, 243, 189, 19, 105, 252, 188, 190, 144, 207, 61, 72, 87, 211, 188, 169, 111, 13, 190, 221, 89, 224, 60, 31, 202, 34, 189, 55, 167, 219, 189, 81, 189, 51, 62, 60, 212, 250, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 168, 220, 189, 39, 174, 45, 190, 188, 218, 83, 187, 78, 132, 150, 189, 244, 224, 142, 60, 39, 244, 19, 61, 101, 17, 16, 190, 147, 141, 22, 62, 63, 90, 103, 61, 64, 182, 54, 61, 44, 144, 6, 190, 145, 66, 30, 62, 91, 73, 221, 189, 174, 86, 198, 189, 158, 117, 75, 189, 91, 71, 8, 62, 168, 226, 222, 60, 6, 249, 51, 61, 44, 50, 15, 190, 199, 127, 51, 190, 6, 144, 58, 61, 149, 238, 246, 61, 209, 214, 43, 190, 243, 13, 239, 61, 73, 57, 20, 190, 192, 110, 112, 189, 9, 119, 13, 190, 160, 72, 230, 189, 62, 160, 52, 190, 55, 132, 251, 188, 254, 146, 19, 62, 26, 162, 253, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {241, 14, 37, 190, 48, 120, 38, 62, 17, 53, 141, 60, 144, 83, 21, 62, 149, 16, 154, 61, 6, 132, 4, 61, 234, 143, 140, 188, 39, 250, 239, 61, 7, 68, 185, 61, 3, 70, 228, 61, 13, 175, 18, 190, 253, 218, 40, 62, 223, 254, 135, 189, 196, 99, 234, 61, 4, 143, 30, 190, 177, 102, 142, 61, 201, 254, 1, 62, 150, 49, 146, 189, 121, 139, 13, 190, 191, 21, 69, 60, 114, 217, 114, 189, 138, 128, 39, 190, 22, 52, 151, 59, 84, 91, 0, 62, 4, 222, 192, 189, 22, 70, 174, 61, 127, 152, 124, 61, 186, 120, 25, 190, 82, 155, 0, 62, 29, 190, 244, 61, 253, 68, 59, 189, 184, 134, 21, 190, 134, 172, 200, 189, 45, 123, 77, 60, 18, 0, 140, 61, 150, 55, 5, 190, 227, 41, 5, 190, 140, 135, 40, 61, 194, 196, 230, 188, 171, 179, 56, 189, 161, 7, 12, 62, 233, 137, 4, 190, 45, 164, 54, 61, 139, 7, 218, 189, 212, 36, 134, 61, 58, 155, 220, 189, 246, 127, 6, 62, 2, 12, 242, 188, 253, 252, 25, 62, 231, 104, 6, 190, 12, 166, 192, 61, 74, 202, 228, 189, 227, 249, 20, 62, 127, 23, 142, 188, 242, 215, 36, 62, 239, 169, 28, 190, 42, 50, 107, 61, 222, 12, 3, 190, 69, 229, 162, 61, 193, 67, 197, 60, 170, 0, 212, 189, 30, 38, 227, 60, 183, 104, 49, 61, 166, 108, 20, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {201, 191, 39, 190, 59, 79, 49, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {82, 86, 21, 62, 101, 132, 181, 62, 77, 227, 83, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {235, 0, 184, 189, 164, 192, 81, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0083/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}