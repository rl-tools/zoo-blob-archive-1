// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 72, 254, 190, 1, 123, 193, 187, 98, 90, 60, 60, 148, 203, 178, 190, 253, 237, 36, 63, 102, 148, 50, 191, 47, 173, 189, 190, 194, 142, 129, 191, 35, 211, 114, 62, 236, 1, 254, 62, 114, 108, 213, 190, 165, 238, 111, 62, 120, 242, 191, 189, 117, 204, 161, 190, 192, 121, 204, 62, 150, 141, 249, 62, 79, 116, 169, 190, 168, 45, 14, 191, 129, 23, 86, 63, 16, 203, 75, 63, 30, 121, 210, 62, 14, 192, 132, 63, 236, 37, 50, 191, 207, 0, 0, 191, 15, 124, 46, 63, 134, 103, 158, 63, 8, 235, 168, 62, 211, 48, 7, 60, 251, 11, 159, 61, 108, 229, 21, 63, 55, 28, 48, 190, 221, 223, 110, 189, 233, 1, 16, 190, 151, 38, 244, 190, 85, 250, 2, 191, 218, 10, 57, 62, 187, 41, 175, 62, 249, 2, 74, 191, 129, 155, 30, 190, 92, 86, 156, 190, 35, 241, 112, 190, 16, 70, 58, 63, 14, 96, 133, 189, 48, 51, 185, 191, 113, 168, 157, 190, 39, 29, 202, 190, 16, 27, 32, 63, 125, 237, 71, 62, 134, 38, 243, 62, 152, 51, 42, 191, 97, 34, 57, 62, 128, 115, 77, 190, 166, 149, 187, 191, 208, 231, 98, 190, 109, 44, 5, 63, 10, 102, 101, 61, 75, 245, 39, 191, 222, 255, 188, 190, 82, 78, 190, 63, 62, 90, 139, 62, 184, 167, 160, 187, 92, 33, 94, 63, 39, 48, 254, 62, 66, 252, 217, 62, 208, 25, 208, 63, 56, 161, 166, 62, 234, 54, 17, 190, 180, 189, 29, 63, 53, 152, 164, 61, 198, 84, 40, 191, 51, 193, 137, 62, 161, 48, 37, 191, 21, 74, 157, 62, 73, 217, 147, 63, 134, 66, 199, 62, 169, 241, 35, 63, 194, 172, 211, 190, 146, 237, 240, 62, 35, 85, 40, 191, 119, 29, 130, 62, 74, 250, 227, 61, 190, 218, 156, 62, 31, 136, 175, 62, 96, 187, 190, 62, 40, 63, 12, 63, 110, 1, 14, 63, 28, 44, 103, 62, 225, 178, 5, 62, 49, 87, 30, 191, 157, 73, 38, 63, 3, 210, 207, 188, 30, 196, 198, 63, 101, 7, 229, 62, 73, 233, 73, 191, 171, 61, 133, 189, 171, 173, 12, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 83, 25, 191, 86, 108, 134, 62, 14, 239, 41, 190, 11, 197, 31, 63, 115, 188, 137, 190, 164, 53, 68, 191, 99, 18, 130, 191, 194, 88, 157, 62, 64, 148, 154, 190, 38, 178, 209, 190, 158, 16, 181, 62, 141, 200, 89, 62, 12, 31, 240, 62, 192, 91, 221, 62, 71, 255, 159, 62, 121, 152, 43, 63, 128, 175, 81, 62, 198, 246, 71, 62, 137, 55, 65, 190, 206, 175, 146, 190, 78, 178, 83, 190, 210, 64, 144, 62, 135, 97, 68, 63, 253, 172, 103, 190, 3, 172, 1, 190, 135, 188, 29, 191, 4, 220, 81, 63, 141, 154, 115, 188, 223, 16, 180, 190, 77, 67, 190, 188, 139, 215, 190, 190, 58, 110, 82, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 234, 157, 61, 123, 115, 99, 62, 185, 165, 135, 62, 22, 198, 130, 62, 152, 192, 20, 190, 125, 230, 116, 190, 72, 98, 85, 189, 113, 161, 43, 62, 238, 134, 17, 61, 53, 194, 84, 190, 15, 114, 35, 188, 54, 91, 98, 61, 252, 172, 251, 60, 8, 169, 11, 62, 107, 79, 66, 190, 126, 75, 137, 61, 197, 16, 143, 61, 17, 170, 193, 62, 136, 153, 39, 190, 116, 6, 70, 191, 63, 135, 185, 190, 92, 66, 109, 62, 197, 130, 133, 61, 178, 164, 99, 62, 175, 254, 154, 61, 216, 52, 73, 62, 245, 99, 10, 62, 188, 204, 40, 62, 146, 197, 60, 62, 147, 166, 168, 61, 55, 134, 202, 190, 125, 112, 15, 62, 211, 139, 146, 61, 224, 255, 233, 189, 151, 94, 148, 61, 31, 39, 139, 62, 131, 24, 41, 62, 175, 147, 45, 191, 43, 165, 66, 191, 246, 32, 187, 61, 167, 112, 99, 191, 2, 190, 187, 188, 123, 22, 170, 61, 112, 182, 44, 189, 160, 104, 138, 62, 87, 89, 164, 60, 129, 167, 154, 189, 227, 44, 238, 188, 186, 239, 37, 62, 214, 139, 94, 190, 97, 113, 241, 188, 21, 54, 241, 188, 18, 175, 128, 60, 236, 123, 227, 189, 181, 215, 43, 62, 28, 86, 185, 190, 89, 59, 213, 190, 110, 161, 39, 61, 205, 210, 198, 190, 201, 36, 209, 61, 94, 1, 76, 62, 216, 143, 225, 61, 127, 33, 194, 190, 31, 56, 203, 62, 176, 71, 245, 61, 198, 172, 116, 62, 52, 201, 57, 62, 19, 33, 154, 62, 127, 147, 247, 189, 91, 148, 43, 190, 242, 215, 41, 191, 83, 27, 106, 62, 30, 18, 131, 191, 18, 213, 68, 189, 251, 70, 0, 62, 72, 157, 153, 62, 78, 174, 225, 61, 87, 104, 52, 189, 240, 47, 213, 62, 213, 7, 143, 189, 232, 132, 10, 62, 157, 20, 218, 62, 128, 117, 147, 189, 94, 62, 192, 189, 212, 120, 153, 190, 129, 101, 53, 190, 83, 20, 61, 189, 25, 237, 155, 190, 7, 101, 208, 190, 41, 19, 223, 60, 108, 168, 102, 61, 253, 205, 56, 62, 159, 24, 67, 61, 40, 247, 4, 62, 140, 46, 213, 190, 117, 157, 199, 190, 107, 227, 148, 61, 130, 230, 20, 62, 62, 174, 150, 190, 216, 142, 228, 190, 127, 67, 95, 62, 17, 208, 137, 61, 46, 37, 15, 61, 84, 57, 41, 190, 248, 36, 204, 190, 160, 27, 79, 190, 193, 162, 37, 61, 175, 211, 25, 189, 79, 17, 142, 191, 123, 102, 27, 62, 32, 176, 152, 191, 152, 185, 197, 61, 117, 55, 45, 62, 250, 23, 50, 191, 3, 63, 39, 60, 22, 244, 77, 62, 67, 212, 70, 188, 214, 162, 95, 61, 144, 252, 58, 190, 236, 219, 161, 190, 207, 33, 48, 191, 209, 209, 81, 190, 184, 42, 22, 62, 15, 78, 135, 191, 12, 43, 179, 190, 19, 54, 35, 190, 77, 127, 27, 190, 160, 181, 203, 190, 126, 166, 205, 60, 1, 55, 7, 62, 31, 233, 155, 189, 150, 97, 236, 60, 146, 188, 72, 62, 110, 227, 155, 61, 166, 229, 41, 190, 223, 210, 25, 62, 15, 204, 74, 190, 61, 231, 92, 62, 143, 239, 95, 60, 146, 77, 133, 62, 187, 83, 92, 61, 165, 99, 174, 189, 141, 59, 29, 61, 67, 16, 38, 61, 95, 196, 13, 62, 46, 10, 24, 190, 32, 227, 151, 61, 211, 99, 199, 61, 94, 92, 109, 62, 221, 118, 39, 189, 230, 168, 141, 62, 8, 43, 2, 190, 150, 97, 0, 62, 45, 62, 169, 189, 87, 67, 126, 61, 113, 40, 116, 60, 97, 138, 146, 61, 99, 18, 54, 189, 249, 167, 9, 188, 208, 84, 165, 61, 238, 39, 49, 61, 125, 92, 218, 187, 108, 79, 201, 188, 174, 4, 133, 189, 225, 250, 76, 188, 204, 0, 173, 61, 27, 198, 180, 187, 21, 253, 205, 189, 16, 101, 188, 189, 113, 89, 211, 189, 186, 146, 157, 61, 79, 198, 190, 189, 88, 157, 35, 190, 41, 209, 200, 61, 187, 254, 196, 61, 57, 205, 254, 61, 68, 196, 32, 190, 160, 168, 227, 189, 44, 197, 21, 187, 212, 191, 29, 189, 131, 1, 139, 61, 223, 191, 34, 190, 168, 169, 51, 190, 52, 109, 45, 60, 121, 142, 193, 61, 97, 136, 174, 189, 243, 11, 146, 189, 209, 139, 198, 61, 134, 155, 25, 190, 16, 57, 129, 60, 216, 74, 63, 189, 220, 243, 71, 189, 64, 33, 31, 189, 146, 12, 189, 60, 7, 196, 250, 189, 199, 83, 82, 190, 17, 72, 31, 190, 19, 79, 248, 189, 117, 195, 150, 187, 100, 88, 228, 61, 14, 212, 52, 189, 121, 165, 243, 188, 198, 162, 215, 59, 228, 184, 134, 190, 139, 150, 250, 189, 153, 140, 48, 189, 174, 13, 131, 61, 107, 192, 168, 190, 234, 114, 46, 190, 163, 235, 9, 190, 250, 135, 15, 189, 74, 243, 68, 61, 28, 86, 26, 62, 77, 100, 174, 190, 1, 99, 63, 190, 14, 121, 133, 59, 52, 100, 197, 58, 139, 184, 149, 61, 193, 73, 68, 61, 41, 0, 230, 61, 228, 233, 241, 60, 170, 184, 186, 189, 116, 175, 233, 61, 142, 56, 118, 61, 223, 207, 22, 61, 122, 181, 53, 190, 223, 51, 212, 190, 47, 193, 7, 190, 117, 233, 95, 62, 17, 176, 107, 189, 110, 70, 23, 191, 89, 20, 110, 62, 150, 79, 3, 191, 25, 5, 83, 62, 163, 19, 245, 189, 84, 193, 163, 61, 35, 76, 229, 61, 126, 29, 20, 62, 45, 132, 179, 188, 190, 178, 67, 189, 151, 90, 147, 188, 208, 247, 81, 190, 23, 58, 184, 62, 47, 129, 111, 61, 73, 107, 131, 189, 19, 187, 180, 189, 212, 238, 175, 60, 95, 232, 197, 190, 129, 244, 189, 190, 104, 220, 151, 189, 102, 220, 135, 61, 218, 125, 11, 61, 36, 201, 152, 189, 251, 200, 140, 61, 226, 119, 61, 61, 138, 222, 135, 190, 123, 105, 3, 60, 10, 23, 44, 190, 159, 247, 93, 62, 79, 207, 216, 62, 189, 244, 101, 62, 74, 252, 139, 62, 71, 72, 219, 190, 3, 172, 86, 62, 126, 210, 130, 191, 47, 155, 142, 61, 195, 130, 151, 188, 57, 91, 164, 189, 216, 31, 97, 62, 12, 76, 11, 61, 173, 2, 146, 189, 67, 57, 242, 190, 97, 110, 26, 62, 90, 119, 143, 190, 55, 240, 110, 62, 1, 88, 63, 62, 27, 66, 63, 190, 93, 212, 2, 191, 40, 234, 186, 189, 247, 208, 103, 61, 243, 170, 238, 190, 250, 116, 127, 62, 188, 29, 182, 190, 172, 81, 160, 189, 4, 133, 18, 190, 103, 194, 47, 188, 56, 56, 49, 190, 127, 94, 14, 190, 63, 25, 46, 190, 146, 34, 75, 189, 163, 251, 173, 62, 10, 94, 166, 62, 22, 5, 207, 60, 129, 70, 110, 61, 238, 221, 28, 191, 164, 126, 95, 62, 33, 224, 63, 191, 39, 93, 2, 190, 250, 30, 160, 62, 56, 48, 168, 62, 218, 98, 101, 62, 57, 197, 115, 190, 169, 252, 224, 60, 115, 96, 129, 190, 250, 92, 151, 61, 139, 149, 219, 190, 188, 103, 79, 62, 105, 212, 169, 61, 130, 241, 178, 189, 176, 53, 171, 189, 223, 244, 8, 62, 239, 24, 167, 61, 26, 27, 11, 191, 57, 224, 81, 62, 245, 60, 36, 61, 171, 124, 8, 60, 144, 193, 175, 62, 32, 208, 15, 62, 198, 250, 135, 190, 63, 48, 32, 62, 212, 244, 141, 61, 201, 13, 185, 60, 235, 53, 88, 62, 31, 116, 181, 189, 158, 29, 6, 62, 41, 101, 43, 189, 196, 222, 251, 62, 130, 236, 49, 190, 119, 57, 239, 62, 71, 231, 50, 61, 49, 8, 16, 62, 43, 14, 11, 61, 189, 3, 9, 62, 98, 117, 197, 61, 206, 124, 169, 61, 83, 152, 33, 61, 71, 61, 54, 190, 120, 143, 207, 62, 53, 104, 105, 61, 124, 18, 196, 190, 32, 14, 16, 190, 57, 149, 112, 61, 103, 199, 87, 189, 38, 177, 142, 61, 242, 3, 10, 62, 171, 12, 23, 62, 119, 72, 26, 62, 108, 112, 9, 189, 203, 208, 78, 190, 251, 95, 162, 60, 46, 252, 153, 189, 202, 101, 60, 62, 222, 15, 45, 189, 49, 191, 35, 190, 115, 42, 214, 189, 72, 100, 52, 189, 153, 242, 211, 60, 127, 195, 220, 189, 143, 184, 31, 191, 71, 100, 149, 62, 56, 110, 104, 190, 96, 19, 83, 189, 97, 66, 68, 62, 126, 96, 124, 62, 233, 115, 114, 62, 147, 61, 248, 61, 210, 139, 216, 61, 170, 176, 206, 187, 130, 10, 4, 190, 175, 252, 16, 61, 243, 193, 138, 61, 200, 202, 206, 61, 218, 126, 12, 61, 158, 92, 246, 189, 195, 52, 78, 62, 69, 246, 218, 190, 237, 1, 248, 189, 112, 70, 217, 188, 245, 34, 223, 61, 20, 198, 18, 189, 108, 65, 104, 190, 238, 57, 138, 189, 248, 246, 73, 61, 66, 224, 165, 190, 39, 155, 7, 190, 17, 217, 141, 62, 91, 93, 160, 62, 177, 221, 177, 61, 227, 212, 245, 189, 212, 31, 239, 190, 103, 253, 3, 62, 188, 157, 78, 190, 249, 177, 217, 62, 2, 53, 182, 190, 213, 3, 72, 62, 229, 252, 12, 62, 156, 167, 55, 187, 62, 76, 183, 189, 241, 23, 225, 190, 51, 73, 61, 189, 2, 95, 215, 61, 30, 243, 145, 189, 163, 224, 133, 189, 224, 27, 106, 191, 156, 2, 137, 190, 33, 153, 79, 62, 172, 68, 33, 61, 39, 15, 254, 61, 199, 69, 219, 61, 78, 144, 176, 61, 221, 235, 196, 60, 19, 244, 253, 61, 160, 226, 41, 62, 190, 222, 156, 62, 50, 188, 231, 190, 38, 199, 149, 189, 232, 26, 143, 61, 180, 149, 240, 189, 92, 39, 245, 61, 5, 134, 145, 189, 97, 201, 188, 60, 91, 206, 114, 189, 249, 160, 185, 61, 84, 155, 240, 189, 73, 167, 73, 189, 120, 9, 220, 189, 85, 214, 245, 189, 200, 154, 227, 187, 145, 251, 142, 188, 85, 86, 67, 61, 200, 160, 12, 190, 185, 210, 29, 190, 113, 247, 138, 61, 156, 52, 196, 60, 71, 110, 131, 60, 199, 106, 186, 61, 208, 243, 216, 189, 227, 81, 208, 189, 30, 68, 167, 189, 131, 238, 223, 61, 239, 76, 96, 61, 145, 240, 33, 61, 111, 37, 234, 61, 152, 118, 231, 189, 149, 56, 208, 61, 164, 140, 94, 189, 215, 171, 136, 189, 160, 196, 7, 62, 34, 167, 204, 189, 198, 184, 131, 188, 219, 37, 2, 62, 43, 223, 133, 189, 183, 70, 15, 190, 22, 86, 45, 190, 204, 56, 116, 61, 87, 148, 111, 189, 165, 216, 50, 190, 199, 57, 239, 61, 247, 204, 244, 188, 211, 2, 4, 62, 79, 27, 29, 189, 138, 203, 228, 189, 160, 77, 197, 60, 219, 33, 40, 190, 24, 251, 156, 59, 38, 88, 232, 189, 44, 50, 109, 188, 141, 77, 189, 61, 232, 79, 106, 189, 42, 149, 252, 59, 245, 162, 39, 62, 106, 247, 139, 61, 150, 31, 192, 61, 253, 180, 3, 62, 59, 43, 79, 60, 154, 170, 43, 61, 200, 157, 234, 188, 103, 236, 106, 189, 124, 185, 18, 190, 148, 80, 153, 189, 138, 230, 37, 62, 167, 243, 153, 190, 190, 255, 164, 190, 48, 56, 63, 62, 6, 13, 181, 61, 156, 135, 250, 190, 87, 36, 68, 191, 171, 37, 101, 189, 160, 79, 186, 191, 37, 57, 159, 62, 143, 199, 166, 190, 42, 125, 73, 189, 80, 150, 41, 61, 170, 188, 113, 62, 210, 27, 67, 190, 124, 151, 77, 189, 68, 157, 157, 62, 183, 153, 252, 59, 28, 199, 255, 190, 255, 43, 176, 62, 143, 33, 204, 189, 0, 34, 60, 190, 232, 97, 142, 189, 46, 82, 224, 190, 220, 183, 235, 190, 248, 74, 120, 189, 235, 125, 23, 62, 217, 79, 6, 190, 120, 8, 194, 190, 47, 7, 175, 61, 163, 137, 7, 190, 245, 59, 75, 191, 148, 214, 255, 61, 21, 54, 72, 190, 92, 13, 147, 191, 193, 203, 199, 189, 225, 238, 4, 61, 156, 237, 92, 62, 48, 244, 22, 63, 64, 119, 151, 62, 252, 196, 193, 190, 73, 107, 143, 61, 143, 194, 161, 189, 225, 177, 10, 59, 211, 77, 40, 62, 163, 78, 164, 189, 221, 72, 254, 61, 178, 26, 246, 61, 101, 94, 210, 189, 161, 192, 94, 191, 9, 60, 132, 60, 125, 185, 143, 62, 36, 223, 15, 62, 22, 40, 82, 62, 3, 5, 7, 61, 110, 36, 153, 190, 56, 160, 107, 190, 108, 146, 149, 190, 248, 71, 249, 189, 18, 172, 249, 189, 2, 203, 61, 62, 188, 140, 8, 191, 226, 9, 3, 63, 235, 205, 150, 190, 116, 126, 196, 189, 92, 31, 59, 62, 228, 239, 124, 62, 162, 51, 155, 188, 239, 238, 200, 190, 17, 90, 219, 190, 228, 242, 127, 190, 224, 68, 110, 190, 127, 125, 178, 186, 30, 15, 137, 191, 164, 50, 183, 61, 172, 8, 36, 58, 231, 79, 27, 62, 241, 79, 202, 60, 230, 96, 68, 189, 65, 100, 90, 62, 149, 155, 205, 189, 139, 97, 102, 62, 40, 62, 166, 190, 86, 141, 8, 189, 244, 74, 55, 191, 217, 64, 176, 62, 84, 70, 221, 62, 170, 167, 154, 62, 50, 125, 219, 61, 42, 18, 107, 189, 33, 89, 140, 62, 102, 222, 129, 60, 230, 84, 146, 189, 1, 77, 243, 61, 250, 179, 227, 190, 240, 24, 116, 61, 230, 3, 10, 62, 170, 104, 33, 62, 81, 54, 63, 190, 14, 24, 219, 190, 119, 118, 155, 190, 132, 220, 170, 190, 173, 20, 0, 191, 41, 0, 249, 60, 119, 106, 187, 62, 81, 205, 94, 191, 53, 67, 242, 61, 106, 190, 11, 190, 178, 84, 176, 61, 195, 43, 200, 61, 154, 41, 154, 187, 41, 25, 39, 63, 43, 61, 130, 191, 173, 131, 210, 62, 123, 26, 101, 190, 190, 145, 240, 190, 93, 71, 77, 191, 77, 116, 248, 62, 2, 197, 211, 62, 244, 48, 46, 189, 30, 9, 102, 189, 87, 140, 13, 190, 242, 163, 223, 62, 248, 8, 171, 61, 119, 74, 135, 62, 228, 177, 76, 62, 123, 217, 93, 191, 47, 18, 45, 60, 79, 178, 185, 60, 208, 53, 18, 191, 192, 193, 146, 190, 246, 160, 20, 191, 248, 40, 191, 61, 16, 90, 144, 190, 178, 162, 7, 191, 154, 46, 43, 190, 252, 188, 166, 190, 119, 217, 20, 62, 8, 155, 180, 190, 193, 178, 222, 62, 227, 124, 149, 191, 7, 2, 60, 62, 248, 198, 88, 191, 52, 200, 203, 188, 243, 33, 103, 61, 70, 158, 210, 190, 113, 203, 138, 189, 63, 148, 44, 62, 19, 167, 120, 61, 38, 163, 11, 190, 249, 172, 44, 62, 205, 128, 2, 190, 21, 8, 100, 190, 168, 137, 21, 190, 22, 141, 143, 62, 189, 58, 9, 190, 30, 211, 88, 191, 250, 191, 251, 60, 39, 254, 105, 188, 31, 1, 104, 191, 229, 188, 170, 61, 112, 22, 43, 62, 35, 200, 20, 62, 113, 23, 186, 190, 156, 209, 182, 189, 90, 71, 140, 190, 169, 80, 175, 61, 14, 222, 101, 190, 206, 73, 230, 189, 147, 226, 186, 190, 231, 60, 96, 61, 119, 218, 192, 59, 162, 171, 11, 61, 230, 189, 176, 61, 4, 181, 254, 60, 241, 181, 43, 190, 187, 196, 149, 190, 252, 59, 187, 62, 13, 219, 137, 190, 169, 214, 210, 190, 130, 186, 135, 190, 189, 80, 64, 191, 108, 231, 108, 189, 132, 10, 122, 62, 114, 219, 145, 62, 108, 14, 163, 189, 146, 121, 153, 62, 240, 250, 77, 190, 52, 246, 152, 190, 66, 152, 136, 62, 227, 50, 48, 191, 167, 237, 55, 61, 184, 93, 186, 189, 97, 68, 21, 62, 232, 40, 145, 62, 102, 37, 8, 61, 94, 230, 34, 190, 95, 172, 245, 189, 68, 70, 137, 61, 204, 248, 8, 190, 155, 248, 217, 62, 91, 174, 155, 189, 88, 218, 68, 60, 153, 89, 127, 190, 30, 141, 24, 62, 104, 29, 90, 62, 198, 223, 56, 190, 241, 44, 14, 62, 102, 9, 195, 189, 243, 85, 79, 62, 156, 101, 130, 190, 201, 213, 70, 191, 156, 147, 160, 190, 80, 19, 117, 60, 186, 56, 204, 188, 27, 16, 157, 62, 17, 39, 130, 62, 23, 152, 165, 62, 216, 138, 233, 61, 70, 200, 150, 61, 241, 175, 33, 62, 209, 15, 104, 62, 34, 163, 220, 190, 163, 44, 175, 61, 3, 98, 235, 189, 251, 182, 195, 190, 124, 110, 243, 189, 99, 191, 78, 62, 240, 224, 213, 62, 228, 30, 55, 190, 138, 75, 187, 190, 93, 241, 200, 61, 116, 100, 187, 190, 152, 26, 184, 61, 95, 2, 31, 61, 158, 64, 145, 62, 56, 185, 109, 61, 157, 60, 27, 61, 132, 197, 129, 62, 133, 155, 50, 190, 206, 52, 163, 62, 125, 117, 177, 61, 58, 2, 141, 61, 14, 110, 26, 187, 5, 201, 132, 61, 114, 93, 23, 189, 88, 46, 23, 190, 230, 151, 6, 191, 9, 142, 138, 190, 56, 223, 108, 190, 133, 97, 145, 61, 165, 130, 120, 190, 188, 249, 105, 190, 131, 242, 129, 190, 74, 49, 56, 62, 136, 57, 19, 191, 230, 156, 104, 189, 193, 203, 159, 62, 249, 0, 184, 61, 91, 110, 188, 189, 175, 165, 41, 190, 45, 72, 78, 191, 118, 57, 42, 63, 191, 73, 93, 191, 246, 234, 81, 62, 31, 180, 47, 190, 217, 52, 54, 62, 16, 131, 184, 189, 143, 121, 65, 190, 126, 25, 30, 191, 55, 161, 186, 62, 49, 237, 49, 62, 153, 252, 189, 189, 248, 192, 71, 187, 137, 11, 142, 190, 233, 21, 99, 61, 50, 60, 10, 191, 44, 36, 209, 62, 188, 214, 135, 62, 73, 11, 6, 62, 0, 28, 10, 62, 78, 212, 143, 188, 79, 172, 253, 62, 136, 151, 213, 189, 150, 116, 3, 63, 24, 181, 207, 190, 23, 71, 106, 190, 248, 237, 2, 62, 251, 254, 16, 60, 222, 27, 95, 62, 55, 83, 61, 190, 104, 238, 87, 190, 175, 64, 141, 61, 51, 246, 14, 62, 228, 197, 172, 62, 72, 225, 27, 190, 223, 4, 33, 62, 183, 198, 116, 61, 209, 105, 148, 62, 70, 230, 201, 189, 233, 173, 7, 187, 95, 249, 227, 61, 219, 140, 98, 189, 225, 241, 162, 187, 98, 84, 75, 190, 14, 223, 228, 61, 225, 227, 24, 190, 203, 196, 96, 190, 132, 248, 161, 60, 178, 16, 205, 62, 130, 203, 34, 189, 232, 82, 60, 62, 80, 99, 47, 62, 45, 179, 226, 60, 241, 194, 43, 189, 96, 117, 138, 61, 122, 30, 12, 62, 114, 206, 121, 62, 140, 241, 36, 62, 250, 29, 53, 62, 175, 221, 21, 190, 194, 198, 203, 190, 22, 175, 198, 190, 143, 247, 184, 189, 200, 100, 207, 62, 222, 59, 15, 190, 127, 232, 119, 191, 60, 22, 160, 62, 121, 157, 34, 191, 9, 194, 69, 60, 77, 172, 233, 189, 38, 199, 145, 61, 3, 132, 45, 61, 227, 57, 147, 62, 248, 45, 193, 189, 61, 93, 184, 61, 121, 54, 128, 62, 72, 91, 184, 188, 28, 83, 128, 62, 62, 10, 86, 62, 222, 16, 46, 62, 126, 110, 173, 189, 141, 220, 225, 189, 178, 139, 234, 190, 253, 121, 177, 190, 135, 105, 134, 190, 166, 249, 216, 61, 75, 13, 95, 62, 204, 23, 223, 189, 225, 253, 80, 190, 180, 227, 28, 189, 207, 115, 171, 191, 157, 52, 188, 189, 44, 113, 183, 62, 46, 79, 145, 63, 146, 240, 237, 62, 191, 232, 138, 190, 0, 236, 134, 62, 212, 84, 164, 61, 189, 89, 200, 189, 120, 96, 81, 191, 126, 160, 14, 60, 209, 55, 0, 189, 196, 238, 64, 189, 177, 247, 153, 188, 98, 41, 71, 190, 206, 26, 80, 190, 27, 126, 208, 189, 91, 152, 163, 62, 93, 171, 57, 191, 213, 220, 229, 61, 85, 231, 171, 61, 134, 104, 183, 61, 240, 72, 219, 190, 124, 115, 213, 61, 218, 18, 20, 62, 119, 18, 128, 190, 245, 58, 207, 61, 248, 243, 122, 190, 38, 177, 106, 190, 245, 205, 156, 61, 103, 67, 240, 190, 229, 93, 96, 62, 245, 104, 183, 62, 207, 187, 144, 189, 138, 189, 193, 62, 121, 181, 14, 189, 55, 226, 146, 62, 185, 57, 199, 190, 200, 188, 249, 190, 136, 58, 34, 189, 15, 113, 135, 190, 176, 125, 177, 62, 223, 208, 193, 190, 139, 130, 112, 59, 173, 51, 87, 189, 187, 124, 237, 61, 65, 253, 137, 189, 249, 7, 28, 191, 70, 174, 83, 62, 93, 56, 204, 61, 181, 39, 1, 191, 141, 173, 55, 190, 239, 97, 5, 191, 136, 155, 244, 190, 94, 119, 43, 62, 18, 26, 125, 62, 230, 103, 163, 61, 25, 78, 189, 61, 138, 78, 64, 62, 139, 217, 101, 189, 120, 94, 249, 61, 61, 7, 103, 61, 162, 174, 184, 60, 95, 133, 236, 190, 75, 28, 80, 59, 196, 147, 197, 189, 197, 83, 95, 60, 111, 67, 103, 61, 161, 234, 185, 189, 118, 62, 8, 61, 78, 104, 243, 61, 105, 78, 9, 190, 240, 205, 17, 188, 24, 79, 254, 61, 111, 26, 211, 189, 11, 58, 255, 189, 96, 97, 17, 190, 65, 138, 231, 188, 208, 87, 234, 189, 208, 39, 27, 62, 172, 24, 228, 61, 104, 81, 254, 189, 17, 18, 140, 189, 120, 213, 188, 188, 200, 70, 255, 61, 109, 185, 194, 61, 94, 25, 45, 189, 179, 47, 109, 189, 87, 246, 2, 190, 49, 97, 15, 189, 19, 175, 253, 61, 54, 12, 185, 189, 197, 191, 1, 62, 76, 53, 242, 61, 180, 142, 179, 61, 235, 211, 165, 189, 217, 57, 170, 188, 12, 7, 25, 62, 67, 241, 25, 62, 209, 146, 44, 191, 157, 82, 18, 191, 74, 49, 173, 189, 147, 57, 91, 190, 142, 71, 133, 62, 2, 125, 49, 62, 33, 219, 38, 188, 252, 49, 53, 189, 200, 84, 101, 189, 62, 108, 197, 189, 183, 209, 163, 191, 225, 195, 8, 61, 223, 14, 201, 191, 239, 246, 201, 61, 69, 158, 62, 190, 105, 21, 70, 191, 105, 224, 192, 61, 79, 195, 89, 62, 242, 26, 38, 62, 190, 27, 69, 62, 230, 222, 148, 62, 183, 235, 13, 190, 205, 103, 92, 190, 147, 41, 101, 189, 189, 15, 231, 61, 39, 100, 35, 61, 70, 218, 152, 62, 37, 232, 95, 190, 151, 169, 142, 62, 153, 87, 101, 191, 42, 94, 14, 189, 157, 138, 112, 62, 150, 236, 191, 61, 110, 215, 105, 61, 78, 161, 40, 190, 81, 38, 170, 190, 80, 37, 6, 63, 46, 205, 95, 190, 71, 99, 231, 62, 181, 190, 15, 191, 107, 44, 79, 62, 203, 95, 81, 190, 28, 218, 220, 61, 65, 219, 206, 189, 205, 93, 138, 190, 238, 229, 193, 61, 120, 249, 202, 189, 228, 72, 235, 61, 67, 216, 130, 190, 79, 249, 7, 191, 137, 106, 1, 191, 29, 239, 138, 60, 137, 32, 118, 62, 10, 49, 153, 61, 114, 21, 19, 187, 133, 55, 148, 190, 25, 237, 48, 62, 192, 35, 169, 61, 147, 108, 153, 62, 78, 219, 179, 62, 205, 139, 110, 191, 138, 189, 90, 189, 158, 26, 170, 61, 95, 89, 88, 62, 68, 225, 98, 61, 174, 107, 203, 189, 13, 235, 148, 61, 234, 240, 143, 62, 44, 247, 84, 62, 87, 10, 207, 189, 183, 50, 59, 188, 4, 221, 122, 62, 180, 215, 24, 190, 211, 233, 203, 188, 250, 228, 96, 62, 69, 141, 2, 62, 95, 195, 233, 190, 243, 6, 91, 61, 55, 35, 211, 61, 15, 219, 18, 191, 87, 233, 211, 189, 168, 129, 159, 62, 76, 226, 70, 61, 234, 8, 70, 61, 68, 78, 130, 188, 124, 119, 60, 190, 166, 106, 126, 62, 58, 194, 83, 61, 20, 213, 157, 189, 154, 193, 8, 62, 158, 60, 48, 61, 16, 231, 1, 189, 220, 249, 159, 62, 72, 74, 136, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {54, 0, 142, 61, 200, 128, 219, 189, 51, 21, 68, 62, 59, 14, 156, 189, 116, 24, 131, 62, 171, 15, 226, 60, 34, 70, 152, 190, 108, 250, 89, 62, 57, 67, 22, 189, 5, 140, 159, 62, 34, 191, 78, 190, 253, 146, 159, 62, 42, 233, 110, 61, 22, 101, 12, 190, 165, 15, 134, 189, 138, 81, 120, 62, 50, 62, 17, 62, 173, 69, 199, 62, 24, 78, 7, 62, 2, 195, 217, 189, 130, 140, 14, 188, 188, 147, 48, 62, 70, 139, 135, 189, 48, 110, 145, 62, 106, 74, 34, 190, 180, 106, 165, 61, 63, 67, 191, 189, 245, 179, 167, 61, 50, 249, 62, 190, 36, 146, 105, 61, 242, 255, 145, 62, 177, 22, 194, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {126, 89, 128, 190, 169, 228, 2, 63, 160, 196, 24, 63, 7, 213, 138, 63, 255, 168, 253, 187, 101, 140, 83, 60, 10, 118, 151, 61, 61, 214, 143, 62, 124, 158, 52, 63, 186, 173, 142, 62, 174, 179, 18, 190, 124, 74, 140, 62, 229, 84, 218, 190, 187, 255, 210, 61, 251, 228, 6, 190, 138, 72, 130, 63, 161, 207, 51, 63, 24, 224, 85, 191, 165, 108, 167, 191, 40, 205, 62, 63, 189, 61, 23, 191, 208, 19, 176, 190, 54, 9, 246, 61, 170, 203, 164, 63, 4, 36, 20, 190, 88, 217, 85, 63, 238, 238, 254, 62, 154, 2, 2, 191, 124, 175, 211, 61, 108, 183, 29, 63, 233, 43, 239, 190, 54, 26, 22, 190, 30, 126, 164, 190, 166, 250, 168, 60, 183, 136, 163, 61, 176, 181, 59, 62, 187, 11, 47, 190, 247, 170, 28, 61, 136, 66, 123, 60, 74, 26, 209, 61, 189, 26, 220, 62, 212, 38, 148, 190, 60, 248, 14, 62, 175, 160, 141, 189, 24, 239, 25, 61, 1, 15, 187, 189, 123, 24, 12, 62, 195, 111, 190, 189, 69, 190, 170, 61, 68, 76, 167, 189, 190, 4, 26, 62, 123, 48, 19, 61, 148, 153, 183, 62, 145, 82, 228, 188, 201, 205, 198, 62, 174, 120, 218, 61, 249, 16, 1, 62, 13, 204, 233, 62, 192, 31, 42, 61, 118, 117, 106, 188, 64, 242, 182, 189, 106, 110, 52, 61, 215, 153, 205, 61, 160, 23, 236, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {134, 103, 22, 190, 193, 202, 38, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {195, 98, 214, 63, 182, 248, 165, 191, 133, 142, 47, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {202, 238, 178, 64, 244, 110, 71, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0083/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}