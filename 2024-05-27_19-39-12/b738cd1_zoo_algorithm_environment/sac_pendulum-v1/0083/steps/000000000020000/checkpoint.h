// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 72, 254, 190, 1, 123, 193, 187, 98, 90, 60, 60, 239, 206, 199, 190, 191, 21, 38, 63, 71, 72, 42, 191, 33, 102, 8, 191, 39, 166, 92, 191, 13, 242, 85, 62, 103, 244, 22, 63, 89, 4, 157, 190, 30, 180, 141, 62, 78, 127, 178, 189, 186, 116, 191, 190, 95, 179, 199, 62, 178, 95, 1, 63, 143, 182, 190, 190, 67, 69, 13, 191, 157, 53, 0, 63, 115, 13, 92, 63, 55, 87, 195, 62, 198, 108, 126, 63, 132, 158, 94, 191, 160, 103, 249, 190, 60, 125, 36, 63, 157, 154, 151, 63, 37, 193, 196, 62, 255, 171, 175, 188, 214, 229, 46, 188, 99, 6, 22, 63, 116, 103, 137, 190, 190, 61, 137, 189, 17, 62, 168, 189, 77, 253, 206, 190, 126, 180, 228, 190, 35, 166, 140, 62, 161, 112, 147, 62, 129, 200, 114, 191, 37, 232, 118, 189, 242, 52, 184, 190, 101, 180, 19, 189, 211, 31, 35, 63, 71, 112, 201, 189, 201, 81, 188, 191, 246, 120, 131, 190, 130, 135, 231, 190, 199, 7, 53, 63, 129, 16, 76, 62, 84, 177, 23, 63, 76, 187, 192, 190, 81, 72, 250, 61, 191, 208, 74, 190, 75, 217, 189, 191, 133, 111, 119, 190, 247, 239, 249, 62, 179, 217, 68, 61, 31, 77, 40, 191, 248, 66, 79, 190, 229, 139, 202, 63, 64, 154, 129, 62, 141, 173, 253, 59, 52, 23, 132, 63, 212, 77, 185, 62, 78, 221, 218, 62, 165, 23, 208, 63, 211, 198, 197, 62, 150, 121, 39, 190, 76, 6, 42, 63, 72, 247, 225, 61, 215, 177, 97, 191, 13, 188, 118, 62, 162, 138, 21, 191, 158, 239, 163, 62, 5, 113, 146, 63, 211, 108, 202, 62, 232, 75, 30, 63, 180, 190, 195, 190, 189, 240, 227, 62, 149, 99, 53, 191, 172, 98, 105, 62, 13, 32, 3, 62, 61, 170, 140, 61, 221, 255, 160, 62, 96, 136, 215, 62, 135, 224, 238, 62, 38, 166, 57, 63, 211, 57, 63, 62, 71, 90, 32, 62, 58, 254, 6, 191, 21, 30, 15, 63, 251, 99, 254, 60, 56, 212, 211, 63, 241, 87, 225, 62, 250, 167, 137, 191, 223, 173, 19, 189, 197, 221, 214, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 83, 25, 191, 251, 147, 107, 62, 141, 178, 148, 190, 114, 109, 28, 63, 199, 85, 137, 190, 168, 27, 75, 191, 90, 87, 149, 191, 156, 57, 107, 62, 181, 98, 167, 190, 200, 20, 228, 190, 238, 1, 155, 62, 138, 86, 44, 62, 220, 150, 228, 62, 145, 1, 232, 62, 12, 221, 163, 62, 85, 219, 28, 63, 212, 85, 119, 62, 44, 216, 141, 62, 153, 220, 115, 190, 89, 158, 211, 190, 147, 78, 94, 190, 109, 81, 126, 62, 57, 251, 55, 63, 181, 226, 155, 190, 143, 209, 200, 189, 64, 80, 50, 191, 178, 187, 72, 63, 221, 191, 62, 190, 3, 51, 213, 190, 128, 172, 190, 188, 100, 206, 226, 190, 36, 219, 88, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 234, 157, 61, 138, 41, 87, 62, 232, 200, 148, 62, 104, 177, 131, 62, 236, 145, 59, 190, 179, 143, 117, 190, 18, 179, 134, 61, 247, 250, 130, 62, 197, 196, 25, 189, 56, 171, 112, 190, 111, 241, 93, 188, 37, 89, 30, 61, 219, 156, 172, 61, 69, 93, 211, 61, 140, 149, 75, 190, 240, 24, 238, 60, 146, 20, 161, 61, 122, 173, 183, 62, 158, 219, 21, 190, 161, 116, 112, 191, 203, 177, 170, 190, 91, 228, 135, 62, 44, 191, 155, 61, 20, 180, 77, 62, 137, 215, 117, 187, 121, 28, 18, 62, 142, 20, 176, 61, 132, 112, 14, 62, 209, 215, 216, 61, 40, 223, 1, 61, 68, 87, 185, 190, 1, 237, 250, 61, 211, 139, 146, 61, 36, 182, 142, 61, 127, 74, 1, 61, 201, 121, 140, 62, 234, 69, 52, 62, 43, 100, 220, 190, 238, 44, 87, 191, 35, 202, 224, 61, 228, 131, 83, 191, 236, 3, 144, 188, 199, 87, 11, 62, 183, 46, 90, 189, 93, 196, 147, 62, 31, 31, 24, 61, 7, 248, 192, 189, 90, 119, 236, 60, 12, 133, 38, 62, 57, 124, 80, 190, 217, 107, 0, 62, 180, 228, 37, 190, 85, 36, 233, 188, 144, 30, 149, 189, 145, 125, 95, 62, 192, 89, 223, 190, 175, 61, 189, 190, 123, 192, 146, 61, 204, 190, 196, 190, 75, 130, 4, 62, 250, 241, 123, 62, 145, 167, 12, 62, 48, 34, 23, 191, 21, 86, 223, 62, 176, 71, 245, 61, 42, 95, 135, 62, 104, 156, 24, 62, 207, 76, 161, 62, 49, 140, 225, 189, 190, 203, 67, 190, 88, 146, 66, 191, 190, 38, 82, 62, 32, 243, 118, 191, 218, 28, 48, 189, 49, 55, 39, 62, 9, 70, 150, 62, 199, 5, 233, 61, 231, 143, 214, 188, 72, 25, 211, 62, 204, 229, 102, 188, 9, 252, 19, 62, 14, 189, 238, 62, 185, 162, 93, 189, 42, 232, 145, 190, 106, 143, 176, 190, 241, 218, 39, 190, 195, 20, 137, 188, 200, 52, 171, 190, 69, 64, 185, 190, 91, 191, 128, 61, 96, 35, 224, 61, 244, 101, 86, 62, 176, 225, 179, 61, 218, 37, 34, 62, 77, 84, 31, 191, 235, 199, 182, 190, 107, 227, 148, 61, 130, 230, 20, 62, 62, 174, 150, 190, 216, 142, 228, 190, 127, 67, 95, 62, 17, 208, 137, 61, 46, 37, 15, 61, 84, 57, 41, 190, 248, 36, 204, 190, 160, 27, 79, 190, 193, 162, 37, 61, 175, 211, 25, 189, 79, 17, 142, 191, 123, 102, 27, 62, 32, 176, 152, 191, 152, 185, 197, 61, 117, 55, 45, 62, 250, 23, 50, 191, 3, 63, 39, 60, 22, 244, 77, 62, 67, 212, 70, 188, 214, 162, 95, 61, 144, 252, 58, 190, 236, 219, 161, 190, 207, 33, 48, 191, 209, 209, 81, 190, 184, 42, 22, 62, 15, 78, 135, 191, 12, 43, 179, 190, 19, 54, 35, 190, 77, 127, 27, 190, 160, 181, 203, 190, 126, 166, 205, 60, 153, 135, 207, 61, 232, 201, 84, 189, 57, 21, 3, 61, 242, 28, 21, 62, 7, 19, 168, 61, 215, 84, 12, 190, 111, 4, 126, 62, 215, 106, 43, 190, 15, 167, 50, 62, 72, 159, 18, 59, 77, 81, 111, 62, 38, 166, 182, 61, 114, 201, 12, 190, 22, 69, 243, 60, 50, 239, 134, 59, 50, 231, 4, 62, 15, 60, 62, 190, 207, 131, 209, 61, 150, 71, 133, 60, 66, 177, 102, 62, 213, 93, 240, 188, 90, 181, 149, 62, 161, 194, 100, 190, 88, 114, 228, 61, 111, 90, 13, 190, 179, 6, 181, 187, 11, 215, 28, 188, 72, 147, 215, 187, 225, 57, 196, 189, 120, 100, 233, 187, 160, 167, 228, 59, 238, 39, 49, 61, 125, 92, 218, 187, 108, 79, 201, 188, 174, 4, 133, 189, 225, 250, 76, 188, 204, 0, 173, 61, 27, 198, 180, 187, 21, 253, 205, 189, 16, 101, 188, 189, 113, 89, 211, 189, 186, 146, 157, 61, 79, 198, 190, 189, 88, 157, 35, 190, 41, 209, 200, 61, 187, 254, 196, 61, 57, 205, 254, 61, 68, 196, 32, 190, 160, 168, 227, 189, 44, 197, 21, 187, 212, 191, 29, 189, 131, 1, 139, 61, 223, 191, 34, 190, 168, 169, 51, 190, 52, 109, 45, 60, 121, 142, 193, 61, 97, 136, 174, 189, 243, 11, 146, 189, 209, 139, 198, 61, 134, 155, 25, 190, 16, 57, 129, 60, 216, 74, 63, 189, 220, 243, 71, 189, 64, 33, 31, 189, 146, 12, 189, 60, 7, 196, 250, 189, 199, 83, 82, 190, 17, 72, 31, 190, 19, 79, 248, 189, 117, 195, 150, 187, 100, 88, 228, 61, 14, 212, 52, 189, 121, 165, 243, 188, 198, 162, 215, 59, 228, 184, 134, 190, 139, 150, 250, 189, 153, 140, 48, 189, 174, 13, 131, 61, 107, 192, 168, 190, 234, 114, 46, 190, 163, 235, 9, 190, 250, 135, 15, 189, 74, 243, 68, 61, 28, 86, 26, 62, 77, 100, 174, 190, 1, 99, 63, 190, 14, 121, 133, 59, 52, 100, 197, 58, 139, 184, 149, 61, 193, 73, 68, 61, 41, 0, 230, 61, 228, 233, 241, 60, 170, 184, 186, 189, 116, 175, 233, 61, 142, 56, 118, 61, 223, 207, 22, 61, 13, 152, 249, 189, 138, 19, 200, 190, 120, 169, 21, 190, 41, 193, 131, 62, 27, 162, 17, 59, 208, 14, 34, 191, 236, 115, 83, 62, 223, 150, 242, 190, 27, 48, 118, 62, 225, 199, 209, 189, 30, 224, 233, 61, 252, 19, 209, 61, 59, 153, 49, 62, 236, 115, 230, 188, 91, 57, 148, 188, 48, 185, 17, 189, 83, 116, 245, 189, 159, 71, 202, 62, 144, 102, 255, 61, 150, 148, 119, 189, 248, 133, 182, 189, 11, 151, 239, 60, 28, 62, 6, 191, 60, 199, 163, 190, 111, 27, 232, 188, 95, 33, 212, 61, 75, 142, 152, 61, 24, 224, 4, 189, 35, 175, 226, 61, 255, 183, 34, 188, 202, 248, 157, 190, 123, 105, 3, 60, 45, 18, 45, 190, 25, 244, 76, 62, 195, 101, 249, 62, 93, 16, 121, 62, 246, 114, 137, 62, 153, 108, 15, 191, 183, 189, 75, 62, 83, 51, 97, 191, 5, 185, 172, 61, 177, 208, 165, 187, 164, 41, 162, 189, 136, 128, 113, 62, 161, 183, 102, 61, 76, 207, 227, 189, 8, 239, 216, 190, 199, 31, 83, 62, 180, 24, 166, 190, 136, 196, 108, 62, 155, 12, 14, 61, 233, 245, 101, 190, 136, 72, 1, 191, 13, 31, 85, 189, 214, 95, 50, 61, 217, 204, 176, 190, 252, 69, 153, 62, 90, 106, 174, 190, 235, 120, 213, 188, 4, 31, 77, 188, 12, 156, 207, 60, 14, 100, 203, 190, 253, 228, 28, 190, 63, 25, 46, 190, 24, 139, 150, 189, 189, 107, 150, 62, 166, 130, 177, 62, 126, 218, 95, 187, 209, 227, 169, 61, 241, 158, 42, 191, 48, 237, 90, 62, 235, 34, 49, 191, 244, 90, 33, 190, 227, 224, 157, 62, 190, 27, 154, 62, 49, 123, 115, 62, 182, 99, 130, 190, 99, 162, 67, 61, 175, 112, 150, 190, 215, 0, 190, 61, 145, 110, 217, 190, 3, 31, 75, 62, 102, 255, 236, 188, 64, 5, 23, 190, 37, 60, 30, 190, 239, 241, 231, 61, 197, 239, 107, 61, 88, 237, 7, 191, 64, 132, 78, 62, 82, 88, 62, 188, 156, 53, 190, 58, 45, 113, 161, 62, 48, 189, 5, 62, 183, 125, 231, 190, 73, 120, 12, 62, 212, 244, 141, 61, 37, 242, 244, 60, 40, 234, 59, 62, 158, 217, 65, 190, 241, 65, 175, 61, 107, 185, 152, 189, 9, 72, 6, 63, 164, 176, 4, 190, 97, 123, 175, 62, 32, 181, 49, 187, 241, 64, 17, 62, 168, 172, 81, 188, 2, 0, 239, 61, 107, 54, 34, 61, 241, 248, 63, 60, 199, 236, 45, 187, 224, 136, 143, 190, 5, 46, 189, 62, 203, 141, 142, 61, 213, 9, 246, 190, 25, 42, 56, 190, 231, 227, 17, 62, 152, 48, 39, 189, 58, 55, 107, 61, 255, 8, 65, 61, 60, 29, 194, 61, 4, 89, 243, 61, 152, 167, 191, 189, 114, 116, 129, 190, 250, 168, 29, 189, 187, 197, 249, 189, 173, 188, 49, 62, 222, 15, 45, 189, 73, 69, 83, 189, 196, 30, 178, 189, 32, 195, 54, 189, 92, 132, 149, 61, 32, 64, 146, 189, 164, 141, 50, 191, 32, 230, 147, 62, 105, 35, 61, 190, 238, 59, 20, 188, 248, 112, 51, 62, 183, 159, 137, 62, 19, 24, 104, 62, 76, 225, 13, 62, 140, 189, 70, 61, 162, 197, 79, 60, 110, 81, 12, 190, 73, 232, 62, 188, 113, 70, 46, 62, 131, 210, 166, 61, 37, 225, 110, 60, 244, 180, 234, 189, 247, 11, 102, 62, 88, 91, 51, 191, 151, 58, 185, 189, 18, 48, 232, 60, 160, 39, 176, 61, 149, 3, 153, 187, 1, 246, 107, 190, 231, 76, 163, 188, 37, 40, 40, 189, 1, 167, 247, 190, 39, 155, 7, 190, 81, 186, 142, 62, 209, 175, 157, 62, 177, 93, 175, 61, 16, 141, 10, 190, 54, 246, 242, 190, 96, 100, 128, 62, 18, 167, 39, 190, 6, 53, 171, 62, 127, 64, 185, 190, 31, 134, 63, 62, 83, 245, 252, 61, 58, 250, 42, 60, 131, 80, 223, 189, 33, 188, 230, 190, 3, 210, 199, 189, 29, 107, 242, 61, 189, 15, 121, 188, 204, 98, 99, 189, 79, 13, 153, 191, 162, 46, 133, 190, 154, 208, 73, 62, 232, 188, 130, 60, 168, 217, 20, 62, 153, 237, 92, 60, 210, 42, 156, 61, 235, 117, 7, 189, 224, 93, 210, 61, 252, 53, 255, 61, 128, 158, 144, 62, 53, 7, 237, 190, 241, 117, 96, 189, 232, 26, 143, 61, 180, 149, 240, 189, 92, 39, 245, 61, 5, 134, 145, 189, 97, 201, 188, 60, 91, 206, 114, 189, 249, 160, 185, 61, 84, 155, 240, 189, 73, 167, 73, 189, 120, 9, 220, 189, 85, 214, 245, 189, 200, 154, 227, 187, 145, 251, 142, 188, 85, 86, 67, 61, 200, 160, 12, 190, 185, 210, 29, 190, 113, 247, 138, 61, 156, 52, 196, 60, 71, 110, 131, 60, 199, 106, 186, 61, 208, 243, 216, 189, 227, 81, 208, 189, 30, 68, 167, 189, 131, 238, 223, 61, 239, 76, 96, 61, 145, 240, 33, 61, 111, 37, 234, 61, 152, 118, 231, 189, 149, 56, 208, 61, 164, 140, 94, 189, 215, 171, 136, 189, 160, 196, 7, 62, 34, 167, 204, 189, 198, 184, 131, 188, 219, 37, 2, 62, 43, 223, 133, 189, 183, 70, 15, 190, 22, 86, 45, 190, 204, 56, 116, 61, 87, 148, 111, 189, 165, 216, 50, 190, 199, 57, 239, 61, 247, 204, 244, 188, 211, 2, 4, 62, 79, 27, 29, 189, 138, 203, 228, 189, 160, 77, 197, 60, 219, 33, 40, 190, 24, 251, 156, 59, 38, 88, 232, 189, 44, 50, 109, 188, 141, 77, 189, 61, 232, 79, 106, 189, 42, 149, 252, 59, 245, 162, 39, 62, 106, 247, 139, 61, 150, 31, 192, 61, 253, 180, 3, 62, 59, 43, 79, 60, 154, 170, 43, 61, 200, 157, 234, 188, 103, 236, 106, 189, 124, 185, 18, 190, 148, 80, 153, 189, 138, 230, 37, 62, 114, 205, 165, 190, 223, 66, 180, 190, 10, 199, 72, 62, 49, 82, 142, 61, 154, 47, 249, 190, 81, 230, 94, 191, 25, 176, 118, 190, 99, 104, 183, 191, 31, 202, 145, 62, 116, 6, 231, 190, 168, 170, 164, 189, 234, 12, 205, 61, 145, 48, 99, 62, 214, 16, 43, 190, 205, 61, 179, 189, 215, 219, 163, 62, 162, 148, 8, 61, 109, 128, 42, 191, 64, 0, 124, 62, 244, 206, 50, 190, 115, 103, 137, 190, 226, 88, 191, 189, 46, 82, 224, 190, 21, 111, 255, 190, 8, 9, 67, 189, 10, 51, 222, 61, 121, 235, 9, 190, 199, 37, 161, 190, 119, 64, 167, 61, 75, 81, 172, 190, 145, 132, 73, 191, 148, 214, 255, 61, 4, 231, 147, 189, 0, 149, 143, 191, 171, 27, 231, 189, 22, 201, 166, 189, 208, 61, 39, 62, 173, 206, 9, 63, 155, 237, 154, 62, 240, 60, 149, 190, 107, 96, 174, 189, 180, 30, 108, 189, 122, 128, 81, 190, 112, 95, 20, 62, 69, 55, 82, 190, 138, 26, 43, 61, 236, 51, 24, 62, 124, 20, 5, 190, 127, 161, 153, 191, 237, 254, 186, 61, 122, 212, 129, 62, 116, 22, 112, 188, 115, 154, 138, 62, 166, 96, 162, 61, 46, 255, 224, 190, 110, 133, 33, 190, 31, 53, 179, 190, 104, 123, 18, 190, 40, 10, 14, 190, 148, 111, 94, 62, 39, 3, 19, 191, 25, 163, 243, 62, 34, 69, 224, 190, 116, 126, 196, 189, 77, 9, 49, 62, 33, 165, 149, 62, 69, 223, 195, 58, 86, 64, 245, 190, 16, 91, 226, 190, 74, 208, 140, 190, 93, 1, 67, 190, 245, 109, 194, 189, 126, 53, 154, 191, 27, 170, 189, 61, 220, 234, 41, 188, 60, 217, 87, 62, 100, 11, 180, 61, 176, 96, 237, 188, 115, 56, 81, 62, 12, 239, 120, 189, 255, 238, 126, 62, 194, 206, 168, 190, 181, 76, 176, 189, 226, 174, 34, 191, 31, 37, 190, 62, 241, 121, 226, 62, 8, 168, 153, 62, 98, 109, 201, 59, 95, 184, 91, 61, 4, 167, 140, 62, 117, 114, 42, 61, 28, 31, 237, 189, 116, 88, 31, 62, 94, 123, 254, 190, 2, 238, 132, 61, 230, 3, 10, 62, 206, 92, 42, 62, 70, 4, 83, 190, 133, 185, 2, 191, 27, 148, 4, 191, 115, 82, 165, 190, 60, 39, 0, 191, 208, 207, 122, 61, 229, 111, 142, 62, 208, 163, 77, 191, 212, 222, 6, 62, 97, 67, 81, 190, 50, 240, 251, 61, 106, 126, 49, 62, 164, 160, 27, 189, 154, 146, 59, 63, 238, 130, 137, 191, 53, 34, 234, 62, 82, 131, 90, 190, 13, 151, 6, 191, 163, 191, 60, 191, 240, 72, 16, 63, 45, 101, 231, 62, 249, 82, 249, 188, 81, 144, 171, 187, 108, 31, 5, 189, 46, 29, 250, 62, 186, 114, 19, 62, 253, 51, 107, 62, 70, 220, 4, 62, 137, 33, 116, 191, 189, 136, 30, 61, 79, 178, 185, 60, 71, 52, 0, 191, 157, 240, 156, 190, 14, 4, 33, 191, 30, 27, 141, 61, 16, 90, 144, 190, 23, 81, 252, 190, 154, 46, 43, 190, 186, 107, 157, 190, 211, 97, 252, 61, 174, 17, 224, 190, 26, 255, 206, 62, 235, 73, 183, 191, 192, 119, 29, 62, 17, 191, 76, 191, 135, 105, 130, 189, 34, 13, 255, 59, 204, 49, 28, 191, 113, 203, 138, 189, 122, 114, 33, 62, 229, 62, 20, 61, 31, 110, 69, 190, 4, 76, 220, 61, 54, 103, 115, 188, 238, 189, 121, 190, 201, 72, 41, 190, 65, 225, 118, 62, 138, 42, 35, 190, 30, 43, 82, 191, 1, 139, 212, 59, 212, 103, 14, 189, 58, 18, 87, 191, 229, 188, 170, 61, 127, 191, 65, 62, 229, 42, 6, 62, 210, 128, 213, 190, 85, 147, 57, 190, 224, 181, 146, 190, 169, 80, 175, 61, 60, 138, 104, 190, 206, 73, 230, 189, 177, 80, 21, 191, 196, 10, 157, 61, 38, 217, 163, 189, 78, 121, 115, 61, 225, 188, 177, 188, 134, 152, 176, 61, 31, 111, 62, 190, 121, 138, 148, 190, 99, 153, 214, 62, 249, 96, 138, 190, 36, 26, 30, 190, 118, 4, 204, 190, 231, 140, 26, 191, 212, 115, 26, 189, 78, 136, 139, 62, 182, 13, 154, 62, 116, 125, 145, 188, 189, 58, 171, 62, 29, 245, 229, 190, 52, 246, 152, 190, 138, 207, 91, 62, 214, 17, 35, 191, 224, 229, 165, 61, 184, 93, 186, 189, 80, 138, 32, 62, 53, 230, 134, 62, 89, 79, 5, 60, 208, 156, 98, 190, 216, 123, 1, 190, 43, 47, 235, 61, 31, 152, 154, 189, 132, 124, 176, 62, 45, 59, 13, 190, 38, 115, 6, 60, 4, 76, 158, 190, 101, 81, 51, 62, 145, 203, 19, 62, 248, 176, 63, 190, 231, 22, 119, 61, 232, 24, 220, 189, 91, 29, 81, 62, 52, 165, 107, 190, 230, 47, 129, 191, 34, 171, 182, 190, 83, 121, 65, 61, 7, 255, 6, 189, 242, 17, 155, 62, 177, 173, 20, 62, 128, 210, 136, 62, 52, 7, 193, 60, 38, 64, 224, 59, 27, 77, 1, 62, 81, 252, 30, 62, 252, 146, 241, 190, 135, 64, 167, 61, 3, 98, 235, 189, 81, 164, 8, 191, 68, 190, 188, 189, 155, 10, 29, 62, 39, 34, 237, 62, 251, 179, 125, 190, 59, 194, 236, 190, 11, 34, 14, 61, 1, 185, 2, 191, 93, 179, 239, 61, 113, 127, 254, 187, 146, 254, 171, 62, 178, 104, 41, 60, 207, 21, 239, 60, 83, 138, 117, 62, 219, 241, 114, 190, 17, 161, 141, 62, 117, 206, 135, 61, 11, 76, 164, 61, 80, 106, 158, 189, 231, 166, 106, 61, 99, 184, 4, 190, 201, 115, 101, 190, 225, 25, 22, 191, 63, 30, 201, 190, 35, 119, 118, 190, 226, 248, 25, 61, 116, 69, 135, 190, 206, 199, 117, 190, 227, 195, 132, 190, 147, 158, 246, 61, 7, 6, 34, 191, 230, 156, 104, 189, 114, 173, 172, 62, 185, 224, 50, 62, 42, 199, 16, 190, 179, 30, 50, 190, 4, 169, 136, 191, 229, 2, 23, 63, 35, 196, 130, 191, 252, 133, 181, 62, 52, 183, 252, 190, 94, 241, 12, 62, 198, 175, 82, 188, 240, 141, 182, 190, 105, 228, 66, 191, 201, 48, 235, 62, 13, 143, 10, 62, 54, 165, 141, 190, 169, 48, 245, 61, 116, 1, 134, 190, 191, 133, 36, 61, 201, 152, 46, 191, 185, 80, 240, 62, 34, 49, 132, 62, 197, 247, 45, 61, 53, 101, 59, 62, 236, 93, 10, 190, 232, 95, 231, 62, 134, 247, 81, 190, 126, 225, 19, 63, 233, 106, 229, 190, 146, 151, 97, 190, 187, 151, 72, 61, 251, 254, 16, 60, 123, 251, 88, 62, 2, 193, 91, 190, 104, 214, 170, 190, 65, 27, 184, 60, 45, 151, 246, 61, 202, 240, 190, 62, 200, 24, 214, 189, 120, 181, 17, 60, 234, 100, 192, 60, 157, 60, 168, 62, 54, 131, 252, 189, 245, 242, 189, 60, 55, 155, 173, 61, 233, 68, 186, 189, 114, 63, 107, 61, 136, 66, 162, 190, 72, 48, 15, 62, 90, 203, 22, 190, 248, 207, 73, 190, 147, 33, 235, 60, 253, 146, 241, 62, 225, 113, 111, 60, 33, 252, 50, 62, 105, 35, 234, 61, 191, 254, 111, 189, 147, 38, 231, 60, 201, 110, 177, 60, 115, 54, 139, 61, 9, 232, 59, 62, 163, 111, 49, 62, 225, 218, 61, 62, 175, 221, 21, 190, 88, 17, 156, 190, 150, 25, 191, 190, 227, 103, 45, 190, 47, 200, 200, 62, 177, 183, 143, 62, 213, 19, 129, 191, 176, 172, 134, 62, 106, 197, 56, 191, 126, 18, 129, 188, 79, 171, 141, 189, 122, 41, 158, 61, 214, 139, 70, 60, 18, 29, 132, 62, 102, 217, 166, 60, 210, 66, 255, 60, 153, 19, 49, 62, 177, 238, 151, 62, 6, 210, 135, 62, 220, 142, 246, 61, 247, 110, 244, 61, 117, 153, 74, 190, 28, 147, 70, 190, 12, 13, 187, 190, 9, 44, 224, 190, 199, 145, 150, 190, 255, 119, 199, 61, 255, 109, 61, 62, 209, 116, 243, 189, 142, 93, 101, 190, 224, 61, 249, 189, 29, 194, 147, 191, 157, 52, 188, 189, 219, 165, 188, 62, 255, 98, 147, 63, 109, 223, 16, 63, 234, 95, 142, 190, 203, 4, 145, 62, 212, 84, 164, 61, 109, 78, 229, 189, 1, 104, 80, 191, 22, 98, 180, 187, 83, 16, 55, 187, 122, 173, 212, 59, 20, 207, 90, 188, 42, 92, 30, 190, 204, 95, 153, 189, 41, 69, 62, 190, 124, 216, 197, 62, 115, 75, 26, 191, 8, 14, 227, 61, 151, 165, 146, 61, 195, 121, 77, 61, 194, 116, 31, 191, 206, 74, 39, 61, 134, 220, 38, 62, 217, 151, 204, 190, 106, 240, 26, 62, 175, 173, 118, 190, 164, 48, 133, 190, 153, 58, 135, 60, 216, 253, 212, 190, 180, 242, 134, 62, 21, 224, 193, 62, 207, 187, 144, 189, 194, 28, 157, 62, 43, 197, 27, 190, 110, 242, 164, 62, 191, 166, 255, 190, 152, 12, 9, 191, 138, 108, 168, 189, 7, 26, 103, 190, 123, 198, 126, 62, 89, 26, 242, 190, 185, 210, 15, 189, 92, 111, 234, 189, 249, 10, 43, 62, 171, 27, 249, 188, 191, 75, 17, 191, 103, 139, 216, 61, 249, 124, 25, 62, 75, 59, 23, 190, 170, 49, 81, 190, 53, 97, 93, 191, 250, 0, 35, 191, 109, 132, 17, 62, 179, 224, 90, 62, 208, 201, 58, 61, 154, 135, 137, 189, 98, 226, 117, 62, 96, 28, 78, 190, 209, 195, 6, 62, 44, 227, 249, 60, 208, 42, 43, 61, 131, 91, 63, 191, 225, 109, 34, 189, 196, 147, 197, 189, 197, 83, 95, 60, 111, 67, 103, 61, 161, 234, 185, 189, 118, 62, 8, 61, 78, 104, 243, 61, 105, 78, 9, 190, 240, 205, 17, 188, 24, 79, 254, 61, 111, 26, 211, 189, 11, 58, 255, 189, 96, 97, 17, 190, 65, 138, 231, 188, 208, 87, 234, 189, 208, 39, 27, 62, 172, 24, 228, 61, 104, 81, 254, 189, 17, 18, 140, 189, 120, 213, 188, 188, 200, 70, 255, 61, 109, 185, 194, 61, 94, 25, 45, 189, 179, 47, 109, 189, 87, 246, 2, 190, 49, 97, 15, 189, 19, 175, 253, 61, 54, 12, 185, 189, 197, 191, 1, 62, 76, 53, 242, 61, 180, 142, 179, 61, 235, 211, 165, 189, 217, 57, 170, 188, 12, 7, 25, 62, 140, 211, 58, 62, 194, 0, 221, 190, 44, 238, 7, 191, 50, 44, 190, 61, 242, 54, 56, 191, 235, 172, 147, 62, 249, 231, 91, 61, 52, 204, 36, 62, 102, 133, 209, 61, 246, 29, 105, 190, 67, 156, 110, 61, 177, 9, 207, 191, 53, 31, 252, 61, 141, 111, 212, 191, 21, 139, 182, 61, 241, 195, 32, 190, 15, 111, 93, 191, 229, 207, 93, 62, 41, 37, 110, 62, 55, 210, 96, 62, 90, 48, 129, 62, 17, 4, 130, 62, 184, 162, 124, 190, 224, 209, 227, 189, 221, 62, 15, 62, 130, 112, 163, 61, 251, 226, 247, 61, 73, 151, 181, 62, 212, 103, 114, 189, 178, 36, 189, 62, 36, 25, 138, 191, 42, 94, 14, 189, 22, 121, 127, 62, 181, 85, 58, 189, 39, 61, 160, 61, 235, 88, 148, 190, 162, 82, 164, 190, 33, 215, 13, 63, 171, 81, 78, 190, 155, 177, 206, 62, 191, 191, 39, 191, 195, 13, 58, 62, 230, 240, 212, 190, 20, 132, 239, 61, 87, 110, 252, 189, 210, 163, 156, 190, 172, 18, 83, 61, 184, 254, 139, 189, 149, 228, 132, 58, 31, 229, 112, 190, 43, 108, 60, 191, 161, 145, 8, 191, 121, 21, 141, 60, 232, 146, 106, 62, 82, 230, 1, 62, 30, 38, 166, 189, 71, 119, 143, 190, 242, 81, 146, 61, 136, 39, 182, 61, 92, 254, 159, 62, 33, 151, 159, 62, 207, 4, 136, 191, 12, 173, 217, 188, 158, 26, 170, 61, 231, 79, 93, 62, 1, 42, 101, 61, 140, 3, 74, 190, 3, 132, 39, 61, 76, 81, 152, 62, 182, 151, 140, 62, 209, 176, 100, 189, 251, 139, 227, 189, 122, 206, 100, 62, 63, 219, 239, 189, 46, 20, 0, 189, 164, 79, 46, 62, 26, 132, 238, 61, 149, 25, 83, 191, 175, 65, 230, 61, 132, 175, 93, 188, 167, 101, 57, 191, 67, 24, 165, 189, 103, 17, 136, 62, 212, 139, 166, 61, 84, 169, 251, 61, 192, 133, 11, 61, 72, 92, 72, 190, 252, 243, 115, 62, 221, 104, 5, 189, 16, 243, 39, 189, 210, 55, 216, 61, 160, 53, 60, 60, 186, 152, 174, 189, 48, 159, 185, 62, 142, 203, 114, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 51, 214, 61, 117, 133, 158, 189, 241, 218, 84, 62, 59, 14, 156, 189, 64, 152, 147, 62, 171, 15, 226, 60, 34, 70, 152, 190, 36, 98, 85, 62, 225, 55, 122, 188, 215, 2, 154, 62, 157, 162, 76, 190, 150, 80, 163, 62, 64, 220, 114, 61, 22, 101, 12, 190, 165, 15, 134, 189, 55, 197, 125, 62, 188, 25, 34, 62, 177, 57, 218, 62, 53, 39, 47, 62, 247, 225, 56, 190, 181, 141, 238, 60, 106, 142, 64, 62, 237, 187, 2, 190, 84, 145, 134, 62, 187, 7, 247, 189, 209, 124, 178, 60, 99, 205, 13, 190, 237, 123, 193, 61, 50, 249, 62, 190, 102, 173, 144, 187, 129, 162, 147, 62, 83, 136, 217, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {31, 116, 77, 190, 209, 38, 181, 62, 191, 108, 3, 63, 7, 213, 138, 63, 220, 172, 59, 188, 101, 140, 83, 60, 10, 118, 151, 61, 149, 12, 198, 61, 21, 164, 236, 62, 218, 167, 75, 62, 100, 44, 147, 189, 241, 229, 113, 62, 112, 148, 96, 190, 187, 255, 210, 61, 251, 228, 6, 190, 206, 95, 129, 63, 1, 176, 33, 63, 88, 111, 72, 191, 33, 171, 186, 191, 60, 183, 40, 63, 25, 236, 14, 191, 217, 28, 61, 190, 188, 111, 16, 189, 150, 212, 184, 63, 118, 128, 242, 189, 37, 23, 53, 63, 220, 213, 2, 63, 33, 176, 230, 190, 124, 175, 211, 61, 243, 250, 67, 63, 225, 215, 180, 190, 141, 222, 27, 190, 209, 222, 228, 190, 105, 218, 111, 61, 94, 163, 240, 188, 176, 181, 59, 62, 49, 57, 142, 190, 247, 170, 28, 61, 136, 66, 123, 60, 171, 47, 136, 61, 127, 48, 223, 62, 166, 47, 208, 190, 33, 210, 18, 62, 187, 84, 57, 190, 42, 212, 105, 189, 1, 15, 187, 189, 123, 24, 12, 62, 79, 218, 52, 62, 198, 92, 205, 61, 52, 163, 106, 190, 232, 79, 126, 62, 84, 144, 26, 62, 24, 105, 32, 63, 244, 238, 247, 188, 132, 242, 226, 62, 76, 247, 235, 61, 146, 226, 37, 62, 32, 112, 26, 63, 204, 66, 157, 60, 225, 77, 103, 190, 64, 242, 182, 189, 123, 22, 19, 62, 255, 160, 97, 189, 35, 181, 26, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 23, 38, 190, 174, 61, 85, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {7, 40, 129, 63, 139, 136, 66, 63, 43, 138, 138, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {188, 177, 254, 189, 152, 82, 166, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0083/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}