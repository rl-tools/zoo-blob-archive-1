// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 72, 254, 190, 1, 123, 193, 187, 98, 90, 60, 60, 9, 225, 156, 190, 33, 20, 5, 63, 247, 62, 63, 191, 146, 227, 172, 190, 133, 148, 130, 191, 104, 234, 133, 62, 143, 135, 15, 63, 56, 144, 222, 190, 58, 55, 37, 62, 149, 128, 58, 60, 180, 193, 160, 190, 157, 100, 207, 62, 133, 241, 8, 63, 112, 169, 73, 190, 217, 127, 18, 191, 228, 9, 83, 63, 48, 7, 47, 63, 145, 56, 217, 62, 88, 246, 131, 63, 76, 165, 26, 191, 80, 44, 2, 191, 178, 70, 54, 63, 163, 209, 143, 63, 216, 239, 154, 62, 230, 163, 13, 189, 41, 221, 131, 189, 32, 32, 22, 63, 200, 82, 206, 189, 38, 107, 222, 189, 129, 162, 56, 190, 156, 174, 234, 190, 153, 205, 21, 191, 176, 119, 21, 62, 98, 203, 198, 62, 135, 21, 15, 191, 241, 109, 57, 190, 122, 14, 179, 190, 82, 211, 172, 190, 145, 154, 68, 63, 83, 235, 192, 61, 237, 179, 158, 191, 193, 45, 156, 190, 79, 239, 202, 190, 53, 23, 240, 62, 209, 88, 23, 62, 78, 211, 180, 62, 123, 206, 89, 191, 176, 32, 56, 62, 32, 166, 254, 189, 218, 158, 144, 191, 28, 75, 52, 190, 158, 176, 236, 62, 5, 202, 234, 61, 72, 158, 42, 191, 211, 225, 11, 191, 6, 72, 157, 63, 245, 127, 139, 62, 40, 177, 247, 189, 41, 138, 40, 63, 208, 7, 9, 63, 95, 79, 229, 62, 158, 56, 158, 63, 168, 210, 199, 62, 34, 176, 239, 189, 220, 71, 6, 63, 246, 178, 175, 61, 112, 105, 9, 191, 222, 59, 149, 62, 26, 22, 50, 191, 58, 220, 167, 62, 87, 229, 127, 63, 148, 208, 206, 62, 202, 32, 119, 62, 1, 235, 186, 190, 57, 240, 1, 63, 70, 74, 41, 191, 251, 193, 57, 62, 46, 237, 211, 61, 21, 204, 25, 63, 245, 220, 117, 62, 244, 89, 200, 62, 110, 245, 58, 63, 92, 92, 200, 62, 124, 153, 43, 62, 130, 116, 24, 62, 239, 175, 29, 191, 186, 16, 34, 63, 73, 234, 53, 190, 151, 111, 154, 63, 14, 79, 25, 63, 171, 228, 16, 191, 23, 22, 243, 61, 26, 40, 72, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 83, 25, 191, 21, 25, 155, 62, 45, 41, 50, 190, 246, 104, 41, 63, 67, 129, 134, 190, 90, 180, 23, 191, 253, 194, 96, 191, 234, 208, 175, 62, 189, 6, 166, 190, 10, 35, 207, 190, 63, 171, 199, 62, 168, 180, 138, 62, 163, 46, 16, 63, 210, 20, 176, 62, 250, 62, 146, 62, 133, 203, 44, 63, 244, 191, 131, 62, 154, 111, 27, 62, 21, 182, 28, 190, 150, 101, 109, 190, 197, 172, 99, 190, 56, 195, 193, 62, 17, 163, 67, 63, 163, 74, 65, 190, 132, 7, 142, 189, 134, 178, 33, 191, 224, 5, 70, 63, 149, 80, 133, 62, 2, 199, 74, 190, 17, 165, 146, 188, 187, 93, 172, 190, 239, 54, 218, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 234, 157, 61, 217, 189, 81, 62, 76, 116, 122, 62, 13, 46, 147, 62, 143, 204, 46, 190, 104, 143, 138, 190, 171, 94, 176, 189, 1, 202, 17, 62, 221, 218, 183, 61, 29, 31, 95, 190, 135, 202, 86, 59, 99, 5, 165, 60, 187, 30, 219, 187, 210, 243, 201, 61, 255, 123, 50, 190, 113, 187, 165, 61, 236, 132, 108, 61, 224, 193, 5, 62, 147, 102, 59, 190, 229, 237, 8, 191, 38, 124, 175, 190, 154, 15, 26, 62, 23, 187, 200, 61, 250, 247, 123, 62, 232, 88, 162, 61, 71, 108, 41, 62, 87, 127, 36, 62, 45, 253, 62, 62, 137, 8, 129, 62, 144, 238, 100, 61, 157, 61, 171, 190, 79, 96, 19, 62, 211, 139, 146, 61, 159, 173, 249, 190, 213, 253, 133, 60, 185, 9, 152, 62, 120, 107, 16, 62, 66, 172, 80, 191, 67, 225, 6, 191, 39, 249, 248, 61, 179, 89, 73, 191, 220, 240, 41, 189, 40, 101, 164, 61, 73, 207, 160, 189, 253, 121, 150, 62, 77, 225, 126, 60, 200, 223, 34, 189, 142, 8, 103, 189, 226, 104, 74, 62, 69, 80, 64, 190, 106, 139, 232, 189, 42, 217, 92, 59, 30, 193, 57, 61, 130, 250, 163, 189, 38, 66, 35, 62, 245, 143, 5, 191, 26, 160, 172, 190, 70, 105, 141, 59, 124, 33, 220, 190, 87, 210, 229, 61, 122, 245, 96, 62, 113, 79, 208, 61, 230, 22, 123, 190, 48, 156, 175, 61, 176, 71, 245, 61, 99, 71, 10, 62, 86, 18, 25, 62, 138, 209, 133, 62, 228, 246, 209, 189, 160, 174, 81, 190, 109, 8, 195, 190, 60, 196, 26, 62, 218, 92, 115, 191, 174, 62, 220, 188, 134, 228, 14, 61, 162, 3, 152, 62, 219, 253, 32, 61, 124, 160, 26, 188, 44, 202, 193, 62, 108, 202, 242, 189, 128, 219, 2, 62, 246, 216, 240, 62, 47, 10, 100, 190, 25, 63, 197, 186, 145, 50, 113, 190, 1, 215, 81, 190, 173, 180, 23, 190, 220, 73, 124, 190, 5, 20, 140, 190, 226, 77, 107, 61, 33, 205, 159, 60, 44, 118, 59, 62, 101, 162, 236, 60, 251, 122, 24, 62, 231, 105, 143, 190, 164, 57, 191, 190, 107, 227, 148, 61, 78, 246, 44, 62, 16, 169, 213, 190, 1, 121, 236, 190, 105, 16, 55, 189, 30, 35, 246, 61, 46, 37, 15, 61, 57, 6, 75, 60, 66, 163, 223, 190, 152, 123, 124, 190, 72, 51, 100, 61, 238, 170, 122, 189, 194, 105, 29, 191, 99, 41, 39, 62, 202, 90, 225, 190, 16, 136, 4, 62, 236, 38, 47, 188, 210, 21, 164, 190, 206, 112, 21, 62, 210, 79, 144, 62, 63, 141, 234, 61, 62, 99, 44, 62, 76, 121, 16, 190, 224, 45, 171, 190, 210, 22, 150, 190, 209, 209, 81, 190, 166, 114, 43, 62, 136, 227, 41, 191, 177, 172, 98, 190, 5, 15, 177, 190, 156, 202, 41, 188, 240, 155, 190, 190, 126, 166, 205, 60, 163, 2, 149, 61, 157, 224, 241, 189, 102, 5, 184, 61, 112, 83, 111, 62, 135, 240, 52, 60, 68, 5, 13, 189, 139, 57, 63, 62, 0, 178, 118, 190, 58, 73, 121, 62, 97, 46, 151, 60, 134, 229, 77, 62, 144, 175, 200, 61, 65, 5, 228, 189, 53, 89, 167, 61, 114, 21, 27, 189, 210, 236, 138, 62, 135, 14, 26, 190, 57, 31, 179, 60, 252, 184, 120, 188, 141, 162, 74, 62, 205, 191, 158, 189, 184, 92, 59, 62, 193, 131, 184, 189, 21, 170, 115, 61, 238, 165, 24, 189, 177, 125, 3, 60, 192, 83, 158, 61, 155, 106, 12, 62, 153, 57, 119, 188, 157, 147, 64, 189, 146, 60, 171, 61, 238, 39, 49, 61, 125, 92, 218, 187, 108, 79, 201, 188, 174, 4, 133, 189, 225, 250, 76, 188, 204, 0, 173, 61, 27, 198, 180, 187, 21, 253, 205, 189, 16, 101, 188, 189, 113, 89, 211, 189, 186, 146, 157, 61, 79, 198, 190, 189, 88, 157, 35, 190, 41, 209, 200, 61, 187, 254, 196, 61, 57, 205, 254, 61, 68, 196, 32, 190, 160, 168, 227, 189, 44, 197, 21, 187, 212, 191, 29, 189, 131, 1, 139, 61, 223, 191, 34, 190, 168, 169, 51, 190, 52, 109, 45, 60, 121, 142, 193, 61, 97, 136, 174, 189, 243, 11, 146, 189, 209, 139, 198, 61, 134, 155, 25, 190, 16, 57, 129, 60, 216, 74, 63, 189, 220, 243, 71, 189, 64, 33, 31, 189, 146, 12, 189, 60, 7, 196, 250, 189, 199, 83, 82, 190, 17, 72, 31, 190, 19, 79, 248, 189, 117, 195, 150, 187, 100, 88, 228, 61, 14, 212, 52, 189, 121, 165, 243, 188, 198, 162, 215, 59, 228, 184, 134, 190, 139, 150, 250, 189, 153, 140, 48, 189, 174, 13, 131, 61, 107, 192, 168, 190, 234, 114, 46, 190, 163, 235, 9, 190, 250, 135, 15, 189, 74, 243, 68, 61, 28, 86, 26, 62, 77, 100, 174, 190, 1, 99, 63, 190, 14, 121, 133, 59, 52, 100, 197, 58, 139, 184, 149, 61, 193, 73, 68, 61, 41, 0, 230, 61, 228, 233, 241, 60, 170, 184, 186, 189, 116, 175, 233, 61, 142, 56, 118, 61, 223, 207, 22, 61, 86, 103, 99, 190, 167, 161, 242, 190, 58, 155, 24, 190, 231, 74, 73, 62, 188, 86, 4, 190, 153, 85, 158, 190, 14, 135, 90, 62, 96, 252, 185, 190, 192, 83, 73, 62, 115, 61, 13, 190, 122, 144, 255, 60, 129, 219, 173, 61, 196, 228, 8, 62, 89, 250, 62, 189, 106, 250, 142, 189, 38, 155, 175, 59, 36, 34, 51, 189, 35, 162, 141, 62, 158, 1, 204, 188, 153, 99, 41, 189, 42, 60, 2, 189, 241, 221, 138, 188, 204, 173, 120, 190, 65, 101, 110, 190, 23, 77, 156, 189, 116, 96, 172, 60, 232, 64, 65, 61, 172, 13, 43, 189, 202, 11, 88, 61, 87, 15, 244, 61, 126, 105, 88, 190, 123, 105, 3, 60, 218, 190, 34, 190, 168, 78, 41, 62, 221, 45, 165, 62, 0, 249, 85, 62, 139, 221, 131, 62, 77, 230, 114, 190, 208, 84, 56, 62, 102, 159, 100, 191, 73, 158, 80, 61, 203, 114, 77, 188, 139, 107, 216, 189, 183, 99, 73, 62, 35, 42, 133, 61, 243, 237, 86, 189, 166, 219, 155, 190, 190, 245, 6, 62, 145, 241, 99, 188, 126, 248, 78, 62, 198, 56, 26, 62, 175, 214, 45, 190, 85, 201, 149, 190, 227, 223, 179, 189, 96, 222, 126, 61, 232, 123, 171, 190, 202, 75, 101, 62, 11, 219, 96, 190, 11, 35, 228, 189, 161, 233, 128, 190, 29, 116, 34, 60, 63, 85, 134, 189, 149, 247, 2, 190, 63, 25, 46, 190, 239, 153, 169, 189, 251, 58, 86, 62, 241, 164, 163, 62, 40, 86, 201, 188, 230, 114, 146, 60, 203, 36, 163, 190, 111, 143, 121, 62, 165, 68, 20, 191, 162, 247, 42, 190, 153, 40, 154, 62, 94, 239, 76, 62, 107, 98, 127, 62, 20, 188, 145, 190, 151, 56, 54, 61, 206, 50, 90, 190, 64, 161, 193, 61, 54, 103, 164, 190, 37, 144, 41, 62, 228, 192, 62, 62, 165, 200, 149, 189, 209, 7, 23, 62, 118, 155, 10, 62, 124, 173, 189, 61, 197, 177, 196, 190, 146, 3, 22, 62, 20, 144, 26, 61, 187, 159, 93, 61, 129, 183, 204, 62, 233, 234, 223, 61, 228, 83, 11, 190, 161, 248, 27, 62, 212, 244, 141, 61, 192, 150, 119, 60, 221, 64, 42, 62, 233, 224, 124, 60, 224, 93, 30, 61, 81, 189, 241, 188, 233, 58, 157, 62, 237, 236, 64, 190, 33, 12, 9, 63, 80, 17, 18, 189, 49, 82, 233, 61, 154, 139, 32, 189, 243, 154, 48, 62, 205, 204, 95, 61, 30, 245, 14, 62, 1, 12, 164, 60, 185, 66, 19, 190, 108, 34, 176, 62, 141, 168, 49, 61, 242, 26, 128, 190, 69, 137, 56, 190, 115, 75, 21, 189, 140, 40, 46, 61, 122, 121, 150, 61, 37, 224, 57, 62, 179, 1, 150, 61, 221, 27, 223, 61, 224, 20, 24, 56, 150, 241, 133, 189, 223, 67, 168, 188, 125, 63, 192, 189, 170, 198, 64, 62, 222, 15, 45, 189, 247, 240, 46, 190, 13, 154, 48, 190, 101, 193, 110, 189, 161, 2, 15, 61, 225, 82, 181, 189, 6, 38, 172, 190, 175, 232, 144, 62, 89, 111, 68, 190, 170, 124, 41, 189, 191, 118, 58, 62, 162, 41, 86, 62, 42, 174, 96, 62, 81, 177, 1, 62, 242, 206, 156, 61, 213, 109, 65, 189, 15, 148, 172, 189, 2, 164, 147, 61, 4, 16, 201, 58, 123, 59, 160, 61, 166, 36, 128, 61, 139, 51, 241, 189, 63, 63, 12, 62, 188, 173, 57, 190, 108, 171, 88, 189, 156, 7, 199, 187, 123, 231, 137, 61, 28, 143, 4, 188, 110, 230, 74, 190, 206, 231, 115, 189, 81, 160, 234, 61, 167, 54, 81, 190, 39, 155, 7, 190, 216, 50, 154, 62, 186, 238, 140, 62, 97, 203, 182, 61, 144, 20, 37, 190, 140, 45, 208, 190, 91, 18, 222, 61, 113, 16, 118, 190, 86, 186, 10, 63, 28, 159, 191, 190, 0, 32, 95, 62, 159, 36, 224, 61, 199, 148, 25, 189, 239, 124, 217, 189, 242, 110, 152, 190, 218, 45, 52, 61, 182, 50, 102, 61, 56, 99, 11, 190, 27, 8, 96, 189, 179, 152, 220, 190, 236, 172, 80, 190, 87, 224, 42, 62, 53, 147, 163, 61, 101, 95, 55, 62, 144, 121, 99, 62, 14, 145, 62, 61, 25, 78, 250, 61, 42, 41, 14, 62, 62, 96, 100, 62, 244, 90, 141, 62, 230, 231, 163, 190, 132, 181, 207, 188, 232, 26, 143, 61, 180, 149, 240, 189, 92, 39, 245, 61, 5, 134, 145, 189, 97, 201, 188, 60, 91, 206, 114, 189, 249, 160, 185, 61, 84, 155, 240, 189, 73, 167, 73, 189, 120, 9, 220, 189, 85, 214, 245, 189, 200, 154, 227, 187, 145, 251, 142, 188, 85, 86, 67, 61, 200, 160, 12, 190, 185, 210, 29, 190, 113, 247, 138, 61, 156, 52, 196, 60, 71, 110, 131, 60, 199, 106, 186, 61, 208, 243, 216, 189, 227, 81, 208, 189, 30, 68, 167, 189, 131, 238, 223, 61, 239, 76, 96, 61, 145, 240, 33, 61, 111, 37, 234, 61, 152, 118, 231, 189, 149, 56, 208, 61, 164, 140, 94, 189, 215, 171, 136, 189, 160, 196, 7, 62, 34, 167, 204, 189, 198, 184, 131, 188, 219, 37, 2, 62, 43, 223, 133, 189, 183, 70, 15, 190, 22, 86, 45, 190, 204, 56, 116, 61, 87, 148, 111, 189, 165, 216, 50, 190, 199, 57, 239, 61, 247, 204, 244, 188, 211, 2, 4, 62, 79, 27, 29, 189, 138, 203, 228, 189, 160, 77, 197, 60, 219, 33, 40, 190, 24, 251, 156, 59, 38, 88, 232, 189, 44, 50, 109, 188, 141, 77, 189, 61, 232, 79, 106, 189, 42, 149, 252, 59, 245, 162, 39, 62, 106, 247, 139, 61, 150, 31, 192, 61, 253, 180, 3, 62, 59, 43, 79, 60, 154, 170, 43, 61, 200, 157, 234, 188, 103, 236, 106, 189, 124, 185, 18, 190, 148, 80, 153, 189, 138, 230, 37, 62, 176, 70, 133, 190, 87, 125, 174, 190, 146, 252, 37, 62, 92, 198, 193, 61, 97, 174, 122, 190, 84, 31, 235, 190, 226, 252, 139, 59, 3, 120, 138, 191, 42, 15, 166, 62, 207, 255, 138, 189, 223, 144, 122, 189, 54, 123, 207, 59, 166, 195, 91, 62, 41, 17, 0, 190, 46, 107, 2, 190, 44, 89, 155, 62, 91, 98, 43, 61, 78, 226, 129, 189, 199, 238, 101, 62, 97, 35, 115, 189, 121, 181, 3, 190, 221, 255, 42, 190, 46, 82, 224, 190, 54, 142, 182, 190, 111, 105, 125, 189, 74, 214, 163, 61, 224, 116, 31, 190, 168, 135, 144, 190, 110, 104, 128, 61, 106, 107, 9, 189, 142, 22, 75, 191, 148, 214, 255, 61, 182, 231, 33, 190, 44, 213, 136, 191, 48, 62, 5, 190, 206, 177, 6, 62, 109, 112, 91, 62, 62, 33, 52, 62, 3, 150, 136, 62, 85, 168, 6, 191, 173, 137, 130, 61, 205, 126, 232, 189, 33, 208, 52, 62, 14, 78, 25, 62, 75, 238, 201, 61, 210, 44, 128, 61, 157, 227, 24, 62, 65, 114, 113, 189, 2, 59, 196, 190, 143, 155, 243, 188, 145, 136, 52, 62, 234, 238, 130, 61, 83, 65, 28, 62, 248, 206, 60, 59, 137, 106, 231, 189, 151, 110, 154, 190, 110, 138, 49, 190, 8, 8, 20, 189, 91, 48, 14, 190, 39, 80, 158, 61, 195, 142, 216, 190, 117, 177, 199, 62, 13, 118, 32, 190, 116, 126, 196, 189, 217, 214, 50, 62, 252, 60, 147, 62, 174, 11, 64, 60, 142, 48, 192, 190, 217, 79, 203, 190, 115, 190, 195, 189, 214, 253, 123, 190, 122, 96, 135, 61, 204, 178, 96, 191, 245, 214, 175, 61, 240, 227, 216, 188, 130, 36, 241, 61, 232, 108, 223, 189, 172, 28, 80, 189, 249, 137, 238, 61, 61, 3, 242, 189, 195, 146, 7, 189, 40, 214, 158, 190, 93, 4, 70, 189, 48, 141, 23, 191, 84, 44, 87, 62, 139, 203, 200, 62, 232, 114, 158, 62, 9, 104, 230, 61, 101, 181, 156, 189, 233, 151, 60, 62, 178, 72, 10, 61, 45, 227, 197, 187, 134, 251, 27, 61, 203, 99, 163, 190, 108, 196, 118, 61, 230, 3, 10, 62, 53, 92, 41, 62, 162, 202, 213, 189, 193, 254, 149, 190, 175, 121, 207, 190, 155, 221, 133, 190, 142, 56, 136, 190, 174, 248, 211, 60, 238, 197, 200, 62, 87, 166, 86, 191, 105, 75, 226, 61, 179, 89, 17, 190, 252, 115, 86, 61, 1, 135, 248, 60, 60, 67, 81, 61, 25, 179, 243, 62, 231, 237, 119, 191, 157, 81, 123, 62, 136, 171, 75, 190, 121, 200, 250, 190, 239, 154, 70, 191, 108, 88, 167, 61, 2, 21, 152, 62, 197, 61, 155, 188, 27, 165, 13, 190, 129, 183, 145, 190, 19, 165, 153, 62, 131, 129, 232, 60, 47, 128, 174, 62, 40, 13, 89, 62, 127, 43, 63, 191, 52, 97, 178, 60, 79, 178, 185, 60, 215, 81, 198, 190, 62, 165, 162, 190, 53, 166, 15, 191, 178, 58, 195, 61, 16, 90, 144, 190, 208, 169, 124, 190, 154, 46, 43, 190, 10, 138, 74, 190, 145, 155, 25, 62, 28, 105, 67, 190, 183, 41, 212, 62, 134, 145, 90, 191, 225, 217, 53, 62, 124, 8, 28, 191, 183, 195, 250, 188, 66, 150, 230, 61, 148, 57, 200, 190, 113, 203, 138, 189, 170, 220, 77, 62, 50, 200, 160, 61, 180, 161, 97, 189, 255, 130, 57, 62, 189, 220, 117, 190, 132, 129, 25, 190, 116, 37, 201, 189, 69, 170, 131, 62, 224, 147, 231, 189, 68, 98, 232, 190, 142, 106, 219, 60, 105, 177, 65, 60, 139, 139, 87, 191, 229, 188, 170, 61, 164, 214, 58, 62, 168, 86, 47, 62, 54, 59, 149, 190, 125, 141, 112, 189, 120, 38, 139, 190, 169, 80, 175, 61, 116, 233, 59, 190, 52, 154, 17, 190, 125, 22, 124, 190, 34, 164, 56, 61, 168, 226, 138, 60, 16, 211, 128, 59, 224, 56, 154, 61, 222, 237, 211, 189, 8, 51, 160, 189, 76, 191, 40, 190, 120, 163, 53, 62, 159, 193, 130, 190, 215, 129, 207, 190, 241, 3, 88, 189, 191, 68, 232, 190, 199, 118, 202, 61, 9, 128, 108, 62, 241, 184, 121, 62, 178, 57, 5, 60, 46, 163, 144, 62, 89, 217, 137, 189, 141, 188, 151, 190, 223, 173, 146, 62, 249, 194, 244, 190, 69, 3, 168, 60, 184, 93, 186, 189, 53, 199, 32, 62, 156, 174, 139, 62, 53, 153, 38, 61, 71, 160, 71, 190, 242, 58, 216, 189, 33, 61, 215, 188, 202, 153, 31, 190, 171, 179, 211, 62, 206, 98, 199, 189, 88, 200, 211, 60, 163, 52, 133, 190, 161, 153, 252, 61, 19, 130, 57, 62, 186, 3, 28, 190, 247, 84, 3, 62, 12, 203, 2, 190, 215, 3, 56, 61, 209, 68, 120, 190, 175, 201, 3, 191, 70, 103, 160, 190, 37, 236, 226, 189, 155, 80, 94, 186, 18, 138, 164, 62, 142, 52, 109, 62, 97, 242, 150, 62, 167, 62, 246, 61, 49, 33, 87, 61, 105, 232, 51, 62, 123, 66, 69, 62, 24, 33, 211, 190, 136, 231, 197, 61, 3, 98, 235, 189, 91, 42, 11, 189, 37, 9, 25, 190, 141, 219, 28, 62, 233, 191, 195, 62, 230, 121, 218, 187, 183, 101, 89, 190, 222, 101, 46, 61, 108, 236, 96, 190, 144, 164, 97, 61, 24, 200, 166, 61, 226, 50, 152, 62, 179, 20, 158, 60, 121, 167, 112, 61, 44, 120, 156, 62, 20, 159, 7, 190, 140, 167, 142, 62, 251, 174, 173, 62, 18, 228, 2, 61, 20, 245, 165, 61, 186, 179, 131, 61, 94, 201, 160, 59, 171, 53, 37, 190, 201, 196, 174, 190, 146, 246, 97, 189, 223, 241, 92, 190, 207, 46, 11, 62, 92, 19, 142, 190, 51, 51, 121, 190, 164, 209, 137, 190, 240, 155, 106, 62, 43, 192, 175, 190, 230, 156, 104, 189, 29, 146, 124, 62, 67, 208, 22, 61, 147, 60, 217, 188, 141, 4, 238, 189, 31, 100, 50, 191, 137, 57, 186, 62, 223, 112, 41, 191, 179, 150, 22, 190, 201, 31, 145, 190, 102, 170, 61, 62, 192, 172, 38, 189, 38, 216, 145, 189, 155, 26, 19, 191, 44, 75, 158, 62, 1, 251, 45, 62, 27, 197, 225, 61, 75, 160, 139, 189, 247, 221, 158, 190, 253, 54, 101, 61, 124, 10, 31, 191, 100, 79, 140, 62, 182, 57, 128, 62, 161, 21, 235, 61, 16, 45, 248, 188, 169, 216, 246, 189, 81, 28, 4, 63, 181, 206, 230, 189, 169, 201, 191, 62, 21, 9, 213, 190, 155, 15, 201, 190, 50, 161, 221, 61, 251, 254, 16, 60, 228, 155, 102, 62, 193, 13, 60, 190, 14, 18, 11, 190, 63, 83, 11, 60, 148, 113, 31, 62, 126, 255, 139, 62, 209, 28, 69, 190, 168, 42, 152, 62, 89, 48, 211, 59, 225, 163, 137, 62, 25, 149, 255, 189, 83, 193, 153, 188, 142, 79, 189, 61, 188, 198, 64, 189, 245, 59, 5, 189, 102, 31, 79, 190, 71, 101, 201, 187, 167, 94, 24, 190, 111, 249, 34, 190, 119, 136, 98, 188, 106, 85, 154, 62, 67, 88, 255, 60, 8, 41, 70, 62, 51, 193, 76, 62, 145, 18, 152, 188, 84, 35, 164, 189, 173, 76, 142, 61, 132, 208, 91, 62, 111, 175, 101, 62, 155, 151, 18, 62, 55, 51, 52, 62, 175, 221, 21, 190, 192, 237, 252, 190, 97, 96, 215, 190, 225, 196, 196, 189, 51, 140, 205, 62, 45, 14, 57, 189, 207, 96, 50, 191, 30, 109, 152, 62, 9, 2, 12, 191, 72, 139, 97, 60, 212, 121, 0, 190, 47, 6, 90, 61, 139, 205, 232, 60, 177, 216, 151, 62, 93, 97, 66, 189, 73, 220, 48, 61, 62, 147, 138, 62, 113, 2, 25, 62, 82, 209, 43, 62, 50, 196, 25, 62, 110, 198, 76, 62, 220, 182, 143, 189, 243, 152, 33, 190, 191, 139, 236, 190, 90, 12, 123, 190, 252, 18, 130, 190, 112, 13, 117, 61, 133, 119, 86, 62, 174, 19, 198, 189, 205, 198, 82, 190, 40, 235, 35, 61, 223, 60, 160, 191, 157, 52, 188, 189, 123, 229, 186, 62, 92, 254, 136, 63, 146, 249, 170, 62, 199, 87, 147, 190, 245, 75, 135, 62, 148, 43, 241, 61, 142, 184, 64, 189, 28, 105, 83, 191, 190, 115, 64, 189, 213, 167, 99, 188, 86, 94, 198, 188, 214, 138, 62, 61, 112, 76, 111, 190, 4, 73, 38, 190, 148, 223, 49, 61, 42, 176, 129, 62, 62, 59, 237, 190, 212, 48, 3, 62, 108, 58, 247, 61, 8, 116, 142, 188, 27, 44, 151, 188, 35, 96, 14, 62, 217, 237, 18, 62, 190, 38, 32, 190, 84, 144, 111, 61, 71, 210, 32, 190, 241, 67, 86, 190, 205, 0, 97, 188, 99, 139, 7, 191, 242, 4, 64, 62, 26, 13, 188, 62, 207, 187, 144, 189, 27, 87, 199, 62, 106, 133, 252, 61, 48, 56, 147, 62, 205, 128, 166, 190, 107, 173, 238, 190, 117, 99, 152, 188, 107, 172, 157, 190, 94, 1, 202, 62, 124, 202, 147, 190, 255, 86, 114, 61, 149, 80, 211, 61, 14, 127, 189, 61, 111, 48, 211, 189, 45, 245, 195, 190, 97, 21, 87, 62, 102, 248, 112, 61, 49, 38, 225, 190, 145, 133, 61, 190, 222, 79, 158, 190, 25, 169, 163, 190, 87, 210, 58, 61, 158, 213, 92, 62, 224, 14, 4, 62, 51, 172, 34, 62, 0, 14, 65, 62, 116, 74, 25, 61, 107, 130, 232, 61, 104, 252, 151, 61, 102, 157, 84, 188, 23, 72, 115, 190, 214, 140, 130, 61, 196, 147, 197, 189, 197, 83, 95, 60, 111, 67, 103, 61, 161, 234, 185, 189, 118, 62, 8, 61, 78, 104, 243, 61, 105, 78, 9, 190, 240, 205, 17, 188, 24, 79, 254, 61, 111, 26, 211, 189, 11, 58, 255, 189, 96, 97, 17, 190, 65, 138, 231, 188, 208, 87, 234, 189, 208, 39, 27, 62, 172, 24, 228, 61, 104, 81, 254, 189, 17, 18, 140, 189, 120, 213, 188, 188, 200, 70, 255, 61, 109, 185, 194, 61, 94, 25, 45, 189, 179, 47, 109, 189, 87, 246, 2, 190, 49, 97, 15, 189, 19, 175, 253, 61, 54, 12, 185, 189, 197, 191, 1, 62, 76, 53, 242, 61, 180, 142, 179, 61, 235, 211, 165, 189, 217, 57, 170, 188, 12, 7, 25, 62, 36, 6, 155, 61, 93, 85, 12, 191, 35, 177, 77, 191, 210, 125, 60, 60, 166, 115, 130, 190, 55, 120, 174, 60, 61, 92, 7, 190, 30, 197, 210, 190, 1, 47, 74, 60, 220, 153, 77, 188, 251, 91, 8, 62, 130, 156, 95, 191, 138, 82, 1, 62, 158, 211, 88, 191, 211, 151, 250, 61, 20, 90, 76, 190, 211, 231, 207, 190, 191, 62, 67, 190, 4, 221, 93, 62, 15, 246, 39, 62, 188, 55, 38, 189, 50, 233, 98, 62, 43, 29, 128, 190, 20, 215, 177, 190, 112, 13, 170, 188, 25, 208, 101, 62, 164, 5, 161, 189, 99, 127, 37, 190, 186, 98, 46, 190, 222, 188, 116, 62, 31, 40, 88, 191, 42, 94, 14, 189, 51, 151, 134, 62, 252, 192, 38, 62, 158, 245, 134, 61, 12, 213, 207, 189, 237, 193, 131, 190, 81, 54, 70, 62, 41, 234, 108, 190, 174, 157, 208, 62, 110, 56, 236, 190, 12, 81, 114, 62, 74, 252, 22, 190, 114, 64, 166, 61, 162, 176, 252, 189, 169, 45, 68, 190, 62, 235, 137, 61, 190, 165, 243, 189, 107, 200, 149, 189, 31, 128, 100, 190, 26, 165, 166, 190, 52, 120, 169, 190, 8, 127, 15, 190, 84, 208, 82, 62, 25, 198, 245, 61, 213, 247, 80, 189, 88, 30, 87, 190, 146, 30, 67, 62, 76, 200, 149, 61, 197, 23, 154, 62, 151, 99, 169, 62, 72, 166, 55, 191, 127, 12, 32, 188, 158, 26, 170, 61, 49, 96, 40, 61, 201, 153, 113, 61, 15, 95, 184, 189, 123, 227, 50, 61, 163, 91, 63, 62, 154, 18, 122, 62, 117, 59, 177, 189, 70, 223, 10, 61, 33, 58, 98, 62, 106, 193, 16, 190, 67, 30, 149, 189, 108, 43, 125, 62, 107, 69, 162, 61, 77, 143, 109, 190, 218, 145, 28, 189, 11, 52, 201, 61, 236, 231, 169, 190, 159, 57, 161, 189, 231, 253, 138, 62, 33, 228, 205, 187, 242, 62, 14, 60, 155, 210, 105, 189, 106, 110, 178, 190, 41, 61, 85, 62, 187, 95, 84, 61, 108, 152, 55, 190, 212, 78, 248, 61, 181, 205, 154, 61, 145, 104, 55, 189, 59, 16, 129, 62, 131, 216, 138, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 211, 95, 61, 41, 150, 199, 189, 1, 70, 232, 61, 152, 167, 83, 189, 151, 117, 111, 62, 171, 15, 226, 60, 34, 70, 152, 190, 79, 237, 58, 62, 83, 69, 222, 188, 191, 111, 169, 62, 196, 165, 22, 190, 21, 211, 135, 62, 117, 143, 76, 61, 22, 101, 12, 190, 165, 15, 134, 189, 110, 95, 53, 62, 86, 228, 244, 61, 16, 67, 174, 62, 28, 19, 150, 60, 195, 200, 206, 189, 251, 65, 192, 60, 46, 236, 30, 62, 119, 50, 163, 189, 202, 191, 154, 62, 6, 134, 11, 190, 144, 176, 100, 61, 108, 103, 136, 188, 165, 135, 101, 61, 50, 249, 62, 190, 177, 46, 128, 188, 121, 79, 123, 62, 240, 39, 174, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 182, 128, 190, 233, 249, 3, 63, 232, 182, 247, 62, 154, 228, 86, 63, 65, 128, 71, 61, 101, 140, 83, 60, 10, 118, 151, 61, 21, 15, 77, 62, 158, 110, 183, 62, 228, 252, 130, 62, 197, 127, 19, 190, 97, 255, 96, 62, 120, 29, 211, 190, 187, 255, 210, 61, 251, 228, 6, 190, 246, 85, 57, 63, 141, 243, 23, 63, 58, 25, 61, 191, 49, 199, 119, 191, 196, 161, 13, 63, 226, 63, 238, 190, 130, 236, 186, 190, 13, 123, 46, 62, 193, 156, 146, 63, 88, 209, 55, 190, 187, 118, 92, 63, 99, 183, 224, 62, 19, 191, 234, 190, 124, 175, 211, 61, 213, 195, 48, 63, 251, 247, 215, 190, 234, 59, 14, 190, 198, 70, 155, 190, 108, 4, 215, 190, 127, 117, 254, 61, 206, 104, 26, 62, 38, 226, 32, 190, 247, 170, 28, 61, 136, 66, 123, 60, 192, 61, 255, 188, 144, 167, 209, 62, 130, 221, 140, 190, 171, 248, 9, 62, 97, 243, 158, 189, 221, 194, 196, 61, 1, 15, 187, 189, 123, 24, 12, 62, 90, 139, 128, 61, 8, 85, 222, 60, 73, 189, 65, 190, 232, 101, 46, 62, 190, 193, 121, 61, 114, 199, 61, 62, 225, 76, 18, 60, 50, 186, 143, 62, 120, 242, 253, 61, 129, 38, 232, 61, 77, 188, 149, 61, 48, 153, 245, 61, 176, 207, 48, 61, 64, 242, 182, 189, 119, 13, 29, 62, 41, 69, 248, 188, 245, 17, 146, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {27, 154, 247, 189, 155, 63, 7, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {139, 66, 224, 62, 170, 16, 167, 191, 134, 119, 10, 64};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {77, 168, 102, 64, 44, 23, 13, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0083/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}