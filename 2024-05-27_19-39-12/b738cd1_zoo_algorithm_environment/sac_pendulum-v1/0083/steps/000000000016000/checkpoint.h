// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 72, 254, 190, 1, 123, 193, 187, 98, 90, 60, 60, 170, 80, 178, 190, 196, 243, 39, 63, 117, 78, 53, 191, 75, 153, 197, 190, 91, 37, 124, 191, 225, 111, 91, 62, 113, 141, 11, 63, 229, 166, 201, 190, 21, 213, 128, 62, 41, 205, 224, 188, 91, 101, 181, 190, 12, 34, 212, 62, 132, 236, 217, 62, 83, 163, 178, 190, 24, 63, 11, 191, 82, 138, 64, 63, 27, 100, 80, 63, 107, 33, 206, 62, 64, 132, 131, 63, 194, 111, 66, 191, 186, 187, 251, 190, 229, 159, 41, 63, 217, 190, 159, 63, 244, 10, 172, 62, 89, 115, 217, 188, 167, 178, 143, 61, 203, 71, 22, 63, 207, 118, 53, 190, 241, 63, 169, 189, 99, 130, 6, 190, 54, 20, 234, 190, 52, 121, 0, 191, 154, 16, 96, 62, 26, 193, 185, 62, 160, 101, 75, 191, 15, 239, 14, 190, 191, 184, 157, 190, 83, 55, 56, 190, 62, 188, 56, 63, 184, 1, 160, 189, 97, 228, 193, 191, 56, 115, 148, 190, 56, 142, 207, 190, 108, 116, 40, 63, 206, 135, 73, 62, 17, 63, 4, 63, 194, 71, 24, 191, 30, 116, 44, 62, 115, 135, 123, 190, 238, 226, 193, 191, 30, 105, 105, 190, 207, 10, 0, 63, 102, 201, 137, 61, 158, 70, 40, 191, 221, 68, 212, 190, 0, 142, 200, 63, 162, 149, 145, 62, 193, 106, 89, 189, 12, 28, 125, 63, 182, 27, 250, 62, 192, 242, 213, 62, 232, 170, 213, 63, 167, 202, 163, 62, 225, 42, 23, 190, 49, 51, 36, 63, 185, 38, 197, 61, 89, 207, 44, 191, 208, 144, 138, 62, 63, 211, 36, 191, 188, 158, 157, 62, 145, 155, 147, 63, 34, 248, 202, 62, 226, 101, 47, 63, 218, 171, 209, 190, 222, 160, 238, 62, 168, 246, 43, 191, 55, 6, 133, 62, 109, 69, 223, 61, 80, 115, 112, 62, 173, 138, 166, 62, 239, 7, 191, 62, 142, 74, 0, 63, 123, 71, 20, 63, 156, 88, 99, 62, 23, 66, 11, 62, 251, 190, 17, 191, 163, 231, 46, 63, 24, 200, 181, 189, 85, 101, 214, 63, 207, 109, 215, 62, 103, 111, 65, 191, 75, 79, 38, 190, 40, 172, 15, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 83, 25, 191, 243, 36, 130, 62, 59, 101, 115, 190, 226, 159, 31, 63, 159, 153, 59, 190, 54, 103, 77, 191, 231, 76, 137, 191, 203, 143, 150, 62, 36, 223, 166, 190, 67, 115, 216, 190, 118, 216, 165, 62, 228, 47, 145, 62, 206, 37, 250, 62, 75, 176, 234, 62, 144, 105, 157, 62, 38, 50, 34, 63, 224, 139, 111, 62, 121, 255, 48, 62, 174, 117, 82, 190, 201, 78, 163, 190, 177, 234, 11, 190, 189, 254, 129, 62, 245, 187, 59, 63, 89, 31, 133, 190, 6, 118, 9, 190, 114, 179, 29, 191, 242, 94, 76, 63, 52, 54, 202, 189, 46, 239, 206, 190, 71, 231, 0, 189, 164, 22, 175, 190, 138, 220, 58, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 234, 157, 61, 74, 36, 103, 62, 127, 173, 129, 62, 145, 155, 134, 62, 22, 146, 29, 190, 60, 63, 104, 190, 112, 197, 122, 188, 115, 252, 82, 62, 19, 141, 39, 61, 20, 2, 90, 190, 200, 189, 185, 188, 159, 102, 7, 61, 126, 148, 85, 61, 123, 214, 14, 62, 14, 3, 98, 190, 207, 125, 51, 61, 166, 42, 162, 61, 52, 239, 191, 62, 40, 193, 24, 190, 220, 6, 105, 191, 235, 11, 189, 190, 34, 55, 134, 62, 187, 33, 132, 61, 8, 224, 90, 62, 199, 245, 143, 61, 8, 173, 77, 62, 64, 172, 165, 61, 56, 253, 41, 62, 120, 248, 73, 62, 90, 127, 169, 61, 58, 31, 227, 190, 20, 199, 2, 62, 211, 139, 146, 61, 254, 76, 189, 189, 181, 204, 139, 61, 12, 136, 139, 62, 242, 85, 34, 62, 229, 212, 11, 191, 145, 183, 75, 191, 21, 205, 219, 61, 231, 47, 99, 191, 134, 169, 6, 189, 96, 73, 6, 62, 73, 129, 55, 189, 215, 196, 146, 62, 0, 28, 229, 58, 95, 26, 39, 189, 31, 149, 236, 188, 178, 106, 36, 62, 160, 244, 69, 190, 159, 10, 18, 61, 157, 253, 183, 189, 134, 20, 118, 58, 190, 7, 221, 189, 97, 156, 56, 62, 149, 237, 162, 190, 51, 106, 219, 190, 48, 97, 9, 61, 154, 75, 197, 190, 198, 25, 197, 61, 122, 167, 79, 62, 154, 231, 198, 61, 42, 82, 213, 190, 17, 108, 250, 62, 176, 71, 245, 61, 137, 105, 84, 62, 33, 231, 51, 62, 11, 162, 155, 62, 44, 65, 8, 190, 179, 58, 90, 190, 46, 6, 54, 191, 196, 245, 104, 62, 118, 109, 132, 191, 208, 40, 131, 189, 236, 40, 25, 62, 72, 155, 152, 62, 27, 46, 237, 61, 196, 104, 134, 189, 180, 2, 215, 62, 131, 245, 146, 189, 111, 39, 10, 62, 192, 150, 208, 62, 133, 249, 139, 189, 110, 99, 34, 190, 131, 21, 164, 190, 182, 4, 64, 190, 251, 3, 19, 189, 110, 242, 177, 190, 141, 110, 221, 190, 51, 72, 103, 60, 92, 175, 145, 61, 39, 205, 44, 62, 178, 153, 51, 61, 242, 129, 229, 61, 240, 207, 235, 190, 31, 4, 206, 190, 107, 227, 148, 61, 130, 230, 20, 62, 62, 174, 150, 190, 216, 142, 228, 190, 127, 67, 95, 62, 17, 208, 137, 61, 46, 37, 15, 61, 84, 57, 41, 190, 248, 36, 204, 190, 160, 27, 79, 190, 193, 162, 37, 61, 175, 211, 25, 189, 79, 17, 142, 191, 123, 102, 27, 62, 32, 176, 152, 191, 152, 185, 197, 61, 117, 55, 45, 62, 250, 23, 50, 191, 3, 63, 39, 60, 22, 244, 77, 62, 67, 212, 70, 188, 214, 162, 95, 61, 144, 252, 58, 190, 236, 219, 161, 190, 207, 33, 48, 191, 209, 209, 81, 190, 184, 42, 22, 62, 15, 78, 135, 191, 12, 43, 179, 190, 19, 54, 35, 190, 77, 127, 27, 190, 160, 181, 203, 190, 126, 166, 205, 60, 36, 50, 10, 62, 38, 151, 163, 189, 192, 245, 49, 61, 126, 43, 54, 62, 191, 202, 152, 61, 160, 238, 61, 190, 221, 151, 64, 62, 5, 91, 58, 190, 155, 184, 71, 62, 152, 22, 96, 60, 59, 25, 122, 62, 41, 138, 137, 61, 246, 8, 208, 189, 192, 8, 35, 59, 109, 61, 21, 61, 58, 75, 19, 62, 151, 86, 71, 190, 57, 100, 188, 61, 229, 67, 123, 61, 6, 21, 89, 62, 192, 84, 137, 188, 252, 139, 153, 62, 224, 61, 37, 190, 88, 90, 0, 62, 151, 144, 162, 189, 129, 192, 13, 61, 185, 19, 168, 59, 224, 254, 151, 61, 181, 84, 104, 189, 36, 169, 224, 188, 89, 219, 76, 61, 238, 39, 49, 61, 125, 92, 218, 187, 108, 79, 201, 188, 174, 4, 133, 189, 225, 250, 76, 188, 204, 0, 173, 61, 27, 198, 180, 187, 21, 253, 205, 189, 16, 101, 188, 189, 113, 89, 211, 189, 186, 146, 157, 61, 79, 198, 190, 189, 88, 157, 35, 190, 41, 209, 200, 61, 187, 254, 196, 61, 57, 205, 254, 61, 68, 196, 32, 190, 160, 168, 227, 189, 44, 197, 21, 187, 212, 191, 29, 189, 131, 1, 139, 61, 223, 191, 34, 190, 168, 169, 51, 190, 52, 109, 45, 60, 121, 142, 193, 61, 97, 136, 174, 189, 243, 11, 146, 189, 209, 139, 198, 61, 134, 155, 25, 190, 16, 57, 129, 60, 216, 74, 63, 189, 220, 243, 71, 189, 64, 33, 31, 189, 146, 12, 189, 60, 7, 196, 250, 189, 199, 83, 82, 190, 17, 72, 31, 190, 19, 79, 248, 189, 117, 195, 150, 187, 100, 88, 228, 61, 14, 212, 52, 189, 121, 165, 243, 188, 198, 162, 215, 59, 228, 184, 134, 190, 139, 150, 250, 189, 153, 140, 48, 189, 174, 13, 131, 61, 107, 192, 168, 190, 234, 114, 46, 190, 163, 235, 9, 190, 250, 135, 15, 189, 74, 243, 68, 61, 28, 86, 26, 62, 77, 100, 174, 190, 1, 99, 63, 190, 14, 121, 133, 59, 52, 100, 197, 58, 139, 184, 149, 61, 193, 73, 68, 61, 41, 0, 230, 61, 228, 233, 241, 60, 170, 184, 186, 189, 116, 175, 233, 61, 142, 56, 118, 61, 223, 207, 22, 61, 102, 207, 90, 190, 251, 96, 208, 190, 145, 34, 9, 190, 110, 47, 106, 62, 131, 17, 139, 189, 113, 235, 31, 191, 171, 83, 108, 62, 110, 66, 6, 191, 255, 134, 90, 62, 197, 170, 210, 189, 104, 121, 191, 61, 57, 33, 232, 61, 174, 179, 17, 62, 35, 207, 127, 187, 79, 218, 13, 189, 197, 58, 188, 188, 199, 65, 107, 190, 46, 170, 190, 62, 98, 227, 209, 61, 137, 161, 98, 189, 94, 28, 201, 189, 57, 10, 231, 60, 115, 11, 233, 190, 47, 49, 191, 190, 3, 212, 152, 189, 29, 87, 177, 61, 188, 170, 25, 61, 27, 37, 157, 189, 134, 128, 140, 61, 197, 53, 84, 61, 121, 139, 149, 190, 123, 105, 3, 60, 53, 247, 40, 190, 145, 104, 87, 62, 254, 226, 236, 62, 84, 54, 104, 62, 196, 142, 137, 62, 235, 160, 235, 190, 60, 110, 93, 62, 74, 189, 119, 191, 102, 43, 142, 61, 79, 55, 6, 188, 184, 12, 183, 189, 145, 193, 101, 62, 177, 69, 201, 60, 211, 72, 247, 189, 48, 164, 232, 190, 97, 17, 56, 62, 129, 195, 203, 190, 167, 105, 120, 62, 104, 38, 222, 61, 120, 248, 67, 190, 175, 222, 2, 191, 29, 17, 99, 189, 141, 95, 126, 61, 154, 149, 223, 190, 36, 36, 131, 62, 169, 36, 175, 190, 17, 69, 126, 189, 29, 83, 215, 189, 13, 57, 110, 188, 86, 179, 86, 190, 143, 228, 13, 190, 63, 25, 46, 190, 251, 121, 141, 189, 146, 160, 171, 62, 120, 182, 172, 62, 117, 7, 134, 60, 198, 152, 72, 61, 143, 255, 40, 191, 39, 206, 93, 62, 237, 133, 63, 191, 104, 61, 13, 190, 22, 186, 160, 62, 178, 113, 169, 62, 181, 172, 106, 62, 143, 250, 128, 190, 231, 137, 251, 60, 144, 152, 136, 190, 8, 176, 163, 61, 24, 126, 238, 190, 194, 207, 71, 62, 114, 7, 144, 61, 7, 110, 199, 189, 96, 86, 0, 190, 207, 90, 4, 62, 89, 82, 136, 61, 149, 117, 14, 191, 159, 1, 74, 62, 101, 194, 29, 61, 83, 225, 111, 59, 63, 248, 175, 62, 2, 177, 2, 62, 149, 80, 146, 190, 59, 83, 20, 62, 212, 244, 141, 61, 93, 104, 17, 61, 191, 81, 69, 62, 27, 183, 227, 189, 121, 15, 231, 61, 63, 130, 216, 188, 54, 103, 0, 63, 236, 43, 244, 189, 61, 227, 226, 62, 105, 108, 203, 60, 171, 72, 31, 62, 129, 75, 25, 60, 40, 224, 44, 62, 79, 115, 146, 61, 188, 228, 170, 61, 198, 235, 32, 187, 0, 23, 76, 190, 60, 227, 217, 62, 195, 170, 178, 61, 132, 243, 243, 190, 56, 119, 44, 190, 96, 109, 171, 61, 190, 251, 128, 189, 88, 235, 147, 61, 132, 166, 186, 61, 30, 214, 254, 61, 11, 141, 212, 61, 0, 51, 126, 189, 44, 51, 97, 190, 225, 68, 151, 187, 54, 232, 6, 190, 203, 44, 62, 62, 222, 15, 45, 189, 114, 182, 60, 190, 120, 48, 172, 189, 114, 56, 54, 189, 227, 208, 44, 61, 115, 22, 14, 190, 121, 114, 45, 191, 32, 134, 148, 62, 22, 174, 126, 190, 178, 3, 31, 189, 68, 29, 88, 62, 96, 112, 139, 62, 80, 94, 114, 62, 101, 225, 245, 61, 210, 251, 224, 61, 18, 108, 65, 59, 239, 255, 8, 190, 73, 58, 125, 60, 77, 74, 176, 61, 137, 226, 1, 62, 92, 64, 35, 61, 211, 45, 11, 190, 134, 250, 84, 62, 61, 155, 10, 191, 77, 144, 10, 190, 58, 45, 154, 188, 244, 61, 4, 62, 128, 242, 21, 189, 251, 202, 123, 190, 143, 184, 124, 189, 26, 171, 59, 61, 148, 124, 189, 190, 39, 155, 7, 190, 203, 122, 150, 62, 132, 30, 163, 62, 191, 208, 182, 61, 222, 236, 234, 189, 120, 52, 232, 190, 123, 31, 46, 62, 46, 221, 56, 190, 238, 232, 212, 62, 218, 86, 178, 190, 238, 191, 68, 62, 218, 153, 14, 62, 104, 2, 175, 59, 240, 170, 149, 189, 171, 40, 245, 190, 193, 42, 105, 189, 36, 211, 231, 61, 1, 250, 48, 189, 99, 178, 78, 189, 80, 98, 140, 191, 17, 227, 136, 190, 29, 214, 102, 62, 137, 167, 34, 61, 46, 127, 8, 62, 161, 226, 193, 61, 33, 176, 197, 61, 171, 222, 165, 59, 103, 237, 3, 62, 25, 191, 42, 62, 250, 16, 163, 62, 121, 232, 255, 190, 156, 219, 135, 189, 232, 26, 143, 61, 180, 149, 240, 189, 92, 39, 245, 61, 5, 134, 145, 189, 97, 201, 188, 60, 91, 206, 114, 189, 249, 160, 185, 61, 84, 155, 240, 189, 73, 167, 73, 189, 120, 9, 220, 189, 85, 214, 245, 189, 200, 154, 227, 187, 145, 251, 142, 188, 85, 86, 67, 61, 200, 160, 12, 190, 185, 210, 29, 190, 113, 247, 138, 61, 156, 52, 196, 60, 71, 110, 131, 60, 199, 106, 186, 61, 208, 243, 216, 189, 227, 81, 208, 189, 30, 68, 167, 189, 131, 238, 223, 61, 239, 76, 96, 61, 145, 240, 33, 61, 111, 37, 234, 61, 152, 118, 231, 189, 149, 56, 208, 61, 164, 140, 94, 189, 215, 171, 136, 189, 160, 196, 7, 62, 34, 167, 204, 189, 198, 184, 131, 188, 219, 37, 2, 62, 43, 223, 133, 189, 183, 70, 15, 190, 22, 86, 45, 190, 204, 56, 116, 61, 87, 148, 111, 189, 165, 216, 50, 190, 199, 57, 239, 61, 247, 204, 244, 188, 211, 2, 4, 62, 79, 27, 29, 189, 138, 203, 228, 189, 160, 77, 197, 60, 219, 33, 40, 190, 24, 251, 156, 59, 38, 88, 232, 189, 44, 50, 109, 188, 141, 77, 189, 61, 232, 79, 106, 189, 42, 149, 252, 59, 245, 162, 39, 62, 106, 247, 139, 61, 150, 31, 192, 61, 253, 180, 3, 62, 59, 43, 79, 60, 154, 170, 43, 61, 200, 157, 234, 188, 103, 236, 106, 189, 124, 185, 18, 190, 148, 80, 153, 189, 138, 230, 37, 62, 114, 205, 165, 190, 249, 57, 176, 190, 135, 200, 57, 62, 40, 218, 138, 61, 70, 227, 250, 190, 23, 116, 86, 191, 187, 192, 159, 189, 186, 100, 192, 191, 112, 85, 147, 62, 24, 20, 206, 190, 198, 12, 146, 189, 159, 249, 81, 61, 132, 105, 99, 62, 201, 246, 85, 190, 172, 112, 119, 189, 22, 15, 154, 62, 185, 146, 190, 187, 166, 9, 58, 191, 63, 69, 167, 62, 97, 101, 2, 190, 37, 174, 89, 190, 195, 165, 140, 189, 46, 82, 224, 190, 235, 190, 247, 190, 94, 0, 140, 189, 103, 213, 9, 62, 47, 182, 15, 190, 54, 110, 202, 190, 39, 116, 150, 61, 135, 8, 50, 190, 172, 32, 76, 191, 148, 214, 255, 61, 170, 221, 58, 190, 57, 179, 139, 191, 40, 29, 231, 189, 72, 238, 26, 60, 123, 252, 48, 62, 6, 177, 17, 63, 156, 87, 149, 62, 99, 66, 189, 190, 55, 75, 5, 61, 25, 144, 23, 189, 179, 220, 174, 188, 25, 105, 30, 62, 210, 215, 99, 190, 12, 100, 13, 62, 91, 60, 5, 62, 201, 15, 255, 189, 33, 124, 140, 191, 20, 238, 37, 61, 53, 214, 178, 62, 251, 76, 236, 61, 142, 94, 92, 62, 250, 40, 56, 61, 227, 75, 172, 190, 226, 119, 106, 190, 154, 196, 215, 190, 199, 78, 219, 189, 83, 42, 33, 190, 126, 72, 45, 62, 159, 223, 42, 191, 189, 175, 11, 63, 191, 184, 159, 190, 116, 126, 196, 189, 236, 43, 61, 62, 206, 154, 72, 62, 153, 56, 87, 188, 213, 143, 249, 190, 107, 135, 213, 190, 212, 113, 123, 190, 57, 185, 84, 190, 159, 199, 189, 188, 48, 136, 150, 191, 130, 198, 151, 61, 249, 138, 156, 189, 8, 197, 49, 62, 44, 187, 153, 61, 47, 124, 104, 189, 138, 120, 56, 62, 181, 61, 175, 189, 158, 3, 133, 62, 102, 58, 163, 190, 38, 169, 58, 190, 9, 27, 74, 191, 172, 124, 183, 62, 147, 38, 216, 62, 150, 56, 154, 62, 101, 123, 147, 61, 38, 57, 126, 58, 155, 65, 90, 62, 113, 19, 171, 60, 37, 107, 136, 189, 81, 83, 36, 62, 42, 241, 17, 191, 35, 186, 98, 61, 230, 3, 10, 62, 67, 0, 41, 62, 13, 22, 137, 190, 188, 83, 240, 190, 253, 128, 199, 190, 220, 29, 160, 190, 95, 81, 245, 190, 18, 106, 47, 61, 56, 228, 169, 62, 95, 42, 102, 191, 123, 99, 214, 61, 11, 41, 101, 190, 44, 238, 167, 61, 64, 190, 196, 61, 76, 31, 215, 188, 245, 232, 27, 63, 101, 14, 135, 191, 254, 189, 233, 62, 40, 224, 85, 190, 141, 81, 30, 191, 152, 238, 88, 191, 163, 73, 250, 62, 16, 114, 196, 62, 110, 223, 26, 189, 23, 240, 172, 189, 137, 251, 34, 61, 92, 75, 187, 62, 156, 108, 153, 61, 234, 208, 137, 62, 241, 155, 59, 62, 58, 137, 125, 191, 128, 250, 129, 60, 79, 178, 185, 60, 96, 157, 2, 191, 83, 219, 140, 190, 147, 192, 20, 191, 11, 22, 213, 61, 16, 90, 144, 190, 159, 108, 9, 191, 154, 46, 43, 190, 76, 224, 159, 190, 46, 129, 33, 62, 245, 230, 154, 190, 208, 123, 233, 62, 137, 161, 160, 191, 127, 62, 78, 62, 5, 112, 69, 191, 8, 35, 128, 60, 65, 112, 38, 61, 138, 69, 232, 190, 113, 203, 138, 189, 27, 30, 90, 62, 85, 252, 167, 61, 99, 147, 228, 189, 69, 21, 88, 62, 245, 241, 132, 189, 237, 224, 77, 190, 51, 76, 26, 190, 6, 158, 165, 62, 203, 139, 250, 189, 1, 172, 86, 191, 95, 207, 37, 61, 168, 8, 92, 60, 214, 214, 88, 191, 229, 188, 170, 61, 59, 135, 42, 62, 150, 57, 14, 62, 108, 220, 178, 190, 196, 47, 146, 189, 163, 28, 140, 190, 169, 80, 175, 61, 142, 143, 95, 190, 206, 73, 230, 189, 7, 182, 194, 190, 250, 42, 129, 61, 52, 152, 89, 188, 193, 185, 155, 61, 161, 106, 175, 61, 141, 249, 169, 61, 136, 163, 20, 190, 224, 232, 134, 190, 146, 85, 219, 62, 136, 173, 139, 190, 246, 146, 126, 190, 239, 174, 158, 190, 64, 66, 42, 191, 207, 212, 143, 189, 208, 123, 126, 62, 83, 160, 148, 62, 190, 58, 164, 188, 57, 0, 159, 62, 53, 250, 93, 190, 52, 246, 152, 190, 196, 157, 147, 62, 50, 39, 39, 191, 37, 86, 88, 61, 184, 93, 186, 189, 64, 205, 33, 62, 231, 118, 136, 62, 142, 19, 190, 60, 229, 10, 55, 190, 183, 112, 220, 189, 161, 147, 138, 61, 218, 239, 224, 189, 143, 82, 206, 62, 175, 246, 197, 189, 191, 150, 185, 59, 228, 59, 143, 190, 192, 111, 35, 62, 69, 252, 77, 62, 184, 159, 77, 190, 69, 79, 206, 61, 178, 249, 200, 189, 30, 6, 96, 62, 146, 226, 118, 190, 133, 133, 118, 191, 83, 59, 179, 190, 131, 129, 242, 60, 180, 177, 21, 189, 243, 9, 159, 62, 131, 57, 90, 62, 127, 57, 161, 62, 240, 47, 108, 61, 192, 92, 97, 61, 128, 43, 20, 62, 185, 169, 91, 62, 251, 145, 3, 191, 100, 2, 176, 61, 3, 98, 235, 189, 99, 6, 252, 190, 1, 88, 191, 189, 131, 8, 46, 62, 212, 189, 221, 62, 151, 17, 57, 190, 99, 87, 210, 190, 232, 192, 106, 61, 152, 99, 217, 190, 53, 246, 201, 61, 54, 62, 91, 60, 106, 16, 158, 62, 58, 44, 223, 60, 31, 24, 244, 60, 78, 86, 130, 62, 216, 89, 77, 190, 73, 27, 149, 62, 70, 15, 197, 61, 50, 217, 98, 61, 247, 46, 120, 188, 54, 197, 130, 61, 229, 188, 185, 189, 117, 204, 62, 190, 230, 231, 19, 191, 102, 189, 168, 190, 36, 160, 129, 190, 83, 179, 134, 61, 184, 82, 136, 190, 205, 204, 135, 190, 177, 145, 133, 190, 65, 217, 19, 62, 125, 202, 26, 191, 230, 156, 104, 189, 190, 146, 179, 62, 131, 145, 145, 61, 176, 37, 44, 190, 209, 115, 126, 190, 0, 93, 112, 191, 217, 208, 30, 63, 124, 186, 128, 191, 203, 81, 116, 62, 52, 148, 142, 190, 18, 4, 57, 62, 164, 127, 188, 189, 84, 255, 153, 190, 137, 82, 47, 191, 136, 47, 183, 62, 95, 94, 85, 62, 217, 237, 108, 190, 45, 55, 16, 58, 249, 174, 166, 190, 42, 153, 35, 62, 65, 240, 13, 191, 149, 209, 231, 62, 252, 219, 148, 62, 182, 191, 205, 61, 152, 33, 38, 62, 227, 79, 228, 189, 73, 101, 5, 63, 54, 154, 18, 190, 126, 28, 251, 62, 94, 84, 248, 190, 13, 6, 29, 190, 215, 51, 209, 61, 251, 254, 16, 60, 173, 64, 98, 62, 113, 53, 80, 190, 148, 216, 110, 190, 184, 192, 110, 61, 38, 135, 27, 62, 160, 201, 186, 62, 231, 13, 226, 189, 237, 8, 11, 62, 81, 45, 92, 61, 86, 90, 152, 62, 201, 178, 235, 189, 92, 155, 241, 60, 219, 16, 205, 61, 46, 67, 84, 189, 180, 166, 193, 188, 65, 236, 93, 190, 65, 149, 26, 62, 29, 156, 6, 190, 127, 216, 138, 190, 111, 211, 114, 60, 215, 238, 216, 62, 227, 69, 70, 189, 87, 99, 63, 62, 41, 230, 25, 62, 87, 28, 41, 60, 87, 51, 139, 189, 58, 103, 110, 61, 32, 166, 14, 62, 52, 119, 105, 62, 236, 68, 8, 62, 178, 74, 58, 62, 175, 221, 21, 190, 7, 243, 252, 190, 190, 176, 198, 190, 200, 149, 213, 189, 44, 67, 208, 62, 250, 132, 87, 190, 58, 217, 128, 191, 220, 65, 153, 62, 238, 96, 38, 191, 54, 16, 77, 60, 19, 192, 228, 189, 212, 238, 150, 61, 122, 244, 234, 60, 157, 199, 141, 62, 15, 118, 231, 189, 155, 199, 196, 61, 18, 2, 111, 62, 67, 5, 158, 189, 217, 106, 131, 62, 244, 97, 115, 62, 76, 237, 47, 62, 77, 45, 198, 189, 228, 195, 226, 189, 178, 139, 234, 190, 206, 248, 179, 190, 134, 151, 139, 190, 247, 34, 238, 61, 75, 156, 92, 62, 23, 104, 231, 189, 208, 137, 89, 190, 36, 137, 22, 189, 197, 63, 175, 191, 157, 52, 188, 189, 80, 228, 183, 62, 53, 40, 145, 63, 190, 64, 255, 62, 6, 233, 138, 190, 127, 151, 135, 62, 212, 84, 164, 61, 10, 8, 222, 189, 188, 58, 67, 191, 126, 160, 14, 60, 96, 99, 197, 188, 225, 21, 55, 189, 174, 245, 134, 188, 255, 113, 74, 190, 77, 134, 32, 190, 12, 164, 240, 189, 199, 187, 174, 62, 255, 28, 55, 191, 165, 91, 219, 61, 126, 131, 8, 62, 148, 227, 182, 61, 231, 163, 255, 190, 30, 248, 186, 61, 214, 238, 26, 62, 169, 54, 96, 190, 11, 1, 201, 61, 54, 160, 106, 190, 78, 85, 110, 190, 225, 59, 148, 61, 175, 127, 241, 190, 86, 58, 150, 62, 196, 173, 187, 62, 207, 187, 144, 189, 133, 186, 193, 62, 243, 79, 232, 189, 138, 185, 147, 62, 166, 152, 255, 190, 216, 151, 245, 190, 209, 174, 76, 189, 133, 85, 119, 190, 213, 216, 159, 62, 191, 172, 241, 190, 201, 110, 143, 188, 238, 43, 42, 190, 215, 155, 3, 62, 64, 241, 5, 189, 135, 104, 40, 191, 142, 207, 29, 62, 90, 231, 218, 61, 75, 99, 222, 190, 254, 171, 50, 190, 215, 133, 64, 191, 63, 164, 24, 191, 209, 52, 41, 62, 101, 251, 108, 62, 159, 254, 154, 61, 98, 242, 238, 60, 95, 167, 64, 62, 39, 43, 10, 190, 49, 140, 238, 61, 64, 158, 79, 61, 166, 174, 8, 61, 226, 175, 35, 191, 163, 77, 142, 187, 196, 147, 197, 189, 197, 83, 95, 60, 111, 67, 103, 61, 161, 234, 185, 189, 118, 62, 8, 61, 78, 104, 243, 61, 105, 78, 9, 190, 240, 205, 17, 188, 24, 79, 254, 61, 111, 26, 211, 189, 11, 58, 255, 189, 96, 97, 17, 190, 65, 138, 231, 188, 208, 87, 234, 189, 208, 39, 27, 62, 172, 24, 228, 61, 104, 81, 254, 189, 17, 18, 140, 189, 120, 213, 188, 188, 200, 70, 255, 61, 109, 185, 194, 61, 94, 25, 45, 189, 179, 47, 109, 189, 87, 246, 2, 190, 49, 97, 15, 189, 19, 175, 253, 61, 54, 12, 185, 189, 197, 191, 1, 62, 76, 53, 242, 61, 180, 142, 179, 61, 235, 211, 165, 189, 217, 57, 170, 188, 12, 7, 25, 62, 64, 69, 142, 62, 56, 93, 0, 191, 151, 8, 11, 191, 210, 177, 47, 61, 97, 70, 239, 190, 241, 215, 146, 62, 105, 234, 96, 61, 211, 178, 57, 61, 126, 101, 117, 61, 183, 121, 164, 187, 100, 113, 250, 60, 119, 33, 187, 191, 74, 46, 243, 61, 81, 68, 202, 191, 99, 43, 65, 62, 181, 219, 39, 190, 244, 227, 74, 191, 136, 127, 76, 62, 220, 213, 165, 62, 247, 31, 112, 62, 181, 214, 135, 62, 113, 251, 185, 62, 129, 50, 152, 189, 178, 226, 21, 190, 192, 124, 149, 61, 159, 22, 81, 62, 99, 23, 210, 61, 252, 201, 163, 62, 69, 200, 207, 189, 129, 226, 189, 62, 150, 242, 91, 191, 42, 94, 14, 189, 194, 36, 116, 62, 144, 203, 91, 61, 184, 189, 105, 61, 168, 26, 96, 190, 135, 36, 168, 190, 185, 88, 12, 63, 66, 151, 91, 190, 115, 251, 228, 62, 117, 206, 27, 191, 81, 14, 53, 62, 75, 222, 142, 190, 19, 237, 211, 61, 108, 104, 130, 189, 148, 137, 166, 190, 100, 105, 143, 61, 220, 27, 196, 189, 229, 226, 201, 61, 183, 134, 131, 190, 143, 30, 55, 191, 235, 164, 15, 191, 79, 154, 213, 60, 139, 68, 108, 62, 239, 137, 162, 61, 79, 163, 133, 188, 179, 199, 147, 190, 240, 57, 248, 61, 218, 51, 183, 61, 87, 159, 158, 62, 80, 226, 187, 62, 189, 209, 133, 191, 162, 226, 104, 189, 158, 26, 170, 61, 110, 254, 87, 62, 73, 102, 35, 61, 80, 59, 7, 190, 247, 199, 96, 61, 31, 200, 148, 62, 213, 227, 97, 62, 170, 121, 188, 189, 2, 208, 17, 189, 152, 197, 106, 62, 185, 1, 52, 190, 230, 188, 47, 189, 82, 213, 72, 62, 157, 220, 234, 61, 160, 52, 28, 191, 153, 53, 155, 60, 193, 189, 144, 61, 41, 56, 34, 191, 189, 169, 188, 189, 47, 88, 91, 62, 92, 194, 4, 61, 246, 22, 98, 61, 48, 43, 30, 189, 109, 174, 81, 190, 233, 84, 103, 62, 141, 176, 5, 61, 75, 48, 3, 190, 64, 52, 233, 61, 89, 251, 23, 61, 222, 144, 80, 189, 95, 212, 136, 62, 39, 152, 33, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {152, 240, 159, 61, 140, 45, 192, 189, 189, 167, 77, 62, 59, 14, 156, 189, 161, 245, 141, 62, 171, 15, 226, 60, 34, 70, 152, 190, 197, 241, 92, 62, 93, 76, 132, 188, 88, 13, 159, 62, 96, 194, 70, 190, 90, 213, 161, 62, 23, 177, 133, 61, 22, 101, 12, 190, 165, 15, 134, 189, 120, 148, 121, 62, 166, 141, 18, 62, 38, 4, 202, 62, 51, 82, 228, 61, 227, 27, 157, 189, 32, 150, 167, 59, 15, 118, 48, 62, 191, 83, 205, 189, 205, 121, 142, 62, 217, 222, 30, 190, 208, 139, 147, 61, 35, 149, 210, 189, 160, 203, 167, 61, 50, 249, 62, 190, 250, 173, 213, 61, 108, 62, 143, 62, 177, 125, 146, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 227, 131, 190, 134, 95, 240, 62, 201, 2, 24, 63, 7, 213, 138, 63, 252, 58, 52, 187, 101, 140, 83, 60, 10, 118, 151, 61, 161, 80, 133, 62, 47, 33, 44, 63, 130, 205, 137, 62, 160, 80, 255, 189, 87, 68, 145, 62, 45, 251, 225, 190, 187, 255, 210, 61, 251, 228, 6, 190, 157, 223, 132, 63, 117, 45, 59, 63, 34, 79, 81, 191, 205, 109, 174, 191, 228, 96, 68, 63, 17, 31, 23, 191, 113, 126, 175, 190, 9, 247, 88, 61, 10, 234, 182, 63, 235, 123, 8, 190, 222, 88, 73, 63, 6, 235, 0, 63, 190, 197, 8, 191, 124, 175, 211, 61, 232, 129, 62, 63, 166, 40, 253, 190, 187, 153, 6, 190, 191, 148, 182, 190, 242, 181, 100, 61, 192, 251, 140, 61, 176, 181, 59, 62, 60, 97, 88, 190, 247, 170, 28, 61, 136, 66, 123, 60, 14, 225, 71, 61, 95, 1, 236, 62, 219, 28, 164, 190, 250, 49, 45, 62, 51, 45, 240, 189, 145, 199, 236, 188, 1, 15, 187, 189, 123, 24, 12, 62, 35, 179, 145, 189, 27, 223, 44, 61, 198, 47, 4, 190, 11, 157, 33, 62, 250, 177, 98, 61, 17, 45, 252, 62, 146, 149, 18, 189, 39, 81, 248, 62, 43, 162, 200, 61, 31, 11, 28, 62, 58, 214, 246, 62, 156, 199, 31, 61, 159, 191, 215, 189, 64, 242, 182, 189, 15, 124, 213, 61, 53, 176, 41, 61, 150, 199, 221, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {233, 118, 20, 190, 131, 63, 53, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {250, 62, 142, 188, 236, 232, 135, 190, 46, 247, 231, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {194, 226, 66, 191, 252, 199, 160, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0083/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}