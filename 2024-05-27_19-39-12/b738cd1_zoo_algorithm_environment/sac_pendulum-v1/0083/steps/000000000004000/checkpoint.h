// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 72, 254, 190, 1, 123, 193, 187, 98, 90, 60, 60, 84, 220, 62, 190, 22, 132, 62, 63, 64, 87, 68, 191, 202, 86, 167, 190, 165, 140, 129, 191, 192, 8, 127, 62, 112, 174, 26, 63, 218, 209, 173, 190, 237, 228, 27, 62, 170, 34, 244, 189, 53, 3, 10, 191, 96, 200, 209, 62, 221, 193, 141, 62, 234, 221, 17, 190, 241, 250, 18, 191, 193, 250, 18, 62, 182, 197, 1, 63, 214, 124, 254, 62, 148, 192, 109, 63, 52, 156, 245, 190, 213, 113, 19, 191, 56, 226, 43, 63, 186, 135, 93, 63, 1, 51, 18, 62, 51, 249, 114, 190, 150, 223, 23, 191, 107, 2, 21, 63, 121, 207, 42, 61, 20, 181, 66, 189, 252, 189, 107, 190, 127, 63, 202, 190, 81, 172, 71, 191, 165, 83, 166, 60, 249, 228, 198, 62, 250, 64, 15, 191, 77, 147, 9, 190, 138, 118, 203, 190, 252, 57, 6, 191, 64, 85, 50, 63, 43, 95, 0, 62, 233, 29, 125, 191, 45, 31, 0, 190, 215, 124, 139, 190, 195, 177, 250, 62, 162, 108, 225, 61, 186, 246, 157, 62, 148, 245, 46, 191, 141, 182, 136, 62, 23, 12, 186, 189, 220, 21, 122, 191, 6, 42, 56, 189, 10, 217, 185, 62, 211, 153, 9, 62, 100, 95, 45, 191, 171, 109, 52, 191, 243, 76, 93, 63, 18, 242, 9, 62, 154, 136, 125, 190, 51, 242, 60, 190, 184, 30, 10, 63, 123, 226, 166, 62, 167, 249, 128, 63, 205, 224, 164, 62, 68, 103, 195, 188, 15, 236, 33, 63, 61, 42, 137, 61, 200, 242, 243, 190, 239, 209, 7, 63, 205, 67, 52, 191, 184, 112, 182, 62, 31, 253, 8, 63, 203, 91, 233, 62, 165, 86, 109, 61, 243, 229, 0, 191, 174, 60, 15, 63, 177, 223, 37, 191, 253, 81, 55, 62, 107, 191, 17, 62, 59, 92, 10, 63, 77, 176, 160, 189, 112, 243, 195, 62, 243, 57, 11, 63, 128, 90, 76, 186, 3, 142, 140, 62, 84, 165, 75, 62, 196, 175, 50, 191, 7, 196, 24, 63, 196, 209, 227, 190, 152, 225, 231, 61, 195, 250, 23, 63, 41, 131, 173, 190, 36, 186, 109, 63, 95, 165, 72, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 83, 25, 191, 40, 36, 134, 62, 85, 208, 118, 190, 1, 84, 31, 63, 169, 17, 137, 189, 1, 177, 235, 190, 114, 107, 67, 191, 112, 175, 166, 62, 118, 238, 166, 190, 169, 13, 34, 190, 118, 36, 189, 62, 206, 169, 211, 62, 100, 48, 9, 63, 126, 21, 247, 62, 61, 238, 190, 62, 108, 36, 57, 63, 189, 87, 156, 62, 85, 153, 97, 62, 255, 3, 198, 189, 104, 125, 135, 190, 39, 222, 128, 189, 81, 61, 46, 63, 108, 39, 63, 63, 255, 251, 23, 190, 72, 9, 35, 59, 193, 234, 255, 190, 100, 123, 50, 63, 136, 38, 164, 62, 112, 188, 224, 189, 105, 185, 68, 188, 238, 46, 205, 189, 108, 215, 215, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 234, 157, 61, 189, 162, 117, 62, 178, 246, 76, 62, 0, 217, 77, 62, 66, 53, 138, 190, 163, 112, 115, 190, 143, 88, 106, 188, 111, 227, 0, 62, 14, 71, 158, 61, 150, 16, 148, 190, 216, 112, 40, 187, 132, 37, 159, 189, 250, 161, 174, 189, 233, 105, 29, 60, 31, 184, 89, 190, 208, 179, 134, 61, 97, 114, 208, 189, 254, 234, 234, 189, 245, 239, 35, 190, 244, 105, 188, 190, 67, 127, 152, 190, 56, 19, 25, 62, 150, 176, 19, 62, 117, 72, 131, 62, 93, 56, 6, 62, 97, 200, 219, 61, 221, 250, 4, 62, 101, 20, 234, 61, 24, 106, 46, 62, 150, 45, 122, 189, 48, 19, 29, 190, 56, 179, 37, 62, 211, 139, 146, 61, 63, 42, 237, 190, 199, 128, 204, 189, 163, 182, 130, 62, 96, 198, 188, 61, 252, 25, 184, 190, 205, 172, 28, 190, 104, 143, 192, 61, 255, 163, 16, 191, 185, 128, 148, 189, 99, 237, 127, 61, 236, 146, 230, 188, 228, 183, 136, 62, 187, 43, 163, 60, 1, 254, 135, 188, 14, 205, 230, 189, 179, 134, 60, 62, 118, 98, 172, 189, 20, 148, 53, 190, 221, 240, 189, 61, 239, 68, 225, 61, 46, 141, 0, 190, 187, 67, 197, 61, 224, 106, 215, 190, 231, 167, 104, 190, 116, 54, 86, 189, 185, 92, 217, 190, 178, 233, 113, 61, 16, 215, 34, 62, 219, 131, 135, 61, 92, 207, 252, 189, 165, 88, 100, 61, 176, 71, 245, 61, 14, 206, 220, 61, 175, 71, 44, 190, 251, 86, 107, 62, 104, 112, 243, 189, 91, 47, 12, 61, 68, 204, 178, 61, 42, 118, 22, 62, 228, 170, 254, 190, 208, 110, 8, 189, 114, 161, 107, 189, 31, 5, 110, 60, 110, 41, 139, 188, 163, 66, 52, 60, 116, 156, 135, 62, 185, 38, 52, 190, 17, 51, 9, 62, 5, 15, 162, 62, 248, 50, 12, 190, 61, 212, 55, 190, 52, 203, 44, 190, 53, 47, 12, 190, 65, 131, 80, 190, 29, 139, 200, 189, 59, 202, 147, 186, 154, 226, 155, 60, 171, 190, 109, 190, 156, 117, 95, 62, 47, 0, 193, 61, 250, 138, 70, 62, 31, 30, 76, 190, 127, 69, 151, 190, 107, 227, 148, 61, 23, 225, 33, 62, 10, 205, 141, 190, 78, 72, 151, 190, 173, 148, 168, 61, 26, 148, 155, 61, 148, 135, 46, 61, 197, 16, 107, 189, 12, 148, 169, 190, 154, 198, 123, 59, 33, 55, 98, 61, 35, 139, 209, 188, 113, 182, 23, 190, 133, 120, 31, 62, 161, 38, 163, 189, 204, 115, 146, 61, 138, 201, 143, 188, 133, 230, 77, 61, 148, 34, 52, 62, 234, 63, 25, 62, 29, 249, 39, 62, 112, 41, 220, 60, 168, 57, 95, 190, 130, 151, 76, 190, 255, 101, 15, 61, 194, 179, 69, 190, 152, 44, 5, 62, 201, 67, 142, 190, 23, 247, 66, 190, 192, 156, 139, 190, 138, 192, 150, 189, 184, 2, 160, 190, 126, 166, 205, 60, 151, 130, 178, 61, 62, 105, 234, 189, 8, 20, 85, 186, 123, 86, 133, 62, 5, 79, 178, 61, 25, 77, 132, 61, 97, 81, 35, 62, 34, 116, 111, 189, 142, 225, 134, 62, 121, 113, 52, 60, 166, 224, 109, 62, 168, 122, 147, 61, 171, 151, 139, 189, 7, 127, 31, 62, 79, 14, 41, 189, 166, 185, 137, 62, 105, 234, 13, 61, 236, 111, 67, 61, 150, 117, 7, 189, 86, 32, 95, 62, 18, 120, 215, 189, 235, 137, 125, 61, 92, 169, 90, 189, 215, 230, 215, 61, 190, 176, 72, 188, 97, 134, 10, 61, 90, 113, 56, 61, 81, 143, 226, 61, 242, 83, 252, 59, 239, 212, 26, 189, 33, 148, 214, 61, 238, 39, 49, 61, 125, 92, 218, 187, 108, 79, 201, 188, 174, 4, 133, 189, 225, 250, 76, 188, 204, 0, 173, 61, 27, 198, 180, 187, 21, 253, 205, 189, 16, 101, 188, 189, 113, 89, 211, 189, 186, 146, 157, 61, 79, 198, 190, 189, 88, 157, 35, 190, 41, 209, 200, 61, 187, 254, 196, 61, 57, 205, 254, 61, 68, 196, 32, 190, 160, 168, 227, 189, 44, 197, 21, 187, 212, 191, 29, 189, 131, 1, 139, 61, 223, 191, 34, 190, 168, 169, 51, 190, 52, 109, 45, 60, 121, 142, 193, 61, 97, 136, 174, 189, 243, 11, 146, 189, 209, 139, 198, 61, 134, 155, 25, 190, 16, 57, 129, 60, 216, 74, 63, 189, 220, 243, 71, 189, 64, 33, 31, 189, 104, 115, 203, 60, 7, 196, 250, 189, 199, 83, 82, 190, 17, 72, 31, 190, 220, 138, 244, 189, 117, 195, 150, 187, 200, 191, 231, 61, 14, 212, 52, 189, 121, 165, 243, 188, 228, 227, 4, 60, 238, 183, 134, 190, 6, 138, 248, 189, 153, 140, 48, 189, 205, 198, 134, 61, 157, 132, 168, 190, 234, 114, 46, 190, 149, 153, 8, 190, 22, 62, 8, 189, 74, 243, 68, 61, 28, 86, 26, 62, 77, 100, 174, 190, 196, 173, 62, 190, 227, 7, 194, 59, 52, 100, 197, 58, 139, 184, 149, 61, 203, 168, 73, 61, 41, 0, 230, 61, 228, 233, 241, 60, 170, 184, 186, 189, 116, 175, 233, 61, 207, 188, 127, 61, 223, 207, 22, 61, 114, 145, 94, 190, 207, 127, 12, 191, 221, 165, 30, 190, 224, 238, 51, 62, 96, 102, 171, 189, 179, 146, 17, 190, 12, 170, 81, 62, 183, 41, 208, 189, 185, 43, 53, 62, 214, 25, 155, 189, 118, 216, 132, 61, 136, 226, 6, 62, 76, 48, 14, 62, 70, 202, 136, 61, 154, 182, 114, 189, 212, 0, 54, 61, 190, 96, 7, 62, 230, 155, 133, 62, 193, 112, 140, 187, 225, 112, 16, 189, 165, 5, 146, 188, 5, 2, 254, 188, 13, 108, 89, 190, 23, 90, 232, 189, 253, 4, 201, 189, 148, 235, 5, 61, 92, 88, 84, 61, 171, 140, 153, 60, 141, 253, 39, 61, 22, 221, 11, 62, 77, 64, 117, 190, 123, 105, 3, 60, 153, 91, 43, 190, 119, 31, 146, 189, 183, 186, 46, 189, 253, 243, 10, 62, 153, 143, 14, 62, 133, 147, 4, 190, 231, 69, 45, 61, 136, 193, 202, 189, 89, 54, 19, 61, 70, 21, 8, 61, 66, 103, 191, 189, 57, 30, 77, 61, 208, 93, 87, 56, 126, 75, 142, 189, 105, 13, 252, 188, 25, 98, 42, 190, 114, 110, 221, 61, 146, 74, 239, 61, 37, 124, 36, 62, 138, 186, 194, 189, 253, 195, 169, 187, 253, 173, 17, 189, 56, 198, 234, 61, 183, 11, 116, 189, 189, 125, 224, 61, 197, 106, 207, 61, 18, 57, 18, 190, 86, 65, 34, 190, 133, 108, 172, 189, 175, 125, 179, 61, 101, 7, 172, 189, 63, 25, 46, 190, 105, 156, 202, 189, 60, 84, 157, 189, 143, 16, 62, 62, 166, 89, 13, 190, 147, 4, 134, 61, 124, 138, 180, 61, 68, 244, 103, 62, 133, 155, 166, 190, 71, 244, 81, 190, 172, 178, 127, 62, 111, 198, 156, 61, 23, 150, 61, 62, 5, 73, 153, 190, 137, 65, 155, 61, 215, 191, 129, 190, 58, 98, 19, 60, 118, 73, 216, 189, 7, 59, 51, 62, 89, 66, 33, 62, 53, 200, 200, 60, 236, 250, 12, 62, 5, 73, 84, 189, 99, 164, 213, 61, 142, 105, 138, 190, 160, 189, 61, 60, 254, 44, 14, 59, 235, 101, 17, 189, 153, 200, 137, 62, 230, 25, 189, 60, 114, 204, 111, 189, 106, 196, 26, 62, 212, 244, 141, 61, 162, 110, 17, 61, 184, 68, 154, 60, 138, 122, 135, 61, 37, 33, 4, 189, 104, 38, 119, 189, 136, 57, 94, 62, 13, 151, 59, 190, 79, 48, 139, 62, 31, 244, 160, 189, 76, 5, 231, 61, 131, 218, 13, 190, 16, 21, 28, 62, 146, 232, 212, 188, 74, 250, 88, 61, 46, 130, 55, 60, 162, 150, 53, 190, 75, 227, 106, 61, 96, 255, 36, 61, 77, 158, 151, 189, 99, 130, 44, 190, 120, 127, 168, 187, 71, 0, 61, 62, 114, 23, 171, 61, 163, 14, 37, 62, 132, 245, 202, 60, 2, 85, 138, 61, 125, 63, 190, 60, 162, 251, 121, 189, 40, 97, 137, 189, 245, 104, 188, 188, 8, 101, 87, 62, 222, 15, 45, 189, 232, 35, 122, 190, 197, 98, 130, 190, 251, 13, 225, 189, 212, 218, 149, 61, 187, 93, 50, 61, 58, 74, 33, 190, 161, 19, 137, 62, 81, 205, 12, 61, 239, 210, 125, 59, 168, 198, 213, 61, 113, 215, 9, 62, 79, 87, 67, 62, 52, 89, 56, 62, 25, 129, 167, 60, 26, 168, 182, 189, 157, 95, 161, 189, 210, 94, 129, 61, 230, 49, 24, 61, 51, 218, 244, 61, 160, 40, 0, 62, 99, 88, 245, 189, 30, 44, 2, 61, 102, 17, 43, 190, 43, 211, 167, 61, 48, 125, 1, 61, 121, 63, 27, 60, 19, 254, 153, 60, 62, 186, 28, 190, 144, 180, 151, 188, 139, 33, 42, 62, 207, 209, 134, 190, 39, 155, 7, 190, 196, 96, 144, 62, 146, 183, 88, 62, 60, 15, 180, 61, 218, 95, 142, 190, 61, 26, 193, 190, 193, 240, 12, 188, 234, 148, 98, 190, 42, 114, 152, 62, 117, 59, 231, 190, 227, 60, 108, 62, 86, 244, 0, 62, 187, 151, 6, 189, 43, 210, 44, 190, 218, 234, 34, 190, 43, 197, 27, 61, 215, 221, 82, 61, 121, 120, 207, 189, 14, 117, 144, 189, 218, 99, 58, 190, 175, 231, 58, 190, 146, 215, 3, 62, 120, 232, 123, 61, 83, 142, 70, 62, 192, 188, 30, 62, 37, 224, 46, 189, 184, 38, 15, 62, 248, 164, 6, 62, 245, 21, 36, 62, 154, 50, 77, 62, 65, 95, 68, 190, 210, 128, 155, 188, 232, 26, 143, 61, 58, 101, 219, 189, 57, 136, 13, 62, 44, 53, 105, 189, 215, 197, 2, 61, 107, 38, 103, 189, 249, 160, 185, 61, 242, 72, 234, 189, 73, 167, 73, 189, 174, 88, 202, 189, 212, 11, 231, 189, 153, 241, 58, 60, 100, 169, 16, 188, 167, 218, 147, 61, 127, 253, 0, 190, 17, 53, 18, 190, 25, 255, 168, 61, 98, 140, 21, 61, 17, 44, 176, 60, 10, 29, 189, 61, 137, 220, 212, 189, 209, 48, 208, 189, 35, 169, 148, 189, 229, 189, 241, 61, 239, 76, 96, 61, 205, 249, 55, 61, 41, 191, 6, 62, 174, 130, 221, 189, 149, 56, 208, 61, 63, 188, 16, 189, 215, 171, 136, 189, 151, 77, 18, 62, 34, 167, 204, 189, 198, 184, 131, 188, 219, 37, 2, 62, 43, 223, 133, 189, 183, 70, 15, 190, 22, 86, 45, 190, 204, 56, 116, 61, 87, 148, 111, 189, 165, 216, 50, 190, 199, 57, 239, 61, 247, 204, 244, 188, 211, 2, 4, 62, 79, 27, 29, 189, 138, 203, 228, 189, 160, 77, 197, 60, 219, 33, 40, 190, 24, 251, 156, 59, 38, 88, 232, 189, 44, 50, 109, 188, 141, 77, 189, 61, 232, 79, 106, 189, 42, 149, 252, 59, 245, 162, 39, 62, 106, 247, 139, 61, 150, 31, 192, 61, 253, 180, 3, 62, 59, 43, 79, 60, 154, 170, 43, 61, 200, 157, 234, 188, 103, 236, 106, 189, 124, 185, 18, 190, 148, 80, 153, 189, 138, 230, 37, 62, 79, 44, 239, 189, 115, 164, 204, 190, 242, 197, 45, 62, 134, 79, 138, 61, 199, 153, 218, 60, 185, 205, 66, 190, 207, 209, 25, 61, 47, 225, 199, 190, 218, 54, 159, 62, 225, 141, 1, 62, 123, 103, 99, 188, 185, 91, 25, 61, 104, 89, 97, 62, 155, 168, 152, 189, 39, 58, 169, 189, 9, 135, 158, 62, 40, 167, 215, 61, 42, 162, 8, 189, 9, 114, 146, 61, 218, 196, 3, 189, 254, 245, 166, 189, 51, 30, 5, 190, 55, 137, 190, 190, 121, 179, 30, 190, 178, 148, 158, 189, 160, 213, 6, 62, 59, 84, 24, 190, 14, 241, 251, 189, 45, 63, 14, 61, 12, 156, 63, 59, 214, 48, 10, 191, 148, 214, 255, 61, 169, 243, 99, 190, 218, 61, 91, 191, 38, 41, 5, 190, 117, 167, 202, 61, 6, 85, 54, 62, 64, 76, 104, 189, 219, 150, 128, 62, 93, 122, 164, 190, 83, 37, 102, 61, 21, 186, 14, 190, 140, 67, 113, 62, 146, 138, 45, 62, 11, 198, 46, 61, 113, 22, 249, 61, 166, 127, 3, 62, 40, 75, 125, 188, 152, 242, 42, 189, 198, 114, 128, 189, 140, 138, 3, 189, 238, 164, 122, 189, 65, 12, 14, 62, 39, 134, 138, 189, 152, 145, 178, 189, 118, 197, 5, 190, 174, 117, 140, 190, 28, 59, 136, 189, 249, 201, 181, 189, 87, 1, 157, 61, 82, 24, 216, 190, 57, 76, 69, 62, 220, 235, 67, 190, 116, 126, 196, 189, 250, 192, 65, 62, 32, 202, 168, 62, 184, 90, 61, 187, 152, 163, 36, 191, 180, 130, 172, 190, 222, 223, 208, 61, 184, 122, 118, 190, 188, 102, 161, 188, 5, 45, 126, 191, 58, 26, 174, 61, 175, 165, 141, 189, 202, 150, 207, 61, 74, 93, 102, 190, 16, 113, 18, 189, 102, 63, 89, 61, 205, 46, 13, 190, 151, 235, 71, 190, 12, 56, 149, 190, 104, 254, 90, 189, 82, 181, 222, 190, 240, 82, 52, 62, 122, 93, 184, 62, 109, 106, 170, 62, 78, 150, 23, 62, 225, 220, 111, 190, 120, 119, 218, 61, 161, 142, 109, 60, 248, 40, 30, 189, 95, 142, 128, 189, 230, 65, 150, 189, 240, 64, 171, 61, 230, 3, 10, 62, 240, 37, 49, 62, 27, 190, 29, 188, 106, 177, 148, 190, 120, 82, 59, 191, 150, 65, 91, 190, 238, 114, 141, 61, 235, 254, 215, 60, 219, 255, 167, 189, 170, 168, 113, 191, 218, 95, 211, 61, 76, 132, 244, 189, 41, 179, 227, 60, 38, 180, 181, 188, 204, 138, 168, 61, 220, 53, 218, 62, 118, 22, 18, 191, 31, 247, 154, 61, 141, 121, 75, 190, 195, 36, 172, 190, 44, 188, 219, 190, 41, 91, 106, 189, 54, 66, 134, 62, 145, 124, 216, 187, 108, 228, 64, 61, 78, 61, 146, 190, 206, 151, 131, 62, 15, 180, 192, 189, 129, 132, 90, 189, 248, 152, 144, 190, 133, 187, 153, 190, 183, 236, 1, 61, 79, 178, 185, 60, 235, 7, 255, 190, 216, 217, 184, 190, 254, 54, 19, 191, 91, 144, 25, 61, 16, 90, 144, 190, 0, 254, 40, 190, 193, 103, 42, 190, 138, 121, 247, 60, 89, 152, 219, 61, 20, 52, 143, 189, 174, 64, 213, 62, 14, 146, 161, 190, 95, 92, 31, 62, 193, 213, 174, 189, 103, 97, 192, 188, 245, 215, 41, 61, 170, 110, 137, 189, 113, 203, 138, 189, 7, 69, 82, 62, 178, 64, 116, 61, 188, 204, 55, 189, 54, 22, 74, 62, 35, 112, 165, 190, 169, 198, 62, 189, 217, 215, 12, 190, 159, 111, 133, 62, 131, 38, 219, 189, 7, 68, 110, 190, 209, 241, 4, 189, 241, 70, 239, 56, 201, 62, 127, 191, 229, 188, 170, 61, 203, 59, 57, 62, 56, 29, 69, 189, 246, 73, 37, 190, 155, 213, 97, 190, 71, 42, 120, 190, 244, 220, 48, 62, 19, 240, 3, 190, 163, 39, 77, 190, 203, 82, 176, 190, 81, 222, 136, 61, 77, 81, 129, 60, 195, 125, 192, 61, 105, 247, 43, 189, 7, 240, 254, 188, 30, 12, 227, 189, 137, 182, 29, 190, 96, 174, 233, 61, 214, 31, 132, 190, 153, 72, 78, 190, 228, 26, 99, 61, 106, 19, 49, 190, 102, 243, 192, 61, 18, 201, 101, 62, 223, 164, 101, 62, 172, 235, 146, 60, 99, 128, 113, 62, 218, 244, 43, 187, 119, 133, 165, 60, 22, 139, 27, 62, 243, 63, 61, 190, 18, 212, 66, 60, 184, 93, 186, 189, 78, 46, 63, 62, 95, 154, 49, 62, 138, 46, 153, 61, 24, 210, 164, 190, 212, 27, 201, 189, 101, 120, 117, 189, 32, 106, 249, 189, 108, 156, 138, 62, 235, 168, 60, 190, 135, 139, 130, 61, 164, 69, 137, 190, 71, 145, 15, 62, 106, 69, 164, 61, 79, 152, 238, 189, 114, 28, 248, 61, 104, 171, 40, 190, 210, 145, 240, 189, 206, 6, 105, 190, 74, 228, 111, 190, 19, 201, 146, 190, 52, 1, 242, 189, 55, 17, 181, 61, 198, 64, 168, 62, 16, 208, 108, 62, 99, 75, 101, 62, 33, 205, 211, 61, 78, 113, 177, 60, 56, 184, 242, 61, 77, 8, 190, 61, 112, 225, 127, 190, 106, 179, 235, 61, 3, 98, 235, 189, 50, 55, 3, 61, 5, 94, 162, 190, 253, 26, 215, 61, 211, 64, 209, 62, 62, 46, 243, 61, 200, 57, 28, 189, 206, 7, 150, 61, 69, 191, 240, 60, 131, 229, 233, 61, 253, 152, 138, 61, 55, 236, 7, 62, 238, 234, 39, 189, 186, 86, 118, 61, 209, 214, 23, 62, 218, 45, 251, 189, 0, 108, 97, 62, 104, 228, 33, 62, 108, 176, 41, 62, 114, 42, 225, 61, 27, 129, 17, 62, 5, 254, 21, 62, 12, 120, 30, 190, 48, 253, 36, 190, 199, 204, 25, 62, 205, 23, 52, 190, 178, 82, 177, 61, 253, 195, 52, 190, 59, 95, 162, 189, 209, 18, 120, 190, 209, 247, 161, 62, 62, 130, 80, 190, 230, 156, 104, 189, 224, 183, 89, 62, 169, 220, 6, 190, 231, 152, 206, 189, 151, 156, 128, 61, 36, 84, 229, 190, 191, 55, 22, 61, 221, 152, 177, 190, 169, 187, 136, 190, 19, 186, 175, 189, 34, 75, 175, 61, 205, 128, 113, 190, 88, 25, 15, 190, 177, 90, 242, 190, 217, 227, 52, 190, 196, 225, 240, 61, 18, 222, 109, 190, 19, 226, 200, 190, 85, 17, 10, 190, 245, 181, 101, 62, 240, 116, 15, 191, 198, 70, 150, 62, 111, 21, 131, 62, 148, 187, 40, 61, 21, 45, 177, 189, 203, 178, 207, 189, 156, 7, 204, 62, 8, 82, 249, 189, 164, 105, 29, 187, 153, 218, 64, 190, 118, 248, 208, 190, 81, 255, 84, 61, 251, 254, 16, 60, 139, 79, 107, 62, 159, 179, 225, 189, 137, 5, 47, 189, 156, 167, 130, 189, 59, 146, 22, 62, 192, 77, 43, 62, 159, 106, 29, 190, 72, 202, 195, 57, 240, 84, 122, 189, 0, 215, 158, 62, 109, 221, 24, 189, 148, 224, 54, 60, 211, 111, 112, 61, 75, 150, 8, 189, 167, 142, 52, 189, 177, 63, 53, 190, 83, 214, 8, 190, 3, 151, 19, 190, 112, 139, 83, 190, 240, 43, 139, 189, 14, 92, 33, 62, 157, 146, 9, 62, 245, 157, 58, 62, 17, 148, 180, 61, 168, 82, 190, 189, 201, 6, 160, 189, 54, 241, 42, 60, 38, 223, 184, 61, 116, 234, 49, 62, 150, 103, 219, 61, 243, 74, 50, 62, 175, 221, 21, 190, 234, 253, 228, 190, 250, 231, 230, 190, 153, 157, 242, 189, 244, 36, 188, 62, 224, 197, 15, 62, 246, 134, 2, 191, 92, 204, 149, 62, 183, 249, 134, 190, 187, 233, 139, 188, 27, 232, 56, 60, 39, 214, 32, 62, 250, 96, 91, 61, 231, 146, 157, 62, 44, 94, 41, 61, 106, 218, 140, 61, 93, 169, 133, 62, 87, 72, 152, 62, 85, 133, 46, 62, 151, 84, 215, 61, 197, 136, 79, 62, 244, 154, 232, 189, 169, 197, 28, 190, 123, 112, 184, 190, 39, 197, 56, 190, 250, 114, 138, 190, 84, 155, 2, 62, 193, 14, 32, 62, 164, 233, 168, 189, 247, 252, 125, 190, 64, 59, 75, 61, 164, 251, 115, 191, 157, 52, 188, 189, 44, 208, 178, 62, 20, 197, 120, 62, 31, 205, 3, 62, 236, 210, 45, 190, 104, 41, 133, 62, 43, 42, 228, 61, 222, 82, 118, 189, 186, 207, 158, 190, 191, 53, 3, 188, 212, 30, 4, 189, 218, 240, 5, 190, 68, 133, 2, 60, 39, 169, 164, 190, 90, 153, 17, 190, 26, 108, 191, 61, 238, 44, 158, 60, 224, 62, 86, 190, 156, 251, 242, 61, 131, 232, 51, 62, 152, 201, 160, 190, 9, 81, 75, 62, 55, 133, 105, 61, 111, 145, 28, 62, 48, 50, 129, 61, 43, 193, 141, 61, 110, 189, 15, 190, 62, 97, 41, 190, 136, 54, 200, 60, 83, 19, 109, 190, 36, 32, 5, 190, 225, 90, 188, 62, 207, 187, 144, 189, 9, 87, 199, 62, 7, 76, 47, 62, 156, 179, 151, 62, 213, 156, 186, 190, 12, 101, 220, 190, 252, 148, 76, 188, 100, 73, 139, 190, 83, 102, 72, 62, 95, 199, 154, 190, 6, 150, 204, 61, 140, 77, 26, 62, 31, 28, 248, 61, 100, 190, 243, 189, 204, 216, 71, 190, 67, 84, 61, 62, 184, 215, 115, 61, 174, 73, 176, 190, 9, 222, 64, 190, 79, 27, 19, 190, 73, 10, 135, 190, 12, 228, 253, 187, 233, 135, 65, 62, 144, 230, 35, 62, 171, 214, 203, 61, 182, 214, 42, 62, 52, 245, 53, 61, 40, 20, 218, 61, 104, 114, 5, 59, 193, 45, 91, 189, 232, 133, 194, 189, 165, 189, 184, 61, 196, 147, 197, 189, 87, 103, 0, 61, 111, 67, 103, 61, 90, 24, 182, 189, 118, 62, 8, 61, 137, 234, 7, 62, 105, 78, 9, 190, 139, 169, 40, 60, 24, 79, 254, 61, 111, 26, 211, 189, 131, 147, 241, 189, 96, 97, 17, 190, 197, 52, 172, 188, 208, 87, 234, 189, 217, 10, 35, 62, 172, 24, 228, 61, 104, 81, 254, 189, 41, 89, 132, 189, 79, 13, 192, 187, 200, 70, 255, 61, 109, 185, 194, 61, 94, 25, 45, 189, 63, 34, 109, 189, 140, 85, 233, 189, 49, 97, 15, 189, 19, 175, 253, 61, 54, 12, 185, 189, 197, 191, 1, 62, 76, 53, 242, 61, 180, 142, 179, 61, 235, 211, 165, 189, 252, 101, 73, 187, 12, 7, 25, 62, 17, 165, 14, 189, 68, 10, 197, 190, 59, 191, 45, 191, 102, 26, 181, 188, 166, 115, 130, 190, 163, 63, 15, 61, 61, 92, 7, 190, 235, 19, 131, 190, 186, 228, 139, 188, 177, 2, 202, 60, 172, 122, 71, 62, 98, 209, 94, 190, 152, 240, 1, 62, 101, 131, 133, 190, 240, 5, 132, 61, 2, 39, 56, 190, 80, 133, 46, 61, 234, 244, 85, 190, 9, 107, 140, 61, 61, 141, 239, 61, 172, 75, 24, 190, 77, 247, 27, 62, 118, 24, 165, 190, 101, 100, 90, 190, 161, 220, 5, 61, 120, 130, 59, 62, 13, 96, 48, 188, 58, 139, 219, 188, 188, 100, 87, 190, 183, 202, 39, 62, 92, 124, 128, 191, 42, 94, 14, 189, 8, 38, 135, 62, 201, 63, 111, 62, 55, 235, 176, 61, 43, 69, 200, 189, 51, 194, 87, 190, 133, 24, 89, 62, 220, 0, 71, 190, 0, 217, 146, 62, 55, 94, 207, 190, 90, 159, 123, 62, 232, 36, 55, 190, 191, 172, 190, 61, 3, 21, 31, 190, 95, 166, 6, 190, 195, 126, 139, 61, 247, 173, 246, 189, 107, 107, 76, 190, 207, 252, 88, 190, 74, 187, 209, 189, 178, 149, 0, 190, 240, 52, 234, 189, 174, 30, 119, 62, 232, 119, 229, 61, 185, 123, 51, 188, 209, 196, 180, 189, 13, 106, 35, 62, 205, 242, 173, 61, 91, 154, 134, 62, 225, 252, 138, 62, 14, 118, 158, 190, 24, 150, 53, 188, 158, 26, 170, 61, 59, 142, 210, 61, 104, 67, 214, 61, 240, 15, 4, 190, 207, 197, 247, 188, 159, 168, 46, 60, 211, 215, 217, 61, 203, 175, 66, 190, 15, 247, 173, 189, 246, 146, 15, 62, 43, 29, 131, 189, 54, 161, 18, 189, 182, 87, 15, 62, 173, 65, 189, 59, 102, 229, 194, 188, 179, 228, 200, 189, 45, 113, 246, 60, 8, 235, 59, 190, 213, 20, 88, 60, 4, 195, 52, 61, 158, 202, 208, 189, 158, 85, 226, 189, 31, 242, 18, 190, 189, 66, 134, 189, 181, 34, 202, 61, 90, 43, 4, 189, 190, 44, 87, 190, 144, 29, 18, 61, 229, 224, 16, 189, 69, 175, 225, 189, 126, 98, 27, 62, 242, 94, 245, 59};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {161, 50, 183, 60, 95, 228, 6, 190, 227, 9, 2, 61, 135, 224, 157, 189, 56, 103, 33, 62, 171, 15, 226, 60, 140, 176, 151, 190, 197, 53, 76, 62, 162, 15, 30, 188, 156, 11, 79, 62, 185, 41, 206, 189, 227, 53, 47, 62, 215, 144, 254, 60, 235, 109, 244, 189, 165, 15, 134, 189, 48, 204, 100, 62, 60, 114, 185, 61, 59, 157, 150, 62, 54, 222, 31, 189, 244, 92, 171, 189, 165, 154, 255, 60, 36, 37, 75, 62, 85, 69, 19, 190, 42, 110, 119, 62, 187, 132, 24, 189, 99, 180, 181, 61, 117, 242, 158, 189, 206, 103, 55, 61, 140, 93, 60, 190, 134, 167, 251, 188, 125, 170, 121, 62, 199, 118, 77, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {113, 42, 153, 190, 188, 246, 223, 62, 47, 118, 123, 62, 82, 99, 173, 62, 12, 171, 170, 61, 101, 140, 83, 60, 130, 157, 151, 61, 248, 148, 137, 62, 150, 97, 172, 61, 133, 210, 105, 62, 59, 111, 9, 190, 126, 78, 136, 62, 43, 59, 173, 190, 205, 4, 212, 61, 251, 228, 6, 190, 178, 113, 175, 62, 111, 87, 229, 62, 176, 219, 61, 191, 118, 79, 61, 191, 189, 212, 243, 62, 104, 145, 168, 190, 225, 21, 192, 190, 174, 187, 24, 62, 224, 99, 99, 63, 166, 209, 24, 190, 100, 219, 76, 63, 161, 139, 195, 62, 252, 145, 204, 190, 245, 223, 211, 61, 74, 74, 218, 62, 168, 102, 177, 190, 83, 154, 135, 189, 220, 61, 79, 190, 135, 218, 251, 189, 117, 171, 159, 60, 83, 108, 104, 189, 174, 47, 251, 189, 247, 170, 28, 61, 255, 73, 123, 60, 3, 13, 59, 189, 254, 64, 241, 61, 221, 228, 3, 190, 75, 194, 191, 61, 246, 66, 11, 189, 69, 239, 106, 61, 176, 149, 187, 189, 123, 24, 12, 62, 83, 165, 175, 188, 113, 30, 207, 61, 155, 73, 78, 190, 131, 112, 227, 61, 150, 169, 126, 189, 24, 151, 29, 62, 167, 90, 197, 58, 30, 140, 76, 62, 103, 211, 124, 60, 67, 115, 76, 61, 29, 109, 226, 189, 219, 20, 224, 61, 17, 114, 10, 188, 104, 245, 182, 189, 133, 243, 71, 61, 179, 99, 206, 188, 101, 132, 194, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {9, 39, 22, 190, 198, 194, 196, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {21, 250, 52, 192, 79, 7, 133, 61, 103, 207, 120, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {207, 132, 25, 63, 243, 202, 206, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0083/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}