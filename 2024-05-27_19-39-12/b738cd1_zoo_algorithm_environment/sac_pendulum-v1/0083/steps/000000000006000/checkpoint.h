// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {228, 72, 254, 190, 1, 123, 193, 187, 98, 90, 60, 60, 112, 13, 149, 190, 208, 9, 244, 62, 225, 122, 69, 191, 28, 108, 205, 190, 76, 168, 133, 191, 227, 181, 134, 62, 78, 213, 17, 63, 103, 59, 205, 190, 71, 199, 20, 62, 137, 58, 129, 60, 194, 123, 184, 190, 166, 135, 218, 62, 28, 179, 244, 62, 203, 141, 28, 190, 126, 186, 17, 191, 170, 12, 10, 63, 200, 91, 9, 63, 76, 51, 249, 62, 161, 153, 130, 63, 142, 244, 5, 191, 121, 255, 10, 191, 250, 195, 48, 63, 151, 241, 128, 63, 102, 139, 169, 62, 169, 169, 39, 189, 153, 139, 27, 190, 97, 150, 29, 63, 254, 49, 144, 189, 218, 38, 46, 190, 210, 108, 80, 190, 222, 132, 202, 190, 25, 106, 19, 191, 136, 205, 238, 61, 24, 23, 199, 62, 59, 204, 14, 191, 25, 198, 20, 190, 43, 9, 196, 190, 11, 245, 0, 191, 250, 8, 64, 63, 220, 170, 27, 62, 45, 119, 131, 191, 10, 89, 135, 190, 155, 255, 196, 190, 123, 110, 218, 62, 61, 223, 224, 61, 241, 244, 194, 62, 111, 242, 49, 191, 243, 31, 80, 62, 54, 181, 137, 189, 156, 209, 124, 191, 254, 88, 72, 189, 79, 117, 221, 62, 125, 57, 135, 61, 11, 155, 43, 191, 4, 87, 39, 191, 123, 64, 137, 63, 82, 59, 138, 62, 78, 33, 34, 190, 207, 134, 221, 62, 150, 129, 19, 63, 238, 175, 212, 62, 219, 221, 149, 63, 97, 128, 207, 62, 246, 126, 203, 189, 210, 93, 0, 63, 101, 41, 140, 61, 154, 219, 11, 191, 51, 208, 135, 62, 22, 233, 52, 191, 94, 169, 173, 62, 9, 34, 90, 63, 61, 37, 216, 62, 178, 140, 152, 62, 243, 29, 186, 190, 137, 82, 3, 63, 196, 58, 45, 191, 149, 225, 43, 62, 244, 157, 235, 61, 103, 69, 19, 63, 101, 232, 59, 62, 159, 203, 222, 62, 113, 4, 57, 63, 219, 110, 139, 62, 188, 64, 74, 62, 70, 173, 80, 62, 142, 152, 10, 191, 236, 121, 26, 63, 231, 80, 153, 190, 93, 18, 102, 63, 76, 64, 40, 63, 36, 105, 254, 190, 157, 181, 165, 62, 156, 241, 83, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 83, 25, 191, 155, 111, 144, 62, 23, 240, 215, 189, 143, 225, 50, 63, 130, 207, 135, 190, 207, 157, 1, 191, 106, 202, 67, 191, 232, 204, 177, 62, 83, 162, 164, 190, 32, 187, 198, 190, 124, 187, 197, 62, 170, 54, 176, 62, 117, 95, 19, 63, 181, 75, 188, 62, 214, 125, 149, 62, 128, 26, 52, 63, 194, 114, 121, 62, 118, 168, 33, 62, 62, 71, 243, 189, 43, 212, 116, 190, 194, 178, 115, 190, 84, 65, 249, 62, 63, 72, 69, 63, 141, 78, 16, 190, 102, 94, 124, 189, 142, 249, 9, 191, 94, 12, 61, 63, 0, 91, 173, 62, 223, 121, 28, 190, 156, 229, 5, 59, 98, 58, 135, 190, 79, 81, 17, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 234, 157, 61, 221, 11, 87, 62, 202, 205, 106, 62, 29, 185, 152, 62, 144, 242, 112, 190, 6, 153, 135, 190, 26, 1, 78, 189, 39, 147, 8, 62, 76, 240, 17, 62, 27, 205, 138, 190, 227, 156, 213, 57, 102, 86, 77, 188, 186, 168, 168, 188, 195, 2, 145, 61, 28, 142, 63, 190, 130, 36, 190, 61, 60, 220, 31, 61, 124, 3, 34, 58, 194, 158, 49, 190, 175, 74, 237, 190, 29, 53, 175, 190, 105, 245, 51, 62, 19, 245, 13, 62, 231, 67, 123, 62, 34, 95, 245, 61, 105, 17, 224, 61, 111, 205, 26, 62, 172, 214, 66, 62, 45, 167, 142, 62, 201, 44, 175, 186, 158, 178, 139, 190, 138, 93, 18, 62, 211, 139, 146, 61, 47, 25, 247, 190, 197, 254, 148, 189, 205, 223, 157, 62, 72, 150, 207, 61, 191, 96, 71, 191, 72, 80, 189, 190, 226, 78, 25, 62, 124, 22, 54, 191, 213, 119, 135, 189, 18, 34, 196, 61, 150, 213, 222, 189, 156, 182, 158, 62, 178, 7, 173, 58, 83, 61, 102, 188, 71, 124, 130, 189, 71, 81, 91, 62, 78, 135, 18, 190, 85, 186, 0, 190, 221, 240, 189, 61, 97, 247, 179, 61, 9, 38, 145, 189, 161, 30, 39, 62, 162, 190, 8, 191, 238, 205, 148, 190, 128, 119, 249, 188, 201, 55, 234, 190, 1, 211, 247, 61, 210, 117, 106, 62, 169, 185, 196, 61, 171, 33, 40, 190, 156, 163, 80, 61, 176, 71, 245, 61, 52, 74, 32, 62, 14, 86, 150, 59, 115, 180, 114, 62, 245, 180, 180, 189, 151, 96, 182, 189, 94, 107, 24, 190, 209, 47, 18, 62, 118, 103, 87, 191, 146, 236, 162, 187, 251, 21, 154, 188, 144, 215, 40, 62, 153, 37, 153, 59, 113, 198, 117, 59, 158, 5, 164, 62, 242, 178, 70, 190, 183, 119, 236, 61, 138, 139, 209, 62, 160, 72, 56, 190, 88, 126, 83, 190, 90, 216, 50, 190, 168, 219, 73, 190, 228, 39, 73, 190, 105, 62, 225, 189, 51, 140, 66, 190, 143, 194, 160, 61, 79, 30, 10, 190, 20, 53, 75, 62, 81, 233, 71, 61, 80, 134, 69, 62, 53, 40, 93, 190, 112, 249, 149, 190, 107, 227, 148, 61, 195, 61, 110, 62, 138, 116, 245, 190, 143, 107, 255, 190, 51, 14, 92, 60, 194, 12, 141, 61, 205, 195, 21, 61, 129, 185, 36, 189, 184, 172, 241, 190, 38, 238, 217, 189, 248, 129, 140, 61, 157, 14, 193, 189, 147, 207, 207, 190, 11, 166, 236, 61, 143, 23, 144, 190, 163, 62, 2, 62, 210, 172, 0, 189, 191, 7, 34, 190, 199, 129, 19, 62, 160, 111, 149, 62, 226, 193, 0, 62, 245, 184, 52, 62, 216, 190, 14, 190, 226, 31, 104, 190, 237, 35, 4, 190, 109, 106, 81, 190, 84, 140, 38, 62, 241, 254, 254, 190, 143, 144, 89, 190, 139, 48, 179, 190, 23, 127, 164, 188, 139, 197, 143, 190, 126, 166, 205, 60, 239, 144, 109, 61, 125, 42, 4, 190, 75, 27, 157, 61, 221, 54, 131, 62, 55, 209, 37, 59, 75, 222, 122, 60, 10, 50, 66, 62, 190, 29, 71, 190, 166, 141, 134, 62, 86, 63, 27, 60, 88, 251, 68, 62, 170, 142, 200, 61, 44, 104, 185, 189, 68, 180, 225, 61, 205, 198, 54, 189, 92, 129, 145, 62, 0, 2, 138, 189, 98, 225, 2, 60, 111, 123, 230, 188, 16, 126, 91, 62, 90, 171, 151, 189, 66, 124, 7, 62, 52, 168, 178, 189, 201, 231, 141, 61, 102, 251, 75, 188, 35, 43, 115, 60, 23, 13, 184, 61, 174, 46, 20, 62, 104, 82, 103, 60, 128, 99, 20, 189, 71, 32, 157, 61, 238, 39, 49, 61, 125, 92, 218, 187, 108, 79, 201, 188, 174, 4, 133, 189, 225, 250, 76, 188, 204, 0, 173, 61, 27, 198, 180, 187, 21, 253, 205, 189, 16, 101, 188, 189, 113, 89, 211, 189, 186, 146, 157, 61, 79, 198, 190, 189, 88, 157, 35, 190, 41, 209, 200, 61, 187, 254, 196, 61, 57, 205, 254, 61, 68, 196, 32, 190, 160, 168, 227, 189, 44, 197, 21, 187, 212, 191, 29, 189, 131, 1, 139, 61, 223, 191, 34, 190, 168, 169, 51, 190, 52, 109, 45, 60, 121, 142, 193, 61, 97, 136, 174, 189, 243, 11, 146, 189, 209, 139, 198, 61, 134, 155, 25, 190, 16, 57, 129, 60, 216, 74, 63, 189, 220, 243, 71, 189, 64, 33, 31, 189, 146, 12, 189, 60, 7, 196, 250, 189, 199, 83, 82, 190, 17, 72, 31, 190, 19, 79, 248, 189, 117, 195, 150, 187, 100, 88, 228, 61, 14, 212, 52, 189, 121, 165, 243, 188, 198, 162, 215, 59, 228, 184, 134, 190, 139, 150, 250, 189, 153, 140, 48, 189, 174, 13, 131, 61, 107, 192, 168, 190, 234, 114, 46, 190, 163, 235, 9, 190, 250, 135, 15, 189, 74, 243, 68, 61, 28, 86, 26, 62, 77, 100, 174, 190, 1, 99, 63, 190, 14, 121, 133, 59, 52, 100, 197, 58, 139, 184, 149, 61, 193, 73, 68, 61, 41, 0, 230, 61, 228, 233, 241, 60, 170, 184, 186, 189, 116, 175, 233, 61, 142, 56, 118, 61, 223, 207, 22, 61, 217, 200, 112, 190, 142, 4, 3, 191, 179, 125, 11, 190, 188, 186, 61, 62, 210, 146, 42, 190, 134, 48, 99, 190, 201, 249, 113, 62, 71, 203, 125, 190, 15, 116, 64, 62, 176, 91, 232, 189, 127, 222, 194, 60, 7, 210, 226, 61, 23, 250, 2, 62, 248, 88, 254, 58, 3, 119, 151, 189, 244, 122, 222, 60, 95, 226, 45, 61, 66, 149, 134, 62, 93, 31, 154, 188, 22, 45, 249, 188, 117, 156, 138, 188, 199, 232, 81, 188, 156, 23, 136, 190, 230, 81, 60, 190, 199, 11, 190, 189, 128, 36, 40, 60, 112, 221, 108, 61, 250, 38, 50, 188, 237, 168, 72, 61, 4, 107, 17, 62, 3, 78, 135, 190, 123, 105, 3, 60, 110, 233, 83, 190, 253, 181, 178, 61, 233, 194, 109, 62, 175, 194, 14, 62, 139, 239, 33, 62, 197, 153, 27, 190, 180, 4, 219, 61, 54, 254, 224, 190, 143, 64, 52, 60, 27, 13, 17, 60, 108, 189, 250, 189, 180, 61, 18, 62, 69, 150, 132, 60, 146, 155, 249, 188, 106, 234, 25, 190, 17, 14, 184, 60, 8, 253, 234, 61, 92, 118, 241, 61, 19, 140, 2, 62, 21, 240, 15, 190, 253, 16, 26, 190, 185, 70, 197, 189, 199, 14, 93, 61, 6, 255, 47, 190, 70, 110, 251, 61, 123, 132, 251, 188, 149, 34, 16, 190, 236, 197, 85, 190, 175, 210, 101, 189, 142, 172, 215, 60, 175, 38, 15, 190, 63, 25, 46, 190, 182, 45, 206, 189, 193, 85, 156, 189, 107, 180, 147, 62, 230, 152, 67, 190, 115, 6, 208, 59, 27, 209, 214, 189, 58, 156, 124, 62, 158, 61, 248, 190, 53, 152, 155, 190, 162, 45, 148, 62, 129, 233, 161, 61, 77, 137, 119, 62, 203, 18, 179, 190, 96, 199, 137, 61, 29, 253, 68, 190, 11, 34, 93, 61, 79, 145, 84, 190, 229, 175, 22, 62, 54, 86, 125, 62, 37, 109, 81, 189, 223, 69, 62, 62, 192, 147, 211, 61, 202, 196, 190, 61, 73, 221, 158, 190, 8, 133, 226, 59, 34, 64, 121, 61, 227, 198, 99, 61, 146, 13, 202, 62, 168, 26, 133, 61, 21, 229, 164, 189, 177, 82, 19, 62, 212, 244, 141, 61, 254, 124, 243, 60, 151, 77, 34, 62, 189, 98, 224, 60, 131, 189, 204, 186, 141, 229, 181, 188, 54, 42, 116, 62, 113, 120, 86, 190, 96, 167, 223, 62, 55, 59, 133, 189, 59, 100, 210, 61, 14, 238, 80, 189, 48, 90, 32, 62, 232, 105, 237, 60, 105, 219, 247, 61, 254, 161, 139, 60, 224, 203, 28, 190, 247, 231, 120, 62, 238, 153, 85, 61, 255, 28, 61, 190, 77, 29, 62, 190, 6, 221, 40, 189, 95, 85, 215, 61, 105, 38, 172, 61, 237, 138, 68, 62, 244, 209, 211, 60, 98, 200, 181, 61, 0, 90, 61, 188, 64, 36, 215, 189, 225, 48, 96, 189, 56, 129, 147, 189, 28, 148, 80, 62, 222, 15, 45, 189, 75, 164, 42, 190, 46, 21, 84, 190, 253, 63, 154, 189, 105, 170, 161, 61, 109, 203, 25, 189, 17, 4, 99, 190, 150, 220, 149, 62, 170, 131, 193, 189, 7, 241, 206, 59, 19, 73, 28, 62, 114, 81, 53, 62, 110, 157, 78, 62, 60, 0, 42, 62, 117, 137, 30, 61, 241, 21, 92, 189, 251, 173, 170, 189, 164, 175, 97, 61, 70, 117, 199, 60, 2, 165, 250, 61, 173, 161, 252, 61, 196, 212, 201, 189, 245, 45, 219, 61, 131, 31, 5, 190, 16, 255, 87, 60, 125, 35, 34, 61, 191, 7, 64, 61, 12, 243, 158, 60, 83, 78, 51, 190, 120, 234, 93, 188, 28, 48, 48, 62, 247, 90, 66, 190, 39, 155, 7, 190, 38, 42, 152, 62, 185, 63, 150, 62, 19, 19, 200, 61, 42, 43, 74, 190, 91, 128, 194, 190, 206, 110, 167, 61, 127, 92, 125, 190, 197, 245, 9, 63, 185, 163, 203, 190, 192, 54, 116, 62, 102, 223, 23, 62, 27, 103, 239, 188, 133, 230, 220, 189, 159, 149, 80, 190, 161, 202, 139, 61, 128, 237, 103, 61, 150, 129, 141, 189, 13, 135, 93, 189, 104, 220, 166, 190, 30, 157, 67, 190, 140, 48, 49, 62, 88, 238, 182, 61, 204, 43, 76, 62, 168, 68, 130, 62, 154, 85, 163, 58, 143, 99, 38, 62, 197, 192, 20, 62, 72, 27, 91, 62, 133, 11, 127, 62, 45, 252, 138, 190, 26, 187, 249, 187, 232, 26, 143, 61, 180, 149, 240, 189, 62, 126, 11, 62, 55, 46, 110, 189, 222, 248, 0, 61, 91, 206, 114, 189, 249, 160, 185, 61, 84, 155, 240, 189, 73, 167, 73, 189, 171, 192, 202, 189, 199, 117, 239, 189, 172, 54, 12, 60, 208, 79, 49, 188, 7, 6, 145, 61, 65, 205, 2, 190, 70, 122, 20, 190, 78, 185, 166, 61, 244, 152, 14, 61, 71, 110, 131, 60, 199, 106, 186, 61, 214, 219, 212, 189, 227, 81, 208, 189, 130, 218, 153, 189, 131, 238, 223, 61, 239, 76, 96, 61, 205, 249, 55, 61, 152, 147, 3, 62, 1, 193, 221, 189, 149, 56, 208, 61, 96, 159, 19, 189, 215, 171, 136, 189, 160, 196, 7, 62, 34, 167, 204, 189, 198, 184, 131, 188, 219, 37, 2, 62, 43, 223, 133, 189, 183, 70, 15, 190, 22, 86, 45, 190, 204, 56, 116, 61, 87, 148, 111, 189, 165, 216, 50, 190, 199, 57, 239, 61, 247, 204, 244, 188, 211, 2, 4, 62, 79, 27, 29, 189, 138, 203, 228, 189, 160, 77, 197, 60, 219, 33, 40, 190, 24, 251, 156, 59, 38, 88, 232, 189, 44, 50, 109, 188, 141, 77, 189, 61, 232, 79, 106, 189, 42, 149, 252, 59, 245, 162, 39, 62, 106, 247, 139, 61, 150, 31, 192, 61, 253, 180, 3, 62, 59, 43, 79, 60, 154, 170, 43, 61, 200, 157, 234, 188, 103, 236, 106, 189, 124, 185, 18, 190, 148, 80, 153, 189, 138, 230, 37, 62, 150, 17, 63, 190, 41, 55, 187, 190, 43, 88, 38, 62, 197, 116, 207, 61, 24, 92, 255, 189, 247, 161, 143, 190, 155, 64, 70, 61, 47, 13, 53, 191, 255, 67, 175, 62, 111, 61, 181, 60, 221, 109, 149, 189, 234, 65, 210, 58, 196, 210, 90, 62, 41, 69, 6, 190, 171, 190, 21, 190, 137, 5, 159, 62, 145, 195, 95, 61, 93, 92, 119, 189, 236, 230, 169, 61, 208, 1, 133, 188, 236, 213, 224, 189, 205, 230, 59, 190, 83, 214, 223, 190, 213, 182, 132, 190, 88, 229, 71, 189, 201, 110, 118, 61, 5, 81, 21, 190, 249, 43, 53, 190, 51, 182, 128, 61, 190, 110, 132, 60, 67, 121, 33, 191, 148, 214, 255, 61, 32, 131, 23, 190, 167, 68, 145, 191, 32, 21, 14, 190, 55, 180, 194, 61, 233, 182, 10, 62, 139, 117, 71, 61, 250, 185, 125, 62, 29, 105, 248, 190, 235, 144, 224, 60, 12, 38, 252, 189, 138, 6, 39, 62, 238, 240, 19, 62, 138, 243, 5, 61, 133, 15, 93, 61, 121, 221, 58, 62, 49, 119, 93, 189, 80, 57, 114, 190, 15, 43, 140, 189, 215, 131, 37, 62, 109, 108, 59, 60, 71, 203, 58, 62, 93, 77, 127, 59, 68, 77, 171, 189, 24, 61, 130, 190, 88, 170, 120, 190, 81, 77, 36, 188, 239, 233, 4, 190, 85, 147, 152, 61, 52, 162, 221, 190, 208, 179, 174, 62, 105, 125, 23, 190, 116, 126, 196, 189, 169, 126, 55, 62, 220, 219, 234, 62, 98, 185, 45, 60, 178, 120, 5, 191, 194, 172, 185, 190, 130, 18, 202, 57, 122, 14, 126, 190, 91, 252, 17, 61, 0, 172, 110, 191, 137, 238, 178, 61, 187, 139, 157, 187, 206, 114, 226, 61, 124, 173, 49, 190, 24, 149, 27, 189, 27, 38, 134, 61, 206, 19, 233, 189, 10, 213, 210, 189, 179, 250, 150, 190, 146, 18, 26, 190, 205, 90, 15, 191, 247, 78, 48, 62, 189, 128, 184, 62, 74, 28, 166, 62, 245, 61, 175, 61, 112, 91, 132, 190, 132, 233, 5, 62, 176, 242, 153, 60, 45, 52, 123, 188, 25, 29, 67, 189, 22, 155, 138, 190, 58, 218, 153, 61, 230, 3, 10, 62, 85, 95, 41, 62, 121, 154, 14, 62, 254, 221, 82, 190, 200, 3, 30, 191, 51, 130, 121, 190, 9, 67, 74, 61, 233, 237, 23, 60, 234, 52, 3, 62, 44, 202, 107, 191, 251, 85, 209, 61, 16, 34, 166, 189, 113, 219, 254, 60, 59, 194, 171, 60, 92, 118, 134, 61, 30, 55, 219, 62, 124, 240, 24, 191, 95, 158, 38, 62, 192, 48, 78, 190, 14, 56, 2, 191, 21, 119, 30, 191, 125, 231, 183, 189, 59, 221, 131, 62, 8, 1, 131, 188, 22, 209, 235, 189, 78, 61, 146, 190, 212, 203, 135, 62, 207, 49, 10, 190, 241, 192, 195, 187, 80, 137, 149, 189, 127, 155, 13, 191, 174, 209, 206, 60, 79, 178, 185, 60, 61, 144, 0, 191, 107, 107, 189, 190, 250, 76, 32, 191, 95, 107, 141, 61, 16, 90, 144, 190, 175, 16, 74, 190, 154, 46, 43, 190, 13, 63, 239, 189, 42, 135, 6, 62, 119, 136, 85, 190, 207, 98, 190, 62, 148, 84, 19, 191, 50, 101, 24, 62, 145, 49, 165, 190, 149, 21, 113, 189, 107, 238, 96, 61, 48, 13, 99, 190, 113, 203, 138, 189, 132, 144, 88, 62, 117, 163, 149, 61, 106, 181, 110, 189, 169, 25, 29, 62, 171, 93, 187, 190, 159, 198, 229, 189, 250, 64, 249, 189, 232, 26, 101, 62, 118, 69, 3, 190, 69, 210, 164, 190, 169, 213, 10, 188, 219, 160, 85, 60, 211, 110, 124, 191, 229, 188, 170, 61, 95, 37, 52, 62, 244, 197, 138, 62, 179, 158, 220, 189, 150, 231, 7, 190, 121, 142, 135, 190, 80, 213, 48, 62, 99, 82, 51, 190, 238, 225, 50, 190, 3, 226, 175, 190, 252, 202, 138, 61, 84, 98, 193, 61, 186, 154, 147, 61, 86, 149, 165, 61, 97, 167, 113, 189, 173, 156, 133, 189, 206, 195, 223, 187, 212, 143, 57, 62, 48, 10, 132, 190, 112, 67, 195, 190, 164, 205, 173, 189, 135, 34, 207, 190, 84, 103, 1, 62, 186, 67, 96, 62, 122, 36, 223, 61, 86, 134, 146, 189, 176, 204, 147, 62, 24, 219, 139, 189, 10, 95, 46, 190, 95, 91, 104, 62, 51, 22, 213, 190, 162, 164, 71, 60, 184, 93, 186, 189, 20, 241, 42, 62, 219, 105, 144, 62, 95, 243, 83, 61, 35, 114, 132, 190, 221, 16, 203, 189, 38, 51, 109, 189, 107, 212, 38, 190, 118, 2, 208, 62, 139, 254, 28, 190, 138, 221, 14, 61, 218, 225, 128, 190, 75, 147, 247, 61, 242, 43, 16, 62, 179, 205, 23, 190, 69, 114, 7, 62, 173, 52, 7, 190, 114, 35, 88, 189, 126, 163, 110, 190, 171, 203, 208, 190, 239, 248, 169, 190, 150, 121, 230, 189, 132, 29, 33, 61, 153, 51, 165, 62, 214, 121, 128, 62, 174, 112, 113, 62, 243, 223, 226, 61, 250, 29, 30, 61, 255, 221, 47, 62, 4, 97, 7, 62, 111, 29, 194, 190, 5, 178, 208, 61, 3, 98, 235, 189, 221, 11, 106, 60, 184, 74, 67, 190, 103, 42, 238, 61, 237, 161, 212, 62, 0, 26, 215, 61, 255, 134, 205, 189, 79, 22, 125, 61, 67, 189, 149, 189, 255, 158, 196, 61, 214, 84, 99, 61, 87, 160, 94, 62, 11, 192, 37, 189, 14, 247, 130, 61, 224, 62, 110, 62, 41, 108, 45, 190, 119, 237, 128, 62, 147, 0, 136, 62, 200, 50, 7, 62, 188, 69, 115, 61, 119, 203, 229, 61, 53, 31, 105, 61, 122, 85, 80, 190, 250, 162, 111, 190, 23, 190, 20, 61, 151, 52, 53, 190, 172, 227, 142, 61, 2, 151, 123, 190, 135, 4, 45, 190, 154, 53, 119, 190, 208, 167, 142, 62, 75, 185, 131, 190, 230, 156, 104, 189, 255, 102, 109, 62, 141, 207, 90, 190, 169, 121, 18, 190, 184, 150, 51, 189, 113, 62, 14, 191, 4, 193, 42, 62, 247, 151, 10, 191, 47, 162, 73, 190, 177, 246, 109, 190, 41, 200, 20, 62, 243, 42, 230, 189, 61, 181, 249, 189, 242, 234, 12, 191, 80, 83, 74, 62, 114, 5, 39, 62, 153, 64, 246, 189, 107, 164, 58, 190, 15, 4, 130, 190, 43, 254, 79, 62, 246, 18, 21, 191, 29, 142, 153, 62, 229, 195, 128, 62, 99, 40, 229, 61, 255, 168, 110, 60, 107, 255, 14, 190, 38, 135, 253, 62, 162, 160, 232, 188, 56, 111, 177, 62, 90, 232, 61, 190, 141, 82, 192, 190, 26, 237, 188, 61, 251, 254, 16, 60, 241, 150, 91, 62, 198, 138, 40, 190, 77, 89, 164, 189, 133, 160, 232, 188, 170, 102, 30, 62, 193, 41, 100, 62, 148, 121, 78, 190, 214, 61, 88, 62, 220, 121, 196, 188, 119, 9, 129, 62, 28, 86, 236, 189, 204, 187, 32, 189, 194, 84, 176, 61, 231, 117, 206, 189, 47, 175, 240, 188, 86, 146, 52, 190, 79, 9, 32, 190, 51, 31, 25, 190, 219, 19, 53, 190, 234, 151, 8, 189, 193, 111, 123, 62, 147, 180, 211, 61, 81, 33, 54, 62, 13, 61, 48, 62, 175, 87, 112, 189, 190, 129, 193, 189, 84, 199, 118, 61, 17, 221, 50, 62, 183, 199, 83, 62, 91, 110, 3, 62, 124, 7, 39, 62, 175, 221, 21, 190, 180, 35, 11, 191, 28, 14, 215, 190, 11, 157, 249, 189, 139, 5, 216, 62, 164, 248, 142, 189, 78, 169, 15, 191, 104, 19, 147, 62, 115, 61, 255, 190, 165, 194, 49, 61, 28, 230, 246, 189, 84, 211, 144, 61, 132, 244, 113, 59, 148, 226, 160, 62, 225, 10, 69, 189, 109, 92, 250, 60, 39, 80, 135, 62, 12, 91, 69, 62, 154, 155, 18, 62, 228, 54, 26, 62, 164, 91, 130, 62, 75, 249, 194, 189, 189, 140, 63, 190, 80, 234, 239, 190, 210, 125, 90, 190, 252, 230, 104, 190, 242, 163, 139, 61, 198, 207, 65, 62, 106, 116, 209, 189, 246, 9, 75, 190, 97, 218, 212, 61, 140, 94, 145, 191, 157, 52, 188, 189, 26, 122, 183, 62, 243, 60, 81, 63, 53, 151, 59, 62, 149, 52, 53, 190, 211, 204, 131, 62, 148, 43, 241, 61, 44, 57, 129, 189, 149, 144, 30, 191, 181, 58, 11, 60, 85, 243, 99, 188, 47, 71, 121, 189, 94, 34, 216, 60, 232, 212, 119, 190, 97, 223, 1, 190, 5, 81, 172, 61, 246, 157, 210, 60, 133, 255, 136, 190, 74, 203, 234, 61, 230, 83, 70, 62, 233, 127, 254, 189, 240, 65, 133, 61, 41, 219, 194, 61, 100, 67, 25, 62, 65, 230, 178, 188, 43, 193, 141, 61, 36, 29, 225, 189, 151, 79, 127, 190, 255, 211, 153, 189, 174, 135, 197, 190, 56, 174, 178, 61, 91, 240, 188, 62, 207, 187, 144, 189, 216, 202, 193, 62, 61, 9, 38, 62, 128, 104, 155, 62, 211, 237, 158, 190, 52, 108, 234, 190, 132, 237, 76, 61, 98, 135, 165, 190, 193, 148, 221, 62, 179, 24, 135, 190, 74, 204, 172, 61, 36, 34, 40, 62, 163, 133, 214, 61, 24, 213, 147, 189, 202, 59, 130, 190, 237, 207, 93, 62, 6, 126, 159, 61, 191, 25, 157, 190, 191, 228, 77, 190, 241, 243, 113, 190, 217, 1, 137, 190, 126, 112, 105, 61, 215, 91, 83, 62, 185, 41, 31, 62, 192, 47, 96, 62, 249, 53, 78, 62, 185, 104, 152, 61, 49, 11, 18, 62, 0, 41, 179, 61, 69, 139, 226, 59, 44, 203, 28, 190, 225, 248, 170, 61, 196, 147, 197, 189, 197, 83, 95, 60, 111, 67, 103, 61, 161, 234, 185, 189, 118, 62, 8, 61, 78, 104, 243, 61, 105, 78, 9, 190, 240, 205, 17, 188, 24, 79, 254, 61, 111, 26, 211, 189, 11, 58, 255, 189, 96, 97, 17, 190, 65, 138, 231, 188, 208, 87, 234, 189, 208, 39, 27, 62, 172, 24, 228, 61, 104, 81, 254, 189, 17, 18, 140, 189, 120, 213, 188, 188, 200, 70, 255, 61, 109, 185, 194, 61, 94, 25, 45, 189, 179, 47, 109, 189, 87, 246, 2, 190, 49, 97, 15, 189, 19, 175, 253, 61, 54, 12, 185, 189, 197, 191, 1, 62, 76, 53, 242, 61, 180, 142, 179, 61, 235, 211, 165, 189, 217, 57, 170, 188, 12, 7, 25, 62, 177, 108, 192, 61, 103, 90, 3, 191, 149, 194, 75, 191, 93, 164, 249, 60, 166, 115, 130, 190, 202, 129, 196, 60, 61, 92, 7, 190, 1, 200, 212, 190, 22, 67, 201, 60, 172, 33, 178, 188, 37, 132, 6, 62, 101, 223, 25, 191, 252, 179, 245, 61, 86, 71, 22, 191, 88, 196, 208, 61, 67, 83, 27, 190, 105, 191, 115, 190, 234, 244, 85, 190, 14, 204, 75, 62, 165, 184, 38, 62, 204, 126, 68, 189, 209, 56, 78, 62, 162, 91, 132, 190, 196, 94, 150, 190, 229, 132, 14, 61, 230, 82, 80, 62, 164, 84, 74, 189, 169, 124, 241, 189, 118, 181, 45, 190, 144, 52, 112, 62, 41, 133, 86, 191, 42, 94, 14, 189, 77, 171, 133, 62, 173, 7, 188, 62, 100, 140, 167, 61, 144, 214, 55, 189, 19, 43, 108, 190, 221, 221, 1, 62, 127, 29, 112, 190, 179, 138, 184, 62, 62, 14, 207, 190, 246, 1, 124, 62, 190, 186, 152, 189, 164, 146, 187, 61, 34, 74, 217, 189, 194, 172, 10, 190, 77, 197, 37, 61, 42, 174, 174, 189, 91, 165, 139, 189, 34, 25, 94, 190, 88, 182, 175, 190, 137, 157, 134, 190, 160, 217, 35, 190, 108, 228, 64, 62, 238, 33, 1, 62, 42, 80, 109, 189, 41, 241, 251, 189, 252, 178, 47, 62, 23, 112, 161, 61, 52, 175, 150, 62, 207, 240, 163, 62, 224, 193, 19, 191, 137, 89, 40, 187, 158, 26, 170, 61, 45, 164, 39, 61, 9, 51, 136, 60, 182, 163, 246, 189, 201, 67, 29, 188, 118, 169, 29, 60, 183, 76, 98, 62, 27, 242, 22, 190, 85, 173, 74, 61, 68, 114, 52, 62, 224, 141, 185, 189, 80, 239, 228, 189, 129, 81, 66, 62, 75, 16, 31, 61, 236, 74, 134, 189, 135, 33, 155, 188, 115, 28, 10, 61, 246, 236, 122, 190, 234, 173, 57, 59, 174, 25, 143, 62, 48, 44, 44, 189, 42, 120, 205, 59, 79, 10, 21, 189, 26, 67, 19, 190, 176, 196, 75, 62, 102, 208, 150, 187, 113, 31, 40, 190, 186, 160, 188, 61, 131, 20, 69, 61, 42, 62, 181, 189, 179, 148, 105, 62, 251, 177, 201, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 143, 124, 61, 109, 203, 178, 189, 64, 68, 137, 61, 129, 247, 89, 189, 43, 3, 83, 62, 171, 15, 226, 60, 34, 70, 152, 190, 174, 40, 71, 62, 106, 177, 6, 189, 65, 148, 158, 62, 179, 153, 4, 190, 116, 152, 109, 62, 71, 43, 109, 61, 232, 84, 255, 189, 165, 15, 134, 189, 153, 52, 43, 62, 252, 149, 242, 61, 199, 84, 161, 62, 20, 27, 171, 188, 114, 152, 21, 190, 3, 13, 130, 61, 98, 122, 45, 62, 82, 156, 22, 190, 91, 247, 144, 62, 93, 174, 202, 189, 140, 20, 246, 60, 122, 38, 43, 189, 40, 158, 116, 61, 50, 249, 62, 190, 187, 32, 11, 189, 134, 181, 116, 62, 93, 196, 177, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 18, 138, 190, 146, 26, 2, 63, 71, 46, 176, 62, 199, 118, 51, 63, 231, 159, 143, 61, 101, 140, 83, 60, 10, 118, 151, 61, 47, 229, 100, 62, 115, 88, 85, 61, 249, 68, 119, 62, 55, 214, 11, 190, 162, 141, 92, 62, 65, 138, 214, 190, 100, 233, 211, 61, 251, 228, 6, 190, 245, 40, 240, 62, 57, 237, 8, 63, 96, 233, 56, 191, 128, 234, 78, 191, 103, 75, 8, 63, 231, 38, 230, 190, 151, 119, 192, 190, 84, 228, 220, 61, 247, 238, 134, 63, 101, 53, 39, 190, 58, 165, 90, 63, 69, 149, 197, 62, 1, 77, 232, 190, 124, 175, 211, 61, 36, 211, 20, 63, 59, 134, 201, 190, 181, 81, 233, 189, 110, 211, 152, 190, 34, 126, 242, 190, 185, 86, 198, 61, 109, 182, 90, 61, 133, 202, 11, 190, 247, 170, 28, 61, 136, 66, 123, 60, 106, 241, 8, 190, 45, 210, 160, 62, 30, 116, 120, 190, 232, 17, 7, 62, 69, 234, 171, 189, 5, 107, 95, 61, 35, 84, 187, 189, 123, 24, 12, 62, 155, 55, 32, 61, 175, 211, 219, 61, 152, 101, 91, 190, 237, 41, 29, 62, 11, 159, 241, 188, 123, 238, 95, 62, 158, 72, 18, 60, 251, 103, 121, 62, 212, 251, 236, 61, 143, 131, 188, 61, 170, 192, 95, 189, 43, 180, 16, 62, 142, 163, 126, 188, 64, 242, 182, 189, 113, 129, 4, 62, 139, 37, 129, 189, 255, 16, 134, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 35, 3, 190, 66, 52, 238, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {34, 102, 17, 63, 58, 62, 171, 190, 180, 115, 89, 187};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {160, 176, 157, 63, 2, 179, 199, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0083/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}