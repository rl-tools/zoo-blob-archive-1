// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {24, 83, 53, 63, 58, 194, 68, 63, 95, 40, 194, 62, 53, 142, 129, 62, 24, 179, 46, 63, 146, 41, 8, 62, 51, 111, 87, 191, 70, 175, 128, 190, 8, 15, 60, 61, 6, 244, 80, 63, 108, 203, 172, 191, 197, 13, 177, 190, 150, 226, 252, 62, 68, 200, 142, 191, 104, 45, 41, 191, 146, 244, 167, 190, 108, 215, 140, 63, 170, 8, 6, 62, 87, 225, 30, 191, 17, 132, 127, 63, 145, 211, 131, 187, 34, 33, 68, 191, 91, 233, 196, 63, 222, 184, 7, 63, 242, 37, 39, 190, 204, 39, 151, 63, 92, 81, 200, 62, 187, 251, 179, 190, 164, 124, 45, 63, 212, 246, 225, 62, 104, 58, 230, 61, 176, 108, 66, 61, 17, 57, 87, 191, 91, 129, 147, 62, 28, 19, 245, 191, 198, 76, 51, 61, 103, 105, 49, 191, 120, 148, 38, 191, 7, 224, 144, 189, 106, 30, 141, 62, 31, 7, 112, 62, 136, 185, 178, 62, 168, 138, 81, 190, 230, 136, 0, 191, 87, 14, 213, 62, 18, 148, 23, 191, 199, 147, 196, 191, 27, 194, 156, 190, 128, 7, 189, 190, 149, 83, 7, 62, 125, 45, 129, 62, 124, 150, 62, 63, 171, 224, 176, 191, 156, 182, 176, 190, 192, 157, 40, 191, 82, 226, 211, 189, 89, 156, 191, 190, 158, 29, 10, 62, 223, 119, 65, 63, 218, 116, 205, 190, 224, 129, 127, 190, 130, 237, 124, 190, 59, 185, 211, 188, 97, 26, 3, 63, 149, 23, 189, 190, 0, 114, 60, 191, 10, 171, 201, 190, 125, 26, 211, 60, 123, 162, 216, 188, 187, 5, 56, 191, 27, 177, 219, 190, 184, 123, 8, 191, 192, 120, 118, 63, 77, 161, 218, 62, 233, 26, 148, 61, 77, 68, 133, 62, 90, 217, 20, 63, 253, 86, 33, 190, 102, 155, 178, 61, 80, 148, 18, 63, 173, 140, 230, 190, 65, 146, 27, 63, 78, 181, 185, 62, 92, 68, 236, 62, 95, 66, 217, 190, 135, 5, 97, 62, 179, 104, 28, 63, 110, 227, 106, 191, 254, 172, 148, 63, 121, 102, 20, 63, 232, 36, 232, 62, 179, 175, 38, 191, 3, 146, 69, 188, 46, 83, 31, 63, 7, 216, 33, 191, 174, 130, 5, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 29, 21, 191, 9, 205, 29, 62, 205, 243, 123, 62, 242, 28, 180, 190, 164, 138, 255, 190, 133, 58, 129, 62, 91, 54, 66, 188, 198, 241, 204, 62, 148, 74, 8, 63, 109, 35, 148, 190, 208, 232, 162, 189, 184, 133, 78, 190, 76, 84, 141, 62, 74, 124, 47, 190, 210, 207, 228, 62, 49, 249, 237, 61, 10, 53, 89, 63, 93, 159, 206, 190, 88, 197, 176, 59, 34, 211, 3, 190, 123, 239, 252, 62, 222, 208, 176, 62, 37, 31, 176, 62, 175, 208, 212, 190, 66, 221, 48, 190, 126, 70, 88, 61, 189, 191, 152, 188, 4, 75, 158, 61, 166, 77, 194, 190, 131, 79, 123, 61, 219, 82, 14, 61, 208, 231, 207, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 27, 41, 190, 240, 248, 223, 191, 70, 10, 84, 190, 42, 120, 85, 62, 190, 223, 151, 62, 106, 123, 252, 189, 188, 198, 46, 190, 36, 141, 44, 189, 90, 77, 65, 190, 188, 119, 74, 60, 196, 58, 176, 61, 77, 240, 195, 62, 241, 255, 242, 185, 27, 196, 13, 62, 44, 154, 135, 190, 64, 183, 95, 62, 82, 47, 5, 191, 33, 53, 164, 62, 188, 35, 127, 190, 213, 184, 187, 190, 93, 31, 80, 189, 187, 139, 26, 61, 9, 196, 49, 190, 51, 236, 152, 190, 219, 110, 84, 191, 193, 147, 102, 190, 112, 20, 130, 59, 67, 237, 92, 191, 90, 144, 236, 188, 214, 56, 145, 190, 243, 177, 187, 61, 32, 97, 147, 62, 39, 104, 239, 61, 172, 85, 136, 61, 224, 190, 46, 190, 161, 2, 151, 191, 179, 56, 139, 190, 74, 112, 88, 62, 136, 17, 245, 62, 212, 168, 3, 190, 15, 233, 197, 62, 57, 4, 163, 188, 70, 166, 83, 190, 19, 136, 206, 190, 14, 26, 195, 190, 104, 68, 88, 61, 165, 243, 207, 188, 219, 59, 95, 191, 9, 44, 212, 61, 19, 49, 158, 191, 254, 232, 231, 62, 204, 197, 66, 62, 153, 90, 192, 189, 10, 246, 139, 62, 169, 31, 18, 62, 167, 227, 68, 189, 84, 210, 204, 62, 173, 44, 152, 62, 213, 116, 155, 189, 2, 79, 203, 61, 102, 140, 60, 62, 198, 216, 35, 61, 137, 22, 13, 62, 79, 157, 162, 188, 29, 160, 183, 190, 51, 88, 176, 190, 193, 62, 151, 190, 10, 35, 154, 62, 184, 134, 161, 62, 206, 107, 140, 190, 129, 46, 254, 190, 80, 60, 253, 61, 54, 54, 79, 190, 232, 214, 139, 61, 140, 231, 148, 61, 201, 199, 179, 187, 219, 184, 28, 191, 133, 100, 170, 189, 143, 4, 237, 60, 31, 248, 163, 190, 97, 115, 173, 61, 10, 91, 128, 62, 125, 220, 224, 189, 9, 173, 46, 190, 104, 215, 224, 189, 214, 104, 8, 62, 172, 158, 64, 189, 80, 155, 99, 190, 247, 233, 174, 61, 214, 218, 89, 189, 127, 128, 110, 61, 94, 142, 154, 190, 221, 103, 232, 61, 222, 113, 171, 60, 11, 11, 52, 61, 162, 68, 227, 62, 158, 236, 201, 189, 104, 7, 189, 61, 155, 221, 229, 189, 90, 169, 140, 191, 51, 7, 203, 190, 231, 5, 186, 190, 14, 0, 219, 189, 118, 180, 219, 190, 196, 203, 120, 190, 100, 191, 66, 62, 233, 74, 120, 62, 112, 20, 139, 190, 139, 81, 33, 189, 218, 102, 214, 188, 185, 133, 6, 62, 41, 197, 223, 190, 248, 247, 225, 59, 52, 203, 131, 191, 193, 108, 159, 61, 166, 110, 12, 62, 187, 45, 198, 61, 230, 50, 51, 62, 252, 115, 84, 190, 18, 243, 159, 188, 57, 24, 137, 62, 233, 246, 127, 189, 105, 244, 252, 60, 201, 246, 93, 62, 11, 218, 61, 62, 33, 127, 86, 189, 216, 140, 78, 61, 42, 37, 242, 189, 132, 145, 69, 61, 1, 231, 223, 189, 40, 228, 11, 62, 184, 97, 19, 61, 83, 191, 136, 62, 255, 55, 126, 62, 85, 61, 0, 190, 138, 38, 146, 61, 245, 251, 60, 62, 168, 21, 52, 190, 6, 187, 63, 190, 221, 161, 69, 62, 127, 214, 19, 62, 172, 23, 62, 59, 89, 193, 67, 61, 133, 250, 108, 190, 45, 20, 71, 62, 205, 63, 33, 189, 155, 129, 239, 189, 162, 3, 154, 61, 167, 37, 158, 62, 117, 172, 206, 61, 143, 223, 84, 62, 243, 158, 239, 189, 167, 31, 66, 62, 229, 44, 43, 62, 61, 29, 51, 190, 216, 125, 55, 187, 45, 183, 32, 190, 41, 6, 125, 62, 125, 5, 205, 62, 34, 110, 221, 188, 95, 233, 155, 62, 65, 36, 55, 63, 200, 107, 142, 62, 161, 136, 155, 191, 255, 42, 39, 190, 78, 201, 107, 61, 71, 147, 253, 61, 204, 90, 1, 192, 118, 11, 112, 190, 197, 185, 143, 62, 218, 151, 45, 60, 233, 54, 11, 191, 0, 185, 84, 62, 60, 58, 141, 62, 20, 39, 6, 62, 80, 221, 36, 63, 2, 152, 96, 190, 65, 103, 36, 191, 26, 118, 159, 190, 24, 163, 12, 62, 182, 255, 74, 61, 75, 113, 13, 61, 65, 139, 140, 62, 190, 157, 197, 61, 193, 177, 54, 63, 143, 56, 18, 61, 58, 125, 118, 62, 54, 235, 55, 62, 38, 39, 183, 62, 229, 140, 230, 191, 189, 252, 153, 190, 122, 233, 190, 190, 53, 94, 18, 61, 125, 197, 149, 189, 216, 15, 156, 61, 135, 39, 121, 61, 70, 89, 3, 190, 90, 216, 200, 61, 117, 129, 14, 62, 126, 4, 7, 190, 118, 54, 13, 189, 214, 149, 235, 189, 117, 21, 15, 62, 38, 129, 18, 190, 14, 238, 71, 190, 110, 42, 55, 190, 45, 79, 142, 189, 62, 163, 70, 190, 94, 131, 137, 189, 210, 140, 201, 61, 49, 163, 213, 61, 36, 124, 97, 190, 229, 3, 158, 189, 19, 118, 35, 189, 186, 68, 21, 62, 109, 23, 50, 190, 46, 70, 10, 190, 112, 216, 53, 189, 185, 185, 98, 190, 133, 125, 7, 62, 166, 159, 81, 189, 1, 91, 15, 62, 95, 226, 40, 190, 132, 78, 247, 189, 194, 132, 4, 190, 78, 26, 180, 189, 205, 246, 138, 60, 35, 51, 82, 191, 22, 4, 162, 190, 193, 22, 216, 59, 197, 141, 83, 62, 72, 115, 158, 61, 39, 116, 56, 62, 220, 26, 167, 189, 37, 65, 13, 61, 122, 203, 223, 61, 228, 24, 209, 190, 86, 149, 121, 60, 188, 74, 115, 188, 128, 251, 32, 191, 130, 237, 37, 62, 147, 142, 161, 191, 120, 17, 153, 62, 184, 55, 59, 187, 235, 39, 65, 189, 230, 62, 30, 62, 204, 183, 39, 190, 207, 16, 215, 190, 188, 115, 153, 61, 90, 241, 241, 61, 140, 106, 148, 60, 163, 225, 146, 189, 31, 166, 11, 61, 134, 194, 32, 62, 146, 22, 13, 62, 114, 38, 232, 61, 88, 83, 178, 190, 115, 139, 131, 190, 114, 222, 190, 189, 199, 159, 131, 62, 87, 118, 167, 61, 231, 50, 1, 63, 111, 51, 116, 62, 42, 166, 81, 62, 86, 20, 137, 62, 17, 192, 59, 191, 217, 78, 191, 188, 69, 191, 255, 62, 32, 23, 66, 190, 206, 231, 185, 190, 4, 118, 40, 62, 70, 207, 203, 190, 213, 118, 160, 62, 134, 239, 188, 62, 219, 147, 32, 59, 233, 88, 162, 61, 112, 73, 120, 62, 3, 92, 142, 60, 246, 53, 97, 189, 248, 4, 60, 190, 152, 199, 111, 189, 78, 132, 7, 62, 187, 53, 234, 189, 113, 172, 193, 189, 107, 229, 143, 190, 10, 213, 124, 60, 116, 178, 71, 62, 215, 157, 156, 62, 42, 189, 30, 190, 117, 201, 151, 60, 58, 1, 162, 62, 204, 64, 201, 62, 230, 82, 206, 190, 185, 40, 221, 62, 77, 106, 199, 61, 35, 171, 88, 61, 63, 5, 0, 62, 123, 125, 175, 190, 62, 91, 24, 191, 232, 131, 114, 190, 54, 118, 27, 62, 23, 127, 37, 190, 66, 231, 113, 62, 142, 196, 185, 62, 7, 240, 185, 62, 230, 133, 188, 189, 51, 250, 10, 63, 85, 194, 233, 191, 130, 22, 146, 62, 205, 217, 98, 191, 251, 91, 31, 62, 125, 198, 203, 62, 118, 93, 220, 190, 135, 127, 187, 190, 96, 86, 128, 191, 189, 91, 32, 188, 184, 95, 152, 190, 100, 20, 220, 61, 218, 40, 234, 189, 189, 183, 90, 191, 32, 138, 115, 60, 71, 6, 52, 62, 217, 119, 207, 190, 151, 122, 138, 189, 149, 81, 175, 191, 63, 214, 169, 190, 159, 44, 221, 189, 109, 8, 129, 190, 146, 102, 35, 62, 30, 249, 158, 61, 150, 180, 171, 190, 103, 99, 64, 62, 209, 117, 80, 190, 176, 76, 196, 60, 209, 111, 124, 188, 242, 169, 165, 191, 120, 207, 121, 62, 36, 89, 130, 190, 41, 161, 108, 190, 96, 51, 242, 190, 224, 41, 95, 61, 151, 122, 181, 188, 237, 103, 147, 189, 46, 173, 249, 190, 5, 137, 146, 62, 218, 148, 52, 62, 148, 38, 101, 191, 59, 177, 190, 62, 109, 71, 224, 189, 33, 39, 218, 189, 39, 87, 40, 62, 212, 13, 134, 62, 72, 113, 169, 190, 46, 247, 37, 62, 51, 110, 18, 191, 11, 156, 125, 191, 109, 156, 213, 190, 96, 242, 129, 62, 159, 1, 194, 62, 168, 47, 84, 189, 179, 219, 128, 62, 36, 34, 235, 189, 31, 7, 3, 190, 153, 148, 233, 189, 14, 246, 41, 191, 229, 52, 188, 189, 208, 248, 201, 61, 30, 226, 154, 191, 61, 171, 15, 62, 57, 68, 148, 191, 169, 236, 183, 61, 158, 11, 172, 188, 178, 189, 46, 62, 57, 143, 71, 61, 202, 53, 199, 187, 128, 9, 10, 190, 106, 166, 61, 62, 203, 198, 154, 62, 31, 37, 132, 61, 22, 244, 135, 189, 220, 15, 112, 189, 81, 157, 101, 60, 30, 126, 155, 62, 131, 17, 178, 62, 13, 134, 198, 189, 162, 203, 177, 59, 71, 88, 57, 190, 210, 133, 238, 61, 215, 71, 71, 188, 74, 63, 49, 61, 177, 7, 44, 190, 79, 22, 194, 189, 102, 237, 47, 189, 63, 151, 128, 189, 67, 39, 93, 189, 24, 127, 177, 189, 128, 241, 71, 189, 6, 230, 73, 190, 158, 218, 33, 190, 240, 31, 166, 189, 158, 1, 10, 62, 94, 168, 21, 62, 225, 98, 49, 190, 203, 27, 202, 189, 232, 120, 187, 61, 76, 184, 249, 189, 139, 150, 199, 61, 107, 182, 170, 189, 164, 26, 136, 60, 172, 175, 120, 60, 195, 157, 220, 189, 7, 199, 13, 187, 76, 91, 39, 190, 58, 52, 45, 190, 92, 95, 31, 189, 137, 220, 68, 190, 108, 179, 37, 60, 79, 5, 164, 189, 225, 135, 135, 189, 221, 149, 39, 190, 231, 45, 13, 62, 100, 161, 47, 190, 104, 138, 41, 62, 122, 74, 158, 188, 195, 37, 32, 62, 154, 28, 22, 190, 246, 88, 224, 61, 48, 104, 59, 61, 29, 18, 190, 59, 137, 116, 24, 190, 150, 31, 39, 190, 237, 100, 21, 190, 168, 51, 249, 189, 91, 139, 29, 62, 87, 54, 137, 61, 16, 23, 185, 188, 172, 239, 113, 189, 42, 77, 200, 189, 239, 223, 210, 189, 130, 18, 151, 186, 154, 76, 134, 189, 96, 40, 223, 189, 42, 99, 207, 189, 139, 167, 226, 189, 90, 110, 173, 187, 0, 152, 16, 62, 181, 56, 50, 190, 49, 72, 34, 190, 1, 248, 77, 190, 236, 20, 215, 189, 41, 255, 156, 62, 156, 59, 18, 62, 109, 188, 134, 189, 69, 43, 174, 62, 243, 159, 173, 61, 195, 135, 199, 62, 98, 124, 152, 61, 131, 155, 80, 190, 101, 151, 140, 190, 106, 69, 7, 190, 198, 9, 32, 61, 224, 234, 242, 187, 230, 120, 23, 61, 40, 125, 223, 189, 64, 134, 154, 62, 90, 112, 105, 189, 110, 111, 144, 188, 172, 121, 133, 60, 232, 193, 15, 62, 43, 191, 5, 189, 204, 33, 110, 62, 99, 98, 120, 190, 149, 224, 219, 62, 217, 157, 54, 62, 132, 147, 73, 61, 37, 78, 83, 190, 193, 35, 213, 189, 77, 214, 132, 61, 210, 116, 25, 62, 156, 3, 74, 61, 119, 197, 204, 61, 85, 211, 148, 188, 49, 225, 146, 190, 12, 205, 90, 191, 72, 164, 200, 190, 190, 79, 115, 190, 45, 198, 181, 62, 228, 32, 75, 59, 118, 200, 38, 62, 65, 39, 149, 61, 158, 166, 84, 190, 146, 137, 36, 190, 130, 145, 162, 190, 171, 200, 1, 62, 148, 176, 27, 62, 177, 67, 160, 191, 6, 156, 21, 62, 18, 100, 134, 191, 81, 123, 3, 62, 165, 173, 131, 62, 42, 239, 23, 189, 185, 229, 121, 62, 210, 134, 29, 190, 129, 53, 91, 189, 226, 86, 66, 62, 38, 42, 167, 62, 216, 241, 214, 59, 130, 69, 87, 62, 70, 157, 181, 189, 96, 71, 14, 190, 216, 209, 157, 61, 250, 148, 34, 189, 138, 214, 88, 60, 57, 94, 122, 61, 67, 245, 128, 188, 131, 211, 12, 63, 163, 201, 255, 61, 222, 32, 148, 62, 65, 248, 90, 190, 180, 11, 110, 62, 171, 51, 148, 62, 109, 200, 110, 188, 55, 160, 150, 191, 185, 68, 68, 189, 151, 82, 245, 61, 238, 184, 136, 190, 212, 209, 114, 62, 88, 34, 41, 63, 155, 159, 86, 62, 52, 61, 55, 63, 36, 225, 55, 190, 114, 31, 255, 190, 146, 217, 29, 62, 83, 41, 117, 191, 247, 122, 95, 61, 124, 145, 161, 62, 248, 18, 32, 190, 252, 66, 18, 190, 64, 96, 56, 191, 114, 174, 139, 189, 104, 64, 137, 190, 144, 120, 76, 62, 108, 132, 119, 62, 66, 195, 99, 190, 130, 157, 28, 191, 189, 214, 236, 190, 95, 183, 199, 188, 70, 154, 234, 62, 183, 211, 162, 62, 161, 250, 163, 62, 31, 3, 240, 61, 241, 48, 169, 62, 39, 248, 91, 60, 65, 210, 128, 190, 14, 176, 115, 190, 228, 235, 165, 62, 159, 82, 56, 189, 7, 165, 119, 190, 66, 146, 195, 62, 133, 249, 182, 190, 239, 22, 88, 62, 11, 192, 41, 62, 97, 102, 147, 189, 249, 109, 206, 188, 68, 36, 26, 62, 18, 192, 125, 188, 170, 231, 33, 189, 23, 24, 6, 190, 191, 104, 133, 62, 158, 203, 102, 61, 117, 30, 110, 190, 138, 68, 70, 190, 159, 111, 32, 190, 3, 90, 0, 61, 193, 156, 28, 189, 115, 200, 220, 62, 28, 14, 94, 62, 230, 224, 89, 61, 190, 168, 93, 61, 16, 241, 67, 191, 0, 101, 3, 191, 44, 215, 204, 190, 24, 134, 13, 62, 109, 125, 99, 190, 79, 26, 146, 190, 230, 73, 110, 189, 213, 171, 11, 62, 115, 91, 139, 190, 50, 13, 98, 190, 253, 198, 43, 189, 149, 126, 131, 62, 29, 158, 160, 190, 101, 208, 255, 189, 143, 120, 65, 191, 215, 151, 160, 60, 32, 223, 92, 62, 65, 201, 132, 187, 134, 148, 38, 61, 35, 220, 232, 60, 69, 139, 162, 62, 245, 213, 174, 62, 153, 227, 59, 189, 51, 73, 29, 62, 58, 56, 196, 61, 2, 18, 164, 187, 92, 106, 144, 61, 88, 142, 239, 60, 74, 235, 227, 190, 164, 60, 119, 191, 193, 54, 16, 191, 255, 108, 43, 62, 81, 29, 167, 62, 175, 64, 20, 62, 254, 46, 156, 62, 100, 172, 94, 60, 14, 75, 44, 62, 46, 56, 0, 189, 134, 89, 45, 190, 99, 200, 200, 189, 74, 140, 196, 62, 32, 59, 84, 62, 208, 76, 243, 190, 205, 87, 40, 189, 92, 230, 130, 62, 228, 33, 211, 61, 126, 163, 170, 62, 105, 83, 170, 190, 135, 241, 147, 59, 189, 152, 169, 62, 164, 237, 15, 190, 79, 254, 165, 62, 212, 159, 143, 191, 230, 9, 178, 191, 128, 181, 114, 189, 121, 151, 45, 190, 137, 56, 120, 191, 146, 179, 185, 189, 125, 147, 140, 62, 172, 144, 170, 188, 138, 207, 103, 62, 134, 11, 95, 61, 169, 45, 235, 61, 47, 70, 157, 190, 243, 247, 56, 189, 105, 46, 21, 190, 130, 177, 174, 62, 228, 105, 204, 61, 29, 4, 195, 60, 32, 208, 23, 61, 89, 247, 167, 190, 48, 190, 132, 61, 240, 218, 7, 190, 14, 213, 187, 190, 155, 80, 33, 188, 133, 31, 60, 190, 118, 33, 80, 191, 203, 151, 251, 60, 197, 72, 152, 189, 79, 58, 135, 189, 193, 23, 155, 62, 62, 232, 149, 61, 143, 194, 161, 62, 206, 114, 98, 189, 225, 107, 55, 62, 196, 125, 9, 63, 168, 29, 187, 62, 241, 253, 233, 61, 5, 58, 26, 62, 123, 138, 34, 189, 160, 7, 88, 189, 0, 194, 127, 62, 171, 101, 237, 61, 225, 201, 186, 188, 245, 122, 35, 189, 218, 182, 190, 190, 231, 68, 6, 63, 78, 94, 210, 189, 125, 41, 184, 62, 151, 240, 201, 62, 201, 218, 5, 63, 0, 18, 166, 62, 129, 200, 1, 192, 226, 75, 195, 61, 183, 105, 16, 191, 103, 69, 136, 188, 249, 87, 0, 191, 95, 70, 132, 191, 92, 117, 236, 190, 44, 189, 60, 189, 242, 79, 101, 62, 110, 4, 29, 190, 63, 140, 203, 62, 97, 156, 160, 189, 190, 138, 101, 188, 86, 22, 78, 62, 205, 60, 155, 189, 32, 180, 223, 189, 4, 195, 5, 62, 68, 202, 143, 62, 121, 203, 167, 189, 28, 118, 137, 191, 37, 170, 72, 191, 71, 202, 220, 190, 20, 41, 120, 190, 131, 126, 251, 60, 3, 212, 12, 62, 199, 117, 81, 61, 52, 199, 171, 189, 244, 195, 32, 62, 96, 233, 172, 189, 216, 162, 138, 61, 67, 236, 223, 61, 122, 225, 12, 190, 163, 181, 72, 189, 217, 212, 50, 190, 165, 115, 2, 62, 83, 33, 75, 190, 87, 222, 9, 190, 219, 251, 82, 190, 112, 91, 168, 189, 131, 177, 64, 190, 231, 47, 231, 61, 155, 100, 29, 62, 100, 247, 251, 59, 19, 201, 92, 61, 108, 14, 58, 189, 142, 221, 201, 188, 49, 138, 226, 61, 12, 163, 18, 62, 243, 238, 129, 190, 248, 52, 153, 189, 94, 238, 72, 61, 194, 34, 139, 189, 177, 119, 29, 62, 122, 126, 172, 187, 165, 212, 41, 190, 19, 120, 163, 190, 110, 100, 64, 190, 7, 78, 76, 61, 234, 39, 20, 62, 91, 94, 55, 61, 70, 208, 169, 62, 132, 172, 7, 62, 76, 129, 104, 62, 154, 177, 82, 61, 187, 158, 124, 190, 223, 92, 64, 189, 132, 160, 98, 62, 106, 182, 143, 61, 4, 222, 58, 190, 236, 59, 152, 62, 132, 115, 249, 190, 87, 1, 115, 62, 244, 47, 194, 61, 7, 11, 205, 59, 85, 61, 134, 62, 149, 41, 124, 62, 239, 57, 83, 61, 1, 222, 74, 188, 200, 134, 141, 60, 194, 130, 64, 190, 124, 136, 129, 62, 190, 101, 19, 190, 204, 67, 115, 190, 129, 78, 138, 190, 115, 4, 10, 189, 184, 10, 54, 62, 223, 87, 15, 190, 38, 119, 195, 62, 225, 78, 103, 62, 61, 107, 143, 189, 106, 102, 209, 190, 108, 73, 31, 191, 236, 219, 141, 62, 117, 117, 224, 61, 118, 96, 151, 189, 11, 164, 42, 62, 87, 133, 204, 190, 88, 253, 117, 190, 133, 41, 120, 191, 195, 132, 236, 61, 92, 144, 10, 62, 232, 83, 16, 191, 60, 51, 79, 62, 247, 1, 27, 190, 99, 254, 50, 190, 133, 179, 228, 62, 23, 32, 4, 63, 97, 228, 206, 190, 162, 35, 98, 190, 105, 183, 116, 189, 27, 101, 38, 189, 64, 168, 138, 62, 23, 212, 175, 62, 147, 157, 193, 62, 41, 241, 118, 62, 208, 101, 224, 189, 28, 21, 22, 191, 190, 222, 24, 62, 179, 182, 2, 191, 250, 210, 215, 189, 108, 202, 9, 62, 220, 3, 73, 62, 237, 39, 106, 190, 192, 207, 105, 61, 79, 216, 96, 62, 56, 173, 128, 61, 60, 237, 4, 62, 178, 38, 36, 189, 117, 30, 148, 189, 89, 188, 130, 189, 209, 37, 57, 188, 4, 160, 19, 62, 99, 47, 18, 190, 121, 10, 103, 190, 199, 218, 227, 61, 2, 227, 186, 188, 138, 24, 2, 60, 227, 100, 117, 190, 181, 190, 153, 61, 59, 194, 59, 62, 197, 23, 176, 61, 200, 107, 218, 188, 200, 52, 3, 190, 90, 170, 34, 62, 166, 16, 131, 62, 242, 18, 134, 61, 137, 146, 46, 61, 121, 152, 146, 189, 92, 176, 125, 189, 233, 125, 252, 189, 143, 118, 0, 190, 246, 32, 241, 190, 209, 227, 24, 190, 37, 48, 94, 62, 171, 199, 135, 190, 148, 12, 76, 189, 3, 189, 142, 190, 242, 190, 24, 190, 253, 243, 56, 60, 103, 27, 69, 190, 65, 209, 14, 189, 206, 79, 207, 61, 57, 163, 118, 62, 116, 16, 217, 187, 48, 123, 243, 188, 251, 95, 108, 61, 25, 57, 217, 189, 36, 123, 184, 61, 224, 95, 138, 190, 85, 236, 166, 60, 60, 189, 237, 189, 22, 17, 140, 61, 9, 63, 61, 62, 251, 86, 141, 189, 139, 240, 45, 189, 112, 53, 55, 61, 189, 152, 122, 61, 158, 80, 227, 189, 28, 78, 225, 61, 251, 96, 81, 62, 21, 243, 229, 189, 219, 83, 84, 62, 116, 89, 187, 61, 143, 201, 121, 62, 96, 191, 196, 62, 74, 171, 196, 189, 1, 124, 45, 191, 245, 255, 1, 191, 23, 23, 163, 190, 245, 56, 178, 188, 77, 59, 165, 191, 5, 59, 14, 190, 33, 29, 37, 62, 223, 67, 172, 62, 203, 99, 60, 191, 175, 74, 116, 61, 54, 196, 61, 61, 151, 174, 49, 61, 20, 30, 74, 187, 234, 70, 250, 189, 16, 22, 88, 191, 209, 88, 209, 190, 145, 100, 54, 60, 99, 200, 128, 189, 6, 46, 178, 61, 156, 196, 69, 60, 81, 50, 123, 62, 143, 32, 194, 62, 76, 152, 24, 62, 213, 245, 165, 62, 46, 119, 209, 62, 222, 9, 59, 62, 147, 15, 96, 191, 9, 227, 120, 61, 179, 71, 249, 190, 253, 171, 142, 61, 134, 142, 166, 59, 91, 215, 29, 60, 12, 140, 11, 63, 11, 105, 7, 63, 72, 51, 19, 190, 204, 255, 234, 62, 36, 103, 141, 61, 166, 32, 125, 62, 127, 56, 226, 61, 155, 117, 161, 190, 213, 155, 36, 63, 179, 136, 54, 188, 66, 235, 59, 190, 95, 70, 119, 62, 56, 143, 22, 62, 198, 40, 109, 62, 217, 178, 231, 62, 99, 21, 13, 63, 118, 68, 163, 190, 16, 125, 72, 189, 118, 120, 50, 60, 104, 1, 40, 190, 54, 81, 148, 190, 237, 133, 242, 189, 41, 113, 136, 190, 228, 215, 214, 190, 115, 164, 25, 62, 175, 32, 234, 189, 138, 32, 45, 61, 238, 250, 17, 62, 65, 66, 29, 62, 235, 245, 164, 190, 246, 219, 157, 190, 190, 112, 151, 62, 62, 127, 238, 62, 209, 177, 161, 62, 219, 4, 207, 62, 94, 67, 116, 190, 237, 19, 224, 189, 202, 6, 197, 61, 222, 224, 7, 191, 246, 196, 8, 191, 108, 210, 209, 62, 175, 26, 197, 188, 37, 226, 150, 190, 110, 42, 129, 62, 194, 223, 35, 190, 121, 35, 21, 62, 188, 18, 232, 61, 198, 234, 40, 191, 39, 164, 157, 61, 86, 221, 225, 61, 150, 81, 7, 190, 25, 60, 201, 61, 77, 33, 2, 191, 34, 139, 199, 62, 198, 81, 34, 189, 66, 186, 169, 60, 182, 212, 210, 189, 98, 10, 156, 190, 162, 55, 165, 61, 220, 99, 79, 62, 216, 10, 224, 62, 44, 176, 9, 190, 27, 128, 157, 60, 47, 159, 211, 189, 63, 33, 208, 60, 175, 48, 168, 189, 115, 106, 195, 188, 151, 10, 21, 62, 96, 48, 180, 61, 214, 238, 54, 188, 141, 22, 72, 190, 58, 247, 222, 61, 76, 189, 191, 61, 115, 43, 43, 190, 119, 226, 10, 62, 206, 156, 89, 190, 17, 82, 90, 61, 71, 204, 37, 190, 33, 43, 31, 190, 152, 29, 96, 189, 71, 156, 251, 61, 209, 59, 113, 61, 51, 211, 60, 190, 230, 83, 177, 61, 111, 165, 199, 189, 164, 61, 74, 190, 138, 150, 145, 189, 212, 71, 6, 190, 71, 223, 172, 189, 171, 153, 38, 189, 64, 36, 32, 61, 114, 48, 1, 62, 175, 174, 4, 187, 217, 106, 130, 62, 121, 151, 147, 62, 73, 80, 236, 188, 203, 195, 138, 190, 149, 172, 33, 60, 146, 123, 70, 189, 105, 120, 203, 190, 250, 44, 148, 191, 109, 155, 43, 190, 177, 134, 77, 190, 38, 121, 71, 62, 156, 75, 193, 190, 82, 96, 144, 62, 205, 189, 46, 190, 88, 0, 1, 62, 209, 247, 14, 63, 64, 178, 20, 189, 43, 36, 177, 188, 129, 115, 9, 62, 223, 8, 29, 62, 34, 51, 156, 62, 24, 167, 207, 188, 14, 100, 28, 189, 216, 171, 47, 189, 61, 133, 182, 62, 144, 167, 189, 61, 133, 187, 1, 61, 82, 202, 42, 62, 110, 165, 128, 190, 93, 51, 91, 191, 73, 104, 165, 62, 79, 235, 130, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 227, 242, 61, 107, 82, 147, 61, 31, 102, 135, 189, 19, 26, 6, 61, 169, 217, 220, 62, 184, 232, 89, 62, 4, 27, 72, 188, 187, 139, 178, 61, 181, 77, 11, 62, 119, 152, 148, 62, 218, 36, 2, 190, 9, 204, 182, 62, 33, 86, 99, 60, 255, 66, 211, 60, 167, 183, 209, 62, 91, 200, 3, 62, 155, 166, 242, 61, 44, 123, 18, 62, 78, 39, 83, 62, 209, 193, 116, 61, 48, 197, 42, 62, 19, 20, 23, 62, 75, 14, 48, 189, 17, 176, 168, 62, 25, 171, 253, 189, 133, 170, 111, 62, 229, 50, 70, 62, 92, 188, 91, 61, 255, 0, 247, 189, 63, 196, 109, 62, 49, 48, 48, 190, 204, 54, 86, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {26, 255, 72, 191, 144, 188, 21, 191, 55, 29, 204, 62, 62, 67, 63, 191, 14, 41, 120, 62, 13, 71, 223, 191, 198, 152, 52, 62, 2, 184, 193, 190, 98, 234, 216, 62, 178, 141, 68, 63, 137, 209, 235, 190, 134, 2, 33, 191, 143, 129, 158, 61, 113, 126, 107, 188, 117, 141, 143, 62, 64, 119, 229, 190, 244, 248, 44, 63, 243, 123, 174, 62, 126, 232, 157, 190, 45, 103, 183, 191, 251, 52, 40, 62, 118, 55, 70, 63, 199, 31, 30, 190, 85, 27, 59, 62, 28, 135, 147, 63, 123, 244, 118, 60, 59, 209, 211, 60, 132, 252, 71, 191, 122, 196, 190, 190, 18, 201, 20, 63, 77, 189, 11, 190, 17, 224, 183, 190, 116, 115, 204, 59, 181, 72, 136, 62, 127, 39, 202, 61, 131, 187, 36, 58, 86, 45, 200, 190, 54, 196, 175, 62, 82, 234, 176, 189, 151, 210, 236, 188, 81, 71, 81, 188, 3, 190, 231, 61, 171, 94, 225, 189, 172, 48, 101, 190, 229, 12, 42, 189, 228, 70, 130, 189, 108, 86, 90, 190, 103, 129, 125, 189, 36, 101, 53, 62, 168, 87, 139, 62, 69, 160, 143, 62, 23, 225, 132, 62, 255, 151, 251, 190, 203, 91, 21, 62, 214, 219, 152, 61, 181, 132, 192, 188, 191, 107, 195, 62, 121, 142, 46, 190, 135, 96, 136, 190, 165, 141, 126, 62, 159, 164, 103, 189, 52, 67, 246, 189, 211, 154, 207, 61, 40, 98, 134, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {217, 205, 11, 62, 131, 100, 235, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {194, 122, 167, 63, 220, 120, 166, 62, 231, 57, 33, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {18, 20, 6, 192, 207, 71, 153, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0075/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}