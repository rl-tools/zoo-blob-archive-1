// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 72, 66, 63, 163, 41, 42, 63, 193, 193, 165, 62, 102, 95, 131, 62, 181, 59, 22, 63, 121, 253, 7, 62, 6, 246, 66, 191, 64, 134, 159, 190, 177, 109, 30, 60, 31, 131, 85, 63, 235, 152, 150, 191, 192, 212, 159, 190, 100, 51, 253, 62, 145, 188, 80, 191, 196, 104, 37, 191, 222, 133, 100, 190, 107, 211, 115, 63, 204, 152, 46, 59, 58, 200, 15, 191, 101, 95, 115, 63, 169, 84, 252, 189, 33, 51, 34, 191, 98, 41, 168, 63, 95, 173, 19, 63, 33, 74, 170, 188, 28, 190, 154, 63, 231, 67, 0, 63, 178, 162, 23, 191, 71, 255, 11, 63, 200, 250, 200, 62, 45, 189, 60, 62, 36, 79, 12, 189, 172, 62, 100, 191, 97, 140, 175, 62, 247, 201, 173, 191, 199, 152, 193, 60, 79, 62, 43, 191, 52, 148, 21, 191, 207, 55, 73, 189, 158, 210, 142, 62, 175, 125, 130, 62, 32, 154, 177, 62, 44, 91, 57, 190, 202, 77, 216, 190, 145, 76, 191, 62, 184, 100, 236, 190, 247, 117, 191, 191, 108, 79, 95, 190, 125, 242, 69, 190, 77, 37, 113, 62, 183, 241, 151, 62, 4, 73, 62, 63, 166, 99, 149, 191, 110, 35, 168, 190, 41, 161, 17, 191, 76, 81, 37, 62, 184, 190, 192, 190, 108, 105, 75, 62, 1, 235, 58, 63, 229, 53, 180, 190, 50, 78, 25, 189, 251, 242, 40, 190, 117, 76, 56, 189, 55, 17, 19, 63, 250, 31, 83, 190, 18, 5, 56, 191, 188, 18, 85, 190, 136, 127, 5, 60, 169, 40, 136, 189, 194, 31, 63, 191, 240, 14, 93, 190, 182, 71, 5, 191, 58, 149, 123, 63, 126, 65, 155, 62, 127, 182, 204, 61, 24, 209, 180, 62, 250, 191, 16, 63, 154, 202, 167, 189, 131, 19, 225, 61, 245, 104, 245, 62, 149, 242, 242, 190, 189, 160, 32, 63, 193, 83, 140, 62, 97, 163, 238, 62, 84, 142, 168, 190, 224, 59, 2, 62, 30, 34, 41, 63, 152, 162, 101, 191, 196, 214, 119, 63, 170, 225, 39, 63, 175, 133, 56, 63, 111, 190, 17, 191, 150, 152, 195, 61, 86, 149, 45, 63, 119, 74, 178, 190, 115, 205, 6, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {13, 127, 252, 190, 252, 1, 34, 62, 28, 254, 82, 62, 25, 156, 159, 190, 192, 192, 237, 190, 91, 197, 131, 62, 115, 141, 20, 190, 159, 237, 44, 62, 17, 224, 30, 63, 105, 119, 214, 190, 202, 58, 103, 60, 209, 128, 39, 190, 66, 141, 92, 62, 188, 178, 199, 189, 135, 22, 243, 62, 124, 130, 13, 62, 205, 242, 115, 63, 88, 161, 200, 190, 248, 5, 124, 188, 90, 20, 198, 187, 162, 224, 38, 63, 84, 216, 220, 62, 196, 103, 211, 62, 165, 142, 184, 190, 42, 157, 231, 189, 99, 36, 65, 62, 201, 249, 157, 188, 129, 75, 8, 62, 42, 158, 77, 190, 145, 196, 237, 189, 164, 249, 154, 62, 95, 223, 164, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {153, 96, 42, 190, 74, 56, 220, 190, 251, 75, 58, 188, 236, 234, 250, 61, 80, 10, 254, 61, 211, 68, 214, 189, 231, 78, 5, 190, 162, 205, 51, 189, 214, 98, 137, 190, 146, 27, 201, 185, 174, 14, 12, 190, 79, 112, 190, 62, 125, 26, 50, 61, 87, 193, 3, 190, 19, 95, 145, 189, 245, 22, 36, 62, 53, 112, 155, 190, 204, 95, 103, 62, 195, 47, 6, 190, 248, 45, 234, 190, 231, 136, 189, 188, 131, 221, 117, 189, 16, 151, 20, 190, 146, 93, 55, 190, 187, 118, 203, 190, 48, 143, 184, 61, 203, 196, 60, 190, 117, 108, 2, 190, 38, 114, 241, 188, 154, 160, 88, 190, 5, 92, 229, 61, 181, 17, 255, 61, 105, 15, 165, 61, 235, 123, 178, 61, 95, 135, 11, 190, 200, 123, 140, 191, 150, 183, 93, 190, 21, 145, 145, 62, 130, 1, 226, 62, 60, 118, 165, 189, 3, 45, 195, 62, 245, 172, 113, 188, 66, 237, 84, 190, 58, 160, 169, 190, 30, 246, 155, 190, 121, 125, 98, 61, 110, 156, 208, 188, 149, 196, 45, 191, 130, 197, 241, 61, 129, 74, 140, 191, 122, 30, 196, 62, 91, 60, 33, 62, 41, 114, 198, 189, 52, 9, 132, 62, 120, 220, 27, 62, 239, 114, 201, 189, 38, 48, 208, 62, 58, 0, 150, 62, 196, 73, 157, 189, 23, 170, 230, 61, 10, 230, 64, 62, 196, 171, 2, 61, 127, 41, 8, 62, 86, 248, 116, 189, 2, 43, 113, 190, 237, 183, 139, 190, 69, 44, 143, 190, 212, 62, 68, 62, 79, 119, 96, 62, 42, 8, 132, 189, 95, 196, 183, 190, 20, 116, 19, 62, 149, 198, 84, 189, 113, 129, 157, 61, 159, 103, 131, 61, 27, 61, 57, 61, 77, 29, 253, 190, 30, 94, 165, 61, 14, 39, 17, 62, 249, 166, 115, 190, 55, 173, 38, 62, 186, 235, 166, 61, 76, 137, 148, 189, 97, 119, 255, 189, 88, 211, 41, 189, 194, 160, 11, 62, 114, 145, 41, 61, 205, 132, 95, 190, 212, 54, 203, 61, 177, 66, 11, 60, 10, 27, 148, 61, 137, 201, 142, 190, 195, 29, 7, 62, 223, 16, 24, 61, 107, 253, 137, 61, 187, 42, 207, 62, 178, 29, 196, 189, 89, 150, 51, 62, 247, 87, 223, 188, 193, 250, 111, 191, 6, 120, 166, 190, 41, 83, 92, 190, 55, 185, 36, 190, 131, 52, 171, 190, 9, 118, 76, 190, 233, 178, 68, 62, 86, 214, 130, 62, 195, 149, 95, 190, 219, 195, 15, 61, 222, 156, 148, 188, 132, 24, 17, 62, 130, 99, 55, 190, 225, 14, 144, 61, 106, 121, 76, 191, 147, 16, 2, 61, 150, 150, 253, 61, 122, 177, 26, 62, 106, 235, 75, 62, 227, 186, 45, 190, 8, 169, 91, 189, 45, 125, 175, 62, 40, 175, 18, 189, 223, 244, 29, 61, 112, 6, 139, 62, 153, 89, 60, 62, 118, 58, 55, 189, 95, 208, 192, 61, 205, 161, 225, 189, 185, 69, 211, 61, 45, 184, 22, 190, 85, 240, 190, 61, 19, 60, 200, 60, 160, 169, 111, 62, 244, 234, 37, 62, 147, 226, 12, 190, 56, 62, 90, 61, 201, 166, 81, 62, 97, 229, 41, 190, 128, 43, 119, 190, 60, 242, 39, 62, 240, 218, 252, 61, 243, 151, 124, 60, 55, 196, 89, 61, 46, 81, 41, 190, 205, 102, 60, 62, 140, 72, 114, 189, 215, 232, 222, 188, 157, 18, 10, 61, 209, 213, 159, 62, 207, 174, 176, 61, 212, 101, 79, 62, 173, 26, 146, 188, 20, 98, 36, 62, 211, 120, 221, 61, 94, 181, 121, 190, 44, 243, 129, 188, 221, 66, 38, 190, 48, 216, 139, 62, 245, 218, 203, 62, 116, 229, 201, 186, 46, 19, 65, 62, 83, 59, 27, 63, 120, 231, 160, 62, 188, 39, 134, 191, 224, 86, 177, 189, 129, 90, 231, 188, 254, 236, 199, 61, 167, 105, 208, 191, 105, 123, 212, 190, 55, 113, 137, 62, 28, 198, 37, 61, 50, 47, 251, 190, 98, 174, 108, 62, 203, 57, 153, 61, 101, 181, 113, 61, 33, 126, 38, 63, 75, 9, 138, 190, 238, 38, 229, 190, 88, 92, 160, 190, 30, 115, 17, 62, 97, 227, 200, 58, 184, 175, 37, 61, 165, 116, 134, 62, 151, 224, 240, 61, 156, 215, 40, 63, 200, 82, 27, 59, 99, 39, 135, 62, 210, 184, 31, 62, 14, 218, 228, 62, 49, 200, 204, 191, 112, 44, 165, 190, 47, 236, 183, 190, 144, 25, 109, 61, 215, 157, 109, 189, 113, 195, 160, 61, 135, 39, 121, 61, 70, 89, 3, 190, 29, 118, 220, 61, 48, 81, 17, 62, 198, 0, 5, 190, 162, 102, 4, 189, 160, 42, 205, 189, 158, 251, 16, 62, 38, 129, 18, 190, 160, 213, 70, 190, 92, 141, 34, 190, 224, 233, 83, 189, 62, 163, 70, 190, 232, 199, 120, 189, 210, 140, 201, 61, 71, 26, 218, 61, 129, 8, 97, 190, 223, 76, 140, 189, 168, 3, 30, 189, 214, 240, 26, 62, 64, 198, 47, 190, 69, 140, 229, 189, 7, 25, 240, 188, 36, 4, 97, 190, 174, 52, 25, 62, 236, 87, 23, 189, 45, 85, 19, 62, 237, 8, 40, 190, 132, 78, 247, 189, 181, 118, 40, 190, 49, 79, 35, 189, 225, 152, 108, 61, 212, 159, 48, 191, 189, 187, 109, 190, 21, 6, 218, 61, 166, 221, 108, 62, 167, 218, 5, 62, 44, 52, 76, 62, 236, 129, 144, 189, 6, 25, 150, 61, 214, 105, 40, 62, 124, 250, 162, 190, 79, 238, 79, 60, 53, 243, 153, 188, 242, 101, 163, 190, 44, 96, 72, 62, 136, 55, 136, 191, 225, 71, 152, 62, 164, 7, 155, 59, 166, 134, 146, 188, 12, 89, 58, 62, 88, 60, 235, 189, 219, 155, 200, 190, 232, 249, 228, 61, 87, 142, 16, 62, 47, 55, 99, 61, 125, 89, 49, 189, 46, 32, 38, 61, 115, 188, 29, 62, 182, 16, 30, 62, 37, 232, 247, 61, 56, 199, 168, 190, 116, 209, 155, 190, 124, 84, 25, 189, 54, 5, 91, 62, 67, 229, 28, 61, 53, 255, 156, 62, 221, 69, 38, 62, 49, 88, 128, 61, 59, 93, 137, 62, 75, 122, 46, 191, 149, 71, 43, 189, 58, 195, 186, 62, 74, 163, 45, 190, 241, 5, 175, 190, 97, 111, 53, 62, 144, 31, 198, 190, 4, 157, 153, 62, 172, 17, 152, 62, 72, 13, 180, 60, 98, 65, 104, 61, 153, 10, 134, 62, 42, 93, 153, 60, 92, 246, 157, 189, 101, 121, 62, 190, 173, 185, 157, 189, 166, 191, 169, 61, 88, 230, 26, 190, 206, 87, 233, 189, 119, 211, 135, 190, 62, 182, 38, 61, 36, 87, 77, 62, 177, 109, 166, 62, 31, 143, 236, 189, 212, 118, 60, 189, 156, 135, 155, 62, 13, 113, 16, 63, 207, 45, 101, 190, 226, 172, 155, 62, 238, 50, 58, 61, 20, 94, 98, 61, 91, 133, 189, 61, 180, 197, 169, 190, 238, 115, 41, 191, 191, 131, 50, 190, 19, 110, 251, 61, 114, 32, 44, 190, 163, 39, 117, 62, 166, 195, 73, 62, 121, 159, 170, 62, 83, 24, 30, 62, 221, 119, 8, 63, 54, 9, 207, 191, 157, 56, 113, 62, 10, 147, 37, 191, 162, 96, 124, 61, 234, 66, 132, 62, 108, 221, 238, 190, 115, 134, 232, 190, 12, 101, 84, 191, 71, 83, 194, 188, 250, 69, 147, 190, 120, 118, 253, 61, 17, 226, 194, 189, 234, 117, 249, 190, 131, 69, 96, 188, 153, 238, 66, 62, 236, 74, 179, 190, 28, 145, 129, 189, 60, 32, 13, 191, 7, 72, 151, 189, 221, 33, 175, 189, 196, 92, 53, 190, 178, 73, 26, 62, 32, 66, 5, 62, 194, 109, 172, 189, 95, 24, 39, 62, 4, 29, 107, 190, 180, 244, 10, 61, 104, 214, 150, 188, 114, 88, 135, 191, 43, 136, 100, 62, 236, 185, 91, 190, 190, 98, 106, 190, 38, 121, 167, 190, 103, 139, 154, 60, 141, 232, 118, 188, 4, 2, 205, 60, 46, 173, 249, 190, 53, 170, 131, 62, 214, 63, 52, 62, 68, 116, 27, 191, 69, 146, 179, 62, 120, 245, 165, 189, 115, 6, 146, 189, 154, 17, 224, 61, 209, 94, 143, 62, 13, 234, 173, 190, 91, 249, 35, 62, 190, 121, 25, 191, 232, 175, 107, 191, 47, 232, 161, 190, 19, 69, 103, 62, 62, 107, 205, 62, 122, 45, 243, 188, 31, 118, 84, 62, 150, 247, 13, 190, 55, 213, 210, 189, 70, 66, 164, 61, 211, 219, 246, 190, 133, 42, 213, 189, 238, 133, 148, 61, 202, 131, 141, 191, 19, 154, 242, 61, 106, 33, 132, 191, 165, 64, 157, 61, 238, 218, 229, 188, 43, 61, 24, 62, 138, 221, 63, 61, 206, 233, 173, 187, 239, 215, 3, 190, 16, 157, 66, 62, 17, 4, 154, 62, 20, 11, 188, 61, 250, 40, 123, 189, 215, 164, 132, 189, 20, 224, 4, 189, 76, 167, 154, 62, 89, 142, 163, 62, 13, 134, 198, 189, 162, 203, 177, 59, 71, 88, 57, 190, 210, 133, 238, 61, 215, 71, 71, 188, 74, 63, 49, 61, 177, 7, 44, 190, 79, 22, 194, 189, 102, 237, 47, 189, 63, 151, 128, 189, 67, 39, 93, 189, 24, 127, 177, 189, 128, 241, 71, 189, 6, 230, 73, 190, 158, 218, 33, 190, 240, 31, 166, 189, 158, 1, 10, 62, 94, 168, 21, 62, 225, 98, 49, 190, 203, 27, 202, 189, 232, 120, 187, 61, 76, 184, 249, 189, 139, 150, 199, 61, 107, 182, 170, 189, 164, 26, 136, 60, 172, 175, 120, 60, 195, 157, 220, 189, 7, 199, 13, 187, 76, 91, 39, 190, 58, 52, 45, 190, 92, 95, 31, 189, 137, 220, 68, 190, 108, 179, 37, 60, 79, 5, 164, 189, 225, 135, 135, 189, 221, 149, 39, 190, 231, 45, 13, 62, 100, 161, 47, 190, 104, 138, 41, 62, 122, 74, 158, 188, 195, 37, 32, 62, 154, 28, 22, 190, 246, 88, 224, 61, 48, 104, 59, 61, 29, 18, 190, 59, 137, 116, 24, 190, 150, 31, 39, 190, 237, 100, 21, 190, 168, 51, 249, 189, 91, 139, 29, 62, 87, 54, 137, 61, 16, 23, 185, 188, 172, 239, 113, 189, 42, 77, 200, 189, 239, 223, 210, 189, 130, 18, 151, 186, 154, 76, 134, 189, 96, 40, 223, 189, 42, 99, 207, 189, 139, 167, 226, 189, 90, 110, 173, 187, 0, 152, 16, 62, 181, 56, 50, 190, 49, 72, 34, 190, 63, 85, 20, 190, 11, 48, 9, 190, 54, 180, 117, 62, 96, 181, 13, 62, 76, 173, 183, 189, 209, 1, 127, 62, 63, 76, 232, 61, 151, 0, 186, 62, 140, 126, 201, 61, 164, 248, 72, 190, 134, 208, 142, 190, 168, 142, 14, 190, 236, 190, 208, 188, 100, 244, 60, 60, 186, 76, 76, 61, 74, 117, 240, 189, 92, 189, 153, 62, 14, 3, 153, 189, 55, 143, 85, 61, 228, 210, 180, 60, 75, 80, 32, 62, 179, 24, 112, 188, 7, 219, 115, 62, 8, 0, 95, 190, 215, 100, 209, 62, 143, 254, 32, 62, 93, 23, 197, 60, 62, 133, 88, 190, 30, 228, 210, 189, 72, 112, 179, 61, 62, 73, 44, 62, 44, 38, 249, 61, 92, 210, 141, 61, 110, 17, 34, 60, 83, 77, 121, 190, 79, 231, 68, 191, 52, 39, 147, 190, 31, 183, 4, 190, 169, 146, 195, 62, 165, 203, 91, 61, 166, 254, 36, 62, 151, 14, 155, 61, 184, 253, 45, 190, 124, 185, 8, 190, 100, 113, 104, 190, 229, 157, 239, 61, 34, 125, 10, 62, 217, 182, 98, 191, 245, 205, 34, 62, 33, 4, 104, 191, 96, 125, 5, 62, 115, 7, 132, 62, 146, 67, 243, 188, 70, 55, 130, 62, 121, 111, 166, 189, 233, 138, 236, 188, 70, 49, 79, 62, 127, 223, 171, 62, 253, 2, 47, 61, 35, 238, 95, 62, 153, 49, 196, 189, 14, 112, 23, 190, 122, 73, 138, 61, 109, 218, 97, 189, 21, 118, 155, 61, 223, 121, 161, 61, 194, 245, 252, 188, 244, 81, 15, 63, 219, 72, 145, 61, 194, 121, 64, 62, 54, 27, 45, 190, 10, 74, 113, 62, 21, 197, 152, 62, 167, 57, 11, 188, 104, 147, 141, 191, 6, 155, 60, 189, 158, 174, 198, 61, 39, 95, 131, 190, 194, 95, 121, 62, 155, 48, 226, 62, 52, 109, 84, 62, 155, 9, 53, 63, 210, 235, 118, 190, 1, 226, 252, 190, 173, 159, 24, 62, 126, 152, 83, 191, 235, 178, 19, 189, 232, 6, 194, 61, 146, 246, 181, 189, 96, 16, 172, 189, 73, 25, 34, 191, 8, 31, 98, 189, 239, 14, 131, 190, 9, 169, 98, 62, 77, 14, 135, 62, 184, 35, 187, 189, 123, 198, 3, 191, 55, 224, 229, 190, 252, 71, 139, 189, 157, 157, 219, 62, 142, 44, 141, 62, 81, 122, 127, 62, 78, 234, 5, 62, 8, 131, 136, 62, 9, 138, 98, 61, 81, 232, 129, 190, 197, 81, 101, 190, 8, 186, 246, 61, 246, 97, 197, 189, 99, 30, 113, 190, 162, 195, 159, 62, 182, 59, 182, 190, 183, 4, 77, 62, 10, 92, 223, 61, 221, 104, 175, 59, 216, 110, 80, 188, 136, 134, 49, 62, 90, 153, 129, 60, 201, 50, 197, 188, 245, 189, 166, 189, 7, 181, 136, 62, 111, 241, 123, 61, 225, 236, 110, 190, 134, 108, 85, 190, 67, 60, 82, 190, 41, 218, 192, 60, 203, 161, 25, 189, 95, 101, 237, 62, 190, 106, 84, 62, 163, 3, 216, 61, 235, 242, 104, 62, 142, 203, 27, 191, 174, 119, 235, 190, 60, 29, 135, 190, 83, 131, 156, 61, 83, 54, 152, 189, 150, 84, 107, 190, 219, 233, 163, 188, 80, 101, 21, 62, 120, 105, 106, 190, 113, 93, 56, 189, 197, 10, 62, 189, 96, 73, 127, 62, 238, 105, 196, 187, 203, 244, 98, 189, 52, 17, 3, 191, 30, 254, 114, 188, 187, 80, 63, 62, 105, 134, 41, 61, 223, 217, 75, 61, 43, 179, 162, 61, 125, 127, 164, 62, 227, 231, 193, 62, 129, 72, 41, 189, 240, 105, 25, 62, 206, 22, 17, 62, 148, 134, 195, 60, 18, 227, 234, 61, 73, 230, 66, 61, 142, 36, 232, 190, 136, 175, 219, 190, 245, 244, 160, 190, 203, 188, 6, 62, 89, 115, 150, 62, 94, 193, 252, 61, 149, 174, 148, 62, 202, 121, 158, 60, 163, 150, 215, 61, 223, 63, 132, 189, 188, 86, 62, 190, 129, 247, 23, 190, 181, 239, 194, 62, 113, 148, 60, 62, 155, 15, 221, 190, 234, 151, 126, 189, 31, 213, 129, 62, 199, 246, 175, 61, 68, 131, 154, 62, 6, 155, 96, 190, 116, 247, 212, 186, 230, 217, 150, 62, 66, 143, 254, 189, 159, 7, 136, 62, 154, 11, 91, 191, 211, 135, 137, 191, 23, 49, 212, 61, 214, 131, 76, 190, 181, 157, 3, 191, 42, 229, 2, 190, 175, 242, 75, 62, 74, 231, 198, 188, 91, 51, 60, 62, 24, 153, 14, 61, 214, 12, 15, 61, 153, 42, 175, 190, 218, 242, 23, 190, 93, 71, 65, 190, 234, 150, 92, 62, 223, 177, 235, 61, 222, 10, 78, 190, 9, 3, 181, 60, 103, 96, 128, 190, 120, 192, 13, 61, 163, 46, 236, 189, 254, 46, 154, 190, 156, 28, 230, 60, 53, 238, 232, 189, 47, 63, 44, 191, 121, 30, 35, 59, 104, 209, 89, 190, 119, 135, 23, 188, 37, 192, 155, 62, 81, 15, 129, 61, 158, 15, 143, 62, 83, 37, 157, 189, 146, 58, 105, 62, 6, 145, 241, 62, 243, 252, 151, 62, 179, 32, 184, 61, 11, 3, 252, 61, 128, 206, 233, 188, 143, 7, 115, 189, 189, 196, 115, 62, 118, 23, 189, 61, 65, 229, 218, 189, 218, 211, 149, 189, 224, 157, 229, 190, 113, 244, 249, 62, 87, 107, 17, 190, 139, 244, 161, 62, 49, 145, 211, 62, 128, 151, 229, 61, 15, 217, 153, 62, 26, 109, 183, 191, 18, 211, 172, 61, 24, 136, 2, 191, 117, 69, 132, 189, 24, 65, 163, 190, 58, 21, 231, 190, 166, 165, 220, 190, 67, 230, 93, 189, 141, 1, 230, 61, 155, 16, 25, 190, 179, 39, 190, 62, 0, 129, 222, 188, 16, 153, 173, 187, 170, 238, 76, 62, 117, 199, 183, 189, 231, 134, 227, 189, 102, 123, 196, 61, 24, 44, 131, 62, 176, 230, 172, 189, 251, 252, 74, 191, 13, 96, 0, 191, 0, 70, 177, 190, 121, 1, 103, 190, 131, 126, 251, 60, 3, 212, 12, 62, 199, 117, 81, 61, 52, 199, 171, 189, 244, 195, 32, 62, 96, 233, 172, 189, 216, 162, 138, 61, 67, 236, 223, 61, 122, 225, 12, 190, 163, 181, 72, 189, 217, 212, 50, 190, 165, 115, 2, 62, 83, 33, 75, 190, 87, 222, 9, 190, 219, 251, 82, 190, 112, 91, 168, 189, 131, 177, 64, 190, 231, 47, 231, 61, 155, 100, 29, 62, 100, 247, 251, 59, 19, 201, 92, 61, 108, 14, 58, 189, 142, 221, 201, 188, 49, 138, 226, 61, 12, 163, 18, 62, 243, 238, 129, 190, 248, 52, 153, 189, 94, 238, 72, 61, 194, 34, 139, 189, 177, 119, 29, 62, 122, 126, 172, 187, 165, 212, 41, 190, 167, 134, 136, 190, 119, 245, 72, 190, 1, 180, 60, 61, 248, 19, 13, 62, 29, 207, 83, 61, 90, 122, 122, 62, 125, 223, 228, 61, 124, 189, 56, 62, 178, 41, 168, 61, 243, 179, 71, 190, 237, 240, 2, 189, 116, 16, 213, 59, 242, 247, 14, 61, 207, 114, 58, 190, 108, 20, 132, 62, 91, 39, 212, 190, 68, 222, 94, 62, 147, 230, 150, 61, 3, 160, 127, 61, 101, 230, 133, 62, 122, 67, 134, 62, 61, 227, 159, 61, 18, 228, 173, 187, 76, 122, 102, 61, 162, 175, 79, 190, 148, 2, 95, 62, 9, 169, 27, 190, 163, 8, 135, 190, 129, 133, 149, 190, 117, 255, 247, 59, 73, 248, 41, 62, 64, 203, 172, 189, 119, 128, 201, 62, 128, 197, 72, 62, 86, 154, 197, 190, 45, 135, 190, 190, 168, 29, 88, 190, 197, 158, 8, 62, 239, 214, 73, 189, 51, 25, 191, 189, 163, 114, 22, 62, 60, 146, 102, 190, 195, 163, 12, 190, 35, 11, 31, 191, 42, 193, 196, 190, 189, 116, 123, 62, 157, 37, 145, 190, 239, 116, 53, 190, 213, 228, 22, 190, 146, 41, 191, 189, 242, 77, 182, 62, 141, 196, 226, 62, 77, 211, 219, 190, 73, 241, 108, 190, 3, 73, 24, 190, 179, 157, 248, 189, 142, 190, 112, 62, 114, 39, 143, 62, 82, 97, 161, 62, 203, 230, 133, 62, 99, 133, 248, 60, 150, 74, 213, 190, 255, 2, 58, 62, 173, 218, 157, 190, 114, 96, 193, 188, 148, 154, 31, 62, 95, 116, 29, 62, 129, 37, 135, 190, 31, 187, 56, 61, 173, 194, 126, 62, 214, 140, 243, 61, 200, 253, 3, 62, 85, 181, 32, 61, 91, 96, 129, 189, 252, 78, 158, 189, 73, 25, 10, 190, 244, 230, 129, 61, 243, 57, 189, 189, 58, 92, 73, 190, 220, 17, 173, 61, 85, 169, 148, 60, 195, 9, 145, 189, 124, 50, 72, 190, 183, 101, 193, 61, 195, 138, 98, 62, 176, 109, 206, 61, 1, 180, 225, 59, 175, 199, 178, 189, 75, 130, 54, 62, 99, 174, 130, 62, 142, 102, 111, 61, 107, 148, 177, 61, 27, 183, 113, 189, 194, 227, 218, 188, 35, 22, 190, 189, 12, 137, 192, 189, 134, 52, 152, 190, 118, 93, 2, 190, 72, 78, 253, 60, 194, 241, 137, 190, 229, 41, 23, 189, 218, 193, 35, 190, 152, 208, 181, 189, 226, 234, 26, 187, 29, 245, 224, 189, 208, 240, 252, 189, 108, 119, 105, 61, 133, 69, 29, 62, 33, 163, 247, 189, 215, 134, 10, 188, 240, 69, 244, 184, 208, 181, 229, 189, 213, 182, 135, 61, 109, 102, 140, 190, 176, 95, 213, 61, 254, 176, 217, 189, 85, 245, 70, 61, 225, 6, 16, 62, 80, 39, 126, 189, 235, 197, 136, 61, 166, 129, 240, 60, 140, 206, 9, 61, 2, 157, 6, 190, 139, 7, 230, 61, 88, 208, 136, 61, 68, 124, 66, 190, 182, 99, 52, 62, 22, 132, 132, 61, 12, 237, 139, 62, 50, 194, 213, 62, 162, 180, 62, 62, 240, 159, 17, 191, 14, 105, 213, 190, 44, 91, 151, 190, 177, 97, 153, 189, 167, 180, 47, 191, 21, 208, 22, 190, 196, 121, 155, 188, 76, 131, 183, 62, 240, 55, 229, 190, 118, 255, 143, 62, 42, 170, 148, 61, 147, 219, 114, 61, 188, 48, 52, 62, 245, 239, 210, 189, 21, 106, 44, 191, 217, 115, 218, 190, 95, 229, 141, 187, 200, 27, 93, 189, 228, 85, 199, 61, 29, 13, 228, 60, 136, 5, 128, 62, 14, 44, 210, 62, 189, 119, 37, 62, 178, 118, 172, 62, 80, 237, 226, 62, 188, 75, 51, 62, 164, 182, 81, 191, 24, 120, 142, 61, 77, 123, 250, 190, 130, 73, 176, 188, 15, 229, 28, 187, 197, 109, 46, 189, 150, 81, 13, 63, 10, 31, 29, 63, 144, 251, 127, 189, 199, 221, 228, 62, 203, 52, 136, 61, 132, 247, 69, 62, 117, 24, 246, 61, 220, 204, 122, 190, 72, 103, 40, 63, 252, 24, 248, 189, 126, 128, 90, 190, 198, 105, 111, 62, 164, 24, 63, 61, 126, 208, 76, 62, 95, 130, 236, 62, 116, 60, 217, 62, 174, 155, 117, 190, 46, 192, 183, 189, 108, 102, 151, 60, 26, 215, 49, 190, 57, 199, 195, 190, 52, 209, 1, 190, 215, 225, 129, 190, 218, 125, 164, 190, 185, 156, 2, 62, 184, 178, 229, 189, 93, 185, 13, 61, 181, 162, 3, 62, 200, 26, 49, 62, 180, 126, 128, 190, 81, 169, 165, 190, 125, 129, 72, 62, 81, 35, 240, 62, 45, 109, 219, 61, 130, 110, 136, 62, 201, 7, 45, 190, 244, 8, 184, 189, 100, 180, 28, 62, 182, 22, 225, 190, 97, 162, 41, 191, 41, 38, 138, 62, 169, 247, 1, 190, 10, 127, 136, 190, 97, 150, 113, 62, 196, 82, 100, 190, 90, 183, 26, 62, 124, 10, 223, 61, 182, 86, 246, 190, 32, 208, 41, 189, 138, 18, 228, 61, 192, 56, 27, 190, 114, 201, 162, 61, 8, 59, 21, 191, 201, 198, 191, 62, 124, 140, 172, 189, 37, 184, 64, 190, 50, 89, 231, 189, 185, 128, 163, 190, 248, 91, 46, 62, 120, 208, 78, 62, 156, 36, 227, 62, 44, 176, 9, 190, 27, 128, 157, 60, 47, 159, 211, 189, 63, 33, 208, 60, 175, 48, 168, 189, 115, 106, 195, 188, 151, 10, 21, 62, 96, 48, 180, 61, 214, 238, 54, 188, 141, 22, 72, 190, 58, 247, 222, 61, 76, 189, 191, 61, 115, 43, 43, 190, 119, 226, 10, 62, 206, 156, 89, 190, 17, 82, 90, 61, 71, 204, 37, 190, 33, 43, 31, 190, 152, 29, 96, 189, 71, 156, 251, 61, 209, 59, 113, 61, 51, 211, 60, 190, 230, 83, 177, 61, 111, 165, 199, 189, 164, 61, 74, 190, 138, 150, 145, 189, 212, 71, 6, 190, 71, 223, 172, 189, 171, 153, 38, 189, 64, 36, 32, 61, 114, 48, 1, 62, 175, 174, 4, 187, 5, 92, 139, 62, 13, 93, 156, 62, 162, 103, 209, 188, 50, 215, 92, 190, 124, 190, 82, 61, 206, 108, 25, 189, 238, 135, 198, 190, 235, 21, 40, 191, 192, 192, 89, 190, 27, 201, 237, 190, 209, 158, 84, 62, 169, 138, 66, 190, 108, 226, 82, 62, 193, 203, 22, 190, 155, 143, 71, 62, 85, 19, 215, 62, 247, 2, 212, 188, 196, 138, 87, 61, 28, 29, 252, 61, 246, 115, 49, 62, 165, 144, 147, 62, 155, 22, 207, 188, 95, 39, 88, 189, 72, 241, 29, 189, 104, 240, 197, 62, 229, 60, 240, 61, 134, 156, 109, 61, 42, 6, 83, 62, 162, 30, 72, 190, 196, 169, 94, 191, 130, 147, 173, 62, 128, 109, 124, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {111, 27, 54, 62, 36, 72, 180, 61, 87, 175, 175, 59, 189, 152, 227, 61, 44, 95, 204, 62, 210, 72, 39, 62, 73, 54, 31, 186, 226, 76, 15, 62, 182, 128, 251, 61, 96, 183, 74, 62, 137, 130, 13, 190, 145, 40, 178, 62, 33, 86, 99, 60, 255, 66, 211, 60, 143, 76, 202, 62, 229, 180, 28, 62, 111, 155, 213, 61, 143, 169, 28, 62, 126, 80, 133, 62, 175, 124, 64, 61, 207, 41, 249, 61, 1, 209, 60, 62, 75, 14, 48, 189, 132, 43, 165, 62, 82, 133, 27, 190, 244, 252, 131, 62, 245, 118, 34, 62, 201, 56, 152, 61, 117, 106, 9, 190, 57, 138, 94, 62, 49, 48, 48, 190, 22, 0, 70, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 208, 232, 190, 111, 129, 13, 191, 28, 34, 94, 62, 54, 91, 29, 191, 114, 246, 144, 62, 133, 249, 198, 191, 37, 197, 76, 62, 5, 105, 186, 190, 223, 176, 222, 62, 21, 91, 53, 63, 220, 93, 167, 190, 203, 26, 23, 191, 143, 129, 158, 61, 113, 126, 107, 188, 87, 234, 157, 62, 166, 43, 218, 190, 4, 216, 42, 63, 130, 117, 187, 62, 82, 134, 89, 190, 49, 135, 142, 191, 82, 74, 48, 62, 60, 28, 39, 63, 199, 31, 30, 190, 237, 120, 107, 62, 64, 189, 66, 63, 10, 142, 118, 61, 216, 98, 145, 60, 165, 11, 60, 191, 64, 27, 216, 190, 244, 69, 37, 63, 77, 189, 11, 190, 130, 214, 193, 190, 163, 199, 142, 189, 130, 94, 22, 62, 58, 73, 239, 61, 53, 237, 6, 189, 59, 87, 153, 190, 240, 3, 197, 61, 125, 27, 172, 189, 196, 166, 235, 188, 178, 252, 39, 61, 16, 47, 163, 189, 31, 178, 130, 189, 140, 181, 94, 190, 229, 12, 42, 189, 228, 70, 130, 189, 168, 18, 21, 190, 32, 116, 144, 189, 24, 84, 213, 61, 0, 238, 124, 62, 27, 230, 202, 61, 145, 121, 129, 62, 133, 177, 187, 190, 35, 165, 217, 61, 214, 219, 152, 61, 21, 26, 232, 188, 59, 225, 194, 62, 28, 26, 211, 189, 116, 247, 20, 190, 245, 77, 59, 62, 18, 1, 0, 190, 54, 226, 73, 189, 211, 154, 207, 61, 220, 170, 10, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {184, 43, 254, 61, 72, 50, 180, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {119, 108, 4, 62, 184, 211, 112, 63, 232, 233, 166, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {90, 145, 92, 62, 254, 223, 146, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0075/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}