// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {95, 128, 59, 63, 178, 78, 49, 63, 211, 97, 176, 62, 79, 249, 126, 62, 194, 128, 36, 63, 112, 24, 247, 61, 255, 237, 76, 191, 235, 30, 142, 190, 184, 116, 250, 60, 132, 80, 83, 63, 130, 89, 158, 191, 135, 58, 162, 190, 237, 80, 13, 63, 83, 131, 103, 191, 48, 162, 37, 191, 188, 227, 153, 190, 130, 197, 134, 63, 68, 22, 116, 61, 222, 53, 10, 191, 11, 132, 128, 63, 8, 236, 208, 189, 112, 220, 61, 191, 148, 181, 181, 63, 13, 206, 2, 63, 33, 200, 143, 189, 107, 184, 154, 63, 183, 157, 242, 62, 9, 69, 3, 191, 189, 159, 27, 63, 206, 224, 215, 62, 211, 162, 66, 62, 203, 60, 138, 188, 30, 51, 97, 191, 79, 45, 162, 62, 182, 171, 206, 191, 37, 88, 175, 61, 230, 36, 38, 191, 138, 145, 28, 191, 165, 233, 101, 189, 25, 11, 139, 62, 96, 13, 108, 62, 124, 10, 174, 62, 219, 115, 67, 190, 214, 106, 2, 191, 10, 67, 187, 62, 85, 116, 224, 190, 76, 120, 197, 191, 116, 74, 117, 190, 179, 52, 129, 190, 207, 255, 50, 62, 149, 160, 140, 62, 219, 145, 60, 63, 231, 52, 158, 191, 223, 197, 169, 190, 207, 251, 25, 191, 109, 109, 239, 61, 229, 143, 203, 190, 48, 160, 55, 62, 181, 209, 69, 63, 211, 24, 177, 190, 161, 121, 151, 189, 188, 249, 83, 190, 227, 61, 41, 189, 22, 54, 21, 63, 118, 61, 149, 190, 29, 230, 46, 191, 127, 194, 132, 190, 14, 24, 115, 61, 187, 198, 83, 189, 124, 108, 75, 191, 12, 58, 140, 190, 151, 206, 2, 191, 40, 214, 123, 63, 102, 194, 179, 62, 48, 85, 132, 61, 229, 253, 168, 62, 178, 150, 31, 63, 226, 97, 82, 189, 106, 56, 190, 61, 250, 79, 1, 63, 156, 40, 237, 190, 127, 89, 32, 63, 163, 207, 134, 62, 228, 246, 237, 62, 253, 235, 171, 190, 193, 92, 9, 62, 164, 149, 40, 63, 86, 139, 100, 191, 240, 98, 135, 63, 47, 61, 32, 63, 20, 94, 45, 63, 29, 172, 30, 191, 158, 154, 160, 61, 122, 215, 42, 63, 4, 154, 207, 190, 13, 89, 7, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {51, 201, 9, 191, 181, 89, 26, 62, 31, 46, 101, 62, 96, 45, 168, 190, 140, 233, 223, 190, 108, 98, 89, 62, 41, 157, 167, 189, 5, 175, 87, 62, 76, 134, 26, 63, 242, 174, 184, 190, 96, 243, 65, 60, 197, 109, 51, 190, 187, 132, 71, 62, 200, 31, 13, 190, 146, 55, 226, 62, 162, 232, 28, 62, 152, 114, 110, 63, 151, 189, 206, 190, 66, 66, 241, 186, 86, 48, 120, 189, 98, 140, 30, 63, 11, 165, 220, 62, 77, 110, 197, 62, 235, 79, 186, 190, 70, 238, 22, 190, 25, 57, 51, 62, 119, 207, 135, 188, 194, 179, 241, 61, 188, 222, 109, 190, 252, 203, 44, 189, 111, 61, 137, 62, 188, 249, 179, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {153, 96, 42, 190, 5, 33, 54, 191, 178, 103, 173, 189, 143, 63, 11, 62, 103, 206, 23, 62, 211, 68, 214, 189, 231, 78, 5, 190, 233, 101, 68, 189, 240, 32, 113, 190, 146, 27, 201, 185, 34, 178, 221, 189, 143, 65, 184, 62, 103, 23, 199, 187, 196, 228, 119, 189, 170, 6, 16, 190, 53, 247, 24, 62, 21, 182, 203, 190, 78, 74, 118, 62, 154, 229, 72, 190, 222, 120, 220, 190, 22, 28, 32, 189, 174, 11, 66, 189, 117, 23, 40, 190, 53, 175, 131, 190, 63, 18, 246, 190, 227, 241, 142, 61, 155, 220, 27, 190, 86, 112, 169, 190, 195, 87, 197, 187, 99, 100, 92, 190, 166, 16, 224, 61, 97, 192, 31, 62, 77, 72, 188, 61, 15, 114, 165, 61, 143, 167, 251, 189, 45, 137, 144, 191, 114, 208, 125, 190, 5, 13, 115, 62, 192, 32, 232, 62, 112, 234, 211, 189, 216, 65, 194, 62, 194, 117, 199, 188, 111, 178, 89, 190, 86, 199, 160, 190, 243, 122, 129, 190, 198, 19, 114, 61, 54, 77, 134, 188, 58, 152, 67, 191, 185, 22, 245, 61, 207, 92, 147, 191, 189, 53, 203, 62, 118, 145, 34, 62, 238, 135, 175, 189, 128, 138, 132, 62, 250, 112, 35, 62, 174, 9, 185, 189, 211, 67, 214, 62, 89, 103, 151, 62, 118, 97, 167, 189, 125, 191, 239, 61, 106, 123, 63, 62, 253, 86, 233, 60, 170, 70, 24, 62, 215, 223, 112, 189, 83, 71, 132, 190, 20, 41, 155, 190, 222, 9, 176, 190, 246, 175, 94, 62, 67, 97, 130, 62, 184, 72, 186, 189, 199, 70, 187, 190, 112, 81, 5, 62, 175, 193, 194, 189, 232, 214, 139, 61, 139, 198, 152, 61, 78, 238, 183, 60, 15, 181, 18, 191, 34, 184, 103, 61, 58, 175, 236, 61, 89, 252, 136, 190, 159, 65, 3, 62, 214, 131, 254, 61, 189, 235, 134, 189, 135, 141, 9, 190, 34, 166, 151, 189, 231, 26, 11, 62, 106, 70, 33, 60, 9, 171, 79, 190, 122, 14, 167, 61, 237, 18, 142, 188, 110, 8, 157, 61, 124, 17, 153, 190, 84, 194, 233, 61, 222, 113, 171, 60, 125, 74, 85, 61, 155, 134, 213, 62, 218, 242, 183, 189, 175, 92, 31, 62, 80, 153, 88, 188, 159, 108, 118, 191, 249, 222, 183, 190, 101, 51, 164, 190, 155, 153, 50, 190, 9, 160, 188, 190, 243, 185, 88, 190, 131, 102, 83, 62, 180, 52, 125, 62, 217, 111, 79, 190, 20, 181, 144, 61, 10, 249, 28, 188, 183, 100, 33, 62, 160, 10, 143, 190, 194, 32, 134, 61, 94, 255, 88, 191, 88, 223, 255, 60, 115, 6, 242, 61, 212, 235, 27, 62, 188, 8, 79, 62, 15, 210, 63, 190, 24, 104, 110, 189, 41, 225, 176, 62, 206, 93, 37, 189, 117, 147, 232, 60, 32, 104, 141, 62, 76, 129, 77, 62, 255, 31, 33, 189, 89, 184, 220, 61, 157, 23, 219, 189, 190, 198, 142, 61, 137, 115, 14, 190, 103, 125, 206, 61, 232, 49, 70, 61, 8, 103, 121, 62, 103, 176, 93, 62, 199, 126, 47, 190, 11, 85, 134, 61, 119, 137, 76, 62, 216, 233, 42, 190, 178, 65, 129, 190, 181, 17, 41, 62, 222, 184, 213, 61, 56, 97, 35, 56, 54, 166, 46, 61, 30, 23, 18, 190, 102, 234, 62, 62, 104, 35, 221, 188, 97, 42, 193, 189, 82, 236, 193, 60, 54, 174, 159, 62, 171, 248, 174, 61, 151, 244, 73, 62, 81, 136, 134, 189, 169, 26, 33, 62, 181, 18, 236, 61, 137, 246, 129, 190, 215, 173, 176, 188, 45, 136, 42, 190, 9, 90, 137, 62, 82, 243, 201, 62, 221, 234, 113, 188, 251, 100, 93, 62, 130, 80, 41, 63, 246, 139, 171, 62, 158, 128, 152, 191, 96, 75, 214, 189, 123, 130, 130, 60, 7, 68, 176, 61, 222, 106, 199, 191, 141, 244, 176, 190, 123, 139, 137, 62, 139, 120, 2, 61, 152, 85, 224, 190, 53, 118, 121, 62, 44, 45, 13, 62, 64, 35, 13, 61, 95, 212, 39, 63, 58, 215, 145, 190, 236, 152, 18, 191, 75, 152, 166, 190, 124, 55, 15, 62, 252, 19, 153, 59, 183, 52, 224, 60, 32, 118, 135, 62, 212, 52, 201, 61, 37, 206, 44, 63, 29, 0, 15, 60, 147, 63, 132, 62, 104, 134, 217, 61, 148, 206, 223, 62, 217, 95, 215, 191, 185, 143, 190, 190, 230, 162, 193, 190, 53, 94, 18, 61, 116, 235, 147, 189, 159, 117, 161, 61, 135, 39, 121, 61, 70, 89, 3, 190, 113, 167, 207, 61, 122, 73, 17, 62, 55, 54, 4, 190, 4, 155, 4, 189, 199, 11, 232, 189, 117, 21, 15, 62, 38, 129, 18, 190, 92, 160, 70, 190, 110, 42, 55, 190, 197, 230, 138, 189, 62, 163, 70, 190, 248, 247, 130, 189, 210, 140, 201, 61, 116, 40, 217, 61, 38, 121, 97, 190, 68, 48, 154, 189, 19, 118, 35, 189, 158, 86, 23, 62, 219, 236, 49, 190, 46, 70, 10, 190, 54, 224, 51, 189, 28, 183, 98, 190, 133, 125, 7, 62, 171, 48, 78, 189, 79, 228, 17, 62, 95, 226, 40, 190, 132, 78, 247, 189, 110, 193, 37, 190, 152, 8, 53, 189, 183, 93, 146, 61, 26, 242, 53, 191, 45, 251, 135, 190, 129, 108, 95, 61, 80, 64, 107, 62, 5, 163, 214, 61, 77, 146, 72, 62, 224, 41, 173, 189, 15, 123, 132, 61, 49, 110, 57, 62, 148, 131, 136, 190, 132, 43, 34, 60, 244, 48, 96, 188, 125, 115, 210, 190, 108, 219, 74, 62, 173, 195, 141, 191, 79, 86, 152, 62, 168, 66, 85, 59, 226, 178, 37, 187, 194, 85, 62, 62, 122, 132, 225, 189, 105, 155, 203, 190, 92, 80, 3, 62, 22, 117, 27, 62, 249, 108, 59, 61, 184, 88, 39, 189, 11, 187, 11, 61, 105, 152, 22, 62, 82, 239, 49, 62, 76, 107, 255, 61, 99, 214, 185, 190, 166, 39, 156, 190, 55, 228, 205, 189, 6, 228, 114, 62, 154, 3, 102, 61, 215, 170, 182, 62, 55, 128, 54, 62, 33, 163, 174, 61, 187, 205, 131, 62, 197, 93, 61, 191, 82, 95, 36, 189, 72, 124, 238, 62, 204, 69, 75, 190, 246, 183, 182, 190, 191, 138, 65, 62, 2, 12, 198, 190, 25, 68, 157, 62, 168, 175, 170, 62, 68, 61, 36, 60, 221, 28, 128, 61, 52, 71, 132, 62, 66, 232, 137, 60, 162, 240, 177, 189, 133, 162, 69, 190, 64, 11, 171, 189, 17, 230, 200, 61, 142, 92, 19, 190, 62, 151, 232, 189, 142, 91, 139, 190, 179, 213, 1, 60, 191, 132, 82, 62, 83, 154, 165, 62, 102, 73, 253, 189, 172, 118, 138, 188, 176, 173, 154, 62, 166, 45, 17, 63, 101, 12, 115, 190, 103, 239, 195, 62, 15, 117, 140, 60, 130, 222, 103, 61, 252, 177, 206, 61, 124, 116, 172, 190, 72, 242, 21, 191, 8, 86, 131, 190, 82, 224, 187, 61, 197, 133, 51, 190, 103, 96, 98, 62, 58, 91, 156, 62, 114, 8, 171, 62, 7, 87, 7, 62, 233, 197, 16, 63, 238, 247, 208, 191, 180, 161, 120, 62, 3, 170, 45, 191, 17, 165, 233, 61, 212, 255, 169, 62, 178, 20, 237, 190, 98, 31, 233, 190, 158, 177, 81, 191, 121, 138, 255, 188, 148, 192, 153, 190, 204, 135, 237, 61, 25, 67, 16, 190, 112, 148, 15, 191, 39, 19, 11, 188, 42, 125, 54, 62, 207, 10, 171, 190, 106, 207, 172, 189, 197, 151, 121, 191, 62, 121, 36, 190, 185, 205, 137, 189, 201, 253, 71, 190, 142, 243, 26, 62, 69, 28, 243, 61, 242, 152, 29, 190, 196, 208, 80, 62, 171, 76, 34, 190, 53, 65, 33, 61, 136, 213, 31, 187, 157, 19, 150, 191, 60, 84, 107, 62, 245, 85, 127, 190, 41, 161, 108, 190, 251, 27, 174, 190, 100, 120, 215, 60, 200, 84, 189, 188, 246, 5, 142, 60, 46, 173, 249, 190, 70, 94, 133, 62, 111, 230, 55, 62, 231, 66, 44, 191, 16, 174, 183, 62, 149, 186, 156, 189, 21, 122, 152, 189, 172, 128, 250, 61, 38, 9, 138, 62, 51, 116, 175, 190, 6, 169, 52, 62, 18, 208, 3, 191, 31, 209, 112, 191, 77, 57, 184, 190, 101, 27, 129, 62, 223, 212, 201, 62, 191, 74, 170, 188, 36, 35, 106, 62, 119, 42, 0, 190, 29, 191, 227, 189, 224, 181, 153, 189, 132, 218, 227, 190, 84, 176, 240, 189, 153, 114, 76, 61, 210, 186, 150, 191, 15, 114, 4, 62, 42, 195, 137, 191, 185, 162, 149, 61, 63, 45, 221, 188, 0, 237, 38, 62, 56, 68, 83, 61, 36, 63, 185, 60, 227, 250, 14, 190, 133, 115, 79, 62, 86, 85, 160, 62, 0, 218, 168, 61, 16, 147, 139, 189, 104, 158, 181, 189, 60, 39, 234, 187, 93, 67, 152, 62, 229, 31, 167, 62, 13, 134, 198, 189, 162, 203, 177, 59, 71, 88, 57, 190, 210, 133, 238, 61, 215, 71, 71, 188, 74, 63, 49, 61, 177, 7, 44, 190, 79, 22, 194, 189, 102, 237, 47, 189, 63, 151, 128, 189, 67, 39, 93, 189, 24, 127, 177, 189, 128, 241, 71, 189, 6, 230, 73, 190, 158, 218, 33, 190, 240, 31, 166, 189, 158, 1, 10, 62, 94, 168, 21, 62, 225, 98, 49, 190, 203, 27, 202, 189, 232, 120, 187, 61, 76, 184, 249, 189, 139, 150, 199, 61, 107, 182, 170, 189, 164, 26, 136, 60, 172, 175, 120, 60, 195, 157, 220, 189, 7, 199, 13, 187, 76, 91, 39, 190, 58, 52, 45, 190, 92, 95, 31, 189, 137, 220, 68, 190, 108, 179, 37, 60, 79, 5, 164, 189, 225, 135, 135, 189, 221, 149, 39, 190, 231, 45, 13, 62, 100, 161, 47, 190, 104, 138, 41, 62, 122, 74, 158, 188, 195, 37, 32, 62, 154, 28, 22, 190, 246, 88, 224, 61, 48, 104, 59, 61, 29, 18, 190, 59, 137, 116, 24, 190, 150, 31, 39, 190, 237, 100, 21, 190, 168, 51, 249, 189, 91, 139, 29, 62, 87, 54, 137, 61, 16, 23, 185, 188, 172, 239, 113, 189, 42, 77, 200, 189, 239, 223, 210, 189, 130, 18, 151, 186, 154, 76, 134, 189, 96, 40, 223, 189, 42, 99, 207, 189, 139, 167, 226, 189, 90, 110, 173, 187, 0, 152, 16, 62, 181, 56, 50, 190, 49, 72, 34, 190, 114, 228, 41, 190, 169, 61, 2, 190, 162, 76, 131, 62, 114, 94, 17, 62, 121, 105, 208, 189, 232, 107, 157, 62, 181, 180, 187, 61, 130, 138, 194, 62, 8, 186, 193, 61, 45, 44, 69, 190, 152, 37, 157, 190, 127, 204, 35, 190, 211, 182, 30, 189, 110, 80, 200, 58, 96, 21, 38, 61, 233, 96, 178, 189, 194, 33, 154, 62, 94, 142, 134, 189, 13, 89, 88, 59, 95, 219, 134, 59, 42, 80, 24, 62, 16, 235, 236, 188, 148, 5, 112, 62, 252, 77, 125, 190, 75, 119, 206, 62, 253, 226, 28, 62, 72, 67, 187, 59, 111, 248, 92, 190, 249, 226, 214, 189, 122, 237, 175, 61, 66, 194, 30, 62, 186, 55, 170, 61, 50, 20, 143, 61, 246, 72, 184, 58, 121, 176, 100, 190, 167, 55, 76, 191, 182, 222, 169, 190, 46, 211, 63, 190, 143, 28, 192, 62, 70, 12, 255, 60, 95, 252, 34, 62, 216, 138, 135, 61, 243, 156, 60, 190, 158, 238, 200, 189, 224, 100, 36, 190, 29, 0, 246, 61, 101, 34, 25, 62, 139, 117, 124, 191, 154, 214, 39, 62, 35, 161, 117, 191, 148, 222, 255, 61, 66, 171, 129, 62, 53, 181, 145, 188, 28, 195, 128, 62, 82, 201, 167, 189, 204, 0, 40, 189, 201, 156, 89, 62, 170, 227, 174, 62, 148, 23, 235, 60, 35, 125, 100, 62, 56, 187, 190, 189, 248, 106, 25, 190, 82, 100, 174, 61, 202, 115, 106, 189, 70, 152, 161, 61, 37, 143, 178, 61, 182, 186, 57, 189, 195, 224, 18, 63, 64, 187, 3, 62, 59, 110, 119, 62, 231, 197, 135, 190, 232, 2, 119, 62, 243, 21, 154, 62, 92, 38, 18, 58, 128, 36, 146, 191, 113, 41, 165, 189, 20, 102, 63, 61, 14, 163, 129, 190, 154, 114, 115, 62, 114, 136, 13, 63, 26, 133, 80, 62, 187, 115, 58, 63, 121, 210, 160, 190, 114, 38, 2, 191, 189, 77, 7, 62, 112, 41, 88, 191, 12, 1, 0, 189, 207, 154, 151, 61, 111, 140, 207, 189, 226, 152, 243, 189, 155, 179, 47, 191, 160, 34, 108, 189, 155, 166, 130, 190, 100, 182, 97, 62, 230, 242, 117, 62, 129, 234, 249, 189, 81, 221, 12, 191, 179, 131, 239, 190, 89, 169, 249, 189, 251, 230, 225, 62, 47, 33, 150, 62, 207, 58, 134, 62, 23, 8, 24, 62, 9, 39, 127, 62, 95, 2, 243, 60, 39, 77, 156, 190, 53, 66, 98, 190, 247, 50, 122, 62, 226, 255, 236, 189, 1, 51, 118, 190, 210, 47, 176, 62, 11, 218, 189, 190, 146, 196, 79, 62, 16, 204, 8, 62, 190, 70, 108, 58, 80, 46, 73, 187, 191, 89, 42, 62, 184, 1, 43, 60, 126, 163, 48, 189, 91, 136, 171, 189, 182, 6, 132, 62, 30, 82, 138, 61, 49, 63, 99, 190, 57, 215, 81, 190, 217, 38, 78, 190, 210, 176, 146, 188, 58, 185, 221, 188, 103, 186, 235, 62, 50, 180, 90, 62, 234, 205, 189, 61, 252, 148, 102, 62, 248, 132, 37, 191, 241, 165, 250, 190, 84, 241, 164, 190, 193, 211, 169, 61, 204, 102, 229, 189, 17, 108, 123, 190, 87, 219, 42, 189, 136, 243, 14, 62, 55, 9, 105, 190, 93, 186, 164, 188, 72, 204, 90, 189, 167, 68, 124, 62, 202, 132, 166, 189, 74, 50, 138, 189, 229, 245, 18, 191, 13, 103, 213, 187, 161, 8, 64, 62, 165, 229, 57, 61, 179, 89, 68, 61, 116, 152, 162, 61, 16, 174, 163, 62, 92, 197, 198, 62, 177, 189, 48, 189, 126, 147, 19, 62, 197, 209, 10, 62, 120, 97, 38, 60, 63, 246, 199, 61, 223, 129, 106, 61, 197, 195, 232, 190, 251, 247, 6, 191, 234, 245, 179, 190, 161, 34, 13, 62, 117, 185, 159, 62, 243, 83, 22, 62, 44, 1, 153, 62, 171, 71, 59, 60, 180, 213, 251, 61, 117, 31, 64, 189, 10, 63, 47, 190, 124, 112, 7, 190, 76, 85, 196, 62, 163, 225, 69, 62, 230, 97, 235, 190, 217, 133, 136, 189, 31, 8, 136, 62, 120, 102, 162, 61, 252, 216, 163, 62, 131, 44, 134, 190, 42, 39, 45, 60, 218, 23, 158, 62, 185, 206, 242, 189, 16, 44, 144, 62, 237, 138, 108, 191, 191, 198, 143, 191, 64, 254, 180, 61, 137, 65, 57, 190, 151, 225, 31, 191, 38, 48, 10, 190, 123, 233, 92, 62, 125, 96, 173, 188, 147, 220, 86, 62, 136, 63, 133, 60, 93, 241, 129, 61, 239, 111, 219, 190, 70, 49, 194, 189, 66, 81, 41, 190, 238, 186, 137, 62, 186, 219, 221, 61, 234, 187, 244, 189, 252, 240, 254, 60, 69, 165, 184, 190, 202, 134, 39, 61, 106, 72, 133, 189, 158, 204, 176, 190, 172, 239, 68, 188, 76, 31, 29, 190, 202, 49, 48, 191, 116, 81, 140, 60, 93, 167, 22, 190, 67, 207, 5, 189, 96, 202, 156, 62, 231, 194, 148, 61, 157, 223, 149, 62, 119, 133, 155, 189, 184, 166, 91, 62, 91, 68, 250, 62, 14, 177, 168, 62, 130, 113, 191, 61, 192, 192, 247, 61, 14, 111, 200, 189, 39, 174, 181, 189, 59, 196, 127, 62, 52, 2, 219, 61, 65, 85, 84, 189, 177, 58, 47, 189, 89, 201, 6, 191, 213, 45, 243, 62, 227, 166, 10, 190, 151, 59, 181, 62, 32, 59, 217, 62, 166, 177, 132, 62, 43, 87, 175, 62, 189, 242, 219, 191, 150, 228, 176, 61, 204, 147, 15, 191, 229, 41, 255, 189, 74, 33, 166, 190, 74, 95, 28, 191, 139, 114, 254, 190, 160, 27, 34, 189, 253, 54, 252, 61, 98, 27, 31, 190, 250, 193, 198, 62, 197, 147, 94, 189, 142, 244, 27, 188, 233, 159, 69, 62, 67, 51, 188, 189, 13, 152, 250, 189, 96, 135, 248, 61, 117, 45, 137, 62, 51, 152, 167, 189, 219, 43, 106, 191, 66, 138, 25, 191, 224, 139, 199, 190, 124, 168, 108, 190, 131, 126, 251, 60, 3, 212, 12, 62, 199, 117, 81, 61, 52, 199, 171, 189, 244, 195, 32, 62, 96, 233, 172, 189, 216, 162, 138, 61, 67, 236, 223, 61, 122, 225, 12, 190, 163, 181, 72, 189, 217, 212, 50, 190, 165, 115, 2, 62, 83, 33, 75, 190, 87, 222, 9, 190, 219, 251, 82, 190, 112, 91, 168, 189, 131, 177, 64, 190, 231, 47, 231, 61, 155, 100, 29, 62, 100, 247, 251, 59, 19, 201, 92, 61, 108, 14, 58, 189, 142, 221, 201, 188, 49, 138, 226, 61, 12, 163, 18, 62, 243, 238, 129, 190, 248, 52, 153, 189, 94, 238, 72, 61, 194, 34, 139, 189, 177, 119, 29, 62, 122, 126, 172, 187, 165, 212, 41, 190, 84, 12, 149, 190, 30, 103, 81, 190, 218, 110, 245, 188, 152, 163, 22, 62, 201, 178, 99, 61, 196, 149, 133, 62, 79, 4, 246, 61, 73, 160, 26, 62, 210, 75, 107, 61, 204, 200, 137, 190, 71, 183, 22, 189, 89, 254, 14, 62, 125, 31, 28, 60, 160, 76, 66, 190, 86, 239, 139, 62, 57, 209, 218, 190, 18, 148, 97, 62, 98, 197, 184, 61, 235, 235, 60, 61, 194, 82, 135, 62, 199, 224, 132, 62, 110, 227, 144, 61, 239, 107, 213, 188, 109, 85, 49, 61, 78, 138, 78, 190, 52, 115, 109, 62, 32, 9, 25, 190, 89, 132, 131, 190, 24, 132, 155, 190, 251, 219, 70, 189, 189, 231, 60, 62, 144, 129, 196, 189, 233, 150, 202, 62, 95, 93, 94, 62, 17, 16, 214, 190, 105, 26, 215, 190, 167, 137, 192, 190, 20, 8, 117, 62, 195, 95, 105, 61, 61, 76, 106, 189, 174, 130, 41, 62, 192, 95, 135, 190, 250, 26, 75, 190, 167, 6, 63, 191, 187, 245, 192, 190, 53, 10, 106, 62, 92, 16, 174, 190, 239, 116, 53, 190, 193, 249, 28, 190, 15, 146, 28, 190, 105, 183, 181, 62, 154, 87, 253, 62, 248, 37, 227, 190, 161, 162, 124, 190, 211, 144, 4, 190, 5, 24, 54, 190, 79, 119, 102, 62, 102, 242, 153, 62, 205, 90, 179, 62, 88, 60, 120, 62, 108, 87, 202, 188, 143, 216, 228, 190, 202, 51, 21, 62, 96, 54, 192, 190, 86, 143, 72, 189, 171, 119, 32, 62, 113, 12, 45, 62, 171, 95, 123, 190, 49, 70, 121, 61, 31, 13, 137, 62, 53, 194, 217, 61, 151, 244, 48, 62, 92, 53, 25, 61, 229, 108, 160, 188, 172, 116, 154, 189, 123, 214, 26, 190, 27, 64, 105, 61, 232, 151, 206, 189, 205, 176, 83, 190, 201, 88, 131, 61, 124, 38, 117, 60, 108, 98, 22, 189, 145, 165, 89, 190, 250, 153, 184, 61, 195, 129, 76, 62, 41, 105, 206, 61, 5, 2, 62, 188, 207, 54, 187, 189, 139, 153, 32, 62, 36, 253, 132, 62, 156, 67, 112, 61, 242, 249, 151, 61, 160, 71, 13, 189, 70, 126, 161, 59, 167, 52, 241, 189, 134, 75, 194, 189, 224, 102, 213, 190, 57, 117, 35, 190, 245, 244, 70, 61, 226, 194, 123, 190, 188, 157, 51, 189, 152, 48, 91, 190, 150, 47, 15, 190, 32, 108, 221, 188, 96, 105, 30, 190, 13, 23, 254, 189, 233, 111, 71, 61, 243, 161, 79, 62, 45, 65, 227, 189, 89, 81, 60, 189, 53, 159, 53, 60, 121, 164, 237, 189, 222, 171, 129, 61, 85, 158, 128, 190, 212, 198, 99, 61, 14, 125, 247, 189, 124, 1, 65, 61, 148, 110, 18, 62, 183, 79, 182, 189, 240, 190, 199, 60, 214, 141, 152, 60, 22, 35, 230, 60, 212, 199, 20, 190, 147, 7, 196, 61, 18, 156, 207, 61, 228, 132, 56, 190, 3, 101, 67, 62, 125, 45, 156, 61, 109, 15, 140, 62, 112, 112, 209, 62, 211, 186, 89, 62, 26, 56, 27, 191, 228, 46, 230, 190, 176, 200, 172, 190, 160, 235, 163, 189, 231, 168, 107, 191, 58, 208, 30, 190, 220, 187, 90, 61, 221, 223, 178, 62, 181, 113, 9, 191, 66, 243, 152, 62, 243, 179, 142, 61, 76, 10, 103, 61, 198, 174, 40, 62, 93, 209, 225, 189, 222, 76, 60, 191, 109, 151, 216, 190, 39, 20, 10, 188, 114, 95, 78, 189, 239, 243, 196, 61, 13, 25, 7, 61, 192, 203, 125, 62, 91, 59, 212, 62, 29, 218, 28, 62, 0, 184, 167, 62, 158, 209, 224, 62, 73, 220, 35, 62, 29, 176, 98, 191, 6, 101, 147, 61, 86, 15, 252, 190, 68, 8, 203, 187, 244, 2, 87, 187, 55, 188, 141, 188, 185, 8, 10, 63, 83, 136, 24, 63, 204, 54, 224, 189, 194, 75, 236, 62, 111, 79, 123, 61, 245, 126, 84, 62, 237, 14, 216, 61, 211, 243, 133, 190, 69, 47, 44, 63, 149, 143, 70, 189, 5, 36, 85, 190, 43, 136, 114, 62, 126, 100, 135, 61, 142, 3, 83, 62, 63, 165, 230, 62, 169, 214, 228, 62, 174, 237, 122, 190, 29, 124, 164, 189, 243, 42, 53, 60, 202, 175, 38, 190, 22, 137, 183, 190, 25, 57, 2, 190, 54, 19, 124, 190, 44, 88, 174, 190, 78, 134, 7, 62, 192, 135, 241, 189, 92, 173, 243, 60, 89, 103, 2, 62, 251, 142, 41, 62, 91, 98, 144, 190, 64, 174, 159, 190, 65, 255, 57, 62, 180, 7, 243, 62, 186, 89, 52, 62, 150, 88, 196, 62, 6, 71, 205, 189, 131, 101, 151, 189, 191, 42, 21, 62, 77, 120, 1, 191, 186, 52, 35, 191, 34, 227, 171, 62, 43, 244, 242, 189, 54, 101, 144, 190, 39, 126, 116, 62, 243, 73, 63, 190, 28, 151, 34, 62, 124, 236, 240, 61, 86, 137, 39, 191, 108, 16, 148, 188, 10, 55, 243, 61, 239, 17, 23, 190, 182, 159, 167, 61, 213, 0, 51, 191, 106, 79, 194, 62, 127, 57, 126, 189, 209, 39, 8, 190, 95, 1, 230, 189, 39, 255, 170, 190, 186, 220, 6, 62, 73, 15, 85, 62, 35, 168, 222, 62, 44, 176, 9, 190, 27, 128, 157, 60, 47, 159, 211, 189, 63, 33, 208, 60, 175, 48, 168, 189, 115, 106, 195, 188, 151, 10, 21, 62, 96, 48, 180, 61, 214, 238, 54, 188, 141, 22, 72, 190, 58, 247, 222, 61, 76, 189, 191, 61, 115, 43, 43, 190, 119, 226, 10, 62, 206, 156, 89, 190, 17, 82, 90, 61, 71, 204, 37, 190, 33, 43, 31, 190, 152, 29, 96, 189, 71, 156, 251, 61, 209, 59, 113, 61, 51, 211, 60, 190, 230, 83, 177, 61, 111, 165, 199, 189, 164, 61, 74, 190, 138, 150, 145, 189, 212, 71, 6, 190, 71, 223, 172, 189, 171, 153, 38, 189, 64, 36, 32, 61, 114, 48, 1, 62, 175, 174, 4, 187, 62, 165, 145, 62, 48, 20, 157, 62, 101, 216, 191, 60, 116, 90, 112, 190, 187, 14, 24, 61, 51, 13, 156, 189, 89, 60, 210, 190, 127, 140, 88, 191, 105, 47, 76, 190, 218, 124, 225, 190, 211, 65, 81, 62, 73, 166, 139, 190, 7, 237, 131, 62, 92, 72, 14, 190, 162, 121, 59, 62, 90, 216, 240, 62, 126, 109, 239, 188, 237, 192, 199, 60, 70, 228, 0, 62, 53, 240, 40, 62, 126, 235, 151, 62, 111, 207, 198, 188, 43, 43, 47, 189, 102, 66, 24, 189, 10, 157, 200, 62, 102, 78, 224, 61, 40, 152, 72, 61, 234, 110, 81, 62, 89, 80, 83, 190, 238, 251, 103, 191, 213, 121, 172, 62, 108, 173, 126, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {183, 249, 34, 62, 149, 29, 187, 61, 153, 137, 213, 188, 107, 103, 214, 61, 2, 234, 207, 62, 14, 34, 50, 62, 2, 195, 18, 188, 221, 28, 23, 62, 65, 53, 255, 61, 239, 229, 98, 62, 113, 129, 14, 190, 138, 233, 184, 62, 33, 86, 99, 60, 255, 66, 211, 60, 46, 101, 202, 62, 193, 205, 32, 62, 187, 81, 203, 61, 234, 29, 24, 62, 184, 63, 131, 62, 95, 212, 114, 61, 64, 62, 14, 62, 76, 143, 44, 62, 75, 14, 48, 189, 244, 2, 166, 62, 170, 116, 34, 190, 214, 9, 121, 62, 18, 232, 32, 62, 202, 227, 150, 61, 220, 31, 8, 190, 73, 132, 107, 62, 49, 48, 48, 190, 254, 150, 55, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 122, 3, 191, 35, 209, 17, 191, 218, 120, 124, 62, 133, 75, 47, 191, 121, 35, 138, 62, 219, 226, 220, 191, 93, 153, 52, 62, 85, 173, 189, 190, 15, 30, 234, 62, 11, 57, 62, 63, 225, 100, 180, 190, 220, 61, 31, 191, 143, 129, 158, 61, 113, 126, 107, 188, 248, 93, 153, 62, 175, 216, 229, 190, 125, 250, 44, 63, 210, 47, 194, 62, 57, 31, 115, 190, 98, 122, 153, 191, 95, 50, 45, 62, 78, 31, 54, 63, 199, 31, 30, 190, 246, 1, 110, 62, 157, 113, 110, 63, 215, 229, 37, 61, 25, 81, 243, 60, 26, 204, 74, 191, 139, 40, 203, 190, 180, 7, 38, 63, 77, 189, 11, 190, 204, 141, 198, 190, 239, 31, 138, 189, 11, 99, 89, 62, 5, 148, 217, 61, 255, 248, 55, 60, 231, 37, 171, 190, 121, 105, 67, 62, 129, 239, 176, 189, 110, 72, 47, 188, 131, 74, 108, 188, 36, 153, 23, 189, 118, 166, 196, 58, 64, 0, 114, 190, 229, 12, 42, 189, 228, 70, 130, 189, 116, 135, 56, 190, 42, 84, 157, 188, 127, 219, 10, 62, 155, 236, 108, 62, 188, 144, 63, 62, 176, 168, 150, 62, 173, 185, 209, 190, 84, 97, 16, 62, 214, 219, 152, 61, 236, 202, 223, 188, 104, 32, 209, 62, 58, 44, 5, 190, 249, 107, 66, 190, 106, 236, 62, 62, 81, 119, 218, 189, 177, 217, 170, 189, 211, 154, 207, 61, 51, 142, 3, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {190, 186, 252, 61, 40, 234, 193, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {141, 109, 92, 63, 159, 183, 56, 191, 53, 123, 216, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {170, 191, 49, 64, 38, 113, 118, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0075/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}