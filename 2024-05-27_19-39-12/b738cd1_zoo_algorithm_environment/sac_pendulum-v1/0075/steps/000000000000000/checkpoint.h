// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {130, 224, 18, 63, 141, 252, 174, 189, 157, 77, 211, 62, 145, 153, 38, 62, 69, 73, 178, 61, 192, 160, 221, 61, 255, 246, 8, 191, 158, 49, 209, 190, 92, 99, 230, 188, 9, 188, 22, 62, 92, 39, 1, 191, 74, 137, 143, 190, 64, 40, 201, 61, 190, 19, 213, 190, 5, 77, 248, 190, 221, 122, 180, 190, 114, 7, 155, 62, 49, 15, 124, 62, 198, 7, 6, 191, 233, 165, 16, 63, 18, 238, 105, 62, 174, 187, 119, 190, 69, 152, 186, 190, 180, 121, 252, 62, 200, 192, 253, 61, 1, 185, 2, 63, 195, 199, 3, 63, 107, 55, 114, 188, 87, 52, 86, 190, 77, 27, 157, 62, 118, 135, 77, 62, 18, 154, 249, 62, 232, 209, 144, 190, 211, 57, 228, 60, 122, 140, 18, 191, 127, 12, 155, 190, 205, 182, 196, 190, 230, 171, 145, 190, 199, 122, 99, 190, 253, 75, 232, 62, 223, 150, 103, 190, 27, 189, 54, 62, 126, 109, 164, 190, 116, 151, 236, 190, 123, 80, 243, 61, 144, 195, 56, 190, 198, 200, 154, 190, 106, 222, 149, 190, 88, 185, 71, 61, 229, 104, 161, 190, 197, 240, 233, 62, 249, 35, 248, 61, 139, 234, 3, 191, 50, 111, 180, 190, 132, 227, 107, 189, 94, 106, 141, 190, 118, 252, 110, 190, 179, 34, 181, 62, 139, 192, 221, 62, 55, 30, 40, 61, 236, 85, 3, 61, 220, 216, 173, 190, 183, 193, 81, 190, 190, 36, 204, 62, 77, 237, 5, 63, 139, 248, 217, 190, 175, 237, 20, 61, 42, 186, 131, 62, 68, 203, 129, 190, 48, 51, 17, 191, 160, 11, 251, 62, 144, 222, 114, 190, 100, 113, 6, 63, 228, 208, 22, 189, 25, 132, 165, 61, 7, 245, 145, 61, 171, 255, 193, 62, 132, 57, 122, 61, 66, 65, 128, 189, 75, 186, 14, 63, 49, 163, 100, 60, 0, 80, 227, 62, 62, 6, 254, 61, 164, 227, 218, 62, 120, 207, 103, 62, 248, 176, 88, 188, 167, 83, 18, 63, 16, 159, 195, 190, 218, 63, 87, 190, 43, 219, 243, 62, 59, 250, 217, 62, 126, 211, 160, 190, 182, 180, 129, 188, 174, 236, 3, 63, 72, 243, 129, 190, 176, 184, 157, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {55, 160, 19, 191, 15, 82, 55, 188, 101, 155, 21, 62, 162, 238, 204, 190, 199, 160, 17, 191, 235, 88, 135, 62, 9, 55, 98, 190, 39, 26, 9, 62, 41, 247, 3, 63, 39, 254, 247, 190, 48, 142, 162, 62, 164, 200, 145, 60, 106, 150, 133, 62, 84, 182, 253, 190, 170, 129, 12, 63, 97, 243, 149, 62, 4, 79, 15, 63, 182, 232, 10, 191, 179, 151, 2, 191, 252, 239, 136, 60, 212, 211, 244, 62, 246, 228, 15, 63, 90, 159, 7, 63, 151, 121, 81, 62, 15, 9, 87, 190, 88, 29, 198, 62, 108, 12, 88, 62, 56, 191, 11, 62, 113, 226, 207, 190, 180, 116, 211, 190, 253, 129, 245, 62, 163, 53, 7, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 221, 4, 190, 33, 119, 0, 189, 170, 134, 163, 60, 180, 224, 215, 188, 122, 106, 204, 61, 14, 242, 128, 189, 193, 109, 62, 188, 212, 228, 45, 62, 144, 42, 208, 189, 165, 187, 54, 61, 45, 16, 171, 189, 193, 41, 252, 61, 4, 217, 32, 61, 4, 162, 168, 189, 134, 32, 174, 189, 198, 101, 167, 61, 10, 7, 29, 190, 58, 131, 201, 61, 92, 130, 28, 62, 213, 5, 245, 189, 140, 0, 7, 190, 200, 51, 169, 189, 63, 94, 37, 190, 134, 230, 226, 60, 161, 149, 230, 189, 208, 159, 171, 189, 97, 238, 234, 61, 151, 112, 60, 61, 27, 135, 218, 186, 169, 58, 185, 189, 176, 223, 40, 190, 89, 69, 243, 61, 204, 132, 254, 60, 66, 110, 153, 188, 233, 181, 248, 189, 71, 122, 29, 60, 235, 166, 249, 188, 132, 150, 212, 61, 64, 195, 49, 190, 194, 245, 228, 189, 238, 70, 42, 62, 74, 25, 138, 189, 99, 35, 51, 190, 133, 102, 122, 189, 180, 156, 15, 189, 111, 111, 192, 61, 214, 202, 193, 189, 146, 194, 167, 189, 26, 139, 227, 59, 10, 172, 21, 61, 207, 226, 184, 60, 83, 74, 53, 189, 99, 39, 234, 187, 217, 121, 222, 61, 78, 101, 17, 60, 31, 94, 76, 189, 207, 205, 87, 61, 229, 193, 24, 190, 73, 144, 49, 190, 117, 55, 216, 188, 71, 195, 228, 61, 123, 38, 137, 188, 117, 38, 60, 61, 58, 67, 4, 190, 252, 186, 5, 190, 251, 248, 141, 189, 219, 27, 21, 190, 18, 152, 32, 189, 168, 41, 128, 61, 187, 12, 71, 189, 74, 149, 63, 189, 228, 171, 44, 190, 167, 211, 77, 60, 7, 71, 142, 61, 174, 175, 48, 62, 52, 87, 249, 61, 153, 227, 17, 190, 45, 176, 2, 62, 181, 254, 67, 188, 44, 72, 239, 61, 154, 82, 44, 61, 212, 68, 165, 188, 235, 238, 98, 188, 57, 213, 29, 190, 114, 2, 33, 189, 109, 110, 0, 62, 83, 108, 142, 61, 62, 171, 59, 189, 124, 218, 141, 188, 152, 18, 106, 189, 11, 120, 16, 62, 240, 38, 208, 189, 164, 161, 36, 62, 0, 172, 202, 189, 253, 106, 246, 189, 72, 100, 176, 61, 181, 185, 241, 189, 151, 192, 109, 61, 10, 90, 222, 61, 43, 204, 76, 61, 249, 153, 103, 189, 114, 73, 228, 60, 148, 26, 198, 189, 120, 87, 223, 189, 169, 39, 45, 189, 11, 3, 16, 62, 5, 115, 51, 62, 52, 180, 11, 190, 223, 245, 50, 62, 6, 48, 234, 188, 30, 197, 59, 60, 247, 232, 140, 189, 1, 122, 182, 61, 245, 180, 25, 190, 208, 182, 28, 62, 131, 228, 123, 61, 104, 2, 23, 62, 201, 22, 248, 61, 147, 165, 36, 190, 110, 213, 28, 190, 76, 241, 198, 61, 0, 35, 161, 189, 86, 151, 175, 189, 79, 217, 178, 61, 173, 203, 5, 62, 132, 66, 161, 61, 192, 172, 16, 61, 218, 176, 196, 60, 139, 110, 46, 62, 41, 146, 227, 189, 246, 125, 208, 189, 31, 183, 29, 190, 108, 150, 251, 61, 84, 4, 179, 189, 98, 210, 195, 189, 167, 188, 245, 189, 123, 116, 146, 60, 252, 192, 68, 189, 185, 40, 48, 190, 153, 160, 58, 61, 81, 217, 101, 188, 251, 211, 23, 61, 155, 0, 251, 60, 158, 226, 37, 190, 80, 158, 213, 60, 250, 76, 14, 190, 182, 162, 162, 188, 136, 226, 174, 61, 144, 88, 2, 62, 8, 175, 227, 60, 129, 149, 163, 61, 223, 96, 139, 60, 47, 104, 145, 189, 81, 109, 59, 189, 106, 143, 174, 189, 216, 252, 127, 61, 37, 91, 165, 188, 107, 182, 36, 62, 225, 132, 48, 62, 179, 228, 22, 190, 228, 148, 183, 61, 46, 131, 162, 61, 212, 186, 125, 61, 236, 83, 189, 189, 123, 145, 15, 62, 207, 47, 13, 189, 91, 12, 22, 62, 101, 58, 200, 189, 226, 221, 10, 62, 30, 23, 2, 190, 221, 108, 152, 189, 41, 216, 77, 188, 113, 37, 179, 189, 70, 150, 197, 189, 124, 85, 226, 189, 0, 241, 25, 62, 1, 221, 36, 62, 236, 184, 47, 62, 127, 206, 17, 190, 52, 132, 135, 61, 77, 60, 33, 190, 106, 221, 210, 188, 190, 121, 6, 62, 215, 79, 153, 189, 247, 71, 11, 62, 211, 230, 49, 189, 10, 40, 223, 61, 143, 174, 130, 189, 2, 122, 243, 189, 90, 6, 47, 190, 44, 127, 155, 189, 135, 47, 239, 189, 138, 174, 142, 61, 245, 244, 53, 189, 226, 252, 176, 61, 135, 39, 121, 61, 70, 89, 3, 190, 239, 182, 5, 62, 149, 49, 39, 62, 214, 79, 240, 189, 204, 208, 15, 188, 82, 51, 198, 189, 216, 49, 34, 62, 96, 172, 16, 190, 46, 50, 146, 189, 64, 228, 32, 190, 229, 126, 25, 189, 126, 153, 31, 190, 82, 32, 54, 189, 210, 140, 201, 61, 71, 26, 218, 61, 76, 80, 48, 190, 100, 223, 137, 188, 241, 237, 177, 188, 234, 123, 50, 62, 124, 156, 142, 189, 238, 151, 171, 189, 144, 167, 99, 60, 160, 168, 42, 190, 9, 174, 43, 62, 156, 237, 202, 188, 131, 195, 26, 62, 215, 231, 5, 190, 23, 247, 238, 189, 208, 0, 45, 190, 171, 177, 3, 190, 132, 36, 246, 61, 56, 166, 4, 62, 140, 221, 19, 59, 55, 172, 185, 61, 17, 227, 171, 189, 18, 17, 164, 61, 154, 67, 182, 61, 65, 144, 1, 190, 41, 250, 177, 61, 179, 146, 70, 61, 115, 236, 16, 190, 183, 37, 129, 61, 75, 249, 204, 189, 83, 59, 165, 61, 9, 117, 213, 61, 43, 110, 228, 189, 243, 224, 170, 189, 91, 247, 5, 190, 133, 203, 79, 189, 10, 138, 6, 62, 110, 42, 186, 189, 226, 120, 149, 189, 86, 139, 49, 190, 61, 228, 127, 189, 149, 214, 121, 61, 217, 87, 26, 190, 187, 69, 25, 189, 16, 131, 90, 61, 42, 74, 43, 59, 227, 74, 179, 61, 79, 230, 208, 187, 149, 177, 162, 188, 88, 128, 10, 189, 111, 216, 23, 190, 146, 105, 95, 189, 74, 46, 45, 61, 168, 206, 12, 189, 207, 111, 131, 189, 172, 220, 76, 61, 5, 36, 21, 190, 202, 210, 19, 62, 149, 170, 30, 62, 201, 101, 143, 189, 218, 23, 49, 190, 64, 15, 170, 189, 81, 252, 0, 190, 23, 247, 210, 60, 181, 90, 152, 61, 152, 175, 12, 62, 200, 160, 6, 61, 164, 9, 41, 62, 41, 0, 197, 61, 233, 92, 216, 189, 74, 203, 62, 189, 208, 28, 231, 189, 211, 212, 50, 190, 172, 102, 213, 60, 71, 98, 250, 61, 72, 79, 135, 189, 36, 229, 176, 61, 71, 145, 221, 59, 134, 214, 28, 62, 53, 182, 167, 61, 89, 248, 74, 189, 240, 99, 5, 62, 2, 202, 20, 62, 16, 106, 194, 61, 112, 116, 239, 189, 84, 251, 62, 189, 249, 228, 51, 190, 129, 97, 201, 189, 103, 106, 7, 190, 252, 113, 27, 190, 207, 195, 194, 189, 51, 89, 140, 61, 69, 109, 207, 189, 6, 93, 209, 61, 172, 143, 245, 189, 122, 43, 59, 61, 2, 144, 185, 61, 140, 49, 148, 61, 3, 50, 137, 189, 146, 250, 43, 62, 204, 83, 138, 189, 97, 250, 144, 61, 227, 79, 123, 61, 189, 207, 232, 189, 209, 84, 205, 60, 230, 172, 46, 190, 159, 220, 14, 59, 98, 75, 7, 190, 66, 184, 141, 61, 44, 99, 37, 190, 224, 2, 134, 61, 185, 92, 181, 189, 33, 45, 211, 61, 223, 47, 187, 189, 245, 60, 0, 61, 206, 58, 222, 61, 182, 205, 223, 61, 83, 179, 102, 189, 55, 76, 40, 190, 48, 172, 226, 60, 210, 29, 2, 62, 161, 126, 26, 62, 56, 205, 73, 61, 211, 254, 202, 60, 239, 238, 91, 188, 127, 103, 54, 189, 54, 154, 148, 60, 179, 88, 235, 61, 139, 45, 166, 189, 155, 185, 185, 189, 85, 128, 8, 60, 32, 188, 149, 60, 101, 248, 21, 189, 21, 184, 43, 62, 233, 93, 179, 189, 90, 87, 14, 190, 224, 72, 181, 60, 218, 213, 3, 188, 174, 16, 48, 62, 61, 191, 48, 190, 169, 102, 112, 189, 78, 22, 137, 188, 79, 202, 51, 62, 198, 155, 29, 190, 106, 0, 222, 61, 163, 95, 168, 59, 189, 28, 191, 61, 229, 233, 7, 60, 157, 12, 251, 61, 144, 162, 186, 61, 159, 192, 15, 61, 59, 51, 3, 62, 82, 125, 194, 189, 27, 73, 22, 190, 66, 169, 188, 61, 233, 163, 58, 61, 184, 2, 32, 61, 83, 97, 150, 60, 147, 194, 1, 190, 55, 141, 46, 61, 206, 123, 136, 189, 211, 2, 194, 186, 121, 205, 3, 190, 158, 145, 215, 61, 172, 155, 217, 189, 201, 136, 69, 188, 54, 67, 69, 189, 16, 99, 13, 190, 125, 37, 3, 62, 86, 242, 173, 61, 176, 198, 23, 190, 231, 150, 185, 60, 142, 103, 119, 188, 156, 239, 114, 61, 134, 25, 41, 62, 134, 167, 169, 189, 123, 4, 140, 60, 10, 7, 50, 190, 7, 112, 13, 62, 106, 132, 129, 187, 179, 106, 25, 61, 177, 7, 44, 190, 166, 124, 136, 189, 255, 56, 234, 188, 126, 19, 120, 189, 95, 117, 50, 189, 94, 198, 95, 189, 76, 104, 253, 188, 160, 105, 52, 190, 34, 156, 241, 189, 78, 97, 95, 189, 71, 221, 50, 62, 56, 117, 38, 62, 39, 35, 49, 190, 89, 223, 205, 189, 229, 178, 5, 62, 250, 213, 195, 189, 118, 138, 242, 61, 225, 117, 171, 189, 29, 115, 55, 61, 176, 220, 235, 60, 4, 184, 228, 189, 253, 158, 198, 60, 60, 166, 24, 190, 82, 174, 43, 190, 113, 167, 212, 59, 168, 42, 52, 190, 108, 179, 37, 60, 79, 5, 164, 189, 91, 78, 134, 189, 196, 139, 38, 190, 243, 33, 17, 62, 168, 246, 44, 190, 246, 237, 44, 62, 122, 74, 158, 188, 149, 39, 36, 62, 154, 28, 22, 190, 82, 50, 239, 61, 201, 45, 70, 61, 111, 244, 16, 60, 137, 116, 24, 190, 150, 31, 39, 190, 155, 212, 18, 190, 100, 199, 248, 189, 169, 2, 32, 62, 192, 73, 143, 61, 140, 22, 154, 188, 92, 179, 100, 189, 248, 91, 184, 189, 170, 20, 199, 189, 204, 110, 189, 59, 154, 76, 134, 189, 183, 45, 218, 189, 187, 189, 199, 189, 139, 167, 226, 189, 90, 110, 173, 187, 0, 152, 16, 62, 62, 50, 50, 190, 160, 181, 32, 190, 60, 64, 3, 189, 11, 67, 197, 189, 209, 115, 169, 61, 79, 217, 190, 61, 72, 188, 2, 189, 108, 55, 210, 189, 44, 159, 39, 190, 104, 246, 37, 62, 150, 242, 47, 190, 215, 180, 156, 188, 180, 232, 254, 189, 118, 11, 92, 61, 190, 7, 147, 189, 231, 184, 138, 61, 47, 230, 62, 188, 12, 24, 39, 61, 174, 170, 187, 61, 174, 126, 135, 60, 175, 192, 190, 61, 95, 58, 234, 189, 6, 87, 138, 61, 58, 40, 5, 61, 223, 16, 15, 62, 118, 68, 24, 190, 198, 61, 185, 61, 60, 193, 181, 189, 207, 3, 129, 61, 81, 34, 1, 190, 255, 178, 131, 61, 255, 26, 144, 188, 202, 116, 166, 189, 30, 63, 205, 61, 58, 10, 222, 61, 161, 58, 10, 189, 234, 98, 187, 189, 218, 202, 38, 62, 230, 18, 102, 60, 194, 164, 35, 190, 95, 192, 71, 61, 236, 243, 199, 61, 101, 93, 164, 61, 108, 81, 121, 61, 90, 189, 39, 190, 29, 59, 172, 187, 28, 54, 75, 61, 109, 17, 28, 62, 38, 199, 131, 61, 188, 251, 160, 189, 179, 227, 229, 61, 167, 70, 22, 61, 202, 101, 213, 60, 113, 179, 235, 61, 186, 113, 237, 185, 59, 125, 42, 62, 201, 159, 248, 189, 135, 222, 64, 60, 100, 169, 16, 190, 43, 122, 245, 61, 109, 195, 227, 188, 115, 132, 225, 61, 52, 247, 8, 190, 16, 134, 11, 190, 117, 154, 72, 189, 100, 46, 108, 189, 157, 212, 146, 61, 230, 47, 122, 61, 139, 163, 8, 190, 64, 170, 155, 189, 42, 248, 170, 189, 214, 220, 43, 190, 184, 249, 22, 190, 79, 138, 168, 61, 68, 113, 3, 61, 227, 82, 51, 62, 34, 197, 154, 189, 94, 61, 39, 190, 254, 119, 140, 61, 25, 60, 51, 190, 168, 115, 250, 61, 81, 186, 12, 62, 224, 123, 87, 60, 142, 60, 156, 61, 158, 92, 52, 190, 67, 90, 20, 60, 55, 159, 30, 62, 4, 166, 187, 189, 119, 92, 8, 62, 173, 177, 235, 61, 12, 68, 106, 189, 152, 103, 99, 61, 157, 224, 154, 61, 119, 32, 134, 188, 2, 255, 234, 189, 213, 9, 3, 62, 228, 134, 162, 61, 141, 212, 48, 190, 228, 76, 143, 189, 119, 19, 168, 189, 200, 61, 228, 189, 65, 57, 91, 61, 203, 99, 193, 61, 152, 129, 33, 189, 157, 72, 20, 190, 63, 188, 141, 61, 34, 194, 9, 189, 92, 174, 147, 61, 194, 27, 243, 188, 157, 38, 192, 61, 200, 146, 59, 61, 15, 249, 172, 188, 207, 254, 184, 61, 91, 146, 102, 60, 82, 40, 46, 187, 83, 220, 236, 189, 185, 70, 242, 60, 81, 70, 8, 189, 102, 24, 25, 62, 161, 8, 128, 61, 28, 250, 61, 189, 16, 65, 110, 61, 143, 113, 61, 61, 103, 67, 0, 190, 20, 201, 14, 190, 187, 242, 30, 62, 95, 209, 38, 189, 199, 6, 161, 188, 124, 96, 24, 190, 176, 106, 124, 61, 58, 151, 48, 62, 135, 193, 2, 189, 231, 195, 42, 62, 90, 50, 43, 62, 195, 208, 52, 190, 169, 114, 83, 188, 214, 235, 50, 62, 11, 130, 15, 61, 53, 232, 43, 190, 199, 115, 45, 190, 189, 150, 153, 189, 30, 107, 126, 188, 26, 91, 132, 189, 129, 134, 139, 189, 42, 106, 13, 62, 250, 152, 215, 188, 52, 243, 4, 189, 28, 122, 61, 59, 3, 0, 31, 62, 203, 99, 212, 61, 76, 23, 3, 189, 102, 212, 22, 190, 220, 185, 57, 57, 249, 13, 24, 62, 106, 133, 69, 189, 207, 227, 13, 190, 11, 254, 174, 59, 152, 18, 66, 189, 111, 139, 5, 190, 154, 135, 26, 62, 31, 72, 169, 189, 1, 66, 218, 189, 77, 51, 212, 59, 92, 166, 97, 189, 167, 79, 92, 61, 101, 114, 34, 189, 116, 136, 236, 189, 201, 205, 225, 189, 204, 4, 196, 189, 54, 6, 2, 61, 88, 113, 81, 60, 32, 12, 226, 189, 41, 169, 222, 60, 57, 104, 229, 60, 99, 43, 164, 61, 181, 48, 3, 190, 171, 88, 198, 189, 84, 73, 179, 60, 77, 52, 10, 62, 8, 72, 33, 189, 116, 221, 144, 61, 68, 194, 34, 190, 17, 74, 152, 61, 167, 237, 45, 189, 107, 200, 24, 62, 234, 134, 236, 189, 36, 210, 121, 189, 166, 167, 6, 190, 134, 185, 35, 189, 23, 53, 99, 189, 40, 70, 219, 60, 226, 79, 26, 62, 174, 15, 245, 189, 71, 127, 192, 189, 163, 66, 21, 186, 145, 95, 194, 188, 81, 35, 205, 60, 198, 61, 15, 62, 44, 89, 201, 189, 201, 19, 10, 62, 141, 75, 44, 187, 244, 77, 8, 60, 253, 246, 45, 62, 6, 111, 1, 59, 64, 24, 36, 189, 101, 131, 35, 190, 126, 90, 136, 61, 149, 254, 193, 187, 174, 189, 28, 190, 203, 126, 23, 190, 136, 0, 19, 61, 11, 51, 223, 60, 76, 191, 147, 61, 223, 65, 35, 62, 60, 17, 202, 188, 144, 26, 25, 62, 225, 214, 27, 190, 205, 126, 29, 62, 17, 38, 31, 62, 158, 201, 140, 61, 79, 146, 8, 189, 54, 227, 1, 188, 52, 171, 71, 61, 99, 6, 229, 61, 96, 101, 92, 60, 195, 169, 41, 62, 126, 133, 135, 189, 50, 26, 238, 61, 127, 141, 189, 189, 23, 162, 127, 61, 209, 65, 120, 189, 225, 183, 161, 189, 9, 41, 187, 61, 154, 28, 211, 61, 196, 164, 175, 61, 62, 219, 37, 188, 62, 122, 162, 189, 183, 216, 3, 190, 116, 208, 187, 61, 216, 204, 42, 62, 14, 53, 7, 61, 74, 185, 136, 61, 203, 98, 24, 190, 139, 187, 176, 189, 232, 107, 179, 189, 14, 17, 245, 61, 143, 138, 13, 62, 36, 79, 144, 189, 43, 95, 255, 61, 192, 160, 20, 190, 63, 144, 154, 61, 252, 40, 241, 189, 86, 71, 207, 61, 37, 78, 196, 61, 63, 31, 31, 190, 148, 171, 117, 60, 192, 172, 144, 189, 62, 83, 67, 189, 131, 126, 251, 60, 224, 86, 15, 62, 220, 163, 198, 61, 164, 201, 176, 189, 63, 151, 43, 62, 35, 129, 146, 189, 157, 103, 15, 62, 67, 236, 223, 61, 122, 225, 12, 190, 163, 181, 72, 189, 6, 50, 15, 190, 57, 200, 19, 62, 144, 61, 45, 190, 87, 222, 9, 190, 171, 24, 217, 189, 171, 223, 97, 189, 42, 113, 33, 190, 106, 158, 246, 61, 148, 211, 23, 62, 177, 182, 197, 61, 13, 49, 182, 61, 83, 137, 101, 188, 239, 141, 130, 59, 177, 85, 16, 62, 183, 2, 47, 62, 241, 182, 32, 190, 63, 106, 31, 61, 1, 164, 74, 61, 194, 34, 139, 189, 177, 119, 29, 62, 163, 222, 89, 61, 49, 208, 33, 190, 100, 194, 130, 60, 89, 90, 156, 189, 110, 244, 146, 189, 246, 56, 165, 188, 168, 174, 166, 61, 106, 81, 85, 188, 14, 29, 198, 60, 91, 163, 4, 190, 121, 150, 48, 190, 77, 27, 164, 61, 250, 23, 130, 61, 42, 126, 229, 189, 76, 195, 19, 61, 142, 57, 6, 189, 50, 10, 154, 61, 159, 153, 48, 190, 128, 34, 249, 189, 229, 29, 131, 61, 98, 79, 28, 62, 6, 3, 23, 62, 49, 170, 36, 62, 19, 49, 196, 61, 95, 21, 218, 188, 123, 225, 46, 62, 150, 172, 42, 190, 32, 100, 176, 189, 34, 180, 232, 189, 68, 45, 26, 190, 65, 7, 11, 190, 254, 181, 78, 189, 3, 30, 134, 188, 180, 184, 194, 189, 39, 138, 225, 61, 6, 238, 71, 61, 255, 198, 250, 61, 8, 54, 159, 188, 59, 9, 37, 61, 155, 62, 8, 62, 221, 249, 0, 189, 182, 135, 59, 61, 128, 122, 30, 62, 235, 42, 239, 60, 159, 98, 65, 189, 88, 155, 13, 190, 149, 158, 97, 61, 191, 84, 51, 62, 67, 163, 51, 61, 254, 237, 102, 189, 187, 146, 52, 189, 223, 151, 219, 61, 39, 25, 35, 61, 46, 223, 36, 189, 153, 51, 42, 190, 82, 64, 220, 189, 70, 192, 11, 190, 77, 88, 221, 61, 89, 152, 165, 189, 65, 35, 196, 61, 71, 136, 237, 189, 248, 65, 50, 62, 10, 58, 214, 61, 239, 249, 35, 190, 88, 174, 222, 189, 199, 192, 155, 61, 24, 3, 246, 61, 64, 186, 243, 61, 237, 116, 223, 61, 233, 183, 151, 189, 110, 140, 6, 62, 56, 48, 128, 61, 97, 185, 37, 62, 102, 52, 34, 62, 77, 172, 183, 60, 16, 118, 108, 189, 211, 100, 233, 189, 136, 202, 33, 190, 140, 185, 66, 61, 16, 174, 180, 188, 205, 116, 41, 190, 105, 8, 214, 61, 154, 2, 136, 60, 251, 142, 183, 61, 103, 145, 225, 189, 160, 0, 148, 61, 228, 181, 7, 62, 177, 51, 43, 61, 227, 194, 183, 188, 132, 95, 252, 189, 163, 238, 162, 59, 234, 246, 5, 62, 165, 247, 185, 60, 17, 20, 90, 61, 130, 177, 15, 188, 129, 109, 233, 60, 218, 234, 31, 190, 207, 252, 45, 61, 28, 87, 43, 190, 84, 123, 113, 189, 116, 118, 20, 62, 232, 204, 40, 61, 103, 234, 186, 60, 62, 122, 251, 189, 187, 247, 142, 189, 127, 84, 49, 62, 181, 122, 168, 61, 194, 124, 234, 189, 124, 146, 120, 61, 70, 247, 45, 189, 107, 137, 169, 187, 16, 196, 140, 60, 97, 213, 87, 189, 212, 132, 227, 60, 60, 128, 195, 61, 248, 164, 29, 189, 140, 67, 20, 62, 92, 207, 38, 189, 48, 60, 79, 60, 50, 195, 204, 61, 196, 106, 65, 189, 160, 120, 173, 61, 195, 161, 36, 190, 150, 246, 186, 61, 21, 128, 204, 189, 123, 42, 158, 61, 207, 40, 207, 61, 156, 233, 51, 190, 161, 99, 44, 189, 91, 137, 206, 61, 70, 165, 89, 61, 124, 167, 137, 188, 142, 10, 149, 61, 30, 12, 48, 62, 143, 19, 229, 189, 97, 191, 167, 189, 228, 130, 223, 61, 104, 238, 164, 60, 158, 135, 230, 60, 80, 47, 187, 189, 178, 223, 73, 61, 41, 87, 5, 189, 222, 164, 44, 62, 116, 7, 224, 189, 93, 119, 220, 188, 82, 3, 249, 189, 123, 164, 63, 59, 255, 65, 122, 59, 160, 216, 42, 190, 184, 168, 166, 189, 17, 219, 25, 190, 54, 250, 44, 190, 194, 155, 113, 189, 228, 175, 173, 188, 85, 94, 32, 61, 104, 233, 148, 61, 120, 46, 46, 62, 208, 131, 193, 60, 121, 212, 150, 188, 196, 58, 182, 189, 255, 194, 101, 61, 84, 252, 27, 190, 255, 20, 6, 60, 41, 220, 60, 60, 81, 247, 56, 188, 179, 221, 238, 61, 211, 11, 40, 62, 216, 251, 176, 61, 38, 29, 227, 60, 0, 80, 234, 188, 118, 123, 222, 61, 52, 141, 120, 61, 127, 3, 2, 190, 225, 151, 251, 61, 61, 73, 39, 189, 229, 52, 49, 190, 125, 93, 52, 62, 53, 146, 63, 61, 124, 211, 243, 61, 79, 18, 18, 190, 190, 163, 31, 189, 180, 142, 183, 61, 59, 194, 243, 189, 157, 198, 56, 188, 97, 56, 43, 189, 51, 88, 87, 189, 44, 83, 178, 189, 4, 69, 150, 189, 141, 196, 156, 57, 15, 41, 155, 61, 214, 200, 44, 190, 183, 170, 154, 189, 66, 136, 192, 188, 251, 23, 178, 189, 68, 14, 80, 61, 132, 197, 250, 189, 241, 238, 136, 61, 89, 165, 32, 62, 179, 5, 218, 189, 4, 28, 255, 61, 152, 172, 52, 190, 187, 203, 44, 190, 60, 208, 189, 61, 54, 84, 53, 189, 98, 154, 41, 190, 245, 239, 45, 62, 231, 77, 195, 189, 111, 21, 237, 189, 207, 218, 8, 189, 67, 251, 223, 189, 249, 220, 40, 60, 227, 156, 148, 188, 22, 164, 11, 190, 70, 251, 22, 62, 6, 73, 140, 60, 104, 118, 179, 60, 34, 59, 18, 62, 51, 81, 48, 190, 184, 240, 152, 189, 115, 177, 93, 59, 129, 237, 138, 189, 65, 182, 190, 61, 156, 170, 194, 189, 15, 65, 45, 62, 151, 178, 160, 59, 88, 253, 57, 61, 38, 219, 189, 189, 168, 132, 68, 61, 71, 20, 180, 189, 63, 33, 208, 60, 92, 132, 175, 189, 183, 105, 61, 188, 217, 215, 26, 62, 61, 205, 229, 61, 168, 61, 197, 60, 121, 25, 28, 190, 201, 229, 1, 62, 76, 189, 191, 61, 40, 141, 23, 190, 78, 186, 51, 62, 233, 96, 38, 190, 92, 61, 121, 61, 73, 40, 7, 190, 33, 43, 31, 190, 83, 130, 35, 189, 130, 69, 250, 61, 27, 225, 147, 61, 30, 199, 46, 190, 59, 80, 182, 61, 41, 188, 153, 189, 33, 18, 30, 190, 55, 75, 98, 189, 77, 9, 233, 189, 151, 206, 86, 189, 23, 216, 57, 187, 179, 182, 141, 61, 75, 163, 17, 62, 196, 74, 246, 187, 84, 231, 153, 61, 34, 166, 253, 61, 193, 181, 16, 190, 76, 225, 12, 61, 1, 206, 25, 60, 214, 203, 185, 61, 78, 7, 6, 190, 181, 16, 82, 188, 35, 226, 50, 190, 244, 175, 246, 189, 184, 27, 93, 187, 9, 255, 10, 190, 200, 214, 251, 61, 163, 248, 20, 190, 181, 197, 199, 61, 226, 34, 80, 60, 34, 154, 20, 189, 206, 155, 255, 61, 105, 174, 253, 60, 81, 32, 255, 60, 238, 66, 43, 62, 63, 55, 50, 190, 225, 112, 254, 189, 223, 222, 189, 59, 191, 219, 34, 62, 106, 127, 20, 62, 238, 248, 186, 189, 255, 251, 202, 60, 39, 73, 19, 189, 199, 216, 5, 190, 171, 97, 17, 62, 199, 240, 226, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {188, 162, 179, 61, 200, 214, 210, 189, 19, 225, 161, 188, 196, 24, 243, 61, 165, 214, 8, 62, 112, 206, 129, 60, 111, 53, 40, 61, 91, 253, 168, 61, 165, 35, 240, 189, 107, 14, 221, 188, 210, 252, 10, 190, 118, 109, 32, 62, 232, 54, 92, 61, 191, 163, 247, 60, 237, 193, 252, 61, 135, 102, 20, 61, 171, 25, 212, 188, 222, 47, 48, 188, 181, 194, 52, 62, 205, 229, 38, 189, 186, 246, 116, 189, 37, 106, 223, 61, 201, 169, 8, 61, 96, 188, 28, 61, 71, 139, 145, 61, 61, 141, 201, 61, 13, 65, 192, 61, 101, 7, 132, 60, 144, 241, 0, 190, 119, 4, 103, 61, 55, 143, 31, 190, 188, 194, 218, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 148, 38, 190, 163, 24, 28, 189, 66, 166, 8, 62, 47, 130, 212, 189, 226, 212, 242, 61, 203, 231, 48, 190, 12, 190, 45, 62, 189, 29, 231, 189, 59, 197, 24, 62, 49, 58, 9, 61, 194, 182, 4, 190, 143, 171, 24, 187, 117, 70, 187, 61, 127, 86, 106, 188, 65, 136, 231, 60, 26, 179, 31, 190, 14, 69, 166, 61, 118, 190, 12, 62, 105, 176, 152, 189, 160, 66, 103, 189, 250, 120, 96, 60, 92, 25, 214, 61, 100, 226, 22, 190, 35, 218, 39, 62, 191, 76, 170, 61, 219, 207, 196, 188, 0, 133, 232, 188, 48, 192, 208, 189, 3, 123, 31, 190, 96, 50, 17, 62, 47, 71, 52, 190, 174, 196, 254, 188, 170, 154, 146, 187, 63, 30, 230, 61, 124, 136, 21, 62, 181, 158, 137, 189, 167, 184, 9, 190, 109, 194, 40, 190, 216, 137, 1, 190, 140, 220, 19, 62, 152, 242, 149, 61, 195, 162, 43, 190, 49, 63, 37, 61, 21, 78, 128, 189, 80, 251, 111, 189, 241, 162, 130, 189, 143, 219, 204, 189, 172, 254, 218, 188, 210, 185, 140, 61, 88, 120, 43, 62, 62, 210, 139, 61, 178, 86, 44, 62, 236, 135, 47, 190, 37, 56, 209, 61, 29, 84, 229, 61, 89, 63, 245, 60, 220, 203, 84, 61, 122, 35, 237, 189, 58, 48, 5, 190, 21, 185, 66, 188, 237, 19, 241, 59, 239, 250, 189, 189, 49, 178, 183, 61, 223, 125, 43, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 191, 248, 188, 213, 46, 15, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {87, 49, 3, 192, 27, 139, 52, 191, 83, 42, 35, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {108, 208, 210, 189, 247, 246, 37, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0075/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}