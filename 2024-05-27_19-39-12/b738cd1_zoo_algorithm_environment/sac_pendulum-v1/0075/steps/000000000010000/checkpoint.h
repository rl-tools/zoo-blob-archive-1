// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {246, 155, 67, 63, 155, 101, 34, 63, 98, 138, 178, 62, 111, 213, 138, 62, 39, 209, 12, 63, 185, 170, 22, 62, 119, 101, 57, 191, 111, 43, 177, 190, 193, 241, 14, 188, 58, 121, 83, 63, 87, 44, 149, 191, 101, 19, 158, 190, 69, 95, 236, 62, 153, 54, 64, 191, 134, 86, 38, 191, 129, 77, 54, 190, 144, 77, 92, 63, 23, 90, 176, 59, 242, 134, 241, 190, 87, 151, 125, 63, 151, 155, 42, 190, 124, 3, 4, 191, 83, 236, 169, 63, 16, 62, 22, 63, 195, 122, 14, 61, 51, 201, 154, 63, 91, 104, 3, 63, 173, 50, 10, 191, 224, 73, 4, 63, 53, 27, 199, 62, 200, 108, 18, 62, 127, 116, 133, 61, 190, 97, 100, 191, 129, 124, 202, 62, 254, 14, 161, 191, 50, 24, 137, 60, 244, 26, 62, 191, 165, 117, 9, 191, 78, 210, 193, 188, 180, 94, 135, 62, 7, 38, 145, 62, 177, 67, 187, 62, 157, 27, 80, 190, 177, 35, 210, 190, 133, 202, 202, 62, 191, 43, 226, 190, 219, 14, 180, 191, 154, 163, 104, 190, 11, 136, 240, 189, 148, 167, 158, 62, 163, 140, 166, 62, 128, 141, 58, 63, 127, 186, 144, 191, 225, 161, 175, 190, 121, 217, 10, 191, 86, 229, 109, 62, 128, 100, 195, 190, 229, 136, 217, 61, 3, 167, 61, 63, 33, 250, 160, 190, 76, 173, 153, 188, 94, 145, 58, 190, 173, 198, 36, 189, 235, 46, 25, 63, 36, 225, 227, 189, 20, 56, 54, 191, 129, 189, 58, 190, 50, 136, 119, 60, 70, 92, 2, 190, 114, 253, 34, 191, 105, 186, 24, 190, 112, 235, 10, 191, 182, 156, 120, 63, 195, 135, 150, 62, 81, 64, 255, 61, 5, 30, 185, 62, 115, 233, 11, 63, 153, 65, 132, 189, 145, 114, 173, 61, 132, 244, 238, 62, 76, 200, 242, 190, 7, 3, 32, 63, 207, 254, 155, 62, 110, 226, 236, 62, 199, 33, 171, 190, 252, 202, 17, 62, 213, 41, 41, 63, 77, 154, 83, 191, 221, 7, 94, 63, 222, 116, 48, 63, 183, 133, 69, 63, 147, 111, 7, 191, 20, 68, 64, 61, 239, 45, 47, 63, 131, 209, 169, 190, 61, 164, 9, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {191, 138, 232, 190, 178, 18, 50, 62, 165, 126, 90, 62, 127, 177, 146, 190, 61, 156, 233, 190, 219, 182, 148, 62, 109, 149, 0, 190, 96, 230, 20, 62, 210, 47, 32, 63, 152, 247, 197, 190, 199, 2, 157, 188, 107, 196, 245, 189, 206, 135, 137, 62, 230, 153, 130, 189, 73, 18, 233, 62, 248, 172, 21, 62, 37, 189, 109, 63, 153, 56, 194, 190, 42, 123, 194, 188, 73, 103, 245, 61, 98, 93, 44, 63, 211, 254, 241, 62, 245, 70, 218, 62, 3, 41, 150, 190, 209, 106, 169, 189, 220, 96, 98, 62, 154, 234, 155, 189, 85, 216, 26, 62, 148, 48, 248, 189, 94, 22, 82, 190, 95, 195, 172, 62, 41, 237, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {13, 236, 26, 190, 190, 113, 252, 189, 255, 203, 154, 61, 75, 219, 81, 61, 209, 32, 163, 61, 106, 157, 232, 189, 2, 25, 19, 190, 200, 102, 254, 60, 123, 238, 62, 190, 186, 133, 73, 60, 154, 152, 31, 190, 157, 237, 166, 62, 252, 54, 227, 61, 14, 13, 142, 189, 33, 41, 223, 188, 215, 9, 40, 62, 226, 142, 97, 190, 217, 201, 35, 62, 167, 59, 201, 60, 156, 52, 242, 190, 255, 171, 51, 189, 201, 21, 217, 189, 80, 29, 18, 190, 19, 223, 18, 189, 39, 157, 103, 190, 240, 168, 214, 189, 105, 154, 53, 190, 81, 183, 135, 61, 239, 43, 70, 188, 157, 135, 31, 190, 192, 153, 155, 60, 104, 64, 93, 61, 64, 40, 142, 61, 184, 156, 220, 61, 86, 129, 98, 190, 249, 254, 136, 191, 181, 11, 57, 190, 60, 79, 168, 62, 190, 233, 224, 62, 43, 170, 147, 189, 36, 176, 198, 62, 196, 28, 15, 189, 143, 180, 77, 190, 48, 117, 169, 190, 54, 28, 199, 190, 47, 141, 69, 61, 74, 18, 82, 189, 168, 115, 31, 191, 25, 175, 230, 61, 144, 204, 134, 191, 221, 201, 185, 62, 227, 194, 44, 62, 222, 32, 231, 189, 252, 71, 132, 62, 63, 60, 13, 62, 5, 72, 231, 189, 162, 44, 205, 62, 94, 44, 157, 62, 117, 182, 125, 189, 26, 109, 206, 61, 231, 222, 37, 62, 57, 19, 133, 60, 247, 167, 231, 61, 213, 155, 114, 189, 239, 51, 86, 190, 32, 45, 135, 190, 38, 77, 92, 190, 112, 184, 88, 62, 114, 112, 92, 62, 104, 43, 129, 189, 61, 28, 196, 190, 227, 111, 43, 62, 229, 31, 251, 188, 221, 231, 192, 61, 35, 24, 125, 61, 167, 58, 19, 61, 99, 25, 211, 190, 71, 101, 184, 61, 214, 247, 22, 62, 215, 161, 66, 190, 238, 24, 44, 62, 161, 8, 216, 61, 217, 190, 159, 189, 100, 141, 10, 190, 222, 190, 195, 188, 24, 111, 14, 62, 252, 54, 106, 61, 28, 40, 103, 190, 204, 89, 190, 61, 140, 111, 244, 59, 130, 213, 116, 61, 232, 11, 141, 190, 58, 164, 24, 62, 103, 139, 114, 61, 17, 91, 121, 61, 15, 194, 210, 62, 128, 214, 206, 189, 171, 190, 72, 62, 158, 73, 39, 189, 148, 206, 106, 191, 186, 96, 153, 190, 247, 14, 46, 190, 118, 113, 45, 190, 217, 83, 148, 190, 4, 13, 48, 190, 119, 244, 75, 62, 6, 223, 130, 62, 151, 5, 78, 190, 33, 45, 143, 60, 190, 251, 252, 187, 86, 10, 23, 62, 61, 72, 159, 189, 157, 248, 174, 61, 74, 221, 67, 191, 143, 68, 125, 60, 175, 146, 2, 62, 76, 236, 18, 62, 133, 36, 67, 62, 152, 180, 52, 190, 113, 43, 139, 189, 99, 182, 168, 62, 226, 24, 24, 189, 29, 223, 59, 61, 2, 223, 137, 62, 220, 195, 65, 62, 240, 2, 199, 188, 66, 244, 150, 61, 207, 99, 250, 189, 54, 184, 237, 61, 210, 155, 65, 190, 166, 243, 184, 61, 26, 113, 27, 61, 75, 228, 103, 62, 90, 226, 96, 61, 68, 209, 48, 190, 225, 76, 60, 61, 208, 173, 70, 62, 41, 167, 12, 190, 160, 24, 127, 190, 206, 35, 30, 62, 111, 111, 252, 61, 247, 114, 162, 60, 59, 55, 139, 61, 200, 86, 67, 190, 61, 34, 47, 62, 166, 56, 8, 189, 17, 244, 133, 187, 58, 52, 31, 60, 42, 164, 150, 62, 203, 204, 170, 61, 156, 41, 61, 62, 81, 193, 23, 60, 143, 76, 17, 62, 56, 44, 146, 61, 83, 194, 140, 190, 218, 41, 120, 188, 154, 153, 11, 190, 131, 58, 148, 62, 249, 145, 202, 62, 20, 234, 157, 60, 85, 213, 66, 62, 93, 78, 16, 63, 91, 35, 146, 62, 213, 154, 113, 191, 21, 86, 158, 189, 93, 8, 156, 189, 111, 99, 188, 61, 122, 49, 197, 191, 5, 73, 217, 190, 6, 12, 172, 62, 116, 178, 22, 61, 203, 77, 11, 191, 62, 117, 78, 62, 45, 84, 215, 61, 124, 59, 253, 61, 125, 211, 34, 63, 96, 124, 107, 190, 92, 198, 183, 190, 41, 245, 164, 190, 2, 200, 10, 62, 72, 225, 237, 188, 163, 125, 18, 61, 214, 222, 126, 62, 163, 62, 242, 61, 209, 35, 43, 63, 157, 42, 4, 188, 47, 19, 133, 62, 119, 12, 43, 62, 55, 83, 236, 62, 11, 29, 172, 191, 41, 205, 153, 190, 27, 136, 180, 190, 144, 25, 109, 61, 215, 157, 109, 189, 113, 195, 160, 61, 135, 39, 121, 61, 70, 89, 3, 190, 29, 118, 220, 61, 48, 81, 17, 62, 198, 0, 5, 190, 162, 102, 4, 189, 160, 42, 205, 189, 158, 251, 16, 62, 38, 129, 18, 190, 160, 213, 70, 190, 92, 141, 34, 190, 224, 233, 83, 189, 62, 163, 70, 190, 232, 199, 120, 189, 210, 140, 201, 61, 71, 26, 218, 61, 129, 8, 97, 190, 223, 76, 140, 189, 168, 3, 30, 189, 214, 240, 26, 62, 64, 198, 47, 190, 69, 140, 229, 189, 7, 25, 240, 188, 36, 4, 97, 190, 174, 52, 25, 62, 236, 87, 23, 189, 45, 85, 19, 62, 237, 8, 40, 190, 132, 78, 247, 189, 238, 175, 54, 190, 158, 161, 213, 188, 145, 30, 0, 188, 111, 204, 43, 191, 97, 118, 80, 190, 108, 217, 17, 62, 36, 97, 109, 62, 158, 78, 15, 62, 28, 252, 81, 62, 106, 81, 180, 189, 101, 204, 159, 61, 120, 87, 53, 62, 68, 250, 194, 190, 163, 63, 37, 60, 242, 107, 16, 189, 232, 110, 111, 190, 101, 88, 68, 62, 81, 223, 131, 191, 43, 0, 144, 62, 20, 49, 98, 60, 42, 69, 17, 189, 169, 104, 54, 62, 215, 25, 5, 190, 209, 159, 205, 190, 119, 89, 203, 61, 148, 220, 19, 62, 86, 69, 138, 61, 227, 255, 89, 189, 253, 110, 202, 60, 132, 13, 17, 62, 223, 32, 8, 62, 124, 26, 235, 61, 160, 244, 151, 190, 231, 62, 167, 190, 227, 37, 130, 188, 69, 203, 101, 62, 173, 11, 37, 61, 14, 43, 131, 62, 61, 4, 11, 62, 173, 18, 65, 61, 192, 128, 133, 62, 238, 98, 24, 191, 219, 87, 33, 189, 168, 195, 172, 62, 126, 154, 33, 190, 232, 166, 168, 190, 69, 79, 41, 62, 162, 196, 184, 190, 208, 26, 140, 62, 125, 181, 159, 62, 122, 97, 9, 61, 1, 27, 18, 61, 169, 20, 133, 62, 236, 249, 174, 60, 61, 113, 155, 189, 172, 183, 50, 190, 8, 196, 173, 189, 199, 165, 41, 61, 137, 180, 41, 190, 10, 255, 231, 189, 47, 124, 107, 190, 68, 113, 144, 61, 0, 251, 78, 62, 255, 117, 172, 62, 25, 122, 154, 189, 15, 237, 137, 189, 18, 173, 156, 62, 42, 64, 10, 63, 120, 63, 11, 190, 252, 23, 74, 62, 249, 18, 217, 188, 251, 182, 119, 61, 17, 130, 172, 61, 117, 60, 158, 190, 15, 18, 45, 191, 132, 134, 99, 190, 74, 249, 2, 62, 199, 167, 31, 190, 116, 96, 124, 62, 59, 29, 140, 61, 255, 69, 163, 62, 12, 26, 29, 62, 208, 18, 6, 63, 170, 135, 206, 191, 76, 17, 55, 62, 34, 26, 39, 191, 38, 55, 144, 59, 123, 77, 107, 62, 117, 134, 237, 190, 129, 207, 232, 190, 41, 17, 80, 191, 159, 51, 141, 188, 107, 14, 138, 190, 136, 213, 14, 62, 89, 132, 231, 189, 56, 171, 164, 190, 66, 143, 224, 188, 164, 106, 80, 62, 223, 166, 203, 190, 12, 109, 124, 189, 27, 18, 150, 190, 21, 254, 184, 58, 55, 209, 156, 60, 199, 98, 51, 190, 177, 47, 25, 62, 237, 242, 225, 61, 209, 108, 180, 189, 184, 211, 30, 62, 193, 205, 153, 190, 151, 175, 130, 60, 199, 164, 84, 189, 121, 220, 95, 191, 12, 174, 91, 62, 184, 33, 93, 190, 162, 171, 141, 190, 3, 75, 158, 190, 182, 224, 69, 60, 47, 53, 164, 188, 83, 3, 0, 61, 46, 173, 249, 190, 234, 21, 130, 62, 92, 202, 54, 62, 99, 251, 14, 191, 5, 244, 170, 62, 148, 163, 239, 189, 252, 194, 181, 189, 200, 195, 193, 61, 48, 218, 128, 62, 197, 204, 181, 190, 27, 201, 38, 62, 186, 211, 41, 191, 216, 179, 102, 191, 156, 237, 153, 190, 38, 236, 79, 62, 240, 150, 199, 62, 102, 98, 11, 189, 93, 217, 75, 62, 190, 121, 44, 190, 120, 94, 248, 189, 33, 88, 137, 61, 114, 123, 9, 191, 37, 234, 0, 190, 130, 116, 47, 61, 120, 162, 146, 191, 228, 123, 218, 61, 168, 142, 127, 191, 77, 232, 228, 60, 165, 56, 22, 189, 164, 181, 5, 62, 127, 252, 20, 61, 251, 233, 169, 188, 202, 4, 46, 190, 196, 34, 63, 62, 73, 4, 154, 62, 40, 16, 169, 61, 11, 126, 159, 189, 161, 111, 218, 189, 17, 3, 116, 189, 101, 107, 147, 62, 47, 8, 151, 62, 13, 134, 198, 189, 162, 203, 177, 59, 71, 88, 57, 190, 210, 133, 238, 61, 215, 71, 71, 188, 74, 63, 49, 61, 177, 7, 44, 190, 79, 22, 194, 189, 102, 237, 47, 189, 63, 151, 128, 189, 67, 39, 93, 189, 24, 127, 177, 189, 128, 241, 71, 189, 6, 230, 73, 190, 158, 218, 33, 190, 240, 31, 166, 189, 158, 1, 10, 62, 94, 168, 21, 62, 225, 98, 49, 190, 203, 27, 202, 189, 232, 120, 187, 61, 76, 184, 249, 189, 139, 150, 199, 61, 107, 182, 170, 189, 164, 26, 136, 60, 172, 175, 120, 60, 195, 157, 220, 189, 7, 199, 13, 187, 76, 91, 39, 190, 58, 52, 45, 190, 92, 95, 31, 189, 137, 220, 68, 190, 108, 179, 37, 60, 79, 5, 164, 189, 225, 135, 135, 189, 221, 149, 39, 190, 231, 45, 13, 62, 100, 161, 47, 190, 104, 138, 41, 62, 122, 74, 158, 188, 195, 37, 32, 62, 154, 28, 22, 190, 246, 88, 224, 61, 48, 104, 59, 61, 29, 18, 190, 59, 137, 116, 24, 190, 150, 31, 39, 190, 237, 100, 21, 190, 168, 51, 249, 189, 91, 139, 29, 62, 87, 54, 137, 61, 16, 23, 185, 188, 172, 239, 113, 189, 42, 77, 200, 189, 239, 223, 210, 189, 130, 18, 151, 186, 154, 76, 134, 189, 96, 40, 223, 189, 42, 99, 207, 189, 139, 167, 226, 189, 90, 110, 173, 187, 0, 152, 16, 62, 181, 56, 50, 190, 49, 72, 34, 190, 3, 237, 3, 190, 68, 115, 43, 190, 64, 213, 115, 62, 177, 98, 31, 62, 200, 27, 234, 189, 137, 189, 38, 62, 220, 112, 131, 61, 173, 157, 182, 62, 158, 241, 184, 61, 58, 100, 45, 190, 44, 253, 153, 190, 64, 146, 6, 190, 62, 8, 173, 188, 85, 248, 142, 60, 190, 131, 126, 61, 44, 76, 16, 190, 135, 135, 147, 62, 189, 82, 40, 189, 43, 113, 115, 61, 38, 31, 146, 188, 119, 199, 21, 62, 1, 34, 152, 188, 153, 21, 101, 62, 174, 136, 80, 190, 116, 133, 200, 62, 223, 216, 2, 62, 228, 223, 28, 189, 206, 17, 87, 190, 81, 69, 163, 189, 74, 202, 211, 61, 199, 135, 48, 62, 60, 198, 22, 62, 8, 210, 115, 61, 168, 41, 250, 60, 89, 146, 162, 190, 241, 140, 60, 191, 0, 78, 131, 190, 191, 93, 190, 189, 164, 200, 192, 62, 131, 215, 136, 61, 49, 63, 47, 62, 191, 48, 134, 61, 34, 45, 46, 190, 162, 190, 15, 190, 57, 247, 157, 190, 217, 135, 217, 61, 22, 111, 228, 61, 55, 218, 80, 191, 79, 150, 33, 62, 125, 216, 90, 191, 170, 198, 211, 61, 42, 11, 135, 62, 16, 34, 42, 189, 179, 71, 130, 62, 23, 248, 187, 189, 23, 166, 75, 189, 149, 102, 78, 62, 32, 255, 176, 62, 253, 98, 77, 61, 184, 24, 84, 62, 14, 125, 244, 189, 156, 169, 32, 190, 234, 203, 79, 61, 219, 74, 114, 189, 116, 96, 171, 61, 90, 67, 44, 61, 95, 200, 31, 188, 198, 141, 7, 63, 64, 48, 51, 62, 146, 12, 208, 61, 145, 220, 88, 190, 120, 237, 115, 62, 192, 60, 145, 62, 162, 70, 72, 60, 81, 220, 112, 191, 242, 221, 198, 189, 20, 212, 2, 62, 145, 94, 131, 190, 80, 143, 121, 62, 173, 75, 187, 62, 254, 120, 61, 62, 213, 103, 51, 63, 80, 66, 77, 190, 184, 198, 13, 191, 20, 203, 218, 61, 35, 81, 85, 191, 80, 134, 162, 189, 127, 30, 4, 62, 122, 99, 2, 190, 143, 75, 248, 189, 114, 226, 22, 191, 243, 127, 136, 189, 16, 146, 116, 190, 152, 192, 111, 62, 196, 144, 111, 62, 21, 121, 146, 188, 207, 227, 234, 190, 172, 155, 231, 190, 235, 138, 188, 189, 248, 99, 232, 62, 87, 222, 149, 62, 167, 68, 83, 62, 80, 85, 192, 61, 87, 143, 140, 62, 44, 92, 126, 61, 107, 144, 84, 190, 243, 148, 94, 190, 51, 174, 212, 61, 42, 169, 229, 189, 94, 15, 87, 190, 134, 75, 155, 62, 52, 234, 166, 190, 174, 56, 53, 62, 126, 227, 14, 62, 139, 144, 7, 60, 29, 154, 18, 189, 202, 208, 46, 62, 47, 31, 183, 60, 249, 72, 217, 188, 99, 141, 152, 189, 35, 91, 136, 62, 209, 149, 255, 60, 210, 116, 123, 190, 254, 210, 72, 190, 25, 225, 56, 190, 247, 209, 89, 61, 104, 140, 4, 189, 160, 150, 248, 62, 237, 158, 75, 62, 248, 103, 251, 61, 14, 21, 53, 62, 160, 12, 24, 191, 57, 97, 226, 190, 157, 62, 110, 190, 211, 222, 121, 61, 171, 208, 146, 189, 136, 48, 100, 190, 82, 98, 77, 189, 248, 140, 18, 62, 221, 15, 84, 190, 116, 241, 172, 189, 150, 114, 66, 189, 55, 157, 115, 62, 154, 75, 91, 61, 170, 3, 94, 189, 234, 190, 251, 190, 25, 238, 28, 189, 118, 128, 68, 62, 253, 172, 252, 60, 206, 133, 36, 61, 73, 77, 134, 61, 217, 198, 153, 62, 156, 6, 191, 62, 175, 159, 0, 189, 88, 103, 31, 62, 55, 64, 9, 62, 104, 179, 49, 59, 212, 43, 196, 61, 80, 100, 0, 61, 167, 100, 239, 190, 107, 155, 176, 190, 20, 92, 74, 190, 49, 171, 45, 62, 28, 139, 128, 62, 192, 163, 189, 61, 11, 65, 163, 62, 186, 27, 74, 61, 186, 67, 239, 61, 103, 28, 33, 189, 209, 14, 88, 190, 39, 16, 28, 190, 146, 90, 182, 62, 235, 161, 95, 62, 44, 144, 208, 190, 122, 193, 74, 189, 231, 153, 134, 62, 12, 71, 7, 62, 223, 106, 133, 62, 232, 93, 29, 190, 75, 227, 225, 188, 231, 247, 156, 62, 83, 228, 8, 190, 238, 105, 146, 62, 252, 2, 68, 191, 85, 35, 100, 191, 80, 93, 214, 61, 98, 17, 75, 190, 29, 131, 210, 190, 89, 4, 8, 190, 125, 98, 77, 62, 5, 105, 79, 189, 36, 103, 23, 62, 194, 97, 24, 60, 238, 141, 67, 188, 33, 137, 50, 190, 180, 150, 57, 190, 252, 241, 99, 190, 106, 235, 52, 62, 129, 237, 14, 62, 54, 92, 163, 190, 6, 150, 59, 186, 84, 165, 103, 190, 144, 178, 199, 60, 22, 75, 38, 190, 43, 43, 20, 190, 119, 79, 109, 188, 155, 9, 16, 190, 170, 236, 26, 191, 92, 75, 130, 188, 43, 72, 116, 190, 23, 165, 231, 60, 159, 184, 146, 62, 200, 170, 120, 61, 134, 87, 138, 62, 100, 138, 128, 189, 188, 104, 134, 62, 226, 21, 227, 62, 247, 225, 126, 62, 27, 74, 145, 61, 173, 19, 219, 61, 222, 48, 151, 188, 16, 27, 9, 190, 193, 112, 97, 62, 105, 116, 155, 61, 155, 34, 227, 189, 36, 86, 13, 190, 76, 161, 173, 190, 239, 241, 229, 62, 62, 60, 37, 190, 250, 113, 138, 62, 133, 19, 204, 62, 34, 229, 211, 189, 105, 163, 109, 62, 32, 224, 171, 191, 139, 89, 144, 61, 69, 50, 222, 190, 5, 180, 16, 61, 239, 241, 151, 190, 104, 190, 130, 190, 135, 52, 181, 190, 73, 11, 181, 189, 179, 132, 135, 61, 211, 205, 10, 190, 183, 130, 173, 62, 235, 223, 156, 187, 212, 3, 138, 188, 244, 94, 82, 62, 195, 196, 159, 189, 19, 142, 4, 190, 207, 114, 36, 61, 192, 207, 108, 62, 253, 156, 90, 189, 172, 15, 93, 191, 35, 164, 15, 191, 34, 156, 159, 190, 153, 51, 120, 190, 131, 126, 251, 60, 3, 212, 12, 62, 199, 117, 81, 61, 52, 199, 171, 189, 244, 195, 32, 62, 96, 233, 172, 189, 216, 162, 138, 61, 67, 236, 223, 61, 122, 225, 12, 190, 163, 181, 72, 189, 217, 212, 50, 190, 165, 115, 2, 62, 83, 33, 75, 190, 87, 222, 9, 190, 219, 251, 82, 190, 112, 91, 168, 189, 131, 177, 64, 190, 231, 47, 231, 61, 155, 100, 29, 62, 100, 247, 251, 59, 19, 201, 92, 61, 108, 14, 58, 189, 142, 221, 201, 188, 49, 138, 226, 61, 12, 163, 18, 62, 243, 238, 129, 190, 248, 52, 153, 189, 94, 238, 72, 61, 194, 34, 139, 189, 177, 119, 29, 62, 122, 126, 172, 187, 165, 212, 41, 190, 173, 178, 115, 190, 99, 167, 94, 190, 17, 56, 212, 61, 188, 18, 52, 62, 51, 100, 178, 61, 199, 224, 83, 62, 13, 19, 219, 61, 161, 93, 66, 62, 63, 115, 164, 61, 244, 67, 12, 190, 67, 84, 136, 187, 1, 169, 20, 189, 148, 205, 180, 61, 79, 34, 54, 190, 95, 118, 127, 62, 181, 43, 176, 190, 27, 229, 73, 62, 255, 217, 2, 62, 39, 22, 213, 61, 219, 30, 133, 62, 180, 57, 136, 62, 232, 61, 207, 61, 4, 45, 135, 60, 168, 3, 205, 61, 45, 171, 98, 190, 140, 212, 61, 62, 206, 227, 18, 190, 71, 179, 137, 190, 63, 238, 138, 190, 145, 179, 35, 61, 28, 82, 30, 62, 64, 210, 54, 189, 136, 43, 208, 62, 4, 186, 46, 62, 205, 14, 29, 190, 46, 29, 159, 190, 47, 136, 198, 189, 105, 156, 242, 60, 65, 190, 218, 190, 248, 54, 173, 189, 184, 42, 7, 62, 216, 115, 21, 190, 170, 50, 178, 189, 22, 102, 9, 191, 96, 150, 66, 190, 228, 205, 138, 62, 154, 70, 108, 190, 72, 59, 16, 190, 242, 150, 22, 190, 105, 115, 165, 59, 35, 217, 129, 61, 216, 230, 158, 62, 57, 16, 218, 190, 11, 155, 111, 190, 123, 31, 58, 190, 124, 198, 224, 189, 156, 65, 120, 62, 135, 91, 115, 62, 168, 253, 7, 62, 222, 93, 144, 62, 75, 120, 180, 61, 64, 215, 187, 190, 205, 173, 84, 62, 155, 26, 113, 190, 61, 229, 57, 188, 53, 169, 6, 62, 135, 21, 93, 62, 196, 26, 115, 190, 42, 237, 30, 61, 17, 34, 71, 62, 209, 75, 229, 61, 115, 244, 228, 61, 104, 30, 20, 61, 147, 169, 46, 189, 240, 199, 154, 189, 183, 220, 2, 190, 246, 123, 1, 62, 64, 105, 180, 189, 175, 187, 51, 190, 100, 230, 254, 61, 185, 34, 157, 60, 98, 249, 35, 189, 55, 220, 46, 190, 138, 194, 179, 61, 16, 43, 119, 62, 245, 209, 231, 61, 202, 229, 208, 60, 81, 107, 134, 189, 219, 3, 53, 62, 63, 103, 111, 62, 104, 202, 70, 61, 228, 48, 202, 61, 134, 182, 27, 189, 70, 62, 154, 188, 25, 202, 151, 189, 114, 49, 159, 189, 23, 43, 145, 190, 76, 116, 248, 189, 157, 56, 178, 61, 244, 80, 103, 190, 215, 215, 187, 188, 107, 73, 23, 190, 239, 187, 82, 189, 141, 240, 88, 60, 140, 160, 170, 189, 19, 8, 2, 190, 87, 252, 155, 61, 159, 133, 20, 62, 239, 86, 131, 189, 188, 83, 98, 189, 11, 69, 238, 188, 95, 58, 57, 189, 71, 210, 157, 61, 56, 159, 102, 190, 153, 189, 24, 62, 133, 250, 183, 189, 131, 211, 167, 61, 56, 204, 45, 62, 132, 53, 170, 188, 28, 26, 234, 61, 140, 86, 6, 61, 4, 191, 24, 61, 20, 56, 247, 189, 184, 46, 211, 61, 73, 246, 232, 60, 229, 255, 78, 190, 169, 145, 48, 62, 116, 31, 172, 61, 240, 89, 133, 62, 113, 170, 215, 62, 85, 121, 54, 62, 169, 28, 8, 191, 201, 82, 199, 190, 186, 20, 157, 190, 70, 235, 189, 189, 13, 243, 6, 191, 66, 36, 15, 190, 70, 60, 70, 59, 21, 120, 183, 62, 141, 30, 223, 190, 218, 164, 145, 62, 220, 173, 163, 61, 63, 129, 159, 61, 214, 137, 83, 62, 227, 226, 197, 189, 245, 152, 31, 191, 79, 18, 228, 190, 108, 238, 153, 187, 92, 10, 135, 189, 221, 136, 187, 61, 184, 118, 141, 60, 163, 18, 115, 62, 60, 107, 205, 62, 88, 168, 40, 62, 220, 50, 175, 62, 79, 242, 222, 62, 128, 47, 49, 62, 31, 110, 48, 191, 59, 201, 100, 61, 252, 109, 253, 190, 251, 232, 236, 188, 24, 224, 238, 60, 125, 227, 147, 189, 55, 48, 0, 63, 35, 43, 18, 63, 25, 91, 39, 61, 146, 90, 7, 63, 81, 221, 123, 61, 96, 162, 73, 62, 64, 165, 213, 61, 132, 147, 130, 190, 64, 143, 44, 63, 63, 201, 47, 190, 139, 112, 90, 190, 59, 173, 113, 62, 110, 215, 105, 187, 103, 203, 95, 62, 154, 45, 196, 62, 212, 134, 208, 62, 143, 215, 58, 190, 64, 68, 160, 189, 250, 24, 175, 60, 89, 244, 41, 190, 95, 176, 208, 190, 149, 8, 197, 189, 205, 3, 89, 190, 196, 126, 147, 190, 65, 37, 13, 62, 111, 60, 252, 189, 181, 78, 193, 60, 30, 150, 21, 62, 106, 201, 16, 62, 154, 247, 107, 190, 39, 192, 174, 190, 37, 78, 80, 62, 207, 213, 246, 62, 124, 195, 174, 61, 19, 125, 103, 62, 85, 27, 88, 190, 111, 129, 207, 189, 190, 232, 28, 62, 56, 92, 192, 190, 32, 89, 38, 191, 213, 146, 124, 62, 252, 222, 241, 189, 82, 46, 142, 190, 204, 130, 94, 62, 134, 78, 90, 190, 91, 78, 12, 62, 209, 172, 13, 62, 111, 51, 174, 190, 50, 33, 132, 189, 67, 111, 224, 61, 248, 41, 20, 190, 71, 166, 202, 61, 84, 170, 241, 190, 46, 104, 188, 62, 102, 171, 221, 189, 107, 199, 125, 190, 189, 119, 250, 189, 196, 235, 159, 190, 134, 195, 58, 62, 211, 208, 74, 62, 136, 253, 241, 62, 44, 176, 9, 190, 27, 128, 157, 60, 47, 159, 211, 189, 63, 33, 208, 60, 175, 48, 168, 189, 115, 106, 195, 188, 151, 10, 21, 62, 96, 48, 180, 61, 214, 238, 54, 188, 141, 22, 72, 190, 58, 247, 222, 61, 76, 189, 191, 61, 115, 43, 43, 190, 119, 226, 10, 62, 206, 156, 89, 190, 17, 82, 90, 61, 71, 204, 37, 190, 33, 43, 31, 190, 152, 29, 96, 189, 71, 156, 251, 61, 209, 59, 113, 61, 51, 211, 60, 190, 230, 83, 177, 61, 111, 165, 199, 189, 164, 61, 74, 190, 138, 150, 145, 189, 212, 71, 6, 190, 71, 223, 172, 189, 171, 153, 38, 189, 64, 36, 32, 61, 114, 48, 1, 62, 175, 174, 4, 187, 218, 100, 129, 62, 168, 3, 161, 62, 122, 147, 85, 189, 43, 153, 118, 190, 167, 218, 189, 60, 149, 115, 164, 188, 25, 85, 194, 190, 70, 59, 5, 191, 137, 207, 88, 190, 28, 242, 229, 190, 175, 26, 62, 62, 107, 120, 61, 190, 139, 205, 41, 62, 239, 99, 27, 190, 96, 183, 106, 62, 194, 117, 174, 62, 78, 35, 60, 187, 194, 241, 80, 60, 204, 221, 199, 61, 3, 48, 52, 62, 240, 254, 141, 62, 77, 226, 45, 189, 10, 216, 136, 189, 10, 70, 139, 189, 111, 19, 202, 62, 30, 253, 14, 62, 126, 9, 87, 61, 47, 100, 83, 62, 59, 250, 67, 190, 129, 94, 49, 191, 65, 188, 173, 62, 181, 75, 92, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {33, 197, 30, 62, 6, 250, 169, 61, 180, 72, 121, 60, 187, 130, 232, 61, 142, 101, 189, 62, 38, 100, 3, 62, 73, 54, 31, 186, 52, 86, 7, 62, 16, 111, 226, 61, 173, 218, 13, 62, 18, 132, 11, 190, 50, 154, 171, 62, 33, 86, 99, 60, 255, 66, 211, 60, 172, 90, 191, 62, 77, 44, 27, 62, 147, 220, 87, 61, 85, 216, 15, 62, 226, 163, 132, 62, 180, 157, 135, 61, 31, 89, 221, 61, 155, 207, 68, 62, 75, 14, 48, 189, 149, 25, 160, 62, 59, 169, 32, 190, 68, 120, 135, 62, 88, 1, 60, 62, 90, 224, 136, 61, 181, 83, 222, 189, 187, 233, 84, 62, 49, 48, 48, 190, 65, 184, 68, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {121, 226, 169, 190, 206, 29, 12, 191, 47, 197, 130, 62, 162, 170, 20, 191, 244, 144, 145, 62, 139, 145, 179, 191, 37, 197, 76, 62, 13, 194, 192, 190, 178, 139, 216, 62, 72, 77, 41, 63, 171, 25, 167, 190, 102, 41, 23, 191, 143, 129, 158, 61, 113, 126, 107, 188, 34, 17, 156, 62, 197, 78, 219, 190, 141, 94, 37, 63, 134, 66, 192, 62, 248, 232, 84, 190, 211, 161, 128, 191, 136, 41, 34, 62, 152, 181, 22, 63, 199, 31, 30, 190, 205, 45, 112, 62, 165, 205, 18, 63, 90, 103, 127, 61, 38, 126, 219, 60, 7, 73, 49, 191, 30, 159, 210, 190, 36, 110, 39, 63, 77, 189, 11, 190, 245, 83, 187, 190, 168, 50, 213, 189, 233, 13, 46, 62, 140, 162, 37, 62, 221, 241, 85, 186, 152, 215, 143, 190, 189, 247, 156, 61, 125, 27, 172, 189, 233, 246, 136, 59, 112, 180, 138, 61, 245, 235, 182, 189, 151, 18, 140, 189, 140, 97, 53, 190, 229, 12, 42, 189, 228, 70, 130, 189, 72, 170, 7, 190, 108, 170, 79, 189, 30, 199, 4, 62, 143, 207, 137, 62, 10, 10, 159, 61, 146, 27, 128, 62, 29, 61, 184, 190, 224, 106, 190, 61, 214, 219, 152, 61, 101, 30, 6, 189, 39, 93, 241, 62, 139, 92, 75, 189, 65, 216, 34, 190, 196, 231, 137, 62, 250, 110, 16, 190, 130, 48, 246, 189, 211, 154, 207, 61, 143, 207, 252, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {168, 207, 234, 61, 144, 248, 169, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {122, 160, 11, 61, 105, 79, 172, 62, 165, 243, 7, 64};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {28, 7, 216, 61, 163, 203, 66, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0075/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}