// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {128, 104, 55, 63, 90, 111, 70, 63, 229, 97, 192, 62, 197, 194, 120, 62, 56, 1, 47, 63, 26, 27, 255, 61, 93, 18, 72, 191, 212, 109, 146, 190, 109, 98, 8, 61, 85, 253, 80, 63, 221, 93, 167, 191, 138, 29, 170, 190, 107, 10, 14, 63, 76, 25, 130, 191, 85, 229, 42, 191, 175, 131, 163, 190, 76, 127, 143, 63, 48, 141, 197, 61, 44, 221, 18, 191, 207, 244, 127, 63, 10, 104, 204, 189, 196, 160, 62, 191, 15, 196, 194, 63, 80, 194, 254, 62, 64, 166, 230, 189, 150, 152, 155, 63, 151, 34, 215, 62, 159, 233, 245, 190, 209, 37, 41, 63, 154, 187, 218, 62, 111, 183, 76, 62, 18, 102, 29, 61, 76, 50, 92, 191, 59, 51, 161, 62, 102, 125, 231, 191, 42, 186, 44, 61, 19, 142, 18, 191, 81, 34, 40, 191, 146, 208, 138, 189, 236, 95, 129, 62, 63, 191, 126, 62, 95, 7, 180, 62, 118, 168, 113, 190, 71, 254, 6, 191, 211, 69, 199, 62, 60, 206, 212, 190, 33, 115, 199, 191, 10, 252, 143, 190, 28, 245, 160, 190, 230, 60, 23, 62, 250, 26, 124, 62, 114, 120, 60, 63, 156, 240, 170, 191, 85, 125, 170, 190, 74, 22, 56, 191, 194, 240, 30, 189, 107, 152, 208, 190, 240, 60, 40, 62, 56, 160, 72, 63, 78, 4, 186, 190, 78, 72, 225, 189, 163, 49, 110, 190, 57, 108, 30, 189, 214, 88, 15, 63, 31, 135, 183, 190, 140, 180, 47, 191, 221, 138, 130, 190, 28, 83, 155, 61, 151, 101, 50, 189, 109, 206, 79, 191, 218, 206, 182, 190, 64, 81, 11, 191, 228, 201, 120, 63, 81, 92, 200, 62, 146, 16, 69, 61, 169, 143, 145, 62, 103, 237, 36, 63, 210, 222, 104, 189, 52, 37, 220, 61, 56, 237, 19, 63, 166, 131, 232, 190, 40, 180, 28, 63, 124, 104, 150, 62, 84, 152, 246, 62, 16, 114, 207, 190, 50, 178, 44, 62, 158, 163, 35, 63, 173, 165, 109, 191, 167, 197, 139, 63, 203, 215, 25, 63, 140, 6, 20, 63, 86, 168, 57, 191, 182, 54, 209, 61, 203, 40, 37, 63, 254, 35, 3, 191, 168, 52, 9, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {18, 153, 15, 191, 153, 34, 26, 62, 48, 128, 77, 62, 78, 85, 174, 190, 222, 212, 221, 190, 62, 128, 95, 62, 42, 105, 143, 189, 210, 161, 178, 62, 238, 220, 22, 63, 21, 234, 168, 190, 7, 142, 224, 59, 140, 139, 44, 190, 81, 199, 49, 62, 194, 143, 46, 190, 18, 32, 199, 62, 96, 126, 4, 62, 213, 2, 104, 63, 161, 149, 207, 190, 49, 34, 207, 61, 49, 102, 166, 189, 197, 209, 21, 63, 134, 52, 199, 62, 126, 99, 195, 62, 152, 136, 155, 190, 144, 63, 37, 190, 53, 113, 2, 62, 62, 28, 39, 187, 85, 63, 196, 61, 220, 196, 150, 190, 89, 226, 182, 60, 163, 133, 56, 62, 115, 89, 192, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 27, 41, 190, 220, 45, 134, 191, 4, 151, 1, 190, 191, 210, 65, 62, 252, 73, 77, 62, 211, 68, 214, 189, 231, 78, 5, 190, 1, 108, 241, 188, 220, 141, 67, 190, 28, 89, 74, 60, 235, 90, 137, 189, 54, 110, 219, 62, 55, 47, 129, 60, 3, 34, 145, 60, 168, 187, 189, 189, 92, 254, 77, 62, 35, 153, 201, 190, 206, 238, 151, 62, 69, 163, 135, 190, 57, 241, 189, 190, 168, 77, 159, 188, 218, 115, 178, 188, 176, 45, 43, 190, 63, 217, 163, 190, 43, 250, 32, 191, 212, 139, 129, 189, 60, 213, 211, 189, 130, 72, 6, 191, 138, 105, 8, 60, 164, 134, 118, 190, 118, 97, 20, 62, 217, 49, 72, 62, 241, 242, 194, 61, 178, 136, 120, 61, 202, 160, 12, 190, 151, 83, 150, 191, 209, 7, 148, 190, 126, 14, 68, 62, 148, 31, 233, 62, 39, 213, 252, 189, 225, 63, 190, 62, 0, 184, 218, 188, 111, 25, 107, 190, 90, 115, 173, 190, 194, 225, 144, 190, 181, 61, 100, 61, 217, 42, 158, 188, 6, 101, 104, 191, 86, 10, 216, 61, 146, 170, 156, 191, 211, 237, 210, 62, 70, 110, 36, 62, 231, 231, 210, 189, 138, 237, 122, 62, 194, 96, 13, 62, 76, 143, 157, 189, 77, 109, 205, 62, 47, 123, 143, 62, 167, 251, 185, 189, 39, 192, 213, 61, 74, 235, 60, 62, 247, 94, 226, 60, 44, 120, 9, 62, 12, 139, 139, 189, 185, 34, 152, 190, 124, 191, 157, 190, 45, 198, 184, 190, 116, 183, 130, 62, 81, 51, 145, 62, 117, 101, 18, 190, 97, 116, 207, 190, 118, 73, 3, 62, 232, 3, 0, 190, 232, 214, 139, 61, 60, 86, 162, 61, 61, 86, 149, 60, 231, 238, 26, 191, 206, 178, 175, 60, 155, 183, 196, 61, 255, 46, 158, 190, 17, 233, 240, 61, 136, 196, 53, 62, 136, 43, 192, 189, 76, 214, 20, 190, 148, 83, 155, 189, 191, 204, 22, 62, 94, 201, 231, 187, 188, 133, 102, 190, 227, 198, 195, 61, 69, 120, 145, 188, 65, 33, 150, 61, 164, 204, 154, 190, 25, 144, 232, 61, 222, 113, 171, 60, 22, 237, 117, 61, 73, 61, 223, 62, 188, 18, 137, 189, 203, 163, 13, 62, 120, 27, 55, 189, 197, 213, 128, 191, 13, 213, 199, 190, 106, 112, 201, 190, 163, 193, 39, 190, 66, 47, 199, 190, 38, 192, 91, 190, 129, 38, 97, 62, 202, 210, 116, 62, 105, 195, 110, 190, 233, 39, 181, 60, 204, 219, 254, 56, 3, 52, 32, 62, 8, 255, 222, 190, 105, 252, 71, 61, 144, 211, 106, 191, 56, 148, 76, 61, 236, 68, 242, 61, 92, 99, 4, 62, 116, 240, 68, 62, 196, 105, 98, 190, 59, 173, 23, 189, 56, 156, 166, 62, 165, 69, 80, 189, 128, 123, 195, 60, 233, 26, 138, 62, 89, 211, 86, 62, 193, 236, 249, 188, 179, 179, 187, 61, 250, 13, 225, 189, 171, 54, 132, 61, 37, 125, 2, 190, 66, 156, 240, 61, 144, 22, 73, 61, 24, 99, 149, 62, 84, 252, 140, 62, 49, 93, 5, 190, 213, 112, 178, 61, 31, 72, 79, 62, 33, 47, 36, 190, 13, 47, 85, 190, 78, 243, 23, 62, 51, 148, 225, 61, 157, 217, 168, 59, 74, 161, 47, 61, 95, 98, 26, 190, 137, 18, 69, 62, 17, 63, 115, 188, 188, 230, 158, 189, 227, 11, 47, 61, 141, 14, 160, 62, 3, 95, 189, 61, 176, 130, 89, 62, 215, 219, 133, 189, 255, 0, 38, 62, 178, 74, 7, 62, 214, 173, 95, 190, 216, 234, 107, 188, 83, 42, 30, 190, 82, 84, 140, 62, 243, 208, 200, 62, 123, 201, 162, 187, 125, 211, 155, 62, 82, 243, 53, 63, 10, 92, 96, 62, 162, 74, 154, 191, 114, 251, 252, 189, 6, 145, 226, 60, 231, 158, 213, 61, 112, 103, 232, 191, 82, 142, 141, 190, 186, 162, 137, 62, 160, 152, 0, 61, 188, 73, 11, 191, 66, 105, 25, 62, 40, 182, 126, 62, 141, 92, 90, 61, 188, 234, 19, 63, 1, 120, 133, 190, 106, 247, 30, 191, 63, 225, 160, 190, 120, 182, 23, 62, 178, 174, 39, 60, 239, 177, 10, 61, 180, 134, 129, 62, 131, 20, 222, 61, 202, 89, 54, 63, 124, 3, 16, 61, 209, 153, 134, 62, 66, 185, 46, 62, 214, 119, 186, 62, 94, 189, 228, 191, 244, 61, 168, 190, 186, 209, 190, 190, 53, 94, 18, 61, 125, 197, 149, 189, 216, 15, 156, 61, 135, 39, 121, 61, 70, 89, 3, 190, 90, 216, 200, 61, 117, 129, 14, 62, 126, 4, 7, 190, 118, 54, 13, 189, 214, 149, 235, 189, 117, 21, 15, 62, 38, 129, 18, 190, 14, 238, 71, 190, 110, 42, 55, 190, 45, 79, 142, 189, 62, 163, 70, 190, 94, 131, 137, 189, 210, 140, 201, 61, 49, 163, 213, 61, 36, 124, 97, 190, 229, 3, 158, 189, 19, 118, 35, 189, 186, 68, 21, 62, 109, 23, 50, 190, 46, 70, 10, 190, 112, 216, 53, 189, 185, 185, 98, 190, 133, 125, 7, 62, 166, 159, 81, 189, 1, 91, 15, 62, 95, 226, 40, 190, 132, 78, 247, 189, 155, 158, 31, 190, 13, 101, 130, 189, 66, 136, 123, 61, 33, 140, 64, 191, 38, 166, 152, 190, 183, 99, 29, 60, 4, 246, 108, 62, 187, 35, 179, 61, 47, 1, 66, 62, 81, 1, 175, 189, 87, 65, 85, 61, 186, 166, 31, 62, 130, 110, 147, 190, 3, 237, 20, 60, 239, 153, 101, 188, 161, 76, 12, 191, 139, 79, 62, 62, 49, 65, 150, 191, 129, 38, 162, 62, 50, 50, 159, 59, 56, 122, 147, 188, 211, 177, 49, 62, 218, 14, 6, 190, 235, 146, 194, 190, 75, 150, 229, 61, 239, 19, 13, 62, 248, 124, 29, 61, 14, 198, 79, 189, 44, 127, 9, 61, 114, 31, 24, 62, 52, 63, 37, 62, 207, 157, 244, 61, 7, 144, 188, 190, 202, 15, 144, 190, 219, 103, 229, 189, 55, 170, 126, 62, 62, 116, 133, 61, 106, 51, 225, 62, 102, 70, 74, 62, 175, 251, 21, 62, 128, 63, 136, 62, 72, 185, 63, 191, 72, 45, 4, 189, 5, 243, 245, 62, 216, 103, 74, 190, 70, 12, 187, 190, 41, 80, 49, 62, 239, 237, 198, 190, 66, 199, 162, 62, 41, 201, 181, 62, 210, 19, 84, 187, 16, 17, 139, 61, 199, 53, 135, 62, 219, 212, 182, 60, 44, 213, 147, 189, 126, 93, 83, 190, 207, 115, 133, 189, 185, 85, 255, 61, 139, 51, 10, 190, 203, 163, 215, 189, 233, 242, 143, 190, 64, 105, 164, 59, 77, 25, 85, 62, 118, 131, 164, 62, 160, 175, 239, 189, 118, 197, 114, 60, 52, 125, 162, 62, 7, 186, 191, 62, 101, 52, 178, 190, 250, 113, 224, 62, 71, 140, 80, 61, 225, 250, 132, 61, 120, 140, 243, 61, 178, 163, 171, 190, 110, 232, 252, 190, 101, 12, 140, 190, 224, 123, 246, 61, 124, 200, 38, 190, 224, 196, 103, 62, 203, 228, 207, 62, 132, 51, 180, 62, 216, 97, 156, 189, 6, 82, 49, 63, 43, 201, 225, 191, 58, 29, 137, 62, 169, 151, 62, 191, 221, 148, 41, 62, 168, 139, 6, 63, 153, 161, 238, 190, 134, 195, 201, 190, 17, 187, 105, 191, 248, 240, 127, 188, 159, 163, 150, 190, 70, 78, 244, 61, 122, 24, 32, 190, 9, 33, 60, 191, 6, 176, 29, 58, 188, 65, 36, 62, 101, 101, 175, 190, 115, 222, 236, 189, 230, 138, 163, 191, 103, 229, 106, 190, 44, 40, 176, 189, 146, 25, 90, 190, 191, 36, 23, 62, 95, 66, 230, 61, 148, 241, 137, 190, 114, 31, 78, 62, 202, 169, 46, 190, 41, 124, 41, 61, 46, 126, 187, 186, 2, 106, 168, 191, 59, 160, 100, 62, 14, 111, 155, 190, 41, 161, 108, 190, 166, 104, 198, 190, 157, 252, 103, 60, 28, 117, 70, 189, 16, 9, 146, 188, 46, 173, 249, 190, 255, 96, 128, 62, 134, 61, 36, 62, 192, 58, 70, 191, 97, 160, 181, 62, 120, 181, 162, 189, 249, 127, 163, 189, 128, 120, 240, 61, 85, 10, 99, 62, 101, 218, 174, 190, 155, 62, 37, 62, 189, 244, 9, 191, 122, 75, 122, 191, 60, 9, 205, 190, 4, 188, 113, 62, 138, 223, 199, 62, 99, 148, 52, 189, 207, 198, 107, 62, 247, 143, 9, 190, 29, 56, 3, 190, 199, 121, 132, 189, 181, 214, 2, 191, 203, 86, 216, 189, 193, 249, 159, 61, 129, 92, 153, 191, 39, 152, 5, 62, 165, 153, 145, 191, 218, 134, 188, 61, 196, 5, 241, 188, 3, 58, 35, 62, 174, 67, 24, 61, 83, 77, 228, 59, 43, 206, 242, 189, 1, 242, 63, 62, 133, 159, 152, 62, 65, 192, 143, 61, 0, 38, 136, 189, 204, 49, 167, 189, 187, 61, 211, 187, 41, 25, 152, 62, 60, 197, 163, 62, 13, 134, 198, 189, 162, 203, 177, 59, 71, 88, 57, 190, 210, 133, 238, 61, 215, 71, 71, 188, 74, 63, 49, 61, 177, 7, 44, 190, 79, 22, 194, 189, 102, 237, 47, 189, 63, 151, 128, 189, 67, 39, 93, 189, 24, 127, 177, 189, 128, 241, 71, 189, 6, 230, 73, 190, 158, 218, 33, 190, 240, 31, 166, 189, 158, 1, 10, 62, 94, 168, 21, 62, 225, 98, 49, 190, 203, 27, 202, 189, 232, 120, 187, 61, 76, 184, 249, 189, 139, 150, 199, 61, 107, 182, 170, 189, 164, 26, 136, 60, 172, 175, 120, 60, 195, 157, 220, 189, 7, 199, 13, 187, 76, 91, 39, 190, 58, 52, 45, 190, 92, 95, 31, 189, 137, 220, 68, 190, 108, 179, 37, 60, 79, 5, 164, 189, 225, 135, 135, 189, 221, 149, 39, 190, 231, 45, 13, 62, 100, 161, 47, 190, 104, 138, 41, 62, 122, 74, 158, 188, 195, 37, 32, 62, 154, 28, 22, 190, 246, 88, 224, 61, 48, 104, 59, 61, 29, 18, 190, 59, 137, 116, 24, 190, 150, 31, 39, 190, 237, 100, 21, 190, 168, 51, 249, 189, 91, 139, 29, 62, 87, 54, 137, 61, 16, 23, 185, 188, 172, 239, 113, 189, 42, 77, 200, 189, 239, 223, 210, 189, 130, 18, 151, 186, 154, 76, 134, 189, 96, 40, 223, 189, 42, 99, 207, 189, 139, 167, 226, 189, 90, 110, 173, 187, 0, 152, 16, 62, 181, 56, 50, 190, 49, 72, 34, 190, 159, 159, 51, 190, 14, 197, 230, 189, 195, 88, 147, 62, 240, 85, 29, 62, 19, 10, 18, 189, 217, 249, 185, 62, 10, 88, 233, 61, 101, 141, 203, 62, 15, 239, 194, 61, 131, 103, 67, 190, 142, 21, 133, 190, 137, 5, 50, 190, 84, 96, 78, 187, 164, 179, 31, 56, 70, 90, 20, 61, 43, 99, 40, 189, 126, 99, 157, 62, 22, 217, 31, 189, 81, 221, 90, 61, 135, 47, 154, 60, 23, 207, 31, 62, 84, 40, 142, 188, 62, 157, 134, 62, 131, 34, 46, 190, 140, 181, 211, 62, 34, 155, 45, 62, 190, 231, 41, 61, 12, 19, 88, 190, 121, 171, 206, 189, 14, 125, 176, 61, 19, 75, 28, 62, 234, 68, 189, 61, 70, 160, 158, 61, 162, 128, 147, 188, 136, 220, 112, 190, 12, 139, 86, 191, 28, 52, 191, 190, 165, 35, 114, 190, 146, 11, 192, 62, 139, 241, 98, 60, 247, 210, 29, 62, 28, 72, 137, 61, 119, 99, 77, 190, 219, 252, 224, 189, 235, 101, 62, 190, 72, 243, 253, 61, 4, 148, 29, 62, 186, 117, 147, 191, 85, 34, 29, 62, 124, 63, 131, 191, 109, 61, 20, 62, 185, 252, 129, 62, 130, 229, 6, 189, 192, 103, 115, 62, 246, 121, 220, 189, 23, 78, 157, 188, 181, 36, 73, 62, 97, 36, 167, 62, 238, 199, 153, 60, 27, 63, 94, 62, 251, 30, 185, 189, 218, 0, 23, 190, 85, 189, 154, 61, 193, 58, 133, 189, 224, 111, 176, 61, 18, 229, 242, 61, 28, 216, 37, 189, 76, 226, 12, 63, 232, 205, 200, 61, 189, 59, 144, 62, 64, 121, 138, 190, 193, 83, 118, 62, 89, 13, 159, 62, 222, 97, 138, 187, 42, 125, 144, 191, 82, 161, 200, 189, 217, 0, 89, 61, 170, 110, 127, 190, 189, 207, 111, 62, 203, 13, 36, 63, 90, 75, 92, 62, 67, 26, 50, 63, 23, 125, 48, 190, 110, 236, 7, 191, 179, 108, 33, 62, 217, 25, 83, 191, 1, 79, 154, 60, 223, 144, 150, 62, 213, 133, 130, 189, 154, 114, 142, 189, 179, 23, 59, 191, 74, 46, 52, 189, 196, 27, 134, 190, 175, 107, 89, 62, 123, 228, 123, 62, 106, 8, 28, 190, 120, 254, 25, 191, 27, 128, 240, 190, 151, 231, 186, 189, 51, 61, 233, 62, 72, 169, 148, 62, 83, 133, 126, 62, 93, 4, 237, 61, 213, 28, 114, 62, 113, 65, 18, 60, 25, 37, 164, 190, 85, 240, 108, 190, 98, 212, 148, 62, 173, 151, 201, 189, 249, 111, 134, 190, 100, 176, 181, 62, 34, 252, 187, 190, 31, 74, 83, 62, 48, 112, 31, 62, 105, 183, 32, 189, 15, 123, 129, 188, 105, 69, 45, 62, 56, 186, 251, 59, 115, 50, 92, 189, 203, 222, 249, 189, 81, 170, 137, 62, 125, 22, 145, 61, 197, 215, 109, 190, 54, 133, 82, 190, 97, 161, 75, 190, 63, 112, 28, 189, 66, 141, 149, 188, 225, 173, 230, 62, 214, 128, 98, 62, 24, 159, 167, 61, 81, 139, 20, 62, 27, 94, 47, 191, 244, 51, 6, 191, 92, 48, 203, 190, 245, 99, 165, 61, 13, 77, 33, 190, 130, 167, 133, 190, 150, 220, 84, 189, 181, 60, 4, 62, 81, 112, 143, 190, 221, 138, 5, 190, 67, 16, 137, 189, 189, 41, 97, 62, 141, 182, 137, 190, 149, 41, 198, 189, 126, 212, 36, 191, 19, 253, 81, 188, 227, 207, 74, 62, 209, 58, 160, 60, 141, 106, 60, 61, 183, 10, 25, 61, 50, 116, 156, 62, 124, 223, 193, 62, 33, 12, 47, 189, 200, 168, 19, 62, 202, 39, 243, 61, 51, 42, 243, 187, 7, 90, 167, 61, 28, 86, 42, 61, 75, 205, 230, 190, 119, 65, 49, 191, 163, 50, 215, 190, 38, 26, 246, 61, 30, 48, 175, 62, 19, 232, 31, 62, 199, 249, 160, 62, 127, 205, 65, 60, 78, 134, 30, 62, 10, 16, 241, 188, 251, 142, 33, 190, 88, 6, 24, 190, 174, 162, 213, 62, 79, 96, 64, 62, 2, 82, 1, 191, 110, 32, 224, 188, 148, 201, 134, 62, 169, 108, 184, 61, 129, 137, 179, 62, 16, 128, 184, 190, 240, 69, 39, 61, 53, 163, 159, 62, 178, 115, 14, 190, 206, 29, 139, 62, 119, 91, 135, 191, 114, 77, 159, 191, 124, 35, 98, 60, 196, 217, 36, 190, 26, 34, 66, 191, 170, 189, 4, 190, 173, 184, 127, 62, 228, 143, 200, 59, 233, 250, 91, 62, 51, 190, 204, 60, 201, 91, 139, 61, 76, 151, 219, 190, 137, 209, 159, 189, 112, 212, 7, 190, 171, 187, 167, 62, 234, 158, 247, 61, 35, 240, 152, 188, 183, 59, 222, 60, 129, 135, 172, 190, 133, 159, 99, 61, 122, 27, 242, 189, 219, 106, 185, 190, 228, 60, 200, 188, 159, 238, 65, 190, 118, 170, 62, 191, 201, 78, 47, 60, 223, 156, 220, 189, 148, 199, 5, 189, 206, 2, 154, 62, 190, 157, 128, 61, 221, 94, 149, 62, 174, 17, 152, 189, 162, 58, 90, 62, 179, 173, 251, 62, 114, 100, 172, 62, 24, 16, 203, 61, 28, 87, 242, 61, 64, 171, 165, 189, 93, 19, 87, 189, 194, 43, 119, 62, 3, 103, 236, 61, 84, 34, 127, 189, 175, 202, 8, 189, 61, 243, 1, 191, 188, 69, 248, 62, 56, 56, 18, 190, 137, 161, 191, 62, 126, 114, 209, 62, 47, 194, 192, 62, 223, 84, 177, 62, 29, 250, 250, 191, 54, 231, 163, 61, 233, 60, 25, 191, 202, 55, 2, 190, 33, 171, 199, 190, 174, 121, 61, 191, 79, 13, 7, 191, 103, 13, 252, 188, 189, 198, 28, 62, 229, 70, 53, 190, 30, 11, 198, 62, 163, 58, 124, 189, 10, 250, 138, 188, 28, 64, 67, 62, 210, 240, 236, 189, 118, 175, 220, 189, 177, 53, 2, 62, 213, 27, 136, 62, 249, 111, 192, 189, 86, 99, 135, 191, 234, 255, 58, 191, 77, 11, 206, 190, 183, 29, 126, 190, 131, 126, 251, 60, 3, 212, 12, 62, 199, 117, 81, 61, 52, 199, 171, 189, 244, 195, 32, 62, 96, 233, 172, 189, 216, 162, 138, 61, 67, 236, 223, 61, 122, 225, 12, 190, 163, 181, 72, 189, 217, 212, 50, 190, 165, 115, 2, 62, 83, 33, 75, 190, 87, 222, 9, 190, 219, 251, 82, 190, 112, 91, 168, 189, 131, 177, 64, 190, 231, 47, 231, 61, 155, 100, 29, 62, 100, 247, 251, 59, 19, 201, 92, 61, 108, 14, 58, 189, 142, 221, 201, 188, 49, 138, 226, 61, 12, 163, 18, 62, 243, 238, 129, 190, 248, 52, 153, 189, 94, 238, 72, 61, 194, 34, 139, 189, 177, 119, 29, 62, 122, 126, 172, 187, 165, 212, 41, 190, 223, 183, 158, 190, 41, 93, 69, 190, 48, 212, 203, 188, 146, 202, 23, 62, 204, 48, 26, 61, 22, 213, 155, 62, 234, 177, 239, 61, 109, 46, 44, 62, 1, 150, 87, 61, 6, 35, 150, 190, 202, 203, 71, 189, 174, 107, 52, 62, 211, 90, 176, 60, 55, 132, 77, 190, 36, 240, 137, 62, 141, 227, 228, 190, 177, 154, 107, 62, 121, 137, 196, 61, 231, 229, 93, 60, 182, 29, 130, 62, 211, 247, 134, 62, 187, 32, 132, 61, 250, 179, 199, 188, 159, 233, 3, 60, 210, 190, 62, 190, 15, 223, 128, 62, 221, 199, 34, 190, 10, 171, 128, 190, 30, 203, 158, 190, 42, 169, 141, 189, 33, 86, 66, 62, 39, 147, 239, 189, 69, 24, 213, 62, 75, 208, 130, 62, 203, 204, 130, 190, 242, 233, 236, 190, 136, 34, 24, 191, 168, 117, 168, 62, 104, 26, 5, 62, 185, 105, 93, 187, 219, 144, 85, 62, 49, 224, 147, 190, 74, 255, 133, 190, 158, 111, 80, 191, 207, 235, 29, 190, 87, 105, 112, 62, 237, 166, 187, 190, 91, 122, 208, 186, 116, 42, 251, 189, 225, 196, 85, 190, 9, 88, 184, 62, 247, 185, 250, 62, 140, 81, 220, 190, 202, 237, 139, 190, 170, 233, 145, 189, 252, 196, 53, 190, 173, 50, 116, 62, 84, 172, 171, 62, 225, 193, 171, 62, 77, 115, 128, 62, 58, 2, 134, 189, 42, 101, 236, 190, 45, 217, 0, 62, 143, 225, 251, 190, 49, 168, 37, 189, 126, 162, 27, 62, 87, 161, 50, 62, 46, 182, 105, 190, 253, 132, 178, 61, 141, 144, 151, 62, 146, 236, 227, 61, 187, 95, 77, 62, 213, 183, 0, 61, 31, 141, 174, 187, 127, 245, 132, 189, 96, 3, 50, 190, 211, 49, 82, 61, 250, 167, 191, 189, 90, 18, 84, 190, 244, 237, 83, 61, 54, 155, 37, 60, 202, 147, 180, 59, 108, 51, 88, 190, 94, 97, 164, 61, 79, 2, 61, 62, 230, 83, 188, 61, 185, 228, 175, 188, 181, 156, 185, 189, 197, 55, 23, 62, 136, 4, 130, 62, 101, 139, 113, 61, 47, 6, 152, 61, 52, 214, 162, 188, 87, 175, 126, 60, 112, 160, 3, 190, 190, 210, 193, 189, 105, 46, 5, 191, 48, 200, 98, 190, 6, 70, 211, 61, 54, 165, 118, 190, 127, 142, 238, 60, 236, 26, 159, 190, 51, 198, 19, 190, 109, 63, 247, 188, 126, 180, 93, 190, 167, 84, 213, 189, 7, 9, 139, 61, 120, 238, 114, 62, 161, 199, 122, 189, 113, 105, 142, 189, 110, 23, 172, 60, 63, 195, 209, 189, 129, 91, 51, 61, 83, 46, 100, 190, 36, 123, 42, 61, 17, 114, 42, 190, 190, 164, 4, 61, 99, 225, 13, 62, 116, 74, 234, 189, 152, 154, 12, 60, 210, 241, 147, 188, 254, 93, 18, 188, 233, 246, 45, 190, 20, 158, 149, 61, 18, 111, 24, 62, 30, 185, 27, 190, 103, 38, 62, 62, 16, 215, 218, 61, 116, 247, 141, 62, 125, 72, 202, 62, 175, 203, 173, 61, 100, 182, 38, 191, 178, 105, 248, 190, 118, 231, 185, 190, 247, 10, 127, 189, 12, 244, 145, 191, 195, 16, 32, 190, 93, 62, 9, 62, 199, 28, 174, 62, 60, 153, 28, 191, 169, 115, 78, 62, 209, 26, 159, 61, 178, 237, 111, 61, 68, 163, 177, 61, 183, 210, 252, 189, 19, 105, 78, 191, 224, 215, 210, 190, 111, 138, 51, 187, 228, 57, 136, 189, 59, 42, 176, 61, 242, 101, 108, 60, 239, 213, 131, 62, 145, 251, 202, 62, 5, 199, 20, 62, 60, 23, 167, 62, 240, 99, 220, 62, 254, 130, 57, 62, 120, 161, 99, 191, 77, 40, 117, 61, 190, 98, 255, 190, 234, 177, 126, 60, 145, 254, 70, 188, 91, 2, 66, 59, 89, 93, 7, 63, 171, 6, 26, 63, 222, 192, 13, 190, 174, 199, 250, 62, 10, 94, 129, 61, 14, 126, 95, 62, 22, 13, 219, 61, 49, 105, 131, 190, 250, 94, 46, 63, 15, 194, 172, 59, 172, 22, 73, 190, 185, 130, 120, 62, 204, 95, 232, 61, 71, 79, 82, 62, 154, 26, 225, 62, 231, 173, 8, 63, 69, 180, 111, 190, 92, 113, 166, 189, 111, 97, 195, 59, 131, 176, 34, 190, 87, 69, 142, 190, 83, 26, 14, 190, 55, 159, 133, 190, 145, 106, 169, 190, 165, 29, 6, 62, 99, 207, 233, 189, 14, 158, 12, 61, 139, 90, 245, 61, 76, 55, 40, 62, 20, 75, 168, 190, 231, 30, 166, 190, 122, 59, 79, 62, 93, 88, 247, 62, 9, 129, 149, 62, 111, 5, 180, 62, 36, 107, 85, 190, 243, 154, 251, 189, 252, 108, 228, 61, 249, 39, 10, 191, 106, 148, 21, 191, 71, 89, 193, 62, 7, 189, 212, 189, 40, 86, 152, 190, 119, 172, 123, 62, 141, 143, 68, 190, 134, 139, 25, 62, 237, 221, 12, 62, 181, 108, 65, 191, 97, 106, 133, 186, 235, 204, 240, 61, 242, 140, 13, 190, 61, 205, 135, 61, 95, 5, 52, 191, 150, 134, 195, 62, 240, 52, 112, 189, 208, 18, 174, 189, 190, 217, 228, 189, 179, 180, 164, 190, 26, 96, 183, 61, 254, 29, 92, 62, 128, 86, 233, 62, 44, 176, 9, 190, 27, 128, 157, 60, 47, 159, 211, 189, 63, 33, 208, 60, 175, 48, 168, 189, 115, 106, 195, 188, 151, 10, 21, 62, 96, 48, 180, 61, 214, 238, 54, 188, 141, 22, 72, 190, 58, 247, 222, 61, 76, 189, 191, 61, 115, 43, 43, 190, 119, 226, 10, 62, 206, 156, 89, 190, 17, 82, 90, 61, 71, 204, 37, 190, 33, 43, 31, 190, 152, 29, 96, 189, 71, 156, 251, 61, 209, 59, 113, 61, 51, 211, 60, 190, 230, 83, 177, 61, 111, 165, 199, 189, 164, 61, 74, 190, 138, 150, 145, 189, 212, 71, 6, 190, 71, 223, 172, 189, 171, 153, 38, 189, 64, 36, 32, 61, 114, 48, 1, 62, 175, 174, 4, 187, 101, 78, 149, 62, 90, 100, 149, 62, 107, 54, 16, 188, 165, 105, 122, 190, 118, 37, 90, 61, 237, 120, 217, 189, 211, 123, 202, 190, 167, 214, 137, 191, 248, 57, 73, 190, 179, 27, 131, 190, 254, 26, 96, 62, 63, 30, 130, 190, 197, 138, 144, 62, 69, 206, 240, 189, 126, 140, 76, 62, 217, 58, 9, 63, 25, 212, 39, 189, 155, 28, 56, 60, 51, 169, 34, 62, 239, 99, 48, 62, 206, 71, 150, 62, 38, 53, 167, 188, 112, 43, 58, 189, 232, 222, 161, 185, 153, 36, 190, 62, 143, 209, 193, 61, 226, 230, 115, 61, 126, 49, 75, 62, 207, 28, 31, 190, 28, 110, 91, 191, 75, 217, 169, 62, 179, 250, 135, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {250, 58, 44, 62, 51, 6, 142, 61, 166, 17, 212, 188, 245, 120, 163, 61, 108, 60, 212, 62, 4, 40, 67, 62, 4, 27, 72, 188, 118, 56, 2, 62, 47, 34, 14, 62, 212, 226, 131, 62, 86, 103, 32, 190, 6, 99, 180, 62, 33, 86, 99, 60, 255, 66, 211, 60, 4, 10, 209, 62, 178, 89, 12, 62, 116, 161, 10, 62, 53, 153, 29, 62, 139, 233, 109, 62, 251, 252, 99, 61, 167, 183, 10, 62, 246, 74, 43, 62, 75, 14, 48, 189, 53, 154, 171, 62, 35, 217, 12, 190, 40, 12, 111, 62, 131, 101, 10, 62, 239, 234, 103, 61, 177, 195, 17, 190, 146, 122, 107, 62, 49, 48, 48, 190, 185, 135, 97, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {162, 4, 41, 191, 134, 144, 24, 191, 137, 2, 172, 62, 251, 48, 63, 191, 93, 189, 138, 62, 225, 80, 228, 191, 198, 152, 52, 62, 90, 108, 197, 190, 64, 31, 241, 62, 162, 236, 80, 63, 50, 125, 211, 190, 132, 251, 36, 191, 143, 129, 158, 61, 113, 126, 107, 188, 22, 73, 158, 62, 17, 184, 244, 190, 202, 205, 45, 63, 165, 7, 204, 62, 74, 43, 141, 190, 202, 154, 171, 191, 243, 150, 51, 62, 144, 164, 64, 63, 199, 31, 30, 190, 133, 227, 118, 62, 152, 45, 139, 63, 219, 245, 98, 61, 110, 218, 97, 61, 0, 80, 84, 191, 73, 247, 199, 190, 167, 168, 37, 63, 77, 189, 11, 190, 156, 8, 202, 190, 42, 162, 94, 189, 151, 255, 109, 62, 62, 51, 150, 61, 164, 81, 157, 61, 51, 167, 167, 190, 27, 205, 224, 62, 82, 234, 176, 189, 104, 3, 193, 187, 194, 2, 163, 59, 18, 57, 78, 61, 69, 123, 255, 60, 114, 210, 45, 190, 229, 12, 42, 189, 228, 70, 130, 189, 157, 74, 41, 190, 206, 162, 44, 60, 166, 21, 10, 62, 250, 68, 127, 62, 175, 28, 138, 62, 150, 252, 164, 62, 132, 183, 204, 190, 205, 163, 43, 62, 214, 219, 152, 61, 83, 121, 43, 60, 45, 87, 183, 62, 186, 118, 204, 189, 15, 137, 86, 190, 147, 84, 168, 62, 215, 82, 204, 189, 96, 105, 133, 189, 211, 154, 207, 61, 37, 83, 116, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {89, 223, 10, 62, 149, 130, 182, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {210, 107, 189, 191, 206, 62, 53, 63, 53, 1, 26, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {189, 31, 42, 64, 85, 199, 133, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0075/steps/000000000016000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}