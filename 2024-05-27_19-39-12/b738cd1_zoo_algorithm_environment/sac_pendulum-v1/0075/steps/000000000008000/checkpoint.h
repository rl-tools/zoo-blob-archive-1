// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {158, 2, 63, 63, 115, 57, 22, 63, 13, 102, 184, 62, 206, 100, 151, 62, 104, 101, 233, 62, 43, 209, 25, 62, 14, 222, 55, 191, 68, 112, 196, 190, 90, 100, 216, 187, 148, 162, 72, 63, 225, 163, 147, 191, 110, 20, 161, 190, 214, 108, 220, 62, 78, 49, 54, 191, 22, 121, 36, 191, 215, 240, 35, 190, 222, 167, 95, 63, 212, 184, 55, 59, 150, 178, 17, 191, 237, 16, 113, 63, 242, 121, 243, 189, 204, 79, 3, 191, 84, 1, 159, 63, 197, 238, 28, 63, 11, 189, 130, 61, 37, 207, 156, 63, 116, 51, 19, 63, 18, 125, 252, 190, 26, 118, 183, 62, 255, 78, 209, 62, 38, 49, 236, 61, 138, 146, 111, 61, 24, 58, 103, 191, 156, 171, 220, 62, 179, 183, 147, 191, 237, 176, 254, 58, 142, 69, 72, 191, 92, 228, 247, 190, 199, 168, 45, 188, 228, 76, 122, 62, 35, 9, 136, 62, 246, 110, 200, 62, 218, 241, 84, 190, 196, 180, 1, 191, 214, 41, 198, 62, 210, 98, 238, 190, 95, 99, 166, 191, 150, 15, 88, 190, 38, 234, 69, 189, 189, 130, 157, 62, 72, 91, 218, 62, 246, 161, 51, 63, 117, 191, 143, 191, 138, 231, 176, 190, 177, 116, 248, 190, 225, 214, 77, 62, 166, 7, 199, 190, 174, 223, 27, 62, 193, 47, 60, 63, 47, 30, 148, 190, 5, 79, 151, 187, 20, 194, 29, 190, 157, 157, 106, 189, 204, 217, 26, 63, 126, 29, 69, 189, 22, 203, 60, 191, 254, 228, 38, 190, 22, 8, 38, 62, 172, 93, 45, 190, 45, 109, 239, 190, 239, 164, 16, 190, 98, 133, 15, 191, 116, 86, 112, 63, 92, 57, 154, 62, 62, 163, 4, 62, 59, 251, 190, 62, 52, 115, 6, 63, 38, 221, 227, 187, 157, 177, 11, 62, 230, 197, 224, 62, 33, 18, 249, 190, 155, 5, 31, 63, 231, 29, 177, 62, 4, 48, 229, 62, 166, 203, 139, 190, 162, 209, 204, 61, 244, 149, 44, 63, 192, 54, 55, 191, 164, 139, 68, 63, 141, 57, 60, 63, 228, 112, 56, 63, 49, 253, 22, 191, 225, 146, 183, 60, 34, 166, 39, 63, 131, 6, 186, 190, 113, 89, 11, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 204, 214, 190, 112, 225, 53, 62, 104, 1, 65, 62, 243, 78, 150, 190, 23, 52, 226, 190, 152, 62, 150, 62, 240, 20, 217, 189, 0, 66, 79, 62, 40, 108, 34, 63, 8, 11, 151, 190, 104, 57, 200, 58, 191, 196, 178, 189, 73, 230, 133, 62, 183, 5, 4, 189, 40, 235, 217, 62, 175, 128, 250, 61, 85, 176, 79, 63, 203, 145, 185, 190, 57, 254, 5, 190, 247, 71, 15, 62, 155, 5, 47, 63, 8, 129, 2, 63, 180, 4, 240, 62, 142, 216, 120, 190, 109, 234, 235, 189, 39, 134, 114, 62, 151, 59, 8, 190, 79, 160, 48, 62, 200, 222, 123, 189, 191, 49, 166, 190, 212, 250, 204, 62, 142, 14, 110, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 221, 4, 190, 167, 168, 0, 189, 155, 59, 141, 60, 35, 2, 51, 189, 130, 240, 182, 61, 130, 49, 58, 189, 166, 165, 254, 189, 212, 228, 45, 62, 144, 42, 208, 189, 165, 187, 54, 61, 193, 124, 215, 189, 69, 28, 3, 62, 4, 84, 37, 61, 4, 162, 168, 189, 87, 147, 20, 190, 113, 50, 165, 61, 101, 32, 28, 190, 109, 202, 179, 61, 59, 167, 29, 62, 10, 211, 120, 190, 153, 82, 16, 190, 118, 126, 210, 189, 126, 108, 38, 190, 219, 170, 225, 60, 108, 78, 0, 190, 239, 192, 100, 190, 109, 214, 219, 188, 151, 112, 60, 61, 27, 135, 218, 186, 169, 58, 185, 189, 28, 156, 113, 190, 121, 20, 164, 61, 218, 153, 141, 61, 172, 239, 209, 61, 216, 185, 135, 190, 59, 199, 128, 191, 182, 201, 6, 190, 16, 10, 162, 62, 140, 186, 187, 62, 137, 55, 162, 189, 108, 208, 193, 62, 55, 154, 55, 189, 255, 208, 49, 190, 100, 186, 174, 190, 205, 92, 219, 190, 106, 105, 138, 61, 88, 56, 89, 189, 251, 104, 4, 191, 202, 195, 218, 61, 46, 36, 120, 191, 18, 175, 173, 62, 114, 104, 33, 62, 78, 31, 252, 189, 213, 225, 142, 62, 111, 38, 211, 61, 236, 153, 196, 189, 70, 24, 205, 62, 164, 1, 149, 62, 202, 83, 44, 189, 234, 58, 229, 61, 217, 107, 44, 62, 100, 199, 20, 60, 156, 225, 235, 61, 150, 147, 173, 188, 88, 162, 41, 190, 14, 157, 143, 190, 134, 121, 193, 189, 249, 195, 81, 62, 245, 161, 76, 62, 174, 5, 5, 190, 253, 139, 220, 190, 122, 107, 17, 62, 80, 204, 72, 189, 13, 172, 158, 61, 227, 85, 80, 61, 166, 201, 179, 61, 186, 155, 142, 190, 69, 129, 203, 61, 99, 53, 30, 62, 15, 150, 233, 189, 234, 120, 19, 62, 221, 93, 204, 61, 253, 183, 152, 189, 224, 49, 47, 190, 103, 7, 198, 187, 187, 108, 0, 62, 126, 124, 142, 61, 186, 213, 90, 190, 102, 218, 182, 61, 62, 156, 237, 186, 152, 233, 235, 60, 104, 58, 137, 190, 228, 76, 19, 62, 60, 104, 59, 61, 123, 23, 118, 61, 48, 143, 196, 62, 254, 66, 0, 190, 41, 208, 53, 62, 190, 59, 20, 189, 204, 144, 96, 191, 217, 180, 139, 190, 248, 226, 28, 190, 253, 31, 75, 190, 153, 228, 169, 190, 112, 179, 73, 190, 204, 180, 207, 61, 65, 245, 136, 62, 63, 151, 114, 190, 16, 189, 220, 60, 203, 83, 50, 189, 168, 104, 202, 61, 86, 86, 91, 61, 229, 5, 108, 61, 2, 247, 55, 191, 117, 183, 70, 60, 141, 131, 10, 62, 125, 16, 26, 62, 164, 189, 71, 62, 231, 15, 43, 190, 9, 221, 126, 189, 80, 18, 166, 62, 166, 251, 31, 189, 71, 252, 92, 61, 84, 87, 117, 62, 117, 7, 12, 62, 80, 71, 201, 189, 44, 212, 117, 61, 10, 213, 235, 189, 204, 231, 221, 61, 152, 11, 81, 190, 82, 136, 38, 60, 106, 114, 126, 61, 254, 57, 129, 62, 105, 118, 45, 61, 113, 141, 195, 189, 128, 105, 32, 61, 201, 38, 69, 62, 46, 120, 9, 190, 200, 19, 104, 190, 200, 195, 47, 62, 57, 109, 96, 61, 174, 94, 238, 57, 35, 166, 132, 61, 200, 186, 99, 190, 233, 157, 28, 62, 53, 255, 150, 59, 135, 243, 59, 60, 158, 17, 142, 61, 236, 222, 141, 62, 14, 230, 215, 61, 29, 78, 68, 62, 61, 210, 119, 60, 58, 28, 217, 61, 159, 174, 234, 61, 238, 180, 120, 190, 61, 165, 7, 189, 101, 87, 19, 190, 86, 60, 147, 62, 74, 201, 197, 62, 142, 92, 69, 61, 70, 51, 40, 62, 6, 56, 6, 63, 9, 179, 105, 62, 185, 203, 90, 191, 218, 246, 148, 189, 213, 71, 192, 189, 121, 141, 170, 61, 84, 45, 188, 191, 190, 86, 201, 190, 8, 251, 192, 62, 21, 144, 33, 61, 113, 104, 26, 191, 145, 31, 20, 62, 234, 208, 61, 189, 216, 54, 220, 61, 229, 90, 20, 63, 29, 217, 100, 190, 209, 198, 151, 190, 42, 204, 170, 190, 117, 100, 18, 62, 129, 108, 90, 189, 120, 136, 46, 61, 22, 95, 119, 62, 183, 161, 230, 61, 186, 190, 49, 63, 71, 208, 176, 60, 26, 227, 136, 62, 69, 190, 30, 62, 62, 159, 200, 62, 178, 227, 152, 191, 218, 111, 135, 190, 58, 165, 175, 190, 144, 25, 109, 61, 215, 157, 109, 189, 113, 195, 160, 61, 135, 39, 121, 61, 70, 89, 3, 190, 29, 118, 220, 61, 48, 81, 17, 62, 198, 0, 5, 190, 162, 102, 4, 189, 160, 42, 205, 189, 158, 251, 16, 62, 38, 129, 18, 190, 160, 213, 70, 190, 92, 141, 34, 190, 224, 233, 83, 189, 62, 163, 70, 190, 232, 199, 120, 189, 210, 140, 201, 61, 71, 26, 218, 61, 129, 8, 97, 190, 223, 76, 140, 189, 168, 3, 30, 189, 214, 240, 26, 62, 64, 198, 47, 190, 69, 140, 229, 189, 7, 25, 240, 188, 36, 4, 97, 190, 174, 52, 25, 62, 236, 87, 23, 189, 45, 85, 19, 62, 237, 8, 40, 190, 132, 78, 247, 189, 121, 139, 57, 190, 29, 5, 8, 189, 61, 153, 190, 59, 109, 98, 30, 191, 200, 184, 45, 190, 134, 36, 14, 62, 18, 147, 50, 62, 209, 236, 11, 62, 66, 244, 74, 62, 203, 111, 204, 189, 188, 125, 199, 61, 130, 70, 27, 62, 60, 111, 187, 190, 88, 209, 217, 60, 238, 73, 15, 189, 159, 220, 199, 189, 172, 108, 67, 62, 144, 149, 118, 191, 236, 173, 134, 62, 22, 37, 101, 185, 93, 67, 29, 189, 120, 167, 65, 62, 86, 37, 26, 190, 14, 150, 196, 190, 174, 112, 194, 61, 69, 10, 245, 61, 53, 13, 160, 61, 207, 76, 60, 189, 179, 102, 245, 60, 215, 15, 8, 62, 151, 197, 1, 62, 225, 25, 12, 62, 132, 67, 133, 190, 253, 45, 155, 190, 67, 115, 135, 188, 151, 108, 77, 62, 175, 155, 238, 60, 204, 246, 152, 62, 236, 175, 62, 62, 82, 186, 174, 61, 224, 62, 147, 62, 223, 115, 17, 191, 110, 181, 47, 189, 85, 209, 156, 62, 10, 88, 39, 190, 148, 214, 187, 190, 231, 79, 161, 61, 17, 72, 171, 190, 153, 143, 121, 62, 188, 111, 149, 62, 229, 239, 72, 61, 38, 131, 34, 61, 251, 36, 135, 62, 77, 22, 133, 60, 23, 95, 95, 189, 0, 235, 46, 190, 153, 182, 202, 189, 246, 199, 92, 61, 198, 4, 52, 190, 50, 249, 12, 190, 56, 169, 154, 190, 254, 122, 154, 61, 195, 247, 58, 62, 236, 166, 163, 62, 220, 98, 131, 59, 9, 64, 203, 189, 181, 14, 113, 62, 188, 99, 225, 62, 136, 181, 216, 60, 203, 14, 31, 186, 163, 135, 41, 190, 157, 157, 90, 61, 231, 36, 123, 61, 215, 70, 142, 190, 85, 98, 73, 191, 156, 188, 112, 190, 27, 104, 142, 61, 48, 236, 5, 190, 184, 150, 131, 62, 109, 99, 2, 190, 69, 86, 149, 62, 69, 1, 122, 62, 26, 247, 227, 62, 158, 50, 175, 191, 252, 123, 230, 60, 179, 107, 45, 191, 91, 102, 225, 189, 182, 110, 149, 61, 87, 34, 206, 190, 146, 26, 220, 190, 151, 178, 97, 191, 146, 192, 218, 58, 165, 122, 118, 190, 37, 236, 38, 62, 121, 61, 2, 190, 81, 110, 199, 59, 148, 5, 17, 189, 160, 186, 96, 62, 186, 252, 238, 190, 169, 250, 151, 189, 17, 245, 129, 190, 111, 83, 140, 61, 122, 73, 9, 62, 56, 10, 47, 190, 45, 84, 33, 62, 200, 33, 164, 61, 176, 102, 21, 190, 23, 183, 0, 62, 52, 72, 193, 190, 57, 205, 228, 59, 94, 185, 158, 189, 245, 226, 245, 190, 99, 25, 91, 62, 28, 97, 118, 190, 85, 60, 156, 190, 121, 47, 147, 190, 48, 55, 68, 60, 86, 138, 6, 189, 65, 150, 225, 60, 46, 173, 249, 190, 232, 158, 128, 62, 128, 70, 49, 62, 138, 177, 23, 191, 239, 63, 167, 62, 22, 84, 15, 190, 153, 31, 225, 189, 240, 3, 179, 61, 184, 49, 103, 62, 127, 163, 171, 190, 235, 96, 32, 62, 119, 163, 53, 191, 20, 17, 95, 191, 39, 30, 99, 190, 84, 5, 12, 62, 233, 102, 151, 62, 225, 10, 14, 189, 50, 171, 70, 62, 38, 77, 14, 190, 129, 68, 177, 189, 191, 85, 24, 61, 173, 119, 18, 191, 36, 176, 178, 189, 235, 90, 145, 61, 55, 60, 111, 191, 34, 53, 212, 61, 99, 218, 113, 191, 8, 19, 254, 187, 136, 107, 98, 189, 181, 72, 223, 61, 118, 196, 108, 61, 210, 47, 124, 189, 123, 6, 7, 190, 240, 48, 70, 62, 112, 242, 140, 62, 233, 78, 213, 61, 93, 143, 88, 189, 39, 138, 128, 189, 133, 255, 9, 189, 170, 37, 149, 62, 115, 156, 171, 62, 13, 134, 198, 189, 72, 160, 186, 59, 71, 88, 57, 190, 251, 164, 245, 61, 189, 191, 58, 188, 74, 63, 49, 61, 177, 7, 44, 190, 79, 22, 194, 189, 102, 237, 47, 189, 63, 151, 128, 189, 67, 39, 93, 189, 18, 101, 170, 189, 11, 155, 71, 189, 86, 209, 73, 190, 106, 90, 31, 190, 5, 116, 161, 189, 213, 102, 12, 62, 0, 157, 24, 62, 225, 98, 49, 190, 203, 27, 202, 189, 239, 238, 192, 61, 43, 71, 244, 189, 50, 48, 201, 61, 107, 182, 170, 189, 180, 208, 146, 60, 166, 146, 127, 60, 195, 157, 220, 189, 114, 23, 9, 186, 76, 91, 39, 190, 58, 52, 45, 190, 93, 187, 12, 189, 88, 175, 67, 190, 108, 179, 37, 60, 79, 5, 164, 189, 225, 135, 135, 189, 221, 149, 39, 190, 231, 45, 13, 62, 100, 161, 47, 190, 104, 138, 41, 62, 122, 74, 158, 188, 195, 37, 32, 62, 154, 28, 22, 190, 246, 88, 224, 61, 48, 104, 59, 61, 29, 18, 190, 59, 137, 116, 24, 190, 150, 31, 39, 190, 237, 100, 21, 190, 168, 51, 249, 189, 91, 139, 29, 62, 87, 54, 137, 61, 16, 23, 185, 188, 172, 239, 113, 189, 42, 77, 200, 189, 239, 223, 210, 189, 130, 18, 151, 186, 154, 76, 134, 189, 96, 40, 223, 189, 42, 99, 207, 189, 139, 167, 226, 189, 90, 110, 173, 187, 0, 152, 16, 62, 181, 56, 50, 190, 49, 72, 34, 190, 4, 86, 5, 190, 153, 89, 57, 190, 101, 5, 71, 62, 148, 165, 64, 62, 58, 138, 148, 189, 186, 239, 12, 62, 212, 101, 255, 61, 224, 168, 180, 62, 18, 206, 183, 61, 54, 7, 37, 190, 10, 66, 154, 190, 187, 184, 130, 189, 76, 62, 69, 189, 37, 223, 151, 58, 201, 236, 112, 61, 179, 225, 223, 189, 189, 222, 137, 62, 95, 49, 189, 60, 51, 233, 150, 61, 101, 219, 233, 59, 241, 41, 2, 62, 221, 92, 167, 188, 71, 196, 101, 62, 82, 225, 63, 190, 115, 162, 181, 62, 232, 90, 19, 62, 62, 73, 58, 189, 98, 9, 104, 190, 105, 64, 174, 189, 114, 70, 216, 61, 117, 216, 32, 62, 240, 139, 31, 62, 193, 200, 108, 61, 36, 192, 251, 60, 32, 91, 188, 190, 173, 6, 46, 191, 78, 224, 91, 190, 44, 90, 234, 189, 241, 200, 140, 62, 47, 7, 129, 61, 195, 87, 44, 62, 161, 27, 121, 61, 119, 138, 35, 190, 68, 231, 39, 190, 37, 66, 182, 190, 32, 39, 245, 61, 230, 193, 221, 61, 106, 225, 37, 191, 95, 1, 31, 62, 117, 99, 71, 191, 147, 81, 58, 61, 217, 253, 113, 62, 104, 200, 86, 189, 219, 29, 136, 62, 184, 11, 14, 190, 132, 181, 90, 189, 9, 227, 84, 62, 125, 17, 168, 62, 152, 74, 86, 61, 25, 44, 94, 62, 79, 44, 232, 189, 92, 238, 35, 190, 173, 91, 89, 61, 18, 53, 0, 189, 0, 156, 192, 61, 213, 11, 177, 60, 13, 189, 129, 60, 94, 237, 6, 63, 78, 45, 140, 62, 193, 183, 128, 61, 6, 162, 238, 189, 7, 74, 113, 62, 191, 131, 141, 62, 72, 84, 200, 60, 197, 112, 88, 191, 190, 124, 173, 189, 84, 34, 34, 62, 222, 43, 135, 190, 5, 60, 121, 62, 55, 63, 133, 62, 126, 120, 49, 62, 17, 249, 55, 63, 150, 226, 104, 188, 125, 172, 228, 190, 37, 20, 190, 61, 186, 50, 84, 191, 94, 189, 143, 188, 12, 98, 58, 62, 76, 201, 15, 190, 7, 98, 156, 189, 192, 233, 181, 190, 230, 13, 158, 189, 18, 204, 118, 190, 231, 21, 118, 62, 23, 54, 95, 62, 244, 39, 253, 188, 65, 163, 210, 190, 214, 221, 229, 190, 118, 209, 195, 189, 3, 41, 228, 62, 70, 66, 145, 62, 162, 161, 55, 62, 230, 32, 247, 61, 207, 129, 129, 62, 28, 237, 129, 61, 118, 47, 89, 190, 163, 52, 98, 190, 93, 117, 51, 62, 68, 255, 218, 189, 182, 58, 83, 190, 37, 108, 153, 62, 46, 54, 157, 190, 75, 63, 24, 62, 116, 197, 6, 62, 121, 83, 119, 60, 242, 7, 40, 189, 53, 140, 57, 62, 177, 42, 142, 60, 154, 135, 62, 188, 197, 196, 156, 189, 155, 174, 136, 62, 199, 91, 25, 61, 61, 13, 132, 190, 50, 206, 67, 190, 181, 100, 65, 190, 121, 200, 54, 61, 237, 199, 87, 188, 51, 143, 239, 62, 19, 218, 66, 62, 221, 113, 225, 61, 33, 13, 121, 62, 194, 201, 15, 191, 152, 175, 205, 190, 48, 149, 76, 190, 106, 17, 143, 61, 35, 147, 145, 189, 53, 254, 103, 190, 174, 32, 155, 189, 19, 168, 49, 62, 157, 220, 102, 190, 114, 141, 152, 188, 175, 142, 54, 189, 65, 63, 118, 62, 63, 215, 51, 62, 252, 42, 73, 189, 127, 18, 231, 190, 139, 191, 36, 188, 107, 3, 84, 62, 217, 207, 81, 61, 122, 210, 100, 61, 187, 16, 185, 61, 65, 22, 175, 62, 209, 38, 184, 62, 117, 97, 74, 189, 61, 27, 58, 62, 162, 12, 4, 62, 45, 85, 200, 187, 220, 209, 163, 61, 249, 140, 150, 60, 207, 82, 228, 190, 24, 245, 132, 190, 218, 91, 103, 190, 165, 152, 100, 62, 219, 4, 48, 62, 235, 151, 0, 61, 116, 177, 139, 62, 195, 191, 129, 187, 168, 59, 220, 61, 145, 247, 147, 189, 249, 55, 67, 190, 206, 9, 255, 189, 66, 232, 67, 62, 34, 207, 129, 62, 176, 32, 177, 190, 149, 102, 5, 189, 68, 228, 51, 62, 117, 126, 47, 62, 201, 82, 52, 62, 42, 12, 185, 189, 88, 119, 211, 189, 67, 192, 155, 62, 36, 24, 223, 189, 236, 89, 153, 62, 162, 112, 55, 191, 20, 239, 233, 190, 199, 239, 164, 188, 56, 66, 253, 189, 243, 115, 164, 190, 226, 31, 202, 189, 201, 183, 92, 62, 79, 81, 170, 189, 20, 198, 12, 62, 102, 175, 180, 60, 82, 115, 196, 60, 66, 105, 56, 190, 60, 153, 41, 190, 22, 130, 119, 190, 60, 151, 61, 62, 155, 219, 231, 61, 247, 130, 95, 190, 13, 179, 159, 61, 8, 85, 27, 190, 190, 178, 245, 58, 92, 109, 88, 190, 90, 29, 27, 190, 226, 240, 164, 188, 238, 21, 60, 190, 105, 89, 7, 191, 2, 139, 93, 59, 126, 0, 93, 190, 36, 112, 69, 60, 202, 209, 139, 62, 188, 33, 103, 61, 220, 154, 130, 62, 50, 188, 140, 189, 60, 174, 126, 62, 250, 65, 217, 62, 74, 38, 124, 62, 84, 100, 65, 61, 8, 88, 219, 61, 51, 108, 55, 189, 254, 225, 184, 189, 43, 173, 82, 62, 147, 167, 95, 61, 154, 214, 235, 189, 158, 191, 132, 189, 42, 75, 181, 190, 6, 148, 206, 62, 138, 84, 40, 190, 132, 184, 159, 62, 66, 136, 215, 62, 181, 218, 91, 188, 11, 127, 165, 62, 203, 110, 137, 191, 147, 119, 139, 61, 236, 103, 201, 190, 226, 248, 143, 60, 82, 76, 164, 190, 224, 99, 128, 190, 36, 78, 160, 190, 69, 8, 52, 189, 141, 43, 247, 60, 213, 228, 248, 189, 254, 28, 178, 62, 188, 136, 140, 60, 197, 179, 136, 188, 197, 54, 93, 62, 80, 68, 157, 189, 175, 131, 43, 190, 114, 254, 101, 61, 122, 1, 109, 62, 6, 155, 83, 189, 88, 85, 84, 191, 78, 81, 212, 190, 156, 15, 159, 190, 172, 212, 124, 190, 131, 126, 251, 60, 3, 212, 12, 62, 199, 117, 81, 61, 52, 199, 171, 189, 244, 195, 32, 62, 96, 233, 172, 189, 216, 162, 138, 61, 67, 236, 223, 61, 122, 225, 12, 190, 163, 181, 72, 189, 217, 212, 50, 190, 165, 115, 2, 62, 83, 33, 75, 190, 87, 222, 9, 190, 219, 251, 82, 190, 112, 91, 168, 189, 131, 177, 64, 190, 231, 47, 231, 61, 155, 100, 29, 62, 100, 247, 251, 59, 19, 201, 92, 61, 108, 14, 58, 189, 142, 221, 201, 188, 49, 138, 226, 61, 12, 163, 18, 62, 243, 238, 129, 190, 248, 52, 153, 189, 94, 238, 72, 61, 194, 34, 139, 189, 177, 119, 29, 62, 122, 126, 172, 187, 165, 212, 41, 190, 16, 159, 76, 190, 44, 151, 91, 190, 155, 233, 156, 61, 130, 203, 62, 62, 218, 130, 197, 61, 125, 128, 50, 62, 32, 206, 12, 62, 88, 141, 63, 62, 46, 70, 180, 61, 38, 54, 1, 190, 151, 97, 94, 187, 102, 51, 17, 188, 141, 218, 142, 61, 91, 108, 52, 190, 152, 216, 128, 62, 35, 68, 173, 190, 21, 81, 57, 62, 104, 94, 25, 62, 226, 219, 231, 61, 63, 104, 138, 62, 194, 48, 131, 62, 68, 251, 204, 61, 61, 11, 174, 60, 171, 163, 207, 61, 1, 154, 106, 190, 3, 221, 77, 62, 123, 148, 20, 190, 127, 237, 136, 190, 109, 203, 137, 190, 19, 75, 55, 61, 218, 60, 36, 62, 105, 5, 40, 189, 34, 190, 201, 62, 195, 100, 36, 62, 162, 228, 40, 190, 45, 45, 128, 190, 137, 96, 159, 60, 14, 186, 172, 60, 19, 12, 20, 191, 125, 192, 139, 189, 154, 156, 8, 62, 141, 112, 4, 190, 78, 55, 220, 189, 192, 4, 239, 190, 239, 28, 97, 190, 182, 27, 138, 62, 243, 223, 91, 190, 230, 241, 33, 190, 66, 52, 16, 190, 187, 14, 142, 61, 39, 25, 35, 61, 57, 84, 215, 61, 213, 40, 218, 190, 232, 166, 145, 190, 74, 224, 144, 190, 124, 198, 224, 189, 179, 130, 99, 62, 91, 121, 93, 62, 58, 139, 165, 188, 229, 161, 142, 62, 214, 15, 177, 61, 17, 122, 182, 190, 147, 168, 66, 62, 51, 86, 135, 190, 89, 167, 252, 187, 101, 198, 6, 62, 74, 10, 65, 62, 46, 112, 97, 190, 42, 44, 5, 61, 130, 180, 50, 62, 229, 92, 13, 62, 188, 36, 224, 61, 87, 218, 52, 61, 112, 10, 13, 189, 32, 136, 179, 189, 96, 8, 195, 189, 130, 178, 221, 61, 226, 94, 210, 189, 28, 8, 53, 190, 145, 43, 4, 62, 27, 85, 22, 60, 11, 119, 142, 188, 125, 87, 51, 190, 72, 68, 199, 61, 156, 93, 118, 62, 51, 103, 225, 61, 225, 97, 227, 60, 32, 148, 157, 189, 26, 93, 33, 62, 199, 128, 129, 62, 131, 0, 12, 61, 105, 143, 183, 61, 165, 28, 55, 189, 227, 212, 135, 188, 12, 226, 140, 189, 163, 208, 171, 189, 173, 79, 163, 190, 221, 255, 231, 189, 138, 213, 241, 61, 63, 19, 54, 190, 54, 248, 149, 188, 46, 227, 39, 190, 84, 57, 147, 189, 25, 0, 22, 61, 117, 222, 70, 189, 53, 168, 1, 190, 238, 140, 157, 61, 107, 15, 203, 61, 116, 208, 2, 189, 138, 86, 10, 190, 248, 197, 130, 189, 105, 165, 101, 60, 110, 109, 141, 61, 87, 187, 53, 190, 57, 140, 25, 62, 83, 122, 171, 189, 45, 20, 190, 61, 60, 38, 57, 62, 203, 238, 107, 188, 227, 7, 250, 61, 164, 246, 146, 60, 31, 57, 21, 61, 128, 98, 1, 190, 153, 144, 138, 61, 73, 170, 246, 188, 241, 213, 106, 190, 189, 91, 37, 62, 52, 55, 168, 61, 251, 72, 111, 62, 181, 241, 200, 62, 34, 224, 28, 62, 183, 26, 247, 190, 12, 199, 182, 190, 62, 197, 166, 190, 203, 165, 227, 189, 44, 210, 2, 191, 66, 114, 36, 190, 75, 190, 70, 61, 68, 133, 190, 62, 190, 41, 238, 190, 66, 157, 136, 62, 96, 233, 156, 61, 16, 36, 146, 61, 124, 253, 76, 62, 155, 50, 239, 189, 229, 116, 16, 191, 188, 31, 229, 190, 54, 156, 55, 59, 191, 16, 182, 189, 29, 145, 199, 61, 125, 172, 27, 60, 245, 170, 124, 62, 225, 23, 194, 62, 8, 113, 34, 62, 145, 241, 182, 62, 113, 248, 212, 62, 126, 153, 73, 62, 97, 89, 27, 191, 241, 215, 22, 61, 93, 33, 245, 190, 141, 4, 239, 188, 165, 235, 92, 61, 197, 105, 180, 189, 180, 18, 233, 62, 234, 84, 11, 63, 138, 225, 151, 61, 203, 55, 240, 62, 1, 249, 108, 61, 243, 127, 74, 62, 6, 119, 190, 61, 233, 89, 135, 190, 229, 247, 33, 63, 122, 132, 76, 190, 233, 67, 74, 190, 147, 247, 115, 62, 248, 170, 143, 187, 177, 58, 112, 62, 41, 73, 165, 62, 128, 136, 199, 62, 255, 68, 74, 190, 204, 159, 161, 189, 117, 246, 150, 60, 51, 11, 74, 190, 117, 98, 210, 190, 123, 251, 125, 189, 221, 41, 104, 190, 159, 162, 145, 190, 155, 52, 34, 62, 117, 183, 242, 189, 21, 240, 131, 60, 159, 127, 31, 62, 95, 148, 3, 62, 81, 3, 84, 190, 236, 228, 173, 190, 139, 115, 131, 62, 171, 24, 253, 62, 164, 69, 252, 61, 177, 189, 140, 62, 190, 84, 120, 189, 26, 209, 45, 189, 216, 44, 62, 62, 182, 199, 157, 190, 41, 3, 30, 191, 8, 122, 117, 62, 196, 236, 141, 189, 0, 131, 152, 190, 55, 212, 56, 62, 26, 169, 26, 190, 231, 83, 3, 62, 209, 201, 51, 62, 84, 142, 3, 190, 174, 149, 94, 189, 140, 232, 225, 61, 245, 147, 23, 190, 157, 244, 31, 62, 246, 98, 159, 190, 178, 253, 176, 62, 229, 72, 234, 189, 2, 253, 140, 190, 17, 179, 16, 190, 252, 175, 168, 190, 69, 197, 101, 62, 237, 106, 47, 62, 76, 216, 236, 62, 44, 176, 9, 190, 27, 128, 157, 60, 47, 159, 211, 189, 63, 33, 208, 60, 175, 48, 168, 189, 115, 106, 195, 188, 151, 10, 21, 62, 96, 48, 180, 61, 214, 238, 54, 188, 141, 22, 72, 190, 58, 247, 222, 61, 76, 189, 191, 61, 115, 43, 43, 190, 119, 226, 10, 62, 206, 156, 89, 190, 17, 82, 90, 61, 71, 204, 37, 190, 33, 43, 31, 190, 152, 29, 96, 189, 71, 156, 251, 61, 209, 59, 113, 61, 51, 211, 60, 190, 230, 83, 177, 61, 111, 165, 199, 189, 164, 61, 74, 190, 138, 150, 145, 189, 212, 71, 6, 190, 71, 223, 172, 189, 171, 153, 38, 189, 64, 36, 32, 61, 114, 48, 1, 62, 175, 174, 4, 187, 188, 43, 94, 62, 167, 20, 158, 62, 43, 2, 127, 189, 225, 166, 116, 190, 74, 89, 149, 60, 21, 175, 168, 187, 164, 66, 196, 190, 131, 213, 238, 190, 250, 162, 99, 190, 57, 152, 191, 190, 120, 98, 62, 62, 247, 242, 113, 190, 4, 221, 25, 62, 240, 163, 56, 190, 122, 58, 83, 62, 12, 228, 147, 62, 42, 161, 208, 59, 113, 52, 205, 59, 218, 244, 194, 61, 152, 9, 73, 62, 10, 41, 138, 62, 182, 233, 19, 189, 33, 121, 130, 189, 217, 226, 159, 189, 107, 104, 207, 62, 222, 70, 31, 62, 16, 251, 123, 61, 45, 67, 69, 62, 2, 129, 65, 190, 224, 36, 25, 191, 159, 239, 169, 62, 114, 92, 93, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 116, 66, 61, 159, 255, 157, 61, 226, 42, 128, 60, 232, 54, 248, 61, 19, 136, 176, 62, 27, 29, 219, 61, 73, 54, 31, 186, 214, 228, 8, 62, 220, 18, 230, 61, 216, 240, 99, 59, 58, 246, 3, 190, 77, 194, 160, 62, 207, 59, 141, 60, 255, 66, 211, 60, 92, 136, 176, 62, 103, 7, 21, 62, 223, 160, 246, 60, 145, 137, 16, 62, 51, 35, 143, 62, 207, 85, 156, 61, 80, 208, 212, 61, 9, 193, 93, 62, 75, 14, 48, 189, 80, 109, 150, 62, 75, 238, 31, 190, 77, 141, 130, 62, 115, 67, 64, 62, 192, 97, 55, 61, 58, 94, 200, 189, 242, 134, 82, 62, 49, 48, 48, 190, 238, 236, 65, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 119, 48, 190, 194, 189, 0, 191, 10, 56, 103, 62, 163, 175, 19, 191, 216, 94, 143, 62, 91, 151, 164, 191, 37, 197, 76, 62, 240, 39, 178, 190, 96, 103, 225, 62, 224, 178, 7, 63, 8, 181, 173, 190, 50, 163, 3, 191, 234, 213, 158, 61, 113, 126, 107, 188, 180, 79, 149, 62, 118, 182, 203, 190, 104, 188, 32, 63, 87, 252, 191, 62, 69, 201, 130, 190, 177, 14, 81, 191, 167, 132, 30, 62, 80, 255, 26, 63, 199, 31, 30, 190, 230, 13, 123, 62, 148, 253, 236, 62, 74, 98, 144, 61, 84, 80, 134, 59, 42, 88, 39, 191, 159, 238, 205, 190, 27, 93, 36, 63, 77, 189, 11, 190, 119, 56, 190, 190, 155, 1, 12, 189, 210, 215, 50, 62, 207, 36, 32, 62, 248, 189, 176, 188, 245, 94, 142, 190, 4, 144, 243, 60, 125, 27, 172, 189, 202, 133, 232, 60, 172, 62, 114, 61, 0, 0, 244, 189, 131, 77, 147, 189, 35, 122, 143, 190, 50, 78, 42, 189, 228, 70, 130, 189, 185, 33, 11, 190, 15, 0, 132, 189, 181, 120, 16, 62, 236, 38, 133, 62, 222, 242, 114, 61, 180, 204, 136, 62, 96, 101, 166, 190, 57, 221, 6, 62, 214, 219, 152, 61, 237, 57, 13, 189, 44, 155, 12, 63, 125, 80, 45, 189, 190, 130, 52, 190, 50, 63, 114, 62, 164, 118, 12, 190, 53, 208, 71, 190, 211, 154, 207, 61, 33, 102, 243, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 176, 183, 61, 41, 238, 164, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {42, 230, 51, 63, 45, 231, 186, 62, 110, 1, 173, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {230, 197, 181, 190, 75, 176, 143, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0075/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}