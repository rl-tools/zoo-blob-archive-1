// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {119, 53, 15, 63, 128, 234, 130, 189, 97, 144, 185, 62, 240, 253, 136, 62, 64, 138, 56, 61, 246, 178, 27, 62, 142, 219, 213, 190, 61, 103, 11, 191, 2, 215, 44, 61, 178, 33, 134, 62, 25, 215, 13, 191, 73, 139, 57, 190, 120, 28, 145, 62, 170, 20, 129, 190, 21, 213, 27, 191, 36, 180, 148, 190, 211, 45, 252, 62, 45, 149, 7, 62, 104, 143, 30, 191, 144, 78, 90, 63, 22, 182, 189, 61, 66, 103, 110, 190, 143, 81, 173, 190, 220, 38, 253, 62, 239, 83, 73, 62, 16, 81, 67, 63, 84, 233, 224, 62, 121, 199, 63, 60, 117, 241, 29, 190, 96, 230, 164, 62, 244, 193, 207, 60, 128, 127, 74, 63, 142, 251, 199, 190, 40, 109, 54, 61, 88, 254, 87, 191, 137, 46, 74, 190, 156, 254, 183, 190, 65, 80, 145, 190, 207, 122, 12, 190, 176, 5, 199, 62, 10, 156, 80, 190, 161, 1, 158, 62, 193, 130, 141, 190, 15, 67, 68, 191, 41, 234, 127, 62, 148, 179, 165, 190, 176, 122, 251, 190, 139, 63, 34, 190, 64, 174, 186, 61, 53, 208, 166, 190, 25, 233, 243, 62, 223, 32, 33, 62, 179, 125, 219, 190, 39, 36, 197, 190, 153, 157, 73, 61, 185, 211, 96, 188, 25, 181, 176, 190, 6, 6, 142, 61, 137, 133, 52, 63, 95, 193, 197, 189, 114, 108, 201, 61, 102, 244, 13, 191, 224, 127, 20, 190, 202, 5, 221, 62, 128, 229, 9, 63, 55, 254, 202, 190, 97, 175, 152, 189, 254, 82, 33, 60, 151, 118, 84, 190, 103, 149, 17, 191, 195, 151, 41, 63, 194, 218, 193, 190, 246, 223, 7, 63, 81, 68, 122, 60, 241, 199, 151, 61, 73, 254, 208, 61, 47, 25, 9, 63, 104, 159, 247, 59, 139, 232, 209, 189, 123, 82, 106, 63, 190, 229, 12, 190, 223, 126, 27, 63, 191, 202, 28, 61, 227, 84, 197, 62, 63, 120, 70, 62, 102, 56, 45, 190, 26, 119, 21, 63, 75, 176, 32, 191, 162, 21, 169, 190, 149, 248, 220, 62, 42, 89, 10, 63, 46, 249, 221, 190, 204, 184, 161, 59, 137, 107, 50, 63, 53, 244, 100, 188, 190, 140, 233, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {165, 56, 36, 191, 233, 161, 156, 61, 176, 78, 82, 62, 247, 47, 249, 190, 169, 36, 249, 190, 29, 31, 134, 62, 80, 207, 250, 189, 241, 91, 136, 61, 138, 168, 15, 63, 150, 218, 21, 191, 43, 27, 168, 62, 185, 171, 39, 62, 83, 115, 177, 62, 230, 210, 227, 190, 88, 36, 20, 63, 78, 105, 139, 62, 140, 43, 40, 63, 123, 68, 3, 191, 16, 90, 227, 190, 145, 31, 127, 62, 127, 0, 33, 63, 164, 41, 47, 63, 163, 61, 20, 63, 91, 201, 130, 62, 123, 202, 119, 190, 113, 89, 174, 62, 17, 134, 56, 62, 83, 232, 47, 62, 10, 150, 1, 191, 177, 212, 179, 190, 206, 106, 26, 63, 8, 167, 187, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 221, 4, 190, 167, 168, 0, 189, 215, 122, 1, 61, 74, 147, 112, 187, 25, 209, 253, 61, 213, 85, 180, 189, 158, 241, 246, 189, 212, 228, 45, 62, 144, 42, 208, 189, 165, 187, 54, 61, 5, 68, 159, 189, 75, 116, 20, 62, 183, 191, 107, 61, 4, 162, 168, 189, 198, 81, 14, 190, 72, 12, 202, 61, 205, 21, 28, 190, 50, 32, 252, 61, 61, 103, 67, 62, 158, 35, 82, 190, 77, 153, 251, 189, 61, 135, 162, 189, 53, 87, 19, 190, 229, 184, 75, 61, 120, 76, 0, 190, 92, 4, 80, 190, 5, 195, 126, 59, 151, 112, 60, 61, 27, 135, 218, 186, 169, 58, 185, 189, 17, 7, 102, 190, 137, 35, 5, 62, 251, 229, 78, 61, 229, 50, 96, 61, 178, 232, 65, 190, 179, 22, 38, 60, 152, 106, 157, 189, 244, 96, 36, 62, 96, 30, 8, 190, 177, 251, 202, 189, 26, 194, 114, 62, 125, 50, 75, 189, 213, 107, 253, 189, 201, 57, 182, 189, 210, 41, 16, 190, 217, 15, 170, 61, 182, 52, 231, 189, 92, 158, 63, 190, 227, 68, 17, 61, 149, 101, 254, 60, 79, 181, 144, 60, 239, 250, 224, 61, 49, 93, 214, 189, 228, 84, 60, 62, 94, 15, 247, 60, 218, 62, 142, 188, 59, 14, 193, 61, 15, 149, 10, 189, 238, 156, 56, 189, 197, 96, 9, 61, 188, 76, 20, 62, 16, 106, 21, 188, 77, 115, 132, 61, 27, 218, 14, 190, 194, 156, 2, 190, 197, 248, 42, 190, 12, 113, 219, 58, 229, 215, 138, 188, 213, 80, 214, 61, 245, 42, 191, 189, 157, 98, 12, 190, 237, 54, 152, 61, 92, 30, 53, 188, 62, 243, 135, 61, 9, 167, 196, 61, 115, 195, 31, 62, 111, 189, 239, 189, 127, 47, 169, 61, 239, 26, 55, 62, 16, 178, 8, 62, 79, 8, 35, 62, 62, 32, 241, 59, 154, 11, 112, 188, 185, 240, 99, 190, 131, 20, 71, 60, 69, 94, 174, 61, 72, 149, 86, 61, 207, 99, 229, 189, 60, 233, 240, 189, 144, 147, 184, 189, 200, 209, 243, 60, 217, 16, 32, 190, 89, 177, 35, 62, 186, 62, 48, 189, 40, 248, 48, 189, 14, 135, 56, 62, 207, 220, 233, 189, 143, 141, 183, 61, 89, 111, 79, 186, 220, 83, 21, 60, 84, 123, 92, 190, 87, 33, 172, 61, 0, 119, 109, 189, 204, 247, 226, 189, 165, 102, 43, 60, 4, 201, 31, 62, 86, 66, 113, 62, 78, 231, 112, 190, 181, 220, 211, 61, 71, 158, 173, 60, 32, 134, 166, 57, 74, 118, 17, 190, 217, 145, 201, 61, 181, 182, 134, 190, 197, 195, 193, 57, 232, 190, 45, 62, 179, 225, 139, 61, 133, 237, 20, 62, 148, 163, 44, 190, 250, 151, 204, 189, 126, 181, 59, 62, 255, 130, 74, 60, 48, 124, 80, 61, 216, 176, 16, 62, 94, 71, 41, 62, 21, 194, 142, 61, 252, 69, 84, 61, 183, 101, 9, 190, 7, 233, 219, 61, 62, 243, 94, 190, 26, 90, 64, 189, 172, 187, 17, 190, 137, 3, 71, 62, 218, 119, 70, 190, 132, 158, 106, 190, 134, 185, 135, 189, 195, 103, 151, 185, 177, 94, 16, 190, 227, 3, 31, 190, 41, 235, 242, 61, 105, 202, 199, 60, 114, 241, 176, 188, 98, 69, 205, 61, 212, 239, 243, 189, 255, 230, 151, 61, 147, 144, 206, 189, 149, 167, 190, 188, 104, 117, 109, 61, 247, 74, 85, 62, 134, 79, 157, 61, 246, 158, 0, 62, 138, 19, 16, 61, 203, 61, 235, 189, 197, 29, 133, 189, 218, 223, 18, 190, 38, 133, 225, 188, 245, 208, 239, 189, 120, 21, 52, 62, 54, 46, 164, 62, 214, 41, 165, 189, 17, 22, 40, 61, 120, 14, 206, 61, 136, 132, 89, 188, 204, 61, 1, 190, 125, 209, 1, 61, 96, 11, 201, 61, 91, 138, 155, 62, 126, 17, 144, 190, 76, 33, 70, 62, 157, 159, 27, 190, 93, 10, 4, 61, 46, 64, 186, 188, 217, 91, 62, 188, 94, 148, 66, 190, 52, 198, 62, 190, 177, 38, 85, 62, 232, 141, 32, 61, 106, 243, 190, 61, 157, 55, 104, 190, 100, 51, 74, 62, 40, 184, 27, 190, 197, 32, 3, 61, 7, 26, 98, 62, 62, 60, 181, 61, 10, 117, 253, 61, 173, 77, 143, 61, 57, 233, 145, 62, 81, 191, 28, 189, 76, 212, 204, 189, 222, 88, 207, 190, 110, 214, 112, 190, 150, 48, 157, 190, 144, 25, 109, 61, 215, 157, 109, 189, 113, 195, 160, 61, 135, 39, 121, 61, 70, 89, 3, 190, 29, 118, 220, 61, 48, 81, 17, 62, 198, 0, 5, 190, 162, 102, 4, 189, 160, 42, 205, 189, 158, 251, 16, 62, 38, 129, 18, 190, 160, 213, 70, 190, 92, 141, 34, 190, 224, 233, 83, 189, 62, 163, 70, 190, 232, 199, 120, 189, 210, 140, 201, 61, 71, 26, 218, 61, 129, 8, 97, 190, 223, 76, 140, 189, 168, 3, 30, 189, 214, 240, 26, 62, 64, 198, 47, 190, 69, 140, 229, 189, 7, 25, 240, 188, 36, 4, 97, 190, 174, 52, 25, 62, 236, 87, 23, 189, 45, 85, 19, 62, 237, 8, 40, 190, 132, 78, 247, 189, 181, 121, 16, 190, 60, 186, 72, 189, 24, 245, 11, 61, 220, 146, 4, 62, 238, 199, 201, 188, 95, 55, 225, 61, 206, 238, 190, 189, 177, 246, 200, 61, 252, 167, 16, 62, 141, 66, 194, 189, 238, 234, 138, 61, 146, 233, 62, 61, 25, 76, 95, 190, 26, 125, 175, 61, 222, 59, 252, 189, 80, 183, 58, 61, 121, 196, 6, 62, 120, 151, 248, 189, 130, 105, 213, 189, 127, 185, 72, 189, 194, 112, 204, 189, 152, 30, 244, 61, 127, 176, 11, 190, 231, 11, 43, 190, 8, 202, 183, 189, 71, 64, 238, 188, 229, 213, 178, 61, 155, 92, 160, 189, 249, 88, 134, 60, 32, 88, 160, 61, 17, 181, 42, 61, 172, 202, 153, 61, 242, 247, 87, 189, 221, 135, 159, 189, 244, 172, 166, 61, 137, 93, 246, 189, 157, 8, 187, 59, 170, 151, 191, 187, 164, 118, 22, 190, 185, 35, 23, 188, 187, 198, 38, 61, 238, 200, 129, 190, 81, 42, 0, 62, 77, 173, 88, 62, 83, 18, 49, 189, 182, 18, 109, 190, 162, 160, 160, 61, 137, 70, 196, 189, 177, 68, 237, 61, 203, 177, 235, 61, 136, 249, 16, 62, 45, 179, 113, 61, 49, 166, 123, 62, 166, 17, 230, 61, 40, 143, 174, 189, 238, 104, 175, 189, 15, 75, 28, 190, 101, 132, 41, 190, 153, 114, 86, 189, 233, 129, 124, 61, 161, 185, 19, 190, 118, 99, 129, 61, 241, 161, 47, 62, 76, 60, 132, 62, 189, 159, 32, 61, 161, 186, 234, 188, 15, 113, 114, 62, 123, 3, 36, 62, 145, 78, 199, 61, 77, 32, 38, 190, 243, 152, 68, 190, 153, 219, 11, 189, 160, 27, 20, 189, 29, 224, 129, 190, 162, 231, 130, 190, 164, 211, 74, 189, 59, 33, 213, 61, 151, 28, 249, 189, 46, 59, 149, 62, 233, 45, 171, 189, 211, 31, 136, 62, 131, 238, 195, 61, 210, 80, 50, 61, 18, 168, 7, 191, 31, 44, 119, 62, 211, 59, 0, 190, 88, 54, 140, 61, 96, 222, 70, 185, 255, 176, 46, 189, 34, 16, 201, 188, 100, 219, 223, 190, 254, 180, 215, 61, 122, 232, 57, 190, 130, 74, 126, 61, 188, 52, 227, 60, 80, 46, 151, 61, 17, 36, 178, 189, 160, 38, 48, 62, 240, 64, 29, 190, 185, 236, 32, 61, 197, 79, 190, 61, 27, 154, 22, 62, 13, 201, 79, 189, 10, 0, 24, 190, 182, 255, 167, 61, 183, 19, 173, 61, 141, 233, 203, 61, 197, 126, 209, 60, 227, 17, 4, 188, 164, 155, 45, 60, 46, 237, 173, 189, 142, 106, 127, 188, 87, 108, 47, 62, 233, 190, 167, 189, 123, 243, 139, 189, 41, 162, 30, 189, 117, 253, 231, 188, 193, 192, 180, 189, 73, 184, 241, 61, 26, 106, 7, 190, 148, 156, 79, 189, 95, 241, 40, 60, 252, 155, 17, 189, 86, 104, 106, 62, 217, 133, 43, 190, 223, 35, 185, 189, 225, 165, 41, 189, 22, 157, 38, 62, 127, 200, 46, 190, 106, 58, 183, 61, 29, 96, 223, 189, 99, 18, 133, 61, 60, 125, 180, 189, 176, 192, 15, 62, 52, 1, 194, 61, 224, 74, 74, 61, 218, 116, 33, 62, 240, 146, 182, 189, 103, 134, 2, 189, 146, 249, 146, 189, 0, 48, 1, 190, 10, 64, 151, 61, 54, 250, 222, 58, 76, 200, 166, 190, 161, 90, 106, 61, 171, 165, 4, 190, 53, 215, 246, 189, 185, 151, 116, 189, 205, 169, 125, 188, 210, 202, 36, 189, 172, 170, 129, 189, 192, 12, 131, 189, 6, 188, 155, 189, 255, 154, 51, 62, 49, 127, 15, 62, 23, 99, 10, 190, 126, 38, 15, 61, 180, 102, 64, 58, 133, 86, 214, 61, 232, 155, 31, 62, 240, 29, 198, 189, 179, 70, 251, 59, 71, 88, 57, 190, 233, 167, 0, 62, 149, 234, 43, 188, 74, 63, 49, 61, 177, 7, 44, 190, 79, 22, 194, 189, 78, 208, 41, 189, 63, 151, 128, 189, 232, 248, 92, 189, 172, 48, 158, 189, 150, 161, 70, 189, 21, 106, 73, 190, 139, 25, 27, 190, 228, 93, 157, 189, 120, 136, 17, 62, 26, 73, 29, 62, 225, 98, 49, 190, 203, 27, 202, 189, 192, 144, 204, 61, 39, 74, 230, 189, 95, 35, 204, 61, 107, 182, 170, 189, 215, 51, 174, 60, 85, 71, 142, 60, 195, 157, 220, 189, 182, 207, 114, 59, 76, 91, 39, 190, 58, 52, 45, 190, 203, 199, 204, 188, 155, 101, 64, 190, 108, 179, 37, 60, 79, 5, 164, 189, 225, 135, 135, 189, 221, 149, 39, 190, 231, 45, 13, 62, 168, 246, 44, 190, 246, 237, 44, 62, 122, 74, 158, 188, 149, 39, 36, 62, 154, 28, 22, 190, 210, 187, 233, 61, 48, 104, 59, 61, 135, 169, 211, 59, 137, 116, 24, 190, 150, 31, 39, 190, 82, 100, 21, 190, 100, 199, 248, 189, 91, 139, 29, 62, 247, 130, 139, 61, 140, 22, 154, 188, 163, 242, 109, 189, 163, 201, 191, 189, 101, 236, 204, 189, 172, 168, 29, 59, 154, 76, 134, 189, 183, 45, 218, 189, 128, 1, 200, 189, 139, 167, 226, 189, 90, 110, 173, 187, 0, 152, 16, 62, 181, 56, 50, 190, 49, 72, 34, 190, 211, 151, 13, 190, 134, 57, 49, 190, 67, 4, 213, 61, 255, 156, 214, 61, 230, 252, 157, 60, 170, 111, 47, 190, 242, 22, 142, 190, 50, 225, 109, 62, 224, 221, 3, 190, 25, 91, 23, 190, 12, 105, 12, 190, 161, 180, 201, 61, 205, 5, 169, 189, 46, 115, 236, 188, 65, 37, 161, 61, 182, 243, 38, 61, 83, 138, 56, 62, 9, 13, 65, 61, 34, 227, 181, 61, 210, 185, 168, 189, 17, 4, 6, 62, 225, 24, 117, 61, 173, 154, 32, 62, 196, 29, 69, 190, 216, 20, 217, 61, 137, 154, 12, 189, 59, 71, 6, 61, 117, 113, 74, 190, 199, 199, 90, 189, 75, 82, 15, 188, 118, 15, 234, 61, 191, 156, 51, 62, 230, 20, 245, 61, 75, 186, 141, 60, 236, 113, 41, 190, 162, 175, 10, 62, 177, 131, 250, 189, 47, 31, 206, 189, 151, 45, 160, 61, 248, 212, 223, 61, 201, 88, 25, 62, 166, 52, 165, 61, 152, 183, 5, 190, 30, 171, 200, 189, 189, 80, 192, 188, 164, 85, 76, 62, 96, 88, 157, 61, 134, 218, 20, 190, 86, 119, 22, 62, 40, 49, 59, 189, 245, 74, 206, 189, 195, 109, 100, 62, 112, 81, 160, 189, 152, 109, 53, 62, 79, 98, 9, 190, 171, 155, 11, 61, 180, 235, 62, 189, 164, 128, 82, 62, 168, 60, 156, 61, 130, 188, 53, 62, 166, 203, 182, 189, 228, 115, 9, 190, 102, 10, 143, 188, 28, 155, 66, 190, 121, 158, 218, 188, 152, 43, 237, 188, 72, 7, 248, 188, 199, 12, 153, 189, 113, 70, 187, 189, 248, 172, 37, 190, 252, 164, 0, 190, 23, 199, 199, 61, 180, 23, 209, 60, 210, 92, 129, 61, 83, 14, 154, 190, 71, 163, 194, 189, 197, 191, 252, 61, 90, 160, 175, 190, 104, 139, 69, 62, 213, 240, 52, 62, 34, 215, 56, 61, 32, 145, 126, 61, 180, 174, 123, 190, 208, 151, 117, 190, 83, 185, 68, 62, 230, 101, 125, 190, 165, 163, 169, 61, 4, 198, 90, 60, 148, 142, 37, 190, 26, 16, 238, 188, 189, 104, 209, 189, 138, 9, 248, 189, 53, 199, 106, 190, 124, 1, 236, 61, 104, 21, 174, 61, 160, 110, 77, 190, 243, 63, 72, 190, 222, 128, 117, 190, 174, 142, 31, 61, 6, 64, 160, 61, 244, 179, 246, 61, 73, 175, 193, 188, 236, 149, 7, 190, 3, 228, 1, 62, 193, 230, 113, 189, 220, 169, 140, 189, 64, 232, 245, 189, 84, 129, 237, 61, 147, 213, 152, 61, 51, 142, 55, 190, 238, 251, 119, 62, 225, 95, 185, 60, 121, 221, 148, 61, 173, 200, 203, 189, 200, 40, 54, 60, 75, 83, 197, 189, 1, 47, 78, 62, 190, 18, 143, 60, 27, 137, 117, 189, 88, 249, 223, 58, 231, 93, 162, 189, 146, 113, 249, 189, 218, 113, 89, 190, 190, 146, 14, 60, 75, 25, 63, 190, 196, 214, 17, 189, 130, 200, 131, 189, 203, 224, 31, 62, 140, 104, 70, 62, 119, 90, 0, 61, 172, 99, 29, 62, 93, 62, 223, 61, 84, 170, 159, 190, 14, 230, 145, 61, 221, 234, 134, 62, 21, 43, 222, 59, 29, 181, 227, 189, 75, 1, 1, 190, 199, 116, 53, 62, 104, 232, 234, 189, 138, 168, 30, 189, 29, 168, 207, 188, 234, 49, 20, 62, 217, 154, 95, 188, 89, 189, 75, 189, 88, 13, 13, 190, 99, 186, 135, 61, 143, 106, 160, 62, 187, 187, 12, 189, 233, 239, 25, 61, 100, 80, 220, 61, 59, 219, 191, 62, 46, 160, 41, 61, 67, 64, 166, 60, 157, 43, 113, 62, 147, 116, 9, 61, 90, 173, 133, 189, 15, 98, 13, 62, 248, 141, 214, 189, 41, 252, 205, 190, 82, 247, 221, 187, 234, 81, 143, 189, 246, 225, 169, 60, 245, 51, 86, 189, 4, 92, 17, 190, 166, 100, 10, 190, 35, 63, 236, 189, 195, 41, 144, 60, 57, 179, 176, 187, 138, 217, 6, 190, 141, 12, 172, 187, 137, 69, 121, 61, 138, 130, 116, 61, 234, 185, 37, 190, 1, 86, 228, 189, 151, 11, 123, 60, 45, 93, 252, 61, 153, 4, 131, 189, 166, 78, 86, 61, 174, 168, 6, 190, 3, 67, 164, 61, 128, 128, 152, 189, 101, 174, 233, 61, 146, 95, 108, 190, 128, 238, 132, 189, 112, 165, 22, 190, 24, 57, 178, 188, 23, 235, 138, 189, 147, 56, 37, 60, 111, 132, 9, 62, 130, 44, 201, 189, 168, 99, 220, 189, 141, 0, 169, 188, 139, 115, 103, 189, 40, 114, 226, 59, 77, 149, 245, 61, 104, 117, 249, 189, 204, 74, 18, 62, 93, 234, 114, 59, 50, 138, 72, 60, 138, 104, 61, 62, 80, 198, 213, 59, 142, 246, 110, 60, 189, 36, 41, 190, 245, 51, 127, 61, 127, 143, 145, 60, 99, 46, 20, 190, 206, 117, 33, 190, 209, 248, 17, 61, 85, 25, 233, 59, 143, 173, 36, 61, 127, 200, 74, 62, 87, 253, 190, 188, 134, 189, 67, 62, 0, 231, 239, 189, 166, 80, 97, 62, 34, 144, 15, 62, 160, 210, 202, 61, 86, 229, 247, 60, 243, 135, 143, 188, 63, 215, 75, 61, 253, 87, 238, 61, 28, 2, 42, 61, 112, 111, 194, 61, 199, 163, 228, 188, 93, 137, 29, 62, 112, 6, 61, 190, 225, 231, 95, 61, 67, 123, 145, 189, 14, 212, 198, 189, 88, 16, 149, 61, 14, 154, 171, 61, 21, 108, 164, 61, 118, 71, 134, 59, 45, 63, 105, 189, 149, 79, 19, 190, 187, 4, 188, 60, 14, 223, 71, 62, 32, 19, 11, 189, 150, 250, 78, 61, 89, 104, 43, 190, 84, 207, 192, 189, 206, 74, 198, 189, 229, 115, 32, 62, 189, 123, 239, 61, 2, 7, 44, 189, 17, 131, 1, 62, 114, 26, 116, 190, 88, 61, 207, 61, 82, 200, 248, 189, 183, 66, 186, 61, 0, 159, 220, 61, 0, 105, 21, 190, 77, 123, 20, 60, 116, 29, 144, 189, 107, 99, 128, 189, 131, 126, 251, 60, 3, 212, 12, 62, 71, 36, 112, 61, 94, 254, 150, 189, 235, 217, 46, 62, 168, 198, 185, 189, 170, 236, 128, 61, 67, 236, 223, 61, 122, 225, 12, 190, 163, 181, 72, 189, 172, 211, 37, 190, 220, 230, 6, 62, 114, 116, 66, 190, 87, 222, 9, 190, 58, 127, 89, 190, 219, 187, 152, 189, 131, 177, 64, 190, 29, 255, 1, 62, 93, 25, 47, 62, 188, 99, 224, 60, 131, 144, 112, 61, 131, 140, 25, 189, 182, 227, 140, 188, 33, 6, 252, 61, 252, 177, 17, 62, 80, 152, 128, 190, 87, 81, 107, 189, 94, 238, 72, 61, 194, 34, 139, 189, 177, 119, 29, 62, 200, 215, 100, 188, 64, 78, 23, 190, 246, 94, 137, 189, 22, 79, 2, 190, 236, 138, 184, 61, 71, 247, 122, 59, 29, 27, 16, 62, 221, 110, 223, 189, 66, 214, 250, 189, 219, 180, 185, 61, 250, 166, 240, 189, 28, 170, 150, 189, 149, 234, 239, 60, 108, 11, 60, 189, 247, 67, 152, 61, 246, 34, 21, 190, 192, 39, 155, 62, 243, 178, 11, 190, 47, 183, 6, 62, 72, 119, 207, 61, 174, 34, 28, 62, 177, 54, 22, 62, 63, 25, 129, 62, 56, 203, 213, 61, 57, 33, 249, 187, 81, 159, 2, 62, 132, 158, 75, 190, 60, 173, 128, 189, 120, 32, 53, 190, 253, 14, 53, 190, 204, 128, 108, 190, 81, 15, 47, 189, 7, 150, 55, 62, 211, 100, 93, 187, 247, 238, 225, 61, 142, 39, 17, 61, 63, 210, 142, 188, 8, 54, 159, 188, 59, 9, 37, 61, 154, 2, 189, 61, 223, 29, 48, 189, 82, 71, 251, 187, 225, 46, 228, 61, 4, 176, 175, 60, 162, 103, 99, 189, 208, 60, 43, 190, 14, 252, 38, 190, 57, 40, 9, 62, 185, 123, 150, 189, 73, 247, 206, 189, 156, 118, 230, 189, 223, 151, 219, 61, 39, 25, 35, 61, 109, 147, 41, 189, 72, 248, 169, 190, 21, 32, 230, 189, 120, 183, 48, 190, 64, 46, 221, 189, 165, 254, 0, 190, 47, 217, 88, 61, 47, 22, 28, 190, 10, 193, 14, 62, 141, 146, 170, 61, 116, 193, 62, 190, 251, 61, 105, 190, 199, 192, 155, 61, 9, 126, 209, 61, 187, 43, 208, 61, 26, 99, 68, 61, 133, 172, 187, 189, 57, 184, 244, 61, 241, 136, 108, 61, 153, 45, 18, 62, 118, 157, 36, 62, 194, 201, 42, 61, 243, 231, 108, 189, 129, 44, 106, 189, 12, 218, 32, 190, 62, 40, 192, 60, 194, 226, 8, 60, 132, 168, 46, 190, 166, 200, 178, 61, 205, 114, 142, 60, 207, 235, 164, 61, 68, 219, 244, 189, 236, 122, 226, 61, 108, 132, 2, 62, 15, 69, 176, 61, 238, 129, 56, 58, 75, 8, 156, 189, 28, 129, 49, 61, 13, 43, 34, 62, 159, 110, 153, 61, 168, 206, 117, 61, 69, 96, 190, 187, 54, 100, 223, 60, 253, 214, 217, 189, 148, 108, 166, 188, 60, 2, 68, 190, 214, 188, 183, 189, 93, 170, 196, 61, 77, 165, 236, 60, 153, 73, 239, 60, 77, 231, 14, 190, 185, 6, 219, 189, 7, 124, 62, 62, 178, 184, 204, 61, 96, 83, 252, 189, 106, 206, 209, 61, 44, 139, 19, 189, 8, 8, 12, 189, 191, 128, 63, 61, 79, 228, 44, 189, 42, 98, 179, 59, 197, 155, 215, 61, 73, 134, 15, 189, 228, 219, 16, 62, 16, 252, 197, 188, 142, 29, 153, 60, 131, 239, 14, 62, 212, 4, 239, 188, 6, 98, 224, 61, 208, 223, 253, 189, 134, 229, 215, 61, 43, 246, 161, 189, 94, 13, 148, 61, 50, 169, 193, 61, 177, 132, 47, 190, 153, 209, 31, 61, 174, 158, 147, 61, 54, 99, 10, 61, 22, 217, 129, 188, 80, 96, 127, 61, 186, 79, 216, 61, 199, 208, 159, 190, 193, 193, 220, 60, 174, 229, 122, 62, 193, 113, 118, 59, 13, 56, 154, 61, 169, 62, 59, 189, 173, 229, 159, 62, 194, 214, 139, 190, 192, 113, 86, 62, 125, 136, 0, 190, 46, 199, 24, 189, 3, 130, 44, 190, 14, 162, 13, 189, 17, 234, 118, 190, 98, 140, 193, 190, 7, 113, 109, 61, 93, 161, 105, 190, 132, 159, 83, 58, 33, 199, 193, 60, 76, 97, 94, 62, 112, 213, 192, 188, 51, 69, 80, 62, 121, 77, 196, 62, 166, 235, 129, 61, 6, 18, 253, 60, 97, 85, 166, 189, 107, 220, 192, 189, 21, 174, 1, 191, 33, 28, 207, 60, 192, 216, 116, 61, 248, 116, 139, 189, 67, 183, 170, 61, 224, 68, 9, 62, 186, 196, 206, 61, 246, 16, 138, 187, 253, 227, 41, 60, 129, 253, 30, 62, 211, 97, 173, 61, 30, 237, 245, 189, 128, 237, 166, 61, 223, 232, 61, 190, 3, 50, 4, 190, 187, 243, 58, 62, 181, 89, 46, 189, 90, 93, 42, 62, 145, 43, 52, 190, 81, 0, 116, 189, 105, 164, 68, 62, 129, 200, 90, 190, 216, 71, 53, 188, 110, 79, 15, 190, 38, 239, 24, 190, 254, 4, 59, 189, 11, 59, 3, 189, 118, 168, 25, 61, 227, 221, 16, 62, 19, 27, 245, 189, 132, 36, 58, 189, 165, 207, 4, 61, 175, 13, 233, 189, 61, 5, 171, 189, 122, 143, 111, 190, 243, 106, 155, 62, 68, 106, 86, 62, 188, 156, 200, 189, 186, 225, 22, 62, 78, 81, 79, 190, 22, 7, 219, 189, 108, 37, 193, 61, 25, 20, 114, 190, 209, 76, 210, 190, 63, 131, 138, 62, 84, 175, 208, 60, 136, 194, 136, 190, 39, 73, 67, 62, 238, 231, 36, 188, 126, 85, 232, 61, 78, 91, 213, 58, 240, 225, 74, 190, 49, 208, 35, 190, 68, 3, 20, 62, 208, 70, 246, 189, 87, 20, 9, 62, 42, 226, 131, 190, 130, 69, 210, 189, 188, 152, 163, 189, 7, 52, 182, 190, 24, 43, 151, 188, 204, 73, 131, 190, 26, 173, 11, 62, 173, 104, 8, 62, 49, 196, 128, 61, 38, 219, 189, 189, 168, 132, 68, 61, 71, 20, 180, 189, 63, 33, 208, 60, 92, 132, 175, 189, 183, 105, 61, 188, 217, 215, 26, 62, 61, 205, 229, 61, 168, 61, 197, 60, 121, 25, 28, 190, 201, 229, 1, 62, 76, 189, 191, 61, 40, 141, 23, 190, 78, 186, 51, 62, 233, 96, 38, 190, 92, 61, 121, 61, 73, 40, 7, 190, 33, 43, 31, 190, 83, 130, 35, 189, 130, 69, 250, 61, 27, 225, 147, 61, 30, 199, 46, 190, 59, 80, 182, 61, 41, 188, 153, 189, 33, 18, 30, 190, 55, 75, 98, 189, 77, 9, 233, 189, 151, 206, 86, 189, 23, 216, 57, 187, 179, 182, 141, 61, 75, 163, 17, 62, 196, 74, 246, 187, 27, 124, 182, 61, 95, 88, 43, 62, 30, 137, 42, 190, 166, 96, 6, 187, 194, 83, 73, 189, 7, 159, 217, 61, 210, 232, 78, 190, 22, 137, 27, 61, 52, 195, 240, 189, 186, 172, 25, 190, 120, 216, 94, 61, 70, 118, 79, 190, 215, 128, 109, 61, 154, 45, 215, 189, 33, 174, 22, 62, 210, 106, 40, 189, 25, 112, 185, 60, 115, 137, 142, 61, 199, 252, 77, 189, 144, 121, 224, 61, 227, 25, 41, 62, 71, 179, 1, 190, 98, 185, 245, 189, 10, 170, 138, 189, 7, 245, 170, 62, 134, 2, 113, 62, 32, 215, 115, 189, 135, 99, 157, 61, 164, 29, 146, 188, 183, 105, 10, 190, 63, 183, 131, 62, 154, 131, 119, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {52, 221, 112, 61, 111, 90, 69, 189, 75, 28, 101, 60, 188, 154, 49, 62, 164, 104, 63, 62, 50, 89, 220, 61, 73, 54, 31, 186, 226, 177, 156, 61, 102, 17, 53, 189, 35, 10, 183, 61, 50, 232, 50, 190, 213, 195, 54, 62, 204, 39, 199, 60, 253, 206, 238, 60, 108, 239, 83, 62, 135, 25, 199, 61, 209, 42, 20, 189, 3, 201, 70, 61, 38, 16, 152, 62, 233, 146, 143, 189, 183, 140, 214, 187, 134, 4, 117, 61, 96, 65, 36, 189, 143, 7, 24, 62, 74, 212, 99, 189, 135, 138, 17, 62, 135, 200, 14, 62, 30, 251, 173, 61, 149, 253, 211, 189, 167, 63, 35, 62, 55, 143, 31, 190, 16, 14, 192, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 173, 82, 190, 186, 68, 4, 190, 225, 5, 41, 62, 159, 241, 40, 190, 198, 190, 66, 62, 208, 188, 4, 191, 37, 197, 76, 62, 125, 104, 53, 190, 238, 77, 96, 62, 213, 121, 144, 62, 222, 62, 14, 190, 124, 39, 29, 189, 211, 43, 159, 61, 192, 244, 102, 188, 222, 98, 36, 62, 202, 128, 109, 190, 7, 36, 118, 62, 81, 217, 95, 62, 59, 218, 106, 190, 6, 3, 194, 189, 152, 189, 148, 189, 98, 218, 254, 60, 159, 202, 43, 190, 130, 12, 115, 62, 207, 234, 118, 61, 240, 170, 6, 189, 197, 249, 158, 188, 170, 76, 145, 190, 4, 29, 91, 190, 13, 0, 3, 63, 47, 71, 52, 190, 198, 223, 20, 190, 68, 252, 85, 188, 254, 100, 13, 62, 74, 61, 157, 61, 70, 141, 204, 189, 16, 33, 95, 190, 67, 66, 232, 189, 125, 27, 172, 189, 14, 188, 146, 61, 36, 97, 138, 59, 102, 220, 41, 190, 29, 90, 135, 61, 29, 248, 252, 189, 78, 100, 42, 189, 113, 74, 130, 189, 18, 250, 251, 189, 4, 238, 141, 189, 139, 89, 191, 61, 37, 149, 50, 62, 188, 104, 82, 61, 8, 48, 52, 62, 61, 238, 47, 190, 31, 187, 6, 62, 101, 185, 168, 61, 34, 215, 38, 187, 144, 2, 154, 61, 22, 147, 183, 189, 186, 83, 33, 190, 140, 204, 189, 59, 217, 50, 21, 188, 240, 141, 5, 190, 49, 178, 183, 61, 63, 137, 97, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 20, 64, 189, 154, 123, 74, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {194, 72, 243, 190, 114, 28, 102, 191, 114, 42, 210, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {199, 62, 7, 64, 45, 52, 40, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0075/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}