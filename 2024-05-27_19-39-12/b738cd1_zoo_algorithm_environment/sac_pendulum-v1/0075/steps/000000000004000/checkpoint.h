// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {181, 175, 6, 63, 11, 78, 230, 62, 133, 9, 224, 62, 77, 169, 121, 62, 203, 217, 37, 61, 186, 242, 119, 62, 48, 0, 248, 190, 18, 73, 24, 191, 238, 157, 31, 61, 184, 109, 32, 63, 244, 206, 95, 191, 59, 61, 146, 190, 179, 31, 156, 62, 66, 82, 137, 190, 29, 139, 54, 191, 152, 136, 98, 190, 245, 100, 202, 62, 230, 116, 208, 60, 51, 229, 30, 191, 150, 75, 67, 63, 120, 161, 6, 190, 9, 250, 46, 190, 1, 12, 181, 190, 198, 110, 80, 63, 180, 189, 76, 62, 0, 188, 95, 63, 80, 182, 204, 62, 167, 90, 99, 190, 5, 26, 224, 188, 172, 15, 204, 62, 61, 188, 246, 189, 82, 234, 43, 63, 237, 9, 83, 191, 198, 216, 204, 62, 105, 174, 128, 191, 223, 92, 177, 189, 173, 167, 9, 191, 179, 181, 229, 190, 95, 60, 230, 189, 79, 163, 68, 62, 49, 75, 8, 62, 88, 216, 206, 62, 91, 155, 57, 190, 84, 64, 49, 191, 65, 26, 192, 62, 145, 74, 2, 191, 14, 190, 76, 191, 227, 181, 207, 189, 141, 181, 1, 62, 158, 19, 14, 190, 61, 63, 28, 63, 162, 42, 2, 63, 15, 41, 27, 191, 75, 30, 212, 190, 213, 21, 146, 190, 184, 175, 133, 62, 52, 73, 209, 190, 38, 155, 158, 60, 126, 104, 77, 63, 199, 149, 175, 190, 88, 206, 143, 61, 43, 32, 246, 190, 115, 227, 143, 189, 182, 187, 217, 62, 71, 154, 183, 62, 172, 7, 42, 191, 5, 255, 244, 189, 230, 21, 237, 61, 23, 7, 157, 190, 54, 31, 23, 191, 127, 182, 241, 62, 231, 240, 16, 191, 138, 251, 80, 63, 195, 220, 232, 61, 194, 70, 4, 189, 70, 231, 113, 62, 154, 59, 40, 63, 227, 90, 179, 189, 254, 231, 250, 189, 117, 215, 87, 63, 77, 55, 226, 190, 149, 172, 15, 63, 226, 6, 77, 62, 17, 64, 236, 62, 111, 70, 203, 61, 80, 46, 80, 190, 75, 50, 44, 63, 29, 13, 15, 191, 124, 138, 215, 190, 165, 108, 66, 63, 62, 100, 39, 63, 53, 83, 0, 191, 81, 111, 161, 61, 197, 98, 32, 63, 114, 54, 202, 189, 189, 71, 29, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {167, 190, 236, 190, 146, 173, 178, 61, 157, 118, 86, 62, 130, 112, 141, 190, 163, 51, 190, 190, 187, 129, 158, 62, 173, 232, 242, 189, 253, 73, 69, 189, 120, 198, 45, 63, 236, 53, 240, 190, 57, 135, 95, 62, 253, 38, 49, 61, 122, 98, 171, 62, 197, 131, 79, 190, 116, 151, 7, 63, 199, 153, 144, 62, 63, 70, 38, 63, 135, 80, 177, 190, 37, 217, 180, 190, 189, 135, 71, 62, 241, 19, 41, 63, 231, 144, 41, 63, 205, 29, 253, 62, 235, 111, 230, 61, 255, 219, 109, 190, 139, 93, 67, 62, 187, 218, 116, 61, 55, 121, 30, 62, 23, 20, 155, 190, 3, 53, 225, 190, 55, 134, 4, 63, 196, 206, 7, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 221, 4, 190, 167, 168, 0, 189, 155, 59, 141, 60, 35, 2, 51, 189, 130, 240, 182, 61, 130, 49, 58, 189, 166, 165, 254, 189, 212, 228, 45, 62, 144, 42, 208, 189, 165, 187, 54, 61, 193, 124, 215, 189, 69, 28, 3, 62, 4, 84, 37, 61, 4, 162, 168, 189, 87, 147, 20, 190, 113, 50, 165, 61, 101, 32, 28, 190, 109, 202, 179, 61, 59, 167, 29, 62, 10, 211, 120, 190, 153, 82, 16, 190, 118, 126, 210, 189, 126, 108, 38, 190, 219, 170, 225, 60, 108, 78, 0, 190, 239, 192, 100, 190, 109, 214, 219, 188, 151, 112, 60, 61, 27, 135, 218, 186, 169, 58, 185, 189, 28, 156, 113, 190, 121, 20, 164, 61, 255, 254, 187, 61, 12, 213, 230, 61, 251, 191, 145, 190, 236, 140, 140, 190, 104, 39, 3, 189, 60, 133, 127, 62, 190, 34, 101, 61, 255, 139, 161, 189, 44, 7, 181, 62, 56, 219, 24, 189, 14, 104, 98, 190, 102, 251, 175, 190, 251, 139, 197, 190, 80, 39, 185, 61, 93, 130, 238, 189, 33, 102, 255, 190, 156, 213, 166, 61, 109, 21, 69, 190, 132, 97, 199, 61, 146, 254, 145, 61, 106, 243, 34, 190, 88, 117, 107, 62, 152, 77, 166, 60, 148, 183, 25, 190, 52, 158, 185, 62, 20, 172, 85, 62, 123, 175, 222, 189, 88, 182, 230, 61, 29, 222, 45, 62, 217, 92, 41, 187, 23, 170, 200, 61, 10, 142, 187, 188, 102, 59, 236, 189, 248, 156, 117, 190, 55, 206, 214, 186, 62, 72, 66, 62, 53, 114, 41, 62, 85, 185, 212, 189, 90, 134, 68, 190, 66, 23, 3, 62, 69, 51, 246, 60, 237, 163, 6, 61, 5, 117, 217, 188, 58, 80, 60, 62, 246, 186, 9, 190, 61, 54, 200, 61, 138, 245, 45, 62, 127, 111, 205, 61, 198, 127, 70, 62, 32, 73, 214, 61, 35, 224, 218, 188, 204, 106, 192, 190, 0, 245, 11, 61, 20, 182, 55, 61, 229, 201, 126, 61, 4, 121, 49, 190, 104, 7, 86, 61, 27, 121, 45, 190, 49, 48, 15, 190, 194, 214, 93, 190, 107, 55, 219, 61, 252, 198, 250, 60, 76, 55, 37, 61, 98, 157, 162, 62, 66, 134, 25, 190, 242, 52, 2, 62, 247, 136, 80, 62, 169, 136, 162, 190, 125, 214, 126, 190, 83, 152, 61, 61, 67, 205, 26, 190, 248, 83, 38, 190, 115, 46, 42, 189, 216, 207, 47, 62, 49, 168, 135, 62, 145, 154, 8, 190, 232, 64, 118, 62, 19, 225, 109, 188, 119, 249, 209, 61, 49, 11, 177, 61, 170, 167, 199, 61, 80, 155, 171, 190, 201, 223, 173, 189, 2, 160, 9, 62, 247, 76, 105, 62, 173, 124, 42, 62, 158, 242, 218, 189, 74, 105, 135, 189, 206, 175, 72, 62, 39, 132, 178, 188, 72, 231, 12, 61, 229, 177, 52, 62, 119, 141, 78, 62, 153, 105, 219, 185, 132, 212, 40, 61, 223, 96, 39, 190, 178, 9, 219, 61, 230, 214, 115, 190, 58, 44, 150, 189, 149, 213, 16, 61, 240, 101, 154, 62, 196, 183, 70, 190, 81, 218, 114, 190, 201, 177, 28, 59, 49, 58, 202, 61, 98, 86, 29, 190, 193, 72, 102, 190, 41, 207, 47, 62, 214, 254, 17, 59, 35, 247, 121, 187, 205, 159, 155, 61, 150, 171, 36, 190, 253, 161, 237, 61, 116, 13, 145, 60, 132, 216, 53, 61, 171, 238, 59, 189, 238, 101, 95, 62, 230, 245, 156, 61, 16, 115, 19, 62, 170, 219, 15, 187, 194, 175, 140, 59, 145, 140, 253, 189, 19, 54, 143, 190, 125, 15, 106, 189, 64, 172, 25, 190, 140, 116, 133, 62, 247, 217, 183, 62, 239, 30, 162, 61, 211, 147, 145, 61, 117, 40, 238, 61, 178, 33, 4, 62, 97, 85, 207, 190, 144, 101, 124, 189, 180, 219, 159, 61, 172, 121, 87, 62, 73, 146, 80, 191, 107, 255, 112, 188, 245, 175, 50, 189, 94, 211, 33, 61, 5, 212, 98, 190, 241, 247, 136, 61, 26, 232, 242, 189, 90, 118, 189, 189, 34, 246, 162, 62, 35, 123, 2, 190, 210, 249, 217, 188, 62, 164, 183, 190, 209, 63, 40, 62, 237, 206, 102, 189, 254, 233, 69, 61, 0, 150, 135, 62, 198, 146, 246, 61, 211, 140, 230, 62, 138, 55, 1, 61, 139, 193, 132, 62, 42, 144, 130, 187, 128, 205, 145, 59, 171, 208, 135, 191, 145, 156, 134, 190, 231, 212, 180, 190, 144, 25, 109, 61, 215, 157, 109, 189, 113, 195, 160, 61, 135, 39, 121, 61, 70, 89, 3, 190, 29, 118, 220, 61, 48, 81, 17, 62, 198, 0, 5, 190, 162, 102, 4, 189, 160, 42, 205, 189, 158, 251, 16, 62, 38, 129, 18, 190, 160, 213, 70, 190, 92, 141, 34, 190, 224, 233, 83, 189, 62, 163, 70, 190, 232, 199, 120, 189, 210, 140, 201, 61, 71, 26, 218, 61, 129, 8, 97, 190, 223, 76, 140, 189, 168, 3, 30, 189, 214, 240, 26, 62, 64, 198, 47, 190, 69, 140, 229, 189, 7, 25, 240, 188, 36, 4, 97, 190, 174, 52, 25, 62, 236, 87, 23, 189, 45, 85, 19, 62, 237, 8, 40, 190, 132, 78, 247, 189, 71, 123, 26, 190, 77, 202, 44, 188, 138, 198, 177, 61, 62, 90, 248, 189, 109, 85, 155, 189, 58, 224, 125, 61, 169, 42, 46, 190, 12, 197, 34, 62, 194, 96, 39, 62, 128, 217, 151, 189, 58, 201, 49, 61, 77, 120, 173, 61, 76, 143, 132, 190, 86, 181, 130, 61, 34, 154, 132, 189, 120, 158, 146, 61, 173, 192, 56, 62, 83, 251, 126, 190, 43, 160, 49, 189, 185, 101, 150, 189, 75, 55, 151, 189, 140, 146, 230, 61, 244, 59, 123, 190, 193, 4, 210, 190, 179, 237, 36, 185, 84, 207, 35, 61, 201, 217, 46, 61, 42, 128, 15, 189, 77, 231, 119, 61, 194, 101, 13, 62, 196, 209, 188, 61, 93, 190, 135, 61, 246, 164, 58, 190, 178, 154, 129, 190, 83, 174, 150, 61, 74, 100, 145, 61, 83, 51, 63, 61, 190, 92, 72, 61, 189, 184, 182, 188, 31, 194, 16, 61, 175, 174, 241, 61, 53, 216, 205, 190, 201, 58, 29, 189, 198, 84, 130, 62, 1, 22, 96, 189, 94, 114, 175, 190, 16, 209, 89, 61, 116, 143, 0, 190, 61, 10, 27, 62, 208, 2, 74, 62, 228, 179, 235, 61, 111, 154, 250, 189, 71, 163, 130, 62, 41, 13, 153, 60, 54, 67, 167, 189, 28, 92, 28, 190, 223, 102, 56, 190, 165, 150, 98, 190, 33, 174, 130, 190, 10, 168, 214, 189, 53, 169, 153, 190, 206, 236, 254, 61, 6, 99, 45, 62, 16, 155, 169, 62, 210, 86, 59, 61, 38, 19, 144, 189, 222, 12, 120, 62, 163, 204, 50, 62, 124, 129, 161, 61, 221, 32, 14, 189, 50, 129, 159, 189, 217, 103, 64, 61, 33, 129, 161, 61, 99, 27, 149, 190, 16, 41, 68, 191, 232, 234, 51, 190, 180, 183, 203, 61, 97, 87, 208, 189, 27, 105, 165, 62, 225, 133, 11, 190, 200, 76, 167, 62, 33, 68, 165, 61, 246, 175, 243, 60, 179, 151, 151, 191, 204, 143, 43, 62, 5, 195, 252, 190, 16, 181, 6, 61, 36, 80, 146, 189, 225, 69, 9, 190, 94, 71, 129, 190, 251, 149, 117, 191, 20, 199, 68, 61, 84, 15, 112, 190, 152, 42, 33, 62, 201, 134, 62, 189, 19, 148, 191, 61, 66, 213, 253, 188, 143, 225, 106, 62, 1, 172, 148, 190, 5, 9, 12, 189, 30, 17, 141, 61, 130, 74, 81, 62, 101, 50, 7, 62, 75, 225, 255, 189, 120, 20, 60, 62, 82, 216, 211, 61, 150, 9, 158, 60, 3, 11, 149, 188, 145, 166, 2, 190, 199, 237, 240, 60, 115, 244, 223, 189, 227, 68, 8, 190, 125, 233, 83, 62, 41, 207, 254, 189, 152, 224, 132, 189, 48, 98, 248, 189, 1, 85, 25, 189, 222, 74, 172, 189, 135, 176, 169, 61, 86, 152, 89, 190, 126, 191, 3, 62, 8, 115, 52, 62, 101, 153, 22, 190, 204, 8, 158, 62, 106, 9, 1, 190, 190, 23, 175, 189, 227, 3, 86, 188, 29, 149, 30, 62, 161, 137, 173, 190, 255, 129, 44, 61, 250, 26, 49, 190, 90, 110, 114, 190, 254, 106, 153, 189, 45, 201, 50, 62, 117, 89, 17, 62, 144, 124, 175, 59, 247, 141, 62, 62, 166, 153, 22, 190, 165, 149, 93, 189, 114, 147, 147, 190, 230, 229, 132, 190, 140, 187, 128, 189, 26, 32, 226, 188, 95, 84, 9, 191, 226, 46, 6, 61, 52, 5, 156, 190, 75, 0, 221, 189, 45, 37, 49, 189, 45, 149, 157, 188, 39, 112, 91, 187, 23, 131, 140, 189, 57, 124, 12, 190, 149, 168, 158, 61, 95, 167, 116, 62, 109, 200, 15, 62, 211, 239, 44, 190, 69, 183, 214, 188, 249, 30, 42, 189, 51, 190, 236, 61, 6, 242, 160, 62, 240, 29, 198, 189, 179, 70, 251, 59, 71, 88, 57, 190, 233, 167, 0, 62, 149, 234, 43, 188, 74, 63, 49, 61, 177, 7, 44, 190, 79, 22, 194, 189, 78, 208, 41, 189, 63, 151, 128, 189, 232, 248, 92, 189, 172, 48, 158, 189, 150, 161, 70, 189, 21, 106, 73, 190, 139, 25, 27, 190, 228, 93, 157, 189, 120, 136, 17, 62, 26, 73, 29, 62, 225, 98, 49, 190, 203, 27, 202, 189, 192, 144, 204, 61, 39, 74, 230, 189, 95, 35, 204, 61, 107, 182, 170, 189, 215, 51, 174, 60, 85, 71, 142, 60, 195, 157, 220, 189, 182, 207, 114, 59, 76, 91, 39, 190, 58, 52, 45, 190, 203, 199, 204, 188, 155, 101, 64, 190, 108, 179, 37, 60, 79, 5, 164, 189, 225, 135, 135, 189, 221, 149, 39, 190, 231, 45, 13, 62, 168, 246, 44, 190, 246, 237, 44, 62, 122, 74, 158, 188, 149, 39, 36, 62, 154, 28, 22, 190, 210, 187, 233, 61, 48, 104, 59, 61, 135, 169, 211, 59, 137, 116, 24, 190, 150, 31, 39, 190, 82, 100, 21, 190, 100, 199, 248, 189, 91, 139, 29, 62, 247, 130, 139, 61, 140, 22, 154, 188, 163, 242, 109, 189, 163, 201, 191, 189, 101, 236, 204, 189, 172, 168, 29, 59, 154, 76, 134, 189, 183, 45, 218, 189, 128, 1, 200, 189, 139, 167, 226, 189, 90, 110, 173, 187, 0, 152, 16, 62, 181, 56, 50, 190, 49, 72, 34, 190, 46, 126, 8, 190, 222, 113, 79, 190, 148, 176, 164, 61, 4, 86, 93, 62, 239, 144, 139, 61, 236, 167, 227, 189, 25, 86, 81, 190, 63, 12, 159, 62, 106, 98, 160, 188, 144, 45, 49, 190, 5, 90, 140, 190, 215, 208, 139, 61, 58, 32, 249, 189, 41, 240, 12, 188, 31, 61, 163, 61, 51, 153, 28, 189, 116, 0, 115, 62, 45, 20, 202, 61, 195, 144, 153, 61, 172, 39, 90, 190, 218, 20, 240, 61, 22, 83, 34, 60, 52, 202, 38, 62, 10, 196, 131, 190, 52, 161, 142, 62, 186, 69, 41, 189, 165, 178, 9, 190, 152, 126, 115, 190, 2, 230, 195, 189, 75, 130, 173, 61, 75, 41, 26, 62, 227, 215, 148, 62, 84, 171, 186, 61, 212, 252, 4, 61, 57, 199, 98, 190, 252, 156, 37, 189, 124, 224, 206, 189, 216, 30, 241, 189, 118, 126, 167, 61, 220, 203, 202, 61, 24, 10, 53, 62, 62, 14, 168, 61, 176, 169, 39, 190, 188, 23, 102, 190, 3, 72, 44, 190, 183, 39, 41, 62, 254, 151, 128, 61, 64, 232, 148, 190, 26, 3, 22, 62, 29, 185, 246, 189, 46, 252, 174, 189, 211, 212, 72, 62, 194, 138, 207, 189, 22, 92, 82, 62, 27, 53, 56, 190, 163, 22, 117, 189, 178, 159, 12, 62, 112, 108, 137, 62, 240, 36, 28, 61, 196, 111, 86, 62, 145, 154, 160, 189, 158, 135, 28, 190, 139, 100, 216, 58, 234, 126, 105, 189, 176, 123, 173, 60, 215, 250, 228, 188, 234, 221, 172, 60, 204, 29, 131, 60, 2, 26, 181, 189, 164, 161, 46, 185, 217, 175, 88, 188, 73, 241, 86, 62, 53, 57, 71, 62, 226, 204, 215, 60, 9, 85, 127, 191, 135, 18, 124, 190, 78, 35, 41, 62, 43, 189, 153, 190, 199, 40, 138, 62, 93, 9, 47, 62, 96, 163, 31, 62, 210, 26, 247, 61, 145, 111, 115, 190, 190, 16, 64, 191, 77, 206, 29, 62, 187, 206, 74, 191, 130, 53, 163, 61, 240, 150, 220, 188, 47, 74, 121, 190, 223, 151, 242, 189, 196, 251, 250, 190, 73, 238, 1, 190, 48, 0, 136, 190, 107, 239, 108, 62, 33, 142, 120, 61, 229, 239, 58, 190, 111, 91, 155, 190, 165, 218, 182, 190, 22, 17, 100, 59, 244, 213, 194, 62, 92, 102, 140, 62, 208, 237, 96, 188, 25, 55, 198, 189, 168, 202, 83, 62, 183, 163, 111, 60, 60, 5, 24, 190, 243, 38, 129, 190, 38, 135, 19, 62, 28, 64, 119, 60, 42, 241, 114, 190, 249, 118, 97, 62, 69, 140, 130, 189, 220, 228, 237, 61, 246, 172, 164, 61, 89, 59, 131, 61, 22, 228, 102, 190, 232, 233, 83, 62, 33, 187, 10, 60, 45, 49, 64, 189, 199, 225, 150, 189, 124, 144, 121, 62, 255, 138, 12, 190, 189, 248, 194, 190, 250, 113, 239, 189, 181, 94, 143, 190, 106, 42, 150, 61, 12, 150, 236, 59, 132, 188, 235, 62, 21, 173, 67, 62, 177, 192, 169, 61, 61, 203, 143, 62, 12, 18, 108, 190, 194, 35, 210, 190, 18, 80, 217, 60, 125, 127, 32, 62, 44, 211, 12, 189, 220, 152, 46, 190, 153, 209, 191, 189, 99, 5, 47, 62, 206, 129, 253, 189, 16, 84, 192, 60, 135, 61, 37, 189, 19, 175, 115, 62, 121, 147, 222, 61, 208, 50, 25, 189, 91, 92, 135, 190, 204, 20, 109, 189, 164, 205, 137, 62, 178, 8, 161, 61, 185, 60, 42, 61, 161, 240, 254, 61, 179, 58, 180, 62, 109, 212, 79, 62, 184, 92, 29, 60, 65, 108, 79, 62, 230, 128, 189, 61, 106, 30, 11, 188, 110, 150, 161, 61, 223, 228, 189, 188, 15, 63, 248, 190, 60, 114, 236, 189, 196, 203, 38, 190, 30, 49, 26, 62, 135, 20, 63, 62, 206, 247, 9, 59, 159, 34, 131, 190, 199, 106, 232, 190, 89, 25, 105, 61, 113, 131, 253, 189, 108, 90, 72, 190, 219, 220, 240, 189, 135, 136, 168, 62, 249, 245, 41, 62, 203, 116, 152, 190, 87, 219, 130, 188, 18, 108, 41, 62, 63, 119, 25, 62, 218, 137, 31, 62, 18, 211, 251, 186, 140, 119, 85, 190, 70, 70, 127, 62, 236, 85, 174, 189, 228, 125, 4, 62, 228, 152, 49, 191, 127, 113, 145, 189, 220, 119, 184, 190, 39, 53, 171, 189, 169, 131, 52, 190, 67, 245, 17, 189, 76, 196, 68, 62, 189, 145, 169, 61, 182, 167, 221, 61, 3, 14, 161, 189, 7, 72, 133, 189, 210, 234, 171, 61, 245, 81, 156, 189, 7, 233, 65, 190, 33, 243, 17, 62, 195, 200, 137, 188, 122, 193, 239, 188, 149, 250, 63, 62, 87, 116, 231, 59, 73, 175, 129, 188, 207, 185, 32, 190, 119, 51, 214, 61, 45, 101, 14, 189, 248, 13, 22, 190, 197, 161, 198, 189, 171, 15, 237, 59, 155, 48, 185, 189, 161, 88, 29, 189, 156, 255, 27, 62, 236, 203, 173, 60, 129, 4, 49, 62, 163, 209, 205, 189, 13, 58, 86, 62, 101, 44, 16, 62, 81, 238, 144, 61, 160, 132, 52, 188, 142, 99, 177, 188, 26, 197, 59, 61, 217, 226, 143, 61, 225, 219, 155, 59, 205, 65, 180, 60, 2, 175, 249, 188, 69, 157, 14, 62, 2, 248, 159, 190, 201, 105, 15, 189, 211, 224, 238, 189, 236, 32, 40, 61, 176, 19, 148, 62, 145, 132, 50, 61, 56, 106, 166, 61, 227, 93, 111, 189, 221, 129, 225, 61, 154, 223, 134, 190, 209, 112, 164, 61, 32, 34, 226, 61, 177, 237, 93, 190, 17, 23, 12, 187, 250, 82, 109, 190, 35, 232, 78, 190, 115, 154, 253, 188, 210, 250, 140, 62, 101, 0, 73, 189, 147, 135, 104, 59, 33, 114, 50, 62, 99, 217, 38, 189, 155, 14, 137, 190, 16, 109, 159, 189, 133, 222, 101, 62, 174, 26, 159, 61, 18, 66, 97, 190, 183, 153, 169, 188, 114, 155, 188, 190, 65, 55, 93, 190, 131, 126, 251, 60, 3, 212, 12, 62, 199, 117, 81, 61, 52, 199, 171, 189, 244, 195, 32, 62, 96, 233, 172, 189, 216, 162, 138, 61, 67, 236, 223, 61, 122, 225, 12, 190, 163, 181, 72, 189, 217, 212, 50, 190, 165, 115, 2, 62, 83, 33, 75, 190, 87, 222, 9, 190, 219, 251, 82, 190, 112, 91, 168, 189, 131, 177, 64, 190, 231, 47, 231, 61, 155, 100, 29, 62, 100, 247, 251, 59, 19, 201, 92, 61, 108, 14, 58, 189, 142, 221, 201, 188, 49, 138, 226, 61, 12, 163, 18, 62, 243, 238, 129, 190, 248, 52, 153, 189, 94, 238, 72, 61, 194, 34, 139, 189, 177, 119, 29, 62, 122, 126, 172, 187, 165, 212, 41, 190, 190, 46, 233, 189, 105, 56, 51, 190, 184, 185, 182, 188, 147, 82, 194, 61, 60, 131, 39, 62, 125, 52, 51, 189, 195, 169, 16, 61, 127, 117, 19, 62, 90, 146, 217, 188, 29, 245, 223, 189, 240, 17, 145, 60, 126, 197, 97, 189, 205, 250, 254, 59, 88, 73, 38, 190, 145, 77, 90, 62, 100, 79, 128, 190, 121, 36, 8, 62, 220, 163, 245, 61, 213, 240, 70, 62, 73, 188, 69, 62, 21, 209, 62, 62, 254, 91, 221, 61, 219, 183, 136, 188, 41, 55, 244, 61, 75, 196, 135, 190, 65, 64, 105, 60, 73, 9, 32, 190, 122, 158, 112, 190, 124, 87, 146, 190, 164, 104, 8, 61, 136, 153, 31, 62, 224, 120, 232, 60, 100, 121, 124, 62, 44, 206, 227, 61, 57, 218, 4, 190, 194, 69, 210, 188, 59, 9, 37, 61, 153, 88, 135, 61, 199, 112, 35, 190, 93, 92, 154, 186, 5, 81, 13, 62, 234, 34, 4, 61, 223, 129, 94, 189, 112, 40, 63, 190, 53, 172, 77, 190, 54, 229, 116, 62, 212, 23, 198, 189, 232, 206, 10, 190, 26, 43, 194, 189, 223, 151, 219, 61, 39, 25, 35, 61, 11, 81, 210, 189, 146, 138, 168, 190, 63, 240, 243, 189, 27, 236, 121, 190, 214, 32, 217, 189, 170, 179, 32, 189, 57, 246, 157, 61, 77, 24, 71, 190, 206, 123, 92, 62, 65, 97, 243, 61, 153, 20, 86, 190, 210, 198, 25, 189, 152, 159, 146, 61, 200, 188, 229, 60, 64, 151, 198, 61, 68, 14, 41, 62, 124, 156, 97, 190, 160, 129, 148, 61, 106, 242, 60, 61, 120, 180, 218, 61, 193, 228, 235, 61, 44, 37, 2, 61, 116, 169, 139, 189, 214, 203, 163, 189, 75, 63, 147, 189, 112, 223, 192, 61, 132, 125, 132, 189, 88, 179, 6, 190, 61, 159, 70, 62, 179, 32, 157, 58, 117, 244, 115, 60, 36, 83, 62, 190, 9, 14, 129, 61, 84, 251, 100, 62, 151, 170, 164, 61, 82, 34, 8, 61, 141, 211, 165, 189, 211, 190, 150, 61, 248, 169, 0, 62, 58, 157, 10, 61, 92, 251, 105, 61, 185, 56, 120, 188, 28, 127, 0, 189, 55, 132, 149, 189, 7, 207, 149, 189, 2, 151, 139, 190, 25, 223, 197, 189, 47, 153, 56, 62, 63, 61, 201, 189, 253, 68, 1, 188, 176, 231, 16, 190, 102, 99, 253, 189, 163, 127, 30, 62, 57, 215, 218, 61, 194, 55, 6, 190, 199, 197, 161, 61, 166, 90, 6, 61, 86, 191, 185, 60, 190, 40, 162, 188, 211, 201, 162, 188, 36, 154, 179, 61, 18, 129, 190, 61, 181, 52, 209, 189, 243, 161, 199, 61, 10, 59, 146, 189, 253, 11, 196, 61, 82, 94, 13, 62, 168, 65, 235, 58, 63, 215, 217, 61, 32, 61, 202, 189, 161, 58, 161, 61, 99, 90, 253, 189, 232, 233, 137, 61, 16, 111, 164, 61, 200, 78, 86, 190, 167, 124, 156, 61, 37, 13, 1, 61, 83, 147, 241, 61, 149, 35, 110, 62, 185, 189, 222, 61, 119, 9, 49, 189, 233, 153, 163, 190, 236, 62, 46, 189, 232, 40, 15, 62, 19, 28, 72, 190, 12, 182, 181, 60, 73, 144, 225, 61, 28, 50, 198, 62, 136, 196, 159, 190, 137, 179, 129, 62, 215, 164, 72, 61, 147, 251, 220, 187, 240, 152, 115, 189, 22, 186, 192, 189, 152, 71, 130, 190, 5, 50, 244, 190, 19, 74, 33, 61, 92, 152, 0, 190, 212, 159, 175, 61, 16, 76, 93, 61, 188, 53, 142, 62, 54, 188, 97, 62, 131, 204, 44, 62, 219, 183, 190, 62, 71, 101, 143, 62, 199, 81, 68, 62, 170, 154, 190, 190, 171, 175, 154, 189, 207, 53, 248, 190, 172, 159, 183, 59, 254, 220, 207, 61, 219, 59, 14, 189, 238, 160, 149, 62, 206, 223, 218, 62, 175, 74, 109, 61, 94, 157, 219, 188, 186, 195, 138, 61, 29, 118, 50, 62, 19, 115, 215, 61, 21, 102, 130, 190, 103, 219, 239, 62, 50, 236, 77, 190, 9, 160, 30, 190, 205, 139, 128, 62, 101, 15, 124, 61, 151, 68, 98, 62, 138, 29, 9, 62, 246, 197, 79, 62, 204, 98, 74, 61, 92, 114, 194, 189, 193, 234, 136, 186, 172, 147, 137, 190, 25, 23, 255, 190, 184, 73, 253, 185, 87, 196, 48, 189, 71, 61, 187, 189, 91, 80, 62, 62, 69, 93, 156, 189, 62, 244, 30, 60, 42, 120, 28, 62, 91, 228, 214, 59, 237, 165, 21, 190, 83, 3, 164, 190, 237, 208, 149, 62, 210, 12, 3, 63, 77, 194, 37, 62, 37, 50, 45, 62, 214, 133, 58, 190, 135, 104, 25, 189, 171, 120, 18, 62, 13, 241, 144, 190, 15, 255, 40, 191, 107, 107, 134, 62, 100, 184, 124, 188, 98, 124, 143, 190, 157, 246, 77, 62, 12, 248, 182, 189, 30, 164, 19, 62, 193, 79, 118, 62, 194, 26, 165, 189, 218, 82, 192, 190, 216, 218, 38, 62, 31, 217, 228, 189, 70, 179, 62, 62, 232, 9, 170, 190, 15, 246, 194, 62, 23, 19, 8, 190, 119, 80, 29, 191, 50, 141, 233, 189, 178, 180, 167, 190, 154, 248, 107, 62, 140, 51, 89, 62, 47, 216, 4, 63, 38, 219, 189, 189, 168, 132, 68, 61, 71, 20, 180, 189, 63, 33, 208, 60, 92, 132, 175, 189, 183, 105, 61, 188, 217, 215, 26, 62, 61, 205, 229, 61, 168, 61, 197, 60, 121, 25, 28, 190, 201, 229, 1, 62, 76, 189, 191, 61, 40, 141, 23, 190, 78, 186, 51, 62, 233, 96, 38, 190, 92, 61, 121, 61, 73, 40, 7, 190, 33, 43, 31, 190, 83, 130, 35, 189, 130, 69, 250, 61, 27, 225, 147, 61, 30, 199, 46, 190, 59, 80, 182, 61, 41, 188, 153, 189, 33, 18, 30, 190, 55, 75, 98, 189, 77, 9, 233, 189, 151, 206, 86, 189, 23, 216, 57, 187, 179, 182, 141, 61, 75, 163, 17, 62, 196, 74, 246, 187, 253, 84, 57, 60, 254, 93, 43, 62, 0, 2, 200, 59, 170, 183, 9, 190, 19, 156, 243, 188, 247, 70, 16, 61, 209, 145, 215, 190, 140, 100, 139, 189, 70, 8, 110, 190, 162, 224, 107, 190, 70, 230, 11, 62, 36, 250, 58, 190, 184, 71, 50, 62, 84, 114, 115, 190, 174, 188, 155, 62, 115, 89, 26, 62, 227, 32, 160, 60, 197, 166, 74, 61, 138, 254, 82, 188, 89, 195, 55, 62, 52, 150, 142, 62, 158, 183, 165, 189, 89, 249, 185, 189, 34, 199, 29, 190, 163, 175, 205, 62, 154, 183, 91, 62, 57, 34, 189, 60, 218, 23, 129, 61, 11, 52, 66, 189, 127, 32, 135, 190, 98, 124, 155, 62, 57, 81, 33, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 116, 66, 61, 195, 178, 76, 60, 140, 236, 39, 61, 146, 213, 102, 62, 101, 208, 88, 62, 45, 92, 36, 62, 73, 54, 31, 186, 52, 71, 151, 61, 175, 248, 76, 57, 44, 254, 222, 61, 26, 156, 28, 190, 165, 84, 99, 62, 204, 39, 199, 60, 253, 206, 238, 60, 163, 143, 123, 62, 110, 124, 186, 61, 61, 95, 40, 61, 137, 237, 157, 61, 213, 45, 178, 62, 30, 204, 41, 189, 96, 210, 233, 60, 102, 233, 47, 61, 75, 14, 48, 189, 91, 107, 21, 62, 187, 40, 154, 189, 127, 211, 77, 62, 39, 70, 77, 62, 96, 91, 198, 61, 57, 168, 192, 189, 159, 236, 79, 62, 55, 143, 31, 190, 238, 133, 138, 58};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 119, 48, 190, 231, 195, 165, 190, 111, 188, 123, 62, 239, 105, 121, 190, 66, 48, 149, 62, 10, 247, 80, 191, 37, 197, 76, 62, 62, 105, 130, 190, 239, 4, 183, 62, 88, 86, 16, 63, 178, 170, 141, 190, 30, 236, 12, 190, 211, 43, 159, 61, 192, 244, 102, 188, 167, 42, 151, 62, 74, 154, 133, 190, 69, 154, 35, 63, 152, 42, 224, 62, 234, 246, 142, 190, 206, 146, 58, 191, 189, 41, 22, 59, 146, 63, 161, 62, 199, 31, 30, 190, 155, 247, 84, 62, 7, 255, 28, 62, 140, 212, 205, 187, 115, 71, 226, 188, 107, 85, 177, 190, 207, 184, 165, 190, 141, 71, 79, 63, 47, 71, 52, 190, 96, 32, 162, 190, 155, 1, 12, 189, 90, 121, 253, 61, 204, 178, 179, 61, 91, 106, 201, 189, 78, 30, 103, 190, 51, 229, 161, 189, 125, 27, 172, 189, 247, 176, 18, 61, 3, 219, 36, 189, 235, 142, 247, 189, 102, 4, 191, 61, 84, 1, 120, 190, 78, 100, 42, 189, 113, 74, 130, 189, 53, 59, 202, 189, 158, 37, 159, 189, 153, 215, 8, 62, 65, 2, 70, 62, 239, 98, 42, 61, 23, 151, 104, 62, 154, 52, 16, 190, 88, 158, 0, 62, 214, 219, 152, 61, 112, 100, 167, 188, 97, 151, 35, 62, 211, 251, 210, 189, 106, 95, 48, 190, 229, 60, 129, 61, 183, 46, 46, 189, 88, 73, 247, 189, 49, 178, 183, 61, 99, 100, 180, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {62, 201, 85, 189, 250, 58, 143, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {192, 116, 100, 62, 129, 95, 49, 191, 247, 156, 2, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {221, 109, 215, 63, 133, 50, 42, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0075/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}