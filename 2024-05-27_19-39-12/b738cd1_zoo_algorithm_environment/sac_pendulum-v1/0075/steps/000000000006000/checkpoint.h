// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {200, 197, 64, 63, 88, 115, 44, 63, 91, 201, 187, 62, 143, 48, 159, 62, 150, 0, 152, 62, 138, 98, 103, 62, 166, 93, 26, 191, 6, 84, 221, 190, 178, 231, 132, 188, 197, 207, 49, 63, 138, 107, 137, 191, 212, 132, 175, 190, 157, 232, 180, 62, 25, 89, 22, 191, 82, 71, 45, 191, 143, 226, 33, 190, 117, 79, 67, 63, 198, 89, 6, 61, 136, 148, 22, 191, 177, 7, 102, 63, 236, 40, 173, 189, 220, 144, 141, 190, 68, 228, 66, 63, 108, 145, 79, 63, 177, 133, 73, 62, 173, 253, 167, 63, 238, 1, 17, 63, 165, 16, 191, 190, 221, 77, 105, 62, 149, 103, 198, 62, 131, 16, 0, 60, 252, 134, 153, 61, 250, 69, 111, 191, 0, 118, 221, 62, 128, 0, 146, 191, 3, 238, 64, 189, 41, 215, 38, 191, 241, 152, 14, 191, 171, 7, 163, 188, 100, 178, 82, 62, 96, 76, 165, 62, 244, 44, 204, 62, 50, 41, 27, 190, 130, 215, 9, 191, 138, 217, 205, 62, 231, 115, 2, 191, 232, 132, 146, 191, 140, 194, 60, 190, 197, 50, 191, 61, 141, 255, 69, 62, 127, 139, 21, 63, 169, 110, 31, 63, 44, 13, 130, 191, 88, 242, 198, 190, 196, 126, 163, 190, 126, 123, 53, 62, 247, 244, 202, 190, 118, 161, 29, 62, 181, 180, 58, 63, 135, 31, 153, 190, 250, 51, 18, 61, 220, 168, 136, 190, 48, 155, 20, 189, 11, 103, 9, 63, 139, 149, 25, 189, 255, 198, 63, 191, 17, 79, 61, 190, 97, 51, 34, 62, 24, 105, 137, 190, 166, 94, 14, 191, 246, 125, 212, 187, 213, 98, 24, 191, 150, 195, 90, 63, 48, 252, 127, 62, 68, 151, 131, 61, 9, 23, 167, 62, 149, 171, 29, 63, 196, 243, 37, 61, 54, 5, 224, 61, 233, 226, 240, 62, 28, 86, 0, 191, 25, 133, 28, 63, 248, 79, 212, 62, 113, 84, 224, 62, 50, 99, 146, 185, 216, 153, 39, 61, 214, 107, 47, 63, 19, 75, 26, 191, 90, 210, 240, 62, 17, 34, 79, 63, 133, 18, 60, 63, 167, 149, 13, 191, 200, 88, 159, 60, 43, 145, 31, 63, 34, 89, 151, 190, 229, 212, 19, 191};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {235, 95, 188, 190, 97, 228, 7, 62, 254, 40, 99, 62, 231, 20, 156, 190, 228, 185, 191, 190, 176, 14, 154, 62, 243, 3, 239, 189, 204, 61, 68, 61, 250, 190, 22, 63, 221, 60, 205, 190, 244, 129, 190, 61, 102, 51, 130, 189, 11, 182, 191, 62, 77, 67, 153, 189, 30, 77, 227, 62, 248, 1, 111, 62, 128, 127, 43, 63, 217, 35, 193, 190, 57, 199, 92, 190, 6, 182, 206, 61, 245, 113, 47, 63, 106, 76, 21, 63, 203, 65, 234, 62, 48, 13, 220, 189, 193, 29, 102, 190, 53, 208, 89, 62, 253, 66, 223, 189, 215, 166, 71, 62, 185, 23, 29, 190, 0, 17, 209, 190, 139, 238, 225, 62, 219, 90, 45, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {209, 221, 4, 190, 167, 168, 0, 189, 155, 59, 141, 60, 35, 2, 51, 189, 130, 240, 182, 61, 130, 49, 58, 189, 166, 165, 254, 189, 212, 228, 45, 62, 144, 42, 208, 189, 165, 187, 54, 61, 193, 124, 215, 189, 69, 28, 3, 62, 4, 84, 37, 61, 4, 162, 168, 189, 87, 147, 20, 190, 113, 50, 165, 61, 101, 32, 28, 190, 109, 202, 179, 61, 59, 167, 29, 62, 10, 211, 120, 190, 153, 82, 16, 190, 118, 126, 210, 189, 126, 108, 38, 190, 219, 170, 225, 60, 108, 78, 0, 190, 239, 192, 100, 190, 109, 214, 219, 188, 151, 112, 60, 61, 27, 135, 218, 186, 169, 58, 185, 189, 28, 156, 113, 190, 121, 20, 164, 61, 168, 203, 162, 61, 230, 117, 224, 61, 160, 166, 159, 190, 48, 191, 92, 191, 88, 198, 242, 189, 231, 46, 165, 62, 202, 95, 125, 62, 232, 1, 152, 189, 118, 218, 195, 62, 214, 38, 1, 189, 39, 13, 53, 190, 170, 195, 247, 190, 45, 252, 251, 190, 87, 27, 167, 61, 27, 219, 218, 189, 166, 205, 241, 190, 234, 106, 169, 61, 229, 82, 76, 191, 60, 218, 155, 62, 206, 180, 15, 62, 221, 134, 74, 190, 2, 212, 134, 62, 201, 170, 238, 60, 125, 250, 223, 189, 222, 157, 181, 62, 34, 176, 157, 62, 43, 249, 71, 189, 99, 186, 233, 61, 19, 48, 40, 62, 167, 154, 53, 60, 182, 162, 103, 61, 165, 217, 66, 189, 183, 39, 15, 190, 112, 24, 145, 190, 21, 71, 134, 189, 159, 20, 40, 62, 6, 184, 57, 62, 36, 89, 56, 190, 73, 161, 196, 190, 68, 8, 247, 61, 60, 5, 104, 189, 81, 12, 252, 60, 123, 178, 24, 61, 69, 237, 48, 62, 208, 216, 115, 190, 111, 65, 202, 61, 203, 68, 21, 62, 161, 103, 30, 189, 24, 115, 9, 62, 55, 191, 162, 61, 121, 227, 78, 189, 116, 135, 96, 190, 153, 81, 49, 60, 2, 18, 213, 61, 44, 74, 167, 61, 104, 86, 64, 190, 9, 21, 184, 61, 11, 111, 64, 189, 81, 208, 222, 187, 140, 201, 134, 190, 224, 10, 2, 62, 23, 221, 126, 60, 74, 32, 138, 61, 107, 171, 182, 62, 71, 142, 50, 190, 208, 171, 13, 62, 145, 108, 114, 61, 155, 105, 52, 191, 241, 229, 133, 190, 9, 252, 148, 189, 77, 137, 62, 190, 127, 188, 125, 190, 89, 146, 19, 190, 99, 116, 17, 62, 185, 228, 138, 62, 243, 39, 192, 190, 173, 231, 226, 61, 39, 134, 124, 189, 242, 122, 31, 61, 113, 114, 244, 60, 111, 244, 50, 61, 171, 196, 15, 191, 97, 90, 231, 187, 229, 45, 11, 62, 88, 225, 10, 62, 208, 190, 56, 62, 208, 1, 37, 190, 242, 157, 146, 189, 211, 97, 129, 62, 56, 50, 241, 188, 225, 7, 83, 61, 241, 229, 66, 62, 33, 28, 17, 62, 131, 47, 107, 189, 94, 163, 70, 188, 173, 52, 15, 190, 79, 68, 182, 61, 227, 230, 106, 190, 53, 2, 61, 189, 149, 156, 225, 60, 134, 199, 132, 62, 197, 14, 173, 189, 251, 11, 204, 189, 71, 199, 122, 60, 147, 12, 39, 62, 241, 38, 33, 190, 84, 71, 113, 190, 7, 77, 77, 62, 218, 115, 203, 59, 173, 165, 157, 188, 232, 39, 160, 61, 169, 219, 123, 190, 45, 202, 17, 62, 135, 30, 53, 188, 35, 231, 211, 59, 46, 58, 99, 61, 239, 16, 133, 62, 64, 32, 196, 61, 33, 23, 56, 62, 136, 99, 187, 57, 75, 181, 235, 61, 214, 181, 65, 61, 154, 4, 128, 190, 8, 165, 84, 189, 183, 154, 27, 190, 3, 89, 139, 62, 216, 39, 213, 62, 9, 183, 112, 61, 197, 216, 173, 61, 50, 20, 140, 62, 149, 180, 72, 62, 212, 137, 49, 191, 27, 152, 144, 189, 236, 10, 31, 189, 210, 11, 2, 62, 248, 195, 147, 191, 48, 231, 152, 190, 6, 166, 35, 189, 146, 160, 56, 61, 80, 173, 237, 190, 221, 78, 229, 61, 24, 176, 130, 190, 204, 160, 156, 59, 106, 62, 231, 62, 15, 136, 97, 190, 80, 230, 62, 190, 237, 96, 168, 190, 197, 47, 32, 62, 73, 145, 79, 189, 67, 111, 76, 61, 236, 117, 130, 62, 157, 37, 250, 61, 44, 219, 18, 63, 233, 1, 39, 187, 66, 3, 139, 62, 161, 181, 199, 61, 6, 64, 54, 61, 203, 85, 158, 191, 26, 163, 91, 190, 126, 174, 175, 190, 144, 25, 109, 61, 215, 157, 109, 189, 113, 195, 160, 61, 135, 39, 121, 61, 70, 89, 3, 190, 29, 118, 220, 61, 48, 81, 17, 62, 198, 0, 5, 190, 162, 102, 4, 189, 160, 42, 205, 189, 158, 251, 16, 62, 38, 129, 18, 190, 160, 213, 70, 190, 92, 141, 34, 190, 224, 233, 83, 189, 62, 163, 70, 190, 232, 199, 120, 189, 210, 140, 201, 61, 71, 26, 218, 61, 129, 8, 97, 190, 223, 76, 140, 189, 168, 3, 30, 189, 214, 240, 26, 62, 64, 198, 47, 190, 69, 140, 229, 189, 7, 25, 240, 188, 36, 4, 97, 190, 174, 52, 25, 62, 236, 87, 23, 189, 45, 85, 19, 62, 237, 8, 40, 190, 132, 78, 247, 189, 135, 28, 44, 190, 139, 135, 172, 188, 249, 233, 29, 61, 190, 101, 225, 190, 184, 226, 25, 190, 63, 164, 29, 62, 54, 138, 81, 61, 163, 143, 25, 62, 131, 191, 88, 62, 85, 176, 162, 189, 76, 48, 216, 61, 53, 149, 2, 188, 255, 65, 180, 190, 30, 154, 45, 61, 170, 179, 149, 189, 29, 17, 184, 188, 182, 57, 56, 62, 4, 210, 63, 191, 98, 214, 104, 62, 86, 61, 114, 59, 240, 88, 162, 189, 99, 141, 65, 62, 60, 176, 70, 190, 170, 7, 206, 190, 77, 2, 144, 61, 17, 133, 27, 62, 215, 249, 170, 61, 76, 241, 37, 189, 63, 88, 14, 61, 114, 42, 15, 62, 133, 4, 159, 61, 102, 22, 252, 61, 101, 178, 157, 190, 115, 4, 170, 190, 115, 40, 161, 59, 139, 212, 5, 62, 74, 21, 9, 61, 57, 88, 135, 62, 220, 98, 84, 62, 122, 147, 255, 61, 184, 150, 144, 62, 64, 158, 227, 190, 252, 133, 52, 189, 90, 3, 129, 62, 160, 76, 23, 190, 231, 36, 205, 190, 20, 57, 76, 61, 34, 98, 156, 190, 99, 54, 95, 62, 214, 54, 119, 62, 35, 152, 127, 61, 223, 92, 38, 60, 155, 219, 117, 62, 66, 108, 143, 60, 162, 80, 80, 189, 5, 30, 38, 190, 199, 23, 25, 190, 63, 54, 91, 59, 56, 122, 65, 190, 70, 237, 64, 190, 199, 28, 160, 190, 246, 110, 54, 62, 56, 113, 25, 62, 227, 8, 169, 62, 224, 218, 84, 61, 113, 250, 162, 189, 39, 171, 56, 62, 168, 106, 163, 62, 219, 197, 198, 61, 149, 108, 175, 189, 120, 61, 44, 190, 103, 109, 56, 61, 128, 18, 129, 61, 171, 61, 153, 190, 55, 40, 89, 191, 247, 221, 205, 189, 61, 135, 201, 60, 242, 10, 226, 189, 73, 2, 147, 62, 134, 234, 101, 190, 85, 130, 157, 62, 28, 71, 98, 62, 71, 11, 244, 61, 207, 37, 148, 191, 226, 108, 141, 61, 94, 142, 31, 191, 97, 131, 169, 189, 21, 94, 137, 189, 215, 155, 66, 190, 140, 168, 223, 190, 151, 178, 97, 191, 12, 10, 27, 61, 145, 159, 104, 190, 44, 45, 29, 62, 22, 51, 96, 57, 111, 46, 190, 61, 32, 141, 41, 189, 234, 122, 96, 62, 159, 229, 182, 190, 61, 215, 210, 189, 170, 177, 27, 189, 241, 38, 32, 62, 213, 39, 45, 62, 193, 85, 26, 190, 225, 232, 52, 62, 147, 152, 182, 61, 39, 194, 187, 189, 142, 33, 30, 189, 33, 119, 151, 190, 47, 188, 165, 59, 11, 40, 247, 189, 15, 222, 55, 190, 197, 182, 76, 62, 137, 90, 152, 190, 200, 37, 49, 190, 43, 16, 112, 190, 76, 121, 24, 189, 103, 158, 138, 189, 196, 108, 11, 60, 159, 179, 241, 190, 254, 171, 85, 62, 230, 95, 67, 62, 244, 56, 217, 190, 9, 115, 157, 62, 84, 113, 26, 190, 191, 51, 209, 189, 69, 233, 136, 60, 83, 83, 48, 62, 70, 165, 164, 190, 68, 207, 41, 62, 138, 67, 29, 191, 62, 7, 60, 191, 44, 105, 24, 190, 128, 49, 16, 62, 37, 177, 83, 62, 192, 12, 128, 188, 249, 3, 88, 62, 216, 200, 232, 189, 220, 176, 61, 189, 191, 49, 246, 189, 174, 184, 5, 191, 144, 219, 138, 189, 187, 133, 60, 61, 10, 193, 54, 191, 74, 234, 195, 61, 7, 205, 67, 191, 13, 25, 195, 188, 30, 110, 204, 188, 81, 111, 131, 61, 67, 241, 139, 61, 74, 223, 162, 189, 157, 49, 5, 190, 207, 191, 59, 62, 83, 216, 146, 62, 196, 53, 22, 62, 42, 104, 53, 189, 150, 223, 55, 189, 17, 84, 164, 188, 43, 239, 130, 62, 154, 82, 174, 62, 15, 56, 198, 189, 253, 176, 218, 59, 71, 88, 57, 190, 51, 178, 251, 61, 223, 17, 54, 188, 74, 63, 49, 61, 177, 7, 44, 190, 79, 22, 194, 189, 190, 63, 44, 189, 63, 151, 128, 189, 67, 39, 93, 189, 236, 58, 164, 189, 3, 155, 71, 189, 21, 106, 73, 190, 167, 45, 29, 190, 182, 126, 159, 189, 197, 21, 15, 62, 28, 18, 27, 62, 225, 98, 49, 190, 203, 27, 202, 189, 189, 142, 198, 61, 143, 201, 237, 189, 149, 183, 202, 61, 107, 182, 170, 189, 255, 189, 162, 60, 184, 111, 136, 60, 195, 157, 220, 189, 132, 16, 227, 58, 76, 91, 39, 190, 58, 52, 45, 190, 158, 30, 243, 188, 56, 38, 66, 190, 108, 179, 37, 60, 79, 5, 164, 189, 225, 135, 135, 189, 221, 149, 39, 190, 231, 45, 13, 62, 100, 161, 47, 190, 104, 138, 41, 62, 122, 74, 158, 188, 195, 37, 32, 62, 154, 28, 22, 190, 246, 88, 224, 61, 48, 104, 59, 61, 29, 18, 190, 59, 137, 116, 24, 190, 150, 31, 39, 190, 237, 100, 21, 190, 168, 51, 249, 189, 91, 139, 29, 62, 87, 54, 137, 61, 16, 23, 185, 188, 172, 239, 113, 189, 42, 77, 200, 189, 239, 223, 210, 189, 130, 18, 151, 186, 154, 76, 134, 189, 96, 40, 223, 189, 42, 99, 207, 189, 139, 167, 226, 189, 90, 110, 173, 187, 0, 152, 16, 62, 181, 56, 50, 190, 49, 72, 34, 190, 84, 230, 17, 190, 3, 249, 78, 190, 148, 147, 194, 61, 179, 126, 50, 62, 181, 76, 146, 188, 183, 225, 122, 60, 31, 255, 83, 61, 238, 84, 169, 62, 154, 140, 115, 61, 84, 179, 55, 190, 179, 142, 159, 190, 19, 129, 73, 61, 128, 204, 7, 190, 7, 13, 111, 188, 218, 14, 158, 61, 220, 34, 30, 190, 182, 252, 133, 62, 166, 22, 34, 61, 155, 222, 96, 60, 167, 150, 250, 188, 117, 184, 234, 61, 196, 11, 93, 188, 212, 203, 73, 62, 46, 194, 119, 190, 69, 88, 182, 62, 117, 1, 204, 61, 86, 222, 99, 189, 193, 111, 119, 190, 216, 9, 186, 189, 226, 220, 195, 61, 252, 144, 68, 62, 115, 16, 101, 62, 121, 100, 132, 61, 124, 149, 46, 61, 104, 172, 153, 190, 125, 41, 14, 191, 5, 44, 45, 190, 160, 18, 185, 189, 101, 166, 80, 62, 104, 54, 169, 61, 6, 163, 63, 62, 248, 1, 170, 61, 2, 37, 10, 190, 24, 214, 150, 190, 149, 171, 159, 190, 119, 153, 12, 62, 159, 153, 160, 61, 71, 41, 161, 190, 69, 245, 24, 62, 126, 175, 31, 191, 153, 178, 46, 61, 178, 6, 123, 62, 98, 231, 196, 189, 243, 121, 134, 62, 112, 107, 49, 190, 68, 2, 31, 189, 193, 173, 51, 62, 15, 167, 173, 62, 45, 189, 153, 61, 211, 246, 101, 62, 100, 44, 211, 189, 28, 226, 23, 190, 161, 144, 4, 60, 125, 158, 60, 189, 65, 181, 172, 61, 85, 122, 150, 60, 112, 103, 47, 189, 241, 73, 217, 62, 225, 250, 208, 61, 195, 215, 92, 61, 142, 215, 89, 61, 13, 241, 113, 62, 53, 28, 141, 62, 152, 133, 139, 60, 111, 146, 131, 191, 3, 49, 22, 188, 6, 249, 220, 61, 212, 29, 141, 190, 137, 176, 131, 62, 181, 3, 146, 61, 36, 47, 63, 62, 21, 117, 35, 63, 105, 121, 24, 190, 217, 109, 195, 190, 77, 52, 0, 62, 239, 149, 82, 191, 187, 67, 142, 61, 64, 249, 190, 60, 235, 107, 241, 189, 253, 93, 184, 189, 14, 16, 130, 190, 254, 167, 165, 189, 44, 23, 121, 190, 170, 217, 118, 62, 154, 62, 132, 62, 224, 215, 84, 60, 91, 33, 218, 190, 77, 136, 236, 190, 132, 9, 198, 189, 165, 132, 210, 62, 127, 6, 144, 62, 168, 228, 45, 62, 229, 235, 11, 62, 210, 20, 140, 62, 43, 94, 153, 61, 143, 77, 28, 190, 41, 81, 104, 190, 184, 114, 9, 62, 111, 40, 222, 189, 174, 136, 127, 190, 79, 119, 91, 62, 196, 62, 143, 190, 252, 101, 244, 61, 139, 68, 225, 61, 198, 16, 196, 60, 255, 158, 135, 189, 141, 88, 38, 62, 172, 65, 108, 60, 122, 44, 54, 188, 5, 206, 144, 189, 220, 164, 112, 62, 181, 159, 171, 60, 20, 129, 141, 190, 160, 231, 104, 190, 41, 228, 133, 190, 171, 247, 229, 61, 164, 196, 44, 189, 143, 211, 241, 62, 12, 150, 69, 62, 239, 126, 217, 61, 221, 63, 129, 62, 143, 26, 251, 190, 96, 196, 209, 190, 199, 108, 160, 189, 243, 137, 160, 61, 24, 170, 134, 189, 214, 155, 89, 190, 161, 172, 184, 189, 60, 65, 57, 62, 154, 96, 154, 190, 101, 126, 107, 188, 16, 97, 63, 189, 181, 112, 87, 62, 20, 65, 30, 62, 217, 24, 117, 189, 109, 252, 210, 190, 141, 94, 133, 188, 238, 124, 123, 62, 225, 88, 68, 61, 36, 185, 111, 61, 178, 7, 202, 61, 70, 113, 175, 62, 255, 110, 167, 62, 251, 107, 0, 59, 46, 159, 77, 62, 155, 221, 244, 61, 174, 119, 192, 188, 2, 4, 128, 61, 105, 152, 155, 188, 39, 247, 236, 190, 203, 188, 44, 190, 54, 176, 87, 190, 194, 52, 73, 62, 33, 127, 46, 62, 40, 86, 244, 187, 97, 74, 192, 188, 74, 62, 177, 190, 12, 18, 150, 61, 184, 246, 16, 190, 42, 39, 50, 190, 230, 147, 20, 190, 207, 106, 103, 62, 30, 193, 107, 62, 208, 142, 146, 190, 65, 77, 235, 60, 31, 9, 57, 62, 223, 30, 51, 62, 163, 57, 29, 62, 0, 16, 30, 190, 73, 22, 138, 190, 104, 85, 147, 62, 209, 39, 206, 189, 139, 16, 62, 62, 157, 70, 61, 191, 132, 124, 118, 189, 249, 169, 119, 190, 230, 51, 20, 190, 17, 28, 109, 190, 195, 90, 43, 189, 146, 48, 89, 62, 21, 142, 176, 60, 76, 122, 2, 62, 162, 119, 168, 189, 151, 33, 214, 188, 239, 143, 102, 189, 179, 134, 16, 190, 76, 161, 120, 190, 212, 114, 15, 62, 91, 221, 104, 61, 35, 206, 37, 190, 44, 106, 236, 61, 173, 3, 157, 189, 232, 32, 189, 188, 127, 120, 35, 190, 180, 222, 252, 188, 56, 95, 1, 190, 182, 199, 39, 190, 25, 132, 183, 190, 9, 241, 19, 187, 124, 144, 56, 190, 225, 244, 232, 188, 123, 85, 110, 62, 14, 197, 154, 61, 189, 26, 111, 62, 109, 188, 146, 189, 228, 191, 90, 62, 33, 48, 191, 62, 165, 229, 90, 62, 146, 155, 66, 60, 8, 132, 223, 60, 191, 243, 130, 189, 27, 171, 238, 188, 168, 61, 97, 62, 44, 97, 60, 61, 194, 184, 251, 189, 206, 117, 92, 189, 183, 12, 158, 190, 152, 241, 114, 62, 164, 31, 23, 190, 32, 179, 135, 62, 130, 139, 208, 62, 237, 205, 212, 60, 26, 54, 167, 62, 152, 35, 36, 191, 248, 21, 147, 61, 155, 78, 205, 190, 112, 176, 131, 61, 242, 241, 107, 190, 4, 202, 30, 190, 109, 181, 44, 190, 240, 140, 41, 189, 177, 100, 150, 189, 160, 199, 190, 189, 113, 247, 162, 62, 215, 38, 190, 187, 145, 101, 212, 188, 68, 61, 86, 62, 21, 157, 90, 189, 255, 96, 137, 190, 153, 205, 152, 59, 134, 0, 96, 62, 155, 135, 163, 189, 30, 54, 47, 191, 153, 63, 5, 190, 44, 191, 205, 190, 106, 78, 124, 190, 131, 126, 251, 60, 3, 212, 12, 62, 199, 117, 81, 61, 52, 199, 171, 189, 244, 195, 32, 62, 96, 233, 172, 189, 216, 162, 138, 61, 67, 236, 223, 61, 122, 225, 12, 190, 163, 181, 72, 189, 217, 212, 50, 190, 165, 115, 2, 62, 83, 33, 75, 190, 87, 222, 9, 190, 219, 251, 82, 190, 112, 91, 168, 189, 131, 177, 64, 190, 231, 47, 231, 61, 155, 100, 29, 62, 100, 247, 251, 59, 19, 201, 92, 61, 108, 14, 58, 189, 142, 221, 201, 188, 49, 138, 226, 61, 12, 163, 18, 62, 243, 238, 129, 190, 248, 52, 153, 189, 94, 238, 72, 61, 194, 34, 139, 189, 177, 119, 29, 62, 122, 126, 172, 187, 165, 212, 41, 190, 170, 115, 75, 190, 159, 12, 110, 190, 10, 142, 239, 187, 64, 222, 28, 62, 115, 176, 248, 61, 242, 126, 237, 61, 128, 62, 34, 62, 159, 185, 52, 62, 114, 194, 142, 61, 93, 131, 1, 190, 3, 208, 57, 59, 243, 40, 59, 189, 73, 110, 15, 188, 84, 223, 81, 190, 11, 198, 98, 62, 94, 124, 182, 190, 27, 248, 31, 62, 92, 155, 16, 62, 120, 109, 5, 62, 227, 41, 133, 62, 190, 38, 91, 62, 210, 146, 214, 61, 245, 178, 124, 60, 139, 150, 223, 61, 15, 219, 112, 190, 69, 31, 41, 62, 149, 133, 14, 190, 67, 201, 152, 190, 249, 164, 153, 190, 215, 75, 85, 61, 124, 98, 20, 62, 135, 225, 1, 188, 136, 108, 186, 62, 80, 255, 24, 62, 100, 168, 96, 190, 175, 205, 81, 190, 42, 209, 156, 60, 50, 99, 235, 60, 190, 197, 9, 191, 30, 74, 107, 189, 90, 64, 2, 62, 52, 223, 173, 189, 222, 211, 14, 189, 177, 118, 195, 190, 113, 237, 139, 190, 31, 185, 129, 62, 223, 36, 99, 190, 190, 178, 33, 190, 145, 36, 17, 190, 98, 66, 3, 61, 39, 25, 35, 61, 250, 189, 161, 189, 22, 43, 212, 190, 0, 17, 38, 190, 150, 49, 185, 190, 124, 198, 224, 189, 9, 85, 15, 62, 153, 149, 59, 62, 191, 97, 159, 189, 19, 61, 131, 62, 139, 141, 169, 61, 13, 201, 166, 190, 116, 35, 11, 62, 129, 1, 202, 189, 85, 0, 208, 188, 61, 233, 224, 61, 18, 196, 252, 61, 44, 25, 115, 190, 244, 183, 76, 61, 232, 238, 128, 61, 215, 53, 22, 62, 154, 189, 144, 61, 252, 158, 24, 60, 151, 139, 164, 189, 69, 179, 178, 189, 184, 104, 13, 189, 149, 114, 90, 61, 87, 74, 8, 190, 182, 94, 40, 190, 2, 149, 240, 61, 229, 186, 129, 187, 200, 134, 128, 188, 56, 219, 49, 190, 126, 151, 186, 61, 29, 87, 122, 62, 65, 146, 237, 61, 77, 252, 237, 60, 196, 99, 170, 189, 114, 88, 60, 62, 77, 72, 82, 62, 72, 62, 12, 61, 159, 138, 142, 61, 31, 41, 134, 189, 96, 219, 67, 189, 37, 96, 57, 188, 115, 182, 103, 189, 239, 211, 161, 190, 217, 213, 141, 189, 172, 76, 255, 61, 88, 109, 64, 190, 127, 29, 35, 189, 4, 94, 63, 190, 134, 73, 237, 189, 243, 240, 167, 61, 170, 76, 18, 61, 134, 227, 11, 190, 151, 191, 121, 61, 240, 73, 119, 61, 67, 221, 203, 188, 222, 20, 211, 189, 140, 188, 77, 189, 138, 190, 242, 60, 146, 62, 169, 61, 151, 55, 63, 190, 255, 37, 243, 61, 75, 164, 166, 189, 141, 214, 194, 61, 53, 46, 38, 62, 70, 86, 238, 188, 75, 218, 191, 61, 109, 84, 19, 61, 68, 31, 189, 61, 94, 140, 16, 190, 66, 139, 200, 61, 214, 157, 105, 60, 179, 101, 105, 190, 99, 157, 33, 62, 189, 39, 68, 61, 53, 70, 83, 62, 50, 111, 180, 62, 177, 31, 39, 62, 171, 117, 166, 190, 229, 229, 172, 190, 156, 86, 153, 190, 166, 226, 132, 189, 67, 89, 187, 190, 235, 202, 17, 190, 32, 117, 118, 61, 245, 220, 193, 62, 207, 220, 218, 190, 211, 110, 144, 62, 60, 136, 216, 61, 245, 38, 104, 61, 193, 79, 8, 62, 142, 229, 237, 189, 63, 7, 219, 190, 48, 116, 224, 190, 56, 113, 254, 187, 70, 28, 222, 189, 3, 116, 164, 61, 46, 86, 145, 59, 117, 81, 135, 62, 171, 148, 166, 62, 230, 22, 217, 61, 32, 192, 182, 62, 136, 132, 203, 62, 24, 108, 145, 62, 96, 32, 8, 191, 84, 190, 162, 60, 99, 137, 251, 190, 228, 199, 151, 188, 62, 151, 177, 61, 170, 106, 0, 190, 75, 6, 222, 62, 151, 210, 9, 63, 183, 64, 212, 61, 38, 131, 97, 62, 246, 184, 112, 61, 201, 35, 83, 62, 63, 55, 212, 61, 148, 228, 110, 190, 143, 134, 6, 63, 74, 248, 123, 190, 34, 13, 58, 190, 66, 90, 88, 62, 151, 25, 45, 61, 69, 136, 99, 62, 96, 79, 142, 62, 183, 232, 170, 62, 142, 56, 210, 189, 185, 231, 231, 189, 142, 138, 14, 61, 117, 35, 133, 190, 134, 75, 230, 190, 176, 134, 16, 189, 72, 242, 25, 190, 229, 244, 88, 190, 137, 170, 52, 62, 161, 206, 223, 189, 211, 195, 130, 60, 187, 219, 5, 62, 138, 121, 224, 61, 208, 61, 93, 190, 160, 43, 181, 190, 225, 191, 137, 62, 191, 76, 239, 62, 130, 103, 158, 61, 27, 100, 134, 62, 195, 126, 82, 61, 219, 44, 4, 188, 111, 152, 77, 62, 100, 104, 137, 190, 34, 201, 54, 191, 170, 10, 140, 62, 218, 255, 99, 189, 127, 173, 155, 190, 146, 122, 72, 62, 156, 124, 70, 190, 133, 236, 22, 62, 55, 52, 54, 62, 29, 147, 202, 189, 97, 86, 15, 190, 30, 70, 217, 61, 120, 229, 56, 190, 175, 236, 54, 62, 211, 149, 163, 190, 104, 172, 161, 62, 189, 55, 38, 190, 133, 226, 240, 190, 162, 124, 32, 190, 190, 40, 163, 190, 222, 130, 135, 62, 163, 30, 47, 62, 203, 89, 224, 62, 25, 177, 194, 189, 254, 160, 50, 61, 71, 20, 180, 189, 63, 33, 208, 60, 92, 132, 175, 189, 103, 9, 192, 188, 197, 146, 15, 62, 86, 101, 206, 61, 132, 237, 3, 187, 212, 86, 29, 190, 201, 229, 1, 62, 76, 189, 191, 61, 231, 208, 23, 190, 26, 1, 47, 62, 32, 62, 43, 190, 92, 61, 121, 61, 109, 177, 22, 190, 33, 43, 31, 190, 83, 130, 35, 189, 111, 33, 236, 61, 126, 42, 142, 61, 30, 199, 46, 190, 52, 131, 172, 61, 41, 188, 153, 189, 33, 18, 30, 190, 28, 235, 129, 189, 189, 118, 237, 189, 72, 197, 119, 189, 176, 6, 185, 187, 46, 217, 125, 61, 75, 163, 17, 62, 196, 74, 246, 187, 107, 180, 70, 62, 167, 202, 155, 62, 60, 182, 75, 188, 7, 143, 78, 190, 176, 240, 22, 188, 126, 60, 164, 60, 74, 71, 208, 190, 198, 36, 146, 190, 33, 157, 79, 190, 71, 132, 190, 190, 43, 123, 34, 62, 63, 81, 49, 190, 196, 1, 76, 62, 117, 65, 26, 190, 132, 130, 141, 62, 12, 159, 133, 62, 208, 0, 51, 61, 32, 231, 141, 60, 69, 195, 84, 61, 30, 93, 47, 62, 179, 195, 149, 62, 155, 47, 132, 189, 67, 60, 160, 189, 165, 128, 229, 189, 216, 120, 211, 62, 242, 194, 31, 62, 215, 86, 252, 60, 231, 108, 78, 62, 179, 77, 204, 188, 22, 101, 1, 191, 59, 119, 179, 62, 120, 10, 55, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {199, 116, 66, 61, 7, 172, 195, 60, 247, 108, 112, 60, 10, 109, 253, 61, 224, 28, 156, 62, 165, 222, 249, 61, 73, 54, 31, 186, 127, 100, 228, 61, 89, 23, 161, 61, 3, 213, 163, 60, 23, 116, 29, 190, 143, 120, 146, 62, 164, 164, 170, 60, 255, 66, 211, 60, 239, 80, 158, 62, 46, 17, 244, 61, 102, 48, 77, 61, 40, 87, 237, 61, 224, 85, 152, 62, 99, 126, 44, 61, 121, 38, 221, 61, 197, 167, 54, 62, 75, 14, 48, 189, 1, 170, 116, 62, 209, 64, 31, 190, 88, 80, 110, 62, 176, 146, 69, 62, 109, 174, 2, 61, 50, 19, 232, 189, 224, 92, 71, 62, 84, 6, 45, 190, 19, 66, 135, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {198, 119, 48, 190, 88, 202, 241, 190, 196, 161, 79, 62, 55, 216, 176, 190, 171, 209, 149, 62, 247, 51, 135, 191, 37, 197, 76, 62, 156, 104, 158, 190, 207, 126, 227, 62, 29, 127, 7, 63, 247, 96, 167, 190, 80, 107, 205, 190, 146, 7, 159, 61, 113, 126, 107, 188, 62, 198, 148, 62, 41, 112, 187, 190, 229, 189, 33, 63, 76, 207, 219, 62, 177, 103, 145, 190, 157, 180, 65, 191, 152, 179, 228, 61, 110, 99, 0, 63, 199, 31, 30, 190, 131, 177, 126, 62, 188, 109, 166, 62, 10, 181, 72, 61, 10, 134, 34, 188, 158, 46, 253, 190, 217, 38, 191, 190, 105, 191, 58, 63, 191, 19, 52, 190, 202, 165, 186, 190, 155, 1, 12, 189, 114, 214, 19, 62, 229, 78, 11, 62, 235, 172, 230, 189, 141, 101, 140, 190, 253, 137, 2, 189, 125, 27, 172, 189, 2, 135, 148, 60, 174, 121, 129, 188, 127, 18, 206, 189, 146, 140, 96, 187, 26, 236, 181, 190, 26, 105, 42, 189, 228, 70, 130, 189, 227, 238, 10, 190, 123, 91, 166, 189, 244, 61, 43, 62, 229, 115, 107, 62, 122, 100, 78, 61, 210, 235, 111, 62, 76, 221, 137, 190, 33, 127, 186, 61, 214, 219, 152, 61, 53, 219, 231, 188, 227, 148, 240, 62, 99, 112, 140, 189, 253, 203, 52, 190, 241, 179, 213, 61, 172, 19, 171, 189, 98, 0, 104, 190, 221, 180, 183, 61, 185, 160, 230, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 217, 65, 61, 48, 64, 159, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {183, 217, 88, 63, 64, 1, 120, 190, 27, 26, 7, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {63, 101, 201, 63, 98, 11, 143, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0075/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}