// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {237, 71, 29, 191, 162, 74, 110, 191, 28, 174, 10, 191, 159, 25, 124, 62, 105, 165, 136, 61, 40, 64, 4, 191, 2, 219, 169, 62, 220, 55, 37, 63, 224, 81, 1, 191, 23, 204, 169, 190, 59, 181, 19, 63, 202, 138, 172, 189, 123, 8, 17, 189, 165, 209, 45, 63, 65, 78, 21, 191, 91, 31, 137, 62, 214, 71, 117, 63, 169, 89, 178, 62, 194, 119, 126, 190, 101, 51, 203, 61, 188, 144, 27, 191, 175, 216, 32, 63, 187, 9, 42, 191, 19, 89, 91, 62, 214, 124, 166, 190, 248, 144, 34, 63, 178, 123, 226, 190, 54, 244, 24, 62, 196, 231, 28, 63, 186, 33, 145, 190, 162, 26, 183, 190, 27, 232, 17, 191, 29, 110, 10, 190, 208, 83, 168, 190, 205, 122, 106, 191, 220, 111, 115, 190, 249, 80, 38, 63, 171, 26, 117, 63, 198, 136, 141, 62, 176, 177, 7, 63, 159, 206, 153, 191, 128, 41, 142, 190, 245, 53, 66, 63, 190, 174, 145, 190, 168, 148, 146, 62, 177, 13, 210, 62, 234, 142, 99, 191, 182, 59, 189, 62, 177, 130, 110, 62, 186, 165, 190, 190, 91, 170, 8, 63, 30, 131, 170, 190, 207, 238, 198, 63, 75, 222, 226, 62, 113, 251, 35, 191, 163, 25, 135, 61, 54, 53, 45, 61, 132, 122, 236, 62, 89, 20, 11, 63, 77, 178, 207, 62, 113, 239, 40, 63, 210, 149, 1, 191, 109, 166, 243, 189, 247, 98, 63, 62, 155, 84, 51, 63, 67, 3, 124, 189, 244, 3, 167, 188, 209, 228, 92, 191, 53, 216, 194, 189, 238, 173, 68, 63, 72, 109, 94, 191, 13, 244, 9, 190, 168, 44, 43, 191, 38, 209, 91, 62, 35, 225, 230, 62, 67, 238, 154, 62, 129, 241, 75, 63, 215, 13, 51, 62, 7, 220, 165, 62, 178, 80, 30, 63, 86, 68, 4, 191, 242, 152, 95, 190, 3, 26, 136, 191, 179, 251, 172, 190, 233, 218, 254, 62, 176, 9, 90, 191, 199, 151, 239, 190, 82, 245, 63, 62, 52, 122, 198, 191, 98, 22, 176, 190, 124, 251, 141, 62, 80, 78, 171, 63, 224, 176, 218, 62, 211, 65, 15, 191, 66, 61, 35, 191, 17, 58, 53, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 216, 250, 190, 166, 21, 34, 62, 249, 32, 157, 187, 129, 145, 155, 62, 16, 51, 27, 59, 21, 23, 169, 62, 109, 208, 234, 190, 82, 113, 81, 62, 29, 135, 182, 187, 79, 13, 50, 61, 191, 150, 172, 62, 222, 255, 111, 190, 12, 177, 90, 190, 111, 33, 38, 190, 12, 243, 4, 191, 59, 142, 22, 191, 207, 88, 137, 190, 115, 3, 125, 190, 110, 15, 210, 62, 31, 125, 1, 191, 0, 25, 83, 61, 9, 147, 6, 63, 125, 105, 9, 63, 174, 27, 147, 62, 121, 211, 14, 62, 47, 120, 234, 61, 190, 20, 39, 62, 128, 47, 1, 190, 222, 4, 5, 191, 2, 82, 224, 62, 157, 39, 187, 62, 86, 190, 34, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {8, 157, 137, 62, 192, 28, 139, 188, 237, 116, 17, 188, 154, 192, 22, 62, 175, 144, 201, 188, 2, 97, 69, 62, 13, 147, 190, 189, 34, 19, 44, 61, 241, 12, 41, 188, 182, 160, 255, 61, 74, 119, 168, 190, 240, 120, 21, 61, 230, 9, 41, 62, 59, 171, 244, 190, 57, 254, 243, 60, 171, 88, 30, 188, 186, 60, 237, 59, 209, 25, 90, 189, 30, 80, 162, 188, 54, 220, 197, 61, 219, 209, 245, 189, 129, 181, 249, 61, 107, 46, 239, 61, 219, 238, 8, 62, 248, 195, 247, 189, 113, 198, 162, 62, 248, 1, 42, 62, 36, 6, 26, 62, 91, 101, 196, 190, 142, 41, 66, 190, 173, 194, 57, 62, 80, 19, 116, 189, 85, 219, 32, 60, 219, 222, 25, 190, 118, 84, 209, 61, 120, 106, 85, 62, 11, 250, 13, 189, 94, 51, 145, 189, 65, 52, 19, 61, 227, 182, 116, 61, 108, 16, 74, 190, 18, 205, 211, 61, 68, 137, 228, 61, 188, 12, 158, 189, 40, 240, 65, 62, 148, 192, 170, 190, 99, 2, 191, 62, 74, 69, 123, 189, 133, 81, 203, 190, 191, 177, 72, 191, 158, 246, 246, 61, 232, 215, 217, 190, 234, 2, 147, 190, 40, 29, 147, 62, 180, 116, 174, 189, 210, 85, 72, 189, 12, 203, 205, 190, 169, 199, 23, 62, 217, 59, 29, 62, 44, 65, 160, 61, 60, 16, 135, 190, 112, 140, 160, 61, 102, 195, 21, 188, 164, 85, 217, 189, 142, 100, 88, 61, 243, 71, 44, 190, 78, 102, 184, 57, 121, 109, 134, 62, 185, 194, 50, 62, 82, 39, 166, 189, 209, 151, 104, 61, 223, 223, 83, 189, 47, 96, 227, 189, 96, 193, 128, 62, 147, 115, 102, 61, 249, 221, 64, 62, 236, 106, 221, 62, 150, 96, 26, 191, 171, 35, 48, 62, 180, 244, 193, 60, 102, 165, 155, 190, 161, 71, 61, 190, 77, 105, 18, 61, 132, 195, 164, 62, 125, 28, 175, 190, 244, 136, 206, 62, 224, 213, 101, 183, 78, 108, 107, 188, 236, 50, 62, 190, 242, 104, 215, 62, 40, 157, 231, 60, 31, 230, 128, 189, 61, 23, 5, 191, 23, 152, 150, 190, 188, 244, 34, 190, 251, 230, 218, 188, 52, 201, 243, 189, 42, 14, 203, 188, 105, 184, 170, 61, 104, 31, 225, 61, 2, 137, 49, 62, 152, 119, 102, 190, 21, 153, 133, 62, 210, 117, 178, 60, 250, 81, 102, 61, 190, 205, 120, 62, 17, 64, 39, 62, 201, 26, 68, 62, 77, 171, 246, 61, 248, 160, 177, 61, 44, 85, 31, 62, 107, 196, 36, 59, 243, 107, 8, 191, 80, 183, 53, 190, 177, 175, 147, 62, 56, 231, 14, 63, 74, 207, 98, 62, 88, 187, 242, 61, 120, 89, 200, 189, 9, 59, 83, 61, 91, 186, 129, 190, 19, 123, 136, 62, 202, 103, 102, 62, 208, 246, 47, 62, 215, 36, 0, 190, 22, 63, 128, 189, 176, 229, 144, 189, 224, 22, 14, 62, 35, 48, 223, 61, 232, 93, 44, 62, 129, 131, 3, 188, 89, 17, 71, 61, 191, 182, 88, 188, 83, 137, 14, 62, 34, 151, 204, 61, 251, 69, 100, 62, 39, 42, 79, 190, 149, 186, 57, 61, 231, 52, 209, 189, 60, 254, 173, 189, 171, 124, 210, 188, 48, 166, 57, 190, 32, 0, 158, 61, 246, 38, 92, 190, 140, 94, 243, 189, 137, 116, 21, 190, 43, 166, 255, 59, 28, 78, 130, 190, 164, 142, 223, 61, 137, 16, 214, 62, 134, 82, 60, 62, 14, 195, 70, 62, 19, 120, 37, 189, 59, 222, 19, 61, 211, 131, 47, 187, 234, 152, 115, 58, 31, 197, 98, 190, 246, 77, 235, 61, 131, 9, 123, 62, 93, 53, 13, 189, 135, 70, 171, 189, 129, 136, 12, 190, 179, 223, 192, 61, 96, 219, 168, 60, 129, 196, 125, 187, 220, 92, 136, 60, 3, 169, 237, 59, 250, 190, 188, 189, 29, 82, 169, 61, 151, 206, 55, 60, 100, 60, 139, 61, 100, 35, 242, 60, 226, 123, 12, 190, 14, 76, 15, 62, 105, 25, 141, 61, 234, 135, 75, 61, 94, 50, 23, 61, 182, 10, 164, 189, 183, 137, 13, 190, 5, 135, 220, 189, 228, 255, 226, 189, 140, 134, 23, 61, 144, 208, 110, 189, 57, 140, 63, 190, 200, 16, 87, 190, 228, 181, 77, 188, 221, 195, 4, 190, 252, 184, 213, 189, 62, 208, 21, 62, 201, 192, 177, 61, 73, 144, 236, 189, 28, 76, 92, 189, 184, 237, 108, 61, 48, 92, 146, 190, 239, 120, 179, 189, 165, 103, 188, 60, 28, 222, 26, 62, 79, 251, 105, 190, 68, 153, 40, 61, 67, 166, 182, 189, 124, 20, 207, 190, 113, 229, 194, 62, 239, 29, 213, 189, 250, 198, 205, 61, 178, 209, 136, 62, 184, 24, 61, 190, 205, 140, 28, 62, 194, 40, 4, 62, 29, 207, 134, 189, 149, 93, 187, 190, 121, 202, 210, 188, 217, 49, 108, 189, 139, 185, 250, 190, 57, 47, 224, 62, 208, 174, 8, 190, 102, 189, 218, 190, 145, 183, 6, 190, 211, 86, 192, 62, 217, 206, 131, 62, 199, 136, 37, 61, 204, 108, 145, 190, 229, 114, 169, 61, 25, 79, 250, 189, 176, 235, 150, 61, 19, 115, 149, 61, 60, 158, 83, 188, 190, 253, 57, 57, 166, 22, 21, 62, 246, 194, 27, 62, 239, 221, 246, 188, 24, 38, 170, 189, 35, 155, 41, 190, 103, 97, 87, 61, 198, 215, 243, 189, 65, 177, 170, 59, 232, 145, 6, 190, 191, 149, 153, 189, 44, 169, 133, 61, 185, 125, 32, 62, 20, 64, 8, 62, 126, 218, 17, 62, 199, 26, 194, 186, 98, 22, 33, 190, 53, 147, 172, 189, 91, 252, 171, 61, 42, 64, 10, 60, 205, 26, 44, 61, 19, 161, 60, 189, 15, 41, 168, 189, 4, 78, 15, 190, 139, 112, 65, 189, 8, 199, 2, 188, 237, 235, 32, 190, 97, 44, 52, 190, 183, 104, 192, 189, 222, 92, 16, 190, 75, 62, 229, 60, 66, 40, 119, 190, 150, 230, 69, 190, 160, 167, 11, 189, 135, 102, 155, 62, 68, 3, 27, 191, 6, 4, 49, 62, 6, 72, 41, 190, 101, 87, 36, 190, 10, 4, 218, 61, 103, 183, 153, 62, 62, 84, 131, 62, 169, 248, 29, 191, 169, 134, 199, 190, 210, 191, 245, 189, 118, 114, 236, 61, 136, 168, 89, 190, 20, 64, 223, 191, 114, 33, 239, 60, 213, 19, 22, 190, 128, 183, 56, 191, 130, 87, 46, 62, 206, 206, 56, 62, 180, 68, 238, 190, 128, 107, 243, 61, 255, 19, 70, 61, 228, 212, 100, 60, 56, 234, 250, 61, 68, 179, 17, 190, 196, 244, 6, 60, 74, 188, 234, 191, 109, 124, 146, 62, 47, 229, 136, 61, 94, 210, 140, 59, 171, 186, 82, 61, 61, 178, 68, 62, 239, 116, 42, 188, 50, 120, 144, 190, 21, 87, 198, 61, 87, 60, 217, 61, 168, 133, 89, 189, 95, 96, 167, 60, 70, 9, 96, 61, 119, 155, 7, 62, 54, 179, 71, 62, 44, 99, 252, 190, 246, 116, 189, 60, 217, 91, 80, 62, 147, 64, 172, 189, 136, 36, 8, 191, 246, 134, 106, 189, 193, 249, 167, 189, 212, 129, 233, 190, 241, 118, 128, 62, 173, 56, 33, 62, 70, 3, 141, 190, 201, 164, 0, 189, 104, 26, 14, 63, 69, 195, 31, 189, 239, 20, 137, 61, 174, 143, 14, 191, 187, 138, 165, 62, 218, 35, 233, 190, 204, 162, 39, 190, 199, 0, 131, 61, 75, 223, 206, 188, 61, 102, 122, 62, 15, 47, 154, 190, 236, 116, 143, 61, 58, 60, 248, 187, 135, 187, 9, 190, 93, 15, 87, 189, 53, 26, 210, 61, 245, 146, 24, 62, 231, 63, 131, 188, 119, 126, 23, 62, 41, 88, 163, 62, 107, 43, 230, 61, 20, 201, 130, 62, 74, 166, 41, 62, 235, 124, 107, 189, 150, 19, 144, 58, 180, 67, 60, 191, 204, 114, 92, 62, 59, 198, 39, 189, 97, 178, 222, 187, 34, 215, 42, 191, 58, 201, 89, 189, 36, 64, 206, 189, 101, 149, 74, 189, 254, 132, 143, 62, 16, 248, 136, 62, 203, 209, 105, 62, 9, 67, 141, 190, 255, 208, 3, 62, 115, 130, 197, 190, 169, 171, 10, 63, 116, 147, 123, 190, 153, 53, 191, 189, 224, 206, 39, 62, 253, 166, 19, 62, 38, 178, 36, 62, 253, 28, 24, 61, 192, 136, 122, 189, 61, 215, 142, 190, 144, 83, 192, 62, 28, 196, 25, 189, 161, 194, 137, 62, 80, 193, 100, 62, 215, 74, 54, 190, 237, 244, 249, 60, 32, 117, 128, 62, 208, 243, 11, 190, 124, 146, 48, 189, 133, 151, 206, 60, 34, 248, 37, 62, 200, 25, 191, 189, 252, 175, 97, 62, 201, 123, 206, 189, 28, 203, 237, 61, 5, 115, 248, 189, 184, 250, 178, 62, 48, 21, 61, 62, 77, 59, 142, 62, 48, 162, 230, 189, 192, 199, 167, 189, 19, 169, 45, 62, 126, 193, 152, 190, 39, 250, 36, 62, 59, 185, 84, 190, 54, 223, 156, 190, 190, 69, 74, 62, 192, 44, 181, 188, 139, 85, 221, 190, 46, 12, 20, 61, 146, 1, 237, 190, 126, 60, 203, 190, 24, 32, 144, 62, 77, 172, 134, 62, 184, 56, 54, 62, 15, 171, 31, 190, 233, 74, 41, 190, 41, 241, 54, 62, 13, 85, 119, 62, 238, 18, 226, 190, 156, 55, 201, 191, 87, 14, 197, 61, 34, 4, 99, 189, 161, 213, 30, 191, 72, 85, 58, 190, 151, 160, 92, 62, 222, 8, 0, 191, 241, 62, 149, 61, 61, 104, 136, 60, 159, 79, 1, 62, 121, 28, 131, 189, 130, 235, 76, 61, 146, 73, 65, 62, 182, 133, 212, 191, 119, 124, 120, 62, 142, 135, 31, 190, 51, 207, 103, 60, 216, 225, 161, 61, 206, 54, 189, 189, 227, 224, 234, 61, 44, 185, 71, 62, 84, 149, 181, 189, 188, 244, 35, 62, 84, 55, 87, 62, 26, 122, 173, 60, 38, 140, 141, 190, 199, 21, 115, 189, 209, 2, 13, 62, 65, 67, 11, 191, 6, 236, 186, 60, 254, 219, 94, 62, 232, 18, 60, 61, 19, 45, 20, 190, 153, 10, 88, 190, 13, 18, 236, 61, 212, 80, 146, 189, 2, 196, 100, 189, 94, 89, 72, 190, 161, 182, 196, 61, 44, 196, 32, 190, 205, 28, 81, 62, 243, 220, 66, 62, 51, 175, 178, 190, 51, 140, 232, 189, 24, 84, 171, 190, 239, 66, 238, 188, 178, 223, 19, 190, 133, 189, 1, 189, 203, 229, 132, 189, 60, 104, 165, 61, 178, 253, 188, 188, 183, 63, 177, 61, 136, 255, 129, 188, 224, 75, 44, 190, 153, 198, 151, 62, 115, 229, 33, 59, 3, 163, 162, 189, 240, 67, 39, 61, 119, 120, 209, 189, 153, 239, 193, 190, 208, 1, 143, 62, 7, 36, 154, 190, 40, 131, 99, 61, 61, 148, 32, 62, 162, 242, 238, 189, 76, 33, 22, 62, 141, 238, 42, 190, 155, 229, 140, 62, 112, 42, 59, 60, 99, 92, 200, 61, 20, 57, 104, 187, 168, 139, 208, 61, 191, 55, 250, 190, 142, 47, 177, 189, 104, 224, 211, 189, 37, 210, 206, 60, 44, 18, 59, 62, 33, 23, 234, 189, 83, 202, 102, 62, 147, 216, 196, 190, 198, 114, 188, 62, 250, 86, 182, 61, 252, 220, 80, 190, 159, 218, 28, 190, 149, 112, 21, 189, 24, 243, 250, 190, 103, 32, 136, 62, 246, 129, 243, 189, 198, 10, 179, 189, 84, 60, 203, 61, 28, 2, 128, 190, 220, 42, 46, 190, 236, 67, 165, 62, 147, 205, 14, 189, 71, 231, 80, 189, 83, 65, 45, 62, 6, 216, 35, 62, 160, 220, 4, 190, 238, 205, 134, 61, 165, 244, 67, 61, 109, 248, 76, 186, 92, 12, 103, 62, 150, 4, 62, 62, 18, 30, 51, 62, 158, 190, 74, 190, 166, 12, 15, 189, 34, 89, 249, 189, 202, 130, 103, 189, 36, 146, 241, 61, 214, 179, 51, 61, 211, 191, 98, 62, 155, 254, 9, 190, 23, 161, 255, 59, 199, 7, 44, 62, 135, 251, 149, 190, 32, 18, 229, 61, 190, 62, 53, 62, 114, 117, 241, 60, 7, 124, 109, 62, 200, 203, 129, 62, 58, 116, 66, 62, 233, 79, 40, 191, 88, 109, 198, 190, 64, 51, 53, 61, 177, 241, 226, 190, 53, 146, 242, 61, 137, 20, 183, 61, 240, 23, 137, 189, 107, 45, 41, 190, 212, 202, 103, 190, 244, 62, 199, 189, 210, 160, 62, 62, 153, 69, 140, 60, 205, 139, 174, 60, 24, 122, 174, 61, 51, 39, 10, 61, 160, 207, 157, 62, 67, 167, 250, 188, 129, 30, 78, 190, 201, 97, 170, 190, 175, 114, 43, 190, 36, 187, 243, 61, 241, 64, 5, 191, 239, 92, 45, 190, 253, 27, 106, 190, 184, 224, 114, 190, 140, 182, 115, 61, 48, 88, 173, 190, 157, 139, 9, 188, 153, 148, 161, 190, 244, 237, 185, 61, 26, 197, 128, 189, 216, 186, 0, 191, 147, 236, 183, 62, 89, 238, 83, 190, 220, 218, 247, 189, 149, 65, 153, 62, 238, 202, 19, 190, 67, 35, 44, 60, 114, 183, 9, 61, 235, 105, 29, 61, 251, 185, 5, 189, 57, 223, 31, 62, 31, 47, 30, 189, 40, 12, 4, 190, 120, 192, 47, 62, 126, 190, 78, 190, 33, 156, 20, 61, 18, 105, 1, 190, 58, 125, 57, 190, 220, 190, 144, 190, 239, 126, 184, 61, 120, 164, 107, 62, 172, 213, 48, 62, 146, 79, 129, 62, 56, 148, 84, 189, 190, 237, 74, 61, 38, 96, 171, 62, 245, 43, 6, 190, 93, 99, 65, 189, 72, 148, 43, 62, 187, 50, 60, 190, 63, 121, 68, 62, 146, 244, 245, 60, 171, 83, 187, 62, 158, 82, 150, 191, 107, 182, 129, 189, 224, 1, 25, 62, 245, 64, 48, 191, 200, 118, 218, 61, 14, 212, 132, 62, 155, 94, 22, 61, 74, 67, 2, 190, 91, 98, 49, 191, 100, 63, 58, 189, 56, 119, 35, 62, 5, 254, 3, 62, 243, 1, 51, 190, 158, 185, 86, 62, 144, 56, 105, 61, 150, 83, 148, 62, 223, 69, 199, 61, 12, 235, 188, 190, 66, 151, 24, 191, 133, 62, 3, 190, 92, 246, 213, 61, 182, 14, 73, 191, 127, 188, 247, 189, 228, 93, 204, 61, 206, 180, 1, 62, 57, 235, 61, 190, 39, 45, 36, 190, 207, 201, 213, 190, 145, 119, 9, 190, 119, 235, 25, 59, 39, 112, 204, 189, 108, 172, 146, 189, 50, 199, 102, 190, 155, 210, 147, 190, 207, 202, 29, 191, 223, 140, 81, 62, 146, 229, 208, 188, 103, 58, 96, 62, 162, 40, 69, 60, 224, 86, 52, 190, 21, 68, 161, 190, 23, 29, 170, 190, 115, 46, 243, 62, 98, 146, 108, 190, 6, 243, 153, 188, 240, 63, 238, 62, 45, 249, 159, 189, 196, 157, 182, 190, 153, 232, 188, 60, 212, 171, 130, 189, 110, 36, 33, 62, 74, 67, 44, 62, 28, 112, 187, 190, 150, 149, 118, 190, 30, 132, 25, 190, 186, 204, 20, 189, 89, 167, 134, 61, 75, 143, 7, 190, 182, 154, 133, 61, 81, 116, 13, 59, 226, 43, 221, 61, 0, 97, 246, 61, 180, 152, 5, 190, 62, 57, 65, 61, 146, 116, 15, 62, 222, 163, 3, 62, 88, 38, 227, 189, 241, 17, 62, 61, 35, 221, 6, 61, 227, 122, 36, 62, 161, 128, 222, 189, 167, 96, 29, 190, 187, 216, 14, 190, 107, 223, 147, 189, 105, 66, 34, 190, 111, 225, 84, 190, 159, 198, 4, 62, 226, 225, 3, 190, 62, 31, 142, 189, 233, 254, 72, 189, 101, 159, 167, 61, 159, 58, 90, 190, 162, 61, 250, 189, 0, 223, 3, 190, 37, 133, 168, 189, 60, 156, 68, 190, 119, 18, 38, 189, 237, 234, 6, 60, 40, 20, 220, 61, 174, 0, 27, 62, 224, 194, 55, 62, 61, 79, 40, 62, 168, 85, 193, 188, 65, 168, 6, 61, 64, 132, 43, 190, 160, 221, 40, 62, 171, 143, 74, 190, 147, 183, 15, 62, 83, 138, 24, 62, 22, 175, 222, 190, 75, 174, 124, 62, 179, 252, 80, 62, 4, 168, 139, 61, 198, 107, 114, 190, 124, 163, 184, 189, 190, 112, 128, 61, 127, 230, 60, 61, 52, 27, 110, 62, 92, 35, 34, 62, 126, 61, 187, 60, 62, 222, 174, 190, 12, 195, 23, 62, 111, 222, 178, 60, 208, 153, 17, 190, 64, 69, 237, 190, 61, 138, 54, 190, 122, 175, 216, 61, 158, 123, 73, 190, 232, 236, 22, 190, 3, 88, 200, 60, 193, 65, 87, 188, 219, 225, 67, 189, 173, 240, 118, 60, 7, 57, 34, 62, 67, 99, 167, 61, 211, 33, 10, 61, 107, 31, 46, 189, 49, 246, 151, 61, 164, 29, 160, 190, 196, 38, 35, 190, 140, 96, 127, 62, 231, 199, 130, 190, 83, 56, 199, 62, 46, 45, 149, 62, 12, 117, 40, 190, 225, 198, 115, 190, 51, 106, 119, 191, 54, 61, 28, 62, 253, 54, 201, 60, 28, 243, 138, 61, 74, 179, 47, 191, 225, 146, 225, 189, 3, 219, 41, 190, 47, 82, 117, 62, 201, 43, 58, 62, 217, 126, 206, 189, 41, 4, 51, 189, 192, 87, 163, 190, 155, 145, 25, 62, 109, 128, 215, 190, 227, 245, 30, 190, 227, 116, 116, 61, 249, 144, 134, 61, 180, 106, 46, 188, 43, 47, 31, 190, 221, 212, 204, 61, 89, 135, 195, 61, 71, 122, 105, 61, 96, 254, 162, 61, 145, 111, 175, 61, 2, 92, 148, 189, 140, 1, 228, 190, 9, 15, 133, 190, 178, 206, 25, 190, 39, 26, 200, 60, 182, 134, 97, 190, 124, 69, 185, 190, 248, 114, 75, 190, 178, 45, 254, 189, 109, 232, 86, 190, 3, 107, 54, 62, 3, 175, 182, 62, 47, 191, 189, 60, 174, 221, 96, 62, 163, 238, 51, 61, 168, 101, 127, 190, 93, 184, 255, 61, 158, 195, 4, 191, 155, 48, 178, 190, 213, 55, 227, 61, 55, 113, 146, 61, 17, 9, 176, 189, 219, 240, 221, 190, 96, 185, 8, 62, 171, 220, 116, 62, 175, 7, 139, 188, 77, 149, 156, 61, 41, 69, 54, 190, 177, 154, 51, 189, 144, 156, 94, 190, 253, 234, 80, 62, 157, 99, 81, 62, 109, 100, 238, 188, 182, 36, 82, 190, 244, 61, 165, 60, 182, 118, 66, 191, 115, 207, 90, 190, 208, 141, 245, 188, 88, 181, 2, 189, 171, 213, 12, 62, 63, 21, 23, 190, 9, 19, 180, 190, 212, 20, 46, 190, 139, 37, 106, 62, 21, 172, 75, 190, 27, 34, 133, 190, 162, 121, 225, 190, 47, 131, 151, 62, 174, 192, 174, 189, 194, 86, 129, 188, 177, 235, 186, 190, 46, 78, 94, 190, 236, 37, 120, 189, 232, 129, 141, 190, 192, 214, 120, 191, 79, 136, 144, 62, 36, 213, 126, 62, 179, 205, 77, 188, 116, 19, 123, 190, 99, 176, 29, 62, 167, 168, 132, 191, 185, 72, 243, 187, 206, 104, 223, 62, 149, 255, 209, 190, 172, 246, 138, 61, 179, 178, 251, 191, 175, 86, 190, 190, 241, 203, 141, 62, 71, 231, 17, 190, 221, 190, 137, 190, 154, 247, 120, 62, 130, 69, 165, 188, 42, 96, 175, 61, 212, 114, 111, 190, 51, 46, 210, 60, 180, 212, 52, 62, 182, 113, 142, 62, 118, 95, 230, 61, 248, 238, 11, 62, 189, 148, 194, 190, 13, 128, 48, 190, 255, 155, 116, 191, 135, 232, 210, 62, 180, 43, 45, 190, 188, 51, 45, 62, 80, 115, 67, 62, 6, 46, 50, 191, 211, 194, 221, 62, 87, 51, 200, 62, 155, 91, 37, 62, 218, 146, 50, 62, 4, 131, 221, 61, 45, 225, 73, 191, 138, 107, 83, 188, 176, 32, 187, 62, 188, 248, 118, 190, 147, 45, 144, 62, 35, 87, 178, 191, 150, 39, 9, 190, 117, 140, 108, 62, 83, 32, 130, 189, 152, 72, 148, 61, 119, 46, 233, 60, 84, 212, 129, 59, 9, 39, 77, 190, 78, 127, 73, 190, 66, 197, 85, 62, 42, 150, 30, 62, 21, 39, 5, 188, 2, 66, 134, 62, 212, 235, 224, 61, 165, 252, 164, 190, 23, 95, 126, 190, 73, 87, 5, 191, 25, 9, 234, 62, 128, 76, 227, 189, 101, 52, 6, 62, 123, 5, 105, 61, 244, 67, 106, 61, 194, 104, 60, 190, 246, 98, 89, 62, 76, 148, 165, 190, 45, 67, 171, 190, 178, 77, 73, 61, 197, 52, 214, 187, 234, 32, 139, 62, 18, 102, 154, 190, 37, 204, 8, 62, 184, 213, 61, 191, 102, 69, 207, 189, 76, 87, 99, 62, 102, 111, 148, 190, 29, 54, 175, 61, 180, 84, 174, 188, 68, 196, 251, 189, 80, 65, 80, 189, 79, 201, 192, 190, 156, 239, 147, 60, 119, 250, 166, 62, 229, 181, 214, 61, 152, 34, 24, 60, 36, 74, 41, 62, 209, 155, 22, 62, 125, 115, 228, 61, 48, 174, 101, 189, 2, 138, 107, 191, 63, 77, 130, 191, 246, 242, 37, 189, 175, 217, 94, 62, 67, 209, 181, 190, 178, 13, 59, 62, 107, 127, 240, 189, 9, 135, 151, 189, 157, 38, 212, 187, 96, 167, 235, 61, 230, 197, 79, 62, 26, 156, 75, 62, 185, 171, 43, 61, 111, 248, 72, 190, 226, 35, 233, 61, 0, 134, 82, 189, 148, 4, 140, 61, 134, 30, 9, 62, 81, 134, 151, 190, 67, 114, 0, 61, 12, 80, 33, 62, 142, 226, 182, 61, 57, 50, 169, 60, 211, 167, 9, 62, 255, 178, 40, 190, 106, 184, 67, 62, 130, 170, 33, 62, 78, 60, 131, 62, 255, 255, 19, 62, 18, 9, 2, 190, 144, 173, 90, 61, 84, 203, 200, 187, 112, 57, 199, 61, 194, 238, 130, 190, 169, 134, 1, 62, 153, 147, 238, 188, 227, 188, 60, 190, 16, 27, 195, 189, 198, 194, 139, 189, 74, 215, 71, 62, 191, 169, 61, 62, 174, 200, 19, 190, 145, 242, 225, 189, 98, 75, 52, 61, 159, 21, 106, 62, 19, 87, 155, 61, 152, 116, 165, 187, 152, 27, 146, 62, 88, 11, 91, 190, 108, 136, 19, 191, 109, 156, 147, 62, 232, 194, 134, 188, 39, 158, 73, 61, 30, 163, 155, 61, 56, 78, 150, 61, 198, 19, 191, 188, 224, 110, 159, 190, 34, 86, 252, 61, 106, 130, 178, 189, 224, 54, 151, 62, 250, 168, 8, 61, 52, 53, 82, 62, 99, 137, 0, 191, 50, 78, 221, 189, 164, 215, 207, 61, 89, 103, 103, 62, 224, 230, 146, 61, 138, 55, 93, 190, 82, 102, 121, 62, 87, 183, 56, 191, 119, 14, 235, 61, 251, 110, 239, 188, 148, 123, 213, 62, 129, 198, 223, 188, 127, 62, 101, 62, 144, 77, 60, 190, 64, 88, 58, 190, 34, 7, 222, 62, 203, 109, 188, 189, 37, 246, 52, 190, 60, 54, 93, 191, 213, 171, 96, 190, 73, 157, 107, 190, 85, 49, 187, 190, 115, 163, 186, 190, 28, 141, 92, 61, 57, 186, 85, 62, 33, 197, 150, 61, 175, 181, 104, 190, 174, 105, 236, 190, 230, 61, 172, 62, 99, 145, 38, 190, 93, 67, 171, 190, 234, 44, 142, 62, 52, 233, 62, 189, 112, 201, 105, 190, 32, 11, 133, 191, 139, 68, 131, 189, 252, 223, 85, 191, 58, 69, 244, 188, 188, 235, 166, 61, 128, 220, 164, 190, 120, 85, 78, 61, 30, 28, 84, 62, 144, 104, 242, 189, 40, 17, 25, 190, 211, 137, 225, 61, 91, 33, 134, 190, 14, 125, 100, 62, 219, 103, 0, 190, 225, 20, 44, 190, 76, 177, 213, 188, 249, 123, 224, 190, 164, 150, 173, 190, 181, 146, 59, 62, 196, 29, 128, 187, 58, 29, 87, 61, 220, 109, 212, 61, 28, 198, 40, 189, 134, 250, 82, 186, 243, 73, 205, 190, 187, 214, 133, 62, 120, 40, 73, 190, 31, 23, 108, 62, 22, 191, 168, 62, 79, 125, 47, 60, 49, 115, 183, 190, 222, 29, 31, 62, 65, 195, 200, 188, 148, 79, 136, 61, 251, 148, 94, 188, 137, 242, 49, 190, 245, 158, 95, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {46, 218, 35, 62, 89, 80, 80, 62, 63, 105, 135, 61, 162, 99, 56, 61, 170, 59, 201, 62, 188, 209, 223, 61, 234, 113, 62, 62, 127, 108, 244, 189, 219, 144, 229, 61, 73, 20, 19, 62, 210, 101, 95, 190, 222, 152, 233, 60, 169, 215, 7, 62, 223, 152, 238, 189, 30, 188, 162, 62, 241, 11, 190, 189, 236, 86, 48, 189, 196, 5, 97, 190, 38, 4, 67, 62, 16, 250, 246, 189, 116, 187, 120, 61, 61, 80, 29, 189, 14, 67, 132, 190, 40, 63, 40, 62, 208, 243, 201, 61, 21, 108, 26, 59, 136, 86, 148, 185, 146, 30, 105, 189, 34, 1, 62, 62, 193, 70, 52, 187, 166, 166, 47, 189, 165, 97, 245, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {215, 132, 42, 190, 237, 58, 165, 190, 176, 35, 6, 191, 37, 68, 109, 62, 249, 93, 147, 188, 20, 58, 196, 189, 73, 76, 170, 190, 36, 27, 201, 187, 205, 65, 109, 191, 224, 173, 203, 190, 227, 76, 7, 63, 207, 68, 167, 190, 97, 32, 141, 191, 239, 36, 92, 190, 208, 144, 126, 62, 24, 94, 77, 62, 152, 125, 65, 190, 149, 238, 128, 62, 31, 124, 20, 191, 48, 159, 52, 61, 125, 19, 1, 189, 109, 106, 112, 190, 232, 36, 38, 63, 13, 170, 220, 61, 156, 72, 34, 191, 117, 169, 54, 63, 71, 224, 191, 62, 137, 202, 29, 190, 41, 3, 133, 189, 101, 84, 157, 62, 176, 225, 94, 63, 227, 239, 143, 62, 188, 104, 38, 190, 95, 123, 131, 190, 100, 9, 176, 62, 251, 184, 43, 190, 118, 34, 212, 190, 149, 181, 192, 61, 243, 66, 156, 62, 183, 107, 5, 62, 28, 84, 233, 60, 228, 13, 149, 62, 39, 102, 67, 62, 67, 94, 31, 62, 179, 33, 139, 61, 213, 140, 117, 62, 152, 52, 47, 190, 138, 156, 132, 189, 75, 69, 4, 190, 76, 34, 198, 61, 242, 38, 64, 190, 123, 175, 6, 63, 136, 200, 75, 60, 154, 141, 15, 189, 5, 90, 68, 63, 154, 91, 186, 190, 83, 80, 17, 61, 195, 18, 3, 189, 153, 165, 200, 61, 158, 60, 95, 190, 37, 229, 150, 190, 157, 149, 64, 62, 16, 157, 28, 62, 229, 28, 164, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 2, 77, 189, 16, 180, 170, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {70, 235, 230, 60, 145, 91, 146, 190, 248, 89, 87, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {214, 113, 75, 63, 91, 195, 140, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0030/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}