// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {123, 109, 25, 191, 67, 86, 133, 191, 7, 75, 11, 191, 48, 67, 98, 62, 74, 140, 0, 62, 29, 129, 251, 190, 231, 82, 175, 62, 175, 31, 93, 63, 232, 210, 226, 190, 139, 116, 177, 190, 141, 162, 43, 63, 129, 171, 83, 189, 111, 252, 128, 189, 77, 93, 27, 63, 74, 187, 16, 191, 40, 1, 87, 62, 162, 231, 141, 63, 78, 64, 161, 62, 24, 161, 98, 190, 243, 252, 73, 61, 127, 114, 4, 191, 162, 78, 40, 63, 88, 52, 74, 191, 39, 193, 56, 62, 216, 91, 226, 190, 216, 26, 59, 63, 12, 246, 190, 190, 185, 184, 235, 61, 94, 60, 25, 63, 130, 31, 149, 190, 143, 250, 181, 190, 255, 48, 49, 191, 142, 134, 27, 190, 180, 203, 179, 190, 67, 51, 149, 191, 74, 59, 90, 190, 138, 214, 39, 63, 182, 228, 135, 63, 122, 148, 135, 62, 166, 113, 13, 63, 163, 102, 166, 191, 116, 24, 144, 190, 214, 200, 60, 63, 164, 200, 38, 190, 203, 109, 132, 62, 200, 61, 244, 62, 222, 132, 99, 191, 70, 133, 181, 62, 8, 56, 163, 62, 44, 190, 255, 190, 239, 246, 226, 62, 125, 80, 148, 190, 90, 27, 220, 63, 159, 248, 210, 62, 91, 198, 80, 191, 181, 105, 126, 62, 54, 193, 11, 61, 22, 182, 2, 63, 71, 133, 45, 63, 206, 184, 173, 62, 194, 122, 57, 63, 210, 115, 226, 190, 100, 154, 16, 190, 224, 135, 145, 61, 7, 148, 76, 63, 25, 101, 136, 189, 167, 118, 252, 188, 170, 12, 103, 191, 223, 129, 15, 190, 87, 168, 66, 63, 201, 44, 98, 191, 71, 76, 44, 190, 199, 90, 4, 191, 192, 104, 72, 62, 197, 207, 224, 62, 45, 187, 149, 62, 182, 13, 103, 63, 125, 152, 56, 62, 102, 78, 188, 62, 116, 38, 241, 62, 253, 176, 167, 190, 146, 28, 143, 190, 252, 43, 155, 191, 179, 36, 182, 190, 95, 250, 8, 63, 212, 87, 130, 191, 113, 81, 223, 190, 222, 156, 18, 62, 175, 32, 209, 191, 244, 156, 173, 190, 238, 106, 117, 62, 26, 198, 191, 63, 114, 124, 232, 62, 47, 37, 12, 191, 230, 185, 63, 191, 51, 45, 57, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {251, 152, 6, 191, 255, 115, 195, 61, 162, 14, 15, 190, 43, 199, 159, 62, 79, 10, 111, 186, 225, 134, 130, 62, 228, 24, 18, 191, 89, 38, 22, 62, 138, 247, 221, 189, 71, 19, 251, 60, 172, 142, 186, 62, 247, 90, 38, 190, 103, 246, 120, 190, 121, 213, 227, 189, 198, 136, 23, 191, 136, 157, 40, 191, 249, 204, 132, 190, 190, 254, 159, 190, 58, 10, 212, 62, 76, 160, 42, 191, 16, 132, 142, 189, 174, 83, 249, 62, 46, 126, 9, 63, 147, 118, 75, 62, 42, 79, 167, 62, 172, 230, 177, 61, 123, 191, 72, 62, 133, 83, 255, 189, 133, 248, 5, 191, 107, 163, 199, 62, 133, 241, 139, 62, 115, 248, 35, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {229, 61, 102, 62, 172, 102, 47, 58, 90, 5, 7, 61, 178, 163, 31, 62, 149, 71, 83, 186, 224, 38, 68, 62, 132, 45, 245, 189, 27, 141, 165, 57, 146, 189, 99, 188, 117, 148, 21, 62, 39, 209, 217, 190, 80, 126, 247, 188, 128, 183, 60, 62, 239, 239, 16, 191, 166, 79, 128, 60, 28, 222, 163, 60, 161, 79, 16, 61, 140, 87, 150, 189, 91, 181, 193, 58, 197, 69, 9, 62, 168, 89, 25, 190, 133, 153, 6, 62, 62, 120, 133, 61, 19, 162, 190, 61, 13, 201, 203, 189, 51, 131, 164, 62, 16, 107, 47, 62, 252, 174, 79, 61, 33, 31, 240, 190, 63, 193, 144, 190, 115, 30, 61, 62, 113, 49, 214, 189, 107, 97, 177, 189, 14, 27, 35, 190, 157, 211, 232, 61, 18, 253, 100, 62, 153, 251, 31, 189, 52, 191, 13, 189, 135, 250, 126, 188, 158, 201, 134, 61, 103, 102, 91, 190, 204, 85, 197, 61, 216, 214, 179, 186, 51, 162, 83, 190, 235, 169, 112, 62, 208, 229, 185, 190, 253, 69, 184, 62, 175, 98, 43, 62, 21, 150, 76, 190, 176, 158, 97, 191, 146, 184, 8, 62, 72, 8, 245, 190, 68, 35, 141, 190, 88, 67, 159, 62, 170, 151, 195, 189, 180, 202, 42, 189, 200, 188, 248, 190, 225, 179, 67, 62, 245, 182, 17, 62, 238, 64, 207, 189, 154, 81, 203, 190, 239, 108, 23, 61, 15, 107, 245, 60, 36, 183, 27, 190, 101, 106, 0, 189, 130, 68, 31, 190, 110, 63, 55, 60, 36, 85, 134, 62, 144, 159, 51, 62, 235, 13, 198, 189, 38, 208, 79, 60, 92, 44, 192, 189, 204, 112, 234, 189, 187, 223, 121, 62, 98, 160, 129, 61, 88, 210, 106, 62, 103, 65, 217, 62, 113, 197, 62, 191, 52, 75, 14, 62, 243, 78, 17, 190, 99, 103, 147, 190, 110, 193, 103, 190, 126, 58, 159, 61, 233, 209, 171, 62, 35, 243, 151, 190, 153, 63, 210, 62, 202, 129, 135, 60, 159, 213, 55, 61, 7, 123, 94, 190, 147, 173, 220, 62, 88, 134, 8, 61, 153, 46, 54, 190, 24, 252, 23, 191, 136, 67, 188, 190, 106, 11, 60, 190, 146, 172, 158, 188, 24, 2, 44, 190, 192, 218, 99, 189, 58, 73, 177, 61, 50, 216, 5, 62, 78, 50, 52, 62, 253, 23, 113, 190, 253, 214, 129, 62, 159, 4, 3, 189, 156, 109, 223, 60, 23, 44, 144, 62, 42, 209, 174, 61, 22, 147, 216, 61, 115, 197, 252, 61, 144, 43, 102, 60, 214, 49, 205, 61, 65, 253, 138, 190, 145, 238, 61, 191, 11, 69, 247, 187, 21, 105, 55, 62, 92, 19, 42, 63, 210, 65, 50, 62, 111, 86, 236, 61, 65, 146, 58, 190, 20, 73, 21, 188, 92, 194, 34, 190, 184, 224, 137, 62, 159, 221, 100, 62, 75, 89, 210, 61, 131, 177, 188, 189, 68, 79, 10, 190, 165, 96, 146, 189, 11, 194, 164, 60, 85, 35, 206, 61, 113, 15, 64, 62, 135, 20, 6, 61, 201, 245, 194, 61, 146, 147, 211, 60, 216, 90, 17, 62, 83, 105, 188, 61, 250, 247, 35, 62, 97, 36, 88, 190, 137, 218, 188, 61, 137, 195, 131, 189, 160, 121, 182, 189, 193, 66, 189, 188, 198, 103, 118, 190, 120, 238, 98, 61, 175, 81, 252, 189, 52, 162, 129, 189, 7, 79, 244, 189, 136, 195, 42, 188, 127, 186, 82, 190, 248, 28, 118, 60, 115, 204, 211, 62, 113, 178, 22, 62, 156, 79, 201, 61, 107, 21, 93, 60, 141, 196, 249, 60, 225, 50, 123, 186, 48, 64, 140, 60, 72, 100, 30, 190, 198, 189, 122, 61, 151, 139, 134, 62, 225, 116, 21, 188, 135, 70, 171, 189, 129, 136, 12, 190, 179, 223, 192, 61, 96, 219, 168, 60, 129, 196, 125, 187, 220, 92, 136, 60, 3, 169, 237, 59, 250, 190, 188, 189, 29, 82, 169, 61, 151, 206, 55, 60, 100, 60, 139, 61, 100, 35, 242, 60, 226, 123, 12, 190, 14, 76, 15, 62, 105, 25, 141, 61, 234, 135, 75, 61, 94, 50, 23, 61, 182, 10, 164, 189, 183, 137, 13, 190, 5, 135, 220, 189, 228, 255, 226, 189, 140, 134, 23, 61, 144, 208, 110, 189, 57, 140, 63, 190, 200, 16, 87, 190, 228, 181, 77, 188, 221, 195, 4, 190, 252, 184, 213, 189, 62, 208, 21, 62, 201, 192, 177, 61, 73, 144, 236, 189, 28, 76, 92, 189, 39, 0, 34, 61, 194, 239, 150, 190, 213, 171, 199, 189, 252, 211, 100, 61, 178, 144, 17, 62, 157, 108, 60, 190, 76, 189, 211, 60, 227, 100, 129, 62, 13, 85, 200, 190, 30, 180, 186, 62, 12, 194, 222, 189, 2, 183, 178, 61, 246, 187, 197, 62, 204, 74, 246, 190, 88, 100, 174, 62, 207, 254, 38, 62, 185, 142, 46, 189, 45, 179, 30, 191, 39, 146, 137, 61, 63, 243, 219, 60, 43, 16, 12, 191, 104, 213, 235, 62, 224, 45, 61, 190, 90, 91, 235, 190, 14, 221, 124, 190, 236, 231, 239, 62, 174, 222, 124, 62, 238, 80, 45, 189, 42, 200, 212, 190, 228, 48, 164, 189, 196, 213, 204, 189, 171, 232, 181, 61, 19, 115, 149, 61, 60, 158, 83, 188, 190, 253, 57, 57, 166, 22, 21, 62, 246, 194, 27, 62, 239, 221, 246, 188, 24, 38, 170, 189, 35, 155, 41, 190, 103, 97, 87, 61, 198, 215, 243, 189, 65, 177, 170, 59, 232, 145, 6, 190, 191, 149, 153, 189, 44, 169, 133, 61, 185, 125, 32, 62, 20, 64, 8, 62, 126, 218, 17, 62, 199, 26, 194, 186, 98, 22, 33, 190, 53, 147, 172, 189, 91, 252, 171, 61, 42, 64, 10, 60, 205, 26, 44, 61, 19, 161, 60, 189, 15, 41, 168, 189, 4, 78, 15, 190, 139, 112, 65, 189, 8, 199, 2, 188, 237, 235, 32, 190, 97, 44, 52, 190, 183, 104, 192, 189, 222, 92, 16, 190, 200, 169, 11, 61, 123, 185, 104, 190, 248, 97, 97, 190, 144, 167, 154, 188, 139, 132, 154, 62, 189, 73, 52, 191, 135, 254, 28, 62, 13, 243, 208, 190, 65, 172, 17, 190, 120, 221, 164, 61, 159, 43, 183, 62, 201, 35, 150, 62, 247, 132, 30, 191, 60, 190, 206, 190, 75, 122, 102, 190, 148, 181, 50, 189, 189, 42, 80, 190, 139, 102, 0, 192, 103, 67, 34, 62, 213, 19, 22, 190, 6, 255, 95, 191, 115, 248, 49, 62, 95, 26, 95, 62, 103, 141, 244, 190, 27, 235, 170, 60, 0, 38, 78, 62, 224, 79, 130, 58, 133, 90, 10, 62, 89, 19, 52, 190, 131, 240, 220, 60, 220, 140, 255, 191, 163, 181, 180, 62, 192, 205, 22, 62, 177, 150, 10, 60, 136, 208, 25, 61, 73, 95, 108, 62, 54, 101, 169, 59, 0, 161, 129, 190, 211, 216, 9, 62, 218, 88, 165, 61, 105, 208, 166, 186, 211, 118, 32, 60, 94, 239, 239, 61, 190, 169, 119, 62, 107, 193, 34, 62, 51, 122, 44, 191, 39, 188, 71, 61, 23, 194, 58, 62, 34, 26, 14, 189, 140, 168, 67, 191, 119, 93, 241, 61, 166, 98, 227, 189, 210, 193, 93, 191, 179, 247, 83, 62, 199, 35, 197, 61, 119, 8, 32, 191, 138, 91, 111, 189, 242, 91, 3, 63, 159, 138, 113, 189, 19, 141, 229, 61, 157, 125, 24, 191, 2, 126, 124, 62, 138, 233, 247, 190, 232, 170, 210, 189, 241, 151, 242, 61, 243, 104, 189, 188, 85, 156, 113, 62, 206, 147, 187, 190, 27, 243, 163, 61, 141, 95, 164, 189, 197, 148, 185, 189, 128, 78, 129, 189, 195, 71, 204, 61, 57, 137, 25, 62, 62, 121, 175, 59, 139, 102, 129, 62, 81, 50, 135, 62, 33, 158, 174, 62, 201, 198, 176, 62, 160, 102, 110, 62, 135, 6, 221, 188, 80, 63, 29, 59, 232, 101, 124, 191, 83, 207, 131, 62, 207, 231, 96, 189, 245, 47, 141, 189, 65, 30, 51, 191, 209, 207, 152, 189, 105, 54, 221, 189, 196, 206, 9, 190, 142, 139, 140, 62, 37, 193, 189, 62, 220, 100, 176, 62, 115, 208, 77, 190, 141, 48, 161, 61, 16, 230, 196, 190, 138, 115, 18, 63, 13, 156, 110, 190, 148, 65, 234, 189, 255, 148, 234, 61, 155, 196, 4, 62, 190, 36, 33, 62, 152, 161, 195, 60, 76, 151, 50, 189, 84, 136, 135, 190, 207, 222, 165, 62, 211, 133, 14, 189, 231, 14, 171, 62, 41, 186, 118, 62, 96, 139, 31, 190, 76, 73, 170, 61, 15, 71, 145, 62, 151, 133, 229, 189, 47, 131, 184, 189, 100, 204, 120, 61, 145, 238, 69, 62, 172, 110, 145, 189, 121, 161, 94, 62, 159, 190, 151, 189, 37, 123, 18, 62, 81, 139, 29, 190, 223, 66, 176, 62, 138, 95, 50, 62, 81, 19, 163, 62, 164, 152, 50, 190, 214, 77, 139, 189, 222, 68, 37, 62, 8, 130, 136, 190, 249, 66, 28, 62, 8, 205, 77, 190, 239, 166, 206, 190, 68, 87, 33, 61, 67, 154, 104, 189, 207, 182, 27, 191, 162, 1, 187, 59, 233, 117, 58, 191, 228, 207, 231, 190, 176, 54, 53, 62, 3, 196, 124, 62, 212, 196, 45, 62, 15, 171, 31, 190, 233, 138, 209, 189, 223, 13, 14, 62, 123, 162, 63, 62, 184, 55, 162, 190, 102, 156, 251, 191, 21, 185, 98, 61, 34, 4, 99, 189, 9, 216, 18, 191, 95, 52, 175, 190, 226, 55, 89, 62, 101, 68, 216, 190, 58, 129, 221, 60, 61, 104, 136, 60, 58, 75, 173, 61, 115, 255, 143, 189, 97, 159, 192, 61, 182, 152, 67, 62, 203, 249, 242, 191, 25, 193, 102, 62, 138, 82, 168, 190, 189, 162, 161, 61, 229, 132, 16, 62, 121, 110, 236, 189, 248, 122, 24, 62, 26, 244, 66, 62, 8, 66, 9, 190, 113, 120, 66, 62, 136, 215, 110, 62, 105, 141, 144, 61, 82, 122, 26, 191, 113, 193, 12, 190, 43, 199, 65, 62, 138, 190, 86, 191, 105, 186, 33, 62, 174, 56, 151, 62, 58, 177, 217, 61, 170, 102, 70, 190, 199, 186, 142, 190, 199, 192, 69, 62, 101, 236, 85, 188, 208, 171, 181, 188, 176, 139, 137, 190, 221, 206, 2, 62, 94, 181, 23, 190, 192, 83, 102, 62, 41, 139, 134, 62, 38, 158, 24, 191, 247, 131, 17, 190, 128, 65, 14, 191, 36, 157, 7, 189, 204, 54, 201, 190, 13, 17, 158, 189, 167, 107, 165, 189, 6, 14, 199, 61, 170, 186, 111, 189, 146, 158, 205, 61, 125, 128, 158, 189, 89, 255, 30, 190, 130, 194, 158, 62, 34, 38, 181, 188, 106, 150, 247, 188, 207, 167, 47, 59, 31, 176, 93, 190, 237, 211, 245, 190, 77, 73, 132, 62, 106, 74, 147, 190, 8, 184, 242, 61, 111, 205, 54, 62, 249, 3, 115, 190, 76, 139, 54, 188, 44, 227, 130, 190, 25, 71, 137, 62, 117, 14, 117, 188, 131, 233, 160, 61, 203, 78, 109, 188, 231, 71, 191, 61, 100, 82, 15, 191, 153, 3, 161, 189, 194, 133, 65, 190, 213, 203, 92, 61, 191, 220, 42, 62, 191, 207, 64, 190, 176, 71, 28, 62, 131, 67, 198, 190, 170, 183, 181, 62, 252, 217, 164, 61, 155, 119, 130, 190, 237, 201, 47, 190, 198, 115, 199, 189, 203, 226, 245, 190, 116, 56, 140, 62, 62, 5, 132, 190, 81, 210, 107, 189, 115, 243, 61, 62, 61, 248, 147, 190, 164, 84, 130, 190, 185, 146, 175, 62, 1, 22, 255, 188, 206, 132, 219, 188, 2, 201, 24, 62, 223, 73, 184, 61, 41, 54, 122, 190, 183, 5, 40, 188, 87, 202, 35, 61, 200, 158, 15, 189, 98, 205, 117, 62, 217, 216, 62, 62, 130, 172, 236, 61, 24, 210, 131, 190, 87, 225, 42, 189, 47, 146, 18, 190, 28, 79, 203, 60, 242, 41, 29, 62, 133, 254, 1, 189, 172, 115, 116, 62, 201, 67, 19, 190, 102, 218, 32, 61, 42, 246, 94, 62, 91, 213, 166, 190, 166, 55, 26, 62, 23, 238, 56, 62, 75, 12, 175, 60, 30, 72, 105, 62, 81, 245, 134, 62, 1, 58, 96, 62, 104, 185, 113, 191, 15, 6, 228, 190, 68, 69, 139, 61, 146, 248, 254, 190, 212, 135, 19, 62, 144, 249, 38, 62, 103, 230, 59, 188, 220, 117, 79, 190, 183, 45, 149, 190, 28, 255, 68, 189, 187, 158, 57, 62, 154, 134, 238, 60, 234, 164, 63, 187, 122, 40, 142, 61, 231, 126, 40, 61, 39, 81, 159, 62, 97, 80, 71, 188, 253, 101, 158, 190, 97, 142, 223, 190, 4, 122, 101, 190, 51, 49, 254, 61, 253, 140, 27, 191, 233, 168, 53, 189, 237, 145, 193, 190, 212, 41, 8, 191, 202, 133, 111, 188, 195, 88, 16, 191, 8, 97, 66, 189, 21, 50, 243, 190, 132, 204, 52, 62, 160, 63, 131, 190, 83, 102, 100, 191, 219, 14, 235, 62, 48, 109, 50, 190, 113, 29, 100, 190, 36, 212, 208, 62, 114, 10, 209, 189, 203, 121, 144, 61, 32, 98, 95, 61, 127, 96, 152, 189, 72, 22, 2, 190, 47, 36, 183, 61, 238, 74, 67, 61, 92, 202, 151, 190, 193, 107, 157, 62, 81, 240, 167, 189, 98, 30, 153, 188, 74, 176, 73, 190, 143, 37, 243, 190, 211, 2, 141, 190, 11, 73, 247, 189, 27, 81, 219, 62, 111, 179, 229, 61, 119, 180, 168, 62, 247, 108, 58, 189, 73, 29, 158, 61, 104, 163, 189, 62, 245, 126, 47, 190, 118, 168, 167, 188, 202, 192, 54, 62, 62, 195, 65, 190, 253, 71, 83, 62, 28, 154, 39, 61, 135, 162, 192, 62, 89, 36, 201, 191, 30, 29, 246, 189, 52, 216, 54, 62, 34, 77, 55, 191, 84, 76, 25, 62, 180, 206, 167, 62, 121, 11, 183, 61, 17, 123, 37, 190, 2, 57, 63, 191, 222, 26, 224, 58, 21, 106, 49, 62, 130, 253, 19, 62, 57, 23, 59, 190, 95, 50, 90, 62, 33, 75, 130, 61, 179, 164, 152, 62, 209, 144, 234, 61, 69, 123, 16, 191, 225, 208, 57, 191, 170, 223, 39, 190, 58, 76, 236, 61, 2, 148, 95, 191, 30, 12, 22, 190, 174, 52, 165, 61, 66, 185, 90, 61, 83, 110, 150, 190, 74, 5, 148, 190, 217, 118, 211, 190, 12, 102, 145, 189, 109, 181, 173, 61, 82, 234, 127, 188, 107, 204, 39, 190, 196, 17, 136, 190, 125, 188, 219, 190, 6, 213, 42, 191, 233, 152, 107, 62, 175, 31, 244, 61, 11, 96, 126, 62, 55, 138, 144, 61, 53, 154, 90, 190, 2, 243, 249, 189, 39, 20, 83, 190, 171, 7, 1, 63, 181, 22, 78, 190, 219, 75, 142, 60, 0, 175, 0, 63, 167, 139, 126, 62, 109, 144, 193, 190, 192, 2, 38, 61, 216, 245, 103, 190, 8, 203, 252, 61, 22, 125, 77, 62, 17, 189, 205, 190, 117, 6, 98, 190, 30, 132, 25, 190, 169, 199, 51, 189, 242, 180, 109, 61, 75, 143, 7, 190, 182, 154, 133, 61, 138, 35, 135, 58, 226, 43, 221, 61, 218, 131, 250, 61, 180, 152, 5, 190, 195, 123, 51, 61, 40, 64, 199, 61, 39, 244, 244, 61, 92, 96, 236, 189, 86, 227, 4, 188, 243, 13, 46, 61, 136, 147, 39, 62, 1, 53, 218, 189, 56, 72, 109, 190, 4, 199, 73, 190, 33, 101, 146, 189, 146, 177, 65, 190, 65, 137, 83, 190, 23, 248, 243, 61, 148, 57, 0, 190, 168, 125, 151, 189, 25, 140, 149, 189, 64, 134, 155, 61, 146, 180, 97, 190, 73, 137, 251, 189, 226, 216, 40, 190, 156, 33, 168, 189, 156, 152, 122, 190, 162, 226, 2, 190, 76, 84, 237, 60, 193, 84, 2, 62, 125, 226, 203, 61, 46, 136, 56, 62, 171, 67, 43, 62, 179, 234, 142, 189, 251, 65, 4, 61, 222, 31, 65, 190, 171, 49, 32, 62, 45, 169, 5, 191, 208, 42, 180, 61, 155, 79, 58, 62, 90, 195, 236, 190, 204, 169, 135, 62, 20, 101, 112, 62, 197, 255, 210, 61, 126, 80, 132, 190, 146, 88, 5, 190, 197, 185, 4, 62, 234, 39, 125, 61, 85, 44, 123, 62, 166, 135, 15, 62, 107, 150, 218, 60, 153, 32, 175, 190, 181, 89, 35, 62, 3, 253, 3, 61, 28, 107, 163, 190, 49, 200, 21, 191, 115, 143, 96, 190, 25, 196, 222, 61, 17, 31, 159, 190, 64, 9, 141, 190, 125, 119, 145, 61, 79, 208, 186, 60, 172, 230, 29, 61, 12, 236, 198, 61, 65, 163, 62, 62, 247, 117, 23, 61, 126, 8, 131, 61, 25, 156, 144, 61, 111, 164, 234, 61, 151, 208, 233, 190, 196, 38, 35, 190, 43, 11, 138, 62, 83, 68, 14, 191, 145, 237, 216, 62, 50, 113, 177, 62, 19, 156, 21, 190, 38, 70, 84, 190, 1, 88, 99, 191, 37, 143, 44, 62, 134, 199, 110, 190, 230, 71, 8, 62, 29, 81, 120, 191, 116, 180, 172, 190, 134, 56, 21, 190, 172, 37, 138, 62, 178, 138, 57, 62, 231, 247, 45, 190, 199, 0, 63, 190, 45, 120, 34, 191, 81, 162, 54, 62, 109, 230, 213, 190, 201, 70, 1, 190, 93, 181, 114, 61, 86, 250, 251, 61, 167, 20, 17, 61, 221, 117, 170, 189, 174, 87, 68, 61, 45, 160, 24, 62, 21, 210, 143, 60, 129, 114, 217, 61, 130, 220, 53, 62, 183, 205, 175, 187, 116, 229, 34, 191, 89, 84, 177, 190, 174, 105, 116, 190, 18, 233, 64, 61, 122, 212, 187, 61, 58, 139, 15, 190, 216, 70, 12, 190, 80, 153, 33, 190, 99, 78, 124, 190, 69, 66, 181, 61, 67, 70, 158, 62, 47, 237, 191, 188, 110, 40, 18, 62, 102, 239, 90, 62, 156, 89, 168, 190, 108, 210, 2, 62, 250, 141, 8, 191, 208, 247, 106, 190, 149, 129, 97, 61, 132, 15, 9, 61, 66, 146, 204, 189, 86, 84, 252, 190, 88, 228, 241, 61, 237, 67, 95, 62, 150, 155, 123, 188, 57, 224, 105, 61, 202, 235, 144, 190, 202, 164, 153, 189, 163, 230, 220, 189, 84, 111, 78, 62, 124, 119, 55, 62, 137, 166, 170, 60, 227, 214, 141, 190, 225, 115, 226, 189, 244, 200, 130, 191, 21, 55, 109, 190, 208, 141, 245, 188, 104, 183, 26, 189, 239, 170, 5, 189, 42, 186, 184, 188, 66, 29, 166, 190, 98, 90, 114, 190, 164, 155, 84, 62, 190, 250, 99, 190, 21, 113, 172, 190, 236, 86, 46, 191, 5, 20, 114, 62, 182, 201, 223, 189, 202, 40, 16, 190, 149, 130, 237, 190, 146, 5, 161, 190, 198, 19, 78, 190, 43, 242, 86, 190, 106, 112, 131, 191, 238, 225, 121, 62, 77, 155, 68, 62, 157, 131, 27, 188, 13, 46, 148, 190, 49, 81, 230, 61, 209, 118, 110, 191, 67, 195, 187, 60, 73, 32, 249, 62, 92, 52, 212, 190, 150, 30, 118, 62, 118, 76, 33, 192, 232, 141, 230, 190, 177, 155, 163, 62, 119, 136, 5, 190, 157, 152, 127, 190, 200, 47, 104, 62, 67, 249, 164, 189, 189, 29, 109, 60, 131, 103, 176, 190, 76, 0, 4, 61, 212, 42, 31, 62, 78, 177, 158, 62, 228, 103, 9, 62, 182, 189, 149, 61, 41, 19, 220, 190, 138, 72, 68, 190, 252, 111, 170, 191, 145, 195, 7, 63, 43, 1, 251, 189, 123, 194, 229, 61, 97, 169, 113, 62, 204, 184, 41, 191, 157, 156, 224, 62, 79, 6, 209, 62, 108, 111, 68, 62, 126, 253, 92, 62, 46, 198, 144, 61, 64, 225, 55, 191, 23, 23, 197, 59, 157, 227, 210, 62, 124, 67, 63, 190, 208, 207, 204, 62, 8, 12, 222, 191, 201, 243, 93, 190, 32, 32, 144, 62, 111, 239, 119, 189, 117, 132, 192, 61, 205, 199, 144, 60, 166, 219, 52, 188, 171, 130, 110, 190, 61, 219, 162, 190, 130, 181, 91, 62, 139, 120, 25, 62, 62, 170, 177, 60, 183, 67, 142, 62, 45, 65, 203, 61, 63, 46, 188, 190, 110, 168, 103, 190, 153, 206, 20, 191, 106, 31, 22, 63, 61, 25, 94, 189, 33, 23, 172, 61, 238, 35, 223, 61, 244, 67, 106, 61, 235, 35, 25, 190, 45, 168, 164, 62, 210, 163, 183, 190, 45, 51, 130, 187, 247, 172, 113, 61, 62, 249, 164, 190, 118, 138, 106, 62, 134, 225, 176, 190, 94, 125, 122, 62, 209, 222, 188, 191, 61, 163, 214, 189, 118, 174, 125, 62, 253, 209, 196, 190, 11, 68, 149, 61, 104, 51, 82, 61, 233, 88, 130, 189, 147, 5, 115, 189, 253, 188, 213, 190, 153, 153, 144, 61, 183, 76, 145, 62, 204, 238, 231, 61, 99, 137, 87, 189, 176, 244, 226, 61, 242, 244, 63, 62, 230, 71, 246, 61, 112, 177, 252, 188, 215, 234, 107, 191, 18, 115, 157, 191, 219, 232, 16, 190, 28, 24, 117, 62, 121, 73, 3, 191, 235, 52, 56, 62, 194, 174, 201, 189, 234, 43, 53, 189, 30, 236, 192, 60, 144, 153, 20, 62, 34, 12, 70, 62, 191, 14, 65, 62, 100, 140, 1, 189, 157, 120, 78, 190, 33, 41, 15, 62, 223, 22, 38, 188, 21, 75, 172, 61, 31, 106, 11, 62, 122, 8, 183, 190, 188, 124, 26, 188, 43, 127, 99, 62, 82, 16, 6, 62, 197, 44, 4, 61, 25, 101, 11, 62, 127, 55, 248, 189, 96, 173, 237, 61, 183, 228, 18, 62, 9, 107, 97, 62, 116, 99, 140, 61, 157, 30, 167, 189, 109, 218, 35, 61, 243, 243, 51, 188, 13, 23, 2, 62, 247, 176, 77, 190, 157, 118, 144, 61, 22, 205, 196, 188, 51, 123, 27, 190, 220, 16, 9, 190, 237, 212, 153, 189, 178, 11, 93, 62, 66, 250, 231, 61, 241, 128, 34, 190, 110, 214, 32, 190, 13, 154, 223, 60, 240, 141, 164, 62, 75, 181, 200, 60, 69, 162, 197, 60, 6, 125, 92, 62, 21, 181, 168, 190, 42, 4, 62, 191, 28, 81, 167, 62, 217, 153, 167, 60, 159, 29, 25, 62, 105, 112, 15, 62, 117, 21, 174, 188, 117, 207, 68, 190, 67, 136, 169, 190, 13, 183, 80, 62, 88, 188, 7, 190, 211, 36, 158, 62, 132, 198, 198, 61, 212, 255, 118, 62, 220, 134, 27, 191, 254, 34, 182, 189, 61, 70, 56, 59, 10, 4, 118, 62, 116, 228, 191, 61, 11, 90, 146, 190, 192, 93, 46, 62, 195, 199, 114, 191, 115, 125, 55, 61, 231, 106, 147, 189, 209, 239, 249, 62, 28, 162, 30, 189, 134, 117, 131, 62, 190, 47, 161, 190, 157, 206, 1, 190, 156, 45, 225, 62, 76, 110, 184, 189, 145, 105, 129, 190, 105, 234, 140, 191, 219, 23, 91, 190, 195, 49, 111, 190, 216, 57, 204, 190, 165, 220, 169, 190, 232, 228, 103, 61, 160, 39, 104, 62, 199, 161, 198, 61, 246, 236, 116, 190, 43, 122, 40, 191, 121, 145, 211, 62, 130, 192, 250, 189, 220, 20, 235, 190, 18, 86, 149, 62, 180, 255, 26, 188, 1, 48, 135, 190, 99, 74, 177, 191, 119, 252, 83, 190, 222, 220, 129, 191, 153, 81, 109, 59, 37, 179, 70, 61, 245, 100, 165, 190, 57, 84, 197, 60, 217, 111, 51, 62, 188, 167, 65, 190, 248, 232, 73, 190, 171, 33, 143, 61, 85, 150, 144, 190, 197, 194, 128, 62, 2, 77, 131, 190, 84, 150, 40, 190, 144, 162, 161, 61, 127, 243, 239, 190, 124, 77, 220, 190, 172, 188, 81, 62, 25, 96, 21, 61, 203, 168, 12, 62, 190, 117, 22, 62, 168, 80, 11, 190, 150, 214, 35, 189, 128, 12, 244, 190, 134, 99, 131, 62, 25, 79, 109, 190, 241, 238, 131, 62, 128, 171, 171, 62, 192, 77, 146, 60, 118, 227, 212, 190, 71, 44, 16, 62, 96, 242, 49, 189, 194, 67, 248, 61, 42, 187, 219, 60, 142, 201, 105, 190, 45, 208, 134, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {143, 120, 17, 62, 52, 87, 99, 62, 28, 149, 176, 61, 37, 3, 57, 188, 214, 205, 188, 62, 188, 209, 223, 61, 239, 121, 113, 62, 127, 108, 244, 189, 44, 173, 55, 62, 148, 215, 206, 61, 21, 20, 167, 190, 119, 162, 48, 61, 0, 202, 229, 61, 126, 62, 24, 190, 222, 110, 147, 62, 251, 171, 219, 189, 90, 10, 92, 189, 181, 251, 40, 190, 114, 198, 68, 62, 31, 118, 161, 189, 40, 8, 86, 61, 252, 223, 45, 189, 191, 165, 107, 190, 138, 34, 219, 61, 158, 119, 217, 61, 194, 71, 212, 59, 240, 99, 211, 59, 110, 219, 186, 189, 169, 66, 33, 62, 12, 171, 79, 188, 112, 191, 25, 60, 40, 166, 242, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 155, 31, 190, 195, 207, 171, 190, 213, 176, 12, 191, 66, 127, 62, 62, 35, 224, 13, 188, 20, 58, 196, 189, 204, 88, 244, 190, 36, 27, 201, 187, 190, 90, 134, 191, 43, 174, 24, 191, 239, 247, 41, 63, 180, 52, 140, 190, 39, 51, 150, 191, 78, 240, 19, 191, 195, 132, 127, 62, 91, 116, 80, 62, 114, 221, 114, 190, 197, 30, 238, 62, 159, 8, 39, 191, 227, 240, 148, 62, 118, 170, 41, 189, 106, 218, 137, 190, 15, 1, 86, 63, 33, 10, 185, 61, 79, 101, 58, 191, 209, 11, 60, 63, 111, 251, 195, 62, 33, 248, 74, 190, 125, 3, 14, 189, 4, 60, 239, 62, 93, 171, 111, 63, 199, 34, 168, 62, 42, 176, 121, 190, 110, 197, 106, 190, 192, 43, 164, 62, 45, 181, 72, 190, 203, 255, 175, 190, 149, 181, 192, 61, 48, 221, 226, 62, 183, 107, 5, 62, 135, 15, 5, 61, 139, 40, 161, 62, 68, 52, 198, 61, 94, 103, 198, 61, 129, 29, 23, 61, 128, 183, 176, 62, 158, 217, 58, 190, 18, 92, 61, 189, 235, 181, 107, 190, 200, 220, 205, 188, 168, 193, 143, 190, 144, 37, 17, 63, 142, 105, 106, 188, 165, 253, 25, 190, 117, 82, 47, 63, 214, 142, 141, 190, 97, 4, 57, 62, 229, 73, 191, 61, 179, 45, 151, 61, 73, 102, 125, 190, 101, 231, 79, 190, 109, 227, 9, 61, 66, 25, 51, 62, 47, 88, 78, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {231, 58, 94, 189, 240, 61, 175, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {239, 52, 175, 63, 189, 88, 115, 63, 43, 126, 20, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {163, 46, 131, 192, 92, 19, 135, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0030/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}