// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 110, 38, 191, 141, 42, 61, 191, 215, 4, 14, 191, 38, 214, 128, 62, 51, 27, 228, 61, 126, 72, 11, 191, 80, 166, 170, 62, 207, 213, 2, 63, 135, 136, 13, 191, 151, 97, 188, 190, 80, 255, 7, 63, 140, 54, 250, 189, 23, 136, 20, 189, 142, 60, 58, 63, 45, 159, 27, 191, 89, 20, 139, 62, 100, 12, 52, 63, 69, 48, 230, 62, 196, 230, 157, 190, 57, 114, 69, 62, 154, 21, 45, 191, 46, 39, 51, 63, 66, 0, 245, 190, 82, 31, 141, 62, 241, 215, 159, 190, 92, 59, 42, 63, 232, 5, 232, 190, 181, 35, 58, 62, 17, 70, 6, 63, 246, 1, 147, 190, 95, 190, 180, 190, 252, 199, 255, 190, 96, 23, 215, 189, 126, 192, 199, 190, 115, 3, 8, 191, 57, 178, 137, 190, 216, 23, 35, 63, 75, 68, 104, 63, 200, 224, 143, 62, 247, 207, 7, 63, 152, 243, 144, 191, 21, 76, 135, 190, 43, 29, 59, 63, 209, 157, 113, 190, 208, 196, 194, 62, 251, 230, 172, 62, 6, 157, 41, 191, 137, 143, 233, 62, 24, 200, 64, 62, 61, 111, 213, 190, 26, 137, 20, 63, 58, 86, 172, 190, 47, 25, 159, 63, 129, 132, 11, 63, 245, 254, 14, 191, 241, 209, 174, 187, 89, 1, 237, 60, 181, 71, 212, 62, 36, 137, 251, 62, 85, 188, 226, 62, 212, 215, 35, 63, 26, 173, 14, 191, 46, 11, 156, 189, 41, 115, 54, 62, 248, 134, 23, 63, 191, 42, 80, 189, 38, 203, 154, 60, 120, 70, 58, 191, 20, 167, 189, 189, 150, 126, 79, 63, 6, 165, 95, 191, 115, 8, 147, 189, 56, 83, 22, 191, 23, 54, 100, 62, 36, 112, 240, 62, 131, 248, 156, 62, 84, 126, 58, 63, 168, 126, 29, 62, 243, 90, 167, 62, 72, 161, 22, 63, 151, 19, 14, 191, 96, 89, 13, 190, 190, 131, 116, 191, 34, 94, 168, 190, 99, 226, 244, 62, 153, 1, 57, 191, 170, 65, 238, 190, 107, 184, 63, 62, 200, 221, 194, 191, 172, 50, 147, 190, 245, 202, 154, 62, 236, 246, 136, 63, 173, 36, 227, 62, 13, 155, 16, 191, 241, 152, 9, 191, 94, 165, 217, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {189, 84, 247, 190, 94, 220, 41, 62, 148, 49, 237, 60, 64, 246, 168, 62, 122, 189, 161, 189, 97, 145, 198, 62, 67, 201, 192, 190, 116, 114, 133, 62, 4, 173, 113, 188, 252, 247, 67, 61, 189, 27, 165, 62, 240, 59, 143, 190, 134, 51, 97, 190, 160, 94, 37, 190, 211, 183, 245, 190, 185, 226, 251, 190, 254, 84, 87, 190, 103, 49, 104, 190, 210, 32, 196, 62, 4, 222, 239, 190, 152, 196, 202, 61, 188, 42, 19, 63, 73, 84, 13, 63, 232, 68, 165, 62, 83, 96, 63, 62, 164, 108, 229, 61, 75, 167, 63, 62, 27, 68, 171, 60, 84, 88, 1, 191, 43, 155, 6, 63, 43, 202, 187, 62, 93, 222, 37, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {220, 153, 147, 62, 1, 21, 210, 188, 107, 210, 228, 188, 225, 69, 156, 61, 141, 41, 29, 189, 3, 136, 46, 62, 68, 243, 181, 189, 165, 77, 35, 61, 61, 122, 4, 189, 34, 135, 210, 61, 120, 23, 136, 190, 124, 104, 73, 61, 99, 89, 30, 62, 162, 17, 222, 190, 165, 144, 158, 60, 163, 105, 56, 189, 188, 170, 98, 59, 15, 174, 129, 189, 194, 52, 171, 189, 130, 91, 238, 61, 211, 191, 249, 189, 22, 50, 185, 61, 224, 91, 6, 62, 55, 70, 11, 62, 146, 104, 12, 190, 181, 239, 147, 62, 44, 0, 31, 62, 65, 242, 60, 62, 28, 76, 149, 190, 24, 200, 29, 190, 82, 49, 31, 62, 73, 198, 106, 189, 250, 26, 156, 60, 62, 229, 28, 190, 82, 241, 188, 61, 67, 195, 66, 62, 196, 237, 63, 189, 6, 184, 179, 189, 235, 13, 3, 61, 170, 135, 123, 61, 55, 86, 96, 190, 24, 203, 200, 61, 40, 30, 50, 62, 33, 62, 119, 189, 153, 238, 41, 62, 198, 182, 150, 190, 110, 244, 192, 62, 79, 68, 41, 190, 46, 204, 216, 190, 199, 20, 57, 191, 177, 118, 9, 62, 43, 234, 135, 190, 115, 155, 141, 190, 249, 246, 141, 62, 230, 197, 113, 189, 14, 129, 34, 189, 176, 91, 186, 190, 152, 166, 244, 61, 99, 7, 27, 62, 81, 142, 249, 61, 213, 18, 65, 190, 138, 103, 244, 61, 224, 245, 237, 188, 12, 177, 147, 189, 96, 165, 215, 61, 176, 59, 36, 190, 11, 69, 143, 187, 31, 6, 60, 62, 214, 70, 31, 62, 232, 233, 192, 189, 76, 77, 136, 61, 126, 88, 82, 188, 122, 130, 26, 190, 177, 29, 119, 62, 190, 226, 108, 61, 227, 228, 103, 62, 160, 95, 206, 62, 119, 220, 235, 190, 231, 142, 91, 62, 4, 227, 19, 62, 255, 50, 131, 190, 60, 21, 36, 190, 190, 204, 218, 186, 254, 71, 168, 62, 67, 72, 151, 190, 1, 22, 176, 62, 246, 99, 30, 61, 149, 204, 143, 60, 203, 49, 19, 190, 221, 46, 183, 62, 127, 94, 240, 60, 170, 99, 214, 59, 209, 147, 228, 190, 75, 220, 77, 190, 19, 175, 58, 190, 241, 173, 35, 189, 234, 227, 167, 189, 141, 218, 12, 60, 134, 242, 226, 61, 73, 223, 229, 61, 36, 74, 64, 62, 239, 49, 109, 190, 71, 181, 141, 62, 174, 16, 4, 58, 209, 180, 160, 61, 247, 65, 115, 62, 162, 40, 34, 62, 106, 108, 117, 62, 20, 61, 245, 61, 48, 225, 210, 61, 238, 182, 229, 61, 42, 252, 4, 190, 45, 4, 39, 191, 41, 38, 116, 190, 151, 140, 133, 62, 42, 233, 196, 62, 50, 247, 95, 62, 2, 213, 231, 61, 107, 163, 224, 189, 2, 206, 69, 61, 252, 189, 172, 190, 80, 137, 138, 62, 236, 77, 117, 62, 154, 241, 85, 62, 105, 23, 211, 189, 177, 138, 137, 189, 216, 123, 138, 189, 245, 167, 13, 62, 130, 22, 231, 61, 167, 124, 41, 62, 110, 209, 254, 187, 215, 217, 54, 61, 84, 9, 175, 188, 38, 25, 250, 61, 180, 105, 190, 61, 145, 132, 113, 62, 181, 118, 85, 190, 76, 141, 18, 61, 18, 171, 198, 189, 191, 150, 169, 189, 246, 31, 53, 189, 211, 95, 57, 190, 0, 252, 156, 61, 98, 155, 105, 190, 175, 172, 235, 189, 133, 9, 21, 190, 233, 144, 231, 60, 186, 74, 111, 190, 232, 202, 209, 61, 129, 141, 195, 62, 125, 42, 31, 62, 254, 10, 67, 62, 215, 172, 14, 189, 36, 95, 207, 59, 187, 16, 177, 187, 133, 32, 222, 186, 189, 73, 100, 190, 66, 2, 213, 61, 104, 98, 105, 62, 107, 65, 224, 188, 135, 70, 171, 189, 129, 136, 12, 190, 179, 223, 192, 61, 96, 219, 168, 60, 129, 196, 125, 187, 220, 92, 136, 60, 3, 169, 237, 59, 250, 190, 188, 189, 29, 82, 169, 61, 151, 206, 55, 60, 100, 60, 139, 61, 100, 35, 242, 60, 226, 123, 12, 190, 14, 76, 15, 62, 105, 25, 141, 61, 234, 135, 75, 61, 94, 50, 23, 61, 182, 10, 164, 189, 183, 137, 13, 190, 5, 135, 220, 189, 228, 255, 226, 189, 140, 134, 23, 61, 144, 208, 110, 189, 57, 140, 63, 190, 200, 16, 87, 190, 228, 181, 77, 188, 221, 195, 4, 190, 252, 184, 213, 189, 62, 208, 21, 62, 201, 192, 177, 61, 73, 144, 236, 189, 28, 76, 92, 189, 41, 136, 198, 61, 60, 51, 152, 190, 206, 27, 222, 189, 227, 195, 31, 187, 152, 90, 6, 62, 231, 230, 104, 190, 212, 99, 36, 61, 29, 26, 172, 189, 90, 0, 222, 190, 212, 230, 183, 62, 56, 129, 138, 189, 248, 196, 8, 62, 90, 51, 122, 62, 94, 215, 213, 189, 237, 158, 13, 62, 200, 234, 223, 61, 176, 69, 16, 190, 76, 74, 151, 190, 133, 226, 214, 188, 227, 1, 139, 189, 221, 229, 224, 190, 41, 103, 208, 62, 54, 24, 156, 189, 13, 57, 208, 190, 220, 180, 210, 189, 172, 80, 150, 62, 114, 164, 118, 62, 17, 52, 192, 61, 224, 119, 113, 190, 214, 204, 31, 62, 162, 2, 5, 190, 83, 49, 202, 61, 19, 115, 149, 61, 60, 158, 83, 188, 190, 253, 57, 57, 166, 22, 21, 62, 246, 194, 27, 62, 239, 221, 246, 188, 24, 38, 170, 189, 35, 155, 41, 190, 103, 97, 87, 61, 198, 215, 243, 189, 65, 177, 170, 59, 232, 145, 6, 190, 191, 149, 153, 189, 44, 169, 133, 61, 185, 125, 32, 62, 20, 64, 8, 62, 126, 218, 17, 62, 199, 26, 194, 186, 98, 22, 33, 190, 53, 147, 172, 189, 91, 252, 171, 61, 42, 64, 10, 60, 205, 26, 44, 61, 19, 161, 60, 189, 15, 41, 168, 189, 4, 78, 15, 190, 139, 112, 65, 189, 8, 199, 2, 188, 237, 235, 32, 190, 97, 44, 52, 190, 183, 104, 192, 189, 222, 92, 16, 190, 172, 204, 34, 61, 33, 63, 127, 190, 67, 207, 66, 190, 66, 88, 157, 188, 88, 243, 155, 62, 115, 210, 251, 190, 62, 145, 55, 62, 161, 89, 172, 189, 211, 192, 39, 190, 51, 160, 247, 61, 190, 129, 156, 62, 14, 220, 138, 62, 233, 236, 29, 191, 238, 104, 186, 190, 202, 134, 179, 60, 234, 91, 46, 62, 242, 56, 167, 190, 150, 189, 171, 191, 228, 237, 1, 61, 213, 19, 22, 190, 17, 218, 42, 191, 153, 84, 46, 62, 231, 231, 61, 62, 136, 180, 249, 190, 163, 116, 10, 62, 238, 123, 230, 187, 36, 72, 124, 60, 38, 0, 10, 62, 237, 73, 1, 190, 18, 227, 156, 60, 73, 230, 177, 191, 171, 190, 147, 62, 203, 96, 221, 61, 142, 61, 190, 59, 121, 18, 70, 61, 180, 251, 70, 62, 36, 172, 45, 188, 233, 244, 79, 190, 70, 70, 231, 61, 135, 69, 160, 61, 58, 248, 112, 189, 0, 31, 163, 60, 104, 235, 151, 61, 91, 152, 43, 62, 215, 224, 64, 62, 17, 158, 234, 190, 91, 246, 165, 61, 194, 102, 110, 62, 135, 11, 178, 189, 254, 163, 179, 190, 79, 10, 69, 189, 107, 156, 78, 61, 46, 106, 230, 190, 20, 128, 108, 62, 139, 233, 41, 62, 133, 162, 157, 190, 233, 157, 222, 60, 82, 225, 233, 62, 228, 40, 37, 189, 92, 49, 189, 61, 37, 115, 254, 190, 242, 5, 172, 62, 78, 173, 183, 190, 213, 143, 27, 190, 72, 123, 14, 188, 132, 156, 108, 189, 219, 159, 88, 62, 13, 229, 134, 190, 255, 7, 33, 61, 182, 89, 190, 187, 186, 192, 69, 190, 173, 31, 184, 189, 189, 187, 166, 61, 188, 228, 235, 61, 102, 247, 2, 189, 116, 164, 251, 61, 61, 211, 153, 62, 205, 55, 239, 186, 58, 166, 77, 62, 19, 158, 16, 62, 140, 146, 172, 189, 121, 213, 68, 59, 114, 13, 37, 191, 83, 189, 47, 62, 215, 76, 93, 189, 122, 186, 201, 59, 148, 86, 25, 191, 189, 5, 95, 189, 101, 170, 209, 189, 246, 151, 18, 189, 46, 31, 126, 62, 156, 62, 98, 62, 214, 142, 37, 62, 210, 21, 152, 190, 16, 111, 12, 62, 151, 180, 182, 190, 86, 176, 253, 62, 221, 103, 128, 190, 49, 149, 189, 189, 180, 37, 14, 62, 176, 33, 27, 62, 68, 249, 32, 62, 3, 236, 8, 61, 116, 240, 113, 189, 71, 102, 144, 190, 122, 158, 204, 62, 52, 192, 224, 188, 210, 159, 73, 62, 26, 180, 102, 62, 209, 143, 72, 190, 160, 248, 133, 60, 86, 175, 104, 62, 183, 53, 8, 190, 52, 211, 248, 188, 42, 74, 50, 60, 174, 32, 57, 62, 6, 167, 205, 189, 144, 119, 113, 62, 168, 204, 197, 189, 209, 70, 212, 61, 24, 77, 207, 189, 131, 186, 176, 62, 161, 52, 74, 62, 184, 183, 101, 62, 176, 250, 189, 189, 144, 205, 177, 189, 183, 143, 37, 62, 255, 235, 160, 190, 29, 70, 48, 62, 179, 220, 105, 190, 11, 139, 165, 190, 212, 193, 66, 62, 68, 226, 87, 189, 241, 243, 170, 190, 157, 71, 190, 60, 241, 246, 221, 190, 213, 244, 222, 190, 213, 31, 142, 62, 72, 234, 135, 62, 186, 124, 78, 62, 15, 171, 31, 190, 18, 114, 34, 190, 84, 65, 42, 62, 202, 248, 252, 60, 88, 49, 71, 191, 125, 251, 158, 191, 37, 107, 158, 61, 34, 4, 99, 189, 78, 53, 19, 191, 54, 99, 99, 190, 183, 69, 103, 62, 193, 67, 2, 191, 49, 73, 251, 60, 190, 169, 136, 60, 170, 71, 212, 61, 43, 203, 50, 189, 119, 215, 49, 61, 173, 44, 88, 62, 239, 10, 163, 191, 23, 139, 116, 62, 157, 140, 25, 189, 245, 167, 231, 188, 253, 222, 177, 60, 152, 135, 41, 190, 62, 85, 60, 61, 26, 235, 39, 62, 160, 77, 195, 189, 210, 52, 140, 61, 204, 10, 241, 61, 54, 56, 108, 189, 239, 85, 90, 61, 109, 175, 161, 61, 177, 142, 155, 60, 146, 206, 71, 190, 51, 198, 251, 189, 9, 193, 251, 61, 88, 104, 165, 187, 201, 22, 196, 189, 227, 231, 244, 189, 198, 39, 65, 61, 68, 156, 205, 189, 226, 171, 12, 190, 53, 131, 249, 189, 163, 194, 139, 60, 73, 80, 246, 189, 139, 158, 227, 61, 192, 50, 3, 62, 161, 194, 14, 190, 73, 123, 11, 61, 141, 27, 182, 189, 47, 57, 160, 189, 101, 198, 133, 61, 97, 245, 228, 59, 83, 106, 14, 189, 150, 160, 211, 61, 104, 0, 91, 61, 54, 238, 188, 61, 9, 188, 128, 60, 22, 93, 30, 190, 247, 116, 140, 62, 133, 185, 152, 60, 163, 64, 189, 189, 71, 76, 150, 60, 144, 193, 37, 189, 239, 129, 151, 190, 176, 19, 153, 62, 41, 213, 164, 190, 212, 209, 88, 60, 33, 39, 8, 62, 42, 254, 61, 189, 251, 5, 32, 62, 210, 140, 10, 190, 83, 212, 142, 62, 89, 51, 231, 60, 199, 234, 148, 61, 116, 112, 0, 187, 12, 177, 208, 61, 109, 162, 212, 190, 113, 20, 158, 189, 184, 84, 66, 189, 203, 32, 65, 61, 235, 107, 49, 62, 57, 25, 125, 189, 85, 67, 97, 62, 5, 181, 193, 190, 137, 217, 210, 62, 178, 26, 26, 62, 236, 117, 70, 190, 63, 45, 193, 189, 35, 119, 46, 189, 48, 197, 223, 190, 37, 19, 131, 62, 67, 114, 166, 189, 27, 212, 89, 189, 169, 43, 43, 189, 118, 22, 131, 190, 66, 123, 42, 190, 43, 188, 161, 62, 70, 150, 63, 189, 254, 94, 95, 189, 112, 224, 26, 62, 157, 214, 16, 62, 85, 1, 53, 190, 141, 34, 25, 61, 63, 4, 101, 61, 161, 95, 197, 57, 242, 127, 61, 62, 171, 201, 60, 62, 82, 202, 33, 62, 57, 219, 74, 190, 98, 55, 231, 58, 58, 246, 228, 189, 87, 18, 5, 189, 148, 226, 168, 61, 88, 5, 57, 61, 143, 156, 18, 62, 95, 10, 184, 189, 200, 105, 41, 59, 176, 73, 24, 62, 106, 181, 173, 190, 79, 48, 185, 61, 99, 158, 52, 62, 30, 7, 241, 60, 149, 125, 92, 62, 22, 175, 93, 62, 73, 241, 41, 62, 209, 74, 204, 190, 209, 219, 176, 190, 63, 75, 40, 61, 24, 16, 205, 190, 169, 9, 174, 61, 220, 53, 211, 60, 98, 174, 155, 189, 145, 202, 1, 190, 238, 181, 61, 190, 70, 19, 151, 189, 40, 131, 62, 62, 245, 164, 9, 59, 215, 204, 229, 60, 138, 191, 175, 61, 105, 24, 132, 61, 233, 30, 155, 62, 174, 221, 36, 189, 111, 148, 165, 189, 119, 27, 53, 190, 124, 125, 16, 190, 23, 123, 238, 61, 127, 34, 229, 190, 149, 246, 225, 190, 225, 27, 4, 190, 176, 68, 136, 189, 184, 48, 135, 60, 252, 140, 30, 190, 78, 16, 186, 187, 241, 156, 138, 190, 211, 207, 237, 61, 7, 85, 33, 190, 161, 5, 189, 190, 234, 27, 34, 62, 36, 246, 213, 190, 79, 234, 244, 189, 26, 49, 158, 62, 230, 85, 244, 189, 97, 224, 216, 60, 146, 238, 20, 61, 144, 237, 184, 60, 109, 57, 172, 189, 113, 103, 13, 62, 8, 75, 182, 60, 227, 227, 236, 189, 63, 37, 221, 61, 6, 169, 39, 190, 10, 137, 181, 60, 30, 35, 245, 189, 92, 105, 22, 189, 37, 136, 181, 190, 149, 185, 20, 62, 218, 58, 47, 62, 249, 42, 52, 62, 174, 216, 7, 62, 232, 89, 124, 189, 75, 205, 36, 61, 124, 16, 157, 62, 119, 101, 56, 190, 20, 70, 190, 189, 35, 37, 35, 62, 112, 200, 92, 190, 236, 72, 48, 62, 59, 0, 28, 189, 131, 31, 171, 62, 59, 144, 103, 191, 64, 28, 126, 189, 190, 160, 19, 62, 245, 116, 36, 191, 64, 68, 119, 61, 237, 189, 51, 62, 135, 4, 45, 59, 145, 198, 201, 189, 151, 207, 43, 191, 219, 243, 47, 189, 59, 23, 41, 62, 42, 249, 253, 61, 207, 46, 40, 190, 154, 28, 92, 62, 194, 103, 131, 61, 209, 177, 147, 62, 14, 100, 171, 61, 77, 241, 88, 190, 68, 151, 214, 190, 242, 168, 194, 189, 234, 2, 197, 61, 134, 192, 55, 191, 80, 131, 89, 189, 252, 148, 220, 61, 84, 168, 14, 62, 28, 34, 253, 189, 12, 126, 187, 189, 207, 251, 203, 190, 20, 125, 131, 189, 219, 131, 154, 189, 78, 101, 156, 188, 13, 146, 29, 189, 89, 39, 29, 190, 190, 133, 67, 190, 128, 130, 10, 191, 172, 206, 73, 62, 212, 80, 255, 186, 107, 67, 137, 62, 59, 250, 142, 61, 35, 112, 44, 190, 140, 202, 105, 190, 27, 35, 132, 190, 150, 56, 217, 62, 0, 17, 147, 190, 15, 92, 21, 187, 131, 34, 219, 62, 143, 67, 189, 189, 175, 129, 148, 190, 121, 64, 229, 60, 40, 156, 118, 60, 71, 183, 51, 62, 64, 78, 61, 62, 51, 14, 158, 190, 35, 181, 45, 190, 30, 132, 25, 190, 186, 204, 20, 189, 89, 167, 134, 61, 75, 143, 7, 190, 182, 154, 133, 61, 81, 116, 13, 59, 226, 43, 221, 61, 0, 97, 246, 61, 180, 152, 5, 190, 62, 57, 65, 61, 146, 116, 15, 62, 222, 163, 3, 62, 88, 38, 227, 189, 241, 17, 62, 61, 35, 221, 6, 61, 227, 122, 36, 62, 161, 128, 222, 189, 167, 96, 29, 190, 187, 216, 14, 190, 107, 223, 147, 189, 105, 66, 34, 190, 111, 225, 84, 190, 159, 198, 4, 62, 226, 225, 3, 190, 62, 31, 142, 189, 233, 254, 72, 189, 101, 159, 167, 61, 159, 58, 90, 190, 162, 61, 250, 189, 0, 223, 3, 190, 37, 133, 168, 189, 60, 156, 68, 190, 219, 165, 182, 60, 24, 108, 59, 61, 79, 93, 16, 62, 110, 210, 8, 62, 249, 7, 103, 62, 154, 90, 13, 62, 172, 157, 34, 61, 235, 96, 211, 186, 108, 104, 5, 190, 43, 130, 75, 62, 15, 167, 215, 189, 182, 225, 48, 62, 144, 39, 250, 61, 147, 137, 198, 190, 28, 176, 86, 62, 168, 17, 12, 62, 249, 197, 16, 61, 58, 151, 77, 190, 174, 90, 145, 189, 176, 237, 121, 61, 150, 155, 43, 61, 216, 0, 93, 62, 204, 186, 18, 62, 234, 147, 66, 60, 44, 26, 165, 190, 239, 118, 244, 61, 228, 96, 109, 61, 147, 109, 142, 189, 160, 174, 142, 190, 118, 76, 27, 190, 156, 61, 158, 61, 164, 100, 40, 190, 105, 243, 247, 189, 156, 186, 152, 188, 251, 195, 136, 189, 98, 104, 59, 60, 174, 197, 89, 188, 174, 11, 24, 62, 248, 220, 140, 61, 92, 157, 169, 188, 77, 214, 109, 189, 113, 31, 190, 187, 211, 55, 132, 190, 108, 207, 36, 190, 165, 155, 104, 62, 252, 108, 14, 190, 57, 39, 175, 62, 78, 253, 103, 62, 144, 129, 71, 190, 24, 116, 98, 190, 22, 129, 96, 191, 58, 64, 6, 62, 13, 121, 82, 61, 16, 109, 112, 61, 45, 171, 22, 191, 226, 200, 249, 189, 192, 238, 35, 190, 123, 218, 103, 62, 193, 93, 226, 61, 81, 195, 217, 189, 127, 123, 107, 187, 32, 199, 197, 189, 116, 96, 16, 62, 231, 163, 210, 190, 65, 80, 125, 190, 23, 214, 28, 61, 218, 35, 221, 60, 215, 151, 194, 188, 183, 234, 109, 190, 159, 8, 201, 61, 139, 213, 217, 188, 56, 50, 151, 61, 203, 88, 69, 60, 128, 236, 3, 61, 108, 191, 31, 189, 226, 67, 163, 190, 138, 200, 137, 190, 179, 250, 228, 189, 43, 144, 176, 188, 253, 144, 116, 190, 179, 96, 200, 190, 218, 252, 79, 190, 142, 108, 1, 190, 130, 58, 29, 190, 213, 42, 63, 62, 216, 38, 180, 62, 119, 208, 18, 61, 83, 213, 110, 62, 181, 26, 134, 188, 158, 193, 121, 190, 100, 240, 178, 61, 239, 16, 221, 190, 91, 37, 226, 190, 90, 7, 9, 62, 201, 188, 178, 61, 150, 80, 94, 189, 191, 42, 194, 190, 146, 255, 255, 61, 208, 172, 100, 62, 178, 22, 29, 189, 232, 155, 121, 61, 190, 0, 69, 190, 118, 161, 13, 189, 48, 38, 177, 189, 164, 221, 60, 62, 201, 162, 60, 62, 108, 243, 77, 61, 246, 80, 60, 190, 212, 72, 88, 188, 213, 221, 11, 191, 155, 87, 249, 189, 208, 141, 245, 188, 162, 204, 154, 60, 14, 205, 237, 61, 182, 158, 208, 189, 61, 54, 155, 190, 12, 210, 222, 189, 111, 93, 81, 62, 154, 6, 7, 190, 1, 38, 86, 190, 212, 27, 130, 190, 108, 216, 99, 62, 72, 171, 207, 189, 46, 188, 139, 61, 20, 120, 150, 190, 53, 138, 10, 190, 162, 58, 206, 189, 119, 66, 98, 190, 139, 205, 89, 191, 51, 175, 148, 62, 159, 180, 138, 62, 117, 226, 91, 188, 220, 201, 169, 190, 20, 233, 30, 62, 76, 127, 166, 191, 251, 84, 203, 188, 53, 175, 173, 62, 164, 30, 209, 190, 152, 38, 113, 189, 212, 227, 190, 191, 90, 78, 182, 190, 93, 151, 128, 62, 53, 149, 25, 190, 209, 32, 136, 190, 191, 125, 109, 62, 55, 160, 147, 188, 253, 53, 187, 61, 202, 227, 111, 190, 169, 53, 138, 60, 103, 47, 44, 62, 224, 230, 116, 62, 189, 123, 196, 61, 103, 24, 12, 62, 95, 74, 189, 190, 2, 60, 49, 190, 27, 101, 65, 191, 171, 172, 51, 62, 199, 2, 82, 190, 16, 198, 54, 62, 182, 50, 22, 62, 240, 45, 37, 191, 207, 153, 221, 62, 0, 164, 200, 62, 236, 116, 97, 62, 25, 134, 25, 62, 111, 148, 247, 61, 139, 169, 83, 191, 176, 57, 169, 188, 246, 82, 179, 62, 186, 163, 129, 190, 144, 44, 126, 62, 84, 171, 124, 191, 162, 184, 230, 189, 101, 49, 93, 62, 22, 75, 141, 189, 241, 24, 162, 61, 91, 24, 148, 60, 240, 150, 76, 60, 205, 118, 27, 190, 186, 173, 83, 190, 92, 69, 86, 62, 57, 212, 35, 62, 248, 82, 137, 188, 7, 174, 131, 62, 95, 202, 241, 61, 197, 70, 150, 190, 152, 207, 132, 190, 146, 55, 162, 190, 74, 68, 189, 62, 66, 72, 245, 189, 80, 254, 28, 62, 65, 101, 157, 61, 244, 67, 106, 61, 151, 65, 60, 190, 5, 31, 71, 62, 153, 188, 192, 190, 11, 36, 194, 190, 74, 21, 30, 61, 158, 123, 188, 187, 174, 189, 134, 62, 187, 118, 204, 190, 247, 191, 228, 61, 13, 151, 227, 190, 102, 69, 207, 189, 232, 82, 95, 62, 27, 104, 133, 190, 192, 47, 133, 61, 205, 241, 167, 189, 94, 238, 15, 190, 79, 109, 29, 189, 203, 210, 202, 190, 135, 127, 0, 61, 153, 102, 168, 62, 51, 75, 194, 61, 160, 65, 105, 60, 182, 15, 47, 62, 175, 104, 13, 62, 77, 176, 221, 61, 83, 220, 97, 189, 222, 2, 42, 191, 115, 66, 253, 190, 165, 53, 132, 188, 31, 69, 83, 62, 171, 215, 147, 190, 130, 43, 52, 62, 87, 108, 4, 190, 31, 236, 164, 189, 168, 172, 144, 188, 161, 151, 214, 61, 221, 193, 56, 62, 126, 186, 65, 62, 60, 39, 98, 61, 3, 237, 83, 190, 225, 21, 221, 61, 50, 5, 33, 189, 87, 240, 90, 61, 57, 177, 236, 61, 238, 107, 154, 190, 34, 8, 228, 60, 125, 196, 3, 62, 18, 152, 163, 61, 65, 220, 7, 60, 42, 46, 9, 62, 16, 81, 31, 190, 66, 249, 63, 62, 138, 42, 12, 62, 109, 177, 124, 62, 234, 164, 20, 62, 56, 145, 13, 190, 101, 112, 187, 60, 19, 86, 59, 188, 173, 41, 160, 61, 74, 106, 135, 190, 181, 128, 1, 62, 83, 208, 89, 189, 249, 69, 57, 190, 78, 33, 132, 189, 214, 13, 108, 189, 191, 182, 66, 62, 140, 163, 53, 62, 198, 125, 34, 190, 39, 56, 134, 189, 110, 229, 76, 61, 229, 237, 109, 62, 57, 89, 141, 61, 252, 141, 13, 189, 107, 77, 134, 62, 92, 102, 35, 190, 164, 64, 243, 190, 143, 44, 161, 62, 182, 19, 81, 187, 143, 212, 155, 60, 149, 140, 134, 61, 214, 232, 215, 61, 99, 208, 113, 189, 20, 96, 148, 190, 61, 121, 18, 62, 196, 89, 154, 189, 168, 3, 152, 62, 24, 200, 95, 61, 116, 29, 59, 62, 86, 233, 217, 190, 109, 224, 234, 189, 251, 215, 35, 62, 162, 91, 97, 62, 248, 219, 150, 61, 126, 22, 30, 190, 249, 78, 104, 62, 125, 175, 38, 191, 54, 249, 95, 61, 105, 9, 137, 189, 4, 35, 223, 62, 46, 55, 172, 189, 131, 35, 104, 62, 55, 189, 140, 190, 21, 110, 80, 190, 216, 50, 200, 62, 180, 59, 248, 189, 198, 53, 54, 190, 114, 48, 19, 191, 109, 140, 137, 190, 117, 192, 107, 190, 102, 159, 210, 190, 125, 135, 180, 190, 192, 253, 13, 61, 41, 96, 79, 62, 167, 156, 231, 61, 240, 94, 146, 190, 245, 85, 15, 191, 100, 139, 174, 62, 18, 75, 62, 190, 169, 238, 228, 190, 190, 140, 145, 62, 169, 145, 68, 189, 215, 93, 142, 190, 21, 34, 55, 191, 252, 26, 111, 189, 218, 2, 45, 191, 76, 191, 252, 188, 191, 122, 227, 61, 205, 56, 144, 190, 165, 146, 184, 61, 95, 113, 132, 62, 132, 162, 21, 190, 158, 74, 220, 189, 111, 95, 239, 61, 51, 152, 89, 190, 32, 52, 86, 62, 29, 80, 209, 189, 104, 161, 23, 190, 17, 92, 16, 190, 35, 44, 200, 190, 193, 135, 134, 190, 32, 29, 59, 62, 222, 71, 85, 188, 65, 174, 128, 60, 147, 119, 143, 61, 63, 146, 69, 189, 158, 62, 55, 190, 191, 103, 188, 190, 24, 124, 136, 62, 132, 54, 69, 190, 66, 143, 77, 62, 159, 234, 167, 62, 45, 188, 81, 189, 44, 130, 164, 190, 173, 109, 60, 62, 37, 82, 143, 60, 160, 107, 199, 61, 224, 163, 35, 189, 53, 95, 25, 190, 28, 140, 245, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {118, 104, 9, 62, 81, 153, 84, 62, 208, 42, 237, 60, 241, 93, 0, 61, 177, 108, 191, 62, 188, 209, 223, 61, 6, 101, 58, 62, 127, 108, 244, 189, 210, 141, 219, 61, 160, 16, 4, 62, 149, 219, 44, 190, 113, 254, 207, 60, 72, 227, 245, 61, 176, 93, 28, 190, 113, 220, 163, 62, 129, 29, 211, 189, 168, 84, 88, 189, 51, 27, 93, 190, 255, 191, 61, 62, 59, 111, 252, 189, 116, 187, 120, 61, 204, 203, 117, 189, 34, 213, 137, 190, 155, 85, 45, 62, 102, 77, 185, 61, 203, 7, 222, 187, 239, 113, 79, 60, 21, 212, 129, 189, 220, 242, 45, 62, 54, 20, 9, 60, 152, 41, 30, 187, 0, 208, 209, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {244, 87, 17, 190, 181, 103, 171, 190, 75, 184, 191, 190, 248, 248, 135, 62, 76, 19, 131, 188, 20, 58, 196, 189, 7, 255, 174, 190, 36, 27, 201, 187, 175, 11, 88, 191, 194, 160, 193, 190, 120, 106, 201, 62, 142, 246, 166, 190, 49, 115, 136, 191, 47, 205, 167, 189, 19, 213, 105, 62, 154, 77, 71, 62, 148, 80, 18, 190, 75, 248, 81, 62, 238, 71, 4, 191, 229, 254, 8, 188, 125, 19, 1, 189, 164, 100, 42, 190, 48, 60, 10, 63, 192, 139, 239, 61, 6, 69, 244, 190, 19, 244, 49, 63, 212, 109, 192, 62, 233, 224, 15, 190, 99, 1, 173, 189, 41, 37, 132, 62, 76, 154, 103, 63, 65, 90, 134, 62, 157, 81, 0, 190, 6, 143, 119, 190, 187, 221, 173, 62, 19, 226, 47, 190, 89, 77, 201, 190, 149, 181, 192, 61, 247, 76, 123, 62, 183, 107, 5, 62, 184, 254, 112, 60, 246, 59, 123, 62, 84, 19, 96, 62, 44, 81, 64, 62, 40, 48, 213, 60, 250, 98, 168, 61, 75, 143, 19, 190, 191, 115, 150, 189, 207, 61, 201, 189, 205, 105, 248, 61, 75, 18, 35, 190, 81, 106, 216, 62, 136, 200, 75, 60, 123, 116, 210, 188, 128, 9, 39, 63, 236, 248, 203, 190, 188, 39, 168, 60, 57, 31, 169, 189, 244, 251, 116, 61, 56, 213, 63, 190, 17, 110, 135, 190, 189, 150, 67, 62, 190, 111, 253, 61, 80, 200, 176, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {147, 90, 68, 189, 89, 107, 149, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {4, 120, 122, 63, 107, 72, 127, 191, 249, 136, 23, 60};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {208, 55, 22, 64, 45, 131, 150, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0030/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}