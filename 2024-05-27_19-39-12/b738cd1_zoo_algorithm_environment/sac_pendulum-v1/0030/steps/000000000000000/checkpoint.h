// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {248, 174, 249, 190, 90, 72, 180, 189, 18, 161, 166, 190, 87, 28, 170, 62, 93, 213, 68, 189, 138, 142, 6, 191, 172, 141, 12, 63, 204, 184, 229, 62, 220, 90, 235, 190, 96, 49, 253, 190, 152, 1, 58, 62, 61, 132, 187, 189, 251, 131, 154, 190, 77, 35, 228, 62, 200, 248, 252, 190, 112, 92, 120, 190, 173, 232, 142, 190, 23, 25, 203, 62, 17, 88, 67, 190, 23, 118, 207, 62, 17, 25, 135, 190, 213, 15, 140, 62, 232, 145, 165, 190, 121, 131, 23, 62, 182, 68, 7, 189, 113, 82, 188, 62, 228, 252, 191, 190, 59, 131, 114, 189, 132, 87, 131, 62, 34, 85, 78, 190, 38, 163, 65, 189, 195, 162, 230, 189, 137, 152, 44, 190, 120, 223, 145, 190, 14, 201, 190, 61, 27, 47, 175, 189, 149, 254, 7, 61, 61, 129, 154, 62, 113, 22, 183, 62, 53, 42, 209, 60, 54, 123, 214, 190, 210, 253, 199, 190, 75, 135, 193, 62, 160, 246, 185, 190, 84, 45, 223, 62, 46, 201, 37, 62, 1, 79, 18, 191, 72, 149, 230, 62, 146, 200, 92, 190, 159, 132, 147, 190, 203, 225, 184, 62, 86, 198, 124, 190, 1, 89, 207, 60, 229, 115, 241, 62, 228, 248, 74, 190, 108, 14, 184, 189, 252, 162, 241, 189, 214, 203, 120, 61, 74, 230, 252, 61, 202, 126, 222, 62, 30, 102, 228, 62, 183, 67, 25, 188, 166, 175, 58, 190, 73, 228, 149, 60, 163, 239, 190, 62, 109, 86, 103, 188, 241, 83, 88, 61, 80, 49, 160, 190, 71, 58, 152, 187, 197, 69, 243, 62, 23, 125, 79, 190, 30, 84, 162, 190, 219, 68, 244, 190, 47, 189, 50, 190, 209, 5, 223, 62, 152, 198, 205, 59, 237, 153, 238, 62, 123, 46, 5, 61, 97, 213, 130, 62, 230, 115, 221, 62, 156, 130, 12, 191, 4, 216, 94, 189, 132, 96, 9, 62, 203, 23, 179, 190, 15, 115, 5, 62, 107, 83, 25, 190, 3, 147, 234, 190, 96, 92, 225, 61, 169, 94, 203, 190, 173, 4, 7, 191, 130, 108, 103, 60, 225, 160, 240, 190, 122, 214, 202, 62, 179, 127, 18, 191, 23, 95, 251, 190, 178, 109, 148, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {222, 186, 19, 191, 47, 79, 149, 60, 214, 153, 2, 191, 121, 171, 153, 62, 232, 176, 180, 62, 10, 173, 2, 63, 149, 238, 158, 190, 38, 27, 234, 62, 134, 44, 215, 190, 73, 48, 4, 62, 114, 16, 59, 62, 63, 23, 179, 190, 138, 133, 89, 189, 196, 133, 24, 190, 246, 25, 247, 190, 242, 184, 6, 191, 207, 38, 203, 61, 90, 18, 13, 190, 154, 188, 211, 61, 216, 223, 194, 190, 215, 242, 63, 62, 218, 189, 245, 62, 118, 213, 14, 63, 122, 135, 225, 62, 221, 73, 162, 62, 251, 244, 56, 62, 201, 219, 156, 62, 165, 173, 160, 61, 112, 8, 182, 190, 224, 216, 5, 63, 168, 153, 189, 62, 40, 248, 196, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 226, 248, 61, 207, 111, 152, 186, 140, 55, 207, 189, 214, 67, 104, 61, 138, 242, 8, 190, 98, 161, 38, 62, 0, 247, 45, 190, 57, 3, 58, 187, 22, 242, 212, 60, 216, 52, 215, 189, 15, 236, 207, 189, 75, 158, 149, 189, 221, 104, 42, 61, 74, 224, 187, 189, 224, 61, 6, 61, 113, 58, 203, 187, 241, 190, 120, 61, 152, 2, 22, 189, 5, 100, 137, 59, 224, 191, 228, 61, 75, 231, 0, 190, 142, 157, 38, 189, 146, 215, 212, 61, 93, 85, 19, 62, 87, 172, 222, 189, 155, 162, 15, 62, 245, 40, 42, 59, 251, 250, 26, 62, 251, 72, 225, 189, 76, 16, 166, 189, 183, 25, 15, 62, 24, 147, 132, 61, 16, 34, 28, 190, 208, 67, 144, 189, 227, 112, 9, 62, 245, 152, 35, 62, 174, 182, 201, 189, 151, 249, 12, 189, 178, 59, 57, 189, 47, 21, 159, 61, 173, 209, 28, 190, 183, 11, 130, 188, 228, 98, 1, 62, 123, 211, 42, 190, 131, 18, 215, 189, 75, 176, 124, 189, 106, 165, 249, 61, 35, 161, 225, 189, 111, 237, 160, 189, 123, 142, 11, 190, 238, 190, 242, 61, 87, 78, 45, 190, 74, 10, 25, 190, 207, 67, 10, 62, 164, 122, 216, 189, 161, 24, 122, 61, 149, 161, 28, 190, 166, 46, 234, 189, 167, 214, 183, 61, 17, 39, 135, 61, 79, 10, 30, 61, 28, 176, 133, 61, 207, 125, 34, 61, 255, 82, 97, 189, 20, 198, 118, 189, 24, 78, 48, 187, 125, 100, 38, 61, 136, 173, 44, 61, 139, 13, 190, 60, 243, 11, 77, 189, 198, 88, 194, 61, 187, 0, 19, 61, 66, 148, 251, 60, 104, 57, 32, 189, 124, 185, 41, 62, 207, 253, 103, 61, 205, 0, 34, 62, 55, 141, 212, 189, 46, 123, 242, 61, 195, 237, 8, 62, 94, 98, 236, 189, 42, 122, 76, 61, 201, 238, 48, 61, 28, 229, 33, 62, 214, 37, 228, 189, 86, 100, 233, 61, 180, 193, 17, 62, 13, 142, 50, 62, 183, 8, 5, 61, 125, 92, 63, 188, 58, 51, 163, 189, 233, 99, 70, 189, 178, 105, 45, 190, 84, 253, 10, 190, 174, 47, 248, 189, 126, 103, 143, 61, 176, 55, 227, 189, 47, 77, 244, 188, 169, 229, 247, 61, 43, 44, 3, 61, 176, 51, 3, 62, 247, 235, 133, 189, 23, 209, 38, 62, 187, 135, 118, 61, 241, 105, 131, 61, 53, 147, 236, 61, 12, 82, 208, 61, 168, 134, 36, 62, 232, 17, 123, 189, 224, 107, 62, 61, 99, 243, 22, 187, 50, 203, 50, 190, 12, 104, 130, 189, 241, 87, 165, 60, 249, 26, 43, 62, 232, 132, 189, 61, 157, 186, 130, 60, 215, 84, 14, 190, 79, 87, 46, 190, 118, 39, 43, 190, 28, 147, 43, 62, 158, 61, 137, 60, 126, 211, 14, 62, 129, 182, 34, 62, 62, 32, 248, 189, 189, 191, 17, 190, 212, 57, 70, 189, 11, 82, 27, 62, 54, 137, 137, 61, 25, 11, 28, 62, 12, 44, 68, 60, 212, 86, 133, 61, 5, 201, 193, 59, 161, 106, 59, 61, 16, 181, 45, 61, 209, 69, 149, 59, 148, 164, 33, 190, 208, 93, 196, 59, 228, 157, 54, 189, 63, 20, 22, 190, 54, 131, 95, 189, 179, 179, 119, 188, 237, 231, 220, 61, 35, 7, 23, 190, 227, 241, 144, 189, 234, 43, 18, 190, 204, 185, 178, 61, 220, 80, 48, 190, 112, 15, 88, 189, 21, 170, 33, 62, 212, 29, 228, 187, 253, 59, 190, 60, 25, 38, 0, 189, 30, 109, 195, 189, 128, 38, 100, 189, 121, 41, 62, 61, 169, 146, 193, 187, 107, 155, 129, 61, 9, 19, 13, 62, 27, 137, 54, 61, 164, 30, 187, 189, 177, 224, 252, 189, 211, 121, 218, 61, 67, 57, 127, 61, 132, 198, 220, 60, 14, 166, 71, 61, 163, 235, 241, 60, 12, 9, 102, 189, 179, 189, 184, 61, 55, 108, 69, 61, 7, 198, 180, 61, 177, 130, 129, 60, 137, 137, 39, 190, 20, 87, 10, 62, 105, 25, 141, 61, 234, 135, 75, 61, 209, 75, 74, 61, 50, 180, 137, 189, 8, 10, 238, 189, 169, 50, 197, 189, 64, 253, 202, 189, 191, 234, 211, 61, 49, 253, 189, 188, 52, 143, 48, 190, 207, 178, 36, 190, 58, 214, 113, 61, 48, 22, 209, 189, 104, 101, 172, 189, 40, 9, 20, 62, 217, 125, 214, 61, 152, 160, 220, 189, 12, 139, 38, 189, 114, 70, 194, 189, 62, 21, 31, 190, 101, 32, 80, 189, 244, 72, 44, 190, 96, 37, 5, 188, 43, 35, 229, 189, 140, 124, 255, 61, 206, 8, 183, 61, 202, 198, 44, 190, 74, 238, 100, 61, 113, 221, 213, 188, 67, 27, 92, 188, 188, 135, 6, 62, 116, 140, 235, 61, 168, 191, 39, 62, 33, 105, 28, 62, 69, 146, 251, 60, 193, 50, 98, 189, 237, 251, 153, 189, 54, 32, 158, 189, 209, 128, 0, 190, 193, 144, 41, 62, 110, 8, 164, 189, 5, 157, 41, 190, 153, 65, 59, 58, 247, 31, 122, 188, 175, 255, 198, 61, 251, 73, 236, 60, 240, 231, 106, 61, 170, 181, 197, 61, 157, 78, 101, 61, 107, 42, 212, 61, 19, 115, 149, 61, 60, 158, 83, 188, 190, 253, 57, 57, 153, 134, 28, 62, 246, 194, 27, 62, 81, 81, 135, 188, 24, 38, 170, 189, 49, 180, 26, 190, 103, 97, 87, 61, 198, 215, 243, 189, 65, 177, 170, 59, 232, 145, 6, 190, 81, 251, 117, 189, 44, 169, 133, 61, 102, 241, 46, 62, 142, 104, 22, 62, 110, 62, 32, 62, 59, 84, 79, 60, 98, 22, 33, 190, 72, 162, 142, 189, 91, 252, 171, 61, 229, 79, 191, 60, 163, 191, 110, 61, 19, 161, 60, 189, 57, 19, 140, 189, 214, 70, 5, 190, 139, 112, 65, 189, 8, 199, 2, 188, 237, 235, 32, 190, 97, 44, 52, 190, 129, 139, 164, 189, 126, 143, 255, 189, 201, 176, 219, 189, 76, 136, 6, 190, 211, 166, 26, 190, 22, 212, 26, 190, 119, 9, 4, 62, 70, 115, 23, 190, 213, 2, 138, 61, 80, 31, 38, 62, 24, 234, 194, 188, 131, 217, 200, 188, 152, 1, 49, 62, 182, 186, 143, 61, 183, 209, 136, 61, 2, 60, 149, 189, 93, 37, 41, 60, 28, 39, 167, 189, 148, 225, 38, 61, 114, 56, 152, 189, 69, 101, 204, 189, 107, 153, 253, 189, 152, 22, 34, 190, 118, 21, 247, 61, 152, 177, 154, 61, 233, 177, 224, 189, 174, 156, 41, 62, 45, 104, 183, 188, 139, 168, 211, 189, 113, 235, 198, 60, 61, 221, 225, 61, 216, 123, 237, 189, 52, 180, 9, 190, 215, 9, 247, 61, 10, 220, 3, 62, 63, 48, 249, 61, 44, 144, 187, 60, 112, 209, 20, 62, 186, 252, 10, 190, 155, 32, 169, 189, 44, 255, 203, 61, 209, 55, 7, 61, 4, 127, 227, 61, 246, 106, 34, 190, 138, 31, 115, 60, 108, 113, 20, 62, 206, 193, 147, 61, 48, 72, 232, 189, 179, 211, 2, 62, 81, 156, 19, 62, 21, 141, 31, 190, 67, 246, 51, 61, 112, 166, 15, 190, 87, 145, 215, 61, 251, 7, 236, 189, 33, 176, 243, 61, 153, 131, 13, 62, 33, 77, 39, 190, 253, 65, 243, 61, 211, 59, 18, 62, 134, 203, 2, 190, 164, 226, 216, 60, 208, 154, 29, 190, 248, 49, 46, 62, 84, 231, 215, 189, 102, 92, 42, 190, 123, 59, 250, 189, 43, 249, 213, 189, 37, 208, 242, 61, 128, 255, 237, 60, 229, 51, 229, 60, 152, 226, 106, 60, 52, 88, 50, 190, 31, 85, 237, 189, 171, 35, 61, 61, 160, 168, 36, 61, 123, 94, 165, 186, 102, 181, 10, 60, 84, 43, 37, 62, 38, 148, 225, 189, 179, 191, 129, 188, 39, 27, 232, 60, 166, 132, 32, 189, 251, 31, 167, 60, 22, 175, 137, 189, 89, 240, 66, 61, 37, 237, 24, 62, 102, 241, 240, 61, 56, 62, 236, 189, 93, 149, 23, 62, 241, 203, 81, 187, 250, 47, 129, 189, 160, 71, 255, 61, 35, 181, 36, 62, 47, 129, 184, 61, 232, 221, 253, 189, 188, 5, 248, 61, 2, 87, 0, 186, 26, 58, 238, 61, 97, 92, 5, 190, 12, 109, 104, 188, 161, 229, 6, 190, 101, 18, 255, 189, 164, 144, 6, 62, 94, 219, 171, 188, 12, 147, 194, 189, 164, 105, 11, 190, 193, 218, 178, 59, 182, 188, 41, 62, 59, 12, 185, 189, 218, 211, 185, 189, 151, 249, 0, 190, 217, 173, 28, 190, 130, 209, 35, 62, 111, 104, 6, 188, 123, 139, 252, 59, 113, 37, 7, 62, 208, 125, 220, 188, 186, 139, 49, 190, 87, 69, 179, 189, 159, 69, 111, 189, 51, 1, 163, 60, 32, 240, 16, 189, 23, 165, 48, 189, 138, 113, 25, 189, 94, 66, 110, 61, 83, 4, 138, 61, 218, 213, 18, 190, 31, 198, 27, 62, 29, 151, 43, 190, 248, 46, 150, 189, 69, 18, 211, 182, 30, 176, 216, 189, 153, 121, 234, 61, 87, 255, 37, 190, 252, 168, 66, 189, 158, 147, 135, 189, 115, 89, 139, 60, 112, 106, 5, 190, 156, 147, 20, 62, 255, 37, 18, 62, 218, 107, 231, 189, 39, 176, 245, 61, 65, 227, 132, 189, 155, 120, 39, 62, 155, 78, 35, 190, 255, 63, 173, 189, 123, 217, 20, 190, 8, 253, 215, 188, 111, 29, 2, 190, 186, 221, 0, 190, 106, 152, 9, 190, 233, 151, 9, 62, 193, 187, 42, 190, 107, 48, 2, 59, 84, 81, 29, 62, 97, 32, 140, 61, 173, 251, 30, 190, 224, 76, 50, 62, 49, 42, 198, 61, 152, 106, 199, 189, 8, 169, 162, 61, 159, 178, 137, 188, 234, 58, 134, 188, 95, 32, 219, 60, 161, 15, 28, 190, 152, 54, 80, 61, 38, 199, 46, 62, 114, 23, 178, 189, 57, 150, 150, 61, 110, 68, 3, 62, 78, 86, 88, 189, 162, 5, 169, 61, 121, 158, 197, 61, 33, 242, 162, 60, 66, 215, 31, 190, 223, 95, 236, 189, 129, 9, 5, 62, 125, 107, 129, 59, 129, 26, 179, 189, 34, 142, 203, 189, 231, 207, 97, 61, 10, 81, 194, 189, 55, 200, 16, 190, 176, 61, 181, 189, 141, 145, 24, 61, 30, 9, 231, 189, 251, 29, 211, 61, 28, 35, 5, 62, 244, 166, 249, 189, 53, 101, 120, 61, 85, 250, 121, 189, 99, 155, 140, 189, 127, 29, 207, 61, 194, 31, 197, 61, 221, 240, 28, 190, 219, 202, 216, 61, 71, 42, 18, 61, 212, 245, 3, 62, 47, 167, 228, 59, 246, 50, 208, 189, 54, 1, 4, 62, 178, 52, 245, 60, 177, 194, 8, 189, 90, 96, 156, 189, 31, 6, 183, 61, 94, 7, 202, 61, 251, 195, 21, 62, 20, 101, 17, 190, 129, 220, 219, 61, 209, 70, 243, 61, 172, 154, 101, 189, 16, 95, 187, 61, 26, 225, 137, 61, 132, 236, 16, 62, 131, 8, 113, 189, 26, 86, 11, 190, 166, 195, 31, 190, 145, 17, 166, 61, 126, 193, 202, 189, 142, 96, 209, 189, 111, 237, 219, 59, 177, 182, 157, 60, 141, 129, 142, 61, 3, 225, 148, 189, 134, 207, 202, 61, 199, 124, 190, 189, 177, 17, 46, 62, 37, 143, 91, 189, 78, 208, 104, 189, 31, 242, 94, 59, 39, 244, 204, 189, 76, 67, 221, 189, 141, 179, 63, 61, 154, 108, 90, 189, 62, 49, 127, 59, 170, 12, 27, 61, 175, 173, 43, 62, 98, 103, 65, 189, 133, 66, 14, 62, 192, 91, 103, 61, 210, 246, 16, 61, 94, 17, 26, 62, 111, 124, 235, 61, 186, 9, 111, 59, 75, 246, 12, 62, 86, 57, 249, 188, 25, 7, 161, 189, 209, 57, 208, 61, 230, 22, 186, 61, 119, 189, 29, 62, 113, 209, 142, 189, 149, 234, 95, 188, 57, 34, 230, 61, 173, 34, 164, 189, 9, 36, 92, 61, 50, 118, 1, 189, 31, 95, 50, 62, 172, 223, 140, 61, 34, 34, 8, 189, 12, 238, 182, 60, 144, 70, 44, 190, 76, 136, 20, 62, 60, 46, 255, 61, 207, 130, 92, 61, 162, 186, 149, 61, 140, 117, 35, 62, 212, 190, 217, 61, 47, 195, 160, 61, 146, 27, 33, 190, 34, 207, 71, 189, 190, 66, 158, 60, 114, 113, 6, 62, 93, 80, 205, 61, 204, 124, 241, 189, 8, 219, 226, 189, 66, 49, 229, 61, 90, 116, 217, 188, 228, 28, 64, 61, 243, 236, 7, 190, 252, 20, 21, 189, 1, 86, 156, 189, 79, 1, 138, 61, 93, 41, 232, 61, 251, 41, 98, 189, 11, 255, 133, 61, 223, 186, 194, 61, 107, 136, 170, 186, 110, 85, 90, 61, 136, 224, 176, 188, 9, 32, 206, 189, 12, 146, 51, 190, 173, 20, 174, 189, 61, 247, 220, 61, 9, 60, 41, 188, 158, 46, 21, 188, 33, 231, 96, 61, 161, 68, 129, 61, 108, 161, 45, 190, 175, 25, 49, 190, 255, 182, 28, 62, 19, 213, 149, 61, 77, 214, 90, 189, 243, 157, 158, 61, 5, 4, 177, 189, 7, 217, 130, 61, 40, 237, 135, 61, 228, 60, 204, 60, 80, 124, 121, 61, 181, 68, 46, 62, 133, 252, 16, 61, 2, 213, 228, 189, 206, 67, 31, 62, 4, 148, 21, 190, 228, 246, 15, 61, 68, 116, 128, 189, 227, 175, 6, 62, 169, 98, 14, 190, 93, 157, 141, 59, 98, 230, 32, 62, 83, 105, 50, 62, 158, 189, 28, 62, 230, 122, 21, 190, 71, 143, 250, 189, 254, 194, 26, 61, 43, 147, 65, 61, 44, 151, 19, 190, 61, 35, 7, 62, 10, 89, 44, 190, 121, 60, 174, 60, 8, 72, 220, 60, 68, 184, 196, 61, 139, 169, 132, 61, 154, 114, 220, 61, 252, 200, 158, 188, 233, 237, 21, 190, 21, 163, 146, 189, 51, 125, 230, 61, 151, 33, 252, 59, 42, 80, 164, 189, 129, 43, 33, 60, 55, 82, 7, 190, 162, 254, 123, 188, 47, 130, 89, 189, 70, 237, 2, 190, 56, 160, 132, 188, 222, 112, 11, 62, 212, 240, 212, 61, 98, 110, 219, 189, 19, 242, 253, 189, 23, 242, 47, 190, 174, 54, 80, 60, 195, 77, 48, 61, 117, 145, 84, 61, 89, 21, 153, 61, 33, 130, 225, 61, 254, 179, 20, 62, 1, 74, 200, 61, 138, 227, 52, 60, 88, 216, 103, 189, 243, 11, 182, 61, 227, 82, 18, 190, 63, 197, 129, 61, 85, 176, 131, 61, 208, 182, 210, 189, 45, 60, 159, 187, 121, 183, 15, 187, 135, 122, 178, 189, 229, 10, 162, 61, 198, 137, 194, 61, 64, 35, 37, 190, 12, 131, 161, 189, 221, 21, 141, 60, 97, 194, 213, 189, 171, 81, 219, 61, 89, 37, 183, 189, 228, 101, 32, 189, 125, 190, 35, 62, 89, 196, 42, 190, 99, 210, 33, 62, 71, 142, 209, 61, 178, 157, 55, 61, 104, 27, 129, 59, 84, 101, 216, 61, 31, 72, 24, 189, 53, 198, 254, 189, 52, 94, 224, 189, 64, 109, 168, 60, 206, 238, 3, 62, 154, 65, 183, 189, 104, 9, 237, 61, 126, 248, 196, 58, 23, 124, 30, 62, 200, 121, 6, 62, 62, 170, 148, 189, 210, 231, 177, 61, 118, 110, 43, 62, 118, 73, 17, 62, 64, 112, 225, 189, 98, 65, 152, 61, 173, 226, 6, 61, 227, 122, 36, 62, 96, 126, 222, 189, 221, 186, 29, 190, 127, 216, 239, 189, 107, 223, 147, 189, 186, 198, 3, 190, 237, 89, 45, 190, 70, 60, 44, 62, 193, 53, 200, 189, 122, 178, 141, 189, 188, 116, 224, 187, 249, 32, 8, 62, 100, 168, 39, 190, 162, 150, 154, 189, 101, 28, 178, 189, 179, 139, 174, 189, 199, 31, 48, 190, 222, 14, 2, 190, 93, 175, 206, 61, 139, 22, 50, 62, 23, 78, 24, 62, 225, 35, 49, 62, 77, 107, 22, 62, 247, 255, 170, 188, 233, 255, 213, 189, 136, 226, 199, 189, 144, 139, 253, 61, 96, 144, 138, 61, 78, 155, 211, 61, 168, 235, 194, 189, 142, 215, 23, 190, 134, 111, 240, 58, 80, 71, 146, 61, 103, 197, 2, 62, 22, 4, 134, 189, 11, 88, 198, 61, 170, 164, 43, 189, 186, 238, 166, 188, 131, 49, 222, 61, 207, 202, 40, 62, 141, 206, 47, 189, 93, 150, 9, 190, 171, 89, 179, 189, 251, 198, 62, 187, 0, 154, 10, 190, 218, 95, 239, 189, 205, 79, 192, 189, 186, 96, 68, 61, 222, 144, 49, 61, 33, 35, 160, 189, 81, 233, 117, 188, 150, 255, 52, 190, 4, 42, 43, 62, 73, 34, 118, 187, 31, 208, 39, 62, 179, 98, 23, 62, 43, 21, 142, 189, 11, 189, 57, 60, 73, 129, 1, 189, 106, 24, 104, 187, 68, 197, 255, 189, 12, 75, 94, 61, 134, 64, 30, 189, 252, 152, 1, 62, 112, 132, 244, 61, 46, 41, 2, 190, 23, 250, 47, 190, 208, 13, 22, 190, 199, 15, 147, 59, 22, 146, 250, 61, 213, 198, 86, 61, 100, 37, 249, 189, 29, 9, 234, 188, 107, 67, 248, 188, 104, 191, 254, 61, 69, 197, 22, 61, 122, 237, 134, 189, 132, 201, 34, 61, 85, 234, 199, 61, 68, 102, 1, 62, 5, 212, 74, 61, 231, 159, 121, 189, 19, 20, 9, 189, 150, 90, 9, 61, 154, 82, 19, 61, 78, 96, 146, 189, 7, 23, 7, 62, 65, 10, 225, 61, 110, 12, 38, 190, 50, 16, 50, 62, 167, 142, 195, 61, 253, 146, 143, 61, 42, 57, 21, 190, 208, 10, 26, 190, 220, 168, 69, 189, 176, 133, 231, 57, 62, 130, 61, 187, 45, 133, 39, 190, 170, 223, 121, 61, 86, 21, 170, 187, 29, 31, 185, 61, 14, 244, 54, 188, 16, 204, 117, 61, 145, 154, 236, 189, 1, 104, 132, 60, 113, 159, 246, 61, 175, 128, 48, 190, 71, 249, 128, 61, 21, 208, 225, 189, 52, 107, 45, 190, 238, 108, 248, 61, 34, 237, 0, 62, 215, 210, 122, 61, 83, 164, 217, 189, 235, 72, 131, 61, 227, 111, 240, 61, 243, 82, 198, 188, 53, 58, 82, 61, 174, 111, 78, 189, 31, 161, 76, 61, 214, 176, 33, 189, 56, 76, 34, 62, 124, 110, 10, 62, 212, 234, 30, 62, 245, 191, 35, 62, 188, 75, 149, 189, 65, 153, 15, 190, 114, 93, 225, 189, 208, 141, 245, 188, 157, 186, 214, 60, 172, 174, 148, 60, 1, 133, 152, 189, 130, 62, 162, 189, 208, 160, 149, 60, 142, 190, 200, 61, 174, 33, 17, 190, 168, 154, 43, 190, 135, 123, 22, 190, 205, 136, 41, 61, 233, 220, 22, 190, 20, 154, 37, 62, 166, 23, 165, 189, 183, 10, 173, 188, 41, 62, 82, 189, 169, 212, 87, 188, 109, 229, 229, 60, 48, 15, 188, 60, 14, 61, 210, 61, 225, 24, 24, 188, 1, 238, 218, 189, 5, 125, 209, 61, 25, 173, 30, 190, 62, 215, 186, 189, 160, 94, 52, 61, 168, 91, 242, 61, 85, 214, 45, 190, 74, 33, 242, 188, 45, 19, 165, 188, 26, 59, 250, 60, 95, 43, 190, 60, 236, 84, 40, 190, 254, 206, 52, 62, 12, 47, 206, 189, 202, 154, 78, 61, 223, 240, 134, 189, 92, 195, 141, 189, 251, 191, 34, 62, 37, 236, 7, 62, 177, 228, 123, 188, 163, 97, 80, 61, 240, 15, 29, 62, 43, 219, 242, 61, 237, 17, 235, 60, 204, 65, 0, 61, 218, 127, 43, 190, 114, 11, 33, 62, 116, 147, 154, 61, 135, 33, 222, 60, 84, 166, 201, 58, 138, 151, 66, 61, 75, 115, 15, 62, 115, 210, 26, 62, 220, 43, 245, 61, 81, 197, 129, 189, 111, 100, 136, 189, 147, 6, 38, 61, 210, 209, 72, 189, 135, 122, 236, 61, 127, 230, 143, 60, 71, 48, 104, 60, 179, 151, 228, 189, 182, 165, 18, 186, 111, 93, 19, 62, 208, 45, 98, 61, 64, 83, 133, 187, 211, 129, 23, 190, 84, 77, 34, 190, 49, 147, 22, 62, 254, 201, 124, 61, 226, 244, 129, 189, 187, 171, 52, 62, 85, 127, 232, 61, 193, 250, 2, 190, 200, 120, 49, 190, 86, 248, 135, 61, 58, 185, 242, 60, 96, 145, 52, 190, 112, 210, 37, 62, 206, 118, 72, 187, 214, 164, 220, 61, 116, 228, 52, 190, 189, 87, 14, 62, 81, 20, 47, 59, 58, 123, 187, 186, 183, 6, 194, 58, 95, 182, 5, 62, 0, 226, 1, 62, 175, 151, 24, 190, 209, 234, 109, 61, 104, 67, 160, 61, 53, 114, 51, 188, 205, 103, 250, 61, 13, 201, 227, 61, 28, 226, 191, 61, 214, 202, 234, 188, 5, 167, 44, 190, 104, 243, 234, 188, 43, 134, 15, 190, 123, 141, 88, 61, 220, 166, 193, 61, 250, 43, 48, 188, 249, 103, 94, 189, 156, 84, 146, 189, 172, 225, 28, 62, 208, 47, 157, 188, 255, 179, 73, 189, 0, 81, 212, 60, 32, 20, 148, 60, 209, 185, 206, 61, 179, 49, 31, 62, 8, 127, 220, 61, 148, 144, 173, 61, 82, 188, 204, 189, 191, 40, 176, 189, 153, 32, 180, 60, 154, 125, 189, 61, 163, 131, 10, 62, 80, 106, 199, 61, 63, 24, 181, 189, 69, 230, 52, 190, 6, 182, 183, 60, 136, 112, 166, 60, 156, 137, 114, 189, 186, 28, 99, 61, 181, 69, 130, 189, 180, 164, 118, 61, 55, 30, 51, 62, 15, 233, 170, 61, 33, 75, 24, 61, 67, 166, 48, 62, 147, 172, 3, 190, 224, 39, 191, 61, 118, 101, 63, 60, 237, 155, 236, 61, 227, 120, 224, 60, 168, 80, 20, 190, 198, 233, 189, 189, 132, 229, 137, 189, 126, 69, 144, 61, 46, 198, 164, 189, 240, 5, 237, 61, 140, 120, 224, 189, 47, 95, 239, 189, 88, 198, 99, 61, 161, 97, 49, 190, 149, 223, 11, 62, 139, 153, 6, 62, 198, 44, 33, 190, 159, 134, 186, 189, 127, 87, 29, 62, 90, 214, 225, 61, 34, 52, 138, 60, 160, 156, 210, 187, 14, 159, 38, 62, 234, 225, 12, 61, 87, 182, 157, 60, 231, 182, 136, 61, 21, 86, 3, 62, 88, 8, 149, 60, 90, 137, 129, 189, 222, 39, 180, 61, 99, 244, 213, 189, 30, 106, 167, 189, 105, 197, 100, 60, 136, 123, 167, 189, 81, 212, 38, 62, 242, 46, 177, 189, 62, 37, 209, 61, 0, 225, 15, 190, 111, 236, 232, 189, 99, 229, 41, 62, 92, 166, 46, 61, 202, 170, 139, 188, 82, 211, 43, 190, 16, 183, 223, 61, 112, 122, 177, 189, 95, 145, 32, 62, 156, 169, 220, 60, 89, 245, 46, 62, 143, 69, 62, 61, 28, 167, 185, 61, 63, 212, 216, 61, 74, 137, 139, 188, 121, 229, 205, 61, 70, 168, 134, 61, 167, 241, 11, 190, 21, 119, 254, 61, 97, 60, 36, 190, 85, 37, 1, 190, 168, 44, 4, 190, 129, 27, 88, 60, 87, 223, 18, 60, 179, 36, 79, 61, 89, 138, 190, 60, 203, 155, 226, 189, 222, 0, 146, 60, 114, 149, 176, 61, 21, 135, 149, 189, 69, 47, 161, 61, 198, 115, 0, 62, 16, 39, 113, 61, 97, 130, 166, 189, 38, 177, 148, 60, 207, 221, 95, 189, 32, 217, 89, 189, 22, 105, 219, 189, 45, 132, 59, 61, 165, 192, 208, 189, 11, 139, 46, 190, 208, 173, 83, 61, 2, 55, 214, 189, 227, 254, 196, 189, 188, 214, 21, 62, 62, 166, 230, 56, 141, 139, 165, 61, 106, 84, 28, 190, 208, 196, 238, 189, 249, 125, 150, 189, 134, 79, 108, 189, 222, 199, 25, 62, 250, 255, 155, 186, 110, 176, 24, 62, 42, 129, 234, 61, 217, 0, 165, 61, 117, 177, 41, 187, 28, 72, 1, 189, 162, 86, 23, 190, 9, 238, 10, 62, 182, 14, 28, 190, 105, 232, 224, 61, 199, 135, 43, 62, 184, 56, 41, 187, 14, 18, 183, 61, 70, 250, 2, 62, 49, 29, 18, 62, 114, 226, 241, 60, 38, 50, 5, 190, 77, 100, 10, 190, 226, 85, 19, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {126, 18, 28, 61, 99, 14, 195, 61, 147, 105, 199, 188, 254, 14, 1, 190, 137, 134, 44, 62, 5, 247, 42, 62, 125, 119, 64, 61, 87, 32, 212, 189, 0, 31, 41, 60, 116, 53, 103, 61, 243, 78, 215, 61, 96, 209, 197, 189, 249, 0, 164, 61, 92, 49, 14, 190, 210, 5, 45, 62, 171, 189, 30, 190, 173, 87, 23, 190, 16, 5, 17, 190, 112, 145, 19, 62, 90, 229, 18, 60, 190, 131, 202, 61, 61, 102, 180, 189, 49, 98, 148, 189, 160, 131, 174, 187, 29, 236, 94, 59, 48, 188, 160, 189, 190, 40, 121, 188, 98, 22, 20, 190, 102, 10, 208, 60, 231, 49, 148, 189, 56, 252, 153, 189, 50, 90, 201, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {21, 61, 169, 189, 81, 158, 217, 189, 66, 41, 198, 189, 133, 136, 2, 62, 179, 243, 162, 189, 226, 119, 8, 190, 172, 137, 215, 189, 45, 177, 244, 59, 6, 73, 216, 187, 45, 34, 166, 61, 43, 67, 163, 61, 77, 7, 23, 190, 244, 142, 166, 189, 109, 178, 0, 189, 82, 71, 5, 62, 107, 77, 160, 61, 202, 194, 50, 189, 189, 111, 243, 61, 49, 36, 34, 190, 107, 19, 52, 189, 197, 69, 217, 60, 253, 143, 136, 189, 220, 182, 111, 61, 113, 204, 223, 60, 137, 165, 230, 189, 153, 103, 232, 61, 53, 79, 48, 62, 239, 238, 89, 189, 185, 21, 211, 189, 84, 211, 9, 62, 191, 187, 219, 61, 81, 77, 4, 62, 59, 12, 199, 189, 63, 156, 158, 189, 163, 91, 16, 62, 108, 17, 31, 190, 185, 91, 35, 190, 38, 98, 10, 62, 89, 204, 146, 61, 21, 52, 25, 62, 41, 37, 142, 61, 76, 128, 23, 62, 54, 108, 120, 61, 106, 187, 81, 61, 201, 89, 31, 61, 154, 119, 14, 62, 238, 3, 155, 189, 202, 174, 97, 189, 178, 125, 166, 189, 79, 92, 44, 62, 14, 45, 41, 190, 11, 147, 221, 61, 98, 86, 14, 61, 64, 30, 173, 188, 150, 48, 21, 62, 111, 42, 60, 189, 174, 232, 133, 61, 42, 205, 174, 61, 133, 228, 24, 62, 26, 33, 167, 189, 20, 84, 246, 189, 124, 37, 232, 61, 21, 254, 49, 62, 207, 130, 178, 187};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {25, 252, 153, 189, 70, 236, 38, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {80, 122, 111, 191, 218, 240, 235, 63, 255, 97, 32, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {252, 82, 145, 60, 98, 110, 86, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0030/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}