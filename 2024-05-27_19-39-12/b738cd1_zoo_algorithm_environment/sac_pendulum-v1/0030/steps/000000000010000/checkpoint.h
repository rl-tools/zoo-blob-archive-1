// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {252, 76, 12, 191, 61, 177, 130, 191, 63, 228, 13, 191, 188, 109, 113, 62, 78, 13, 236, 61, 82, 49, 2, 191, 185, 171, 174, 62, 211, 32, 54, 63, 113, 15, 252, 190, 169, 144, 167, 190, 70, 238, 31, 63, 30, 73, 158, 189, 119, 180, 212, 188, 40, 58, 34, 63, 195, 50, 23, 191, 169, 35, 107, 62, 195, 234, 132, 63, 184, 103, 170, 62, 203, 178, 79, 190, 10, 202, 150, 61, 137, 189, 20, 191, 242, 205, 39, 63, 137, 136, 47, 191, 234, 129, 91, 62, 147, 97, 189, 190, 160, 24, 40, 63, 203, 27, 215, 190, 123, 82, 252, 61, 91, 99, 18, 63, 222, 212, 155, 190, 131, 70, 194, 190, 48, 181, 26, 191, 65, 9, 25, 190, 127, 72, 161, 190, 154, 63, 133, 191, 98, 87, 108, 190, 190, 2, 40, 63, 187, 250, 121, 63, 203, 146, 139, 62, 53, 108, 8, 63, 50, 128, 159, 191, 251, 102, 143, 190, 18, 64, 65, 63, 25, 122, 97, 190, 46, 180, 133, 62, 206, 112, 1, 63, 236, 218, 96, 191, 70, 222, 187, 62, 22, 63, 126, 62, 171, 160, 205, 190, 236, 142, 0, 63, 72, 126, 183, 190, 205, 15, 211, 63, 172, 96, 221, 62, 240, 15, 69, 191, 124, 118, 32, 62, 236, 8, 48, 61, 90, 142, 234, 62, 234, 1, 24, 63, 19, 112, 194, 62, 118, 255, 42, 63, 162, 133, 239, 190, 224, 236, 2, 190, 16, 44, 32, 62, 126, 37, 56, 63, 245, 146, 173, 189, 235, 56, 224, 188, 192, 83, 95, 191, 95, 65, 5, 190, 79, 195, 63, 63, 35, 158, 93, 191, 241, 89, 31, 190, 75, 252, 32, 191, 183, 117, 71, 62, 195, 53, 228, 62, 215, 26, 154, 62, 237, 221, 84, 63, 31, 169, 48, 62, 28, 255, 171, 62, 20, 105, 10, 63, 61, 224, 232, 190, 102, 113, 92, 190, 243, 21, 147, 191, 248, 75, 170, 190, 124, 147, 247, 62, 208, 151, 105, 191, 55, 145, 236, 190, 34, 206, 48, 62, 222, 70, 201, 191, 197, 139, 180, 190, 15, 102, 121, 62, 210, 106, 182, 63, 29, 190, 232, 62, 151, 54, 15, 191, 203, 99, 45, 191, 78, 137, 36, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 153, 5, 191, 200, 222, 3, 62, 133, 194, 38, 189, 97, 181, 160, 62, 131, 44, 47, 187, 98, 87, 164, 62, 94, 212, 251, 190, 87, 18, 15, 62, 111, 180, 31, 189, 206, 52, 4, 61, 141, 10, 166, 62, 93, 65, 106, 190, 148, 75, 107, 190, 96, 42, 22, 190, 179, 164, 13, 191, 109, 184, 18, 191, 205, 205, 139, 190, 174, 192, 115, 190, 36, 96, 216, 62, 236, 161, 22, 191, 6, 159, 174, 58, 179, 107, 6, 63, 252, 109, 10, 63, 42, 239, 129, 62, 227, 113, 88, 62, 36, 178, 215, 61, 84, 15, 61, 62, 149, 135, 50, 190, 217, 60, 10, 191, 165, 238, 200, 62, 101, 251, 184, 62, 46, 197, 35, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {177, 62, 133, 62, 4, 160, 129, 188, 15, 177, 28, 188, 216, 59, 38, 62, 183, 125, 165, 188, 125, 33, 63, 62, 217, 116, 210, 189, 196, 94, 23, 61, 150, 39, 205, 187, 230, 187, 235, 61, 99, 99, 171, 190, 175, 67, 25, 60, 44, 220, 42, 62, 30, 235, 254, 190, 109, 90, 1, 61, 217, 147, 25, 188, 89, 216, 101, 60, 217, 108, 134, 189, 68, 149, 28, 60, 124, 76, 204, 61, 241, 229, 255, 189, 86, 54, 253, 61, 16, 50, 228, 61, 22, 10, 2, 62, 78, 79, 236, 189, 176, 33, 160, 62, 111, 137, 36, 62, 155, 215, 248, 61, 235, 57, 214, 190, 11, 142, 88, 190, 215, 109, 52, 62, 131, 3, 43, 189, 175, 177, 138, 188, 51, 95, 29, 190, 194, 118, 210, 61, 97, 121, 117, 62, 231, 177, 226, 188, 14, 53, 83, 189, 237, 158, 217, 60, 73, 90, 152, 61, 200, 25, 66, 190, 30, 91, 208, 61, 57, 227, 155, 61, 131, 127, 17, 190, 87, 237, 84, 62, 78, 96, 171, 190, 96, 64, 197, 62, 122, 58, 19, 62, 107, 208, 115, 190, 57, 129, 65, 191, 150, 188, 13, 62, 116, 123, 246, 190, 93, 2, 143, 190, 148, 35, 155, 62, 154, 52, 171, 189, 162, 58, 38, 189, 62, 252, 201, 190, 54, 64, 44, 62, 142, 48, 26, 62, 29, 52, 130, 60, 222, 9, 156, 190, 99, 236, 142, 61, 148, 238, 87, 60, 71, 238, 224, 189, 92, 233, 46, 60, 171, 140, 37, 190, 17, 55, 94, 59, 212, 89, 132, 62, 42, 126, 51, 62, 169, 254, 184, 189, 54, 52, 19, 61, 226, 75, 133, 189, 13, 75, 235, 189, 14, 66, 123, 62, 44, 169, 66, 61, 82, 41, 24, 62, 53, 215, 219, 62, 158, 134, 44, 191, 49, 42, 226, 61, 99, 74, 204, 189, 118, 41, 147, 190, 20, 116, 80, 190, 73, 62, 69, 61, 236, 90, 173, 62, 225, 228, 155, 190, 206, 65, 208, 62, 140, 177, 100, 59, 43, 22, 233, 60, 136, 234, 78, 190, 207, 63, 218, 62, 162, 81, 229, 60, 36, 246, 1, 190, 77, 178, 14, 191, 14, 126, 169, 190, 51, 66, 46, 190, 174, 21, 245, 188, 29, 21, 23, 190, 126, 138, 35, 189, 65, 99, 178, 61, 136, 8, 12, 62, 239, 199, 45, 62, 184, 82, 93, 190, 76, 94, 134, 62, 50, 75, 52, 60, 37, 131, 96, 61, 181, 171, 136, 62, 52, 94, 253, 61, 235, 183, 15, 62, 169, 124, 4, 62, 131, 240, 100, 61, 205, 68, 26, 62, 29, 152, 147, 189, 248, 10, 26, 191, 170, 210, 32, 189, 195, 98, 142, 62, 125, 154, 37, 63, 217, 179, 83, 62, 239, 208, 253, 61, 231, 213, 1, 190, 70, 48, 3, 61, 208, 132, 28, 190, 126, 176, 141, 62, 76, 105, 108, 62, 169, 224, 2, 62, 190, 12, 6, 190, 221, 116, 187, 189, 43, 138, 112, 189, 5, 55, 183, 61, 78, 64, 200, 61, 118, 57, 41, 62, 253, 56, 47, 188, 144, 230, 151, 61, 128, 56, 8, 188, 190, 136, 11, 62, 9, 94, 210, 61, 207, 223, 91, 62, 48, 63, 69, 190, 155, 140, 60, 61, 12, 16, 213, 189, 144, 110, 226, 189, 129, 207, 233, 188, 121, 214, 75, 190, 12, 13, 182, 61, 227, 140, 72, 190, 217, 119, 232, 189, 141, 45, 21, 190, 146, 190, 243, 59, 219, 135, 129, 190, 142, 129, 168, 61, 109, 44, 217, 62, 21, 23, 44, 62, 196, 135, 33, 62, 252, 117, 15, 189, 94, 113, 234, 60, 139, 124, 218, 187, 135, 162, 255, 187, 236, 53, 92, 190, 243, 20, 177, 61, 184, 103, 124, 62, 84, 110, 241, 188, 135, 70, 171, 189, 129, 136, 12, 190, 179, 223, 192, 61, 96, 219, 168, 60, 129, 196, 125, 187, 220, 92, 136, 60, 3, 169, 237, 59, 250, 190, 188, 189, 29, 82, 169, 61, 151, 206, 55, 60, 100, 60, 139, 61, 100, 35, 242, 60, 226, 123, 12, 190, 14, 76, 15, 62, 105, 25, 141, 61, 234, 135, 75, 61, 94, 50, 23, 61, 182, 10, 164, 189, 183, 137, 13, 190, 5, 135, 220, 189, 228, 255, 226, 189, 140, 134, 23, 61, 144, 208, 110, 189, 57, 140, 63, 190, 200, 16, 87, 190, 228, 181, 77, 188, 221, 195, 4, 190, 252, 184, 213, 189, 62, 208, 21, 62, 201, 192, 177, 61, 73, 144, 236, 189, 28, 76, 92, 189, 119, 109, 53, 61, 195, 172, 146, 190, 162, 131, 185, 189, 53, 25, 50, 61, 145, 4, 29, 62, 108, 20, 141, 190, 60, 226, 30, 61, 99, 157, 102, 187, 255, 121, 200, 190, 244, 199, 192, 62, 111, 148, 199, 189, 86, 162, 133, 61, 203, 59, 88, 62, 78, 231, 141, 190, 174, 14, 67, 62, 194, 40, 4, 62, 62, 142, 168, 189, 83, 202, 236, 190, 241, 236, 194, 60, 87, 2, 197, 189, 16, 131, 6, 191, 17, 191, 225, 62, 121, 79, 40, 190, 242, 37, 233, 190, 54, 226, 64, 190, 2, 79, 185, 62, 224, 220, 129, 62, 204, 49, 177, 187, 248, 192, 168, 190, 186, 92, 154, 60, 107, 172, 49, 190, 187, 132, 188, 61, 19, 115, 149, 61, 60, 158, 83, 188, 190, 253, 57, 57, 166, 22, 21, 62, 246, 194, 27, 62, 239, 221, 246, 188, 24, 38, 170, 189, 35, 155, 41, 190, 103, 97, 87, 61, 198, 215, 243, 189, 65, 177, 170, 59, 232, 145, 6, 190, 191, 149, 153, 189, 44, 169, 133, 61, 185, 125, 32, 62, 20, 64, 8, 62, 126, 218, 17, 62, 199, 26, 194, 186, 98, 22, 33, 190, 53, 147, 172, 189, 91, 252, 171, 61, 42, 64, 10, 60, 205, 26, 44, 61, 19, 161, 60, 189, 15, 41, 168, 189, 4, 78, 15, 190, 139, 112, 65, 189, 8, 199, 2, 188, 237, 235, 32, 190, 97, 44, 52, 190, 183, 104, 192, 189, 222, 92, 16, 190, 71, 154, 254, 60, 242, 178, 100, 190, 116, 22, 72, 190, 243, 61, 200, 188, 43, 225, 159, 62, 126, 99, 72, 191, 140, 102, 46, 62, 222, 245, 82, 190, 154, 136, 23, 190, 231, 146, 213, 61, 158, 225, 164, 62, 30, 85, 136, 62, 247, 132, 30, 191, 130, 115, 192, 190, 175, 96, 49, 190, 189, 82, 99, 61, 245, 157, 73, 190, 161, 37, 2, 192, 159, 90, 81, 61, 213, 19, 22, 190, 107, 90, 58, 191, 149, 45, 65, 62, 115, 94, 82, 62, 203, 115, 216, 190, 188, 226, 95, 61, 148, 90, 35, 62, 109, 173, 160, 60, 227, 198, 4, 62, 203, 8, 20, 190, 59, 105, 220, 60, 253, 175, 3, 192, 177, 48, 159, 62, 129, 25, 197, 61, 126, 210, 128, 60, 134, 156, 94, 61, 222, 24, 85, 62, 233, 251, 170, 59, 41, 13, 187, 190, 69, 111, 248, 61, 114, 36, 156, 61, 186, 226, 233, 188, 71, 134, 198, 60, 240, 230, 108, 61, 21, 209, 8, 62, 92, 111, 28, 62, 139, 98, 17, 191, 166, 150, 96, 60, 126, 116, 63, 62, 161, 136, 147, 189, 68, 90, 52, 191, 237, 139, 239, 188, 28, 57, 226, 189, 186, 78, 20, 191, 38, 132, 118, 62, 132, 83, 235, 61, 29, 220, 198, 190, 53, 157, 88, 189, 20, 142, 5, 63, 73, 134, 23, 189, 88, 223, 115, 61, 127, 219, 14, 191, 16, 222, 140, 62, 91, 128, 15, 191, 234, 139, 35, 190, 68, 247, 67, 61, 131, 70, 151, 188, 144, 163, 130, 62, 92, 173, 157, 190, 22, 199, 168, 61, 86, 47, 245, 188, 180, 239, 250, 189, 75, 82, 13, 189, 59, 190, 227, 61, 76, 8, 41, 62, 122, 162, 57, 189, 17, 12, 241, 61, 71, 244, 151, 62, 195, 127, 58, 62, 156, 195, 155, 62, 19, 171, 116, 62, 166, 198, 64, 189, 30, 150, 121, 188, 38, 201, 81, 191, 164, 141, 93, 62, 223, 74, 71, 189, 149, 45, 53, 188, 252, 166, 57, 191, 187, 2, 143, 189, 248, 20, 239, 189, 178, 250, 144, 189, 26, 41, 149, 62, 45, 63, 132, 62, 229, 161, 128, 62, 190, 109, 145, 190, 184, 122, 219, 61, 214, 30, 210, 190, 184, 219, 16, 63, 240, 249, 120, 190, 191, 192, 227, 189, 108, 171, 27, 62, 188, 74, 15, 62, 152, 97, 26, 62, 73, 146, 241, 60, 7, 217, 122, 189, 220, 42, 142, 190, 63, 177, 174, 62, 106, 107, 46, 188, 9, 180, 160, 62, 188, 20, 103, 62, 204, 173, 42, 190, 49, 50, 52, 61, 156, 239, 130, 62, 100, 25, 8, 190, 103, 86, 132, 189, 10, 149, 15, 61, 0, 95, 48, 62, 145, 197, 183, 189, 241, 0, 88, 62, 211, 36, 177, 189, 179, 22, 0, 62, 187, 235, 18, 190, 227, 142, 174, 62, 138, 18, 45, 62, 62, 228, 158, 62, 110, 21, 5, 190, 189, 160, 146, 189, 157, 65, 34, 62, 168, 43, 137, 190, 63, 211, 13, 62, 14, 117, 90, 190, 41, 59, 177, 190, 10, 163, 51, 62, 116, 228, 24, 189, 208, 221, 26, 191, 228, 111, 226, 59, 192, 0, 5, 191, 112, 198, 211, 190, 225, 253, 117, 62, 174, 225, 127, 62, 103, 0, 28, 62, 15, 171, 31, 190, 133, 90, 24, 190, 192, 205, 14, 62, 0, 166, 85, 62, 253, 93, 200, 190, 210, 113, 236, 191, 35, 241, 183, 61, 34, 4, 99, 189, 51, 193, 23, 191, 206, 154, 58, 190, 242, 96, 85, 62, 40, 160, 238, 190, 74, 11, 15, 61, 61, 104, 136, 60, 62, 72, 213, 61, 69, 124, 176, 189, 32, 51, 38, 61, 212, 11, 53, 62, 172, 14, 242, 191, 109, 106, 110, 62, 164, 142, 109, 190, 188, 66, 74, 61, 119, 14, 218, 61, 223, 119, 154, 189, 228, 195, 4, 62, 52, 5, 87, 62, 123, 69, 232, 189, 234, 86, 41, 62, 10, 126, 91, 62, 10, 175, 40, 61, 131, 138, 237, 190, 223, 138, 16, 190, 68, 223, 83, 62, 247, 203, 61, 191, 87, 186, 169, 61, 11, 164, 118, 62, 12, 49, 139, 61, 75, 72, 20, 190, 177, 226, 133, 190, 192, 96, 56, 62, 20, 233, 98, 189, 218, 38, 235, 188, 108, 107, 107, 190, 176, 183, 235, 61, 204, 141, 30, 190, 214, 180, 123, 62, 194, 164, 98, 62, 178, 79, 235, 190, 11, 151, 250, 189, 31, 160, 229, 190, 162, 27, 77, 188, 208, 116, 159, 190, 247, 180, 122, 189, 85, 152, 156, 189, 87, 83, 178, 61, 153, 7, 50, 189, 136, 55, 173, 61, 52, 41, 192, 188, 153, 249, 35, 190, 250, 69, 159, 62, 149, 46, 52, 59, 150, 214, 98, 189, 181, 93, 153, 60, 32, 144, 29, 190, 100, 153, 207, 190, 249, 146, 140, 62, 120, 62, 148, 190, 174, 235, 171, 61, 25, 95, 44, 62, 204, 245, 10, 190, 36, 2, 221, 61, 153, 183, 57, 190, 188, 227, 143, 62, 191, 26, 18, 60, 105, 78, 195, 61, 25, 15, 160, 186, 72, 153, 206, 61, 195, 174, 0, 191, 36, 52, 166, 189, 22, 109, 22, 190, 29, 222, 126, 60, 223, 166, 56, 62, 192, 140, 2, 190, 87, 141, 73, 62, 153, 195, 208, 190, 150, 185, 177, 62, 62, 135, 144, 61, 114, 179, 126, 190, 112, 42, 93, 190, 250, 167, 88, 189, 186, 126, 3, 191, 59, 119, 142, 62, 29, 78, 39, 190, 9, 86, 186, 189, 28, 218, 4, 62, 63, 162, 141, 190, 204, 203, 72, 190, 8, 47, 170, 62, 174, 215, 189, 188, 170, 53, 245, 188, 64, 205, 42, 62, 38, 28, 8, 62, 84, 54, 38, 190, 104, 4, 67, 61, 108, 226, 73, 61, 129, 253, 66, 188, 173, 249, 112, 62, 215, 199, 65, 62, 70, 40, 25, 62, 196, 243, 92, 190, 113, 120, 55, 189, 105, 105, 20, 190, 247, 238, 165, 189, 10, 171, 8, 62, 42, 60, 176, 60, 128, 40, 109, 62, 217, 168, 10, 190, 39, 201, 137, 60, 1, 253, 48, 62, 73, 95, 158, 190, 101, 37, 252, 61, 181, 200, 46, 62, 204, 126, 196, 60, 107, 133, 121, 62, 26, 123, 131, 62, 103, 233, 60, 62, 170, 112, 68, 191, 86, 73, 217, 190, 211, 114, 73, 61, 194, 118, 230, 190, 22, 170, 18, 62, 46, 94, 254, 61, 219, 117, 61, 189, 190, 168, 70, 190, 238, 220, 146, 190, 56, 91, 177, 189, 180, 232, 67, 62, 113, 62, 165, 60, 136, 27, 223, 60, 147, 115, 182, 61, 99, 45, 165, 60, 102, 228, 154, 62, 251, 93, 240, 188, 222, 96, 120, 190, 75, 247, 189, 190, 217, 238, 48, 190, 182, 134, 228, 61, 193, 197, 10, 191, 22, 23, 179, 189, 134, 16, 181, 190, 52, 178, 213, 190, 71, 234, 142, 187, 129, 52, 0, 191, 205, 171, 198, 188, 214, 1, 204, 190, 143, 18, 235, 61, 57, 245, 20, 190, 204, 157, 50, 191, 179, 56, 214, 62, 210, 84, 18, 190, 101, 225, 30, 190, 197, 150, 178, 62, 94, 42, 16, 190, 143, 220, 23, 61, 65, 213, 47, 61, 68, 41, 174, 60, 27, 249, 143, 189, 108, 45, 28, 62, 182, 182, 23, 189, 204, 28, 103, 190, 122, 95, 96, 62, 213, 122, 57, 190, 88, 178, 57, 60, 197, 32, 28, 190, 224, 90, 214, 190, 156, 20, 116, 190, 158, 124, 205, 187, 115, 16, 166, 62, 250, 214, 27, 62, 115, 121, 148, 62, 174, 234, 232, 188, 0, 235, 104, 61, 111, 92, 172, 62, 252, 205, 31, 190, 114, 180, 14, 189, 181, 217, 34, 62, 119, 118, 58, 190, 163, 197, 78, 62, 49, 159, 9, 61, 154, 250, 181, 62, 5, 54, 170, 191, 42, 67, 130, 189, 188, 131, 30, 62, 201, 7, 50, 191, 178, 218, 6, 62, 35, 10, 148, 62, 56, 82, 89, 61, 81, 251, 34, 190, 6, 101, 67, 191, 75, 174, 13, 189, 1, 167, 40, 62, 84, 124, 3, 62, 145, 43, 47, 190, 15, 186, 90, 62, 63, 187, 37, 61, 23, 126, 144, 62, 227, 13, 196, 61, 4, 38, 210, 190, 148, 101, 35, 191, 121, 150, 9, 190, 66, 176, 193, 61, 93, 189, 82, 191, 165, 115, 38, 190, 155, 117, 210, 61, 113, 24, 14, 62, 189, 141, 80, 190, 171, 84, 62, 190, 12, 109, 212, 190, 63, 235, 37, 190, 173, 88, 158, 60, 134, 210, 239, 189, 196, 238, 96, 189, 8, 63, 134, 190, 234, 214, 179, 190, 236, 50, 37, 191, 63, 51, 53, 62, 254, 229, 208, 187, 89, 84, 88, 62, 149, 81, 172, 60, 224, 86, 52, 190, 21, 55, 121, 190, 172, 71, 128, 190, 250, 130, 241, 62, 174, 195, 74, 190, 150, 20, 2, 189, 197, 168, 236, 62, 155, 8, 248, 61, 59, 115, 185, 190, 41, 88, 54, 61, 10, 233, 8, 190, 63, 4, 255, 61, 30, 33, 22, 62, 93, 162, 195, 190, 115, 107, 137, 190, 30, 132, 25, 190, 186, 204, 20, 189, 89, 167, 134, 61, 75, 143, 7, 190, 182, 154, 133, 61, 97, 163, 198, 58, 226, 43, 221, 61, 41, 30, 242, 61, 180, 152, 5, 190, 62, 57, 65, 61, 193, 26, 15, 62, 222, 163, 3, 62, 88, 38, 227, 189, 220, 26, 60, 61, 248, 233, 2, 61, 35, 111, 34, 62, 100, 247, 226, 189, 167, 96, 29, 190, 189, 1, 15, 190, 119, 120, 148, 189, 182, 162, 34, 190, 111, 225, 84, 190, 44, 155, 3, 62, 15, 250, 4, 190, 240, 24, 145, 189, 233, 254, 72, 189, 101, 159, 167, 61, 159, 58, 90, 190, 162, 61, 250, 189, 187, 239, 4, 190, 20, 255, 169, 189, 75, 75, 69, 190, 165, 240, 128, 189, 220, 155, 134, 60, 110, 161, 219, 61, 53, 149, 22, 62, 187, 250, 62, 62, 128, 47, 46, 62, 236, 131, 32, 189, 89, 186, 33, 61, 176, 165, 41, 190, 160, 19, 29, 62, 252, 237, 153, 190, 231, 19, 243, 61, 152, 255, 41, 62, 227, 104, 227, 190, 126, 85, 135, 62, 211, 227, 105, 62, 226, 26, 209, 61, 227, 36, 106, 190, 52, 30, 170, 189, 144, 131, 226, 61, 118, 156, 80, 61, 12, 15, 114, 62, 83, 148, 32, 62, 5, 255, 209, 60, 50, 223, 165, 190, 240, 34, 30, 62, 80, 10, 171, 60, 121, 47, 69, 190, 223, 170, 2, 191, 150, 228, 65, 190, 248, 208, 232, 61, 176, 170, 101, 190, 253, 218, 67, 190, 254, 150, 178, 60, 127, 90, 178, 187, 230, 143, 175, 188, 249, 114, 202, 60, 72, 162, 31, 62, 112, 85, 141, 61, 240, 90, 44, 61, 200, 196, 203, 188, 103, 124, 195, 61, 219, 239, 167, 190, 196, 38, 35, 190, 20, 200, 122, 62, 247, 21, 179, 190, 97, 6, 207, 62, 111, 154, 174, 62, 92, 45, 42, 190, 55, 117, 119, 190, 253, 143, 116, 191, 234, 52, 21, 62, 85, 85, 225, 189, 56, 227, 151, 61, 208, 52, 83, 191, 25, 241, 100, 190, 250, 4, 51, 190, 77, 100, 116, 62, 152, 55, 68, 62, 58, 110, 246, 189, 68, 20, 157, 189, 201, 155, 227, 190, 182, 58, 24, 62, 151, 84, 221, 190, 8, 205, 4, 190, 171, 33, 104, 61, 144, 66, 162, 61, 60, 232, 1, 61, 108, 172, 11, 190, 198, 37, 214, 61, 176, 115, 4, 62, 115, 91, 71, 61, 195, 135, 219, 61, 37, 250, 234, 61, 232, 194, 224, 188, 157, 0, 240, 190, 182, 185, 132, 190, 176, 238, 35, 190, 206, 243, 249, 60, 8, 194, 246, 189, 92, 87, 160, 190, 56, 124, 254, 189, 146, 220, 191, 189, 75, 176, 111, 190, 19, 152, 37, 62, 115, 88, 182, 62, 183, 49, 198, 60, 200, 253, 81, 62, 226, 160, 254, 61, 49, 36, 128, 190, 204, 135, 9, 62, 8, 182, 254, 190, 246, 165, 159, 190, 194, 230, 222, 61, 140, 198, 165, 61, 249, 19, 128, 189, 183, 233, 243, 190, 52, 121, 251, 61, 238, 80, 102, 62, 154, 171, 182, 188, 139, 157, 129, 61, 3, 6, 121, 190, 35, 156, 135, 189, 178, 4, 34, 190, 161, 240, 72, 62, 56, 240, 64, 62, 134, 175, 95, 188, 99, 163, 133, 190, 30, 255, 98, 189, 235, 210, 93, 191, 21, 55, 109, 190, 208, 141, 245, 188, 104, 183, 26, 189, 69, 32, 109, 61, 28, 35, 224, 189, 162, 183, 192, 190, 218, 60, 63, 190, 205, 157, 92, 62, 45, 127, 85, 190, 187, 46, 142, 190, 46, 177, 22, 191, 26, 37, 135, 62, 38, 90, 203, 189, 79, 137, 186, 189, 177, 94, 210, 190, 213, 247, 133, 190, 148, 174, 2, 190, 17, 248, 126, 190, 219, 74, 128, 191, 51, 57, 137, 62, 127, 149, 106, 62, 30, 233, 104, 187, 134, 248, 140, 190, 188, 196, 21, 62, 89, 39, 119, 191, 38, 170, 179, 59, 131, 148, 250, 62, 31, 224, 207, 190, 172, 2, 252, 61, 193, 79, 15, 192, 76, 107, 203, 190, 225, 73, 153, 62, 161, 23, 18, 190, 211, 239, 135, 190, 172, 182, 110, 62, 136, 111, 241, 188, 76, 242, 170, 61, 13, 164, 136, 190, 94, 130, 14, 61, 183, 10, 53, 62, 87, 141, 150, 62, 166, 58, 255, 61, 0, 50, 232, 61, 80, 111, 201, 190, 169, 104, 52, 190, 115, 161, 143, 191, 198, 3, 230, 62, 249, 50, 25, 190, 25, 54, 32, 62, 13, 145, 92, 62, 79, 0, 50, 191, 22, 221, 223, 62, 165, 165, 207, 62, 142, 178, 54, 62, 252, 196, 67, 62, 165, 6, 223, 61, 38, 208, 65, 191, 94, 163, 173, 187, 51, 141, 198, 62, 223, 7, 87, 190, 153, 180, 151, 62, 169, 39, 204, 191, 167, 222, 24, 190, 238, 255, 129, 62, 53, 225, 135, 189, 49, 95, 153, 61, 224, 167, 133, 60, 226, 91, 57, 60, 230, 130, 93, 190, 202, 61, 101, 190, 37, 67, 94, 62, 64, 145, 40, 62, 110, 227, 153, 58, 36, 150, 139, 62, 88, 46, 202, 61, 34, 80, 165, 190, 53, 143, 109, 190, 239, 230, 21, 191, 82, 204, 1, 63, 64, 242, 186, 189, 222, 158, 3, 62, 114, 242, 86, 61, 244, 67, 106, 61, 62, 155, 46, 190, 178, 189, 115, 62, 95, 163, 170, 190, 170, 97, 62, 190, 51, 155, 63, 61, 17, 127, 85, 189, 55, 134, 135, 62, 222, 168, 128, 190, 181, 171, 26, 62, 254, 108, 126, 191, 109, 22, 207, 189, 97, 41, 107, 62, 50, 188, 159, 190, 90, 2, 182, 61, 169, 204, 159, 186, 51, 50, 218, 189, 83, 235, 126, 189, 196, 106, 211, 190, 217, 129, 226, 60, 134, 4, 162, 62, 38, 250, 222, 61, 189, 130, 39, 187, 23, 156, 28, 62, 57, 117, 24, 62, 78, 184, 227, 61, 227, 155, 62, 189, 215, 234, 107, 191, 149, 106, 144, 191, 42, 92, 131, 189, 182, 4, 95, 62, 89, 97, 206, 190, 206, 224, 52, 62, 101, 53, 240, 189, 60, 3, 162, 189, 39, 155, 100, 60, 151, 203, 244, 61, 84, 176, 70, 62, 17, 205, 76, 62, 91, 25, 176, 60, 7, 136, 64, 190, 228, 132, 217, 61, 106, 190, 69, 189, 116, 46, 92, 61, 41, 17, 6, 62, 142, 174, 161, 190, 93, 102, 225, 60, 117, 137, 36, 62, 78, 230, 181, 61, 174, 17, 138, 60, 37, 47, 17, 62, 202, 200, 39, 190, 124, 231, 45, 62, 20, 218, 30, 62, 52, 180, 118, 62, 196, 245, 240, 61, 250, 236, 253, 189, 224, 17, 47, 61, 194, 242, 90, 188, 254, 67, 199, 61, 34, 193, 126, 190, 94, 151, 200, 61, 236, 6, 8, 189, 100, 83, 50, 190, 80, 207, 232, 189, 22, 221, 134, 189, 57, 229, 97, 62, 22, 181, 35, 62, 34, 145, 14, 190, 206, 140, 21, 190, 85, 166, 37, 61, 59, 146, 108, 62, 153, 221, 132, 61, 173, 119, 240, 60, 236, 131, 132, 62, 148, 242, 128, 190, 172, 176, 36, 191, 118, 18, 146, 62, 225, 226, 228, 188, 109, 82, 165, 61, 58, 78, 175, 61, 101, 244, 184, 60, 66, 98, 193, 189, 209, 92, 164, 190, 177, 178, 248, 61, 82, 69, 212, 189, 188, 239, 144, 62, 193, 139, 223, 60, 186, 243, 69, 62, 50, 43, 12, 191, 115, 231, 186, 189, 70, 96, 125, 61, 151, 216, 108, 62, 178, 118, 145, 61, 210, 49, 135, 190, 136, 135, 87, 62, 220, 74, 79, 191, 201, 122, 182, 61, 160, 87, 30, 189, 4, 82, 231, 62, 110, 227, 205, 188, 75, 8, 115, 62, 207, 38, 103, 190, 53, 232, 20, 190, 144, 1, 228, 62, 246, 93, 138, 189, 123, 12, 90, 190, 193, 136, 125, 191, 3, 151, 96, 190, 10, 197, 105, 190, 138, 125, 191, 190, 247, 144, 164, 190, 133, 255, 112, 61, 70, 80, 94, 62, 66, 230, 197, 61, 149, 18, 110, 190, 156, 177, 5, 191, 49, 168, 193, 62, 225, 42, 33, 190, 232, 201, 186, 190, 145, 241, 149, 62, 113, 172, 9, 189, 37, 111, 97, 190, 10, 68, 157, 191, 1, 11, 0, 190, 176, 114, 105, 191, 205, 109, 123, 188, 150, 219, 131, 61, 238, 181, 184, 190, 148, 239, 250, 60, 179, 182, 68, 62, 197, 101, 254, 189, 141, 208, 69, 190, 129, 247, 209, 61, 52, 192, 146, 190, 201, 186, 117, 62, 127, 124, 23, 190, 219, 115, 41, 190, 104, 101, 239, 59, 14, 145, 245, 190, 214, 196, 187, 190, 15, 130, 67, 62, 113, 110, 132, 60, 235, 6, 182, 61, 187, 164, 242, 61, 180, 104, 158, 189, 42, 192, 143, 186, 22, 233, 213, 190, 171, 242, 135, 62, 33, 98, 77, 190, 212, 103, 122, 62, 191, 210, 171, 62, 211, 210, 15, 59, 124, 184, 190, 190, 191, 23, 25, 62, 12, 143, 120, 189, 16, 45, 9, 61, 139, 20, 124, 58, 208, 16, 64, 190, 197, 223, 114, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {56, 223, 35, 62, 82, 239, 94, 62, 26, 46, 150, 61, 214, 32, 7, 61, 239, 10, 201, 62, 188, 209, 223, 61, 199, 66, 71, 62, 127, 108, 244, 189, 91, 16, 25, 62, 73, 94, 243, 61, 66, 74, 120, 190, 145, 95, 234, 60, 43, 38, 12, 62, 193, 24, 18, 190, 71, 213, 161, 62, 229, 215, 188, 189, 128, 25, 54, 189, 32, 234, 97, 190, 205, 86, 62, 62, 149, 104, 226, 189, 44, 148, 115, 61, 152, 184, 26, 189, 47, 202, 134, 190, 155, 95, 41, 62, 57, 227, 207, 61, 111, 95, 35, 60, 9, 19, 250, 59, 93, 103, 136, 189, 11, 200, 55, 62, 152, 235, 216, 188, 196, 228, 75, 188, 154, 242, 1, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {234, 183, 31, 190, 43, 97, 162, 190, 189, 43, 12, 191, 138, 207, 91, 62, 214, 106, 7, 188, 20, 58, 196, 189, 13, 240, 191, 190, 36, 27, 201, 187, 120, 154, 124, 191, 237, 210, 231, 190, 183, 9, 27, 63, 11, 226, 153, 190, 16, 248, 145, 191, 151, 107, 208, 190, 92, 65, 127, 62, 118, 216, 82, 62, 210, 133, 78, 190, 177, 56, 172, 62, 162, 229, 25, 191, 48, 209, 9, 62, 234, 231, 0, 189, 1, 134, 121, 190, 90, 121, 70, 63, 40, 136, 211, 61, 92, 3, 46, 191, 64, 179, 58, 63, 18, 210, 195, 62, 108, 181, 32, 190, 14, 189, 61, 189, 243, 102, 178, 62, 215, 170, 104, 63, 117, 57, 154, 62, 80, 121, 45, 190, 162, 6, 121, 190, 37, 27, 167, 62, 255, 47, 42, 190, 17, 192, 198, 190, 149, 181, 192, 61, 24, 132, 162, 62, 183, 107, 5, 62, 36, 81, 142, 60, 215, 119, 154, 62, 17, 212, 217, 61, 203, 79, 23, 62, 92, 228, 107, 61, 180, 109, 145, 62, 77, 102, 56, 190, 242, 205, 121, 189, 58, 75, 10, 190, 93, 108, 177, 61, 77, 100, 73, 190, 21, 90, 253, 62, 129, 230, 75, 60, 172, 181, 33, 189, 214, 141, 55, 63, 36, 101, 163, 190, 49, 208, 91, 61, 142, 92, 13, 188, 37, 137, 240, 61, 8, 132, 97, 190, 96, 227, 128, 190, 42, 39, 49, 62, 6, 53, 45, 62, 153, 32, 168, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 92, 55, 189, 252, 58, 177, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {116, 37, 67, 190, 85, 246, 226, 61, 83, 81, 128, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {76, 188, 46, 63, 150, 115, 104, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0030/steps/000000000010000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}