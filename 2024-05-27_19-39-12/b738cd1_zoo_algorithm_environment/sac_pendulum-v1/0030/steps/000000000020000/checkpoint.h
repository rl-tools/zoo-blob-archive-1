// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {58, 5, 69, 191, 174, 222, 113, 191, 234, 154, 16, 191, 110, 91, 98, 62, 51, 170, 23, 62, 123, 82, 249, 190, 141, 151, 133, 62, 56, 13, 98, 63, 184, 234, 206, 190, 29, 165, 2, 191, 253, 19, 46, 63, 226, 100, 123, 186, 114, 150, 28, 190, 73, 169, 2, 63, 61, 233, 4, 191, 139, 189, 88, 62, 104, 72, 158, 63, 161, 47, 141, 62, 76, 214, 132, 190, 70, 218, 2, 62, 201, 180, 19, 191, 193, 22, 49, 63, 198, 172, 78, 191, 216, 5, 82, 62, 156, 254, 7, 191, 58, 128, 63, 63, 53, 45, 158, 190, 103, 251, 37, 62, 31, 203, 16, 63, 194, 97, 237, 189, 203, 95, 168, 190, 232, 177, 76, 191, 87, 221, 13, 190, 214, 34, 203, 190, 181, 190, 158, 191, 172, 9, 102, 190, 191, 85, 40, 63, 227, 248, 138, 63, 151, 192, 147, 62, 10, 252, 14, 63, 33, 166, 176, 191, 41, 253, 136, 190, 76, 213, 68, 63, 62, 12, 218, 189, 196, 93, 193, 62, 171, 194, 34, 63, 42, 59, 124, 191, 233, 5, 181, 62, 6, 107, 86, 62, 247, 151, 3, 191, 139, 142, 183, 62, 119, 215, 133, 190, 35, 183, 236, 63, 224, 175, 203, 62, 59, 25, 147, 191, 127, 248, 175, 62, 145, 93, 234, 60, 176, 36, 236, 62, 138, 212, 71, 63, 65, 17, 160, 62, 133, 89, 42, 63, 191, 213, 235, 190, 3, 59, 36, 190, 111, 115, 31, 188, 66, 105, 86, 63, 124, 209, 70, 189, 252, 43, 85, 188, 105, 118, 102, 191, 67, 126, 42, 190, 202, 85, 41, 63, 84, 178, 99, 191, 158, 83, 80, 190, 161, 103, 236, 190, 95, 175, 63, 62, 202, 201, 228, 62, 74, 81, 142, 62, 69, 149, 125, 63, 87, 27, 12, 62, 169, 140, 168, 62, 154, 179, 240, 62, 104, 42, 49, 190, 15, 145, 151, 190, 70, 68, 164, 191, 29, 18, 163, 190, 45, 28, 20, 63, 76, 15, 138, 191, 50, 16, 244, 190, 183, 203, 26, 62, 128, 117, 213, 191, 22, 53, 198, 190, 226, 3, 144, 62, 103, 43, 223, 63, 131, 42, 152, 62, 40, 157, 12, 191, 165, 12, 66, 191, 58, 78, 116, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {182, 74, 232, 190, 216, 156, 157, 61, 43, 5, 116, 190, 135, 171, 198, 62, 17, 29, 178, 189, 176, 183, 83, 62, 157, 196, 253, 190, 210, 64, 47, 187, 58, 147, 35, 190, 145, 12, 161, 61, 241, 14, 186, 62, 171, 70, 192, 60, 134, 169, 146, 190, 186, 10, 129, 189, 213, 48, 9, 191, 12, 221, 41, 191, 10, 153, 11, 191, 7, 182, 198, 190, 223, 62, 181, 62, 203, 79, 61, 191, 114, 199, 6, 190, 98, 151, 233, 62, 125, 111, 5, 63, 110, 53, 49, 62, 100, 138, 97, 62, 69, 60, 120, 61, 84, 50, 38, 62, 109, 45, 79, 190, 27, 154, 254, 190, 142, 208, 187, 62, 133, 207, 71, 62, 227, 25, 29, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {185, 150, 72, 62, 38, 48, 67, 59, 84, 15, 57, 61, 60, 99, 15, 62, 121, 48, 34, 187, 158, 32, 80, 62, 204, 78, 207, 189, 251, 211, 255, 60, 217, 124, 107, 59, 27, 5, 10, 62, 75, 186, 179, 190, 177, 161, 221, 189, 209, 195, 107, 62, 165, 224, 9, 191, 121, 167, 38, 61, 34, 115, 194, 188, 12, 206, 140, 189, 117, 161, 17, 190, 95, 85, 14, 190, 59, 53, 57, 62, 9, 168, 210, 189, 125, 28, 33, 62, 245, 227, 205, 61, 17, 226, 4, 62, 78, 66, 81, 190, 250, 29, 174, 62, 5, 124, 69, 62, 244, 254, 67, 187, 91, 26, 3, 191, 114, 150, 136, 190, 137, 39, 87, 62, 73, 105, 77, 189, 231, 3, 186, 188, 251, 198, 14, 190, 16, 158, 17, 62, 232, 84, 128, 62, 156, 152, 95, 60, 199, 234, 60, 189, 177, 119, 176, 61, 180, 153, 226, 61, 243, 213, 229, 189, 7, 91, 132, 61, 24, 33, 150, 61, 223, 94, 79, 190, 52, 169, 97, 62, 34, 252, 191, 190, 26, 215, 239, 62, 129, 210, 154, 61, 194, 174, 204, 190, 23, 155, 167, 191, 60, 222, 156, 62, 107, 202, 69, 191, 207, 89, 129, 190, 165, 56, 161, 62, 48, 119, 152, 189, 25, 97, 205, 188, 38, 248, 87, 191, 253, 135, 35, 62, 93, 172, 9, 62, 69, 149, 163, 189, 178, 190, 243, 190, 163, 65, 226, 60, 185, 0, 14, 61, 206, 124, 51, 189, 201, 251, 145, 189, 132, 42, 34, 190, 15, 207, 198, 187, 13, 224, 117, 62, 115, 52, 39, 62, 230, 92, 239, 189, 111, 202, 209, 60, 12, 64, 237, 188, 79, 44, 7, 190, 21, 45, 123, 62, 177, 143, 111, 61, 174, 206, 73, 190, 149, 162, 209, 62, 240, 26, 78, 191, 143, 192, 29, 62, 229, 32, 2, 190, 60, 171, 141, 190, 45, 43, 157, 190, 87, 152, 1, 61, 139, 217, 187, 62, 152, 70, 108, 190, 79, 204, 204, 62, 79, 155, 140, 187, 109, 147, 226, 61, 151, 156, 134, 190, 91, 122, 205, 62, 91, 59, 55, 61, 121, 232, 140, 190, 111, 98, 39, 191, 44, 177, 221, 190, 122, 221, 77, 190, 130, 18, 96, 61, 84, 210, 47, 190, 217, 193, 28, 189, 31, 209, 8, 62, 112, 211, 44, 62, 91, 165, 67, 62, 98, 227, 109, 190, 107, 128, 96, 62, 115, 205, 84, 190, 213, 53, 190, 187, 244, 181, 162, 62, 249, 222, 82, 61, 248, 180, 164, 61, 98, 144, 255, 61, 20, 122, 46, 189, 186, 41, 216, 189, 223, 249, 119, 190, 165, 235, 36, 191, 161, 70, 23, 62, 128, 11, 59, 62, 139, 46, 59, 63, 126, 65, 228, 61, 100, 230, 238, 61, 223, 69, 132, 190, 103, 145, 173, 189, 205, 179, 47, 189, 113, 229, 144, 62, 109, 14, 105, 62, 70, 136, 242, 61, 19, 197, 152, 188, 66, 220, 54, 190, 127, 193, 161, 189, 86, 236, 120, 189, 83, 115, 196, 60, 203, 245, 90, 62, 128, 173, 38, 61, 122, 103, 130, 60, 86, 176, 115, 189, 110, 124, 88, 62, 95, 251, 22, 189, 56, 69, 41, 62, 220, 43, 199, 190, 18, 201, 11, 62, 8, 99, 57, 60, 78, 10, 194, 189, 197, 78, 191, 60, 136, 203, 66, 190, 217, 13, 121, 60, 117, 26, 249, 59, 37, 184, 170, 61, 173, 201, 162, 189, 116, 25, 148, 59, 116, 230, 249, 189, 188, 112, 164, 61, 181, 52, 224, 62, 176, 52, 85, 62, 136, 118, 253, 61, 46, 159, 85, 62, 112, 160, 187, 61, 113, 181, 132, 61, 200, 200, 223, 188, 159, 107, 41, 188, 56, 226, 171, 61, 229, 211, 156, 62, 29, 251, 245, 58, 15, 80, 141, 189, 147, 124, 250, 190, 111, 182, 123, 60, 44, 111, 40, 189, 199, 37, 251, 59, 211, 173, 112, 189, 151, 171, 158, 60, 161, 223, 180, 61, 197, 188, 33, 59, 162, 218, 190, 190, 84, 89, 13, 62, 214, 53, 231, 60, 10, 230, 46, 190, 247, 135, 185, 62, 178, 65, 89, 62, 178, 134, 29, 62, 4, 146, 140, 61, 37, 244, 46, 190, 79, 208, 224, 190, 32, 199, 235, 61, 176, 116, 11, 61, 8, 227, 211, 189, 115, 120, 120, 61, 46, 83, 254, 59, 163, 84, 126, 190, 144, 94, 26, 190, 227, 154, 140, 190, 229, 67, 73, 61, 167, 22, 45, 62, 142, 189, 137, 62, 105, 44, 135, 190, 89, 191, 23, 189, 103, 46, 229, 60, 31, 233, 128, 190, 173, 188, 154, 189, 18, 162, 141, 61, 223, 231, 48, 62, 111, 246, 73, 190, 182, 119, 164, 61, 106, 112, 105, 62, 167, 218, 190, 190, 56, 113, 207, 62, 208, 184, 241, 189, 0, 190, 60, 190, 99, 68, 210, 62, 54, 15, 80, 191, 183, 94, 182, 62, 194, 203, 27, 62, 245, 176, 128, 189, 85, 161, 53, 191, 139, 162, 148, 189, 34, 114, 36, 62, 87, 133, 255, 190, 99, 247, 251, 62, 94, 18, 134, 190, 48, 201, 7, 191, 86, 39, 155, 190, 20, 31, 231, 62, 15, 136, 157, 62, 6, 76, 212, 189, 54, 38, 230, 190, 203, 181, 124, 190, 5, 105, 216, 189, 149, 24, 18, 62, 19, 115, 149, 61, 60, 158, 83, 188, 190, 253, 57, 57, 166, 22, 21, 62, 246, 194, 27, 62, 99, 232, 14, 189, 24, 38, 170, 189, 70, 162, 62, 190, 103, 97, 87, 61, 198, 215, 243, 189, 70, 238, 180, 58, 32, 95, 8, 190, 174, 142, 161, 189, 44, 169, 133, 61, 254, 16, 16, 62, 169, 134, 233, 61, 24, 118, 255, 61, 199, 26, 194, 186, 194, 246, 33, 190, 32, 203, 178, 189, 91, 252, 171, 61, 42, 64, 10, 60, 124, 187, 10, 61, 147, 0, 78, 189, 8, 20, 199, 189, 30, 153, 15, 190, 139, 112, 65, 189, 8, 199, 2, 188, 237, 235, 32, 190, 122, 103, 55, 190, 39, 124, 197, 189, 122, 120, 16, 190, 132, 66, 196, 60, 183, 95, 118, 190, 230, 122, 116, 190, 70, 31, 99, 189, 27, 133, 144, 62, 57, 216, 202, 190, 38, 220, 11, 62, 134, 240, 0, 191, 96, 203, 33, 190, 30, 96, 118, 61, 62, 96, 173, 62, 142, 109, 144, 62, 197, 131, 32, 191, 235, 122, 196, 190, 168, 50, 30, 191, 139, 51, 136, 189, 13, 64, 22, 190, 220, 137, 253, 191, 54, 117, 81, 62, 15, 207, 126, 190, 184, 250, 105, 191, 50, 42, 13, 62, 74, 236, 45, 62, 18, 170, 253, 190, 145, 36, 1, 62, 140, 143, 185, 61, 54, 126, 135, 188, 217, 231, 25, 62, 227, 219, 65, 190, 71, 206, 220, 58, 198, 150, 228, 191, 118, 197, 182, 62, 214, 84, 191, 61, 171, 35, 5, 187, 138, 115, 251, 60, 236, 95, 140, 62, 136, 87, 190, 59, 202, 49, 55, 190, 182, 183, 237, 61, 85, 49, 215, 61, 10, 171, 174, 60, 144, 92, 70, 60, 188, 199, 7, 62, 238, 161, 1, 62, 41, 75, 14, 61, 203, 63, 99, 191, 149, 22, 142, 188, 251, 115, 66, 62, 69, 194, 252, 60, 223, 170, 75, 191, 15, 246, 131, 62, 222, 217, 1, 190, 10, 157, 126, 191, 165, 80, 96, 62, 240, 22, 153, 61, 59, 233, 83, 191, 239, 87, 50, 61, 67, 18, 222, 62, 154, 233, 131, 189, 200, 26, 62, 61, 42, 45, 46, 191, 210, 162, 171, 61, 99, 247, 221, 190, 2, 47, 51, 189, 40, 63, 77, 62, 150, 246, 254, 188, 103, 196, 104, 62, 234, 166, 188, 190, 201, 91, 185, 61, 13, 56, 81, 190, 138, 152, 96, 189, 187, 224, 43, 59, 197, 133, 227, 61, 244, 139, 11, 62, 171, 22, 93, 61, 101, 29, 147, 62, 190, 6, 92, 62, 162, 254, 154, 62, 233, 98, 195, 62, 127, 199, 137, 62, 246, 141, 214, 187, 203, 22, 205, 188, 144, 75, 108, 191, 5, 215, 129, 62, 193, 213, 16, 190, 184, 156, 199, 189, 244, 148, 52, 191, 120, 120, 27, 190, 160, 96, 193, 189, 12, 91, 107, 190, 68, 39, 128, 62, 224, 253, 234, 62, 90, 73, 182, 62, 24, 153, 71, 190, 143, 220, 85, 189, 19, 189, 183, 190, 251, 178, 22, 63, 168, 27, 166, 190, 79, 141, 58, 190, 182, 137, 239, 187, 110, 231, 171, 61, 22, 5, 193, 61, 43, 127, 56, 61, 235, 195, 133, 189, 77, 49, 147, 190, 136, 204, 89, 62, 120, 160, 177, 189, 68, 38, 185, 62, 89, 180, 94, 62, 148, 87, 125, 190, 40, 95, 198, 61, 182, 253, 152, 62, 150, 159, 94, 190, 1, 17, 116, 190, 213, 131, 190, 189, 141, 42, 4, 62, 187, 8, 1, 190, 80, 177, 11, 62, 156, 154, 18, 190, 132, 206, 169, 61, 114, 144, 146, 190, 96, 74, 138, 62, 248, 222, 193, 61, 79, 48, 172, 62, 11, 49, 166, 190, 247, 80, 42, 190, 98, 12, 200, 61, 63, 123, 159, 190, 69, 8, 59, 62, 91, 238, 14, 190, 200, 55, 168, 190, 62, 45, 142, 190, 168, 70, 185, 59, 122, 0, 214, 190, 38, 69, 185, 61, 205, 94, 71, 191, 94, 152, 222, 190, 178, 136, 108, 62, 131, 91, 129, 62, 11, 150, 66, 62, 15, 171, 31, 190, 112, 174, 43, 189, 115, 27, 226, 189, 241, 33, 32, 62, 107, 33, 159, 190, 229, 0, 252, 191, 90, 53, 17, 189, 34, 4, 99, 189, 218, 133, 3, 191, 93, 72, 25, 191, 238, 238, 97, 62, 141, 92, 191, 190, 191, 67, 229, 60, 61, 104, 136, 60, 95, 243, 16, 62, 125, 131, 231, 188, 117, 94, 31, 62, 213, 24, 97, 62, 74, 129, 231, 191, 188, 70, 110, 62, 14, 252, 125, 190, 200, 158, 208, 61, 177, 166, 16, 62, 223, 118, 43, 190, 88, 235, 43, 62, 138, 31, 226, 61, 85, 114, 74, 189, 43, 112, 82, 62, 244, 192, 114, 62, 36, 116, 123, 61, 243, 207, 232, 190, 87, 132, 176, 189, 236, 197, 19, 62, 101, 133, 126, 191, 115, 90, 73, 62, 46, 208, 171, 62, 7, 224, 4, 62, 114, 6, 157, 190, 4, 14, 244, 190, 133, 33, 149, 62, 186, 162, 207, 188, 180, 205, 85, 189, 35, 43, 131, 190, 47, 230, 68, 61, 51, 141, 1, 190, 154, 96, 30, 62, 26, 2, 130, 62, 41, 212, 22, 191, 106, 242, 205, 189, 55, 196, 24, 191, 99, 245, 202, 189, 55, 165, 170, 190, 13, 101, 215, 189, 133, 62, 50, 189, 129, 154, 246, 60, 178, 249, 247, 189, 26, 92, 162, 61, 10, 212, 11, 190, 70, 20, 87, 190, 213, 100, 153, 62, 53, 238, 142, 189, 50, 185, 23, 61, 242, 32, 42, 189, 215, 35, 136, 190, 159, 129, 9, 191, 217, 184, 138, 62, 179, 239, 138, 190, 92, 118, 49, 62, 115, 25, 102, 62, 3, 106, 111, 190, 178, 169, 191, 189, 54, 94, 145, 190, 13, 16, 134, 62, 146, 102, 99, 188, 75, 28, 130, 61, 251, 53, 127, 188, 38, 72, 199, 61, 159, 253, 22, 191, 238, 45, 109, 189, 118, 175, 133, 190, 235, 77, 23, 62, 81, 164, 65, 62, 116, 41, 128, 190, 146, 29, 212, 61, 113, 183, 205, 190, 146, 120, 217, 62, 87, 242, 9, 62, 163, 60, 105, 190, 145, 94, 241, 189, 3, 99, 39, 190, 219, 198, 26, 191, 180, 52, 103, 62, 145, 38, 180, 190, 248, 137, 78, 61, 172, 114, 233, 61, 206, 207, 181, 190, 222, 41, 162, 190, 127, 175, 170, 62, 211, 88, 115, 189, 235, 236, 216, 60, 12, 158, 66, 62, 38, 163, 12, 62, 125, 158, 180, 190, 39, 71, 30, 60, 167, 219, 72, 60, 242, 120, 49, 189, 186, 32, 72, 62, 137, 67, 39, 62, 124, 99, 212, 61, 151, 82, 151, 190, 27, 102, 161, 188, 74, 115, 96, 190, 195, 93, 55, 62, 190, 142, 32, 62, 126, 121, 206, 189, 126, 239, 33, 62, 193, 70, 29, 190, 228, 166, 82, 60, 13, 237, 79, 62, 41, 173, 227, 190, 249, 196, 253, 61, 208, 104, 32, 62, 16, 156, 107, 61, 24, 52, 150, 62, 142, 143, 130, 62, 83, 77, 39, 62, 243, 235, 99, 191, 94, 80, 137, 190, 226, 215, 168, 61, 4, 244, 0, 191, 244, 155, 107, 62, 45, 175, 93, 62, 18, 101, 175, 188, 69, 113, 185, 190, 19, 133, 16, 191, 200, 206, 113, 189, 94, 97, 91, 62, 81, 211, 125, 60, 254, 14, 30, 61, 42, 189, 181, 61, 147, 181, 44, 186, 253, 221, 152, 62, 62, 186, 133, 188, 241, 218, 195, 190, 47, 23, 8, 191, 193, 99, 105, 190, 76, 135, 223, 61, 111, 197, 24, 191, 176, 83, 12, 189, 115, 62, 106, 190, 212, 124, 47, 191, 108, 79, 176, 190, 152, 178, 28, 191, 123, 124, 41, 189, 180, 93, 8, 191, 117, 178, 133, 62, 221, 1, 31, 190, 4, 30, 62, 191, 172, 95, 187, 62, 0, 241, 111, 190, 212, 196, 51, 190, 74, 198, 10, 63, 89, 97, 60, 61, 247, 37, 8, 62, 192, 123, 205, 61, 17, 75, 1, 189, 207, 208, 163, 190, 50, 245, 26, 62, 222, 190, 48, 62, 149, 186, 61, 190, 15, 140, 188, 62, 98, 240, 74, 61, 106, 27, 111, 189, 76, 225, 6, 190, 254, 244, 190, 190, 0, 3, 167, 190, 84, 240, 104, 61, 74, 193, 16, 63, 226, 157, 5, 62, 22, 223, 135, 62, 69, 6, 179, 61, 146, 218, 173, 61, 202, 92, 199, 62, 178, 227, 129, 190, 46, 96, 171, 186, 176, 184, 25, 62, 149, 197, 134, 189, 149, 98, 131, 62, 14, 51, 193, 61, 130, 92, 178, 62, 105, 102, 192, 191, 12, 82, 166, 60, 127, 90, 66, 62, 149, 189, 58, 191, 199, 129, 85, 62, 33, 220, 181, 62, 66, 109, 87, 61, 213, 185, 161, 190, 177, 41, 129, 191, 224, 98, 180, 188, 64, 127, 79, 62, 253, 221, 26, 62, 220, 28, 16, 190, 48, 122, 105, 62, 180, 93, 120, 59, 133, 84, 149, 62, 253, 173, 4, 62, 253, 18, 6, 191, 73, 199, 75, 191, 218, 254, 42, 190, 149, 162, 210, 61, 241, 213, 83, 191, 174, 116, 15, 190, 169, 163, 84, 61, 211, 19, 179, 188, 24, 105, 228, 190, 177, 47, 125, 190, 246, 0, 8, 191, 154, 203, 114, 189, 158, 140, 100, 61, 139, 33, 126, 61, 112, 109, 81, 190, 54, 168, 105, 190, 32, 240, 211, 190, 126, 46, 74, 191, 35, 50, 95, 62, 55, 66, 34, 62, 0, 146, 184, 62, 177, 68, 30, 62, 251, 241, 29, 189, 13, 176, 71, 190, 189, 204, 62, 190, 41, 83, 217, 62, 19, 106, 165, 190, 146, 73, 204, 188, 244, 4, 233, 62, 138, 32, 152, 62, 200, 209, 1, 191, 226, 205, 132, 189, 209, 156, 79, 190, 174, 189, 185, 62, 219, 145, 84, 62, 28, 195, 7, 191, 52, 85, 70, 190, 30, 132, 25, 190, 169, 199, 51, 189, 242, 180, 109, 61, 18, 2, 8, 190, 182, 154, 133, 61, 220, 220, 71, 189, 226, 43, 221, 61, 210, 186, 227, 61, 180, 152, 5, 190, 195, 123, 51, 61, 83, 137, 152, 61, 232, 125, 209, 60, 132, 140, 92, 190, 254, 17, 205, 190, 144, 86, 91, 61, 147, 158, 61, 62, 127, 171, 171, 189, 16, 94, 136, 190, 27, 144, 154, 190, 86, 106, 106, 61, 57, 132, 143, 190, 203, 210, 97, 190, 103, 146, 147, 61, 25, 80, 169, 190, 210, 184, 123, 189, 174, 75, 11, 190, 64, 134, 155, 61, 11, 174, 109, 190, 32, 137, 251, 189, 207, 158, 213, 190, 110, 25, 21, 190, 92, 148, 195, 190, 95, 80, 235, 189, 198, 202, 169, 60, 70, 10, 4, 62, 248, 247, 178, 61, 250, 110, 66, 62, 252, 36, 64, 62, 216, 91, 75, 59, 206, 49, 195, 61, 25, 75, 7, 190, 92, 194, 252, 61, 135, 191, 225, 190, 97, 215, 156, 62, 203, 119, 96, 62, 117, 63, 241, 190, 70, 120, 189, 62, 39, 0, 152, 62, 233, 171, 212, 61, 74, 12, 184, 190, 155, 161, 106, 190, 49, 7, 48, 62, 226, 189, 188, 61, 86, 200, 137, 62, 231, 114, 52, 62, 93, 105, 49, 61, 168, 73, 184, 190, 221, 5, 49, 62, 221, 167, 38, 61, 0, 46, 212, 190, 189, 200, 51, 191, 211, 236, 107, 190, 232, 75, 12, 62, 206, 167, 102, 190, 132, 102, 30, 191, 173, 20, 159, 61, 245, 167, 208, 61, 237, 148, 40, 62, 245, 235, 63, 62, 215, 117, 81, 62, 127, 222, 49, 190, 216, 172, 233, 188, 134, 131, 150, 62, 230, 110, 204, 61, 189, 51, 27, 191, 150, 50, 55, 190, 18, 131, 104, 62, 175, 175, 34, 191, 192, 167, 182, 62, 49, 23, 143, 62, 147, 90, 21, 190, 181, 21, 9, 190, 178, 191, 31, 191, 240, 9, 234, 61, 16, 245, 54, 191, 80, 160, 47, 62, 165, 8, 152, 191, 44, 244, 63, 191, 1, 73, 2, 190, 38, 68, 145, 62, 201, 218, 226, 61, 38, 172, 79, 190, 72, 219, 12, 191, 221, 10, 116, 191, 61, 55, 83, 62, 146, 72, 13, 191, 245, 172, 241, 189, 185, 61, 22, 62, 157, 88, 60, 62, 14, 64, 25, 60, 229, 40, 152, 189, 94, 249, 159, 59, 214, 220, 200, 61, 211, 147, 39, 61, 30, 127, 21, 61, 181, 22, 133, 62, 15, 108, 58, 62, 147, 55, 13, 191, 24, 97, 234, 190, 42, 123, 209, 189, 243, 127, 30, 188, 177, 147, 115, 62, 41, 198, 252, 60, 198, 40, 181, 189, 190, 59, 156, 189, 158, 140, 149, 190, 200, 147, 42, 62, 58, 223, 153, 62, 64, 223, 174, 61, 99, 210, 83, 62, 95, 197, 195, 62, 141, 187, 191, 190, 74, 1, 75, 62, 213, 173, 237, 190, 239, 27, 205, 61, 88, 17, 79, 62, 145, 206, 102, 189, 5, 254, 252, 188, 13, 188, 234, 190, 49, 122, 20, 62, 11, 15, 108, 62, 10, 3, 59, 61, 58, 20, 176, 61, 16, 153, 185, 190, 118, 241, 59, 189, 69, 28, 213, 189, 98, 42, 124, 62, 253, 139, 63, 62, 118, 229, 39, 62, 216, 242, 195, 187, 226, 114, 230, 190, 194, 245, 132, 191, 21, 55, 109, 190, 208, 141, 245, 188, 104, 183, 26, 189, 11, 120, 111, 190, 79, 53, 104, 62, 246, 41, 166, 190, 210, 179, 125, 190, 143, 98, 99, 62, 128, 125, 82, 190, 102, 51, 181, 190, 75, 154, 37, 191, 225, 111, 19, 62, 105, 237, 207, 189, 255, 66, 251, 189, 8, 177, 241, 190, 204, 59, 159, 190, 55, 121, 136, 190, 134, 93, 152, 189, 154, 31, 132, 191, 105, 174, 138, 62, 50, 243, 18, 62, 170, 173, 111, 60, 132, 104, 170, 190, 109, 204, 179, 61, 70, 92, 146, 191, 4, 99, 105, 59, 64, 173, 148, 62, 171, 133, 175, 190, 14, 208, 120, 62, 136, 174, 51, 192, 247, 169, 244, 190, 76, 245, 185, 62, 47, 229, 43, 190, 82, 17, 143, 190, 148, 44, 101, 62, 11, 86, 130, 189, 168, 82, 24, 189, 204, 28, 201, 190, 94, 65, 30, 61, 233, 238, 40, 62, 210, 1, 156, 62, 178, 240, 24, 62, 12, 135, 134, 61, 80, 140, 223, 190, 211, 172, 43, 190, 229, 3, 215, 191, 101, 50, 63, 63, 187, 165, 166, 189, 162, 168, 164, 61, 238, 216, 66, 62, 162, 124, 44, 191, 48, 240, 230, 62, 255, 212, 214, 62, 18, 218, 75, 62, 108, 39, 85, 62, 72, 146, 163, 61, 122, 6, 68, 191, 7, 81, 13, 189, 84, 114, 185, 62, 27, 28, 7, 190, 79, 39, 144, 62, 83, 84, 2, 192, 214, 211, 114, 190, 225, 210, 152, 62, 111, 40, 248, 189, 105, 57, 252, 61, 153, 7, 111, 61, 140, 43, 11, 62, 119, 172, 132, 190, 142, 181, 207, 190, 117, 146, 75, 62, 152, 82, 31, 62, 207, 16, 65, 188, 237, 249, 137, 62, 149, 137, 22, 62, 48, 231, 179, 190, 31, 67, 84, 190, 128, 251, 20, 191, 157, 204, 51, 63, 47, 153, 37, 189, 143, 205, 148, 61, 228, 199, 144, 60, 244, 67, 106, 61, 20, 208, 238, 190, 129, 1, 69, 62, 34, 4, 232, 190, 225, 217, 219, 190, 246, 74, 11, 62, 135, 234, 148, 190, 123, 211, 137, 62, 139, 209, 36, 191, 206, 80, 139, 61, 181, 11, 210, 191, 71, 18, 81, 188, 51, 93, 176, 62, 105, 6, 249, 190, 96, 86, 47, 62, 165, 3, 213, 61, 62, 216, 72, 189, 128, 175, 93, 189, 74, 210, 249, 190, 189, 0, 0, 62, 221, 112, 117, 62, 213, 74, 223, 61, 227, 44, 180, 189, 18, 20, 91, 61, 47, 195, 86, 62, 57, 93, 53, 62, 147, 159, 186, 189, 215, 234, 107, 191, 35, 245, 3, 192, 56, 150, 124, 190, 13, 174, 163, 62, 56, 97, 58, 191, 5, 209, 169, 61, 5, 146, 241, 189, 150, 165, 181, 189, 88, 252, 193, 189, 127, 42, 5, 61, 94, 39, 105, 62, 194, 161, 106, 61, 52, 104, 8, 189, 67, 250, 193, 190, 223, 75, 6, 62, 68, 150, 90, 61, 42, 116, 146, 61, 6, 89, 35, 62, 194, 235, 170, 190, 13, 240, 120, 189, 116, 82, 165, 62, 249, 241, 122, 62, 232, 67, 183, 60, 88, 223, 1, 62, 102, 105, 128, 189, 80, 230, 32, 62, 124, 184, 4, 62, 114, 155, 133, 62, 43, 218, 152, 61, 106, 96, 162, 61, 163, 136, 126, 61, 18, 171, 75, 60, 140, 19, 133, 61, 199, 19, 228, 189, 209, 162, 128, 61, 138, 210, 39, 188, 29, 251, 25, 190, 158, 145, 104, 190, 124, 59, 122, 189, 149, 16, 145, 61, 152, 38, 255, 188, 199, 236, 89, 190, 197, 33, 80, 190, 79, 196, 59, 189, 15, 255, 183, 62, 237, 102, 197, 59, 254, 123, 216, 61, 165, 139, 166, 61, 73, 76, 224, 190, 30, 23, 67, 191, 75, 200, 185, 62, 182, 154, 17, 62, 225, 105, 45, 62, 89, 234, 14, 62, 191, 245, 187, 189, 212, 154, 204, 190, 148, 235, 186, 190, 182, 187, 103, 62, 182, 253, 230, 189, 88, 70, 153, 62, 122, 110, 9, 62, 212, 92, 29, 62, 217, 101, 28, 191, 44, 38, 124, 189, 49, 89, 238, 189, 37, 141, 129, 62, 166, 166, 6, 62, 231, 29, 164, 190, 78, 236, 40, 61, 167, 77, 152, 191, 81, 247, 151, 61, 152, 81, 24, 61, 216, 198, 12, 63, 241, 75, 163, 188, 72, 82, 129, 62, 222, 248, 11, 191, 73, 119, 157, 190, 239, 173, 1, 63, 180, 117, 228, 189, 122, 20, 223, 190, 143, 252, 143, 191, 51, 33, 129, 190, 195, 49, 111, 190, 139, 78, 25, 191, 12, 84, 0, 191, 102, 169, 60, 189, 251, 65, 121, 62, 124, 73, 232, 61, 14, 9, 177, 190, 249, 117, 157, 191, 147, 193, 225, 62, 20, 210, 134, 190, 232, 209, 147, 191, 209, 83, 123, 62, 111, 1, 89, 60, 175, 243, 158, 190, 137, 144, 178, 191, 150, 172, 204, 190, 118, 222, 147, 191, 126, 250, 13, 60, 113, 6, 254, 189, 113, 154, 177, 190, 147, 107, 162, 61, 208, 83, 80, 62, 159, 127, 50, 190, 254, 245, 44, 190, 224, 208, 90, 60, 104, 17, 215, 190, 155, 158, 84, 62, 75, 74, 183, 190, 167, 28, 103, 189, 6, 2, 134, 188, 51, 165, 9, 191, 52, 65, 246, 190, 5, 147, 69, 62, 155, 225, 141, 60, 9, 211, 74, 62, 47, 195, 68, 62, 147, 64, 177, 189, 174, 241, 73, 190, 88, 233, 236, 190, 158, 2, 107, 62, 59, 80, 114, 190, 146, 110, 86, 62, 240, 238, 160, 62, 94, 156, 73, 58, 243, 93, 226, 190, 153, 119, 38, 62, 229, 68, 249, 189, 90, 204, 127, 62, 216, 31, 222, 60, 253, 68, 146, 190, 70, 198, 32, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {98, 202, 52, 62, 150, 181, 125, 62, 129, 175, 222, 61, 106, 226, 177, 189, 238, 98, 224, 62, 34, 213, 30, 62, 224, 43, 95, 62, 127, 19, 6, 190, 17, 5, 19, 62, 4, 213, 0, 62, 213, 125, 200, 190, 113, 108, 165, 188, 11, 146, 164, 61, 230, 86, 80, 190, 59, 146, 136, 62, 24, 109, 29, 190, 7, 14, 8, 189, 34, 231, 228, 189, 234, 209, 88, 62, 189, 45, 27, 190, 219, 109, 130, 188, 18, 205, 62, 187, 128, 170, 123, 190, 121, 112, 32, 62, 82, 58, 27, 62, 35, 67, 147, 186, 243, 210, 44, 188, 240, 20, 186, 189, 210, 78, 74, 62, 179, 17, 180, 188, 240, 255, 14, 189, 54, 31, 153, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {86, 165, 166, 189, 60, 237, 164, 190, 214, 171, 29, 191, 63, 202, 53, 62, 167, 247, 253, 56, 18, 83, 182, 190, 144, 138, 61, 191, 22, 161, 101, 189, 121, 13, 118, 191, 172, 182, 50, 191, 203, 195, 27, 63, 161, 126, 138, 190, 82, 174, 143, 191, 164, 148, 22, 191, 56, 73, 0, 62, 84, 50, 1, 62, 92, 53, 80, 190, 193, 157, 231, 62, 113, 231, 34, 191, 171, 125, 5, 63, 3, 50, 215, 189, 51, 201, 100, 190, 167, 199, 72, 63, 139, 153, 92, 61, 215, 72, 50, 191, 208, 179, 32, 63, 63, 120, 180, 62, 157, 198, 249, 190, 76, 40, 17, 60, 186, 123, 222, 62, 146, 163, 137, 63, 189, 209, 126, 62, 189, 174, 44, 190, 38, 88, 24, 62, 174, 75, 128, 62, 51, 145, 130, 190, 150, 238, 236, 190, 131, 195, 201, 62, 233, 162, 172, 62, 101, 232, 220, 61, 73, 107, 35, 62, 21, 232, 26, 62, 245, 207, 91, 61, 69, 177, 153, 61, 78, 237, 146, 188, 88, 112, 222, 62, 78, 93, 219, 190, 119, 117, 128, 190, 183, 133, 224, 61, 74, 78, 208, 189, 89, 89, 53, 190, 92, 83, 20, 63, 23, 222, 255, 189, 104, 110, 46, 61, 193, 82, 7, 63, 235, 253, 251, 190, 162, 230, 33, 63, 24, 23, 20, 191, 168, 244, 161, 190, 225, 116, 44, 61, 228, 57, 153, 190, 121, 228, 75, 190, 212, 90, 70, 62, 63, 137, 123, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {97, 51, 168, 189, 83, 135, 250, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {102, 58, 19, 63, 196, 138, 182, 63, 126, 218, 98, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {226, 151, 17, 63, 9, 39, 61, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0030/steps/000000000020000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}