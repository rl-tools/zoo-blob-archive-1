// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 171, 46, 191, 104, 193, 226, 61, 241, 158, 195, 190, 163, 219, 215, 62, 145, 34, 90, 61, 0, 191, 247, 190, 122, 13, 43, 63, 140, 169, 14, 63, 223, 10, 237, 190, 108, 64, 183, 190, 133, 174, 182, 62, 232, 252, 35, 190, 130, 209, 20, 190, 104, 82, 37, 63, 56, 28, 250, 190, 227, 106, 170, 189, 37, 92, 75, 190, 234, 229, 211, 62, 20, 242, 189, 190, 21, 112, 16, 63, 36, 69, 98, 190, 177, 46, 203, 62, 237, 241, 2, 191, 120, 197, 19, 62, 175, 101, 9, 61, 78, 143, 201, 62, 210, 184, 207, 190, 125, 97, 119, 61, 145, 100, 20, 63, 77, 71, 21, 190, 216, 73, 222, 189, 73, 193, 127, 190, 53, 219, 189, 189, 194, 92, 184, 190, 22, 59, 118, 62, 201, 102, 216, 189, 159, 135, 230, 61, 12, 79, 17, 63, 195, 222, 190, 62, 168, 194, 114, 60, 72, 89, 62, 191, 59, 166, 175, 190, 241, 189, 254, 62, 32, 199, 195, 190, 16, 176, 227, 62, 69, 26, 81, 62, 29, 64, 13, 191, 82, 21, 237, 62, 50, 203, 23, 190, 19, 89, 70, 191, 72, 140, 161, 62, 72, 187, 186, 190, 215, 157, 23, 62, 90, 193, 203, 62, 2, 11, 11, 190, 138, 120, 170, 189, 103, 87, 153, 189, 29, 217, 100, 61, 17, 25, 117, 62, 128, 112, 238, 62, 225, 82, 142, 62, 128, 151, 237, 190, 115, 229, 172, 189, 6, 103, 238, 61, 72, 208, 25, 63, 76, 29, 7, 60, 237, 204, 94, 61, 155, 4, 22, 191, 104, 199, 133, 189, 139, 149, 234, 62, 171, 15, 55, 191, 205, 251, 8, 190, 57, 132, 0, 191, 11, 100, 192, 190, 99, 146, 206, 62, 241, 191, 253, 61, 98, 14, 36, 63, 239, 124, 86, 60, 31, 177, 93, 62, 113, 249, 39, 63, 224, 238, 3, 191, 96, 238, 205, 59, 22, 5, 61, 61, 25, 89, 175, 190, 143, 240, 71, 62, 230, 131, 129, 190, 28, 124, 230, 190, 57, 1, 57, 62, 142, 151, 33, 191, 77, 112, 191, 190, 144, 253, 203, 61, 139, 94, 52, 190, 97, 131, 236, 62, 245, 29, 16, 191, 46, 232, 36, 191, 70, 218, 236, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {13, 205, 240, 190, 154, 254, 252, 189, 245, 7, 235, 190, 152, 179, 161, 62, 54, 105, 90, 62, 166, 137, 20, 63, 92, 104, 147, 190, 162, 16, 29, 63, 40, 156, 248, 190, 219, 11, 111, 62, 222, 62, 163, 62, 171, 41, 152, 190, 7, 211, 150, 189, 169, 128, 94, 188, 215, 107, 224, 190, 255, 38, 21, 191, 80, 194, 81, 62, 213, 184, 53, 190, 105, 161, 36, 62, 248, 88, 243, 190, 139, 96, 182, 62, 241, 221, 10, 63, 52, 50, 39, 63, 143, 31, 26, 63, 46, 41, 163, 62, 196, 249, 118, 62, 244, 182, 219, 62, 114, 209, 137, 61, 189, 50, 233, 190, 16, 35, 21, 63, 79, 206, 218, 62, 98, 5, 6, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {57, 126, 68, 62, 23, 250, 246, 59, 74, 182, 43, 188, 26, 224, 228, 61, 242, 19, 2, 189, 144, 65, 46, 62, 118, 82, 5, 190, 216, 115, 107, 60, 146, 212, 72, 188, 187, 134, 217, 61, 0, 56, 70, 190, 128, 250, 194, 188, 165, 3, 253, 61, 211, 192, 35, 190, 180, 189, 148, 61, 121, 29, 201, 60, 80, 211, 3, 61, 41, 15, 101, 188, 141, 26, 141, 189, 132, 2, 42, 62, 124, 105, 189, 189, 16, 13, 16, 62, 63, 5, 158, 61, 254, 59, 200, 61, 21, 156, 238, 189, 48, 202, 155, 62, 75, 126, 36, 62, 29, 51, 66, 62, 101, 127, 7, 190, 201, 215, 4, 190, 247, 163, 30, 62, 231, 157, 1, 189, 223, 205, 13, 190, 61, 188, 209, 189, 82, 55, 6, 62, 175, 135, 81, 62, 129, 244, 80, 189, 172, 61, 95, 188, 80, 124, 160, 188, 144, 165, 155, 61, 75, 204, 74, 190, 209, 110, 218, 61, 92, 232, 222, 61, 19, 5, 38, 190, 147, 54, 143, 61, 138, 148, 248, 189, 76, 225, 184, 61, 9, 121, 76, 190, 62, 124, 121, 190, 177, 195, 110, 189, 187, 226, 186, 61, 169, 249, 188, 189, 231, 134, 211, 189, 13, 148, 174, 62, 168, 150, 11, 190, 182, 226, 127, 61, 31, 97, 56, 190, 111, 220, 248, 61, 135, 130, 40, 62, 159, 89, 177, 61, 7, 114, 6, 189, 119, 64, 83, 61, 101, 134, 79, 61, 57, 113, 46, 190, 230, 53, 249, 60, 221, 20, 107, 189, 64, 11, 171, 60, 221, 124, 68, 62, 252, 210, 2, 62, 172, 236, 148, 189, 199, 122, 87, 61, 214, 118, 48, 189, 207, 103, 226, 189, 2, 231, 63, 62, 32, 2, 229, 61, 52, 203, 85, 62, 148, 58, 131, 62, 42, 165, 27, 190, 235, 112, 32, 62, 5, 253, 34, 62, 241, 87, 79, 190, 47, 97, 130, 61, 63, 83, 85, 61, 25, 64, 132, 62, 243, 46, 126, 190, 97, 108, 164, 62, 20, 197, 42, 61, 115, 173, 165, 188, 77, 198, 8, 60, 73, 5, 60, 62, 223, 157, 178, 60, 61, 176, 176, 188, 124, 10, 128, 190, 220, 130, 49, 190, 183, 196, 34, 190, 213, 140, 255, 59, 236, 138, 15, 190, 141, 116, 134, 188, 249, 231, 41, 62, 41, 135, 5, 61, 70, 164, 22, 62, 211, 103, 27, 190, 27, 75, 79, 62, 105, 190, 144, 189, 203, 189, 196, 61, 168, 236, 31, 62, 251, 176, 116, 61, 240, 64, 18, 62, 210, 153, 36, 190, 6, 24, 214, 187, 216, 67, 91, 188, 130, 200, 80, 190, 125, 158, 215, 189, 186, 178, 140, 189, 15, 224, 12, 62, 1, 232, 160, 61, 65, 38, 225, 188, 54, 10, 183, 189, 98, 64, 132, 190, 80, 179, 84, 190, 139, 1, 105, 61, 91, 173, 187, 61, 213, 149, 42, 62, 50, 96, 38, 62, 170, 101, 3, 190, 44, 110, 45, 190, 205, 166, 24, 190, 113, 31, 85, 61, 99, 225, 56, 61, 29, 125, 26, 62, 20, 94, 3, 61, 145, 56, 149, 61, 121, 71, 207, 60, 164, 47, 185, 61, 169, 114, 166, 61, 217, 0, 247, 61, 192, 202, 30, 190, 68, 204, 139, 61, 197, 181, 70, 189, 186, 116, 50, 190, 250, 131, 117, 188, 1, 83, 24, 189, 93, 89, 14, 62, 104, 154, 238, 189, 46, 179, 53, 189, 108, 20, 8, 190, 98, 184, 129, 61, 69, 174, 50, 190, 208, 207, 168, 60, 112, 196, 146, 62, 90, 194, 112, 61, 186, 237, 129, 61, 33, 226, 141, 188, 186, 98, 31, 61, 179, 105, 240, 187, 65, 156, 112, 61, 179, 134, 34, 189, 45, 243, 134, 61, 51, 58, 75, 62, 235, 122, 63, 60, 63, 239, 166, 189, 40, 217, 9, 190, 155, 117, 202, 61, 104, 12, 181, 60, 81, 251, 233, 186, 220, 92, 136, 60, 60, 219, 56, 60, 250, 190, 188, 189, 87, 63, 175, 61, 8, 81, 111, 60, 105, 248, 140, 61, 38, 81, 10, 61, 226, 123, 12, 190, 220, 124, 16, 62, 105, 25, 141, 61, 234, 135, 75, 61, 94, 50, 23, 61, 182, 10, 164, 189, 131, 221, 12, 190, 5, 135, 220, 189, 228, 255, 226, 189, 88, 95, 32, 61, 201, 92, 105, 189, 246, 34, 63, 190, 200, 16, 87, 190, 242, 68, 29, 188, 97, 75, 2, 190, 104, 198, 209, 189, 14, 233, 23, 62, 128, 27, 180, 61, 73, 144, 236, 189, 98, 157, 89, 189, 112, 60, 143, 61, 122, 27, 128, 190, 172, 244, 241, 189, 125, 185, 120, 188, 118, 49, 225, 61, 174, 5, 247, 189, 7, 150, 135, 61, 212, 107, 191, 60, 140, 25, 188, 190, 140, 127, 142, 62, 9, 229, 207, 189, 187, 130, 44, 62, 222, 227, 129, 62, 237, 92, 141, 61, 136, 17, 90, 62, 206, 250, 62, 62, 48, 200, 49, 189, 115, 199, 209, 188, 59, 51, 139, 189, 249, 84, 8, 61, 55, 216, 145, 190, 138, 38, 194, 62, 112, 135, 42, 190, 174, 242, 197, 190, 234, 206, 10, 188, 32, 79, 57, 62, 72, 196, 74, 62, 22, 171, 144, 61, 0, 153, 137, 189, 216, 24, 108, 61, 80, 203, 5, 61, 126, 173, 55, 61, 19, 115, 149, 61, 60, 158, 83, 188, 190, 253, 57, 57, 166, 22, 21, 62, 246, 194, 27, 62, 239, 221, 246, 188, 24, 38, 170, 189, 35, 155, 41, 190, 103, 97, 87, 61, 198, 215, 243, 189, 65, 177, 170, 59, 232, 145, 6, 190, 191, 149, 153, 189, 44, 169, 133, 61, 185, 125, 32, 62, 20, 64, 8, 62, 126, 218, 17, 62, 199, 26, 194, 186, 98, 22, 33, 190, 53, 147, 172, 189, 91, 252, 171, 61, 42, 64, 10, 60, 205, 26, 44, 61, 19, 161, 60, 189, 15, 41, 168, 189, 4, 78, 15, 190, 139, 112, 65, 189, 8, 199, 2, 188, 237, 235, 32, 190, 97, 44, 52, 190, 183, 104, 192, 189, 222, 92, 16, 190, 135, 190, 132, 188, 35, 160, 115, 190, 134, 106, 126, 190, 226, 56, 48, 189, 173, 22, 134, 62, 120, 213, 128, 190, 108, 38, 20, 62, 204, 43, 95, 189, 12, 69, 225, 189, 24, 222, 159, 61, 223, 245, 104, 62, 219, 115, 110, 62, 122, 92, 29, 190, 87, 144, 73, 190, 202, 134, 179, 60, 163, 227, 153, 189, 28, 32, 83, 190, 26, 210, 84, 190, 180, 173, 214, 188, 100, 225, 21, 190, 40, 53, 179, 190, 218, 59, 78, 62, 106, 247, 169, 61, 189, 65, 149, 190, 86, 163, 238, 61, 173, 20, 61, 59, 152, 169, 213, 188, 181, 78, 159, 61, 40, 244, 245, 188, 185, 238, 158, 189, 181, 122, 180, 190, 247, 129, 67, 62, 223, 50, 28, 62, 24, 96, 5, 61, 6, 164, 60, 189, 114, 255, 99, 62, 71, 72, 91, 189, 241, 179, 226, 189, 163, 185, 12, 62, 242, 248, 21, 189, 58, 33, 204, 60, 48, 220, 13, 190, 85, 192, 209, 61, 7, 149, 130, 62, 207, 89, 60, 61, 47, 239, 82, 190, 183, 242, 17, 62, 130, 24, 29, 62, 153, 138, 70, 190, 88, 99, 191, 60, 148, 105, 108, 187, 112, 181, 223, 61, 3, 22, 141, 190, 94, 229, 200, 61, 80, 27, 213, 61, 142, 61, 147, 190, 103, 101, 208, 61, 76, 3, 234, 61, 185, 126, 5, 190, 116, 30, 151, 61, 96, 91, 139, 190, 78, 50, 110, 62, 169, 113, 22, 190, 6, 171, 1, 190, 50, 34, 9, 190, 112, 228, 7, 190, 157, 118, 175, 61, 131, 140, 15, 189, 34, 209, 165, 188, 34, 214, 112, 188, 106, 142, 84, 190, 211, 232, 45, 190, 11, 177, 139, 60, 206, 230, 32, 189, 185, 250, 3, 189, 146, 6, 213, 184, 12, 121, 7, 62, 132, 113, 251, 189, 218, 168, 239, 188, 187, 169, 125, 60, 2, 62, 111, 189, 137, 146, 165, 59, 101, 24, 202, 189, 124, 5, 4, 61, 224, 28, 212, 61, 194, 150, 191, 59, 210, 178, 61, 190, 213, 170, 229, 61, 48, 219, 215, 188, 215, 61, 37, 190, 126, 9, 152, 61, 46, 254, 254, 61, 109, 75, 148, 61, 160, 252, 27, 190, 99, 34, 192, 61, 193, 135, 231, 188, 253, 47, 188, 62, 72, 94, 120, 190, 215, 132, 240, 189, 81, 229, 171, 61, 181, 38, 166, 61, 239, 217, 23, 62, 120, 144, 9, 189, 79, 161, 242, 189, 203, 15, 163, 190, 45, 8, 174, 62, 97, 80, 236, 61, 36, 207, 250, 61, 116, 251, 27, 61, 244, 174, 215, 189, 248, 35, 213, 189, 207, 152, 73, 62, 155, 17, 97, 189, 238, 18, 71, 61, 139, 77, 25, 62, 197, 131, 172, 61, 201, 129, 137, 190, 58, 140, 63, 62, 231, 217, 196, 189, 155, 8, 21, 190, 215, 176, 175, 188, 252, 184, 73, 62, 43, 31, 16, 62, 145, 68, 20, 62, 238, 248, 113, 189, 103, 190, 8, 190, 144, 255, 29, 62, 38, 51, 56, 190, 252, 148, 179, 61, 198, 2, 63, 190, 56, 23, 177, 190, 115, 237, 121, 62, 47, 103, 31, 189, 164, 134, 15, 190, 87, 134, 223, 60, 210, 154, 159, 190, 99, 183, 166, 190, 217, 63, 152, 62, 163, 67, 55, 62, 26, 225, 36, 62, 69, 101, 160, 61, 133, 219, 24, 190, 215, 64, 42, 62, 181, 234, 36, 190, 107, 137, 11, 191, 30, 233, 128, 190, 212, 80, 34, 61, 179, 191, 189, 189, 96, 250, 168, 190, 33, 206, 36, 60, 79, 241, 243, 61, 175, 253, 181, 190, 128, 63, 39, 189, 142, 19, 131, 62, 236, 44, 11, 62, 38, 199, 208, 189, 166, 99, 65, 187, 67, 205, 170, 61, 35, 72, 183, 190, 217, 162, 5, 62, 159, 178, 137, 188, 234, 58, 134, 188, 95, 32, 219, 60, 161, 15, 28, 190, 152, 54, 80, 61, 38, 199, 46, 62, 114, 23, 178, 189, 57, 150, 150, 61, 110, 68, 3, 62, 78, 86, 88, 189, 162, 5, 169, 61, 121, 158, 197, 61, 33, 242, 162, 60, 66, 215, 31, 190, 223, 95, 236, 189, 129, 9, 5, 62, 125, 107, 129, 59, 129, 26, 179, 189, 34, 142, 203, 189, 231, 207, 97, 61, 10, 81, 194, 189, 55, 200, 16, 190, 176, 61, 181, 189, 141, 145, 24, 61, 30, 9, 231, 189, 251, 29, 211, 61, 28, 35, 5, 62, 244, 166, 249, 189, 53, 101, 120, 61, 85, 250, 121, 189, 99, 155, 140, 189, 127, 29, 207, 61, 137, 117, 135, 61, 218, 105, 217, 189, 79, 88, 1, 62, 223, 80, 4, 61, 208, 226, 247, 61, 128, 1, 197, 60, 240, 10, 212, 189, 134, 21, 138, 62, 169, 177, 102, 61, 113, 67, 165, 189, 11, 74, 44, 59, 162, 210, 133, 187, 197, 47, 165, 188, 170, 159, 77, 62, 180, 87, 98, 190, 89, 211, 69, 61, 0, 19, 37, 62, 228, 136, 221, 189, 73, 218, 10, 62, 172, 120, 129, 189, 206, 1, 121, 62, 201, 54, 11, 190, 62, 85, 10, 61, 187, 150, 41, 189, 167, 223, 167, 61, 11, 110, 77, 190, 25, 218, 211, 189, 98, 62, 153, 60, 62, 145, 65, 61, 74, 227, 10, 62, 42, 93, 61, 189, 96, 15, 103, 62, 138, 63, 26, 190, 44, 145, 65, 62, 148, 204, 144, 189, 167, 111, 240, 189, 21, 41, 135, 189, 50, 70, 19, 189, 110, 81, 62, 190, 163, 214, 121, 62, 164, 255, 137, 189, 57, 240, 214, 189, 154, 234, 173, 61, 21, 128, 195, 60, 184, 108, 176, 189, 47, 86, 65, 62, 1, 10, 208, 187, 90, 27, 73, 188, 144, 59, 98, 62, 15, 186, 214, 61, 143, 204, 201, 59, 79, 214, 74, 61, 33, 125, 138, 61, 218, 224, 38, 190, 182, 64, 136, 62, 101, 16, 80, 62, 237, 178, 63, 62, 78, 167, 27, 190, 217, 127, 147, 189, 130, 193, 153, 61, 254, 122, 133, 189, 82, 120, 189, 61, 28, 14, 45, 61, 102, 124, 144, 62, 96, 123, 157, 187, 213, 221, 133, 189, 146, 122, 249, 60, 74, 4, 75, 190, 238, 5, 214, 61, 0, 64, 48, 62, 58, 130, 189, 60, 92, 228, 26, 62, 152, 77, 6, 62, 6, 115, 248, 61, 223, 174, 242, 60, 127, 219, 105, 190, 46, 91, 109, 58, 41, 58, 44, 189, 32, 121, 23, 62, 108, 75, 234, 61, 196, 117, 176, 189, 215, 156, 155, 189, 99, 212, 73, 61, 198, 10, 200, 187, 78, 97, 149, 61, 10, 84, 233, 188, 179, 75, 203, 188, 129, 28, 159, 189, 145, 153, 208, 61, 139, 196, 108, 62, 30, 95, 149, 189, 119, 183, 185, 60, 224, 187, 43, 61, 239, 214, 63, 189, 34, 171, 219, 61, 205, 111, 171, 189, 218, 146, 45, 190, 217, 39, 43, 190, 95, 162, 208, 189, 199, 130, 206, 61, 114, 214, 104, 189, 231, 227, 201, 59, 43, 235, 163, 188, 87, 100, 215, 61, 165, 90, 53, 190, 63, 30, 131, 190, 209, 125, 72, 62, 47, 37, 119, 189, 197, 102, 173, 189, 117, 255, 202, 61, 207, 250, 15, 190, 201, 153, 137, 60, 252, 5, 179, 61, 136, 151, 151, 60, 46, 13, 168, 61, 39, 2, 0, 62, 10, 163, 164, 61, 132, 65, 36, 190, 14, 204, 84, 62, 200, 43, 174, 189, 98, 1, 87, 61, 213, 63, 198, 189, 248, 151, 141, 61, 82, 203, 45, 190, 127, 61, 202, 60, 35, 66, 48, 62, 195, 127, 53, 62, 239, 2, 96, 62, 111, 166, 187, 189, 194, 234, 29, 190, 92, 174, 21, 62, 149, 67, 70, 61, 127, 125, 149, 189, 142, 129, 13, 62, 2, 34, 75, 190, 105, 60, 198, 60, 20, 246, 224, 189, 164, 124, 151, 62, 145, 146, 72, 190, 110, 47, 9, 61, 100, 243, 135, 61, 112, 107, 175, 190, 88, 125, 239, 188, 17, 65, 20, 62, 133, 133, 155, 188, 25, 197, 84, 189, 87, 200, 49, 190, 113, 51, 147, 189, 177, 48, 185, 189, 237, 31, 200, 61, 64, 167, 98, 190, 138, 134, 50, 190, 18, 20, 1, 62, 163, 250, 129, 62, 104, 197, 30, 61, 177, 106, 241, 189, 238, 147, 142, 190, 179, 161, 41, 190, 229, 47, 107, 61, 205, 149, 218, 189, 98, 172, 161, 61, 142, 126, 177, 61, 113, 190, 236, 61, 238, 15, 12, 61, 24, 212, 32, 189, 56, 2, 234, 189, 116, 201, 60, 61, 226, 61, 89, 190, 30, 180, 46, 61, 133, 106, 105, 187, 27, 249, 3, 190, 73, 28, 116, 187, 19, 165, 73, 188, 127, 174, 159, 189, 229, 10, 162, 61, 198, 137, 194, 61, 104, 27, 43, 190, 74, 239, 168, 189, 186, 198, 29, 188, 97, 194, 213, 189, 25, 88, 181, 61, 216, 26, 90, 190, 45, 235, 158, 189, 133, 15, 17, 62, 50, 62, 82, 190, 162, 159, 244, 60, 98, 198, 78, 61, 175, 143, 76, 60, 0, 154, 171, 59, 243, 53, 168, 61, 182, 31, 161, 189, 239, 17, 6, 190, 237, 221, 211, 189, 146, 66, 162, 59, 240, 114, 216, 61, 99, 177, 238, 189, 169, 171, 186, 61, 73, 175, 5, 187, 148, 131, 12, 62, 140, 187, 243, 61, 143, 1, 176, 189, 111, 178, 104, 61, 87, 240, 28, 62, 5, 49, 23, 62, 247, 41, 234, 189, 125, 205, 162, 61, 173, 226, 6, 61, 227, 122, 36, 62, 96, 126, 222, 189, 109, 99, 29, 190, 248, 154, 3, 190, 107, 223, 147, 189, 190, 203, 30, 190, 230, 18, 93, 190, 155, 195, 16, 62, 32, 119, 243, 189, 185, 150, 143, 189, 73, 217, 90, 189, 82, 70, 215, 61, 56, 46, 60, 190, 146, 67, 154, 189, 67, 75, 208, 189, 172, 149, 173, 189, 103, 50, 42, 190, 114, 115, 4, 190, 46, 27, 162, 61, 247, 236, 51, 62, 212, 101, 23, 62, 202, 116, 85, 62, 86, 213, 23, 62, 26, 247, 111, 188, 141, 22, 180, 189, 104, 251, 22, 190, 148, 99, 107, 62, 97, 87, 73, 188, 3, 202, 156, 61, 233, 206, 24, 188, 35, 214, 66, 190, 121, 78, 79, 61, 33, 220, 217, 61, 48, 231, 183, 61, 63, 24, 57, 189, 223, 245, 14, 61, 114, 237, 165, 60, 218, 115, 50, 60, 116, 12, 137, 62, 162, 83, 231, 61, 217, 190, 137, 189, 254, 90, 27, 190, 157, 114, 191, 61, 124, 40, 131, 61, 0, 81, 238, 189, 207, 38, 50, 190, 17, 126, 235, 189, 85, 222, 109, 61, 249, 15, 212, 189, 232, 62, 178, 189, 31, 56, 241, 188, 111, 130, 65, 190, 138, 34, 231, 61, 229, 134, 40, 189, 47, 232, 13, 62, 61, 177, 8, 62, 127, 48, 2, 190, 109, 6, 40, 186, 183, 238, 1, 190, 227, 53, 217, 188, 98, 94, 4, 190, 67, 41, 30, 61, 118, 2, 76, 189, 36, 124, 227, 61, 212, 234, 214, 61, 209, 145, 19, 190, 184, 202, 55, 190, 83, 80, 47, 190, 251, 117, 112, 185, 199, 191, 180, 61, 53, 179, 149, 188, 190, 198, 78, 190, 70, 173, 130, 189, 227, 159, 70, 189, 24, 181, 135, 61, 244, 10, 190, 58, 142, 193, 174, 189, 239, 194, 230, 60, 153, 152, 164, 61, 19, 253, 205, 61, 25, 77, 9, 60, 69, 19, 229, 189, 159, 30, 85, 188, 254, 205, 148, 61, 47, 124, 135, 60, 249, 22, 169, 189, 165, 5, 21, 62, 244, 110, 247, 61, 240, 76, 35, 189, 7, 72, 70, 62, 146, 224, 159, 61, 243, 192, 195, 61, 19, 174, 113, 190, 245, 212, 84, 190, 69, 70, 84, 189, 207, 73, 128, 189, 117, 115, 96, 189, 7, 70, 9, 190, 238, 61, 247, 60, 161, 226, 94, 188, 143, 54, 8, 60, 200, 243, 161, 61, 118, 118, 156, 61, 54, 237, 135, 59, 168, 195, 188, 61, 113, 63, 230, 61, 98, 39, 47, 190, 34, 84, 159, 61, 8, 159, 231, 189, 202, 207, 58, 190, 85, 100, 17, 62, 215, 229, 31, 62, 17, 254, 184, 61, 138, 113, 0, 190, 173, 201, 104, 61, 86, 133, 249, 61, 220, 29, 127, 189, 37, 166, 225, 60, 28, 83, 192, 189, 0, 132, 235, 60, 188, 166, 80, 189, 32, 52, 24, 62, 90, 44, 227, 61, 96, 99, 10, 62, 168, 119, 255, 61, 167, 107, 203, 189, 23, 229, 24, 190, 114, 93, 225, 189, 208, 141, 245, 188, 41, 138, 211, 60, 178, 114, 143, 60, 63, 87, 205, 189, 130, 62, 162, 189, 165, 25, 189, 60, 223, 20, 131, 61, 8, 185, 47, 190, 192, 110, 46, 190, 103, 193, 61, 190, 9, 175, 46, 60, 80, 100, 40, 190, 26, 32, 19, 62, 210, 109, 178, 189, 14, 202, 19, 189, 35, 67, 88, 189, 149, 195, 72, 189, 245, 118, 123, 189, 130, 50, 79, 60, 242, 175, 36, 61, 35, 5, 198, 60, 202, 162, 144, 190, 240, 153, 243, 61, 123, 12, 3, 191, 223, 105, 151, 189, 163, 126, 152, 188, 140, 21, 94, 190, 62, 229, 165, 61, 37, 147, 136, 190, 93, 93, 3, 190, 215, 236, 237, 61, 58, 58, 228, 189, 81, 142, 144, 190, 137, 141, 85, 62, 106, 22, 210, 189, 41, 199, 67, 62, 35, 88, 63, 190, 229, 207, 32, 188, 252, 196, 65, 61, 137, 117, 132, 62, 59, 54, 161, 61, 84, 77, 200, 61, 115, 15, 135, 189, 80, 51, 190, 189, 224, 166, 177, 189, 7, 48, 252, 60, 105, 179, 194, 189, 234, 0, 25, 62, 2, 40, 143, 62, 132, 219, 200, 189, 16, 202, 88, 187, 109, 82, 81, 188, 95, 42, 23, 62, 155, 29, 18, 61, 111, 152, 1, 62, 92, 253, 163, 190, 112, 109, 30, 189, 44, 30, 171, 188, 200, 250, 111, 190, 103, 19, 143, 62, 130, 210, 105, 190, 107, 79, 40, 189, 125, 238, 75, 189, 250, 127, 143, 189, 196, 27, 172, 61, 80, 130, 147, 61, 44, 255, 163, 188, 192, 107, 80, 189, 250, 107, 98, 190, 18, 39, 117, 62, 65, 59, 220, 187, 27, 64, 53, 61, 87, 214, 153, 62, 207, 104, 6, 62, 219, 136, 91, 190, 132, 177, 170, 190, 171, 213, 153, 188, 181, 109, 227, 60, 0, 122, 221, 189, 117, 222, 31, 62, 202, 30, 15, 62, 205, 131, 178, 61, 238, 213, 73, 190, 34, 50, 243, 61, 185, 180, 10, 189, 14, 123, 25, 189, 148, 157, 177, 60, 127, 148, 209, 61, 195, 106, 29, 62, 107, 137, 42, 190, 52, 76, 207, 61, 101, 64, 16, 189, 89, 155, 93, 189, 78, 158, 58, 62, 225, 91, 151, 61, 73, 226, 1, 62, 70, 26, 90, 187, 48, 23, 38, 190, 28, 146, 45, 56, 1, 217, 104, 190, 12, 244, 190, 61, 250, 76, 88, 61, 53, 42, 145, 61, 127, 51, 210, 189, 130, 173, 4, 190, 120, 10, 37, 62, 219, 6, 130, 61, 52, 174, 134, 189, 106, 189, 29, 188, 139, 193, 200, 187, 32, 128, 36, 61, 97, 38, 63, 62, 155, 218, 53, 60, 30, 140, 154, 61, 121, 21, 250, 189, 91, 34, 168, 189, 7, 48, 227, 60, 73, 255, 237, 61, 28, 81, 31, 62, 221, 217, 16, 62, 23, 184, 1, 189, 188, 181, 65, 190, 86, 154, 211, 61, 38, 205, 213, 187, 64, 16, 73, 189, 35, 0, 218, 61, 145, 252, 200, 189, 190, 54, 195, 61, 80, 67, 83, 62, 248, 220, 174, 61, 63, 88, 72, 61, 147, 210, 10, 62, 167, 96, 207, 189, 32, 178, 20, 62, 8, 173, 25, 62, 254, 111, 9, 62, 146, 143, 45, 61, 95, 157, 20, 190, 249, 230, 87, 61, 83, 254, 142, 188, 239, 8, 166, 61, 223, 82, 5, 190, 197, 248, 211, 61, 114, 183, 151, 189, 224, 244, 60, 190, 79, 98, 70, 61, 68, 100, 233, 189, 214, 221, 49, 62, 106, 0, 49, 62, 4, 27, 20, 190, 102, 15, 16, 189, 209, 53, 18, 62, 63, 234, 119, 62, 5, 207, 128, 61, 207, 141, 109, 188, 215, 238, 122, 62, 65, 17, 217, 188, 24, 62, 22, 190, 223, 87, 2, 62, 92, 151, 68, 61, 142, 74, 5, 189, 115, 224, 60, 60, 201, 70, 198, 60, 17, 87, 27, 189, 170, 215, 139, 190, 51, 242, 144, 61, 202, 48, 200, 189, 38, 27, 146, 62, 182, 213, 13, 188, 188, 192, 22, 62, 25, 33, 51, 190, 34, 213, 227, 189, 127, 108, 64, 62, 121, 3, 222, 61, 228, 117, 34, 61, 21, 228, 4, 190, 108, 42, 115, 62, 8, 144, 221, 189, 220, 162, 3, 62, 130, 60, 197, 188, 53, 129, 37, 62, 229, 9, 132, 187, 67, 188, 7, 62, 119, 111, 28, 61, 26, 160, 39, 60, 128, 98, 154, 61, 112, 46, 93, 188, 150, 21, 240, 189, 232, 94, 183, 61, 195, 176, 146, 190, 234, 179, 19, 190, 149, 248, 77, 190, 191, 106, 144, 189, 195, 139, 234, 61, 84, 116, 78, 61, 57, 9, 46, 61, 41, 88, 137, 190, 182, 102, 35, 189, 71, 240, 191, 59, 54, 132, 34, 189, 141, 201, 58, 61, 238, 19, 57, 62, 6, 218, 170, 189, 224, 248, 34, 190, 70, 111, 250, 188, 100, 179, 134, 189, 215, 155, 143, 189, 188, 188, 207, 189, 148, 241, 12, 62, 94, 200, 238, 189, 103, 164, 223, 189, 39, 227, 122, 61, 163, 131, 247, 189, 119, 214, 239, 189, 181, 32, 52, 62, 70, 159, 146, 188, 252, 143, 96, 62, 171, 100, 246, 189, 211, 199, 75, 190, 83, 248, 196, 60, 30, 222, 39, 190, 8, 77, 88, 61, 221, 124, 170, 61, 98, 155, 149, 61, 77, 25, 103, 61, 131, 229, 7, 62, 187, 5, 19, 189, 102, 61, 234, 60, 243, 239, 132, 190, 252, 141, 129, 62, 121, 13, 140, 190, 170, 108, 138, 62, 3, 249, 156, 62, 169, 69, 75, 60, 218, 216, 108, 189, 12, 82, 217, 61, 200, 6, 33, 62, 235, 138, 167, 61, 194, 196, 56, 189, 86, 53, 198, 189, 162, 231, 145, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {131, 33, 219, 61, 95, 218, 72, 62, 52, 188, 209, 60, 199, 57, 30, 190, 175, 21, 139, 62, 58, 27, 226, 61, 130, 212, 225, 61, 127, 108, 244, 189, 101, 212, 74, 61, 41, 2, 14, 61, 134, 232, 46, 60, 88, 176, 1, 60, 28, 245, 19, 62, 92, 49, 14, 190, 125, 47, 115, 62, 239, 172, 148, 189, 28, 32, 185, 189, 168, 203, 5, 190, 5, 48, 43, 62, 46, 108, 160, 189, 249, 187, 104, 61, 181, 195, 22, 189, 196, 24, 22, 190, 223, 11, 137, 61, 207, 56, 10, 189, 219, 141, 35, 189, 67, 154, 130, 60, 120, 153, 6, 190, 114, 111, 204, 61, 250, 46, 184, 59, 154, 118, 201, 189, 226, 187, 21, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {37, 233, 4, 190, 238, 220, 135, 190, 58, 119, 118, 190, 211, 102, 70, 62, 21, 196, 252, 188, 255, 200, 196, 189, 205, 246, 135, 190, 36, 27, 201, 187, 203, 212, 155, 190, 138, 165, 222, 189, 141, 70, 164, 60, 78, 239, 129, 190, 224, 246, 1, 191, 109, 178, 0, 189, 255, 152, 71, 62, 108, 129, 63, 62, 55, 172, 76, 189, 48, 127, 65, 62, 122, 10, 95, 190, 22, 41, 130, 188, 109, 159, 251, 59, 141, 111, 228, 189, 122, 42, 163, 60, 102, 70, 44, 61, 231, 190, 188, 189, 78, 129, 185, 62, 86, 204, 139, 62, 229, 66, 187, 189, 15, 129, 246, 189, 209, 176, 100, 62, 129, 143, 81, 62, 166, 99, 104, 62, 213, 120, 254, 189, 4, 146, 74, 190, 176, 126, 53, 62, 203, 39, 59, 190, 100, 72, 130, 190, 27, 165, 192, 61, 220, 125, 167, 61, 183, 107, 5, 62, 242, 207, 47, 62, 112, 209, 54, 62, 159, 211, 62, 61, 40, 164, 110, 61, 201, 11, 53, 61, 154, 119, 14, 62, 113, 25, 243, 189, 182, 6, 165, 189, 245, 175, 175, 189, 166, 170, 242, 61, 224, 122, 49, 190, 148, 12, 168, 61, 120, 26, 121, 60, 164, 106, 143, 189, 153, 73, 237, 61, 37, 104, 156, 189, 68, 80, 234, 60, 35, 111, 129, 60, 25, 187, 189, 61, 186, 240, 191, 189, 88, 164, 66, 190, 205, 250, 9, 62, 46, 190, 11, 62, 148, 198, 213, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {204, 26, 144, 189, 20, 53, 27, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {38, 95, 184, 63, 90, 169, 143, 191, 113, 234, 182, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {10, 38, 2, 64, 180, 2, 65, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0030/steps/000000000002000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}