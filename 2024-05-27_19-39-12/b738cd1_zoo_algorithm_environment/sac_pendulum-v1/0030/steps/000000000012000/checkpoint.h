// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {60, 135, 9, 191, 147, 126, 131, 191, 173, 115, 12, 191, 134, 48, 112, 62, 17, 81, 11, 62, 150, 105, 251, 190, 217, 181, 177, 62, 52, 226, 71, 63, 188, 116, 243, 190, 159, 28, 180, 190, 221, 180, 33, 63, 140, 167, 77, 189, 21, 140, 10, 189, 214, 162, 29, 63, 24, 23, 20, 191, 201, 235, 96, 62, 183, 149, 133, 63, 150, 19, 175, 62, 239, 29, 43, 190, 117, 241, 52, 61, 179, 70, 12, 191, 174, 193, 45, 63, 241, 12, 61, 191, 128, 55, 57, 62, 242, 235, 211, 190, 7, 164, 53, 63, 56, 49, 204, 190, 80, 70, 227, 61, 148, 243, 12, 63, 14, 200, 159, 190, 61, 161, 192, 190, 153, 142, 33, 191, 116, 62, 38, 190, 142, 199, 175, 190, 172, 73, 141, 191, 139, 197, 95, 190, 68, 141, 42, 63, 86, 89, 127, 63, 206, 131, 137, 62, 20, 191, 9, 63, 27, 146, 161, 191, 87, 114, 145, 190, 65, 47, 65, 63, 204, 21, 65, 190, 47, 206, 133, 62, 211, 81, 4, 63, 198, 71, 97, 191, 138, 101, 181, 62, 111, 15, 136, 62, 164, 141, 223, 190, 198, 158, 235, 62, 12, 250, 182, 190, 221, 115, 219, 63, 17, 193, 207, 62, 166, 169, 77, 191, 222, 219, 93, 62, 21, 137, 73, 61, 115, 115, 23, 63, 255, 130, 33, 63, 150, 207, 182, 62, 214, 32, 50, 63, 38, 57, 228, 190, 230, 117, 17, 190, 7, 127, 1, 62, 103, 25, 63, 63, 21, 11, 139, 189, 243, 135, 239, 188, 162, 152, 92, 191, 123, 158, 7, 190, 71, 181, 65, 63, 139, 253, 98, 191, 19, 76, 37, 190, 43, 57, 37, 191, 11, 33, 84, 62, 63, 68, 221, 62, 191, 144, 156, 62, 133, 28, 90, 63, 42, 38, 55, 62, 94, 235, 181, 62, 120, 175, 225, 62, 16, 136, 203, 190, 132, 187, 110, 190, 105, 80, 153, 191, 189, 25, 170, 190, 109, 182, 252, 62, 128, 189, 119, 191, 143, 236, 224, 190, 11, 161, 15, 62, 57, 67, 203, 191, 72, 157, 177, 190, 157, 212, 114, 62, 83, 68, 186, 63, 199, 54, 235, 62, 80, 251, 14, 191, 163, 12, 49, 191, 141, 196, 40, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {15, 164, 10, 191, 95, 189, 239, 61, 176, 101, 125, 189, 249, 52, 160, 62, 208, 101, 219, 58, 197, 43, 154, 62, 85, 246, 14, 191, 18, 239, 16, 62, 83, 152, 88, 189, 212, 34, 179, 60, 176, 134, 170, 62, 168, 160, 68, 190, 255, 43, 118, 190, 120, 198, 13, 190, 229, 177, 17, 191, 230, 163, 29, 191, 111, 28, 140, 190, 129, 20, 126, 190, 29, 64, 223, 62, 119, 152, 26, 191, 145, 146, 47, 189, 158, 188, 5, 63, 92, 156, 9, 63, 20, 222, 107, 62, 235, 194, 144, 62, 73, 27, 196, 61, 250, 104, 59, 62, 75, 79, 62, 190, 212, 131, 12, 191, 54, 21, 197, 62, 7, 20, 171, 62, 159, 149, 35, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {19, 2, 133, 62, 229, 89, 32, 188, 224, 163, 71, 59, 231, 32, 30, 62, 132, 54, 157, 188, 202, 66, 65, 62, 135, 7, 214, 189, 85, 186, 3, 61, 211, 233, 107, 188, 225, 217, 244, 61, 232, 74, 190, 190, 2, 144, 29, 188, 76, 103, 52, 62, 90, 116, 2, 191, 103, 185, 233, 60, 186, 96, 132, 59, 10, 208, 224, 60, 130, 60, 133, 189, 161, 220, 6, 187, 41, 228, 241, 61, 116, 236, 0, 190, 124, 97, 254, 61, 71, 246, 215, 61, 185, 230, 254, 61, 211, 106, 222, 189, 185, 9, 161, 62, 63, 197, 37, 62, 193, 158, 202, 61, 108, 171, 215, 190, 129, 124, 102, 190, 49, 114, 56, 62, 109, 234, 127, 189, 61, 14, 29, 189, 29, 126, 32, 190, 142, 76, 217, 61, 93, 166, 99, 62, 9, 244, 19, 189, 100, 53, 86, 189, 142, 69, 76, 60, 119, 166, 157, 61, 98, 68, 81, 190, 103, 136, 193, 61, 8, 157, 54, 61, 215, 91, 62, 190, 242, 180, 89, 62, 160, 233, 171, 190, 198, 178, 193, 62, 46, 49, 65, 62, 219, 68, 62, 190, 88, 174, 83, 191, 228, 183, 234, 61, 35, 61, 242, 190, 100, 37, 140, 190, 49, 138, 154, 62, 251, 25, 167, 189, 34, 34, 20, 189, 134, 90, 214, 190, 142, 192, 45, 62, 197, 107, 18, 62, 33, 197, 4, 189, 201, 193, 164, 190, 147, 161, 136, 61, 42, 103, 65, 60, 196, 200, 248, 189, 7, 179, 45, 58, 132, 17, 34, 190, 190, 119, 241, 59, 168, 36, 137, 62, 202, 143, 51, 62, 9, 117, 151, 189, 227, 48, 245, 60, 138, 41, 113, 189, 132, 103, 229, 189, 139, 15, 122, 62, 170, 61, 116, 61, 40, 90, 54, 62, 148, 170, 232, 62, 153, 58, 53, 191, 247, 26, 21, 62, 176, 149, 14, 190, 185, 82, 146, 190, 59, 28, 82, 190, 220, 17, 134, 61, 17, 107, 181, 62, 226, 97, 149, 190, 29, 244, 215, 62, 162, 248, 193, 60, 178, 10, 77, 61, 2, 152, 82, 190, 36, 80, 231, 62, 18, 56, 1, 61, 14, 166, 14, 190, 48, 159, 18, 191, 203, 162, 176, 190, 157, 38, 32, 190, 56, 200, 177, 188, 184, 239, 12, 190, 155, 240, 20, 189, 70, 162, 192, 61, 216, 189, 2, 62, 54, 202, 56, 62, 120, 146, 85, 190, 87, 51, 139, 62, 76, 34, 114, 60, 111, 190, 73, 61, 118, 196, 144, 62, 119, 187, 238, 61, 21, 189, 20, 62, 215, 187, 22, 62, 31, 134, 93, 61, 128, 174, 33, 62, 110, 127, 55, 190, 72, 53, 37, 191, 166, 212, 50, 189, 151, 64, 104, 62, 124, 24, 29, 63, 173, 73, 88, 62, 0, 165, 6, 62, 8, 181, 9, 190, 176, 69, 2, 61, 114, 159, 41, 190, 105, 181, 148, 62, 83, 170, 122, 62, 116, 181, 9, 62, 86, 239, 204, 189, 83, 248, 193, 189, 127, 157, 74, 189, 82, 67, 130, 61, 199, 166, 216, 61, 31, 9, 52, 62, 165, 144, 154, 59, 31, 94, 168, 61, 166, 184, 194, 58, 246, 144, 41, 62, 58, 14, 221, 61, 96, 16, 88, 62, 14, 161, 78, 190, 3, 73, 121, 61, 95, 178, 199, 189, 19, 205, 230, 189, 245, 152, 33, 188, 192, 78, 89, 190, 69, 187, 165, 61, 236, 51, 37, 190, 19, 78, 141, 189, 227, 246, 222, 189, 174, 198, 147, 60, 94, 58, 97, 190, 85, 39, 145, 61, 18, 68, 217, 62, 131, 183, 38, 62, 8, 15, 18, 62, 210, 232, 136, 60, 186, 162, 60, 61, 60, 101, 102, 59, 177, 80, 53, 186, 81, 78, 59, 190, 91, 189, 152, 61, 215, 94, 144, 62, 76, 150, 236, 188, 135, 70, 171, 189, 129, 136, 12, 190, 179, 223, 192, 61, 96, 219, 168, 60, 129, 196, 125, 187, 220, 92, 136, 60, 3, 169, 237, 59, 250, 190, 188, 189, 29, 82, 169, 61, 151, 206, 55, 60, 100, 60, 139, 61, 100, 35, 242, 60, 226, 123, 12, 190, 14, 76, 15, 62, 105, 25, 141, 61, 234, 135, 75, 61, 94, 50, 23, 61, 182, 10, 164, 189, 183, 137, 13, 190, 5, 135, 220, 189, 228, 255, 226, 189, 140, 134, 23, 61, 144, 208, 110, 189, 57, 140, 63, 190, 200, 16, 87, 190, 228, 181, 77, 188, 221, 195, 4, 190, 252, 184, 213, 189, 62, 208, 21, 62, 201, 192, 177, 61, 73, 144, 236, 189, 28, 76, 92, 189, 224, 138, 131, 61, 219, 202, 145, 190, 122, 77, 176, 189, 60, 199, 102, 61, 255, 249, 30, 62, 179, 152, 114, 190, 135, 198, 60, 61, 22, 67, 69, 62, 103, 98, 195, 190, 189, 166, 193, 62, 169, 101, 195, 189, 95, 112, 138, 61, 211, 163, 158, 62, 210, 239, 201, 190, 166, 77, 154, 62, 237, 79, 10, 62, 215, 199, 146, 189, 18, 83, 6, 191, 97, 242, 31, 61, 109, 93, 112, 188, 187, 54, 16, 191, 82, 167, 232, 62, 158, 114, 72, 190, 124, 12, 251, 190, 201, 213, 128, 190, 161, 215, 211, 62, 75, 189, 130, 62, 29, 27, 250, 187, 60, 201, 185, 190, 180, 83, 2, 189, 23, 131, 15, 190, 182, 31, 186, 61, 19, 115, 149, 61, 60, 158, 83, 188, 190, 253, 57, 57, 166, 22, 21, 62, 246, 194, 27, 62, 239, 221, 246, 188, 24, 38, 170, 189, 35, 155, 41, 190, 103, 97, 87, 61, 198, 215, 243, 189, 65, 177, 170, 59, 232, 145, 6, 190, 191, 149, 153, 189, 44, 169, 133, 61, 185, 125, 32, 62, 20, 64, 8, 62, 126, 218, 17, 62, 199, 26, 194, 186, 98, 22, 33, 190, 53, 147, 172, 189, 91, 252, 171, 61, 42, 64, 10, 60, 205, 26, 44, 61, 19, 161, 60, 189, 15, 41, 168, 189, 4, 78, 15, 190, 139, 112, 65, 189, 8, 199, 2, 188, 237, 235, 32, 190, 97, 44, 52, 190, 183, 104, 192, 189, 222, 92, 16, 190, 133, 233, 203, 60, 33, 0, 97, 190, 239, 37, 80, 190, 156, 101, 195, 188, 165, 224, 158, 62, 202, 98, 84, 191, 240, 245, 36, 62, 188, 126, 169, 190, 99, 24, 21, 190, 168, 103, 195, 61, 45, 113, 168, 62, 54, 221, 136, 62, 247, 132, 30, 191, 175, 33, 204, 190, 120, 190, 58, 190, 60, 77, 237, 188, 17, 185, 76, 190, 1, 221, 7, 192, 247, 244, 159, 61, 213, 19, 22, 190, 171, 97, 75, 191, 100, 0, 65, 62, 15, 152, 81, 62, 146, 92, 229, 190, 124, 203, 113, 60, 105, 105, 98, 62, 173, 239, 133, 60, 0, 10, 250, 61, 63, 51, 37, 190, 83, 8, 171, 60, 149, 25, 6, 192, 243, 71, 164, 62, 149, 23, 18, 62, 129, 140, 172, 60, 9, 46, 91, 61, 51, 116, 99, 62, 44, 102, 127, 60, 9, 122, 186, 190, 138, 119, 18, 62, 98, 171, 174, 61, 92, 147, 145, 187, 145, 84, 200, 60, 126, 123, 192, 61, 150, 196, 87, 62, 251, 18, 9, 62, 52, 223, 30, 191, 165, 28, 97, 61, 176, 224, 64, 62, 217, 183, 27, 189, 50, 52, 76, 191, 106, 194, 250, 60, 28, 57, 226, 189, 210, 17, 62, 191, 139, 230, 99, 62, 52, 232, 212, 61, 130, 147, 4, 191, 132, 79, 132, 189, 65, 96, 5, 63, 92, 96, 40, 189, 60, 20, 218, 61, 219, 42, 16, 191, 222, 118, 135, 62, 85, 15, 15, 191, 2, 173, 4, 190, 178, 11, 216, 61, 209, 77, 44, 188, 17, 181, 128, 62, 159, 163, 173, 190, 154, 133, 182, 61, 104, 56, 41, 189, 7, 220, 197, 189, 247, 199, 48, 189, 135, 18, 230, 61, 216, 218, 37, 62, 100, 128, 35, 60, 192, 56, 122, 62, 116, 188, 150, 62, 33, 57, 164, 62, 20, 2, 170, 62, 14, 223, 106, 62, 218, 177, 16, 189, 53, 115, 88, 59, 47, 65, 105, 191, 138, 83, 127, 62, 112, 190, 23, 189, 125, 91, 28, 189, 203, 223, 47, 191, 56, 217, 94, 189, 202, 4, 227, 189, 100, 124, 181, 189, 62, 6, 148, 62, 255, 99, 181, 62, 232, 148, 165, 62, 93, 159, 82, 190, 196, 254, 204, 61, 4, 215, 190, 190, 250, 220, 12, 63, 231, 47, 125, 190, 219, 220, 245, 189, 78, 220, 3, 62, 212, 58, 2, 62, 114, 215, 15, 62, 241, 150, 128, 60, 116, 136, 87, 189, 94, 19, 143, 190, 44, 227, 165, 62, 79, 227, 59, 189, 85, 9, 149, 62, 179, 97, 102, 62, 192, 171, 42, 190, 117, 29, 148, 61, 70, 143, 142, 62, 202, 162, 254, 189, 208, 248, 181, 189, 24, 193, 106, 60, 156, 87, 61, 62, 206, 7, 174, 189, 255, 105, 85, 62, 223, 86, 171, 189, 253, 7, 8, 62, 206, 110, 42, 190, 98, 108, 169, 62, 254, 134, 34, 62, 209, 159, 146, 62, 107, 201, 42, 190, 194, 173, 153, 189, 197, 182, 20, 62, 78, 72, 146, 190, 158, 141, 10, 62, 96, 152, 91, 190, 53, 117, 204, 190, 75, 140, 170, 61, 162, 175, 133, 189, 113, 86, 39, 191, 125, 65, 49, 188, 182, 184, 36, 191, 117, 55, 236, 190, 83, 218, 53, 62, 203, 25, 112, 62, 227, 210, 28, 62, 15, 171, 31, 190, 88, 135, 247, 189, 223, 13, 14, 62, 109, 246, 55, 62, 120, 204, 168, 190, 121, 62, 252, 191, 167, 88, 85, 61, 34, 4, 99, 189, 40, 142, 17, 191, 184, 194, 142, 190, 239, 44, 79, 62, 143, 108, 223, 190, 167, 0, 202, 60, 61, 104, 136, 60, 101, 173, 163, 61, 34, 95, 177, 189, 10, 126, 152, 61, 8, 172, 54, 62, 84, 158, 249, 191, 142, 138, 91, 62, 91, 181, 147, 190, 16, 80, 112, 61, 188, 243, 241, 61, 67, 104, 174, 189, 155, 79, 9, 62, 92, 241, 84, 62, 44, 103, 6, 190, 27, 121, 60, 62, 117, 20, 98, 62, 243, 31, 85, 61, 190, 9, 19, 191, 231, 31, 13, 190, 133, 241, 104, 62, 103, 142, 71, 191, 54, 130, 8, 62, 232, 129, 134, 62, 214, 107, 155, 61, 25, 75, 44, 190, 226, 96, 150, 190, 61, 119, 69, 62, 140, 77, 71, 188, 189, 167, 22, 188, 90, 187, 121, 190, 54, 179, 30, 62, 27, 50, 46, 190, 103, 1, 132, 62, 224, 156, 116, 62, 79, 121, 10, 191, 161, 237, 14, 190, 100, 84, 253, 190, 177, 183, 128, 188, 81, 255, 195, 190, 137, 166, 63, 189, 122, 94, 136, 189, 34, 82, 206, 61, 3, 124, 87, 189, 47, 190, 207, 61, 213, 214, 235, 188, 29, 191, 18, 190, 158, 254, 161, 62, 121, 255, 46, 187, 136, 82, 6, 189, 138, 125, 195, 60, 90, 246, 34, 190, 182, 250, 216, 190, 163, 6, 142, 62, 21, 150, 148, 190, 187, 235, 190, 61, 97, 249, 47, 62, 179, 144, 38, 190, 247, 73, 134, 61, 32, 25, 93, 190, 84, 142, 146, 62, 19, 214, 39, 60, 243, 126, 193, 61, 169, 140, 222, 185, 10, 73, 210, 61, 51, 202, 2, 191, 247, 125, 128, 189, 145, 239, 18, 190, 7, 120, 74, 61, 12, 123, 58, 62, 122, 104, 10, 190, 223, 54, 58, 62, 83, 228, 197, 190, 3, 177, 180, 62, 216, 220, 156, 61, 169, 167, 127, 190, 122, 100, 79, 190, 40, 67, 49, 189, 62, 187, 255, 190, 218, 30, 144, 62, 52, 238, 117, 190, 202, 224, 152, 189, 8, 202, 25, 62, 126, 67, 141, 190, 14, 74, 77, 190, 53, 37, 173, 62, 68, 91, 206, 188, 236, 30, 210, 188, 49, 74, 49, 62, 26, 24, 23, 62, 42, 89, 45, 190, 156, 9, 48, 61, 121, 217, 75, 61, 57, 117, 76, 188, 144, 106, 113, 62, 18, 211, 65, 62, 191, 151, 37, 62, 214, 26, 86, 190, 189, 98, 4, 189, 21, 50, 7, 190, 157, 182, 253, 188, 33, 70, 16, 62, 40, 28, 251, 60, 152, 178, 103, 62, 184, 253, 3, 190, 64, 136, 162, 60, 81, 219, 55, 62, 177, 53, 161, 190, 11, 32, 248, 61, 40, 167, 53, 62, 156, 42, 142, 60, 224, 234, 125, 62, 175, 57, 125, 62, 51, 69, 60, 62, 31, 250, 90, 191, 213, 116, 223, 190, 233, 13, 127, 61, 227, 32, 232, 190, 135, 201, 26, 62, 87, 171, 23, 62, 64, 73, 208, 188, 169, 5, 65, 190, 103, 154, 151, 190, 186, 194, 123, 189, 12, 83, 72, 62, 157, 122, 183, 60, 152, 225, 235, 60, 188, 242, 188, 61, 223, 187, 240, 60, 25, 119, 157, 62, 16, 47, 255, 188, 70, 100, 144, 190, 167, 66, 197, 190, 121, 35, 54, 190, 111, 95, 245, 61, 47, 115, 16, 191, 214, 121, 29, 189, 5, 62, 179, 190, 233, 164, 233, 190, 6, 158, 226, 188, 107, 167, 10, 191, 0, 235, 114, 189, 82, 77, 221, 190, 8, 197, 233, 61, 178, 120, 88, 190, 103, 15, 79, 191, 51, 108, 229, 62, 134, 242, 10, 190, 71, 226, 113, 190, 222, 182, 184, 62, 47, 255, 27, 190, 71, 122, 25, 61, 243, 148, 0, 61, 226, 233, 142, 188, 218, 93, 193, 189, 136, 241, 233, 61, 19, 219, 44, 189, 236, 161, 158, 190, 91, 215, 121, 62, 140, 205, 52, 190, 148, 183, 78, 188, 46, 195, 89, 190, 124, 67, 221, 190, 98, 171, 111, 190, 3, 124, 119, 189, 158, 5, 188, 62, 90, 222, 226, 61, 25, 92, 159, 62, 7, 28, 105, 60, 227, 164, 147, 61, 76, 18, 182, 62, 149, 148, 27, 190, 177, 213, 164, 188, 111, 126, 37, 62, 8, 54, 44, 190, 196, 160, 88, 62, 143, 23, 62, 61, 33, 99, 188, 62, 179, 219, 182, 191, 123, 75, 152, 189, 125, 226, 39, 62, 166, 138, 48, 191, 131, 82, 23, 62, 64, 157, 161, 62, 113, 80, 148, 61, 122, 204, 38, 190, 25, 114, 70, 191, 111, 17, 93, 188, 145, 154, 50, 62, 72, 142, 10, 62, 86, 12, 39, 190, 92, 141, 99, 62, 45, 232, 45, 61, 188, 55, 145, 62, 21, 191, 209, 61, 67, 50, 228, 190, 42, 106, 37, 191, 166, 99, 6, 190, 138, 172, 199, 61, 242, 251, 83, 191, 25, 153, 38, 190, 27, 112, 213, 61, 238, 252, 238, 61, 231, 27, 39, 190, 72, 44, 89, 190, 73, 194, 207, 190, 34, 199, 238, 189, 100, 253, 106, 61, 57, 77, 69, 189, 94, 27, 172, 189, 60, 205, 126, 190, 211, 181, 190, 190, 13, 250, 39, 191, 111, 252, 75, 62, 119, 59, 133, 61, 94, 48, 135, 62, 34, 52, 157, 61, 187, 39, 35, 190, 199, 41, 174, 189, 191, 138, 46, 190, 232, 51, 248, 62, 85, 215, 70, 190, 134, 25, 10, 187, 103, 86, 246, 62, 62, 150, 142, 62, 111, 0, 188, 190, 228, 89, 86, 61, 65, 143, 46, 190, 155, 97, 236, 61, 186, 77, 49, 62, 150, 150, 196, 190, 104, 118, 104, 190, 30, 132, 25, 190, 169, 199, 51, 189, 242, 180, 109, 61, 75, 143, 7, 190, 182, 154, 133, 61, 138, 35, 135, 58, 226, 43, 221, 61, 218, 131, 250, 61, 180, 152, 5, 190, 195, 123, 51, 61, 40, 64, 199, 61, 39, 244, 244, 61, 92, 96, 236, 189, 86, 227, 4, 188, 243, 13, 46, 61, 136, 147, 39, 62, 1, 53, 218, 189, 56, 72, 109, 190, 4, 199, 73, 190, 33, 101, 146, 189, 146, 177, 65, 190, 65, 137, 83, 190, 23, 248, 243, 61, 148, 57, 0, 190, 168, 125, 151, 189, 25, 140, 149, 189, 64, 134, 155, 61, 146, 180, 97, 190, 73, 137, 251, 189, 226, 216, 40, 190, 156, 33, 168, 189, 156, 152, 122, 190, 150, 106, 168, 189, 153, 182, 131, 60, 179, 66, 216, 61, 224, 139, 3, 62, 147, 230, 50, 62, 51, 75, 49, 62, 54, 151, 106, 189, 125, 124, 60, 61, 93, 59, 59, 190, 101, 194, 17, 62, 120, 72, 205, 190, 185, 144, 213, 61, 137, 110, 53, 62, 0, 51, 224, 190, 227, 69, 141, 62, 146, 93, 124, 62, 244, 41, 242, 61, 25, 70, 102, 190, 100, 201, 200, 189, 230, 223, 13, 62, 7, 28, 120, 61, 66, 160, 112, 62, 68, 185, 35, 62, 183, 28, 13, 61, 141, 139, 164, 190, 44, 86, 33, 62, 226, 157, 117, 60, 228, 46, 128, 190, 27, 157, 8, 191, 131, 12, 65, 190, 143, 17, 240, 61, 17, 70, 129, 190, 147, 92, 82, 190, 68, 113, 217, 60, 78, 119, 182, 188, 103, 53, 98, 189, 90, 11, 218, 60, 40, 105, 40, 62, 117, 79, 150, 61, 243, 132, 169, 61, 211, 61, 168, 188, 199, 111, 131, 61, 104, 31, 181, 190, 196, 38, 35, 190, 240, 250, 130, 62, 223, 54, 221, 190, 90, 154, 229, 62, 12, 139, 189, 62, 153, 196, 252, 189, 117, 213, 110, 190, 161, 137, 119, 191, 42, 24, 54, 62, 192, 86, 56, 190, 70, 38, 128, 61, 107, 35, 107, 191, 163, 210, 151, 190, 222, 59, 19, 190, 9, 78, 120, 62, 46, 111, 42, 62, 58, 110, 246, 189, 78, 100, 192, 189, 150, 33, 5, 191, 50, 52, 33, 62, 68, 213, 210, 190, 144, 126, 254, 189, 135, 129, 89, 61, 10, 45, 185, 61, 221, 132, 191, 60, 75, 31, 250, 189, 184, 127, 230, 61, 113, 190, 17, 62, 92, 101, 124, 61, 99, 134, 212, 61, 208, 231, 10, 62, 241, 187, 196, 188, 180, 45, 12, 191, 38, 161, 128, 190, 230, 91, 59, 190, 42, 120, 81, 61, 5, 120, 160, 59, 1, 59, 70, 190, 101, 12, 231, 189, 231, 28, 255, 189, 169, 2, 130, 190, 242, 20, 26, 62, 59, 3, 179, 62, 32, 81, 139, 60, 174, 124, 74, 62, 200, 246, 51, 62, 163, 114, 128, 190, 199, 106, 14, 62, 221, 1, 5, 191, 103, 229, 146, 190, 36, 71, 195, 61, 218, 162, 190, 61, 219, 72, 183, 189, 184, 86, 245, 190, 31, 93, 236, 61, 166, 205, 93, 62, 183, 219, 233, 188, 131, 197, 96, 61, 204, 241, 143, 190, 26, 37, 148, 189, 190, 183, 247, 189, 4, 161, 69, 62, 219, 112, 54, 62, 19, 83, 175, 187, 42, 38, 136, 190, 196, 109, 167, 189, 56, 57, 117, 191, 21, 55, 109, 190, 208, 141, 245, 188, 104, 183, 26, 189, 146, 182, 53, 60, 101, 223, 190, 189, 246, 27, 182, 190, 21, 129, 97, 190, 186, 191, 79, 62, 45, 194, 103, 190, 8, 151, 162, 190, 68, 156, 37, 191, 54, 79, 120, 62, 110, 82, 224, 189, 8, 244, 1, 190, 53, 45, 223, 190, 250, 236, 149, 190, 102, 54, 44, 190, 118, 195, 120, 190, 247, 4, 128, 191, 155, 15, 132, 62, 173, 144, 89, 62, 14, 76, 162, 58, 211, 92, 142, 190, 65, 59, 17, 62, 31, 50, 115, 191, 218, 2, 78, 60, 103, 130, 0, 63, 133, 92, 206, 190, 161, 16, 14, 62, 205, 32, 27, 192, 251, 191, 211, 190, 118, 103, 154, 62, 37, 255, 20, 190, 160, 170, 136, 190, 203, 98, 102, 62, 203, 1, 45, 189, 104, 92, 112, 61, 235, 137, 156, 190, 175, 40, 10, 61, 129, 110, 52, 62, 254, 251, 150, 62, 210, 221, 1, 62, 76, 149, 188, 61, 190, 75, 204, 190, 184, 176, 51, 190, 194, 217, 158, 191, 161, 142, 228, 62, 204, 133, 22, 190, 137, 141, 24, 62, 234, 106, 80, 62, 24, 43, 53, 191, 57, 173, 222, 62, 209, 131, 207, 62, 198, 74, 68, 62, 116, 175, 76, 62, 143, 202, 187, 61, 102, 175, 63, 191, 212, 41, 26, 188, 173, 153, 203, 62, 96, 147, 74, 190, 67, 111, 171, 62, 185, 28, 219, 191, 217, 133, 56, 190, 48, 7, 132, 62, 16, 237, 171, 189, 44, 189, 102, 61, 211, 255, 49, 188, 199, 244, 215, 187, 207, 78, 95, 190, 206, 15, 151, 190, 107, 51, 92, 62, 6, 169, 41, 62, 57, 2, 118, 59, 172, 2, 139, 62, 251, 182, 162, 61, 79, 204, 172, 190, 158, 69, 102, 190, 79, 231, 32, 191, 33, 177, 3, 63, 45, 198, 173, 189, 137, 171, 218, 61, 184, 227, 133, 61, 244, 67, 106, 61, 208, 206, 23, 190, 4, 118, 146, 62, 60, 12, 165, 190, 31, 4, 145, 189, 76, 82, 109, 61, 90, 122, 53, 190, 100, 179, 133, 62, 207, 64, 142, 190, 109, 162, 79, 62, 112, 168, 152, 191, 129, 99, 211, 189, 198, 50, 121, 62, 54, 145, 165, 190, 4, 209, 178, 61, 54, 4, 6, 61, 191, 10, 157, 189, 51, 58, 92, 189, 114, 231, 210, 190, 229, 152, 87, 61, 146, 77, 161, 62, 137, 188, 243, 61, 188, 198, 204, 187, 161, 234, 24, 62, 169, 140, 45, 62, 5, 126, 247, 61, 4, 32, 253, 188, 215, 234, 107, 191, 136, 79, 139, 191, 212, 126, 161, 189, 39, 28, 110, 62, 19, 157, 219, 190, 222, 211, 56, 62, 142, 49, 227, 189, 111, 188, 140, 189, 77, 206, 142, 60, 79, 88, 255, 61, 186, 18, 88, 62, 105, 27, 78, 62, 154, 13, 56, 60, 238, 63, 73, 190, 59, 140, 233, 61, 32, 108, 52, 189, 81, 32, 83, 61, 249, 93, 19, 62, 2, 120, 170, 190, 98, 47, 129, 60, 52, 124, 66, 62, 10, 235, 0, 62, 12, 30, 51, 61, 149, 60, 27, 62, 169, 101, 10, 190, 140, 149, 32, 62, 127, 175, 26, 62, 179, 255, 110, 62, 221, 218, 210, 61, 174, 148, 165, 189, 159, 212, 78, 61, 114, 149, 41, 188, 53, 112, 210, 61, 219, 205, 101, 190, 89, 184, 169, 61, 222, 73, 34, 188, 74, 13, 50, 190, 254, 179, 216, 189, 129, 88, 107, 189, 183, 112, 107, 62, 159, 143, 13, 62, 29, 114, 14, 190, 212, 112, 46, 190, 104, 175, 27, 61, 65, 129, 116, 62, 211, 218, 65, 61, 96, 173, 27, 61, 243, 246, 130, 62, 24, 255, 131, 190, 246, 233, 58, 191, 55, 220, 156, 62, 230, 4, 54, 189, 225, 41, 207, 61, 175, 37, 199, 61, 249, 74, 8, 60, 132, 29, 3, 190, 49, 161, 170, 190, 201, 237, 16, 62, 58, 195, 251, 189, 133, 169, 146, 62, 9, 36, 11, 61, 184, 49, 93, 62, 248, 44, 26, 191, 169, 163, 165, 189, 49, 73, 111, 61, 12, 218, 130, 62, 141, 168, 168, 61, 117, 105, 152, 190, 102, 207, 79, 62, 49, 122, 98, 191, 247, 229, 146, 61, 6, 5, 85, 189, 174, 201, 239, 62, 166, 244, 169, 188, 40, 240, 124, 62, 92, 98, 131, 190, 32, 106, 237, 189, 195, 115, 234, 62, 120, 244, 140, 189, 155, 87, 104, 190, 29, 181, 132, 191, 66, 162, 105, 190, 195, 49, 111, 190, 10, 165, 192, 190, 29, 242, 158, 190, 195, 38, 145, 61, 64, 192, 100, 62, 223, 231, 235, 61, 133, 66, 115, 190, 143, 147, 35, 191, 73, 76, 196, 62, 80, 53, 29, 190, 64, 171, 230, 190, 173, 9, 155, 62, 170, 174, 232, 188, 173, 38, 109, 190, 61, 118, 168, 191, 142, 89, 84, 190, 132, 45, 120, 191, 75, 120, 180, 187, 144, 25, 138, 61, 53, 146, 166, 190, 243, 171, 189, 60, 141, 45, 51, 62, 90, 180, 65, 190, 242, 194, 100, 190, 214, 197, 186, 61, 31, 227, 153, 190, 174, 37, 120, 62, 199, 114, 118, 190, 238, 117, 53, 190, 236, 180, 34, 61, 63, 168, 234, 190, 112, 16, 200, 190, 223, 18, 74, 62, 244, 193, 64, 60, 111, 252, 183, 61, 213, 252, 226, 61, 169, 203, 2, 190, 101, 165, 17, 189, 231, 13, 241, 190, 154, 85, 135, 62, 188, 123, 87, 190, 231, 242, 125, 62, 135, 226, 171, 62, 34, 0, 39, 188, 225, 129, 197, 190, 8, 122, 25, 62, 218, 247, 9, 189, 167, 198, 134, 61, 78, 97, 52, 60, 208, 10, 80, 190, 113, 247, 111, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {107, 74, 32, 62, 144, 168, 96, 62, 133, 95, 195, 61, 110, 152, 235, 60, 196, 100, 202, 62, 188, 209, 223, 61, 22, 45, 80, 62, 127, 108, 244, 189, 175, 95, 41, 62, 191, 185, 209, 61, 99, 112, 142, 190, 37, 3, 233, 60, 213, 111, 229, 61, 166, 215, 10, 190, 90, 179, 159, 62, 193, 208, 184, 189, 183, 192, 50, 189, 82, 83, 107, 190, 232, 102, 67, 62, 195, 179, 183, 189, 40, 8, 86, 61, 1, 36, 21, 189, 150, 124, 138, 190, 111, 168, 34, 62, 11, 120, 184, 61, 136, 46, 35, 60, 178, 99, 230, 59, 91, 216, 135, 189, 148, 234, 52, 62, 124, 28, 43, 189, 107, 48, 104, 59, 208, 154, 249, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {75, 206, 9, 190, 177, 205, 150, 190, 128, 5, 14, 191, 109, 172, 85, 62, 229, 33, 31, 186, 20, 58, 196, 189, 207, 144, 214, 190, 36, 27, 201, 187, 74, 250, 129, 191, 103, 100, 11, 191, 139, 243, 36, 63, 209, 241, 137, 190, 150, 120, 149, 191, 144, 170, 254, 190, 226, 134, 118, 62, 7, 225, 75, 62, 126, 231, 75, 190, 38, 128, 196, 62, 240, 109, 28, 191, 211, 143, 39, 62, 118, 170, 41, 189, 41, 52, 114, 190, 250, 189, 83, 63, 16, 102, 207, 61, 137, 85, 50, 191, 216, 127, 56, 63, 86, 44, 195, 62, 97, 3, 35, 190, 21, 220, 251, 188, 228, 249, 209, 62, 34, 145, 109, 63, 151, 150, 156, 62, 147, 144, 86, 190, 91, 65, 123, 190, 248, 33, 186, 62, 113, 69, 47, 190, 140, 163, 194, 190, 149, 181, 192, 61, 168, 7, 202, 62, 183, 107, 5, 62, 25, 226, 234, 60, 154, 214, 142, 62, 153, 109, 192, 61, 230, 201, 234, 61, 128, 248, 156, 61, 23, 74, 181, 62, 196, 185, 56, 190, 114, 254, 148, 189, 29, 32, 43, 190, 189, 83, 166, 61, 142, 70, 104, 190, 230, 219, 5, 63, 142, 105, 106, 188, 39, 164, 145, 189, 11, 199, 58, 63, 240, 178, 152, 190, 105, 96, 226, 61, 49, 172, 127, 59, 141, 156, 228, 61, 112, 212, 119, 190, 66, 133, 120, 190, 2, 138, 244, 61, 48, 49, 29, 62, 42, 128, 168, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 31, 40, 189, 192, 85, 184, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {21, 255, 47, 191, 229, 130, 12, 190, 117, 226, 248, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {196, 94, 205, 191, 52, 10, 251, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0030/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}