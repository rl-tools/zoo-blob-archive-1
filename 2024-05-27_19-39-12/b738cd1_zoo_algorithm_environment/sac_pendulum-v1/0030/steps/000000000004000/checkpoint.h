// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {159, 255, 51, 191, 64, 35, 1, 190, 77, 54, 13, 191, 69, 151, 148, 62, 138, 128, 45, 62, 32, 179, 12, 191, 214, 9, 189, 62, 126, 230, 27, 63, 108, 161, 17, 191, 49, 26, 187, 190, 93, 22, 227, 62, 34, 131, 52, 190, 166, 170, 5, 190, 231, 161, 60, 63, 176, 127, 33, 191, 89, 31, 14, 62, 109, 143, 109, 62, 63, 137, 4, 63, 73, 222, 222, 190, 233, 61, 23, 63, 98, 253, 47, 191, 165, 167, 11, 63, 68, 162, 11, 191, 22, 203, 153, 62, 29, 54, 88, 190, 184, 248, 47, 63, 162, 41, 233, 190, 94, 24, 50, 62, 40, 149, 4, 63, 214, 72, 148, 190, 58, 141, 141, 190, 74, 1, 187, 190, 210, 199, 178, 189, 255, 90, 200, 190, 121, 64, 10, 62, 70, 155, 159, 190, 44, 55, 20, 63, 156, 85, 76, 63, 70, 209, 159, 62, 226, 66, 240, 62, 178, 161, 145, 191, 166, 168, 127, 190, 102, 229, 25, 63, 217, 255, 106, 190, 233, 203, 229, 62, 53, 64, 104, 62, 168, 50, 10, 191, 97, 161, 249, 62, 59, 219, 33, 188, 244, 132, 56, 191, 92, 120, 25, 63, 190, 73, 178, 190, 87, 63, 159, 62, 59, 85, 50, 63, 180, 29, 175, 190, 14, 199, 159, 189, 148, 21, 247, 59, 28, 90, 195, 62, 140, 176, 187, 62, 189, 66, 252, 62, 151, 186, 228, 62, 14, 47, 54, 191, 33, 176, 134, 189, 56, 53, 64, 62, 180, 102, 14, 63, 82, 8, 50, 189, 50, 18, 67, 61, 199, 135, 17, 191, 244, 143, 117, 189, 19, 1, 46, 63, 217, 5, 107, 191, 208, 76, 136, 189, 194, 197, 15, 191, 11, 221, 216, 61, 155, 77, 255, 62, 173, 196, 152, 62, 53, 161, 36, 63, 186, 86, 225, 61, 34, 235, 72, 62, 31, 27, 50, 63, 99, 207, 22, 191, 102, 150, 27, 190, 26, 171, 120, 190, 4, 39, 231, 190, 232, 8, 232, 62, 189, 248, 50, 191, 162, 106, 226, 190, 204, 112, 8, 62, 90, 187, 119, 191, 214, 104, 143, 190, 108, 128, 142, 62, 180, 5, 197, 61, 28, 172, 50, 63, 241, 220, 1, 191, 81, 146, 18, 191, 31, 29, 232, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 228, 244, 190, 146, 177, 4, 62, 149, 241, 240, 188, 34, 155, 167, 62, 182, 78, 240, 60, 45, 20, 247, 62, 10, 167, 129, 190, 178, 161, 234, 62, 204, 82, 81, 190, 125, 195, 167, 61, 118, 37, 193, 62, 1, 140, 152, 190, 46, 145, 27, 190, 8, 179, 37, 190, 121, 202, 225, 190, 190, 44, 241, 190, 98, 191, 42, 60, 129, 30, 81, 190, 207, 108, 169, 62, 175, 15, 203, 190, 242, 58, 62, 62, 30, 104, 20, 63, 178, 79, 39, 63, 127, 203, 207, 62, 246, 130, 74, 62, 216, 157, 24, 62, 74, 246, 162, 62, 143, 247, 164, 61, 124, 37, 228, 190, 222, 36, 24, 63, 163, 6, 178, 62, 16, 111, 37, 63};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {50, 140, 134, 62, 38, 163, 15, 189, 226, 135, 31, 189, 234, 58, 171, 61, 126, 178, 34, 189, 64, 69, 61, 62, 180, 9, 224, 189, 18, 73, 37, 61, 100, 137, 85, 189, 69, 24, 219, 61, 209, 169, 97, 190, 16, 31, 3, 61, 236, 188, 21, 62, 136, 97, 189, 190, 11, 41, 82, 60, 114, 192, 131, 188, 121, 176, 166, 60, 32, 151, 24, 189, 104, 125, 138, 189, 99, 121, 22, 62, 120, 59, 211, 189, 182, 206, 245, 61, 41, 233, 19, 62, 151, 17, 26, 62, 248, 113, 223, 189, 140, 134, 137, 62, 211, 244, 33, 62, 34, 31, 85, 62, 65, 243, 104, 190, 218, 132, 237, 189, 191, 249, 40, 62, 202, 139, 255, 188, 89, 223, 188, 188, 226, 237, 18, 190, 154, 162, 205, 61, 86, 252, 85, 62, 237, 48, 31, 189, 242, 29, 184, 189, 56, 22, 47, 60, 213, 126, 193, 59, 243, 18, 110, 190, 101, 188, 240, 61, 245, 2, 17, 62, 204, 76, 196, 189, 202, 88, 13, 62, 5, 177, 139, 190, 19, 75, 114, 62, 178, 174, 90, 190, 130, 228, 15, 191, 130, 192, 185, 190, 196, 211, 231, 61, 86, 124, 155, 189, 23, 142, 140, 190, 132, 252, 162, 62, 34, 67, 192, 189, 66, 163, 58, 189, 95, 178, 160, 190, 250, 109, 176, 61, 160, 66, 49, 62, 212, 28, 9, 62, 213, 26, 226, 189, 88, 30, 181, 61, 25, 151, 57, 189, 4, 30, 219, 189, 165, 192, 149, 61, 166, 17, 4, 190, 28, 202, 246, 185, 127, 13, 32, 62, 45, 67, 14, 62, 234, 184, 239, 189, 192, 179, 63, 61, 69, 218, 190, 60, 123, 20, 72, 190, 59, 226, 113, 62, 27, 221, 179, 61, 12, 53, 77, 62, 241, 162, 177, 62, 188, 154, 172, 190, 102, 132, 79, 62, 214, 60, 254, 61, 230, 97, 156, 190, 216, 75, 25, 190, 216, 178, 42, 58, 203, 119, 139, 62, 22, 145, 64, 190, 52, 18, 192, 62, 196, 68, 225, 61, 34, 39, 231, 61, 251, 74, 245, 189, 38, 51, 140, 62, 1, 187, 61, 61, 4, 115, 17, 60, 35, 159, 192, 190, 154, 5, 253, 189, 228, 130, 91, 190, 209, 17, 111, 188, 48, 182, 170, 189, 52, 227, 43, 60, 19, 75, 8, 62, 81, 207, 227, 61, 187, 58, 81, 62, 55, 75, 152, 190, 164, 123, 148, 62, 184, 114, 141, 189, 231, 238, 235, 61, 171, 145, 124, 62, 23, 213, 22, 62, 245, 71, 112, 62, 239, 84, 212, 61, 61, 8, 9, 62, 68, 143, 173, 60, 130, 200, 80, 190, 115, 64, 16, 191, 55, 45, 155, 190, 158, 177, 98, 62, 167, 104, 82, 62, 98, 179, 56, 62, 199, 37, 58, 61, 70, 129, 30, 190, 104, 116, 63, 187, 107, 146, 179, 190, 132, 89, 132, 62, 222, 185, 111, 62, 152, 201, 95, 62, 55, 74, 162, 189, 238, 20, 175, 189, 141, 49, 0, 190, 89, 4, 252, 61, 73, 112, 128, 61, 213, 230, 12, 62, 25, 56, 125, 188, 129, 59, 146, 61, 88, 177, 49, 188, 160, 192, 188, 61, 152, 216, 141, 61, 228, 98, 52, 62, 71, 75, 79, 190, 183, 148, 69, 61, 119, 79, 127, 189, 200, 255, 8, 190, 189, 200, 163, 189, 145, 86, 21, 190, 177, 49, 181, 60, 9, 118, 88, 190, 137, 224, 211, 189, 190, 24, 14, 190, 217, 242, 33, 61, 60, 170, 115, 190, 240, 103, 6, 61, 47, 196, 178, 62, 28, 12, 244, 61, 154, 118, 230, 61, 235, 56, 5, 189, 140, 33, 59, 189, 127, 89, 86, 188, 136, 30, 227, 60, 66, 164, 35, 190, 74, 176, 180, 61, 251, 228, 73, 62, 77, 94, 49, 59, 135, 70, 171, 189, 129, 136, 12, 190, 179, 223, 192, 61, 96, 219, 168, 60, 129, 196, 125, 187, 220, 92, 136, 60, 3, 169, 237, 59, 250, 190, 188, 189, 29, 82, 169, 61, 151, 206, 55, 60, 100, 60, 139, 61, 100, 35, 242, 60, 226, 123, 12, 190, 14, 76, 15, 62, 105, 25, 141, 61, 234, 135, 75, 61, 94, 50, 23, 61, 182, 10, 164, 189, 183, 137, 13, 190, 5, 135, 220, 189, 228, 255, 226, 189, 140, 134, 23, 61, 144, 208, 110, 189, 57, 140, 63, 190, 200, 16, 87, 190, 228, 181, 77, 188, 221, 195, 4, 190, 252, 184, 213, 189, 62, 208, 21, 62, 201, 192, 177, 61, 73, 144, 236, 189, 28, 76, 92, 189, 210, 201, 252, 61, 249, 161, 149, 190, 34, 123, 3, 190, 13, 34, 76, 188, 101, 254, 255, 61, 74, 234, 82, 190, 225, 228, 119, 61, 180, 253, 17, 189, 121, 29, 227, 190, 93, 182, 167, 62, 43, 175, 168, 189, 123, 49, 43, 62, 46, 218, 124, 62, 166, 231, 76, 189, 130, 179, 13, 62, 186, 80, 216, 61, 187, 161, 71, 190, 88, 17, 62, 190, 92, 111, 131, 189, 167, 17, 98, 188, 141, 16, 176, 190, 170, 222, 204, 62, 165, 54, 196, 189, 111, 209, 173, 190, 185, 123, 193, 189, 48, 40, 60, 62, 119, 91, 110, 62, 6, 178, 224, 61, 53, 92, 28, 190, 111, 46, 11, 62, 187, 17, 172, 189, 185, 5, 147, 61, 19, 115, 149, 61, 60, 158, 83, 188, 190, 253, 57, 57, 166, 22, 21, 62, 246, 194, 27, 62, 239, 221, 246, 188, 24, 38, 170, 189, 35, 155, 41, 190, 103, 97, 87, 61, 198, 215, 243, 189, 65, 177, 170, 59, 232, 145, 6, 190, 191, 149, 153, 189, 44, 169, 133, 61, 185, 125, 32, 62, 20, 64, 8, 62, 126, 218, 17, 62, 199, 26, 194, 186, 98, 22, 33, 190, 53, 147, 172, 189, 91, 252, 171, 61, 42, 64, 10, 60, 205, 26, 44, 61, 19, 161, 60, 189, 15, 41, 168, 189, 4, 78, 15, 190, 139, 112, 65, 189, 8, 199, 2, 188, 237, 235, 32, 190, 97, 44, 52, 190, 183, 104, 192, 189, 222, 92, 16, 190, 216, 235, 38, 61, 148, 55, 136, 190, 184, 58, 102, 190, 52, 125, 47, 59, 125, 37, 153, 62, 6, 0, 180, 190, 12, 6, 55, 62, 143, 212, 244, 190, 240, 209, 38, 190, 127, 26, 187, 61, 242, 44, 144, 62, 155, 240, 140, 62, 105, 226, 14, 191, 229, 184, 183, 190, 202, 134, 179, 60, 163, 227, 153, 189, 139, 50, 46, 191, 197, 104, 79, 191, 17, 113, 231, 60, 213, 19, 22, 190, 26, 140, 38, 191, 215, 227, 77, 62, 87, 213, 17, 62, 241, 95, 3, 191, 29, 111, 36, 62, 146, 142, 214, 189, 101, 184, 103, 59, 97, 242, 247, 61, 53, 166, 196, 189, 184, 82, 4, 189, 235, 141, 104, 191, 245, 114, 136, 62, 104, 190, 17, 62, 199, 79, 107, 188, 21, 114, 211, 187, 40, 74, 72, 62, 197, 147, 2, 189, 227, 85, 50, 190, 249, 96, 5, 62, 238, 179, 143, 189, 13, 215, 155, 189, 176, 184, 82, 189, 107, 222, 142, 61, 24, 103, 83, 62, 180, 216, 224, 61, 156, 29, 210, 190, 156, 98, 237, 61, 166, 139, 228, 61, 202, 165, 173, 190, 47, 217, 12, 190, 55, 212, 92, 189, 43, 54, 22, 62, 174, 130, 194, 190, 112, 183, 55, 62, 71, 232, 255, 61, 123, 39, 154, 190, 178, 87, 91, 61, 231, 100, 73, 62, 92, 76, 154, 189, 176, 78, 196, 61, 61, 140, 211, 190, 166, 137, 144, 62, 193, 198, 136, 190, 56, 47, 38, 190, 50, 34, 9, 190, 112, 228, 7, 190, 15, 199, 173, 61, 205, 177, 136, 190, 209, 127, 157, 188, 23, 203, 53, 189, 3, 30, 85, 190, 96, 238, 2, 190, 11, 177, 139, 60, 82, 187, 218, 189, 81, 101, 176, 189, 146, 6, 213, 184, 123, 190, 117, 62, 132, 113, 251, 189, 144, 105, 38, 62, 234, 251, 226, 61, 79, 119, 212, 189, 119, 166, 252, 188, 173, 107, 22, 191, 111, 13, 4, 62, 245, 104, 58, 189, 50, 32, 20, 189, 90, 45, 253, 190, 199, 180, 103, 189, 211, 68, 240, 189, 62, 106, 196, 189, 107, 242, 100, 61, 46, 254, 254, 61, 109, 75, 148, 61, 166, 153, 28, 190, 36, 20, 199, 61, 120, 225, 89, 190, 58, 10, 238, 62, 116, 160, 129, 190, 255, 96, 208, 189, 251, 188, 92, 61, 62, 127, 253, 61, 47, 155, 11, 62, 5, 102, 183, 187, 59, 237, 200, 189, 63, 125, 186, 190, 115, 219, 204, 62, 100, 133, 170, 60, 95, 70, 37, 62, 77, 129, 55, 62, 187, 162, 59, 190, 80, 192, 156, 189, 1, 19, 53, 62, 112, 30, 37, 190, 58, 222, 206, 188, 169, 7, 121, 61, 192, 76, 26, 62, 233, 34, 11, 190, 29, 136, 118, 62, 52, 15, 164, 189, 37, 52, 134, 61, 27, 229, 173, 189, 173, 129, 153, 62, 230, 18, 74, 62, 47, 137, 100, 62, 230, 200, 175, 189, 200, 79, 43, 189, 41, 234, 11, 62, 60, 154, 143, 190, 17, 188, 44, 62, 33, 192, 116, 190, 60, 138, 191, 190, 127, 101, 128, 62, 34, 99, 76, 189, 239, 244, 121, 190, 127, 144, 3, 61, 71, 194, 66, 191, 173, 7, 212, 190, 173, 134, 114, 62, 238, 91, 131, 62, 59, 84, 87, 62, 179, 26, 31, 190, 133, 101, 91, 190, 84, 65, 42, 62, 181, 234, 36, 190, 111, 109, 139, 191, 114, 212, 74, 191, 126, 111, 204, 61, 34, 4, 99, 189, 91, 121, 8, 191, 63, 158, 223, 189, 13, 12, 79, 62, 236, 58, 252, 190, 78, 30, 223, 186, 61, 92, 134, 60, 108, 59, 212, 61, 143, 178, 103, 189, 59, 78, 170, 188, 123, 230, 36, 62, 14, 211, 94, 191, 92, 181, 112, 62, 157, 140, 25, 189, 245, 167, 231, 188, 253, 222, 177, 60, 152, 135, 41, 190, 62, 85, 60, 61, 251, 40, 44, 62, 160, 77, 195, 189, 87, 100, 147, 61, 204, 10, 241, 61, 54, 56, 108, 189, 239, 85, 90, 61, 109, 175, 161, 61, 172, 170, 174, 60, 146, 206, 71, 190, 110, 212, 244, 189, 110, 118, 1, 62, 69, 204, 254, 185, 152, 250, 188, 189, 222, 160, 244, 189, 148, 121, 78, 61, 249, 60, 204, 189, 228, 62, 12, 190, 70, 1, 249, 189, 11, 12, 150, 60, 38, 52, 240, 189, 56, 120, 230, 61, 192, 50, 3, 62, 161, 194, 14, 190, 73, 123, 11, 61, 141, 27, 182, 189, 92, 215, 150, 189, 101, 198, 133, 61, 193, 74, 41, 60, 43, 135, 25, 189, 78, 120, 248, 61, 114, 217, 166, 61, 189, 247, 204, 61, 95, 224, 95, 60, 137, 191, 22, 190, 174, 13, 131, 62, 143, 81, 78, 61, 126, 179, 179, 189, 181, 90, 173, 60, 168, 43, 59, 189, 5, 74, 70, 190, 140, 44, 157, 62, 62, 205, 165, 190, 82, 203, 39, 188, 218, 174, 0, 62, 160, 38, 52, 189, 232, 253, 20, 62, 108, 65, 3, 190, 29, 199, 130, 62, 154, 12, 144, 188, 104, 78, 66, 61, 168, 114, 245, 188, 172, 193, 189, 61, 210, 49, 162, 190, 254, 177, 179, 189, 103, 116, 73, 188, 72, 176, 141, 61, 255, 123, 30, 62, 232, 222, 115, 189, 168, 118, 99, 62, 81, 169, 167, 190, 219, 97, 187, 62, 19, 198, 189, 61, 163, 209, 62, 190, 226, 138, 12, 190, 94, 219, 80, 189, 91, 121, 205, 190, 118, 50, 124, 62, 42, 215, 152, 189, 253, 230, 13, 190, 61, 252, 156, 60, 168, 68, 114, 190, 106, 239, 248, 189, 31, 236, 158, 62, 28, 29, 63, 189, 210, 70, 148, 189, 1, 202, 22, 62, 171, 99, 8, 62, 19, 165, 22, 190, 32, 210, 15, 61, 143, 255, 58, 61, 18, 11, 132, 189, 71, 16, 73, 62, 150, 171, 45, 62, 40, 35, 30, 62, 141, 174, 78, 190, 109, 204, 138, 189, 148, 176, 142, 188, 7, 221, 178, 60, 227, 98, 164, 61, 198, 188, 33, 61, 68, 221, 66, 62, 125, 69, 40, 189, 250, 113, 220, 188, 238, 235, 5, 62, 226, 100, 162, 190, 132, 231, 201, 61, 8, 246, 89, 62, 155, 117, 176, 60, 32, 66, 88, 62, 67, 234, 60, 62, 56, 131, 43, 62, 166, 237, 40, 190, 158, 75, 157, 190, 82, 220, 0, 61, 122, 189, 159, 190, 50, 147, 154, 61, 166, 111, 127, 61, 192, 204, 255, 188, 170, 11, 148, 189, 75, 45, 4, 189, 150, 222, 17, 189, 84, 180, 39, 62, 200, 94, 156, 187, 241, 89, 12, 61, 58, 146, 117, 61, 201, 115, 7, 62, 108, 69, 152, 62, 121, 241, 92, 189, 61, 30, 134, 60, 66, 127, 26, 189, 147, 210, 184, 189, 247, 15, 26, 62, 154, 55, 134, 190, 202, 242, 194, 190, 50, 58, 196, 189, 15, 95, 21, 189, 86, 46, 164, 61, 22, 169, 34, 190, 77, 101, 5, 59, 64, 201, 140, 190, 181, 229, 226, 61, 167, 136, 60, 190, 101, 184, 182, 190, 64, 61, 43, 62, 202, 186, 184, 190, 239, 9, 166, 189, 38, 198, 35, 62, 95, 93, 232, 189, 221, 179, 4, 60, 151, 136, 6, 61, 80, 231, 210, 60, 155, 179, 174, 188, 20, 199, 11, 62, 228, 194, 172, 188, 244, 224, 207, 189, 111, 136, 221, 61, 113, 255, 83, 190, 164, 7, 2, 61, 115, 198, 179, 189, 237, 213, 3, 188, 58, 227, 164, 190, 38, 36, 115, 61, 116, 111, 202, 61, 203, 60, 58, 62, 27, 70, 48, 62, 45, 85, 53, 190, 68, 83, 251, 60, 242, 20, 152, 62, 198, 219, 26, 190, 88, 78, 245, 189, 76, 60, 27, 62, 125, 91, 158, 190, 132, 28, 212, 61, 107, 116, 26, 190, 129, 204, 176, 62, 66, 146, 45, 191, 35, 36, 30, 190, 192, 50, 239, 61, 149, 237, 4, 191, 18, 1, 119, 189, 14, 239, 188, 61, 131, 235, 71, 189, 94, 57, 158, 189, 54, 124, 253, 190, 170, 177, 150, 189, 149, 242, 8, 62, 113, 153, 39, 62, 94, 191, 53, 190, 110, 221, 48, 62, 57, 246, 182, 61, 120, 200, 157, 62, 29, 53, 173, 61, 220, 120, 203, 189, 20, 6, 121, 190, 93, 188, 76, 189, 250, 42, 168, 61, 86, 36, 9, 191, 97, 21, 142, 61, 33, 41, 230, 61, 94, 22, 18, 62, 189, 116, 32, 188, 216, 163, 47, 189, 164, 81, 121, 190, 102, 220, 136, 60, 187, 204, 163, 190, 38, 30, 45, 61, 206, 228, 190, 188, 171, 149, 14, 190, 2, 228, 123, 189, 88, 126, 193, 188, 80, 161, 187, 60, 229, 10, 162, 61, 198, 137, 194, 61, 218, 218, 95, 190, 74, 239, 168, 189, 168, 236, 67, 189, 97, 194, 213, 189, 221, 211, 61, 62, 188, 3, 157, 190, 73, 57, 150, 189, 150, 116, 88, 62, 185, 152, 86, 190, 141, 3, 66, 60, 114, 245, 59, 61, 113, 100, 9, 61, 77, 79, 202, 61, 27, 132, 219, 61, 173, 250, 28, 190, 61, 132, 16, 190, 116, 240, 23, 190, 98, 179, 224, 188, 171, 29, 156, 61, 104, 182, 1, 190, 88, 218, 155, 61, 105, 157, 31, 59, 225, 200, 237, 61, 0, 97, 246, 61, 207, 155, 249, 189, 156, 132, 93, 61, 205, 254, 15, 62, 216, 33, 4, 62, 85, 35, 225, 189, 176, 31, 62, 61, 35, 221, 6, 61, 227, 122, 36, 62, 161, 128, 222, 189, 167, 96, 29, 190, 220, 254, 13, 190, 107, 223, 147, 189, 206, 99, 34, 190, 45, 208, 77, 190, 210, 216, 5, 62, 194, 18, 4, 190, 62, 31, 142, 189, 219, 149, 61, 189, 26, 217, 190, 61, 51, 185, 88, 190, 148, 197, 248, 189, 4, 134, 3, 190, 99, 158, 167, 189, 105, 65, 67, 190, 14, 198, 71, 188, 225, 190, 129, 61, 119, 45, 41, 62, 122, 69, 218, 61, 227, 144, 107, 62, 89, 8, 227, 61, 125, 186, 134, 60, 156, 132, 41, 189, 173, 201, 42, 190, 249, 215, 114, 62, 93, 236, 87, 189, 115, 2, 12, 62, 16, 77, 113, 61, 188, 49, 161, 190, 124, 24, 238, 61, 159, 154, 180, 61, 240, 61, 224, 186, 126, 86, 77, 190, 101, 45, 44, 189, 253, 156, 241, 60, 36, 27, 49, 61, 57, 116, 112, 62, 87, 188, 29, 62, 167, 85, 207, 59, 228, 141, 147, 190, 225, 144, 143, 61, 88, 105, 168, 61, 114, 26, 98, 189, 114, 233, 76, 190, 206, 141, 194, 189, 197, 76, 14, 61, 56, 222, 4, 190, 232, 62, 178, 189, 69, 150, 229, 188, 189, 184, 56, 190, 187, 116, 192, 188, 143, 113, 135, 60, 146, 9, 6, 62, 38, 137, 51, 62, 157, 126, 173, 189, 183, 83, 10, 60, 129, 119, 19, 190, 172, 49, 90, 190, 251, 172, 4, 190, 144, 75, 56, 62, 118, 2, 76, 189, 203, 69, 162, 62, 70, 243, 85, 62, 215, 66, 57, 190, 48, 175, 68, 190, 125, 29, 56, 191, 142, 68, 0, 62, 42, 134, 130, 189, 72, 199, 186, 187, 169, 123, 26, 191, 241, 246, 130, 190, 11, 82, 237, 189, 186, 237, 49, 62, 20, 39, 97, 60, 225, 99, 172, 189, 239, 194, 230, 60, 139, 211, 148, 61, 136, 61, 0, 62, 5, 51, 141, 190, 185, 164, 35, 190, 102, 153, 8, 61, 50, 77, 197, 60, 45, 163, 1, 61, 239, 47, 15, 190, 252, 204, 234, 61, 180, 242, 91, 61, 118, 246, 82, 59, 213, 133, 9, 62, 141, 175, 253, 60, 40, 131, 80, 60, 81, 166, 133, 190, 155, 192, 126, 190, 17, 247, 176, 188, 39, 175, 238, 189, 131, 109, 43, 190, 24, 116, 141, 190, 165, 214, 131, 60, 249, 196, 254, 189, 133, 212, 219, 188, 196, 4, 243, 61, 105, 69, 134, 62, 91, 106, 62, 188, 195, 99, 25, 62, 212, 44, 155, 60, 59, 18, 85, 190, 2, 207, 166, 61, 10, 254, 50, 190, 143, 212, 113, 190, 137, 62, 35, 62, 88, 57, 14, 62, 217, 144, 178, 188, 188, 13, 162, 190, 46, 73, 249, 61, 2, 252, 86, 62, 235, 35, 0, 190, 130, 128, 6, 61, 23, 31, 50, 190, 103, 52, 47, 189, 191, 107, 193, 60, 153, 216, 5, 62, 15, 181, 32, 62, 105, 194, 72, 61, 1, 206, 14, 190, 140, 11, 35, 189, 235, 230, 141, 190, 190, 92, 250, 189, 208, 141, 245, 188, 162, 204, 154, 60, 134, 183, 59, 60, 7, 28, 138, 190, 37, 70, 251, 189, 149, 152, 6, 60, 231, 201, 15, 62, 131, 192, 167, 189, 69, 210, 232, 189, 189, 234, 137, 190, 69, 74, 231, 61, 46, 9, 248, 189, 50, 136, 3, 62, 107, 112, 252, 189, 107, 238, 76, 187, 112, 87, 8, 190, 223, 220, 147, 190, 119, 8, 22, 191, 204, 92, 162, 62, 35, 243, 143, 62, 179, 197, 71, 61, 191, 5, 7, 191, 63, 21, 10, 62, 213, 139, 194, 191, 77, 89, 51, 189, 236, 135, 140, 189, 246, 66, 216, 190, 154, 136, 108, 61, 47, 222, 152, 191, 117, 169, 151, 190, 223, 209, 127, 62, 124, 218, 45, 190, 198, 14, 157, 190, 177, 246, 79, 62, 243, 91, 15, 189, 57, 239, 27, 62, 168, 188, 131, 190, 200, 18, 203, 59, 121, 107, 18, 62, 23, 204, 140, 62, 27, 44, 170, 61, 40, 220, 254, 61, 222, 247, 164, 190, 19, 25, 59, 190, 147, 52, 219, 190, 16, 47, 66, 62, 255, 35, 31, 190, 0, 41, 36, 62, 212, 137, 125, 62, 255, 225, 237, 190, 166, 199, 192, 62, 70, 63, 159, 62, 225, 203, 38, 62, 173, 102, 130, 189, 26, 67, 228, 61, 20, 123, 128, 191, 94, 163, 233, 188, 79, 38, 51, 61, 17, 190, 185, 190, 85, 44, 161, 62, 232, 238, 96, 191, 0, 68, 167, 189, 26, 18, 51, 62, 209, 35, 135, 189, 114, 71, 108, 61, 221, 253, 41, 60, 112, 153, 180, 187, 53, 229, 252, 189, 142, 162, 103, 190, 51, 140, 78, 62, 136, 144, 184, 61, 225, 160, 153, 60, 182, 154, 125, 62, 216, 249, 227, 61, 20, 150, 140, 190, 97, 75, 187, 190, 185, 180, 46, 190, 222, 19, 160, 62, 127, 216, 164, 189, 183, 84, 22, 62, 30, 200, 14, 62, 244, 67, 106, 61, 212, 6, 140, 190, 65, 59, 7, 62, 206, 198, 86, 190, 77, 219, 61, 190, 175, 210, 136, 61, 91, 147, 0, 187, 122, 214, 123, 62, 78, 169, 97, 190, 169, 25, 0, 62, 67, 140, 108, 190, 102, 69, 207, 189, 175, 126, 92, 62, 176, 216, 95, 190, 246, 128, 107, 61, 39, 195, 76, 189, 20, 218, 215, 189, 226, 73, 208, 59, 189, 87, 146, 190, 53, 238, 136, 61, 104, 120, 141, 62, 135, 206, 181, 61, 135, 12, 6, 188, 28, 28, 244, 61, 118, 171, 63, 62, 212, 121, 239, 61, 28, 200, 195, 189, 129, 128, 25, 190, 109, 237, 128, 190, 141, 131, 238, 58, 40, 50, 112, 62, 49, 221, 15, 190, 159, 155, 1, 62, 206, 156, 32, 190, 162, 6, 205, 189, 198, 144, 29, 186, 97, 153, 213, 61, 7, 244, 58, 62, 41, 14, 36, 62, 0, 81, 16, 61, 181, 45, 98, 190, 134, 34, 226, 61, 236, 230, 255, 188, 134, 25, 238, 59, 65, 57, 236, 61, 10, 138, 139, 190, 119, 233, 108, 60, 180, 205, 26, 62, 102, 68, 181, 61, 76, 127, 1, 61, 133, 42, 1, 62, 229, 240, 3, 190, 42, 121, 47, 62, 28, 134, 27, 62, 240, 120, 95, 62, 30, 121, 253, 61, 182, 118, 4, 190, 119, 62, 31, 60, 88, 99, 150, 188, 217, 163, 174, 61, 252, 63, 105, 190, 132, 129, 1, 62, 193, 123, 94, 189, 18, 34, 61, 190, 225, 74, 196, 188, 254, 96, 43, 189, 98, 209, 85, 62, 162, 243, 50, 62, 247, 12, 42, 190, 65, 139, 0, 189, 249, 218, 146, 61, 15, 224, 91, 62, 193, 249, 157, 61, 188, 31, 251, 188, 38, 199, 131, 62, 110, 10, 252, 189, 41, 51, 156, 190, 219, 27, 156, 62, 6, 217, 44, 189, 0, 181, 143, 189, 63, 43, 133, 60, 220, 92, 252, 61, 32, 23, 8, 189, 48, 158, 155, 190, 131, 117, 229, 61, 190, 225, 69, 189, 56, 170, 144, 62, 190, 22, 205, 60, 245, 110, 64, 62, 178, 52, 105, 190, 220, 189, 229, 189, 168, 35, 47, 62, 129, 27, 77, 62, 207, 235, 85, 61, 131, 49, 247, 189, 173, 207, 105, 62, 73, 228, 4, 191, 45, 153, 6, 62, 136, 96, 142, 184, 67, 79, 173, 62, 212, 208, 68, 190, 33, 249, 112, 62, 182, 33, 235, 190, 130, 199, 49, 190, 129, 113, 9, 62, 216, 158, 1, 190, 136, 209, 17, 190, 92, 88, 3, 191, 60, 1, 164, 190, 117, 192, 107, 190, 113, 187, 191, 190, 172, 214, 155, 190, 251, 47, 191, 61, 156, 108, 93, 62, 32, 233, 216, 61, 27, 143, 156, 190, 126, 113, 12, 191, 180, 126, 107, 62, 43, 166, 0, 190, 194, 131, 242, 190, 11, 50, 156, 62, 89, 21, 129, 189, 1, 39, 183, 190, 156, 80, 200, 190, 32, 176, 134, 189, 62, 50, 200, 190, 69, 40, 131, 188, 48, 171, 21, 62, 209, 246, 129, 190, 238, 9, 17, 61, 80, 122, 63, 62, 124, 171, 80, 190, 107, 9, 60, 190, 189, 214, 255, 61, 51, 0, 74, 190, 31, 238, 66, 62, 175, 185, 3, 190, 187, 29, 128, 190, 175, 70, 194, 189, 28, 254, 189, 190, 106, 199, 166, 189, 125, 51, 59, 62, 75, 76, 158, 188, 252, 76, 204, 188, 161, 28, 87, 61, 227, 109, 197, 188, 198, 35, 28, 190, 64, 107, 164, 190, 192, 37, 125, 62, 2, 22, 116, 190, 0, 97, 70, 62, 242, 114, 155, 62, 130, 107, 46, 189, 91, 67, 98, 190, 96, 158, 207, 61, 17, 74, 180, 61, 204, 9, 22, 62, 252, 242, 84, 189, 15, 119, 13, 190, 184, 33, 22, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {47, 180, 25, 62, 84, 251, 83, 62, 146, 92, 143, 61, 234, 42, 246, 188, 115, 193, 180, 62, 188, 209, 223, 61, 212, 223, 25, 62, 127, 108, 244, 189, 248, 179, 189, 61, 165, 241, 154, 61, 122, 167, 59, 190, 83, 203, 1, 61, 33, 215, 24, 62, 113, 15, 27, 190, 46, 253, 152, 62, 107, 133, 223, 189, 204, 50, 26, 189, 210, 217, 59, 190, 211, 220, 87, 62, 227, 250, 21, 190, 181, 78, 135, 61, 33, 210, 87, 189, 243, 196, 162, 190, 23, 233, 242, 61, 145, 163, 227, 60, 151, 68, 67, 60, 186, 39, 63, 60, 30, 9, 121, 189, 207, 41, 39, 62, 220, 196, 216, 60, 9, 85, 164, 188, 134, 40, 187, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 79, 32, 190, 96, 242, 192, 190, 129, 195, 173, 190, 102, 209, 148, 62, 78, 201, 8, 189, 20, 58, 196, 189, 229, 65, 167, 190, 36, 27, 201, 187, 48, 188, 62, 191, 172, 165, 153, 190, 182, 137, 151, 62, 111, 182, 168, 190, 184, 108, 121, 191, 22, 252, 167, 189, 223, 134, 91, 62, 7, 136, 73, 62, 18, 77, 9, 190, 179, 99, 73, 62, 180, 207, 203, 190, 175, 171, 79, 189, 156, 233, 7, 189, 189, 76, 17, 190, 223, 70, 232, 62, 124, 81, 154, 61, 50, 5, 165, 190, 179, 70, 52, 63, 86, 40, 194, 62, 140, 94, 21, 190, 100, 37, 19, 190, 39, 188, 116, 62, 241, 139, 83, 63, 15, 165, 106, 62, 129, 11, 246, 189, 252, 36, 52, 190, 0, 60, 134, 62, 43, 107, 31, 190, 4, 113, 167, 190, 149, 181, 192, 61, 198, 188, 15, 62, 183, 107, 5, 62, 204, 9, 68, 61, 164, 202, 81, 62, 206, 239, 132, 62, 193, 117, 241, 61, 135, 32, 234, 188, 108, 64, 168, 61, 33, 161, 0, 190, 213, 155, 131, 189, 113, 92, 148, 189, 30, 19, 22, 62, 145, 156, 30, 190, 16, 146, 32, 62, 75, 201, 56, 60, 146, 239, 64, 189, 219, 9, 19, 63, 188, 82, 24, 190, 159, 206, 11, 188, 91, 145, 142, 60, 172, 250, 144, 61, 232, 203, 218, 189, 195, 169, 90, 190, 190, 12, 24, 62, 234, 228, 60, 61, 134, 72, 158, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {53, 219, 151, 189, 76, 126, 121, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {38, 58, 230, 190, 86, 215, 150, 191, 182, 129, 161, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {93, 98, 40, 64, 110, 95, 38, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0030/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}