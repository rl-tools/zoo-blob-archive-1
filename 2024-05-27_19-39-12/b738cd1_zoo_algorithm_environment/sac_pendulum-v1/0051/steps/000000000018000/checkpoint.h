// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {88, 220, 124, 62, 56, 114, 133, 189, 53, 203, 245, 62, 73, 251, 201, 190, 138, 193, 152, 191, 203, 178, 206, 189, 85, 150, 35, 191, 87, 217, 208, 189, 67, 32, 90, 191, 145, 92, 141, 62, 142, 136, 129, 62, 186, 232, 146, 59, 10, 104, 40, 191, 28, 131, 119, 62, 157, 201, 27, 189, 195, 189, 54, 63, 134, 148, 183, 60, 122, 161, 135, 189, 208, 89, 255, 62, 147, 8, 107, 62, 138, 14, 43, 191, 58, 131, 174, 62, 119, 115, 222, 190, 171, 86, 71, 62, 117, 72, 190, 188, 8, 191, 143, 191, 191, 243, 124, 190, 227, 103, 73, 62, 13, 245, 159, 63, 213, 139, 251, 62, 251, 169, 42, 191, 84, 71, 154, 190, 97, 63, 16, 191, 22, 37, 237, 61, 162, 220, 82, 62, 94, 1, 44, 191, 39, 56, 2, 63, 176, 179, 112, 63, 103, 35, 154, 62, 87, 88, 127, 190, 217, 193, 167, 62, 75, 214, 199, 61, 69, 215, 54, 63, 88, 214, 120, 191, 81, 3, 210, 190, 12, 76, 193, 61, 41, 182, 175, 63, 224, 192, 112, 62, 238, 82, 26, 63, 114, 6, 149, 63, 239, 97, 118, 62, 72, 174, 192, 61, 140, 152, 51, 191, 194, 73, 249, 62, 24, 229, 47, 62, 36, 153, 60, 189, 22, 86, 253, 190, 73, 76, 194, 188, 68, 223, 69, 191, 217, 66, 102, 190, 179, 69, 207, 62, 38, 122, 176, 63, 191, 247, 28, 62, 93, 11, 167, 62, 6, 91, 211, 190, 108, 28, 183, 62, 30, 152, 174, 190, 201, 251, 185, 62, 218, 44, 69, 63, 246, 44, 28, 63, 69, 110, 16, 63, 95, 2, 5, 63, 237, 71, 17, 63, 92, 72, 78, 191, 64, 29, 193, 189, 90, 62, 238, 190, 152, 38, 47, 63, 136, 173, 209, 190, 24, 190, 50, 63, 217, 167, 110, 63, 90, 129, 55, 62, 93, 209, 101, 63, 53, 67, 128, 63, 103, 30, 195, 62, 143, 152, 148, 190, 186, 52, 168, 63, 181, 82, 142, 62, 181, 19, 60, 191, 135, 60, 4, 62, 96, 117, 23, 63, 17, 166, 59, 189, 107, 12, 122, 191, 193, 234, 155, 62, 113, 244, 159, 189, 25, 253, 178, 63, 8, 31, 145, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {106, 217, 97, 191, 74, 42, 97, 61, 228, 220, 211, 189, 232, 47, 208, 190, 124, 84, 42, 63, 48, 249, 141, 62, 170, 208, 28, 191, 174, 78, 93, 190, 191, 89, 186, 62, 188, 232, 96, 62, 244, 226, 105, 62, 245, 244, 246, 62, 242, 240, 63, 190, 23, 82, 177, 190, 238, 52, 9, 191, 213, 200, 206, 190, 151, 244, 20, 189, 133, 113, 241, 190, 216, 107, 249, 189, 22, 26, 164, 62, 45, 109, 235, 190, 190, 71, 45, 191, 102, 42, 133, 62, 68, 91, 61, 190, 101, 97, 60, 62, 50, 175, 74, 62, 147, 21, 41, 62, 113, 49, 199, 61, 167, 144, 20, 63, 216, 138, 16, 191, 101, 114, 146, 61, 172, 155, 61, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {77, 53, 134, 61, 21, 29, 235, 189, 109, 101, 255, 61, 13, 254, 122, 61, 124, 118, 163, 188, 230, 217, 217, 188, 235, 114, 109, 190, 3, 104, 10, 62, 82, 218, 16, 61, 12, 4, 134, 190, 25, 161, 12, 62, 143, 41, 190, 61, 120, 225, 117, 60, 230, 182, 92, 62, 145, 10, 199, 190, 70, 199, 53, 191, 3, 95, 172, 61, 12, 128, 135, 59, 98, 69, 210, 189, 44, 214, 250, 189, 227, 107, 1, 63, 79, 66, 29, 62, 218, 196, 210, 187, 133, 62, 212, 188, 42, 2, 42, 190, 177, 13, 197, 61, 99, 7, 88, 62, 42, 118, 241, 61, 208, 225, 224, 61, 59, 112, 3, 191, 200, 182, 35, 189, 125, 8, 26, 190, 131, 114, 85, 190, 103, 31, 168, 62, 28, 145, 23, 190, 101, 94, 8, 62, 106, 230, 138, 62, 186, 153, 44, 189, 251, 95, 212, 190, 121, 91, 6, 190, 42, 93, 159, 62, 176, 141, 149, 189, 49, 110, 56, 62, 254, 81, 222, 189, 182, 104, 196, 190, 158, 58, 191, 61, 252, 125, 133, 190, 61, 126, 39, 190, 150, 72, 88, 191, 221, 185, 179, 188, 184, 189, 139, 190, 244, 2, 12, 62, 245, 67, 61, 191, 204, 148, 75, 190, 43, 46, 111, 62, 36, 227, 124, 190, 6, 12, 28, 188, 93, 191, 82, 190, 157, 191, 146, 190, 240, 145, 23, 189, 222, 65, 130, 189, 56, 229, 5, 62, 206, 188, 67, 62, 36, 52, 178, 62, 197, 219, 85, 190, 90, 97, 37, 191, 105, 44, 246, 60, 71, 213, 9, 62, 17, 25, 121, 62, 2, 88, 157, 60, 198, 98, 26, 188, 219, 54, 105, 189, 137, 13, 132, 190, 131, 147, 131, 61, 101, 22, 74, 190, 119, 28, 137, 61, 72, 84, 65, 190, 91, 23, 140, 189, 159, 93, 200, 62, 218, 107, 106, 61, 114, 111, 114, 191, 191, 70, 23, 61, 65, 189, 17, 62, 228, 150, 144, 190, 77, 115, 140, 191, 47, 52, 253, 60, 228, 74, 89, 62, 119, 32, 63, 190, 250, 72, 93, 62, 39, 119, 244, 189, 253, 91, 28, 191, 115, 155, 188, 190, 194, 128, 100, 189, 51, 102, 80, 59, 145, 194, 189, 61, 147, 160, 208, 62, 128, 162, 143, 61, 250, 74, 107, 190, 209, 72, 66, 190, 96, 177, 174, 189, 72, 169, 14, 190, 2, 7, 204, 61, 237, 179, 212, 188, 145, 69, 7, 62, 185, 241, 152, 190, 56, 123, 23, 190, 246, 13, 10, 190, 142, 37, 19, 62, 70, 126, 22, 62, 109, 15, 215, 189, 228, 70, 71, 191, 51, 255, 214, 190, 170, 177, 202, 62, 213, 32, 129, 62, 23, 10, 52, 62, 122, 171, 221, 61, 67, 9, 120, 62, 174, 74, 15, 62, 206, 80, 160, 190, 244, 19, 134, 189, 48, 169, 8, 190, 182, 48, 114, 62, 234, 177, 136, 62, 184, 97, 118, 62, 255, 120, 134, 190, 16, 138, 26, 190, 113, 179, 50, 62, 44, 57, 85, 62, 210, 77, 190, 61, 229, 230, 250, 61, 124, 235, 13, 62, 11, 8, 24, 61, 222, 73, 214, 61, 80, 3, 182, 60, 89, 124, 74, 190, 173, 217, 26, 61, 8, 40, 39, 190, 250, 215, 116, 190, 72, 198, 252, 61, 224, 252, 233, 61, 183, 10, 115, 62, 46, 252, 140, 62, 131, 182, 32, 191, 69, 190, 161, 191, 212, 181, 211, 62, 159, 83, 174, 62, 175, 138, 65, 189, 233, 86, 255, 188, 233, 63, 175, 62, 212, 85, 20, 63, 139, 142, 241, 189, 117, 171, 19, 62, 82, 103, 37, 190, 26, 35, 41, 62, 214, 226, 122, 62, 238, 128, 101, 61, 229, 14, 80, 190, 22, 6, 144, 190, 207, 199, 223, 189, 224, 194, 147, 190, 236, 19, 210, 59, 255, 246, 130, 62, 109, 106, 198, 61, 174, 158, 76, 190, 99, 62, 42, 61, 174, 199, 202, 61, 4, 26, 146, 190, 24, 10, 91, 190, 200, 250, 74, 62, 244, 145, 126, 190, 201, 3, 162, 62, 136, 248, 195, 188, 244, 38, 183, 61, 11, 113, 26, 62, 143, 205, 34, 191, 140, 46, 151, 191, 51, 162, 207, 62, 229, 21, 52, 190, 235, 215, 59, 188, 236, 72, 40, 62, 13, 99, 188, 62, 199, 106, 30, 63, 7, 92, 194, 190, 104, 188, 87, 188, 157, 36, 143, 190, 10, 53, 167, 62, 187, 5, 233, 61, 76, 137, 154, 62, 16, 192, 157, 189, 104, 80, 96, 191, 23, 196, 199, 190, 128, 168, 155, 190, 21, 216, 17, 190, 203, 62, 55, 62, 102, 46, 244, 190, 220, 37, 35, 186, 183, 68, 182, 61, 96, 101, 160, 62, 77, 152, 176, 189, 4, 22, 73, 189, 18, 149, 132, 189, 91, 7, 186, 189, 230, 61, 27, 190, 153, 140, 240, 189, 224, 15, 55, 191, 5, 150, 112, 190, 88, 169, 130, 62, 151, 8, 132, 190, 112, 237, 51, 191, 105, 96, 226, 189, 19, 14, 149, 61, 241, 205, 132, 62, 123, 133, 148, 191, 53, 73, 171, 189, 110, 78, 32, 62, 161, 71, 50, 190, 64, 204, 64, 62, 153, 106, 79, 62, 7, 28, 14, 190, 180, 227, 126, 190, 67, 209, 84, 189, 109, 235, 162, 61, 76, 20, 112, 62, 175, 146, 17, 63, 235, 9, 230, 190, 46, 118, 117, 62, 113, 231, 188, 189, 242, 125, 34, 189, 244, 14, 8, 191, 132, 153, 219, 62, 191, 127, 199, 62, 5, 81, 144, 62, 97, 31, 204, 62, 196, 83, 227, 189, 78, 68, 247, 190, 80, 75, 168, 61, 179, 83, 116, 190, 231, 202, 160, 190, 85, 99, 198, 62, 85, 229, 27, 62, 198, 43, 39, 191, 225, 215, 3, 61, 7, 63, 47, 62, 216, 170, 119, 61, 151, 124, 188, 190, 21, 116, 71, 190, 169, 95, 106, 189, 72, 163, 56, 191, 243, 120, 16, 63, 166, 211, 202, 190, 238, 10, 196, 191, 114, 130, 170, 191, 133, 178, 185, 188, 120, 45, 165, 61, 196, 11, 246, 61, 197, 160, 115, 189, 192, 112, 151, 190, 20, 252, 92, 190, 200, 191, 42, 190, 42, 52, 246, 187, 83, 147, 36, 61, 118, 133, 117, 61, 231, 237, 147, 191, 224, 245, 134, 190, 116, 60, 60, 62, 159, 24, 212, 190, 5, 168, 219, 60, 149, 89, 101, 190, 176, 140, 85, 61, 205, 90, 152, 188, 124, 215, 178, 190, 186, 185, 59, 190, 30, 35, 168, 61, 166, 177, 179, 190, 146, 41, 140, 190, 89, 58, 11, 189, 164, 160, 17, 190, 27, 238, 147, 61, 247, 19, 14, 190, 72, 244, 35, 62, 169, 209, 13, 189, 213, 45, 191, 61, 107, 252, 88, 61, 77, 173, 146, 62, 25, 119, 183, 61, 182, 56, 114, 191, 102, 32, 119, 190, 97, 212, 207, 191, 9, 83, 127, 61, 17, 35, 136, 190, 214, 19, 143, 190, 40, 94, 232, 189, 47, 203, 35, 190, 236, 98, 61, 62, 237, 160, 197, 62, 154, 91, 197, 189, 15, 0, 13, 190, 161, 12, 139, 190, 19, 111, 226, 189, 161, 116, 110, 188, 239, 210, 2, 191, 41, 117, 166, 61, 239, 66, 31, 63, 151, 106, 27, 190, 108, 25, 77, 191, 165, 142, 69, 62, 183, 60, 180, 62, 147, 56, 44, 189, 37, 223, 183, 190, 63, 86, 168, 61, 6, 255, 148, 61, 61, 8, 67, 188, 101, 227, 229, 61, 12, 110, 157, 189, 25, 237, 77, 189, 70, 164, 65, 188, 140, 143, 139, 191, 207, 137, 154, 60, 114, 205, 239, 62, 203, 44, 89, 62, 148, 206, 149, 62, 106, 5, 108, 62, 76, 96, 125, 61, 121, 113, 161, 61, 4, 64, 164, 59, 160, 178, 174, 60, 214, 128, 124, 60, 57, 228, 17, 63, 45, 199, 145, 62, 192, 139, 2, 192, 5, 117, 58, 62, 48, 54, 56, 62, 16, 95, 87, 62, 197, 22, 3, 190, 245, 137, 0, 190, 250, 149, 18, 191, 42, 203, 49, 63, 127, 98, 145, 189, 128, 55, 16, 62, 137, 63, 36, 62, 169, 3, 62, 63, 45, 101, 71, 63, 111, 191, 76, 61, 100, 235, 53, 191, 148, 131, 21, 190, 75, 81, 142, 61, 27, 80, 171, 190, 50, 87, 227, 189, 116, 184, 246, 62, 128, 250, 87, 191, 165, 170, 58, 62, 221, 253, 176, 190, 146, 114, 187, 61, 67, 251, 198, 62, 68, 13, 65, 62, 48, 241, 211, 61, 131, 6, 18, 62, 12, 173, 212, 60, 107, 133, 133, 190, 25, 239, 217, 60, 56, 31, 208, 188, 254, 6, 191, 190, 243, 211, 140, 62, 126, 78, 36, 61, 54, 244, 23, 62, 159, 193, 171, 61, 13, 109, 4, 191, 32, 194, 103, 191, 136, 232, 131, 62, 244, 179, 13, 191, 42, 154, 137, 189, 253, 30, 9, 62, 148, 42, 19, 63, 241, 65, 176, 188, 177, 179, 25, 191, 147, 145, 15, 62, 82, 79, 123, 189, 14, 159, 85, 62, 40, 120, 86, 62, 64, 128, 50, 62, 71, 186, 100, 60, 67, 48, 230, 190, 89, 191, 224, 190, 181, 93, 208, 190, 230, 192, 189, 190, 191, 187, 84, 61, 74, 154, 66, 191, 15, 168, 225, 189, 138, 255, 148, 61, 247, 94, 211, 62, 14, 150, 183, 188, 30, 76, 156, 61, 199, 128, 171, 62, 220, 62, 180, 188, 157, 21, 97, 191, 56, 73, 201, 60, 240, 192, 249, 189, 162, 149, 191, 62, 80, 58, 135, 62, 80, 28, 183, 62, 24, 68, 193, 188, 82, 35, 160, 188, 65, 249, 116, 189, 34, 59, 150, 185, 159, 171, 3, 190, 135, 141, 8, 191, 13, 36, 159, 62, 230, 203, 15, 191, 165, 178, 149, 62, 173, 226, 167, 190, 47, 38, 92, 191, 66, 50, 123, 191, 106, 27, 28, 63, 23, 27, 5, 62, 133, 214, 135, 62, 62, 78, 81, 60, 156, 145, 13, 62, 174, 83, 33, 187, 87, 189, 187, 190, 2, 174, 16, 62, 33, 191, 170, 62, 203, 200, 107, 191, 83, 132, 191, 190, 107, 48, 178, 190, 206, 203, 72, 188, 13, 88, 86, 190, 197, 193, 163, 61, 172, 108, 203, 190, 32, 11, 235, 61, 58, 173, 255, 61, 8, 163, 149, 190, 245, 249, 215, 61, 117, 90, 104, 62, 255, 58, 255, 60, 152, 31, 58, 191, 238, 218, 164, 190, 105, 109, 109, 62, 185, 66, 180, 189, 190, 24, 135, 62, 107, 193, 219, 60, 91, 101, 15, 191, 177, 25, 34, 62, 253, 202, 150, 61, 200, 135, 98, 62, 100, 173, 233, 62, 240, 178, 178, 190, 13, 169, 247, 60, 90, 103, 134, 191, 2, 106, 70, 190, 255, 254, 211, 189, 27, 175, 163, 190, 163, 19, 23, 62, 241, 186, 191, 190, 219, 204, 187, 62, 48, 18, 12, 191, 77, 236, 136, 62, 189, 175, 229, 61, 85, 191, 186, 187, 195, 79, 198, 190, 79, 178, 142, 61, 63, 52, 55, 61, 188, 248, 173, 189, 71, 49, 36, 191, 211, 237, 131, 190, 155, 137, 250, 189, 164, 140, 175, 61, 172, 190, 182, 190, 120, 145, 208, 186, 183, 61, 176, 59, 140, 19, 213, 61, 201, 196, 211, 61, 160, 161, 48, 190, 184, 38, 44, 62, 89, 116, 129, 190, 99, 233, 157, 188, 14, 92, 45, 62, 184, 135, 53, 190, 42, 116, 70, 62, 113, 218, 176, 62, 213, 91, 62, 190, 105, 234, 178, 189, 48, 43, 102, 190, 36, 212, 94, 190, 125, 211, 188, 60, 11, 52, 97, 62, 36, 75, 16, 190, 166, 247, 148, 190, 24, 75, 104, 62, 81, 190, 1, 191, 93, 172, 47, 62, 126, 89, 40, 191, 149, 157, 6, 190, 18, 13, 21, 190, 1, 48, 18, 191, 66, 81, 181, 190, 169, 198, 20, 191, 242, 49, 189, 61, 231, 27, 84, 189, 105, 117, 154, 189, 180, 67, 72, 191, 100, 54, 170, 190, 206, 206, 52, 61, 36, 39, 217, 189, 14, 62, 129, 61, 27, 23, 187, 189, 83, 144, 144, 62, 216, 202, 173, 61, 190, 228, 38, 190, 101, 138, 82, 190, 127, 118, 48, 62, 122, 108, 96, 62, 164, 153, 167, 62, 255, 204, 248, 190, 242, 239, 163, 190, 66, 164, 128, 60, 91, 206, 186, 61, 11, 85, 210, 189, 111, 185, 14, 60, 110, 119, 164, 189, 27, 53, 134, 189, 143, 199, 160, 61, 75, 152, 117, 61, 247, 250, 55, 62, 164, 204, 115, 188, 82, 151, 181, 189, 214, 231, 133, 62, 131, 186, 13, 190, 220, 247, 36, 191, 8, 144, 26, 190, 231, 221, 191, 189, 250, 172, 23, 190, 254, 140, 12, 62, 194, 29, 68, 191, 11, 36, 182, 190, 81, 130, 70, 190, 233, 248, 117, 62, 21, 6, 178, 189, 15, 45, 161, 189, 52, 220, 53, 62, 198, 126, 52, 62, 233, 125, 118, 190, 48, 248, 216, 190, 189, 56, 105, 189, 19, 72, 56, 62, 245, 90, 143, 188, 164, 242, 23, 191, 214, 30, 158, 187, 155, 22, 47, 62, 214, 28, 151, 190, 117, 69, 252, 62, 60, 44, 180, 61, 103, 156, 98, 190, 229, 219, 176, 190, 244, 184, 224, 190, 19, 121, 9, 189, 19, 214, 2, 62, 101, 194, 5, 191, 43, 205, 208, 61, 52, 117, 217, 62, 123, 46, 37, 62, 130, 182, 193, 190, 97, 101, 25, 190, 231, 73, 176, 188, 185, 118, 99, 188, 183, 53, 7, 190, 87, 78, 126, 190, 243, 36, 83, 62, 18, 223, 18, 190, 15, 164, 233, 61, 45, 70, 164, 59, 192, 133, 91, 62, 185, 24, 202, 61, 147, 20, 195, 191, 247, 72, 3, 190, 198, 127, 142, 62, 118, 149, 180, 61, 58, 170, 60, 190, 129, 49, 153, 190, 141, 19, 6, 191, 59, 253, 137, 189, 193, 190, 237, 61, 63, 88, 204, 62, 20, 77, 130, 61, 75, 139, 251, 60, 237, 208, 134, 190, 50, 99, 242, 187, 132, 63, 123, 190, 39, 83, 89, 189, 192, 145, 211, 190, 22, 130, 34, 190, 171, 236, 146, 60, 112, 128, 7, 191, 83, 188, 112, 191, 99, 162, 229, 188, 194, 252, 9, 62, 128, 158, 56, 190, 165, 157, 143, 191, 86, 30, 204, 189, 43, 64, 85, 62, 148, 250, 65, 190, 119, 77, 109, 62, 222, 156, 235, 189, 104, 51, 40, 62, 151, 27, 185, 189, 126, 201, 26, 189, 132, 30, 237, 189, 64, 128, 14, 62, 63, 104, 18, 63, 246, 244, 64, 190, 148, 229, 110, 190, 42, 254, 27, 190, 152, 47, 150, 60, 104, 98, 193, 189, 71, 93, 182, 62, 254, 199, 142, 62, 153, 101, 23, 190, 168, 30, 193, 61, 153, 90, 199, 61, 45, 61, 66, 190, 109, 152, 26, 189, 107, 113, 50, 190, 123, 69, 217, 189, 224, 78, 220, 62, 31, 255, 23, 190, 34, 77, 16, 191, 224, 17, 93, 187, 14, 131, 178, 62, 33, 228, 136, 61, 160, 30, 48, 191, 24, 101, 99, 189, 111, 251, 79, 188, 123, 6, 88, 59, 231, 87, 11, 62, 187, 247, 83, 190, 181, 120, 30, 190, 107, 91, 8, 61, 223, 118, 100, 191, 85, 197, 7, 62, 69, 43, 233, 62, 22, 225, 90, 62, 238, 4, 55, 62, 23, 145, 247, 190, 49, 154, 207, 189, 110, 17, 208, 189, 251, 211, 201, 61, 253, 157, 34, 62, 72, 253, 80, 189, 203, 108, 207, 189, 77, 88, 49, 61, 110, 17, 46, 190, 26, 212, 241, 61, 235, 139, 253, 61, 204, 207, 11, 190, 207, 248, 14, 188, 207, 129, 79, 191, 160, 77, 135, 191, 40, 25, 101, 62, 81, 185, 188, 189, 82, 66, 146, 190, 106, 15, 133, 189, 79, 225, 180, 62, 31, 105, 165, 62, 241, 144, 186, 190, 68, 235, 65, 62, 17, 99, 216, 189, 121, 72, 97, 62, 164, 76, 129, 62, 92, 239, 51, 62, 146, 104, 48, 190, 22, 103, 142, 190, 151, 95, 9, 62, 101, 191, 21, 189, 172, 208, 46, 62, 13, 170, 82, 189, 137, 181, 2, 191, 5, 255, 243, 60, 27, 4, 124, 191, 206, 149, 225, 188, 143, 163, 43, 190, 98, 132, 21, 61, 37, 76, 141, 61, 167, 8, 162, 188, 198, 168, 82, 191, 2, 142, 199, 61, 113, 4, 28, 62, 88, 78, 139, 189, 195, 196, 250, 62, 174, 39, 170, 188, 34, 232, 51, 62, 210, 216, 13, 62, 122, 115, 79, 62, 14, 159, 233, 61, 171, 177, 1, 62, 58, 107, 143, 62, 183, 252, 90, 62, 79, 224, 83, 188, 185, 135, 12, 62, 51, 19, 66, 190, 2, 169, 157, 187, 80, 255, 51, 189, 91, 149, 216, 189, 64, 68, 167, 62, 234, 18, 105, 62, 237, 250, 126, 191, 7, 212, 14, 190, 202, 85, 65, 62, 86, 243, 75, 191, 69, 26, 202, 60, 118, 107, 67, 63, 206, 29, 40, 191, 210, 245, 250, 58, 198, 173, 173, 190, 163, 30, 166, 61, 122, 32, 141, 62, 26, 250, 40, 61, 153, 137, 163, 190, 163, 81, 46, 190, 49, 29, 100, 61, 152, 56, 0, 189, 83, 197, 149, 61, 148, 197, 56, 190, 75, 21, 78, 190, 35, 163, 38, 190, 91, 125, 47, 189, 27, 20, 221, 61, 87, 93, 62, 190, 124, 27, 247, 61, 104, 52, 129, 190, 137, 54, 196, 190, 46, 137, 160, 62, 231, 142, 170, 189, 31, 119, 120, 190, 232, 225, 31, 63, 150, 69, 152, 62, 164, 240, 86, 62, 119, 161, 49, 63, 116, 155, 19, 190, 48, 21, 155, 59, 111, 161, 245, 188, 187, 35, 114, 189, 115, 28, 3, 61, 244, 84, 7, 63, 171, 208, 114, 188, 147, 84, 194, 62, 4, 105, 200, 61, 59, 1, 131, 189, 25, 52, 207, 61, 11, 111, 52, 62, 182, 86, 26, 190, 225, 184, 101, 190, 139, 67, 160, 190, 85, 135, 159, 191, 109, 39, 123, 190, 165, 157, 2, 62, 246, 69, 12, 61, 162, 28, 167, 61, 214, 136, 195, 61, 179, 154, 29, 61, 103, 138, 4, 189, 89, 12, 78, 62, 137, 72, 156, 62, 126, 160, 93, 62, 44, 12, 164, 62, 73, 85, 110, 62, 255, 230, 92, 190, 127, 120, 4, 190, 188, 173, 120, 62, 7, 166, 19, 190, 41, 2, 165, 62, 86, 167, 95, 62, 41, 77, 171, 60, 250, 176, 218, 189, 154, 144, 227, 187, 56, 157, 204, 61, 96, 93, 142, 190, 114, 170, 62, 189, 142, 205, 186, 189, 103, 172, 156, 190, 205, 15, 150, 62, 169, 1, 118, 62, 74, 139, 131, 61, 44, 237, 178, 61, 159, 135, 88, 191, 165, 115, 156, 191, 11, 186, 215, 62, 207, 124, 53, 62, 70, 76, 76, 188, 16, 208, 35, 62, 44, 180, 195, 62, 154, 114, 155, 62, 85, 216, 6, 61, 239, 169, 6, 62, 163, 71, 167, 190, 133, 100, 44, 62, 93, 174, 57, 62, 159, 215, 68, 62, 42, 169, 11, 190, 214, 133, 207, 190, 97, 93, 62, 190, 187, 11, 163, 190, 192, 71, 121, 189, 208, 140, 102, 62, 170, 199, 252, 190, 112, 198, 48, 62, 165, 170, 255, 61, 200, 127, 195, 62, 214, 123, 227, 190, 123, 103, 5, 62, 230, 129, 36, 62, 107, 152, 70, 190, 208, 185, 187, 190, 50, 254, 175, 61, 170, 45, 141, 190, 141, 153, 82, 62, 220, 60, 114, 62, 5, 200, 189, 190, 38, 226, 201, 190, 139, 143, 99, 62, 110, 47, 240, 61, 99, 254, 52, 62, 172, 2, 155, 191, 169, 69, 9, 62, 39, 85, 80, 59, 95, 68, 189, 189, 119, 212, 241, 62, 119, 244, 218, 190, 123, 90, 113, 189, 24, 223, 82, 62, 244, 169, 233, 190, 82, 224, 8, 190, 82, 76, 187, 60, 97, 180, 95, 62, 201, 47, 171, 189, 224, 55, 237, 61, 27, 161, 145, 190, 176, 218, 99, 61, 147, 64, 228, 188, 31, 171, 48, 62, 210, 182, 146, 61, 183, 110, 199, 55, 226, 33, 117, 62, 229, 15, 11, 61, 102, 215, 173, 189, 88, 64, 182, 61, 142, 212, 54, 190, 235, 106, 186, 188, 128, 175, 10, 62, 118, 245, 137, 189, 203, 215, 6, 191, 231, 49, 213, 188, 239, 236, 18, 62, 142, 255, 22, 62, 123, 49, 161, 191, 66, 255, 7, 189, 114, 98, 70, 62, 164, 189, 173, 189, 75, 40, 192, 62, 236, 65, 108, 189, 14, 73, 227, 189, 141, 178, 129, 187, 232, 115, 161, 191, 76, 139, 163, 189, 71, 69, 142, 62, 131, 40, 7, 63, 132, 32, 73, 189, 113, 51, 162, 190, 55, 139, 57, 190, 208, 227, 8, 188, 151, 176, 165, 61, 123, 223, 238, 58, 114, 173, 127, 62, 78, 210, 98, 190, 74, 228, 192, 189, 44, 154, 216, 188, 174, 127, 78, 190, 154, 108, 251, 189, 157, 180, 151, 190, 201, 223, 250, 188, 201, 162, 198, 62, 132, 222, 210, 189, 137, 14, 133, 191, 202, 85, 162, 59, 10, 57, 19, 61, 60, 169, 47, 189, 135, 167, 108, 191, 162, 64, 248, 189, 239, 182, 236, 61, 166, 80, 142, 190, 60, 57, 183, 190, 208, 237, 137, 188, 249, 41, 50, 191, 46, 18, 52, 190, 150, 85, 96, 190, 182, 99, 41, 61, 56, 254, 171, 61, 233, 230, 29, 63, 241, 220, 193, 190, 97, 246, 186, 62, 59, 37, 84, 191, 62, 144, 78, 61, 211, 196, 183, 62, 133, 252, 184, 62, 172, 255, 141, 62, 40, 163, 212, 190, 109, 198, 168, 62, 38, 46, 107, 62, 126, 30, 30, 190, 93, 130, 181, 190, 31, 48, 151, 190, 29, 26, 131, 62, 74, 129, 172, 62, 161, 84, 169, 62, 179, 218, 76, 190, 112, 196, 148, 190, 8, 209, 97, 62, 34, 177, 21, 62, 218, 145, 187, 190, 185, 99, 190, 190, 26, 110, 34, 62, 168, 160, 60, 189, 152, 78, 2, 61, 9, 49, 54, 191, 33, 85, 245, 189, 234, 98, 87, 190, 210, 49, 31, 62, 146, 172, 179, 62, 8, 170, 189, 62, 161, 27, 165, 62, 245, 38, 212, 190, 198, 166, 61, 60, 4, 40, 77, 191, 21, 123, 237, 189, 143, 72, 175, 190, 138, 120, 3, 63, 132, 206, 217, 189, 61, 113, 175, 62, 14, 248, 16, 61, 68, 130, 56, 190, 239, 160, 124, 191, 193, 127, 233, 60, 160, 188, 230, 189, 196, 4, 66, 61, 140, 107, 113, 62, 133, 84, 4, 190, 121, 237, 141, 190, 115, 184, 71, 189, 207, 255, 242, 61, 204, 213, 139, 62, 118, 7, 252, 188, 204, 236, 102, 190, 28, 147, 126, 62, 176, 106, 69, 191, 215, 122, 141, 62, 252, 39, 2, 191, 45, 68, 150, 191, 177, 99, 140, 191, 221, 249, 156, 62, 249, 23, 14, 62, 157, 77, 140, 62, 25, 200, 216, 190, 105, 111, 131, 187, 2, 42, 6, 190, 92, 57, 30, 190, 56, 207, 86, 188, 221, 250, 55, 62, 227, 12, 187, 60, 35, 143, 225, 60, 225, 240, 165, 61, 204, 134, 187, 189, 123, 202, 44, 62, 149, 30, 217, 189, 117, 242, 242, 61, 150, 198, 186, 189, 100, 1, 144, 61, 78, 57, 186, 189, 30, 233, 0, 63, 237, 157, 231, 190, 176, 89, 247, 189, 147, 65, 116, 61, 150, 182, 255, 61, 210, 75, 192, 187, 120, 243, 29, 190, 79, 172, 141, 189, 251, 224, 3, 62, 42, 239, 21, 62, 91, 122, 142, 189, 123, 130, 33, 189, 175, 189, 201, 61, 178, 189, 30, 62, 121, 219, 26, 62, 132, 224, 5, 62, 184, 249, 237, 62, 153, 57, 74, 61, 210, 226, 16, 60, 141, 80, 17, 62, 180, 90, 10, 62, 240, 94, 11, 62, 151, 65, 148, 61, 218, 109, 217, 189, 125, 138, 154, 62, 223, 37, 101, 189, 94, 212, 34, 190, 93, 188, 64, 61, 135, 83, 40, 61, 239, 186, 72, 190, 167, 105, 127, 61, 159, 238, 157, 190, 176, 243, 176, 191, 91, 173, 88, 189, 77, 206, 8, 62, 113, 246, 145, 188, 2, 218, 221, 61, 246, 40, 62, 59, 78, 153, 164, 61, 60, 13, 12, 190, 176, 8, 204, 61, 161, 133, 222, 189, 39, 5, 49, 60, 208, 236, 187, 60, 13, 179, 0, 61, 75, 118, 42, 189, 13, 62, 192, 189, 97, 169, 125, 61, 235, 54, 252, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {158, 187, 235, 188, 49, 146, 222, 62, 147, 35, 184, 189, 244, 134, 213, 188, 118, 142, 114, 62, 15, 0, 27, 62, 186, 112, 173, 61, 107, 231, 211, 189, 153, 114, 152, 62, 124, 125, 31, 60, 45, 72, 118, 61, 124, 95, 16, 62, 204, 117, 125, 61, 250, 179, 58, 62, 202, 86, 219, 61, 9, 32, 47, 61, 255, 112, 144, 62, 242, 6, 209, 190, 193, 42, 143, 62, 63, 252, 91, 61, 121, 194, 239, 60, 115, 113, 157, 58, 217, 107, 170, 62, 215, 186, 240, 62, 169, 133, 36, 61, 54, 91, 208, 60, 208, 127, 119, 62, 32, 157, 200, 61, 129, 158, 143, 62, 82, 92, 33, 62, 28, 128, 108, 62, 214, 253, 57, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {219, 90, 244, 186, 12, 144, 31, 63, 67, 109, 244, 62, 38, 33, 218, 190, 35, 193, 249, 190, 124, 222, 43, 191, 134, 31, 172, 62, 188, 232, 134, 191, 113, 244, 4, 191, 41, 53, 128, 63, 161, 50, 170, 190, 225, 155, 167, 190, 10, 189, 151, 191, 215, 57, 106, 191, 64, 129, 41, 189, 150, 154, 147, 190, 171, 254, 200, 60, 39, 195, 60, 63, 55, 177, 101, 63, 201, 188, 177, 62, 138, 94, 194, 190, 135, 73, 177, 190, 60, 248, 153, 63, 82, 188, 204, 189, 252, 248, 213, 190, 79, 241, 232, 62, 239, 25, 238, 62, 221, 108, 203, 62, 146, 80, 59, 63, 222, 133, 184, 191, 23, 149, 196, 60, 144, 208, 160, 59, 248, 79, 175, 189, 120, 0, 12, 189, 12, 79, 157, 189, 56, 25, 110, 190, 140, 200, 16, 190, 222, 206, 79, 61, 117, 226, 98, 62, 79, 217, 151, 188, 225, 219, 12, 191, 90, 77, 107, 62, 223, 176, 9, 186, 58, 6, 97, 62, 22, 82, 121, 60, 69, 4, 250, 60, 177, 239, 211, 190, 207, 161, 212, 61, 161, 136, 140, 190, 112, 16, 141, 62, 19, 195, 155, 62, 161, 95, 64, 59, 32, 109, 151, 190, 94, 91, 51, 189, 19, 117, 205, 61, 205, 100, 5, 191, 18, 166, 27, 62, 91, 237, 131, 189, 28, 59, 255, 189, 44, 196, 106, 190, 184, 46, 80, 189, 169, 103, 137, 61, 38, 166, 108, 190, 11, 170, 144, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {104, 146, 219, 61, 22, 247, 238, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {51, 234, 29, 191, 239, 235, 164, 62, 39, 82, 232, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {165, 56, 174, 190, 228, 62, 136, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0051/steps/000000000018000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}