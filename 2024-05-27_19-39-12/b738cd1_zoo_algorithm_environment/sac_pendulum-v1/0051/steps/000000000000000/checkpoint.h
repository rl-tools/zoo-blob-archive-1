// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 253, 200, 62, 136, 143, 118, 190, 226, 206, 206, 62, 146, 240, 6, 190, 53, 227, 125, 189, 96, 87, 107, 190, 173, 3, 246, 61, 73, 176, 2, 63, 222, 242, 16, 191, 26, 8, 176, 62, 117, 138, 165, 62, 77, 11, 82, 61, 128, 194, 235, 189, 48, 92, 1, 63, 40, 243, 228, 188, 188, 226, 122, 62, 174, 233, 21, 62, 36, 179, 10, 190, 28, 200, 235, 189, 197, 210, 166, 62, 184, 174, 18, 191, 242, 37, 52, 189, 165, 27, 65, 190, 189, 203, 30, 62, 3, 158, 22, 189, 28, 71, 132, 190, 134, 75, 255, 190, 6, 14, 69, 190, 47, 139, 32, 61, 110, 24, 19, 63, 75, 217, 240, 190, 50, 67, 185, 61, 141, 111, 192, 190, 32, 87, 165, 62, 46, 248, 203, 62, 53, 100, 18, 191, 172, 171, 100, 62, 206, 125, 211, 62, 43, 57, 202, 62, 236, 53, 114, 190, 20, 240, 86, 62, 152, 67, 59, 62, 157, 158, 82, 62, 40, 195, 130, 190, 63, 79, 207, 190, 160, 142, 156, 190, 161, 65, 205, 62, 207, 39, 212, 61, 51, 220, 92, 62, 33, 185, 200, 62, 203, 242, 128, 62, 156, 6, 198, 62, 194, 238, 8, 191, 1, 135, 12, 63, 61, 16, 175, 60, 17, 167, 93, 61, 23, 57, 206, 190, 104, 207, 246, 61, 195, 129, 233, 61, 88, 213, 4, 191, 230, 184, 179, 60, 160, 54, 192, 62, 149, 43, 177, 62, 89, 173, 139, 62, 46, 201, 127, 190, 69, 232, 130, 62, 164, 245, 173, 190, 66, 8, 221, 190, 154, 120, 253, 62, 247, 238, 96, 62, 219, 166, 140, 62, 69, 39, 17, 63, 193, 219, 152, 62, 213, 120, 18, 191, 97, 182, 237, 61, 22, 255, 70, 190, 171, 153, 0, 63, 15, 46, 134, 190, 113, 164, 133, 62, 77, 20, 133, 62, 108, 90, 129, 62, 198, 224, 248, 62, 29, 94, 83, 62, 96, 29, 243, 62, 90, 201, 86, 190, 38, 67, 20, 188, 217, 30, 169, 62, 198, 39, 1, 191, 63, 26, 198, 190, 84, 217, 166, 62, 30, 231, 130, 190, 42, 99, 203, 190, 81, 142, 76, 61, 182, 194, 242, 62, 7, 4, 160, 62, 78, 15, 233, 188};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {110, 174, 19, 191, 250, 22, 113, 62, 120, 204, 80, 190, 55, 85, 171, 190, 115, 88, 236, 62, 197, 113, 119, 62, 229, 153, 19, 191, 251, 9, 28, 62, 198, 120, 46, 62, 159, 212, 234, 62, 16, 146, 204, 62, 20, 12, 224, 62, 171, 164, 188, 190, 3, 125, 32, 190, 89, 199, 109, 190, 222, 101, 7, 191, 19, 28, 102, 190, 33, 181, 127, 190, 221, 246, 216, 189, 247, 200, 254, 62, 101, 14, 6, 191, 10, 154, 207, 190, 241, 119, 11, 63, 134, 38, 146, 190, 94, 203, 169, 189, 34, 2, 2, 63, 182, 220, 17, 63, 210, 69, 172, 62, 112, 10, 200, 62, 223, 32, 99, 190, 230, 220, 136, 62, 106, 60, 242, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {144, 171, 139, 59, 102, 77, 8, 190, 83, 94, 19, 62, 193, 214, 229, 61, 143, 187, 202, 188, 225, 112, 30, 190, 83, 241, 244, 189, 222, 36, 48, 62, 235, 171, 120, 61, 155, 60, 67, 60, 103, 34, 42, 62, 94, 108, 134, 61, 218, 62, 131, 61, 65, 233, 23, 62, 50, 160, 147, 61, 114, 71, 5, 190, 56, 197, 176, 189, 208, 142, 53, 189, 136, 104, 53, 189, 210, 252, 12, 190, 210, 210, 12, 189, 137, 26, 6, 190, 98, 172, 44, 62, 108, 63, 155, 60, 110, 25, 35, 189, 50, 61, 18, 61, 12, 190, 160, 61, 181, 238, 0, 61, 237, 54, 4, 62, 177, 120, 125, 189, 188, 28, 188, 61, 100, 99, 12, 62, 178, 30, 185, 189, 81, 229, 199, 60, 80, 221, 13, 188, 238, 29, 12, 62, 20, 64, 233, 189, 244, 102, 38, 189, 26, 9, 167, 189, 82, 24, 109, 189, 190, 2, 233, 61, 131, 146, 33, 190, 237, 44, 212, 61, 73, 55, 190, 188, 141, 106, 141, 61, 64, 41, 52, 62, 57, 236, 246, 189, 55, 184, 43, 190, 245, 42, 162, 61, 49, 216, 126, 61, 223, 35, 235, 189, 44, 44, 227, 59, 164, 113, 29, 190, 27, 78, 153, 188, 170, 153, 11, 62, 67, 90, 222, 189, 34, 112, 105, 189, 87, 237, 170, 189, 167, 167, 50, 190, 235, 171, 191, 61, 0, 181, 2, 59, 182, 201, 137, 189, 238, 101, 202, 189, 78, 228, 152, 59, 234, 183, 39, 190, 26, 93, 39, 188, 89, 176, 17, 62, 67, 239, 249, 61, 84, 30, 11, 62, 89, 199, 236, 61, 36, 213, 170, 59, 36, 235, 115, 189, 3, 165, 59, 61, 234, 106, 169, 189, 238, 237, 36, 190, 248, 132, 33, 62, 169, 116, 181, 61, 148, 219, 47, 189, 217, 197, 42, 60, 9, 34, 49, 62, 87, 207, 235, 60, 112, 77, 10, 62, 161, 201, 33, 62, 92, 251, 215, 189, 1, 133, 207, 189, 28, 15, 71, 61, 133, 170, 173, 61, 124, 128, 200, 60, 26, 106, 50, 62, 226, 93, 26, 190, 41, 74, 145, 189, 185, 109, 19, 190, 219, 45, 31, 189, 197, 141, 17, 190, 75, 24, 217, 188, 102, 204, 158, 61, 69, 88, 50, 189, 47, 228, 110, 61, 154, 164, 43, 190, 252, 151, 158, 189, 100, 115, 155, 189, 96, 155, 189, 189, 227, 77, 237, 188, 93, 240, 153, 188, 175, 172, 211, 189, 62, 34, 222, 189, 247, 63, 237, 188, 103, 235, 189, 61, 169, 228, 244, 61, 124, 104, 4, 62, 201, 96, 136, 189, 49, 101, 33, 62, 20, 193, 48, 62, 243, 166, 52, 62, 180, 99, 36, 62, 54, 120, 48, 62, 250, 164, 206, 61, 142, 214, 34, 190, 43, 209, 41, 190, 165, 120, 36, 190, 138, 221, 206, 189, 137, 187, 232, 61, 141, 207, 12, 61, 200, 122, 160, 61, 112, 167, 110, 187, 8, 108, 32, 189, 231, 108, 123, 61, 251, 223, 14, 187, 209, 106, 19, 190, 131, 205, 22, 62, 4, 195, 180, 189, 185, 69, 165, 61, 143, 35, 172, 61, 23, 118, 9, 190, 217, 53, 15, 190, 192, 62, 206, 189, 192, 154, 203, 189, 197, 135, 142, 59, 83, 215, 164, 189, 79, 207, 164, 189, 181, 183, 52, 62, 110, 104, 50, 62, 56, 95, 195, 61, 133, 32, 21, 189, 51, 250, 188, 61, 214, 102, 41, 62, 116, 60, 121, 61, 181, 197, 21, 190, 144, 20, 0, 61, 8, 233, 43, 62, 110, 149, 6, 190, 69, 43, 138, 61, 138, 29, 54, 61, 76, 99, 18, 190, 83, 84, 147, 61, 203, 48, 179, 189, 205, 212, 218, 189, 56, 17, 26, 190, 116, 194, 215, 189, 183, 80, 56, 189, 32, 124, 255, 189, 151, 146, 155, 189, 36, 69, 3, 189, 25, 25, 51, 190, 164, 189, 222, 189, 238, 9, 121, 189, 155, 223, 213, 189, 128, 83, 251, 189, 50, 35, 228, 61, 150, 179, 30, 62, 179, 116, 29, 62, 107, 47, 14, 190, 5, 105, 220, 61, 17, 108, 221, 60, 101, 72, 29, 189, 225, 97, 14, 190, 128, 140, 94, 61, 45, 11, 77, 189, 132, 173, 219, 61, 33, 115, 218, 60, 172, 95, 1, 190, 68, 153, 160, 60, 23, 140, 178, 188, 152, 147, 5, 189, 134, 127, 190, 189, 128, 203, 167, 61, 79, 48, 152, 189, 246, 228, 36, 62, 133, 11, 209, 188, 9, 216, 195, 188, 54, 134, 39, 190, 186, 116, 179, 187, 105, 15, 238, 60, 39, 108, 31, 62, 68, 230, 10, 189, 76, 186, 104, 188, 136, 189, 179, 189, 104, 182, 182, 188, 77, 105, 190, 189, 98, 143, 178, 61, 189, 244, 240, 189, 172, 156, 6, 60, 62, 202, 27, 190, 91, 249, 197, 189, 90, 91, 214, 189, 126, 174, 28, 62, 240, 14, 243, 189, 163, 177, 162, 61, 190, 86, 12, 62, 248, 141, 232, 187, 190, 252, 6, 190, 48, 47, 37, 62, 70, 165, 12, 62, 132, 28, 160, 61, 225, 58, 32, 62, 51, 194, 13, 62, 237, 151, 30, 189, 46, 30, 15, 62, 16, 16, 28, 187, 190, 41, 146, 189, 207, 13, 232, 61, 44, 228, 249, 61, 79, 9, 9, 62, 159, 184, 239, 189, 222, 108, 9, 190, 103, 225, 200, 61, 21, 146, 174, 189, 50, 139, 188, 188, 56, 29, 18, 189, 9, 38, 165, 61, 68, 190, 3, 62, 135, 185, 160, 188, 244, 8, 239, 61, 222, 1, 12, 62, 227, 182, 20, 190, 204, 38, 144, 61, 236, 162, 120, 187, 187, 158, 254, 189, 149, 69, 76, 189, 158, 69, 189, 61, 175, 68, 222, 61, 136, 148, 148, 61, 192, 6, 155, 189, 58, 211, 20, 190, 2, 246, 172, 60, 173, 24, 235, 189, 118, 124, 72, 60, 53, 153, 216, 189, 165, 73, 17, 62, 175, 222, 201, 189, 137, 204, 199, 61, 213, 80, 249, 189, 20, 55, 229, 187, 125, 194, 42, 62, 139, 25, 156, 61, 120, 0, 237, 61, 190, 133, 118, 189, 135, 224, 3, 189, 11, 219, 38, 62, 71, 239, 9, 188, 51, 166, 152, 189, 241, 104, 169, 189, 182, 155, 200, 189, 15, 75, 31, 190, 50, 43, 12, 61, 91, 250, 165, 189, 108, 64, 11, 62, 66, 66, 49, 190, 241, 74, 217, 60, 91, 42, 207, 188, 141, 182, 104, 189, 57, 94, 128, 61, 238, 100, 6, 190, 129, 94, 161, 187, 219, 126, 20, 189, 169, 118, 20, 190, 176, 86, 95, 189, 243, 45, 13, 188, 27, 149, 7, 62, 203, 140, 122, 61, 101, 10, 112, 189, 236, 136, 68, 61, 6, 221, 158, 188, 121, 49, 62, 61, 87, 103, 250, 61, 141, 64, 197, 61, 42, 193, 38, 190, 16, 149, 204, 189, 255, 151, 5, 62, 204, 23, 87, 189, 32, 171, 236, 189, 87, 246, 36, 190, 247, 26, 230, 188, 101, 242, 201, 189, 243, 238, 48, 62, 228, 215, 131, 189, 110, 1, 214, 189, 26, 209, 21, 190, 47, 16, 255, 59, 213, 106, 25, 60, 72, 14, 64, 61, 221, 195, 92, 188, 205, 229, 38, 62, 18, 192, 214, 188, 159, 7, 125, 189, 90, 179, 11, 62, 57, 213, 253, 61, 180, 189, 59, 189, 218, 205, 37, 61, 203, 58, 210, 61, 224, 145, 167, 189, 202, 80, 29, 62, 84, 186, 10, 61, 101, 125, 140, 60, 85, 44, 180, 61, 232, 139, 30, 61, 150, 16, 174, 60, 93, 109, 235, 60, 46, 84, 105, 61, 194, 22, 53, 188, 124, 81, 29, 190, 184, 98, 160, 189, 166, 176, 138, 61, 239, 50, 158, 61, 73, 229, 150, 60, 118, 9, 5, 190, 206, 33, 173, 186, 141, 202, 150, 61, 186, 195, 25, 61, 255, 174, 30, 190, 243, 208, 15, 62, 192, 216, 20, 62, 174, 251, 165, 188, 90, 35, 133, 189, 185, 242, 252, 189, 181, 88, 241, 189, 59, 41, 108, 188, 93, 207, 151, 189, 184, 204, 177, 61, 160, 202, 186, 59, 238, 242, 199, 187, 243, 56, 205, 188, 231, 23, 37, 61, 125, 179, 109, 60, 93, 228, 232, 189, 83, 86, 145, 61, 52, 33, 49, 190, 222, 137, 201, 60, 159, 24, 50, 190, 221, 105, 146, 61, 117, 210, 50, 62, 171, 45, 52, 62, 142, 237, 30, 62, 114, 154, 154, 188, 114, 65, 86, 189, 100, 153, 13, 62, 217, 77, 49, 62, 114, 170, 26, 60, 80, 45, 177, 189, 206, 248, 29, 62, 50, 241, 29, 190, 96, 18, 133, 189, 127, 84, 137, 61, 103, 2, 252, 189, 216, 78, 37, 62, 25, 179, 57, 61, 11, 13, 140, 61, 2, 117, 139, 189, 124, 7, 4, 188, 194, 24, 221, 188, 126, 190, 132, 186, 34, 73, 80, 189, 79, 153, 233, 189, 199, 227, 148, 189, 45, 184, 41, 60, 236, 205, 28, 62, 229, 234, 3, 62, 193, 53, 88, 60, 24, 88, 233, 61, 80, 130, 211, 61, 100, 79, 40, 62, 133, 247, 51, 62, 234, 239, 1, 190, 61, 243, 18, 189, 152, 231, 226, 61, 170, 124, 128, 189, 235, 220, 12, 190, 15, 168, 225, 189, 49, 148, 89, 61, 15, 180, 128, 61, 129, 15, 21, 62, 133, 197, 58, 189, 183, 103, 4, 62, 53, 78, 237, 189, 45, 97, 175, 189, 244, 251, 99, 61, 79, 98, 173, 188, 219, 226, 60, 189, 200, 103, 126, 189, 63, 86, 24, 62, 76, 7, 48, 188, 214, 172, 189, 61, 0, 102, 242, 189, 17, 180, 37, 190, 133, 73, 47, 190, 19, 55, 15, 190, 114, 63, 50, 62, 78, 161, 106, 189, 137, 70, 206, 188, 2, 18, 143, 58, 218, 139, 32, 189, 109, 174, 194, 189, 223, 248, 63, 61, 111, 211, 72, 187, 240, 191, 237, 61, 153, 97, 33, 190, 244, 119, 12, 62, 36, 156, 134, 58, 194, 0, 130, 189, 22, 208, 24, 62, 35, 169, 184, 60, 233, 115, 28, 190, 220, 255, 112, 188, 111, 131, 179, 189, 249, 105, 148, 61, 52, 234, 211, 188, 40, 197, 201, 61, 30, 58, 20, 62, 111, 115, 125, 61, 182, 135, 52, 190, 238, 101, 152, 61, 106, 63, 19, 62, 147, 83, 208, 189, 19, 151, 19, 62, 238, 134, 13, 190, 213, 38, 77, 189, 107, 90, 144, 60, 243, 119, 240, 189, 86, 225, 244, 61, 25, 215, 184, 60, 194, 55, 13, 190, 56, 152, 155, 61, 25, 141, 16, 190, 197, 43, 42, 62, 47, 69, 39, 189, 104, 86, 221, 189, 113, 215, 16, 62, 219, 205, 139, 59, 95, 213, 27, 190, 245, 47, 211, 189, 15, 123, 78, 58, 81, 144, 32, 62, 83, 171, 37, 189, 212, 38, 199, 61, 69, 190, 5, 190, 79, 227, 150, 61, 163, 166, 254, 61, 37, 12, 78, 189, 77, 161, 250, 189, 156, 5, 43, 62, 49, 63, 12, 62, 157, 245, 209, 189, 204, 167, 51, 190, 9, 98, 133, 189, 44, 69, 64, 188, 116, 202, 70, 61, 178, 207, 56, 61, 208, 21, 40, 189, 78, 223, 170, 61, 186, 225, 159, 61, 144, 228, 34, 61, 210, 102, 52, 190, 245, 124, 125, 61, 62, 143, 192, 188, 245, 104, 18, 190, 56, 42, 128, 61, 55, 79, 249, 188, 163, 1, 204, 61, 202, 23, 229, 61, 170, 98, 11, 190, 219, 15, 191, 189, 4, 76, 82, 61, 43, 138, 242, 189, 4, 34, 190, 61, 91, 57, 210, 61, 118, 5, 3, 190, 240, 96, 28, 190, 163, 159, 16, 62, 78, 44, 28, 189, 120, 7, 48, 62, 196, 107, 102, 189, 110, 205, 159, 189, 228, 62, 197, 189, 96, 237, 12, 190, 248, 181, 214, 189, 108, 158, 156, 61, 117, 207, 7, 62, 237, 62, 177, 189, 198, 222, 103, 189, 125, 56, 106, 188, 187, 30, 24, 62, 184, 37, 15, 189, 118, 84, 246, 189, 197, 10, 207, 61, 73, 217, 159, 189, 156, 62, 251, 189, 79, 150, 151, 61, 92, 129, 23, 190, 154, 210, 3, 190, 67, 49, 5, 62, 77, 7, 160, 61, 55, 200, 45, 190, 97, 133, 242, 189, 203, 72, 219, 189, 196, 180, 166, 60, 248, 74, 9, 62, 75, 195, 25, 190, 118, 180, 113, 189, 29, 97, 130, 189, 191, 170, 227, 189, 192, 235, 46, 62, 248, 191, 13, 62, 86, 181, 47, 62, 20, 59, 153, 188, 188, 139, 132, 189, 139, 33, 16, 62, 59, 101, 23, 60, 42, 147, 192, 61, 52, 112, 29, 188, 14, 2, 145, 61, 63, 191, 60, 189, 7, 200, 30, 62, 152, 119, 77, 61, 9, 106, 12, 190, 47, 119, 45, 190, 93, 79, 118, 61, 89, 88, 7, 190, 45, 128, 97, 189, 228, 39, 41, 189, 78, 69, 137, 189, 107, 229, 198, 189, 209, 108, 217, 61, 13, 144, 155, 189, 240, 2, 74, 61, 53, 62, 2, 60, 181, 199, 25, 189, 161, 209, 186, 61, 169, 197, 4, 62, 39, 170, 210, 189, 209, 94, 66, 61, 64, 100, 125, 189, 13, 22, 135, 61, 84, 242, 28, 190, 63, 156, 70, 60, 87, 18, 187, 61, 184, 148, 169, 61, 115, 127, 178, 61, 142, 245, 160, 61, 207, 238, 48, 61, 28, 76, 34, 62, 82, 133, 3, 62, 253, 49, 10, 190, 95, 211, 41, 190, 82, 162, 83, 61, 186, 71, 133, 61, 201, 97, 255, 189, 240, 27, 123, 61, 0, 242, 233, 61, 62, 35, 179, 61, 38, 141, 212, 60, 238, 3, 22, 62, 18, 74, 141, 61, 212, 234, 33, 190, 173, 28, 201, 61, 196, 183, 64, 61, 193, 80, 0, 190, 96, 113, 139, 189, 117, 8, 222, 61, 30, 134, 185, 189, 249, 10, 223, 189, 140, 26, 133, 189, 39, 115, 34, 62, 116, 135, 32, 62, 60, 136, 201, 61, 154, 155, 37, 189, 30, 50, 139, 187, 170, 102, 189, 60, 50, 214, 217, 60, 33, 131, 247, 60, 239, 104, 209, 61, 23, 148, 187, 189, 139, 138, 29, 58, 198, 31, 28, 190, 23, 125, 156, 61, 54, 176, 255, 61, 199, 232, 180, 188, 33, 179, 145, 61, 67, 216, 215, 188, 184, 157, 43, 62, 128, 166, 36, 188, 58, 49, 199, 61, 30, 63, 26, 190, 210, 31, 9, 62, 164, 184, 180, 189, 58, 66, 116, 61, 181, 133, 131, 189, 206, 169, 97, 61, 69, 152, 198, 58, 222, 129, 82, 189, 90, 100, 26, 189, 56, 245, 98, 61, 99, 40, 37, 60, 75, 9, 143, 61, 58, 81, 20, 61, 170, 249, 246, 61, 138, 72, 222, 189, 206, 100, 33, 62, 242, 82, 23, 62, 25, 135, 152, 188, 182, 44, 22, 189, 48, 111, 20, 61, 2, 162, 217, 189, 249, 190, 13, 62, 208, 54, 221, 61, 190, 248, 191, 189, 2, 89, 40, 60, 25, 227, 35, 62, 210, 133, 112, 61, 78, 109, 38, 62, 6, 78, 219, 60, 205, 44, 15, 190, 39, 175, 0, 62, 60, 108, 189, 188, 190, 39, 146, 189, 96, 113, 52, 190, 86, 9, 189, 61, 31, 220, 101, 189, 243, 41, 211, 61, 185, 223, 35, 62, 172, 32, 33, 190, 214, 251, 4, 62, 182, 15, 41, 190, 132, 228, 6, 190, 116, 184, 89, 189, 44, 0, 129, 61, 167, 14, 227, 61, 107, 138, 3, 62, 199, 169, 37, 190, 77, 21, 10, 62, 109, 80, 193, 61, 110, 153, 64, 61, 156, 114, 195, 61, 133, 176, 249, 189, 52, 92, 220, 61, 119, 51, 248, 188, 48, 79, 207, 189, 191, 228, 194, 59, 40, 122, 190, 189, 210, 200, 203, 189, 147, 40, 111, 189, 191, 39, 7, 62, 167, 158, 247, 61, 251, 92, 251, 189, 136, 236, 36, 62, 76, 200, 217, 61, 67, 224, 232, 60, 144, 19, 1, 62, 59, 112, 78, 61, 92, 66, 40, 189, 135, 179, 156, 61, 119, 101, 209, 61, 212, 49, 26, 62, 72, 238, 135, 61, 7, 155, 121, 61, 85, 43, 55, 189, 35, 32, 123, 61, 3, 217, 47, 190, 23, 153, 22, 190, 80, 209, 176, 189, 8, 110, 160, 189, 187, 90, 112, 61, 165, 149, 50, 190, 148, 233, 41, 190, 1, 176, 44, 61, 41, 129, 128, 61, 230, 93, 147, 189, 159, 116, 9, 62, 127, 24, 59, 61, 86, 114, 15, 62, 207, 243, 183, 61, 46, 134, 117, 189, 167, 28, 51, 62, 52, 223, 139, 188, 5, 63, 244, 61, 93, 242, 250, 61, 123, 29, 50, 189, 218, 205, 117, 189, 208, 250, 177, 61, 127, 210, 141, 61, 35, 238, 224, 188, 250, 162, 179, 189, 209, 170, 249, 61, 1, 171, 129, 61, 90, 10, 143, 189, 189, 144, 233, 61, 1, 61, 27, 62, 132, 46, 245, 189, 27, 247, 178, 188, 120, 145, 46, 62, 221, 104, 225, 59, 203, 31, 54, 59, 196, 251, 25, 61, 87, 246, 19, 61, 3, 254, 159, 61, 154, 15, 234, 189, 205, 41, 199, 60, 227, 244, 198, 189, 24, 171, 20, 189, 13, 125, 22, 190, 139, 195, 102, 189, 185, 179, 144, 189, 59, 189, 168, 61, 173, 112, 211, 189, 56, 86, 66, 61, 31, 154, 29, 62, 35, 159, 14, 62, 13, 27, 130, 188, 96, 217, 94, 59, 225, 238, 255, 189, 127, 191, 9, 62, 134, 58, 212, 189, 199, 113, 114, 189, 50, 145, 171, 61, 93, 151, 253, 61, 197, 220, 188, 61, 194, 53, 145, 189, 10, 102, 244, 189, 253, 34, 39, 61, 69, 196, 176, 189, 12, 24, 98, 188, 211, 131, 16, 185, 174, 94, 34, 62, 166, 196, 194, 189, 106, 133, 42, 61, 133, 243, 72, 60, 96, 66, 144, 60, 223, 5, 50, 61, 230, 68, 15, 61, 5, 27, 178, 189, 133, 14, 40, 189, 76, 231, 28, 190, 12, 209, 72, 60, 231, 173, 246, 189, 66, 164, 127, 61, 35, 120, 211, 188, 44, 116, 68, 189, 26, 208, 212, 186, 103, 135, 132, 189, 186, 161, 151, 189, 190, 181, 10, 62, 1, 239, 2, 62, 204, 51, 2, 62, 255, 11, 21, 62, 83, 29, 170, 61, 230, 59, 5, 190, 8, 167, 89, 189, 91, 135, 55, 188, 120, 241, 52, 190, 8, 137, 230, 61, 73, 203, 8, 61, 31, 221, 14, 190, 188, 143, 141, 189, 91, 35, 61, 61, 81, 57, 16, 61, 33, 175, 112, 189, 58, 184, 240, 189, 40, 99, 49, 190, 5, 10, 30, 61, 241, 198, 120, 61, 202, 80, 187, 61, 228, 128, 22, 189, 130, 74, 207, 61, 180, 209, 31, 190, 137, 112, 231, 189, 158, 25, 247, 188, 6, 15, 20, 61, 234, 87, 246, 61, 99, 133, 30, 60, 102, 113, 169, 188, 188, 206, 188, 189, 108, 37, 43, 62, 161, 172, 98, 61, 70, 133, 189, 189, 132, 99, 225, 188, 137, 68, 4, 61, 41, 138, 213, 60, 4, 239, 88, 61, 125, 99, 224, 189, 38, 102, 24, 190, 191, 34, 85, 61, 117, 126, 16, 190, 168, 21, 53, 61, 214, 39, 5, 190, 153, 192, 48, 62, 58, 57, 21, 62, 145, 46, 30, 62, 201, 199, 226, 61, 63, 52, 179, 188, 224, 13, 11, 61, 5, 2, 110, 189, 196, 204, 197, 189, 1, 74, 183, 189, 13, 61, 29, 190, 2, 24, 47, 62, 84, 210, 22, 62, 43, 97, 8, 190, 37, 44, 129, 189, 46, 100, 217, 189, 202, 6, 115, 186, 162, 176, 204, 188, 139, 153, 147, 61, 142, 173, 35, 60, 153, 21, 11, 189, 39, 145, 134, 189, 203, 249, 46, 62, 48, 88, 181, 188, 131, 244, 234, 189, 10, 11, 227, 61, 220, 142, 78, 60, 158, 121, 230, 61, 150, 213, 218, 189, 30, 215, 51, 190, 124, 14, 36, 189, 147, 151, 76, 187, 132, 33, 18, 190, 182, 182, 63, 61, 179, 97, 68, 187, 29, 64, 34, 190, 233, 237, 135, 189, 193, 164, 72, 189, 57, 219, 5, 62, 32, 221, 112, 60, 132, 4, 83, 189, 26, 62, 43, 188, 250, 39, 86, 61, 254, 121, 36, 62, 51, 77, 42, 190, 190, 171, 155, 60, 128, 23, 248, 61, 34, 75, 13, 190, 183, 80, 216, 189, 115, 168, 23, 188, 11, 21, 35, 188, 82, 84, 125, 189, 134, 86, 4, 189, 183, 41, 33, 61, 90, 31, 26, 62, 178, 119, 73, 189, 217, 235, 139, 189, 2, 84, 146, 61, 33, 215, 48, 190, 22, 67, 52, 190, 155, 133, 249, 189, 131, 80, 141, 61, 143, 128, 4, 62, 39, 228, 128, 61, 47, 202, 164, 189, 37, 222, 78, 188, 137, 188, 156, 189, 165, 84, 25, 189, 219, 188, 43, 62, 213, 84, 10, 190, 191, 194, 153, 61, 117, 232, 66, 60, 254, 17, 47, 190, 195, 41, 236, 189, 238, 35, 198, 61, 235, 246, 98, 61, 190, 59, 25, 61, 164, 119, 15, 62, 245, 136, 156, 61, 224, 28, 27, 62, 78, 236, 110, 189, 150, 8, 25, 61, 84, 231, 224, 60, 106, 86, 8, 61, 28, 56, 222, 61, 59, 9, 186, 60, 126, 29, 35, 190, 214, 24, 241, 189, 89, 217, 180, 189, 225, 109, 147, 61, 223, 172, 201, 60, 245, 76, 218, 61, 144, 52, 29, 61, 206, 23, 51, 62, 68, 248, 140, 189, 219, 89, 68, 189, 45, 158, 136, 61, 145, 110, 46, 61, 154, 22, 25, 62, 170, 31, 87, 189, 36, 101, 229, 61, 46, 94, 6, 190, 135, 57, 152, 61, 235, 201, 9, 62, 231, 30, 18, 190, 170, 149, 14, 190, 181, 142, 171, 189, 164, 28, 52, 189, 23, 155, 248, 189, 194, 38, 38, 62, 16, 240, 204, 61, 210, 204, 189, 188, 129, 162, 13, 190, 206, 32, 78, 189, 65, 228, 204, 189, 176, 12, 69, 61, 38, 77, 234, 188, 33, 168, 6, 62, 234, 192, 144, 61, 113, 199, 84, 188, 85, 44, 5, 190, 86, 210, 236, 189, 204, 38, 121, 187, 204, 12, 199, 61, 11, 185, 195, 61, 155, 171, 116, 60, 147, 146, 90, 61, 155, 176, 209, 189, 248, 18, 173, 189, 21, 123, 237, 189, 77, 100, 225, 189, 109, 168, 212, 61, 197, 125, 63, 61, 96, 137, 20, 62, 71, 184, 35, 190, 68, 88, 17, 190, 79, 25, 7, 190, 255, 232, 199, 61, 210, 62, 171, 61, 54, 254, 43, 189, 43, 219, 41, 189, 27, 120, 229, 189, 181, 82, 252, 189, 145, 8, 126, 61, 116, 1, 190, 61, 53, 183, 244, 61, 250, 110, 176, 61, 134, 62, 221, 61, 127, 55, 29, 62, 85, 205, 49, 190, 103, 73, 81, 189, 224, 101, 171, 60, 31, 205, 14, 190, 52, 127, 212, 189, 169, 208, 14, 190, 216, 38, 186, 60, 46, 79, 159, 61, 87, 214, 125, 189, 27, 49, 251, 61, 133, 238, 28, 190, 70, 110, 199, 189, 35, 116, 29, 189, 147, 67, 8, 190, 209, 60, 136, 61, 1, 228, 211, 61, 146, 115, 233, 61, 224, 206, 156, 189, 198, 123, 167, 61, 87, 213, 30, 190, 80, 222, 32, 62, 178, 40, 42, 60, 103, 94, 211, 189, 14, 117, 151, 189, 10, 246, 28, 62, 222, 149, 2, 190, 65, 151, 141, 189, 248, 147, 34, 62, 127, 200, 14, 62, 22, 235, 36, 62, 10, 196, 92, 60, 31, 73, 38, 190, 252, 15, 48, 62, 149, 142, 11, 62, 136, 218, 229, 189, 37, 142, 197, 189, 169, 205, 25, 62, 240, 138, 136, 60, 58, 102, 249, 61, 130, 229, 106, 188, 212, 57, 38, 62, 220, 154, 82, 61, 157, 140, 173, 61, 215, 164, 1, 62, 6, 137, 48, 62, 116, 207, 241, 61, 63, 164, 139, 189, 78, 132, 221, 189, 161, 148, 172, 61, 105, 179, 56, 189, 82, 67, 16, 62, 96, 51, 91, 61, 103, 190, 46, 57, 101, 97, 225, 188, 225, 9, 74, 61, 59, 20, 130, 189, 213, 246, 248, 189, 21, 51, 75, 61, 218, 255, 212, 61, 72, 146, 173, 60, 208, 247, 157, 61, 72, 244, 222, 189, 181, 223, 54, 189, 167, 53, 16, 190, 133, 198, 236, 61, 66, 160, 175, 188, 165, 85, 75, 189, 128, 116, 73, 61, 77, 226, 138, 60, 133, 140, 201, 188, 156, 33, 28, 62, 244, 58, 41, 61, 115, 70, 155, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {176, 70, 7, 189, 202, 185, 198, 61, 147, 4, 142, 189, 22, 189, 65, 188, 83, 188, 3, 62, 162, 63, 56, 189, 96, 84, 247, 189, 8, 92, 227, 189, 163, 145, 140, 61, 251, 243, 228, 61, 193, 66, 24, 190, 36, 238, 38, 62, 222, 238, 43, 190, 247, 39, 109, 61, 111, 239, 131, 189, 184, 52, 203, 61, 18, 104, 44, 62, 188, 6, 51, 190, 80, 7, 133, 61, 12, 250, 24, 60, 183, 198, 182, 188, 214, 220, 152, 61, 31, 203, 143, 189, 88, 49, 32, 62, 166, 233, 58, 60, 65, 166, 12, 190, 207, 166, 169, 61, 232, 154, 69, 61, 214, 211, 208, 60, 96, 207, 18, 189, 5, 252, 164, 59, 167, 201, 187, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {132, 35, 43, 190, 51, 37, 137, 61, 56, 155, 3, 62, 64, 235, 20, 190, 7, 242, 214, 189, 203, 220, 165, 189, 3, 211, 188, 60, 207, 61, 196, 189, 36, 216, 230, 188, 19, 219, 28, 62, 199, 155, 181, 189, 203, 17, 26, 190, 147, 136, 17, 190, 127, 133, 64, 189, 159, 162, 4, 190, 165, 82, 0, 190, 244, 200, 101, 189, 185, 193, 104, 61, 51, 131, 238, 61, 100, 166, 187, 61, 42, 145, 247, 189, 94, 105, 27, 190, 185, 186, 212, 61, 166, 102, 151, 189, 144, 90, 188, 189, 116, 54, 14, 59, 23, 84, 97, 61, 50, 167, 43, 61, 185, 126, 121, 61, 145, 93, 20, 190, 205, 106, 15, 62, 81, 96, 35, 189, 227, 180, 158, 189, 12, 174, 110, 61, 118, 191, 208, 60, 176, 210, 248, 61, 245, 100, 23, 190, 33, 183, 154, 189, 96, 39, 139, 189, 99, 164, 188, 59, 100, 99, 240, 189, 41, 57, 146, 61, 148, 32, 226, 60, 77, 222, 140, 61, 82, 81, 158, 189, 237, 69, 139, 61, 108, 70, 178, 189, 176, 214, 149, 188, 80, 131, 52, 190, 193, 151, 63, 59, 102, 73, 21, 188, 232, 77, 86, 189, 149, 190, 123, 189, 99, 94, 219, 61, 118, 126, 15, 189, 84, 118, 3, 190, 242, 152, 17, 61, 178, 64, 162, 189, 9, 20, 84, 189, 88, 79, 245, 189, 154, 102, 94, 188, 131, 52, 206, 189, 19, 104, 255, 189, 127, 169, 15, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {187, 173, 134, 60, 141, 54, 35, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {55, 138, 33, 63, 153, 99, 16, 64, 138, 168, 2, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {66, 226, 140, 190, 26, 204, 248, 189};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0051/steps/000000000000000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}