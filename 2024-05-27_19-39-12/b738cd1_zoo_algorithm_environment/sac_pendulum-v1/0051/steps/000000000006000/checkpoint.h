// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {211, 215, 200, 62, 218, 101, 22, 190, 16, 190, 3, 63, 121, 82, 121, 189, 94, 18, 40, 191, 188, 135, 153, 189, 148, 255, 0, 191, 231, 165, 152, 61, 67, 142, 93, 191, 145, 92, 141, 62, 142, 136, 129, 62, 186, 232, 146, 59, 249, 127, 150, 190, 220, 211, 246, 62, 170, 168, 25, 190, 30, 79, 40, 63, 238, 63, 139, 61, 171, 16, 79, 190, 70, 96, 122, 60, 75, 161, 253, 61, 53, 150, 55, 191, 182, 250, 57, 62, 203, 221, 183, 190, 36, 230, 23, 62, 97, 171, 39, 61, 215, 47, 80, 191, 12, 125, 60, 190, 78, 21, 143, 62, 140, 164, 36, 63, 207, 59, 30, 63, 111, 227, 14, 191, 93, 30, 167, 189, 49, 96, 18, 191, 212, 235, 235, 61, 224, 238, 192, 61, 79, 209, 65, 191, 83, 244, 4, 63, 64, 46, 39, 63, 23, 219, 205, 62, 62, 19, 199, 189, 29, 176, 177, 62, 48, 35, 104, 61, 43, 218, 37, 63, 147, 39, 112, 191, 111, 245, 233, 190, 233, 72, 243, 62, 101, 142, 31, 63, 62, 171, 19, 62, 164, 192, 20, 63, 47, 43, 121, 63, 17, 178, 101, 62, 54, 90, 139, 188, 87, 60, 56, 191, 92, 164, 9, 63, 154, 21, 83, 62, 188, 130, 50, 190, 137, 187, 4, 191, 51, 55, 19, 62, 38, 65, 20, 191, 222, 211, 168, 190, 31, 1, 148, 62, 120, 209, 118, 63, 26, 109, 3, 62, 28, 248, 168, 62, 80, 224, 216, 190, 1, 58, 146, 62, 95, 199, 23, 190, 122, 116, 134, 187, 83, 223, 83, 63, 92, 34, 33, 63, 185, 190, 9, 63, 247, 229, 1, 63, 219, 120, 21, 63, 140, 94, 50, 191, 233, 235, 221, 189, 8, 232, 130, 190, 191, 183, 54, 63, 145, 18, 221, 190, 184, 71, 35, 63, 65, 237, 64, 63, 109, 135, 57, 62, 229, 49, 105, 63, 132, 194, 21, 63, 87, 146, 224, 62, 24, 145, 155, 190, 59, 70, 135, 63, 11, 246, 101, 62, 93, 213, 195, 190, 227, 36, 19, 190, 81, 130, 35, 63, 225, 4, 211, 61, 96, 82, 84, 191, 115, 245, 169, 62, 198, 85, 211, 189, 153, 230, 141, 63, 7, 36, 169, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {157, 52, 1, 191, 40, 40, 39, 62, 241, 4, 250, 60, 232, 47, 208, 190, 86, 212, 243, 62, 101, 94, 175, 62, 86, 137, 203, 190, 229, 203, 179, 189, 49, 199, 230, 62, 76, 252, 74, 62, 128, 112, 56, 62, 116, 96, 19, 63, 79, 80, 13, 190, 5, 141, 170, 190, 247, 13, 225, 190, 5, 96, 11, 191, 245, 69, 226, 189, 88, 226, 34, 190, 188, 197, 226, 187, 29, 242, 19, 63, 21, 228, 28, 191, 157, 151, 224, 190, 100, 155, 133, 61, 126, 44, 213, 189, 66, 201, 130, 62, 29, 65, 166, 62, 238, 105, 99, 62, 71, 249, 80, 62, 86, 230, 253, 62, 154, 86, 43, 191, 56, 149, 225, 61, 168, 56, 68, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {73, 19, 182, 59, 143, 232, 250, 189, 156, 73, 27, 62, 13, 254, 122, 61, 89, 188, 55, 188, 203, 184, 230, 187, 132, 186, 99, 190, 173, 80, 53, 62, 251, 119, 190, 61, 152, 2, 15, 190, 249, 11, 48, 62, 0, 53, 243, 61, 91, 62, 219, 61, 108, 111, 52, 62, 248, 121, 65, 190, 169, 169, 164, 190, 178, 145, 197, 61, 227, 196, 138, 188, 2, 138, 246, 189, 236, 155, 115, 189, 1, 208, 146, 189, 206, 181, 155, 189, 67, 247, 145, 61, 125, 8, 155, 61, 44, 226, 246, 189, 237, 113, 197, 61, 172, 120, 63, 62, 200, 194, 33, 62, 96, 213, 238, 60, 16, 80, 144, 190, 14, 236, 51, 188, 158, 91, 30, 190, 44, 72, 57, 190, 200, 242, 238, 60, 79, 75, 234, 189, 101, 94, 8, 62, 232, 186, 34, 189, 17, 129, 232, 61, 102, 191, 220, 189, 192, 194, 193, 189, 74, 105, 222, 61, 131, 48, 30, 189, 163, 255, 169, 61, 92, 233, 60, 188, 229, 216, 105, 189, 19, 41, 97, 62, 75, 28, 25, 189, 59, 22, 83, 190, 140, 112, 141, 190, 64, 193, 76, 189, 194, 247, 125, 189, 49, 113, 141, 60, 29, 204, 89, 190, 79, 29, 20, 190, 99, 25, 120, 62, 165, 189, 124, 190, 92, 136, 3, 189, 107, 2, 227, 189, 86, 96, 31, 190, 8, 111, 254, 188, 30, 138, 104, 60, 75, 125, 84, 62, 25, 149, 213, 61, 206, 247, 203, 62, 240, 44, 103, 190, 136, 253, 110, 190, 13, 226, 249, 59, 71, 213, 9, 62, 144, 203, 82, 62, 77, 37, 173, 61, 204, 133, 61, 189, 73, 214, 92, 189, 90, 248, 24, 190, 216, 119, 101, 61, 180, 236, 110, 190, 204, 39, 156, 61, 205, 96, 189, 189, 116, 124, 22, 189, 244, 247, 142, 61, 14, 198, 14, 189, 62, 50, 218, 190, 7, 96, 172, 61, 81, 207, 25, 62, 255, 172, 123, 190, 220, 244, 119, 190, 17, 143, 191, 59, 129, 148, 110, 62, 189, 146, 12, 190, 249, 182, 145, 62, 49, 252, 43, 190, 68, 201, 170, 189, 212, 164, 143, 190, 44, 41, 47, 60, 83, 167, 56, 61, 104, 119, 48, 62, 146, 41, 198, 62, 18, 106, 131, 188, 136, 26, 44, 190, 38, 109, 51, 190, 96, 177, 174, 189, 105, 21, 191, 189, 94, 53, 15, 61, 228, 24, 7, 188, 1, 24, 6, 61, 55, 175, 141, 190, 248, 249, 163, 188, 0, 151, 221, 189, 167, 78, 255, 61, 185, 80, 132, 62, 40, 111, 232, 61, 166, 71, 247, 190, 21, 126, 30, 62, 84, 160, 220, 62, 96, 169, 89, 62, 237, 120, 38, 62, 208, 141, 5, 62, 112, 172, 210, 61, 124, 188, 138, 189, 95, 122, 47, 190, 206, 8, 231, 187, 164, 152, 28, 190, 170, 235, 73, 62, 19, 192, 100, 62, 220, 154, 121, 62, 176, 128, 38, 189, 202, 244, 154, 189, 24, 169, 203, 60, 94, 10, 26, 62, 146, 107, 227, 189, 214, 55, 76, 62, 206, 220, 19, 62, 11, 8, 24, 61, 251, 52, 123, 62, 76, 205, 56, 188, 40, 76, 93, 190, 134, 170, 237, 188, 22, 101, 204, 189, 218, 160, 80, 190, 140, 22, 29, 62, 97, 106, 200, 61, 1, 208, 118, 62, 160, 238, 119, 62, 32, 89, 0, 191, 229, 232, 6, 191, 42, 10, 179, 62, 65, 241, 145, 62, 100, 235, 216, 189, 84, 106, 185, 60, 67, 201, 129, 189, 241, 51, 173, 62, 1, 182, 10, 190, 21, 251, 20, 62, 210, 175, 53, 190, 44, 182, 54, 62, 171, 13, 35, 62, 68, 16, 11, 61, 16, 250, 24, 190, 5, 255, 209, 190, 222, 163, 230, 189, 227, 201, 127, 190, 231, 225, 53, 190, 179, 101, 249, 59, 28, 68, 151, 61, 174, 158, 76, 190, 59, 102, 2, 62, 60, 244, 160, 61, 126, 71, 151, 190, 189, 78, 48, 190, 225, 131, 37, 62, 42, 157, 215, 189, 174, 126, 155, 62, 45, 97, 13, 189, 176, 56, 68, 62, 112, 61, 15, 62, 205, 17, 15, 191, 183, 175, 244, 190, 6, 28, 208, 62, 90, 121, 176, 185, 18, 176, 166, 189, 129, 24, 22, 62, 28, 55, 42, 190, 42, 124, 25, 62, 90, 133, 246, 188, 164, 57, 121, 61, 40, 152, 160, 190, 20, 92, 176, 62, 61, 253, 128, 61, 11, 109, 160, 62, 0, 210, 201, 186, 8, 104, 209, 190, 83, 142, 141, 190, 207, 107, 81, 190, 5, 38, 10, 190, 162, 156, 41, 62, 146, 245, 11, 191, 220, 37, 35, 186, 230, 121, 164, 189, 94, 64, 167, 62, 123, 182, 151, 189, 137, 105, 17, 61, 36, 8, 235, 189, 81, 119, 24, 61, 222, 31, 168, 190, 83, 204, 11, 190, 148, 57, 188, 190, 87, 92, 95, 188, 120, 13, 110, 62, 1, 206, 239, 189, 108, 42, 171, 190, 128, 195, 4, 190, 189, 243, 219, 61, 23, 177, 79, 62, 113, 173, 26, 190, 157, 233, 139, 189, 94, 10, 77, 62, 225, 32, 206, 189, 179, 186, 43, 62, 163, 127, 234, 61, 78, 21, 99, 189, 118, 78, 87, 190, 239, 83, 96, 61, 91, 24, 28, 62, 219, 20, 156, 62, 161, 95, 219, 62, 122, 239, 133, 190, 50, 26, 108, 62, 247, 124, 89, 189, 242, 125, 34, 189, 227, 84, 184, 190, 235, 245, 239, 61, 251, 18, 203, 62, 239, 135, 184, 189, 68, 109, 165, 62, 153, 74, 251, 61, 80, 250, 203, 190, 32, 130, 67, 61, 244, 14, 1, 190, 72, 147, 71, 190, 138, 198, 135, 62, 85, 229, 27, 62, 52, 130, 151, 189, 241, 61, 178, 187, 29, 134, 16, 62, 247, 142, 164, 188, 107, 254, 179, 189, 199, 171, 131, 190, 84, 250, 33, 61, 226, 186, 96, 190, 101, 168, 137, 62, 228, 60, 230, 190, 189, 78, 187, 190, 238, 77, 167, 190, 238, 165, 60, 62, 141, 58, 115, 62, 92, 206, 203, 61, 90, 141, 150, 189, 85, 43, 127, 190, 154, 93, 251, 61, 140, 9, 0, 61, 42, 52, 246, 187, 47, 154, 123, 61, 120, 150, 24, 60, 145, 86, 214, 190, 56, 157, 137, 190, 126, 20, 49, 62, 194, 106, 217, 190, 30, 78, 46, 62, 209, 204, 84, 190, 226, 6, 207, 61, 197, 113, 138, 188, 171, 118, 250, 190, 19, 41, 143, 190, 131, 137, 235, 61, 255, 237, 23, 189, 15, 213, 152, 190, 38, 196, 252, 188, 35, 230, 146, 190, 22, 169, 41, 190, 104, 195, 175, 188, 28, 91, 46, 62, 241, 12, 172, 189, 43, 150, 163, 61, 109, 170, 66, 61, 61, 202, 139, 62, 114, 189, 186, 61, 215, 22, 54, 191, 63, 212, 145, 190, 42, 212, 65, 191, 82, 158, 170, 61, 161, 51, 8, 188, 7, 87, 139, 190, 40, 94, 232, 189, 48, 190, 230, 189, 202, 234, 47, 61, 213, 241, 135, 62, 111, 13, 0, 190, 209, 8, 100, 189, 137, 231, 63, 190, 246, 253, 159, 189, 55, 241, 1, 189, 196, 218, 247, 189, 71, 25, 4, 189, 67, 174, 243, 62, 177, 121, 202, 188, 93, 161, 199, 190, 171, 147, 173, 61, 69, 94, 156, 62, 8, 212, 34, 188, 175, 60, 207, 187, 246, 60, 150, 61, 115, 111, 43, 188, 242, 201, 159, 188, 187, 147, 197, 61, 88, 245, 210, 189, 239, 171, 236, 188, 224, 104, 18, 190, 146, 134, 210, 190, 130, 51, 193, 61, 41, 172, 143, 62, 166, 239, 140, 61, 108, 75, 53, 189, 155, 175, 76, 62, 85, 39, 147, 61, 121, 113, 161, 61, 69, 205, 99, 61, 16, 145, 36, 190, 165, 75, 63, 188, 103, 30, 85, 188, 90, 99, 137, 62, 208, 223, 79, 191, 59, 102, 91, 62, 12, 159, 12, 62, 124, 59, 8, 190, 202, 174, 62, 189, 53, 83, 139, 189, 132, 51, 241, 189, 201, 222, 98, 62, 238, 184, 192, 189, 10, 2, 166, 61, 40, 60, 1, 62, 93, 69, 220, 187, 123, 21, 65, 62, 1, 96, 15, 62, 197, 99, 130, 189, 17, 180, 182, 190, 98, 217, 59, 61, 154, 197, 43, 191, 228, 60, 175, 190, 175, 110, 113, 62, 133, 255, 29, 191, 129, 172, 172, 62, 175, 156, 192, 190, 96, 145, 52, 62, 184, 132, 75, 61, 159, 13, 64, 62, 48, 241, 211, 61, 154, 78, 93, 62, 127, 254, 118, 188, 200, 14, 118, 190, 113, 143, 220, 61, 172, 85, 228, 189, 105, 185, 134, 190, 71, 213, 142, 62, 162, 243, 225, 60, 112, 60, 98, 62, 160, 146, 196, 61, 103, 62, 224, 190, 140, 45, 53, 190, 169, 167, 87, 62, 179, 7, 56, 188, 90, 5, 8, 190, 92, 192, 168, 61, 249, 32, 85, 189, 165, 189, 80, 188, 116, 29, 16, 190, 6, 8, 86, 62, 167, 29, 1, 190, 221, 5, 122, 62, 230, 93, 253, 61, 153, 106, 38, 62, 81, 140, 42, 61, 215, 25, 147, 189, 215, 190, 174, 190, 65, 178, 150, 190, 92, 240, 239, 189, 10, 93, 143, 61, 56, 163, 179, 190, 15, 168, 225, 189, 57, 105, 44, 62, 95, 96, 90, 62, 38, 235, 3, 62, 16, 103, 106, 189, 205, 117, 141, 62, 20, 186, 194, 189, 186, 97, 186, 190, 190, 154, 186, 61, 238, 114, 80, 190, 146, 121, 51, 190, 185, 25, 33, 61, 80, 100, 37, 62, 187, 95, 129, 190, 111, 204, 140, 60, 171, 33, 153, 187, 156, 70, 55, 189, 135, 10, 216, 190, 156, 2, 193, 190, 182, 141, 125, 62, 90, 31, 94, 190, 234, 117, 51, 61, 67, 193, 236, 190, 224, 160, 37, 190, 155, 68, 144, 190, 172, 133, 37, 62, 246, 115, 154, 61, 183, 38, 83, 62, 131, 97, 170, 190, 106, 218, 9, 62, 18, 84, 66, 62, 64, 79, 151, 190, 2, 174, 16, 62, 83, 176, 44, 62, 176, 32, 16, 191, 139, 58, 191, 190, 252, 29, 123, 190, 254, 225, 118, 62, 67, 228, 166, 190, 187, 198, 34, 62, 217, 51, 6, 190, 84, 177, 151, 60, 72, 30, 223, 189, 13, 177, 144, 190, 168, 225, 16, 62, 38, 186, 59, 189, 217, 198, 218, 61, 210, 247, 20, 191, 155, 14, 2, 60, 7, 142, 231, 61, 33, 241, 146, 189, 41, 172, 8, 62, 198, 201, 195, 188, 237, 13, 232, 190, 104, 30, 126, 188, 224, 193, 118, 190, 194, 49, 220, 61, 187, 47, 40, 62, 185, 59, 240, 190, 79, 52, 46, 62, 165, 100, 128, 191, 46, 179, 85, 190, 212, 8, 85, 190, 40, 79, 148, 190, 163, 19, 23, 62, 221, 20, 147, 189, 152, 246, 250, 62, 110, 181, 64, 190, 135, 176, 193, 61, 100, 208, 54, 61, 233, 175, 88, 60, 90, 66, 187, 190, 89, 197, 151, 62, 167, 215, 165, 61, 47, 133, 157, 189, 166, 51, 253, 190, 39, 10, 45, 190, 193, 186, 78, 189, 15, 131, 48, 61, 174, 38, 33, 60, 230, 221, 184, 60, 185, 165, 34, 60, 162, 124, 24, 61, 64, 104, 194, 61, 104, 251, 58, 190, 123, 221, 12, 62, 56, 135, 3, 190, 42, 20, 102, 61, 140, 185, 86, 62, 208, 252, 145, 189, 199, 0, 80, 62, 212, 178, 51, 62, 127, 244, 13, 62, 129, 190, 224, 189, 127, 97, 7, 190, 129, 241, 109, 190, 125, 211, 188, 60, 145, 93, 53, 62, 35, 104, 28, 60, 240, 96, 28, 190, 87, 9, 60, 62, 239, 6, 126, 190, 145, 164, 96, 62, 184, 228, 10, 191, 104, 208, 168, 190, 99, 103, 161, 189, 0, 130, 58, 190, 16, 9, 28, 190, 197, 78, 165, 60, 36, 110, 25, 62, 61, 213, 134, 189, 246, 49, 138, 189, 242, 235, 131, 190, 174, 183, 141, 61, 114, 90, 10, 189, 237, 77, 149, 189, 245, 192, 3, 62, 60, 172, 248, 187, 250, 228, 43, 189, 254, 176, 6, 62, 212, 220, 221, 189, 105, 67, 155, 189, 151, 221, 72, 62, 96, 91, 48, 62, 42, 133, 190, 61, 89, 142, 182, 190, 84, 84, 13, 190, 194, 237, 103, 60, 91, 206, 186, 61, 215, 161, 15, 190, 76, 93, 169, 61, 152, 86, 2, 190, 180, 228, 11, 190, 160, 239, 49, 62, 232, 23, 20, 62, 57, 37, 47, 62, 185, 236, 188, 60, 214, 142, 146, 188, 129, 16, 62, 61, 254, 126, 227, 189, 159, 152, 126, 190, 253, 166, 179, 60, 156, 212, 196, 189, 13, 254, 178, 189, 207, 227, 82, 62, 236, 76, 107, 190, 236, 176, 152, 190, 110, 79, 184, 190, 135, 232, 90, 62, 72, 128, 80, 60, 14, 138, 198, 189, 176, 159, 142, 62, 86, 40, 130, 62, 181, 20, 133, 190, 68, 186, 47, 190, 10, 207, 30, 190, 43, 249, 223, 61, 83, 222, 66, 189, 213, 148, 42, 189, 19, 206, 155, 60, 155, 22, 47, 62, 100, 89, 75, 190, 235, 159, 151, 62, 174, 58, 215, 188, 175, 203, 62, 61, 203, 74, 6, 190, 45, 24, 95, 190, 152, 20, 250, 60, 155, 2, 198, 61, 208, 144, 128, 190, 13, 102, 51, 61, 127, 31, 141, 62, 123, 46, 37, 62, 220, 74, 145, 190, 28, 23, 238, 189, 81, 29, 142, 189, 191, 221, 208, 61, 209, 197, 35, 61, 141, 40, 67, 190, 119, 244, 10, 61, 238, 81, 58, 190, 115, 24, 33, 62, 93, 112, 205, 188, 92, 173, 113, 61, 66, 13, 13, 190, 223, 150, 54, 191, 163, 217, 126, 61, 131, 238, 188, 62, 202, 109, 63, 189, 106, 41, 53, 190, 11, 132, 252, 188, 209, 48, 208, 190, 59, 253, 137, 189, 95, 219, 235, 188, 136, 18, 163, 62, 238, 226, 9, 62, 34, 235, 99, 61, 226, 147, 54, 190, 6, 204, 68, 61, 125, 38, 69, 190, 228, 189, 130, 189, 69, 53, 66, 190, 202, 126, 198, 60, 175, 31, 142, 61, 183, 155, 11, 190, 129, 212, 29, 191, 156, 79, 188, 188, 189, 135, 111, 62, 238, 223, 239, 189, 146, 84, 251, 189, 126, 201, 232, 189, 65, 178, 128, 62, 101, 198, 90, 190, 54, 57, 57, 62, 30, 139, 48, 190, 105, 42, 87, 61, 161, 161, 132, 190, 32, 8, 197, 187, 146, 64, 4, 61, 223, 195, 125, 62, 230, 230, 250, 62, 82, 198, 50, 190, 45, 44, 20, 189, 247, 127, 16, 190, 152, 47, 150, 60, 210, 27, 94, 189, 214, 43, 157, 62, 95, 90, 51, 62, 136, 151, 251, 189, 217, 147, 43, 62, 146, 175, 30, 62, 105, 138, 35, 190, 85, 91, 136, 189, 40, 202, 47, 190, 28, 60, 81, 190, 155, 65, 198, 62, 42, 170, 186, 189, 118, 132, 6, 191, 210, 30, 142, 189, 44, 235, 162, 62, 242, 104, 168, 61, 118, 87, 100, 189, 180, 32, 73, 189, 159, 86, 128, 189, 208, 39, 106, 189, 201, 94, 33, 62, 177, 175, 96, 190, 173, 17, 61, 190, 146, 164, 136, 188, 162, 236, 32, 191, 182, 56, 71, 62, 33, 88, 222, 62, 220, 184, 164, 61, 73, 134, 64, 62, 105, 240, 24, 190, 191, 243, 88, 189, 110, 17, 208, 189, 100, 222, 13, 62, 217, 70, 203, 61, 134, 38, 98, 189, 55, 150, 244, 189, 182, 121, 26, 62, 60, 173, 71, 189, 3, 65, 63, 62, 81, 177, 20, 62, 212, 108, 13, 189, 144, 19, 200, 61, 110, 121, 9, 191, 220, 190, 204, 190, 73, 29, 124, 62, 189, 172, 34, 189, 128, 177, 146, 190, 50, 89, 122, 60, 137, 24, 213, 61, 168, 79, 100, 62, 230, 126, 58, 190, 193, 235, 133, 62, 131, 215, 177, 189, 10, 206, 77, 62, 173, 125, 80, 62, 110, 225, 61, 62, 62, 211, 213, 189, 244, 107, 242, 189, 155, 169, 87, 61, 79, 167, 205, 189, 249, 246, 191, 61, 210, 42, 179, 61, 180, 49, 144, 190, 5, 255, 243, 60, 123, 214, 183, 190, 137, 146, 25, 190, 241, 37, 88, 190, 95, 206, 242, 188, 28, 169, 132, 61, 17, 224, 10, 190, 15, 109, 184, 190, 197, 118, 174, 188, 108, 13, 74, 61, 75, 215, 177, 189, 78, 118, 35, 62, 59, 94, 148, 189, 187, 137, 132, 61, 58, 134, 8, 62, 254, 38, 7, 189, 185, 88, 18, 62, 122, 77, 42, 189, 195, 1, 47, 62, 150, 82, 80, 62, 90, 39, 45, 189, 26, 197, 115, 188, 108, 115, 57, 189, 60, 19, 18, 189, 92, 136, 159, 189, 92, 245, 164, 189, 125, 172, 138, 62, 213, 199, 39, 62, 99, 137, 132, 190, 108, 165, 61, 189, 220, 214, 221, 61, 31, 9, 147, 191, 69, 26, 202, 60, 129, 60, 167, 62, 134, 88, 87, 190, 60, 232, 167, 188, 4, 189, 76, 190, 144, 137, 170, 189, 36, 42, 75, 62, 210, 21, 95, 190, 112, 178, 24, 191, 146, 193, 144, 190, 39, 200, 192, 189, 142, 102, 9, 190, 156, 75, 121, 190, 44, 53, 165, 190, 117, 36, 38, 190, 39, 119, 224, 189, 175, 220, 118, 190, 139, 24, 163, 189, 32, 226, 80, 187, 152, 157, 196, 61, 175, 125, 86, 190, 219, 102, 170, 190, 12, 28, 203, 61, 54, 220, 52, 190, 194, 61, 136, 190, 55, 69, 154, 62, 239, 113, 140, 62, 72, 2, 138, 62, 156, 198, 159, 62, 131, 12, 39, 190, 236, 55, 201, 61, 210, 128, 136, 189, 187, 35, 114, 189, 118, 109, 15, 61, 58, 41, 189, 62, 49, 187, 7, 190, 250, 248, 253, 61, 121, 14, 191, 61, 188, 190, 147, 188, 168, 234, 174, 61, 234, 23, 235, 61, 129, 39, 18, 190, 149, 233, 151, 189, 156, 200, 157, 190, 17, 157, 199, 190, 114, 191, 40, 190, 166, 166, 153, 61, 3, 131, 235, 188, 177, 52, 137, 61, 142, 195, 83, 190, 49, 247, 93, 189, 198, 97, 116, 189, 82, 232, 13, 62, 238, 131, 91, 62, 82, 9, 30, 62, 47, 162, 138, 62, 105, 10, 101, 62, 113, 180, 135, 190, 33, 150, 90, 189, 196, 243, 94, 61, 105, 72, 142, 190, 68, 224, 59, 62, 51, 213, 113, 62, 184, 69, 33, 61, 250, 176, 218, 189, 41, 87, 23, 62, 164, 70, 88, 61, 254, 66, 139, 190, 143, 165, 145, 189, 249, 125, 106, 189, 101, 249, 112, 190, 50, 77, 169, 62, 106, 14, 92, 62, 250, 239, 155, 61, 16, 19, 40, 62, 89, 43, 66, 191, 198, 160, 10, 191, 7, 174, 170, 62, 154, 11, 66, 62, 2, 139, 168, 189, 57, 31, 63, 62, 100, 149, 23, 189, 141, 247, 234, 61, 239, 210, 215, 61, 214, 39, 39, 62, 169, 165, 186, 190, 246, 2, 75, 62, 17, 121, 153, 61, 103, 171, 35, 62, 190, 242, 195, 188, 120, 139, 227, 190, 93, 25, 14, 190, 204, 104, 126, 190, 146, 107, 252, 60, 199, 65, 121, 61, 133, 92, 185, 190, 112, 198, 48, 62, 105, 206, 206, 189, 233, 137, 193, 62, 152, 37, 201, 190, 61, 73, 55, 62, 132, 253, 214, 61, 234, 41, 181, 189, 167, 162, 181, 190, 194, 133, 101, 61, 222, 107, 114, 190, 115, 157, 82, 62, 112, 239, 183, 62, 63, 202, 201, 189, 14, 79, 190, 190, 60, 117, 43, 62, 213, 245, 32, 62, 84, 84, 238, 61, 0, 88, 1, 62, 45, 122, 88, 62, 232, 92, 78, 189, 65, 131, 216, 189, 247, 155, 241, 62, 91, 16, 41, 190, 63, 132, 210, 189, 123, 72, 46, 62, 8, 8, 1, 191, 137, 210, 56, 189, 101, 104, 90, 187, 233, 202, 192, 189, 106, 188, 120, 188, 249, 51, 171, 61, 58, 8, 163, 190, 176, 218, 99, 61, 20, 237, 155, 189, 187, 134, 28, 62, 183, 255, 66, 188, 129, 195, 191, 60, 8, 76, 82, 62, 196, 205, 173, 61, 129, 150, 3, 190, 242, 227, 78, 61, 124, 26, 59, 190, 29, 96, 159, 189, 145, 242, 203, 61, 82, 136, 154, 188, 145, 34, 242, 190, 196, 226, 208, 189, 47, 249, 243, 61, 182, 119, 191, 61, 77, 3, 142, 189, 145, 131, 154, 60, 184, 64, 231, 61, 107, 167, 25, 190, 68, 122, 195, 62, 42, 235, 149, 189, 110, 111, 248, 189, 71, 194, 87, 189, 92, 104, 102, 191, 193, 113, 73, 187, 80, 81, 72, 62, 151, 46, 231, 62, 31, 229, 50, 57, 82, 184, 66, 189, 208, 143, 92, 190, 208, 227, 8, 188, 139, 128, 5, 59, 71, 152, 6, 62, 182, 231, 83, 62, 69, 95, 76, 190, 248, 194, 108, 187, 205, 144, 226, 60, 184, 31, 131, 190, 175, 191, 210, 189, 97, 150, 0, 190, 98, 36, 101, 188, 145, 137, 23, 62, 251, 173, 116, 61, 153, 101, 170, 190, 170, 141, 51, 61, 172, 248, 97, 61, 30, 16, 142, 60, 101, 130, 12, 190, 131, 233, 166, 189, 190, 161, 21, 62, 109, 186, 57, 190, 213, 221, 213, 189, 72, 186, 154, 189, 121, 96, 14, 190, 51, 114, 130, 189, 46, 212, 250, 189, 218, 119, 15, 62, 71, 157, 3, 62, 177, 218, 20, 63, 170, 77, 142, 190, 47, 160, 38, 62, 10, 128, 82, 191, 62, 144, 78, 61, 234, 177, 199, 61, 116, 28, 194, 62, 204, 92, 203, 62, 160, 190, 148, 190, 115, 116, 125, 62, 117, 157, 117, 62, 208, 11, 145, 190, 88, 121, 179, 190, 48, 87, 150, 190, 229, 223, 91, 188, 149, 34, 217, 62, 223, 203, 95, 61, 153, 115, 76, 190, 72, 131, 134, 190, 189, 133, 145, 62, 160, 245, 131, 61, 138, 101, 108, 190, 92, 108, 62, 190, 185, 238, 231, 61, 169, 116, 172, 189, 2, 190, 7, 61, 162, 107, 182, 190, 6, 35, 30, 190, 69, 212, 116, 190, 138, 67, 180, 60, 185, 93, 194, 62, 9, 145, 220, 62, 1, 186, 166, 62, 39, 135, 65, 190, 27, 225, 168, 60, 207, 38, 184, 190, 21, 123, 237, 189, 158, 129, 134, 60, 190, 54, 131, 62, 23, 176, 117, 61, 220, 181, 233, 61, 111, 31, 21, 189, 25, 89, 229, 189, 29, 195, 208, 190, 72, 205, 187, 61, 24, 3, 191, 189, 71, 55, 142, 189, 149, 158, 11, 61, 52, 231, 5, 190, 64, 2, 161, 190, 224, 27, 34, 189, 205, 70, 56, 62, 212, 108, 97, 62, 214, 184, 48, 189, 117, 14, 24, 190, 191, 98, 130, 62, 220, 201, 173, 190, 65, 219, 143, 188, 85, 166, 218, 190, 28, 196, 157, 190, 138, 105, 167, 190, 20, 1, 58, 61, 179, 37, 31, 62, 208, 86, 60, 62, 116, 132, 134, 190, 139, 99, 3, 61, 4, 5, 26, 190, 78, 222, 9, 190, 56, 207, 86, 188, 61, 20, 187, 61, 245, 9, 219, 61, 176, 7, 26, 61, 47, 128, 160, 61, 165, 175, 152, 189, 108, 34, 17, 62, 48, 222, 230, 189, 49, 83, 49, 62, 209, 59, 188, 189, 203, 24, 187, 189, 212, 78, 163, 189, 128, 152, 133, 62, 120, 123, 183, 190, 35, 211, 24, 190, 107, 91, 26, 62, 174, 94, 23, 62, 184, 133, 221, 61, 138, 213, 170, 189, 159, 20, 7, 190, 41, 77, 157, 61, 244, 109, 87, 62, 154, 208, 51, 189, 208, 130, 154, 60, 52, 71, 242, 61, 225, 180, 42, 61, 236, 210, 41, 62, 8, 93, 164, 61, 107, 133, 215, 62, 182, 100, 142, 60, 194, 174, 8, 62, 65, 16, 30, 62, 180, 90, 10, 62, 240, 174, 18, 62, 241, 179, 191, 61, 221, 152, 36, 190, 175, 237, 199, 61, 207, 80, 19, 61, 117, 88, 32, 60, 224, 211, 149, 61, 33, 18, 146, 61, 76, 8, 12, 189, 100, 220, 55, 61, 37, 122, 79, 190, 17, 168, 10, 191, 175, 98, 18, 62, 12, 87, 166, 61, 152, 8, 44, 188, 153, 39, 66, 62, 154, 227, 152, 190, 29, 37, 128, 188, 180, 69, 69, 190, 125, 179, 34, 62, 110, 220, 70, 189, 45, 134, 132, 188, 110, 253, 236, 61, 169, 46, 34, 62, 179, 183, 137, 189, 17, 158, 6, 189, 154, 226, 140, 189, 164, 130, 82, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {5, 211, 139, 187, 120, 207, 67, 62, 240, 15, 152, 58, 233, 147, 71, 189, 53, 180, 139, 62, 186, 247, 37, 62, 28, 0, 75, 61, 253, 148, 38, 190, 233, 98, 140, 62, 110, 111, 186, 61, 235, 7, 150, 188, 132, 45, 223, 61, 17, 89, 218, 188, 130, 16, 47, 62, 19, 247, 232, 61, 53, 222, 228, 61, 24, 132, 168, 62, 162, 59, 86, 190, 120, 213, 24, 62, 72, 173, 173, 61, 133, 183, 13, 61, 134, 167, 28, 61, 53, 72, 139, 61, 183, 151, 180, 62, 216, 104, 142, 61, 209, 110, 78, 189, 6, 167, 94, 62, 104, 0, 22, 62, 223, 64, 93, 62, 127, 156, 215, 61, 83, 147, 89, 62, 190, 98, 172, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 204, 19, 190, 59, 200, 66, 62, 213, 73, 148, 62, 171, 0, 194, 190, 161, 182, 13, 191, 195, 99, 38, 191, 144, 200, 134, 62, 40, 196, 16, 191, 115, 177, 56, 191, 7, 252, 159, 62, 187, 93, 139, 190, 150, 182, 136, 190, 220, 140, 250, 190, 148, 11, 62, 191, 27, 170, 154, 189, 155, 198, 26, 190, 144, 145, 139, 61, 2, 92, 216, 61, 213, 34, 223, 62, 58, 115, 176, 62, 185, 57, 154, 190, 254, 149, 134, 190, 33, 13, 86, 63, 28, 253, 166, 189, 118, 213, 241, 190, 141, 210, 239, 62, 165, 232, 211, 62, 211, 59, 89, 62, 39, 192, 68, 63, 186, 245, 21, 191, 28, 14, 6, 62, 218, 226, 119, 189, 84, 203, 42, 187, 74, 110, 21, 60, 14, 115, 1, 61, 79, 182, 23, 189, 123, 90, 204, 188, 29, 133, 35, 61, 106, 131, 88, 187, 35, 93, 251, 61, 205, 173, 220, 189, 182, 210, 115, 62, 196, 1, 225, 186, 215, 251, 22, 62, 206, 94, 21, 59, 2, 243, 155, 61, 150, 182, 212, 190, 155, 155, 106, 61, 253, 5, 188, 190, 233, 125, 65, 62, 229, 1, 118, 59, 102, 96, 155, 61, 20, 109, 158, 189, 239, 134, 232, 61, 250, 222, 35, 189, 96, 163, 215, 190, 131, 210, 69, 62, 82, 237, 173, 61, 94, 110, 15, 189, 160, 23, 55, 189, 242, 60, 59, 60, 147, 222, 149, 61, 213, 247, 38, 190, 167, 96, 68, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {218, 32, 225, 61, 27, 178, 144, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {36, 156, 50, 63, 220, 59, 194, 191, 198, 65, 157, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {186, 39, 78, 64, 192, 42, 125, 61};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0051/steps/000000000006000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}