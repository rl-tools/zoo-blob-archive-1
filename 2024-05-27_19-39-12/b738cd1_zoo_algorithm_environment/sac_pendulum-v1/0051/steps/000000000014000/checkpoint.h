// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 91, 68, 62, 192, 98, 248, 189, 43, 237, 247, 62, 201, 93, 116, 190, 57, 180, 142, 191, 81, 146, 160, 189, 240, 16, 25, 191, 211, 116, 102, 189, 41, 188, 83, 191, 145, 92, 141, 62, 142, 136, 129, 62, 186, 232, 146, 59, 132, 220, 28, 191, 241, 84, 107, 62, 0, 153, 139, 189, 162, 22, 58, 63, 63, 104, 3, 62, 93, 30, 135, 189, 156, 141, 7, 63, 217, 196, 118, 62, 25, 102, 47, 191, 0, 129, 154, 62, 204, 185, 235, 190, 190, 2, 53, 62, 55, 166, 45, 61, 237, 152, 139, 191, 33, 152, 128, 190, 79, 166, 104, 62, 236, 31, 139, 63, 240, 49, 9, 63, 125, 113, 39, 191, 47, 122, 78, 190, 109, 84, 16, 191, 130, 36, 244, 61, 37, 253, 130, 62, 147, 218, 37, 191, 30, 71, 5, 63, 174, 97, 121, 63, 14, 182, 134, 62, 47, 201, 117, 190, 0, 223, 218, 62, 209, 98, 104, 61, 228, 168, 57, 63, 84, 136, 122, 191, 1, 1, 207, 190, 175, 91, 161, 62, 109, 80, 127, 63, 141, 176, 141, 62, 18, 101, 20, 63, 210, 138, 145, 63, 183, 137, 150, 62, 30, 134, 8, 62, 179, 231, 57, 191, 162, 188, 248, 62, 19, 56, 74, 62, 142, 124, 111, 189, 9, 238, 252, 190, 185, 15, 100, 61, 254, 143, 74, 191, 64, 93, 131, 190, 109, 82, 180, 62, 49, 87, 177, 63, 37, 153, 13, 62, 135, 79, 139, 62, 56, 220, 217, 190, 168, 169, 177, 62, 129, 159, 149, 190, 62, 195, 106, 62, 104, 150, 70, 63, 205, 111, 31, 63, 170, 208, 22, 63, 255, 138, 0, 63, 110, 76, 22, 63, 212, 236, 65, 191, 117, 215, 10, 190, 109, 36, 248, 190, 247, 131, 47, 63, 254, 204, 214, 190, 254, 120, 48, 63, 182, 0, 104, 63, 187, 155, 76, 62, 210, 27, 104, 63, 42, 179, 129, 63, 55, 18, 189, 62, 90, 218, 153, 190, 8, 171, 163, 63, 33, 214, 116, 62, 95, 224, 16, 191, 154, 96, 171, 61, 255, 94, 36, 63, 23, 222, 7, 188, 235, 26, 113, 191, 243, 211, 158, 62, 152, 160, 120, 189, 141, 105, 169, 63, 242, 227, 149, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {1, 133, 93, 191, 134, 103, 177, 61, 199, 144, 48, 188, 232, 47, 208, 190, 151, 69, 24, 63, 236, 26, 162, 62, 2, 234, 18, 191, 130, 31, 65, 190, 41, 209, 214, 62, 184, 2, 84, 62, 220, 26, 70, 62, 149, 119, 14, 63, 221, 44, 25, 190, 73, 142, 177, 190, 160, 96, 5, 191, 114, 152, 9, 191, 230, 185, 188, 189, 215, 125, 203, 190, 176, 212, 171, 189, 7, 185, 206, 62, 154, 90, 225, 190, 198, 76, 42, 191, 241, 155, 33, 62, 173, 18, 22, 190, 192, 59, 89, 62, 208, 53, 118, 62, 244, 101, 53, 62, 199, 232, 18, 62, 36, 221, 20, 63, 160, 255, 7, 191, 26, 186, 198, 61, 161, 102, 50, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {173, 255, 141, 188, 218, 158, 134, 189, 20, 232, 12, 62, 13, 254, 122, 61, 173, 80, 158, 59, 38, 66, 245, 187, 92, 139, 116, 190, 137, 1, 40, 62, 178, 18, 146, 61, 204, 197, 93, 190, 38, 192, 31, 62, 177, 19, 215, 61, 18, 81, 110, 61, 148, 95, 119, 62, 68, 136, 187, 190, 90, 60, 40, 191, 214, 92, 3, 62, 30, 17, 132, 189, 235, 208, 217, 189, 39, 233, 186, 189, 11, 35, 228, 62, 133, 31, 5, 60, 226, 209, 13, 188, 17, 180, 117, 60, 131, 25, 16, 190, 79, 59, 211, 61, 150, 88, 115, 62, 13, 59, 28, 62, 202, 43, 23, 62, 212, 240, 7, 191, 31, 128, 48, 189, 245, 169, 40, 190, 157, 62, 127, 190, 66, 224, 147, 62, 16, 54, 244, 189, 101, 94, 8, 62, 166, 230, 79, 62, 44, 76, 243, 185, 146, 171, 197, 190, 6, 180, 14, 190, 94, 249, 152, 62, 235, 150, 69, 189, 194, 152, 48, 62, 145, 35, 209, 189, 254, 110, 126, 190, 111, 142, 146, 61, 142, 31, 129, 190, 88, 46, 26, 190, 98, 1, 42, 191, 194, 47, 84, 189, 38, 140, 111, 190, 90, 22, 9, 62, 124, 147, 53, 191, 66, 30, 103, 190, 81, 15, 99, 62, 101, 106, 123, 190, 51, 106, 172, 57, 220, 111, 40, 190, 32, 39, 91, 190, 152, 5, 211, 186, 57, 93, 91, 189, 240, 185, 195, 61, 120, 36, 47, 62, 18, 40, 166, 62, 145, 164, 72, 190, 42, 107, 251, 190, 92, 66, 133, 60, 71, 213, 9, 62, 150, 3, 121, 62, 26, 189, 107, 61, 166, 219, 138, 188, 251, 101, 25, 189, 197, 243, 143, 190, 173, 9, 166, 61, 17, 122, 90, 190, 229, 66, 131, 61, 6, 238, 68, 190, 80, 197, 109, 189, 59, 28, 179, 62, 34, 122, 135, 61, 215, 197, 80, 191, 172, 250, 119, 61, 21, 248, 13, 62, 22, 121, 154, 190, 136, 245, 109, 191, 77, 104, 67, 61, 118, 237, 112, 62, 146, 196, 48, 190, 205, 204, 139, 62, 108, 167, 1, 190, 53, 135, 209, 190, 8, 185, 188, 190, 20, 73, 4, 61, 88, 193, 242, 60, 92, 135, 252, 61, 12, 63, 213, 62, 103, 134, 109, 61, 224, 72, 142, 190, 181, 110, 24, 190, 96, 177, 174, 189, 15, 255, 120, 189, 164, 181, 137, 61, 227, 144, 200, 186, 172, 234, 232, 61, 217, 218, 154, 190, 235, 195, 204, 189, 181, 18, 185, 189, 120, 253, 36, 62, 151, 68, 83, 62, 131, 128, 181, 186, 62, 247, 69, 191, 187, 248, 170, 189, 214, 132, 225, 62, 225, 79, 102, 62, 241, 1, 72, 62, 229, 207, 223, 61, 51, 237, 189, 62, 114, 48, 163, 61, 11, 179, 125, 190, 28, 112, 81, 189, 145, 25, 49, 190, 222, 82, 144, 62, 161, 148, 136, 62, 50, 90, 128, 62, 244, 153, 22, 190, 248, 109, 225, 189, 170, 82, 237, 61, 132, 104, 129, 62, 27, 189, 124, 61, 155, 98, 28, 62, 150, 111, 19, 62, 11, 8, 24, 61, 136, 109, 60, 62, 58, 44, 34, 188, 195, 114, 94, 190, 243, 237, 193, 60, 29, 199, 34, 190, 37, 205, 106, 190, 74, 248, 15, 62, 182, 118, 212, 61, 186, 242, 133, 62, 136, 217, 202, 62, 230, 214, 39, 191, 230, 71, 114, 191, 198, 199, 221, 62, 250, 155, 162, 62, 254, 100, 146, 189, 41, 124, 237, 188, 93, 231, 226, 62, 137, 255, 9, 63, 226, 90, 226, 189, 108, 4, 17, 62, 23, 25, 69, 190, 162, 126, 56, 62, 79, 135, 112, 62, 51, 156, 100, 61, 79, 217, 229, 189, 66, 211, 152, 190, 30, 86, 17, 190, 110, 187, 141, 190, 214, 123, 20, 190, 16, 30, 107, 62, 238, 240, 160, 61, 174, 158, 76, 190, 187, 7, 204, 61, 52, 211, 189, 61, 228, 156, 156, 190, 135, 195, 48, 190, 121, 17, 73, 62, 104, 148, 66, 190, 79, 14, 156, 62, 77, 123, 12, 189, 112, 229, 31, 62, 212, 172, 105, 62, 103, 239, 40, 191, 95, 219, 77, 191, 144, 52, 233, 62, 115, 108, 20, 190, 163, 204, 49, 189, 76, 193, 40, 62, 251, 140, 233, 62, 194, 111, 211, 62, 110, 55, 67, 190, 227, 168, 140, 60, 180, 20, 151, 190, 141, 64, 171, 62, 209, 253, 0, 62, 191, 221, 166, 62, 212, 236, 133, 61, 170, 55, 97, 191, 207, 1, 184, 190, 124, 65, 140, 190, 162, 230, 22, 190, 183, 226, 176, 61, 169, 141, 242, 190, 220, 37, 35, 186, 98, 247, 42, 61, 127, 203, 170, 62, 24, 250, 205, 189, 111, 187, 68, 188, 172, 82, 9, 190, 96, 61, 216, 188, 146, 193, 85, 190, 243, 8, 20, 190, 112, 85, 13, 191, 39, 79, 86, 190, 90, 139, 51, 62, 16, 128, 65, 190, 64, 212, 23, 191, 53, 83, 211, 189, 83, 32, 102, 61, 210, 111, 74, 62, 35, 7, 133, 191, 251, 54, 146, 189, 55, 17, 58, 62, 201, 74, 255, 189, 220, 158, 43, 62, 158, 5, 129, 62, 89, 194, 186, 189, 57, 234, 82, 190, 1, 199, 38, 61, 116, 173, 148, 61, 14, 46, 128, 62, 181, 108, 27, 63, 89, 69, 177, 190, 248, 147, 59, 62, 58, 137, 220, 189, 242, 125, 34, 189, 199, 239, 20, 191, 14, 200, 222, 62, 46, 50, 224, 62, 223, 33, 116, 62, 39, 249, 182, 62, 24, 217, 109, 188, 49, 63, 0, 191, 192, 195, 163, 61, 120, 92, 97, 190, 231, 202, 160, 190, 78, 178, 192, 62, 85, 229, 27, 62, 150, 117, 25, 191, 4, 146, 93, 61, 203, 135, 59, 62, 146, 191, 190, 60, 81, 23, 192, 190, 228, 145, 69, 190, 217, 196, 231, 188, 12, 189, 14, 191, 57, 224, 7, 63, 188, 89, 211, 190, 77, 123, 175, 191, 22, 174, 149, 191, 45, 134, 238, 188, 24, 243, 35, 62, 174, 217, 190, 61, 194, 237, 38, 61, 235, 237, 135, 190, 67, 50, 7, 190, 21, 45, 246, 189, 42, 52, 246, 187, 134, 9, 175, 61, 27, 113, 134, 61, 236, 157, 124, 191, 68, 228, 108, 190, 90, 203, 63, 62, 68, 231, 212, 190, 141, 128, 154, 61, 226, 241, 85, 190, 94, 41, 180, 61, 205, 90, 152, 188, 49, 182, 189, 190, 113, 136, 62, 190, 170, 192, 227, 61, 197, 143, 146, 190, 112, 11, 133, 190, 150, 151, 168, 188, 91, 252, 90, 190, 169, 64, 184, 189, 190, 151, 23, 189, 127, 147, 64, 62, 43, 36, 1, 189, 142, 29, 250, 61, 35, 58, 147, 61, 209, 239, 155, 62, 211, 23, 24, 62, 246, 61, 114, 191, 16, 143, 124, 190, 225, 208, 142, 191, 70, 48, 42, 61, 32, 62, 157, 190, 57, 50, 147, 190, 40, 94, 232, 189, 160, 222, 40, 190, 71, 110, 79, 62, 34, 225, 194, 62, 16, 118, 221, 189, 111, 94, 63, 190, 175, 195, 123, 190, 66, 17, 0, 190, 215, 198, 205, 188, 236, 210, 170, 190, 255, 53, 165, 61, 227, 238, 22, 63, 31, 241, 171, 189, 218, 197, 32, 191, 217, 1, 39, 62, 221, 45, 175, 62, 197, 166, 165, 189, 210, 223, 81, 190, 218, 153, 125, 61, 73, 41, 127, 61, 70, 61, 94, 188, 137, 201, 155, 61, 120, 232, 152, 189, 174, 47, 111, 61, 104, 100, 247, 59, 148, 199, 121, 191, 241, 220, 13, 187, 48, 199, 219, 62, 54, 162, 85, 62, 253, 168, 212, 62, 61, 232, 59, 62, 165, 4, 83, 61, 121, 113, 161, 61, 102, 172, 228, 60, 163, 225, 106, 188, 203, 130, 122, 187, 161, 80, 9, 63, 232, 84, 139, 62, 249, 158, 210, 191, 252, 216, 56, 62, 241, 147, 37, 62, 209, 1, 102, 62, 149, 244, 2, 190, 31, 220, 27, 190, 123, 89, 133, 190, 212, 148, 40, 63, 186, 135, 114, 189, 4, 197, 233, 61, 147, 100, 19, 62, 145, 141, 34, 63, 39, 169, 68, 63, 76, 62, 189, 61, 185, 246, 222, 190, 209, 105, 65, 190, 96, 59, 121, 61, 254, 29, 203, 190, 234, 36, 85, 189, 225, 242, 231, 62, 33, 18, 64, 191, 64, 115, 70, 62, 56, 104, 184, 190, 254, 18, 157, 61, 227, 50, 174, 62, 43, 166, 43, 62, 48, 241, 211, 61, 66, 2, 65, 62, 120, 124, 156, 59, 162, 215, 143, 190, 195, 153, 3, 61, 49, 87, 59, 189, 175, 166, 184, 190, 186, 189, 132, 62, 36, 184, 3, 61, 5, 218, 49, 62, 222, 254, 37, 62, 188, 109, 10, 191, 175, 179, 16, 191, 208, 208, 139, 62, 21, 124, 132, 190, 246, 51, 197, 189, 111, 63, 242, 61, 90, 127, 28, 63, 29, 92, 63, 188, 212, 5, 177, 190, 184, 198, 7, 62, 31, 73, 188, 189, 228, 175, 90, 62, 183, 46, 74, 62, 192, 131, 47, 62, 204, 209, 236, 61, 198, 142, 222, 190, 159, 3, 235, 190, 27, 27, 194, 190, 103, 65, 157, 190, 11, 227, 103, 61, 216, 229, 37, 191, 15, 168, 225, 189, 175, 176, 176, 61, 50, 203, 166, 62, 150, 156, 113, 60, 47, 139, 178, 60, 211, 37, 167, 62, 62, 6, 144, 189, 85, 144, 58, 191, 151, 42, 203, 60, 218, 49, 36, 190, 67, 173, 91, 62, 176, 241, 121, 62, 30, 200, 65, 62, 4, 31, 133, 189, 80, 69, 239, 188, 23, 224, 215, 188, 5, 209, 19, 188, 210, 223, 192, 190, 78, 4, 13, 191, 153, 102, 135, 62, 88, 59, 233, 190, 159, 72, 131, 62, 227, 224, 229, 190, 105, 54, 52, 191, 145, 253, 77, 191, 59, 19, 208, 62, 48, 196, 208, 61, 70, 232, 111, 62, 148, 114, 202, 190, 255, 101, 251, 61, 67, 65, 141, 189, 155, 87, 161, 190, 2, 174, 16, 62, 191, 233, 122, 62, 153, 60, 67, 191, 83, 132, 191, 190, 243, 72, 171, 190, 160, 110, 150, 60, 21, 69, 147, 190, 99, 36, 209, 61, 128, 118, 132, 190, 101, 216, 201, 58, 48, 197, 115, 189, 8, 163, 149, 190, 197, 217, 137, 189, 216, 116, 143, 61, 255, 22, 159, 60, 32, 11, 55, 191, 56, 151, 143, 190, 224, 200, 80, 188, 208, 62, 173, 189, 215, 148, 86, 62, 167, 138, 165, 188, 206, 142, 40, 191, 119, 155, 207, 61, 47, 92, 171, 189, 227, 219, 12, 62, 65, 179, 183, 62, 237, 82, 201, 190, 183, 149, 86, 59, 1, 195, 140, 191, 101, 17, 66, 190, 10, 12, 227, 189, 132, 35, 166, 190, 163, 19, 23, 62, 253, 229, 107, 190, 95, 226, 183, 62, 67, 123, 29, 191, 35, 98, 114, 62, 111, 92, 185, 61, 113, 121, 145, 59, 73, 185, 189, 190, 153, 215, 62, 61, 137, 55, 58, 61, 71, 95, 144, 188, 112, 137, 48, 191, 135, 138, 108, 190, 32, 175, 245, 189, 139, 108, 177, 61, 108, 177, 179, 190, 163, 69, 185, 188, 126, 193, 65, 60, 4, 220, 183, 61, 140, 81, 239, 61, 214, 133, 47, 190, 146, 83, 23, 62, 166, 214, 151, 190, 222, 49, 122, 188, 144, 207, 46, 62, 12, 127, 29, 190, 30, 138, 91, 62, 180, 246, 165, 62, 118, 146, 148, 190, 27, 104, 177, 189, 4, 243, 56, 190, 108, 212, 118, 190, 125, 211, 188, 60, 27, 146, 91, 62, 172, 71, 146, 189, 166, 247, 148, 190, 235, 212, 122, 62, 113, 252, 190, 190, 142, 11, 48, 62, 81, 132, 53, 191, 30, 177, 25, 190, 15, 194, 48, 190, 99, 225, 253, 190, 66, 81, 181, 190, 249, 149, 1, 191, 187, 41, 70, 61, 185, 247, 22, 189, 105, 117, 154, 189, 48, 26, 24, 191, 118, 128, 177, 190, 195, 246, 85, 61, 177, 169, 197, 189, 240, 243, 145, 61, 38, 90, 131, 187, 212, 153, 118, 62, 49, 164, 137, 61, 220, 7, 35, 190, 251, 78, 82, 190, 39, 96, 45, 62, 217, 128, 113, 62, 17, 62, 148, 62, 219, 155, 199, 190, 8, 84, 134, 190, 41, 42, 140, 61, 91, 206, 186, 61, 108, 239, 120, 189, 64, 81, 198, 60, 73, 224, 106, 189, 18, 153, 129, 189, 135, 176, 215, 61, 75, 23, 247, 61, 144, 63, 110, 62, 84, 221, 27, 60, 128, 80, 137, 189, 209, 70, 95, 62, 143, 253, 5, 190, 101, 174, 13, 191, 180, 202, 246, 189, 107, 115, 134, 189, 138, 127, 225, 189, 32, 41, 31, 62, 19, 45, 21, 191, 35, 227, 133, 190, 161, 86, 62, 190, 73, 148, 134, 62, 77, 194, 150, 189, 126, 242, 5, 189, 71, 100, 79, 62, 182, 194, 74, 62, 198, 129, 105, 190, 157, 154, 212, 190, 236, 24, 34, 189, 96, 159, 60, 62, 245, 90, 143, 188, 80, 187, 229, 190, 95, 41, 157, 60, 155, 22, 47, 62, 177, 221, 133, 190, 197, 234, 236, 62, 218, 93, 202, 61, 71, 235, 87, 190, 60, 178, 158, 190, 59, 15, 213, 190, 5, 167, 163, 187, 163, 4, 16, 62, 107, 217, 3, 191, 43, 205, 208, 61, 19, 105, 222, 62, 123, 46, 37, 62, 213, 222, 215, 190, 51, 143, 24, 190, 78, 6, 154, 187, 26, 89, 38, 60, 24, 200, 141, 189, 87, 78, 126, 190, 74, 211, 62, 62, 79, 24, 54, 190, 200, 85, 220, 61, 103, 179, 184, 60, 44, 252, 80, 62, 138, 165, 12, 188, 160, 254, 185, 191, 247, 72, 3, 190, 217, 86, 160, 62, 78, 1, 200, 61, 249, 172, 70, 190, 82, 152, 130, 190, 221, 4, 244, 190, 59, 253, 137, 189, 124, 79, 25, 62, 103, 179, 181, 62, 58, 111, 161, 61, 248, 98, 75, 61, 190, 5, 142, 190, 96, 22, 6, 61, 164, 175, 101, 190, 82, 4, 217, 189, 242, 162, 183, 190, 103, 62, 224, 189, 201, 208, 89, 189, 204, 65, 137, 190, 212, 42, 110, 191, 233, 125, 158, 187, 157, 178, 8, 62, 84, 114, 83, 190, 67, 207, 109, 191, 233, 89, 184, 189, 19, 62, 123, 62, 24, 140, 53, 190, 236, 50, 72, 62, 238, 69, 198, 189, 121, 94, 248, 61, 12, 226, 4, 190, 216, 24, 246, 58, 25, 172, 228, 189, 229, 120, 58, 62, 159, 254, 18, 63, 12, 13, 89, 190, 105, 171, 48, 190, 230, 86, 22, 190, 152, 47, 150, 60, 162, 238, 163, 189, 184, 174, 187, 62, 236, 123, 135, 62, 9, 224, 41, 190, 207, 43, 0, 62, 150, 111, 227, 61, 22, 50, 57, 190, 111, 186, 43, 189, 26, 165, 58, 190, 100, 64, 217, 189, 179, 207, 239, 62, 71, 81, 12, 190, 89, 110, 16, 191, 55, 194, 27, 189, 147, 104, 178, 62, 160, 90, 170, 61, 156, 53, 8, 191, 0, 227, 141, 189, 80, 248, 40, 189, 186, 235, 144, 188, 225, 129, 31, 62, 27, 191, 84, 190, 62, 204, 25, 190, 59, 138, 195, 60, 34, 188, 99, 191, 45, 11, 206, 61, 242, 10, 234, 62, 84, 158, 61, 62, 240, 202, 72, 62, 99, 140, 215, 190, 218, 104, 125, 189, 110, 17, 208, 189, 38, 132, 64, 62, 8, 39, 7, 62, 7, 128, 18, 189, 50, 191, 165, 189, 12, 28, 89, 61, 175, 107, 10, 190, 88, 233, 40, 62, 9, 104, 14, 62, 101, 250, 199, 189, 133, 61, 62, 61, 38, 230, 77, 191, 2, 97, 65, 191, 231, 148, 126, 62, 145, 28, 131, 189, 147, 87, 139, 190, 43, 111, 94, 189, 188, 10, 201, 62, 144, 92, 156, 62, 144, 208, 127, 190, 232, 108, 82, 62, 210, 95, 8, 190, 147, 196, 136, 62, 237, 194, 124, 62, 52, 183, 60, 62, 235, 138, 154, 189, 168, 88, 100, 190, 89, 55, 243, 61, 12, 185, 176, 58, 119, 9, 37, 62, 120, 185, 35, 60, 57, 71, 197, 190, 5, 255, 243, 60, 88, 164, 90, 191, 186, 218, 112, 189, 216, 129, 49, 190, 251, 153, 48, 61, 203, 238, 128, 61, 199, 154, 163, 189, 7, 165, 35, 191, 14, 74, 173, 61, 2, 77, 229, 61, 238, 239, 28, 190, 212, 49, 227, 62, 228, 57, 243, 189, 89, 139, 16, 62, 177, 111, 23, 62, 173, 157, 57, 62, 127, 42, 233, 61, 208, 199, 174, 189, 163, 169, 136, 62, 189, 26, 85, 62, 42, 165, 222, 188, 199, 28, 234, 61, 253, 109, 47, 190, 133, 126, 220, 188, 189, 24, 135, 189, 250, 119, 15, 190, 114, 79, 167, 62, 246, 14, 101, 62, 237, 177, 78, 191, 58, 125, 200, 189, 76, 163, 221, 61, 123, 95, 102, 191, 69, 26, 202, 60, 129, 243, 235, 62, 63, 50, 118, 191, 26, 234, 167, 188, 97, 45, 151, 190, 117, 59, 198, 189, 236, 251, 104, 62, 120, 181, 194, 189, 8, 240, 14, 191, 179, 206, 153, 190, 224, 77, 145, 61, 142, 102, 9, 190, 204, 39, 7, 190, 218, 143, 201, 190, 232, 219, 43, 190, 87, 251, 193, 189, 66, 102, 93, 190, 55, 89, 56, 190, 35, 40, 13, 190, 57, 99, 13, 62, 59, 96, 98, 190, 250, 250, 201, 190, 42, 53, 161, 61, 233, 118, 153, 190, 20, 170, 171, 190, 34, 121, 223, 62, 249, 52, 168, 62, 142, 158, 105, 62, 235, 131, 199, 62, 204, 167, 47, 190, 178, 169, 154, 60, 171, 99, 176, 187, 187, 35, 114, 189, 174, 101, 200, 61, 218, 93, 228, 62, 79, 239, 196, 188, 42, 247, 169, 62, 159, 94, 180, 61, 52, 109, 239, 189, 175, 43, 10, 62, 240, 86, 24, 62, 116, 27, 118, 190, 33, 69, 33, 190, 170, 108, 185, 190, 214, 196, 150, 191, 180, 232, 165, 190, 233, 1, 232, 61, 141, 144, 175, 60, 4, 209, 133, 61, 227, 199, 36, 187, 154, 140, 34, 188, 216, 140, 14, 189, 78, 154, 24, 62, 249, 37, 109, 62, 253, 86, 116, 62, 101, 167, 123, 62, 134, 124, 52, 62, 123, 226, 144, 190, 50, 215, 247, 189, 205, 43, 89, 62, 159, 168, 51, 190, 145, 61, 159, 62, 123, 7, 128, 62, 248, 217, 152, 60, 250, 176, 218, 189, 163, 13, 151, 61, 17, 133, 154, 61, 37, 221, 153, 190, 236, 94, 23, 189, 160, 13, 181, 189, 238, 220, 138, 190, 201, 98, 153, 62, 158, 186, 105, 62, 182, 183, 218, 61, 15, 130, 86, 62, 210, 171, 96, 191, 96, 231, 100, 191, 156, 25, 232, 62, 241, 123, 57, 62, 177, 139, 47, 189, 50, 144, 36, 62, 73, 104, 2, 63, 11, 158, 146, 62, 188, 114, 147, 61, 48, 42, 25, 62, 141, 185, 179, 190, 39, 99, 56, 62, 157, 15, 57, 62, 108, 255, 79, 62, 159, 154, 129, 188, 220, 86, 202, 190, 43, 66, 69, 190, 180, 247, 154, 190, 255, 134, 164, 189, 231, 12, 114, 62, 20, 157, 212, 190, 112, 198, 48, 62, 88, 225, 80, 62, 214, 248, 195, 62, 120, 196, 4, 191, 175, 188, 232, 61, 14, 141, 50, 62, 220, 164, 30, 190, 184, 134, 153, 190, 18, 23, 149, 61, 61, 6, 139, 190, 115, 157, 82, 62, 118, 33, 132, 62, 245, 9, 162, 190, 138, 218, 201, 190, 47, 88, 66, 62, 124, 202, 212, 61, 47, 39, 56, 62, 111, 132, 90, 191, 101, 144, 252, 61, 89, 217, 152, 188, 32, 225, 202, 189, 171, 224, 244, 62, 137, 96, 162, 190, 72, 204, 134, 189, 93, 179, 77, 62, 245, 240, 236, 190, 186, 8, 37, 190, 143, 162, 191, 60, 101, 25, 92, 61, 137, 108, 225, 189, 80, 227, 3, 62, 86, 153, 143, 190, 176, 218, 99, 61, 237, 29, 0, 189, 5, 8, 49, 62, 80, 243, 134, 61, 177, 210, 217, 188, 35, 231, 120, 62, 172, 255, 21, 61, 106, 107, 174, 189, 86, 11, 163, 61, 43, 202, 77, 190, 64, 70, 186, 188, 31, 87, 41, 62, 203, 203, 118, 189, 72, 34, 10, 191, 154, 26, 131, 189, 197, 40, 23, 62, 163, 55, 16, 62, 19, 116, 137, 191, 211, 230, 79, 189, 134, 128, 38, 62, 241, 144, 239, 189, 19, 23, 194, 62, 123, 108, 85, 189, 132, 11, 240, 189, 251, 215, 208, 188, 245, 189, 160, 191, 229, 137, 232, 189, 153, 209, 134, 62, 179, 76, 2, 63, 205, 239, 198, 188, 194, 2, 14, 190, 57, 35, 68, 190, 208, 227, 8, 188, 238, 148, 169, 61, 153, 7, 49, 61, 229, 244, 121, 62, 75, 111, 86, 190, 152, 200, 224, 189, 159, 29, 107, 60, 46, 235, 90, 190, 108, 126, 251, 189, 158, 239, 141, 190, 165, 170, 23, 189, 187, 6, 182, 62, 37, 241, 185, 188, 143, 50, 78, 191, 86, 179, 28, 61, 169, 158, 17, 61, 220, 232, 98, 189, 194, 102, 67, 191, 56, 175, 212, 189, 138, 22, 34, 62, 189, 133, 120, 190, 127, 0, 150, 190, 244, 10, 188, 188, 106, 156, 244, 190, 215, 27, 41, 190, 103, 186, 255, 189, 162, 252, 207, 61, 126, 58, 253, 61, 48, 251, 31, 63, 2, 46, 190, 190, 215, 89, 176, 62, 32, 165, 72, 191, 62, 144, 78, 61, 190, 55, 145, 62, 153, 209, 194, 62, 239, 229, 143, 62, 81, 57, 211, 190, 152, 97, 168, 62, 190, 245, 130, 62, 248, 197, 16, 190, 12, 17, 173, 190, 213, 82, 148, 190, 182, 12, 141, 62, 98, 13, 182, 62, 71, 126, 107, 62, 19, 124, 70, 190, 32, 197, 152, 190, 186, 121, 126, 62, 250, 124, 18, 62, 136, 236, 185, 190, 236, 90, 182, 190, 159, 126, 17, 62, 132, 207, 58, 189, 64, 141, 81, 61, 165, 85, 33, 191, 170, 125, 226, 189, 68, 104, 78, 190, 2, 7, 249, 61, 108, 64, 178, 62, 177, 229, 194, 62, 205, 224, 135, 62, 95, 48, 198, 190, 23, 190, 142, 60, 252, 243, 48, 191, 21, 123, 237, 189, 77, 104, 121, 190, 112, 84, 213, 62, 29, 208, 166, 189, 77, 116, 141, 62, 76, 249, 184, 60, 163, 242, 77, 190, 58, 124, 83, 191, 242, 238, 173, 60, 153, 112, 210, 189, 222, 28, 25, 61, 187, 232, 85, 62, 139, 173, 4, 190, 170, 66, 111, 190, 51, 145, 146, 189, 187, 242, 20, 62, 73, 117, 133, 62, 118, 7, 252, 188, 245, 223, 136, 190, 222, 127, 82, 62, 144, 196, 44, 191, 235, 247, 109, 62, 172, 21, 3, 191, 233, 107, 131, 191, 203, 69, 112, 191, 13, 26, 11, 62, 228, 180, 225, 61, 113, 191, 117, 62, 251, 108, 216, 190, 201, 155, 126, 59, 164, 198, 39, 190, 185, 228, 27, 190, 56, 207, 86, 188, 157, 187, 36, 62, 183, 180, 219, 60, 18, 96, 46, 60, 222, 201, 155, 61, 146, 133, 221, 189, 16, 168, 59, 62, 17, 77, 223, 189, 238, 216, 199, 61, 11, 30, 196, 189, 164, 29, 2, 62, 239, 188, 5, 190, 102, 223, 246, 62, 128, 27, 230, 190, 163, 159, 4, 190, 110, 233, 69, 61, 12, 181, 218, 61, 206, 202, 54, 60, 25, 244, 25, 190, 193, 22, 145, 189, 158, 6, 11, 62, 120, 59, 18, 62, 157, 156, 141, 189, 32, 60, 252, 188, 57, 233, 212, 61, 252, 237, 246, 61, 31, 22, 41, 62, 180, 149, 4, 62, 204, 110, 213, 62, 44, 227, 10, 61, 205, 118, 14, 61, 189, 217, 62, 62, 180, 90, 10, 62, 129, 123, 62, 62, 33, 56, 206, 61, 251, 119, 176, 189, 203, 4, 155, 62, 98, 164, 138, 188, 93, 223, 227, 189, 169, 53, 194, 61, 162, 38, 146, 61, 135, 191, 37, 190, 83, 28, 48, 61, 74, 56, 152, 190, 12, 149, 177, 191, 45, 173, 184, 187, 54, 157, 1, 62, 38, 180, 30, 60, 15, 220, 18, 62, 164, 133, 174, 188, 108, 11, 107, 61, 67, 196, 15, 190, 145, 7, 7, 62, 2, 240, 177, 189, 194, 61, 66, 61, 80, 240, 128, 61, 202, 96, 155, 61, 85, 234, 91, 189, 71, 48, 185, 189, 143, 172, 143, 61, 122, 215, 253, 189};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {192, 168, 244, 58, 52, 70, 215, 62, 113, 207, 103, 189, 83, 80, 23, 189, 58, 241, 109, 62, 191, 112, 41, 62, 161, 106, 151, 61, 214, 197, 12, 190, 250, 156, 158, 62, 117, 18, 214, 187, 50, 226, 76, 61, 79, 213, 8, 62, 141, 44, 156, 60, 78, 85, 5, 62, 108, 57, 196, 61, 248, 101, 170, 61, 204, 145, 153, 62, 71, 134, 200, 190, 8, 28, 126, 62, 118, 76, 127, 61, 130, 140, 234, 60, 99, 54, 120, 188, 21, 108, 34, 62, 97, 48, 213, 62, 249, 208, 58, 61, 52, 19, 187, 60, 204, 112, 110, 62, 147, 194, 5, 62, 192, 198, 146, 62, 197, 229, 240, 61, 81, 31, 98, 62, 58, 99, 190, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {238, 148, 255, 189, 120, 114, 11, 63, 171, 203, 231, 62, 162, 147, 6, 191, 218, 14, 23, 191, 190, 73, 58, 191, 152, 92, 148, 62, 46, 178, 129, 191, 117, 126, 24, 191, 207, 78, 93, 63, 235, 68, 147, 190, 12, 153, 183, 190, 200, 12, 129, 191, 150, 179, 70, 191, 93, 37, 123, 189, 220, 237, 118, 190, 75, 180, 37, 61, 109, 224, 31, 63, 49, 80, 81, 63, 78, 104, 210, 62, 54, 32, 224, 190, 145, 44, 176, 190, 69, 181, 128, 63, 228, 105, 179, 189, 77, 135, 20, 191, 51, 50, 238, 62, 42, 66, 253, 62, 183, 224, 192, 62, 239, 114, 65, 63, 223, 36, 157, 191, 252, 128, 255, 60, 236, 242, 98, 188, 95, 157, 105, 189, 102, 70, 13, 189, 54, 67, 199, 187, 75, 101, 163, 189, 181, 6, 29, 189, 241, 27, 119, 61, 121, 248, 93, 62, 198, 227, 153, 61, 175, 171, 244, 190, 109, 238, 173, 62, 88, 148, 37, 189, 41, 147, 95, 62, 37, 16, 55, 61, 255, 194, 251, 189, 217, 255, 211, 190, 161, 190, 239, 61, 222, 43, 141, 190, 243, 221, 160, 62, 50, 136, 90, 62, 189, 241, 140, 61, 224, 118, 58, 190, 199, 37, 224, 60, 113, 96, 163, 60, 218, 240, 241, 190, 79, 81, 101, 62, 101, 234, 71, 188, 55, 60, 129, 189, 174, 249, 37, 190, 151, 128, 182, 188, 154, 63, 197, 61, 47, 125, 67, 190, 147, 78, 36, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {39, 155, 229, 61, 30, 203, 200, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {164, 146, 166, 63, 192, 31, 27, 192, 169, 68, 33, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {73, 222, 38, 192, 245, 80, 26, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0051/steps/000000000014000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}