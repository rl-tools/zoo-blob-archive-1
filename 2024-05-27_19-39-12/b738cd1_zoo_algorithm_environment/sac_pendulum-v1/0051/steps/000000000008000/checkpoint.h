// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {114, 186, 233, 62, 230, 159, 60, 190, 75, 237, 253, 62, 36, 248, 20, 190, 255, 225, 73, 191, 250, 149, 202, 189, 122, 58, 12, 191, 3, 189, 14, 60, 139, 27, 86, 191, 145, 92, 141, 62, 142, 136, 129, 62, 186, 232, 146, 59, 56, 26, 167, 190, 165, 85, 219, 62, 15, 44, 3, 190, 76, 214, 41, 63, 235, 111, 235, 61, 121, 190, 93, 190, 113, 149, 36, 62, 90, 121, 1, 62, 133, 209, 49, 191, 171, 116, 97, 62, 77, 176, 228, 190, 243, 38, 25, 62, 74, 226, 35, 61, 76, 182, 75, 191, 94, 210, 102, 190, 175, 237, 155, 62, 103, 228, 109, 63, 176, 142, 16, 63, 184, 243, 7, 191, 240, 95, 223, 189, 127, 212, 18, 191, 255, 142, 196, 61, 126, 214, 178, 61, 15, 90, 57, 191, 120, 118, 9, 63, 145, 185, 61, 63, 74, 219, 166, 62, 217, 175, 177, 189, 27, 194, 216, 62, 158, 139, 176, 60, 18, 104, 46, 63, 109, 220, 114, 191, 106, 244, 219, 190, 3, 142, 250, 62, 48, 185, 73, 63, 79, 92, 84, 62, 33, 167, 27, 63, 6, 32, 123, 63, 245, 0, 128, 62, 106, 25, 94, 61, 5, 206, 54, 191, 88, 221, 3, 63, 184, 240, 70, 62, 40, 115, 57, 190, 52, 20, 0, 191, 207, 55, 250, 61, 16, 44, 56, 191, 94, 234, 161, 190, 71, 29, 204, 62, 209, 87, 157, 63, 54, 97, 192, 61, 151, 197, 194, 62, 7, 111, 243, 190, 123, 85, 156, 62, 56, 122, 201, 189, 138, 208, 15, 62, 65, 215, 79, 63, 253, 159, 31, 63, 100, 10, 12, 63, 174, 179, 255, 62, 156, 170, 18, 63, 151, 11, 58, 191, 123, 92, 243, 189, 162, 121, 179, 190, 144, 51, 59, 63, 248, 209, 209, 190, 29, 212, 42, 63, 199, 174, 73, 63, 125, 138, 43, 62, 174, 30, 109, 63, 191, 176, 49, 63, 104, 173, 190, 62, 51, 15, 153, 190, 181, 80, 151, 63, 192, 52, 118, 62, 220, 41, 226, 190, 219, 207, 206, 189, 159, 87, 35, 63, 153, 216, 162, 61, 124, 11, 98, 191, 233, 18, 161, 62, 226, 155, 144, 189, 116, 55, 163, 63, 245, 83, 148, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {0, 1, 29, 191, 139, 122, 158, 61, 241, 18, 113, 188, 232, 47, 208, 190, 64, 14, 236, 62, 198, 52, 175, 62, 189, 110, 208, 190, 102, 190, 3, 190, 210, 123, 234, 62, 114, 133, 59, 62, 44, 191, 249, 61, 242, 219, 12, 63, 169, 100, 12, 190, 35, 85, 170, 190, 130, 190, 231, 190, 235, 156, 26, 191, 40, 130, 201, 189, 100, 48, 126, 190, 78, 158, 158, 59, 241, 123, 7, 63, 196, 28, 11, 191, 13, 189, 8, 191, 240, 65, 5, 62, 43, 30, 245, 189, 13, 247, 135, 62, 34, 224, 128, 62, 157, 58, 60, 62, 81, 102, 79, 62, 78, 153, 3, 63, 28, 136, 37, 191, 250, 47, 235, 61, 154, 185, 40, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {155, 105, 114, 60, 113, 30, 144, 189, 53, 122, 27, 62, 13, 254, 122, 61, 48, 69, 152, 188, 14, 131, 10, 188, 63, 134, 79, 190, 252, 59, 91, 62, 96, 139, 180, 61, 114, 195, 65, 190, 22, 159, 43, 62, 84, 118, 234, 61, 189, 81, 159, 61, 48, 252, 93, 62, 99, 156, 116, 190, 66, 39, 249, 190, 157, 203, 245, 61, 94, 98, 69, 188, 20, 249, 203, 189, 229, 154, 141, 189, 154, 197, 27, 62, 32, 144, 185, 188, 72, 117, 171, 61, 28, 35, 73, 61, 18, 162, 3, 190, 29, 126, 197, 61, 221, 78, 88, 62, 36, 227, 35, 62, 6, 205, 76, 61, 159, 241, 156, 190, 28, 24, 197, 184, 78, 190, 38, 190, 224, 122, 69, 190, 69, 77, 226, 61, 199, 134, 2, 190, 101, 94, 8, 62, 117, 5, 158, 188, 197, 67, 106, 61, 154, 27, 41, 190, 148, 26, 242, 189, 192, 43, 51, 62, 248, 254, 170, 59, 157, 80, 185, 61, 66, 117, 6, 189, 227, 61, 142, 189, 208, 11, 152, 62, 41, 214, 150, 188, 215, 21, 243, 189, 140, 16, 218, 190, 72, 193, 41, 189, 28, 102, 227, 189, 211, 176, 49, 61, 233, 28, 12, 191, 67, 57, 70, 190, 178, 20, 126, 62, 46, 233, 114, 190, 170, 175, 70, 60, 29, 174, 1, 190, 10, 161, 103, 190, 51, 152, 54, 189, 146, 141, 68, 60, 159, 85, 81, 62, 112, 208, 18, 62, 15, 84, 194, 62, 56, 1, 116, 190, 196, 239, 255, 190, 94, 148, 160, 60, 71, 213, 9, 62, 193, 133, 121, 62, 82, 17, 93, 61, 60, 151, 5, 189, 156, 235, 147, 189, 102, 177, 139, 190, 34, 223, 165, 61, 41, 233, 96, 190, 204, 0, 153, 61, 196, 133, 243, 189, 18, 114, 67, 60, 148, 115, 46, 62, 232, 63, 117, 189, 95, 246, 34, 191, 132, 231, 78, 61, 175, 176, 19, 62, 215, 28, 155, 190, 3, 91, 33, 191, 180, 251, 147, 188, 139, 217, 85, 62, 225, 209, 29, 190, 29, 153, 115, 62, 69, 135, 1, 190, 211, 177, 105, 190, 2, 108, 168, 190, 251, 26, 3, 61, 87, 187, 58, 60, 69, 60, 240, 61, 51, 148, 225, 62, 231, 113, 133, 60, 50, 157, 37, 190, 249, 67, 41, 190, 96, 177, 174, 189, 14, 159, 183, 189, 188, 126, 76, 61, 147, 8, 125, 60, 87, 151, 218, 61, 67, 140, 149, 190, 79, 243, 146, 189, 152, 222, 229, 189, 226, 254, 15, 62, 204, 13, 102, 62, 165, 123, 166, 61, 135, 52, 31, 191, 49, 242, 138, 58, 124, 38, 227, 62, 76, 47, 104, 62, 147, 104, 66, 62, 68, 12, 253, 61, 109, 0, 148, 62, 71, 185, 255, 60, 37, 130, 76, 190, 128, 23, 2, 189, 44, 50, 41, 190, 97, 46, 110, 62, 201, 119, 120, 62, 36, 190, 125, 62, 143, 186, 3, 190, 239, 149, 206, 189, 172, 151, 154, 61, 148, 27, 86, 62, 136, 22, 25, 188, 51, 8, 88, 62, 33, 143, 30, 62, 11, 8, 24, 61, 233, 18, 92, 62, 17, 37, 215, 187, 104, 44, 62, 190, 149, 126, 17, 61, 199, 161, 243, 189, 101, 110, 98, 190, 234, 113, 28, 62, 4, 201, 209, 61, 131, 210, 121, 62, 113, 86, 187, 62, 196, 168, 9, 191, 151, 152, 68, 191, 92, 50, 201, 62, 247, 213, 160, 62, 236, 232, 147, 189, 68, 254, 50, 60, 229, 166, 106, 62, 33, 127, 243, 62, 43, 94, 177, 189, 155, 25, 26, 62, 42, 204, 57, 190, 139, 172, 56, 62, 63, 153, 69, 62, 198, 184, 80, 61, 216, 172, 7, 190, 107, 178, 170, 190, 68, 158, 240, 189, 8, 168, 134, 190, 171, 65, 67, 190, 56, 78, 152, 61, 139, 82, 161, 61, 174, 158, 76, 190, 138, 132, 214, 61, 245, 234, 155, 61, 195, 15, 140, 190, 100, 58, 30, 190, 4, 118, 32, 62, 243, 67, 45, 190, 152, 244, 153, 62, 245, 179, 16, 189, 102, 208, 32, 62, 117, 178, 132, 62, 73, 86, 25, 191, 87, 77, 34, 191, 132, 152, 221, 62, 83, 255, 198, 189, 209, 231, 94, 189, 126, 46, 17, 62, 141, 20, 48, 62, 45, 72, 118, 62, 236, 185, 87, 189, 70, 109, 217, 60, 12, 175, 165, 190, 224, 145, 174, 62, 57, 137, 175, 61, 239, 41, 160, 62, 184, 65, 222, 60, 189, 184, 237, 190, 202, 159, 160, 190, 190, 52, 101, 190, 101, 177, 7, 190, 109, 54, 214, 61, 206, 70, 253, 190, 220, 37, 35, 186, 172, 153, 2, 189, 54, 101, 156, 62, 12, 91, 229, 189, 190, 255, 81, 60, 113, 250, 24, 190, 249, 49, 10, 61, 90, 237, 133, 190, 113, 73, 19, 190, 199, 235, 200, 190, 155, 34, 49, 189, 51, 203, 36, 62, 93, 179, 86, 190, 78, 101, 196, 190, 203, 89, 237, 189, 249, 35, 89, 61, 112, 65, 52, 62, 151, 46, 13, 191, 202, 15, 159, 189, 72, 172, 74, 62, 202, 182, 218, 189, 109, 76, 26, 62, 159, 89, 114, 62, 8, 14, 142, 189, 204, 39, 97, 190, 81, 53, 201, 61, 179, 197, 17, 62, 255, 144, 143, 62, 248, 159, 23, 63, 115, 49, 142, 190, 117, 75, 239, 61, 200, 198, 180, 189, 242, 125, 34, 189, 118, 226, 201, 190, 130, 118, 133, 62, 198, 82, 218, 62, 10, 12, 158, 188, 190, 187, 135, 62, 204, 11, 25, 62, 52, 222, 240, 190, 72, 226, 97, 61, 118, 138, 50, 190, 90, 163, 68, 190, 3, 233, 147, 62, 85, 229, 27, 62, 212, 66, 74, 190, 20, 65, 62, 60, 249, 126, 29, 62, 111, 118, 124, 189, 99, 18, 17, 190, 72, 160, 116, 190, 216, 29, 88, 61, 213, 80, 139, 190, 112, 110, 164, 62, 217, 112, 210, 190, 68, 2, 1, 191, 116, 164, 215, 190, 81, 122, 96, 62, 114, 238, 129, 62, 40, 213, 183, 61, 220, 172, 226, 61, 228, 69, 140, 190, 48, 30, 140, 61, 115, 128, 3, 190, 42, 52, 246, 187, 204, 219, 159, 61, 3, 97, 5, 61, 177, 115, 227, 190, 208, 192, 129, 190, 160, 88, 41, 62, 167, 114, 231, 190, 107, 67, 147, 61, 209, 188, 84, 190, 31, 132, 155, 61, 197, 113, 138, 188, 6, 229, 210, 190, 102, 253, 112, 190, 210, 85, 196, 61, 130, 223, 66, 190, 1, 166, 131, 190, 188, 86, 8, 189, 21, 220, 125, 190, 25, 183, 68, 190, 5, 91, 174, 188, 187, 46, 33, 62, 81, 237, 131, 189, 89, 51, 145, 61, 218, 231, 79, 61, 24, 116, 142, 62, 25, 163, 21, 62, 253, 14, 63, 191, 8, 8, 154, 190, 185, 230, 93, 191, 178, 54, 155, 61, 2, 202, 214, 188, 44, 236, 146, 190, 40, 94, 232, 189, 156, 70, 227, 189, 231, 110, 212, 61, 70, 56, 140, 62, 22, 9, 2, 190, 144, 48, 33, 189, 200, 6, 125, 190, 169, 145, 199, 189, 210, 6, 187, 188, 58, 87, 90, 190, 71, 25, 4, 189, 240, 231, 2, 63, 164, 170, 138, 189, 204, 240, 3, 191, 164, 24, 242, 61, 143, 108, 160, 62, 48, 163, 27, 60, 37, 36, 49, 189, 1, 130, 135, 61, 222, 202, 74, 60, 97, 60, 147, 189, 39, 60, 13, 62, 230, 120, 203, 189, 120, 248, 246, 188, 180, 95, 34, 190, 114, 36, 50, 191, 187, 195, 174, 61, 107, 6, 190, 62, 119, 39, 223, 61, 43, 252, 35, 62, 68, 241, 48, 62, 129, 236, 155, 61, 121, 113, 161, 61, 92, 163, 37, 61, 85, 179, 201, 189, 27, 191, 165, 60, 162, 22, 65, 62, 146, 85, 132, 62, 130, 54, 129, 191, 19, 237, 87, 62, 40, 63, 25, 62, 25, 189, 8, 190, 205, 31, 103, 189, 159, 80, 70, 189, 132, 51, 241, 189, 106, 36, 200, 62, 104, 77, 59, 190, 41, 122, 229, 61, 1, 106, 1, 62, 136, 161, 140, 62, 30, 227, 226, 62, 26, 147, 25, 62, 128, 25, 177, 189, 42, 178, 150, 190, 188, 229, 94, 61, 176, 116, 10, 191, 8, 12, 242, 189, 167, 135, 177, 62, 118, 179, 55, 191, 194, 118, 76, 62, 108, 128, 193, 190, 0, 111, 255, 61, 23, 168, 79, 62, 92, 99, 49, 62, 48, 241, 211, 61, 189, 141, 75, 62, 158, 62, 143, 188, 243, 99, 124, 190, 236, 53, 207, 61, 121, 171, 158, 189, 220, 84, 172, 190, 232, 201, 135, 62, 193, 8, 194, 60, 212, 29, 46, 62, 211, 219, 38, 62, 40, 164, 243, 190, 196, 121, 173, 190, 242, 69, 117, 62, 84, 139, 32, 189, 151, 78, 239, 189, 131, 236, 200, 61, 120, 252, 151, 62, 169, 167, 226, 188, 133, 114, 36, 190, 55, 246, 29, 62, 201, 158, 247, 189, 179, 116, 100, 62, 141, 253, 26, 62, 180, 5, 33, 62, 64, 199, 153, 61, 8, 124, 220, 189, 37, 22, 178, 190, 3, 165, 169, 190, 120, 251, 45, 190, 125, 245, 161, 61, 29, 131, 199, 190, 15, 168, 225, 189, 135, 84, 113, 62, 85, 115, 138, 62, 88, 49, 233, 61, 233, 37, 73, 189, 242, 13, 152, 62, 209, 70, 165, 189, 54, 253, 219, 190, 227, 35, 206, 61, 244, 10, 128, 190, 133, 188, 53, 190, 87, 89, 9, 62, 229, 160, 75, 62, 155, 9, 133, 190, 159, 165, 192, 59, 88, 187, 187, 60, 227, 82, 44, 189, 65, 202, 253, 190, 78, 91, 218, 190, 236, 186, 140, 62, 183, 46, 147, 190, 199, 149, 218, 61, 73, 81, 194, 190, 148, 59, 155, 190, 174, 75, 205, 190, 186, 25, 148, 62, 197, 164, 200, 61, 225, 26, 100, 62, 122, 112, 229, 190, 244, 196, 220, 61, 177, 38, 10, 61, 59, 247, 165, 190, 2, 174, 16, 62, 24, 159, 138, 62, 202, 194, 13, 191, 83, 132, 191, 190, 224, 215, 151, 190, 61, 183, 226, 61, 84, 181, 163, 190, 146, 46, 12, 62, 14, 160, 106, 190, 254, 225, 141, 189, 208, 111, 228, 189, 8, 163, 149, 190, 129, 66, 248, 61, 161, 133, 207, 187, 185, 42, 118, 61, 250, 183, 45, 191, 169, 6, 56, 190, 89, 55, 177, 61, 191, 250, 115, 189, 122, 125, 72, 62, 59, 11, 181, 189, 30, 101, 22, 191, 66, 40, 241, 61, 15, 239, 41, 190, 25, 15, 143, 61, 96, 98, 168, 62, 167, 111, 224, 190, 160, 118, 181, 61, 36, 14, 123, 191, 69, 237, 90, 190, 238, 138, 30, 190, 211, 254, 159, 190, 163, 19, 23, 62, 213, 178, 197, 189, 133, 165, 232, 62, 41, 234, 104, 190, 40, 244, 21, 62, 183, 228, 155, 61, 96, 95, 91, 60, 89, 160, 194, 190, 218, 197, 89, 62, 204, 49, 162, 61, 90, 218, 91, 189, 237, 202, 24, 191, 116, 120, 96, 190, 152, 11, 102, 189, 36, 230, 90, 61, 82, 223, 176, 189, 57, 111, 78, 60, 121, 95, 54, 60, 186, 222, 101, 61, 158, 101, 194, 61, 191, 86, 53, 190, 98, 43, 31, 62, 225, 124, 42, 190, 247, 232, 87, 61, 134, 13, 89, 62, 179, 105, 186, 189, 123, 240, 67, 62, 39, 190, 104, 62, 248, 112, 141, 61, 178, 196, 222, 189, 75, 214, 30, 190, 146, 60, 99, 190, 125, 211, 188, 60, 94, 152, 98, 62, 216, 220, 54, 61, 186, 159, 33, 190, 247, 142, 91, 62, 220, 16, 134, 190, 217, 46, 83, 62, 129, 200, 66, 191, 74, 135, 137, 190, 26, 131, 191, 189, 101, 247, 100, 190, 156, 3, 148, 190, 68, 27, 89, 190, 117, 47, 28, 62, 117, 104, 117, 189, 172, 189, 18, 188, 12, 100, 173, 190, 61, 174, 9, 188, 155, 253, 101, 60, 36, 139, 172, 189, 76, 20, 233, 61, 244, 223, 170, 60, 26, 53, 139, 61, 239, 66, 31, 62, 221, 228, 217, 189, 232, 160, 3, 190, 208, 156, 53, 62, 175, 19, 77, 62, 87, 162, 130, 62, 50, 52, 3, 191, 245, 158, 91, 190, 135, 139, 174, 60, 91, 206, 186, 61, 221, 207, 244, 189, 40, 106, 161, 61, 106, 70, 228, 189, 208, 117, 249, 189, 189, 28, 17, 62, 36, 145, 61, 62, 129, 248, 55, 62, 12, 190, 39, 60, 83, 113, 192, 60, 68, 67, 1, 62, 238, 98, 2, 190, 167, 226, 28, 191, 193, 72, 65, 188, 13, 214, 245, 189, 114, 235, 209, 189, 217, 196, 60, 62, 178, 232, 10, 191, 42, 77, 205, 190, 3, 161, 131, 190, 242, 155, 140, 62, 171, 14, 22, 188, 214, 172, 175, 189, 143, 54, 128, 62, 204, 86, 125, 62, 206, 19, 108, 190, 193, 214, 55, 190, 31, 208, 212, 189, 62, 172, 7, 62, 124, 109, 71, 190, 206, 82, 199, 189, 228, 61, 18, 60, 155, 22, 47, 62, 83, 137, 65, 190, 162, 86, 192, 62, 175, 145, 157, 188, 74, 242, 144, 189, 181, 174, 253, 189, 162, 112, 185, 190, 120, 76, 126, 60, 186, 93, 247, 61, 109, 217, 194, 190, 13, 102, 51, 61, 66, 15, 166, 62, 123, 46, 37, 62, 62, 197, 180, 190, 33, 76, 125, 190, 255, 162, 77, 189, 35, 189, 255, 61, 82, 149, 108, 189, 208, 215, 251, 190, 211, 181, 131, 189, 162, 156, 140, 190, 143, 60, 89, 62, 238, 22, 118, 188, 143, 168, 228, 61, 131, 149, 9, 190, 157, 223, 152, 191, 79, 67, 161, 189, 165, 184, 209, 62, 90, 170, 234, 187, 188, 242, 54, 190, 15, 229, 141, 189, 246, 213, 219, 190, 59, 253, 137, 189, 217, 98, 22, 61, 120, 17, 156, 62, 46, 218, 158, 61, 67, 146, 163, 61, 82, 116, 57, 190, 66, 67, 151, 61, 19, 217, 64, 190, 19, 242, 171, 189, 91, 40, 85, 190, 84, 161, 28, 61, 56, 8, 51, 61, 211, 132, 116, 190, 160, 227, 60, 191, 134, 35, 120, 188, 10, 60, 53, 62, 48, 31, 4, 190, 240, 145, 5, 191, 122, 180, 231, 189, 140, 122, 128, 62, 222, 245, 70, 190, 9, 165, 87, 62, 62, 103, 3, 190, 52, 22, 95, 61, 0, 6, 112, 190, 31, 239, 218, 60, 191, 17, 124, 59, 132, 209, 128, 62, 30, 223, 9, 63, 9, 10, 70, 190, 138, 236, 178, 189, 227, 7, 32, 190, 152, 47, 150, 60, 180, 114, 42, 189, 91, 210, 168, 62, 226, 231, 50, 62, 84, 49, 42, 190, 16, 113, 36, 62, 183, 99, 27, 62, 181, 162, 50, 190, 201, 129, 128, 189, 215, 15, 31, 190, 28, 60, 81, 190, 47, 58, 194, 62, 77, 136, 12, 190, 60, 221, 8, 191, 36, 132, 128, 189, 250, 90, 159, 62, 18, 165, 180, 61, 93, 242, 152, 190, 39, 243, 145, 189, 129, 66, 85, 189, 15, 41, 47, 189, 81, 189, 29, 62, 27, 35, 94, 190, 37, 116, 51, 190, 159, 113, 27, 188, 218, 112, 58, 191, 83, 214, 68, 62, 77, 132, 228, 62, 232, 105, 245, 61, 125, 193, 94, 62, 22, 243, 159, 190, 98, 244, 133, 189, 110, 17, 208, 189, 46, 251, 15, 62, 8, 17, 255, 61, 150, 47, 140, 188, 208, 23, 144, 189, 89, 9, 159, 61, 195, 129, 187, 189, 45, 166, 32, 62, 15, 95, 17, 62, 130, 122, 95, 189, 126, 255, 185, 61, 15, 34, 35, 191, 0, 162, 8, 191, 46, 169, 136, 62, 141, 68, 31, 189, 32, 10, 135, 190, 221, 64, 216, 188, 127, 117, 138, 62, 246, 213, 153, 62, 205, 172, 54, 190, 242, 134, 123, 62, 208, 114, 235, 189, 41, 4, 105, 62, 7, 219, 105, 62, 219, 163, 67, 62, 222, 187, 215, 189, 43, 172, 0, 190, 63, 103, 146, 61, 137, 246, 50, 189, 40, 194, 248, 61, 238, 49, 72, 61, 209, 12, 106, 190, 5, 255, 243, 60, 242, 108, 2, 191, 227, 137, 22, 190, 178, 154, 235, 189, 202, 180, 160, 60, 7, 116, 251, 60, 52, 189, 11, 190, 23, 35, 231, 190, 60, 147, 65, 60, 29, 52, 66, 61, 99, 254, 10, 190, 14, 38, 161, 62, 50, 162, 23, 190, 152, 152, 128, 61, 153, 91, 16, 62, 147, 125, 185, 61, 232, 65, 184, 61, 194, 209, 162, 189, 58, 92, 109, 62, 59, 195, 74, 62, 240, 86, 54, 189, 124, 161, 254, 60, 50, 132, 215, 189, 83, 30, 131, 189, 112, 31, 178, 189, 101, 15, 21, 190, 137, 195, 136, 62, 130, 184, 60, 62, 60, 126, 186, 190, 68, 32, 1, 189, 124, 131, 130, 61, 8, 248, 133, 191, 69, 26, 202, 60, 200, 138, 140, 62, 140, 226, 220, 190, 60, 232, 167, 188, 228, 235, 93, 190, 157, 66, 38, 190, 152, 243, 101, 62, 109, 218, 98, 190, 201, 61, 240, 190, 83, 133, 144, 190, 36, 223, 78, 189, 142, 102, 9, 190, 154, 155, 46, 190, 108, 130, 193, 190, 62, 65, 11, 190, 39, 119, 224, 189, 20, 123, 159, 190, 83, 197, 99, 190, 70, 203, 47, 189, 219, 185, 228, 61, 208, 182, 75, 190, 61, 167, 137, 190, 49, 166, 186, 61, 20, 26, 117, 190, 78, 108, 145, 190, 164, 155, 172, 62, 47, 100, 157, 62, 216, 30, 135, 62, 149, 144, 189, 62, 68, 202, 48, 190, 164, 206, 61, 61, 77, 140, 22, 189, 187, 35, 114, 189, 167, 53, 52, 61, 159, 108, 225, 62, 134, 232, 117, 189, 88, 160, 85, 62, 128, 207, 178, 61, 49, 102, 143, 189, 84, 95, 212, 61, 38, 245, 10, 62, 225, 1, 56, 190, 240, 237, 203, 189, 186, 222, 154, 190, 17, 134, 119, 191, 132, 151, 109, 190, 118, 66, 199, 61, 209, 99, 117, 60, 36, 134, 147, 61, 170, 220, 135, 190, 84, 248, 8, 189, 198, 16, 21, 189, 100, 237, 7, 62, 219, 240, 115, 62, 60, 253, 59, 62, 144, 51, 125, 62, 75, 179, 84, 62, 181, 243, 149, 190, 215, 187, 132, 189, 112, 152, 249, 61, 87, 167, 110, 190, 216, 172, 116, 62, 7, 252, 139, 62, 7, 0, 39, 61, 250, 176, 218, 189, 44, 119, 219, 61, 93, 154, 130, 61, 47, 147, 132, 190, 147, 54, 243, 188, 125, 225, 137, 189, 153, 240, 140, 190, 235, 133, 165, 62, 190, 7, 101, 62, 240, 68, 144, 61, 231, 16, 47, 62, 230, 174, 70, 191, 117, 71, 66, 191, 8, 76, 198, 62, 141, 86, 47, 62, 149, 26, 65, 189, 58, 125, 61, 62, 103, 2, 136, 62, 184, 46, 90, 62, 201, 155, 175, 61, 88, 144, 31, 62, 72, 219, 183, 190, 94, 90, 64, 62, 221, 60, 245, 61, 63, 165, 58, 62, 155, 88, 113, 189, 70, 52, 227, 190, 62, 218, 46, 190, 110, 109, 143, 190, 27, 142, 23, 189, 194, 191, 31, 62, 215, 77, 165, 190, 112, 198, 48, 62, 30, 170, 252, 60, 188, 147, 192, 62, 204, 61, 235, 190, 160, 251, 229, 61, 25, 47, 30, 62, 44, 218, 221, 189, 169, 116, 121, 190, 167, 99, 163, 61, 58, 88, 121, 190, 115, 157, 82, 62, 102, 47, 164, 62, 224, 218, 133, 190, 113, 37, 185, 190, 212, 189, 29, 62, 117, 19, 23, 62, 41, 111, 31, 62, 183, 95, 15, 190, 141, 211, 19, 62, 178, 153, 74, 189, 219, 213, 236, 189, 201, 136, 242, 62, 155, 64, 12, 190, 78, 202, 176, 189, 36, 191, 51, 62, 134, 219, 221, 190, 6, 20, 107, 189, 115, 24, 182, 187, 46, 9, 88, 189, 110, 185, 129, 189, 43, 113, 153, 61, 18, 143, 162, 190, 176, 218, 99, 61, 155, 19, 43, 189, 224, 240, 35, 62, 1, 122, 251, 187, 102, 69, 205, 188, 167, 101, 94, 62, 47, 247, 182, 61, 73, 189, 248, 189, 201, 10, 98, 61, 78, 68, 45, 190, 29, 96, 159, 189, 55, 130, 177, 61, 240, 17, 94, 189, 168, 144, 255, 190, 11, 53, 155, 189, 233, 169, 230, 61, 210, 8, 217, 61, 128, 143, 43, 191, 167, 253, 224, 188, 141, 104, 32, 62, 89, 252, 11, 190, 195, 42, 191, 62, 53, 16, 135, 189, 124, 193, 2, 190, 58, 16, 95, 189, 102, 163, 130, 191, 85, 249, 55, 60, 82, 224, 110, 62, 30, 198, 246, 62, 165, 11, 239, 187, 178, 141, 54, 190, 229, 115, 66, 190, 208, 227, 8, 188, 188, 120, 75, 61, 24, 195, 130, 61, 75, 126, 108, 62, 126, 140, 79, 190, 223, 155, 166, 189, 229, 245, 63, 61, 227, 101, 98, 190, 218, 6, 227, 189, 123, 173, 30, 190, 75, 113, 162, 60, 97, 46, 100, 62, 191, 82, 74, 61, 176, 253, 20, 191, 209, 14, 63, 61, 8, 96, 61, 61, 210, 187, 0, 189, 87, 105, 9, 191, 195, 147, 208, 189, 190, 10, 24, 62, 162, 232, 70, 190, 34, 149, 56, 190, 182, 109, 1, 189, 114, 52, 166, 190, 46, 159, 7, 190, 140, 127, 1, 190, 20, 18, 252, 61, 119, 14, 246, 61, 218, 170, 33, 63, 52, 45, 155, 190, 159, 29, 136, 62, 201, 226, 56, 191, 62, 144, 78, 61, 20, 228, 237, 61, 63, 93, 197, 62, 90, 51, 184, 62, 197, 80, 185, 190, 65, 119, 157, 62, 53, 173, 132, 62, 148, 191, 9, 190, 88, 133, 159, 190, 151, 189, 140, 190, 169, 154, 163, 61, 57, 171, 209, 62, 209, 20, 44, 62, 69, 83, 50, 190, 131, 130, 137, 190, 142, 137, 154, 62, 154, 65, 241, 61, 205, 237, 189, 190, 240, 2, 138, 190, 134, 185, 245, 61, 206, 174, 138, 189, 45, 153, 83, 61, 162, 70, 204, 190, 193, 152, 4, 190, 165, 127, 100, 190, 85, 99, 116, 61, 201, 121, 198, 62, 57, 78, 209, 62, 96, 54, 141, 62, 83, 207, 119, 190, 8, 75, 130, 60, 87, 255, 207, 190, 21, 123, 237, 189, 61, 226, 39, 61, 98, 206, 178, 62, 42, 212, 155, 61, 248, 2, 20, 62, 109, 33, 188, 188, 166, 211, 1, 190, 208, 145, 0, 191, 65, 34, 222, 61, 228, 208, 42, 190, 108, 220, 127, 189, 142, 48, 253, 61, 52, 231, 5, 190, 186, 165, 209, 190, 92, 150, 105, 189, 234, 19, 96, 62, 155, 132, 94, 62, 214, 184, 48, 189, 224, 7, 50, 190, 76, 198, 128, 62, 94, 166, 216, 190, 225, 172, 138, 61, 178, 225, 180, 190, 212, 133, 233, 190, 105, 170, 223, 190, 100, 145, 222, 61, 69, 97, 23, 62, 64, 223, 69, 62, 115, 6, 128, 190, 205, 215, 170, 60, 5, 12, 49, 190, 66, 109, 26, 190, 56, 207, 86, 188, 10, 71, 192, 61, 4, 105, 146, 61, 70, 124, 189, 59, 175, 63, 59, 61, 157, 193, 177, 189, 166, 130, 49, 62, 221, 141, 239, 189, 29, 221, 13, 62, 148, 214, 113, 189, 71, 23, 71, 189, 64, 244, 216, 189, 95, 112, 199, 62, 109, 206, 196, 190, 216, 65, 21, 190, 43, 144, 205, 61, 129, 72, 5, 62, 13, 202, 85, 189, 80, 134, 7, 190, 227, 74, 239, 189, 70, 58, 226, 61, 243, 31, 61, 62, 71, 10, 138, 189, 95, 126, 3, 188, 25, 172, 233, 61, 169, 105, 137, 61, 82, 152, 48, 62, 176, 1, 174, 61, 233, 190, 206, 62, 231, 35, 217, 60, 208, 234, 148, 61, 41, 240, 54, 62, 180, 90, 10, 62, 10, 121, 31, 62, 177, 183, 26, 62, 194, 153, 197, 189, 68, 161, 73, 62, 64, 238, 140, 60, 119, 224, 3, 189, 84, 31, 178, 61, 14, 210, 183, 61, 213, 215, 114, 189, 212, 178, 42, 61, 241, 96, 78, 190, 6, 159, 131, 191, 233, 212, 243, 61, 163, 175, 215, 61, 37, 225, 248, 60, 35, 183, 61, 62, 236, 185, 124, 190, 30, 112, 245, 60, 219, 143, 17, 190, 30, 57, 35, 62, 76, 117, 17, 189, 167, 185, 103, 60, 106, 221, 231, 61, 119, 242, 28, 62, 33, 34, 76, 189, 225, 96, 24, 189, 200, 122, 8, 188, 80, 221, 36, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {49, 82, 114, 188, 99, 145, 135, 62, 95, 245, 21, 189, 125, 193, 105, 189, 165, 129, 120, 62, 62, 215, 13, 62, 1, 190, 77, 61, 106, 221, 65, 190, 110, 160, 145, 62, 178, 112, 1, 62, 83, 155, 47, 189, 132, 45, 228, 61, 138, 167, 159, 60, 49, 191, 62, 62, 252, 245, 4, 62, 47, 238, 228, 61, 89, 24, 169, 62, 32, 126, 53, 190, 13, 49, 83, 62, 65, 104, 201, 61, 121, 189, 65, 60, 202, 160, 172, 188, 121, 63, 88, 61, 192, 188, 184, 62, 120, 255, 28, 61, 44, 115, 61, 188, 231, 18, 119, 62, 88, 246, 254, 61, 145, 104, 127, 62, 166, 125, 0, 62, 58, 166, 97, 62, 38, 209, 195, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {11, 187, 2, 190, 72, 152, 146, 62, 185, 214, 232, 62, 211, 224, 238, 190, 153, 24, 12, 191, 238, 185, 36, 191, 216, 159, 132, 62, 87, 47, 50, 191, 65, 224, 39, 191, 10, 88, 242, 62, 228, 229, 132, 190, 37, 180, 129, 190, 122, 239, 37, 191, 216, 197, 84, 191, 254, 173, 159, 189, 2, 12, 37, 190, 61, 4, 157, 61, 61, 0, 126, 62, 238, 95, 7, 63, 234, 207, 180, 62, 179, 228, 172, 190, 0, 24, 145, 190, 99, 91, 91, 63, 113, 111, 198, 189, 46, 134, 1, 191, 75, 212, 228, 62, 150, 13, 230, 62, 101, 217, 169, 62, 160, 231, 61, 63, 52, 136, 64, 191, 66, 25, 183, 61, 10, 101, 102, 189, 5, 134, 176, 187, 96, 116, 106, 185, 45, 16, 39, 187, 65, 84, 67, 189, 61, 211, 155, 59, 239, 31, 104, 61, 34, 156, 179, 61, 215, 20, 155, 60, 140, 43, 142, 190, 23, 129, 135, 62, 54, 149, 129, 186, 11, 52, 66, 62, 112, 254, 109, 188, 195, 146, 60, 189, 159, 1, 209, 190, 152, 112, 175, 61, 155, 235, 172, 190, 183, 99, 124, 62, 201, 96, 202, 61, 24, 142, 155, 61, 210, 247, 223, 189, 34, 11, 227, 61, 227, 68, 80, 188, 109, 73, 222, 190, 18, 7, 100, 62, 123, 151, 231, 60, 166, 211, 184, 188, 208, 211, 244, 189, 22, 11, 247, 188, 125, 35, 6, 61, 128, 227, 50, 190, 41, 99, 42, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {84, 43, 243, 61, 157, 62, 155, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {225, 159, 210, 62, 161, 229, 101, 62, 118, 117, 142, 63};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {13, 203, 165, 191, 36, 3, 139, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0051/steps/000000000008000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}