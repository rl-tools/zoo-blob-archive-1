// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {18, 182, 114, 62, 231, 10, 29, 190, 151, 37, 249, 62, 140, 47, 71, 190, 133, 253, 134, 191, 187, 179, 175, 189, 5, 77, 6, 191, 108, 113, 95, 189, 9, 93, 86, 191, 145, 92, 141, 62, 142, 136, 129, 62, 186, 232, 146, 59, 46, 52, 253, 190, 87, 220, 160, 62, 146, 201, 218, 189, 179, 117, 54, 63, 158, 121, 236, 61, 153, 104, 173, 189, 68, 248, 227, 62, 68, 246, 117, 62, 166, 152, 47, 191, 101, 194, 131, 62, 120, 158, 247, 190, 102, 126, 54, 62, 103, 143, 95, 61, 245, 221, 132, 191, 149, 89, 119, 190, 116, 131, 118, 62, 3, 203, 132, 63, 53, 38, 15, 63, 177, 224, 19, 191, 67, 136, 40, 190, 9, 45, 16, 191, 194, 176, 245, 61, 249, 120, 125, 62, 146, 206, 41, 191, 138, 39, 6, 63, 201, 247, 114, 63, 143, 231, 138, 62, 124, 38, 139, 190, 108, 162, 245, 62, 203, 183, 236, 60, 184, 120, 56, 63, 166, 179, 119, 191, 176, 104, 209, 190, 206, 248, 198, 62, 110, 211, 114, 63, 68, 192, 101, 62, 98, 17, 21, 63, 250, 58, 144, 63, 67, 128, 146, 62, 99, 29, 245, 61, 68, 112, 59, 191, 0, 52, 1, 63, 224, 54, 77, 62, 233, 65, 204, 189, 15, 119, 252, 190, 232, 65, 3, 62, 179, 189, 72, 191, 63, 6, 135, 190, 159, 210, 188, 62, 48, 13, 173, 63, 146, 127, 34, 62, 64, 36, 131, 62, 55, 69, 223, 190, 119, 249, 173, 62, 169, 176, 143, 190, 111, 83, 61, 62, 29, 194, 77, 63, 218, 36, 32, 63, 20, 201, 35, 63, 107, 175, 241, 62, 205, 97, 21, 63, 106, 142, 64, 191, 46, 127, 6, 190, 239, 113, 210, 190, 210, 14, 47, 63, 222, 215, 215, 190, 253, 254, 45, 63, 234, 240, 90, 63, 86, 23, 61, 62, 207, 232, 107, 63, 65, 200, 90, 63, 151, 143, 189, 62, 85, 54, 152, 190, 67, 161, 160, 63, 118, 186, 126, 62, 192, 112, 17, 191, 154, 113, 75, 61, 218, 99, 38, 63, 192, 181, 132, 60, 133, 105, 106, 191, 60, 246, 166, 62, 231, 150, 223, 189, 31, 75, 166, 63, 10, 133, 149, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {83, 171, 79, 191, 4, 239, 119, 61, 253, 115, 168, 59, 232, 47, 208, 190, 98, 190, 1, 63, 110, 198, 164, 62, 226, 5, 12, 191, 37, 21, 38, 190, 221, 5, 219, 62, 211, 209, 80, 62, 137, 146, 32, 62, 130, 24, 16, 63, 35, 26, 20, 190, 68, 15, 153, 190, 11, 231, 254, 190, 85, 152, 13, 191, 200, 137, 179, 189, 24, 89, 183, 190, 250, 125, 80, 189, 240, 210, 212, 62, 200, 194, 210, 190, 212, 176, 36, 191, 193, 184, 252, 61, 51, 76, 13, 190, 207, 37, 112, 62, 15, 58, 129, 62, 31, 120, 57, 62, 213, 169, 63, 62, 134, 137, 11, 63, 54, 215, 4, 191, 74, 107, 234, 61, 88, 13, 57, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {180, 1, 49, 189, 80, 196, 92, 189, 227, 17, 15, 62, 13, 254, 122, 61, 139, 208, 46, 188, 118, 208, 60, 188, 235, 34, 107, 190, 196, 154, 21, 62, 225, 201, 151, 61, 22, 231, 97, 190, 217, 107, 32, 62, 97, 20, 219, 61, 152, 189, 143, 61, 138, 199, 133, 62, 169, 90, 164, 190, 131, 245, 23, 191, 212, 230, 10, 62, 84, 84, 246, 189, 146, 116, 210, 189, 137, 250, 176, 189, 65, 124, 175, 62, 205, 81, 200, 189, 76, 222, 114, 188, 60, 162, 146, 60, 121, 85, 14, 190, 234, 17, 196, 61, 152, 87, 107, 62, 129, 186, 29, 62, 167, 44, 12, 62, 153, 5, 0, 191, 42, 182, 179, 189, 31, 255, 49, 190, 238, 103, 82, 190, 175, 194, 123, 62, 144, 148, 246, 189, 101, 94, 8, 62, 67, 248, 1, 62, 175, 18, 131, 60, 224, 102, 161, 190, 203, 75, 15, 190, 111, 23, 138, 62, 160, 92, 137, 188, 109, 174, 28, 62, 132, 188, 139, 189, 46, 100, 48, 190, 218, 52, 52, 60, 33, 59, 75, 190, 226, 14, 2, 190, 35, 9, 21, 191, 42, 96, 56, 189, 132, 183, 69, 190, 50, 141, 230, 61, 13, 204, 48, 191, 86, 181, 77, 190, 136, 53, 117, 62, 222, 193, 113, 190, 62, 197, 138, 188, 95, 130, 17, 190, 92, 219, 109, 190, 55, 67, 12, 188, 57, 112, 221, 188, 217, 35, 29, 62, 55, 214, 35, 62, 101, 57, 151, 62, 193, 118, 43, 190, 229, 124, 214, 190, 250, 76, 125, 60, 71, 213, 9, 62, 94, 179, 121, 62, 158, 192, 32, 61, 112, 19, 213, 188, 49, 93, 130, 58, 20, 178, 140, 190, 7, 184, 198, 61, 135, 21, 90, 190, 27, 157, 117, 61, 78, 208, 55, 190, 186, 60, 7, 190, 225, 166, 156, 62, 57, 111, 229, 60, 12, 247, 79, 191, 134, 77, 190, 61, 128, 153, 10, 62, 34, 148, 156, 190, 12, 171, 98, 191, 207, 63, 167, 61, 184, 95, 132, 62, 35, 25, 14, 190, 207, 72, 131, 62, 74, 153, 5, 190, 19, 150, 191, 190, 194, 60, 176, 190, 18, 119, 156, 60, 117, 1, 84, 61, 53, 133, 35, 62, 247, 110, 210, 62, 141, 114, 86, 61, 143, 127, 141, 190, 59, 215, 28, 190, 96, 177, 174, 189, 179, 5, 152, 189, 109, 55, 86, 61, 101, 21, 75, 59, 4, 19, 214, 61, 250, 81, 162, 190, 68, 144, 219, 189, 198, 206, 197, 189, 137, 16, 29, 62, 105, 247, 86, 62, 245, 122, 154, 188, 27, 123, 66, 191, 167, 245, 130, 189, 127, 66, 225, 62, 51, 199, 104, 62, 49, 197, 66, 62, 187, 156, 200, 61, 11, 69, 163, 62, 56, 93, 152, 61, 201, 243, 121, 190, 105, 174, 93, 189, 135, 26, 63, 190, 65, 27, 140, 62, 113, 200, 128, 62, 119, 137, 122, 62, 11, 102, 27, 190, 111, 187, 234, 189, 191, 36, 181, 61, 229, 88, 128, 62, 19, 4, 38, 61, 131, 240, 80, 62, 31, 14, 23, 62, 11, 8, 24, 61, 220, 200, 51, 62, 30, 239, 168, 188, 199, 209, 85, 190, 60, 224, 180, 60, 131, 160, 21, 190, 187, 53, 105, 190, 99, 158, 18, 62, 66, 157, 200, 61, 171, 145, 137, 62, 177, 105, 222, 62, 53, 161, 30, 191, 161, 220, 88, 191, 126, 251, 222, 62, 19, 192, 164, 62, 138, 166, 146, 189, 86, 168, 145, 188, 226, 231, 204, 62, 175, 135, 5, 63, 243, 97, 205, 189, 114, 98, 19, 62, 222, 80, 67, 190, 75, 208, 49, 62, 24, 182, 96, 62, 200, 119, 81, 61, 100, 192, 213, 189, 93, 224, 158, 190, 146, 161, 27, 190, 39, 42, 146, 190, 128, 147, 65, 190, 77, 62, 82, 62, 117, 166, 137, 61, 174, 158, 76, 190, 105, 218, 159, 61, 35, 185, 171, 61, 252, 15, 158, 190, 255, 41, 54, 190, 224, 236, 59, 62, 217, 102, 76, 190, 81, 38, 149, 62, 80, 75, 52, 189, 197, 38, 36, 62, 74, 173, 130, 62, 86, 102, 37, 191, 212, 18, 66, 191, 251, 36, 233, 62, 223, 207, 34, 190, 187, 182, 96, 189, 93, 170, 30, 62, 193, 45, 172, 62, 105, 248, 129, 62, 9, 197, 57, 190, 216, 113, 134, 60, 151, 119, 154, 190, 35, 249, 163, 62, 88, 60, 229, 61, 120, 100, 165, 62, 17, 20, 75, 61, 102, 127, 91, 191, 32, 217, 192, 190, 148, 181, 142, 190, 194, 196, 1, 190, 243, 190, 82, 61, 242, 146, 242, 190, 220, 37, 35, 186, 96, 48, 251, 59, 143, 196, 171, 62, 246, 255, 225, 189, 205, 11, 130, 187, 106, 31, 33, 190, 51, 61, 170, 187, 85, 12, 95, 190, 16, 58, 17, 190, 59, 19, 3, 191, 205, 166, 133, 190, 151, 72, 64, 62, 226, 146, 36, 190, 205, 115, 14, 191, 31, 67, 223, 189, 41, 82, 88, 61, 120, 43, 57, 62, 14, 167, 121, 191, 187, 172, 138, 189, 237, 210, 59, 62, 244, 63, 236, 189, 47, 8, 27, 62, 185, 140, 135, 62, 166, 89, 222, 189, 25, 221, 94, 190, 212, 185, 129, 61, 188, 59, 216, 61, 208, 26, 132, 62, 119, 67, 28, 63, 207, 224, 157, 190, 101, 194, 86, 62, 91, 31, 209, 189, 242, 125, 34, 189, 73, 148, 9, 191, 219, 239, 179, 62, 18, 173, 209, 62, 24, 212, 85, 62, 132, 47, 185, 62, 199, 187, 154, 60, 61, 35, 248, 190, 138, 51, 134, 61, 139, 92, 95, 190, 231, 202, 160, 190, 122, 52, 179, 62, 85, 229, 27, 62, 12, 80, 19, 191, 134, 211, 152, 61, 58, 177, 44, 62, 156, 215, 173, 60, 68, 54, 216, 190, 123, 151, 35, 190, 159, 192, 5, 60, 56, 18, 231, 190, 127, 165, 1, 63, 249, 174, 224, 190, 187, 54, 140, 191, 74, 198, 112, 191, 170, 123, 16, 189, 241, 83, 63, 62, 142, 140, 251, 61, 227, 52, 39, 188, 222, 218, 158, 190, 232, 144, 154, 189, 49, 121, 17, 190, 42, 52, 246, 187, 172, 76, 133, 61, 225, 233, 97, 61, 43, 136, 52, 191, 144, 175, 119, 190, 115, 97, 48, 62, 128, 177, 222, 190, 205, 46, 69, 61, 67, 22, 88, 190, 75, 23, 183, 61, 205, 90, 152, 188, 78, 2, 198, 190, 200, 154, 20, 190, 130, 231, 224, 61, 50, 20, 124, 190, 196, 197, 135, 190, 30, 109, 250, 188, 133, 193, 53, 190, 153, 134, 130, 190, 183, 112, 55, 189, 21, 132, 56, 62, 4, 71, 52, 189, 79, 91, 189, 61, 89, 169, 135, 61, 185, 99, 152, 62, 248, 23, 38, 62, 20, 91, 118, 191, 131, 114, 143, 190, 63, 241, 96, 191, 114, 158, 138, 61, 85, 131, 139, 190, 144, 157, 148, 190, 40, 94, 232, 189, 46, 23, 24, 190, 51, 206, 65, 62, 217, 244, 184, 62, 5, 186, 1, 190, 115, 59, 52, 190, 200, 206, 130, 190, 65, 100, 253, 189, 183, 95, 160, 188, 193, 165, 166, 190, 65, 35, 164, 61, 216, 59, 21, 63, 14, 244, 142, 189, 38, 72, 31, 191, 247, 76, 17, 62, 80, 109, 173, 62, 159, 32, 149, 189, 52, 202, 163, 189, 192, 208, 118, 61, 8, 178, 61, 61, 96, 232, 95, 189, 215, 126, 146, 61, 7, 219, 148, 189, 226, 192, 6, 60, 62, 104, 181, 189, 146, 18, 93, 191, 178, 102, 33, 61, 40, 235, 206, 62, 253, 58, 80, 62, 158, 186, 232, 62, 203, 66, 57, 62, 212, 110, 108, 61, 121, 113, 161, 61, 108, 166, 190, 60, 21, 49, 53, 189, 38, 62, 78, 59, 158, 148, 3, 63, 75, 114, 138, 62, 198, 217, 193, 191, 187, 7, 64, 62, 157, 180, 33, 62, 50, 0, 88, 62, 202, 192, 191, 189, 117, 142, 9, 190, 73, 7, 121, 190, 245, 154, 34, 63, 54, 160, 0, 189, 21, 164, 235, 61, 26, 170, 15, 62, 219, 132, 4, 63, 152, 206, 77, 63, 89, 70, 20, 62, 217, 125, 127, 190, 50, 54, 78, 190, 151, 195, 104, 61, 148, 125, 204, 190, 176, 133, 253, 60, 232, 118, 205, 62, 245, 219, 55, 191, 70, 88, 108, 62, 200, 40, 186, 190, 27, 69, 212, 61, 117, 202, 162, 62, 144, 133, 39, 62, 48, 241, 211, 61, 38, 25, 52, 62, 169, 108, 168, 187, 223, 23, 142, 190, 119, 186, 61, 61, 114, 92, 106, 189, 207, 137, 183, 190, 35, 234, 129, 62, 170, 209, 206, 60, 175, 136, 55, 62, 100, 232, 78, 62, 166, 19, 7, 191, 98, 111, 255, 190, 3, 45, 140, 62, 86, 50, 15, 190, 82, 12, 214, 189, 113, 239, 224, 61, 168, 87, 1, 63, 233, 233, 73, 188, 0, 132, 142, 190, 110, 85, 16, 62, 118, 128, 204, 189, 101, 149, 84, 62, 163, 32, 62, 62, 45, 178, 45, 62, 111, 214, 224, 61, 70, 133, 202, 190, 48, 4, 232, 190, 253, 202, 192, 190, 49, 94, 141, 190, 90, 106, 156, 61, 130, 141, 9, 191, 15, 168, 225, 189, 230, 135, 41, 62, 29, 121, 132, 62, 86, 222, 138, 61, 210, 249, 38, 60, 15, 38, 167, 62, 136, 237, 106, 189, 81, 81, 27, 191, 62, 4, 18, 61, 180, 163, 32, 190, 97, 225, 131, 62, 74, 244, 79, 62, 238, 198, 82, 62, 19, 142, 118, 189, 249, 27, 39, 186, 172, 151, 179, 187, 175, 223, 129, 188, 238, 86, 175, 190, 10, 46, 2, 191, 221, 74, 150, 62, 16, 158, 196, 190, 104, 218, 105, 62, 159, 251, 212, 190, 107, 122, 1, 191, 24, 188, 41, 191, 123, 146, 193, 62, 166, 253, 233, 61, 94, 163, 117, 62, 204, 7, 202, 190, 221, 66, 28, 62, 57, 173, 219, 189, 199, 74, 179, 190, 2, 174, 16, 62, 0, 53, 95, 62, 197, 216, 22, 191, 83, 132, 191, 190, 0, 20, 142, 190, 39, 185, 95, 188, 254, 241, 140, 190, 112, 44, 137, 61, 145, 130, 146, 190, 148, 160, 165, 59, 29, 32, 181, 189, 8, 163, 149, 190, 146, 85, 161, 189, 104, 198, 150, 61, 23, 183, 80, 61, 32, 11, 55, 191, 101, 79, 159, 190, 175, 168, 74, 189, 160, 116, 28, 189, 116, 36, 101, 62, 173, 224, 119, 187, 34, 26, 42, 191, 173, 21, 173, 61, 6, 22, 169, 189, 166, 217, 23, 62, 250, 216, 181, 62, 19, 79, 192, 190, 15, 136, 220, 60, 65, 20, 133, 191, 192, 214, 66, 190, 198, 96, 7, 190, 65, 3, 155, 190, 163, 19, 23, 62, 153, 166, 60, 190, 218, 232, 193, 62, 49, 65, 214, 190, 220, 159, 69, 62, 11, 169, 140, 61, 127, 125, 63, 60, 40, 65, 172, 190, 142, 255, 176, 61, 83, 55, 121, 61, 149, 11, 91, 189, 49, 59, 51, 191, 43, 18, 98, 190, 194, 53, 208, 189, 239, 192, 176, 61, 49, 89, 129, 190, 253, 69, 248, 188, 65, 7, 22, 60, 191, 221, 174, 61, 89, 6, 252, 61, 68, 117, 46, 190, 155, 151, 8, 62, 69, 73, 156, 190, 208, 246, 175, 59, 28, 143, 59, 62, 75, 64, 6, 190, 174, 189, 96, 62, 30, 214, 150, 62, 179, 1, 14, 190, 108, 49, 191, 189, 172, 112, 62, 190, 103, 40, 58, 190, 125, 211, 188, 60, 39, 47, 145, 62, 187, 211, 126, 189, 83, 109, 146, 190, 106, 167, 103, 62, 253, 9, 169, 190, 157, 254, 63, 62, 82, 228, 46, 191, 78, 170, 9, 190, 110, 229, 24, 190, 41, 138, 189, 190, 66, 81, 181, 190, 123, 28, 206, 190, 117, 10, 161, 61, 184, 185, 55, 189, 90, 21, 142, 189, 203, 177, 250, 190, 205, 249, 139, 190, 0, 234, 26, 61, 5, 9, 180, 189, 239, 2, 143, 61, 145, 174, 69, 59, 12, 53, 142, 62, 58, 134, 139, 61, 186, 54, 42, 190, 147, 87, 14, 190, 184, 154, 57, 62, 135, 111, 101, 62, 66, 63, 165, 62, 123, 227, 211, 190, 161, 209, 130, 190, 218, 236, 56, 61, 91, 206, 186, 61, 49, 155, 199, 189, 197, 200, 92, 61, 41, 134, 155, 189, 64, 170, 208, 189, 183, 24, 250, 61, 136, 88, 12, 62, 32, 85, 83, 62, 247, 26, 41, 60, 156, 5, 4, 189, 37, 16, 31, 62, 5, 172, 228, 189, 158, 249, 13, 191, 174, 203, 170, 189, 63, 64, 216, 189, 219, 2, 222, 189, 97, 220, 44, 62, 201, 142, 18, 191, 138, 122, 147, 190, 184, 227, 121, 190, 130, 0, 136, 62, 98, 48, 57, 189, 150, 122, 131, 189, 41, 250, 96, 62, 160, 75, 93, 62, 34, 101, 116, 190, 93, 18, 209, 190, 157, 70, 142, 189, 155, 154, 28, 62, 245, 90, 143, 188, 205, 113, 178, 190, 24, 253, 133, 59, 155, 22, 47, 62, 203, 88, 126, 190, 255, 61, 231, 62, 160, 188, 127, 61, 251, 172, 37, 190, 138, 45, 135, 190, 175, 227, 229, 190, 248, 177, 84, 188, 215, 158, 6, 62, 65, 32, 242, 190, 173, 216, 207, 61, 16, 113, 214, 62, 123, 46, 37, 62, 222, 224, 197, 190, 216, 153, 23, 190, 80, 34, 167, 188, 203, 219, 31, 61, 92, 55, 120, 59, 108, 203, 126, 190, 152, 206, 20, 62, 14, 87, 156, 190, 176, 79, 28, 62, 30, 121, 193, 59, 74, 129, 62, 62, 49, 176, 192, 189, 97, 124, 179, 191, 247, 72, 3, 190, 168, 100, 193, 62, 134, 166, 147, 61, 215, 116, 50, 190, 105, 22, 55, 190, 4, 164, 230, 190, 59, 253, 137, 189, 206, 217, 222, 61, 107, 103, 174, 62, 218, 138, 153, 61, 55, 148, 133, 61, 158, 221, 99, 190, 249, 167, 33, 61, 167, 71, 73, 190, 67, 223, 205, 189, 216, 123, 177, 190, 191, 51, 75, 190, 87, 230, 58, 61, 186, 10, 125, 190, 108, 38, 110, 191, 60, 237, 8, 188, 157, 205, 25, 62, 140, 155, 35, 190, 171, 200, 90, 191, 222, 180, 192, 189, 248, 52, 120, 62, 133, 80, 67, 190, 236, 184, 91, 62, 247, 184, 198, 189, 27, 9, 71, 61, 120, 75, 70, 190, 21, 45, 57, 187, 241, 84, 141, 189, 20, 86, 88, 62, 78, 123, 14, 63, 210, 42, 75, 190, 245, 249, 69, 190, 189, 25, 28, 190, 152, 47, 150, 60, 29, 79, 148, 189, 64, 52, 189, 62, 174, 211, 124, 62, 181, 143, 44, 190, 249, 84, 251, 61, 59, 219, 1, 62, 42, 166, 61, 190, 117, 228, 60, 189, 171, 83, 55, 190, 174, 37, 217, 189, 95, 218, 234, 62, 71, 81, 12, 190, 204, 55, 15, 191, 68, 53, 113, 189, 224, 184, 174, 62, 42, 81, 160, 61, 98, 66, 211, 190, 236, 9, 148, 189, 115, 145, 91, 189, 21, 235, 191, 188, 92, 153, 31, 62, 208, 86, 81, 190, 203, 243, 31, 190, 61, 183, 75, 60, 110, 36, 88, 191, 113, 57, 251, 61, 68, 224, 228, 62, 150, 110, 51, 62, 19, 33, 50, 62, 11, 117, 1, 191, 104, 87, 149, 189, 110, 17, 208, 189, 47, 67, 41, 62, 68, 122, 2, 62, 191, 202, 3, 189, 15, 109, 227, 189, 8, 246, 29, 61, 58, 233, 18, 190, 29, 181, 25, 62, 76, 145, 9, 62, 92, 25, 178, 189, 245, 79, 144, 61, 26, 172, 70, 191, 108, 220, 43, 191, 160, 136, 130, 62, 71, 49, 188, 189, 122, 203, 141, 190, 237, 21, 128, 189, 174, 167, 167, 62, 205, 189, 129, 62, 101, 139, 129, 190, 188, 141, 78, 62, 163, 165, 14, 190, 208, 147, 129, 62, 164, 211, 114, 62, 232, 144, 58, 62, 181, 208, 149, 189, 23, 51, 85, 190, 236, 197, 131, 61, 207, 2, 94, 187, 217, 248, 35, 62, 91, 236, 22, 61, 3, 46, 160, 190, 5, 255, 243, 60, 154, 70, 65, 191, 35, 216, 159, 189, 147, 209, 17, 190, 94, 224, 56, 61, 217, 17, 91, 61, 247, 26, 185, 189, 202, 111, 11, 191, 200, 175, 142, 61, 80, 224, 209, 61, 143, 251, 46, 190, 172, 24, 204, 62, 11, 118, 187, 189, 188, 189, 4, 62, 212, 131, 39, 62, 24, 106, 29, 62, 6, 38, 219, 61, 97, 248, 193, 189, 23, 230, 137, 62, 128, 55, 99, 62, 189, 184, 213, 188, 186, 231, 196, 61, 221, 120, 21, 190, 7, 255, 2, 189, 175, 4, 143, 189, 74, 94, 5, 190, 47, 79, 168, 62, 101, 182, 98, 62, 45, 27, 19, 191, 203, 78, 203, 189, 42, 222, 15, 62, 113, 186, 125, 191, 69, 26, 202, 60, 48, 52, 201, 62, 118, 31, 98, 191, 60, 232, 167, 188, 32, 217, 144, 190, 135, 0, 198, 189, 124, 238, 89, 62, 13, 116, 13, 190, 91, 237, 24, 191, 166, 133, 159, 190, 96, 132, 15, 61, 142, 102, 9, 190, 235, 40, 30, 190, 183, 205, 208, 190, 56, 16, 44, 190, 120, 213, 225, 189, 245, 109, 129, 190, 158, 221, 31, 190, 205, 103, 8, 190, 210, 24, 253, 61, 26, 110, 98, 190, 83, 169, 184, 190, 165, 226, 239, 60, 142, 195, 146, 190, 85, 231, 164, 190, 196, 113, 198, 62, 164, 231, 157, 62, 26, 238, 110, 62, 231, 5, 172, 62, 97, 155, 43, 190, 141, 206, 175, 60, 133, 8, 197, 188, 187, 35, 114, 189, 85, 21, 151, 61, 109, 20, 236, 62, 195, 16, 16, 189, 105, 179, 138, 62, 158, 102, 183, 61, 1, 34, 216, 189, 3, 105, 235, 61, 197, 168, 18, 62, 236, 223, 80, 190, 252, 114, 35, 190, 223, 121, 171, 190, 66, 217, 141, 191, 90, 67, 145, 190, 65, 159, 235, 61, 222, 224, 160, 60, 215, 159, 140, 61, 224, 247, 248, 189, 238, 115, 131, 188, 150, 106, 145, 188, 69, 242, 19, 62, 151, 53, 122, 62, 10, 34, 82, 62, 230, 34, 131, 62, 62, 109, 75, 62, 85, 24, 139, 190, 21, 128, 186, 189, 0, 164, 58, 62, 192, 211, 77, 190, 232, 68, 140, 62, 125, 84, 148, 62, 116, 13, 199, 60, 250, 176, 218, 189, 45, 254, 138, 61, 220, 188, 120, 61, 155, 149, 149, 190, 210, 230, 58, 189, 89, 247, 162, 189, 218, 23, 144, 190, 131, 52, 156, 62, 22, 230, 98, 62, 133, 131, 206, 61, 200, 98, 107, 62, 232, 85, 88, 191, 190, 243, 86, 191, 199, 7, 227, 62, 59, 181, 45, 62, 211, 96, 52, 189, 253, 223, 44, 62, 179, 90, 228, 62, 58, 38, 131, 62, 209, 98, 134, 61, 211, 235, 17, 62, 227, 203, 180, 190, 62, 179, 51, 62, 4, 165, 34, 62, 198, 147, 67, 62, 27, 6, 148, 188, 147, 62, 218, 190, 95, 137, 91, 190, 61, 254, 158, 190, 25, 29, 150, 189, 213, 86, 61, 62, 141, 40, 223, 190, 112, 198, 48, 62, 64, 26, 214, 61, 59, 239, 191, 62, 209, 170, 19, 191, 72, 255, 212, 61, 152, 231, 31, 62, 114, 238, 13, 190, 133, 202, 166, 190, 238, 160, 68, 61, 128, 102, 138, 190, 115, 157, 82, 62, 100, 20, 135, 62, 232, 241, 161, 190, 70, 101, 201, 190, 33, 63, 37, 62, 14, 191, 155, 61, 96, 140, 35, 62, 172, 138, 45, 191, 171, 206, 231, 61, 27, 5, 28, 189, 227, 225, 216, 189, 174, 60, 239, 62, 114, 156, 156, 190, 109, 148, 168, 189, 43, 47, 64, 62, 4, 206, 236, 190, 45, 106, 20, 190, 218, 148, 9, 60, 157, 211, 214, 189, 146, 248, 204, 189, 13, 47, 215, 61, 219, 80, 146, 190, 176, 218, 99, 61, 252, 93, 194, 188, 227, 0, 53, 62, 12, 82, 78, 61, 166, 9, 25, 189, 138, 65, 116, 62, 119, 174, 75, 61, 172, 208, 183, 189, 236, 148, 157, 61, 24, 253, 74, 190, 11, 243, 175, 188, 251, 42, 33, 62, 203, 203, 118, 189, 121, 1, 9, 191, 82, 212, 182, 189, 215, 24, 18, 62, 170, 28, 10, 62, 229, 89, 115, 191, 105, 176, 108, 189, 150, 40, 22, 62, 20, 44, 1, 190, 203, 145, 193, 62, 1, 186, 69, 189, 172, 204, 253, 189, 36, 206, 28, 189, 24, 84, 154, 191, 236, 195, 192, 189, 72, 104, 124, 62, 83, 93, 0, 63, 246, 187, 196, 187, 42, 24, 247, 189, 91, 99, 75, 190, 208, 227, 8, 188, 119, 131, 161, 61, 228, 76, 21, 61, 185, 115, 108, 62, 18, 168, 86, 190, 146, 107, 221, 189, 92, 215, 238, 60, 69, 112, 97, 190, 9, 0, 5, 190, 238, 62, 120, 190, 62, 78, 215, 189, 42, 135, 163, 62, 226, 5, 70, 60, 92, 141, 71, 191, 182, 223, 68, 61, 16, 193, 236, 60, 2, 84, 109, 189, 41, 207, 57, 191, 230, 101, 196, 189, 73, 67, 50, 62, 146, 255, 94, 190, 199, 74, 155, 190, 238, 192, 7, 189, 211, 102, 226, 190, 30, 85, 29, 190, 107, 27, 243, 189, 121, 241, 3, 62, 225, 82, 6, 62, 187, 43, 29, 63, 21, 129, 187, 190, 27, 169, 156, 62, 93, 213, 75, 191, 62, 144, 78, 61, 203, 244, 94, 62, 166, 140, 193, 62, 71, 244, 133, 62, 141, 107, 209, 190, 33, 112, 160, 62, 136, 75, 130, 62, 225, 141, 36, 190, 109, 192, 178, 190, 235, 134, 151, 190, 217, 70, 131, 62, 192, 144, 186, 62, 225, 248, 71, 62, 12, 218, 75, 190, 199, 29, 159, 190, 213, 36, 114, 62, 198, 54, 0, 62, 57, 195, 172, 190, 90, 157, 180, 190, 195, 87, 251, 61, 47, 91, 97, 189, 48, 69, 58, 61, 253, 128, 19, 191, 123, 65, 254, 189, 158, 90, 89, 190, 232, 217, 194, 61, 90, 235, 174, 62, 235, 253, 192, 62, 234, 65, 70, 62, 83, 236, 171, 190, 54, 80, 21, 61, 116, 179, 17, 191, 21, 123, 237, 189, 40, 235, 221, 189, 20, 42, 181, 62, 206, 156, 139, 188, 217, 137, 131, 62, 85, 49, 184, 60, 166, 160, 42, 190, 158, 193, 47, 191, 35, 176, 38, 61, 109, 16, 218, 189, 88, 243, 170, 60, 126, 117, 51, 62, 139, 173, 4, 190, 7, 61, 116, 190, 224, 65, 37, 189, 48, 194, 51, 62, 85, 35, 131, 62, 118, 7, 252, 188, 226, 216, 96, 190, 213, 188, 125, 62, 113, 146, 18, 191, 192, 203, 80, 62, 122, 76, 233, 190, 135, 109, 83, 191, 9, 28, 71, 191, 147, 211, 250, 61, 193, 151, 19, 62, 77, 73, 123, 62, 125, 171, 208, 190, 22, 10, 150, 58, 198, 73, 50, 190, 162, 173, 35, 190, 56, 207, 86, 188, 91, 16, 238, 61, 173, 163, 95, 61, 0, 12, 57, 60, 79, 246, 80, 61, 96, 28, 205, 189, 54, 194, 42, 62, 223, 65, 249, 189, 242, 98, 226, 61, 3, 93, 182, 189, 158, 208, 190, 60, 163, 19, 205, 189, 239, 72, 226, 62, 88, 168, 224, 190, 226, 234, 17, 190, 57, 255, 133, 61, 197, 203, 236, 61, 49, 57, 158, 188, 119, 100, 29, 190, 191, 151, 201, 189, 87, 222, 254, 61, 43, 54, 37, 62, 64, 228, 176, 189, 254, 8, 188, 188, 113, 104, 226, 61, 3, 79, 154, 61, 28, 87, 28, 62, 217, 73, 227, 61, 208, 85, 202, 62, 29, 154, 0, 61, 253, 145, 26, 61, 27, 88, 50, 62, 180, 90, 10, 62, 144, 172, 39, 62, 115, 141, 10, 62, 183, 100, 186, 189, 104, 56, 120, 62, 97, 54, 172, 187, 45, 195, 201, 189, 126, 217, 164, 61, 44, 26, 158, 61, 84, 28, 227, 189, 163, 119, 109, 60, 169, 104, 134, 190, 182, 214, 167, 191, 85, 16, 76, 61, 27, 217, 245, 61, 246, 102, 141, 60, 65, 239, 32, 62, 51, 96, 247, 189, 5, 111, 58, 61, 38, 146, 10, 190, 204, 245, 8, 62, 182, 15, 118, 189, 76, 61, 168, 60, 84, 0, 185, 61, 244, 199, 227, 61, 123, 145, 80, 189, 221, 163, 135, 189, 201, 72, 22, 61, 48, 133, 19, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {87, 130, 34, 188, 79, 87, 200, 62, 134, 202, 47, 189, 218, 38, 98, 189, 40, 254, 98, 62, 32, 148, 25, 62, 216, 214, 131, 61, 237, 90, 17, 190, 25, 212, 152, 62, 170, 137, 109, 60, 242, 3, 163, 60, 132, 125, 246, 61, 54, 213, 94, 60, 156, 162, 244, 61, 171, 100, 208, 61, 243, 100, 208, 61, 252, 4, 162, 62, 149, 143, 171, 190, 75, 247, 118, 62, 191, 128, 141, 61, 66, 134, 90, 60, 65, 14, 207, 188, 115, 222, 14, 62, 0, 99, 210, 62, 112, 48, 255, 60, 167, 255, 189, 59, 158, 217, 115, 62, 65, 201, 13, 62, 186, 134, 140, 62, 125, 164, 234, 61, 168, 91, 102, 62, 7, 182, 3, 61};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {19, 247, 12, 190, 20, 97, 230, 62, 78, 88, 227, 62, 228, 132, 10, 191, 62, 70, 19, 191, 248, 174, 54, 191, 150, 190, 158, 62, 40, 148, 107, 191, 72, 199, 29, 191, 204, 213, 65, 63, 197, 90, 142, 190, 75, 145, 172, 190, 19, 24, 93, 191, 163, 214, 65, 191, 167, 208, 149, 189, 182, 217, 85, 190, 115, 243, 65, 61, 225, 39, 248, 62, 145, 149, 51, 63, 80, 81, 209, 62, 120, 195, 218, 190, 53, 184, 171, 190, 87, 35, 113, 63, 237, 30, 184, 189, 251, 149, 15, 191, 100, 161, 235, 62, 74, 61, 248, 62, 133, 84, 186, 62, 249, 54, 65, 63, 21, 243, 133, 191, 208, 114, 42, 61, 246, 69, 220, 188, 229, 201, 216, 59, 200, 44, 236, 188, 238, 4, 217, 187, 114, 173, 87, 189, 189, 93, 213, 59, 188, 243, 164, 61, 112, 126, 94, 62, 45, 140, 114, 61, 46, 175, 210, 190, 94, 74, 165, 62, 183, 117, 178, 188, 48, 84, 129, 62, 69, 90, 22, 61, 36, 207, 208, 189, 174, 59, 210, 190, 45, 1, 213, 61, 8, 154, 150, 190, 110, 89, 147, 62, 121, 2, 73, 62, 34, 159, 65, 61, 15, 195, 228, 189, 174, 196, 145, 61, 58, 172, 16, 61, 33, 146, 235, 190, 64, 253, 128, 62, 234, 145, 98, 185, 49, 28, 133, 189, 255, 200, 25, 190, 194, 107, 229, 188, 171, 13, 201, 61, 69, 15, 61, 190, 237, 149, 33, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {240, 32, 238, 61, 241, 108, 189, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {148, 12, 163, 63, 13, 129, 174, 63, 242, 24, 41, 64};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {38, 28, 137, 192, 207, 83, 25, 190};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0051/steps/000000000012000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}