// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
#include <rl_tools/nn/parameters/parameters.h>
#include <rl_tools/nn/layers/dense/layer.h>
#include <rl_tools/nn_models/sequential/model.h>
namespace rl_tools::checkpoint::actor {
    namespace layer_0 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {242, 5, 77, 62, 251, 89, 254, 189, 232, 53, 5, 63, 21, 124, 145, 57, 183, 216, 16, 191, 115, 209, 148, 189, 227, 216, 202, 190, 26, 79, 37, 63, 101, 63, 87, 191, 145, 92, 141, 62, 142, 136, 129, 62, 186, 232, 146, 59, 217, 16, 79, 190, 164, 67, 14, 63, 234, 97, 22, 190, 135, 205, 42, 63, 14, 50, 122, 61, 48, 156, 230, 189, 36, 100, 72, 189, 102, 225, 118, 62, 218, 176, 53, 191, 24, 240, 232, 60, 143, 113, 175, 190, 31, 31, 75, 62, 84, 52, 8, 61, 86, 16, 70, 191, 247, 14, 71, 190, 152, 201, 231, 61, 118, 161, 105, 62, 175, 148, 27, 63, 110, 216, 253, 190, 225, 188, 140, 62, 19, 6, 15, 191, 35, 123, 111, 62, 185, 92, 8, 63, 216, 13, 68, 191, 242, 194, 250, 62, 57, 238, 236, 62, 16, 75, 224, 62, 27, 64, 241, 189, 98, 159, 114, 62, 143, 120, 11, 62, 30, 220, 2, 63, 66, 237, 68, 191, 8, 28, 3, 191, 143, 209, 60, 187, 1, 229, 15, 63, 168, 134, 233, 61, 125, 33, 252, 62, 60, 179, 41, 63, 163, 230, 141, 62, 166, 23, 237, 61, 101, 6, 52, 191, 246, 213, 13, 63, 67, 136, 75, 62, 80, 123, 24, 189, 55, 59, 5, 191, 218, 251, 94, 62, 229, 94, 162, 190, 111, 35, 175, 190, 98, 235, 29, 62, 190, 55, 48, 63, 84, 37, 134, 62, 127, 204, 147, 61, 84, 5, 71, 190, 38, 1, 150, 62, 112, 49, 37, 190, 234, 132, 0, 191, 135, 200, 86, 63, 67, 128, 26, 63, 71, 219, 181, 62, 145, 127, 10, 63, 61, 173, 248, 62, 114, 73, 73, 191, 8, 161, 46, 61, 52, 116, 27, 190, 229, 38, 85, 63, 55, 54, 228, 190, 92, 168, 16, 63, 175, 70, 29, 63, 109, 130, 82, 62, 108, 95, 98, 63, 90, 120, 196, 62, 134, 149, 233, 62, 138, 253, 135, 190, 57, 175, 17, 63, 127, 158, 215, 61, 159, 180, 1, 191, 63, 58, 240, 190, 176, 131, 42, 63, 69, 131, 59, 60, 177, 190, 111, 191, 70, 229, 169, 62, 19, 145, 43, 189, 183, 62, 90, 63, 58, 207, 190, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {90, 203, 14, 191, 136, 230, 137, 62, 164, 71, 130, 58, 232, 47, 208, 190, 169, 105, 4, 63, 83, 234, 179, 62, 235, 215, 228, 190, 39, 186, 137, 189, 210, 21, 220, 62, 62, 85, 169, 62, 209, 75, 77, 62, 19, 84, 20, 63, 160, 195, 19, 190, 119, 85, 174, 190, 179, 233, 198, 190, 180, 232, 17, 191, 39, 155, 0, 190, 171, 51, 51, 190, 165, 211, 94, 189, 143, 186, 29, 63, 168, 176, 38, 191, 68, 56, 251, 190, 41, 191, 67, 62, 31, 236, 243, 189, 87, 131, 129, 62, 88, 94, 171, 62, 65, 104, 143, 62, 220, 233, 105, 62, 79, 229, 206, 62, 170, 127, 234, 190, 35, 123, 16, 62, 37, 218, 1, 62};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_0 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 3, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Input, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_1 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {140, 181, 6, 183, 230, 64, 235, 189, 16, 88, 37, 62, 13, 254, 122, 61, 175, 136, 111, 59, 15, 80, 24, 188, 254, 43, 106, 190, 122, 127, 15, 62, 108, 246, 213, 61, 212, 158, 178, 189, 88, 237, 59, 62, 247, 209, 0, 62, 134, 233, 168, 61, 134, 224, 45, 62, 242, 22, 169, 189, 78, 193, 108, 190, 118, 47, 37, 189, 237, 27, 49, 189, 54, 142, 0, 190, 145, 182, 97, 189, 27, 233, 48, 189, 199, 48, 2, 190, 195, 172, 16, 61, 31, 125, 88, 61, 138, 4, 96, 189, 130, 17, 220, 61, 125, 27, 211, 61, 20, 29, 199, 61, 43, 29, 123, 61, 61, 118, 133, 190, 110, 165, 201, 189, 239, 189, 27, 190, 7, 158, 80, 190, 213, 133, 64, 61, 133, 78, 230, 189, 101, 94, 8, 62, 41, 215, 191, 189, 41, 224, 239, 61, 120, 173, 117, 189, 0, 187, 237, 189, 172, 28, 236, 61, 192, 27, 131, 189, 88, 131, 154, 61, 243, 245, 151, 188, 49, 82, 193, 188, 84, 188, 42, 62, 56, 255, 146, 188, 122, 29, 53, 190, 66, 105, 167, 189, 9, 18, 142, 189, 6, 64, 168, 188, 85, 101, 198, 60, 110, 70, 100, 190, 85, 24, 22, 190, 89, 147, 132, 62, 77, 205, 108, 190, 242, 24, 113, 189, 240, 240, 27, 190, 33, 60, 16, 190, 190, 76, 241, 59, 74, 124, 110, 61, 153, 79, 71, 62, 178, 251, 175, 61, 49, 174, 172, 62, 150, 82, 108, 190, 104, 98, 35, 189, 132, 121, 94, 61, 71, 213, 9, 62, 200, 43, 29, 62, 226, 143, 207, 61, 129, 83, 215, 59, 63, 197, 27, 189, 78, 21, 24, 187, 88, 92, 210, 60, 2, 51, 61, 190, 180, 21, 218, 61, 215, 236, 38, 189, 51, 239, 5, 190, 26, 153, 206, 61, 158, 237, 168, 189, 157, 7, 87, 190, 199, 52, 196, 61, 195, 208, 79, 62, 75, 109, 35, 190, 178, 199, 158, 190, 122, 208, 19, 60, 60, 168, 120, 62, 255, 93, 192, 189, 88, 209, 173, 62, 158, 240, 79, 190, 185, 183, 82, 189, 161, 224, 77, 190, 235, 198, 141, 60, 37, 116, 211, 60, 70, 136, 105, 62, 254, 206, 163, 62, 79, 161, 194, 188, 148, 203, 31, 186, 84, 154, 99, 190, 96, 177, 174, 189, 104, 158, 202, 189, 223, 6, 90, 189, 123, 8, 110, 189, 29, 41, 253, 188, 109, 125, 23, 190, 0, 71, 92, 60, 132, 236, 194, 189, 201, 211, 143, 61, 151, 161, 121, 62, 25, 50, 73, 62, 208, 69, 8, 190, 174, 28, 127, 62, 48, 23, 159, 62, 234, 252, 60, 62, 135, 151, 242, 61, 237, 150, 30, 62, 176, 130, 48, 62, 30, 221, 11, 190, 2, 193, 34, 190, 247, 188, 243, 188, 209, 24, 9, 190, 145, 136, 159, 61, 41, 96, 247, 61, 132, 184, 47, 62, 192, 27, 56, 61, 10, 173, 175, 188, 83, 135, 46, 188, 198, 230, 248, 188, 197, 121, 9, 190, 142, 157, 49, 62, 184, 109, 249, 61, 11, 8, 24, 61, 151, 217, 125, 62, 244, 16, 195, 59, 28, 24, 132, 190, 6, 196, 210, 189, 89, 131, 237, 189, 195, 138, 223, 189, 165, 166, 7, 62, 217, 183, 181, 61, 73, 111, 89, 62, 130, 3, 63, 62, 145, 173, 185, 190, 253, 186, 58, 190, 243, 23, 62, 62, 116, 171, 57, 62, 175, 68, 9, 190, 60, 86, 18, 60, 107, 59, 173, 60, 60, 104, 75, 62, 2, 34, 128, 190, 220, 69, 3, 62, 250, 57, 86, 189, 162, 4, 48, 62, 30, 97, 222, 61, 202, 231, 128, 187, 191, 184, 255, 189, 104, 118, 208, 190, 40, 124, 114, 190, 220, 241, 130, 190, 8, 26, 60, 190, 163, 72, 123, 189, 136, 108, 81, 61, 174, 158, 76, 190, 106, 240, 255, 61, 1, 188, 229, 61, 1, 175, 166, 190, 182, 198, 28, 190, 209, 94, 236, 61, 5, 28, 3, 188, 33, 131, 141, 62, 200, 113, 52, 189, 205, 75, 34, 62, 72, 158, 177, 187, 112, 206, 223, 190, 239, 120, 128, 190, 188, 61, 101, 62, 148, 154, 148, 189, 252, 64, 220, 189, 33, 220, 251, 61, 162, 175, 72, 190, 1, 125, 49, 189, 247, 186, 66, 190, 149, 123, 78, 61, 23, 205, 53, 190, 26, 142, 176, 62, 181, 224, 115, 60, 27, 60, 148, 62, 115, 117, 217, 188, 39, 198, 245, 190, 121, 60, 184, 190, 11, 237, 75, 190, 23, 133, 242, 189, 89, 120, 96, 62, 203, 1, 7, 191, 220, 37, 35, 186, 157, 0, 246, 189, 238, 88, 174, 62, 100, 126, 179, 189, 8, 229, 54, 61, 175, 254, 143, 189, 6, 229, 20, 61, 57, 205, 156, 190, 68, 62, 17, 190, 168, 55, 157, 190, 175, 247, 159, 189, 1, 26, 64, 62, 194, 145, 213, 189, 144, 90, 39, 190, 12, 84, 229, 189, 100, 217, 218, 61, 54, 180, 105, 62, 62, 88, 59, 190, 248, 4, 59, 189, 168, 191, 104, 62, 104, 106, 90, 189, 178, 164, 21, 62, 17, 21, 161, 60, 154, 41, 96, 188, 137, 84, 16, 190, 6, 140, 156, 61, 112, 213, 25, 62, 114, 147, 166, 62, 110, 200, 133, 62, 41, 132, 106, 190, 32, 225, 107, 62, 196, 3, 76, 189, 242, 125, 34, 189, 230, 45, 143, 190, 202, 139, 163, 188, 213, 146, 174, 62, 83, 80, 124, 189, 211, 16, 158, 62, 193, 200, 16, 62, 241, 118, 193, 190, 7, 40, 172, 60, 16, 215, 173, 189, 217, 68, 61, 190, 203, 26, 211, 61, 167, 66, 236, 61, 52, 82, 38, 189, 166, 63, 224, 60, 246, 123, 131, 61, 46, 37, 103, 189, 243, 144, 131, 189, 161, 61, 109, 190, 19, 221, 64, 61, 64, 61, 42, 190, 106, 96, 43, 62, 197, 172, 208, 190, 173, 101, 191, 189, 143, 53, 129, 190, 194, 219, 153, 61, 50, 205, 123, 62, 208, 169, 26, 62, 116, 208, 194, 59, 49, 106, 64, 190, 93, 50, 2, 62, 166, 86, 59, 62, 42, 52, 246, 187, 91, 213, 182, 61, 68, 164, 48, 61, 191, 26, 182, 190, 53, 102, 112, 190, 140, 249, 56, 62, 187, 22, 156, 190, 140, 43, 125, 62, 146, 239, 243, 189, 44, 209, 51, 62, 203, 175, 32, 188, 61, 213, 215, 190, 24, 191, 196, 60, 208, 66, 29, 62, 150, 213, 102, 189, 234, 112, 128, 190, 81, 103, 22, 60, 56, 235, 18, 190, 164, 159, 131, 190, 244, 95, 23, 190, 80, 96, 125, 62, 184, 247, 144, 188, 149, 221, 38, 62, 90, 139, 192, 61, 115, 219, 167, 62, 59, 113, 170, 61, 178, 51, 42, 191, 123, 157, 200, 190, 97, 200, 36, 191, 147, 192, 164, 61, 72, 81, 128, 61, 193, 158, 135, 190, 40, 94, 232, 189, 74, 207, 197, 189, 121, 124, 17, 188, 203, 188, 130, 62, 244, 28, 247, 189, 156, 184, 182, 187, 4, 201, 215, 189, 131, 223, 56, 189, 207, 59, 64, 189, 81, 91, 138, 188, 109, 150, 81, 189, 147, 206, 225, 62, 33, 210, 193, 187, 35, 122, 36, 190, 43, 111, 134, 61, 210, 151, 143, 62, 76, 13, 218, 185, 148, 180, 227, 57, 108, 67, 58, 61, 187, 126, 12, 60, 40, 87, 153, 61, 138, 125, 241, 61, 131, 225, 3, 190, 50, 5, 38, 61, 71, 63, 186, 188, 114, 251, 56, 189, 211, 4, 209, 61, 237, 57, 128, 62, 38, 196, 9, 60, 124, 81, 29, 190, 16, 220, 8, 62, 48, 53, 197, 61, 121, 113, 161, 61, 153, 35, 16, 62, 202, 122, 172, 189, 230, 2, 191, 188, 227, 64, 139, 189, 137, 57, 100, 62, 104, 110, 21, 191, 248, 66, 106, 62, 253, 205, 56, 62, 177, 123, 4, 190, 202, 174, 62, 189, 253, 138, 205, 189, 7, 51, 241, 189, 155, 83, 110, 189, 193, 55, 48, 190, 142, 40, 171, 61, 36, 79, 13, 62, 53, 7, 220, 187, 243, 56, 205, 188, 2, 209, 62, 189, 5, 104, 134, 189, 252, 8, 197, 190, 88, 86, 234, 61, 202, 77, 220, 190, 82, 233, 188, 190, 233, 107, 24, 62, 82, 26, 247, 190, 65, 198, 132, 62, 59, 27, 143, 190, 253, 0, 73, 62, 88, 217, 176, 189, 86, 87, 48, 62, 48, 241, 211, 61, 135, 202, 129, 62, 198, 163, 121, 61, 147, 166, 121, 190, 98, 219, 211, 61, 236, 161, 72, 190, 226, 195, 63, 190, 104, 242, 124, 62, 251, 151, 45, 61, 32, 131, 112, 62, 205, 81, 240, 61, 223, 19, 162, 190, 98, 110, 90, 189, 114, 117, 244, 61, 230, 222, 156, 188, 132, 153, 9, 190, 123, 17, 137, 61, 65, 95, 181, 188, 201, 136, 37, 189, 90, 252, 17, 190, 112, 96, 104, 62, 46, 110, 87, 189, 58, 159, 135, 62, 119, 151, 204, 61, 221, 96, 23, 62, 157, 182, 211, 61, 126, 152, 118, 188, 214, 58, 192, 190, 15, 251, 130, 190, 182, 167, 117, 189, 93, 252, 120, 61, 170, 139, 145, 190, 15, 168, 225, 189, 252, 173, 161, 188, 194, 192, 215, 61, 130, 80, 83, 62, 136, 174, 84, 188, 1, 216, 136, 62, 31, 168, 129, 189, 188, 7, 206, 190, 17, 131, 90, 61, 148, 67, 26, 190, 69, 192, 237, 189, 55, 142, 241, 60, 32, 125, 44, 62, 78, 97, 83, 190, 91, 106, 83, 61, 221, 66, 37, 59, 151, 36, 201, 189, 2, 57, 171, 190, 140, 141, 163, 190, 172, 126, 130, 62, 57, 93, 30, 190, 204, 118, 161, 61, 43, 208, 234, 190, 163, 117, 16, 190, 217, 106, 104, 190, 52, 161, 81, 61, 13, 150, 199, 61, 53, 49, 98, 62, 232, 211, 40, 190, 37, 212, 51, 62, 7, 37, 33, 62, 136, 35, 154, 189, 2, 174, 16, 62, 127, 200, 149, 61, 19, 186, 189, 190, 90, 231, 131, 190, 39, 169, 53, 190, 104, 210, 98, 62, 89, 149, 83, 190, 101, 119, 52, 62, 46, 49, 230, 61, 47, 51, 197, 61, 72, 30, 223, 189, 75, 244, 237, 189, 168, 225, 16, 62, 15, 186, 59, 189, 143, 80, 226, 61, 183, 224, 185, 190, 7, 107, 63, 61, 7, 142, 231, 61, 56, 227, 164, 189, 253, 111, 103, 188, 186, 214, 43, 61, 95, 64, 165, 190, 221, 75, 136, 61, 127, 140, 100, 190, 26, 7, 27, 62, 145, 6, 30, 59, 228, 95, 164, 190, 203, 208, 5, 61, 144, 112, 61, 191, 135, 17, 46, 190, 19, 143, 8, 190, 70, 73, 158, 190, 163, 19, 23, 62, 60, 72, 204, 188, 130, 102, 179, 62, 200, 255, 135, 190, 227, 195, 197, 61, 137, 132, 180, 61, 148, 117, 145, 59, 148, 157, 147, 190, 174, 136, 130, 62, 58, 170, 143, 61, 205, 106, 193, 189, 232, 207, 173, 190, 69, 191, 89, 190, 154, 7, 223, 189, 102, 220, 140, 61, 60, 112, 136, 58, 150, 29, 198, 60, 246, 227, 70, 186, 200, 172, 201, 61, 11, 157, 245, 61, 81, 68, 88, 190, 231, 132, 152, 61, 34, 34, 237, 189, 64, 30, 141, 189, 2, 181, 248, 61, 122, 14, 113, 188, 192, 181, 100, 62, 4, 52, 61, 62, 118, 34, 14, 62, 224, 189, 218, 189, 41, 98, 39, 189, 189, 225, 242, 189, 125, 211, 188, 60, 227, 7, 198, 61, 149, 158, 86, 190, 240, 96, 28, 190, 233, 0, 56, 62, 56, 155, 248, 189, 227, 134, 64, 62, 156, 78, 157, 190, 68, 106, 187, 189, 121, 173, 227, 189, 24, 79, 8, 190, 8, 64, 251, 189, 209, 24, 25, 62, 255, 54, 208, 61, 27, 75, 102, 189, 171, 161, 115, 189, 183, 69, 16, 190, 68, 10, 11, 62, 245, 244, 85, 189, 221, 101, 170, 189, 42, 70, 200, 61, 195, 161, 15, 189, 26, 172, 108, 190, 125, 227, 91, 61, 186, 229, 32, 190, 246, 194, 240, 189, 125, 190, 82, 62, 203, 0, 49, 62, 144, 234, 101, 190, 245, 38, 24, 190, 131, 159, 254, 189, 46, 234, 140, 187, 91, 206, 186, 61, 231, 182, 36, 190, 18, 46, 228, 60, 38, 245, 28, 190, 8, 10, 226, 189, 131, 136, 38, 62, 227, 118, 166, 61, 151, 18, 25, 62, 219, 55, 172, 59, 68, 242, 30, 190, 28, 252, 3, 61, 172, 172, 190, 189, 157, 81, 96, 61, 171, 11, 44, 189, 161, 106, 161, 61, 40, 117, 191, 189, 79, 144, 55, 62, 28, 175, 219, 188, 52, 225, 227, 189, 193, 211, 141, 190, 48, 179, 165, 60, 215, 124, 18, 189, 51, 82, 199, 189, 9, 188, 196, 61, 86, 164, 166, 61, 63, 19, 99, 190, 22, 49, 214, 189, 121, 118, 23, 190, 44, 249, 252, 61, 211, 196, 124, 189, 116, 215, 50, 61, 64, 124, 100, 61, 155, 22, 47, 62, 102, 242, 51, 190, 71, 224, 212, 61, 174, 130, 59, 188, 251, 8, 95, 60, 225, 95, 180, 189, 21, 141, 192, 188, 180, 113, 194, 61, 231, 174, 161, 61, 110, 129, 179, 60, 125, 7, 58, 61, 190, 121, 86, 62, 89, 10, 38, 62, 98, 160, 133, 61, 129, 230, 77, 190, 214, 180, 188, 189, 246, 80, 188, 61, 112, 69, 60, 61, 213, 220, 70, 190, 94, 103, 85, 61, 181, 87, 62, 61, 253, 195, 79, 61, 162, 166, 4, 189, 184, 235, 137, 61, 95, 191, 81, 188, 123, 3, 72, 190, 234, 120, 152, 61, 251, 35, 18, 62, 191, 172, 201, 189, 255, 112, 51, 190, 130, 221, 210, 61, 189, 4, 205, 190, 59, 253, 137, 189, 186, 116, 174, 189, 197, 217, 173, 62, 241, 54, 177, 61, 126, 124, 107, 61, 24, 92, 119, 189, 225, 195, 30, 61, 58, 171, 20, 190, 114, 163, 134, 189, 31, 138, 254, 189, 150, 239, 196, 188, 175, 97, 23, 61, 184, 180, 0, 190, 73, 202, 207, 190, 50, 73, 122, 188, 16, 127, 92, 62, 248, 118, 65, 189, 223, 29, 17, 190, 185, 15, 238, 189, 232, 101, 137, 62, 119, 14, 38, 190, 53, 102, 78, 62, 17, 110, 150, 190, 49, 189, 202, 61, 251, 66, 55, 190, 191, 162, 89, 61, 173, 106, 6, 61, 16, 232, 144, 62, 238, 227, 140, 62, 195, 239, 42, 190, 150, 34, 167, 59, 213, 93, 11, 190, 152, 47, 150, 60, 244, 130, 35, 189, 204, 170, 108, 62, 92, 192, 44, 62, 179, 252, 0, 190, 165, 12, 69, 62, 71, 106, 79, 62, 96, 137, 5, 190, 98, 192, 183, 189, 118, 184, 234, 189, 163, 159, 109, 190, 20, 114, 186, 62, 224, 129, 178, 189, 43, 245, 171, 190, 30, 124, 155, 189, 205, 189, 153, 62, 97, 110, 149, 61, 157, 36, 167, 189, 205, 153, 114, 189, 90, 42, 1, 189, 10, 116, 117, 188, 198, 98, 20, 62, 76, 37, 119, 190, 113, 160, 56, 190, 115, 18, 64, 61, 130, 72, 91, 190, 10, 226, 71, 62, 242, 167, 203, 62, 213, 40, 250, 60, 154, 107, 43, 62, 247, 41, 38, 190, 12, 101, 46, 189, 110, 17, 208, 189, 246, 104, 41, 62, 116, 121, 6, 62, 156, 14, 119, 189, 140, 66, 42, 190, 87, 181, 30, 62, 65, 168, 14, 188, 124, 141, 64, 62, 47, 240, 45, 62, 110, 35, 155, 189, 117, 59, 9, 62, 242, 251, 196, 190, 180, 36, 142, 190, 37, 40, 209, 61, 151, 35, 142, 189, 119, 201, 142, 190, 80, 54, 5, 61, 134, 148, 28, 62, 42, 158, 52, 62, 72, 77, 109, 190, 126, 77, 99, 62, 121, 146, 65, 188, 9, 152, 102, 62, 200, 80, 11, 62, 98, 158, 235, 61, 232, 92, 172, 189, 195, 48, 207, 189, 211, 219, 92, 189, 234, 82, 155, 189, 54, 189, 174, 61, 55, 44, 197, 61, 194, 88, 243, 189, 5, 255, 243, 60, 49, 234, 174, 190, 35, 189, 128, 190, 132, 47, 214, 189, 129, 107, 73, 189, 114, 42, 173, 61, 3, 107, 237, 189, 92, 249, 178, 190, 194, 251, 139, 59, 90, 128, 144, 61, 91, 234, 2, 188, 228, 198, 23, 62, 225, 173, 110, 61, 194, 29, 215, 61, 148, 179, 1, 62, 209, 89, 43, 189, 110, 53, 20, 62, 83, 157, 131, 61, 96, 141, 10, 62, 109, 245, 82, 62, 123, 121, 192, 188, 205, 53, 255, 188, 201, 36, 237, 189, 156, 20, 189, 187, 228, 144, 142, 189, 236, 139, 44, 189, 169, 59, 147, 62, 126, 171, 14, 62, 90, 213, 170, 189, 15, 216, 132, 189, 67, 107, 114, 62, 201, 152, 136, 191, 69, 26, 202, 60, 137, 33, 160, 62, 132, 210, 130, 189, 60, 232, 167, 188, 49, 177, 95, 190, 233, 15, 65, 61, 164, 238, 53, 62, 71, 73, 56, 190, 245, 139, 39, 191, 197, 93, 130, 190, 214, 2, 21, 190, 126, 201, 14, 190, 244, 226, 31, 190, 160, 98, 145, 190, 106, 131, 53, 190, 135, 121, 224, 189, 199, 89, 152, 189, 154, 54, 119, 189, 165, 158, 58, 60, 47, 96, 206, 61, 18, 37, 57, 190, 55, 108, 214, 190, 12, 86, 141, 189, 166, 189, 19, 190, 101, 40, 103, 190, 200, 247, 132, 62, 195, 150, 135, 62, 99, 174, 154, 62, 199, 208, 68, 188, 78, 116, 3, 190, 137, 199, 17, 62, 255, 247, 162, 189, 187, 35, 114, 189, 36, 82, 194, 61, 6, 215, 137, 62, 157, 26, 62, 190, 216, 20, 211, 61, 23, 197, 229, 61, 193, 185, 11, 61, 211, 0, 192, 61, 107, 162, 204, 61, 115, 218, 243, 189, 31, 218, 18, 189, 216, 8, 146, 190, 99, 121, 197, 189, 116, 43, 39, 190, 88, 168, 180, 61, 36, 22, 118, 189, 10, 223, 131, 61, 159, 166, 147, 189, 68, 34, 1, 189, 99, 246, 233, 188, 176, 92, 1, 62, 83, 7, 28, 62, 191, 229, 46, 62, 250, 32, 89, 62, 37, 67, 22, 62, 207, 161, 240, 189, 185, 125, 198, 188, 47, 46, 75, 61, 186, 223, 129, 190, 208, 94, 45, 62, 168, 129, 176, 61, 3, 41, 227, 60, 250, 176, 218, 189, 32, 127, 40, 62, 143, 226, 7, 62, 47, 78, 142, 190, 251, 144, 25, 190, 110, 235, 26, 190, 180, 122, 30, 190, 244, 232, 151, 62, 202, 170, 111, 62, 220, 229, 33, 61, 179, 49, 0, 62, 181, 126, 31, 191, 36, 135, 125, 190, 31, 132, 22, 62, 182, 34, 88, 61, 222, 71, 163, 189, 38, 246, 41, 62, 167, 52, 57, 61, 12, 233, 173, 188, 72, 80, 233, 188, 31, 33, 14, 62, 28, 122, 133, 190, 117, 160, 104, 62, 27, 198, 193, 60, 133, 119, 211, 61, 145, 187, 191, 188, 89, 199, 214, 190, 241, 206, 163, 190, 214, 179, 74, 190, 66, 229, 142, 61, 3, 1, 82, 60, 163, 231, 156, 190, 112, 198, 48, 62, 136, 134, 246, 189, 196, 232, 220, 62, 43, 221, 135, 190, 4, 115, 59, 62, 199, 68, 157, 61, 129, 122, 25, 189, 250, 55, 174, 190, 38, 65, 190, 61, 213, 211, 22, 190, 55, 230, 69, 62, 104, 227, 225, 62, 224, 232, 218, 189, 36, 71, 92, 190, 204, 9, 35, 62, 205, 134, 119, 62, 87, 28, 249, 61, 148, 33, 4, 62, 126, 18, 119, 62, 175, 206, 32, 189, 216, 77, 6, 189, 172, 239, 253, 62, 13, 171, 247, 189, 7, 243, 68, 189, 164, 118, 117, 62, 5, 251, 187, 190, 159, 249, 128, 189, 9, 217, 129, 189, 253, 27, 205, 189, 166, 200, 177, 189, 104, 123, 152, 61, 249, 14, 171, 190, 176, 218, 99, 61, 77, 119, 49, 189, 228, 58, 220, 61, 73, 10, 15, 189, 182, 184, 105, 189, 89, 230, 69, 62, 205, 24, 41, 61, 252, 209, 236, 189, 170, 182, 0, 61, 82, 53, 74, 190, 29, 96, 159, 189, 203, 254, 143, 61, 185, 97, 50, 188, 250, 32, 80, 190, 10, 58, 74, 190, 170, 197, 206, 61, 110, 160, 160, 61, 60, 135, 139, 189, 240, 229, 95, 189, 5, 226, 149, 61, 188, 213, 70, 190, 10, 28, 177, 62, 51, 59, 157, 189, 134, 128, 7, 190, 133, 159, 22, 189, 131, 111, 156, 190, 8, 232, 150, 189, 255, 132, 153, 61, 1, 57, 220, 62, 35, 141, 246, 60, 127, 73, 172, 61, 148, 54, 123, 190, 208, 227, 8, 188, 178, 70, 174, 189, 176, 118, 8, 62, 148, 80, 33, 62, 64, 81, 45, 190, 157, 139, 178, 61, 3, 211, 31, 61, 243, 254, 133, 190, 15, 66, 17, 190, 85, 116, 93, 189, 4, 137, 116, 189, 178, 83, 9, 62, 13, 170, 162, 61, 252, 60, 20, 190, 2, 150, 148, 61, 106, 177, 173, 60, 85, 121, 103, 61, 4, 121, 19, 190, 157, 40, 25, 189, 106, 103, 53, 62, 27, 203, 250, 189, 210, 221, 150, 189, 92, 29, 80, 190, 42, 171, 199, 189, 246, 111, 88, 60, 31, 73, 113, 189, 15, 133, 31, 62, 221, 132, 47, 62, 236, 239, 193, 62, 101, 224, 145, 190, 139, 59, 24, 62, 224, 93, 113, 191, 62, 144, 78, 61, 6, 95, 19, 62, 57, 205, 163, 62, 137, 66, 13, 62, 231, 145, 145, 190, 129, 61, 93, 62, 112, 250, 117, 62, 96, 5, 164, 190, 106, 216, 218, 190, 66, 21, 133, 190, 68, 197, 218, 189, 144, 43, 133, 62, 114, 157, 117, 60, 45, 170, 18, 190, 55, 243, 133, 190, 59, 241, 23, 62, 169, 252, 162, 60, 46, 213, 148, 190, 62, 161, 41, 190, 204, 57, 11, 62, 122, 80, 131, 189, 11, 167, 34, 189, 197, 193, 193, 190, 232, 81, 27, 190, 92, 81, 110, 190, 128, 182, 138, 61, 0, 96, 183, 62, 64, 38, 230, 62, 101, 57, 162, 62, 54, 226, 22, 190, 178, 198, 34, 61, 249, 82, 129, 190, 21, 123, 237, 189, 175, 6, 26, 190, 90, 124, 209, 61, 242, 178, 140, 61, 132, 84, 34, 62, 185, 15, 232, 188, 222, 185, 200, 189, 205, 94, 199, 190, 187, 121, 129, 60, 241, 2, 120, 189, 177, 226, 186, 189, 97, 232, 72, 189, 117, 96, 5, 190, 8, 56, 159, 190, 5, 56, 184, 187, 245, 67, 250, 61, 231, 68, 30, 62, 65, 136, 7, 189, 91, 114, 211, 189, 65, 155, 131, 62, 159, 20, 148, 190, 38, 160, 196, 60, 137, 170, 200, 190, 204, 142, 142, 190, 150, 227, 138, 190, 174, 194, 211, 189, 68, 145, 28, 62, 189, 22, 87, 62, 91, 117, 140, 189, 75, 8, 108, 61, 46, 94, 11, 190, 194, 254, 22, 190, 56, 207, 86, 188, 89, 80, 21, 61, 49, 27, 203, 61, 217, 251, 86, 61, 128, 157, 197, 61, 210, 71, 146, 189, 195, 249, 5, 62, 198, 53, 4, 190, 76, 208, 31, 62, 28, 177, 145, 189, 7, 109, 1, 190, 56, 36, 111, 189, 47, 202, 232, 61, 0, 29, 131, 190, 62, 148, 0, 190, 29, 5, 51, 62, 141, 160, 20, 62, 228, 140, 104, 61, 133, 53, 218, 188, 31, 231, 200, 189, 219, 166, 169, 61, 24, 223, 73, 62, 151, 84, 152, 189, 160, 230, 164, 188, 183, 57, 5, 62, 120, 24, 166, 61, 20, 53, 50, 62, 44, 109, 205, 61, 215, 65, 198, 62, 18, 172, 147, 60, 109, 162, 252, 61, 223, 63, 34, 62, 180, 90, 10, 62, 167, 71, 48, 62, 76, 248, 143, 61, 28, 214, 63, 190, 241, 121, 55, 61, 46, 182, 129, 60, 216, 181, 84, 61, 128, 239, 148, 61, 140, 225, 156, 61, 86, 158, 51, 189, 69, 215, 52, 61, 81, 184, 71, 190, 133, 224, 97, 190, 63, 63, 122, 61, 117, 103, 156, 61, 101, 130, 215, 188, 136, 34, 55, 62, 49, 11, 31, 190, 10, 117, 105, 189, 39, 105, 131, 190, 4, 15, 247, 61, 44, 40, 169, 189, 227, 187, 46, 60, 228, 229, 164, 61, 77, 18, 149, 61, 74, 86, 163, 189, 47, 247, 227, 188, 19, 22, 6, 190, 86, 186, 36, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {145, 146, 168, 187, 159, 13, 34, 62, 7, 141, 240, 60, 28, 96, 10, 189, 5, 69, 138, 62, 201, 14, 27, 62, 74, 41, 135, 61, 27, 60, 13, 190, 17, 84, 144, 62, 111, 71, 40, 62, 126, 24, 231, 60, 254, 125, 237, 61, 243, 84, 186, 189, 203, 191, 136, 61, 190, 94, 167, 61, 58, 58, 171, 61, 209, 96, 140, 62, 78, 71, 68, 190, 135, 252, 72, 62, 91, 231, 246, 61, 76, 14, 3, 61, 132, 111, 225, 60, 41, 98, 183, 61, 46, 126, 199, 62, 30, 13, 54, 61, 86, 93, 103, 189, 11, 63, 98, 62, 2, 15, 48, 62, 35, 193, 101, 62, 44, 150, 130, 61, 249, 46, 56, 62, 136, 128, 51, 60};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_1 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::RELU, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Normal, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace layer_2 {
        namespace weights {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {96, 97, 23, 190, 122, 67, 68, 62, 251, 84, 95, 62, 56, 216, 61, 190, 19, 164, 243, 190, 122, 186, 17, 191, 105, 242, 113, 62, 164, 237, 164, 190, 116, 231, 57, 191, 107, 110, 127, 62, 9, 135, 128, 190, 220, 87, 131, 190, 171, 135, 221, 190, 119, 118, 202, 190, 173, 229, 58, 189, 179, 250, 17, 190, 131, 12, 92, 188, 223, 185, 198, 60, 228, 142, 192, 62, 246, 62, 139, 62, 22, 204, 132, 190, 154, 111, 140, 190, 211, 231, 74, 63, 19, 56, 221, 189, 55, 146, 180, 190, 205, 136, 237, 62, 222, 210, 147, 62, 140, 221, 62, 62, 0, 47, 77, 63, 145, 71, 5, 191, 180, 2, 0, 62, 123, 212, 3, 190, 71, 105, 33, 189, 122, 245, 94, 189, 39, 117, 111, 60, 243, 31, 37, 60, 162, 59, 169, 189, 117, 179, 143, 187, 12, 245, 19, 189, 141, 139, 21, 62, 216, 143, 146, 186, 60, 105, 21, 62, 48, 52, 152, 187, 37, 219, 217, 61, 71, 32, 212, 187, 196, 241, 42, 188, 26, 194, 179, 190, 18, 242, 26, 61, 215, 255, 143, 190, 81, 221, 111, 61, 95, 57, 72, 188, 8, 117, 6, 61, 248, 214, 251, 188, 240, 116, 210, 61, 45, 241, 132, 189, 47, 108, 187, 190, 245, 197, 239, 61, 90, 4, 213, 61, 22, 61, 6, 190, 150, 77, 141, 189, 95, 249, 213, 188, 133, 240, 135, 61, 175, 27, 23, 190, 28, 164, 24, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 2, 32, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Weights>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
        namespace biases {
            namespace parameters_memory {
                static_assert(sizeof(unsigned char) == 1);
                alignas(float) const unsigned char memory[] = {127, 62, 149, 61, 175, 251, 132, 190};
                using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
                using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
                const CONTAINER_TYPE container = {(float*)memory}; 
            }
            using PARAMETER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::spec<parameters_memory::CONTAINER_TYPE, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::categories::Biases>;
            const RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::Plain::instance<PARAMETER_SPEC> parameters = {parameters_memory::container};
        }
    }
    namespace layer_2 {
        using SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Specification<float, unsigned long, 32, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::activation_functions::ActivationFunction::IDENTITY, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::parameters::groups::Output, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamicTag, true, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>; 
        template <typename CAPABILITY>
        using TEMPLATE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward;
        using TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layers::dense::Layer<CAPABILITY, SPEC>;
        const TYPE layer = {weights::parameters, biases::parameters};
    }
    namespace model_definition {
        using CAPABILITY = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn::layer_capability::Forward; 
        using IF = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::nn_models::sequential::Interface<CAPABILITY>;
        using MODEL = IF::Module<layer_0::TEMPLATE, IF::Module<layer_1::TEMPLATE, IF::Module<layer_2::TEMPLATE>>>;
    }
    using MODEL = model_definition::MODEL;
    const MODEL model = {layer_0::layer, {layer_1::layer, {layer_2::layer, {}}}};
}
// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::input {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {181, 2, 96, 63, 54, 182, 145, 190, 250, 12, 151, 62};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 3, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

// NOTE: This code export assumes that the endianness of the target platform is the same as the endianness of the source platform
#include <rl_tools/containers.h>
namespace rl_tools::checkpoint::example::output {
    static_assert(sizeof(unsigned char) == 1);
    alignas(float) const unsigned char memory[] = {152, 203, 116, 63, 232, 204, 152, 191};
    using CONTAINER_SPEC = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::Specification<float, unsigned long, 1, 2, RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::matrix::layouts::RowMajorAlignment<unsigned long, 1>>;
    using CONTAINER_TYPE = RL_TOOLS_NAMESPACE_WRAPPER ::rl_tools::MatrixDynamic<CONTAINER_SPEC>;
    const CONTAINER_TYPE container = {(float*)memory}; 
}

namespace rl_tools::checkpoint::meta{
   char name[] = "experiments/2024-05-27_19-39-12/b738cd1_zoo_algorithm_environment/sac_pendulum-v1/0051/steps/000000000004000";
   char commit_hash[] = "b738cd18dcbee2b66aa05c642653771cd0e46c8b";
}